
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	e0 ef 00 20 f9 67 00 00 d9 f3 00 00 b1 67 00 00     ... .g.......g..
  10:	b1 67 00 00 b1 67 00 00 b1 67 00 00 00 00 00 00     .g...g...g......
	...
  2c:	7d 5f 00 00 b1 67 00 00 00 00 00 00 25 5f 00 00     }_...g......%_..
  3c:	b1 67 00 00                                         .g..

00000040 <_irq_vector_table>:
  40:	5d 60 00 00 5d 60 00 00 5d 60 00 00 5d 60 00 00     ]`..]`..]`..]`..
  50:	5d 60 00 00 5d 60 00 00 5d 60 00 00 5d 60 00 00     ]`..]`..]`..]`..
  60:	5d 60 00 00 5d 60 00 00 5d 60 00 00 5d 60 00 00     ]`..]`..]`..]`..
  70:	5d 60 00 00 5d 60 00 00 5d 60 00 00 5d 60 00 00     ]`..]`..]`..]`..
  80:	5d 60 00 00 5d 60 00 00 5d 60 00 00 5d 60 00 00     ]`..]`..]`..]`..
  90:	5d 60 00 00 5d 60 00 00 5d 60 00 00 5d 60 00 00     ]`..]`..]`..]`..
  a0:	5d 60 00 00 5d 60 00 00 5d 60 00 00 5d 60 00 00     ]`..]`..]`..]`..
  b0:	5d 60 00 00 5d 60 00 00 5d 60 00 00 5d 60 00 00     ]`..]`..]`..]`..
  c0:	5d 60 00 00 5d 60 00 00 5d 60 00 00 5d 60 00 00     ]`..]`..]`..]`..
  d0:	5d 60 00 00 5d 60 00 00 5d 60 00 00 5d 60 00 00     ]`..]`..]`..]`..
  e0:	5d 60 00 00 5d 60 00 00 5d 60 00 00 5d 60 00 00     ]`..]`..]`..]`..
  f0:	5d 60 00 00 5d 60 00 00 5d 60 00 00 5d 60 00 00     ]`..]`..]`..]`..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <__adddf3+0x1ee>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <__adddf3+0x1da>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__adddf3+0x124>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <__adddf3+0x240>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <__adddf3+0x16e>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <__adddf3+0x16a>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <__adddf3+0x184>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <__adddf3+0x1d2>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <__adddf3+0x1ba>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <__adddf3+0x24e>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <__adddf3+0x212>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <__adddf3+0x230>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__adddf3+0x138>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__adddf3+0x138>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__adddf3+0x138>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__aeabi_dmul+0x1dc>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__aeabi_dmul+0xde>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__aeabi_dmul+0x238>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__aeabi_dmul+0x164>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__aeabi_dmul+0x134>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__aeabi_dmul+0x1c2>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__aeabi_dmul+0x1a6>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__aeabi_dmul+0x1c6>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__aeabi_dmul+0x206>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__aeabi_dmul+0x19c>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__aeabi_dmul+0x24a>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__aeabi_dmul+0x222>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__aeabi_dmul+0x24a>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__aeabi_dmul+0x234>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__aeabi_dmul+0x24a>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__aeabi_dmul+0xde>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__aeabi_dmul+0xde>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__aeabi_dmul+0xde>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__aeabi_dmul+0x24a>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__aeabi_dmul+0x24a>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__aeabi_dmul+0x234>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__aeabi_dmul+0x24a>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__aeabi_dmul+0x1f8>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__aeabi_dmul+0x24a>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__aeabi_dmul+0x19c>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__aeabi_dmul+0x234>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__aeabi_dmul+0x1f8>
     93a:	e712      	b.n	762 <__aeabi_dmul+0x24a>

0000093c <__aeabi_d2f>:
     93c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     944:	bf24      	itt	cs
     946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     94a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     94e:	d90d      	bls.n	96c <__aeabi_d2f+0x30>
     950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     95c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     964:	bf08      	it	eq
     966:	f020 0001 	biceq.w	r0, r0, #1
     96a:	4770      	bx	lr
     96c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     970:	d121      	bne.n	9b6 <__aeabi_d2f+0x7a>
     972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     976:	bfbc      	itt	lt
     978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     97c:	4770      	bxlt	lr
     97e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     982:	ea4f 5252 	mov.w	r2, r2, lsr #21
     986:	f1c2 0218 	rsb	r2, r2, #24
     98a:	f1c2 0c20 	rsb	ip, r2, #32
     98e:	fa10 f30c 	lsls.w	r3, r0, ip
     992:	fa20 f002 	lsr.w	r0, r0, r2
     996:	bf18      	it	ne
     998:	f040 0001 	orrne.w	r0, r0, #1
     99c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     9a4:	fa03 fc0c 	lsl.w	ip, r3, ip
     9a8:	ea40 000c 	orr.w	r0, r0, ip
     9ac:	fa23 f302 	lsr.w	r3, r3, r2
     9b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     9b4:	e7cc      	b.n	950 <__aeabi_d2f+0x14>
     9b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     9ba:	d107      	bne.n	9cc <__aeabi_d2f+0x90>
     9bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     9c0:	bf1e      	ittt	ne
     9c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     9c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     9ca:	4770      	bxne	lr
     9cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     9d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     9d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     9d8:	4770      	bx	lr
     9da:	bf00      	nop

000009dc <__aeabi_uldivmod>:
     9dc:	b953      	cbnz	r3, 9f4 <__aeabi_uldivmod+0x18>
     9de:	b94a      	cbnz	r2, 9f4 <__aeabi_uldivmod+0x18>
     9e0:	2900      	cmp	r1, #0
     9e2:	bf08      	it	eq
     9e4:	2800      	cmpeq	r0, #0
     9e6:	bf1c      	itt	ne
     9e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     9ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     9f0:	f000 b80c 	b.w	a0c <__aeabi_idiv0>
     9f4:	f1ad 0c08 	sub.w	ip, sp, #8
     9f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     9fc:	f000 f8ce 	bl	b9c <__udivmoddi4>
     a00:	f8dd e004 	ldr.w	lr, [sp, #4]
     a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a08:	b004      	add	sp, #16
     a0a:	4770      	bx	lr

00000a0c <__aeabi_idiv0>:
     a0c:	4770      	bx	lr
     a0e:	bf00      	nop

00000a10 <__gedf2>:
     a10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     a14:	e006      	b.n	a24 <__cmpdf2+0x4>
     a16:	bf00      	nop

00000a18 <__ledf2>:
     a18:	f04f 0c01 	mov.w	ip, #1
     a1c:	e002      	b.n	a24 <__cmpdf2+0x4>
     a1e:	bf00      	nop

00000a20 <__cmpdf2>:
     a20:	f04f 0c01 	mov.w	ip, #1
     a24:	f84d cd04 	str.w	ip, [sp, #-4]!
     a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a34:	bf18      	it	ne
     a36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     a3a:	d01b      	beq.n	a74 <__cmpdf2+0x54>
     a3c:	b001      	add	sp, #4
     a3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     a42:	bf0c      	ite	eq
     a44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     a48:	ea91 0f03 	teqne	r1, r3
     a4c:	bf02      	ittt	eq
     a4e:	ea90 0f02 	teqeq	r0, r2
     a52:	2000      	moveq	r0, #0
     a54:	4770      	bxeq	lr
     a56:	f110 0f00 	cmn.w	r0, #0
     a5a:	ea91 0f03 	teq	r1, r3
     a5e:	bf58      	it	pl
     a60:	4299      	cmppl	r1, r3
     a62:	bf08      	it	eq
     a64:	4290      	cmpeq	r0, r2
     a66:	bf2c      	ite	cs
     a68:	17d8      	asrcs	r0, r3, #31
     a6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     a6e:	f040 0001 	orr.w	r0, r0, #1
     a72:	4770      	bx	lr
     a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a7c:	d102      	bne.n	a84 <__cmpdf2+0x64>
     a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     a82:	d107      	bne.n	a94 <__cmpdf2+0x74>
     a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a8c:	d1d6      	bne.n	a3c <__cmpdf2+0x1c>
     a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     a92:	d0d3      	beq.n	a3c <__cmpdf2+0x1c>
     a94:	f85d 0b04 	ldr.w	r0, [sp], #4
     a98:	4770      	bx	lr
     a9a:	bf00      	nop

00000a9c <__aeabi_cdrcmple>:
     a9c:	4684      	mov	ip, r0
     a9e:	4610      	mov	r0, r2
     aa0:	4662      	mov	r2, ip
     aa2:	468c      	mov	ip, r1
     aa4:	4619      	mov	r1, r3
     aa6:	4663      	mov	r3, ip
     aa8:	e000      	b.n	aac <__aeabi_cdcmpeq>
     aaa:	bf00      	nop

00000aac <__aeabi_cdcmpeq>:
     aac:	b501      	push	{r0, lr}
     aae:	f7ff ffb7 	bl	a20 <__cmpdf2>
     ab2:	2800      	cmp	r0, #0
     ab4:	bf48      	it	mi
     ab6:	f110 0f00 	cmnmi.w	r0, #0
     aba:	bd01      	pop	{r0, pc}

00000abc <__aeabi_dcmpeq>:
     abc:	f84d ed08 	str.w	lr, [sp, #-8]!
     ac0:	f7ff fff4 	bl	aac <__aeabi_cdcmpeq>
     ac4:	bf0c      	ite	eq
     ac6:	2001      	moveq	r0, #1
     ac8:	2000      	movne	r0, #0
     aca:	f85d fb08 	ldr.w	pc, [sp], #8
     ace:	bf00      	nop

00000ad0 <__aeabi_dcmplt>:
     ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
     ad4:	f7ff ffea 	bl	aac <__aeabi_cdcmpeq>
     ad8:	bf34      	ite	cc
     ada:	2001      	movcc	r0, #1
     adc:	2000      	movcs	r0, #0
     ade:	f85d fb08 	ldr.w	pc, [sp], #8
     ae2:	bf00      	nop

00000ae4 <__aeabi_dcmple>:
     ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
     ae8:	f7ff ffe0 	bl	aac <__aeabi_cdcmpeq>
     aec:	bf94      	ite	ls
     aee:	2001      	movls	r0, #1
     af0:	2000      	movhi	r0, #0
     af2:	f85d fb08 	ldr.w	pc, [sp], #8
     af6:	bf00      	nop

00000af8 <__aeabi_dcmpge>:
     af8:	f84d ed08 	str.w	lr, [sp, #-8]!
     afc:	f7ff ffce 	bl	a9c <__aeabi_cdrcmple>
     b00:	bf94      	ite	ls
     b02:	2001      	movls	r0, #1
     b04:	2000      	movhi	r0, #0
     b06:	f85d fb08 	ldr.w	pc, [sp], #8
     b0a:	bf00      	nop

00000b0c <__aeabi_dcmpgt>:
     b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
     b10:	f7ff ffc4 	bl	a9c <__aeabi_cdrcmple>
     b14:	bf34      	ite	cc
     b16:	2001      	movcc	r0, #1
     b18:	2000      	movcs	r0, #0
     b1a:	f85d fb08 	ldr.w	pc, [sp], #8
     b1e:	bf00      	nop

00000b20 <__aeabi_dcmpun>:
     b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b28:	d102      	bne.n	b30 <__aeabi_dcmpun+0x10>
     b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     b2e:	d10a      	bne.n	b46 <__aeabi_dcmpun+0x26>
     b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b38:	d102      	bne.n	b40 <__aeabi_dcmpun+0x20>
     b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     b3e:	d102      	bne.n	b46 <__aeabi_dcmpun+0x26>
     b40:	f04f 0000 	mov.w	r0, #0
     b44:	4770      	bx	lr
     b46:	f04f 0001 	mov.w	r0, #1
     b4a:	4770      	bx	lr

00000b4c <__aeabi_d2iz>:
     b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     b54:	d215      	bcs.n	b82 <__aeabi_d2iz+0x36>
     b56:	d511      	bpl.n	b7c <__aeabi_d2iz+0x30>
     b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     b60:	d912      	bls.n	b88 <__aeabi_d2iz+0x3c>
     b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b72:	fa23 f002 	lsr.w	r0, r3, r2
     b76:	bf18      	it	ne
     b78:	4240      	negne	r0, r0
     b7a:	4770      	bx	lr
     b7c:	f04f 0000 	mov.w	r0, #0
     b80:	4770      	bx	lr
     b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     b86:	d105      	bne.n	b94 <__aeabi_d2iz+0x48>
     b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     b8c:	bf08      	it	eq
     b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     b92:	4770      	bx	lr
     b94:	f04f 0000 	mov.w	r0, #0
     b98:	4770      	bx	lr
     b9a:	bf00      	nop

00000b9c <__udivmoddi4>:
     b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ba0:	4607      	mov	r7, r0
     ba2:	468c      	mov	ip, r1
     ba4:	4608      	mov	r0, r1
     ba6:	9e09      	ldr	r6, [sp, #36]	; 0x24
     ba8:	4615      	mov	r5, r2
     baa:	463c      	mov	r4, r7
     bac:	4619      	mov	r1, r3
     bae:	2b00      	cmp	r3, #0
     bb0:	f040 80c6 	bne.w	d40 <__udivmoddi4+0x1a4>
     bb4:	4282      	cmp	r2, r0
     bb6:	fab2 f782 	clz	r7, r2
     bba:	d946      	bls.n	c4a <__udivmoddi4+0xae>
     bbc:	b14f      	cbz	r7, bd2 <__udivmoddi4+0x36>
     bbe:	f1c7 0e20 	rsb	lr, r7, #32
     bc2:	fa24 fe0e 	lsr.w	lr, r4, lr
     bc6:	fa00 f307 	lsl.w	r3, r0, r7
     bca:	40bd      	lsls	r5, r7
     bcc:	ea4e 0c03 	orr.w	ip, lr, r3
     bd0:	40bc      	lsls	r4, r7
     bd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
     bd6:	fa1f fe85 	uxth.w	lr, r5
     bda:	fbbc f9f8 	udiv	r9, ip, r8
     bde:	0c22      	lsrs	r2, r4, #16
     be0:	fb08 c319 	mls	r3, r8, r9, ip
     be4:	fb09 fa0e 	mul.w	sl, r9, lr
     be8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     bec:	459a      	cmp	sl, r3
     bee:	d928      	bls.n	c42 <__udivmoddi4+0xa6>
     bf0:	18eb      	adds	r3, r5, r3
     bf2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     bf6:	d204      	bcs.n	c02 <__udivmoddi4+0x66>
     bf8:	459a      	cmp	sl, r3
     bfa:	d902      	bls.n	c02 <__udivmoddi4+0x66>
     bfc:	f1a9 0002 	sub.w	r0, r9, #2
     c00:	442b      	add	r3, r5
     c02:	eba3 030a 	sub.w	r3, r3, sl
     c06:	b2a4      	uxth	r4, r4
     c08:	fbb3 f2f8 	udiv	r2, r3, r8
     c0c:	fb08 3312 	mls	r3, r8, r2, r3
     c10:	fb02 fe0e 	mul.w	lr, r2, lr
     c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c18:	45a6      	cmp	lr, r4
     c1a:	d914      	bls.n	c46 <__udivmoddi4+0xaa>
     c1c:	192c      	adds	r4, r5, r4
     c1e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     c22:	d203      	bcs.n	c2c <__udivmoddi4+0x90>
     c24:	45a6      	cmp	lr, r4
     c26:	d901      	bls.n	c2c <__udivmoddi4+0x90>
     c28:	1e93      	subs	r3, r2, #2
     c2a:	442c      	add	r4, r5
     c2c:	eba4 040e 	sub.w	r4, r4, lr
     c30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     c34:	b11e      	cbz	r6, c3e <__udivmoddi4+0xa2>
     c36:	40fc      	lsrs	r4, r7
     c38:	2300      	movs	r3, #0
     c3a:	6034      	str	r4, [r6, #0]
     c3c:	6073      	str	r3, [r6, #4]
     c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c42:	4648      	mov	r0, r9
     c44:	e7dd      	b.n	c02 <__udivmoddi4+0x66>
     c46:	4613      	mov	r3, r2
     c48:	e7f0      	b.n	c2c <__udivmoddi4+0x90>
     c4a:	b902      	cbnz	r2, c4e <__udivmoddi4+0xb2>
     c4c:	deff      	udf	#255	; 0xff
     c4e:	bb87      	cbnz	r7, cb2 <__udivmoddi4+0x116>
     c50:	1a83      	subs	r3, r0, r2
     c52:	2101      	movs	r1, #1
     c54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     c58:	b2aa      	uxth	r2, r5
     c5a:	fbb3 fcfe 	udiv	ip, r3, lr
     c5e:	0c20      	lsrs	r0, r4, #16
     c60:	fb0e 331c 	mls	r3, lr, ip, r3
     c64:	fb0c f802 	mul.w	r8, ip, r2
     c68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     c6c:	4598      	cmp	r8, r3
     c6e:	d963      	bls.n	d38 <__udivmoddi4+0x19c>
     c70:	18eb      	adds	r3, r5, r3
     c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     c76:	d204      	bcs.n	c82 <__udivmoddi4+0xe6>
     c78:	4598      	cmp	r8, r3
     c7a:	d902      	bls.n	c82 <__udivmoddi4+0xe6>
     c7c:	f1ac 0002 	sub.w	r0, ip, #2
     c80:	442b      	add	r3, r5
     c82:	eba3 0308 	sub.w	r3, r3, r8
     c86:	b2a4      	uxth	r4, r4
     c88:	fbb3 fcfe 	udiv	ip, r3, lr
     c8c:	fb0e 331c 	mls	r3, lr, ip, r3
     c90:	fb0c f202 	mul.w	r2, ip, r2
     c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c98:	42a2      	cmp	r2, r4
     c9a:	d94f      	bls.n	d3c <__udivmoddi4+0x1a0>
     c9c:	192c      	adds	r4, r5, r4
     c9e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     ca2:	d204      	bcs.n	cae <__udivmoddi4+0x112>
     ca4:	42a2      	cmp	r2, r4
     ca6:	d902      	bls.n	cae <__udivmoddi4+0x112>
     ca8:	f1ac 0302 	sub.w	r3, ip, #2
     cac:	442c      	add	r4, r5
     cae:	1aa4      	subs	r4, r4, r2
     cb0:	e7be      	b.n	c30 <__udivmoddi4+0x94>
     cb2:	f1c7 0c20 	rsb	ip, r7, #32
     cb6:	fa20 f80c 	lsr.w	r8, r0, ip
     cba:	fa00 f307 	lsl.w	r3, r0, r7
     cbe:	fa24 fc0c 	lsr.w	ip, r4, ip
     cc2:	40bd      	lsls	r5, r7
     cc4:	ea4c 0203 	orr.w	r2, ip, r3
     cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     ccc:	b2ab      	uxth	r3, r5
     cce:	fbb8 fcfe 	udiv	ip, r8, lr
     cd2:	0c11      	lsrs	r1, r2, #16
     cd4:	fb0e 801c 	mls	r0, lr, ip, r8
     cd8:	fb0c f903 	mul.w	r9, ip, r3
     cdc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     ce0:	4581      	cmp	r9, r0
     ce2:	fa04 f407 	lsl.w	r4, r4, r7
     ce6:	d923      	bls.n	d30 <__udivmoddi4+0x194>
     ce8:	1828      	adds	r0, r5, r0
     cea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     cee:	d204      	bcs.n	cfa <__udivmoddi4+0x15e>
     cf0:	4581      	cmp	r9, r0
     cf2:	d902      	bls.n	cfa <__udivmoddi4+0x15e>
     cf4:	f1ac 0102 	sub.w	r1, ip, #2
     cf8:	4428      	add	r0, r5
     cfa:	eba0 0009 	sub.w	r0, r0, r9
     cfe:	b292      	uxth	r2, r2
     d00:	fbb0 fcfe 	udiv	ip, r0, lr
     d04:	fb0e 001c 	mls	r0, lr, ip, r0
     d08:	fb0c f803 	mul.w	r8, ip, r3
     d0c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     d10:	4598      	cmp	r8, r3
     d12:	d90f      	bls.n	d34 <__udivmoddi4+0x198>
     d14:	18eb      	adds	r3, r5, r3
     d16:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     d1a:	d204      	bcs.n	d26 <__udivmoddi4+0x18a>
     d1c:	4598      	cmp	r8, r3
     d1e:	d902      	bls.n	d26 <__udivmoddi4+0x18a>
     d20:	f1ac 0202 	sub.w	r2, ip, #2
     d24:	442b      	add	r3, r5
     d26:	eba3 0308 	sub.w	r3, r3, r8
     d2a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     d2e:	e791      	b.n	c54 <__udivmoddi4+0xb8>
     d30:	4661      	mov	r1, ip
     d32:	e7e2      	b.n	cfa <__udivmoddi4+0x15e>
     d34:	4662      	mov	r2, ip
     d36:	e7f6      	b.n	d26 <__udivmoddi4+0x18a>
     d38:	4660      	mov	r0, ip
     d3a:	e7a2      	b.n	c82 <__udivmoddi4+0xe6>
     d3c:	4663      	mov	r3, ip
     d3e:	e7b6      	b.n	cae <__udivmoddi4+0x112>
     d40:	4283      	cmp	r3, r0
     d42:	d905      	bls.n	d50 <__udivmoddi4+0x1b4>
     d44:	b10e      	cbz	r6, d4a <__udivmoddi4+0x1ae>
     d46:	e9c6 7000 	strd	r7, r0, [r6]
     d4a:	2100      	movs	r1, #0
     d4c:	4608      	mov	r0, r1
     d4e:	e776      	b.n	c3e <__udivmoddi4+0xa2>
     d50:	fab3 f183 	clz	r1, r3
     d54:	b981      	cbnz	r1, d78 <__udivmoddi4+0x1dc>
     d56:	4283      	cmp	r3, r0
     d58:	d301      	bcc.n	d5e <__udivmoddi4+0x1c2>
     d5a:	42ba      	cmp	r2, r7
     d5c:	d80a      	bhi.n	d74 <__udivmoddi4+0x1d8>
     d5e:	1abc      	subs	r4, r7, r2
     d60:	eb60 0303 	sbc.w	r3, r0, r3
     d64:	2001      	movs	r0, #1
     d66:	469c      	mov	ip, r3
     d68:	2e00      	cmp	r6, #0
     d6a:	d068      	beq.n	e3e <__udivmoddi4+0x2a2>
     d6c:	e9c6 4c00 	strd	r4, ip, [r6]
     d70:	2100      	movs	r1, #0
     d72:	e764      	b.n	c3e <__udivmoddi4+0xa2>
     d74:	4608      	mov	r0, r1
     d76:	e7f7      	b.n	d68 <__udivmoddi4+0x1cc>
     d78:	f1c1 0c20 	rsb	ip, r1, #32
     d7c:	408b      	lsls	r3, r1
     d7e:	fa22 f40c 	lsr.w	r4, r2, ip
     d82:	431c      	orrs	r4, r3
     d84:	fa02 f501 	lsl.w	r5, r2, r1
     d88:	fa00 f301 	lsl.w	r3, r0, r1
     d8c:	fa27 f20c 	lsr.w	r2, r7, ip
     d90:	fa20 fb0c 	lsr.w	fp, r0, ip
     d94:	ea4f 4914 	mov.w	r9, r4, lsr #16
     d98:	4313      	orrs	r3, r2
     d9a:	fbbb f8f9 	udiv	r8, fp, r9
     d9e:	fa1f fe84 	uxth.w	lr, r4
     da2:	fb09 bb18 	mls	fp, r9, r8, fp
     da6:	0c1a      	lsrs	r2, r3, #16
     da8:	fb08 fa0e 	mul.w	sl, r8, lr
     dac:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     db0:	4592      	cmp	sl, r2
     db2:	fa07 f701 	lsl.w	r7, r7, r1
     db6:	d93e      	bls.n	e36 <__udivmoddi4+0x29a>
     db8:	18a2      	adds	r2, r4, r2
     dba:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     dbe:	d204      	bcs.n	dca <__udivmoddi4+0x22e>
     dc0:	4592      	cmp	sl, r2
     dc2:	d902      	bls.n	dca <__udivmoddi4+0x22e>
     dc4:	f1a8 0002 	sub.w	r0, r8, #2
     dc8:	4422      	add	r2, r4
     dca:	eba2 020a 	sub.w	r2, r2, sl
     dce:	b29b      	uxth	r3, r3
     dd0:	fbb2 f8f9 	udiv	r8, r2, r9
     dd4:	fb09 2218 	mls	r2, r9, r8, r2
     dd8:	fb08 fe0e 	mul.w	lr, r8, lr
     ddc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     de0:	4596      	cmp	lr, r2
     de2:	d92a      	bls.n	e3a <__udivmoddi4+0x29e>
     de4:	18a2      	adds	r2, r4, r2
     de6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     dea:	d204      	bcs.n	df6 <__udivmoddi4+0x25a>
     dec:	4596      	cmp	lr, r2
     dee:	d902      	bls.n	df6 <__udivmoddi4+0x25a>
     df0:	f1a8 0302 	sub.w	r3, r8, #2
     df4:	4422      	add	r2, r4
     df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     dfa:	fba0 9305 	umull	r9, r3, r0, r5
     dfe:	eba2 020e 	sub.w	r2, r2, lr
     e02:	429a      	cmp	r2, r3
     e04:	46ce      	mov	lr, r9
     e06:	4698      	mov	r8, r3
     e08:	d302      	bcc.n	e10 <__udivmoddi4+0x274>
     e0a:	d106      	bne.n	e1a <__udivmoddi4+0x27e>
     e0c:	454f      	cmp	r7, r9
     e0e:	d204      	bcs.n	e1a <__udivmoddi4+0x27e>
     e10:	ebb9 0e05 	subs.w	lr, r9, r5
     e14:	eb63 0804 	sbc.w	r8, r3, r4
     e18:	3801      	subs	r0, #1
     e1a:	b186      	cbz	r6, e3e <__udivmoddi4+0x2a2>
     e1c:	ebb7 030e 	subs.w	r3, r7, lr
     e20:	eb62 0708 	sbc.w	r7, r2, r8
     e24:	fa07 fc0c 	lsl.w	ip, r7, ip
     e28:	40cb      	lsrs	r3, r1
     e2a:	ea4c 0303 	orr.w	r3, ip, r3
     e2e:	40cf      	lsrs	r7, r1
     e30:	e9c6 3700 	strd	r3, r7, [r6]
     e34:	e79c      	b.n	d70 <__udivmoddi4+0x1d4>
     e36:	4640      	mov	r0, r8
     e38:	e7c7      	b.n	dca <__udivmoddi4+0x22e>
     e3a:	4643      	mov	r3, r8
     e3c:	e7db      	b.n	df6 <__udivmoddi4+0x25a>
     e3e:	4631      	mov	r1, r6
     e40:	e6fd      	b.n	c3e <__udivmoddi4+0xa2>

00000e42 <strcmp>:
     e42:	f810 2b01 	ldrb.w	r2, [r0], #1
     e46:	f811 3b01 	ldrb.w	r3, [r1], #1
     e4a:	2a01      	cmp	r2, #1
     e4c:	bf28      	it	cs
     e4e:	429a      	cmpcs	r2, r3
     e50:	d0f7      	beq.n	e42 <strcmp>
     e52:	1ad0      	subs	r0, r2, r3
     e54:	4770      	bx	lr

00000e56 <strlen>:
     e56:	4603      	mov	r3, r0
     e58:	f813 2b01 	ldrb.w	r2, [r3], #1
     e5c:	2a00      	cmp	r2, #0
     e5e:	d1fb      	bne.n	e58 <strlen+0x2>
     e60:	1a18      	subs	r0, r3, r0
     e62:	3801      	subs	r0, #1
     e64:	4770      	bx	lr
	...

00000e68 <__ieee754_acos>:
     e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e6c:	4cb2      	ldr	r4, [pc, #712]	; (1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>)
     e6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
     e72:	42a3      	cmp	r3, r4
     e74:	4607      	mov	r7, r0
     e76:	460e      	mov	r6, r1
     e78:	dd16      	ble.n	ea8 <__ieee754_acos+0x40>
     e7a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
     e7e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
     e82:	4303      	orrs	r3, r0
     e84:	d107      	bne.n	e96 <__ieee754_acos+0x2e>
     e86:	2900      	cmp	r1, #0
     e88:	f300 8202 	bgt.w	1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>
     e8c:	a190      	add	r1, pc, #576	; (adr r1, 10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
     e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
     e92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e96:	4602      	mov	r2, r0
     e98:	460b      	mov	r3, r1
     e9a:	f7ff f985 	bl	1a8 <__aeabi_dsub>
     e9e:	4602      	mov	r2, r0
     ea0:	460b      	mov	r3, r1
     ea2:	f7ff fc63 	bl	76c <__aeabi_ddiv>
     ea6:	e7f4      	b.n	e92 <__ieee754_acos+0x2a>
     ea8:	4ca4      	ldr	r4, [pc, #656]	; (113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>)
     eaa:	42a3      	cmp	r3, r4
     eac:	f300 8083 	bgt.w	fb6 <__ieee754_acos+0x14e>
     eb0:	4aa3      	ldr	r2, [pc, #652]	; (1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>)
     eb2:	4293      	cmp	r3, r2
     eb4:	f340 81ef 	ble.w	1296 <CONFIG_FPROTECT_BLOCK_SIZE+0x296>
     eb8:	4602      	mov	r2, r0
     eba:	460b      	mov	r3, r1
     ebc:	f7ff fb2c 	bl	518 <__aeabi_dmul>
     ec0:	a385      	add	r3, pc, #532	; (adr r3, 10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>)
     ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
     ec6:	4604      	mov	r4, r0
     ec8:	460d      	mov	r5, r1
     eca:	f7ff fb25 	bl	518 <__aeabi_dmul>
     ece:	a384      	add	r3, pc, #528	; (adr r3, 10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>)
     ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
     ed4:	f7ff f96a 	bl	1ac <__adddf3>
     ed8:	4622      	mov	r2, r4
     eda:	462b      	mov	r3, r5
     edc:	f7ff fb1c 	bl	518 <__aeabi_dmul>
     ee0:	a381      	add	r3, pc, #516	; (adr r3, 10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>)
     ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
     ee6:	f7ff f95f 	bl	1a8 <__aeabi_dsub>
     eea:	4622      	mov	r2, r4
     eec:	462b      	mov	r3, r5
     eee:	f7ff fb13 	bl	518 <__aeabi_dmul>
     ef2:	a37f      	add	r3, pc, #508	; (adr r3, 10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
     ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
     ef8:	f7ff f958 	bl	1ac <__adddf3>
     efc:	4622      	mov	r2, r4
     efe:	462b      	mov	r3, r5
     f00:	f7ff fb0a 	bl	518 <__aeabi_dmul>
     f04:	a37c      	add	r3, pc, #496	; (adr r3, 10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
     f06:	e9d3 2300 	ldrd	r2, r3, [r3]
     f0a:	f7ff f94d 	bl	1a8 <__aeabi_dsub>
     f0e:	4622      	mov	r2, r4
     f10:	462b      	mov	r3, r5
     f12:	f7ff fb01 	bl	518 <__aeabi_dmul>
     f16:	a37a      	add	r3, pc, #488	; (adr r3, 1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>)
     f18:	e9d3 2300 	ldrd	r2, r3, [r3]
     f1c:	f7ff f946 	bl	1ac <__adddf3>
     f20:	4622      	mov	r2, r4
     f22:	462b      	mov	r3, r5
     f24:	f7ff faf8 	bl	518 <__aeabi_dmul>
     f28:	a377      	add	r3, pc, #476	; (adr r3, 1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
     f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
     f2e:	4680      	mov	r8, r0
     f30:	4689      	mov	r9, r1
     f32:	4620      	mov	r0, r4
     f34:	4629      	mov	r1, r5
     f36:	f7ff faef 	bl	518 <__aeabi_dmul>
     f3a:	a375      	add	r3, pc, #468	; (adr r3, 1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
     f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
     f40:	f7ff f932 	bl	1a8 <__aeabi_dsub>
     f44:	4622      	mov	r2, r4
     f46:	462b      	mov	r3, r5
     f48:	f7ff fae6 	bl	518 <__aeabi_dmul>
     f4c:	a372      	add	r3, pc, #456	; (adr r3, 1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
     f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
     f52:	f7ff f92b 	bl	1ac <__adddf3>
     f56:	4622      	mov	r2, r4
     f58:	462b      	mov	r3, r5
     f5a:	f7ff fadd 	bl	518 <__aeabi_dmul>
     f5e:	a370      	add	r3, pc, #448	; (adr r3, 1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>)
     f60:	e9d3 2300 	ldrd	r2, r3, [r3]
     f64:	f7ff f920 	bl	1a8 <__aeabi_dsub>
     f68:	4622      	mov	r2, r4
     f6a:	462b      	mov	r3, r5
     f6c:	f7ff fad4 	bl	518 <__aeabi_dmul>
     f70:	4b74      	ldr	r3, [pc, #464]	; (1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>)
     f72:	2200      	movs	r2, #0
     f74:	f7ff f91a 	bl	1ac <__adddf3>
     f78:	4602      	mov	r2, r0
     f7a:	460b      	mov	r3, r1
     f7c:	4640      	mov	r0, r8
     f7e:	4649      	mov	r1, r9
     f80:	f7ff fbf4 	bl	76c <__aeabi_ddiv>
     f84:	463a      	mov	r2, r7
     f86:	4633      	mov	r3, r6
     f88:	f7ff fac6 	bl	518 <__aeabi_dmul>
     f8c:	4602      	mov	r2, r0
     f8e:	460b      	mov	r3, r1
     f90:	a165      	add	r1, pc, #404	; (adr r1, 1128 <CONFIG_FPROTECT_BLOCK_SIZE+0x128>)
     f92:	e9d1 0100 	ldrd	r0, r1, [r1]
     f96:	f7ff f907 	bl	1a8 <__aeabi_dsub>
     f9a:	4602      	mov	r2, r0
     f9c:	460b      	mov	r3, r1
     f9e:	4638      	mov	r0, r7
     fa0:	4631      	mov	r1, r6
     fa2:	f7ff f901 	bl	1a8 <__aeabi_dsub>
     fa6:	4602      	mov	r2, r0
     fa8:	460b      	mov	r3, r1
     faa:	a161      	add	r1, pc, #388	; (adr r1, 1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>)
     fac:	e9d1 0100 	ldrd	r0, r1, [r1]
     fb0:	f7ff f8fa 	bl	1a8 <__aeabi_dsub>
     fb4:	e76d      	b.n	e92 <__ieee754_acos+0x2a>
     fb6:	2900      	cmp	r1, #0
     fb8:	f280 80c8 	bge.w	114c <CONFIG_FPROTECT_BLOCK_SIZE+0x14c>
     fbc:	4b61      	ldr	r3, [pc, #388]	; (1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>)
     fbe:	2200      	movs	r2, #0
     fc0:	f7ff f8f4 	bl	1ac <__adddf3>
     fc4:	4b60      	ldr	r3, [pc, #384]	; (1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>)
     fc6:	2200      	movs	r2, #0
     fc8:	f7ff faa6 	bl	518 <__aeabi_dmul>
     fcc:	a342      	add	r3, pc, #264	; (adr r3, 10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>)
     fce:	e9d3 2300 	ldrd	r2, r3, [r3]
     fd2:	4604      	mov	r4, r0
     fd4:	460d      	mov	r5, r1
     fd6:	f7ff fa9f 	bl	518 <__aeabi_dmul>
     fda:	a341      	add	r3, pc, #260	; (adr r3, 10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>)
     fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
     fe0:	f7ff f8e4 	bl	1ac <__adddf3>
     fe4:	4622      	mov	r2, r4
     fe6:	462b      	mov	r3, r5
     fe8:	f7ff fa96 	bl	518 <__aeabi_dmul>
     fec:	a33e      	add	r3, pc, #248	; (adr r3, 10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>)
     fee:	e9d3 2300 	ldrd	r2, r3, [r3]
     ff2:	f7ff f8d9 	bl	1a8 <__aeabi_dsub>
     ff6:	4622      	mov	r2, r4
     ff8:	462b      	mov	r3, r5
     ffa:	f7ff fa8d 	bl	518 <__aeabi_dmul>
     ffe:	a33c      	add	r3, pc, #240	; (adr r3, 10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    1000:	e9d3 2300 	ldrd	r2, r3, [r3]
    1004:	f7ff f8d2 	bl	1ac <__adddf3>
    1008:	4622      	mov	r2, r4
    100a:	462b      	mov	r3, r5
    100c:	f7ff fa84 	bl	518 <__aeabi_dmul>
    1010:	a339      	add	r3, pc, #228	; (adr r3, 10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
    1012:	e9d3 2300 	ldrd	r2, r3, [r3]
    1016:	f7ff f8c7 	bl	1a8 <__aeabi_dsub>
    101a:	4622      	mov	r2, r4
    101c:	462b      	mov	r3, r5
    101e:	f7ff fa7b 	bl	518 <__aeabi_dmul>
    1022:	a337      	add	r3, pc, #220	; (adr r3, 1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>)
    1024:	e9d3 2300 	ldrd	r2, r3, [r3]
    1028:	f7ff f8c0 	bl	1ac <__adddf3>
    102c:	4622      	mov	r2, r4
    102e:	462b      	mov	r3, r5
    1030:	f7ff fa72 	bl	518 <__aeabi_dmul>
    1034:	4680      	mov	r8, r0
    1036:	4689      	mov	r9, r1
    1038:	4620      	mov	r0, r4
    103a:	4629      	mov	r1, r5
    103c:	f00c f9d2 	bl	d3e4 <__ieee754_sqrt>
    1040:	a331      	add	r3, pc, #196	; (adr r3, 1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
    1042:	e9d3 2300 	ldrd	r2, r3, [r3]
    1046:	4606      	mov	r6, r0
    1048:	460f      	mov	r7, r1
    104a:	4620      	mov	r0, r4
    104c:	4629      	mov	r1, r5
    104e:	f7ff fa63 	bl	518 <__aeabi_dmul>
    1052:	a32f      	add	r3, pc, #188	; (adr r3, 1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
    1054:	e9d3 2300 	ldrd	r2, r3, [r3]
    1058:	f7ff f8a6 	bl	1a8 <__aeabi_dsub>
    105c:	4622      	mov	r2, r4
    105e:	462b      	mov	r3, r5
    1060:	f7ff fa5a 	bl	518 <__aeabi_dmul>
    1064:	a32c      	add	r3, pc, #176	; (adr r3, 1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
    1066:	e9d3 2300 	ldrd	r2, r3, [r3]
    106a:	f7ff f89f 	bl	1ac <__adddf3>
    106e:	4622      	mov	r2, r4
    1070:	462b      	mov	r3, r5
    1072:	f7ff fa51 	bl	518 <__aeabi_dmul>
    1076:	a32a      	add	r3, pc, #168	; (adr r3, 1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>)
    1078:	e9d3 2300 	ldrd	r2, r3, [r3]
    107c:	f7ff f894 	bl	1a8 <__aeabi_dsub>
    1080:	4622      	mov	r2, r4
    1082:	462b      	mov	r3, r5
    1084:	f7ff fa48 	bl	518 <__aeabi_dmul>
    1088:	4b2e      	ldr	r3, [pc, #184]	; (1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>)
    108a:	2200      	movs	r2, #0
    108c:	f7ff f88e 	bl	1ac <__adddf3>
    1090:	4602      	mov	r2, r0
    1092:	460b      	mov	r3, r1
    1094:	4640      	mov	r0, r8
    1096:	4649      	mov	r1, r9
    1098:	f7ff fb68 	bl	76c <__aeabi_ddiv>
    109c:	4632      	mov	r2, r6
    109e:	463b      	mov	r3, r7
    10a0:	f7ff fa3a 	bl	518 <__aeabi_dmul>
    10a4:	a320      	add	r3, pc, #128	; (adr r3, 1128 <CONFIG_FPROTECT_BLOCK_SIZE+0x128>)
    10a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    10aa:	f7ff f87d 	bl	1a8 <__aeabi_dsub>
    10ae:	4632      	mov	r2, r6
    10b0:	463b      	mov	r3, r7
    10b2:	f7ff f87b 	bl	1ac <__adddf3>
    10b6:	4602      	mov	r2, r0
    10b8:	460b      	mov	r3, r1
    10ba:	f7ff f877 	bl	1ac <__adddf3>
    10be:	4602      	mov	r2, r0
    10c0:	460b      	mov	r3, r1
    10c2:	a103      	add	r1, pc, #12	; (adr r1, 10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
    10c4:	e9d1 0100 	ldrd	r0, r1, [r1]
    10c8:	e772      	b.n	fb0 <__ieee754_acos+0x148>
    10ca:	bf00      	nop
    10cc:	f3af 8000 	nop.w
    10d0:	54442d18 	.word	0x54442d18
    10d4:	400921fb 	.word	0x400921fb
    10d8:	0dfdf709 	.word	0x0dfdf709
    10dc:	3f023de1 	.word	0x3f023de1
    10e0:	7501b288 	.word	0x7501b288
    10e4:	3f49efe0 	.word	0x3f49efe0
    10e8:	b5688f3b 	.word	0xb5688f3b
    10ec:	3fa48228 	.word	0x3fa48228
    10f0:	0e884455 	.word	0x0e884455
    10f4:	3fc9c155 	.word	0x3fc9c155
    10f8:	03eb6f7d 	.word	0x03eb6f7d
    10fc:	3fd4d612 	.word	0x3fd4d612
    1100:	55555555 	.word	0x55555555
    1104:	3fc55555 	.word	0x3fc55555
    1108:	b12e9282 	.word	0xb12e9282
    110c:	3fb3b8c5 	.word	0x3fb3b8c5
    1110:	1b8d0159 	.word	0x1b8d0159
    1114:	3fe6066c 	.word	0x3fe6066c
    1118:	9c598ac8 	.word	0x9c598ac8
    111c:	40002ae5 	.word	0x40002ae5
    1120:	1c8a2d4b 	.word	0x1c8a2d4b
    1124:	40033a27 	.word	0x40033a27
    1128:	33145c07 	.word	0x33145c07
    112c:	3c91a626 	.word	0x3c91a626
    1130:	54442d18 	.word	0x54442d18
    1134:	3ff921fb 	.word	0x3ff921fb
    1138:	3fefffff 	.word	0x3fefffff
    113c:	3fdfffff 	.word	0x3fdfffff
    1140:	3c600000 	.word	0x3c600000
    1144:	3ff00000 	.word	0x3ff00000
    1148:	3fe00000 	.word	0x3fe00000
    114c:	4602      	mov	r2, r0
    114e:	460b      	mov	r3, r1
    1150:	2000      	movs	r0, #0
    1152:	4969      	ldr	r1, [pc, #420]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    1154:	f7ff f828 	bl	1a8 <__aeabi_dsub>
    1158:	4b68      	ldr	r3, [pc, #416]	; (12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>)
    115a:	2200      	movs	r2, #0
    115c:	f7ff f9dc 	bl	518 <__aeabi_dmul>
    1160:	4604      	mov	r4, r0
    1162:	460d      	mov	r5, r1
    1164:	f00c f93e 	bl	d3e4 <__ieee754_sqrt>
    1168:	a34d      	add	r3, pc, #308	; (adr r3, 12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
    116a:	e9d3 2300 	ldrd	r2, r3, [r3]
    116e:	4689      	mov	r9, r1
    1170:	4680      	mov	r8, r0
    1172:	4629      	mov	r1, r5
    1174:	4620      	mov	r0, r4
    1176:	f7ff f9cf 	bl	518 <__aeabi_dmul>
    117a:	a34b      	add	r3, pc, #300	; (adr r3, 12a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a8>)
    117c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1180:	f7ff f814 	bl	1ac <__adddf3>
    1184:	4622      	mov	r2, r4
    1186:	462b      	mov	r3, r5
    1188:	f7ff f9c6 	bl	518 <__aeabi_dmul>
    118c:	a348      	add	r3, pc, #288	; (adr r3, 12b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b0>)
    118e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1192:	f7ff f809 	bl	1a8 <__aeabi_dsub>
    1196:	4622      	mov	r2, r4
    1198:	462b      	mov	r3, r5
    119a:	f7ff f9bd 	bl	518 <__aeabi_dmul>
    119e:	a346      	add	r3, pc, #280	; (adr r3, 12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>)
    11a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    11a4:	f7ff f802 	bl	1ac <__adddf3>
    11a8:	4622      	mov	r2, r4
    11aa:	462b      	mov	r3, r5
    11ac:	f7ff f9b4 	bl	518 <__aeabi_dmul>
    11b0:	a343      	add	r3, pc, #268	; (adr r3, 12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>)
    11b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    11b6:	f7fe fff7 	bl	1a8 <__aeabi_dsub>
    11ba:	4622      	mov	r2, r4
    11bc:	462b      	mov	r3, r5
    11be:	f7ff f9ab 	bl	518 <__aeabi_dmul>
    11c2:	a341      	add	r3, pc, #260	; (adr r3, 12c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c8>)
    11c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    11c8:	f7fe fff0 	bl	1ac <__adddf3>
    11cc:	4622      	mov	r2, r4
    11ce:	462b      	mov	r3, r5
    11d0:	f7ff f9a2 	bl	518 <__aeabi_dmul>
    11d4:	a33e      	add	r3, pc, #248	; (adr r3, 12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>)
    11d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    11da:	4682      	mov	sl, r0
    11dc:	468b      	mov	fp, r1
    11de:	4620      	mov	r0, r4
    11e0:	4629      	mov	r1, r5
    11e2:	f7ff f999 	bl	518 <__aeabi_dmul>
    11e6:	a33c      	add	r3, pc, #240	; (adr r3, 12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>)
    11e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    11ec:	f7fe ffdc 	bl	1a8 <__aeabi_dsub>
    11f0:	4622      	mov	r2, r4
    11f2:	462b      	mov	r3, r5
    11f4:	f7ff f990 	bl	518 <__aeabi_dmul>
    11f8:	a339      	add	r3, pc, #228	; (adr r3, 12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>)
    11fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    11fe:	f7fe ffd5 	bl	1ac <__adddf3>
    1202:	4622      	mov	r2, r4
    1204:	462b      	mov	r3, r5
    1206:	f7ff f987 	bl	518 <__aeabi_dmul>
    120a:	a337      	add	r3, pc, #220	; (adr r3, 12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>)
    120c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1210:	f7fe ffca 	bl	1a8 <__aeabi_dsub>
    1214:	4622      	mov	r2, r4
    1216:	462b      	mov	r3, r5
    1218:	f7ff f97e 	bl	518 <__aeabi_dmul>
    121c:	4b36      	ldr	r3, [pc, #216]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    121e:	2200      	movs	r2, #0
    1220:	f7fe ffc4 	bl	1ac <__adddf3>
    1224:	4602      	mov	r2, r0
    1226:	460b      	mov	r3, r1
    1228:	4650      	mov	r0, sl
    122a:	4659      	mov	r1, fp
    122c:	f7ff fa9e 	bl	76c <__aeabi_ddiv>
    1230:	4642      	mov	r2, r8
    1232:	464b      	mov	r3, r9
    1234:	f7ff f970 	bl	518 <__aeabi_dmul>
    1238:	2600      	movs	r6, #0
    123a:	4682      	mov	sl, r0
    123c:	468b      	mov	fp, r1
    123e:	4632      	mov	r2, r6
    1240:	464b      	mov	r3, r9
    1242:	4630      	mov	r0, r6
    1244:	4649      	mov	r1, r9
    1246:	f7ff f967 	bl	518 <__aeabi_dmul>
    124a:	4602      	mov	r2, r0
    124c:	460b      	mov	r3, r1
    124e:	4620      	mov	r0, r4
    1250:	4629      	mov	r1, r5
    1252:	f7fe ffa9 	bl	1a8 <__aeabi_dsub>
    1256:	4632      	mov	r2, r6
    1258:	4604      	mov	r4, r0
    125a:	460d      	mov	r5, r1
    125c:	464b      	mov	r3, r9
    125e:	4640      	mov	r0, r8
    1260:	4649      	mov	r1, r9
    1262:	f7fe ffa3 	bl	1ac <__adddf3>
    1266:	4602      	mov	r2, r0
    1268:	460b      	mov	r3, r1
    126a:	4620      	mov	r0, r4
    126c:	4629      	mov	r1, r5
    126e:	f7ff fa7d 	bl	76c <__aeabi_ddiv>
    1272:	4602      	mov	r2, r0
    1274:	460b      	mov	r3, r1
    1276:	4650      	mov	r0, sl
    1278:	4659      	mov	r1, fp
    127a:	f7fe ff97 	bl	1ac <__adddf3>
    127e:	4632      	mov	r2, r6
    1280:	464b      	mov	r3, r9
    1282:	f7fe ff93 	bl	1ac <__adddf3>
    1286:	4602      	mov	r2, r0
    1288:	460b      	mov	r3, r1
    128a:	f7fe ff8f 	bl	1ac <__adddf3>
    128e:	e600      	b.n	e92 <__ieee754_acos+0x2a>
    1290:	2000      	movs	r0, #0
    1292:	2100      	movs	r1, #0
    1294:	e5fd      	b.n	e92 <__ieee754_acos+0x2a>
    1296:	a116      	add	r1, pc, #88	; (adr r1, 12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>)
    1298:	e9d1 0100 	ldrd	r0, r1, [r1]
    129c:	e5f9      	b.n	e92 <__ieee754_acos+0x2a>
    129e:	bf00      	nop
    12a0:	0dfdf709 	.word	0x0dfdf709
    12a4:	3f023de1 	.word	0x3f023de1
    12a8:	7501b288 	.word	0x7501b288
    12ac:	3f49efe0 	.word	0x3f49efe0
    12b0:	b5688f3b 	.word	0xb5688f3b
    12b4:	3fa48228 	.word	0x3fa48228
    12b8:	0e884455 	.word	0x0e884455
    12bc:	3fc9c155 	.word	0x3fc9c155
    12c0:	03eb6f7d 	.word	0x03eb6f7d
    12c4:	3fd4d612 	.word	0x3fd4d612
    12c8:	55555555 	.word	0x55555555
    12cc:	3fc55555 	.word	0x3fc55555
    12d0:	b12e9282 	.word	0xb12e9282
    12d4:	3fb3b8c5 	.word	0x3fb3b8c5
    12d8:	1b8d0159 	.word	0x1b8d0159
    12dc:	3fe6066c 	.word	0x3fe6066c
    12e0:	9c598ac8 	.word	0x9c598ac8
    12e4:	40002ae5 	.word	0x40002ae5
    12e8:	1c8a2d4b 	.word	0x1c8a2d4b
    12ec:	40033a27 	.word	0x40033a27
    12f0:	54442d18 	.word	0x54442d18
    12f4:	3ff921fb 	.word	0x3ff921fb
    12f8:	3ff00000 	.word	0x3ff00000
    12fc:	3fe00000 	.word	0x3fe00000

00001300 <__ieee754_pow>:
    1300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1304:	b093      	sub	sp, #76	; 0x4c
    1306:	e9cd 2302 	strd	r2, r3, [sp, #8]
    130a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
    130e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
    1312:	ea55 0302 	orrs.w	r3, r5, r2
    1316:	4607      	mov	r7, r0
    1318:	4688      	mov	r8, r1
    131a:	f000 84bf 	beq.w	1c9c <__ieee754_pow+0x99c>
    131e:	4b7e      	ldr	r3, [pc, #504]	; (1518 <__ieee754_pow+0x218>)
    1320:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    1324:	429c      	cmp	r4, r3
    1326:	4689      	mov	r9, r1
    1328:	4682      	mov	sl, r0
    132a:	dc09      	bgt.n	1340 <__ieee754_pow+0x40>
    132c:	d103      	bne.n	1336 <__ieee754_pow+0x36>
    132e:	b978      	cbnz	r0, 1350 <__ieee754_pow+0x50>
    1330:	42a5      	cmp	r5, r4
    1332:	dd02      	ble.n	133a <__ieee754_pow+0x3a>
    1334:	e00c      	b.n	1350 <__ieee754_pow+0x50>
    1336:	429d      	cmp	r5, r3
    1338:	dc02      	bgt.n	1340 <__ieee754_pow+0x40>
    133a:	429d      	cmp	r5, r3
    133c:	d10e      	bne.n	135c <__ieee754_pow+0x5c>
    133e:	b16a      	cbz	r2, 135c <__ieee754_pow+0x5c>
    1340:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    1344:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    1348:	ea54 030a 	orrs.w	r3, r4, sl
    134c:	f000 84a6 	beq.w	1c9c <__ieee754_pow+0x99c>
    1350:	4872      	ldr	r0, [pc, #456]	; (151c <__ieee754_pow+0x21c>)
    1352:	b013      	add	sp, #76	; 0x4c
    1354:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1358:	f00c b8f2 	b.w	d540 <nan>
    135c:	f1b9 0f00 	cmp.w	r9, #0
    1360:	da39      	bge.n	13d6 <__ieee754_pow+0xd6>
    1362:	4b6f      	ldr	r3, [pc, #444]	; (1520 <__ieee754_pow+0x220>)
    1364:	429d      	cmp	r5, r3
    1366:	dc54      	bgt.n	1412 <__ieee754_pow+0x112>
    1368:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    136c:	429d      	cmp	r5, r3
    136e:	f340 84a6 	ble.w	1cbe <__ieee754_pow+0x9be>
    1372:	152b      	asrs	r3, r5, #20
    1374:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    1378:	2b14      	cmp	r3, #20
    137a:	dd0f      	ble.n	139c <__ieee754_pow+0x9c>
    137c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    1380:	fa22 f103 	lsr.w	r1, r2, r3
    1384:	fa01 f303 	lsl.w	r3, r1, r3
    1388:	4293      	cmp	r3, r2
    138a:	f040 8498 	bne.w	1cbe <__ieee754_pow+0x9be>
    138e:	f001 0101 	and.w	r1, r1, #1
    1392:	f1c1 0302 	rsb	r3, r1, #2
    1396:	9300      	str	r3, [sp, #0]
    1398:	b182      	cbz	r2, 13bc <__ieee754_pow+0xbc>
    139a:	e05e      	b.n	145a <__ieee754_pow+0x15a>
    139c:	2a00      	cmp	r2, #0
    139e:	d15a      	bne.n	1456 <__ieee754_pow+0x156>
    13a0:	f1c3 0314 	rsb	r3, r3, #20
    13a4:	fa45 f103 	asr.w	r1, r5, r3
    13a8:	fa01 f303 	lsl.w	r3, r1, r3
    13ac:	42ab      	cmp	r3, r5
    13ae:	f040 8483 	bne.w	1cb8 <__ieee754_pow+0x9b8>
    13b2:	f001 0101 	and.w	r1, r1, #1
    13b6:	f1c1 0302 	rsb	r3, r1, #2
    13ba:	9300      	str	r3, [sp, #0]
    13bc:	4b59      	ldr	r3, [pc, #356]	; (1524 <__ieee754_pow+0x224>)
    13be:	429d      	cmp	r5, r3
    13c0:	d130      	bne.n	1424 <__ieee754_pow+0x124>
    13c2:	2e00      	cmp	r6, #0
    13c4:	f280 8474 	bge.w	1cb0 <__ieee754_pow+0x9b0>
    13c8:	4956      	ldr	r1, [pc, #344]	; (1524 <__ieee754_pow+0x224>)
    13ca:	463a      	mov	r2, r7
    13cc:	4643      	mov	r3, r8
    13ce:	2000      	movs	r0, #0
    13d0:	f7ff f9cc 	bl	76c <__aeabi_ddiv>
    13d4:	e02f      	b.n	1436 <__ieee754_pow+0x136>
    13d6:	2300      	movs	r3, #0
    13d8:	9300      	str	r3, [sp, #0]
    13da:	2a00      	cmp	r2, #0
    13dc:	d13d      	bne.n	145a <__ieee754_pow+0x15a>
    13de:	4b4e      	ldr	r3, [pc, #312]	; (1518 <__ieee754_pow+0x218>)
    13e0:	429d      	cmp	r5, r3
    13e2:	d1eb      	bne.n	13bc <__ieee754_pow+0xbc>
    13e4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
    13e8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    13ec:	ea53 030a 	orrs.w	r3, r3, sl
    13f0:	f000 8454 	beq.w	1c9c <__ieee754_pow+0x99c>
    13f4:	4b4c      	ldr	r3, [pc, #304]	; (1528 <__ieee754_pow+0x228>)
    13f6:	429c      	cmp	r4, r3
    13f8:	dd0d      	ble.n	1416 <__ieee754_pow+0x116>
    13fa:	2e00      	cmp	r6, #0
    13fc:	f280 8454 	bge.w	1ca8 <__ieee754_pow+0x9a8>
    1400:	f04f 0b00 	mov.w	fp, #0
    1404:	f04f 0c00 	mov.w	ip, #0
    1408:	4658      	mov	r0, fp
    140a:	4661      	mov	r1, ip
    140c:	b013      	add	sp, #76	; 0x4c
    140e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1412:	2302      	movs	r3, #2
    1414:	e7e0      	b.n	13d8 <__ieee754_pow+0xd8>
    1416:	2e00      	cmp	r6, #0
    1418:	daf2      	bge.n	1400 <__ieee754_pow+0x100>
    141a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
    141e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
    1422:	e7f1      	b.n	1408 <__ieee754_pow+0x108>
    1424:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
    1428:	d108      	bne.n	143c <__ieee754_pow+0x13c>
    142a:	463a      	mov	r2, r7
    142c:	4643      	mov	r3, r8
    142e:	4638      	mov	r0, r7
    1430:	4641      	mov	r1, r8
    1432:	f7ff f871 	bl	518 <__aeabi_dmul>
    1436:	4683      	mov	fp, r0
    1438:	468c      	mov	ip, r1
    143a:	e7e5      	b.n	1408 <__ieee754_pow+0x108>
    143c:	4b3b      	ldr	r3, [pc, #236]	; (152c <__ieee754_pow+0x22c>)
    143e:	429e      	cmp	r6, r3
    1440:	d10b      	bne.n	145a <__ieee754_pow+0x15a>
    1442:	f1b9 0f00 	cmp.w	r9, #0
    1446:	db08      	blt.n	145a <__ieee754_pow+0x15a>
    1448:	4638      	mov	r0, r7
    144a:	4641      	mov	r1, r8
    144c:	b013      	add	sp, #76	; 0x4c
    144e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1452:	f00b bfc7 	b.w	d3e4 <__ieee754_sqrt>
    1456:	2300      	movs	r3, #0
    1458:	9300      	str	r3, [sp, #0]
    145a:	4638      	mov	r0, r7
    145c:	4641      	mov	r1, r8
    145e:	f00f f948 	bl	106f2 <fabs>
    1462:	4683      	mov	fp, r0
    1464:	468c      	mov	ip, r1
    1466:	f1ba 0f00 	cmp.w	sl, #0
    146a:	d129      	bne.n	14c0 <__ieee754_pow+0x1c0>
    146c:	b124      	cbz	r4, 1478 <__ieee754_pow+0x178>
    146e:	4b2d      	ldr	r3, [pc, #180]	; (1524 <__ieee754_pow+0x224>)
    1470:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
    1474:	429a      	cmp	r2, r3
    1476:	d123      	bne.n	14c0 <__ieee754_pow+0x1c0>
    1478:	2e00      	cmp	r6, #0
    147a:	da07      	bge.n	148c <__ieee754_pow+0x18c>
    147c:	465a      	mov	r2, fp
    147e:	4663      	mov	r3, ip
    1480:	4928      	ldr	r1, [pc, #160]	; (1524 <__ieee754_pow+0x224>)
    1482:	2000      	movs	r0, #0
    1484:	f7ff f972 	bl	76c <__aeabi_ddiv>
    1488:	4683      	mov	fp, r0
    148a:	468c      	mov	ip, r1
    148c:	f1b9 0f00 	cmp.w	r9, #0
    1490:	daba      	bge.n	1408 <__ieee754_pow+0x108>
    1492:	9b00      	ldr	r3, [sp, #0]
    1494:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    1498:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    149c:	4323      	orrs	r3, r4
    149e:	d108      	bne.n	14b2 <__ieee754_pow+0x1b2>
    14a0:	465a      	mov	r2, fp
    14a2:	4663      	mov	r3, ip
    14a4:	4658      	mov	r0, fp
    14a6:	4661      	mov	r1, ip
    14a8:	f7fe fe7e 	bl	1a8 <__aeabi_dsub>
    14ac:	4602      	mov	r2, r0
    14ae:	460b      	mov	r3, r1
    14b0:	e78e      	b.n	13d0 <__ieee754_pow+0xd0>
    14b2:	9b00      	ldr	r3, [sp, #0]
    14b4:	2b01      	cmp	r3, #1
    14b6:	d1a7      	bne.n	1408 <__ieee754_pow+0x108>
    14b8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
    14bc:	469c      	mov	ip, r3
    14be:	e7a3      	b.n	1408 <__ieee754_pow+0x108>
    14c0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
    14c4:	3b01      	subs	r3, #1
    14c6:	930c      	str	r3, [sp, #48]	; 0x30
    14c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    14ca:	9b00      	ldr	r3, [sp, #0]
    14cc:	4313      	orrs	r3, r2
    14ce:	d104      	bne.n	14da <__ieee754_pow+0x1da>
    14d0:	463a      	mov	r2, r7
    14d2:	4643      	mov	r3, r8
    14d4:	4638      	mov	r0, r7
    14d6:	4641      	mov	r1, r8
    14d8:	e7e6      	b.n	14a8 <__ieee754_pow+0x1a8>
    14da:	4b15      	ldr	r3, [pc, #84]	; (1530 <__ieee754_pow+0x230>)
    14dc:	429d      	cmp	r5, r3
    14de:	f340 80f9 	ble.w	16d4 <__ieee754_pow+0x3d4>
    14e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    14e6:	429d      	cmp	r5, r3
    14e8:	4b0f      	ldr	r3, [pc, #60]	; (1528 <__ieee754_pow+0x228>)
    14ea:	dd09      	ble.n	1500 <__ieee754_pow+0x200>
    14ec:	429c      	cmp	r4, r3
    14ee:	dc0c      	bgt.n	150a <__ieee754_pow+0x20a>
    14f0:	2e00      	cmp	r6, #0
    14f2:	da85      	bge.n	1400 <__ieee754_pow+0x100>
    14f4:	a306      	add	r3, pc, #24	; (adr r3, 1510 <__ieee754_pow+0x210>)
    14f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    14fa:	4610      	mov	r0, r2
    14fc:	4619      	mov	r1, r3
    14fe:	e798      	b.n	1432 <__ieee754_pow+0x132>
    1500:	429c      	cmp	r4, r3
    1502:	dbf5      	blt.n	14f0 <__ieee754_pow+0x1f0>
    1504:	4b07      	ldr	r3, [pc, #28]	; (1524 <__ieee754_pow+0x224>)
    1506:	429c      	cmp	r4, r3
    1508:	dd14      	ble.n	1534 <__ieee754_pow+0x234>
    150a:	2e00      	cmp	r6, #0
    150c:	dcf2      	bgt.n	14f4 <__ieee754_pow+0x1f4>
    150e:	e777      	b.n	1400 <__ieee754_pow+0x100>
    1510:	8800759c 	.word	0x8800759c
    1514:	7e37e43c 	.word	0x7e37e43c
    1518:	7ff00000 	.word	0x7ff00000
    151c:	00013695 	.word	0x00013695
    1520:	433fffff 	.word	0x433fffff
    1524:	3ff00000 	.word	0x3ff00000
    1528:	3fefffff 	.word	0x3fefffff
    152c:	3fe00000 	.word	0x3fe00000
    1530:	41e00000 	.word	0x41e00000
    1534:	4661      	mov	r1, ip
    1536:	4b62      	ldr	r3, [pc, #392]	; (16c0 <__ieee754_pow+0x3c0>)
    1538:	2200      	movs	r2, #0
    153a:	4658      	mov	r0, fp
    153c:	f7fe fe34 	bl	1a8 <__aeabi_dsub>
    1540:	a355      	add	r3, pc, #340	; (adr r3, 1698 <__ieee754_pow+0x398>)
    1542:	e9d3 2300 	ldrd	r2, r3, [r3]
    1546:	4604      	mov	r4, r0
    1548:	460d      	mov	r5, r1
    154a:	f7fe ffe5 	bl	518 <__aeabi_dmul>
    154e:	a354      	add	r3, pc, #336	; (adr r3, 16a0 <__ieee754_pow+0x3a0>)
    1550:	e9d3 2300 	ldrd	r2, r3, [r3]
    1554:	4606      	mov	r6, r0
    1556:	460f      	mov	r7, r1
    1558:	4620      	mov	r0, r4
    155a:	4629      	mov	r1, r5
    155c:	f7fe ffdc 	bl	518 <__aeabi_dmul>
    1560:	4b58      	ldr	r3, [pc, #352]	; (16c4 <__ieee754_pow+0x3c4>)
    1562:	4682      	mov	sl, r0
    1564:	468b      	mov	fp, r1
    1566:	2200      	movs	r2, #0
    1568:	4620      	mov	r0, r4
    156a:	4629      	mov	r1, r5
    156c:	f7fe ffd4 	bl	518 <__aeabi_dmul>
    1570:	4602      	mov	r2, r0
    1572:	460b      	mov	r3, r1
    1574:	a14c      	add	r1, pc, #304	; (adr r1, 16a8 <__ieee754_pow+0x3a8>)
    1576:	e9d1 0100 	ldrd	r0, r1, [r1]
    157a:	f7fe fe15 	bl	1a8 <__aeabi_dsub>
    157e:	4622      	mov	r2, r4
    1580:	462b      	mov	r3, r5
    1582:	f7fe ffc9 	bl	518 <__aeabi_dmul>
    1586:	4602      	mov	r2, r0
    1588:	460b      	mov	r3, r1
    158a:	2000      	movs	r0, #0
    158c:	494e      	ldr	r1, [pc, #312]	; (16c8 <__ieee754_pow+0x3c8>)
    158e:	f7fe fe0b 	bl	1a8 <__aeabi_dsub>
    1592:	4622      	mov	r2, r4
    1594:	462b      	mov	r3, r5
    1596:	4680      	mov	r8, r0
    1598:	4689      	mov	r9, r1
    159a:	4620      	mov	r0, r4
    159c:	4629      	mov	r1, r5
    159e:	f7fe ffbb 	bl	518 <__aeabi_dmul>
    15a2:	4602      	mov	r2, r0
    15a4:	460b      	mov	r3, r1
    15a6:	4640      	mov	r0, r8
    15a8:	4649      	mov	r1, r9
    15aa:	f7fe ffb5 	bl	518 <__aeabi_dmul>
    15ae:	a340      	add	r3, pc, #256	; (adr r3, 16b0 <__ieee754_pow+0x3b0>)
    15b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    15b4:	f7fe ffb0 	bl	518 <__aeabi_dmul>
    15b8:	4602      	mov	r2, r0
    15ba:	460b      	mov	r3, r1
    15bc:	4650      	mov	r0, sl
    15be:	4659      	mov	r1, fp
    15c0:	f7fe fdf2 	bl	1a8 <__aeabi_dsub>
    15c4:	4602      	mov	r2, r0
    15c6:	460b      	mov	r3, r1
    15c8:	4604      	mov	r4, r0
    15ca:	460d      	mov	r5, r1
    15cc:	4630      	mov	r0, r6
    15ce:	4639      	mov	r1, r7
    15d0:	f7fe fdec 	bl	1ac <__adddf3>
    15d4:	f04f 0a00 	mov.w	sl, #0
    15d8:	4632      	mov	r2, r6
    15da:	463b      	mov	r3, r7
    15dc:	4650      	mov	r0, sl
    15de:	468b      	mov	fp, r1
    15e0:	f7fe fde2 	bl	1a8 <__aeabi_dsub>
    15e4:	4602      	mov	r2, r0
    15e6:	460b      	mov	r3, r1
    15e8:	4620      	mov	r0, r4
    15ea:	4629      	mov	r1, r5
    15ec:	f7fe fddc 	bl	1a8 <__aeabi_dsub>
    15f0:	9b00      	ldr	r3, [sp, #0]
    15f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    15f4:	3b01      	subs	r3, #1
    15f6:	4313      	orrs	r3, r2
    15f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    15fc:	bf0c      	ite	eq
    15fe:	4b33      	ldreq	r3, [pc, #204]	; (16cc <__ieee754_pow+0x3cc>)
    1600:	4b2f      	ldrne	r3, [pc, #188]	; (16c0 <__ieee754_pow+0x3c0>)
    1602:	2600      	movs	r6, #0
    1604:	2200      	movs	r2, #0
    1606:	e9cd 2300 	strd	r2, r3, [sp]
    160a:	4604      	mov	r4, r0
    160c:	460d      	mov	r5, r1
    160e:	4632      	mov	r2, r6
    1610:	463b      	mov	r3, r7
    1612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1616:	f7fe fdc7 	bl	1a8 <__aeabi_dsub>
    161a:	4652      	mov	r2, sl
    161c:	465b      	mov	r3, fp
    161e:	f7fe ff7b 	bl	518 <__aeabi_dmul>
    1622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1626:	4680      	mov	r8, r0
    1628:	4689      	mov	r9, r1
    162a:	4620      	mov	r0, r4
    162c:	4629      	mov	r1, r5
    162e:	f7fe ff73 	bl	518 <__aeabi_dmul>
    1632:	4602      	mov	r2, r0
    1634:	460b      	mov	r3, r1
    1636:	4640      	mov	r0, r8
    1638:	4649      	mov	r1, r9
    163a:	f7fe fdb7 	bl	1ac <__adddf3>
    163e:	4632      	mov	r2, r6
    1640:	463b      	mov	r3, r7
    1642:	4680      	mov	r8, r0
    1644:	4689      	mov	r9, r1
    1646:	4650      	mov	r0, sl
    1648:	4659      	mov	r1, fp
    164a:	f7fe ff65 	bl	518 <__aeabi_dmul>
    164e:	460b      	mov	r3, r1
    1650:	4604      	mov	r4, r0
    1652:	460d      	mov	r5, r1
    1654:	4602      	mov	r2, r0
    1656:	4649      	mov	r1, r9
    1658:	4640      	mov	r0, r8
    165a:	e9cd 4502 	strd	r4, r5, [sp, #8]
    165e:	f7fe fda5 	bl	1ac <__adddf3>
    1662:	4b1b      	ldr	r3, [pc, #108]	; (16d0 <__ieee754_pow+0x3d0>)
    1664:	4299      	cmp	r1, r3
    1666:	4682      	mov	sl, r0
    1668:	460f      	mov	r7, r1
    166a:	460e      	mov	r6, r1
    166c:	f340 82ef 	ble.w	1c4e <__ieee754_pow+0x94e>
    1670:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    1674:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    1678:	4303      	orrs	r3, r0
    167a:	f000 81e9 	beq.w	1a50 <__ieee754_pow+0x750>
    167e:	a30e      	add	r3, pc, #56	; (adr r3, 16b8 <__ieee754_pow+0x3b8>)
    1680:	e9d3 2300 	ldrd	r2, r3, [r3]
    1684:	e9dd 0100 	ldrd	r0, r1, [sp]
    1688:	f7fe ff46 	bl	518 <__aeabi_dmul>
    168c:	a30a      	add	r3, pc, #40	; (adr r3, 16b8 <__ieee754_pow+0x3b8>)
    168e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1692:	e6ce      	b.n	1432 <__ieee754_pow+0x132>
    1694:	f3af 8000 	nop.w
    1698:	60000000 	.word	0x60000000
    169c:	3ff71547 	.word	0x3ff71547
    16a0:	f85ddf44 	.word	0xf85ddf44
    16a4:	3e54ae0b 	.word	0x3e54ae0b
    16a8:	55555555 	.word	0x55555555
    16ac:	3fd55555 	.word	0x3fd55555
    16b0:	652b82fe 	.word	0x652b82fe
    16b4:	3ff71547 	.word	0x3ff71547
    16b8:	8800759c 	.word	0x8800759c
    16bc:	7e37e43c 	.word	0x7e37e43c
    16c0:	3ff00000 	.word	0x3ff00000
    16c4:	3fd00000 	.word	0x3fd00000
    16c8:	3fe00000 	.word	0x3fe00000
    16cc:	bff00000 	.word	0xbff00000
    16d0:	408fffff 	.word	0x408fffff
    16d4:	4bd4      	ldr	r3, [pc, #848]	; (1a28 <__ieee754_pow+0x728>)
    16d6:	ea09 0303 	and.w	r3, r9, r3
    16da:	2200      	movs	r2, #0
    16dc:	b943      	cbnz	r3, 16f0 <__ieee754_pow+0x3f0>
    16de:	4658      	mov	r0, fp
    16e0:	4bd2      	ldr	r3, [pc, #840]	; (1a2c <__ieee754_pow+0x72c>)
    16e2:	4661      	mov	r1, ip
    16e4:	f7fe ff18 	bl	518 <__aeabi_dmul>
    16e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
    16ec:	4683      	mov	fp, r0
    16ee:	460c      	mov	r4, r1
    16f0:	1523      	asrs	r3, r4, #20
    16f2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    16f6:	4413      	add	r3, r2
    16f8:	930b      	str	r3, [sp, #44]	; 0x2c
    16fa:	4bcd      	ldr	r3, [pc, #820]	; (1a30 <__ieee754_pow+0x730>)
    16fc:	f3c4 0413 	ubfx	r4, r4, #0, #20
    1700:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
    1704:	429c      	cmp	r4, r3
    1706:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    170a:	dd08      	ble.n	171e <__ieee754_pow+0x41e>
    170c:	4bc9      	ldr	r3, [pc, #804]	; (1a34 <__ieee754_pow+0x734>)
    170e:	429c      	cmp	r4, r3
    1710:	f340 819c 	ble.w	1a4c <__ieee754_pow+0x74c>
    1714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1716:	3301      	adds	r3, #1
    1718:	930b      	str	r3, [sp, #44]	; 0x2c
    171a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
    171e:	2600      	movs	r6, #0
    1720:	00f3      	lsls	r3, r6, #3
    1722:	930d      	str	r3, [sp, #52]	; 0x34
    1724:	4bc4      	ldr	r3, [pc, #784]	; (1a38 <__ieee754_pow+0x738>)
    1726:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    172a:	e9d3 3400 	ldrd	r3, r4, [r3]
    172e:	4658      	mov	r0, fp
    1730:	e9cd 3408 	strd	r3, r4, [sp, #32]
    1734:	461a      	mov	r2, r3
    1736:	4629      	mov	r1, r5
    1738:	4623      	mov	r3, r4
    173a:	f7fe fd35 	bl	1a8 <__aeabi_dsub>
    173e:	46da      	mov	sl, fp
    1740:	4652      	mov	r2, sl
    1742:	462b      	mov	r3, r5
    1744:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    1748:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    174c:	f7fe fd2e 	bl	1ac <__adddf3>
    1750:	4602      	mov	r2, r0
    1752:	460b      	mov	r3, r1
    1754:	2000      	movs	r0, #0
    1756:	49b9      	ldr	r1, [pc, #740]	; (1a3c <__ieee754_pow+0x73c>)
    1758:	f7ff f808 	bl	76c <__aeabi_ddiv>
    175c:	4602      	mov	r2, r0
    175e:	460b      	mov	r3, r1
    1760:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1764:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    1768:	f7fe fed6 	bl	518 <__aeabi_dmul>
    176c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1770:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    1774:	e9cd 3404 	strd	r3, r4, [sp, #16]
    1778:	2300      	movs	r3, #0
    177a:	9304      	str	r3, [sp, #16]
    177c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    1780:	46ab      	mov	fp, r5
    1782:	106d      	asrs	r5, r5, #1
    1784:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
    1788:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
    178c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
    1790:	2200      	movs	r2, #0
    1792:	4640      	mov	r0, r8
    1794:	4649      	mov	r1, r9
    1796:	4614      	mov	r4, r2
    1798:	461d      	mov	r5, r3
    179a:	f7fe febd 	bl	518 <__aeabi_dmul>
    179e:	4602      	mov	r2, r0
    17a0:	460b      	mov	r3, r1
    17a2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    17a6:	f7fe fcff 	bl	1a8 <__aeabi_dsub>
    17aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    17ae:	4606      	mov	r6, r0
    17b0:	460f      	mov	r7, r1
    17b2:	4620      	mov	r0, r4
    17b4:	4629      	mov	r1, r5
    17b6:	f7fe fcf7 	bl	1a8 <__aeabi_dsub>
    17ba:	4602      	mov	r2, r0
    17bc:	460b      	mov	r3, r1
    17be:	4650      	mov	r0, sl
    17c0:	4659      	mov	r1, fp
    17c2:	f7fe fcf1 	bl	1a8 <__aeabi_dsub>
    17c6:	4642      	mov	r2, r8
    17c8:	464b      	mov	r3, r9
    17ca:	f7fe fea5 	bl	518 <__aeabi_dmul>
    17ce:	4602      	mov	r2, r0
    17d0:	460b      	mov	r3, r1
    17d2:	4630      	mov	r0, r6
    17d4:	4639      	mov	r1, r7
    17d6:	f7fe fce7 	bl	1a8 <__aeabi_dsub>
    17da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    17de:	f7fe fe9b 	bl	518 <__aeabi_dmul>
    17e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    17e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
    17ea:	4610      	mov	r0, r2
    17ec:	4619      	mov	r1, r3
    17ee:	f7fe fe93 	bl	518 <__aeabi_dmul>
    17f2:	a37b      	add	r3, pc, #492	; (adr r3, 19e0 <__ieee754_pow+0x6e0>)
    17f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    17f8:	4604      	mov	r4, r0
    17fa:	460d      	mov	r5, r1
    17fc:	f7fe fe8c 	bl	518 <__aeabi_dmul>
    1800:	a379      	add	r3, pc, #484	; (adr r3, 19e8 <__ieee754_pow+0x6e8>)
    1802:	e9d3 2300 	ldrd	r2, r3, [r3]
    1806:	f7fe fcd1 	bl	1ac <__adddf3>
    180a:	4622      	mov	r2, r4
    180c:	462b      	mov	r3, r5
    180e:	f7fe fe83 	bl	518 <__aeabi_dmul>
    1812:	a377      	add	r3, pc, #476	; (adr r3, 19f0 <__ieee754_pow+0x6f0>)
    1814:	e9d3 2300 	ldrd	r2, r3, [r3]
    1818:	f7fe fcc8 	bl	1ac <__adddf3>
    181c:	4622      	mov	r2, r4
    181e:	462b      	mov	r3, r5
    1820:	f7fe fe7a 	bl	518 <__aeabi_dmul>
    1824:	a374      	add	r3, pc, #464	; (adr r3, 19f8 <__ieee754_pow+0x6f8>)
    1826:	e9d3 2300 	ldrd	r2, r3, [r3]
    182a:	f7fe fcbf 	bl	1ac <__adddf3>
    182e:	4622      	mov	r2, r4
    1830:	462b      	mov	r3, r5
    1832:	f7fe fe71 	bl	518 <__aeabi_dmul>
    1836:	a372      	add	r3, pc, #456	; (adr r3, 1a00 <__ieee754_pow+0x700>)
    1838:	e9d3 2300 	ldrd	r2, r3, [r3]
    183c:	f7fe fcb6 	bl	1ac <__adddf3>
    1840:	4622      	mov	r2, r4
    1842:	462b      	mov	r3, r5
    1844:	f7fe fe68 	bl	518 <__aeabi_dmul>
    1848:	a36f      	add	r3, pc, #444	; (adr r3, 1a08 <__ieee754_pow+0x708>)
    184a:	e9d3 2300 	ldrd	r2, r3, [r3]
    184e:	f7fe fcad 	bl	1ac <__adddf3>
    1852:	4622      	mov	r2, r4
    1854:	4606      	mov	r6, r0
    1856:	460f      	mov	r7, r1
    1858:	462b      	mov	r3, r5
    185a:	4620      	mov	r0, r4
    185c:	4629      	mov	r1, r5
    185e:	f7fe fe5b 	bl	518 <__aeabi_dmul>
    1862:	4602      	mov	r2, r0
    1864:	460b      	mov	r3, r1
    1866:	4630      	mov	r0, r6
    1868:	4639      	mov	r1, r7
    186a:	f7fe fe55 	bl	518 <__aeabi_dmul>
    186e:	4642      	mov	r2, r8
    1870:	4604      	mov	r4, r0
    1872:	460d      	mov	r5, r1
    1874:	464b      	mov	r3, r9
    1876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    187a:	f7fe fc97 	bl	1ac <__adddf3>
    187e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    1882:	f7fe fe49 	bl	518 <__aeabi_dmul>
    1886:	4622      	mov	r2, r4
    1888:	462b      	mov	r3, r5
    188a:	f7fe fc8f 	bl	1ac <__adddf3>
    188e:	4642      	mov	r2, r8
    1890:	4606      	mov	r6, r0
    1892:	460f      	mov	r7, r1
    1894:	464b      	mov	r3, r9
    1896:	4640      	mov	r0, r8
    1898:	4649      	mov	r1, r9
    189a:	f7fe fe3d 	bl	518 <__aeabi_dmul>
    189e:	4b68      	ldr	r3, [pc, #416]	; (1a40 <__ieee754_pow+0x740>)
    18a0:	2200      	movs	r2, #0
    18a2:	4682      	mov	sl, r0
    18a4:	468b      	mov	fp, r1
    18a6:	f7fe fc81 	bl	1ac <__adddf3>
    18aa:	4632      	mov	r2, r6
    18ac:	463b      	mov	r3, r7
    18ae:	f7fe fc7d 	bl	1ac <__adddf3>
    18b2:	2400      	movs	r4, #0
    18b4:	460d      	mov	r5, r1
    18b6:	4622      	mov	r2, r4
    18b8:	460b      	mov	r3, r1
    18ba:	4640      	mov	r0, r8
    18bc:	4649      	mov	r1, r9
    18be:	f7fe fe2b 	bl	518 <__aeabi_dmul>
    18c2:	4b5f      	ldr	r3, [pc, #380]	; (1a40 <__ieee754_pow+0x740>)
    18c4:	4680      	mov	r8, r0
    18c6:	4689      	mov	r9, r1
    18c8:	2200      	movs	r2, #0
    18ca:	4620      	mov	r0, r4
    18cc:	4629      	mov	r1, r5
    18ce:	f7fe fc6b 	bl	1a8 <__aeabi_dsub>
    18d2:	4652      	mov	r2, sl
    18d4:	465b      	mov	r3, fp
    18d6:	f7fe fc67 	bl	1a8 <__aeabi_dsub>
    18da:	4602      	mov	r2, r0
    18dc:	460b      	mov	r3, r1
    18de:	4630      	mov	r0, r6
    18e0:	4639      	mov	r1, r7
    18e2:	f7fe fc61 	bl	1a8 <__aeabi_dsub>
    18e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    18ea:	f7fe fe15 	bl	518 <__aeabi_dmul>
    18ee:	4622      	mov	r2, r4
    18f0:	4606      	mov	r6, r0
    18f2:	460f      	mov	r7, r1
    18f4:	462b      	mov	r3, r5
    18f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    18fa:	f7fe fe0d 	bl	518 <__aeabi_dmul>
    18fe:	4602      	mov	r2, r0
    1900:	460b      	mov	r3, r1
    1902:	4630      	mov	r0, r6
    1904:	4639      	mov	r1, r7
    1906:	f7fe fc51 	bl	1ac <__adddf3>
    190a:	4606      	mov	r6, r0
    190c:	460f      	mov	r7, r1
    190e:	4602      	mov	r2, r0
    1910:	460b      	mov	r3, r1
    1912:	4640      	mov	r0, r8
    1914:	4649      	mov	r1, r9
    1916:	f7fe fc49 	bl	1ac <__adddf3>
    191a:	2400      	movs	r4, #0
    191c:	a33c      	add	r3, pc, #240	; (adr r3, 1a10 <__ieee754_pow+0x710>)
    191e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1922:	4620      	mov	r0, r4
    1924:	460d      	mov	r5, r1
    1926:	f7fe fdf7 	bl	518 <__aeabi_dmul>
    192a:	4642      	mov	r2, r8
    192c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1930:	464b      	mov	r3, r9
    1932:	4620      	mov	r0, r4
    1934:	4629      	mov	r1, r5
    1936:	f7fe fc37 	bl	1a8 <__aeabi_dsub>
    193a:	4602      	mov	r2, r0
    193c:	460b      	mov	r3, r1
    193e:	4630      	mov	r0, r6
    1940:	4639      	mov	r1, r7
    1942:	f7fe fc31 	bl	1a8 <__aeabi_dsub>
    1946:	a334      	add	r3, pc, #208	; (adr r3, 1a18 <__ieee754_pow+0x718>)
    1948:	e9d3 2300 	ldrd	r2, r3, [r3]
    194c:	f7fe fde4 	bl	518 <__aeabi_dmul>
    1950:	a333      	add	r3, pc, #204	; (adr r3, 1a20 <__ieee754_pow+0x720>)
    1952:	e9d3 2300 	ldrd	r2, r3, [r3]
    1956:	4606      	mov	r6, r0
    1958:	460f      	mov	r7, r1
    195a:	4620      	mov	r0, r4
    195c:	4629      	mov	r1, r5
    195e:	f7fe fddb 	bl	518 <__aeabi_dmul>
    1962:	4602      	mov	r2, r0
    1964:	460b      	mov	r3, r1
    1966:	4630      	mov	r0, r6
    1968:	4639      	mov	r1, r7
    196a:	f7fe fc1f 	bl	1ac <__adddf3>
    196e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1970:	4b34      	ldr	r3, [pc, #208]	; (1a44 <__ieee754_pow+0x744>)
    1972:	4413      	add	r3, r2
    1974:	e9d3 2300 	ldrd	r2, r3, [r3]
    1978:	f7fe fc18 	bl	1ac <__adddf3>
    197c:	4680      	mov	r8, r0
    197e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1980:	4689      	mov	r9, r1
    1982:	f7fe fd5f 	bl	444 <__aeabi_i2d>
    1986:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1988:	4b2f      	ldr	r3, [pc, #188]	; (1a48 <__ieee754_pow+0x748>)
    198a:	4413      	add	r3, r2
    198c:	e9d3 6700 	ldrd	r6, r7, [r3]
    1990:	4604      	mov	r4, r0
    1992:	460d      	mov	r5, r1
    1994:	4642      	mov	r2, r8
    1996:	464b      	mov	r3, r9
    1998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    199c:	f7fe fc06 	bl	1ac <__adddf3>
    19a0:	4632      	mov	r2, r6
    19a2:	463b      	mov	r3, r7
    19a4:	f7fe fc02 	bl	1ac <__adddf3>
    19a8:	4622      	mov	r2, r4
    19aa:	462b      	mov	r3, r5
    19ac:	f7fe fbfe 	bl	1ac <__adddf3>
    19b0:	f04f 0a00 	mov.w	sl, #0
    19b4:	4622      	mov	r2, r4
    19b6:	462b      	mov	r3, r5
    19b8:	4650      	mov	r0, sl
    19ba:	468b      	mov	fp, r1
    19bc:	f7fe fbf4 	bl	1a8 <__aeabi_dsub>
    19c0:	4632      	mov	r2, r6
    19c2:	463b      	mov	r3, r7
    19c4:	f7fe fbf0 	bl	1a8 <__aeabi_dsub>
    19c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    19cc:	f7fe fbec 	bl	1a8 <__aeabi_dsub>
    19d0:	4602      	mov	r2, r0
    19d2:	460b      	mov	r3, r1
    19d4:	4640      	mov	r0, r8
    19d6:	4649      	mov	r1, r9
    19d8:	e608      	b.n	15ec <__ieee754_pow+0x2ec>
    19da:	bf00      	nop
    19dc:	f3af 8000 	nop.w
    19e0:	4a454eef 	.word	0x4a454eef
    19e4:	3fca7e28 	.word	0x3fca7e28
    19e8:	93c9db65 	.word	0x93c9db65
    19ec:	3fcd864a 	.word	0x3fcd864a
    19f0:	a91d4101 	.word	0xa91d4101
    19f4:	3fd17460 	.word	0x3fd17460
    19f8:	518f264d 	.word	0x518f264d
    19fc:	3fd55555 	.word	0x3fd55555
    1a00:	db6fabff 	.word	0xdb6fabff
    1a04:	3fdb6db6 	.word	0x3fdb6db6
    1a08:	33333303 	.word	0x33333303
    1a0c:	3fe33333 	.word	0x3fe33333
    1a10:	e0000000 	.word	0xe0000000
    1a14:	3feec709 	.word	0x3feec709
    1a18:	dc3a03fd 	.word	0xdc3a03fd
    1a1c:	3feec709 	.word	0x3feec709
    1a20:	145b01f5 	.word	0x145b01f5
    1a24:	be3e2fe0 	.word	0xbe3e2fe0
    1a28:	7ff00000 	.word	0x7ff00000
    1a2c:	43400000 	.word	0x43400000
    1a30:	0003988e 	.word	0x0003988e
    1a34:	000bb679 	.word	0x000bb679
    1a38:	000110b8 	.word	0x000110b8
    1a3c:	3ff00000 	.word	0x3ff00000
    1a40:	40080000 	.word	0x40080000
    1a44:	000110d8 	.word	0x000110d8
    1a48:	000110c8 	.word	0x000110c8
    1a4c:	2601      	movs	r6, #1
    1a4e:	e667      	b.n	1720 <__ieee754_pow+0x420>
    1a50:	a39d      	add	r3, pc, #628	; (adr r3, 1cc8 <__ieee754_pow+0x9c8>)
    1a52:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a56:	4640      	mov	r0, r8
    1a58:	4649      	mov	r1, r9
    1a5a:	f7fe fba7 	bl	1ac <__adddf3>
    1a5e:	4622      	mov	r2, r4
    1a60:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1a64:	462b      	mov	r3, r5
    1a66:	4650      	mov	r0, sl
    1a68:	4639      	mov	r1, r7
    1a6a:	f7fe fb9d 	bl	1a8 <__aeabi_dsub>
    1a6e:	4602      	mov	r2, r0
    1a70:	460b      	mov	r3, r1
    1a72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1a76:	f7ff f849 	bl	b0c <__aeabi_dcmpgt>
    1a7a:	2800      	cmp	r0, #0
    1a7c:	f47f adff 	bne.w	167e <__ieee754_pow+0x37e>
    1a80:	4aa5      	ldr	r2, [pc, #660]	; (1d18 <__ieee754_pow+0xa18>)
    1a82:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
    1a86:	4293      	cmp	r3, r2
    1a88:	f340 8103 	ble.w	1c92 <__ieee754_pow+0x992>
    1a8c:	151b      	asrs	r3, r3, #20
    1a8e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
    1a92:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    1a96:	fa4a f303 	asr.w	r3, sl, r3
    1a9a:	4433      	add	r3, r6
    1a9c:	f3c3 520a 	ubfx	r2, r3, #20, #11
    1aa0:	4f9e      	ldr	r7, [pc, #632]	; (1d1c <__ieee754_pow+0xa1c>)
    1aa2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    1aa6:	4117      	asrs	r7, r2
    1aa8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
    1aac:	2000      	movs	r0, #0
    1aae:	ea23 0107 	bic.w	r1, r3, r7
    1ab2:	f1c2 0214 	rsb	r2, r2, #20
    1ab6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
    1aba:	fa4a fa02 	asr.w	sl, sl, r2
    1abe:	2e00      	cmp	r6, #0
    1ac0:	4602      	mov	r2, r0
    1ac2:	460b      	mov	r3, r1
    1ac4:	4620      	mov	r0, r4
    1ac6:	4629      	mov	r1, r5
    1ac8:	bfb8      	it	lt
    1aca:	f1ca 0a00 	rsblt	sl, sl, #0
    1ace:	f7fe fb6b 	bl	1a8 <__aeabi_dsub>
    1ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1ad6:	4642      	mov	r2, r8
    1ad8:	464b      	mov	r3, r9
    1ada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1ade:	f7fe fb65 	bl	1ac <__adddf3>
    1ae2:	2400      	movs	r4, #0
    1ae4:	a37a      	add	r3, pc, #488	; (adr r3, 1cd0 <__ieee754_pow+0x9d0>)
    1ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
    1aea:	4620      	mov	r0, r4
    1aec:	460d      	mov	r5, r1
    1aee:	f7fe fd13 	bl	518 <__aeabi_dmul>
    1af2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1af6:	4606      	mov	r6, r0
    1af8:	460f      	mov	r7, r1
    1afa:	4620      	mov	r0, r4
    1afc:	4629      	mov	r1, r5
    1afe:	f7fe fb53 	bl	1a8 <__aeabi_dsub>
    1b02:	4602      	mov	r2, r0
    1b04:	460b      	mov	r3, r1
    1b06:	4640      	mov	r0, r8
    1b08:	4649      	mov	r1, r9
    1b0a:	f7fe fb4d 	bl	1a8 <__aeabi_dsub>
    1b0e:	a372      	add	r3, pc, #456	; (adr r3, 1cd8 <__ieee754_pow+0x9d8>)
    1b10:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b14:	f7fe fd00 	bl	518 <__aeabi_dmul>
    1b18:	a371      	add	r3, pc, #452	; (adr r3, 1ce0 <__ieee754_pow+0x9e0>)
    1b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b1e:	4680      	mov	r8, r0
    1b20:	4689      	mov	r9, r1
    1b22:	4620      	mov	r0, r4
    1b24:	4629      	mov	r1, r5
    1b26:	f7fe fcf7 	bl	518 <__aeabi_dmul>
    1b2a:	4602      	mov	r2, r0
    1b2c:	460b      	mov	r3, r1
    1b2e:	4640      	mov	r0, r8
    1b30:	4649      	mov	r1, r9
    1b32:	f7fe fb3b 	bl	1ac <__adddf3>
    1b36:	4604      	mov	r4, r0
    1b38:	460d      	mov	r5, r1
    1b3a:	4602      	mov	r2, r0
    1b3c:	460b      	mov	r3, r1
    1b3e:	4630      	mov	r0, r6
    1b40:	4639      	mov	r1, r7
    1b42:	f7fe fb33 	bl	1ac <__adddf3>
    1b46:	4632      	mov	r2, r6
    1b48:	463b      	mov	r3, r7
    1b4a:	4680      	mov	r8, r0
    1b4c:	4689      	mov	r9, r1
    1b4e:	f7fe fb2b 	bl	1a8 <__aeabi_dsub>
    1b52:	4602      	mov	r2, r0
    1b54:	460b      	mov	r3, r1
    1b56:	4620      	mov	r0, r4
    1b58:	4629      	mov	r1, r5
    1b5a:	f7fe fb25 	bl	1a8 <__aeabi_dsub>
    1b5e:	4642      	mov	r2, r8
    1b60:	4606      	mov	r6, r0
    1b62:	460f      	mov	r7, r1
    1b64:	464b      	mov	r3, r9
    1b66:	4640      	mov	r0, r8
    1b68:	4649      	mov	r1, r9
    1b6a:	f7fe fcd5 	bl	518 <__aeabi_dmul>
    1b6e:	a35e      	add	r3, pc, #376	; (adr r3, 1ce8 <__ieee754_pow+0x9e8>)
    1b70:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b74:	4604      	mov	r4, r0
    1b76:	460d      	mov	r5, r1
    1b78:	f7fe fcce 	bl	518 <__aeabi_dmul>
    1b7c:	a35c      	add	r3, pc, #368	; (adr r3, 1cf0 <__ieee754_pow+0x9f0>)
    1b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b82:	f7fe fb11 	bl	1a8 <__aeabi_dsub>
    1b86:	4622      	mov	r2, r4
    1b88:	462b      	mov	r3, r5
    1b8a:	f7fe fcc5 	bl	518 <__aeabi_dmul>
    1b8e:	a35a      	add	r3, pc, #360	; (adr r3, 1cf8 <__ieee754_pow+0x9f8>)
    1b90:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b94:	f7fe fb0a 	bl	1ac <__adddf3>
    1b98:	4622      	mov	r2, r4
    1b9a:	462b      	mov	r3, r5
    1b9c:	f7fe fcbc 	bl	518 <__aeabi_dmul>
    1ba0:	a357      	add	r3, pc, #348	; (adr r3, 1d00 <__ieee754_pow+0xa00>)
    1ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ba6:	f7fe faff 	bl	1a8 <__aeabi_dsub>
    1baa:	4622      	mov	r2, r4
    1bac:	462b      	mov	r3, r5
    1bae:	f7fe fcb3 	bl	518 <__aeabi_dmul>
    1bb2:	a355      	add	r3, pc, #340	; (adr r3, 1d08 <__ieee754_pow+0xa08>)
    1bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
    1bb8:	f7fe faf8 	bl	1ac <__adddf3>
    1bbc:	4622      	mov	r2, r4
    1bbe:	462b      	mov	r3, r5
    1bc0:	f7fe fcaa 	bl	518 <__aeabi_dmul>
    1bc4:	4602      	mov	r2, r0
    1bc6:	460b      	mov	r3, r1
    1bc8:	4640      	mov	r0, r8
    1bca:	4649      	mov	r1, r9
    1bcc:	f7fe faec 	bl	1a8 <__aeabi_dsub>
    1bd0:	4604      	mov	r4, r0
    1bd2:	460d      	mov	r5, r1
    1bd4:	4602      	mov	r2, r0
    1bd6:	460b      	mov	r3, r1
    1bd8:	4640      	mov	r0, r8
    1bda:	4649      	mov	r1, r9
    1bdc:	f7fe fc9c 	bl	518 <__aeabi_dmul>
    1be0:	2200      	movs	r2, #0
    1be2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1be6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1bea:	4620      	mov	r0, r4
    1bec:	4629      	mov	r1, r5
    1bee:	f7fe fadb 	bl	1a8 <__aeabi_dsub>
    1bf2:	4602      	mov	r2, r0
    1bf4:	460b      	mov	r3, r1
    1bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1bfa:	f7fe fdb7 	bl	76c <__aeabi_ddiv>
    1bfe:	4632      	mov	r2, r6
    1c00:	4604      	mov	r4, r0
    1c02:	460d      	mov	r5, r1
    1c04:	463b      	mov	r3, r7
    1c06:	4640      	mov	r0, r8
    1c08:	4649      	mov	r1, r9
    1c0a:	f7fe fc85 	bl	518 <__aeabi_dmul>
    1c0e:	4632      	mov	r2, r6
    1c10:	463b      	mov	r3, r7
    1c12:	f7fe facb 	bl	1ac <__adddf3>
    1c16:	4602      	mov	r2, r0
    1c18:	460b      	mov	r3, r1
    1c1a:	4620      	mov	r0, r4
    1c1c:	4629      	mov	r1, r5
    1c1e:	f7fe fac3 	bl	1a8 <__aeabi_dsub>
    1c22:	4642      	mov	r2, r8
    1c24:	464b      	mov	r3, r9
    1c26:	f7fe fabf 	bl	1a8 <__aeabi_dsub>
    1c2a:	4602      	mov	r2, r0
    1c2c:	460b      	mov	r3, r1
    1c2e:	2000      	movs	r0, #0
    1c30:	493b      	ldr	r1, [pc, #236]	; (1d20 <__ieee754_pow+0xa20>)
    1c32:	f7fe fab9 	bl	1a8 <__aeabi_dsub>
    1c36:	eb01 540a 	add.w	r4, r1, sl, lsl #20
    1c3a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    1c3e:	da2b      	bge.n	1c98 <__ieee754_pow+0x998>
    1c40:	4652      	mov	r2, sl
    1c42:	f000 f875 	bl	1d30 <scalbn>
    1c46:	e9dd 2300 	ldrd	r2, r3, [sp]
    1c4a:	f7ff bbf2 	b.w	1432 <__ieee754_pow+0x132>
    1c4e:	4b35      	ldr	r3, [pc, #212]	; (1d24 <__ieee754_pow+0xa24>)
    1c50:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    1c54:	429f      	cmp	r7, r3
    1c56:	f77f af13 	ble.w	1a80 <__ieee754_pow+0x780>
    1c5a:	4b33      	ldr	r3, [pc, #204]	; (1d28 <__ieee754_pow+0xa28>)
    1c5c:	440b      	add	r3, r1
    1c5e:	4303      	orrs	r3, r0
    1c60:	d00b      	beq.n	1c7a <__ieee754_pow+0x97a>
    1c62:	a32b      	add	r3, pc, #172	; (adr r3, 1d10 <__ieee754_pow+0xa10>)
    1c64:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c68:	e9dd 0100 	ldrd	r0, r1, [sp]
    1c6c:	f7fe fc54 	bl	518 <__aeabi_dmul>
    1c70:	a327      	add	r3, pc, #156	; (adr r3, 1d10 <__ieee754_pow+0xa10>)
    1c72:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c76:	f7ff bbdc 	b.w	1432 <__ieee754_pow+0x132>
    1c7a:	4622      	mov	r2, r4
    1c7c:	462b      	mov	r3, r5
    1c7e:	f7fe fa93 	bl	1a8 <__aeabi_dsub>
    1c82:	4642      	mov	r2, r8
    1c84:	464b      	mov	r3, r9
    1c86:	f7fe ff37 	bl	af8 <__aeabi_dcmpge>
    1c8a:	2800      	cmp	r0, #0
    1c8c:	f43f aef8 	beq.w	1a80 <__ieee754_pow+0x780>
    1c90:	e7e7      	b.n	1c62 <__ieee754_pow+0x962>
    1c92:	f04f 0a00 	mov.w	sl, #0
    1c96:	e71e      	b.n	1ad6 <__ieee754_pow+0x7d6>
    1c98:	4621      	mov	r1, r4
    1c9a:	e7d4      	b.n	1c46 <__ieee754_pow+0x946>
    1c9c:	f8df c080 	ldr.w	ip, [pc, #128]	; 1d20 <__ieee754_pow+0xa20>
    1ca0:	f04f 0b00 	mov.w	fp, #0
    1ca4:	f7ff bbb0 	b.w	1408 <__ieee754_pow+0x108>
    1ca8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
    1cac:	f7ff bbac 	b.w	1408 <__ieee754_pow+0x108>
    1cb0:	4638      	mov	r0, r7
    1cb2:	4641      	mov	r1, r8
    1cb4:	f7ff bbbf 	b.w	1436 <__ieee754_pow+0x136>
    1cb8:	9200      	str	r2, [sp, #0]
    1cba:	f7ff bb7f 	b.w	13bc <__ieee754_pow+0xbc>
    1cbe:	2300      	movs	r3, #0
    1cc0:	f7ff bb69 	b.w	1396 <__ieee754_pow+0x96>
    1cc4:	f3af 8000 	nop.w
    1cc8:	652b82fe 	.word	0x652b82fe
    1ccc:	3c971547 	.word	0x3c971547
    1cd0:	00000000 	.word	0x00000000
    1cd4:	3fe62e43 	.word	0x3fe62e43
    1cd8:	fefa39ef 	.word	0xfefa39ef
    1cdc:	3fe62e42 	.word	0x3fe62e42
    1ce0:	0ca86c39 	.word	0x0ca86c39
    1ce4:	be205c61 	.word	0xbe205c61
    1ce8:	72bea4d0 	.word	0x72bea4d0
    1cec:	3e663769 	.word	0x3e663769
    1cf0:	c5d26bf1 	.word	0xc5d26bf1
    1cf4:	3ebbbd41 	.word	0x3ebbbd41
    1cf8:	af25de2c 	.word	0xaf25de2c
    1cfc:	3f11566a 	.word	0x3f11566a
    1d00:	16bebd93 	.word	0x16bebd93
    1d04:	3f66c16c 	.word	0x3f66c16c
    1d08:	5555553e 	.word	0x5555553e
    1d0c:	3fc55555 	.word	0x3fc55555
    1d10:	c2f8f359 	.word	0xc2f8f359
    1d14:	01a56e1f 	.word	0x01a56e1f
    1d18:	3fe00000 	.word	0x3fe00000
    1d1c:	000fffff 	.word	0x000fffff
    1d20:	3ff00000 	.word	0x3ff00000
    1d24:	4090cbff 	.word	0x4090cbff
    1d28:	3f6f3400 	.word	0x3f6f3400
    1d2c:	00000000 	.word	0x00000000

00001d30 <scalbn>:
    1d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d32:	f3c1 560a 	ubfx	r6, r1, #20, #11
    1d36:	4604      	mov	r4, r0
    1d38:	460d      	mov	r5, r1
    1d3a:	4617      	mov	r7, r2
    1d3c:	460b      	mov	r3, r1
    1d3e:	b996      	cbnz	r6, 1d66 <scalbn+0x36>
    1d40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    1d44:	4303      	orrs	r3, r0
    1d46:	d039      	beq.n	1dbc <scalbn+0x8c>
    1d48:	4b33      	ldr	r3, [pc, #204]	; (1e18 <scalbn+0xe8>)
    1d4a:	2200      	movs	r2, #0
    1d4c:	f7fe fbe4 	bl	518 <__aeabi_dmul>
    1d50:	4b32      	ldr	r3, [pc, #200]	; (1e1c <scalbn+0xec>)
    1d52:	429f      	cmp	r7, r3
    1d54:	4604      	mov	r4, r0
    1d56:	460d      	mov	r5, r1
    1d58:	da0f      	bge.n	1d7a <scalbn+0x4a>
    1d5a:	a32b      	add	r3, pc, #172	; (adr r3, 1e08 <scalbn+0xd8>)
    1d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d60:	f7fe fbda 	bl	518 <__aeabi_dmul>
    1d64:	e006      	b.n	1d74 <scalbn+0x44>
    1d66:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1d6a:	4296      	cmp	r6, r2
    1d6c:	d10a      	bne.n	1d84 <scalbn+0x54>
    1d6e:	4602      	mov	r2, r0
    1d70:	f7fe fa1c 	bl	1ac <__adddf3>
    1d74:	4604      	mov	r4, r0
    1d76:	460d      	mov	r5, r1
    1d78:	e020      	b.n	1dbc <scalbn+0x8c>
    1d7a:	460b      	mov	r3, r1
    1d7c:	f3c1 510a 	ubfx	r1, r1, #20, #11
    1d80:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
    1d84:	19b9      	adds	r1, r7, r6
    1d86:	f240 72fe 	movw	r2, #2046	; 0x7fe
    1d8a:	4291      	cmp	r1, r2
    1d8c:	dd0e      	ble.n	1dac <scalbn+0x7c>
    1d8e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
    1d92:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
    1d96:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
    1d9a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
    1d9e:	a31c      	add	r3, pc, #112	; (adr r3, 1e10 <scalbn+0xe0>)
    1da0:	e9d3 2300 	ldrd	r2, r3, [r3]
    1da4:	481e      	ldr	r0, [pc, #120]	; (1e20 <scalbn+0xf0>)
    1da6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
    1daa:	e7d9      	b.n	1d60 <scalbn+0x30>
    1dac:	2900      	cmp	r1, #0
    1dae:	dd08      	ble.n	1dc2 <scalbn+0x92>
    1db0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    1db4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    1db8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
    1dbc:	4620      	mov	r0, r4
    1dbe:	4629      	mov	r1, r5
    1dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dc2:	f111 0f35 	cmn.w	r1, #53	; 0x35
    1dc6:	da12      	bge.n	1dee <scalbn+0xbe>
    1dc8:	f24c 3350 	movw	r3, #50000	; 0xc350
    1dcc:	429f      	cmp	r7, r3
    1dce:	ea4f 73d5 	mov.w	r3, r5, lsr #31
    1dd2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
    1dd6:	dcdc      	bgt.n	1d92 <scalbn+0x62>
    1dd8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
    1ddc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
    1de0:	a309      	add	r3, pc, #36	; (adr r3, 1e08 <scalbn+0xd8>)
    1de2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1de6:	480f      	ldr	r0, [pc, #60]	; (1e24 <scalbn+0xf4>)
    1de8:	f041 011f 	orr.w	r1, r1, #31
    1dec:	e7b8      	b.n	1d60 <scalbn+0x30>
    1dee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    1df2:	3136      	adds	r1, #54	; 0x36
    1df4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    1df8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
    1dfc:	4620      	mov	r0, r4
    1dfe:	4b0a      	ldr	r3, [pc, #40]	; (1e28 <scalbn+0xf8>)
    1e00:	4629      	mov	r1, r5
    1e02:	2200      	movs	r2, #0
    1e04:	e7ac      	b.n	1d60 <scalbn+0x30>
    1e06:	bf00      	nop
    1e08:	c2f8f359 	.word	0xc2f8f359
    1e0c:	01a56e1f 	.word	0x01a56e1f
    1e10:	8800759c 	.word	0x8800759c
    1e14:	7e37e43c 	.word	0x7e37e43c
    1e18:	43500000 	.word	0x43500000
    1e1c:	ffff3cb0 	.word	0xffff3cb0
    1e20:	8800759c 	.word	0x8800759c
    1e24:	c2f8f359 	.word	0xc2f8f359
    1e28:	3c900000 	.word	0x3c900000
    1e2c:	00000000 	.word	0x00000000

00001e30 <_gcvt>:
    1e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1e34:	4690      	mov	r8, r2
    1e36:	b08b      	sub	sp, #44	; 0x2c
    1e38:	461c      	mov	r4, r3
    1e3a:	4681      	mov	r9, r0
    1e3c:	2200      	movs	r2, #0
    1e3e:	2300      	movs	r3, #0
    1e40:	4640      	mov	r0, r8
    1e42:	4621      	mov	r1, r4
    1e44:	e9dd 7512 	ldrd	r7, r5, [sp, #72]	; 0x48
    1e48:	9e15      	ldr	r6, [sp, #84]	; 0x54
    1e4a:	f7fe fe41 	bl	ad0 <__aeabi_dcmplt>
    1e4e:	b108      	cbz	r0, 1e54 <_gcvt+0x24>
    1e50:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    1e54:	2200      	movs	r2, #0
    1e56:	2300      	movs	r3, #0
    1e58:	4640      	mov	r0, r8
    1e5a:	4621      	mov	r1, r4
    1e5c:	f7fe fe2e 	bl	abc <__aeabi_dcmpeq>
    1e60:	b138      	cbz	r0, 1e72 <_gcvt+0x42>
    1e62:	2330      	movs	r3, #48	; 0x30
    1e64:	702b      	strb	r3, [r5, #0]
    1e66:	2300      	movs	r3, #0
    1e68:	706b      	strb	r3, [r5, #1]
    1e6a:	4628      	mov	r0, r5
    1e6c:	b00b      	add	sp, #44	; 0x2c
    1e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1e72:	a34d      	add	r3, pc, #308	; (adr r3, 1fa8 <_gcvt+0x178>)
    1e74:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e78:	4640      	mov	r0, r8
    1e7a:	4621      	mov	r1, r4
    1e7c:	f7fe fe32 	bl	ae4 <__aeabi_dcmple>
    1e80:	b160      	cbz	r0, 1e9c <_gcvt+0x6c>
    1e82:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    1e86:	9301      	str	r3, [sp, #4]
    1e88:	3f01      	subs	r7, #1
    1e8a:	9602      	str	r6, [sp, #8]
    1e8c:	9700      	str	r7, [sp, #0]
    1e8e:	4642      	mov	r2, r8
    1e90:	4623      	mov	r3, r4
    1e92:	4629      	mov	r1, r5
    1e94:	4648      	mov	r0, r9
    1e96:	f00e fd0a 	bl	108ae <print_e>
    1e9a:	e7e6      	b.n	1e6a <_gcvt+0x3a>
    1e9c:	4638      	mov	r0, r7
    1e9e:	f00c fa0b 	bl	e2b8 <_mprec_log10>
    1ea2:	4642      	mov	r2, r8
    1ea4:	4623      	mov	r3, r4
    1ea6:	f7fe fe1d 	bl	ae4 <__aeabi_dcmple>
    1eaa:	2800      	cmp	r0, #0
    1eac:	d1e9      	bne.n	1e82 <_gcvt+0x52>
    1eae:	ab09      	add	r3, sp, #36	; 0x24
    1eb0:	9304      	str	r3, [sp, #16]
    1eb2:	ab08      	add	r3, sp, #32
    1eb4:	9303      	str	r3, [sp, #12]
    1eb6:	ab07      	add	r3, sp, #28
    1eb8:	e9cd 7301 	strd	r7, r3, [sp, #4]
    1ebc:	2302      	movs	r3, #2
    1ebe:	9300      	str	r3, [sp, #0]
    1ec0:	4642      	mov	r2, r8
    1ec2:	4623      	mov	r3, r4
    1ec4:	4648      	mov	r0, r9
    1ec6:	f000 f873 	bl	1fb0 <_dtoa_r>
    1eca:	9a07      	ldr	r2, [sp, #28]
    1ecc:	f242 730f 	movw	r3, #9999	; 0x270f
    1ed0:	429a      	cmp	r2, r3
    1ed2:	4601      	mov	r1, r0
    1ed4:	d00f      	beq.n	1ef6 <_gcvt+0xc6>
    1ed6:	462b      	mov	r3, r5
    1ed8:	442f      	add	r7, r5
    1eda:	4608      	mov	r0, r1
    1edc:	f811 cb01 	ldrb.w	ip, [r1], #1
    1ee0:	9a07      	ldr	r2, [sp, #28]
    1ee2:	1afc      	subs	r4, r7, r3
    1ee4:	f1bc 0f00 	cmp.w	ip, #0
    1ee8:	d001      	beq.n	1eee <_gcvt+0xbe>
    1eea:	2a00      	cmp	r2, #0
    1eec:	dc07      	bgt.n	1efe <_gcvt+0xce>
    1eee:	2100      	movs	r1, #0
    1ef0:	f04f 0c30 	mov.w	ip, #48	; 0x30
    1ef4:	e00c      	b.n	1f10 <_gcvt+0xe0>
    1ef6:	4628      	mov	r0, r5
    1ef8:	f00e fe4d 	bl	10b96 <strcpy>
    1efc:	e7b5      	b.n	1e6a <_gcvt+0x3a>
    1efe:	3a01      	subs	r2, #1
    1f00:	f803 cb01 	strb.w	ip, [r3], #1
    1f04:	9207      	str	r2, [sp, #28]
    1f06:	e7e8      	b.n	1eda <_gcvt+0xaa>
    1f08:	f803 cb01 	strb.w	ip, [r3], #1
    1f0c:	3c01      	subs	r4, #1
    1f0e:	2101      	movs	r1, #1
    1f10:	2a00      	cmp	r2, #0
    1f12:	4617      	mov	r7, r2
    1f14:	dc2a      	bgt.n	1f6c <_gcvt+0x13c>
    1f16:	b101      	cbz	r1, 1f1a <_gcvt+0xea>
    1f18:	9207      	str	r2, [sp, #28]
    1f1a:	b90e      	cbnz	r6, 1f20 <_gcvt+0xf0>
    1f1c:	7802      	ldrb	r2, [r0, #0]
    1f1e:	b312      	cbz	r2, 1f66 <_gcvt+0x136>
    1f20:	42ab      	cmp	r3, r5
    1f22:	bf04      	itt	eq
    1f24:	2230      	moveq	r2, #48	; 0x30
    1f26:	f803 2b01 	strbeq.w	r2, [r3], #1
    1f2a:	222e      	movs	r2, #46	; 0x2e
    1f2c:	701a      	strb	r2, [r3, #0]
    1f2e:	9a07      	ldr	r2, [sp, #28]
    1f30:	4619      	mov	r1, r3
    1f32:	2700      	movs	r7, #0
    1f34:	eba2 0c03 	sub.w	ip, r2, r3
    1f38:	f04f 0e30 	mov.w	lr, #48	; 0x30
    1f3c:	eb1c 0f01 	cmn.w	ip, r1
    1f40:	d41c      	bmi.n	1f7c <_gcvt+0x14c>
    1f42:	2a00      	cmp	r2, #0
    1f44:	f1c2 0100 	rsb	r1, r2, #0
    1f48:	bfc8      	it	gt
    1f4a:	2100      	movgt	r1, #0
    1f4c:	f101 0c01 	add.w	ip, r1, #1
    1f50:	4463      	add	r3, ip
    1f52:	440a      	add	r2, r1
    1f54:	b107      	cbz	r7, 1f58 <_gcvt+0x128>
    1f56:	9207      	str	r2, [sp, #28]
    1f58:	1e42      	subs	r2, r0, #1
    1f5a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1f5e:	b109      	cbz	r1, 1f64 <_gcvt+0x134>
    1f60:	2c00      	cmp	r4, #0
    1f62:	dc0f      	bgt.n	1f84 <_gcvt+0x154>
    1f64:	b9de      	cbnz	r6, 1f9e <_gcvt+0x16e>
    1f66:	2200      	movs	r2, #0
    1f68:	701a      	strb	r2, [r3, #0]
    1f6a:	e77e      	b.n	1e6a <_gcvt+0x3a>
    1f6c:	2c00      	cmp	r4, #0
    1f6e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    1f72:	dcc9      	bgt.n	1f08 <_gcvt+0xd8>
    1f74:	2900      	cmp	r1, #0
    1f76:	d0d0      	beq.n	1f1a <_gcvt+0xea>
    1f78:	9707      	str	r7, [sp, #28]
    1f7a:	e7ce      	b.n	1f1a <_gcvt+0xea>
    1f7c:	f801 ef01 	strb.w	lr, [r1, #1]!
    1f80:	2701      	movs	r7, #1
    1f82:	e7db      	b.n	1f3c <_gcvt+0x10c>
    1f84:	f803 1b01 	strb.w	r1, [r3], #1
    1f88:	3c01      	subs	r4, #1
    1f8a:	e7e6      	b.n	1f5a <_gcvt+0x12a>
    1f8c:	f802 6b01 	strb.w	r6, [r2], #1
    1f90:	1a81      	subs	r1, r0, r2
    1f92:	2900      	cmp	r1, #0
    1f94:	dcfa      	bgt.n	1f8c <_gcvt+0x15c>
    1f96:	2c00      	cmp	r4, #0
    1f98:	bfa8      	it	ge
    1f9a:	191b      	addge	r3, r3, r4
    1f9c:	e7e3      	b.n	1f66 <_gcvt+0x136>
    1f9e:	461a      	mov	r2, r3
    1fa0:	1918      	adds	r0, r3, r4
    1fa2:	2630      	movs	r6, #48	; 0x30
    1fa4:	e7f4      	b.n	1f90 <_gcvt+0x160>
    1fa6:	bf00      	nop
    1fa8:	eb1c432d 	.word	0xeb1c432d
    1fac:	3f1a36e2 	.word	0x3f1a36e2

00001fb0 <_dtoa_r>:
    1fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fb4:	6a44      	ldr	r4, [r0, #36]	; 0x24
    1fb6:	b099      	sub	sp, #100	; 0x64
    1fb8:	4616      	mov	r6, r2
    1fba:	461f      	mov	r7, r3
    1fbc:	e9cd 6704 	strd	r6, r7, [sp, #16]
    1fc0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    1fc4:	4605      	mov	r5, r0
    1fc6:	b974      	cbnz	r4, 1fe6 <_dtoa_r+0x36>
    1fc8:	2010      	movs	r0, #16
    1fca:	f00b fd1b 	bl	da04 <malloc>
    1fce:	4602      	mov	r2, r0
    1fd0:	6268      	str	r0, [r5, #36]	; 0x24
    1fd2:	b920      	cbnz	r0, 1fde <_dtoa_r+0x2e>
    1fd4:	4ba8      	ldr	r3, [pc, #672]	; (2278 <_dtoa_r+0x2c8>)
    1fd6:	21ea      	movs	r1, #234	; 0xea
    1fd8:	48a8      	ldr	r0, [pc, #672]	; (227c <_dtoa_r+0x2cc>)
    1fda:	f00c fcb1 	bl	e940 <__assert_func>
    1fde:	e9c0 4401 	strd	r4, r4, [r0, #4]
    1fe2:	6004      	str	r4, [r0, #0]
    1fe4:	60c4      	str	r4, [r0, #12]
    1fe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1fe8:	6819      	ldr	r1, [r3, #0]
    1fea:	b151      	cbz	r1, 2002 <_dtoa_r+0x52>
    1fec:	685a      	ldr	r2, [r3, #4]
    1fee:	604a      	str	r2, [r1, #4]
    1ff0:	2301      	movs	r3, #1
    1ff2:	4093      	lsls	r3, r2
    1ff4:	608b      	str	r3, [r1, #8]
    1ff6:	4628      	mov	r0, r5
    1ff8:	f00b fe8a 	bl	dd10 <_Bfree>
    1ffc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1ffe:	2200      	movs	r2, #0
    2000:	601a      	str	r2, [r3, #0]
    2002:	1e3b      	subs	r3, r7, #0
    2004:	bfb9      	ittee	lt
    2006:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    200a:	9305      	strlt	r3, [sp, #20]
    200c:	2300      	movge	r3, #0
    200e:	f8c8 3000 	strge.w	r3, [r8]
    2012:	f8dd 9014 	ldr.w	r9, [sp, #20]
    2016:	4b9a      	ldr	r3, [pc, #616]	; (2280 <_dtoa_r+0x2d0>)
    2018:	bfbc      	itt	lt
    201a:	2201      	movlt	r2, #1
    201c:	f8c8 2000 	strlt.w	r2, [r8]
    2020:	ea33 0309 	bics.w	r3, r3, r9
    2024:	d119      	bne.n	205a <_dtoa_r+0xaa>
    2026:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2028:	f242 730f 	movw	r3, #9999	; 0x270f
    202c:	6013      	str	r3, [r2, #0]
    202e:	f3c9 0313 	ubfx	r3, r9, #0, #20
    2032:	4333      	orrs	r3, r6
    2034:	f000 8580 	beq.w	2b38 <_dtoa_r+0xb88>
    2038:	9b26      	ldr	r3, [sp, #152]	; 0x98
    203a:	b953      	cbnz	r3, 2052 <_dtoa_r+0xa2>
    203c:	4b91      	ldr	r3, [pc, #580]	; (2284 <_dtoa_r+0x2d4>)
    203e:	e022      	b.n	2086 <_dtoa_r+0xd6>
    2040:	4b91      	ldr	r3, [pc, #580]	; (2288 <_dtoa_r+0x2d8>)
    2042:	9303      	str	r3, [sp, #12]
    2044:	3308      	adds	r3, #8
    2046:	9a26      	ldr	r2, [sp, #152]	; 0x98
    2048:	6013      	str	r3, [r2, #0]
    204a:	9803      	ldr	r0, [sp, #12]
    204c:	b019      	add	sp, #100	; 0x64
    204e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2052:	4b8c      	ldr	r3, [pc, #560]	; (2284 <_dtoa_r+0x2d4>)
    2054:	9303      	str	r3, [sp, #12]
    2056:	3303      	adds	r3, #3
    2058:	e7f5      	b.n	2046 <_dtoa_r+0x96>
    205a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    205e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    2062:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    2066:	2200      	movs	r2, #0
    2068:	2300      	movs	r3, #0
    206a:	f7fe fd27 	bl	abc <__aeabi_dcmpeq>
    206e:	4680      	mov	r8, r0
    2070:	b158      	cbz	r0, 208a <_dtoa_r+0xda>
    2072:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2074:	2301      	movs	r3, #1
    2076:	6013      	str	r3, [r2, #0]
    2078:	9b26      	ldr	r3, [sp, #152]	; 0x98
    207a:	2b00      	cmp	r3, #0
    207c:	f000 8559 	beq.w	2b32 <_dtoa_r+0xb82>
    2080:	4882      	ldr	r0, [pc, #520]	; (228c <_dtoa_r+0x2dc>)
    2082:	6018      	str	r0, [r3, #0]
    2084:	1e43      	subs	r3, r0, #1
    2086:	9303      	str	r3, [sp, #12]
    2088:	e7df      	b.n	204a <_dtoa_r+0x9a>
    208a:	ab16      	add	r3, sp, #88	; 0x58
    208c:	9301      	str	r3, [sp, #4]
    208e:	ab17      	add	r3, sp, #92	; 0x5c
    2090:	9300      	str	r3, [sp, #0]
    2092:	4628      	mov	r0, r5
    2094:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    2098:	f00c f8b2 	bl	e200 <__d2b>
    209c:	f3c9 540a 	ubfx	r4, r9, #20, #11
    20a0:	4683      	mov	fp, r0
    20a2:	2c00      	cmp	r4, #0
    20a4:	d07e      	beq.n	21a4 <_dtoa_r+0x1f4>
    20a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    20a8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    20ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
    20b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    20b4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    20b8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    20bc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    20c0:	4b73      	ldr	r3, [pc, #460]	; (2290 <_dtoa_r+0x2e0>)
    20c2:	2200      	movs	r2, #0
    20c4:	f7fe f870 	bl	1a8 <__aeabi_dsub>
    20c8:	a365      	add	r3, pc, #404	; (adr r3, 2260 <_dtoa_r+0x2b0>)
    20ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    20ce:	f7fe fa23 	bl	518 <__aeabi_dmul>
    20d2:	a365      	add	r3, pc, #404	; (adr r3, 2268 <_dtoa_r+0x2b8>)
    20d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    20d8:	f7fe f868 	bl	1ac <__adddf3>
    20dc:	4606      	mov	r6, r0
    20de:	4620      	mov	r0, r4
    20e0:	460f      	mov	r7, r1
    20e2:	f7fe f9af 	bl	444 <__aeabi_i2d>
    20e6:	a362      	add	r3, pc, #392	; (adr r3, 2270 <_dtoa_r+0x2c0>)
    20e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    20ec:	f7fe fa14 	bl	518 <__aeabi_dmul>
    20f0:	4602      	mov	r2, r0
    20f2:	460b      	mov	r3, r1
    20f4:	4630      	mov	r0, r6
    20f6:	4639      	mov	r1, r7
    20f8:	f7fe f858 	bl	1ac <__adddf3>
    20fc:	4606      	mov	r6, r0
    20fe:	460f      	mov	r7, r1
    2100:	f7fe fd24 	bl	b4c <__aeabi_d2iz>
    2104:	2200      	movs	r2, #0
    2106:	4682      	mov	sl, r0
    2108:	2300      	movs	r3, #0
    210a:	4630      	mov	r0, r6
    210c:	4639      	mov	r1, r7
    210e:	f7fe fcdf 	bl	ad0 <__aeabi_dcmplt>
    2112:	b148      	cbz	r0, 2128 <_dtoa_r+0x178>
    2114:	4650      	mov	r0, sl
    2116:	f7fe f995 	bl	444 <__aeabi_i2d>
    211a:	4632      	mov	r2, r6
    211c:	463b      	mov	r3, r7
    211e:	f7fe fccd 	bl	abc <__aeabi_dcmpeq>
    2122:	b908      	cbnz	r0, 2128 <_dtoa_r+0x178>
    2124:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2128:	f1ba 0f16 	cmp.w	sl, #22
    212c:	d857      	bhi.n	21de <_dtoa_r+0x22e>
    212e:	4b59      	ldr	r3, [pc, #356]	; (2294 <_dtoa_r+0x2e4>)
    2130:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    2134:	e9d3 2300 	ldrd	r2, r3, [r3]
    2138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    213c:	f7fe fcc8 	bl	ad0 <__aeabi_dcmplt>
    2140:	2800      	cmp	r0, #0
    2142:	d04e      	beq.n	21e2 <_dtoa_r+0x232>
    2144:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2148:	2300      	movs	r3, #0
    214a:	930f      	str	r3, [sp, #60]	; 0x3c
    214c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    214e:	1b1c      	subs	r4, r3, r4
    2150:	1e63      	subs	r3, r4, #1
    2152:	9309      	str	r3, [sp, #36]	; 0x24
    2154:	bf45      	ittet	mi
    2156:	f1c4 0301 	rsbmi	r3, r4, #1
    215a:	9306      	strmi	r3, [sp, #24]
    215c:	2300      	movpl	r3, #0
    215e:	2300      	movmi	r3, #0
    2160:	bf4c      	ite	mi
    2162:	9309      	strmi	r3, [sp, #36]	; 0x24
    2164:	9306      	strpl	r3, [sp, #24]
    2166:	f1ba 0f00 	cmp.w	sl, #0
    216a:	db3c      	blt.n	21e6 <_dtoa_r+0x236>
    216c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    216e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    2172:	4453      	add	r3, sl
    2174:	9309      	str	r3, [sp, #36]	; 0x24
    2176:	2300      	movs	r3, #0
    2178:	930a      	str	r3, [sp, #40]	; 0x28
    217a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    217c:	2b09      	cmp	r3, #9
    217e:	f200 808d 	bhi.w	229c <_dtoa_r+0x2ec>
    2182:	2b05      	cmp	r3, #5
    2184:	bfc4      	itt	gt
    2186:	3b04      	subgt	r3, #4
    2188:	9322      	strgt	r3, [sp, #136]	; 0x88
    218a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    218c:	f1a3 0302 	sub.w	r3, r3, #2
    2190:	bfcc      	ite	gt
    2192:	2400      	movgt	r4, #0
    2194:	2401      	movle	r4, #1
    2196:	2b03      	cmp	r3, #3
    2198:	f200 808c 	bhi.w	22b4 <_dtoa_r+0x304>
    219c:	e8df f003 	tbb	[pc, r3]
    21a0:	5b4d4f2d 	.word	0x5b4d4f2d
    21a4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    21a8:	441c      	add	r4, r3
    21aa:	f204 4332 	addw	r3, r4, #1074	; 0x432
    21ae:	2b20      	cmp	r3, #32
    21b0:	bfc3      	ittte	gt
    21b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    21b6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    21ba:	fa09 f303 	lslgt.w	r3, r9, r3
    21be:	f1c3 0320 	rsble	r3, r3, #32
    21c2:	bfc6      	itte	gt
    21c4:	fa26 f000 	lsrgt.w	r0, r6, r0
    21c8:	4318      	orrgt	r0, r3
    21ca:	fa06 f003 	lslle.w	r0, r6, r3
    21ce:	f7fe f929 	bl	424 <__aeabi_ui2d>
    21d2:	2301      	movs	r3, #1
    21d4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    21d8:	3c01      	subs	r4, #1
    21da:	9313      	str	r3, [sp, #76]	; 0x4c
    21dc:	e770      	b.n	20c0 <_dtoa_r+0x110>
    21de:	2301      	movs	r3, #1
    21e0:	e7b3      	b.n	214a <_dtoa_r+0x19a>
    21e2:	900f      	str	r0, [sp, #60]	; 0x3c
    21e4:	e7b2      	b.n	214c <_dtoa_r+0x19c>
    21e6:	9b06      	ldr	r3, [sp, #24]
    21e8:	eba3 030a 	sub.w	r3, r3, sl
    21ec:	9306      	str	r3, [sp, #24]
    21ee:	f1ca 0300 	rsb	r3, sl, #0
    21f2:	930a      	str	r3, [sp, #40]	; 0x28
    21f4:	2300      	movs	r3, #0
    21f6:	930e      	str	r3, [sp, #56]	; 0x38
    21f8:	e7bf      	b.n	217a <_dtoa_r+0x1ca>
    21fa:	2300      	movs	r3, #0
    21fc:	930b      	str	r3, [sp, #44]	; 0x2c
    21fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2200:	2b00      	cmp	r3, #0
    2202:	dc5a      	bgt.n	22ba <_dtoa_r+0x30a>
    2204:	f04f 0901 	mov.w	r9, #1
    2208:	f8cd 9020 	str.w	r9, [sp, #32]
    220c:	464b      	mov	r3, r9
    220e:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    2212:	6a68      	ldr	r0, [r5, #36]	; 0x24
    2214:	2200      	movs	r2, #0
    2216:	6042      	str	r2, [r0, #4]
    2218:	2204      	movs	r2, #4
    221a:	f102 0614 	add.w	r6, r2, #20
    221e:	429e      	cmp	r6, r3
    2220:	6841      	ldr	r1, [r0, #4]
    2222:	d950      	bls.n	22c6 <_dtoa_r+0x316>
    2224:	4628      	mov	r0, r5
    2226:	f00b fd33 	bl	dc90 <_Balloc>
    222a:	9003      	str	r0, [sp, #12]
    222c:	2800      	cmp	r0, #0
    222e:	d14e      	bne.n	22ce <_dtoa_r+0x31e>
    2230:	4b19      	ldr	r3, [pc, #100]	; (2298 <_dtoa_r+0x2e8>)
    2232:	4602      	mov	r2, r0
    2234:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    2238:	e6ce      	b.n	1fd8 <_dtoa_r+0x28>
    223a:	2301      	movs	r3, #1
    223c:	e7de      	b.n	21fc <_dtoa_r+0x24c>
    223e:	2300      	movs	r3, #0
    2240:	930b      	str	r3, [sp, #44]	; 0x2c
    2242:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2244:	eb0a 0903 	add.w	r9, sl, r3
    2248:	f109 0301 	add.w	r3, r9, #1
    224c:	2b01      	cmp	r3, #1
    224e:	9308      	str	r3, [sp, #32]
    2250:	bfb8      	it	lt
    2252:	2301      	movlt	r3, #1
    2254:	e7dd      	b.n	2212 <_dtoa_r+0x262>
    2256:	2301      	movs	r3, #1
    2258:	e7f2      	b.n	2240 <_dtoa_r+0x290>
    225a:	bf00      	nop
    225c:	f3af 8000 	nop.w
    2260:	636f4361 	.word	0x636f4361
    2264:	3fd287a7 	.word	0x3fd287a7
    2268:	8b60c8b3 	.word	0x8b60c8b3
    226c:	3fc68a28 	.word	0x3fc68a28
    2270:	509f79fb 	.word	0x509f79fb
    2274:	3fd34413 	.word	0x3fd34413
    2278:	000135a2 	.word	0x000135a2
    227c:	000136a5 	.word	0x000136a5
    2280:	7ff00000 	.word	0x7ff00000
    2284:	0001369f 	.word	0x0001369f
    2288:	00013696 	.word	0x00013696
    228c:	000136a4 	.word	0x000136a4
    2290:	3ff80000 	.word	0x3ff80000
    2294:	00011120 	.word	0x00011120
    2298:	00013616 	.word	0x00013616
    229c:	2401      	movs	r4, #1
    229e:	2300      	movs	r3, #0
    22a0:	9322      	str	r3, [sp, #136]	; 0x88
    22a2:	940b      	str	r4, [sp, #44]	; 0x2c
    22a4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    22a8:	2200      	movs	r2, #0
    22aa:	f8cd 9020 	str.w	r9, [sp, #32]
    22ae:	2312      	movs	r3, #18
    22b0:	9223      	str	r2, [sp, #140]	; 0x8c
    22b2:	e7ae      	b.n	2212 <_dtoa_r+0x262>
    22b4:	2301      	movs	r3, #1
    22b6:	930b      	str	r3, [sp, #44]	; 0x2c
    22b8:	e7f4      	b.n	22a4 <_dtoa_r+0x2f4>
    22ba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    22be:	f8cd 9020 	str.w	r9, [sp, #32]
    22c2:	464b      	mov	r3, r9
    22c4:	e7a5      	b.n	2212 <_dtoa_r+0x262>
    22c6:	3101      	adds	r1, #1
    22c8:	6041      	str	r1, [r0, #4]
    22ca:	0052      	lsls	r2, r2, #1
    22cc:	e7a5      	b.n	221a <_dtoa_r+0x26a>
    22ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    22d0:	9a03      	ldr	r2, [sp, #12]
    22d2:	601a      	str	r2, [r3, #0]
    22d4:	9b08      	ldr	r3, [sp, #32]
    22d6:	2b0e      	cmp	r3, #14
    22d8:	f200 80a8 	bhi.w	242c <_dtoa_r+0x47c>
    22dc:	2c00      	cmp	r4, #0
    22de:	f000 80a5 	beq.w	242c <_dtoa_r+0x47c>
    22e2:	f1ba 0f00 	cmp.w	sl, #0
    22e6:	dd34      	ble.n	2352 <_dtoa_r+0x3a2>
    22e8:	4a9a      	ldr	r2, [pc, #616]	; (2554 <_dtoa_r+0x5a4>)
    22ea:	f00a 030f 	and.w	r3, sl, #15
    22ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    22f2:	e9d3 3400 	ldrd	r3, r4, [r3]
    22f6:	f41a 7f80 	tst.w	sl, #256	; 0x100
    22fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    22fe:	ea4f 142a 	mov.w	r4, sl, asr #4
    2302:	d016      	beq.n	2332 <_dtoa_r+0x382>
    2304:	4b94      	ldr	r3, [pc, #592]	; (2558 <_dtoa_r+0x5a8>)
    2306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    230a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    230e:	f7fe fa2d 	bl	76c <__aeabi_ddiv>
    2312:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2316:	f004 040f 	and.w	r4, r4, #15
    231a:	2703      	movs	r7, #3
    231c:	4e8e      	ldr	r6, [pc, #568]	; (2558 <_dtoa_r+0x5a8>)
    231e:	b954      	cbnz	r4, 2336 <_dtoa_r+0x386>
    2320:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2328:	f7fe fa20 	bl	76c <__aeabi_ddiv>
    232c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2330:	e029      	b.n	2386 <_dtoa_r+0x3d6>
    2332:	2702      	movs	r7, #2
    2334:	e7f2      	b.n	231c <_dtoa_r+0x36c>
    2336:	07e1      	lsls	r1, r4, #31
    2338:	d508      	bpl.n	234c <_dtoa_r+0x39c>
    233a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    233e:	e9d6 2300 	ldrd	r2, r3, [r6]
    2342:	f7fe f8e9 	bl	518 <__aeabi_dmul>
    2346:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    234a:	3701      	adds	r7, #1
    234c:	1064      	asrs	r4, r4, #1
    234e:	3608      	adds	r6, #8
    2350:	e7e5      	b.n	231e <_dtoa_r+0x36e>
    2352:	f000 80a5 	beq.w	24a0 <_dtoa_r+0x4f0>
    2356:	f1ca 0400 	rsb	r4, sl, #0
    235a:	4b7e      	ldr	r3, [pc, #504]	; (2554 <_dtoa_r+0x5a4>)
    235c:	4e7e      	ldr	r6, [pc, #504]	; (2558 <_dtoa_r+0x5a8>)
    235e:	f004 020f 	and.w	r2, r4, #15
    2362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2366:	e9d3 2300 	ldrd	r2, r3, [r3]
    236a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    236e:	f7fe f8d3 	bl	518 <__aeabi_dmul>
    2372:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2376:	1124      	asrs	r4, r4, #4
    2378:	2300      	movs	r3, #0
    237a:	2702      	movs	r7, #2
    237c:	2c00      	cmp	r4, #0
    237e:	f040 8084 	bne.w	248a <_dtoa_r+0x4da>
    2382:	2b00      	cmp	r3, #0
    2384:	d1d2      	bne.n	232c <_dtoa_r+0x37c>
    2386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2388:	2b00      	cmp	r3, #0
    238a:	f000 808b 	beq.w	24a4 <_dtoa_r+0x4f4>
    238e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    2392:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    2396:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    239a:	4b70      	ldr	r3, [pc, #448]	; (255c <_dtoa_r+0x5ac>)
    239c:	2200      	movs	r2, #0
    239e:	f7fe fb97 	bl	ad0 <__aeabi_dcmplt>
    23a2:	2800      	cmp	r0, #0
    23a4:	d07e      	beq.n	24a4 <_dtoa_r+0x4f4>
    23a6:	9b08      	ldr	r3, [sp, #32]
    23a8:	2b00      	cmp	r3, #0
    23aa:	d07b      	beq.n	24a4 <_dtoa_r+0x4f4>
    23ac:	f1b9 0f00 	cmp.w	r9, #0
    23b0:	dd38      	ble.n	2424 <_dtoa_r+0x474>
    23b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    23b6:	4b6a      	ldr	r3, [pc, #424]	; (2560 <_dtoa_r+0x5b0>)
    23b8:	2200      	movs	r2, #0
    23ba:	f7fe f8ad 	bl	518 <__aeabi_dmul>
    23be:	e9cd 0104 	strd	r0, r1, [sp, #16]
    23c2:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
    23c6:	3701      	adds	r7, #1
    23c8:	464c      	mov	r4, r9
    23ca:	4638      	mov	r0, r7
    23cc:	f7fe f83a 	bl	444 <__aeabi_i2d>
    23d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    23d4:	f7fe f8a0 	bl	518 <__aeabi_dmul>
    23d8:	4b62      	ldr	r3, [pc, #392]	; (2564 <_dtoa_r+0x5b4>)
    23da:	2200      	movs	r2, #0
    23dc:	f7fd fee6 	bl	1ac <__adddf3>
    23e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    23e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    23e8:	9611      	str	r6, [sp, #68]	; 0x44
    23ea:	2c00      	cmp	r4, #0
    23ec:	d15d      	bne.n	24aa <_dtoa_r+0x4fa>
    23ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    23f2:	4b5d      	ldr	r3, [pc, #372]	; (2568 <_dtoa_r+0x5b8>)
    23f4:	2200      	movs	r2, #0
    23f6:	f7fd fed7 	bl	1a8 <__aeabi_dsub>
    23fa:	4602      	mov	r2, r0
    23fc:	460b      	mov	r3, r1
    23fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2402:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2404:	4633      	mov	r3, r6
    2406:	f7fe fb81 	bl	b0c <__aeabi_dcmpgt>
    240a:	2800      	cmp	r0, #0
    240c:	f040 829c 	bne.w	2948 <_dtoa_r+0x998>
    2410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2414:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2416:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    241a:	f7fe fb59 	bl	ad0 <__aeabi_dcmplt>
    241e:	2800      	cmp	r0, #0
    2420:	f040 8290 	bne.w	2944 <_dtoa_r+0x994>
    2424:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    2428:	e9cd 3404 	strd	r3, r4, [sp, #16]
    242c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    242e:	2b00      	cmp	r3, #0
    2430:	f2c0 8152 	blt.w	26d8 <_dtoa_r+0x728>
    2434:	f1ba 0f0e 	cmp.w	sl, #14
    2438:	f300 814e 	bgt.w	26d8 <_dtoa_r+0x728>
    243c:	4b45      	ldr	r3, [pc, #276]	; (2554 <_dtoa_r+0x5a4>)
    243e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    2442:	e9d3 3400 	ldrd	r3, r4, [r3]
    2446:	e9cd 3406 	strd	r3, r4, [sp, #24]
    244a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    244c:	2b00      	cmp	r3, #0
    244e:	f280 80db 	bge.w	2608 <_dtoa_r+0x658>
    2452:	9b08      	ldr	r3, [sp, #32]
    2454:	2b00      	cmp	r3, #0
    2456:	f300 80d7 	bgt.w	2608 <_dtoa_r+0x658>
    245a:	f040 8272 	bne.w	2942 <_dtoa_r+0x992>
    245e:	4b42      	ldr	r3, [pc, #264]	; (2568 <_dtoa_r+0x5b8>)
    2460:	2200      	movs	r2, #0
    2462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    2466:	f7fe f857 	bl	518 <__aeabi_dmul>
    246a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    246e:	f7fe fb43 	bl	af8 <__aeabi_dcmpge>
    2472:	9c08      	ldr	r4, [sp, #32]
    2474:	4626      	mov	r6, r4
    2476:	2800      	cmp	r0, #0
    2478:	f040 8248 	bne.w	290c <_dtoa_r+0x95c>
    247c:	9f03      	ldr	r7, [sp, #12]
    247e:	2331      	movs	r3, #49	; 0x31
    2480:	f807 3b01 	strb.w	r3, [r7], #1
    2484:	f10a 0a01 	add.w	sl, sl, #1
    2488:	e244      	b.n	2914 <_dtoa_r+0x964>
    248a:	07e2      	lsls	r2, r4, #31
    248c:	d505      	bpl.n	249a <_dtoa_r+0x4ea>
    248e:	e9d6 2300 	ldrd	r2, r3, [r6]
    2492:	f7fe f841 	bl	518 <__aeabi_dmul>
    2496:	3701      	adds	r7, #1
    2498:	2301      	movs	r3, #1
    249a:	1064      	asrs	r4, r4, #1
    249c:	3608      	adds	r6, #8
    249e:	e76d      	b.n	237c <_dtoa_r+0x3cc>
    24a0:	2702      	movs	r7, #2
    24a2:	e770      	b.n	2386 <_dtoa_r+0x3d6>
    24a4:	9c08      	ldr	r4, [sp, #32]
    24a6:	46d0      	mov	r8, sl
    24a8:	e78f      	b.n	23ca <_dtoa_r+0x41a>
    24aa:	9903      	ldr	r1, [sp, #12]
    24ac:	4b29      	ldr	r3, [pc, #164]	; (2554 <_dtoa_r+0x5a4>)
    24ae:	4421      	add	r1, r4
    24b0:	9112      	str	r1, [sp, #72]	; 0x48
    24b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    24b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    24b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    24bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    24c0:	2900      	cmp	r1, #0
    24c2:	d055      	beq.n	2570 <_dtoa_r+0x5c0>
    24c4:	4929      	ldr	r1, [pc, #164]	; (256c <_dtoa_r+0x5bc>)
    24c6:	2000      	movs	r0, #0
    24c8:	f7fe f950 	bl	76c <__aeabi_ddiv>
    24cc:	463b      	mov	r3, r7
    24ce:	4632      	mov	r2, r6
    24d0:	f7fd fe6a 	bl	1a8 <__aeabi_dsub>
    24d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    24d8:	9f03      	ldr	r7, [sp, #12]
    24da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    24de:	f7fe fb35 	bl	b4c <__aeabi_d2iz>
    24e2:	4604      	mov	r4, r0
    24e4:	f7fd ffae 	bl	444 <__aeabi_i2d>
    24e8:	4602      	mov	r2, r0
    24ea:	460b      	mov	r3, r1
    24ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    24f0:	f7fd fe5a 	bl	1a8 <__aeabi_dsub>
    24f4:	3430      	adds	r4, #48	; 0x30
    24f6:	4602      	mov	r2, r0
    24f8:	460b      	mov	r3, r1
    24fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    24fe:	f807 4b01 	strb.w	r4, [r7], #1
    2502:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2506:	f7fe fae3 	bl	ad0 <__aeabi_dcmplt>
    250a:	2800      	cmp	r0, #0
    250c:	d174      	bne.n	25f8 <_dtoa_r+0x648>
    250e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    2512:	4912      	ldr	r1, [pc, #72]	; (255c <_dtoa_r+0x5ac>)
    2514:	2000      	movs	r0, #0
    2516:	f7fd fe47 	bl	1a8 <__aeabi_dsub>
    251a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    251e:	f7fe fad7 	bl	ad0 <__aeabi_dcmplt>
    2522:	2800      	cmp	r0, #0
    2524:	f040 80b7 	bne.w	2696 <_dtoa_r+0x6e6>
    2528:	9b12      	ldr	r3, [sp, #72]	; 0x48
    252a:	429f      	cmp	r7, r3
    252c:	f43f af7a 	beq.w	2424 <_dtoa_r+0x474>
    2530:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2534:	4b0a      	ldr	r3, [pc, #40]	; (2560 <_dtoa_r+0x5b0>)
    2536:	2200      	movs	r2, #0
    2538:	f7fd ffee 	bl	518 <__aeabi_dmul>
    253c:	4b08      	ldr	r3, [pc, #32]	; (2560 <_dtoa_r+0x5b0>)
    253e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    2542:	2200      	movs	r2, #0
    2544:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2548:	f7fd ffe6 	bl	518 <__aeabi_dmul>
    254c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2550:	e7c3      	b.n	24da <_dtoa_r+0x52a>
    2552:	bf00      	nop
    2554:	00011120 	.word	0x00011120
    2558:	000110f8 	.word	0x000110f8
    255c:	3ff00000 	.word	0x3ff00000
    2560:	40240000 	.word	0x40240000
    2564:	401c0000 	.word	0x401c0000
    2568:	40140000 	.word	0x40140000
    256c:	3fe00000 	.word	0x3fe00000
    2570:	4630      	mov	r0, r6
    2572:	4639      	mov	r1, r7
    2574:	f7fd ffd0 	bl	518 <__aeabi_dmul>
    2578:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    257c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    257e:	9c03      	ldr	r4, [sp, #12]
    2580:	9314      	str	r3, [sp, #80]	; 0x50
    2582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2586:	f7fe fae1 	bl	b4c <__aeabi_d2iz>
    258a:	9015      	str	r0, [sp, #84]	; 0x54
    258c:	f7fd ff5a 	bl	444 <__aeabi_i2d>
    2590:	4602      	mov	r2, r0
    2592:	460b      	mov	r3, r1
    2594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2598:	f7fd fe06 	bl	1a8 <__aeabi_dsub>
    259c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    259e:	3330      	adds	r3, #48	; 0x30
    25a0:	f804 3b01 	strb.w	r3, [r4], #1
    25a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    25a6:	429c      	cmp	r4, r3
    25a8:	4606      	mov	r6, r0
    25aa:	460f      	mov	r7, r1
    25ac:	f04f 0200 	mov.w	r2, #0
    25b0:	d124      	bne.n	25fc <_dtoa_r+0x64c>
    25b2:	4ba4      	ldr	r3, [pc, #656]	; (2844 <_dtoa_r+0x894>)
    25b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    25b8:	f7fd fdf8 	bl	1ac <__adddf3>
    25bc:	4602      	mov	r2, r0
    25be:	460b      	mov	r3, r1
    25c0:	4630      	mov	r0, r6
    25c2:	4639      	mov	r1, r7
    25c4:	f7fe faa2 	bl	b0c <__aeabi_dcmpgt>
    25c8:	2800      	cmp	r0, #0
    25ca:	d163      	bne.n	2694 <_dtoa_r+0x6e4>
    25cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    25d0:	499c      	ldr	r1, [pc, #624]	; (2844 <_dtoa_r+0x894>)
    25d2:	2000      	movs	r0, #0
    25d4:	f7fd fde8 	bl	1a8 <__aeabi_dsub>
    25d8:	4602      	mov	r2, r0
    25da:	460b      	mov	r3, r1
    25dc:	4630      	mov	r0, r6
    25de:	4639      	mov	r1, r7
    25e0:	f7fe fa76 	bl	ad0 <__aeabi_dcmplt>
    25e4:	2800      	cmp	r0, #0
    25e6:	f43f af1d 	beq.w	2424 <_dtoa_r+0x474>
    25ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
    25ec:	1e7b      	subs	r3, r7, #1
    25ee:	9314      	str	r3, [sp, #80]	; 0x50
    25f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    25f4:	2b30      	cmp	r3, #48	; 0x30
    25f6:	d0f8      	beq.n	25ea <_dtoa_r+0x63a>
    25f8:	46c2      	mov	sl, r8
    25fa:	e03b      	b.n	2674 <_dtoa_r+0x6c4>
    25fc:	4b92      	ldr	r3, [pc, #584]	; (2848 <_dtoa_r+0x898>)
    25fe:	f7fd ff8b 	bl	518 <__aeabi_dmul>
    2602:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2606:	e7bc      	b.n	2582 <_dtoa_r+0x5d2>
    2608:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    260c:	9f03      	ldr	r7, [sp, #12]
    260e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2612:	4640      	mov	r0, r8
    2614:	4649      	mov	r1, r9
    2616:	f7fe f8a9 	bl	76c <__aeabi_ddiv>
    261a:	f7fe fa97 	bl	b4c <__aeabi_d2iz>
    261e:	4604      	mov	r4, r0
    2620:	f7fd ff10 	bl	444 <__aeabi_i2d>
    2624:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2628:	f7fd ff76 	bl	518 <__aeabi_dmul>
    262c:	f104 0630 	add.w	r6, r4, #48	; 0x30
    2630:	4602      	mov	r2, r0
    2632:	460b      	mov	r3, r1
    2634:	4640      	mov	r0, r8
    2636:	4649      	mov	r1, r9
    2638:	f7fd fdb6 	bl	1a8 <__aeabi_dsub>
    263c:	f807 6b01 	strb.w	r6, [r7], #1
    2640:	9e03      	ldr	r6, [sp, #12]
    2642:	f8dd c020 	ldr.w	ip, [sp, #32]
    2646:	1bbe      	subs	r6, r7, r6
    2648:	45b4      	cmp	ip, r6
    264a:	4602      	mov	r2, r0
    264c:	460b      	mov	r3, r1
    264e:	d136      	bne.n	26be <_dtoa_r+0x70e>
    2650:	f7fd fdac 	bl	1ac <__adddf3>
    2654:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2658:	4680      	mov	r8, r0
    265a:	4689      	mov	r9, r1
    265c:	f7fe fa56 	bl	b0c <__aeabi_dcmpgt>
    2660:	bb58      	cbnz	r0, 26ba <_dtoa_r+0x70a>
    2662:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2666:	4640      	mov	r0, r8
    2668:	4649      	mov	r1, r9
    266a:	f7fe fa27 	bl	abc <__aeabi_dcmpeq>
    266e:	b108      	cbz	r0, 2674 <_dtoa_r+0x6c4>
    2670:	07e1      	lsls	r1, r4, #31
    2672:	d422      	bmi.n	26ba <_dtoa_r+0x70a>
    2674:	4628      	mov	r0, r5
    2676:	4659      	mov	r1, fp
    2678:	f00b fb4a 	bl	dd10 <_Bfree>
    267c:	2300      	movs	r3, #0
    267e:	703b      	strb	r3, [r7, #0]
    2680:	9b24      	ldr	r3, [sp, #144]	; 0x90
    2682:	f10a 0001 	add.w	r0, sl, #1
    2686:	6018      	str	r0, [r3, #0]
    2688:	9b26      	ldr	r3, [sp, #152]	; 0x98
    268a:	2b00      	cmp	r3, #0
    268c:	f43f acdd 	beq.w	204a <_dtoa_r+0x9a>
    2690:	601f      	str	r7, [r3, #0]
    2692:	e4da      	b.n	204a <_dtoa_r+0x9a>
    2694:	4627      	mov	r7, r4
    2696:	463b      	mov	r3, r7
    2698:	461f      	mov	r7, r3
    269a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    269e:	2a39      	cmp	r2, #57	; 0x39
    26a0:	d107      	bne.n	26b2 <_dtoa_r+0x702>
    26a2:	9a03      	ldr	r2, [sp, #12]
    26a4:	429a      	cmp	r2, r3
    26a6:	d1f7      	bne.n	2698 <_dtoa_r+0x6e8>
    26a8:	9903      	ldr	r1, [sp, #12]
    26aa:	2230      	movs	r2, #48	; 0x30
    26ac:	f108 0801 	add.w	r8, r8, #1
    26b0:	700a      	strb	r2, [r1, #0]
    26b2:	781a      	ldrb	r2, [r3, #0]
    26b4:	3201      	adds	r2, #1
    26b6:	701a      	strb	r2, [r3, #0]
    26b8:	e79e      	b.n	25f8 <_dtoa_r+0x648>
    26ba:	46d0      	mov	r8, sl
    26bc:	e7eb      	b.n	2696 <_dtoa_r+0x6e6>
    26be:	4b62      	ldr	r3, [pc, #392]	; (2848 <_dtoa_r+0x898>)
    26c0:	2200      	movs	r2, #0
    26c2:	f7fd ff29 	bl	518 <__aeabi_dmul>
    26c6:	2200      	movs	r2, #0
    26c8:	2300      	movs	r3, #0
    26ca:	4680      	mov	r8, r0
    26cc:	4689      	mov	r9, r1
    26ce:	f7fe f9f5 	bl	abc <__aeabi_dcmpeq>
    26d2:	2800      	cmp	r0, #0
    26d4:	d09b      	beq.n	260e <_dtoa_r+0x65e>
    26d6:	e7cd      	b.n	2674 <_dtoa_r+0x6c4>
    26d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    26da:	2a00      	cmp	r2, #0
    26dc:	f000 80d0 	beq.w	2880 <_dtoa_r+0x8d0>
    26e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    26e2:	2a01      	cmp	r2, #1
    26e4:	f300 80b2 	bgt.w	284c <_dtoa_r+0x89c>
    26e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    26ea:	2a00      	cmp	r2, #0
    26ec:	f000 80a6 	beq.w	283c <_dtoa_r+0x88c>
    26f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
    26f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    26f6:	9f06      	ldr	r7, [sp, #24]
    26f8:	9a06      	ldr	r2, [sp, #24]
    26fa:	441a      	add	r2, r3
    26fc:	9206      	str	r2, [sp, #24]
    26fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2700:	2101      	movs	r1, #1
    2702:	441a      	add	r2, r3
    2704:	4628      	mov	r0, r5
    2706:	9209      	str	r2, [sp, #36]	; 0x24
    2708:	f00b fb6a 	bl	dde0 <__i2b>
    270c:	4606      	mov	r6, r0
    270e:	2f00      	cmp	r7, #0
    2710:	dd0c      	ble.n	272c <_dtoa_r+0x77c>
    2712:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2714:	2b00      	cmp	r3, #0
    2716:	dd09      	ble.n	272c <_dtoa_r+0x77c>
    2718:	42bb      	cmp	r3, r7
    271a:	9a06      	ldr	r2, [sp, #24]
    271c:	bfa8      	it	ge
    271e:	463b      	movge	r3, r7
    2720:	1ad2      	subs	r2, r2, r3
    2722:	9206      	str	r2, [sp, #24]
    2724:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2726:	1aff      	subs	r7, r7, r3
    2728:	1ad3      	subs	r3, r2, r3
    272a:	9309      	str	r3, [sp, #36]	; 0x24
    272c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    272e:	b1f3      	cbz	r3, 276e <_dtoa_r+0x7be>
    2730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2732:	2b00      	cmp	r3, #0
    2734:	f000 80a8 	beq.w	2888 <_dtoa_r+0x8d8>
    2738:	2c00      	cmp	r4, #0
    273a:	dd10      	ble.n	275e <_dtoa_r+0x7ae>
    273c:	4631      	mov	r1, r6
    273e:	4622      	mov	r2, r4
    2740:	4628      	mov	r0, r5
    2742:	f00b fc0b 	bl	df5c <__pow5mult>
    2746:	465a      	mov	r2, fp
    2748:	4601      	mov	r1, r0
    274a:	4606      	mov	r6, r0
    274c:	4628      	mov	r0, r5
    274e:	f00b fb5d 	bl	de0c <__multiply>
    2752:	4659      	mov	r1, fp
    2754:	4680      	mov	r8, r0
    2756:	4628      	mov	r0, r5
    2758:	f00b fada 	bl	dd10 <_Bfree>
    275c:	46c3      	mov	fp, r8
    275e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2760:	1b1a      	subs	r2, r3, r4
    2762:	d004      	beq.n	276e <_dtoa_r+0x7be>
    2764:	4659      	mov	r1, fp
    2766:	4628      	mov	r0, r5
    2768:	f00b fbf8 	bl	df5c <__pow5mult>
    276c:	4683      	mov	fp, r0
    276e:	2101      	movs	r1, #1
    2770:	4628      	mov	r0, r5
    2772:	f00b fb35 	bl	dde0 <__i2b>
    2776:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2778:	2b00      	cmp	r3, #0
    277a:	4604      	mov	r4, r0
    277c:	f340 8086 	ble.w	288c <_dtoa_r+0x8dc>
    2780:	461a      	mov	r2, r3
    2782:	4601      	mov	r1, r0
    2784:	4628      	mov	r0, r5
    2786:	f00b fbe9 	bl	df5c <__pow5mult>
    278a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    278c:	2b01      	cmp	r3, #1
    278e:	4604      	mov	r4, r0
    2790:	dd7f      	ble.n	2892 <_dtoa_r+0x8e2>
    2792:	f04f 0800 	mov.w	r8, #0
    2796:	6923      	ldr	r3, [r4, #16]
    2798:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    279c:	6918      	ldr	r0, [r3, #16]
    279e:	f00e f8fe 	bl	1099e <__hi0bits>
    27a2:	f1c0 0020 	rsb	r0, r0, #32
    27a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27a8:	4418      	add	r0, r3
    27aa:	f010 001f 	ands.w	r0, r0, #31
    27ae:	f000 8092 	beq.w	28d6 <_dtoa_r+0x926>
    27b2:	f1c0 0320 	rsb	r3, r0, #32
    27b6:	2b04      	cmp	r3, #4
    27b8:	f340 808a 	ble.w	28d0 <_dtoa_r+0x920>
    27bc:	f1c0 001c 	rsb	r0, r0, #28
    27c0:	9b06      	ldr	r3, [sp, #24]
    27c2:	4403      	add	r3, r0
    27c4:	9306      	str	r3, [sp, #24]
    27c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27c8:	4403      	add	r3, r0
    27ca:	4407      	add	r7, r0
    27cc:	9309      	str	r3, [sp, #36]	; 0x24
    27ce:	9b06      	ldr	r3, [sp, #24]
    27d0:	2b00      	cmp	r3, #0
    27d2:	dd05      	ble.n	27e0 <_dtoa_r+0x830>
    27d4:	4659      	mov	r1, fp
    27d6:	461a      	mov	r2, r3
    27d8:	4628      	mov	r0, r5
    27da:	f00b fc19 	bl	e010 <__lshift>
    27de:	4683      	mov	fp, r0
    27e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27e2:	2b00      	cmp	r3, #0
    27e4:	dd05      	ble.n	27f2 <_dtoa_r+0x842>
    27e6:	4621      	mov	r1, r4
    27e8:	461a      	mov	r2, r3
    27ea:	4628      	mov	r0, r5
    27ec:	f00b fc10 	bl	e010 <__lshift>
    27f0:	4604      	mov	r4, r0
    27f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    27f4:	2b00      	cmp	r3, #0
    27f6:	d070      	beq.n	28da <_dtoa_r+0x92a>
    27f8:	4621      	mov	r1, r4
    27fa:	4658      	mov	r0, fp
    27fc:	f00e f91c 	bl	10a38 <__mcmp>
    2800:	2800      	cmp	r0, #0
    2802:	da6a      	bge.n	28da <_dtoa_r+0x92a>
    2804:	2300      	movs	r3, #0
    2806:	4659      	mov	r1, fp
    2808:	220a      	movs	r2, #10
    280a:	4628      	mov	r0, r5
    280c:	f00b faa2 	bl	dd54 <__multadd>
    2810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2812:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2816:	4683      	mov	fp, r0
    2818:	2b00      	cmp	r3, #0
    281a:	f000 8194 	beq.w	2b46 <_dtoa_r+0xb96>
    281e:	4631      	mov	r1, r6
    2820:	2300      	movs	r3, #0
    2822:	220a      	movs	r2, #10
    2824:	4628      	mov	r0, r5
    2826:	f00b fa95 	bl	dd54 <__multadd>
    282a:	f1b9 0f00 	cmp.w	r9, #0
    282e:	4606      	mov	r6, r0
    2830:	f300 8093 	bgt.w	295a <_dtoa_r+0x9aa>
    2834:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2836:	2b02      	cmp	r3, #2
    2838:	dc57      	bgt.n	28ea <_dtoa_r+0x93a>
    283a:	e08e      	b.n	295a <_dtoa_r+0x9aa>
    283c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    283e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    2842:	e757      	b.n	26f4 <_dtoa_r+0x744>
    2844:	3fe00000 	.word	0x3fe00000
    2848:	40240000 	.word	0x40240000
    284c:	9b08      	ldr	r3, [sp, #32]
    284e:	1e5c      	subs	r4, r3, #1
    2850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2852:	42a3      	cmp	r3, r4
    2854:	bfbf      	itttt	lt
    2856:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    2858:	940a      	strlt	r4, [sp, #40]	; 0x28
    285a:	1ae2      	sublt	r2, r4, r3
    285c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    285e:	bfb6      	itet	lt
    2860:	189b      	addlt	r3, r3, r2
    2862:	1b1c      	subge	r4, r3, r4
    2864:	930e      	strlt	r3, [sp, #56]	; 0x38
    2866:	9b08      	ldr	r3, [sp, #32]
    2868:	bfb8      	it	lt
    286a:	2400      	movlt	r4, #0
    286c:	2b00      	cmp	r3, #0
    286e:	bfb9      	ittee	lt
    2870:	9b06      	ldrlt	r3, [sp, #24]
    2872:	9a08      	ldrlt	r2, [sp, #32]
    2874:	9f06      	ldrge	r7, [sp, #24]
    2876:	9b08      	ldrge	r3, [sp, #32]
    2878:	bfbc      	itt	lt
    287a:	1a9f      	sublt	r7, r3, r2
    287c:	2300      	movlt	r3, #0
    287e:	e73b      	b.n	26f8 <_dtoa_r+0x748>
    2880:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2882:	9f06      	ldr	r7, [sp, #24]
    2884:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    2886:	e742      	b.n	270e <_dtoa_r+0x75e>
    2888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    288a:	e76b      	b.n	2764 <_dtoa_r+0x7b4>
    288c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    288e:	2b01      	cmp	r3, #1
    2890:	dc19      	bgt.n	28c6 <_dtoa_r+0x916>
    2892:	9b04      	ldr	r3, [sp, #16]
    2894:	b9bb      	cbnz	r3, 28c6 <_dtoa_r+0x916>
    2896:	9b05      	ldr	r3, [sp, #20]
    2898:	f3c3 0313 	ubfx	r3, r3, #0, #20
    289c:	b99b      	cbnz	r3, 28c6 <_dtoa_r+0x916>
    289e:	9b05      	ldr	r3, [sp, #20]
    28a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    28a4:	0d1b      	lsrs	r3, r3, #20
    28a6:	051b      	lsls	r3, r3, #20
    28a8:	b183      	cbz	r3, 28cc <_dtoa_r+0x91c>
    28aa:	9b06      	ldr	r3, [sp, #24]
    28ac:	3301      	adds	r3, #1
    28ae:	9306      	str	r3, [sp, #24]
    28b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    28b2:	3301      	adds	r3, #1
    28b4:	9309      	str	r3, [sp, #36]	; 0x24
    28b6:	f04f 0801 	mov.w	r8, #1
    28ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    28bc:	2b00      	cmp	r3, #0
    28be:	f47f af6a 	bne.w	2796 <_dtoa_r+0x7e6>
    28c2:	2001      	movs	r0, #1
    28c4:	e76f      	b.n	27a6 <_dtoa_r+0x7f6>
    28c6:	f04f 0800 	mov.w	r8, #0
    28ca:	e7f6      	b.n	28ba <_dtoa_r+0x90a>
    28cc:	4698      	mov	r8, r3
    28ce:	e7f4      	b.n	28ba <_dtoa_r+0x90a>
    28d0:	f43f af7d 	beq.w	27ce <_dtoa_r+0x81e>
    28d4:	4618      	mov	r0, r3
    28d6:	301c      	adds	r0, #28
    28d8:	e772      	b.n	27c0 <_dtoa_r+0x810>
    28da:	9b08      	ldr	r3, [sp, #32]
    28dc:	2b00      	cmp	r3, #0
    28de:	dc36      	bgt.n	294e <_dtoa_r+0x99e>
    28e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    28e2:	2b02      	cmp	r3, #2
    28e4:	dd33      	ble.n	294e <_dtoa_r+0x99e>
    28e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
    28ea:	f1b9 0f00 	cmp.w	r9, #0
    28ee:	d10d      	bne.n	290c <_dtoa_r+0x95c>
    28f0:	4621      	mov	r1, r4
    28f2:	464b      	mov	r3, r9
    28f4:	2205      	movs	r2, #5
    28f6:	4628      	mov	r0, r5
    28f8:	f00b fa2c 	bl	dd54 <__multadd>
    28fc:	4601      	mov	r1, r0
    28fe:	4604      	mov	r4, r0
    2900:	4658      	mov	r0, fp
    2902:	f00e f899 	bl	10a38 <__mcmp>
    2906:	2800      	cmp	r0, #0
    2908:	f73f adb8 	bgt.w	247c <_dtoa_r+0x4cc>
    290c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    290e:	9f03      	ldr	r7, [sp, #12]
    2910:	ea6f 0a03 	mvn.w	sl, r3
    2914:	f04f 0800 	mov.w	r8, #0
    2918:	4621      	mov	r1, r4
    291a:	4628      	mov	r0, r5
    291c:	f00b f9f8 	bl	dd10 <_Bfree>
    2920:	2e00      	cmp	r6, #0
    2922:	f43f aea7 	beq.w	2674 <_dtoa_r+0x6c4>
    2926:	f1b8 0f00 	cmp.w	r8, #0
    292a:	d005      	beq.n	2938 <_dtoa_r+0x988>
    292c:	45b0      	cmp	r8, r6
    292e:	d003      	beq.n	2938 <_dtoa_r+0x988>
    2930:	4641      	mov	r1, r8
    2932:	4628      	mov	r0, r5
    2934:	f00b f9ec 	bl	dd10 <_Bfree>
    2938:	4631      	mov	r1, r6
    293a:	4628      	mov	r0, r5
    293c:	f00b f9e8 	bl	dd10 <_Bfree>
    2940:	e698      	b.n	2674 <_dtoa_r+0x6c4>
    2942:	2400      	movs	r4, #0
    2944:	4626      	mov	r6, r4
    2946:	e7e1      	b.n	290c <_dtoa_r+0x95c>
    2948:	46c2      	mov	sl, r8
    294a:	4626      	mov	r6, r4
    294c:	e596      	b.n	247c <_dtoa_r+0x4cc>
    294e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2950:	f8dd 9020 	ldr.w	r9, [sp, #32]
    2954:	2b00      	cmp	r3, #0
    2956:	f000 80fd 	beq.w	2b54 <_dtoa_r+0xba4>
    295a:	2f00      	cmp	r7, #0
    295c:	dd05      	ble.n	296a <_dtoa_r+0x9ba>
    295e:	4631      	mov	r1, r6
    2960:	463a      	mov	r2, r7
    2962:	4628      	mov	r0, r5
    2964:	f00b fb54 	bl	e010 <__lshift>
    2968:	4606      	mov	r6, r0
    296a:	f1b8 0f00 	cmp.w	r8, #0
    296e:	d05c      	beq.n	2a2a <_dtoa_r+0xa7a>
    2970:	6871      	ldr	r1, [r6, #4]
    2972:	4628      	mov	r0, r5
    2974:	f00b f98c 	bl	dc90 <_Balloc>
    2978:	4607      	mov	r7, r0
    297a:	b928      	cbnz	r0, 2988 <_dtoa_r+0x9d8>
    297c:	4b80      	ldr	r3, [pc, #512]	; (2b80 <_dtoa_r+0xbd0>)
    297e:	4602      	mov	r2, r0
    2980:	f240 21ea 	movw	r1, #746	; 0x2ea
    2984:	f7ff bb28 	b.w	1fd8 <_dtoa_r+0x28>
    2988:	6932      	ldr	r2, [r6, #16]
    298a:	3202      	adds	r2, #2
    298c:	0092      	lsls	r2, r2, #2
    298e:	f106 010c 	add.w	r1, r6, #12
    2992:	300c      	adds	r0, #12
    2994:	f00d ff05 	bl	107a2 <memcpy>
    2998:	2201      	movs	r2, #1
    299a:	4639      	mov	r1, r7
    299c:	4628      	mov	r0, r5
    299e:	f00b fb37 	bl	e010 <__lshift>
    29a2:	9b03      	ldr	r3, [sp, #12]
    29a4:	3301      	adds	r3, #1
    29a6:	9308      	str	r3, [sp, #32]
    29a8:	9b03      	ldr	r3, [sp, #12]
    29aa:	444b      	add	r3, r9
    29ac:	930a      	str	r3, [sp, #40]	; 0x28
    29ae:	9b04      	ldr	r3, [sp, #16]
    29b0:	f003 0301 	and.w	r3, r3, #1
    29b4:	46b0      	mov	r8, r6
    29b6:	9309      	str	r3, [sp, #36]	; 0x24
    29b8:	4606      	mov	r6, r0
    29ba:	9b08      	ldr	r3, [sp, #32]
    29bc:	4621      	mov	r1, r4
    29be:	3b01      	subs	r3, #1
    29c0:	4658      	mov	r0, fp
    29c2:	9304      	str	r3, [sp, #16]
    29c4:	f00e f8ef 	bl	10ba6 <quorem>
    29c8:	4603      	mov	r3, r0
    29ca:	3330      	adds	r3, #48	; 0x30
    29cc:	9006      	str	r0, [sp, #24]
    29ce:	4641      	mov	r1, r8
    29d0:	4658      	mov	r0, fp
    29d2:	930b      	str	r3, [sp, #44]	; 0x2c
    29d4:	f00e f830 	bl	10a38 <__mcmp>
    29d8:	4632      	mov	r2, r6
    29da:	4681      	mov	r9, r0
    29dc:	4621      	mov	r1, r4
    29de:	4628      	mov	r0, r5
    29e0:	f00b fb86 	bl	e0f0 <__mdiff>
    29e4:	68c2      	ldr	r2, [r0, #12]
    29e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    29e8:	4607      	mov	r7, r0
    29ea:	bb02      	cbnz	r2, 2a2e <_dtoa_r+0xa7e>
    29ec:	4601      	mov	r1, r0
    29ee:	4658      	mov	r0, fp
    29f0:	f00e f822 	bl	10a38 <__mcmp>
    29f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    29f6:	4602      	mov	r2, r0
    29f8:	4639      	mov	r1, r7
    29fa:	4628      	mov	r0, r5
    29fc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    2a00:	f00b f986 	bl	dd10 <_Bfree>
    2a04:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2a06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2a08:	9f08      	ldr	r7, [sp, #32]
    2a0a:	ea43 0102 	orr.w	r1, r3, r2
    2a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2a10:	430b      	orrs	r3, r1
    2a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2a14:	d10d      	bne.n	2a32 <_dtoa_r+0xa82>
    2a16:	2b39      	cmp	r3, #57	; 0x39
    2a18:	d029      	beq.n	2a6e <_dtoa_r+0xabe>
    2a1a:	f1b9 0f00 	cmp.w	r9, #0
    2a1e:	dd01      	ble.n	2a24 <_dtoa_r+0xa74>
    2a20:	9b06      	ldr	r3, [sp, #24]
    2a22:	3331      	adds	r3, #49	; 0x31
    2a24:	9a04      	ldr	r2, [sp, #16]
    2a26:	7013      	strb	r3, [r2, #0]
    2a28:	e776      	b.n	2918 <_dtoa_r+0x968>
    2a2a:	4630      	mov	r0, r6
    2a2c:	e7b9      	b.n	29a2 <_dtoa_r+0x9f2>
    2a2e:	2201      	movs	r2, #1
    2a30:	e7e2      	b.n	29f8 <_dtoa_r+0xa48>
    2a32:	f1b9 0f00 	cmp.w	r9, #0
    2a36:	db06      	blt.n	2a46 <_dtoa_r+0xa96>
    2a38:	9922      	ldr	r1, [sp, #136]	; 0x88
    2a3a:	ea41 0909 	orr.w	r9, r1, r9
    2a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
    2a40:	ea59 0101 	orrs.w	r1, r9, r1
    2a44:	d120      	bne.n	2a88 <_dtoa_r+0xad8>
    2a46:	2a00      	cmp	r2, #0
    2a48:	ddec      	ble.n	2a24 <_dtoa_r+0xa74>
    2a4a:	4659      	mov	r1, fp
    2a4c:	2201      	movs	r2, #1
    2a4e:	4628      	mov	r0, r5
    2a50:	9308      	str	r3, [sp, #32]
    2a52:	f00b fadd 	bl	e010 <__lshift>
    2a56:	4621      	mov	r1, r4
    2a58:	4683      	mov	fp, r0
    2a5a:	f00d ffed 	bl	10a38 <__mcmp>
    2a5e:	2800      	cmp	r0, #0
    2a60:	9b08      	ldr	r3, [sp, #32]
    2a62:	dc02      	bgt.n	2a6a <_dtoa_r+0xaba>
    2a64:	d1de      	bne.n	2a24 <_dtoa_r+0xa74>
    2a66:	07da      	lsls	r2, r3, #31
    2a68:	d5dc      	bpl.n	2a24 <_dtoa_r+0xa74>
    2a6a:	2b39      	cmp	r3, #57	; 0x39
    2a6c:	d1d8      	bne.n	2a20 <_dtoa_r+0xa70>
    2a6e:	9a04      	ldr	r2, [sp, #16]
    2a70:	2339      	movs	r3, #57	; 0x39
    2a72:	7013      	strb	r3, [r2, #0]
    2a74:	463b      	mov	r3, r7
    2a76:	461f      	mov	r7, r3
    2a78:	3b01      	subs	r3, #1
    2a7a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    2a7e:	2a39      	cmp	r2, #57	; 0x39
    2a80:	d050      	beq.n	2b24 <_dtoa_r+0xb74>
    2a82:	3201      	adds	r2, #1
    2a84:	701a      	strb	r2, [r3, #0]
    2a86:	e747      	b.n	2918 <_dtoa_r+0x968>
    2a88:	2a00      	cmp	r2, #0
    2a8a:	dd03      	ble.n	2a94 <_dtoa_r+0xae4>
    2a8c:	2b39      	cmp	r3, #57	; 0x39
    2a8e:	d0ee      	beq.n	2a6e <_dtoa_r+0xabe>
    2a90:	3301      	adds	r3, #1
    2a92:	e7c7      	b.n	2a24 <_dtoa_r+0xa74>
    2a94:	9a08      	ldr	r2, [sp, #32]
    2a96:	990a      	ldr	r1, [sp, #40]	; 0x28
    2a98:	f802 3c01 	strb.w	r3, [r2, #-1]
    2a9c:	428a      	cmp	r2, r1
    2a9e:	d02a      	beq.n	2af6 <_dtoa_r+0xb46>
    2aa0:	4659      	mov	r1, fp
    2aa2:	2300      	movs	r3, #0
    2aa4:	220a      	movs	r2, #10
    2aa6:	4628      	mov	r0, r5
    2aa8:	f00b f954 	bl	dd54 <__multadd>
    2aac:	45b0      	cmp	r8, r6
    2aae:	4683      	mov	fp, r0
    2ab0:	f04f 0300 	mov.w	r3, #0
    2ab4:	f04f 020a 	mov.w	r2, #10
    2ab8:	4641      	mov	r1, r8
    2aba:	4628      	mov	r0, r5
    2abc:	d107      	bne.n	2ace <_dtoa_r+0xb1e>
    2abe:	f00b f949 	bl	dd54 <__multadd>
    2ac2:	4680      	mov	r8, r0
    2ac4:	4606      	mov	r6, r0
    2ac6:	9b08      	ldr	r3, [sp, #32]
    2ac8:	3301      	adds	r3, #1
    2aca:	9308      	str	r3, [sp, #32]
    2acc:	e775      	b.n	29ba <_dtoa_r+0xa0a>
    2ace:	f00b f941 	bl	dd54 <__multadd>
    2ad2:	4631      	mov	r1, r6
    2ad4:	4680      	mov	r8, r0
    2ad6:	2300      	movs	r3, #0
    2ad8:	220a      	movs	r2, #10
    2ada:	4628      	mov	r0, r5
    2adc:	f00b f93a 	bl	dd54 <__multadd>
    2ae0:	4606      	mov	r6, r0
    2ae2:	e7f0      	b.n	2ac6 <_dtoa_r+0xb16>
    2ae4:	f1b9 0f00 	cmp.w	r9, #0
    2ae8:	9a03      	ldr	r2, [sp, #12]
    2aea:	bfcc      	ite	gt
    2aec:	464f      	movgt	r7, r9
    2aee:	2701      	movle	r7, #1
    2af0:	4417      	add	r7, r2
    2af2:	f04f 0800 	mov.w	r8, #0
    2af6:	4659      	mov	r1, fp
    2af8:	2201      	movs	r2, #1
    2afa:	4628      	mov	r0, r5
    2afc:	9308      	str	r3, [sp, #32]
    2afe:	f00b fa87 	bl	e010 <__lshift>
    2b02:	4621      	mov	r1, r4
    2b04:	4683      	mov	fp, r0
    2b06:	f00d ff97 	bl	10a38 <__mcmp>
    2b0a:	2800      	cmp	r0, #0
    2b0c:	dcb2      	bgt.n	2a74 <_dtoa_r+0xac4>
    2b0e:	d102      	bne.n	2b16 <_dtoa_r+0xb66>
    2b10:	9b08      	ldr	r3, [sp, #32]
    2b12:	07db      	lsls	r3, r3, #31
    2b14:	d4ae      	bmi.n	2a74 <_dtoa_r+0xac4>
    2b16:	463b      	mov	r3, r7
    2b18:	461f      	mov	r7, r3
    2b1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    2b1e:	2a30      	cmp	r2, #48	; 0x30
    2b20:	d0fa      	beq.n	2b18 <_dtoa_r+0xb68>
    2b22:	e6f9      	b.n	2918 <_dtoa_r+0x968>
    2b24:	9a03      	ldr	r2, [sp, #12]
    2b26:	429a      	cmp	r2, r3
    2b28:	d1a5      	bne.n	2a76 <_dtoa_r+0xac6>
    2b2a:	f10a 0a01 	add.w	sl, sl, #1
    2b2e:	2331      	movs	r3, #49	; 0x31
    2b30:	e779      	b.n	2a26 <_dtoa_r+0xa76>
    2b32:	4b14      	ldr	r3, [pc, #80]	; (2b84 <_dtoa_r+0xbd4>)
    2b34:	f7ff baa7 	b.w	2086 <_dtoa_r+0xd6>
    2b38:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2b3a:	2b00      	cmp	r3, #0
    2b3c:	f47f aa80 	bne.w	2040 <_dtoa_r+0x90>
    2b40:	4b11      	ldr	r3, [pc, #68]	; (2b88 <_dtoa_r+0xbd8>)
    2b42:	f7ff baa0 	b.w	2086 <_dtoa_r+0xd6>
    2b46:	f1b9 0f00 	cmp.w	r9, #0
    2b4a:	dc03      	bgt.n	2b54 <_dtoa_r+0xba4>
    2b4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2b4e:	2b02      	cmp	r3, #2
    2b50:	f73f aecb 	bgt.w	28ea <_dtoa_r+0x93a>
    2b54:	9f03      	ldr	r7, [sp, #12]
    2b56:	4621      	mov	r1, r4
    2b58:	4658      	mov	r0, fp
    2b5a:	f00e f824 	bl	10ba6 <quorem>
    2b5e:	f100 0330 	add.w	r3, r0, #48	; 0x30
    2b62:	f807 3b01 	strb.w	r3, [r7], #1
    2b66:	9a03      	ldr	r2, [sp, #12]
    2b68:	1aba      	subs	r2, r7, r2
    2b6a:	4591      	cmp	r9, r2
    2b6c:	ddba      	ble.n	2ae4 <_dtoa_r+0xb34>
    2b6e:	4659      	mov	r1, fp
    2b70:	2300      	movs	r3, #0
    2b72:	220a      	movs	r2, #10
    2b74:	4628      	mov	r0, r5
    2b76:	f00b f8ed 	bl	dd54 <__multadd>
    2b7a:	4683      	mov	fp, r0
    2b7c:	e7eb      	b.n	2b56 <_dtoa_r+0xba6>
    2b7e:	bf00      	nop
    2b80:	00013616 	.word	0x00013616
    2b84:	000136a3 	.word	0x000136a3
    2b88:	00013696 	.word	0x00013696

00002b8c <uart_cb>:
/* UART callback implementation */
/* Note that callback functions are executed in the scope of interrupt handlers. */
/* They run asynchronously after hardware/software interrupts and have a higher priority than all threads */
/* Should be kept as short and simple as possible. Heavier processing should be deferred to a task with suitable priority*/
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
    2b8c:	b538      	push	{r3, r4, r5, lr}
    int err;

    switch (evt->type) {
    2b8e:	780b      	ldrb	r3, [r1, #0]
    2b90:	2b06      	cmp	r3, #6
    2b92:	d877      	bhi.n	2c84 <uart_cb+0xf8>
    2b94:	e8df f003 	tbb	[pc, r3]
    2b98:	530c0804 	.word	0x530c0804
    2b9c:	5b57      	.short	0x5b57
    2b9e:	72          	.byte	0x72
    2b9f:	00          	.byte	0x00
	
        case UART_TX_DONE:
		    printk("UART_TX_DONE event \n\r");
    2ba0:	483a      	ldr	r0, [pc, #232]	; (2c8c <uart_cb+0x100>)
    2ba2:	f00c fa35 	bl	f010 <printk>
	    default:
            printk("UART: unknown event \n\r");
		    break;
    }

}
    2ba6:	bd38      	pop	{r3, r4, r5, pc}
	    	printk("UART_TX_ABORTED event \n\r");
    2ba8:	4839      	ldr	r0, [pc, #228]	; (2c90 <uart_cb+0x104>)
    2baa:	f00c fa31 	bl	f010 <printk>
		    break;
    2bae:	e7fa      	b.n	2ba6 <uart_cb+0x1a>
    2bb0:	460d      	mov	r5, r1
		    printk("UART_RX_RDY event \n\r");
    2bb2:	4838      	ldr	r0, [pc, #224]	; (2c94 <uart_cb+0x108>)
    2bb4:	f00c fa2c 	bl	f010 <printk>
            printk("Received %d bytes. nchar= %d, %d\n", evt->data.rx.len, uart_rxbuf_nchar, evt->data.rx.offset);
    2bb8:	4c37      	ldr	r4, [pc, #220]	; (2c98 <uart_cb+0x10c>)
    2bba:	6822      	ldr	r2, [r4, #0]
    2bbc:	68ab      	ldr	r3, [r5, #8]
    2bbe:	68e9      	ldr	r1, [r5, #12]
    2bc0:	4836      	ldr	r0, [pc, #216]	; (2c9c <uart_cb+0x110>)
    2bc2:	f00c fa25 	bl	f010 <printk>
            if(uart_rxbuf_nchar + evt->data.rx.len > RXBUF_SIZE){
    2bc6:	68ea      	ldr	r2, [r5, #12]
    2bc8:	6823      	ldr	r3, [r4, #0]
    2bca:	4413      	add	r3, r2
    2bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    2bd0:	d907      	bls.n	2be2 <uart_cb+0x56>
                printk("Error. Received more data than expected for %d x %d \n", IMGWIDTH, IMGWIDTH);
    2bd2:	2280      	movs	r2, #128	; 0x80
    2bd4:	4611      	mov	r1, r2
    2bd6:	4832      	ldr	r0, [pc, #200]	; (2ca0 <uart_cb+0x114>)
    2bd8:	f00c fa1a 	bl	f010 <printk>
                uart_rxbuf_nchar = 0;
    2bdc:	2200      	movs	r2, #0
    2bde:	6022      	str	r2, [r4, #0]
                break;
    2be0:	e7e1      	b.n	2ba6 <uart_cb+0x1a>
            memcpy(&rx_chars[uart_rxbuf_nchar],&(rx_buf[evt->data.rx.offset]),evt->data.rx.len); 
    2be2:	4c2d      	ldr	r4, [pc, #180]	; (2c98 <uart_cb+0x10c>)
    2be4:	6823      	ldr	r3, [r4, #0]
    2be6:	68a9      	ldr	r1, [r5, #8]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    2be8:	482e      	ldr	r0, [pc, #184]	; (2ca4 <uart_cb+0x118>)
    2bea:	4401      	add	r1, r0
    2bec:	482e      	ldr	r0, [pc, #184]	; (2ca8 <uart_cb+0x11c>)
    2bee:	4418      	add	r0, r3
    2bf0:	f00d fdd7 	bl	107a2 <memcpy>
            uart_rxbuf_nchar += evt->data.rx.len; 
    2bf4:	68ea      	ldr	r2, [r5, #12]
    2bf6:	6823      	ldr	r3, [r4, #0]
    2bf8:	4413      	add	r3, r2
    2bfa:	6023      	str	r3, [r4, #0]
            if(uart_rxbuf_nchar == RXBUF_SIZE){
    2bfc:	6823      	ldr	r3, [r4, #0]
    2bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    2c02:	d004      	beq.n	2c0e <uart_cb+0x82>
            printk("%d", evt->data.rx.len);   
    2c04:	68e9      	ldr	r1, [r5, #12]
    2c06:	4829      	ldr	r0, [pc, #164]	; (2cac <uart_cb+0x120>)
    2c08:	f00c fa02 	bl	f010 <printk>
		    break;
    2c0c:	e7cb      	b.n	2ba6 <uart_cb+0x1a>
                uart_rxbuf_nchar = 0;
    2c0e:	2400      	movs	r4, #0
    2c10:	4b21      	ldr	r3, [pc, #132]	; (2c98 <uart_cb+0x10c>)
    2c12:	601c      	str	r4, [r3, #0]
                uint8_t * img = (uint8_t*)reserve(image_cab);
    2c14:	4b26      	ldr	r3, [pc, #152]	; (2cb0 <uart_cb+0x124>)
    2c16:	6818      	ldr	r0, [r3, #0]
    2c18:	f00c f92c 	bl	ee74 <reserve>
                for(int i = 0; i < RXBUF_SIZE; i++){
    2c1c:	4623      	mov	r3, r4
    2c1e:	e003      	b.n	2c28 <uart_cb+0x9c>
                    img[i] = (uint8_t)rx_chars[i];
    2c20:	4a21      	ldr	r2, [pc, #132]	; (2ca8 <uart_cb+0x11c>)
    2c22:	5cd2      	ldrb	r2, [r2, r3]
    2c24:	54c2      	strb	r2, [r0, r3]
                for(int i = 0; i < RXBUF_SIZE; i++){
    2c26:	3301      	adds	r3, #1
    2c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    2c2c:	dbf8      	blt.n	2c20 <uart_cb+0x94>
                put_mes((void*)img, image_cab);
    2c2e:	4b20      	ldr	r3, [pc, #128]	; (2cb0 <uart_cb+0x124>)
    2c30:	6819      	ldr	r1, [r3, #0]
    2c32:	f00c f93f 	bl	eeb4 <put_mes>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2c36:	481f      	ldr	r0, [pc, #124]	; (2cb4 <uart_cb+0x128>)
    2c38:	f008 fa20 	bl	b07c <z_impl_k_sem_give>
}
    2c3c:	e7e2      	b.n	2c04 <uart_cb+0x78>
		    printk("UART_RX_BUF_REQUEST event \n\r");
    2c3e:	481e      	ldr	r0, [pc, #120]	; (2cb8 <uart_cb+0x12c>)
    2c40:	f00c f9e6 	bl	f010 <printk>
		    break;
    2c44:	e7af      	b.n	2ba6 <uart_cb+0x1a>
		    printk("UART_RX_BUF_RELEASED event \n\r");
    2c46:	481d      	ldr	r0, [pc, #116]	; (2cbc <uart_cb+0x130>)
    2c48:	f00c f9e2 	bl	f010 <printk>
		    break;
    2c4c:	e7ab      	b.n	2ba6 <uart_cb+0x1a>
            printk("UART_RX_DISABLED event \n\r");
    2c4e:	481c      	ldr	r0, [pc, #112]	; (2cc0 <uart_cb+0x134>)
    2c50:	f00c f9de 	bl	f010 <printk>
		    err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf),RX_TIMEOUT);
    2c54:	4b1b      	ldr	r3, [pc, #108]	; (2cc4 <uart_cb+0x138>)
    2c56:	6818      	ldr	r0, [r3, #0]
static inline int z_impl_uart_rx_enable(const struct device *dev,
					uint8_t *buf,
					size_t len, int32_t timeout)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
    2c58:	6883      	ldr	r3, [r0, #8]
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
    2c5a:	68dc      	ldr	r4, [r3, #12]
    2c5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2c60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2c64:	490f      	ldr	r1, [pc, #60]	; (2ca4 <uart_cb+0x118>)
    2c66:	47a0      	blx	r4
            if (err) {
    2c68:	4601      	mov	r1, r0
    2c6a:	2800      	cmp	r0, #0
    2c6c:	d09b      	beq.n	2ba6 <uart_cb+0x1a>
                printk("uart_rx_enable() error. Error code:%d\n\r",err);
    2c6e:	4816      	ldr	r0, [pc, #88]	; (2cc8 <uart_cb+0x13c>)
    2c70:	f00c f9ce 	bl	f010 <printk>
                exit(FATAL_ERR);                
    2c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2c78:	f00a fd20 	bl	d6bc <exit>
		    printk("UART_RX_STOPPED event \n\r");
    2c7c:	4813      	ldr	r0, [pc, #76]	; (2ccc <uart_cb+0x140>)
    2c7e:	f00c f9c7 	bl	f010 <printk>
		    break;
    2c82:	e790      	b.n	2ba6 <uart_cb+0x1a>
            printk("UART: unknown event \n\r");
    2c84:	4812      	ldr	r0, [pc, #72]	; (2cd0 <uart_cb+0x144>)
    2c86:	f00c f9c3 	bl	f010 <printk>
}
    2c8a:	e78c      	b.n	2ba6 <uart_cb+0x1a>
    2c8c:	000111e8 	.word	0x000111e8
    2c90:	00011200 	.word	0x00011200
    2c94:	0001121c 	.word	0x0001121c
    2c98:	2000c9ac 	.word	0x2000c9ac
    2c9c:	00011234 	.word	0x00011234
    2ca0:	00011258 	.word	0x00011258
    2ca4:	20004934 	.word	0x20004934
    2ca8:	20008934 	.word	0x20008934
    2cac:	0001147c 	.word	0x0001147c
    2cb0:	20004930 	.word	0x20004930
    2cb4:	2000c964 	.word	0x2000c964
    2cb8:	00011290 	.word	0x00011290
    2cbc:	000112b0 	.word	0x000112b0
    2cc0:	000112d0 	.word	0x000112d0
    2cc4:	2000c9a8 	.word	0x2000c9a8
    2cc8:	000112ec 	.word	0x000112ec
    2ccc:	00011314 	.word	0x00011314
    2cd0:	00011330 	.word	0x00011330

00002cd4 <thread_output_code>:
{
    2cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    printk("Thread output init\n");
    2cd8:	4835      	ldr	r0, [pc, #212]	; (2db0 <thread_output_code+0xdc>)
    2cda:	f00c f999 	bl	f010 <printk>
	return z_impl_k_uptime_ticks();
    2cde:	f00d fccf 	bl	10680 <z_impl_k_uptime_ticks>
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    2ce2:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
    2ce6:	f04f 0800 	mov.w	r8, #0
    2cea:	464f      	mov	r7, r9
    2cec:	4646      	mov	r6, r8
    2cee:	4644      	mov	r4, r8
    2cf0:	4645      	mov	r5, r8
    2cf2:	e012      	b.n	2d1a <thread_output_code+0x46>
            printk("\tCloseby obstacles detected: %s\n\r", nearobs_output==1? "Yes" : "No");
    2cf4:	492f      	ldr	r1, [pc, #188]	; (2db4 <thread_output_code+0xe0>)
    2cf6:	e01d      	b.n	2d34 <thread_output_code+0x60>
            printk("\tRobot position=%s, guideline angle=%s\n\r", orientation_output[0], orientation_output[1]);
    2cf8:	492f      	ldr	r1, [pc, #188]	; (2db8 <thread_output_code+0xe4>)
    2cfa:	f101 020a 	add.w	r2, r1, #10
    2cfe:	482f      	ldr	r0, [pc, #188]	; (2dbc <thread_output_code+0xe8>)
    2d00:	f00c f986 	bl	f010 <printk>
    2d04:	e022      	b.n	2d4c <thread_output_code+0x78>
	        printk("\t%d obstacles detected\n\r", obscount_output);
    2d06:	4b2e      	ldr	r3, [pc, #184]	; (2dc0 <thread_output_code+0xec>)
    2d08:	8819      	ldrh	r1, [r3, #0]
    2d0a:	482e      	ldr	r0, [pc, #184]	; (2dc4 <thread_output_code+0xf0>)
    2d0c:	f00c f980 	bl	f010 <printk>
    2d10:	e025      	b.n	2d5e <thread_output_code+0x8a>
            t_min = fin_time - t_prev;
    2d12:	4627      	mov	r7, r4
    2d14:	462e      	mov	r6, r5
        t_prev = fin_time;
    2d16:	461c      	mov	r4, r3
    2d18:	4615      	mov	r5, r2
	return z_impl_k_sem_take(sem, timeout);
    2d1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2d22:	4829      	ldr	r0, [pc, #164]	; (2dc8 <thread_output_code+0xf4>)
    2d24:	f008 f9ee 	bl	b104 <z_impl_k_sem_take>
        if(s1 == 0)
    2d28:	b938      	cbnz	r0, 2d3a <thread_output_code+0x66>
            printk("\tCloseby obstacles detected: %s\n\r", nearobs_output==1? "Yes" : "No");
    2d2a:	4b28      	ldr	r3, [pc, #160]	; (2dcc <thread_output_code+0xf8>)
    2d2c:	781b      	ldrb	r3, [r3, #0]
    2d2e:	2b01      	cmp	r3, #1
    2d30:	d0e0      	beq.n	2cf4 <thread_output_code+0x20>
    2d32:	4927      	ldr	r1, [pc, #156]	; (2dd0 <thread_output_code+0xfc>)
    2d34:	4827      	ldr	r0, [pc, #156]	; (2dd4 <thread_output_code+0x100>)
    2d36:	f00c f96b 	bl	f010 <printk>
    2d3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2d42:	4825      	ldr	r0, [pc, #148]	; (2dd8 <thread_output_code+0x104>)
    2d44:	f008 f9de 	bl	b104 <z_impl_k_sem_take>
        if(s2 == 0)
    2d48:	2800      	cmp	r0, #0
    2d4a:	d0d5      	beq.n	2cf8 <thread_output_code+0x24>
    2d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2d54:	4821      	ldr	r0, [pc, #132]	; (2ddc <thread_output_code+0x108>)
    2d56:	f008 f9d5 	bl	b104 <z_impl_k_sem_take>
        if(s3 == 0)
    2d5a:	2800      	cmp	r0, #0
    2d5c:	d0d3      	beq.n	2d06 <thread_output_code+0x32>
	return z_impl_k_uptime_ticks();
    2d5e:	f00d fc8f 	bl	10680 <z_impl_k_uptime_ticks>
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
    2d62:	4684      	mov	ip, r0
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    2d64:	014a      	lsls	r2, r1, #5
    2d66:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    2d6a:	0140      	lsls	r0, r0, #5
    2d6c:	ebb0 000c 	subs.w	r0, r0, ip
    2d70:	eb62 0301 	sbc.w	r3, r2, r1
    2d74:	009b      	lsls	r3, r3, #2
    2d76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
    2d7a:	0080      	lsls	r0, r0, #2
    2d7c:	eb10 000c 	adds.w	r0, r0, ip
    2d80:	eb43 0301 	adc.w	r3, r3, r1
    2d84:	00db      	lsls	r3, r3, #3
    2d86:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    2d8a:	f3c0 3010 	ubfx	r0, r0, #12, #17
    2d8e:	0bda      	lsrs	r2, r3, #15
    2d90:	ea40 4343 	orr.w	r3, r0, r3, lsl #17
        if (fin_time - t_prev < t_min)
    2d94:	1b1c      	subs	r4, r3, r4
    2d96:	eb62 0505 	sbc.w	r5, r2, r5
    2d9a:	42bc      	cmp	r4, r7
    2d9c:	eb75 0106 	sbcs.w	r1, r5, r6
    2da0:	dbb7      	blt.n	2d12 <thread_output_code+0x3e>
        else if (fin_time - t_prev > t_max)
    2da2:	45a1      	cmp	r9, r4
    2da4:	eb78 0105 	sbcs.w	r1, r8, r5
    2da8:	dab5      	bge.n	2d16 <thread_output_code+0x42>
            t_max = fin_time - t_prev;
    2daa:	46a1      	mov	r9, r4
    2dac:	46a8      	mov	r8, r5
    2dae:	e7b2      	b.n	2d16 <thread_output_code+0x42>
    2db0:	00011350 	.word	0x00011350
    2db4:	0001134c 	.word	0x0001134c
    2db8:	20000000 	.word	0x20000000
    2dbc:	00011388 	.word	0x00011388
    2dc0:	2000d718 	.word	0x2000d718
    2dc4:	000113b4 	.word	0x000113b4
    2dc8:	2000c934 	.word	0x2000c934
    2dcc:	2000d71a 	.word	0x2000d71a
    2dd0:	00011348 	.word	0x00011348
    2dd4:	00011364 	.word	0x00011364
    2dd8:	2000c954 	.word	0x2000c954
    2ddc:	2000c944 	.word	0x2000c944

00002de0 <thread_obscount_code>:
{
    2de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    printk("Thread obscount init\n");
    2de4:	4836      	ldr	r0, [pc, #216]	; (2ec0 <thread_obscount_code+0xe0>)
    2de6:	f00c f913 	bl	f010 <printk>
    2dea:	f00d fc49 	bl	10680 <z_impl_k_uptime_ticks>
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    2dee:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    2df2:	2500      	movs	r5, #0
    2df4:	46d1      	mov	r9, sl
    2df6:	46a8      	mov	r8, r5
    2df8:	462f      	mov	r7, r5
    2dfa:	462e      	mov	r6, r5
    2dfc:	e04d      	b.n	2e9a <thread_obscount_code+0xba>
                    inObs++;
    2dfe:	3101      	adds	r1, #1
            for (i = 0; i < IMGWIDTH; i++)
    2e00:	3301      	adds	r3, #1
    2e02:	2b7f      	cmp	r3, #127	; 0x7f
    2e04:	dc0a      	bgt.n	2e1c <thread_obscount_code+0x3c>
                if (image[j][i] == OBSTACLE_COLOR)
    2e06:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
    2e0a:	5cd2      	ldrb	r2, [r2, r3]
    2e0c:	2a80      	cmp	r2, #128	; 0x80
    2e0e:	d0f6      	beq.n	2dfe <thread_obscount_code+0x1e>
                else if (inObs > 1)
    2e10:	2901      	cmp	r1, #1
    2e12:	ddf5      	ble.n	2e00 <thread_obscount_code+0x20>
                    nobs++;
    2e14:	f10c 0c01 	add.w	ip, ip, #1
                    inObs = 0;
    2e18:	2100      	movs	r1, #0
    2e1a:	e7f1      	b.n	2e00 <thread_obscount_code+0x20>
            if (inObs > 1)
    2e1c:	2901      	cmp	r1, #1
    2e1e:	dd01      	ble.n	2e24 <thread_obscount_code+0x44>
                nobs++;
    2e20:	f10c 0c01 	add.w	ip, ip, #1
        for (j = 0; j < IMGWIDTH; j++)
    2e24:	3001      	adds	r0, #1
    2e26:	287f      	cmp	r0, #127	; 0x7f
    2e28:	dc02      	bgt.n	2e30 <thread_obscount_code+0x50>
            int inObs = 0;
    2e2a:	2100      	movs	r1, #0
            for (i = 0; i < IMGWIDTH; i++)
    2e2c:	460b      	mov	r3, r1
    2e2e:	e7e8      	b.n	2e02 <thread_obscount_code+0x22>
        obscount_output = nobs;
    2e30:	4b24      	ldr	r3, [pc, #144]	; (2ec4 <thread_obscount_code+0xe4>)
    2e32:	f8a3 c000 	strh.w	ip, [r3]
        unget(image, image_cab);
    2e36:	4b24      	ldr	r3, [pc, #144]	; (2ec8 <thread_obscount_code+0xe8>)
    2e38:	6819      	ldr	r1, [r3, #0]
    2e3a:	4620      	mov	r0, r4
    2e3c:	f00c f87a 	bl	ef34 <unget>
	z_impl_k_sem_give(sem);
    2e40:	4822      	ldr	r0, [pc, #136]	; (2ecc <thread_obscount_code+0xec>)
    2e42:	f008 f91b 	bl	b07c <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
    2e46:	f00d fc1b 	bl	10680 <z_impl_k_uptime_ticks>
    2e4a:	014a      	lsls	r2, r1, #5
    2e4c:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    2e50:	0143      	lsls	r3, r0, #5
    2e52:	1a1b      	subs	r3, r3, r0
    2e54:	eb62 0201 	sbc.w	r2, r2, r1
    2e58:	0092      	lsls	r2, r2, #2
    2e5a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    2e5e:	009b      	lsls	r3, r3, #2
    2e60:	181b      	adds	r3, r3, r0
    2e62:	eb42 0201 	adc.w	r2, r2, r1
    2e66:	00d2      	lsls	r2, r2, #3
    2e68:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    2e6c:	f3c3 3310 	ubfx	r3, r3, #12, #17
    2e70:	0bd0      	lsrs	r0, r2, #15
    2e72:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        if (fin_time - t_prev < t_min)
    2e76:	1bd9      	subs	r1, r3, r7
    2e78:	eb60 0206 	sbc.w	r2, r0, r6
    2e7c:	4549      	cmp	r1, r9
    2e7e:	eb72 0408 	sbcs.w	r4, r2, r8
    2e82:	db06      	blt.n	2e92 <thread_obscount_code+0xb2>
        else if (fin_time - t_prev > t_max)
    2e84:	458a      	cmp	sl, r1
    2e86:	eb75 0402 	sbcs.w	r4, r5, r2
    2e8a:	da04      	bge.n	2e96 <thread_obscount_code+0xb6>
            t_max = fin_time - t_prev;
    2e8c:	468a      	mov	sl, r1
    2e8e:	4615      	mov	r5, r2
    2e90:	e001      	b.n	2e96 <thread_obscount_code+0xb6>
            t_min = fin_time - t_prev;
    2e92:	4689      	mov	r9, r1
    2e94:	4690      	mov	r8, r2
        t_prev = fin_time;
    2e96:	461f      	mov	r7, r3
    2e98:	4606      	mov	r6, r0
	return z_impl_k_sem_take(sem, timeout);
    2e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2ea2:	480b      	ldr	r0, [pc, #44]	; (2ed0 <thread_obscount_code+0xf0>)
    2ea4:	f008 f92e 	bl	b104 <z_impl_k_sem_take>
        uint8_t ** image = (uint8_t **)get_mes(image_cab);
    2ea8:	4b07      	ldr	r3, [pc, #28]	; (2ec8 <thread_obscount_code+0xe8>)
    2eaa:	6818      	ldr	r0, [r3, #0]
    2eac:	f00c f81e 	bl	eeec <get_mes>
    2eb0:	4604      	mov	r4, r0
	    printk("Detecting number of obstacles ...\n");
    2eb2:	4808      	ldr	r0, [pc, #32]	; (2ed4 <thread_obscount_code+0xf4>)
    2eb4:	f00c f8ac 	bl	f010 <printk>
        nobs = 0;
    2eb8:	f04f 0c00 	mov.w	ip, #0
        for (j = 0; j < IMGWIDTH; j++)
    2ebc:	4660      	mov	r0, ip
    2ebe:	e7b2      	b.n	2e26 <thread_obscount_code+0x46>
    2ec0:	000113d0 	.word	0x000113d0
    2ec4:	2000d718 	.word	0x2000d718
    2ec8:	20004930 	.word	0x20004930
    2ecc:	2000c944 	.word	0x2000c944
    2ed0:	2000c974 	.word	0x2000c974
    2ed4:	000113e8 	.word	0x000113e8

00002ed8 <thread_orientation_code>:
{
    2ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2edc:	b087      	sub	sp, #28
    printk("Thread orientation init\n");
    2ede:	4864      	ldr	r0, [pc, #400]	; (3070 <thread_orientation_code+0x198>)
    2ee0:	f00c f896 	bl	f010 <printk>
	return z_impl_k_uptime_ticks();
    2ee4:	f00d fbcc 	bl	10680 <z_impl_k_uptime_ticks>
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    2ee8:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    2eec:	9704      	str	r7, [sp, #16]
    2eee:	2300      	movs	r3, #0
    2ef0:	469a      	mov	sl, r3
    2ef2:	9305      	str	r3, [sp, #20]
    2ef4:	9301      	str	r3, [sp, #4]
    2ef6:	469b      	mov	fp, r3
    2ef8:	e0a0      	b.n	303c <thread_orientation_code+0x164>
                pos = i;
    2efa:	b224      	sxth	r4, r4
        for (i = 0; i < IMGWIDTH; i++)
    2efc:	f04f 0900 	mov.w	r9, #0
    2f00:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
    2f04:	dc0b      	bgt.n	2f1e <thread_orientation_code+0x46>
            if (image[GF_ROW][i] == GUIDELINE_COLOR)
    2f06:	f8d5 31fc 	ldr.w	r3, [r5, #508]	; 0x1fc
    2f0a:	f813 3009 	ldrb.w	r3, [r3, r9]
    2f0e:	2bff      	cmp	r3, #255	; 0xff
    2f10:	d007      	beq.n	2f22 <thread_orientation_code+0x4a>
        for (i = 0; i < IMGWIDTH; i++)
    2f12:	f109 0901 	add.w	r9, r9, #1
    2f16:	e7f3      	b.n	2f00 <thread_orientation_code+0x28>
        pos = -1;
    2f18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2f1c:	e7ee      	b.n	2efc <thread_orientation_code+0x24>
        gf_pos = -1;
    2f1e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
        if (pos == -1 || gf_pos == -1)
    2f22:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    2f26:	d079      	beq.n	301c <thread_orientation_code+0x144>
    2f28:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    2f2c:	d076      	beq.n	301c <thread_orientation_code+0x144>
        if (pos == gf_pos)
    2f2e:	4626      	mov	r6, r4
    2f30:	454c      	cmp	r4, r9
    2f32:	d07b      	beq.n	302c <thread_orientation_code+0x154>
            int pos_delta = pos - gf_pos;
    2f34:	eba4 0409 	sub.w	r4, r4, r9
            if (pos_delta > 0)
    2f38:	2c00      	cmp	r4, #0
    2f3a:	dd75      	ble.n	3028 <thread_orientation_code+0x150>
                pos_delta++;
    2f3c:	3401      	adds	r4, #1
            angle = acos(IMGWIDTH / sqrt(pow(IMGWIDTH, 2) + pow(pos_delta, 2)));
    2f3e:	f04f 0800 	mov.w	r8, #0
    2f42:	f8df 9130 	ldr.w	r9, [pc, #304]	; 3074 <thread_orientation_code+0x19c>
    2f46:	2200      	movs	r2, #0
    2f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f4c:	4640      	mov	r0, r8
    2f4e:	4649      	mov	r1, r9
    2f50:	f00a f970 	bl	d234 <pow>
    2f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
    2f58:	4620      	mov	r0, r4
    2f5a:	f7fd fa73 	bl	444 <__aeabi_i2d>
    2f5e:	2200      	movs	r2, #0
    2f60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f64:	f00a f966 	bl	d234 <pow>
    2f68:	4602      	mov	r2, r0
    2f6a:	460b      	mov	r3, r1
    2f6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    2f70:	f7fd f91c 	bl	1ac <__adddf3>
    2f74:	f00a fa0a 	bl	d38c <sqrt>
    2f78:	4602      	mov	r2, r0
    2f7a:	460b      	mov	r3, r1
    2f7c:	4640      	mov	r0, r8
    2f7e:	4649      	mov	r1, r9
    2f80:	f7fd fbf4 	bl	76c <__aeabi_ddiv>
    2f84:	f00a f928 	bl	d1d8 <acos>
    2f88:	f7fd fcd8 	bl	93c <__aeabi_d2f>
    2f8c:	4681      	mov	r9, r0
            if (pos_delta > 0)
    2f8e:	2c00      	cmp	r4, #0
    2f90:	dd01      	ble.n	2f96 <thread_orientation_code+0xbe>
                angle = -angle;
    2f92:	f100 4900 	add.w	r9, r0, #2147483648	; 0x80000000
        itoa(pos, orientation_output[0], 10);
    2f96:	4c38      	ldr	r4, [pc, #224]	; (3078 <thread_orientation_code+0x1a0>)
    2f98:	220a      	movs	r2, #10
    2f9a:	4621      	mov	r1, r4
    2f9c:	4630      	mov	r0, r6
    2f9e:	f00d fbfe 	bl	1079e <itoa>
        gcvt (angle, 6, orientation_output[1]);
    2fa2:	340a      	adds	r4, #10
    2fa4:	4648      	mov	r0, r9
    2fa6:	f7fd fa5f 	bl	468 <__aeabi_f2d>
    2faa:	4623      	mov	r3, r4
    2fac:	2206      	movs	r2, #6
    2fae:	f00a fb61 	bl	d674 <gcvt>
        unget(image, image_cab);
    2fb2:	4b32      	ldr	r3, [pc, #200]	; (307c <thread_orientation_code+0x1a4>)
    2fb4:	6819      	ldr	r1, [r3, #0]
    2fb6:	4628      	mov	r0, r5
    2fb8:	f00b ffbc 	bl	ef34 <unget>
	z_impl_k_sem_give(sem);
    2fbc:	4830      	ldr	r0, [pc, #192]	; (3080 <thread_orientation_code+0x1a8>)
    2fbe:	f008 f85d 	bl	b07c <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
    2fc2:	f00d fb5d 	bl	10680 <z_impl_k_uptime_ticks>
    2fc6:	4604      	mov	r4, r0
    2fc8:	014a      	lsls	r2, r1, #5
    2fca:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    2fce:	0140      	lsls	r0, r0, #5
    2fd0:	1b00      	subs	r0, r0, r4
    2fd2:	eb62 0301 	sbc.w	r3, r2, r1
    2fd6:	009b      	lsls	r3, r3, #2
    2fd8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
    2fdc:	0080      	lsls	r0, r0, #2
    2fde:	1900      	adds	r0, r0, r4
    2fe0:	eb43 0301 	adc.w	r3, r3, r1
    2fe4:	00db      	lsls	r3, r3, #3
    2fe6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    2fea:	f3c0 3010 	ubfx	r0, r0, #12, #17
    2fee:	0bda      	lsrs	r2, r3, #15
    2ff0:	ea40 4343 	orr.w	r3, r0, r3, lsl #17
        if (fin_time - t_prev < t_min)
    2ff4:	ebb3 0b0b 	subs.w	fp, r3, fp
    2ff8:	eb62 0a0a 	sbc.w	sl, r2, sl
    2ffc:	45bb      	cmp	fp, r7
    2ffe:	9901      	ldr	r1, [sp, #4]
    3000:	eb7a 0101 	sbcs.w	r1, sl, r1
    3004:	db15      	blt.n	3032 <thread_orientation_code+0x15a>
        else if (fin_time - t_prev > t_max)
    3006:	9904      	ldr	r1, [sp, #16]
    3008:	4559      	cmp	r1, fp
    300a:	9905      	ldr	r1, [sp, #20]
    300c:	eb71 010a 	sbcs.w	r1, r1, sl
    3010:	da12      	bge.n	3038 <thread_orientation_code+0x160>
            t_max = fin_time - t_prev;
    3012:	f8cd b010 	str.w	fp, [sp, #16]
    3016:	f8cd a014 	str.w	sl, [sp, #20]
    301a:	e00d      	b.n	3038 <thread_orientation_code+0x160>
            printk("Failed to find guideline pos=%d, gf_pos=%d", pos, gf_pos);
    301c:	464a      	mov	r2, r9
    301e:	4621      	mov	r1, r4
    3020:	4818      	ldr	r0, [pc, #96]	; (3084 <thread_orientation_code+0x1ac>)
    3022:	f00b fff5 	bl	f010 <printk>
    3026:	e782      	b.n	2f2e <thread_orientation_code+0x56>
                pos_delta--;
    3028:	3c01      	subs	r4, #1
    302a:	e788      	b.n	2f3e <thread_orientation_code+0x66>
            angle = 0;
    302c:	f04f 0900 	mov.w	r9, #0
    3030:	e7b1      	b.n	2f96 <thread_orientation_code+0xbe>
            t_min = fin_time - t_prev;
    3032:	465f      	mov	r7, fp
    3034:	f8cd a004 	str.w	sl, [sp, #4]
        t_prev = fin_time;
    3038:	469b      	mov	fp, r3
    303a:	4692      	mov	sl, r2
	return z_impl_k_sem_take(sem, timeout);
    303c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3044:	4810      	ldr	r0, [pc, #64]	; (3088 <thread_orientation_code+0x1b0>)
    3046:	f008 f85d 	bl	b104 <z_impl_k_sem_take>
        uint8_t ** image = (uint8_t **)get_mes(image_cab);
    304a:	4b0c      	ldr	r3, [pc, #48]	; (307c <thread_orientation_code+0x1a4>)
    304c:	6818      	ldr	r0, [r3, #0]
    304e:	f00b ff4d 	bl	eeec <get_mes>
    3052:	4605      	mov	r5, r0
        printk("Detecting position and guideline angle...\n");
    3054:	480d      	ldr	r0, [pc, #52]	; (308c <thread_orientation_code+0x1b4>)
    3056:	f00b ffdb 	bl	f010 <printk>
        for (i = 0; i < IMGWIDTH; i++)
    305a:	2400      	movs	r4, #0
    305c:	2c7f      	cmp	r4, #127	; 0x7f
    305e:	f73f af5b 	bgt.w	2f18 <thread_orientation_code+0x40>
            if (image[GN_ROW][i] == GUIDELINE_COLOR)
    3062:	682b      	ldr	r3, [r5, #0]
    3064:	5d1b      	ldrb	r3, [r3, r4]
    3066:	2bff      	cmp	r3, #255	; 0xff
    3068:	f43f af47 	beq.w	2efa <thread_orientation_code+0x22>
        for (i = 0; i < IMGWIDTH; i++)
    306c:	3401      	adds	r4, #1
    306e:	e7f5      	b.n	305c <thread_orientation_code+0x184>
    3070:	0001140c 	.word	0x0001140c
    3074:	40600000 	.word	0x40600000
    3078:	20000000 	.word	0x20000000
    307c:	20004930 	.word	0x20004930
    3080:	2000c954 	.word	0x2000c954
    3084:	00011454 	.word	0x00011454
    3088:	2000c984 	.word	0x2000c984
    308c:	00011428 	.word	0x00011428

00003090 <main>:
{
    3090:	b5f0      	push	{r4, r5, r6, r7, lr}
    3092:	b089      	sub	sp, #36	; 0x24
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    3094:	4873      	ldr	r0, [pc, #460]	; (3264 <main+0x1d4>)
    3096:	f007 f8d5 	bl	a244 <z_impl_device_get_binding>
    uart_dev= device_get_binding(DT_LABEL(UART_NODE));
    309a:	4a73      	ldr	r2, [pc, #460]	; (3268 <main+0x1d8>)
    309c:	6010      	str	r0, [r2, #0]
    if (uart_dev == NULL) {
    309e:	b340      	cbz	r0, 30f2 <main+0x62>
        printk("UART binding successful\n\r");
    30a0:	4872      	ldr	r0, [pc, #456]	; (326c <main+0x1dc>)
    30a2:	f00b ffb5 	bl	f010 <printk>
    err = uart_configure(uart_dev, &uart_cfg);
    30a6:	4b70      	ldr	r3, [pc, #448]	; (3268 <main+0x1d8>)
    30a8:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    30aa:	6883      	ldr	r3, [r0, #8]
	if (api->configure == NULL) {
    30ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    30ae:	b32b      	cbz	r3, 30fc <main+0x6c>
	return api->configure(dev, cfg);
    30b0:	496f      	ldr	r1, [pc, #444]	; (3270 <main+0x1e0>)
    30b2:	4798      	blx	r3
    30b4:	4603      	mov	r3, r0
    if (err == -ENOSYS) { /* If invalid configuration */
    30b6:	f113 0f58 	cmn.w	r3, #88	; 0x58
    30ba:	d022      	beq.n	3102 <main+0x72>
    err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf),RX_TIMEOUT);
    30bc:	4b6a      	ldr	r3, [pc, #424]	; (3268 <main+0x1d8>)
    30be:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    30c0:	6883      	ldr	r3, [r0, #8]
	return api->rx_enable(dev, buf, len, timeout);
    30c2:	68dc      	ldr	r4, [r3, #12]
    30c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    30c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    30cc:	4969      	ldr	r1, [pc, #420]	; (3274 <main+0x1e4>)
    30ce:	47a0      	blx	r4
    if (err) {
    30d0:	4601      	mov	r1, r0
    30d2:	b9d0      	cbnz	r0, 310a <main+0x7a>
    err = uart_callback_set(uart_dev, uart_cb, NULL);
    30d4:	4b64      	ldr	r3, [pc, #400]	; (3268 <main+0x1d8>)
    30d6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    30d8:	6883      	ldr	r3, [r0, #8]
	if (api->callback_set == NULL) {
    30da:	681b      	ldr	r3, [r3, #0]
    30dc:	b1cb      	cbz	r3, 3112 <main+0x82>
	return api->callback_set(dev, callback, user_data);
    30de:	2200      	movs	r2, #0
    30e0:	4965      	ldr	r1, [pc, #404]	; (3278 <main+0x1e8>)
    30e2:	4798      	blx	r3
    if (err) {
    30e4:	4601      	mov	r1, r0
    30e6:	b1b8      	cbz	r0, 3118 <main+0x88>
        printk("uart_callback_set() error. Error code:%d\n\r",err);
    30e8:	4864      	ldr	r0, [pc, #400]	; (327c <main+0x1ec>)
    30ea:	f00b ff91 	bl	f010 <printk>
}
    30ee:	b009      	add	sp, #36	; 0x24
    30f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printk("device_get_binding() error for device %s!\n\r", DT_LABEL(UART_NODE));
    30f2:	495c      	ldr	r1, [pc, #368]	; (3264 <main+0x1d4>)
    30f4:	4862      	ldr	r0, [pc, #392]	; (3280 <main+0x1f0>)
    30f6:	f00b ff8b 	bl	f010 <printk>
        return;
    30fa:	e7f8      	b.n	30ee <main+0x5e>
		return -ENOSYS;
    30fc:	f06f 0357 	mvn.w	r3, #87	; 0x57
    3100:	e7d9      	b.n	30b6 <main+0x26>
        printk("uart_configure() error. Invalid configuration\n\r");
    3102:	4860      	ldr	r0, [pc, #384]	; (3284 <main+0x1f4>)
    3104:	f00b ff84 	bl	f010 <printk>
        return; 
    3108:	e7f1      	b.n	30ee <main+0x5e>
        printk("uart_rx_enable() error. Error code:%d\n\r",err);
    310a:	485f      	ldr	r0, [pc, #380]	; (3288 <main+0x1f8>)
    310c:	f00b ff80 	bl	f010 <printk>
        return;
    3110:	e7ed      	b.n	30ee <main+0x5e>
		return -ENOSYS;
    3112:	f06f 0157 	mvn.w	r1, #87	; 0x57
    3116:	e7e7      	b.n	30e8 <main+0x58>
    uint8_t **img1 = (uint8_t **)malloc(IMGWIDTH * sizeof(uint8_t *));
    3118:	f44f 7000 	mov.w	r0, #512	; 0x200
    311c:	f00a fc72 	bl	da04 <malloc>
    3120:	4604      	mov	r4, r0
    for (uint8_t j = 0; j < IMGWIDTH; j++)
    3122:	2500      	movs	r5, #0
    3124:	e006      	b.n	3134 <main+0xa4>
        img1[j] = (uint8_t *)malloc(IMGWIDTH * sizeof(uint8_t));
    3126:	2080      	movs	r0, #128	; 0x80
    3128:	f00a fc6c 	bl	da04 <malloc>
    312c:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    for (uint8_t j = 0; j < IMGWIDTH; j++)
    3130:	3501      	adds	r5, #1
    3132:	b2ed      	uxtb	r5, r5
    3134:	f015 0f80 	tst.w	r5, #128	; 0x80
    3138:	d0f5      	beq.n	3126 <main+0x96>
    for (size_t i = 0; i < IMGWIDTH; i++)
    313a:	2100      	movs	r1, #0
    313c:	e00a      	b.n	3154 <main+0xc4>
            img1[i][j] = vertical_guide_image_data[i][j];
    313e:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
    3142:	4a52      	ldr	r2, [pc, #328]	; (328c <main+0x1fc>)
    3144:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    3148:	5cd2      	ldrb	r2, [r2, r3]
    314a:	54c2      	strb	r2, [r0, r3]
        for (size_t j = 0; j < IMGWIDTH; j++)
    314c:	3301      	adds	r3, #1
    314e:	2b7f      	cmp	r3, #127	; 0x7f
    3150:	d9f5      	bls.n	313e <main+0xae>
    for (size_t i = 0; i < IMGWIDTH; i++)
    3152:	3101      	adds	r1, #1
    3154:	297f      	cmp	r1, #127	; 0x7f
    3156:	d801      	bhi.n	315c <main+0xcc>
        for (size_t j = 0; j < IMGWIDTH; j++)
    3158:	2300      	movs	r3, #0
    315a:	e7f8      	b.n	314e <main+0xbe>
    printk("open cab");
    315c:	484c      	ldr	r0, [pc, #304]	; (3290 <main+0x200>)
    315e:	f00b ff57 	bl	f010 <printk>
    image_cab = open_cab("image cab", 5, IMGWIDTH*IMGWIDTH, (void*)img1);
    3162:	4623      	mov	r3, r4
    3164:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3168:	2105      	movs	r1, #5
    316a:	484a      	ldr	r0, [pc, #296]	; (3294 <main+0x204>)
    316c:	f000 fa0e 	bl	358c <open_cab>
    3170:	4b49      	ldr	r3, [pc, #292]	; (3298 <main+0x208>)
    3172:	6018      	str	r0, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    3174:	2201      	movs	r2, #1
    3176:	2100      	movs	r1, #0
    3178:	4848      	ldr	r0, [pc, #288]	; (329c <main+0x20c>)
    317a:	f00d fa2b 	bl	105d4 <z_impl_k_sem_init>
    317e:	2201      	movs	r2, #1
    3180:	2100      	movs	r1, #0
    3182:	4847      	ldr	r0, [pc, #284]	; (32a0 <main+0x210>)
    3184:	f00d fa26 	bl	105d4 <z_impl_k_sem_init>
    3188:	2201      	movs	r2, #1
    318a:	2100      	movs	r1, #0
    318c:	4845      	ldr	r0, [pc, #276]	; (32a4 <main+0x214>)
    318e:	f00d fa21 	bl	105d4 <z_impl_k_sem_init>
    3192:	2201      	movs	r2, #1
    3194:	2100      	movs	r1, #0
    3196:	4844      	ldr	r0, [pc, #272]	; (32a8 <main+0x218>)
    3198:	f00d fa1c 	bl	105d4 <z_impl_k_sem_init>
    319c:	2201      	movs	r2, #1
    319e:	2100      	movs	r1, #0
    31a0:	4842      	ldr	r0, [pc, #264]	; (32ac <main+0x21c>)
    31a2:	f00d fa17 	bl	105d4 <z_impl_k_sem_init>
    31a6:	2201      	movs	r2, #1
    31a8:	2100      	movs	r1, #0
    31aa:	4841      	ldr	r0, [pc, #260]	; (32b0 <main+0x220>)
    31ac:	f00d fa12 	bl	105d4 <z_impl_k_sem_init>
                                               NULL, NULL, NULL, thread_near_obstacle_prio, 0, K_NO_WAIT);
    31b0:	2600      	movs	r6, #0
    31b2:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    31b4:	e9cd 6706 	strd	r6, r7, [sp, #24]
    31b8:	2400      	movs	r4, #0
    31ba:	9404      	str	r4, [sp, #16]
    31bc:	2304      	movs	r3, #4
    31be:	9303      	str	r3, [sp, #12]
    31c0:	9402      	str	r4, [sp, #8]
    31c2:	9401      	str	r4, [sp, #4]
    31c4:	9400      	str	r4, [sp, #0]
    31c6:	4b3b      	ldr	r3, [pc, #236]	; (32b4 <main+0x224>)
    31c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    31cc:	493a      	ldr	r1, [pc, #232]	; (32b8 <main+0x228>)
    31ce:	483b      	ldr	r0, [pc, #236]	; (32bc <main+0x22c>)
    31d0:	f007 fc68 	bl	aaa4 <z_impl_k_thread_create>
    thread_near_obstacle_tid = k_thread_create(&thread_near_obstacle_data, thread_near_obstacle_stack,
    31d4:	4b3a      	ldr	r3, [pc, #232]	; (32c0 <main+0x230>)
    31d6:	6018      	str	r0, [r3, #0]
    31d8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    31dc:	9404      	str	r4, [sp, #16]
    31de:	2305      	movs	r3, #5
    31e0:	9303      	str	r3, [sp, #12]
    31e2:	9402      	str	r4, [sp, #8]
    31e4:	9401      	str	r4, [sp, #4]
    31e6:	9400      	str	r4, [sp, #0]
    31e8:	4b36      	ldr	r3, [pc, #216]	; (32c4 <main+0x234>)
    31ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    31ee:	4936      	ldr	r1, [pc, #216]	; (32c8 <main+0x238>)
    31f0:	4836      	ldr	r0, [pc, #216]	; (32cc <main+0x23c>)
    31f2:	f007 fc57 	bl	aaa4 <z_impl_k_thread_create>
    thread_receive_image_tid = k_thread_create(&thread_receive_image_data, thread_receive_image_stack,
    31f6:	4b36      	ldr	r3, [pc, #216]	; (32d0 <main+0x240>)
    31f8:	6018      	str	r0, [r3, #0]
    31fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
    31fe:	9404      	str	r4, [sp, #16]
    3200:	2302      	movs	r3, #2
    3202:	9303      	str	r3, [sp, #12]
    3204:	9402      	str	r4, [sp, #8]
    3206:	9401      	str	r4, [sp, #4]
    3208:	9400      	str	r4, [sp, #0]
    320a:	4b32      	ldr	r3, [pc, #200]	; (32d4 <main+0x244>)
    320c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3210:	4931      	ldr	r1, [pc, #196]	; (32d8 <main+0x248>)
    3212:	4832      	ldr	r0, [pc, #200]	; (32dc <main+0x24c>)
    3214:	f007 fc46 	bl	aaa4 <z_impl_k_thread_create>
    thread_orientation_tid = k_thread_create(&thread_orientation_data, thread_orientation_stack,
    3218:	4b31      	ldr	r3, [pc, #196]	; (32e0 <main+0x250>)
    321a:	6018      	str	r0, [r3, #0]
    321c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    3220:	9404      	str	r4, [sp, #16]
    3222:	2303      	movs	r3, #3
    3224:	9303      	str	r3, [sp, #12]
    3226:	9402      	str	r4, [sp, #8]
    3228:	9401      	str	r4, [sp, #4]
    322a:	9400      	str	r4, [sp, #0]
    322c:	4b2d      	ldr	r3, [pc, #180]	; (32e4 <main+0x254>)
    322e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3232:	492d      	ldr	r1, [pc, #180]	; (32e8 <main+0x258>)
    3234:	482d      	ldr	r0, [pc, #180]	; (32ec <main+0x25c>)
    3236:	f007 fc35 	bl	aaa4 <z_impl_k_thread_create>
    thread_output_tid = k_thread_create(&thread_output_data, thread_output_stack,
    323a:	4b2d      	ldr	r3, [pc, #180]	; (32f0 <main+0x260>)
    323c:	6018      	str	r0, [r3, #0]
    323e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    3242:	9404      	str	r4, [sp, #16]
    3244:	2301      	movs	r3, #1
    3246:	9303      	str	r3, [sp, #12]
    3248:	9402      	str	r4, [sp, #8]
    324a:	9401      	str	r4, [sp, #4]
    324c:	9400      	str	r4, [sp, #0]
    324e:	4b29      	ldr	r3, [pc, #164]	; (32f4 <main+0x264>)
    3250:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3254:	4928      	ldr	r1, [pc, #160]	; (32f8 <main+0x268>)
    3256:	4829      	ldr	r0, [pc, #164]	; (32fc <main+0x26c>)
    3258:	f007 fc24 	bl	aaa4 <z_impl_k_thread_create>
    thread_obscount_tid = k_thread_create(&thread_obscount_data, thread_obscount_stack,
    325c:	4b28      	ldr	r3, [pc, #160]	; (3300 <main+0x270>)
    325e:	6018      	str	r0, [r3, #0]
    return;
    3260:	e745      	b.n	30ee <main+0x5e>
    3262:	bf00      	nop
    3264:	00011480 	.word	0x00011480
    3268:	2000c9a8 	.word	0x2000c9a8
    326c:	000114b4 	.word	0x000114b4
    3270:	00011618 	.word	0x00011618
    3274:	20004934 	.word	0x20004934
    3278:	00002b8d 	.word	0x00002b8d
    327c:	00011500 	.word	0x00011500
    3280:	00011488 	.word	0x00011488
    3284:	000114d0 	.word	0x000114d0
    3288:	000112ec 	.word	0x000112ec
    328c:	20000014 	.word	0x20000014
    3290:	0001152c 	.word	0x0001152c
    3294:	00011538 	.word	0x00011538
    3298:	20004930 	.word	0x20004930
    329c:	2000c964 	.word	0x2000c964
    32a0:	2000c984 	.word	0x2000c984
    32a4:	2000c934 	.word	0x2000c934
    32a8:	2000c954 	.word	0x2000c954
    32ac:	2000c974 	.word	0x2000c974
    32b0:	2000c944 	.word	0x2000c944
    32b4:	000034fd 	.word	0x000034fd
    32b8:	2000db60 	.word	0x2000db60
    32bc:	20004288 	.word	0x20004288
    32c0:	2000c994 	.word	0x2000c994
    32c4:	000033b1 	.word	0x000033b1
    32c8:	2000d740 	.word	0x2000d740
    32cc:	20004548 	.word	0x20004548
    32d0:	2000c9a4 	.word	0x2000c9a4
    32d4:	00002ed9 	.word	0x00002ed9
    32d8:	2000df80 	.word	0x2000df80
    32dc:	200043e8 	.word	0x200043e8
    32e0:	2000c99c 	.word	0x2000c99c
    32e4:	00002cd5 	.word	0x00002cd5
    32e8:	2000e3a0 	.word	0x2000e3a0
    32ec:	20004498 	.word	0x20004498
    32f0:	2000c9a0 	.word	0x2000c9a0
    32f4:	00002de1 	.word	0x00002de1
    32f8:	2000e7c0 	.word	0x2000e7c0
    32fc:	20004338 	.word	0x20004338
    3300:	2000c998 	.word	0x2000c998

00003304 <receiveImage>:
uint8_t ** receiveImage(){
    3304:	b538      	push	{r3, r4, r5, lr}
        uint8_t ** image = (uint8_t **) malloc(IMGWIDTH * sizeof(uint8_t *));
    3306:	f44f 7000 	mov.w	r0, #512	; 0x200
    330a:	f00a fb7b 	bl	da04 <malloc>
    330e:	4605      	mov	r5, r0
        for (int i = 0; i < IMGWIDTH; i++)
    3310:	2400      	movs	r4, #0
    3312:	e005      	b.n	3320 <receiveImage+0x1c>
            image[i] = (uint8_t *) malloc(IMGWIDTH * sizeof(uint8_t));
    3314:	2080      	movs	r0, #128	; 0x80
    3316:	f00a fb75 	bl	da04 <malloc>
    331a:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
        for (int i = 0; i < IMGWIDTH; i++)
    331e:	3401      	adds	r4, #1
    3320:	2c7f      	cmp	r4, #127	; 0x7f
    3322:	ddf7      	ble.n	3314 <receiveImage+0x10>
        printk("%d\n", uart_rxbuf_nchar);
    3324:	4c1b      	ldr	r4, [pc, #108]	; (3394 <receiveImage+0x90>)
    3326:	6821      	ldr	r1, [r4, #0]
    3328:	481b      	ldr	r0, [pc, #108]	; (3398 <receiveImage+0x94>)
    332a:	f00b fe71 	bl	f010 <printk>
        if(uart_rxbuf_nchar == RXBUF_SIZE){
    332e:	6823      	ldr	r3, [r4, #0]
    3330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    3334:	d01e      	beq.n	3374 <receiveImage+0x70>
        else if(uart_rxbuf_nchar > RXBUF_SIZE){
    3336:	4b17      	ldr	r3, [pc, #92]	; (3394 <receiveImage+0x90>)
    3338:	681b      	ldr	r3, [r3, #0]
    333a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    333e:	dc22      	bgt.n	3386 <receiveImage+0x82>
        free(image);
    3340:	4628      	mov	r0, r5
    3342:	f00a fb67 	bl	da14 <free>
}
    3346:	2000      	movs	r0, #0
    3348:	bd38      	pop	{r3, r4, r5, pc}
                fflush(stdout);
    334a:	4b14      	ldr	r3, [pc, #80]	; (339c <receiveImage+0x98>)
    334c:	681b      	ldr	r3, [r3, #0]
    334e:	6898      	ldr	r0, [r3, #8]
    3350:	f00a fa86 	bl	d860 <fflush>
            for(int i = 0; i < RXBUF_SIZE; i++){
    3354:	3401      	adds	r4, #1
    3356:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
    335a:	da0d      	bge.n	3378 <receiveImage+0x74>
                printk("%d ", rx_chars[i]);
    335c:	4b10      	ldr	r3, [pc, #64]	; (33a0 <receiveImage+0x9c>)
    335e:	5d19      	ldrb	r1, [r3, r4]
    3360:	4810      	ldr	r0, [pc, #64]	; (33a4 <receiveImage+0xa0>)
    3362:	f00b fe55 	bl	f010 <printk>
                if(i % IMGWIDTH == 0)
    3366:	f014 0f7f 	tst.w	r4, #127	; 0x7f
    336a:	d1ee      	bne.n	334a <receiveImage+0x46>
                    printk("\n");
    336c:	480e      	ldr	r0, [pc, #56]	; (33a8 <receiveImage+0xa4>)
    336e:	f00b fe4f 	bl	f010 <printk>
    3372:	e7ea      	b.n	334a <receiveImage+0x46>
            for(int i = 0; i < RXBUF_SIZE; i++){
    3374:	2400      	movs	r4, #0
    3376:	e7ee      	b.n	3356 <receiveImage+0x52>
            printk("\n");
    3378:	480b      	ldr	r0, [pc, #44]	; (33a8 <receiveImage+0xa4>)
    337a:	f00b fe49 	bl	f010 <printk>
            uart_rxbuf_nchar = 0;
    337e:	4b05      	ldr	r3, [pc, #20]	; (3394 <receiveImage+0x90>)
    3380:	2200      	movs	r2, #0
    3382:	601a      	str	r2, [r3, #0]
    3384:	e7dc      	b.n	3340 <receiveImage+0x3c>
            printk("received 2 images between\n");
    3386:	4809      	ldr	r0, [pc, #36]	; (33ac <receiveImage+0xa8>)
    3388:	f00b fe42 	bl	f010 <printk>
            free(image);
    338c:	4628      	mov	r0, r5
    338e:	f00a fb41 	bl	da14 <free>
            return NULL;
    3392:	e7d8      	b.n	3346 <receiveImage+0x42>
    3394:	2000c9ac 	.word	0x2000c9ac
    3398:	00011544 	.word	0x00011544
    339c:	20004104 	.word	0x20004104
    33a0:	20008934 	.word	0x20008934
    33a4:	00011548 	.word	0x00011548
    33a8:	0001128c 	.word	0x0001128c
    33ac:	0001154c 	.word	0x0001154c

000033b0 <thread_receive_image_code>:
{
    33b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33b4:	b089      	sub	sp, #36	; 0x24
    printk("Thread receive_image init (periodic)\n");
    33b6:	484e      	ldr	r0, [pc, #312]	; (34f0 <thread_receive_image_code+0x140>)
    33b8:	f00b fe2a 	bl	f010 <printk>
	return z_impl_k_uptime_ticks();
    33bc:	f00d f960 	bl	10680 <z_impl_k_uptime_ticks>
    33c0:	014a      	lsls	r2, r1, #5
    33c2:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    33c6:	0143      	lsls	r3, r0, #5
    33c8:	1a1b      	subs	r3, r3, r0
    33ca:	eb62 0201 	sbc.w	r2, r2, r1
    33ce:	0092      	lsls	r2, r2, #2
    33d0:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    33d4:	009b      	lsls	r3, r3, #2
    33d6:	eb13 0800 	adds.w	r8, r3, r0
    33da:	eb42 0301 	adc.w	r3, r2, r1
    33de:	00db      	lsls	r3, r3, #3
    33e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
    33e4:	f3c8 3810 	ubfx	r8, r8, #12, #17
    33e8:	ea48 4843 	orr.w	r8, r8, r3, lsl #17
    33ec:	0bdb      	lsrs	r3, r3, #15
    release_time = k_uptime_get() + SAMP_PERIOD_MS;
    33ee:	f518 787a 	adds.w	r8, r8, #1000	; 0x3e8
    33f2:	f143 0900 	adc.w	r9, r3, #0
    int64_t release_time=0, fin_time=0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    33f6:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
    33fa:	f8cd b018 	str.w	fp, [sp, #24]
    33fe:	2300      	movs	r3, #0
    3400:	461f      	mov	r7, r3
    3402:	9307      	str	r3, [sp, #28]
    3404:	469a      	mov	sl, r3
    3406:	461e      	mov	r6, r3
    3408:	e02d      	b.n	3466 <thread_receive_image_code+0xb6>
            t_min = fin_time - t_prev;
    340a:	46b3      	mov	fp, r6
    340c:	46ba      	mov	sl, r7
    340e:	f00d f937 	bl	10680 <z_impl_k_uptime_ticks>
    3412:	4607      	mov	r7, r0
    3414:	014e      	lsls	r6, r1, #5
    3416:	ea46 66d0 	orr.w	r6, r6, r0, lsr #27
    341a:	0140      	lsls	r0, r0, #5
    341c:	1bc0      	subs	r0, r0, r7
    341e:	eb66 0201 	sbc.w	r2, r6, r1
    3422:	0093      	lsls	r3, r2, #2
    3424:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
    3428:	0082      	lsls	r2, r0, #2
    342a:	19d2      	adds	r2, r2, r7
    342c:	eb43 0301 	adc.w	r3, r3, r1
    3430:	00db      	lsls	r3, r3, #3
    3432:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    3436:	f3c2 3210 	ubfx	r2, r2, #12, #17
        printk("Task %s arrived at %lld inter-arrival time (us): min: %lld / max: %lld \n\r", "rcv img", (long long)k_uptime_get(), t_min, t_max);
    343a:	9906      	ldr	r1, [sp, #24]
    343c:	9102      	str	r1, [sp, #8]
    343e:	9907      	ldr	r1, [sp, #28]
    3440:	9103      	str	r1, [sp, #12]
    3442:	f8cd b000 	str.w	fp, [sp]
    3446:	f8cd a004 	str.w	sl, [sp, #4]
    344a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    344e:	0bdb      	lsrs	r3, r3, #15
    3450:	4928      	ldr	r1, [pc, #160]	; (34f4 <thread_receive_image_code+0x144>)
    3452:	4829      	ldr	r0, [pc, #164]	; (34f8 <thread_receive_image_code+0x148>)
    3454:	f00b fddc 	bl	f010 <printk>
        if (fin_time < release_time)
    3458:	9b05      	ldr	r3, [sp, #20]
    345a:	4543      	cmp	r3, r8
    345c:	eb75 0309 	sbcs.w	r3, r5, r9
    3460:	db2b      	blt.n	34ba <thread_receive_image_code+0x10a>
{
    3462:	9e05      	ldr	r6, [sp, #20]
    3464:	462f      	mov	r7, r5
        receiveImage();
    3466:	f7ff ff4d 	bl	3304 <receiveImage>
    346a:	f00d f909 	bl	10680 <z_impl_k_uptime_ticks>
    346e:	014b      	lsls	r3, r1, #5
    3470:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    3474:	0144      	lsls	r4, r0, #5
    3476:	1a24      	subs	r4, r4, r0
    3478:	eb63 0301 	sbc.w	r3, r3, r1
    347c:	009d      	lsls	r5, r3, #2
    347e:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
    3482:	00a4      	lsls	r4, r4, #2
    3484:	1824      	adds	r4, r4, r0
    3486:	eb45 0501 	adc.w	r5, r5, r1
    348a:	00ed      	lsls	r5, r5, #3
    348c:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
    3490:	f3c4 3410 	ubfx	r4, r4, #12, #17
    3494:	ea44 4445 	orr.w	r4, r4, r5, lsl #17
    3498:	0bed      	lsrs	r5, r5, #15
    349a:	9405      	str	r4, [sp, #20]
        if (fin_time - t_prev < t_min)
    349c:	1ba6      	subs	r6, r4, r6
    349e:	eb65 0707 	sbc.w	r7, r5, r7
    34a2:	455e      	cmp	r6, fp
    34a4:	eb77 030a 	sbcs.w	r3, r7, sl
    34a8:	dbaf      	blt.n	340a <thread_receive_image_code+0x5a>
        else if (fin_time - t_prev > t_max)
    34aa:	9b06      	ldr	r3, [sp, #24]
    34ac:	42b3      	cmp	r3, r6
    34ae:	9b07      	ldr	r3, [sp, #28]
    34b0:	41bb      	sbcs	r3, r7
    34b2:	daac      	bge.n	340e <thread_receive_image_code+0x5e>
            t_max = fin_time - t_prev;
    34b4:	9606      	str	r6, [sp, #24]
    34b6:	9707      	str	r7, [sp, #28]
    34b8:	e7a9      	b.n	340e <thread_receive_image_code+0x5e>
            k_msleep(release_time - fin_time);
    34ba:	eba8 0004 	sub.w	r0, r8, r4
	return k_sleep(Z_TIMEOUT_MS(ms));
    34be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    34c2:	17c1      	asrs	r1, r0, #31
    34c4:	03c9      	lsls	r1, r1, #15
    34c6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    34ca:	03c0      	lsls	r0, r0, #15
    34cc:	f240 34e7 	movw	r4, #999	; 0x3e7
    34d0:	1900      	adds	r0, r0, r4
    34d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    34d6:	f04f 0300 	mov.w	r3, #0
    34da:	f141 0100 	adc.w	r1, r1, #0
    34de:	f7fd fa7d 	bl	9dc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    34e2:	f009 f8ab 	bl	c63c <z_impl_k_sleep>
            release_time += SAMP_PERIOD_MS;
    34e6:	f518 787a 	adds.w	r8, r8, #1000	; 0x3e8
    34ea:	f149 0900 	adc.w	r9, r9, #0
    34ee:	e7b8      	b.n	3462 <thread_receive_image_code+0xb2>
    34f0:	00011568 	.word	0x00011568
    34f4:	00011590 	.word	0x00011590
    34f8:	00011598 	.word	0x00011598

000034fc <thread_near_obstacle_code>:
{
    34fc:	b570      	push	{r4, r5, r6, lr}
    printk("Thread near_obstacle init\n");
    34fe:	481d      	ldr	r0, [pc, #116]	; (3574 <thread_near_obstacle_code+0x78>)
    3500:	f00b fd86 	bl	f010 <printk>
	return z_impl_k_uptime_ticks();
    3504:	f00d f8bc 	bl	10680 <z_impl_k_uptime_ticks>
    3508:	e019      	b.n	353e <thread_near_obstacle_code+0x42>
            image[i] = calloc(IMGWIDTH, sizeof(uint8_t));
    350a:	2101      	movs	r1, #1
    350c:	2080      	movs	r0, #128	; 0x80
    350e:	f00a f8a9 	bl	d664 <calloc>
    3512:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
        for (int i = 0; i < IMGWIDTH; i++)
    3516:	3401      	adds	r4, #1
    3518:	2c7f      	cmp	r4, #127	; 0x7f
    351a:	ddf6      	ble.n	350a <thread_near_obstacle_code+0xe>
        castImage(cab_img,image);
    351c:	4629      	mov	r1, r5
    351e:	4630      	mov	r0, r6
    3520:	f00b fc91 	bl	ee46 <castImage>
        printk("cast done\n");
    3524:	4814      	ldr	r0, [pc, #80]	; (3578 <thread_near_obstacle_code+0x7c>)
    3526:	f00b fd73 	bl	f010 <printk>
        fflush(stdout);
    352a:	4b14      	ldr	r3, [pc, #80]	; (357c <thread_near_obstacle_code+0x80>)
    352c:	681b      	ldr	r3, [r3, #0]
    352e:	6898      	ldr	r0, [r3, #8]
    3530:	f00a f996 	bl	d860 <fflush>
        unget(cab_img, image_cab);
    3534:	4b12      	ldr	r3, [pc, #72]	; (3580 <thread_near_obstacle_code+0x84>)
    3536:	6819      	ldr	r1, [r3, #0]
    3538:	4630      	mov	r0, r6
    353a:	f00b fcfb 	bl	ef34 <unget>
	return z_impl_k_sem_take(sem, timeout);
    353e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3546:	480f      	ldr	r0, [pc, #60]	; (3584 <thread_near_obstacle_code+0x88>)
    3548:	f007 fddc 	bl	b104 <z_impl_k_sem_take>
        void* cab_img = get_mes(image_cab);
    354c:	4b0c      	ldr	r3, [pc, #48]	; (3580 <thread_near_obstacle_code+0x84>)
    354e:	6818      	ldr	r0, [r3, #0]
    3550:	f00b fccc 	bl	eeec <get_mes>
    3554:	4606      	mov	r6, r0
        printk("get done\n");
    3556:	480c      	ldr	r0, [pc, #48]	; (3588 <thread_near_obstacle_code+0x8c>)
    3558:	f00b fd5a 	bl	f010 <printk>
        fflush(stdout);
    355c:	4b07      	ldr	r3, [pc, #28]	; (357c <thread_near_obstacle_code+0x80>)
    355e:	681b      	ldr	r3, [r3, #0]
    3560:	6898      	ldr	r0, [r3, #8]
    3562:	f00a f97d 	bl	d860 <fflush>
        uint8_t ** image = calloc(IMGWIDTH, sizeof(uint8_t*));
    3566:	2104      	movs	r1, #4
    3568:	2080      	movs	r0, #128	; 0x80
    356a:	f00a f87b 	bl	d664 <calloc>
    356e:	4605      	mov	r5, r0
        for (int i = 0; i < IMGWIDTH; i++)
    3570:	2400      	movs	r4, #0
    3572:	e7d1      	b.n	3518 <thread_near_obstacle_code+0x1c>
    3574:	000115e4 	.word	0x000115e4
    3578:	0001160c 	.word	0x0001160c
    357c:	20004104 	.word	0x20004104
    3580:	20004930 	.word	0x20004930
    3584:	2000c964 	.word	0x2000c964
    3588:	00011600 	.word	0x00011600

0000358c <open_cab>:
    uint8_t *buffersTaken;
};

// creates a new cab
cab *open_cab(char *name, int num, size_t dim, void *first)
{
    358c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3590:	4604      	mov	r4, r0
    3592:	460e      	mov	r6, r1
    3594:	4690      	mov	r8, r2
    3596:	4699      	mov	r9, r3
    cab *new_cab = calloc(1, sizeof(cab));
    3598:	2118      	movs	r1, #24
    359a:	2001      	movs	r0, #1
    359c:	f00a f862 	bl	d664 <calloc>
    35a0:	4605      	mov	r5, r0
    new_cab->name = name;
    35a2:	6044      	str	r4, [r0, #4]
    new_cab->num = num;
    35a4:	6086      	str	r6, [r0, #8]
    new_cab->dim = dim;
    35a6:	f8c0 800c 	str.w	r8, [r0, #12]
    new_cab->op_Sem = (struct k_sem*)calloc(1, sizeof(struct k_sem));
    35aa:	2110      	movs	r1, #16
    35ac:	2001      	movs	r0, #1
    35ae:	f00a f859 	bl	d664 <calloc>
    35b2:	6028      	str	r0, [r5, #0]
    printk("sem init");
    35b4:	481b      	ldr	r0, [pc, #108]	; (3624 <open_cab+0x98>)
    35b6:	f00b fd2b 	bl	f010 <printk>
    k_sem_init(new_cab->op_Sem, 0, 1);
    35ba:	6828      	ldr	r0, [r5, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    35bc:	2201      	movs	r2, #1
    35be:	2100      	movs	r1, #0
    35c0:	f00d f808 	bl	105d4 <z_impl_k_sem_init>
    printk("sem init done");
    35c4:	4818      	ldr	r0, [pc, #96]	; (3628 <open_cab+0x9c>)
    35c6:	f00b fd23 	bl	f010 <printk>
    // allocate the buffersTaken array
    new_cab->buffersTaken = (uint8_t *)calloc(num, sizeof(uint8_t));
    35ca:	2101      	movs	r1, #1
    35cc:	4630      	mov	r0, r6
    35ce:	f00a f849 	bl	d664 <calloc>
    35d2:	6168      	str	r0, [r5, #20]
    for (size_t i = 0; i < num; i++)
    35d4:	2400      	movs	r4, #0
    35d6:	e003      	b.n	35e0 <open_cab+0x54>
        new_cab->buffersTaken[i] = 0;
    35d8:	696b      	ldr	r3, [r5, #20]
    35da:	2200      	movs	r2, #0
    35dc:	551a      	strb	r2, [r3, r4]
    for (size_t i = 0; i < num; i++)
    35de:	3401      	adds	r4, #1
    35e0:	42a6      	cmp	r6, r4
    35e2:	d8f9      	bhi.n	35d8 <open_cab+0x4c>
    printk("allocating buffers");
    35e4:	4811      	ldr	r0, [pc, #68]	; (362c <open_cab+0xa0>)
    35e6:	f00b fd13 	bl	f010 <printk>

    // allocate all buffers
    new_cab->buffers = (void **)calloc(num, sizeof(void *));
    35ea:	2104      	movs	r1, #4
    35ec:	4630      	mov	r0, r6
    35ee:	f00a f839 	bl	d664 <calloc>
    35f2:	6128      	str	r0, [r5, #16]
    for (size_t i = 0; i < num; i++)
    35f4:	2400      	movs	r4, #0
    35f6:	e007      	b.n	3608 <open_cab+0x7c>
    {
        new_cab->buffers[i] = (void *)calloc(1, dim);
    35f8:	692f      	ldr	r7, [r5, #16]
    35fa:	4641      	mov	r1, r8
    35fc:	2001      	movs	r0, #1
    35fe:	f00a f831 	bl	d664 <calloc>
    3602:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
    for (size_t i = 0; i < num; i++)
    3606:	3401      	adds	r4, #1
    3608:	42a6      	cmp	r6, r4
    360a:	d8f5      	bhi.n	35f8 <open_cab+0x6c>
    }
    printk("copying first");
    360c:	4808      	ldr	r0, [pc, #32]	; (3630 <open_cab+0xa4>)
    360e:	f00b fcff 	bl	f010 <printk>

    new_cab->buffers[0] = first;
    3612:	692b      	ldr	r3, [r5, #16]
    3614:	f8c3 9000 	str.w	r9, [r3]
    new_cab->buffersTaken[0] = 1; // The first will always be taken
    3618:	696b      	ldr	r3, [r5, #20]
    361a:	2201      	movs	r2, #1
    361c:	701a      	strb	r2, [r3, #0]
    return new_cab;
}
    361e:	4628      	mov	r0, r5
    3620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3624:	00011620 	.word	0x00011620
    3628:	0001162c 	.word	0x0001162c
    362c:	0001163c 	.word	0x0001163c
    3630:	00011650 	.word	0x00011650

00003634 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    3634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3638:	b08d      	sub	sp, #52	; 0x34
    363a:	9205      	str	r2, [sp, #20]
    363c:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    363e:	4613      	mov	r3, r2
    3640:	f002 0204 	and.w	r2, r2, #4
    3644:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    3646:	f3c3 02c2 	ubfx	r2, r3, #3, #3

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    364a:	f010 0303 	ands.w	r3, r0, #3
    364e:	9302      	str	r3, [sp, #8]
    3650:	f040 8293 	bne.w	3b7a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe2>
    3654:	4607      	mov	r7, r0
    3656:	468a      	mov	sl, r1
    3658:	3201      	adds	r2, #1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    365a:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    365c:	2800      	cmp	r0, #0
    365e:	d041      	beq.n	36e4 <cbvprintf_package+0xb0>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    3660:	b127      	cbz	r7, 366c <cbvprintf_package+0x38>
    3662:	1be3      	subs	r3, r4, r7
    3664:	3304      	adds	r3, #4
    3666:	4553      	cmp	r3, sl
    3668:	f200 828a 	bhi.w	3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
    366c:	9b03      	ldr	r3, [sp, #12]
    366e:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    3670:	f8dd b008 	ldr.w	fp, [sp, #8]
    3674:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    3678:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
    367c:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
    367e:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
    3682:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    3684:	b10f      	cbz	r7, 368a <cbvprintf_package+0x56>
				*(const char **)buf = s;
    3686:	9b03      	ldr	r3, [sp, #12]
    3688:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    368a:	1e53      	subs	r3, r2, #1
    368c:	9307      	str	r3, [sp, #28]
    368e:	2a00      	cmp	r2, #0
    3690:	f340 80b7 	ble.w	3802 <cbvprintf_package+0x1ce>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
    3694:	9b05      	ldr	r3, [sp, #20]
    3696:	f013 0202 	ands.w	r2, r3, #2
    369a:	d021      	beq.n	36e0 <cbvprintf_package+0xac>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    369c:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    369e:	1be1      	subs	r1, r4, r7
    36a0:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    36a2:	b11a      	cbz	r2, 36ac <cbvprintf_package+0x78>
    36a4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    36a8:	f080 80bf 	bcs.w	382a <cbvprintf_package+0x1f6>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    36ac:	f1bb 0f0f 	cmp.w	fp, #15
    36b0:	f200 80ce 	bhi.w	3850 <cbvprintf_package+0x21c>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
    36b4:	2f00      	cmp	r7, #0
    36b6:	f000 80e2 	beq.w	387e <cbvprintf_package+0x24a>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
    36ba:	b2db      	uxtb	r3, r3
    36bc:	aa0c      	add	r2, sp, #48	; 0x30
    36be:	445a      	add	r2, fp
    36c0:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
    36c4:	2800      	cmp	r0, #0
    36c6:	f000 80d6 	beq.w	3876 <cbvprintf_package+0x242>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    36ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
    36ce:	aa0c      	add	r2, sp, #48	; 0x30
    36d0:	445a      	add	r2, fp
    36d2:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
    36d6:	9b04      	ldr	r3, [sp, #16]
    36d8:	3301      	adds	r3, #1
    36da:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
    36dc:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
    36e0:	3404      	adds	r4, #4
    36e2:	e0f6      	b.n	38d2 <cbvprintf_package+0x29e>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    36e4:	f001 0a07 	and.w	sl, r1, #7
    36e8:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    36ea:	f1ca 0a08 	rsb	sl, sl, #8
    36ee:	e7b7      	b.n	3660 <cbvprintf_package+0x2c>
			if (*fmt == '%') {
    36f0:	2b25      	cmp	r3, #37	; 0x25
    36f2:	f040 80ed 	bne.w	38d0 <cbvprintf_package+0x29c>
				parsing = true;
    36f6:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
    36f8:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
    36fc:	46c1      	mov	r9, r8
			continue;
    36fe:	e0e7      	b.n	38d0 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(intmax_t);
    3700:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
    3704:	46c1      	mov	r9, r8
			continue;
    3706:	e0e3      	b.n	38d0 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(size_t);
    3708:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
    370c:	46c1      	mov	r9, r8
			continue;
    370e:	e0df      	b.n	38d0 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(ptrdiff_t);
    3710:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
    3714:	46c1      	mov	r9, r8
			continue;
    3716:	e0db      	b.n	38d0 <cbvprintf_package+0x29c>
			if (fmt[-1] == 'l') {
    3718:	782a      	ldrb	r2, [r5, #0]
    371a:	2a6c      	cmp	r2, #108	; 0x6c
    371c:	d026      	beq.n	376c <cbvprintf_package+0x138>
			parsing = false;
    371e:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
    3720:	eb04 0208 	add.w	r2, r4, r8
    3724:	3a01      	subs	r2, #1
    3726:	f1c8 0100 	rsb	r1, r8, #0
    372a:	400a      	ands	r2, r1
    372c:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    372e:	b127      	cbz	r7, 373a <cbvprintf_package+0x106>
    3730:	1bd1      	subs	r1, r2, r7
    3732:	4449      	add	r1, r9
    3734:	458a      	cmp	sl, r1
    3736:	f0c0 8226 	bcc.w	3b86 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xee>
		if (*fmt == 's') {
    373a:	2b73      	cmp	r3, #115	; 0x73
    373c:	d059      	beq.n	37f2 <cbvprintf_package+0x1be>
		} else if (size == sizeof(int)) {
    373e:	f1b9 0f04 	cmp.w	r9, #4
    3742:	f000 80a8 	beq.w	3896 <cbvprintf_package+0x262>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
    3746:	f1b9 0f08 	cmp.w	r9, #8
    374a:	f040 80ac 	bne.w	38a6 <cbvprintf_package+0x272>
			long long v = va_arg(ap, long long);
    374e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3750:	3307      	adds	r3, #7
    3752:	f023 0307 	bic.w	r3, r3, #7
    3756:	f103 0108 	add.w	r1, r3, #8
    375a:	9116      	str	r1, [sp, #88]	; 0x58
    375c:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
    3760:	b10f      	cbz	r7, 3766 <cbvprintf_package+0x132>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
    3762:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
    3766:	f102 0408 	add.w	r4, r2, #8
    376a:	e0b1      	b.n	38d0 <cbvprintf_package+0x29c>
				if (fmt[-2] == 'l') {
    376c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
    3770:	2a6c      	cmp	r2, #108	; 0x6c
    3772:	d004      	beq.n	377e <cbvprintf_package+0x14a>
			parsing = false;
    3774:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
    3776:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
    377a:	46c1      	mov	r9, r8
    377c:	e7d0      	b.n	3720 <cbvprintf_package+0xec>
			parsing = false;
    377e:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
    3780:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
    3784:	46c1      	mov	r9, r8
    3786:	e7cb      	b.n	3720 <cbvprintf_package+0xec>
			if (fmt[-1] == 'L') {
    3788:	782b      	ldrb	r3, [r5, #0]
    378a:	2b4c      	cmp	r3, #76	; 0x4c
    378c:	d01c      	beq.n	37c8 <cbvprintf_package+0x194>
				v.d = va_arg(ap, double);
    378e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3790:	3307      	adds	r3, #7
    3792:	f023 0307 	bic.w	r3, r3, #7
    3796:	f103 0208 	add.w	r2, r3, #8
    379a:	9216      	str	r2, [sp, #88]	; 0x58
    379c:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
    37a0:	1de2      	adds	r2, r4, #7
    37a2:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
    37a6:	b147      	cbz	r7, 37ba <cbvprintf_package+0x186>
				if (BUF_OFFSET + size > len) {
    37a8:	1bd3      	subs	r3, r2, r7
    37aa:	3308      	adds	r3, #8
    37ac:	4553      	cmp	r3, sl
    37ae:	d815      	bhi.n	37dc <cbvprintf_package+0x1a8>
				} else if (fmt[-1] == 'L') {
    37b0:	782b      	ldrb	r3, [r5, #0]
    37b2:	2b4c      	cmp	r3, #76	; 0x4c
    37b4:	d015      	beq.n	37e2 <cbvprintf_package+0x1ae>
					*(double *)buf = v.d;
    37b6:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
    37ba:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
    37be:	2600      	movs	r6, #0
			continue;
    37c0:	f04f 0808 	mov.w	r8, #8
    37c4:	46c1      	mov	r9, r8
    37c6:	e083      	b.n	38d0 <cbvprintf_package+0x29c>
				v.ld = va_arg(ap, long double);
    37c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    37ca:	3307      	adds	r3, #7
    37cc:	f023 0307 	bic.w	r3, r3, #7
    37d0:	f103 0208 	add.w	r2, r3, #8
    37d4:	9216      	str	r2, [sp, #88]	; 0x58
    37d6:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
    37da:	e7e1      	b.n	37a0 <cbvprintf_package+0x16c>
					return -ENOSPC;
    37dc:	f06f 001b 	mvn.w	r0, #27
    37e0:	e1c8      	b.n	3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
					*(long double *)buf = v.ld;
    37e2:	e9c2 0100 	strd	r0, r1, [r2]
    37e6:	e7e8      	b.n	37ba <cbvprintf_package+0x186>
			parsing = false;
    37e8:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
    37ea:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
    37ee:	46c1      	mov	r9, r8
    37f0:	e796      	b.n	3720 <cbvprintf_package+0xec>
			s = va_arg(ap, char *);
    37f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    37f4:	1d1a      	adds	r2, r3, #4
    37f6:	9216      	str	r2, [sp, #88]	; 0x58
    37f8:	681b      	ldr	r3, [r3, #0]
    37fa:	9303      	str	r3, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    37fc:	9a07      	ldr	r2, [sp, #28]
	while (*++fmt != '\0') {
    37fe:	4665      	mov	r5, ip
    3800:	e740      	b.n	3684 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    3802:	4bbb      	ldr	r3, [pc, #748]	; (3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>)
    3804:	9a03      	ldr	r2, [sp, #12]
    3806:	429a      	cmp	r2, r3
    3808:	d304      	bcc.n	3814 <cbvprintf_package+0x1e0>
    380a:	4bba      	ldr	r3, [pc, #744]	; (3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>)
    380c:	429a      	cmp	r2, r3
    380e:	d30a      	bcc.n	3826 <cbvprintf_package+0x1f2>
    3810:	2300      	movs	r3, #0
    3812:	e000      	b.n	3816 <cbvprintf_package+0x1e2>
    3814:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    3816:	2b00      	cmp	r3, #0
    3818:	f47f af3c 	bne.w	3694 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    381c:	9b05      	ldr	r3, [sp, #20]
    381e:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    3822:	2000      	movs	r0, #0
    3824:	e73b      	b.n	369e <cbvprintf_package+0x6a>
    3826:	2301      	movs	r3, #1
    3828:	e7f5      	b.n	3816 <cbvprintf_package+0x1e2>
					__ASSERT(false, "String with too many arguments");
    382a:	4cb3      	ldr	r4, [pc, #716]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    382c:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    3830:	4622      	mov	r2, r4
    3832:	49b2      	ldr	r1, [pc, #712]	; (3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>)
    3834:	48b2      	ldr	r0, [pc, #712]	; (3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>)
    3836:	f00b fcf4 	bl	f222 <assert_print>
    383a:	48b2      	ldr	r0, [pc, #712]	; (3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>)
    383c:	f00b fcf1 	bl	f222 <assert_print>
    3840:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    3844:	4620      	mov	r0, r4
    3846:	f00b fce5 	bl	f214 <assert_post_action>
					return -EINVAL;
    384a:	f06f 0015 	mvn.w	r0, #21
    384e:	e191      	b.n	3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
					__ASSERT(false, "str_ptr_pos[] too small");
    3850:	4ca9      	ldr	r4, [pc, #676]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3852:	f240 13f5 	movw	r3, #501	; 0x1f5
    3856:	4622      	mov	r2, r4
    3858:	49a8      	ldr	r1, [pc, #672]	; (3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>)
    385a:	48a9      	ldr	r0, [pc, #676]	; (3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>)
    385c:	f00b fce1 	bl	f222 <assert_print>
    3860:	48a9      	ldr	r0, [pc, #676]	; (3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>)
    3862:	f00b fcde 	bl	f222 <assert_print>
    3866:	f240 11f5 	movw	r1, #501	; 0x1f5
    386a:	4620      	mov	r0, r4
    386c:	f00b fcd2 	bl	f214 <assert_post_action>
					return -EINVAL;
    3870:	f06f 0015 	mvn.w	r0, #21
    3874:	e17e      	b.n	3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
						s_rw_cnt++;
    3876:	9b06      	ldr	r3, [sp, #24]
    3878:	3301      	adds	r3, #1
    387a:	9306      	str	r3, [sp, #24]
    387c:	e72e      	b.n	36dc <cbvprintf_package+0xa8>
				} else if (is_ro || rws_pos_en) {
    387e:	b908      	cbnz	r0, 3884 <cbvprintf_package+0x250>
    3880:	9b01      	ldr	r3, [sp, #4]
    3882:	b113      	cbz	r3, 388a <cbvprintf_package+0x256>
					len += 1;
    3884:	f10a 0a01 	add.w	sl, sl, #1
    3888:	e728      	b.n	36dc <cbvprintf_package+0xa8>
					len += strlen(s) + 1 + 1;
    388a:	9803      	ldr	r0, [sp, #12]
    388c:	f7fd fae3 	bl	e56 <strlen>
    3890:	1c83      	adds	r3, r0, #2
    3892:	449a      	add	sl, r3
    3894:	e722      	b.n	36dc <cbvprintf_package+0xa8>
			int v = va_arg(ap, int);
    3896:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3898:	1d19      	adds	r1, r3, #4
    389a:	9116      	str	r1, [sp, #88]	; 0x58
    389c:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
    389e:	b107      	cbz	r7, 38a2 <cbvprintf_package+0x26e>
				*(int *)buf = v;
    38a0:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
    38a2:	1d14      	adds	r4, r2, #4
    38a4:	e014      	b.n	38d0 <cbvprintf_package+0x29c>
		} else {
			__ASSERT(false, "unexpected size %u", size);
    38a6:	4c94      	ldr	r4, [pc, #592]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    38a8:	f240 2331 	movw	r3, #561	; 0x231
    38ac:	4622      	mov	r2, r4
    38ae:	4993      	ldr	r1, [pc, #588]	; (3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>)
    38b0:	4893      	ldr	r0, [pc, #588]	; (3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>)
    38b2:	f00b fcb6 	bl	f222 <assert_print>
    38b6:	4649      	mov	r1, r9
    38b8:	4894      	ldr	r0, [pc, #592]	; (3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>)
    38ba:	f00b fcb2 	bl	f222 <assert_print>
    38be:	f240 2131 	movw	r1, #561	; 0x231
    38c2:	4620      	mov	r0, r4
    38c4:	f00b fca6 	bl	f214 <assert_post_action>
			return -EINVAL;
    38c8:	f06f 0015 	mvn.w	r0, #21
    38cc:	e152      	b.n	3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
		switch (*fmt) {
    38ce:	2600      	movs	r6, #0
    38d0:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
    38d2:	f105 0c01 	add.w	ip, r5, #1
    38d6:	786b      	ldrb	r3, [r5, #1]
    38d8:	2b00      	cmp	r3, #0
    38da:	f000 80c1 	beq.w	3a60 <cbvprintf_package+0x42c>
		if (!parsing) {
    38de:	2e00      	cmp	r6, #0
    38e0:	f43f af06 	beq.w	36f0 <cbvprintf_package+0xbc>
		switch (*fmt) {
    38e4:	f1a3 0120 	sub.w	r1, r3, #32
    38e8:	295a      	cmp	r1, #90	; 0x5a
    38ea:	d8f0      	bhi.n	38ce <cbvprintf_package+0x29a>
    38ec:	a201      	add	r2, pc, #4	; (adr r2, 38f4 <cbvprintf_package+0x2c0>)
    38ee:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
    38f2:	bf00      	nop
    38f4:	000038d1 	.word	0x000038d1
    38f8:	000038cf 	.word	0x000038cf
    38fc:	000038cf 	.word	0x000038cf
    3900:	000038d1 	.word	0x000038d1
    3904:	000038cf 	.word	0x000038cf
    3908:	000038cf 	.word	0x000038cf
    390c:	000038cf 	.word	0x000038cf
    3910:	000038cf 	.word	0x000038cf
    3914:	000038cf 	.word	0x000038cf
    3918:	000038cf 	.word	0x000038cf
    391c:	00003721 	.word	0x00003721
    3920:	000038d1 	.word	0x000038d1
    3924:	000038cf 	.word	0x000038cf
    3928:	000038d1 	.word	0x000038d1
    392c:	000038d1 	.word	0x000038d1
    3930:	000038cf 	.word	0x000038cf
    3934:	000038d1 	.word	0x000038d1
    3938:	000038d1 	.word	0x000038d1
    393c:	000038d1 	.word	0x000038d1
    3940:	000038d1 	.word	0x000038d1
    3944:	000038d1 	.word	0x000038d1
    3948:	000038d1 	.word	0x000038d1
    394c:	000038d1 	.word	0x000038d1
    3950:	000038d1 	.word	0x000038d1
    3954:	000038d1 	.word	0x000038d1
    3958:	000038d1 	.word	0x000038d1
    395c:	000038cf 	.word	0x000038cf
    3960:	000038cf 	.word	0x000038cf
    3964:	000038cf 	.word	0x000038cf
    3968:	000038cf 	.word	0x000038cf
    396c:	000038cf 	.word	0x000038cf
    3970:	000038cf 	.word	0x000038cf
    3974:	000038cf 	.word	0x000038cf
    3978:	00003789 	.word	0x00003789
    397c:	000038cf 	.word	0x000038cf
    3980:	000038cf 	.word	0x000038cf
    3984:	000038cf 	.word	0x000038cf
    3988:	00003789 	.word	0x00003789
    398c:	00003789 	.word	0x00003789
    3990:	00003789 	.word	0x00003789
    3994:	000038cf 	.word	0x000038cf
    3998:	000038cf 	.word	0x000038cf
    399c:	000038cf 	.word	0x000038cf
    39a0:	000038cf 	.word	0x000038cf
    39a4:	000038d1 	.word	0x000038d1
    39a8:	000038cf 	.word	0x000038cf
    39ac:	000038cf 	.word	0x000038cf
    39b0:	000038cf 	.word	0x000038cf
    39b4:	000038cf 	.word	0x000038cf
    39b8:	000038cf 	.word	0x000038cf
    39bc:	000038cf 	.word	0x000038cf
    39c0:	000038cf 	.word	0x000038cf
    39c4:	000038cf 	.word	0x000038cf
    39c8:	000038cf 	.word	0x000038cf
    39cc:	000038cf 	.word	0x000038cf
    39d0:	000038cf 	.word	0x000038cf
    39d4:	00003719 	.word	0x00003719
    39d8:	000038cf 	.word	0x000038cf
    39dc:	000038cf 	.word	0x000038cf
    39e0:	000038cf 	.word	0x000038cf
    39e4:	000038cf 	.word	0x000038cf
    39e8:	000038cf 	.word	0x000038cf
    39ec:	000038cf 	.word	0x000038cf
    39f0:	000038cf 	.word	0x000038cf
    39f4:	000038cf 	.word	0x000038cf
    39f8:	00003789 	.word	0x00003789
    39fc:	000038cf 	.word	0x000038cf
    3a00:	00003719 	.word	0x00003719
    3a04:	00003719 	.word	0x00003719
    3a08:	00003789 	.word	0x00003789
    3a0c:	00003789 	.word	0x00003789
    3a10:	00003789 	.word	0x00003789
    3a14:	000038d1 	.word	0x000038d1
    3a18:	00003719 	.word	0x00003719
    3a1c:	00003701 	.word	0x00003701
    3a20:	000038cf 	.word	0x000038cf
    3a24:	000038d1 	.word	0x000038d1
    3a28:	000038cf 	.word	0x000038cf
    3a2c:	000037e9 	.word	0x000037e9
    3a30:	00003719 	.word	0x00003719
    3a34:	000037e9 	.word	0x000037e9
    3a38:	000038cf 	.word	0x000038cf
    3a3c:	000038cf 	.word	0x000038cf
    3a40:	000037e9 	.word	0x000037e9
    3a44:	00003711 	.word	0x00003711
    3a48:	00003719 	.word	0x00003719
    3a4c:	000038cf 	.word	0x000038cf
    3a50:	000038cf 	.word	0x000038cf
    3a54:	00003719 	.word	0x00003719
    3a58:	000038cf 	.word	0x000038cf
    3a5c:	00003709 	.word	0x00003709
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
    3a60:	1be3      	subs	r3, r4, r7
    3a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3a66:	d211      	bcs.n	3a8c <cbvprintf_package+0x458>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
    3a68:	b31f      	cbz	r7, 3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
    3a6a:	2200      	movs	r2, #0
    3a6c:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	buf0[0] = BUF_OFFSET / sizeof(int);
    3a6e:	089b      	lsrs	r3, r3, #2
    3a70:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
    3a72:	9b01      	ldr	r3, [sp, #4]
    3a74:	b30b      	cbz	r3, 3aba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22>
		/* Strings are appended, update location counter. */
		buf0[1] = 0;
		buf0[3] = s_rw_cnt;
    3a76:	9b06      	ldr	r3, [sp, #24]
    3a78:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		buf0[1] = s_rw_cnt;
		buf0[3] = 0;
	}

	buf0[2] = s_ro_cnt;
    3a7a:	9b04      	ldr	r3, [sp, #16]
    3a7c:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
    3a7e:	bbab      	cbnz	r3, 3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
    3a80:	9d02      	ldr	r5, [sp, #8]
    3a82:	f8dd 9010 	ldr.w	r9, [sp, #16]
    3a86:	f8dd 800c 	ldr.w	r8, [sp, #12]
    3a8a:	e058      	b.n	3b3e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa6>
		__ASSERT(false, "too many format args");
    3a8c:	4c1a      	ldr	r4, [pc, #104]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3a8e:	f240 233d 	movw	r3, #573	; 0x23d
    3a92:	4622      	mov	r2, r4
    3a94:	4919      	ldr	r1, [pc, #100]	; (3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>)
    3a96:	481a      	ldr	r0, [pc, #104]	; (3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>)
    3a98:	f00b fbc3 	bl	f222 <assert_print>
    3a9c:	481c      	ldr	r0, [pc, #112]	; (3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>)
    3a9e:	f00b fbc0 	bl	f222 <assert_print>
    3aa2:	f240 213d 	movw	r1, #573	; 0x23d
    3aa6:	4620      	mov	r0, r4
    3aa8:	f00b fbb4 	bl	f214 <assert_post_action>
		return -EINVAL;
    3aac:	f06f 0015 	mvn.w	r0, #21
    3ab0:	e060      	b.n	3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    3ab2:	4453      	add	r3, sl
    3ab4:	f1a3 0008 	sub.w	r0, r3, #8
    3ab8:	e05c      	b.n	3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
		buf0[1] = s_rw_cnt;
    3aba:	9b06      	ldr	r3, [sp, #24]
    3abc:	707b      	strb	r3, [r7, #1]
		buf0[3] = 0;
    3abe:	e7dc      	b.n	3a7a <cbvprintf_package+0x446>
			*buf++ = pos;
    3ac0:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    3ac4:	3301      	adds	r3, #1
    3ac6:	459b      	cmp	fp, r3
    3ac8:	d9da      	bls.n	3a80 <cbvprintf_package+0x44c>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    3aca:	aa0c      	add	r2, sp, #48	; 0x30
    3acc:	441a      	add	r2, r3
    3ace:	f812 1c10 	ldrb.w	r1, [r2, #-16]
    3ad2:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
    3ad6:	2a00      	cmp	r2, #0
    3ad8:	daf4      	bge.n	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    3ada:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    3ade:	1be2      	subs	r2, r4, r7
    3ae0:	3201      	adds	r2, #1
    3ae2:	4592      	cmp	sl, r2
    3ae4:	d2ec      	bcs.n	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
				return -ENOSPC;
    3ae6:	f06f 001b 	mvn.w	r0, #27
    3aea:	e043      	b.n	3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
		for (i = 0; i < s_idx; i++) {
    3aec:	9b02      	ldr	r3, [sp, #8]
    3aee:	e7ea      	b.n	3ac6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2e>
    3af0:	00010d6c 	.word	0x00010d6c
    3af4:	00013704 	.word	0x00013704
    3af8:	00011660 	.word	0x00011660
    3afc:	00011d64 	.word	0x00011d64
    3b00:	000116a8 	.word	0x000116a8
    3b04:	000116c8 	.word	0x000116c8
    3b08:	000116ec 	.word	0x000116ec
    3b0c:	00011708 	.word	0x00011708
    3b10:	00011720 	.word	0x00011720
		if (rws_pos_en) {
    3b14:	9b01      	ldr	r3, [sp, #4]
    3b16:	b1f3      	cbz	r3, 3b56 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xbe>
			size = 0;
    3b18:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
    3b1a:	1be3      	subs	r3, r4, r7
    3b1c:	4433      	add	r3, r6
    3b1e:	3301      	adds	r3, #1
    3b20:	459a      	cmp	sl, r3
    3b22:	d333      	bcc.n	3b8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf4>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
    3b24:	ab0c      	add	r3, sp, #48	; 0x30
    3b26:	442b      	add	r3, r5
    3b28:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    3b2c:	f804 3b01 	strb.w	r3, [r4], #1
    3b30:	4632      	mov	r2, r6
    3b32:	4641      	mov	r1, r8
    3b34:	4620      	mov	r0, r4
    3b36:	f00c fe34 	bl	107a2 <memcpy>
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
    3b3a:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
    3b3c:	3501      	adds	r5, #1
    3b3e:	45ab      	cmp	fp, r5
    3b40:	d917      	bls.n	3b72 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xda>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    3b42:	f1b9 0f00 	cmp.w	r9, #0
    3b46:	d0e5      	beq.n	3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>
    3b48:	ab0c      	add	r3, sp, #48	; 0x30
    3b4a:	442b      	add	r3, r5
    3b4c:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
    3b50:	2b00      	cmp	r3, #0
    3b52:	dadf      	bge.n	3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>
    3b54:	e7f2      	b.n	3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    3b56:	ab0c      	add	r3, sp, #48	; 0x30
    3b58:	442b      	add	r3, r5
    3b5a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    3b5e:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    3b62:	2200      	movs	r2, #0
    3b64:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
    3b68:	4640      	mov	r0, r8
    3b6a:	f7fd f974 	bl	e56 <strlen>
    3b6e:	1c46      	adds	r6, r0, #1
    3b70:	e7d3      	b.n	3b1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x82>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
    3b72:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    3b74:	b00d      	add	sp, #52	; 0x34
    3b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
    3b7a:	f06f 000d 	mvn.w	r0, #13
    3b7e:	e7f9      	b.n	3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
		return -ENOSPC;
    3b80:	f06f 001b 	mvn.w	r0, #27
    3b84:	e7f6      	b.n	3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
			return -ENOSPC;
    3b86:	f06f 001b 	mvn.w	r0, #27
    3b8a:	e7f3      	b.n	3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
			return -ENOSPC;
    3b8c:	f06f 001b 	mvn.w	r0, #27
    3b90:	e7f0      	b.n	3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
    3b92:	bf00      	nop

00003b94 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    3b94:	b538      	push	{r3, r4, r5, lr}
    3b96:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3b98:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    3b9a:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    3b9e:	6081      	str	r1, [r0, #8]
	switch (method) {
    3ba0:	2b02      	cmp	r3, #2
    3ba2:	d903      	bls.n	3bac <sys_notify_finalize+0x18>
    3ba4:	2b03      	cmp	r3, #3
    3ba6:	d102      	bne.n	3bae <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    3ba8:	6800      	ldr	r0, [r0, #0]
		break;
    3baa:	e00e      	b.n	3bca <sys_notify_finalize+0x36>
	switch (method) {
    3bac:	b963      	cbnz	r3, 3bc8 <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
    3bae:	4d08      	ldr	r5, [pc, #32]	; (3bd0 <sys_notify_finalize+0x3c>)
    3bb0:	2345      	movs	r3, #69	; 0x45
    3bb2:	462a      	mov	r2, r5
    3bb4:	4907      	ldr	r1, [pc, #28]	; (3bd4 <sys_notify_finalize+0x40>)
    3bb6:	4808      	ldr	r0, [pc, #32]	; (3bd8 <sys_notify_finalize+0x44>)
    3bb8:	f00b fb33 	bl	f222 <assert_print>
    3bbc:	2145      	movs	r1, #69	; 0x45
    3bbe:	4628      	mov	r0, r5
    3bc0:	f00b fb28 	bl	f214 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    3bc4:	2000      	movs	r0, #0
    3bc6:	e000      	b.n	3bca <sys_notify_finalize+0x36>
	switch (method) {
    3bc8:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    3bca:	2300      	movs	r3, #0
    3bcc:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    3bce:	bd38      	pop	{r3, r4, r5, pc}
    3bd0:	00011738 	.word	0x00011738
    3bd4:	00011d64 	.word	0x00011d64
    3bd8:	000116a8 	.word	0x000116a8

00003bdc <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    3bdc:	4b01      	ldr	r3, [pc, #4]	; (3be4 <__printk_hook_install+0x8>)
    3bde:	6018      	str	r0, [r3, #0]
}
    3be0:	4770      	bx	lr
    3be2:	bf00      	nop
    3be4:	20004014 	.word	0x20004014

00003be8 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
    3be8:	b538      	push	{r3, r4, r5, lr}
    3bea:	4604      	mov	r4, r0
    3bec:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3bee:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
    3bf0:	2a00      	cmp	r2, #0
    3bf2:	db14      	blt.n	3c1e <process_complete+0x36>
    3bf4:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
    3bf8:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    3bfa:	2a01      	cmp	r2, #1
    3bfc:	d91b      	bls.n	3c36 <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
    3bfe:	2b04      	cmp	r3, #4
    3c00:	d050      	beq.n	3ca4 <process_complete+0xbc>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
    3c02:	4c2f      	ldr	r4, [pc, #188]	; (3cc0 <process_complete+0xd8>)
    3c04:	f240 131b 	movw	r3, #283	; 0x11b
    3c08:	4622      	mov	r2, r4
    3c0a:	492e      	ldr	r1, [pc, #184]	; (3cc4 <process_complete+0xdc>)
    3c0c:	482e      	ldr	r0, [pc, #184]	; (3cc8 <process_complete+0xe0>)
    3c0e:	f00b fb08 	bl	f222 <assert_print>
    3c12:	f240 111b 	movw	r1, #283	; 0x11b
    3c16:	4620      	mov	r0, r4
    3c18:	f00b fafc 	bl	f214 <assert_post_action>
	}
}
    3c1c:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    3c1e:	e9d0 0100 	ldrd	r0, r1, [r0]
    3c22:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    3c26:	2300      	movs	r3, #0
    3c28:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    3c2a:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    3c2c:	2101      	movs	r1, #1
    3c2e:	4620      	mov	r0, r4
    3c30:	f00b f9fc 	bl	f02c <set_state>
    3c34:	e7f2      	b.n	3c1c <process_complete+0x34>
		*clients = mgr->clients;
    3c36:	e9d0 0100 	ldrd	r0, r1, [r0]
    3c3a:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    3c3e:	2200      	movs	r2, #0
    3c40:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    3c42:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    3c44:	2b06      	cmp	r3, #6
    3c46:	d00f      	beq.n	3c68 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    3c48:	2b05      	cmp	r3, #5
    3c4a:	d11d      	bne.n	3c88 <process_complete+0xa0>
			set_state(mgr, ONOFF_STATE_OFF);
    3c4c:	2100      	movs	r1, #0
    3c4e:	4620      	mov	r0, r4
    3c50:	f00b f9ec 	bl	f02c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    3c54:	4620      	mov	r0, r4
    3c56:	f00b fa10 	bl	f07a <process_recheck>
    3c5a:	2800      	cmp	r0, #0
    3c5c:	d0de      	beq.n	3c1c <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3c5e:	8ba3      	ldrh	r3, [r4, #28]
    3c60:	f043 0320 	orr.w	r3, r3, #32
    3c64:	83a3      	strh	r3, [r4, #28]
    3c66:	e7d9      	b.n	3c1c <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    3c68:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3c6c:	b13b      	cbz	r3, 3c7e <process_complete+0x96>
				mgr->refs += 1U;
    3c6e:	8be2      	ldrh	r2, [r4, #30]
    3c70:	3201      	adds	r2, #1
    3c72:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    3c74:	2b00      	cmp	r3, #0
    3c76:	d0f9      	beq.n	3c6c <process_complete+0x84>
	return node->next;
    3c78:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3c7a:	2b00      	cmp	r3, #0
    3c7c:	d1f6      	bne.n	3c6c <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
    3c7e:	2102      	movs	r1, #2
    3c80:	4620      	mov	r0, r4
    3c82:	f00b f9d3 	bl	f02c <set_state>
    3c86:	e7e5      	b.n	3c54 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    3c88:	4d0d      	ldr	r5, [pc, #52]	; (3cc0 <process_complete+0xd8>)
    3c8a:	f240 1309 	movw	r3, #265	; 0x109
    3c8e:	462a      	mov	r2, r5
    3c90:	490e      	ldr	r1, [pc, #56]	; (3ccc <process_complete+0xe4>)
    3c92:	480d      	ldr	r0, [pc, #52]	; (3cc8 <process_complete+0xe0>)
    3c94:	f00b fac5 	bl	f222 <assert_print>
    3c98:	f240 1109 	movw	r1, #265	; 0x109
    3c9c:	4628      	mov	r0, r5
    3c9e:	f00b fab9 	bl	f214 <assert_post_action>
    3ca2:	e7d3      	b.n	3c4c <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    3ca4:	2100      	movs	r1, #0
    3ca6:	f00b f9c1 	bl	f02c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    3caa:	4620      	mov	r0, r4
    3cac:	f00b f9e5 	bl	f07a <process_recheck>
    3cb0:	2800      	cmp	r0, #0
    3cb2:	d0b3      	beq.n	3c1c <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3cb4:	8ba3      	ldrh	r3, [r4, #28]
    3cb6:	f043 0320 	orr.w	r3, r3, #32
    3cba:	83a3      	strh	r3, [r4, #28]
    3cbc:	e7ae      	b.n	3c1c <process_complete+0x34>
    3cbe:	bf00      	nop
    3cc0:	0001175c 	.word	0x0001175c
    3cc4:	00011d64 	.word	0x00011d64
    3cc8:	000116a8 	.word	0x000116a8
    3ccc:	00011780 	.word	0x00011780

00003cd0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    3cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cd4:	b083      	sub	sp, #12
    3cd6:	4604      	mov	r4, r0
    3cd8:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3cda:	8b83      	ldrh	r3, [r0, #28]
    3cdc:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
    3ce0:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
    3ce4:	460d      	mov	r5, r1
    3ce6:	b131      	cbz	r1, 3cf6 <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    3ce8:	f1b8 0f00 	cmp.w	r8, #0
    3cec:	d112      	bne.n	3d14 <process_event+0x44>
	list->head = NULL;
    3cee:	2300      	movs	r3, #0
    3cf0:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    3cf2:	9301      	str	r3, [sp, #4]
}
    3cf4:	e0aa      	b.n	3e4c <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
    3cf6:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 3fd8 <process_event+0x308>
    3cfa:	f240 1333 	movw	r3, #307	; 0x133
    3cfe:	464a      	mov	r2, r9
    3d00:	49b6      	ldr	r1, [pc, #728]	; (3fdc <process_event+0x30c>)
    3d02:	48b7      	ldr	r0, [pc, #732]	; (3fe0 <process_event+0x310>)
    3d04:	f00b fa8d 	bl	f222 <assert_print>
    3d08:	f240 1133 	movw	r1, #307	; 0x133
    3d0c:	4648      	mov	r0, r9
    3d0e:	f00b fa81 	bl	f214 <assert_post_action>
    3d12:	e7e9      	b.n	3ce8 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
    3d14:	2d01      	cmp	r5, #1
    3d16:	d013      	beq.n	3d40 <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    3d18:	2d02      	cmp	r5, #2
    3d1a:	d116      	bne.n	3d4a <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
    3d1c:	8ba3      	ldrh	r3, [r4, #28]
    3d1e:	f043 0320 	orr.w	r3, r3, #32
    3d22:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    3d24:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3d26:	4620      	mov	r0, r4
    3d28:	f006 fd84 	bl	a834 <z_spin_unlock_valid>
    3d2c:	2800      	cmp	r0, #0
    3d2e:	f000 819c 	beq.w	406a <process_event+0x39a>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    3d32:	f386 8811 	msr	BASEPRI, r6
    3d36:	f3bf 8f6f 	isb	sy
}
    3d3a:	b003      	add	sp, #12
    3d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    3d40:	8ba3      	ldrh	r3, [r4, #28]
    3d42:	f043 0310 	orr.w	r3, r3, #16
    3d46:	83a3      	strh	r3, [r4, #28]
    3d48:	e7ec      	b.n	3d24 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    3d4a:	4da3      	ldr	r5, [pc, #652]	; (3fd8 <process_event+0x308>)
    3d4c:	f44f 739e 	mov.w	r3, #316	; 0x13c
    3d50:	462a      	mov	r2, r5
    3d52:	49a4      	ldr	r1, [pc, #656]	; (3fe4 <process_event+0x314>)
    3d54:	48a2      	ldr	r0, [pc, #648]	; (3fe0 <process_event+0x310>)
    3d56:	f00b fa64 	bl	f222 <assert_print>
    3d5a:	f44f 719e 	mov.w	r1, #316	; 0x13c
    3d5e:	4628      	mov	r0, r5
    3d60:	f00b fa58 	bl	f214 <assert_post_action>
    3d64:	e7da      	b.n	3d1c <process_event+0x4c>
			evt = process_recheck(mgr);
    3d66:	4620      	mov	r0, r4
    3d68:	f00b f987 	bl	f07a <process_recheck>
    3d6c:	4605      	mov	r5, r0
    3d6e:	e06f      	b.n	3e50 <process_event+0x180>
			res = mgr->last_res;
    3d70:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    3d74:	464a      	mov	r2, r9
    3d76:	4669      	mov	r1, sp
    3d78:	4620      	mov	r0, r4
    3d7a:	f7ff ff35 	bl	3be8 <process_complete>
		onoff_transition_fn transit = NULL;
    3d7e:	2500      	movs	r5, #0
    3d80:	e011      	b.n	3da6 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    3d82:	2f00      	cmp	r7, #0
    3d84:	f040 8081 	bne.w	3e8a <process_event+0x1ba>
	return list->head;
    3d88:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    3d8a:	2b00      	cmp	r3, #0
    3d8c:	f000 808b 	beq.w	3ea6 <process_event+0x1d6>
			transit = mgr->transitions->start;
    3d90:	6923      	ldr	r3, [r4, #16]
    3d92:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    3d94:	2d00      	cmp	r5, #0
    3d96:	f000 8094 	beq.w	3ec2 <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
    3d9a:	2106      	movs	r1, #6
    3d9c:	4620      	mov	r0, r4
    3d9e:	f00b f945 	bl	f02c <set_state>
		res = 0;
    3da2:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3da6:	8ba3      	ldrh	r3, [r4, #28]
    3da8:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    3dac:	45b8      	cmp	r8, r7
    3dae:	f000 810b 	beq.w	3fc8 <process_event+0x2f8>
    3db2:	68a2      	ldr	r2, [r4, #8]
    3db4:	2a00      	cmp	r2, #0
    3db6:	f000 8109 	beq.w	3fcc <process_event+0x2fc>
    3dba:	2201      	movs	r2, #1
		if (do_monitors
    3dbc:	4617      	mov	r7, r2
    3dbe:	b91a      	cbnz	r2, 3dc8 <process_event+0xf8>
    3dc0:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    3dc2:	2a00      	cmp	r2, #0
    3dc4:	f000 8104 	beq.w	3fd0 <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    3dc8:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    3dcc:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    3dce:	f104 0a14 	add.w	sl, r4, #20
    3dd2:	4650      	mov	r0, sl
    3dd4:	f006 fd2e 	bl	a834 <z_spin_unlock_valid>
    3dd8:	2800      	cmp	r0, #0
    3dda:	f000 8115 	beq.w	4008 <process_event+0x338>
    3dde:	f386 8811 	msr	BASEPRI, r6
    3de2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    3de6:	2f00      	cmp	r7, #0
    3de8:	f040 811f 	bne.w	402a <process_event+0x35a>
    3dec:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    3dee:	b12b      	cbz	r3, 3dfc <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
    3df0:	464b      	mov	r3, r9
    3df2:	4642      	mov	r2, r8
    3df4:	4669      	mov	r1, sp
    3df6:	4620      	mov	r0, r4
    3df8:	f00b f981 	bl	f0fe <notify_all>
			if (transit != NULL) {
    3dfc:	b115      	cbz	r5, 3e04 <process_event+0x134>
				transit(mgr, transition_complete);
    3dfe:	497a      	ldr	r1, [pc, #488]	; (3fe8 <process_event+0x318>)
    3e00:	4620      	mov	r0, r4
    3e02:	47a8      	blx	r5
	__asm__ volatile(
    3e04:	f04f 0320 	mov.w	r3, #32
    3e08:	f3ef 8611 	mrs	r6, BASEPRI
    3e0c:	f383 8812 	msr	BASEPRI_MAX, r3
    3e10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3e14:	4650      	mov	r0, sl
    3e16:	f006 fcfd 	bl	a814 <z_spin_lock_valid>
    3e1a:	2800      	cmp	r0, #0
    3e1c:	f000 810b 	beq.w	4036 <process_event+0x366>
	z_spin_lock_set_owner(l);
    3e20:	4650      	mov	r0, sl
    3e22:	f006 fd17 	bl	a854 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    3e26:	8ba3      	ldrh	r3, [r4, #28]
    3e28:	f023 0308 	bic.w	r3, r3, #8
    3e2c:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    3e2e:	8ba3      	ldrh	r3, [r4, #28]
    3e30:	f013 0f10 	tst.w	r3, #16
    3e34:	f000 810f 	beq.w	4056 <process_event+0x386>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    3e38:	f023 0310 	bic.w	r3, r3, #16
    3e3c:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    3e3e:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    3e40:	8ba7      	ldrh	r7, [r4, #28]
    3e42:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
    3e46:	2d00      	cmp	r5, #0
    3e48:	f43f af6c 	beq.w	3d24 <process_event+0x54>
		if (evt == EVT_RECHECK) {
    3e4c:	2d02      	cmp	r5, #2
    3e4e:	d08a      	beq.n	3d66 <process_event+0x96>
		if (evt == EVT_NOP) {
    3e50:	2d00      	cmp	r5, #0
    3e52:	f43f af67 	beq.w	3d24 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
    3e56:	2d01      	cmp	r5, #1
    3e58:	d08a      	beq.n	3d70 <process_event+0xa0>
		} else if (evt == EVT_START) {
    3e5a:	2d03      	cmp	r5, #3
    3e5c:	d091      	beq.n	3d82 <process_event+0xb2>
		} else if (evt == EVT_STOP) {
    3e5e:	2d04      	cmp	r5, #4
    3e60:	d03e      	beq.n	3ee0 <process_event+0x210>
		} else if (evt == EVT_RESET) {
    3e62:	2d05      	cmp	r5, #5
    3e64:	f040 80a0 	bne.w	3fa8 <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    3e68:	2f01      	cmp	r7, #1
    3e6a:	d172      	bne.n	3f52 <process_event+0x282>
    3e6c:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    3e6e:	2b00      	cmp	r3, #0
    3e70:	d07d      	beq.n	3f6e <process_event+0x29e>
			transit = mgr->transitions->reset;
    3e72:	6923      	ldr	r3, [r4, #16]
    3e74:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    3e76:	2d00      	cmp	r5, #0
    3e78:	f000 8087 	beq.w	3f8a <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
    3e7c:	2105      	movs	r1, #5
    3e7e:	4620      	mov	r0, r4
    3e80:	f00b f8d4 	bl	f02c <set_state>
		res = 0;
    3e84:	f04f 0900 	mov.w	r9, #0
    3e88:	e78d      	b.n	3da6 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    3e8a:	4d53      	ldr	r5, [pc, #332]	; (3fd8 <process_event+0x308>)
    3e8c:	f44f 73ab 	mov.w	r3, #342	; 0x156
    3e90:	462a      	mov	r2, r5
    3e92:	4956      	ldr	r1, [pc, #344]	; (3fec <process_event+0x31c>)
    3e94:	4852      	ldr	r0, [pc, #328]	; (3fe0 <process_event+0x310>)
    3e96:	f00b f9c4 	bl	f222 <assert_print>
    3e9a:	f44f 71ab 	mov.w	r1, #342	; 0x156
    3e9e:	4628      	mov	r0, r5
    3ea0:	f00b f9b8 	bl	f214 <assert_post_action>
    3ea4:	e770      	b.n	3d88 <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    3ea6:	4d4c      	ldr	r5, [pc, #304]	; (3fd8 <process_event+0x308>)
    3ea8:	f240 1357 	movw	r3, #343	; 0x157
    3eac:	462a      	mov	r2, r5
    3eae:	4950      	ldr	r1, [pc, #320]	; (3ff0 <process_event+0x320>)
    3eb0:	484b      	ldr	r0, [pc, #300]	; (3fe0 <process_event+0x310>)
    3eb2:	f00b f9b6 	bl	f222 <assert_print>
    3eb6:	f240 1157 	movw	r1, #343	; 0x157
    3eba:	4628      	mov	r0, r5
    3ebc:	f00b f9aa 	bl	f214 <assert_post_action>
    3ec0:	e766      	b.n	3d90 <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
    3ec2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 3fd8 <process_event+0x308>
    3ec6:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    3eca:	4642      	mov	r2, r8
    3ecc:	4949      	ldr	r1, [pc, #292]	; (3ff4 <process_event+0x324>)
    3ece:	4844      	ldr	r0, [pc, #272]	; (3fe0 <process_event+0x310>)
    3ed0:	f00b f9a7 	bl	f222 <assert_print>
    3ed4:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    3ed8:	4640      	mov	r0, r8
    3eda:	f00b f99b 	bl	f214 <assert_post_action>
    3ede:	e75c      	b.n	3d9a <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    3ee0:	2f02      	cmp	r7, #2
    3ee2:	d10b      	bne.n	3efc <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
    3ee4:	8be3      	ldrh	r3, [r4, #30]
    3ee6:	b9bb      	cbnz	r3, 3f18 <process_event+0x248>
			transit = mgr->transitions->stop;
    3ee8:	6923      	ldr	r3, [r4, #16]
    3eea:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    3eec:	b315      	cbz	r5, 3f34 <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
    3eee:	2104      	movs	r1, #4
    3ef0:	4620      	mov	r0, r4
    3ef2:	f00b f89b 	bl	f02c <set_state>
		res = 0;
    3ef6:	f04f 0900 	mov.w	r9, #0
    3efa:	e754      	b.n	3da6 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    3efc:	4d36      	ldr	r5, [pc, #216]	; (3fd8 <process_event+0x308>)
    3efe:	f240 135d 	movw	r3, #349	; 0x15d
    3f02:	462a      	mov	r2, r5
    3f04:	493c      	ldr	r1, [pc, #240]	; (3ff8 <process_event+0x328>)
    3f06:	4836      	ldr	r0, [pc, #216]	; (3fe0 <process_event+0x310>)
    3f08:	f00b f98b 	bl	f222 <assert_print>
    3f0c:	f240 115d 	movw	r1, #349	; 0x15d
    3f10:	4628      	mov	r0, r5
    3f12:	f00b f97f 	bl	f214 <assert_post_action>
    3f16:	e7e5      	b.n	3ee4 <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
    3f18:	4d2f      	ldr	r5, [pc, #188]	; (3fd8 <process_event+0x308>)
    3f1a:	f44f 73af 	mov.w	r3, #350	; 0x15e
    3f1e:	462a      	mov	r2, r5
    3f20:	4936      	ldr	r1, [pc, #216]	; (3ffc <process_event+0x32c>)
    3f22:	482f      	ldr	r0, [pc, #188]	; (3fe0 <process_event+0x310>)
    3f24:	f00b f97d 	bl	f222 <assert_print>
    3f28:	f44f 71af 	mov.w	r1, #350	; 0x15e
    3f2c:	4628      	mov	r0, r5
    3f2e:	f00b f971 	bl	f214 <assert_post_action>
    3f32:	e7d9      	b.n	3ee8 <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
    3f34:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 3fd8 <process_event+0x308>
    3f38:	f240 1361 	movw	r3, #353	; 0x161
    3f3c:	4642      	mov	r2, r8
    3f3e:	492d      	ldr	r1, [pc, #180]	; (3ff4 <process_event+0x324>)
    3f40:	4827      	ldr	r0, [pc, #156]	; (3fe0 <process_event+0x310>)
    3f42:	f00b f96e 	bl	f222 <assert_print>
    3f46:	f240 1161 	movw	r1, #353	; 0x161
    3f4a:	4640      	mov	r0, r8
    3f4c:	f00b f962 	bl	f214 <assert_post_action>
    3f50:	e7cd      	b.n	3eee <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    3f52:	4d21      	ldr	r5, [pc, #132]	; (3fd8 <process_event+0x308>)
    3f54:	f44f 73b2 	mov.w	r3, #356	; 0x164
    3f58:	462a      	mov	r2, r5
    3f5a:	4929      	ldr	r1, [pc, #164]	; (4000 <process_event+0x330>)
    3f5c:	4820      	ldr	r0, [pc, #128]	; (3fe0 <process_event+0x310>)
    3f5e:	f00b f960 	bl	f222 <assert_print>
    3f62:	f44f 71b2 	mov.w	r1, #356	; 0x164
    3f66:	4628      	mov	r0, r5
    3f68:	f00b f954 	bl	f214 <assert_post_action>
    3f6c:	e77e      	b.n	3e6c <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    3f6e:	4d1a      	ldr	r5, [pc, #104]	; (3fd8 <process_event+0x308>)
    3f70:	f240 1365 	movw	r3, #357	; 0x165
    3f74:	462a      	mov	r2, r5
    3f76:	491e      	ldr	r1, [pc, #120]	; (3ff0 <process_event+0x320>)
    3f78:	4819      	ldr	r0, [pc, #100]	; (3fe0 <process_event+0x310>)
    3f7a:	f00b f952 	bl	f222 <assert_print>
    3f7e:	f240 1165 	movw	r1, #357	; 0x165
    3f82:	4628      	mov	r0, r5
    3f84:	f00b f946 	bl	f214 <assert_post_action>
    3f88:	e773      	b.n	3e72 <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
    3f8a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 3fd8 <process_event+0x308>
    3f8e:	f44f 73b4 	mov.w	r3, #360	; 0x168
    3f92:	4642      	mov	r2, r8
    3f94:	4917      	ldr	r1, [pc, #92]	; (3ff4 <process_event+0x324>)
    3f96:	4812      	ldr	r0, [pc, #72]	; (3fe0 <process_event+0x310>)
    3f98:	f00b f943 	bl	f222 <assert_print>
    3f9c:	f44f 71b4 	mov.w	r1, #360	; 0x168
    3fa0:	4640      	mov	r0, r8
    3fa2:	f00b f937 	bl	f214 <assert_post_action>
    3fa6:	e769      	b.n	3e7c <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
    3fa8:	4d0b      	ldr	r5, [pc, #44]	; (3fd8 <process_event+0x308>)
    3faa:	f240 136b 	movw	r3, #363	; 0x16b
    3fae:	462a      	mov	r2, r5
    3fb0:	4914      	ldr	r1, [pc, #80]	; (4004 <process_event+0x334>)
    3fb2:	480b      	ldr	r0, [pc, #44]	; (3fe0 <process_event+0x310>)
    3fb4:	f00b f935 	bl	f222 <assert_print>
    3fb8:	f240 116b 	movw	r1, #363	; 0x16b
    3fbc:	4628      	mov	r0, r5
    3fbe:	f00b f929 	bl	f214 <assert_post_action>
		onoff_transition_fn transit = NULL;
    3fc2:	2500      	movs	r5, #0
		res = 0;
    3fc4:	46a9      	mov	r9, r5
    3fc6:	e6ee      	b.n	3da6 <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
    3fc8:	2200      	movs	r2, #0
    3fca:	e6f7      	b.n	3dbc <process_event+0xec>
    3fcc:	2200      	movs	r2, #0
    3fce:	e6f5      	b.n	3dbc <process_event+0xec>
		    || (transit != NULL)) {
    3fd0:	2d00      	cmp	r5, #0
    3fd2:	f47f aef9 	bne.w	3dc8 <process_event+0xf8>
    3fd6:	e72a      	b.n	3e2e <process_event+0x15e>
    3fd8:	0001175c 	.word	0x0001175c
    3fdc:	000117a8 	.word	0x000117a8
    3fe0:	000116a8 	.word	0x000116a8
    3fe4:	000117b8 	.word	0x000117b8
    3fe8:	000040a5 	.word	0x000040a5
    3fec:	000117cc 	.word	0x000117cc
    3ff0:	000117d8 	.word	0x000117d8
    3ff4:	000117fc 	.word	0x000117fc
    3ff8:	00011814 	.word	0x00011814
    3ffc:	0001182c 	.word	0x0001182c
    4000:	0001183c 	.word	0x0001183c
    4004:	00011d64 	.word	0x00011d64
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4008:	f8df b080 	ldr.w	fp, [pc, #128]	; 408c <process_event+0x3bc>
    400c:	23b9      	movs	r3, #185	; 0xb9
    400e:	465a      	mov	r2, fp
    4010:	491f      	ldr	r1, [pc, #124]	; (4090 <process_event+0x3c0>)
    4012:	4820      	ldr	r0, [pc, #128]	; (4094 <process_event+0x3c4>)
    4014:	f00b f905 	bl	f222 <assert_print>
    4018:	4651      	mov	r1, sl
    401a:	481f      	ldr	r0, [pc, #124]	; (4098 <process_event+0x3c8>)
    401c:	f00b f901 	bl	f222 <assert_print>
    4020:	21b9      	movs	r1, #185	; 0xb9
    4022:	4658      	mov	r0, fp
    4024:	f00b f8f6 	bl	f214 <assert_post_action>
    4028:	e6d9      	b.n	3dde <process_event+0x10e>
				notify_monitors(mgr, state, res);
    402a:	464a      	mov	r2, r9
    402c:	4641      	mov	r1, r8
    402e:	4620      	mov	r0, r4
    4030:	f00b f804 	bl	f03c <notify_monitors>
    4034:	e6da      	b.n	3dec <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4036:	4d15      	ldr	r5, [pc, #84]	; (408c <process_event+0x3bc>)
    4038:	238e      	movs	r3, #142	; 0x8e
    403a:	462a      	mov	r2, r5
    403c:	4917      	ldr	r1, [pc, #92]	; (409c <process_event+0x3cc>)
    403e:	4815      	ldr	r0, [pc, #84]	; (4094 <process_event+0x3c4>)
    4040:	f00b f8ef 	bl	f222 <assert_print>
    4044:	4651      	mov	r1, sl
    4046:	4816      	ldr	r0, [pc, #88]	; (40a0 <process_event+0x3d0>)
    4048:	f00b f8eb 	bl	f222 <assert_print>
    404c:	218e      	movs	r1, #142	; 0x8e
    404e:	4628      	mov	r0, r5
    4050:	f00b f8e0 	bl	f214 <assert_post_action>
    4054:	e6e4      	b.n	3e20 <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    4056:	f013 0f20 	tst.w	r3, #32
    405a:	d004      	beq.n	4066 <process_event+0x396>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    405c:	f023 0320 	bic.w	r3, r3, #32
    4060:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    4062:	2502      	movs	r5, #2
    4064:	e6ec      	b.n	3e40 <process_event+0x170>
		evt = EVT_NOP;
    4066:	2500      	movs	r5, #0
    4068:	e6ea      	b.n	3e40 <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    406a:	4d08      	ldr	r5, [pc, #32]	; (408c <process_event+0x3bc>)
    406c:	23b9      	movs	r3, #185	; 0xb9
    406e:	462a      	mov	r2, r5
    4070:	4907      	ldr	r1, [pc, #28]	; (4090 <process_event+0x3c0>)
    4072:	4808      	ldr	r0, [pc, #32]	; (4094 <process_event+0x3c4>)
    4074:	f00b f8d5 	bl	f222 <assert_print>
    4078:	4621      	mov	r1, r4
    407a:	4807      	ldr	r0, [pc, #28]	; (4098 <process_event+0x3c8>)
    407c:	f00b f8d1 	bl	f222 <assert_print>
    4080:	21b9      	movs	r1, #185	; 0xb9
    4082:	4628      	mov	r0, r5
    4084:	f00b f8c6 	bl	f214 <assert_post_action>
    4088:	e653      	b.n	3d32 <process_event+0x62>
    408a:	bf00      	nop
    408c:	00011854 	.word	0x00011854
    4090:	00011884 	.word	0x00011884
    4094:	000116a8 	.word	0x000116a8
    4098:	0001189c 	.word	0x0001189c
    409c:	000118b4 	.word	0x000118b4
    40a0:	000118cc 	.word	0x000118cc

000040a4 <transition_complete>:
{
    40a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40a8:	4604      	mov	r4, r0
    40aa:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    40ac:	f100 0614 	add.w	r6, r0, #20
    40b0:	f04f 0320 	mov.w	r3, #32
    40b4:	f3ef 8711 	mrs	r7, BASEPRI
    40b8:	f383 8812 	msr	BASEPRI_MAX, r3
    40bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    40c0:	4630      	mov	r0, r6
    40c2:	f006 fba7 	bl	a814 <z_spin_lock_valid>
    40c6:	b150      	cbz	r0, 40de <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    40c8:	4630      	mov	r0, r6
    40ca:	f006 fbc3 	bl	a854 <z_spin_lock_set_owner>
	mgr->last_res = res;
    40ce:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    40d0:	463a      	mov	r2, r7
    40d2:	2101      	movs	r1, #1
    40d4:	4620      	mov	r0, r4
    40d6:	f7ff fdfb 	bl	3cd0 <process_event>
}
    40da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    40de:	f8df 8020 	ldr.w	r8, [pc, #32]	; 4100 <transition_complete+0x5c>
    40e2:	238e      	movs	r3, #142	; 0x8e
    40e4:	4642      	mov	r2, r8
    40e6:	4907      	ldr	r1, [pc, #28]	; (4104 <transition_complete+0x60>)
    40e8:	4807      	ldr	r0, [pc, #28]	; (4108 <transition_complete+0x64>)
    40ea:	f00b f89a 	bl	f222 <assert_print>
    40ee:	4631      	mov	r1, r6
    40f0:	4806      	ldr	r0, [pc, #24]	; (410c <transition_complete+0x68>)
    40f2:	f00b f896 	bl	f222 <assert_print>
    40f6:	218e      	movs	r1, #142	; 0x8e
    40f8:	4640      	mov	r0, r8
    40fa:	f00b f88b 	bl	f214 <assert_post_action>
    40fe:	e7e3      	b.n	40c8 <transition_complete+0x24>
    4100:	00011854 	.word	0x00011854
    4104:	000118b4 	.word	0x000118b4
    4108:	000116a8 	.word	0x000116a8
    410c:	000118cc 	.word	0x000118cc

00004110 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4110:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4114:	4604      	mov	r4, r0
    4116:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4118:	f00a ffc8 	bl	f0ac <validate_args>

	if (rv < 0) {
    411c:	1e06      	subs	r6, r0, #0
    411e:	db58      	blt.n	41d2 <__data_size+0x9>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    4120:	f104 0714 	add.w	r7, r4, #20
    4124:	f04f 0320 	mov.w	r3, #32
    4128:	f3ef 8911 	mrs	r9, BASEPRI
    412c:	f383 8812 	msr	BASEPRI_MAX, r3
    4130:	f3bf 8f6f 	isb	sy
    4134:	4638      	mov	r0, r7
    4136:	f006 fb6d 	bl	a814 <z_spin_lock_valid>
    413a:	b1e8      	cbz	r0, 4178 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    413c:	4638      	mov	r0, r7
    413e:	f006 fb89 	bl	a854 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4142:	8ba5      	ldrh	r5, [r4, #28]
    4144:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4148:	8be3      	ldrh	r3, [r4, #30]
    414a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    414e:	4293      	cmp	r3, r2
    4150:	d056      	beq.n	4200 <__data_size+0x37>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    4152:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    4154:	2d02      	cmp	r5, #2
    4156:	d01f      	beq.n	4198 <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    4158:	b32d      	cbz	r5, 41a6 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
    415a:	2d04      	cmp	r5, #4
    415c:	d023      	beq.n	41a6 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
    415e:	2d06      	cmp	r5, #6
    4160:	d021      	beq.n	41a6 <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    4162:	2d05      	cmp	r5, #5
    4164:	d053      	beq.n	420e <__data_size+0x45>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    4166:	2d01      	cmp	r5, #1
    4168:	d136      	bne.n	41d8 <__data_size+0xf>
		rv = -EIO;
    416a:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    416e:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    4172:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    4174:	4652      	mov	r2, sl
    4176:	e01c      	b.n	41b2 <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4178:	4d3c      	ldr	r5, [pc, #240]	; (426c <__data_size+0xa3>)
    417a:	238e      	movs	r3, #142	; 0x8e
    417c:	462a      	mov	r2, r5
    417e:	493c      	ldr	r1, [pc, #240]	; (4270 <__data_size+0xa7>)
    4180:	483c      	ldr	r0, [pc, #240]	; (4274 <__data_size+0xab>)
    4182:	f00b f84e 	bl	f222 <assert_print>
    4186:	4639      	mov	r1, r7
    4188:	483b      	ldr	r0, [pc, #236]	; (4278 <__data_size+0xaf>)
    418a:	f00b f84a 	bl	f222 <assert_print>
    418e:	218e      	movs	r1, #142	; 0x8e
    4190:	4628      	mov	r0, r5
    4192:	f00b f83f 	bl	f214 <assert_post_action>
    4196:	e7d1      	b.n	413c <onoff_request+0x2c>
		mgr->refs += 1U;
    4198:	3301      	adds	r3, #1
    419a:	83e3      	strh	r3, [r4, #30]
		notify = true;
    419c:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    41a0:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    41a2:	461a      	mov	r2, r3
    41a4:	e005      	b.n	41b2 <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
    41a6:	fab5 f385 	clz	r3, r5
    41aa:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    41ac:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    41b0:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    41b2:	b142      	cbz	r2, 41c6 <onoff_request+0xb6>
	parent->next = child;
    41b4:	2200      	movs	r2, #0
    41b6:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    41ba:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    41bc:	b372      	cbz	r2, 421c <__data_size+0x53>
	parent->next = child;
    41be:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    41c2:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    41c6:	b373      	cbz	r3, 4226 <__data_size+0x5d>
		process_event(mgr, EVT_RECHECK, key);
    41c8:	464a      	mov	r2, r9
    41ca:	2102      	movs	r1, #2
    41cc:	4620      	mov	r0, r4
    41ce:	f7ff fd7f 	bl	3cd0 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    41d2:	4630      	mov	r0, r6
    41d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    41d8:	4e28      	ldr	r6, [pc, #160]	; (427c <__data_size+0xb3>)
    41da:	f240 13c9 	movw	r3, #457	; 0x1c9
    41de:	4632      	mov	r2, r6
    41e0:	4927      	ldr	r1, [pc, #156]	; (4280 <__data_size+0xb7>)
    41e2:	4824      	ldr	r0, [pc, #144]	; (4274 <__data_size+0xab>)
    41e4:	f00b f81d 	bl	f222 <assert_print>
    41e8:	f240 11c9 	movw	r1, #457	; 0x1c9
    41ec:	4630      	mov	r0, r6
    41ee:	f00b f811 	bl	f214 <assert_post_action>
		rv = -EIO;
    41f2:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    41f6:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    41fa:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    41fc:	4652      	mov	r2, sl
    41fe:	e7d8      	b.n	41b2 <onoff_request+0xa2>
		rv = -EAGAIN;
    4200:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    4204:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    4208:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    420a:	4652      	mov	r2, sl
    420c:	e7d1      	b.n	41b2 <onoff_request+0xa2>
		rv = -ENOTSUP;
    420e:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    4212:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    4216:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    4218:	4652      	mov	r2, sl
    421a:	e7ca      	b.n	41b2 <onoff_request+0xa2>
    421c:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    4220:	f8c4 8000 	str.w	r8, [r4]
}
    4224:	e7cf      	b.n	41c6 <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4226:	4638      	mov	r0, r7
    4228:	f006 fb04 	bl	a834 <z_spin_unlock_valid>
    422c:	b168      	cbz	r0, 424a <__data_size+0x81>
	__asm__ volatile(
    422e:	f389 8811 	msr	BASEPRI, r9
    4232:	f3bf 8f6f 	isb	sy
		if (notify) {
    4236:	f1ba 0f00 	cmp.w	sl, #0
    423a:	d0ca      	beq.n	41d2 <__data_size+0x9>
			notify_one(mgr, cli, state, 0);
    423c:	2300      	movs	r3, #0
    423e:	462a      	mov	r2, r5
    4240:	4641      	mov	r1, r8
    4242:	4620      	mov	r0, r4
    4244:	f00a ff48 	bl	f0d8 <notify_one>
    4248:	e7c3      	b.n	41d2 <__data_size+0x9>
    424a:	f8df b020 	ldr.w	fp, [pc, #32]	; 426c <__data_size+0xa3>
    424e:	23b9      	movs	r3, #185	; 0xb9
    4250:	465a      	mov	r2, fp
    4252:	490c      	ldr	r1, [pc, #48]	; (4284 <__data_size+0xbb>)
    4254:	4807      	ldr	r0, [pc, #28]	; (4274 <__data_size+0xab>)
    4256:	f00a ffe4 	bl	f222 <assert_print>
    425a:	4639      	mov	r1, r7
    425c:	480a      	ldr	r0, [pc, #40]	; (4288 <__data_size+0xbf>)
    425e:	f00a ffe0 	bl	f222 <assert_print>
    4262:	21b9      	movs	r1, #185	; 0xb9
    4264:	4658      	mov	r0, fp
    4266:	f00a ffd5 	bl	f214 <assert_post_action>
    426a:	e7e0      	b.n	422e <__data_size+0x65>
    426c:	00011854 	.word	0x00011854
    4270:	000118b4 	.word	0x000118b4
    4274:	000116a8 	.word	0x000116a8
    4278:	000118cc 	.word	0x000118cc
    427c:	0001175c 	.word	0x0001175c
    4280:	0001183c 	.word	0x0001183c
    4284:	00011884 	.word	0x00011884
    4288:	0001189c 	.word	0x0001189c

0000428c <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    428c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4290:	4606      	mov	r6, r0
    4292:	460d      	mov	r5, r1
    4294:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    4296:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    429a:	d222      	bcs.n	42e2 <sys_heap_init+0x56>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    429c:	2c04      	cmp	r4, #4
    429e:	d931      	bls.n	4304 <sys_heap_init+0x78>
	bytes -= heap_footer_bytes(bytes);
    42a0:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    42a2:	1dec      	adds	r4, r5, #7
    42a4:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    42a8:	4415      	add	r5, r2
    42aa:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    42ae:	1b2d      	subs	r5, r5, r4
    42b0:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    42b4:	2d17      	cmp	r5, #23
    42b6:	d936      	bls.n	4326 <sys_heap_init+0x9a>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    42b8:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
    42ba:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
    42be:	2300      	movs	r3, #0
    42c0:	60e3      	str	r3, [r4, #12]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    42c2:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    42c6:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    42ca:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
    42ce:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    42d0:	3607      	adds	r6, #7
    42d2:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    42d6:	f109 0301 	add.w	r3, r9, #1
    42da:	4543      	cmp	r3, r8
    42dc:	d834      	bhi.n	4348 <sys_heap_init+0xbc>
{
    42de:	2300      	movs	r3, #0
    42e0:	e049      	b.n	4376 <sys_heap_init+0xea>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    42e2:	4f38      	ldr	r7, [pc, #224]	; (43c4 <sys_heap_init+0x138>)
    42e4:	f240 13e3 	movw	r3, #483	; 0x1e3
    42e8:	463a      	mov	r2, r7
    42ea:	4937      	ldr	r1, [pc, #220]	; (43c8 <sys_heap_init+0x13c>)
    42ec:	4837      	ldr	r0, [pc, #220]	; (43cc <sys_heap_init+0x140>)
    42ee:	f00a ff98 	bl	f222 <assert_print>
    42f2:	4837      	ldr	r0, [pc, #220]	; (43d0 <sys_heap_init+0x144>)
    42f4:	f00a ff95 	bl	f222 <assert_print>
    42f8:	f240 11e3 	movw	r1, #483	; 0x1e3
    42fc:	4638      	mov	r0, r7
    42fe:	f00a ff89 	bl	f214 <assert_post_action>
    4302:	e7cb      	b.n	429c <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    4304:	4f2f      	ldr	r7, [pc, #188]	; (43c4 <sys_heap_init+0x138>)
    4306:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    430a:	463a      	mov	r2, r7
    430c:	4931      	ldr	r1, [pc, #196]	; (43d4 <sys_heap_init+0x148>)
    430e:	482f      	ldr	r0, [pc, #188]	; (43cc <sys_heap_init+0x140>)
    4310:	f00a ff87 	bl	f222 <assert_print>
    4314:	4830      	ldr	r0, [pc, #192]	; (43d8 <sys_heap_init+0x14c>)
    4316:	f00a ff84 	bl	f222 <assert_print>
    431a:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    431e:	4638      	mov	r0, r7
    4320:	f00a ff78 	bl	f214 <assert_post_action>
    4324:	e7bc      	b.n	42a0 <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    4326:	4f27      	ldr	r7, [pc, #156]	; (43c4 <sys_heap_init+0x138>)
    4328:	f240 13f3 	movw	r3, #499	; 0x1f3
    432c:	463a      	mov	r2, r7
    432e:	492b      	ldr	r1, [pc, #172]	; (43dc <sys_heap_init+0x150>)
    4330:	4826      	ldr	r0, [pc, #152]	; (43cc <sys_heap_init+0x140>)
    4332:	f00a ff76 	bl	f222 <assert_print>
    4336:	4828      	ldr	r0, [pc, #160]	; (43d8 <sys_heap_init+0x14c>)
    4338:	f00a ff73 	bl	f222 <assert_print>
    433c:	f240 11f3 	movw	r1, #499	; 0x1f3
    4340:	4638      	mov	r0, r7
    4342:	f00a ff67 	bl	f214 <assert_post_action>
    4346:	e7b7      	b.n	42b8 <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    4348:	f8df a078 	ldr.w	sl, [pc, #120]	; 43c4 <sys_heap_init+0x138>
    434c:	f44f 7301 	mov.w	r3, #516	; 0x204
    4350:	4652      	mov	r2, sl
    4352:	4923      	ldr	r1, [pc, #140]	; (43e0 <sys_heap_init+0x154>)
    4354:	481d      	ldr	r0, [pc, #116]	; (43cc <sys_heap_init+0x140>)
    4356:	f00a ff64 	bl	f222 <assert_print>
    435a:	481f      	ldr	r0, [pc, #124]	; (43d8 <sys_heap_init+0x14c>)
    435c:	f00a ff61 	bl	f222 <assert_print>
    4360:	f44f 7101 	mov.w	r1, #516	; 0x204
    4364:	4650      	mov	r0, sl
    4366:	f00a ff55 	bl	f214 <assert_post_action>
    436a:	e7b8      	b.n	42de <sys_heap_init+0x52>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    436c:	1d1a      	adds	r2, r3, #4
    436e:	2100      	movs	r1, #0
    4370:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    4374:	3301      	adds	r3, #1
    4376:	42bb      	cmp	r3, r7
    4378:	dbf8      	blt.n	436c <sys_heap_init+0xe0>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    437a:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
    437e:	b29b      	uxth	r3, r3
    4380:	8063      	strh	r3, [r4, #2]
    4382:	2200      	movs	r2, #0
    4384:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    4386:	f043 0301 	orr.w	r3, r3, #1
    438a:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    438c:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    4390:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
    4394:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
    4398:	1cb3      	adds	r3, r6, #2
    439a:	52e1      	strh	r1, [r4, r3]
    439c:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
    43a0:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
    43a4:	1ca9      	adds	r1, r5, #2
    43a6:	5262      	strh	r2, [r4, r1]
    43a8:	4425      	add	r5, r4
    43aa:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    43ae:	886b      	ldrh	r3, [r5, #2]
    43b0:	f043 0301 	orr.w	r3, r3, #1
    43b4:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    43b6:	4649      	mov	r1, r9
    43b8:	4620      	mov	r0, r4
    43ba:	f00a ff05 	bl	f1c8 <free_list_add>
}
    43be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    43c2:	bf00      	nop
    43c4:	000118e4 	.word	0x000118e4
    43c8:	000119b8 	.word	0x000119b8
    43cc:	000116a8 	.word	0x000116a8
    43d0:	000119d0 	.word	0x000119d0
    43d4:	000119e8 	.word	0x000119e8
    43d8:	00011a0c 	.word	0x00011a0c
    43dc:	00011a28 	.word	0x00011a28
    43e0:	00011a54 	.word	0x00011a54

000043e4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    43e4:	4684      	mov	ip, r0
	const char *sp = *str;
    43e6:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    43e8:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    43ea:	e005      	b.n	43f8 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    43ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    43f0:	3201      	adds	r2, #1
    43f2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    43f6:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    43f8:	7813      	ldrb	r3, [r2, #0]
    43fa:	4904      	ldr	r1, [pc, #16]	; (440c <extract_decimal+0x28>)
    43fc:	5c59      	ldrb	r1, [r3, r1]
    43fe:	f011 0f04 	tst.w	r1, #4
    4402:	d1f3      	bne.n	43ec <extract_decimal+0x8>
	}
	*str = sp;
    4404:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
    4408:	4770      	bx	lr
    440a:	bf00      	nop
    440c:	0001347d 	.word	0x0001347d

00004410 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    4410:	b570      	push	{r4, r5, r6, lr}
    4412:	b082      	sub	sp, #8
    4414:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    4416:	2300      	movs	r3, #0
    4418:	6003      	str	r3, [r0, #0]
    441a:	6043      	str	r3, [r0, #4]
    441c:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    441e:	784b      	ldrb	r3, [r1, #1]
    4420:	2b25      	cmp	r3, #37	; 0x25
    4422:	d002      	beq.n	442a <extract_conversion+0x1a>
    4424:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    4426:	2501      	movs	r5, #1
    4428:	e01f      	b.n	446a <extract_conversion+0x5a>
		conv->specifier = *sp++;
    442a:	1c88      	adds	r0, r1, #2
    442c:	70e3      	strb	r3, [r4, #3]
		return sp;
    442e:	e145      	b.n	46bc <extract_conversion+0x2ac>
			conv->flag_dash = true;
    4430:	7823      	ldrb	r3, [r4, #0]
    4432:	f043 0304 	orr.w	r3, r3, #4
    4436:	7023      	strb	r3, [r4, #0]
		if (loop) {
    4438:	b1b5      	cbz	r5, 4468 <extract_conversion+0x58>
			++sp;
    443a:	3601      	adds	r6, #1
    443c:	e014      	b.n	4468 <extract_conversion+0x58>
			conv->flag_plus = true;
    443e:	7823      	ldrb	r3, [r4, #0]
    4440:	f043 0308 	orr.w	r3, r3, #8
    4444:	7023      	strb	r3, [r4, #0]
			break;
    4446:	e7f7      	b.n	4438 <extract_conversion+0x28>
			conv->flag_space = true;
    4448:	7823      	ldrb	r3, [r4, #0]
    444a:	f043 0310 	orr.w	r3, r3, #16
    444e:	7023      	strb	r3, [r4, #0]
			break;
    4450:	e7f2      	b.n	4438 <extract_conversion+0x28>
			conv->flag_hash = true;
    4452:	7823      	ldrb	r3, [r4, #0]
    4454:	f043 0320 	orr.w	r3, r3, #32
    4458:	7023      	strb	r3, [r4, #0]
			break;
    445a:	e7ed      	b.n	4438 <extract_conversion+0x28>
			conv->flag_zero = true;
    445c:	7823      	ldrb	r3, [r4, #0]
    445e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4462:	7023      	strb	r3, [r4, #0]
			break;
    4464:	e7e8      	b.n	4438 <extract_conversion+0x28>
		switch (*sp) {
    4466:	2500      	movs	r5, #0
	} while (loop);
    4468:	b345      	cbz	r5, 44bc <extract_conversion+0xac>
		switch (*sp) {
    446a:	7833      	ldrb	r3, [r6, #0]
    446c:	3b20      	subs	r3, #32
    446e:	2b10      	cmp	r3, #16
    4470:	d8f9      	bhi.n	4466 <extract_conversion+0x56>
    4472:	a201      	add	r2, pc, #4	; (adr r2, 4478 <extract_conversion+0x68>)
    4474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4478:	00004449 	.word	0x00004449
    447c:	00004467 	.word	0x00004467
    4480:	00004467 	.word	0x00004467
    4484:	00004453 	.word	0x00004453
    4488:	00004467 	.word	0x00004467
    448c:	00004467 	.word	0x00004467
    4490:	00004467 	.word	0x00004467
    4494:	00004467 	.word	0x00004467
    4498:	00004467 	.word	0x00004467
    449c:	00004467 	.word	0x00004467
    44a0:	00004467 	.word	0x00004467
    44a4:	0000443f 	.word	0x0000443f
    44a8:	00004467 	.word	0x00004467
    44ac:	00004431 	.word	0x00004431
    44b0:	00004467 	.word	0x00004467
    44b4:	00004467 	.word	0x00004467
    44b8:	0000445d 	.word	0x0000445d
	if (conv->flag_zero && conv->flag_dash) {
    44bc:	7823      	ldrb	r3, [r4, #0]
    44be:	f003 0344 	and.w	r3, r3, #68	; 0x44
    44c2:	2b44      	cmp	r3, #68	; 0x44
    44c4:	d05f      	beq.n	4586 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    44c6:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    44c8:	7823      	ldrb	r3, [r4, #0]
    44ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    44ce:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    44d0:	7833      	ldrb	r3, [r6, #0]
    44d2:	2b2a      	cmp	r3, #42	; 0x2a
    44d4:	d05c      	beq.n	4590 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    44d6:	a801      	add	r0, sp, #4
    44d8:	f7ff ff84 	bl	43e4 <extract_decimal>
	if (sp != wp) {
    44dc:	9b01      	ldr	r3, [sp, #4]
    44de:	429e      	cmp	r6, r3
    44e0:	d00f      	beq.n	4502 <extract_conversion+0xf2>
		conv->width_present = true;
    44e2:	7823      	ldrb	r3, [r4, #0]
    44e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    44e8:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    44ea:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    44ec:	b2db      	uxtb	r3, r3
    44ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    44f2:	2800      	cmp	r0, #0
    44f4:	db54      	blt.n	45a0 <extract_conversion+0x190>
    44f6:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    44f8:	4313      	orrs	r3, r2
    44fa:	7822      	ldrb	r2, [r4, #0]
    44fc:	f363 0241 	bfi	r2, r3, #1, #1
    4500:	7022      	strb	r2, [r4, #0]
	return sp;
    4502:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    4504:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    4506:	781b      	ldrb	r3, [r3, #0]
    4508:	2b2e      	cmp	r3, #46	; 0x2e
    450a:	bf14      	ite	ne
    450c:	2300      	movne	r3, #0
    450e:	2301      	moveq	r3, #1
    4510:	7862      	ldrb	r2, [r4, #1]
    4512:	f363 0241 	bfi	r2, r3, #1, #1
    4516:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    4518:	2b00      	cmp	r3, #0
    451a:	d043      	beq.n	45a4 <extract_conversion+0x194>
	++sp;
    451c:	9b01      	ldr	r3, [sp, #4]
    451e:	1c5a      	adds	r2, r3, #1
    4520:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    4522:	785b      	ldrb	r3, [r3, #1]
    4524:	2b2a      	cmp	r3, #42	; 0x2a
    4526:	d03f      	beq.n	45a8 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    4528:	a801      	add	r0, sp, #4
    452a:	f7ff ff5b 	bl	43e4 <extract_decimal>
	conv->prec_value = prec;
    452e:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    4530:	7823      	ldrb	r3, [r4, #0]
    4532:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    4536:	2800      	cmp	r0, #0
    4538:	db3e      	blt.n	45b8 <extract_conversion+0x1a8>
    453a:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    453c:	4313      	orrs	r3, r2
    453e:	7822      	ldrb	r2, [r4, #0]
    4540:	f363 0241 	bfi	r2, r3, #1, #1
    4544:	7022      	strb	r2, [r4, #0]
	return sp;
    4546:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    4548:	7803      	ldrb	r3, [r0, #0]
    454a:	3b4c      	subs	r3, #76	; 0x4c
    454c:	2b2e      	cmp	r3, #46	; 0x2e
    454e:	f200 809d 	bhi.w	468c <extract_conversion+0x27c>
    4552:	e8df f003 	tbb	[pc, r3]
    4556:	9b90      	.short	0x9b90
    4558:	9b9b9b9b 	.word	0x9b9b9b9b
    455c:	9b9b9b9b 	.word	0x9b9b9b9b
    4560:	9b9b9b9b 	.word	0x9b9b9b9b
    4564:	9b9b9b9b 	.word	0x9b9b9b9b
    4568:	9b9b9b9b 	.word	0x9b9b9b9b
    456c:	9b9b9b9b 	.word	0x9b9b9b9b
    4570:	9b339b9b 	.word	0x9b339b9b
    4574:	9b459b57 	.word	0x9b459b57
    4578:	9b9b9b9b 	.word	0x9b9b9b9b
    457c:	9b899b9b 	.word	0x9b899b9b
    4580:	9b9b9b9b 	.word	0x9b9b9b9b
    4584:	82          	.byte	0x82
    4585:	00          	.byte	0x00
		conv->flag_zero = false;
    4586:	7823      	ldrb	r3, [r4, #0]
    4588:	f36f 1386 	bfc	r3, #6, #1
    458c:	7023      	strb	r3, [r4, #0]
    458e:	e79a      	b.n	44c6 <extract_conversion+0xb6>
		conv->width_star = true;
    4590:	7863      	ldrb	r3, [r4, #1]
    4592:	f043 0301 	orr.w	r3, r3, #1
    4596:	7063      	strb	r3, [r4, #1]
		return ++sp;
    4598:	4633      	mov	r3, r6
    459a:	3301      	adds	r3, #1
    459c:	9301      	str	r3, [sp, #4]
    459e:	e7b1      	b.n	4504 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    45a0:	2201      	movs	r2, #1
    45a2:	e7a9      	b.n	44f8 <extract_conversion+0xe8>
		return sp;
    45a4:	9801      	ldr	r0, [sp, #4]
    45a6:	e7cf      	b.n	4548 <extract_conversion+0x138>
		conv->prec_star = true;
    45a8:	7863      	ldrb	r3, [r4, #1]
    45aa:	f043 0304 	orr.w	r3, r3, #4
    45ae:	7063      	strb	r3, [r4, #1]
		return ++sp;
    45b0:	4610      	mov	r0, r2
    45b2:	3001      	adds	r0, #1
    45b4:	9001      	str	r0, [sp, #4]
    45b6:	e7c7      	b.n	4548 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    45b8:	2201      	movs	r2, #1
    45ba:	e7bf      	b.n	453c <extract_conversion+0x12c>
		if (*++sp == 'h') {
    45bc:	1c42      	adds	r2, r0, #1
    45be:	7843      	ldrb	r3, [r0, #1]
    45c0:	2b68      	cmp	r3, #104	; 0x68
    45c2:	d006      	beq.n	45d2 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    45c4:	7863      	ldrb	r3, [r4, #1]
    45c6:	2102      	movs	r1, #2
    45c8:	f361 03c6 	bfi	r3, r1, #3, #4
    45cc:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    45ce:	4610      	mov	r0, r2
    45d0:	e01e      	b.n	4610 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    45d2:	7863      	ldrb	r3, [r4, #1]
    45d4:	2201      	movs	r2, #1
    45d6:	f362 03c6 	bfi	r3, r2, #3, #4
    45da:	7063      	strb	r3, [r4, #1]
			++sp;
    45dc:	3002      	adds	r0, #2
    45de:	e017      	b.n	4610 <extract_conversion+0x200>
		if (*++sp == 'l') {
    45e0:	1c42      	adds	r2, r0, #1
    45e2:	7843      	ldrb	r3, [r0, #1]
    45e4:	2b6c      	cmp	r3, #108	; 0x6c
    45e6:	d006      	beq.n	45f6 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    45e8:	7863      	ldrb	r3, [r4, #1]
    45ea:	2103      	movs	r1, #3
    45ec:	f361 03c6 	bfi	r3, r1, #3, #4
    45f0:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    45f2:	4610      	mov	r0, r2
    45f4:	e00c      	b.n	4610 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    45f6:	7863      	ldrb	r3, [r4, #1]
    45f8:	2204      	movs	r2, #4
    45fa:	f362 03c6 	bfi	r3, r2, #3, #4
    45fe:	7063      	strb	r3, [r4, #1]
			++sp;
    4600:	3002      	adds	r0, #2
    4602:	e005      	b.n	4610 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    4604:	7863      	ldrb	r3, [r4, #1]
    4606:	2205      	movs	r2, #5
    4608:	f362 03c6 	bfi	r3, r2, #3, #4
    460c:	7063      	strb	r3, [r4, #1]
		++sp;
    460e:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    4610:	f810 3b01 	ldrb.w	r3, [r0], #1
    4614:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    4616:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    461a:	2a37      	cmp	r2, #55	; 0x37
    461c:	d87d      	bhi.n	471a <extract_conversion+0x30a>
    461e:	e8df f002 	tbb	[pc, r2]
    4622:	7c5e      	.short	0x7c5e
    4624:	5e5e7c7c 	.word	0x5e5e7c7c
    4628:	7c7c7c5e 	.word	0x7c7c7c5e
    462c:	7c7c7c7c 	.word	0x7c7c7c7c
    4630:	7c7c7c7c 	.word	0x7c7c7c7c
    4634:	7c7c7c7c 	.word	0x7c7c7c7c
    4638:	7c7c4f7c 	.word	0x7c7c4f7c
    463c:	7c7c7c7c 	.word	0x7c7c7c7c
    4640:	7c5e7c7c 	.word	0x7c5e7c7c
    4644:	5e5e3a4f 	.word	0x5e5e3a4f
    4648:	7c3a7c5e 	.word	0x7c3a7c5e
    464c:	657c7c7c 	.word	0x657c7c7c
    4650:	7c7c714f 	.word	0x7c7c714f
    4654:	7c4f7c71 	.word	0x7c4f7c71
    4658:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    465a:	7863      	ldrb	r3, [r4, #1]
    465c:	2206      	movs	r2, #6
    465e:	f362 03c6 	bfi	r3, r2, #3, #4
    4662:	7063      	strb	r3, [r4, #1]
		++sp;
    4664:	3001      	adds	r0, #1
		break;
    4666:	e7d3      	b.n	4610 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    4668:	7863      	ldrb	r3, [r4, #1]
    466a:	2207      	movs	r2, #7
    466c:	f362 03c6 	bfi	r3, r2, #3, #4
    4670:	7063      	strb	r3, [r4, #1]
		++sp;
    4672:	3001      	adds	r0, #1
		break;
    4674:	e7cc      	b.n	4610 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    4676:	7863      	ldrb	r3, [r4, #1]
    4678:	2208      	movs	r2, #8
    467a:	f362 03c6 	bfi	r3, r2, #3, #4
    467e:	7063      	strb	r3, [r4, #1]
		++sp;
    4680:	3001      	adds	r0, #1
		conv->unsupported = true;
    4682:	7823      	ldrb	r3, [r4, #0]
    4684:	f043 0302 	orr.w	r3, r3, #2
    4688:	7023      	strb	r3, [r4, #0]
		break;
    468a:	e7c1      	b.n	4610 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    468c:	7863      	ldrb	r3, [r4, #1]
    468e:	f36f 03c6 	bfc	r3, #3, #4
    4692:	7063      	strb	r3, [r4, #1]
		break;
    4694:	e7bc      	b.n	4610 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    4696:	78a2      	ldrb	r2, [r4, #2]
    4698:	2101      	movs	r1, #1
    469a:	f361 0202 	bfi	r2, r1, #0, #3
    469e:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    46a0:	7862      	ldrb	r2, [r4, #1]
    46a2:	f002 0278 	and.w	r2, r2, #120	; 0x78
    46a6:	2a40      	cmp	r2, #64	; 0x40
    46a8:	d010      	beq.n	46cc <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    46aa:	2b63      	cmp	r3, #99	; 0x63
    46ac:	d013      	beq.n	46d6 <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    46ae:	7823      	ldrb	r3, [r4, #0]
    46b0:	f3c3 0240 	ubfx	r2, r3, #1, #1
    46b4:	4315      	orrs	r5, r2
    46b6:	f365 0341 	bfi	r3, r5, #1, #1
    46ba:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    46bc:	b002      	add	sp, #8
    46be:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    46c0:	78a2      	ldrb	r2, [r4, #2]
    46c2:	2102      	movs	r1, #2
    46c4:	f361 0202 	bfi	r2, r1, #0, #3
    46c8:	70a2      	strb	r2, [r4, #2]
    46ca:	e7e9      	b.n	46a0 <extract_conversion+0x290>
			conv->invalid = true;
    46cc:	7821      	ldrb	r1, [r4, #0]
    46ce:	f041 0101 	orr.w	r1, r1, #1
    46d2:	7021      	strb	r1, [r4, #0]
    46d4:	e7e9      	b.n	46aa <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    46d6:	1e15      	subs	r5, r2, #0
    46d8:	bf18      	it	ne
    46da:	2501      	movne	r5, #1
    46dc:	e7e7      	b.n	46ae <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    46de:	78a3      	ldrb	r3, [r4, #2]
    46e0:	2204      	movs	r2, #4
    46e2:	f362 0302 	bfi	r3, r2, #0, #3
    46e6:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    46e8:	2501      	movs	r5, #1
			break;
    46ea:	e7e0      	b.n	46ae <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    46ec:	78a3      	ldrb	r3, [r4, #2]
    46ee:	2203      	movs	r2, #3
    46f0:	f362 0302 	bfi	r3, r2, #0, #3
    46f4:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    46f6:	7863      	ldrb	r3, [r4, #1]
    46f8:	f003 0378 	and.w	r3, r3, #120	; 0x78
    46fc:	2b40      	cmp	r3, #64	; 0x40
    46fe:	d1d6      	bne.n	46ae <extract_conversion+0x29e>
			unsupported = true;
    4700:	2501      	movs	r5, #1
    4702:	e7d4      	b.n	46ae <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    4704:	78a3      	ldrb	r3, [r4, #2]
    4706:	2203      	movs	r2, #3
    4708:	f362 0302 	bfi	r3, r2, #0, #3
    470c:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    470e:	7863      	ldrb	r3, [r4, #1]
    4710:	f013 0f78 	tst.w	r3, #120	; 0x78
    4714:	d0cb      	beq.n	46ae <extract_conversion+0x29e>
			unsupported = true;
    4716:	2501      	movs	r5, #1
    4718:	e7c9      	b.n	46ae <extract_conversion+0x29e>
		conv->invalid = true;
    471a:	7823      	ldrb	r3, [r4, #0]
    471c:	f043 0301 	orr.w	r3, r3, #1
    4720:	7023      	strb	r3, [r4, #0]
		break;
    4722:	e7c4      	b.n	46ae <extract_conversion+0x29e>

00004724 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    4724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4728:	b083      	sub	sp, #12
    472a:	4604      	mov	r4, r0
    472c:	460d      	mov	r5, r1
    472e:	9201      	str	r2, [sp, #4]
    4730:	469a      	mov	sl, r3
    4732:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    4734:	78d3      	ldrb	r3, [r2, #3]
    4736:	4a32      	ldr	r2, [pc, #200]	; (4800 <encode_uint+0xdc>)
    4738:	f813 b002 	ldrb.w	fp, [r3, r2]
    473c:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    4740:	2b6f      	cmp	r3, #111	; 0x6f
    4742:	d00f      	beq.n	4764 <encode_uint+0x40>
    4744:	d906      	bls.n	4754 <encode_uint+0x30>
    4746:	2b70      	cmp	r3, #112	; 0x70
    4748:	d00f      	beq.n	476a <encode_uint+0x46>
    474a:	2b78      	cmp	r3, #120	; 0x78
    474c:	d110      	bne.n	4770 <encode_uint+0x4c>
		return 16;
    474e:	f04f 0910 	mov.w	r9, #16
    4752:	e023      	b.n	479c <encode_uint+0x78>
	switch (specifier) {
    4754:	2b58      	cmp	r3, #88	; 0x58
    4756:	d002      	beq.n	475e <encode_uint+0x3a>
    4758:	f04f 090a 	mov.w	r9, #10
    475c:	e01e      	b.n	479c <encode_uint+0x78>
		return 16;
    475e:	f04f 0910 	mov.w	r9, #16
    4762:	e01b      	b.n	479c <encode_uint+0x78>
		return 8;
    4764:	f04f 0908 	mov.w	r9, #8
    4768:	e018      	b.n	479c <encode_uint+0x78>
		return 16;
    476a:	f04f 0910 	mov.w	r9, #16
    476e:	e015      	b.n	479c <encode_uint+0x78>
	switch (specifier) {
    4770:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    4774:	e012      	b.n	479c <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    4776:	b2d2      	uxtb	r2, r2
    4778:	3230      	adds	r2, #48	; 0x30
    477a:	b2d2      	uxtb	r2, r2
    477c:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    4780:	463a      	mov	r2, r7
    4782:	4643      	mov	r3, r8
    4784:	4620      	mov	r0, r4
    4786:	4629      	mov	r1, r5
    4788:	f7fc f928 	bl	9dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    478c:	42bc      	cmp	r4, r7
    478e:	f175 0300 	sbcs.w	r3, r5, #0
    4792:	d319      	bcc.n	47c8 <encode_uint+0xa4>
    4794:	4556      	cmp	r6, sl
    4796:	d917      	bls.n	47c8 <encode_uint+0xa4>
		value /= radix;
    4798:	4604      	mov	r4, r0
    479a:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    479c:	f04f 0800 	mov.w	r8, #0
    47a0:	464f      	mov	r7, r9
    47a2:	464a      	mov	r2, r9
    47a4:	4643      	mov	r3, r8
    47a6:	4620      	mov	r0, r4
    47a8:	4629      	mov	r1, r5
    47aa:	f7fc f917 	bl	9dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    47ae:	2a09      	cmp	r2, #9
    47b0:	d9e1      	bls.n	4776 <encode_uint+0x52>
    47b2:	f1bb 0f01 	cmp.w	fp, #1
    47b6:	d003      	beq.n	47c0 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    47b8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    47ba:	3257      	adds	r2, #87	; 0x57
    47bc:	b2d2      	uxtb	r2, r2
    47be:	e7dd      	b.n	477c <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    47c0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    47c2:	3237      	adds	r2, #55	; 0x37
    47c4:	b2d2      	uxtb	r2, r2
    47c6:	e7d9      	b.n	477c <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    47c8:	9b01      	ldr	r3, [sp, #4]
    47ca:	781b      	ldrb	r3, [r3, #0]
    47cc:	f013 0f20 	tst.w	r3, #32
    47d0:	d005      	beq.n	47de <encode_uint+0xba>
		if (radix == 8) {
    47d2:	f1b9 0f08 	cmp.w	r9, #8
    47d6:	d006      	beq.n	47e6 <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    47d8:	f1b9 0f10 	cmp.w	r9, #16
    47dc:	d009      	beq.n	47f2 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    47de:	4630      	mov	r0, r6
    47e0:	b003      	add	sp, #12
    47e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    47e6:	9a01      	ldr	r2, [sp, #4]
    47e8:	7893      	ldrb	r3, [r2, #2]
    47ea:	f043 0308 	orr.w	r3, r3, #8
    47ee:	7093      	strb	r3, [r2, #2]
    47f0:	e7f5      	b.n	47de <encode_uint+0xba>
			conv->altform_0c = true;
    47f2:	9a01      	ldr	r2, [sp, #4]
    47f4:	7893      	ldrb	r3, [r2, #2]
    47f6:	f043 0310 	orr.w	r3, r3, #16
    47fa:	7093      	strb	r3, [r2, #2]
    47fc:	e7ef      	b.n	47de <encode_uint+0xba>
    47fe:	bf00      	nop
    4800:	0001347d 	.word	0x0001347d

00004804 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    4804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4808:	b091      	sub	sp, #68	; 0x44
    480a:	4606      	mov	r6, r0
    480c:	460d      	mov	r5, r1
    480e:	4691      	mov	r9, r2
    4810:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    4812:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    4814:	f899 0000 	ldrb.w	r0, [r9]
    4818:	2800      	cmp	r0, #0
    481a:	f000 82d5 	beq.w	4dc8 <cbvprintf+0x5c4>
		if (*fp != '%') {
    481e:	2825      	cmp	r0, #37	; 0x25
    4820:	d008      	beq.n	4834 <cbvprintf+0x30>
			OUTC(*fp++);
    4822:	f109 0901 	add.w	r9, r9, #1
    4826:	4629      	mov	r1, r5
    4828:	47b0      	blx	r6
    482a:	2800      	cmp	r0, #0
    482c:	f2c0 82cd 	blt.w	4dca <cbvprintf+0x5c6>
    4830:	3401      	adds	r4, #1
			continue;
    4832:	e7ef      	b.n	4814 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    4834:	2300      	movs	r3, #0
    4836:	9304      	str	r3, [sp, #16]
    4838:	9305      	str	r3, [sp, #20]
    483a:	9306      	str	r3, [sp, #24]
    483c:	9307      	str	r3, [sp, #28]
    483e:	9308      	str	r3, [sp, #32]
    4840:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    4842:	4649      	mov	r1, r9
    4844:	a806      	add	r0, sp, #24
    4846:	f7ff fde3 	bl	4410 <extract_conversion>
    484a:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    484c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    4850:	f013 0f01 	tst.w	r3, #1
    4854:	f000 8097 	beq.w	4986 <cbvprintf+0x182>
			width = va_arg(ap, int);
    4858:	9b03      	ldr	r3, [sp, #12]
    485a:	1d1a      	adds	r2, r3, #4
    485c:	9203      	str	r2, [sp, #12]
    485e:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    4860:	2f00      	cmp	r7, #0
    4862:	f2c0 8088 	blt.w	4976 <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    4866:	f89d 3019 	ldrb.w	r3, [sp, #25]
    486a:	f013 0f04 	tst.w	r3, #4
    486e:	f000 809c 	beq.w	49aa <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    4872:	9b03      	ldr	r3, [sp, #12]
    4874:	1d1a      	adds	r2, r3, #4
    4876:	9203      	str	r2, [sp, #12]
    4878:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    487c:	f1ba 0f00 	cmp.w	sl, #0
    4880:	f2c0 808a 	blt.w	4998 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    4884:	2300      	movs	r3, #0
    4886:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    4888:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    488a:	f89d 301a 	ldrb.w	r3, [sp, #26]
    488e:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    4892:	f89d 1019 	ldrb.w	r1, [sp, #25]
    4896:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    489a:	2b01      	cmp	r3, #1
    489c:	f000 808e 	beq.w	49bc <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    48a0:	2b02      	cmp	r3, #2
    48a2:	f000 80d3 	beq.w	4a4c <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    48a6:	2b04      	cmp	r3, #4
    48a8:	f000 8124 	beq.w	4af4 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    48ac:	2b03      	cmp	r3, #3
    48ae:	f000 813b 	beq.w	4b28 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    48b2:	f89d 8018 	ldrb.w	r8, [sp, #24]
    48b6:	f018 0b03 	ands.w	fp, r8, #3
    48ba:	f040 813b 	bne.w	4b34 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    48be:	f89d 301b 	ldrb.w	r3, [sp, #27]
    48c2:	3b25      	subs	r3, #37	; 0x25
    48c4:	2b53      	cmp	r3, #83	; 0x53
    48c6:	f200 81e6 	bhi.w	4c96 <cbvprintf+0x492>
    48ca:	e8df f013 	tbh	[pc, r3, lsl #1]
    48ce:	0140      	.short	0x0140
    48d0:	01e401e4 	.word	0x01e401e4
    48d4:	01e401e4 	.word	0x01e401e4
    48d8:	01e401e4 	.word	0x01e401e4
    48dc:	01e401e4 	.word	0x01e401e4
    48e0:	01e401e4 	.word	0x01e401e4
    48e4:	01e401e4 	.word	0x01e401e4
    48e8:	01e401e4 	.word	0x01e401e4
    48ec:	01e401e4 	.word	0x01e401e4
    48f0:	01e401e4 	.word	0x01e401e4
    48f4:	01e401e4 	.word	0x01e401e4
    48f8:	01e401e4 	.word	0x01e401e4
    48fc:	01e401e4 	.word	0x01e401e4
    4900:	01e401e4 	.word	0x01e401e4
    4904:	01e401e4 	.word	0x01e401e4
    4908:	01e401e4 	.word	0x01e401e4
    490c:	01e401e4 	.word	0x01e401e4
    4910:	01e401e4 	.word	0x01e401e4
    4914:	01e401e4 	.word	0x01e401e4
    4918:	01e401e4 	.word	0x01e401e4
    491c:	01e401e4 	.word	0x01e401e4
    4920:	01e401e4 	.word	0x01e401e4
    4924:	01e401e4 	.word	0x01e401e4
    4928:	01e401e4 	.word	0x01e401e4
    492c:	01e401e4 	.word	0x01e401e4
    4930:	01e401e4 	.word	0x01e401e4
    4934:	01e40181 	.word	0x01e40181
    4938:	01e401e4 	.word	0x01e401e4
    493c:	01e401e4 	.word	0x01e401e4
    4940:	01e401e4 	.word	0x01e401e4
    4944:	01e401e4 	.word	0x01e401e4
    4948:	015e01e4 	.word	0x015e01e4
    494c:	01e40167 	.word	0x01e40167
    4950:	01e401e4 	.word	0x01e401e4
    4954:	016701e4 	.word	0x016701e4
    4958:	01e401e4 	.word	0x01e401e4
    495c:	01e401e4 	.word	0x01e401e4
    4960:	018101be 	.word	0x018101be
    4964:	01e401a2 	.word	0x01e401a2
    4968:	014d01e4 	.word	0x014d01e4
    496c:	018101e4 	.word	0x018101e4
    4970:	01e401e4 	.word	0x01e401e4
    4974:	0181      	.short	0x0181
				conv->flag_dash = true;
    4976:	f89d 3018 	ldrb.w	r3, [sp, #24]
    497a:	f043 0304 	orr.w	r3, r3, #4
    497e:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    4982:	427f      	negs	r7, r7
    4984:	e76f      	b.n	4866 <cbvprintf+0x62>
		} else if (conv->width_present) {
    4986:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    498a:	2b00      	cmp	r3, #0
    498c:	db02      	blt.n	4994 <cbvprintf+0x190>
		int width = -1;
    498e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    4992:	e768      	b.n	4866 <cbvprintf+0x62>
			width = conv->width_value;
    4994:	9f07      	ldr	r7, [sp, #28]
    4996:	e766      	b.n	4866 <cbvprintf+0x62>
				conv->prec_present = false;
    4998:	f89d 3019 	ldrb.w	r3, [sp, #25]
    499c:	f36f 0341 	bfc	r3, #1, #1
    49a0:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    49a4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    49a8:	e76c      	b.n	4884 <cbvprintf+0x80>
		} else if (conv->prec_present) {
    49aa:	f013 0f02 	tst.w	r3, #2
    49ae:	d002      	beq.n	49b6 <cbvprintf+0x1b2>
			precision = conv->prec_value;
    49b0:	f8dd a020 	ldr.w	sl, [sp, #32]
    49b4:	e766      	b.n	4884 <cbvprintf+0x80>
		int precision = -1;
    49b6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    49ba:	e763      	b.n	4884 <cbvprintf+0x80>
			switch (length_mod) {
    49bc:	1ecb      	subs	r3, r1, #3
    49be:	2b04      	cmp	r3, #4
    49c0:	d804      	bhi.n	49cc <cbvprintf+0x1c8>
    49c2:	e8df f003 	tbb	[pc, r3]
    49c6:	1d0b      	.short	0x1d0b
    49c8:	3529      	.short	0x3529
    49ca:	35          	.byte	0x35
    49cb:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    49cc:	9b03      	ldr	r3, [sp, #12]
    49ce:	1d1a      	adds	r2, r3, #4
    49d0:	9203      	str	r2, [sp, #12]
    49d2:	681b      	ldr	r3, [r3, #0]
    49d4:	17da      	asrs	r2, r3, #31
    49d6:	9304      	str	r3, [sp, #16]
    49d8:	9205      	str	r2, [sp, #20]
				break;
    49da:	e006      	b.n	49ea <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    49dc:	9b03      	ldr	r3, [sp, #12]
    49de:	1d1a      	adds	r2, r3, #4
    49e0:	9203      	str	r2, [sp, #12]
    49e2:	681b      	ldr	r3, [r3, #0]
    49e4:	17da      	asrs	r2, r3, #31
    49e6:	9304      	str	r3, [sp, #16]
    49e8:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    49ea:	2901      	cmp	r1, #1
    49ec:	d028      	beq.n	4a40 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    49ee:	2902      	cmp	r1, #2
    49f0:	f47f af5f 	bne.w	48b2 <cbvprintf+0xae>
				value->sint = (short)value->sint;
    49f4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    49f8:	17da      	asrs	r2, r3, #31
    49fa:	9304      	str	r3, [sp, #16]
    49fc:	9205      	str	r2, [sp, #20]
    49fe:	e758      	b.n	48b2 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    4a00:	9b03      	ldr	r3, [sp, #12]
    4a02:	3307      	adds	r3, #7
    4a04:	f023 0307 	bic.w	r3, r3, #7
    4a08:	f103 0208 	add.w	r2, r3, #8
    4a0c:	9203      	str	r2, [sp, #12]
    4a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    4a12:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    4a16:	e7e8      	b.n	49ea <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    4a18:	9b03      	ldr	r3, [sp, #12]
    4a1a:	3307      	adds	r3, #7
    4a1c:	f023 0307 	bic.w	r3, r3, #7
    4a20:	f103 0208 	add.w	r2, r3, #8
    4a24:	9203      	str	r2, [sp, #12]
    4a26:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    4a2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    4a2e:	e7dc      	b.n	49ea <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4a30:	9b03      	ldr	r3, [sp, #12]
    4a32:	1d1a      	adds	r2, r3, #4
    4a34:	9203      	str	r2, [sp, #12]
    4a36:	681b      	ldr	r3, [r3, #0]
    4a38:	17da      	asrs	r2, r3, #31
				value->sint =
    4a3a:	9304      	str	r3, [sp, #16]
    4a3c:	9205      	str	r2, [sp, #20]
				break;
    4a3e:	e7d4      	b.n	49ea <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    4a40:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4a44:	9304      	str	r3, [sp, #16]
    4a46:	2300      	movs	r3, #0
    4a48:	9305      	str	r3, [sp, #20]
    4a4a:	e732      	b.n	48b2 <cbvprintf+0xae>
			switch (length_mod) {
    4a4c:	1ecb      	subs	r3, r1, #3
    4a4e:	2b04      	cmp	r3, #4
    4a50:	d804      	bhi.n	4a5c <cbvprintf+0x258>
    4a52:	e8df f003 	tbb	[pc, r3]
    4a56:	1f0b      	.short	0x1f0b
    4a58:	4135      	.short	0x4135
    4a5a:	41          	.byte	0x41
    4a5b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    4a5c:	9b03      	ldr	r3, [sp, #12]
    4a5e:	1d1a      	adds	r2, r3, #4
    4a60:	9203      	str	r2, [sp, #12]
    4a62:	681b      	ldr	r3, [r3, #0]
    4a64:	9304      	str	r3, [sp, #16]
    4a66:	2300      	movs	r3, #0
    4a68:	9305      	str	r3, [sp, #20]
				break;
    4a6a:	e01e      	b.n	4aaa <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    4a6c:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    4a70:	2b63      	cmp	r3, #99	; 0x63
    4a72:	d007      	beq.n	4a84 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    4a74:	9b03      	ldr	r3, [sp, #12]
    4a76:	1d1a      	adds	r2, r3, #4
    4a78:	9203      	str	r2, [sp, #12]
    4a7a:	681b      	ldr	r3, [r3, #0]
    4a7c:	9304      	str	r3, [sp, #16]
    4a7e:	2300      	movs	r3, #0
    4a80:	9305      	str	r3, [sp, #20]
    4a82:	e012      	b.n	4aaa <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    4a84:	9b03      	ldr	r3, [sp, #12]
    4a86:	1d1a      	adds	r2, r3, #4
    4a88:	9203      	str	r2, [sp, #12]
    4a8a:	681b      	ldr	r3, [r3, #0]
    4a8c:	9304      	str	r3, [sp, #16]
    4a8e:	2300      	movs	r3, #0
    4a90:	9305      	str	r3, [sp, #20]
    4a92:	e00a      	b.n	4aaa <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    4a94:	9b03      	ldr	r3, [sp, #12]
    4a96:	3307      	adds	r3, #7
    4a98:	f023 0307 	bic.w	r3, r3, #7
    4a9c:	f103 0208 	add.w	r2, r3, #8
    4aa0:	9203      	str	r2, [sp, #12]
    4aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    4aa6:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    4aaa:	2901      	cmp	r1, #1
    4aac:	d01c      	beq.n	4ae8 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    4aae:	2902      	cmp	r1, #2
    4ab0:	f47f aeff 	bne.w	48b2 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    4ab4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    4ab8:	9304      	str	r3, [sp, #16]
    4aba:	2300      	movs	r3, #0
    4abc:	9305      	str	r3, [sp, #20]
    4abe:	e6f8      	b.n	48b2 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    4ac0:	9b03      	ldr	r3, [sp, #12]
    4ac2:	3307      	adds	r3, #7
    4ac4:	f023 0307 	bic.w	r3, r3, #7
    4ac8:	f103 0208 	add.w	r2, r3, #8
    4acc:	9203      	str	r2, [sp, #12]
    4ace:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    4ad2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    4ad6:	e7e8      	b.n	4aaa <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    4ad8:	9b03      	ldr	r3, [sp, #12]
    4ada:	1d1a      	adds	r2, r3, #4
    4adc:	9203      	str	r2, [sp, #12]
    4ade:	681b      	ldr	r3, [r3, #0]
				value->uint =
    4ae0:	9304      	str	r3, [sp, #16]
    4ae2:	2300      	movs	r3, #0
    4ae4:	9305      	str	r3, [sp, #20]
				break;
    4ae6:	e7e0      	b.n	4aaa <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    4ae8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4aec:	9304      	str	r3, [sp, #16]
    4aee:	2300      	movs	r3, #0
    4af0:	9305      	str	r3, [sp, #20]
    4af2:	e6de      	b.n	48b2 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    4af4:	2908      	cmp	r1, #8
    4af6:	d00b      	beq.n	4b10 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    4af8:	9b03      	ldr	r3, [sp, #12]
    4afa:	3307      	adds	r3, #7
    4afc:	f023 0307 	bic.w	r3, r3, #7
    4b00:	f103 0208 	add.w	r2, r3, #8
    4b04:	9203      	str	r2, [sp, #12]
    4b06:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4b0e:	e6d0      	b.n	48b2 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    4b10:	9b03      	ldr	r3, [sp, #12]
    4b12:	3307      	adds	r3, #7
    4b14:	f023 0307 	bic.w	r3, r3, #7
    4b18:	f103 0208 	add.w	r2, r3, #8
    4b1c:	9203      	str	r2, [sp, #12]
    4b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b22:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4b26:	e6c4      	b.n	48b2 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    4b28:	9b03      	ldr	r3, [sp, #12]
    4b2a:	1d1a      	adds	r2, r3, #4
    4b2c:	9203      	str	r2, [sp, #12]
    4b2e:	681b      	ldr	r3, [r3, #0]
    4b30:	9304      	str	r3, [sp, #16]
    4b32:	e6be      	b.n	48b2 <cbvprintf+0xae>
			OUTS(sp, fp);
    4b34:	9f02      	ldr	r7, [sp, #8]
    4b36:	463b      	mov	r3, r7
    4b38:	464a      	mov	r2, r9
    4b3a:	4629      	mov	r1, r5
    4b3c:	4630      	mov	r0, r6
    4b3e:	f00a fb4f 	bl	f1e0 <outs>
    4b42:	2800      	cmp	r0, #0
    4b44:	f2c0 8141 	blt.w	4dca <cbvprintf+0x5c6>
    4b48:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    4b4a:	46b9      	mov	r9, r7
			continue;
    4b4c:	e662      	b.n	4814 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    4b4e:	4629      	mov	r1, r5
    4b50:	2025      	movs	r0, #37	; 0x25
    4b52:	47b0      	blx	r6
    4b54:	2800      	cmp	r0, #0
    4b56:	f2c0 8138 	blt.w	4dca <cbvprintf+0x5c6>
    4b5a:	3401      	adds	r4, #1
		char sign = 0;
    4b5c:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    4b5e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    4b62:	f04f 0900 	mov.w	r9, #0
			break;
    4b66:	e09b      	b.n	4ca0 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    4b68:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    4b6c:	f1ba 0f00 	cmp.w	sl, #0
    4b70:	db07      	blt.n	4b82 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    4b72:	4651      	mov	r1, sl
    4b74:	4648      	mov	r0, r9
    4b76:	f00b fe8e 	bl	10896 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    4b7a:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    4b7e:	46d8      	mov	r8, fp
			precision = -1;

			break;
    4b80:	e08e      	b.n	4ca0 <cbvprintf+0x49c>
				len = strlen(bps);
    4b82:	4648      	mov	r0, r9
    4b84:	f7fc f967 	bl	e56 <strlen>
    4b88:	e7f7      	b.n	4b7a <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    4b8a:	9b04      	ldr	r3, [sp, #16]
    4b8c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    4b90:	46d8      	mov	r8, fp
			bpe = buf + 1;
    4b92:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    4b96:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    4b9a:	e081      	b.n	4ca0 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    4b9c:	f018 0f08 	tst.w	r8, #8
    4ba0:	d105      	bne.n	4bae <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    4ba2:	f018 0810 	ands.w	r8, r8, #16
    4ba6:	d004      	beq.n	4bb2 <cbvprintf+0x3ae>
				sign = ' ';
    4ba8:	f04f 0820 	mov.w	r8, #32
    4bac:	e001      	b.n	4bb2 <cbvprintf+0x3ae>
				sign = '+';
    4bae:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    4bb2:	9a04      	ldr	r2, [sp, #16]
    4bb4:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    4bb6:	2b00      	cmp	r3, #0
    4bb8:	db02      	blt.n	4bc0 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    4bba:	9204      	str	r2, [sp, #16]
    4bbc:	9305      	str	r3, [sp, #20]
    4bbe:	e008      	b.n	4bd2 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    4bc0:	4252      	negs	r2, r2
    4bc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4bc6:	9204      	str	r2, [sp, #16]
    4bc8:	9305      	str	r3, [sp, #20]
				sign = '-';
    4bca:	f04f 082d 	mov.w	r8, #45	; 0x2d
    4bce:	e000      	b.n	4bd2 <cbvprintf+0x3ce>
		switch (conv->specifier) {
    4bd0:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    4bd2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    4bd6:	9300      	str	r3, [sp, #0]
    4bd8:	ab0a      	add	r3, sp, #40	; 0x28
    4bda:	aa06      	add	r2, sp, #24
    4bdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4be0:	f7ff fda0 	bl	4724 <encode_uint>
    4be4:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    4be6:	f1ba 0f00 	cmp.w	sl, #0
    4bea:	f2c0 8088 	blt.w	4cfe <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    4bee:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    4bf2:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    4bf6:	f89d 2018 	ldrb.w	r2, [sp, #24]
    4bfa:	f36f 1286 	bfc	r2, #6, #1
    4bfe:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    4c02:	459a      	cmp	sl, r3
    4c04:	d97e      	bls.n	4d04 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    4c06:	ebaa 0303 	sub.w	r3, sl, r3
    4c0a:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    4c0c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    4c10:	e046      	b.n	4ca0 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    4c12:	9804      	ldr	r0, [sp, #16]
    4c14:	b928      	cbnz	r0, 4c22 <cbvprintf+0x41e>
		char sign = 0;
    4c16:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    4c18:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 4dd0 <cbvprintf+0x5cc>
			bps = "(nil)";
    4c1c:	f1aa 0905 	sub.w	r9, sl, #5
    4c20:	e03e      	b.n	4ca0 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4c22:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    4c26:	9300      	str	r3, [sp, #0]
    4c28:	ab0a      	add	r3, sp, #40	; 0x28
    4c2a:	aa06      	add	r2, sp, #24
    4c2c:	2100      	movs	r1, #0
    4c2e:	f7ff fd79 	bl	4724 <encode_uint>
    4c32:	4681      	mov	r9, r0
				conv->altform_0c = true;
    4c34:	f89d 301a 	ldrb.w	r3, [sp, #26]
    4c38:	f043 0310 	orr.w	r3, r3, #16
    4c3c:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    4c40:	2378      	movs	r3, #120	; 0x78
    4c42:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    4c46:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    4c48:	e7cd      	b.n	4be6 <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    4c4a:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    4c4c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    4c50:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    4c54:	2b07      	cmp	r3, #7
    4c56:	d806      	bhi.n	4c66 <cbvprintf+0x462>
    4c58:	e8df f003 	tbb	[pc, r3]
    4c5c:	0f0d0b04 	.word	0x0f0d0b04
    4c60:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    4c64:	6014      	str	r4, [r2, #0]
		char sign = 0;
    4c66:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    4c68:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    4c6c:	f04f 0900 	mov.w	r9, #0
}
    4c70:	e016      	b.n	4ca0 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    4c72:	7014      	strb	r4, [r2, #0]
		break;
    4c74:	e7f7      	b.n	4c66 <cbvprintf+0x462>
		*(short *)dp = (short)count;
    4c76:	8014      	strh	r4, [r2, #0]
		break;
    4c78:	e7f5      	b.n	4c66 <cbvprintf+0x462>
		*(long *)dp = (long)count;
    4c7a:	6014      	str	r4, [r2, #0]
		break;
    4c7c:	e7f3      	b.n	4c66 <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    4c7e:	17e3      	asrs	r3, r4, #31
    4c80:	6014      	str	r4, [r2, #0]
    4c82:	6053      	str	r3, [r2, #4]
		break;
    4c84:	e7ef      	b.n	4c66 <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    4c86:	17e3      	asrs	r3, r4, #31
    4c88:	6014      	str	r4, [r2, #0]
    4c8a:	6053      	str	r3, [r2, #4]
		break;
    4c8c:	e7eb      	b.n	4c66 <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    4c8e:	6014      	str	r4, [r2, #0]
		break;
    4c90:	e7e9      	b.n	4c66 <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    4c92:	6014      	str	r4, [r2, #0]
		break;
    4c94:	e7e7      	b.n	4c66 <cbvprintf+0x462>
		switch (conv->specifier) {
    4c96:	46d8      	mov	r8, fp
    4c98:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    4c9c:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    4ca0:	f1b9 0f00 	cmp.w	r9, #0
    4ca4:	f000 808d 	beq.w	4dc2 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    4ca8:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    4cac:	f1b8 0f00 	cmp.w	r8, #0
    4cb0:	d000      	beq.n	4cb4 <cbvprintf+0x4b0>
			nj_len += 1U;
    4cb2:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    4cb4:	f89d 101a 	ldrb.w	r1, [sp, #26]
    4cb8:	f011 0f10 	tst.w	r1, #16
    4cbc:	d025      	beq.n	4d0a <cbvprintf+0x506>
			nj_len += 2U;
    4cbe:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    4cc0:	9b07      	ldr	r3, [sp, #28]
    4cc2:	4413      	add	r3, r2
		if (conv->pad_fp) {
    4cc4:	f011 0f40 	tst.w	r1, #64	; 0x40
    4cc8:	d001      	beq.n	4cce <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    4cca:	9a08      	ldr	r2, [sp, #32]
    4ccc:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    4cce:	2f00      	cmp	r7, #0
    4cd0:	dd31      	ble.n	4d36 <cbvprintf+0x532>
			width -= (int)nj_len;
    4cd2:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    4cd4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    4cd8:	f013 0f04 	tst.w	r3, #4
    4cdc:	d12b      	bne.n	4d36 <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    4cde:	f013 0f40 	tst.w	r3, #64	; 0x40
    4ce2:	d017      	beq.n	4d14 <cbvprintf+0x510>
					if (sign != 0) {
    4ce4:	f1b8 0f00 	cmp.w	r8, #0
    4ce8:	d017      	beq.n	4d1a <cbvprintf+0x516>
						OUTC(sign);
    4cea:	4629      	mov	r1, r5
    4cec:	4640      	mov	r0, r8
    4cee:	47b0      	blx	r6
    4cf0:	2800      	cmp	r0, #0
    4cf2:	db6a      	blt.n	4dca <cbvprintf+0x5c6>
    4cf4:	3401      	adds	r4, #1
						sign = 0;
    4cf6:	46d8      	mov	r8, fp
					}
					pad = '0';
    4cf8:	f04f 0b30 	mov.w	fp, #48	; 0x30
    4cfc:	e00f      	b.n	4d1e <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    4cfe:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    4d02:	e7cd      	b.n	4ca0 <cbvprintf+0x49c>
    4d04:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    4d08:	e7ca      	b.n	4ca0 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    4d0a:	f011 0f08 	tst.w	r1, #8
    4d0e:	d0d7      	beq.n	4cc0 <cbvprintf+0x4bc>
			nj_len += 1U;
    4d10:	3201      	adds	r2, #1
    4d12:	e7d5      	b.n	4cc0 <cbvprintf+0x4bc>
				char pad = ' ';
    4d14:	f04f 0b20 	mov.w	fp, #32
    4d18:	e001      	b.n	4d1e <cbvprintf+0x51a>
					pad = '0';
    4d1a:	f04f 0b30 	mov.w	fp, #48	; 0x30
    4d1e:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    4d20:	1e5f      	subs	r7, r3, #1
    4d22:	2b00      	cmp	r3, #0
    4d24:	dd07      	ble.n	4d36 <cbvprintf+0x532>
					OUTC(pad);
    4d26:	4629      	mov	r1, r5
    4d28:	4658      	mov	r0, fp
    4d2a:	47b0      	blx	r6
    4d2c:	2800      	cmp	r0, #0
    4d2e:	db4c      	blt.n	4dca <cbvprintf+0x5c6>
    4d30:	3401      	adds	r4, #1
				while (width-- > 0) {
    4d32:	463b      	mov	r3, r7
    4d34:	e7f4      	b.n	4d20 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    4d36:	f1b8 0f00 	cmp.w	r8, #0
    4d3a:	d005      	beq.n	4d48 <cbvprintf+0x544>
			OUTC(sign);
    4d3c:	4629      	mov	r1, r5
    4d3e:	4640      	mov	r0, r8
    4d40:	47b0      	blx	r6
    4d42:	2800      	cmp	r0, #0
    4d44:	db41      	blt.n	4dca <cbvprintf+0x5c6>
    4d46:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    4d48:	f89d 301a 	ldrb.w	r3, [sp, #26]
    4d4c:	f3c3 1200 	ubfx	r2, r3, #4, #1
    4d50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    4d54:	4313      	orrs	r3, r2
    4d56:	d005      	beq.n	4d64 <cbvprintf+0x560>
				OUTC('0');
    4d58:	4629      	mov	r1, r5
    4d5a:	2030      	movs	r0, #48	; 0x30
    4d5c:	47b0      	blx	r6
    4d5e:	2800      	cmp	r0, #0
    4d60:	db33      	blt.n	4dca <cbvprintf+0x5c6>
    4d62:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    4d64:	f89d 301a 	ldrb.w	r3, [sp, #26]
    4d68:	f013 0f10 	tst.w	r3, #16
    4d6c:	d006      	beq.n	4d7c <cbvprintf+0x578>
				OUTC(conv->specifier);
    4d6e:	4629      	mov	r1, r5
    4d70:	f89d 001b 	ldrb.w	r0, [sp, #27]
    4d74:	47b0      	blx	r6
    4d76:	2800      	cmp	r0, #0
    4d78:	db27      	blt.n	4dca <cbvprintf+0x5c6>
    4d7a:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    4d7c:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    4d7e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    4d82:	2b00      	cmp	r3, #0
    4d84:	dd07      	ble.n	4d96 <cbvprintf+0x592>
				OUTC('0');
    4d86:	4629      	mov	r1, r5
    4d88:	2030      	movs	r0, #48	; 0x30
    4d8a:	47b0      	blx	r6
    4d8c:	2800      	cmp	r0, #0
    4d8e:	db1c      	blt.n	4dca <cbvprintf+0x5c6>
    4d90:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    4d92:	4643      	mov	r3, r8
    4d94:	e7f3      	b.n	4d7e <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    4d96:	4653      	mov	r3, sl
    4d98:	464a      	mov	r2, r9
    4d9a:	4629      	mov	r1, r5
    4d9c:	4630      	mov	r0, r6
    4d9e:	f00a fa1f 	bl	f1e0 <outs>
    4da2:	2800      	cmp	r0, #0
    4da4:	db11      	blt.n	4dca <cbvprintf+0x5c6>
    4da6:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    4da8:	2f00      	cmp	r7, #0
    4daa:	dd07      	ble.n	4dbc <cbvprintf+0x5b8>
			OUTC(' ');
    4dac:	4629      	mov	r1, r5
    4dae:	2020      	movs	r0, #32
    4db0:	47b0      	blx	r6
    4db2:	2800      	cmp	r0, #0
    4db4:	db09      	blt.n	4dca <cbvprintf+0x5c6>
    4db6:	3401      	adds	r4, #1
			--width;
    4db8:	3f01      	subs	r7, #1
    4dba:	e7f5      	b.n	4da8 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    4dbc:	f8dd 9008 	ldr.w	r9, [sp, #8]
    4dc0:	e528      	b.n	4814 <cbvprintf+0x10>
    4dc2:	f8dd 9008 	ldr.w	r9, [sp, #8]
    4dc6:	e525      	b.n	4814 <cbvprintf+0x10>
		}
	}

	return count;
    4dc8:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    4dca:	b011      	add	sp, #68	; 0x44
    4dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4dd0:	00011a85 	.word	0x00011a85

00004dd4 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    4dd4:	b508      	push	{r3, lr}
	__asm__ volatile(
    4dd6:	f04f 0220 	mov.w	r2, #32
    4dda:	f3ef 8311 	mrs	r3, BASEPRI
    4dde:	f382 8812 	msr	BASEPRI_MAX, r2
    4de2:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    4de6:	f001 ffff 	bl	6de8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    4dea:	4803      	ldr	r0, [pc, #12]	; (4df8 <sys_reboot+0x24>)
    4dec:	f00a f910 	bl	f010 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    4df0:	f000 ffa8 	bl	5d44 <arch_cpu_idle>
    4df4:	e7fc      	b.n	4df0 <sys_reboot+0x1c>
    4df6:	bf00      	nop
    4df8:	00011a88 	.word	0x00011a88

00004dfc <msg_process>:

static void msg_process(union log_msgs msg, bool bypass)
{
	struct log_backend const *backend;

	if (!bypass) {
    4dfc:	2900      	cmp	r1, #0
    4dfe:	d150      	bne.n	4ea2 <msg_process+0xa6>
{
    4e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4e04:	4607      	mov	r7, r0
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    4e06:	2400      	movs	r4, #0
    4e08:	e022      	b.n	4e50 <msg_process+0x54>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
    4e0a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4ea4 <msg_process+0xa8>
    4e0e:	f44f 7399 	mov.w	r3, #306	; 0x132
    4e12:	464a      	mov	r2, r9
    4e14:	4924      	ldr	r1, [pc, #144]	; (4ea8 <msg_process+0xac>)
    4e16:	4825      	ldr	r0, [pc, #148]	; (4eac <msg_process+0xb0>)
    4e18:	f00a fa03 	bl	f222 <assert_print>
    4e1c:	f44f 7199 	mov.w	r1, #306	; 0x132
    4e20:	4648      	mov	r0, r9
    4e22:	f00a f9f7 	bl	f214 <assert_post_action>
    4e26:	e01f      	b.n	4e68 <msg_process+0x6c>
	__ASSERT_NO_MSG(backend != NULL);
    4e28:	f8df 9078 	ldr.w	r9, [pc, #120]	; 4ea4 <msg_process+0xa8>
    4e2c:	2385      	movs	r3, #133	; 0x85
    4e2e:	464a      	mov	r2, r9
    4e30:	491d      	ldr	r1, [pc, #116]	; (4ea8 <msg_process+0xac>)
    4e32:	481e      	ldr	r0, [pc, #120]	; (4eac <msg_process+0xb0>)
    4e34:	f00a f9f5 	bl	f222 <assert_print>
    4e38:	2185      	movs	r1, #133	; 0x85
    4e3a:	4648      	mov	r0, r9
    4e3c:	f00a f9ea 	bl	f214 <assert_post_action>
    4e40:	e01e      	b.n	4e80 <msg_process+0x84>
	backend->api->process(backend, msg);
    4e42:	f858 3005 	ldr.w	r3, [r8, r5]
    4e46:	681b      	ldr	r3, [r3, #0]
    4e48:	4639      	mov	r1, r7
    4e4a:	4630      	mov	r0, r6
    4e4c:	4798      	blx	r3
    4e4e:	3401      	adds	r4, #1
    4e50:	4b17      	ldr	r3, [pc, #92]	; (4eb0 <msg_process+0xb4>)
    4e52:	4a18      	ldr	r2, [pc, #96]	; (4eb4 <msg_process+0xb8>)
    4e54:	1a9b      	subs	r3, r3, r2
    4e56:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    4e5a:	da20      	bge.n	4e9e <msg_process+0xa2>
	return &__log_backends_start[idx];
    4e5c:	ea4f 1804 	mov.w	r8, r4, lsl #4
    4e60:	4d14      	ldr	r5, [pc, #80]	; (4eb4 <msg_process+0xb8>)
	__ASSERT_NO_MSG(backend != NULL);
    4e62:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    4e66:	d0d0      	beq.n	4e0a <msg_process+0xe>
	return backend->cb->active;
    4e68:	6873      	ldr	r3, [r6, #4]
    4e6a:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);
			if (log_backend_is_active(backend) &&
    4e6c:	2b00      	cmp	r3, #0
    4e6e:	d0ee      	beq.n	4e4e <msg_process+0x52>
			    msg_filter_check(backend, msg)) {
    4e70:	4639      	mov	r1, r7
    4e72:	4630      	mov	r0, r6
    4e74:	f00a f9e6 	bl	f244 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    4e78:	2800      	cmp	r0, #0
    4e7a:	d0e8      	beq.n	4e4e <msg_process+0x52>
	__ASSERT_NO_MSG(backend != NULL);
    4e7c:	2e00      	cmp	r6, #0
    4e7e:	d0d3      	beq.n	4e28 <msg_process+0x2c>
	__ASSERT_NO_MSG(msg != NULL);
    4e80:	2f00      	cmp	r7, #0
    4e82:	d1de      	bne.n	4e42 <msg_process+0x46>
    4e84:	f8df 901c 	ldr.w	r9, [pc, #28]	; 4ea4 <msg_process+0xa8>
    4e88:	2386      	movs	r3, #134	; 0x86
    4e8a:	464a      	mov	r2, r9
    4e8c:	490a      	ldr	r1, [pc, #40]	; (4eb8 <msg_process+0xbc>)
    4e8e:	4807      	ldr	r0, [pc, #28]	; (4eac <msg_process+0xb0>)
    4e90:	f00a f9c7 	bl	f222 <assert_print>
    4e94:	2186      	movs	r1, #134	; 0x86
    4e96:	4648      	mov	r0, r9
    4e98:	f00a f9bc 	bl	f214 <assert_post_action>
    4e9c:	e7d1      	b.n	4e42 <msg_process+0x46>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    4e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4ea2:	4770      	bx	lr
    4ea4:	00011ab4 	.word	0x00011ab4
    4ea8:	00011aec 	.word	0x00011aec
    4eac:	000116a8 	.word	0x000116a8
    4eb0:	00011044 	.word	0x00011044
    4eb4:	00011024 	.word	0x00011024
    4eb8:	00011b04 	.word	0x00011b04

00004ebc <log_format_func_t_get>:
}
    4ebc:	4b01      	ldr	r3, [pc, #4]	; (4ec4 <log_format_func_t_get+0x8>)
    4ebe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4ec2:	4770      	bx	lr
    4ec4:	00011b88 	.word	0x00011b88

00004ec8 <log_init>:
{
    4ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
    4eca:	4b20      	ldr	r3, [pc, #128]	; (4f4c <log_init+0x84>)
    4ecc:	4a20      	ldr	r2, [pc, #128]	; (4f50 <log_init+0x88>)
    4ece:	1a9b      	subs	r3, r3, r2
    4ed0:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    4ed2:	2b90      	cmp	r3, #144	; 0x90
    4ed4:	d80e      	bhi.n	4ef4 <log_init+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4ed6:	4b1f      	ldr	r3, [pc, #124]	; (4f54 <log_init+0x8c>)
    4ed8:	f3bf 8f5b 	dmb	ish
    4edc:	e853 2f00 	ldrex	r2, [r3]
    4ee0:	1c51      	adds	r1, r2, #1
    4ee2:	e843 1000 	strex	r0, r1, [r3]
    4ee6:	2800      	cmp	r0, #0
    4ee8:	d1f8      	bne.n	4edc <log_init+0x14>
    4eea:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    4eee:	bb5a      	cbnz	r2, 4f48 <log_init+0x80>
	for (i = 0; i < log_backend_count_get(); i++) {
    4ef0:	2400      	movs	r4, #0
    4ef2:	e017      	b.n	4f24 <log_init+0x5c>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    4ef4:	4c18      	ldr	r4, [pc, #96]	; (4f58 <log_init+0x90>)
    4ef6:	f240 2373 	movw	r3, #627	; 0x273
    4efa:	4622      	mov	r2, r4
    4efc:	4917      	ldr	r1, [pc, #92]	; (4f5c <log_init+0x94>)
    4efe:	4818      	ldr	r0, [pc, #96]	; (4f60 <log_init+0x98>)
    4f00:	f00a f98f 	bl	f222 <assert_print>
    4f04:	f240 2173 	movw	r1, #627	; 0x273
    4f08:	4620      	mov	r0, r4
    4f0a:	f00a f983 	bl	f214 <assert_post_action>
    4f0e:	e7e2      	b.n	4ed6 <log_init+0xe>
					   backend->cb->ctx,
    4f10:	4b0f      	ldr	r3, [pc, #60]	; (4f50 <log_init+0x88>)
    4f12:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    4f16:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    4f18:	2204      	movs	r2, #4
    4f1a:	6819      	ldr	r1, [r3, #0]
    4f1c:	4628      	mov	r0, r5
    4f1e:	f000 f8d3 	bl	50c8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    4f22:	3401      	adds	r4, #1
    4f24:	42b4      	cmp	r4, r6
    4f26:	da0f      	bge.n	4f48 <log_init+0x80>
		const struct log_backend *backend = log_backend_get(i);
    4f28:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
    4f2a:	4d09      	ldr	r5, [pc, #36]	; (4f50 <log_init+0x88>)
    4f2c:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    4f30:	7b2b      	ldrb	r3, [r5, #12]
    4f32:	2b00      	cmp	r3, #0
    4f34:	d0f5      	beq.n	4f22 <log_init+0x5a>
			if (backend->api->init != NULL) {
    4f36:	0123      	lsls	r3, r4, #4
    4f38:	4a05      	ldr	r2, [pc, #20]	; (4f50 <log_init+0x88>)
    4f3a:	58d3      	ldr	r3, [r2, r3]
    4f3c:	699b      	ldr	r3, [r3, #24]
    4f3e:	2b00      	cmp	r3, #0
    4f40:	d0e6      	beq.n	4f10 <log_init+0x48>
				backend->api->init(backend);
    4f42:	4628      	mov	r0, r5
    4f44:	4798      	blx	r3
    4f46:	e7e3      	b.n	4f10 <log_init+0x48>
}
    4f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f4a:	bf00      	nop
    4f4c:	00011044 	.word	0x00011044
    4f50:	00011024 	.word	0x00011024
    4f54:	2000c9b8 	.word	0x2000c9b8
    4f58:	00011b18 	.word	0x00011b18
    4f5c:	00011b60 	.word	0x00011b60
    4f60:	000116a8 	.word	0x000116a8

00004f64 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    4f64:	b138      	cbz	r0, 4f76 <log_set_timestamp_func+0x12>
{
    4f66:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    4f68:	4a04      	ldr	r2, [pc, #16]	; (4f7c <log_set_timestamp_func+0x18>)
    4f6a:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    4f6c:	4608      	mov	r0, r1
    4f6e:	f000 fac3 	bl	54f8 <log_output_timestamp_freq_set>
	return 0;
    4f72:	2000      	movs	r0, #0
}
    4f74:	bd08      	pop	{r3, pc}
		return -EINVAL;
    4f76:	f06f 0015 	mvn.w	r0, #21
}
    4f7a:	4770      	bx	lr
    4f7c:	20004018 	.word	0x20004018

00004f80 <log_core_init>:
{
    4f80:	b508      	push	{r3, lr}
	panic_mode = false;
    4f82:	2300      	movs	r3, #0
    4f84:	4a04      	ldr	r2, [pc, #16]	; (4f98 <log_core_init+0x18>)
    4f86:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    4f88:	4a04      	ldr	r2, [pc, #16]	; (4f9c <log_core_init+0x1c>)
    4f8a:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    4f8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    4f90:	4803      	ldr	r0, [pc, #12]	; (4fa0 <log_core_init+0x20>)
    4f92:	f7ff ffe7 	bl	4f64 <log_set_timestamp_func>
}
    4f96:	bd08      	pop	{r3, pc}
    4f98:	2000d71c 	.word	0x2000d71c
    4f9c:	2000c9b4 	.word	0x2000c9b4
    4fa0:	0000f249 	.word	0x0000f249

00004fa4 <z_impl_log_panic>:
	if (panic_mode) {
    4fa4:	4b20      	ldr	r3, [pc, #128]	; (5028 <z_impl_log_panic+0x84>)
    4fa6:	781b      	ldrb	r3, [r3, #0]
    4fa8:	b103      	cbz	r3, 4fac <z_impl_log_panic+0x8>
    4faa:	4770      	bx	lr
{
    4fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
    4fb0:	f7ff ff8a 	bl	4ec8 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    4fb4:	2400      	movs	r4, #0
    4fb6:	e013      	b.n	4fe0 <z_impl_log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
    4fb8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 502c <z_impl_log_panic+0x88>
    4fbc:	f44f 7399 	mov.w	r3, #306	; 0x132
    4fc0:	4642      	mov	r2, r8
    4fc2:	491b      	ldr	r1, [pc, #108]	; (5030 <z_impl_log_panic+0x8c>)
    4fc4:	481b      	ldr	r0, [pc, #108]	; (5034 <z_impl_log_panic+0x90>)
    4fc6:	f00a f92c 	bl	f222 <assert_print>
    4fca:	f44f 7199 	mov.w	r1, #306	; 0x132
    4fce:	4640      	mov	r0, r8
    4fd0:	f00a f920 	bl	f214 <assert_post_action>
    4fd4:	e00f      	b.n	4ff6 <z_impl_log_panic+0x52>
	backend->api->panic(backend);
    4fd6:	597b      	ldr	r3, [r7, r5]
    4fd8:	695b      	ldr	r3, [r3, #20]
    4fda:	4630      	mov	r0, r6
    4fdc:	4798      	blx	r3
    4fde:	3401      	adds	r4, #1
    4fe0:	4b15      	ldr	r3, [pc, #84]	; (5038 <z_impl_log_panic+0x94>)
    4fe2:	4a16      	ldr	r2, [pc, #88]	; (503c <z_impl_log_panic+0x98>)
    4fe4:	1a9b      	subs	r3, r3, r2
    4fe6:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    4fea:	da17      	bge.n	501c <z_impl_log_panic+0x78>
	return &__log_backends_start[idx];
    4fec:	0127      	lsls	r7, r4, #4
    4fee:	4d13      	ldr	r5, [pc, #76]	; (503c <z_impl_log_panic+0x98>)
	__ASSERT_NO_MSG(backend != NULL);
    4ff0:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    4ff4:	d0e0      	beq.n	4fb8 <z_impl_log_panic+0x14>
	return backend->cb->active;
    4ff6:	6873      	ldr	r3, [r6, #4]
    4ff8:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    4ffa:	2b00      	cmp	r3, #0
    4ffc:	d0ef      	beq.n	4fde <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
    4ffe:	2e00      	cmp	r6, #0
    5000:	d1e9      	bne.n	4fd6 <z_impl_log_panic+0x32>
    5002:	f8df 8028 	ldr.w	r8, [pc, #40]	; 502c <z_impl_log_panic+0x88>
    5006:	23d7      	movs	r3, #215	; 0xd7
    5008:	4642      	mov	r2, r8
    500a:	4909      	ldr	r1, [pc, #36]	; (5030 <z_impl_log_panic+0x8c>)
    500c:	4809      	ldr	r0, [pc, #36]	; (5034 <z_impl_log_panic+0x90>)
    500e:	f00a f908 	bl	f222 <assert_print>
    5012:	21d7      	movs	r1, #215	; 0xd7
    5014:	4640      	mov	r0, r8
    5016:	f00a f8fd 	bl	f214 <assert_post_action>
    501a:	e7dc      	b.n	4fd6 <z_impl_log_panic+0x32>
	panic_mode = true;
    501c:	4b02      	ldr	r3, [pc, #8]	; (5028 <z_impl_log_panic+0x84>)
    501e:	2201      	movs	r2, #1
    5020:	701a      	strb	r2, [r3, #0]
}
    5022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5026:	bf00      	nop
    5028:	2000d71c 	.word	0x2000d71c
    502c:	00011ab4 	.word	0x00011ab4
    5030:	00011aec 	.word	0x00011aec
    5034:	000116a8 	.word	0x000116a8
    5038:	00011044 	.word	0x00011044
    503c:	00011024 	.word	0x00011024

00005040 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    5040:	4b01      	ldr	r3, [pc, #4]	; (5048 <z_log_notify_backend_enabled+0x8>)
    5042:	2201      	movs	r2, #1
    5044:	701a      	strb	r2, [r3, #0]
}
    5046:	4770      	bx	lr
    5048:	2000d71b 	.word	0x2000d71b

0000504c <z_log_dropped>:
    504c:	4b0d      	ldr	r3, [pc, #52]	; (5084 <z_log_dropped+0x38>)
    504e:	f3bf 8f5b 	dmb	ish
    5052:	e853 2f00 	ldrex	r2, [r3]
    5056:	3201      	adds	r2, #1
    5058:	e843 2100 	strex	r1, r2, [r3]
    505c:	2900      	cmp	r1, #0
    505e:	d1f8      	bne.n	5052 <z_log_dropped+0x6>
    5060:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    5064:	b900      	cbnz	r0, 5068 <z_log_dropped+0x1c>
		atomic_dec(&buffered_cnt);
	}
}
    5066:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5068:	4b07      	ldr	r3, [pc, #28]	; (5088 <z_log_dropped+0x3c>)
    506a:	f3bf 8f5b 	dmb	ish
    506e:	e853 2f00 	ldrex	r2, [r3]
    5072:	3a01      	subs	r2, #1
    5074:	e843 2100 	strex	r1, r2, [r3]
    5078:	2900      	cmp	r1, #0
    507a:	d1f8      	bne.n	506e <z_log_dropped+0x22>
    507c:	f3bf 8f5b 	dmb	ish
    5080:	e7f1      	b.n	5066 <z_log_dropped+0x1a>
    5082:	bf00      	nop
    5084:	2000c9b4 	.word	0x2000c9b4
    5088:	2000c9b0 	.word	0x2000c9b0

0000508c <z_log_msg2_commit>:
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
    508c:	b510      	push	{r4, lr}
    508e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    5090:	4b04      	ldr	r3, [pc, #16]	; (50a4 <z_log_msg2_commit+0x18>)
    5092:	681b      	ldr	r3, [r3, #0]
    5094:	4798      	blx	r3
    5096:	60a0      	str	r0, [r4, #8]
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    5098:	2100      	movs	r1, #0
    509a:	4620      	mov	r0, r4
    509c:	f7ff feae 	bl	4dfc <msg_process>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    50a0:	bd10      	pop	{r4, pc}
    50a2:	bf00      	nop
    50a4:	20004018 	.word	0x20004018

000050a8 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    50a8:	4b05      	ldr	r3, [pc, #20]	; (50c0 <log_source_name_get+0x18>)
    50aa:	4a06      	ldr	r2, [pc, #24]	; (50c4 <log_source_name_get+0x1c>)
    50ac:	1a9b      	subs	r3, r3, r2
    50ae:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    50b2:	d202      	bcs.n	50ba <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    50b4:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    50b8:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    50ba:	2000      	movs	r0, #0
}
    50bc:	4770      	bx	lr
    50be:	bf00      	nop
    50c0:	00011024 	.word	0x00011024
    50c4:	00010fdc 	.word	0x00010fdc

000050c8 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    50c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50ca:	4604      	mov	r4, r0
    50cc:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    50ce:	4d1e      	ldr	r5, [pc, #120]	; (5148 <log_backend_enable+0x80>)
    50d0:	1b45      	subs	r5, r0, r5
    50d2:	112d      	asrs	r5, r5, #4
    50d4:	3501      	adds	r5, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    50d6:	6803      	ldr	r3, [r0, #0]
    50d8:	681b      	ldr	r3, [r3, #0]
    50da:	b163      	cbz	r3, 50f6 <log_backend_enable+0x2e>
	}

	log_backend_id_set(backend, id);
    50dc:	b2ed      	uxtb	r5, r5
	__ASSERT_NO_MSG(backend != NULL);
    50de:	b1cc      	cbz	r4, 5114 <log_backend_enable+0x4c>
	backend->cb->id = id;
    50e0:	6863      	ldr	r3, [r4, #4]
    50e2:	711d      	strb	r5, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    50e4:	b314      	cbz	r4, 512c <log_backend_enable+0x64>
	backend->cb->ctx = ctx;
    50e6:	6863      	ldr	r3, [r4, #4]
    50e8:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    50ea:	6863      	ldr	r3, [r4, #4]
    50ec:	2201      	movs	r2, #1
    50ee:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    50f0:	f7ff ffa6 	bl	5040 <z_log_notify_backend_enabled>
}
    50f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    50f6:	4f15      	ldr	r7, [pc, #84]	; (514c <log_backend_enable+0x84>)
    50f8:	23bb      	movs	r3, #187	; 0xbb
    50fa:	463a      	mov	r2, r7
    50fc:	4914      	ldr	r1, [pc, #80]	; (5150 <log_backend_enable+0x88>)
    50fe:	4815      	ldr	r0, [pc, #84]	; (5154 <log_backend_enable+0x8c>)
    5100:	f00a f88f 	bl	f222 <assert_print>
    5104:	4814      	ldr	r0, [pc, #80]	; (5158 <log_backend_enable+0x90>)
    5106:	f00a f88c 	bl	f222 <assert_print>
    510a:	21bb      	movs	r1, #187	; 0xbb
    510c:	4638      	mov	r0, r7
    510e:	f00a f881 	bl	f214 <assert_post_action>
    5112:	e7e3      	b.n	50dc <log_backend_enable+0x14>
	__ASSERT_NO_MSG(backend != NULL);
    5114:	4f11      	ldr	r7, [pc, #68]	; (515c <log_backend_enable+0x94>)
    5116:	23e6      	movs	r3, #230	; 0xe6
    5118:	463a      	mov	r2, r7
    511a:	4911      	ldr	r1, [pc, #68]	; (5160 <log_backend_enable+0x98>)
    511c:	480d      	ldr	r0, [pc, #52]	; (5154 <log_backend_enable+0x8c>)
    511e:	f00a f880 	bl	f222 <assert_print>
    5122:	21e6      	movs	r1, #230	; 0xe6
    5124:	4638      	mov	r0, r7
    5126:	f00a f875 	bl	f214 <assert_post_action>
    512a:	e7d9      	b.n	50e0 <log_backend_enable+0x18>
	__ASSERT_NO_MSG(backend != NULL);
    512c:	4d0b      	ldr	r5, [pc, #44]	; (515c <log_backend_enable+0x94>)
    512e:	f240 1317 	movw	r3, #279	; 0x117
    5132:	462a      	mov	r2, r5
    5134:	490a      	ldr	r1, [pc, #40]	; (5160 <log_backend_enable+0x98>)
    5136:	4807      	ldr	r0, [pc, #28]	; (5154 <log_backend_enable+0x8c>)
    5138:	f00a f873 	bl	f222 <assert_print>
    513c:	f240 1117 	movw	r1, #279	; 0x117
    5140:	4628      	mov	r0, r5
    5142:	f00a f867 	bl	f214 <assert_post_action>
    5146:	e7ce      	b.n	50e6 <log_backend_enable+0x1e>
    5148:	00011024 	.word	0x00011024
    514c:	00011b94 	.word	0x00011b94
    5150:	00011bf0 	.word	0x00011bf0
    5154:	000116a8 	.word	0x000116a8
    5158:	00011c08 	.word	0x00011c08
    515c:	00011ab4 	.word	0x00011ab4
    5160:	00011aec 	.word	0x00011aec

00005164 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    5164:	b40e      	push	{r1, r2, r3}
    5166:	b500      	push	{lr}
    5168:	b082      	sub	sp, #8
    516a:	4601      	mov	r1, r0
    516c:	ab03      	add	r3, sp, #12
    516e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    5172:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    5174:	4803      	ldr	r0, [pc, #12]	; (5184 <print_formatted+0x20>)
    5176:	f7ff fb45 	bl	4804 <cbvprintf>
	va_end(args);

	return length;
}
    517a:	b002      	add	sp, #8
    517c:	f85d eb04 	ldr.w	lr, [sp], #4
    5180:	b003      	add	sp, #12
    5182:	4770      	bx	lr
    5184:	0000f27d 	.word	0x0000f27d

00005188 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    5188:	b530      	push	{r4, r5, lr}
    518a:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    518c:	f011 0f44 	tst.w	r1, #68	; 0x44
    5190:	d005      	beq.n	519e <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    5192:	4b1a      	ldr	r3, [pc, #104]	; (51fc <timestamp_print+0x74>)
    5194:	681c      	ldr	r4, [r3, #0]
    5196:	b934      	cbnz	r4, 51a6 <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    5198:	2000      	movs	r0, #0
	}

	return length;
}
    519a:	b005      	add	sp, #20
    519c:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    519e:	4918      	ldr	r1, [pc, #96]	; (5200 <timestamp_print+0x78>)
    51a0:	f7ff ffe0 	bl	5164 <print_formatted>
    51a4:	e7f9      	b.n	519a <timestamp_print+0x12>
		timestamp /= timestamp_div;
    51a6:	4b17      	ldr	r3, [pc, #92]	; (5204 <timestamp_print+0x7c>)
    51a8:	6819      	ldr	r1, [r3, #0]
    51aa:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    51ae:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    51b2:	4a15      	ldr	r2, [pc, #84]	; (5208 <timestamp_print+0x80>)
    51b4:	fba2 320c 	umull	r3, r2, r2, ip
    51b8:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    51ba:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    51be:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    51c2:	4b12      	ldr	r3, [pc, #72]	; (520c <timestamp_print+0x84>)
    51c4:	fba3 530e 	umull	r5, r3, r3, lr
    51c8:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    51ca:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    51ce:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    51d2:	fb0c f101 	mul.w	r1, ip, r1
    51d6:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    51da:	fb05 1114 	mls	r1, r5, r4, r1
    51de:	fb0c f101 	mul.w	r1, ip, r1
    51e2:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    51e6:	9102      	str	r1, [sp, #8]
    51e8:	9501      	str	r5, [sp, #4]
    51ea:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    51ee:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    51f2:	9100      	str	r1, [sp, #0]
    51f4:	4906      	ldr	r1, [pc, #24]	; (5210 <timestamp_print+0x88>)
    51f6:	f7ff ffb5 	bl	5164 <print_formatted>
    51fa:	e7ce      	b.n	519a <timestamp_print+0x12>
    51fc:	2000c9bc 	.word	0x2000c9bc
    5200:	00011c2c 	.word	0x00011c2c
    5204:	2000c9c0 	.word	0x2000c9c0
    5208:	91a2b3c5 	.word	0x91a2b3c5
    520c:	88888889 	.word	0x88888889
    5210:	00011c38 	.word	0x00011c38

00005214 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    5214:	b161      	cbz	r1, 5230 <color_print+0x1c>
{
    5216:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    5218:	b12a      	cbz	r2, 5226 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    521a:	4a06      	ldr	r2, [pc, #24]	; (5234 <color_print+0x20>)
    521c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5220:	b912      	cbnz	r2, 5228 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    5222:	4a05      	ldr	r2, [pc, #20]	; (5238 <color_print+0x24>)
    5224:	e000      	b.n	5228 <color_print+0x14>
    5226:	4a04      	ldr	r2, [pc, #16]	; (5238 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    5228:	4904      	ldr	r1, [pc, #16]	; (523c <color_print+0x28>)
    522a:	f7ff ff9b 	bl	5164 <print_formatted>
	}
}
    522e:	bd08      	pop	{r3, pc}
    5230:	4770      	bx	lr
    5232:	bf00      	nop
    5234:	00011cf8 	.word	0x00011cf8
    5238:	00011c54 	.word	0x00011c54
    523c:	00011c5c 	.word	0x00011c5c

00005240 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5240:	f011 0f10 	tst.w	r1, #16
    5244:	d10b      	bne.n	525e <newline_print+0x1e>
{
    5246:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5248:	f011 0f20 	tst.w	r1, #32
    524c:	d003      	beq.n	5256 <newline_print+0x16>
		print_formatted(ctx, "\n");
    524e:	4904      	ldr	r1, [pc, #16]	; (5260 <newline_print+0x20>)
    5250:	f7ff ff88 	bl	5164 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    5254:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    5256:	4903      	ldr	r1, [pc, #12]	; (5264 <newline_print+0x24>)
    5258:	f7ff ff84 	bl	5164 <print_formatted>
    525c:	e7fa      	b.n	5254 <newline_print+0x14>
    525e:	4770      	bx	lr
    5260:	0001128c 	.word	0x0001128c
    5264:	00013458 	.word	0x00013458

00005268 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    5268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    526c:	4605      	mov	r5, r0
    526e:	460f      	mov	r7, r1
    5270:	4616      	mov	r6, r2
    5272:	4698      	mov	r8, r3
	newline_print(output, flags);
    5274:	9906      	ldr	r1, [sp, #24]
    5276:	f7ff ffe3 	bl	5240 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    527a:	2400      	movs	r4, #0
    527c:	4544      	cmp	r4, r8
    527e:	da05      	bge.n	528c <hexdump_line_print+0x24>
		print_formatted(output, " ");
    5280:	4924      	ldr	r1, [pc, #144]	; (5314 <hexdump_line_print+0xac>)
    5282:	4628      	mov	r0, r5
    5284:	f7ff ff6e 	bl	5164 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    5288:	3401      	adds	r4, #1
    528a:	e7f7      	b.n	527c <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    528c:	2400      	movs	r4, #0
    528e:	e009      	b.n	52a4 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    5290:	4920      	ldr	r1, [pc, #128]	; (5314 <hexdump_line_print+0xac>)
    5292:	4628      	mov	r0, r5
    5294:	f7ff ff66 	bl	5164 <print_formatted>
    5298:	e00b      	b.n	52b2 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    529a:	491f      	ldr	r1, [pc, #124]	; (5318 <hexdump_line_print+0xb0>)
    529c:	4628      	mov	r0, r5
    529e:	f7ff ff61 	bl	5164 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    52a2:	3401      	adds	r4, #1
    52a4:	2c0f      	cmp	r4, #15
    52a6:	dc0c      	bgt.n	52c2 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    52a8:	2c00      	cmp	r4, #0
    52aa:	dd02      	ble.n	52b2 <hexdump_line_print+0x4a>
    52ac:	f014 0f07 	tst.w	r4, #7
    52b0:	d0ee      	beq.n	5290 <hexdump_line_print+0x28>
		if (i < length) {
    52b2:	42b4      	cmp	r4, r6
    52b4:	d2f1      	bcs.n	529a <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    52b6:	5d3a      	ldrb	r2, [r7, r4]
    52b8:	4918      	ldr	r1, [pc, #96]	; (531c <hexdump_line_print+0xb4>)
    52ba:	4628      	mov	r0, r5
    52bc:	f7ff ff52 	bl	5164 <print_formatted>
    52c0:	e7ef      	b.n	52a2 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    52c2:	4917      	ldr	r1, [pc, #92]	; (5320 <hexdump_line_print+0xb8>)
    52c4:	4628      	mov	r0, r5
    52c6:	f7ff ff4d 	bl	5164 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    52ca:	2400      	movs	r4, #0
    52cc:	e009      	b.n	52e2 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    52ce:	4911      	ldr	r1, [pc, #68]	; (5314 <hexdump_line_print+0xac>)
    52d0:	4628      	mov	r0, r5
    52d2:	f7ff ff47 	bl	5164 <print_formatted>
    52d6:	e00b      	b.n	52f0 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    52d8:	4912      	ldr	r1, [pc, #72]	; (5324 <hexdump_line_print+0xbc>)
    52da:	4628      	mov	r0, r5
    52dc:	f7ff ff42 	bl	5164 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    52e0:	3401      	adds	r4, #1
    52e2:	2c0f      	cmp	r4, #15
    52e4:	dc13      	bgt.n	530e <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
    52e6:	2c00      	cmp	r4, #0
    52e8:	dd02      	ble.n	52f0 <hexdump_line_print+0x88>
    52ea:	f014 0f07 	tst.w	r4, #7
    52ee:	d0ee      	beq.n	52ce <hexdump_line_print+0x66>
		if (i < length) {
    52f0:	42b4      	cmp	r4, r6
    52f2:	d207      	bcs.n	5304 <hexdump_line_print+0x9c>
			char c = (char)data[i];
    52f4:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
    52f6:	4b0c      	ldr	r3, [pc, #48]	; (5328 <hexdump_line_print+0xc0>)
    52f8:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
    52fa:	f013 0f97 	tst.w	r3, #151	; 0x97
    52fe:	d1eb      	bne.n	52d8 <hexdump_line_print+0x70>
    5300:	222e      	movs	r2, #46	; 0x2e
    5302:	e7e9      	b.n	52d8 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
    5304:	4903      	ldr	r1, [pc, #12]	; (5314 <hexdump_line_print+0xac>)
    5306:	4628      	mov	r0, r5
    5308:	f7ff ff2c 	bl	5164 <print_formatted>
    530c:	e7e8      	b.n	52e0 <hexdump_line_print+0x78>
		}
	}
}
    530e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5312:	bf00      	nop
    5314:	00011c84 	.word	0x00011c84
    5318:	00011c68 	.word	0x00011c68
    531c:	00011c60 	.word	0x00011c60
    5320:	00011c6c 	.word	0x00011c6c
    5324:	00011c70 	.word	0x00011c70
    5328:	0001347d 	.word	0x0001347d

0000532c <ids_print>:
{
    532c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5330:	4680      	mov	r8, r0
    5332:	4616      	mov	r6, r2
    5334:	461d      	mov	r5, r3
    5336:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    533a:	b959      	cbnz	r1, 5354 <ids_print+0x28>
	int total = 0;
    533c:	2400      	movs	r4, #0
	if (source_id >= 0) {
    533e:	2f00      	cmp	r7, #0
    5340:	db1c      	blt.n	537c <ids_print+0x50>
		total += print_formatted(output,
    5342:	b186      	cbz	r6, 5366 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    5344:	2301      	movs	r3, #1
    5346:	9a07      	ldr	r2, [sp, #28]
    5348:	4093      	lsls	r3, r2
				(func_on &&
    534a:	f013 0f10 	tst.w	r3, #16
    534e:	d118      	bne.n	5382 <ids_print+0x56>
		total += print_formatted(output,
    5350:	4e0d      	ldr	r6, [pc, #52]	; (5388 <ids_print+0x5c>)
    5352:	e009      	b.n	5368 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    5354:	4b0d      	ldr	r3, [pc, #52]	; (538c <ids_print+0x60>)
    5356:	9a07      	ldr	r2, [sp, #28]
    5358:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    535c:	490c      	ldr	r1, [pc, #48]	; (5390 <ids_print+0x64>)
    535e:	f7ff ff01 	bl	5164 <print_formatted>
    5362:	4604      	mov	r4, r0
    5364:	e7eb      	b.n	533e <ids_print+0x12>
		total += print_formatted(output,
    5366:	4e08      	ldr	r6, [pc, #32]	; (5388 <ids_print+0x5c>)
    5368:	4639      	mov	r1, r7
    536a:	4628      	mov	r0, r5
    536c:	f7ff fe9c 	bl	50a8 <log_source_name_get>
    5370:	4602      	mov	r2, r0
    5372:	4631      	mov	r1, r6
    5374:	4640      	mov	r0, r8
    5376:	f7ff fef5 	bl	5164 <print_formatted>
    537a:	4404      	add	r4, r0
}
    537c:	4620      	mov	r0, r4
    537e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    5382:	4e04      	ldr	r6, [pc, #16]	; (5394 <ids_print+0x68>)
    5384:	e7f0      	b.n	5368 <ids_print+0x3c>
    5386:	bf00      	nop
    5388:	00011c74 	.word	0x00011c74
    538c:	00011d0c 	.word	0x00011d0c
    5390:	00011c80 	.word	0x00011c80
    5394:	00011c7c 	.word	0x00011c7c

00005398 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    5398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    539c:	b085      	sub	sp, #20
    539e:	4605      	mov	r5, r0
    53a0:	460c      	mov	r4, r1
    53a2:	4616      	mov	r6, r2
    53a4:	9303      	str	r3, [sp, #12]
    53a6:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    53aa:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    53ae:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    53b2:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    53b6:	f009 ff5f 	bl	f278 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    53ba:	b1e8      	cbz	r0, 53f8 <prefix_print+0x60>
    53bc:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    53be:	4913      	ldr	r1, [pc, #76]	; (540c <prefix_print+0x74>)
    53c0:	4628      	mov	r0, r5
    53c2:	f7ff fecf 	bl	5164 <print_formatted>
    53c6:	4607      	mov	r7, r0
	}

	if (stamp) {
    53c8:	f1bb 0f00 	cmp.w	fp, #0
    53cc:	d116      	bne.n	53fc <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    53ce:	4642      	mov	r2, r8
    53d0:	4651      	mov	r1, sl
    53d2:	4628      	mov	r0, r5
    53d4:	f009 ff7c 	bl	f2d0 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    53d8:	f8cd 8004 	str.w	r8, [sp, #4]
    53dc:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    53e0:	9300      	str	r3, [sp, #0]
    53e2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    53e6:	4632      	mov	r2, r6
    53e8:	4649      	mov	r1, r9
    53ea:	4628      	mov	r0, r5
    53ec:	f7ff ff9e 	bl	532c <ids_print>
			domain_id, source_id, level);


	return length;
}
    53f0:	4438      	add	r0, r7
    53f2:	b005      	add	sp, #20
    53f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    53f8:	2700      	movs	r7, #0
    53fa:	e7e5      	b.n	53c8 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    53fc:	9a03      	ldr	r2, [sp, #12]
    53fe:	4621      	mov	r1, r4
    5400:	4628      	mov	r0, r5
    5402:	f7ff fec1 	bl	5188 <timestamp_print>
    5406:	4407      	add	r7, r0
    5408:	e7e1      	b.n	53ce <prefix_print+0x36>
    540a:	bf00      	nop
    540c:	00011c88 	.word	0x00011c88

00005410 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    5410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5414:	b084      	sub	sp, #16
    5416:	4606      	mov	r6, r0
    5418:	460c      	mov	r4, r1
    541a:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    541c:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
    541e:	880a      	ldrh	r2, [r1, #0]
    5420:	f3c2 1882 	ubfx	r8, r2, #6, #3
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    5424:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
    5428:	d037      	beq.n	549a <log_output_msg2_process+0x8a>
	return msg->hdr.source;
    542a:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
    542c:	7809      	ldrb	r1, [r1, #0]
    542e:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    5432:	b37a      	cbz	r2, 5494 <log_output_msg2_process+0x84>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    5434:	4829      	ldr	r0, [pc, #164]	; (54dc <log_output_msg2_process+0xcc>)
    5436:	1a12      	subs	r2, r2, r0
    5438:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    543c:	9202      	str	r2, [sp, #8]
    543e:	9101      	str	r1, [sp, #4]
    5440:	f8cd 8000 	str.w	r8, [sp]
    5444:	2200      	movs	r2, #0
    5446:	4639      	mov	r1, r7
    5448:	4630      	mov	r0, r6
    544a:	f7ff ffa5 	bl	5398 <prefix_print>
    544e:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    5450:	4625      	mov	r5, r4
    5452:	f855 3b10 	ldr.w	r3, [r5], #16
    5456:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    545a:	b153      	cbz	r3, 5472 <log_output_msg2_process+0x62>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    545c:	f1b8 0f00 	cmp.w	r8, #0
    5460:	d11e      	bne.n	54a0 <log_output_msg2_process+0x90>
    5462:	481f      	ldr	r0, [pc, #124]	; (54e0 <log_output_msg2_process+0xd0>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    5464:	462b      	mov	r3, r5
    5466:	4632      	mov	r2, r6
    5468:	491e      	ldr	r1, [pc, #120]	; (54e4 <log_output_msg2_process+0xd4>)
    546a:	f009 fd85 	bl	ef78 <cbpprintf_external>
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    546e:	2800      	cmp	r0, #0
    5470:	db18      	blt.n	54a4 <log_output_msg2_process+0x94>
	*len = msg->hdr.desc.data_len;
    5472:	8862      	ldrh	r2, [r4, #2]
    5474:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    5478:	6821      	ldr	r1, [r4, #0]
    547a:	f3c1 2149 	ubfx	r1, r1, #9, #10
    547e:	4429      	add	r1, r5
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    5480:	b9fa      	cbnz	r2, 54c2 <log_output_msg2_process+0xb2>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    5482:	f1b8 0f00 	cmp.w	r8, #0
    5486:	d122      	bne.n	54ce <log_output_msg2_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    5488:	4630      	mov	r0, r6
    548a:	f009 ff54 	bl	f336 <log_output_flush>
}
    548e:	b004      	add	sp, #16
    5490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		int16_t source_id = source ?
    5494:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5498:	e7d0      	b.n	543c <log_output_msg2_process+0x2c>
		prefix_offset = 0;
    549a:	f04f 0900 	mov.w	r9, #0
    549e:	e7d7      	b.n	5450 <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    54a0:	4811      	ldr	r0, [pc, #68]	; (54e8 <log_output_msg2_process+0xd8>)
    54a2:	e7df      	b.n	5464 <log_output_msg2_process+0x54>
		__ASSERT_NO_MSG(err >= 0);
    54a4:	f8df a044 	ldr.w	sl, [pc, #68]	; 54ec <log_output_msg2_process+0xdc>
    54a8:	f240 23b7 	movw	r3, #695	; 0x2b7
    54ac:	4652      	mov	r2, sl
    54ae:	4910      	ldr	r1, [pc, #64]	; (54f0 <log_output_msg2_process+0xe0>)
    54b0:	4810      	ldr	r0, [pc, #64]	; (54f4 <log_output_msg2_process+0xe4>)
    54b2:	f009 feb6 	bl	f222 <assert_print>
    54b6:	f240 21b7 	movw	r1, #695	; 0x2b7
    54ba:	4650      	mov	r0, sl
    54bc:	f009 feaa 	bl	f214 <assert_post_action>
    54c0:	e7d7      	b.n	5472 <log_output_msg2_process+0x62>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
    54c2:	9700      	str	r7, [sp, #0]
    54c4:	464b      	mov	r3, r9
    54c6:	4630      	mov	r0, r6
    54c8:	f009 ff1a 	bl	f300 <log_msg2_hexdump>
    54cc:	e7d9      	b.n	5482 <log_output_msg2_process+0x72>
		postfix_print(output, flags, level);
    54ce:	4642      	mov	r2, r8
    54d0:	4639      	mov	r1, r7
    54d2:	4630      	mov	r0, r6
    54d4:	f009 ff08 	bl	f2e8 <postfix_print>
    54d8:	e7d6      	b.n	5488 <log_output_msg2_process+0x78>
    54da:	bf00      	nop
    54dc:	00010fdc 	.word	0x00010fdc
    54e0:	0000f29b 	.word	0x0000f29b
    54e4:	00004805 	.word	0x00004805
    54e8:	0000f27d 	.word	0x0000f27d
    54ec:	00011c8c 	.word	0x00011c8c
    54f0:	00011ccc 	.word	0x00011ccc
    54f4:	000116a8 	.word	0x000116a8

000054f8 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    54f8:	4b07      	ldr	r3, [pc, #28]	; (5518 <log_output_timestamp_freq_set+0x20>)
    54fa:	2201      	movs	r2, #1
    54fc:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    54fe:	e004      	b.n	550a <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    5500:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    5502:	4a05      	ldr	r2, [pc, #20]	; (5518 <log_output_timestamp_freq_set+0x20>)
    5504:	6813      	ldr	r3, [r2, #0]
    5506:	005b      	lsls	r3, r3, #1
    5508:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    550a:	4b04      	ldr	r3, [pc, #16]	; (551c <log_output_timestamp_freq_set+0x24>)
    550c:	4298      	cmp	r0, r3
    550e:	d8f7      	bhi.n	5500 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    5510:	4b03      	ldr	r3, [pc, #12]	; (5520 <log_output_timestamp_freq_set+0x28>)
    5512:	6018      	str	r0, [r3, #0]
}
    5514:	4770      	bx	lr
    5516:	bf00      	nop
    5518:	2000c9c0 	.word	0x2000c9c0
    551c:	000f4240 	.word	0x000f4240
    5520:	2000c9bc 	.word	0x2000c9bc

00005524 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    5524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5528:	b087      	sub	sp, #28
    552a:	af02      	add	r7, sp, #8
    552c:	4682      	mov	sl, r0
    552e:	6079      	str	r1, [r7, #4]
    5530:	4691      	mov	r9, r2
    5532:	4698      	mov	r8, r3
    5534:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    5536:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
	int plen;

	if (fmt) {
    553a:	f1bb 0f00 	cmp.w	fp, #0
    553e:	d016      	beq.n	556e <z_impl_z_log_msg2_runtime_vcreate+0x4a>
		va_list ap2;

		va_copy(ap2, ap);
    5540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5542:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    5544:	9300      	str	r3, [sp, #0]
    5546:	465b      	mov	r3, fp
    5548:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    554a:	2110      	movs	r1, #16
    554c:	2000      	movs	r0, #0
    554e:	f7fe f871 	bl	3634 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    5552:	1e05      	subs	r5, r0, #0
    5554:	da0c      	bge.n	5570 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
    5556:	4c26      	ldr	r4, [pc, #152]	; (55f0 <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    5558:	2367      	movs	r3, #103	; 0x67
    555a:	4622      	mov	r2, r4
    555c:	4925      	ldr	r1, [pc, #148]	; (55f4 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    555e:	4826      	ldr	r0, [pc, #152]	; (55f8 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    5560:	f009 fe5f 	bl	f222 <assert_print>
    5564:	2167      	movs	r1, #103	; 0x67
    5566:	4620      	mov	r0, r4
    5568:	f009 fe54 	bl	f214 <assert_post_action>
		va_end(ap2);
    556c:	e000      	b.n	5570 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
	} else {
		plen = 0;
    556e:	2500      	movs	r5, #0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    5570:	4629      	mov	r1, r5
    5572:	19ab      	adds	r3, r5, r6
    5574:	3317      	adds	r3, #23
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    5576:	2400      	movs	r4, #0
    5578:	f36f 0400 	bfc	r4, #0, #1
    557c:	f36f 0441 	bfc	r4, #1, #1
    5580:	f36f 0482 	bfc	r4, #2, #1
    5584:	f36a 04c5 	bfi	r4, sl, #3, #3
    5588:	f369 1488 	bfi	r4, r9, #6, #3
    558c:	f365 2452 	bfi	r4, r5, #9, #10
    5590:	f366 44de 	bfi	r4, r6, #19, #12
    5594:	f36f 74df 	bfc	r4, #31, #1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    5598:	f023 0307 	bic.w	r3, r3, #7
    559c:	ebad 0d03 	sub.w	sp, sp, r3
    55a0:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    55a2:	466b      	mov	r3, sp
    55a4:	f113 0018 	adds.w	r0, r3, #24
    55a8:	d00a      	beq.n	55c0 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    55aa:	f1bb 0f00 	cmp.w	fp, #0
    55ae:	d007      	beq.n	55c0 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    55b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    55b2:	9300      	str	r3, [sp, #0]
    55b4:	465b      	mov	r3, fp
    55b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    55b8:	f7fe f83c 	bl	3634 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    55bc:	2800      	cmp	r0, #0
    55be:	db09      	blt.n	55d4 <z_impl_z_log_msg2_runtime_vcreate+0xb0>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    55c0:	4643      	mov	r3, r8
    55c2:	4622      	mov	r2, r4
    55c4:	6879      	ldr	r1, [r7, #4]
    55c6:	4628      	mov	r0, r5
    55c8:	f009 fec2 	bl	f350 <z_log_msg2_finalize>
	}
}
    55cc:	3714      	adds	r7, #20
    55ce:	46bd      	mov	sp, r7
    55d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(plen >= 0);
    55d4:	f8df 9018 	ldr.w	r9, [pc, #24]	; 55f0 <z_impl_z_log_msg2_runtime_vcreate+0xcc>
    55d8:	2381      	movs	r3, #129	; 0x81
    55da:	464a      	mov	r2, r9
    55dc:	4905      	ldr	r1, [pc, #20]	; (55f4 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    55de:	4806      	ldr	r0, [pc, #24]	; (55f8 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    55e0:	f009 fe1f 	bl	f222 <assert_print>
    55e4:	2181      	movs	r1, #129	; 0x81
    55e6:	4648      	mov	r0, r9
    55e8:	f009 fe14 	bl	f214 <assert_post_action>
    55ec:	e7e8      	b.n	55c0 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    55ee:	bf00      	nop
    55f0:	00011d20 	.word	0x00011d20
    55f4:	00011d5c 	.word	0x00011d5c
    55f8:	000116a8 	.word	0x000116a8

000055fc <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    55fc:	b570      	push	{r4, r5, r6, lr}
    55fe:	4606      	mov	r6, r0
    5600:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    5602:	2400      	movs	r4, #0
    5604:	e006      	b.n	5614 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    5606:	4b05      	ldr	r3, [pc, #20]	; (561c <char_out+0x20>)
    5608:	6818      	ldr	r0, [r3, #0]
    560a:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
    560c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    560e:	69db      	ldr	r3, [r3, #28]
    5610:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    5612:	3401      	adds	r4, #1
    5614:	42ac      	cmp	r4, r5
    5616:	d3f6      	bcc.n	5606 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    5618:	4628      	mov	r0, r5
    561a:	bd70      	pop	{r4, r5, r6, pc}
    561c:	2000c9dc 	.word	0x2000c9dc

00005620 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    5620:	4b01      	ldr	r3, [pc, #4]	; (5628 <format_set+0x8>)
    5622:	6019      	str	r1, [r3, #0]
	return 0;
}
    5624:	2000      	movs	r0, #0
    5626:	4770      	bx	lr
    5628:	2000c9cc 	.word	0x2000c9cc

0000562c <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
    562c:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    562e:	4809      	ldr	r0, [pc, #36]	; (5654 <log_backend_uart_init+0x28>)
    5630:	4b09      	ldr	r3, [pc, #36]	; (5658 <log_backend_uart_init+0x2c>)
    5632:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    5634:	f00a ff38 	bl	104a8 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    5638:	b100      	cbz	r0, 563c <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    563a:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    563c:	4c07      	ldr	r4, [pc, #28]	; (565c <log_backend_uart_init+0x30>)
    563e:	2379      	movs	r3, #121	; 0x79
    5640:	4622      	mov	r2, r4
    5642:	4907      	ldr	r1, [pc, #28]	; (5660 <log_backend_uart_init+0x34>)
    5644:	4807      	ldr	r0, [pc, #28]	; (5664 <log_backend_uart_init+0x38>)
    5646:	f009 fdec 	bl	f222 <assert_print>
    564a:	2179      	movs	r1, #121	; 0x79
    564c:	4620      	mov	r0, r4
    564e:	f009 fde1 	bl	f214 <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
    5652:	e7f2      	b.n	563a <log_backend_uart_init+0xe>
    5654:	00010e44 	.word	0x00010e44
    5658:	2000c9dc 	.word	0x2000c9dc
    565c:	00011d68 	.word	0x00011d68
    5660:	00011da0 	.word	0x00011da0
    5664:	000116a8 	.word	0x000116a8

00005668 <panic>:

static void panic(struct log_backend const *const backend)
{
    5668:	b508      	push	{r3, lr}
	in_panic = true;
    566a:	4b03      	ldr	r3, [pc, #12]	; (5678 <panic+0x10>)
    566c:	2201      	movs	r2, #1
    566e:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    5670:	4802      	ldr	r0, [pc, #8]	; (567c <panic+0x14>)
    5672:	f009 fe60 	bl	f336 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    5676:	bd08      	pop	{r3, pc}
    5678:	2000d71d 	.word	0x2000d71d
    567c:	00011dfc 	.word	0x00011dfc

00005680 <process>:
{
    5680:	b510      	push	{r4, lr}
    5682:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    5684:	4b04      	ldr	r3, [pc, #16]	; (5698 <process+0x18>)
    5686:	6818      	ldr	r0, [r3, #0]
    5688:	f7ff fc18 	bl	4ebc <log_format_func_t_get>
    568c:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    568e:	220f      	movs	r2, #15
    5690:	4621      	mov	r1, r4
    5692:	4802      	ldr	r0, [pc, #8]	; (569c <process+0x1c>)
    5694:	4798      	blx	r3
}
    5696:	bd10      	pop	{r4, pc}
    5698:	2000c9cc 	.word	0x2000c9cc
    569c:	00011dfc 	.word	0x00011dfc

000056a0 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    56a0:	4b03      	ldr	r3, [pc, #12]	; (56b0 <log_backend_rtt_init+0x10>)
    56a2:	2201      	movs	r2, #1
    56a4:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    56a6:	4b03      	ldr	r3, [pc, #12]	; (56b4 <log_backend_rtt_init+0x14>)
    56a8:	4a03      	ldr	r2, [pc, #12]	; (56b8 <log_backend_rtt_init+0x18>)
    56aa:	601a      	str	r2, [r3, #0]
}
    56ac:	4770      	bx	lr
    56ae:	bf00      	nop
    56b0:	2000d71e 	.word	0x2000d71e
    56b4:	2000ca08 	.word	0x2000ca08
    56b8:	2000c9f0 	.word	0x2000c9f0

000056bc <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    56bc:	4b01      	ldr	r3, [pc, #4]	; (56c4 <format_set+0x8>)
    56be:	6019      	str	r1, [r3, #0]
	return 0;
}
    56c0:	2000      	movs	r0, #0
    56c2:	4770      	bx	lr
    56c4:	2000ca0c 	.word	0x2000ca0c

000056c8 <on_failed_write>:
{
    56c8:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    56ca:	b918      	cbnz	r0, 56d4 <on_failed_write+0xc>
		host_present = false;
    56cc:	4b04      	ldr	r3, [pc, #16]	; (56e0 <on_failed_write+0x18>)
    56ce:	2200      	movs	r2, #0
    56d0:	701a      	strb	r2, [r3, #0]
}
    56d2:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    56d4:	f241 3088 	movw	r0, #5000	; 0x1388
    56d8:	f00a ffd6 	bl	10688 <z_impl_k_busy_wait>
    56dc:	e7f9      	b.n	56d2 <on_failed_write+0xa>
    56de:	bf00      	nop
    56e0:	2000d71e 	.word	0x2000d71e

000056e4 <on_write>:
{
    56e4:	b538      	push	{r3, r4, r5, lr}
    56e6:	4604      	mov	r4, r0
	host_present = true;
    56e8:	4b0a      	ldr	r3, [pc, #40]	; (5714 <on_write+0x30>)
    56ea:	2201      	movs	r2, #1
    56ec:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    56ee:	4b0a      	ldr	r3, [pc, #40]	; (5718 <on_write+0x34>)
    56f0:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    56f2:	b92b      	cbnz	r3, 5700 <on_write+0x1c>
}
    56f4:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    56f6:	1e65      	subs	r5, r4, #1
    56f8:	4620      	mov	r0, r4
    56fa:	f7ff ffe5 	bl	56c8 <on_failed_write>
    56fe:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    5700:	2000      	movs	r0, #0
    5702:	f004 fd5b 	bl	a1bc <SEGGER_RTT_HasDataUp>
    5706:	2800      	cmp	r0, #0
    5708:	d0f4      	beq.n	56f4 <on_write+0x10>
    570a:	4b02      	ldr	r3, [pc, #8]	; (5714 <on_write+0x30>)
    570c:	781b      	ldrb	r3, [r3, #0]
    570e:	2b00      	cmp	r3, #0
    5710:	d1f1      	bne.n	56f6 <on_write+0x12>
    5712:	e7ef      	b.n	56f4 <on_write+0x10>
    5714:	2000d71e 	.word	0x2000d71e
    5718:	2000d71f 	.word	0x2000d71f

0000571c <data_out_block_mode>:
{
    571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    571e:	4606      	mov	r6, r0
    5720:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    5722:	2704      	movs	r7, #4
    5724:	e006      	b.n	5734 <data_out_block_mode+0x18>
			on_write(retry_cnt);
    5726:	4638      	mov	r0, r7
    5728:	f7ff ffdc 	bl	56e4 <on_write>
	} while ((ret == 0) && host_present);
    572c:	b99c      	cbnz	r4, 5756 <data_out_block_mode+0x3a>
    572e:	4b0d      	ldr	r3, [pc, #52]	; (5764 <data_out_block_mode+0x48>)
    5730:	781b      	ldrb	r3, [r3, #0]
    5732:	b183      	cbz	r3, 5756 <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5734:	462a      	mov	r2, r5
    5736:	4631      	mov	r1, r6
    5738:	2000      	movs	r0, #0
    573a:	f004 fcdb 	bl	a0f4 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    573e:	4604      	mov	r4, r0
    5740:	2800      	cmp	r0, #0
    5742:	d1f0      	bne.n	5726 <data_out_block_mode+0xa>
		} else if (host_present) {
    5744:	4b07      	ldr	r3, [pc, #28]	; (5764 <data_out_block_mode+0x48>)
    5746:	781b      	ldrb	r3, [r3, #0]
    5748:	2b00      	cmp	r3, #0
    574a:	d0ef      	beq.n	572c <data_out_block_mode+0x10>
			retry_cnt--;
    574c:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    574e:	4638      	mov	r0, r7
    5750:	f7ff ffba 	bl	56c8 <on_failed_write>
    5754:	e7ea      	b.n	572c <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
    5756:	b914      	cbnz	r4, 575e <data_out_block_mode+0x42>
    5758:	4b02      	ldr	r3, [pc, #8]	; (5764 <data_out_block_mode+0x48>)
    575a:	781b      	ldrb	r3, [r3, #0]
    575c:	b903      	cbnz	r3, 5760 <data_out_block_mode+0x44>
    575e:	462c      	mov	r4, r5
}
    5760:	4620      	mov	r0, r4
    5762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5764:	2000d71e 	.word	0x2000d71e

00005768 <panic>:
{
    5768:	b508      	push	{r3, lr}
	panic_mode = true;
    576a:	4b03      	ldr	r3, [pc, #12]	; (5778 <panic+0x10>)
    576c:	2201      	movs	r2, #1
    576e:	701a      	strb	r2, [r3, #0]
    5770:	4802      	ldr	r0, [pc, #8]	; (577c <panic+0x14>)
    5772:	f009 fde0 	bl	f336 <log_output_flush>
}
    5776:	bd08      	pop	{r3, pc}
    5778:	2000d71f 	.word	0x2000d71f
    577c:	00011e3c 	.word	0x00011e3c

00005780 <process>:
{
    5780:	b510      	push	{r4, lr}
    5782:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    5784:	4b04      	ldr	r3, [pc, #16]	; (5798 <process+0x18>)
    5786:	6818      	ldr	r0, [r3, #0]
    5788:	f7ff fb98 	bl	4ebc <log_format_func_t_get>
    578c:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    578e:	220f      	movs	r2, #15
    5790:	4621      	mov	r1, r4
    5792:	4802      	ldr	r0, [pc, #8]	; (579c <process+0x1c>)
    5794:	4798      	blx	r3
}
    5796:	bd10      	pop	{r4, pc}
    5798:	2000ca0c 	.word	0x2000ca0c
    579c:	00011e3c 	.word	0x00011e3c

000057a0 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    57a0:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    57a2:	4b40      	ldr	r3, [pc, #256]	; (58a4 <pm_system_resume+0x104>)
    57a4:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    57a6:	f005 031f 	and.w	r3, r5, #31
    57aa:	2201      	movs	r2, #1
    57ac:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    57ae:	0969      	lsrs	r1, r5, #5
    57b0:	4b3d      	ldr	r3, [pc, #244]	; (58a8 <pm_system_resume+0x108>)
    57b2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    57b6:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    57b8:	f3bf 8f5b 	dmb	ish
    57bc:	e853 1f00 	ldrex	r1, [r3]
    57c0:	ea01 0400 	and.w	r4, r1, r0
    57c4:	e843 4600 	strex	r6, r4, [r3]
    57c8:	2e00      	cmp	r6, #0
    57ca:	d1f7      	bne.n	57bc <pm_system_resume+0x1c>
    57cc:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    57d0:	420a      	tst	r2, r1
    57d2:	d100      	bne.n	57d6 <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    57d4:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    57d6:	4a35      	ldr	r2, [pc, #212]	; (58ac <pm_system_resume+0x10c>)
    57d8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    57dc:	0098      	lsls	r0, r3, #2
    57de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    57e2:	4933      	ldr	r1, [pc, #204]	; (58b0 <pm_system_resume+0x110>)
    57e4:	b1a9      	cbz	r1, 5812 <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    57e6:	7859      	ldrb	r1, [r3, #1]
    57e8:	5c10      	ldrb	r0, [r2, r0]
    57ea:	f009 feb4 	bl	f556 <pm_state_exit_post_ops>
    57ee:	f04f 0320 	mov.w	r3, #32
    57f2:	f3ef 8611 	mrs	r6, BASEPRI
    57f6:	f383 8812 	msr	BASEPRI_MAX, r3
    57fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    57fe:	482d      	ldr	r0, [pc, #180]	; (58b4 <pm_system_resume+0x114>)
    5800:	f005 f808 	bl	a814 <z_spin_lock_valid>
    5804:	b158      	cbz	r0, 581e <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    5806:	482b      	ldr	r0, [pc, #172]	; (58b4 <pm_system_resume+0x114>)
    5808:	f005 f824 	bl	a854 <z_spin_lock_set_owner>
	return list->head;
    580c:	4b2a      	ldr	r3, [pc, #168]	; (58b8 <pm_system_resume+0x118>)
    580e:	681c      	ldr	r4, [r3, #0]
    5810:	e020      	b.n	5854 <pm_system_resume+0xb4>
	__asm__ volatile(
    5812:	2300      	movs	r3, #0
    5814:	f383 8811 	msr	BASEPRI, r3
    5818:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    581c:	e7e7      	b.n	57ee <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    581e:	4c27      	ldr	r4, [pc, #156]	; (58bc <pm_system_resume+0x11c>)
    5820:	238e      	movs	r3, #142	; 0x8e
    5822:	4622      	mov	r2, r4
    5824:	4926      	ldr	r1, [pc, #152]	; (58c0 <pm_system_resume+0x120>)
    5826:	4827      	ldr	r0, [pc, #156]	; (58c4 <pm_system_resume+0x124>)
    5828:	f009 fcfb 	bl	f222 <assert_print>
    582c:	4921      	ldr	r1, [pc, #132]	; (58b4 <pm_system_resume+0x114>)
    582e:	4826      	ldr	r0, [pc, #152]	; (58c8 <pm_system_resume+0x128>)
    5830:	f009 fcf7 	bl	f222 <assert_print>
    5834:	218e      	movs	r1, #142	; 0x8e
    5836:	4620      	mov	r0, r4
    5838:	f009 fcec 	bl	f214 <assert_post_action>
    583c:	e7e3      	b.n	5806 <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    583e:	4b19      	ldr	r3, [pc, #100]	; (58a4 <pm_system_resume+0x104>)
    5840:	7d1b      	ldrb	r3, [r3, #20]
    5842:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5846:	4919      	ldr	r1, [pc, #100]	; (58ac <pm_system_resume+0x10c>)
    5848:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    584c:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    584e:	b10c      	cbz	r4, 5854 <pm_system_resume+0xb4>
	return node->next;
    5850:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    5852:	b124      	cbz	r4, 585e <pm_system_resume+0xbe>
    5854:	b11c      	cbz	r4, 585e <pm_system_resume+0xbe>
			callback = notifier->state_exit;
    5856:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    5858:	2a00      	cmp	r2, #0
    585a:	d1f0      	bne.n	583e <pm_system_resume+0x9e>
    585c:	e7f7      	b.n	584e <pm_system_resume+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    585e:	4815      	ldr	r0, [pc, #84]	; (58b4 <pm_system_resume+0x114>)
    5860:	f004 ffe8 	bl	a834 <z_spin_unlock_valid>
    5864:	b170      	cbz	r0, 5884 <pm_system_resume+0xe4>
	__asm__ volatile(
    5866:	f386 8811 	msr	BASEPRI, r6
    586a:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    586e:	4a0f      	ldr	r2, [pc, #60]	; (58ac <pm_system_resume+0x10c>)
    5870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5874:	00a9      	lsls	r1, r5, #2
    5876:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    587a:	2300      	movs	r3, #0
    587c:	5053      	str	r3, [r2, r1]
    587e:	606b      	str	r3, [r5, #4]
    5880:	60ab      	str	r3, [r5, #8]
}
    5882:	e7a7      	b.n	57d4 <pm_system_resume+0x34>
    5884:	4c0d      	ldr	r4, [pc, #52]	; (58bc <pm_system_resume+0x11c>)
    5886:	23b9      	movs	r3, #185	; 0xb9
    5888:	4622      	mov	r2, r4
    588a:	4910      	ldr	r1, [pc, #64]	; (58cc <pm_system_resume+0x12c>)
    588c:	480d      	ldr	r0, [pc, #52]	; (58c4 <pm_system_resume+0x124>)
    588e:	f009 fcc8 	bl	f222 <assert_print>
    5892:	4908      	ldr	r1, [pc, #32]	; (58b4 <pm_system_resume+0x114>)
    5894:	480e      	ldr	r0, [pc, #56]	; (58d0 <pm_system_resume+0x130>)
    5896:	f009 fcc4 	bl	f222 <assert_print>
    589a:	21b9      	movs	r1, #185	; 0xb9
    589c:	4620      	mov	r0, r4
    589e:	f009 fcb9 	bl	f214 <assert_post_action>
    58a2:	e7e0      	b.n	5866 <pm_system_resume+0xc6>
    58a4:	2000d4e0 	.word	0x2000d4e0
    58a8:	2000ca38 	.word	0x2000ca38
    58ac:	2000ca28 	.word	0x2000ca28
    58b0:	0000f557 	.word	0x0000f557
    58b4:	2000ca1c 	.word	0x2000ca1c
    58b8:	2000ca20 	.word	0x2000ca20
    58bc:	00011854 	.word	0x00011854
    58c0:	000118b4 	.word	0x000118b4
    58c4:	000116a8 	.word	0x000116a8
    58c8:	000118cc 	.word	0x000118cc
    58cc:	00011884 	.word	0x00011884
    58d0:	0001189c 	.word	0x0001189c

000058d4 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    58d4:	b570      	push	{r4, r5, r6, lr}
    58d6:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    58d8:	4b6d      	ldr	r3, [pc, #436]	; (5a90 <pm_system_suspend+0x1bc>)
    58da:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    58dc:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    58de:	f3bf 8f5b 	dmb	ish
    58e2:	4b6c      	ldr	r3, [pc, #432]	; (5a94 <pm_system_suspend+0x1c0>)
    58e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    58e8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    58ec:	f005 021f 	and.w	r2, r5, #31
    58f0:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    58f2:	f013 0f01 	tst.w	r3, #1
    58f6:	d01d      	beq.n	5934 <pm_system_suspend+0x60>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    58f8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    58fc:	4a66      	ldr	r2, [pc, #408]	; (5a98 <pm_system_suspend+0x1c4>)
    58fe:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    5902:	b333      	cbz	r3, 5952 <pm_system_suspend+0x7e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    5904:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    5908:	d139      	bne.n	597e <pm_system_suspend+0xaa>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    590a:	f005 fded 	bl	b4e8 <k_sched_lock>
	__asm__ volatile(
    590e:	f04f 0320 	mov.w	r3, #32
    5912:	f3ef 8611 	mrs	r6, BASEPRI
    5916:	f383 8812 	msr	BASEPRI_MAX, r3
    591a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    591e:	485f      	ldr	r0, [pc, #380]	; (5a9c <pm_system_suspend+0x1c8>)
    5920:	f004 ff78 	bl	a814 <z_spin_lock_valid>
    5924:	2800      	cmp	r0, #0
    5926:	d040      	beq.n	59aa <pm_system_suspend+0xd6>
	z_spin_lock_set_owner(l);
    5928:	485c      	ldr	r0, [pc, #368]	; (5a9c <pm_system_suspend+0x1c8>)
    592a:	f004 ff93 	bl	a854 <z_spin_lock_set_owner>
	return list->head;
    592e:	4b5c      	ldr	r3, [pc, #368]	; (5aa0 <pm_system_suspend+0x1cc>)
    5930:	681c      	ldr	r4, [r3, #0]
    5932:	e055      	b.n	59e0 <pm_system_suspend+0x10c>
		info = pm_policy_next_state(id, ticks);
    5934:	4601      	mov	r1, r0
    5936:	4628      	mov	r0, r5
    5938:	f000 f8d6 	bl	5ae8 <pm_policy_next_state>
		if (info != NULL) {
    593c:	2800      	cmp	r0, #0
    593e:	d0db      	beq.n	58f8 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    5940:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    5944:	4a54      	ldr	r2, [pc, #336]	; (5a98 <pm_system_suspend+0x1c4>)
    5946:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    594a:	c807      	ldmia	r0, {r0, r1, r2}
    594c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    5950:	e7d2      	b.n	58f8 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    5952:	f005 021f 	and.w	r2, r5, #31
    5956:	2301      	movs	r3, #1
    5958:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    595a:	096d      	lsrs	r5, r5, #5
    595c:	4a4d      	ldr	r2, [pc, #308]	; (5a94 <pm_system_suspend+0x1c0>)
    595e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    5962:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5964:	f3bf 8f5b 	dmb	ish
    5968:	e855 2f00 	ldrex	r2, [r5]
    596c:	401a      	ands	r2, r3
    596e:	e845 2100 	strex	r1, r2, [r5]
    5972:	2900      	cmp	r1, #0
    5974:	d1f8      	bne.n	5968 <pm_system_suspend+0x94>
    5976:	f3bf 8f5b 	dmb	ish
		ret = false;
    597a:	2000      	movs	r0, #0
		goto end;
    597c:	e077      	b.n	5a6e <pm_system_suspend+0x19a>
		     k_us_to_ticks_ceil32(
    597e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    5982:	4a45      	ldr	r2, [pc, #276]	; (5a98 <pm_system_suspend+0x1c4>)
    5984:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5988:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    598a:	0c41      	lsrs	r1, r0, #17
    598c:	03c0      	lsls	r0, r0, #15
    598e:	4b45      	ldr	r3, [pc, #276]	; (5aa4 <pm_system_suspend+0x1d0>)
    5990:	18c0      	adds	r0, r0, r3
    5992:	4a45      	ldr	r2, [pc, #276]	; (5aa8 <pm_system_suspend+0x1d4>)
    5994:	f04f 0300 	mov.w	r3, #0
    5998:	f141 0100 	adc.w	r1, r1, #0
    599c:	f7fb f81e 	bl	9dc <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    59a0:	2101      	movs	r1, #1
    59a2:	1a20      	subs	r0, r4, r0
    59a4:	f007 f930 	bl	cc08 <z_set_timeout_expiry>
    59a8:	e7af      	b.n	590a <pm_system_suspend+0x36>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    59aa:	4c40      	ldr	r4, [pc, #256]	; (5aac <pm_system_suspend+0x1d8>)
    59ac:	238e      	movs	r3, #142	; 0x8e
    59ae:	4622      	mov	r2, r4
    59b0:	493f      	ldr	r1, [pc, #252]	; (5ab0 <pm_system_suspend+0x1dc>)
    59b2:	4840      	ldr	r0, [pc, #256]	; (5ab4 <pm_system_suspend+0x1e0>)
    59b4:	f009 fc35 	bl	f222 <assert_print>
    59b8:	4938      	ldr	r1, [pc, #224]	; (5a9c <pm_system_suspend+0x1c8>)
    59ba:	483f      	ldr	r0, [pc, #252]	; (5ab8 <pm_system_suspend+0x1e4>)
    59bc:	f009 fc31 	bl	f222 <assert_print>
    59c0:	218e      	movs	r1, #142	; 0x8e
    59c2:	4620      	mov	r0, r4
    59c4:	f009 fc26 	bl	f214 <assert_post_action>
    59c8:	e7ae      	b.n	5928 <pm_system_suspend+0x54>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    59ca:	4b31      	ldr	r3, [pc, #196]	; (5a90 <pm_system_suspend+0x1bc>)
    59cc:	7d1b      	ldrb	r3, [r3, #20]
    59ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    59d2:	4931      	ldr	r1, [pc, #196]	; (5a98 <pm_system_suspend+0x1c4>)
    59d4:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    59d8:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    59da:	b10c      	cbz	r4, 59e0 <pm_system_suspend+0x10c>
	return node->next;
    59dc:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    59de:	b124      	cbz	r4, 59ea <pm_system_suspend+0x116>
    59e0:	b11c      	cbz	r4, 59ea <pm_system_suspend+0x116>
			callback = notifier->state_entry;
    59e2:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    59e4:	2a00      	cmp	r2, #0
    59e6:	d1f0      	bne.n	59ca <pm_system_suspend+0xf6>
    59e8:	e7f7      	b.n	59da <pm_system_suspend+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    59ea:	482c      	ldr	r0, [pc, #176]	; (5a9c <pm_system_suspend+0x1c8>)
    59ec:	f004 ff22 	bl	a834 <z_spin_unlock_valid>
    59f0:	2800      	cmp	r0, #0
    59f2:	d03d      	beq.n	5a70 <pm_system_suspend+0x19c>
	__asm__ volatile(
    59f4:	f386 8811 	msr	BASEPRI, r6
    59f8:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    59fc:	f005 031f 	and.w	r3, r5, #31
    5a00:	2101      	movs	r1, #1
    5a02:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5a04:	096b      	lsrs	r3, r5, #5
    5a06:	4a2d      	ldr	r2, [pc, #180]	; (5abc <pm_system_suspend+0x1e8>)
    5a08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5a0c:	f3bf 8f5b 	dmb	ish
    5a10:	e853 2f00 	ldrex	r2, [r3]
    5a14:	430a      	orrs	r2, r1
    5a16:	e843 2000 	strex	r0, r2, [r3]
    5a1a:	2800      	cmp	r0, #0
    5a1c:	d1f8      	bne.n	5a10 <pm_system_suspend+0x13c>
    5a1e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    5a22:	4b27      	ldr	r3, [pc, #156]	; (5ac0 <pm_system_suspend+0x1ec>)
    5a24:	b14b      	cbz	r3, 5a3a <pm_system_suspend+0x166>
		pm_state_set(info->state, info->substate_id);
    5a26:	4b1c      	ldr	r3, [pc, #112]	; (5a98 <pm_system_suspend+0x1c4>)
    5a28:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5a2c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    5a30:	7849      	ldrb	r1, [r1, #1]
    5a32:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    5a36:	f009 fd82 	bl	f53e <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    5a3a:	f7ff feb1 	bl	57a0 <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    5a3e:	f005 031f 	and.w	r3, r5, #31
    5a42:	2401      	movs	r4, #1
    5a44:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5a48:	096d      	lsrs	r5, r5, #5
    5a4a:	4a12      	ldr	r2, [pc, #72]	; (5a94 <pm_system_suspend+0x1c0>)
    5a4c:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    5a50:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5a52:	f3bf 8f5b 	dmb	ish
    5a56:	e855 2f00 	ldrex	r2, [r5]
    5a5a:	401a      	ands	r2, r3
    5a5c:	e845 2100 	strex	r1, r2, [r5]
    5a60:	2900      	cmp	r1, #0
    5a62:	d1f8      	bne.n	5a56 <pm_system_suspend+0x182>
    5a64:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    5a68:	f006 faca 	bl	c000 <k_sched_unlock>
	bool ret = true;
    5a6c:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    5a6e:	bd70      	pop	{r4, r5, r6, pc}
    5a70:	4c0e      	ldr	r4, [pc, #56]	; (5aac <pm_system_suspend+0x1d8>)
    5a72:	23b9      	movs	r3, #185	; 0xb9
    5a74:	4622      	mov	r2, r4
    5a76:	4913      	ldr	r1, [pc, #76]	; (5ac4 <pm_system_suspend+0x1f0>)
    5a78:	480e      	ldr	r0, [pc, #56]	; (5ab4 <pm_system_suspend+0x1e0>)
    5a7a:	f009 fbd2 	bl	f222 <assert_print>
    5a7e:	4907      	ldr	r1, [pc, #28]	; (5a9c <pm_system_suspend+0x1c8>)
    5a80:	4811      	ldr	r0, [pc, #68]	; (5ac8 <pm_system_suspend+0x1f4>)
    5a82:	f009 fbce 	bl	f222 <assert_print>
    5a86:	21b9      	movs	r1, #185	; 0xb9
    5a88:	4620      	mov	r0, r4
    5a8a:	f009 fbc3 	bl	f214 <assert_post_action>
    5a8e:	e7b1      	b.n	59f4 <pm_system_suspend+0x120>
    5a90:	2000d4e0 	.word	0x2000d4e0
    5a94:	2000ca34 	.word	0x2000ca34
    5a98:	2000ca28 	.word	0x2000ca28
    5a9c:	2000ca1c 	.word	0x2000ca1c
    5aa0:	2000ca20 	.word	0x2000ca20
    5aa4:	000f423f 	.word	0x000f423f
    5aa8:	000f4240 	.word	0x000f4240
    5aac:	00011854 	.word	0x00011854
    5ab0:	000118b4 	.word	0x000118b4
    5ab4:	000116a8 	.word	0x000116a8
    5ab8:	000118cc 	.word	0x000118cc
    5abc:	2000ca38 	.word	0x2000ca38
    5ac0:	0000f53f 	.word	0x0000f53f
    5ac4:	00011884 	.word	0x00011884
    5ac8:	0001189c 	.word	0x0001189c

00005acc <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5acc:	f3bf 8f5b 	dmb	ish
    5ad0:	4b04      	ldr	r3, [pc, #16]	; (5ae4 <pm_policy_state_lock_is_active+0x18>)
    5ad2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5ad6:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    5ada:	3800      	subs	r0, #0
    5adc:	bf18      	it	ne
    5ade:	2001      	movne	r0, #1
    5ae0:	4770      	bx	lr
    5ae2:	bf00      	nop
    5ae4:	2000ca3c 	.word	0x2000ca3c

00005ae8 <pm_policy_next_state>:
{
    5ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5aec:	b082      	sub	sp, #8
    5aee:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    5af0:	a901      	add	r1, sp, #4
    5af2:	f000 f843 	bl	5b7c <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    5af6:	1e44      	subs	r4, r0, #1
    5af8:	b224      	sxth	r4, r4
    5afa:	e007      	b.n	5b0c <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    5afc:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    5b00:	d032      	beq.n	5b68 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    5b02:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    5b04:	42b0      	cmp	r0, r6
    5b06:	d92f      	bls.n	5b68 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    5b08:	3c01      	subs	r4, #1
    5b0a:	b224      	sxth	r4, r4
    5b0c:	2c00      	cmp	r4, #0
    5b0e:	db2a      	blt.n	5b66 <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    5b10:	9b01      	ldr	r3, [sp, #4]
    5b12:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    5b16:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    5b1a:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    5b1e:	f7ff ffd5 	bl	5acc <pm_policy_state_lock_is_active>
    5b22:	2800      	cmp	r0, #0
    5b24:	d1f0      	bne.n	5b08 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    5b26:	6868      	ldr	r0, [r5, #4]
    5b28:	0c41      	lsrs	r1, r0, #17
    5b2a:	03c0      	lsls	r0, r0, #15
    5b2c:	4f10      	ldr	r7, [pc, #64]	; (5b70 <pm_policy_next_state+0x88>)
    5b2e:	19c0      	adds	r0, r0, r7
    5b30:	4a10      	ldr	r2, [pc, #64]	; (5b74 <pm_policy_next_state+0x8c>)
    5b32:	f04f 0300 	mov.w	r3, #0
    5b36:	f141 0100 	adc.w	r1, r1, #0
    5b3a:	f7fa ff4f 	bl	9dc <__aeabi_uldivmod>
    5b3e:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    5b40:	68ab      	ldr	r3, [r5, #8]
    5b42:	0c59      	lsrs	r1, r3, #17
    5b44:	03db      	lsls	r3, r3, #15
    5b46:	19d8      	adds	r0, r3, r7
    5b48:	4a0a      	ldr	r2, [pc, #40]	; (5b74 <pm_policy_next_state+0x8c>)
    5b4a:	f04f 0300 	mov.w	r3, #0
    5b4e:	f141 0100 	adc.w	r1, r1, #0
    5b52:	f7fa ff43 	bl	9dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    5b56:	4b08      	ldr	r3, [pc, #32]	; (5b78 <pm_policy_next_state+0x90>)
    5b58:	681b      	ldr	r3, [r3, #0]
    5b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5b5e:	d0cd      	beq.n	5afc <pm_policy_next_state+0x14>
    5b60:	4283      	cmp	r3, r0
    5b62:	d8cb      	bhi.n	5afc <pm_policy_next_state+0x14>
    5b64:	e7d0      	b.n	5b08 <pm_policy_next_state+0x20>
	return NULL;
    5b66:	2500      	movs	r5, #0
}
    5b68:	4628      	mov	r0, r5
    5b6a:	b002      	add	sp, #8
    5b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b70:	000f423f 	.word	0x000f423f
    5b74:	000f4240 	.word	0x000f4240
    5b78:	2000401c 	.word	0x2000401c

00005b7c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    5b7c:	b908      	cbnz	r0, 5b82 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    5b7e:	4b02      	ldr	r3, [pc, #8]	; (5b88 <pm_state_cpu_get_all+0xc>)
    5b80:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    5b82:	2000      	movs	r0, #0
    5b84:	4770      	bx	lr
    5b86:	bf00      	nop
    5b88:	00011e50 	.word	0x00011e50

00005b8c <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    5b8c:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    5b8e:	4802      	ldr	r0, [pc, #8]	; (5b98 <nrf_cc3xx_platform_abort_init+0xc>)
    5b90:	f008 ffca 	bl	eb28 <nrf_cc3xx_platform_set_abort>
}
    5b94:	bd08      	pop	{r3, pc}
    5b96:	bf00      	nop
    5b98:	00011e50 	.word	0x00011e50

00005b9c <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    5b9c:	b1d0      	cbz	r0, 5bd4 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5b9e:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    5ba0:	6842      	ldr	r2, [r0, #4]
    5ba2:	2a04      	cmp	r2, #4
    5ba4:	d005      	beq.n	5bb2 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5ba6:	b1d2      	cbz	r2, 5bde <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    5ba8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    5baa:	f005 f993 	bl	aed4 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    5bae:	2000      	movs	r0, #0
    }
}
    5bb0:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    5bb2:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5bb4:	2200      	movs	r2, #0
    5bb6:	f3bf 8f5b 	dmb	ish
    5bba:	e853 1f00 	ldrex	r1, [r3]
    5bbe:	2901      	cmp	r1, #1
    5bc0:	d103      	bne.n	5bca <mutex_unlock_platform+0x2e>
    5bc2:	e843 2000 	strex	r0, r2, [r3]
    5bc6:	2800      	cmp	r0, #0
    5bc8:	d1f7      	bne.n	5bba <mutex_unlock_platform+0x1e>
    5bca:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5bce:	d104      	bne.n	5bda <mutex_unlock_platform+0x3e>
    5bd0:	4610      	mov	r0, r2
    5bd2:	e7ed      	b.n	5bb0 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    5bd4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    5bd8:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5bda:	4802      	ldr	r0, [pc, #8]	; (5be4 <mutex_unlock_platform+0x48>)
    5bdc:	e7e8      	b.n	5bb0 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    5bde:	4802      	ldr	r0, [pc, #8]	; (5be8 <mutex_unlock_platform+0x4c>)
    5be0:	e7e6      	b.n	5bb0 <mutex_unlock_platform+0x14>
    5be2:	bf00      	nop
    5be4:	ffff8fe9 	.word	0xffff8fe9
    5be8:	ffff8fea 	.word	0xffff8fea

00005bec <mutex_lock_platform>:
    if(mutex == NULL) {
    5bec:	b320      	cbz	r0, 5c38 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5bee:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    5bf0:	6842      	ldr	r2, [r0, #4]
    5bf2:	2a04      	cmp	r2, #4
    5bf4:	d002      	beq.n	5bfc <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5bf6:	b992      	cbnz	r2, 5c1e <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    5bf8:	4811      	ldr	r0, [pc, #68]	; (5c40 <mutex_lock_platform+0x54>)
    5bfa:	e00f      	b.n	5c1c <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    5bfc:	6803      	ldr	r3, [r0, #0]
    5bfe:	2201      	movs	r2, #1
    5c00:	f3bf 8f5b 	dmb	ish
    5c04:	e853 1f00 	ldrex	r1, [r3]
    5c08:	2900      	cmp	r1, #0
    5c0a:	d103      	bne.n	5c14 <mutex_lock_platform+0x28>
    5c0c:	e843 2000 	strex	r0, r2, [r3]
    5c10:	2800      	cmp	r0, #0
    5c12:	d1f7      	bne.n	5c04 <mutex_lock_platform+0x18>
    5c14:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5c18:	d10c      	bne.n	5c34 <mutex_lock_platform+0x48>
    5c1a:	2000      	movs	r0, #0
}
    5c1c:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    5c1e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    5c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5c28:	f005 f834 	bl	ac94 <z_impl_k_mutex_lock>
        if (ret == 0) {
    5c2c:	2800      	cmp	r0, #0
    5c2e:	d0f5      	beq.n	5c1c <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    5c30:	4804      	ldr	r0, [pc, #16]	; (5c44 <mutex_lock_platform+0x58>)
    5c32:	e7f3      	b.n	5c1c <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5c34:	4803      	ldr	r0, [pc, #12]	; (5c44 <mutex_lock_platform+0x58>)
    5c36:	e7f1      	b.n	5c1c <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    5c38:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    5c3c:	4770      	bx	lr
    5c3e:	bf00      	nop
    5c40:	ffff8fea 	.word	0xffff8fea
    5c44:	ffff8fe9 	.word	0xffff8fe9

00005c48 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5c48:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    5c4a:	4604      	mov	r4, r0
    5c4c:	b190      	cbz	r0, 5c74 <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    5c4e:	6863      	ldr	r3, [r4, #4]
    5c50:	2b04      	cmp	r3, #4
    5c52:	d00e      	beq.n	5c72 <mutex_free_platform+0x2a>
    5c54:	2b08      	cmp	r3, #8
    5c56:	d00c      	beq.n	5c72 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5c58:	b15b      	cbz	r3, 5c72 <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    5c5a:	f013 0f02 	tst.w	r3, #2
    5c5e:	d10e      	bne.n	5c7e <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    5c60:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    5c62:	2200      	movs	r2, #0
    5c64:	601a      	str	r2, [r3, #0]
    5c66:	605a      	str	r2, [r3, #4]
    5c68:	609a      	str	r2, [r3, #8]
    5c6a:	60da      	str	r2, [r3, #12]
    5c6c:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    5c6e:	2300      	movs	r3, #0
    5c70:	6063      	str	r3, [r4, #4]
}
    5c72:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    5c74:	4b05      	ldr	r3, [pc, #20]	; (5c8c <mutex_free_platform+0x44>)
    5c76:	685b      	ldr	r3, [r3, #4]
    5c78:	4805      	ldr	r0, [pc, #20]	; (5c90 <mutex_free_platform+0x48>)
    5c7a:	4798      	blx	r3
    5c7c:	e7e7      	b.n	5c4e <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    5c7e:	4621      	mov	r1, r4
    5c80:	4804      	ldr	r0, [pc, #16]	; (5c94 <mutex_free_platform+0x4c>)
    5c82:	f004 fd51 	bl	a728 <k_mem_slab_free>
        mutex->mutex = NULL;
    5c86:	2300      	movs	r3, #0
    5c88:	6023      	str	r3, [r4, #0]
    5c8a:	e7f0      	b.n	5c6e <mutex_free_platform+0x26>
    5c8c:	20004168 	.word	0x20004168
    5c90:	00011e58 	.word	0x00011e58
    5c94:	2000ca58 	.word	0x2000ca58

00005c98 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5c98:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    5c9a:	4604      	mov	r4, r0
    5c9c:	b178      	cbz	r0, 5cbe <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    5c9e:	6863      	ldr	r3, [r4, #4]
    5ca0:	2b04      	cmp	r3, #4
    5ca2:	d00b      	beq.n	5cbc <mutex_init_platform+0x24>
    5ca4:	2b08      	cmp	r3, #8
    5ca6:	d009      	beq.n	5cbc <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    5ca8:	b90b      	cbnz	r3, 5cae <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    5caa:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    5cac:	b163      	cbz	r3, 5cc8 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    5cae:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    5cb0:	f00a fc89 	bl	105c6 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    5cb4:	6863      	ldr	r3, [r4, #4]
    5cb6:	f043 0301 	orr.w	r3, r3, #1
    5cba:	6063      	str	r3, [r4, #4]
}
    5cbc:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    5cbe:	4b10      	ldr	r3, [pc, #64]	; (5d00 <mutex_init_platform+0x68>)
    5cc0:	685b      	ldr	r3, [r3, #4]
    5cc2:	4810      	ldr	r0, [pc, #64]	; (5d04 <mutex_init_platform+0x6c>)
    5cc4:	4798      	blx	r3
    5cc6:	e7ea      	b.n	5c9e <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    5cc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5cd0:	4621      	mov	r1, r4
    5cd2:	480d      	ldr	r0, [pc, #52]	; (5d08 <mutex_init_platform+0x70>)
    5cd4:	f004 fcb2 	bl	a63c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    5cd8:	b908      	cbnz	r0, 5cde <mutex_init_platform+0x46>
    5cda:	6823      	ldr	r3, [r4, #0]
    5cdc:	b91b      	cbnz	r3, 5ce6 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    5cde:	4b08      	ldr	r3, [pc, #32]	; (5d00 <mutex_init_platform+0x68>)
    5ce0:	685b      	ldr	r3, [r3, #4]
    5ce2:	480a      	ldr	r0, [pc, #40]	; (5d0c <mutex_init_platform+0x74>)
    5ce4:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    5ce6:	6823      	ldr	r3, [r4, #0]
    5ce8:	2200      	movs	r2, #0
    5cea:	601a      	str	r2, [r3, #0]
    5cec:	605a      	str	r2, [r3, #4]
    5cee:	609a      	str	r2, [r3, #8]
    5cf0:	60da      	str	r2, [r3, #12]
    5cf2:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    5cf4:	6863      	ldr	r3, [r4, #4]
    5cf6:	f043 0302 	orr.w	r3, r3, #2
    5cfa:	6063      	str	r3, [r4, #4]
    5cfc:	e7d7      	b.n	5cae <mutex_init_platform+0x16>
    5cfe:	bf00      	nop
    5d00:	20004168 	.word	0x20004168
    5d04:	00011e58 	.word	0x00011e58
    5d08:	2000ca58 	.word	0x2000ca58
    5d0c:	00011e80 	.word	0x00011e80

00005d10 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    5d10:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    5d12:	2340      	movs	r3, #64	; 0x40
    5d14:	2214      	movs	r2, #20
    5d16:	4904      	ldr	r1, [pc, #16]	; (5d28 <nrf_cc3xx_platform_mutex_init+0x18>)
    5d18:	4804      	ldr	r0, [pc, #16]	; (5d2c <nrf_cc3xx_platform_mutex_init+0x1c>)
    5d1a:	f00a fc00 	bl	1051e <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    5d1e:	4904      	ldr	r1, [pc, #16]	; (5d30 <nrf_cc3xx_platform_mutex_init+0x20>)
    5d20:	4804      	ldr	r0, [pc, #16]	; (5d34 <nrf_cc3xx_platform_mutex_init+0x24>)
    5d22:	f008 ff61 	bl	ebe8 <nrf_cc3xx_platform_set_mutexes>
}
    5d26:	bd08      	pop	{r3, pc}
    5d28:	2000ca78 	.word	0x2000ca78
    5d2c:	2000ca58 	.word	0x2000ca58
    5d30:	00011ec0 	.word	0x00011ec0
    5d34:	00011eb0 	.word	0x00011eb0

00005d38 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    5d38:	4901      	ldr	r1, [pc, #4]	; (5d40 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    5d3a:	2210      	movs	r2, #16
	str	r2, [r1]
    5d3c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    5d3e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    5d40:	e000ed10 	.word	0xe000ed10

00005d44 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    5d44:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    5d46:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    5d48:	f380 8811 	msr	BASEPRI, r0
	isb
    5d4c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    5d50:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    5d54:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    5d56:	b662      	cpsie	i
	isb
    5d58:	f3bf 8f6f 	isb	sy

	bx	lr
    5d5c:	4770      	bx	lr
    5d5e:	bf00      	nop

00005d60 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    5d60:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    5d62:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    5d64:	f381 8811 	msr	BASEPRI, r1

	wfe
    5d68:	bf20      	wfe

	msr	BASEPRI, r0
    5d6a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    5d6e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    5d70:	4770      	bx	lr
    5d72:	bf00      	nop

00005d74 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    5d74:	b570      	push	{r4, r5, r6, lr}
    5d76:	b086      	sub	sp, #24
    5d78:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    5d7a:	4e1e      	ldr	r6, [pc, #120]	; (5df4 <esf_dump+0x80>)
    5d7c:	6883      	ldr	r3, [r0, #8]
    5d7e:	9305      	str	r3, [sp, #20]
    5d80:	6843      	ldr	r3, [r0, #4]
    5d82:	9304      	str	r3, [sp, #16]
    5d84:	6803      	ldr	r3, [r0, #0]
    5d86:	9303      	str	r3, [sp, #12]
    5d88:	4b1b      	ldr	r3, [pc, #108]	; (5df8 <esf_dump+0x84>)
    5d8a:	9302      	str	r3, [sp, #8]
    5d8c:	2400      	movs	r4, #0
    5d8e:	9401      	str	r4, [sp, #4]
    5d90:	9400      	str	r4, [sp, #0]
    5d92:	4623      	mov	r3, r4
    5d94:	2201      	movs	r2, #1
    5d96:	4631      	mov	r1, r6
    5d98:	4620      	mov	r0, r4
    5d9a:	f009 faf6 	bl	f38a <z_log_msg2_runtime_create>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    5d9e:	696b      	ldr	r3, [r5, #20]
    5da0:	9305      	str	r3, [sp, #20]
    5da2:	692b      	ldr	r3, [r5, #16]
    5da4:	9304      	str	r3, [sp, #16]
    5da6:	68eb      	ldr	r3, [r5, #12]
    5da8:	9303      	str	r3, [sp, #12]
    5daa:	4b14      	ldr	r3, [pc, #80]	; (5dfc <esf_dump+0x88>)
    5dac:	9302      	str	r3, [sp, #8]
    5dae:	9401      	str	r4, [sp, #4]
    5db0:	9400      	str	r4, [sp, #0]
    5db2:	4623      	mov	r3, r4
    5db4:	2201      	movs	r2, #1
    5db6:	4631      	mov	r1, r6
    5db8:	4620      	mov	r0, r4
    5dba:	f009 fae6 	bl	f38a <z_log_msg2_runtime_create>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    5dbe:	69eb      	ldr	r3, [r5, #28]
    5dc0:	9303      	str	r3, [sp, #12]
    5dc2:	4b0f      	ldr	r3, [pc, #60]	; (5e00 <esf_dump+0x8c>)
    5dc4:	9302      	str	r3, [sp, #8]
    5dc6:	9401      	str	r4, [sp, #4]
    5dc8:	9400      	str	r4, [sp, #0]
    5dca:	4623      	mov	r3, r4
    5dcc:	2201      	movs	r2, #1
    5dce:	4631      	mov	r1, r6
    5dd0:	4620      	mov	r0, r4
    5dd2:	f009 fada 	bl	f38a <z_log_msg2_runtime_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    5dd6:	69ab      	ldr	r3, [r5, #24]
    5dd8:	9303      	str	r3, [sp, #12]
    5dda:	4b0a      	ldr	r3, [pc, #40]	; (5e04 <esf_dump+0x90>)
    5ddc:	9302      	str	r3, [sp, #8]
    5dde:	9401      	str	r4, [sp, #4]
    5de0:	9400      	str	r4, [sp, #0]
    5de2:	4623      	mov	r3, r4
    5de4:	2201      	movs	r2, #1
    5de6:	4631      	mov	r1, r6
    5de8:	4620      	mov	r0, r4
    5dea:	f009 face 	bl	f38a <z_log_msg2_runtime_create>
		esf->basic.pc);
}
    5dee:	b006      	add	sp, #24
    5df0:	bd70      	pop	{r4, r5, r6, pc}
    5df2:	bf00      	nop
    5df4:	00011004 	.word	0x00011004
    5df8:	00011ed4 	.word	0x00011ed4
    5dfc:	00011f04 	.word	0x00011f04
    5e00:	00011f34 	.word	0x00011f34
    5e04:	00011f44 	.word	0x00011f44

00005e08 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    5e08:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    5e0a:	2800      	cmp	r0, #0
    5e0c:	db07      	blt.n	5e1e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5e0e:	f000 021f 	and.w	r2, r0, #31
    5e12:	0940      	lsrs	r0, r0, #5
    5e14:	2301      	movs	r3, #1
    5e16:	4093      	lsls	r3, r2
    5e18:	4a01      	ldr	r2, [pc, #4]	; (5e20 <arch_irq_enable+0x18>)
    5e1a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    5e1e:	4770      	bx	lr
    5e20:	e000e100 	.word	0xe000e100

00005e24 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    5e24:	0942      	lsrs	r2, r0, #5
    5e26:	4b05      	ldr	r3, [pc, #20]	; (5e3c <arch_irq_is_enabled+0x18>)
    5e28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5e2c:	f000 001f 	and.w	r0, r0, #31
    5e30:	2301      	movs	r3, #1
    5e32:	fa03 f000 	lsl.w	r0, r3, r0
}
    5e36:	4010      	ands	r0, r2
    5e38:	4770      	bx	lr
    5e3a:	bf00      	nop
    5e3c:	e000e100 	.word	0xe000e100

00005e40 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    5e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e42:	4604      	mov	r4, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    5e44:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    5e46:	2d07      	cmp	r5, #7
    5e48:	d80b      	bhi.n	5e62 <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5e4a:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    5e4c:	2800      	cmp	r0, #0
    5e4e:	db1b      	blt.n	5e88 <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5e50:	016d      	lsls	r5, r5, #5
    5e52:	b2ed      	uxtb	r5, r5
    5e54:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    5e58:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    5e5c:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    5e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e62:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    5e64:	4f0c      	ldr	r7, [pc, #48]	; (5e98 <z_arm_irq_priority_set+0x58>)
    5e66:	2357      	movs	r3, #87	; 0x57
    5e68:	463a      	mov	r2, r7
    5e6a:	490c      	ldr	r1, [pc, #48]	; (5e9c <z_arm_irq_priority_set+0x5c>)
    5e6c:	480c      	ldr	r0, [pc, #48]	; (5ea0 <z_arm_irq_priority_set+0x60>)
    5e6e:	f009 f9d8 	bl	f222 <assert_print>
    5e72:	2307      	movs	r3, #7
    5e74:	4622      	mov	r2, r4
    5e76:	4631      	mov	r1, r6
    5e78:	480a      	ldr	r0, [pc, #40]	; (5ea4 <z_arm_irq_priority_set+0x64>)
    5e7a:	f009 f9d2 	bl	f222 <assert_print>
    5e7e:	2157      	movs	r1, #87	; 0x57
    5e80:	4638      	mov	r0, r7
    5e82:	f009 f9c7 	bl	f214 <assert_post_action>
    5e86:	e7e0      	b.n	5e4a <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5e88:	f000 000f 	and.w	r0, r0, #15
    5e8c:	016d      	lsls	r5, r5, #5
    5e8e:	b2ed      	uxtb	r5, r5
    5e90:	4b05      	ldr	r3, [pc, #20]	; (5ea8 <z_arm_irq_priority_set+0x68>)
    5e92:	541d      	strb	r5, [r3, r0]
}
    5e94:	e7e4      	b.n	5e60 <z_arm_irq_priority_set+0x20>
    5e96:	bf00      	nop
    5e98:	00011f74 	.word	0x00011f74
    5e9c:	00011fac 	.word	0x00011fac
    5ea0:	000116a8 	.word	0x000116a8
    5ea4:	00011fc8 	.word	0x00011fc8
    5ea8:	e000ed14 	.word	0xe000ed14

00005eac <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    5eac:	bf30      	wfi
    b z_SysNmiOnReset
    5eae:	f7ff bffd 	b.w	5eac <z_SysNmiOnReset>
    5eb2:	bf00      	nop

00005eb4 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    5eb4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5eb6:	4b0b      	ldr	r3, [pc, #44]	; (5ee4 <z_arm_prep_c+0x30>)
    5eb8:	4a0b      	ldr	r2, [pc, #44]	; (5ee8 <z_arm_prep_c+0x34>)
    5eba:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    5ebe:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5ec0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5ec4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    5ec8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    5ecc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    5ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    5ed4:	f004 fade 	bl	a494 <z_bss_zero>
	z_data_copy();
    5ed8:	f006 fca4 	bl	c824 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    5edc:	f000 fc72 	bl	67c4 <z_arm_interrupt_init>
	z_cstart();
    5ee0:	f004 fb36 	bl	a550 <z_cstart>
    5ee4:	e000ed00 	.word	0xe000ed00
    5ee8:	00000000 	.word	0x00000000

00005eec <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    5eec:	4a0a      	ldr	r2, [pc, #40]	; (5f18 <arch_swap+0x2c>)
    5eee:	6893      	ldr	r3, [r2, #8]
    5ef0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    5ef4:	4909      	ldr	r1, [pc, #36]	; (5f1c <arch_swap+0x30>)
    5ef6:	6809      	ldr	r1, [r1, #0]
    5ef8:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5efc:	4908      	ldr	r1, [pc, #32]	; (5f20 <arch_swap+0x34>)
    5efe:	684b      	ldr	r3, [r1, #4]
    5f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    5f04:	604b      	str	r3, [r1, #4]
    5f06:	2300      	movs	r3, #0
    5f08:	f383 8811 	msr	BASEPRI, r3
    5f0c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    5f10:	6893      	ldr	r3, [r2, #8]
}
    5f12:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    5f16:	4770      	bx	lr
    5f18:	2000d4e0 	.word	0x2000d4e0
    5f1c:	00012ce8 	.word	0x00012ce8
    5f20:	e000ed00 	.word	0xe000ed00

00005f24 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    5f24:	4913      	ldr	r1, [pc, #76]	; (5f74 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    5f26:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    5f28:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    5f2c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    5f2e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    5f32:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5f36:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    5f38:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    5f3c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    5f40:	4f0d      	ldr	r7, [pc, #52]	; (5f78 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    5f42:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    5f46:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    5f48:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    5f4a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    5f4c:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    5f50:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5f52:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    5f56:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    5f5a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    5f5c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    5f5e:	f000 fcdb 	bl	6918 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    5f62:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    5f66:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    5f6a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    5f6e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    5f72:	4770      	bx	lr
    ldr r1, =_kernel
    5f74:	2000d4e0 	.word	0x2000d4e0
    ldr v4, =_SCS_ICSR
    5f78:	e000ed04 	.word	0xe000ed04

00005f7c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    5f7c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5f80:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    5f82:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    5f86:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    5f8a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5f8c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5f90:	2902      	cmp	r1, #2
    beq _oops
    5f92:	d0ff      	beq.n	5f94 <_oops>

00005f94 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    5f94:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    5f96:	f009 fa13 	bl	f3c0 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    5f9a:	bd01      	pop	{r0, pc}

00005f9c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    5f9c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    5f9e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    5fa2:	490e      	ldr	r1, [pc, #56]	; (5fdc <arch_new_thread+0x40>)
    5fa4:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    5fa8:	f021 0101 	bic.w	r1, r1, #1
    5fac:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    5fb0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    5fb4:	9b01      	ldr	r3, [sp, #4]
    5fb6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    5fba:	9b02      	ldr	r3, [sp, #8]
    5fbc:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    5fc0:	9b03      	ldr	r3, [sp, #12]
    5fc2:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    5fc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    5fca:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    5fce:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    5fd0:	2300      	movs	r3, #0
    5fd2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    5fd6:	bc10      	pop	{r4}
    5fd8:	4770      	bx	lr
    5fda:	bf00      	nop
    5fdc:	0000f165 	.word	0x0000f165

00005fe0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    5fe0:	4b12      	ldr	r3, [pc, #72]	; (602c <z_check_thread_stack_fail+0x4c>)
    5fe2:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    5fe4:	b302      	cbz	r2, 6028 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    5fe6:	f110 0f16 	cmn.w	r0, #22
    5fea:	d011      	beq.n	6010 <z_check_thread_stack_fail+0x30>
    5fec:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    5ff0:	f1a3 0c20 	sub.w	ip, r3, #32
    5ff4:	4584      	cmp	ip, r0
    5ff6:	d805      	bhi.n	6004 <z_check_thread_stack_fail+0x24>
    5ff8:	4283      	cmp	r3, r0
    5ffa:	d905      	bls.n	6008 <z_check_thread_stack_fail+0x28>
    5ffc:	428b      	cmp	r3, r1
    5ffe:	d805      	bhi.n	600c <z_check_thread_stack_fail+0x2c>
    6000:	2100      	movs	r1, #0
    6002:	e00b      	b.n	601c <z_check_thread_stack_fail+0x3c>
    6004:	2100      	movs	r1, #0
    6006:	e009      	b.n	601c <z_check_thread_stack_fail+0x3c>
    6008:	2100      	movs	r1, #0
    600a:	e007      	b.n	601c <z_check_thread_stack_fail+0x3c>
    600c:	2101      	movs	r1, #1
    600e:	e005      	b.n	601c <z_check_thread_stack_fail+0x3c>
    6010:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    6014:	428b      	cmp	r3, r1
    6016:	bf94      	ite	ls
    6018:	2100      	movls	r1, #0
    601a:	2101      	movhi	r1, #1
    601c:	b909      	cbnz	r1, 6022 <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    601e:	2000      	movs	r0, #0
}
    6020:	4770      	bx	lr
		return thread->stack_info.start;
    6022:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    6026:	4770      	bx	lr
		return 0;
    6028:	2000      	movs	r0, #0
    602a:	4770      	bx	lr
    602c:	2000d4e0 	.word	0x2000d4e0

00006030 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    6030:	b508      	push	{r3, lr}
    6032:	460d      	mov	r5, r1
    6034:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    6036:	4b08      	ldr	r3, [pc, #32]	; (6058 <arch_switch_to_main_thread+0x28>)
    6038:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    603a:	f000 fc6d 	bl	6918 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    603e:	4620      	mov	r0, r4
    6040:	f385 8809 	msr	PSP, r5
    6044:	2100      	movs	r1, #0
    6046:	b663      	cpsie	if
    6048:	f381 8811 	msr	BASEPRI, r1
    604c:	f3bf 8f6f 	isb	sy
    6050:	2200      	movs	r2, #0
    6052:	2300      	movs	r3, #0
    6054:	f009 f886 	bl	f164 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    6058:	2000d4e0 	.word	0x2000d4e0

0000605c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    605c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    605e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    6060:	4a0b      	ldr	r2, [pc, #44]	; (6090 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    6062:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    6064:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    6066:	bf1e      	ittt	ne
	movne	r1, #0
    6068:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    606a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    606c:	f00a fa8f 	blne	1058e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    6070:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    6072:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    6076:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    607a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    607e:	4905      	ldr	r1, [pc, #20]	; (6094 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    6080:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    6082:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    6084:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    6086:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    608a:	4903      	ldr	r1, [pc, #12]	; (6098 <_isr_wrapper+0x3c>)
	bx r1
    608c:	4708      	bx	r1
    608e:	0000      	.short	0x0000
	ldr r2, =_kernel
    6090:	2000d4e0 	.word	0x2000d4e0
	ldr r1, =_sw_isr_table
    6094:	00010e5c 	.word	0x00010e5c
	ldr r1, =z_arm_int_exit
    6098:	0000609d 	.word	0x0000609d

0000609c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    609c:	4b04      	ldr	r3, [pc, #16]	; (60b0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    609e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    60a0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    60a2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    60a4:	d003      	beq.n	60ae <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    60a6:	4903      	ldr	r1, [pc, #12]	; (60b4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    60a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    60ac:	600a      	str	r2, [r1, #0]

000060ae <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    60ae:	4770      	bx	lr
	ldr r3, =_kernel
    60b0:	2000d4e0 	.word	0x2000d4e0
	ldr r1, =_SCS_ICSR
    60b4:	e000ed04 	.word	0xe000ed04

000060b8 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    60b8:	b570      	push	{r4, r5, r6, lr}
    60ba:	b084      	sub	sp, #16
    60bc:	4605      	mov	r5, r0
    60be:	460e      	mov	r6, r1
    60c0:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    60c2:	4b47      	ldr	r3, [pc, #284]	; (61e0 <bus_fault+0x128>)
    60c4:	9302      	str	r3, [sp, #8]
    60c6:	2000      	movs	r0, #0
    60c8:	9001      	str	r0, [sp, #4]
    60ca:	9000      	str	r0, [sp, #0]
    60cc:	4603      	mov	r3, r0
    60ce:	2201      	movs	r2, #1
    60d0:	4944      	ldr	r1, [pc, #272]	; (61e4 <bus_fault+0x12c>)
    60d2:	f009 f989 	bl	f3e8 <z_log_msg2_runtime_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    60d6:	4b44      	ldr	r3, [pc, #272]	; (61e8 <bus_fault+0x130>)
    60d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    60da:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    60de:	d125      	bne.n	612c <bus_fault+0x74>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    60e0:	4b41      	ldr	r3, [pc, #260]	; (61e8 <bus_fault+0x130>)
    60e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    60e4:	f413 6f00 	tst.w	r3, #2048	; 0x800
    60e8:	d12b      	bne.n	6142 <bus_fault+0x8a>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    60ea:	4b3f      	ldr	r3, [pc, #252]	; (61e8 <bus_fault+0x130>)
    60ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    60ee:	f413 7f00 	tst.w	r3, #512	; 0x200
    60f2:	d131      	bne.n	6158 <bus_fault+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    60f4:	4b3c      	ldr	r3, [pc, #240]	; (61e8 <bus_fault+0x130>)
    60f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    60f8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    60fc:	d14f      	bne.n	619e <bus_fault+0xe6>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    60fe:	4b3a      	ldr	r3, [pc, #232]	; (61e8 <bus_fault+0x130>)
    6100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6102:	f413 7f80 	tst.w	r3, #256	; 0x100
    6106:	d155      	bne.n	61b4 <bus_fault+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    6108:	4b37      	ldr	r3, [pc, #220]	; (61e8 <bus_fault+0x130>)
    610a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    610c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    6110:	d15b      	bne.n	61ca <bus_fault+0x112>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6112:	4a35      	ldr	r2, [pc, #212]	; (61e8 <bus_fault+0x130>)
    6114:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6116:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    611a:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    611c:	2101      	movs	r1, #1
    611e:	4628      	mov	r0, r5
    6120:	f009 f960 	bl	f3e4 <memory_fault_recoverable>
    6124:	7020      	strb	r0, [r4, #0]

	return reason;
}
    6126:	2000      	movs	r0, #0
    6128:	b004      	add	sp, #16
    612a:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
    612c:	4b2f      	ldr	r3, [pc, #188]	; (61ec <bus_fault+0x134>)
    612e:	9302      	str	r3, [sp, #8]
    6130:	2000      	movs	r0, #0
    6132:	9001      	str	r0, [sp, #4]
    6134:	9000      	str	r0, [sp, #0]
    6136:	4603      	mov	r3, r0
    6138:	2201      	movs	r2, #1
    613a:	492a      	ldr	r1, [pc, #168]	; (61e4 <bus_fault+0x12c>)
    613c:	f009 f954 	bl	f3e8 <z_log_msg2_runtime_create>
    6140:	e7ce      	b.n	60e0 <bus_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    6142:	4b2b      	ldr	r3, [pc, #172]	; (61f0 <bus_fault+0x138>)
    6144:	9302      	str	r3, [sp, #8]
    6146:	2000      	movs	r0, #0
    6148:	9001      	str	r0, [sp, #4]
    614a:	9000      	str	r0, [sp, #0]
    614c:	4603      	mov	r3, r0
    614e:	2201      	movs	r2, #1
    6150:	4924      	ldr	r1, [pc, #144]	; (61e4 <bus_fault+0x12c>)
    6152:	f009 f949 	bl	f3e8 <z_log_msg2_runtime_create>
    6156:	e7c8      	b.n	60ea <bus_fault+0x32>
		PR_FAULT_INFO("  Precise data bus error");
    6158:	4b26      	ldr	r3, [pc, #152]	; (61f4 <bus_fault+0x13c>)
    615a:	9302      	str	r3, [sp, #8]
    615c:	2000      	movs	r0, #0
    615e:	9001      	str	r0, [sp, #4]
    6160:	9000      	str	r0, [sp, #0]
    6162:	4603      	mov	r3, r0
    6164:	2201      	movs	r2, #1
    6166:	491f      	ldr	r1, [pc, #124]	; (61e4 <bus_fault+0x12c>)
    6168:	f009 f93e 	bl	f3e8 <z_log_msg2_runtime_create>
		STORE_xFAR(bfar, SCB->BFAR);
    616c:	4b1e      	ldr	r3, [pc, #120]	; (61e8 <bus_fault+0x130>)
    616e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    6170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6172:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    6176:	d0bd      	beq.n	60f4 <bus_fault+0x3c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    6178:	9203      	str	r2, [sp, #12]
    617a:	4b1f      	ldr	r3, [pc, #124]	; (61f8 <bus_fault+0x140>)
    617c:	9302      	str	r3, [sp, #8]
    617e:	2000      	movs	r0, #0
    6180:	9001      	str	r0, [sp, #4]
    6182:	9000      	str	r0, [sp, #0]
    6184:	4603      	mov	r3, r0
    6186:	2201      	movs	r2, #1
    6188:	4916      	ldr	r1, [pc, #88]	; (61e4 <bus_fault+0x12c>)
    618a:	f009 f92d 	bl	f3e8 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    618e:	2e00      	cmp	r6, #0
    6190:	d0b0      	beq.n	60f4 <bus_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    6192:	4a15      	ldr	r2, [pc, #84]	; (61e8 <bus_fault+0x130>)
    6194:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6196:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    619a:	6293      	str	r3, [r2, #40]	; 0x28
    619c:	e7aa      	b.n	60f4 <bus_fault+0x3c>
		PR_FAULT_INFO("  Imprecise data bus error");
    619e:	4b17      	ldr	r3, [pc, #92]	; (61fc <bus_fault+0x144>)
    61a0:	9302      	str	r3, [sp, #8]
    61a2:	2000      	movs	r0, #0
    61a4:	9001      	str	r0, [sp, #4]
    61a6:	9000      	str	r0, [sp, #0]
    61a8:	4603      	mov	r3, r0
    61aa:	2201      	movs	r2, #1
    61ac:	490d      	ldr	r1, [pc, #52]	; (61e4 <bus_fault+0x12c>)
    61ae:	f009 f91b 	bl	f3e8 <z_log_msg2_runtime_create>
    61b2:	e7a4      	b.n	60fe <bus_fault+0x46>
		PR_FAULT_INFO("  Instruction bus error");
    61b4:	4b12      	ldr	r3, [pc, #72]	; (6200 <bus_fault+0x148>)
    61b6:	9302      	str	r3, [sp, #8]
    61b8:	2000      	movs	r0, #0
    61ba:	9001      	str	r0, [sp, #4]
    61bc:	9000      	str	r0, [sp, #0]
    61be:	4603      	mov	r3, r0
    61c0:	2201      	movs	r2, #1
    61c2:	4908      	ldr	r1, [pc, #32]	; (61e4 <bus_fault+0x12c>)
    61c4:	f009 f910 	bl	f3e8 <z_log_msg2_runtime_create>
    61c8:	e7a3      	b.n	6112 <bus_fault+0x5a>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    61ca:	4b0e      	ldr	r3, [pc, #56]	; (6204 <bus_fault+0x14c>)
    61cc:	9302      	str	r3, [sp, #8]
    61ce:	2000      	movs	r0, #0
    61d0:	9001      	str	r0, [sp, #4]
    61d2:	9000      	str	r0, [sp, #0]
    61d4:	4603      	mov	r3, r0
    61d6:	2201      	movs	r2, #1
    61d8:	4902      	ldr	r1, [pc, #8]	; (61e4 <bus_fault+0x12c>)
    61da:	f009 f905 	bl	f3e8 <z_log_msg2_runtime_create>
    61de:	e798      	b.n	6112 <bus_fault+0x5a>
    61e0:	00012008 	.word	0x00012008
    61e4:	00011004 	.word	0x00011004
    61e8:	e000ed00 	.word	0xe000ed00
    61ec:	00012020 	.word	0x00012020
    61f0:	00012034 	.word	0x00012034
    61f4:	00012048 	.word	0x00012048
    61f8:	00012064 	.word	0x00012064
    61fc:	0001207c 	.word	0x0001207c
    6200:	00012098 	.word	0x00012098
    6204:	000120b0 	.word	0x000120b0

00006208 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    6208:	b500      	push	{lr}
    620a:	b085      	sub	sp, #20
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    620c:	4b3a      	ldr	r3, [pc, #232]	; (62f8 <usage_fault+0xf0>)
    620e:	9302      	str	r3, [sp, #8]
    6210:	2000      	movs	r0, #0
    6212:	9001      	str	r0, [sp, #4]
    6214:	9000      	str	r0, [sp, #0]
    6216:	4603      	mov	r3, r0
    6218:	2201      	movs	r2, #1
    621a:	4938      	ldr	r1, [pc, #224]	; (62fc <usage_fault+0xf4>)
    621c:	f009 f8e4 	bl	f3e8 <z_log_msg2_runtime_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6220:	4b37      	ldr	r3, [pc, #220]	; (6300 <usage_fault+0xf8>)
    6222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6224:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    6228:	d123      	bne.n	6272 <usage_fault+0x6a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    622a:	4b35      	ldr	r3, [pc, #212]	; (6300 <usage_fault+0xf8>)
    622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    622e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    6232:	d129      	bne.n	6288 <usage_fault+0x80>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    6234:	4b32      	ldr	r3, [pc, #200]	; (6300 <usage_fault+0xf8>)
    6236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6238:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    623c:	d12f      	bne.n	629e <usage_fault+0x96>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    623e:	4b30      	ldr	r3, [pc, #192]	; (6300 <usage_fault+0xf8>)
    6240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6242:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    6246:	d135      	bne.n	62b4 <usage_fault+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    6248:	4b2d      	ldr	r3, [pc, #180]	; (6300 <usage_fault+0xf8>)
    624a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    624c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    6250:	d13b      	bne.n	62ca <usage_fault+0xc2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    6252:	4b2b      	ldr	r3, [pc, #172]	; (6300 <usage_fault+0xf8>)
    6254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6256:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    625a:	d141      	bne.n	62e0 <usage_fault+0xd8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    625c:	4a28      	ldr	r2, [pc, #160]	; (6300 <usage_fault+0xf8>)
    625e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6260:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    6264:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    6268:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    626a:	2000      	movs	r0, #0
    626c:	b005      	add	sp, #20
    626e:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    6272:	4b24      	ldr	r3, [pc, #144]	; (6304 <usage_fault+0xfc>)
    6274:	9302      	str	r3, [sp, #8]
    6276:	2000      	movs	r0, #0
    6278:	9001      	str	r0, [sp, #4]
    627a:	9000      	str	r0, [sp, #0]
    627c:	4603      	mov	r3, r0
    627e:	2201      	movs	r2, #1
    6280:	491e      	ldr	r1, [pc, #120]	; (62fc <usage_fault+0xf4>)
    6282:	f009 f8b1 	bl	f3e8 <z_log_msg2_runtime_create>
    6286:	e7d0      	b.n	622a <usage_fault+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    6288:	4b1f      	ldr	r3, [pc, #124]	; (6308 <usage_fault+0x100>)
    628a:	9302      	str	r3, [sp, #8]
    628c:	2000      	movs	r0, #0
    628e:	9001      	str	r0, [sp, #4]
    6290:	9000      	str	r0, [sp, #0]
    6292:	4603      	mov	r3, r0
    6294:	2201      	movs	r2, #1
    6296:	4919      	ldr	r1, [pc, #100]	; (62fc <usage_fault+0xf4>)
    6298:	f009 f8a6 	bl	f3e8 <z_log_msg2_runtime_create>
    629c:	e7ca      	b.n	6234 <usage_fault+0x2c>
		PR_FAULT_INFO("  No coprocessor instructions");
    629e:	4b1b      	ldr	r3, [pc, #108]	; (630c <usage_fault+0x104>)
    62a0:	9302      	str	r3, [sp, #8]
    62a2:	2000      	movs	r0, #0
    62a4:	9001      	str	r0, [sp, #4]
    62a6:	9000      	str	r0, [sp, #0]
    62a8:	4603      	mov	r3, r0
    62aa:	2201      	movs	r2, #1
    62ac:	4913      	ldr	r1, [pc, #76]	; (62fc <usage_fault+0xf4>)
    62ae:	f009 f89b 	bl	f3e8 <z_log_msg2_runtime_create>
    62b2:	e7c4      	b.n	623e <usage_fault+0x36>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    62b4:	4b16      	ldr	r3, [pc, #88]	; (6310 <usage_fault+0x108>)
    62b6:	9302      	str	r3, [sp, #8]
    62b8:	2000      	movs	r0, #0
    62ba:	9001      	str	r0, [sp, #4]
    62bc:	9000      	str	r0, [sp, #0]
    62be:	4603      	mov	r3, r0
    62c0:	2201      	movs	r2, #1
    62c2:	490e      	ldr	r1, [pc, #56]	; (62fc <usage_fault+0xf4>)
    62c4:	f009 f890 	bl	f3e8 <z_log_msg2_runtime_create>
    62c8:	e7be      	b.n	6248 <usage_fault+0x40>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    62ca:	4b12      	ldr	r3, [pc, #72]	; (6314 <usage_fault+0x10c>)
    62cc:	9302      	str	r3, [sp, #8]
    62ce:	2000      	movs	r0, #0
    62d0:	9001      	str	r0, [sp, #4]
    62d2:	9000      	str	r0, [sp, #0]
    62d4:	4603      	mov	r3, r0
    62d6:	2201      	movs	r2, #1
    62d8:	4908      	ldr	r1, [pc, #32]	; (62fc <usage_fault+0xf4>)
    62da:	f009 f885 	bl	f3e8 <z_log_msg2_runtime_create>
    62de:	e7b8      	b.n	6252 <usage_fault+0x4a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    62e0:	4b0d      	ldr	r3, [pc, #52]	; (6318 <usage_fault+0x110>)
    62e2:	9302      	str	r3, [sp, #8]
    62e4:	2000      	movs	r0, #0
    62e6:	9001      	str	r0, [sp, #4]
    62e8:	9000      	str	r0, [sp, #0]
    62ea:	4603      	mov	r3, r0
    62ec:	2201      	movs	r2, #1
    62ee:	4903      	ldr	r1, [pc, #12]	; (62fc <usage_fault+0xf4>)
    62f0:	f009 f87a 	bl	f3e8 <z_log_msg2_runtime_create>
    62f4:	e7b2      	b.n	625c <usage_fault+0x54>
    62f6:	bf00      	nop
    62f8:	000120e0 	.word	0x000120e0
    62fc:	00011004 	.word	0x00011004
    6300:	e000ed00 	.word	0xe000ed00
    6304:	000120f8 	.word	0x000120f8
    6308:	0001210c 	.word	0x0001210c
    630c:	00012128 	.word	0x00012128
    6310:	00012148 	.word	0x00012148
    6314:	00012170 	.word	0x00012170
    6318:	0001218c 	.word	0x0001218c

0000631c <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    631c:	b500      	push	{lr}
    631e:	b085      	sub	sp, #20
	*recoverable = false;
    6320:	2000      	movs	r0, #0
    6322:	7008      	strb	r0, [r1, #0]

	PR_FAULT_INFO(
    6324:	4b05      	ldr	r3, [pc, #20]	; (633c <debug_monitor+0x20>)
    6326:	9302      	str	r3, [sp, #8]
    6328:	9001      	str	r0, [sp, #4]
    632a:	9000      	str	r0, [sp, #0]
    632c:	4603      	mov	r3, r0
    632e:	2201      	movs	r2, #1
    6330:	4903      	ldr	r1, [pc, #12]	; (6340 <debug_monitor+0x24>)
    6332:	f009 f859 	bl	f3e8 <z_log_msg2_runtime_create>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    6336:	b005      	add	sp, #20
    6338:	f85d fb04 	ldr.w	pc, [sp], #4
    633c:	000121b8 	.word	0x000121b8
    6340:	00011004 	.word	0x00011004

00006344 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    6344:	b500      	push	{lr}
    6346:	b087      	sub	sp, #28
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    6348:	290f      	cmp	r1, #15
    634a:	dc10      	bgt.n	636e <reserved_exception+0x2a>
    634c:	4b09      	ldr	r3, [pc, #36]	; (6374 <reserved_exception+0x30>)
    634e:	3910      	subs	r1, #16
    6350:	9104      	str	r1, [sp, #16]
    6352:	9303      	str	r3, [sp, #12]
    6354:	4b08      	ldr	r3, [pc, #32]	; (6378 <reserved_exception+0x34>)
    6356:	9302      	str	r3, [sp, #8]
    6358:	2000      	movs	r0, #0
    635a:	9001      	str	r0, [sp, #4]
    635c:	9000      	str	r0, [sp, #0]
    635e:	4603      	mov	r3, r0
    6360:	2201      	movs	r2, #1
    6362:	4906      	ldr	r1, [pc, #24]	; (637c <reserved_exception+0x38>)
    6364:	f009 f840 	bl	f3e8 <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    6368:	b007      	add	sp, #28
    636a:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
    636e:	4b04      	ldr	r3, [pc, #16]	; (6380 <reserved_exception+0x3c>)
    6370:	e7ed      	b.n	634e <reserved_exception+0xa>
    6372:	bf00      	nop
    6374:	000121f8 	.word	0x000121f8
    6378:	00012210 	.word	0x00012210
    637c:	00011004 	.word	0x00011004
    6380:	000121dc 	.word	0x000121dc

00006384 <mem_manage_fault>:
{
    6384:	b5f0      	push	{r4, r5, r6, r7, lr}
    6386:	b085      	sub	sp, #20
    6388:	4605      	mov	r5, r0
    638a:	460c      	mov	r4, r1
    638c:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    638e:	4b5f      	ldr	r3, [pc, #380]	; (650c <mem_manage_fault+0x188>)
    6390:	9302      	str	r3, [sp, #8]
    6392:	2000      	movs	r0, #0
    6394:	9001      	str	r0, [sp, #4]
    6396:	9000      	str	r0, [sp, #0]
    6398:	4603      	mov	r3, r0
    639a:	2201      	movs	r2, #1
    639c:	495c      	ldr	r1, [pc, #368]	; (6510 <mem_manage_fault+0x18c>)
    639e:	f009 f823 	bl	f3e8 <z_log_msg2_runtime_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    63a2:	4b5c      	ldr	r3, [pc, #368]	; (6514 <mem_manage_fault+0x190>)
    63a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63a6:	f013 0f10 	tst.w	r3, #16
    63aa:	d13b      	bne.n	6424 <mem_manage_fault+0xa0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    63ac:	4b59      	ldr	r3, [pc, #356]	; (6514 <mem_manage_fault+0x190>)
    63ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63b0:	f013 0f08 	tst.w	r3, #8
    63b4:	d141      	bne.n	643a <mem_manage_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    63b6:	4b57      	ldr	r3, [pc, #348]	; (6514 <mem_manage_fault+0x190>)
    63b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63ba:	f013 0f02 	tst.w	r3, #2
    63be:	d147      	bne.n	6450 <mem_manage_fault+0xcc>
	uint32_t mmfar = -EINVAL;
    63c0:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    63c4:	4b53      	ldr	r3, [pc, #332]	; (6514 <mem_manage_fault+0x190>)
    63c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63c8:	f013 0f01 	tst.w	r3, #1
    63cc:	d166      	bne.n	649c <mem_manage_fault+0x118>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    63ce:	4b51      	ldr	r3, [pc, #324]	; (6514 <mem_manage_fault+0x190>)
    63d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63d2:	f013 0f20 	tst.w	r3, #32
    63d6:	d16c      	bne.n	64b2 <mem_manage_fault+0x12e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    63d8:	4b4e      	ldr	r3, [pc, #312]	; (6514 <mem_manage_fault+0x190>)
    63da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63dc:	f013 0f10 	tst.w	r3, #16
    63e0:	d104      	bne.n	63ec <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    63e2:	4b4c      	ldr	r3, [pc, #304]	; (6514 <mem_manage_fault+0x190>)
    63e4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    63e6:	f014 0402 	ands.w	r4, r4, #2
    63ea:	d004      	beq.n	63f6 <mem_manage_fault+0x72>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    63ec:	4b49      	ldr	r3, [pc, #292]	; (6514 <mem_manage_fault+0x190>)
    63ee:	685c      	ldr	r4, [r3, #4]
    63f0:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    63f4:	d168      	bne.n	64c8 <mem_manage_fault+0x144>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    63f6:	4b47      	ldr	r3, [pc, #284]	; (6514 <mem_manage_fault+0x190>)
    63f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63fa:	f013 0f20 	tst.w	r3, #32
    63fe:	d004      	beq.n	640a <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    6400:	4a44      	ldr	r2, [pc, #272]	; (6514 <mem_manage_fault+0x190>)
    6402:	6a53      	ldr	r3, [r2, #36]	; 0x24
    6404:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    6408:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    640a:	4a42      	ldr	r2, [pc, #264]	; (6514 <mem_manage_fault+0x190>)
    640c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    640e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    6412:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    6414:	2101      	movs	r1, #1
    6416:	4628      	mov	r0, r5
    6418:	f008 ffe4 	bl	f3e4 <memory_fault_recoverable>
    641c:	7030      	strb	r0, [r6, #0]
}
    641e:	4620      	mov	r0, r4
    6420:	b005      	add	sp, #20
    6422:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    6424:	4b3c      	ldr	r3, [pc, #240]	; (6518 <mem_manage_fault+0x194>)
    6426:	9302      	str	r3, [sp, #8]
    6428:	2000      	movs	r0, #0
    642a:	9001      	str	r0, [sp, #4]
    642c:	9000      	str	r0, [sp, #0]
    642e:	4603      	mov	r3, r0
    6430:	2201      	movs	r2, #1
    6432:	4937      	ldr	r1, [pc, #220]	; (6510 <mem_manage_fault+0x18c>)
    6434:	f008 ffd8 	bl	f3e8 <z_log_msg2_runtime_create>
    6438:	e7b8      	b.n	63ac <mem_manage_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    643a:	4b38      	ldr	r3, [pc, #224]	; (651c <mem_manage_fault+0x198>)
    643c:	9302      	str	r3, [sp, #8]
    643e:	2000      	movs	r0, #0
    6440:	9001      	str	r0, [sp, #4]
    6442:	9000      	str	r0, [sp, #0]
    6444:	4603      	mov	r3, r0
    6446:	2201      	movs	r2, #1
    6448:	4931      	ldr	r1, [pc, #196]	; (6510 <mem_manage_fault+0x18c>)
    644a:	f008 ffcd 	bl	f3e8 <z_log_msg2_runtime_create>
    644e:	e7b2      	b.n	63b6 <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Data Access Violation");
    6450:	4b33      	ldr	r3, [pc, #204]	; (6520 <mem_manage_fault+0x19c>)
    6452:	9302      	str	r3, [sp, #8]
    6454:	2000      	movs	r0, #0
    6456:	9001      	str	r0, [sp, #4]
    6458:	9000      	str	r0, [sp, #0]
    645a:	4603      	mov	r3, r0
    645c:	2201      	movs	r2, #1
    645e:	492c      	ldr	r1, [pc, #176]	; (6510 <mem_manage_fault+0x18c>)
    6460:	f008 ffc2 	bl	f3e8 <z_log_msg2_runtime_create>
		uint32_t temp = SCB->MMFAR;
    6464:	4b2b      	ldr	r3, [pc, #172]	; (6514 <mem_manage_fault+0x190>)
    6466:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    6468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    646a:	f013 0f80 	tst.w	r3, #128	; 0x80
    646e:	d102      	bne.n	6476 <mem_manage_fault+0xf2>
	uint32_t mmfar = -EINVAL;
    6470:	f06f 0715 	mvn.w	r7, #21
    6474:	e7a6      	b.n	63c4 <mem_manage_fault+0x40>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    6476:	9703      	str	r7, [sp, #12]
    6478:	4b2a      	ldr	r3, [pc, #168]	; (6524 <mem_manage_fault+0x1a0>)
    647a:	9302      	str	r3, [sp, #8]
    647c:	2000      	movs	r0, #0
    647e:	9001      	str	r0, [sp, #4]
    6480:	9000      	str	r0, [sp, #0]
    6482:	4603      	mov	r3, r0
    6484:	2201      	movs	r2, #1
    6486:	4922      	ldr	r1, [pc, #136]	; (6510 <mem_manage_fault+0x18c>)
    6488:	f008 ffae 	bl	f3e8 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    648c:	2c00      	cmp	r4, #0
    648e:	d099      	beq.n	63c4 <mem_manage_fault+0x40>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    6490:	4a20      	ldr	r2, [pc, #128]	; (6514 <mem_manage_fault+0x190>)
    6492:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6498:	6293      	str	r3, [r2, #40]	; 0x28
    649a:	e793      	b.n	63c4 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Instruction Access Violation");
    649c:	4b22      	ldr	r3, [pc, #136]	; (6528 <mem_manage_fault+0x1a4>)
    649e:	9302      	str	r3, [sp, #8]
    64a0:	2000      	movs	r0, #0
    64a2:	9001      	str	r0, [sp, #4]
    64a4:	9000      	str	r0, [sp, #0]
    64a6:	4603      	mov	r3, r0
    64a8:	2201      	movs	r2, #1
    64aa:	4919      	ldr	r1, [pc, #100]	; (6510 <mem_manage_fault+0x18c>)
    64ac:	f008 ff9c 	bl	f3e8 <z_log_msg2_runtime_create>
    64b0:	e78d      	b.n	63ce <mem_manage_fault+0x4a>
		PR_FAULT_INFO(
    64b2:	4b1e      	ldr	r3, [pc, #120]	; (652c <mem_manage_fault+0x1a8>)
    64b4:	9302      	str	r3, [sp, #8]
    64b6:	2000      	movs	r0, #0
    64b8:	9001      	str	r0, [sp, #4]
    64ba:	9000      	str	r0, [sp, #0]
    64bc:	4603      	mov	r3, r0
    64be:	2201      	movs	r2, #1
    64c0:	4913      	ldr	r1, [pc, #76]	; (6510 <mem_manage_fault+0x18c>)
    64c2:	f008 ff91 	bl	f3e8 <z_log_msg2_runtime_create>
    64c6:	e787      	b.n	63d8 <mem_manage_fault+0x54>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    64c8:	4629      	mov	r1, r5
    64ca:	4638      	mov	r0, r7
    64cc:	f7ff fd88 	bl	5fe0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    64d0:	4607      	mov	r7, r0
    64d2:	b9b0      	cbnz	r0, 6502 <mem_manage_fault+0x17e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    64d4:	4b0f      	ldr	r3, [pc, #60]	; (6514 <mem_manage_fault+0x190>)
    64d6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    64d8:	f014 0410 	ands.w	r4, r4, #16
    64dc:	d08b      	beq.n	63f6 <mem_manage_fault+0x72>
    64de:	4c14      	ldr	r4, [pc, #80]	; (6530 <mem_manage_fault+0x1ac>)
    64e0:	f240 1349 	movw	r3, #329	; 0x149
    64e4:	4622      	mov	r2, r4
    64e6:	4913      	ldr	r1, [pc, #76]	; (6534 <mem_manage_fault+0x1b0>)
    64e8:	4813      	ldr	r0, [pc, #76]	; (6538 <mem_manage_fault+0x1b4>)
    64ea:	f008 fe9a 	bl	f222 <assert_print>
    64ee:	4813      	ldr	r0, [pc, #76]	; (653c <mem_manage_fault+0x1b8>)
    64f0:	f008 fe97 	bl	f222 <assert_print>
    64f4:	f240 1149 	movw	r1, #329	; 0x149
    64f8:	4620      	mov	r0, r4
    64fa:	f008 fe8b 	bl	f214 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    64fe:	463c      	mov	r4, r7
    6500:	e779      	b.n	63f6 <mem_manage_fault+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    6502:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    6506:	2402      	movs	r4, #2
    6508:	e775      	b.n	63f6 <mem_manage_fault+0x72>
    650a:	bf00      	nop
    650c:	00012224 	.word	0x00012224
    6510:	00011004 	.word	0x00011004
    6514:	e000ed00 	.word	0xe000ed00
    6518:	0001223c 	.word	0x0001223c
    651c:	00012034 	.word	0x00012034
    6520:	00012270 	.word	0x00012270
    6524:	00012288 	.word	0x00012288
    6528:	000122a0 	.word	0x000122a0
    652c:	000120b0 	.word	0x000120b0
    6530:	000122c0 	.word	0x000122c0
    6534:	000122fc 	.word	0x000122fc
    6538:	000116a8 	.word	0x000116a8
    653c:	00012348 	.word	0x00012348

00006540 <hard_fault>:
{
    6540:	b5f0      	push	{r4, r5, r6, r7, lr}
    6542:	b085      	sub	sp, #20
    6544:	4607      	mov	r7, r0
    6546:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    6548:	4b4b      	ldr	r3, [pc, #300]	; (6678 <hard_fault+0x138>)
    654a:	9302      	str	r3, [sp, #8]
    654c:	2400      	movs	r4, #0
    654e:	9401      	str	r4, [sp, #4]
    6550:	9400      	str	r4, [sp, #0]
    6552:	4623      	mov	r3, r4
    6554:	2201      	movs	r2, #1
    6556:	4949      	ldr	r1, [pc, #292]	; (667c <hard_fault+0x13c>)
    6558:	4620      	mov	r0, r4
    655a:	f008 ff45 	bl	f3e8 <z_log_msg2_runtime_create>
	*recoverable = false;
    655e:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6560:	4b47      	ldr	r3, [pc, #284]	; (6680 <hard_fault+0x140>)
    6562:	6add      	ldr	r5, [r3, #44]	; 0x2c
    6564:	f015 0502 	ands.w	r5, r5, #2
    6568:	d12d      	bne.n	65c6 <hard_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    656a:	4b45      	ldr	r3, [pc, #276]	; (6680 <hard_fault+0x140>)
    656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    656e:	2b00      	cmp	r3, #0
    6570:	db36      	blt.n	65e0 <hard_fault+0xa0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    6572:	4b43      	ldr	r3, [pc, #268]	; (6680 <hard_fault+0x140>)
    6574:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    6576:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    657a:	d06b      	beq.n	6654 <hard_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    657c:	4b41      	ldr	r3, [pc, #260]	; (6684 <hard_fault+0x144>)
    657e:	9302      	str	r3, [sp, #8]
    6580:	2000      	movs	r0, #0
    6582:	9001      	str	r0, [sp, #4]
    6584:	9000      	str	r0, [sp, #0]
    6586:	4603      	mov	r3, r0
    6588:	2201      	movs	r2, #1
    658a:	493c      	ldr	r1, [pc, #240]	; (667c <hard_fault+0x13c>)
    658c:	f008 ff2c 	bl	f3e8 <z_log_msg2_runtime_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    6590:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    6592:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    6596:	f64d 7302 	movw	r3, #57090	; 0xdf02
    659a:	429a      	cmp	r2, r3
    659c:	d02c      	beq.n	65f8 <hard_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
    659e:	4b38      	ldr	r3, [pc, #224]	; (6680 <hard_fault+0x140>)
    65a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    65a4:	2b00      	cmp	r3, #0
    65a6:	d135      	bne.n	6614 <hard_fault+0xd4>
		} else if (SCB_BFSR != 0) {
    65a8:	4b35      	ldr	r3, [pc, #212]	; (6680 <hard_fault+0x140>)
    65aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    65ae:	2b00      	cmp	r3, #0
    65b0:	d137      	bne.n	6622 <hard_fault+0xe2>
		} else if (SCB_UFSR != 0) {
    65b2:	4b33      	ldr	r3, [pc, #204]	; (6680 <hard_fault+0x140>)
    65b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    65b6:	b29b      	uxth	r3, r3
    65b8:	2b00      	cmp	r3, #0
    65ba:	d039      	beq.n	6630 <hard_fault+0xf0>
			reason = usage_fault(esf);
    65bc:	4638      	mov	r0, r7
    65be:	f7ff fe23 	bl	6208 <usage_fault>
    65c2:	4604      	mov	r4, r0
    65c4:	e009      	b.n	65da <hard_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    65c6:	4b30      	ldr	r3, [pc, #192]	; (6688 <hard_fault+0x148>)
    65c8:	9302      	str	r3, [sp, #8]
    65ca:	9401      	str	r4, [sp, #4]
    65cc:	9400      	str	r4, [sp, #0]
    65ce:	4623      	mov	r3, r4
    65d0:	2201      	movs	r2, #1
    65d2:	492a      	ldr	r1, [pc, #168]	; (667c <hard_fault+0x13c>)
    65d4:	4620      	mov	r0, r4
    65d6:	f008 ff07 	bl	f3e8 <z_log_msg2_runtime_create>
}
    65da:	4620      	mov	r0, r4
    65dc:	b005      	add	sp, #20
    65de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
    65e0:	4b2a      	ldr	r3, [pc, #168]	; (668c <hard_fault+0x14c>)
    65e2:	9302      	str	r3, [sp, #8]
    65e4:	2000      	movs	r0, #0
    65e6:	9001      	str	r0, [sp, #4]
    65e8:	9000      	str	r0, [sp, #0]
    65ea:	4603      	mov	r3, r0
    65ec:	2201      	movs	r2, #1
    65ee:	4923      	ldr	r1, [pc, #140]	; (667c <hard_fault+0x13c>)
    65f0:	f008 fefa 	bl	f3e8 <z_log_msg2_runtime_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    65f4:	462c      	mov	r4, r5
    65f6:	e7f0      	b.n	65da <hard_fault+0x9a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    65f8:	683b      	ldr	r3, [r7, #0]
    65fa:	9303      	str	r3, [sp, #12]
    65fc:	4b24      	ldr	r3, [pc, #144]	; (6690 <hard_fault+0x150>)
    65fe:	9302      	str	r3, [sp, #8]
    6600:	2000      	movs	r0, #0
    6602:	9001      	str	r0, [sp, #4]
    6604:	9000      	str	r0, [sp, #0]
    6606:	4603      	mov	r3, r0
    6608:	2201      	movs	r2, #1
    660a:	491c      	ldr	r1, [pc, #112]	; (667c <hard_fault+0x13c>)
    660c:	f008 feec 	bl	f3e8 <z_log_msg2_runtime_create>
			reason = esf->basic.r0;
    6610:	683c      	ldr	r4, [r7, #0]
    6612:	e7e2      	b.n	65da <hard_fault+0x9a>
			reason = mem_manage_fault(esf, 1, recoverable);
    6614:	4632      	mov	r2, r6
    6616:	2101      	movs	r1, #1
    6618:	4638      	mov	r0, r7
    661a:	f7ff feb3 	bl	6384 <mem_manage_fault>
    661e:	4604      	mov	r4, r0
    6620:	e7db      	b.n	65da <hard_fault+0x9a>
			reason = bus_fault(esf, 1, recoverable);
    6622:	4632      	mov	r2, r6
    6624:	2101      	movs	r1, #1
    6626:	4638      	mov	r0, r7
    6628:	f7ff fd46 	bl	60b8 <bus_fault>
    662c:	4604      	mov	r4, r0
    662e:	e7d4      	b.n	65da <hard_fault+0x9a>
			__ASSERT(0,
    6630:	4c18      	ldr	r4, [pc, #96]	; (6694 <hard_fault+0x154>)
    6632:	f240 23cd 	movw	r3, #717	; 0x2cd
    6636:	4622      	mov	r2, r4
    6638:	4917      	ldr	r1, [pc, #92]	; (6698 <hard_fault+0x158>)
    663a:	4818      	ldr	r0, [pc, #96]	; (669c <hard_fault+0x15c>)
    663c:	f008 fdf1 	bl	f222 <assert_print>
    6640:	4817      	ldr	r0, [pc, #92]	; (66a0 <hard_fault+0x160>)
    6642:	f008 fdee 	bl	f222 <assert_print>
    6646:	f240 21cd 	movw	r1, #717	; 0x2cd
    664a:	4620      	mov	r0, r4
    664c:	f008 fde2 	bl	f214 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6650:	462c      	mov	r4, r5
    6652:	e7c2      	b.n	65da <hard_fault+0x9a>
		__ASSERT(0,
    6654:	4d0f      	ldr	r5, [pc, #60]	; (6694 <hard_fault+0x154>)
    6656:	f240 23d1 	movw	r3, #721	; 0x2d1
    665a:	462a      	mov	r2, r5
    665c:	490e      	ldr	r1, [pc, #56]	; (6698 <hard_fault+0x158>)
    665e:	480f      	ldr	r0, [pc, #60]	; (669c <hard_fault+0x15c>)
    6660:	f008 fddf 	bl	f222 <assert_print>
    6664:	480f      	ldr	r0, [pc, #60]	; (66a4 <hard_fault+0x164>)
    6666:	f008 fddc 	bl	f222 <assert_print>
    666a:	f240 21d1 	movw	r1, #721	; 0x2d1
    666e:	4628      	mov	r0, r5
    6670:	f008 fdd0 	bl	f214 <assert_post_action>
	return reason;
    6674:	e7b1      	b.n	65da <hard_fault+0x9a>
    6676:	bf00      	nop
    6678:	0001236c 	.word	0x0001236c
    667c:	00011004 	.word	0x00011004
    6680:	e000ed00 	.word	0xe000ed00
    6684:	000123b8 	.word	0x000123b8
    6688:	00012384 	.word	0x00012384
    668c:	000123a8 	.word	0x000123a8
    6690:	000123d8 	.word	0x000123d8
    6694:	000122c0 	.word	0x000122c0
    6698:	00011d64 	.word	0x00011d64
    669c:	000116a8 	.word	0x000116a8
    66a0:	000123f4 	.word	0x000123f4
    66a4:	00012418 	.word	0x00012418

000066a8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    66a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    66aa:	b08f      	sub	sp, #60	; 0x3c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    66ac:	4b35      	ldr	r3, [pc, #212]	; (6784 <z_arm_fault+0xdc>)
    66ae:	685d      	ldr	r5, [r3, #4]
    66b0:	f3c5 0508 	ubfx	r5, r5, #0, #9
    66b4:	2300      	movs	r3, #0
    66b6:	f383 8811 	msr	BASEPRI, r3
    66ba:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    66be:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    66c2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    66c6:	d125      	bne.n	6714 <z_arm_fault+0x6c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    66c8:	f002 030c 	and.w	r3, r2, #12
    66cc:	2b08      	cmp	r3, #8
    66ce:	d011      	beq.n	66f4 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    66d0:	f012 0f08 	tst.w	r2, #8
    66d4:	d01b      	beq.n	670e <z_arm_fault+0x66>
			ptr_esf =  (z_arch_esf_t *)psp;
    66d6:	460c      	mov	r4, r1
	*nested_exc = false;
    66d8:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    66da:	b1f4      	cbz	r4, 671a <z_arm_fault+0x72>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    66dc:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    66e0:	4629      	mov	r1, r5
    66e2:	4620      	mov	r0, r4
    66e4:	f008 fe8f 	bl	f406 <fault_handle>
    66e8:	4605      	mov	r5, r0
	if (recoverable) {
    66ea:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    66ee:	b32b      	cbz	r3, 673c <z_arm_fault+0x94>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    66f0:	b00f      	add	sp, #60	; 0x3c
    66f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    66f4:	4b24      	ldr	r3, [pc, #144]	; (6788 <z_arm_fault+0xe0>)
    66f6:	9302      	str	r3, [sp, #8]
    66f8:	2400      	movs	r4, #0
    66fa:	9401      	str	r4, [sp, #4]
    66fc:	9400      	str	r4, [sp, #0]
    66fe:	4623      	mov	r3, r4
    6700:	2201      	movs	r2, #1
    6702:	4922      	ldr	r1, [pc, #136]	; (678c <z_arm_fault+0xe4>)
    6704:	4620      	mov	r0, r4
    6706:	f008 fe6f 	bl	f3e8 <z_log_msg2_runtime_create>
	*nested_exc = false;
    670a:	4626      	mov	r6, r4
		return NULL;
    670c:	e7e5      	b.n	66da <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    670e:	4604      	mov	r4, r0
			*nested_exc = true;
    6710:	2601      	movs	r6, #1
    6712:	e7e2      	b.n	66da <z_arm_fault+0x32>
	*nested_exc = false;
    6714:	2600      	movs	r6, #0
		return NULL;
    6716:	4634      	mov	r4, r6
    6718:	e7df      	b.n	66da <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
    671a:	4f1d      	ldr	r7, [pc, #116]	; (6790 <z_arm_fault+0xe8>)
    671c:	f240 33fb 	movw	r3, #1019	; 0x3fb
    6720:	463a      	mov	r2, r7
    6722:	491c      	ldr	r1, [pc, #112]	; (6794 <z_arm_fault+0xec>)
    6724:	481c      	ldr	r0, [pc, #112]	; (6798 <z_arm_fault+0xf0>)
    6726:	f008 fd7c 	bl	f222 <assert_print>
    672a:	481c      	ldr	r0, [pc, #112]	; (679c <z_arm_fault+0xf4>)
    672c:	f008 fd79 	bl	f222 <assert_print>
    6730:	f240 31fb 	movw	r1, #1019	; 0x3fb
    6734:	4638      	mov	r0, r7
    6736:	f008 fd6d 	bl	f214 <assert_post_action>
    673a:	e7cf      	b.n	66dc <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    673c:	f10d 0c14 	add.w	ip, sp, #20
    6740:	6820      	ldr	r0, [r4, #0]
    6742:	6861      	ldr	r1, [r4, #4]
    6744:	68a2      	ldr	r2, [r4, #8]
    6746:	68e3      	ldr	r3, [r4, #12]
    6748:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    674c:	6920      	ldr	r0, [r4, #16]
    674e:	6961      	ldr	r1, [r4, #20]
    6750:	69a2      	ldr	r2, [r4, #24]
    6752:	69e3      	ldr	r3, [r4, #28]
    6754:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
    6758:	b146      	cbz	r6, 676c <z_arm_fault+0xc4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    675a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    675e:	b95a      	cbnz	r2, 6778 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    6760:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    6764:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    6768:	930c      	str	r3, [sp, #48]	; 0x30
    676a:	e005      	b.n	6778 <z_arm_fault+0xd0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    676c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    676e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    6772:	f023 0301 	bic.w	r3, r3, #1
    6776:	930c      	str	r3, [sp, #48]	; 0x30
	z_arm_fatal_error(reason, &esf_copy);
    6778:	a905      	add	r1, sp, #20
    677a:	4628      	mov	r0, r5
    677c:	f008 fe14 	bl	f3a8 <z_arm_fatal_error>
    6780:	e7b6      	b.n	66f0 <z_arm_fault+0x48>
    6782:	bf00      	nop
    6784:	e000ed00 	.word	0xe000ed00
    6788:	00012448 	.word	0x00012448
    678c:	00011004 	.word	0x00011004
    6790:	000122c0 	.word	0x000122c0
    6794:	00012474 	.word	0x00012474
    6798:	000116a8 	.word	0x000116a8
    679c:	00012488 	.word	0x00012488

000067a0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    67a0:	4a02      	ldr	r2, [pc, #8]	; (67ac <z_arm_fault_init+0xc>)
    67a2:	6953      	ldr	r3, [r2, #20]
    67a4:	f043 0310 	orr.w	r3, r3, #16
    67a8:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    67aa:	4770      	bx	lr
    67ac:	e000ed00 	.word	0xe000ed00

000067b0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    67b0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    67b4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    67b8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    67ba:	4672      	mov	r2, lr
	bl z_arm_fault
    67bc:	f7ff ff74 	bl	66a8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    67c0:	bd01      	pop	{r0, pc}
    67c2:	bf00      	nop

000067c4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    67c4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    67c6:	e006      	b.n	67d6 <z_arm_interrupt_init+0x12>
    67c8:	f002 010f 	and.w	r1, r2, #15
    67cc:	4b09      	ldr	r3, [pc, #36]	; (67f4 <z_arm_interrupt_init+0x30>)
    67ce:	440b      	add	r3, r1
    67d0:	2120      	movs	r1, #32
    67d2:	7619      	strb	r1, [r3, #24]
    67d4:	3201      	adds	r2, #1
    67d6:	2a2f      	cmp	r2, #47	; 0x2f
    67d8:	dc0a      	bgt.n	67f0 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    67da:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    67dc:	2b00      	cmp	r3, #0
    67de:	dbf3      	blt.n	67c8 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    67e0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    67e4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    67e8:	2120      	movs	r1, #32
    67ea:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    67ee:	e7f1      	b.n	67d4 <z_arm_interrupt_init+0x10>
	}
}
    67f0:	4770      	bx	lr
    67f2:	bf00      	nop
    67f4:	e000ecfc 	.word	0xe000ecfc

000067f8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    67f8:	2000      	movs	r0, #0
    msr CONTROL, r0
    67fa:	f380 8814 	msr	CONTROL, r0
    isb
    67fe:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    6802:	f00a faad 	bl	10d60 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    6806:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    6808:	490d      	ldr	r1, [pc, #52]	; (6840 <__start+0x48>)
    str r0, [r1]
    680a:	6008      	str	r0, [r1, #0]
    dsb
    680c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    6810:	480c      	ldr	r0, [pc, #48]	; (6844 <__start+0x4c>)
    msr msp, r0
    6812:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    6816:	f000 f82d 	bl	6874 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    681a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    681c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    6820:	4809      	ldr	r0, [pc, #36]	; (6848 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    6822:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    6826:	1840      	adds	r0, r0, r1
    msr PSP, r0
    6828:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    682c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    6830:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    6832:	4308      	orrs	r0, r1
    msr CONTROL, r0
    6834:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    6838:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    683c:	f7ff fb3a 	bl	5eb4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    6840:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    6844:	2000efe0 	.word	0x2000efe0
    ldr r0, =z_interrupt_stacks
    6848:	2000f160 	.word	0x2000f160

0000684c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    684c:	4b08      	ldr	r3, [pc, #32]	; (6870 <z_arm_clear_arm_mpu_config+0x24>)
    684e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    6852:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    6856:	2300      	movs	r3, #0
    6858:	e006      	b.n	6868 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    685a:	4a05      	ldr	r2, [pc, #20]	; (6870 <z_arm_clear_arm_mpu_config+0x24>)
    685c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    6860:	2100      	movs	r1, #0
    6862:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    6866:	3301      	adds	r3, #1
    6868:	4283      	cmp	r3, r0
    686a:	dbf6      	blt.n	685a <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    686c:	4770      	bx	lr
    686e:	bf00      	nop
    6870:	e000ed00 	.word	0xe000ed00

00006874 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    6874:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    6876:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    6878:	2400      	movs	r4, #0
    687a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    687e:	f7ff ffe5 	bl	684c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    6882:	4623      	mov	r3, r4
    6884:	e008      	b.n	6898 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    6886:	f103 0120 	add.w	r1, r3, #32
    688a:	4a0e      	ldr	r2, [pc, #56]	; (68c4 <z_arm_init_arch_hw_at_boot+0x50>)
    688c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6890:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    6894:	3301      	adds	r3, #1
    6896:	b2db      	uxtb	r3, r3
    6898:	2b07      	cmp	r3, #7
    689a:	d9f4      	bls.n	6886 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    689c:	2300      	movs	r3, #0
    689e:	e008      	b.n	68b2 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    68a0:	f103 0160 	add.w	r1, r3, #96	; 0x60
    68a4:	4a07      	ldr	r2, [pc, #28]	; (68c4 <z_arm_init_arch_hw_at_boot+0x50>)
    68a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    68aa:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    68ae:	3301      	adds	r3, #1
    68b0:	b2db      	uxtb	r3, r3
    68b2:	2b07      	cmp	r3, #7
    68b4:	d9f4      	bls.n	68a0 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    68b6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    68b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    68bc:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    68c0:	bd10      	pop	{r4, pc}
    68c2:	bf00      	nop
    68c4:	e000e100 	.word	0xe000e100

000068c8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    68c8:	b508      	push	{r3, lr}
	if (_current == thread) {
    68ca:	4b0a      	ldr	r3, [pc, #40]	; (68f4 <z_impl_k_thread_abort+0x2c>)
    68cc:	689b      	ldr	r3, [r3, #8]
    68ce:	4283      	cmp	r3, r0
    68d0:	d002      	beq.n	68d8 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    68d2:	f005 ff05 	bl	c6e0 <z_thread_abort>
}
    68d6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    68d8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    68dc:	2b00      	cmp	r3, #0
    68de:	d0f8      	beq.n	68d2 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    68e0:	4b05      	ldr	r3, [pc, #20]	; (68f8 <z_impl_k_thread_abort+0x30>)
    68e2:	685a      	ldr	r2, [r3, #4]
    68e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    68e8:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    68ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    68ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    68f0:	625a      	str	r2, [r3, #36]	; 0x24
    68f2:	e7ee      	b.n	68d2 <z_impl_k_thread_abort+0xa>
    68f4:	2000d4e0 	.word	0x2000d4e0
    68f8:	e000ed00 	.word	0xe000ed00

000068fc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    68fc:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    68fe:	4b03      	ldr	r3, [pc, #12]	; (690c <z_arm_configure_static_mpu_regions+0x10>)
    6900:	4a03      	ldr	r2, [pc, #12]	; (6910 <z_arm_configure_static_mpu_regions+0x14>)
    6902:	2101      	movs	r1, #1
    6904:	4803      	ldr	r0, [pc, #12]	; (6914 <z_arm_configure_static_mpu_regions+0x18>)
    6906:	f000 f8bb 	bl	6a80 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    690a:	bd08      	pop	{r3, pc}
    690c:	20040000 	.word	0x20040000
    6910:	20000000 	.word	0x20000000
    6914:	000124cc 	.word	0x000124cc

00006918 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    6918:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    691a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    691e:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    6920:	4804      	ldr	r0, [pc, #16]	; (6934 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    6922:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    6924:	2320      	movs	r3, #32
    6926:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    6928:	4b03      	ldr	r3, [pc, #12]	; (6938 <z_arm_configure_dynamic_mpu_regions+0x20>)
    692a:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    692c:	2101      	movs	r1, #1
    692e:	f000 f8c9 	bl	6ac4 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    6932:	bd08      	pop	{r3, pc}
    6934:	2000cf78 	.word	0x2000cf78
    6938:	150b0000 	.word	0x150b0000

0000693c <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    693c:	4a08      	ldr	r2, [pc, #32]	; (6960 <region_init+0x24>)
    693e:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6942:	680b      	ldr	r3, [r1, #0]
    6944:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    6948:	4303      	orrs	r3, r0
    694a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    694e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6952:	688b      	ldr	r3, [r1, #8]
    6954:	f043 0301 	orr.w	r3, r3, #1
    6958:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    695c:	4770      	bx	lr
    695e:	bf00      	nop
    6960:	e000ed00 	.word	0xe000ed00

00006964 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    6964:	b510      	push	{r4, lr}
    6966:	b084      	sub	sp, #16
    6968:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    696a:	2807      	cmp	r0, #7
    696c:	d804      	bhi.n	6978 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    696e:	f7ff ffe5 	bl	693c <region_init>

	return index;
    6972:	4620      	mov	r0, r4
}
    6974:	b004      	add	sp, #16
    6976:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6978:	9003      	str	r0, [sp, #12]
    697a:	4b06      	ldr	r3, [pc, #24]	; (6994 <region_allocate_and_init+0x30>)
    697c:	9302      	str	r3, [sp, #8]
    697e:	2000      	movs	r0, #0
    6980:	9001      	str	r0, [sp, #4]
    6982:	9000      	str	r0, [sp, #0]
    6984:	4603      	mov	r3, r0
    6986:	2201      	movs	r2, #1
    6988:	4903      	ldr	r1, [pc, #12]	; (6998 <region_allocate_and_init+0x34>)
    698a:	f008 fd72 	bl	f472 <z_log_msg2_runtime_create>
		return -EINVAL;
    698e:	f06f 0015 	mvn.w	r0, #21
    6992:	e7ef      	b.n	6974 <region_allocate_and_init+0x10>
    6994:	000124d8 	.word	0x000124d8
    6998:	00010ffc 	.word	0x00010ffc

0000699c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    699c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    69a0:	b085      	sub	sp, #20
    69a2:	4680      	mov	r8, r0
    69a4:	460f      	mov	r7, r1
    69a6:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
    69a8:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    69aa:	2500      	movs	r5, #0
    69ac:	e009      	b.n	69c2 <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    69ae:	4621      	mov	r1, r4
    69b0:	b2f0      	uxtb	r0, r6
    69b2:	f008 fd6d 	bl	f490 <mpu_configure_region>
    69b6:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    69b8:	f110 0f16 	cmn.w	r0, #22
    69bc:	d01e      	beq.n	69fc <mpu_configure_regions+0x60>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    69be:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    69c0:	3501      	adds	r5, #1
    69c2:	42bd      	cmp	r5, r7
    69c4:	da1a      	bge.n	69fc <mpu_configure_regions+0x60>
		if (regions[i].size == 0U) {
    69c6:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    69ca:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    69ce:	6862      	ldr	r2, [r4, #4]
    69d0:	2a00      	cmp	r2, #0
    69d2:	d0f5      	beq.n	69c0 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
    69d4:	f1b9 0f00 	cmp.w	r9, #0
    69d8:	d0e9      	beq.n	69ae <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
    69da:	4620      	mov	r0, r4
    69dc:	f008 fd38 	bl	f450 <mpu_partition_is_valid>
		if (do_sanity_check &&
    69e0:	2800      	cmp	r0, #0
    69e2:	d1e4      	bne.n	69ae <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
    69e4:	9503      	str	r5, [sp, #12]
    69e6:	4b07      	ldr	r3, [pc, #28]	; (6a04 <mpu_configure_regions+0x68>)
    69e8:	9302      	str	r3, [sp, #8]
    69ea:	9001      	str	r0, [sp, #4]
    69ec:	9000      	str	r0, [sp, #0]
    69ee:	4603      	mov	r3, r0
    69f0:	2201      	movs	r2, #1
    69f2:	4905      	ldr	r1, [pc, #20]	; (6a08 <mpu_configure_regions+0x6c>)
    69f4:	f008 fd3d 	bl	f472 <z_log_msg2_runtime_create>
			return -EINVAL;
    69f8:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    69fc:	4630      	mov	r0, r6
    69fe:	b005      	add	sp, #20
    6a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6a04:	00012500 	.word	0x00012500
    6a08:	00010ffc 	.word	0x00010ffc

00006a0c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    6a0c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    6a0e:	4c03      	ldr	r4, [pc, #12]	; (6a1c <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    6a10:	2301      	movs	r3, #1
    6a12:	7822      	ldrb	r2, [r4, #0]
    6a14:	f7ff ffc2 	bl	699c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    6a18:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    6a1a:	bd10      	pop	{r4, pc}
    6a1c:	2000d720 	.word	0x2000d720

00006a20 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    6a20:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    6a22:	2300      	movs	r3, #0
    6a24:	4a09      	ldr	r2, [pc, #36]	; (6a4c <mpu_configure_dynamic_mpu_regions+0x2c>)
    6a26:	7812      	ldrb	r2, [r2, #0]
    6a28:	f7ff ffb8 	bl	699c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    6a2c:	f110 0f16 	cmn.w	r0, #22
    6a30:	d00a      	beq.n	6a48 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    6a32:	4603      	mov	r3, r0
    6a34:	e006      	b.n	6a44 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    6a36:	4a06      	ldr	r2, [pc, #24]	; (6a50 <mpu_configure_dynamic_mpu_regions+0x30>)
    6a38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    6a3c:	2100      	movs	r1, #0
    6a3e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    6a42:	3301      	adds	r3, #1
    6a44:	2b07      	cmp	r3, #7
    6a46:	ddf6      	ble.n	6a36 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    6a48:	bd08      	pop	{r3, pc}
    6a4a:	bf00      	nop
    6a4c:	2000d720 	.word	0x2000d720
    6a50:	e000ed00 	.word	0xe000ed00

00006a54 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    6a54:	4b04      	ldr	r3, [pc, #16]	; (6a68 <arm_core_mpu_enable+0x14>)
    6a56:	2205      	movs	r2, #5
    6a58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    6a5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6a60:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6a64:	4770      	bx	lr
    6a66:	bf00      	nop
    6a68:	e000ed00 	.word	0xe000ed00

00006a6c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    6a6c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6a70:	4b02      	ldr	r3, [pc, #8]	; (6a7c <arm_core_mpu_disable+0x10>)
    6a72:	2200      	movs	r2, #0
    6a74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    6a78:	4770      	bx	lr
    6a7a:	bf00      	nop
    6a7c:	e000ed00 	.word	0xe000ed00

00006a80 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    6a80:	b538      	push	{r3, r4, r5, lr}
    6a82:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    6a84:	f7ff ffc2 	bl	6a0c <mpu_configure_static_mpu_regions>
    6a88:	f110 0f16 	cmn.w	r0, #22
    6a8c:	d000      	beq.n	6a90 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    6a8e:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    6a90:	4d08      	ldr	r5, [pc, #32]	; (6ab4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    6a92:	f240 1311 	movw	r3, #273	; 0x111
    6a96:	462a      	mov	r2, r5
    6a98:	4907      	ldr	r1, [pc, #28]	; (6ab8 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    6a9a:	4808      	ldr	r0, [pc, #32]	; (6abc <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    6a9c:	f008 fbc1 	bl	f222 <assert_print>
    6aa0:	4621      	mov	r1, r4
    6aa2:	4807      	ldr	r0, [pc, #28]	; (6ac0 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    6aa4:	f008 fbbd 	bl	f222 <assert_print>
    6aa8:	f240 1111 	movw	r1, #273	; 0x111
    6aac:	4628      	mov	r0, r5
    6aae:	f008 fbb1 	bl	f214 <assert_post_action>
}
    6ab2:	e7ec      	b.n	6a8e <arm_core_mpu_configure_static_mpu_regions+0xe>
    6ab4:	00012524 	.word	0x00012524
    6ab8:	00011d64 	.word	0x00011d64
    6abc:	000116a8 	.word	0x000116a8
    6ac0:	0001255c 	.word	0x0001255c

00006ac4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    6ac4:	b538      	push	{r3, r4, r5, lr}
    6ac6:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    6ac8:	f7ff ffaa 	bl	6a20 <mpu_configure_dynamic_mpu_regions>
    6acc:	f110 0f16 	cmn.w	r0, #22
    6ad0:	d000      	beq.n	6ad4 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    6ad2:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    6ad4:	4d08      	ldr	r5, [pc, #32]	; (6af8 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    6ad6:	f44f 7398 	mov.w	r3, #304	; 0x130
    6ada:	462a      	mov	r2, r5
    6adc:	4907      	ldr	r1, [pc, #28]	; (6afc <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    6ade:	4808      	ldr	r0, [pc, #32]	; (6b00 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    6ae0:	f008 fb9f 	bl	f222 <assert_print>
    6ae4:	4621      	mov	r1, r4
    6ae6:	4807      	ldr	r0, [pc, #28]	; (6b04 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    6ae8:	f008 fb9b 	bl	f222 <assert_print>
    6aec:	f44f 7198 	mov.w	r1, #304	; 0x130
    6af0:	4628      	mov	r0, r5
    6af2:	f008 fb8f 	bl	f214 <assert_post_action>
}
    6af6:	e7ec      	b.n	6ad2 <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    6af8:	00012524 	.word	0x00012524
    6afc:	00011d64 	.word	0x00011d64
    6b00:	000116a8 	.word	0x000116a8
    6b04:	00012588 	.word	0x00012588

00006b08 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    6b08:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    6b0a:	4b24      	ldr	r3, [pc, #144]	; (6b9c <z_arm_mpu_init+0x94>)
    6b0c:	681d      	ldr	r5, [r3, #0]
    6b0e:	2d08      	cmp	r5, #8
    6b10:	d803      	bhi.n	6b1a <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    6b12:	f7ff ffab 	bl	6a6c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6b16:	2400      	movs	r4, #0
    6b18:	e01e      	b.n	6b58 <z_arm_mpu_init+0x50>
		__ASSERT(0,
    6b1a:	4c21      	ldr	r4, [pc, #132]	; (6ba0 <z_arm_mpu_init+0x98>)
    6b1c:	f44f 73a4 	mov.w	r3, #328	; 0x148
    6b20:	4622      	mov	r2, r4
    6b22:	4920      	ldr	r1, [pc, #128]	; (6ba4 <z_arm_mpu_init+0x9c>)
    6b24:	4820      	ldr	r0, [pc, #128]	; (6ba8 <z_arm_mpu_init+0xa0>)
    6b26:	f008 fb7c 	bl	f222 <assert_print>
    6b2a:	2208      	movs	r2, #8
    6b2c:	4629      	mov	r1, r5
    6b2e:	481f      	ldr	r0, [pc, #124]	; (6bac <z_arm_mpu_init+0xa4>)
    6b30:	f008 fb77 	bl	f222 <assert_print>
    6b34:	f44f 71a4 	mov.w	r1, #328	; 0x148
    6b38:	4620      	mov	r0, r4
    6b3a:	f008 fb6b 	bl	f214 <assert_post_action>
		return -1;
    6b3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6b42:	e017      	b.n	6b74 <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    6b44:	4b15      	ldr	r3, [pc, #84]	; (6b9c <z_arm_mpu_init+0x94>)
    6b46:	6859      	ldr	r1, [r3, #4]
    6b48:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    6b4c:	0093      	lsls	r3, r2, #2
    6b4e:	4419      	add	r1, r3
    6b50:	4620      	mov	r0, r4
    6b52:	f7ff fef3 	bl	693c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6b56:	3401      	adds	r4, #1
    6b58:	42a5      	cmp	r5, r4
    6b5a:	d8f3      	bhi.n	6b44 <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    6b5c:	4b14      	ldr	r3, [pc, #80]	; (6bb0 <z_arm_mpu_init+0xa8>)
    6b5e:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    6b60:	f7ff ff78 	bl	6a54 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    6b64:	4b13      	ldr	r3, [pc, #76]	; (6bb4 <z_arm_mpu_init+0xac>)
    6b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    6b6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    6b6e:	2b08      	cmp	r3, #8
    6b70:	d101      	bne.n	6b76 <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    6b72:	2000      	movs	r0, #0
}
    6b74:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    6b76:	4c0a      	ldr	r4, [pc, #40]	; (6ba0 <z_arm_mpu_init+0x98>)
    6b78:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    6b7c:	4622      	mov	r2, r4
    6b7e:	490e      	ldr	r1, [pc, #56]	; (6bb8 <z_arm_mpu_init+0xb0>)
    6b80:	4809      	ldr	r0, [pc, #36]	; (6ba8 <z_arm_mpu_init+0xa0>)
    6b82:	f008 fb4e 	bl	f222 <assert_print>
    6b86:	480d      	ldr	r0, [pc, #52]	; (6bbc <z_arm_mpu_init+0xb4>)
    6b88:	f008 fb4b 	bl	f222 <assert_print>
    6b8c:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    6b90:	4620      	mov	r0, r4
    6b92:	f008 fb3f 	bl	f214 <assert_post_action>
	return 0;
    6b96:	2000      	movs	r0, #0
    6b98:	e7ec      	b.n	6b74 <z_arm_mpu_init+0x6c>
    6b9a:	bf00      	nop
    6b9c:	000127f0 	.word	0x000127f0
    6ba0:	00012524 	.word	0x00012524
    6ba4:	00011d64 	.word	0x00011d64
    6ba8:	000116a8 	.word	0x000116a8
    6bac:	000125b8 	.word	0x000125b8
    6bb0:	2000d720 	.word	0x2000d720
    6bb4:	e000ed00 	.word	0xe000ed00
    6bb8:	000125ec 	.word	0x000125ec
    6bbc:	0001263c 	.word	0x0001263c

00006bc0 <malloc_prepare>:

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    6bc0:	4b0d      	ldr	r3, [pc, #52]	; (6bf8 <malloc_prepare+0x38>)
    6bc2:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    6bc6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    6bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6bce:	d301      	bcc.n	6bd4 <malloc_prepare+0x14>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    6bd0:	2000      	movs	r0, #0
    6bd2:	4770      	bx	lr
{
    6bd4:	b510      	push	{r4, lr}
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    6bd6:	4c09      	ldr	r4, [pc, #36]	; (6bfc <malloc_prepare+0x3c>)
    6bd8:	2381      	movs	r3, #129	; 0x81
    6bda:	4622      	mov	r2, r4
    6bdc:	4908      	ldr	r1, [pc, #32]	; (6c00 <malloc_prepare+0x40>)
    6bde:	4809      	ldr	r0, [pc, #36]	; (6c04 <malloc_prepare+0x44>)
    6be0:	f008 fb1f 	bl	f222 <assert_print>
    6be4:	4808      	ldr	r0, [pc, #32]	; (6c08 <malloc_prepare+0x48>)
    6be6:	f008 fb1c 	bl	f222 <assert_print>
    6bea:	2181      	movs	r1, #129	; 0x81
    6bec:	4620      	mov	r0, r4
    6bee:	f008 fb11 	bl	f214 <assert_post_action>
}
    6bf2:	2000      	movs	r0, #0
    6bf4:	bd10      	pop	{r4, pc}
    6bf6:	bf00      	nop
    6bf8:	2000fa80 	.word	0x2000fa80
    6bfc:	00012660 	.word	0x00012660
    6c00:	00012690 	.word	0x00012690
    6c04:	000116a8 	.word	0x000116a8
    6c08:	000126d8 	.word	0x000126d8

00006c0c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    6c0c:	4b01      	ldr	r3, [pc, #4]	; (6c14 <__stdout_hook_install+0x8>)
    6c0e:	6018      	str	r0, [r3, #0]
}
    6c10:	4770      	bx	lr
    6c12:	bf00      	nop
    6c14:	20004044 	.word	0x20004044

00006c18 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    6c18:	b570      	push	{r4, r5, r6, lr}
    6c1a:	4606      	mov	r6, r0
    6c1c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    6c1e:	2400      	movs	r4, #0
    6c20:	e000      	b.n	6c24 <z_impl_zephyr_read_stdin+0xc>
    6c22:	3401      	adds	r4, #1
    6c24:	42ac      	cmp	r4, r5
    6c26:	da08      	bge.n	6c3a <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
    6c28:	4b05      	ldr	r3, [pc, #20]	; (6c40 <z_impl_zephyr_read_stdin+0x28>)
    6c2a:	681b      	ldr	r3, [r3, #0]
    6c2c:	4798      	blx	r3
    6c2e:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    6c30:	280a      	cmp	r0, #10
    6c32:	d001      	beq.n	6c38 <z_impl_zephyr_read_stdin+0x20>
    6c34:	280d      	cmp	r0, #13
    6c36:	d1f4      	bne.n	6c22 <z_impl_zephyr_read_stdin+0xa>
			i++;
    6c38:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
    6c3a:	4620      	mov	r0, r4
    6c3c:	bd70      	pop	{r4, r5, r6, pc}
    6c3e:	bf00      	nop
    6c40:	20004040 	.word	0x20004040

00006c44 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    6c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c46:	4605      	mov	r5, r0
    6c48:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    6c4a:	2400      	movs	r4, #0
    6c4c:	e004      	b.n	6c58 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
    6c4e:	4b09      	ldr	r3, [pc, #36]	; (6c74 <z_impl_zephyr_write_stdout+0x30>)
    6c50:	681b      	ldr	r3, [r3, #0]
    6c52:	7830      	ldrb	r0, [r6, #0]
    6c54:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    6c56:	3401      	adds	r4, #1
    6c58:	42bc      	cmp	r4, r7
    6c5a:	da08      	bge.n	6c6e <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
    6c5c:	192e      	adds	r6, r5, r4
    6c5e:	5d2b      	ldrb	r3, [r5, r4]
    6c60:	2b0a      	cmp	r3, #10
    6c62:	d1f4      	bne.n	6c4e <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
    6c64:	4b03      	ldr	r3, [pc, #12]	; (6c74 <z_impl_zephyr_write_stdout+0x30>)
    6c66:	681b      	ldr	r3, [r3, #0]
    6c68:	200d      	movs	r0, #13
    6c6a:	4798      	blx	r3
    6c6c:	e7ef      	b.n	6c4e <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
    6c6e:	4638      	mov	r0, r7
    6c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c72:	bf00      	nop
    6c74:	20004044 	.word	0x20004044

00006c78 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    6c78:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
    6c7a:	2205      	movs	r2, #5
    6c7c:	4902      	ldr	r1, [pc, #8]	; (6c88 <_exit+0x10>)
    6c7e:	2001      	movs	r0, #1
    6c80:	f008 fc30 	bl	f4e4 <_write>
	while (1) {
    6c84:	e7fe      	b.n	6c84 <_exit+0xc>
    6c86:	bf00      	nop
    6c88:	00012760 	.word	0x00012760

00006c8c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    6c8c:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    6c8e:	4b08      	ldr	r3, [pc, #32]	; (6cb0 <_sbrk+0x24>)
    6c90:	6819      	ldr	r1, [r3, #0]
    6c92:	4b08      	ldr	r3, [pc, #32]	; (6cb4 <_sbrk+0x28>)
    6c94:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    6c96:	440a      	add	r2, r1
    6c98:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    6c9c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    6ca0:	429a      	cmp	r2, r3
    6ca2:	d202      	bcs.n	6caa <_sbrk+0x1e>
		heap_sz += count;
    6ca4:	4b02      	ldr	r3, [pc, #8]	; (6cb0 <_sbrk+0x24>)
    6ca6:	601a      	str	r2, [r3, #0]
		ret = ptr;
    6ca8:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    6caa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    6cae:	4770      	bx	lr
    6cb0:	2000cf84 	.word	0x2000cf84
    6cb4:	2000fa80 	.word	0x2000fa80

00006cb8 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    6cb8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    6cba:	4604      	mov	r4, r0
    6cbc:	b140      	cbz	r0, 6cd0 <__retarget_lock_init_recursive+0x18>

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    6cbe:	2014      	movs	r0, #20
    6cc0:	f006 fea0 	bl	da04 <malloc>
    6cc4:	6020      	str	r0, [r4, #0]
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
    6cc6:	b188      	cbz	r0, 6cec <__retarget_lock_init_recursive+0x34>

	k_mutex_init((struct k_mutex *)*lock);
    6cc8:	6820      	ldr	r0, [r4, #0]
    6cca:	f009 fc7c 	bl	105c6 <z_impl_k_mutex_init>
}
    6cce:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    6cd0:	4d0f      	ldr	r5, [pc, #60]	; (6d10 <__retarget_lock_init_recursive+0x58>)
    6cd2:	f240 1377 	movw	r3, #375	; 0x177
    6cd6:	462a      	mov	r2, r5
    6cd8:	490e      	ldr	r1, [pc, #56]	; (6d14 <__retarget_lock_init_recursive+0x5c>)
    6cda:	480f      	ldr	r0, [pc, #60]	; (6d18 <__retarget_lock_init_recursive+0x60>)
    6cdc:	f008 faa1 	bl	f222 <assert_print>
    6ce0:	f240 1177 	movw	r1, #375	; 0x177
    6ce4:	4628      	mov	r0, r5
    6ce6:	f008 fa95 	bl	f214 <assert_post_action>
    6cea:	e7e8      	b.n	6cbe <__retarget_lock_init_recursive+0x6>
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
    6cec:	4d08      	ldr	r5, [pc, #32]	; (6d10 <__retarget_lock_init_recursive+0x58>)
    6cee:	f240 137f 	movw	r3, #383	; 0x17f
    6cf2:	462a      	mov	r2, r5
    6cf4:	4909      	ldr	r1, [pc, #36]	; (6d1c <__retarget_lock_init_recursive+0x64>)
    6cf6:	4808      	ldr	r0, [pc, #32]	; (6d18 <__retarget_lock_init_recursive+0x60>)
    6cf8:	f008 fa93 	bl	f222 <assert_print>
    6cfc:	4808      	ldr	r0, [pc, #32]	; (6d20 <__retarget_lock_init_recursive+0x68>)
    6cfe:	f008 fa90 	bl	f222 <assert_print>
    6d02:	f240 117f 	movw	r1, #383	; 0x17f
    6d06:	4628      	mov	r0, r5
    6d08:	f008 fa84 	bl	f214 <assert_post_action>
    6d0c:	e7dc      	b.n	6cc8 <__retarget_lock_init_recursive+0x10>
    6d0e:	bf00      	nop
    6d10:	00012660 	.word	0x00012660
    6d14:	00012768 	.word	0x00012768
    6d18:	000116a8 	.word	0x000116a8
    6d1c:	0001277c 	.word	0x0001277c
    6d20:	000127bc 	.word	0x000127bc

00006d24 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    6d24:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    6d26:	4604      	mov	r4, r0
    6d28:	b138      	cbz	r0, 6d3a <__retarget_lock_acquire_recursive+0x16>
	return z_impl_k_mutex_lock(mutex, timeout);
    6d2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6d32:	4620      	mov	r0, r4
    6d34:	f003 ffae 	bl	ac94 <z_impl_k_mutex_lock>
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    6d38:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    6d3a:	4d07      	ldr	r5, [pc, #28]	; (6d58 <__retarget_lock_acquire_recursive+0x34>)
    6d3c:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    6d40:	462a      	mov	r2, r5
    6d42:	4906      	ldr	r1, [pc, #24]	; (6d5c <__retarget_lock_acquire_recursive+0x38>)
    6d44:	4806      	ldr	r0, [pc, #24]	; (6d60 <__retarget_lock_acquire_recursive+0x3c>)
    6d46:	f008 fa6c 	bl	f222 <assert_print>
    6d4a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    6d4e:	4628      	mov	r0, r5
    6d50:	f008 fa60 	bl	f214 <assert_post_action>
    6d54:	e7e9      	b.n	6d2a <__retarget_lock_acquire_recursive+0x6>
    6d56:	bf00      	nop
    6d58:	00012660 	.word	0x00012660
    6d5c:	00012768 	.word	0x00012768
    6d60:	000116a8 	.word	0x000116a8

00006d64 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    6d64:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    6d66:	4604      	mov	r4, r0
    6d68:	b118      	cbz	r0, 6d72 <__retarget_lock_release_recursive+0xe>
	return z_impl_k_mutex_unlock(mutex);
    6d6a:	4620      	mov	r0, r4
    6d6c:	f004 f8b2 	bl	aed4 <z_impl_k_mutex_unlock>
	k_mutex_unlock((struct k_mutex *)lock);
}
    6d70:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    6d72:	4d07      	ldr	r5, [pc, #28]	; (6d90 <__retarget_lock_release_recursive+0x2c>)
    6d74:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    6d78:	462a      	mov	r2, r5
    6d7a:	4906      	ldr	r1, [pc, #24]	; (6d94 <__retarget_lock_release_recursive+0x30>)
    6d7c:	4806      	ldr	r0, [pc, #24]	; (6d98 <__retarget_lock_release_recursive+0x34>)
    6d7e:	f008 fa50 	bl	f222 <assert_print>
    6d82:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    6d86:	4628      	mov	r0, r5
    6d88:	f008 fa44 	bl	f214 <assert_post_action>
    6d8c:	e7ed      	b.n	6d6a <__retarget_lock_release_recursive+0x6>
    6d8e:	bf00      	nop
    6d90:	00012660 	.word	0x00012660
    6d94:	00012768 	.word	0x00012768
    6d98:	000116a8 	.word	0x000116a8

00006d9c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    6d9c:	b510      	push	{r4, lr}
	__asm__ volatile(
    6d9e:	f04f 0320 	mov.w	r3, #32
    6da2:	f3ef 8411 	mrs	r4, BASEPRI
    6da6:	f383 8812 	msr	BASEPRI_MAX, r3
    6daa:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    6dae:	2301      	movs	r3, #1
    6db0:	4a0c      	ldr	r2, [pc, #48]	; (6de4 <nordicsemi_nrf52_init+0x48>)
    6db2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6db6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6dba:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    6dbe:	f008 fbae 	bl	f51e <nrf52_errata_197>
    6dc2:	b120      	cbz	r0, 6dce <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    6dc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6dc8:	2201      	movs	r2, #1
    6dca:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    6dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6dd2:	2201      	movs	r2, #1
    6dd4:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    6dd8:	f384 8811 	msr	BASEPRI, r4
    6ddc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    6de0:	2000      	movs	r0, #0
    6de2:	bd10      	pop	{r4, pc}
    6de4:	4001e000 	.word	0x4001e000

00006de8 <sys_arch_reboot>:
    *p_gpregret = val;
    6de8:	b2c0      	uxtb	r0, r0
    6dea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6dee:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    6df2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6df6:	4905      	ldr	r1, [pc, #20]	; (6e0c <sys_arch_reboot+0x24>)
    6df8:	68ca      	ldr	r2, [r1, #12]
    6dfa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6dfe:	4b04      	ldr	r3, [pc, #16]	; (6e10 <sys_arch_reboot+0x28>)
    6e00:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6e02:	60cb      	str	r3, [r1, #12]
    6e04:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    6e08:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6e0a:	e7fd      	b.n	6e08 <sys_arch_reboot+0x20>
    6e0c:	e000ed00 	.word	0xe000ed00
    6e10:	05fa0004 	.word	0x05fa0004

00006e14 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    6e14:	b130      	cbz	r0, 6e24 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    6e16:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    6e18:	0180      	lsls	r0, r0, #6
    6e1a:	4b03      	ldr	r3, [pc, #12]	; (6e28 <arch_busy_wait+0x14>)
    6e1c:	f043 0301 	orr.w	r3, r3, #1
    6e20:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    6e22:	bd08      	pop	{r3, pc}
    6e24:	4770      	bx	lr
    6e26:	bf00      	nop
    6e28:	000110b0 	.word	0x000110b0

00006e2c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    6e2c:	4800      	ldr	r0, [pc, #0]	; (6e30 <get_hf_flags+0x4>)
    6e2e:	4770      	bx	lr
    6e30:	2000cfe0 	.word	0x2000cfe0

00006e34 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    6e34:	4b01      	ldr	r3, [pc, #4]	; (6e3c <get_subsys+0x8>)
    6e36:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    6e38:	1140      	asrs	r0, r0, #5
    6e3a:	4770      	bx	lr
    6e3c:	2000cf98 	.word	0x2000cf98

00006e40 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6e40:	b530      	push	{r4, r5, lr}
    6e42:	b083      	sub	sp, #12
    6e44:	4605      	mov	r5, r0
    6e46:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6e48:	f7ff fff4 	bl	6e34 <get_subsys>
    6e4c:	4601      	mov	r1, r0
    6e4e:	2340      	movs	r3, #64	; 0x40
    6e50:	9300      	str	r3, [sp, #0]
    6e52:	4623      	mov	r3, r4
    6e54:	4a05      	ldr	r2, [pc, #20]	; (6e6c <onoff_start+0x2c>)
    6e56:	4806      	ldr	r0, [pc, #24]	; (6e70 <onoff_start+0x30>)
    6e58:	f008 fbf0 	bl	f63c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    6e5c:	1e01      	subs	r1, r0, #0
    6e5e:	db01      	blt.n	6e64 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    6e60:	b003      	add	sp, #12
    6e62:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    6e64:	4628      	mov	r0, r5
    6e66:	47a0      	blx	r4
}
    6e68:	e7fa      	b.n	6e60 <onoff_start+0x20>
    6e6a:	bf00      	nop
    6e6c:	0000f685 	.word	0x0000f685
    6e70:	00010de4 	.word	0x00010de4

00006e74 <generic_hfclk_stop>:
{
    6e74:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6e76:	4b0a      	ldr	r3, [pc, #40]	; (6ea0 <generic_hfclk_stop+0x2c>)
    6e78:	f3bf 8f5b 	dmb	ish
    6e7c:	e853 2f00 	ldrex	r2, [r3]
    6e80:	f022 0102 	bic.w	r1, r2, #2
    6e84:	e843 1000 	strex	r0, r1, [r3]
    6e88:	2800      	cmp	r0, #0
    6e8a:	d1f7      	bne.n	6e7c <generic_hfclk_stop+0x8>
    6e8c:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    6e90:	f012 0f01 	tst.w	r2, #1
    6e94:	d000      	beq.n	6e98 <generic_hfclk_stop+0x24>
}
    6e96:	bd08      	pop	{r3, pc}
	hfclk_stop();
    6e98:	f008 fc06 	bl	f6a8 <hfclk_stop>
    6e9c:	e7fb      	b.n	6e96 <generic_hfclk_stop+0x22>
    6e9e:	bf00      	nop
    6ea0:	2000cff0 	.word	0x2000cff0

00006ea4 <get_status>:
{
    6ea4:	b570      	push	{r4, r5, r6, lr}
    6ea6:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    6ea8:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6eaa:	2c01      	cmp	r4, #1
    6eac:	d807      	bhi.n	6ebe <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6eae:	4621      	mov	r1, r4
    6eb0:	4628      	mov	r0, r5
    6eb2:	f008 fb56 	bl	f562 <get_sub_data>
    6eb6:	6880      	ldr	r0, [r0, #8]
}
    6eb8:	f000 0007 	and.w	r0, r0, #7
    6ebc:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6ebe:	4e06      	ldr	r6, [pc, #24]	; (6ed8 <get_status+0x34>)
    6ec0:	2379      	movs	r3, #121	; 0x79
    6ec2:	4632      	mov	r2, r6
    6ec4:	4905      	ldr	r1, [pc, #20]	; (6edc <get_status+0x38>)
    6ec6:	4806      	ldr	r0, [pc, #24]	; (6ee0 <get_status+0x3c>)
    6ec8:	f008 f9ab 	bl	f222 <assert_print>
    6ecc:	2179      	movs	r1, #121	; 0x79
    6ece:	4630      	mov	r0, r6
    6ed0:	f008 f9a0 	bl	f214 <assert_post_action>
    6ed4:	e7eb      	b.n	6eae <get_status+0xa>
    6ed6:	bf00      	nop
    6ed8:	00012814 	.word	0x00012814
    6edc:	00012854 	.word	0x00012854
    6ee0:	000116a8 	.word	0x000116a8

00006ee4 <stop>:
{
    6ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ee8:	4607      	mov	r7, r0
    6eea:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    6eec:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    6eee:	4621      	mov	r1, r4
    6ef0:	f008 fb37 	bl	f562 <get_sub_data>
    6ef4:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6ef6:	2c01      	cmp	r4, #1
    6ef8:	d80f      	bhi.n	6f1a <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    6efa:	4631      	mov	r1, r6
    6efc:	f105 0008 	add.w	r0, r5, #8
    6f00:	f008 fb40 	bl	f584 <set_off_state>
	if (err < 0) {
    6f04:	2800      	cmp	r0, #0
    6f06:	db06      	blt.n	6f16 <stop+0x32>
	get_sub_config(dev, type)->stop();
    6f08:	4621      	mov	r1, r4
    6f0a:	4638      	mov	r0, r7
    6f0c:	f008 fb30 	bl	f570 <get_sub_config>
    6f10:	6843      	ldr	r3, [r0, #4]
    6f12:	4798      	blx	r3
	return 0;
    6f14:	2000      	movs	r0, #0
}
    6f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6f1a:	f8df 801c 	ldr.w	r8, [pc, #28]	; 6f38 <stop+0x54>
    6f1e:	f240 134d 	movw	r3, #333	; 0x14d
    6f22:	4642      	mov	r2, r8
    6f24:	4905      	ldr	r1, [pc, #20]	; (6f3c <stop+0x58>)
    6f26:	4806      	ldr	r0, [pc, #24]	; (6f40 <stop+0x5c>)
    6f28:	f008 f97b 	bl	f222 <assert_print>
    6f2c:	f240 114d 	movw	r1, #333	; 0x14d
    6f30:	4640      	mov	r0, r8
    6f32:	f008 f96f 	bl	f214 <assert_post_action>
    6f36:	e7e0      	b.n	6efa <stop+0x16>
    6f38:	00012814 	.word	0x00012814
    6f3c:	00012854 	.word	0x00012854
    6f40:	000116a8 	.word	0x000116a8

00006f44 <onoff_stop>:
{
    6f44:	b538      	push	{r3, r4, r5, lr}
    6f46:	4605      	mov	r5, r0
    6f48:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6f4a:	f7ff ff73 	bl	6e34 <get_subsys>
    6f4e:	4601      	mov	r1, r0
    6f50:	2240      	movs	r2, #64	; 0x40
    6f52:	4803      	ldr	r0, [pc, #12]	; (6f60 <onoff_stop+0x1c>)
    6f54:	f7ff ffc6 	bl	6ee4 <stop>
    6f58:	4601      	mov	r1, r0
	notify(mgr, res);
    6f5a:	4628      	mov	r0, r5
    6f5c:	47a0      	blx	r4
}
    6f5e:	bd38      	pop	{r3, r4, r5, pc}
    6f60:	00010de4 	.word	0x00010de4

00006f64 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    6f64:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    6f66:	2801      	cmp	r0, #1
    6f68:	d01d      	beq.n	6fa6 <clock_event_handler+0x42>
    6f6a:	2803      	cmp	r0, #3
    6f6c:	d020      	beq.n	6fb0 <clock_event_handler+0x4c>
    6f6e:	b168      	cbz	r0, 6f8c <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    6f70:	4c16      	ldr	r4, [pc, #88]	; (6fcc <clock_event_handler+0x68>)
    6f72:	f240 2362 	movw	r3, #610	; 0x262
    6f76:	4622      	mov	r2, r4
    6f78:	4915      	ldr	r1, [pc, #84]	; (6fd0 <clock_event_handler+0x6c>)
    6f7a:	4816      	ldr	r0, [pc, #88]	; (6fd4 <clock_event_handler+0x70>)
    6f7c:	f008 f951 	bl	f222 <assert_print>
    6f80:	f240 2162 	movw	r1, #610	; 0x262
    6f84:	4620      	mov	r0, r4
    6f86:	f008 f945 	bl	f214 <assert_post_action>
		break;
	}
}
    6f8a:	e010      	b.n	6fae <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    6f8c:	2100      	movs	r1, #0
    6f8e:	4812      	ldr	r0, [pc, #72]	; (6fd8 <clock_event_handler+0x74>)
    6f90:	f008 fae7 	bl	f562 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    6f94:	6883      	ldr	r3, [r0, #8]
    6f96:	f013 0f07 	tst.w	r3, #7
    6f9a:	d108      	bne.n	6fae <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    6f9c:	2100      	movs	r1, #0
    6f9e:	480e      	ldr	r0, [pc, #56]	; (6fd8 <clock_event_handler+0x74>)
    6fa0:	f008 fb3a 	bl	f618 <clkstarted_handle>
    6fa4:	e003      	b.n	6fae <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6fa6:	2101      	movs	r1, #1
    6fa8:	480b      	ldr	r0, [pc, #44]	; (6fd8 <clock_event_handler+0x74>)
    6faa:	f008 fb35 	bl	f618 <clkstarted_handle>
}
    6fae:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    6fb0:	4c06      	ldr	r4, [pc, #24]	; (6fcc <clock_event_handler+0x68>)
    6fb2:	f240 235e 	movw	r3, #606	; 0x25e
    6fb6:	4622      	mov	r2, r4
    6fb8:	4905      	ldr	r1, [pc, #20]	; (6fd0 <clock_event_handler+0x6c>)
    6fba:	4806      	ldr	r0, [pc, #24]	; (6fd4 <clock_event_handler+0x70>)
    6fbc:	f008 f931 	bl	f222 <assert_print>
    6fc0:	f240 215e 	movw	r1, #606	; 0x25e
    6fc4:	4620      	mov	r0, r4
    6fc6:	f008 f925 	bl	f214 <assert_post_action>
		break;
    6fca:	e7f0      	b.n	6fae <clock_event_handler+0x4a>
    6fcc:	00012814 	.word	0x00012814
    6fd0:	00011d64 	.word	0x00011d64
    6fd4:	000116a8 	.word	0x000116a8
    6fd8:	00010de4 	.word	0x00010de4

00006fdc <api_blocking_start>:
{
    6fdc:	b500      	push	{lr}
    6fde:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6fe0:	f8cd d000 	str.w	sp, [sp]
    6fe4:	f8cd d004 	str.w	sp, [sp, #4]
    6fe8:	2300      	movs	r3, #0
    6fea:	9302      	str	r3, [sp, #8]
    6fec:	2301      	movs	r3, #1
    6fee:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6ff0:	466b      	mov	r3, sp
    6ff2:	4a07      	ldr	r2, [pc, #28]	; (7010 <api_blocking_start+0x34>)
    6ff4:	f008 fb3e 	bl	f674 <api_start>
	if (err < 0) {
    6ff8:	2800      	cmp	r0, #0
    6ffa:	db05      	blt.n	7008 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    6ffc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7000:	2300      	movs	r3, #0
    7002:	4668      	mov	r0, sp
    7004:	f004 f87e 	bl	b104 <z_impl_k_sem_take>
}
    7008:	b005      	add	sp, #20
    700a:	f85d fb04 	ldr.w	pc, [sp], #4
    700e:	bf00      	nop
    7010:	0000f6c7 	.word	0x0000f6c7

00007014 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    7014:	b570      	push	{r4, r5, r6, lr}
    7016:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7018:	2200      	movs	r2, #0
    701a:	2101      	movs	r1, #1
    701c:	4610      	mov	r0, r2
    701e:	f7fe ff0f 	bl	5e40 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    7022:	4811      	ldr	r0, [pc, #68]	; (7068 <clk_init+0x54>)
    7024:	f001 ff24 	bl	8e70 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    7028:	4b10      	ldr	r3, [pc, #64]	; (706c <clk_init+0x58>)
    702a:	4298      	cmp	r0, r3
    702c:	d119      	bne.n	7062 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    702e:	f001 ff49 	bl	8ec4 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    7032:	2400      	movs	r4, #0
    7034:	2c01      	cmp	r4, #1
    7036:	d812      	bhi.n	705e <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    7038:	4621      	mov	r1, r4
    703a:	4630      	mov	r0, r6
    703c:	f008 fa91 	bl	f562 <get_sub_data>
    7040:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    7042:	4621      	mov	r1, r4
    7044:	4630      	mov	r0, r6
    7046:	f008 fa99 	bl	f57c <get_onoff_manager>
    704a:	4909      	ldr	r1, [pc, #36]	; (7070 <clk_init+0x5c>)
    704c:	f008 f86e 	bl	f12c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    7050:	2800      	cmp	r0, #0
    7052:	db05      	blt.n	7060 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    7054:	2301      	movs	r3, #1
    7056:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    7058:	441c      	add	r4, r3
    705a:	b2e4      	uxtb	r4, r4
    705c:	e7ea      	b.n	7034 <clk_init+0x20>
	}

	return 0;
    705e:	2000      	movs	r0, #0
}
    7060:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    7062:	f06f 0004 	mvn.w	r0, #4
    7066:	e7fb      	b.n	7060 <clk_init+0x4c>
    7068:	00006f65 	.word	0x00006f65
    706c:	0bad0000 	.word	0x0bad0000
    7070:	000128d0 	.word	0x000128d0

00007074 <lfclk_spinwait>:
{
    7074:	b570      	push	{r4, r5, r6, lr}
    7076:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    7078:	2801      	cmp	r0, #1
    707a:	d107      	bne.n	708c <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    707c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7080:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    7084:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    7088:	2b01      	cmp	r3, #1
    708a:	d05a      	beq.n	7142 <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    708c:	f009 fa68 	bl	10560 <k_is_in_isr>
    7090:	b928      	cbnz	r0, 709e <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    7092:	4b2f      	ldr	r3, [pc, #188]	; (7150 <lfclk_spinwait+0xdc>)
    7094:	781b      	ldrb	r3, [r3, #0]
    7096:	2b00      	cmp	r3, #0
    7098:	d043      	beq.n	7122 <lfclk_spinwait+0xae>
    709a:	2300      	movs	r3, #0
    709c:	e000      	b.n	70a0 <lfclk_spinwait+0x2c>
    709e:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    70a0:	461c      	mov	r4, r3
    70a2:	2b00      	cmp	r3, #0
    70a4:	d03f      	beq.n	7126 <lfclk_spinwait+0xb2>
	__asm__ volatile(
    70a6:	f04f 0320 	mov.w	r3, #32
    70aa:	f3ef 8611 	mrs	r6, BASEPRI
    70ae:	f383 8812 	msr	BASEPRI_MAX, r3
    70b2:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    70b6:	b924      	cbnz	r4, 70c2 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    70b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    70bc:	2202      	movs	r2, #2
    70be:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    70c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    70c6:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    70ca:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    70ce:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    70d2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    70d6:	d12d      	bne.n	7134 <lfclk_spinwait+0xc0>
    return false;
    70d8:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    70da:	b11a      	cbz	r2, 70e4 <lfclk_spinwait+0x70>
    70dc:	2b01      	cmp	r3, #1
    70de:	d02b      	beq.n	7138 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    70e0:	2d01      	cmp	r5, #1
    70e2:	d029      	beq.n	7138 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    70e4:	b30c      	cbz	r4, 712a <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    70e6:	4630      	mov	r0, r6
    70e8:	f7fe fe3a 	bl	5d60 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    70ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    70f0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    70f4:	2b00      	cmp	r3, #0
    70f6:	d1e4      	bne.n	70c2 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    70f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    70fc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    7100:	2b00      	cmp	r3, #0
    7102:	d0de      	beq.n	70c2 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7104:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7108:	2200      	movs	r2, #0
    710a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    710e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    7112:	2201      	movs	r2, #1
    7114:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7118:	490e      	ldr	r1, [pc, #56]	; (7154 <lfclk_spinwait+0xe0>)
    711a:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    711e:	609a      	str	r2, [r3, #8]
}
    7120:	e7cf      	b.n	70c2 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7122:	2301      	movs	r3, #1
    7124:	e7bc      	b.n	70a0 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    7126:	2600      	movs	r6, #0
    7128:	e7c5      	b.n	70b6 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    712a:	2021      	movs	r0, #33	; 0x21
    712c:	2100      	movs	r1, #0
    712e:	f005 fa85 	bl	c63c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    7132:	e7db      	b.n	70ec <lfclk_spinwait+0x78>
                return true;
    7134:	2201      	movs	r2, #1
    7136:	e7d0      	b.n	70da <lfclk_spinwait+0x66>
	if (isr_mode) {
    7138:	b124      	cbz	r4, 7144 <lfclk_spinwait+0xd0>
	__asm__ volatile(
    713a:	f386 8811 	msr	BASEPRI, r6
    713e:	f3bf 8f6f 	isb	sy
}
    7142:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    7144:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7148:	2202      	movs	r2, #2
    714a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    714e:	e7f8      	b.n	7142 <lfclk_spinwait+0xce>
    7150:	2000d721 	.word	0x2000d721
    7154:	e000e100 	.word	0xe000e100

00007158 <generic_hfclk_start>:
{
    7158:	b510      	push	{r4, lr}
	__asm__ volatile(
    715a:	f04f 0320 	mov.w	r3, #32
    715e:	f3ef 8411 	mrs	r4, BASEPRI
    7162:	f383 8812 	msr	BASEPRI_MAX, r3
    7166:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    716a:	4a13      	ldr	r2, [pc, #76]	; (71b8 <generic_hfclk_start+0x60>)
    716c:	6813      	ldr	r3, [r2, #0]
    716e:	f043 0302 	orr.w	r3, r3, #2
    7172:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    7174:	f013 0f01 	tst.w	r3, #1
    7178:	d108      	bne.n	718c <generic_hfclk_start+0x34>
	bool already_started = false;
    717a:	2300      	movs	r3, #0
	__asm__ volatile(
    717c:	f384 8811 	msr	BASEPRI, r4
    7180:	f3bf 8f6f 	isb	sy
	if (already_started) {
    7184:	b99b      	cbnz	r3, 71ae <generic_hfclk_start+0x56>
	hfclk_start();
    7186:	f008 fa85 	bl	f694 <hfclk_start>
}
    718a:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    718c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7190:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7194:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    7198:	f012 0f01 	tst.w	r2, #1
    719c:	d101      	bne.n	71a2 <generic_hfclk_start+0x4a>
	bool already_started = false;
    719e:	2300      	movs	r3, #0
    71a0:	e7ec      	b.n	717c <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    71a2:	f7ff fe43 	bl	6e2c <get_hf_flags>
    71a6:	f008 fa24 	bl	f5f2 <set_on_state>
			already_started = true;
    71aa:	2301      	movs	r3, #1
    71ac:	e7e6      	b.n	717c <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    71ae:	2100      	movs	r1, #0
    71b0:	4802      	ldr	r0, [pc, #8]	; (71bc <generic_hfclk_start+0x64>)
    71b2:	f008 fa31 	bl	f618 <clkstarted_handle>
		return;
    71b6:	e7e8      	b.n	718a <generic_hfclk_start+0x32>
    71b8:	2000cff0 	.word	0x2000cff0
    71bc:	00010de4 	.word	0x00010de4

000071c0 <z_nrf_clock_control_lf_on>:
{
    71c0:	b538      	push	{r3, r4, r5, lr}
    71c2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    71c4:	4b1f      	ldr	r3, [pc, #124]	; (7244 <z_nrf_clock_control_lf_on+0x84>)
    71c6:	2101      	movs	r1, #1
    71c8:	f3bf 8f5b 	dmb	ish
    71cc:	e853 2f00 	ldrex	r2, [r3]
    71d0:	e843 1000 	strex	r0, r1, [r3]
    71d4:	2800      	cmp	r0, #0
    71d6:	d1f9      	bne.n	71cc <z_nrf_clock_control_lf_on+0xc>
    71d8:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    71dc:	b142      	cbz	r2, 71f0 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    71de:	b134      	cbz	r4, 71ee <z_nrf_clock_control_lf_on+0x2e>
    71e0:	1e63      	subs	r3, r4, #1
    71e2:	b2db      	uxtb	r3, r3
    71e4:	2b01      	cmp	r3, #1
    71e6:	d81f      	bhi.n	7228 <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    71e8:	4620      	mov	r0, r4
    71ea:	f7ff ff43 	bl	7074 <lfclk_spinwait>
}
    71ee:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    71f0:	4815      	ldr	r0, [pc, #84]	; (7248 <z_nrf_clock_control_lf_on+0x88>)
    71f2:	f008 f9c3 	bl	f57c <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    71f6:	4915      	ldr	r1, [pc, #84]	; (724c <z_nrf_clock_control_lf_on+0x8c>)
    71f8:	2300      	movs	r3, #0
    71fa:	604b      	str	r3, [r1, #4]
    71fc:	608b      	str	r3, [r1, #8]
    71fe:	60cb      	str	r3, [r1, #12]
    7200:	2301      	movs	r3, #1
    7202:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    7204:	f7fc ff84 	bl	4110 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    7208:	2800      	cmp	r0, #0
    720a:	dae8      	bge.n	71de <z_nrf_clock_control_lf_on+0x1e>
    720c:	4d10      	ldr	r5, [pc, #64]	; (7250 <z_nrf_clock_control_lf_on+0x90>)
    720e:	f44f 7308 	mov.w	r3, #544	; 0x220
    7212:	462a      	mov	r2, r5
    7214:	490f      	ldr	r1, [pc, #60]	; (7254 <z_nrf_clock_control_lf_on+0x94>)
    7216:	4810      	ldr	r0, [pc, #64]	; (7258 <z_nrf_clock_control_lf_on+0x98>)
    7218:	f008 f803 	bl	f222 <assert_print>
    721c:	f44f 7108 	mov.w	r1, #544	; 0x220
    7220:	4628      	mov	r0, r5
    7222:	f007 fff7 	bl	f214 <assert_post_action>
    7226:	e7da      	b.n	71de <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    7228:	4c09      	ldr	r4, [pc, #36]	; (7250 <z_nrf_clock_control_lf_on+0x90>)
    722a:	f240 2332 	movw	r3, #562	; 0x232
    722e:	4622      	mov	r2, r4
    7230:	490a      	ldr	r1, [pc, #40]	; (725c <z_nrf_clock_control_lf_on+0x9c>)
    7232:	4809      	ldr	r0, [pc, #36]	; (7258 <z_nrf_clock_control_lf_on+0x98>)
    7234:	f007 fff5 	bl	f222 <assert_print>
    7238:	f240 2132 	movw	r1, #562	; 0x232
    723c:	4620      	mov	r0, r4
    723e:	f007 ffe9 	bl	f214 <assert_post_action>
    7242:	e7d4      	b.n	71ee <z_nrf_clock_control_lf_on+0x2e>
    7244:	2000cff4 	.word	0x2000cff4
    7248:	00010de4 	.word	0x00010de4
    724c:	2000cf88 	.word	0x2000cf88
    7250:	00012814 	.word	0x00012814
    7254:	00011ccc 	.word	0x00011ccc
    7258:	000116a8 	.word	0x000116a8
    725c:	00011d64 	.word	0x00011d64

00007260 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    7260:	b510      	push	{r4, lr}
    7262:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    7264:	280a      	cmp	r0, #10
    7266:	d007      	beq.n	7278 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    7268:	4b07      	ldr	r3, [pc, #28]	; (7288 <console_out+0x28>)
    726a:	6818      	ldr	r0, [r3, #0]
    726c:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    726e:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    7270:	69db      	ldr	r3, [r3, #28]
    7272:	4798      	blx	r3

	return c;
}
    7274:	4620      	mov	r0, r4
    7276:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    7278:	4b03      	ldr	r3, [pc, #12]	; (7288 <console_out+0x28>)
    727a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    727c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    727e:	69db      	ldr	r3, [r3, #28]
    7280:	210d      	movs	r1, #13
    7282:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    7284:	e7f0      	b.n	7268 <console_out+0x8>
    7286:	bf00      	nop
    7288:	2000cff8 	.word	0x2000cff8

0000728c <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    728c:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    728e:	4c04      	ldr	r4, [pc, #16]	; (72a0 <uart_console_hook_install+0x14>)
    7290:	4620      	mov	r0, r4
    7292:	f7ff fcbb 	bl	6c0c <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    7296:	4620      	mov	r0, r4
    7298:	f7fc fca0 	bl	3bdc <__printk_hook_install>
#endif
}
    729c:	bd10      	pop	{r4, pc}
    729e:	bf00      	nop
    72a0:	00007261 	.word	0x00007261

000072a4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    72a4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    72a6:	4806      	ldr	r0, [pc, #24]	; (72c0 <uart_console_init+0x1c>)
    72a8:	4b06      	ldr	r3, [pc, #24]	; (72c4 <uart_console_init+0x20>)
    72aa:	6018      	str	r0, [r3, #0]
    72ac:	f009 f8fc 	bl	104a8 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    72b0:	b118      	cbz	r0, 72ba <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    72b2:	f7ff ffeb 	bl	728c <uart_console_hook_install>

	return 0;
    72b6:	2000      	movs	r0, #0
}
    72b8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    72ba:	f06f 0012 	mvn.w	r0, #18
    72be:	e7fb      	b.n	72b8 <uart_console_init+0x14>
    72c0:	00010e44 	.word	0x00010e44
    72c4:	2000cff8 	.word	0x2000cff8

000072c8 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    72c8:	b128      	cbz	r0, 72d6 <get_dev+0xe>
    72ca:	2801      	cmp	r0, #1
    72cc:	d101      	bne.n	72d2 <get_dev+0xa>
    72ce:	4803      	ldr	r0, [pc, #12]	; (72dc <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    72d0:	4770      	bx	lr
	const struct device *dev = NULL;
    72d2:	2000      	movs	r0, #0
    72d4:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    72d6:	4802      	ldr	r0, [pc, #8]	; (72e0 <get_dev+0x18>)
    72d8:	4770      	bx	lr
    72da:	bf00      	nop
    72dc:	00010dfc 	.word	0x00010dfc
    72e0:	00010e14 	.word	0x00010e14

000072e4 <gpio_nrfx_manage_callback>:
{
    72e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72e8:	4616      	mov	r6, r2
	return port->data;
    72ea:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    72ec:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    72ee:	460c      	mov	r4, r1
    72f0:	b131      	cbz	r1, 7300 <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
    72f2:	6863      	ldr	r3, [r4, #4]
    72f4:	b1a3      	cbz	r3, 7320 <gpio_nrfx_manage_callback+0x3c>
	return list->head;
    72f6:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    72f8:	2b00      	cmp	r3, #0
    72fa:	d03b      	beq.n	7374 <gpio_nrfx_manage_callback+0x90>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    72fc:	2100      	movs	r1, #0
    72fe:	e02a      	b.n	7356 <gpio_nrfx_manage_callback+0x72>
	__ASSERT(callback, "No callback!");
    7300:	f8df 8094 	ldr.w	r8, [pc, #148]	; 7398 <gpio_nrfx_manage_callback+0xb4>
    7304:	2324      	movs	r3, #36	; 0x24
    7306:	4642      	mov	r2, r8
    7308:	4924      	ldr	r1, [pc, #144]	; (739c <gpio_nrfx_manage_callback+0xb8>)
    730a:	4825      	ldr	r0, [pc, #148]	; (73a0 <gpio_nrfx_manage_callback+0xbc>)
    730c:	f007 ff89 	bl	f222 <assert_print>
    7310:	4824      	ldr	r0, [pc, #144]	; (73a4 <gpio_nrfx_manage_callback+0xc0>)
    7312:	f007 ff86 	bl	f222 <assert_print>
    7316:	2124      	movs	r1, #36	; 0x24
    7318:	4640      	mov	r0, r8
    731a:	f007 ff7b 	bl	f214 <assert_post_action>
    731e:	e7e8      	b.n	72f2 <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    7320:	f8df 8074 	ldr.w	r8, [pc, #116]	; 7398 <gpio_nrfx_manage_callback+0xb4>
    7324:	2325      	movs	r3, #37	; 0x25
    7326:	4642      	mov	r2, r8
    7328:	491f      	ldr	r1, [pc, #124]	; (73a8 <gpio_nrfx_manage_callback+0xc4>)
    732a:	481d      	ldr	r0, [pc, #116]	; (73a0 <gpio_nrfx_manage_callback+0xbc>)
    732c:	f007 ff79 	bl	f222 <assert_print>
    7330:	481e      	ldr	r0, [pc, #120]	; (73ac <gpio_nrfx_manage_callback+0xc8>)
    7332:	f007 ff76 	bl	f222 <assert_print>
    7336:	2125      	movs	r1, #37	; 0x25
    7338:	4640      	mov	r0, r8
    733a:	f007 ff6b 	bl	f214 <assert_post_action>
    733e:	e7da      	b.n	72f6 <gpio_nrfx_manage_callback+0x12>
	return node->next;
    7340:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    7342:	606b      	str	r3, [r5, #4]
	return list->tail;
    7344:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    7346:	4294      	cmp	r4, r2
    7348:	d10f      	bne.n	736a <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    734a:	607b      	str	r3, [r7, #4]
}
    734c:	e00d      	b.n	736a <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    734e:	6079      	str	r1, [r7, #4]
}
    7350:	e00b      	b.n	736a <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7352:	4619      	mov	r1, r3
    7354:	681b      	ldr	r3, [r3, #0]
    7356:	b15b      	cbz	r3, 7370 <gpio_nrfx_manage_callback+0x8c>
    7358:	429c      	cmp	r4, r3
    735a:	d1fa      	bne.n	7352 <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_REMOVE(slist, snode)
    735c:	2900      	cmp	r1, #0
    735e:	d0ef      	beq.n	7340 <gpio_nrfx_manage_callback+0x5c>
	return node->next;
    7360:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    7362:	600b      	str	r3, [r1, #0]
	return list->tail;
    7364:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    7366:	429c      	cmp	r4, r3
    7368:	d0f1      	beq.n	734e <gpio_nrfx_manage_callback+0x6a>
	parent->next = child;
    736a:	2300      	movs	r3, #0
    736c:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    736e:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    7370:	b903      	cbnz	r3, 7374 <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    7372:	b156      	cbz	r6, 738a <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    7374:	b166      	cbz	r6, 7390 <gpio_nrfx_manage_callback+0xac>
	return list->head;
    7376:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    7378:	6023      	str	r3, [r4, #0]
	list->head = node;
    737a:	606c      	str	r4, [r5, #4]
	return list->tail;
    737c:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    737e:	b10b      	cbz	r3, 7384 <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    7380:	2000      	movs	r0, #0
    7382:	e006      	b.n	7392 <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    7384:	607c      	str	r4, [r7, #4]
    7386:	2000      	movs	r0, #0
}
    7388:	e003      	b.n	7392 <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    738a:	f06f 0015 	mvn.w	r0, #21
    738e:	e000      	b.n	7392 <gpio_nrfx_manage_callback+0xae>
	return 0;
    7390:	2000      	movs	r0, #0
}
    7392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7396:	bf00      	nop
    7398:	000128dc 	.word	0x000128dc
    739c:	0001290c 	.word	0x0001290c
    73a0:	000116a8 	.word	0x000116a8
    73a4:	00012918 	.word	0x00012918
    73a8:	00012928 	.word	0x00012928
    73ac:	0001293c 	.word	0x0001293c

000073b0 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    73b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    73b4:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    73b8:	0940      	lsrs	r0, r0, #5
    73ba:	f7ff ff85 	bl	72c8 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    73be:	b380      	cbz	r0, 7422 <nrfx_gpio_handler+0x72>
    73c0:	4607      	mov	r7, r0
	return port->data;
    73c2:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    73c4:	2601      	movs	r6, #1
    73c6:	40a6      	lsls	r6, r4
	return list->head;
    73c8:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    73ca:	b11c      	cbz	r4, 73d4 <nrfx_gpio_handler+0x24>
    73cc:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    73ce:	b17c      	cbz	r4, 73f0 <nrfx_gpio_handler+0x40>
	return node->next;
    73d0:	6825      	ldr	r5, [r4, #0]
    73d2:	e00d      	b.n	73f0 <nrfx_gpio_handler+0x40>
    73d4:	4625      	mov	r5, r4
    73d6:	e00b      	b.n	73f0 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    73d8:	6863      	ldr	r3, [r4, #4]
    73da:	68a2      	ldr	r2, [r4, #8]
    73dc:	4032      	ands	r2, r6
    73de:	4621      	mov	r1, r4
    73e0:	4638      	mov	r0, r7
    73e2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    73e4:	b1dd      	cbz	r5, 741e <nrfx_gpio_handler+0x6e>
    73e6:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    73e8:	b105      	cbz	r5, 73ec <nrfx_gpio_handler+0x3c>
	return node->next;
    73ea:	682b      	ldr	r3, [r5, #0]
    73ec:	462c      	mov	r4, r5
    73ee:	461d      	mov	r5, r3
    73f0:	b1bc      	cbz	r4, 7422 <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    73f2:	68a3      	ldr	r3, [r4, #8]
    73f4:	421e      	tst	r6, r3
    73f6:	d0f5      	beq.n	73e4 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    73f8:	6863      	ldr	r3, [r4, #4]
    73fa:	2b00      	cmp	r3, #0
    73fc:	d1ec      	bne.n	73d8 <nrfx_gpio_handler+0x28>
    73fe:	f8df 8028 	ldr.w	r8, [pc, #40]	; 7428 <nrfx_gpio_handler+0x78>
    7402:	2345      	movs	r3, #69	; 0x45
    7404:	4642      	mov	r2, r8
    7406:	4909      	ldr	r1, [pc, #36]	; (742c <nrfx_gpio_handler+0x7c>)
    7408:	4809      	ldr	r0, [pc, #36]	; (7430 <nrfx_gpio_handler+0x80>)
    740a:	f007 ff0a 	bl	f222 <assert_print>
    740e:	4809      	ldr	r0, [pc, #36]	; (7434 <nrfx_gpio_handler+0x84>)
    7410:	f007 ff07 	bl	f222 <assert_print>
    7414:	2145      	movs	r1, #69	; 0x45
    7416:	4640      	mov	r0, r8
    7418:	f007 fefc 	bl	f214 <assert_post_action>
    741c:	e7dc      	b.n	73d8 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    741e:	462b      	mov	r3, r5
    7420:	e7e4      	b.n	73ec <nrfx_gpio_handler+0x3c>
}
    7422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7426:	bf00      	nop
    7428:	000128dc 	.word	0x000128dc
    742c:	00012954 	.word	0x00012954
    7430:	000116a8 	.word	0x000116a8
    7434:	0001293c 	.word	0x0001293c

00007438 <gpio_nrfx_pin_interrupt_configure>:
{
    7438:	b5f0      	push	{r4, r5, r6, r7, lr}
    743a:	b085      	sub	sp, #20
    743c:	460e      	mov	r6, r1
    743e:	4619      	mov	r1, r3
	return port->config;
    7440:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    7442:	7b1b      	ldrb	r3, [r3, #12]
    7444:	f006 041f 	and.w	r4, r6, #31
    7448:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    744c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    7450:	d022      	beq.n	7498 <gpio_nrfx_pin_interrupt_configure+0x60>
    7452:	4607      	mov	r7, r0
    7454:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    7456:	2300      	movs	r3, #0
    7458:	9302      	str	r3, [sp, #8]
    745a:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    745c:	4610      	mov	r0, r2
    745e:	f008 f9b0 	bl	f7c2 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    7462:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    7466:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    7468:	6899      	ldr	r1, [r3, #8]
    746a:	40f1      	lsrs	r1, r6
    746c:	f011 0101 	ands.w	r1, r1, #1
    7470:	d102      	bne.n	7478 <gpio_nrfx_pin_interrupt_configure+0x40>
    7472:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    7476:	d014      	beq.n	74a2 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    7478:	2300      	movs	r3, #0
    747a:	aa02      	add	r2, sp, #8
    747c:	4619      	mov	r1, r3
    747e:	4620      	mov	r0, r4
    7480:	f002 f99a 	bl	97b8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    7484:	4b32      	ldr	r3, [pc, #200]	; (7550 <gpio_nrfx_pin_interrupt_configure+0x118>)
    7486:	4298      	cmp	r0, r3
    7488:	d15f      	bne.n	754a <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    748a:	2101      	movs	r1, #1
    748c:	4620      	mov	r0, r4
    748e:	f002 fbf7 	bl	9c80 <nrfx_gpiote_trigger_enable>
	return 0;
    7492:	2000      	movs	r0, #0
}
    7494:	b005      	add	sp, #20
    7496:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    7498:	4620      	mov	r0, r4
    749a:	f002 fcfd 	bl	9e98 <nrfx_gpiote_trigger_disable>
		return 0;
    749e:	2000      	movs	r0, #0
    74a0:	e7f8      	b.n	7494 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    74a2:	0963      	lsrs	r3, r4, #5
    74a4:	d01f      	beq.n	74e6 <gpio_nrfx_pin_interrupt_configure+0xae>
    74a6:	2b01      	cmp	r3, #1
    74a8:	d101      	bne.n	74ae <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    74aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    74ae:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    74b2:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    74b4:	f011 0f01 	tst.w	r1, #1
    74b8:	d018      	beq.n	74ec <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    74ba:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    74be:	0963      	lsrs	r3, r4, #5
    74c0:	d022      	beq.n	7508 <gpio_nrfx_pin_interrupt_configure+0xd0>
    74c2:	2b01      	cmp	r3, #1
    74c4:	d023      	beq.n	750e <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    74c6:	4e23      	ldr	r6, [pc, #140]	; (7554 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    74c8:	f240 232e 	movw	r3, #558	; 0x22e
    74cc:	4632      	mov	r2, r6
    74ce:	4922      	ldr	r1, [pc, #136]	; (7558 <gpio_nrfx_pin_interrupt_configure+0x120>)
    74d0:	4822      	ldr	r0, [pc, #136]	; (755c <gpio_nrfx_pin_interrupt_configure+0x124>)
    74d2:	f007 fea6 	bl	f222 <assert_print>
    74d6:	f240 212e 	movw	r1, #558	; 0x22e
    74da:	4630      	mov	r0, r6
    74dc:	f007 fe9a 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    74e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    74e4:	e014      	b.n	7510 <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    74e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    74ea:	e7e0      	b.n	74ae <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    74ec:	4d19      	ldr	r5, [pc, #100]	; (7554 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    74ee:	f240 2329 	movw	r3, #553	; 0x229
    74f2:	462a      	mov	r2, r5
    74f4:	491a      	ldr	r1, [pc, #104]	; (7560 <gpio_nrfx_pin_interrupt_configure+0x128>)
    74f6:	4819      	ldr	r0, [pc, #100]	; (755c <gpio_nrfx_pin_interrupt_configure+0x124>)
    74f8:	f007 fe93 	bl	f222 <assert_print>
    74fc:	f240 2129 	movw	r1, #553	; 0x229
    7500:	4628      	mov	r0, r5
    7502:	f007 fe87 	bl	f214 <assert_post_action>
    7506:	e7d8      	b.n	74ba <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    7508:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    750c:	e000      	b.n	7510 <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    750e:	4b15      	ldr	r3, [pc, #84]	; (7564 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    7510:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    7514:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    7518:	f013 0f01 	tst.w	r3, #1
    751c:	d1ac      	bne.n	7478 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    751e:	f10d 0107 	add.w	r1, sp, #7
    7522:	4620      	mov	r0, r4
    7524:	f002 fb3c 	bl	9ba0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    7528:	4b0f      	ldr	r3, [pc, #60]	; (7568 <gpio_nrfx_pin_interrupt_configure+0x130>)
    752a:	4298      	cmp	r0, r3
    752c:	d003      	beq.n	7536 <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    752e:	f10d 0307 	add.w	r3, sp, #7
    7532:	9303      	str	r3, [sp, #12]
    7534:	e7a0      	b.n	7478 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    7536:	f10d 0007 	add.w	r0, sp, #7
    753a:	f002 fb99 	bl	9c70 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    753e:	4b04      	ldr	r3, [pc, #16]	; (7550 <gpio_nrfx_pin_interrupt_configure+0x118>)
    7540:	4298      	cmp	r0, r3
    7542:	d0f4      	beq.n	752e <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    7544:	f06f 000b 	mvn.w	r0, #11
    7548:	e7a4      	b.n	7494 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    754a:	f06f 0004 	mvn.w	r0, #4
    754e:	e7a1      	b.n	7494 <gpio_nrfx_pin_interrupt_configure+0x5c>
    7550:	0bad0000 	.word	0x0bad0000
    7554:	00012960 	.word	0x00012960
    7558:	00011d64 	.word	0x00011d64
    755c:	000116a8 	.word	0x000116a8
    7560:	00012994 	.word	0x00012994
    7564:	50000300 	.word	0x50000300
    7568:	0bad0004 	.word	0x0bad0004

0000756c <pin_uninit>:
{
    756c:	b530      	push	{r4, r5, lr}
    756e:	b083      	sub	sp, #12
    7570:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    7572:	f10d 0107 	add.w	r1, sp, #7
    7576:	f002 fb13 	bl	9ba0 <nrfx_gpiote_channel_get>
    757a:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    757c:	4620      	mov	r0, r4
    757e:	f002 fcf3 	bl	9f68 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    7582:	4b0b      	ldr	r3, [pc, #44]	; (75b0 <pin_uninit+0x44>)
    7584:	4298      	cmp	r0, r3
    7586:	d10f      	bne.n	75a8 <pin_uninit+0x3c>
	if (free_ch) {
    7588:	429d      	cmp	r5, r3
    758a:	d005      	beq.n	7598 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    758c:	4b08      	ldr	r3, [pc, #32]	; (75b0 <pin_uninit+0x44>)
    758e:	4298      	cmp	r0, r3
    7590:	d107      	bne.n	75a2 <pin_uninit+0x36>
    7592:	2000      	movs	r0, #0
}
    7594:	b003      	add	sp, #12
    7596:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    7598:	f89d 0007 	ldrb.w	r0, [sp, #7]
    759c:	f002 fb60 	bl	9c60 <nrfx_gpiote_channel_free>
    75a0:	e7f4      	b.n	758c <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    75a2:	f06f 0004 	mvn.w	r0, #4
    75a6:	e7f5      	b.n	7594 <pin_uninit+0x28>
		return -EIO;
    75a8:	f06f 0004 	mvn.w	r0, #4
    75ac:	e7f2      	b.n	7594 <pin_uninit+0x28>
    75ae:	bf00      	nop
    75b0:	0bad0000 	.word	0x0bad0000

000075b4 <gpio_nrfx_pin_configure>:
{
    75b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    75b8:	b087      	sub	sp, #28
	return port->config;
    75ba:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    75be:	f898 300c 	ldrb.w	r3, [r8, #12]
    75c2:	f001 051f 	and.w	r5, r1, #31
    75c6:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    75ca:	2a00      	cmp	r2, #0
    75cc:	d044      	beq.n	7658 <gpio_nrfx_pin_configure+0xa4>
    75ce:	460c      	mov	r4, r1
    75d0:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    75d2:	2600      	movs	r6, #0
    75d4:	9603      	str	r6, [sp, #12]
    75d6:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    75d8:	f10d 0117 	add.w	r1, sp, #23
    75dc:	4620      	mov	r0, r4
    75de:	f002 fadf 	bl	9ba0 <nrfx_gpiote_channel_get>
    75e2:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    75e4:	4633      	mov	r3, r6
    75e6:	aa03      	add	r2, sp, #12
    75e8:	4631      	mov	r1, r6
    75ea:	4628      	mov	r0, r5
    75ec:	f002 f8e4 	bl	97b8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    75f0:	4b30      	ldr	r3, [pc, #192]	; (76b4 <gpio_nrfx_pin_configure+0x100>)
    75f2:	4298      	cmp	r0, r3
    75f4:	d15b      	bne.n	76ae <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    75f6:	4599      	cmp	r9, r3
    75f8:	d036      	beq.n	7668 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    75fa:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    75fe:	d043      	beq.n	7688 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    7600:	f10d 0103 	add.w	r1, sp, #3
    7604:	4638      	mov	r0, r7
    7606:	f008 f863 	bl	f6d0 <get_drive>
		if (rv != 0) {
    760a:	4606      	mov	r6, r0
    760c:	bb40      	cbnz	r0, 7660 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    760e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7612:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    7616:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    761a:	bf0c      	ite	eq
    761c:	2301      	moveq	r3, #1
    761e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    7620:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    7624:	4638      	mov	r0, r7
    7626:	f008 f899 	bl	f75c <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    762a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    762e:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    7632:	d01e      	beq.n	7672 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    7634:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7638:	2101      	movs	r1, #1
    763a:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    763e:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    7642:	2200      	movs	r2, #0
    7644:	a901      	add	r1, sp, #4
    7646:	4628      	mov	r0, r5
    7648:	f002 f9aa 	bl	99a0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    764c:	4b19      	ldr	r3, [pc, #100]	; (76b4 <gpio_nrfx_pin_configure+0x100>)
    764e:	4298      	cmp	r0, r3
    7650:	d006      	beq.n	7660 <gpio_nrfx_pin_configure+0xac>
    7652:	f06f 0615 	mvn.w	r6, #21
    7656:	e003      	b.n	7660 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    7658:	4628      	mov	r0, r5
    765a:	f7ff ff87 	bl	756c <pin_uninit>
    765e:	4606      	mov	r6, r0
}
    7660:	4630      	mov	r0, r6
    7662:	b007      	add	sp, #28
    7664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    7668:	f89d 0017 	ldrb.w	r0, [sp, #23]
    766c:	f002 faf8 	bl	9c60 <nrfx_gpiote_channel_free>
    7670:	e7c3      	b.n	75fa <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    7672:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    7676:	d0e4      	beq.n	7642 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    7678:	f8d8 2004 	ldr.w	r2, [r8, #4]
    767c:	2301      	movs	r3, #1
    767e:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    7682:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    7686:	e7dc      	b.n	7642 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    7688:	4638      	mov	r0, r7
    768a:	f008 f867 	bl	f75c <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    768e:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    7692:	2300      	movs	r3, #0
    7694:	461a      	mov	r2, r3
    7696:	a902      	add	r1, sp, #8
    7698:	4628      	mov	r0, r5
    769a:	f002 f88d 	bl	97b8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    769e:	4b05      	ldr	r3, [pc, #20]	; (76b4 <gpio_nrfx_pin_configure+0x100>)
    76a0:	4298      	cmp	r0, r3
    76a2:	d101      	bne.n	76a8 <gpio_nrfx_pin_configure+0xf4>
    76a4:	2600      	movs	r6, #0
    76a6:	e7db      	b.n	7660 <gpio_nrfx_pin_configure+0xac>
    76a8:	f06f 0615 	mvn.w	r6, #21
    76ac:	e7d8      	b.n	7660 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    76ae:	f06f 0615 	mvn.w	r6, #21
    76b2:	e7d5      	b.n	7660 <gpio_nrfx_pin_configure+0xac>
    76b4:	0bad0000 	.word	0x0bad0000

000076b8 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    76b8:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    76ba:	f002 fac7 	bl	9c4c <nrfx_gpiote_is_init>
    76be:	b108      	cbz	r0, 76c4 <gpio_nrfx_init+0xc>
		return 0;
    76c0:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    76c2:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    76c4:	f002 fa98 	bl	9bf8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    76c8:	4b08      	ldr	r3, [pc, #32]	; (76ec <gpio_nrfx_init+0x34>)
    76ca:	4298      	cmp	r0, r3
    76cc:	d10a      	bne.n	76e4 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    76ce:	2100      	movs	r1, #0
    76d0:	4807      	ldr	r0, [pc, #28]	; (76f0 <gpio_nrfx_init+0x38>)
    76d2:	f002 fa5f 	bl	9b94 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    76d6:	2200      	movs	r2, #0
    76d8:	2105      	movs	r1, #5
    76da:	2006      	movs	r0, #6
    76dc:	f7fe fbb0 	bl	5e40 <z_arm_irq_priority_set>
	return 0;
    76e0:	2000      	movs	r0, #0
    76e2:	e7ee      	b.n	76c2 <gpio_nrfx_init+0xa>
		return -EIO;
    76e4:	f06f 0004 	mvn.w	r0, #4
    76e8:	e7eb      	b.n	76c2 <gpio_nrfx_init+0xa>
    76ea:	bf00      	nop
    76ec:	0bad0000 	.word	0x0bad0000
    76f0:	000073b1 	.word	0x000073b1

000076f4 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    76f4:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    76f6:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    76f8:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    76fc:	d06f      	beq.n	77de <baudrate_set+0xea>
    76fe:	d83a      	bhi.n	7776 <baudrate_set+0x82>
    7700:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    7704:	d06e      	beq.n	77e4 <baudrate_set+0xf0>
    7706:	d90a      	bls.n	771e <baudrate_set+0x2a>
    7708:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    770c:	d075      	beq.n	77fa <baudrate_set+0x106>
    770e:	d924      	bls.n	775a <baudrate_set+0x66>
    7710:	f647 2312 	movw	r3, #31250	; 0x7a12
    7714:	4299      	cmp	r1, r3
    7716:	d12b      	bne.n	7770 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    7718:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    771c:	e013      	b.n	7746 <baudrate_set+0x52>
	switch (baudrate) {
    771e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    7722:	d061      	beq.n	77e8 <baudrate_set+0xf4>
    7724:	d907      	bls.n	7736 <baudrate_set+0x42>
    7726:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    772a:	d063      	beq.n	77f4 <baudrate_set+0x100>
    772c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    7730:	d110      	bne.n	7754 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    7732:	4b3c      	ldr	r3, [pc, #240]	; (7824 <baudrate_set+0x130>)
    7734:	e007      	b.n	7746 <baudrate_set+0x52>
	switch (baudrate) {
    7736:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    773a:	d058      	beq.n	77ee <baudrate_set+0xfa>
    773c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    7740:	d105      	bne.n	774e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    7742:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    7746:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    774a:	2000      	movs	r0, #0
    774c:	4770      	bx	lr
	switch (baudrate) {
    774e:	f06f 0015 	mvn.w	r0, #21
    7752:	4770      	bx	lr
    7754:	f06f 0015 	mvn.w	r0, #21
    7758:	4770      	bx	lr
    775a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    775e:	d04e      	beq.n	77fe <baudrate_set+0x10a>
    7760:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    7764:	d101      	bne.n	776a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    7766:	4b30      	ldr	r3, [pc, #192]	; (7828 <baudrate_set+0x134>)
    7768:	e7ed      	b.n	7746 <baudrate_set+0x52>
	switch (baudrate) {
    776a:	f06f 0015 	mvn.w	r0, #21
    776e:	4770      	bx	lr
    7770:	f06f 0015 	mvn.w	r0, #21
    7774:	4770      	bx	lr
    7776:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    777a:	d042      	beq.n	7802 <baudrate_set+0x10e>
    777c:	d909      	bls.n	7792 <baudrate_set+0x9e>
    777e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    7782:	d046      	beq.n	7812 <baudrate_set+0x11e>
    7784:	d91f      	bls.n	77c6 <baudrate_set+0xd2>
    7786:	4b29      	ldr	r3, [pc, #164]	; (782c <baudrate_set+0x138>)
    7788:	4299      	cmp	r1, r3
    778a:	d148      	bne.n	781e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    778c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7790:	e7d9      	b.n	7746 <baudrate_set+0x52>
	switch (baudrate) {
    7792:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    7796:	d037      	beq.n	7808 <baudrate_set+0x114>
    7798:	d905      	bls.n	77a6 <baudrate_set+0xb2>
    779a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    779e:	d10f      	bne.n	77c0 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    77a0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    77a4:	e7cf      	b.n	7746 <baudrate_set+0x52>
	switch (baudrate) {
    77a6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    77aa:	4299      	cmp	r1, r3
    77ac:	d02e      	beq.n	780c <baudrate_set+0x118>
    77ae:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    77b2:	d102      	bne.n	77ba <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    77b4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    77b8:	e7c5      	b.n	7746 <baudrate_set+0x52>
	switch (baudrate) {
    77ba:	f06f 0015 	mvn.w	r0, #21
    77be:	4770      	bx	lr
    77c0:	f06f 0015 	mvn.w	r0, #21
    77c4:	4770      	bx	lr
    77c6:	4b1a      	ldr	r3, [pc, #104]	; (7830 <baudrate_set+0x13c>)
    77c8:	4299      	cmp	r1, r3
    77ca:	d025      	beq.n	7818 <baudrate_set+0x124>
    77cc:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    77d0:	d102      	bne.n	77d8 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    77d2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    77d6:	e7b6      	b.n	7746 <baudrate_set+0x52>
	switch (baudrate) {
    77d8:	f06f 0015 	mvn.w	r0, #21
    77dc:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    77de:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    77e2:	e7b0      	b.n	7746 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    77e4:	4b13      	ldr	r3, [pc, #76]	; (7834 <baudrate_set+0x140>)
    77e6:	e7ae      	b.n	7746 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    77e8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    77ec:	e7ab      	b.n	7746 <baudrate_set+0x52>
	switch (baudrate) {
    77ee:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    77f2:	e7a8      	b.n	7746 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    77f4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    77f8:	e7a5      	b.n	7746 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    77fa:	4b0f      	ldr	r3, [pc, #60]	; (7838 <baudrate_set+0x144>)
    77fc:	e7a3      	b.n	7746 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    77fe:	4b0f      	ldr	r3, [pc, #60]	; (783c <baudrate_set+0x148>)
    7800:	e7a1      	b.n	7746 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    7802:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    7806:	e79e      	b.n	7746 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    7808:	4b0d      	ldr	r3, [pc, #52]	; (7840 <baudrate_set+0x14c>)
    780a:	e79c      	b.n	7746 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    780c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    7810:	e799      	b.n	7746 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    7812:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    7816:	e796      	b.n	7746 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    7818:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    781c:	e793      	b.n	7746 <baudrate_set+0x52>
	switch (baudrate) {
    781e:	f06f 0015 	mvn.w	r0, #21
}
    7822:	4770      	bx	lr
    7824:	0013b000 	.word	0x0013b000
    7828:	004ea000 	.word	0x004ea000
    782c:	000f4240 	.word	0x000f4240
    7830:	0003d090 	.word	0x0003d090
    7834:	00275000 	.word	0x00275000
    7838:	0075c000 	.word	0x0075c000
    783c:	003af000 	.word	0x003af000
    7840:	013a9000 	.word	0x013a9000

00007844 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    7844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7848:	4605      	mov	r5, r0
    784a:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
    784c:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    784e:	f008 fe87 	bl	10560 <k_is_in_isr>
    7852:	b920      	cbnz	r0, 785e <uarte_nrfx_poll_out+0x1a>
	return !z_sys_post_kernel;
    7854:	4b1e      	ldr	r3, [pc, #120]	; (78d0 <uarte_nrfx_poll_out+0x8c>)
    7856:	781b      	ldrb	r3, [r3, #0]
    7858:	b1a3      	cbz	r3, 7884 <uarte_nrfx_poll_out+0x40>
    785a:	2300      	movs	r3, #0
    785c:	e000      	b.n	7860 <uarte_nrfx_poll_out+0x1c>
    785e:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    7860:	b9b3      	cbnz	r3, 7890 <uarte_nrfx_poll_out+0x4c>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    7862:	4628      	mov	r0, r5
    7864:	f008 f93e 	bl	fae4 <wait_tx_ready>
    7868:	4606      	mov	r6, r0
	}

	data->char_out = c;
    786a:	4639      	mov	r1, r7
    786c:	f801 8f14 	strb.w	r8, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    7870:	2201      	movs	r2, #1
    7872:	4628      	mov	r0, r5
    7874:	f008 f859 	bl	f92a <tx_start>
    7878:	f386 8811 	msr	BASEPRI, r6
    787c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    7880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7884:	2301      	movs	r3, #1
    7886:	e7eb      	b.n	7860 <uarte_nrfx_poll_out+0x1c>
    7888:	f384 8811 	msr	BASEPRI, r4
    788c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    7890:	f04f 0320 	mov.w	r3, #32
    7894:	f3ef 8411 	mrs	r4, BASEPRI
    7898:	f383 8812 	msr	BASEPRI_MAX, r3
    789c:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    78a0:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    78a2:	4628      	mov	r0, r5
    78a4:	f008 f81f 	bl	f8e6 <is_tx_ready>
    78a8:	2800      	cmp	r0, #0
    78aa:	d0ed      	beq.n	7888 <uarte_nrfx_poll_out+0x44>
				if (data->async && data->async->tx_size &&
    78ac:	68fb      	ldr	r3, [r7, #12]
    78ae:	2b00      	cmp	r3, #0
    78b0:	d0db      	beq.n	786a <uarte_nrfx_poll_out+0x26>
    78b2:	68da      	ldr	r2, [r3, #12]
    78b4:	2a00      	cmp	r2, #0
    78b6:	d0d8      	beq.n	786a <uarte_nrfx_poll_out+0x26>
					data->async->tx_amount < 0) {
    78b8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    78bc:	2a00      	cmp	r2, #0
    78be:	dad4      	bge.n	786a <uarte_nrfx_poll_out+0x26>
	const struct uarte_nrfx_config *config = dev->config;
    78c0:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    78c2:	6812      	ldr	r2, [r2, #0]
    p_reg->TXD.MAXCNT = length;
}

NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
    78c4:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    78c8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    78cc:	e7cd      	b.n	786a <uarte_nrfx_poll_out+0x26>
    78ce:	bf00      	nop
    78d0:	2000d721 	.word	0x2000d721

000078d4 <uarte_nrfx_rx_enable>:
{
    78d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    78d8:	4616      	mov	r6, r2
	struct uarte_nrfx_data *data = dev->data;
    78da:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *cfg = dev->config;
    78dc:	f8d0 9004 	ldr.w	r9, [r0, #4]
	return config->uarte_regs;
    78e0:	f8d9 5000 	ldr.w	r5, [r9]
	if (cfg->disable_rx) {
    78e4:	f899 2008 	ldrb.w	r2, [r9, #8]
    78e8:	b992      	cbnz	r2, 7910 <uarte_nrfx_rx_enable+0x3c>
    78ea:	4680      	mov	r8, r0
    78ec:	460f      	mov	r7, r1
	if (data->async->rx_enabled) {
    78ee:	68e2      	ldr	r2, [r4, #12]
    78f0:	f892 10d2 	ldrb.w	r1, [r2, #210]	; 0xd2
    78f4:	2900      	cmp	r1, #0
    78f6:	f040 8084 	bne.w	7a02 <uarte_nrfx_rx_enable+0x12e>
	data->async->rx_timeout = timeout;
    78fa:	67d3      	str	r3, [r2, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    78fc:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
    7900:	dd19      	ble.n	7936 <uarte_nrfx_rx_enable+0x62>
    7902:	4a41      	ldr	r2, [pc, #260]	; (7a08 <uarte_nrfx_rx_enable+0x134>)
    7904:	fb82 1203 	smull	r1, r2, r2, r3
    7908:	17db      	asrs	r3, r3, #31
    790a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    790e:	e013      	b.n	7938 <uarte_nrfx_rx_enable+0x64>
		__ASSERT(false, "TX only UARTE instance");
    7910:	4c3e      	ldr	r4, [pc, #248]	; (7a0c <uarte_nrfx_rx_enable+0x138>)
    7912:	f240 337f 	movw	r3, #895	; 0x37f
    7916:	4622      	mov	r2, r4
    7918:	493d      	ldr	r1, [pc, #244]	; (7a10 <uarte_nrfx_rx_enable+0x13c>)
    791a:	483e      	ldr	r0, [pc, #248]	; (7a14 <uarte_nrfx_rx_enable+0x140>)
    791c:	f007 fc81 	bl	f222 <assert_print>
    7920:	483d      	ldr	r0, [pc, #244]	; (7a18 <uarte_nrfx_rx_enable+0x144>)
    7922:	f007 fc7e 	bl	f222 <assert_print>
    7926:	f240 317f 	movw	r1, #895	; 0x37f
    792a:	4620      	mov	r0, r4
    792c:	f007 fc72 	bl	f214 <assert_post_action>
		return -ENOTSUP;
    7930:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7934:	e03d      	b.n	79b2 <uarte_nrfx_rx_enable+0xde>
		MAX(timeout / RX_TIMEOUT_DIV,
    7936:	235c      	movs	r3, #92	; 0x5c
	data->async->rx_timeout_slab =
    7938:	68e2      	ldr	r2, [r4, #12]
    793a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	data->async->rx_buf = buf;
    793e:	68e3      	ldr	r3, [r4, #12]
    7940:	661f      	str	r7, [r3, #96]	; 0x60
	data->async->rx_buf_len = len;
    7942:	68e3      	ldr	r3, [r4, #12]
    7944:	665e      	str	r6, [r3, #100]	; 0x64
	data->async->rx_offset = 0;
    7946:	68e2      	ldr	r2, [r4, #12]
    7948:	2300      	movs	r3, #0
    794a:	6693      	str	r3, [r2, #104]	; 0x68
	data->async->rx_next_buf = NULL;
    794c:	68e2      	ldr	r2, [r4, #12]
    794e:	66d3      	str	r3, [r2, #108]	; 0x6c
	data->async->rx_next_buf_len = 0;
    7950:	68e2      	ldr	r2, [r4, #12]
    7952:	6713      	str	r3, [r2, #112]	; 0x70
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7954:	f8d9 3004 	ldr.w	r3, [r9, #4]
    7958:	f013 0f10 	tst.w	r3, #16
    795c:	d010      	beq.n	7980 <uarte_nrfx_rx_enable+0xac>
		if (data->async->rx_flush_cnt) {
    795e:	68e1      	ldr	r1, [r4, #12]
    7960:	f891 30d1 	ldrb.w	r3, [r1, #209]	; 0xd1
    7964:	b163      	cbz	r3, 7980 <uarte_nrfx_rx_enable+0xac>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    7966:	42b3      	cmp	r3, r6
    7968:	bf28      	it	cs
    796a:	4633      	movcs	r3, r6
    796c:	469a      	mov	sl, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    796e:	461a      	mov	r2, r3
    7970:	31cc      	adds	r1, #204	; 0xcc
    7972:	4638      	mov	r0, r7
    7974:	f008 ff15 	bl	107a2 <memcpy>
			buf += cpy_len;
    7978:	4457      	add	r7, sl
			if (!len) {
    797a:	ebb6 060a 	subs.w	r6, r6, sl
    797e:	d01a      	beq.n	79b6 <uarte_nrfx_rx_enable+0xe2>

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    7980:	f8c5 7534 	str.w	r7, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    7984:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7988:	2300      	movs	r3, #0
    798a:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    798e:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    7992:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
    7996:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	data->async->rx_enabled = true;
    799a:	68e3      	ldr	r3, [r4, #12]
    799c:	2201      	movs	r2, #1
    799e:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    79a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
    79a6:	f013 0f10 	tst.w	r3, #16
    79aa:	d119      	bne.n	79e0 <uarte_nrfx_rx_enable+0x10c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    79ac:	2301      	movs	r3, #1
    79ae:	602b      	str	r3, [r5, #0]
	return 0;
    79b0:	2000      	movs	r0, #0
}
    79b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				data->async->rx_flush_cnt -= cpy_len;
    79b6:	68e2      	ldr	r2, [r4, #12]
    79b8:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    79bc:	eba3 030a 	sub.w	r3, r3, sl
    79c0:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    79c4:	4651      	mov	r1, sl
    79c6:	4640      	mov	r0, r8
    79c8:	f007 fffe 	bl	f9c8 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    79cc:	68e1      	ldr	r1, [r4, #12]
    79ce:	3160      	adds	r1, #96	; 0x60
    79d0:	4640      	mov	r0, r8
    79d2:	f008 f811 	bl	f9f8 <rx_buf_release>
				notify_rx_disable(dev);
    79d6:	4640      	mov	r0, r8
    79d8:	f008 f825 	bl	fa26 <notify_rx_disable>
				return 0;
    79dc:	2000      	movs	r0, #0
    79de:	e7e8      	b.n	79b2 <uarte_nrfx_rx_enable+0xde>
    79e0:	f04f 0320 	mov.w	r3, #32
    79e4:	f3ef 8411 	mrs	r4, BASEPRI
    79e8:	f383 8812 	msr	BASEPRI_MAX, r3
    79ec:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
    79f0:	2102      	movs	r1, #2
    79f2:	4640      	mov	r0, r8
    79f4:	f007 ff8b 	bl	f90e <uarte_enable>
	__asm__ volatile(
    79f8:	f384 8811 	msr	BASEPRI, r4
    79fc:	f3bf 8f6f 	isb	sy
}
    7a00:	e7d4      	b.n	79ac <uarte_nrfx_rx_enable+0xd8>
		return -EBUSY;
    7a02:	f06f 000f 	mvn.w	r0, #15
    7a06:	e7d4      	b.n	79b2 <uarte_nrfx_rx_enable+0xde>
    7a08:	66666667 	.word	0x66666667
    7a0c:	00012a0c 	.word	0x00012a0c
    7a10:	00011d64 	.word	0x00011d64
    7a14:	000116a8 	.word	0x000116a8
    7a18:	00012a40 	.word	0x00012a40

00007a1c <uarte_nrfx_tx>:
{
    7a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7a20:	b083      	sub	sp, #12
    7a22:	4605      	mov	r5, r0
    7a24:	4698      	mov	r8, r3
	struct uarte_nrfx_data *data = dev->data;
    7a26:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    7a28:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    7a2a:	6833      	ldr	r3, [r6, #0]
	__asm__ volatile(
    7a2c:	f04f 0020 	mov.w	r0, #32
    7a30:	f3ef 8911 	mrs	r9, BASEPRI
    7a34:	f380 8812 	msr	BASEPRI_MAX, r0
    7a38:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
    7a3c:	68e6      	ldr	r6, [r4, #12]
    7a3e:	68f7      	ldr	r7, [r6, #12]
    7a40:	b9f7      	cbnz	r7, 7a80 <uarte_nrfx_tx+0x64>
	data->async->tx_size = len;
    7a42:	60f2      	str	r2, [r6, #12]
	data->async->tx_buf = buf;
    7a44:	68e0      	ldr	r0, [r4, #12]
    7a46:	6081      	str	r1, [r0, #8]
    p_reg->INTENSET = mask;
    7a48:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    7a4c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    7a50:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    7a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    7a58:	d119      	bne.n	7a8e <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
    7a5a:	68e3      	ldr	r3, [r4, #12]
    7a5c:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
    7a5e:	68e3      	ldr	r3, [r4, #12]
    7a60:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
    7a62:	4621      	mov	r1, r4
    7a64:	4628      	mov	r0, r5
    7a66:	f007 ff8c 	bl	f982 <start_tx_locked>
	__asm__ volatile(
    7a6a:	f389 8811 	msr	BASEPRI, r9
    7a6e:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    7a72:	7ae3      	ldrb	r3, [r4, #11]
    7a74:	2b01      	cmp	r3, #1
    7a76:	d011      	beq.n	7a9c <uarte_nrfx_tx+0x80>
	return 0;
    7a78:	2000      	movs	r0, #0
}
    7a7a:	b003      	add	sp, #12
    7a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7a80:	f389 8811 	msr	BASEPRI, r9
    7a84:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    7a88:	f06f 000f 	mvn.w	r0, #15
    7a8c:	e7f5      	b.n	7a7a <uarte_nrfx_tx+0x5e>
		data->async->tx_cache_offset = 0;
    7a8e:	68e3      	ldr	r3, [r4, #12]
    7a90:	2200      	movs	r2, #0
    7a92:	621a      	str	r2, [r3, #32]
		(void)setup_tx_cache(data);
    7a94:	4620      	mov	r0, r4
    7a96:	f008 f964 	bl	fd62 <setup_tx_cache>
    7a9a:	e7e2      	b.n	7a62 <uarte_nrfx_tx+0x46>
	    && timeout != SYS_FOREVER_US) {
    7a9c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    7aa0:	d101      	bne.n	7aa6 <uarte_nrfx_tx+0x8a>
	return 0;
    7aa2:	2000      	movs	r0, #0
    7aa4:	e7e9      	b.n	7a7a <uarte_nrfx_tx+0x5e>
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    7aa6:	68e4      	ldr	r4, [r4, #12]
    7aa8:	3428      	adds	r4, #40	; 0x28
    7aaa:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
    7aae:	17c1      	asrs	r1, r0, #31
			return ((t * to_hz + off) / from_hz);
    7ab0:	03c9      	lsls	r1, r1, #15
    7ab2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    7ab6:	03c0      	lsls	r0, r0, #15
    7ab8:	4b09      	ldr	r3, [pc, #36]	; (7ae0 <uarte_nrfx_tx+0xc4>)
    7aba:	18c0      	adds	r0, r0, r3
    7abc:	4a09      	ldr	r2, [pc, #36]	; (7ae4 <uarte_nrfx_tx+0xc8>)
    7abe:	f04f 0300 	mov.w	r3, #0
    7ac2:	f141 0100 	adc.w	r1, r1, #0
    7ac6:	f7f8 ff89 	bl	9dc <__aeabi_uldivmod>
    7aca:	4602      	mov	r2, r0
    7acc:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    7ace:	2000      	movs	r0, #0
    7ad0:	2100      	movs	r1, #0
    7ad2:	e9cd 0100 	strd	r0, r1, [sp]
    7ad6:	4620      	mov	r0, r4
    7ad8:	f005 fae8 	bl	d0ac <z_impl_k_timer_start>
	return 0;
    7adc:	2000      	movs	r0, #0
    7ade:	e7cc      	b.n	7a7a <uarte_nrfx_tx+0x5e>
    7ae0:	000f423f 	.word	0x000f423f
    7ae4:	000f4240 	.word	0x000f4240

00007ae8 <rxstarted_isr>:
{
    7ae8:	b510      	push	{r4, lr}
    7aea:	b088      	sub	sp, #32
	struct uarte_nrfx_data *data = dev->data;
    7aec:	6904      	ldr	r4, [r0, #16]
	struct uart_event evt = {
    7aee:	2300      	movs	r3, #0
    7af0:	9303      	str	r3, [sp, #12]
    7af2:	9304      	str	r3, [sp, #16]
    7af4:	9305      	str	r3, [sp, #20]
    7af6:	9306      	str	r3, [sp, #24]
    7af8:	9307      	str	r3, [sp, #28]
    7afa:	2303      	movs	r3, #3
    7afc:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    7b00:	a903      	add	r1, sp, #12
    7b02:	f007 ff59 	bl	f9b8 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    7b06:	68e3      	ldr	r3, [r4, #12]
    7b08:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    7b0a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    7b0e:	d101      	bne.n	7b14 <rxstarted_isr+0x2c>
}
    7b10:	b008      	add	sp, #32
    7b12:	bd10      	pop	{r4, pc}
		data->async->rx_timeout_left = data->async->rx_timeout;
    7b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		k_timer_start(&data->async->rx_timeout_timer,
    7b18:	68e3      	ldr	r3, [r4, #12]
    7b1a:	f103 0488 	add.w	r4, r3, #136	; 0x88
			      K_USEC(data->async->rx_timeout_slab),
    7b1e:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    7b22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    7b26:	17c1      	asrs	r1, r0, #31
    7b28:	03c9      	lsls	r1, r1, #15
    7b2a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    7b2e:	03c0      	lsls	r0, r0, #15
    7b30:	4b08      	ldr	r3, [pc, #32]	; (7b54 <rxstarted_isr+0x6c>)
    7b32:	18c0      	adds	r0, r0, r3
    7b34:	4a08      	ldr	r2, [pc, #32]	; (7b58 <rxstarted_isr+0x70>)
    7b36:	f04f 0300 	mov.w	r3, #0
    7b3a:	f141 0100 	adc.w	r1, r1, #0
    7b3e:	f7f8 ff4d 	bl	9dc <__aeabi_uldivmod>
    7b42:	4602      	mov	r2, r0
    7b44:	460b      	mov	r3, r1
    7b46:	9000      	str	r0, [sp, #0]
    7b48:	9101      	str	r1, [sp, #4]
    7b4a:	4620      	mov	r0, r4
    7b4c:	f005 faae 	bl	d0ac <z_impl_k_timer_start>
}
    7b50:	e7de      	b.n	7b10 <rxstarted_isr+0x28>
    7b52:	bf00      	nop
    7b54:	000f423f 	.word	0x000f423f
    7b58:	000f4240 	.word	0x000f4240

00007b5c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    7b5c:	b530      	push	{r4, r5, lr}
    7b5e:	b085      	sub	sp, #20
    7b60:	4604      	mov	r4, r0
    7b62:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    7b64:	f101 0016 	add.w	r0, r1, #22
    7b68:	f002 fa8a 	bl	a080 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    7b6c:	4b11      	ldr	r3, [pc, #68]	; (7bb4 <endtx_stoptx_ppi_init+0x58>)
    7b6e:	4298      	cmp	r0, r3
    7b70:	d112      	bne.n	7b98 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    7b72:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    7b74:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    7b78:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    7b7a:	4a0f      	ldr	r2, [pc, #60]	; (7bb8 <endtx_stoptx_ppi_init+0x5c>)
    7b7c:	33a2      	adds	r3, #162	; 0xa2
    7b7e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    7b82:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7b86:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    7b88:	7da9      	ldrb	r1, [r5, #22]
    7b8a:	2301      	movs	r3, #1
    7b8c:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    7b8e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    7b92:	2000      	movs	r0, #0
}
    7b94:	b005      	add	sp, #20
    7b96:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    7b98:	4b08      	ldr	r3, [pc, #32]	; (7bbc <endtx_stoptx_ppi_init+0x60>)
    7b9a:	9302      	str	r3, [sp, #8]
    7b9c:	2000      	movs	r0, #0
    7b9e:	9001      	str	r0, [sp, #4]
    7ba0:	9000      	str	r0, [sp, #0]
    7ba2:	4603      	mov	r3, r0
    7ba4:	2201      	movs	r2, #1
    7ba6:	4906      	ldr	r1, [pc, #24]	; (7bc0 <endtx_stoptx_ppi_init+0x64>)
    7ba8:	f008 f8f4 	bl	fd94 <z_log_msg2_runtime_create>
		return -EIO;
    7bac:	f06f 0004 	mvn.w	r0, #4
    7bb0:	e7f0      	b.n	7b94 <endtx_stoptx_ppi_init+0x38>
    7bb2:	bf00      	nop
    7bb4:	0bad0000 	.word	0x0bad0000
    7bb8:	4001f000 	.word	0x4001f000
    7bbc:	00012a5c 	.word	0x00012a5c
    7bc0:	0001101c 	.word	0x0001101c

00007bc4 <uarte_nrfx_init>:
{
    7bc4:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = dev->data;
    7bc6:	6905      	ldr	r5, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    7bc8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7bca:	681c      	ldr	r4, [r3, #0]
	int ret = uarte_nrfx_rx_counting_init(dev);
    7bcc:	f007 fed2 	bl	f974 <uarte_nrfx_rx_counting_init>
	if (ret != 0) {
    7bd0:	4606      	mov	r6, r0
    7bd2:	bb90      	cbnz	r0, 7c3a <uarte_nrfx_init+0x76>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    7bd4:	68eb      	ldr	r3, [r5, #12]
    7bd6:	2201      	movs	r2, #1
    7bd8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    p_reg->INTENSET = mask;
    7bdc:	4b18      	ldr	r3, [pc, #96]	; (7c40 <uarte_nrfx_init+0x7c>)
    7bde:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    7be2:	2308      	movs	r3, #8
    7be4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7be8:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    7bec:	b1a3      	cbz	r3, 7c18 <uarte_nrfx_init+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7bee:	6062      	str	r2, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7bf0:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    7bf4:	b91b      	cbnz	r3, 7bfe <uarte_nrfx_init+0x3a>
    7bf6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    7bfa:	2b00      	cmp	r3, #0
    7bfc:	d0f8      	beq.n	7bf0 <uarte_nrfx_init+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7bfe:	2300      	movs	r3, #0
    7c00:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    7c04:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
    7c08:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    7c0c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    7c10:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    7c14:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    7c18:	68e8      	ldr	r0, [r5, #12]
    7c1a:	2200      	movs	r2, #0
    7c1c:	4909      	ldr	r1, [pc, #36]	; (7c44 <uarte_nrfx_init+0x80>)
    7c1e:	3088      	adds	r0, #136	; 0x88
    7c20:	f008 fd38 	bl	10694 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    7c24:	68eb      	ldr	r3, [r5, #12]
	timer->user_data = user_data;
    7c26:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    7c2a:	68e8      	ldr	r0, [r5, #12]
    7c2c:	2200      	movs	r2, #0
    7c2e:	4906      	ldr	r1, [pc, #24]	; (7c48 <uarte_nrfx_init+0x84>)
    7c30:	3028      	adds	r0, #40	; 0x28
    7c32:	f008 fd2f 	bl	10694 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    7c36:	68eb      	ldr	r3, [r5, #12]
    7c38:	65dd      	str	r5, [r3, #92]	; 0x5c
}
    7c3a:	4630      	mov	r0, r6
    7c3c:	bd70      	pop	{r4, r5, r6, pc}
    7c3e:	bf00      	nop
    7c40:	000a0210 	.word	0x000a0210
    7c44:	0000fc09 	.word	0x0000fc09
    7c48:	0000fbfd 	.word	0x0000fbfd

00007c4c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    7c4c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    7c50:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    7c54:	4b01      	ldr	r3, [pc, #4]	; (7c5c <set_comparator+0x10>)
    7c56:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    7c5a:	4770      	bx	lr
    7c5c:	40011000 	.word	0x40011000

00007c60 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    7c60:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    7c64:	4b01      	ldr	r3, [pc, #4]	; (7c6c <get_comparator+0xc>)
    7c66:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    7c6a:	4770      	bx	lr
    7c6c:	40011000 	.word	0x40011000

00007c70 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7c70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7c74:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    7c76:	4a02      	ldr	r2, [pc, #8]	; (7c80 <event_enable+0x10>)
    7c78:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    7c7c:	4770      	bx	lr
    7c7e:	bf00      	nop
    7c80:	40011000 	.word	0x40011000

00007c84 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7c88:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    7c8a:	4a02      	ldr	r2, [pc, #8]	; (7c94 <event_disable+0x10>)
    7c8c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    7c90:	4770      	bx	lr
    7c92:	bf00      	nop
    7c94:	40011000 	.word	0x40011000

00007c98 <counter>:
     return p_reg->COUNTER;
    7c98:	4b01      	ldr	r3, [pc, #4]	; (7ca0 <counter+0x8>)
    7c9a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    7c9e:	4770      	bx	lr
    7ca0:	40011000 	.word	0x40011000

00007ca4 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    7ca4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    7ca6:	2301      	movs	r3, #1
    7ca8:	4083      	lsls	r3, r0
    7caa:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7cae:	4a10      	ldr	r2, [pc, #64]	; (7cf0 <compare_int_lock+0x4c>)
    7cb0:	f3bf 8f5b 	dmb	ish
    7cb4:	e852 1f00 	ldrex	r1, [r2]
    7cb8:	ea01 0e0c 	and.w	lr, r1, ip
    7cbc:	e842 e400 	strex	r4, lr, [r2]
    7cc0:	2c00      	cmp	r4, #0
    7cc2:	d1f7      	bne.n	7cb4 <compare_int_lock+0x10>
    7cc4:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7cc8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    7ccc:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    7cd0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    7cd4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    7cd8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    7cdc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7ce0:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    7ce4:	420b      	tst	r3, r1
}
    7ce6:	bf14      	ite	ne
    7ce8:	2001      	movne	r0, #1
    7cea:	2000      	moveq	r0, #0
    7cec:	bd10      	pop	{r4, pc}
    7cee:	bf00      	nop
    7cf0:	2000d018 	.word	0x2000d018

00007cf4 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    7cf4:	b570      	push	{r4, r5, r6, lr}
    7cf6:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    7cf8:	f008 fa7a 	bl	101f0 <full_int_lock>
    7cfc:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    7cfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7d02:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    7d04:	4a17      	ldr	r2, [pc, #92]	; (7d64 <channel_processing_check_and_clear+0x70>)
    7d06:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    7d0a:	4213      	tst	r3, r2
    7d0c:	d105      	bne.n	7d1a <channel_processing_check_and_clear+0x26>
	bool result = false;
    7d0e:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    7d10:	4628      	mov	r0, r5
    7d12:	f008 fa76 	bl	10202 <full_int_unlock>

	return result;
}
    7d16:	4630      	mov	r0, r6
    7d18:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    7d1a:	2301      	movs	r3, #1
    7d1c:	40a3      	lsls	r3, r4
    7d1e:	43db      	mvns	r3, r3
    7d20:	4a11      	ldr	r2, [pc, #68]	; (7d68 <channel_processing_check_and_clear+0x74>)
    7d22:	f3bf 8f5b 	dmb	ish
    7d26:	e852 1f00 	ldrex	r1, [r2]
    7d2a:	ea01 0003 	and.w	r0, r1, r3
    7d2e:	e842 0600 	strex	r6, r0, [r2]
    7d32:	2e00      	cmp	r6, #0
    7d34:	d1f7      	bne.n	7d26 <channel_processing_check_and_clear+0x32>
    7d36:	f3bf 8f5b 	dmb	ish
    7d3a:	b959      	cbnz	r1, 7d54 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7d3c:	f104 0350 	add.w	r3, r4, #80	; 0x50
    7d40:	009b      	lsls	r3, r3, #2
    7d42:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7d44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7d48:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    7d4c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    7d4e:	b113      	cbz	r3, 7d56 <channel_processing_check_and_clear+0x62>
    7d50:	2301      	movs	r3, #1
    7d52:	e000      	b.n	7d56 <channel_processing_check_and_clear+0x62>
    7d54:	2301      	movs	r3, #1
		if (result) {
    7d56:	461e      	mov	r6, r3
    7d58:	2b00      	cmp	r3, #0
    7d5a:	d0d9      	beq.n	7d10 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    7d5c:	4620      	mov	r0, r4
    7d5e:	f008 fa38 	bl	101d2 <event_clear>
    7d62:	e7d5      	b.n	7d10 <channel_processing_check_and_clear+0x1c>
    7d64:	40011000 	.word	0x40011000
    7d68:	2000d014 	.word	0x2000d014

00007d6c <compare_int_unlock>:
	if (key) {
    7d6c:	b901      	cbnz	r1, 7d70 <compare_int_unlock+0x4>
}
    7d6e:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    7d70:	2301      	movs	r3, #1
    7d72:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7d74:	4a11      	ldr	r2, [pc, #68]	; (7dbc <compare_int_unlock+0x50>)
    7d76:	f3bf 8f5b 	dmb	ish
    7d7a:	e852 1f00 	ldrex	r1, [r2]
    7d7e:	4319      	orrs	r1, r3
    7d80:	e842 1c00 	strex	ip, r1, [r2]
    7d84:	f1bc 0f00 	cmp.w	ip, #0
    7d88:	d1f7      	bne.n	7d7a <compare_int_unlock+0xe>
    7d8a:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7d8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7d92:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    7d94:	4a0a      	ldr	r2, [pc, #40]	; (7dc0 <compare_int_unlock+0x54>)
    7d96:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7d9a:	f3bf 8f5b 	dmb	ish
    7d9e:	4b09      	ldr	r3, [pc, #36]	; (7dc4 <compare_int_unlock+0x58>)
    7da0:	681b      	ldr	r3, [r3, #0]
    7da2:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    7da6:	fa23 f000 	lsr.w	r0, r3, r0
    7daa:	f010 0f01 	tst.w	r0, #1
    7dae:	d0de      	beq.n	7d6e <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7db0:	4b05      	ldr	r3, [pc, #20]	; (7dc8 <compare_int_unlock+0x5c>)
    7db2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7db6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    7dba:	e7d8      	b.n	7d6e <compare_int_unlock+0x2>
    7dbc:	2000d018 	.word	0x2000d018
    7dc0:	40011000 	.word	0x40011000
    7dc4:	2000d014 	.word	0x2000d014
    7dc8:	e000e100 	.word	0xe000e100

00007dcc <sys_clock_timeout_handler>:
{
    7dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7dd0:	4607      	mov	r7, r0
    7dd2:	4614      	mov	r4, r2
    7dd4:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    7dd6:	4610      	mov	r0, r2
    7dd8:	4619      	mov	r1, r3
    7dda:	f008 fa06 	bl	101ea <absolute_time_to_cc>
    7dde:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    7de0:	4b15      	ldr	r3, [pc, #84]	; (7e38 <sys_clock_timeout_handler+0x6c>)
    7de2:	681a      	ldr	r2, [r3, #0]
    7de4:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    7de6:	601c      	str	r4, [r3, #0]
    7de8:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    7dea:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    7dee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    7df2:	d309      	bcc.n	7e08 <sys_clock_timeout_handler+0x3c>
	return false;
    7df4:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    7df6:	f004 ff6d 	bl	ccd4 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    7dfa:	4638      	mov	r0, r7
    7dfc:	f7ff ff30 	bl	7c60 <get_comparator>
    7e00:	42a8      	cmp	r0, r5
    7e02:	d00e      	beq.n	7e22 <sys_clock_timeout_handler+0x56>
}
    7e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    7e08:	4b0c      	ldr	r3, [pc, #48]	; (7e3c <sys_clock_timeout_handler+0x70>)
    7e0a:	681b      	ldr	r3, [r3, #0]
    7e0c:	0a1a      	lsrs	r2, r3, #8
    7e0e:	061b      	lsls	r3, r3, #24
    7e10:	eb15 0803 	adds.w	r8, r5, r3
    7e14:	f142 0900 	adc.w	r9, r2, #0
    7e18:	4b09      	ldr	r3, [pc, #36]	; (7e40 <sys_clock_timeout_handler+0x74>)
    7e1a:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    7e1e:	2401      	movs	r4, #1
    7e20:	e7e9      	b.n	7df6 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    7e22:	b11c      	cbz	r4, 7e2c <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    7e24:	4638      	mov	r0, r7
    7e26:	f7ff ff23 	bl	7c70 <event_enable>
}
    7e2a:	e7eb      	b.n	7e04 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    7e2c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    7e30:	4638      	mov	r0, r7
    7e32:	f7ff ff0b 	bl	7c4c <set_comparator>
    7e36:	e7f5      	b.n	7e24 <sys_clock_timeout_handler+0x58>
    7e38:	200047c0 	.word	0x200047c0
    7e3c:	2000d01c 	.word	0x2000d01c
    7e40:	200047a8 	.word	0x200047a8

00007e44 <z_nrf_rtc_timer_read>:
{
    7e44:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    7e46:	4b0d      	ldr	r3, [pc, #52]	; (7e7c <z_nrf_rtc_timer_read+0x38>)
    7e48:	681c      	ldr	r4, [r3, #0]
    7e4a:	0a25      	lsrs	r5, r4, #8
    7e4c:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    7e4e:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    7e52:	f7ff ff21 	bl	7c98 <counter>
    7e56:	4603      	mov	r3, r0
	val += cntr;
    7e58:	1900      	adds	r0, r0, r4
    7e5a:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    7e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    7e62:	d20a      	bcs.n	7e7a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    7e64:	4b06      	ldr	r3, [pc, #24]	; (7e80 <z_nrf_rtc_timer_read+0x3c>)
    7e66:	e9d3 2300 	ldrd	r2, r3, [r3]
    7e6a:	4290      	cmp	r0, r2
    7e6c:	eb71 0303 	sbcs.w	r3, r1, r3
    7e70:	d203      	bcs.n	7e7a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    7e72:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    7e76:	f141 0100 	adc.w	r1, r1, #0
}
    7e7a:	bd38      	pop	{r3, r4, r5, pc}
    7e7c:	2000d01c 	.word	0x2000d01c
    7e80:	200047a8 	.word	0x200047a8

00007e84 <compare_set_nolocks>:
{
    7e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e86:	4606      	mov	r6, r0
    7e88:	4614      	mov	r4, r2
    7e8a:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    7e8c:	4610      	mov	r0, r2
    7e8e:	4619      	mov	r1, r3
    7e90:	f008 f9ab 	bl	101ea <absolute_time_to_cc>
    7e94:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    7e96:	f7ff ffd5 	bl	7e44 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    7e9a:	42a0      	cmp	r0, r4
    7e9c:	eb71 0305 	sbcs.w	r3, r1, r5
    7ea0:	d21d      	bcs.n	7ede <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    7ea2:	1a23      	subs	r3, r4, r0
    7ea4:	eb65 0101 	sbc.w	r1, r5, r1
    7ea8:	4a1b      	ldr	r2, [pc, #108]	; (7f18 <compare_set_nolocks+0x94>)
    7eaa:	4293      	cmp	r3, r2
    7eac:	f171 0300 	sbcs.w	r3, r1, #0
    7eb0:	d22f      	bcs.n	7f12 <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    7eb2:	4b1a      	ldr	r3, [pc, #104]	; (7f1c <compare_set_nolocks+0x98>)
    7eb4:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    7eb8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    7ebc:	42ab      	cmp	r3, r5
    7ebe:	bf08      	it	eq
    7ec0:	42a2      	cmpeq	r2, r4
    7ec2:	d01a      	beq.n	7efa <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    7ec4:	4639      	mov	r1, r7
    7ec6:	4630      	mov	r0, r6
    7ec8:	f008 f9a0 	bl	1020c <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    7ecc:	4639      	mov	r1, r7
    7ece:	f008 f97c 	bl	101ca <counter_sub>
    7ed2:	1900      	adds	r0, r0, r4
    7ed4:	f145 0300 	adc.w	r3, r5, #0
    7ed8:	4604      	mov	r4, r0
    7eda:	461d      	mov	r5, r3
    7edc:	e00d      	b.n	7efa <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    7ede:	2301      	movs	r3, #1
    7ee0:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7ee2:	4a0f      	ldr	r2, [pc, #60]	; (7f20 <compare_set_nolocks+0x9c>)
    7ee4:	f3bf 8f5b 	dmb	ish
    7ee8:	e852 1f00 	ldrex	r1, [r2]
    7eec:	4319      	orrs	r1, r3
    7eee:	e842 1000 	strex	r0, r1, [r2]
    7ef2:	2800      	cmp	r0, #0
    7ef4:	d1f8      	bne.n	7ee8 <compare_set_nolocks+0x64>
    7ef6:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    7efa:	4b08      	ldr	r3, [pc, #32]	; (7f1c <compare_set_nolocks+0x98>)
    7efc:	0132      	lsls	r2, r6, #4
    7efe:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    7f02:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    7f06:	9906      	ldr	r1, [sp, #24]
    7f08:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    7f0a:	9b07      	ldr	r3, [sp, #28]
    7f0c:	6073      	str	r3, [r6, #4]
	return ret;
    7f0e:	2000      	movs	r0, #0
}
    7f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    7f12:	f06f 0015 	mvn.w	r0, #21
    7f16:	e7fb      	b.n	7f10 <compare_set_nolocks+0x8c>
    7f18:	01000001 	.word	0x01000001
    7f1c:	200047b0 	.word	0x200047b0
    7f20:	2000d014 	.word	0x2000d014

00007f24 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    7f24:	b530      	push	{r4, r5, lr}
    7f26:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    7f28:	2300      	movs	r3, #0
    7f2a:	4a1d      	ldr	r2, [pc, #116]	; (7fa0 <sys_clock_driver_init+0x7c>)
    7f2c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    7f30:	2b00      	cmp	r3, #0
    7f32:	dd24      	ble.n	7f7e <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    7f34:	4c1a      	ldr	r4, [pc, #104]	; (7fa0 <sys_clock_driver_init+0x7c>)
    7f36:	2502      	movs	r5, #2
    7f38:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7f3c:	4b19      	ldr	r3, [pc, #100]	; (7fa4 <sys_clock_driver_init+0x80>)
    7f3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7f42:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    7f46:	2200      	movs	r2, #0
    7f48:	2101      	movs	r1, #1
    7f4a:	2011      	movs	r0, #17
    7f4c:	f7fd ff78 	bl	5e40 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    7f50:	2011      	movs	r0, #17
    7f52:	f7fd ff59 	bl	5e08 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    7f56:	2301      	movs	r3, #1
    7f58:	60a3      	str	r3, [r4, #8]
    7f5a:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    7f5c:	4a12      	ldr	r2, [pc, #72]	; (7fa8 <sys_clock_driver_init+0x84>)
    7f5e:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    7f60:	2400      	movs	r4, #0
    7f62:	9401      	str	r4, [sp, #4]
    7f64:	4b11      	ldr	r3, [pc, #68]	; (7fac <sys_clock_driver_init+0x88>)
    7f66:	9300      	str	r3, [sp, #0]
    7f68:	4a11      	ldr	r2, [pc, #68]	; (7fb0 <sys_clock_driver_init+0x8c>)
    7f6a:	2300      	movs	r3, #0
    7f6c:	4620      	mov	r0, r4
    7f6e:	f008 f988 	bl	10282 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    7f72:	4628      	mov	r0, r5
    7f74:	f7ff f924 	bl	71c0 <z_nrf_clock_control_lf_on>

	return 0;
}
    7f78:	4620      	mov	r0, r4
    7f7a:	b003      	add	sp, #12
    7f7c:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    7f7e:	4a0d      	ldr	r2, [pc, #52]	; (7fb4 <sys_clock_driver_init+0x90>)
    7f80:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    7f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7f88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7f8c:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7f90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    7f94:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    7f96:	4902      	ldr	r1, [pc, #8]	; (7fa0 <sys_clock_driver_init+0x7c>)
    7f98:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    7f9c:	3301      	adds	r3, #1
    7f9e:	e7c7      	b.n	7f30 <sys_clock_driver_init+0xc>
    7fa0:	40011000 	.word	0x40011000
    7fa4:	e000e100 	.word	0xe000e100
    7fa8:	2000d018 	.word	0x2000d018
    7fac:	00007dcd 	.word	0x00007dcd
    7fb0:	007fffff 	.word	0x007fffff
    7fb4:	200047b0 	.word	0x200047b0

00007fb8 <process_channel>:
{
    7fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7fbc:	b082      	sub	sp, #8
    7fbe:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    7fc0:	f7ff fe98 	bl	7cf4 <channel_processing_check_and_clear>
    7fc4:	b910      	cbnz	r0, 7fcc <process_channel+0x14>
}
    7fc6:	b002      	add	sp, #8
    7fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    7fcc:	f7ff ff3a 	bl	7e44 <z_nrf_rtc_timer_read>
    7fd0:	4682      	mov	sl, r0
    7fd2:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    7fd4:	f008 f90c 	bl	101f0 <full_int_lock>
    7fd8:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    7fda:	4b13      	ldr	r3, [pc, #76]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7fdc:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    7fe0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    7fe4:	45c2      	cmp	sl, r8
    7fe6:	eb76 0309 	sbcs.w	r3, r6, r9
    7fea:	d20b      	bcs.n	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    7fec:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    7fee:	4628      	mov	r0, r5
    7ff0:	f008 f907 	bl	10202 <full_int_unlock>
		if (handler) {
    7ff4:	2e00      	cmp	r6, #0
    7ff6:	d0e6      	beq.n	7fc6 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    7ff8:	9700      	str	r7, [sp, #0]
    7ffa:	4642      	mov	r2, r8
    7ffc:	464b      	mov	r3, r9
    7ffe:	4620      	mov	r0, r4
    8000:	47b0      	blx	r6
}
    8002:	e7e0      	b.n	7fc6 <process_channel+0xe>
			handler = cc_data[chan].callback;
    8004:	4a08      	ldr	r2, [pc, #32]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    8006:	0123      	lsls	r3, r4, #4
    8008:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    800c:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    800e:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    8010:	2000      	movs	r0, #0
    8012:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    8014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    801c:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    8020:	4620      	mov	r0, r4
    8022:	f7ff fe2f 	bl	7c84 <event_disable>
    8026:	e7e2      	b.n	7fee <process_channel+0x36>
    8028:	200047b0 	.word	0x200047b0

0000802c <rtc_nrf_isr>:
{
    802c:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    802e:	4b0e      	ldr	r3, [pc, #56]	; (8068 <rtc_nrf_isr+0x3c>)
    8030:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    8034:	f013 0f02 	tst.w	r3, #2
    8038:	d00d      	beq.n	8056 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    803a:	4b0b      	ldr	r3, [pc, #44]	; (8068 <rtc_nrf_isr+0x3c>)
    803c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    8040:	b14b      	cbz	r3, 8056 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8042:	4b09      	ldr	r3, [pc, #36]	; (8068 <rtc_nrf_isr+0x3c>)
    8044:	2200      	movs	r2, #0
    8046:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    804a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    804e:	4a07      	ldr	r2, [pc, #28]	; (806c <rtc_nrf_isr+0x40>)
    8050:	6813      	ldr	r3, [r2, #0]
    8052:	3301      	adds	r3, #1
    8054:	6013      	str	r3, [r2, #0]
{
    8056:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    8058:	2c00      	cmp	r4, #0
    805a:	dd00      	ble.n	805e <rtc_nrf_isr+0x32>
}
    805c:	bd10      	pop	{r4, pc}
		process_channel(chan);
    805e:	4620      	mov	r0, r4
    8060:	f7ff ffaa 	bl	7fb8 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    8064:	3401      	adds	r4, #1
    8066:	e7f7      	b.n	8058 <rtc_nrf_isr+0x2c>
    8068:	40011000 	.word	0x40011000
    806c:	2000d01c 	.word	0x2000d01c

00008070 <sys_clock_set_timeout>:
{
    8070:	b510      	push	{r4, lr}
    8072:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    8074:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    8078:	d006      	beq.n	8088 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    807a:	2801      	cmp	r0, #1
    807c:	dd06      	ble.n	808c <sys_clock_set_timeout+0x1c>
    807e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8082:	da05      	bge.n	8090 <sys_clock_set_timeout+0x20>
    8084:	1e44      	subs	r4, r0, #1
    8086:	e004      	b.n	8092 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    8088:	480f      	ldr	r0, [pc, #60]	; (80c8 <sys_clock_set_timeout+0x58>)
    808a:	e7f8      	b.n	807e <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    808c:	2400      	movs	r4, #0
    808e:	e000      	b.n	8092 <sys_clock_set_timeout+0x22>
    8090:	4c0d      	ldr	r4, [pc, #52]	; (80c8 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    8092:	f7ff fed7 	bl	7e44 <z_nrf_rtc_timer_read>
    8096:	4b0d      	ldr	r3, [pc, #52]	; (80cc <sys_clock_set_timeout+0x5c>)
    8098:	6819      	ldr	r1, [r3, #0]
    809a:	685b      	ldr	r3, [r3, #4]
    809c:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    809e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    80a2:	d300      	bcc.n	80a6 <sys_clock_set_timeout+0x36>
		ticks = 0;
    80a4:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    80a6:	4420      	add	r0, r4
    80a8:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    80aa:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    80ae:	d300      	bcc.n	80b2 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    80b0:	4a05      	ldr	r2, [pc, #20]	; (80c8 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    80b2:	2000      	movs	r0, #0
    80b4:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    80b6:	9001      	str	r0, [sp, #4]
    80b8:	4905      	ldr	r1, [pc, #20]	; (80d0 <sys_clock_set_timeout+0x60>)
    80ba:	9100      	str	r1, [sp, #0]
    80bc:	f143 0300 	adc.w	r3, r3, #0
    80c0:	f008 f8df 	bl	10282 <compare_set>
}
    80c4:	b002      	add	sp, #8
    80c6:	bd10      	pop	{r4, pc}
    80c8:	007fffff 	.word	0x007fffff
    80cc:	200047c0 	.word	0x200047c0
    80d0:	00007dcd 	.word	0x00007dcd

000080d4 <sys_clock_elapsed>:
{
    80d4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    80d6:	f7ff feb5 	bl	7e44 <z_nrf_rtc_timer_read>
    80da:	4b02      	ldr	r3, [pc, #8]	; (80e4 <sys_clock_elapsed+0x10>)
    80dc:	681b      	ldr	r3, [r3, #0]
}
    80de:	1ac0      	subs	r0, r0, r3
    80e0:	bd08      	pop	{r3, pc}
    80e2:	bf00      	nop
    80e4:	200047c0 	.word	0x200047c0

000080e8 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    80e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    80ec:	460c      	mov	r4, r1
    80ee:	4691      	mov	r9, r2
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    80f0:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    80f4:	d002      	beq.n	80fc <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    80f6:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    80fa:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    80fc:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    8100:	f3c0 1881 	ubfx	r8, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    8104:	f3c0 2703 	ubfx	r7, r0, #8, #4
    uint32_t port = pin_number >> 5;
    8108:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    810c:	f010 0f20 	tst.w	r0, #32
    8110:	d01d      	beq.n	814e <nrf_pin_configure+0x66>
    8112:	b1fb      	cbz	r3, 8154 <nrf_pin_configure+0x6c>
            mask = P1_FEATURE_PINS_PRESENT;
    8114:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8118:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    811c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    811e:	f013 0f01 	tst.w	r3, #1
    8122:	d019      	beq.n	8158 <nrf_pin_configure+0x70>
    *p_pin = pin_number & 0x1F;
    8124:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8128:	096d      	lsrs	r5, r5, #5
    812a:	d023      	beq.n	8174 <nrf_pin_configure+0x8c>
    812c:	bb2d      	cbnz	r5, 817a <nrf_pin_configure+0x92>
            NRFX_ASSERT(0);
    812e:	4d19      	ldr	r5, [pc, #100]	; (8194 <nrf_pin_configure+0xac>)
    8130:	f240 232e 	movw	r3, #558	; 0x22e
    8134:	462a      	mov	r2, r5
    8136:	4918      	ldr	r1, [pc, #96]	; (8198 <nrf_pin_configure+0xb0>)
    8138:	4818      	ldr	r0, [pc, #96]	; (819c <nrf_pin_configure+0xb4>)
    813a:	f007 f872 	bl	f222 <assert_print>
    813e:	f240 212e 	movw	r1, #558	; 0x22e
    8142:	4628      	mov	r0, r5
    8144:	f007 f866 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    8148:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    814c:	e016      	b.n	817c <nrf_pin_configure+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    814e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8152:	e7e1      	b.n	8118 <nrf_pin_configure+0x30>
    switch (port)
    8154:	2300      	movs	r3, #0
    8156:	e7df      	b.n	8118 <nrf_pin_configure+0x30>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8158:	4e0e      	ldr	r6, [pc, #56]	; (8194 <nrf_pin_configure+0xac>)
    815a:	f240 2329 	movw	r3, #553	; 0x229
    815e:	4632      	mov	r2, r6
    8160:	490f      	ldr	r1, [pc, #60]	; (81a0 <nrf_pin_configure+0xb8>)
    8162:	480e      	ldr	r0, [pc, #56]	; (819c <nrf_pin_configure+0xb4>)
    8164:	f007 f85d 	bl	f222 <assert_print>
    8168:	f240 2129 	movw	r1, #553	; 0x229
    816c:	4630      	mov	r0, r6
    816e:	f007 f851 	bl	f214 <assert_post_action>
    8172:	e7d7      	b.n	8124 <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
    8174:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8178:	e000      	b.n	817c <nrf_pin_configure+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    817a:	4b0a      	ldr	r3, [pc, #40]	; (81a4 <nrf_pin_configure+0xbc>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    817c:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    8180:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    8184:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    8188:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    818c:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
}
    8190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8194:	00012960 	.word	0x00012960
    8198:	00011d64 	.word	0x00011d64
    819c:	000116a8 	.word	0x000116a8
    81a0:	00012994 	.word	0x00012994
    81a4:	50000300 	.word	0x50000300

000081a8 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    81a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    81ac:	4605      	mov	r5, r0
    81ae:	460e      	mov	r6, r1
    81b0:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    81b2:	2400      	movs	r4, #0
    81b4:	e04e      	b.n	8254 <pinctrl_configure_pins+0xac>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    81b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    81ba:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    81be:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    81c2:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    81c6:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    81ca:	f013 0f20 	tst.w	r3, #32
    81ce:	d01f      	beq.n	8210 <pinctrl_configure_pins+0x68>
    81d0:	b109      	cbz	r1, 81d6 <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    81d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    81d6:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    81da:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    81dc:	f012 0f01 	tst.w	r2, #1
    81e0:	d019      	beq.n	8216 <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    81e2:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    81e6:	ea5f 1359 	movs.w	r3, r9, lsr #5
    81ea:	d023      	beq.n	8234 <pinctrl_configure_pins+0x8c>
    81ec:	bb2b      	cbnz	r3, 823a <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    81ee:	f8df 9344 	ldr.w	r9, [pc, #836]	; 8534 <pinctrl_configure_pins+0x38c>
    81f2:	f240 232e 	movw	r3, #558	; 0x22e
    81f6:	464a      	mov	r2, r9
    81f8:	49cf      	ldr	r1, [pc, #828]	; (8538 <pinctrl_configure_pins+0x390>)
    81fa:	48d0      	ldr	r0, [pc, #832]	; (853c <pinctrl_configure_pins+0x394>)
    81fc:	f007 f811 	bl	f222 <assert_print>
    8200:	f240 212e 	movw	r1, #558	; 0x22e
    8204:	4648      	mov	r0, r9
    8206:	f007 f805 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    820a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    820e:	e015      	b.n	823c <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    8210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8214:	e7df      	b.n	81d6 <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8216:	f8df a31c 	ldr.w	sl, [pc, #796]	; 8534 <pinctrl_configure_pins+0x38c>
    821a:	f240 2329 	movw	r3, #553	; 0x229
    821e:	4652      	mov	r2, sl
    8220:	49c7      	ldr	r1, [pc, #796]	; (8540 <pinctrl_configure_pins+0x398>)
    8222:	48c6      	ldr	r0, [pc, #792]	; (853c <pinctrl_configure_pins+0x394>)
    8224:	f006 fffd 	bl	f222 <assert_print>
    8228:	f240 2129 	movw	r1, #553	; 0x229
    822c:	4650      	mov	r0, sl
    822e:	f006 fff1 	bl	f214 <assert_post_action>
    8232:	e7d6      	b.n	81e2 <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    8234:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8238:	e000      	b.n	823c <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    823a:	4ac2      	ldr	r2, [pc, #776]	; (8544 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    823c:	2101      	movs	r1, #1
    823e:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    8242:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8246:	460a      	mov	r2, r1
    8248:	f855 0008 	ldr.w	r0, [r5, r8]
    824c:	f7ff ff4c 	bl	80e8 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    8250:	3401      	adds	r4, #1
    8252:	b2e4      	uxtb	r4, r4
    8254:	42b4      	cmp	r4, r6
    8256:	f080 841e 	bcs.w	8a96 <pinctrl_configure_pins+0x8ee>
		switch (NRF_GET_FUN(pins[i])) {
    825a:	ea4f 0884 	mov.w	r8, r4, lsl #2
    825e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    8262:	0c1a      	lsrs	r2, r3, #16
    8264:	2a22      	cmp	r2, #34	; 0x22
    8266:	f200 8418 	bhi.w	8a9a <pinctrl_configure_pins+0x8f2>
    826a:	a101      	add	r1, pc, #4	; (adr r1, 8270 <pinctrl_configure_pins+0xc8>)
    826c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    8270:	000081b7 	.word	0x000081b7
    8274:	000082fd 	.word	0x000082fd
    8278:	00008313 	.word	0x00008313
    827c:	000083b3 	.word	0x000083b3
    8280:	000083c9 	.word	0x000083c9
    8284:	00008469 	.word	0x00008469
    8288:	00008509 	.word	0x00008509
    828c:	00008a9b 	.word	0x00008a9b
    8290:	00008a9b 	.word	0x00008a9b
    8294:	00008a9b 	.word	0x00008a9b
    8298:	00008a9b 	.word	0x00008a9b
    829c:	0000851f 	.word	0x0000851f
    82a0:	00008549 	.word	0x00008549
    82a4:	00008a9b 	.word	0x00008a9b
    82a8:	00008a9b 	.word	0x00008a9b
    82ac:	00008a9b 	.word	0x00008a9b
    82b0:	00008a9b 	.word	0x00008a9b
    82b4:	00008a9b 	.word	0x00008a9b
    82b8:	00008a9b 	.word	0x00008a9b
    82bc:	00008a9b 	.word	0x00008a9b
    82c0:	00008a9b 	.word	0x00008a9b
    82c4:	00008a9b 	.word	0x00008a9b
    82c8:	0000855f 	.word	0x0000855f
    82cc:	00008685 	.word	0x00008685
    82d0:	000087ab 	.word	0x000087ab
    82d4:	000088e7 	.word	0x000088e7
    82d8:	00008a9b 	.word	0x00008a9b
    82dc:	00008a9b 	.word	0x00008a9b
    82e0:	00008a9b 	.word	0x00008a9b
    82e4:	00008a0d 	.word	0x00008a0d
    82e8:	00008a23 	.word	0x00008a23
    82ec:	00008a39 	.word	0x00008a39
    82f0:	00008a4f 	.word	0x00008a4f
    82f4:	00008a67 	.word	0x00008a67
    82f8:	00008a7f 	.word	0x00008a7f
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    82fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8300:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8304:	2200      	movs	r2, #0
    8306:	4611      	mov	r1, r2
    8308:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    830c:	f7ff feec 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    8310:	e79e      	b.n	8250 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    8312:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8316:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    831a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    831e:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    8322:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    8326:	f013 0f20 	tst.w	r3, #32
    832a:	d01f      	beq.n	836c <pinctrl_configure_pins+0x1c4>
    832c:	b30a      	cbz	r2, 8372 <pinctrl_configure_pins+0x1ca>
            mask = P1_FEATURE_PINS_PRESENT;
    832e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8332:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8336:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8338:	f013 0f01 	tst.w	r3, #1
    833c:	d01b      	beq.n	8376 <pinctrl_configure_pins+0x1ce>
    *p_pin = pin_number & 0x1F;
    833e:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8342:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8346:	d025      	beq.n	8394 <pinctrl_configure_pins+0x1ec>
    8348:	bb3b      	cbnz	r3, 839a <pinctrl_configure_pins+0x1f2>
            NRFX_ASSERT(0);
    834a:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8534 <pinctrl_configure_pins+0x38c>
    834e:	f240 232e 	movw	r3, #558	; 0x22e
    8352:	464a      	mov	r2, r9
    8354:	4978      	ldr	r1, [pc, #480]	; (8538 <pinctrl_configure_pins+0x390>)
    8356:	4879      	ldr	r0, [pc, #484]	; (853c <pinctrl_configure_pins+0x394>)
    8358:	f006 ff63 	bl	f222 <assert_print>
    835c:	f240 212e 	movw	r1, #558	; 0x22e
    8360:	4648      	mov	r0, r9
    8362:	f006 ff57 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    8366:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    836a:	e017      	b.n	839c <pinctrl_configure_pins+0x1f4>
            mask = P0_FEATURE_PINS_PRESENT;
    836c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8370:	e7df      	b.n	8332 <pinctrl_configure_pins+0x18a>
    switch (port)
    8372:	2300      	movs	r3, #0
    8374:	e7dd      	b.n	8332 <pinctrl_configure_pins+0x18a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8376:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8534 <pinctrl_configure_pins+0x38c>
    837a:	f240 2329 	movw	r3, #553	; 0x229
    837e:	4652      	mov	r2, sl
    8380:	496f      	ldr	r1, [pc, #444]	; (8540 <pinctrl_configure_pins+0x398>)
    8382:	486e      	ldr	r0, [pc, #440]	; (853c <pinctrl_configure_pins+0x394>)
    8384:	f006 ff4d 	bl	f222 <assert_print>
    8388:	f240 2129 	movw	r1, #553	; 0x229
    838c:	4650      	mov	r0, sl
    838e:	f006 ff41 	bl	f214 <assert_post_action>
    8392:	e7d4      	b.n	833e <pinctrl_configure_pins+0x196>
        case 0: return NRF_P0;
    8394:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8398:	e000      	b.n	839c <pinctrl_configure_pins+0x1f4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    839a:	4a6a      	ldr	r2, [pc, #424]	; (8544 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    839c:	2101      	movs	r1, #1
    839e:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    83a2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    83a6:	460a      	mov	r2, r1
    83a8:	f855 0008 	ldr.w	r0, [r5, r8]
    83ac:	f7ff fe9c 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    83b0:	e74e      	b.n	8250 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    83b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    83b6:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    83ba:	2200      	movs	r2, #0
    83bc:	4611      	mov	r1, r2
    83be:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    83c2:	f7ff fe91 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    83c6:	e743      	b.n	8250 <pinctrl_configure_pins+0xa8>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    83c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    83cc:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    83d0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    83d4:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    83d8:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    83dc:	f013 0f20 	tst.w	r3, #32
    83e0:	d01f      	beq.n	8422 <pinctrl_configure_pins+0x27a>
    83e2:	b30a      	cbz	r2, 8428 <pinctrl_configure_pins+0x280>
            mask = P1_FEATURE_PINS_PRESENT;
    83e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    83e8:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    83ec:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    83ee:	f013 0f01 	tst.w	r3, #1
    83f2:	d01b      	beq.n	842c <pinctrl_configure_pins+0x284>
    *p_pin = pin_number & 0x1F;
    83f4:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    83f8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    83fc:	d025      	beq.n	844a <pinctrl_configure_pins+0x2a2>
    83fe:	bb3b      	cbnz	r3, 8450 <pinctrl_configure_pins+0x2a8>
            NRFX_ASSERT(0);
    8400:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8534 <pinctrl_configure_pins+0x38c>
    8404:	f240 232e 	movw	r3, #558	; 0x22e
    8408:	464a      	mov	r2, r9
    840a:	494b      	ldr	r1, [pc, #300]	; (8538 <pinctrl_configure_pins+0x390>)
    840c:	484b      	ldr	r0, [pc, #300]	; (853c <pinctrl_configure_pins+0x394>)
    840e:	f006 ff08 	bl	f222 <assert_print>
    8412:	f240 212e 	movw	r1, #558	; 0x22e
    8416:	4648      	mov	r0, r9
    8418:	f006 fefc 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    841c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8420:	e017      	b.n	8452 <pinctrl_configure_pins+0x2aa>
            mask = P0_FEATURE_PINS_PRESENT;
    8422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8426:	e7df      	b.n	83e8 <pinctrl_configure_pins+0x240>
    switch (port)
    8428:	2300      	movs	r3, #0
    842a:	e7dd      	b.n	83e8 <pinctrl_configure_pins+0x240>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    842c:	f8df a104 	ldr.w	sl, [pc, #260]	; 8534 <pinctrl_configure_pins+0x38c>
    8430:	f240 2329 	movw	r3, #553	; 0x229
    8434:	4652      	mov	r2, sl
    8436:	4942      	ldr	r1, [pc, #264]	; (8540 <pinctrl_configure_pins+0x398>)
    8438:	4840      	ldr	r0, [pc, #256]	; (853c <pinctrl_configure_pins+0x394>)
    843a:	f006 fef2 	bl	f222 <assert_print>
    843e:	f240 2129 	movw	r1, #553	; 0x229
    8442:	4650      	mov	r0, sl
    8444:	f006 fee6 	bl	f214 <assert_post_action>
    8448:	e7d4      	b.n	83f4 <pinctrl_configure_pins+0x24c>
        case 0: return NRF_P0;
    844a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    844e:	e000      	b.n	8452 <pinctrl_configure_pins+0x2aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8450:	4a3c      	ldr	r2, [pc, #240]	; (8544 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    8452:	2101      	movs	r1, #1
    8454:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    8458:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    845c:	2200      	movs	r2, #0
    845e:	f855 0008 	ldr.w	r0, [r5, r8]
    8462:	f7ff fe41 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    8466:	e6f3      	b.n	8250 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    8468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    846c:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    8470:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    8474:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    8478:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    847c:	f013 0f20 	tst.w	r3, #32
    8480:	d01f      	beq.n	84c2 <pinctrl_configure_pins+0x31a>
    8482:	b30a      	cbz	r2, 84c8 <pinctrl_configure_pins+0x320>
            mask = P1_FEATURE_PINS_PRESENT;
    8484:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8488:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    848c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    848e:	f013 0f01 	tst.w	r3, #1
    8492:	d01b      	beq.n	84cc <pinctrl_configure_pins+0x324>
    *p_pin = pin_number & 0x1F;
    8494:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8498:	ea5f 1359 	movs.w	r3, r9, lsr #5
    849c:	d025      	beq.n	84ea <pinctrl_configure_pins+0x342>
    849e:	bb3b      	cbnz	r3, 84f0 <pinctrl_configure_pins+0x348>
            NRFX_ASSERT(0);
    84a0:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8534 <pinctrl_configure_pins+0x38c>
    84a4:	f240 232e 	movw	r3, #558	; 0x22e
    84a8:	464a      	mov	r2, r9
    84aa:	4923      	ldr	r1, [pc, #140]	; (8538 <pinctrl_configure_pins+0x390>)
    84ac:	4823      	ldr	r0, [pc, #140]	; (853c <pinctrl_configure_pins+0x394>)
    84ae:	f006 feb8 	bl	f222 <assert_print>
    84b2:	f240 212e 	movw	r1, #558	; 0x22e
    84b6:	4648      	mov	r0, r9
    84b8:	f006 feac 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    84bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    84c0:	e017      	b.n	84f2 <pinctrl_configure_pins+0x34a>
            mask = P0_FEATURE_PINS_PRESENT;
    84c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    84c6:	e7df      	b.n	8488 <pinctrl_configure_pins+0x2e0>
    switch (port)
    84c8:	2300      	movs	r3, #0
    84ca:	e7dd      	b.n	8488 <pinctrl_configure_pins+0x2e0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    84cc:	f8df a064 	ldr.w	sl, [pc, #100]	; 8534 <pinctrl_configure_pins+0x38c>
    84d0:	f240 2329 	movw	r3, #553	; 0x229
    84d4:	4652      	mov	r2, sl
    84d6:	491a      	ldr	r1, [pc, #104]	; (8540 <pinctrl_configure_pins+0x398>)
    84d8:	4818      	ldr	r0, [pc, #96]	; (853c <pinctrl_configure_pins+0x394>)
    84da:	f006 fea2 	bl	f222 <assert_print>
    84de:	f240 2129 	movw	r1, #553	; 0x229
    84e2:	4650      	mov	r0, sl
    84e4:	f006 fe96 	bl	f214 <assert_post_action>
    84e8:	e7d4      	b.n	8494 <pinctrl_configure_pins+0x2ec>
        case 0: return NRF_P0;
    84ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    84ee:	e000      	b.n	84f2 <pinctrl_configure_pins+0x34a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    84f0:	4a14      	ldr	r2, [pc, #80]	; (8544 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    84f2:	2101      	movs	r1, #1
    84f4:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    84f8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    84fc:	460a      	mov	r2, r1
    84fe:	f855 0008 	ldr.w	r0, [r5, r8]
    8502:	f7ff fdf1 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8506:	e6a3      	b.n	8250 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    8508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    850c:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8510:	2200      	movs	r2, #0
    8512:	4611      	mov	r1, r2
    8514:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8518:	f7ff fde6 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    851c:	e698      	b.n	8250 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    851e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8522:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8526:	2200      	movs	r2, #0
    8528:	4611      	mov	r1, r2
    852a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    852e:	f7ff fddb 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    8532:	e68d      	b.n	8250 <pinctrl_configure_pins+0xa8>
    8534:	00012960 	.word	0x00012960
    8538:	00011d64 	.word	0x00011d64
    853c:	000116a8 	.word	0x000116a8
    8540:	00012994 	.word	0x00012994
    8544:	50000300 	.word	0x50000300
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    8548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    854c:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8550:	2200      	movs	r2, #0
    8552:	4611      	mov	r1, r2
    8554:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8558:	f7ff fdc6 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    855c:	e678      	b.n	8250 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    855e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8562:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    8566:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    856a:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    856e:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    8572:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    8576:	d144      	bne.n	8602 <pinctrl_configure_pins+0x45a>
    switch (port)
    8578:	ea5f 1359 	movs.w	r3, r9, lsr #5
    857c:	d01f      	beq.n	85be <pinctrl_configure_pins+0x416>
    857e:	b10b      	cbz	r3, 8584 <pinctrl_configure_pins+0x3dc>
            mask = P1_FEATURE_PINS_PRESENT;
    8580:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    8584:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8588:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    858a:	f012 0f01 	tst.w	r2, #1
    858e:	d019      	beq.n	85c4 <pinctrl_configure_pins+0x41c>
    *p_pin = pin_number & 0x1F;
    8590:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8594:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8598:	d023      	beq.n	85e2 <pinctrl_configure_pins+0x43a>
    859a:	bb2b      	cbnz	r3, 85e8 <pinctrl_configure_pins+0x440>
            NRFX_ASSERT(0);
    859c:	f8df 9300 	ldr.w	r9, [pc, #768]	; 88a0 <pinctrl_configure_pins+0x6f8>
    85a0:	f240 232e 	movw	r3, #558	; 0x22e
    85a4:	464a      	mov	r2, r9
    85a6:	49bf      	ldr	r1, [pc, #764]	; (88a4 <pinctrl_configure_pins+0x6fc>)
    85a8:	48bf      	ldr	r0, [pc, #764]	; (88a8 <pinctrl_configure_pins+0x700>)
    85aa:	f006 fe3a 	bl	f222 <assert_print>
    85ae:	f240 212e 	movw	r1, #558	; 0x22e
    85b2:	4648      	mov	r0, r9
    85b4:	f006 fe2e 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    85b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    85bc:	e015      	b.n	85ea <pinctrl_configure_pins+0x442>
            mask = P0_FEATURE_PINS_PRESENT;
    85be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    85c2:	e7df      	b.n	8584 <pinctrl_configure_pins+0x3dc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    85c4:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 88a0 <pinctrl_configure_pins+0x6f8>
    85c8:	f240 2329 	movw	r3, #553	; 0x229
    85cc:	4652      	mov	r2, sl
    85ce:	49b7      	ldr	r1, [pc, #732]	; (88ac <pinctrl_configure_pins+0x704>)
    85d0:	48b5      	ldr	r0, [pc, #724]	; (88a8 <pinctrl_configure_pins+0x700>)
    85d2:	f006 fe26 	bl	f222 <assert_print>
    85d6:	f240 2129 	movw	r1, #553	; 0x229
    85da:	4650      	mov	r0, sl
    85dc:	f006 fe1a 	bl	f214 <assert_post_action>
    85e0:	e7d6      	b.n	8590 <pinctrl_configure_pins+0x3e8>
        case 0: return NRF_P0;
    85e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    85e6:	e000      	b.n	85ea <pinctrl_configure_pins+0x442>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    85e8:	4ab1      	ldr	r2, [pc, #708]	; (88b0 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    85ea:	2301      	movs	r3, #1
    85ec:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    85f0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    85f4:	2201      	movs	r2, #1
    85f6:	4611      	mov	r1, r2
    85f8:	f855 0008 	ldr.w	r0, [r5, r8]
    85fc:	f7ff fd74 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8600:	e626      	b.n	8250 <pinctrl_configure_pins+0xa8>
    switch (port)
    8602:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8606:	d01f      	beq.n	8648 <pinctrl_configure_pins+0x4a0>
    8608:	b30b      	cbz	r3, 864e <pinctrl_configure_pins+0x4a6>
            mask = P1_FEATURE_PINS_PRESENT;
    860a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    860e:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8612:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8614:	f013 0f01 	tst.w	r3, #1
    8618:	d01b      	beq.n	8652 <pinctrl_configure_pins+0x4aa>
    *p_pin = pin_number & 0x1F;
    861a:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    861e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8622:	d025      	beq.n	8670 <pinctrl_configure_pins+0x4c8>
    8624:	bb3b      	cbnz	r3, 8676 <pinctrl_configure_pins+0x4ce>
            NRFX_ASSERT(0);
    8626:	f8df 9278 	ldr.w	r9, [pc, #632]	; 88a0 <pinctrl_configure_pins+0x6f8>
    862a:	f240 232e 	movw	r3, #558	; 0x22e
    862e:	464a      	mov	r2, r9
    8630:	499c      	ldr	r1, [pc, #624]	; (88a4 <pinctrl_configure_pins+0x6fc>)
    8632:	489d      	ldr	r0, [pc, #628]	; (88a8 <pinctrl_configure_pins+0x700>)
    8634:	f006 fdf5 	bl	f222 <assert_print>
    8638:	f240 212e 	movw	r1, #558	; 0x22e
    863c:	4648      	mov	r0, r9
    863e:	f006 fde9 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    8642:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8646:	e017      	b.n	8678 <pinctrl_configure_pins+0x4d0>
            mask = P0_FEATURE_PINS_PRESENT;
    8648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    864c:	e7df      	b.n	860e <pinctrl_configure_pins+0x466>
    switch (port)
    864e:	2300      	movs	r3, #0
    8650:	e7dd      	b.n	860e <pinctrl_configure_pins+0x466>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8652:	f8df a24c 	ldr.w	sl, [pc, #588]	; 88a0 <pinctrl_configure_pins+0x6f8>
    8656:	f240 2329 	movw	r3, #553	; 0x229
    865a:	4652      	mov	r2, sl
    865c:	4993      	ldr	r1, [pc, #588]	; (88ac <pinctrl_configure_pins+0x704>)
    865e:	4892      	ldr	r0, [pc, #584]	; (88a8 <pinctrl_configure_pins+0x700>)
    8660:	f006 fddf 	bl	f222 <assert_print>
    8664:	f240 2129 	movw	r1, #553	; 0x229
    8668:	4650      	mov	r0, sl
    866a:	f006 fdd3 	bl	f214 <assert_post_action>
    866e:	e7d4      	b.n	861a <pinctrl_configure_pins+0x472>
        case 0: return NRF_P0;
    8670:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8674:	e000      	b.n	8678 <pinctrl_configure_pins+0x4d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8676:	4a8e      	ldr	r2, [pc, #568]	; (88b0 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8678:	2301      	movs	r3, #1
    867a:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    867e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    8682:	e7b7      	b.n	85f4 <pinctrl_configure_pins+0x44c>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    8684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8688:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    868c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    8690:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    8694:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    8698:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    869c:	d144      	bne.n	8728 <pinctrl_configure_pins+0x580>
    switch (port)
    869e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    86a2:	d01f      	beq.n	86e4 <pinctrl_configure_pins+0x53c>
    86a4:	b10b      	cbz	r3, 86aa <pinctrl_configure_pins+0x502>
            mask = P1_FEATURE_PINS_PRESENT;
    86a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    86aa:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    86ae:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    86b0:	f012 0f01 	tst.w	r2, #1
    86b4:	d019      	beq.n	86ea <pinctrl_configure_pins+0x542>
    *p_pin = pin_number & 0x1F;
    86b6:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    86ba:	ea5f 1359 	movs.w	r3, r9, lsr #5
    86be:	d023      	beq.n	8708 <pinctrl_configure_pins+0x560>
    86c0:	bb2b      	cbnz	r3, 870e <pinctrl_configure_pins+0x566>
            NRFX_ASSERT(0);
    86c2:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 88a0 <pinctrl_configure_pins+0x6f8>
    86c6:	f240 232e 	movw	r3, #558	; 0x22e
    86ca:	464a      	mov	r2, r9
    86cc:	4975      	ldr	r1, [pc, #468]	; (88a4 <pinctrl_configure_pins+0x6fc>)
    86ce:	4876      	ldr	r0, [pc, #472]	; (88a8 <pinctrl_configure_pins+0x700>)
    86d0:	f006 fda7 	bl	f222 <assert_print>
    86d4:	f240 212e 	movw	r1, #558	; 0x22e
    86d8:	4648      	mov	r0, r9
    86da:	f006 fd9b 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    86de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    86e2:	e015      	b.n	8710 <pinctrl_configure_pins+0x568>
            mask = P0_FEATURE_PINS_PRESENT;
    86e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    86e8:	e7df      	b.n	86aa <pinctrl_configure_pins+0x502>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    86ea:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 88a0 <pinctrl_configure_pins+0x6f8>
    86ee:	f240 2329 	movw	r3, #553	; 0x229
    86f2:	4652      	mov	r2, sl
    86f4:	496d      	ldr	r1, [pc, #436]	; (88ac <pinctrl_configure_pins+0x704>)
    86f6:	486c      	ldr	r0, [pc, #432]	; (88a8 <pinctrl_configure_pins+0x700>)
    86f8:	f006 fd93 	bl	f222 <assert_print>
    86fc:	f240 2129 	movw	r1, #553	; 0x229
    8700:	4650      	mov	r0, sl
    8702:	f006 fd87 	bl	f214 <assert_post_action>
    8706:	e7d6      	b.n	86b6 <pinctrl_configure_pins+0x50e>
        case 0: return NRF_P0;
    8708:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    870c:	e000      	b.n	8710 <pinctrl_configure_pins+0x568>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    870e:	4a68      	ldr	r2, [pc, #416]	; (88b0 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    8710:	2301      	movs	r3, #1
    8712:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    8716:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    871a:	2201      	movs	r2, #1
    871c:	4611      	mov	r1, r2
    871e:	f855 0008 	ldr.w	r0, [r5, r8]
    8722:	f7ff fce1 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8726:	e593      	b.n	8250 <pinctrl_configure_pins+0xa8>
    switch (port)
    8728:	ea5f 1359 	movs.w	r3, r9, lsr #5
    872c:	d01f      	beq.n	876e <pinctrl_configure_pins+0x5c6>
    872e:	b30b      	cbz	r3, 8774 <pinctrl_configure_pins+0x5cc>
            mask = P1_FEATURE_PINS_PRESENT;
    8730:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8734:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8738:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    873a:	f013 0f01 	tst.w	r3, #1
    873e:	d01b      	beq.n	8778 <pinctrl_configure_pins+0x5d0>
    *p_pin = pin_number & 0x1F;
    8740:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8744:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8748:	d025      	beq.n	8796 <pinctrl_configure_pins+0x5ee>
    874a:	bb3b      	cbnz	r3, 879c <pinctrl_configure_pins+0x5f4>
            NRFX_ASSERT(0);
    874c:	f8df 9150 	ldr.w	r9, [pc, #336]	; 88a0 <pinctrl_configure_pins+0x6f8>
    8750:	f240 232e 	movw	r3, #558	; 0x22e
    8754:	464a      	mov	r2, r9
    8756:	4953      	ldr	r1, [pc, #332]	; (88a4 <pinctrl_configure_pins+0x6fc>)
    8758:	4853      	ldr	r0, [pc, #332]	; (88a8 <pinctrl_configure_pins+0x700>)
    875a:	f006 fd62 	bl	f222 <assert_print>
    875e:	f240 212e 	movw	r1, #558	; 0x22e
    8762:	4648      	mov	r0, r9
    8764:	f006 fd56 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    8768:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    876c:	e017      	b.n	879e <pinctrl_configure_pins+0x5f6>
            mask = P0_FEATURE_PINS_PRESENT;
    876e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8772:	e7df      	b.n	8734 <pinctrl_configure_pins+0x58c>
    switch (port)
    8774:	2300      	movs	r3, #0
    8776:	e7dd      	b.n	8734 <pinctrl_configure_pins+0x58c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8778:	f8df a124 	ldr.w	sl, [pc, #292]	; 88a0 <pinctrl_configure_pins+0x6f8>
    877c:	f240 2329 	movw	r3, #553	; 0x229
    8780:	4652      	mov	r2, sl
    8782:	494a      	ldr	r1, [pc, #296]	; (88ac <pinctrl_configure_pins+0x704>)
    8784:	4848      	ldr	r0, [pc, #288]	; (88a8 <pinctrl_configure_pins+0x700>)
    8786:	f006 fd4c 	bl	f222 <assert_print>
    878a:	f240 2129 	movw	r1, #553	; 0x229
    878e:	4650      	mov	r0, sl
    8790:	f006 fd40 	bl	f214 <assert_post_action>
    8794:	e7d4      	b.n	8740 <pinctrl_configure_pins+0x598>
        case 0: return NRF_P0;
    8796:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    879a:	e000      	b.n	879e <pinctrl_configure_pins+0x5f6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    879c:	4a44      	ldr	r2, [pc, #272]	; (88b0 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    879e:	2301      	movs	r3, #1
    87a0:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    87a4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    87a8:	e7b7      	b.n	871a <pinctrl_configure_pins+0x572>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    87aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    87ae:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    87b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    87b6:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    87ba:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    87be:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    87c2:	d144      	bne.n	884e <pinctrl_configure_pins+0x6a6>
    switch (port)
    87c4:	ea5f 1359 	movs.w	r3, r9, lsr #5
    87c8:	d01f      	beq.n	880a <pinctrl_configure_pins+0x662>
    87ca:	b10b      	cbz	r3, 87d0 <pinctrl_configure_pins+0x628>
            mask = P1_FEATURE_PINS_PRESENT;
    87cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    87d0:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    87d4:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    87d6:	f012 0f01 	tst.w	r2, #1
    87da:	d019      	beq.n	8810 <pinctrl_configure_pins+0x668>
    *p_pin = pin_number & 0x1F;
    87dc:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    87e0:	ea5f 1359 	movs.w	r3, r9, lsr #5
    87e4:	d023      	beq.n	882e <pinctrl_configure_pins+0x686>
    87e6:	bb2b      	cbnz	r3, 8834 <pinctrl_configure_pins+0x68c>
            NRFX_ASSERT(0);
    87e8:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 88a0 <pinctrl_configure_pins+0x6f8>
    87ec:	f240 232e 	movw	r3, #558	; 0x22e
    87f0:	464a      	mov	r2, r9
    87f2:	492c      	ldr	r1, [pc, #176]	; (88a4 <pinctrl_configure_pins+0x6fc>)
    87f4:	482c      	ldr	r0, [pc, #176]	; (88a8 <pinctrl_configure_pins+0x700>)
    87f6:	f006 fd14 	bl	f222 <assert_print>
    87fa:	f240 212e 	movw	r1, #558	; 0x22e
    87fe:	4648      	mov	r0, r9
    8800:	f006 fd08 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    8804:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8808:	e015      	b.n	8836 <pinctrl_configure_pins+0x68e>
            mask = P0_FEATURE_PINS_PRESENT;
    880a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    880e:	e7df      	b.n	87d0 <pinctrl_configure_pins+0x628>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8810:	f8df a08c 	ldr.w	sl, [pc, #140]	; 88a0 <pinctrl_configure_pins+0x6f8>
    8814:	f240 2329 	movw	r3, #553	; 0x229
    8818:	4652      	mov	r2, sl
    881a:	4924      	ldr	r1, [pc, #144]	; (88ac <pinctrl_configure_pins+0x704>)
    881c:	4822      	ldr	r0, [pc, #136]	; (88a8 <pinctrl_configure_pins+0x700>)
    881e:	f006 fd00 	bl	f222 <assert_print>
    8822:	f240 2129 	movw	r1, #553	; 0x229
    8826:	4650      	mov	r0, sl
    8828:	f006 fcf4 	bl	f214 <assert_post_action>
    882c:	e7d6      	b.n	87dc <pinctrl_configure_pins+0x634>
        case 0: return NRF_P0;
    882e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8832:	e000      	b.n	8836 <pinctrl_configure_pins+0x68e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8834:	4a1e      	ldr	r2, [pc, #120]	; (88b0 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    8836:	2301      	movs	r3, #1
    8838:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    883c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8840:	2201      	movs	r2, #1
    8842:	4611      	mov	r1, r2
    8844:	f855 0008 	ldr.w	r0, [r5, r8]
    8848:	f7ff fc4e 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    884c:	e500      	b.n	8250 <pinctrl_configure_pins+0xa8>
    switch (port)
    884e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8852:	d01f      	beq.n	8894 <pinctrl_configure_pins+0x6ec>
    8854:	b30b      	cbz	r3, 889a <pinctrl_configure_pins+0x6f2>
            mask = P1_FEATURE_PINS_PRESENT;
    8856:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    885a:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    885e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8860:	f013 0f01 	tst.w	r3, #1
    8864:	d026      	beq.n	88b4 <pinctrl_configure_pins+0x70c>
    *p_pin = pin_number & 0x1F;
    8866:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    886a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    886e:	d030      	beq.n	88d2 <pinctrl_configure_pins+0x72a>
    8870:	bb93      	cbnz	r3, 88d8 <pinctrl_configure_pins+0x730>
            NRFX_ASSERT(0);
    8872:	f8df 902c 	ldr.w	r9, [pc, #44]	; 88a0 <pinctrl_configure_pins+0x6f8>
    8876:	f240 232e 	movw	r3, #558	; 0x22e
    887a:	464a      	mov	r2, r9
    887c:	4909      	ldr	r1, [pc, #36]	; (88a4 <pinctrl_configure_pins+0x6fc>)
    887e:	480a      	ldr	r0, [pc, #40]	; (88a8 <pinctrl_configure_pins+0x700>)
    8880:	f006 fccf 	bl	f222 <assert_print>
    8884:	f240 212e 	movw	r1, #558	; 0x22e
    8888:	4648      	mov	r0, r9
    888a:	f006 fcc3 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    888e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8892:	e022      	b.n	88da <pinctrl_configure_pins+0x732>
            mask = P0_FEATURE_PINS_PRESENT;
    8894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8898:	e7df      	b.n	885a <pinctrl_configure_pins+0x6b2>
    switch (port)
    889a:	2300      	movs	r3, #0
    889c:	e7dd      	b.n	885a <pinctrl_configure_pins+0x6b2>
    889e:	bf00      	nop
    88a0:	00012960 	.word	0x00012960
    88a4:	00011d64 	.word	0x00011d64
    88a8:	000116a8 	.word	0x000116a8
    88ac:	00012994 	.word	0x00012994
    88b0:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    88b4:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8aa4 <pinctrl_configure_pins+0x8fc>
    88b8:	f240 2329 	movw	r3, #553	; 0x229
    88bc:	4652      	mov	r2, sl
    88be:	497a      	ldr	r1, [pc, #488]	; (8aa8 <pinctrl_configure_pins+0x900>)
    88c0:	487a      	ldr	r0, [pc, #488]	; (8aac <pinctrl_configure_pins+0x904>)
    88c2:	f006 fcae 	bl	f222 <assert_print>
    88c6:	f240 2129 	movw	r1, #553	; 0x229
    88ca:	4650      	mov	r0, sl
    88cc:	f006 fca2 	bl	f214 <assert_post_action>
    88d0:	e7c9      	b.n	8866 <pinctrl_configure_pins+0x6be>
        case 0: return NRF_P0;
    88d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    88d6:	e000      	b.n	88da <pinctrl_configure_pins+0x732>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    88d8:	4a75      	ldr	r2, [pc, #468]	; (8ab0 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    88da:	2301      	movs	r3, #1
    88dc:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    88e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    88e4:	e7ac      	b.n	8840 <pinctrl_configure_pins+0x698>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    88e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    88ea:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    88ee:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    88f2:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    88f6:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    88fa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    88fe:	d144      	bne.n	898a <pinctrl_configure_pins+0x7e2>
    switch (port)
    8900:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8904:	d01f      	beq.n	8946 <pinctrl_configure_pins+0x79e>
    8906:	b10b      	cbz	r3, 890c <pinctrl_configure_pins+0x764>
            mask = P1_FEATURE_PINS_PRESENT;
    8908:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    890c:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8910:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8912:	f012 0f01 	tst.w	r2, #1
    8916:	d019      	beq.n	894c <pinctrl_configure_pins+0x7a4>
    *p_pin = pin_number & 0x1F;
    8918:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    891c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8920:	d023      	beq.n	896a <pinctrl_configure_pins+0x7c2>
    8922:	bb2b      	cbnz	r3, 8970 <pinctrl_configure_pins+0x7c8>
            NRFX_ASSERT(0);
    8924:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8aa4 <pinctrl_configure_pins+0x8fc>
    8928:	f240 232e 	movw	r3, #558	; 0x22e
    892c:	464a      	mov	r2, r9
    892e:	4961      	ldr	r1, [pc, #388]	; (8ab4 <pinctrl_configure_pins+0x90c>)
    8930:	485e      	ldr	r0, [pc, #376]	; (8aac <pinctrl_configure_pins+0x904>)
    8932:	f006 fc76 	bl	f222 <assert_print>
    8936:	f240 212e 	movw	r1, #558	; 0x22e
    893a:	4648      	mov	r0, r9
    893c:	f006 fc6a 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    8940:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8944:	e015      	b.n	8972 <pinctrl_configure_pins+0x7ca>
            mask = P0_FEATURE_PINS_PRESENT;
    8946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    894a:	e7df      	b.n	890c <pinctrl_configure_pins+0x764>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    894c:	f8df a154 	ldr.w	sl, [pc, #340]	; 8aa4 <pinctrl_configure_pins+0x8fc>
    8950:	f240 2329 	movw	r3, #553	; 0x229
    8954:	4652      	mov	r2, sl
    8956:	4954      	ldr	r1, [pc, #336]	; (8aa8 <pinctrl_configure_pins+0x900>)
    8958:	4854      	ldr	r0, [pc, #336]	; (8aac <pinctrl_configure_pins+0x904>)
    895a:	f006 fc62 	bl	f222 <assert_print>
    895e:	f240 2129 	movw	r1, #553	; 0x229
    8962:	4650      	mov	r0, sl
    8964:	f006 fc56 	bl	f214 <assert_post_action>
    8968:	e7d6      	b.n	8918 <pinctrl_configure_pins+0x770>
        case 0: return NRF_P0;
    896a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    896e:	e000      	b.n	8972 <pinctrl_configure_pins+0x7ca>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8970:	4a4f      	ldr	r2, [pc, #316]	; (8ab0 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    8972:	2301      	movs	r3, #1
    8974:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    8978:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    897c:	2201      	movs	r2, #1
    897e:	4611      	mov	r1, r2
    8980:	f855 0008 	ldr.w	r0, [r5, r8]
    8984:	f7ff fbb0 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8988:	e462      	b.n	8250 <pinctrl_configure_pins+0xa8>
    switch (port)
    898a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    898e:	d01f      	beq.n	89d0 <pinctrl_configure_pins+0x828>
    8990:	b30b      	cbz	r3, 89d6 <pinctrl_configure_pins+0x82e>
            mask = P1_FEATURE_PINS_PRESENT;
    8992:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8996:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    899a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    899c:	f013 0f01 	tst.w	r3, #1
    89a0:	d01b      	beq.n	89da <pinctrl_configure_pins+0x832>
    *p_pin = pin_number & 0x1F;
    89a2:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    89a6:	ea5f 1359 	movs.w	r3, r9, lsr #5
    89aa:	d025      	beq.n	89f8 <pinctrl_configure_pins+0x850>
    89ac:	bb3b      	cbnz	r3, 89fe <pinctrl_configure_pins+0x856>
            NRFX_ASSERT(0);
    89ae:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8aa4 <pinctrl_configure_pins+0x8fc>
    89b2:	f240 232e 	movw	r3, #558	; 0x22e
    89b6:	464a      	mov	r2, r9
    89b8:	493e      	ldr	r1, [pc, #248]	; (8ab4 <pinctrl_configure_pins+0x90c>)
    89ba:	483c      	ldr	r0, [pc, #240]	; (8aac <pinctrl_configure_pins+0x904>)
    89bc:	f006 fc31 	bl	f222 <assert_print>
    89c0:	f240 212e 	movw	r1, #558	; 0x22e
    89c4:	4648      	mov	r0, r9
    89c6:	f006 fc25 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    89ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    89ce:	e017      	b.n	8a00 <pinctrl_configure_pins+0x858>
            mask = P0_FEATURE_PINS_PRESENT;
    89d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    89d4:	e7df      	b.n	8996 <pinctrl_configure_pins+0x7ee>
    switch (port)
    89d6:	2300      	movs	r3, #0
    89d8:	e7dd      	b.n	8996 <pinctrl_configure_pins+0x7ee>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    89da:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8aa4 <pinctrl_configure_pins+0x8fc>
    89de:	f240 2329 	movw	r3, #553	; 0x229
    89e2:	4652      	mov	r2, sl
    89e4:	4930      	ldr	r1, [pc, #192]	; (8aa8 <pinctrl_configure_pins+0x900>)
    89e6:	4831      	ldr	r0, [pc, #196]	; (8aac <pinctrl_configure_pins+0x904>)
    89e8:	f006 fc1b 	bl	f222 <assert_print>
    89ec:	f240 2129 	movw	r1, #553	; 0x229
    89f0:	4650      	mov	r0, sl
    89f2:	f006 fc0f 	bl	f214 <assert_post_action>
    89f6:	e7d4      	b.n	89a2 <pinctrl_configure_pins+0x7fa>
        case 0: return NRF_P0;
    89f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    89fc:	e000      	b.n	8a00 <pinctrl_configure_pins+0x858>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    89fe:	4a2c      	ldr	r2, [pc, #176]	; (8ab0 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8a00:	2301      	movs	r3, #1
    8a02:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    8a06:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    8a0a:	e7b7      	b.n	897c <pinctrl_configure_pins+0x7d4>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    8a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8a10:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8a14:	2201      	movs	r2, #1
    8a16:	2100      	movs	r1, #0
    8a18:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8a1c:	f7ff fb64 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8a20:	e416      	b.n	8250 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    8a22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8a26:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8a2a:	2201      	movs	r2, #1
    8a2c:	2100      	movs	r1, #0
    8a2e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8a32:	f7ff fb59 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8a36:	e40b      	b.n	8250 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    8a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8a3c:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8a40:	2201      	movs	r2, #1
    8a42:	2100      	movs	r1, #0
    8a44:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8a48:	f7ff fb4e 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8a4c:	e400      	b.n	8250 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    8a4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8a52:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8a56:	2201      	movs	r2, #1
    8a58:	2100      	movs	r1, #0
    8a5a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8a5e:	f7ff fb43 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8a62:	f7ff bbf5 	b.w	8250 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    8a66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8a6a:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8a6e:	2201      	movs	r2, #1
    8a70:	2100      	movs	r1, #0
    8a72:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8a76:	f7ff fb37 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8a7a:	f7ff bbe9 	b.w	8250 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    8a7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8a82:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8a86:	2201      	movs	r2, #1
    8a88:	2100      	movs	r1, #0
    8a8a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8a8e:	f7ff fb2b 	bl	80e8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8a92:	f7ff bbdd 	b.w	8250 <pinctrl_configure_pins+0xa8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    8a96:	2000      	movs	r0, #0
    8a98:	e001      	b.n	8a9e <pinctrl_configure_pins+0x8f6>
		switch (NRF_GET_FUN(pins[i])) {
    8a9a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    8a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8aa2:	bf00      	nop
    8aa4:	00012960 	.word	0x00012960
    8aa8:	00012994 	.word	0x00012994
    8aac:	000116a8 	.word	0x000116a8
    8ab0:	50000300 	.word	0x50000300
    8ab4:	00011d64 	.word	0x00011d64

00008ab8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    8ab8:	b510      	push	{r4, lr}
    8aba:	b084      	sub	sp, #16
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    8abc:	f7fc fa72 	bl	4fa4 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    8ac0:	4b06      	ldr	r3, [pc, #24]	; (8adc <k_sys_fatal_error_handler+0x24>)
    8ac2:	9302      	str	r3, [sp, #8]
    8ac4:	2400      	movs	r4, #0
    8ac6:	9401      	str	r4, [sp, #4]
    8ac8:	9400      	str	r4, [sp, #0]
    8aca:	4623      	mov	r3, r4
    8acc:	2201      	movs	r2, #1
    8ace:	4904      	ldr	r1, [pc, #16]	; (8ae0 <k_sys_fatal_error_handler+0x28>)
    8ad0:	4620      	mov	r0, r4
    8ad2:	f007 fc0d 	bl	102f0 <z_log_msg2_runtime_create>
		sys_arch_reboot(0);
    8ad6:	4620      	mov	r0, r4
    8ad8:	f7fe f986 	bl	6de8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    8adc:	00012b30 	.word	0x00012b30
    8ae0:	00010fe4 	.word	0x00010fe4

00008ae4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8ae4:	4b02      	ldr	r3, [pc, #8]	; (8af0 <nvmc_wait+0xc>)
    8ae6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8aea:	2b00      	cmp	r3, #0
    8aec:	d0fa      	beq.n	8ae4 <nvmc_wait>
}
    8aee:	4770      	bx	lr
    8af0:	4001e000 	.word	0x4001e000

00008af4 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    8af4:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    8af6:	4b03      	ldr	r3, [pc, #12]	; (8b04 <nvmc_config+0x10>)
    8af8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    8afc:	f7ff fff2 	bl	8ae4 <nvmc_wait>
}
    8b00:	bd08      	pop	{r3, pc}
    8b02:	bf00      	nop
    8b04:	4001e000 	.word	0x4001e000

00008b08 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    8b08:	4b01      	ldr	r3, [pc, #4]	; (8b10 <SystemCoreClockUpdate+0x8>)
    8b0a:	4a02      	ldr	r2, [pc, #8]	; (8b14 <SystemCoreClockUpdate+0xc>)
    8b0c:	601a      	str	r2, [r3, #0]
}
    8b0e:	4770      	bx	lr
    8b10:	20004078 	.word	0x20004078
    8b14:	03d09000 	.word	0x03d09000

00008b18 <SystemInit>:

void SystemInit(void)
{
    8b18:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    8b1a:	f007 fc06 	bl	1032a <nrf52_errata_36>
    8b1e:	b140      	cbz	r0, 8b32 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    8b20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8b24:	2200      	movs	r2, #0
    8b26:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    8b2a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    8b2e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    8b32:	f007 fc04 	bl	1033e <nrf52_errata_66>
    8b36:	2800      	cmp	r0, #0
    8b38:	d046      	beq.n	8bc8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    8b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8b3e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    8b42:	4b59      	ldr	r3, [pc, #356]	; (8ca8 <SystemInit+0x190>)
    8b44:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    8b48:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    8b4c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    8b50:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    8b54:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8b58:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    8b5c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    8b60:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    8b64:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8b68:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8b6c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    8b70:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    8b74:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8b78:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    8b7c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    8b80:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    8b84:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8b88:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    8b8c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    8b90:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8b94:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8b98:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8b9c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    8ba0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8ba4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8ba8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8bac:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    8bb0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8bb4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8bb8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8bbc:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    8bc0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8bc4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    8bc8:	f007 fbc3 	bl	10352 <nrf52_errata_98>
    8bcc:	b118      	cbz	r0, 8bd6 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    8bce:	4b37      	ldr	r3, [pc, #220]	; (8cac <SystemInit+0x194>)
    8bd0:	4a37      	ldr	r2, [pc, #220]	; (8cb0 <SystemInit+0x198>)
    8bd2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    8bd6:	f007 fbcf 	bl	10378 <nrf52_errata_103>
    8bda:	b118      	cbz	r0, 8be4 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    8bdc:	4b35      	ldr	r3, [pc, #212]	; (8cb4 <SystemInit+0x19c>)
    8bde:	22fb      	movs	r2, #251	; 0xfb
    8be0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    8be4:	f007 fbdb 	bl	1039e <nrf52_errata_115>
    8be8:	b170      	cbz	r0, 8c08 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    8bea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    8bee:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    8bf2:	f023 030f 	bic.w	r3, r3, #15
    8bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8bfa:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    8bfe:	f002 020f 	and.w	r2, r2, #15
    8c02:	4313      	orrs	r3, r2
    8c04:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    8c08:	f007 fbdc 	bl	103c4 <nrf52_errata_120>
    8c0c:	b120      	cbz	r0, 8c18 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    8c0e:	4b2a      	ldr	r3, [pc, #168]	; (8cb8 <SystemInit+0x1a0>)
    8c10:	f44f 7200 	mov.w	r2, #512	; 0x200
    8c14:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    8c18:	f007 fbe7 	bl	103ea <nrf52_errata_136>
    8c1c:	b160      	cbz	r0, 8c38 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    8c1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8c22:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8c26:	f013 0f01 	tst.w	r3, #1
    8c2a:	d005      	beq.n	8c38 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    8c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8c30:	f06f 0201 	mvn.w	r2, #1
    8c34:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    8c38:	f007 fbe1 	bl	103fe <nrf52_configuration_249>
    8c3c:	b138      	cbz	r0, 8c4e <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    8c3e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8c42:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    8c46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8c4a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8c4e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8c52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    8c56:	2b00      	cmp	r3, #0
    8c58:	db08      	blt.n	8c6c <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    8c5a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8c5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8c62:	2b00      	cmp	r3, #0
    8c64:	db02      	blt.n	8c6c <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    8c66:	f7ff ff4f 	bl	8b08 <SystemCoreClockUpdate>
}
    8c6a:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    8c6c:	2001      	movs	r0, #1
    8c6e:	f7ff ff41 	bl	8af4 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    8c72:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    8c76:	2512      	movs	r5, #18
    8c78:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    8c7c:	f7ff ff32 	bl	8ae4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    8c80:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    8c84:	f7ff ff2e 	bl	8ae4 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    8c88:	2000      	movs	r0, #0
    8c8a:	f7ff ff33 	bl	8af4 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    8c8e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    8c92:	490a      	ldr	r1, [pc, #40]	; (8cbc <SystemInit+0x1a4>)
    8c94:	68ca      	ldr	r2, [r1, #12]
    8c96:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8c9a:	4b09      	ldr	r3, [pc, #36]	; (8cc0 <SystemInit+0x1a8>)
    8c9c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8c9e:	60cb      	str	r3, [r1, #12]
    8ca0:	f3bf 8f4f 	dsb	sy
    __NOP();
    8ca4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8ca6:	e7fd      	b.n	8ca4 <SystemInit+0x18c>
    8ca8:	4000c000 	.word	0x4000c000
    8cac:	40005000 	.word	0x40005000
    8cb0:	00038148 	.word	0x00038148
    8cb4:	4000f000 	.word	0x4000f000
    8cb8:	40029000 	.word	0x40029000
    8cbc:	e000ed00 	.word	0xe000ed00
    8cc0:	05fa0004 	.word	0x05fa0004

00008cc4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    8cc4:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    8cc6:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    8cc8:	fab4 f384 	clz	r3, r4
    8ccc:	f1c3 031f 	rsb	r3, r3, #31
    8cd0:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    8cd4:	2b00      	cmp	r3, #0
    8cd6:	db16      	blt.n	8d06 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    8cd8:	2201      	movs	r2, #1
    8cda:	fa02 f303 	lsl.w	r3, r2, r3
    8cde:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8ce2:	f3bf 8f5b 	dmb	ish
    8ce6:	e850 2f00 	ldrex	r2, [r0]
    8cea:	42a2      	cmp	r2, r4
    8cec:	d104      	bne.n	8cf8 <nrfx_flag32_alloc+0x34>
    8cee:	e840 3e00 	strex	lr, r3, [r0]
    8cf2:	f1be 0f00 	cmp.w	lr, #0
    8cf6:	d1f6      	bne.n	8ce6 <nrfx_flag32_alloc+0x22>
    8cf8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    8cfc:	d1e3      	bne.n	8cc6 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    8cfe:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    8d02:	4802      	ldr	r0, [pc, #8]	; (8d0c <nrfx_flag32_alloc+0x48>)
}
    8d04:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    8d06:	4802      	ldr	r0, [pc, #8]	; (8d10 <nrfx_flag32_alloc+0x4c>)
    8d08:	e7fc      	b.n	8d04 <nrfx_flag32_alloc+0x40>
    8d0a:	bf00      	nop
    8d0c:	0bad0000 	.word	0x0bad0000
    8d10:	0bad0002 	.word	0x0bad0002

00008d14 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    8d14:	6803      	ldr	r3, [r0, #0]
    8d16:	40cb      	lsrs	r3, r1
    8d18:	f013 0f01 	tst.w	r3, #1
    8d1c:	d115      	bne.n	8d4a <nrfx_flag32_free+0x36>
{
    8d1e:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    8d20:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    8d22:	2301      	movs	r3, #1
    8d24:	408b      	lsls	r3, r1
    8d26:	4313      	orrs	r3, r2
    8d28:	f3bf 8f5b 	dmb	ish
    8d2c:	e850 cf00 	ldrex	ip, [r0]
    8d30:	4594      	cmp	ip, r2
    8d32:	d104      	bne.n	8d3e <nrfx_flag32_free+0x2a>
    8d34:	e840 3e00 	strex	lr, r3, [r0]
    8d38:	f1be 0f00 	cmp.w	lr, #0
    8d3c:	d1f6      	bne.n	8d2c <nrfx_flag32_free+0x18>
    8d3e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    8d42:	d1ed      	bne.n	8d20 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    8d44:	4802      	ldr	r0, [pc, #8]	; (8d50 <nrfx_flag32_free+0x3c>)
}
    8d46:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    8d4a:	4802      	ldr	r0, [pc, #8]	; (8d54 <nrfx_flag32_free+0x40>)
}
    8d4c:	4770      	bx	lr
    8d4e:	bf00      	nop
    8d50:	0bad0000 	.word	0x0bad0000
    8d54:	0bad0004 	.word	0x0bad0004

00008d58 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    8d58:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d5a:	b083      	sub	sp, #12
    switch (domain)
    8d5c:	4605      	mov	r5, r0
    8d5e:	b168      	cbz	r0, 8d7c <clock_stop+0x24>
    8d60:	2801      	cmp	r0, #1
    8d62:	d020      	beq.n	8da6 <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    8d64:	4c3d      	ldr	r4, [pc, #244]	; (8e5c <clock_stop+0x104>)
    8d66:	23d8      	movs	r3, #216	; 0xd8
    8d68:	4622      	mov	r2, r4
    8d6a:	493d      	ldr	r1, [pc, #244]	; (8e60 <clock_stop+0x108>)
    8d6c:	483d      	ldr	r0, [pc, #244]	; (8e64 <clock_stop+0x10c>)
    8d6e:	f006 fa58 	bl	f222 <assert_print>
    8d72:	21d8      	movs	r1, #216	; 0xd8
    8d74:	4620      	mov	r0, r4
    8d76:	f006 fa4d 	bl	f214 <assert_post_action>
            return;
    8d7a:	e068      	b.n	8e4e <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    8d7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8d80:	2202      	movs	r2, #2
    8d82:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8d86:	2200      	movs	r2, #0
    8d88:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    8d8c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8d90:	2201      	movs	r2, #1
    8d92:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    8d94:	2301      	movs	r3, #1
    8d96:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    8d9a:	429d      	cmp	r5, r3
    8d9c:	d00f      	beq.n	8dbe <clock_stop+0x66>
    8d9e:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    8da0:	f242 7410 	movw	r4, #10000	; 0x2710
    8da4:	e029      	b.n	8dfa <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    8da6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8daa:	2201      	movs	r2, #1
    8dac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8db0:	2100      	movs	r1, #0
    8db2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    8db6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8dba:	605a      	str	r2, [r3, #4]
}
    8dbc:	e7ea      	b.n	8d94 <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    8dbe:	f10d 0607 	add.w	r6, sp, #7
    8dc2:	e7ed      	b.n	8da0 <clock_stop+0x48>
            if (p_clk_src != NULL)
    8dc4:	b136      	cbz	r6, 8dd4 <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8dc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8dca:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    8dce:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    8dd2:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8dd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8dd8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    8ddc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8de0:	d12f      	bne.n	8e42 <clock_stop+0xea>
    return false;
    8de2:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    8de4:	b38b      	cbz	r3, 8e4a <clock_stop+0xf2>
    8de6:	b11e      	cbz	r6, 8df0 <clock_stop+0x98>
    8de8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8dec:	2b01      	cmp	r3, #1
    8dee:	d12c      	bne.n	8e4a <clock_stop+0xf2>
    8df0:	2001      	movs	r0, #1
    8df2:	f007 fb17 	bl	10424 <nrfx_busy_wait>
    8df6:	3c01      	subs	r4, #1
    8df8:	d027      	beq.n	8e4a <clock_stop+0xf2>
    switch (domain)
    8dfa:	2d00      	cmp	r5, #0
    8dfc:	d0e2      	beq.n	8dc4 <clock_stop+0x6c>
    8dfe:	2d01      	cmp	r5, #1
    8e00:	d00e      	beq.n	8e20 <clock_stop+0xc8>
            NRFX_ASSERT(0);
    8e02:	4f19      	ldr	r7, [pc, #100]	; (8e68 <clock_stop+0x110>)
    8e04:	f44f 734f 	mov.w	r3, #828	; 0x33c
    8e08:	463a      	mov	r2, r7
    8e0a:	4915      	ldr	r1, [pc, #84]	; (8e60 <clock_stop+0x108>)
    8e0c:	4815      	ldr	r0, [pc, #84]	; (8e64 <clock_stop+0x10c>)
    8e0e:	f006 fa08 	bl	f222 <assert_print>
    8e12:	f44f 714f 	mov.w	r1, #828	; 0x33c
    8e16:	4638      	mov	r0, r7
    8e18:	f006 f9fc 	bl	f214 <assert_post_action>
            return false;
    8e1c:	2300      	movs	r3, #0
    8e1e:	e7e1      	b.n	8de4 <clock_stop+0x8c>
            if (p_clk_src != NULL)
    8e20:	b136      	cbz	r6, 8e30 <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    8e22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8e26:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    8e2a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    8e2e:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8e34:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    8e38:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8e3c:	d103      	bne.n	8e46 <clock_stop+0xee>
    return false;
    8e3e:	2300      	movs	r3, #0
    8e40:	e7d0      	b.n	8de4 <clock_stop+0x8c>
                return true;
    8e42:	2301      	movs	r3, #1
    8e44:	e7ce      	b.n	8de4 <clock_stop+0x8c>
                return true;
    8e46:	2301      	movs	r3, #1
    8e48:	e7cc      	b.n	8de4 <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    8e4a:	2d01      	cmp	r5, #1
    8e4c:	d001      	beq.n	8e52 <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    8e4e:	b003      	add	sp, #12
    8e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    8e52:	4b06      	ldr	r3, [pc, #24]	; (8e6c <clock_stop+0x114>)
    8e54:	2200      	movs	r2, #0
    8e56:	715a      	strb	r2, [r3, #5]
    8e58:	e7f9      	b.n	8e4e <clock_stop+0xf6>
    8e5a:	bf00      	nop
    8e5c:	00012b50 	.word	0x00012b50
    8e60:	00011d64 	.word	0x00011d64
    8e64:	000116a8 	.word	0x000116a8
    8e68:	00012b90 	.word	0x00012b90
    8e6c:	2000d020 	.word	0x2000d020

00008e70 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    8e70:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    8e72:	4604      	mov	r4, r0
    8e74:	b150      	cbz	r0, 8e8c <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    8e76:	4b0d      	ldr	r3, [pc, #52]	; (8eac <nrfx_clock_init+0x3c>)
    8e78:	791b      	ldrb	r3, [r3, #4]
    8e7a:	b9ab      	cbnz	r3, 8ea8 <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    8e7c:	4b0b      	ldr	r3, [pc, #44]	; (8eac <nrfx_clock_init+0x3c>)
    8e7e:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    8e80:	2201      	movs	r2, #1
    8e82:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    8e84:	2200      	movs	r2, #0
    8e86:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    8e88:	4809      	ldr	r0, [pc, #36]	; (8eb0 <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    8e8a:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    8e8c:	4d09      	ldr	r5, [pc, #36]	; (8eb4 <nrfx_clock_init+0x44>)
    8e8e:	f240 1315 	movw	r3, #277	; 0x115
    8e92:	462a      	mov	r2, r5
    8e94:	4908      	ldr	r1, [pc, #32]	; (8eb8 <nrfx_clock_init+0x48>)
    8e96:	4809      	ldr	r0, [pc, #36]	; (8ebc <nrfx_clock_init+0x4c>)
    8e98:	f006 f9c3 	bl	f222 <assert_print>
    8e9c:	f240 1115 	movw	r1, #277	; 0x115
    8ea0:	4628      	mov	r0, r5
    8ea2:	f006 f9b7 	bl	f214 <assert_post_action>
    8ea6:	e7e6      	b.n	8e76 <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    8ea8:	4805      	ldr	r0, [pc, #20]	; (8ec0 <nrfx_clock_init+0x50>)
    return err_code;
    8eaa:	e7ee      	b.n	8e8a <nrfx_clock_init+0x1a>
    8eac:	2000d020 	.word	0x2000d020
    8eb0:	0bad0000 	.word	0x0bad0000
    8eb4:	00012b50 	.word	0x00012b50
    8eb8:	00012bc4 	.word	0x00012bc4
    8ebc:	000116a8 	.word	0x000116a8
    8ec0:	0bad000c 	.word	0x0bad000c

00008ec4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    8ec4:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8ec6:	4b0f      	ldr	r3, [pc, #60]	; (8f04 <nrfx_clock_enable+0x40>)
    8ec8:	791b      	ldrb	r3, [r3, #4]
    8eca:	b153      	cbz	r3, 8ee2 <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8ecc:	2000      	movs	r0, #0
    8ece:	f7fc ffa9 	bl	5e24 <arch_irq_is_enabled>
    8ed2:	b1a0      	cbz	r0, 8efe <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    8ed4:	f007 faaa 	bl	1042c <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8edc:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    8ee0:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8ee2:	4c09      	ldr	r4, [pc, #36]	; (8f08 <nrfx_clock_enable+0x44>)
    8ee4:	f44f 7397 	mov.w	r3, #302	; 0x12e
    8ee8:	4622      	mov	r2, r4
    8eea:	4908      	ldr	r1, [pc, #32]	; (8f0c <nrfx_clock_enable+0x48>)
    8eec:	4808      	ldr	r0, [pc, #32]	; (8f10 <nrfx_clock_enable+0x4c>)
    8eee:	f006 f998 	bl	f222 <assert_print>
    8ef2:	f44f 7197 	mov.w	r1, #302	; 0x12e
    8ef6:	4620      	mov	r0, r4
    8ef8:	f006 f98c 	bl	f214 <assert_post_action>
    8efc:	e7e6      	b.n	8ecc <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8efe:	f7fc ff83 	bl	5e08 <arch_irq_enable>
    8f02:	e7e7      	b.n	8ed4 <nrfx_clock_enable+0x10>
    8f04:	2000d020 	.word	0x2000d020
    8f08:	00012b50 	.word	0x00012b50
    8f0c:	00012bd4 	.word	0x00012bd4
    8f10:	000116a8 	.word	0x000116a8

00008f14 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    8f14:	b530      	push	{r4, r5, lr}
    8f16:	b083      	sub	sp, #12
    8f18:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8f1a:	4b34      	ldr	r3, [pc, #208]	; (8fec <nrfx_clock_start+0xd8>)
    8f1c:	791b      	ldrb	r3, [r3, #4]
    8f1e:	b183      	cbz	r3, 8f42 <nrfx_clock_start+0x2e>
    switch (domain)
    8f20:	b1ec      	cbz	r4, 8f5e <nrfx_clock_start+0x4a>
    8f22:	2c01      	cmp	r4, #1
    8f24:	d055      	beq.n	8fd2 <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    8f26:	4c32      	ldr	r4, [pc, #200]	; (8ff0 <nrfx_clock_start+0xdc>)
    8f28:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    8f2c:	4622      	mov	r2, r4
    8f2e:	4931      	ldr	r1, [pc, #196]	; (8ff4 <nrfx_clock_start+0xe0>)
    8f30:	4831      	ldr	r0, [pc, #196]	; (8ff8 <nrfx_clock_start+0xe4>)
    8f32:	f006 f976 	bl	f222 <assert_print>
    8f36:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    8f3a:	4620      	mov	r0, r4
    8f3c:	f006 f96a 	bl	f214 <assert_post_action>
            break;
    }
}
    8f40:	e052      	b.n	8fe8 <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8f42:	4d2b      	ldr	r5, [pc, #172]	; (8ff0 <nrfx_clock_start+0xdc>)
    8f44:	f44f 73b4 	mov.w	r3, #360	; 0x168
    8f48:	462a      	mov	r2, r5
    8f4a:	492c      	ldr	r1, [pc, #176]	; (8ffc <nrfx_clock_start+0xe8>)
    8f4c:	482a      	ldr	r0, [pc, #168]	; (8ff8 <nrfx_clock_start+0xe4>)
    8f4e:	f006 f968 	bl	f222 <assert_print>
    8f52:	f44f 71b4 	mov.w	r1, #360	; 0x168
    8f56:	4628      	mov	r0, r5
    8f58:	f006 f95c 	bl	f214 <assert_post_action>
    8f5c:	e7e0      	b.n	8f20 <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8f5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8f62:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    8f66:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    8f6a:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8f6c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    8f70:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8f74:	d117      	bne.n	8fa6 <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    8f76:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    8f7a:	f013 0f01 	tst.w	r3, #1
    8f7e:	d116      	bne.n	8fae <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    8f80:	f007 fa54 	bl	1042c <clock_initial_lfclksrc_get>
    8f84:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    8f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f8a:	9a01      	ldr	r2, [sp, #4]
    8f8c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8f90:	2200      	movs	r2, #0
    8f92:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    8f96:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    8f9a:	2202      	movs	r2, #2
    8f9c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8fa0:	2201      	movs	r2, #1
    8fa2:	609a      	str	r2, [r3, #8]
}
    8fa4:	e020      	b.n	8fe8 <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    8fa6:	a801      	add	r0, sp, #4
    8fa8:	f007 fa42 	bl	10430 <clock_lfclksrc_tweak>
    8fac:	e7eb      	b.n	8f86 <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    8fae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8fb2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    8fb6:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    8fba:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    8fbc:	a801      	add	r0, sp, #4
    8fbe:	f007 fa37 	bl	10430 <clock_lfclksrc_tweak>
    8fc2:	2800      	cmp	r0, #0
    8fc4:	d0df      	beq.n	8f86 <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    8fc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8fca:	2202      	movs	r2, #2
    8fcc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    8fd0:	e00a      	b.n	8fe8 <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8fd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8fd6:	2200      	movs	r2, #0
    8fd8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8fdc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    8fe0:	2201      	movs	r2, #1
    8fe2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8fe6:	601a      	str	r2, [r3, #0]
}
    8fe8:	b003      	add	sp, #12
    8fea:	bd30      	pop	{r4, r5, pc}
    8fec:	2000d020 	.word	0x2000d020
    8ff0:	00012b50 	.word	0x00012b50
    8ff4:	00011d64 	.word	0x00011d64
    8ff8:	000116a8 	.word	0x000116a8
    8ffc:	00012bd4 	.word	0x00012bd4

00009000 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    9000:	b538      	push	{r3, r4, r5, lr}
    9002:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    9004:	4b0a      	ldr	r3, [pc, #40]	; (9030 <nrfx_clock_stop+0x30>)
    9006:	791b      	ldrb	r3, [r3, #4]
    9008:	b11b      	cbz	r3, 9012 <nrfx_clock_stop+0x12>
    clock_stop(domain);
    900a:	4620      	mov	r0, r4
    900c:	f7ff fea4 	bl	8d58 <clock_stop>
}
    9010:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    9012:	4d08      	ldr	r5, [pc, #32]	; (9034 <nrfx_clock_stop+0x34>)
    9014:	f240 13ad 	movw	r3, #429	; 0x1ad
    9018:	462a      	mov	r2, r5
    901a:	4907      	ldr	r1, [pc, #28]	; (9038 <nrfx_clock_stop+0x38>)
    901c:	4807      	ldr	r0, [pc, #28]	; (903c <nrfx_clock_stop+0x3c>)
    901e:	f006 f900 	bl	f222 <assert_print>
    9022:	f240 11ad 	movw	r1, #429	; 0x1ad
    9026:	4628      	mov	r0, r5
    9028:	f006 f8f4 	bl	f214 <assert_post_action>
    902c:	e7ed      	b.n	900a <nrfx_clock_stop+0xa>
    902e:	bf00      	nop
    9030:	2000d020 	.word	0x2000d020
    9034:	00012b50 	.word	0x00012b50
    9038:	00012bd4 	.word	0x00012bd4
    903c:	000116a8 	.word	0x000116a8

00009040 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    9040:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9042:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9046:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    904a:	b18b      	cbz	r3, 9070 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    904c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9050:	2200      	movs	r2, #0
    9052:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    9056:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    905a:	2201      	movs	r2, #1
    905c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    9060:	4b15      	ldr	r3, [pc, #84]	; (90b8 <nrfx_power_clock_irq_handler+0x78>)
    9062:	795b      	ldrb	r3, [r3, #5]
    9064:	b923      	cbnz	r3, 9070 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    9066:	4b14      	ldr	r3, [pc, #80]	; (90b8 <nrfx_power_clock_irq_handler+0x78>)
    9068:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    906a:	681b      	ldr	r3, [r3, #0]
    906c:	2000      	movs	r0, #0
    906e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9070:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9074:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    9078:	b19b      	cbz	r3, 90a2 <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    907a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    907e:	2200      	movs	r2, #0
    9080:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    9084:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9088:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    908c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    9090:	f012 0f03 	tst.w	r2, #3
    9094:	d106      	bne.n	90a4 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    9096:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    909a:	2201      	movs	r2, #1
    909c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    90a0:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    90a2:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    90a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    90a8:	2202      	movs	r2, #2
    90aa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    90ae:	4b02      	ldr	r3, [pc, #8]	; (90b8 <nrfx_power_clock_irq_handler+0x78>)
    90b0:	681b      	ldr	r3, [r3, #0]
    90b2:	2001      	movs	r0, #1
    90b4:	4798      	blx	r3
}
    90b6:	e7f4      	b.n	90a2 <nrfx_power_clock_irq_handler+0x62>
    90b8:	2000d020 	.word	0x2000d020

000090bc <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    90bc:	3008      	adds	r0, #8
    90be:	4b03      	ldr	r3, [pc, #12]	; (90cc <pin_in_use+0x10>)
    90c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    90c4:	f000 0001 	and.w	r0, r0, #1
    90c8:	4770      	bx	lr
    90ca:	bf00      	nop
    90cc:	2000407c 	.word	0x2000407c

000090d0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    90d0:	3008      	adds	r0, #8
    90d2:	4b03      	ldr	r3, [pc, #12]	; (90e0 <pin_in_use_by_te+0x10>)
    90d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    90d8:	f3c0 1040 	ubfx	r0, r0, #5, #1
    90dc:	4770      	bx	lr
    90de:	bf00      	nop
    90e0:	2000407c 	.word	0x2000407c

000090e4 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    90e4:	3008      	adds	r0, #8
    90e6:	4b04      	ldr	r3, [pc, #16]	; (90f8 <pin_has_trigger+0x14>)
    90e8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    90ec:	f010 001c 	ands.w	r0, r0, #28
    90f0:	bf18      	it	ne
    90f2:	2001      	movne	r0, #1
    90f4:	4770      	bx	lr
    90f6:	bf00      	nop
    90f8:	2000407c 	.word	0x2000407c

000090fc <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    90fc:	3008      	adds	r0, #8
    90fe:	4b03      	ldr	r3, [pc, #12]	; (910c <pin_is_output+0x10>)
    9100:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    9104:	f3c0 0040 	ubfx	r0, r0, #1, #1
    9108:	4770      	bx	lr
    910a:	bf00      	nop
    910c:	2000407c 	.word	0x2000407c

00009110 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    9110:	3008      	adds	r0, #8
    9112:	4b02      	ldr	r3, [pc, #8]	; (911c <pin_te_get+0xc>)
    9114:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    9118:	0b40      	lsrs	r0, r0, #13
    911a:	4770      	bx	lr
    911c:	2000407c 	.word	0x2000407c

00009120 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    9120:	2200      	movs	r2, #0
    9122:	e004      	b.n	912e <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    9124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9128:	4283      	cmp	r3, r0
    912a:	d00f      	beq.n	914c <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    912c:	3201      	adds	r2, #1
    912e:	2a2f      	cmp	r2, #47	; 0x2f
    9130:	d80a      	bhi.n	9148 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    9132:	f102 0308 	add.w	r3, r2, #8
    9136:	4906      	ldr	r1, [pc, #24]	; (9150 <handler_in_use+0x30>)
    9138:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    913c:	f413 7f80 	tst.w	r3, #256	; 0x100
    9140:	d0f0      	beq.n	9124 <handler_in_use+0x4>
    9142:	f3c3 2343 	ubfx	r3, r3, #9, #4
    9146:	e7ef      	b.n	9128 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    9148:	2000      	movs	r0, #0
    914a:	4770      	bx	lr
            return true;
    914c:	2001      	movs	r0, #1
}
    914e:	4770      	bx	lr
    9150:	2000407c 	.word	0x2000407c

00009154 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    9154:	2300      	movs	r3, #0
    9156:	b113      	cbz	r3, 915e <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    9158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    915c:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    915e:	4a07      	ldr	r2, [pc, #28]	; (917c <find_handler+0x28>)
    9160:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    9164:	4282      	cmp	r2, r0
    9166:	d001      	beq.n	916c <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    9168:	3301      	adds	r3, #1
    916a:	e7f4      	b.n	9156 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    916c:	4a03      	ldr	r2, [pc, #12]	; (917c <find_handler+0x28>)
    916e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    9172:	6852      	ldr	r2, [r2, #4]
    9174:	428a      	cmp	r2, r1
    9176:	d1f7      	bne.n	9168 <find_handler+0x14>
            return i;
    9178:	4618      	mov	r0, r3
    917a:	4770      	bx	lr
    917c:	2000407c 	.word	0x2000407c

00009180 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    9180:	3008      	adds	r0, #8
    9182:	4b06      	ldr	r3, [pc, #24]	; (919c <channel_handler_get+0x1c>)
    9184:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    9188:	f410 7f80 	tst.w	r0, #256	; 0x100
    918c:	d004      	beq.n	9198 <channel_handler_get+0x18>
    918e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    9192:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    9196:	4770      	bx	lr
        return NULL;
    9198:	2000      	movs	r0, #0
}
    919a:	4770      	bx	lr
    919c:	2000407c 	.word	0x2000407c

000091a0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    91a0:	b570      	push	{r4, r5, r6, lr}
    91a2:	4604      	mov	r4, r0
    91a4:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    91a6:	f7ff ffeb 	bl	9180 <channel_handler_get>

    if (handler)
    91aa:	b120      	cbz	r0, 91b6 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    91ac:	6806      	ldr	r6, [r0, #0]
    91ae:	6842      	ldr	r2, [r0, #4]
    91b0:	4629      	mov	r1, r5
    91b2:	4620      	mov	r0, r4
    91b4:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    91b6:	4b04      	ldr	r3, [pc, #16]	; (91c8 <call_handler+0x28>)
    91b8:	689b      	ldr	r3, [r3, #8]
    91ba:	b123      	cbz	r3, 91c6 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    91bc:	4a02      	ldr	r2, [pc, #8]	; (91c8 <call_handler+0x28>)
    91be:	68d2      	ldr	r2, [r2, #12]
    91c0:	4629      	mov	r1, r5
    91c2:	4620      	mov	r0, r4
    91c4:	4798      	blx	r3
    }
}
    91c6:	bd70      	pop	{r4, r5, r6, pc}
    91c8:	2000407c 	.word	0x2000407c

000091cc <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    91cc:	f100 0208 	add.w	r2, r0, #8
    91d0:	4b16      	ldr	r3, [pc, #88]	; (922c <release_handler+0x60>)
    91d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    91d6:	f413 7f80 	tst.w	r3, #256	; 0x100
    91da:	d026      	beq.n	922a <release_handler+0x5e>
{
    91dc:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    91de:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    91e2:	4610      	mov	r0, r2
    91e4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    91e8:	4a10      	ldr	r2, [pc, #64]	; (922c <release_handler+0x60>)
    91ea:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    91ee:	4620      	mov	r0, r4
    91f0:	f7ff ff96 	bl	9120 <handler_in_use>
    91f4:	b100      	cbz	r0, 91f8 <release_handler+0x2c>
}
    91f6:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    91f8:	480c      	ldr	r0, [pc, #48]	; (922c <release_handler+0x60>)
    91fa:	2300      	movs	r3, #0
    91fc:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    9200:	4621      	mov	r1, r4
    9202:	3074      	adds	r0, #116	; 0x74
    9204:	f7ff fd86 	bl	8d14 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    9208:	4b09      	ldr	r3, [pc, #36]	; (9230 <release_handler+0x64>)
    920a:	4298      	cmp	r0, r3
    920c:	d0f3      	beq.n	91f6 <release_handler+0x2a>
    920e:	4c09      	ldr	r4, [pc, #36]	; (9234 <release_handler+0x68>)
    9210:	f44f 7399 	mov.w	r3, #306	; 0x132
    9214:	4622      	mov	r2, r4
    9216:	4908      	ldr	r1, [pc, #32]	; (9238 <release_handler+0x6c>)
    9218:	4808      	ldr	r0, [pc, #32]	; (923c <release_handler+0x70>)
    921a:	f006 f802 	bl	f222 <assert_print>
    921e:	f44f 7199 	mov.w	r1, #306	; 0x132
    9222:	4620      	mov	r0, r4
    9224:	f005 fff6 	bl	f214 <assert_post_action>
    9228:	e7e5      	b.n	91f6 <release_handler+0x2a>
    922a:	4770      	bx	lr
    922c:	2000407c 	.word	0x2000407c
    9230:	0bad0000 	.word	0x0bad0000
    9234:	00012bf4 	.word	0x00012bf4
    9238:	00012c34 	.word	0x00012c34
    923c:	000116a8 	.word	0x000116a8

00009240 <pin_handler_trigger_uninit>:
{
    9240:	b510      	push	{r4, lr}
    9242:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    9244:	f7ff ff44 	bl	90d0 <pin_in_use_by_te>
    9248:	b140      	cbz	r0, 925c <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    924a:	4620      	mov	r0, r4
    924c:	f7ff ff60 	bl	9110 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    9250:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    9254:	4b06      	ldr	r3, [pc, #24]	; (9270 <pin_handler_trigger_uninit+0x30>)
    9256:	2200      	movs	r2, #0
    9258:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    925c:	4620      	mov	r0, r4
    925e:	f7ff ffb5 	bl	91cc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    9262:	3408      	adds	r4, #8
    9264:	4b03      	ldr	r3, [pc, #12]	; (9274 <pin_handler_trigger_uninit+0x34>)
    9266:	2200      	movs	r2, #0
    9268:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    926c:	bd10      	pop	{r4, pc}
    926e:	bf00      	nop
    9270:	40006000 	.word	0x40006000
    9274:	2000407c 	.word	0x2000407c

00009278 <pin_handler_set>:
{
    9278:	b570      	push	{r4, r5, r6, lr}
    927a:	b082      	sub	sp, #8
    927c:	4606      	mov	r6, r0
    927e:	460c      	mov	r4, r1
    9280:	4615      	mov	r5, r2
    release_handler(pin);
    9282:	f7ff ffa3 	bl	91cc <release_handler>
    if (!handler)
    9286:	b324      	cbz	r4, 92d2 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    9288:	4629      	mov	r1, r5
    928a:	4620      	mov	r0, r4
    928c:	f7ff ff62 	bl	9154 <find_handler>
    if (handler_id < 0)
    9290:	1e03      	subs	r3, r0, #0
    9292:	db13      	blt.n	92bc <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    9294:	4a10      	ldr	r2, [pc, #64]	; (92d8 <pin_handler_set+0x60>)
    9296:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    929a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    929e:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    92a0:	025b      	lsls	r3, r3, #9
    92a2:	b29b      	uxth	r3, r3
    92a4:	f106 0008 	add.w	r0, r6, #8
    92a8:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    92ac:	430b      	orrs	r3, r1
    92ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    92b2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    92b6:	4809      	ldr	r0, [pc, #36]	; (92dc <pin_handler_set+0x64>)
}
    92b8:	b002      	add	sp, #8
    92ba:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    92bc:	f10d 0107 	add.w	r1, sp, #7
    92c0:	4807      	ldr	r0, [pc, #28]	; (92e0 <pin_handler_set+0x68>)
    92c2:	f7ff fcff 	bl	8cc4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    92c6:	4b05      	ldr	r3, [pc, #20]	; (92dc <pin_handler_set+0x64>)
    92c8:	4298      	cmp	r0, r3
    92ca:	d1f5      	bne.n	92b8 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    92cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    92d0:	e7e0      	b.n	9294 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    92d2:	4802      	ldr	r0, [pc, #8]	; (92dc <pin_handler_set+0x64>)
    92d4:	e7f0      	b.n	92b8 <pin_handler_set+0x40>
    92d6:	bf00      	nop
    92d8:	2000407c 	.word	0x2000407c
    92dc:	0bad0000 	.word	0x0bad0000
    92e0:	200040f0 	.word	0x200040f0

000092e4 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    92e4:	b538      	push	{r3, r4, r5, lr}
    92e6:	4604      	mov	r4, r0
    while (mask)
    92e8:	e018      	b.n	931c <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    92ea:	fa94 f3a4 	rbit	r3, r4
    92ee:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    92f2:	2201      	movs	r2, #1
    92f4:	409a      	lsls	r2, r3
    92f6:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    92fa:	4a0a      	ldr	r2, [pc, #40]	; (9324 <gpiote_evt_handle+0x40>)
    92fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    9300:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    9304:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    9308:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    930c:	f3c0 4001 	ubfx	r0, r0, #16, #2
    9310:	f007 f8ba 	bl	10488 <gpiote_polarity_to_trigger>
    9314:	4601      	mov	r1, r0
    9316:	4628      	mov	r0, r5
    9318:	f7ff ff42 	bl	91a0 <call_handler>
    while (mask)
    931c:	2c00      	cmp	r4, #0
    931e:	d1e4      	bne.n	92ea <gpiote_evt_handle+0x6>
    }
}
    9320:	bd38      	pop	{r3, r4, r5, pc}
    9322:	bf00      	nop
    9324:	40006000 	.word	0x40006000

00009328 <latch_pending_read_and_check>:
{
    9328:	b082      	sub	sp, #8
    932a:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    932c:	4b11      	ldr	r3, [pc, #68]	; (9374 <latch_pending_read_and_check+0x4c>)
    932e:	e893 0003 	ldmia.w	r3, {r0, r1}
    9332:	ab02      	add	r3, sp, #8
    9334:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    9338:	4660      	mov	r0, ip
    933a:	2300      	movs	r3, #0
    933c:	e00b      	b.n	9356 <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    933e:	aa02      	add	r2, sp, #8
    9340:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    9344:	f852 2c08 	ldr.w	r2, [r2, #-8]
    9348:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    934c:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    9350:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    9354:	3301      	adds	r3, #1
    9356:	2b01      	cmp	r3, #1
    9358:	d9f1      	bls.n	933e <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    935a:	2300      	movs	r3, #0
    935c:	2b01      	cmp	r3, #1
    935e:	d804      	bhi.n	936a <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    9360:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    9364:	b922      	cbnz	r2, 9370 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    9366:	3301      	adds	r3, #1
    9368:	e7f8      	b.n	935c <latch_pending_read_and_check+0x34>
    return false;
    936a:	2000      	movs	r0, #0
}
    936c:	b002      	add	sp, #8
    936e:	4770      	bx	lr
            return true;
    9370:	2001      	movs	r0, #1
    9372:	e7fb      	b.n	936c <latch_pending_read_and_check+0x44>
    9374:	000110a0 	.word	0x000110a0

00009378 <next_sense_cond_call_handler>:
{
    9378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    937c:	4604      	mov	r4, r0
    937e:	460d      	mov	r5, r1
    9380:	4616      	mov	r6, r2
    if (is_level(trigger))
    9382:	4608      	mov	r0, r1
    9384:	f007 f882 	bl	1048c <is_level>
    9388:	bb60      	cbnz	r0, 93e4 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    938a:	2e02      	cmp	r6, #2
    938c:	f000 80f5 	beq.w	957a <next_sense_cond_call_handler+0x202>
    9390:	f04f 0802 	mov.w	r8, #2
    switch (port)
    9394:	0963      	lsrs	r3, r4, #5
    9396:	f000 80f3 	beq.w	9580 <next_sense_cond_call_handler+0x208>
    939a:	2b01      	cmp	r3, #1
    939c:	f040 80f3 	bne.w	9586 <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    93a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    93a4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    93a8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    93aa:	f013 0f01 	tst.w	r3, #1
    93ae:	f000 80ec 	beq.w	958a <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    93b2:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    93b6:	0963      	lsrs	r3, r4, #5
    93b8:	f000 80f5 	beq.w	95a6 <next_sense_cond_call_handler+0x22e>
    93bc:	2b01      	cmp	r3, #1
    93be:	f000 80f5 	beq.w	95ac <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    93c2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 95e8 <next_sense_cond_call_handler+0x270>
    93c6:	f240 232e 	movw	r3, #558	; 0x22e
    93ca:	464a      	mov	r2, r9
    93cc:	4987      	ldr	r1, [pc, #540]	; (95ec <next_sense_cond_call_handler+0x274>)
    93ce:	4888      	ldr	r0, [pc, #544]	; (95f0 <next_sense_cond_call_handler+0x278>)
    93d0:	f005 ff27 	bl	f222 <assert_print>
    93d4:	f240 212e 	movw	r1, #558	; 0x22e
    93d8:	4648      	mov	r0, r9
    93da:	f005 ff1b 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    93de:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    93e2:	e0e4      	b.n	95ae <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    93e4:	4629      	mov	r1, r5
    93e6:	4620      	mov	r0, r4
    93e8:	f7ff feda 	bl	91a0 <call_handler>
    switch (port)
    93ec:	0963      	lsrs	r3, r4, #5
    93ee:	d01f      	beq.n	9430 <next_sense_cond_call_handler+0xb8>
    93f0:	2b01      	cmp	r3, #1
    93f2:	d120      	bne.n	9436 <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    93f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    93f8:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    93fc:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    93fe:	f013 0f01 	tst.w	r3, #1
    9402:	d01a      	beq.n	943a <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    9404:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9408:	0963      	lsrs	r3, r4, #5
    940a:	d024      	beq.n	9456 <next_sense_cond_call_handler+0xde>
    940c:	2b01      	cmp	r3, #1
    940e:	d025      	beq.n	945c <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    9410:	4f75      	ldr	r7, [pc, #468]	; (95e8 <next_sense_cond_call_handler+0x270>)
    9412:	f240 232e 	movw	r3, #558	; 0x22e
    9416:	463a      	mov	r2, r7
    9418:	4974      	ldr	r1, [pc, #464]	; (95ec <next_sense_cond_call_handler+0x274>)
    941a:	4875      	ldr	r0, [pc, #468]	; (95f0 <next_sense_cond_call_handler+0x278>)
    941c:	f005 ff01 	bl	f222 <assert_print>
    9420:	f240 212e 	movw	r1, #558	; 0x22e
    9424:	4638      	mov	r0, r7
    9426:	f005 fef5 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    942a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    942e:	e016      	b.n	945e <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    9430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9434:	e7e0      	b.n	93f8 <next_sense_cond_call_handler+0x80>
    switch (port)
    9436:	2300      	movs	r3, #0
    9438:	e7de      	b.n	93f8 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    943a:	4d6b      	ldr	r5, [pc, #428]	; (95e8 <next_sense_cond_call_handler+0x270>)
    943c:	f240 2329 	movw	r3, #553	; 0x229
    9440:	462a      	mov	r2, r5
    9442:	496c      	ldr	r1, [pc, #432]	; (95f4 <next_sense_cond_call_handler+0x27c>)
    9444:	486a      	ldr	r0, [pc, #424]	; (95f0 <next_sense_cond_call_handler+0x278>)
    9446:	f005 feec 	bl	f222 <assert_print>
    944a:	f240 2129 	movw	r1, #553	; 0x229
    944e:	4628      	mov	r0, r5
    9450:	f005 fee0 	bl	f214 <assert_post_action>
    9454:	e7d6      	b.n	9404 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    9456:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    945a:	e000      	b.n	945e <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    945c:	4b66      	ldr	r3, [pc, #408]	; (95f8 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    945e:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    9462:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    9466:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    946a:	429e      	cmp	r6, r3
    946c:	f040 80af 	bne.w	95ce <next_sense_cond_call_handler+0x256>
    switch (port)
    9470:	0963      	lsrs	r3, r4, #5
    9472:	d01f      	beq.n	94b4 <next_sense_cond_call_handler+0x13c>
    9474:	2b01      	cmp	r3, #1
    9476:	d120      	bne.n	94ba <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    9478:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    947c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9480:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9482:	f013 0f01 	tst.w	r3, #1
    9486:	d01a      	beq.n	94be <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    9488:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    948c:	0963      	lsrs	r3, r4, #5
    948e:	d024      	beq.n	94da <next_sense_cond_call_handler+0x162>
    9490:	2b01      	cmp	r3, #1
    9492:	d025      	beq.n	94e0 <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    9494:	4f54      	ldr	r7, [pc, #336]	; (95e8 <next_sense_cond_call_handler+0x270>)
    9496:	f240 232e 	movw	r3, #558	; 0x22e
    949a:	463a      	mov	r2, r7
    949c:	4953      	ldr	r1, [pc, #332]	; (95ec <next_sense_cond_call_handler+0x274>)
    949e:	4854      	ldr	r0, [pc, #336]	; (95f0 <next_sense_cond_call_handler+0x278>)
    94a0:	f005 febf 	bl	f222 <assert_print>
    94a4:	f240 212e 	movw	r1, #558	; 0x22e
    94a8:	4638      	mov	r0, r7
    94aa:	f005 feb3 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    94ae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    94b2:	e016      	b.n	94e2 <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    94b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    94b8:	e7e0      	b.n	947c <next_sense_cond_call_handler+0x104>
    switch (port)
    94ba:	2300      	movs	r3, #0
    94bc:	e7de      	b.n	947c <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    94be:	4d4a      	ldr	r5, [pc, #296]	; (95e8 <next_sense_cond_call_handler+0x270>)
    94c0:	f240 2329 	movw	r3, #553	; 0x229
    94c4:	462a      	mov	r2, r5
    94c6:	494b      	ldr	r1, [pc, #300]	; (95f4 <next_sense_cond_call_handler+0x27c>)
    94c8:	4849      	ldr	r0, [pc, #292]	; (95f0 <next_sense_cond_call_handler+0x278>)
    94ca:	f005 feaa 	bl	f222 <assert_print>
    94ce:	f240 2129 	movw	r1, #553	; 0x229
    94d2:	4628      	mov	r0, r5
    94d4:	f005 fe9e 	bl	f214 <assert_post_action>
    94d8:	e7d6      	b.n	9488 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    94da:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    94de:	e000      	b.n	94e2 <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    94e0:	4945      	ldr	r1, [pc, #276]	; (95f8 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    94e2:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    94e6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    94ea:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    94ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    94f2:	0963      	lsrs	r3, r4, #5
    94f4:	d01f      	beq.n	9536 <next_sense_cond_call_handler+0x1be>
    94f6:	2b01      	cmp	r3, #1
    94f8:	d120      	bne.n	953c <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    94fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    94fe:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9502:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9504:	f013 0f01 	tst.w	r3, #1
    9508:	d01a      	beq.n	9540 <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    950a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    950e:	0964      	lsrs	r4, r4, #5
    9510:	d024      	beq.n	955c <next_sense_cond_call_handler+0x1e4>
    9512:	2c01      	cmp	r4, #1
    9514:	d025      	beq.n	9562 <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    9516:	4c34      	ldr	r4, [pc, #208]	; (95e8 <next_sense_cond_call_handler+0x270>)
    9518:	f240 232e 	movw	r3, #558	; 0x22e
    951c:	4622      	mov	r2, r4
    951e:	4933      	ldr	r1, [pc, #204]	; (95ec <next_sense_cond_call_handler+0x274>)
    9520:	4833      	ldr	r0, [pc, #204]	; (95f0 <next_sense_cond_call_handler+0x278>)
    9522:	f005 fe7e 	bl	f222 <assert_print>
    9526:	f240 212e 	movw	r1, #558	; 0x22e
    952a:	4620      	mov	r0, r4
    952c:	f005 fe72 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    9530:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9534:	e016      	b.n	9564 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    9536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    953a:	e7e0      	b.n	94fe <next_sense_cond_call_handler+0x186>
    switch (port)
    953c:	2300      	movs	r3, #0
    953e:	e7de      	b.n	94fe <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9540:	4d29      	ldr	r5, [pc, #164]	; (95e8 <next_sense_cond_call_handler+0x270>)
    9542:	f240 2329 	movw	r3, #553	; 0x229
    9546:	462a      	mov	r2, r5
    9548:	492a      	ldr	r1, [pc, #168]	; (95f4 <next_sense_cond_call_handler+0x27c>)
    954a:	4829      	ldr	r0, [pc, #164]	; (95f0 <next_sense_cond_call_handler+0x278>)
    954c:	f005 fe69 	bl	f222 <assert_print>
    9550:	f240 2129 	movw	r1, #553	; 0x229
    9554:	4628      	mov	r0, r5
    9556:	f005 fe5d 	bl	f214 <assert_post_action>
    955a:	e7d6      	b.n	950a <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    955c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9560:	e000      	b.n	9564 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9562:	4925      	ldr	r1, [pc, #148]	; (95f8 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9564:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    9568:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    956c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9570:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    9574:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    9578:	e029      	b.n	95ce <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    957a:	f04f 0803 	mov.w	r8, #3
    957e:	e709      	b.n	9394 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    9580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9584:	e70e      	b.n	93a4 <next_sense_cond_call_handler+0x2c>
    switch (port)
    9586:	2300      	movs	r3, #0
    9588:	e70c      	b.n	93a4 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    958a:	4f17      	ldr	r7, [pc, #92]	; (95e8 <next_sense_cond_call_handler+0x270>)
    958c:	f240 2329 	movw	r3, #553	; 0x229
    9590:	463a      	mov	r2, r7
    9592:	4918      	ldr	r1, [pc, #96]	; (95f4 <next_sense_cond_call_handler+0x27c>)
    9594:	4816      	ldr	r0, [pc, #88]	; (95f0 <next_sense_cond_call_handler+0x278>)
    9596:	f005 fe44 	bl	f222 <assert_print>
    959a:	f240 2129 	movw	r1, #553	; 0x229
    959e:	4638      	mov	r0, r7
    95a0:	f005 fe38 	bl	f214 <assert_post_action>
    95a4:	e705      	b.n	93b2 <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    95a6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    95aa:	e000      	b.n	95ae <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    95ac:	4912      	ldr	r1, [pc, #72]	; (95f8 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    95ae:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    95b2:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    95b6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    95ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    95be:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    95c2:	2d03      	cmp	r5, #3
    95c4:	d007      	beq.n	95d6 <next_sense_cond_call_handler+0x25e>
    95c6:	2e02      	cmp	r6, #2
    95c8:	d003      	beq.n	95d2 <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    95ca:	2e03      	cmp	r6, #3
    95cc:	d008      	beq.n	95e0 <next_sense_cond_call_handler+0x268>
}
    95ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    95d2:	2d01      	cmp	r5, #1
    95d4:	d1f9      	bne.n	95ca <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    95d6:	4629      	mov	r1, r5
    95d8:	4620      	mov	r0, r4
    95da:	f7ff fde1 	bl	91a0 <call_handler>
}
    95de:	e7f6      	b.n	95ce <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    95e0:	2d02      	cmp	r5, #2
    95e2:	d1f4      	bne.n	95ce <next_sense_cond_call_handler+0x256>
    95e4:	e7f7      	b.n	95d6 <next_sense_cond_call_handler+0x25e>
    95e6:	bf00      	nop
    95e8:	00012960 	.word	0x00012960
    95ec:	00011d64 	.word	0x00011d64
    95f0:	000116a8 	.word	0x000116a8
    95f4:	00012994 	.word	0x00012994
    95f8:	50000300 	.word	0x50000300

000095fc <port_event_handle>:
{
    95fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9600:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    9602:	4a65      	ldr	r2, [pc, #404]	; (9798 <port_event_handle+0x19c>)
    9604:	466b      	mov	r3, sp
    9606:	e892 0003 	ldmia.w	r2, {r0, r1}
    960a:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    960e:	2300      	movs	r3, #0
    9610:	a802      	add	r0, sp, #8
    9612:	e00b      	b.n	962c <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    9614:	aa04      	add	r2, sp, #16
    9616:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    961a:	f852 2c10 	ldr.w	r2, [r2, #-16]
    961e:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    9622:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    9626:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    962a:	3301      	adds	r3, #1
    962c:	2b01      	cmp	r3, #1
    962e:	d9f1      	bls.n	9614 <port_event_handle+0x18>
    9630:	e0ad      	b.n	978e <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    9632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9636:	e07f      	b.n	9738 <port_event_handle+0x13c>
    switch (port)
    9638:	2300      	movs	r3, #0
    963a:	e07d      	b.n	9738 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    963c:	4f57      	ldr	r7, [pc, #348]	; (979c <port_event_handle+0x1a0>)
    963e:	f240 2329 	movw	r3, #553	; 0x229
    9642:	463a      	mov	r2, r7
    9644:	4956      	ldr	r1, [pc, #344]	; (97a0 <port_event_handle+0x1a4>)
    9646:	4857      	ldr	r0, [pc, #348]	; (97a4 <port_event_handle+0x1a8>)
    9648:	f005 fdeb 	bl	f222 <assert_print>
    964c:	f240 2129 	movw	r1, #553	; 0x229
    9650:	4638      	mov	r0, r7
    9652:	f005 fddf 	bl	f214 <assert_post_action>
    9656:	e076      	b.n	9746 <port_event_handle+0x14a>
        case 0: return NRF_P0;
    9658:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    965c:	e000      	b.n	9660 <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    965e:	4b52      	ldr	r3, [pc, #328]	; (97a8 <port_event_handle+0x1ac>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    9660:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    9664:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    9668:	f3c2 4201 	ubfx	r2, r2, #16, #2
    966c:	4631      	mov	r1, r6
    966e:	4620      	mov	r0, r4
    9670:	f7ff fe82 	bl	9378 <next_sense_cond_call_handler>
    switch (port)
    9674:	0963      	lsrs	r3, r4, #5
    9676:	d01f      	beq.n	96b8 <port_event_handle+0xbc>
    9678:	2b01      	cmp	r3, #1
    967a:	d120      	bne.n	96be <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    967c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9680:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9684:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9686:	f013 0f01 	tst.w	r3, #1
    968a:	d01a      	beq.n	96c2 <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    968c:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9690:	0964      	lsrs	r4, r4, #5
    9692:	d024      	beq.n	96de <port_event_handle+0xe2>
    9694:	2c01      	cmp	r4, #1
    9696:	d025      	beq.n	96e4 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    9698:	4c40      	ldr	r4, [pc, #256]	; (979c <port_event_handle+0x1a0>)
    969a:	f240 232e 	movw	r3, #558	; 0x22e
    969e:	4622      	mov	r2, r4
    96a0:	4942      	ldr	r1, [pc, #264]	; (97ac <port_event_handle+0x1b0>)
    96a2:	4840      	ldr	r0, [pc, #256]	; (97a4 <port_event_handle+0x1a8>)
    96a4:	f005 fdbd 	bl	f222 <assert_print>
    96a8:	f240 212e 	movw	r1, #558	; 0x22e
    96ac:	4620      	mov	r0, r4
    96ae:	f005 fdb1 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    96b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    96b6:	e016      	b.n	96e6 <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    96b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    96bc:	e7e0      	b.n	9680 <port_event_handle+0x84>
    switch (port)
    96be:	2300      	movs	r3, #0
    96c0:	e7de      	b.n	9680 <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    96c2:	4e36      	ldr	r6, [pc, #216]	; (979c <port_event_handle+0x1a0>)
    96c4:	f240 2329 	movw	r3, #553	; 0x229
    96c8:	4632      	mov	r2, r6
    96ca:	4935      	ldr	r1, [pc, #212]	; (97a0 <port_event_handle+0x1a4>)
    96cc:	4835      	ldr	r0, [pc, #212]	; (97a4 <port_event_handle+0x1a8>)
    96ce:	f005 fda8 	bl	f222 <assert_print>
    96d2:	f240 2129 	movw	r1, #553	; 0x229
    96d6:	4630      	mov	r0, r6
    96d8:	f005 fd9c 	bl	f214 <assert_post_action>
    96dc:	e7d6      	b.n	968c <port_event_handle+0x90>
        case 0: return NRF_P0;
    96de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    96e2:	e000      	b.n	96e6 <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    96e4:	4a30      	ldr	r2, [pc, #192]	; (97a8 <port_event_handle+0x1ac>)
    reg->LATCH = (1 << pin_number);
    96e6:	2301      	movs	r3, #1
    96e8:	40b3      	lsls	r3, r6
    96ea:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    96ee:	ab04      	add	r3, sp, #16
    96f0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    96f4:	f853 4c08 	ldr.w	r4, [r3, #-8]
    96f8:	2c00      	cmp	r4, #0
    96fa:	d03b      	beq.n	9774 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    96fc:	fa94 f4a4 	rbit	r4, r4
    9700:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    9704:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    9708:	f104 0208 	add.w	r2, r4, #8
    970c:	4b28      	ldr	r3, [pc, #160]	; (97b0 <port_event_handle+0x1b4>)
    970e:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    9712:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    9716:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    9718:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    971c:	a802      	add	r0, sp, #8
    971e:	2301      	movs	r3, #1
    9720:	fa03 f202 	lsl.w	r2, r3, r2
    9724:	5c43      	ldrb	r3, [r0, r1]
    9726:	ea23 0302 	bic.w	r3, r3, r2
    972a:	5443      	strb	r3, [r0, r1]
    switch (port)
    972c:	0963      	lsrs	r3, r4, #5
    972e:	d080      	beq.n	9632 <port_event_handle+0x36>
    9730:	2b01      	cmp	r3, #1
    9732:	d181      	bne.n	9638 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    9734:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9738:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    973c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    973e:	f013 0f01 	tst.w	r3, #1
    9742:	f43f af7b 	beq.w	963c <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    9746:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    974a:	0963      	lsrs	r3, r4, #5
    974c:	d084      	beq.n	9658 <port_event_handle+0x5c>
    974e:	2b01      	cmp	r3, #1
    9750:	d085      	beq.n	965e <port_event_handle+0x62>
            NRFX_ASSERT(0);
    9752:	f8df 8048 	ldr.w	r8, [pc, #72]	; 979c <port_event_handle+0x1a0>
    9756:	f240 232e 	movw	r3, #558	; 0x22e
    975a:	4642      	mov	r2, r8
    975c:	4913      	ldr	r1, [pc, #76]	; (97ac <port_event_handle+0x1b0>)
    975e:	4811      	ldr	r0, [pc, #68]	; (97a4 <port_event_handle+0x1a8>)
    9760:	f005 fd5f 	bl	f222 <assert_print>
    9764:	f240 212e 	movw	r1, #558	; 0x22e
    9768:	4640      	mov	r0, r8
    976a:	f005 fd53 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    976e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9772:	e775      	b.n	9660 <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    9774:	3501      	adds	r5, #1
    9776:	2d01      	cmp	r5, #1
    9778:	d9b9      	bls.n	96ee <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    977a:	4b0e      	ldr	r3, [pc, #56]	; (97b4 <port_event_handle+0x1b8>)
    977c:	2200      	movs	r2, #0
    977e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    9782:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    9786:	a802      	add	r0, sp, #8
    9788:	f7ff fdce 	bl	9328 <latch_pending_read_and_check>
    978c:	b108      	cbz	r0, 9792 <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    978e:	2500      	movs	r5, #0
    9790:	e7f1      	b.n	9776 <port_event_handle+0x17a>
}
    9792:	b004      	add	sp, #16
    9794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9798:	000110a0 	.word	0x000110a0
    979c:	00012960 	.word	0x00012960
    97a0:	00012994 	.word	0x00012994
    97a4:	000116a8 	.word	0x000116a8
    97a8:	50000300 	.word	0x50000300
    97ac:	00011d64 	.word	0x00011d64
    97b0:	2000407c 	.word	0x2000407c
    97b4:	40006000 	.word	0x40006000

000097b8 <nrfx_gpiote_input_configure>:
{
    97b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    97bc:	4604      	mov	r4, r0
    97be:	4615      	mov	r5, r2
    97c0:	461e      	mov	r6, r3
    if (p_input_config)
    97c2:	2900      	cmp	r1, #0
    97c4:	d064      	beq.n	9890 <nrfx_gpiote_input_configure+0xd8>
    97c6:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    97c8:	f006 fe48 	bl	1045c <pin_is_task_output>
    97cc:	2800      	cmp	r0, #0
    97ce:	f040 80cd 	bne.w	996c <nrfx_gpiote_input_configure+0x1b4>
    switch (port)
    97d2:	0963      	lsrs	r3, r4, #5
    97d4:	d020      	beq.n	9818 <nrfx_gpiote_input_configure+0x60>
    97d6:	2b01      	cmp	r3, #1
    97d8:	d121      	bne.n	981e <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    97da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    97de:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    97e2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    97e4:	f013 0f01 	tst.w	r3, #1
    97e8:	d01b      	beq.n	9822 <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    97ea:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    97ee:	0963      	lsrs	r3, r4, #5
    97f0:	d025      	beq.n	983e <nrfx_gpiote_input_configure+0x86>
    97f2:	2b01      	cmp	r3, #1
    97f4:	d026      	beq.n	9844 <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    97f6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 997c <nrfx_gpiote_input_configure+0x1c4>
    97fa:	f240 232e 	movw	r3, #558	; 0x22e
    97fe:	464a      	mov	r2, r9
    9800:	495f      	ldr	r1, [pc, #380]	; (9980 <nrfx_gpiote_input_configure+0x1c8>)
    9802:	4860      	ldr	r0, [pc, #384]	; (9984 <nrfx_gpiote_input_configure+0x1cc>)
    9804:	f005 fd0d 	bl	f222 <assert_print>
    9808:	f240 212e 	movw	r1, #558	; 0x22e
    980c:	4648      	mov	r0, r9
    980e:	f005 fd01 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    9812:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9816:	e016      	b.n	9846 <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    9818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    981c:	e7df      	b.n	97de <nrfx_gpiote_input_configure+0x26>
    switch (port)
    981e:	2300      	movs	r3, #0
    9820:	e7dd      	b.n	97de <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9822:	4f56      	ldr	r7, [pc, #344]	; (997c <nrfx_gpiote_input_configure+0x1c4>)
    9824:	f240 2329 	movw	r3, #553	; 0x229
    9828:	463a      	mov	r2, r7
    982a:	4957      	ldr	r1, [pc, #348]	; (9988 <nrfx_gpiote_input_configure+0x1d0>)
    982c:	4855      	ldr	r0, [pc, #340]	; (9984 <nrfx_gpiote_input_configure+0x1cc>)
    982e:	f005 fcf8 	bl	f222 <assert_print>
    9832:	f240 2129 	movw	r1, #553	; 0x229
    9836:	4638      	mov	r0, r7
    9838:	f005 fcec 	bl	f214 <assert_post_action>
    983c:	e7d5      	b.n	97ea <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    983e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9842:	e000      	b.n	9846 <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9844:	4951      	ldr	r1, [pc, #324]	; (998c <nrfx_gpiote_input_configure+0x1d4>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9846:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    984a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    984e:	f1b8 0f00 	cmp.w	r8, #0
    9852:	d03f      	beq.n	98d4 <nrfx_gpiote_input_configure+0x11c>
    9854:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9856:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    985a:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    985e:	f1b8 0f00 	cmp.w	r8, #0
    9862:	d039      	beq.n	98d8 <nrfx_gpiote_input_configure+0x120>
    9864:	f898 2000 	ldrb.w	r2, [r8]
    9868:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    986a:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    986c:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    9870:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    9874:	4a46      	ldr	r2, [pc, #280]	; (9990 <nrfx_gpiote_input_configure+0x1d8>)
    9876:	f104 0108 	add.w	r1, r4, #8
    987a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    987e:	f023 0302 	bic.w	r3, r3, #2
    9882:	b29b      	uxth	r3, r3
    9884:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    9888:	f043 0301 	orr.w	r3, r3, #1
    988c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    9890:	b1bd      	cbz	r5, 98c2 <nrfx_gpiote_input_configure+0x10a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    9892:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    9894:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    9898:	4620      	mov	r0, r4
    989a:	f7ff fc2f 	bl	90fc <pin_is_output>
    989e:	b1e8      	cbz	r0, 98dc <nrfx_gpiote_input_configure+0x124>
            if (use_evt)
    98a0:	f1b8 0f00 	cmp.w	r8, #0
    98a4:	d164      	bne.n	9970 <nrfx_gpiote_input_configure+0x1b8>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    98a6:	4a3a      	ldr	r2, [pc, #232]	; (9990 <nrfx_gpiote_input_configure+0x1d8>)
    98a8:	f104 0108 	add.w	r1, r4, #8
    98ac:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    98b0:	f023 031c 	bic.w	r3, r3, #28
    98b4:	b29b      	uxth	r3, r3
    98b6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    98ba:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    98be:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    98c2:	2e00      	cmp	r6, #0
    98c4:	d058      	beq.n	9978 <nrfx_gpiote_input_configure+0x1c0>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    98c6:	6872      	ldr	r2, [r6, #4]
    98c8:	6831      	ldr	r1, [r6, #0]
    98ca:	4620      	mov	r0, r4
    98cc:	f7ff fcd4 	bl	9278 <pin_handler_set>
}
    98d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    98d4:	2200      	movs	r2, #0
    98d6:	e7be      	b.n	9856 <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    98d8:	2200      	movs	r2, #0
    98da:	e7c6      	b.n	986a <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    98dc:	4a2c      	ldr	r2, [pc, #176]	; (9990 <nrfx_gpiote_input_configure+0x1d8>)
    98de:	f104 0108 	add.w	r1, r4, #8
    98e2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    98e6:	f023 0320 	bic.w	r3, r3, #32
    98ea:	04db      	lsls	r3, r3, #19
    98ec:	0cdb      	lsrs	r3, r3, #19
    98ee:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    98f2:	f1b8 0f00 	cmp.w	r8, #0
    98f6:	d0d6      	beq.n	98a6 <nrfx_gpiote_input_configure+0xee>
                if (!edge)
    98f8:	2f03      	cmp	r7, #3
    98fa:	d83b      	bhi.n	9974 <nrfx_gpiote_input_configure+0x1bc>
                uint8_t ch = *p_trigger_config->p_in_channel;
    98fc:	686b      	ldr	r3, [r5, #4]
    98fe:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    9900:	b937      	cbnz	r7, 9910 <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    9902:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    9906:	4b23      	ldr	r3, [pc, #140]	; (9994 <nrfx_gpiote_input_configure+0x1dc>)
    9908:	2200      	movs	r2, #0
    990a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    990e:	e7ca      	b.n	98a6 <nrfx_gpiote_input_configure+0xee>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    9910:	4638      	mov	r0, r7
    9912:	f006 fdba 	bl	1048a <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    9916:	4b1f      	ldr	r3, [pc, #124]	; (9994 <nrfx_gpiote_input_configure+0x1dc>)
    9918:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    991c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    9920:	f021 0103 	bic.w	r1, r1, #3
    9924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    9928:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    992c:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    9930:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    9934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9938:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    993c:	0221      	lsls	r1, r4, #8
    993e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    9942:	0400      	lsls	r0, r0, #16
    9944:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9948:	4301      	orrs	r1, r0
    994a:	ea4c 0101 	orr.w	r1, ip, r1
    994e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    9952:	036b      	lsls	r3, r5, #13
    9954:	b29b      	uxth	r3, r3
    9956:	4a0e      	ldr	r2, [pc, #56]	; (9990 <nrfx_gpiote_input_configure+0x1d8>)
    9958:	f104 0108 	add.w	r1, r4, #8
    995c:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    9960:	4303      	orrs	r3, r0
    9962:	f043 0320 	orr.w	r3, r3, #32
    9966:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    996a:	e79c      	b.n	98a6 <nrfx_gpiote_input_configure+0xee>
            return NRFX_ERROR_INVALID_PARAM;
    996c:	480a      	ldr	r0, [pc, #40]	; (9998 <nrfx_gpiote_input_configure+0x1e0>)
    996e:	e7af      	b.n	98d0 <nrfx_gpiote_input_configure+0x118>
                return NRFX_ERROR_INVALID_PARAM;
    9970:	4809      	ldr	r0, [pc, #36]	; (9998 <nrfx_gpiote_input_configure+0x1e0>)
    9972:	e7ad      	b.n	98d0 <nrfx_gpiote_input_configure+0x118>
                    return NRFX_ERROR_INVALID_PARAM;
    9974:	4808      	ldr	r0, [pc, #32]	; (9998 <nrfx_gpiote_input_configure+0x1e0>)
    9976:	e7ab      	b.n	98d0 <nrfx_gpiote_input_configure+0x118>
        err = NRFX_SUCCESS;
    9978:	4808      	ldr	r0, [pc, #32]	; (999c <nrfx_gpiote_input_configure+0x1e4>)
    997a:	e7a9      	b.n	98d0 <nrfx_gpiote_input_configure+0x118>
    997c:	00012960 	.word	0x00012960
    9980:	00011d64 	.word	0x00011d64
    9984:	000116a8 	.word	0x000116a8
    9988:	00012994 	.word	0x00012994
    998c:	50000300 	.word	0x50000300
    9990:	2000407c 	.word	0x2000407c
    9994:	40006000 	.word	0x40006000
    9998:	0bad0004 	.word	0x0bad0004
    999c:	0bad0000 	.word	0x0bad0000

000099a0 <nrfx_gpiote_output_configure>:
{
    99a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    99a4:	4604      	mov	r4, r0
    99a6:	4615      	mov	r5, r2
    if (p_config)
    99a8:	2900      	cmp	r1, #0
    99aa:	f000 8086 	beq.w	9aba <nrfx_gpiote_output_configure+0x11a>
    99ae:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    99b0:	f006 fd63 	bl	1047a <pin_is_input>
    99b4:	b128      	cbz	r0, 99c2 <nrfx_gpiote_output_configure+0x22>
    99b6:	4620      	mov	r0, r4
    99b8:	f7ff fb8a 	bl	90d0 <pin_in_use_by_te>
    99bc:	2800      	cmp	r0, #0
    99be:	f040 80ce 	bne.w	9b5e <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    99c2:	4620      	mov	r0, r4
    99c4:	f7ff fb8e 	bl	90e4 <pin_has_trigger>
    99c8:	b118      	cbz	r0, 99d2 <nrfx_gpiote_output_configure+0x32>
    99ca:	787b      	ldrb	r3, [r7, #1]
    99cc:	2b01      	cmp	r3, #1
    99ce:	f000 80c8 	beq.w	9b62 <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    99d2:	f107 0901 	add.w	r9, r7, #1
    99d6:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    99da:	0963      	lsrs	r3, r4, #5
    99dc:	d020      	beq.n	9a20 <nrfx_gpiote_output_configure+0x80>
    99de:	2b01      	cmp	r3, #1
    99e0:	d121      	bne.n	9a26 <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    99e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    99e6:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    99ea:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    99ec:	f013 0f01 	tst.w	r3, #1
    99f0:	d01b      	beq.n	9a2a <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    99f2:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    99f6:	0963      	lsrs	r3, r4, #5
    99f8:	d025      	beq.n	9a46 <nrfx_gpiote_output_configure+0xa6>
    99fa:	2b01      	cmp	r3, #1
    99fc:	d026      	beq.n	9a4c <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    99fe:	f8df a170 	ldr.w	sl, [pc, #368]	; 9b70 <nrfx_gpiote_output_configure+0x1d0>
    9a02:	f240 232e 	movw	r3, #558	; 0x22e
    9a06:	4652      	mov	r2, sl
    9a08:	495a      	ldr	r1, [pc, #360]	; (9b74 <nrfx_gpiote_output_configure+0x1d4>)
    9a0a:	485b      	ldr	r0, [pc, #364]	; (9b78 <nrfx_gpiote_output_configure+0x1d8>)
    9a0c:	f005 fc09 	bl	f222 <assert_print>
    9a10:	f240 212e 	movw	r1, #558	; 0x22e
    9a14:	4650      	mov	r0, sl
    9a16:	f005 fbfd 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    9a1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9a1e:	e016      	b.n	9a4e <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    9a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9a24:	e7df      	b.n	99e6 <nrfx_gpiote_output_configure+0x46>
    switch (port)
    9a26:	2300      	movs	r3, #0
    9a28:	e7dd      	b.n	99e6 <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9a2a:	4e51      	ldr	r6, [pc, #324]	; (9b70 <nrfx_gpiote_output_configure+0x1d0>)
    9a2c:	f240 2329 	movw	r3, #553	; 0x229
    9a30:	4632      	mov	r2, r6
    9a32:	4952      	ldr	r1, [pc, #328]	; (9b7c <nrfx_gpiote_output_configure+0x1dc>)
    9a34:	4850      	ldr	r0, [pc, #320]	; (9b78 <nrfx_gpiote_output_configure+0x1d8>)
    9a36:	f005 fbf4 	bl	f222 <assert_print>
    9a3a:	f240 2129 	movw	r1, #553	; 0x229
    9a3e:	4630      	mov	r0, r6
    9a40:	f005 fbe8 	bl	f214 <assert_post_action>
    9a44:	e7d5      	b.n	99f2 <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    9a46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9a4a:	e000      	b.n	9a4e <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9a4c:	4a4c      	ldr	r2, [pc, #304]	; (9b80 <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9a4e:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    9a52:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9a56:	f1b9 0f00 	cmp.w	r9, #0
    9a5a:	d04b      	beq.n	9af4 <nrfx_gpiote_output_configure+0x154>
    9a5c:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9a5e:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9a62:	f1b8 0f00 	cmp.w	r8, #0
    9a66:	d047      	beq.n	9af8 <nrfx_gpiote_output_configure+0x158>
    9a68:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9a6a:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9a6c:	2f00      	cmp	r7, #0
    9a6e:	d045      	beq.n	9afc <nrfx_gpiote_output_configure+0x15c>
    9a70:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9a74:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    9a76:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9a7a:	f1b9 0f00 	cmp.w	r9, #0
    9a7e:	d03f      	beq.n	9b00 <nrfx_gpiote_output_configure+0x160>
    9a80:	787b      	ldrb	r3, [r7, #1]
    9a82:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9a84:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9a88:	f1b8 0f00 	cmp.w	r8, #0
    9a8c:	d03a      	beq.n	9b04 <nrfx_gpiote_output_configure+0x164>
    9a8e:	78b8      	ldrb	r0, [r7, #2]
    9a90:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9a92:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    9a94:	2f00      	cmp	r7, #0
    9a96:	d037      	beq.n	9b08 <nrfx_gpiote_output_configure+0x168>
    9a98:	7838      	ldrb	r0, [r7, #0]
    9a9a:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9a9c:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9a9e:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    9aa0:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    9aa4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    9aa8:	4a36      	ldr	r2, [pc, #216]	; (9b84 <nrfx_gpiote_output_configure+0x1e4>)
    9aaa:	f104 0108 	add.w	r1, r4, #8
    9aae:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    9ab2:	f043 0303 	orr.w	r3, r3, #3
    9ab6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    9aba:	2d00      	cmp	r5, #0
    9abc:	d053      	beq.n	9b66 <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    9abe:	4620      	mov	r0, r4
    9ac0:	f006 fcdb 	bl	1047a <pin_is_input>
    9ac4:	2800      	cmp	r0, #0
    9ac6:	d150      	bne.n	9b6a <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    9ac8:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    9aca:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    9ace:	4a2e      	ldr	r2, [pc, #184]	; (9b88 <nrfx_gpiote_output_configure+0x1e8>)
    9ad0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    9ad4:	492b      	ldr	r1, [pc, #172]	; (9b84 <nrfx_gpiote_output_configure+0x1e4>)
    9ad6:	f104 0008 	add.w	r0, r4, #8
    9ada:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    9ade:	f022 0220 	bic.w	r2, r2, #32
    9ae2:	04d2      	lsls	r2, r2, #19
    9ae4:	0cd2      	lsrs	r2, r2, #19
    9ae6:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    9aea:	786a      	ldrb	r2, [r5, #1]
    9aec:	b972      	cbnz	r2, 9b0c <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    9aee:	4827      	ldr	r0, [pc, #156]	; (9b8c <nrfx_gpiote_output_configure+0x1ec>)
}
    9af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9af4:	2300      	movs	r3, #0
    9af6:	e7b2      	b.n	9a5e <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9af8:	2000      	movs	r0, #0
    9afa:	e7b6      	b.n	9a6a <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9afc:	2000      	movs	r0, #0
    9afe:	e7b9      	b.n	9a74 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9b00:	2300      	movs	r3, #0
    9b02:	e7bf      	b.n	9a84 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9b04:	2000      	movs	r0, #0
    9b06:	e7c4      	b.n	9a92 <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    9b08:	2000      	movs	r0, #0
    9b0a:	e7c7      	b.n	9a9c <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    9b0c:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    9b0e:	481e      	ldr	r0, [pc, #120]	; (9b88 <nrfx_gpiote_output_configure+0x1e8>)
    9b10:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    9b14:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    9b18:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    9b1c:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    9b20:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9b24:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    9b28:	0221      	lsls	r1, r4, #8
    9b2a:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    9b2e:	0412      	lsls	r2, r2, #16
    9b30:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9b34:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    9b36:	0539      	lsls	r1, r7, #20
    9b38:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    9b3c:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9b3e:	4332      	orrs	r2, r6
    9b40:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    9b44:	035b      	lsls	r3, r3, #13
    9b46:	b29b      	uxth	r3, r3
    9b48:	4a0e      	ldr	r2, [pc, #56]	; (9b84 <nrfx_gpiote_output_configure+0x1e4>)
    9b4a:	3408      	adds	r4, #8
    9b4c:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    9b50:	430b      	orrs	r3, r1
    9b52:	f043 0320 	orr.w	r3, r3, #32
    9b56:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    9b5a:	480c      	ldr	r0, [pc, #48]	; (9b8c <nrfx_gpiote_output_configure+0x1ec>)
    9b5c:	e7c8      	b.n	9af0 <nrfx_gpiote_output_configure+0x150>
    9b5e:	480c      	ldr	r0, [pc, #48]	; (9b90 <nrfx_gpiote_output_configure+0x1f0>)
    9b60:	e7c6      	b.n	9af0 <nrfx_gpiote_output_configure+0x150>
    9b62:	480b      	ldr	r0, [pc, #44]	; (9b90 <nrfx_gpiote_output_configure+0x1f0>)
    9b64:	e7c4      	b.n	9af0 <nrfx_gpiote_output_configure+0x150>
    9b66:	4809      	ldr	r0, [pc, #36]	; (9b8c <nrfx_gpiote_output_configure+0x1ec>)
    9b68:	e7c2      	b.n	9af0 <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    9b6a:	4809      	ldr	r0, [pc, #36]	; (9b90 <nrfx_gpiote_output_configure+0x1f0>)
    9b6c:	e7c0      	b.n	9af0 <nrfx_gpiote_output_configure+0x150>
    9b6e:	bf00      	nop
    9b70:	00012960 	.word	0x00012960
    9b74:	00011d64 	.word	0x00011d64
    9b78:	000116a8 	.word	0x000116a8
    9b7c:	00012994 	.word	0x00012994
    9b80:	50000300 	.word	0x50000300
    9b84:	2000407c 	.word	0x2000407c
    9b88:	40006000 	.word	0x40006000
    9b8c:	0bad0000 	.word	0x0bad0000
    9b90:	0bad0004 	.word	0x0bad0004

00009b94 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    9b94:	4b01      	ldr	r3, [pc, #4]	; (9b9c <nrfx_gpiote_global_callback_set+0x8>)
    9b96:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    9b98:	60d9      	str	r1, [r3, #12]
}
    9b9a:	4770      	bx	lr
    9b9c:	2000407c 	.word	0x2000407c

00009ba0 <nrfx_gpiote_channel_get>:
{
    9ba0:	b570      	push	{r4, r5, r6, lr}
    9ba2:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    9ba4:	460d      	mov	r5, r1
    9ba6:	b159      	cbz	r1, 9bc0 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    9ba8:	4620      	mov	r0, r4
    9baa:	f7ff fa91 	bl	90d0 <pin_in_use_by_te>
    9bae:	b1a8      	cbz	r0, 9bdc <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    9bb0:	3408      	adds	r4, #8
    9bb2:	4b0b      	ldr	r3, [pc, #44]	; (9be0 <nrfx_gpiote_channel_get+0x40>)
    9bb4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    9bb8:	0b5b      	lsrs	r3, r3, #13
    9bba:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    9bbc:	4809      	ldr	r0, [pc, #36]	; (9be4 <nrfx_gpiote_channel_get+0x44>)
}
    9bbe:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    9bc0:	4e09      	ldr	r6, [pc, #36]	; (9be8 <nrfx_gpiote_channel_get+0x48>)
    9bc2:	f240 2335 	movw	r3, #565	; 0x235
    9bc6:	4632      	mov	r2, r6
    9bc8:	4908      	ldr	r1, [pc, #32]	; (9bec <nrfx_gpiote_channel_get+0x4c>)
    9bca:	4809      	ldr	r0, [pc, #36]	; (9bf0 <nrfx_gpiote_channel_get+0x50>)
    9bcc:	f005 fb29 	bl	f222 <assert_print>
    9bd0:	f240 2135 	movw	r1, #565	; 0x235
    9bd4:	4630      	mov	r0, r6
    9bd6:	f005 fb1d 	bl	f214 <assert_post_action>
    9bda:	e7e5      	b.n	9ba8 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    9bdc:	4805      	ldr	r0, [pc, #20]	; (9bf4 <nrfx_gpiote_channel_get+0x54>)
    9bde:	e7ee      	b.n	9bbe <nrfx_gpiote_channel_get+0x1e>
    9be0:	2000407c 	.word	0x2000407c
    9be4:	0bad0000 	.word	0x0bad0000
    9be8:	00012bf4 	.word	0x00012bf4
    9bec:	00012c48 	.word	0x00012c48
    9bf0:	000116a8 	.word	0x000116a8
    9bf4:	0bad0004 	.word	0x0bad0004

00009bf8 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    9bf8:	4b10      	ldr	r3, [pc, #64]	; (9c3c <nrfx_gpiote_init+0x44>)
    9bfa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    9bfe:	b10b      	cbz	r3, 9c04 <nrfx_gpiote_init+0xc>
        return err_code;
    9c00:	480f      	ldr	r0, [pc, #60]	; (9c40 <nrfx_gpiote_init+0x48>)
}
    9c02:	4770      	bx	lr
{
    9c04:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    9c06:	4c0d      	ldr	r4, [pc, #52]	; (9c3c <nrfx_gpiote_init+0x44>)
    9c08:	2260      	movs	r2, #96	; 0x60
    9c0a:	2100      	movs	r1, #0
    9c0c:	f104 0010 	add.w	r0, r4, #16
    9c10:	f006 fdd5 	bl	107be <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    9c14:	2006      	movs	r0, #6
    9c16:	f7fc f8f7 	bl	5e08 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9c1a:	4b0a      	ldr	r3, [pc, #40]	; (9c44 <nrfx_gpiote_init+0x4c>)
    9c1c:	2200      	movs	r2, #0
    9c1e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    9c22:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    9c26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    9c2a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    9c2e:	2301      	movs	r3, #1
    9c30:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    9c34:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    9c36:	4804      	ldr	r0, [pc, #16]	; (9c48 <nrfx_gpiote_init+0x50>)
}
    9c38:	bd10      	pop	{r4, pc}
    9c3a:	bf00      	nop
    9c3c:	2000407c 	.word	0x2000407c
    9c40:	0bad0005 	.word	0x0bad0005
    9c44:	40006000 	.word	0x40006000
    9c48:	0bad0000 	.word	0x0bad0000

00009c4c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    9c4c:	4b03      	ldr	r3, [pc, #12]	; (9c5c <nrfx_gpiote_is_init+0x10>)
    9c4e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    9c52:	3800      	subs	r0, #0
    9c54:	bf18      	it	ne
    9c56:	2001      	movne	r0, #1
    9c58:	4770      	bx	lr
    9c5a:	bf00      	nop
    9c5c:	2000407c 	.word	0x2000407c

00009c60 <nrfx_gpiote_channel_free>:
{
    9c60:	b508      	push	{r3, lr}
    9c62:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    9c64:	4801      	ldr	r0, [pc, #4]	; (9c6c <nrfx_gpiote_channel_free+0xc>)
    9c66:	f7ff f855 	bl	8d14 <nrfx_flag32_free>
}
    9c6a:	bd08      	pop	{r3, pc}
    9c6c:	200040ec 	.word	0x200040ec

00009c70 <nrfx_gpiote_channel_alloc>:
{
    9c70:	b508      	push	{r3, lr}
    9c72:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    9c74:	4801      	ldr	r0, [pc, #4]	; (9c7c <nrfx_gpiote_channel_alloc+0xc>)
    9c76:	f7ff f825 	bl	8cc4 <nrfx_flag32_alloc>
}
    9c7a:	bd08      	pop	{r3, pc}
    9c7c:	200040ec 	.word	0x200040ec

00009c80 <nrfx_gpiote_trigger_enable>:
{
    9c80:	b570      	push	{r4, r5, r6, lr}
    9c82:	4604      	mov	r4, r0
    9c84:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    9c86:	f7ff fa2d 	bl	90e4 <pin_has_trigger>
    9c8a:	b1b8      	cbz	r0, 9cbc <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    9c8c:	4620      	mov	r0, r4
    9c8e:	f7ff fa1f 	bl	90d0 <pin_in_use_by_te>
    9c92:	b118      	cbz	r0, 9c9c <nrfx_gpiote_trigger_enable+0x1c>
    9c94:	4620      	mov	r0, r4
    9c96:	f006 fbf0 	bl	1047a <pin_is_input>
    9c9a:	b9e8      	cbnz	r0, 9cd8 <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    9c9c:	2d00      	cmp	r5, #0
    9c9e:	d04c      	beq.n	9d3a <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    9ca0:	f104 0308 	add.w	r3, r4, #8
    9ca4:	4a70      	ldr	r2, [pc, #448]	; (9e68 <nrfx_gpiote_trigger_enable+0x1e8>)
    9ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    9caa:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    9cae:	2b04      	cmp	r3, #4
    9cb0:	f000 8092 	beq.w	9dd8 <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    9cb4:	2b05      	cmp	r3, #5
    9cb6:	d14e      	bne.n	9d56 <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    9cb8:	2602      	movs	r6, #2
    9cba:	e08e      	b.n	9dda <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    9cbc:	4e6b      	ldr	r6, [pc, #428]	; (9e6c <nrfx_gpiote_trigger_enable+0x1ec>)
    9cbe:	f240 33df 	movw	r3, #991	; 0x3df
    9cc2:	4632      	mov	r2, r6
    9cc4:	496a      	ldr	r1, [pc, #424]	; (9e70 <nrfx_gpiote_trigger_enable+0x1f0>)
    9cc6:	486b      	ldr	r0, [pc, #428]	; (9e74 <nrfx_gpiote_trigger_enable+0x1f4>)
    9cc8:	f005 faab 	bl	f222 <assert_print>
    9ccc:	f240 31df 	movw	r1, #991	; 0x3df
    9cd0:	4630      	mov	r0, r6
    9cd2:	f005 fa9f 	bl	f214 <assert_post_action>
    9cd6:	e7d9      	b.n	9c8c <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    9cd8:	4620      	mov	r0, r4
    9cda:	f7ff fa19 	bl	9110 <pin_te_get>
    9cde:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    9ce0:	2807      	cmp	r0, #7
    9ce2:	d81c      	bhi.n	9d1e <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    9ce4:	00a3      	lsls	r3, r4, #2
    9ce6:	f503 7380 	add.w	r3, r3, #256	; 0x100
    9cea:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    9cec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9cf0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9cf4:	2200      	movs	r2, #0
    9cf6:	601a      	str	r2, [r3, #0]
    9cf8:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    9cfa:	4a5f      	ldr	r2, [pc, #380]	; (9e78 <nrfx_gpiote_trigger_enable+0x1f8>)
    9cfc:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    9d00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    9d04:	f043 0301 	orr.w	r3, r3, #1
    9d08:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    9d0c:	2d00      	cmp	r5, #0
    9d0e:	f000 80a9 	beq.w	9e64 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    9d12:	2001      	movs	r0, #1
    9d14:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    9d18:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    9d1c:	e0a2      	b.n	9e64 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    9d1e:	4e57      	ldr	r6, [pc, #348]	; (9e7c <nrfx_gpiote_trigger_enable+0x1fc>)
    9d20:	f44f 7323 	mov.w	r3, #652	; 0x28c
    9d24:	4632      	mov	r2, r6
    9d26:	4956      	ldr	r1, [pc, #344]	; (9e80 <nrfx_gpiote_trigger_enable+0x200>)
    9d28:	4852      	ldr	r0, [pc, #328]	; (9e74 <nrfx_gpiote_trigger_enable+0x1f4>)
    9d2a:	f005 fa7a 	bl	f222 <assert_print>
    9d2e:	f44f 7123 	mov.w	r1, #652	; 0x28c
    9d32:	4630      	mov	r0, r6
    9d34:	f005 fa6e 	bl	f214 <assert_post_action>
    9d38:	e7d4      	b.n	9ce4 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    9d3a:	4d4c      	ldr	r5, [pc, #304]	; (9e6c <nrfx_gpiote_trigger_enable+0x1ec>)
    9d3c:	f240 33ee 	movw	r3, #1006	; 0x3ee
    9d40:	462a      	mov	r2, r5
    9d42:	4950      	ldr	r1, [pc, #320]	; (9e84 <nrfx_gpiote_trigger_enable+0x204>)
    9d44:	484b      	ldr	r0, [pc, #300]	; (9e74 <nrfx_gpiote_trigger_enable+0x1f4>)
    9d46:	f005 fa6c 	bl	f222 <assert_print>
    9d4a:	f240 31ee 	movw	r1, #1006	; 0x3ee
    9d4e:	4628      	mov	r0, r5
    9d50:	f005 fa60 	bl	f214 <assert_post_action>
    9d54:	e7a4      	b.n	9ca0 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    9d56:	0963      	lsrs	r3, r4, #5
    9d58:	d01f      	beq.n	9d9a <nrfx_gpiote_trigger_enable+0x11a>
    9d5a:	2b01      	cmp	r3, #1
    9d5c:	d120      	bne.n	9da0 <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    9d5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9d62:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9d66:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9d68:	f013 0f01 	tst.w	r3, #1
    9d6c:	d01a      	beq.n	9da4 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    9d6e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9d72:	0963      	lsrs	r3, r4, #5
    9d74:	d024      	beq.n	9dc0 <nrfx_gpiote_trigger_enable+0x140>
    9d76:	2b01      	cmp	r3, #1
    9d78:	d025      	beq.n	9dc6 <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    9d7a:	4e43      	ldr	r6, [pc, #268]	; (9e88 <nrfx_gpiote_trigger_enable+0x208>)
    9d7c:	f240 232e 	movw	r3, #558	; 0x22e
    9d80:	4632      	mov	r2, r6
    9d82:	4942      	ldr	r1, [pc, #264]	; (9e8c <nrfx_gpiote_trigger_enable+0x20c>)
    9d84:	483b      	ldr	r0, [pc, #236]	; (9e74 <nrfx_gpiote_trigger_enable+0x1f4>)
    9d86:	f005 fa4c 	bl	f222 <assert_print>
    9d8a:	f240 212e 	movw	r1, #558	; 0x22e
    9d8e:	4630      	mov	r0, r6
    9d90:	f005 fa40 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    9d94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9d98:	e016      	b.n	9dc8 <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    9d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9d9e:	e7e0      	b.n	9d62 <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    9da0:	2300      	movs	r3, #0
    9da2:	e7de      	b.n	9d62 <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9da4:	4d38      	ldr	r5, [pc, #224]	; (9e88 <nrfx_gpiote_trigger_enable+0x208>)
    9da6:	f240 2329 	movw	r3, #553	; 0x229
    9daa:	462a      	mov	r2, r5
    9dac:	4938      	ldr	r1, [pc, #224]	; (9e90 <nrfx_gpiote_trigger_enable+0x210>)
    9dae:	4831      	ldr	r0, [pc, #196]	; (9e74 <nrfx_gpiote_trigger_enable+0x1f4>)
    9db0:	f005 fa37 	bl	f222 <assert_print>
    9db4:	f240 2129 	movw	r1, #553	; 0x229
    9db8:	4628      	mov	r0, r5
    9dba:	f005 fa2b 	bl	f214 <assert_post_action>
    9dbe:	e7d6      	b.n	9d6e <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    9dc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9dc4:	e000      	b.n	9dc8 <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9dc6:	4b33      	ldr	r3, [pc, #204]	; (9e94 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    9dc8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    9dcc:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9dce:	f013 0f01 	tst.w	r3, #1
    9dd2:	d024      	beq.n	9e1e <nrfx_gpiote_trigger_enable+0x19e>
    9dd4:	2603      	movs	r6, #3
    9dd6:	e000      	b.n	9dda <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    9dd8:	2603      	movs	r6, #3
    switch (port)
    9dda:	0963      	lsrs	r3, r4, #5
    9ddc:	d021      	beq.n	9e22 <nrfx_gpiote_trigger_enable+0x1a2>
    9dde:	2b01      	cmp	r3, #1
    9de0:	d122      	bne.n	9e28 <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    9de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9de6:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9dea:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9dec:	f013 0f01 	tst.w	r3, #1
    9df0:	d01c      	beq.n	9e2c <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    9df2:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9df6:	0964      	lsrs	r4, r4, #5
    9df8:	d026      	beq.n	9e48 <nrfx_gpiote_trigger_enable+0x1c8>
    9dfa:	2c01      	cmp	r4, #1
    9dfc:	d027      	beq.n	9e4e <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    9dfe:	4c22      	ldr	r4, [pc, #136]	; (9e88 <nrfx_gpiote_trigger_enable+0x208>)
    9e00:	f240 232e 	movw	r3, #558	; 0x22e
    9e04:	4622      	mov	r2, r4
    9e06:	4921      	ldr	r1, [pc, #132]	; (9e8c <nrfx_gpiote_trigger_enable+0x20c>)
    9e08:	481a      	ldr	r0, [pc, #104]	; (9e74 <nrfx_gpiote_trigger_enable+0x1f4>)
    9e0a:	f005 fa0a 	bl	f222 <assert_print>
    9e0e:	f240 212e 	movw	r1, #558	; 0x22e
    9e12:	4620      	mov	r0, r4
    9e14:	f005 f9fe 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    9e18:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9e1c:	e018      	b.n	9e50 <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9e1e:	2602      	movs	r6, #2
    9e20:	e7db      	b.n	9dda <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    9e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9e26:	e7de      	b.n	9de6 <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    9e28:	2300      	movs	r3, #0
    9e2a:	e7dc      	b.n	9de6 <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9e2c:	4d16      	ldr	r5, [pc, #88]	; (9e88 <nrfx_gpiote_trigger_enable+0x208>)
    9e2e:	f240 2329 	movw	r3, #553	; 0x229
    9e32:	462a      	mov	r2, r5
    9e34:	4916      	ldr	r1, [pc, #88]	; (9e90 <nrfx_gpiote_trigger_enable+0x210>)
    9e36:	480f      	ldr	r0, [pc, #60]	; (9e74 <nrfx_gpiote_trigger_enable+0x1f4>)
    9e38:	f005 f9f3 	bl	f222 <assert_print>
    9e3c:	f240 2129 	movw	r1, #553	; 0x229
    9e40:	4628      	mov	r0, r5
    9e42:	f005 f9e7 	bl	f214 <assert_post_action>
    9e46:	e7d4      	b.n	9df2 <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    9e48:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9e4c:	e000      	b.n	9e50 <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9e4e:	4911      	ldr	r1, [pc, #68]	; (9e94 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9e50:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    9e54:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    9e58:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9e5c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    9e60:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    9e64:	bd70      	pop	{r4, r5, r6, pc}
    9e66:	bf00      	nop
    9e68:	2000407c 	.word	0x2000407c
    9e6c:	00012bf4 	.word	0x00012bf4
    9e70:	00012c98 	.word	0x00012c98
    9e74:	000116a8 	.word	0x000116a8
    9e78:	40006000 	.word	0x40006000
    9e7c:	00012c54 	.word	0x00012c54
    9e80:	00012c8c 	.word	0x00012c8c
    9e84:	00012cb0 	.word	0x00012cb0
    9e88:	00012960 	.word	0x00012960
    9e8c:	00011d64 	.word	0x00011d64
    9e90:	00012994 	.word	0x00012994
    9e94:	50000300 	.word	0x50000300

00009e98 <nrfx_gpiote_trigger_disable>:
{
    9e98:	b538      	push	{r3, r4, r5, lr}
    9e9a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    9e9c:	f7ff f918 	bl	90d0 <pin_in_use_by_te>
    9ea0:	b1a0      	cbz	r0, 9ecc <nrfx_gpiote_trigger_disable+0x34>
    9ea2:	4620      	mov	r0, r4
    9ea4:	f006 fae9 	bl	1047a <pin_is_input>
    9ea8:	b180      	cbz	r0, 9ecc <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    9eaa:	4620      	mov	r0, r4
    9eac:	f7ff f930 	bl	9110 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    9eb0:	2201      	movs	r2, #1
    9eb2:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    9eb4:	4b26      	ldr	r3, [pc, #152]	; (9f50 <nrfx_gpiote_trigger_disable+0xb8>)
    9eb6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    9eba:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    9ebe:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    9ec2:	f022 0203 	bic.w	r2, r2, #3
    9ec6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    9eca:	e040      	b.n	9f4e <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    9ecc:	0963      	lsrs	r3, r4, #5
    9ece:	d01f      	beq.n	9f10 <nrfx_gpiote_trigger_disable+0x78>
    9ed0:	2b01      	cmp	r3, #1
    9ed2:	d120      	bne.n	9f16 <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    9ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9ed8:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9edc:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9ede:	f013 0f01 	tst.w	r3, #1
    9ee2:	d01a      	beq.n	9f1a <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    9ee4:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9ee8:	0964      	lsrs	r4, r4, #5
    9eea:	d024      	beq.n	9f36 <nrfx_gpiote_trigger_disable+0x9e>
    9eec:	2c01      	cmp	r4, #1
    9eee:	d025      	beq.n	9f3c <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    9ef0:	4c18      	ldr	r4, [pc, #96]	; (9f54 <nrfx_gpiote_trigger_disable+0xbc>)
    9ef2:	f240 232e 	movw	r3, #558	; 0x22e
    9ef6:	4622      	mov	r2, r4
    9ef8:	4917      	ldr	r1, [pc, #92]	; (9f58 <nrfx_gpiote_trigger_disable+0xc0>)
    9efa:	4818      	ldr	r0, [pc, #96]	; (9f5c <nrfx_gpiote_trigger_disable+0xc4>)
    9efc:	f005 f991 	bl	f222 <assert_print>
    9f00:	f240 212e 	movw	r1, #558	; 0x22e
    9f04:	4620      	mov	r0, r4
    9f06:	f005 f985 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    9f0a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9f0e:	e016      	b.n	9f3e <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    9f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9f14:	e7e0      	b.n	9ed8 <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    9f16:	2300      	movs	r3, #0
    9f18:	e7de      	b.n	9ed8 <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9f1a:	4d0e      	ldr	r5, [pc, #56]	; (9f54 <nrfx_gpiote_trigger_disable+0xbc>)
    9f1c:	f240 2329 	movw	r3, #553	; 0x229
    9f20:	462a      	mov	r2, r5
    9f22:	490f      	ldr	r1, [pc, #60]	; (9f60 <nrfx_gpiote_trigger_disable+0xc8>)
    9f24:	480d      	ldr	r0, [pc, #52]	; (9f5c <nrfx_gpiote_trigger_disable+0xc4>)
    9f26:	f005 f97c 	bl	f222 <assert_print>
    9f2a:	f240 2129 	movw	r1, #553	; 0x229
    9f2e:	4628      	mov	r0, r5
    9f30:	f005 f970 	bl	f214 <assert_post_action>
    9f34:	e7d6      	b.n	9ee4 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    9f36:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9f3a:	e000      	b.n	9f3e <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9f3c:	4909      	ldr	r1, [pc, #36]	; (9f64 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9f3e:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    9f42:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    9f46:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    9f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9f4e:	bd38      	pop	{r3, r4, r5, pc}
    9f50:	40006000 	.word	0x40006000
    9f54:	00012960 	.word	0x00012960
    9f58:	00011d64 	.word	0x00011d64
    9f5c:	000116a8 	.word	0x000116a8
    9f60:	00012994 	.word	0x00012994
    9f64:	50000300 	.word	0x50000300

00009f68 <nrfx_gpiote_pin_uninit>:
{
    9f68:	b538      	push	{r3, r4, r5, lr}
    9f6a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    9f6c:	f7ff f8a6 	bl	90bc <pin_in_use>
    9f70:	b908      	cbnz	r0, 9f76 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    9f72:	4824      	ldr	r0, [pc, #144]	; (a004 <nrfx_gpiote_pin_uninit+0x9c>)
}
    9f74:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    9f76:	4620      	mov	r0, r4
    9f78:	f7ff ff8e 	bl	9e98 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    9f7c:	4620      	mov	r0, r4
    9f7e:	f7ff f95f 	bl	9240 <pin_handler_trigger_uninit>
    switch (port)
    9f82:	0963      	lsrs	r3, r4, #5
    9f84:	d01f      	beq.n	9fc6 <nrfx_gpiote_pin_uninit+0x5e>
    9f86:	2b01      	cmp	r3, #1
    9f88:	d120      	bne.n	9fcc <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    9f8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9f8e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9f92:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9f94:	f013 0f01 	tst.w	r3, #1
    9f98:	d01a      	beq.n	9fd0 <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    9f9a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9f9e:	0964      	lsrs	r4, r4, #5
    9fa0:	d024      	beq.n	9fec <nrfx_gpiote_pin_uninit+0x84>
    9fa2:	2c01      	cmp	r4, #1
    9fa4:	d025      	beq.n	9ff2 <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    9fa6:	4c18      	ldr	r4, [pc, #96]	; (a008 <nrfx_gpiote_pin_uninit+0xa0>)
    9fa8:	f240 232e 	movw	r3, #558	; 0x22e
    9fac:	4622      	mov	r2, r4
    9fae:	4917      	ldr	r1, [pc, #92]	; (a00c <nrfx_gpiote_pin_uninit+0xa4>)
    9fb0:	4817      	ldr	r0, [pc, #92]	; (a010 <nrfx_gpiote_pin_uninit+0xa8>)
    9fb2:	f005 f936 	bl	f222 <assert_print>
    9fb6:	f240 212e 	movw	r1, #558	; 0x22e
    9fba:	4620      	mov	r0, r4
    9fbc:	f005 f92a 	bl	f214 <assert_post_action>
        case 0: return NRF_P0;
    9fc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9fc4:	e016      	b.n	9ff4 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    9fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9fca:	e7e0      	b.n	9f8e <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    9fcc:	2300      	movs	r3, #0
    9fce:	e7de      	b.n	9f8e <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9fd0:	4d0d      	ldr	r5, [pc, #52]	; (a008 <nrfx_gpiote_pin_uninit+0xa0>)
    9fd2:	f240 2329 	movw	r3, #553	; 0x229
    9fd6:	462a      	mov	r2, r5
    9fd8:	490e      	ldr	r1, [pc, #56]	; (a014 <nrfx_gpiote_pin_uninit+0xac>)
    9fda:	480d      	ldr	r0, [pc, #52]	; (a010 <nrfx_gpiote_pin_uninit+0xa8>)
    9fdc:	f005 f921 	bl	f222 <assert_print>
    9fe0:	f240 2129 	movw	r1, #553	; 0x229
    9fe4:	4628      	mov	r0, r5
    9fe6:	f005 f915 	bl	f214 <assert_post_action>
    9fea:	e7d6      	b.n	9f9a <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    9fec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9ff0:	e000      	b.n	9ff4 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9ff2:	4b09      	ldr	r3, [pc, #36]	; (a018 <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    9ff4:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    9ff8:	2202      	movs	r2, #2
    9ffa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    9ffe:	4807      	ldr	r0, [pc, #28]	; (a01c <nrfx_gpiote_pin_uninit+0xb4>)
}
    a000:	e7b8      	b.n	9f74 <nrfx_gpiote_pin_uninit+0xc>
    a002:	bf00      	nop
    a004:	0bad0004 	.word	0x0bad0004
    a008:	00012960 	.word	0x00012960
    a00c:	00011d64 	.word	0x00011d64
    a010:	000116a8 	.word	0x000116a8
    a014:	00012994 	.word	0x00012994
    a018:	50000300 	.word	0x50000300
    a01c:	0bad0000 	.word	0x0bad0000

0000a020 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    a020:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    a022:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    a024:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    a028:	2100      	movs	r1, #0
    uint32_t status = 0;
    a02a:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    a02c:	e003      	b.n	a036 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    a02e:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    a030:	3304      	adds	r3, #4
    a032:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    a034:	3101      	adds	r1, #1
    a036:	2907      	cmp	r1, #7
    a038:	d814      	bhi.n	a064 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a03a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    a03e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    a042:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    a044:	2a00      	cmp	r2, #0
    a046:	d0f2      	beq.n	a02e <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    a048:	4a0c      	ldr	r2, [pc, #48]	; (a07c <nrfx_gpiote_irq_handler+0x5c>)
    a04a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    a04e:	4210      	tst	r0, r2
    a050:	d0ed      	beq.n	a02e <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    a052:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    a056:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    a05a:	2500      	movs	r5, #0
    a05c:	6015      	str	r5, [r2, #0]
    a05e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    a060:	4304      	orrs	r4, r0
    a062:	e7e4      	b.n	a02e <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a064:	4b05      	ldr	r3, [pc, #20]	; (a07c <nrfx_gpiote_irq_handler+0x5c>)
    a066:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    a06a:	b91b      	cbnz	r3, a074 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    a06c:	4620      	mov	r0, r4
    a06e:	f7ff f939 	bl	92e4 <gpiote_evt_handle>
}
    a072:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    a074:	f7ff fac2 	bl	95fc <port_event_handle>
    a078:	e7f8      	b.n	a06c <nrfx_gpiote_irq_handler+0x4c>
    a07a:	bf00      	nop
    a07c:	40006000 	.word	0x40006000

0000a080 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    a080:	b508      	push	{r3, lr}
    a082:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    a084:	4801      	ldr	r0, [pc, #4]	; (a08c <nrfx_ppi_channel_alloc+0xc>)
    a086:	f7fe fe1d 	bl	8cc4 <nrfx_flag32_alloc>
}
    a08a:	bd08      	pop	{r3, pc}
    a08c:	200040f8 	.word	0x200040f8

0000a090 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    a090:	4b12      	ldr	r3, [pc, #72]	; (a0dc <_DoInit+0x4c>)
    a092:	2203      	movs	r2, #3
    a094:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    a096:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    a098:	4911      	ldr	r1, [pc, #68]	; (a0e0 <_DoInit+0x50>)
    a09a:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    a09c:	4a11      	ldr	r2, [pc, #68]	; (a0e4 <_DoInit+0x54>)
    a09e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    a0a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a0a4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    a0a6:	2200      	movs	r2, #0
    a0a8:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    a0aa:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    a0ac:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    a0ae:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    a0b0:	490d      	ldr	r1, [pc, #52]	; (a0e8 <_DoInit+0x58>)
    a0b2:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    a0b4:	2110      	movs	r1, #16
    a0b6:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    a0b8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    a0ba:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    a0bc:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    a0be:	4a0b      	ldr	r2, [pc, #44]	; (a0ec <_DoInit+0x5c>)
    a0c0:	6810      	ldr	r0, [r2, #0]
    a0c2:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    a0c6:	4a0a      	ldr	r2, [pc, #40]	; (a0f0 <_DoInit+0x60>)
    a0c8:	e892 0003 	ldmia.w	r2, {r0, r1}
    a0cc:	6018      	str	r0, [r3, #0]
    a0ce:	8099      	strh	r1, [r3, #4]
    a0d0:	0c09      	lsrs	r1, r1, #16
    a0d2:	7199      	strb	r1, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    a0d4:	2220      	movs	r2, #32
    a0d6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    a0d8:	4770      	bx	lr
    a0da:	bf00      	nop
    a0dc:	2000d028 	.word	0x2000d028
    a0e0:	00012cbc 	.word	0x00012cbc
    a0e4:	2000d0e0 	.word	0x2000d0e0
    a0e8:	2000d0d0 	.word	0x2000d0d0
    a0ec:	00012cc8 	.word	0x00012cc8
    a0f0:	00012ccc 	.word	0x00012ccc

0000a0f4 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    a0f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a0f8:	4604      	mov	r4, r0
    a0fa:	460e      	mov	r6, r1
    a0fc:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    a0fe:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    a102:	4a2d      	ldr	r2, [pc, #180]	; (a1b8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a104:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    a108:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    a10a:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    a10c:	42bb      	cmp	r3, r7
    a10e:	d84b      	bhi.n	a1a8 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    a110:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    a114:	4928      	ldr	r1, [pc, #160]	; (a1b8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a116:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    a11a:	f8d2 8020 	ldr.w	r8, [r2, #32]
    a11e:	eba8 0907 	sub.w	r9, r8, r7
    a122:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    a126:	4295      	cmp	r5, r2
    a128:	d904      	bls.n	a134 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    a12a:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    a12c:	429d      	cmp	r5, r3
    a12e:	d917      	bls.n	a160 <SEGGER_RTT_WriteSkipNoLock+0x6c>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    a130:	2000      	movs	r0, #0
    a132:	e03e      	b.n	a1b2 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a134:	f8df 8080 	ldr.w	r8, [pc, #128]	; a1b8 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    a138:	1c63      	adds	r3, r4, #1
    a13a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a13e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    a142:	6858      	ldr	r0, [r3, #4]
    a144:	462a      	mov	r2, r5
    a146:	4631      	mov	r1, r6
    a148:	4438      	add	r0, r7
    a14a:	f006 fb2a 	bl	107a2 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    a14e:	443d      	add	r5, r7
    a150:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a154:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
    a158:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
      return 1;
    a15c:	2001      	movs	r0, #1
    a15e:	e028      	b.n	a1b2 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a160:	1c43      	adds	r3, r0, #1
    a162:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a166:	4a14      	ldr	r2, [pc, #80]	; (a1b8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a168:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    a16c:	6858      	ldr	r0, [r3, #4]
    a16e:	464a      	mov	r2, r9
    a170:	4631      	mov	r1, r6
    a172:	4438      	add	r0, r7
    a174:	f006 fb15 	bl	107a2 <memcpy>
      NumBytes -= Rem;
    a178:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    a17c:	197f      	adds	r7, r7, r5
    a17e:	d00b      	beq.n	a198 <SEGGER_RTT_WriteSkipNoLock+0xa4>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    a180:	1c63      	adds	r3, r4, #1
    a182:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a186:	4a0c      	ldr	r2, [pc, #48]	; (a1b8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a188:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    a18c:	463a      	mov	r2, r7
    a18e:	eb06 0109 	add.w	r1, r6, r9
    a192:	6858      	ldr	r0, [r3, #4]
    a194:	f006 fb05 	bl	107a2 <memcpy>
      pRing->WrOff = NumBytes;
    a198:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a19c:	4b06      	ldr	r3, [pc, #24]	; (a1b8 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a19e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    a1a2:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    a1a4:	2001      	movs	r0, #1
    a1a6:	e004      	b.n	a1b2 <SEGGER_RTT_WriteSkipNoLock+0xbe>
    Avail = RdOff - WrOff - 1u;
    a1a8:	1bdb      	subs	r3, r3, r7
    a1aa:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    a1ac:	42ab      	cmp	r3, r5
    a1ae:	d2c1      	bcs.n	a134 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    a1b0:	2000      	movs	r0, #0
}
    a1b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a1b6:	bf00      	nop
    a1b8:	2000d028 	.word	0x2000d028

0000a1bc <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    a1bc:	4b06      	ldr	r3, [pc, #24]	; (a1d8 <SEGGER_RTT_HasDataUp+0x1c>)
    a1be:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    a1c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    a1c6:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    a1c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a1cc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    a1d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    a1d2:	1a80      	subs	r0, r0, r2
    a1d4:	4770      	bx	lr
    a1d6:	bf00      	nop
    a1d8:	2000d028 	.word	0x2000d028

0000a1dc <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    a1dc:	4b03      	ldr	r3, [pc, #12]	; (a1ec <z_device_state_init+0x10>)

	while (dev < __device_end) {
    a1de:	e000      	b.n	a1e2 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    a1e0:	3318      	adds	r3, #24
	while (dev < __device_end) {
    a1e2:	4a03      	ldr	r2, [pc, #12]	; (a1f0 <z_device_state_init+0x14>)
    a1e4:	4293      	cmp	r3, r2
    a1e6:	d3fb      	bcc.n	a1e0 <z_device_state_init+0x4>
	}
}
    a1e8:	4770      	bx	lr
    a1ea:	bf00      	nop
    a1ec:	00010de4 	.word	0x00010de4
    a1f0:	00010e5c 	.word	0x00010e5c

0000a1f4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    a1f4:	b570      	push	{r4, r5, r6, lr}
    a1f6:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a1f8:	4b11      	ldr	r3, [pc, #68]	; (a240 <z_sys_init_run_level+0x4c>)
    a1fa:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    a1fe:	e009      	b.n	a214 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    a200:	4240      	negs	r0, r0
    a202:	e017      	b.n	a234 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    a204:	68eb      	ldr	r3, [r5, #12]
    a206:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    a208:	68ea      	ldr	r2, [r5, #12]
    a20a:	7853      	ldrb	r3, [r2, #1]
    a20c:	f043 0301 	orr.w	r3, r3, #1
    a210:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a212:	3408      	adds	r4, #8
    a214:	1c73      	adds	r3, r6, #1
    a216:	4a0a      	ldr	r2, [pc, #40]	; (a240 <z_sys_init_run_level+0x4c>)
    a218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a21c:	42a3      	cmp	r3, r4
    a21e:	d90d      	bls.n	a23c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    a220:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    a222:	6823      	ldr	r3, [r4, #0]
    a224:	4628      	mov	r0, r5
    a226:	4798      	blx	r3
		if (dev != NULL) {
    a228:	2d00      	cmp	r5, #0
    a22a:	d0f2      	beq.n	a212 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    a22c:	2800      	cmp	r0, #0
    a22e:	d0eb      	beq.n	a208 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    a230:	2800      	cmp	r0, #0
    a232:	dbe5      	blt.n	a200 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    a234:	28ff      	cmp	r0, #255	; 0xff
    a236:	dde5      	ble.n	a204 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    a238:	20ff      	movs	r0, #255	; 0xff
    a23a:	e7e3      	b.n	a204 <z_sys_init_run_level+0x10>
		}
	}
}
    a23c:	bd70      	pop	{r4, r5, r6, pc}
    a23e:	bf00      	nop
    a240:	00012cd4 	.word	0x00012cd4

0000a244 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    a244:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    a246:	4605      	mov	r5, r0
    a248:	b328      	cbz	r0, a296 <z_impl_device_get_binding+0x52>
    a24a:	7803      	ldrb	r3, [r0, #0]
    a24c:	b32b      	cbz	r3, a29a <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    a24e:	4c14      	ldr	r4, [pc, #80]	; (a2a0 <z_impl_device_get_binding+0x5c>)
    a250:	e000      	b.n	a254 <z_impl_device_get_binding+0x10>
    a252:	3418      	adds	r4, #24
    a254:	4b13      	ldr	r3, [pc, #76]	; (a2a4 <z_impl_device_get_binding+0x60>)
    a256:	429c      	cmp	r4, r3
    a258:	d008      	beq.n	a26c <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    a25a:	4620      	mov	r0, r4
    a25c:	f006 f924 	bl	104a8 <z_device_is_ready>
    a260:	2800      	cmp	r0, #0
    a262:	d0f6      	beq.n	a252 <z_impl_device_get_binding+0xe>
    a264:	6823      	ldr	r3, [r4, #0]
    a266:	42ab      	cmp	r3, r5
    a268:	d1f3      	bne.n	a252 <z_impl_device_get_binding+0xe>
    a26a:	e012      	b.n	a292 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    a26c:	4c0c      	ldr	r4, [pc, #48]	; (a2a0 <z_impl_device_get_binding+0x5c>)
    a26e:	e000      	b.n	a272 <z_impl_device_get_binding+0x2e>
    a270:	3418      	adds	r4, #24
    a272:	4b0c      	ldr	r3, [pc, #48]	; (a2a4 <z_impl_device_get_binding+0x60>)
    a274:	429c      	cmp	r4, r3
    a276:	d00b      	beq.n	a290 <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    a278:	4620      	mov	r0, r4
    a27a:	f006 f915 	bl	104a8 <z_device_is_ready>
    a27e:	2800      	cmp	r0, #0
    a280:	d0f6      	beq.n	a270 <z_impl_device_get_binding+0x2c>
    a282:	6821      	ldr	r1, [r4, #0]
    a284:	4628      	mov	r0, r5
    a286:	f7f6 fddc 	bl	e42 <strcmp>
    a28a:	2800      	cmp	r0, #0
    a28c:	d1f0      	bne.n	a270 <z_impl_device_get_binding+0x2c>
    a28e:	e000      	b.n	a292 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    a290:	2400      	movs	r4, #0
}
    a292:	4620      	mov	r0, r4
    a294:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    a296:	4604      	mov	r4, r0
    a298:	e7fb      	b.n	a292 <z_impl_device_get_binding+0x4e>
    a29a:	2400      	movs	r4, #0
    a29c:	e7f9      	b.n	a292 <z_impl_device_get_binding+0x4e>
    a29e:	bf00      	nop
    a2a0:	00010de4 	.word	0x00010de4
    a2a4:	00010e5c 	.word	0x00010e5c

0000a2a8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    a2a8:	4b01      	ldr	r3, [pc, #4]	; (a2b0 <z_impl_z_errno+0x8>)
    a2aa:	6898      	ldr	r0, [r3, #8]
}
    a2ac:	3094      	adds	r0, #148	; 0x94
    a2ae:	4770      	bx	lr
    a2b0:	2000d4e0 	.word	0x2000d4e0

0000a2b4 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    a2b4:	2804      	cmp	r0, #4
    a2b6:	d80c      	bhi.n	a2d2 <reason_to_str+0x1e>
    a2b8:	e8df f000 	tbb	[pc, r0]
    a2bc:	07050d03 	.word	0x07050d03
    a2c0:	09          	.byte	0x09
    a2c1:	00          	.byte	0x00
    a2c2:	4806      	ldr	r0, [pc, #24]	; (a2dc <reason_to_str+0x28>)
    a2c4:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    a2c6:	4806      	ldr	r0, [pc, #24]	; (a2e0 <reason_to_str+0x2c>)
    a2c8:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    a2ca:	4806      	ldr	r0, [pc, #24]	; (a2e4 <reason_to_str+0x30>)
    a2cc:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    a2ce:	4806      	ldr	r0, [pc, #24]	; (a2e8 <reason_to_str+0x34>)
    a2d0:	4770      	bx	lr
	default:
		return "Unknown error";
    a2d2:	4806      	ldr	r0, [pc, #24]	; (a2ec <reason_to_str+0x38>)
    a2d4:	4770      	bx	lr
		return "Unhandled interrupt";
    a2d6:	4806      	ldr	r0, [pc, #24]	; (a2f0 <reason_to_str+0x3c>)
	}
}
    a2d8:	4770      	bx	lr
    a2da:	bf00      	nop
    a2dc:	00012d3c 	.word	0x00012d3c
    a2e0:	00012d10 	.word	0x00012d10
    a2e4:	00012d20 	.word	0x00012d20
    a2e8:	00012d2c 	.word	0x00012d2c
    a2ec:	00012cec 	.word	0x00012cec
    a2f0:	00012cfc 	.word	0x00012cfc

0000a2f4 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a2f4:	b130      	cbz	r0, a304 <thread_name_get+0x10>
{
    a2f6:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a2f8:	f006 f938 	bl	1056c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    a2fc:	b120      	cbz	r0, a308 <thread_name_get+0x14>
    a2fe:	7803      	ldrb	r3, [r0, #0]
    a300:	b123      	cbz	r3, a30c <thread_name_get+0x18>
}
    a302:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    a304:	4802      	ldr	r0, [pc, #8]	; (a310 <thread_name_get+0x1c>)
}
    a306:	4770      	bx	lr
		thread_name = "unknown";
    a308:	4801      	ldr	r0, [pc, #4]	; (a310 <thread_name_get+0x1c>)
    a30a:	e7fa      	b.n	a302 <thread_name_get+0xe>
    a30c:	4800      	ldr	r0, [pc, #0]	; (a310 <thread_name_get+0x1c>)
	return thread_name;
    a30e:	e7f8      	b.n	a302 <thread_name_get+0xe>
    a310:	00012d4c 	.word	0x00012d4c

0000a314 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a314:	b5f0      	push	{r4, r5, r6, r7, lr}
    a316:	b087      	sub	sp, #28
    a318:	4604      	mov	r4, r0
    a31a:	460e      	mov	r6, r1
	__asm__ volatile(
    a31c:	f04f 0320 	mov.w	r3, #32
    a320:	f3ef 8711 	mrs	r7, BASEPRI
    a324:	f383 8812 	msr	BASEPRI_MAX, r3
    a328:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    a32c:	f002 f9d2 	bl	c6d4 <z_impl_z_current_get>
    a330:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a332:	4620      	mov	r0, r4
    a334:	f7ff ffbe 	bl	a2b4 <reason_to_str>
    a338:	2300      	movs	r3, #0
    a33a:	9305      	str	r3, [sp, #20]
    a33c:	9004      	str	r0, [sp, #16]
    a33e:	9403      	str	r4, [sp, #12]
    a340:	4a22      	ldr	r2, [pc, #136]	; (a3cc <z_fatal_error+0xb8>)
    a342:	9202      	str	r2, [sp, #8]
    a344:	9301      	str	r3, [sp, #4]
    a346:	9300      	str	r3, [sp, #0]
    a348:	2201      	movs	r2, #1
    a34a:	4921      	ldr	r1, [pc, #132]	; (a3d0 <z_fatal_error+0xbc>)
    a34c:	4618      	mov	r0, r3
    a34e:	f006 f8b8 	bl	104c2 <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    a352:	b11e      	cbz	r6, a35c <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    a354:	69f3      	ldr	r3, [r6, #28]
    a356:	f3c3 0308 	ubfx	r3, r3, #0, #9
    a35a:	b9eb      	cbnz	r3, a398 <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    a35c:	4628      	mov	r0, r5
    a35e:	f7ff ffc9 	bl	a2f4 <thread_name_get>
    a362:	9004      	str	r0, [sp, #16]
    a364:	9503      	str	r5, [sp, #12]
    a366:	4b1b      	ldr	r3, [pc, #108]	; (a3d4 <z_fatal_error+0xc0>)
    a368:	9302      	str	r3, [sp, #8]
    a36a:	2000      	movs	r0, #0
    a36c:	9001      	str	r0, [sp, #4]
    a36e:	9000      	str	r0, [sp, #0]
    a370:	4603      	mov	r3, r0
    a372:	2201      	movs	r2, #1
    a374:	4916      	ldr	r1, [pc, #88]	; (a3d0 <z_fatal_error+0xbc>)
    a376:	f006 f8a4 	bl	104c2 <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    a37a:	4631      	mov	r1, r6
    a37c:	4620      	mov	r0, r4
    a37e:	f7fe fb9b 	bl	8ab8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    a382:	2c04      	cmp	r4, #4
    a384:	d013      	beq.n	a3ae <z_fatal_error+0x9a>
	__asm__ volatile(
    a386:	f387 8811 	msr	BASEPRI, r7
    a38a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    a38e:	4628      	mov	r0, r5
    a390:	f7fc fa9a 	bl	68c8 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    a394:	b007      	add	sp, #28
    a396:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
    a398:	4b0f      	ldr	r3, [pc, #60]	; (a3d8 <z_fatal_error+0xc4>)
    a39a:	9302      	str	r3, [sp, #8]
    a39c:	2000      	movs	r0, #0
    a39e:	9001      	str	r0, [sp, #4]
    a3a0:	9000      	str	r0, [sp, #0]
    a3a2:	4603      	mov	r3, r0
    a3a4:	2201      	movs	r2, #1
    a3a6:	490a      	ldr	r1, [pc, #40]	; (a3d0 <z_fatal_error+0xbc>)
    a3a8:	f006 f88b 	bl	104c2 <z_log_msg2_runtime_create>
    a3ac:	e7d6      	b.n	a35c <z_fatal_error+0x48>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    a3ae:	4c0b      	ldr	r4, [pc, #44]	; (a3dc <z_fatal_error+0xc8>)
    a3b0:	238f      	movs	r3, #143	; 0x8f
    a3b2:	4622      	mov	r2, r4
    a3b4:	490a      	ldr	r1, [pc, #40]	; (a3e0 <z_fatal_error+0xcc>)
    a3b6:	480b      	ldr	r0, [pc, #44]	; (a3e4 <z_fatal_error+0xd0>)
    a3b8:	f004 ff33 	bl	f222 <assert_print>
    a3bc:	480a      	ldr	r0, [pc, #40]	; (a3e8 <z_fatal_error+0xd4>)
    a3be:	f004 ff30 	bl	f222 <assert_print>
    a3c2:	218f      	movs	r1, #143	; 0x8f
    a3c4:	4620      	mov	r0, r4
    a3c6:	f004 ff25 	bl	f214 <assert_post_action>
    a3ca:	e7dc      	b.n	a386 <z_fatal_error+0x72>
    a3cc:	00012d54 	.word	0x00012d54
    a3d0:	00011004 	.word	0x00011004
    a3d4:	00012da0 	.word	0x00012da0
    a3d8:	00012d7c 	.word	0x00012d7c
    a3dc:	00012db8 	.word	0x00012db8
    a3e0:	00012ddc 	.word	0x00012ddc
    a3e4:	000116a8 	.word	0x000116a8
    a3e8:	00012dfc 	.word	0x00012dfc

0000a3ec <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    a3ec:	b510      	push	{r4, lr}
    a3ee:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    a3f0:	4c11      	ldr	r4, [pc, #68]	; (a438 <init_idle_thread+0x4c>)
    a3f2:	23b0      	movs	r3, #176	; 0xb0
    a3f4:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a3f8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    a3fc:	4b0f      	ldr	r3, [pc, #60]	; (a43c <init_idle_thread+0x50>)
    a3fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    a402:	4a0f      	ldr	r2, [pc, #60]	; (a440 <init_idle_thread+0x54>)
    a404:	9205      	str	r2, [sp, #20]
    a406:	2201      	movs	r2, #1
    a408:	9204      	str	r2, [sp, #16]
    a40a:	220f      	movs	r2, #15
    a40c:	9203      	str	r2, [sp, #12]
    a40e:	2200      	movs	r2, #0
    a410:	9202      	str	r2, [sp, #8]
    a412:	9201      	str	r2, [sp, #4]
    a414:	9300      	str	r3, [sp, #0]
    a416:	4b0b      	ldr	r3, [pc, #44]	; (a444 <init_idle_thread+0x58>)
    a418:	f44f 72a0 	mov.w	r2, #320	; 0x140
    a41c:	490a      	ldr	r1, [pc, #40]	; (a448 <init_idle_thread+0x5c>)
    a41e:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    a422:	fb0c 1100 	mla	r1, ip, r0, r1
    a426:	4620      	mov	r0, r4
    a428:	f000 fa76 	bl	a918 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a42c:	7b63      	ldrb	r3, [r4, #13]
    a42e:	f023 0304 	bic.w	r3, r3, #4
    a432:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    a434:	b006      	add	sp, #24
    a436:	bd10      	pop	{r4, pc}
    a438:	200047c8 	.word	0x200047c8
    a43c:	2000d4e0 	.word	0x2000d4e0
    a440:	00012e34 	.word	0x00012e34
    a444:	0000ac2d 	.word	0x0000ac2d
    a448:	2000f000 	.word	0x2000f000

0000a44c <bg_thread_main>:
{
    a44c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    a44e:	4b0a      	ldr	r3, [pc, #40]	; (a478 <bg_thread_main+0x2c>)
    a450:	2201      	movs	r2, #1
    a452:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    a454:	2002      	movs	r0, #2
    a456:	f7ff fecd 	bl	a1f4 <z_sys_init_run_level>
	boot_banner();
    a45a:	f002 fe83 	bl	d164 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    a45e:	2003      	movs	r0, #3
    a460:	f7ff fec8 	bl	a1f4 <z_sys_init_run_level>
	z_init_static_threads();
    a464:	f000 fb68 	bl	ab38 <z_init_static_threads>
	main();
    a468:	f7f8 fe12 	bl	3090 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    a46c:	4a03      	ldr	r2, [pc, #12]	; (a47c <bg_thread_main+0x30>)
    a46e:	7b13      	ldrb	r3, [r2, #12]
    a470:	f023 0301 	bic.w	r3, r3, #1
    a474:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    a476:	bd08      	pop	{r3, pc}
    a478:	2000d721 	.word	0x2000d721
    a47c:	20004878 	.word	0x20004878

0000a480 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    a480:	b508      	push	{r3, lr}
    a482:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a484:	4a01      	ldr	r2, [pc, #4]	; (a48c <switch_to_main_thread+0xc>)
    a486:	4802      	ldr	r0, [pc, #8]	; (a490 <switch_to_main_thread+0x10>)
    a488:	f7fb fdd2 	bl	6030 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    a48c:	0000a44d 	.word	0x0000a44d
    a490:	20004878 	.word	0x20004878

0000a494 <z_bss_zero>:
{
    a494:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    a496:	4803      	ldr	r0, [pc, #12]	; (a4a4 <z_bss_zero+0x10>)
    a498:	4a03      	ldr	r2, [pc, #12]	; (a4a8 <z_bss_zero+0x14>)
    a49a:	1a12      	subs	r2, r2, r0
    a49c:	2100      	movs	r1, #0
    a49e:	f006 f81f 	bl	104e0 <z_early_memset>
}
    a4a2:	bd08      	pop	{r3, pc}
    a4a4:	20004288 	.word	0x20004288
    a4a8:	2000d724 	.word	0x2000d724

0000a4ac <z_init_cpu>:
{
    a4ac:	b510      	push	{r4, lr}
    a4ae:	4604      	mov	r4, r0
	init_idle_thread(id);
    a4b0:	f7ff ff9c 	bl	a3ec <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    a4b4:	490b      	ldr	r1, [pc, #44]	; (a4e4 <z_init_cpu+0x38>)
    a4b6:	23b0      	movs	r3, #176	; 0xb0
    a4b8:	fb03 1104 	mla	r1, r3, r4, r1
    a4bc:	4a0a      	ldr	r2, [pc, #40]	; (a4e8 <z_init_cpu+0x3c>)
    a4be:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    a4c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    a4c6:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    a4c8:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    a4ca:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    a4ce:	4b07      	ldr	r3, [pc, #28]	; (a4ec <z_init_cpu+0x40>)
    a4d0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    a4d4:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    a4d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a4dc:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    a4e0:	6063      	str	r3, [r4, #4]
}
    a4e2:	bd10      	pop	{r4, pc}
    a4e4:	200047c8 	.word	0x200047c8
    a4e8:	2000d4e0 	.word	0x2000d4e0
    a4ec:	2000f160 	.word	0x2000f160

0000a4f0 <prepare_multithreading>:
{
    a4f0:	b570      	push	{r4, r5, r6, lr}
    a4f2:	b086      	sub	sp, #24
	z_sched_init();
    a4f4:	f001 ff2a 	bl	c34c <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    a4f8:	4d10      	ldr	r5, [pc, #64]	; (a53c <prepare_multithreading+0x4c>)
    a4fa:	4b11      	ldr	r3, [pc, #68]	; (a540 <prepare_multithreading+0x50>)
    a4fc:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a4fe:	4b11      	ldr	r3, [pc, #68]	; (a544 <prepare_multithreading+0x54>)
    a500:	9305      	str	r3, [sp, #20]
    a502:	2301      	movs	r3, #1
    a504:	9304      	str	r3, [sp, #16]
    a506:	2400      	movs	r4, #0
    a508:	9403      	str	r4, [sp, #12]
    a50a:	9402      	str	r4, [sp, #8]
    a50c:	9401      	str	r4, [sp, #4]
    a50e:	9400      	str	r4, [sp, #0]
    a510:	4b0d      	ldr	r3, [pc, #52]	; (a548 <prepare_multithreading+0x58>)
    a512:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a516:	490d      	ldr	r1, [pc, #52]	; (a54c <prepare_multithreading+0x5c>)
    a518:	4628      	mov	r0, r5
    a51a:	f000 f9fd 	bl	a918 <z_setup_new_thread>
    a51e:	4606      	mov	r6, r0
    a520:	7b6b      	ldrb	r3, [r5, #13]
    a522:	f023 0304 	bic.w	r3, r3, #4
    a526:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    a528:	4628      	mov	r0, r5
    a52a:	f001 fa33 	bl	b994 <z_ready_thread>
	z_init_cpu(0);
    a52e:	4620      	mov	r0, r4
    a530:	f7ff ffbc 	bl	a4ac <z_init_cpu>
}
    a534:	4630      	mov	r0, r6
    a536:	b006      	add	sp, #24
    a538:	bd70      	pop	{r4, r5, r6, pc}
    a53a:	bf00      	nop
    a53c:	20004878 	.word	0x20004878
    a540:	2000d4e0 	.word	0x2000d4e0
    a544:	00012e3c 	.word	0x00012e3c
    a548:	0000a44d 	.word	0x0000a44d
    a54c:	2000ebe0 	.word	0x2000ebe0

0000a550 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    a550:	b500      	push	{lr}
    a552:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    a554:	4b1f      	ldr	r3, [pc, #124]	; (a5d4 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    a556:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    a55a:	4c1f      	ldr	r4, [pc, #124]	; (a5d8 <z_cstart+0x88>)
    a55c:	6963      	ldr	r3, [r4, #20]
    a55e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a562:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a564:	23e0      	movs	r3, #224	; 0xe0
    a566:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    a56a:	2500      	movs	r5, #0
    a56c:	77e5      	strb	r5, [r4, #31]
    a56e:	7625      	strb	r5, [r4, #24]
    a570:	7665      	strb	r5, [r4, #25]
    a572:	76a5      	strb	r5, [r4, #26]
    a574:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    a578:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a57a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    a57e:	6263      	str	r3, [r4, #36]	; 0x24
    a580:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    a584:	f7fc f90c 	bl	67a0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    a588:	f7fb fbd6 	bl	5d38 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    a58c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a590:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    a592:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    a594:	f7fc fab8 	bl	6b08 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    a598:	f7fc f9b0 	bl	68fc <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    a59c:	f7fa fcf0 	bl	4f80 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    a5a0:	2401      	movs	r4, #1
    a5a2:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    a5a6:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    a5aa:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    a5ac:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    a5ae:	4668      	mov	r0, sp
    a5b0:	f002 fdd2 	bl	d158 <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    a5b4:	4b09      	ldr	r3, [pc, #36]	; (a5dc <z_cstart+0x8c>)
    a5b6:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    a5ba:	f7ff fe0f 	bl	a1dc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    a5be:	4628      	mov	r0, r5
    a5c0:	f7ff fe18 	bl	a1f4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    a5c4:	4620      	mov	r0, r4
    a5c6:	f7ff fe15 	bl	a1f4 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    a5ca:	f7ff ff91 	bl	a4f0 <prepare_multithreading>
    a5ce:	f7ff ff57 	bl	a480 <switch_to_main_thread>
    a5d2:	bf00      	nop
    a5d4:	2000f980 	.word	0x2000f980
    a5d8:	e000ed00 	.word	0xe000ed00
    a5dc:	2000d4e0 	.word	0x2000d4e0

0000a5e0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    a5e0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a5e2:	4c10      	ldr	r4, [pc, #64]	; (a624 <init_mem_slab_module+0x44>)
	int rc = 0;
    a5e4:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a5e6:	e008      	b.n	a5fa <init_mem_slab_module+0x1a>
    a5e8:	4b0f      	ldr	r3, [pc, #60]	; (a628 <init_mem_slab_module+0x48>)
    a5ea:	429c      	cmp	r4, r3
    a5ec:	d217      	bcs.n	a61e <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    a5ee:	4620      	mov	r0, r4
    a5f0:	f005 ff7e 	bl	104f0 <create_free_list>
		if (rc < 0) {
    a5f4:	1e05      	subs	r5, r0, #0
    a5f6:	db12      	blt.n	a61e <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a5f8:	3420      	adds	r4, #32
    a5fa:	4b0b      	ldr	r3, [pc, #44]	; (a628 <init_mem_slab_module+0x48>)
    a5fc:	429c      	cmp	r4, r3
    a5fe:	d9f3      	bls.n	a5e8 <init_mem_slab_module+0x8>
    a600:	4e0a      	ldr	r6, [pc, #40]	; (a62c <init_mem_slab_module+0x4c>)
    a602:	233d      	movs	r3, #61	; 0x3d
    a604:	4632      	mov	r2, r6
    a606:	490a      	ldr	r1, [pc, #40]	; (a630 <init_mem_slab_module+0x50>)
    a608:	480a      	ldr	r0, [pc, #40]	; (a634 <init_mem_slab_module+0x54>)
    a60a:	f004 fe0a 	bl	f222 <assert_print>
    a60e:	480a      	ldr	r0, [pc, #40]	; (a638 <init_mem_slab_module+0x58>)
    a610:	f004 fe07 	bl	f222 <assert_print>
    a614:	213d      	movs	r1, #61	; 0x3d
    a616:	4630      	mov	r0, r6
    a618:	f004 fdfc 	bl	f214 <assert_post_action>
    a61c:	e7e4      	b.n	a5e8 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    a61e:	4628      	mov	r0, r5
    a620:	bd70      	pop	{r4, r5, r6, pc}
    a622:	bf00      	nop
    a624:	200041e0 	.word	0x200041e0
    a628:	200041e0 	.word	0x200041e0
    a62c:	00012e48 	.word	0x00012e48
    a630:	00012e70 	.word	0x00012e70
    a634:	000116a8 	.word	0x000116a8
    a638:	00012e90 	.word	0x00012e90

0000a63c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    a63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a640:	b082      	sub	sp, #8
    a642:	4604      	mov	r4, r0
    a644:	460e      	mov	r6, r1
    a646:	4690      	mov	r8, r2
    a648:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    a64a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    a64e:	f04f 0320 	mov.w	r3, #32
    a652:	f3ef 8711 	mrs	r7, BASEPRI
    a656:	f383 8812 	msr	BASEPRI_MAX, r3
    a65a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a65e:	4628      	mov	r0, r5
    a660:	f000 f8d8 	bl	a814 <z_spin_lock_valid>
    a664:	b1c0      	cbz	r0, a698 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    a666:	4628      	mov	r0, r5
    a668:	f000 f8f4 	bl	a854 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    a66c:	69a1      	ldr	r1, [r4, #24]
    a66e:	b321      	cbz	r1, a6ba <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    a670:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    a672:	69a3      	ldr	r3, [r4, #24]
    a674:	681b      	ldr	r3, [r3, #0]
    a676:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    a678:	69e3      	ldr	r3, [r4, #28]
    a67a:	3301      	adds	r3, #1
    a67c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    a67e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a680:	4628      	mov	r0, r5
    a682:	f000 f8d7 	bl	a834 <z_spin_unlock_valid>
    a686:	b388      	cbz	r0, a6ec <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    a688:	f387 8811 	msr	BASEPRI, r7
    a68c:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    a690:	4620      	mov	r0, r4
    a692:	b002      	add	sp, #8
    a694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a698:	f8df a070 	ldr.w	sl, [pc, #112]	; a70c <k_mem_slab_alloc+0xd0>
    a69c:	238e      	movs	r3, #142	; 0x8e
    a69e:	4652      	mov	r2, sl
    a6a0:	491b      	ldr	r1, [pc, #108]	; (a710 <k_mem_slab_alloc+0xd4>)
    a6a2:	481c      	ldr	r0, [pc, #112]	; (a714 <k_mem_slab_alloc+0xd8>)
    a6a4:	f004 fdbd 	bl	f222 <assert_print>
    a6a8:	4629      	mov	r1, r5
    a6aa:	481b      	ldr	r0, [pc, #108]	; (a718 <k_mem_slab_alloc+0xdc>)
    a6ac:	f004 fdb9 	bl	f222 <assert_print>
    a6b0:	218e      	movs	r1, #142	; 0x8e
    a6b2:	4650      	mov	r0, sl
    a6b4:	f004 fdae 	bl	f214 <assert_post_action>
    a6b8:	e7d5      	b.n	a666 <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    a6ba:	ea59 0308 	orrs.w	r3, r9, r8
    a6be:	d104      	bne.n	a6ca <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    a6c0:	2300      	movs	r3, #0
    a6c2:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    a6c4:	f06f 040b 	mvn.w	r4, #11
    a6c8:	e7da      	b.n	a680 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    a6ca:	f8cd 8000 	str.w	r8, [sp]
    a6ce:	f8cd 9004 	str.w	r9, [sp, #4]
    a6d2:	4622      	mov	r2, r4
    a6d4:	4639      	mov	r1, r7
    a6d6:	4628      	mov	r0, r5
    a6d8:	f001 fb38 	bl	bd4c <z_pend_curr>
		if (result == 0) {
    a6dc:	4604      	mov	r4, r0
    a6de:	2800      	cmp	r0, #0
    a6e0:	d1d6      	bne.n	a690 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    a6e2:	4b0e      	ldr	r3, [pc, #56]	; (a71c <k_mem_slab_alloc+0xe0>)
    a6e4:	689b      	ldr	r3, [r3, #8]
    a6e6:	695b      	ldr	r3, [r3, #20]
    a6e8:	6033      	str	r3, [r6, #0]
		return result;
    a6ea:	e7d1      	b.n	a690 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a6ec:	4e07      	ldr	r6, [pc, #28]	; (a70c <k_mem_slab_alloc+0xd0>)
    a6ee:	23b9      	movs	r3, #185	; 0xb9
    a6f0:	4632      	mov	r2, r6
    a6f2:	490b      	ldr	r1, [pc, #44]	; (a720 <k_mem_slab_alloc+0xe4>)
    a6f4:	4807      	ldr	r0, [pc, #28]	; (a714 <k_mem_slab_alloc+0xd8>)
    a6f6:	f004 fd94 	bl	f222 <assert_print>
    a6fa:	4629      	mov	r1, r5
    a6fc:	4809      	ldr	r0, [pc, #36]	; (a724 <k_mem_slab_alloc+0xe8>)
    a6fe:	f004 fd90 	bl	f222 <assert_print>
    a702:	21b9      	movs	r1, #185	; 0xb9
    a704:	4630      	mov	r0, r6
    a706:	f004 fd85 	bl	f214 <assert_post_action>
    a70a:	e7bd      	b.n	a688 <k_mem_slab_alloc+0x4c>
    a70c:	00011854 	.word	0x00011854
    a710:	000118b4 	.word	0x000118b4
    a714:	000116a8 	.word	0x000116a8
    a718:	000118cc 	.word	0x000118cc
    a71c:	2000d4e0 	.word	0x2000d4e0
    a720:	00011884 	.word	0x00011884
    a724:	0001189c 	.word	0x0001189c

0000a728 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    a728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a72c:	4604      	mov	r4, r0
    a72e:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    a730:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    a734:	f04f 0320 	mov.w	r3, #32
    a738:	f3ef 8711 	mrs	r7, BASEPRI
    a73c:	f383 8812 	msr	BASEPRI_MAX, r3
    a740:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a744:	4630      	mov	r0, r6
    a746:	f000 f865 	bl	a814 <z_spin_lock_valid>
    a74a:	b1b0      	cbz	r0, a77a <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    a74c:	4630      	mov	r0, r6
    a74e:	f000 f881 	bl	a854 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    a752:	69a3      	ldr	r3, [r4, #24]
    a754:	b313      	cbz	r3, a79c <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    a756:	682b      	ldr	r3, [r5, #0]
    a758:	69a2      	ldr	r2, [r4, #24]
    a75a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    a75c:	682b      	ldr	r3, [r5, #0]
    a75e:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    a760:	69e3      	ldr	r3, [r4, #28]
    a762:	3b01      	subs	r3, #1
    a764:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a766:	4630      	mov	r0, r6
    a768:	f000 f864 	bl	a834 <z_spin_unlock_valid>
    a76c:	b338      	cbz	r0, a7be <k_mem_slab_free+0x96>
	__asm__ volatile(
    a76e:	f387 8811 	msr	BASEPRI, r7
    a772:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    a776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a77a:	f8df 8064 	ldr.w	r8, [pc, #100]	; a7e0 <k_mem_slab_free+0xb8>
    a77e:	238e      	movs	r3, #142	; 0x8e
    a780:	4642      	mov	r2, r8
    a782:	4918      	ldr	r1, [pc, #96]	; (a7e4 <k_mem_slab_free+0xbc>)
    a784:	4818      	ldr	r0, [pc, #96]	; (a7e8 <k_mem_slab_free+0xc0>)
    a786:	f004 fd4c 	bl	f222 <assert_print>
    a78a:	4631      	mov	r1, r6
    a78c:	4817      	ldr	r0, [pc, #92]	; (a7ec <k_mem_slab_free+0xc4>)
    a78e:	f004 fd48 	bl	f222 <assert_print>
    a792:	218e      	movs	r1, #142	; 0x8e
    a794:	4640      	mov	r0, r8
    a796:	f004 fd3d 	bl	f214 <assert_post_action>
    a79a:	e7d7      	b.n	a74c <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    a79c:	4620      	mov	r0, r4
    a79e:	f001 fd71 	bl	c284 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    a7a2:	2800      	cmp	r0, #0
    a7a4:	d0d7      	beq.n	a756 <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    a7a6:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    a7a8:	2100      	movs	r1, #0
    a7aa:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    a7ae:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    a7b0:	f001 f8f0 	bl	b994 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    a7b4:	4639      	mov	r1, r7
    a7b6:	4630      	mov	r0, r6
    a7b8:	f000 fe48 	bl	b44c <z_reschedule>
			return;
    a7bc:	e7db      	b.n	a776 <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a7be:	4c08      	ldr	r4, [pc, #32]	; (a7e0 <k_mem_slab_free+0xb8>)
    a7c0:	23b9      	movs	r3, #185	; 0xb9
    a7c2:	4622      	mov	r2, r4
    a7c4:	490a      	ldr	r1, [pc, #40]	; (a7f0 <k_mem_slab_free+0xc8>)
    a7c6:	4808      	ldr	r0, [pc, #32]	; (a7e8 <k_mem_slab_free+0xc0>)
    a7c8:	f004 fd2b 	bl	f222 <assert_print>
    a7cc:	4631      	mov	r1, r6
    a7ce:	4809      	ldr	r0, [pc, #36]	; (a7f4 <k_mem_slab_free+0xcc>)
    a7d0:	f004 fd27 	bl	f222 <assert_print>
    a7d4:	21b9      	movs	r1, #185	; 0xb9
    a7d6:	4620      	mov	r0, r4
    a7d8:	f004 fd1c 	bl	f214 <assert_post_action>
    a7dc:	e7c7      	b.n	a76e <k_mem_slab_free+0x46>
    a7de:	bf00      	nop
    a7e0:	00011854 	.word	0x00011854
    a7e4:	000118b4 	.word	0x000118b4
    a7e8:	000116a8 	.word	0x000116a8
    a7ec:	000118cc 	.word	0x000118cc
    a7f0:	00011884 	.word	0x00011884
    a7f4:	0001189c 	.word	0x0001189c

0000a7f8 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    a7f8:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a7fa:	ea53 0102 	orrs.w	r1, r3, r2
    a7fe:	d102      	bne.n	a806 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    a800:	f005 feb6 	bl	10570 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    a804:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a806:	4902      	ldr	r1, [pc, #8]	; (a810 <schedule_new_thread+0x18>)
    a808:	3018      	adds	r0, #24
    a80a:	f002 f86d 	bl	c8e8 <z_add_timeout>
    a80e:	e7f9      	b.n	a804 <schedule_new_thread+0xc>
    a810:	0000baf1 	.word	0x0000baf1

0000a814 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    a814:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    a816:	b13b      	cbz	r3, a828 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    a818:	f003 0303 	and.w	r3, r3, #3
    a81c:	4a04      	ldr	r2, [pc, #16]	; (a830 <z_spin_lock_valid+0x1c>)
    a81e:	7d12      	ldrb	r2, [r2, #20]
    a820:	4293      	cmp	r3, r2
    a822:	d003      	beq.n	a82c <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    a824:	2001      	movs	r0, #1
    a826:	4770      	bx	lr
    a828:	2001      	movs	r0, #1
    a82a:	4770      	bx	lr
			return false;
    a82c:	2000      	movs	r0, #0
}
    a82e:	4770      	bx	lr
    a830:	2000d4e0 	.word	0x2000d4e0

0000a834 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    a834:	6801      	ldr	r1, [r0, #0]
    a836:	4a06      	ldr	r2, [pc, #24]	; (a850 <z_spin_unlock_valid+0x1c>)
    a838:	7d13      	ldrb	r3, [r2, #20]
    a83a:	6892      	ldr	r2, [r2, #8]
    a83c:	4313      	orrs	r3, r2
    a83e:	4299      	cmp	r1, r3
    a840:	d103      	bne.n	a84a <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    a842:	2300      	movs	r3, #0
    a844:	6003      	str	r3, [r0, #0]
	return true;
    a846:	2001      	movs	r0, #1
    a848:	4770      	bx	lr
		return false;
    a84a:	2000      	movs	r0, #0
}
    a84c:	4770      	bx	lr
    a84e:	bf00      	nop
    a850:	2000d4e0 	.word	0x2000d4e0

0000a854 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    a854:	4a02      	ldr	r2, [pc, #8]	; (a860 <z_spin_lock_set_owner+0xc>)
    a856:	7d13      	ldrb	r3, [r2, #20]
    a858:	6892      	ldr	r2, [r2, #8]
    a85a:	4313      	orrs	r3, r2
    a85c:	6003      	str	r3, [r0, #0]
}
    a85e:	4770      	bx	lr
    a860:	2000d4e0 	.word	0x2000d4e0

0000a864 <z_thread_monitor_exit>:
{
    a864:	b570      	push	{r4, r5, r6, lr}
    a866:	4604      	mov	r4, r0
	__asm__ volatile(
    a868:	f04f 0320 	mov.w	r3, #32
    a86c:	f3ef 8511 	mrs	r5, BASEPRI
    a870:	f383 8812 	msr	BASEPRI_MAX, r3
    a874:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a878:	481f      	ldr	r0, [pc, #124]	; (a8f8 <z_thread_monitor_exit+0x94>)
    a87a:	f7ff ffcb 	bl	a814 <z_spin_lock_valid>
    a87e:	b150      	cbz	r0, a896 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    a880:	481d      	ldr	r0, [pc, #116]	; (a8f8 <z_thread_monitor_exit+0x94>)
    a882:	f7ff ffe7 	bl	a854 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    a886:	4b1d      	ldr	r3, [pc, #116]	; (a8fc <z_thread_monitor_exit+0x98>)
    a888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a88a:	42a3      	cmp	r3, r4
    a88c:	d114      	bne.n	a8b8 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    a88e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    a890:	4b1a      	ldr	r3, [pc, #104]	; (a8fc <z_thread_monitor_exit+0x98>)
    a892:	629a      	str	r2, [r3, #40]	; 0x28
    a894:	e017      	b.n	a8c6 <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a896:	4e1a      	ldr	r6, [pc, #104]	; (a900 <z_thread_monitor_exit+0x9c>)
    a898:	238e      	movs	r3, #142	; 0x8e
    a89a:	4632      	mov	r2, r6
    a89c:	4919      	ldr	r1, [pc, #100]	; (a904 <z_thread_monitor_exit+0xa0>)
    a89e:	481a      	ldr	r0, [pc, #104]	; (a908 <z_thread_monitor_exit+0xa4>)
    a8a0:	f004 fcbf 	bl	f222 <assert_print>
    a8a4:	4914      	ldr	r1, [pc, #80]	; (a8f8 <z_thread_monitor_exit+0x94>)
    a8a6:	4819      	ldr	r0, [pc, #100]	; (a90c <z_thread_monitor_exit+0xa8>)
    a8a8:	f004 fcbb 	bl	f222 <assert_print>
    a8ac:	218e      	movs	r1, #142	; 0x8e
    a8ae:	4630      	mov	r0, r6
    a8b0:	f004 fcb0 	bl	f214 <assert_post_action>
    a8b4:	e7e4      	b.n	a880 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    a8b6:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    a8b8:	b113      	cbz	r3, a8c0 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    a8ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    a8bc:	42a2      	cmp	r2, r4
    a8be:	d1fa      	bne.n	a8b6 <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    a8c0:	b10b      	cbz	r3, a8c6 <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    a8c2:	6f22      	ldr	r2, [r4, #112]	; 0x70
    a8c4:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a8c6:	480c      	ldr	r0, [pc, #48]	; (a8f8 <z_thread_monitor_exit+0x94>)
    a8c8:	f7ff ffb4 	bl	a834 <z_spin_unlock_valid>
    a8cc:	b120      	cbz	r0, a8d8 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    a8ce:	f385 8811 	msr	BASEPRI, r5
    a8d2:	f3bf 8f6f 	isb	sy
}
    a8d6:	bd70      	pop	{r4, r5, r6, pc}
    a8d8:	4c09      	ldr	r4, [pc, #36]	; (a900 <z_thread_monitor_exit+0x9c>)
    a8da:	23b9      	movs	r3, #185	; 0xb9
    a8dc:	4622      	mov	r2, r4
    a8de:	490c      	ldr	r1, [pc, #48]	; (a910 <z_thread_monitor_exit+0xac>)
    a8e0:	4809      	ldr	r0, [pc, #36]	; (a908 <z_thread_monitor_exit+0xa4>)
    a8e2:	f004 fc9e 	bl	f222 <assert_print>
    a8e6:	4904      	ldr	r1, [pc, #16]	; (a8f8 <z_thread_monitor_exit+0x94>)
    a8e8:	480a      	ldr	r0, [pc, #40]	; (a914 <z_thread_monitor_exit+0xb0>)
    a8ea:	f004 fc9a 	bl	f222 <assert_print>
    a8ee:	21b9      	movs	r1, #185	; 0xb9
    a8f0:	4620      	mov	r0, r4
    a8f2:	f004 fc8f 	bl	f214 <assert_post_action>
    a8f6:	e7ea      	b.n	a8ce <z_thread_monitor_exit+0x6a>
    a8f8:	2000d50c 	.word	0x2000d50c
    a8fc:	2000d4e0 	.word	0x2000d4e0
    a900:	00011854 	.word	0x00011854
    a904:	000118b4 	.word	0x000118b4
    a908:	000116a8 	.word	0x000116a8
    a90c:	000118cc 	.word	0x000118cc
    a910:	00011884 	.word	0x00011884
    a914:	0001189c 	.word	0x0001189c

0000a918 <z_setup_new_thread>:
{
    a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a91c:	b085      	sub	sp, #20
    a91e:	4604      	mov	r4, r0
    a920:	460e      	mov	r6, r1
    a922:	4690      	mov	r8, r2
    a924:	461d      	mov	r5, r3
    a926:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    a92a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    a92e:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    a930:	2f0f      	cmp	r7, #15
    a932:	d05e      	beq.n	a9f2 <z_setup_new_thread+0xda>
    a934:	f107 0310 	add.w	r3, r7, #16
    a938:	2b1e      	cmp	r3, #30
    a93a:	d85e      	bhi.n	a9fa <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    a93c:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    a940:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    a942:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    a944:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a946:	2204      	movs	r2, #4
    a948:	4639      	mov	r1, r7
    a94a:	4620      	mov	r0, r4
    a94c:	f005 fe14 	bl	10578 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    a950:	4642      	mov	r2, r8
    a952:	4631      	mov	r1, r6
    a954:	4620      	mov	r0, r4
    a956:	f005 fdf1 	bl	1053c <setup_thread_stack>
    a95a:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a95c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a95e:	9302      	str	r3, [sp, #8]
    a960:	f8cd a004 	str.w	sl, [sp, #4]
    a964:	f8cd b000 	str.w	fp, [sp]
    a968:	462b      	mov	r3, r5
    a96a:	4602      	mov	r2, r0
    a96c:	4631      	mov	r1, r6
    a96e:	4620      	mov	r0, r4
    a970:	f7fb fb14 	bl	5f9c <arch_new_thread>
	new_thread->init_data = NULL;
    a974:	2300      	movs	r3, #0
    a976:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    a978:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    a97a:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    a97e:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    a982:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a984:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    a986:	f04f 0320 	mov.w	r3, #32
    a98a:	f3ef 8611 	mrs	r6, BASEPRI
    a98e:	f383 8812 	msr	BASEPRI_MAX, r3
    a992:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a996:	4837      	ldr	r0, [pc, #220]	; (aa74 <z_setup_new_thread+0x15c>)
    a998:	f7ff ff3c 	bl	a814 <z_spin_lock_valid>
    a99c:	2800      	cmp	r0, #0
    a99e:	d042      	beq.n	aa26 <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    a9a0:	4d34      	ldr	r5, [pc, #208]	; (aa74 <z_setup_new_thread+0x15c>)
    a9a2:	4628      	mov	r0, r5
    a9a4:	f7ff ff56 	bl	a854 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    a9a8:	4b33      	ldr	r3, [pc, #204]	; (aa78 <z_setup_new_thread+0x160>)
    a9aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a9ac:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    a9ae:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a9b0:	4628      	mov	r0, r5
    a9b2:	f7ff ff3f 	bl	a834 <z_spin_unlock_valid>
    a9b6:	2800      	cmp	r0, #0
    a9b8:	d045      	beq.n	aa46 <z_setup_new_thread+0x12e>
	__asm__ volatile(
    a9ba:	f386 8811 	msr	BASEPRI, r6
    a9be:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    a9c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a9c4:	2b00      	cmp	r3, #0
    a9c6:	d04e      	beq.n	aa66 <z_setup_new_thread+0x14e>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    a9c8:	221f      	movs	r2, #31
    a9ca:	4619      	mov	r1, r3
    a9cc:	f104 0074 	add.w	r0, r4, #116	; 0x74
    a9d0:	f005 ff4e 	bl	10870 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    a9d4:	2300      	movs	r3, #0
    a9d6:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    a9da:	4b27      	ldr	r3, [pc, #156]	; (aa78 <z_setup_new_thread+0x160>)
    a9dc:	689b      	ldr	r3, [r3, #8]
    a9de:	2b00      	cmp	r3, #0
    a9e0:	d045      	beq.n	aa6e <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    a9e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    a9e6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    a9ea:	4638      	mov	r0, r7
    a9ec:	b005      	add	sp, #20
    a9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    a9f2:	4b22      	ldr	r3, [pc, #136]	; (aa7c <z_setup_new_thread+0x164>)
    a9f4:	429d      	cmp	r5, r3
    a9f6:	d19d      	bne.n	a934 <z_setup_new_thread+0x1c>
    a9f8:	e7a0      	b.n	a93c <z_setup_new_thread+0x24>
    a9fa:	f8df 9084 	ldr.w	r9, [pc, #132]	; aa80 <z_setup_new_thread+0x168>
    a9fe:	f240 13ff 	movw	r3, #511	; 0x1ff
    aa02:	464a      	mov	r2, r9
    aa04:	491f      	ldr	r1, [pc, #124]	; (aa84 <z_setup_new_thread+0x16c>)
    aa06:	4820      	ldr	r0, [pc, #128]	; (aa88 <z_setup_new_thread+0x170>)
    aa08:	f004 fc0b 	bl	f222 <assert_print>
    aa0c:	f06f 030f 	mvn.w	r3, #15
    aa10:	220e      	movs	r2, #14
    aa12:	4639      	mov	r1, r7
    aa14:	481d      	ldr	r0, [pc, #116]	; (aa8c <z_setup_new_thread+0x174>)
    aa16:	f004 fc04 	bl	f222 <assert_print>
    aa1a:	f240 11ff 	movw	r1, #511	; 0x1ff
    aa1e:	4648      	mov	r0, r9
    aa20:	f004 fbf8 	bl	f214 <assert_post_action>
    aa24:	e78a      	b.n	a93c <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aa26:	4d1a      	ldr	r5, [pc, #104]	; (aa90 <z_setup_new_thread+0x178>)
    aa28:	238e      	movs	r3, #142	; 0x8e
    aa2a:	462a      	mov	r2, r5
    aa2c:	4919      	ldr	r1, [pc, #100]	; (aa94 <z_setup_new_thread+0x17c>)
    aa2e:	4816      	ldr	r0, [pc, #88]	; (aa88 <z_setup_new_thread+0x170>)
    aa30:	f004 fbf7 	bl	f222 <assert_print>
    aa34:	490f      	ldr	r1, [pc, #60]	; (aa74 <z_setup_new_thread+0x15c>)
    aa36:	4818      	ldr	r0, [pc, #96]	; (aa98 <z_setup_new_thread+0x180>)
    aa38:	f004 fbf3 	bl	f222 <assert_print>
    aa3c:	218e      	movs	r1, #142	; 0x8e
    aa3e:	4628      	mov	r0, r5
    aa40:	f004 fbe8 	bl	f214 <assert_post_action>
    aa44:	e7ac      	b.n	a9a0 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aa46:	4d12      	ldr	r5, [pc, #72]	; (aa90 <z_setup_new_thread+0x178>)
    aa48:	23b9      	movs	r3, #185	; 0xb9
    aa4a:	462a      	mov	r2, r5
    aa4c:	4913      	ldr	r1, [pc, #76]	; (aa9c <z_setup_new_thread+0x184>)
    aa4e:	480e      	ldr	r0, [pc, #56]	; (aa88 <z_setup_new_thread+0x170>)
    aa50:	f004 fbe7 	bl	f222 <assert_print>
    aa54:	4907      	ldr	r1, [pc, #28]	; (aa74 <z_setup_new_thread+0x15c>)
    aa56:	4812      	ldr	r0, [pc, #72]	; (aaa0 <z_setup_new_thread+0x188>)
    aa58:	f004 fbe3 	bl	f222 <assert_print>
    aa5c:	21b9      	movs	r1, #185	; 0xb9
    aa5e:	4628      	mov	r0, r5
    aa60:	f004 fbd8 	bl	f214 <assert_post_action>
    aa64:	e7a9      	b.n	a9ba <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    aa66:	2300      	movs	r3, #0
    aa68:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    aa6c:	e7b5      	b.n	a9da <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    aa6e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    aa72:	e7ba      	b.n	a9ea <z_setup_new_thread+0xd2>
    aa74:	2000d50c 	.word	0x2000d50c
    aa78:	2000d4e0 	.word	0x2000d4e0
    aa7c:	0000ac2d 	.word	0x0000ac2d
    aa80:	00012eb0 	.word	0x00012eb0
    aa84:	00012f08 	.word	0x00012f08
    aa88:	000116a8 	.word	0x000116a8
    aa8c:	00012f88 	.word	0x00012f88
    aa90:	00011854 	.word	0x00011854
    aa94:	000118b4 	.word	0x000118b4
    aa98:	000118cc 	.word	0x000118cc
    aa9c:	00011884 	.word	0x00011884
    aaa0:	0001189c 	.word	0x0001189c

0000aaa4 <z_impl_k_thread_create>:
{
    aaa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aaa8:	b086      	sub	sp, #24
    aaaa:	4604      	mov	r4, r0
    aaac:	460d      	mov	r5, r1
    aaae:	4616      	mov	r6, r2
    aab0:	461f      	mov	r7, r3
    aab2:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    aab6:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    aaba:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    aabe:	b9db      	cbnz	r3, aaf8 <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    aac0:	2300      	movs	r3, #0
    aac2:	9305      	str	r3, [sp, #20]
    aac4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    aac6:	9304      	str	r3, [sp, #16]
    aac8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    aaca:	9303      	str	r3, [sp, #12]
    aacc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    aace:	9302      	str	r3, [sp, #8]
    aad0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aad2:	9301      	str	r3, [sp, #4]
    aad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aad6:	9300      	str	r3, [sp, #0]
    aad8:	463b      	mov	r3, r7
    aada:	4632      	mov	r2, r6
    aadc:	4629      	mov	r1, r5
    aade:	4620      	mov	r0, r4
    aae0:	f7ff ff1a 	bl	a918 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    aae4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    aae8:	bf08      	it	eq
    aaea:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    aaee:	d115      	bne.n	ab1c <z_impl_k_thread_create+0x78>
}
    aaf0:	4620      	mov	r0, r4
    aaf2:	b006      	add	sp, #24
    aaf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    aaf8:	f8df a02c 	ldr.w	sl, [pc, #44]	; ab28 <z_impl_k_thread_create+0x84>
    aafc:	f240 236e 	movw	r3, #622	; 0x26e
    ab00:	4652      	mov	r2, sl
    ab02:	490a      	ldr	r1, [pc, #40]	; (ab2c <z_impl_k_thread_create+0x88>)
    ab04:	480a      	ldr	r0, [pc, #40]	; (ab30 <z_impl_k_thread_create+0x8c>)
    ab06:	f004 fb8c 	bl	f222 <assert_print>
    ab0a:	480a      	ldr	r0, [pc, #40]	; (ab34 <z_impl_k_thread_create+0x90>)
    ab0c:	f004 fb89 	bl	f222 <assert_print>
    ab10:	f240 216e 	movw	r1, #622	; 0x26e
    ab14:	4650      	mov	r0, sl
    ab16:	f004 fb7d 	bl	f214 <assert_post_action>
    ab1a:	e7d1      	b.n	aac0 <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    ab1c:	464a      	mov	r2, r9
    ab1e:	4643      	mov	r3, r8
    ab20:	4620      	mov	r0, r4
    ab22:	f7ff fe69 	bl	a7f8 <schedule_new_thread>
    ab26:	e7e3      	b.n	aaf0 <z_impl_k_thread_create+0x4c>
    ab28:	00012eb0 	.word	0x00012eb0
    ab2c:	00012fbc 	.word	0x00012fbc
    ab30:	000116a8 	.word	0x000116a8
    ab34:	00012fd0 	.word	0x00012fd0

0000ab38 <z_init_static_threads>:
{
    ab38:	b530      	push	{r4, r5, lr}
    ab3a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    ab3c:	4c35      	ldr	r4, [pc, #212]	; (ac14 <z_init_static_threads+0xdc>)
    ab3e:	e017      	b.n	ab70 <z_init_static_threads+0x38>
    ab40:	4b35      	ldr	r3, [pc, #212]	; (ac18 <z_init_static_threads+0xe0>)
    ab42:	429c      	cmp	r4, r3
    ab44:	d228      	bcs.n	ab98 <z_init_static_threads+0x60>
		z_setup_new_thread(
    ab46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ab48:	9305      	str	r3, [sp, #20]
    ab4a:	6a23      	ldr	r3, [r4, #32]
    ab4c:	9304      	str	r3, [sp, #16]
    ab4e:	69e3      	ldr	r3, [r4, #28]
    ab50:	9303      	str	r3, [sp, #12]
    ab52:	69a3      	ldr	r3, [r4, #24]
    ab54:	9302      	str	r3, [sp, #8]
    ab56:	6963      	ldr	r3, [r4, #20]
    ab58:	9301      	str	r3, [sp, #4]
    ab5a:	6923      	ldr	r3, [r4, #16]
    ab5c:	9300      	str	r3, [sp, #0]
    ab5e:	68e3      	ldr	r3, [r4, #12]
    ab60:	68a2      	ldr	r2, [r4, #8]
    ab62:	6861      	ldr	r1, [r4, #4]
    ab64:	6820      	ldr	r0, [r4, #0]
    ab66:	f7ff fed7 	bl	a918 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    ab6a:	6823      	ldr	r3, [r4, #0]
    ab6c:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    ab6e:	3430      	adds	r4, #48	; 0x30
    ab70:	4b29      	ldr	r3, [pc, #164]	; (ac18 <z_init_static_threads+0xe0>)
    ab72:	429c      	cmp	r4, r3
    ab74:	d9e4      	bls.n	ab40 <z_init_static_threads+0x8>
    ab76:	4d29      	ldr	r5, [pc, #164]	; (ac1c <z_init_static_threads+0xe4>)
    ab78:	f240 23d5 	movw	r3, #725	; 0x2d5
    ab7c:	462a      	mov	r2, r5
    ab7e:	4928      	ldr	r1, [pc, #160]	; (ac20 <z_init_static_threads+0xe8>)
    ab80:	4828      	ldr	r0, [pc, #160]	; (ac24 <z_init_static_threads+0xec>)
    ab82:	f004 fb4e 	bl	f222 <assert_print>
    ab86:	4828      	ldr	r0, [pc, #160]	; (ac28 <z_init_static_threads+0xf0>)
    ab88:	f004 fb4b 	bl	f222 <assert_print>
    ab8c:	f240 21d5 	movw	r1, #725	; 0x2d5
    ab90:	4628      	mov	r0, r5
    ab92:	f004 fb3f 	bl	f214 <assert_post_action>
    ab96:	e7d3      	b.n	ab40 <z_init_static_threads+0x8>
	k_sched_lock();
    ab98:	f000 fca6 	bl	b4e8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    ab9c:	4c1d      	ldr	r4, [pc, #116]	; (ac14 <z_init_static_threads+0xdc>)
    ab9e:	e000      	b.n	aba2 <z_init_static_threads+0x6a>
    aba0:	3430      	adds	r4, #48	; 0x30
    aba2:	4b1d      	ldr	r3, [pc, #116]	; (ac18 <z_init_static_threads+0xe0>)
    aba4:	429c      	cmp	r4, r3
    aba6:	d81f      	bhi.n	abe8 <z_init_static_threads+0xb0>
    aba8:	4b1b      	ldr	r3, [pc, #108]	; (ac18 <z_init_static_threads+0xe0>)
    abaa:	429c      	cmp	r4, r3
    abac:	d22d      	bcs.n	ac0a <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    abae:	6a60      	ldr	r0, [r4, #36]	; 0x24
    abb0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    abb4:	d0f4      	beq.n	aba0 <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    abb6:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    abb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    abbc:	17c1      	asrs	r1, r0, #31
    abbe:	03c9      	lsls	r1, r1, #15
    abc0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    abc4:	03c0      	lsls	r0, r0, #15
    abc6:	f240 33e7 	movw	r3, #999	; 0x3e7
    abca:	18c0      	adds	r0, r0, r3
    abcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    abd0:	f04f 0300 	mov.w	r3, #0
    abd4:	f141 0100 	adc.w	r1, r1, #0
    abd8:	f7f5 ff00 	bl	9dc <__aeabi_uldivmod>
    abdc:	4602      	mov	r2, r0
    abde:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    abe0:	4628      	mov	r0, r5
    abe2:	f7ff fe09 	bl	a7f8 <schedule_new_thread>
    abe6:	e7db      	b.n	aba0 <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    abe8:	4d0c      	ldr	r5, [pc, #48]	; (ac1c <z_init_static_threads+0xe4>)
    abea:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    abee:	462a      	mov	r2, r5
    abf0:	490b      	ldr	r1, [pc, #44]	; (ac20 <z_init_static_threads+0xe8>)
    abf2:	480c      	ldr	r0, [pc, #48]	; (ac24 <z_init_static_threads+0xec>)
    abf4:	f004 fb15 	bl	f222 <assert_print>
    abf8:	480b      	ldr	r0, [pc, #44]	; (ac28 <z_init_static_threads+0xf0>)
    abfa:	f004 fb12 	bl	f222 <assert_print>
    abfe:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    ac02:	4628      	mov	r0, r5
    ac04:	f004 fb06 	bl	f214 <assert_post_action>
    ac08:	e7ce      	b.n	aba8 <z_init_static_threads+0x70>
	k_sched_unlock();
    ac0a:	f001 f9f9 	bl	c000 <k_sched_unlock>
}
    ac0e:	b007      	add	sp, #28
    ac10:	bd30      	pop	{r4, r5, pc}
    ac12:	bf00      	nop
    ac14:	200041e0 	.word	0x200041e0
    ac18:	200041e0 	.word	0x200041e0
    ac1c:	00012eb0 	.word	0x00012eb0
    ac20:	00012ff8 	.word	0x00012ff8
    ac24:	000116a8 	.word	0x000116a8
    ac28:	00012e90 	.word	0x00012e90

0000ac2c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    ac2c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    ac2e:	4b14      	ldr	r3, [pc, #80]	; (ac80 <idle+0x54>)
    ac30:	689b      	ldr	r3, [r3, #8]
    ac32:	f993 300e 	ldrsb.w	r3, [r3, #14]
    ac36:	2b00      	cmp	r3, #0
    ac38:	da0d      	bge.n	ac56 <idle+0x2a>
    ac3a:	4c12      	ldr	r4, [pc, #72]	; (ac84 <idle+0x58>)
    ac3c:	2327      	movs	r3, #39	; 0x27
    ac3e:	4622      	mov	r2, r4
    ac40:	4911      	ldr	r1, [pc, #68]	; (ac88 <idle+0x5c>)
    ac42:	4812      	ldr	r0, [pc, #72]	; (ac8c <idle+0x60>)
    ac44:	f004 faed 	bl	f222 <assert_print>
    ac48:	2127      	movs	r1, #39	; 0x27
    ac4a:	4620      	mov	r0, r4
    ac4c:	f004 fae2 	bl	f214 <assert_post_action>
    ac50:	e001      	b.n	ac56 <idle+0x2a>
	arch_cpu_idle();
    ac52:	f7fb f877 	bl	5d44 <arch_cpu_idle>
	__asm__ volatile(
    ac56:	f04f 0220 	mov.w	r2, #32
    ac5a:	f3ef 8311 	mrs	r3, BASEPRI
    ac5e:	f382 8812 	msr	BASEPRI_MAX, r2
    ac62:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    ac66:	f001 ff7d 	bl	cb64 <z_get_next_timeout_expiry>
    ac6a:	4b05      	ldr	r3, [pc, #20]	; (ac80 <idle+0x54>)
    ac6c:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    ac6e:	4b08      	ldr	r3, [pc, #32]	; (ac90 <idle+0x64>)
    ac70:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    ac72:	2b00      	cmp	r3, #0
    ac74:	d0ed      	beq.n	ac52 <idle+0x26>
    ac76:	f7fa fe2d 	bl	58d4 <pm_system_suspend>
    ac7a:	2800      	cmp	r0, #0
    ac7c:	d1eb      	bne.n	ac56 <idle+0x2a>
    ac7e:	e7e8      	b.n	ac52 <idle+0x26>
    ac80:	2000d4e0 	.word	0x2000d4e0
    ac84:	00013028 	.word	0x00013028
    ac88:	0001304c 	.word	0x0001304c
    ac8c:	000116a8 	.word	0x000116a8
    ac90:	2000d721 	.word	0x2000d721

0000ac94 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    ac94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ac98:	b083      	sub	sp, #12
    ac9a:	4604      	mov	r4, r0
    ac9c:	4616      	mov	r6, r2
    ac9e:	461d      	mov	r5, r3
    aca0:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    aca4:	2900      	cmp	r1, #0
    aca6:	d12b      	bne.n	ad00 <z_impl_k_mutex_lock+0x6c>
    aca8:	f04f 0320 	mov.w	r3, #32
    acac:	f3ef 8711 	mrs	r7, BASEPRI
    acb0:	f383 8812 	msr	BASEPRI_MAX, r3
    acb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    acb8:	487b      	ldr	r0, [pc, #492]	; (aea8 <z_impl_k_mutex_lock+0x214>)
    acba:	f7ff fdab 	bl	a814 <z_spin_lock_valid>
    acbe:	2800      	cmp	r0, #0
    acc0:	d02d      	beq.n	ad1e <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    acc2:	4879      	ldr	r0, [pc, #484]	; (aea8 <z_impl_k_mutex_lock+0x214>)
    acc4:	f7ff fdc6 	bl	a854 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    acc8:	68e1      	ldr	r1, [r4, #12]
    acca:	2900      	cmp	r1, #0
    accc:	d138      	bne.n	ad40 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    acce:	2900      	cmp	r1, #0
    acd0:	d17d      	bne.n	adce <z_impl_k_mutex_lock+0x13a>
    acd2:	4b76      	ldr	r3, [pc, #472]	; (aeac <z_impl_k_mutex_lock+0x218>)
    acd4:	689b      	ldr	r3, [r3, #8]
    acd6:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    acda:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    acdc:	3101      	adds	r1, #1
    acde:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    ace0:	4b72      	ldr	r3, [pc, #456]	; (aeac <z_impl_k_mutex_lock+0x218>)
    ace2:	689b      	ldr	r3, [r3, #8]
    ace4:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ace6:	4870      	ldr	r0, [pc, #448]	; (aea8 <z_impl_k_mutex_lock+0x214>)
    ace8:	f7ff fda4 	bl	a834 <z_spin_unlock_valid>
    acec:	2800      	cmp	r0, #0
    acee:	d070      	beq.n	add2 <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    acf0:	f387 8811 	msr	BASEPRI, r7
    acf4:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    acf8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    acfa:	b003      	add	sp, #12
    acfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    ad00:	4f6b      	ldr	r7, [pc, #428]	; (aeb0 <z_impl_k_mutex_lock+0x21c>)
    ad02:	2365      	movs	r3, #101	; 0x65
    ad04:	463a      	mov	r2, r7
    ad06:	496b      	ldr	r1, [pc, #428]	; (aeb4 <z_impl_k_mutex_lock+0x220>)
    ad08:	486b      	ldr	r0, [pc, #428]	; (aeb8 <z_impl_k_mutex_lock+0x224>)
    ad0a:	f004 fa8a 	bl	f222 <assert_print>
    ad0e:	486b      	ldr	r0, [pc, #428]	; (aebc <z_impl_k_mutex_lock+0x228>)
    ad10:	f004 fa87 	bl	f222 <assert_print>
    ad14:	2165      	movs	r1, #101	; 0x65
    ad16:	4638      	mov	r0, r7
    ad18:	f004 fa7c 	bl	f214 <assert_post_action>
    ad1c:	e7c4      	b.n	aca8 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ad1e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; aec0 <z_impl_k_mutex_lock+0x22c>
    ad22:	238e      	movs	r3, #142	; 0x8e
    ad24:	4642      	mov	r2, r8
    ad26:	4967      	ldr	r1, [pc, #412]	; (aec4 <z_impl_k_mutex_lock+0x230>)
    ad28:	4863      	ldr	r0, [pc, #396]	; (aeb8 <z_impl_k_mutex_lock+0x224>)
    ad2a:	f004 fa7a 	bl	f222 <assert_print>
    ad2e:	495e      	ldr	r1, [pc, #376]	; (aea8 <z_impl_k_mutex_lock+0x214>)
    ad30:	4865      	ldr	r0, [pc, #404]	; (aec8 <z_impl_k_mutex_lock+0x234>)
    ad32:	f004 fa76 	bl	f222 <assert_print>
    ad36:	218e      	movs	r1, #142	; 0x8e
    ad38:	4640      	mov	r0, r8
    ad3a:	f004 fa6b 	bl	f214 <assert_post_action>
    ad3e:	e7c0      	b.n	acc2 <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    ad40:	68a2      	ldr	r2, [r4, #8]
    ad42:	4b5a      	ldr	r3, [pc, #360]	; (aeac <z_impl_k_mutex_lock+0x218>)
    ad44:	689b      	ldr	r3, [r3, #8]
    ad46:	429a      	cmp	r2, r3
    ad48:	d0c1      	beq.n	acce <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    ad4a:	ea55 0106 	orrs.w	r1, r5, r6
    ad4e:	bf0c      	ite	eq
    ad50:	f04f 0801 	moveq.w	r8, #1
    ad54:	f04f 0800 	movne.w	r8, #0
    ad58:	d04b      	beq.n	adf2 <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    ad5a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    ad5e:	4649      	mov	r1, r9
    ad60:	f993 000e 	ldrsb.w	r0, [r3, #14]
    ad64:	f005 fc19 	bl	1059a <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    ad68:	4581      	cmp	r9, r0
    ad6a:	dc5d      	bgt.n	ae28 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    ad6c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    ad70:	9600      	str	r6, [sp, #0]
    ad72:	9501      	str	r5, [sp, #4]
    ad74:	4622      	mov	r2, r4
    ad76:	4639      	mov	r1, r7
    ad78:	484b      	ldr	r0, [pc, #300]	; (aea8 <z_impl_k_mutex_lock+0x214>)
    ad7a:	f000 ffe7 	bl	bd4c <z_pend_curr>
	if (got_mutex == 0) {
    ad7e:	2800      	cmp	r0, #0
    ad80:	d0bb      	beq.n	acfa <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    ad82:	f04f 0320 	mov.w	r3, #32
    ad86:	f3ef 8511 	mrs	r5, BASEPRI
    ad8a:	f383 8812 	msr	BASEPRI_MAX, r3
    ad8e:	f3bf 8f6f 	isb	sy
    ad92:	4845      	ldr	r0, [pc, #276]	; (aea8 <z_impl_k_mutex_lock+0x214>)
    ad94:	f7ff fd3e 	bl	a814 <z_spin_lock_valid>
    ad98:	2800      	cmp	r0, #0
    ad9a:	d04b      	beq.n	ae34 <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    ad9c:	4842      	ldr	r0, [pc, #264]	; (aea8 <z_impl_k_mutex_lock+0x214>)
    ad9e:	f7ff fd59 	bl	a854 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    ada2:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ada4:	42a3      	cmp	r3, r4
    ada6:	d055      	beq.n	ae54 <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    ada8:	2b00      	cmp	r3, #0
    adaa:	d053      	beq.n	ae54 <z_impl_k_mutex_lock+0x1c0>
    adac:	6921      	ldr	r1, [r4, #16]
    adae:	f993 000e 	ldrsb.w	r0, [r3, #14]
    adb2:	f005 fbf2 	bl	1059a <new_prio_for_inheritance>
    adb6:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    adb8:	4620      	mov	r0, r4
    adba:	f005 fbf9 	bl	105b0 <adjust_owner_prio>
    adbe:	2800      	cmp	r0, #0
    adc0:	d14a      	bne.n	ae58 <z_impl_k_mutex_lock+0x1c4>
    adc2:	f1b9 0f00 	cmp.w	r9, #0
    adc6:	d049      	beq.n	ae5c <z_impl_k_mutex_lock+0x1c8>
    adc8:	f04f 0801 	mov.w	r8, #1
    adcc:	e046      	b.n	ae5c <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    adce:	6923      	ldr	r3, [r4, #16]
    add0:	e783      	b.n	acda <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    add2:	4c3b      	ldr	r4, [pc, #236]	; (aec0 <z_impl_k_mutex_lock+0x22c>)
    add4:	23b9      	movs	r3, #185	; 0xb9
    add6:	4622      	mov	r2, r4
    add8:	493c      	ldr	r1, [pc, #240]	; (aecc <z_impl_k_mutex_lock+0x238>)
    adda:	4837      	ldr	r0, [pc, #220]	; (aeb8 <z_impl_k_mutex_lock+0x224>)
    addc:	f004 fa21 	bl	f222 <assert_print>
    ade0:	4931      	ldr	r1, [pc, #196]	; (aea8 <z_impl_k_mutex_lock+0x214>)
    ade2:	483b      	ldr	r0, [pc, #236]	; (aed0 <z_impl_k_mutex_lock+0x23c>)
    ade4:	f004 fa1d 	bl	f222 <assert_print>
    ade8:	21b9      	movs	r1, #185	; 0xb9
    adea:	4620      	mov	r0, r4
    adec:	f004 fa12 	bl	f214 <assert_post_action>
    adf0:	e77e      	b.n	acf0 <z_impl_k_mutex_lock+0x5c>
    adf2:	482d      	ldr	r0, [pc, #180]	; (aea8 <z_impl_k_mutex_lock+0x214>)
    adf4:	f7ff fd1e 	bl	a834 <z_spin_unlock_valid>
    adf8:	b130      	cbz	r0, ae08 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    adfa:	f387 8811 	msr	BASEPRI, r7
    adfe:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    ae02:	f06f 000f 	mvn.w	r0, #15
    ae06:	e778      	b.n	acfa <z_impl_k_mutex_lock+0x66>
    ae08:	4c2d      	ldr	r4, [pc, #180]	; (aec0 <z_impl_k_mutex_lock+0x22c>)
    ae0a:	23b9      	movs	r3, #185	; 0xb9
    ae0c:	4622      	mov	r2, r4
    ae0e:	492f      	ldr	r1, [pc, #188]	; (aecc <z_impl_k_mutex_lock+0x238>)
    ae10:	4829      	ldr	r0, [pc, #164]	; (aeb8 <z_impl_k_mutex_lock+0x224>)
    ae12:	f004 fa06 	bl	f222 <assert_print>
    ae16:	4924      	ldr	r1, [pc, #144]	; (aea8 <z_impl_k_mutex_lock+0x214>)
    ae18:	482d      	ldr	r0, [pc, #180]	; (aed0 <z_impl_k_mutex_lock+0x23c>)
    ae1a:	f004 fa02 	bl	f222 <assert_print>
    ae1e:	21b9      	movs	r1, #185	; 0xb9
    ae20:	4620      	mov	r0, r4
    ae22:	f004 f9f7 	bl	f214 <assert_post_action>
    ae26:	e7e8      	b.n	adfa <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    ae28:	4601      	mov	r1, r0
    ae2a:	4620      	mov	r0, r4
    ae2c:	f005 fbc0 	bl	105b0 <adjust_owner_prio>
    ae30:	4681      	mov	r9, r0
    ae32:	e79d      	b.n	ad70 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ae34:	4e22      	ldr	r6, [pc, #136]	; (aec0 <z_impl_k_mutex_lock+0x22c>)
    ae36:	238e      	movs	r3, #142	; 0x8e
    ae38:	4632      	mov	r2, r6
    ae3a:	4922      	ldr	r1, [pc, #136]	; (aec4 <z_impl_k_mutex_lock+0x230>)
    ae3c:	481e      	ldr	r0, [pc, #120]	; (aeb8 <z_impl_k_mutex_lock+0x224>)
    ae3e:	f004 f9f0 	bl	f222 <assert_print>
    ae42:	4919      	ldr	r1, [pc, #100]	; (aea8 <z_impl_k_mutex_lock+0x214>)
    ae44:	4820      	ldr	r0, [pc, #128]	; (aec8 <z_impl_k_mutex_lock+0x234>)
    ae46:	f004 f9ec 	bl	f222 <assert_print>
    ae4a:	218e      	movs	r1, #142	; 0x8e
    ae4c:	4630      	mov	r0, r6
    ae4e:	f004 f9e1 	bl	f214 <assert_post_action>
    ae52:	e7a3      	b.n	ad9c <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    ae54:	6921      	ldr	r1, [r4, #16]
    ae56:	e7af      	b.n	adb8 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    ae58:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    ae5c:	f1b8 0f00 	cmp.w	r8, #0
    ae60:	d006      	beq.n	ae70 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    ae62:	4629      	mov	r1, r5
    ae64:	4810      	ldr	r0, [pc, #64]	; (aea8 <z_impl_k_mutex_lock+0x214>)
    ae66:	f000 faf1 	bl	b44c <z_reschedule>
	return -EAGAIN;
    ae6a:	f06f 000a 	mvn.w	r0, #10
    ae6e:	e744      	b.n	acfa <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ae70:	480d      	ldr	r0, [pc, #52]	; (aea8 <z_impl_k_mutex_lock+0x214>)
    ae72:	f7ff fcdf 	bl	a834 <z_spin_unlock_valid>
    ae76:	b130      	cbz	r0, ae86 <z_impl_k_mutex_lock+0x1f2>
    ae78:	f385 8811 	msr	BASEPRI, r5
    ae7c:	f3bf 8f6f 	isb	sy
    ae80:	f06f 000a 	mvn.w	r0, #10
    ae84:	e739      	b.n	acfa <z_impl_k_mutex_lock+0x66>
    ae86:	4c0e      	ldr	r4, [pc, #56]	; (aec0 <z_impl_k_mutex_lock+0x22c>)
    ae88:	23b9      	movs	r3, #185	; 0xb9
    ae8a:	4622      	mov	r2, r4
    ae8c:	490f      	ldr	r1, [pc, #60]	; (aecc <z_impl_k_mutex_lock+0x238>)
    ae8e:	480a      	ldr	r0, [pc, #40]	; (aeb8 <z_impl_k_mutex_lock+0x224>)
    ae90:	f004 f9c7 	bl	f222 <assert_print>
    ae94:	4904      	ldr	r1, [pc, #16]	; (aea8 <z_impl_k_mutex_lock+0x214>)
    ae96:	480e      	ldr	r0, [pc, #56]	; (aed0 <z_impl_k_mutex_lock+0x23c>)
    ae98:	f004 f9c3 	bl	f222 <assert_print>
    ae9c:	21b9      	movs	r1, #185	; 0xb9
    ae9e:	4620      	mov	r0, r4
    aea0:	f004 f9b8 	bl	f214 <assert_post_action>
    aea4:	e7e8      	b.n	ae78 <z_impl_k_mutex_lock+0x1e4>
    aea6:	bf00      	nop
    aea8:	2000d510 	.word	0x2000d510
    aeac:	2000d4e0 	.word	0x2000d4e0
    aeb0:	00013074 	.word	0x00013074
    aeb4:	00012fbc 	.word	0x00012fbc
    aeb8:	000116a8 	.word	0x000116a8
    aebc:	00013098 	.word	0x00013098
    aec0:	00011854 	.word	0x00011854
    aec4:	000118b4 	.word	0x000118b4
    aec8:	000118cc 	.word	0x000118cc
    aecc:	00011884 	.word	0x00011884
    aed0:	0001189c 	.word	0x0001189c

0000aed4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    aed4:	b570      	push	{r4, r5, r6, lr}
    aed6:	4604      	mov	r4, r0
    aed8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    aedc:	bb03      	cbnz	r3, af20 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    aede:	68a3      	ldr	r3, [r4, #8]
    aee0:	2b00      	cmp	r3, #0
    aee2:	f000 80a6 	beq.w	b032 <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    aee6:	4a56      	ldr	r2, [pc, #344]	; (b040 <z_impl_k_mutex_unlock+0x16c>)
    aee8:	6892      	ldr	r2, [r2, #8]
    aeea:	4293      	cmp	r3, r2
    aeec:	f040 80a4 	bne.w	b038 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    aef0:	68e3      	ldr	r3, [r4, #12]
    aef2:	b323      	cbz	r3, af3e <z_impl_k_mutex_unlock+0x6a>
    aef4:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    aef8:	bb6b      	cbnz	r3, af56 <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    aefa:	4b51      	ldr	r3, [pc, #324]	; (b040 <z_impl_k_mutex_unlock+0x16c>)
    aefc:	689b      	ldr	r3, [r3, #8]
    aefe:	7bdb      	ldrb	r3, [r3, #15]
    af00:	2b01      	cmp	r3, #1
    af02:	d037      	beq.n	af74 <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    af04:	4b4e      	ldr	r3, [pc, #312]	; (b040 <z_impl_k_mutex_unlock+0x16c>)
    af06:	689a      	ldr	r2, [r3, #8]
    af08:	7bd3      	ldrb	r3, [r2, #15]
    af0a:	3b01      	subs	r3, #1
    af0c:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    af0e:	68e3      	ldr	r3, [r4, #12]
    af10:	2b01      	cmp	r3, #1
    af12:	d93e      	bls.n	af92 <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    af14:	3b01      	subs	r3, #1
    af16:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    af18:	f001 f872 	bl	c000 <k_sched_unlock>

	return 0;
    af1c:	2000      	movs	r0, #0
}
    af1e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    af20:	4d48      	ldr	r5, [pc, #288]	; (b044 <z_impl_k_mutex_unlock+0x170>)
    af22:	23c7      	movs	r3, #199	; 0xc7
    af24:	462a      	mov	r2, r5
    af26:	4948      	ldr	r1, [pc, #288]	; (b048 <z_impl_k_mutex_unlock+0x174>)
    af28:	4848      	ldr	r0, [pc, #288]	; (b04c <z_impl_k_mutex_unlock+0x178>)
    af2a:	f004 f97a 	bl	f222 <assert_print>
    af2e:	4848      	ldr	r0, [pc, #288]	; (b050 <z_impl_k_mutex_unlock+0x17c>)
    af30:	f004 f977 	bl	f222 <assert_print>
    af34:	21c7      	movs	r1, #199	; 0xc7
    af36:	4628      	mov	r0, r5
    af38:	f004 f96c 	bl	f214 <assert_post_action>
    af3c:	e7cf      	b.n	aede <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    af3e:	4d41      	ldr	r5, [pc, #260]	; (b044 <z_impl_k_mutex_unlock+0x170>)
    af40:	23df      	movs	r3, #223	; 0xdf
    af42:	462a      	mov	r2, r5
    af44:	4943      	ldr	r1, [pc, #268]	; (b054 <z_impl_k_mutex_unlock+0x180>)
    af46:	4841      	ldr	r0, [pc, #260]	; (b04c <z_impl_k_mutex_unlock+0x178>)
    af48:	f004 f96b 	bl	f222 <assert_print>
    af4c:	21df      	movs	r1, #223	; 0xdf
    af4e:	4628      	mov	r0, r5
    af50:	f004 f960 	bl	f214 <assert_post_action>
    af54:	e7ce      	b.n	aef4 <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    af56:	4d40      	ldr	r5, [pc, #256]	; (b058 <z_impl_k_mutex_unlock+0x184>)
    af58:	23fd      	movs	r3, #253	; 0xfd
    af5a:	462a      	mov	r2, r5
    af5c:	493a      	ldr	r1, [pc, #232]	; (b048 <z_impl_k_mutex_unlock+0x174>)
    af5e:	483b      	ldr	r0, [pc, #236]	; (b04c <z_impl_k_mutex_unlock+0x178>)
    af60:	f004 f95f 	bl	f222 <assert_print>
    af64:	483d      	ldr	r0, [pc, #244]	; (b05c <z_impl_k_mutex_unlock+0x188>)
    af66:	f004 f95c 	bl	f222 <assert_print>
    af6a:	21fd      	movs	r1, #253	; 0xfd
    af6c:	4628      	mov	r0, r5
    af6e:	f004 f951 	bl	f214 <assert_post_action>
    af72:	e7c2      	b.n	aefa <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    af74:	4d38      	ldr	r5, [pc, #224]	; (b058 <z_impl_k_mutex_unlock+0x184>)
    af76:	23fe      	movs	r3, #254	; 0xfe
    af78:	462a      	mov	r2, r5
    af7a:	4939      	ldr	r1, [pc, #228]	; (b060 <z_impl_k_mutex_unlock+0x18c>)
    af7c:	4833      	ldr	r0, [pc, #204]	; (b04c <z_impl_k_mutex_unlock+0x178>)
    af7e:	f004 f950 	bl	f222 <assert_print>
    af82:	4836      	ldr	r0, [pc, #216]	; (b05c <z_impl_k_mutex_unlock+0x188>)
    af84:	f004 f94d 	bl	f222 <assert_print>
    af88:	21fe      	movs	r1, #254	; 0xfe
    af8a:	4628      	mov	r0, r5
    af8c:	f004 f942 	bl	f214 <assert_post_action>
    af90:	e7b8      	b.n	af04 <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    af92:	f04f 0320 	mov.w	r3, #32
    af96:	f3ef 8511 	mrs	r5, BASEPRI
    af9a:	f383 8812 	msr	BASEPRI_MAX, r3
    af9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    afa2:	4830      	ldr	r0, [pc, #192]	; (b064 <z_impl_k_mutex_unlock+0x190>)
    afa4:	f7ff fc36 	bl	a814 <z_spin_lock_valid>
    afa8:	b1c0      	cbz	r0, afdc <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    afaa:	482e      	ldr	r0, [pc, #184]	; (b064 <z_impl_k_mutex_unlock+0x190>)
    afac:	f7ff fc52 	bl	a854 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    afb0:	6921      	ldr	r1, [r4, #16]
    afb2:	4620      	mov	r0, r4
    afb4:	f005 fafc 	bl	105b0 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    afb8:	4620      	mov	r0, r4
    afba:	f001 f963 	bl	c284 <z_unpend_first_thread>
	mutex->owner = new_owner;
    afbe:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    afc0:	b1e0      	cbz	r0, affc <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    afc2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    afc6:	6123      	str	r3, [r4, #16]
    afc8:	2300      	movs	r3, #0
    afca:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    afce:	f000 fce1 	bl	b994 <z_ready_thread>
		z_reschedule(&lock, key);
    afd2:	4629      	mov	r1, r5
    afd4:	4823      	ldr	r0, [pc, #140]	; (b064 <z_impl_k_mutex_unlock+0x190>)
    afd6:	f000 fa39 	bl	b44c <z_reschedule>
    afda:	e79d      	b.n	af18 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    afdc:	4e22      	ldr	r6, [pc, #136]	; (b068 <z_impl_k_mutex_unlock+0x194>)
    afde:	238e      	movs	r3, #142	; 0x8e
    afe0:	4632      	mov	r2, r6
    afe2:	4922      	ldr	r1, [pc, #136]	; (b06c <z_impl_k_mutex_unlock+0x198>)
    afe4:	4819      	ldr	r0, [pc, #100]	; (b04c <z_impl_k_mutex_unlock+0x178>)
    afe6:	f004 f91c 	bl	f222 <assert_print>
    afea:	491e      	ldr	r1, [pc, #120]	; (b064 <z_impl_k_mutex_unlock+0x190>)
    afec:	4820      	ldr	r0, [pc, #128]	; (b070 <z_impl_k_mutex_unlock+0x19c>)
    afee:	f004 f918 	bl	f222 <assert_print>
    aff2:	218e      	movs	r1, #142	; 0x8e
    aff4:	4630      	mov	r0, r6
    aff6:	f004 f90d 	bl	f214 <assert_post_action>
    affa:	e7d6      	b.n	afaa <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    affc:	2300      	movs	r3, #0
    affe:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b000:	4818      	ldr	r0, [pc, #96]	; (b064 <z_impl_k_mutex_unlock+0x190>)
    b002:	f7ff fc17 	bl	a834 <z_spin_unlock_valid>
    b006:	b120      	cbz	r0, b012 <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    b008:	f385 8811 	msr	BASEPRI, r5
    b00c:	f3bf 8f6f 	isb	sy
    b010:	e782      	b.n	af18 <z_impl_k_mutex_unlock+0x44>
    b012:	4c15      	ldr	r4, [pc, #84]	; (b068 <z_impl_k_mutex_unlock+0x194>)
    b014:	23b9      	movs	r3, #185	; 0xb9
    b016:	4622      	mov	r2, r4
    b018:	4916      	ldr	r1, [pc, #88]	; (b074 <z_impl_k_mutex_unlock+0x1a0>)
    b01a:	480c      	ldr	r0, [pc, #48]	; (b04c <z_impl_k_mutex_unlock+0x178>)
    b01c:	f004 f901 	bl	f222 <assert_print>
    b020:	4910      	ldr	r1, [pc, #64]	; (b064 <z_impl_k_mutex_unlock+0x190>)
    b022:	4815      	ldr	r0, [pc, #84]	; (b078 <z_impl_k_mutex_unlock+0x1a4>)
    b024:	f004 f8fd 	bl	f222 <assert_print>
    b028:	21b9      	movs	r1, #185	; 0xb9
    b02a:	4620      	mov	r0, r4
    b02c:	f004 f8f2 	bl	f214 <assert_post_action>
    b030:	e7ea      	b.n	b008 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    b032:	f06f 0015 	mvn.w	r0, #21
    b036:	e772      	b.n	af1e <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    b038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b03c:	e76f      	b.n	af1e <z_impl_k_mutex_unlock+0x4a>
    b03e:	bf00      	nop
    b040:	2000d4e0 	.word	0x2000d4e0
    b044:	00013074 	.word	0x00013074
    b048:	00012fbc 	.word	0x00012fbc
    b04c:	000116a8 	.word	0x000116a8
    b050:	00013098 	.word	0x00013098
    b054:	000130c0 	.word	0x000130c0
    b058:	000130d8 	.word	0x000130d8
    b05c:	00013104 	.word	0x00013104
    b060:	00013108 	.word	0x00013108
    b064:	2000d510 	.word	0x2000d510
    b068:	00011854 	.word	0x00011854
    b06c:	000118b4 	.word	0x000118b4
    b070:	000118cc 	.word	0x000118cc
    b074:	00011884 	.word	0x00011884
    b078:	0001189c 	.word	0x0001189c

0000b07c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    b07c:	b570      	push	{r4, r5, r6, lr}
    b07e:	4604      	mov	r4, r0
	__asm__ volatile(
    b080:	f04f 0320 	mov.w	r3, #32
    b084:	f3ef 8511 	mrs	r5, BASEPRI
    b088:	f383 8812 	msr	BASEPRI_MAX, r3
    b08c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b090:	4817      	ldr	r0, [pc, #92]	; (b0f0 <z_impl_k_sem_give+0x74>)
    b092:	f7ff fbbf 	bl	a814 <z_spin_lock_valid>
    b096:	b180      	cbz	r0, b0ba <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    b098:	4815      	ldr	r0, [pc, #84]	; (b0f0 <z_impl_k_sem_give+0x74>)
    b09a:	f7ff fbdb 	bl	a854 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    b09e:	4620      	mov	r0, r4
    b0a0:	f001 f8f0 	bl	c284 <z_unpend_first_thread>

	if (thread != NULL) {
    b0a4:	b1c8      	cbz	r0, b0da <z_impl_k_sem_give+0x5e>
    b0a6:	2200      	movs	r2, #0
    b0a8:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    b0ac:	f000 fc72 	bl	b994 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    b0b0:	4629      	mov	r1, r5
    b0b2:	480f      	ldr	r0, [pc, #60]	; (b0f0 <z_impl_k_sem_give+0x74>)
    b0b4:	f000 f9ca 	bl	b44c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    b0b8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b0ba:	4e0e      	ldr	r6, [pc, #56]	; (b0f4 <z_impl_k_sem_give+0x78>)
    b0bc:	238e      	movs	r3, #142	; 0x8e
    b0be:	4632      	mov	r2, r6
    b0c0:	490d      	ldr	r1, [pc, #52]	; (b0f8 <z_impl_k_sem_give+0x7c>)
    b0c2:	480e      	ldr	r0, [pc, #56]	; (b0fc <z_impl_k_sem_give+0x80>)
    b0c4:	f004 f8ad 	bl	f222 <assert_print>
    b0c8:	4909      	ldr	r1, [pc, #36]	; (b0f0 <z_impl_k_sem_give+0x74>)
    b0ca:	480d      	ldr	r0, [pc, #52]	; (b100 <z_impl_k_sem_give+0x84>)
    b0cc:	f004 f8a9 	bl	f222 <assert_print>
    b0d0:	218e      	movs	r1, #142	; 0x8e
    b0d2:	4630      	mov	r0, r6
    b0d4:	f004 f89e 	bl	f214 <assert_post_action>
    b0d8:	e7de      	b.n	b098 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    b0da:	68a3      	ldr	r3, [r4, #8]
    b0dc:	68e2      	ldr	r2, [r4, #12]
    b0de:	4293      	cmp	r3, r2
    b0e0:	d003      	beq.n	b0ea <z_impl_k_sem_give+0x6e>
    b0e2:	2201      	movs	r2, #1
    b0e4:	4413      	add	r3, r2
    b0e6:	60a3      	str	r3, [r4, #8]
}
    b0e8:	e7e2      	b.n	b0b0 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    b0ea:	2200      	movs	r2, #0
    b0ec:	e7fa      	b.n	b0e4 <z_impl_k_sem_give+0x68>
    b0ee:	bf00      	nop
    b0f0:	2000d514 	.word	0x2000d514
    b0f4:	00011854 	.word	0x00011854
    b0f8:	000118b4 	.word	0x000118b4
    b0fc:	000116a8 	.word	0x000116a8
    b100:	000118cc 	.word	0x000118cc

0000b104 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    b104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b108:	b082      	sub	sp, #8
    b10a:	4604      	mov	r4, r0
    b10c:	4617      	mov	r7, r2
    b10e:	461d      	mov	r5, r3
    b110:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    b114:	b111      	cbz	r1, b11c <z_impl_k_sem_take+0x18>
    b116:	ea55 0302 	orrs.w	r3, r5, r2
    b11a:	d11f      	bne.n	b15c <z_impl_k_sem_take+0x58>
    b11c:	f04f 0320 	mov.w	r3, #32
    b120:	f3ef 8611 	mrs	r6, BASEPRI
    b124:	f383 8812 	msr	BASEPRI_MAX, r3
    b128:	f3bf 8f6f 	isb	sy
    b12c:	4836      	ldr	r0, [pc, #216]	; (b208 <z_impl_k_sem_take+0x104>)
    b12e:	f7ff fb71 	bl	a814 <z_spin_lock_valid>
    b132:	b310      	cbz	r0, b17a <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    b134:	4834      	ldr	r0, [pc, #208]	; (b208 <z_impl_k_sem_take+0x104>)
    b136:	f7ff fb8d 	bl	a854 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    b13a:	68a1      	ldr	r1, [r4, #8]
    b13c:	2900      	cmp	r1, #0
    b13e:	d03d      	beq.n	b1bc <z_impl_k_sem_take+0xb8>
		sem->count--;
    b140:	3901      	subs	r1, #1
    b142:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b144:	4830      	ldr	r0, [pc, #192]	; (b208 <z_impl_k_sem_take+0x104>)
    b146:	f7ff fb75 	bl	a834 <z_spin_unlock_valid>
    b14a:	b338      	cbz	r0, b19c <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    b14c:	f386 8811 	msr	BASEPRI, r6
    b150:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    b154:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    b156:	b002      	add	sp, #8
    b158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    b15c:	4e2b      	ldr	r6, [pc, #172]	; (b20c <z_impl_k_sem_take+0x108>)
    b15e:	2379      	movs	r3, #121	; 0x79
    b160:	4632      	mov	r2, r6
    b162:	492b      	ldr	r1, [pc, #172]	; (b210 <z_impl_k_sem_take+0x10c>)
    b164:	482b      	ldr	r0, [pc, #172]	; (b214 <z_impl_k_sem_take+0x110>)
    b166:	f004 f85c 	bl	f222 <assert_print>
    b16a:	482b      	ldr	r0, [pc, #172]	; (b218 <z_impl_k_sem_take+0x114>)
    b16c:	f004 f859 	bl	f222 <assert_print>
    b170:	2179      	movs	r1, #121	; 0x79
    b172:	4630      	mov	r0, r6
    b174:	f004 f84e 	bl	f214 <assert_post_action>
    b178:	e7d0      	b.n	b11c <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b17a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; b21c <z_impl_k_sem_take+0x118>
    b17e:	238e      	movs	r3, #142	; 0x8e
    b180:	4642      	mov	r2, r8
    b182:	4927      	ldr	r1, [pc, #156]	; (b220 <z_impl_k_sem_take+0x11c>)
    b184:	4823      	ldr	r0, [pc, #140]	; (b214 <z_impl_k_sem_take+0x110>)
    b186:	f004 f84c 	bl	f222 <assert_print>
    b18a:	491f      	ldr	r1, [pc, #124]	; (b208 <z_impl_k_sem_take+0x104>)
    b18c:	4825      	ldr	r0, [pc, #148]	; (b224 <z_impl_k_sem_take+0x120>)
    b18e:	f004 f848 	bl	f222 <assert_print>
    b192:	218e      	movs	r1, #142	; 0x8e
    b194:	4640      	mov	r0, r8
    b196:	f004 f83d 	bl	f214 <assert_post_action>
    b19a:	e7cb      	b.n	b134 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b19c:	4c1f      	ldr	r4, [pc, #124]	; (b21c <z_impl_k_sem_take+0x118>)
    b19e:	23b9      	movs	r3, #185	; 0xb9
    b1a0:	4622      	mov	r2, r4
    b1a2:	4921      	ldr	r1, [pc, #132]	; (b228 <z_impl_k_sem_take+0x124>)
    b1a4:	481b      	ldr	r0, [pc, #108]	; (b214 <z_impl_k_sem_take+0x110>)
    b1a6:	f004 f83c 	bl	f222 <assert_print>
    b1aa:	4917      	ldr	r1, [pc, #92]	; (b208 <z_impl_k_sem_take+0x104>)
    b1ac:	481f      	ldr	r0, [pc, #124]	; (b22c <z_impl_k_sem_take+0x128>)
    b1ae:	f004 f838 	bl	f222 <assert_print>
    b1b2:	21b9      	movs	r1, #185	; 0xb9
    b1b4:	4620      	mov	r0, r4
    b1b6:	f004 f82d 	bl	f214 <assert_post_action>
    b1ba:	e7c7      	b.n	b14c <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b1bc:	ea55 0307 	orrs.w	r3, r5, r7
    b1c0:	d007      	beq.n	b1d2 <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    b1c2:	9700      	str	r7, [sp, #0]
    b1c4:	9501      	str	r5, [sp, #4]
    b1c6:	4622      	mov	r2, r4
    b1c8:	4631      	mov	r1, r6
    b1ca:	480f      	ldr	r0, [pc, #60]	; (b208 <z_impl_k_sem_take+0x104>)
    b1cc:	f000 fdbe 	bl	bd4c <z_pend_curr>
	return ret;
    b1d0:	e7c1      	b.n	b156 <z_impl_k_sem_take+0x52>
    b1d2:	480d      	ldr	r0, [pc, #52]	; (b208 <z_impl_k_sem_take+0x104>)
    b1d4:	f7ff fb2e 	bl	a834 <z_spin_unlock_valid>
    b1d8:	b130      	cbz	r0, b1e8 <z_impl_k_sem_take+0xe4>
    b1da:	f386 8811 	msr	BASEPRI, r6
    b1de:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    b1e2:	f06f 000f 	mvn.w	r0, #15
    b1e6:	e7b6      	b.n	b156 <z_impl_k_sem_take+0x52>
    b1e8:	4c0c      	ldr	r4, [pc, #48]	; (b21c <z_impl_k_sem_take+0x118>)
    b1ea:	23b9      	movs	r3, #185	; 0xb9
    b1ec:	4622      	mov	r2, r4
    b1ee:	490e      	ldr	r1, [pc, #56]	; (b228 <z_impl_k_sem_take+0x124>)
    b1f0:	4808      	ldr	r0, [pc, #32]	; (b214 <z_impl_k_sem_take+0x110>)
    b1f2:	f004 f816 	bl	f222 <assert_print>
    b1f6:	4904      	ldr	r1, [pc, #16]	; (b208 <z_impl_k_sem_take+0x104>)
    b1f8:	480c      	ldr	r0, [pc, #48]	; (b22c <z_impl_k_sem_take+0x128>)
    b1fa:	f004 f812 	bl	f222 <assert_print>
    b1fe:	21b9      	movs	r1, #185	; 0xb9
    b200:	4620      	mov	r0, r4
    b202:	f004 f807 	bl	f214 <assert_post_action>
    b206:	e7e8      	b.n	b1da <z_impl_k_sem_take+0xd6>
    b208:	2000d514 	.word	0x2000d514
    b20c:	0001313c 	.word	0x0001313c
    b210:	0001315c 	.word	0x0001315c
    b214:	000116a8 	.word	0x000116a8
    b218:	00013104 	.word	0x00013104
    b21c:	00011854 	.word	0x00011854
    b220:	000118b4 	.word	0x000118b4
    b224:	000118cc 	.word	0x000118cc
    b228:	00011884 	.word	0x00011884
    b22c:	0001189c 	.word	0x0001189c

0000b230 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    b230:	b538      	push	{r3, r4, r5, lr}
    b232:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    b234:	6883      	ldr	r3, [r0, #8]
    b236:	b10b      	cbz	r3, b23c <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    b238:	68a0      	ldr	r0, [r4, #8]
    b23a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    b23c:	4d06      	ldr	r5, [pc, #24]	; (b258 <pended_on_thread+0x28>)
    b23e:	f240 23b9 	movw	r3, #697	; 0x2b9
    b242:	462a      	mov	r2, r5
    b244:	4905      	ldr	r1, [pc, #20]	; (b25c <pended_on_thread+0x2c>)
    b246:	4806      	ldr	r0, [pc, #24]	; (b260 <pended_on_thread+0x30>)
    b248:	f003 ffeb 	bl	f222 <assert_print>
    b24c:	f240 21b9 	movw	r1, #697	; 0x2b9
    b250:	4628      	mov	r0, r5
    b252:	f003 ffdf 	bl	f214 <assert_post_action>
    b256:	e7ef      	b.n	b238 <pended_on_thread+0x8>
    b258:	000131ac 	.word	0x000131ac
    b25c:	000131d0 	.word	0x000131d0
    b260:	000116a8 	.word	0x000116a8

0000b264 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b268:	bf08      	it	eq
    b26a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b26e:	d100      	bne.n	b272 <add_thread_timeout+0xe>
    b270:	4770      	bx	lr
{
    b272:	b508      	push	{r3, lr}
    b274:	4902      	ldr	r1, [pc, #8]	; (b280 <add_thread_timeout+0x1c>)
    b276:	3018      	adds	r0, #24
    b278:	f001 fb36 	bl	c8e8 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    b27c:	bd08      	pop	{r3, pc}
    b27e:	bf00      	nop
    b280:	0000baf1 	.word	0x0000baf1

0000b284 <z_reset_time_slice>:
{
    b284:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    b286:	4b07      	ldr	r3, [pc, #28]	; (b2a4 <z_reset_time_slice+0x20>)
    b288:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    b28a:	b904      	cbnz	r4, b28e <z_reset_time_slice+0xa>
}
    b28c:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    b28e:	f7fc ff21 	bl	80d4 <sys_clock_elapsed>
    b292:	4404      	add	r4, r0
    b294:	4b04      	ldr	r3, [pc, #16]	; (b2a8 <z_reset_time_slice+0x24>)
    b296:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    b298:	2100      	movs	r1, #0
    b29a:	4b02      	ldr	r3, [pc, #8]	; (b2a4 <z_reset_time_slice+0x20>)
    b29c:	6818      	ldr	r0, [r3, #0]
    b29e:	f001 fcb3 	bl	cc08 <z_set_timeout_expiry>
}
    b2a2:	e7f3      	b.n	b28c <z_reset_time_slice+0x8>
    b2a4:	2000d524 	.word	0x2000d524
    b2a8:	2000d4e0 	.word	0x2000d4e0

0000b2ac <k_sched_time_slice_set>:
{
    b2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2b0:	4604      	mov	r4, r0
    b2b2:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    b2b4:	2700      	movs	r7, #0
	__asm__ volatile(
    b2b6:	f04f 0320 	mov.w	r3, #32
    b2ba:	f3ef 8611 	mrs	r6, BASEPRI
    b2be:	f383 8812 	msr	BASEPRI_MAX, r3
    b2c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b2c6:	482a      	ldr	r0, [pc, #168]	; (b370 <k_sched_time_slice_set+0xc4>)
    b2c8:	f7ff faa4 	bl	a814 <z_spin_lock_valid>
    b2cc:	b118      	cbz	r0, b2d6 <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    b2ce:	4828      	ldr	r0, [pc, #160]	; (b370 <k_sched_time_slice_set+0xc4>)
    b2d0:	f7ff fac0 	bl	a854 <z_spin_lock_set_owner>
	return k;
    b2d4:	e023      	b.n	b31e <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b2d6:	f8df 809c 	ldr.w	r8, [pc, #156]	; b374 <k_sched_time_slice_set+0xc8>
    b2da:	238e      	movs	r3, #142	; 0x8e
    b2dc:	4642      	mov	r2, r8
    b2de:	4926      	ldr	r1, [pc, #152]	; (b378 <k_sched_time_slice_set+0xcc>)
    b2e0:	4826      	ldr	r0, [pc, #152]	; (b37c <k_sched_time_slice_set+0xd0>)
    b2e2:	f003 ff9e 	bl	f222 <assert_print>
    b2e6:	4922      	ldr	r1, [pc, #136]	; (b370 <k_sched_time_slice_set+0xc4>)
    b2e8:	4825      	ldr	r0, [pc, #148]	; (b380 <k_sched_time_slice_set+0xd4>)
    b2ea:	f003 ff9a 	bl	f222 <assert_print>
    b2ee:	218e      	movs	r1, #142	; 0x8e
    b2f0:	4640      	mov	r0, r8
    b2f2:	f003 ff8f 	bl	f214 <assert_post_action>
    b2f6:	e7ea      	b.n	b2ce <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    b2f8:	2802      	cmp	r0, #2
    b2fa:	bfb8      	it	lt
    b2fc:	2002      	movlt	r0, #2
    b2fe:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    b300:	4b20      	ldr	r3, [pc, #128]	; (b384 <k_sched_time_slice_set+0xd8>)
    b302:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    b304:	4b20      	ldr	r3, [pc, #128]	; (b388 <k_sched_time_slice_set+0xdc>)
    b306:	6898      	ldr	r0, [r3, #8]
    b308:	f7ff ffbc 	bl	b284 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b30c:	4818      	ldr	r0, [pc, #96]	; (b370 <k_sched_time_slice_set+0xc4>)
    b30e:	f7ff fa91 	bl	a834 <z_spin_unlock_valid>
    b312:	b1d0      	cbz	r0, b34a <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    b314:	f386 8811 	msr	BASEPRI, r6
    b318:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b31c:	2701      	movs	r7, #1
    b31e:	bb27      	cbnz	r7, b36a <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    b320:	4b19      	ldr	r3, [pc, #100]	; (b388 <k_sched_time_slice_set+0xdc>)
    b322:	2200      	movs	r2, #0
    b324:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    b326:	0c61      	lsrs	r1, r4, #17
    b328:	03e3      	lsls	r3, r4, #15
    b32a:	f240 30e7 	movw	r0, #999	; 0x3e7
    b32e:	1818      	adds	r0, r3, r0
    b330:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b334:	f04f 0300 	mov.w	r3, #0
    b338:	f141 0100 	adc.w	r1, r1, #0
    b33c:	f7f5 fb4e 	bl	9dc <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    b340:	4b12      	ldr	r3, [pc, #72]	; (b38c <k_sched_time_slice_set+0xe0>)
    b342:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    b344:	2c00      	cmp	r4, #0
    b346:	dcd7      	bgt.n	b2f8 <k_sched_time_slice_set+0x4c>
    b348:	e7da      	b.n	b300 <k_sched_time_slice_set+0x54>
    b34a:	4f0a      	ldr	r7, [pc, #40]	; (b374 <k_sched_time_slice_set+0xc8>)
    b34c:	23b9      	movs	r3, #185	; 0xb9
    b34e:	463a      	mov	r2, r7
    b350:	490f      	ldr	r1, [pc, #60]	; (b390 <k_sched_time_slice_set+0xe4>)
    b352:	480a      	ldr	r0, [pc, #40]	; (b37c <k_sched_time_slice_set+0xd0>)
    b354:	f003 ff65 	bl	f222 <assert_print>
    b358:	4905      	ldr	r1, [pc, #20]	; (b370 <k_sched_time_slice_set+0xc4>)
    b35a:	480e      	ldr	r0, [pc, #56]	; (b394 <k_sched_time_slice_set+0xe8>)
    b35c:	f003 ff61 	bl	f222 <assert_print>
    b360:	21b9      	movs	r1, #185	; 0xb9
    b362:	4638      	mov	r0, r7
    b364:	f003 ff56 	bl	f214 <assert_post_action>
    b368:	e7d4      	b.n	b314 <k_sched_time_slice_set+0x68>
}
    b36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b36e:	bf00      	nop
    b370:	2000d51c 	.word	0x2000d51c
    b374:	00011854 	.word	0x00011854
    b378:	000118b4 	.word	0x000118b4
    b37c:	000116a8 	.word	0x000116a8
    b380:	000118cc 	.word	0x000118cc
    b384:	2000d520 	.word	0x2000d520
    b388:	2000d4e0 	.word	0x2000d4e0
    b38c:	2000d524 	.word	0x2000d524
    b390:	00011884 	.word	0x00011884
    b394:	0001189c 	.word	0x0001189c

0000b398 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b39a:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    b39c:	2500      	movs	r5, #0
	__asm__ volatile(
    b39e:	f04f 0320 	mov.w	r3, #32
    b3a2:	f3ef 8611 	mrs	r6, BASEPRI
    b3a6:	f383 8812 	msr	BASEPRI_MAX, r3
    b3aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b3ae:	4820      	ldr	r0, [pc, #128]	; (b430 <z_unpend_thread_no_timeout+0x98>)
    b3b0:	f7ff fa30 	bl	a814 <z_spin_lock_valid>
    b3b4:	b118      	cbz	r0, b3be <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
    b3b6:	481e      	ldr	r0, [pc, #120]	; (b430 <z_unpend_thread_no_timeout+0x98>)
    b3b8:	f7ff fa4c 	bl	a854 <z_spin_lock_set_owner>
	return k;
    b3bc:	e014      	b.n	b3e8 <z_unpend_thread_no_timeout+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b3be:	4f1d      	ldr	r7, [pc, #116]	; (b434 <z_unpend_thread_no_timeout+0x9c>)
    b3c0:	238e      	movs	r3, #142	; 0x8e
    b3c2:	463a      	mov	r2, r7
    b3c4:	491c      	ldr	r1, [pc, #112]	; (b438 <z_unpend_thread_no_timeout+0xa0>)
    b3c6:	481d      	ldr	r0, [pc, #116]	; (b43c <z_unpend_thread_no_timeout+0xa4>)
    b3c8:	f003 ff2b 	bl	f222 <assert_print>
    b3cc:	4918      	ldr	r1, [pc, #96]	; (b430 <z_unpend_thread_no_timeout+0x98>)
    b3ce:	481c      	ldr	r0, [pc, #112]	; (b440 <z_unpend_thread_no_timeout+0xa8>)
    b3d0:	f003 ff27 	bl	f222 <assert_print>
    b3d4:	218e      	movs	r1, #142	; 0x8e
    b3d6:	4638      	mov	r0, r7
    b3d8:	f003 ff1c 	bl	f214 <assert_post_action>
    b3dc:	e7eb      	b.n	b3b6 <z_unpend_thread_no_timeout+0x1e>
	__asm__ volatile(
    b3de:	f386 8811 	msr	BASEPRI, r6
    b3e2:	f3bf 8f6f 	isb	sy
    b3e6:	2501      	movs	r5, #1
    b3e8:	bb05      	cbnz	r5, b42c <z_unpend_thread_no_timeout+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    b3ea:	4620      	mov	r0, r4
    b3ec:	f7ff ff20 	bl	b230 <pended_on_thread>
    b3f0:	4621      	mov	r1, r4
    b3f2:	f000 f8fb 	bl	b5ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    b3f6:	7b63      	ldrb	r3, [r4, #13]
    b3f8:	f023 0302 	bic.w	r3, r3, #2
    b3fc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    b3fe:	2300      	movs	r3, #0
    b400:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b402:	480b      	ldr	r0, [pc, #44]	; (b430 <z_unpend_thread_no_timeout+0x98>)
    b404:	f7ff fa16 	bl	a834 <z_spin_unlock_valid>
    b408:	2800      	cmp	r0, #0
    b40a:	d1e8      	bne.n	b3de <z_unpend_thread_no_timeout+0x46>
    b40c:	4d09      	ldr	r5, [pc, #36]	; (b434 <z_unpend_thread_no_timeout+0x9c>)
    b40e:	23b9      	movs	r3, #185	; 0xb9
    b410:	462a      	mov	r2, r5
    b412:	490c      	ldr	r1, [pc, #48]	; (b444 <z_unpend_thread_no_timeout+0xac>)
    b414:	4809      	ldr	r0, [pc, #36]	; (b43c <z_unpend_thread_no_timeout+0xa4>)
    b416:	f003 ff04 	bl	f222 <assert_print>
    b41a:	4905      	ldr	r1, [pc, #20]	; (b430 <z_unpend_thread_no_timeout+0x98>)
    b41c:	480a      	ldr	r0, [pc, #40]	; (b448 <z_unpend_thread_no_timeout+0xb0>)
    b41e:	f003 ff00 	bl	f222 <assert_print>
    b422:	21b9      	movs	r1, #185	; 0xb9
    b424:	4628      	mov	r0, r5
    b426:	f003 fef5 	bl	f214 <assert_post_action>
    b42a:	e7d8      	b.n	b3de <z_unpend_thread_no_timeout+0x46>
		unpend_thread_no_timeout(thread);
	}
}
    b42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b42e:	bf00      	nop
    b430:	2000d51c 	.word	0x2000d51c
    b434:	00011854 	.word	0x00011854
    b438:	000118b4 	.word	0x000118b4
    b43c:	000116a8 	.word	0x000116a8
    b440:	000118cc 	.word	0x000118cc
    b444:	00011884 	.word	0x00011884
    b448:	0001189c 	.word	0x0001189c

0000b44c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    b44c:	b570      	push	{r4, r5, r6, lr}
    b44e:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    b450:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b452:	b921      	cbnz	r1, b45e <z_reschedule+0x12>
    b454:	f3ef 8305 	mrs	r3, IPSR
    b458:	b913      	cbnz	r3, b460 <z_reschedule+0x14>
    b45a:	2101      	movs	r1, #1
    b45c:	e000      	b.n	b460 <z_reschedule+0x14>
    b45e:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    b460:	f011 0f01 	tst.w	r1, #1
    b464:	d01c      	beq.n	b4a0 <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    b466:	4b1b      	ldr	r3, [pc, #108]	; (b4d4 <z_reschedule+0x88>)
    b468:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    b46a:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    b46c:	429a      	cmp	r2, r3
    b46e:	d017      	beq.n	b4a0 <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b470:	4620      	mov	r0, r4
    b472:	f7ff f9df 	bl	a834 <z_spin_unlock_valid>
    b476:	b118      	cbz	r0, b480 <z_reschedule+0x34>
	ret = arch_swap(key);
    b478:	4628      	mov	r0, r5
    b47a:	f7fa fd37 	bl	5eec <arch_swap>
		z_swap(lock, key);
    b47e:	e017      	b.n	b4b0 <z_reschedule+0x64>
    b480:	4e15      	ldr	r6, [pc, #84]	; (b4d8 <z_reschedule+0x8c>)
    b482:	23d0      	movs	r3, #208	; 0xd0
    b484:	4632      	mov	r2, r6
    b486:	4915      	ldr	r1, [pc, #84]	; (b4dc <z_reschedule+0x90>)
    b488:	4815      	ldr	r0, [pc, #84]	; (b4e0 <z_reschedule+0x94>)
    b48a:	f003 feca 	bl	f222 <assert_print>
    b48e:	4621      	mov	r1, r4
    b490:	4814      	ldr	r0, [pc, #80]	; (b4e4 <z_reschedule+0x98>)
    b492:	f003 fec6 	bl	f222 <assert_print>
    b496:	21d0      	movs	r1, #208	; 0xd0
    b498:	4630      	mov	r0, r6
    b49a:	f003 febb 	bl	f214 <assert_post_action>
    b49e:	e7eb      	b.n	b478 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b4a0:	4620      	mov	r0, r4
    b4a2:	f7ff f9c7 	bl	a834 <z_spin_unlock_valid>
    b4a6:	b120      	cbz	r0, b4b2 <z_reschedule+0x66>
    b4a8:	f385 8811 	msr	BASEPRI, r5
    b4ac:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    b4b0:	bd70      	pop	{r4, r5, r6, pc}
    b4b2:	4e09      	ldr	r6, [pc, #36]	; (b4d8 <z_reschedule+0x8c>)
    b4b4:	23b9      	movs	r3, #185	; 0xb9
    b4b6:	4632      	mov	r2, r6
    b4b8:	4908      	ldr	r1, [pc, #32]	; (b4dc <z_reschedule+0x90>)
    b4ba:	4809      	ldr	r0, [pc, #36]	; (b4e0 <z_reschedule+0x94>)
    b4bc:	f003 feb1 	bl	f222 <assert_print>
    b4c0:	4621      	mov	r1, r4
    b4c2:	4808      	ldr	r0, [pc, #32]	; (b4e4 <z_reschedule+0x98>)
    b4c4:	f003 fead 	bl	f222 <assert_print>
    b4c8:	21b9      	movs	r1, #185	; 0xb9
    b4ca:	4630      	mov	r0, r6
    b4cc:	f003 fea2 	bl	f214 <assert_post_action>
    b4d0:	e7ea      	b.n	b4a8 <z_reschedule+0x5c>
    b4d2:	bf00      	nop
    b4d4:	2000d4e0 	.word	0x2000d4e0
    b4d8:	00011854 	.word	0x00011854
    b4dc:	00011884 	.word	0x00011884
    b4e0:	000116a8 	.word	0x000116a8
    b4e4:	0001189c 	.word	0x0001189c

0000b4e8 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    b4e8:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    b4ea:	2400      	movs	r4, #0
	__asm__ volatile(
    b4ec:	f04f 0320 	mov.w	r3, #32
    b4f0:	f3ef 8511 	mrs	r5, BASEPRI
    b4f4:	f383 8812 	msr	BASEPRI_MAX, r3
    b4f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b4fc:	482f      	ldr	r0, [pc, #188]	; (b5bc <k_sched_lock+0xd4>)
    b4fe:	f7ff f989 	bl	a814 <z_spin_lock_valid>
    b502:	b118      	cbz	r0, b50c <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    b504:	482d      	ldr	r0, [pc, #180]	; (b5bc <k_sched_lock+0xd4>)
    b506:	f7ff f9a5 	bl	a854 <z_spin_lock_set_owner>
	return k;
    b50a:	e022      	b.n	b552 <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b50c:	4e2c      	ldr	r6, [pc, #176]	; (b5c0 <k_sched_lock+0xd8>)
    b50e:	238e      	movs	r3, #142	; 0x8e
    b510:	4632      	mov	r2, r6
    b512:	492c      	ldr	r1, [pc, #176]	; (b5c4 <k_sched_lock+0xdc>)
    b514:	482c      	ldr	r0, [pc, #176]	; (b5c8 <k_sched_lock+0xe0>)
    b516:	f003 fe84 	bl	f222 <assert_print>
    b51a:	4928      	ldr	r1, [pc, #160]	; (b5bc <k_sched_lock+0xd4>)
    b51c:	482b      	ldr	r0, [pc, #172]	; (b5cc <k_sched_lock+0xe4>)
    b51e:	f003 fe80 	bl	f222 <assert_print>
    b522:	218e      	movs	r1, #142	; 0x8e
    b524:	4630      	mov	r0, r6
    b526:	f003 fe75 	bl	f214 <assert_post_action>
    b52a:	e7eb      	b.n	b504 <k_sched_lock+0x1c>
	__ASSERT(_current->base.sched_locked != 1U, "");
    b52c:	4b28      	ldr	r3, [pc, #160]	; (b5d0 <k_sched_lock+0xe8>)
    b52e:	689b      	ldr	r3, [r3, #8]
    b530:	7bdb      	ldrb	r3, [r3, #15]
    b532:	2b01      	cmp	r3, #1
    b534:	d022      	beq.n	b57c <k_sched_lock+0x94>
	--_current->base.sched_locked;
    b536:	4b26      	ldr	r3, [pc, #152]	; (b5d0 <k_sched_lock+0xe8>)
    b538:	689a      	ldr	r2, [r3, #8]
    b53a:	7bd3      	ldrb	r3, [r2, #15]
    b53c:	3b01      	subs	r3, #1
    b53e:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b540:	481e      	ldr	r0, [pc, #120]	; (b5bc <k_sched_lock+0xd4>)
    b542:	f7ff f977 	bl	a834 <z_spin_unlock_valid>
    b546:	b340      	cbz	r0, b59a <k_sched_lock+0xb2>
	__asm__ volatile(
    b548:	f385 8811 	msr	BASEPRI, r5
    b54c:	f3bf 8f6f 	isb	sy
    b550:	2401      	movs	r4, #1
    b552:	2c00      	cmp	r4, #0
    b554:	d131      	bne.n	b5ba <k_sched_lock+0xd2>
    b556:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    b55a:	2b00      	cmp	r3, #0
    b55c:	d0e6      	beq.n	b52c <k_sched_lock+0x44>
    b55e:	4c1d      	ldr	r4, [pc, #116]	; (b5d4 <k_sched_lock+0xec>)
    b560:	23fd      	movs	r3, #253	; 0xfd
    b562:	4622      	mov	r2, r4
    b564:	491c      	ldr	r1, [pc, #112]	; (b5d8 <k_sched_lock+0xf0>)
    b566:	4818      	ldr	r0, [pc, #96]	; (b5c8 <k_sched_lock+0xe0>)
    b568:	f003 fe5b 	bl	f222 <assert_print>
    b56c:	481b      	ldr	r0, [pc, #108]	; (b5dc <k_sched_lock+0xf4>)
    b56e:	f003 fe58 	bl	f222 <assert_print>
    b572:	21fd      	movs	r1, #253	; 0xfd
    b574:	4620      	mov	r0, r4
    b576:	f003 fe4d 	bl	f214 <assert_post_action>
    b57a:	e7d7      	b.n	b52c <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    b57c:	4c15      	ldr	r4, [pc, #84]	; (b5d4 <k_sched_lock+0xec>)
    b57e:	23fe      	movs	r3, #254	; 0xfe
    b580:	4622      	mov	r2, r4
    b582:	4917      	ldr	r1, [pc, #92]	; (b5e0 <k_sched_lock+0xf8>)
    b584:	4810      	ldr	r0, [pc, #64]	; (b5c8 <k_sched_lock+0xe0>)
    b586:	f003 fe4c 	bl	f222 <assert_print>
    b58a:	4814      	ldr	r0, [pc, #80]	; (b5dc <k_sched_lock+0xf4>)
    b58c:	f003 fe49 	bl	f222 <assert_print>
    b590:	21fe      	movs	r1, #254	; 0xfe
    b592:	4620      	mov	r0, r4
    b594:	f003 fe3e 	bl	f214 <assert_post_action>
    b598:	e7cd      	b.n	b536 <k_sched_lock+0x4e>
    b59a:	4c09      	ldr	r4, [pc, #36]	; (b5c0 <k_sched_lock+0xd8>)
    b59c:	23b9      	movs	r3, #185	; 0xb9
    b59e:	4622      	mov	r2, r4
    b5a0:	4910      	ldr	r1, [pc, #64]	; (b5e4 <k_sched_lock+0xfc>)
    b5a2:	4809      	ldr	r0, [pc, #36]	; (b5c8 <k_sched_lock+0xe0>)
    b5a4:	f003 fe3d 	bl	f222 <assert_print>
    b5a8:	4904      	ldr	r1, [pc, #16]	; (b5bc <k_sched_lock+0xd4>)
    b5aa:	480f      	ldr	r0, [pc, #60]	; (b5e8 <k_sched_lock+0x100>)
    b5ac:	f003 fe39 	bl	f222 <assert_print>
    b5b0:	21b9      	movs	r1, #185	; 0xb9
    b5b2:	4620      	mov	r0, r4
    b5b4:	f003 fe2e 	bl	f214 <assert_post_action>
    b5b8:	e7c6      	b.n	b548 <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    b5ba:	bd70      	pop	{r4, r5, r6, pc}
    b5bc:	2000d51c 	.word	0x2000d51c
    b5c0:	00011854 	.word	0x00011854
    b5c4:	000118b4 	.word	0x000118b4
    b5c8:	000116a8 	.word	0x000116a8
    b5cc:	000118cc 	.word	0x000118cc
    b5d0:	2000d4e0 	.word	0x2000d4e0
    b5d4:	000130d8 	.word	0x000130d8
    b5d8:	00012fbc 	.word	0x00012fbc
    b5dc:	00013104 	.word	0x00013104
    b5e0:	00013108 	.word	0x00013108
    b5e4:	00011884 	.word	0x00011884
    b5e8:	0001189c 	.word	0x0001189c

0000b5ec <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    b5ec:	b538      	push	{r3, r4, r5, lr}
    b5ee:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b5f0:	4b0c      	ldr	r3, [pc, #48]	; (b624 <z_priq_dumb_remove+0x38>)
    b5f2:	4299      	cmp	r1, r3
    b5f4:	d007      	beq.n	b606 <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    b5f6:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    b5f8:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    b5fa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b5fc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b5fe:	2300      	movs	r3, #0
    b600:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    b602:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    b604:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b606:	4d08      	ldr	r5, [pc, #32]	; (b628 <z_priq_dumb_remove+0x3c>)
    b608:	f240 433d 	movw	r3, #1085	; 0x43d
    b60c:	462a      	mov	r2, r5
    b60e:	4907      	ldr	r1, [pc, #28]	; (b62c <z_priq_dumb_remove+0x40>)
    b610:	4807      	ldr	r0, [pc, #28]	; (b630 <z_priq_dumb_remove+0x44>)
    b612:	f003 fe06 	bl	f222 <assert_print>
    b616:	f240 413d 	movw	r1, #1085	; 0x43d
    b61a:	4628      	mov	r0, r5
    b61c:	f003 fdfa 	bl	f214 <assert_post_action>
    b620:	e7e9      	b.n	b5f6 <z_priq_dumb_remove+0xa>
    b622:	bf00      	nop
    b624:	200047c8 	.word	0x200047c8
    b628:	000131ac 	.word	0x000131ac
    b62c:	000131e8 	.word	0x000131e8
    b630:	000116a8 	.word	0x000116a8

0000b634 <update_cache>:
{
    b634:	b538      	push	{r3, r4, r5, lr}
    b636:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    b638:	4819      	ldr	r0, [pc, #100]	; (b6a0 <update_cache+0x6c>)
    b63a:	f004 fffb 	bl	10634 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    b63e:	4605      	mov	r5, r0
    b640:	b188      	cbz	r0, b666 <update_cache+0x32>
	if (preempt_ok != 0) {
    b642:	bb14      	cbnz	r4, b68a <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    b644:	4b17      	ldr	r3, [pc, #92]	; (b6a4 <update_cache+0x70>)
    b646:	689b      	ldr	r3, [r3, #8]
    b648:	b183      	cbz	r3, b66c <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    b64a:	4b16      	ldr	r3, [pc, #88]	; (b6a4 <update_cache+0x70>)
    b64c:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    b64e:	7b5a      	ldrb	r2, [r3, #13]
    b650:	f012 0f1f 	tst.w	r2, #31
    b654:	d119      	bne.n	b68a <update_cache+0x56>
	return node->next != NULL;
    b656:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    b658:	b9ba      	cbnz	r2, b68a <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    b65a:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    b65c:	2a7f      	cmp	r2, #127	; 0x7f
    b65e:	d914      	bls.n	b68a <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    b660:	4a10      	ldr	r2, [pc, #64]	; (b6a4 <update_cache+0x70>)
    b662:	61d3      	str	r3, [r2, #28]
    b664:	e01a      	b.n	b69c <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    b666:	4b0f      	ldr	r3, [pc, #60]	; (b6a4 <update_cache+0x70>)
    b668:	68dd      	ldr	r5, [r3, #12]
    b66a:	e7ea      	b.n	b642 <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    b66c:	4c0e      	ldr	r4, [pc, #56]	; (b6a8 <update_cache+0x74>)
    b66e:	2389      	movs	r3, #137	; 0x89
    b670:	4622      	mov	r2, r4
    b672:	490e      	ldr	r1, [pc, #56]	; (b6ac <update_cache+0x78>)
    b674:	480e      	ldr	r0, [pc, #56]	; (b6b0 <update_cache+0x7c>)
    b676:	f003 fdd4 	bl	f222 <assert_print>
    b67a:	480e      	ldr	r0, [pc, #56]	; (b6b4 <update_cache+0x80>)
    b67c:	f003 fdd1 	bl	f222 <assert_print>
    b680:	2189      	movs	r1, #137	; 0x89
    b682:	4620      	mov	r0, r4
    b684:	f003 fdc6 	bl	f214 <assert_post_action>
    b688:	e7df      	b.n	b64a <update_cache+0x16>
		if (thread != _current) {
    b68a:	4b06      	ldr	r3, [pc, #24]	; (b6a4 <update_cache+0x70>)
    b68c:	689b      	ldr	r3, [r3, #8]
    b68e:	42ab      	cmp	r3, r5
    b690:	d002      	beq.n	b698 <update_cache+0x64>
			z_reset_time_slice(thread);
    b692:	4628      	mov	r0, r5
    b694:	f7ff fdf6 	bl	b284 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    b698:	4b02      	ldr	r3, [pc, #8]	; (b6a4 <update_cache+0x70>)
    b69a:	61dd      	str	r5, [r3, #28]
}
    b69c:	bd38      	pop	{r3, r4, r5, pc}
    b69e:	bf00      	nop
    b6a0:	2000d500 	.word	0x2000d500
    b6a4:	2000d4e0 	.word	0x2000d4e0
    b6a8:	000131ac 	.word	0x000131ac
    b6ac:	0001320c 	.word	0x0001320c
    b6b0:	000116a8 	.word	0x000116a8
    b6b4:	00013104 	.word	0x00013104

0000b6b8 <move_thread_to_end_of_prio_q>:
{
    b6b8:	b538      	push	{r3, r4, r5, lr}
    b6ba:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    b6bc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    b6be:	f990 300d 	ldrsb.w	r3, [r0, #13]
    b6c2:	2b00      	cmp	r3, #0
    b6c4:	db2b      	blt.n	b71e <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    b6c6:	7b6b      	ldrb	r3, [r5, #13]
    b6c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b6cc:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b6ce:	4b22      	ldr	r3, [pc, #136]	; (b758 <move_thread_to_end_of_prio_q+0xa0>)
    b6d0:	429d      	cmp	r5, r3
    b6d2:	d02c      	beq.n	b72e <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    b6d4:	4b21      	ldr	r3, [pc, #132]	; (b75c <move_thread_to_end_of_prio_q+0xa4>)
    b6d6:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b6da:	429c      	cmp	r4, r3
    b6dc:	d039      	beq.n	b752 <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b6de:	b16c      	cbz	r4, b6fc <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b6e0:	4621      	mov	r1, r4
    b6e2:	4628      	mov	r0, r5
    b6e4:	f004 ff87 	bl	105f6 <z_sched_prio_cmp>
    b6e8:	2800      	cmp	r0, #0
    b6ea:	dc2c      	bgt.n	b746 <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b6ec:	b134      	cbz	r4, b6fc <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    b6ee:	4b1b      	ldr	r3, [pc, #108]	; (b75c <move_thread_to_end_of_prio_q+0xa4>)
    b6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b6f2:	429c      	cmp	r4, r3
    b6f4:	d002      	beq.n	b6fc <move_thread_to_end_of_prio_q+0x44>
    b6f6:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b6f8:	2c00      	cmp	r4, #0
    b6fa:	d1f0      	bne.n	b6de <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    b6fc:	4b17      	ldr	r3, [pc, #92]	; (b75c <move_thread_to_end_of_prio_q+0xa4>)
    b6fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    b700:	f103 0120 	add.w	r1, r3, #32
    b704:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    b706:	606a      	str	r2, [r5, #4]
	tail->next = node;
    b708:	6015      	str	r5, [r2, #0]
	list->tail = node;
    b70a:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    b70c:	4b13      	ldr	r3, [pc, #76]	; (b75c <move_thread_to_end_of_prio_q+0xa4>)
    b70e:	6898      	ldr	r0, [r3, #8]
    b710:	42a8      	cmp	r0, r5
    b712:	bf14      	ite	ne
    b714:	2000      	movne	r0, #0
    b716:	2001      	moveq	r0, #1
    b718:	f7ff ff8c 	bl	b634 <update_cache>
}
    b71c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b71e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b722:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    b724:	4601      	mov	r1, r0
    b726:	480e      	ldr	r0, [pc, #56]	; (b760 <move_thread_to_end_of_prio_q+0xa8>)
    b728:	f7ff ff60 	bl	b5ec <z_priq_dumb_remove>
}
    b72c:	e7cb      	b.n	b6c6 <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b72e:	4c0d      	ldr	r4, [pc, #52]	; (b764 <move_thread_to_end_of_prio_q+0xac>)
    b730:	23ba      	movs	r3, #186	; 0xba
    b732:	4622      	mov	r2, r4
    b734:	490c      	ldr	r1, [pc, #48]	; (b768 <move_thread_to_end_of_prio_q+0xb0>)
    b736:	480d      	ldr	r0, [pc, #52]	; (b76c <move_thread_to_end_of_prio_q+0xb4>)
    b738:	f003 fd73 	bl	f222 <assert_print>
    b73c:	21ba      	movs	r1, #186	; 0xba
    b73e:	4620      	mov	r0, r4
    b740:	f003 fd68 	bl	f214 <assert_post_action>
    b744:	e7c6      	b.n	b6d4 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    b746:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    b748:	606b      	str	r3, [r5, #4]
	node->next = successor;
    b74a:	602c      	str	r4, [r5, #0]
	prev->next = node;
    b74c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    b74e:	6065      	str	r5, [r4, #4]
}
    b750:	e7dc      	b.n	b70c <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b752:	2400      	movs	r4, #0
    b754:	e7c3      	b.n	b6de <move_thread_to_end_of_prio_q+0x26>
    b756:	bf00      	nop
    b758:	200047c8 	.word	0x200047c8
    b75c:	2000d4e0 	.word	0x2000d4e0
    b760:	2000d500 	.word	0x2000d500
    b764:	000131ac 	.word	0x000131ac
    b768:	000131e8 	.word	0x000131e8
    b76c:	000116a8 	.word	0x000116a8

0000b770 <slice_expired_locked>:
{
    b770:	b538      	push	{r3, r4, r5, lr}
    b772:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    b774:	4b07      	ldr	r3, [pc, #28]	; (b794 <slice_expired_locked+0x24>)
    b776:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    b778:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    b77a:	f013 0f1f 	tst.w	r3, #31
    b77e:	d004      	beq.n	b78a <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    b780:	4628      	mov	r0, r5
    b782:	f7ff fd7f 	bl	b284 <z_reset_time_slice>
}
    b786:	4620      	mov	r0, r4
    b788:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    b78a:	4628      	mov	r0, r5
    b78c:	f7ff ff94 	bl	b6b8 <move_thread_to_end_of_prio_q>
    b790:	e7f6      	b.n	b780 <slice_expired_locked+0x10>
    b792:	bf00      	nop
    b794:	2000d4e0 	.word	0x2000d4e0

0000b798 <z_time_slice>:
{
    b798:	b570      	push	{r4, r5, r6, lr}
    b79a:	4604      	mov	r4, r0
	__asm__ volatile(
    b79c:	f04f 0320 	mov.w	r3, #32
    b7a0:	f3ef 8511 	mrs	r5, BASEPRI
    b7a4:	f383 8812 	msr	BASEPRI_MAX, r3
    b7a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b7ac:	4842      	ldr	r0, [pc, #264]	; (b8b8 <z_time_slice+0x120>)
    b7ae:	f7ff f831 	bl	a814 <z_spin_lock_valid>
    b7b2:	b310      	cbz	r0, b7fa <z_time_slice+0x62>
	z_spin_lock_set_owner(l);
    b7b4:	4840      	ldr	r0, [pc, #256]	; (b8b8 <z_time_slice+0x120>)
    b7b6:	f7ff f84d 	bl	a854 <z_spin_lock_set_owner>
	return k;
    b7ba:	462b      	mov	r3, r5
	if (pending_current == _current) {
    b7bc:	4a3f      	ldr	r2, [pc, #252]	; (b8bc <z_time_slice+0x124>)
    b7be:	6892      	ldr	r2, [r2, #8]
    b7c0:	493f      	ldr	r1, [pc, #252]	; (b8c0 <z_time_slice+0x128>)
    b7c2:	6809      	ldr	r1, [r1, #0]
    b7c4:	428a      	cmp	r2, r1
    b7c6:	d028      	beq.n	b81a <z_time_slice+0x82>
	pending_current = NULL;
    b7c8:	493d      	ldr	r1, [pc, #244]	; (b8c0 <z_time_slice+0x128>)
    b7ca:	2000      	movs	r0, #0
    b7cc:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    b7ce:	493d      	ldr	r1, [pc, #244]	; (b8c4 <z_time_slice+0x12c>)
    b7d0:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    b7d2:	2900      	cmp	r1, #0
    b7d4:	d052      	beq.n	b87c <z_time_slice+0xe4>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    b7d6:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    b7d8:	297f      	cmp	r1, #127	; 0x7f
    b7da:	d83a      	bhi.n	b852 <z_time_slice+0xba>
    b7dc:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    b7de:	f011 0f1f 	tst.w	r1, #31
    b7e2:	d140      	bne.n	b866 <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    b7e4:	f992 000e 	ldrsb.w	r0, [r2, #14]
    b7e8:	4937      	ldr	r1, [pc, #220]	; (b8c8 <z_time_slice+0x130>)
    b7ea:	6809      	ldr	r1, [r1, #0]
    b7ec:	4288      	cmp	r0, r1
    b7ee:	db3c      	blt.n	b86a <z_time_slice+0xd2>
		&& !z_is_idle_thread_object(thread);
    b7f0:	4936      	ldr	r1, [pc, #216]	; (b8cc <z_time_slice+0x134>)
    b7f2:	428a      	cmp	r2, r1
    b7f4:	d03b      	beq.n	b86e <z_time_slice+0xd6>
    b7f6:	2201      	movs	r2, #1
    b7f8:	e02c      	b.n	b854 <z_time_slice+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b7fa:	4e35      	ldr	r6, [pc, #212]	; (b8d0 <z_time_slice+0x138>)
    b7fc:	238e      	movs	r3, #142	; 0x8e
    b7fe:	4632      	mov	r2, r6
    b800:	4934      	ldr	r1, [pc, #208]	; (b8d4 <z_time_slice+0x13c>)
    b802:	4835      	ldr	r0, [pc, #212]	; (b8d8 <z_time_slice+0x140>)
    b804:	f003 fd0d 	bl	f222 <assert_print>
    b808:	492b      	ldr	r1, [pc, #172]	; (b8b8 <z_time_slice+0x120>)
    b80a:	4834      	ldr	r0, [pc, #208]	; (b8dc <z_time_slice+0x144>)
    b80c:	f003 fd09 	bl	f222 <assert_print>
    b810:	218e      	movs	r1, #142	; 0x8e
    b812:	4630      	mov	r0, r6
    b814:	f003 fcfe 	bl	f214 <assert_post_action>
    b818:	e7cc      	b.n	b7b4 <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    b81a:	4610      	mov	r0, r2
    b81c:	f7ff fd32 	bl	b284 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b820:	4825      	ldr	r0, [pc, #148]	; (b8b8 <z_time_slice+0x120>)
    b822:	f7ff f807 	bl	a834 <z_spin_unlock_valid>
    b826:	b120      	cbz	r0, b832 <z_time_slice+0x9a>
	__asm__ volatile(
    b828:	f385 8811 	msr	BASEPRI, r5
    b82c:	f3bf 8f6f 	isb	sy
		return;
    b830:	e030      	b.n	b894 <z_time_slice+0xfc>
    b832:	4c27      	ldr	r4, [pc, #156]	; (b8d0 <z_time_slice+0x138>)
    b834:	23b9      	movs	r3, #185	; 0xb9
    b836:	4622      	mov	r2, r4
    b838:	4929      	ldr	r1, [pc, #164]	; (b8e0 <z_time_slice+0x148>)
    b83a:	4827      	ldr	r0, [pc, #156]	; (b8d8 <z_time_slice+0x140>)
    b83c:	f003 fcf1 	bl	f222 <assert_print>
    b840:	491d      	ldr	r1, [pc, #116]	; (b8b8 <z_time_slice+0x120>)
    b842:	4828      	ldr	r0, [pc, #160]	; (b8e4 <z_time_slice+0x14c>)
    b844:	f003 fced 	bl	f222 <assert_print>
    b848:	21b9      	movs	r1, #185	; 0xb9
    b84a:	4620      	mov	r0, r4
    b84c:	f003 fce2 	bl	f214 <assert_post_action>
    b850:	e7ea      	b.n	b828 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    b852:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    b854:	b192      	cbz	r2, b87c <z_time_slice+0xe4>
		if (ticks >= _current_cpu->slice_ticks) {
    b856:	4a19      	ldr	r2, [pc, #100]	; (b8bc <z_time_slice+0x124>)
    b858:	6910      	ldr	r0, [r2, #16]
    b85a:	42a0      	cmp	r0, r4
    b85c:	dd09      	ble.n	b872 <z_time_slice+0xda>
			_current_cpu->slice_ticks -= ticks;
    b85e:	1b00      	subs	r0, r0, r4
    b860:	4a16      	ldr	r2, [pc, #88]	; (b8bc <z_time_slice+0x124>)
    b862:	6110      	str	r0, [r2, #16]
    b864:	e00d      	b.n	b882 <z_time_slice+0xea>
		&& !z_is_idle_thread_object(thread);
    b866:	2200      	movs	r2, #0
    b868:	e7f4      	b.n	b854 <z_time_slice+0xbc>
    b86a:	2200      	movs	r2, #0
    b86c:	e7f2      	b.n	b854 <z_time_slice+0xbc>
    b86e:	2200      	movs	r2, #0
    b870:	e7f0      	b.n	b854 <z_time_slice+0xbc>
			key = slice_expired_locked(key);
    b872:	4628      	mov	r0, r5
    b874:	f7ff ff7c 	bl	b770 <slice_expired_locked>
    b878:	4603      	mov	r3, r0
    b87a:	e002      	b.n	b882 <z_time_slice+0xea>
		_current_cpu->slice_ticks = 0;
    b87c:	4a0f      	ldr	r2, [pc, #60]	; (b8bc <z_time_slice+0x124>)
    b87e:	2100      	movs	r1, #0
    b880:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    b882:	461c      	mov	r4, r3
    b884:	480c      	ldr	r0, [pc, #48]	; (b8b8 <z_time_slice+0x120>)
    b886:	f7fe ffd5 	bl	a834 <z_spin_unlock_valid>
    b88a:	b120      	cbz	r0, b896 <z_time_slice+0xfe>
    b88c:	f384 8811 	msr	BASEPRI, r4
    b890:	f3bf 8f6f 	isb	sy
}
    b894:	bd70      	pop	{r4, r5, r6, pc}
    b896:	4d0e      	ldr	r5, [pc, #56]	; (b8d0 <z_time_slice+0x138>)
    b898:	23b9      	movs	r3, #185	; 0xb9
    b89a:	462a      	mov	r2, r5
    b89c:	4910      	ldr	r1, [pc, #64]	; (b8e0 <z_time_slice+0x148>)
    b89e:	480e      	ldr	r0, [pc, #56]	; (b8d8 <z_time_slice+0x140>)
    b8a0:	f003 fcbf 	bl	f222 <assert_print>
    b8a4:	4904      	ldr	r1, [pc, #16]	; (b8b8 <z_time_slice+0x120>)
    b8a6:	480f      	ldr	r0, [pc, #60]	; (b8e4 <z_time_slice+0x14c>)
    b8a8:	f003 fcbb 	bl	f222 <assert_print>
    b8ac:	21b9      	movs	r1, #185	; 0xb9
    b8ae:	4628      	mov	r0, r5
    b8b0:	f003 fcb0 	bl	f214 <assert_post_action>
    b8b4:	e7ea      	b.n	b88c <z_time_slice+0xf4>
    b8b6:	bf00      	nop
    b8b8:	2000d51c 	.word	0x2000d51c
    b8bc:	2000d4e0 	.word	0x2000d4e0
    b8c0:	2000d518 	.word	0x2000d518
    b8c4:	2000d524 	.word	0x2000d524
    b8c8:	2000d520 	.word	0x2000d520
    b8cc:	200047c8 	.word	0x200047c8
    b8d0:	00011854 	.word	0x00011854
    b8d4:	000118b4 	.word	0x000118b4
    b8d8:	000116a8 	.word	0x000116a8
    b8dc:	000118cc 	.word	0x000118cc
    b8e0:	00011884 	.word	0x00011884
    b8e4:	0001189c 	.word	0x0001189c

0000b8e8 <ready_thread>:
{
    b8e8:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    b8ea:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    b8ec:	f990 200d 	ldrsb.w	r2, [r0, #13]
    b8f0:	2a00      	cmp	r2, #0
    b8f2:	db30      	blt.n	b956 <ready_thread+0x6e>
    b8f4:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b8f6:	f013 0f1f 	tst.w	r3, #31
    b8fa:	d105      	bne.n	b908 <ready_thread+0x20>
	return node->next != NULL;
    b8fc:	6982      	ldr	r2, [r0, #24]
    b8fe:	b10a      	cbz	r2, b904 <ready_thread+0x1c>
    b900:	2200      	movs	r2, #0
    b902:	e002      	b.n	b90a <ready_thread+0x22>
    b904:	2201      	movs	r2, #1
    b906:	e000      	b.n	b90a <ready_thread+0x22>
    b908:	2200      	movs	r2, #0
    b90a:	b322      	cbz	r2, b956 <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    b90c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b910:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b912:	4b1b      	ldr	r3, [pc, #108]	; (b980 <ready_thread+0x98>)
    b914:	429c      	cmp	r4, r3
    b916:	d01f      	beq.n	b958 <ready_thread+0x70>
	return list->head == list;
    b918:	4b1a      	ldr	r3, [pc, #104]	; (b984 <ready_thread+0x9c>)
    b91a:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b91e:	429d      	cmp	r5, r3
    b920:	d02c      	beq.n	b97c <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b922:	b16d      	cbz	r5, b940 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b924:	4629      	mov	r1, r5
    b926:	4620      	mov	r0, r4
    b928:	f004 fe65 	bl	105f6 <z_sched_prio_cmp>
    b92c:	2800      	cmp	r0, #0
    b92e:	dc1f      	bgt.n	b970 <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b930:	b135      	cbz	r5, b940 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    b932:	4b14      	ldr	r3, [pc, #80]	; (b984 <ready_thread+0x9c>)
    b934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b936:	429d      	cmp	r5, r3
    b938:	d002      	beq.n	b940 <ready_thread+0x58>
    b93a:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b93c:	2d00      	cmp	r5, #0
    b93e:	d1f0      	bne.n	b922 <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    b940:	4b10      	ldr	r3, [pc, #64]	; (b984 <ready_thread+0x9c>)
    b942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    b944:	f103 0120 	add.w	r1, r3, #32
    b948:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    b94a:	6062      	str	r2, [r4, #4]
	tail->next = node;
    b94c:	6014      	str	r4, [r2, #0]
	list->tail = node;
    b94e:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    b950:	2000      	movs	r0, #0
    b952:	f7ff fe6f 	bl	b634 <update_cache>
}
    b956:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b958:	4d0b      	ldr	r5, [pc, #44]	; (b988 <ready_thread+0xa0>)
    b95a:	23ba      	movs	r3, #186	; 0xba
    b95c:	462a      	mov	r2, r5
    b95e:	490b      	ldr	r1, [pc, #44]	; (b98c <ready_thread+0xa4>)
    b960:	480b      	ldr	r0, [pc, #44]	; (b990 <ready_thread+0xa8>)
    b962:	f003 fc5e 	bl	f222 <assert_print>
    b966:	21ba      	movs	r1, #186	; 0xba
    b968:	4628      	mov	r0, r5
    b96a:	f003 fc53 	bl	f214 <assert_post_action>
    b96e:	e7d3      	b.n	b918 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    b970:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    b972:	6063      	str	r3, [r4, #4]
	node->next = successor;
    b974:	6025      	str	r5, [r4, #0]
	prev->next = node;
    b976:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b978:	606c      	str	r4, [r5, #4]
}
    b97a:	e7e9      	b.n	b950 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b97c:	2500      	movs	r5, #0
    b97e:	e7d0      	b.n	b922 <ready_thread+0x3a>
    b980:	200047c8 	.word	0x200047c8
    b984:	2000d4e0 	.word	0x2000d4e0
    b988:	000131ac 	.word	0x000131ac
    b98c:	000131e8 	.word	0x000131e8
    b990:	000116a8 	.word	0x000116a8

0000b994 <z_ready_thread>:
{
    b994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b996:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    b998:	2400      	movs	r4, #0
	__asm__ volatile(
    b99a:	f04f 0320 	mov.w	r3, #32
    b99e:	f3ef 8611 	mrs	r6, BASEPRI
    b9a2:	f383 8812 	msr	BASEPRI_MAX, r3
    b9a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b9aa:	481e      	ldr	r0, [pc, #120]	; (ba24 <z_ready_thread+0x90>)
    b9ac:	f7fe ff32 	bl	a814 <z_spin_lock_valid>
    b9b0:	b118      	cbz	r0, b9ba <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    b9b2:	481c      	ldr	r0, [pc, #112]	; (ba24 <z_ready_thread+0x90>)
    b9b4:	f7fe ff4e 	bl	a854 <z_spin_lock_set_owner>
	return k;
    b9b8:	e018      	b.n	b9ec <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b9ba:	4f1b      	ldr	r7, [pc, #108]	; (ba28 <z_ready_thread+0x94>)
    b9bc:	238e      	movs	r3, #142	; 0x8e
    b9be:	463a      	mov	r2, r7
    b9c0:	491a      	ldr	r1, [pc, #104]	; (ba2c <z_ready_thread+0x98>)
    b9c2:	481b      	ldr	r0, [pc, #108]	; (ba30 <z_ready_thread+0x9c>)
    b9c4:	f003 fc2d 	bl	f222 <assert_print>
    b9c8:	4916      	ldr	r1, [pc, #88]	; (ba24 <z_ready_thread+0x90>)
    b9ca:	481a      	ldr	r0, [pc, #104]	; (ba34 <z_ready_thread+0xa0>)
    b9cc:	f003 fc29 	bl	f222 <assert_print>
    b9d0:	218e      	movs	r1, #142	; 0x8e
    b9d2:	4638      	mov	r0, r7
    b9d4:	f003 fc1e 	bl	f214 <assert_post_action>
    b9d8:	e7eb      	b.n	b9b2 <z_ready_thread+0x1e>
			ready_thread(thread);
    b9da:	4628      	mov	r0, r5
    b9dc:	f7ff ff84 	bl	b8e8 <ready_thread>
    b9e0:	e00a      	b.n	b9f8 <z_ready_thread+0x64>
	__asm__ volatile(
    b9e2:	f386 8811 	msr	BASEPRI, r6
    b9e6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b9ea:	2401      	movs	r4, #1
    b9ec:	b9cc      	cbnz	r4, ba22 <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    b9ee:	4628      	mov	r0, r5
    b9f0:	f004 fdff 	bl	105f2 <thread_active_elsewhere>
    b9f4:	2800      	cmp	r0, #0
    b9f6:	d0f0      	beq.n	b9da <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b9f8:	480a      	ldr	r0, [pc, #40]	; (ba24 <z_ready_thread+0x90>)
    b9fa:	f7fe ff1b 	bl	a834 <z_spin_unlock_valid>
    b9fe:	2800      	cmp	r0, #0
    ba00:	d1ef      	bne.n	b9e2 <z_ready_thread+0x4e>
    ba02:	4c09      	ldr	r4, [pc, #36]	; (ba28 <z_ready_thread+0x94>)
    ba04:	23b9      	movs	r3, #185	; 0xb9
    ba06:	4622      	mov	r2, r4
    ba08:	490b      	ldr	r1, [pc, #44]	; (ba38 <z_ready_thread+0xa4>)
    ba0a:	4809      	ldr	r0, [pc, #36]	; (ba30 <z_ready_thread+0x9c>)
    ba0c:	f003 fc09 	bl	f222 <assert_print>
    ba10:	4904      	ldr	r1, [pc, #16]	; (ba24 <z_ready_thread+0x90>)
    ba12:	480a      	ldr	r0, [pc, #40]	; (ba3c <z_ready_thread+0xa8>)
    ba14:	f003 fc05 	bl	f222 <assert_print>
    ba18:	21b9      	movs	r1, #185	; 0xb9
    ba1a:	4620      	mov	r0, r4
    ba1c:	f003 fbfa 	bl	f214 <assert_post_action>
    ba20:	e7df      	b.n	b9e2 <z_ready_thread+0x4e>
}
    ba22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba24:	2000d51c 	.word	0x2000d51c
    ba28:	00011854 	.word	0x00011854
    ba2c:	000118b4 	.word	0x000118b4
    ba30:	000116a8 	.word	0x000116a8
    ba34:	000118cc 	.word	0x000118cc
    ba38:	00011884 	.word	0x00011884
    ba3c:	0001189c 	.word	0x0001189c

0000ba40 <z_sched_start>:
{
    ba40:	b570      	push	{r4, r5, r6, lr}
    ba42:	4604      	mov	r4, r0
	__asm__ volatile(
    ba44:	f04f 0320 	mov.w	r3, #32
    ba48:	f3ef 8511 	mrs	r5, BASEPRI
    ba4c:	f383 8812 	msr	BASEPRI_MAX, r3
    ba50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ba54:	481f      	ldr	r0, [pc, #124]	; (bad4 <z_sched_start+0x94>)
    ba56:	f7fe fedd 	bl	a814 <z_spin_lock_valid>
    ba5a:	b188      	cbz	r0, ba80 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    ba5c:	481d      	ldr	r0, [pc, #116]	; (bad4 <z_sched_start+0x94>)
    ba5e:	f7fe fef9 	bl	a854 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    ba62:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    ba64:	f013 0f04 	tst.w	r3, #4
    ba68:	d01a      	beq.n	baa0 <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ba6a:	f023 0304 	bic.w	r3, r3, #4
    ba6e:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    ba70:	4620      	mov	r0, r4
    ba72:	f7ff ff39 	bl	b8e8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    ba76:	4629      	mov	r1, r5
    ba78:	4816      	ldr	r0, [pc, #88]	; (bad4 <z_sched_start+0x94>)
    ba7a:	f7ff fce7 	bl	b44c <z_reschedule>
}
    ba7e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ba80:	4e15      	ldr	r6, [pc, #84]	; (bad8 <z_sched_start+0x98>)
    ba82:	238e      	movs	r3, #142	; 0x8e
    ba84:	4632      	mov	r2, r6
    ba86:	4915      	ldr	r1, [pc, #84]	; (badc <z_sched_start+0x9c>)
    ba88:	4815      	ldr	r0, [pc, #84]	; (bae0 <z_sched_start+0xa0>)
    ba8a:	f003 fbca 	bl	f222 <assert_print>
    ba8e:	4911      	ldr	r1, [pc, #68]	; (bad4 <z_sched_start+0x94>)
    ba90:	4814      	ldr	r0, [pc, #80]	; (bae4 <z_sched_start+0xa4>)
    ba92:	f003 fbc6 	bl	f222 <assert_print>
    ba96:	218e      	movs	r1, #142	; 0x8e
    ba98:	4630      	mov	r0, r6
    ba9a:	f003 fbbb 	bl	f214 <assert_post_action>
    ba9e:	e7dd      	b.n	ba5c <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    baa0:	480c      	ldr	r0, [pc, #48]	; (bad4 <z_sched_start+0x94>)
    baa2:	f7fe fec7 	bl	a834 <z_spin_unlock_valid>
    baa6:	b120      	cbz	r0, bab2 <z_sched_start+0x72>
	__asm__ volatile(
    baa8:	f385 8811 	msr	BASEPRI, r5
    baac:	f3bf 8f6f 	isb	sy
		return;
    bab0:	e7e5      	b.n	ba7e <z_sched_start+0x3e>
    bab2:	4c09      	ldr	r4, [pc, #36]	; (bad8 <z_sched_start+0x98>)
    bab4:	23b9      	movs	r3, #185	; 0xb9
    bab6:	4622      	mov	r2, r4
    bab8:	490b      	ldr	r1, [pc, #44]	; (bae8 <z_sched_start+0xa8>)
    baba:	4809      	ldr	r0, [pc, #36]	; (bae0 <z_sched_start+0xa0>)
    babc:	f003 fbb1 	bl	f222 <assert_print>
    bac0:	4904      	ldr	r1, [pc, #16]	; (bad4 <z_sched_start+0x94>)
    bac2:	480a      	ldr	r0, [pc, #40]	; (baec <z_sched_start+0xac>)
    bac4:	f003 fbad 	bl	f222 <assert_print>
    bac8:	21b9      	movs	r1, #185	; 0xb9
    baca:	4620      	mov	r0, r4
    bacc:	f003 fba2 	bl	f214 <assert_post_action>
    bad0:	e7ea      	b.n	baa8 <z_sched_start+0x68>
    bad2:	bf00      	nop
    bad4:	2000d51c 	.word	0x2000d51c
    bad8:	00011854 	.word	0x00011854
    badc:	000118b4 	.word	0x000118b4
    bae0:	000116a8 	.word	0x000116a8
    bae4:	000118cc 	.word	0x000118cc
    bae8:	00011884 	.word	0x00011884
    baec:	0001189c 	.word	0x0001189c

0000baf0 <z_thread_timeout>:
{
    baf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    baf4:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    baf6:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    bafa:	2500      	movs	r5, #0
	__asm__ volatile(
    bafc:	f04f 0320 	mov.w	r3, #32
    bb00:	f3ef 8711 	mrs	r7, BASEPRI
    bb04:	f383 8812 	msr	BASEPRI_MAX, r3
    bb08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bb0c:	482b      	ldr	r0, [pc, #172]	; (bbbc <z_thread_timeout+0xcc>)
    bb0e:	f7fe fe81 	bl	a814 <z_spin_lock_valid>
    bb12:	b118      	cbz	r0, bb1c <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    bb14:	4829      	ldr	r0, [pc, #164]	; (bbbc <z_thread_timeout+0xcc>)
    bb16:	f7fe fe9d 	bl	a854 <z_spin_lock_set_owner>
	return k;
    bb1a:	e026      	b.n	bb6a <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bb1c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; bbc0 <z_thread_timeout+0xd0>
    bb20:	238e      	movs	r3, #142	; 0x8e
    bb22:	4642      	mov	r2, r8
    bb24:	4927      	ldr	r1, [pc, #156]	; (bbc4 <z_thread_timeout+0xd4>)
    bb26:	4828      	ldr	r0, [pc, #160]	; (bbc8 <z_thread_timeout+0xd8>)
    bb28:	f003 fb7b 	bl	f222 <assert_print>
    bb2c:	4923      	ldr	r1, [pc, #140]	; (bbbc <z_thread_timeout+0xcc>)
    bb2e:	4827      	ldr	r0, [pc, #156]	; (bbcc <z_thread_timeout+0xdc>)
    bb30:	f003 fb77 	bl	f222 <assert_print>
    bb34:	218e      	movs	r1, #142	; 0x8e
    bb36:	4640      	mov	r0, r8
    bb38:	f003 fb6c 	bl	f214 <assert_post_action>
    bb3c:	e7ea      	b.n	bb14 <z_thread_timeout+0x24>
    bb3e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    bb42:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    bb46:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    bb4a:	f023 0310 	bic.w	r3, r3, #16
    bb4e:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    bb52:	4630      	mov	r0, r6
    bb54:	f7ff fec8 	bl	b8e8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bb58:	4818      	ldr	r0, [pc, #96]	; (bbbc <z_thread_timeout+0xcc>)
    bb5a:	f7fe fe6b 	bl	a834 <z_spin_unlock_valid>
    bb5e:	b1d8      	cbz	r0, bb98 <z_thread_timeout+0xa8>
	__asm__ volatile(
    bb60:	f387 8811 	msr	BASEPRI, r7
    bb64:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bb68:	2501      	movs	r5, #1
    bb6a:	bb2d      	cbnz	r5, bbb8 <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    bb6c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    bb70:	f013 0f28 	tst.w	r3, #40	; 0x28
    bb74:	d1f0      	bne.n	bb58 <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    bb76:	f854 3c10 	ldr.w	r3, [r4, #-16]
    bb7a:	2b00      	cmp	r3, #0
    bb7c:	d0df      	beq.n	bb3e <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    bb7e:	4630      	mov	r0, r6
    bb80:	f7ff fb56 	bl	b230 <pended_on_thread>
    bb84:	4631      	mov	r1, r6
    bb86:	f7ff fd31 	bl	b5ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    bb8a:	7b73      	ldrb	r3, [r6, #13]
    bb8c:	f023 0302 	bic.w	r3, r3, #2
    bb90:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    bb92:	2300      	movs	r3, #0
    bb94:	60b3      	str	r3, [r6, #8]
}
    bb96:	e7d2      	b.n	bb3e <z_thread_timeout+0x4e>
    bb98:	4d09      	ldr	r5, [pc, #36]	; (bbc0 <z_thread_timeout+0xd0>)
    bb9a:	23b9      	movs	r3, #185	; 0xb9
    bb9c:	462a      	mov	r2, r5
    bb9e:	490c      	ldr	r1, [pc, #48]	; (bbd0 <z_thread_timeout+0xe0>)
    bba0:	4809      	ldr	r0, [pc, #36]	; (bbc8 <z_thread_timeout+0xd8>)
    bba2:	f003 fb3e 	bl	f222 <assert_print>
    bba6:	4905      	ldr	r1, [pc, #20]	; (bbbc <z_thread_timeout+0xcc>)
    bba8:	480a      	ldr	r0, [pc, #40]	; (bbd4 <z_thread_timeout+0xe4>)
    bbaa:	f003 fb3a 	bl	f222 <assert_print>
    bbae:	21b9      	movs	r1, #185	; 0xb9
    bbb0:	4628      	mov	r0, r5
    bbb2:	f003 fb2f 	bl	f214 <assert_post_action>
    bbb6:	e7d3      	b.n	bb60 <z_thread_timeout+0x70>
}
    bbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bbbc:	2000d51c 	.word	0x2000d51c
    bbc0:	00011854 	.word	0x00011854
    bbc4:	000118b4 	.word	0x000118b4
    bbc8:	000116a8 	.word	0x000116a8
    bbcc:	000118cc 	.word	0x000118cc
    bbd0:	00011884 	.word	0x00011884
    bbd4:	0001189c 	.word	0x0001189c

0000bbd8 <unready_thread>:
{
    bbd8:	b510      	push	{r4, lr}
    bbda:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    bbdc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    bbde:	f990 300d 	ldrsb.w	r3, [r0, #13]
    bbe2:	2b00      	cmp	r3, #0
    bbe4:	db08      	blt.n	bbf8 <unready_thread+0x20>
	update_cache(thread == _current);
    bbe6:	4b08      	ldr	r3, [pc, #32]	; (bc08 <unready_thread+0x30>)
    bbe8:	6898      	ldr	r0, [r3, #8]
    bbea:	42a0      	cmp	r0, r4
    bbec:	bf14      	ite	ne
    bbee:	2000      	movne	r0, #0
    bbf0:	2001      	moveq	r0, #1
    bbf2:	f7ff fd1f 	bl	b634 <update_cache>
}
    bbf6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bbf8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    bbfc:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    bbfe:	4601      	mov	r1, r0
    bc00:	4802      	ldr	r0, [pc, #8]	; (bc0c <unready_thread+0x34>)
    bc02:	f7ff fcf3 	bl	b5ec <z_priq_dumb_remove>
}
    bc06:	e7ee      	b.n	bbe6 <unready_thread+0xe>
    bc08:	2000d4e0 	.word	0x2000d4e0
    bc0c:	2000d500 	.word	0x2000d500

0000bc10 <add_to_waitq_locked>:
{
    bc10:	b570      	push	{r4, r5, r6, lr}
    bc12:	4605      	mov	r5, r0
    bc14:	460e      	mov	r6, r1
	unready_thread(thread);
    bc16:	f7ff ffdf 	bl	bbd8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    bc1a:	7b6b      	ldrb	r3, [r5, #13]
    bc1c:	f043 0302 	orr.w	r3, r3, #2
    bc20:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    bc22:	b1ce      	cbz	r6, bc58 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    bc24:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    bc26:	4b17      	ldr	r3, [pc, #92]	; (bc84 <add_to_waitq_locked+0x74>)
    bc28:	429d      	cmp	r5, r3
    bc2a:	d016      	beq.n	bc5a <add_to_waitq_locked+0x4a>
	return list->head == list;
    bc2c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bc2e:	42a6      	cmp	r6, r4
    bc30:	d025      	beq.n	bc7e <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bc32:	b164      	cbz	r4, bc4e <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bc34:	4621      	mov	r1, r4
    bc36:	4628      	mov	r0, r5
    bc38:	f004 fcdd 	bl	105f6 <z_sched_prio_cmp>
    bc3c:	2800      	cmp	r0, #0
    bc3e:	dc18      	bgt.n	bc72 <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    bc40:	b12c      	cbz	r4, bc4e <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    bc42:	6873      	ldr	r3, [r6, #4]
    bc44:	429c      	cmp	r4, r3
    bc46:	d002      	beq.n	bc4e <add_to_waitq_locked+0x3e>
    bc48:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bc4a:	2c00      	cmp	r4, #0
    bc4c:	d1f1      	bne.n	bc32 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    bc4e:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    bc50:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    bc52:	606b      	str	r3, [r5, #4]
	tail->next = node;
    bc54:	601d      	str	r5, [r3, #0]
	list->tail = node;
    bc56:	6075      	str	r5, [r6, #4]
}
    bc58:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    bc5a:	4c0b      	ldr	r4, [pc, #44]	; (bc88 <add_to_waitq_locked+0x78>)
    bc5c:	23ba      	movs	r3, #186	; 0xba
    bc5e:	4622      	mov	r2, r4
    bc60:	490a      	ldr	r1, [pc, #40]	; (bc8c <add_to_waitq_locked+0x7c>)
    bc62:	480b      	ldr	r0, [pc, #44]	; (bc90 <add_to_waitq_locked+0x80>)
    bc64:	f003 fadd 	bl	f222 <assert_print>
    bc68:	21ba      	movs	r1, #186	; 0xba
    bc6a:	4620      	mov	r0, r4
    bc6c:	f003 fad2 	bl	f214 <assert_post_action>
    bc70:	e7dc      	b.n	bc2c <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    bc72:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    bc74:	606b      	str	r3, [r5, #4]
	node->next = successor;
    bc76:	602c      	str	r4, [r5, #0]
	prev->next = node;
    bc78:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    bc7a:	6065      	str	r5, [r4, #4]
}
    bc7c:	e7ec      	b.n	bc58 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bc7e:	2400      	movs	r4, #0
    bc80:	e7d7      	b.n	bc32 <add_to_waitq_locked+0x22>
    bc82:	bf00      	nop
    bc84:	200047c8 	.word	0x200047c8
    bc88:	000131ac 	.word	0x000131ac
    bc8c:	000131e8 	.word	0x000131e8
    bc90:	000116a8 	.word	0x000116a8

0000bc94 <pend>:
{
    bc94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc98:	4605      	mov	r5, r0
    bc9a:	460e      	mov	r6, r1
    bc9c:	4691      	mov	r9, r2
    bc9e:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    bca0:	2400      	movs	r4, #0
	__asm__ volatile(
    bca2:	f04f 0320 	mov.w	r3, #32
    bca6:	f3ef 8711 	mrs	r7, BASEPRI
    bcaa:	f383 8812 	msr	BASEPRI_MAX, r3
    bcae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bcb2:	481f      	ldr	r0, [pc, #124]	; (bd30 <pend+0x9c>)
    bcb4:	f7fe fdae 	bl	a814 <z_spin_lock_valid>
    bcb8:	b118      	cbz	r0, bcc2 <pend+0x2e>
	z_spin_lock_set_owner(l);
    bcba:	481d      	ldr	r0, [pc, #116]	; (bd30 <pend+0x9c>)
    bcbc:	f7fe fdca 	bl	a854 <z_spin_lock_set_owner>
	return k;
    bcc0:	e015      	b.n	bcee <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bcc2:	f8df a070 	ldr.w	sl, [pc, #112]	; bd34 <pend+0xa0>
    bcc6:	238e      	movs	r3, #142	; 0x8e
    bcc8:	4652      	mov	r2, sl
    bcca:	491b      	ldr	r1, [pc, #108]	; (bd38 <pend+0xa4>)
    bccc:	481b      	ldr	r0, [pc, #108]	; (bd3c <pend+0xa8>)
    bcce:	f003 faa8 	bl	f222 <assert_print>
    bcd2:	4917      	ldr	r1, [pc, #92]	; (bd30 <pend+0x9c>)
    bcd4:	481a      	ldr	r0, [pc, #104]	; (bd40 <pend+0xac>)
    bcd6:	f003 faa4 	bl	f222 <assert_print>
    bcda:	218e      	movs	r1, #142	; 0x8e
    bcdc:	4650      	mov	r0, sl
    bcde:	f003 fa99 	bl	f214 <assert_post_action>
    bce2:	e7ea      	b.n	bcba <pend+0x26>
	__asm__ volatile(
    bce4:	f387 8811 	msr	BASEPRI, r7
    bce8:	f3bf 8f6f 	isb	sy
    bcec:	2401      	movs	r4, #1
    bcee:	b9c4      	cbnz	r4, bd22 <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    bcf0:	4631      	mov	r1, r6
    bcf2:	4628      	mov	r0, r5
    bcf4:	f7ff ff8c 	bl	bc10 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bcf8:	480d      	ldr	r0, [pc, #52]	; (bd30 <pend+0x9c>)
    bcfa:	f7fe fd9b 	bl	a834 <z_spin_unlock_valid>
    bcfe:	2800      	cmp	r0, #0
    bd00:	d1f0      	bne.n	bce4 <pend+0x50>
    bd02:	4c0c      	ldr	r4, [pc, #48]	; (bd34 <pend+0xa0>)
    bd04:	23b9      	movs	r3, #185	; 0xb9
    bd06:	4622      	mov	r2, r4
    bd08:	490e      	ldr	r1, [pc, #56]	; (bd44 <pend+0xb0>)
    bd0a:	480c      	ldr	r0, [pc, #48]	; (bd3c <pend+0xa8>)
    bd0c:	f003 fa89 	bl	f222 <assert_print>
    bd10:	4907      	ldr	r1, [pc, #28]	; (bd30 <pend+0x9c>)
    bd12:	480d      	ldr	r0, [pc, #52]	; (bd48 <pend+0xb4>)
    bd14:	f003 fa85 	bl	f222 <assert_print>
    bd18:	21b9      	movs	r1, #185	; 0xb9
    bd1a:	4620      	mov	r0, r4
    bd1c:	f003 fa7a 	bl	f214 <assert_post_action>
    bd20:	e7e0      	b.n	bce4 <pend+0x50>
	add_thread_timeout(thread, timeout);
    bd22:	464a      	mov	r2, r9
    bd24:	4643      	mov	r3, r8
    bd26:	4628      	mov	r0, r5
    bd28:	f7ff fa9c 	bl	b264 <add_thread_timeout>
}
    bd2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bd30:	2000d51c 	.word	0x2000d51c
    bd34:	00011854 	.word	0x00011854
    bd38:	000118b4 	.word	0x000118b4
    bd3c:	000116a8 	.word	0x000116a8
    bd40:	000118cc 	.word	0x000118cc
    bd44:	00011884 	.word	0x00011884
    bd48:	0001189c 	.word	0x0001189c

0000bd4c <z_pend_curr>:
{
    bd4c:	b570      	push	{r4, r5, r6, lr}
    bd4e:	4604      	mov	r4, r0
    bd50:	460d      	mov	r5, r1
    bd52:	4611      	mov	r1, r2
	pending_current = _current;
    bd54:	4b0f      	ldr	r3, [pc, #60]	; (bd94 <z_pend_curr+0x48>)
    bd56:	6898      	ldr	r0, [r3, #8]
    bd58:	4b0f      	ldr	r3, [pc, #60]	; (bd98 <z_pend_curr+0x4c>)
    bd5a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    bd5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    bd60:	f7ff ff98 	bl	bc94 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bd64:	4620      	mov	r0, r4
    bd66:	f7fe fd65 	bl	a834 <z_spin_unlock_valid>
    bd6a:	b118      	cbz	r0, bd74 <z_pend_curr+0x28>
    bd6c:	4628      	mov	r0, r5
    bd6e:	f7fa f8bd 	bl	5eec <arch_swap>
}
    bd72:	bd70      	pop	{r4, r5, r6, pc}
    bd74:	4e09      	ldr	r6, [pc, #36]	; (bd9c <z_pend_curr+0x50>)
    bd76:	23d0      	movs	r3, #208	; 0xd0
    bd78:	4632      	mov	r2, r6
    bd7a:	4909      	ldr	r1, [pc, #36]	; (bda0 <z_pend_curr+0x54>)
    bd7c:	4809      	ldr	r0, [pc, #36]	; (bda4 <z_pend_curr+0x58>)
    bd7e:	f003 fa50 	bl	f222 <assert_print>
    bd82:	4621      	mov	r1, r4
    bd84:	4808      	ldr	r0, [pc, #32]	; (bda8 <z_pend_curr+0x5c>)
    bd86:	f003 fa4c 	bl	f222 <assert_print>
    bd8a:	21d0      	movs	r1, #208	; 0xd0
    bd8c:	4630      	mov	r0, r6
    bd8e:	f003 fa41 	bl	f214 <assert_post_action>
    bd92:	e7eb      	b.n	bd6c <z_pend_curr+0x20>
    bd94:	2000d4e0 	.word	0x2000d4e0
    bd98:	2000d518 	.word	0x2000d518
    bd9c:	00011854 	.word	0x00011854
    bda0:	00011884 	.word	0x00011884
    bda4:	000116a8 	.word	0x000116a8
    bda8:	0001189c 	.word	0x0001189c

0000bdac <z_set_prio>:
{
    bdac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bdb0:	4604      	mov	r4, r0
    bdb2:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    bdb4:	2500      	movs	r5, #0
	__asm__ volatile(
    bdb6:	f04f 0320 	mov.w	r3, #32
    bdba:	f3ef 8811 	mrs	r8, BASEPRI
    bdbe:	f383 8812 	msr	BASEPRI_MAX, r3
    bdc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bdc6:	4844      	ldr	r0, [pc, #272]	; (bed8 <z_set_prio+0x12c>)
    bdc8:	f7fe fd24 	bl	a814 <z_spin_lock_valid>
    bdcc:	b120      	cbz	r0, bdd8 <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    bdce:	4842      	ldr	r0, [pc, #264]	; (bed8 <z_set_prio+0x12c>)
    bdd0:	f7fe fd40 	bl	a854 <z_spin_lock_set_owner>
	bool need_sched = 0;
    bdd4:	2700      	movs	r7, #0
	return k;
    bdd6:	e01d      	b.n	be14 <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bdd8:	4f40      	ldr	r7, [pc, #256]	; (bedc <z_set_prio+0x130>)
    bdda:	238e      	movs	r3, #142	; 0x8e
    bddc:	463a      	mov	r2, r7
    bdde:	4940      	ldr	r1, [pc, #256]	; (bee0 <z_set_prio+0x134>)
    bde0:	4840      	ldr	r0, [pc, #256]	; (bee4 <z_set_prio+0x138>)
    bde2:	f003 fa1e 	bl	f222 <assert_print>
    bde6:	493c      	ldr	r1, [pc, #240]	; (bed8 <z_set_prio+0x12c>)
    bde8:	483f      	ldr	r0, [pc, #252]	; (bee8 <z_set_prio+0x13c>)
    bdea:	f003 fa1a 	bl	f222 <assert_print>
    bdee:	218e      	movs	r1, #142	; 0x8e
    bdf0:	4638      	mov	r0, r7
    bdf2:	f003 fa0f 	bl	f214 <assert_post_action>
    bdf6:	e7ea      	b.n	bdce <z_set_prio+0x22>
		if (need_sched) {
    bdf8:	f013 0701 	ands.w	r7, r3, #1
    bdfc:	d116      	bne.n	be2c <z_set_prio+0x80>
			thread->base.prio = prio;
    bdfe:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    be00:	4835      	ldr	r0, [pc, #212]	; (bed8 <z_set_prio+0x12c>)
    be02:	f7fe fd17 	bl	a834 <z_spin_unlock_valid>
    be06:	2800      	cmp	r0, #0
    be08:	d053      	beq.n	beb2 <z_set_prio+0x106>
	__asm__ volatile(
    be0a:	f388 8811 	msr	BASEPRI, r8
    be0e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    be12:	2501      	movs	r5, #1
    be14:	462b      	mov	r3, r5
    be16:	2d00      	cmp	r5, #0
    be18:	d15b      	bne.n	bed2 <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    be1a:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    be1c:	f012 0f1f 	tst.w	r2, #31
    be20:	d1ea      	bne.n	bdf8 <z_set_prio+0x4c>
	return node->next != NULL;
    be22:	69a1      	ldr	r1, [r4, #24]
    be24:	2900      	cmp	r1, #0
    be26:	d1e7      	bne.n	bdf8 <z_set_prio+0x4c>
    be28:	2301      	movs	r3, #1
    be2a:	e7e5      	b.n	bdf8 <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    be2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    be30:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    be32:	4621      	mov	r1, r4
    be34:	482d      	ldr	r0, [pc, #180]	; (beec <z_set_prio+0x140>)
    be36:	f7ff fbd9 	bl	b5ec <z_priq_dumb_remove>
				thread->base.prio = prio;
    be3a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    be3c:	7b63      	ldrb	r3, [r4, #13]
    be3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    be42:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    be44:	4b2a      	ldr	r3, [pc, #168]	; (bef0 <z_set_prio+0x144>)
    be46:	429c      	cmp	r4, r3
    be48:	d01f      	beq.n	be8a <z_set_prio+0xde>
	return list->head == list;
    be4a:	4b2a      	ldr	r3, [pc, #168]	; (bef4 <z_set_prio+0x148>)
    be4c:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    be50:	429d      	cmp	r5, r3
    be52:	d02c      	beq.n	beae <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    be54:	b16d      	cbz	r5, be72 <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    be56:	4629      	mov	r1, r5
    be58:	4620      	mov	r0, r4
    be5a:	f004 fbcc 	bl	105f6 <z_sched_prio_cmp>
    be5e:	2800      	cmp	r0, #0
    be60:	dc1f      	bgt.n	bea2 <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    be62:	b135      	cbz	r5, be72 <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    be64:	4b23      	ldr	r3, [pc, #140]	; (bef4 <z_set_prio+0x148>)
    be66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    be68:	429d      	cmp	r5, r3
    be6a:	d002      	beq.n	be72 <z_set_prio+0xc6>
    be6c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    be6e:	2d00      	cmp	r5, #0
    be70:	d1f0      	bne.n	be54 <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    be72:	4b20      	ldr	r3, [pc, #128]	; (bef4 <z_set_prio+0x148>)
    be74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    be76:	f103 0120 	add.w	r1, r3, #32
    be7a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    be7c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    be7e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    be80:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    be82:	2001      	movs	r0, #1
    be84:	f7ff fbd6 	bl	b634 <update_cache>
    be88:	e7ba      	b.n	be00 <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    be8a:	4d1b      	ldr	r5, [pc, #108]	; (bef8 <z_set_prio+0x14c>)
    be8c:	23ba      	movs	r3, #186	; 0xba
    be8e:	462a      	mov	r2, r5
    be90:	491a      	ldr	r1, [pc, #104]	; (befc <z_set_prio+0x150>)
    be92:	4814      	ldr	r0, [pc, #80]	; (bee4 <z_set_prio+0x138>)
    be94:	f003 f9c5 	bl	f222 <assert_print>
    be98:	21ba      	movs	r1, #186	; 0xba
    be9a:	4628      	mov	r0, r5
    be9c:	f003 f9ba 	bl	f214 <assert_post_action>
    bea0:	e7d3      	b.n	be4a <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    bea2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    bea4:	6063      	str	r3, [r4, #4]
	node->next = successor;
    bea6:	6025      	str	r5, [r4, #0]
	prev->next = node;
    bea8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    beaa:	606c      	str	r4, [r5, #4]
}
    beac:	e7e9      	b.n	be82 <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    beae:	2500      	movs	r5, #0
    beb0:	e7d0      	b.n	be54 <z_set_prio+0xa8>
    beb2:	4d0a      	ldr	r5, [pc, #40]	; (bedc <z_set_prio+0x130>)
    beb4:	23b9      	movs	r3, #185	; 0xb9
    beb6:	462a      	mov	r2, r5
    beb8:	4911      	ldr	r1, [pc, #68]	; (bf00 <z_set_prio+0x154>)
    beba:	480a      	ldr	r0, [pc, #40]	; (bee4 <z_set_prio+0x138>)
    bebc:	f003 f9b1 	bl	f222 <assert_print>
    bec0:	4905      	ldr	r1, [pc, #20]	; (bed8 <z_set_prio+0x12c>)
    bec2:	4810      	ldr	r0, [pc, #64]	; (bf04 <z_set_prio+0x158>)
    bec4:	f003 f9ad 	bl	f222 <assert_print>
    bec8:	21b9      	movs	r1, #185	; 0xb9
    beca:	4628      	mov	r0, r5
    becc:	f003 f9a2 	bl	f214 <assert_post_action>
    bed0:	e79b      	b.n	be0a <z_set_prio+0x5e>
}
    bed2:	4638      	mov	r0, r7
    bed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bed8:	2000d51c 	.word	0x2000d51c
    bedc:	00011854 	.word	0x00011854
    bee0:	000118b4 	.word	0x000118b4
    bee4:	000116a8 	.word	0x000116a8
    bee8:	000118cc 	.word	0x000118cc
    beec:	2000d500 	.word	0x2000d500
    bef0:	200047c8 	.word	0x200047c8
    bef4:	2000d4e0 	.word	0x2000d4e0
    bef8:	000131ac 	.word	0x000131ac
    befc:	000131e8 	.word	0x000131e8
    bf00:	00011884 	.word	0x00011884
    bf04:	0001189c 	.word	0x0001189c

0000bf08 <z_impl_k_thread_suspend>:
{
    bf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf0a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    bf0c:	3018      	adds	r0, #24
    bf0e:	f000 fdcf 	bl	cab0 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    bf12:	2500      	movs	r5, #0
	__asm__ volatile(
    bf14:	f04f 0320 	mov.w	r3, #32
    bf18:	f3ef 8611 	mrs	r6, BASEPRI
    bf1c:	f383 8812 	msr	BASEPRI_MAX, r3
    bf20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bf24:	482d      	ldr	r0, [pc, #180]	; (bfdc <z_impl_k_thread_suspend+0xd4>)
    bf26:	f7fe fc75 	bl	a814 <z_spin_lock_valid>
    bf2a:	b118      	cbz	r0, bf34 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    bf2c:	482b      	ldr	r0, [pc, #172]	; (bfdc <z_impl_k_thread_suspend+0xd4>)
    bf2e:	f7fe fc91 	bl	a854 <z_spin_lock_set_owner>
	return k;
    bf32:	e01c      	b.n	bf6e <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bf34:	4f2a      	ldr	r7, [pc, #168]	; (bfe0 <z_impl_k_thread_suspend+0xd8>)
    bf36:	238e      	movs	r3, #142	; 0x8e
    bf38:	463a      	mov	r2, r7
    bf3a:	492a      	ldr	r1, [pc, #168]	; (bfe4 <z_impl_k_thread_suspend+0xdc>)
    bf3c:	482a      	ldr	r0, [pc, #168]	; (bfe8 <z_impl_k_thread_suspend+0xe0>)
    bf3e:	f003 f970 	bl	f222 <assert_print>
    bf42:	4926      	ldr	r1, [pc, #152]	; (bfdc <z_impl_k_thread_suspend+0xd4>)
    bf44:	4829      	ldr	r0, [pc, #164]	; (bfec <z_impl_k_thread_suspend+0xe4>)
    bf46:	f003 f96c 	bl	f222 <assert_print>
    bf4a:	218e      	movs	r1, #142	; 0x8e
    bf4c:	4638      	mov	r0, r7
    bf4e:	f003 f961 	bl	f214 <assert_post_action>
    bf52:	e7eb      	b.n	bf2c <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bf54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    bf58:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    bf5a:	4621      	mov	r1, r4
    bf5c:	4824      	ldr	r0, [pc, #144]	; (bff0 <z_impl_k_thread_suspend+0xe8>)
    bf5e:	f7ff fb45 	bl	b5ec <z_priq_dumb_remove>
}
    bf62:	e00a      	b.n	bf7a <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    bf64:	f386 8811 	msr	BASEPRI, r6
    bf68:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bf6c:	2501      	movs	r5, #1
    bf6e:	bb2d      	cbnz	r5, bfbc <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    bf70:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    bf72:	f994 300d 	ldrsb.w	r3, [r4, #13]
    bf76:	2b00      	cmp	r3, #0
    bf78:	dbec      	blt.n	bf54 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    bf7a:	7b63      	ldrb	r3, [r4, #13]
    bf7c:	f043 0310 	orr.w	r3, r3, #16
    bf80:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    bf82:	4b1c      	ldr	r3, [pc, #112]	; (bff4 <z_impl_k_thread_suspend+0xec>)
    bf84:	6898      	ldr	r0, [r3, #8]
    bf86:	42a0      	cmp	r0, r4
    bf88:	bf14      	ite	ne
    bf8a:	2000      	movne	r0, #0
    bf8c:	2001      	moveq	r0, #1
    bf8e:	f7ff fb51 	bl	b634 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bf92:	4812      	ldr	r0, [pc, #72]	; (bfdc <z_impl_k_thread_suspend+0xd4>)
    bf94:	f7fe fc4e 	bl	a834 <z_spin_unlock_valid>
    bf98:	2800      	cmp	r0, #0
    bf9a:	d1e3      	bne.n	bf64 <z_impl_k_thread_suspend+0x5c>
    bf9c:	4d10      	ldr	r5, [pc, #64]	; (bfe0 <z_impl_k_thread_suspend+0xd8>)
    bf9e:	23b9      	movs	r3, #185	; 0xb9
    bfa0:	462a      	mov	r2, r5
    bfa2:	4915      	ldr	r1, [pc, #84]	; (bff8 <z_impl_k_thread_suspend+0xf0>)
    bfa4:	4810      	ldr	r0, [pc, #64]	; (bfe8 <z_impl_k_thread_suspend+0xe0>)
    bfa6:	f003 f93c 	bl	f222 <assert_print>
    bfaa:	490c      	ldr	r1, [pc, #48]	; (bfdc <z_impl_k_thread_suspend+0xd4>)
    bfac:	4813      	ldr	r0, [pc, #76]	; (bffc <z_impl_k_thread_suspend+0xf4>)
    bfae:	f003 f938 	bl	f222 <assert_print>
    bfb2:	21b9      	movs	r1, #185	; 0xb9
    bfb4:	4628      	mov	r0, r5
    bfb6:	f003 f92d 	bl	f214 <assert_post_action>
    bfba:	e7d3      	b.n	bf64 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    bfbc:	4b0d      	ldr	r3, [pc, #52]	; (bff4 <z_impl_k_thread_suspend+0xec>)
    bfbe:	689b      	ldr	r3, [r3, #8]
    bfc0:	42a3      	cmp	r3, r4
    bfc2:	d000      	beq.n	bfc6 <z_impl_k_thread_suspend+0xbe>
}
    bfc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    bfc6:	f04f 0320 	mov.w	r3, #32
    bfca:	f3ef 8011 	mrs	r0, BASEPRI
    bfce:	f383 8812 	msr	BASEPRI_MAX, r3
    bfd2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    bfd6:	f004 fb18 	bl	1060a <z_reschedule_irqlock>
    bfda:	e7f3      	b.n	bfc4 <z_impl_k_thread_suspend+0xbc>
    bfdc:	2000d51c 	.word	0x2000d51c
    bfe0:	00011854 	.word	0x00011854
    bfe4:	000118b4 	.word	0x000118b4
    bfe8:	000116a8 	.word	0x000116a8
    bfec:	000118cc 	.word	0x000118cc
    bff0:	2000d500 	.word	0x2000d500
    bff4:	2000d4e0 	.word	0x2000d4e0
    bff8:	00011884 	.word	0x00011884
    bffc:	0001189c 	.word	0x0001189c

0000c000 <k_sched_unlock>:
{
    c000:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    c002:	2400      	movs	r4, #0
    c004:	f04f 0320 	mov.w	r3, #32
    c008:	f3ef 8511 	mrs	r5, BASEPRI
    c00c:	f383 8812 	msr	BASEPRI_MAX, r3
    c010:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c014:	4838      	ldr	r0, [pc, #224]	; (c0f8 <k_sched_unlock+0xf8>)
    c016:	f7fe fbfd 	bl	a814 <z_spin_lock_valid>
    c01a:	b118      	cbz	r0, c024 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    c01c:	4836      	ldr	r0, [pc, #216]	; (c0f8 <k_sched_unlock+0xf8>)
    c01e:	f7fe fc19 	bl	a854 <z_spin_lock_set_owner>
	return k;
    c022:	e036      	b.n	c092 <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c024:	4e35      	ldr	r6, [pc, #212]	; (c0fc <k_sched_unlock+0xfc>)
    c026:	238e      	movs	r3, #142	; 0x8e
    c028:	4632      	mov	r2, r6
    c02a:	4935      	ldr	r1, [pc, #212]	; (c100 <k_sched_unlock+0x100>)
    c02c:	4835      	ldr	r0, [pc, #212]	; (c104 <k_sched_unlock+0x104>)
    c02e:	f003 f8f8 	bl	f222 <assert_print>
    c032:	4931      	ldr	r1, [pc, #196]	; (c0f8 <k_sched_unlock+0xf8>)
    c034:	4834      	ldr	r0, [pc, #208]	; (c108 <k_sched_unlock+0x108>)
    c036:	f003 f8f4 	bl	f222 <assert_print>
    c03a:	218e      	movs	r1, #142	; 0x8e
    c03c:	4630      	mov	r0, r6
    c03e:	f003 f8e9 	bl	f214 <assert_post_action>
    c042:	e7eb      	b.n	c01c <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    c044:	4c31      	ldr	r4, [pc, #196]	; (c10c <k_sched_unlock+0x10c>)
    c046:	f240 33bb 	movw	r3, #955	; 0x3bb
    c04a:	4622      	mov	r2, r4
    c04c:	4930      	ldr	r1, [pc, #192]	; (c110 <k_sched_unlock+0x110>)
    c04e:	482d      	ldr	r0, [pc, #180]	; (c104 <k_sched_unlock+0x104>)
    c050:	f003 f8e7 	bl	f222 <assert_print>
    c054:	482f      	ldr	r0, [pc, #188]	; (c114 <k_sched_unlock+0x114>)
    c056:	f003 f8e4 	bl	f222 <assert_print>
    c05a:	f240 31bb 	movw	r1, #955	; 0x3bb
    c05e:	4620      	mov	r0, r4
    c060:	f003 f8d8 	bl	f214 <assert_post_action>
    c064:	e01b      	b.n	c09e <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    c066:	4c29      	ldr	r4, [pc, #164]	; (c10c <k_sched_unlock+0x10c>)
    c068:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    c06c:	4622      	mov	r2, r4
    c06e:	492a      	ldr	r1, [pc, #168]	; (c118 <k_sched_unlock+0x118>)
    c070:	4824      	ldr	r0, [pc, #144]	; (c104 <k_sched_unlock+0x104>)
    c072:	f003 f8d6 	bl	f222 <assert_print>
    c076:	4827      	ldr	r0, [pc, #156]	; (c114 <k_sched_unlock+0x114>)
    c078:	f003 f8d3 	bl	f222 <assert_print>
    c07c:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    c080:	4620      	mov	r0, r4
    c082:	f003 f8c7 	bl	f214 <assert_post_action>
    c086:	e00e      	b.n	c0a6 <k_sched_unlock+0xa6>
	__asm__ volatile(
    c088:	f385 8811 	msr	BASEPRI, r5
    c08c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    c090:	2401      	movs	r4, #1
    c092:	bb2c      	cbnz	r4, c0e0 <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    c094:	4b21      	ldr	r3, [pc, #132]	; (c11c <k_sched_unlock+0x11c>)
    c096:	689b      	ldr	r3, [r3, #8]
    c098:	7bdb      	ldrb	r3, [r3, #15]
    c09a:	2b00      	cmp	r3, #0
    c09c:	d0d2      	beq.n	c044 <k_sched_unlock+0x44>
    c09e:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    c0a2:	2b00      	cmp	r3, #0
    c0a4:	d1df      	bne.n	c066 <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    c0a6:	4b1d      	ldr	r3, [pc, #116]	; (c11c <k_sched_unlock+0x11c>)
    c0a8:	689a      	ldr	r2, [r3, #8]
    c0aa:	7bd3      	ldrb	r3, [r2, #15]
    c0ac:	3301      	adds	r3, #1
    c0ae:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    c0b0:	2000      	movs	r0, #0
    c0b2:	f7ff fabf 	bl	b634 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c0b6:	4810      	ldr	r0, [pc, #64]	; (c0f8 <k_sched_unlock+0xf8>)
    c0b8:	f7fe fbbc 	bl	a834 <z_spin_unlock_valid>
    c0bc:	2800      	cmp	r0, #0
    c0be:	d1e3      	bne.n	c088 <k_sched_unlock+0x88>
    c0c0:	4c0e      	ldr	r4, [pc, #56]	; (c0fc <k_sched_unlock+0xfc>)
    c0c2:	23b9      	movs	r3, #185	; 0xb9
    c0c4:	4622      	mov	r2, r4
    c0c6:	4916      	ldr	r1, [pc, #88]	; (c120 <k_sched_unlock+0x120>)
    c0c8:	480e      	ldr	r0, [pc, #56]	; (c104 <k_sched_unlock+0x104>)
    c0ca:	f003 f8aa 	bl	f222 <assert_print>
    c0ce:	490a      	ldr	r1, [pc, #40]	; (c0f8 <k_sched_unlock+0xf8>)
    c0d0:	4814      	ldr	r0, [pc, #80]	; (c124 <k_sched_unlock+0x124>)
    c0d2:	f003 f8a6 	bl	f222 <assert_print>
    c0d6:	21b9      	movs	r1, #185	; 0xb9
    c0d8:	4620      	mov	r0, r4
    c0da:	f003 f89b 	bl	f214 <assert_post_action>
    c0de:	e7d3      	b.n	c088 <k_sched_unlock+0x88>
	__asm__ volatile(
    c0e0:	f04f 0320 	mov.w	r3, #32
    c0e4:	f3ef 8011 	mrs	r0, BASEPRI
    c0e8:	f383 8812 	msr	BASEPRI_MAX, r3
    c0ec:	f3bf 8f6f 	isb	sy
    c0f0:	f004 fa8b 	bl	1060a <z_reschedule_irqlock>
}
    c0f4:	bd70      	pop	{r4, r5, r6, pc}
    c0f6:	bf00      	nop
    c0f8:	2000d51c 	.word	0x2000d51c
    c0fc:	00011854 	.word	0x00011854
    c100:	000118b4 	.word	0x000118b4
    c104:	000116a8 	.word	0x000116a8
    c108:	000118cc 	.word	0x000118cc
    c10c:	000131ac 	.word	0x000131ac
    c110:	00013234 	.word	0x00013234
    c114:	00013104 	.word	0x00013104
    c118:	00012fbc 	.word	0x00012fbc
    c11c:	2000d4e0 	.word	0x2000d4e0
    c120:	00011884 	.word	0x00011884
    c124:	0001189c 	.word	0x0001189c

0000c128 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    c128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    c12a:	7b43      	ldrb	r3, [r0, #13]
    c12c:	f013 0f08 	tst.w	r3, #8
    c130:	d145      	bne.n	c1be <end_thread+0x96>
    c132:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    c134:	f043 0308 	orr.w	r3, r3, #8
    c138:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    c13a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c13e:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    c140:	f013 0f80 	tst.w	r3, #128	; 0x80
    c144:	d12d      	bne.n	c1a2 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    c146:	68ab      	ldr	r3, [r5, #8]
    c148:	b15b      	cbz	r3, c162 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    c14a:	4628      	mov	r0, r5
    c14c:	f7ff f870 	bl	b230 <pended_on_thread>
    c150:	4629      	mov	r1, r5
    c152:	f7ff fa4b 	bl	b5ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    c156:	7b6b      	ldrb	r3, [r5, #13]
    c158:	f023 0302 	bic.w	r3, r3, #2
    c15c:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    c15e:	2300      	movs	r3, #0
    c160:	60ab      	str	r3, [r5, #8]
    c162:	f105 0018 	add.w	r0, r5, #24
    c166:	f000 fca3 	bl	cab0 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    c16a:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    c16e:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c170:	42bc      	cmp	r4, r7
    c172:	d01e      	beq.n	c1b2 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    c174:	b1ec      	cbz	r4, c1b2 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    c176:	4620      	mov	r0, r4
    c178:	f7ff f85a 	bl	b230 <pended_on_thread>
    c17c:	4621      	mov	r1, r4
    c17e:	f7ff fa35 	bl	b5ec <z_priq_dumb_remove>
    c182:	7b63      	ldrb	r3, [r4, #13]
    c184:	f023 0302 	bic.w	r3, r3, #2
    c188:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    c18a:	2600      	movs	r6, #0
    c18c:	60a6      	str	r6, [r4, #8]
    c18e:	f104 0018 	add.w	r0, r4, #24
    c192:	f000 fc8d 	bl	cab0 <z_abort_timeout>
    c196:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    c19a:	4620      	mov	r0, r4
    c19c:	f7ff fba4 	bl	b8e8 <ready_thread>
    c1a0:	e7e5      	b.n	c16e <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c1a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c1a6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    c1a8:	4601      	mov	r1, r0
    c1aa:	4805      	ldr	r0, [pc, #20]	; (c1c0 <end_thread+0x98>)
    c1ac:	f7ff fa1e 	bl	b5ec <z_priq_dumb_remove>
}
    c1b0:	e7c9      	b.n	c146 <end_thread+0x1e>
		update_cache(1);
    c1b2:	2001      	movs	r0, #1
    c1b4:	f7ff fa3e 	bl	b634 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    c1b8:	4628      	mov	r0, r5
    c1ba:	f7fe fb53 	bl	a864 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    c1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1c0:	2000d500 	.word	0x2000d500

0000c1c4 <z_unpend1_no_timeout>:
{
    c1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c1c6:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    c1c8:	2500      	movs	r5, #0
    c1ca:	f04f 0320 	mov.w	r3, #32
    c1ce:	f3ef 8711 	mrs	r7, BASEPRI
    c1d2:	f383 8812 	msr	BASEPRI_MAX, r3
    c1d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c1da:	4823      	ldr	r0, [pc, #140]	; (c268 <z_unpend1_no_timeout+0xa4>)
    c1dc:	f7fe fb1a 	bl	a814 <z_spin_lock_valid>
    c1e0:	b120      	cbz	r0, c1ec <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
    c1e2:	4821      	ldr	r0, [pc, #132]	; (c268 <z_unpend1_no_timeout+0xa4>)
    c1e4:	f7fe fb36 	bl	a854 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    c1e8:	2400      	movs	r4, #0
	return k;
    c1ea:	e018      	b.n	c21e <z_unpend1_no_timeout+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c1ec:	4c1f      	ldr	r4, [pc, #124]	; (c26c <z_unpend1_no_timeout+0xa8>)
    c1ee:	238e      	movs	r3, #142	; 0x8e
    c1f0:	4622      	mov	r2, r4
    c1f2:	491f      	ldr	r1, [pc, #124]	; (c270 <z_unpend1_no_timeout+0xac>)
    c1f4:	481f      	ldr	r0, [pc, #124]	; (c274 <z_unpend1_no_timeout+0xb0>)
    c1f6:	f003 f814 	bl	f222 <assert_print>
    c1fa:	491b      	ldr	r1, [pc, #108]	; (c268 <z_unpend1_no_timeout+0xa4>)
    c1fc:	481e      	ldr	r0, [pc, #120]	; (c278 <z_unpend1_no_timeout+0xb4>)
    c1fe:	f003 f810 	bl	f222 <assert_print>
    c202:	218e      	movs	r1, #142	; 0x8e
    c204:	4620      	mov	r0, r4
    c206:	f003 f805 	bl	f214 <assert_post_action>
    c20a:	e7ea      	b.n	c1e2 <z_unpend1_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c20c:	4816      	ldr	r0, [pc, #88]	; (c268 <z_unpend1_no_timeout+0xa4>)
    c20e:	f7fe fb11 	bl	a834 <z_spin_unlock_valid>
    c212:	b1b8      	cbz	r0, c244 <z_unpend1_no_timeout+0x80>
	__asm__ volatile(
    c214:	f387 8811 	msr	BASEPRI, r7
    c218:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    c21c:	2501      	movs	r5, #1
    c21e:	bb0d      	cbnz	r5, c264 <z_unpend1_no_timeout+0xa0>
		thread = _priq_wait_best(&wait_q->waitq);
    c220:	4630      	mov	r0, r6
    c222:	f004 fa07 	bl	10634 <z_priq_dumb_best>
		if (thread != NULL) {
    c226:	4604      	mov	r4, r0
    c228:	2800      	cmp	r0, #0
    c22a:	d0ef      	beq.n	c20c <z_unpend1_no_timeout+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    c22c:	f7ff f800 	bl	b230 <pended_on_thread>
    c230:	4621      	mov	r1, r4
    c232:	f7ff f9db 	bl	b5ec <z_priq_dumb_remove>
    c236:	7b63      	ldrb	r3, [r4, #13]
    c238:	f023 0302 	bic.w	r3, r3, #2
    c23c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    c23e:	2300      	movs	r3, #0
    c240:	60a3      	str	r3, [r4, #8]
}
    c242:	e7e3      	b.n	c20c <z_unpend1_no_timeout+0x48>
    c244:	4d09      	ldr	r5, [pc, #36]	; (c26c <z_unpend1_no_timeout+0xa8>)
    c246:	23b9      	movs	r3, #185	; 0xb9
    c248:	462a      	mov	r2, r5
    c24a:	490c      	ldr	r1, [pc, #48]	; (c27c <z_unpend1_no_timeout+0xb8>)
    c24c:	4809      	ldr	r0, [pc, #36]	; (c274 <z_unpend1_no_timeout+0xb0>)
    c24e:	f002 ffe8 	bl	f222 <assert_print>
    c252:	4905      	ldr	r1, [pc, #20]	; (c268 <z_unpend1_no_timeout+0xa4>)
    c254:	480a      	ldr	r0, [pc, #40]	; (c280 <z_unpend1_no_timeout+0xbc>)
    c256:	f002 ffe4 	bl	f222 <assert_print>
    c25a:	21b9      	movs	r1, #185	; 0xb9
    c25c:	4628      	mov	r0, r5
    c25e:	f002 ffd9 	bl	f214 <assert_post_action>
    c262:	e7d7      	b.n	c214 <z_unpend1_no_timeout+0x50>
}
    c264:	4620      	mov	r0, r4
    c266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c268:	2000d51c 	.word	0x2000d51c
    c26c:	00011854 	.word	0x00011854
    c270:	000118b4 	.word	0x000118b4
    c274:	000116a8 	.word	0x000116a8
    c278:	000118cc 	.word	0x000118cc
    c27c:	00011884 	.word	0x00011884
    c280:	0001189c 	.word	0x0001189c

0000c284 <z_unpend_first_thread>:
{
    c284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c286:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    c288:	2500      	movs	r5, #0
	__asm__ volatile(
    c28a:	f04f 0320 	mov.w	r3, #32
    c28e:	f3ef 8711 	mrs	r7, BASEPRI
    c292:	f383 8812 	msr	BASEPRI_MAX, r3
    c296:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c29a:	4825      	ldr	r0, [pc, #148]	; (c330 <z_unpend_first_thread+0xac>)
    c29c:	f7fe faba 	bl	a814 <z_spin_lock_valid>
    c2a0:	b120      	cbz	r0, c2ac <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    c2a2:	4823      	ldr	r0, [pc, #140]	; (c330 <z_unpend_first_thread+0xac>)
    c2a4:	f7fe fad6 	bl	a854 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    c2a8:	2400      	movs	r4, #0
	return k;
    c2aa:	e018      	b.n	c2de <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c2ac:	4c21      	ldr	r4, [pc, #132]	; (c334 <z_unpend_first_thread+0xb0>)
    c2ae:	238e      	movs	r3, #142	; 0x8e
    c2b0:	4622      	mov	r2, r4
    c2b2:	4921      	ldr	r1, [pc, #132]	; (c338 <z_unpend_first_thread+0xb4>)
    c2b4:	4821      	ldr	r0, [pc, #132]	; (c33c <z_unpend_first_thread+0xb8>)
    c2b6:	f002 ffb4 	bl	f222 <assert_print>
    c2ba:	491d      	ldr	r1, [pc, #116]	; (c330 <z_unpend_first_thread+0xac>)
    c2bc:	4820      	ldr	r0, [pc, #128]	; (c340 <z_unpend_first_thread+0xbc>)
    c2be:	f002 ffb0 	bl	f222 <assert_print>
    c2c2:	218e      	movs	r1, #142	; 0x8e
    c2c4:	4620      	mov	r0, r4
    c2c6:	f002 ffa5 	bl	f214 <assert_post_action>
    c2ca:	e7ea      	b.n	c2a2 <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c2cc:	4818      	ldr	r0, [pc, #96]	; (c330 <z_unpend_first_thread+0xac>)
    c2ce:	f7fe fab1 	bl	a834 <z_spin_unlock_valid>
    c2d2:	b1d8      	cbz	r0, c30c <z_unpend_first_thread+0x88>
	__asm__ volatile(
    c2d4:	f387 8811 	msr	BASEPRI, r7
    c2d8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    c2dc:	2501      	movs	r5, #1
    c2de:	bb2d      	cbnz	r5, c32c <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    c2e0:	4630      	mov	r0, r6
    c2e2:	f004 f9a7 	bl	10634 <z_priq_dumb_best>
		if (thread != NULL) {
    c2e6:	4604      	mov	r4, r0
    c2e8:	2800      	cmp	r0, #0
    c2ea:	d0ef      	beq.n	c2cc <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    c2ec:	f7fe ffa0 	bl	b230 <pended_on_thread>
    c2f0:	4621      	mov	r1, r4
    c2f2:	f7ff f97b 	bl	b5ec <z_priq_dumb_remove>
    c2f6:	7b63      	ldrb	r3, [r4, #13]
    c2f8:	f023 0302 	bic.w	r3, r3, #2
    c2fc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    c2fe:	2300      	movs	r3, #0
    c300:	60a3      	str	r3, [r4, #8]
    c302:	f104 0018 	add.w	r0, r4, #24
    c306:	f000 fbd3 	bl	cab0 <z_abort_timeout>
    c30a:	e7df      	b.n	c2cc <z_unpend_first_thread+0x48>
    c30c:	4d09      	ldr	r5, [pc, #36]	; (c334 <z_unpend_first_thread+0xb0>)
    c30e:	23b9      	movs	r3, #185	; 0xb9
    c310:	462a      	mov	r2, r5
    c312:	490c      	ldr	r1, [pc, #48]	; (c344 <z_unpend_first_thread+0xc0>)
    c314:	4809      	ldr	r0, [pc, #36]	; (c33c <z_unpend_first_thread+0xb8>)
    c316:	f002 ff84 	bl	f222 <assert_print>
    c31a:	4905      	ldr	r1, [pc, #20]	; (c330 <z_unpend_first_thread+0xac>)
    c31c:	480a      	ldr	r0, [pc, #40]	; (c348 <z_unpend_first_thread+0xc4>)
    c31e:	f002 ff80 	bl	f222 <assert_print>
    c322:	21b9      	movs	r1, #185	; 0xb9
    c324:	4628      	mov	r0, r5
    c326:	f002 ff75 	bl	f214 <assert_post_action>
    c32a:	e7d3      	b.n	c2d4 <z_unpend_first_thread+0x50>
}
    c32c:	4620      	mov	r0, r4
    c32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c330:	2000d51c 	.word	0x2000d51c
    c334:	00011854 	.word	0x00011854
    c338:	000118b4 	.word	0x000118b4
    c33c:	000116a8 	.word	0x000116a8
    c340:	000118cc 	.word	0x000118cc
    c344:	00011884 	.word	0x00011884
    c348:	0001189c 	.word	0x0001189c

0000c34c <z_sched_init>:
{
    c34c:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    c34e:	4804      	ldr	r0, [pc, #16]	; (c360 <z_sched_init+0x14>)
    c350:	f004 f977 	bl	10642 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    c354:	2100      	movs	r1, #0
    c356:	4608      	mov	r0, r1
    c358:	f7fe ffa8 	bl	b2ac <k_sched_time_slice_set>
}
    c35c:	bd08      	pop	{r3, pc}
    c35e:	bf00      	nop
    c360:	2000d4fc 	.word	0x2000d4fc

0000c364 <z_impl_k_yield>:
{
    c364:	b570      	push	{r4, r5, r6, lr}
    c366:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    c36a:	2b00      	cmp	r3, #0
    c36c:	d149      	bne.n	c402 <z_impl_k_yield+0x9e>
	__asm__ volatile(
    c36e:	f04f 0320 	mov.w	r3, #32
    c372:	f3ef 8611 	mrs	r6, BASEPRI
    c376:	f383 8812 	msr	BASEPRI_MAX, r3
    c37a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c37e:	4843      	ldr	r0, [pc, #268]	; (c48c <z_impl_k_yield+0x128>)
    c380:	f7fe fa48 	bl	a814 <z_spin_lock_valid>
    c384:	2800      	cmp	r0, #0
    c386:	d04d      	beq.n	c424 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    c388:	4840      	ldr	r0, [pc, #256]	; (c48c <z_impl_k_yield+0x128>)
    c38a:	f7fe fa63 	bl	a854 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    c38e:	4c40      	ldr	r4, [pc, #256]	; (c490 <z_impl_k_yield+0x12c>)
    c390:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c392:	7b4b      	ldrb	r3, [r1, #13]
    c394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c398:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    c39a:	f104 0020 	add.w	r0, r4, #32
    c39e:	f7ff f925 	bl	b5ec <z_priq_dumb_remove>
	queue_thread(_current);
    c3a2:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    c3a4:	7b6b      	ldrb	r3, [r5, #13]
    c3a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c3aa:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    c3ac:	4b39      	ldr	r3, [pc, #228]	; (c494 <z_impl_k_yield+0x130>)
    c3ae:	429d      	cmp	r5, r3
    c3b0:	d048      	beq.n	c444 <z_impl_k_yield+0xe0>
	return list->head == list;
    c3b2:	4b37      	ldr	r3, [pc, #220]	; (c490 <z_impl_k_yield+0x12c>)
    c3b4:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c3b8:	429c      	cmp	r4, r3
    c3ba:	d055      	beq.n	c468 <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c3bc:	b16c      	cbz	r4, c3da <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    c3be:	4621      	mov	r1, r4
    c3c0:	4628      	mov	r0, r5
    c3c2:	f004 f918 	bl	105f6 <z_sched_prio_cmp>
    c3c6:	2800      	cmp	r0, #0
    c3c8:	dc48      	bgt.n	c45c <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    c3ca:	b134      	cbz	r4, c3da <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    c3cc:	4b30      	ldr	r3, [pc, #192]	; (c490 <z_impl_k_yield+0x12c>)
    c3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c3d0:	429c      	cmp	r4, r3
    c3d2:	d002      	beq.n	c3da <z_impl_k_yield+0x76>
    c3d4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c3d6:	2c00      	cmp	r4, #0
    c3d8:	d1f0      	bne.n	c3bc <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    c3da:	4b2d      	ldr	r3, [pc, #180]	; (c490 <z_impl_k_yield+0x12c>)
    c3dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    c3de:	f103 0120 	add.w	r1, r3, #32
    c3e2:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    c3e4:	606a      	str	r2, [r5, #4]
	tail->next = node;
    c3e6:	6015      	str	r5, [r2, #0]
	list->tail = node;
    c3e8:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    c3ea:	2001      	movs	r0, #1
    c3ec:	f7ff f922 	bl	b634 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c3f0:	4826      	ldr	r0, [pc, #152]	; (c48c <z_impl_k_yield+0x128>)
    c3f2:	f7fe fa1f 	bl	a834 <z_spin_unlock_valid>
    c3f6:	2800      	cmp	r0, #0
    c3f8:	d038      	beq.n	c46c <z_impl_k_yield+0x108>
    c3fa:	4630      	mov	r0, r6
    c3fc:	f7f9 fd76 	bl	5eec <arch_swap>
}
    c400:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    c402:	4c25      	ldr	r4, [pc, #148]	; (c498 <z_impl_k_yield+0x134>)
    c404:	f240 5332 	movw	r3, #1330	; 0x532
    c408:	4622      	mov	r2, r4
    c40a:	4924      	ldr	r1, [pc, #144]	; (c49c <z_impl_k_yield+0x138>)
    c40c:	4824      	ldr	r0, [pc, #144]	; (c4a0 <z_impl_k_yield+0x13c>)
    c40e:	f002 ff08 	bl	f222 <assert_print>
    c412:	4824      	ldr	r0, [pc, #144]	; (c4a4 <z_impl_k_yield+0x140>)
    c414:	f002 ff05 	bl	f222 <assert_print>
    c418:	f240 5132 	movw	r1, #1330	; 0x532
    c41c:	4620      	mov	r0, r4
    c41e:	f002 fef9 	bl	f214 <assert_post_action>
    c422:	e7a4      	b.n	c36e <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c424:	4c20      	ldr	r4, [pc, #128]	; (c4a8 <z_impl_k_yield+0x144>)
    c426:	238e      	movs	r3, #142	; 0x8e
    c428:	4622      	mov	r2, r4
    c42a:	4920      	ldr	r1, [pc, #128]	; (c4ac <z_impl_k_yield+0x148>)
    c42c:	481c      	ldr	r0, [pc, #112]	; (c4a0 <z_impl_k_yield+0x13c>)
    c42e:	f002 fef8 	bl	f222 <assert_print>
    c432:	4916      	ldr	r1, [pc, #88]	; (c48c <z_impl_k_yield+0x128>)
    c434:	481e      	ldr	r0, [pc, #120]	; (c4b0 <z_impl_k_yield+0x14c>)
    c436:	f002 fef4 	bl	f222 <assert_print>
    c43a:	218e      	movs	r1, #142	; 0x8e
    c43c:	4620      	mov	r0, r4
    c43e:	f002 fee9 	bl	f214 <assert_post_action>
    c442:	e7a1      	b.n	c388 <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    c444:	4c14      	ldr	r4, [pc, #80]	; (c498 <z_impl_k_yield+0x134>)
    c446:	23ba      	movs	r3, #186	; 0xba
    c448:	4622      	mov	r2, r4
    c44a:	491a      	ldr	r1, [pc, #104]	; (c4b4 <z_impl_k_yield+0x150>)
    c44c:	4814      	ldr	r0, [pc, #80]	; (c4a0 <z_impl_k_yield+0x13c>)
    c44e:	f002 fee8 	bl	f222 <assert_print>
    c452:	21ba      	movs	r1, #186	; 0xba
    c454:	4620      	mov	r0, r4
    c456:	f002 fedd 	bl	f214 <assert_post_action>
    c45a:	e7aa      	b.n	c3b2 <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    c45c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    c45e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    c460:	602c      	str	r4, [r5, #0]
	prev->next = node;
    c462:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    c464:	6065      	str	r5, [r4, #4]
}
    c466:	e7c0      	b.n	c3ea <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c468:	2400      	movs	r4, #0
    c46a:	e7a7      	b.n	c3bc <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c46c:	4c0e      	ldr	r4, [pc, #56]	; (c4a8 <z_impl_k_yield+0x144>)
    c46e:	23d0      	movs	r3, #208	; 0xd0
    c470:	4622      	mov	r2, r4
    c472:	4911      	ldr	r1, [pc, #68]	; (c4b8 <z_impl_k_yield+0x154>)
    c474:	480a      	ldr	r0, [pc, #40]	; (c4a0 <z_impl_k_yield+0x13c>)
    c476:	f002 fed4 	bl	f222 <assert_print>
    c47a:	4904      	ldr	r1, [pc, #16]	; (c48c <z_impl_k_yield+0x128>)
    c47c:	480f      	ldr	r0, [pc, #60]	; (c4bc <z_impl_k_yield+0x158>)
    c47e:	f002 fed0 	bl	f222 <assert_print>
    c482:	21d0      	movs	r1, #208	; 0xd0
    c484:	4620      	mov	r0, r4
    c486:	f002 fec5 	bl	f214 <assert_post_action>
    c48a:	e7b6      	b.n	c3fa <z_impl_k_yield+0x96>
    c48c:	2000d51c 	.word	0x2000d51c
    c490:	2000d4e0 	.word	0x2000d4e0
    c494:	200047c8 	.word	0x200047c8
    c498:	000131ac 	.word	0x000131ac
    c49c:	00012fbc 	.word	0x00012fbc
    c4a0:	000116a8 	.word	0x000116a8
    c4a4:	00013104 	.word	0x00013104
    c4a8:	00011854 	.word	0x00011854
    c4ac:	000118b4 	.word	0x000118b4
    c4b0:	000118cc 	.word	0x000118cc
    c4b4:	000131e8 	.word	0x000131e8
    c4b8:	00011884 	.word	0x00011884
    c4bc:	0001189c 	.word	0x0001189c

0000c4c0 <z_tick_sleep>:
{
    c4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c4c4:	4604      	mov	r4, r0
    c4c6:	460e      	mov	r6, r1
    c4c8:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    c4cc:	2b00      	cmp	r3, #0
    c4ce:	d14e      	bne.n	c56e <z_tick_sleep+0xae>
	if (ticks == 0) {
    c4d0:	ea54 0306 	orrs.w	r3, r4, r6
    c4d4:	d05c      	beq.n	c590 <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    c4d6:	f06f 0301 	mvn.w	r3, #1
    c4da:	1b1b      	subs	r3, r3, r4
    c4dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c4e0:	eb62 0206 	sbc.w	r2, r2, r6
    c4e4:	2b01      	cmp	r3, #1
    c4e6:	f172 0300 	sbcs.w	r3, r2, #0
    c4ea:	db55      	blt.n	c598 <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    c4ec:	f06f 0501 	mvn.w	r5, #1
    c4f0:	1b2d      	subs	r5, r5, r4
    c4f2:	f04f 0320 	mov.w	r3, #32
    c4f6:	f3ef 8911 	mrs	r9, BASEPRI
    c4fa:	f383 8812 	msr	BASEPRI_MAX, r3
    c4fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c502:	4840      	ldr	r0, [pc, #256]	; (c604 <z_tick_sleep+0x144>)
    c504:	f7fe f986 	bl	a814 <z_spin_lock_valid>
    c508:	2800      	cmp	r0, #0
    c50a:	d049      	beq.n	c5a0 <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    c50c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; c604 <z_tick_sleep+0x144>
    c510:	4640      	mov	r0, r8
    c512:	f7fe f99f 	bl	a854 <z_spin_lock_set_owner>
	pending_current = _current;
    c516:	4f3c      	ldr	r7, [pc, #240]	; (c608 <z_tick_sleep+0x148>)
    c518:	68b8      	ldr	r0, [r7, #8]
    c51a:	4b3c      	ldr	r3, [pc, #240]	; (c60c <z_tick_sleep+0x14c>)
    c51c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    c51e:	f7ff fb5b 	bl	bbd8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    c522:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    c524:	4622      	mov	r2, r4
    c526:	4633      	mov	r3, r6
    c528:	4939      	ldr	r1, [pc, #228]	; (c610 <z_tick_sleep+0x150>)
    c52a:	3018      	adds	r0, #24
    c52c:	f000 f9dc 	bl	c8e8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    c530:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    c532:	7b53      	ldrb	r3, [r2, #13]
    c534:	f043 0310 	orr.w	r3, r3, #16
    c538:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c53a:	4640      	mov	r0, r8
    c53c:	f7fe f97a 	bl	a834 <z_spin_unlock_valid>
    c540:	2800      	cmp	r0, #0
    c542:	d03d      	beq.n	c5c0 <z_tick_sleep+0x100>
    c544:	4648      	mov	r0, r9
    c546:	f7f9 fcd1 	bl	5eec <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    c54a:	4b2f      	ldr	r3, [pc, #188]	; (c608 <z_tick_sleep+0x148>)
    c54c:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    c54e:	7b5b      	ldrb	r3, [r3, #13]
    c550:	f013 0f10 	tst.w	r3, #16
    c554:	d144      	bne.n	c5e0 <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    c556:	f004 f88f 	bl	10678 <sys_clock_tick_get_32>
    c55a:	1a28      	subs	r0, r5, r0
    c55c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    c560:	2801      	cmp	r0, #1
    c562:	f173 0300 	sbcs.w	r3, r3, #0
    c566:	da00      	bge.n	c56a <z_tick_sleep+0xaa>
	return 0;
    c568:	2000      	movs	r0, #0
}
    c56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    c56e:	4d29      	ldr	r5, [pc, #164]	; (c614 <z_tick_sleep+0x154>)
    c570:	f240 534e 	movw	r3, #1358	; 0x54e
    c574:	462a      	mov	r2, r5
    c576:	4928      	ldr	r1, [pc, #160]	; (c618 <z_tick_sleep+0x158>)
    c578:	4828      	ldr	r0, [pc, #160]	; (c61c <z_tick_sleep+0x15c>)
    c57a:	f002 fe52 	bl	f222 <assert_print>
    c57e:	4828      	ldr	r0, [pc, #160]	; (c620 <z_tick_sleep+0x160>)
    c580:	f002 fe4f 	bl	f222 <assert_print>
    c584:	f240 514e 	movw	r1, #1358	; 0x54e
    c588:	4628      	mov	r0, r5
    c58a:	f002 fe43 	bl	f214 <assert_post_action>
    c58e:	e79f      	b.n	c4d0 <z_tick_sleep+0x10>
	z_impl_k_yield();
    c590:	f7ff fee8 	bl	c364 <z_impl_k_yield>
		return 0;
    c594:	2000      	movs	r0, #0
    c596:	e7e8      	b.n	c56a <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    c598:	f004 f86e 	bl	10678 <sys_clock_tick_get_32>
    c59c:	1905      	adds	r5, r0, r4
    c59e:	e7a8      	b.n	c4f2 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c5a0:	4f20      	ldr	r7, [pc, #128]	; (c624 <z_tick_sleep+0x164>)
    c5a2:	238e      	movs	r3, #142	; 0x8e
    c5a4:	463a      	mov	r2, r7
    c5a6:	4920      	ldr	r1, [pc, #128]	; (c628 <z_tick_sleep+0x168>)
    c5a8:	481c      	ldr	r0, [pc, #112]	; (c61c <z_tick_sleep+0x15c>)
    c5aa:	f002 fe3a 	bl	f222 <assert_print>
    c5ae:	4915      	ldr	r1, [pc, #84]	; (c604 <z_tick_sleep+0x144>)
    c5b0:	481e      	ldr	r0, [pc, #120]	; (c62c <z_tick_sleep+0x16c>)
    c5b2:	f002 fe36 	bl	f222 <assert_print>
    c5b6:	218e      	movs	r1, #142	; 0x8e
    c5b8:	4638      	mov	r0, r7
    c5ba:	f002 fe2b 	bl	f214 <assert_post_action>
    c5be:	e7a5      	b.n	c50c <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c5c0:	4c18      	ldr	r4, [pc, #96]	; (c624 <z_tick_sleep+0x164>)
    c5c2:	23d0      	movs	r3, #208	; 0xd0
    c5c4:	4622      	mov	r2, r4
    c5c6:	491a      	ldr	r1, [pc, #104]	; (c630 <z_tick_sleep+0x170>)
    c5c8:	4814      	ldr	r0, [pc, #80]	; (c61c <z_tick_sleep+0x15c>)
    c5ca:	f002 fe2a 	bl	f222 <assert_print>
    c5ce:	4641      	mov	r1, r8
    c5d0:	4818      	ldr	r0, [pc, #96]	; (c634 <z_tick_sleep+0x174>)
    c5d2:	f002 fe26 	bl	f222 <assert_print>
    c5d6:	21d0      	movs	r1, #208	; 0xd0
    c5d8:	4620      	mov	r0, r4
    c5da:	f002 fe1b 	bl	f214 <assert_post_action>
    c5de:	e7b1      	b.n	c544 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    c5e0:	4c0c      	ldr	r4, [pc, #48]	; (c614 <z_tick_sleep+0x154>)
    c5e2:	f240 536f 	movw	r3, #1391	; 0x56f
    c5e6:	4622      	mov	r2, r4
    c5e8:	4913      	ldr	r1, [pc, #76]	; (c638 <z_tick_sleep+0x178>)
    c5ea:	480c      	ldr	r0, [pc, #48]	; (c61c <z_tick_sleep+0x15c>)
    c5ec:	f002 fe19 	bl	f222 <assert_print>
    c5f0:	480b      	ldr	r0, [pc, #44]	; (c620 <z_tick_sleep+0x160>)
    c5f2:	f002 fe16 	bl	f222 <assert_print>
    c5f6:	f240 516f 	movw	r1, #1391	; 0x56f
    c5fa:	4620      	mov	r0, r4
    c5fc:	f002 fe0a 	bl	f214 <assert_post_action>
    c600:	e7a9      	b.n	c556 <z_tick_sleep+0x96>
    c602:	bf00      	nop
    c604:	2000d51c 	.word	0x2000d51c
    c608:	2000d4e0 	.word	0x2000d4e0
    c60c:	2000d518 	.word	0x2000d518
    c610:	0000baf1 	.word	0x0000baf1
    c614:	000131ac 	.word	0x000131ac
    c618:	00012fbc 	.word	0x00012fbc
    c61c:	000116a8 	.word	0x000116a8
    c620:	00013104 	.word	0x00013104
    c624:	00011854 	.word	0x00011854
    c628:	000118b4 	.word	0x000118b4
    c62c:	000118cc 	.word	0x000118cc
    c630:	00011884 	.word	0x00011884
    c634:	0001189c 	.word	0x0001189c
    c638:	00013268 	.word	0x00013268

0000c63c <z_impl_k_sleep>:
{
    c63c:	b570      	push	{r4, r5, r6, lr}
    c63e:	4605      	mov	r5, r0
    c640:	460c      	mov	r4, r1
    c642:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    c646:	bb13      	cbnz	r3, c68e <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c648:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    c64c:	bf08      	it	eq
    c64e:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    c652:	d02d      	beq.n	c6b0 <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    c654:	4628      	mov	r0, r5
    c656:	4621      	mov	r1, r4
    c658:	f7ff ff32 	bl	c4c0 <z_tick_sleep>
    c65c:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    c65e:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    c660:	0151      	lsls	r1, r2, #5
    c662:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    c666:	0143      	lsls	r3, r0, #5
    c668:	1a1b      	subs	r3, r3, r0
    c66a:	eb61 0102 	sbc.w	r1, r1, r2
    c66e:	0088      	lsls	r0, r1, #2
    c670:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    c674:	009b      	lsls	r3, r3, #2
    c676:	eb13 030c 	adds.w	r3, r3, ip
    c67a:	eb42 0000 	adc.w	r0, r2, r0
    c67e:	00c0      	lsls	r0, r0, #3
    c680:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    c684:	f3c3 3310 	ubfx	r3, r3, #12, #17
    c688:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    c68c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    c68e:	4e0c      	ldr	r6, [pc, #48]	; (c6c0 <z_impl_k_sleep+0x84>)
    c690:	f240 537e 	movw	r3, #1406	; 0x57e
    c694:	4632      	mov	r2, r6
    c696:	490b      	ldr	r1, [pc, #44]	; (c6c4 <z_impl_k_sleep+0x88>)
    c698:	480b      	ldr	r0, [pc, #44]	; (c6c8 <z_impl_k_sleep+0x8c>)
    c69a:	f002 fdc2 	bl	f222 <assert_print>
    c69e:	480b      	ldr	r0, [pc, #44]	; (c6cc <z_impl_k_sleep+0x90>)
    c6a0:	f002 fdbf 	bl	f222 <assert_print>
    c6a4:	f240 517e 	movw	r1, #1406	; 0x57e
    c6a8:	4630      	mov	r0, r6
    c6aa:	f002 fdb3 	bl	f214 <assert_post_action>
    c6ae:	e7cb      	b.n	c648 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    c6b0:	4b07      	ldr	r3, [pc, #28]	; (c6d0 <z_impl_k_sleep+0x94>)
    c6b2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    c6b4:	f7ff fc28 	bl	bf08 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    c6b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c6bc:	e7e6      	b.n	c68c <z_impl_k_sleep+0x50>
    c6be:	bf00      	nop
    c6c0:	000131ac 	.word	0x000131ac
    c6c4:	00012fbc 	.word	0x00012fbc
    c6c8:	000116a8 	.word	0x000116a8
    c6cc:	00013104 	.word	0x00013104
    c6d0:	2000d4e0 	.word	0x2000d4e0

0000c6d4 <z_impl_z_current_get>:
}
    c6d4:	4b01      	ldr	r3, [pc, #4]	; (c6dc <z_impl_z_current_get+0x8>)
    c6d6:	6898      	ldr	r0, [r3, #8]
    c6d8:	4770      	bx	lr
    c6da:	bf00      	nop
    c6dc:	2000d4e0 	.word	0x2000d4e0

0000c6e0 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    c6e0:	b570      	push	{r4, r5, r6, lr}
    c6e2:	4604      	mov	r4, r0
    c6e4:	f04f 0320 	mov.w	r3, #32
    c6e8:	f3ef 8511 	mrs	r5, BASEPRI
    c6ec:	f383 8812 	msr	BASEPRI_MAX, r3
    c6f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c6f4:	4840      	ldr	r0, [pc, #256]	; (c7f8 <z_thread_abort+0x118>)
    c6f6:	f7fe f88d 	bl	a814 <z_spin_lock_valid>
    c6fa:	b1b8      	cbz	r0, c72c <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    c6fc:	483e      	ldr	r0, [pc, #248]	; (c7f8 <z_thread_abort+0x118>)
    c6fe:	f7fe f8a9 	bl	a854 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    c702:	7b63      	ldrb	r3, [r4, #13]
    c704:	f013 0f08 	tst.w	r3, #8
    c708:	d120      	bne.n	c74c <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    c70a:	4620      	mov	r0, r4
    c70c:	f7ff fd0c 	bl	c128 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    c710:	4b3a      	ldr	r3, [pc, #232]	; (c7fc <z_thread_abort+0x11c>)
    c712:	689b      	ldr	r3, [r3, #8]
    c714:	42a3      	cmp	r3, r4
    c716:	d032      	beq.n	c77e <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c718:	4837      	ldr	r0, [pc, #220]	; (c7f8 <z_thread_abort+0x118>)
    c71a:	f7fe f88b 	bl	a834 <z_spin_unlock_valid>
    c71e:	2800      	cmp	r0, #0
    c720:	d059      	beq.n	c7d6 <z_thread_abort+0xf6>
	__asm__ volatile(
    c722:	f385 8811 	msr	BASEPRI, r5
    c726:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    c72a:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c72c:	4e34      	ldr	r6, [pc, #208]	; (c800 <z_thread_abort+0x120>)
    c72e:	238e      	movs	r3, #142	; 0x8e
    c730:	4632      	mov	r2, r6
    c732:	4934      	ldr	r1, [pc, #208]	; (c804 <z_thread_abort+0x124>)
    c734:	4834      	ldr	r0, [pc, #208]	; (c808 <z_thread_abort+0x128>)
    c736:	f002 fd74 	bl	f222 <assert_print>
    c73a:	492f      	ldr	r1, [pc, #188]	; (c7f8 <z_thread_abort+0x118>)
    c73c:	4833      	ldr	r0, [pc, #204]	; (c80c <z_thread_abort+0x12c>)
    c73e:	f002 fd70 	bl	f222 <assert_print>
    c742:	218e      	movs	r1, #142	; 0x8e
    c744:	4630      	mov	r0, r6
    c746:	f002 fd65 	bl	f214 <assert_post_action>
    c74a:	e7d7      	b.n	c6fc <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c74c:	482a      	ldr	r0, [pc, #168]	; (c7f8 <z_thread_abort+0x118>)
    c74e:	f7fe f871 	bl	a834 <z_spin_unlock_valid>
    c752:	b120      	cbz	r0, c75e <z_thread_abort+0x7e>
    c754:	f385 8811 	msr	BASEPRI, r5
    c758:	f3bf 8f6f 	isb	sy
		return;
    c75c:	e7e5      	b.n	c72a <z_thread_abort+0x4a>
    c75e:	4c28      	ldr	r4, [pc, #160]	; (c800 <z_thread_abort+0x120>)
    c760:	23b9      	movs	r3, #185	; 0xb9
    c762:	4622      	mov	r2, r4
    c764:	492a      	ldr	r1, [pc, #168]	; (c810 <z_thread_abort+0x130>)
    c766:	4828      	ldr	r0, [pc, #160]	; (c808 <z_thread_abort+0x128>)
    c768:	f002 fd5b 	bl	f222 <assert_print>
    c76c:	4922      	ldr	r1, [pc, #136]	; (c7f8 <z_thread_abort+0x118>)
    c76e:	4829      	ldr	r0, [pc, #164]	; (c814 <z_thread_abort+0x134>)
    c770:	f002 fd57 	bl	f222 <assert_print>
    c774:	21b9      	movs	r1, #185	; 0xb9
    c776:	4620      	mov	r0, r4
    c778:	f002 fd4c 	bl	f214 <assert_post_action>
    c77c:	e7ea      	b.n	c754 <z_thread_abort+0x74>
    c77e:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    c782:	2b00      	cmp	r3, #0
    c784:	d1c8      	bne.n	c718 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c786:	481c      	ldr	r0, [pc, #112]	; (c7f8 <z_thread_abort+0x118>)
    c788:	f7fe f854 	bl	a834 <z_spin_unlock_valid>
    c78c:	b198      	cbz	r0, c7b6 <z_thread_abort+0xd6>
    c78e:	4628      	mov	r0, r5
    c790:	f7f9 fbac 	bl	5eec <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    c794:	4c20      	ldr	r4, [pc, #128]	; (c818 <z_thread_abort+0x138>)
    c796:	f240 63ac 	movw	r3, #1708	; 0x6ac
    c79a:	4622      	mov	r2, r4
    c79c:	491f      	ldr	r1, [pc, #124]	; (c81c <z_thread_abort+0x13c>)
    c79e:	481a      	ldr	r0, [pc, #104]	; (c808 <z_thread_abort+0x128>)
    c7a0:	f002 fd3f 	bl	f222 <assert_print>
    c7a4:	481e      	ldr	r0, [pc, #120]	; (c820 <z_thread_abort+0x140>)
    c7a6:	f002 fd3c 	bl	f222 <assert_print>
    c7aa:	f240 61ac 	movw	r1, #1708	; 0x6ac
    c7ae:	4620      	mov	r0, r4
    c7b0:	f002 fd30 	bl	f214 <assert_post_action>
    c7b4:	e7b0      	b.n	c718 <z_thread_abort+0x38>
    c7b6:	4c12      	ldr	r4, [pc, #72]	; (c800 <z_thread_abort+0x120>)
    c7b8:	23d0      	movs	r3, #208	; 0xd0
    c7ba:	4622      	mov	r2, r4
    c7bc:	4914      	ldr	r1, [pc, #80]	; (c810 <z_thread_abort+0x130>)
    c7be:	4812      	ldr	r0, [pc, #72]	; (c808 <z_thread_abort+0x128>)
    c7c0:	f002 fd2f 	bl	f222 <assert_print>
    c7c4:	490c      	ldr	r1, [pc, #48]	; (c7f8 <z_thread_abort+0x118>)
    c7c6:	4813      	ldr	r0, [pc, #76]	; (c814 <z_thread_abort+0x134>)
    c7c8:	f002 fd2b 	bl	f222 <assert_print>
    c7cc:	21d0      	movs	r1, #208	; 0xd0
    c7ce:	4620      	mov	r0, r4
    c7d0:	f002 fd20 	bl	f214 <assert_post_action>
    c7d4:	e7db      	b.n	c78e <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c7d6:	4c0a      	ldr	r4, [pc, #40]	; (c800 <z_thread_abort+0x120>)
    c7d8:	23b9      	movs	r3, #185	; 0xb9
    c7da:	4622      	mov	r2, r4
    c7dc:	490c      	ldr	r1, [pc, #48]	; (c810 <z_thread_abort+0x130>)
    c7de:	480a      	ldr	r0, [pc, #40]	; (c808 <z_thread_abort+0x128>)
    c7e0:	f002 fd1f 	bl	f222 <assert_print>
    c7e4:	4904      	ldr	r1, [pc, #16]	; (c7f8 <z_thread_abort+0x118>)
    c7e6:	480b      	ldr	r0, [pc, #44]	; (c814 <z_thread_abort+0x134>)
    c7e8:	f002 fd1b 	bl	f222 <assert_print>
    c7ec:	21b9      	movs	r1, #185	; 0xb9
    c7ee:	4620      	mov	r0, r4
    c7f0:	f002 fd10 	bl	f214 <assert_post_action>
    c7f4:	e795      	b.n	c722 <z_thread_abort+0x42>
    c7f6:	bf00      	nop
    c7f8:	2000d51c 	.word	0x2000d51c
    c7fc:	2000d4e0 	.word	0x2000d4e0
    c800:	00011854 	.word	0x00011854
    c804:	000118b4 	.word	0x000118b4
    c808:	000116a8 	.word	0x000116a8
    c80c:	000118cc 	.word	0x000118cc
    c810:	00011884 	.word	0x00011884
    c814:	0001189c 	.word	0x0001189c
    c818:	000131ac 	.word	0x000131ac
    c81c:	00011d64 	.word	0x00011d64
    c820:	000132a8 	.word	0x000132a8

0000c824 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    c824:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    c826:	4806      	ldr	r0, [pc, #24]	; (c840 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    c828:	4a06      	ldr	r2, [pc, #24]	; (c844 <z_data_copy+0x20>)
    c82a:	1a12      	subs	r2, r2, r0
    c82c:	4906      	ldr	r1, [pc, #24]	; (c848 <z_data_copy+0x24>)
    c82e:	f003 fe5b 	bl	104e8 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    c832:	4a06      	ldr	r2, [pc, #24]	; (c84c <z_data_copy+0x28>)
    c834:	4906      	ldr	r1, [pc, #24]	; (c850 <z_data_copy+0x2c>)
    c836:	4807      	ldr	r0, [pc, #28]	; (c854 <z_data_copy+0x30>)
    c838:	f003 fe56 	bl	104e8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    c83c:	bd08      	pop	{r3, pc}
    c83e:	bf00      	nop
    c840:	20000000 	.word	0x20000000
    c844:	20004284 	.word	0x20004284
    c848:	00013704 	.word	0x00013704
    c84c:	00000000 	.word	0x00000000
    c850:	00013704 	.word	0x00013704
    c854:	20000000 	.word	0x20000000

0000c858 <first>:
	return list->head == list;
    c858:	4b03      	ldr	r3, [pc, #12]	; (c868 <first+0x10>)
    c85a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c85c:	4298      	cmp	r0, r3
    c85e:	d000      	beq.n	c862 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    c860:	4770      	bx	lr
    c862:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    c864:	e7fc      	b.n	c860 <first+0x8>
    c866:	bf00      	nop
    c868:	200040fc 	.word	0x200040fc

0000c86c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    c86c:	b130      	cbz	r0, c87c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    c86e:	4a04      	ldr	r2, [pc, #16]	; (c880 <next+0x14>)
    c870:	6852      	ldr	r2, [r2, #4]
    c872:	4290      	cmp	r0, r2
    c874:	d001      	beq.n	c87a <next+0xe>
    c876:	6800      	ldr	r0, [r0, #0]
    c878:	4770      	bx	lr
    c87a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    c87c:	4770      	bx	lr
    c87e:	bf00      	nop
    c880:	200040fc 	.word	0x200040fc

0000c884 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    c884:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    c886:	4b04      	ldr	r3, [pc, #16]	; (c898 <elapsed+0x14>)
    c888:	681b      	ldr	r3, [r3, #0]
    c88a:	b10b      	cbz	r3, c890 <elapsed+0xc>
    c88c:	2000      	movs	r0, #0
}
    c88e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    c890:	f7fb fc20 	bl	80d4 <sys_clock_elapsed>
    c894:	e7fb      	b.n	c88e <elapsed+0xa>
    c896:	bf00      	nop
    c898:	2000d528 	.word	0x2000d528

0000c89c <next_timeout>:

static int32_t next_timeout(void)
{
    c89c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    c89e:	f7ff ffdb 	bl	c858 <first>
    c8a2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    c8a4:	f7ff ffee 	bl	c884 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    c8a8:	b17c      	cbz	r4, c8ca <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    c8aa:	6923      	ldr	r3, [r4, #16]
    c8ac:	6962      	ldr	r2, [r4, #20]
    c8ae:	1a1b      	subs	r3, r3, r0
    c8b0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    c8b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    c8b8:	f170 0200 	sbcs.w	r2, r0, #0
    c8bc:	da08      	bge.n	c8d0 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    c8be:	2800      	cmp	r0, #0
    c8c0:	db01      	blt.n	c8c6 <next_timeout+0x2a>
    c8c2:	4618      	mov	r0, r3
    c8c4:	e006      	b.n	c8d4 <next_timeout+0x38>
    c8c6:	2300      	movs	r3, #0
    c8c8:	e7fb      	b.n	c8c2 <next_timeout+0x26>
		ret = MAX_WAIT;
    c8ca:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    c8ce:	e001      	b.n	c8d4 <next_timeout+0x38>
    c8d0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    c8d4:	4b03      	ldr	r3, [pc, #12]	; (c8e4 <next_timeout+0x48>)
    c8d6:	691b      	ldr	r3, [r3, #16]
    c8d8:	b113      	cbz	r3, c8e0 <next_timeout+0x44>
    c8da:	4283      	cmp	r3, r0
    c8dc:	da00      	bge.n	c8e0 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    c8de:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    c8e0:	bd10      	pop	{r4, pc}
    c8e2:	bf00      	nop
    c8e4:	2000d4e0 	.word	0x2000d4e0

0000c8e8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c8e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    c8ec:	bf08      	it	eq
    c8ee:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    c8f2:	f000 80c1 	beq.w	ca78 <z_add_timeout+0x190>
{
    c8f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c8fa:	4604      	mov	r4, r0
    c8fc:	460f      	mov	r7, r1
    c8fe:	4692      	mov	sl, r2
    c900:	461d      	mov	r5, r3
	return node->next != NULL;
    c902:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    c904:	b173      	cbz	r3, c924 <z_add_timeout+0x3c>
    c906:	f8df 8174 	ldr.w	r8, [pc, #372]	; ca7c <z_add_timeout+0x194>
    c90a:	2363      	movs	r3, #99	; 0x63
    c90c:	4642      	mov	r2, r8
    c90e:	495c      	ldr	r1, [pc, #368]	; (ca80 <z_add_timeout+0x198>)
    c910:	485c      	ldr	r0, [pc, #368]	; (ca84 <z_add_timeout+0x19c>)
    c912:	f002 fc86 	bl	f222 <assert_print>
    c916:	485c      	ldr	r0, [pc, #368]	; (ca88 <z_add_timeout+0x1a0>)
    c918:	f002 fc83 	bl	f222 <assert_print>
    c91c:	2163      	movs	r1, #99	; 0x63
    c91e:	4640      	mov	r0, r8
    c920:	f002 fc78 	bl	f214 <assert_post_action>
	to->fn = fn;
    c924:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    c926:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    c92a:	f04f 0320 	mov.w	r3, #32
    c92e:	f3ef 8711 	mrs	r7, BASEPRI
    c932:	f383 8812 	msr	BASEPRI_MAX, r3
    c936:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c93a:	4854      	ldr	r0, [pc, #336]	; (ca8c <z_add_timeout+0x1a4>)
    c93c:	f7fd ff6a 	bl	a814 <z_spin_lock_valid>
    c940:	b118      	cbz	r0, c94a <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    c942:	4852      	ldr	r0, [pc, #328]	; (ca8c <z_add_timeout+0x1a4>)
    c944:	f7fd ff86 	bl	a854 <z_spin_lock_set_owner>
	return k;
    c948:	e038      	b.n	c9bc <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c94a:	f8df 9144 	ldr.w	r9, [pc, #324]	; ca90 <z_add_timeout+0x1a8>
    c94e:	238e      	movs	r3, #142	; 0x8e
    c950:	464a      	mov	r2, r9
    c952:	4950      	ldr	r1, [pc, #320]	; (ca94 <z_add_timeout+0x1ac>)
    c954:	484b      	ldr	r0, [pc, #300]	; (ca84 <z_add_timeout+0x19c>)
    c956:	f002 fc64 	bl	f222 <assert_print>
    c95a:	494c      	ldr	r1, [pc, #304]	; (ca8c <z_add_timeout+0x1a4>)
    c95c:	484e      	ldr	r0, [pc, #312]	; (ca98 <z_add_timeout+0x1b0>)
    c95e:	f002 fc60 	bl	f222 <assert_print>
    c962:	218e      	movs	r1, #142	; 0x8e
    c964:	4648      	mov	r0, r9
    c966:	f002 fc55 	bl	f214 <assert_post_action>
    c96a:	e7ea      	b.n	c942 <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    c96c:	f11a 0801 	adds.w	r8, sl, #1
    c970:	f145 0900 	adc.w	r9, r5, #0
    c974:	f7ff ff86 	bl	c884 <elapsed>
    c978:	eb18 0300 	adds.w	r3, r8, r0
    c97c:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    c980:	6123      	str	r3, [r4, #16]
    c982:	6160      	str	r0, [r4, #20]
    c984:	e03d      	b.n	ca02 <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    c986:	1a51      	subs	r1, r2, r1
    c988:	eb66 0303 	sbc.w	r3, r6, r3
    c98c:	6101      	str	r1, [r0, #16]
    c98e:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    c990:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    c992:	6063      	str	r3, [r4, #4]
	node->next = successor;
    c994:	6020      	str	r0, [r4, #0]
	prev->next = node;
    c996:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    c998:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    c99a:	2800      	cmp	r0, #0
    c99c:	d045      	beq.n	ca2a <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    c99e:	f7ff ff5b 	bl	c858 <first>
    c9a2:	4284      	cmp	r4, r0
    c9a4:	d048      	beq.n	ca38 <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c9a6:	4839      	ldr	r0, [pc, #228]	; (ca8c <z_add_timeout+0x1a4>)
    c9a8:	f7fd ff44 	bl	a834 <z_spin_unlock_valid>
    c9ac:	2800      	cmp	r0, #0
    c9ae:	d050      	beq.n	ca52 <z_add_timeout+0x16a>
	__asm__ volatile(
    c9b0:	f387 8811 	msr	BASEPRI, r7
    c9b4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    c9b8:	f04f 0801 	mov.w	r8, #1
    c9bc:	f1b8 0f00 	cmp.w	r8, #0
    c9c0:	d158      	bne.n	ca74 <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    c9c2:	4653      	mov	r3, sl
    c9c4:	f06f 0101 	mvn.w	r1, #1
    c9c8:	ebb1 010a 	subs.w	r1, r1, sl
    c9cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c9d0:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    c9d4:	2a00      	cmp	r2, #0
    c9d6:	dbc9      	blt.n	c96c <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    c9d8:	4a30      	ldr	r2, [pc, #192]	; (ca9c <z_add_timeout+0x1b4>)
    c9da:	6811      	ldr	r1, [r2, #0]
    c9dc:	6852      	ldr	r2, [r2, #4]
    c9de:	185b      	adds	r3, r3, r1
    c9e0:	eb42 0205 	adc.w	r2, r2, r5
    c9e4:	f06f 0101 	mvn.w	r1, #1
    c9e8:	1acb      	subs	r3, r1, r3
    c9ea:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    c9ee:	4618      	mov	r0, r3
    c9f0:	4611      	mov	r1, r2
    c9f2:	2b01      	cmp	r3, #1
    c9f4:	f172 0300 	sbcs.w	r3, r2, #0
    c9f8:	da01      	bge.n	c9fe <z_add_timeout+0x116>
    c9fa:	2001      	movs	r0, #1
    c9fc:	2100      	movs	r1, #0
    c9fe:	6120      	str	r0, [r4, #16]
    ca00:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    ca02:	f7ff ff29 	bl	c858 <first>
    ca06:	2800      	cmp	r0, #0
    ca08:	d0c7      	beq.n	c99a <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    ca0a:	6902      	ldr	r2, [r0, #16]
    ca0c:	6946      	ldr	r6, [r0, #20]
    ca0e:	6921      	ldr	r1, [r4, #16]
    ca10:	6963      	ldr	r3, [r4, #20]
    ca12:	4291      	cmp	r1, r2
    ca14:	eb73 0c06 	sbcs.w	ip, r3, r6
    ca18:	dbb5      	blt.n	c986 <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    ca1a:	1a89      	subs	r1, r1, r2
    ca1c:	eb63 0306 	sbc.w	r3, r3, r6
    ca20:	6121      	str	r1, [r4, #16]
    ca22:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    ca24:	f7ff ff22 	bl	c86c <next>
    ca28:	e7ed      	b.n	ca06 <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    ca2a:	4b1d      	ldr	r3, [pc, #116]	; (caa0 <z_add_timeout+0x1b8>)
    ca2c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    ca2e:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    ca30:	6062      	str	r2, [r4, #4]
	tail->next = node;
    ca32:	6014      	str	r4, [r2, #0]
	list->tail = node;
    ca34:	605c      	str	r4, [r3, #4]
}
    ca36:	e7b2      	b.n	c99e <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    ca38:	f7ff ff30 	bl	c89c <next_timeout>

			if (next_time == 0 ||
    ca3c:	4603      	mov	r3, r0
    ca3e:	b118      	cbz	r0, ca48 <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    ca40:	4a18      	ldr	r2, [pc, #96]	; (caa4 <z_add_timeout+0x1bc>)
    ca42:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    ca44:	4282      	cmp	r2, r0
    ca46:	d0ae      	beq.n	c9a6 <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    ca48:	2100      	movs	r1, #0
    ca4a:	4618      	mov	r0, r3
    ca4c:	f7fb fb10 	bl	8070 <sys_clock_set_timeout>
    ca50:	e7a9      	b.n	c9a6 <z_add_timeout+0xbe>
    ca52:	f8df 803c 	ldr.w	r8, [pc, #60]	; ca90 <z_add_timeout+0x1a8>
    ca56:	23b9      	movs	r3, #185	; 0xb9
    ca58:	4642      	mov	r2, r8
    ca5a:	4913      	ldr	r1, [pc, #76]	; (caa8 <z_add_timeout+0x1c0>)
    ca5c:	4809      	ldr	r0, [pc, #36]	; (ca84 <z_add_timeout+0x19c>)
    ca5e:	f002 fbe0 	bl	f222 <assert_print>
    ca62:	490a      	ldr	r1, [pc, #40]	; (ca8c <z_add_timeout+0x1a4>)
    ca64:	4811      	ldr	r0, [pc, #68]	; (caac <z_add_timeout+0x1c4>)
    ca66:	f002 fbdc 	bl	f222 <assert_print>
    ca6a:	21b9      	movs	r1, #185	; 0xb9
    ca6c:	4640      	mov	r0, r8
    ca6e:	f002 fbd1 	bl	f214 <assert_post_action>
    ca72:	e79d      	b.n	c9b0 <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    ca74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ca78:	4770      	bx	lr
    ca7a:	bf00      	nop
    ca7c:	000132cc 	.word	0x000132cc
    ca80:	000132f0 	.word	0x000132f0
    ca84:	000116a8 	.word	0x000116a8
    ca88:	00013104 	.word	0x00013104
    ca8c:	2000d52c 	.word	0x2000d52c
    ca90:	00011854 	.word	0x00011854
    ca94:	000118b4 	.word	0x000118b4
    ca98:	000118cc 	.word	0x000118cc
    ca9c:	20004928 	.word	0x20004928
    caa0:	200040fc 	.word	0x200040fc
    caa4:	2000d4e0 	.word	0x2000d4e0
    caa8:	00011884 	.word	0x00011884
    caac:	0001189c 	.word	0x0001189c

0000cab0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    cab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cab4:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    cab6:	2400      	movs	r4, #0
	__asm__ volatile(
    cab8:	f04f 0320 	mov.w	r3, #32
    cabc:	f3ef 8711 	mrs	r7, BASEPRI
    cac0:	f383 8812 	msr	BASEPRI_MAX, r3
    cac4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cac8:	481f      	ldr	r0, [pc, #124]	; (cb48 <z_abort_timeout+0x98>)
    caca:	f7fd fea3 	bl	a814 <z_spin_lock_valid>
    cace:	b128      	cbz	r0, cadc <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    cad0:	481d      	ldr	r0, [pc, #116]	; (cb48 <z_abort_timeout+0x98>)
    cad2:	f7fd febf 	bl	a854 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    cad6:	f06f 0815 	mvn.w	r8, #21
	return k;
    cada:	e018      	b.n	cb0e <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cadc:	4e1b      	ldr	r6, [pc, #108]	; (cb4c <z_abort_timeout+0x9c>)
    cade:	238e      	movs	r3, #142	; 0x8e
    cae0:	4632      	mov	r2, r6
    cae2:	491b      	ldr	r1, [pc, #108]	; (cb50 <z_abort_timeout+0xa0>)
    cae4:	481b      	ldr	r0, [pc, #108]	; (cb54 <z_abort_timeout+0xa4>)
    cae6:	f002 fb9c 	bl	f222 <assert_print>
    caea:	4917      	ldr	r1, [pc, #92]	; (cb48 <z_abort_timeout+0x98>)
    caec:	481a      	ldr	r0, [pc, #104]	; (cb58 <z_abort_timeout+0xa8>)
    caee:	f002 fb98 	bl	f222 <assert_print>
    caf2:	218e      	movs	r1, #142	; 0x8e
    caf4:	4630      	mov	r0, r6
    caf6:	f002 fb8d 	bl	f214 <assert_post_action>
    cafa:	e7e9      	b.n	cad0 <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cafc:	4812      	ldr	r0, [pc, #72]	; (cb48 <z_abort_timeout+0x98>)
    cafe:	f7fd fe99 	bl	a834 <z_spin_unlock_valid>
    cb02:	b170      	cbz	r0, cb22 <z_abort_timeout+0x72>
	__asm__ volatile(
    cb04:	f387 8811 	msr	BASEPRI, r7
    cb08:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    cb0c:	2401      	movs	r4, #1
    cb0e:	4626      	mov	r6, r4
    cb10:	b9bc      	cbnz	r4, cb42 <z_abort_timeout+0x92>
	return node->next != NULL;
    cb12:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    cb14:	2b00      	cmp	r3, #0
    cb16:	d0f1      	beq.n	cafc <z_abort_timeout+0x4c>
			remove_timeout(to);
    cb18:	4628      	mov	r0, r5
    cb1a:	f003 fd96 	bl	1064a <remove_timeout>
			ret = 0;
    cb1e:	46b0      	mov	r8, r6
    cb20:	e7ec      	b.n	cafc <z_abort_timeout+0x4c>
    cb22:	4c0a      	ldr	r4, [pc, #40]	; (cb4c <z_abort_timeout+0x9c>)
    cb24:	23b9      	movs	r3, #185	; 0xb9
    cb26:	4622      	mov	r2, r4
    cb28:	490c      	ldr	r1, [pc, #48]	; (cb5c <z_abort_timeout+0xac>)
    cb2a:	480a      	ldr	r0, [pc, #40]	; (cb54 <z_abort_timeout+0xa4>)
    cb2c:	f002 fb79 	bl	f222 <assert_print>
    cb30:	4905      	ldr	r1, [pc, #20]	; (cb48 <z_abort_timeout+0x98>)
    cb32:	480b      	ldr	r0, [pc, #44]	; (cb60 <z_abort_timeout+0xb0>)
    cb34:	f002 fb75 	bl	f222 <assert_print>
    cb38:	21b9      	movs	r1, #185	; 0xb9
    cb3a:	4620      	mov	r0, r4
    cb3c:	f002 fb6a 	bl	f214 <assert_post_action>
    cb40:	e7e0      	b.n	cb04 <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    cb42:	4640      	mov	r0, r8
    cb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb48:	2000d52c 	.word	0x2000d52c
    cb4c:	00011854 	.word	0x00011854
    cb50:	000118b4 	.word	0x000118b4
    cb54:	000116a8 	.word	0x000116a8
    cb58:	000118cc 	.word	0x000118cc
    cb5c:	00011884 	.word	0x00011884
    cb60:	0001189c 	.word	0x0001189c

0000cb64 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    cb64:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    cb66:	2500      	movs	r5, #0
	__asm__ volatile(
    cb68:	f04f 0320 	mov.w	r3, #32
    cb6c:	f3ef 8611 	mrs	r6, BASEPRI
    cb70:	f383 8812 	msr	BASEPRI_MAX, r3
    cb74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cb78:	481c      	ldr	r0, [pc, #112]	; (cbec <z_get_next_timeout_expiry+0x88>)
    cb7a:	f7fd fe4b 	bl	a814 <z_spin_lock_valid>
    cb7e:	b128      	cbz	r0, cb8c <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    cb80:	481a      	ldr	r0, [pc, #104]	; (cbec <z_get_next_timeout_expiry+0x88>)
    cb82:	f7fd fe67 	bl	a854 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    cb86:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    cb8a:	e014      	b.n	cbb6 <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cb8c:	4c18      	ldr	r4, [pc, #96]	; (cbf0 <z_get_next_timeout_expiry+0x8c>)
    cb8e:	238e      	movs	r3, #142	; 0x8e
    cb90:	4622      	mov	r2, r4
    cb92:	4918      	ldr	r1, [pc, #96]	; (cbf4 <z_get_next_timeout_expiry+0x90>)
    cb94:	4818      	ldr	r0, [pc, #96]	; (cbf8 <z_get_next_timeout_expiry+0x94>)
    cb96:	f002 fb44 	bl	f222 <assert_print>
    cb9a:	4914      	ldr	r1, [pc, #80]	; (cbec <z_get_next_timeout_expiry+0x88>)
    cb9c:	4817      	ldr	r0, [pc, #92]	; (cbfc <z_get_next_timeout_expiry+0x98>)
    cb9e:	f002 fb40 	bl	f222 <assert_print>
    cba2:	218e      	movs	r1, #142	; 0x8e
    cba4:	4620      	mov	r0, r4
    cba6:	f002 fb35 	bl	f214 <assert_post_action>
    cbaa:	e7e9      	b.n	cb80 <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    cbac:	f386 8811 	msr	BASEPRI, r6
    cbb0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    cbb4:	2501      	movs	r5, #1
    cbb6:	b9bd      	cbnz	r5, cbe8 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    cbb8:	f7ff fe70 	bl	c89c <next_timeout>
    cbbc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cbbe:	480b      	ldr	r0, [pc, #44]	; (cbec <z_get_next_timeout_expiry+0x88>)
    cbc0:	f7fd fe38 	bl	a834 <z_spin_unlock_valid>
    cbc4:	2800      	cmp	r0, #0
    cbc6:	d1f1      	bne.n	cbac <z_get_next_timeout_expiry+0x48>
    cbc8:	4d09      	ldr	r5, [pc, #36]	; (cbf0 <z_get_next_timeout_expiry+0x8c>)
    cbca:	23b9      	movs	r3, #185	; 0xb9
    cbcc:	462a      	mov	r2, r5
    cbce:	490c      	ldr	r1, [pc, #48]	; (cc00 <z_get_next_timeout_expiry+0x9c>)
    cbd0:	4809      	ldr	r0, [pc, #36]	; (cbf8 <z_get_next_timeout_expiry+0x94>)
    cbd2:	f002 fb26 	bl	f222 <assert_print>
    cbd6:	4905      	ldr	r1, [pc, #20]	; (cbec <z_get_next_timeout_expiry+0x88>)
    cbd8:	480a      	ldr	r0, [pc, #40]	; (cc04 <z_get_next_timeout_expiry+0xa0>)
    cbda:	f002 fb22 	bl	f222 <assert_print>
    cbde:	21b9      	movs	r1, #185	; 0xb9
    cbe0:	4628      	mov	r0, r5
    cbe2:	f002 fb17 	bl	f214 <assert_post_action>
    cbe6:	e7e1      	b.n	cbac <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    cbe8:	4620      	mov	r0, r4
    cbea:	bd70      	pop	{r4, r5, r6, pc}
    cbec:	2000d52c 	.word	0x2000d52c
    cbf0:	00011854 	.word	0x00011854
    cbf4:	000118b4 	.word	0x000118b4
    cbf8:	000116a8 	.word	0x000116a8
    cbfc:	000118cc 	.word	0x000118cc
    cc00:	00011884 	.word	0x00011884
    cc04:	0001189c 	.word	0x0001189c

0000cc08 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    cc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc0c:	4606      	mov	r6, r0
    cc0e:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    cc10:	2500      	movs	r5, #0
	__asm__ volatile(
    cc12:	f04f 0320 	mov.w	r3, #32
    cc16:	f3ef 8711 	mrs	r7, BASEPRI
    cc1a:	f383 8812 	msr	BASEPRI_MAX, r3
    cc1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cc22:	4825      	ldr	r0, [pc, #148]	; (ccb8 <z_set_timeout_expiry+0xb0>)
    cc24:	f7fd fdf6 	bl	a814 <z_spin_lock_valid>
    cc28:	b118      	cbz	r0, cc32 <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    cc2a:	4823      	ldr	r0, [pc, #140]	; (ccb8 <z_set_timeout_expiry+0xb0>)
    cc2c:	f7fd fe12 	bl	a854 <z_spin_lock_set_owner>
	return k;
    cc30:	e01e      	b.n	cc70 <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cc32:	4c22      	ldr	r4, [pc, #136]	; (ccbc <z_set_timeout_expiry+0xb4>)
    cc34:	238e      	movs	r3, #142	; 0x8e
    cc36:	4622      	mov	r2, r4
    cc38:	4921      	ldr	r1, [pc, #132]	; (ccc0 <z_set_timeout_expiry+0xb8>)
    cc3a:	4822      	ldr	r0, [pc, #136]	; (ccc4 <z_set_timeout_expiry+0xbc>)
    cc3c:	f002 faf1 	bl	f222 <assert_print>
    cc40:	491d      	ldr	r1, [pc, #116]	; (ccb8 <z_set_timeout_expiry+0xb0>)
    cc42:	4821      	ldr	r0, [pc, #132]	; (ccc8 <z_set_timeout_expiry+0xc0>)
    cc44:	f002 faed 	bl	f222 <assert_print>
    cc48:	218e      	movs	r1, #142	; 0x8e
    cc4a:	4620      	mov	r0, r4
    cc4c:	f002 fae2 	bl	f214 <assert_post_action>
    cc50:	e7eb      	b.n	cc2a <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    cc52:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    cc54:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    cc58:	2801      	cmp	r0, #1
    cc5a:	dd00      	ble.n	cc5e <z_set_timeout_expiry+0x56>
    cc5c:	b99c      	cbnz	r4, cc86 <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cc5e:	4816      	ldr	r0, [pc, #88]	; (ccb8 <z_set_timeout_expiry+0xb0>)
    cc60:	f7fd fde8 	bl	a834 <z_spin_unlock_valid>
    cc64:	b1b0      	cbz	r0, cc94 <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    cc66:	f387 8811 	msr	BASEPRI, r7
    cc6a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    cc6e:	2501      	movs	r5, #1
    cc70:	462c      	mov	r4, r5
    cc72:	b9fd      	cbnz	r5, ccb4 <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    cc74:	f7ff fe12 	bl	c89c <next_timeout>
			      || (ticks <= next_to);
    cc78:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    cc7c:	d0e9      	beq.n	cc52 <z_set_timeout_expiry+0x4a>
    cc7e:	42b0      	cmp	r0, r6
    cc80:	dbe8      	blt.n	cc54 <z_set_timeout_expiry+0x4c>
    cc82:	2401      	movs	r4, #1
    cc84:	e7e6      	b.n	cc54 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    cc86:	4641      	mov	r1, r8
    cc88:	42b0      	cmp	r0, r6
    cc8a:	bfa8      	it	ge
    cc8c:	4630      	movge	r0, r6
    cc8e:	f7fb f9ef 	bl	8070 <sys_clock_set_timeout>
    cc92:	e7e4      	b.n	cc5e <z_set_timeout_expiry+0x56>
    cc94:	4c09      	ldr	r4, [pc, #36]	; (ccbc <z_set_timeout_expiry+0xb4>)
    cc96:	23b9      	movs	r3, #185	; 0xb9
    cc98:	4622      	mov	r2, r4
    cc9a:	490c      	ldr	r1, [pc, #48]	; (cccc <z_set_timeout_expiry+0xc4>)
    cc9c:	4809      	ldr	r0, [pc, #36]	; (ccc4 <z_set_timeout_expiry+0xbc>)
    cc9e:	f002 fac0 	bl	f222 <assert_print>
    cca2:	4905      	ldr	r1, [pc, #20]	; (ccb8 <z_set_timeout_expiry+0xb0>)
    cca4:	480a      	ldr	r0, [pc, #40]	; (ccd0 <z_set_timeout_expiry+0xc8>)
    cca6:	f002 fabc 	bl	f222 <assert_print>
    ccaa:	21b9      	movs	r1, #185	; 0xb9
    ccac:	4620      	mov	r0, r4
    ccae:	f002 fab1 	bl	f214 <assert_post_action>
    ccb2:	e7d8      	b.n	cc66 <z_set_timeout_expiry+0x5e>
		}
	}
}
    ccb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ccb8:	2000d52c 	.word	0x2000d52c
    ccbc:	00011854 	.word	0x00011854
    ccc0:	000118b4 	.word	0x000118b4
    ccc4:	000116a8 	.word	0x000116a8
    ccc8:	000118cc 	.word	0x000118cc
    cccc:	00011884 	.word	0x00011884
    ccd0:	0001189c 	.word	0x0001189c

0000ccd4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    ccd4:	b570      	push	{r4, r5, r6, lr}
    ccd6:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    ccd8:	f7fe fd5e 	bl	b798 <z_time_slice>
	__asm__ volatile(
    ccdc:	f04f 0320 	mov.w	r3, #32
    cce0:	f3ef 8511 	mrs	r5, BASEPRI
    cce4:	f383 8812 	msr	BASEPRI_MAX, r3
    cce8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ccec:	4854      	ldr	r0, [pc, #336]	; (ce40 <sys_clock_announce+0x16c>)
    ccee:	f7fd fd91 	bl	a814 <z_spin_lock_valid>
    ccf2:	b128      	cbz	r0, cd00 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    ccf4:	4852      	ldr	r0, [pc, #328]	; (ce40 <sys_clock_announce+0x16c>)
    ccf6:	f7fd fdad 	bl	a854 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    ccfa:	4b52      	ldr	r3, [pc, #328]	; (ce44 <sys_clock_announce+0x170>)
    ccfc:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    ccfe:	e022      	b.n	cd46 <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cd00:	4e51      	ldr	r6, [pc, #324]	; (ce48 <sys_clock_announce+0x174>)
    cd02:	238e      	movs	r3, #142	; 0x8e
    cd04:	4632      	mov	r2, r6
    cd06:	4951      	ldr	r1, [pc, #324]	; (ce4c <sys_clock_announce+0x178>)
    cd08:	4851      	ldr	r0, [pc, #324]	; (ce50 <sys_clock_announce+0x17c>)
    cd0a:	f002 fa8a 	bl	f222 <assert_print>
    cd0e:	494c      	ldr	r1, [pc, #304]	; (ce40 <sys_clock_announce+0x16c>)
    cd10:	4850      	ldr	r0, [pc, #320]	; (ce54 <sys_clock_announce+0x180>)
    cd12:	f002 fa86 	bl	f222 <assert_print>
    cd16:	218e      	movs	r1, #142	; 0x8e
    cd18:	4630      	mov	r0, r6
    cd1a:	f002 fa7b 	bl	f214 <assert_post_action>
    cd1e:	e7e9      	b.n	ccf4 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cd20:	4e49      	ldr	r6, [pc, #292]	; (ce48 <sys_clock_announce+0x174>)
    cd22:	23b9      	movs	r3, #185	; 0xb9
    cd24:	4632      	mov	r2, r6
    cd26:	494c      	ldr	r1, [pc, #304]	; (ce58 <sys_clock_announce+0x184>)
    cd28:	4849      	ldr	r0, [pc, #292]	; (ce50 <sys_clock_announce+0x17c>)
    cd2a:	f002 fa7a 	bl	f222 <assert_print>
    cd2e:	4944      	ldr	r1, [pc, #272]	; (ce40 <sys_clock_announce+0x16c>)
    cd30:	484a      	ldr	r0, [pc, #296]	; (ce5c <sys_clock_announce+0x188>)
    cd32:	f002 fa76 	bl	f222 <assert_print>
    cd36:	21b9      	movs	r1, #185	; 0xb9
    cd38:	4630      	mov	r0, r6
    cd3a:	f002 fa6b 	bl	f214 <assert_post_action>
    cd3e:	e027      	b.n	cd90 <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    cd40:	483f      	ldr	r0, [pc, #252]	; (ce40 <sys_clock_announce+0x16c>)
    cd42:	f7fd fd87 	bl	a854 <z_spin_lock_set_owner>
    cd46:	f7ff fd87 	bl	c858 <first>
    cd4a:	4604      	mov	r4, r0
    cd4c:	2800      	cmp	r0, #0
    cd4e:	d043      	beq.n	cdd8 <sys_clock_announce+0x104>
    cd50:	6902      	ldr	r2, [r0, #16]
    cd52:	6941      	ldr	r1, [r0, #20]
    cd54:	4b3b      	ldr	r3, [pc, #236]	; (ce44 <sys_clock_announce+0x170>)
    cd56:	681b      	ldr	r3, [r3, #0]
    cd58:	17d8      	asrs	r0, r3, #31
    cd5a:	4293      	cmp	r3, r2
    cd5c:	eb70 0101 	sbcs.w	r1, r0, r1
    cd60:	db3a      	blt.n	cdd8 <sys_clock_announce+0x104>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    cd62:	483f      	ldr	r0, [pc, #252]	; (ce60 <sys_clock_announce+0x18c>)
    cd64:	6801      	ldr	r1, [r0, #0]
    cd66:	6846      	ldr	r6, [r0, #4]
    cd68:	1889      	adds	r1, r1, r2
    cd6a:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    cd6e:	6001      	str	r1, [r0, #0]
    cd70:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    cd72:	1a9b      	subs	r3, r3, r2
    cd74:	4a33      	ldr	r2, [pc, #204]	; (ce44 <sys_clock_announce+0x170>)
    cd76:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    cd78:	2200      	movs	r2, #0
    cd7a:	2300      	movs	r3, #0
    cd7c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    cd80:	4620      	mov	r0, r4
    cd82:	f003 fc62 	bl	1064a <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cd86:	482e      	ldr	r0, [pc, #184]	; (ce40 <sys_clock_announce+0x16c>)
    cd88:	f7fd fd54 	bl	a834 <z_spin_unlock_valid>
    cd8c:	2800      	cmp	r0, #0
    cd8e:	d0c7      	beq.n	cd20 <sys_clock_announce+0x4c>
	__asm__ volatile(
    cd90:	f385 8811 	msr	BASEPRI, r5
    cd94:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    cd98:	68a3      	ldr	r3, [r4, #8]
    cd9a:	4620      	mov	r0, r4
    cd9c:	4798      	blx	r3
	__asm__ volatile(
    cd9e:	f04f 0320 	mov.w	r3, #32
    cda2:	f3ef 8511 	mrs	r5, BASEPRI
    cda6:	f383 8812 	msr	BASEPRI_MAX, r3
    cdaa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cdae:	4824      	ldr	r0, [pc, #144]	; (ce40 <sys_clock_announce+0x16c>)
    cdb0:	f7fd fd30 	bl	a814 <z_spin_lock_valid>
    cdb4:	2800      	cmp	r0, #0
    cdb6:	d1c3      	bne.n	cd40 <sys_clock_announce+0x6c>
    cdb8:	4c23      	ldr	r4, [pc, #140]	; (ce48 <sys_clock_announce+0x174>)
    cdba:	238e      	movs	r3, #142	; 0x8e
    cdbc:	4622      	mov	r2, r4
    cdbe:	4923      	ldr	r1, [pc, #140]	; (ce4c <sys_clock_announce+0x178>)
    cdc0:	4823      	ldr	r0, [pc, #140]	; (ce50 <sys_clock_announce+0x17c>)
    cdc2:	f002 fa2e 	bl	f222 <assert_print>
    cdc6:	491e      	ldr	r1, [pc, #120]	; (ce40 <sys_clock_announce+0x16c>)
    cdc8:	4822      	ldr	r0, [pc, #136]	; (ce54 <sys_clock_announce+0x180>)
    cdca:	f002 fa2a 	bl	f222 <assert_print>
    cdce:	218e      	movs	r1, #142	; 0x8e
    cdd0:	4620      	mov	r0, r4
    cdd2:	f002 fa1f 	bl	f214 <assert_post_action>
    cdd6:	e7b3      	b.n	cd40 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    cdd8:	b144      	cbz	r4, cdec <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    cdda:	4b1a      	ldr	r3, [pc, #104]	; (ce44 <sys_clock_announce+0x170>)
    cddc:	6819      	ldr	r1, [r3, #0]
    cdde:	6923      	ldr	r3, [r4, #16]
    cde0:	6962      	ldr	r2, [r4, #20]
    cde2:	1a5b      	subs	r3, r3, r1
    cde4:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    cde8:	6123      	str	r3, [r4, #16]
    cdea:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    cdec:	4a1c      	ldr	r2, [pc, #112]	; (ce60 <sys_clock_announce+0x18c>)
    cdee:	4e15      	ldr	r6, [pc, #84]	; (ce44 <sys_clock_announce+0x170>)
    cdf0:	6830      	ldr	r0, [r6, #0]
    cdf2:	6813      	ldr	r3, [r2, #0]
    cdf4:	6851      	ldr	r1, [r2, #4]
    cdf6:	181b      	adds	r3, r3, r0
    cdf8:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    cdfc:	6013      	str	r3, [r2, #0]
    cdfe:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    ce00:	2400      	movs	r4, #0
    ce02:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    ce04:	f7ff fd4a 	bl	c89c <next_timeout>
    ce08:	4621      	mov	r1, r4
    ce0a:	f7fb f931 	bl	8070 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ce0e:	480c      	ldr	r0, [pc, #48]	; (ce40 <sys_clock_announce+0x16c>)
    ce10:	f7fd fd10 	bl	a834 <z_spin_unlock_valid>
    ce14:	b120      	cbz	r0, ce20 <sys_clock_announce+0x14c>
	__asm__ volatile(
    ce16:	f385 8811 	msr	BASEPRI, r5
    ce1a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    ce1e:	bd70      	pop	{r4, r5, r6, pc}
    ce20:	4c09      	ldr	r4, [pc, #36]	; (ce48 <sys_clock_announce+0x174>)
    ce22:	23b9      	movs	r3, #185	; 0xb9
    ce24:	4622      	mov	r2, r4
    ce26:	490c      	ldr	r1, [pc, #48]	; (ce58 <sys_clock_announce+0x184>)
    ce28:	4809      	ldr	r0, [pc, #36]	; (ce50 <sys_clock_announce+0x17c>)
    ce2a:	f002 f9fa 	bl	f222 <assert_print>
    ce2e:	4904      	ldr	r1, [pc, #16]	; (ce40 <sys_clock_announce+0x16c>)
    ce30:	480a      	ldr	r0, [pc, #40]	; (ce5c <sys_clock_announce+0x188>)
    ce32:	f002 f9f6 	bl	f222 <assert_print>
    ce36:	21b9      	movs	r1, #185	; 0xb9
    ce38:	4620      	mov	r0, r4
    ce3a:	f002 f9eb 	bl	f214 <assert_post_action>
    ce3e:	e7ea      	b.n	ce16 <sys_clock_announce+0x142>
    ce40:	2000d52c 	.word	0x2000d52c
    ce44:	2000d528 	.word	0x2000d528
    ce48:	00011854 	.word	0x00011854
    ce4c:	000118b4 	.word	0x000118b4
    ce50:	000116a8 	.word	0x000116a8
    ce54:	000118cc 	.word	0x000118cc
    ce58:	00011884 	.word	0x00011884
    ce5c:	0001189c 	.word	0x0001189c
    ce60:	20004928 	.word	0x20004928

0000ce64 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    ce64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    ce66:	2600      	movs	r6, #0
	__asm__ volatile(
    ce68:	f04f 0320 	mov.w	r3, #32
    ce6c:	f3ef 8711 	mrs	r7, BASEPRI
    ce70:	f383 8812 	msr	BASEPRI_MAX, r3
    ce74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ce78:	481f      	ldr	r0, [pc, #124]	; (cef8 <sys_clock_tick_get+0x94>)
    ce7a:	f7fd fccb 	bl	a814 <z_spin_lock_valid>
    ce7e:	b128      	cbz	r0, ce8c <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    ce80:	481d      	ldr	r0, [pc, #116]	; (cef8 <sys_clock_tick_get+0x94>)
    ce82:	f7fd fce7 	bl	a854 <z_spin_lock_set_owner>
	uint64_t t = 0U;
    ce86:	2400      	movs	r4, #0
    ce88:	4625      	mov	r5, r4
	return k;
    ce8a:	e014      	b.n	ceb6 <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ce8c:	4c1b      	ldr	r4, [pc, #108]	; (cefc <sys_clock_tick_get+0x98>)
    ce8e:	238e      	movs	r3, #142	; 0x8e
    ce90:	4622      	mov	r2, r4
    ce92:	491b      	ldr	r1, [pc, #108]	; (cf00 <sys_clock_tick_get+0x9c>)
    ce94:	481b      	ldr	r0, [pc, #108]	; (cf04 <sys_clock_tick_get+0xa0>)
    ce96:	f002 f9c4 	bl	f222 <assert_print>
    ce9a:	4917      	ldr	r1, [pc, #92]	; (cef8 <sys_clock_tick_get+0x94>)
    ce9c:	481a      	ldr	r0, [pc, #104]	; (cf08 <sys_clock_tick_get+0xa4>)
    ce9e:	f002 f9c0 	bl	f222 <assert_print>
    cea2:	218e      	movs	r1, #142	; 0x8e
    cea4:	4620      	mov	r0, r4
    cea6:	f002 f9b5 	bl	f214 <assert_post_action>
    ceaa:	e7e9      	b.n	ce80 <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    ceac:	f387 8811 	msr	BASEPRI, r7
    ceb0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ceb4:	2601      	movs	r6, #1
    ceb6:	b9e6      	cbnz	r6, cef2 <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    ceb8:	f7fb f90c 	bl	80d4 <sys_clock_elapsed>
    cebc:	4b13      	ldr	r3, [pc, #76]	; (cf0c <sys_clock_tick_get+0xa8>)
    cebe:	681c      	ldr	r4, [r3, #0]
    cec0:	685d      	ldr	r5, [r3, #4]
    cec2:	1904      	adds	r4, r0, r4
    cec4:	f145 0500 	adc.w	r5, r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cec8:	480b      	ldr	r0, [pc, #44]	; (cef8 <sys_clock_tick_get+0x94>)
    ceca:	f7fd fcb3 	bl	a834 <z_spin_unlock_valid>
    cece:	2800      	cmp	r0, #0
    ced0:	d1ec      	bne.n	ceac <sys_clock_tick_get+0x48>
    ced2:	4e0a      	ldr	r6, [pc, #40]	; (cefc <sys_clock_tick_get+0x98>)
    ced4:	23b9      	movs	r3, #185	; 0xb9
    ced6:	4632      	mov	r2, r6
    ced8:	490d      	ldr	r1, [pc, #52]	; (cf10 <sys_clock_tick_get+0xac>)
    ceda:	480a      	ldr	r0, [pc, #40]	; (cf04 <sys_clock_tick_get+0xa0>)
    cedc:	f002 f9a1 	bl	f222 <assert_print>
    cee0:	4905      	ldr	r1, [pc, #20]	; (cef8 <sys_clock_tick_get+0x94>)
    cee2:	480c      	ldr	r0, [pc, #48]	; (cf14 <sys_clock_tick_get+0xb0>)
    cee4:	f002 f99d 	bl	f222 <assert_print>
    cee8:	21b9      	movs	r1, #185	; 0xb9
    ceea:	4630      	mov	r0, r6
    ceec:	f002 f992 	bl	f214 <assert_post_action>
    cef0:	e7dc      	b.n	ceac <sys_clock_tick_get+0x48>
	}
	return t;
}
    cef2:	4620      	mov	r0, r4
    cef4:	4629      	mov	r1, r5
    cef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cef8:	2000d52c 	.word	0x2000d52c
    cefc:	00011854 	.word	0x00011854
    cf00:	000118b4 	.word	0x000118b4
    cf04:	000116a8 	.word	0x000116a8
    cf08:	000118cc 	.word	0x000118cc
    cf0c:	20004928 	.word	0x20004928
    cf10:	00011884 	.word	0x00011884
    cf14:	0001189c 	.word	0x0001189c

0000cf18 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    cf18:	b570      	push	{r4, r5, r6, lr}
    cf1a:	4604      	mov	r4, r0
	__asm__ volatile(
    cf1c:	f04f 0320 	mov.w	r3, #32
    cf20:	f3ef 8611 	mrs	r6, BASEPRI
    cf24:	f383 8812 	msr	BASEPRI_MAX, r3
    cf28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cf2c:	4857      	ldr	r0, [pc, #348]	; (d08c <z_timer_expiration_handler+0x174>)
    cf2e:	f7fd fc71 	bl	a814 <z_spin_lock_valid>
    cf32:	2800      	cmp	r0, #0
    cf34:	d049      	beq.n	cfca <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
    cf36:	4855      	ldr	r0, [pc, #340]	; (d08c <z_timer_expiration_handler+0x174>)
    cf38:	f7fd fc8c 	bl	a854 <z_spin_lock_set_owner>
	return k;
    cf3c:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    cf3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    cf40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    cf42:	ea52 0103 	orrs.w	r1, r2, r3
    cf46:	d005      	beq.n	cf54 <z_timer_expiration_handler+0x3c>
    cf48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cf4c:	bf08      	it	eq
    cf4e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    cf52:	d14a      	bne.n	cfea <z_timer_expiration_handler+0xd2>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    cf54:	6b23      	ldr	r3, [r4, #48]	; 0x30
    cf56:	3301      	adds	r3, #1
    cf58:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    cf5a:	6a23      	ldr	r3, [r4, #32]
    cf5c:	b1db      	cbz	r3, cf96 <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cf5e:	484b      	ldr	r0, [pc, #300]	; (d08c <z_timer_expiration_handler+0x174>)
    cf60:	f7fd fc68 	bl	a834 <z_spin_unlock_valid>
    cf64:	2800      	cmp	r0, #0
    cf66:	d047      	beq.n	cff8 <z_timer_expiration_handler+0xe0>
	__asm__ volatile(
    cf68:	f386 8811 	msr	BASEPRI, r6
    cf6c:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    cf70:	6a23      	ldr	r3, [r4, #32]
    cf72:	4620      	mov	r0, r4
    cf74:	4798      	blx	r3
	__asm__ volatile(
    cf76:	f04f 0320 	mov.w	r3, #32
    cf7a:	f3ef 8511 	mrs	r5, BASEPRI
    cf7e:	f383 8812 	msr	BASEPRI_MAX, r3
    cf82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cf86:	4841      	ldr	r0, [pc, #260]	; (d08c <z_timer_expiration_handler+0x174>)
    cf88:	f7fd fc44 	bl	a814 <z_spin_lock_valid>
    cf8c:	2800      	cmp	r0, #0
    cf8e:	d043      	beq.n	d018 <z_timer_expiration_handler+0x100>
	z_spin_lock_set_owner(l);
    cf90:	483e      	ldr	r0, [pc, #248]	; (d08c <z_timer_expiration_handler+0x174>)
    cf92:	f7fd fc5f 	bl	a854 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    cf96:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    cf9a:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cf9c:	42a3      	cmp	r3, r4
    cf9e:	d04b      	beq.n	d038 <z_timer_expiration_handler+0x120>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    cfa0:	2c00      	cmp	r4, #0
    cfa2:	d049      	beq.n	d038 <z_timer_expiration_handler+0x120>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    cfa4:	4620      	mov	r0, r4
    cfa6:	f7fe f9f7 	bl	b398 <z_unpend_thread_no_timeout>
    cfaa:	2300      	movs	r3, #0
    cfac:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cfb0:	4836      	ldr	r0, [pc, #216]	; (d08c <z_timer_expiration_handler+0x174>)
    cfb2:	f7fd fc3f 	bl	a834 <z_spin_unlock_valid>
    cfb6:	2800      	cmp	r0, #0
    cfb8:	d057      	beq.n	d06a <z_timer_expiration_handler+0x152>
	__asm__ volatile(
    cfba:	f385 8811 	msr	BASEPRI, r5
    cfbe:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    cfc2:	4620      	mov	r0, r4
    cfc4:	f7fe fce6 	bl	b994 <z_ready_thread>
}
    cfc8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cfca:	4d31      	ldr	r5, [pc, #196]	; (d090 <z_timer_expiration_handler+0x178>)
    cfcc:	238e      	movs	r3, #142	; 0x8e
    cfce:	462a      	mov	r2, r5
    cfd0:	4930      	ldr	r1, [pc, #192]	; (d094 <z_timer_expiration_handler+0x17c>)
    cfd2:	4831      	ldr	r0, [pc, #196]	; (d098 <z_timer_expiration_handler+0x180>)
    cfd4:	f002 f925 	bl	f222 <assert_print>
    cfd8:	492c      	ldr	r1, [pc, #176]	; (d08c <z_timer_expiration_handler+0x174>)
    cfda:	4830      	ldr	r0, [pc, #192]	; (d09c <z_timer_expiration_handler+0x184>)
    cfdc:	f002 f921 	bl	f222 <assert_print>
    cfe0:	218e      	movs	r1, #142	; 0x8e
    cfe2:	4628      	mov	r0, r5
    cfe4:	f002 f916 	bl	f214 <assert_post_action>
    cfe8:	e7a5      	b.n	cf36 <z_timer_expiration_handler+0x1e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    cfea:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    cfee:	492c      	ldr	r1, [pc, #176]	; (d0a0 <z_timer_expiration_handler+0x188>)
    cff0:	4620      	mov	r0, r4
    cff2:	f7ff fc79 	bl	c8e8 <z_add_timeout>
    cff6:	e7ad      	b.n	cf54 <z_timer_expiration_handler+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cff8:	4d25      	ldr	r5, [pc, #148]	; (d090 <z_timer_expiration_handler+0x178>)
    cffa:	23b9      	movs	r3, #185	; 0xb9
    cffc:	462a      	mov	r2, r5
    cffe:	4929      	ldr	r1, [pc, #164]	; (d0a4 <z_timer_expiration_handler+0x18c>)
    d000:	4825      	ldr	r0, [pc, #148]	; (d098 <z_timer_expiration_handler+0x180>)
    d002:	f002 f90e 	bl	f222 <assert_print>
    d006:	4921      	ldr	r1, [pc, #132]	; (d08c <z_timer_expiration_handler+0x174>)
    d008:	4827      	ldr	r0, [pc, #156]	; (d0a8 <z_timer_expiration_handler+0x190>)
    d00a:	f002 f90a 	bl	f222 <assert_print>
    d00e:	21b9      	movs	r1, #185	; 0xb9
    d010:	4628      	mov	r0, r5
    d012:	f002 f8ff 	bl	f214 <assert_post_action>
    d016:	e7a7      	b.n	cf68 <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d018:	4e1d      	ldr	r6, [pc, #116]	; (d090 <z_timer_expiration_handler+0x178>)
    d01a:	238e      	movs	r3, #142	; 0x8e
    d01c:	4632      	mov	r2, r6
    d01e:	491d      	ldr	r1, [pc, #116]	; (d094 <z_timer_expiration_handler+0x17c>)
    d020:	481d      	ldr	r0, [pc, #116]	; (d098 <z_timer_expiration_handler+0x180>)
    d022:	f002 f8fe 	bl	f222 <assert_print>
    d026:	4919      	ldr	r1, [pc, #100]	; (d08c <z_timer_expiration_handler+0x174>)
    d028:	481c      	ldr	r0, [pc, #112]	; (d09c <z_timer_expiration_handler+0x184>)
    d02a:	f002 f8fa 	bl	f222 <assert_print>
    d02e:	218e      	movs	r1, #142	; 0x8e
    d030:	4630      	mov	r0, r6
    d032:	f002 f8ef 	bl	f214 <assert_post_action>
    d036:	e7ab      	b.n	cf90 <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d038:	4814      	ldr	r0, [pc, #80]	; (d08c <z_timer_expiration_handler+0x174>)
    d03a:	f7fd fbfb 	bl	a834 <z_spin_unlock_valid>
    d03e:	b120      	cbz	r0, d04a <z_timer_expiration_handler+0x132>
    d040:	f385 8811 	msr	BASEPRI, r5
    d044:	f3bf 8f6f 	isb	sy
		return;
    d048:	e7be      	b.n	cfc8 <z_timer_expiration_handler+0xb0>
    d04a:	4c11      	ldr	r4, [pc, #68]	; (d090 <z_timer_expiration_handler+0x178>)
    d04c:	23b9      	movs	r3, #185	; 0xb9
    d04e:	4622      	mov	r2, r4
    d050:	4914      	ldr	r1, [pc, #80]	; (d0a4 <z_timer_expiration_handler+0x18c>)
    d052:	4811      	ldr	r0, [pc, #68]	; (d098 <z_timer_expiration_handler+0x180>)
    d054:	f002 f8e5 	bl	f222 <assert_print>
    d058:	490c      	ldr	r1, [pc, #48]	; (d08c <z_timer_expiration_handler+0x174>)
    d05a:	4813      	ldr	r0, [pc, #76]	; (d0a8 <z_timer_expiration_handler+0x190>)
    d05c:	f002 f8e1 	bl	f222 <assert_print>
    d060:	21b9      	movs	r1, #185	; 0xb9
    d062:	4620      	mov	r0, r4
    d064:	f002 f8d6 	bl	f214 <assert_post_action>
    d068:	e7ea      	b.n	d040 <z_timer_expiration_handler+0x128>
    d06a:	4e09      	ldr	r6, [pc, #36]	; (d090 <z_timer_expiration_handler+0x178>)
    d06c:	23b9      	movs	r3, #185	; 0xb9
    d06e:	4632      	mov	r2, r6
    d070:	490c      	ldr	r1, [pc, #48]	; (d0a4 <z_timer_expiration_handler+0x18c>)
    d072:	4809      	ldr	r0, [pc, #36]	; (d098 <z_timer_expiration_handler+0x180>)
    d074:	f002 f8d5 	bl	f222 <assert_print>
    d078:	4904      	ldr	r1, [pc, #16]	; (d08c <z_timer_expiration_handler+0x174>)
    d07a:	480b      	ldr	r0, [pc, #44]	; (d0a8 <z_timer_expiration_handler+0x190>)
    d07c:	f002 f8d1 	bl	f222 <assert_print>
    d080:	21b9      	movs	r1, #185	; 0xb9
    d082:	4630      	mov	r0, r6
    d084:	f002 f8c6 	bl	f214 <assert_post_action>
    d088:	e797      	b.n	cfba <z_timer_expiration_handler+0xa2>
    d08a:	bf00      	nop
    d08c:	2000d530 	.word	0x2000d530
    d090:	00011854 	.word	0x00011854
    d094:	000118b4 	.word	0x000118b4
    d098:	000116a8 	.word	0x000116a8
    d09c:	000118cc 	.word	0x000118cc
    d0a0:	0000cf19 	.word	0x0000cf19
    d0a4:	00011884 	.word	0x00011884
    d0a8:	0001189c 	.word	0x0001189c

0000d0ac <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    d0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0b0:	9f06      	ldr	r7, [sp, #24]
    d0b2:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    d0b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d0ba:	bf08      	it	eq
    d0bc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    d0c0:	d02f      	beq.n	d122 <z_impl_k_timer_start+0x76>
    d0c2:	4605      	mov	r5, r0
    d0c4:	4614      	mov	r4, r2
    d0c6:	461e      	mov	r6, r3
    d0c8:	4611      	mov	r1, r2
    d0ca:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    d0cc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    d0d0:	bf08      	it	eq
    d0d2:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    d0d6:	d00d      	beq.n	d0f4 <z_impl_k_timer_start+0x48>
    d0d8:	ea57 0c08 	orrs.w	ip, r7, r8
    d0dc:	d00a      	beq.n	d0f4 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
    d0de:	f06f 0c01 	mvn.w	ip, #1
    d0e2:	ebbc 0c07 	subs.w	ip, ip, r7
    d0e6:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    d0ea:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    d0ee:	f1bc 0f00 	cmp.w	ip, #0
    d0f2:	db18      	blt.n	d126 <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    d0f4:	f06f 0301 	mvn.w	r3, #1
    d0f8:	1a5b      	subs	r3, r3, r1
    d0fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d0fe:	eb63 0300 	sbc.w	r3, r3, r0
    d102:	2b00      	cmp	r3, #0
    d104:	db1a      	blt.n	d13c <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    d106:	4628      	mov	r0, r5
    d108:	f7ff fcd2 	bl	cab0 <z_abort_timeout>
	timer->period = period;
    d10c:	62af      	str	r7, [r5, #40]	; 0x28
    d10e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    d112:	2300      	movs	r3, #0
    d114:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    d116:	4622      	mov	r2, r4
    d118:	4633      	mov	r3, r6
    d11a:	490e      	ldr	r1, [pc, #56]	; (d154 <z_impl_k_timer_start+0xa8>)
    d11c:	4628      	mov	r0, r5
    d11e:	f7ff fbe3 	bl	c8e8 <z_add_timeout>
		     duration);
}
    d122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    d126:	2f02      	cmp	r7, #2
    d128:	f178 0300 	sbcs.w	r3, r8, #0
    d12c:	da02      	bge.n	d134 <z_impl_k_timer_start+0x88>
    d12e:	2702      	movs	r7, #2
    d130:	f04f 0800 	mov.w	r8, #0
    d134:	3f01      	subs	r7, #1
    d136:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
    d13a:	e7db      	b.n	d0f4 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
    d13c:	460c      	mov	r4, r1
    d13e:	4606      	mov	r6, r0
    d140:	2901      	cmp	r1, #1
    d142:	f170 0300 	sbcs.w	r3, r0, #0
    d146:	da01      	bge.n	d14c <z_impl_k_timer_start+0xa0>
    d148:	2401      	movs	r4, #1
    d14a:	2600      	movs	r6, #0
    d14c:	3c01      	subs	r4, #1
    d14e:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    d152:	e7d8      	b.n	d106 <z_impl_k_timer_start+0x5a>
    d154:	0000cf19 	.word	0x0000cf19

0000d158 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    d158:	4b01      	ldr	r3, [pc, #4]	; (d160 <k_thread_system_pool_assign+0x8>)
    d15a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    d15e:	4770      	bx	lr
    d160:	200041e0 	.word	0x200041e0

0000d164 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    d164:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    d166:	4a03      	ldr	r2, [pc, #12]	; (d174 <boot_banner+0x10>)
    d168:	4903      	ldr	r1, [pc, #12]	; (d178 <boot_banner+0x14>)
    d16a:	4804      	ldr	r0, [pc, #16]	; (d17c <boot_banner+0x18>)
    d16c:	f001 ff50 	bl	f010 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    d170:	bd08      	pop	{r3, pc}
    d172:	bf00      	nop
    d174:	000125b4 	.word	0x000125b4
    d178:	00013310 	.word	0x00013310
    d17c:	00013320 	.word	0x00013320

0000d180 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    d180:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    d182:	4c0f      	ldr	r4, [pc, #60]	; (d1c0 <statics_init+0x40>)
    d184:	e008      	b.n	d198 <statics_init+0x18>
    d186:	4b0f      	ldr	r3, [pc, #60]	; (d1c4 <statics_init+0x44>)
    d188:	429c      	cmp	r4, r3
    d18a:	d217      	bcs.n	d1bc <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    d18c:	68a2      	ldr	r2, [r4, #8]
    d18e:	6861      	ldr	r1, [r4, #4]
    d190:	4620      	mov	r0, r4
    d192:	f003 faa6 	bl	106e2 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    d196:	3418      	adds	r4, #24
    d198:	4b0a      	ldr	r3, [pc, #40]	; (d1c4 <statics_init+0x44>)
    d19a:	429c      	cmp	r4, r3
    d19c:	d9f3      	bls.n	d186 <statics_init+0x6>
    d19e:	4d0a      	ldr	r5, [pc, #40]	; (d1c8 <statics_init+0x48>)
    d1a0:	2318      	movs	r3, #24
    d1a2:	462a      	mov	r2, r5
    d1a4:	4909      	ldr	r1, [pc, #36]	; (d1cc <statics_init+0x4c>)
    d1a6:	480a      	ldr	r0, [pc, #40]	; (d1d0 <statics_init+0x50>)
    d1a8:	f002 f83b 	bl	f222 <assert_print>
    d1ac:	4809      	ldr	r0, [pc, #36]	; (d1d4 <statics_init+0x54>)
    d1ae:	f002 f838 	bl	f222 <assert_print>
    d1b2:	2118      	movs	r1, #24
    d1b4:	4628      	mov	r0, r5
    d1b6:	f002 f82d 	bl	f214 <assert_post_action>
    d1ba:	e7e4      	b.n	d186 <statics_init+0x6>
		}
	}
	return 0;
}
    d1bc:	2000      	movs	r0, #0
    d1be:	bd38      	pop	{r3, r4, r5, pc}
    d1c0:	200041e0 	.word	0x200041e0
    d1c4:	200041f8 	.word	0x200041f8
    d1c8:	00013348 	.word	0x00013348
    d1cc:	0001336c 	.word	0x0001336c
    d1d0:	000116a8 	.word	0x000116a8
    d1d4:	00012e90 	.word	0x00012e90

0000d1d8 <acos>:
    d1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d1da:	4604      	mov	r4, r0
    d1dc:	460d      	mov	r5, r1
    d1de:	f7f3 fe43 	bl	e68 <__ieee754_acos>
    d1e2:	4b11      	ldr	r3, [pc, #68]	; (d228 <acos+0x50>)
    d1e4:	f993 3000 	ldrsb.w	r3, [r3]
    d1e8:	3301      	adds	r3, #1
    d1ea:	4606      	mov	r6, r0
    d1ec:	460f      	mov	r7, r1
    d1ee:	d018      	beq.n	d222 <acos+0x4a>
    d1f0:	4622      	mov	r2, r4
    d1f2:	462b      	mov	r3, r5
    d1f4:	4620      	mov	r0, r4
    d1f6:	4629      	mov	r1, r5
    d1f8:	f7f3 fc92 	bl	b20 <__aeabi_dcmpun>
    d1fc:	b988      	cbnz	r0, d222 <acos+0x4a>
    d1fe:	4620      	mov	r0, r4
    d200:	4629      	mov	r1, r5
    d202:	f003 fa76 	bl	106f2 <fabs>
    d206:	4b09      	ldr	r3, [pc, #36]	; (d22c <acos+0x54>)
    d208:	2200      	movs	r2, #0
    d20a:	f7f3 fc7f 	bl	b0c <__aeabi_dcmpgt>
    d20e:	b140      	cbz	r0, d222 <acos+0x4a>
    d210:	f002 f981 	bl	f516 <__errno>
    d214:	2321      	movs	r3, #33	; 0x21
    d216:	6003      	str	r3, [r0, #0]
    d218:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d21c:	4804      	ldr	r0, [pc, #16]	; (d230 <acos+0x58>)
    d21e:	f000 b98f 	b.w	d540 <nan>
    d222:	4630      	mov	r0, r6
    d224:	4639      	mov	r1, r7
    d226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d228:	200041c8 	.word	0x200041c8
    d22c:	3ff00000 	.word	0x3ff00000
    d230:	00013695 	.word	0x00013695

0000d234 <pow>:
    d234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d238:	461f      	mov	r7, r3
    d23a:	4680      	mov	r8, r0
    d23c:	4689      	mov	r9, r1
    d23e:	4616      	mov	r6, r2
    d240:	f7f4 f85e 	bl	1300 <__ieee754_pow>
    d244:	4b4d      	ldr	r3, [pc, #308]	; (d37c <pow+0x148>)
    d246:	f993 3000 	ldrsb.w	r3, [r3]
    d24a:	3301      	adds	r3, #1
    d24c:	4604      	mov	r4, r0
    d24e:	460d      	mov	r5, r1
    d250:	d015      	beq.n	d27e <pow+0x4a>
    d252:	4632      	mov	r2, r6
    d254:	463b      	mov	r3, r7
    d256:	4630      	mov	r0, r6
    d258:	4639      	mov	r1, r7
    d25a:	f7f3 fc61 	bl	b20 <__aeabi_dcmpun>
    d25e:	b970      	cbnz	r0, d27e <pow+0x4a>
    d260:	4642      	mov	r2, r8
    d262:	464b      	mov	r3, r9
    d264:	4640      	mov	r0, r8
    d266:	4649      	mov	r1, r9
    d268:	f7f3 fc5a 	bl	b20 <__aeabi_dcmpun>
    d26c:	2200      	movs	r2, #0
    d26e:	2300      	movs	r3, #0
    d270:	b148      	cbz	r0, d286 <pow+0x52>
    d272:	4630      	mov	r0, r6
    d274:	4639      	mov	r1, r7
    d276:	f7f3 fc21 	bl	abc <__aeabi_dcmpeq>
    d27a:	2800      	cmp	r0, #0
    d27c:	d17b      	bne.n	d376 <pow+0x142>
    d27e:	4620      	mov	r0, r4
    d280:	4629      	mov	r1, r5
    d282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d286:	4640      	mov	r0, r8
    d288:	4649      	mov	r1, r9
    d28a:	f7f3 fc17 	bl	abc <__aeabi_dcmpeq>
    d28e:	b1e0      	cbz	r0, d2ca <pow+0x96>
    d290:	2200      	movs	r2, #0
    d292:	2300      	movs	r3, #0
    d294:	4630      	mov	r0, r6
    d296:	4639      	mov	r1, r7
    d298:	f7f3 fc10 	bl	abc <__aeabi_dcmpeq>
    d29c:	2800      	cmp	r0, #0
    d29e:	d16a      	bne.n	d376 <pow+0x142>
    d2a0:	4630      	mov	r0, r6
    d2a2:	4639      	mov	r1, r7
    d2a4:	f003 fa28 	bl	106f8 <finite>
    d2a8:	2800      	cmp	r0, #0
    d2aa:	d0e8      	beq.n	d27e <pow+0x4a>
    d2ac:	2200      	movs	r2, #0
    d2ae:	2300      	movs	r3, #0
    d2b0:	4630      	mov	r0, r6
    d2b2:	4639      	mov	r1, r7
    d2b4:	f7f3 fc0c 	bl	ad0 <__aeabi_dcmplt>
    d2b8:	2800      	cmp	r0, #0
    d2ba:	d0e0      	beq.n	d27e <pow+0x4a>
    d2bc:	f002 f92b 	bl	f516 <__errno>
    d2c0:	2321      	movs	r3, #33	; 0x21
    d2c2:	6003      	str	r3, [r0, #0]
    d2c4:	2400      	movs	r4, #0
    d2c6:	4d2e      	ldr	r5, [pc, #184]	; (d380 <pow+0x14c>)
    d2c8:	e7d9      	b.n	d27e <pow+0x4a>
    d2ca:	4620      	mov	r0, r4
    d2cc:	4629      	mov	r1, r5
    d2ce:	f003 fa13 	bl	106f8 <finite>
    d2d2:	bba8      	cbnz	r0, d340 <pow+0x10c>
    d2d4:	4640      	mov	r0, r8
    d2d6:	4649      	mov	r1, r9
    d2d8:	f003 fa0e 	bl	106f8 <finite>
    d2dc:	b380      	cbz	r0, d340 <pow+0x10c>
    d2de:	4630      	mov	r0, r6
    d2e0:	4639      	mov	r1, r7
    d2e2:	f003 fa09 	bl	106f8 <finite>
    d2e6:	b358      	cbz	r0, d340 <pow+0x10c>
    d2e8:	4622      	mov	r2, r4
    d2ea:	462b      	mov	r3, r5
    d2ec:	4620      	mov	r0, r4
    d2ee:	4629      	mov	r1, r5
    d2f0:	f7f3 fc16 	bl	b20 <__aeabi_dcmpun>
    d2f4:	b160      	cbz	r0, d310 <pow+0xdc>
    d2f6:	f002 f90e 	bl	f516 <__errno>
    d2fa:	2321      	movs	r3, #33	; 0x21
    d2fc:	6003      	str	r3, [r0, #0]
    d2fe:	2200      	movs	r2, #0
    d300:	2300      	movs	r3, #0
    d302:	4610      	mov	r0, r2
    d304:	4619      	mov	r1, r3
    d306:	f7f3 fa31 	bl	76c <__aeabi_ddiv>
    d30a:	4604      	mov	r4, r0
    d30c:	460d      	mov	r5, r1
    d30e:	e7b6      	b.n	d27e <pow+0x4a>
    d310:	f002 f901 	bl	f516 <__errno>
    d314:	2322      	movs	r3, #34	; 0x22
    d316:	6003      	str	r3, [r0, #0]
    d318:	2200      	movs	r2, #0
    d31a:	2300      	movs	r3, #0
    d31c:	4640      	mov	r0, r8
    d31e:	4649      	mov	r1, r9
    d320:	f7f3 fbd6 	bl	ad0 <__aeabi_dcmplt>
    d324:	2400      	movs	r4, #0
    d326:	b148      	cbz	r0, d33c <pow+0x108>
    d328:	4630      	mov	r0, r6
    d32a:	4639      	mov	r1, r7
    d32c:	f000 f90e 	bl	d54c <rint>
    d330:	4632      	mov	r2, r6
    d332:	463b      	mov	r3, r7
    d334:	f7f3 fbc2 	bl	abc <__aeabi_dcmpeq>
    d338:	2800      	cmp	r0, #0
    d33a:	d0c4      	beq.n	d2c6 <pow+0x92>
    d33c:	4d11      	ldr	r5, [pc, #68]	; (d384 <pow+0x150>)
    d33e:	e79e      	b.n	d27e <pow+0x4a>
    d340:	2200      	movs	r2, #0
    d342:	2300      	movs	r3, #0
    d344:	4620      	mov	r0, r4
    d346:	4629      	mov	r1, r5
    d348:	f7f3 fbb8 	bl	abc <__aeabi_dcmpeq>
    d34c:	2800      	cmp	r0, #0
    d34e:	d096      	beq.n	d27e <pow+0x4a>
    d350:	4640      	mov	r0, r8
    d352:	4649      	mov	r1, r9
    d354:	f003 f9d0 	bl	106f8 <finite>
    d358:	2800      	cmp	r0, #0
    d35a:	d090      	beq.n	d27e <pow+0x4a>
    d35c:	4630      	mov	r0, r6
    d35e:	4639      	mov	r1, r7
    d360:	f003 f9ca 	bl	106f8 <finite>
    d364:	2800      	cmp	r0, #0
    d366:	d08a      	beq.n	d27e <pow+0x4a>
    d368:	f002 f8d5 	bl	f516 <__errno>
    d36c:	2322      	movs	r3, #34	; 0x22
    d36e:	6003      	str	r3, [r0, #0]
    d370:	2400      	movs	r4, #0
    d372:	2500      	movs	r5, #0
    d374:	e783      	b.n	d27e <pow+0x4a>
    d376:	4d04      	ldr	r5, [pc, #16]	; (d388 <pow+0x154>)
    d378:	2400      	movs	r4, #0
    d37a:	e780      	b.n	d27e <pow+0x4a>
    d37c:	200041c8 	.word	0x200041c8
    d380:	fff00000 	.word	0xfff00000
    d384:	7ff00000 	.word	0x7ff00000
    d388:	3ff00000 	.word	0x3ff00000

0000d38c <sqrt>:
    d38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d38e:	4606      	mov	r6, r0
    d390:	460f      	mov	r7, r1
    d392:	f000 f827 	bl	d3e4 <__ieee754_sqrt>
    d396:	4b12      	ldr	r3, [pc, #72]	; (d3e0 <sqrt+0x54>)
    d398:	f993 3000 	ldrsb.w	r3, [r3]
    d39c:	3301      	adds	r3, #1
    d39e:	4604      	mov	r4, r0
    d3a0:	460d      	mov	r5, r1
    d3a2:	d019      	beq.n	d3d8 <sqrt+0x4c>
    d3a4:	4632      	mov	r2, r6
    d3a6:	463b      	mov	r3, r7
    d3a8:	4630      	mov	r0, r6
    d3aa:	4639      	mov	r1, r7
    d3ac:	f7f3 fbb8 	bl	b20 <__aeabi_dcmpun>
    d3b0:	b990      	cbnz	r0, d3d8 <sqrt+0x4c>
    d3b2:	2200      	movs	r2, #0
    d3b4:	2300      	movs	r3, #0
    d3b6:	4630      	mov	r0, r6
    d3b8:	4639      	mov	r1, r7
    d3ba:	f7f3 fb89 	bl	ad0 <__aeabi_dcmplt>
    d3be:	b158      	cbz	r0, d3d8 <sqrt+0x4c>
    d3c0:	f002 f8a9 	bl	f516 <__errno>
    d3c4:	2321      	movs	r3, #33	; 0x21
    d3c6:	6003      	str	r3, [r0, #0]
    d3c8:	2200      	movs	r2, #0
    d3ca:	2300      	movs	r3, #0
    d3cc:	4610      	mov	r0, r2
    d3ce:	4619      	mov	r1, r3
    d3d0:	f7f3 f9cc 	bl	76c <__aeabi_ddiv>
    d3d4:	4604      	mov	r4, r0
    d3d6:	460d      	mov	r5, r1
    d3d8:	4620      	mov	r0, r4
    d3da:	4629      	mov	r1, r5
    d3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d3de:	bf00      	nop
    d3e0:	200041c8 	.word	0x200041c8

0000d3e4 <__ieee754_sqrt>:
    d3e4:	f8df c154 	ldr.w	ip, [pc, #340]	; d53c <__ieee754_sqrt+0x158>
    d3e8:	ea3c 0c01 	bics.w	ip, ip, r1
    d3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3f0:	460a      	mov	r2, r1
    d3f2:	4606      	mov	r6, r0
    d3f4:	460d      	mov	r5, r1
    d3f6:	460c      	mov	r4, r1
    d3f8:	4607      	mov	r7, r0
    d3fa:	4603      	mov	r3, r0
    d3fc:	d10f      	bne.n	d41e <__ieee754_sqrt+0x3a>
    d3fe:	4602      	mov	r2, r0
    d400:	460b      	mov	r3, r1
    d402:	f7f3 f889 	bl	518 <__aeabi_dmul>
    d406:	4602      	mov	r2, r0
    d408:	460b      	mov	r3, r1
    d40a:	4630      	mov	r0, r6
    d40c:	4629      	mov	r1, r5
    d40e:	f7f2 fecd 	bl	1ac <__adddf3>
    d412:	4606      	mov	r6, r0
    d414:	460d      	mov	r5, r1
    d416:	4630      	mov	r0, r6
    d418:	4629      	mov	r1, r5
    d41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d41e:	2900      	cmp	r1, #0
    d420:	dc0e      	bgt.n	d440 <__ieee754_sqrt+0x5c>
    d422:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
    d426:	ea5c 0707 	orrs.w	r7, ip, r7
    d42a:	d0f4      	beq.n	d416 <__ieee754_sqrt+0x32>
    d42c:	b141      	cbz	r1, d440 <__ieee754_sqrt+0x5c>
    d42e:	4602      	mov	r2, r0
    d430:	460b      	mov	r3, r1
    d432:	f7f2 feb9 	bl	1a8 <__aeabi_dsub>
    d436:	4602      	mov	r2, r0
    d438:	460b      	mov	r3, r1
    d43a:	f7f3 f997 	bl	76c <__aeabi_ddiv>
    d43e:	e7e8      	b.n	d412 <__ieee754_sqrt+0x2e>
    d440:	1521      	asrs	r1, r4, #20
    d442:	d074      	beq.n	d52e <__ieee754_sqrt+0x14a>
    d444:	07cc      	lsls	r4, r1, #31
    d446:	f3c2 0213 	ubfx	r2, r2, #0, #20
    d44a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
    d44e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    d452:	bf5e      	ittt	pl
    d454:	0fd9      	lsrpl	r1, r3, #31
    d456:	005b      	lslpl	r3, r3, #1
    d458:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
    d45c:	2400      	movs	r4, #0
    d45e:	0fd9      	lsrs	r1, r3, #31
    d460:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    d464:	107f      	asrs	r7, r7, #1
    d466:	005b      	lsls	r3, r3, #1
    d468:	2516      	movs	r5, #22
    d46a:	4620      	mov	r0, r4
    d46c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    d470:	1846      	adds	r6, r0, r1
    d472:	4296      	cmp	r6, r2
    d474:	bfde      	ittt	le
    d476:	1b92      	suble	r2, r2, r6
    d478:	1870      	addle	r0, r6, r1
    d47a:	1864      	addle	r4, r4, r1
    d47c:	0052      	lsls	r2, r2, #1
    d47e:	3d01      	subs	r5, #1
    d480:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
    d484:	ea4f 0151 	mov.w	r1, r1, lsr #1
    d488:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d48c:	d1f0      	bne.n	d470 <__ieee754_sqrt+0x8c>
    d48e:	4629      	mov	r1, r5
    d490:	f04f 0e20 	mov.w	lr, #32
    d494:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    d498:	4282      	cmp	r2, r0
    d49a:	eb06 0c05 	add.w	ip, r6, r5
    d49e:	dc02      	bgt.n	d4a6 <__ieee754_sqrt+0xc2>
    d4a0:	d113      	bne.n	d4ca <__ieee754_sqrt+0xe6>
    d4a2:	459c      	cmp	ip, r3
    d4a4:	d811      	bhi.n	d4ca <__ieee754_sqrt+0xe6>
    d4a6:	f1bc 0f00 	cmp.w	ip, #0
    d4aa:	eb0c 0506 	add.w	r5, ip, r6
    d4ae:	da43      	bge.n	d538 <__ieee754_sqrt+0x154>
    d4b0:	2d00      	cmp	r5, #0
    d4b2:	db41      	blt.n	d538 <__ieee754_sqrt+0x154>
    d4b4:	f100 0801 	add.w	r8, r0, #1
    d4b8:	1a12      	subs	r2, r2, r0
    d4ba:	459c      	cmp	ip, r3
    d4bc:	bf88      	it	hi
    d4be:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
    d4c2:	eba3 030c 	sub.w	r3, r3, ip
    d4c6:	4431      	add	r1, r6
    d4c8:	4640      	mov	r0, r8
    d4ca:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
    d4ce:	f1be 0e01 	subs.w	lr, lr, #1
    d4d2:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
    d4d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d4da:	ea4f 0656 	mov.w	r6, r6, lsr #1
    d4de:	d1db      	bne.n	d498 <__ieee754_sqrt+0xb4>
    d4e0:	4313      	orrs	r3, r2
    d4e2:	d006      	beq.n	d4f2 <__ieee754_sqrt+0x10e>
    d4e4:	1c48      	adds	r0, r1, #1
    d4e6:	bf13      	iteet	ne
    d4e8:	3101      	addne	r1, #1
    d4ea:	3401      	addeq	r4, #1
    d4ec:	4671      	moveq	r1, lr
    d4ee:	f021 0101 	bicne.w	r1, r1, #1
    d4f2:	1063      	asrs	r3, r4, #1
    d4f4:	0849      	lsrs	r1, r1, #1
    d4f6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    d4fa:	07e2      	lsls	r2, r4, #31
    d4fc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    d500:	bf48      	it	mi
    d502:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
    d506:	eb03 5507 	add.w	r5, r3, r7, lsl #20
    d50a:	460e      	mov	r6, r1
    d50c:	e783      	b.n	d416 <__ieee754_sqrt+0x32>
    d50e:	0ada      	lsrs	r2, r3, #11
    d510:	3815      	subs	r0, #21
    d512:	055b      	lsls	r3, r3, #21
    d514:	2a00      	cmp	r2, #0
    d516:	d0fa      	beq.n	d50e <__ieee754_sqrt+0x12a>
    d518:	02d5      	lsls	r5, r2, #11
    d51a:	d50a      	bpl.n	d532 <__ieee754_sqrt+0x14e>
    d51c:	f1c1 0420 	rsb	r4, r1, #32
    d520:	fa23 f404 	lsr.w	r4, r3, r4
    d524:	1e4d      	subs	r5, r1, #1
    d526:	408b      	lsls	r3, r1
    d528:	4322      	orrs	r2, r4
    d52a:	1b41      	subs	r1, r0, r5
    d52c:	e78a      	b.n	d444 <__ieee754_sqrt+0x60>
    d52e:	4608      	mov	r0, r1
    d530:	e7f0      	b.n	d514 <__ieee754_sqrt+0x130>
    d532:	0052      	lsls	r2, r2, #1
    d534:	3101      	adds	r1, #1
    d536:	e7ef      	b.n	d518 <__ieee754_sqrt+0x134>
    d538:	4680      	mov	r8, r0
    d53a:	e7bd      	b.n	d4b8 <__ieee754_sqrt+0xd4>
    d53c:	7ff00000 	.word	0x7ff00000

0000d540 <nan>:
    d540:	4901      	ldr	r1, [pc, #4]	; (d548 <nan+0x8>)
    d542:	2000      	movs	r0, #0
    d544:	4770      	bx	lr
    d546:	bf00      	nop
    d548:	7ff80000 	.word	0x7ff80000

0000d54c <rint>:
    d54c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
    d550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d552:	f2ac 36ff 	subw	r6, ip, #1023	; 0x3ff
    d556:	2e13      	cmp	r6, #19
    d558:	4602      	mov	r2, r0
    d55a:	460b      	mov	r3, r1
    d55c:	460c      	mov	r4, r1
    d55e:	4605      	mov	r5, r0
    d560:	ea4f 77d1 	mov.w	r7, r1, lsr #31
    d564:	dc5a      	bgt.n	d61c <rint+0xd0>
    d566:	2e00      	cmp	r6, #0
    d568:	da2c      	bge.n	d5c4 <rint+0x78>
    d56a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d56e:	4301      	orrs	r1, r0
    d570:	d024      	beq.n	d5bc <rint+0x70>
    d572:	f3c3 0113 	ubfx	r1, r3, #0, #20
    d576:	4301      	orrs	r1, r0
    d578:	424d      	negs	r5, r1
    d57a:	430d      	orrs	r5, r1
    d57c:	0b2d      	lsrs	r5, r5, #12
    d57e:	0c59      	lsrs	r1, r3, #17
    d580:	0449      	lsls	r1, r1, #17
    d582:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    d586:	ea45 0301 	orr.w	r3, r5, r1
    d58a:	4934      	ldr	r1, [pc, #208]	; (d65c <rint+0x110>)
    d58c:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
    d590:	e9d7 6700 	ldrd	r6, r7, [r7]
    d594:	4639      	mov	r1, r7
    d596:	4630      	mov	r0, r6
    d598:	f7f2 fe08 	bl	1ac <__adddf3>
    d59c:	e9cd 0100 	strd	r0, r1, [sp]
    d5a0:	463b      	mov	r3, r7
    d5a2:	4632      	mov	r2, r6
    d5a4:	e9dd 0100 	ldrd	r0, r1, [sp]
    d5a8:	f7f2 fdfe 	bl	1a8 <__aeabi_dsub>
    d5ac:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
    d5b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    d5b4:	ea43 0704 	orr.w	r7, r3, r4
    d5b8:	4602      	mov	r2, r0
    d5ba:	463b      	mov	r3, r7
    d5bc:	4610      	mov	r0, r2
    d5be:	4619      	mov	r1, r3
    d5c0:	b003      	add	sp, #12
    d5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d5c4:	4926      	ldr	r1, [pc, #152]	; (d660 <rint+0x114>)
    d5c6:	4131      	asrs	r1, r6
    d5c8:	ea03 0001 	and.w	r0, r3, r1
    d5cc:	4310      	orrs	r0, r2
    d5ce:	d0f5      	beq.n	d5bc <rint+0x70>
    d5d0:	084b      	lsrs	r3, r1, #1
    d5d2:	ea04 0151 	and.w	r1, r4, r1, lsr #1
    d5d6:	430d      	orrs	r5, r1
    d5d8:	d00c      	beq.n	d5f4 <rint+0xa8>
    d5da:	ea24 0303 	bic.w	r3, r4, r3
    d5de:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    d5e2:	2e13      	cmp	r6, #19
    d5e4:	fa44 f606 	asr.w	r6, r4, r6
    d5e8:	bf0c      	ite	eq
    d5ea:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    d5ee:	2500      	movne	r5, #0
    d5f0:	ea43 0406 	orr.w	r4, r3, r6
    d5f4:	4919      	ldr	r1, [pc, #100]	; (d65c <rint+0x110>)
    d5f6:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
    d5fa:	4623      	mov	r3, r4
    d5fc:	462a      	mov	r2, r5
    d5fe:	e9d7 4500 	ldrd	r4, r5, [r7]
    d602:	4620      	mov	r0, r4
    d604:	4629      	mov	r1, r5
    d606:	f7f2 fdd1 	bl	1ac <__adddf3>
    d60a:	e9cd 0100 	strd	r0, r1, [sp]
    d60e:	e9dd 0100 	ldrd	r0, r1, [sp]
    d612:	4622      	mov	r2, r4
    d614:	462b      	mov	r3, r5
    d616:	f7f2 fdc7 	bl	1a8 <__aeabi_dsub>
    d61a:	e006      	b.n	d62a <rint+0xde>
    d61c:	2e33      	cmp	r6, #51	; 0x33
    d61e:	dd07      	ble.n	d630 <rint+0xe4>
    d620:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    d624:	d1ca      	bne.n	d5bc <rint+0x70>
    d626:	f7f2 fdc1 	bl	1ac <__adddf3>
    d62a:	4602      	mov	r2, r0
    d62c:	460b      	mov	r3, r1
    d62e:	e7c5      	b.n	d5bc <rint+0x70>
    d630:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
    d634:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d638:	fa21 f10c 	lsr.w	r1, r1, ip
    d63c:	4208      	tst	r0, r1
    d63e:	d0bd      	beq.n	d5bc <rint+0x70>
    d640:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
    d644:	ea4f 0351 	mov.w	r3, r1, lsr #1
    d648:	bf1f      	itttt	ne
    d64a:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
    d64e:	ea20 0303 	bicne.w	r3, r0, r3
    d652:	fa45 fc0c 	asrne.w	ip, r5, ip
    d656:	ea43 050c 	orrne.w	r5, r3, ip
    d65a:	e7cb      	b.n	d5f4 <rint+0xa8>
    d65c:	000110e8 	.word	0x000110e8
    d660:	000fffff 	.word	0x000fffff

0000d664 <calloc>:
    d664:	4b02      	ldr	r3, [pc, #8]	; (d670 <calloc+0xc>)
    d666:	460a      	mov	r2, r1
    d668:	4601      	mov	r1, r0
    d66a:	6818      	ldr	r0, [r3, #0]
    d66c:	f003 b8af 	b.w	107ce <_calloc_r>
    d670:	20004104 	.word	0x20004104

0000d674 <gcvt>:
    d674:	b5f0      	push	{r4, r5, r6, r7, lr}
    d676:	461c      	mov	r4, r3
    d678:	b085      	sub	sp, #20
    d67a:	2300      	movs	r3, #0
    d67c:	4615      	mov	r5, r2
    d67e:	2200      	movs	r2, #0
    d680:	4606      	mov	r6, r0
    d682:	460f      	mov	r7, r1
    d684:	f7f3 fa24 	bl	ad0 <__aeabi_dcmplt>
    d688:	4623      	mov	r3, r4
    d68a:	b118      	cbz	r0, d694 <gcvt+0x20>
    d68c:	222d      	movs	r2, #45	; 0x2d
    d68e:	f803 2b01 	strb.w	r2, [r3], #1
    d692:	3d01      	subs	r5, #1
    d694:	2267      	movs	r2, #103	; 0x67
    d696:	2100      	movs	r1, #0
    d698:	e9cd 2102 	strd	r2, r1, [sp, #8]
    d69c:	e9cd 5300 	strd	r5, r3, [sp]
    d6a0:	4905      	ldr	r1, [pc, #20]	; (d6b8 <gcvt+0x44>)
    d6a2:	4632      	mov	r2, r6
    d6a4:	6808      	ldr	r0, [r1, #0]
    d6a6:	463b      	mov	r3, r7
    d6a8:	f7f4 fbc2 	bl	1e30 <_gcvt>
    d6ac:	2800      	cmp	r0, #0
    d6ae:	bf14      	ite	ne
    d6b0:	4620      	movne	r0, r4
    d6b2:	2000      	moveq	r0, #0
    d6b4:	b005      	add	sp, #20
    d6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d6b8:	20004104 	.word	0x20004104

0000d6bc <exit>:
    d6bc:	b508      	push	{r3, lr}
    d6be:	4b07      	ldr	r3, [pc, #28]	; (d6dc <exit+0x20>)
    d6c0:	4604      	mov	r4, r0
    d6c2:	b113      	cbz	r3, d6ca <exit+0xe>
    d6c4:	2100      	movs	r1, #0
    d6c6:	f3af 8000 	nop.w
    d6ca:	4b05      	ldr	r3, [pc, #20]	; (d6e0 <exit+0x24>)
    d6cc:	6818      	ldr	r0, [r3, #0]
    d6ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
    d6d0:	b103      	cbz	r3, d6d4 <exit+0x18>
    d6d2:	4798      	blx	r3
    d6d4:	4620      	mov	r0, r4
    d6d6:	f7f9 facf 	bl	6c78 <_exit>
    d6da:	bf00      	nop
    d6dc:	00000000 	.word	0x00000000
    d6e0:	000133e4 	.word	0x000133e4

0000d6e4 <__sflush_r>:
    d6e4:	898a      	ldrh	r2, [r1, #12]
    d6e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d6e8:	4605      	mov	r5, r0
    d6ea:	0710      	lsls	r0, r2, #28
    d6ec:	460c      	mov	r4, r1
    d6ee:	d457      	bmi.n	d7a0 <__sflush_r+0xbc>
    d6f0:	684b      	ldr	r3, [r1, #4]
    d6f2:	2b00      	cmp	r3, #0
    d6f4:	dc04      	bgt.n	d700 <__sflush_r+0x1c>
    d6f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    d6f8:	2b00      	cmp	r3, #0
    d6fa:	dc01      	bgt.n	d700 <__sflush_r+0x1c>
    d6fc:	2000      	movs	r0, #0
    d6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    d702:	2e00      	cmp	r6, #0
    d704:	d0fa      	beq.n	d6fc <__sflush_r+0x18>
    d706:	2300      	movs	r3, #0
    d708:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    d70c:	682f      	ldr	r7, [r5, #0]
    d70e:	602b      	str	r3, [r5, #0]
    d710:	d032      	beq.n	d778 <__sflush_r+0x94>
    d712:	6d60      	ldr	r0, [r4, #84]	; 0x54
    d714:	89a3      	ldrh	r3, [r4, #12]
    d716:	075a      	lsls	r2, r3, #29
    d718:	d505      	bpl.n	d726 <__sflush_r+0x42>
    d71a:	6863      	ldr	r3, [r4, #4]
    d71c:	1ac0      	subs	r0, r0, r3
    d71e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    d720:	b10b      	cbz	r3, d726 <__sflush_r+0x42>
    d722:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d724:	1ac0      	subs	r0, r0, r3
    d726:	2300      	movs	r3, #0
    d728:	4602      	mov	r2, r0
    d72a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    d72c:	6a21      	ldr	r1, [r4, #32]
    d72e:	4628      	mov	r0, r5
    d730:	47b0      	blx	r6
    d732:	1c43      	adds	r3, r0, #1
    d734:	89a3      	ldrh	r3, [r4, #12]
    d736:	d106      	bne.n	d746 <__sflush_r+0x62>
    d738:	6829      	ldr	r1, [r5, #0]
    d73a:	291d      	cmp	r1, #29
    d73c:	d82c      	bhi.n	d798 <__sflush_r+0xb4>
    d73e:	4a29      	ldr	r2, [pc, #164]	; (d7e4 <__sflush_r+0x100>)
    d740:	40ca      	lsrs	r2, r1
    d742:	07d6      	lsls	r6, r2, #31
    d744:	d528      	bpl.n	d798 <__sflush_r+0xb4>
    d746:	2200      	movs	r2, #0
    d748:	6062      	str	r2, [r4, #4]
    d74a:	04d9      	lsls	r1, r3, #19
    d74c:	6922      	ldr	r2, [r4, #16]
    d74e:	6022      	str	r2, [r4, #0]
    d750:	d504      	bpl.n	d75c <__sflush_r+0x78>
    d752:	1c42      	adds	r2, r0, #1
    d754:	d101      	bne.n	d75a <__sflush_r+0x76>
    d756:	682b      	ldr	r3, [r5, #0]
    d758:	b903      	cbnz	r3, d75c <__sflush_r+0x78>
    d75a:	6560      	str	r0, [r4, #84]	; 0x54
    d75c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d75e:	602f      	str	r7, [r5, #0]
    d760:	2900      	cmp	r1, #0
    d762:	d0cb      	beq.n	d6fc <__sflush_r+0x18>
    d764:	f104 0344 	add.w	r3, r4, #68	; 0x44
    d768:	4299      	cmp	r1, r3
    d76a:	d002      	beq.n	d772 <__sflush_r+0x8e>
    d76c:	4628      	mov	r0, r5
    d76e:	f000 f959 	bl	da24 <_free_r>
    d772:	2000      	movs	r0, #0
    d774:	6360      	str	r0, [r4, #52]	; 0x34
    d776:	e7c2      	b.n	d6fe <__sflush_r+0x1a>
    d778:	6a21      	ldr	r1, [r4, #32]
    d77a:	2301      	movs	r3, #1
    d77c:	4628      	mov	r0, r5
    d77e:	47b0      	blx	r6
    d780:	1c41      	adds	r1, r0, #1
    d782:	d1c7      	bne.n	d714 <__sflush_r+0x30>
    d784:	682b      	ldr	r3, [r5, #0]
    d786:	2b00      	cmp	r3, #0
    d788:	d0c4      	beq.n	d714 <__sflush_r+0x30>
    d78a:	2b1d      	cmp	r3, #29
    d78c:	d001      	beq.n	d792 <__sflush_r+0xae>
    d78e:	2b16      	cmp	r3, #22
    d790:	d101      	bne.n	d796 <__sflush_r+0xb2>
    d792:	602f      	str	r7, [r5, #0]
    d794:	e7b2      	b.n	d6fc <__sflush_r+0x18>
    d796:	89a3      	ldrh	r3, [r4, #12]
    d798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d79c:	81a3      	strh	r3, [r4, #12]
    d79e:	e7ae      	b.n	d6fe <__sflush_r+0x1a>
    d7a0:	690f      	ldr	r7, [r1, #16]
    d7a2:	2f00      	cmp	r7, #0
    d7a4:	d0aa      	beq.n	d6fc <__sflush_r+0x18>
    d7a6:	0793      	lsls	r3, r2, #30
    d7a8:	680e      	ldr	r6, [r1, #0]
    d7aa:	bf08      	it	eq
    d7ac:	694b      	ldreq	r3, [r1, #20]
    d7ae:	600f      	str	r7, [r1, #0]
    d7b0:	bf18      	it	ne
    d7b2:	2300      	movne	r3, #0
    d7b4:	1bf6      	subs	r6, r6, r7
    d7b6:	608b      	str	r3, [r1, #8]
    d7b8:	2e00      	cmp	r6, #0
    d7ba:	dd9f      	ble.n	d6fc <__sflush_r+0x18>
    d7bc:	6a21      	ldr	r1, [r4, #32]
    d7be:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
    d7c2:	4633      	mov	r3, r6
    d7c4:	463a      	mov	r2, r7
    d7c6:	4628      	mov	r0, r5
    d7c8:	47e0      	blx	ip
    d7ca:	2800      	cmp	r0, #0
    d7cc:	dc06      	bgt.n	d7dc <__sflush_r+0xf8>
    d7ce:	89a3      	ldrh	r3, [r4, #12]
    d7d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d7d4:	81a3      	strh	r3, [r4, #12]
    d7d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d7da:	e790      	b.n	d6fe <__sflush_r+0x1a>
    d7dc:	4407      	add	r7, r0
    d7de:	1a36      	subs	r6, r6, r0
    d7e0:	e7ea      	b.n	d7b8 <__sflush_r+0xd4>
    d7e2:	bf00      	nop
    d7e4:	20400001 	.word	0x20400001

0000d7e8 <_fflush_r>:
    d7e8:	b538      	push	{r3, r4, r5, lr}
    d7ea:	690b      	ldr	r3, [r1, #16]
    d7ec:	4605      	mov	r5, r0
    d7ee:	460c      	mov	r4, r1
    d7f0:	b913      	cbnz	r3, d7f8 <_fflush_r+0x10>
    d7f2:	2500      	movs	r5, #0
    d7f4:	4628      	mov	r0, r5
    d7f6:	bd38      	pop	{r3, r4, r5, pc}
    d7f8:	b118      	cbz	r0, d802 <_fflush_r+0x1a>
    d7fa:	6983      	ldr	r3, [r0, #24]
    d7fc:	b90b      	cbnz	r3, d802 <_fflush_r+0x1a>
    d7fe:	f000 f883 	bl	d908 <__sinit>
    d802:	4b14      	ldr	r3, [pc, #80]	; (d854 <_fflush_r+0x6c>)
    d804:	429c      	cmp	r4, r3
    d806:	d11b      	bne.n	d840 <_fflush_r+0x58>
    d808:	686c      	ldr	r4, [r5, #4]
    d80a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    d80e:	2b00      	cmp	r3, #0
    d810:	d0ef      	beq.n	d7f2 <_fflush_r+0xa>
    d812:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d814:	07d0      	lsls	r0, r2, #31
    d816:	d404      	bmi.n	d822 <_fflush_r+0x3a>
    d818:	0599      	lsls	r1, r3, #22
    d81a:	d402      	bmi.n	d822 <_fflush_r+0x3a>
    d81c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d81e:	f7f9 fa81 	bl	6d24 <__retarget_lock_acquire_recursive>
    d822:	4628      	mov	r0, r5
    d824:	4621      	mov	r1, r4
    d826:	f7ff ff5d 	bl	d6e4 <__sflush_r>
    d82a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    d82c:	07da      	lsls	r2, r3, #31
    d82e:	4605      	mov	r5, r0
    d830:	d4e0      	bmi.n	d7f4 <_fflush_r+0xc>
    d832:	89a3      	ldrh	r3, [r4, #12]
    d834:	059b      	lsls	r3, r3, #22
    d836:	d4dd      	bmi.n	d7f4 <_fflush_r+0xc>
    d838:	6da0      	ldr	r0, [r4, #88]	; 0x58
    d83a:	f7f9 fa93 	bl	6d64 <__retarget_lock_release_recursive>
    d83e:	e7d9      	b.n	d7f4 <_fflush_r+0xc>
    d840:	4b05      	ldr	r3, [pc, #20]	; (d858 <_fflush_r+0x70>)
    d842:	429c      	cmp	r4, r3
    d844:	d101      	bne.n	d84a <_fflush_r+0x62>
    d846:	68ac      	ldr	r4, [r5, #8]
    d848:	e7df      	b.n	d80a <_fflush_r+0x22>
    d84a:	4b04      	ldr	r3, [pc, #16]	; (d85c <_fflush_r+0x74>)
    d84c:	429c      	cmp	r4, r3
    d84e:	bf08      	it	eq
    d850:	68ec      	ldreq	r4, [r5, #12]
    d852:	e7da      	b.n	d80a <_fflush_r+0x22>
    d854:	000133a4 	.word	0x000133a4
    d858:	000133c4 	.word	0x000133c4
    d85c:	00013384 	.word	0x00013384

0000d860 <fflush>:
    d860:	4601      	mov	r1, r0
    d862:	b920      	cbnz	r0, d86e <fflush+0xe>
    d864:	4b04      	ldr	r3, [pc, #16]	; (d878 <fflush+0x18>)
    d866:	4905      	ldr	r1, [pc, #20]	; (d87c <fflush+0x1c>)
    d868:	6818      	ldr	r0, [r3, #0]
    d86a:	f002 bf61 	b.w	10730 <_fwalk_reent>
    d86e:	4b04      	ldr	r3, [pc, #16]	; (d880 <fflush+0x20>)
    d870:	6818      	ldr	r0, [r3, #0]
    d872:	f7ff bfb9 	b.w	d7e8 <_fflush_r>
    d876:	bf00      	nop
    d878:	000133e4 	.word	0x000133e4
    d87c:	0000d7e9 	.word	0x0000d7e9
    d880:	20004104 	.word	0x20004104

0000d884 <std>:
    d884:	2300      	movs	r3, #0
    d886:	b510      	push	{r4, lr}
    d888:	4604      	mov	r4, r0
    d88a:	e9c0 3300 	strd	r3, r3, [r0]
    d88e:	e9c0 3304 	strd	r3, r3, [r0, #16]
    d892:	6083      	str	r3, [r0, #8]
    d894:	8181      	strh	r1, [r0, #12]
    d896:	6643      	str	r3, [r0, #100]	; 0x64
    d898:	81c2      	strh	r2, [r0, #14]
    d89a:	6183      	str	r3, [r0, #24]
    d89c:	4619      	mov	r1, r3
    d89e:	2208      	movs	r2, #8
    d8a0:	305c      	adds	r0, #92	; 0x5c
    d8a2:	f002 ff8c 	bl	107be <memset>
    d8a6:	4b05      	ldr	r3, [pc, #20]	; (d8bc <std+0x38>)
    d8a8:	6263      	str	r3, [r4, #36]	; 0x24
    d8aa:	4b05      	ldr	r3, [pc, #20]	; (d8c0 <std+0x3c>)
    d8ac:	62a3      	str	r3, [r4, #40]	; 0x28
    d8ae:	4b05      	ldr	r3, [pc, #20]	; (d8c4 <std+0x40>)
    d8b0:	62e3      	str	r3, [r4, #44]	; 0x2c
    d8b2:	4b05      	ldr	r3, [pc, #20]	; (d8c8 <std+0x44>)
    d8b4:	6224      	str	r4, [r4, #32]
    d8b6:	6323      	str	r3, [r4, #48]	; 0x30
    d8b8:	bd10      	pop	{r4, pc}
    d8ba:	bf00      	nop
    d8bc:	000107eb 	.word	0x000107eb
    d8c0:	0001080d 	.word	0x0001080d
    d8c4:	00010845 	.word	0x00010845
    d8c8:	00010869 	.word	0x00010869

0000d8cc <_cleanup_r>:
    d8cc:	4901      	ldr	r1, [pc, #4]	; (d8d4 <_cleanup_r+0x8>)
    d8ce:	f002 bf2f 	b.w	10730 <_fwalk_reent>
    d8d2:	bf00      	nop
    d8d4:	0000d7e9 	.word	0x0000d7e9

0000d8d8 <__sfp_lock_acquire>:
    d8d8:	4801      	ldr	r0, [pc, #4]	; (d8e0 <__sfp_lock_acquire+0x8>)
    d8da:	f7f9 ba23 	b.w	6d24 <__retarget_lock_acquire_recursive>
    d8de:	bf00      	nop
    d8e0:	2000420c 	.word	0x2000420c

0000d8e4 <__sfp_lock_release>:
    d8e4:	4801      	ldr	r0, [pc, #4]	; (d8ec <__sfp_lock_release+0x8>)
    d8e6:	f7f9 ba3d 	b.w	6d64 <__retarget_lock_release_recursive>
    d8ea:	bf00      	nop
    d8ec:	2000420c 	.word	0x2000420c

0000d8f0 <__sinit_lock_acquire>:
    d8f0:	4801      	ldr	r0, [pc, #4]	; (d8f8 <__sinit_lock_acquire+0x8>)
    d8f2:	f7f9 ba17 	b.w	6d24 <__retarget_lock_acquire_recursive>
    d8f6:	bf00      	nop
    d8f8:	20004220 	.word	0x20004220

0000d8fc <__sinit_lock_release>:
    d8fc:	4801      	ldr	r0, [pc, #4]	; (d904 <__sinit_lock_release+0x8>)
    d8fe:	f7f9 ba31 	b.w	6d64 <__retarget_lock_release_recursive>
    d902:	bf00      	nop
    d904:	20004220 	.word	0x20004220

0000d908 <__sinit>:
    d908:	b510      	push	{r4, lr}
    d90a:	4604      	mov	r4, r0
    d90c:	f7ff fff0 	bl	d8f0 <__sinit_lock_acquire>
    d910:	69a3      	ldr	r3, [r4, #24]
    d912:	b11b      	cbz	r3, d91c <__sinit+0x14>
    d914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d918:	f7ff bff0 	b.w	d8fc <__sinit_lock_release>
    d91c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    d920:	6523      	str	r3, [r4, #80]	; 0x50
    d922:	4b13      	ldr	r3, [pc, #76]	; (d970 <__sinit+0x68>)
    d924:	4a13      	ldr	r2, [pc, #76]	; (d974 <__sinit+0x6c>)
    d926:	681b      	ldr	r3, [r3, #0]
    d928:	62a2      	str	r2, [r4, #40]	; 0x28
    d92a:	42a3      	cmp	r3, r4
    d92c:	bf04      	itt	eq
    d92e:	2301      	moveq	r3, #1
    d930:	61a3      	streq	r3, [r4, #24]
    d932:	4620      	mov	r0, r4
    d934:	f000 f820 	bl	d978 <__sfp>
    d938:	6060      	str	r0, [r4, #4]
    d93a:	4620      	mov	r0, r4
    d93c:	f000 f81c 	bl	d978 <__sfp>
    d940:	60a0      	str	r0, [r4, #8]
    d942:	4620      	mov	r0, r4
    d944:	f000 f818 	bl	d978 <__sfp>
    d948:	2200      	movs	r2, #0
    d94a:	60e0      	str	r0, [r4, #12]
    d94c:	2104      	movs	r1, #4
    d94e:	6860      	ldr	r0, [r4, #4]
    d950:	f7ff ff98 	bl	d884 <std>
    d954:	68a0      	ldr	r0, [r4, #8]
    d956:	2201      	movs	r2, #1
    d958:	2109      	movs	r1, #9
    d95a:	f7ff ff93 	bl	d884 <std>
    d95e:	68e0      	ldr	r0, [r4, #12]
    d960:	2202      	movs	r2, #2
    d962:	2112      	movs	r1, #18
    d964:	f7ff ff8e 	bl	d884 <std>
    d968:	2301      	movs	r3, #1
    d96a:	61a3      	str	r3, [r4, #24]
    d96c:	e7d2      	b.n	d914 <__sinit+0xc>
    d96e:	bf00      	nop
    d970:	000133e4 	.word	0x000133e4
    d974:	0000d8cd 	.word	0x0000d8cd

0000d978 <__sfp>:
    d978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d97a:	4607      	mov	r7, r0
    d97c:	f7ff ffac 	bl	d8d8 <__sfp_lock_acquire>
    d980:	4b1e      	ldr	r3, [pc, #120]	; (d9fc <__sfp+0x84>)
    d982:	681e      	ldr	r6, [r3, #0]
    d984:	69b3      	ldr	r3, [r6, #24]
    d986:	b913      	cbnz	r3, d98e <__sfp+0x16>
    d988:	4630      	mov	r0, r6
    d98a:	f7ff ffbd 	bl	d908 <__sinit>
    d98e:	3648      	adds	r6, #72	; 0x48
    d990:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    d994:	3b01      	subs	r3, #1
    d996:	d503      	bpl.n	d9a0 <__sfp+0x28>
    d998:	6833      	ldr	r3, [r6, #0]
    d99a:	b30b      	cbz	r3, d9e0 <__sfp+0x68>
    d99c:	6836      	ldr	r6, [r6, #0]
    d99e:	e7f7      	b.n	d990 <__sfp+0x18>
    d9a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    d9a4:	b9d5      	cbnz	r5, d9dc <__sfp+0x64>
    d9a6:	4b16      	ldr	r3, [pc, #88]	; (da00 <__sfp+0x88>)
    d9a8:	60e3      	str	r3, [r4, #12]
    d9aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
    d9ae:	6665      	str	r5, [r4, #100]	; 0x64
    d9b0:	f7f9 f982 	bl	6cb8 <__retarget_lock_init_recursive>
    d9b4:	f7ff ff96 	bl	d8e4 <__sfp_lock_release>
    d9b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
    d9bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
    d9c0:	6025      	str	r5, [r4, #0]
    d9c2:	61a5      	str	r5, [r4, #24]
    d9c4:	2208      	movs	r2, #8
    d9c6:	4629      	mov	r1, r5
    d9c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    d9cc:	f002 fef7 	bl	107be <memset>
    d9d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    d9d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    d9d8:	4620      	mov	r0, r4
    d9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d9dc:	3468      	adds	r4, #104	; 0x68
    d9de:	e7d9      	b.n	d994 <__sfp+0x1c>
    d9e0:	2104      	movs	r1, #4
    d9e2:	4638      	mov	r0, r7
    d9e4:	f002 fe8e 	bl	10704 <__sfmoreglue>
    d9e8:	4604      	mov	r4, r0
    d9ea:	6030      	str	r0, [r6, #0]
    d9ec:	2800      	cmp	r0, #0
    d9ee:	d1d5      	bne.n	d99c <__sfp+0x24>
    d9f0:	f7ff ff78 	bl	d8e4 <__sfp_lock_release>
    d9f4:	230c      	movs	r3, #12
    d9f6:	603b      	str	r3, [r7, #0]
    d9f8:	e7ee      	b.n	d9d8 <__sfp+0x60>
    d9fa:	bf00      	nop
    d9fc:	000133e4 	.word	0x000133e4
    da00:	ffff0001 	.word	0xffff0001

0000da04 <malloc>:
    da04:	4b02      	ldr	r3, [pc, #8]	; (da10 <malloc+0xc>)
    da06:	4601      	mov	r1, r0
    da08:	6818      	ldr	r0, [r3, #0]
    da0a:	f000 b855 	b.w	dab8 <_malloc_r>
    da0e:	bf00      	nop
    da10:	20004104 	.word	0x20004104

0000da14 <free>:
    da14:	4b02      	ldr	r3, [pc, #8]	; (da20 <free+0xc>)
    da16:	4601      	mov	r1, r0
    da18:	6818      	ldr	r0, [r3, #0]
    da1a:	f000 b803 	b.w	da24 <_free_r>
    da1e:	bf00      	nop
    da20:	20004104 	.word	0x20004104

0000da24 <_free_r>:
    da24:	b538      	push	{r3, r4, r5, lr}
    da26:	4605      	mov	r5, r0
    da28:	2900      	cmp	r1, #0
    da2a:	d041      	beq.n	dab0 <_free_r+0x8c>
    da2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    da30:	1f0c      	subs	r4, r1, #4
    da32:	2b00      	cmp	r3, #0
    da34:	bfb8      	it	lt
    da36:	18e4      	addlt	r4, r4, r3
    da38:	f000 f91e 	bl	dc78 <__malloc_lock>
    da3c:	4a1d      	ldr	r2, [pc, #116]	; (dab4 <_free_r+0x90>)
    da3e:	6813      	ldr	r3, [r2, #0]
    da40:	b933      	cbnz	r3, da50 <_free_r+0x2c>
    da42:	6063      	str	r3, [r4, #4]
    da44:	6014      	str	r4, [r2, #0]
    da46:	4628      	mov	r0, r5
    da48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    da4c:	f000 b91a 	b.w	dc84 <__malloc_unlock>
    da50:	42a3      	cmp	r3, r4
    da52:	d908      	bls.n	da66 <_free_r+0x42>
    da54:	6820      	ldr	r0, [r4, #0]
    da56:	1821      	adds	r1, r4, r0
    da58:	428b      	cmp	r3, r1
    da5a:	bf01      	itttt	eq
    da5c:	6819      	ldreq	r1, [r3, #0]
    da5e:	685b      	ldreq	r3, [r3, #4]
    da60:	1809      	addeq	r1, r1, r0
    da62:	6021      	streq	r1, [r4, #0]
    da64:	e7ed      	b.n	da42 <_free_r+0x1e>
    da66:	461a      	mov	r2, r3
    da68:	685b      	ldr	r3, [r3, #4]
    da6a:	b10b      	cbz	r3, da70 <_free_r+0x4c>
    da6c:	42a3      	cmp	r3, r4
    da6e:	d9fa      	bls.n	da66 <_free_r+0x42>
    da70:	6811      	ldr	r1, [r2, #0]
    da72:	1850      	adds	r0, r2, r1
    da74:	42a0      	cmp	r0, r4
    da76:	d10b      	bne.n	da90 <_free_r+0x6c>
    da78:	6820      	ldr	r0, [r4, #0]
    da7a:	4401      	add	r1, r0
    da7c:	1850      	adds	r0, r2, r1
    da7e:	4283      	cmp	r3, r0
    da80:	6011      	str	r1, [r2, #0]
    da82:	d1e0      	bne.n	da46 <_free_r+0x22>
    da84:	6818      	ldr	r0, [r3, #0]
    da86:	685b      	ldr	r3, [r3, #4]
    da88:	6053      	str	r3, [r2, #4]
    da8a:	4401      	add	r1, r0
    da8c:	6011      	str	r1, [r2, #0]
    da8e:	e7da      	b.n	da46 <_free_r+0x22>
    da90:	d902      	bls.n	da98 <_free_r+0x74>
    da92:	230c      	movs	r3, #12
    da94:	602b      	str	r3, [r5, #0]
    da96:	e7d6      	b.n	da46 <_free_r+0x22>
    da98:	6820      	ldr	r0, [r4, #0]
    da9a:	1821      	adds	r1, r4, r0
    da9c:	428b      	cmp	r3, r1
    da9e:	bf04      	itt	eq
    daa0:	6819      	ldreq	r1, [r3, #0]
    daa2:	685b      	ldreq	r3, [r3, #4]
    daa4:	6063      	str	r3, [r4, #4]
    daa6:	bf04      	itt	eq
    daa8:	1809      	addeq	r1, r1, r0
    daaa:	6021      	streq	r1, [r4, #0]
    daac:	6054      	str	r4, [r2, #4]
    daae:	e7ca      	b.n	da46 <_free_r+0x22>
    dab0:	bd38      	pop	{r3, r4, r5, pc}
    dab2:	bf00      	nop
    dab4:	2000d534 	.word	0x2000d534

0000dab8 <_malloc_r>:
    dab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    daba:	1ccd      	adds	r5, r1, #3
    dabc:	f025 0503 	bic.w	r5, r5, #3
    dac0:	3508      	adds	r5, #8
    dac2:	2d0c      	cmp	r5, #12
    dac4:	bf38      	it	cc
    dac6:	250c      	movcc	r5, #12
    dac8:	2d00      	cmp	r5, #0
    daca:	4606      	mov	r6, r0
    dacc:	db01      	blt.n	dad2 <_malloc_r+0x1a>
    dace:	42a9      	cmp	r1, r5
    dad0:	d903      	bls.n	dada <_malloc_r+0x22>
    dad2:	230c      	movs	r3, #12
    dad4:	6033      	str	r3, [r6, #0]
    dad6:	2000      	movs	r0, #0
    dad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dada:	f000 f8cd 	bl	dc78 <__malloc_lock>
    dade:	4921      	ldr	r1, [pc, #132]	; (db64 <_malloc_r+0xac>)
    dae0:	680a      	ldr	r2, [r1, #0]
    dae2:	4614      	mov	r4, r2
    dae4:	b99c      	cbnz	r4, db0e <_malloc_r+0x56>
    dae6:	4f20      	ldr	r7, [pc, #128]	; (db68 <_malloc_r+0xb0>)
    dae8:	683b      	ldr	r3, [r7, #0]
    daea:	b923      	cbnz	r3, daf6 <_malloc_r+0x3e>
    daec:	4621      	mov	r1, r4
    daee:	4630      	mov	r0, r6
    daf0:	f000 f83c 	bl	db6c <_sbrk_r>
    daf4:	6038      	str	r0, [r7, #0]
    daf6:	4629      	mov	r1, r5
    daf8:	4630      	mov	r0, r6
    dafa:	f000 f837 	bl	db6c <_sbrk_r>
    dafe:	1c43      	adds	r3, r0, #1
    db00:	d123      	bne.n	db4a <_malloc_r+0x92>
    db02:	230c      	movs	r3, #12
    db04:	6033      	str	r3, [r6, #0]
    db06:	4630      	mov	r0, r6
    db08:	f000 f8bc 	bl	dc84 <__malloc_unlock>
    db0c:	e7e3      	b.n	dad6 <_malloc_r+0x1e>
    db0e:	6823      	ldr	r3, [r4, #0]
    db10:	1b5b      	subs	r3, r3, r5
    db12:	d417      	bmi.n	db44 <_malloc_r+0x8c>
    db14:	2b0b      	cmp	r3, #11
    db16:	d903      	bls.n	db20 <_malloc_r+0x68>
    db18:	6023      	str	r3, [r4, #0]
    db1a:	441c      	add	r4, r3
    db1c:	6025      	str	r5, [r4, #0]
    db1e:	e004      	b.n	db2a <_malloc_r+0x72>
    db20:	6863      	ldr	r3, [r4, #4]
    db22:	42a2      	cmp	r2, r4
    db24:	bf0c      	ite	eq
    db26:	600b      	streq	r3, [r1, #0]
    db28:	6053      	strne	r3, [r2, #4]
    db2a:	4630      	mov	r0, r6
    db2c:	f000 f8aa 	bl	dc84 <__malloc_unlock>
    db30:	f104 000b 	add.w	r0, r4, #11
    db34:	1d23      	adds	r3, r4, #4
    db36:	f020 0007 	bic.w	r0, r0, #7
    db3a:	1ac2      	subs	r2, r0, r3
    db3c:	d0cc      	beq.n	dad8 <_malloc_r+0x20>
    db3e:	1a1b      	subs	r3, r3, r0
    db40:	50a3      	str	r3, [r4, r2]
    db42:	e7c9      	b.n	dad8 <_malloc_r+0x20>
    db44:	4622      	mov	r2, r4
    db46:	6864      	ldr	r4, [r4, #4]
    db48:	e7cc      	b.n	dae4 <_malloc_r+0x2c>
    db4a:	1cc4      	adds	r4, r0, #3
    db4c:	f024 0403 	bic.w	r4, r4, #3
    db50:	42a0      	cmp	r0, r4
    db52:	d0e3      	beq.n	db1c <_malloc_r+0x64>
    db54:	1a21      	subs	r1, r4, r0
    db56:	4630      	mov	r0, r6
    db58:	f000 f808 	bl	db6c <_sbrk_r>
    db5c:	3001      	adds	r0, #1
    db5e:	d1dd      	bne.n	db1c <_malloc_r+0x64>
    db60:	e7cf      	b.n	db02 <_malloc_r+0x4a>
    db62:	bf00      	nop
    db64:	2000d534 	.word	0x2000d534
    db68:	2000d538 	.word	0x2000d538

0000db6c <_sbrk_r>:
    db6c:	b538      	push	{r3, r4, r5, lr}
    db6e:	4d06      	ldr	r5, [pc, #24]	; (db88 <_sbrk_r+0x1c>)
    db70:	2300      	movs	r3, #0
    db72:	4604      	mov	r4, r0
    db74:	4608      	mov	r0, r1
    db76:	602b      	str	r3, [r5, #0]
    db78:	f7f9 f888 	bl	6c8c <_sbrk>
    db7c:	1c43      	adds	r3, r0, #1
    db7e:	d102      	bne.n	db86 <_sbrk_r+0x1a>
    db80:	682b      	ldr	r3, [r5, #0]
    db82:	b103      	cbz	r3, db86 <_sbrk_r+0x1a>
    db84:	6023      	str	r3, [r4, #0]
    db86:	bd38      	pop	{r3, r4, r5, pc}
    db88:	2000d53c 	.word	0x2000d53c

0000db8c <__utoa>:
    db8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    db8e:	4c1f      	ldr	r4, [pc, #124]	; (dc0c <__utoa+0x80>)
    db90:	b08b      	sub	sp, #44	; 0x2c
    db92:	4605      	mov	r5, r0
    db94:	460b      	mov	r3, r1
    db96:	466e      	mov	r6, sp
    db98:	f104 0c20 	add.w	ip, r4, #32
    db9c:	6820      	ldr	r0, [r4, #0]
    db9e:	6861      	ldr	r1, [r4, #4]
    dba0:	4637      	mov	r7, r6
    dba2:	c703      	stmia	r7!, {r0, r1}
    dba4:	3408      	adds	r4, #8
    dba6:	4564      	cmp	r4, ip
    dba8:	463e      	mov	r6, r7
    dbaa:	d1f7      	bne.n	db9c <__utoa+0x10>
    dbac:	7921      	ldrb	r1, [r4, #4]
    dbae:	7139      	strb	r1, [r7, #4]
    dbb0:	1e91      	subs	r1, r2, #2
    dbb2:	6820      	ldr	r0, [r4, #0]
    dbb4:	6038      	str	r0, [r7, #0]
    dbb6:	2922      	cmp	r1, #34	; 0x22
    dbb8:	f04f 0100 	mov.w	r1, #0
    dbbc:	d904      	bls.n	dbc8 <__utoa+0x3c>
    dbbe:	7019      	strb	r1, [r3, #0]
    dbc0:	460b      	mov	r3, r1
    dbc2:	4618      	mov	r0, r3
    dbc4:	b00b      	add	sp, #44	; 0x2c
    dbc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dbc8:	1e58      	subs	r0, r3, #1
    dbca:	4684      	mov	ip, r0
    dbcc:	fbb5 f7f2 	udiv	r7, r5, r2
    dbd0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
    dbd4:	fb02 5617 	mls	r6, r2, r7, r5
    dbd8:	4476      	add	r6, lr
    dbda:	460c      	mov	r4, r1
    dbdc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
    dbe0:	f80c 6f01 	strb.w	r6, [ip, #1]!
    dbe4:	462e      	mov	r6, r5
    dbe6:	42b2      	cmp	r2, r6
    dbe8:	f101 0101 	add.w	r1, r1, #1
    dbec:	463d      	mov	r5, r7
    dbee:	d9ed      	bls.n	dbcc <__utoa+0x40>
    dbf0:	2200      	movs	r2, #0
    dbf2:	545a      	strb	r2, [r3, r1]
    dbf4:	1919      	adds	r1, r3, r4
    dbf6:	1aa5      	subs	r5, r4, r2
    dbf8:	42aa      	cmp	r2, r5
    dbfa:	dae2      	bge.n	dbc2 <__utoa+0x36>
    dbfc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
    dc00:	780e      	ldrb	r6, [r1, #0]
    dc02:	7006      	strb	r6, [r0, #0]
    dc04:	3201      	adds	r2, #1
    dc06:	f801 5901 	strb.w	r5, [r1], #-1
    dc0a:	e7f4      	b.n	dbf6 <__utoa+0x6a>
    dc0c:	0001357d 	.word	0x0001357d

0000dc10 <_write_r>:
    dc10:	b538      	push	{r3, r4, r5, lr}
    dc12:	4d07      	ldr	r5, [pc, #28]	; (dc30 <_write_r+0x20>)
    dc14:	4604      	mov	r4, r0
    dc16:	4608      	mov	r0, r1
    dc18:	4611      	mov	r1, r2
    dc1a:	2200      	movs	r2, #0
    dc1c:	602a      	str	r2, [r5, #0]
    dc1e:	461a      	mov	r2, r3
    dc20:	f001 fc60 	bl	f4e4 <_write>
    dc24:	1c43      	adds	r3, r0, #1
    dc26:	d102      	bne.n	dc2e <_write_r+0x1e>
    dc28:	682b      	ldr	r3, [r5, #0]
    dc2a:	b103      	cbz	r3, dc2e <_write_r+0x1e>
    dc2c:	6023      	str	r3, [r4, #0]
    dc2e:	bd38      	pop	{r3, r4, r5, pc}
    dc30:	2000d53c 	.word	0x2000d53c

0000dc34 <_close_r>:
    dc34:	b538      	push	{r3, r4, r5, lr}
    dc36:	4d06      	ldr	r5, [pc, #24]	; (dc50 <_close_r+0x1c>)
    dc38:	2300      	movs	r3, #0
    dc3a:	4604      	mov	r4, r0
    dc3c:	4608      	mov	r0, r1
    dc3e:	602b      	str	r3, [r5, #0]
    dc40:	f001 fc56 	bl	f4f0 <_close>
    dc44:	1c43      	adds	r3, r0, #1
    dc46:	d102      	bne.n	dc4e <_close_r+0x1a>
    dc48:	682b      	ldr	r3, [r5, #0]
    dc4a:	b103      	cbz	r3, dc4e <_close_r+0x1a>
    dc4c:	6023      	str	r3, [r4, #0]
    dc4e:	bd38      	pop	{r3, r4, r5, pc}
    dc50:	2000d53c 	.word	0x2000d53c

0000dc54 <_lseek_r>:
    dc54:	b538      	push	{r3, r4, r5, lr}
    dc56:	4d07      	ldr	r5, [pc, #28]	; (dc74 <_lseek_r+0x20>)
    dc58:	4604      	mov	r4, r0
    dc5a:	4608      	mov	r0, r1
    dc5c:	4611      	mov	r1, r2
    dc5e:	2200      	movs	r2, #0
    dc60:	602a      	str	r2, [r5, #0]
    dc62:	461a      	mov	r2, r3
    dc64:	f001 fc47 	bl	f4f6 <_lseek>
    dc68:	1c43      	adds	r3, r0, #1
    dc6a:	d102      	bne.n	dc72 <_lseek_r+0x1e>
    dc6c:	682b      	ldr	r3, [r5, #0]
    dc6e:	b103      	cbz	r3, dc72 <_lseek_r+0x1e>
    dc70:	6023      	str	r3, [r4, #0]
    dc72:	bd38      	pop	{r3, r4, r5, pc}
    dc74:	2000d53c 	.word	0x2000d53c

0000dc78 <__malloc_lock>:
    dc78:	4801      	ldr	r0, [pc, #4]	; (dc80 <__malloc_lock+0x8>)
    dc7a:	f7f9 b853 	b.w	6d24 <__retarget_lock_acquire_recursive>
    dc7e:	bf00      	nop
    dc80:	200041f8 	.word	0x200041f8

0000dc84 <__malloc_unlock>:
    dc84:	4801      	ldr	r0, [pc, #4]	; (dc8c <__malloc_unlock+0x8>)
    dc86:	f7f9 b86d 	b.w	6d64 <__retarget_lock_release_recursive>
    dc8a:	bf00      	nop
    dc8c:	200041f8 	.word	0x200041f8

0000dc90 <_Balloc>:
    dc90:	b570      	push	{r4, r5, r6, lr}
    dc92:	6a46      	ldr	r6, [r0, #36]	; 0x24
    dc94:	4604      	mov	r4, r0
    dc96:	460d      	mov	r5, r1
    dc98:	b976      	cbnz	r6, dcb8 <_Balloc+0x28>
    dc9a:	2010      	movs	r0, #16
    dc9c:	f7ff feb2 	bl	da04 <malloc>
    dca0:	4602      	mov	r2, r0
    dca2:	6260      	str	r0, [r4, #36]	; 0x24
    dca4:	b920      	cbnz	r0, dcb0 <_Balloc+0x20>
    dca6:	4b18      	ldr	r3, [pc, #96]	; (dd08 <_Balloc+0x78>)
    dca8:	4818      	ldr	r0, [pc, #96]	; (dd0c <_Balloc+0x7c>)
    dcaa:	2166      	movs	r1, #102	; 0x66
    dcac:	f000 fe48 	bl	e940 <__assert_func>
    dcb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
    dcb4:	6006      	str	r6, [r0, #0]
    dcb6:	60c6      	str	r6, [r0, #12]
    dcb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
    dcba:	68f3      	ldr	r3, [r6, #12]
    dcbc:	b183      	cbz	r3, dce0 <_Balloc+0x50>
    dcbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dcc0:	68db      	ldr	r3, [r3, #12]
    dcc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    dcc6:	b9b8      	cbnz	r0, dcf8 <_Balloc+0x68>
    dcc8:	2101      	movs	r1, #1
    dcca:	fa01 f605 	lsl.w	r6, r1, r5
    dcce:	1d72      	adds	r2, r6, #5
    dcd0:	0092      	lsls	r2, r2, #2
    dcd2:	4620      	mov	r0, r4
    dcd4:	f002 fd7b 	bl	107ce <_calloc_r>
    dcd8:	b160      	cbz	r0, dcf4 <_Balloc+0x64>
    dcda:	e9c0 5601 	strd	r5, r6, [r0, #4]
    dcde:	e00e      	b.n	dcfe <_Balloc+0x6e>
    dce0:	2221      	movs	r2, #33	; 0x21
    dce2:	2104      	movs	r1, #4
    dce4:	4620      	mov	r0, r4
    dce6:	f002 fd72 	bl	107ce <_calloc_r>
    dcea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dcec:	60f0      	str	r0, [r6, #12]
    dcee:	68db      	ldr	r3, [r3, #12]
    dcf0:	2b00      	cmp	r3, #0
    dcf2:	d1e4      	bne.n	dcbe <_Balloc+0x2e>
    dcf4:	2000      	movs	r0, #0
    dcf6:	bd70      	pop	{r4, r5, r6, pc}
    dcf8:	6802      	ldr	r2, [r0, #0]
    dcfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    dcfe:	2300      	movs	r3, #0
    dd00:	e9c0 3303 	strd	r3, r3, [r0, #12]
    dd04:	e7f7      	b.n	dcf6 <_Balloc+0x66>
    dd06:	bf00      	nop
    dd08:	000135a2 	.word	0x000135a2
    dd0c:	000135b9 	.word	0x000135b9

0000dd10 <_Bfree>:
    dd10:	b570      	push	{r4, r5, r6, lr}
    dd12:	6a46      	ldr	r6, [r0, #36]	; 0x24
    dd14:	4605      	mov	r5, r0
    dd16:	460c      	mov	r4, r1
    dd18:	b976      	cbnz	r6, dd38 <_Bfree+0x28>
    dd1a:	2010      	movs	r0, #16
    dd1c:	f7ff fe72 	bl	da04 <malloc>
    dd20:	4602      	mov	r2, r0
    dd22:	6268      	str	r0, [r5, #36]	; 0x24
    dd24:	b920      	cbnz	r0, dd30 <_Bfree+0x20>
    dd26:	4b09      	ldr	r3, [pc, #36]	; (dd4c <_Bfree+0x3c>)
    dd28:	4809      	ldr	r0, [pc, #36]	; (dd50 <_Bfree+0x40>)
    dd2a:	218a      	movs	r1, #138	; 0x8a
    dd2c:	f000 fe08 	bl	e940 <__assert_func>
    dd30:	e9c0 6601 	strd	r6, r6, [r0, #4]
    dd34:	6006      	str	r6, [r0, #0]
    dd36:	60c6      	str	r6, [r0, #12]
    dd38:	b13c      	cbz	r4, dd4a <_Bfree+0x3a>
    dd3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    dd3c:	6862      	ldr	r2, [r4, #4]
    dd3e:	68db      	ldr	r3, [r3, #12]
    dd40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    dd44:	6021      	str	r1, [r4, #0]
    dd46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    dd4a:	bd70      	pop	{r4, r5, r6, pc}
    dd4c:	000135a2 	.word	0x000135a2
    dd50:	000135b9 	.word	0x000135b9

0000dd54 <__multadd>:
    dd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd58:	690d      	ldr	r5, [r1, #16]
    dd5a:	4607      	mov	r7, r0
    dd5c:	460c      	mov	r4, r1
    dd5e:	461e      	mov	r6, r3
    dd60:	f101 0c14 	add.w	ip, r1, #20
    dd64:	2000      	movs	r0, #0
    dd66:	f8dc 3000 	ldr.w	r3, [ip]
    dd6a:	b299      	uxth	r1, r3
    dd6c:	fb02 6101 	mla	r1, r2, r1, r6
    dd70:	0c1e      	lsrs	r6, r3, #16
    dd72:	0c0b      	lsrs	r3, r1, #16
    dd74:	fb02 3306 	mla	r3, r2, r6, r3
    dd78:	b289      	uxth	r1, r1
    dd7a:	3001      	adds	r0, #1
    dd7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    dd80:	4285      	cmp	r5, r0
    dd82:	f84c 1b04 	str.w	r1, [ip], #4
    dd86:	ea4f 4613 	mov.w	r6, r3, lsr #16
    dd8a:	dcec      	bgt.n	dd66 <__multadd+0x12>
    dd8c:	b30e      	cbz	r6, ddd2 <__multadd+0x7e>
    dd8e:	68a3      	ldr	r3, [r4, #8]
    dd90:	42ab      	cmp	r3, r5
    dd92:	dc19      	bgt.n	ddc8 <__multadd+0x74>
    dd94:	6861      	ldr	r1, [r4, #4]
    dd96:	4638      	mov	r0, r7
    dd98:	3101      	adds	r1, #1
    dd9a:	f7ff ff79 	bl	dc90 <_Balloc>
    dd9e:	4680      	mov	r8, r0
    dda0:	b928      	cbnz	r0, ddae <__multadd+0x5a>
    dda2:	4602      	mov	r2, r0
    dda4:	4b0c      	ldr	r3, [pc, #48]	; (ddd8 <__multadd+0x84>)
    dda6:	480d      	ldr	r0, [pc, #52]	; (dddc <__multadd+0x88>)
    dda8:	21b5      	movs	r1, #181	; 0xb5
    ddaa:	f000 fdc9 	bl	e940 <__assert_func>
    ddae:	6922      	ldr	r2, [r4, #16]
    ddb0:	3202      	adds	r2, #2
    ddb2:	f104 010c 	add.w	r1, r4, #12
    ddb6:	0092      	lsls	r2, r2, #2
    ddb8:	300c      	adds	r0, #12
    ddba:	f002 fcf2 	bl	107a2 <memcpy>
    ddbe:	4621      	mov	r1, r4
    ddc0:	4638      	mov	r0, r7
    ddc2:	f7ff ffa5 	bl	dd10 <_Bfree>
    ddc6:	4644      	mov	r4, r8
    ddc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    ddcc:	3501      	adds	r5, #1
    ddce:	615e      	str	r6, [r3, #20]
    ddd0:	6125      	str	r5, [r4, #16]
    ddd2:	4620      	mov	r0, r4
    ddd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ddd8:	00013616 	.word	0x00013616
    dddc:	000135b9 	.word	0x000135b9

0000dde0 <__i2b>:
    dde0:	b510      	push	{r4, lr}
    dde2:	460c      	mov	r4, r1
    dde4:	2101      	movs	r1, #1
    dde6:	f7ff ff53 	bl	dc90 <_Balloc>
    ddea:	4602      	mov	r2, r0
    ddec:	b928      	cbnz	r0, ddfa <__i2b+0x1a>
    ddee:	4b05      	ldr	r3, [pc, #20]	; (de04 <__i2b+0x24>)
    ddf0:	4805      	ldr	r0, [pc, #20]	; (de08 <__i2b+0x28>)
    ddf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
    ddf6:	f000 fda3 	bl	e940 <__assert_func>
    ddfa:	2301      	movs	r3, #1
    ddfc:	6144      	str	r4, [r0, #20]
    ddfe:	6103      	str	r3, [r0, #16]
    de00:	bd10      	pop	{r4, pc}
    de02:	bf00      	nop
    de04:	00013616 	.word	0x00013616
    de08:	000135b9 	.word	0x000135b9

0000de0c <__multiply>:
    de0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de10:	4691      	mov	r9, r2
    de12:	690a      	ldr	r2, [r1, #16]
    de14:	f8d9 3010 	ldr.w	r3, [r9, #16]
    de18:	429a      	cmp	r2, r3
    de1a:	bfb8      	it	lt
    de1c:	460b      	movlt	r3, r1
    de1e:	460c      	mov	r4, r1
    de20:	bfbc      	itt	lt
    de22:	464c      	movlt	r4, r9
    de24:	4699      	movlt	r9, r3
    de26:	6927      	ldr	r7, [r4, #16]
    de28:	f8d9 a010 	ldr.w	sl, [r9, #16]
    de2c:	68a3      	ldr	r3, [r4, #8]
    de2e:	6861      	ldr	r1, [r4, #4]
    de30:	eb07 060a 	add.w	r6, r7, sl
    de34:	42b3      	cmp	r3, r6
    de36:	b085      	sub	sp, #20
    de38:	bfb8      	it	lt
    de3a:	3101      	addlt	r1, #1
    de3c:	f7ff ff28 	bl	dc90 <_Balloc>
    de40:	b930      	cbnz	r0, de50 <__multiply+0x44>
    de42:	4602      	mov	r2, r0
    de44:	4b43      	ldr	r3, [pc, #268]	; (df54 <__multiply+0x148>)
    de46:	4844      	ldr	r0, [pc, #272]	; (df58 <__multiply+0x14c>)
    de48:	f240 115d 	movw	r1, #349	; 0x15d
    de4c:	f000 fd78 	bl	e940 <__assert_func>
    de50:	f100 0514 	add.w	r5, r0, #20
    de54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
    de58:	462b      	mov	r3, r5
    de5a:	2200      	movs	r2, #0
    de5c:	4543      	cmp	r3, r8
    de5e:	d321      	bcc.n	dea4 <__multiply+0x98>
    de60:	f104 0314 	add.w	r3, r4, #20
    de64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    de68:	f109 0314 	add.w	r3, r9, #20
    de6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
    de70:	9202      	str	r2, [sp, #8]
    de72:	1b3a      	subs	r2, r7, r4
    de74:	3a15      	subs	r2, #21
    de76:	f022 0203 	bic.w	r2, r2, #3
    de7a:	3204      	adds	r2, #4
    de7c:	f104 0115 	add.w	r1, r4, #21
    de80:	428f      	cmp	r7, r1
    de82:	bf38      	it	cc
    de84:	2204      	movcc	r2, #4
    de86:	9201      	str	r2, [sp, #4]
    de88:	9a02      	ldr	r2, [sp, #8]
    de8a:	9303      	str	r3, [sp, #12]
    de8c:	429a      	cmp	r2, r3
    de8e:	d80c      	bhi.n	deaa <__multiply+0x9e>
    de90:	2e00      	cmp	r6, #0
    de92:	dd03      	ble.n	de9c <__multiply+0x90>
    de94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
    de98:	2b00      	cmp	r3, #0
    de9a:	d059      	beq.n	df50 <__multiply+0x144>
    de9c:	6106      	str	r6, [r0, #16]
    de9e:	b005      	add	sp, #20
    dea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dea4:	f843 2b04 	str.w	r2, [r3], #4
    dea8:	e7d8      	b.n	de5c <__multiply+0x50>
    deaa:	f8b3 a000 	ldrh.w	sl, [r3]
    deae:	f1ba 0f00 	cmp.w	sl, #0
    deb2:	d023      	beq.n	defc <__multiply+0xf0>
    deb4:	f104 0e14 	add.w	lr, r4, #20
    deb8:	46a9      	mov	r9, r5
    deba:	f04f 0c00 	mov.w	ip, #0
    debe:	f85e 2b04 	ldr.w	r2, [lr], #4
    dec2:	f8d9 1000 	ldr.w	r1, [r9]
    dec6:	fa1f fb82 	uxth.w	fp, r2
    deca:	b289      	uxth	r1, r1
    decc:	fb0a 110b 	mla	r1, sl, fp, r1
    ded0:	4461      	add	r1, ip
    ded2:	f8d9 c000 	ldr.w	ip, [r9]
    ded6:	0c12      	lsrs	r2, r2, #16
    ded8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    dedc:	fb0a c202 	mla	r2, sl, r2, ip
    dee0:	eb02 4211 	add.w	r2, r2, r1, lsr #16
    dee4:	b289      	uxth	r1, r1
    dee6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    deea:	4577      	cmp	r7, lr
    deec:	f849 1b04 	str.w	r1, [r9], #4
    def0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    def4:	d8e3      	bhi.n	debe <__multiply+0xb2>
    def6:	9a01      	ldr	r2, [sp, #4]
    def8:	f845 c002 	str.w	ip, [r5, r2]
    defc:	9a03      	ldr	r2, [sp, #12]
    defe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
    df02:	3304      	adds	r3, #4
    df04:	f1b9 0f00 	cmp.w	r9, #0
    df08:	d020      	beq.n	df4c <__multiply+0x140>
    df0a:	6829      	ldr	r1, [r5, #0]
    df0c:	f104 0c14 	add.w	ip, r4, #20
    df10:	46ae      	mov	lr, r5
    df12:	f04f 0a00 	mov.w	sl, #0
    df16:	f8bc b000 	ldrh.w	fp, [ip]
    df1a:	f8be 2002 	ldrh.w	r2, [lr, #2]
    df1e:	fb09 220b 	mla	r2, r9, fp, r2
    df22:	4492      	add	sl, r2
    df24:	b289      	uxth	r1, r1
    df26:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    df2a:	f84e 1b04 	str.w	r1, [lr], #4
    df2e:	f85c 2b04 	ldr.w	r2, [ip], #4
    df32:	f8be 1000 	ldrh.w	r1, [lr]
    df36:	0c12      	lsrs	r2, r2, #16
    df38:	fb09 1102 	mla	r1, r9, r2, r1
    df3c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
    df40:	4567      	cmp	r7, ip
    df42:	ea4f 4a11 	mov.w	sl, r1, lsr #16
    df46:	d8e6      	bhi.n	df16 <__multiply+0x10a>
    df48:	9a01      	ldr	r2, [sp, #4]
    df4a:	50a9      	str	r1, [r5, r2]
    df4c:	3504      	adds	r5, #4
    df4e:	e79b      	b.n	de88 <__multiply+0x7c>
    df50:	3e01      	subs	r6, #1
    df52:	e79d      	b.n	de90 <__multiply+0x84>
    df54:	00013616 	.word	0x00013616
    df58:	000135b9 	.word	0x000135b9

0000df5c <__pow5mult>:
    df5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    df60:	4615      	mov	r5, r2
    df62:	f012 0203 	ands.w	r2, r2, #3
    df66:	4606      	mov	r6, r0
    df68:	460f      	mov	r7, r1
    df6a:	d007      	beq.n	df7c <__pow5mult+0x20>
    df6c:	4c25      	ldr	r4, [pc, #148]	; (e004 <__pow5mult+0xa8>)
    df6e:	3a01      	subs	r2, #1
    df70:	2300      	movs	r3, #0
    df72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    df76:	f7ff feed 	bl	dd54 <__multadd>
    df7a:	4607      	mov	r7, r0
    df7c:	10ad      	asrs	r5, r5, #2
    df7e:	d03d      	beq.n	dffc <__pow5mult+0xa0>
    df80:	6a74      	ldr	r4, [r6, #36]	; 0x24
    df82:	b97c      	cbnz	r4, dfa4 <__pow5mult+0x48>
    df84:	2010      	movs	r0, #16
    df86:	f7ff fd3d 	bl	da04 <malloc>
    df8a:	4602      	mov	r2, r0
    df8c:	6270      	str	r0, [r6, #36]	; 0x24
    df8e:	b928      	cbnz	r0, df9c <__pow5mult+0x40>
    df90:	4b1d      	ldr	r3, [pc, #116]	; (e008 <__pow5mult+0xac>)
    df92:	481e      	ldr	r0, [pc, #120]	; (e00c <__pow5mult+0xb0>)
    df94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    df98:	f000 fcd2 	bl	e940 <__assert_func>
    df9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
    dfa0:	6004      	str	r4, [r0, #0]
    dfa2:	60c4      	str	r4, [r0, #12]
    dfa4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    dfa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
    dfac:	b94c      	cbnz	r4, dfc2 <__pow5mult+0x66>
    dfae:	f240 2171 	movw	r1, #625	; 0x271
    dfb2:	4630      	mov	r0, r6
    dfb4:	f7ff ff14 	bl	dde0 <__i2b>
    dfb8:	2300      	movs	r3, #0
    dfba:	f8c8 0008 	str.w	r0, [r8, #8]
    dfbe:	4604      	mov	r4, r0
    dfc0:	6003      	str	r3, [r0, #0]
    dfc2:	f04f 0900 	mov.w	r9, #0
    dfc6:	07eb      	lsls	r3, r5, #31
    dfc8:	d50a      	bpl.n	dfe0 <__pow5mult+0x84>
    dfca:	4639      	mov	r1, r7
    dfcc:	4622      	mov	r2, r4
    dfce:	4630      	mov	r0, r6
    dfd0:	f7ff ff1c 	bl	de0c <__multiply>
    dfd4:	4639      	mov	r1, r7
    dfd6:	4680      	mov	r8, r0
    dfd8:	4630      	mov	r0, r6
    dfda:	f7ff fe99 	bl	dd10 <_Bfree>
    dfde:	4647      	mov	r7, r8
    dfe0:	106d      	asrs	r5, r5, #1
    dfe2:	d00b      	beq.n	dffc <__pow5mult+0xa0>
    dfe4:	6820      	ldr	r0, [r4, #0]
    dfe6:	b938      	cbnz	r0, dff8 <__pow5mult+0x9c>
    dfe8:	4622      	mov	r2, r4
    dfea:	4621      	mov	r1, r4
    dfec:	4630      	mov	r0, r6
    dfee:	f7ff ff0d 	bl	de0c <__multiply>
    dff2:	6020      	str	r0, [r4, #0]
    dff4:	f8c0 9000 	str.w	r9, [r0]
    dff8:	4604      	mov	r4, r0
    dffa:	e7e4      	b.n	dfc6 <__pow5mult+0x6a>
    dffc:	4638      	mov	r0, r7
    dffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e002:	bf00      	nop
    e004:	000133e8 	.word	0x000133e8
    e008:	000135a2 	.word	0x000135a2
    e00c:	000135b9 	.word	0x000135b9

0000e010 <__lshift>:
    e010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e014:	460c      	mov	r4, r1
    e016:	6849      	ldr	r1, [r1, #4]
    e018:	6923      	ldr	r3, [r4, #16]
    e01a:	eb03 1862 	add.w	r8, r3, r2, asr #5
    e01e:	68a3      	ldr	r3, [r4, #8]
    e020:	4607      	mov	r7, r0
    e022:	4691      	mov	r9, r2
    e024:	ea4f 1a62 	mov.w	sl, r2, asr #5
    e028:	f108 0601 	add.w	r6, r8, #1
    e02c:	42b3      	cmp	r3, r6
    e02e:	db0b      	blt.n	e048 <__lshift+0x38>
    e030:	4638      	mov	r0, r7
    e032:	f7ff fe2d 	bl	dc90 <_Balloc>
    e036:	4605      	mov	r5, r0
    e038:	b948      	cbnz	r0, e04e <__lshift+0x3e>
    e03a:	4602      	mov	r2, r0
    e03c:	4b2a      	ldr	r3, [pc, #168]	; (e0e8 <__lshift+0xd8>)
    e03e:	482b      	ldr	r0, [pc, #172]	; (e0ec <__lshift+0xdc>)
    e040:	f240 11d9 	movw	r1, #473	; 0x1d9
    e044:	f000 fc7c 	bl	e940 <__assert_func>
    e048:	3101      	adds	r1, #1
    e04a:	005b      	lsls	r3, r3, #1
    e04c:	e7ee      	b.n	e02c <__lshift+0x1c>
    e04e:	2300      	movs	r3, #0
    e050:	f100 0114 	add.w	r1, r0, #20
    e054:	f100 0210 	add.w	r2, r0, #16
    e058:	4618      	mov	r0, r3
    e05a:	4553      	cmp	r3, sl
    e05c:	db37      	blt.n	e0ce <__lshift+0xbe>
    e05e:	6920      	ldr	r0, [r4, #16]
    e060:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
    e064:	f104 0314 	add.w	r3, r4, #20
    e068:	f019 091f 	ands.w	r9, r9, #31
    e06c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
    e070:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    e074:	d02f      	beq.n	e0d6 <__lshift+0xc6>
    e076:	f1c9 0e20 	rsb	lr, r9, #32
    e07a:	468a      	mov	sl, r1
    e07c:	f04f 0c00 	mov.w	ip, #0
    e080:	681a      	ldr	r2, [r3, #0]
    e082:	fa02 f209 	lsl.w	r2, r2, r9
    e086:	ea42 020c 	orr.w	r2, r2, ip
    e08a:	f84a 2b04 	str.w	r2, [sl], #4
    e08e:	f853 2b04 	ldr.w	r2, [r3], #4
    e092:	4298      	cmp	r0, r3
    e094:	fa22 fc0e 	lsr.w	ip, r2, lr
    e098:	d8f2      	bhi.n	e080 <__lshift+0x70>
    e09a:	1b03      	subs	r3, r0, r4
    e09c:	3b15      	subs	r3, #21
    e09e:	f023 0303 	bic.w	r3, r3, #3
    e0a2:	3304      	adds	r3, #4
    e0a4:	f104 0215 	add.w	r2, r4, #21
    e0a8:	4290      	cmp	r0, r2
    e0aa:	bf38      	it	cc
    e0ac:	2304      	movcc	r3, #4
    e0ae:	f841 c003 	str.w	ip, [r1, r3]
    e0b2:	f1bc 0f00 	cmp.w	ip, #0
    e0b6:	d001      	beq.n	e0bc <__lshift+0xac>
    e0b8:	f108 0602 	add.w	r6, r8, #2
    e0bc:	3e01      	subs	r6, #1
    e0be:	4638      	mov	r0, r7
    e0c0:	612e      	str	r6, [r5, #16]
    e0c2:	4621      	mov	r1, r4
    e0c4:	f7ff fe24 	bl	dd10 <_Bfree>
    e0c8:	4628      	mov	r0, r5
    e0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e0ce:	f842 0f04 	str.w	r0, [r2, #4]!
    e0d2:	3301      	adds	r3, #1
    e0d4:	e7c1      	b.n	e05a <__lshift+0x4a>
    e0d6:	3904      	subs	r1, #4
    e0d8:	f853 2b04 	ldr.w	r2, [r3], #4
    e0dc:	f841 2f04 	str.w	r2, [r1, #4]!
    e0e0:	4298      	cmp	r0, r3
    e0e2:	d8f9      	bhi.n	e0d8 <__lshift+0xc8>
    e0e4:	e7ea      	b.n	e0bc <__lshift+0xac>
    e0e6:	bf00      	nop
    e0e8:	00013616 	.word	0x00013616
    e0ec:	000135b9 	.word	0x000135b9

0000e0f0 <__mdiff>:
    e0f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0f4:	460d      	mov	r5, r1
    e0f6:	4607      	mov	r7, r0
    e0f8:	4611      	mov	r1, r2
    e0fa:	4628      	mov	r0, r5
    e0fc:	4614      	mov	r4, r2
    e0fe:	f002 fc9b 	bl	10a38 <__mcmp>
    e102:	1e06      	subs	r6, r0, #0
    e104:	d111      	bne.n	e12a <__mdiff+0x3a>
    e106:	4631      	mov	r1, r6
    e108:	4638      	mov	r0, r7
    e10a:	f7ff fdc1 	bl	dc90 <_Balloc>
    e10e:	4602      	mov	r2, r0
    e110:	b928      	cbnz	r0, e11e <__mdiff+0x2e>
    e112:	4b39      	ldr	r3, [pc, #228]	; (e1f8 <__mdiff+0x108>)
    e114:	f240 2132 	movw	r1, #562	; 0x232
    e118:	4838      	ldr	r0, [pc, #224]	; (e1fc <__mdiff+0x10c>)
    e11a:	f000 fc11 	bl	e940 <__assert_func>
    e11e:	2301      	movs	r3, #1
    e120:	e9c0 3604 	strd	r3, r6, [r0, #16]
    e124:	4610      	mov	r0, r2
    e126:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e12a:	bfa4      	itt	ge
    e12c:	4623      	movge	r3, r4
    e12e:	462c      	movge	r4, r5
    e130:	4638      	mov	r0, r7
    e132:	6861      	ldr	r1, [r4, #4]
    e134:	bfa6      	itte	ge
    e136:	461d      	movge	r5, r3
    e138:	2600      	movge	r6, #0
    e13a:	2601      	movlt	r6, #1
    e13c:	f7ff fda8 	bl	dc90 <_Balloc>
    e140:	4602      	mov	r2, r0
    e142:	b918      	cbnz	r0, e14c <__mdiff+0x5c>
    e144:	4b2c      	ldr	r3, [pc, #176]	; (e1f8 <__mdiff+0x108>)
    e146:	f44f 7110 	mov.w	r1, #576	; 0x240
    e14a:	e7e5      	b.n	e118 <__mdiff+0x28>
    e14c:	6927      	ldr	r7, [r4, #16]
    e14e:	60c6      	str	r6, [r0, #12]
    e150:	692e      	ldr	r6, [r5, #16]
    e152:	f104 0014 	add.w	r0, r4, #20
    e156:	f105 0914 	add.w	r9, r5, #20
    e15a:	f102 0e14 	add.w	lr, r2, #20
    e15e:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
    e162:	eb09 0686 	add.w	r6, r9, r6, lsl #2
    e166:	3410      	adds	r4, #16
    e168:	46f2      	mov	sl, lr
    e16a:	2100      	movs	r1, #0
    e16c:	f859 3b04 	ldr.w	r3, [r9], #4
    e170:	f854 bf04 	ldr.w	fp, [r4, #4]!
    e174:	fa1f f883 	uxth.w	r8, r3
    e178:	fa11 f18b 	uxtah	r1, r1, fp
    e17c:	0c1b      	lsrs	r3, r3, #16
    e17e:	eba1 0808 	sub.w	r8, r1, r8
    e182:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
    e186:	eb03 4328 	add.w	r3, r3, r8, asr #16
    e18a:	fa1f f888 	uxth.w	r8, r8
    e18e:	1419      	asrs	r1, r3, #16
    e190:	454e      	cmp	r6, r9
    e192:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
    e196:	f84a 3b04 	str.w	r3, [sl], #4
    e19a:	d8e7      	bhi.n	e16c <__mdiff+0x7c>
    e19c:	1b73      	subs	r3, r6, r5
    e19e:	3b15      	subs	r3, #21
    e1a0:	f023 0303 	bic.w	r3, r3, #3
    e1a4:	3304      	adds	r3, #4
    e1a6:	3515      	adds	r5, #21
    e1a8:	42ae      	cmp	r6, r5
    e1aa:	bf38      	it	cc
    e1ac:	2304      	movcc	r3, #4
    e1ae:	4418      	add	r0, r3
    e1b0:	4473      	add	r3, lr
    e1b2:	469e      	mov	lr, r3
    e1b4:	4606      	mov	r6, r0
    e1b6:	4566      	cmp	r6, ip
    e1b8:	d30e      	bcc.n	e1d8 <__mdiff+0xe8>
    e1ba:	f10c 0103 	add.w	r1, ip, #3
    e1be:	1a09      	subs	r1, r1, r0
    e1c0:	f021 0103 	bic.w	r1, r1, #3
    e1c4:	3803      	subs	r0, #3
    e1c6:	4584      	cmp	ip, r0
    e1c8:	bf38      	it	cc
    e1ca:	2100      	movcc	r1, #0
    e1cc:	4419      	add	r1, r3
    e1ce:	f851 3d04 	ldr.w	r3, [r1, #-4]!
    e1d2:	b17b      	cbz	r3, e1f4 <__mdiff+0x104>
    e1d4:	6117      	str	r7, [r2, #16]
    e1d6:	e7a5      	b.n	e124 <__mdiff+0x34>
    e1d8:	f856 8b04 	ldr.w	r8, [r6], #4
    e1dc:	fa11 f488 	uxtah	r4, r1, r8
    e1e0:	1425      	asrs	r5, r4, #16
    e1e2:	eb05 4518 	add.w	r5, r5, r8, lsr #16
    e1e6:	b2a4      	uxth	r4, r4
    e1e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    e1ec:	f84e 4b04 	str.w	r4, [lr], #4
    e1f0:	1429      	asrs	r1, r5, #16
    e1f2:	e7e0      	b.n	e1b6 <__mdiff+0xc6>
    e1f4:	3f01      	subs	r7, #1
    e1f6:	e7ea      	b.n	e1ce <__mdiff+0xde>
    e1f8:	00013616 	.word	0x00013616
    e1fc:	000135b9 	.word	0x000135b9

0000e200 <__d2b>:
    e200:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e204:	2101      	movs	r1, #1
    e206:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    e20a:	4690      	mov	r8, r2
    e20c:	461d      	mov	r5, r3
    e20e:	f7ff fd3f 	bl	dc90 <_Balloc>
    e212:	4604      	mov	r4, r0
    e214:	b930      	cbnz	r0, e224 <__d2b+0x24>
    e216:	4602      	mov	r2, r0
    e218:	4b25      	ldr	r3, [pc, #148]	; (e2b0 <__d2b+0xb0>)
    e21a:	4826      	ldr	r0, [pc, #152]	; (e2b4 <__d2b+0xb4>)
    e21c:	f240 310a 	movw	r1, #778	; 0x30a
    e220:	f000 fb8e 	bl	e940 <__assert_func>
    e224:	f3c5 0313 	ubfx	r3, r5, #0, #20
    e228:	f3c5 550a 	ubfx	r5, r5, #20, #11
    e22c:	bb2d      	cbnz	r5, e27a <__d2b+0x7a>
    e22e:	9301      	str	r3, [sp, #4]
    e230:	f1b8 0300 	subs.w	r3, r8, #0
    e234:	d026      	beq.n	e284 <__d2b+0x84>
    e236:	4668      	mov	r0, sp
    e238:	9300      	str	r3, [sp, #0]
    e23a:	f002 fbd0 	bl	109de <__lo0bits>
    e23e:	9900      	ldr	r1, [sp, #0]
    e240:	b1f0      	cbz	r0, e280 <__d2b+0x80>
    e242:	9a01      	ldr	r2, [sp, #4]
    e244:	f1c0 0320 	rsb	r3, r0, #32
    e248:	fa02 f303 	lsl.w	r3, r2, r3
    e24c:	430b      	orrs	r3, r1
    e24e:	40c2      	lsrs	r2, r0
    e250:	6163      	str	r3, [r4, #20]
    e252:	9201      	str	r2, [sp, #4]
    e254:	9b01      	ldr	r3, [sp, #4]
    e256:	61a3      	str	r3, [r4, #24]
    e258:	2b00      	cmp	r3, #0
    e25a:	bf14      	ite	ne
    e25c:	2102      	movne	r1, #2
    e25e:	2101      	moveq	r1, #1
    e260:	6121      	str	r1, [r4, #16]
    e262:	b1c5      	cbz	r5, e296 <__d2b+0x96>
    e264:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    e268:	4405      	add	r5, r0
    e26a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    e26e:	603d      	str	r5, [r7, #0]
    e270:	6030      	str	r0, [r6, #0]
    e272:	4620      	mov	r0, r4
    e274:	b002      	add	sp, #8
    e276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e27a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e27e:	e7d6      	b.n	e22e <__d2b+0x2e>
    e280:	6161      	str	r1, [r4, #20]
    e282:	e7e7      	b.n	e254 <__d2b+0x54>
    e284:	a801      	add	r0, sp, #4
    e286:	f002 fbaa 	bl	109de <__lo0bits>
    e28a:	9b01      	ldr	r3, [sp, #4]
    e28c:	6163      	str	r3, [r4, #20]
    e28e:	2101      	movs	r1, #1
    e290:	6121      	str	r1, [r4, #16]
    e292:	3020      	adds	r0, #32
    e294:	e7e5      	b.n	e262 <__d2b+0x62>
    e296:	eb04 0381 	add.w	r3, r4, r1, lsl #2
    e29a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    e29e:	6038      	str	r0, [r7, #0]
    e2a0:	6918      	ldr	r0, [r3, #16]
    e2a2:	f002 fb7c 	bl	1099e <__hi0bits>
    e2a6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
    e2aa:	6031      	str	r1, [r6, #0]
    e2ac:	e7e1      	b.n	e272 <__d2b+0x72>
    e2ae:	bf00      	nop
    e2b0:	00013616 	.word	0x00013616
    e2b4:	000135b9 	.word	0x000135b9

0000e2b8 <_mprec_log10>:
    e2b8:	2817      	cmp	r0, #23
    e2ba:	b5d0      	push	{r4, r6, r7, lr}
    e2bc:	4604      	mov	r4, r0
    e2be:	dc05      	bgt.n	e2cc <_mprec_log10+0x14>
    e2c0:	4808      	ldr	r0, [pc, #32]	; (e2e4 <_mprec_log10+0x2c>)
    e2c2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
    e2c6:	e9d4 0100 	ldrd	r0, r1, [r4]
    e2ca:	bdd0      	pop	{r4, r6, r7, pc}
    e2cc:	4906      	ldr	r1, [pc, #24]	; (e2e8 <_mprec_log10+0x30>)
    e2ce:	4f07      	ldr	r7, [pc, #28]	; (e2ec <_mprec_log10+0x34>)
    e2d0:	2000      	movs	r0, #0
    e2d2:	2600      	movs	r6, #0
    e2d4:	4632      	mov	r2, r6
    e2d6:	463b      	mov	r3, r7
    e2d8:	f7f2 f91e 	bl	518 <__aeabi_dmul>
    e2dc:	3c01      	subs	r4, #1
    e2de:	d1f9      	bne.n	e2d4 <_mprec_log10+0x1c>
    e2e0:	e7f3      	b.n	e2ca <_mprec_log10+0x12>
    e2e2:	bf00      	nop
    e2e4:	00011120 	.word	0x00011120
    e2e8:	3ff00000 	.word	0x3ff00000
    e2ec:	40240000 	.word	0x40240000

0000e2f0 <_vfiprintf_r>:
    e2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2f4:	460d      	mov	r5, r1
    e2f6:	b09d      	sub	sp, #116	; 0x74
    e2f8:	4614      	mov	r4, r2
    e2fa:	4698      	mov	r8, r3
    e2fc:	4606      	mov	r6, r0
    e2fe:	b118      	cbz	r0, e308 <_vfiprintf_r+0x18>
    e300:	6983      	ldr	r3, [r0, #24]
    e302:	b90b      	cbnz	r3, e308 <_vfiprintf_r+0x18>
    e304:	f7ff fb00 	bl	d908 <__sinit>
    e308:	4b89      	ldr	r3, [pc, #548]	; (e530 <_vfiprintf_r+0x240>)
    e30a:	429d      	cmp	r5, r3
    e30c:	d11b      	bne.n	e346 <_vfiprintf_r+0x56>
    e30e:	6875      	ldr	r5, [r6, #4]
    e310:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    e312:	07d9      	lsls	r1, r3, #31
    e314:	d405      	bmi.n	e322 <_vfiprintf_r+0x32>
    e316:	89ab      	ldrh	r3, [r5, #12]
    e318:	059a      	lsls	r2, r3, #22
    e31a:	d402      	bmi.n	e322 <_vfiprintf_r+0x32>
    e31c:	6da8      	ldr	r0, [r5, #88]	; 0x58
    e31e:	f7f8 fd01 	bl	6d24 <__retarget_lock_acquire_recursive>
    e322:	89ab      	ldrh	r3, [r5, #12]
    e324:	071b      	lsls	r3, r3, #28
    e326:	d501      	bpl.n	e32c <_vfiprintf_r+0x3c>
    e328:	692b      	ldr	r3, [r5, #16]
    e32a:	b9eb      	cbnz	r3, e368 <_vfiprintf_r+0x78>
    e32c:	4629      	mov	r1, r5
    e32e:	4630      	mov	r0, r6
    e330:	f000 fa98 	bl	e864 <__swsetup_r>
    e334:	b1c0      	cbz	r0, e368 <_vfiprintf_r+0x78>
    e336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    e338:	07dc      	lsls	r4, r3, #31
    e33a:	d50e      	bpl.n	e35a <_vfiprintf_r+0x6a>
    e33c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e340:	b01d      	add	sp, #116	; 0x74
    e342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e346:	4b7b      	ldr	r3, [pc, #492]	; (e534 <_vfiprintf_r+0x244>)
    e348:	429d      	cmp	r5, r3
    e34a:	d101      	bne.n	e350 <_vfiprintf_r+0x60>
    e34c:	68b5      	ldr	r5, [r6, #8]
    e34e:	e7df      	b.n	e310 <_vfiprintf_r+0x20>
    e350:	4b79      	ldr	r3, [pc, #484]	; (e538 <_vfiprintf_r+0x248>)
    e352:	429d      	cmp	r5, r3
    e354:	bf08      	it	eq
    e356:	68f5      	ldreq	r5, [r6, #12]
    e358:	e7da      	b.n	e310 <_vfiprintf_r+0x20>
    e35a:	89ab      	ldrh	r3, [r5, #12]
    e35c:	0598      	lsls	r0, r3, #22
    e35e:	d4ed      	bmi.n	e33c <_vfiprintf_r+0x4c>
    e360:	6da8      	ldr	r0, [r5, #88]	; 0x58
    e362:	f7f8 fcff 	bl	6d64 <__retarget_lock_release_recursive>
    e366:	e7e9      	b.n	e33c <_vfiprintf_r+0x4c>
    e368:	2300      	movs	r3, #0
    e36a:	9309      	str	r3, [sp, #36]	; 0x24
    e36c:	2320      	movs	r3, #32
    e36e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    e372:	f8cd 800c 	str.w	r8, [sp, #12]
    e376:	2330      	movs	r3, #48	; 0x30
    e378:	f8df 81c0 	ldr.w	r8, [pc, #448]	; e53c <_vfiprintf_r+0x24c>
    e37c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    e380:	f04f 0901 	mov.w	r9, #1
    e384:	4623      	mov	r3, r4
    e386:	469a      	mov	sl, r3
    e388:	f813 2b01 	ldrb.w	r2, [r3], #1
    e38c:	b10a      	cbz	r2, e392 <_vfiprintf_r+0xa2>
    e38e:	2a25      	cmp	r2, #37	; 0x25
    e390:	d1f9      	bne.n	e386 <_vfiprintf_r+0x96>
    e392:	ebba 0b04 	subs.w	fp, sl, r4
    e396:	d00b      	beq.n	e3b0 <_vfiprintf_r+0xc0>
    e398:	465b      	mov	r3, fp
    e39a:	4622      	mov	r2, r4
    e39c:	4629      	mov	r1, r5
    e39e:	4630      	mov	r0, r6
    e3a0:	f002 fb7a 	bl	10a98 <__sfputs_r>
    e3a4:	3001      	adds	r0, #1
    e3a6:	f000 80aa 	beq.w	e4fe <_vfiprintf_r+0x20e>
    e3aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e3ac:	445a      	add	r2, fp
    e3ae:	9209      	str	r2, [sp, #36]	; 0x24
    e3b0:	f89a 3000 	ldrb.w	r3, [sl]
    e3b4:	2b00      	cmp	r3, #0
    e3b6:	f000 80a2 	beq.w	e4fe <_vfiprintf_r+0x20e>
    e3ba:	2300      	movs	r3, #0
    e3bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e3c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
    e3c4:	f10a 0a01 	add.w	sl, sl, #1
    e3c8:	9304      	str	r3, [sp, #16]
    e3ca:	9307      	str	r3, [sp, #28]
    e3cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    e3d0:	931a      	str	r3, [sp, #104]	; 0x68
    e3d2:	4654      	mov	r4, sl
    e3d4:	2205      	movs	r2, #5
    e3d6:	f814 1b01 	ldrb.w	r1, [r4], #1
    e3da:	4858      	ldr	r0, [pc, #352]	; (e53c <_vfiprintf_r+0x24c>)
    e3dc:	f7f1 fe90 	bl	100 <memchr>
    e3e0:	9a04      	ldr	r2, [sp, #16]
    e3e2:	b9d8      	cbnz	r0, e41c <_vfiprintf_r+0x12c>
    e3e4:	06d1      	lsls	r1, r2, #27
    e3e6:	bf44      	itt	mi
    e3e8:	2320      	movmi	r3, #32
    e3ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    e3ee:	0713      	lsls	r3, r2, #28
    e3f0:	bf44      	itt	mi
    e3f2:	232b      	movmi	r3, #43	; 0x2b
    e3f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    e3f8:	f89a 3000 	ldrb.w	r3, [sl]
    e3fc:	2b2a      	cmp	r3, #42	; 0x2a
    e3fe:	d015      	beq.n	e42c <_vfiprintf_r+0x13c>
    e400:	9a07      	ldr	r2, [sp, #28]
    e402:	4654      	mov	r4, sl
    e404:	2000      	movs	r0, #0
    e406:	f04f 0c0a 	mov.w	ip, #10
    e40a:	4621      	mov	r1, r4
    e40c:	f811 3b01 	ldrb.w	r3, [r1], #1
    e410:	3b30      	subs	r3, #48	; 0x30
    e412:	2b09      	cmp	r3, #9
    e414:	d94e      	bls.n	e4b4 <_vfiprintf_r+0x1c4>
    e416:	b1b0      	cbz	r0, e446 <_vfiprintf_r+0x156>
    e418:	9207      	str	r2, [sp, #28]
    e41a:	e014      	b.n	e446 <_vfiprintf_r+0x156>
    e41c:	eba0 0308 	sub.w	r3, r0, r8
    e420:	fa09 f303 	lsl.w	r3, r9, r3
    e424:	4313      	orrs	r3, r2
    e426:	9304      	str	r3, [sp, #16]
    e428:	46a2      	mov	sl, r4
    e42a:	e7d2      	b.n	e3d2 <_vfiprintf_r+0xe2>
    e42c:	9b03      	ldr	r3, [sp, #12]
    e42e:	1d19      	adds	r1, r3, #4
    e430:	681b      	ldr	r3, [r3, #0]
    e432:	9103      	str	r1, [sp, #12]
    e434:	2b00      	cmp	r3, #0
    e436:	bfbb      	ittet	lt
    e438:	425b      	neglt	r3, r3
    e43a:	f042 0202 	orrlt.w	r2, r2, #2
    e43e:	9307      	strge	r3, [sp, #28]
    e440:	9307      	strlt	r3, [sp, #28]
    e442:	bfb8      	it	lt
    e444:	9204      	strlt	r2, [sp, #16]
    e446:	7823      	ldrb	r3, [r4, #0]
    e448:	2b2e      	cmp	r3, #46	; 0x2e
    e44a:	d10c      	bne.n	e466 <_vfiprintf_r+0x176>
    e44c:	7863      	ldrb	r3, [r4, #1]
    e44e:	2b2a      	cmp	r3, #42	; 0x2a
    e450:	d135      	bne.n	e4be <_vfiprintf_r+0x1ce>
    e452:	9b03      	ldr	r3, [sp, #12]
    e454:	1d1a      	adds	r2, r3, #4
    e456:	681b      	ldr	r3, [r3, #0]
    e458:	9203      	str	r2, [sp, #12]
    e45a:	2b00      	cmp	r3, #0
    e45c:	bfb8      	it	lt
    e45e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    e462:	3402      	adds	r4, #2
    e464:	9305      	str	r3, [sp, #20]
    e466:	f8df a0d8 	ldr.w	sl, [pc, #216]	; e540 <_vfiprintf_r+0x250>
    e46a:	7821      	ldrb	r1, [r4, #0]
    e46c:	2203      	movs	r2, #3
    e46e:	4650      	mov	r0, sl
    e470:	f7f1 fe46 	bl	100 <memchr>
    e474:	b140      	cbz	r0, e488 <_vfiprintf_r+0x198>
    e476:	2340      	movs	r3, #64	; 0x40
    e478:	eba0 000a 	sub.w	r0, r0, sl
    e47c:	fa03 f000 	lsl.w	r0, r3, r0
    e480:	9b04      	ldr	r3, [sp, #16]
    e482:	4303      	orrs	r3, r0
    e484:	3401      	adds	r4, #1
    e486:	9304      	str	r3, [sp, #16]
    e488:	f814 1b01 	ldrb.w	r1, [r4], #1
    e48c:	482d      	ldr	r0, [pc, #180]	; (e544 <_vfiprintf_r+0x254>)
    e48e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    e492:	2206      	movs	r2, #6
    e494:	f7f1 fe34 	bl	100 <memchr>
    e498:	2800      	cmp	r0, #0
    e49a:	d03f      	beq.n	e51c <_vfiprintf_r+0x22c>
    e49c:	4b2a      	ldr	r3, [pc, #168]	; (e548 <_vfiprintf_r+0x258>)
    e49e:	bb1b      	cbnz	r3, e4e8 <_vfiprintf_r+0x1f8>
    e4a0:	9b03      	ldr	r3, [sp, #12]
    e4a2:	3307      	adds	r3, #7
    e4a4:	f023 0307 	bic.w	r3, r3, #7
    e4a8:	3308      	adds	r3, #8
    e4aa:	9303      	str	r3, [sp, #12]
    e4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e4ae:	443b      	add	r3, r7
    e4b0:	9309      	str	r3, [sp, #36]	; 0x24
    e4b2:	e767      	b.n	e384 <_vfiprintf_r+0x94>
    e4b4:	fb0c 3202 	mla	r2, ip, r2, r3
    e4b8:	460c      	mov	r4, r1
    e4ba:	2001      	movs	r0, #1
    e4bc:	e7a5      	b.n	e40a <_vfiprintf_r+0x11a>
    e4be:	2300      	movs	r3, #0
    e4c0:	3401      	adds	r4, #1
    e4c2:	9305      	str	r3, [sp, #20]
    e4c4:	4619      	mov	r1, r3
    e4c6:	f04f 0c0a 	mov.w	ip, #10
    e4ca:	4620      	mov	r0, r4
    e4cc:	f810 2b01 	ldrb.w	r2, [r0], #1
    e4d0:	3a30      	subs	r2, #48	; 0x30
    e4d2:	2a09      	cmp	r2, #9
    e4d4:	d903      	bls.n	e4de <_vfiprintf_r+0x1ee>
    e4d6:	2b00      	cmp	r3, #0
    e4d8:	d0c5      	beq.n	e466 <_vfiprintf_r+0x176>
    e4da:	9105      	str	r1, [sp, #20]
    e4dc:	e7c3      	b.n	e466 <_vfiprintf_r+0x176>
    e4de:	fb0c 2101 	mla	r1, ip, r1, r2
    e4e2:	4604      	mov	r4, r0
    e4e4:	2301      	movs	r3, #1
    e4e6:	e7f0      	b.n	e4ca <_vfiprintf_r+0x1da>
    e4e8:	ab03      	add	r3, sp, #12
    e4ea:	9300      	str	r3, [sp, #0]
    e4ec:	462a      	mov	r2, r5
    e4ee:	4b17      	ldr	r3, [pc, #92]	; (e54c <_vfiprintf_r+0x25c>)
    e4f0:	a904      	add	r1, sp, #16
    e4f2:	4630      	mov	r0, r6
    e4f4:	f3af 8000 	nop.w
    e4f8:	4607      	mov	r7, r0
    e4fa:	1c78      	adds	r0, r7, #1
    e4fc:	d1d6      	bne.n	e4ac <_vfiprintf_r+0x1bc>
    e4fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    e500:	07d9      	lsls	r1, r3, #31
    e502:	d405      	bmi.n	e510 <_vfiprintf_r+0x220>
    e504:	89ab      	ldrh	r3, [r5, #12]
    e506:	059a      	lsls	r2, r3, #22
    e508:	d402      	bmi.n	e510 <_vfiprintf_r+0x220>
    e50a:	6da8      	ldr	r0, [r5, #88]	; 0x58
    e50c:	f7f8 fc2a 	bl	6d64 <__retarget_lock_release_recursive>
    e510:	89ab      	ldrh	r3, [r5, #12]
    e512:	065b      	lsls	r3, r3, #25
    e514:	f53f af12 	bmi.w	e33c <_vfiprintf_r+0x4c>
    e518:	9809      	ldr	r0, [sp, #36]	; 0x24
    e51a:	e711      	b.n	e340 <_vfiprintf_r+0x50>
    e51c:	ab03      	add	r3, sp, #12
    e51e:	9300      	str	r3, [sp, #0]
    e520:	462a      	mov	r2, r5
    e522:	4b0a      	ldr	r3, [pc, #40]	; (e54c <_vfiprintf_r+0x25c>)
    e524:	a904      	add	r1, sp, #16
    e526:	4630      	mov	r0, r6
    e528:	f000 f812 	bl	e550 <_printf_i>
    e52c:	e7e4      	b.n	e4f8 <_vfiprintf_r+0x208>
    e52e:	bf00      	nop
    e530:	000133a4 	.word	0x000133a4
    e534:	000133c4 	.word	0x000133c4
    e538:	00013384 	.word	0x00013384
    e53c:	00013627 	.word	0x00013627
    e540:	0001362d 	.word	0x0001362d
    e544:	00013631 	.word	0x00013631
    e548:	00000000 	.word	0x00000000
    e54c:	00010a99 	.word	0x00010a99

0000e550 <_printf_i>:
    e550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    e554:	7e0f      	ldrb	r7, [r1, #24]
    e556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    e558:	2f78      	cmp	r7, #120	; 0x78
    e55a:	4691      	mov	r9, r2
    e55c:	4680      	mov	r8, r0
    e55e:	460c      	mov	r4, r1
    e560:	469a      	mov	sl, r3
    e562:	f101 0243 	add.w	r2, r1, #67	; 0x43
    e566:	d807      	bhi.n	e578 <_printf_i+0x28>
    e568:	2f62      	cmp	r7, #98	; 0x62
    e56a:	d80a      	bhi.n	e582 <_printf_i+0x32>
    e56c:	2f00      	cmp	r7, #0
    e56e:	f000 80d8 	beq.w	e722 <_printf_i+0x1d2>
    e572:	2f58      	cmp	r7, #88	; 0x58
    e574:	f000 80a3 	beq.w	e6be <_printf_i+0x16e>
    e578:	f104 0542 	add.w	r5, r4, #66	; 0x42
    e57c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    e580:	e03a      	b.n	e5f8 <_printf_i+0xa8>
    e582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    e586:	2b15      	cmp	r3, #21
    e588:	d8f6      	bhi.n	e578 <_printf_i+0x28>
    e58a:	a101      	add	r1, pc, #4	; (adr r1, e590 <_printf_i+0x40>)
    e58c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    e590:	0000e5e9 	.word	0x0000e5e9
    e594:	0000e5fd 	.word	0x0000e5fd
    e598:	0000e579 	.word	0x0000e579
    e59c:	0000e579 	.word	0x0000e579
    e5a0:	0000e579 	.word	0x0000e579
    e5a4:	0000e579 	.word	0x0000e579
    e5a8:	0000e5fd 	.word	0x0000e5fd
    e5ac:	0000e579 	.word	0x0000e579
    e5b0:	0000e579 	.word	0x0000e579
    e5b4:	0000e579 	.word	0x0000e579
    e5b8:	0000e579 	.word	0x0000e579
    e5bc:	0000e709 	.word	0x0000e709
    e5c0:	0000e62d 	.word	0x0000e62d
    e5c4:	0000e6eb 	.word	0x0000e6eb
    e5c8:	0000e579 	.word	0x0000e579
    e5cc:	0000e579 	.word	0x0000e579
    e5d0:	0000e72b 	.word	0x0000e72b
    e5d4:	0000e579 	.word	0x0000e579
    e5d8:	0000e62d 	.word	0x0000e62d
    e5dc:	0000e579 	.word	0x0000e579
    e5e0:	0000e579 	.word	0x0000e579
    e5e4:	0000e6f3 	.word	0x0000e6f3
    e5e8:	682b      	ldr	r3, [r5, #0]
    e5ea:	1d1a      	adds	r2, r3, #4
    e5ec:	681b      	ldr	r3, [r3, #0]
    e5ee:	602a      	str	r2, [r5, #0]
    e5f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
    e5f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    e5f8:	2301      	movs	r3, #1
    e5fa:	e0a3      	b.n	e744 <_printf_i+0x1f4>
    e5fc:	6820      	ldr	r0, [r4, #0]
    e5fe:	6829      	ldr	r1, [r5, #0]
    e600:	0606      	lsls	r6, r0, #24
    e602:	f101 0304 	add.w	r3, r1, #4
    e606:	d50a      	bpl.n	e61e <_printf_i+0xce>
    e608:	680e      	ldr	r6, [r1, #0]
    e60a:	602b      	str	r3, [r5, #0]
    e60c:	2e00      	cmp	r6, #0
    e60e:	da03      	bge.n	e618 <_printf_i+0xc8>
    e610:	232d      	movs	r3, #45	; 0x2d
    e612:	4276      	negs	r6, r6
    e614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    e618:	485e      	ldr	r0, [pc, #376]	; (e794 <_printf_i+0x244>)
    e61a:	230a      	movs	r3, #10
    e61c:	e019      	b.n	e652 <_printf_i+0x102>
    e61e:	680e      	ldr	r6, [r1, #0]
    e620:	602b      	str	r3, [r5, #0]
    e622:	f010 0f40 	tst.w	r0, #64	; 0x40
    e626:	bf18      	it	ne
    e628:	b236      	sxthne	r6, r6
    e62a:	e7ef      	b.n	e60c <_printf_i+0xbc>
    e62c:	682b      	ldr	r3, [r5, #0]
    e62e:	6820      	ldr	r0, [r4, #0]
    e630:	1d19      	adds	r1, r3, #4
    e632:	6029      	str	r1, [r5, #0]
    e634:	0601      	lsls	r1, r0, #24
    e636:	d501      	bpl.n	e63c <_printf_i+0xec>
    e638:	681e      	ldr	r6, [r3, #0]
    e63a:	e002      	b.n	e642 <_printf_i+0xf2>
    e63c:	0646      	lsls	r6, r0, #25
    e63e:	d5fb      	bpl.n	e638 <_printf_i+0xe8>
    e640:	881e      	ldrh	r6, [r3, #0]
    e642:	4854      	ldr	r0, [pc, #336]	; (e794 <_printf_i+0x244>)
    e644:	2f6f      	cmp	r7, #111	; 0x6f
    e646:	bf0c      	ite	eq
    e648:	2308      	moveq	r3, #8
    e64a:	230a      	movne	r3, #10
    e64c:	2100      	movs	r1, #0
    e64e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    e652:	6865      	ldr	r5, [r4, #4]
    e654:	60a5      	str	r5, [r4, #8]
    e656:	2d00      	cmp	r5, #0
    e658:	bfa2      	ittt	ge
    e65a:	6821      	ldrge	r1, [r4, #0]
    e65c:	f021 0104 	bicge.w	r1, r1, #4
    e660:	6021      	strge	r1, [r4, #0]
    e662:	b90e      	cbnz	r6, e668 <_printf_i+0x118>
    e664:	2d00      	cmp	r5, #0
    e666:	d04d      	beq.n	e704 <_printf_i+0x1b4>
    e668:	4615      	mov	r5, r2
    e66a:	fbb6 f1f3 	udiv	r1, r6, r3
    e66e:	fb03 6711 	mls	r7, r3, r1, r6
    e672:	5dc7      	ldrb	r7, [r0, r7]
    e674:	f805 7d01 	strb.w	r7, [r5, #-1]!
    e678:	4637      	mov	r7, r6
    e67a:	42bb      	cmp	r3, r7
    e67c:	460e      	mov	r6, r1
    e67e:	d9f4      	bls.n	e66a <_printf_i+0x11a>
    e680:	2b08      	cmp	r3, #8
    e682:	d10b      	bne.n	e69c <_printf_i+0x14c>
    e684:	6823      	ldr	r3, [r4, #0]
    e686:	07de      	lsls	r6, r3, #31
    e688:	d508      	bpl.n	e69c <_printf_i+0x14c>
    e68a:	6923      	ldr	r3, [r4, #16]
    e68c:	6861      	ldr	r1, [r4, #4]
    e68e:	4299      	cmp	r1, r3
    e690:	bfde      	ittt	le
    e692:	2330      	movle	r3, #48	; 0x30
    e694:	f805 3c01 	strble.w	r3, [r5, #-1]
    e698:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    e69c:	1b52      	subs	r2, r2, r5
    e69e:	6122      	str	r2, [r4, #16]
    e6a0:	f8cd a000 	str.w	sl, [sp]
    e6a4:	464b      	mov	r3, r9
    e6a6:	aa03      	add	r2, sp, #12
    e6a8:	4621      	mov	r1, r4
    e6aa:	4640      	mov	r0, r8
    e6ac:	f002 fa06 	bl	10abc <_printf_common>
    e6b0:	3001      	adds	r0, #1
    e6b2:	d14c      	bne.n	e74e <_printf_i+0x1fe>
    e6b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e6b8:	b004      	add	sp, #16
    e6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e6be:	4835      	ldr	r0, [pc, #212]	; (e794 <_printf_i+0x244>)
    e6c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
    e6c4:	6829      	ldr	r1, [r5, #0]
    e6c6:	6823      	ldr	r3, [r4, #0]
    e6c8:	f851 6b04 	ldr.w	r6, [r1], #4
    e6cc:	6029      	str	r1, [r5, #0]
    e6ce:	061d      	lsls	r5, r3, #24
    e6d0:	d514      	bpl.n	e6fc <_printf_i+0x1ac>
    e6d2:	07df      	lsls	r7, r3, #31
    e6d4:	bf44      	itt	mi
    e6d6:	f043 0320 	orrmi.w	r3, r3, #32
    e6da:	6023      	strmi	r3, [r4, #0]
    e6dc:	b91e      	cbnz	r6, e6e6 <_printf_i+0x196>
    e6de:	6823      	ldr	r3, [r4, #0]
    e6e0:	f023 0320 	bic.w	r3, r3, #32
    e6e4:	6023      	str	r3, [r4, #0]
    e6e6:	2310      	movs	r3, #16
    e6e8:	e7b0      	b.n	e64c <_printf_i+0xfc>
    e6ea:	6823      	ldr	r3, [r4, #0]
    e6ec:	f043 0320 	orr.w	r3, r3, #32
    e6f0:	6023      	str	r3, [r4, #0]
    e6f2:	2378      	movs	r3, #120	; 0x78
    e6f4:	4828      	ldr	r0, [pc, #160]	; (e798 <_printf_i+0x248>)
    e6f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    e6fa:	e7e3      	b.n	e6c4 <_printf_i+0x174>
    e6fc:	0659      	lsls	r1, r3, #25
    e6fe:	bf48      	it	mi
    e700:	b2b6      	uxthmi	r6, r6
    e702:	e7e6      	b.n	e6d2 <_printf_i+0x182>
    e704:	4615      	mov	r5, r2
    e706:	e7bb      	b.n	e680 <_printf_i+0x130>
    e708:	682b      	ldr	r3, [r5, #0]
    e70a:	6826      	ldr	r6, [r4, #0]
    e70c:	6961      	ldr	r1, [r4, #20]
    e70e:	1d18      	adds	r0, r3, #4
    e710:	6028      	str	r0, [r5, #0]
    e712:	0635      	lsls	r5, r6, #24
    e714:	681b      	ldr	r3, [r3, #0]
    e716:	d501      	bpl.n	e71c <_printf_i+0x1cc>
    e718:	6019      	str	r1, [r3, #0]
    e71a:	e002      	b.n	e722 <_printf_i+0x1d2>
    e71c:	0670      	lsls	r0, r6, #25
    e71e:	d5fb      	bpl.n	e718 <_printf_i+0x1c8>
    e720:	8019      	strh	r1, [r3, #0]
    e722:	2300      	movs	r3, #0
    e724:	6123      	str	r3, [r4, #16]
    e726:	4615      	mov	r5, r2
    e728:	e7ba      	b.n	e6a0 <_printf_i+0x150>
    e72a:	682b      	ldr	r3, [r5, #0]
    e72c:	1d1a      	adds	r2, r3, #4
    e72e:	602a      	str	r2, [r5, #0]
    e730:	681d      	ldr	r5, [r3, #0]
    e732:	6862      	ldr	r2, [r4, #4]
    e734:	2100      	movs	r1, #0
    e736:	4628      	mov	r0, r5
    e738:	f7f1 fce2 	bl	100 <memchr>
    e73c:	b108      	cbz	r0, e742 <_printf_i+0x1f2>
    e73e:	1b40      	subs	r0, r0, r5
    e740:	6060      	str	r0, [r4, #4]
    e742:	6863      	ldr	r3, [r4, #4]
    e744:	6123      	str	r3, [r4, #16]
    e746:	2300      	movs	r3, #0
    e748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    e74c:	e7a8      	b.n	e6a0 <_printf_i+0x150>
    e74e:	6923      	ldr	r3, [r4, #16]
    e750:	462a      	mov	r2, r5
    e752:	4649      	mov	r1, r9
    e754:	4640      	mov	r0, r8
    e756:	47d0      	blx	sl
    e758:	3001      	adds	r0, #1
    e75a:	d0ab      	beq.n	e6b4 <_printf_i+0x164>
    e75c:	6823      	ldr	r3, [r4, #0]
    e75e:	079b      	lsls	r3, r3, #30
    e760:	d413      	bmi.n	e78a <_printf_i+0x23a>
    e762:	68e0      	ldr	r0, [r4, #12]
    e764:	9b03      	ldr	r3, [sp, #12]
    e766:	4298      	cmp	r0, r3
    e768:	bfb8      	it	lt
    e76a:	4618      	movlt	r0, r3
    e76c:	e7a4      	b.n	e6b8 <_printf_i+0x168>
    e76e:	2301      	movs	r3, #1
    e770:	4632      	mov	r2, r6
    e772:	4649      	mov	r1, r9
    e774:	4640      	mov	r0, r8
    e776:	47d0      	blx	sl
    e778:	3001      	adds	r0, #1
    e77a:	d09b      	beq.n	e6b4 <_printf_i+0x164>
    e77c:	3501      	adds	r5, #1
    e77e:	68e3      	ldr	r3, [r4, #12]
    e780:	9903      	ldr	r1, [sp, #12]
    e782:	1a5b      	subs	r3, r3, r1
    e784:	42ab      	cmp	r3, r5
    e786:	dcf2      	bgt.n	e76e <_printf_i+0x21e>
    e788:	e7eb      	b.n	e762 <_printf_i+0x212>
    e78a:	2500      	movs	r5, #0
    e78c:	f104 0619 	add.w	r6, r4, #25
    e790:	e7f5      	b.n	e77e <_printf_i+0x22e>
    e792:	bf00      	nop
    e794:	00013638 	.word	0x00013638
    e798:	00013649 	.word	0x00013649

0000e79c <_read_r>:
    e79c:	b538      	push	{r3, r4, r5, lr}
    e79e:	4d07      	ldr	r5, [pc, #28]	; (e7bc <_read_r+0x20>)
    e7a0:	4604      	mov	r4, r0
    e7a2:	4608      	mov	r0, r1
    e7a4:	4611      	mov	r1, r2
    e7a6:	2200      	movs	r2, #0
    e7a8:	602a      	str	r2, [r5, #0]
    e7aa:	461a      	mov	r2, r3
    e7ac:	f000 fe94 	bl	f4d8 <_read>
    e7b0:	1c43      	adds	r3, r0, #1
    e7b2:	d102      	bne.n	e7ba <_read_r+0x1e>
    e7b4:	682b      	ldr	r3, [r5, #0]
    e7b6:	b103      	cbz	r3, e7ba <_read_r+0x1e>
    e7b8:	6023      	str	r3, [r4, #0]
    e7ba:	bd38      	pop	{r3, r4, r5, pc}
    e7bc:	2000d53c 	.word	0x2000d53c

0000e7c0 <__swbuf_r>:
    e7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e7c2:	460e      	mov	r6, r1
    e7c4:	4614      	mov	r4, r2
    e7c6:	4605      	mov	r5, r0
    e7c8:	b118      	cbz	r0, e7d2 <__swbuf_r+0x12>
    e7ca:	6983      	ldr	r3, [r0, #24]
    e7cc:	b90b      	cbnz	r3, e7d2 <__swbuf_r+0x12>
    e7ce:	f7ff f89b 	bl	d908 <__sinit>
    e7d2:	4b21      	ldr	r3, [pc, #132]	; (e858 <__swbuf_r+0x98>)
    e7d4:	429c      	cmp	r4, r3
    e7d6:	d12b      	bne.n	e830 <__swbuf_r+0x70>
    e7d8:	686c      	ldr	r4, [r5, #4]
    e7da:	69a3      	ldr	r3, [r4, #24]
    e7dc:	60a3      	str	r3, [r4, #8]
    e7de:	89a3      	ldrh	r3, [r4, #12]
    e7e0:	071a      	lsls	r2, r3, #28
    e7e2:	d52f      	bpl.n	e844 <__swbuf_r+0x84>
    e7e4:	6923      	ldr	r3, [r4, #16]
    e7e6:	b36b      	cbz	r3, e844 <__swbuf_r+0x84>
    e7e8:	6923      	ldr	r3, [r4, #16]
    e7ea:	6820      	ldr	r0, [r4, #0]
    e7ec:	1ac0      	subs	r0, r0, r3
    e7ee:	6963      	ldr	r3, [r4, #20]
    e7f0:	b2f6      	uxtb	r6, r6
    e7f2:	4283      	cmp	r3, r0
    e7f4:	4637      	mov	r7, r6
    e7f6:	dc04      	bgt.n	e802 <__swbuf_r+0x42>
    e7f8:	4621      	mov	r1, r4
    e7fa:	4628      	mov	r0, r5
    e7fc:	f7fe fff4 	bl	d7e8 <_fflush_r>
    e800:	bb30      	cbnz	r0, e850 <__swbuf_r+0x90>
    e802:	68a3      	ldr	r3, [r4, #8]
    e804:	3b01      	subs	r3, #1
    e806:	60a3      	str	r3, [r4, #8]
    e808:	6823      	ldr	r3, [r4, #0]
    e80a:	1c5a      	adds	r2, r3, #1
    e80c:	6022      	str	r2, [r4, #0]
    e80e:	701e      	strb	r6, [r3, #0]
    e810:	6963      	ldr	r3, [r4, #20]
    e812:	3001      	adds	r0, #1
    e814:	4283      	cmp	r3, r0
    e816:	d004      	beq.n	e822 <__swbuf_r+0x62>
    e818:	89a3      	ldrh	r3, [r4, #12]
    e81a:	07db      	lsls	r3, r3, #31
    e81c:	d506      	bpl.n	e82c <__swbuf_r+0x6c>
    e81e:	2e0a      	cmp	r6, #10
    e820:	d104      	bne.n	e82c <__swbuf_r+0x6c>
    e822:	4621      	mov	r1, r4
    e824:	4628      	mov	r0, r5
    e826:	f7fe ffdf 	bl	d7e8 <_fflush_r>
    e82a:	b988      	cbnz	r0, e850 <__swbuf_r+0x90>
    e82c:	4638      	mov	r0, r7
    e82e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e830:	4b0a      	ldr	r3, [pc, #40]	; (e85c <__swbuf_r+0x9c>)
    e832:	429c      	cmp	r4, r3
    e834:	d101      	bne.n	e83a <__swbuf_r+0x7a>
    e836:	68ac      	ldr	r4, [r5, #8]
    e838:	e7cf      	b.n	e7da <__swbuf_r+0x1a>
    e83a:	4b09      	ldr	r3, [pc, #36]	; (e860 <__swbuf_r+0xa0>)
    e83c:	429c      	cmp	r4, r3
    e83e:	bf08      	it	eq
    e840:	68ec      	ldreq	r4, [r5, #12]
    e842:	e7ca      	b.n	e7da <__swbuf_r+0x1a>
    e844:	4621      	mov	r1, r4
    e846:	4628      	mov	r0, r5
    e848:	f000 f80c 	bl	e864 <__swsetup_r>
    e84c:	2800      	cmp	r0, #0
    e84e:	d0cb      	beq.n	e7e8 <__swbuf_r+0x28>
    e850:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    e854:	e7ea      	b.n	e82c <__swbuf_r+0x6c>
    e856:	bf00      	nop
    e858:	000133a4 	.word	0x000133a4
    e85c:	000133c4 	.word	0x000133c4
    e860:	00013384 	.word	0x00013384

0000e864 <__swsetup_r>:
    e864:	4b32      	ldr	r3, [pc, #200]	; (e930 <__swsetup_r+0xcc>)
    e866:	b570      	push	{r4, r5, r6, lr}
    e868:	681d      	ldr	r5, [r3, #0]
    e86a:	4606      	mov	r6, r0
    e86c:	460c      	mov	r4, r1
    e86e:	b125      	cbz	r5, e87a <__swsetup_r+0x16>
    e870:	69ab      	ldr	r3, [r5, #24]
    e872:	b913      	cbnz	r3, e87a <__swsetup_r+0x16>
    e874:	4628      	mov	r0, r5
    e876:	f7ff f847 	bl	d908 <__sinit>
    e87a:	4b2e      	ldr	r3, [pc, #184]	; (e934 <__swsetup_r+0xd0>)
    e87c:	429c      	cmp	r4, r3
    e87e:	d10f      	bne.n	e8a0 <__swsetup_r+0x3c>
    e880:	686c      	ldr	r4, [r5, #4]
    e882:	89a3      	ldrh	r3, [r4, #12]
    e884:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    e888:	0719      	lsls	r1, r3, #28
    e88a:	d42c      	bmi.n	e8e6 <__swsetup_r+0x82>
    e88c:	06dd      	lsls	r5, r3, #27
    e88e:	d411      	bmi.n	e8b4 <__swsetup_r+0x50>
    e890:	2309      	movs	r3, #9
    e892:	6033      	str	r3, [r6, #0]
    e894:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    e898:	81a3      	strh	r3, [r4, #12]
    e89a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e89e:	e03e      	b.n	e91e <__swsetup_r+0xba>
    e8a0:	4b25      	ldr	r3, [pc, #148]	; (e938 <__swsetup_r+0xd4>)
    e8a2:	429c      	cmp	r4, r3
    e8a4:	d101      	bne.n	e8aa <__swsetup_r+0x46>
    e8a6:	68ac      	ldr	r4, [r5, #8]
    e8a8:	e7eb      	b.n	e882 <__swsetup_r+0x1e>
    e8aa:	4b24      	ldr	r3, [pc, #144]	; (e93c <__swsetup_r+0xd8>)
    e8ac:	429c      	cmp	r4, r3
    e8ae:	bf08      	it	eq
    e8b0:	68ec      	ldreq	r4, [r5, #12]
    e8b2:	e7e6      	b.n	e882 <__swsetup_r+0x1e>
    e8b4:	0758      	lsls	r0, r3, #29
    e8b6:	d512      	bpl.n	e8de <__swsetup_r+0x7a>
    e8b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e8ba:	b141      	cbz	r1, e8ce <__swsetup_r+0x6a>
    e8bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
    e8c0:	4299      	cmp	r1, r3
    e8c2:	d002      	beq.n	e8ca <__swsetup_r+0x66>
    e8c4:	4630      	mov	r0, r6
    e8c6:	f7ff f8ad 	bl	da24 <_free_r>
    e8ca:	2300      	movs	r3, #0
    e8cc:	6363      	str	r3, [r4, #52]	; 0x34
    e8ce:	89a3      	ldrh	r3, [r4, #12]
    e8d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    e8d4:	81a3      	strh	r3, [r4, #12]
    e8d6:	2300      	movs	r3, #0
    e8d8:	6063      	str	r3, [r4, #4]
    e8da:	6923      	ldr	r3, [r4, #16]
    e8dc:	6023      	str	r3, [r4, #0]
    e8de:	89a3      	ldrh	r3, [r4, #12]
    e8e0:	f043 0308 	orr.w	r3, r3, #8
    e8e4:	81a3      	strh	r3, [r4, #12]
    e8e6:	6923      	ldr	r3, [r4, #16]
    e8e8:	b94b      	cbnz	r3, e8fe <__swsetup_r+0x9a>
    e8ea:	89a3      	ldrh	r3, [r4, #12]
    e8ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
    e8f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    e8f4:	d003      	beq.n	e8fe <__swsetup_r+0x9a>
    e8f6:	4621      	mov	r1, r4
    e8f8:	4630      	mov	r0, r6
    e8fa:	f000 f851 	bl	e9a0 <__smakebuf_r>
    e8fe:	89a0      	ldrh	r0, [r4, #12]
    e900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    e904:	f010 0301 	ands.w	r3, r0, #1
    e908:	d00a      	beq.n	e920 <__swsetup_r+0xbc>
    e90a:	2300      	movs	r3, #0
    e90c:	60a3      	str	r3, [r4, #8]
    e90e:	6963      	ldr	r3, [r4, #20]
    e910:	425b      	negs	r3, r3
    e912:	61a3      	str	r3, [r4, #24]
    e914:	6923      	ldr	r3, [r4, #16]
    e916:	b943      	cbnz	r3, e92a <__swsetup_r+0xc6>
    e918:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    e91c:	d1ba      	bne.n	e894 <__swsetup_r+0x30>
    e91e:	bd70      	pop	{r4, r5, r6, pc}
    e920:	0781      	lsls	r1, r0, #30
    e922:	bf58      	it	pl
    e924:	6963      	ldrpl	r3, [r4, #20]
    e926:	60a3      	str	r3, [r4, #8]
    e928:	e7f4      	b.n	e914 <__swsetup_r+0xb0>
    e92a:	2000      	movs	r0, #0
    e92c:	e7f7      	b.n	e91e <__swsetup_r+0xba>
    e92e:	bf00      	nop
    e930:	20004104 	.word	0x20004104
    e934:	000133a4 	.word	0x000133a4
    e938:	000133c4 	.word	0x000133c4
    e93c:	00013384 	.word	0x00013384

0000e940 <__assert_func>:
    e940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    e942:	4614      	mov	r4, r2
    e944:	461a      	mov	r2, r3
    e946:	4b09      	ldr	r3, [pc, #36]	; (e96c <__assert_func+0x2c>)
    e948:	681b      	ldr	r3, [r3, #0]
    e94a:	4605      	mov	r5, r0
    e94c:	68d8      	ldr	r0, [r3, #12]
    e94e:	b14c      	cbz	r4, e964 <__assert_func+0x24>
    e950:	4b07      	ldr	r3, [pc, #28]	; (e970 <__assert_func+0x30>)
    e952:	9100      	str	r1, [sp, #0]
    e954:	e9cd 3401 	strd	r3, r4, [sp, #4]
    e958:	4906      	ldr	r1, [pc, #24]	; (e974 <__assert_func+0x34>)
    e95a:	462b      	mov	r3, r5
    e95c:	f000 f80e 	bl	e97c <fiprintf>
    e960:	f002 f9cd 	bl	10cfe <abort>
    e964:	4b04      	ldr	r3, [pc, #16]	; (e978 <__assert_func+0x38>)
    e966:	461c      	mov	r4, r3
    e968:	e7f3      	b.n	e952 <__assert_func+0x12>
    e96a:	bf00      	nop
    e96c:	20004104 	.word	0x20004104
    e970:	0001365a 	.word	0x0001365a
    e974:	00013667 	.word	0x00013667
    e978:	00013695 	.word	0x00013695

0000e97c <fiprintf>:
    e97c:	b40e      	push	{r1, r2, r3}
    e97e:	b503      	push	{r0, r1, lr}
    e980:	4601      	mov	r1, r0
    e982:	ab03      	add	r3, sp, #12
    e984:	4805      	ldr	r0, [pc, #20]	; (e99c <fiprintf+0x20>)
    e986:	f853 2b04 	ldr.w	r2, [r3], #4
    e98a:	6800      	ldr	r0, [r0, #0]
    e98c:	9301      	str	r3, [sp, #4]
    e98e:	f7ff fcaf 	bl	e2f0 <_vfiprintf_r>
    e992:	b002      	add	sp, #8
    e994:	f85d eb04 	ldr.w	lr, [sp], #4
    e998:	b003      	add	sp, #12
    e99a:	4770      	bx	lr
    e99c:	20004104 	.word	0x20004104

0000e9a0 <__smakebuf_r>:
    e9a0:	898b      	ldrh	r3, [r1, #12]
    e9a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e9a4:	079d      	lsls	r5, r3, #30
    e9a6:	4606      	mov	r6, r0
    e9a8:	460c      	mov	r4, r1
    e9aa:	d507      	bpl.n	e9bc <__smakebuf_r+0x1c>
    e9ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
    e9b0:	6023      	str	r3, [r4, #0]
    e9b2:	6123      	str	r3, [r4, #16]
    e9b4:	2301      	movs	r3, #1
    e9b6:	6163      	str	r3, [r4, #20]
    e9b8:	b002      	add	sp, #8
    e9ba:	bd70      	pop	{r4, r5, r6, pc}
    e9bc:	ab01      	add	r3, sp, #4
    e9be:	466a      	mov	r2, sp
    e9c0:	f002 f978 	bl	10cb4 <__swhatbuf_r>
    e9c4:	9900      	ldr	r1, [sp, #0]
    e9c6:	4605      	mov	r5, r0
    e9c8:	4630      	mov	r0, r6
    e9ca:	f7ff f875 	bl	dab8 <_malloc_r>
    e9ce:	b948      	cbnz	r0, e9e4 <__smakebuf_r+0x44>
    e9d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e9d4:	059a      	lsls	r2, r3, #22
    e9d6:	d4ef      	bmi.n	e9b8 <__smakebuf_r+0x18>
    e9d8:	f023 0303 	bic.w	r3, r3, #3
    e9dc:	f043 0302 	orr.w	r3, r3, #2
    e9e0:	81a3      	strh	r3, [r4, #12]
    e9e2:	e7e3      	b.n	e9ac <__smakebuf_r+0xc>
    e9e4:	4b0d      	ldr	r3, [pc, #52]	; (ea1c <__smakebuf_r+0x7c>)
    e9e6:	62b3      	str	r3, [r6, #40]	; 0x28
    e9e8:	89a3      	ldrh	r3, [r4, #12]
    e9ea:	6020      	str	r0, [r4, #0]
    e9ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e9f0:	81a3      	strh	r3, [r4, #12]
    e9f2:	9b00      	ldr	r3, [sp, #0]
    e9f4:	6163      	str	r3, [r4, #20]
    e9f6:	9b01      	ldr	r3, [sp, #4]
    e9f8:	6120      	str	r0, [r4, #16]
    e9fa:	b15b      	cbz	r3, ea14 <__smakebuf_r+0x74>
    e9fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    ea00:	4630      	mov	r0, r6
    ea02:	f000 f81f 	bl	ea44 <_isatty_r>
    ea06:	b128      	cbz	r0, ea14 <__smakebuf_r+0x74>
    ea08:	89a3      	ldrh	r3, [r4, #12]
    ea0a:	f023 0303 	bic.w	r3, r3, #3
    ea0e:	f043 0301 	orr.w	r3, r3, #1
    ea12:	81a3      	strh	r3, [r4, #12]
    ea14:	89a0      	ldrh	r0, [r4, #12]
    ea16:	4305      	orrs	r5, r0
    ea18:	81a5      	strh	r5, [r4, #12]
    ea1a:	e7cd      	b.n	e9b8 <__smakebuf_r+0x18>
    ea1c:	0000d8cd 	.word	0x0000d8cd

0000ea20 <_fstat_r>:
    ea20:	b538      	push	{r3, r4, r5, lr}
    ea22:	4d07      	ldr	r5, [pc, #28]	; (ea40 <_fstat_r+0x20>)
    ea24:	2300      	movs	r3, #0
    ea26:	4604      	mov	r4, r0
    ea28:	4608      	mov	r0, r1
    ea2a:	4611      	mov	r1, r2
    ea2c:	602b      	str	r3, [r5, #0]
    ea2e:	f000 fd6d 	bl	f50c <_fstat>
    ea32:	1c43      	adds	r3, r0, #1
    ea34:	d102      	bne.n	ea3c <_fstat_r+0x1c>
    ea36:	682b      	ldr	r3, [r5, #0]
    ea38:	b103      	cbz	r3, ea3c <_fstat_r+0x1c>
    ea3a:	6023      	str	r3, [r4, #0]
    ea3c:	bd38      	pop	{r3, r4, r5, pc}
    ea3e:	bf00      	nop
    ea40:	2000d53c 	.word	0x2000d53c

0000ea44 <_isatty_r>:
    ea44:	b538      	push	{r3, r4, r5, lr}
    ea46:	4d06      	ldr	r5, [pc, #24]	; (ea60 <_isatty_r+0x1c>)
    ea48:	2300      	movs	r3, #0
    ea4a:	4604      	mov	r4, r0
    ea4c:	4608      	mov	r0, r1
    ea4e:	602b      	str	r3, [r5, #0]
    ea50:	f000 fd53 	bl	f4fa <_isatty>
    ea54:	1c43      	adds	r3, r0, #1
    ea56:	d102      	bne.n	ea5e <_isatty_r+0x1a>
    ea58:	682b      	ldr	r3, [r5, #0]
    ea5a:	b103      	cbz	r3, ea5e <_isatty_r+0x1a>
    ea5c:	6023      	str	r3, [r4, #0]
    ea5e:	bd38      	pop	{r3, r4, r5, pc}
    ea60:	2000d53c 	.word	0x2000d53c

0000ea64 <raise>:
    ea64:	4b02      	ldr	r3, [pc, #8]	; (ea70 <raise+0xc>)
    ea66:	4601      	mov	r1, r0
    ea68:	6818      	ldr	r0, [r3, #0]
    ea6a:	f002 b94f 	b.w	10d0c <_raise_r>
    ea6e:	bf00      	nop
    ea70:	20004104 	.word	0x20004104

0000ea74 <_kill_r>:
    ea74:	b538      	push	{r3, r4, r5, lr}
    ea76:	4d07      	ldr	r5, [pc, #28]	; (ea94 <_kill_r+0x20>)
    ea78:	2300      	movs	r3, #0
    ea7a:	4604      	mov	r4, r0
    ea7c:	4608      	mov	r0, r1
    ea7e:	4611      	mov	r1, r2
    ea80:	602b      	str	r3, [r5, #0]
    ea82:	f000 fd3f 	bl	f504 <_kill>
    ea86:	1c43      	adds	r3, r0, #1
    ea88:	d102      	bne.n	ea90 <_kill_r+0x1c>
    ea8a:	682b      	ldr	r3, [r5, #0]
    ea8c:	b103      	cbz	r3, ea90 <_kill_r+0x1c>
    ea8e:	6023      	str	r3, [r4, #0]
    ea90:	bd38      	pop	{r3, r4, r5, pc}
    ea92:	bf00      	nop
    ea94:	2000d53c 	.word	0x2000d53c

0000ea98 <nrf_cc3xx_platform_init_no_rng>:
    ea98:	b510      	push	{r4, lr}
    ea9a:	4c0a      	ldr	r4, [pc, #40]	; (eac4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    ea9c:	6823      	ldr	r3, [r4, #0]
    ea9e:	b11b      	cbz	r3, eaa8 <nrf_cc3xx_platform_init_no_rng+0x10>
    eaa0:	2301      	movs	r3, #1
    eaa2:	6023      	str	r3, [r4, #0]
    eaa4:	2000      	movs	r0, #0
    eaa6:	bd10      	pop	{r4, pc}
    eaa8:	f000 f8ce 	bl	ec48 <CC_LibInitNoRng>
    eaac:	2800      	cmp	r0, #0
    eaae:	d0f7      	beq.n	eaa0 <nrf_cc3xx_platform_init_no_rng+0x8>
    eab0:	3801      	subs	r0, #1
    eab2:	2806      	cmp	r0, #6
    eab4:	d803      	bhi.n	eabe <nrf_cc3xx_platform_init_no_rng+0x26>
    eab6:	4b04      	ldr	r3, [pc, #16]	; (eac8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    eab8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    eabc:	bd10      	pop	{r4, pc}
    eabe:	4803      	ldr	r0, [pc, #12]	; (eacc <nrf_cc3xx_platform_init_no_rng+0x34>)
    eac0:	bd10      	pop	{r4, pc}
    eac2:	bf00      	nop
    eac4:	2000d540 	.word	0x2000d540
    eac8:	000133f4 	.word	0x000133f4
    eacc:	ffff8ffe 	.word	0xffff8ffe

0000ead0 <nrf_cc3xx_platform_abort>:
    ead0:	f3bf 8f4f 	dsb	sy
    ead4:	4905      	ldr	r1, [pc, #20]	; (eaec <nrf_cc3xx_platform_abort+0x1c>)
    ead6:	4b06      	ldr	r3, [pc, #24]	; (eaf0 <nrf_cc3xx_platform_abort+0x20>)
    ead8:	68ca      	ldr	r2, [r1, #12]
    eada:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    eade:	4313      	orrs	r3, r2
    eae0:	60cb      	str	r3, [r1, #12]
    eae2:	f3bf 8f4f 	dsb	sy
    eae6:	bf00      	nop
    eae8:	e7fd      	b.n	eae6 <nrf_cc3xx_platform_abort+0x16>
    eaea:	bf00      	nop
    eaec:	e000ed00 	.word	0xe000ed00
    eaf0:	05fa0004 	.word	0x05fa0004

0000eaf4 <CC_PalAbort>:
    eaf4:	b410      	push	{r4}
    eaf6:	4b09      	ldr	r3, [pc, #36]	; (eb1c <CC_PalAbort+0x28>)
    eaf8:	4909      	ldr	r1, [pc, #36]	; (eb20 <CC_PalAbort+0x2c>)
    eafa:	4c0a      	ldr	r4, [pc, #40]	; (eb24 <CC_PalAbort+0x30>)
    eafc:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    eb00:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    eb04:	6849      	ldr	r1, [r1, #4]
    eb06:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    eb0a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    eb0e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    eb12:	2300      	movs	r3, #0
    eb14:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    eb18:	bc10      	pop	{r4}
    eb1a:	4708      	bx	r1
    eb1c:	5002b000 	.word	0x5002b000
    eb20:	20004168 	.word	0x20004168
    eb24:	5002a000 	.word	0x5002a000

0000eb28 <nrf_cc3xx_platform_set_abort>:
    eb28:	e9d0 1200 	ldrd	r1, r2, [r0]
    eb2c:	4b01      	ldr	r3, [pc, #4]	; (eb34 <nrf_cc3xx_platform_set_abort+0xc>)
    eb2e:	e9c3 1200 	strd	r1, r2, [r3]
    eb32:	4770      	bx	lr
    eb34:	20004168 	.word	0x20004168

0000eb38 <mutex_free>:
    eb38:	b510      	push	{r4, lr}
    eb3a:	4604      	mov	r4, r0
    eb3c:	b130      	cbz	r0, eb4c <mutex_free+0x14>
    eb3e:	6863      	ldr	r3, [r4, #4]
    eb40:	06db      	lsls	r3, r3, #27
    eb42:	d502      	bpl.n	eb4a <mutex_free+0x12>
    eb44:	2300      	movs	r3, #0
    eb46:	6023      	str	r3, [r4, #0]
    eb48:	6063      	str	r3, [r4, #4]
    eb4a:	bd10      	pop	{r4, pc}
    eb4c:	4b02      	ldr	r3, [pc, #8]	; (eb58 <mutex_free+0x20>)
    eb4e:	4803      	ldr	r0, [pc, #12]	; (eb5c <mutex_free+0x24>)
    eb50:	685b      	ldr	r3, [r3, #4]
    eb52:	4798      	blx	r3
    eb54:	e7f3      	b.n	eb3e <mutex_free+0x6>
    eb56:	bf00      	nop
    eb58:	20004168 	.word	0x20004168
    eb5c:	00013410 	.word	0x00013410

0000eb60 <mutex_lock>:
    eb60:	b1b0      	cbz	r0, eb90 <mutex_lock+0x30>
    eb62:	6843      	ldr	r3, [r0, #4]
    eb64:	b193      	cbz	r3, eb8c <mutex_lock+0x2c>
    eb66:	06db      	lsls	r3, r3, #27
    eb68:	d50e      	bpl.n	eb88 <mutex_lock+0x28>
    eb6a:	2301      	movs	r3, #1
    eb6c:	e850 2f00 	ldrex	r2, [r0]
    eb70:	4619      	mov	r1, r3
    eb72:	e840 1c00 	strex	ip, r1, [r0]
    eb76:	f09c 0f00 	teq	ip, #0
    eb7a:	d1f7      	bne.n	eb6c <mutex_lock+0xc>
    eb7c:	2a01      	cmp	r2, #1
    eb7e:	d0f5      	beq.n	eb6c <mutex_lock+0xc>
    eb80:	f3bf 8f5f 	dmb	sy
    eb84:	2000      	movs	r0, #0
    eb86:	4770      	bx	lr
    eb88:	4803      	ldr	r0, [pc, #12]	; (eb98 <mutex_lock+0x38>)
    eb8a:	4770      	bx	lr
    eb8c:	4803      	ldr	r0, [pc, #12]	; (eb9c <mutex_lock+0x3c>)
    eb8e:	4770      	bx	lr
    eb90:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    eb94:	4770      	bx	lr
    eb96:	bf00      	nop
    eb98:	ffff8fe9 	.word	0xffff8fe9
    eb9c:	ffff8fea 	.word	0xffff8fea

0000eba0 <mutex_unlock>:
    eba0:	b168      	cbz	r0, ebbe <mutex_unlock+0x1e>
    eba2:	6843      	ldr	r3, [r0, #4]
    eba4:	b13b      	cbz	r3, ebb6 <mutex_unlock+0x16>
    eba6:	06db      	lsls	r3, r3, #27
    eba8:	d507      	bpl.n	ebba <mutex_unlock+0x1a>
    ebaa:	f3bf 8f5f 	dmb	sy
    ebae:	2300      	movs	r3, #0
    ebb0:	6003      	str	r3, [r0, #0]
    ebb2:	4618      	mov	r0, r3
    ebb4:	4770      	bx	lr
    ebb6:	4803      	ldr	r0, [pc, #12]	; (ebc4 <mutex_unlock+0x24>)
    ebb8:	4770      	bx	lr
    ebba:	4803      	ldr	r0, [pc, #12]	; (ebc8 <mutex_unlock+0x28>)
    ebbc:	4770      	bx	lr
    ebbe:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    ebc2:	4770      	bx	lr
    ebc4:	ffff8fea 	.word	0xffff8fea
    ebc8:	ffff8fe9 	.word	0xffff8fe9

0000ebcc <mutex_init>:
    ebcc:	b510      	push	{r4, lr}
    ebce:	4604      	mov	r4, r0
    ebd0:	b120      	cbz	r0, ebdc <mutex_init+0x10>
    ebd2:	2200      	movs	r2, #0
    ebd4:	2311      	movs	r3, #17
    ebd6:	6022      	str	r2, [r4, #0]
    ebd8:	6063      	str	r3, [r4, #4]
    ebda:	bd10      	pop	{r4, pc}
    ebdc:	4801      	ldr	r0, [pc, #4]	; (ebe4 <mutex_init+0x18>)
    ebde:	f7ff ff89 	bl	eaf4 <CC_PalAbort>
    ebe2:	e7f6      	b.n	ebd2 <mutex_init+0x6>
    ebe4:	00013438 	.word	0x00013438

0000ebe8 <nrf_cc3xx_platform_set_mutexes>:
    ebe8:	b570      	push	{r4, r5, r6, lr}
    ebea:	e9d0 2300 	ldrd	r2, r3, [r0]
    ebee:	4c13      	ldr	r4, [pc, #76]	; (ec3c <nrf_cc3xx_platform_set_mutexes+0x54>)
    ebf0:	4d13      	ldr	r5, [pc, #76]	; (ec40 <nrf_cc3xx_platform_set_mutexes+0x58>)
    ebf2:	6063      	str	r3, [r4, #4]
    ebf4:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    ebf8:	e9c4 3002 	strd	r3, r0, [r4, #8]
    ebfc:	6022      	str	r2, [r4, #0]
    ebfe:	4b11      	ldr	r3, [pc, #68]	; (ec44 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    ec00:	6808      	ldr	r0, [r1, #0]
    ec02:	6018      	str	r0, [r3, #0]
    ec04:	6848      	ldr	r0, [r1, #4]
    ec06:	6058      	str	r0, [r3, #4]
    ec08:	6888      	ldr	r0, [r1, #8]
    ec0a:	6098      	str	r0, [r3, #8]
    ec0c:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    ec10:	60d8      	str	r0, [r3, #12]
    ec12:	6119      	str	r1, [r3, #16]
    ec14:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    ec18:	06db      	lsls	r3, r3, #27
    ec1a:	d50d      	bpl.n	ec38 <nrf_cc3xx_platform_set_mutexes+0x50>
    ec1c:	2300      	movs	r3, #0
    ec1e:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    ec22:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    ec26:	f505 708a 	add.w	r0, r5, #276	; 0x114
    ec2a:	4790      	blx	r2
    ec2c:	6823      	ldr	r3, [r4, #0]
    ec2e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    ec32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ec36:	4718      	bx	r3
    ec38:	bd70      	pop	{r4, r5, r6, pc}
    ec3a:	bf00      	nop
    ec3c:	20004178 	.word	0x20004178
    ec40:	2000d558 	.word	0x2000d558
    ec44:	20004188 	.word	0x20004188

0000ec48 <CC_LibInitNoRng>:
    ec48:	b538      	push	{r3, r4, r5, lr}
    ec4a:	f000 f82f 	bl	ecac <CC_HalInit>
    ec4e:	b120      	cbz	r0, ec5a <CC_LibInitNoRng+0x12>
    ec50:	2403      	movs	r4, #3
    ec52:	f000 f863 	bl	ed1c <CC_PalTerminate>
    ec56:	4620      	mov	r0, r4
    ec58:	bd38      	pop	{r3, r4, r5, pc}
    ec5a:	f000 f831 	bl	ecc0 <CC_PalInit>
    ec5e:	b998      	cbnz	r0, ec88 <CC_LibInitNoRng+0x40>
    ec60:	f000 f8ac 	bl	edbc <CC_PalPowerSaveModeSelect>
    ec64:	b998      	cbnz	r0, ec8e <CC_LibInitNoRng+0x46>
    ec66:	4d0f      	ldr	r5, [pc, #60]	; (eca4 <CC_LibInitNoRng+0x5c>)
    ec68:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    ec6c:	0e1b      	lsrs	r3, r3, #24
    ec6e:	2bf0      	cmp	r3, #240	; 0xf0
    ec70:	d108      	bne.n	ec84 <CC_LibInitNoRng+0x3c>
    ec72:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    ec76:	4b0c      	ldr	r3, [pc, #48]	; (eca8 <CC_LibInitNoRng+0x60>)
    ec78:	429a      	cmp	r2, r3
    ec7a:	d00a      	beq.n	ec92 <CC_LibInitNoRng+0x4a>
    ec7c:	2407      	movs	r4, #7
    ec7e:	f000 f817 	bl	ecb0 <CC_HalTerminate>
    ec82:	e7e6      	b.n	ec52 <CC_LibInitNoRng+0xa>
    ec84:	2406      	movs	r4, #6
    ec86:	e7fa      	b.n	ec7e <CC_LibInitNoRng+0x36>
    ec88:	2404      	movs	r4, #4
    ec8a:	4620      	mov	r0, r4
    ec8c:	bd38      	pop	{r3, r4, r5, pc}
    ec8e:	2400      	movs	r4, #0
    ec90:	e7f5      	b.n	ec7e <CC_LibInitNoRng+0x36>
    ec92:	2001      	movs	r0, #1
    ec94:	f000 f892 	bl	edbc <CC_PalPowerSaveModeSelect>
    ec98:	4604      	mov	r4, r0
    ec9a:	2800      	cmp	r0, #0
    ec9c:	d1f7      	bne.n	ec8e <CC_LibInitNoRng+0x46>
    ec9e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    eca2:	e7d8      	b.n	ec56 <CC_LibInitNoRng+0xe>
    eca4:	5002b000 	.word	0x5002b000
    eca8:	20e00000 	.word	0x20e00000

0000ecac <CC_HalInit>:
    ecac:	2000      	movs	r0, #0
    ecae:	4770      	bx	lr

0000ecb0 <CC_HalTerminate>:
    ecb0:	2000      	movs	r0, #0
    ecb2:	4770      	bx	lr

0000ecb4 <CC_HalMaskInterrupt>:
    ecb4:	4b01      	ldr	r3, [pc, #4]	; (ecbc <CC_HalMaskInterrupt+0x8>)
    ecb6:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    ecba:	4770      	bx	lr
    ecbc:	5002b000 	.word	0x5002b000

0000ecc0 <CC_PalInit>:
    ecc0:	b510      	push	{r4, lr}
    ecc2:	4811      	ldr	r0, [pc, #68]	; (ed08 <CC_PalInit+0x48>)
    ecc4:	f000 f848 	bl	ed58 <CC_PalMutexCreate>
    ecc8:	b100      	cbz	r0, eccc <CC_PalInit+0xc>
    ecca:	bd10      	pop	{r4, pc}
    eccc:	480f      	ldr	r0, [pc, #60]	; (ed0c <CC_PalInit+0x4c>)
    ecce:	f000 f843 	bl	ed58 <CC_PalMutexCreate>
    ecd2:	2800      	cmp	r0, #0
    ecd4:	d1f9      	bne.n	ecca <CC_PalInit+0xa>
    ecd6:	4c0e      	ldr	r4, [pc, #56]	; (ed10 <CC_PalInit+0x50>)
    ecd8:	4620      	mov	r0, r4
    ecda:	f000 f83d 	bl	ed58 <CC_PalMutexCreate>
    ecde:	2800      	cmp	r0, #0
    ece0:	d1f3      	bne.n	ecca <CC_PalInit+0xa>
    ece2:	4b0c      	ldr	r3, [pc, #48]	; (ed14 <CC_PalInit+0x54>)
    ece4:	480c      	ldr	r0, [pc, #48]	; (ed18 <CC_PalInit+0x58>)
    ece6:	601c      	str	r4, [r3, #0]
    ece8:	f000 f836 	bl	ed58 <CC_PalMutexCreate>
    ecec:	4601      	mov	r1, r0
    ecee:	2800      	cmp	r0, #0
    ecf0:	d1eb      	bne.n	ecca <CC_PalInit+0xa>
    ecf2:	f000 f82d 	bl	ed50 <CC_PalDmaInit>
    ecf6:	4604      	mov	r4, r0
    ecf8:	b108      	cbz	r0, ecfe <CC_PalInit+0x3e>
    ecfa:	4620      	mov	r0, r4
    ecfc:	bd10      	pop	{r4, pc}
    ecfe:	f000 f83f 	bl	ed80 <CC_PalPowerSaveModeInit>
    ed02:	4620      	mov	r0, r4
    ed04:	e7fa      	b.n	ecfc <CC_PalInit+0x3c>
    ed06:	bf00      	nop
    ed08:	200041c0 	.word	0x200041c0
    ed0c:	200041b4 	.word	0x200041b4
    ed10:	200041bc 	.word	0x200041bc
    ed14:	200041c4 	.word	0x200041c4
    ed18:	200041b8 	.word	0x200041b8

0000ed1c <CC_PalTerminate>:
    ed1c:	b508      	push	{r3, lr}
    ed1e:	4808      	ldr	r0, [pc, #32]	; (ed40 <CC_PalTerminate+0x24>)
    ed20:	f000 f824 	bl	ed6c <CC_PalMutexDestroy>
    ed24:	4807      	ldr	r0, [pc, #28]	; (ed44 <CC_PalTerminate+0x28>)
    ed26:	f000 f821 	bl	ed6c <CC_PalMutexDestroy>
    ed2a:	4807      	ldr	r0, [pc, #28]	; (ed48 <CC_PalTerminate+0x2c>)
    ed2c:	f000 f81e 	bl	ed6c <CC_PalMutexDestroy>
    ed30:	4806      	ldr	r0, [pc, #24]	; (ed4c <CC_PalTerminate+0x30>)
    ed32:	f000 f81b 	bl	ed6c <CC_PalMutexDestroy>
    ed36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ed3a:	f000 b80b 	b.w	ed54 <CC_PalDmaTerminate>
    ed3e:	bf00      	nop
    ed40:	200041c0 	.word	0x200041c0
    ed44:	200041b4 	.word	0x200041b4
    ed48:	200041bc 	.word	0x200041bc
    ed4c:	200041b8 	.word	0x200041b8

0000ed50 <CC_PalDmaInit>:
    ed50:	2000      	movs	r0, #0
    ed52:	4770      	bx	lr

0000ed54 <CC_PalDmaTerminate>:
    ed54:	4770      	bx	lr
    ed56:	bf00      	nop

0000ed58 <CC_PalMutexCreate>:
    ed58:	b508      	push	{r3, lr}
    ed5a:	4b03      	ldr	r3, [pc, #12]	; (ed68 <CC_PalMutexCreate+0x10>)
    ed5c:	6802      	ldr	r2, [r0, #0]
    ed5e:	681b      	ldr	r3, [r3, #0]
    ed60:	6810      	ldr	r0, [r2, #0]
    ed62:	4798      	blx	r3
    ed64:	2000      	movs	r0, #0
    ed66:	bd08      	pop	{r3, pc}
    ed68:	20004178 	.word	0x20004178

0000ed6c <CC_PalMutexDestroy>:
    ed6c:	b508      	push	{r3, lr}
    ed6e:	4b03      	ldr	r3, [pc, #12]	; (ed7c <CC_PalMutexDestroy+0x10>)
    ed70:	6802      	ldr	r2, [r0, #0]
    ed72:	685b      	ldr	r3, [r3, #4]
    ed74:	6810      	ldr	r0, [r2, #0]
    ed76:	4798      	blx	r3
    ed78:	2000      	movs	r0, #0
    ed7a:	bd08      	pop	{r3, pc}
    ed7c:	20004178 	.word	0x20004178

0000ed80 <CC_PalPowerSaveModeInit>:
    ed80:	b570      	push	{r4, r5, r6, lr}
    ed82:	4c09      	ldr	r4, [pc, #36]	; (eda8 <CC_PalPowerSaveModeInit+0x28>)
    ed84:	4d09      	ldr	r5, [pc, #36]	; (edac <CC_PalPowerSaveModeInit+0x2c>)
    ed86:	6920      	ldr	r0, [r4, #16]
    ed88:	68ab      	ldr	r3, [r5, #8]
    ed8a:	4798      	blx	r3
    ed8c:	b118      	cbz	r0, ed96 <CC_PalPowerSaveModeInit+0x16>
    ed8e:	4b08      	ldr	r3, [pc, #32]	; (edb0 <CC_PalPowerSaveModeInit+0x30>)
    ed90:	4808      	ldr	r0, [pc, #32]	; (edb4 <CC_PalPowerSaveModeInit+0x34>)
    ed92:	685b      	ldr	r3, [r3, #4]
    ed94:	4798      	blx	r3
    ed96:	4a08      	ldr	r2, [pc, #32]	; (edb8 <CC_PalPowerSaveModeInit+0x38>)
    ed98:	68eb      	ldr	r3, [r5, #12]
    ed9a:	6920      	ldr	r0, [r4, #16]
    ed9c:	2100      	movs	r1, #0
    ed9e:	6011      	str	r1, [r2, #0]
    eda0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    eda4:	4718      	bx	r3
    eda6:	bf00      	nop
    eda8:	20004188 	.word	0x20004188
    edac:	20004178 	.word	0x20004178
    edb0:	20004168 	.word	0x20004168
    edb4:	0001345c 	.word	0x0001345c
    edb8:	2000d554 	.word	0x2000d554

0000edbc <CC_PalPowerSaveModeSelect>:
    edbc:	b570      	push	{r4, r5, r6, lr}
    edbe:	4d1b      	ldr	r5, [pc, #108]	; (ee2c <CC_PalPowerSaveModeSelect+0x70>)
    edc0:	4e1b      	ldr	r6, [pc, #108]	; (ee30 <CC_PalPowerSaveModeSelect+0x74>)
    edc2:	4604      	mov	r4, r0
    edc4:	68b2      	ldr	r2, [r6, #8]
    edc6:	6928      	ldr	r0, [r5, #16]
    edc8:	4790      	blx	r2
    edca:	b9f8      	cbnz	r0, ee0c <CC_PalPowerSaveModeSelect+0x50>
    edcc:	b15c      	cbz	r4, ede6 <CC_PalPowerSaveModeSelect+0x2a>
    edce:	4c19      	ldr	r4, [pc, #100]	; (ee34 <CC_PalPowerSaveModeSelect+0x78>)
    edd0:	6823      	ldr	r3, [r4, #0]
    edd2:	b1b3      	cbz	r3, ee02 <CC_PalPowerSaveModeSelect+0x46>
    edd4:	2b01      	cmp	r3, #1
    edd6:	d01b      	beq.n	ee10 <CC_PalPowerSaveModeSelect+0x54>
    edd8:	3b01      	subs	r3, #1
    edda:	6023      	str	r3, [r4, #0]
    eddc:	6928      	ldr	r0, [r5, #16]
    edde:	68f3      	ldr	r3, [r6, #12]
    ede0:	4798      	blx	r3
    ede2:	2000      	movs	r0, #0
    ede4:	bd70      	pop	{r4, r5, r6, pc}
    ede6:	4c13      	ldr	r4, [pc, #76]	; (ee34 <CC_PalPowerSaveModeSelect+0x78>)
    ede8:	6821      	ldr	r1, [r4, #0]
    edea:	b941      	cbnz	r1, edfe <CC_PalPowerSaveModeSelect+0x42>
    edec:	4b12      	ldr	r3, [pc, #72]	; (ee38 <CC_PalPowerSaveModeSelect+0x7c>)
    edee:	2201      	movs	r2, #1
    edf0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    edf4:	4a11      	ldr	r2, [pc, #68]	; (ee3c <CC_PalPowerSaveModeSelect+0x80>)
    edf6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    edfa:	2b00      	cmp	r3, #0
    edfc:	d1fb      	bne.n	edf6 <CC_PalPowerSaveModeSelect+0x3a>
    edfe:	3101      	adds	r1, #1
    ee00:	6021      	str	r1, [r4, #0]
    ee02:	68f3      	ldr	r3, [r6, #12]
    ee04:	6928      	ldr	r0, [r5, #16]
    ee06:	4798      	blx	r3
    ee08:	2000      	movs	r0, #0
    ee0a:	bd70      	pop	{r4, r5, r6, pc}
    ee0c:	480c      	ldr	r0, [pc, #48]	; (ee40 <CC_PalPowerSaveModeSelect+0x84>)
    ee0e:	bd70      	pop	{r4, r5, r6, pc}
    ee10:	4a0a      	ldr	r2, [pc, #40]	; (ee3c <CC_PalPowerSaveModeSelect+0x80>)
    ee12:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    ee16:	2b00      	cmp	r3, #0
    ee18:	d1fb      	bne.n	ee12 <CC_PalPowerSaveModeSelect+0x56>
    ee1a:	4a07      	ldr	r2, [pc, #28]	; (ee38 <CC_PalPowerSaveModeSelect+0x7c>)
    ee1c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    ee20:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    ee24:	f7ff ff46 	bl	ecb4 <CC_HalMaskInterrupt>
    ee28:	6823      	ldr	r3, [r4, #0]
    ee2a:	e7d5      	b.n	edd8 <CC_PalPowerSaveModeSelect+0x1c>
    ee2c:	20004188 	.word	0x20004188
    ee30:	20004178 	.word	0x20004178
    ee34:	2000d554 	.word	0x2000d554
    ee38:	5002a000 	.word	0x5002a000
    ee3c:	5002b000 	.word	0x5002b000
    ee40:	ffff8fe9 	.word	0xffff8fe9

0000ee44 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    ee44:	4770      	bx	lr

0000ee46 <castImage>:

void* castImage(void* img, uint8_t** image){
    ee46:	b500      	push	{lr}
    ee48:	4686      	mov	lr, r0
    ee4a:	4608      	mov	r0, r1
    
    for(int i = 0; i < IMGWIDTH; i++){
    ee4c:	2200      	movs	r2, #0
    ee4e:	e00b      	b.n	ee68 <castImage+0x22>
        for(int j = 0; j < IMGWIDTH; j++){
            image[i][j] = ((uint8_t*)img)[i*IMGWIDTH + j];
    ee50:	eb03 1cc2 	add.w	ip, r3, r2, lsl #7
    ee54:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
    ee58:	f81e c00c 	ldrb.w	ip, [lr, ip]
    ee5c:	f801 c003 	strb.w	ip, [r1, r3]
        for(int j = 0; j < IMGWIDTH; j++){
    ee60:	3301      	adds	r3, #1
    ee62:	2b7f      	cmp	r3, #127	; 0x7f
    ee64:	ddf4      	ble.n	ee50 <castImage+0xa>
    for(int i = 0; i < IMGWIDTH; i++){
    ee66:	3201      	adds	r2, #1
    ee68:	2a7f      	cmp	r2, #127	; 0x7f
    ee6a:	dc01      	bgt.n	ee70 <castImage+0x2a>
        for(int j = 0; j < IMGWIDTH; j++){
    ee6c:	2300      	movs	r3, #0
    ee6e:	e7f8      	b.n	ee62 <castImage+0x1c>
        }
    }
    return image;
}
    ee70:	f85d fb04 	ldr.w	pc, [sp], #4

0000ee74 <reserve>:

// returns a new buffer
void *reserve(cab *cab_id)
{
    ee74:	b538      	push	{r3, r4, r5, lr}
    ee76:	4605      	mov	r5, r0
    k_sem_take(cab_id->op_Sem, K_NO_WAIT);
    ee78:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_sem_take(sem, timeout);
    ee7a:	2200      	movs	r2, #0
    ee7c:	2300      	movs	r3, #0
    ee7e:	f7fc f941 	bl	b104 <z_impl_k_sem_take>
    // find a free buffer
    for (size_t i = 0; i < cab_id->num; i++)
    ee82:	2400      	movs	r4, #0
    ee84:	e000      	b.n	ee88 <reserve+0x14>
    ee86:	3401      	adds	r4, #1
    ee88:	68ab      	ldr	r3, [r5, #8]
    ee8a:	42a3      	cmp	r3, r4
    ee8c:	d90d      	bls.n	eeaa <reserve+0x36>
    {
        if (cab_id->buffersTaken[i] == 0)
    ee8e:	696b      	ldr	r3, [r5, #20]
    ee90:	191a      	adds	r2, r3, r4
    ee92:	5d1b      	ldrb	r3, [r3, r4]
    ee94:	2b00      	cmp	r3, #0
    ee96:	d1f6      	bne.n	ee86 <reserve+0x12>
        {
            cab_id->buffersTaken[i] = 1;
    ee98:	2301      	movs	r3, #1
    ee9a:	7013      	strb	r3, [r2, #0]
            k_sem_give(cab_id->op_Sem);
    ee9c:	6828      	ldr	r0, [r5, #0]
	z_impl_k_sem_give(sem);
    ee9e:	f7fc f8ed 	bl	b07c <z_impl_k_sem_give>
            return cab_id->buffers[i];
    eea2:	692b      	ldr	r3, [r5, #16]
    eea4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    eea8:	e003      	b.n	eeb2 <reserve+0x3e>
        }
    }
    k_sem_give(cab_id->op_Sem);
    eeaa:	6828      	ldr	r0, [r5, #0]
    eeac:	f7fc f8e6 	bl	b07c <z_impl_k_sem_give>
    return NULL;
    eeb0:	2000      	movs	r0, #0
}
    eeb2:	bd38      	pop	{r3, r4, r5, pc}

0000eeb4 <put_mes>:

// puts a filled buffer inside the CAB
void put_mes(void *buf_pointer, cab *cab_id)
{
    eeb4:	b538      	push	{r3, r4, r5, lr}
    eeb6:	4605      	mov	r5, r0
    eeb8:	460c      	mov	r4, r1

    k_sem_take(cab_id->op_Sem, K_NO_WAIT);
    eeba:	6808      	ldr	r0, [r1, #0]
	return z_impl_k_sem_take(sem, timeout);
    eebc:	2200      	movs	r2, #0
    eebe:	2300      	movs	r3, #0
    eec0:	f7fc f920 	bl	b104 <z_impl_k_sem_take>
    for (size_t i = 0; i < cab_id->num; i++)
    eec4:	2300      	movs	r3, #0
    eec6:	e000      	b.n	eeca <put_mes+0x16>
    eec8:	3301      	adds	r3, #1
    eeca:	68a2      	ldr	r2, [r4, #8]
    eecc:	429a      	cmp	r2, r3
    eece:	d909      	bls.n	eee4 <put_mes+0x30>
    {
        if (cab_id->buffers[i] == buf_pointer)
    eed0:	6922      	ldr	r2, [r4, #16]
    eed2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    eed6:	42a9      	cmp	r1, r5
    eed8:	d1f6      	bne.n	eec8 <put_mes+0x14>
        {
            cab_id->buffers[0] = cab_id->buffers[i];
    eeda:	6011      	str	r1, [r2, #0]
            cab_id->buffersTaken[i] = 0;
    eedc:	6962      	ldr	r2, [r4, #20]
    eede:	2100      	movs	r1, #0
    eee0:	54d1      	strb	r1, [r2, r3]
    eee2:	e7f1      	b.n	eec8 <put_mes+0x14>
        }
    }
    k_sem_give(cab_id->op_Sem);
    eee4:	6820      	ldr	r0, [r4, #0]
	z_impl_k_sem_give(sem);
    eee6:	f7fc f8c9 	bl	b07c <z_impl_k_sem_give>
}
    eeea:	bd38      	pop	{r3, r4, r5, pc}

0000eeec <get_mes>:

// get latest message
void *get_mes(cab *cab_id)
{
    eeec:	b538      	push	{r3, r4, r5, lr}
    eeee:	4605      	mov	r5, r0
    k_sem_take(cab_id->op_Sem, K_NO_WAIT);
    eef0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_sem_take(sem, timeout);
    eef2:	2200      	movs	r2, #0
    eef4:	2300      	movs	r3, #0
    eef6:	f7fc f905 	bl	b104 <z_impl_k_sem_take>
    // find a free buffer
    for (size_t i = 0; i < cab_id->num; i++)
    eefa:	2400      	movs	r4, #0
    eefc:	e000      	b.n	ef00 <get_mes+0x14>
    eefe:	3401      	adds	r4, #1
    ef00:	68ab      	ldr	r3, [r5, #8]
    ef02:	42a3      	cmp	r3, r4
    ef04:	d911      	bls.n	ef2a <get_mes+0x3e>
    {
        if (cab_id->buffersTaken[i] == 0)
    ef06:	696b      	ldr	r3, [r5, #20]
    ef08:	191a      	adds	r2, r3, r4
    ef0a:	5d1b      	ldrb	r3, [r3, r4]
    ef0c:	2b00      	cmp	r3, #0
    ef0e:	d1f6      	bne.n	eefe <get_mes+0x12>
        {
            cab_id->buffersTaken[i] = 1;
    ef10:	2301      	movs	r3, #1
    ef12:	7013      	strb	r3, [r2, #0]
            cab_id->buffers[i] = cab_id->buffers[0];
    ef14:	692b      	ldr	r3, [r5, #16]
    ef16:	681a      	ldr	r2, [r3, #0]
    ef18:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
            k_sem_give(cab_id->op_Sem);
    ef1c:	6828      	ldr	r0, [r5, #0]
	z_impl_k_sem_give(sem);
    ef1e:	f7fc f8ad 	bl	b07c <z_impl_k_sem_give>
            return cab_id->buffers[i];
    ef22:	692b      	ldr	r3, [r5, #16]
    ef24:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    ef28:	e003      	b.n	ef32 <get_mes+0x46>
        }
    }
    k_sem_give(cab_id->op_Sem);
    ef2a:	6828      	ldr	r0, [r5, #0]
    ef2c:	f7fc f8a6 	bl	b07c <z_impl_k_sem_give>
    return NULL;
    ef30:	2000      	movs	r0, #0
}
    ef32:	bd38      	pop	{r3, r4, r5, pc}

0000ef34 <unget>:

// release message to the CAB
void unget(void* mes_pointer, cab *cab_id)
{
    ef34:	b538      	push	{r3, r4, r5, lr}
    ef36:	4605      	mov	r5, r0
    ef38:	460c      	mov	r4, r1
    k_sem_take(cab_id->op_Sem, K_NO_WAIT);
    ef3a:	6808      	ldr	r0, [r1, #0]
	return z_impl_k_sem_take(sem, timeout);
    ef3c:	2200      	movs	r2, #0
    ef3e:	2300      	movs	r3, #0
    ef40:	f7fc f8e0 	bl	b104 <z_impl_k_sem_take>
    for (size_t i = 0; i < cab_id->num; i++)
    ef44:	2300      	movs	r3, #0
    ef46:	e000      	b.n	ef4a <unget+0x16>
    ef48:	3301      	adds	r3, #1
    ef4a:	68a2      	ldr	r2, [r4, #8]
    ef4c:	429a      	cmp	r2, r3
    ef4e:	d908      	bls.n	ef62 <unget+0x2e>
    {
        if (cab_id->buffers[i] == mes_pointer)
    ef50:	6922      	ldr	r2, [r4, #16]
    ef52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ef56:	42aa      	cmp	r2, r5
    ef58:	d1f6      	bne.n	ef48 <unget+0x14>
        {
            cab_id->buffersTaken[i] = 0;
    ef5a:	6962      	ldr	r2, [r4, #20]
    ef5c:	2100      	movs	r1, #0
    ef5e:	54d1      	strb	r1, [r2, r3]
    ef60:	e7f2      	b.n	ef48 <unget+0x14>
        }
    }
    k_sem_give(cab_id->op_Sem);
    ef62:	6820      	ldr	r0, [r4, #0]
	z_impl_k_sem_give(sem);
    ef64:	f7fc f88a 	bl	b07c <z_impl_k_sem_give>
}
    ef68:	bd38      	pop	{r3, r4, r5, pc}

0000ef6a <cbprintf_via_va_list>:
{
    ef6a:	b510      	push	{r4, lr}
    ef6c:	460c      	mov	r4, r1
    ef6e:	4611      	mov	r1, r2
    ef70:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    ef72:	9b02      	ldr	r3, [sp, #8]
    ef74:	47a0      	blx	r4
}
    ef76:	bd10      	pop	{r4, pc}

0000ef78 <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    ef78:	b353      	cbz	r3, efd0 <cbpprintf_external+0x58>
{
    ef7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ef7e:	b082      	sub	sp, #8
    ef80:	4607      	mov	r7, r0
    ef82:	4688      	mov	r8, r1
    ef84:	4691      	mov	r9, r2
    ef86:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
    ef88:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = buf[1];
    ef8a:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = buf[2];
    ef8c:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = buf[3];
    ef8e:	78db      	ldrb	r3, [r3, #3]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    ef90:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    ef94:	441c      	add	r4, r3
    ef96:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    ef98:	f04f 0a00 	mov.w	sl, #0
    ef9c:	e00a      	b.n	efb4 <cbpprintf_external+0x3c>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
    ef9e:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
    efa2:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
    efa6:	4620      	mov	r0, r4
    efa8:	f7f1 ff55 	bl	e56 <strlen>
    efac:	3001      	adds	r0, #1
    efae:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    efb0:	f10a 0a01 	add.w	sl, sl, #1
    efb4:	45b2      	cmp	sl, r6
    efb6:	d3f2      	bcc.n	ef9e <cbpprintf_external+0x26>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
    efb8:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
    efbc:	9300      	str	r3, [sp, #0]
    efbe:	686b      	ldr	r3, [r5, #4]
    efc0:	464a      	mov	r2, r9
    efc2:	4641      	mov	r1, r8
    efc4:	4638      	mov	r0, r7
    efc6:	f7ff ffd0 	bl	ef6a <cbprintf_via_va_list>
}
    efca:	b002      	add	sp, #8
    efcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    efd0:	f06f 0015 	mvn.w	r0, #21
}
    efd4:	4770      	bx	lr

0000efd6 <sys_notify_validate>:
	if (notify == NULL) {
    efd6:	4602      	mov	r2, r0
    efd8:	b158      	cbz	r0, eff2 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    efda:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    efdc:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    efe0:	2b01      	cmp	r3, #1
    efe2:	d003      	beq.n	efec <sys_notify_validate+0x16>
    efe4:	2b03      	cmp	r3, #3
    efe6:	d107      	bne.n	eff8 <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    efe8:	6803      	ldr	r3, [r0, #0]
    efea:	b143      	cbz	r3, effe <sys_notify_validate+0x28>
		notify->result = 0;
    efec:	2000      	movs	r0, #0
    efee:	6090      	str	r0, [r2, #8]
    eff0:	4770      	bx	lr
		return -EINVAL;
    eff2:	f06f 0015 	mvn.w	r0, #21
    eff6:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    eff8:	f06f 0015 	mvn.w	r0, #21
    effc:	4770      	bx	lr
			rv = -EINVAL;
    effe:	f06f 0015 	mvn.w	r0, #21
}
    f002:	4770      	bx	lr

0000f004 <arch_printk_char_out>:
}
    f004:	2000      	movs	r0, #0
    f006:	4770      	bx	lr

0000f008 <vprintk>:
	ctx->count++;
	return _char_out(c);
}

void vprintk(const char *fmt, va_list ap)
{
    f008:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    f00a:	f000 f921 	bl	f250 <z_log_vprintk>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    f00e:	bd08      	pop	{r3, pc}

0000f010 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    f010:	b40f      	push	{r0, r1, r2, r3}
    f012:	b500      	push	{lr}
    f014:	b083      	sub	sp, #12
    f016:	a904      	add	r1, sp, #16
    f018:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    f01c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    f01e:	f7ff fff3 	bl	f008 <vprintk>

	va_end(ap);
}
    f022:	b003      	add	sp, #12
    f024:	f85d eb04 	ldr.w	lr, [sp], #4
    f028:	b004      	add	sp, #16
    f02a:	4770      	bx	lr

0000f02c <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    f02c:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f030:	8b81      	ldrh	r1, [r0, #28]
    f032:	f021 0107 	bic.w	r1, r1, #7
    f036:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    f038:	8381      	strh	r1, [r0, #28]
}
    f03a:	4770      	bx	lr

0000f03c <notify_monitors>:
{
    f03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f040:	4606      	mov	r6, r0
    f042:	460f      	mov	r7, r1
    f044:	4690      	mov	r8, r2
	return list->head;
    f046:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    f048:	b119      	cbz	r1, f052 <notify_monitors+0x16>
    f04a:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    f04c:	b131      	cbz	r1, f05c <notify_monitors+0x20>
	return node->next;
    f04e:	680c      	ldr	r4, [r1, #0]
    f050:	e004      	b.n	f05c <notify_monitors+0x20>
    f052:	460c      	mov	r4, r1
    f054:	e002      	b.n	f05c <notify_monitors+0x20>
    f056:	4623      	mov	r3, r4
    f058:	4621      	mov	r1, r4
    f05a:	461c      	mov	r4, r3
    f05c:	b159      	cbz	r1, f076 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    f05e:	684d      	ldr	r5, [r1, #4]
    f060:	4643      	mov	r3, r8
    f062:	463a      	mov	r2, r7
    f064:	4630      	mov	r0, r6
    f066:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    f068:	2c00      	cmp	r4, #0
    f06a:	d0f4      	beq.n	f056 <notify_monitors+0x1a>
    f06c:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    f06e:	2c00      	cmp	r4, #0
    f070:	d0f2      	beq.n	f058 <notify_monitors+0x1c>
	return node->next;
    f072:	6823      	ldr	r3, [r4, #0]
    f074:	e7f0      	b.n	f058 <notify_monitors+0x1c>
}
    f076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f07a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f07a:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    f07c:	f013 0307 	ands.w	r3, r3, #7
    f080:	d103      	bne.n	f08a <process_recheck+0x10>
	return list->head;
    f082:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    f084:	b10a      	cbz	r2, f08a <process_recheck+0x10>
		evt = EVT_START;
    f086:	2003      	movs	r0, #3
    f088:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    f08a:	2b02      	cmp	r3, #2
    f08c:	d003      	beq.n	f096 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    f08e:	2b01      	cmp	r3, #1
    f090:	d006      	beq.n	f0a0 <process_recheck+0x26>
	int evt = EVT_NOP;
    f092:	2000      	movs	r0, #0
    f094:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    f096:	8bc2      	ldrh	r2, [r0, #30]
    f098:	2a00      	cmp	r2, #0
    f09a:	d1f8      	bne.n	f08e <process_recheck+0x14>
		evt = EVT_STOP;
    f09c:	2004      	movs	r0, #4
    f09e:	4770      	bx	lr
    f0a0:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    f0a2:	b10b      	cbz	r3, f0a8 <process_recheck+0x2e>
		evt = EVT_RESET;
    f0a4:	2005      	movs	r0, #5
}
    f0a6:	4770      	bx	lr
	int evt = EVT_NOP;
    f0a8:	2000      	movs	r0, #0
    f0aa:	4770      	bx	lr

0000f0ac <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    f0ac:	b158      	cbz	r0, f0c6 <validate_args+0x1a>
{
    f0ae:	b510      	push	{r4, lr}
    f0b0:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    f0b2:	b159      	cbz	r1, f0cc <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    f0b4:	1d08      	adds	r0, r1, #4
    f0b6:	f7ff ff8e 	bl	efd6 <sys_notify_validate>
	if ((rv == 0)
    f0ba:	b918      	cbnz	r0, f0c4 <validate_args+0x18>
	    && ((cli->notify.flags
    f0bc:	68a3      	ldr	r3, [r4, #8]
    f0be:	f033 0303 	bics.w	r3, r3, #3
    f0c2:	d106      	bne.n	f0d2 <validate_args+0x26>
}
    f0c4:	bd10      	pop	{r4, pc}
		return -EINVAL;
    f0c6:	f06f 0015 	mvn.w	r0, #21
}
    f0ca:	4770      	bx	lr
		return -EINVAL;
    f0cc:	f06f 0015 	mvn.w	r0, #21
    f0d0:	e7f8      	b.n	f0c4 <validate_args+0x18>
		rv = -EINVAL;
    f0d2:	f06f 0015 	mvn.w	r0, #21
    f0d6:	e7f5      	b.n	f0c4 <validate_args+0x18>

0000f0d8 <notify_one>:
{
    f0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0dc:	4607      	mov	r7, r0
    f0de:	460c      	mov	r4, r1
    f0e0:	4616      	mov	r6, r2
    f0e2:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    f0e4:	4619      	mov	r1, r3
    f0e6:	1d20      	adds	r0, r4, #4
    f0e8:	f7f4 fd54 	bl	3b94 <sys_notify_finalize>
	if (cb) {
    f0ec:	b128      	cbz	r0, f0fa <notify_one+0x22>
    f0ee:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    f0f0:	462b      	mov	r3, r5
    f0f2:	4632      	mov	r2, r6
    f0f4:	4621      	mov	r1, r4
    f0f6:	4638      	mov	r0, r7
    f0f8:	47c0      	blx	r8
}
    f0fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f0fe <notify_all>:
{
    f0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f102:	4680      	mov	r8, r0
    f104:	460c      	mov	r4, r1
    f106:	4617      	mov	r7, r2
    f108:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    f10a:	e004      	b.n	f116 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    f10c:	4633      	mov	r3, r6
    f10e:	463a      	mov	r2, r7
    f110:	4640      	mov	r0, r8
    f112:	f7ff ffe1 	bl	f0d8 <notify_one>
    f116:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    f118:	b131      	cbz	r1, f128 <notify_all+0x2a>
	return node->next;
    f11a:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    f11c:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f11e:	6863      	ldr	r3, [r4, #4]
    f120:	428b      	cmp	r3, r1
    f122:	d1f3      	bne.n	f10c <notify_all+0xe>
	list->tail = node;
    f124:	6065      	str	r5, [r4, #4]
}
    f126:	e7f1      	b.n	f10c <notify_all+0xe>
}
    f128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f12c <onoff_manager_init>:
	if ((mgr == NULL)
    f12c:	b170      	cbz	r0, f14c <onoff_manager_init+0x20>
{
    f12e:	b538      	push	{r3, r4, r5, lr}
    f130:	460c      	mov	r4, r1
    f132:	4605      	mov	r5, r0
	    || (transitions == NULL)
    f134:	b169      	cbz	r1, f152 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    f136:	680b      	ldr	r3, [r1, #0]
    f138:	b173      	cbz	r3, f158 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    f13a:	684b      	ldr	r3, [r1, #4]
    f13c:	b17b      	cbz	r3, f15e <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    f13e:	2220      	movs	r2, #32
    f140:	2100      	movs	r1, #0
    f142:	f001 fb3c 	bl	107be <memset>
    f146:	612c      	str	r4, [r5, #16]
	return 0;
    f148:	2000      	movs	r0, #0
}
    f14a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    f14c:	f06f 0015 	mvn.w	r0, #21
}
    f150:	4770      	bx	lr
		return -EINVAL;
    f152:	f06f 0015 	mvn.w	r0, #21
    f156:	e7f8      	b.n	f14a <onoff_manager_init+0x1e>
    f158:	f06f 0015 	mvn.w	r0, #21
    f15c:	e7f5      	b.n	f14a <onoff_manager_init+0x1e>
    f15e:	f06f 0015 	mvn.w	r0, #21
    f162:	e7f2      	b.n	f14a <onoff_manager_init+0x1e>

0000f164 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    f164:	b508      	push	{r3, lr}
    f166:	4604      	mov	r4, r0
    f168:	4608      	mov	r0, r1
    f16a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    f16c:	461a      	mov	r2, r3
    f16e:	47a0      	blx	r4
	return z_impl_z_current_get();
    f170:	f7fd fab0 	bl	c6d4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    f174:	f7f7 fba8 	bl	68c8 <z_impl_k_thread_abort>

0000f178 <free_list_add_bidx>:
{
    f178:	b510      	push	{r4, lr}
	if (b->next == 0U) {
    f17a:	1d13      	adds	r3, r2, #4
    f17c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    f180:	b97c      	cbnz	r4, f1a2 <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
    f182:	2301      	movs	r3, #1
    f184:	fa03 f402 	lsl.w	r4, r3, r2
    f188:	68c3      	ldr	r3, [r0, #12]
    f18a:	4323      	orrs	r3, r4
    f18c:	60c3      	str	r3, [r0, #12]
		b->next = c;
    f18e:	3204      	adds	r2, #4
    f190:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    f194:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    f196:	1d1a      	adds	r2, r3, #4
    f198:	b289      	uxth	r1, r1
    f19a:	5281      	strh	r1, [r0, r2]
    f19c:	3306      	adds	r3, #6
    f19e:	52c1      	strh	r1, [r0, r3]
}
    f1a0:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    f1a2:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    f1a4:	3204      	adds	r2, #4
    f1a6:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    f1a8:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    f1ac:	f10c 0e04 	add.w	lr, ip, #4
    f1b0:	f820 300e 	strh.w	r3, [r0, lr]
    f1b4:	f10c 0c06 	add.w	ip, ip, #6
    f1b8:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    f1bc:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    f1be:	3306      	adds	r3, #6
    f1c0:	b289      	uxth	r1, r1
    f1c2:	52c1      	strh	r1, [r0, r3]
    f1c4:	5281      	strh	r1, [r0, r2]
    f1c6:	e7eb      	b.n	f1a0 <free_list_add_bidx+0x28>

0000f1c8 <free_list_add>:
{
    f1c8:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    f1ca:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    f1ce:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    f1d0:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    f1d2:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    f1d6:	f1c2 021f 	rsb	r2, r2, #31
    f1da:	f7ff ffcd 	bl	f178 <free_list_add_bidx>
}
    f1de:	bd08      	pop	{r3, pc}

0000f1e0 <outs>:
{
    f1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f1e4:	4607      	mov	r7, r0
    f1e6:	460e      	mov	r6, r1
    f1e8:	4614      	mov	r4, r2
    f1ea:	4698      	mov	r8, r3
	size_t count = 0;
    f1ec:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    f1ee:	e006      	b.n	f1fe <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    f1f0:	4631      	mov	r1, r6
    f1f2:	f814 0b01 	ldrb.w	r0, [r4], #1
    f1f6:	47b8      	blx	r7
		if (rc < 0) {
    f1f8:	2800      	cmp	r0, #0
    f1fa:	db09      	blt.n	f210 <outs+0x30>
		++count;
    f1fc:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    f1fe:	4544      	cmp	r4, r8
    f200:	d3f6      	bcc.n	f1f0 <outs+0x10>
    f202:	f1b8 0f00 	cmp.w	r8, #0
    f206:	d102      	bne.n	f20e <outs+0x2e>
    f208:	7823      	ldrb	r3, [r4, #0]
    f20a:	2b00      	cmp	r3, #0
    f20c:	d1f0      	bne.n	f1f0 <outs+0x10>
	return (int)count;
    f20e:	4628      	mov	r0, r5
}
    f210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f214 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    f214:	4040      	eors	r0, r0
    f216:	f380 8811 	msr	BASEPRI, r0
    f21a:	f04f 0004 	mov.w	r0, #4
    f21e:	df02      	svc	2
}
    f220:	4770      	bx	lr

0000f222 <assert_print>:

void assert_print(const char *fmt, ...)
{
    f222:	b40f      	push	{r0, r1, r2, r3}
    f224:	b500      	push	{lr}
    f226:	b083      	sub	sp, #12
    f228:	a904      	add	r1, sp, #16
    f22a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    f22e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    f230:	f7ff feea 	bl	f008 <vprintk>

	va_end(ap);
}
    f234:	b003      	add	sp, #12
    f236:	f85d eb04 	ldr.w	lr, [sp], #4
    f23a:	b004      	add	sp, #16
    f23c:	4770      	bx	lr

0000f23e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    f23e:	4770      	bx	lr

0000f240 <dummy_timestamp>:
}
    f240:	2000      	movs	r0, #0
    f242:	4770      	bx	lr

0000f244 <msg_filter_check>:
}
    f244:	2001      	movs	r0, #1
    f246:	4770      	bx	lr

0000f248 <default_get_timestamp>:
{
    f248:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    f24a:	f001 f833 	bl	102b4 <sys_clock_cycle_get_32>
}
    f24e:	bd08      	pop	{r3, pc}

0000f250 <z_log_vprintk>:
{
    f250:	b500      	push	{lr}
    f252:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    f254:	9103      	str	r1, [sp, #12]
    f256:	9002      	str	r0, [sp, #8]
    f258:	2000      	movs	r0, #0
    f25a:	9001      	str	r0, [sp, #4]
    f25c:	9000      	str	r0, [sp, #0]
    f25e:	4603      	mov	r3, r0
    f260:	4602      	mov	r2, r0
    f262:	4601      	mov	r1, r0
    f264:	f7f6 f95e 	bl	5524 <z_impl_z_log_msg2_runtime_vcreate>
}
    f268:	b005      	add	sp, #20
    f26a:	f85d fb04 	ldr.w	pc, [sp], #4

0000f26e <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    f26e:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    f270:	f7f5 fe2a 	bl	4ec8 <log_init>
	}

	return 0;
}
    f274:	2000      	movs	r0, #0
    f276:	bd08      	pop	{r3, pc}

0000f278 <z_log_get_tag>:
}
    f278:	2000      	movs	r0, #0
    f27a:	4770      	bx	lr

0000f27c <out_func>:
{
    f27c:	b500      	push	{lr}
    f27e:	b083      	sub	sp, #12
		char x = (char)c;
    f280:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    f284:	680b      	ldr	r3, [r1, #0]
    f286:	684a      	ldr	r2, [r1, #4]
    f288:	6852      	ldr	r2, [r2, #4]
    f28a:	2101      	movs	r1, #1
    f28c:	f10d 0007 	add.w	r0, sp, #7
    f290:	4798      	blx	r3
}
    f292:	2000      	movs	r0, #0
    f294:	b003      	add	sp, #12
    f296:	f85d fb04 	ldr.w	pc, [sp], #4

0000f29a <cr_out_func>:
{
    f29a:	b538      	push	{r3, r4, r5, lr}
    f29c:	4604      	mov	r4, r0
    f29e:	460d      	mov	r5, r1
	out_func(c, ctx);
    f2a0:	f7ff ffec 	bl	f27c <out_func>
	if (c == '\n') {
    f2a4:	2c0a      	cmp	r4, #10
    f2a6:	d001      	beq.n	f2ac <cr_out_func+0x12>
}
    f2a8:	2000      	movs	r0, #0
    f2aa:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    f2ac:	4629      	mov	r1, r5
    f2ae:	200d      	movs	r0, #13
    f2b0:	f7ff ffe4 	bl	f27c <out_func>
    f2b4:	e7f8      	b.n	f2a8 <cr_out_func+0xe>

0000f2b6 <buffer_write>:
{
    f2b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f2b8:	4607      	mov	r7, r0
    f2ba:	460d      	mov	r5, r1
    f2bc:	4614      	mov	r4, r2
    f2be:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    f2c0:	4632      	mov	r2, r6
    f2c2:	4621      	mov	r1, r4
    f2c4:	4628      	mov	r0, r5
    f2c6:	47b8      	blx	r7
		buf += processed;
    f2c8:	4405      	add	r5, r0
	} while (len != 0);
    f2ca:	1a24      	subs	r4, r4, r0
    f2cc:	d1f8      	bne.n	f2c0 <buffer_write+0xa>
}
    f2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f2d0 <color_prefix>:
{
    f2d0:	b508      	push	{r3, lr}
    f2d2:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    f2d4:	2201      	movs	r2, #1
    f2d6:	f7f5 ff9d 	bl	5214 <color_print>
}
    f2da:	bd08      	pop	{r3, pc}

0000f2dc <color_postfix>:
{
    f2dc:	b508      	push	{r3, lr}
    f2de:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    f2e0:	2200      	movs	r2, #0
    f2e2:	f7f5 ff97 	bl	5214 <color_print>
}
    f2e6:	bd08      	pop	{r3, pc}

0000f2e8 <postfix_print>:
{
    f2e8:	b538      	push	{r3, r4, r5, lr}
    f2ea:	4605      	mov	r5, r0
    f2ec:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    f2ee:	f001 0101 	and.w	r1, r1, #1
    f2f2:	f7ff fff3 	bl	f2dc <color_postfix>
	newline_print(output, flags);
    f2f6:	4621      	mov	r1, r4
    f2f8:	4628      	mov	r0, r5
    f2fa:	f7f5 ffa1 	bl	5240 <newline_print>
}
    f2fe:	bd38      	pop	{r3, r4, r5, pc}

0000f300 <log_msg2_hexdump>:
{
    f300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f304:	b083      	sub	sp, #12
    f306:	4680      	mov	r8, r0
    f308:	460e      	mov	r6, r1
    f30a:	4615      	mov	r5, r2
    f30c:	461f      	mov	r7, r3
    f30e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f312:	462c      	mov	r4, r5
    f314:	2d10      	cmp	r5, #16
    f316:	bf28      	it	cs
    f318:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    f31a:	f8cd 9000 	str.w	r9, [sp]
    f31e:	463b      	mov	r3, r7
    f320:	4622      	mov	r2, r4
    f322:	4631      	mov	r1, r6
    f324:	4640      	mov	r0, r8
    f326:	f7f5 ff9f 	bl	5268 <hexdump_line_print>
		data += length;
    f32a:	4426      	add	r6, r4
	} while (len);
    f32c:	1b2d      	subs	r5, r5, r4
    f32e:	d1f0      	bne.n	f312 <log_msg2_hexdump+0x12>
}
    f330:	b003      	add	sp, #12
    f332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000f336 <log_output_flush>:
{
    f336:	b510      	push	{r4, lr}
    f338:	4604      	mov	r4, r0
		     output->control_block->offset,
    f33a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    f33c:	6853      	ldr	r3, [r2, #4]
    f33e:	6812      	ldr	r2, [r2, #0]
    f340:	6881      	ldr	r1, [r0, #8]
    f342:	6800      	ldr	r0, [r0, #0]
    f344:	f7ff ffb7 	bl	f2b6 <buffer_write>
	output->control_block->offset = 0;
    f348:	6863      	ldr	r3, [r4, #4]
    f34a:	2200      	movs	r2, #0
    f34c:	601a      	str	r2, [r3, #0]
}
    f34e:	bd10      	pop	{r4, pc}

0000f350 <z_log_msg2_finalize>:
{
    f350:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    f352:	b198      	cbz	r0, f37c <z_log_msg2_finalize+0x2c>
    f354:	460e      	mov	r6, r1
    f356:	4614      	mov	r4, r2
    f358:	4619      	mov	r1, r3
    f35a:	4605      	mov	r5, r0
	if (data) {
    f35c:	b143      	cbz	r3, f370 <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
    f35e:	f100 0310 	add.w	r3, r0, #16
    f362:	f3c2 2049 	ubfx	r0, r2, #9, #10
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    f366:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    f36a:	4418      	add	r0, r3
    f36c:	f001 fa19 	bl	107a2 <memcpy>
	msg->hdr.desc = desc;
    f370:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    f372:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
    f374:	4628      	mov	r0, r5
    f376:	f7f5 fe89 	bl	508c <z_log_msg2_commit>
}
    f37a:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    f37c:	f7f5 fe66 	bl	504c <z_log_dropped>
		return;
    f380:	e7fb      	b.n	f37a <z_log_msg2_finalize+0x2a>

0000f382 <abort_function>:
{
    f382:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    f384:	2000      	movs	r0, #0
    f386:	f7f5 fd25 	bl	4dd4 <sys_reboot>

0000f38a <z_log_msg2_runtime_create>:
{
    f38a:	b510      	push	{r4, lr}
    f38c:	b086      	sub	sp, #24
	va_start(ap, fmt);
    f38e:	ac0b      	add	r4, sp, #44	; 0x2c
    f390:	9405      	str	r4, [sp, #20]
    f392:	9403      	str	r4, [sp, #12]
    f394:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f396:	9402      	str	r4, [sp, #8]
    f398:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f39a:	9401      	str	r4, [sp, #4]
    f39c:	9c08      	ldr	r4, [sp, #32]
    f39e:	9400      	str	r4, [sp, #0]
    f3a0:	f7f6 f8c0 	bl	5524 <z_impl_z_log_msg2_runtime_vcreate>
}
    f3a4:	b006      	add	sp, #24
    f3a6:	bd10      	pop	{r4, pc}

0000f3a8 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f3a8:	b538      	push	{r3, r4, r5, lr}
    f3aa:	4604      	mov	r4, r0

	if (esf != NULL) {
    f3ac:	460d      	mov	r5, r1
    f3ae:	b111      	cbz	r1, f3b6 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    f3b0:	4608      	mov	r0, r1
    f3b2:	f7f6 fcdf 	bl	5d74 <esf_dump>
	}
	z_fatal_error(reason, esf);
    f3b6:	4629      	mov	r1, r5
    f3b8:	4620      	mov	r0, r4
    f3ba:	f7fa ffab 	bl	a314 <z_fatal_error>
}
    f3be:	bd38      	pop	{r3, r4, r5, pc}

0000f3c0 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    f3c0:	b508      	push	{r3, lr}
    f3c2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    f3c4:	6800      	ldr	r0, [r0, #0]
    f3c6:	f7ff ffef 	bl	f3a8 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    f3ca:	bd08      	pop	{r3, pc}

0000f3cc <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    f3cc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    f3ce:	2100      	movs	r1, #0
    f3d0:	2001      	movs	r0, #1
    f3d2:	f7ff ffe9 	bl	f3a8 <z_arm_fatal_error>
}
    f3d6:	bd08      	pop	{r3, pc}

0000f3d8 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    f3d8:	b508      	push	{r3, lr}
	handler();
    f3da:	f7f6 fd67 	bl	5eac <z_SysNmiOnReset>
	z_arm_int_exit();
    f3de:	f7f6 fe5d 	bl	609c <z_arm_exc_exit>
}
    f3e2:	bd08      	pop	{r3, pc}

0000f3e4 <memory_fault_recoverable>:
}
    f3e4:	2000      	movs	r0, #0
    f3e6:	4770      	bx	lr

0000f3e8 <z_log_msg2_runtime_create>:
{
    f3e8:	b510      	push	{r4, lr}
    f3ea:	b086      	sub	sp, #24
	va_start(ap, fmt);
    f3ec:	ac0b      	add	r4, sp, #44	; 0x2c
    f3ee:	9405      	str	r4, [sp, #20]
    f3f0:	9403      	str	r4, [sp, #12]
    f3f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f3f4:	9402      	str	r4, [sp, #8]
    f3f6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f3f8:	9401      	str	r4, [sp, #4]
    f3fa:	9c08      	ldr	r4, [sp, #32]
    f3fc:	9400      	str	r4, [sp, #0]
    f3fe:	f7f6 f891 	bl	5524 <z_impl_z_log_msg2_runtime_vcreate>
}
    f402:	b006      	add	sp, #24
    f404:	bd10      	pop	{r4, pc}

0000f406 <fault_handle>:
{
    f406:	b508      	push	{r3, lr}
	*recoverable = false;
    f408:	2300      	movs	r3, #0
    f40a:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    f40c:	1ecb      	subs	r3, r1, #3
    f40e:	2b09      	cmp	r3, #9
    f410:	d81a      	bhi.n	f448 <fault_handle+0x42>
    f412:	e8df f003 	tbb	[pc, r3]
    f416:	0905      	.short	0x0905
    f418:	1919110d 	.word	0x1919110d
    f41c:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    f420:	4611      	mov	r1, r2
    f422:	f7f7 f88d 	bl	6540 <hard_fault>
}
    f426:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    f428:	2100      	movs	r1, #0
    f42a:	f7f6 ffab 	bl	6384 <mem_manage_fault>
		break;
    f42e:	e7fa      	b.n	f426 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    f430:	2100      	movs	r1, #0
    f432:	f7f6 fe41 	bl	60b8 <bus_fault>
		break;
    f436:	e7f6      	b.n	f426 <fault_handle+0x20>
		reason = usage_fault(esf);
    f438:	f7f6 fee6 	bl	6208 <usage_fault>
		break;
    f43c:	e7f3      	b.n	f426 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    f43e:	4611      	mov	r1, r2
    f440:	f7f6 ff6c 	bl	631c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f444:	2000      	movs	r0, #0
		break;
    f446:	e7ee      	b.n	f426 <fault_handle+0x20>
		reserved_exception(esf, fault);
    f448:	f7f6 ff7c 	bl	6344 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f44c:	2000      	movs	r0, #0
	return reason;
    f44e:	e7ea      	b.n	f426 <fault_handle+0x20>

0000f450 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    f450:	6843      	ldr	r3, [r0, #4]
    f452:	1e5a      	subs	r2, r3, #1
		&&
    f454:	4213      	tst	r3, r2
    f456:	d106      	bne.n	f466 <mpu_partition_is_valid+0x16>
		&&
    f458:	2b1f      	cmp	r3, #31
    f45a:	d906      	bls.n	f46a <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    f45c:	6803      	ldr	r3, [r0, #0]
		&&
    f45e:	421a      	tst	r2, r3
    f460:	d005      	beq.n	f46e <mpu_partition_is_valid+0x1e>
    f462:	2000      	movs	r0, #0
    f464:	4770      	bx	lr
    f466:	2000      	movs	r0, #0
    f468:	4770      	bx	lr
    f46a:	2000      	movs	r0, #0
    f46c:	4770      	bx	lr
    f46e:	2001      	movs	r0, #1
}
    f470:	4770      	bx	lr

0000f472 <z_log_msg2_runtime_create>:
{
    f472:	b510      	push	{r4, lr}
    f474:	b086      	sub	sp, #24
	va_start(ap, fmt);
    f476:	ac0b      	add	r4, sp, #44	; 0x2c
    f478:	9405      	str	r4, [sp, #20]
    f47a:	9403      	str	r4, [sp, #12]
    f47c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f47e:	9402      	str	r4, [sp, #8]
    f480:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f482:	9401      	str	r4, [sp, #4]
    f484:	9c08      	ldr	r4, [sp, #32]
    f486:	9400      	str	r4, [sp, #0]
    f488:	f7f6 f84c 	bl	5524 <z_impl_z_log_msg2_runtime_vcreate>
}
    f48c:	b006      	add	sp, #24
    f48e:	bd10      	pop	{r4, pc}

0000f490 <mpu_configure_region>:
{
    f490:	b500      	push	{lr}
    f492:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    f494:	680b      	ldr	r3, [r1, #0]
    f496:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    f498:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    f49a:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    f49c:	2b20      	cmp	r3, #32
    f49e:	d912      	bls.n	f4c6 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    f4a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    f4a4:	d811      	bhi.n	f4ca <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    f4a6:	3b01      	subs	r3, #1
    f4a8:	fab3 f383 	clz	r3, r3
    f4ac:	f1c3 031f 	rsb	r3, r3, #31
    f4b0:	005b      	lsls	r3, r3, #1
    f4b2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    f4b6:	4313      	orrs	r3, r2
    f4b8:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    f4ba:	a901      	add	r1, sp, #4
    f4bc:	f7f7 fa52 	bl	6964 <region_allocate_and_init>
}
    f4c0:	b005      	add	sp, #20
    f4c2:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    f4c6:	2308      	movs	r3, #8
    f4c8:	e7f5      	b.n	f4b6 <mpu_configure_region+0x26>
		return REGION_4G;
    f4ca:	233e      	movs	r3, #62	; 0x3e
    f4cc:	e7f3      	b.n	f4b6 <mpu_configure_region+0x26>

0000f4ce <_stdout_hook_default>:
}
    f4ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f4d2:	4770      	bx	lr

0000f4d4 <_stdin_hook_default>:
}
    f4d4:	2000      	movs	r0, #0
    f4d6:	4770      	bx	lr

0000f4d8 <_read>:
{
    f4d8:	b508      	push	{r3, lr}
    f4da:	4608      	mov	r0, r1
    f4dc:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
    f4de:	f7f7 fb9b 	bl	6c18 <z_impl_zephyr_read_stdin>
}
    f4e2:	bd08      	pop	{r3, pc}

0000f4e4 <_write>:
{
    f4e4:	b508      	push	{r3, lr}
    f4e6:	4608      	mov	r0, r1
    f4e8:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    f4ea:	f7f7 fbab 	bl	6c44 <z_impl_zephyr_write_stdout>
}
    f4ee:	bd08      	pop	{r3, pc}

0000f4f0 <_close>:
}
    f4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f4f4:	4770      	bx	lr

0000f4f6 <_lseek>:
}
    f4f6:	2000      	movs	r0, #0
    f4f8:	4770      	bx	lr

0000f4fa <_isatty>:
}
    f4fa:	2802      	cmp	r0, #2
    f4fc:	bfcc      	ite	gt
    f4fe:	2000      	movgt	r0, #0
    f500:	2001      	movle	r0, #1
    f502:	4770      	bx	lr

0000f504 <_kill>:
}
    f504:	2000      	movs	r0, #0
    f506:	4770      	bx	lr

0000f508 <_getpid>:
}
    f508:	2000      	movs	r0, #0
    f50a:	4770      	bx	lr

0000f50c <_fstat>:
	st->st_mode = S_IFCHR;
    f50c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    f510:	604b      	str	r3, [r1, #4]
}
    f512:	2000      	movs	r0, #0
    f514:	4770      	bx	lr

0000f516 <__errno>:
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
    f516:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    f518:	f7fa fec6 	bl	a2a8 <z_impl_z_errno>
	return z_errno();
}
    f51c:	bd08      	pop	{r3, pc}

0000f51e <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f51e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f522:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    f526:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    f52a:	2a08      	cmp	r2, #8
    f52c:	d001      	beq.n	f532 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    f52e:	2000      	movs	r0, #0
    f530:	4770      	bx	lr
                switch(var2)
    f532:	2b02      	cmp	r3, #2
    f534:	d001      	beq.n	f53a <nrf52_errata_197+0x1c>
                        return false;
    f536:	2000      	movs	r0, #0
    f538:	4770      	bx	lr
                        return true;
    f53a:	2001      	movs	r0, #1
    #endif
}
    f53c:	4770      	bx	lr

0000f53e <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    f53e:	2806      	cmp	r0, #6
    f540:	d000      	beq.n	f544 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    f542:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    f544:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f548:	2201      	movs	r2, #1
    f54a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    f54e:	f3bf 8f4f 	dsb	sy
        __WFE();
    f552:	bf20      	wfe
    while (true)
    f554:	e7fd      	b.n	f552 <pm_state_set+0x14>

0000f556 <pm_state_exit_post_ops>:
    f556:	2300      	movs	r3, #0
    f558:	f383 8811 	msr	BASEPRI, r3
    f55c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    f560:	4770      	bx	lr

0000f562 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    f562:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    f564:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    f568:	0089      	lsls	r1, r1, #2
    f56a:	3140      	adds	r1, #64	; 0x40
}
    f56c:	4408      	add	r0, r1
    f56e:	4770      	bx	lr

0000f570 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    f570:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    f572:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    f576:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    f57a:	4770      	bx	lr

0000f57c <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    f57c:	6900      	ldr	r0, [r0, #16]
}
    f57e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    f582:	4770      	bx	lr

0000f584 <set_off_state>:
	__asm__ volatile(
    f584:	f04f 0320 	mov.w	r3, #32
    f588:	f3ef 8211 	mrs	r2, BASEPRI
    f58c:	f383 8812 	msr	BASEPRI_MAX, r3
    f590:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    f594:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    f596:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    f59a:	d001      	beq.n	f5a0 <set_off_state+0x1c>
    f59c:	428b      	cmp	r3, r1
    f59e:	d107      	bne.n	f5b0 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    f5a0:	2301      	movs	r3, #1
    f5a2:	6003      	str	r3, [r0, #0]
	int err = 0;
    f5a4:	2000      	movs	r0, #0
	__asm__ volatile(
    f5a6:	f382 8811 	msr	BASEPRI, r2
    f5aa:	f3bf 8f6f 	isb	sy
}
    f5ae:	4770      	bx	lr
		err = -EPERM;
    f5b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f5b4:	e7f7      	b.n	f5a6 <set_off_state+0x22>

0000f5b6 <set_starting_state>:
	__asm__ volatile(
    f5b6:	f04f 0320 	mov.w	r3, #32
    f5ba:	f3ef 8211 	mrs	r2, BASEPRI
    f5be:	f383 8812 	msr	BASEPRI_MAX, r3
    f5c2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    f5c6:	6803      	ldr	r3, [r0, #0]
    f5c8:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    f5cc:	f003 0307 	and.w	r3, r3, #7
    f5d0:	2b01      	cmp	r3, #1
    f5d2:	d008      	beq.n	f5e6 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    f5d4:	458c      	cmp	ip, r1
    f5d6:	d009      	beq.n	f5ec <set_starting_state+0x36>
		err = -EPERM;
    f5d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    f5dc:	f382 8811 	msr	BASEPRI, r2
    f5e0:	f3bf 8f6f 	isb	sy
}
    f5e4:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    f5e6:	6001      	str	r1, [r0, #0]
	int err = 0;
    f5e8:	2000      	movs	r0, #0
    f5ea:	e7f7      	b.n	f5dc <set_starting_state+0x26>
		err = -EALREADY;
    f5ec:	f06f 0077 	mvn.w	r0, #119	; 0x77
    f5f0:	e7f4      	b.n	f5dc <set_starting_state+0x26>

0000f5f2 <set_on_state>:
	__asm__ volatile(
    f5f2:	f04f 0320 	mov.w	r3, #32
    f5f6:	f3ef 8211 	mrs	r2, BASEPRI
    f5fa:	f383 8812 	msr	BASEPRI_MAX, r3
    f5fe:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    f602:	6803      	ldr	r3, [r0, #0]
    f604:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f608:	f043 0302 	orr.w	r3, r3, #2
    f60c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    f60e:	f382 8811 	msr	BASEPRI, r2
    f612:	f3bf 8f6f 	isb	sy
}
    f616:	4770      	bx	lr

0000f618 <clkstarted_handle>:
{
    f618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f61a:	4606      	mov	r6, r0
    f61c:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    f61e:	f7ff ffa0 	bl	f562 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    f622:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    f624:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    f626:	2300      	movs	r3, #0
    f628:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    f62c:	f7ff ffe1 	bl	f5f2 <set_on_state>
	if (callback) {
    f630:	b11d      	cbz	r5, f63a <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    f632:	463a      	mov	r2, r7
    f634:	4621      	mov	r1, r4
    f636:	4630      	mov	r0, r6
    f638:	47a8      	blx	r5
}
    f63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f63c <async_start>:
{
    f63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f640:	4606      	mov	r6, r0
    f642:	4690      	mov	r8, r2
    f644:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    f646:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    f648:	4629      	mov	r1, r5
    f64a:	f7ff ff8a 	bl	f562 <get_sub_data>
    f64e:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    f650:	9906      	ldr	r1, [sp, #24]
    f652:	3008      	adds	r0, #8
    f654:	f7ff ffaf 	bl	f5b6 <set_starting_state>
	if (err < 0) {
    f658:	2800      	cmp	r0, #0
    f65a:	db09      	blt.n	f670 <async_start+0x34>
	subdata->cb = cb;
    f65c:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    f660:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    f662:	4629      	mov	r1, r5
    f664:	4630      	mov	r0, r6
    f666:	f7ff ff83 	bl	f570 <get_sub_config>
    f66a:	6803      	ldr	r3, [r0, #0]
    f66c:	4798      	blx	r3
	return 0;
    f66e:	2000      	movs	r0, #0
}
    f670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f674 <api_start>:
{
    f674:	b510      	push	{r4, lr}
    f676:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    f678:	2480      	movs	r4, #128	; 0x80
    f67a:	9400      	str	r4, [sp, #0]
    f67c:	f7ff ffde 	bl	f63c <async_start>
}
    f680:	b002      	add	sp, #8
    f682:	bd10      	pop	{r4, pc}

0000f684 <onoff_started_callback>:
{
    f684:	b510      	push	{r4, lr}
    f686:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    f688:	b2c9      	uxtb	r1, r1
    f68a:	f7ff ff77 	bl	f57c <get_onoff_manager>
	notify(mgr, 0);
    f68e:	2100      	movs	r1, #0
    f690:	47a0      	blx	r4
}
    f692:	bd10      	pop	{r4, pc}

0000f694 <hfclk_start>:
{
    f694:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    f696:	2001      	movs	r0, #1
    f698:	f7f9 fc3c 	bl	8f14 <nrfx_clock_start>
}
    f69c:	bd08      	pop	{r3, pc}

0000f69e <lfclk_start>:
{
    f69e:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    f6a0:	2000      	movs	r0, #0
    f6a2:	f7f9 fc37 	bl	8f14 <nrfx_clock_start>
}
    f6a6:	bd08      	pop	{r3, pc}

0000f6a8 <hfclk_stop>:
{
    f6a8:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    f6aa:	2001      	movs	r0, #1
    f6ac:	f7f9 fca8 	bl	9000 <nrfx_clock_stop>
}
    f6b0:	bd08      	pop	{r3, pc}

0000f6b2 <lfclk_stop>:
{
    f6b2:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    f6b4:	2000      	movs	r0, #0
    f6b6:	f7f9 fca3 	bl	9000 <nrfx_clock_stop>
}
    f6ba:	bd08      	pop	{r3, pc}

0000f6bc <api_stop>:
{
    f6bc:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    f6be:	2280      	movs	r2, #128	; 0x80
    f6c0:	f7f7 fc10 	bl	6ee4 <stop>
}
    f6c4:	bd08      	pop	{r3, pc}

0000f6c6 <blocking_start_callback>:
{
    f6c6:	b508      	push	{r3, lr}
    f6c8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    f6ca:	f7fb fcd7 	bl	b07c <z_impl_k_sem_give>
}
    f6ce:	bd08      	pop	{r3, pc}

0000f6d0 <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f6d0:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    f6d4:	f020 0001 	bic.w	r0, r0, #1
    f6d8:	0540      	lsls	r0, r0, #21
    f6da:	0d40      	lsrs	r0, r0, #21
    f6dc:	f240 2306 	movw	r3, #518	; 0x206
    f6e0:	4298      	cmp	r0, r3
    f6e2:	d033      	beq.n	f74c <get_drive+0x7c>
    f6e4:	d816      	bhi.n	f714 <get_drive+0x44>
    f6e6:	2806      	cmp	r0, #6
    f6e8:	d02c      	beq.n	f744 <get_drive+0x74>
    f6ea:	d906      	bls.n	f6fa <get_drive+0x2a>
    f6ec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    f6f0:	d10d      	bne.n	f70e <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    f6f2:	2301      	movs	r3, #1
    f6f4:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f6f6:	2000      	movs	r0, #0
		break;
    f6f8:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f6fa:	b300      	cbz	r0, f73e <get_drive+0x6e>
    f6fc:	2802      	cmp	r0, #2
    f6fe:	d103      	bne.n	f708 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    f700:	2304      	movs	r3, #4
    f702:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f704:	2000      	movs	r0, #0
		break;
    f706:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f708:	f06f 0015 	mvn.w	r0, #21
    f70c:	4770      	bx	lr
    f70e:	f06f 0015 	mvn.w	r0, #21
    f712:	4770      	bx	lr
    f714:	f240 4302 	movw	r3, #1026	; 0x402
    f718:	4298      	cmp	r0, r3
    f71a:	d01b      	beq.n	f754 <get_drive+0x84>
    f71c:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    f720:	d103      	bne.n	f72a <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    f722:	2303      	movs	r3, #3
    f724:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f726:	2000      	movs	r0, #0
		break;
    f728:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f72a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    f72e:	d103      	bne.n	f738 <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    f730:	2302      	movs	r3, #2
    f732:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f734:	2000      	movs	r0, #0
		break;
    f736:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f738:	f06f 0015 	mvn.w	r0, #21
    f73c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    f73e:	2000      	movs	r0, #0
    f740:	7008      	strb	r0, [r1, #0]
		break;
    f742:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    f744:	2306      	movs	r3, #6
    f746:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f748:	2000      	movs	r0, #0
		break;
    f74a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    f74c:	2307      	movs	r3, #7
    f74e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f750:	2000      	movs	r0, #0
		break;
    f752:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    f754:	2305      	movs	r3, #5
    f756:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f758:	2000      	movs	r0, #0
}
    f75a:	4770      	bx	lr

0000f75c <get_pull>:
	if (flags & GPIO_PULL_UP) {
    f75c:	f010 0f10 	tst.w	r0, #16
    f760:	d104      	bne.n	f76c <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    f762:	f010 0f20 	tst.w	r0, #32
    f766:	d103      	bne.n	f770 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    f768:	2000      	movs	r0, #0
    f76a:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    f76c:	2003      	movs	r0, #3
    f76e:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    f770:	2001      	movs	r0, #1
}
    f772:	4770      	bx	lr

0000f774 <gpio_nrfx_port_get_raw>:
	return port->config;
    f774:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f776:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    f778:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    f77c:	600b      	str	r3, [r1, #0]
}
    f77e:	2000      	movs	r0, #0
    f780:	4770      	bx	lr

0000f782 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    f782:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f784:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    f786:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    f78a:	4042      	eors	r2, r0
    f78c:	400a      	ands	r2, r1
    f78e:	4042      	eors	r2, r0
    p_reg->OUT = value;
    f790:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    f794:	2000      	movs	r0, #0
    f796:	4770      	bx	lr

0000f798 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    f798:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f79a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    f79c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    f7a0:	2000      	movs	r0, #0
    f7a2:	4770      	bx	lr

0000f7a4 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    f7a4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f7a6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    f7a8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    f7ac:	2000      	movs	r0, #0
    f7ae:	4770      	bx	lr

0000f7b0 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    f7b0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f7b2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    f7b4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    f7b8:	404b      	eors	r3, r1
    p_reg->OUT = value;
    f7ba:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    f7be:	2000      	movs	r0, #0
    f7c0:	4770      	bx	lr

0000f7c2 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    f7c2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    f7c6:	d007      	beq.n	f7d8 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    f7c8:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    f7cc:	d00d      	beq.n	f7ea <get_trigger+0x28>
    f7ce:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    f7d2:	d008      	beq.n	f7e6 <get_trigger+0x24>
    f7d4:	2001      	movs	r0, #1
}
    f7d6:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    f7d8:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    f7dc:	d001      	beq.n	f7e2 <get_trigger+0x20>
    f7de:	2005      	movs	r0, #5
    f7e0:	4770      	bx	lr
    f7e2:	2004      	movs	r0, #4
    f7e4:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    f7e6:	2002      	movs	r0, #2
    f7e8:	4770      	bx	lr
    f7ea:	2003      	movs	r0, #3
    f7ec:	4770      	bx	lr

0000f7ee <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    f7ee:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f7f0:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    f7f2:	f04f 0120 	mov.w	r1, #32
    f7f6:	f3ef 8211 	mrs	r2, BASEPRI
    f7fa:	f381 8812 	msr	BASEPRI_MAX, r1
    f7fe:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f802:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    f806:	b131      	cbz	r1, f816 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f808:	2100      	movs	r1, #0
    f80a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    f80e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f812:	2101      	movs	r1, #1
    f814:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    f816:	f382 8811 	msr	BASEPRI, r2
    f81a:	f3bf 8f6f 	isb	sy
}
    f81e:	4770      	bx	lr

0000f820 <uarte_nrfx_configure>:
{
    f820:	b570      	push	{r4, r5, r6, lr}
    f822:	b082      	sub	sp, #8
    f824:	4606      	mov	r6, r0
    f826:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    f828:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    f82a:	794b      	ldrb	r3, [r1, #5]
    f82c:	2b01      	cmp	r3, #1
    f82e:	d006      	beq.n	f83e <uarte_nrfx_configure+0x1e>
    f830:	2b03      	cmp	r3, #3
    f832:	d011      	beq.n	f858 <uarte_nrfx_configure+0x38>
    f834:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    f838:	4618      	mov	r0, r3
    f83a:	b002      	add	sp, #8
    f83c:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    f83e:	2300      	movs	r3, #0
    f840:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    f844:	79a3      	ldrb	r3, [r4, #6]
    f846:	2b03      	cmp	r3, #3
    f848:	d137      	bne.n	f8ba <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    f84a:	79e3      	ldrb	r3, [r4, #7]
    f84c:	b143      	cbz	r3, f860 <uarte_nrfx_configure+0x40>
    f84e:	2b01      	cmp	r3, #1
    f850:	d010      	beq.n	f874 <uarte_nrfx_configure+0x54>
    f852:	f06f 0385 	mvn.w	r3, #133	; 0x85
    f856:	e7ef      	b.n	f838 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    f858:	2310      	movs	r3, #16
    f85a:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    f85e:	e7f1      	b.n	f844 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    f860:	2300      	movs	r3, #0
    f862:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    f866:	7923      	ldrb	r3, [r4, #4]
    f868:	b143      	cbz	r3, f87c <uarte_nrfx_configure+0x5c>
    f86a:	2b02      	cmp	r3, #2
    f86c:	d021      	beq.n	f8b2 <uarte_nrfx_configure+0x92>
    f86e:	f06f 0385 	mvn.w	r3, #133	; 0x85
    f872:	e7e1      	b.n	f838 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    f874:	2301      	movs	r3, #1
    f876:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    f87a:	e7f4      	b.n	f866 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    f87c:	2300      	movs	r3, #0
    f87e:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    f882:	6821      	ldr	r1, [r4, #0]
    f884:	4630      	mov	r0, r6
    f886:	f7f7 ff35 	bl	76f4 <baudrate_set>
    f88a:	4603      	mov	r3, r0
    f88c:	b9c0      	cbnz	r0, f8c0 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    f88e:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    f890:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    f892:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    f896:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    f89a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    f89e:	4331      	orrs	r1, r6
    f8a0:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    f8a2:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    f8a6:	3504      	adds	r5, #4
    f8a8:	e894 0003 	ldmia.w	r4, {r0, r1}
    f8ac:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    f8b0:	e7c2      	b.n	f838 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    f8b2:	230e      	movs	r3, #14
    f8b4:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    f8b8:	e7e3      	b.n	f882 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    f8ba:	f06f 0385 	mvn.w	r3, #133	; 0x85
    f8be:	e7bb      	b.n	f838 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    f8c0:	f06f 0385 	mvn.w	r3, #133	; 0x85
    f8c4:	e7b8      	b.n	f838 <uarte_nrfx_configure+0x18>

0000f8c6 <uarte_nrfx_config_get>:
{
    f8c6:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    f8c8:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    f8ca:	3304      	adds	r3, #4
    f8cc:	e893 0003 	ldmia.w	r3, {r0, r1}
    f8d0:	e882 0003 	stmia.w	r2, {r0, r1}
}
    f8d4:	2000      	movs	r0, #0
    f8d6:	4770      	bx	lr

0000f8d8 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    f8d8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f8da:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    f8dc:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    f8e0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    f8e4:	4770      	bx	lr

0000f8e6 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    f8e6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f8e8:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    f8ea:	685b      	ldr	r3, [r3, #4]
    f8ec:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f8f0:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    f8f4:	b929      	cbnz	r1, f902 <is_tx_ready+0x1c>
    f8f6:	b933      	cbnz	r3, f906 <is_tx_ready+0x20>
    f8f8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    f8fc:	b92b      	cbnz	r3, f90a <is_tx_ready+0x24>
    f8fe:	2000      	movs	r0, #0
    f900:	4770      	bx	lr
    f902:	2001      	movs	r0, #1
    f904:	4770      	bx	lr
    f906:	2000      	movs	r0, #0
    f908:	4770      	bx	lr
    f90a:	2001      	movs	r0, #1
}
    f90c:	4770      	bx	lr

0000f90e <uarte_enable>:
	struct uarte_nrfx_data *data = dev->data;
    f90e:	6903      	ldr	r3, [r0, #16]
	if (data->async) {
    f910:	68db      	ldr	r3, [r3, #12]
    f912:	b123      	cbz	r3, f91e <uarte_enable+0x10>
		bool disabled = data->async->low_power_mask == 0;
    f914:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
		data->async->low_power_mask |= mask;
    f918:	4311      	orrs	r1, r2
    f91a:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
	const struct uarte_nrfx_config *config = dev->config;
    f91e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f920:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f922:	2208      	movs	r2, #8
    f924:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    f928:	4770      	bx	lr

0000f92a <tx_start>:
{
    f92a:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    f92c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f92e:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    f930:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    f934:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f938:	2200      	movs	r2, #0
    f93a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    f93e:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    f942:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    f946:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    f94a:	685b      	ldr	r3, [r3, #4]
    f94c:	f013 0f10 	tst.w	r3, #16
    f950:	d102      	bne.n	f958 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f952:	2301      	movs	r3, #1
    f954:	60a3      	str	r3, [r4, #8]
}
    f956:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    f958:	2101      	movs	r1, #1
    f95a:	f7ff ffd8 	bl	f90e <uarte_enable>
    p_reg->INTENSET = mask;
    f95e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    f962:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    f966:	e7f4      	b.n	f952 <tx_start+0x28>

0000f968 <uart_disable>:
	const struct uarte_nrfx_config *config = dev->config;
    f968:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f96a:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    f96c:	2200      	movs	r2, #0
    f96e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    f972:	4770      	bx	lr

0000f974 <uarte_nrfx_rx_counting_init>:
	const struct uarte_nrfx_config *cfg = dev->config;
    f974:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f976:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    f978:	2204      	movs	r2, #4
    f97a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    f97e:	2000      	movs	r0, #0
    f980:	4770      	bx	lr

0000f982 <start_tx_locked>:
{
    f982:	b538      	push	{r3, r4, r5, lr}
    f984:	4605      	mov	r5, r0
    f986:	460c      	mov	r4, r1
	if (!is_tx_ready(dev)) {
    f988:	f7ff ffad 	bl	f8e6 <is_tx_ready>
    f98c:	b920      	cbnz	r0, f998 <start_tx_locked+0x16>
		data->async->pending_tx = true;
    f98e:	68e3      	ldr	r3, [r4, #12]
    f990:	2201      	movs	r2, #1
    f992:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    f996:	bd38      	pop	{r3, r4, r5, pc}
		data->async->pending_tx = false;
    f998:	68e3      	ldr	r3, [r4, #12]
    f99a:	2200      	movs	r2, #0
    f99c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    f9a0:	68e3      	ldr	r3, [r4, #12]
    f9a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f9a6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    f9aa:	68e3      	ldr	r3, [r4, #12]
    f9ac:	695a      	ldr	r2, [r3, #20]
    f9ae:	6919      	ldr	r1, [r3, #16]
    f9b0:	4628      	mov	r0, r5
    f9b2:	f7ff ffba 	bl	f92a <tx_start>
}
    f9b6:	e7ee      	b.n	f996 <start_tx_locked+0x14>

0000f9b8 <user_callback>:
{
    f9b8:	b508      	push	{r3, lr}
	struct uarte_nrfx_data *data = dev->data;
    f9ba:	6903      	ldr	r3, [r0, #16]
	if (data->async->user_callback) {
    f9bc:	68da      	ldr	r2, [r3, #12]
    f9be:	6813      	ldr	r3, [r2, #0]
    f9c0:	b10b      	cbz	r3, f9c6 <user_callback+0xe>
		data->async->user_callback(dev, evt, data->async->user_data);
    f9c2:	6852      	ldr	r2, [r2, #4]
    f9c4:	4798      	blx	r3
}
    f9c6:	bd08      	pop	{r3, pc}

0000f9c8 <notify_uart_rx_rdy>:
{
    f9c8:	b500      	push	{lr}
    f9ca:	b087      	sub	sp, #28
	struct uarte_nrfx_data *data = dev->data;
    f9cc:	6902      	ldr	r2, [r0, #16]
	struct uart_event evt = {
    f9ce:	2300      	movs	r3, #0
    f9d0:	9301      	str	r3, [sp, #4]
    f9d2:	9302      	str	r3, [sp, #8]
    f9d4:	9303      	str	r3, [sp, #12]
    f9d6:	9304      	str	r3, [sp, #16]
    f9d8:	9305      	str	r3, [sp, #20]
    f9da:	2302      	movs	r3, #2
    f9dc:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    f9e0:	68d3      	ldr	r3, [r2, #12]
    f9e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
	struct uart_event evt = {
    f9e4:	9202      	str	r2, [sp, #8]
		.data.rx.offset = data->async->rx_offset
    f9e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	struct uart_event evt = {
    f9e8:	9303      	str	r3, [sp, #12]
    f9ea:	9104      	str	r1, [sp, #16]
	user_callback(dev, &evt);
    f9ec:	a901      	add	r1, sp, #4
    f9ee:	f7ff ffe3 	bl	f9b8 <user_callback>
}
    f9f2:	b007      	add	sp, #28
    f9f4:	f85d fb04 	ldr.w	pc, [sp], #4

0000f9f8 <rx_buf_release>:
	if (*buf) {
    f9f8:	680b      	ldr	r3, [r1, #0]
    f9fa:	b19b      	cbz	r3, fa24 <rx_buf_release+0x2c>
{
    f9fc:	b530      	push	{r4, r5, lr}
    f9fe:	b087      	sub	sp, #28
    fa00:	460c      	mov	r4, r1
		struct uart_event evt = {
    fa02:	2500      	movs	r5, #0
    fa04:	9501      	str	r5, [sp, #4]
    fa06:	9502      	str	r5, [sp, #8]
    fa08:	9503      	str	r5, [sp, #12]
    fa0a:	9504      	str	r5, [sp, #16]
    fa0c:	9505      	str	r5, [sp, #20]
    fa0e:	2304      	movs	r3, #4
    fa10:	f88d 3004 	strb.w	r3, [sp, #4]
			.data.rx_buf.buf = *buf,
    fa14:	680b      	ldr	r3, [r1, #0]
		struct uart_event evt = {
    fa16:	9302      	str	r3, [sp, #8]
		user_callback(dev, &evt);
    fa18:	a901      	add	r1, sp, #4
    fa1a:	f7ff ffcd 	bl	f9b8 <user_callback>
		*buf = NULL;
    fa1e:	6025      	str	r5, [r4, #0]
}
    fa20:	b007      	add	sp, #28
    fa22:	bd30      	pop	{r4, r5, pc}
    fa24:	4770      	bx	lr

0000fa26 <notify_rx_disable>:
{
    fa26:	b500      	push	{lr}
    fa28:	b087      	sub	sp, #28
	struct uart_event evt = {
    fa2a:	2300      	movs	r3, #0
    fa2c:	9301      	str	r3, [sp, #4]
    fa2e:	9302      	str	r3, [sp, #8]
    fa30:	9303      	str	r3, [sp, #12]
    fa32:	9304      	str	r3, [sp, #16]
    fa34:	9305      	str	r3, [sp, #20]
    fa36:	2305      	movs	r3, #5
    fa38:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    fa3c:	a901      	add	r1, sp, #4
    fa3e:	f7ff ffbb 	bl	f9b8 <user_callback>
}
    fa42:	b007      	add	sp, #28
    fa44:	f85d fb04 	ldr.w	pc, [sp], #4

0000fa48 <uarte_nrfx_rx_buf_rsp>:
{
    fa48:	b430      	push	{r4, r5}
	struct uarte_nrfx_data *data = dev->data;
    fa4a:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    fa4c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    fa4e:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    fa50:	f04f 0020 	mov.w	r0, #32
    fa54:	f3ef 8c11 	mrs	ip, BASEPRI
    fa58:	f380 8812 	msr	BASEPRI_MAX, r0
    fa5c:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    fa60:	68e0      	ldr	r0, [r4, #12]
    fa62:	6e05      	ldr	r5, [r0, #96]	; 0x60
    fa64:	b1ad      	cbz	r5, fa92 <uarte_nrfx_rx_buf_rsp+0x4a>
	} else if (data->async->rx_next_buf == NULL) {
    fa66:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    fa68:	b9b5      	cbnz	r5, fa98 <uarte_nrfx_rx_buf_rsp+0x50>
		data->async->rx_next_buf = buf;
    fa6a:	66c1      	str	r1, [r0, #108]	; 0x6c
		data->async->rx_next_buf_len = len;
    fa6c:	68e0      	ldr	r0, [r4, #12]
    fa6e:	6702      	str	r2, [r0, #112]	; 0x70
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    fa70:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    fa74:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    fa78:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    fa7c:	f042 0220 	orr.w	r2, r2, #32
    fa80:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		err = 0;
    fa84:	2000      	movs	r0, #0
	__asm__ volatile(
    fa86:	f38c 8811 	msr	BASEPRI, ip
    fa8a:	f3bf 8f6f 	isb	sy
}
    fa8e:	bc30      	pop	{r4, r5}
    fa90:	4770      	bx	lr
		err = -EACCES;
    fa92:	f06f 000c 	mvn.w	r0, #12
    fa96:	e7f6      	b.n	fa86 <uarte_nrfx_rx_buf_rsp+0x3e>
		err = -EBUSY;
    fa98:	f06f 000f 	mvn.w	r0, #15
    fa9c:	e7f3      	b.n	fa86 <uarte_nrfx_rx_buf_rsp+0x3e>

0000fa9e <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    fa9e:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
    faa0:	68d8      	ldr	r0, [r3, #12]
    faa2:	b120      	cbz	r0, faae <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
    faa4:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
    faa6:	68db      	ldr	r3, [r3, #12]
    faa8:	605a      	str	r2, [r3, #4]
	return 0;
    faaa:	2000      	movs	r0, #0
    faac:	4770      	bx	lr
		return -ENOTSUP;
    faae:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    fab2:	4770      	bx	lr

0000fab4 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = dev->data;
    fab4:	6902      	ldr	r2, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    fab6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    fab8:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
    faba:	68d0      	ldr	r0, [r2, #12]
    fabc:	b960      	cbnz	r0, fad8 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fabe:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    fac2:	b160      	cbz	r0, fade <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    fac4:	7d52      	ldrb	r2, [r2, #21]
    fac6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fac8:	2000      	movs	r0, #0
    faca:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    face:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fad2:	2201      	movs	r2, #1
    fad4:	601a      	str	r2, [r3, #0]
	return 0;
    fad6:	4770      	bx	lr
		return -ENOTSUP;
    fad8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    fadc:	4770      	bx	lr
		return -1;
    fade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    fae2:	4770      	bx	lr

0000fae4 <wait_tx_ready>:
{
    fae4:	b570      	push	{r4, r5, r6, lr}
    fae6:	4606      	mov	r6, r0
    fae8:	e014      	b.n	fb14 <wait_tx_ready+0x30>
		if (res) {
    faea:	b17d      	cbz	r5, fb0c <wait_tx_ready+0x28>
	__asm__ volatile(
    faec:	f04f 0320 	mov.w	r3, #32
    faf0:	f3ef 8411 	mrs	r4, BASEPRI
    faf4:	f383 8812 	msr	BASEPRI_MAX, r3
    faf8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    fafc:	4630      	mov	r0, r6
    fafe:	f7ff fef2 	bl	f8e6 <is_tx_ready>
    fb02:	b9a0      	cbnz	r0, fb2e <wait_tx_ready+0x4a>
	__asm__ volatile(
    fb04:	f384 8811 	msr	BASEPRI, r4
    fb08:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    fb0c:	2021      	movs	r0, #33	; 0x21
    fb0e:	2100      	movs	r1, #0
    fb10:	f7fc fd94 	bl	c63c <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    fb14:	2464      	movs	r4, #100	; 0x64
    fb16:	4630      	mov	r0, r6
    fb18:	f7ff fee5 	bl	f8e6 <is_tx_ready>
    fb1c:	4605      	mov	r5, r0
    fb1e:	2800      	cmp	r0, #0
    fb20:	d1e3      	bne.n	faea <wait_tx_ready+0x6>
    fb22:	2001      	movs	r0, #1
    fb24:	f000 fc7e 	bl	10424 <nrfx_busy_wait>
    fb28:	3c01      	subs	r4, #1
    fb2a:	d1f4      	bne.n	fb16 <wait_tx_ready+0x32>
    fb2c:	e7dd      	b.n	faea <wait_tx_ready+0x6>
}
    fb2e:	4620      	mov	r0, r4
    fb30:	bd70      	pop	{r4, r5, r6, pc}

0000fb32 <uarte_nrfx_rx_disable>:
{
    fb32:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    fb34:	6905      	ldr	r5, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    fb36:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    fb38:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    fb3a:	68eb      	ldr	r3, [r5, #12]
    fb3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    fb3e:	b1ba      	cbz	r2, fb70 <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
    fb40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    fb42:	b153      	cbz	r3, fb5a <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    fb44:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    fb48:	f023 0320 	bic.w	r3, r3, #32
    fb4c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fb50:	2300      	movs	r3, #0
    fb52:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    fb56:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
    fb5a:	68e8      	ldr	r0, [r5, #12]
    fb5c:	3088      	adds	r0, #136	; 0x88
	z_impl_k_timer_stop(timer);
    fb5e:	f000 fda5 	bl	106ac <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    fb62:	68eb      	ldr	r3, [r5, #12]
    fb64:	2000      	movs	r0, #0
    fb66:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fb6a:	2301      	movs	r3, #1
    fb6c:	6063      	str	r3, [r4, #4]
}
    fb6e:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    fb70:	f06f 000d 	mvn.w	r0, #13
    fb74:	e7fb      	b.n	fb6e <uarte_nrfx_rx_disable+0x3c>

0000fb76 <error_isr>:
{
    fb76:	b510      	push	{r4, lr}
    fb78:	b086      	sub	sp, #24
    fb7a:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    fb7c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    fb7e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    fb80:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    fb84:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
	struct uart_event evt = {
    fb88:	2300      	movs	r3, #0
    fb8a:	9301      	str	r3, [sp, #4]
    fb8c:	9302      	str	r3, [sp, #8]
    fb8e:	9303      	str	r3, [sp, #12]
    fb90:	9304      	str	r3, [sp, #16]
    fb92:	9305      	str	r3, [sp, #20]
    fb94:	2306      	movs	r3, #6
    fb96:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    fb9a:	f012 0f01 	tst.w	r2, #1
    fb9e:	d108      	bne.n	fbb2 <error_isr+0x3c>
    fba0:	f012 0f02 	tst.w	r2, #2
    fba4:	d111      	bne.n	fbca <error_isr+0x54>
    fba6:	f012 0f04 	tst.w	r2, #4
    fbaa:	d110      	bne.n	fbce <error_isr+0x58>
    fbac:	f002 0208 	and.w	r2, r2, #8
    fbb0:	e000      	b.n	fbb4 <error_isr+0x3e>
    fbb2:	2201      	movs	r2, #1
	struct uart_event evt = {
    fbb4:	f88d 2008 	strb.w	r2, [sp, #8]
	user_callback(dev, &evt);
    fbb8:	a901      	add	r1, sp, #4
    fbba:	4620      	mov	r0, r4
    fbbc:	f7ff fefc 	bl	f9b8 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    fbc0:	4620      	mov	r0, r4
    fbc2:	f7ff ffb6 	bl	fb32 <uarte_nrfx_rx_disable>
}
    fbc6:	b006      	add	sp, #24
    fbc8:	bd10      	pop	{r4, pc}
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    fbca:	2202      	movs	r2, #2
    fbcc:	e7f2      	b.n	fbb4 <error_isr+0x3e>
    fbce:	2204      	movs	r2, #4
    fbd0:	e7f0      	b.n	fbb4 <error_isr+0x3e>

0000fbd2 <uarte_nrfx_tx_abort>:
{
    fbd2:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    fbd4:	6903      	ldr	r3, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    fbd6:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    fbd8:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
    fbda:	68da      	ldr	r2, [r3, #12]
    fbdc:	6891      	ldr	r1, [r2, #8]
    fbde:	b151      	cbz	r1, fbf6 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
    fbe0:	2400      	movs	r4, #0
    fbe2:	f882 40d4 	strb.w	r4, [r2, #212]	; 0xd4
	k_timer_stop(&data->async->tx_timeout_timer);
    fbe6:	68d8      	ldr	r0, [r3, #12]
    fbe8:	3028      	adds	r0, #40	; 0x28
    fbea:	f000 fd5f 	bl	106ac <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fbee:	2301      	movs	r3, #1
    fbf0:	60eb      	str	r3, [r5, #12]
	return 0;
    fbf2:	4620      	mov	r0, r4
}
    fbf4:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    fbf6:	f06f 000d 	mvn.w	r0, #13
    fbfa:	e7fb      	b.n	fbf4 <uarte_nrfx_tx_abort+0x22>

0000fbfc <tx_timeout>:
{
    fbfc:	b508      	push	{r3, lr}
	return timer->user_data;
    fbfe:	6b43      	ldr	r3, [r0, #52]	; 0x34
	(void) uarte_nrfx_tx_abort(data->dev);
    fc00:	6818      	ldr	r0, [r3, #0]
    fc02:	f7ff ffe6 	bl	fbd2 <uarte_nrfx_tx_abort>
}
    fc06:	bd08      	pop	{r3, pc}

0000fc08 <rx_timeout>:
{
    fc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc0a:	6b44      	ldr	r4, [r0, #52]	; 0x34
	const struct device *dev = data->dev;
    fc0c:	6826      	ldr	r6, [r4, #0]
	const struct uarte_nrfx_config *cfg = dev->config;
    fc0e:	6872      	ldr	r2, [r6, #4]
	if (data->async->is_in_irq) {
    fc10:	68e3      	ldr	r3, [r4, #12]
    fc12:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
    fc16:	2b00      	cmp	r3, #0
    fc18:	d138      	bne.n	fc8c <rx_timeout+0x84>
    fc1a:	f003 07ff 	and.w	r7, r3, #255	; 0xff
	return config->uarte_regs;
    fc1e:	6813      	ldr	r3, [r2, #0]
    p_reg->INTENCLR = mask;
    fc20:	2210      	movs	r2, #16
    fc22:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    fc26:	68e3      	ldr	r3, [r4, #12]
    fc28:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    fc2c:	6f59      	ldr	r1, [r3, #116]	; 0x74
    fc2e:	4291      	cmp	r1, r2
    fc30:	d004      	beq.n	fc3c <rx_timeout+0x34>
		data->async->rx_total_byte_cnt = read;
    fc32:	675a      	str	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    fc34:	68e3      	ldr	r3, [r4, #12]
    fc36:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    fc38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	int32_t len = data->async->rx_total_byte_cnt
    fc3c:	68e3      	ldr	r3, [r4, #12]
    fc3e:	6f5d      	ldr	r5, [r3, #116]	; 0x74
		    - data->async->rx_total_user_byte_cnt;
    fc40:	6f9a      	ldr	r2, [r3, #120]	; 0x78
	if (!HW_RX_COUNTING_ENABLED(data) &&
    fc42:	1aad      	subs	r5, r5, r2
    fc44:	d423      	bmi.n	fc8e <rx_timeout+0x86>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    fc46:	68e3      	ldr	r3, [r4, #12]
    fc48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    fc4a:	18a8      	adds	r0, r5, r2
    fc4c:	6e59      	ldr	r1, [r3, #100]	; 0x64
    fc4e:	4288      	cmp	r0, r1
    fc50:	d901      	bls.n	fc56 <rx_timeout+0x4e>
		len = data->async->rx_buf_len - data->async->rx_offset;
    fc52:	1a8d      	subs	r5, r1, r2
		clipped = true;
    fc54:	2701      	movs	r7, #1
	if (len > 0) {
    fc56:	2d00      	cmp	r5, #0
    fc58:	dd13      	ble.n	fc82 <rx_timeout+0x7a>
		if (clipped ||
    fc5a:	b92f      	cbnz	r7, fc68 <rx_timeout+0x60>
			(data->async->rx_timeout_left
    fc5c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
				< data->async->rx_timeout_slab)) {
    fc60:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		if (clipped ||
    fc64:	428a      	cmp	r2, r1
    fc66:	da16      	bge.n	fc96 <rx_timeout+0x8e>
			notify_uart_rx_rdy(dev, len);
    fc68:	4629      	mov	r1, r5
    fc6a:	4630      	mov	r0, r6
    fc6c:	f7ff feac 	bl	f9c8 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    fc70:	68e2      	ldr	r2, [r4, #12]
    fc72:	6e93      	ldr	r3, [r2, #104]	; 0x68
    fc74:	442b      	add	r3, r5
    fc76:	6693      	str	r3, [r2, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    fc78:	68e2      	ldr	r2, [r4, #12]
    fc7a:	6f93      	ldr	r3, [r2, #120]	; 0x78
    fc7c:	442b      	add	r3, r5
    fc7e:	6793      	str	r3, [r2, #120]	; 0x78
		if (clipped) {
    fc80:	b96f      	cbnz	r7, fc9e <rx_timeout+0x96>
	const struct uarte_nrfx_config *config = dev->config;
    fc82:	6873      	ldr	r3, [r6, #4]
	return config->uarte_regs;
    fc84:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    fc86:	2210      	movs	r2, #16
    fc88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    fc8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    fc8e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		len = 0;
    fc92:	2500      	movs	r5, #0
    fc94:	e7d7      	b.n	fc46 <rx_timeout+0x3e>
			data->async->rx_timeout_left -=
    fc96:	1a52      	subs	r2, r2, r1
    fc98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    fc9c:	e7f0      	b.n	fc80 <rx_timeout+0x78>
			k_timer_stop(&data->async->rx_timeout_timer);
    fc9e:	68e0      	ldr	r0, [r4, #12]
    fca0:	3088      	adds	r0, #136	; 0x88
    fca2:	f000 fd03 	bl	106ac <z_impl_k_timer_stop>
}
    fca6:	e7ec      	b.n	fc82 <rx_timeout+0x7a>

0000fca8 <endrx_isr>:
{
    fca8:	b570      	push	{r4, r5, r6, lr}
    fcaa:	4605      	mov	r5, r0
	struct uarte_nrfx_data *data = dev->data;
    fcac:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    fcae:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    fcb0:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    fcb2:	68e3      	ldr	r3, [r4, #12]
    fcb4:	2201      	movs	r2, #1
    fcb6:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	k_timer_stop(&data->async->rx_timeout_timer);
    fcba:	68e0      	ldr	r0, [r4, #12]
    fcbc:	3088      	adds	r0, #136	; 0x88
	z_impl_k_timer_stop(timer);
    fcbe:	f000 fcf5 	bl	106ac <z_impl_k_timer_stop>
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    fcc2:	f8d6 253c 	ldr.w	r2, [r6, #1340]	; 0x53c
				data->async->rx_flush_cnt;
    fcc6:	68e3      	ldr	r3, [r4, #12]
    fcc8:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
	const int rx_amount = nrf_uarte_rx_amount_get(uarte) +
    fccc:	4411      	add	r1, r2
	data->async->rx_flush_cnt = 0;
    fcce:	2200      	movs	r2, #0
    fcd0:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    fcd4:	68e3      	ldr	r3, [r4, #12]
    fcd6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	if (rx_len < 0) {
    fcd8:	1a89      	subs	r1, r1, r2
    fcda:	d40b      	bmi.n	fcf4 <endrx_isr+0x4c>
	data->async->rx_total_user_byte_cnt += rx_len;
    fcdc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    fcde:	440a      	add	r2, r1
    fce0:	679a      	str	r2, [r3, #120]	; 0x78
	if (rx_len > 0) {
    fce2:	2900      	cmp	r1, #0
    fce4:	dc08      	bgt.n	fcf8 <endrx_isr+0x50>
	if (!data->async->rx_enabled) {
    fce6:	68e1      	ldr	r1, [r4, #12]
    fce8:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    fcec:	b943      	cbnz	r3, fd00 <endrx_isr+0x58>
		data->async->is_in_irq = false;
    fcee:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
}
    fcf2:	bd70      	pop	{r4, r5, r6, pc}
		rx_len = 0;
    fcf4:	2100      	movs	r1, #0
    fcf6:	e7f1      	b.n	fcdc <endrx_isr+0x34>
		notify_uart_rx_rdy(dev, rx_len);
    fcf8:	4628      	mov	r0, r5
    fcfa:	f7ff fe65 	bl	f9c8 <notify_uart_rx_rdy>
    fcfe:	e7f2      	b.n	fce6 <endrx_isr+0x3e>
	rx_buf_release(dev, &data->async->rx_buf);
    fd00:	3160      	adds	r1, #96	; 0x60
    fd02:	4628      	mov	r0, r5
    fd04:	f7ff fe78 	bl	f9f8 <rx_buf_release>
	__asm__ volatile(
    fd08:	f04f 0320 	mov.w	r3, #32
    fd0c:	f3ef 8111 	mrs	r1, BASEPRI
    fd10:	f383 8812 	msr	BASEPRI_MAX, r3
    fd14:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    fd18:	68e3      	ldr	r3, [r4, #12]
    fd1a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    fd1c:	b1f2      	cbz	r2, fd5c <endrx_isr+0xb4>
		data->async->rx_buf = data->async->rx_next_buf;
    fd1e:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    fd20:	68e3      	ldr	r3, [r4, #12]
    fd22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    fd24:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    fd26:	68e2      	ldr	r2, [r4, #12]
    fd28:	2300      	movs	r3, #0
    fd2a:	66d3      	str	r3, [r2, #108]	; 0x6c
		data->async->rx_next_buf_len = 0;
    fd2c:	68e2      	ldr	r2, [r4, #12]
    fd2e:	6713      	str	r3, [r2, #112]	; 0x70
		data->async->rx_offset = 0;
    fd30:	68e2      	ldr	r2, [r4, #12]
    fd32:	6693      	str	r3, [r2, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fd34:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    fd38:	b90b      	cbnz	r3, fd3e <endrx_isr+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd3a:	2301      	movs	r3, #1
    fd3c:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    fd3e:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    fd42:	f023 0320 	bic.w	r3, r3, #32
    fd46:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    fd4a:	f381 8811 	msr	BASEPRI, r1
    fd4e:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    fd52:	68e3      	ldr	r3, [r4, #12]
    fd54:	2200      	movs	r2, #0
    fd56:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    fd5a:	e7ca      	b.n	fcf2 <endrx_isr+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd5c:	2301      	movs	r3, #1
    fd5e:	6073      	str	r3, [r6, #4]
}
    fd60:	e7f3      	b.n	fd4a <endrx_isr+0xa2>

0000fd62 <setup_tx_cache>:
{
    fd62:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    fd64:	68c3      	ldr	r3, [r0, #12]
    fd66:	68da      	ldr	r2, [r3, #12]
    fd68:	6a19      	ldr	r1, [r3, #32]
	if (!remaining) {
    fd6a:	1a52      	subs	r2, r2, r1
    fd6c:	d010      	beq.n	fd90 <setup_tx_cache+0x2e>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    fd6e:	2a08      	cmp	r2, #8
    fd70:	bf28      	it	cs
    fd72:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    fd74:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
    fd76:	68c3      	ldr	r3, [r0, #12]
    fd78:	f103 0118 	add.w	r1, r3, #24
    fd7c:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    fd7e:	68c0      	ldr	r0, [r0, #12]
    fd80:	6881      	ldr	r1, [r0, #8]
    fd82:	6a03      	ldr	r3, [r0, #32]
    fd84:	4419      	add	r1, r3
    fd86:	3018      	adds	r0, #24
    fd88:	f000 fd0b 	bl	107a2 <memcpy>
	return true;
    fd8c:	2001      	movs	r0, #1
}
    fd8e:	bd08      	pop	{r3, pc}
		return false;
    fd90:	2000      	movs	r0, #0
    fd92:	e7fc      	b.n	fd8e <setup_tx_cache+0x2c>

0000fd94 <z_log_msg2_runtime_create>:
{
    fd94:	b510      	push	{r4, lr}
    fd96:	b086      	sub	sp, #24
	va_start(ap, fmt);
    fd98:	ac0b      	add	r4, sp, #44	; 0x2c
    fd9a:	9405      	str	r4, [sp, #20]
    fd9c:	9403      	str	r4, [sp, #12]
    fd9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    fda0:	9402      	str	r4, [sp, #8]
    fda2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    fda4:	9401      	str	r4, [sp, #4]
    fda6:	9c08      	ldr	r4, [sp, #32]
    fda8:	9400      	str	r4, [sp, #0]
    fdaa:	f7f5 fbbb 	bl	5524 <z_impl_z_log_msg2_runtime_vcreate>
}
    fdae:	b006      	add	sp, #24
    fdb0:	bd10      	pop	{r4, pc}

0000fdb2 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    fdb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fdb6:	b083      	sub	sp, #12
    fdb8:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    fdba:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    fdbc:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    fdbe:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    fdc2:	2100      	movs	r1, #0
    fdc4:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    fdc8:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    fdcc:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    fdd0:	aa01      	add	r2, sp, #4
    fdd2:	4648      	mov	r0, r9
    fdd4:	f000 fa72 	bl	102bc <pinctrl_lookup_state>
	if (ret < 0) {
    fdd8:	1e04      	subs	r4, r0, #0
    fdda:	db07      	blt.n	fdec <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    fddc:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    fdde:	f8d9 2000 	ldr.w	r2, [r9]
    fde2:	7919      	ldrb	r1, [r3, #4]
    fde4:	6818      	ldr	r0, [r3, #0]
    fde6:	f7f8 f9df 	bl	81a8 <pinctrl_configure_pins>
    fdea:	4604      	mov	r4, r0
	if (err < 0) {
    fdec:	2c00      	cmp	r4, #0
    fdee:	db2c      	blt.n	fe4a <uarte_instance_init+0x98>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    fdf0:	f108 0104 	add.w	r1, r8, #4
    fdf4:	4628      	mov	r0, r5
    fdf6:	f7ff fd13 	bl	f820 <uarte_nrfx_configure>
	if (err) {
    fdfa:	4604      	mov	r4, r0
    fdfc:	bb28      	cbnz	r0, fe4a <uarte_instance_init+0x98>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    fdfe:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    fe00:	f013 0f02 	tst.w	r3, #2
    fe04:	d125      	bne.n	fe52 <uarte_instance_init+0xa0>
		}
	}


#ifdef UARTE_ANY_ASYNC
	if (data->async) {
    fe06:	f8d8 300c 	ldr.w	r3, [r8, #12]
    fe0a:	b353      	cbz	r3, fe62 <uarte_instance_init+0xb0>
		err = uarte_nrfx_init(dev);
    fe0c:	4628      	mov	r0, r5
    fe0e:	f7f7 fed9 	bl	7bc4 <uarte_nrfx_init>
		if (err < 0) {
    fe12:	2800      	cmp	r0, #0
    fe14:	db38      	blt.n	fe88 <uarte_instance_init+0xd6>
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    fe16:	687b      	ldr	r3, [r7, #4]
    fe18:	f013 0f02 	tst.w	r3, #2
    fe1c:	d103      	bne.n	fe26 <uarte_instance_init+0x74>
    p_reg->INTENSET = mask;
    fe1e:	f44f 7380 	mov.w	r3, #256	; 0x100
    fe22:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    fe26:	687b      	ldr	r3, [r7, #4]
    fe28:	f013 0f10 	tst.w	r3, #16
    fe2c:	d003      	beq.n	fe36 <uarte_instance_init+0x84>
    fe2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    fe32:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    fe36:	f108 0314 	add.w	r3, r8, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fe3a:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fe3e:	2300      	movs	r3, #0
    fe40:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fe44:	2301      	movs	r3, #1
    fe46:	60b3      	str	r3, [r6, #8]
    fe48:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    fe4a:	4620      	mov	r0, r4
    fe4c:	b003      	add	sp, #12
    fe4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    fe52:	4641      	mov	r1, r8
    fe54:	4630      	mov	r0, r6
    fe56:	f7f7 fe81 	bl	7b5c <endtx_stoptx_ppi_init>
		if (err < 0) {
    fe5a:	2800      	cmp	r0, #0
    fe5c:	dad3      	bge.n	fe06 <uarte_instance_init+0x54>
			return err;
    fe5e:	4604      	mov	r4, r0
    fe60:	e7f3      	b.n	fe4a <uarte_instance_init+0x98>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    fe62:	2308      	movs	r3, #8
    fe64:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
		if (!cfg->disable_rx) {
    fe68:	7a3b      	ldrb	r3, [r7, #8]
    fe6a:	2b00      	cmp	r3, #0
    fe6c:	d1d3      	bne.n	fe16 <uarte_instance_init+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fe6e:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    fe72:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    fe76:	f108 0315 	add.w	r3, r8, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    fe7a:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    fe7e:	2301      	movs	r3, #1
    fe80:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fe84:	6033      	str	r3, [r6, #0]
}
    fe86:	e7c6      	b.n	fe16 <uarte_instance_init+0x64>
			return err;
    fe88:	4604      	mov	r4, r0
    fe8a:	e7de      	b.n	fe4a <uarte_instance_init+0x98>

0000fe8c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    fe8c:	b510      	push	{r4, lr}
    fe8e:	4604      	mov	r4, r0
    fe90:	2200      	movs	r2, #0
    fe92:	2101      	movs	r1, #1
    fe94:	2002      	movs	r0, #2
    fe96:	f7f5 ffd3 	bl	5e40 <z_arm_irq_priority_set>
    fe9a:	2002      	movs	r0, #2
    fe9c:	f7f5 ffb4 	bl	5e08 <arch_irq_enable>
    fea0:	2100      	movs	r1, #0
    fea2:	4620      	mov	r0, r4
    fea4:	f7ff ff85 	bl	fdb2 <uarte_instance_init>
    fea8:	bd10      	pop	{r4, pc}

0000feaa <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    feaa:	b510      	push	{r4, lr}
    feac:	4604      	mov	r4, r0
    feae:	2200      	movs	r2, #0
    feb0:	2101      	movs	r1, #1
    feb2:	2028      	movs	r0, #40	; 0x28
    feb4:	f7f5 ffc4 	bl	5e40 <z_arm_irq_priority_set>
    feb8:	2028      	movs	r0, #40	; 0x28
    feba:	f7f5 ffa5 	bl	5e08 <arch_irq_enable>
    febe:	2100      	movs	r1, #0
    fec0:	4620      	mov	r0, r4
    fec2:	f7ff ff76 	bl	fdb2 <uarte_instance_init>
    fec6:	bd10      	pop	{r4, pc}

0000fec8 <rx_flush>:
{
    fec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    feca:	b083      	sub	sp, #12
	const struct uarte_nrfx_config *config = dev->config;
    fecc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    fece:	681c      	ldr	r4, [r3, #0]
    return p_reg->RXD.AMOUNT;
    fed0:	f8d4 753c 	ldr.w	r7, [r4, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    fed4:	460d      	mov	r5, r1
    fed6:	b311      	cbz	r1, ff1e <rx_flush+0x56>
    fed8:	4616      	mov	r6, r2
	if (buf) {
    feda:	b315      	cbz	r5, ff22 <rx_flush+0x5a>
__ssp_bos_icheck3(memset, void *, int)
    fedc:	2100      	movs	r1, #0
    fede:	4628      	mov	r0, r5
    fee0:	f000 fc6d 	bl	107be <memset>
		flush_buf = buf;
    fee4:	462b      	mov	r3, r5
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    fee6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    feea:	f8c4 6538 	str.w	r6, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    feee:	2300      	movs	r3, #0
    fef0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    fef4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fef8:	2301      	movs	r3, #1
    fefa:	62e3      	str	r3, [r4, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fefc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    ff00:	2b00      	cmp	r3, #0
    ff02:	d0fb      	beq.n	fefc <rx_flush+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ff04:	2300      	movs	r3, #0
    ff06:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    ff0a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (!buf) {
    ff0e:	b155      	cbz	r5, ff26 <rx_flush+0x5e>
    return p_reg->RXD.AMOUNT;
    ff10:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
	if (rx_amount != prev_rx_amount) {
    ff14:	4287      	cmp	r7, r0
    ff16:	d00c      	beq.n	ff32 <rx_flush+0x6a>
		return rx_amount;
    ff18:	b2c0      	uxtb	r0, r0
}
    ff1a:	b003      	add	sp, #12
    ff1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    ff1e:	2605      	movs	r6, #5
    ff20:	e7db      	b.n	feda <rx_flush+0x12>
		flush_buf = tmp_buf;
    ff22:	466b      	mov	r3, sp
    ff24:	e7df      	b.n	fee6 <rx_flush+0x1e>
    ff26:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
		return nrf_uarte_rx_amount_get(uarte);
    ff2a:	b2c0      	uxtb	r0, r0
    ff2c:	e7f5      	b.n	ff1a <rx_flush+0x52>
			return rx_amount;
    ff2e:	b2c0      	uxtb	r0, r0
    ff30:	e7f3      	b.n	ff1a <rx_flush+0x52>
	for (int i = 0; i < flush_len; i++) {
    ff32:	2300      	movs	r3, #0
    ff34:	42b3      	cmp	r3, r6
    ff36:	d204      	bcs.n	ff42 <rx_flush+0x7a>
		if (buf[i] != dirty) {
    ff38:	5cea      	ldrb	r2, [r5, r3]
    ff3a:	2a00      	cmp	r2, #0
    ff3c:	d1f7      	bne.n	ff2e <rx_flush+0x66>
	for (int i = 0; i < flush_len; i++) {
    ff3e:	3301      	adds	r3, #1
    ff40:	e7f8      	b.n	ff34 <rx_flush+0x6c>
	return 0;
    ff42:	2000      	movs	r0, #0
    ff44:	e7e9      	b.n	ff1a <rx_flush+0x52>

0000ff46 <async_uart_release>:
{
    ff46:	b570      	push	{r4, r5, r6, lr}
    ff48:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    ff4a:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
    ff4c:	f04f 0320 	mov.w	r3, #32
    ff50:	f3ef 8611 	mrs	r6, BASEPRI
    ff54:	f383 8812 	msr	BASEPRI_MAX, r3
    ff58:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    ff5c:	68d0      	ldr	r0, [r2, #12]
    ff5e:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
    ff62:	ea23 0301 	bic.w	r3, r3, r1
    ff66:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    ff6a:	68d5      	ldr	r5, [r2, #12]
    ff6c:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    ff70:	b923      	cbnz	r3, ff7c <async_uart_release+0x36>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    ff72:	2902      	cmp	r1, #2
    ff74:	d007      	beq.n	ff86 <async_uart_release+0x40>
		uart_disable(dev);
    ff76:	4620      	mov	r0, r4
    ff78:	f7ff fcf6 	bl	f968 <uart_disable>
	__asm__ volatile(
    ff7c:	f386 8811 	msr	BASEPRI, r6
    ff80:	f3bf 8f6f 	isb	sy
}
    ff84:	bd70      	pop	{r4, r5, r6, pc}
				rx_flush(dev, data->async->rx_flush_buffer,
    ff86:	2205      	movs	r2, #5
    ff88:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    ff8c:	4620      	mov	r0, r4
    ff8e:	f7ff ff9b 	bl	fec8 <rx_flush>
			data->async->rx_flush_cnt =
    ff92:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
    ff96:	e7ee      	b.n	ff76 <async_uart_release+0x30>

0000ff98 <txstopped_isr>:
{
    ff98:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff9a:	b087      	sub	sp, #28
    ff9c:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    ff9e:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    ffa0:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
    ffa2:	681f      	ldr	r7, [r3, #0]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    ffa4:	685b      	ldr	r3, [r3, #4]
    ffa6:	f013 0f10 	tst.w	r3, #16
    ffaa:	d147      	bne.n	1003c <txstopped_isr+0xa4>
	if (!data->async->tx_buf) {
    ffac:	68e3      	ldr	r3, [r4, #12]
    ffae:	689b      	ldr	r3, [r3, #8]
    ffb0:	2b00      	cmp	r3, #0
    ffb2:	d041      	beq.n	10038 <txstopped_isr+0xa0>
	__asm__ volatile(
    ffb4:	f04f 0320 	mov.w	r3, #32
    ffb8:	f3ef 8211 	mrs	r2, BASEPRI
    ffbc:	f383 8812 	msr	BASEPRI_MAX, r3
    ffc0:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    ffc4:	68e3      	ldr	r3, [r4, #12]
    ffc6:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    ffca:	2900      	cmp	r1, #0
    ffcc:	db42      	blt.n	10054 <txstopped_isr+0xbc>
    ffce:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
	__asm__ volatile(
    ffd2:	f382 8811 	msr	BASEPRI, r2
    ffd6:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    ffda:	68e3      	ldr	r3, [r4, #12]
    ffdc:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
    ffe0:	2a00      	cmp	r2, #0
    ffe2:	d13a      	bne.n	1005a <txstopped_isr+0xc2>
	if (data->async->tx_buf != data->async->xfer_buf) {
    ffe4:	6899      	ldr	r1, [r3, #8]
    ffe6:	691a      	ldr	r2, [r3, #16]
    ffe8:	4291      	cmp	r1, r2
    ffea:	d004      	beq.n	fff6 <txstopped_isr+0x5e>
		if (amount == data->async->xfer_len) {
    ffec:	695a      	ldr	r2, [r3, #20]
    ffee:	42b2      	cmp	r2, r6
    fff0:	d044      	beq.n	1007c <txstopped_isr+0xe4>
			amount += data->async->tx_cache_offset;
    fff2:	6a1b      	ldr	r3, [r3, #32]
    fff4:	441e      	add	r6, r3
	k_timer_stop(&data->async->tx_timeout_timer);
    fff6:	68e0      	ldr	r0, [r4, #12]
    fff8:	3028      	adds	r0, #40	; 0x28
    fffa:	f000 fb57 	bl	106ac <z_impl_k_timer_stop>
	struct uart_event evt = {
    fffe:	2300      	movs	r3, #0
   10000:	9301      	str	r3, [sp, #4]
   10002:	9302      	str	r3, [sp, #8]
   10004:	9303      	str	r3, [sp, #12]
   10006:	9304      	str	r3, [sp, #16]
   10008:	9305      	str	r3, [sp, #20]
		.data.tx.buf = data->async->tx_buf,
   1000a:	68e3      	ldr	r3, [r4, #12]
   1000c:	689a      	ldr	r2, [r3, #8]
	struct uart_event evt = {
   1000e:	9202      	str	r2, [sp, #8]
   10010:	9603      	str	r6, [sp, #12]
	if (amount == data->async->tx_size) {
   10012:	68db      	ldr	r3, [r3, #12]
   10014:	42b3      	cmp	r3, r6
   10016:	d002      	beq.n	1001e <txstopped_isr+0x86>
		evt.type = UART_TX_ABORTED;
   10018:	2301      	movs	r3, #1
   1001a:	f88d 3004 	strb.w	r3, [sp, #4]
    p_reg->INTENCLR = mask;
   1001e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   10022:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   10026:	68e2      	ldr	r2, [r4, #12]
   10028:	2300      	movs	r3, #0
   1002a:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1002c:	68e2      	ldr	r2, [r4, #12]
   1002e:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   10030:	a901      	add	r1, sp, #4
   10032:	4628      	mov	r0, r5
   10034:	f7ff fcc0 	bl	f9b8 <user_callback>
}
   10038:	b007      	add	sp, #28
   1003a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1003c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   10040:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   10044:	2101      	movs	r1, #1
   10046:	f7ff ff7e 	bl	ff46 <async_uart_release>
		if (!data->async->tx_size) {
   1004a:	68e3      	ldr	r3, [r4, #12]
   1004c:	68db      	ldr	r3, [r3, #12]
   1004e:	2b00      	cmp	r3, #0
   10050:	d1ac      	bne.n	ffac <txstopped_isr+0x14>
   10052:	e7f1      	b.n	10038 <txstopped_isr+0xa0>
    return p_reg->TXD.AMOUNT;
   10054:	f8d7 654c 	ldr.w	r6, [r7, #1356]	; 0x54c
   10058:	e7bb      	b.n	ffd2 <txstopped_isr+0x3a>
	__asm__ volatile(
   1005a:	f04f 0320 	mov.w	r3, #32
   1005e:	f3ef 8611 	mrs	r6, BASEPRI
   10062:	f383 8812 	msr	BASEPRI_MAX, r3
   10066:	f3bf 8f6f 	isb	sy
		start_tx_locked(dev, data);
   1006a:	4621      	mov	r1, r4
   1006c:	4628      	mov	r0, r5
   1006e:	f7ff fc88 	bl	f982 <start_tx_locked>
	__asm__ volatile(
   10072:	f386 8811 	msr	BASEPRI, r6
   10076:	f3bf 8f6f 	isb	sy
		return;
   1007a:	e7dd      	b.n	10038 <txstopped_isr+0xa0>
			data->async->tx_cache_offset += amount;
   1007c:	6a1a      	ldr	r2, [r3, #32]
   1007e:	4432      	add	r2, r6
   10080:	621a      	str	r2, [r3, #32]
			if (setup_tx_cache(data)) {
   10082:	4620      	mov	r0, r4
   10084:	f7ff fe6d 	bl	fd62 <setup_tx_cache>
   10088:	b910      	cbnz	r0, 10090 <txstopped_isr+0xf8>
			amount = data->async->tx_cache_offset;
   1008a:	68e3      	ldr	r3, [r4, #12]
   1008c:	6a1e      	ldr	r6, [r3, #32]
   1008e:	e7b2      	b.n	fff6 <txstopped_isr+0x5e>
	__asm__ volatile(
   10090:	f04f 0320 	mov.w	r3, #32
   10094:	f3ef 8611 	mrs	r6, BASEPRI
   10098:	f383 8812 	msr	BASEPRI_MAX, r3
   1009c:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   100a0:	4621      	mov	r1, r4
   100a2:	4628      	mov	r0, r5
   100a4:	f7ff fc6d 	bl	f982 <start_tx_locked>
	__asm__ volatile(
   100a8:	f386 8811 	msr	BASEPRI, r6
   100ac:	f3bf 8f6f 	isb	sy
				return;
   100b0:	e7c2      	b.n	10038 <txstopped_isr+0xa0>

000100b2 <rxto_isr>:
{
   100b2:	b570      	push	{r4, r5, r6, lr}
   100b4:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   100b6:	6846      	ldr	r6, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   100b8:	6905      	ldr	r5, [r0, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   100ba:	68e9      	ldr	r1, [r5, #12]
   100bc:	3160      	adds	r1, #96	; 0x60
   100be:	f7ff fc9b 	bl	f9f8 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   100c2:	68e9      	ldr	r1, [r5, #12]
   100c4:	316c      	adds	r1, #108	; 0x6c
   100c6:	4620      	mov	r0, r4
   100c8:	f7ff fc96 	bl	f9f8 <rx_buf_release>
	if (data->async->rx_enabled) {
   100cc:	68eb      	ldr	r3, [r5, #12]
   100ce:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
   100d2:	b152      	cbz	r2, 100ea <rxto_isr+0x38>
		data->async->rx_enabled = false;
   100d4:	2200      	movs	r2, #0
   100d6:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   100da:	6873      	ldr	r3, [r6, #4]
   100dc:	f013 0f10 	tst.w	r3, #16
   100e0:	d109      	bne.n	100f6 <rxto_isr+0x44>
	notify_rx_disable(dev);
   100e2:	4620      	mov	r0, r4
   100e4:	f7ff fc9f 	bl	fa26 <notify_rx_disable>
}
   100e8:	bd70      	pop	{r4, r5, r6, pc}
		(void)rx_flush(dev, NULL, 0);
   100ea:	2200      	movs	r2, #0
   100ec:	4611      	mov	r1, r2
   100ee:	4620      	mov	r0, r4
   100f0:	f7ff feea 	bl	fec8 <rx_flush>
   100f4:	e7f1      	b.n	100da <rxto_isr+0x28>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   100f6:	2102      	movs	r1, #2
   100f8:	4620      	mov	r0, r4
   100fa:	f7ff ff24 	bl	ff46 <async_uart_release>
   100fe:	e7f0      	b.n	100e2 <rxto_isr+0x30>

00010100 <uarte_nrfx_isr_async>:
{
   10100:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   10102:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   10104:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   10106:	6902      	ldr	r2, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10108:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
	if (!HW_RX_COUNTING_ENABLED(data)
   1010c:	bb5b      	cbnz	r3, 10166 <uarte_nrfx_isr_async+0x66>
   1010e:	4605      	mov	r5, r0
   10110:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   10114:	bb9b      	cbnz	r3, 1017e <uarte_nrfx_isr_async+0x7e>
   10116:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1011a:	b123      	cbz	r3, 10126 <uarte_nrfx_isr_async+0x26>
    return p_reg->INTENSET & mask;
   1011c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   10120:	f013 0f10 	tst.w	r3, #16
   10124:	d133      	bne.n	1018e <uarte_nrfx_isr_async+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10126:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1012a:	b113      	cbz	r3, 10132 <uarte_nrfx_isr_async+0x32>
   1012c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   10130:	b3b3      	cbz	r3, 101a0 <uarte_nrfx_isr_async+0xa0>
   10132:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   10136:	b113      	cbz	r3, 1013e <uarte_nrfx_isr_async+0x3e>
   10138:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1013c:	b3c3      	cbz	r3, 101b0 <uarte_nrfx_isr_async+0xb0>
   1013e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   10142:	b123      	cbz	r3, 1014e <uarte_nrfx_isr_async+0x4e>
    return p_reg->INTENSET & mask;
   10144:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   10148:	f413 7f80 	tst.w	r3, #256	; 0x100
   1014c:	d138      	bne.n	101c0 <uarte_nrfx_isr_async+0xc0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1014e:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   10152:	b19b      	cbz	r3, 1017c <uarte_nrfx_isr_async+0x7c>
    return p_reg->INTENSET & mask;
   10154:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   10158:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   1015c:	d00e      	beq.n	1017c <uarte_nrfx_isr_async+0x7c>
		txstopped_isr(dev);
   1015e:	4628      	mov	r0, r5
   10160:	f7ff ff1a 	bl	ff98 <txstopped_isr>
   10164:	e00a      	b.n	1017c <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10166:	2300      	movs	r3, #0
   10168:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1016c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   10170:	68d2      	ldr	r2, [r2, #12]
   10172:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
   10176:	3301      	adds	r3, #1
   10178:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
   1017c:	bd38      	pop	{r3, r4, r5, pc}
   1017e:	2300      	movs	r3, #0
   10180:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10184:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
		error_isr(dev);
   10188:	f7ff fcf5 	bl	fb76 <error_isr>
   1018c:	e7c3      	b.n	10116 <uarte_nrfx_isr_async+0x16>
   1018e:	2300      	movs	r3, #0
   10190:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   10194:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		endrx_isr(dev);
   10198:	4628      	mov	r0, r5
   1019a:	f7ff fd85 	bl	fca8 <endrx_isr>
   1019e:	e7c2      	b.n	10126 <uarte_nrfx_isr_async+0x26>
   101a0:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   101a4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		rxstarted_isr(dev);
   101a8:	4628      	mov	r0, r5
   101aa:	f7f7 fc9d 	bl	7ae8 <rxstarted_isr>
   101ae:	e7c0      	b.n	10132 <uarte_nrfx_isr_async+0x32>
   101b0:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   101b4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		rxto_isr(dev);
   101b8:	4628      	mov	r0, r5
   101ba:	f7ff ff7a 	bl	100b2 <rxto_isr>
   101be:	e7be      	b.n	1013e <uarte_nrfx_isr_async+0x3e>
		endtx_isr(dev);
   101c0:	4628      	mov	r0, r5
   101c2:	f7ff fb14 	bl	f7ee <endtx_isr>
   101c6:	e7c2      	b.n	1014e <uarte_nrfx_isr_async+0x4e>

000101c8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   101c8:	4770      	bx	lr

000101ca <counter_sub>:
	return (a - b) & COUNTER_MAX;
   101ca:	1a40      	subs	r0, r0, r1
}
   101cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   101d0:	4770      	bx	lr

000101d2 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   101d2:	f100 0350 	add.w	r3, r0, #80	; 0x50
   101d6:	009b      	lsls	r3, r3, #2
   101d8:	b29b      	uxth	r3, r3
   101da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   101de:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   101e2:	2200      	movs	r2, #0
   101e4:	601a      	str	r2, [r3, #0]
   101e6:	681b      	ldr	r3, [r3, #0]
}
   101e8:	4770      	bx	lr

000101ea <absolute_time_to_cc>:
}
   101ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   101ee:	4770      	bx	lr

000101f0 <full_int_lock>:
	__asm__ volatile(
   101f0:	f04f 0320 	mov.w	r3, #32
   101f4:	f3ef 8011 	mrs	r0, BASEPRI
   101f8:	f383 8812 	msr	BASEPRI_MAX, r3
   101fc:	f3bf 8f6f 	isb	sy
}
   10200:	4770      	bx	lr

00010202 <full_int_unlock>:
	__asm__ volatile(
   10202:	f380 8811 	msr	BASEPRI, r0
   10206:	f3bf 8f6f 	isb	sy
}
   1020a:	4770      	bx	lr

0001020c <set_absolute_alarm>:
{
   1020c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1020e:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   10210:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   10214:	f7f7 fd24 	bl	7c60 <get_comparator>
   10218:	4607      	mov	r7, r0
   1021a:	e019      	b.n	10250 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   1021c:	2013      	movs	r0, #19
   1021e:	f000 fa33 	bl	10688 <z_impl_k_busy_wait>
}
   10222:	e022      	b.n	1026a <set_absolute_alarm+0x5e>
		event_clear(chan);
   10224:	4630      	mov	r0, r6
   10226:	f7ff ffd4 	bl	101d2 <event_clear>
		event_enable(chan);
   1022a:	4630      	mov	r0, r6
   1022c:	f7f7 fd20 	bl	7c70 <event_enable>
		set_comparator(chan, cc_val);
   10230:	4629      	mov	r1, r5
   10232:	4630      	mov	r0, r6
   10234:	f7f7 fd0a 	bl	7c4c <set_comparator>
		now2 = counter();
   10238:	f7f7 fd2e 	bl	7c98 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1023c:	4284      	cmp	r4, r0
   1023e:	d01e      	beq.n	1027e <set_absolute_alarm+0x72>
   10240:	1c81      	adds	r1, r0, #2
   10242:	4628      	mov	r0, r5
   10244:	f7ff ffc1 	bl	101ca <counter_sub>
	} while ((now2 != now) &&
   10248:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1024c:	d917      	bls.n	1027e <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   1024e:	462f      	mov	r7, r5
		now = counter();
   10250:	f7f7 fd22 	bl	7c98 <counter>
   10254:	4604      	mov	r4, r0
		set_comparator(chan, now);
   10256:	4601      	mov	r1, r0
   10258:	4630      	mov	r0, r6
   1025a:	f7f7 fcf7 	bl	7c4c <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   1025e:	4621      	mov	r1, r4
   10260:	4638      	mov	r0, r7
   10262:	f7ff ffb2 	bl	101ca <counter_sub>
   10266:	2801      	cmp	r0, #1
   10268:	d0d8      	beq.n	1021c <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1026a:	1ca7      	adds	r7, r4, #2
   1026c:	4639      	mov	r1, r7
   1026e:	4628      	mov	r0, r5
   10270:	f7ff ffab 	bl	101ca <counter_sub>
   10274:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   10278:	d9d4      	bls.n	10224 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   1027a:	463d      	mov	r5, r7
   1027c:	e7d2      	b.n	10224 <set_absolute_alarm+0x18>
}
   1027e:	4628      	mov	r0, r5
   10280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010282 <compare_set>:
{
   10282:	b5f0      	push	{r4, r5, r6, r7, lr}
   10284:	b083      	sub	sp, #12
   10286:	4604      	mov	r4, r0
   10288:	4617      	mov	r7, r2
   1028a:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   1028c:	f7f7 fd0a 	bl	7ca4 <compare_int_lock>
   10290:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   10292:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10294:	9301      	str	r3, [sp, #4]
   10296:	9b08      	ldr	r3, [sp, #32]
   10298:	9300      	str	r3, [sp, #0]
   1029a:	463a      	mov	r2, r7
   1029c:	462b      	mov	r3, r5
   1029e:	4620      	mov	r0, r4
   102a0:	f7f7 fdf0 	bl	7e84 <compare_set_nolocks>
   102a4:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   102a6:	4631      	mov	r1, r6
   102a8:	4620      	mov	r0, r4
   102aa:	f7f7 fd5f 	bl	7d6c <compare_int_unlock>
}
   102ae:	4628      	mov	r0, r5
   102b0:	b003      	add	sp, #12
   102b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000102b4 <sys_clock_cycle_get_32>:
{
   102b4:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   102b6:	f7f7 fdc5 	bl	7e44 <z_nrf_rtc_timer_read>
}
   102ba:	bd08      	pop	{r3, pc}

000102bc <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   102bc:	b410      	push	{r4}
	*state = &config->states[0];
   102be:	6843      	ldr	r3, [r0, #4]
   102c0:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   102c2:	e001      	b.n	102c8 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   102c4:	3408      	adds	r4, #8
   102c6:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   102c8:	6814      	ldr	r4, [r2, #0]
   102ca:	7a03      	ldrb	r3, [r0, #8]
   102cc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   102d0:	3b01      	subs	r3, #1
   102d2:	f8d0 c004 	ldr.w	ip, [r0, #4]
   102d6:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   102da:	429c      	cmp	r4, r3
   102dc:	d804      	bhi.n	102e8 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
   102de:	7963      	ldrb	r3, [r4, #5]
   102e0:	428b      	cmp	r3, r1
   102e2:	d1ef      	bne.n	102c4 <pinctrl_lookup_state+0x8>
			return 0;
   102e4:	2000      	movs	r0, #0
   102e6:	e001      	b.n	102ec <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
   102e8:	f06f 0001 	mvn.w	r0, #1
}
   102ec:	bc10      	pop	{r4}
   102ee:	4770      	bx	lr

000102f0 <z_log_msg2_runtime_create>:
{
   102f0:	b510      	push	{r4, lr}
   102f2:	b086      	sub	sp, #24
	va_start(ap, fmt);
   102f4:	ac0b      	add	r4, sp, #44	; 0x2c
   102f6:	9405      	str	r4, [sp, #20]
   102f8:	9403      	str	r4, [sp, #12]
   102fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   102fc:	9402      	str	r4, [sp, #8]
   102fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
   10300:	9401      	str	r4, [sp, #4]
   10302:	9c08      	ldr	r4, [sp, #32]
   10304:	9400      	str	r4, [sp, #0]
   10306:	f7f5 f90d 	bl	5524 <z_impl_z_log_msg2_runtime_vcreate>
}
   1030a:	b006      	add	sp, #24
   1030c:	bd10      	pop	{r4, pc}

0001030e <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   1030e:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   10310:	f7fe fbc2 	bl	ea98 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
   10314:	bd08      	pop	{r3, pc}

00010316 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   10316:	b510      	push	{r4, lr}
   10318:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1031a:	f7f5 fc37 	bl	5b8c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1031e:	f7f5 fcf7 	bl	5d10 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   10322:	4620      	mov	r0, r4
   10324:	f7ff fff3 	bl	1030e <hw_cc3xx_init_internal>
	return res;
}
   10328:	bd10      	pop	{r4, pc}

0001032a <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1032a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1032e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   10332:	2b08      	cmp	r3, #8
   10334:	d001      	beq.n	1033a <nrf52_errata_36+0x10>
        return false;
   10336:	2000      	movs	r0, #0
   10338:	4770      	bx	lr
                        return true;
   1033a:	2001      	movs	r0, #1
}
   1033c:	4770      	bx	lr

0001033e <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1033e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10342:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   10346:	2b08      	cmp	r3, #8
   10348:	d001      	beq.n	1034e <nrf52_errata_66+0x10>
        return false;
   1034a:	2000      	movs	r0, #0
   1034c:	4770      	bx	lr
                        return true;
   1034e:	2001      	movs	r0, #1
}
   10350:	4770      	bx	lr

00010352 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   10352:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10356:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1035a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   1035e:	2a08      	cmp	r2, #8
   10360:	d001      	beq.n	10366 <nrf52_errata_98+0x14>
        return false;
   10362:	2000      	movs	r0, #0
   10364:	4770      	bx	lr
                switch(var2)
   10366:	2b00      	cmp	r3, #0
   10368:	d804      	bhi.n	10374 <nrf52_errata_98+0x22>
   1036a:	e8df f003 	tbb	[pc, r3]
   1036e:	01          	.byte	0x01
   1036f:	00          	.byte	0x00
   10370:	2001      	movs	r0, #1
   10372:	4770      	bx	lr
                        return false;
   10374:	2000      	movs	r0, #0
}
   10376:	4770      	bx	lr

00010378 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   10378:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1037c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   10380:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   10384:	2a08      	cmp	r2, #8
   10386:	d001      	beq.n	1038c <nrf52_errata_103+0x14>
        return false;
   10388:	2000      	movs	r0, #0
   1038a:	4770      	bx	lr
                switch(var2)
   1038c:	2b00      	cmp	r3, #0
   1038e:	d804      	bhi.n	1039a <nrf52_errata_103+0x22>
   10390:	e8df f003 	tbb	[pc, r3]
   10394:	01          	.byte	0x01
   10395:	00          	.byte	0x00
   10396:	2001      	movs	r0, #1
   10398:	4770      	bx	lr
                        return false;
   1039a:	2000      	movs	r0, #0
}
   1039c:	4770      	bx	lr

0001039e <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1039e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   103a2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   103a6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   103aa:	2a08      	cmp	r2, #8
   103ac:	d001      	beq.n	103b2 <nrf52_errata_115+0x14>
        return false;
   103ae:	2000      	movs	r0, #0
   103b0:	4770      	bx	lr
                switch(var2)
   103b2:	2b00      	cmp	r3, #0
   103b4:	d804      	bhi.n	103c0 <nrf52_errata_115+0x22>
   103b6:	e8df f003 	tbb	[pc, r3]
   103ba:	01          	.byte	0x01
   103bb:	00          	.byte	0x00
   103bc:	2001      	movs	r0, #1
   103be:	4770      	bx	lr
                        return false;
   103c0:	2000      	movs	r0, #0
}
   103c2:	4770      	bx	lr

000103c4 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   103c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   103c8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   103cc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   103d0:	2a08      	cmp	r2, #8
   103d2:	d001      	beq.n	103d8 <nrf52_errata_120+0x14>
        return false;
   103d4:	2000      	movs	r0, #0
   103d6:	4770      	bx	lr
                switch(var2)
   103d8:	2b00      	cmp	r3, #0
   103da:	d804      	bhi.n	103e6 <nrf52_errata_120+0x22>
   103dc:	e8df f003 	tbb	[pc, r3]
   103e0:	01          	.byte	0x01
   103e1:	00          	.byte	0x00
   103e2:	2001      	movs	r0, #1
   103e4:	4770      	bx	lr
                        return false;
   103e6:	2000      	movs	r0, #0
}
   103e8:	4770      	bx	lr

000103ea <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   103ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   103ee:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   103f2:	2b08      	cmp	r3, #8
   103f4:	d001      	beq.n	103fa <nrf52_errata_136+0x10>
        return false;
   103f6:	2000      	movs	r0, #0
   103f8:	4770      	bx	lr
                        return true;
   103fa:	2001      	movs	r0, #1
}
   103fc:	4770      	bx	lr

000103fe <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   103fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10402:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   10406:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1040a:	2a08      	cmp	r2, #8
   1040c:	d001      	beq.n	10412 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1040e:	2000      	movs	r0, #0
   10410:	4770      	bx	lr
                switch(var2)
   10412:	2b04      	cmp	r3, #4
   10414:	d801      	bhi.n	1041a <nrf52_configuration_249+0x1c>
   10416:	2000      	movs	r0, #0
   10418:	4770      	bx	lr
                        return true;
   1041a:	2001      	movs	r0, #1
    #endif
}
   1041c:	4770      	bx	lr

0001041e <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   1041e:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   10420:	4780      	blx	r0
}
   10422:	bd08      	pop	{r3, pc}

00010424 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   10424:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   10426:	f000 f92f 	bl	10688 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   1042a:	bd08      	pop	{r3, pc}

0001042c <clock_initial_lfclksrc_get>:
}
   1042c:	2000      	movs	r0, #0
   1042e:	4770      	bx	lr

00010430 <clock_lfclksrc_tweak>:
{
   10430:	b538      	push	{r3, r4, r5, lr}
   10432:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
   10434:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   10436:	2b01      	cmp	r3, #1
   10438:	d002      	beq.n	10440 <clock_lfclksrc_tweak+0x10>
   1043a:	b933      	cbnz	r3, 1044a <clock_lfclksrc_tweak+0x1a>
   1043c:	2301      	movs	r3, #1
   1043e:	e000      	b.n	10442 <clock_lfclksrc_tweak+0x12>
   10440:	2301      	movs	r3, #1
    if (!is_correct_clk)
   10442:	461d      	mov	r5, r3
   10444:	b11b      	cbz	r3, 1044e <clock_lfclksrc_tweak+0x1e>
}
   10446:	4628      	mov	r0, r5
   10448:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1044a:	2300      	movs	r3, #0
   1044c:	e7f9      	b.n	10442 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1044e:	2000      	movs	r0, #0
   10450:	f7f8 fc82 	bl	8d58 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   10454:	f7ff ffea 	bl	1042c <clock_initial_lfclksrc_get>
   10458:	6020      	str	r0, [r4, #0]
   1045a:	e7f4      	b.n	10446 <clock_lfclksrc_tweak+0x16>

0001045c <pin_is_task_output>:
{
   1045c:	b510      	push	{r4, lr}
   1045e:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   10460:	f7f8 fe4c 	bl	90fc <pin_is_output>
   10464:	b128      	cbz	r0, 10472 <pin_is_task_output+0x16>
   10466:	4620      	mov	r0, r4
   10468:	f7f8 fe32 	bl	90d0 <pin_in_use_by_te>
   1046c:	b118      	cbz	r0, 10476 <pin_is_task_output+0x1a>
   1046e:	2001      	movs	r0, #1
   10470:	e000      	b.n	10474 <pin_is_task_output+0x18>
   10472:	2000      	movs	r0, #0
}
   10474:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   10476:	2000      	movs	r0, #0
   10478:	e7fc      	b.n	10474 <pin_is_task_output+0x18>

0001047a <pin_is_input>:
{
   1047a:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   1047c:	f7f8 fe3e 	bl	90fc <pin_is_output>
   10480:	f080 0001 	eor.w	r0, r0, #1
}
   10484:	b2c0      	uxtb	r0, r0
   10486:	bd08      	pop	{r3, pc}

00010488 <gpiote_polarity_to_trigger>:
}
   10488:	4770      	bx	lr

0001048a <gpiote_trigger_to_polarity>:
}
   1048a:	4770      	bx	lr

0001048c <is_level>:
}
   1048c:	2803      	cmp	r0, #3
   1048e:	bf94      	ite	ls
   10490:	2000      	movls	r0, #0
   10492:	2001      	movhi	r0, #1
   10494:	4770      	bx	lr

00010496 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   10496:	b508      	push	{r3, lr}
  _DoInit();
   10498:	f7f9 fdfa 	bl	a090 <_DoInit>
}
   1049c:	bd08      	pop	{r3, pc}

0001049e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1049e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   104a0:	f7ff fff9 	bl	10496 <SEGGER_RTT_Init>

	return 0;
}
   104a4:	2000      	movs	r0, #0
   104a6:	bd08      	pop	{r3, pc}

000104a8 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   104a8:	b148      	cbz	r0, 104be <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   104aa:	68c3      	ldr	r3, [r0, #12]
   104ac:	8818      	ldrh	r0, [r3, #0]
   104ae:	f3c0 0008 	ubfx	r0, r0, #0, #9
   104b2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   104b6:	bf14      	ite	ne
   104b8:	2000      	movne	r0, #0
   104ba:	2001      	moveq	r0, #1
   104bc:	4770      	bx	lr
		return false;
   104be:	2000      	movs	r0, #0
}
   104c0:	4770      	bx	lr

000104c2 <z_log_msg2_runtime_create>:
{
   104c2:	b510      	push	{r4, lr}
   104c4:	b086      	sub	sp, #24
	va_start(ap, fmt);
   104c6:	ac0b      	add	r4, sp, #44	; 0x2c
   104c8:	9405      	str	r4, [sp, #20]
   104ca:	9403      	str	r4, [sp, #12]
   104cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   104ce:	9402      	str	r4, [sp, #8]
   104d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   104d2:	9401      	str	r4, [sp, #4]
   104d4:	9c08      	ldr	r4, [sp, #32]
   104d6:	9400      	str	r4, [sp, #0]
   104d8:	f7f5 f824 	bl	5524 <z_impl_z_log_msg2_runtime_vcreate>
}
   104dc:	b006      	add	sp, #24
   104de:	bd10      	pop	{r4, pc}

000104e0 <z_early_memset>:
{
   104e0:	b508      	push	{r3, lr}
   104e2:	f000 f96c 	bl	107be <memset>
}
   104e6:	bd08      	pop	{r3, pc}

000104e8 <z_early_memcpy>:
{
   104e8:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   104ea:	f000 f95a 	bl	107a2 <memcpy>
}
   104ee:	bd08      	pop	{r3, pc}

000104f0 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   104f0:	6902      	ldr	r2, [r0, #16]
   104f2:	6943      	ldr	r3, [r0, #20]
   104f4:	431a      	orrs	r2, r3
   104f6:	f012 0203 	ands.w	r2, r2, #3
   104fa:	d10d      	bne.n	10518 <create_free_list+0x28>
	slab->free_list = NULL;
   104fc:	2100      	movs	r1, #0
   104fe:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   10500:	e005      	b.n	1050e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   10502:	6981      	ldr	r1, [r0, #24]
   10504:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   10506:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   10508:	6901      	ldr	r1, [r0, #16]
   1050a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1050c:	3201      	adds	r2, #1
   1050e:	68c1      	ldr	r1, [r0, #12]
   10510:	4291      	cmp	r1, r2
   10512:	d8f6      	bhi.n	10502 <create_free_list+0x12>
	return 0;
   10514:	2000      	movs	r0, #0
   10516:	4770      	bx	lr
		return -EINVAL;
   10518:	f06f 0015 	mvn.w	r0, #21
}
   1051c:	4770      	bx	lr

0001051e <k_mem_slab_init>:
{
   1051e:	b510      	push	{r4, lr}
   10520:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   10522:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
   10524:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
   10526:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   10528:	2300      	movs	r3, #0
   1052a:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   1052c:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
   1052e:	f7ff ffdf 	bl	104f0 <create_free_list>
	if (rc < 0) {
   10532:	2800      	cmp	r0, #0
   10534:	db01      	blt.n	1053a <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
   10536:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   10538:	6064      	str	r4, [r4, #4]
}
   1053a:	bd10      	pop	{r4, pc}

0001053c <setup_thread_stack>:
{
   1053c:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1053e:	3207      	adds	r2, #7
   10540:	f022 0207 	bic.w	r2, r2, #7
   10544:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   10548:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   1054c:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   10550:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   10554:	2200      	movs	r2, #0
   10556:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
   1055a:	18c8      	adds	r0, r1, r3
   1055c:	bc10      	pop	{r4}
   1055e:	4770      	bx	lr

00010560 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   10560:	f3ef 8005 	mrs	r0, IPSR
}
   10564:	3800      	subs	r0, #0
   10566:	bf18      	it	ne
   10568:	2001      	movne	r0, #1
   1056a:	4770      	bx	lr

0001056c <k_thread_name_get>:
}
   1056c:	3074      	adds	r0, #116	; 0x74
   1056e:	4770      	bx	lr

00010570 <z_impl_k_thread_start>:
{
   10570:	b508      	push	{r3, lr}
	z_sched_start(thread);
   10572:	f7fb fa65 	bl	ba40 <z_sched_start>
}
   10576:	bd08      	pop	{r3, pc}

00010578 <z_init_thread_base>:
{
   10578:	b410      	push	{r4}
	thread_base->pended_on = NULL;
   1057a:	2400      	movs	r4, #0
   1057c:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   1057e:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   10580:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   10582:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   10584:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   10586:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   10588:	61c4      	str	r4, [r0, #28]
}
   1058a:	bc10      	pop	{r4}
   1058c:	4770      	bx	lr

0001058e <z_pm_save_idle_exit>:
{
   1058e:	b508      	push	{r3, lr}
	pm_system_resume();
   10590:	f7f5 f906 	bl	57a0 <pm_system_resume>
	sys_clock_idle_exit();
   10594:	f7ff fe18 	bl	101c8 <sys_clock_idle_exit>
}
   10598:	bd08      	pop	{r3, pc}

0001059a <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   1059a:	4288      	cmp	r0, r1
   1059c:	da00      	bge.n	105a0 <new_prio_for_inheritance+0x6>
   1059e:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   105a0:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   105a4:	db01      	blt.n	105aa <new_prio_for_inheritance+0x10>
   105a6:	4608      	mov	r0, r1
   105a8:	4770      	bx	lr
   105aa:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   105ae:	4770      	bx	lr

000105b0 <adjust_owner_prio>:
{
   105b0:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   105b2:	6880      	ldr	r0, [r0, #8]
   105b4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   105b8:	428b      	cmp	r3, r1
   105ba:	d101      	bne.n	105c0 <adjust_owner_prio+0x10>
	return false;
   105bc:	2000      	movs	r0, #0
}
   105be:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   105c0:	f7fb fbf4 	bl	bdac <z_set_prio>
   105c4:	e7fb      	b.n	105be <adjust_owner_prio+0xe>

000105c6 <z_impl_k_mutex_init>:
{
   105c6:	4603      	mov	r3, r0
	mutex->owner = NULL;
   105c8:	2000      	movs	r0, #0
   105ca:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   105cc:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   105ce:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   105d0:	605b      	str	r3, [r3, #4]
}
   105d2:	4770      	bx	lr

000105d4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   105d4:	b13a      	cbz	r2, 105e6 <z_impl_k_sem_init+0x12>
   105d6:	428a      	cmp	r2, r1
   105d8:	d308      	bcc.n	105ec <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   105da:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   105dc:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   105de:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   105e0:	6040      	str	r0, [r0, #4]
	return 0;
   105e2:	2000      	movs	r0, #0
   105e4:	4770      	bx	lr
		return -EINVAL;
   105e6:	f06f 0015 	mvn.w	r0, #21
   105ea:	4770      	bx	lr
   105ec:	f06f 0015 	mvn.w	r0, #21
}
   105f0:	4770      	bx	lr

000105f2 <thread_active_elsewhere>:
}
   105f2:	2000      	movs	r0, #0
   105f4:	4770      	bx	lr

000105f6 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   105f6:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   105fa:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   105fe:	4283      	cmp	r3, r0
   10600:	d001      	beq.n	10606 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   10602:	1ac0      	subs	r0, r0, r3
   10604:	4770      	bx	lr
	return 0;
   10606:	2000      	movs	r0, #0
}
   10608:	4770      	bx	lr

0001060a <z_reschedule_irqlock>:
{
   1060a:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1060c:	4603      	mov	r3, r0
   1060e:	b920      	cbnz	r0, 1061a <z_reschedule_irqlock+0x10>
   10610:	f3ef 8205 	mrs	r2, IPSR
   10614:	b942      	cbnz	r2, 10628 <z_reschedule_irqlock+0x1e>
   10616:	2201      	movs	r2, #1
   10618:	e000      	b.n	1061c <z_reschedule_irqlock+0x12>
   1061a:	2200      	movs	r2, #0
	if (resched(key)) {
   1061c:	b932      	cbnz	r2, 1062c <z_reschedule_irqlock+0x22>
   1061e:	f383 8811 	msr	BASEPRI, r3
   10622:	f3bf 8f6f 	isb	sy
}
   10626:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   10628:	2200      	movs	r2, #0
   1062a:	e7f7      	b.n	1061c <z_reschedule_irqlock+0x12>
   1062c:	4618      	mov	r0, r3
   1062e:	f7f5 fc5d 	bl	5eec <arch_swap>
	return ret;
   10632:	e7f8      	b.n	10626 <z_reschedule_irqlock+0x1c>

00010634 <z_priq_dumb_best>:
{
   10634:	4603      	mov	r3, r0
	return list->head == list;
   10636:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10638:	4283      	cmp	r3, r0
   1063a:	d000      	beq.n	1063e <z_priq_dumb_best+0xa>
}
   1063c:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1063e:	2000      	movs	r0, #0
	return thread;
   10640:	e7fc      	b.n	1063c <z_priq_dumb_best+0x8>

00010642 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   10642:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   10644:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   10646:	6083      	str	r3, [r0, #8]
}
   10648:	4770      	bx	lr

0001064a <remove_timeout>:
{
   1064a:	b510      	push	{r4, lr}
   1064c:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   1064e:	f7fc f90d 	bl	c86c <next>
   10652:	b148      	cbz	r0, 10668 <remove_timeout+0x1e>
   10654:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   10656:	6920      	ldr	r0, [r4, #16]
   10658:	6961      	ldr	r1, [r4, #20]
   1065a:	6913      	ldr	r3, [r2, #16]
   1065c:	181b      	adds	r3, r3, r0
   1065e:	6950      	ldr	r0, [r2, #20]
   10660:	eb41 0100 	adc.w	r1, r1, r0
   10664:	6113      	str	r3, [r2, #16]
   10666:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   10668:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   1066a:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   1066c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1066e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10670:	2300      	movs	r3, #0
   10672:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   10674:	6063      	str	r3, [r4, #4]
}
   10676:	bd10      	pop	{r4, pc}

00010678 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   10678:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1067a:	f7fc fbf3 	bl	ce64 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1067e:	bd08      	pop	{r3, pc}

00010680 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   10680:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   10682:	f7fc fbef 	bl	ce64 <sys_clock_tick_get>
}
   10686:	bd08      	pop	{r3, pc}

00010688 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   10688:	b900      	cbnz	r0, 1068c <z_impl_k_busy_wait+0x4>
   1068a:	4770      	bx	lr
{
   1068c:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1068e:	f7f6 fbc1 	bl	6e14 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   10692:	bd08      	pop	{r3, pc}

00010694 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   10694:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   10696:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   10698:	2300      	movs	r3, #0
   1069a:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
   1069c:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   106a0:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   106a2:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   106a4:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   106a6:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   106a8:	6343      	str	r3, [r0, #52]	; 0x34
}
   106aa:	4770      	bx	lr

000106ac <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   106ac:	b510      	push	{r4, lr}
   106ae:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   106b0:	f7fc f9fe 	bl	cab0 <z_abort_timeout>

	if (inactive) {
   106b4:	b9a0      	cbnz	r0, 106e0 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   106b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   106b8:	b10b      	cbz	r3, 106be <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   106ba:	4620      	mov	r0, r4
   106bc:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   106be:	f104 0018 	add.w	r0, r4, #24
   106c2:	f7fb fd7f 	bl	c1c4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   106c6:	b158      	cbz	r0, 106e0 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   106c8:	f7fb f964 	bl	b994 <z_ready_thread>
	__asm__ volatile(
   106cc:	f04f 0320 	mov.w	r3, #32
   106d0:	f3ef 8011 	mrs	r0, BASEPRI
   106d4:	f383 8812 	msr	BASEPRI_MAX, r3
   106d8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   106dc:	f7ff ff95 	bl	1060a <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   106e0:	bd10      	pop	{r4, pc}

000106e2 <k_heap_init>:
{
   106e2:	b510      	push	{r4, lr}
   106e4:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   106e8:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   106ea:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   106ec:	f7f3 fdce 	bl	428c <sys_heap_init>
}
   106f0:	bd10      	pop	{r4, pc}

000106f2 <fabs>:
   106f2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   106f6:	4770      	bx	lr

000106f8 <finite>:
   106f8:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
   106fc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   10700:	0fc0      	lsrs	r0, r0, #31
   10702:	4770      	bx	lr

00010704 <__sfmoreglue>:
   10704:	b570      	push	{r4, r5, r6, lr}
   10706:	2268      	movs	r2, #104	; 0x68
   10708:	1e4d      	subs	r5, r1, #1
   1070a:	4355      	muls	r5, r2
   1070c:	460e      	mov	r6, r1
   1070e:	f105 0174 	add.w	r1, r5, #116	; 0x74
   10712:	f7fd f9d1 	bl	dab8 <_malloc_r>
   10716:	4604      	mov	r4, r0
   10718:	b140      	cbz	r0, 1072c <__sfmoreglue+0x28>
   1071a:	2100      	movs	r1, #0
   1071c:	e9c0 1600 	strd	r1, r6, [r0]
   10720:	300c      	adds	r0, #12
   10722:	60a0      	str	r0, [r4, #8]
   10724:	f105 0268 	add.w	r2, r5, #104	; 0x68
   10728:	f000 f849 	bl	107be <memset>
   1072c:	4620      	mov	r0, r4
   1072e:	bd70      	pop	{r4, r5, r6, pc}

00010730 <_fwalk_reent>:
   10730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10734:	4606      	mov	r6, r0
   10736:	4688      	mov	r8, r1
   10738:	f100 0448 	add.w	r4, r0, #72	; 0x48
   1073c:	2700      	movs	r7, #0
   1073e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   10742:	f1b9 0901 	subs.w	r9, r9, #1
   10746:	d505      	bpl.n	10754 <_fwalk_reent+0x24>
   10748:	6824      	ldr	r4, [r4, #0]
   1074a:	2c00      	cmp	r4, #0
   1074c:	d1f7      	bne.n	1073e <_fwalk_reent+0xe>
   1074e:	4638      	mov	r0, r7
   10750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10754:	89ab      	ldrh	r3, [r5, #12]
   10756:	2b01      	cmp	r3, #1
   10758:	d907      	bls.n	1076a <_fwalk_reent+0x3a>
   1075a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   1075e:	3301      	adds	r3, #1
   10760:	d003      	beq.n	1076a <_fwalk_reent+0x3a>
   10762:	4629      	mov	r1, r5
   10764:	4630      	mov	r0, r6
   10766:	47c0      	blx	r8
   10768:	4307      	orrs	r7, r0
   1076a:	3568      	adds	r5, #104	; 0x68
   1076c:	e7e9      	b.n	10742 <_fwalk_reent+0x12>

0001076e <__itoa>:
   1076e:	1e93      	subs	r3, r2, #2
   10770:	2b22      	cmp	r3, #34	; 0x22
   10772:	b510      	push	{r4, lr}
   10774:	460c      	mov	r4, r1
   10776:	d904      	bls.n	10782 <__itoa+0x14>
   10778:	2300      	movs	r3, #0
   1077a:	700b      	strb	r3, [r1, #0]
   1077c:	461c      	mov	r4, r3
   1077e:	4620      	mov	r0, r4
   10780:	bd10      	pop	{r4, pc}
   10782:	2a0a      	cmp	r2, #10
   10784:	d109      	bne.n	1079a <__itoa+0x2c>
   10786:	2800      	cmp	r0, #0
   10788:	da07      	bge.n	1079a <__itoa+0x2c>
   1078a:	232d      	movs	r3, #45	; 0x2d
   1078c:	700b      	strb	r3, [r1, #0]
   1078e:	4240      	negs	r0, r0
   10790:	2101      	movs	r1, #1
   10792:	4421      	add	r1, r4
   10794:	f7fd f9fa 	bl	db8c <__utoa>
   10798:	e7f1      	b.n	1077e <__itoa+0x10>
   1079a:	2100      	movs	r1, #0
   1079c:	e7f9      	b.n	10792 <__itoa+0x24>

0001079e <itoa>:
   1079e:	f7ff bfe6 	b.w	1076e <__itoa>

000107a2 <memcpy>:
   107a2:	440a      	add	r2, r1
   107a4:	4291      	cmp	r1, r2
   107a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   107aa:	d100      	bne.n	107ae <memcpy+0xc>
   107ac:	4770      	bx	lr
   107ae:	b510      	push	{r4, lr}
   107b0:	f811 4b01 	ldrb.w	r4, [r1], #1
   107b4:	f803 4f01 	strb.w	r4, [r3, #1]!
   107b8:	4291      	cmp	r1, r2
   107ba:	d1f9      	bne.n	107b0 <memcpy+0xe>
   107bc:	bd10      	pop	{r4, pc}

000107be <memset>:
   107be:	4402      	add	r2, r0
   107c0:	4603      	mov	r3, r0
   107c2:	4293      	cmp	r3, r2
   107c4:	d100      	bne.n	107c8 <memset+0xa>
   107c6:	4770      	bx	lr
   107c8:	f803 1b01 	strb.w	r1, [r3], #1
   107cc:	e7f9      	b.n	107c2 <memset+0x4>

000107ce <_calloc_r>:
   107ce:	b538      	push	{r3, r4, r5, lr}
   107d0:	fb02 f501 	mul.w	r5, r2, r1
   107d4:	4629      	mov	r1, r5
   107d6:	f7fd f96f 	bl	dab8 <_malloc_r>
   107da:	4604      	mov	r4, r0
   107dc:	b118      	cbz	r0, 107e6 <_calloc_r+0x18>
   107de:	462a      	mov	r2, r5
   107e0:	2100      	movs	r1, #0
   107e2:	f7ff ffec 	bl	107be <memset>
   107e6:	4620      	mov	r0, r4
   107e8:	bd38      	pop	{r3, r4, r5, pc}

000107ea <__sread>:
   107ea:	b510      	push	{r4, lr}
   107ec:	460c      	mov	r4, r1
   107ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   107f2:	f7fd ffd3 	bl	e79c <_read_r>
   107f6:	2800      	cmp	r0, #0
   107f8:	bfab      	itete	ge
   107fa:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   107fc:	89a3      	ldrhlt	r3, [r4, #12]
   107fe:	181b      	addge	r3, r3, r0
   10800:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   10804:	bfac      	ite	ge
   10806:	6563      	strge	r3, [r4, #84]	; 0x54
   10808:	81a3      	strhlt	r3, [r4, #12]
   1080a:	bd10      	pop	{r4, pc}

0001080c <__swrite>:
   1080c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10810:	461f      	mov	r7, r3
   10812:	898b      	ldrh	r3, [r1, #12]
   10814:	05db      	lsls	r3, r3, #23
   10816:	4605      	mov	r5, r0
   10818:	460c      	mov	r4, r1
   1081a:	4616      	mov	r6, r2
   1081c:	d505      	bpl.n	1082a <__swrite+0x1e>
   1081e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10822:	2302      	movs	r3, #2
   10824:	2200      	movs	r2, #0
   10826:	f7fd fa15 	bl	dc54 <_lseek_r>
   1082a:	89a3      	ldrh	r3, [r4, #12]
   1082c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   10830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   10834:	81a3      	strh	r3, [r4, #12]
   10836:	4632      	mov	r2, r6
   10838:	463b      	mov	r3, r7
   1083a:	4628      	mov	r0, r5
   1083c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10840:	f7fd b9e6 	b.w	dc10 <_write_r>

00010844 <__sseek>:
   10844:	b510      	push	{r4, lr}
   10846:	460c      	mov	r4, r1
   10848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1084c:	f7fd fa02 	bl	dc54 <_lseek_r>
   10850:	1c43      	adds	r3, r0, #1
   10852:	89a3      	ldrh	r3, [r4, #12]
   10854:	bf15      	itete	ne
   10856:	6560      	strne	r0, [r4, #84]	; 0x54
   10858:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   1085c:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   10860:	81a3      	strheq	r3, [r4, #12]
   10862:	bf18      	it	ne
   10864:	81a3      	strhne	r3, [r4, #12]
   10866:	bd10      	pop	{r4, pc}

00010868 <__sclose>:
   10868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1086c:	f7fd b9e2 	b.w	dc34 <_close_r>

00010870 <strncpy>:
   10870:	b510      	push	{r4, lr}
   10872:	3901      	subs	r1, #1
   10874:	4603      	mov	r3, r0
   10876:	b132      	cbz	r2, 10886 <strncpy+0x16>
   10878:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1087c:	f803 4b01 	strb.w	r4, [r3], #1
   10880:	3a01      	subs	r2, #1
   10882:	2c00      	cmp	r4, #0
   10884:	d1f7      	bne.n	10876 <strncpy+0x6>
   10886:	441a      	add	r2, r3
   10888:	2100      	movs	r1, #0
   1088a:	4293      	cmp	r3, r2
   1088c:	d100      	bne.n	10890 <strncpy+0x20>
   1088e:	bd10      	pop	{r4, pc}
   10890:	f803 1b01 	strb.w	r1, [r3], #1
   10894:	e7f9      	b.n	1088a <strncpy+0x1a>

00010896 <strnlen>:
   10896:	b510      	push	{r4, lr}
   10898:	4602      	mov	r2, r0
   1089a:	4401      	add	r1, r0
   1089c:	428a      	cmp	r2, r1
   1089e:	4613      	mov	r3, r2
   108a0:	d003      	beq.n	108aa <strnlen+0x14>
   108a2:	781c      	ldrb	r4, [r3, #0]
   108a4:	3201      	adds	r2, #1
   108a6:	2c00      	cmp	r4, #0
   108a8:	d1f8      	bne.n	1089c <strnlen+0x6>
   108aa:	1a18      	subs	r0, r3, r0
   108ac:	bd10      	pop	{r4, pc}

000108ae <print_e>:
   108ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   108b0:	b08b      	sub	sp, #44	; 0x2c
   108b2:	460d      	mov	r5, r1
   108b4:	a908      	add	r1, sp, #32
   108b6:	9e10      	ldr	r6, [sp, #64]	; 0x40
   108b8:	9104      	str	r1, [sp, #16]
   108ba:	a907      	add	r1, sp, #28
   108bc:	9103      	str	r1, [sp, #12]
   108be:	a909      	add	r1, sp, #36	; 0x24
   108c0:	9102      	str	r1, [sp, #8]
   108c2:	1c71      	adds	r1, r6, #1
   108c4:	9101      	str	r1, [sp, #4]
   108c6:	2102      	movs	r1, #2
   108c8:	9100      	str	r1, [sp, #0]
   108ca:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
   108ce:	9c12      	ldr	r4, [sp, #72]	; 0x48
   108d0:	f7f1 fb6e 	bl	1fb0 <_dtoa_r>
   108d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   108d6:	f242 730f 	movw	r3, #9999	; 0x270f
   108da:	429a      	cmp	r2, r3
   108dc:	4601      	mov	r1, r0
   108de:	d104      	bne.n	108ea <print_e+0x3c>
   108e0:	4628      	mov	r0, r5
   108e2:	f000 f958 	bl	10b96 <strcpy>
   108e6:	b00b      	add	sp, #44	; 0x2c
   108e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   108ea:	462b      	mov	r3, r5
   108ec:	7800      	ldrb	r0, [r0, #0]
   108ee:	f803 0b01 	strb.w	r0, [r3], #1
   108f2:	2e00      	cmp	r6, #0
   108f4:	bfc8      	it	gt
   108f6:	2401      	movgt	r4, #1
   108f8:	202e      	movs	r0, #46	; 0x2e
   108fa:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   108fe:	b10d      	cbz	r5, 10904 <print_e+0x56>
   10900:	2e00      	cmp	r6, #0
   10902:	dc37      	bgt.n	10974 <print_e+0xc6>
   10904:	2f67      	cmp	r7, #103	; 0x67
   10906:	d046      	beq.n	10996 <print_e+0xe8>
   10908:	2f47      	cmp	r7, #71	; 0x47
   1090a:	d046      	beq.n	1099a <print_e+0xec>
   1090c:	212e      	movs	r1, #46	; 0x2e
   1090e:	2030      	movs	r0, #48	; 0x30
   10910:	2e00      	cmp	r6, #0
   10912:	dc38      	bgt.n	10986 <print_e+0xd8>
   10914:	1e51      	subs	r1, r2, #1
   10916:	2900      	cmp	r1, #0
   10918:	bfb8      	it	lt
   1091a:	f1c2 0201 	rsblt	r2, r2, #1
   1091e:	4618      	mov	r0, r3
   10920:	9109      	str	r1, [sp, #36]	; 0x24
   10922:	bfac      	ite	ge
   10924:	222b      	movge	r2, #43	; 0x2b
   10926:	9209      	strlt	r2, [sp, #36]	; 0x24
   10928:	f800 7b02 	strb.w	r7, [r0], #2
   1092c:	bfa8      	it	ge
   1092e:	705a      	strbge	r2, [r3, #1]
   10930:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10932:	bfbc      	itt	lt
   10934:	212d      	movlt	r1, #45	; 0x2d
   10936:	7059      	strblt	r1, [r3, #1]
   10938:	2a63      	cmp	r2, #99	; 0x63
   1093a:	dd0b      	ble.n	10954 <print_e+0xa6>
   1093c:	2164      	movs	r1, #100	; 0x64
   1093e:	fb92 f1f1 	sdiv	r1, r2, r1
   10942:	f101 0430 	add.w	r4, r1, #48	; 0x30
   10946:	1cd8      	adds	r0, r3, #3
   10948:	709c      	strb	r4, [r3, #2]
   1094a:	f06f 0363 	mvn.w	r3, #99	; 0x63
   1094e:	fb03 2201 	mla	r2, r3, r1, r2
   10952:	9209      	str	r2, [sp, #36]	; 0x24
   10954:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10956:	220a      	movs	r2, #10
   10958:	fb93 f2f2 	sdiv	r2, r3, r2
   1095c:	f102 0130 	add.w	r1, r2, #48	; 0x30
   10960:	7001      	strb	r1, [r0, #0]
   10962:	f06f 0109 	mvn.w	r1, #9
   10966:	fb01 3302 	mla	r3, r1, r2, r3
   1096a:	3330      	adds	r3, #48	; 0x30
   1096c:	7043      	strb	r3, [r0, #1]
   1096e:	2300      	movs	r3, #0
   10970:	7083      	strb	r3, [r0, #2]
   10972:	e7b8      	b.n	108e6 <print_e+0x38>
   10974:	b10c      	cbz	r4, 1097a <print_e+0xcc>
   10976:	f803 0b01 	strb.w	r0, [r3], #1
   1097a:	780c      	ldrb	r4, [r1, #0]
   1097c:	f803 4b01 	strb.w	r4, [r3], #1
   10980:	3e01      	subs	r6, #1
   10982:	2400      	movs	r4, #0
   10984:	e7b9      	b.n	108fa <print_e+0x4c>
   10986:	b10c      	cbz	r4, 1098c <print_e+0xde>
   10988:	f803 1b01 	strb.w	r1, [r3], #1
   1098c:	f803 0b01 	strb.w	r0, [r3], #1
   10990:	3e01      	subs	r6, #1
   10992:	2400      	movs	r4, #0
   10994:	e7bc      	b.n	10910 <print_e+0x62>
   10996:	2765      	movs	r7, #101	; 0x65
   10998:	e7bc      	b.n	10914 <print_e+0x66>
   1099a:	2745      	movs	r7, #69	; 0x45
   1099c:	e7ba      	b.n	10914 <print_e+0x66>

0001099e <__hi0bits>:
   1099e:	0c02      	lsrs	r2, r0, #16
   109a0:	0412      	lsls	r2, r2, #16
   109a2:	4603      	mov	r3, r0
   109a4:	b9ca      	cbnz	r2, 109da <__hi0bits+0x3c>
   109a6:	0403      	lsls	r3, r0, #16
   109a8:	2010      	movs	r0, #16
   109aa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   109ae:	bf04      	itt	eq
   109b0:	021b      	lsleq	r3, r3, #8
   109b2:	3008      	addeq	r0, #8
   109b4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   109b8:	bf04      	itt	eq
   109ba:	011b      	lsleq	r3, r3, #4
   109bc:	3004      	addeq	r0, #4
   109be:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   109c2:	bf04      	itt	eq
   109c4:	009b      	lsleq	r3, r3, #2
   109c6:	3002      	addeq	r0, #2
   109c8:	2b00      	cmp	r3, #0
   109ca:	db05      	blt.n	109d8 <__hi0bits+0x3a>
   109cc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   109d0:	f100 0001 	add.w	r0, r0, #1
   109d4:	bf08      	it	eq
   109d6:	2020      	moveq	r0, #32
   109d8:	4770      	bx	lr
   109da:	2000      	movs	r0, #0
   109dc:	e7e5      	b.n	109aa <__hi0bits+0xc>

000109de <__lo0bits>:
   109de:	6803      	ldr	r3, [r0, #0]
   109e0:	4602      	mov	r2, r0
   109e2:	f013 0007 	ands.w	r0, r3, #7
   109e6:	d00b      	beq.n	10a00 <__lo0bits+0x22>
   109e8:	07d9      	lsls	r1, r3, #31
   109ea:	d421      	bmi.n	10a30 <__lo0bits+0x52>
   109ec:	0798      	lsls	r0, r3, #30
   109ee:	bf49      	itett	mi
   109f0:	085b      	lsrmi	r3, r3, #1
   109f2:	089b      	lsrpl	r3, r3, #2
   109f4:	2001      	movmi	r0, #1
   109f6:	6013      	strmi	r3, [r2, #0]
   109f8:	bf5c      	itt	pl
   109fa:	6013      	strpl	r3, [r2, #0]
   109fc:	2002      	movpl	r0, #2
   109fe:	4770      	bx	lr
   10a00:	b299      	uxth	r1, r3
   10a02:	b909      	cbnz	r1, 10a08 <__lo0bits+0x2a>
   10a04:	0c1b      	lsrs	r3, r3, #16
   10a06:	2010      	movs	r0, #16
   10a08:	b2d9      	uxtb	r1, r3
   10a0a:	b909      	cbnz	r1, 10a10 <__lo0bits+0x32>
   10a0c:	3008      	adds	r0, #8
   10a0e:	0a1b      	lsrs	r3, r3, #8
   10a10:	0719      	lsls	r1, r3, #28
   10a12:	bf04      	itt	eq
   10a14:	091b      	lsreq	r3, r3, #4
   10a16:	3004      	addeq	r0, #4
   10a18:	0799      	lsls	r1, r3, #30
   10a1a:	bf04      	itt	eq
   10a1c:	089b      	lsreq	r3, r3, #2
   10a1e:	3002      	addeq	r0, #2
   10a20:	07d9      	lsls	r1, r3, #31
   10a22:	d403      	bmi.n	10a2c <__lo0bits+0x4e>
   10a24:	085b      	lsrs	r3, r3, #1
   10a26:	f100 0001 	add.w	r0, r0, #1
   10a2a:	d003      	beq.n	10a34 <__lo0bits+0x56>
   10a2c:	6013      	str	r3, [r2, #0]
   10a2e:	4770      	bx	lr
   10a30:	2000      	movs	r0, #0
   10a32:	4770      	bx	lr
   10a34:	2020      	movs	r0, #32
   10a36:	4770      	bx	lr

00010a38 <__mcmp>:
   10a38:	690a      	ldr	r2, [r1, #16]
   10a3a:	4603      	mov	r3, r0
   10a3c:	6900      	ldr	r0, [r0, #16]
   10a3e:	1a80      	subs	r0, r0, r2
   10a40:	b530      	push	{r4, r5, lr}
   10a42:	d10d      	bne.n	10a60 <__mcmp+0x28>
   10a44:	3314      	adds	r3, #20
   10a46:	3114      	adds	r1, #20
   10a48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   10a4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   10a50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   10a54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   10a58:	4295      	cmp	r5, r2
   10a5a:	d002      	beq.n	10a62 <__mcmp+0x2a>
   10a5c:	d304      	bcc.n	10a68 <__mcmp+0x30>
   10a5e:	2001      	movs	r0, #1
   10a60:	bd30      	pop	{r4, r5, pc}
   10a62:	42a3      	cmp	r3, r4
   10a64:	d3f4      	bcc.n	10a50 <__mcmp+0x18>
   10a66:	e7fb      	b.n	10a60 <__mcmp+0x28>
   10a68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a6c:	e7f8      	b.n	10a60 <__mcmp+0x28>

00010a6e <__sfputc_r>:
   10a6e:	6893      	ldr	r3, [r2, #8]
   10a70:	3b01      	subs	r3, #1
   10a72:	2b00      	cmp	r3, #0
   10a74:	b410      	push	{r4}
   10a76:	6093      	str	r3, [r2, #8]
   10a78:	da07      	bge.n	10a8a <__sfputc_r+0x1c>
   10a7a:	6994      	ldr	r4, [r2, #24]
   10a7c:	42a3      	cmp	r3, r4
   10a7e:	db01      	blt.n	10a84 <__sfputc_r+0x16>
   10a80:	290a      	cmp	r1, #10
   10a82:	d102      	bne.n	10a8a <__sfputc_r+0x1c>
   10a84:	bc10      	pop	{r4}
   10a86:	f7fd be9b 	b.w	e7c0 <__swbuf_r>
   10a8a:	6813      	ldr	r3, [r2, #0]
   10a8c:	1c58      	adds	r0, r3, #1
   10a8e:	6010      	str	r0, [r2, #0]
   10a90:	7019      	strb	r1, [r3, #0]
   10a92:	4608      	mov	r0, r1
   10a94:	bc10      	pop	{r4}
   10a96:	4770      	bx	lr

00010a98 <__sfputs_r>:
   10a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a9a:	4606      	mov	r6, r0
   10a9c:	460f      	mov	r7, r1
   10a9e:	4614      	mov	r4, r2
   10aa0:	18d5      	adds	r5, r2, r3
   10aa2:	42ac      	cmp	r4, r5
   10aa4:	d101      	bne.n	10aaa <__sfputs_r+0x12>
   10aa6:	2000      	movs	r0, #0
   10aa8:	e007      	b.n	10aba <__sfputs_r+0x22>
   10aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
   10aae:	463a      	mov	r2, r7
   10ab0:	4630      	mov	r0, r6
   10ab2:	f7ff ffdc 	bl	10a6e <__sfputc_r>
   10ab6:	1c43      	adds	r3, r0, #1
   10ab8:	d1f3      	bne.n	10aa2 <__sfputs_r+0xa>
   10aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010abc <_printf_common>:
   10abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10ac0:	4616      	mov	r6, r2
   10ac2:	4699      	mov	r9, r3
   10ac4:	688a      	ldr	r2, [r1, #8]
   10ac6:	690b      	ldr	r3, [r1, #16]
   10ac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   10acc:	4293      	cmp	r3, r2
   10ace:	bfb8      	it	lt
   10ad0:	4613      	movlt	r3, r2
   10ad2:	6033      	str	r3, [r6, #0]
   10ad4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   10ad8:	4607      	mov	r7, r0
   10ada:	460c      	mov	r4, r1
   10adc:	b10a      	cbz	r2, 10ae2 <_printf_common+0x26>
   10ade:	3301      	adds	r3, #1
   10ae0:	6033      	str	r3, [r6, #0]
   10ae2:	6823      	ldr	r3, [r4, #0]
   10ae4:	0699      	lsls	r1, r3, #26
   10ae6:	bf42      	ittt	mi
   10ae8:	6833      	ldrmi	r3, [r6, #0]
   10aea:	3302      	addmi	r3, #2
   10aec:	6033      	strmi	r3, [r6, #0]
   10aee:	6825      	ldr	r5, [r4, #0]
   10af0:	f015 0506 	ands.w	r5, r5, #6
   10af4:	d106      	bne.n	10b04 <_printf_common+0x48>
   10af6:	f104 0a19 	add.w	sl, r4, #25
   10afa:	68e3      	ldr	r3, [r4, #12]
   10afc:	6832      	ldr	r2, [r6, #0]
   10afe:	1a9b      	subs	r3, r3, r2
   10b00:	42ab      	cmp	r3, r5
   10b02:	dc26      	bgt.n	10b52 <_printf_common+0x96>
   10b04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   10b08:	1e13      	subs	r3, r2, #0
   10b0a:	6822      	ldr	r2, [r4, #0]
   10b0c:	bf18      	it	ne
   10b0e:	2301      	movne	r3, #1
   10b10:	0692      	lsls	r2, r2, #26
   10b12:	d42b      	bmi.n	10b6c <_printf_common+0xb0>
   10b14:	f104 0243 	add.w	r2, r4, #67	; 0x43
   10b18:	4649      	mov	r1, r9
   10b1a:	4638      	mov	r0, r7
   10b1c:	47c0      	blx	r8
   10b1e:	3001      	adds	r0, #1
   10b20:	d01e      	beq.n	10b60 <_printf_common+0xa4>
   10b22:	6823      	ldr	r3, [r4, #0]
   10b24:	68e5      	ldr	r5, [r4, #12]
   10b26:	6832      	ldr	r2, [r6, #0]
   10b28:	f003 0306 	and.w	r3, r3, #6
   10b2c:	2b04      	cmp	r3, #4
   10b2e:	bf08      	it	eq
   10b30:	1aad      	subeq	r5, r5, r2
   10b32:	68a3      	ldr	r3, [r4, #8]
   10b34:	6922      	ldr	r2, [r4, #16]
   10b36:	bf0c      	ite	eq
   10b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   10b3c:	2500      	movne	r5, #0
   10b3e:	4293      	cmp	r3, r2
   10b40:	bfc4      	itt	gt
   10b42:	1a9b      	subgt	r3, r3, r2
   10b44:	18ed      	addgt	r5, r5, r3
   10b46:	2600      	movs	r6, #0
   10b48:	341a      	adds	r4, #26
   10b4a:	42b5      	cmp	r5, r6
   10b4c:	d11a      	bne.n	10b84 <_printf_common+0xc8>
   10b4e:	2000      	movs	r0, #0
   10b50:	e008      	b.n	10b64 <_printf_common+0xa8>
   10b52:	2301      	movs	r3, #1
   10b54:	4652      	mov	r2, sl
   10b56:	4649      	mov	r1, r9
   10b58:	4638      	mov	r0, r7
   10b5a:	47c0      	blx	r8
   10b5c:	3001      	adds	r0, #1
   10b5e:	d103      	bne.n	10b68 <_printf_common+0xac>
   10b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10b68:	3501      	adds	r5, #1
   10b6a:	e7c6      	b.n	10afa <_printf_common+0x3e>
   10b6c:	18e1      	adds	r1, r4, r3
   10b6e:	1c5a      	adds	r2, r3, #1
   10b70:	2030      	movs	r0, #48	; 0x30
   10b72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   10b76:	4422      	add	r2, r4
   10b78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   10b7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   10b80:	3302      	adds	r3, #2
   10b82:	e7c7      	b.n	10b14 <_printf_common+0x58>
   10b84:	2301      	movs	r3, #1
   10b86:	4622      	mov	r2, r4
   10b88:	4649      	mov	r1, r9
   10b8a:	4638      	mov	r0, r7
   10b8c:	47c0      	blx	r8
   10b8e:	3001      	adds	r0, #1
   10b90:	d0e6      	beq.n	10b60 <_printf_common+0xa4>
   10b92:	3601      	adds	r6, #1
   10b94:	e7d9      	b.n	10b4a <_printf_common+0x8e>

00010b96 <strcpy>:
   10b96:	4603      	mov	r3, r0
   10b98:	f811 2b01 	ldrb.w	r2, [r1], #1
   10b9c:	f803 2b01 	strb.w	r2, [r3], #1
   10ba0:	2a00      	cmp	r2, #0
   10ba2:	d1f9      	bne.n	10b98 <strcpy+0x2>
   10ba4:	4770      	bx	lr

00010ba6 <quorem>:
   10ba6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10baa:	6903      	ldr	r3, [r0, #16]
   10bac:	690c      	ldr	r4, [r1, #16]
   10bae:	42a3      	cmp	r3, r4
   10bb0:	4607      	mov	r7, r0
   10bb2:	db7d      	blt.n	10cb0 <quorem+0x10a>
   10bb4:	3c01      	subs	r4, #1
   10bb6:	f101 0814 	add.w	r8, r1, #20
   10bba:	f100 0514 	add.w	r5, r0, #20
   10bbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   10bc2:	9301      	str	r3, [sp, #4]
   10bc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   10bc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   10bcc:	3301      	adds	r3, #1
   10bce:	429a      	cmp	r2, r3
   10bd0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   10bd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   10bd8:	fbb2 f6f3 	udiv	r6, r2, r3
   10bdc:	d32e      	bcc.n	10c3c <quorem+0x96>
   10bde:	f04f 0e00 	mov.w	lr, #0
   10be2:	4640      	mov	r0, r8
   10be4:	46ac      	mov	ip, r5
   10be6:	46f2      	mov	sl, lr
   10be8:	f850 2b04 	ldr.w	r2, [r0], #4
   10bec:	b293      	uxth	r3, r2
   10bee:	fb06 e303 	mla	r3, r6, r3, lr
   10bf2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   10bf6:	0c12      	lsrs	r2, r2, #16
   10bf8:	b29b      	uxth	r3, r3
   10bfa:	fb06 e202 	mla	r2, r6, r2, lr
   10bfe:	ebaa 0303 	sub.w	r3, sl, r3
   10c02:	f8dc a000 	ldr.w	sl, [ip]
   10c06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   10c0a:	b292      	uxth	r2, r2
   10c0c:	fa13 f38a 	uxtah	r3, r3, sl
   10c10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
   10c14:	eb02 4223 	add.w	r2, r2, r3, asr #16
   10c18:	b29b      	uxth	r3, r3
   10c1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10c1e:	4581      	cmp	r9, r0
   10c20:	f84c 3b04 	str.w	r3, [ip], #4
   10c24:	ea4f 4a22 	mov.w	sl, r2, asr #16
   10c28:	d2de      	bcs.n	10be8 <quorem+0x42>
   10c2a:	f855 300b 	ldr.w	r3, [r5, fp]
   10c2e:	b92b      	cbnz	r3, 10c3c <quorem+0x96>
   10c30:	9b01      	ldr	r3, [sp, #4]
   10c32:	3b04      	subs	r3, #4
   10c34:	429d      	cmp	r5, r3
   10c36:	461a      	mov	r2, r3
   10c38:	d32e      	bcc.n	10c98 <quorem+0xf2>
   10c3a:	613c      	str	r4, [r7, #16]
   10c3c:	4638      	mov	r0, r7
   10c3e:	f7ff fefb 	bl	10a38 <__mcmp>
   10c42:	2800      	cmp	r0, #0
   10c44:	db24      	blt.n	10c90 <quorem+0xea>
   10c46:	3601      	adds	r6, #1
   10c48:	4628      	mov	r0, r5
   10c4a:	f04f 0c00 	mov.w	ip, #0
   10c4e:	f858 2b04 	ldr.w	r2, [r8], #4
   10c52:	f8d0 e000 	ldr.w	lr, [r0]
   10c56:	b293      	uxth	r3, r2
   10c58:	ebac 0303 	sub.w	r3, ip, r3
   10c5c:	0c12      	lsrs	r2, r2, #16
   10c5e:	fa13 f38e 	uxtah	r3, r3, lr
   10c62:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   10c66:	eb02 4223 	add.w	r2, r2, r3, asr #16
   10c6a:	b29b      	uxth	r3, r3
   10c6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10c70:	45c1      	cmp	r9, r8
   10c72:	f840 3b04 	str.w	r3, [r0], #4
   10c76:	ea4f 4c22 	mov.w	ip, r2, asr #16
   10c7a:	d2e8      	bcs.n	10c4e <quorem+0xa8>
   10c7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   10c80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   10c84:	b922      	cbnz	r2, 10c90 <quorem+0xea>
   10c86:	3b04      	subs	r3, #4
   10c88:	429d      	cmp	r5, r3
   10c8a:	461a      	mov	r2, r3
   10c8c:	d30a      	bcc.n	10ca4 <quorem+0xfe>
   10c8e:	613c      	str	r4, [r7, #16]
   10c90:	4630      	mov	r0, r6
   10c92:	b003      	add	sp, #12
   10c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c98:	6812      	ldr	r2, [r2, #0]
   10c9a:	3b04      	subs	r3, #4
   10c9c:	2a00      	cmp	r2, #0
   10c9e:	d1cc      	bne.n	10c3a <quorem+0x94>
   10ca0:	3c01      	subs	r4, #1
   10ca2:	e7c7      	b.n	10c34 <quorem+0x8e>
   10ca4:	6812      	ldr	r2, [r2, #0]
   10ca6:	3b04      	subs	r3, #4
   10ca8:	2a00      	cmp	r2, #0
   10caa:	d1f0      	bne.n	10c8e <quorem+0xe8>
   10cac:	3c01      	subs	r4, #1
   10cae:	e7eb      	b.n	10c88 <quorem+0xe2>
   10cb0:	2000      	movs	r0, #0
   10cb2:	e7ee      	b.n	10c92 <quorem+0xec>

00010cb4 <__swhatbuf_r>:
   10cb4:	b570      	push	{r4, r5, r6, lr}
   10cb6:	460e      	mov	r6, r1
   10cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10cbc:	2900      	cmp	r1, #0
   10cbe:	b096      	sub	sp, #88	; 0x58
   10cc0:	4614      	mov	r4, r2
   10cc2:	461d      	mov	r5, r3
   10cc4:	da08      	bge.n	10cd8 <__swhatbuf_r+0x24>
   10cc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   10cca:	2200      	movs	r2, #0
   10ccc:	602a      	str	r2, [r5, #0]
   10cce:	061a      	lsls	r2, r3, #24
   10cd0:	d410      	bmi.n	10cf4 <__swhatbuf_r+0x40>
   10cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   10cd6:	e00e      	b.n	10cf6 <__swhatbuf_r+0x42>
   10cd8:	466a      	mov	r2, sp
   10cda:	f7fd fea1 	bl	ea20 <_fstat_r>
   10cde:	2800      	cmp	r0, #0
   10ce0:	dbf1      	blt.n	10cc6 <__swhatbuf_r+0x12>
   10ce2:	9a01      	ldr	r2, [sp, #4]
   10ce4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   10ce8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   10cec:	425a      	negs	r2, r3
   10cee:	415a      	adcs	r2, r3
   10cf0:	602a      	str	r2, [r5, #0]
   10cf2:	e7ee      	b.n	10cd2 <__swhatbuf_r+0x1e>
   10cf4:	2340      	movs	r3, #64	; 0x40
   10cf6:	2000      	movs	r0, #0
   10cf8:	6023      	str	r3, [r4, #0]
   10cfa:	b016      	add	sp, #88	; 0x58
   10cfc:	bd70      	pop	{r4, r5, r6, pc}

00010cfe <abort>:
   10cfe:	b508      	push	{r3, lr}
   10d00:	2006      	movs	r0, #6
   10d02:	f7fd feaf 	bl	ea64 <raise>
   10d06:	2001      	movs	r0, #1
   10d08:	f7f5 ffb6 	bl	6c78 <_exit>

00010d0c <_raise_r>:
   10d0c:	291f      	cmp	r1, #31
   10d0e:	b538      	push	{r3, r4, r5, lr}
   10d10:	4604      	mov	r4, r0
   10d12:	460d      	mov	r5, r1
   10d14:	d904      	bls.n	10d20 <_raise_r+0x14>
   10d16:	2316      	movs	r3, #22
   10d18:	6003      	str	r3, [r0, #0]
   10d1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10d1e:	bd38      	pop	{r3, r4, r5, pc}
   10d20:	6c42      	ldr	r2, [r0, #68]	; 0x44
   10d22:	b112      	cbz	r2, 10d2a <_raise_r+0x1e>
   10d24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   10d28:	b94b      	cbnz	r3, 10d3e <_raise_r+0x32>
   10d2a:	4620      	mov	r0, r4
   10d2c:	f000 f816 	bl	10d5c <_getpid_r>
   10d30:	462a      	mov	r2, r5
   10d32:	4601      	mov	r1, r0
   10d34:	4620      	mov	r0, r4
   10d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10d3a:	f7fd be9b 	b.w	ea74 <_kill_r>
   10d3e:	2b01      	cmp	r3, #1
   10d40:	d00a      	beq.n	10d58 <_raise_r+0x4c>
   10d42:	1c59      	adds	r1, r3, #1
   10d44:	d103      	bne.n	10d4e <_raise_r+0x42>
   10d46:	2316      	movs	r3, #22
   10d48:	6003      	str	r3, [r0, #0]
   10d4a:	2001      	movs	r0, #1
   10d4c:	e7e7      	b.n	10d1e <_raise_r+0x12>
   10d4e:	2400      	movs	r4, #0
   10d50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   10d54:	4628      	mov	r0, r5
   10d56:	4798      	blx	r3
   10d58:	2000      	movs	r0, #0
   10d5a:	e7e0      	b.n	10d1e <_raise_r+0x12>

00010d5c <_getpid_r>:
   10d5c:	f7fe bbd4 	b.w	f508 <_getpid>

00010d60 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   10d60:	f7f7 beda 	b.w	8b18 <SystemInit>
