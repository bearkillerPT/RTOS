
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 59 00 20 61 36 00 00 2d a0 00 00 19 36 00 00     .Y. a6..-....6..
  10:	19 36 00 00 19 36 00 00 19 36 00 00 00 00 00 00     .6...6...6......
	...
  2c:	f5 2d 00 00 19 36 00 00 00 00 00 00 9d 2d 00 00     .-...6.......-..
  3c:	19 36 00 00                                         .6..

00000040 <_irq_vector_table>:
  40:	d5 2e 00 00 d5 2e 00 00 d5 2e 00 00 d5 2e 00 00     ................
  50:	d5 2e 00 00 d5 2e 00 00 d5 2e 00 00 d5 2e 00 00     ................
  60:	d5 2e 00 00 d5 2e 00 00 d5 2e 00 00 d5 2e 00 00     ................
  70:	d5 2e 00 00 d5 2e 00 00 d5 2e 00 00 d5 2e 00 00     ................
  80:	d5 2e 00 00 d5 2e 00 00 d5 2e 00 00 d5 2e 00 00     ................
  90:	d5 2e 00 00 d5 2e 00 00 d5 2e 00 00 d5 2e 00 00     ................
  a0:	d5 2e 00 00 d5 2e 00 00 d5 2e 00 00 d5 2e 00 00     ................
  b0:	d5 2e 00 00 d5 2e 00 00 d5 2e 00 00 d5 2e 00 00     ................
  c0:	d5 2e 00 00 d5 2e 00 00 d5 2e 00 00 d5 2e 00 00     ................
  d0:	d5 2e 00 00 d5 2e 00 00 d5 2e 00 00 d5 2e 00 00     ................
  e0:	d5 2e 00 00 d5 2e 00 00 d5 2e 00 00 d5 2e 00 00     ................
  f0:	d5 2e 00 00 d5 2e 00 00 d5 2e 00 00 d5 2e 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16b>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdd>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x167>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17b>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1a3>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x189>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x193>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x261>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x265>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23b>
     3a2:	d106      	bne.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19b>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
	...

000003dc <thread_near_obstacle_code>:
    return;
}

/* Thread code implementation */
void thread_near_obstacle_code(void *argA, void *argB, void *argC)
{
     3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3e0:	b087      	sub	sp, #28
    int64_t release_time = 0, fin_time = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;

    printk("Thread near_obstacle init (periodic)\n");
     3e2:	4860      	ldr	r0, [pc, #384]	; (564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>)
     3e4:	f009 fbc2 	bl	9b6c <printk>
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
     3e8:	f00a fc7f 	bl	acea <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
     3ec:	014a      	lsls	r2, r1, #5
     3ee:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
     3f2:	0143      	lsls	r3, r0, #5
     3f4:	1a1b      	subs	r3, r3, r0
     3f6:	eb62 0201 	sbc.w	r2, r2, r1
     3fa:	0092      	lsls	r2, r2, #2
     3fc:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     400:	009b      	lsls	r3, r3, #2
     402:	181d      	adds	r5, r3, r0
     404:	eb42 0301 	adc.w	r3, r2, r1
     408:	00db      	lsls	r3, r3, #3
     40a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
     40e:	f3c5 3510 	ubfx	r5, r5, #12, #17
     412:	ea45 4543 	orr.w	r5, r5, r3, lsl #17
     416:	0bdb      	lsrs	r3, r3, #15

    /* Compute next release instant */
    release_time = k_uptime_get() + SAMP_PERIOD_MS;
     418:	350a      	adds	r5, #10
     41a:	f143 0600 	adc.w	r6, r3, #0
    int64_t release_time = 0, fin_time = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
     41e:	f04f 090a 	mov.w	r9, #10
     422:	f04f 0800 	mov.w	r8, #0
     426:	46cb      	mov	fp, r9
     428:	f8cd 8014 	str.w	r8, [sp, #20]
     42c:	e08f      	b.n	54e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x66>
            int inObs = 0;
            for (i = NOB_COL; i < NOB_COL * 3; i++)
            {
                if (vertical_guide_image_data[j][i] == OBSTACLE_COLOR)
                {
                    inObs++;
     42e:	3101      	adds	r1, #1
                }
                else if (inObs > 1)
                {
                    inObs = 0;
                }
                if (inObs > 1)
     430:	2901      	cmp	r1, #1
     432:	dd00      	ble.n	436 <CONFIG_FLASH_SIZE+0x36>
                    res=1;
     434:	2401      	movs	r4, #1
            for (i = NOB_COL; i < NOB_COL * 3; i++)
     436:	3301      	adds	r3, #1
     438:	2b5f      	cmp	r3, #95	; 0x5f
     43a:	dc09      	bgt.n	450 <CONFIG_FLASH_SIZE+0x50>
                if (vertical_guide_image_data[j][i] == OBSTACLE_COLOR)
     43c:	4a4a      	ldr	r2, [pc, #296]	; (568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>)
     43e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
     442:	5cd2      	ldrb	r2, [r2, r3]
     444:	2a80      	cmp	r2, #128	; 0x80
     446:	d0f2      	beq.n	42e <CONFIG_FLASH_SIZE+0x2e>
                else if (inObs > 1)
     448:	2901      	cmp	r1, #1
     44a:	ddf1      	ble.n	430 <CONFIG_FLASH_SIZE+0x30>
                    inObs = 0;
     44c:	2100      	movs	r1, #0
     44e:	e7f2      	b.n	436 <CONFIG_FLASH_SIZE+0x36>
        for (j = 0; j < NOB_ROW; j++)
     450:	3001      	adds	r0, #1
     452:	283f      	cmp	r0, #63	; 0x3f
     454:	dc02      	bgt.n	45c <CONFIG_FLASH_SIZE+0x5c>
            int inObs = 0;
     456:	2100      	movs	r1, #0
            for (i = NOB_COL; i < NOB_COL * 3; i++)
     458:	2320      	movs	r3, #32
     45a:	e7ed      	b.n	438 <CONFIG_FLASH_SIZE+0x38>
            }
        }
        
        
        printk("Closeby obstacles detected: %s\n\r", res == 1 ? "Yes" : "No");
     45c:	bb9c      	cbnz	r4, 4c6 <CONFIG_FLASH_SIZE+0xc6>
     45e:	4943      	ldr	r1, [pc, #268]	; (56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>)
     460:	4843      	ldr	r0, [pc, #268]	; (570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>)
     462:	f009 fb83 	bl	9b6c <printk>
     466:	f00a fc40 	bl	acea <z_impl_k_uptime_ticks>
     46a:	014a      	lsls	r2, r1, #5
     46c:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
     470:	0143      	lsls	r3, r0, #5
     472:	1a1b      	subs	r3, r3, r0
     474:	eb62 0201 	sbc.w	r2, r2, r1
     478:	0092      	lsls	r2, r2, #2
     47a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     47e:	009b      	lsls	r3, r3, #2
     480:	181b      	adds	r3, r3, r0
     482:	eb42 0701 	adc.w	r7, r2, r1
     486:	00ff      	lsls	r7, r7, #3
     488:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
     48c:	f3c3 3410 	ubfx	r4, r3, #12, #17
     490:	ea44 4447 	orr.w	r4, r4, r7, lsl #17
     494:	0bff      	lsrs	r7, r7, #15
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
     496:	46a2      	mov	sl, r4
        

        /* Wait for next release instant */
        fin_time = k_uptime_get();
        
        if (fin_time - release_time + SAMP_PERIOD_MS < t_min)
     498:	1b63      	subs	r3, r4, r5
     49a:	eb67 0206 	sbc.w	r2, r7, r6
     49e:	f113 000a 	adds.w	r0, r3, #10
     4a2:	f142 0100 	adc.w	r1, r2, #0
     4a6:	4558      	cmp	r0, fp
     4a8:	f8dd c014 	ldr.w	ip, [sp, #20]
     4ac:	eb71 0c0c 	sbcs.w	ip, r1, ip
     4b0:	db0b      	blt.n	4ca <CONFIG_FLASH_SIZE+0xca>
            t_min = fin_time - release_time + SAMP_PERIOD_MS;
        else if (fin_time - release_time + SAMP_PERIOD_MS > t_max)
     4b2:	3309      	adds	r3, #9
     4b4:	f142 0200 	adc.w	r2, r2, #0
     4b8:	454b      	cmp	r3, r9
     4ba:	eb72 0308 	sbcs.w	r3, r2, r8
     4be:	db06      	blt.n	4ce <CONFIG_FLASH_SIZE+0xce>
            t_max = fin_time - release_time + SAMP_PERIOD_MS;
     4c0:	4681      	mov	r9, r0
     4c2:	4688      	mov	r8, r1
     4c4:	e003      	b.n	4ce <CONFIG_FLASH_SIZE+0xce>
        printk("Closeby obstacles detected: %s\n\r", res == 1 ? "Yes" : "No");
     4c6:	492b      	ldr	r1, [pc, #172]	; (574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>)
     4c8:	e7ca      	b.n	460 <CONFIG_FLASH_SIZE+0x60>
            t_min = fin_time - release_time + SAMP_PERIOD_MS;
     4ca:	4683      	mov	fp, r0
     4cc:	9105      	str	r1, [sp, #20]
     4ce:	f00a fc0c 	bl	acea <z_impl_k_uptime_ticks>
     4d2:	014b      	lsls	r3, r1, #5
     4d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     4d8:	0142      	lsls	r2, r0, #5
     4da:	1a12      	subs	r2, r2, r0
     4dc:	eb63 0301 	sbc.w	r3, r3, r1
     4e0:	009b      	lsls	r3, r3, #2
     4e2:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
     4e6:	0092      	lsls	r2, r2, #2
     4e8:	1812      	adds	r2, r2, r0
     4ea:	eb43 0301 	adc.w	r3, r3, r1
     4ee:	00db      	lsls	r3, r3, #3
     4f0:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     4f4:	f3c2 3210 	ubfx	r2, r2, #12, #17

        printk("Task %s arrived at %lld inter-arrival time (us): min: %lld / max: %lld \n\r", "near obstacle", (long long)k_uptime_get(), t_min, t_max);
     4f8:	f8cd 9008 	str.w	r9, [sp, #8]
     4fc:	f8cd 800c 	str.w	r8, [sp, #12]
     500:	f8cd b000 	str.w	fp, [sp]
     504:	9905      	ldr	r1, [sp, #20]
     506:	9101      	str	r1, [sp, #4]
     508:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
     50c:	0bdb      	lsrs	r3, r3, #15
     50e:	491a      	ldr	r1, [pc, #104]	; (578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>)
     510:	481a      	ldr	r0, [pc, #104]	; (57c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x94>)
     512:	f009 fb2b 	bl	9b6c <printk>
        if (fin_time < release_time)
     516:	45aa      	cmp	sl, r5
     518:	eb77 0306 	sbcs.w	r3, r7, r6
     51c:	da1d      	bge.n	55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
        {
            k_msleep(release_time - fin_time);
     51e:	1b2b      	subs	r3, r5, r4
	return k_sleep(Z_TIMEOUT_MS(ms));
     520:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
     524:	17d9      	asrs	r1, r3, #31
     526:	03c9      	lsls	r1, r1, #15
     528:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
     52c:	03db      	lsls	r3, r3, #15
     52e:	f240 30e7 	movw	r0, #999	; 0x3e7
     532:	1818      	adds	r0, r3, r0
     534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     538:	f04f 0300 	mov.w	r3, #0
     53c:	f141 0100 	adc.w	r1, r1, #0
     540:	f7ff fdde 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     544:	f008 fc3a 	bl	8dbc <z_impl_k_sleep>
            release_time += SAMP_PERIOD_MS;
     548:	350a      	adds	r5, #10
     54a:	f146 0600 	adc.w	r6, r6, #0
        printk("Detecting closeby obstacles ...");
     54e:	480c      	ldr	r0, [pc, #48]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
     550:	f009 fb0c 	bl	9b6c <printk>
        int res=0;
     554:	2400      	movs	r4, #0
        for (j = 0; j < NOB_ROW; j++)
     556:	4620      	mov	r0, r4
     558:	e77b      	b.n	452 <CONFIG_FLASH_SIZE+0x52>
        }
        else{
            release_time = fin_time + SAMP_PERIOD_MS;
     55a:	f11a 050a 	adds.w	r5, sl, #10
     55e:	f147 0600 	adc.w	r6, r7, #0
     562:	e7f4      	b.n	54e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x66>
     564:	0000b070 	.word	0x0000b070
     568:	20000000 	.word	0x20000000
     56c:	0000b068 	.word	0x0000b068
     570:	0000b0b8 	.word	0x0000b0b8
     574:	0000b06c 	.word	0x0000b06c
     578:	0000b0dc 	.word	0x0000b0dc
     57c:	0000b0ec 	.word	0x0000b0ec
     580:	0000b098 	.word	0x0000b098

00000584 <main>:
{
     584:	b500      	push	{lr}
     586:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     588:	2200      	movs	r2, #0
     58a:	2300      	movs	r3, #0
     58c:	e9cd 2306 	strd	r2, r3, [sp, #24]
     590:	2300      	movs	r3, #0
     592:	9304      	str	r3, [sp, #16]
     594:	2201      	movs	r2, #1
     596:	9203      	str	r2, [sp, #12]
     598:	9302      	str	r3, [sp, #8]
     59a:	9301      	str	r3, [sp, #4]
     59c:	9300      	str	r3, [sp, #0]
     59e:	4b06      	ldr	r3, [pc, #24]	; (5b8 <main+0x34>)
     5a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
     5a4:	4905      	ldr	r1, [pc, #20]	; (5bc <main+0x38>)
     5a6:	4806      	ldr	r0, [pc, #24]	; (5c0 <main+0x3c>)
     5a8:	f006 fef6 	bl	7398 <z_impl_k_thread_create>
    thread_near_obstacle_tid = k_thread_create(&thread_near_obstacle_data, thread_near_obstacle_stack,
     5ac:	4b05      	ldr	r3, [pc, #20]	; (5c4 <main+0x40>)
     5ae:	6018      	str	r0, [r3, #0]
}
     5b0:	b009      	add	sp, #36	; 0x24
     5b2:	f85d fb04 	ldr.w	pc, [sp], #4
     5b6:	bf00      	nop
     5b8:	000003dd 	.word	0x000003dd
     5bc:	20005160 	.word	0x20005160
     5c0:	200041c0 	.word	0x200041c0
     5c4:	200043f8 	.word	0x200043f8

000005c8 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5cc:	b08d      	sub	sp, #52	; 0x34
     5ce:	9205      	str	r2, [sp, #20]
     5d0:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     5d2:	4613      	mov	r3, r2
     5d4:	f002 0204 	and.w	r2, r2, #4
     5d8:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     5da:	f3c3 02c2 	ubfx	r2, r3, #3, #3

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     5de:	f010 0303 	ands.w	r3, r0, #3
     5e2:	9302      	str	r3, [sp, #8]
     5e4:	f040 8293 	bne.w	b0e <CONFIG_ISR_STACK_SIZE+0x30e>
     5e8:	4607      	mov	r7, r0
     5ea:	468a      	mov	sl, r1
     5ec:	3201      	adds	r2, #1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     5ee:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     5f0:	2800      	cmp	r0, #0
     5f2:	d041      	beq.n	678 <cbvprintf_package+0xb0>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     5f4:	b127      	cbz	r7, 600 <cbvprintf_package+0x38>
     5f6:	1be3      	subs	r3, r4, r7
     5f8:	3304      	adds	r3, #4
     5fa:	4553      	cmp	r3, sl
     5fc:	f200 828a 	bhi.w	b14 <CONFIG_ISR_STACK_SIZE+0x314>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
     600:	9b03      	ldr	r3, [sp, #12]
     602:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     604:	f8dd b008 	ldr.w	fp, [sp, #8]
     608:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     60c:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
     610:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
     612:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
     616:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     618:	b10f      	cbz	r7, 61e <cbvprintf_package+0x56>
				*(const char **)buf = s;
     61a:	9b03      	ldr	r3, [sp, #12]
     61c:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     61e:	1e53      	subs	r3, r2, #1
     620:	9307      	str	r3, [sp, #28]
     622:	2a00      	cmp	r2, #0
     624:	f340 80b7 	ble.w	796 <cbvprintf_package+0x1ce>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     628:	9b05      	ldr	r3, [sp, #20]
     62a:	f013 0202 	ands.w	r2, r3, #2
     62e:	d021      	beq.n	674 <cbvprintf_package+0xac>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     630:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     632:	1be1      	subs	r1, r4, r7
     634:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     636:	b11a      	cbz	r2, 640 <cbvprintf_package+0x78>
     638:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     63c:	f080 80bf 	bcs.w	7be <cbvprintf_package+0x1f6>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     640:	f1bb 0f0f 	cmp.w	fp, #15
     644:	f200 80ce 	bhi.w	7e4 <cbvprintf_package+0x21c>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
     648:	2f00      	cmp	r7, #0
     64a:	f000 80e2 	beq.w	812 <CONFIG_ISR_STACK_SIZE+0x12>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
     64e:	b2db      	uxtb	r3, r3
     650:	aa0c      	add	r2, sp, #48	; 0x30
     652:	445a      	add	r2, fp
     654:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
     658:	2800      	cmp	r0, #0
     65a:	f000 80d6 	beq.w	80a <CONFIG_ISR_STACK_SIZE+0xa>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     65e:	f063 037f 	orn	r3, r3, #127	; 0x7f
     662:	aa0c      	add	r2, sp, #48	; 0x30
     664:	445a      	add	r2, fp
     666:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
     66a:	9b04      	ldr	r3, [sp, #16]
     66c:	3301      	adds	r3, #1
     66e:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
     670:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
     674:	3404      	adds	r4, #4
     676:	e0f6      	b.n	866 <CONFIG_ISR_STACK_SIZE+0x66>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     678:	f001 0a07 	and.w	sl, r1, #7
     67c:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     67e:	f1ca 0a08 	rsb	sl, sl, #8
     682:	e7b7      	b.n	5f4 <cbvprintf_package+0x2c>
			if (*fmt == '%') {
     684:	2b25      	cmp	r3, #37	; 0x25
     686:	f040 80ed 	bne.w	864 <CONFIG_ISR_STACK_SIZE+0x64>
				parsing = true;
     68a:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
     68c:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
     690:	46c1      	mov	r9, r8
			continue;
     692:	e0e7      	b.n	864 <CONFIG_ISR_STACK_SIZE+0x64>
			align = VA_STACK_ALIGN(intmax_t);
     694:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
     698:	46c1      	mov	r9, r8
			continue;
     69a:	e0e3      	b.n	864 <CONFIG_ISR_STACK_SIZE+0x64>
			align = VA_STACK_ALIGN(size_t);
     69c:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
     6a0:	46c1      	mov	r9, r8
			continue;
     6a2:	e0df      	b.n	864 <CONFIG_ISR_STACK_SIZE+0x64>
			align = VA_STACK_ALIGN(ptrdiff_t);
     6a4:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
     6a8:	46c1      	mov	r9, r8
			continue;
     6aa:	e0db      	b.n	864 <CONFIG_ISR_STACK_SIZE+0x64>
			if (fmt[-1] == 'l') {
     6ac:	782a      	ldrb	r2, [r5, #0]
     6ae:	2a6c      	cmp	r2, #108	; 0x6c
     6b0:	d026      	beq.n	700 <cbvprintf_package+0x138>
			parsing = false;
     6b2:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
     6b4:	eb04 0208 	add.w	r2, r4, r8
     6b8:	3a01      	subs	r2, #1
     6ba:	f1c8 0100 	rsb	r1, r8, #0
     6be:	400a      	ands	r2, r1
     6c0:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     6c2:	b127      	cbz	r7, 6ce <cbvprintf_package+0x106>
     6c4:	1bd1      	subs	r1, r2, r7
     6c6:	4449      	add	r1, r9
     6c8:	4551      	cmp	r1, sl
     6ca:	f200 8226 	bhi.w	b1a <CONFIG_ISR_STACK_SIZE+0x31a>
		if (*fmt == 's') {
     6ce:	2b73      	cmp	r3, #115	; 0x73
     6d0:	d059      	beq.n	786 <cbvprintf_package+0x1be>
		} else if (size == sizeof(int)) {
     6d2:	f1b9 0f04 	cmp.w	r9, #4
     6d6:	f000 80a8 	beq.w	82a <CONFIG_ISR_STACK_SIZE+0x2a>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     6da:	f1b9 0f08 	cmp.w	r9, #8
     6de:	f040 80ac 	bne.w	83a <CONFIG_ISR_STACK_SIZE+0x3a>
			long long v = va_arg(ap, long long);
     6e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
     6e4:	3307      	adds	r3, #7
     6e6:	f023 0307 	bic.w	r3, r3, #7
     6ea:	f103 0108 	add.w	r1, r3, #8
     6ee:	9116      	str	r1, [sp, #88]	; 0x58
     6f0:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
     6f4:	b10f      	cbz	r7, 6fa <cbvprintf_package+0x132>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     6f6:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
     6fa:	f102 0408 	add.w	r4, r2, #8
     6fe:	e0b1      	b.n	864 <CONFIG_ISR_STACK_SIZE+0x64>
				if (fmt[-2] == 'l') {
     700:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
     704:	2a6c      	cmp	r2, #108	; 0x6c
     706:	d004      	beq.n	712 <cbvprintf_package+0x14a>
			parsing = false;
     708:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
     70a:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
     70e:	46c1      	mov	r9, r8
     710:	e7d0      	b.n	6b4 <cbvprintf_package+0xec>
			parsing = false;
     712:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
     714:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
     718:	46c1      	mov	r9, r8
     71a:	e7cb      	b.n	6b4 <cbvprintf_package+0xec>
			if (fmt[-1] == 'L') {
     71c:	782b      	ldrb	r3, [r5, #0]
     71e:	2b4c      	cmp	r3, #76	; 0x4c
     720:	d01c      	beq.n	75c <cbvprintf_package+0x194>
				v.d = va_arg(ap, double);
     722:	9b16      	ldr	r3, [sp, #88]	; 0x58
     724:	3307      	adds	r3, #7
     726:	f023 0307 	bic.w	r3, r3, #7
     72a:	f103 0208 	add.w	r2, r3, #8
     72e:	9216      	str	r2, [sp, #88]	; 0x58
     730:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
     734:	1de2      	adds	r2, r4, #7
     736:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
     73a:	b147      	cbz	r7, 74e <cbvprintf_package+0x186>
				if (BUF_OFFSET + size > len) {
     73c:	1bd3      	subs	r3, r2, r7
     73e:	3308      	adds	r3, #8
     740:	4553      	cmp	r3, sl
     742:	d815      	bhi.n	770 <cbvprintf_package+0x1a8>
				} else if (fmt[-1] == 'L') {
     744:	782b      	ldrb	r3, [r5, #0]
     746:	2b4c      	cmp	r3, #76	; 0x4c
     748:	d015      	beq.n	776 <cbvprintf_package+0x1ae>
					*(double *)buf = v.d;
     74a:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
     74e:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
     752:	2600      	movs	r6, #0
			continue;
     754:	f04f 0808 	mov.w	r8, #8
     758:	46c1      	mov	r9, r8
     75a:	e083      	b.n	864 <CONFIG_ISR_STACK_SIZE+0x64>
				v.ld = va_arg(ap, long double);
     75c:	9b16      	ldr	r3, [sp, #88]	; 0x58
     75e:	3307      	adds	r3, #7
     760:	f023 0307 	bic.w	r3, r3, #7
     764:	f103 0208 	add.w	r2, r3, #8
     768:	9216      	str	r2, [sp, #88]	; 0x58
     76a:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
     76e:	e7e1      	b.n	734 <cbvprintf_package+0x16c>
					return -ENOSPC;
     770:	f06f 001b 	mvn.w	r0, #27
     774:	e1c8      	b.n	b08 <CONFIG_ISR_STACK_SIZE+0x308>
					*(long double *)buf = v.ld;
     776:	e9c2 0100 	strd	r0, r1, [r2]
     77a:	e7e8      	b.n	74e <cbvprintf_package+0x186>
			parsing = false;
     77c:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
     77e:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
     782:	46c1      	mov	r9, r8
     784:	e796      	b.n	6b4 <cbvprintf_package+0xec>
			s = va_arg(ap, char *);
     786:	9b16      	ldr	r3, [sp, #88]	; 0x58
     788:	1d1a      	adds	r2, r3, #4
     78a:	9216      	str	r2, [sp, #88]	; 0x58
     78c:	681b      	ldr	r3, [r3, #0]
     78e:	9303      	str	r3, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     790:	9a07      	ldr	r2, [sp, #28]
	while (*++fmt != '\0') {
     792:	4665      	mov	r5, ip
     794:	e740      	b.n	618 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     796:	4bbb      	ldr	r3, [pc, #748]	; (a84 <CONFIG_ISR_STACK_SIZE+0x284>)
     798:	9a03      	ldr	r2, [sp, #12]
     79a:	429a      	cmp	r2, r3
     79c:	d304      	bcc.n	7a8 <cbvprintf_package+0x1e0>
     79e:	4bba      	ldr	r3, [pc, #744]	; (a88 <CONFIG_ISR_STACK_SIZE+0x288>)
     7a0:	429a      	cmp	r2, r3
     7a2:	d30a      	bcc.n	7ba <cbvprintf_package+0x1f2>
     7a4:	2300      	movs	r3, #0
     7a6:	e000      	b.n	7aa <cbvprintf_package+0x1e2>
     7a8:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     7aa:	2b00      	cmp	r3, #0
     7ac:	f47f af3c 	bne.w	628 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     7b0:	9b05      	ldr	r3, [sp, #20]
     7b2:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     7b6:	2000      	movs	r0, #0
     7b8:	e73b      	b.n	632 <cbvprintf_package+0x6a>
     7ba:	2301      	movs	r3, #1
     7bc:	e7f5      	b.n	7aa <cbvprintf_package+0x1e2>
					__ASSERT(false, "String with too many arguments");
     7be:	4cb3      	ldr	r4, [pc, #716]	; (a8c <CONFIG_ISR_STACK_SIZE+0x28c>)
     7c0:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
     7c4:	4622      	mov	r2, r4
     7c6:	49b2      	ldr	r1, [pc, #712]	; (a90 <CONFIG_ISR_STACK_SIZE+0x290>)
     7c8:	48b2      	ldr	r0, [pc, #712]	; (a94 <CONFIG_ISR_STACK_SIZE+0x294>)
     7ca:	f009 fb54 	bl	9e76 <assert_print>
     7ce:	48b2      	ldr	r0, [pc, #712]	; (a98 <CONFIG_ISR_STACK_SIZE+0x298>)
     7d0:	f009 fb51 	bl	9e76 <assert_print>
     7d4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
     7d8:	4620      	mov	r0, r4
     7da:	f009 fb45 	bl	9e68 <assert_post_action>
					return -EINVAL;
     7de:	f06f 0015 	mvn.w	r0, #21
     7e2:	e191      	b.n	b08 <CONFIG_ISR_STACK_SIZE+0x308>
					__ASSERT(false, "str_ptr_pos[] too small");
     7e4:	4ca9      	ldr	r4, [pc, #676]	; (a8c <CONFIG_ISR_STACK_SIZE+0x28c>)
     7e6:	f240 13f5 	movw	r3, #501	; 0x1f5
     7ea:	4622      	mov	r2, r4
     7ec:	49a8      	ldr	r1, [pc, #672]	; (a90 <CONFIG_ISR_STACK_SIZE+0x290>)
     7ee:	48a9      	ldr	r0, [pc, #676]	; (a94 <CONFIG_ISR_STACK_SIZE+0x294>)
     7f0:	f009 fb41 	bl	9e76 <assert_print>
     7f4:	48a9      	ldr	r0, [pc, #676]	; (a9c <CONFIG_ISR_STACK_SIZE+0x29c>)
     7f6:	f009 fb3e 	bl	9e76 <assert_print>
     7fa:	f240 11f5 	movw	r1, #501	; 0x1f5
     7fe:	4620      	mov	r0, r4
     800:	f009 fb32 	bl	9e68 <assert_post_action>
					return -EINVAL;
     804:	f06f 0015 	mvn.w	r0, #21
     808:	e17e      	b.n	b08 <CONFIG_ISR_STACK_SIZE+0x308>
						s_rw_cnt++;
     80a:	9b06      	ldr	r3, [sp, #24]
     80c:	3301      	adds	r3, #1
     80e:	9306      	str	r3, [sp, #24]
     810:	e72e      	b.n	670 <cbvprintf_package+0xa8>
				} else if (is_ro || rws_pos_en) {
     812:	b908      	cbnz	r0, 818 <CONFIG_ISR_STACK_SIZE+0x18>
     814:	9b01      	ldr	r3, [sp, #4]
     816:	b113      	cbz	r3, 81e <CONFIG_ISR_STACK_SIZE+0x1e>
					len += 1;
     818:	f10a 0a01 	add.w	sl, sl, #1
     81c:	e728      	b.n	670 <cbvprintf_package+0xa8>
					len += strlen(s) + 1 + 1;
     81e:	9803      	ldr	r0, [sp, #12]
     820:	f009 fca3 	bl	a16a <strlen>
     824:	1c83      	adds	r3, r0, #2
     826:	449a      	add	sl, r3
     828:	e722      	b.n	670 <cbvprintf_package+0xa8>
			int v = va_arg(ap, int);
     82a:	9b16      	ldr	r3, [sp, #88]	; 0x58
     82c:	1d19      	adds	r1, r3, #4
     82e:	9116      	str	r1, [sp, #88]	; 0x58
     830:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
     832:	b107      	cbz	r7, 836 <CONFIG_ISR_STACK_SIZE+0x36>
				*(int *)buf = v;
     834:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
     836:	1d14      	adds	r4, r2, #4
     838:	e014      	b.n	864 <CONFIG_ISR_STACK_SIZE+0x64>
		} else {
			__ASSERT(false, "unexpected size %u", size);
     83a:	4c94      	ldr	r4, [pc, #592]	; (a8c <CONFIG_ISR_STACK_SIZE+0x28c>)
     83c:	f240 2331 	movw	r3, #561	; 0x231
     840:	4622      	mov	r2, r4
     842:	4993      	ldr	r1, [pc, #588]	; (a90 <CONFIG_ISR_STACK_SIZE+0x290>)
     844:	4893      	ldr	r0, [pc, #588]	; (a94 <CONFIG_ISR_STACK_SIZE+0x294>)
     846:	f009 fb16 	bl	9e76 <assert_print>
     84a:	4649      	mov	r1, r9
     84c:	4894      	ldr	r0, [pc, #592]	; (aa0 <CONFIG_ISR_STACK_SIZE+0x2a0>)
     84e:	f009 fb12 	bl	9e76 <assert_print>
     852:	f240 2131 	movw	r1, #561	; 0x231
     856:	4620      	mov	r0, r4
     858:	f009 fb06 	bl	9e68 <assert_post_action>
			return -EINVAL;
     85c:	f06f 0015 	mvn.w	r0, #21
     860:	e152      	b.n	b08 <CONFIG_ISR_STACK_SIZE+0x308>
		switch (*fmt) {
     862:	2600      	movs	r6, #0
     864:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
     866:	f105 0c01 	add.w	ip, r5, #1
     86a:	786b      	ldrb	r3, [r5, #1]
     86c:	2b00      	cmp	r3, #0
     86e:	f000 80c1 	beq.w	9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>
		if (!parsing) {
     872:	2e00      	cmp	r6, #0
     874:	f43f af06 	beq.w	684 <cbvprintf_package+0xbc>
		switch (*fmt) {
     878:	f1a3 0120 	sub.w	r1, r3, #32
     87c:	295a      	cmp	r1, #90	; 0x5a
     87e:	d8f0      	bhi.n	862 <CONFIG_ISR_STACK_SIZE+0x62>
     880:	a201      	add	r2, pc, #4	; (adr r2, 888 <CONFIG_ISR_STACK_SIZE+0x88>)
     882:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
     886:	bf00      	nop
     888:	00000865 	.word	0x00000865
     88c:	00000863 	.word	0x00000863
     890:	00000863 	.word	0x00000863
     894:	00000865 	.word	0x00000865
     898:	00000863 	.word	0x00000863
     89c:	00000863 	.word	0x00000863
     8a0:	00000863 	.word	0x00000863
     8a4:	00000863 	.word	0x00000863
     8a8:	00000863 	.word	0x00000863
     8ac:	00000863 	.word	0x00000863
     8b0:	000006b5 	.word	0x000006b5
     8b4:	00000865 	.word	0x00000865
     8b8:	00000863 	.word	0x00000863
     8bc:	00000865 	.word	0x00000865
     8c0:	00000865 	.word	0x00000865
     8c4:	00000863 	.word	0x00000863
     8c8:	00000865 	.word	0x00000865
     8cc:	00000865 	.word	0x00000865
     8d0:	00000865 	.word	0x00000865
     8d4:	00000865 	.word	0x00000865
     8d8:	00000865 	.word	0x00000865
     8dc:	00000865 	.word	0x00000865
     8e0:	00000865 	.word	0x00000865
     8e4:	00000865 	.word	0x00000865
     8e8:	00000865 	.word	0x00000865
     8ec:	00000865 	.word	0x00000865
     8f0:	00000863 	.word	0x00000863
     8f4:	00000863 	.word	0x00000863
     8f8:	00000863 	.word	0x00000863
     8fc:	00000863 	.word	0x00000863
     900:	00000863 	.word	0x00000863
     904:	00000863 	.word	0x00000863
     908:	00000863 	.word	0x00000863
     90c:	0000071d 	.word	0x0000071d
     910:	00000863 	.word	0x00000863
     914:	00000863 	.word	0x00000863
     918:	00000863 	.word	0x00000863
     91c:	0000071d 	.word	0x0000071d
     920:	0000071d 	.word	0x0000071d
     924:	0000071d 	.word	0x0000071d
     928:	00000863 	.word	0x00000863
     92c:	00000863 	.word	0x00000863
     930:	00000863 	.word	0x00000863
     934:	00000863 	.word	0x00000863
     938:	00000865 	.word	0x00000865
     93c:	00000863 	.word	0x00000863
     940:	00000863 	.word	0x00000863
     944:	00000863 	.word	0x00000863
     948:	00000863 	.word	0x00000863
     94c:	00000863 	.word	0x00000863
     950:	00000863 	.word	0x00000863
     954:	00000863 	.word	0x00000863
     958:	00000863 	.word	0x00000863
     95c:	00000863 	.word	0x00000863
     960:	00000863 	.word	0x00000863
     964:	00000863 	.word	0x00000863
     968:	000006ad 	.word	0x000006ad
     96c:	00000863 	.word	0x00000863
     970:	00000863 	.word	0x00000863
     974:	00000863 	.word	0x00000863
     978:	00000863 	.word	0x00000863
     97c:	00000863 	.word	0x00000863
     980:	00000863 	.word	0x00000863
     984:	00000863 	.word	0x00000863
     988:	00000863 	.word	0x00000863
     98c:	0000071d 	.word	0x0000071d
     990:	00000863 	.word	0x00000863
     994:	000006ad 	.word	0x000006ad
     998:	000006ad 	.word	0x000006ad
     99c:	0000071d 	.word	0x0000071d
     9a0:	0000071d 	.word	0x0000071d
     9a4:	0000071d 	.word	0x0000071d
     9a8:	00000865 	.word	0x00000865
     9ac:	000006ad 	.word	0x000006ad
     9b0:	00000695 	.word	0x00000695
     9b4:	00000863 	.word	0x00000863
     9b8:	00000865 	.word	0x00000865
     9bc:	00000863 	.word	0x00000863
     9c0:	0000077d 	.word	0x0000077d
     9c4:	000006ad 	.word	0x000006ad
     9c8:	0000077d 	.word	0x0000077d
     9cc:	00000863 	.word	0x00000863
     9d0:	00000863 	.word	0x00000863
     9d4:	0000077d 	.word	0x0000077d
     9d8:	000006a5 	.word	0x000006a5
     9dc:	000006ad 	.word	0x000006ad
     9e0:	00000863 	.word	0x00000863
     9e4:	00000863 	.word	0x00000863
     9e8:	000006ad 	.word	0x000006ad
     9ec:	00000863 	.word	0x00000863
     9f0:	0000069d 	.word	0x0000069d
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     9f4:	1be3      	subs	r3, r4, r7
     9f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     9fa:	d211      	bcs.n	a20 <CONFIG_ISR_STACK_SIZE+0x220>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     9fc:	b31f      	cbz	r7, a46 <CONFIG_ISR_STACK_SIZE+0x246>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     9fe:	2200      	movs	r2, #0
     a00:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	buf0[0] = BUF_OFFSET / sizeof(int);
     a02:	089b      	lsrs	r3, r3, #2
     a04:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
     a06:	9b01      	ldr	r3, [sp, #4]
     a08:	b30b      	cbz	r3, a4e <CONFIG_ISR_STACK_SIZE+0x24e>
		/* Strings are appended, update location counter. */
		buf0[1] = 0;
		buf0[3] = s_rw_cnt;
     a0a:	9b06      	ldr	r3, [sp, #24]
     a0c:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		buf0[1] = s_rw_cnt;
		buf0[3] = 0;
	}

	buf0[2] = s_ro_cnt;
     a0e:	9b04      	ldr	r3, [sp, #16]
     a10:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     a12:	bbab      	cbnz	r3, a80 <CONFIG_ISR_STACK_SIZE+0x280>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
     a14:	9d02      	ldr	r5, [sp, #8]
     a16:	f8dd 9010 	ldr.w	r9, [sp, #16]
     a1a:	f8dd 800c 	ldr.w	r8, [sp, #12]
     a1e:	e058      	b.n	ad2 <CONFIG_ISR_STACK_SIZE+0x2d2>
		__ASSERT(false, "too many format args");
     a20:	4c1a      	ldr	r4, [pc, #104]	; (a8c <CONFIG_ISR_STACK_SIZE+0x28c>)
     a22:	f240 233d 	movw	r3, #573	; 0x23d
     a26:	4622      	mov	r2, r4
     a28:	4919      	ldr	r1, [pc, #100]	; (a90 <CONFIG_ISR_STACK_SIZE+0x290>)
     a2a:	481a      	ldr	r0, [pc, #104]	; (a94 <CONFIG_ISR_STACK_SIZE+0x294>)
     a2c:	f009 fa23 	bl	9e76 <assert_print>
     a30:	481c      	ldr	r0, [pc, #112]	; (aa4 <CONFIG_ISR_STACK_SIZE+0x2a4>)
     a32:	f009 fa20 	bl	9e76 <assert_print>
     a36:	f240 213d 	movw	r1, #573	; 0x23d
     a3a:	4620      	mov	r0, r4
     a3c:	f009 fa14 	bl	9e68 <assert_post_action>
		return -EINVAL;
     a40:	f06f 0015 	mvn.w	r0, #21
     a44:	e060      	b.n	b08 <CONFIG_ISR_STACK_SIZE+0x308>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     a46:	4453      	add	r3, sl
     a48:	f1a3 0008 	sub.w	r0, r3, #8
     a4c:	e05c      	b.n	b08 <CONFIG_ISR_STACK_SIZE+0x308>
		buf0[1] = s_rw_cnt;
     a4e:	9b06      	ldr	r3, [sp, #24]
     a50:	707b      	strb	r3, [r7, #1]
		buf0[3] = 0;
     a52:	e7dc      	b.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
			*buf++ = pos;
     a54:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
     a58:	3301      	adds	r3, #1
     a5a:	459b      	cmp	fp, r3
     a5c:	d9da      	bls.n	a14 <CONFIG_ISR_STACK_SIZE+0x214>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     a5e:	aa0c      	add	r2, sp, #48	; 0x30
     a60:	441a      	add	r2, r3
     a62:	f812 1c10 	ldrb.w	r1, [r2, #-16]
     a66:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
     a6a:	2a00      	cmp	r2, #0
     a6c:	daf4      	bge.n	a58 <CONFIG_ISR_STACK_SIZE+0x258>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     a6e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     a72:	1be2      	subs	r2, r4, r7
     a74:	3201      	adds	r2, #1
     a76:	4552      	cmp	r2, sl
     a78:	d9ec      	bls.n	a54 <CONFIG_ISR_STACK_SIZE+0x254>
				return -ENOSPC;
     a7a:	f06f 001b 	mvn.w	r0, #27
     a7e:	e043      	b.n	b08 <CONFIG_ISR_STACK_SIZE+0x308>
		for (i = 0; i < s_idx; i++) {
     a80:	9b02      	ldr	r3, [sp, #8]
     a82:	e7ea      	b.n	a5a <CONFIG_ISR_STACK_SIZE+0x25a>
     a84:	0000ad1c 	.word	0x0000ad1c
     a88:	0000ccf4 	.word	0x0000ccf4
     a8c:	0000b138 	.word	0x0000b138
     a90:	0000b83c 	.word	0x0000b83c
     a94:	0000b180 	.word	0x0000b180
     a98:	0000b1a0 	.word	0x0000b1a0
     a9c:	0000b1c4 	.word	0x0000b1c4
     aa0:	0000b1e0 	.word	0x0000b1e0
     aa4:	0000b1f8 	.word	0x0000b1f8
		if (rws_pos_en) {
     aa8:	9b01      	ldr	r3, [sp, #4]
     aaa:	b1f3      	cbz	r3, aea <CONFIG_ISR_STACK_SIZE+0x2ea>
			size = 0;
     aac:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     aae:	1be3      	subs	r3, r4, r7
     ab0:	4433      	add	r3, r6
     ab2:	3301      	adds	r3, #1
     ab4:	4553      	cmp	r3, sl
     ab6:	d833      	bhi.n	b20 <CONFIG_ISR_STACK_SIZE+0x320>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
     ab8:	ab0c      	add	r3, sp, #48	; 0x30
     aba:	442b      	add	r3, r5
     abc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     ac0:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
     ac4:	4632      	mov	r2, r6
     ac6:	4641      	mov	r1, r8
     ac8:	4620      	mov	r0, r4
     aca:	f009 fb61 	bl	a190 <memcpy>
		buf += size;
     ace:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
     ad0:	3501      	adds	r5, #1
     ad2:	45ab      	cmp	fp, r5
     ad4:	d917      	bls.n	b06 <CONFIG_ISR_STACK_SIZE+0x306>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     ad6:	f1b9 0f00 	cmp.w	r9, #0
     ada:	d0e5      	beq.n	aa8 <CONFIG_ISR_STACK_SIZE+0x2a8>
     adc:	ab0c      	add	r3, sp, #48	; 0x30
     ade:	442b      	add	r3, r5
     ae0:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
     ae4:	2b00      	cmp	r3, #0
     ae6:	dadf      	bge.n	aa8 <CONFIG_ISR_STACK_SIZE+0x2a8>
     ae8:	e7f2      	b.n	ad0 <CONFIG_ISR_STACK_SIZE+0x2d0>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     aea:	ab0c      	add	r3, sp, #48	; 0x30
     aec:	442b      	add	r3, r5
     aee:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     af2:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     af6:	2200      	movs	r2, #0
     af8:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
     afc:	4640      	mov	r0, r8
     afe:	f009 fb34 	bl	a16a <strlen>
     b02:	1c46      	adds	r6, r0, #1
     b04:	e7d3      	b.n	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     b06:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     b08:	b00d      	add	sp, #52	; 0x34
     b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
     b0e:	f06f 000d 	mvn.w	r0, #13
     b12:	e7f9      	b.n	b08 <CONFIG_ISR_STACK_SIZE+0x308>
		return -ENOSPC;
     b14:	f06f 001b 	mvn.w	r0, #27
     b18:	e7f6      	b.n	b08 <CONFIG_ISR_STACK_SIZE+0x308>
			return -ENOSPC;
     b1a:	f06f 001b 	mvn.w	r0, #27
     b1e:	e7f3      	b.n	b08 <CONFIG_ISR_STACK_SIZE+0x308>
			return -ENOSPC;
     b20:	f06f 001b 	mvn.w	r0, #27
     b24:	e7f0      	b.n	b08 <CONFIG_ISR_STACK_SIZE+0x308>
     b26:	bf00      	nop

00000b28 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     b28:	b538      	push	{r3, r4, r5, lr}
     b2a:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     b2c:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
     b2e:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     b32:	6081      	str	r1, [r0, #8]
	switch (method) {
     b34:	2b02      	cmp	r3, #2
     b36:	d903      	bls.n	b40 <sys_notify_finalize+0x18>
     b38:	2b03      	cmp	r3, #3
     b3a:	d102      	bne.n	b42 <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     b3c:	6800      	ldr	r0, [r0, #0]
		break;
     b3e:	e00e      	b.n	b5e <sys_notify_finalize+0x36>
	switch (method) {
     b40:	b963      	cbnz	r3, b5c <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
     b42:	4d08      	ldr	r5, [pc, #32]	; (b64 <sys_notify_finalize+0x3c>)
     b44:	2345      	movs	r3, #69	; 0x45
     b46:	462a      	mov	r2, r5
     b48:	4907      	ldr	r1, [pc, #28]	; (b68 <sys_notify_finalize+0x40>)
     b4a:	4808      	ldr	r0, [pc, #32]	; (b6c <sys_notify_finalize+0x44>)
     b4c:	f009 f993 	bl	9e76 <assert_print>
     b50:	2145      	movs	r1, #69	; 0x45
     b52:	4628      	mov	r0, r5
     b54:	f009 f988 	bl	9e68 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
     b58:	2000      	movs	r0, #0
     b5a:	e000      	b.n	b5e <sys_notify_finalize+0x36>
	switch (method) {
     b5c:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     b5e:	2300      	movs	r3, #0
     b60:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     b62:	bd38      	pop	{r3, r4, r5, pc}
     b64:	0000b210 	.word	0x0000b210
     b68:	0000b83c 	.word	0x0000b83c
     b6c:	0000b180 	.word	0x0000b180

00000b70 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     b70:	4b01      	ldr	r3, [pc, #4]	; (b78 <__printk_hook_install+0x8>)
     b72:	6018      	str	r0, [r3, #0]
}
     b74:	4770      	bx	lr
     b76:	bf00      	nop
     b78:	20004000 	.word	0x20004000

00000b7c <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
     b7c:	b538      	push	{r3, r4, r5, lr}
     b7e:	4604      	mov	r4, r0
     b80:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     b82:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
     b84:	2a00      	cmp	r2, #0
     b86:	db14      	blt.n	bb2 <process_complete+0x36>
     b88:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
     b8c:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     b8e:	2a01      	cmp	r2, #1
     b90:	d91b      	bls.n	bca <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
     b92:	2b04      	cmp	r3, #4
     b94:	d050      	beq.n	c38 <process_complete+0xbc>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
     b96:	4c2f      	ldr	r4, [pc, #188]	; (c54 <process_complete+0xd8>)
     b98:	f240 131b 	movw	r3, #283	; 0x11b
     b9c:	4622      	mov	r2, r4
     b9e:	492e      	ldr	r1, [pc, #184]	; (c58 <process_complete+0xdc>)
     ba0:	482e      	ldr	r0, [pc, #184]	; (c5c <process_complete+0xe0>)
     ba2:	f009 f968 	bl	9e76 <assert_print>
     ba6:	f240 111b 	movw	r1, #283	; 0x11b
     baa:	4620      	mov	r0, r4
     bac:	f009 f95c 	bl	9e68 <assert_post_action>
	}
}
     bb0:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
     bb2:	e9d0 0100 	ldrd	r0, r1, [r0]
     bb6:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     bba:	2300      	movs	r3, #0
     bbc:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
     bbe:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
     bc0:	2101      	movs	r1, #1
     bc2:	4620      	mov	r0, r4
     bc4:	f008 ffe0 	bl	9b88 <set_state>
     bc8:	e7f2      	b.n	bb0 <process_complete+0x34>
		*clients = mgr->clients;
     bca:	e9d0 0100 	ldrd	r0, r1, [r0]
     bce:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
     bd2:	2200      	movs	r2, #0
     bd4:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
     bd6:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
     bd8:	2b06      	cmp	r3, #6
     bda:	d00f      	beq.n	bfc <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     bdc:	2b05      	cmp	r3, #5
     bde:	d11d      	bne.n	c1c <process_complete+0xa0>
			set_state(mgr, ONOFF_STATE_OFF);
     be0:	2100      	movs	r1, #0
     be2:	4620      	mov	r0, r4
     be4:	f008 ffd0 	bl	9b88 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     be8:	4620      	mov	r0, r4
     bea:	f008 fff4 	bl	9bd6 <process_recheck>
     bee:	2800      	cmp	r0, #0
     bf0:	d0de      	beq.n	bb0 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     bf2:	8ba3      	ldrh	r3, [r4, #28]
     bf4:	f043 0320 	orr.w	r3, r3, #32
     bf8:	83a3      	strh	r3, [r4, #28]
     bfa:	e7d9      	b.n	bb0 <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     bfc:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     c00:	b13b      	cbz	r3, c12 <process_complete+0x96>
				mgr->refs += 1U;
     c02:	8be2      	ldrh	r2, [r4, #30]
     c04:	3201      	adds	r2, #1
     c06:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     c08:	2b00      	cmp	r3, #0
     c0a:	d0f9      	beq.n	c00 <process_complete+0x84>
	return node->next;
     c0c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     c0e:	2b00      	cmp	r3, #0
     c10:	d1f6      	bne.n	c00 <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
     c12:	2102      	movs	r1, #2
     c14:	4620      	mov	r0, r4
     c16:	f008 ffb7 	bl	9b88 <set_state>
     c1a:	e7e5      	b.n	be8 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     c1c:	4d0d      	ldr	r5, [pc, #52]	; (c54 <process_complete+0xd8>)
     c1e:	f240 1309 	movw	r3, #265	; 0x109
     c22:	462a      	mov	r2, r5
     c24:	490e      	ldr	r1, [pc, #56]	; (c60 <process_complete+0xe4>)
     c26:	480d      	ldr	r0, [pc, #52]	; (c5c <process_complete+0xe0>)
     c28:	f009 f925 	bl	9e76 <assert_print>
     c2c:	f240 1109 	movw	r1, #265	; 0x109
     c30:	4628      	mov	r0, r5
     c32:	f009 f919 	bl	9e68 <assert_post_action>
     c36:	e7d3      	b.n	be0 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
     c38:	2100      	movs	r1, #0
     c3a:	f008 ffa5 	bl	9b88 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     c3e:	4620      	mov	r0, r4
     c40:	f008 ffc9 	bl	9bd6 <process_recheck>
     c44:	2800      	cmp	r0, #0
     c46:	d0b3      	beq.n	bb0 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     c48:	8ba3      	ldrh	r3, [r4, #28]
     c4a:	f043 0320 	orr.w	r3, r3, #32
     c4e:	83a3      	strh	r3, [r4, #28]
     c50:	e7ae      	b.n	bb0 <process_complete+0x34>
     c52:	bf00      	nop
     c54:	0000b234 	.word	0x0000b234
     c58:	0000b83c 	.word	0x0000b83c
     c5c:	0000b180 	.word	0x0000b180
     c60:	0000b258 	.word	0x0000b258

00000c64 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c68:	b083      	sub	sp, #12
     c6a:	4604      	mov	r4, r0
     c6c:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c6e:	8b83      	ldrh	r3, [r0, #28]
     c70:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
     c74:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
     c78:	460d      	mov	r5, r1
     c7a:	b131      	cbz	r1, c8a <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     c7c:	f1b8 0f00 	cmp.w	r8, #0
     c80:	d112      	bne.n	ca8 <process_event+0x44>
	list->head = NULL;
     c82:	2300      	movs	r3, #0
     c84:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     c86:	9301      	str	r3, [sp, #4]
}
     c88:	e0aa      	b.n	de0 <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
     c8a:	f8df 92e0 	ldr.w	r9, [pc, #736]	; f6c <process_event+0x308>
     c8e:	f240 1333 	movw	r3, #307	; 0x133
     c92:	464a      	mov	r2, r9
     c94:	49b6      	ldr	r1, [pc, #728]	; (f70 <process_event+0x30c>)
     c96:	48b7      	ldr	r0, [pc, #732]	; (f74 <process_event+0x310>)
     c98:	f009 f8ed 	bl	9e76 <assert_print>
     c9c:	f240 1133 	movw	r1, #307	; 0x133
     ca0:	4648      	mov	r0, r9
     ca2:	f009 f8e1 	bl	9e68 <assert_post_action>
     ca6:	e7e9      	b.n	c7c <process_event+0x18>
		if (evt == EVT_COMPLETE) {
     ca8:	2d01      	cmp	r5, #1
     caa:	d013      	beq.n	cd4 <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     cac:	2d02      	cmp	r5, #2
     cae:	d116      	bne.n	cde <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
     cb0:	8ba3      	ldrh	r3, [r4, #28]
     cb2:	f043 0320 	orr.w	r3, r3, #32
     cb6:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     cb8:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     cba:	4620      	mov	r0, r4
     cbc:	f006 fa34 	bl	7128 <z_spin_unlock_valid>
     cc0:	2800      	cmp	r0, #0
     cc2:	f000 819c 	beq.w	ffe <process_event+0x39a>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     cc6:	f386 8811 	msr	BASEPRI, r6
     cca:	f3bf 8f6f 	isb	sy
}
     cce:	b003      	add	sp, #12
     cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     cd4:	8ba3      	ldrh	r3, [r4, #28]
     cd6:	f043 0310 	orr.w	r3, r3, #16
     cda:	83a3      	strh	r3, [r4, #28]
     cdc:	e7ec      	b.n	cb8 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     cde:	4da3      	ldr	r5, [pc, #652]	; (f6c <process_event+0x308>)
     ce0:	f44f 739e 	mov.w	r3, #316	; 0x13c
     ce4:	462a      	mov	r2, r5
     ce6:	49a4      	ldr	r1, [pc, #656]	; (f78 <process_event+0x314>)
     ce8:	48a2      	ldr	r0, [pc, #648]	; (f74 <process_event+0x310>)
     cea:	f009 f8c4 	bl	9e76 <assert_print>
     cee:	f44f 719e 	mov.w	r1, #316	; 0x13c
     cf2:	4628      	mov	r0, r5
     cf4:	f009 f8b8 	bl	9e68 <assert_post_action>
     cf8:	e7da      	b.n	cb0 <process_event+0x4c>
			evt = process_recheck(mgr);
     cfa:	4620      	mov	r0, r4
     cfc:	f008 ff6b 	bl	9bd6 <process_recheck>
     d00:	4605      	mov	r5, r0
     d02:	e06f      	b.n	de4 <process_event+0x180>
			res = mgr->last_res;
     d04:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
     d08:	464a      	mov	r2, r9
     d0a:	4669      	mov	r1, sp
     d0c:	4620      	mov	r0, r4
     d0e:	f7ff ff35 	bl	b7c <process_complete>
		onoff_transition_fn transit = NULL;
     d12:	2500      	movs	r5, #0
     d14:	e011      	b.n	d3a <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     d16:	2f00      	cmp	r7, #0
     d18:	f040 8081 	bne.w	e1e <process_event+0x1ba>
	return list->head;
     d1c:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     d1e:	2b00      	cmp	r3, #0
     d20:	f000 808b 	beq.w	e3a <process_event+0x1d6>
			transit = mgr->transitions->start;
     d24:	6923      	ldr	r3, [r4, #16]
     d26:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     d28:	2d00      	cmp	r5, #0
     d2a:	f000 8094 	beq.w	e56 <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
     d2e:	2106      	movs	r1, #6
     d30:	4620      	mov	r0, r4
     d32:	f008 ff29 	bl	9b88 <set_state>
		res = 0;
     d36:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d3a:	8ba3      	ldrh	r3, [r4, #28]
     d3c:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     d40:	45b8      	cmp	r8, r7
     d42:	f000 810b 	beq.w	f5c <process_event+0x2f8>
     d46:	68a2      	ldr	r2, [r4, #8]
     d48:	2a00      	cmp	r2, #0
     d4a:	f000 8109 	beq.w	f60 <process_event+0x2fc>
     d4e:	2201      	movs	r2, #1
		if (do_monitors
     d50:	4617      	mov	r7, r2
     d52:	b91a      	cbnz	r2, d5c <process_event+0xf8>
     d54:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     d56:	2a00      	cmp	r2, #0
     d58:	f000 8104 	beq.w	f64 <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     d5c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     d60:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
     d62:	f104 0a14 	add.w	sl, r4, #20
     d66:	4650      	mov	r0, sl
     d68:	f006 f9de 	bl	7128 <z_spin_unlock_valid>
     d6c:	2800      	cmp	r0, #0
     d6e:	f000 8115 	beq.w	f9c <process_event+0x338>
     d72:	f386 8811 	msr	BASEPRI, r6
     d76:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     d7a:	2f00      	cmp	r7, #0
     d7c:	f040 811f 	bne.w	fbe <process_event+0x35a>
     d80:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     d82:	b12b      	cbz	r3, d90 <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
     d84:	464b      	mov	r3, r9
     d86:	4642      	mov	r2, r8
     d88:	4669      	mov	r1, sp
     d8a:	4620      	mov	r0, r4
     d8c:	f008 ff65 	bl	9c5a <notify_all>
			if (transit != NULL) {
     d90:	b115      	cbz	r5, d98 <process_event+0x134>
				transit(mgr, transition_complete);
     d92:	497a      	ldr	r1, [pc, #488]	; (f7c <process_event+0x318>)
     d94:	4620      	mov	r0, r4
     d96:	47a8      	blx	r5
	__asm__ volatile(
     d98:	f04f 0320 	mov.w	r3, #32
     d9c:	f3ef 8611 	mrs	r6, BASEPRI
     da0:	f383 8812 	msr	BASEPRI_MAX, r3
     da4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     da8:	4650      	mov	r0, sl
     daa:	f006 f9ad 	bl	7108 <z_spin_lock_valid>
     dae:	2800      	cmp	r0, #0
     db0:	f000 810b 	beq.w	fca <process_event+0x366>
	z_spin_lock_set_owner(l);
     db4:	4650      	mov	r0, sl
     db6:	f006 f9c7 	bl	7148 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     dba:	8ba3      	ldrh	r3, [r4, #28]
     dbc:	f023 0308 	bic.w	r3, r3, #8
     dc0:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     dc2:	8ba3      	ldrh	r3, [r4, #28]
     dc4:	f013 0f10 	tst.w	r3, #16
     dc8:	f000 810f 	beq.w	fea <process_event+0x386>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     dcc:	f023 0310 	bic.w	r3, r3, #16
     dd0:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
     dd2:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     dd4:	8ba7      	ldrh	r7, [r4, #28]
     dd6:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
     dda:	2d00      	cmp	r5, #0
     ddc:	f43f af6c 	beq.w	cb8 <process_event+0x54>
		if (evt == EVT_RECHECK) {
     de0:	2d02      	cmp	r5, #2
     de2:	d08a      	beq.n	cfa <process_event+0x96>
		if (evt == EVT_NOP) {
     de4:	2d00      	cmp	r5, #0
     de6:	f43f af67 	beq.w	cb8 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
     dea:	2d01      	cmp	r5, #1
     dec:	d08a      	beq.n	d04 <process_event+0xa0>
		} else if (evt == EVT_START) {
     dee:	2d03      	cmp	r5, #3
     df0:	d091      	beq.n	d16 <process_event+0xb2>
		} else if (evt == EVT_STOP) {
     df2:	2d04      	cmp	r5, #4
     df4:	d03e      	beq.n	e74 <process_event+0x210>
		} else if (evt == EVT_RESET) {
     df6:	2d05      	cmp	r5, #5
     df8:	f040 80a0 	bne.w	f3c <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     dfc:	2f01      	cmp	r7, #1
     dfe:	d172      	bne.n	ee6 <process_event+0x282>
     e00:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     e02:	2b00      	cmp	r3, #0
     e04:	d07d      	beq.n	f02 <process_event+0x29e>
			transit = mgr->transitions->reset;
     e06:	6923      	ldr	r3, [r4, #16]
     e08:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     e0a:	2d00      	cmp	r5, #0
     e0c:	f000 8087 	beq.w	f1e <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
     e10:	2105      	movs	r1, #5
     e12:	4620      	mov	r0, r4
     e14:	f008 feb8 	bl	9b88 <set_state>
		res = 0;
     e18:	f04f 0900 	mov.w	r9, #0
     e1c:	e78d      	b.n	d3a <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     e1e:	4d53      	ldr	r5, [pc, #332]	; (f6c <process_event+0x308>)
     e20:	f44f 73ab 	mov.w	r3, #342	; 0x156
     e24:	462a      	mov	r2, r5
     e26:	4956      	ldr	r1, [pc, #344]	; (f80 <process_event+0x31c>)
     e28:	4852      	ldr	r0, [pc, #328]	; (f74 <process_event+0x310>)
     e2a:	f009 f824 	bl	9e76 <assert_print>
     e2e:	f44f 71ab 	mov.w	r1, #342	; 0x156
     e32:	4628      	mov	r0, r5
     e34:	f009 f818 	bl	9e68 <assert_post_action>
     e38:	e770      	b.n	d1c <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     e3a:	4d4c      	ldr	r5, [pc, #304]	; (f6c <process_event+0x308>)
     e3c:	f240 1357 	movw	r3, #343	; 0x157
     e40:	462a      	mov	r2, r5
     e42:	4950      	ldr	r1, [pc, #320]	; (f84 <process_event+0x320>)
     e44:	484b      	ldr	r0, [pc, #300]	; (f74 <process_event+0x310>)
     e46:	f009 f816 	bl	9e76 <assert_print>
     e4a:	f240 1157 	movw	r1, #343	; 0x157
     e4e:	4628      	mov	r0, r5
     e50:	f009 f80a 	bl	9e68 <assert_post_action>
     e54:	e766      	b.n	d24 <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
     e56:	f8df 8114 	ldr.w	r8, [pc, #276]	; f6c <process_event+0x308>
     e5a:	f44f 73ad 	mov.w	r3, #346	; 0x15a
     e5e:	4642      	mov	r2, r8
     e60:	4949      	ldr	r1, [pc, #292]	; (f88 <process_event+0x324>)
     e62:	4844      	ldr	r0, [pc, #272]	; (f74 <process_event+0x310>)
     e64:	f009 f807 	bl	9e76 <assert_print>
     e68:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     e6c:	4640      	mov	r0, r8
     e6e:	f008 fffb 	bl	9e68 <assert_post_action>
     e72:	e75c      	b.n	d2e <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     e74:	2f02      	cmp	r7, #2
     e76:	d10b      	bne.n	e90 <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
     e78:	8be3      	ldrh	r3, [r4, #30]
     e7a:	b9bb      	cbnz	r3, eac <process_event+0x248>
			transit = mgr->transitions->stop;
     e7c:	6923      	ldr	r3, [r4, #16]
     e7e:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     e80:	b315      	cbz	r5, ec8 <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
     e82:	2104      	movs	r1, #4
     e84:	4620      	mov	r0, r4
     e86:	f008 fe7f 	bl	9b88 <set_state>
		res = 0;
     e8a:	f04f 0900 	mov.w	r9, #0
     e8e:	e754      	b.n	d3a <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     e90:	4d36      	ldr	r5, [pc, #216]	; (f6c <process_event+0x308>)
     e92:	f240 135d 	movw	r3, #349	; 0x15d
     e96:	462a      	mov	r2, r5
     e98:	493c      	ldr	r1, [pc, #240]	; (f8c <process_event+0x328>)
     e9a:	4836      	ldr	r0, [pc, #216]	; (f74 <process_event+0x310>)
     e9c:	f008 ffeb 	bl	9e76 <assert_print>
     ea0:	f240 115d 	movw	r1, #349	; 0x15d
     ea4:	4628      	mov	r0, r5
     ea6:	f008 ffdf 	bl	9e68 <assert_post_action>
     eaa:	e7e5      	b.n	e78 <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
     eac:	4d2f      	ldr	r5, [pc, #188]	; (f6c <process_event+0x308>)
     eae:	f44f 73af 	mov.w	r3, #350	; 0x15e
     eb2:	462a      	mov	r2, r5
     eb4:	4936      	ldr	r1, [pc, #216]	; (f90 <process_event+0x32c>)
     eb6:	482f      	ldr	r0, [pc, #188]	; (f74 <process_event+0x310>)
     eb8:	f008 ffdd 	bl	9e76 <assert_print>
     ebc:	f44f 71af 	mov.w	r1, #350	; 0x15e
     ec0:	4628      	mov	r0, r5
     ec2:	f008 ffd1 	bl	9e68 <assert_post_action>
     ec6:	e7d9      	b.n	e7c <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
     ec8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; f6c <process_event+0x308>
     ecc:	f240 1361 	movw	r3, #353	; 0x161
     ed0:	4642      	mov	r2, r8
     ed2:	492d      	ldr	r1, [pc, #180]	; (f88 <process_event+0x324>)
     ed4:	4827      	ldr	r0, [pc, #156]	; (f74 <process_event+0x310>)
     ed6:	f008 ffce 	bl	9e76 <assert_print>
     eda:	f240 1161 	movw	r1, #353	; 0x161
     ede:	4640      	mov	r0, r8
     ee0:	f008 ffc2 	bl	9e68 <assert_post_action>
     ee4:	e7cd      	b.n	e82 <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     ee6:	4d21      	ldr	r5, [pc, #132]	; (f6c <process_event+0x308>)
     ee8:	f44f 73b2 	mov.w	r3, #356	; 0x164
     eec:	462a      	mov	r2, r5
     eee:	4929      	ldr	r1, [pc, #164]	; (f94 <process_event+0x330>)
     ef0:	4820      	ldr	r0, [pc, #128]	; (f74 <process_event+0x310>)
     ef2:	f008 ffc0 	bl	9e76 <assert_print>
     ef6:	f44f 71b2 	mov.w	r1, #356	; 0x164
     efa:	4628      	mov	r0, r5
     efc:	f008 ffb4 	bl	9e68 <assert_post_action>
     f00:	e77e      	b.n	e00 <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     f02:	4d1a      	ldr	r5, [pc, #104]	; (f6c <process_event+0x308>)
     f04:	f240 1365 	movw	r3, #357	; 0x165
     f08:	462a      	mov	r2, r5
     f0a:	491e      	ldr	r1, [pc, #120]	; (f84 <process_event+0x320>)
     f0c:	4819      	ldr	r0, [pc, #100]	; (f74 <process_event+0x310>)
     f0e:	f008 ffb2 	bl	9e76 <assert_print>
     f12:	f240 1165 	movw	r1, #357	; 0x165
     f16:	4628      	mov	r0, r5
     f18:	f008 ffa6 	bl	9e68 <assert_post_action>
     f1c:	e773      	b.n	e06 <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
     f1e:	f8df 804c 	ldr.w	r8, [pc, #76]	; f6c <process_event+0x308>
     f22:	f44f 73b4 	mov.w	r3, #360	; 0x168
     f26:	4642      	mov	r2, r8
     f28:	4917      	ldr	r1, [pc, #92]	; (f88 <process_event+0x324>)
     f2a:	4812      	ldr	r0, [pc, #72]	; (f74 <process_event+0x310>)
     f2c:	f008 ffa3 	bl	9e76 <assert_print>
     f30:	f44f 71b4 	mov.w	r1, #360	; 0x168
     f34:	4640      	mov	r0, r8
     f36:	f008 ff97 	bl	9e68 <assert_post_action>
     f3a:	e769      	b.n	e10 <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
     f3c:	4d0b      	ldr	r5, [pc, #44]	; (f6c <process_event+0x308>)
     f3e:	f240 136b 	movw	r3, #363	; 0x16b
     f42:	462a      	mov	r2, r5
     f44:	4914      	ldr	r1, [pc, #80]	; (f98 <process_event+0x334>)
     f46:	480b      	ldr	r0, [pc, #44]	; (f74 <process_event+0x310>)
     f48:	f008 ff95 	bl	9e76 <assert_print>
     f4c:	f240 116b 	movw	r1, #363	; 0x16b
     f50:	4628      	mov	r0, r5
     f52:	f008 ff89 	bl	9e68 <assert_post_action>
		onoff_transition_fn transit = NULL;
     f56:	2500      	movs	r5, #0
		res = 0;
     f58:	46a9      	mov	r9, r5
     f5a:	e6ee      	b.n	d3a <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
     f5c:	2200      	movs	r2, #0
     f5e:	e6f7      	b.n	d50 <process_event+0xec>
     f60:	2200      	movs	r2, #0
     f62:	e6f5      	b.n	d50 <process_event+0xec>
		    || (transit != NULL)) {
     f64:	2d00      	cmp	r5, #0
     f66:	f47f aef9 	bne.w	d5c <process_event+0xf8>
     f6a:	e72a      	b.n	dc2 <process_event+0x15e>
     f6c:	0000b234 	.word	0x0000b234
     f70:	0000b280 	.word	0x0000b280
     f74:	0000b180 	.word	0x0000b180
     f78:	0000b290 	.word	0x0000b290
     f7c:	00001039 	.word	0x00001039
     f80:	0000b2a4 	.word	0x0000b2a4
     f84:	0000b2b0 	.word	0x0000b2b0
     f88:	0000b2d4 	.word	0x0000b2d4
     f8c:	0000b2ec 	.word	0x0000b2ec
     f90:	0000b304 	.word	0x0000b304
     f94:	0000b314 	.word	0x0000b314
     f98:	0000b83c 	.word	0x0000b83c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     f9c:	f8df b080 	ldr.w	fp, [pc, #128]	; 1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
     fa0:	23b9      	movs	r3, #185	; 0xb9
     fa2:	465a      	mov	r2, fp
     fa4:	491f      	ldr	r1, [pc, #124]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
     fa6:	4820      	ldr	r0, [pc, #128]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
     fa8:	f008 ff65 	bl	9e76 <assert_print>
     fac:	4651      	mov	r1, sl
     fae:	481f      	ldr	r0, [pc, #124]	; (102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
     fb0:	f008 ff61 	bl	9e76 <assert_print>
     fb4:	21b9      	movs	r1, #185	; 0xb9
     fb6:	4658      	mov	r0, fp
     fb8:	f008 ff56 	bl	9e68 <assert_post_action>
     fbc:	e6d9      	b.n	d72 <process_event+0x10e>
				notify_monitors(mgr, state, res);
     fbe:	464a      	mov	r2, r9
     fc0:	4641      	mov	r1, r8
     fc2:	4620      	mov	r0, r4
     fc4:	f008 fde8 	bl	9b98 <notify_monitors>
     fc8:	e6da      	b.n	d80 <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     fca:	4d15      	ldr	r5, [pc, #84]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
     fcc:	238e      	movs	r3, #142	; 0x8e
     fce:	462a      	mov	r2, r5
     fd0:	4917      	ldr	r1, [pc, #92]	; (1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>)
     fd2:	4815      	ldr	r0, [pc, #84]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
     fd4:	f008 ff4f 	bl	9e76 <assert_print>
     fd8:	4651      	mov	r1, sl
     fda:	4816      	ldr	r0, [pc, #88]	; (1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>)
     fdc:	f008 ff4b 	bl	9e76 <assert_print>
     fe0:	218e      	movs	r1, #142	; 0x8e
     fe2:	4628      	mov	r0, r5
     fe4:	f008 ff40 	bl	9e68 <assert_post_action>
     fe8:	e6e4      	b.n	db4 <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     fea:	f013 0f20 	tst.w	r3, #32
     fee:	d004      	beq.n	ffa <process_event+0x396>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     ff0:	f023 0320 	bic.w	r3, r3, #32
     ff4:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
     ff6:	2502      	movs	r5, #2
     ff8:	e6ec      	b.n	dd4 <process_event+0x170>
		evt = EVT_NOP;
     ffa:	2500      	movs	r5, #0
     ffc:	e6ea      	b.n	dd4 <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     ffe:	4d08      	ldr	r5, [pc, #32]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
    1000:	23b9      	movs	r3, #185	; 0xb9
    1002:	462a      	mov	r2, r5
    1004:	4907      	ldr	r1, [pc, #28]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
    1006:	4808      	ldr	r0, [pc, #32]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
    1008:	f008 ff35 	bl	9e76 <assert_print>
    100c:	4621      	mov	r1, r4
    100e:	4807      	ldr	r0, [pc, #28]	; (102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
    1010:	f008 ff31 	bl	9e76 <assert_print>
    1014:	21b9      	movs	r1, #185	; 0xb9
    1016:	4628      	mov	r0, r5
    1018:	f008 ff26 	bl	9e68 <assert_post_action>
    101c:	e653      	b.n	cc6 <process_event+0x62>
    101e:	bf00      	nop
    1020:	0000b32c 	.word	0x0000b32c
    1024:	0000b35c 	.word	0x0000b35c
    1028:	0000b180 	.word	0x0000b180
    102c:	0000b374 	.word	0x0000b374
    1030:	0000b38c 	.word	0x0000b38c
    1034:	0000b3a4 	.word	0x0000b3a4

00001038 <transition_complete>:
{
    1038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    103c:	4604      	mov	r4, r0
    103e:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1040:	f100 0614 	add.w	r6, r0, #20
    1044:	f04f 0320 	mov.w	r3, #32
    1048:	f3ef 8711 	mrs	r7, BASEPRI
    104c:	f383 8812 	msr	BASEPRI_MAX, r3
    1050:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1054:	4630      	mov	r0, r6
    1056:	f006 f857 	bl	7108 <z_spin_lock_valid>
    105a:	b150      	cbz	r0, 1072 <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    105c:	4630      	mov	r0, r6
    105e:	f006 f873 	bl	7148 <z_spin_lock_set_owner>
	mgr->last_res = res;
    1062:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    1064:	463a      	mov	r2, r7
    1066:	2101      	movs	r1, #1
    1068:	4620      	mov	r0, r4
    106a:	f7ff fdfb 	bl	c64 <process_event>
}
    106e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1072:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1094 <transition_complete+0x5c>
    1076:	238e      	movs	r3, #142	; 0x8e
    1078:	4642      	mov	r2, r8
    107a:	4907      	ldr	r1, [pc, #28]	; (1098 <transition_complete+0x60>)
    107c:	4807      	ldr	r0, [pc, #28]	; (109c <transition_complete+0x64>)
    107e:	f008 fefa 	bl	9e76 <assert_print>
    1082:	4631      	mov	r1, r6
    1084:	4806      	ldr	r0, [pc, #24]	; (10a0 <transition_complete+0x68>)
    1086:	f008 fef6 	bl	9e76 <assert_print>
    108a:	218e      	movs	r1, #142	; 0x8e
    108c:	4640      	mov	r0, r8
    108e:	f008 feeb 	bl	9e68 <assert_post_action>
    1092:	e7e3      	b.n	105c <transition_complete+0x24>
    1094:	0000b32c 	.word	0x0000b32c
    1098:	0000b38c 	.word	0x0000b38c
    109c:	0000b180 	.word	0x0000b180
    10a0:	0000b3a4 	.word	0x0000b3a4

000010a4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    10a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10a8:	4604      	mov	r4, r0
    10aa:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    10ac:	f008 fdac 	bl	9c08 <validate_args>

	if (rv < 0) {
    10b0:	1e06      	subs	r6, r0, #0
    10b2:	db58      	blt.n	1166 <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    10b4:	f104 0714 	add.w	r7, r4, #20
    10b8:	f04f 0320 	mov.w	r3, #32
    10bc:	f3ef 8911 	mrs	r9, BASEPRI
    10c0:	f383 8812 	msr	BASEPRI_MAX, r3
    10c4:	f3bf 8f6f 	isb	sy
    10c8:	4638      	mov	r0, r7
    10ca:	f006 f81d 	bl	7108 <z_spin_lock_valid>
    10ce:	b1e8      	cbz	r0, 110c <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    10d0:	4638      	mov	r0, r7
    10d2:	f006 f839 	bl	7148 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    10d6:	8ba5      	ldrh	r5, [r4, #28]
    10d8:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    10dc:	8be3      	ldrh	r3, [r4, #30]
    10de:	f64f 72ff 	movw	r2, #65535	; 0xffff
    10e2:	4293      	cmp	r3, r2
    10e4:	d056      	beq.n	1194 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    10e6:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    10e8:	2d02      	cmp	r5, #2
    10ea:	d01f      	beq.n	112c <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    10ec:	b32d      	cbz	r5, 113a <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
    10ee:	2d04      	cmp	r5, #4
    10f0:	d023      	beq.n	113a <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
    10f2:	2d06      	cmp	r5, #6
    10f4:	d021      	beq.n	113a <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    10f6:	2d05      	cmp	r5, #5
    10f8:	d053      	beq.n	11a2 <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    10fa:	2d01      	cmp	r5, #1
    10fc:	d136      	bne.n	116c <onoff_request+0xc8>
		rv = -EIO;
    10fe:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    1102:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1106:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1108:	4652      	mov	r2, sl
    110a:	e01c      	b.n	1146 <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    110c:	4d3c      	ldr	r5, [pc, #240]	; (1200 <onoff_request+0x15c>)
    110e:	238e      	movs	r3, #142	; 0x8e
    1110:	462a      	mov	r2, r5
    1112:	493c      	ldr	r1, [pc, #240]	; (1204 <onoff_request+0x160>)
    1114:	483c      	ldr	r0, [pc, #240]	; (1208 <onoff_request+0x164>)
    1116:	f008 feae 	bl	9e76 <assert_print>
    111a:	4639      	mov	r1, r7
    111c:	483b      	ldr	r0, [pc, #236]	; (120c <onoff_request+0x168>)
    111e:	f008 feaa 	bl	9e76 <assert_print>
    1122:	218e      	movs	r1, #142	; 0x8e
    1124:	4628      	mov	r0, r5
    1126:	f008 fe9f 	bl	9e68 <assert_post_action>
    112a:	e7d1      	b.n	10d0 <onoff_request+0x2c>
		mgr->refs += 1U;
    112c:	3301      	adds	r3, #1
    112e:	83e3      	strh	r3, [r4, #30]
		notify = true;
    1130:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    1134:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    1136:	461a      	mov	r2, r3
    1138:	e005      	b.n	1146 <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
    113a:	fab5 f385 	clz	r3, r5
    113e:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    1140:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    1144:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    1146:	b142      	cbz	r2, 115a <onoff_request+0xb6>
	parent->next = child;
    1148:	2200      	movs	r2, #0
    114a:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    114e:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    1150:	b372      	cbz	r2, 11b0 <onoff_request+0x10c>
	parent->next = child;
    1152:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    1156:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    115a:	b373      	cbz	r3, 11ba <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
    115c:	464a      	mov	r2, r9
    115e:	2102      	movs	r1, #2
    1160:	4620      	mov	r0, r4
    1162:	f7ff fd7f 	bl	c64 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    1166:	4630      	mov	r0, r6
    1168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    116c:	4e28      	ldr	r6, [pc, #160]	; (1210 <onoff_request+0x16c>)
    116e:	f240 13c9 	movw	r3, #457	; 0x1c9
    1172:	4632      	mov	r2, r6
    1174:	4927      	ldr	r1, [pc, #156]	; (1214 <onoff_request+0x170>)
    1176:	4824      	ldr	r0, [pc, #144]	; (1208 <onoff_request+0x164>)
    1178:	f008 fe7d 	bl	9e76 <assert_print>
    117c:	f240 11c9 	movw	r1, #457	; 0x1c9
    1180:	4630      	mov	r0, r6
    1182:	f008 fe71 	bl	9e68 <assert_post_action>
		rv = -EIO;
    1186:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    118a:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    118e:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1190:	4652      	mov	r2, sl
    1192:	e7d8      	b.n	1146 <onoff_request+0xa2>
		rv = -EAGAIN;
    1194:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    1198:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    119c:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    119e:	4652      	mov	r2, sl
    11a0:	e7d1      	b.n	1146 <onoff_request+0xa2>
		rv = -ENOTSUP;
    11a2:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    11a6:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    11aa:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    11ac:	4652      	mov	r2, sl
    11ae:	e7ca      	b.n	1146 <onoff_request+0xa2>
    11b0:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    11b4:	f8c4 8000 	str.w	r8, [r4]
}
    11b8:	e7cf      	b.n	115a <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    11ba:	4638      	mov	r0, r7
    11bc:	f005 ffb4 	bl	7128 <z_spin_unlock_valid>
    11c0:	b168      	cbz	r0, 11de <onoff_request+0x13a>
	__asm__ volatile(
    11c2:	f389 8811 	msr	BASEPRI, r9
    11c6:	f3bf 8f6f 	isb	sy
		if (notify) {
    11ca:	f1ba 0f00 	cmp.w	sl, #0
    11ce:	d0ca      	beq.n	1166 <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
    11d0:	2300      	movs	r3, #0
    11d2:	462a      	mov	r2, r5
    11d4:	4641      	mov	r1, r8
    11d6:	4620      	mov	r0, r4
    11d8:	f008 fd2c 	bl	9c34 <notify_one>
    11dc:	e7c3      	b.n	1166 <onoff_request+0xc2>
    11de:	f8df b020 	ldr.w	fp, [pc, #32]	; 1200 <onoff_request+0x15c>
    11e2:	23b9      	movs	r3, #185	; 0xb9
    11e4:	465a      	mov	r2, fp
    11e6:	490c      	ldr	r1, [pc, #48]	; (1218 <onoff_request+0x174>)
    11e8:	4807      	ldr	r0, [pc, #28]	; (1208 <onoff_request+0x164>)
    11ea:	f008 fe44 	bl	9e76 <assert_print>
    11ee:	4639      	mov	r1, r7
    11f0:	480a      	ldr	r0, [pc, #40]	; (121c <onoff_request+0x178>)
    11f2:	f008 fe40 	bl	9e76 <assert_print>
    11f6:	21b9      	movs	r1, #185	; 0xb9
    11f8:	4658      	mov	r0, fp
    11fa:	f008 fe35 	bl	9e68 <assert_post_action>
    11fe:	e7e0      	b.n	11c2 <onoff_request+0x11e>
    1200:	0000b32c 	.word	0x0000b32c
    1204:	0000b38c 	.word	0x0000b38c
    1208:	0000b180 	.word	0x0000b180
    120c:	0000b3a4 	.word	0x0000b3a4
    1210:	0000b234 	.word	0x0000b234
    1214:	0000b314 	.word	0x0000b314
    1218:	0000b35c 	.word	0x0000b35c
    121c:	0000b374 	.word	0x0000b374

00001220 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    1220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1224:	4606      	mov	r6, r0
    1226:	460d      	mov	r5, r1
    1228:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    122a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    122e:	d222      	bcs.n	1276 <sys_heap_init+0x56>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1230:	2c04      	cmp	r4, #4
    1232:	d931      	bls.n	1298 <sys_heap_init+0x78>
	bytes -= heap_footer_bytes(bytes);
    1234:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1236:	1dec      	adds	r4, r5, #7
    1238:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    123c:	4415      	add	r5, r2
    123e:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    1242:	1b2d      	subs	r5, r5, r4
    1244:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1248:	2d17      	cmp	r5, #23
    124a:	d936      	bls.n	12ba <sys_heap_init+0x9a>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    124c:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
    124e:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
    1252:	2300      	movs	r3, #0
    1254:	60e3      	str	r3, [r4, #12]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    1256:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    125a:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    125e:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
    1262:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    1264:	3607      	adds	r6, #7
    1266:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    126a:	f109 0301 	add.w	r3, r9, #1
    126e:	4543      	cmp	r3, r8
    1270:	d834      	bhi.n	12dc <sys_heap_init+0xbc>
{
    1272:	2300      	movs	r3, #0
    1274:	e049      	b.n	130a <sys_heap_init+0xea>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    1276:	4f38      	ldr	r7, [pc, #224]	; (1358 <sys_heap_init+0x138>)
    1278:	f240 13e3 	movw	r3, #483	; 0x1e3
    127c:	463a      	mov	r2, r7
    127e:	4937      	ldr	r1, [pc, #220]	; (135c <sys_heap_init+0x13c>)
    1280:	4837      	ldr	r0, [pc, #220]	; (1360 <sys_heap_init+0x140>)
    1282:	f008 fdf8 	bl	9e76 <assert_print>
    1286:	4837      	ldr	r0, [pc, #220]	; (1364 <sys_heap_init+0x144>)
    1288:	f008 fdf5 	bl	9e76 <assert_print>
    128c:	f240 11e3 	movw	r1, #483	; 0x1e3
    1290:	4638      	mov	r0, r7
    1292:	f008 fde9 	bl	9e68 <assert_post_action>
    1296:	e7cb      	b.n	1230 <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1298:	4f2f      	ldr	r7, [pc, #188]	; (1358 <sys_heap_init+0x138>)
    129a:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    129e:	463a      	mov	r2, r7
    12a0:	4931      	ldr	r1, [pc, #196]	; (1368 <sys_heap_init+0x148>)
    12a2:	482f      	ldr	r0, [pc, #188]	; (1360 <sys_heap_init+0x140>)
    12a4:	f008 fde7 	bl	9e76 <assert_print>
    12a8:	4830      	ldr	r0, [pc, #192]	; (136c <sys_heap_init+0x14c>)
    12aa:	f008 fde4 	bl	9e76 <assert_print>
    12ae:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    12b2:	4638      	mov	r0, r7
    12b4:	f008 fdd8 	bl	9e68 <assert_post_action>
    12b8:	e7bc      	b.n	1234 <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    12ba:	4f27      	ldr	r7, [pc, #156]	; (1358 <sys_heap_init+0x138>)
    12bc:	f240 13f3 	movw	r3, #499	; 0x1f3
    12c0:	463a      	mov	r2, r7
    12c2:	492b      	ldr	r1, [pc, #172]	; (1370 <sys_heap_init+0x150>)
    12c4:	4826      	ldr	r0, [pc, #152]	; (1360 <sys_heap_init+0x140>)
    12c6:	f008 fdd6 	bl	9e76 <assert_print>
    12ca:	4828      	ldr	r0, [pc, #160]	; (136c <sys_heap_init+0x14c>)
    12cc:	f008 fdd3 	bl	9e76 <assert_print>
    12d0:	f240 11f3 	movw	r1, #499	; 0x1f3
    12d4:	4638      	mov	r0, r7
    12d6:	f008 fdc7 	bl	9e68 <assert_post_action>
    12da:	e7b7      	b.n	124c <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    12dc:	f8df a078 	ldr.w	sl, [pc, #120]	; 1358 <sys_heap_init+0x138>
    12e0:	f44f 7301 	mov.w	r3, #516	; 0x204
    12e4:	4652      	mov	r2, sl
    12e6:	4923      	ldr	r1, [pc, #140]	; (1374 <sys_heap_init+0x154>)
    12e8:	481d      	ldr	r0, [pc, #116]	; (1360 <sys_heap_init+0x140>)
    12ea:	f008 fdc4 	bl	9e76 <assert_print>
    12ee:	481f      	ldr	r0, [pc, #124]	; (136c <sys_heap_init+0x14c>)
    12f0:	f008 fdc1 	bl	9e76 <assert_print>
    12f4:	f44f 7101 	mov.w	r1, #516	; 0x204
    12f8:	4650      	mov	r0, sl
    12fa:	f008 fdb5 	bl	9e68 <assert_post_action>
    12fe:	e7b8      	b.n	1272 <sys_heap_init+0x52>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    1300:	1d1a      	adds	r2, r3, #4
    1302:	2100      	movs	r1, #0
    1304:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    1308:	3301      	adds	r3, #1
    130a:	42bb      	cmp	r3, r7
    130c:	dbf8      	blt.n	1300 <sys_heap_init+0xe0>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    130e:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
    1312:	b29b      	uxth	r3, r3
    1314:	8063      	strh	r3, [r4, #2]
    1316:	2200      	movs	r2, #0
    1318:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    131a:	f043 0301 	orr.w	r3, r3, #1
    131e:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    1320:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1324:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
    1328:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
    132c:	1cb3      	adds	r3, r6, #2
    132e:	52e1      	strh	r1, [r4, r3]
    1330:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
    1334:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
    1338:	1ca9      	adds	r1, r5, #2
    133a:	5262      	strh	r2, [r4, r1]
    133c:	4425      	add	r5, r4
    133e:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    1342:	886b      	ldrh	r3, [r5, #2]
    1344:	f043 0301 	orr.w	r3, r3, #1
    1348:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    134a:	4649      	mov	r1, r9
    134c:	4620      	mov	r0, r4
    134e:	f008 fce9 	bl	9d24 <free_list_add>
}
    1352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1356:	bf00      	nop
    1358:	0000b3bc 	.word	0x0000b3bc
    135c:	0000b490 	.word	0x0000b490
    1360:	0000b180 	.word	0x0000b180
    1364:	0000b4a8 	.word	0x0000b4a8
    1368:	0000b4c0 	.word	0x0000b4c0
    136c:	0000b4e4 	.word	0x0000b4e4
    1370:	0000b500 	.word	0x0000b500
    1374:	0000b52c 	.word	0x0000b52c

00001378 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    1378:	b570      	push	{r4, r5, r6, lr}
    137a:	b082      	sub	sp, #8
    137c:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    137e:	2300      	movs	r3, #0
    1380:	6003      	str	r3, [r0, #0]
    1382:	6043      	str	r3, [r0, #4]
    1384:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    1386:	784b      	ldrb	r3, [r1, #1]
    1388:	2b25      	cmp	r3, #37	; 0x25
    138a:	d002      	beq.n	1392 <extract_conversion+0x1a>
    138c:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    138e:	2501      	movs	r5, #1
    1390:	e01f      	b.n	13d2 <extract_conversion+0x5a>
		conv->specifier = *sp++;
    1392:	1c88      	adds	r0, r1, #2
    1394:	70e3      	strb	r3, [r4, #3]
		return sp;
    1396:	e145      	b.n	1624 <extract_conversion+0x2ac>
			conv->flag_dash = true;
    1398:	7823      	ldrb	r3, [r4, #0]
    139a:	f043 0304 	orr.w	r3, r3, #4
    139e:	7023      	strb	r3, [r4, #0]
		if (loop) {
    13a0:	b1b5      	cbz	r5, 13d0 <extract_conversion+0x58>
			++sp;
    13a2:	3601      	adds	r6, #1
    13a4:	e014      	b.n	13d0 <extract_conversion+0x58>
			conv->flag_plus = true;
    13a6:	7823      	ldrb	r3, [r4, #0]
    13a8:	f043 0308 	orr.w	r3, r3, #8
    13ac:	7023      	strb	r3, [r4, #0]
			break;
    13ae:	e7f7      	b.n	13a0 <extract_conversion+0x28>
			conv->flag_space = true;
    13b0:	7823      	ldrb	r3, [r4, #0]
    13b2:	f043 0310 	orr.w	r3, r3, #16
    13b6:	7023      	strb	r3, [r4, #0]
			break;
    13b8:	e7f2      	b.n	13a0 <extract_conversion+0x28>
			conv->flag_hash = true;
    13ba:	7823      	ldrb	r3, [r4, #0]
    13bc:	f043 0320 	orr.w	r3, r3, #32
    13c0:	7023      	strb	r3, [r4, #0]
			break;
    13c2:	e7ed      	b.n	13a0 <extract_conversion+0x28>
			conv->flag_zero = true;
    13c4:	7823      	ldrb	r3, [r4, #0]
    13c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    13ca:	7023      	strb	r3, [r4, #0]
			break;
    13cc:	e7e8      	b.n	13a0 <extract_conversion+0x28>
		switch (*sp) {
    13ce:	2500      	movs	r5, #0
	} while (loop);
    13d0:	b345      	cbz	r5, 1424 <extract_conversion+0xac>
		switch (*sp) {
    13d2:	7833      	ldrb	r3, [r6, #0]
    13d4:	3b20      	subs	r3, #32
    13d6:	2b10      	cmp	r3, #16
    13d8:	d8f9      	bhi.n	13ce <extract_conversion+0x56>
    13da:	a201      	add	r2, pc, #4	; (adr r2, 13e0 <extract_conversion+0x68>)
    13dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    13e0:	000013b1 	.word	0x000013b1
    13e4:	000013cf 	.word	0x000013cf
    13e8:	000013cf 	.word	0x000013cf
    13ec:	000013bb 	.word	0x000013bb
    13f0:	000013cf 	.word	0x000013cf
    13f4:	000013cf 	.word	0x000013cf
    13f8:	000013cf 	.word	0x000013cf
    13fc:	000013cf 	.word	0x000013cf
    1400:	000013cf 	.word	0x000013cf
    1404:	000013cf 	.word	0x000013cf
    1408:	000013cf 	.word	0x000013cf
    140c:	000013a7 	.word	0x000013a7
    1410:	000013cf 	.word	0x000013cf
    1414:	00001399 	.word	0x00001399
    1418:	000013cf 	.word	0x000013cf
    141c:	000013cf 	.word	0x000013cf
    1420:	000013c5 	.word	0x000013c5
	if (conv->flag_zero && conv->flag_dash) {
    1424:	7823      	ldrb	r3, [r4, #0]
    1426:	f003 0344 	and.w	r3, r3, #68	; 0x44
    142a:	2b44      	cmp	r3, #68	; 0x44
    142c:	d05f      	beq.n	14ee <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    142e:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    1430:	7823      	ldrb	r3, [r4, #0]
    1432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1436:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    1438:	7833      	ldrb	r3, [r6, #0]
    143a:	2b2a      	cmp	r3, #42	; 0x2a
    143c:	d05c      	beq.n	14f8 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    143e:	a801      	add	r0, sp, #4
    1440:	f008 fc7c 	bl	9d3c <extract_decimal>
	if (sp != wp) {
    1444:	9b01      	ldr	r3, [sp, #4]
    1446:	429e      	cmp	r6, r3
    1448:	d00f      	beq.n	146a <extract_conversion+0xf2>
		conv->width_present = true;
    144a:	7823      	ldrb	r3, [r4, #0]
    144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1450:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    1452:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    1454:	b2db      	uxtb	r3, r3
    1456:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    145a:	2800      	cmp	r0, #0
    145c:	db54      	blt.n	1508 <extract_conversion+0x190>
    145e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    1460:	4313      	orrs	r3, r2
    1462:	7822      	ldrb	r2, [r4, #0]
    1464:	f363 0241 	bfi	r2, r3, #1, #1
    1468:	7022      	strb	r2, [r4, #0]
	return sp;
    146a:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    146c:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    146e:	781b      	ldrb	r3, [r3, #0]
    1470:	2b2e      	cmp	r3, #46	; 0x2e
    1472:	bf14      	ite	ne
    1474:	2300      	movne	r3, #0
    1476:	2301      	moveq	r3, #1
    1478:	7862      	ldrb	r2, [r4, #1]
    147a:	f363 0241 	bfi	r2, r3, #1, #1
    147e:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    1480:	2b00      	cmp	r3, #0
    1482:	d043      	beq.n	150c <extract_conversion+0x194>
	++sp;
    1484:	9b01      	ldr	r3, [sp, #4]
    1486:	1c5a      	adds	r2, r3, #1
    1488:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    148a:	785b      	ldrb	r3, [r3, #1]
    148c:	2b2a      	cmp	r3, #42	; 0x2a
    148e:	d03f      	beq.n	1510 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    1490:	a801      	add	r0, sp, #4
    1492:	f008 fc53 	bl	9d3c <extract_decimal>
	conv->prec_value = prec;
    1496:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    1498:	7823      	ldrb	r3, [r4, #0]
    149a:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    149e:	2800      	cmp	r0, #0
    14a0:	db3e      	blt.n	1520 <extract_conversion+0x1a8>
    14a2:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    14a4:	4313      	orrs	r3, r2
    14a6:	7822      	ldrb	r2, [r4, #0]
    14a8:	f363 0241 	bfi	r2, r3, #1, #1
    14ac:	7022      	strb	r2, [r4, #0]
	return sp;
    14ae:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    14b0:	7803      	ldrb	r3, [r0, #0]
    14b2:	3b4c      	subs	r3, #76	; 0x4c
    14b4:	2b2e      	cmp	r3, #46	; 0x2e
    14b6:	f200 809d 	bhi.w	15f4 <extract_conversion+0x27c>
    14ba:	e8df f003 	tbb	[pc, r3]
    14be:	9b90      	.short	0x9b90
    14c0:	9b9b9b9b 	.word	0x9b9b9b9b
    14c4:	9b9b9b9b 	.word	0x9b9b9b9b
    14c8:	9b9b9b9b 	.word	0x9b9b9b9b
    14cc:	9b9b9b9b 	.word	0x9b9b9b9b
    14d0:	9b9b9b9b 	.word	0x9b9b9b9b
    14d4:	9b9b9b9b 	.word	0x9b9b9b9b
    14d8:	9b339b9b 	.word	0x9b339b9b
    14dc:	9b459b57 	.word	0x9b459b57
    14e0:	9b9b9b9b 	.word	0x9b9b9b9b
    14e4:	9b899b9b 	.word	0x9b899b9b
    14e8:	9b9b9b9b 	.word	0x9b9b9b9b
    14ec:	82          	.byte	0x82
    14ed:	00          	.byte	0x00
		conv->flag_zero = false;
    14ee:	7823      	ldrb	r3, [r4, #0]
    14f0:	f36f 1386 	bfc	r3, #6, #1
    14f4:	7023      	strb	r3, [r4, #0]
    14f6:	e79a      	b.n	142e <extract_conversion+0xb6>
		conv->width_star = true;
    14f8:	7863      	ldrb	r3, [r4, #1]
    14fa:	f043 0301 	orr.w	r3, r3, #1
    14fe:	7063      	strb	r3, [r4, #1]
		return ++sp;
    1500:	4633      	mov	r3, r6
    1502:	3301      	adds	r3, #1
    1504:	9301      	str	r3, [sp, #4]
    1506:	e7b1      	b.n	146c <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    1508:	2201      	movs	r2, #1
    150a:	e7a9      	b.n	1460 <extract_conversion+0xe8>
		return sp;
    150c:	9801      	ldr	r0, [sp, #4]
    150e:	e7cf      	b.n	14b0 <extract_conversion+0x138>
		conv->prec_star = true;
    1510:	7863      	ldrb	r3, [r4, #1]
    1512:	f043 0304 	orr.w	r3, r3, #4
    1516:	7063      	strb	r3, [r4, #1]
		return ++sp;
    1518:	4610      	mov	r0, r2
    151a:	3001      	adds	r0, #1
    151c:	9001      	str	r0, [sp, #4]
    151e:	e7c7      	b.n	14b0 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    1520:	2201      	movs	r2, #1
    1522:	e7bf      	b.n	14a4 <extract_conversion+0x12c>
		if (*++sp == 'h') {
    1524:	1c42      	adds	r2, r0, #1
    1526:	7843      	ldrb	r3, [r0, #1]
    1528:	2b68      	cmp	r3, #104	; 0x68
    152a:	d006      	beq.n	153a <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    152c:	7863      	ldrb	r3, [r4, #1]
    152e:	2102      	movs	r1, #2
    1530:	f361 03c6 	bfi	r3, r1, #3, #4
    1534:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    1536:	4610      	mov	r0, r2
    1538:	e01e      	b.n	1578 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    153a:	7863      	ldrb	r3, [r4, #1]
    153c:	2201      	movs	r2, #1
    153e:	f362 03c6 	bfi	r3, r2, #3, #4
    1542:	7063      	strb	r3, [r4, #1]
			++sp;
    1544:	3002      	adds	r0, #2
    1546:	e017      	b.n	1578 <extract_conversion+0x200>
		if (*++sp == 'l') {
    1548:	1c42      	adds	r2, r0, #1
    154a:	7843      	ldrb	r3, [r0, #1]
    154c:	2b6c      	cmp	r3, #108	; 0x6c
    154e:	d006      	beq.n	155e <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    1550:	7863      	ldrb	r3, [r4, #1]
    1552:	2103      	movs	r1, #3
    1554:	f361 03c6 	bfi	r3, r1, #3, #4
    1558:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    155a:	4610      	mov	r0, r2
    155c:	e00c      	b.n	1578 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    155e:	7863      	ldrb	r3, [r4, #1]
    1560:	2204      	movs	r2, #4
    1562:	f362 03c6 	bfi	r3, r2, #3, #4
    1566:	7063      	strb	r3, [r4, #1]
			++sp;
    1568:	3002      	adds	r0, #2
    156a:	e005      	b.n	1578 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    156c:	7863      	ldrb	r3, [r4, #1]
    156e:	2205      	movs	r2, #5
    1570:	f362 03c6 	bfi	r3, r2, #3, #4
    1574:	7063      	strb	r3, [r4, #1]
		++sp;
    1576:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    1578:	f810 3b01 	ldrb.w	r3, [r0], #1
    157c:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    157e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    1582:	2a37      	cmp	r2, #55	; 0x37
    1584:	d87d      	bhi.n	1682 <extract_conversion+0x30a>
    1586:	e8df f002 	tbb	[pc, r2]
    158a:	7c5e      	.short	0x7c5e
    158c:	5e5e7c7c 	.word	0x5e5e7c7c
    1590:	7c7c7c5e 	.word	0x7c7c7c5e
    1594:	7c7c7c7c 	.word	0x7c7c7c7c
    1598:	7c7c7c7c 	.word	0x7c7c7c7c
    159c:	7c7c7c7c 	.word	0x7c7c7c7c
    15a0:	7c7c4f7c 	.word	0x7c7c4f7c
    15a4:	7c7c7c7c 	.word	0x7c7c7c7c
    15a8:	7c5e7c7c 	.word	0x7c5e7c7c
    15ac:	5e5e3a4f 	.word	0x5e5e3a4f
    15b0:	7c3a7c5e 	.word	0x7c3a7c5e
    15b4:	657c7c7c 	.word	0x657c7c7c
    15b8:	7c7c714f 	.word	0x7c7c714f
    15bc:	7c4f7c71 	.word	0x7c4f7c71
    15c0:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    15c2:	7863      	ldrb	r3, [r4, #1]
    15c4:	2206      	movs	r2, #6
    15c6:	f362 03c6 	bfi	r3, r2, #3, #4
    15ca:	7063      	strb	r3, [r4, #1]
		++sp;
    15cc:	3001      	adds	r0, #1
		break;
    15ce:	e7d3      	b.n	1578 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    15d0:	7863      	ldrb	r3, [r4, #1]
    15d2:	2207      	movs	r2, #7
    15d4:	f362 03c6 	bfi	r3, r2, #3, #4
    15d8:	7063      	strb	r3, [r4, #1]
		++sp;
    15da:	3001      	adds	r0, #1
		break;
    15dc:	e7cc      	b.n	1578 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    15de:	7863      	ldrb	r3, [r4, #1]
    15e0:	2208      	movs	r2, #8
    15e2:	f362 03c6 	bfi	r3, r2, #3, #4
    15e6:	7063      	strb	r3, [r4, #1]
		++sp;
    15e8:	3001      	adds	r0, #1
		conv->unsupported = true;
    15ea:	7823      	ldrb	r3, [r4, #0]
    15ec:	f043 0302 	orr.w	r3, r3, #2
    15f0:	7023      	strb	r3, [r4, #0]
		break;
    15f2:	e7c1      	b.n	1578 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    15f4:	7863      	ldrb	r3, [r4, #1]
    15f6:	f36f 03c6 	bfc	r3, #3, #4
    15fa:	7063      	strb	r3, [r4, #1]
		break;
    15fc:	e7bc      	b.n	1578 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    15fe:	78a2      	ldrb	r2, [r4, #2]
    1600:	2101      	movs	r1, #1
    1602:	f361 0202 	bfi	r2, r1, #0, #3
    1606:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    1608:	7862      	ldrb	r2, [r4, #1]
    160a:	f002 0278 	and.w	r2, r2, #120	; 0x78
    160e:	2a40      	cmp	r2, #64	; 0x40
    1610:	d010      	beq.n	1634 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    1612:	2b63      	cmp	r3, #99	; 0x63
    1614:	d013      	beq.n	163e <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    1616:	7823      	ldrb	r3, [r4, #0]
    1618:	f3c3 0240 	ubfx	r2, r3, #1, #1
    161c:	4315      	orrs	r5, r2
    161e:	f365 0341 	bfi	r3, r5, #1, #1
    1622:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    1624:	b002      	add	sp, #8
    1626:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    1628:	78a2      	ldrb	r2, [r4, #2]
    162a:	2102      	movs	r1, #2
    162c:	f361 0202 	bfi	r2, r1, #0, #3
    1630:	70a2      	strb	r2, [r4, #2]
    1632:	e7e9      	b.n	1608 <extract_conversion+0x290>
			conv->invalid = true;
    1634:	7821      	ldrb	r1, [r4, #0]
    1636:	f041 0101 	orr.w	r1, r1, #1
    163a:	7021      	strb	r1, [r4, #0]
    163c:	e7e9      	b.n	1612 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    163e:	1e15      	subs	r5, r2, #0
    1640:	bf18      	it	ne
    1642:	2501      	movne	r5, #1
    1644:	e7e7      	b.n	1616 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    1646:	78a3      	ldrb	r3, [r4, #2]
    1648:	2204      	movs	r2, #4
    164a:	f362 0302 	bfi	r3, r2, #0, #3
    164e:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    1650:	2501      	movs	r5, #1
			break;
    1652:	e7e0      	b.n	1616 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    1654:	78a3      	ldrb	r3, [r4, #2]
    1656:	2203      	movs	r2, #3
    1658:	f362 0302 	bfi	r3, r2, #0, #3
    165c:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    165e:	7863      	ldrb	r3, [r4, #1]
    1660:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1664:	2b40      	cmp	r3, #64	; 0x40
    1666:	d1d6      	bne.n	1616 <extract_conversion+0x29e>
			unsupported = true;
    1668:	2501      	movs	r5, #1
    166a:	e7d4      	b.n	1616 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    166c:	78a3      	ldrb	r3, [r4, #2]
    166e:	2203      	movs	r2, #3
    1670:	f362 0302 	bfi	r3, r2, #0, #3
    1674:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    1676:	7863      	ldrb	r3, [r4, #1]
    1678:	f013 0f78 	tst.w	r3, #120	; 0x78
    167c:	d0cb      	beq.n	1616 <extract_conversion+0x29e>
			unsupported = true;
    167e:	2501      	movs	r5, #1
    1680:	e7c9      	b.n	1616 <extract_conversion+0x29e>
		conv->invalid = true;
    1682:	7823      	ldrb	r3, [r4, #0]
    1684:	f043 0301 	orr.w	r3, r3, #1
    1688:	7023      	strb	r3, [r4, #0]
		break;
    168a:	e7c4      	b.n	1616 <extract_conversion+0x29e>

0000168c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    168c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1690:	b091      	sub	sp, #68	; 0x44
    1692:	4606      	mov	r6, r0
    1694:	460d      	mov	r5, r1
    1696:	4691      	mov	r9, r2
    1698:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    169a:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    169c:	f899 0000 	ldrb.w	r0, [r9]
    16a0:	2800      	cmp	r0, #0
    16a2:	f000 82d5 	beq.w	1c50 <cbvprintf+0x5c4>
		if (*fp != '%') {
    16a6:	2825      	cmp	r0, #37	; 0x25
    16a8:	d008      	beq.n	16bc <cbvprintf+0x30>
			OUTC(*fp++);
    16aa:	f109 0901 	add.w	r9, r9, #1
    16ae:	4629      	mov	r1, r5
    16b0:	47b0      	blx	r6
    16b2:	2800      	cmp	r0, #0
    16b4:	f2c0 82cd 	blt.w	1c52 <cbvprintf+0x5c6>
    16b8:	3401      	adds	r4, #1
			continue;
    16ba:	e7ef      	b.n	169c <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    16bc:	2300      	movs	r3, #0
    16be:	9304      	str	r3, [sp, #16]
    16c0:	9305      	str	r3, [sp, #20]
    16c2:	9306      	str	r3, [sp, #24]
    16c4:	9307      	str	r3, [sp, #28]
    16c6:	9308      	str	r3, [sp, #32]
    16c8:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    16ca:	4649      	mov	r1, r9
    16cc:	a806      	add	r0, sp, #24
    16ce:	f7ff fe53 	bl	1378 <extract_conversion>
    16d2:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    16d4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    16d8:	f013 0f01 	tst.w	r3, #1
    16dc:	f000 8097 	beq.w	180e <cbvprintf+0x182>
			width = va_arg(ap, int);
    16e0:	9b03      	ldr	r3, [sp, #12]
    16e2:	1d1a      	adds	r2, r3, #4
    16e4:	9203      	str	r2, [sp, #12]
    16e6:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    16e8:	2f00      	cmp	r7, #0
    16ea:	f2c0 8088 	blt.w	17fe <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    16ee:	f89d 3019 	ldrb.w	r3, [sp, #25]
    16f2:	f013 0f04 	tst.w	r3, #4
    16f6:	f000 809c 	beq.w	1832 <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    16fa:	9b03      	ldr	r3, [sp, #12]
    16fc:	1d1a      	adds	r2, r3, #4
    16fe:	9203      	str	r2, [sp, #12]
    1700:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    1704:	f1ba 0f00 	cmp.w	sl, #0
    1708:	f2c0 808a 	blt.w	1820 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    170c:	2300      	movs	r3, #0
    170e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    1710:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    1712:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1716:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    171a:	f89d 1019 	ldrb.w	r1, [sp, #25]
    171e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    1722:	2b01      	cmp	r3, #1
    1724:	f000 808e 	beq.w	1844 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    1728:	2b02      	cmp	r3, #2
    172a:	f000 80d3 	beq.w	18d4 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    172e:	2b04      	cmp	r3, #4
    1730:	f000 8124 	beq.w	197c <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    1734:	2b03      	cmp	r3, #3
    1736:	f000 813b 	beq.w	19b0 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    173a:	f89d 8018 	ldrb.w	r8, [sp, #24]
    173e:	f018 0b03 	ands.w	fp, r8, #3
    1742:	f040 813b 	bne.w	19bc <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    1746:	f89d 301b 	ldrb.w	r3, [sp, #27]
    174a:	3b25      	subs	r3, #37	; 0x25
    174c:	2b53      	cmp	r3, #83	; 0x53
    174e:	f200 81e6 	bhi.w	1b1e <cbvprintf+0x492>
    1752:	e8df f013 	tbh	[pc, r3, lsl #1]
    1756:	0140      	.short	0x0140
    1758:	01e401e4 	.word	0x01e401e4
    175c:	01e401e4 	.word	0x01e401e4
    1760:	01e401e4 	.word	0x01e401e4
    1764:	01e401e4 	.word	0x01e401e4
    1768:	01e401e4 	.word	0x01e401e4
    176c:	01e401e4 	.word	0x01e401e4
    1770:	01e401e4 	.word	0x01e401e4
    1774:	01e401e4 	.word	0x01e401e4
    1778:	01e401e4 	.word	0x01e401e4
    177c:	01e401e4 	.word	0x01e401e4
    1780:	01e401e4 	.word	0x01e401e4
    1784:	01e401e4 	.word	0x01e401e4
    1788:	01e401e4 	.word	0x01e401e4
    178c:	01e401e4 	.word	0x01e401e4
    1790:	01e401e4 	.word	0x01e401e4
    1794:	01e401e4 	.word	0x01e401e4
    1798:	01e401e4 	.word	0x01e401e4
    179c:	01e401e4 	.word	0x01e401e4
    17a0:	01e401e4 	.word	0x01e401e4
    17a4:	01e401e4 	.word	0x01e401e4
    17a8:	01e401e4 	.word	0x01e401e4
    17ac:	01e401e4 	.word	0x01e401e4
    17b0:	01e401e4 	.word	0x01e401e4
    17b4:	01e401e4 	.word	0x01e401e4
    17b8:	01e401e4 	.word	0x01e401e4
    17bc:	01e40181 	.word	0x01e40181
    17c0:	01e401e4 	.word	0x01e401e4
    17c4:	01e401e4 	.word	0x01e401e4
    17c8:	01e401e4 	.word	0x01e401e4
    17cc:	01e401e4 	.word	0x01e401e4
    17d0:	015e01e4 	.word	0x015e01e4
    17d4:	01e40167 	.word	0x01e40167
    17d8:	01e401e4 	.word	0x01e401e4
    17dc:	016701e4 	.word	0x016701e4
    17e0:	01e401e4 	.word	0x01e401e4
    17e4:	01e401e4 	.word	0x01e401e4
    17e8:	018101be 	.word	0x018101be
    17ec:	01e401a2 	.word	0x01e401a2
    17f0:	014d01e4 	.word	0x014d01e4
    17f4:	018101e4 	.word	0x018101e4
    17f8:	01e401e4 	.word	0x01e401e4
    17fc:	0181      	.short	0x0181
				conv->flag_dash = true;
    17fe:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1802:	f043 0304 	orr.w	r3, r3, #4
    1806:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    180a:	427f      	negs	r7, r7
    180c:	e76f      	b.n	16ee <cbvprintf+0x62>
		} else if (conv->width_present) {
    180e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    1812:	2b00      	cmp	r3, #0
    1814:	db02      	blt.n	181c <cbvprintf+0x190>
		int width = -1;
    1816:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    181a:	e768      	b.n	16ee <cbvprintf+0x62>
			width = conv->width_value;
    181c:	9f07      	ldr	r7, [sp, #28]
    181e:	e766      	b.n	16ee <cbvprintf+0x62>
				conv->prec_present = false;
    1820:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1824:	f36f 0341 	bfc	r3, #1, #1
    1828:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    182c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    1830:	e76c      	b.n	170c <cbvprintf+0x80>
		} else if (conv->prec_present) {
    1832:	f013 0f02 	tst.w	r3, #2
    1836:	d002      	beq.n	183e <cbvprintf+0x1b2>
			precision = conv->prec_value;
    1838:	f8dd a020 	ldr.w	sl, [sp, #32]
    183c:	e766      	b.n	170c <cbvprintf+0x80>
		int precision = -1;
    183e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    1842:	e763      	b.n	170c <cbvprintf+0x80>
			switch (length_mod) {
    1844:	1ecb      	subs	r3, r1, #3
    1846:	2b04      	cmp	r3, #4
    1848:	d804      	bhi.n	1854 <cbvprintf+0x1c8>
    184a:	e8df f003 	tbb	[pc, r3]
    184e:	1d0b      	.short	0x1d0b
    1850:	3529      	.short	0x3529
    1852:	35          	.byte	0x35
    1853:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1854:	9b03      	ldr	r3, [sp, #12]
    1856:	1d1a      	adds	r2, r3, #4
    1858:	9203      	str	r2, [sp, #12]
    185a:	681b      	ldr	r3, [r3, #0]
    185c:	17da      	asrs	r2, r3, #31
    185e:	9304      	str	r3, [sp, #16]
    1860:	9205      	str	r2, [sp, #20]
				break;
    1862:	e006      	b.n	1872 <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    1864:	9b03      	ldr	r3, [sp, #12]
    1866:	1d1a      	adds	r2, r3, #4
    1868:	9203      	str	r2, [sp, #12]
    186a:	681b      	ldr	r3, [r3, #0]
    186c:	17da      	asrs	r2, r3, #31
    186e:	9304      	str	r3, [sp, #16]
    1870:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    1872:	2901      	cmp	r1, #1
    1874:	d028      	beq.n	18c8 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    1876:	2902      	cmp	r1, #2
    1878:	f47f af5f 	bne.w	173a <cbvprintf+0xae>
				value->sint = (short)value->sint;
    187c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    1880:	17da      	asrs	r2, r3, #31
    1882:	9304      	str	r3, [sp, #16]
    1884:	9205      	str	r2, [sp, #20]
    1886:	e758      	b.n	173a <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    1888:	9b03      	ldr	r3, [sp, #12]
    188a:	3307      	adds	r3, #7
    188c:	f023 0307 	bic.w	r3, r3, #7
    1890:	f103 0208 	add.w	r2, r3, #8
    1894:	9203      	str	r2, [sp, #12]
    1896:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    189a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    189e:	e7e8      	b.n	1872 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    18a0:	9b03      	ldr	r3, [sp, #12]
    18a2:	3307      	adds	r3, #7
    18a4:	f023 0307 	bic.w	r3, r3, #7
    18a8:	f103 0208 	add.w	r2, r3, #8
    18ac:	9203      	str	r2, [sp, #12]
    18ae:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    18b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    18b6:	e7dc      	b.n	1872 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    18b8:	9b03      	ldr	r3, [sp, #12]
    18ba:	1d1a      	adds	r2, r3, #4
    18bc:	9203      	str	r2, [sp, #12]
    18be:	681b      	ldr	r3, [r3, #0]
    18c0:	17da      	asrs	r2, r3, #31
				value->sint =
    18c2:	9304      	str	r3, [sp, #16]
    18c4:	9205      	str	r2, [sp, #20]
				break;
    18c6:	e7d4      	b.n	1872 <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    18c8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    18cc:	9304      	str	r3, [sp, #16]
    18ce:	2300      	movs	r3, #0
    18d0:	9305      	str	r3, [sp, #20]
    18d2:	e732      	b.n	173a <cbvprintf+0xae>
			switch (length_mod) {
    18d4:	1ecb      	subs	r3, r1, #3
    18d6:	2b04      	cmp	r3, #4
    18d8:	d804      	bhi.n	18e4 <cbvprintf+0x258>
    18da:	e8df f003 	tbb	[pc, r3]
    18de:	1f0b      	.short	0x1f0b
    18e0:	4135      	.short	0x4135
    18e2:	41          	.byte	0x41
    18e3:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    18e4:	9b03      	ldr	r3, [sp, #12]
    18e6:	1d1a      	adds	r2, r3, #4
    18e8:	9203      	str	r2, [sp, #12]
    18ea:	681b      	ldr	r3, [r3, #0]
    18ec:	9304      	str	r3, [sp, #16]
    18ee:	2300      	movs	r3, #0
    18f0:	9305      	str	r3, [sp, #20]
				break;
    18f2:	e01e      	b.n	1932 <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    18f4:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    18f8:	2b63      	cmp	r3, #99	; 0x63
    18fa:	d007      	beq.n	190c <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    18fc:	9b03      	ldr	r3, [sp, #12]
    18fe:	1d1a      	adds	r2, r3, #4
    1900:	9203      	str	r2, [sp, #12]
    1902:	681b      	ldr	r3, [r3, #0]
    1904:	9304      	str	r3, [sp, #16]
    1906:	2300      	movs	r3, #0
    1908:	9305      	str	r3, [sp, #20]
    190a:	e012      	b.n	1932 <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    190c:	9b03      	ldr	r3, [sp, #12]
    190e:	1d1a      	adds	r2, r3, #4
    1910:	9203      	str	r2, [sp, #12]
    1912:	681b      	ldr	r3, [r3, #0]
    1914:	9304      	str	r3, [sp, #16]
    1916:	2300      	movs	r3, #0
    1918:	9305      	str	r3, [sp, #20]
    191a:	e00a      	b.n	1932 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    191c:	9b03      	ldr	r3, [sp, #12]
    191e:	3307      	adds	r3, #7
    1920:	f023 0307 	bic.w	r3, r3, #7
    1924:	f103 0208 	add.w	r2, r3, #8
    1928:	9203      	str	r2, [sp, #12]
    192a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    192e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    1932:	2901      	cmp	r1, #1
    1934:	d01c      	beq.n	1970 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    1936:	2902      	cmp	r1, #2
    1938:	f47f aeff 	bne.w	173a <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    193c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    1940:	9304      	str	r3, [sp, #16]
    1942:	2300      	movs	r3, #0
    1944:	9305      	str	r3, [sp, #20]
    1946:	e6f8      	b.n	173a <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    1948:	9b03      	ldr	r3, [sp, #12]
    194a:	3307      	adds	r3, #7
    194c:	f023 0307 	bic.w	r3, r3, #7
    1950:	f103 0208 	add.w	r2, r3, #8
    1954:	9203      	str	r2, [sp, #12]
    1956:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    195a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    195e:	e7e8      	b.n	1932 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    1960:	9b03      	ldr	r3, [sp, #12]
    1962:	1d1a      	adds	r2, r3, #4
    1964:	9203      	str	r2, [sp, #12]
    1966:	681b      	ldr	r3, [r3, #0]
				value->uint =
    1968:	9304      	str	r3, [sp, #16]
    196a:	2300      	movs	r3, #0
    196c:	9305      	str	r3, [sp, #20]
				break;
    196e:	e7e0      	b.n	1932 <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    1970:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1974:	9304      	str	r3, [sp, #16]
    1976:	2300      	movs	r3, #0
    1978:	9305      	str	r3, [sp, #20]
    197a:	e6de      	b.n	173a <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    197c:	2908      	cmp	r1, #8
    197e:	d00b      	beq.n	1998 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    1980:	9b03      	ldr	r3, [sp, #12]
    1982:	3307      	adds	r3, #7
    1984:	f023 0307 	bic.w	r3, r3, #7
    1988:	f103 0208 	add.w	r2, r3, #8
    198c:	9203      	str	r2, [sp, #12]
    198e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1992:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1996:	e6d0      	b.n	173a <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    1998:	9b03      	ldr	r3, [sp, #12]
    199a:	3307      	adds	r3, #7
    199c:	f023 0307 	bic.w	r3, r3, #7
    19a0:	f103 0208 	add.w	r2, r3, #8
    19a4:	9203      	str	r2, [sp, #12]
    19a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    19aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    19ae:	e6c4      	b.n	173a <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    19b0:	9b03      	ldr	r3, [sp, #12]
    19b2:	1d1a      	adds	r2, r3, #4
    19b4:	9203      	str	r2, [sp, #12]
    19b6:	681b      	ldr	r3, [r3, #0]
    19b8:	9304      	str	r3, [sp, #16]
    19ba:	e6be      	b.n	173a <cbvprintf+0xae>
			OUTS(sp, fp);
    19bc:	9f02      	ldr	r7, [sp, #8]
    19be:	463b      	mov	r3, r7
    19c0:	464a      	mov	r2, r9
    19c2:	4629      	mov	r1, r5
    19c4:	4630      	mov	r0, r6
    19c6:	f008 fa35 	bl	9e34 <outs>
    19ca:	2800      	cmp	r0, #0
    19cc:	f2c0 8141 	blt.w	1c52 <cbvprintf+0x5c6>
    19d0:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    19d2:	46b9      	mov	r9, r7
			continue;
    19d4:	e662      	b.n	169c <cbvprintf+0x10>
		case '%':
			OUTC('%');
    19d6:	4629      	mov	r1, r5
    19d8:	2025      	movs	r0, #37	; 0x25
    19da:	47b0      	blx	r6
    19dc:	2800      	cmp	r0, #0
    19de:	f2c0 8138 	blt.w	1c52 <cbvprintf+0x5c6>
    19e2:	3401      	adds	r4, #1
		char sign = 0;
    19e4:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    19e6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    19ea:	f04f 0900 	mov.w	r9, #0
			break;
    19ee:	e09b      	b.n	1b28 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    19f0:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    19f4:	f1ba 0f00 	cmp.w	sl, #0
    19f8:	db07      	blt.n	1a0a <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    19fa:	4651      	mov	r1, sl
    19fc:	4648      	mov	r0, r9
    19fe:	f008 fbbd 	bl	a17c <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    1a02:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    1a06:	46d8      	mov	r8, fp
			precision = -1;

			break;
    1a08:	e08e      	b.n	1b28 <cbvprintf+0x49c>
				len = strlen(bps);
    1a0a:	4648      	mov	r0, r9
    1a0c:	f008 fbad 	bl	a16a <strlen>
    1a10:	e7f7      	b.n	1a02 <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1a12:	9b04      	ldr	r3, [sp, #16]
    1a14:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    1a18:	46d8      	mov	r8, fp
			bpe = buf + 1;
    1a1a:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    1a1e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    1a22:	e081      	b.n	1b28 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    1a24:	f018 0f08 	tst.w	r8, #8
    1a28:	d105      	bne.n	1a36 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    1a2a:	f018 0810 	ands.w	r8, r8, #16
    1a2e:	d004      	beq.n	1a3a <cbvprintf+0x3ae>
				sign = ' ';
    1a30:	f04f 0820 	mov.w	r8, #32
    1a34:	e001      	b.n	1a3a <cbvprintf+0x3ae>
				sign = '+';
    1a36:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    1a3a:	9a04      	ldr	r2, [sp, #16]
    1a3c:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    1a3e:	2b00      	cmp	r3, #0
    1a40:	db02      	blt.n	1a48 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    1a42:	9204      	str	r2, [sp, #16]
    1a44:	9305      	str	r3, [sp, #20]
    1a46:	e008      	b.n	1a5a <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    1a48:	4252      	negs	r2, r2
    1a4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1a4e:	9204      	str	r2, [sp, #16]
    1a50:	9305      	str	r3, [sp, #20]
				sign = '-';
    1a52:	f04f 082d 	mov.w	r8, #45	; 0x2d
    1a56:	e000      	b.n	1a5a <cbvprintf+0x3ce>
		switch (conv->specifier) {
    1a58:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    1a5a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1a5e:	9300      	str	r3, [sp, #0]
    1a60:	ab0a      	add	r3, sp, #40	; 0x28
    1a62:	aa06      	add	r2, sp, #24
    1a64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1a68:	f008 f97a 	bl	9d60 <encode_uint>
    1a6c:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    1a6e:	f1ba 0f00 	cmp.w	sl, #0
    1a72:	f2c0 8088 	blt.w	1b86 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    1a76:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1a7a:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    1a7e:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1a82:	f36f 1286 	bfc	r2, #6, #1
    1a86:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    1a8a:	459a      	cmp	sl, r3
    1a8c:	d97e      	bls.n	1b8c <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    1a8e:	ebaa 0303 	sub.w	r3, sl, r3
    1a92:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    1a94:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1a98:	e046      	b.n	1b28 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    1a9a:	9804      	ldr	r0, [sp, #16]
    1a9c:	b928      	cbnz	r0, 1aaa <cbvprintf+0x41e>
		char sign = 0;
    1a9e:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    1aa0:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 1c58 <cbvprintf+0x5cc>
			bps = "(nil)";
    1aa4:	f1aa 0905 	sub.w	r9, sl, #5
    1aa8:	e03e      	b.n	1b28 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1aaa:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1aae:	9300      	str	r3, [sp, #0]
    1ab0:	ab0a      	add	r3, sp, #40	; 0x28
    1ab2:	aa06      	add	r2, sp, #24
    1ab4:	2100      	movs	r1, #0
    1ab6:	f008 f953 	bl	9d60 <encode_uint>
    1aba:	4681      	mov	r9, r0
				conv->altform_0c = true;
    1abc:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1ac0:	f043 0310 	orr.w	r3, r3, #16
    1ac4:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    1ac8:	2378      	movs	r3, #120	; 0x78
    1aca:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    1ace:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    1ad0:	e7cd      	b.n	1a6e <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    1ad2:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    1ad4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1ad8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    1adc:	2b07      	cmp	r3, #7
    1ade:	d806      	bhi.n	1aee <cbvprintf+0x462>
    1ae0:	e8df f003 	tbb	[pc, r3]
    1ae4:	0f0d0b04 	.word	0x0f0d0b04
    1ae8:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    1aec:	6014      	str	r4, [r2, #0]
		char sign = 0;
    1aee:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    1af0:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1af4:	f04f 0900 	mov.w	r9, #0
}
    1af8:	e016      	b.n	1b28 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    1afa:	7014      	strb	r4, [r2, #0]
		break;
    1afc:	e7f7      	b.n	1aee <cbvprintf+0x462>
		*(short *)dp = (short)count;
    1afe:	8014      	strh	r4, [r2, #0]
		break;
    1b00:	e7f5      	b.n	1aee <cbvprintf+0x462>
		*(long *)dp = (long)count;
    1b02:	6014      	str	r4, [r2, #0]
		break;
    1b04:	e7f3      	b.n	1aee <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    1b06:	17e3      	asrs	r3, r4, #31
    1b08:	6014      	str	r4, [r2, #0]
    1b0a:	6053      	str	r3, [r2, #4]
		break;
    1b0c:	e7ef      	b.n	1aee <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    1b0e:	17e3      	asrs	r3, r4, #31
    1b10:	6014      	str	r4, [r2, #0]
    1b12:	6053      	str	r3, [r2, #4]
		break;
    1b14:	e7eb      	b.n	1aee <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    1b16:	6014      	str	r4, [r2, #0]
		break;
    1b18:	e7e9      	b.n	1aee <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1b1a:	6014      	str	r4, [r2, #0]
		break;
    1b1c:	e7e7      	b.n	1aee <cbvprintf+0x462>
		switch (conv->specifier) {
    1b1e:	46d8      	mov	r8, fp
    1b20:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1b24:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    1b28:	f1b9 0f00 	cmp.w	r9, #0
    1b2c:	f000 808d 	beq.w	1c4a <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    1b30:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    1b34:	f1b8 0f00 	cmp.w	r8, #0
    1b38:	d000      	beq.n	1b3c <cbvprintf+0x4b0>
			nj_len += 1U;
    1b3a:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    1b3c:	f89d 201a 	ldrb.w	r2, [sp, #26]
    1b40:	f012 0f10 	tst.w	r2, #16
    1b44:	d025      	beq.n	1b92 <cbvprintf+0x506>
			nj_len += 2U;
    1b46:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    1b48:	9907      	ldr	r1, [sp, #28]
    1b4a:	440b      	add	r3, r1
		if (conv->pad_fp) {
    1b4c:	f012 0f40 	tst.w	r2, #64	; 0x40
    1b50:	d001      	beq.n	1b56 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    1b52:	9a08      	ldr	r2, [sp, #32]
    1b54:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    1b56:	2f00      	cmp	r7, #0
    1b58:	dd31      	ble.n	1bbe <cbvprintf+0x532>
			width -= (int)nj_len;
    1b5a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    1b5c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1b60:	f013 0f04 	tst.w	r3, #4
    1b64:	d12b      	bne.n	1bbe <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    1b66:	f013 0f40 	tst.w	r3, #64	; 0x40
    1b6a:	d017      	beq.n	1b9c <cbvprintf+0x510>
					if (sign != 0) {
    1b6c:	f1b8 0f00 	cmp.w	r8, #0
    1b70:	d017      	beq.n	1ba2 <cbvprintf+0x516>
						OUTC(sign);
    1b72:	4629      	mov	r1, r5
    1b74:	4640      	mov	r0, r8
    1b76:	47b0      	blx	r6
    1b78:	2800      	cmp	r0, #0
    1b7a:	db6a      	blt.n	1c52 <cbvprintf+0x5c6>
    1b7c:	3401      	adds	r4, #1
						sign = 0;
    1b7e:	46d8      	mov	r8, fp
					}
					pad = '0';
    1b80:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1b84:	e00f      	b.n	1ba6 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    1b86:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1b8a:	e7cd      	b.n	1b28 <cbvprintf+0x49c>
    1b8c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1b90:	e7ca      	b.n	1b28 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    1b92:	f012 0f08 	tst.w	r2, #8
    1b96:	d0d7      	beq.n	1b48 <cbvprintf+0x4bc>
			nj_len += 1U;
    1b98:	3301      	adds	r3, #1
    1b9a:	e7d5      	b.n	1b48 <cbvprintf+0x4bc>
				char pad = ' ';
    1b9c:	f04f 0b20 	mov.w	fp, #32
    1ba0:	e001      	b.n	1ba6 <cbvprintf+0x51a>
					pad = '0';
    1ba2:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1ba6:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    1ba8:	1e5f      	subs	r7, r3, #1
    1baa:	2b00      	cmp	r3, #0
    1bac:	dd07      	ble.n	1bbe <cbvprintf+0x532>
					OUTC(pad);
    1bae:	4629      	mov	r1, r5
    1bb0:	4658      	mov	r0, fp
    1bb2:	47b0      	blx	r6
    1bb4:	2800      	cmp	r0, #0
    1bb6:	db4c      	blt.n	1c52 <cbvprintf+0x5c6>
    1bb8:	3401      	adds	r4, #1
				while (width-- > 0) {
    1bba:	463b      	mov	r3, r7
    1bbc:	e7f4      	b.n	1ba8 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1bbe:	f1b8 0f00 	cmp.w	r8, #0
    1bc2:	d005      	beq.n	1bd0 <cbvprintf+0x544>
			OUTC(sign);
    1bc4:	4629      	mov	r1, r5
    1bc6:	4640      	mov	r0, r8
    1bc8:	47b0      	blx	r6
    1bca:	2800      	cmp	r0, #0
    1bcc:	db41      	blt.n	1c52 <cbvprintf+0x5c6>
    1bce:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    1bd0:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1bd4:	f3c3 1200 	ubfx	r2, r3, #4, #1
    1bd8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1bdc:	4313      	orrs	r3, r2
    1bde:	d005      	beq.n	1bec <cbvprintf+0x560>
				OUTC('0');
    1be0:	4629      	mov	r1, r5
    1be2:	2030      	movs	r0, #48	; 0x30
    1be4:	47b0      	blx	r6
    1be6:	2800      	cmp	r0, #0
    1be8:	db33      	blt.n	1c52 <cbvprintf+0x5c6>
    1bea:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    1bec:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1bf0:	f013 0f10 	tst.w	r3, #16
    1bf4:	d006      	beq.n	1c04 <cbvprintf+0x578>
				OUTC(conv->specifier);
    1bf6:	4629      	mov	r1, r5
    1bf8:	f89d 001b 	ldrb.w	r0, [sp, #27]
    1bfc:	47b0      	blx	r6
    1bfe:	2800      	cmp	r0, #0
    1c00:	db27      	blt.n	1c52 <cbvprintf+0x5c6>
    1c02:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    1c04:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    1c06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	dd07      	ble.n	1c1e <cbvprintf+0x592>
				OUTC('0');
    1c0e:	4629      	mov	r1, r5
    1c10:	2030      	movs	r0, #48	; 0x30
    1c12:	47b0      	blx	r6
    1c14:	2800      	cmp	r0, #0
    1c16:	db1c      	blt.n	1c52 <cbvprintf+0x5c6>
    1c18:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    1c1a:	4643      	mov	r3, r8
    1c1c:	e7f3      	b.n	1c06 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    1c1e:	4653      	mov	r3, sl
    1c20:	464a      	mov	r2, r9
    1c22:	4629      	mov	r1, r5
    1c24:	4630      	mov	r0, r6
    1c26:	f008 f905 	bl	9e34 <outs>
    1c2a:	2800      	cmp	r0, #0
    1c2c:	db11      	blt.n	1c52 <cbvprintf+0x5c6>
    1c2e:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    1c30:	2f00      	cmp	r7, #0
    1c32:	dd07      	ble.n	1c44 <cbvprintf+0x5b8>
			OUTC(' ');
    1c34:	4629      	mov	r1, r5
    1c36:	2020      	movs	r0, #32
    1c38:	47b0      	blx	r6
    1c3a:	2800      	cmp	r0, #0
    1c3c:	db09      	blt.n	1c52 <cbvprintf+0x5c6>
    1c3e:	3401      	adds	r4, #1
			--width;
    1c40:	3f01      	subs	r7, #1
    1c42:	e7f5      	b.n	1c30 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    1c44:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1c48:	e528      	b.n	169c <cbvprintf+0x10>
    1c4a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1c4e:	e525      	b.n	169c <cbvprintf+0x10>
		}
	}

	return count;
    1c50:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    1c52:	b011      	add	sp, #68	; 0x44
    1c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c58:	0000b55d 	.word	0x0000b55d

00001c5c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1c5c:	b508      	push	{r3, lr}
	__asm__ volatile(
    1c5e:	f04f 0220 	mov.w	r2, #32
    1c62:	f3ef 8311 	mrs	r3, BASEPRI
    1c66:	f382 8812 	msr	BASEPRI_MAX, r2
    1c6a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1c6e:	f001 ff07 	bl	3a80 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1c72:	4803      	ldr	r0, [pc, #12]	; (1c80 <sys_reboot+0x24>)
    1c74:	f007 ff7a 	bl	9b6c <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1c78:	f000 ffa0 	bl	2bbc <arch_cpu_idle>
    1c7c:	e7fc      	b.n	1c78 <sys_reboot+0x1c>
    1c7e:	bf00      	nop
    1c80:	0000b560 	.word	0x0000b560

00001c84 <msg_process>:

static void msg_process(union log_msgs msg, bool bypass)
{
	struct log_backend const *backend;

	if (!bypass) {
    1c84:	2900      	cmp	r1, #0
    1c86:	d150      	bne.n	1d2a <msg_process+0xa6>
{
    1c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1c8c:	4607      	mov	r7, r0
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    1c8e:	2400      	movs	r4, #0
    1c90:	e022      	b.n	1cd8 <msg_process+0x54>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
    1c92:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1d2c <msg_process+0xa8>
    1c96:	f44f 7399 	mov.w	r3, #306	; 0x132
    1c9a:	464a      	mov	r2, r9
    1c9c:	4924      	ldr	r1, [pc, #144]	; (1d30 <msg_process+0xac>)
    1c9e:	4825      	ldr	r0, [pc, #148]	; (1d34 <msg_process+0xb0>)
    1ca0:	f008 f8e9 	bl	9e76 <assert_print>
    1ca4:	f44f 7199 	mov.w	r1, #306	; 0x132
    1ca8:	4648      	mov	r0, r9
    1caa:	f008 f8dd 	bl	9e68 <assert_post_action>
    1cae:	e01f      	b.n	1cf0 <msg_process+0x6c>
	__ASSERT_NO_MSG(backend != NULL);
    1cb0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1d2c <msg_process+0xa8>
    1cb4:	2385      	movs	r3, #133	; 0x85
    1cb6:	464a      	mov	r2, r9
    1cb8:	491d      	ldr	r1, [pc, #116]	; (1d30 <msg_process+0xac>)
    1cba:	481e      	ldr	r0, [pc, #120]	; (1d34 <msg_process+0xb0>)
    1cbc:	f008 f8db 	bl	9e76 <assert_print>
    1cc0:	2185      	movs	r1, #133	; 0x85
    1cc2:	4648      	mov	r0, r9
    1cc4:	f008 f8d0 	bl	9e68 <assert_post_action>
    1cc8:	e01e      	b.n	1d08 <msg_process+0x84>
	backend->api->process(backend, msg);
    1cca:	f858 3005 	ldr.w	r3, [r8, r5]
    1cce:	681b      	ldr	r3, [r3, #0]
    1cd0:	4639      	mov	r1, r7
    1cd2:	4630      	mov	r0, r6
    1cd4:	4798      	blx	r3
    1cd6:	3401      	adds	r4, #1
    1cd8:	4b17      	ldr	r3, [pc, #92]	; (1d38 <msg_process+0xb4>)
    1cda:	4a18      	ldr	r2, [pc, #96]	; (1d3c <msg_process+0xb8>)
    1cdc:	1a9b      	subs	r3, r3, r2
    1cde:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1ce2:	da20      	bge.n	1d26 <msg_process+0xa2>
	return &__log_backends_start[idx];
    1ce4:	ea4f 1804 	mov.w	r8, r4, lsl #4
    1ce8:	4d14      	ldr	r5, [pc, #80]	; (1d3c <msg_process+0xb8>)
	__ASSERT_NO_MSG(backend != NULL);
    1cea:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    1cee:	d0d0      	beq.n	1c92 <msg_process+0xe>
	return backend->cb->active;
    1cf0:	6873      	ldr	r3, [r6, #4]
    1cf2:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);
			if (log_backend_is_active(backend) &&
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d0ee      	beq.n	1cd6 <msg_process+0x52>
			    msg_filter_check(backend, msg)) {
    1cf8:	4639      	mov	r1, r7
    1cfa:	4630      	mov	r0, r6
    1cfc:	f008 f8cc 	bl	9e98 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    1d00:	2800      	cmp	r0, #0
    1d02:	d0e8      	beq.n	1cd6 <msg_process+0x52>
	__ASSERT_NO_MSG(backend != NULL);
    1d04:	2e00      	cmp	r6, #0
    1d06:	d0d3      	beq.n	1cb0 <msg_process+0x2c>
	__ASSERT_NO_MSG(msg != NULL);
    1d08:	2f00      	cmp	r7, #0
    1d0a:	d1de      	bne.n	1cca <msg_process+0x46>
    1d0c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 1d2c <msg_process+0xa8>
    1d10:	2386      	movs	r3, #134	; 0x86
    1d12:	464a      	mov	r2, r9
    1d14:	490a      	ldr	r1, [pc, #40]	; (1d40 <msg_process+0xbc>)
    1d16:	4807      	ldr	r0, [pc, #28]	; (1d34 <msg_process+0xb0>)
    1d18:	f008 f8ad 	bl	9e76 <assert_print>
    1d1c:	2186      	movs	r1, #134	; 0x86
    1d1e:	4648      	mov	r0, r9
    1d20:	f008 f8a2 	bl	9e68 <assert_post_action>
    1d24:	e7d1      	b.n	1cca <msg_process+0x46>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    1d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1d2a:	4770      	bx	lr
    1d2c:	0000b58c 	.word	0x0000b58c
    1d30:	0000b5c4 	.word	0x0000b5c4
    1d34:	0000b180 	.word	0x0000b180
    1d38:	0000afec 	.word	0x0000afec
    1d3c:	0000afcc 	.word	0x0000afcc
    1d40:	0000b5dc 	.word	0x0000b5dc

00001d44 <log_format_func_t_get>:
}
    1d44:	4b01      	ldr	r3, [pc, #4]	; (1d4c <log_format_func_t_get+0x8>)
    1d46:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1d4a:	4770      	bx	lr
    1d4c:	0000b660 	.word	0x0000b660

00001d50 <log_init>:
{
    1d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
    1d52:	4b20      	ldr	r3, [pc, #128]	; (1dd4 <log_init+0x84>)
    1d54:	4a20      	ldr	r2, [pc, #128]	; (1dd8 <log_init+0x88>)
    1d56:	1a9b      	subs	r3, r3, r2
    1d58:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    1d5a:	2b90      	cmp	r3, #144	; 0x90
    1d5c:	d80e      	bhi.n	1d7c <log_init+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1d5e:	4b1f      	ldr	r3, [pc, #124]	; (1ddc <log_init+0x8c>)
    1d60:	f3bf 8f5b 	dmb	ish
    1d64:	e853 2f00 	ldrex	r2, [r3]
    1d68:	1c51      	adds	r1, r2, #1
    1d6a:	e843 1000 	strex	r0, r1, [r3]
    1d6e:	2800      	cmp	r0, #0
    1d70:	d1f8      	bne.n	1d64 <log_init+0x14>
    1d72:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    1d76:	bb5a      	cbnz	r2, 1dd0 <log_init+0x80>
	for (i = 0; i < log_backend_count_get(); i++) {
    1d78:	2400      	movs	r4, #0
    1d7a:	e017      	b.n	1dac <log_init+0x5c>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    1d7c:	4c18      	ldr	r4, [pc, #96]	; (1de0 <log_init+0x90>)
    1d7e:	f240 2373 	movw	r3, #627	; 0x273
    1d82:	4622      	mov	r2, r4
    1d84:	4917      	ldr	r1, [pc, #92]	; (1de4 <log_init+0x94>)
    1d86:	4818      	ldr	r0, [pc, #96]	; (1de8 <log_init+0x98>)
    1d88:	f008 f875 	bl	9e76 <assert_print>
    1d8c:	f240 2173 	movw	r1, #627	; 0x273
    1d90:	4620      	mov	r0, r4
    1d92:	f008 f869 	bl	9e68 <assert_post_action>
    1d96:	e7e2      	b.n	1d5e <log_init+0xe>
					   backend->cb->ctx,
    1d98:	4b0f      	ldr	r3, [pc, #60]	; (1dd8 <log_init+0x88>)
    1d9a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    1d9e:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    1da0:	2204      	movs	r2, #4
    1da2:	6819      	ldr	r1, [r3, #0]
    1da4:	4628      	mov	r0, r5
    1da6:	f000 f8d3 	bl	1f50 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1daa:	3401      	adds	r4, #1
    1dac:	42b4      	cmp	r4, r6
    1dae:	da0f      	bge.n	1dd0 <log_init+0x80>
		const struct log_backend *backend = log_backend_get(i);
    1db0:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
    1db2:	4d09      	ldr	r5, [pc, #36]	; (1dd8 <log_init+0x88>)
    1db4:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    1db8:	7b2b      	ldrb	r3, [r5, #12]
    1dba:	2b00      	cmp	r3, #0
    1dbc:	d0f5      	beq.n	1daa <log_init+0x5a>
			if (backend->api->init != NULL) {
    1dbe:	0123      	lsls	r3, r4, #4
    1dc0:	4a05      	ldr	r2, [pc, #20]	; (1dd8 <log_init+0x88>)
    1dc2:	58d3      	ldr	r3, [r2, r3]
    1dc4:	699b      	ldr	r3, [r3, #24]
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	d0e6      	beq.n	1d98 <log_init+0x48>
				backend->api->init(backend);
    1dca:	4628      	mov	r0, r5
    1dcc:	4798      	blx	r3
    1dce:	e7e3      	b.n	1d98 <log_init+0x48>
}
    1dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dd2:	bf00      	nop
    1dd4:	0000afec 	.word	0x0000afec
    1dd8:	0000afcc 	.word	0x0000afcc
    1ddc:	20004404 	.word	0x20004404
    1de0:	0000b5f0 	.word	0x0000b5f0
    1de4:	0000b638 	.word	0x0000b638
    1de8:	0000b180 	.word	0x0000b180

00001dec <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    1dec:	b138      	cbz	r0, 1dfe <log_set_timestamp_func+0x12>
{
    1dee:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    1df0:	4a04      	ldr	r2, [pc, #16]	; (1e04 <log_set_timestamp_func+0x18>)
    1df2:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    1df4:	4608      	mov	r0, r1
    1df6:	f000 fabf 	bl	2378 <log_output_timestamp_freq_set>
	return 0;
    1dfa:	2000      	movs	r0, #0
}
    1dfc:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1dfe:	f06f 0015 	mvn.w	r0, #21
}
    1e02:	4770      	bx	lr
    1e04:	20004004 	.word	0x20004004

00001e08 <log_core_init>:
{
    1e08:	b508      	push	{r3, lr}
	panic_mode = false;
    1e0a:	2300      	movs	r3, #0
    1e0c:	4a04      	ldr	r2, [pc, #16]	; (1e20 <log_core_init+0x18>)
    1e0e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1e10:	4a04      	ldr	r2, [pc, #16]	; (1e24 <log_core_init+0x1c>)
    1e12:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    1e14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1e18:	4803      	ldr	r0, [pc, #12]	; (1e28 <log_core_init+0x20>)
    1e1a:	f7ff ffe7 	bl	1dec <log_set_timestamp_func>
}
    1e1e:	bd08      	pop	{r3, pc}
    1e20:	20005151 	.word	0x20005151
    1e24:	20004400 	.word	0x20004400
    1e28:	00009e9d 	.word	0x00009e9d

00001e2c <z_impl_log_panic>:
	if (panic_mode) {
    1e2c:	4b20      	ldr	r3, [pc, #128]	; (1eb0 <z_impl_log_panic+0x84>)
    1e2e:	781b      	ldrb	r3, [r3, #0]
    1e30:	b103      	cbz	r3, 1e34 <z_impl_log_panic+0x8>
    1e32:	4770      	bx	lr
{
    1e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
    1e38:	f7ff ff8a 	bl	1d50 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1e3c:	2400      	movs	r4, #0
    1e3e:	e013      	b.n	1e68 <z_impl_log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
    1e40:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1eb4 <z_impl_log_panic+0x88>
    1e44:	f44f 7399 	mov.w	r3, #306	; 0x132
    1e48:	4642      	mov	r2, r8
    1e4a:	491b      	ldr	r1, [pc, #108]	; (1eb8 <z_impl_log_panic+0x8c>)
    1e4c:	481b      	ldr	r0, [pc, #108]	; (1ebc <z_impl_log_panic+0x90>)
    1e4e:	f008 f812 	bl	9e76 <assert_print>
    1e52:	f44f 7199 	mov.w	r1, #306	; 0x132
    1e56:	4640      	mov	r0, r8
    1e58:	f008 f806 	bl	9e68 <assert_post_action>
    1e5c:	e00f      	b.n	1e7e <z_impl_log_panic+0x52>
	backend->api->panic(backend);
    1e5e:	597b      	ldr	r3, [r7, r5]
    1e60:	695b      	ldr	r3, [r3, #20]
    1e62:	4630      	mov	r0, r6
    1e64:	4798      	blx	r3
    1e66:	3401      	adds	r4, #1
    1e68:	4b15      	ldr	r3, [pc, #84]	; (1ec0 <z_impl_log_panic+0x94>)
    1e6a:	4a16      	ldr	r2, [pc, #88]	; (1ec4 <z_impl_log_panic+0x98>)
    1e6c:	1a9b      	subs	r3, r3, r2
    1e6e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1e72:	da17      	bge.n	1ea4 <z_impl_log_panic+0x78>
	return &__log_backends_start[idx];
    1e74:	0127      	lsls	r7, r4, #4
    1e76:	4d13      	ldr	r5, [pc, #76]	; (1ec4 <z_impl_log_panic+0x98>)
	__ASSERT_NO_MSG(backend != NULL);
    1e78:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    1e7c:	d0e0      	beq.n	1e40 <z_impl_log_panic+0x14>
	return backend->cb->active;
    1e7e:	6873      	ldr	r3, [r6, #4]
    1e80:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1e82:	2b00      	cmp	r3, #0
    1e84:	d0ef      	beq.n	1e66 <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
    1e86:	2e00      	cmp	r6, #0
    1e88:	d1e9      	bne.n	1e5e <z_impl_log_panic+0x32>
    1e8a:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1eb4 <z_impl_log_panic+0x88>
    1e8e:	23d7      	movs	r3, #215	; 0xd7
    1e90:	4642      	mov	r2, r8
    1e92:	4909      	ldr	r1, [pc, #36]	; (1eb8 <z_impl_log_panic+0x8c>)
    1e94:	4809      	ldr	r0, [pc, #36]	; (1ebc <z_impl_log_panic+0x90>)
    1e96:	f007 ffee 	bl	9e76 <assert_print>
    1e9a:	21d7      	movs	r1, #215	; 0xd7
    1e9c:	4640      	mov	r0, r8
    1e9e:	f007 ffe3 	bl	9e68 <assert_post_action>
    1ea2:	e7dc      	b.n	1e5e <z_impl_log_panic+0x32>
	panic_mode = true;
    1ea4:	4b02      	ldr	r3, [pc, #8]	; (1eb0 <z_impl_log_panic+0x84>)
    1ea6:	2201      	movs	r2, #1
    1ea8:	701a      	strb	r2, [r3, #0]
}
    1eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1eae:	bf00      	nop
    1eb0:	20005151 	.word	0x20005151
    1eb4:	0000b58c 	.word	0x0000b58c
    1eb8:	0000b5c4 	.word	0x0000b5c4
    1ebc:	0000b180 	.word	0x0000b180
    1ec0:	0000afec 	.word	0x0000afec
    1ec4:	0000afcc 	.word	0x0000afcc

00001ec8 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    1ec8:	4b01      	ldr	r3, [pc, #4]	; (1ed0 <z_log_notify_backend_enabled+0x8>)
    1eca:	2201      	movs	r2, #1
    1ecc:	701a      	strb	r2, [r3, #0]
}
    1ece:	4770      	bx	lr
    1ed0:	20005150 	.word	0x20005150

00001ed4 <z_log_dropped>:
    1ed4:	4b0d      	ldr	r3, [pc, #52]	; (1f0c <z_log_dropped+0x38>)
    1ed6:	f3bf 8f5b 	dmb	ish
    1eda:	e853 2f00 	ldrex	r2, [r3]
    1ede:	3201      	adds	r2, #1
    1ee0:	e843 2100 	strex	r1, r2, [r3]
    1ee4:	2900      	cmp	r1, #0
    1ee6:	d1f8      	bne.n	1eda <z_log_dropped+0x6>
    1ee8:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    1eec:	b900      	cbnz	r0, 1ef0 <z_log_dropped+0x1c>
		atomic_dec(&buffered_cnt);
	}
}
    1eee:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1ef0:	4b07      	ldr	r3, [pc, #28]	; (1f10 <z_log_dropped+0x3c>)
    1ef2:	f3bf 8f5b 	dmb	ish
    1ef6:	e853 2f00 	ldrex	r2, [r3]
    1efa:	3a01      	subs	r2, #1
    1efc:	e843 2100 	strex	r1, r2, [r3]
    1f00:	2900      	cmp	r1, #0
    1f02:	d1f8      	bne.n	1ef6 <z_log_dropped+0x22>
    1f04:	f3bf 8f5b 	dmb	ish
    1f08:	e7f1      	b.n	1eee <z_log_dropped+0x1a>
    1f0a:	bf00      	nop
    1f0c:	20004400 	.word	0x20004400
    1f10:	200043fc 	.word	0x200043fc

00001f14 <z_log_msg2_commit>:
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
    1f14:	b510      	push	{r4, lr}
    1f16:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1f18:	4b04      	ldr	r3, [pc, #16]	; (1f2c <z_log_msg2_commit+0x18>)
    1f1a:	681b      	ldr	r3, [r3, #0]
    1f1c:	4798      	blx	r3
    1f1e:	60a0      	str	r0, [r4, #8]
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    1f20:	2100      	movs	r1, #0
    1f22:	4620      	mov	r0, r4
    1f24:	f7ff feae 	bl	1c84 <msg_process>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    1f28:	bd10      	pop	{r4, pc}
    1f2a:	bf00      	nop
    1f2c:	20004004 	.word	0x20004004

00001f30 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1f30:	4b05      	ldr	r3, [pc, #20]	; (1f48 <log_source_name_get+0x18>)
    1f32:	4a06      	ldr	r2, [pc, #24]	; (1f4c <log_source_name_get+0x1c>)
    1f34:	1a9b      	subs	r3, r3, r2
    1f36:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    1f3a:	d202      	bcs.n	1f42 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    1f3c:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    1f40:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1f42:	2000      	movs	r0, #0
}
    1f44:	4770      	bx	lr
    1f46:	bf00      	nop
    1f48:	0000afcc 	.word	0x0000afcc
    1f4c:	0000af84 	.word	0x0000af84

00001f50 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    1f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f52:	4604      	mov	r4, r0
    1f54:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1f56:	4d1e      	ldr	r5, [pc, #120]	; (1fd0 <log_backend_enable+0x80>)
    1f58:	1b45      	subs	r5, r0, r5
    1f5a:	112d      	asrs	r5, r5, #4
    1f5c:	3501      	adds	r5, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    1f5e:	6803      	ldr	r3, [r0, #0]
    1f60:	681b      	ldr	r3, [r3, #0]
    1f62:	b163      	cbz	r3, 1f7e <log_backend_enable+0x2e>
	}

	log_backend_id_set(backend, id);
    1f64:	b2ed      	uxtb	r5, r5
	__ASSERT_NO_MSG(backend != NULL);
    1f66:	b1cc      	cbz	r4, 1f9c <log_backend_enable+0x4c>
	backend->cb->id = id;
    1f68:	6863      	ldr	r3, [r4, #4]
    1f6a:	711d      	strb	r5, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    1f6c:	b314      	cbz	r4, 1fb4 <log_backend_enable+0x64>
	backend->cb->ctx = ctx;
    1f6e:	6863      	ldr	r3, [r4, #4]
    1f70:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    1f72:	6863      	ldr	r3, [r4, #4]
    1f74:	2201      	movs	r2, #1
    1f76:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1f78:	f7ff ffa6 	bl	1ec8 <z_log_notify_backend_enabled>
}
    1f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    1f7e:	4f15      	ldr	r7, [pc, #84]	; (1fd4 <log_backend_enable+0x84>)
    1f80:	23bb      	movs	r3, #187	; 0xbb
    1f82:	463a      	mov	r2, r7
    1f84:	4914      	ldr	r1, [pc, #80]	; (1fd8 <log_backend_enable+0x88>)
    1f86:	4815      	ldr	r0, [pc, #84]	; (1fdc <log_backend_enable+0x8c>)
    1f88:	f007 ff75 	bl	9e76 <assert_print>
    1f8c:	4814      	ldr	r0, [pc, #80]	; (1fe0 <log_backend_enable+0x90>)
    1f8e:	f007 ff72 	bl	9e76 <assert_print>
    1f92:	21bb      	movs	r1, #187	; 0xbb
    1f94:	4638      	mov	r0, r7
    1f96:	f007 ff67 	bl	9e68 <assert_post_action>
    1f9a:	e7e3      	b.n	1f64 <log_backend_enable+0x14>
	__ASSERT_NO_MSG(backend != NULL);
    1f9c:	4f11      	ldr	r7, [pc, #68]	; (1fe4 <log_backend_enable+0x94>)
    1f9e:	23e6      	movs	r3, #230	; 0xe6
    1fa0:	463a      	mov	r2, r7
    1fa2:	4911      	ldr	r1, [pc, #68]	; (1fe8 <log_backend_enable+0x98>)
    1fa4:	480d      	ldr	r0, [pc, #52]	; (1fdc <log_backend_enable+0x8c>)
    1fa6:	f007 ff66 	bl	9e76 <assert_print>
    1faa:	21e6      	movs	r1, #230	; 0xe6
    1fac:	4638      	mov	r0, r7
    1fae:	f007 ff5b 	bl	9e68 <assert_post_action>
    1fb2:	e7d9      	b.n	1f68 <log_backend_enable+0x18>
	__ASSERT_NO_MSG(backend != NULL);
    1fb4:	4d0b      	ldr	r5, [pc, #44]	; (1fe4 <log_backend_enable+0x94>)
    1fb6:	f240 1317 	movw	r3, #279	; 0x117
    1fba:	462a      	mov	r2, r5
    1fbc:	490a      	ldr	r1, [pc, #40]	; (1fe8 <log_backend_enable+0x98>)
    1fbe:	4807      	ldr	r0, [pc, #28]	; (1fdc <log_backend_enable+0x8c>)
    1fc0:	f007 ff59 	bl	9e76 <assert_print>
    1fc4:	f240 1117 	movw	r1, #279	; 0x117
    1fc8:	4628      	mov	r0, r5
    1fca:	f007 ff4d 	bl	9e68 <assert_post_action>
    1fce:	e7ce      	b.n	1f6e <log_backend_enable+0x1e>
    1fd0:	0000afcc 	.word	0x0000afcc
    1fd4:	0000b66c 	.word	0x0000b66c
    1fd8:	0000b6c8 	.word	0x0000b6c8
    1fdc:	0000b180 	.word	0x0000b180
    1fe0:	0000b6e0 	.word	0x0000b6e0
    1fe4:	0000b58c 	.word	0x0000b58c
    1fe8:	0000b5c4 	.word	0x0000b5c4

00001fec <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1fec:	b40e      	push	{r1, r2, r3}
    1fee:	b500      	push	{lr}
    1ff0:	b082      	sub	sp, #8
    1ff2:	4601      	mov	r1, r0
    1ff4:	ab03      	add	r3, sp, #12
    1ff6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    1ffa:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1ffc:	4803      	ldr	r0, [pc, #12]	; (200c <print_formatted+0x20>)
    1ffe:	f7ff fb45 	bl	168c <cbvprintf>
	va_end(args);

	return length;
}
    2002:	b002      	add	sp, #8
    2004:	f85d eb04 	ldr.w	lr, [sp], #4
    2008:	b003      	add	sp, #12
    200a:	4770      	bx	lr
    200c:	00009ed1 	.word	0x00009ed1

00002010 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    2010:	b530      	push	{r4, r5, lr}
    2012:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    2014:	f011 0f44 	tst.w	r1, #68	; 0x44
    2018:	d005      	beq.n	2026 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    201a:	4b1a      	ldr	r3, [pc, #104]	; (2084 <timestamp_print+0x74>)
    201c:	681c      	ldr	r4, [r3, #0]
    201e:	b934      	cbnz	r4, 202e <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    2020:	2000      	movs	r0, #0
	}

	return length;
}
    2022:	b005      	add	sp, #20
    2024:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    2026:	4918      	ldr	r1, [pc, #96]	; (2088 <timestamp_print+0x78>)
    2028:	f7ff ffe0 	bl	1fec <print_formatted>
    202c:	e7f9      	b.n	2022 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    202e:	4b17      	ldr	r3, [pc, #92]	; (208c <timestamp_print+0x7c>)
    2030:	6819      	ldr	r1, [r3, #0]
    2032:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    2036:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    203a:	4a15      	ldr	r2, [pc, #84]	; (2090 <timestamp_print+0x80>)
    203c:	fba2 320c 	umull	r3, r2, r2, ip
    2040:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    2042:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    2046:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    204a:	4b12      	ldr	r3, [pc, #72]	; (2094 <timestamp_print+0x84>)
    204c:	fba3 530e 	umull	r5, r3, r3, lr
    2050:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    2052:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    2056:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    205a:	fb0c f101 	mul.w	r1, ip, r1
    205e:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2062:	fb05 1114 	mls	r1, r5, r4, r1
    2066:	fb0c f101 	mul.w	r1, ip, r1
    206a:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    206e:	9102      	str	r1, [sp, #8]
    2070:	9501      	str	r5, [sp, #4]
    2072:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    2076:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    207a:	9100      	str	r1, [sp, #0]
    207c:	4906      	ldr	r1, [pc, #24]	; (2098 <timestamp_print+0x88>)
    207e:	f7ff ffb5 	bl	1fec <print_formatted>
    2082:	e7ce      	b.n	2022 <timestamp_print+0x12>
    2084:	20004408 	.word	0x20004408
    2088:	0000b704 	.word	0x0000b704
    208c:	2000440c 	.word	0x2000440c
    2090:	91a2b3c5 	.word	0x91a2b3c5
    2094:	88888889 	.word	0x88888889
    2098:	0000b710 	.word	0x0000b710

0000209c <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    209c:	b161      	cbz	r1, 20b8 <color_print+0x1c>
{
    209e:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    20a0:	b12a      	cbz	r2, 20ae <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    20a2:	4a06      	ldr	r2, [pc, #24]	; (20bc <color_print+0x20>)
    20a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    20a8:	b912      	cbnz	r2, 20b0 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    20aa:	4a05      	ldr	r2, [pc, #20]	; (20c0 <color_print+0x24>)
    20ac:	e000      	b.n	20b0 <color_print+0x14>
    20ae:	4a04      	ldr	r2, [pc, #16]	; (20c0 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    20b0:	4904      	ldr	r1, [pc, #16]	; (20c4 <color_print+0x28>)
    20b2:	f7ff ff9b 	bl	1fec <print_formatted>
	}
}
    20b6:	bd08      	pop	{r3, pc}
    20b8:	4770      	bx	lr
    20ba:	bf00      	nop
    20bc:	0000b7d0 	.word	0x0000b7d0
    20c0:	0000b72c 	.word	0x0000b72c
    20c4:	0000b734 	.word	0x0000b734

000020c8 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    20c8:	f011 0f10 	tst.w	r1, #16
    20cc:	d10b      	bne.n	20e6 <newline_print+0x1e>
{
    20ce:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    20d0:	f011 0f20 	tst.w	r1, #32
    20d4:	d003      	beq.n	20de <newline_print+0x16>
		print_formatted(ctx, "\n");
    20d6:	4904      	ldr	r1, [pc, #16]	; (20e8 <newline_print+0x20>)
    20d8:	f7ff ff88 	bl	1fec <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    20dc:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    20de:	4903      	ldr	r1, [pc, #12]	; (20ec <newline_print+0x24>)
    20e0:	f7ff ff84 	bl	1fec <print_formatted>
    20e4:	e7fa      	b.n	20dc <newline_print+0x14>
    20e6:	4770      	bx	lr
    20e8:	0000b094 	.word	0x0000b094
    20ec:	0000ccd0 	.word	0x0000ccd0

000020f0 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    20f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20f4:	4605      	mov	r5, r0
    20f6:	460f      	mov	r7, r1
    20f8:	4616      	mov	r6, r2
    20fa:	4698      	mov	r8, r3
	newline_print(output, flags);
    20fc:	9906      	ldr	r1, [sp, #24]
    20fe:	f7ff ffe3 	bl	20c8 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    2102:	2400      	movs	r4, #0
    2104:	4544      	cmp	r4, r8
    2106:	da05      	bge.n	2114 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    2108:	4923      	ldr	r1, [pc, #140]	; (2198 <hexdump_line_print+0xa8>)
    210a:	4628      	mov	r0, r5
    210c:	f7ff ff6e 	bl	1fec <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2110:	3401      	adds	r4, #1
    2112:	e7f7      	b.n	2104 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2114:	2400      	movs	r4, #0
    2116:	e009      	b.n	212c <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    2118:	491f      	ldr	r1, [pc, #124]	; (2198 <hexdump_line_print+0xa8>)
    211a:	4628      	mov	r0, r5
    211c:	f7ff ff66 	bl	1fec <print_formatted>
    2120:	e00b      	b.n	213a <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    2122:	491e      	ldr	r1, [pc, #120]	; (219c <hexdump_line_print+0xac>)
    2124:	4628      	mov	r0, r5
    2126:	f7ff ff61 	bl	1fec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    212a:	3401      	adds	r4, #1
    212c:	2c0f      	cmp	r4, #15
    212e:	dc0c      	bgt.n	214a <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    2130:	2c00      	cmp	r4, #0
    2132:	dd02      	ble.n	213a <hexdump_line_print+0x4a>
    2134:	f014 0f07 	tst.w	r4, #7
    2138:	d0ee      	beq.n	2118 <hexdump_line_print+0x28>
		if (i < length) {
    213a:	42b4      	cmp	r4, r6
    213c:	d2f1      	bcs.n	2122 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    213e:	5d3a      	ldrb	r2, [r7, r4]
    2140:	4917      	ldr	r1, [pc, #92]	; (21a0 <hexdump_line_print+0xb0>)
    2142:	4628      	mov	r0, r5
    2144:	f7ff ff52 	bl	1fec <print_formatted>
    2148:	e7ef      	b.n	212a <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    214a:	4916      	ldr	r1, [pc, #88]	; (21a4 <hexdump_line_print+0xb4>)
    214c:	4628      	mov	r0, r5
    214e:	f7ff ff4d 	bl	1fec <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2152:	2400      	movs	r4, #0
    2154:	e009      	b.n	216a <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    2156:	4910      	ldr	r1, [pc, #64]	; (2198 <hexdump_line_print+0xa8>)
    2158:	4628      	mov	r0, r5
    215a:	f7ff ff47 	bl	1fec <print_formatted>
    215e:	e00b      	b.n	2178 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    2160:	4911      	ldr	r1, [pc, #68]	; (21a8 <hexdump_line_print+0xb8>)
    2162:	4628      	mov	r0, r5
    2164:	f7ff ff42 	bl	1fec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2168:	3401      	adds	r4, #1
    216a:	2c0f      	cmp	r4, #15
    216c:	dc12      	bgt.n	2194 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    216e:	2c00      	cmp	r4, #0
    2170:	dd02      	ble.n	2178 <hexdump_line_print+0x88>
    2172:	f014 0f07 	tst.w	r4, #7
    2176:	d0ee      	beq.n	2156 <hexdump_line_print+0x66>
		if (i < length) {
    2178:	42b4      	cmp	r4, r6
    217a:	d206      	bcs.n	218a <hexdump_line_print+0x9a>
			char c = (char)data[i];
    217c:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    217e:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    2182:	2b5e      	cmp	r3, #94	; 0x5e
    2184:	d9ec      	bls.n	2160 <hexdump_line_print+0x70>
    2186:	222e      	movs	r2, #46	; 0x2e
    2188:	e7ea      	b.n	2160 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    218a:	4903      	ldr	r1, [pc, #12]	; (2198 <hexdump_line_print+0xa8>)
    218c:	4628      	mov	r0, r5
    218e:	f7ff ff2d 	bl	1fec <print_formatted>
    2192:	e7e9      	b.n	2168 <hexdump_line_print+0x78>
		}
	}
}
    2194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2198:	0000b75c 	.word	0x0000b75c
    219c:	0000b740 	.word	0x0000b740
    21a0:	0000b738 	.word	0x0000b738
    21a4:	0000b744 	.word	0x0000b744
    21a8:	0000b748 	.word	0x0000b748

000021ac <ids_print>:
{
    21ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21b0:	4680      	mov	r8, r0
    21b2:	4616      	mov	r6, r2
    21b4:	461d      	mov	r5, r3
    21b6:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    21ba:	b959      	cbnz	r1, 21d4 <ids_print+0x28>
	int total = 0;
    21bc:	2400      	movs	r4, #0
	if (source_id >= 0) {
    21be:	2f00      	cmp	r7, #0
    21c0:	db1c      	blt.n	21fc <ids_print+0x50>
		total += print_formatted(output,
    21c2:	b186      	cbz	r6, 21e6 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    21c4:	2301      	movs	r3, #1
    21c6:	9a07      	ldr	r2, [sp, #28]
    21c8:	4093      	lsls	r3, r2
				(func_on &&
    21ca:	f013 0f10 	tst.w	r3, #16
    21ce:	d118      	bne.n	2202 <ids_print+0x56>
		total += print_formatted(output,
    21d0:	4e0d      	ldr	r6, [pc, #52]	; (2208 <ids_print+0x5c>)
    21d2:	e009      	b.n	21e8 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    21d4:	4b0d      	ldr	r3, [pc, #52]	; (220c <ids_print+0x60>)
    21d6:	9a07      	ldr	r2, [sp, #28]
    21d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    21dc:	490c      	ldr	r1, [pc, #48]	; (2210 <ids_print+0x64>)
    21de:	f7ff ff05 	bl	1fec <print_formatted>
    21e2:	4604      	mov	r4, r0
    21e4:	e7eb      	b.n	21be <ids_print+0x12>
		total += print_formatted(output,
    21e6:	4e08      	ldr	r6, [pc, #32]	; (2208 <ids_print+0x5c>)
    21e8:	4639      	mov	r1, r7
    21ea:	4628      	mov	r0, r5
    21ec:	f7ff fea0 	bl	1f30 <log_source_name_get>
    21f0:	4602      	mov	r2, r0
    21f2:	4631      	mov	r1, r6
    21f4:	4640      	mov	r0, r8
    21f6:	f7ff fef9 	bl	1fec <print_formatted>
    21fa:	4404      	add	r4, r0
}
    21fc:	4620      	mov	r0, r4
    21fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    2202:	4e04      	ldr	r6, [pc, #16]	; (2214 <ids_print+0x68>)
    2204:	e7f0      	b.n	21e8 <ids_print+0x3c>
    2206:	bf00      	nop
    2208:	0000b74c 	.word	0x0000b74c
    220c:	0000b7e4 	.word	0x0000b7e4
    2210:	0000b758 	.word	0x0000b758
    2214:	0000b754 	.word	0x0000b754

00002218 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    2218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    221c:	b085      	sub	sp, #20
    221e:	4605      	mov	r5, r0
    2220:	460c      	mov	r4, r1
    2222:	4616      	mov	r6, r2
    2224:	9303      	str	r3, [sp, #12]
    2226:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    222a:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    222e:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2232:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    2236:	f007 fe49 	bl	9ecc <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    223a:	b1e8      	cbz	r0, 2278 <prefix_print+0x60>
    223c:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    223e:	4913      	ldr	r1, [pc, #76]	; (228c <prefix_print+0x74>)
    2240:	4628      	mov	r0, r5
    2242:	f7ff fed3 	bl	1fec <print_formatted>
    2246:	4607      	mov	r7, r0
	}

	if (stamp) {
    2248:	f1bb 0f00 	cmp.w	fp, #0
    224c:	d116      	bne.n	227c <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    224e:	4642      	mov	r2, r8
    2250:	4651      	mov	r1, sl
    2252:	4628      	mov	r0, r5
    2254:	f007 fe66 	bl	9f24 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    2258:	f8cd 8004 	str.w	r8, [sp, #4]
    225c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    2260:	9300      	str	r3, [sp, #0]
    2262:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    2266:	4632      	mov	r2, r6
    2268:	4649      	mov	r1, r9
    226a:	4628      	mov	r0, r5
    226c:	f7ff ff9e 	bl	21ac <ids_print>
			domain_id, source_id, level);


	return length;
}
    2270:	4438      	add	r0, r7
    2272:	b005      	add	sp, #20
    2274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    2278:	2700      	movs	r7, #0
    227a:	e7e5      	b.n	2248 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    227c:	9a03      	ldr	r2, [sp, #12]
    227e:	4621      	mov	r1, r4
    2280:	4628      	mov	r0, r5
    2282:	f7ff fec5 	bl	2010 <timestamp_print>
    2286:	4407      	add	r7, r0
    2288:	e7e1      	b.n	224e <prefix_print+0x36>
    228a:	bf00      	nop
    228c:	0000b760 	.word	0x0000b760

00002290 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    2290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2294:	b084      	sub	sp, #16
    2296:	4606      	mov	r6, r0
    2298:	460c      	mov	r4, r1
    229a:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    229c:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
    229e:	880a      	ldrh	r2, [r1, #0]
    22a0:	f3c2 1882 	ubfx	r8, r2, #6, #3
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    22a4:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
    22a8:	d037      	beq.n	231a <log_output_msg2_process+0x8a>
	return msg->hdr.source;
    22aa:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
    22ac:	7809      	ldrb	r1, [r1, #0]
    22ae:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    22b2:	b37a      	cbz	r2, 2314 <log_output_msg2_process+0x84>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    22b4:	4829      	ldr	r0, [pc, #164]	; (235c <log_output_msg2_process+0xcc>)
    22b6:	1a12      	subs	r2, r2, r0
    22b8:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    22bc:	9202      	str	r2, [sp, #8]
    22be:	9101      	str	r1, [sp, #4]
    22c0:	f8cd 8000 	str.w	r8, [sp]
    22c4:	2200      	movs	r2, #0
    22c6:	4639      	mov	r1, r7
    22c8:	4630      	mov	r0, r6
    22ca:	f7ff ffa5 	bl	2218 <prefix_print>
    22ce:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    22d0:	4625      	mov	r5, r4
    22d2:	f855 3b10 	ldr.w	r3, [r5], #16
    22d6:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    22da:	b153      	cbz	r3, 22f2 <log_output_msg2_process+0x62>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    22dc:	f1b8 0f00 	cmp.w	r8, #0
    22e0:	d11e      	bne.n	2320 <log_output_msg2_process+0x90>
    22e2:	481f      	ldr	r0, [pc, #124]	; (2360 <log_output_msg2_process+0xd0>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    22e4:	462b      	mov	r3, r5
    22e6:	4632      	mov	r2, r6
    22e8:	491e      	ldr	r1, [pc, #120]	; (2364 <log_output_msg2_process+0xd4>)
    22ea:	f007 fbf3 	bl	9ad4 <cbpprintf_external>
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    22ee:	2800      	cmp	r0, #0
    22f0:	db18      	blt.n	2324 <log_output_msg2_process+0x94>
	*len = msg->hdr.desc.data_len;
    22f2:	8862      	ldrh	r2, [r4, #2]
    22f4:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    22f8:	6821      	ldr	r1, [r4, #0]
    22fa:	f3c1 2149 	ubfx	r1, r1, #9, #10
    22fe:	4429      	add	r1, r5
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    2300:	b9fa      	cbnz	r2, 2342 <log_output_msg2_process+0xb2>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    2302:	f1b8 0f00 	cmp.w	r8, #0
    2306:	d122      	bne.n	234e <log_output_msg2_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    2308:	4630      	mov	r0, r6
    230a:	f007 fe3e 	bl	9f8a <log_output_flush>
}
    230e:	b004      	add	sp, #16
    2310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		int16_t source_id = source ?
    2314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2318:	e7d0      	b.n	22bc <log_output_msg2_process+0x2c>
		prefix_offset = 0;
    231a:	f04f 0900 	mov.w	r9, #0
    231e:	e7d7      	b.n	22d0 <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    2320:	4811      	ldr	r0, [pc, #68]	; (2368 <log_output_msg2_process+0xd8>)
    2322:	e7df      	b.n	22e4 <log_output_msg2_process+0x54>
		__ASSERT_NO_MSG(err >= 0);
    2324:	f8df a044 	ldr.w	sl, [pc, #68]	; 236c <log_output_msg2_process+0xdc>
    2328:	f240 23b7 	movw	r3, #695	; 0x2b7
    232c:	4652      	mov	r2, sl
    232e:	4910      	ldr	r1, [pc, #64]	; (2370 <log_output_msg2_process+0xe0>)
    2330:	4810      	ldr	r0, [pc, #64]	; (2374 <log_output_msg2_process+0xe4>)
    2332:	f007 fda0 	bl	9e76 <assert_print>
    2336:	f240 21b7 	movw	r1, #695	; 0x2b7
    233a:	4650      	mov	r0, sl
    233c:	f007 fd94 	bl	9e68 <assert_post_action>
    2340:	e7d7      	b.n	22f2 <log_output_msg2_process+0x62>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
    2342:	9700      	str	r7, [sp, #0]
    2344:	464b      	mov	r3, r9
    2346:	4630      	mov	r0, r6
    2348:	f007 fe04 	bl	9f54 <log_msg2_hexdump>
    234c:	e7d9      	b.n	2302 <log_output_msg2_process+0x72>
		postfix_print(output, flags, level);
    234e:	4642      	mov	r2, r8
    2350:	4639      	mov	r1, r7
    2352:	4630      	mov	r0, r6
    2354:	f007 fdf2 	bl	9f3c <postfix_print>
    2358:	e7d6      	b.n	2308 <log_output_msg2_process+0x78>
    235a:	bf00      	nop
    235c:	0000af84 	.word	0x0000af84
    2360:	00009eef 	.word	0x00009eef
    2364:	0000168d 	.word	0x0000168d
    2368:	00009ed1 	.word	0x00009ed1
    236c:	0000b764 	.word	0x0000b764
    2370:	0000b7a4 	.word	0x0000b7a4
    2374:	0000b180 	.word	0x0000b180

00002378 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2378:	4b07      	ldr	r3, [pc, #28]	; (2398 <log_output_timestamp_freq_set+0x20>)
    237a:	2201      	movs	r2, #1
    237c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    237e:	e004      	b.n	238a <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    2380:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2382:	4a05      	ldr	r2, [pc, #20]	; (2398 <log_output_timestamp_freq_set+0x20>)
    2384:	6813      	ldr	r3, [r2, #0]
    2386:	005b      	lsls	r3, r3, #1
    2388:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    238a:	4b04      	ldr	r3, [pc, #16]	; (239c <log_output_timestamp_freq_set+0x24>)
    238c:	4298      	cmp	r0, r3
    238e:	d8f7      	bhi.n	2380 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    2390:	4b03      	ldr	r3, [pc, #12]	; (23a0 <log_output_timestamp_freq_set+0x28>)
    2392:	6018      	str	r0, [r3, #0]
}
    2394:	4770      	bx	lr
    2396:	bf00      	nop
    2398:	2000440c 	.word	0x2000440c
    239c:	000f4240 	.word	0x000f4240
    23a0:	20004408 	.word	0x20004408

000023a4 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    23a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23a8:	b087      	sub	sp, #28
    23aa:	af02      	add	r7, sp, #8
    23ac:	4682      	mov	sl, r0
    23ae:	6079      	str	r1, [r7, #4]
    23b0:	4691      	mov	r9, r2
    23b2:	4698      	mov	r8, r3
    23b4:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    23b6:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
	int plen;

	if (fmt) {
    23ba:	f1bb 0f00 	cmp.w	fp, #0
    23be:	d016      	beq.n	23ee <z_impl_z_log_msg2_runtime_vcreate+0x4a>
		va_list ap2;

		va_copy(ap2, ap);
    23c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    23c2:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    23c4:	9300      	str	r3, [sp, #0]
    23c6:	465b      	mov	r3, fp
    23c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    23ca:	2110      	movs	r1, #16
    23cc:	2000      	movs	r0, #0
    23ce:	f7fe f8fb 	bl	5c8 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    23d2:	1e05      	subs	r5, r0, #0
    23d4:	da0c      	bge.n	23f0 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
    23d6:	4c26      	ldr	r4, [pc, #152]	; (2470 <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    23d8:	2367      	movs	r3, #103	; 0x67
    23da:	4622      	mov	r2, r4
    23dc:	4925      	ldr	r1, [pc, #148]	; (2474 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    23de:	4826      	ldr	r0, [pc, #152]	; (2478 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    23e0:	f007 fd49 	bl	9e76 <assert_print>
    23e4:	2167      	movs	r1, #103	; 0x67
    23e6:	4620      	mov	r0, r4
    23e8:	f007 fd3e 	bl	9e68 <assert_post_action>
		va_end(ap2);
    23ec:	e000      	b.n	23f0 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
	} else {
		plen = 0;
    23ee:	2500      	movs	r5, #0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    23f0:	4629      	mov	r1, r5
    23f2:	19ab      	adds	r3, r5, r6
    23f4:	3317      	adds	r3, #23
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    23f6:	2400      	movs	r4, #0
    23f8:	f36f 0400 	bfc	r4, #0, #1
    23fc:	f36f 0441 	bfc	r4, #1, #1
    2400:	f36f 0482 	bfc	r4, #2, #1
    2404:	f36a 04c5 	bfi	r4, sl, #3, #3
    2408:	f369 1488 	bfi	r4, r9, #6, #3
    240c:	f365 2452 	bfi	r4, r5, #9, #10
    2410:	f366 44de 	bfi	r4, r6, #19, #12
    2414:	f36f 74df 	bfc	r4, #31, #1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    2418:	f023 0307 	bic.w	r3, r3, #7
    241c:	ebad 0d03 	sub.w	sp, sp, r3
    2420:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    2422:	466b      	mov	r3, sp
    2424:	f113 0018 	adds.w	r0, r3, #24
    2428:	d00a      	beq.n	2440 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    242a:	f1bb 0f00 	cmp.w	fp, #0
    242e:	d007      	beq.n	2440 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    2430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2432:	9300      	str	r3, [sp, #0]
    2434:	465b      	mov	r3, fp
    2436:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2438:	f7fe f8c6 	bl	5c8 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    243c:	2800      	cmp	r0, #0
    243e:	db09      	blt.n	2454 <z_impl_z_log_msg2_runtime_vcreate+0xb0>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    2440:	4643      	mov	r3, r8
    2442:	4622      	mov	r2, r4
    2444:	6879      	ldr	r1, [r7, #4]
    2446:	4628      	mov	r0, r5
    2448:	f007 fdac 	bl	9fa4 <z_log_msg2_finalize>
	}
}
    244c:	3714      	adds	r7, #20
    244e:	46bd      	mov	sp, r7
    2450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(plen >= 0);
    2454:	f8df 9018 	ldr.w	r9, [pc, #24]	; 2470 <z_impl_z_log_msg2_runtime_vcreate+0xcc>
    2458:	2381      	movs	r3, #129	; 0x81
    245a:	464a      	mov	r2, r9
    245c:	4905      	ldr	r1, [pc, #20]	; (2474 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    245e:	4806      	ldr	r0, [pc, #24]	; (2478 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    2460:	f007 fd09 	bl	9e76 <assert_print>
    2464:	2181      	movs	r1, #129	; 0x81
    2466:	4648      	mov	r0, r9
    2468:	f007 fcfe 	bl	9e68 <assert_post_action>
    246c:	e7e8      	b.n	2440 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    246e:	bf00      	nop
    2470:	0000b7f8 	.word	0x0000b7f8
    2474:	0000b834 	.word	0x0000b834
    2478:	0000b180 	.word	0x0000b180

0000247c <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    247c:	b570      	push	{r4, r5, r6, lr}
    247e:	4606      	mov	r6, r0
    2480:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    2482:	2400      	movs	r4, #0
    2484:	e006      	b.n	2494 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    2486:	4b05      	ldr	r3, [pc, #20]	; (249c <char_out+0x20>)
    2488:	6818      	ldr	r0, [r3, #0]
    248a:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    248c:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    248e:	685b      	ldr	r3, [r3, #4]
    2490:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    2492:	3401      	adds	r4, #1
    2494:	42ac      	cmp	r4, r5
    2496:	d3f6      	bcc.n	2486 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    2498:	4628      	mov	r0, r5
    249a:	bd70      	pop	{r4, r5, r6, pc}
    249c:	20004428 	.word	0x20004428

000024a0 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    24a0:	4b01      	ldr	r3, [pc, #4]	; (24a8 <format_set+0x8>)
    24a2:	6019      	str	r1, [r3, #0]
	return 0;
}
    24a4:	2000      	movs	r0, #0
    24a6:	4770      	bx	lr
    24a8:	20004418 	.word	0x20004418

000024ac <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
    24ac:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    24ae:	4809      	ldr	r0, [pc, #36]	; (24d4 <log_backend_uart_init+0x28>)
    24b0:	4b09      	ldr	r3, [pc, #36]	; (24d8 <log_backend_uart_init+0x2c>)
    24b2:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    24b4:	f008 fb3c 	bl	ab30 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    24b8:	b100      	cbz	r0, 24bc <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    24ba:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    24bc:	4c07      	ldr	r4, [pc, #28]	; (24dc <log_backend_uart_init+0x30>)
    24be:	2379      	movs	r3, #121	; 0x79
    24c0:	4622      	mov	r2, r4
    24c2:	4907      	ldr	r1, [pc, #28]	; (24e0 <log_backend_uart_init+0x34>)
    24c4:	4807      	ldr	r0, [pc, #28]	; (24e4 <log_backend_uart_init+0x38>)
    24c6:	f007 fcd6 	bl	9e76 <assert_print>
    24ca:	2179      	movs	r1, #121	; 0x79
    24cc:	4620      	mov	r0, r4
    24ce:	f007 fccb 	bl	9e68 <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
    24d2:	e7f2      	b.n	24ba <log_backend_uart_init+0xe>
    24d4:	0000adec 	.word	0x0000adec
    24d8:	20004428 	.word	0x20004428
    24dc:	0000b840 	.word	0x0000b840
    24e0:	0000b878 	.word	0x0000b878
    24e4:	0000b180 	.word	0x0000b180

000024e8 <panic>:

static void panic(struct log_backend const *const backend)
{
    24e8:	b508      	push	{r3, lr}
	in_panic = true;
    24ea:	4b03      	ldr	r3, [pc, #12]	; (24f8 <panic+0x10>)
    24ec:	2201      	movs	r2, #1
    24ee:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    24f0:	4802      	ldr	r0, [pc, #8]	; (24fc <panic+0x14>)
    24f2:	f007 fd4a 	bl	9f8a <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    24f6:	bd08      	pop	{r3, pc}
    24f8:	20005152 	.word	0x20005152
    24fc:	0000b8d4 	.word	0x0000b8d4

00002500 <process>:
{
    2500:	b510      	push	{r4, lr}
    2502:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2504:	4b04      	ldr	r3, [pc, #16]	; (2518 <process+0x18>)
    2506:	6818      	ldr	r0, [r3, #0]
    2508:	f7ff fc1c 	bl	1d44 <log_format_func_t_get>
    250c:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    250e:	220f      	movs	r2, #15
    2510:	4621      	mov	r1, r4
    2512:	4802      	ldr	r0, [pc, #8]	; (251c <process+0x1c>)
    2514:	4798      	blx	r3
}
    2516:	bd10      	pop	{r4, pc}
    2518:	20004418 	.word	0x20004418
    251c:	0000b8d4 	.word	0x0000b8d4

00002520 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2520:	4b03      	ldr	r3, [pc, #12]	; (2530 <log_backend_rtt_init+0x10>)
    2522:	2201      	movs	r2, #1
    2524:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    2526:	4b03      	ldr	r3, [pc, #12]	; (2534 <log_backend_rtt_init+0x14>)
    2528:	4a03      	ldr	r2, [pc, #12]	; (2538 <log_backend_rtt_init+0x18>)
    252a:	601a      	str	r2, [r3, #0]
}
    252c:	4770      	bx	lr
    252e:	bf00      	nop
    2530:	20005153 	.word	0x20005153
    2534:	20004454 	.word	0x20004454
    2538:	2000443c 	.word	0x2000443c

0000253c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    253c:	4b01      	ldr	r3, [pc, #4]	; (2544 <format_set+0x8>)
    253e:	6019      	str	r1, [r3, #0]
	return 0;
}
    2540:	2000      	movs	r0, #0
    2542:	4770      	bx	lr
    2544:	20004458 	.word	0x20004458

00002548 <on_failed_write>:
{
    2548:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    254a:	b918      	cbnz	r0, 2554 <on_failed_write+0xc>
		host_present = false;
    254c:	4b04      	ldr	r3, [pc, #16]	; (2560 <on_failed_write+0x18>)
    254e:	2200      	movs	r2, #0
    2550:	701a      	strb	r2, [r3, #0]
}
    2552:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    2554:	f241 3088 	movw	r0, #5000	; 0x1388
    2558:	f008 fbcb 	bl	acf2 <z_impl_k_busy_wait>
    255c:	e7f9      	b.n	2552 <on_failed_write+0xa>
    255e:	bf00      	nop
    2560:	20005153 	.word	0x20005153

00002564 <on_write>:
{
    2564:	b538      	push	{r3, r4, r5, lr}
    2566:	4604      	mov	r4, r0
	host_present = true;
    2568:	4b0a      	ldr	r3, [pc, #40]	; (2594 <on_write+0x30>)
    256a:	2201      	movs	r2, #1
    256c:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    256e:	4b0a      	ldr	r3, [pc, #40]	; (2598 <on_write+0x34>)
    2570:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    2572:	b92b      	cbnz	r3, 2580 <on_write+0x1c>
}
    2574:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    2576:	1e65      	subs	r5, r4, #1
    2578:	4620      	mov	r0, r4
    257a:	f7ff ffe5 	bl	2548 <on_failed_write>
    257e:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2580:	2000      	movs	r0, #0
    2582:	f004 facd 	bl	6b20 <SEGGER_RTT_HasDataUp>
    2586:	2800      	cmp	r0, #0
    2588:	d0f4      	beq.n	2574 <on_write+0x10>
    258a:	4b02      	ldr	r3, [pc, #8]	; (2594 <on_write+0x30>)
    258c:	781b      	ldrb	r3, [r3, #0]
    258e:	2b00      	cmp	r3, #0
    2590:	d1f1      	bne.n	2576 <on_write+0x12>
    2592:	e7ef      	b.n	2574 <on_write+0x10>
    2594:	20005153 	.word	0x20005153
    2598:	20005154 	.word	0x20005154

0000259c <data_out_block_mode>:
{
    259c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    259e:	4606      	mov	r6, r0
    25a0:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    25a2:	2704      	movs	r7, #4
    25a4:	e006      	b.n	25b4 <data_out_block_mode+0x18>
			on_write(retry_cnt);
    25a6:	4638      	mov	r0, r7
    25a8:	f7ff ffdc 	bl	2564 <on_write>
	} while ((ret == 0) && host_present);
    25ac:	b99c      	cbnz	r4, 25d6 <data_out_block_mode+0x3a>
    25ae:	4b0d      	ldr	r3, [pc, #52]	; (25e4 <data_out_block_mode+0x48>)
    25b0:	781b      	ldrb	r3, [r3, #0]
    25b2:	b183      	cbz	r3, 25d6 <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    25b4:	462a      	mov	r2, r5
    25b6:	4631      	mov	r1, r6
    25b8:	2000      	movs	r0, #0
    25ba:	f004 fa4d 	bl	6a58 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    25be:	4604      	mov	r4, r0
    25c0:	2800      	cmp	r0, #0
    25c2:	d1f0      	bne.n	25a6 <data_out_block_mode+0xa>
		} else if (host_present) {
    25c4:	4b07      	ldr	r3, [pc, #28]	; (25e4 <data_out_block_mode+0x48>)
    25c6:	781b      	ldrb	r3, [r3, #0]
    25c8:	2b00      	cmp	r3, #0
    25ca:	d0ef      	beq.n	25ac <data_out_block_mode+0x10>
			retry_cnt--;
    25cc:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    25ce:	4638      	mov	r0, r7
    25d0:	f7ff ffba 	bl	2548 <on_failed_write>
    25d4:	e7ea      	b.n	25ac <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
    25d6:	b914      	cbnz	r4, 25de <data_out_block_mode+0x42>
    25d8:	4b02      	ldr	r3, [pc, #8]	; (25e4 <data_out_block_mode+0x48>)
    25da:	781b      	ldrb	r3, [r3, #0]
    25dc:	b903      	cbnz	r3, 25e0 <data_out_block_mode+0x44>
    25de:	462c      	mov	r4, r5
}
    25e0:	4620      	mov	r0, r4
    25e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25e4:	20005153 	.word	0x20005153

000025e8 <panic>:
{
    25e8:	b508      	push	{r3, lr}
	panic_mode = true;
    25ea:	4b03      	ldr	r3, [pc, #12]	; (25f8 <panic+0x10>)
    25ec:	2201      	movs	r2, #1
    25ee:	701a      	strb	r2, [r3, #0]
    25f0:	4802      	ldr	r0, [pc, #8]	; (25fc <panic+0x14>)
    25f2:	f007 fcca 	bl	9f8a <log_output_flush>
}
    25f6:	bd08      	pop	{r3, pc}
    25f8:	20005154 	.word	0x20005154
    25fc:	0000b914 	.word	0x0000b914

00002600 <process>:
{
    2600:	b510      	push	{r4, lr}
    2602:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2604:	4b04      	ldr	r3, [pc, #16]	; (2618 <process+0x18>)
    2606:	6818      	ldr	r0, [r3, #0]
    2608:	f7ff fb9c 	bl	1d44 <log_format_func_t_get>
    260c:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    260e:	220f      	movs	r2, #15
    2610:	4621      	mov	r1, r4
    2612:	4802      	ldr	r0, [pc, #8]	; (261c <process+0x1c>)
    2614:	4798      	blx	r3
}
    2616:	bd10      	pop	{r4, pc}
    2618:	20004458 	.word	0x20004458
    261c:	0000b914 	.word	0x0000b914

00002620 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    2620:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    2622:	4b40      	ldr	r3, [pc, #256]	; (2724 <pm_system_resume+0x104>)
    2624:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2626:	f005 031f 	and.w	r3, r5, #31
    262a:	2201      	movs	r2, #1
    262c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    262e:	0969      	lsrs	r1, r5, #5
    2630:	4b3d      	ldr	r3, [pc, #244]	; (2728 <pm_system_resume+0x108>)
    2632:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2636:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2638:	f3bf 8f5b 	dmb	ish
    263c:	e853 1f00 	ldrex	r1, [r3]
    2640:	ea01 0400 	and.w	r4, r1, r0
    2644:	e843 4600 	strex	r6, r4, [r3]
    2648:	2e00      	cmp	r6, #0
    264a:	d1f7      	bne.n	263c <pm_system_resume+0x1c>
    264c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2650:	420a      	tst	r2, r1
    2652:	d100      	bne.n	2656 <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    2654:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    2656:	4a35      	ldr	r2, [pc, #212]	; (272c <pm_system_resume+0x10c>)
    2658:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    265c:	0098      	lsls	r0, r3, #2
    265e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    2662:	4933      	ldr	r1, [pc, #204]	; (2730 <pm_system_resume+0x110>)
    2664:	b1a9      	cbz	r1, 2692 <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2666:	7859      	ldrb	r1, [r3, #1]
    2668:	5c10      	ldrb	r0, [r2, r0]
    266a:	f007 fdfd 	bl	a268 <pm_state_exit_post_ops>
    266e:	f04f 0320 	mov.w	r3, #32
    2672:	f3ef 8611 	mrs	r6, BASEPRI
    2676:	f383 8812 	msr	BASEPRI_MAX, r3
    267a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    267e:	482d      	ldr	r0, [pc, #180]	; (2734 <pm_system_resume+0x114>)
    2680:	f004 fd42 	bl	7108 <z_spin_lock_valid>
    2684:	b158      	cbz	r0, 269e <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    2686:	482b      	ldr	r0, [pc, #172]	; (2734 <pm_system_resume+0x114>)
    2688:	f004 fd5e 	bl	7148 <z_spin_lock_set_owner>
	return list->head;
    268c:	4b2a      	ldr	r3, [pc, #168]	; (2738 <pm_system_resume+0x118>)
    268e:	681c      	ldr	r4, [r3, #0]
    2690:	e020      	b.n	26d4 <pm_system_resume+0xb4>
	__asm__ volatile(
    2692:	2300      	movs	r3, #0
    2694:	f383 8811 	msr	BASEPRI, r3
    2698:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    269c:	e7e7      	b.n	266e <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    269e:	4c27      	ldr	r4, [pc, #156]	; (273c <pm_system_resume+0x11c>)
    26a0:	238e      	movs	r3, #142	; 0x8e
    26a2:	4622      	mov	r2, r4
    26a4:	4926      	ldr	r1, [pc, #152]	; (2740 <pm_system_resume+0x120>)
    26a6:	4827      	ldr	r0, [pc, #156]	; (2744 <pm_system_resume+0x124>)
    26a8:	f007 fbe5 	bl	9e76 <assert_print>
    26ac:	4921      	ldr	r1, [pc, #132]	; (2734 <pm_system_resume+0x114>)
    26ae:	4826      	ldr	r0, [pc, #152]	; (2748 <pm_system_resume+0x128>)
    26b0:	f007 fbe1 	bl	9e76 <assert_print>
    26b4:	218e      	movs	r1, #142	; 0x8e
    26b6:	4620      	mov	r0, r4
    26b8:	f007 fbd6 	bl	9e68 <assert_post_action>
    26bc:	e7e3      	b.n	2686 <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    26be:	4b19      	ldr	r3, [pc, #100]	; (2724 <pm_system_resume+0x104>)
    26c0:	7d1b      	ldrb	r3, [r3, #20]
    26c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    26c6:	4919      	ldr	r1, [pc, #100]	; (272c <pm_system_resume+0x10c>)
    26c8:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    26cc:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    26ce:	b10c      	cbz	r4, 26d4 <pm_system_resume+0xb4>
	return node->next;
    26d0:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    26d2:	b124      	cbz	r4, 26de <pm_system_resume+0xbe>
    26d4:	b11c      	cbz	r4, 26de <pm_system_resume+0xbe>
			callback = notifier->state_exit;
    26d6:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    26d8:	2a00      	cmp	r2, #0
    26da:	d1f0      	bne.n	26be <pm_system_resume+0x9e>
    26dc:	e7f7      	b.n	26ce <pm_system_resume+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    26de:	4815      	ldr	r0, [pc, #84]	; (2734 <pm_system_resume+0x114>)
    26e0:	f004 fd22 	bl	7128 <z_spin_unlock_valid>
    26e4:	b170      	cbz	r0, 2704 <pm_system_resume+0xe4>
	__asm__ volatile(
    26e6:	f386 8811 	msr	BASEPRI, r6
    26ea:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    26ee:	4a0f      	ldr	r2, [pc, #60]	; (272c <pm_system_resume+0x10c>)
    26f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    26f4:	00a9      	lsls	r1, r5, #2
    26f6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    26fa:	2300      	movs	r3, #0
    26fc:	5053      	str	r3, [r2, r1]
    26fe:	606b      	str	r3, [r5, #4]
    2700:	60ab      	str	r3, [r5, #8]
}
    2702:	e7a7      	b.n	2654 <pm_system_resume+0x34>
    2704:	4c0d      	ldr	r4, [pc, #52]	; (273c <pm_system_resume+0x11c>)
    2706:	23b9      	movs	r3, #185	; 0xb9
    2708:	4622      	mov	r2, r4
    270a:	4910      	ldr	r1, [pc, #64]	; (274c <pm_system_resume+0x12c>)
    270c:	480d      	ldr	r0, [pc, #52]	; (2744 <pm_system_resume+0x124>)
    270e:	f007 fbb2 	bl	9e76 <assert_print>
    2712:	4908      	ldr	r1, [pc, #32]	; (2734 <pm_system_resume+0x114>)
    2714:	480e      	ldr	r0, [pc, #56]	; (2750 <pm_system_resume+0x130>)
    2716:	f007 fbae 	bl	9e76 <assert_print>
    271a:	21b9      	movs	r1, #185	; 0xb9
    271c:	4620      	mov	r0, r4
    271e:	f007 fba3 	bl	9e68 <assert_post_action>
    2722:	e7e0      	b.n	26e6 <pm_system_resume+0xc6>
    2724:	20004f28 	.word	0x20004f28
    2728:	20004484 	.word	0x20004484
    272c:	20004474 	.word	0x20004474
    2730:	0000a269 	.word	0x0000a269
    2734:	20004468 	.word	0x20004468
    2738:	2000446c 	.word	0x2000446c
    273c:	0000b32c 	.word	0x0000b32c
    2740:	0000b38c 	.word	0x0000b38c
    2744:	0000b180 	.word	0x0000b180
    2748:	0000b3a4 	.word	0x0000b3a4
    274c:	0000b35c 	.word	0x0000b35c
    2750:	0000b374 	.word	0x0000b374

00002754 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2754:	b570      	push	{r4, r5, r6, lr}
    2756:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2758:	4b6d      	ldr	r3, [pc, #436]	; (2910 <pm_system_suspend+0x1bc>)
    275a:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    275c:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    275e:	f3bf 8f5b 	dmb	ish
    2762:	4b6c      	ldr	r3, [pc, #432]	; (2914 <pm_system_suspend+0x1c0>)
    2764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2768:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    276c:	f005 021f 	and.w	r2, r5, #31
    2770:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2772:	f013 0f01 	tst.w	r3, #1
    2776:	d01d      	beq.n	27b4 <pm_system_suspend+0x60>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2778:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    277c:	4a66      	ldr	r2, [pc, #408]	; (2918 <pm_system_suspend+0x1c4>)
    277e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    2782:	b333      	cbz	r3, 27d2 <pm_system_suspend+0x7e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    2784:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    2788:	d139      	bne.n	27fe <pm_system_suspend+0xaa>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    278a:	f005 facd 	bl	7d28 <k_sched_lock>
	__asm__ volatile(
    278e:	f04f 0320 	mov.w	r3, #32
    2792:	f3ef 8611 	mrs	r6, BASEPRI
    2796:	f383 8812 	msr	BASEPRI_MAX, r3
    279a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    279e:	485f      	ldr	r0, [pc, #380]	; (291c <pm_system_suspend+0x1c8>)
    27a0:	f004 fcb2 	bl	7108 <z_spin_lock_valid>
    27a4:	2800      	cmp	r0, #0
    27a6:	d040      	beq.n	282a <pm_system_suspend+0xd6>
	z_spin_lock_set_owner(l);
    27a8:	485c      	ldr	r0, [pc, #368]	; (291c <pm_system_suspend+0x1c8>)
    27aa:	f004 fccd 	bl	7148 <z_spin_lock_set_owner>
	return list->head;
    27ae:	4b5c      	ldr	r3, [pc, #368]	; (2920 <pm_system_suspend+0x1cc>)
    27b0:	681c      	ldr	r4, [r3, #0]
    27b2:	e055      	b.n	2860 <pm_system_suspend+0x10c>
		info = pm_policy_next_state(id, ticks);
    27b4:	4601      	mov	r1, r0
    27b6:	4628      	mov	r0, r5
    27b8:	f000 f8d6 	bl	2968 <pm_policy_next_state>
		if (info != NULL) {
    27bc:	2800      	cmp	r0, #0
    27be:	d0db      	beq.n	2778 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    27c0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    27c4:	4a54      	ldr	r2, [pc, #336]	; (2918 <pm_system_suspend+0x1c4>)
    27c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27ca:	c807      	ldmia	r0, {r0, r1, r2}
    27cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    27d0:	e7d2      	b.n	2778 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    27d2:	f005 021f 	and.w	r2, r5, #31
    27d6:	2301      	movs	r3, #1
    27d8:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    27da:	096d      	lsrs	r5, r5, #5
    27dc:	4a4d      	ldr	r2, [pc, #308]	; (2914 <pm_system_suspend+0x1c0>)
    27de:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    27e2:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    27e4:	f3bf 8f5b 	dmb	ish
    27e8:	e855 2f00 	ldrex	r2, [r5]
    27ec:	401a      	ands	r2, r3
    27ee:	e845 2100 	strex	r1, r2, [r5]
    27f2:	2900      	cmp	r1, #0
    27f4:	d1f8      	bne.n	27e8 <pm_system_suspend+0x94>
    27f6:	f3bf 8f5b 	dmb	ish
		ret = false;
    27fa:	2000      	movs	r0, #0
		goto end;
    27fc:	e077      	b.n	28ee <pm_system_suspend+0x19a>
		     k_us_to_ticks_ceil32(
    27fe:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    2802:	4a45      	ldr	r2, [pc, #276]	; (2918 <pm_system_suspend+0x1c4>)
    2804:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2808:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    280a:	0c41      	lsrs	r1, r0, #17
    280c:	03c0      	lsls	r0, r0, #15
    280e:	4b45      	ldr	r3, [pc, #276]	; (2924 <pm_system_suspend+0x1d0>)
    2810:	18c0      	adds	r0, r0, r3
    2812:	4a45      	ldr	r2, [pc, #276]	; (2928 <pm_system_suspend+0x1d4>)
    2814:	f04f 0300 	mov.w	r3, #0
    2818:	f141 0100 	adc.w	r1, r1, #0
    281c:	f7fd fc70 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    2820:	2101      	movs	r1, #1
    2822:	1a20      	subs	r0, r4, r0
    2824:	f006 fdb0 	bl	9388 <z_set_timeout_expiry>
    2828:	e7af      	b.n	278a <pm_system_suspend+0x36>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    282a:	4c40      	ldr	r4, [pc, #256]	; (292c <pm_system_suspend+0x1d8>)
    282c:	238e      	movs	r3, #142	; 0x8e
    282e:	4622      	mov	r2, r4
    2830:	493f      	ldr	r1, [pc, #252]	; (2930 <pm_system_suspend+0x1dc>)
    2832:	4840      	ldr	r0, [pc, #256]	; (2934 <pm_system_suspend+0x1e0>)
    2834:	f007 fb1f 	bl	9e76 <assert_print>
    2838:	4938      	ldr	r1, [pc, #224]	; (291c <pm_system_suspend+0x1c8>)
    283a:	483f      	ldr	r0, [pc, #252]	; (2938 <pm_system_suspend+0x1e4>)
    283c:	f007 fb1b 	bl	9e76 <assert_print>
    2840:	218e      	movs	r1, #142	; 0x8e
    2842:	4620      	mov	r0, r4
    2844:	f007 fb10 	bl	9e68 <assert_post_action>
    2848:	e7ae      	b.n	27a8 <pm_system_suspend+0x54>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    284a:	4b31      	ldr	r3, [pc, #196]	; (2910 <pm_system_suspend+0x1bc>)
    284c:	7d1b      	ldrb	r3, [r3, #20]
    284e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2852:	4931      	ldr	r1, [pc, #196]	; (2918 <pm_system_suspend+0x1c4>)
    2854:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    2858:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    285a:	b10c      	cbz	r4, 2860 <pm_system_suspend+0x10c>
	return node->next;
    285c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    285e:	b124      	cbz	r4, 286a <pm_system_suspend+0x116>
    2860:	b11c      	cbz	r4, 286a <pm_system_suspend+0x116>
			callback = notifier->state_entry;
    2862:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    2864:	2a00      	cmp	r2, #0
    2866:	d1f0      	bne.n	284a <pm_system_suspend+0xf6>
    2868:	e7f7      	b.n	285a <pm_system_suspend+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    286a:	482c      	ldr	r0, [pc, #176]	; (291c <pm_system_suspend+0x1c8>)
    286c:	f004 fc5c 	bl	7128 <z_spin_unlock_valid>
    2870:	2800      	cmp	r0, #0
    2872:	d03d      	beq.n	28f0 <pm_system_suspend+0x19c>
	__asm__ volatile(
    2874:	f386 8811 	msr	BASEPRI, r6
    2878:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    287c:	f005 031f 	and.w	r3, r5, #31
    2880:	2101      	movs	r1, #1
    2882:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2884:	096b      	lsrs	r3, r5, #5
    2886:	4a2d      	ldr	r2, [pc, #180]	; (293c <pm_system_suspend+0x1e8>)
    2888:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    288c:	f3bf 8f5b 	dmb	ish
    2890:	e853 2f00 	ldrex	r2, [r3]
    2894:	430a      	orrs	r2, r1
    2896:	e843 2000 	strex	r0, r2, [r3]
    289a:	2800      	cmp	r0, #0
    289c:	d1f8      	bne.n	2890 <pm_system_suspend+0x13c>
    289e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    28a2:	4b27      	ldr	r3, [pc, #156]	; (2940 <pm_system_suspend+0x1ec>)
    28a4:	b14b      	cbz	r3, 28ba <pm_system_suspend+0x166>
		pm_state_set(info->state, info->substate_id);
    28a6:	4b1c      	ldr	r3, [pc, #112]	; (2918 <pm_system_suspend+0x1c4>)
    28a8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    28ac:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    28b0:	7849      	ldrb	r1, [r1, #1]
    28b2:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    28b6:	f007 fccb 	bl	a250 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    28ba:	f7ff feb1 	bl	2620 <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    28be:	f005 031f 	and.w	r3, r5, #31
    28c2:	2401      	movs	r4, #1
    28c4:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    28c8:	096d      	lsrs	r5, r5, #5
    28ca:	4a12      	ldr	r2, [pc, #72]	; (2914 <pm_system_suspend+0x1c0>)
    28cc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    28d0:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    28d2:	f3bf 8f5b 	dmb	ish
    28d6:	e855 2f00 	ldrex	r2, [r5]
    28da:	401a      	ands	r2, r3
    28dc:	e845 2100 	strex	r1, r2, [r5]
    28e0:	2900      	cmp	r1, #0
    28e2:	d1f8      	bne.n	28d6 <pm_system_suspend+0x182>
    28e4:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    28e8:	f005 ffaa 	bl	8840 <k_sched_unlock>
	bool ret = true;
    28ec:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    28ee:	bd70      	pop	{r4, r5, r6, pc}
    28f0:	4c0e      	ldr	r4, [pc, #56]	; (292c <pm_system_suspend+0x1d8>)
    28f2:	23b9      	movs	r3, #185	; 0xb9
    28f4:	4622      	mov	r2, r4
    28f6:	4913      	ldr	r1, [pc, #76]	; (2944 <pm_system_suspend+0x1f0>)
    28f8:	480e      	ldr	r0, [pc, #56]	; (2934 <pm_system_suspend+0x1e0>)
    28fa:	f007 fabc 	bl	9e76 <assert_print>
    28fe:	4907      	ldr	r1, [pc, #28]	; (291c <pm_system_suspend+0x1c8>)
    2900:	4811      	ldr	r0, [pc, #68]	; (2948 <pm_system_suspend+0x1f4>)
    2902:	f007 fab8 	bl	9e76 <assert_print>
    2906:	21b9      	movs	r1, #185	; 0xb9
    2908:	4620      	mov	r0, r4
    290a:	f007 faad 	bl	9e68 <assert_post_action>
    290e:	e7b1      	b.n	2874 <pm_system_suspend+0x120>
    2910:	20004f28 	.word	0x20004f28
    2914:	20004480 	.word	0x20004480
    2918:	20004474 	.word	0x20004474
    291c:	20004468 	.word	0x20004468
    2920:	2000446c 	.word	0x2000446c
    2924:	000f423f 	.word	0x000f423f
    2928:	000f4240 	.word	0x000f4240
    292c:	0000b32c 	.word	0x0000b32c
    2930:	0000b38c 	.word	0x0000b38c
    2934:	0000b180 	.word	0x0000b180
    2938:	0000b3a4 	.word	0x0000b3a4
    293c:	20004484 	.word	0x20004484
    2940:	0000a251 	.word	0x0000a251
    2944:	0000b35c 	.word	0x0000b35c
    2948:	0000b374 	.word	0x0000b374

0000294c <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    294c:	f3bf 8f5b 	dmb	ish
    2950:	4b04      	ldr	r3, [pc, #16]	; (2964 <pm_policy_state_lock_is_active+0x18>)
    2952:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2956:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    295a:	3800      	subs	r0, #0
    295c:	bf18      	it	ne
    295e:	2001      	movne	r0, #1
    2960:	4770      	bx	lr
    2962:	bf00      	nop
    2964:	20004488 	.word	0x20004488

00002968 <pm_policy_next_state>:
{
    2968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    296c:	b082      	sub	sp, #8
    296e:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2970:	a901      	add	r1, sp, #4
    2972:	f000 f843 	bl	29fc <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2976:	1e44      	subs	r4, r0, #1
    2978:	b224      	sxth	r4, r4
    297a:	e007      	b.n	298c <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    297c:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    2980:	d032      	beq.n	29e8 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    2982:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    2984:	42b0      	cmp	r0, r6
    2986:	d92f      	bls.n	29e8 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2988:	3c01      	subs	r4, #1
    298a:	b224      	sxth	r4, r4
    298c:	2c00      	cmp	r4, #0
    298e:	db2a      	blt.n	29e6 <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    2990:	9b01      	ldr	r3, [sp, #4]
    2992:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2996:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    299a:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    299e:	f7ff ffd5 	bl	294c <pm_policy_state_lock_is_active>
    29a2:	2800      	cmp	r0, #0
    29a4:	d1f0      	bne.n	2988 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    29a6:	6868      	ldr	r0, [r5, #4]
    29a8:	0c41      	lsrs	r1, r0, #17
    29aa:	03c0      	lsls	r0, r0, #15
    29ac:	4f10      	ldr	r7, [pc, #64]	; (29f0 <pm_policy_next_state+0x88>)
    29ae:	19c0      	adds	r0, r0, r7
    29b0:	4a10      	ldr	r2, [pc, #64]	; (29f4 <pm_policy_next_state+0x8c>)
    29b2:	f04f 0300 	mov.w	r3, #0
    29b6:	f141 0100 	adc.w	r1, r1, #0
    29ba:	f7fd fba1 	bl	100 <__aeabi_uldivmod>
    29be:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    29c0:	68ab      	ldr	r3, [r5, #8]
    29c2:	0c59      	lsrs	r1, r3, #17
    29c4:	03db      	lsls	r3, r3, #15
    29c6:	19d8      	adds	r0, r3, r7
    29c8:	4a0a      	ldr	r2, [pc, #40]	; (29f4 <pm_policy_next_state+0x8c>)
    29ca:	f04f 0300 	mov.w	r3, #0
    29ce:	f141 0100 	adc.w	r1, r1, #0
    29d2:	f7fd fb95 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    29d6:	4b08      	ldr	r3, [pc, #32]	; (29f8 <pm_policy_next_state+0x90>)
    29d8:	681b      	ldr	r3, [r3, #0]
    29da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    29de:	d0cd      	beq.n	297c <pm_policy_next_state+0x14>
    29e0:	4283      	cmp	r3, r0
    29e2:	d8cb      	bhi.n	297c <pm_policy_next_state+0x14>
    29e4:	e7d0      	b.n	2988 <pm_policy_next_state+0x20>
	return NULL;
    29e6:	2500      	movs	r5, #0
}
    29e8:	4628      	mov	r0, r5
    29ea:	b002      	add	sp, #8
    29ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29f0:	000f423f 	.word	0x000f423f
    29f4:	000f4240 	.word	0x000f4240
    29f8:	20004008 	.word	0x20004008

000029fc <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    29fc:	b908      	cbnz	r0, 2a02 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    29fe:	4b02      	ldr	r3, [pc, #8]	; (2a08 <pm_state_cpu_get_all+0xc>)
    2a00:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2a02:	2000      	movs	r0, #0
    2a04:	4770      	bx	lr
    2a06:	bf00      	nop
    2a08:	0000b928 	.word	0x0000b928

00002a0c <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    2a0c:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    2a0e:	4802      	ldr	r0, [pc, #8]	; (2a18 <nrf_cc3xx_platform_abort_init+0xc>)
    2a10:	f006 feca 	bl	97a8 <nrf_cc3xx_platform_set_abort>
}
    2a14:	bd08      	pop	{r3, pc}
    2a16:	bf00      	nop
    2a18:	0000b928 	.word	0x0000b928

00002a1c <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2a1c:	b1d0      	cbz	r0, 2a54 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2a1e:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2a20:	6842      	ldr	r2, [r0, #4]
    2a22:	2a04      	cmp	r2, #4
    2a24:	d005      	beq.n	2a32 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2a26:	b1d2      	cbz	r2, 2a5e <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    2a28:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    2a2a:	f004 fecd 	bl	77c8 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2a2e:	2000      	movs	r0, #0
    }
}
    2a30:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    2a32:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2a34:	2200      	movs	r2, #0
    2a36:	f3bf 8f5b 	dmb	ish
    2a3a:	e853 1f00 	ldrex	r1, [r3]
    2a3e:	2901      	cmp	r1, #1
    2a40:	d103      	bne.n	2a4a <mutex_unlock_platform+0x2e>
    2a42:	e843 2000 	strex	r0, r2, [r3]
    2a46:	2800      	cmp	r0, #0
    2a48:	d1f7      	bne.n	2a3a <mutex_unlock_platform+0x1e>
    2a4a:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2a4e:	d104      	bne.n	2a5a <mutex_unlock_platform+0x3e>
    2a50:	4610      	mov	r0, r2
    2a52:	e7ed      	b.n	2a30 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2a54:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2a58:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2a5a:	4802      	ldr	r0, [pc, #8]	; (2a64 <mutex_unlock_platform+0x48>)
    2a5c:	e7e8      	b.n	2a30 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2a5e:	4802      	ldr	r0, [pc, #8]	; (2a68 <mutex_unlock_platform+0x4c>)
    2a60:	e7e6      	b.n	2a30 <mutex_unlock_platform+0x14>
    2a62:	bf00      	nop
    2a64:	ffff8fe9 	.word	0xffff8fe9
    2a68:	ffff8fea 	.word	0xffff8fea

00002a6c <mutex_lock_platform>:
    if(mutex == NULL) {
    2a6c:	b320      	cbz	r0, 2ab8 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2a6e:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    2a70:	6842      	ldr	r2, [r0, #4]
    2a72:	2a04      	cmp	r2, #4
    2a74:	d002      	beq.n	2a7c <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2a76:	b992      	cbnz	r2, 2a9e <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2a78:	4811      	ldr	r0, [pc, #68]	; (2ac0 <mutex_lock_platform+0x54>)
    2a7a:	e00f      	b.n	2a9c <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    2a7c:	6803      	ldr	r3, [r0, #0]
    2a7e:	2201      	movs	r2, #1
    2a80:	f3bf 8f5b 	dmb	ish
    2a84:	e853 1f00 	ldrex	r1, [r3]
    2a88:	2900      	cmp	r1, #0
    2a8a:	d103      	bne.n	2a94 <mutex_lock_platform+0x28>
    2a8c:	e843 2000 	strex	r0, r2, [r3]
    2a90:	2800      	cmp	r0, #0
    2a92:	d1f7      	bne.n	2a84 <mutex_lock_platform+0x18>
    2a94:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2a98:	d10c      	bne.n	2ab4 <mutex_lock_platform+0x48>
    2a9a:	2000      	movs	r0, #0
}
    2a9c:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    2a9e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2aa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2aa8:	f004 fd6e 	bl	7588 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2aac:	2800      	cmp	r0, #0
    2aae:	d0f5      	beq.n	2a9c <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    2ab0:	4804      	ldr	r0, [pc, #16]	; (2ac4 <mutex_lock_platform+0x58>)
    2ab2:	e7f3      	b.n	2a9c <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2ab4:	4803      	ldr	r0, [pc, #12]	; (2ac4 <mutex_lock_platform+0x58>)
    2ab6:	e7f1      	b.n	2a9c <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2ab8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2abc:	4770      	bx	lr
    2abe:	bf00      	nop
    2ac0:	ffff8fea 	.word	0xffff8fea
    2ac4:	ffff8fe9 	.word	0xffff8fe9

00002ac8 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2ac8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2aca:	4604      	mov	r4, r0
    2acc:	b188      	cbz	r0, 2af2 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2ace:	6863      	ldr	r3, [r4, #4]
    2ad0:	2b04      	cmp	r3, #4
    2ad2:	d00d      	beq.n	2af0 <mutex_free_platform+0x28>
    2ad4:	2b08      	cmp	r3, #8
    2ad6:	d00b      	beq.n	2af0 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2ad8:	b153      	cbz	r3, 2af0 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2ada:	f013 0f02 	tst.w	r3, #2
    2ade:	d00d      	beq.n	2afc <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2ae0:	4621      	mov	r1, r4
    2ae2:	4809      	ldr	r0, [pc, #36]	; (2b08 <mutex_free_platform+0x40>)
    2ae4:	f004 fa9a 	bl	701c <k_mem_slab_free>
        mutex->mutex = NULL;
    2ae8:	2300      	movs	r3, #0
    2aea:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2aec:	2300      	movs	r3, #0
    2aee:	6063      	str	r3, [r4, #4]
}
    2af0:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    2af2:	4b06      	ldr	r3, [pc, #24]	; (2b0c <mutex_free_platform+0x44>)
    2af4:	685b      	ldr	r3, [r3, #4]
    2af6:	4806      	ldr	r0, [pc, #24]	; (2b10 <mutex_free_platform+0x48>)
    2af8:	4798      	blx	r3
    2afa:	e7e8      	b.n	2ace <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2afc:	2214      	movs	r2, #20
    2afe:	2100      	movs	r1, #0
    2b00:	6820      	ldr	r0, [r4, #0]
    2b02:	f007 fb74 	bl	a1ee <memset>
    2b06:	e7f1      	b.n	2aec <mutex_free_platform+0x24>
    2b08:	200044a4 	.word	0x200044a4
    2b0c:	200040e4 	.word	0x200040e4
    2b10:	0000b930 	.word	0x0000b930

00002b14 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2b14:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2b16:	4604      	mov	r4, r0
    2b18:	b178      	cbz	r0, 2b3a <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2b1a:	6863      	ldr	r3, [r4, #4]
    2b1c:	2b04      	cmp	r3, #4
    2b1e:	d00b      	beq.n	2b38 <mutex_init_platform+0x24>
    2b20:	2b08      	cmp	r3, #8
    2b22:	d009      	beq.n	2b38 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2b24:	b90b      	cbnz	r3, 2b2a <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    2b26:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2b28:	b163      	cbz	r3, 2b44 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    2b2a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2b2c:	f008 f88f 	bl	ac4e <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2b30:	6863      	ldr	r3, [r4, #4]
    2b32:	f043 0301 	orr.w	r3, r3, #1
    2b36:	6063      	str	r3, [r4, #4]
}
    2b38:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    2b3a:	4b0f      	ldr	r3, [pc, #60]	; (2b78 <mutex_init_platform+0x64>)
    2b3c:	685b      	ldr	r3, [r3, #4]
    2b3e:	480f      	ldr	r0, [pc, #60]	; (2b7c <mutex_init_platform+0x68>)
    2b40:	4798      	blx	r3
    2b42:	e7ea      	b.n	2b1a <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2b44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2b4c:	4621      	mov	r1, r4
    2b4e:	480c      	ldr	r0, [pc, #48]	; (2b80 <mutex_init_platform+0x6c>)
    2b50:	f004 f9ee 	bl	6f30 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2b54:	b908      	cbnz	r0, 2b5a <mutex_init_platform+0x46>
    2b56:	6823      	ldr	r3, [r4, #0]
    2b58:	b91b      	cbnz	r3, 2b62 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    2b5a:	4b07      	ldr	r3, [pc, #28]	; (2b78 <mutex_init_platform+0x64>)
    2b5c:	685b      	ldr	r3, [r3, #4]
    2b5e:	4809      	ldr	r0, [pc, #36]	; (2b84 <mutex_init_platform+0x70>)
    2b60:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2b62:	2214      	movs	r2, #20
    2b64:	2100      	movs	r1, #0
    2b66:	6820      	ldr	r0, [r4, #0]
    2b68:	f007 fb41 	bl	a1ee <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2b6c:	6863      	ldr	r3, [r4, #4]
    2b6e:	f043 0302 	orr.w	r3, r3, #2
    2b72:	6063      	str	r3, [r4, #4]
    2b74:	e7d9      	b.n	2b2a <mutex_init_platform+0x16>
    2b76:	bf00      	nop
    2b78:	200040e4 	.word	0x200040e4
    2b7c:	0000b930 	.word	0x0000b930
    2b80:	200044a4 	.word	0x200044a4
    2b84:	0000b958 	.word	0x0000b958

00002b88 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2b88:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2b8a:	2340      	movs	r3, #64	; 0x40
    2b8c:	2214      	movs	r2, #20
    2b8e:	4904      	ldr	r1, [pc, #16]	; (2ba0 <nrf_cc3xx_platform_mutex_init+0x18>)
    2b90:	4804      	ldr	r0, [pc, #16]	; (2ba4 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2b92:	f008 f808 	bl	aba6 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2b96:	4904      	ldr	r1, [pc, #16]	; (2ba8 <nrf_cc3xx_platform_mutex_init+0x20>)
    2b98:	4804      	ldr	r0, [pc, #16]	; (2bac <nrf_cc3xx_platform_mutex_init+0x24>)
    2b9a:	f006 fe65 	bl	9868 <nrf_cc3xx_platform_set_mutexes>
}
    2b9e:	bd08      	pop	{r3, pc}
    2ba0:	200044c4 	.word	0x200044c4
    2ba4:	200044a4 	.word	0x200044a4
    2ba8:	0000b998 	.word	0x0000b998
    2bac:	0000b988 	.word	0x0000b988

00002bb0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2bb0:	4901      	ldr	r1, [pc, #4]	; (2bb8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2bb2:	2210      	movs	r2, #16
	str	r2, [r1]
    2bb4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2bb6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2bb8:	e000ed10 	.word	0xe000ed10

00002bbc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2bbc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2bbe:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2bc0:	f380 8811 	msr	BASEPRI, r0
	isb
    2bc4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2bc8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2bcc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2bce:	b662      	cpsie	i
	isb
    2bd0:	f3bf 8f6f 	isb	sy

	bx	lr
    2bd4:	4770      	bx	lr
    2bd6:	bf00      	nop

00002bd8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2bd8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2bda:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2bdc:	f381 8811 	msr	BASEPRI, r1

	wfe
    2be0:	bf20      	wfe

	msr	BASEPRI, r0
    2be2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2be6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2be8:	4770      	bx	lr
    2bea:	bf00      	nop

00002bec <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    2bec:	b570      	push	{r4, r5, r6, lr}
    2bee:	b086      	sub	sp, #24
    2bf0:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2bf2:	4e1e      	ldr	r6, [pc, #120]	; (2c6c <esf_dump+0x80>)
    2bf4:	6883      	ldr	r3, [r0, #8]
    2bf6:	9305      	str	r3, [sp, #20]
    2bf8:	6843      	ldr	r3, [r0, #4]
    2bfa:	9304      	str	r3, [sp, #16]
    2bfc:	6803      	ldr	r3, [r0, #0]
    2bfe:	9303      	str	r3, [sp, #12]
    2c00:	4b1b      	ldr	r3, [pc, #108]	; (2c70 <esf_dump+0x84>)
    2c02:	9302      	str	r3, [sp, #8]
    2c04:	2400      	movs	r4, #0
    2c06:	9401      	str	r4, [sp, #4]
    2c08:	9400      	str	r4, [sp, #0]
    2c0a:	4623      	mov	r3, r4
    2c0c:	2201      	movs	r2, #1
    2c0e:	4631      	mov	r1, r6
    2c10:	4620      	mov	r0, r4
    2c12:	f007 f9e4 	bl	9fde <z_log_msg2_runtime_create>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2c16:	696b      	ldr	r3, [r5, #20]
    2c18:	9305      	str	r3, [sp, #20]
    2c1a:	692b      	ldr	r3, [r5, #16]
    2c1c:	9304      	str	r3, [sp, #16]
    2c1e:	68eb      	ldr	r3, [r5, #12]
    2c20:	9303      	str	r3, [sp, #12]
    2c22:	4b14      	ldr	r3, [pc, #80]	; (2c74 <esf_dump+0x88>)
    2c24:	9302      	str	r3, [sp, #8]
    2c26:	9401      	str	r4, [sp, #4]
    2c28:	9400      	str	r4, [sp, #0]
    2c2a:	4623      	mov	r3, r4
    2c2c:	2201      	movs	r2, #1
    2c2e:	4631      	mov	r1, r6
    2c30:	4620      	mov	r0, r4
    2c32:	f007 f9d4 	bl	9fde <z_log_msg2_runtime_create>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2c36:	69eb      	ldr	r3, [r5, #28]
    2c38:	9303      	str	r3, [sp, #12]
    2c3a:	4b0f      	ldr	r3, [pc, #60]	; (2c78 <esf_dump+0x8c>)
    2c3c:	9302      	str	r3, [sp, #8]
    2c3e:	9401      	str	r4, [sp, #4]
    2c40:	9400      	str	r4, [sp, #0]
    2c42:	4623      	mov	r3, r4
    2c44:	2201      	movs	r2, #1
    2c46:	4631      	mov	r1, r6
    2c48:	4620      	mov	r0, r4
    2c4a:	f007 f9c8 	bl	9fde <z_log_msg2_runtime_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2c4e:	69ab      	ldr	r3, [r5, #24]
    2c50:	9303      	str	r3, [sp, #12]
    2c52:	4b0a      	ldr	r3, [pc, #40]	; (2c7c <esf_dump+0x90>)
    2c54:	9302      	str	r3, [sp, #8]
    2c56:	9401      	str	r4, [sp, #4]
    2c58:	9400      	str	r4, [sp, #0]
    2c5a:	4623      	mov	r3, r4
    2c5c:	2201      	movs	r2, #1
    2c5e:	4631      	mov	r1, r6
    2c60:	4620      	mov	r0, r4
    2c62:	f007 f9bc 	bl	9fde <z_log_msg2_runtime_create>
		esf->basic.pc);
}
    2c66:	b006      	add	sp, #24
    2c68:	bd70      	pop	{r4, r5, r6, pc}
    2c6a:	bf00      	nop
    2c6c:	0000afac 	.word	0x0000afac
    2c70:	0000b9ac 	.word	0x0000b9ac
    2c74:	0000b9dc 	.word	0x0000b9dc
    2c78:	0000ba0c 	.word	0x0000ba0c
    2c7c:	0000ba1c 	.word	0x0000ba1c

00002c80 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2c80:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2c82:	2800      	cmp	r0, #0
    2c84:	db07      	blt.n	2c96 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c86:	f000 021f 	and.w	r2, r0, #31
    2c8a:	0940      	lsrs	r0, r0, #5
    2c8c:	2301      	movs	r3, #1
    2c8e:	4093      	lsls	r3, r2
    2c90:	4a01      	ldr	r2, [pc, #4]	; (2c98 <arch_irq_enable+0x18>)
    2c92:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    2c96:	4770      	bx	lr
    2c98:	e000e100 	.word	0xe000e100

00002c9c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2c9c:	0942      	lsrs	r2, r0, #5
    2c9e:	4b05      	ldr	r3, [pc, #20]	; (2cb4 <arch_irq_is_enabled+0x18>)
    2ca0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2ca4:	f000 001f 	and.w	r0, r0, #31
    2ca8:	2301      	movs	r3, #1
    2caa:	fa03 f000 	lsl.w	r0, r3, r0
}
    2cae:	4010      	ands	r0, r2
    2cb0:	4770      	bx	lr
    2cb2:	bf00      	nop
    2cb4:	e000e100 	.word	0xe000e100

00002cb8 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    2cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cba:	4604      	mov	r4, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2cbc:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2cbe:	2d07      	cmp	r5, #7
    2cc0:	d80b      	bhi.n	2cda <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2cc2:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2cc4:	2800      	cmp	r0, #0
    2cc6:	db1b      	blt.n	2d00 <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2cc8:	016d      	lsls	r5, r5, #5
    2cca:	b2ed      	uxtb	r5, r5
    2ccc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    2cd0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    2cd4:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    2cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cda:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2cdc:	4f0c      	ldr	r7, [pc, #48]	; (2d10 <z_arm_irq_priority_set+0x58>)
    2cde:	2357      	movs	r3, #87	; 0x57
    2ce0:	463a      	mov	r2, r7
    2ce2:	490c      	ldr	r1, [pc, #48]	; (2d14 <z_arm_irq_priority_set+0x5c>)
    2ce4:	480c      	ldr	r0, [pc, #48]	; (2d18 <z_arm_irq_priority_set+0x60>)
    2ce6:	f007 f8c6 	bl	9e76 <assert_print>
    2cea:	2307      	movs	r3, #7
    2cec:	4622      	mov	r2, r4
    2cee:	4631      	mov	r1, r6
    2cf0:	480a      	ldr	r0, [pc, #40]	; (2d1c <z_arm_irq_priority_set+0x64>)
    2cf2:	f007 f8c0 	bl	9e76 <assert_print>
    2cf6:	2157      	movs	r1, #87	; 0x57
    2cf8:	4638      	mov	r0, r7
    2cfa:	f007 f8b5 	bl	9e68 <assert_post_action>
    2cfe:	e7e0      	b.n	2cc2 <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d00:	f000 000f 	and.w	r0, r0, #15
    2d04:	016d      	lsls	r5, r5, #5
    2d06:	b2ed      	uxtb	r5, r5
    2d08:	4b05      	ldr	r3, [pc, #20]	; (2d20 <z_arm_irq_priority_set+0x68>)
    2d0a:	541d      	strb	r5, [r3, r0]
}
    2d0c:	e7e4      	b.n	2cd8 <z_arm_irq_priority_set+0x20>
    2d0e:	bf00      	nop
    2d10:	0000ba4c 	.word	0x0000ba4c
    2d14:	0000ba84 	.word	0x0000ba84
    2d18:	0000b180 	.word	0x0000b180
    2d1c:	0000baa0 	.word	0x0000baa0
    2d20:	e000ed14 	.word	0xe000ed14

00002d24 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2d24:	bf30      	wfi
    b z_SysNmiOnReset
    2d26:	f7ff bffd 	b.w	2d24 <z_SysNmiOnReset>
    2d2a:	bf00      	nop

00002d2c <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2d2c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2d2e:	4b0b      	ldr	r3, [pc, #44]	; (2d5c <z_arm_prep_c+0x30>)
    2d30:	4a0b      	ldr	r2, [pc, #44]	; (2d60 <z_arm_prep_c+0x34>)
    2d32:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2d36:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2d38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d3c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2d40:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2d44:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2d48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2d4c:	f004 f81c 	bl	6d88 <z_bss_zero>
	z_data_copy();
    2d50:	f006 f928 	bl	8fa4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2d54:	f000 fc6a 	bl	362c <z_arm_interrupt_init>
	z_cstart();
    2d58:	f004 f874 	bl	6e44 <z_cstart>
    2d5c:	e000ed00 	.word	0xe000ed00
    2d60:	00000000 	.word	0x00000000

00002d64 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2d64:	4a0a      	ldr	r2, [pc, #40]	; (2d90 <arch_swap+0x2c>)
    2d66:	6893      	ldr	r3, [r2, #8]
    2d68:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    2d6c:	4909      	ldr	r1, [pc, #36]	; (2d94 <arch_swap+0x30>)
    2d6e:	6809      	ldr	r1, [r1, #0]
    2d70:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2d74:	4908      	ldr	r1, [pc, #32]	; (2d98 <arch_swap+0x34>)
    2d76:	684b      	ldr	r3, [r1, #4]
    2d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2d7c:	604b      	str	r3, [r1, #4]
    2d7e:	2300      	movs	r3, #0
    2d80:	f383 8811 	msr	BASEPRI, r3
    2d84:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2d88:	6893      	ldr	r3, [r2, #8]
}
    2d8a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    2d8e:	4770      	bx	lr
    2d90:	20004f28 	.word	0x20004f28
    2d94:	0000c5d0 	.word	0x0000c5d0
    2d98:	e000ed00 	.word	0xe000ed00

00002d9c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2d9c:	4913      	ldr	r1, [pc, #76]	; (2dec <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2d9e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2da0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2da4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2da6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2daa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2dae:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2db0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2db4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2db8:	4f0d      	ldr	r7, [pc, #52]	; (2df0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2dba:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2dbe:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2dc0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2dc2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2dc4:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    2dc8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2dca:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2dce:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2dd2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2dd4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2dd6:	f000 fcd3 	bl	3780 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2dda:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2dde:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2de2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2de6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2dea:	4770      	bx	lr
    ldr r1, =_kernel
    2dec:	20004f28 	.word	0x20004f28
    ldr v4, =_SCS_ICSR
    2df0:	e000ed04 	.word	0xe000ed04

00002df4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2df4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2df8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2dfa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2dfe:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2e02:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2e04:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2e08:	2902      	cmp	r1, #2
    beq _oops
    2e0a:	d0ff      	beq.n	2e0c <_oops>

00002e0c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2e0c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2e0e:	f007 f901 	bl	a014 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2e12:	bd01      	pop	{r0, pc}

00002e14 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    2e14:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2e16:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    2e1a:	490e      	ldr	r1, [pc, #56]	; (2e54 <arch_new_thread+0x40>)
    2e1c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    2e20:	f021 0101 	bic.w	r1, r1, #1
    2e24:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    2e28:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2e2c:	9b01      	ldr	r3, [sp, #4]
    2e2e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2e32:	9b02      	ldr	r3, [sp, #8]
    2e34:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2e38:	9b03      	ldr	r3, [sp, #12]
    2e3a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2e3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2e42:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    2e46:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2e48:	2300      	movs	r3, #0
    2e4a:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2e4e:	bc10      	pop	{r4}
    2e50:	4770      	bx	lr
    2e52:	bf00      	nop
    2e54:	00009cc1 	.word	0x00009cc1

00002e58 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2e58:	4b12      	ldr	r3, [pc, #72]	; (2ea4 <z_check_thread_stack_fail+0x4c>)
    2e5a:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    2e5c:	b302      	cbz	r2, 2ea0 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2e5e:	f110 0f16 	cmn.w	r0, #22
    2e62:	d011      	beq.n	2e88 <z_check_thread_stack_fail+0x30>
    2e64:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    2e68:	f1a3 0c20 	sub.w	ip, r3, #32
    2e6c:	4584      	cmp	ip, r0
    2e6e:	d805      	bhi.n	2e7c <z_check_thread_stack_fail+0x24>
    2e70:	4283      	cmp	r3, r0
    2e72:	d905      	bls.n	2e80 <z_check_thread_stack_fail+0x28>
    2e74:	428b      	cmp	r3, r1
    2e76:	d805      	bhi.n	2e84 <z_check_thread_stack_fail+0x2c>
    2e78:	2100      	movs	r1, #0
    2e7a:	e00b      	b.n	2e94 <z_check_thread_stack_fail+0x3c>
    2e7c:	2100      	movs	r1, #0
    2e7e:	e009      	b.n	2e94 <z_check_thread_stack_fail+0x3c>
    2e80:	2100      	movs	r1, #0
    2e82:	e007      	b.n	2e94 <z_check_thread_stack_fail+0x3c>
    2e84:	2101      	movs	r1, #1
    2e86:	e005      	b.n	2e94 <z_check_thread_stack_fail+0x3c>
    2e88:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    2e8c:	428b      	cmp	r3, r1
    2e8e:	bf94      	ite	ls
    2e90:	2100      	movls	r1, #0
    2e92:	2101      	movhi	r1, #1
    2e94:	b909      	cbnz	r1, 2e9a <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2e96:	2000      	movs	r0, #0
}
    2e98:	4770      	bx	lr
		return thread->stack_info.start;
    2e9a:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    2e9e:	4770      	bx	lr
		return 0;
    2ea0:	2000      	movs	r0, #0
    2ea2:	4770      	bx	lr
    2ea4:	20004f28 	.word	0x20004f28

00002ea8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2ea8:	b508      	push	{r3, lr}
    2eaa:	460d      	mov	r5, r1
    2eac:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2eae:	4b08      	ldr	r3, [pc, #32]	; (2ed0 <arch_switch_to_main_thread+0x28>)
    2eb0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2eb2:	f000 fc65 	bl	3780 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2eb6:	4620      	mov	r0, r4
    2eb8:	f385 8809 	msr	PSP, r5
    2ebc:	2100      	movs	r1, #0
    2ebe:	b663      	cpsie	if
    2ec0:	f381 8811 	msr	BASEPRI, r1
    2ec4:	f3bf 8f6f 	isb	sy
    2ec8:	2200      	movs	r2, #0
    2eca:	2300      	movs	r3, #0
    2ecc:	f006 fef8 	bl	9cc0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2ed0:	20004f28 	.word	0x20004f28

00002ed4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2ed4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2ed6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2ed8:	4a0b      	ldr	r2, [pc, #44]	; (2f08 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2eda:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2edc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2ede:	bf1e      	ittt	ne
	movne	r1, #0
    2ee0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2ee2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2ee4:	f007 fe97 	blne	ac16 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2ee8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2eea:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2eee:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2ef2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2ef6:	4905      	ldr	r1, [pc, #20]	; (2f0c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2ef8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2efa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2efc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2efe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2f02:	4903      	ldr	r1, [pc, #12]	; (2f10 <_isr_wrapper+0x3c>)
	bx r1
    2f04:	4708      	bx	r1
    2f06:	0000      	.short	0x0000
	ldr r2, =_kernel
    2f08:	20004f28 	.word	0x20004f28
	ldr r1, =_sw_isr_table
    2f0c:	0000ae04 	.word	0x0000ae04
	ldr r1, =z_arm_int_exit
    2f10:	00002f15 	.word	0x00002f15

00002f14 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2f14:	4b04      	ldr	r3, [pc, #16]	; (2f28 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2f16:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2f18:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2f1a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2f1c:	d003      	beq.n	2f26 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2f1e:	4903      	ldr	r1, [pc, #12]	; (2f2c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2f24:	600a      	str	r2, [r1, #0]

00002f26 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2f26:	4770      	bx	lr
	ldr r3, =_kernel
    2f28:	20004f28 	.word	0x20004f28
	ldr r1, =_SCS_ICSR
    2f2c:	e000ed04 	.word	0xe000ed04

00002f30 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    2f30:	b570      	push	{r4, r5, r6, lr}
    2f32:	b084      	sub	sp, #16
    2f34:	4605      	mov	r5, r0
    2f36:	460e      	mov	r6, r1
    2f38:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2f3a:	4b47      	ldr	r3, [pc, #284]	; (3058 <bus_fault+0x128>)
    2f3c:	9302      	str	r3, [sp, #8]
    2f3e:	2000      	movs	r0, #0
    2f40:	9001      	str	r0, [sp, #4]
    2f42:	9000      	str	r0, [sp, #0]
    2f44:	4603      	mov	r3, r0
    2f46:	2201      	movs	r2, #1
    2f48:	4944      	ldr	r1, [pc, #272]	; (305c <bus_fault+0x12c>)
    2f4a:	f007 f877 	bl	a03c <z_log_msg2_runtime_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2f4e:	4b44      	ldr	r3, [pc, #272]	; (3060 <bus_fault+0x130>)
    2f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f52:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    2f56:	d125      	bne.n	2fa4 <bus_fault+0x74>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2f58:	4b41      	ldr	r3, [pc, #260]	; (3060 <bus_fault+0x130>)
    2f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f5c:	f413 6f00 	tst.w	r3, #2048	; 0x800
    2f60:	d12b      	bne.n	2fba <bus_fault+0x8a>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2f62:	4b3f      	ldr	r3, [pc, #252]	; (3060 <bus_fault+0x130>)
    2f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f66:	f413 7f00 	tst.w	r3, #512	; 0x200
    2f6a:	d131      	bne.n	2fd0 <bus_fault+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2f6c:	4b3c      	ldr	r3, [pc, #240]	; (3060 <bus_fault+0x130>)
    2f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f70:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2f74:	d14f      	bne.n	3016 <bus_fault+0xe6>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2f76:	4b3a      	ldr	r3, [pc, #232]	; (3060 <bus_fault+0x130>)
    2f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f7a:	f413 7f80 	tst.w	r3, #256	; 0x100
    2f7e:	d155      	bne.n	302c <bus_fault+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2f80:	4b37      	ldr	r3, [pc, #220]	; (3060 <bus_fault+0x130>)
    2f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f84:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2f88:	d15b      	bne.n	3042 <bus_fault+0x112>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2f8a:	4a35      	ldr	r2, [pc, #212]	; (3060 <bus_fault+0x130>)
    2f8c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2f8e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2f92:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2f94:	2101      	movs	r1, #1
    2f96:	4628      	mov	r0, r5
    2f98:	f007 f84e 	bl	a038 <memory_fault_recoverable>
    2f9c:	7020      	strb	r0, [r4, #0]

	return reason;
}
    2f9e:	2000      	movs	r0, #0
    2fa0:	b004      	add	sp, #16
    2fa2:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
    2fa4:	4b2f      	ldr	r3, [pc, #188]	; (3064 <bus_fault+0x134>)
    2fa6:	9302      	str	r3, [sp, #8]
    2fa8:	2000      	movs	r0, #0
    2faa:	9001      	str	r0, [sp, #4]
    2fac:	9000      	str	r0, [sp, #0]
    2fae:	4603      	mov	r3, r0
    2fb0:	2201      	movs	r2, #1
    2fb2:	492a      	ldr	r1, [pc, #168]	; (305c <bus_fault+0x12c>)
    2fb4:	f007 f842 	bl	a03c <z_log_msg2_runtime_create>
    2fb8:	e7ce      	b.n	2f58 <bus_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    2fba:	4b2b      	ldr	r3, [pc, #172]	; (3068 <bus_fault+0x138>)
    2fbc:	9302      	str	r3, [sp, #8]
    2fbe:	2000      	movs	r0, #0
    2fc0:	9001      	str	r0, [sp, #4]
    2fc2:	9000      	str	r0, [sp, #0]
    2fc4:	4603      	mov	r3, r0
    2fc6:	2201      	movs	r2, #1
    2fc8:	4924      	ldr	r1, [pc, #144]	; (305c <bus_fault+0x12c>)
    2fca:	f007 f837 	bl	a03c <z_log_msg2_runtime_create>
    2fce:	e7c8      	b.n	2f62 <bus_fault+0x32>
		PR_FAULT_INFO("  Precise data bus error");
    2fd0:	4b26      	ldr	r3, [pc, #152]	; (306c <bus_fault+0x13c>)
    2fd2:	9302      	str	r3, [sp, #8]
    2fd4:	2000      	movs	r0, #0
    2fd6:	9001      	str	r0, [sp, #4]
    2fd8:	9000      	str	r0, [sp, #0]
    2fda:	4603      	mov	r3, r0
    2fdc:	2201      	movs	r2, #1
    2fde:	491f      	ldr	r1, [pc, #124]	; (305c <bus_fault+0x12c>)
    2fe0:	f007 f82c 	bl	a03c <z_log_msg2_runtime_create>
		STORE_xFAR(bfar, SCB->BFAR);
    2fe4:	4b1e      	ldr	r3, [pc, #120]	; (3060 <bus_fault+0x130>)
    2fe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2fea:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2fee:	d0bd      	beq.n	2f6c <bus_fault+0x3c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2ff0:	9203      	str	r2, [sp, #12]
    2ff2:	4b1f      	ldr	r3, [pc, #124]	; (3070 <bus_fault+0x140>)
    2ff4:	9302      	str	r3, [sp, #8]
    2ff6:	2000      	movs	r0, #0
    2ff8:	9001      	str	r0, [sp, #4]
    2ffa:	9000      	str	r0, [sp, #0]
    2ffc:	4603      	mov	r3, r0
    2ffe:	2201      	movs	r2, #1
    3000:	4916      	ldr	r1, [pc, #88]	; (305c <bus_fault+0x12c>)
    3002:	f007 f81b 	bl	a03c <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    3006:	2e00      	cmp	r6, #0
    3008:	d0b0      	beq.n	2f6c <bus_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    300a:	4a15      	ldr	r2, [pc, #84]	; (3060 <bus_fault+0x130>)
    300c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    300e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3012:	6293      	str	r3, [r2, #40]	; 0x28
    3014:	e7aa      	b.n	2f6c <bus_fault+0x3c>
		PR_FAULT_INFO("  Imprecise data bus error");
    3016:	4b17      	ldr	r3, [pc, #92]	; (3074 <bus_fault+0x144>)
    3018:	9302      	str	r3, [sp, #8]
    301a:	2000      	movs	r0, #0
    301c:	9001      	str	r0, [sp, #4]
    301e:	9000      	str	r0, [sp, #0]
    3020:	4603      	mov	r3, r0
    3022:	2201      	movs	r2, #1
    3024:	490d      	ldr	r1, [pc, #52]	; (305c <bus_fault+0x12c>)
    3026:	f007 f809 	bl	a03c <z_log_msg2_runtime_create>
    302a:	e7a4      	b.n	2f76 <bus_fault+0x46>
		PR_FAULT_INFO("  Instruction bus error");
    302c:	4b12      	ldr	r3, [pc, #72]	; (3078 <bus_fault+0x148>)
    302e:	9302      	str	r3, [sp, #8]
    3030:	2000      	movs	r0, #0
    3032:	9001      	str	r0, [sp, #4]
    3034:	9000      	str	r0, [sp, #0]
    3036:	4603      	mov	r3, r0
    3038:	2201      	movs	r2, #1
    303a:	4908      	ldr	r1, [pc, #32]	; (305c <bus_fault+0x12c>)
    303c:	f006 fffe 	bl	a03c <z_log_msg2_runtime_create>
    3040:	e7a3      	b.n	2f8a <bus_fault+0x5a>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3042:	4b0e      	ldr	r3, [pc, #56]	; (307c <bus_fault+0x14c>)
    3044:	9302      	str	r3, [sp, #8]
    3046:	2000      	movs	r0, #0
    3048:	9001      	str	r0, [sp, #4]
    304a:	9000      	str	r0, [sp, #0]
    304c:	4603      	mov	r3, r0
    304e:	2201      	movs	r2, #1
    3050:	4902      	ldr	r1, [pc, #8]	; (305c <bus_fault+0x12c>)
    3052:	f006 fff3 	bl	a03c <z_log_msg2_runtime_create>
    3056:	e798      	b.n	2f8a <bus_fault+0x5a>
    3058:	0000bae0 	.word	0x0000bae0
    305c:	0000afac 	.word	0x0000afac
    3060:	e000ed00 	.word	0xe000ed00
    3064:	0000baf8 	.word	0x0000baf8
    3068:	0000bb0c 	.word	0x0000bb0c
    306c:	0000bb20 	.word	0x0000bb20
    3070:	0000bb3c 	.word	0x0000bb3c
    3074:	0000bb54 	.word	0x0000bb54
    3078:	0000bb70 	.word	0x0000bb70
    307c:	0000bb88 	.word	0x0000bb88

00003080 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    3080:	b500      	push	{lr}
    3082:	b085      	sub	sp, #20
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    3084:	4b3a      	ldr	r3, [pc, #232]	; (3170 <usage_fault+0xf0>)
    3086:	9302      	str	r3, [sp, #8]
    3088:	2000      	movs	r0, #0
    308a:	9001      	str	r0, [sp, #4]
    308c:	9000      	str	r0, [sp, #0]
    308e:	4603      	mov	r3, r0
    3090:	2201      	movs	r2, #1
    3092:	4938      	ldr	r1, [pc, #224]	; (3174 <usage_fault+0xf4>)
    3094:	f006 ffd2 	bl	a03c <z_log_msg2_runtime_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3098:	4b37      	ldr	r3, [pc, #220]	; (3178 <usage_fault+0xf8>)
    309a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    309c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    30a0:	d123      	bne.n	30ea <usage_fault+0x6a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    30a2:	4b35      	ldr	r3, [pc, #212]	; (3178 <usage_fault+0xf8>)
    30a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30a6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    30aa:	d129      	bne.n	3100 <usage_fault+0x80>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    30ac:	4b32      	ldr	r3, [pc, #200]	; (3178 <usage_fault+0xf8>)
    30ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30b0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    30b4:	d12f      	bne.n	3116 <usage_fault+0x96>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    30b6:	4b30      	ldr	r3, [pc, #192]	; (3178 <usage_fault+0xf8>)
    30b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30ba:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    30be:	d135      	bne.n	312c <usage_fault+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    30c0:	4b2d      	ldr	r3, [pc, #180]	; (3178 <usage_fault+0xf8>)
    30c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    30c8:	d13b      	bne.n	3142 <usage_fault+0xc2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    30ca:	4b2b      	ldr	r3, [pc, #172]	; (3178 <usage_fault+0xf8>)
    30cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    30d2:	d141      	bne.n	3158 <usage_fault+0xd8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    30d4:	4a28      	ldr	r2, [pc, #160]	; (3178 <usage_fault+0xf8>)
    30d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    30d8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    30dc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    30e0:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    30e2:	2000      	movs	r0, #0
    30e4:	b005      	add	sp, #20
    30e6:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    30ea:	4b24      	ldr	r3, [pc, #144]	; (317c <usage_fault+0xfc>)
    30ec:	9302      	str	r3, [sp, #8]
    30ee:	2000      	movs	r0, #0
    30f0:	9001      	str	r0, [sp, #4]
    30f2:	9000      	str	r0, [sp, #0]
    30f4:	4603      	mov	r3, r0
    30f6:	2201      	movs	r2, #1
    30f8:	491e      	ldr	r1, [pc, #120]	; (3174 <usage_fault+0xf4>)
    30fa:	f006 ff9f 	bl	a03c <z_log_msg2_runtime_create>
    30fe:	e7d0      	b.n	30a2 <usage_fault+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    3100:	4b1f      	ldr	r3, [pc, #124]	; (3180 <usage_fault+0x100>)
    3102:	9302      	str	r3, [sp, #8]
    3104:	2000      	movs	r0, #0
    3106:	9001      	str	r0, [sp, #4]
    3108:	9000      	str	r0, [sp, #0]
    310a:	4603      	mov	r3, r0
    310c:	2201      	movs	r2, #1
    310e:	4919      	ldr	r1, [pc, #100]	; (3174 <usage_fault+0xf4>)
    3110:	f006 ff94 	bl	a03c <z_log_msg2_runtime_create>
    3114:	e7ca      	b.n	30ac <usage_fault+0x2c>
		PR_FAULT_INFO("  No coprocessor instructions");
    3116:	4b1b      	ldr	r3, [pc, #108]	; (3184 <usage_fault+0x104>)
    3118:	9302      	str	r3, [sp, #8]
    311a:	2000      	movs	r0, #0
    311c:	9001      	str	r0, [sp, #4]
    311e:	9000      	str	r0, [sp, #0]
    3120:	4603      	mov	r3, r0
    3122:	2201      	movs	r2, #1
    3124:	4913      	ldr	r1, [pc, #76]	; (3174 <usage_fault+0xf4>)
    3126:	f006 ff89 	bl	a03c <z_log_msg2_runtime_create>
    312a:	e7c4      	b.n	30b6 <usage_fault+0x36>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    312c:	4b16      	ldr	r3, [pc, #88]	; (3188 <usage_fault+0x108>)
    312e:	9302      	str	r3, [sp, #8]
    3130:	2000      	movs	r0, #0
    3132:	9001      	str	r0, [sp, #4]
    3134:	9000      	str	r0, [sp, #0]
    3136:	4603      	mov	r3, r0
    3138:	2201      	movs	r2, #1
    313a:	490e      	ldr	r1, [pc, #56]	; (3174 <usage_fault+0xf4>)
    313c:	f006 ff7e 	bl	a03c <z_log_msg2_runtime_create>
    3140:	e7be      	b.n	30c0 <usage_fault+0x40>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3142:	4b12      	ldr	r3, [pc, #72]	; (318c <usage_fault+0x10c>)
    3144:	9302      	str	r3, [sp, #8]
    3146:	2000      	movs	r0, #0
    3148:	9001      	str	r0, [sp, #4]
    314a:	9000      	str	r0, [sp, #0]
    314c:	4603      	mov	r3, r0
    314e:	2201      	movs	r2, #1
    3150:	4908      	ldr	r1, [pc, #32]	; (3174 <usage_fault+0xf4>)
    3152:	f006 ff73 	bl	a03c <z_log_msg2_runtime_create>
    3156:	e7b8      	b.n	30ca <usage_fault+0x4a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3158:	4b0d      	ldr	r3, [pc, #52]	; (3190 <usage_fault+0x110>)
    315a:	9302      	str	r3, [sp, #8]
    315c:	2000      	movs	r0, #0
    315e:	9001      	str	r0, [sp, #4]
    3160:	9000      	str	r0, [sp, #0]
    3162:	4603      	mov	r3, r0
    3164:	2201      	movs	r2, #1
    3166:	4903      	ldr	r1, [pc, #12]	; (3174 <usage_fault+0xf4>)
    3168:	f006 ff68 	bl	a03c <z_log_msg2_runtime_create>
    316c:	e7b2      	b.n	30d4 <usage_fault+0x54>
    316e:	bf00      	nop
    3170:	0000bbb8 	.word	0x0000bbb8
    3174:	0000afac 	.word	0x0000afac
    3178:	e000ed00 	.word	0xe000ed00
    317c:	0000bbd0 	.word	0x0000bbd0
    3180:	0000bbe4 	.word	0x0000bbe4
    3184:	0000bc00 	.word	0x0000bc00
    3188:	0000bc20 	.word	0x0000bc20
    318c:	0000bc48 	.word	0x0000bc48
    3190:	0000bc64 	.word	0x0000bc64

00003194 <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    3194:	b500      	push	{lr}
    3196:	b085      	sub	sp, #20
	*recoverable = false;
    3198:	2000      	movs	r0, #0
    319a:	7008      	strb	r0, [r1, #0]

	PR_FAULT_INFO(
    319c:	4b05      	ldr	r3, [pc, #20]	; (31b4 <debug_monitor+0x20>)
    319e:	9302      	str	r3, [sp, #8]
    31a0:	9001      	str	r0, [sp, #4]
    31a2:	9000      	str	r0, [sp, #0]
    31a4:	4603      	mov	r3, r0
    31a6:	2201      	movs	r2, #1
    31a8:	4903      	ldr	r1, [pc, #12]	; (31b8 <debug_monitor+0x24>)
    31aa:	f006 ff47 	bl	a03c <z_log_msg2_runtime_create>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    31ae:	b005      	add	sp, #20
    31b0:	f85d fb04 	ldr.w	pc, [sp], #4
    31b4:	0000bc90 	.word	0x0000bc90
    31b8:	0000afac 	.word	0x0000afac

000031bc <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    31bc:	b500      	push	{lr}
    31be:	b087      	sub	sp, #28
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    31c0:	290f      	cmp	r1, #15
    31c2:	dc10      	bgt.n	31e6 <reserved_exception+0x2a>
    31c4:	4b09      	ldr	r3, [pc, #36]	; (31ec <reserved_exception+0x30>)
    31c6:	3910      	subs	r1, #16
    31c8:	9104      	str	r1, [sp, #16]
    31ca:	9303      	str	r3, [sp, #12]
    31cc:	4b08      	ldr	r3, [pc, #32]	; (31f0 <reserved_exception+0x34>)
    31ce:	9302      	str	r3, [sp, #8]
    31d0:	2000      	movs	r0, #0
    31d2:	9001      	str	r0, [sp, #4]
    31d4:	9000      	str	r0, [sp, #0]
    31d6:	4603      	mov	r3, r0
    31d8:	2201      	movs	r2, #1
    31da:	4906      	ldr	r1, [pc, #24]	; (31f4 <reserved_exception+0x38>)
    31dc:	f006 ff2e 	bl	a03c <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    31e0:	b007      	add	sp, #28
    31e2:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
    31e6:	4b04      	ldr	r3, [pc, #16]	; (31f8 <reserved_exception+0x3c>)
    31e8:	e7ed      	b.n	31c6 <reserved_exception+0xa>
    31ea:	bf00      	nop
    31ec:	0000bcd0 	.word	0x0000bcd0
    31f0:	0000bce8 	.word	0x0000bce8
    31f4:	0000afac 	.word	0x0000afac
    31f8:	0000bcb4 	.word	0x0000bcb4

000031fc <mem_manage_fault>:
{
    31fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    31fe:	b085      	sub	sp, #20
    3200:	4605      	mov	r5, r0
    3202:	460c      	mov	r4, r1
    3204:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    3206:	4b5f      	ldr	r3, [pc, #380]	; (3384 <mem_manage_fault+0x188>)
    3208:	9302      	str	r3, [sp, #8]
    320a:	2000      	movs	r0, #0
    320c:	9001      	str	r0, [sp, #4]
    320e:	9000      	str	r0, [sp, #0]
    3210:	4603      	mov	r3, r0
    3212:	2201      	movs	r2, #1
    3214:	495c      	ldr	r1, [pc, #368]	; (3388 <mem_manage_fault+0x18c>)
    3216:	f006 ff11 	bl	a03c <z_log_msg2_runtime_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    321a:	4b5c      	ldr	r3, [pc, #368]	; (338c <mem_manage_fault+0x190>)
    321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    321e:	f013 0f10 	tst.w	r3, #16
    3222:	d13b      	bne.n	329c <mem_manage_fault+0xa0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3224:	4b59      	ldr	r3, [pc, #356]	; (338c <mem_manage_fault+0x190>)
    3226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3228:	f013 0f08 	tst.w	r3, #8
    322c:	d141      	bne.n	32b2 <mem_manage_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    322e:	4b57      	ldr	r3, [pc, #348]	; (338c <mem_manage_fault+0x190>)
    3230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3232:	f013 0f02 	tst.w	r3, #2
    3236:	d147      	bne.n	32c8 <mem_manage_fault+0xcc>
	uint32_t mmfar = -EINVAL;
    3238:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    323c:	4b53      	ldr	r3, [pc, #332]	; (338c <mem_manage_fault+0x190>)
    323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3240:	f013 0f01 	tst.w	r3, #1
    3244:	d166      	bne.n	3314 <mem_manage_fault+0x118>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3246:	4b51      	ldr	r3, [pc, #324]	; (338c <mem_manage_fault+0x190>)
    3248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    324a:	f013 0f20 	tst.w	r3, #32
    324e:	d16c      	bne.n	332a <mem_manage_fault+0x12e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3250:	4b4e      	ldr	r3, [pc, #312]	; (338c <mem_manage_fault+0x190>)
    3252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3254:	f013 0f10 	tst.w	r3, #16
    3258:	d104      	bne.n	3264 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    325a:	4b4c      	ldr	r3, [pc, #304]	; (338c <mem_manage_fault+0x190>)
    325c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    325e:	f014 0402 	ands.w	r4, r4, #2
    3262:	d004      	beq.n	326e <mem_manage_fault+0x72>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3264:	4b49      	ldr	r3, [pc, #292]	; (338c <mem_manage_fault+0x190>)
    3266:	685c      	ldr	r4, [r3, #4]
    3268:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    326c:	d168      	bne.n	3340 <mem_manage_fault+0x144>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    326e:	4b47      	ldr	r3, [pc, #284]	; (338c <mem_manage_fault+0x190>)
    3270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3272:	f013 0f20 	tst.w	r3, #32
    3276:	d004      	beq.n	3282 <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3278:	4a44      	ldr	r2, [pc, #272]	; (338c <mem_manage_fault+0x190>)
    327a:	6a53      	ldr	r3, [r2, #36]	; 0x24
    327c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3280:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3282:	4a42      	ldr	r2, [pc, #264]	; (338c <mem_manage_fault+0x190>)
    3284:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3286:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    328a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    328c:	2101      	movs	r1, #1
    328e:	4628      	mov	r0, r5
    3290:	f006 fed2 	bl	a038 <memory_fault_recoverable>
    3294:	7030      	strb	r0, [r6, #0]
}
    3296:	4620      	mov	r0, r4
    3298:	b005      	add	sp, #20
    329a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    329c:	4b3c      	ldr	r3, [pc, #240]	; (3390 <mem_manage_fault+0x194>)
    329e:	9302      	str	r3, [sp, #8]
    32a0:	2000      	movs	r0, #0
    32a2:	9001      	str	r0, [sp, #4]
    32a4:	9000      	str	r0, [sp, #0]
    32a6:	4603      	mov	r3, r0
    32a8:	2201      	movs	r2, #1
    32aa:	4937      	ldr	r1, [pc, #220]	; (3388 <mem_manage_fault+0x18c>)
    32ac:	f006 fec6 	bl	a03c <z_log_msg2_runtime_create>
    32b0:	e7b8      	b.n	3224 <mem_manage_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    32b2:	4b38      	ldr	r3, [pc, #224]	; (3394 <mem_manage_fault+0x198>)
    32b4:	9302      	str	r3, [sp, #8]
    32b6:	2000      	movs	r0, #0
    32b8:	9001      	str	r0, [sp, #4]
    32ba:	9000      	str	r0, [sp, #0]
    32bc:	4603      	mov	r3, r0
    32be:	2201      	movs	r2, #1
    32c0:	4931      	ldr	r1, [pc, #196]	; (3388 <mem_manage_fault+0x18c>)
    32c2:	f006 febb 	bl	a03c <z_log_msg2_runtime_create>
    32c6:	e7b2      	b.n	322e <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Data Access Violation");
    32c8:	4b33      	ldr	r3, [pc, #204]	; (3398 <mem_manage_fault+0x19c>)
    32ca:	9302      	str	r3, [sp, #8]
    32cc:	2000      	movs	r0, #0
    32ce:	9001      	str	r0, [sp, #4]
    32d0:	9000      	str	r0, [sp, #0]
    32d2:	4603      	mov	r3, r0
    32d4:	2201      	movs	r2, #1
    32d6:	492c      	ldr	r1, [pc, #176]	; (3388 <mem_manage_fault+0x18c>)
    32d8:	f006 feb0 	bl	a03c <z_log_msg2_runtime_create>
		uint32_t temp = SCB->MMFAR;
    32dc:	4b2b      	ldr	r3, [pc, #172]	; (338c <mem_manage_fault+0x190>)
    32de:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    32e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    32e2:	f013 0f80 	tst.w	r3, #128	; 0x80
    32e6:	d102      	bne.n	32ee <mem_manage_fault+0xf2>
	uint32_t mmfar = -EINVAL;
    32e8:	f06f 0715 	mvn.w	r7, #21
    32ec:	e7a6      	b.n	323c <mem_manage_fault+0x40>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    32ee:	9703      	str	r7, [sp, #12]
    32f0:	4b2a      	ldr	r3, [pc, #168]	; (339c <mem_manage_fault+0x1a0>)
    32f2:	9302      	str	r3, [sp, #8]
    32f4:	2000      	movs	r0, #0
    32f6:	9001      	str	r0, [sp, #4]
    32f8:	9000      	str	r0, [sp, #0]
    32fa:	4603      	mov	r3, r0
    32fc:	2201      	movs	r2, #1
    32fe:	4922      	ldr	r1, [pc, #136]	; (3388 <mem_manage_fault+0x18c>)
    3300:	f006 fe9c 	bl	a03c <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    3304:	2c00      	cmp	r4, #0
    3306:	d099      	beq.n	323c <mem_manage_fault+0x40>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3308:	4a20      	ldr	r2, [pc, #128]	; (338c <mem_manage_fault+0x190>)
    330a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    330c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3310:	6293      	str	r3, [r2, #40]	; 0x28
    3312:	e793      	b.n	323c <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Instruction Access Violation");
    3314:	4b22      	ldr	r3, [pc, #136]	; (33a0 <mem_manage_fault+0x1a4>)
    3316:	9302      	str	r3, [sp, #8]
    3318:	2000      	movs	r0, #0
    331a:	9001      	str	r0, [sp, #4]
    331c:	9000      	str	r0, [sp, #0]
    331e:	4603      	mov	r3, r0
    3320:	2201      	movs	r2, #1
    3322:	4919      	ldr	r1, [pc, #100]	; (3388 <mem_manage_fault+0x18c>)
    3324:	f006 fe8a 	bl	a03c <z_log_msg2_runtime_create>
    3328:	e78d      	b.n	3246 <mem_manage_fault+0x4a>
		PR_FAULT_INFO(
    332a:	4b1e      	ldr	r3, [pc, #120]	; (33a4 <mem_manage_fault+0x1a8>)
    332c:	9302      	str	r3, [sp, #8]
    332e:	2000      	movs	r0, #0
    3330:	9001      	str	r0, [sp, #4]
    3332:	9000      	str	r0, [sp, #0]
    3334:	4603      	mov	r3, r0
    3336:	2201      	movs	r2, #1
    3338:	4913      	ldr	r1, [pc, #76]	; (3388 <mem_manage_fault+0x18c>)
    333a:	f006 fe7f 	bl	a03c <z_log_msg2_runtime_create>
    333e:	e787      	b.n	3250 <mem_manage_fault+0x54>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3340:	4629      	mov	r1, r5
    3342:	4638      	mov	r0, r7
    3344:	f7ff fd88 	bl	2e58 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    3348:	4607      	mov	r7, r0
    334a:	b9b0      	cbnz	r0, 337a <mem_manage_fault+0x17e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    334c:	4b0f      	ldr	r3, [pc, #60]	; (338c <mem_manage_fault+0x190>)
    334e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    3350:	f014 0410 	ands.w	r4, r4, #16
    3354:	d08b      	beq.n	326e <mem_manage_fault+0x72>
    3356:	4c14      	ldr	r4, [pc, #80]	; (33a8 <mem_manage_fault+0x1ac>)
    3358:	f240 1349 	movw	r3, #329	; 0x149
    335c:	4622      	mov	r2, r4
    335e:	4913      	ldr	r1, [pc, #76]	; (33ac <mem_manage_fault+0x1b0>)
    3360:	4813      	ldr	r0, [pc, #76]	; (33b0 <mem_manage_fault+0x1b4>)
    3362:	f006 fd88 	bl	9e76 <assert_print>
    3366:	4813      	ldr	r0, [pc, #76]	; (33b4 <mem_manage_fault+0x1b8>)
    3368:	f006 fd85 	bl	9e76 <assert_print>
    336c:	f240 1149 	movw	r1, #329	; 0x149
    3370:	4620      	mov	r0, r4
    3372:	f006 fd79 	bl	9e68 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3376:	463c      	mov	r4, r7
    3378:	e779      	b.n	326e <mem_manage_fault+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    337a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    337e:	2402      	movs	r4, #2
    3380:	e775      	b.n	326e <mem_manage_fault+0x72>
    3382:	bf00      	nop
    3384:	0000bcfc 	.word	0x0000bcfc
    3388:	0000afac 	.word	0x0000afac
    338c:	e000ed00 	.word	0xe000ed00
    3390:	0000bd14 	.word	0x0000bd14
    3394:	0000bb0c 	.word	0x0000bb0c
    3398:	0000bd48 	.word	0x0000bd48
    339c:	0000bd60 	.word	0x0000bd60
    33a0:	0000bd78 	.word	0x0000bd78
    33a4:	0000bb88 	.word	0x0000bb88
    33a8:	0000bd98 	.word	0x0000bd98
    33ac:	0000bdd4 	.word	0x0000bdd4
    33b0:	0000b180 	.word	0x0000b180
    33b4:	0000be20 	.word	0x0000be20

000033b8 <hard_fault>:
{
    33b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    33ba:	b085      	sub	sp, #20
    33bc:	4607      	mov	r7, r0
    33be:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    33c0:	4b4b      	ldr	r3, [pc, #300]	; (34f0 <hard_fault+0x138>)
    33c2:	9302      	str	r3, [sp, #8]
    33c4:	2400      	movs	r4, #0
    33c6:	9401      	str	r4, [sp, #4]
    33c8:	9400      	str	r4, [sp, #0]
    33ca:	4623      	mov	r3, r4
    33cc:	2201      	movs	r2, #1
    33ce:	4949      	ldr	r1, [pc, #292]	; (34f4 <hard_fault+0x13c>)
    33d0:	4620      	mov	r0, r4
    33d2:	f006 fe33 	bl	a03c <z_log_msg2_runtime_create>
	*recoverable = false;
    33d6:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    33d8:	4b47      	ldr	r3, [pc, #284]	; (34f8 <hard_fault+0x140>)
    33da:	6add      	ldr	r5, [r3, #44]	; 0x2c
    33dc:	f015 0502 	ands.w	r5, r5, #2
    33e0:	d12d      	bne.n	343e <hard_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    33e2:	4b45      	ldr	r3, [pc, #276]	; (34f8 <hard_fault+0x140>)
    33e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    33e6:	2b00      	cmp	r3, #0
    33e8:	db36      	blt.n	3458 <hard_fault+0xa0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    33ea:	4b43      	ldr	r3, [pc, #268]	; (34f8 <hard_fault+0x140>)
    33ec:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    33ee:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    33f2:	d06b      	beq.n	34cc <hard_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    33f4:	4b41      	ldr	r3, [pc, #260]	; (34fc <hard_fault+0x144>)
    33f6:	9302      	str	r3, [sp, #8]
    33f8:	2000      	movs	r0, #0
    33fa:	9001      	str	r0, [sp, #4]
    33fc:	9000      	str	r0, [sp, #0]
    33fe:	4603      	mov	r3, r0
    3400:	2201      	movs	r2, #1
    3402:	493c      	ldr	r1, [pc, #240]	; (34f4 <hard_fault+0x13c>)
    3404:	f006 fe1a 	bl	a03c <z_log_msg2_runtime_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    3408:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    340a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    340e:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3412:	429a      	cmp	r2, r3
    3414:	d02c      	beq.n	3470 <hard_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
    3416:	4b38      	ldr	r3, [pc, #224]	; (34f8 <hard_fault+0x140>)
    3418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    341c:	2b00      	cmp	r3, #0
    341e:	d135      	bne.n	348c <hard_fault+0xd4>
		} else if (SCB_BFSR != 0) {
    3420:	4b35      	ldr	r3, [pc, #212]	; (34f8 <hard_fault+0x140>)
    3422:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    3426:	2b00      	cmp	r3, #0
    3428:	d137      	bne.n	349a <hard_fault+0xe2>
		} else if (SCB_UFSR != 0) {
    342a:	4b33      	ldr	r3, [pc, #204]	; (34f8 <hard_fault+0x140>)
    342c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    342e:	b29b      	uxth	r3, r3
    3430:	2b00      	cmp	r3, #0
    3432:	d039      	beq.n	34a8 <hard_fault+0xf0>
			reason = usage_fault(esf);
    3434:	4638      	mov	r0, r7
    3436:	f7ff fe23 	bl	3080 <usage_fault>
    343a:	4604      	mov	r4, r0
    343c:	e009      	b.n	3452 <hard_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    343e:	4b30      	ldr	r3, [pc, #192]	; (3500 <hard_fault+0x148>)
    3440:	9302      	str	r3, [sp, #8]
    3442:	9401      	str	r4, [sp, #4]
    3444:	9400      	str	r4, [sp, #0]
    3446:	4623      	mov	r3, r4
    3448:	2201      	movs	r2, #1
    344a:	492a      	ldr	r1, [pc, #168]	; (34f4 <hard_fault+0x13c>)
    344c:	4620      	mov	r0, r4
    344e:	f006 fdf5 	bl	a03c <z_log_msg2_runtime_create>
}
    3452:	4620      	mov	r0, r4
    3454:	b005      	add	sp, #20
    3456:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
    3458:	4b2a      	ldr	r3, [pc, #168]	; (3504 <hard_fault+0x14c>)
    345a:	9302      	str	r3, [sp, #8]
    345c:	2000      	movs	r0, #0
    345e:	9001      	str	r0, [sp, #4]
    3460:	9000      	str	r0, [sp, #0]
    3462:	4603      	mov	r3, r0
    3464:	2201      	movs	r2, #1
    3466:	4923      	ldr	r1, [pc, #140]	; (34f4 <hard_fault+0x13c>)
    3468:	f006 fde8 	bl	a03c <z_log_msg2_runtime_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    346c:	462c      	mov	r4, r5
    346e:	e7f0      	b.n	3452 <hard_fault+0x9a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    3470:	683b      	ldr	r3, [r7, #0]
    3472:	9303      	str	r3, [sp, #12]
    3474:	4b24      	ldr	r3, [pc, #144]	; (3508 <hard_fault+0x150>)
    3476:	9302      	str	r3, [sp, #8]
    3478:	2000      	movs	r0, #0
    347a:	9001      	str	r0, [sp, #4]
    347c:	9000      	str	r0, [sp, #0]
    347e:	4603      	mov	r3, r0
    3480:	2201      	movs	r2, #1
    3482:	491c      	ldr	r1, [pc, #112]	; (34f4 <hard_fault+0x13c>)
    3484:	f006 fdda 	bl	a03c <z_log_msg2_runtime_create>
			reason = esf->basic.r0;
    3488:	683c      	ldr	r4, [r7, #0]
    348a:	e7e2      	b.n	3452 <hard_fault+0x9a>
			reason = mem_manage_fault(esf, 1, recoverable);
    348c:	4632      	mov	r2, r6
    348e:	2101      	movs	r1, #1
    3490:	4638      	mov	r0, r7
    3492:	f7ff feb3 	bl	31fc <mem_manage_fault>
    3496:	4604      	mov	r4, r0
    3498:	e7db      	b.n	3452 <hard_fault+0x9a>
			reason = bus_fault(esf, 1, recoverable);
    349a:	4632      	mov	r2, r6
    349c:	2101      	movs	r1, #1
    349e:	4638      	mov	r0, r7
    34a0:	f7ff fd46 	bl	2f30 <bus_fault>
    34a4:	4604      	mov	r4, r0
    34a6:	e7d4      	b.n	3452 <hard_fault+0x9a>
			__ASSERT(0,
    34a8:	4c18      	ldr	r4, [pc, #96]	; (350c <hard_fault+0x154>)
    34aa:	f240 23cd 	movw	r3, #717	; 0x2cd
    34ae:	4622      	mov	r2, r4
    34b0:	4917      	ldr	r1, [pc, #92]	; (3510 <hard_fault+0x158>)
    34b2:	4818      	ldr	r0, [pc, #96]	; (3514 <hard_fault+0x15c>)
    34b4:	f006 fcdf 	bl	9e76 <assert_print>
    34b8:	4817      	ldr	r0, [pc, #92]	; (3518 <hard_fault+0x160>)
    34ba:	f006 fcdc 	bl	9e76 <assert_print>
    34be:	f240 21cd 	movw	r1, #717	; 0x2cd
    34c2:	4620      	mov	r0, r4
    34c4:	f006 fcd0 	bl	9e68 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    34c8:	462c      	mov	r4, r5
    34ca:	e7c2      	b.n	3452 <hard_fault+0x9a>
		__ASSERT(0,
    34cc:	4d0f      	ldr	r5, [pc, #60]	; (350c <hard_fault+0x154>)
    34ce:	f240 23d1 	movw	r3, #721	; 0x2d1
    34d2:	462a      	mov	r2, r5
    34d4:	490e      	ldr	r1, [pc, #56]	; (3510 <hard_fault+0x158>)
    34d6:	480f      	ldr	r0, [pc, #60]	; (3514 <hard_fault+0x15c>)
    34d8:	f006 fccd 	bl	9e76 <assert_print>
    34dc:	480f      	ldr	r0, [pc, #60]	; (351c <hard_fault+0x164>)
    34de:	f006 fcca 	bl	9e76 <assert_print>
    34e2:	f240 21d1 	movw	r1, #721	; 0x2d1
    34e6:	4628      	mov	r0, r5
    34e8:	f006 fcbe 	bl	9e68 <assert_post_action>
	return reason;
    34ec:	e7b1      	b.n	3452 <hard_fault+0x9a>
    34ee:	bf00      	nop
    34f0:	0000be44 	.word	0x0000be44
    34f4:	0000afac 	.word	0x0000afac
    34f8:	e000ed00 	.word	0xe000ed00
    34fc:	0000be90 	.word	0x0000be90
    3500:	0000be5c 	.word	0x0000be5c
    3504:	0000be80 	.word	0x0000be80
    3508:	0000beb0 	.word	0x0000beb0
    350c:	0000bd98 	.word	0x0000bd98
    3510:	0000b83c 	.word	0x0000b83c
    3514:	0000b180 	.word	0x0000b180
    3518:	0000becc 	.word	0x0000becc
    351c:	0000bef0 	.word	0x0000bef0

00003520 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3520:	b5f0      	push	{r4, r5, r6, r7, lr}
    3522:	b08f      	sub	sp, #60	; 0x3c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3524:	4b31      	ldr	r3, [pc, #196]	; (35ec <z_arm_fault+0xcc>)
    3526:	685d      	ldr	r5, [r3, #4]
    3528:	f3c5 0508 	ubfx	r5, r5, #0, #9
    352c:	2300      	movs	r3, #0
    352e:	f383 8811 	msr	BASEPRI, r3
    3532:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3536:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    353a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    353e:	d125      	bne.n	358c <z_arm_fault+0x6c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3540:	f002 030c 	and.w	r3, r2, #12
    3544:	2b08      	cmp	r3, #8
    3546:	d011      	beq.n	356c <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3548:	f012 0f08 	tst.w	r2, #8
    354c:	d01b      	beq.n	3586 <z_arm_fault+0x66>
			ptr_esf =  (z_arch_esf_t *)psp;
    354e:	460c      	mov	r4, r1
	*nested_exc = false;
    3550:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    3552:	b1f4      	cbz	r4, 3592 <z_arm_fault+0x72>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    3554:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    3558:	4629      	mov	r1, r5
    355a:	4620      	mov	r0, r4
    355c:	f006 fd7d 	bl	a05a <fault_handle>
    3560:	4605      	mov	r5, r0
	if (recoverable) {
    3562:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    3566:	b32b      	cbz	r3, 35b4 <z_arm_fault+0x94>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    3568:	b00f      	add	sp, #60	; 0x3c
    356a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    356c:	4b20      	ldr	r3, [pc, #128]	; (35f0 <z_arm_fault+0xd0>)
    356e:	9302      	str	r3, [sp, #8]
    3570:	2400      	movs	r4, #0
    3572:	9401      	str	r4, [sp, #4]
    3574:	9400      	str	r4, [sp, #0]
    3576:	4623      	mov	r3, r4
    3578:	2201      	movs	r2, #1
    357a:	491e      	ldr	r1, [pc, #120]	; (35f4 <z_arm_fault+0xd4>)
    357c:	4620      	mov	r0, r4
    357e:	f006 fd5d 	bl	a03c <z_log_msg2_runtime_create>
	*nested_exc = false;
    3582:	4626      	mov	r6, r4
		return NULL;
    3584:	e7e5      	b.n	3552 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    3586:	4604      	mov	r4, r0
			*nested_exc = true;
    3588:	2601      	movs	r6, #1
    358a:	e7e2      	b.n	3552 <z_arm_fault+0x32>
	*nested_exc = false;
    358c:	2600      	movs	r6, #0
		return NULL;
    358e:	4634      	mov	r4, r6
    3590:	e7df      	b.n	3552 <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
    3592:	4f19      	ldr	r7, [pc, #100]	; (35f8 <z_arm_fault+0xd8>)
    3594:	f240 33fb 	movw	r3, #1019	; 0x3fb
    3598:	463a      	mov	r2, r7
    359a:	4918      	ldr	r1, [pc, #96]	; (35fc <z_arm_fault+0xdc>)
    359c:	4818      	ldr	r0, [pc, #96]	; (3600 <z_arm_fault+0xe0>)
    359e:	f006 fc6a 	bl	9e76 <assert_print>
    35a2:	4818      	ldr	r0, [pc, #96]	; (3604 <z_arm_fault+0xe4>)
    35a4:	f006 fc67 	bl	9e76 <assert_print>
    35a8:	f240 31fb 	movw	r1, #1019	; 0x3fb
    35ac:	4638      	mov	r0, r7
    35ae:	f006 fc5b 	bl	9e68 <assert_post_action>
    35b2:	e7cf      	b.n	3554 <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    35b4:	2220      	movs	r2, #32
    35b6:	4621      	mov	r1, r4
    35b8:	a805      	add	r0, sp, #20
    35ba:	f006 fde9 	bl	a190 <memcpy>
	if (nested_exc) {
    35be:	b14e      	cbz	r6, 35d4 <z_arm_fault+0xb4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    35c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    35c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    35c6:	b95a      	cbnz	r2, 35e0 <z_arm_fault+0xc0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    35c8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    35cc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    35d0:	930c      	str	r3, [sp, #48]	; 0x30
    35d2:	e005      	b.n	35e0 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    35d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    35d6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    35da:	f023 0301 	bic.w	r3, r3, #1
    35de:	930c      	str	r3, [sp, #48]	; 0x30
	z_arm_fatal_error(reason, &esf_copy);
    35e0:	a905      	add	r1, sp, #20
    35e2:	4628      	mov	r0, r5
    35e4:	f006 fd0a 	bl	9ffc <z_arm_fatal_error>
    35e8:	e7be      	b.n	3568 <z_arm_fault+0x48>
    35ea:	bf00      	nop
    35ec:	e000ed00 	.word	0xe000ed00
    35f0:	0000bf20 	.word	0x0000bf20
    35f4:	0000afac 	.word	0x0000afac
    35f8:	0000bd98 	.word	0x0000bd98
    35fc:	0000bf4c 	.word	0x0000bf4c
    3600:	0000b180 	.word	0x0000b180
    3604:	0000bf60 	.word	0x0000bf60

00003608 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3608:	4a02      	ldr	r2, [pc, #8]	; (3614 <z_arm_fault_init+0xc>)
    360a:	6953      	ldr	r3, [r2, #20]
    360c:	f043 0310 	orr.w	r3, r3, #16
    3610:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    3612:	4770      	bx	lr
    3614:	e000ed00 	.word	0xe000ed00

00003618 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3618:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    361c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3620:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3622:	4672      	mov	r2, lr
	bl z_arm_fault
    3624:	f7ff ff7c 	bl	3520 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3628:	bd01      	pop	{r0, pc}
    362a:	bf00      	nop

0000362c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    362c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    362e:	e006      	b.n	363e <z_arm_interrupt_init+0x12>
    3630:	f002 010f 	and.w	r1, r2, #15
    3634:	4b09      	ldr	r3, [pc, #36]	; (365c <z_arm_interrupt_init+0x30>)
    3636:	440b      	add	r3, r1
    3638:	2120      	movs	r1, #32
    363a:	7619      	strb	r1, [r3, #24]
    363c:	3201      	adds	r2, #1
    363e:	2a2f      	cmp	r2, #47	; 0x2f
    3640:	dc0a      	bgt.n	3658 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    3642:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    3644:	2b00      	cmp	r3, #0
    3646:	dbf3      	blt.n	3630 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3648:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    364c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3650:	2120      	movs	r1, #32
    3652:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    3656:	e7f1      	b.n	363c <z_arm_interrupt_init+0x10>
	}
}
    3658:	4770      	bx	lr
    365a:	bf00      	nop
    365c:	e000ecfc 	.word	0xe000ecfc

00003660 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3660:	2000      	movs	r0, #0
    msr CONTROL, r0
    3662:	f380 8814 	msr	CONTROL, r0
    isb
    3666:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    366a:	f007 fb51 	bl	ad10 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    366e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3670:	490d      	ldr	r1, [pc, #52]	; (36a8 <__start+0x48>)
    str r0, [r1]
    3672:	6008      	str	r0, [r1, #0]
    dsb
    3674:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3678:	480c      	ldr	r0, [pc, #48]	; (36ac <__start+0x4c>)
    msr msp, r0
    367a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    367e:	f000 f82d 	bl	36dc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3682:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3684:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3688:	4809      	ldr	r0, [pc, #36]	; (36b0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    368a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    368e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3690:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3694:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3698:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    369a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    369c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    36a0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    36a4:	f7ff fb42 	bl	2d2c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    36a8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    36ac:	20005980 	.word	0x20005980
    ldr r0, =z_interrupt_stacks
    36b0:	20005b00 	.word	0x20005b00

000036b4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    36b4:	4b08      	ldr	r3, [pc, #32]	; (36d8 <z_arm_clear_arm_mpu_config+0x24>)
    36b6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    36ba:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    36be:	2300      	movs	r3, #0
    36c0:	e006      	b.n	36d0 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    36c2:	4a05      	ldr	r2, [pc, #20]	; (36d8 <z_arm_clear_arm_mpu_config+0x24>)
    36c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    36c8:	2100      	movs	r1, #0
    36ca:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    36ce:	3301      	adds	r3, #1
    36d0:	4283      	cmp	r3, r0
    36d2:	dbf6      	blt.n	36c2 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    36d4:	4770      	bx	lr
    36d6:	bf00      	nop
    36d8:	e000ed00 	.word	0xe000ed00

000036dc <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    36dc:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    36de:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    36e0:	2400      	movs	r4, #0
    36e2:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    36e6:	f7ff ffe5 	bl	36b4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    36ea:	4623      	mov	r3, r4
    36ec:	e008      	b.n	3700 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    36ee:	f103 0120 	add.w	r1, r3, #32
    36f2:	4a0e      	ldr	r2, [pc, #56]	; (372c <z_arm_init_arch_hw_at_boot+0x50>)
    36f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    36f8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    36fc:	3301      	adds	r3, #1
    36fe:	b2db      	uxtb	r3, r3
    3700:	2b07      	cmp	r3, #7
    3702:	d9f4      	bls.n	36ee <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3704:	2300      	movs	r3, #0
    3706:	e008      	b.n	371a <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3708:	f103 0160 	add.w	r1, r3, #96	; 0x60
    370c:	4a07      	ldr	r2, [pc, #28]	; (372c <z_arm_init_arch_hw_at_boot+0x50>)
    370e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3712:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3716:	3301      	adds	r3, #1
    3718:	b2db      	uxtb	r3, r3
    371a:	2b07      	cmp	r3, #7
    371c:	d9f4      	bls.n	3708 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    371e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3720:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3724:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3728:	bd10      	pop	{r4, pc}
    372a:	bf00      	nop
    372c:	e000e100 	.word	0xe000e100

00003730 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    3730:	b508      	push	{r3, lr}
	if (_current == thread) {
    3732:	4b0a      	ldr	r3, [pc, #40]	; (375c <z_impl_k_thread_abort+0x2c>)
    3734:	689b      	ldr	r3, [r3, #8]
    3736:	4283      	cmp	r3, r0
    3738:	d002      	beq.n	3740 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    373a:	f005 fb91 	bl	8e60 <z_thread_abort>
}
    373e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3740:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3744:	2b00      	cmp	r3, #0
    3746:	d0f8      	beq.n	373a <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3748:	4b05      	ldr	r3, [pc, #20]	; (3760 <z_impl_k_thread_abort+0x30>)
    374a:	685a      	ldr	r2, [r3, #4]
    374c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3750:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    3752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3754:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3758:	625a      	str	r2, [r3, #36]	; 0x24
    375a:	e7ee      	b.n	373a <z_impl_k_thread_abort+0xa>
    375c:	20004f28 	.word	0x20004f28
    3760:	e000ed00 	.word	0xe000ed00

00003764 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    3764:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3766:	4b03      	ldr	r3, [pc, #12]	; (3774 <z_arm_configure_static_mpu_regions+0x10>)
    3768:	4a03      	ldr	r2, [pc, #12]	; (3778 <z_arm_configure_static_mpu_regions+0x14>)
    376a:	2101      	movs	r1, #1
    376c:	4803      	ldr	r0, [pc, #12]	; (377c <z_arm_configure_static_mpu_regions+0x18>)
    376e:	f000 f8bb 	bl	38e8 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    3772:	bd08      	pop	{r3, pc}
    3774:	20040000 	.word	0x20040000
    3778:	20000000 	.word	0x20000000
    377c:	0000bfa4 	.word	0x0000bfa4

00003780 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    3780:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3782:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    3786:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3788:	4804      	ldr	r0, [pc, #16]	; (379c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    378a:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    378c:	2320      	movs	r3, #32
    378e:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3790:	4b03      	ldr	r3, [pc, #12]	; (37a0 <z_arm_configure_dynamic_mpu_regions+0x20>)
    3792:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3794:	2101      	movs	r1, #1
    3796:	f000 f8c9 	bl	392c <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    379a:	bd08      	pop	{r3, pc}
    379c:	200049c4 	.word	0x200049c4
    37a0:	150b0000 	.word	0x150b0000

000037a4 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    37a4:	4a08      	ldr	r2, [pc, #32]	; (37c8 <region_init+0x24>)
    37a6:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    37aa:	680b      	ldr	r3, [r1, #0]
    37ac:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    37b0:	4303      	orrs	r3, r0
    37b2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    37b6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    37ba:	688b      	ldr	r3, [r1, #8]
    37bc:	f043 0301 	orr.w	r3, r3, #1
    37c0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    37c4:	4770      	bx	lr
    37c6:	bf00      	nop
    37c8:	e000ed00 	.word	0xe000ed00

000037cc <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    37cc:	b510      	push	{r4, lr}
    37ce:	b084      	sub	sp, #16
    37d0:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    37d2:	2807      	cmp	r0, #7
    37d4:	d804      	bhi.n	37e0 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    37d6:	f7ff ffe5 	bl	37a4 <region_init>

	return index;
    37da:	4620      	mov	r0, r4
}
    37dc:	b004      	add	sp, #16
    37de:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    37e0:	9003      	str	r0, [sp, #12]
    37e2:	4b06      	ldr	r3, [pc, #24]	; (37fc <region_allocate_and_init+0x30>)
    37e4:	9302      	str	r3, [sp, #8]
    37e6:	2000      	movs	r0, #0
    37e8:	9001      	str	r0, [sp, #4]
    37ea:	9000      	str	r0, [sp, #0]
    37ec:	4603      	mov	r3, r0
    37ee:	2201      	movs	r2, #1
    37f0:	4903      	ldr	r1, [pc, #12]	; (3800 <region_allocate_and_init+0x34>)
    37f2:	f006 fc68 	bl	a0c6 <z_log_msg2_runtime_create>
		return -EINVAL;
    37f6:	f06f 0015 	mvn.w	r0, #21
    37fa:	e7ef      	b.n	37dc <region_allocate_and_init+0x10>
    37fc:	0000bfb0 	.word	0x0000bfb0
    3800:	0000afa4 	.word	0x0000afa4

00003804 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3808:	b085      	sub	sp, #20
    380a:	4680      	mov	r8, r0
    380c:	460f      	mov	r7, r1
    380e:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
    3810:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    3812:	2500      	movs	r5, #0
    3814:	e009      	b.n	382a <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3816:	4621      	mov	r1, r4
    3818:	b2f0      	uxtb	r0, r6
    381a:	f006 fc63 	bl	a0e4 <mpu_configure_region>
    381e:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    3820:	f110 0f16 	cmn.w	r0, #22
    3824:	d01e      	beq.n	3864 <mpu_configure_regions+0x60>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    3826:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    3828:	3501      	adds	r5, #1
    382a:	42bd      	cmp	r5, r7
    382c:	da1a      	bge.n	3864 <mpu_configure_regions+0x60>
		if (regions[i].size == 0U) {
    382e:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    3832:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    3836:	6862      	ldr	r2, [r4, #4]
    3838:	2a00      	cmp	r2, #0
    383a:	d0f5      	beq.n	3828 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
    383c:	f1b9 0f00 	cmp.w	r9, #0
    3840:	d0e9      	beq.n	3816 <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
    3842:	4620      	mov	r0, r4
    3844:	f006 fc2e 	bl	a0a4 <mpu_partition_is_valid>
		if (do_sanity_check &&
    3848:	2800      	cmp	r0, #0
    384a:	d1e4      	bne.n	3816 <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
    384c:	9503      	str	r5, [sp, #12]
    384e:	4b07      	ldr	r3, [pc, #28]	; (386c <mpu_configure_regions+0x68>)
    3850:	9302      	str	r3, [sp, #8]
    3852:	9001      	str	r0, [sp, #4]
    3854:	9000      	str	r0, [sp, #0]
    3856:	4603      	mov	r3, r0
    3858:	2201      	movs	r2, #1
    385a:	4905      	ldr	r1, [pc, #20]	; (3870 <mpu_configure_regions+0x6c>)
    385c:	f006 fc33 	bl	a0c6 <z_log_msg2_runtime_create>
			return -EINVAL;
    3860:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    3864:	4630      	mov	r0, r6
    3866:	b005      	add	sp, #20
    3868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    386c:	0000bfd8 	.word	0x0000bfd8
    3870:	0000afa4 	.word	0x0000afa4

00003874 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    3874:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    3876:	4c03      	ldr	r4, [pc, #12]	; (3884 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3878:	2301      	movs	r3, #1
    387a:	7822      	ldrb	r2, [r4, #0]
    387c:	f7ff ffc2 	bl	3804 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3880:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    3882:	bd10      	pop	{r4, pc}
    3884:	20005155 	.word	0x20005155

00003888 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3888:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    388a:	2300      	movs	r3, #0
    388c:	4a09      	ldr	r2, [pc, #36]	; (38b4 <mpu_configure_dynamic_mpu_regions+0x2c>)
    388e:	7812      	ldrb	r2, [r2, #0]
    3890:	f7ff ffb8 	bl	3804 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3894:	f110 0f16 	cmn.w	r0, #22
    3898:	d00a      	beq.n	38b0 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    389a:	4603      	mov	r3, r0
    389c:	e006      	b.n	38ac <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    389e:	4a06      	ldr	r2, [pc, #24]	; (38b8 <mpu_configure_dynamic_mpu_regions+0x30>)
    38a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    38a4:	2100      	movs	r1, #0
    38a6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    38aa:	3301      	adds	r3, #1
    38ac:	2b07      	cmp	r3, #7
    38ae:	ddf6      	ble.n	389e <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    38b0:	bd08      	pop	{r3, pc}
    38b2:	bf00      	nop
    38b4:	20005155 	.word	0x20005155
    38b8:	e000ed00 	.word	0xe000ed00

000038bc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    38bc:	4b04      	ldr	r3, [pc, #16]	; (38d0 <arm_core_mpu_enable+0x14>)
    38be:	2205      	movs	r2, #5
    38c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    38c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38c8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    38cc:	4770      	bx	lr
    38ce:	bf00      	nop
    38d0:	e000ed00 	.word	0xe000ed00

000038d4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    38d4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    38d8:	4b02      	ldr	r3, [pc, #8]	; (38e4 <arm_core_mpu_disable+0x10>)
    38da:	2200      	movs	r2, #0
    38dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    38e0:	4770      	bx	lr
    38e2:	bf00      	nop
    38e4:	e000ed00 	.word	0xe000ed00

000038e8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    38e8:	b538      	push	{r3, r4, r5, lr}
    38ea:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    38ec:	f7ff ffc2 	bl	3874 <mpu_configure_static_mpu_regions>
    38f0:	f110 0f16 	cmn.w	r0, #22
    38f4:	d000      	beq.n	38f8 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    38f6:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    38f8:	4d08      	ldr	r5, [pc, #32]	; (391c <arm_core_mpu_configure_static_mpu_regions+0x34>)
    38fa:	f240 1311 	movw	r3, #273	; 0x111
    38fe:	462a      	mov	r2, r5
    3900:	4907      	ldr	r1, [pc, #28]	; (3920 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    3902:	4808      	ldr	r0, [pc, #32]	; (3924 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    3904:	f006 fab7 	bl	9e76 <assert_print>
    3908:	4621      	mov	r1, r4
    390a:	4807      	ldr	r0, [pc, #28]	; (3928 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    390c:	f006 fab3 	bl	9e76 <assert_print>
    3910:	f240 1111 	movw	r1, #273	; 0x111
    3914:	4628      	mov	r0, r5
    3916:	f006 faa7 	bl	9e68 <assert_post_action>
}
    391a:	e7ec      	b.n	38f6 <arm_core_mpu_configure_static_mpu_regions+0xe>
    391c:	0000bffc 	.word	0x0000bffc
    3920:	0000b83c 	.word	0x0000b83c
    3924:	0000b180 	.word	0x0000b180
    3928:	0000c034 	.word	0x0000c034

0000392c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    392c:	b538      	push	{r3, r4, r5, lr}
    392e:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    3930:	f7ff ffaa 	bl	3888 <mpu_configure_dynamic_mpu_regions>
    3934:	f110 0f16 	cmn.w	r0, #22
    3938:	d000      	beq.n	393c <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    393a:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    393c:	4d08      	ldr	r5, [pc, #32]	; (3960 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    393e:	f44f 7398 	mov.w	r3, #304	; 0x130
    3942:	462a      	mov	r2, r5
    3944:	4907      	ldr	r1, [pc, #28]	; (3964 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    3946:	4808      	ldr	r0, [pc, #32]	; (3968 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    3948:	f006 fa95 	bl	9e76 <assert_print>
    394c:	4621      	mov	r1, r4
    394e:	4807      	ldr	r0, [pc, #28]	; (396c <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    3950:	f006 fa91 	bl	9e76 <assert_print>
    3954:	f44f 7198 	mov.w	r1, #304	; 0x130
    3958:	4628      	mov	r0, r5
    395a:	f006 fa85 	bl	9e68 <assert_post_action>
}
    395e:	e7ec      	b.n	393a <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    3960:	0000bffc 	.word	0x0000bffc
    3964:	0000b83c 	.word	0x0000b83c
    3968:	0000b180 	.word	0x0000b180
    396c:	0000c060 	.word	0x0000c060

00003970 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    3970:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3972:	4b24      	ldr	r3, [pc, #144]	; (3a04 <z_arm_mpu_init+0x94>)
    3974:	681d      	ldr	r5, [r3, #0]
    3976:	2d08      	cmp	r5, #8
    3978:	d803      	bhi.n	3982 <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    397a:	f7ff ffab 	bl	38d4 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    397e:	2400      	movs	r4, #0
    3980:	e01e      	b.n	39c0 <z_arm_mpu_init+0x50>
		__ASSERT(0,
    3982:	4c21      	ldr	r4, [pc, #132]	; (3a08 <z_arm_mpu_init+0x98>)
    3984:	f44f 73a4 	mov.w	r3, #328	; 0x148
    3988:	4622      	mov	r2, r4
    398a:	4920      	ldr	r1, [pc, #128]	; (3a0c <z_arm_mpu_init+0x9c>)
    398c:	4820      	ldr	r0, [pc, #128]	; (3a10 <z_arm_mpu_init+0xa0>)
    398e:	f006 fa72 	bl	9e76 <assert_print>
    3992:	2208      	movs	r2, #8
    3994:	4629      	mov	r1, r5
    3996:	481f      	ldr	r0, [pc, #124]	; (3a14 <z_arm_mpu_init+0xa4>)
    3998:	f006 fa6d 	bl	9e76 <assert_print>
    399c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    39a0:	4620      	mov	r0, r4
    39a2:	f006 fa61 	bl	9e68 <assert_post_action>
		return -1;
    39a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    39aa:	e017      	b.n	39dc <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    39ac:	4b15      	ldr	r3, [pc, #84]	; (3a04 <z_arm_mpu_init+0x94>)
    39ae:	6859      	ldr	r1, [r3, #4]
    39b0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    39b4:	0093      	lsls	r3, r2, #2
    39b6:	4419      	add	r1, r3
    39b8:	4620      	mov	r0, r4
    39ba:	f7ff fef3 	bl	37a4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    39be:	3401      	adds	r4, #1
    39c0:	42a5      	cmp	r5, r4
    39c2:	d8f3      	bhi.n	39ac <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    39c4:	4b14      	ldr	r3, [pc, #80]	; (3a18 <z_arm_mpu_init+0xa8>)
    39c6:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    39c8:	f7ff ff78 	bl	38bc <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    39cc:	4b13      	ldr	r3, [pc, #76]	; (3a1c <z_arm_mpu_init+0xac>)
    39ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    39d2:	f3c3 2307 	ubfx	r3, r3, #8, #8
    39d6:	2b08      	cmp	r3, #8
    39d8:	d101      	bne.n	39de <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    39da:	2000      	movs	r0, #0
}
    39dc:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    39de:	4c0a      	ldr	r4, [pc, #40]	; (3a08 <z_arm_mpu_init+0x98>)
    39e0:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    39e4:	4622      	mov	r2, r4
    39e6:	490e      	ldr	r1, [pc, #56]	; (3a20 <z_arm_mpu_init+0xb0>)
    39e8:	4809      	ldr	r0, [pc, #36]	; (3a10 <z_arm_mpu_init+0xa0>)
    39ea:	f006 fa44 	bl	9e76 <assert_print>
    39ee:	480d      	ldr	r0, [pc, #52]	; (3a24 <z_arm_mpu_init+0xb4>)
    39f0:	f006 fa41 	bl	9e76 <assert_print>
    39f4:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    39f8:	4620      	mov	r0, r4
    39fa:	f006 fa35 	bl	9e68 <assert_post_action>
	return 0;
    39fe:	2000      	movs	r0, #0
    3a00:	e7ec      	b.n	39dc <z_arm_mpu_init+0x6c>
    3a02:	bf00      	nop
    3a04:	0000c148 	.word	0x0000c148
    3a08:	0000bffc 	.word	0x0000bffc
    3a0c:	0000b83c 	.word	0x0000b83c
    3a10:	0000b180 	.word	0x0000b180
    3a14:	0000c090 	.word	0x0000c090
    3a18:	20005155 	.word	0x20005155
    3a1c:	e000ed00 	.word	0xe000ed00
    3a20:	0000c0c4 	.word	0x0000c0c4
    3a24:	0000c114 	.word	0x0000c114

00003a28 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3a28:	4b01      	ldr	r3, [pc, #4]	; (3a30 <__stdout_hook_install+0x8>)
    3a2a:	6018      	str	r0, [r3, #0]
}
    3a2c:	4770      	bx	lr
    3a2e:	bf00      	nop
    3a30:	2000402c 	.word	0x2000402c

00003a34 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    3a34:	b510      	push	{r4, lr}
	__asm__ volatile(
    3a36:	f04f 0320 	mov.w	r3, #32
    3a3a:	f3ef 8411 	mrs	r4, BASEPRI
    3a3e:	f383 8812 	msr	BASEPRI_MAX, r3
    3a42:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3a46:	2301      	movs	r3, #1
    3a48:	4a0c      	ldr	r2, [pc, #48]	; (3a7c <nordicsemi_nrf52_init+0x48>)
    3a4a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3a4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3a52:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    3a56:	f006 fbeb 	bl	a230 <nrf52_errata_197>
    3a5a:	b120      	cbz	r0, 3a66 <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    3a5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a60:	2201      	movs	r2, #1
    3a62:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    3a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a6a:	2201      	movs	r2, #1
    3a6c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    3a70:	f384 8811 	msr	BASEPRI, r4
    3a74:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3a78:	2000      	movs	r0, #0
    3a7a:	bd10      	pop	{r4, pc}
    3a7c:	4001e000 	.word	0x4001e000

00003a80 <sys_arch_reboot>:
    *p_gpregret = val;
    3a80:	b2c0      	uxtb	r0, r0
    3a82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3a86:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3a8a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3a8e:	4905      	ldr	r1, [pc, #20]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a90:	68ca      	ldr	r2, [r1, #12]
    3a92:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3a96:	4b04      	ldr	r3, [pc, #16]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a98:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3a9a:	60cb      	str	r3, [r1, #12]
    3a9c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3aa0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3aa2:	e7fd      	b.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
    3aa4:	e000ed00 	.word	0xe000ed00
    3aa8:	05fa0004 	.word	0x05fa0004

00003aac <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3aac:	b130      	cbz	r0, 3abc <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    3aae:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3ab0:	0180      	lsls	r0, r0, #6
    3ab2:	4b03      	ldr	r3, [pc, #12]	; (3ac0 <arch_busy_wait+0x14>)
    3ab4:	f043 0301 	orr.w	r3, r3, #1
    3ab8:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    3aba:	bd08      	pop	{r3, pc}
    3abc:	4770      	bx	lr
    3abe:	bf00      	nop
    3ac0:	0000b060 	.word	0x0000b060

00003ac4 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    3ac4:	4800      	ldr	r0, [pc, #0]	; (3ac8 <get_hf_flags+0x4>)
    3ac6:	4770      	bx	lr
    3ac8:	20004a28 	.word	0x20004a28

00003acc <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3acc:	4b01      	ldr	r3, [pc, #4]	; (3ad4 <get_subsys+0x8>)
    3ace:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    3ad0:	1140      	asrs	r0, r0, #5
    3ad2:	4770      	bx	lr
    3ad4:	200049e0 	.word	0x200049e0

00003ad8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3ad8:	b530      	push	{r4, r5, lr}
    3ada:	b083      	sub	sp, #12
    3adc:	4605      	mov	r5, r0
    3ade:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3ae0:	f7ff fff4 	bl	3acc <get_subsys>
    3ae4:	4601      	mov	r1, r0
    3ae6:	2340      	movs	r3, #64	; 0x40
    3ae8:	9300      	str	r3, [sp, #0]
    3aea:	4623      	mov	r3, r4
    3aec:	4a05      	ldr	r2, [pc, #20]	; (3b04 <onoff_start+0x2c>)
    3aee:	4806      	ldr	r0, [pc, #24]	; (3b08 <onoff_start+0x30>)
    3af0:	f006 fc2d 	bl	a34e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    3af4:	1e01      	subs	r1, r0, #0
    3af6:	db01      	blt.n	3afc <onoff_start+0x24>
		notify(mgr, err);
	}
}
    3af8:	b003      	add	sp, #12
    3afa:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    3afc:	4628      	mov	r0, r5
    3afe:	47a0      	blx	r4
}
    3b00:	e7fa      	b.n	3af8 <onoff_start+0x20>
    3b02:	bf00      	nop
    3b04:	0000a397 	.word	0x0000a397
    3b08:	0000ad8c 	.word	0x0000ad8c

00003b0c <generic_hfclk_stop>:
{
    3b0c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3b0e:	4b0a      	ldr	r3, [pc, #40]	; (3b38 <generic_hfclk_stop+0x2c>)
    3b10:	f3bf 8f5b 	dmb	ish
    3b14:	e853 2f00 	ldrex	r2, [r3]
    3b18:	f022 0102 	bic.w	r1, r2, #2
    3b1c:	e843 1000 	strex	r0, r1, [r3]
    3b20:	2800      	cmp	r0, #0
    3b22:	d1f7      	bne.n	3b14 <generic_hfclk_stop+0x8>
    3b24:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3b28:	f012 0f01 	tst.w	r2, #1
    3b2c:	d000      	beq.n	3b30 <generic_hfclk_stop+0x24>
}
    3b2e:	bd08      	pop	{r3, pc}
	hfclk_stop();
    3b30:	f006 fc43 	bl	a3ba <hfclk_stop>
    3b34:	e7fb      	b.n	3b2e <generic_hfclk_stop+0x22>
    3b36:	bf00      	nop
    3b38:	20004a38 	.word	0x20004a38

00003b3c <get_status>:
{
    3b3c:	b570      	push	{r4, r5, r6, lr}
    3b3e:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    3b40:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3b42:	2c01      	cmp	r4, #1
    3b44:	d807      	bhi.n	3b56 <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3b46:	4621      	mov	r1, r4
    3b48:	4628      	mov	r0, r5
    3b4a:	f006 fb93 	bl	a274 <get_sub_data>
    3b4e:	6880      	ldr	r0, [r0, #8]
}
    3b50:	f000 0007 	and.w	r0, r0, #7
    3b54:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3b56:	4e06      	ldr	r6, [pc, #24]	; (3b70 <get_status+0x34>)
    3b58:	2379      	movs	r3, #121	; 0x79
    3b5a:	4632      	mov	r2, r6
    3b5c:	4905      	ldr	r1, [pc, #20]	; (3b74 <get_status+0x38>)
    3b5e:	4806      	ldr	r0, [pc, #24]	; (3b78 <get_status+0x3c>)
    3b60:	f006 f989 	bl	9e76 <assert_print>
    3b64:	2179      	movs	r1, #121	; 0x79
    3b66:	4630      	mov	r0, r6
    3b68:	f006 f97e 	bl	9e68 <assert_post_action>
    3b6c:	e7eb      	b.n	3b46 <get_status+0xa>
    3b6e:	bf00      	nop
    3b70:	0000c16c 	.word	0x0000c16c
    3b74:	0000c1ac 	.word	0x0000c1ac
    3b78:	0000b180 	.word	0x0000b180

00003b7c <stop>:
{
    3b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b80:	4607      	mov	r7, r0
    3b82:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    3b84:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    3b86:	4621      	mov	r1, r4
    3b88:	f006 fb74 	bl	a274 <get_sub_data>
    3b8c:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3b8e:	2c01      	cmp	r4, #1
    3b90:	d80f      	bhi.n	3bb2 <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    3b92:	4631      	mov	r1, r6
    3b94:	f105 0008 	add.w	r0, r5, #8
    3b98:	f006 fb7d 	bl	a296 <set_off_state>
	if (err < 0) {
    3b9c:	2800      	cmp	r0, #0
    3b9e:	db06      	blt.n	3bae <stop+0x32>
	get_sub_config(dev, type)->stop();
    3ba0:	4621      	mov	r1, r4
    3ba2:	4638      	mov	r0, r7
    3ba4:	f006 fb6d 	bl	a282 <get_sub_config>
    3ba8:	6843      	ldr	r3, [r0, #4]
    3baa:	4798      	blx	r3
	return 0;
    3bac:	2000      	movs	r0, #0
}
    3bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3bb2:	f8df 801c 	ldr.w	r8, [pc, #28]	; 3bd0 <stop+0x54>
    3bb6:	f240 134d 	movw	r3, #333	; 0x14d
    3bba:	4642      	mov	r2, r8
    3bbc:	4905      	ldr	r1, [pc, #20]	; (3bd4 <stop+0x58>)
    3bbe:	4806      	ldr	r0, [pc, #24]	; (3bd8 <stop+0x5c>)
    3bc0:	f006 f959 	bl	9e76 <assert_print>
    3bc4:	f240 114d 	movw	r1, #333	; 0x14d
    3bc8:	4640      	mov	r0, r8
    3bca:	f006 f94d 	bl	9e68 <assert_post_action>
    3bce:	e7e0      	b.n	3b92 <stop+0x16>
    3bd0:	0000c16c 	.word	0x0000c16c
    3bd4:	0000c1ac 	.word	0x0000c1ac
    3bd8:	0000b180 	.word	0x0000b180

00003bdc <onoff_stop>:
{
    3bdc:	b538      	push	{r3, r4, r5, lr}
    3bde:	4605      	mov	r5, r0
    3be0:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3be2:	f7ff ff73 	bl	3acc <get_subsys>
    3be6:	4601      	mov	r1, r0
    3be8:	2240      	movs	r2, #64	; 0x40
    3bea:	4803      	ldr	r0, [pc, #12]	; (3bf8 <onoff_stop+0x1c>)
    3bec:	f7ff ffc6 	bl	3b7c <stop>
    3bf0:	4601      	mov	r1, r0
	notify(mgr, res);
    3bf2:	4628      	mov	r0, r5
    3bf4:	47a0      	blx	r4
}
    3bf6:	bd38      	pop	{r3, r4, r5, pc}
    3bf8:	0000ad8c 	.word	0x0000ad8c

00003bfc <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    3bfc:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    3bfe:	2801      	cmp	r0, #1
    3c00:	d01d      	beq.n	3c3e <clock_event_handler+0x42>
    3c02:	2803      	cmp	r0, #3
    3c04:	d020      	beq.n	3c48 <clock_event_handler+0x4c>
    3c06:	b168      	cbz	r0, 3c24 <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    3c08:	4c16      	ldr	r4, [pc, #88]	; (3c64 <clock_event_handler+0x68>)
    3c0a:	f240 2362 	movw	r3, #610	; 0x262
    3c0e:	4622      	mov	r2, r4
    3c10:	4915      	ldr	r1, [pc, #84]	; (3c68 <clock_event_handler+0x6c>)
    3c12:	4816      	ldr	r0, [pc, #88]	; (3c6c <clock_event_handler+0x70>)
    3c14:	f006 f92f 	bl	9e76 <assert_print>
    3c18:	f240 2162 	movw	r1, #610	; 0x262
    3c1c:	4620      	mov	r0, r4
    3c1e:	f006 f923 	bl	9e68 <assert_post_action>
		break;
	}
}
    3c22:	e010      	b.n	3c46 <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3c24:	2100      	movs	r1, #0
    3c26:	4812      	ldr	r0, [pc, #72]	; (3c70 <clock_event_handler+0x74>)
    3c28:	f006 fb24 	bl	a274 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3c2c:	6883      	ldr	r3, [r0, #8]
    3c2e:	f013 0f07 	tst.w	r3, #7
    3c32:	d108      	bne.n	3c46 <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3c34:	2100      	movs	r1, #0
    3c36:	480e      	ldr	r0, [pc, #56]	; (3c70 <clock_event_handler+0x74>)
    3c38:	f006 fb77 	bl	a32a <clkstarted_handle>
    3c3c:	e003      	b.n	3c46 <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3c3e:	2101      	movs	r1, #1
    3c40:	480b      	ldr	r0, [pc, #44]	; (3c70 <clock_event_handler+0x74>)
    3c42:	f006 fb72 	bl	a32a <clkstarted_handle>
}
    3c46:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    3c48:	4c06      	ldr	r4, [pc, #24]	; (3c64 <clock_event_handler+0x68>)
    3c4a:	f240 235e 	movw	r3, #606	; 0x25e
    3c4e:	4622      	mov	r2, r4
    3c50:	4905      	ldr	r1, [pc, #20]	; (3c68 <clock_event_handler+0x6c>)
    3c52:	4806      	ldr	r0, [pc, #24]	; (3c6c <clock_event_handler+0x70>)
    3c54:	f006 f90f 	bl	9e76 <assert_print>
    3c58:	f240 215e 	movw	r1, #606	; 0x25e
    3c5c:	4620      	mov	r0, r4
    3c5e:	f006 f903 	bl	9e68 <assert_post_action>
		break;
    3c62:	e7f0      	b.n	3c46 <clock_event_handler+0x4a>
    3c64:	0000c16c 	.word	0x0000c16c
    3c68:	0000b83c 	.word	0x0000b83c
    3c6c:	0000b180 	.word	0x0000b180
    3c70:	0000ad8c 	.word	0x0000ad8c

00003c74 <api_blocking_start>:
{
    3c74:	b500      	push	{lr}
    3c76:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3c78:	f8cd d000 	str.w	sp, [sp]
    3c7c:	f8cd d004 	str.w	sp, [sp, #4]
    3c80:	2300      	movs	r3, #0
    3c82:	9302      	str	r3, [sp, #8]
    3c84:	2301      	movs	r3, #1
    3c86:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3c88:	466b      	mov	r3, sp
    3c8a:	4a07      	ldr	r2, [pc, #28]	; (3ca8 <api_blocking_start+0x34>)
    3c8c:	f006 fb7b 	bl	a386 <api_start>
	if (err < 0) {
    3c90:	2800      	cmp	r0, #0
    3c92:	db05      	blt.n	3ca0 <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    3c94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3c98:	2300      	movs	r3, #0
    3c9a:	4668      	mov	r0, sp
    3c9c:	f003 feac 	bl	79f8 <z_impl_k_sem_take>
}
    3ca0:	b005      	add	sp, #20
    3ca2:	f85d fb04 	ldr.w	pc, [sp], #4
    3ca6:	bf00      	nop
    3ca8:	0000a3d9 	.word	0x0000a3d9

00003cac <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    3cac:	b570      	push	{r4, r5, r6, lr}
    3cae:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3cb0:	2200      	movs	r2, #0
    3cb2:	2101      	movs	r1, #1
    3cb4:	4610      	mov	r0, r2
    3cb6:	f7fe ffff 	bl	2cb8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3cba:	4811      	ldr	r0, [pc, #68]	; (3d00 <clk_init+0x54>)
    3cbc:	f001 fd8c 	bl	57d8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3cc0:	4b10      	ldr	r3, [pc, #64]	; (3d04 <clk_init+0x58>)
    3cc2:	4298      	cmp	r0, r3
    3cc4:	d119      	bne.n	3cfa <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3cc6:	f001 fdb1 	bl	582c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    3cca:	2400      	movs	r4, #0
    3ccc:	2c01      	cmp	r4, #1
    3cce:	d812      	bhi.n	3cf6 <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    3cd0:	4621      	mov	r1, r4
    3cd2:	4630      	mov	r0, r6
    3cd4:	f006 face 	bl	a274 <get_sub_data>
    3cd8:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3cda:	4621      	mov	r1, r4
    3cdc:	4630      	mov	r0, r6
    3cde:	f006 fad6 	bl	a28e <get_onoff_manager>
    3ce2:	4909      	ldr	r1, [pc, #36]	; (3d08 <clk_init+0x5c>)
    3ce4:	f005 ffd0 	bl	9c88 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3ce8:	2800      	cmp	r0, #0
    3cea:	db05      	blt.n	3cf8 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3cec:	2301      	movs	r3, #1
    3cee:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    3cf0:	441c      	add	r4, r3
    3cf2:	b2e4      	uxtb	r4, r4
    3cf4:	e7ea      	b.n	3ccc <clk_init+0x20>
	}

	return 0;
    3cf6:	2000      	movs	r0, #0
}
    3cf8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3cfa:	f06f 0004 	mvn.w	r0, #4
    3cfe:	e7fb      	b.n	3cf8 <clk_init+0x4c>
    3d00:	00003bfd 	.word	0x00003bfd
    3d04:	0bad0000 	.word	0x0bad0000
    3d08:	0000c228 	.word	0x0000c228

00003d0c <lfclk_spinwait>:
{
    3d0c:	b570      	push	{r4, r5, r6, lr}
    3d0e:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3d10:	2801      	cmp	r0, #1
    3d12:	d107      	bne.n	3d24 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3d14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d18:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3d1c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3d20:	2b01      	cmp	r3, #1
    3d22:	d05a      	beq.n	3dda <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3d24:	f006 ff60 	bl	abe8 <k_is_in_isr>
    3d28:	b928      	cbnz	r0, 3d36 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    3d2a:	4b2f      	ldr	r3, [pc, #188]	; (3de8 <lfclk_spinwait+0xdc>)
    3d2c:	781b      	ldrb	r3, [r3, #0]
    3d2e:	2b00      	cmp	r3, #0
    3d30:	d043      	beq.n	3dba <lfclk_spinwait+0xae>
    3d32:	2300      	movs	r3, #0
    3d34:	e000      	b.n	3d38 <lfclk_spinwait+0x2c>
    3d36:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    3d38:	461c      	mov	r4, r3
    3d3a:	2b00      	cmp	r3, #0
    3d3c:	d03f      	beq.n	3dbe <lfclk_spinwait+0xb2>
	__asm__ volatile(
    3d3e:	f04f 0320 	mov.w	r3, #32
    3d42:	f3ef 8611 	mrs	r6, BASEPRI
    3d46:	f383 8812 	msr	BASEPRI_MAX, r3
    3d4a:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    3d4e:	b924      	cbnz	r4, 3d5a <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    3d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d54:	2202      	movs	r2, #2
    3d56:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3d5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3d5e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3d62:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3d66:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3d6a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    3d6e:	d12d      	bne.n	3dcc <lfclk_spinwait+0xc0>
    return false;
    3d70:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3d72:	b11a      	cbz	r2, 3d7c <lfclk_spinwait+0x70>
    3d74:	2b01      	cmp	r3, #1
    3d76:	d02b      	beq.n	3dd0 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3d78:	2d01      	cmp	r5, #1
    3d7a:	d029      	beq.n	3dd0 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3d7c:	b30c      	cbz	r4, 3dc2 <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3d7e:	4630      	mov	r0, r6
    3d80:	f7fe ff2a 	bl	2bd8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3d84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d88:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3d8c:	2b00      	cmp	r3, #0
    3d8e:	d1e4      	bne.n	3d5a <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d94:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    3d98:	2b00      	cmp	r3, #0
    3d9a:	d0de      	beq.n	3d5a <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3da0:	2200      	movs	r2, #0
    3da2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3da6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3daa:	2201      	movs	r2, #1
    3dac:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3db0:	490e      	ldr	r1, [pc, #56]	; (3dec <lfclk_spinwait+0xe0>)
    3db2:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3db6:	609a      	str	r2, [r3, #8]
}
    3db8:	e7cf      	b.n	3d5a <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3dba:	2301      	movs	r3, #1
    3dbc:	e7bc      	b.n	3d38 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    3dbe:	2600      	movs	r6, #0
    3dc0:	e7c5      	b.n	3d4e <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    3dc2:	2021      	movs	r0, #33	; 0x21
    3dc4:	2100      	movs	r1, #0
    3dc6:	f004 fff9 	bl	8dbc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3dca:	e7db      	b.n	3d84 <lfclk_spinwait+0x78>
                return true;
    3dcc:	2201      	movs	r2, #1
    3dce:	e7d0      	b.n	3d72 <lfclk_spinwait+0x66>
	if (isr_mode) {
    3dd0:	b124      	cbz	r4, 3ddc <lfclk_spinwait+0xd0>
	__asm__ volatile(
    3dd2:	f386 8811 	msr	BASEPRI, r6
    3dd6:	f3bf 8f6f 	isb	sy
}
    3dda:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    3ddc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3de0:	2202      	movs	r2, #2
    3de2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3de6:	e7f8      	b.n	3dda <lfclk_spinwait+0xce>
    3de8:	20005156 	.word	0x20005156
    3dec:	e000e100 	.word	0xe000e100

00003df0 <generic_hfclk_start>:
{
    3df0:	b510      	push	{r4, lr}
	__asm__ volatile(
    3df2:	f04f 0320 	mov.w	r3, #32
    3df6:	f3ef 8411 	mrs	r4, BASEPRI
    3dfa:	f383 8812 	msr	BASEPRI_MAX, r3
    3dfe:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3e02:	4a13      	ldr	r2, [pc, #76]	; (3e50 <generic_hfclk_start+0x60>)
    3e04:	6813      	ldr	r3, [r2, #0]
    3e06:	f043 0302 	orr.w	r3, r3, #2
    3e0a:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3e0c:	f013 0f01 	tst.w	r3, #1
    3e10:	d108      	bne.n	3e24 <generic_hfclk_start+0x34>
	bool already_started = false;
    3e12:	2300      	movs	r3, #0
	__asm__ volatile(
    3e14:	f384 8811 	msr	BASEPRI, r4
    3e18:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3e1c:	b99b      	cbnz	r3, 3e46 <generic_hfclk_start+0x56>
	hfclk_start();
    3e1e:	f006 fac2 	bl	a3a6 <hfclk_start>
}
    3e22:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3e24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e28:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3e2c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3e30:	f012 0f01 	tst.w	r2, #1
    3e34:	d101      	bne.n	3e3a <generic_hfclk_start+0x4a>
	bool already_started = false;
    3e36:	2300      	movs	r3, #0
    3e38:	e7ec      	b.n	3e14 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    3e3a:	f7ff fe43 	bl	3ac4 <get_hf_flags>
    3e3e:	f006 fa61 	bl	a304 <set_on_state>
			already_started = true;
    3e42:	2301      	movs	r3, #1
    3e44:	e7e6      	b.n	3e14 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    3e46:	2100      	movs	r1, #0
    3e48:	4802      	ldr	r0, [pc, #8]	; (3e54 <generic_hfclk_start+0x64>)
    3e4a:	f006 fa6e 	bl	a32a <clkstarted_handle>
		return;
    3e4e:	e7e8      	b.n	3e22 <generic_hfclk_start+0x32>
    3e50:	20004a38 	.word	0x20004a38
    3e54:	0000ad8c 	.word	0x0000ad8c

00003e58 <z_nrf_clock_control_lf_on>:
{
    3e58:	b538      	push	{r3, r4, r5, lr}
    3e5a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3e5c:	4b1f      	ldr	r3, [pc, #124]	; (3edc <z_nrf_clock_control_lf_on+0x84>)
    3e5e:	2101      	movs	r1, #1
    3e60:	f3bf 8f5b 	dmb	ish
    3e64:	e853 2f00 	ldrex	r2, [r3]
    3e68:	e843 1000 	strex	r0, r1, [r3]
    3e6c:	2800      	cmp	r0, #0
    3e6e:	d1f9      	bne.n	3e64 <z_nrf_clock_control_lf_on+0xc>
    3e70:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    3e74:	b142      	cbz	r2, 3e88 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    3e76:	b134      	cbz	r4, 3e86 <z_nrf_clock_control_lf_on+0x2e>
    3e78:	1e63      	subs	r3, r4, #1
    3e7a:	b2db      	uxtb	r3, r3
    3e7c:	2b01      	cmp	r3, #1
    3e7e:	d81f      	bhi.n	3ec0 <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    3e80:	4620      	mov	r0, r4
    3e82:	f7ff ff43 	bl	3d0c <lfclk_spinwait>
}
    3e86:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    3e88:	4815      	ldr	r0, [pc, #84]	; (3ee0 <z_nrf_clock_control_lf_on+0x88>)
    3e8a:	f006 fa00 	bl	a28e <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3e8e:	4915      	ldr	r1, [pc, #84]	; (3ee4 <z_nrf_clock_control_lf_on+0x8c>)
    3e90:	2300      	movs	r3, #0
    3e92:	604b      	str	r3, [r1, #4]
    3e94:	608b      	str	r3, [r1, #8]
    3e96:	60cb      	str	r3, [r1, #12]
    3e98:	2301      	movs	r3, #1
    3e9a:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    3e9c:	f7fd f902 	bl	10a4 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    3ea0:	2800      	cmp	r0, #0
    3ea2:	dae8      	bge.n	3e76 <z_nrf_clock_control_lf_on+0x1e>
    3ea4:	4d10      	ldr	r5, [pc, #64]	; (3ee8 <z_nrf_clock_control_lf_on+0x90>)
    3ea6:	f44f 7308 	mov.w	r3, #544	; 0x220
    3eaa:	462a      	mov	r2, r5
    3eac:	490f      	ldr	r1, [pc, #60]	; (3eec <z_nrf_clock_control_lf_on+0x94>)
    3eae:	4810      	ldr	r0, [pc, #64]	; (3ef0 <z_nrf_clock_control_lf_on+0x98>)
    3eb0:	f005 ffe1 	bl	9e76 <assert_print>
    3eb4:	f44f 7108 	mov.w	r1, #544	; 0x220
    3eb8:	4628      	mov	r0, r5
    3eba:	f005 ffd5 	bl	9e68 <assert_post_action>
    3ebe:	e7da      	b.n	3e76 <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    3ec0:	4c09      	ldr	r4, [pc, #36]	; (3ee8 <z_nrf_clock_control_lf_on+0x90>)
    3ec2:	f240 2332 	movw	r3, #562	; 0x232
    3ec6:	4622      	mov	r2, r4
    3ec8:	490a      	ldr	r1, [pc, #40]	; (3ef4 <z_nrf_clock_control_lf_on+0x9c>)
    3eca:	4809      	ldr	r0, [pc, #36]	; (3ef0 <z_nrf_clock_control_lf_on+0x98>)
    3ecc:	f005 ffd3 	bl	9e76 <assert_print>
    3ed0:	f240 2132 	movw	r1, #562	; 0x232
    3ed4:	4620      	mov	r0, r4
    3ed6:	f005 ffc7 	bl	9e68 <assert_post_action>
    3eda:	e7d4      	b.n	3e86 <z_nrf_clock_control_lf_on+0x2e>
    3edc:	20004a3c 	.word	0x20004a3c
    3ee0:	0000ad8c 	.word	0x0000ad8c
    3ee4:	200049d0 	.word	0x200049d0
    3ee8:	0000c16c 	.word	0x0000c16c
    3eec:	0000b7a4 	.word	0x0000b7a4
    3ef0:	0000b180 	.word	0x0000b180
    3ef4:	0000b83c 	.word	0x0000b83c

00003ef8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    3ef8:	b510      	push	{r4, lr}
    3efa:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    3efc:	280a      	cmp	r0, #10
    3efe:	d007      	beq.n	3f10 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    3f00:	4b07      	ldr	r3, [pc, #28]	; (3f20 <console_out+0x28>)
    3f02:	6818      	ldr	r0, [r3, #0]
    3f04:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    3f06:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    3f08:	685b      	ldr	r3, [r3, #4]
    3f0a:	4798      	blx	r3

	return c;
}
    3f0c:	4620      	mov	r0, r4
    3f0e:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    3f10:	4b03      	ldr	r3, [pc, #12]	; (3f20 <console_out+0x28>)
    3f12:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    3f14:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    3f16:	685b      	ldr	r3, [r3, #4]
    3f18:	210d      	movs	r1, #13
    3f1a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    3f1c:	e7f0      	b.n	3f00 <console_out+0x8>
    3f1e:	bf00      	nop
    3f20:	20004a40 	.word	0x20004a40

00003f24 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    3f24:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    3f26:	4c04      	ldr	r4, [pc, #16]	; (3f38 <uart_console_hook_install+0x14>)
    3f28:	4620      	mov	r0, r4
    3f2a:	f7ff fd7d 	bl	3a28 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    3f2e:	4620      	mov	r0, r4
    3f30:	f7fc fe1e 	bl	b70 <__printk_hook_install>
#endif
}
    3f34:	bd10      	pop	{r4, pc}
    3f36:	bf00      	nop
    3f38:	00003ef9 	.word	0x00003ef9

00003f3c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3f3c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3f3e:	4806      	ldr	r0, [pc, #24]	; (3f58 <uart_console_init+0x1c>)
    3f40:	4b06      	ldr	r3, [pc, #24]	; (3f5c <uart_console_init+0x20>)
    3f42:	6018      	str	r0, [r3, #0]
    3f44:	f006 fdf4 	bl	ab30 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    3f48:	b118      	cbz	r0, 3f52 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    3f4a:	f7ff ffeb 	bl	3f24 <uart_console_hook_install>

	return 0;
    3f4e:	2000      	movs	r0, #0
}
    3f50:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3f52:	f06f 0012 	mvn.w	r0, #18
    3f56:	e7fb      	b.n	3f50 <uart_console_init+0x14>
    3f58:	0000adec 	.word	0x0000adec
    3f5c:	20004a40 	.word	0x20004a40

00003f60 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3f60:	b128      	cbz	r0, 3f6e <get_dev+0xe>
    3f62:	2801      	cmp	r0, #1
    3f64:	d101      	bne.n	3f6a <get_dev+0xa>
    3f66:	4803      	ldr	r0, [pc, #12]	; (3f74 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    3f68:	4770      	bx	lr
	const struct device *dev = NULL;
    3f6a:	2000      	movs	r0, #0
    3f6c:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3f6e:	4802      	ldr	r0, [pc, #8]	; (3f78 <get_dev+0x18>)
    3f70:	4770      	bx	lr
    3f72:	bf00      	nop
    3f74:	0000ada4 	.word	0x0000ada4
    3f78:	0000adbc 	.word	0x0000adbc

00003f7c <gpio_nrfx_manage_callback>:
{
    3f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f80:	4616      	mov	r6, r2
	return port->data;
    3f82:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    3f84:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    3f86:	460c      	mov	r4, r1
    3f88:	b131      	cbz	r1, 3f98 <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
    3f8a:	6863      	ldr	r3, [r4, #4]
    3f8c:	b1a3      	cbz	r3, 3fb8 <gpio_nrfx_manage_callback+0x3c>
	return list->head;
    3f8e:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    3f90:	2b00      	cmp	r3, #0
    3f92:	d03b      	beq.n	400c <gpio_nrfx_manage_callback+0x90>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3f94:	2100      	movs	r1, #0
    3f96:	e02a      	b.n	3fee <gpio_nrfx_manage_callback+0x72>
	__ASSERT(callback, "No callback!");
    3f98:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4030 <gpio_nrfx_manage_callback+0xb4>
    3f9c:	2324      	movs	r3, #36	; 0x24
    3f9e:	4642      	mov	r2, r8
    3fa0:	4924      	ldr	r1, [pc, #144]	; (4034 <gpio_nrfx_manage_callback+0xb8>)
    3fa2:	4825      	ldr	r0, [pc, #148]	; (4038 <gpio_nrfx_manage_callback+0xbc>)
    3fa4:	f005 ff67 	bl	9e76 <assert_print>
    3fa8:	4824      	ldr	r0, [pc, #144]	; (403c <gpio_nrfx_manage_callback+0xc0>)
    3faa:	f005 ff64 	bl	9e76 <assert_print>
    3fae:	2124      	movs	r1, #36	; 0x24
    3fb0:	4640      	mov	r0, r8
    3fb2:	f005 ff59 	bl	9e68 <assert_post_action>
    3fb6:	e7e8      	b.n	3f8a <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    3fb8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4030 <gpio_nrfx_manage_callback+0xb4>
    3fbc:	2325      	movs	r3, #37	; 0x25
    3fbe:	4642      	mov	r2, r8
    3fc0:	491f      	ldr	r1, [pc, #124]	; (4040 <gpio_nrfx_manage_callback+0xc4>)
    3fc2:	481d      	ldr	r0, [pc, #116]	; (4038 <gpio_nrfx_manage_callback+0xbc>)
    3fc4:	f005 ff57 	bl	9e76 <assert_print>
    3fc8:	481e      	ldr	r0, [pc, #120]	; (4044 <gpio_nrfx_manage_callback+0xc8>)
    3fca:	f005 ff54 	bl	9e76 <assert_print>
    3fce:	2125      	movs	r1, #37	; 0x25
    3fd0:	4640      	mov	r0, r8
    3fd2:	f005 ff49 	bl	9e68 <assert_post_action>
    3fd6:	e7da      	b.n	3f8e <gpio_nrfx_manage_callback+0x12>
	return node->next;
    3fd8:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    3fda:	606b      	str	r3, [r5, #4]
	return list->tail;
    3fdc:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    3fde:	4294      	cmp	r4, r2
    3fe0:	d10f      	bne.n	4002 <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    3fe2:	607b      	str	r3, [r7, #4]
}
    3fe4:	e00d      	b.n	4002 <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    3fe6:	6079      	str	r1, [r7, #4]
}
    3fe8:	e00b      	b.n	4002 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3fea:	4619      	mov	r1, r3
    3fec:	681b      	ldr	r3, [r3, #0]
    3fee:	b15b      	cbz	r3, 4008 <gpio_nrfx_manage_callback+0x8c>
    3ff0:	429c      	cmp	r4, r3
    3ff2:	d1fa      	bne.n	3fea <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_REMOVE(slist, snode)
    3ff4:	2900      	cmp	r1, #0
    3ff6:	d0ef      	beq.n	3fd8 <gpio_nrfx_manage_callback+0x5c>
	return node->next;
    3ff8:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    3ffa:	600b      	str	r3, [r1, #0]
	return list->tail;
    3ffc:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    3ffe:	429c      	cmp	r4, r3
    4000:	d0f1      	beq.n	3fe6 <gpio_nrfx_manage_callback+0x6a>
	parent->next = child;
    4002:	2300      	movs	r3, #0
    4004:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4006:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    4008:	b903      	cbnz	r3, 400c <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    400a:	b156      	cbz	r6, 4022 <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    400c:	b166      	cbz	r6, 4028 <gpio_nrfx_manage_callback+0xac>
	return list->head;
    400e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    4010:	6023      	str	r3, [r4, #0]
	list->head = node;
    4012:	606c      	str	r4, [r5, #4]
	return list->tail;
    4014:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    4016:	b10b      	cbz	r3, 401c <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    4018:	2000      	movs	r0, #0
    401a:	e006      	b.n	402a <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    401c:	607c      	str	r4, [r7, #4]
    401e:	2000      	movs	r0, #0
}
    4020:	e003      	b.n	402a <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    4022:	f06f 0015 	mvn.w	r0, #21
    4026:	e000      	b.n	402a <gpio_nrfx_manage_callback+0xae>
	return 0;
    4028:	2000      	movs	r0, #0
}
    402a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    402e:	bf00      	nop
    4030:	0000c234 	.word	0x0000c234
    4034:	0000c264 	.word	0x0000c264
    4038:	0000b180 	.word	0x0000b180
    403c:	0000c270 	.word	0x0000c270
    4040:	0000c280 	.word	0x0000c280
    4044:	0000c294 	.word	0x0000c294

00004048 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    4048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    404c:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    4050:	0940      	lsrs	r0, r0, #5
    4052:	f7ff ff85 	bl	3f60 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    4056:	b380      	cbz	r0, 40ba <nrfx_gpio_handler+0x72>
    4058:	4607      	mov	r7, r0
	return port->data;
    405a:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    405c:	2601      	movs	r6, #1
    405e:	40a6      	lsls	r6, r4
	return list->head;
    4060:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4062:	b11c      	cbz	r4, 406c <nrfx_gpio_handler+0x24>
    4064:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    4066:	b17c      	cbz	r4, 4088 <nrfx_gpio_handler+0x40>
	return node->next;
    4068:	6825      	ldr	r5, [r4, #0]
    406a:	e00d      	b.n	4088 <nrfx_gpio_handler+0x40>
    406c:	4625      	mov	r5, r4
    406e:	e00b      	b.n	4088 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    4070:	6863      	ldr	r3, [r4, #4]
    4072:	68a2      	ldr	r2, [r4, #8]
    4074:	4032      	ands	r2, r6
    4076:	4621      	mov	r1, r4
    4078:	4638      	mov	r0, r7
    407a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    407c:	b1dd      	cbz	r5, 40b6 <nrfx_gpio_handler+0x6e>
    407e:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    4080:	b105      	cbz	r5, 4084 <nrfx_gpio_handler+0x3c>
	return node->next;
    4082:	682b      	ldr	r3, [r5, #0]
    4084:	462c      	mov	r4, r5
    4086:	461d      	mov	r5, r3
    4088:	b1bc      	cbz	r4, 40ba <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    408a:	68a3      	ldr	r3, [r4, #8]
    408c:	421e      	tst	r6, r3
    408e:	d0f5      	beq.n	407c <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    4090:	6863      	ldr	r3, [r4, #4]
    4092:	2b00      	cmp	r3, #0
    4094:	d1ec      	bne.n	4070 <nrfx_gpio_handler+0x28>
    4096:	f8df 8028 	ldr.w	r8, [pc, #40]	; 40c0 <nrfx_gpio_handler+0x78>
    409a:	2345      	movs	r3, #69	; 0x45
    409c:	4642      	mov	r2, r8
    409e:	4909      	ldr	r1, [pc, #36]	; (40c4 <nrfx_gpio_handler+0x7c>)
    40a0:	4809      	ldr	r0, [pc, #36]	; (40c8 <nrfx_gpio_handler+0x80>)
    40a2:	f005 fee8 	bl	9e76 <assert_print>
    40a6:	4809      	ldr	r0, [pc, #36]	; (40cc <nrfx_gpio_handler+0x84>)
    40a8:	f005 fee5 	bl	9e76 <assert_print>
    40ac:	2145      	movs	r1, #69	; 0x45
    40ae:	4640      	mov	r0, r8
    40b0:	f005 feda 	bl	9e68 <assert_post_action>
    40b4:	e7dc      	b.n	4070 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    40b6:	462b      	mov	r3, r5
    40b8:	e7e4      	b.n	4084 <nrfx_gpio_handler+0x3c>
}
    40ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40be:	bf00      	nop
    40c0:	0000c234 	.word	0x0000c234
    40c4:	0000c2ac 	.word	0x0000c2ac
    40c8:	0000b180 	.word	0x0000b180
    40cc:	0000c294 	.word	0x0000c294

000040d0 <gpio_nrfx_pin_interrupt_configure>:
{
    40d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    40d2:	b085      	sub	sp, #20
    40d4:	460e      	mov	r6, r1
    40d6:	4619      	mov	r1, r3
	return port->config;
    40d8:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    40da:	7b1b      	ldrb	r3, [r3, #12]
    40dc:	f006 041f 	and.w	r4, r6, #31
    40e0:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    40e4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    40e8:	d022      	beq.n	4130 <gpio_nrfx_pin_interrupt_configure+0x60>
    40ea:	4607      	mov	r7, r0
    40ec:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    40ee:	2300      	movs	r3, #0
    40f0:	9302      	str	r3, [sp, #8]
    40f2:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    40f4:	4610      	mov	r0, r2
    40f6:	f006 f9ed 	bl	a4d4 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    40fa:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    40fe:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4100:	6899      	ldr	r1, [r3, #8]
    4102:	40f1      	lsrs	r1, r6
    4104:	f011 0101 	ands.w	r1, r1, #1
    4108:	d102      	bne.n	4110 <gpio_nrfx_pin_interrupt_configure+0x40>
    410a:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    410e:	d014      	beq.n	413a <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4110:	2300      	movs	r3, #0
    4112:	aa02      	add	r2, sp, #8
    4114:	4619      	mov	r1, r3
    4116:	4620      	mov	r0, r4
    4118:	f002 f802 	bl	6120 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    411c:	4b32      	ldr	r3, [pc, #200]	; (41e8 <__data_size+0xa4>)
    411e:	4298      	cmp	r0, r3
    4120:	d15f      	bne.n	41e2 <__data_size+0x9e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4122:	2101      	movs	r1, #1
    4124:	4620      	mov	r0, r4
    4126:	f002 fa5f 	bl	65e8 <nrfx_gpiote_trigger_enable>
	return 0;
    412a:	2000      	movs	r0, #0
}
    412c:	b005      	add	sp, #20
    412e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    4130:	4620      	mov	r0, r4
    4132:	f002 fb65 	bl	6800 <nrfx_gpiote_trigger_disable>
		return 0;
    4136:	2000      	movs	r0, #0
    4138:	e7f8      	b.n	412c <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    413a:	0963      	lsrs	r3, r4, #5
    413c:	d01f      	beq.n	417e <__data_size+0x3a>
    413e:	2b01      	cmp	r3, #1
    4140:	d101      	bne.n	4146 <__data_size+0x2>
            mask = P1_FEATURE_PINS_PRESENT;
    4142:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    4146:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    414a:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    414c:	f011 0f01 	tst.w	r1, #1
    4150:	d018      	beq.n	4184 <__data_size+0x40>
    *p_pin = pin_number & 0x1F;
    4152:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4156:	0963      	lsrs	r3, r4, #5
    4158:	d022      	beq.n	41a0 <__data_size+0x5c>
    415a:	2b01      	cmp	r3, #1
    415c:	d023      	beq.n	41a6 <__data_size+0x62>
            NRFX_ASSERT(0);
    415e:	4e23      	ldr	r6, [pc, #140]	; (41ec <__data_size+0xa8>)
    4160:	f240 232e 	movw	r3, #558	; 0x22e
    4164:	4632      	mov	r2, r6
    4166:	4922      	ldr	r1, [pc, #136]	; (41f0 <__data_size+0xac>)
    4168:	4822      	ldr	r0, [pc, #136]	; (41f4 <__data_size+0xb0>)
    416a:	f005 fe84 	bl	9e76 <assert_print>
    416e:	f240 212e 	movw	r1, #558	; 0x22e
    4172:	4630      	mov	r0, r6
    4174:	f005 fe78 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    4178:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    417c:	e014      	b.n	41a8 <__data_size+0x64>
            mask = P0_FEATURE_PINS_PRESENT;
    417e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4182:	e7e0      	b.n	4146 <__data_size+0x2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4184:	4d19      	ldr	r5, [pc, #100]	; (41ec <__data_size+0xa8>)
    4186:	f240 2329 	movw	r3, #553	; 0x229
    418a:	462a      	mov	r2, r5
    418c:	491a      	ldr	r1, [pc, #104]	; (41f8 <__data_size+0xb4>)
    418e:	4819      	ldr	r0, [pc, #100]	; (41f4 <__data_size+0xb0>)
    4190:	f005 fe71 	bl	9e76 <assert_print>
    4194:	f240 2129 	movw	r1, #553	; 0x229
    4198:	4628      	mov	r0, r5
    419a:	f005 fe65 	bl	9e68 <assert_post_action>
    419e:	e7d8      	b.n	4152 <__data_size+0xe>
        case 0: return NRF_P0;
    41a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    41a4:	e000      	b.n	41a8 <__data_size+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    41a6:	4b15      	ldr	r3, [pc, #84]	; (41fc <__data_size+0xb8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    41a8:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    41ac:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    41b0:	f013 0f01 	tst.w	r3, #1
    41b4:	d1ac      	bne.n	4110 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    41b6:	f10d 0107 	add.w	r1, sp, #7
    41ba:	4620      	mov	r0, r4
    41bc:	f002 f9a4 	bl	6508 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    41c0:	4b0f      	ldr	r3, [pc, #60]	; (4200 <__data_size+0xbc>)
    41c2:	4298      	cmp	r0, r3
    41c4:	d003      	beq.n	41ce <__data_size+0x8a>
		trigger_config.p_in_channel = &ch;
    41c6:	f10d 0307 	add.w	r3, sp, #7
    41ca:	9303      	str	r3, [sp, #12]
    41cc:	e7a0      	b.n	4110 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    41ce:	f10d 0007 	add.w	r0, sp, #7
    41d2:	f002 fa01 	bl	65d8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    41d6:	4b04      	ldr	r3, [pc, #16]	; (41e8 <__data_size+0xa4>)
    41d8:	4298      	cmp	r0, r3
    41da:	d0f4      	beq.n	41c6 <__data_size+0x82>
				return -ENOMEM;
    41dc:	f06f 000b 	mvn.w	r0, #11
    41e0:	e7a4      	b.n	412c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    41e2:	f06f 0004 	mvn.w	r0, #4
    41e6:	e7a1      	b.n	412c <gpio_nrfx_pin_interrupt_configure+0x5c>
    41e8:	0bad0000 	.word	0x0bad0000
    41ec:	0000c2b8 	.word	0x0000c2b8
    41f0:	0000b83c 	.word	0x0000b83c
    41f4:	0000b180 	.word	0x0000b180
    41f8:	0000c2ec 	.word	0x0000c2ec
    41fc:	50000300 	.word	0x50000300
    4200:	0bad0004 	.word	0x0bad0004

00004204 <pin_uninit>:
{
    4204:	b530      	push	{r4, r5, lr}
    4206:	b083      	sub	sp, #12
    4208:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    420a:	f10d 0107 	add.w	r1, sp, #7
    420e:	f002 f97b 	bl	6508 <nrfx_gpiote_channel_get>
    4212:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    4214:	4620      	mov	r0, r4
    4216:	f002 fb5b 	bl	68d0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    421a:	4b0b      	ldr	r3, [pc, #44]	; (4248 <pin_uninit+0x44>)
    421c:	4298      	cmp	r0, r3
    421e:	d10f      	bne.n	4240 <pin_uninit+0x3c>
	if (free_ch) {
    4220:	429d      	cmp	r5, r3
    4222:	d005      	beq.n	4230 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4224:	4b08      	ldr	r3, [pc, #32]	; (4248 <pin_uninit+0x44>)
    4226:	4298      	cmp	r0, r3
    4228:	d107      	bne.n	423a <pin_uninit+0x36>
    422a:	2000      	movs	r0, #0
}
    422c:	b003      	add	sp, #12
    422e:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    4230:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4234:	f002 f9c8 	bl	65c8 <nrfx_gpiote_channel_free>
    4238:	e7f4      	b.n	4224 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    423a:	f06f 0004 	mvn.w	r0, #4
    423e:	e7f5      	b.n	422c <pin_uninit+0x28>
		return -EIO;
    4240:	f06f 0004 	mvn.w	r0, #4
    4244:	e7f2      	b.n	422c <pin_uninit+0x28>
    4246:	bf00      	nop
    4248:	0bad0000 	.word	0x0bad0000

0000424c <gpio_nrfx_pin_configure>:
{
    424c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4250:	b087      	sub	sp, #28
	return port->config;
    4252:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4256:	f898 300c 	ldrb.w	r3, [r8, #12]
    425a:	f001 051f 	and.w	r5, r1, #31
    425e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    4262:	2a00      	cmp	r2, #0
    4264:	d044      	beq.n	42f0 <gpio_nrfx_pin_configure+0xa4>
    4266:	460c      	mov	r4, r1
    4268:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    426a:	2600      	movs	r6, #0
    426c:	9603      	str	r6, [sp, #12]
    426e:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    4270:	f10d 0117 	add.w	r1, sp, #23
    4274:	4620      	mov	r0, r4
    4276:	f002 f947 	bl	6508 <nrfx_gpiote_channel_get>
    427a:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    427c:	4633      	mov	r3, r6
    427e:	aa03      	add	r2, sp, #12
    4280:	4631      	mov	r1, r6
    4282:	4628      	mov	r0, r5
    4284:	f001 ff4c 	bl	6120 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4288:	4b30      	ldr	r3, [pc, #192]	; (434c <gpio_nrfx_pin_configure+0x100>)
    428a:	4298      	cmp	r0, r3
    428c:	d15b      	bne.n	4346 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    428e:	4599      	cmp	r9, r3
    4290:	d036      	beq.n	4300 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    4292:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    4296:	d043      	beq.n	4320 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    4298:	f10d 0103 	add.w	r1, sp, #3
    429c:	4638      	mov	r0, r7
    429e:	f006 f8a0 	bl	a3e2 <get_drive>
		if (rv != 0) {
    42a2:	4606      	mov	r6, r0
    42a4:	bb40      	cbnz	r0, 42f8 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    42a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    42aa:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    42ae:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    42b2:	bf0c      	ite	eq
    42b4:	2301      	moveq	r3, #1
    42b6:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    42b8:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    42bc:	4638      	mov	r0, r7
    42be:	f006 f8d6 	bl	a46e <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    42c2:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    42c6:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    42ca:	d01e      	beq.n	430a <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    42cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    42d0:	2101      	movs	r1, #1
    42d2:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    42d6:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    42da:	2200      	movs	r2, #0
    42dc:	a901      	add	r1, sp, #4
    42de:	4628      	mov	r0, r5
    42e0:	f002 f812 	bl	6308 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    42e4:	4b19      	ldr	r3, [pc, #100]	; (434c <gpio_nrfx_pin_configure+0x100>)
    42e6:	4298      	cmp	r0, r3
    42e8:	d006      	beq.n	42f8 <gpio_nrfx_pin_configure+0xac>
    42ea:	f06f 0615 	mvn.w	r6, #21
    42ee:	e003      	b.n	42f8 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    42f0:	4628      	mov	r0, r5
    42f2:	f7ff ff87 	bl	4204 <pin_uninit>
    42f6:	4606      	mov	r6, r0
}
    42f8:	4630      	mov	r0, r6
    42fa:	b007      	add	sp, #28
    42fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    4300:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4304:	f002 f960 	bl	65c8 <nrfx_gpiote_channel_free>
    4308:	e7c3      	b.n	4292 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    430a:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    430e:	d0e4      	beq.n	42da <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4310:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4314:	2301      	movs	r3, #1
    4316:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    431a:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    431e:	e7dc      	b.n	42da <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    4320:	4638      	mov	r0, r7
    4322:	f006 f8a4 	bl	a46e <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    4326:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    432a:	2300      	movs	r3, #0
    432c:	461a      	mov	r2, r3
    432e:	a902      	add	r1, sp, #8
    4330:	4628      	mov	r0, r5
    4332:	f001 fef5 	bl	6120 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4336:	4b05      	ldr	r3, [pc, #20]	; (434c <gpio_nrfx_pin_configure+0x100>)
    4338:	4298      	cmp	r0, r3
    433a:	d101      	bne.n	4340 <gpio_nrfx_pin_configure+0xf4>
    433c:	2600      	movs	r6, #0
    433e:	e7db      	b.n	42f8 <gpio_nrfx_pin_configure+0xac>
    4340:	f06f 0615 	mvn.w	r6, #21
    4344:	e7d8      	b.n	42f8 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    4346:	f06f 0615 	mvn.w	r6, #21
    434a:	e7d5      	b.n	42f8 <gpio_nrfx_pin_configure+0xac>
    434c:	0bad0000 	.word	0x0bad0000

00004350 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4350:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    4352:	f002 f92f 	bl	65b4 <nrfx_gpiote_is_init>
    4356:	b108      	cbz	r0, 435c <gpio_nrfx_init+0xc>
		return 0;
    4358:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    435a:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    435c:	f002 f900 	bl	6560 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4360:	4b08      	ldr	r3, [pc, #32]	; (4384 <gpio_nrfx_init+0x34>)
    4362:	4298      	cmp	r0, r3
    4364:	d10a      	bne.n	437c <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4366:	2100      	movs	r1, #0
    4368:	4807      	ldr	r0, [pc, #28]	; (4388 <gpio_nrfx_init+0x38>)
    436a:	f002 f8c7 	bl	64fc <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    436e:	2200      	movs	r2, #0
    4370:	2105      	movs	r1, #5
    4372:	2006      	movs	r0, #6
    4374:	f7fe fca0 	bl	2cb8 <z_arm_irq_priority_set>
	return 0;
    4378:	2000      	movs	r0, #0
    437a:	e7ee      	b.n	435a <gpio_nrfx_init+0xa>
		return -EIO;
    437c:	f06f 0004 	mvn.w	r0, #4
    4380:	e7eb      	b.n	435a <gpio_nrfx_init+0xa>
    4382:	bf00      	nop
    4384:	0bad0000 	.word	0x0bad0000
    4388:	00004049 	.word	0x00004049

0000438c <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    438c:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    438e:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    4390:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    4394:	d06f      	beq.n	4476 <baudrate_set+0xea>
    4396:	d83a      	bhi.n	440e <baudrate_set+0x82>
    4398:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    439c:	d06e      	beq.n	447c <baudrate_set+0xf0>
    439e:	d90a      	bls.n	43b6 <baudrate_set+0x2a>
    43a0:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    43a4:	d075      	beq.n	4492 <baudrate_set+0x106>
    43a6:	d924      	bls.n	43f2 <baudrate_set+0x66>
    43a8:	f647 2312 	movw	r3, #31250	; 0x7a12
    43ac:	4299      	cmp	r1, r3
    43ae:	d12b      	bne.n	4408 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    43b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    43b4:	e013      	b.n	43de <baudrate_set+0x52>
	switch (baudrate) {
    43b6:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    43ba:	d061      	beq.n	4480 <baudrate_set+0xf4>
    43bc:	d907      	bls.n	43ce <baudrate_set+0x42>
    43be:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    43c2:	d063      	beq.n	448c <baudrate_set+0x100>
    43c4:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    43c8:	d110      	bne.n	43ec <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    43ca:	4b3c      	ldr	r3, [pc, #240]	; (44bc <baudrate_set+0x130>)
    43cc:	e007      	b.n	43de <baudrate_set+0x52>
	switch (baudrate) {
    43ce:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    43d2:	d058      	beq.n	4486 <baudrate_set+0xfa>
    43d4:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    43d8:	d105      	bne.n	43e6 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    43da:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    43de:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    43e2:	2000      	movs	r0, #0
    43e4:	4770      	bx	lr
	switch (baudrate) {
    43e6:	f06f 0015 	mvn.w	r0, #21
    43ea:	4770      	bx	lr
    43ec:	f06f 0015 	mvn.w	r0, #21
    43f0:	4770      	bx	lr
    43f2:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    43f6:	d04e      	beq.n	4496 <baudrate_set+0x10a>
    43f8:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    43fc:	d101      	bne.n	4402 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    43fe:	4b30      	ldr	r3, [pc, #192]	; (44c0 <baudrate_set+0x134>)
    4400:	e7ed      	b.n	43de <baudrate_set+0x52>
	switch (baudrate) {
    4402:	f06f 0015 	mvn.w	r0, #21
    4406:	4770      	bx	lr
    4408:	f06f 0015 	mvn.w	r0, #21
    440c:	4770      	bx	lr
    440e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    4412:	d042      	beq.n	449a <baudrate_set+0x10e>
    4414:	d909      	bls.n	442a <baudrate_set+0x9e>
    4416:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    441a:	d046      	beq.n	44aa <baudrate_set+0x11e>
    441c:	d91f      	bls.n	445e <baudrate_set+0xd2>
    441e:	4b29      	ldr	r3, [pc, #164]	; (44c4 <baudrate_set+0x138>)
    4420:	4299      	cmp	r1, r3
    4422:	d148      	bne.n	44b6 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    4424:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4428:	e7d9      	b.n	43de <baudrate_set+0x52>
	switch (baudrate) {
    442a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    442e:	d037      	beq.n	44a0 <baudrate_set+0x114>
    4430:	d905      	bls.n	443e <baudrate_set+0xb2>
    4432:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    4436:	d10f      	bne.n	4458 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    4438:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    443c:	e7cf      	b.n	43de <baudrate_set+0x52>
	switch (baudrate) {
    443e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    4442:	4299      	cmp	r1, r3
    4444:	d02e      	beq.n	44a4 <baudrate_set+0x118>
    4446:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    444a:	d102      	bne.n	4452 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    444c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    4450:	e7c5      	b.n	43de <baudrate_set+0x52>
	switch (baudrate) {
    4452:	f06f 0015 	mvn.w	r0, #21
    4456:	4770      	bx	lr
    4458:	f06f 0015 	mvn.w	r0, #21
    445c:	4770      	bx	lr
    445e:	4b1a      	ldr	r3, [pc, #104]	; (44c8 <baudrate_set+0x13c>)
    4460:	4299      	cmp	r1, r3
    4462:	d025      	beq.n	44b0 <baudrate_set+0x124>
    4464:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    4468:	d102      	bne.n	4470 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    446a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    446e:	e7b6      	b.n	43de <baudrate_set+0x52>
	switch (baudrate) {
    4470:	f06f 0015 	mvn.w	r0, #21
    4474:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    4476:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    447a:	e7b0      	b.n	43de <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    447c:	4b13      	ldr	r3, [pc, #76]	; (44cc <baudrate_set+0x140>)
    447e:	e7ae      	b.n	43de <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4480:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    4484:	e7ab      	b.n	43de <baudrate_set+0x52>
	switch (baudrate) {
    4486:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    448a:	e7a8      	b.n	43de <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    448c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    4490:	e7a5      	b.n	43de <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    4492:	4b0f      	ldr	r3, [pc, #60]	; (44d0 <baudrate_set+0x144>)
    4494:	e7a3      	b.n	43de <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    4496:	4b0f      	ldr	r3, [pc, #60]	; (44d4 <baudrate_set+0x148>)
    4498:	e7a1      	b.n	43de <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    449a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    449e:	e79e      	b.n	43de <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    44a0:	4b0d      	ldr	r3, [pc, #52]	; (44d8 <baudrate_set+0x14c>)
    44a2:	e79c      	b.n	43de <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    44a4:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    44a8:	e799      	b.n	43de <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    44aa:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    44ae:	e796      	b.n	43de <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    44b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    44b4:	e793      	b.n	43de <baudrate_set+0x52>
	switch (baudrate) {
    44b6:	f06f 0015 	mvn.w	r0, #21
}
    44ba:	4770      	bx	lr
    44bc:	0013b000 	.word	0x0013b000
    44c0:	004ea000 	.word	0x004ea000
    44c4:	000f4240 	.word	0x000f4240
    44c8:	0003d090 	.word	0x0003d090
    44cc:	00275000 	.word	0x00275000
    44d0:	0075c000 	.word	0x0075c000
    44d4:	003af000 	.word	0x003af000
    44d8:	013a9000 	.word	0x013a9000

000044dc <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    44dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44e0:	4605      	mov	r5, r0
    44e2:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    44e4:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    44e8:	f006 fb7e 	bl	abe8 <k_is_in_isr>
    44ec:	b920      	cbnz	r0, 44f8 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    44ee:	4b16      	ldr	r3, [pc, #88]	; (4548 <uarte_nrfx_poll_out+0x6c>)
    44f0:	781b      	ldrb	r3, [r3, #0]
    44f2:	b143      	cbz	r3, 4506 <uarte_nrfx_poll_out+0x2a>
    44f4:	2300      	movs	r3, #0
    44f6:	e000      	b.n	44fa <uarte_nrfx_poll_out+0x1e>
    44f8:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    44fa:	b953      	cbnz	r3, 4512 <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    44fc:	4628      	mov	r0, r5
    44fe:	f006 f8f2 	bl	a6e6 <wait_tx_ready>
    4502:	4606      	mov	r6, r0
    4504:	e013      	b.n	452e <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4506:	2301      	movs	r3, #1
    4508:	e7f7      	b.n	44fa <uarte_nrfx_poll_out+0x1e>
    450a:	f384 8811 	msr	BASEPRI, r4
    450e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    4512:	f04f 0320 	mov.w	r3, #32
    4516:	f3ef 8411 	mrs	r4, BASEPRI
    451a:	f383 8812 	msr	BASEPRI_MAX, r3
    451e:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    4522:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    4524:	4628      	mov	r0, r5
    4526:	f006 f890 	bl	a64a <is_tx_ready>
    452a:	2800      	cmp	r0, #0
    452c:	d0ed      	beq.n	450a <uarte_nrfx_poll_out+0x2e>
	}

	data->char_out = c;
    452e:	4641      	mov	r1, r8
    4530:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    4534:	2201      	movs	r2, #1
    4536:	4628      	mov	r0, r5
    4538:	f006 f8a1 	bl	a67e <tx_start>
	__asm__ volatile(
    453c:	f386 8811 	msr	BASEPRI, r6
    4540:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    4544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4548:	20005156 	.word	0x20005156

0000454c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    454c:	b530      	push	{r4, r5, lr}
    454e:	b085      	sub	sp, #20
    4550:	4604      	mov	r4, r0
    4552:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4554:	f101 0012 	add.w	r0, r1, #18
    4558:	f002 fa46 	bl	69e8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    455c:	4b11      	ldr	r3, [pc, #68]	; (45a4 <endtx_stoptx_ppi_init+0x58>)
    455e:	4298      	cmp	r0, r3
    4560:	d112      	bne.n	4588 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    4562:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4564:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    4568:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    456a:	4a0f      	ldr	r2, [pc, #60]	; (45a8 <endtx_stoptx_ppi_init+0x5c>)
    456c:	33a2      	adds	r3, #162	; 0xa2
    456e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    4572:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4576:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4578:	7ca9      	ldrb	r1, [r5, #18]
    457a:	2301      	movs	r3, #1
    457c:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    457e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    4582:	2000      	movs	r0, #0
}
    4584:	b005      	add	sp, #20
    4586:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    4588:	4b08      	ldr	r3, [pc, #32]	; (45ac <endtx_stoptx_ppi_init+0x60>)
    458a:	9302      	str	r3, [sp, #8]
    458c:	2000      	movs	r0, #0
    458e:	9001      	str	r0, [sp, #4]
    4590:	9000      	str	r0, [sp, #0]
    4592:	4603      	mov	r3, r0
    4594:	2201      	movs	r2, #1
    4596:	4906      	ldr	r1, [pc, #24]	; (45b0 <endtx_stoptx_ppi_init+0x64>)
    4598:	f006 f8cc 	bl	a734 <z_log_msg2_runtime_create>
		return -EIO;
    459c:	f06f 0004 	mvn.w	r0, #4
    45a0:	e7f0      	b.n	4584 <endtx_stoptx_ppi_init+0x38>
    45a2:	bf00      	nop
    45a4:	0bad0000 	.word	0x0bad0000
    45a8:	4001f000 	.word	0x4001f000
    45ac:	0000c364 	.word	0x0000c364
    45b0:	0000afc4 	.word	0x0000afc4

000045b4 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    45b4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    45b8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    45bc:	4b01      	ldr	r3, [pc, #4]	; (45c4 <set_comparator+0x10>)
    45be:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    45c2:	4770      	bx	lr
    45c4:	40011000 	.word	0x40011000

000045c8 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    45c8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    45cc:	4b01      	ldr	r3, [pc, #4]	; (45d4 <get_comparator+0xc>)
    45ce:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    45d2:	4770      	bx	lr
    45d4:	40011000 	.word	0x40011000

000045d8 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    45d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    45dc:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    45de:	4a02      	ldr	r2, [pc, #8]	; (45e8 <event_enable+0x10>)
    45e0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    45e4:	4770      	bx	lr
    45e6:	bf00      	nop
    45e8:	40011000 	.word	0x40011000

000045ec <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    45ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    45f0:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    45f2:	4a02      	ldr	r2, [pc, #8]	; (45fc <event_disable+0x10>)
    45f4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    45f8:	4770      	bx	lr
    45fa:	bf00      	nop
    45fc:	40011000 	.word	0x40011000

00004600 <counter>:
     return p_reg->COUNTER;
    4600:	4b01      	ldr	r3, [pc, #4]	; (4608 <counter+0x8>)
    4602:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    4606:	4770      	bx	lr
    4608:	40011000 	.word	0x40011000

0000460c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    460c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    460e:	2301      	movs	r3, #1
    4610:	4083      	lsls	r3, r0
    4612:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4616:	4a10      	ldr	r2, [pc, #64]	; (4658 <compare_int_lock+0x4c>)
    4618:	f3bf 8f5b 	dmb	ish
    461c:	e852 1f00 	ldrex	r1, [r2]
    4620:	ea01 0e0c 	and.w	lr, r1, ip
    4624:	e842 e400 	strex	r4, lr, [r2]
    4628:	2c00      	cmp	r4, #0
    462a:	d1f7      	bne.n	461c <compare_int_lock+0x10>
    462c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4630:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4634:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    4638:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    463c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    4640:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4644:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4648:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    464c:	420b      	tst	r3, r1
}
    464e:	bf14      	ite	ne
    4650:	2001      	movne	r0, #1
    4652:	2000      	moveq	r0, #0
    4654:	bd10      	pop	{r4, pc}
    4656:	bf00      	nop
    4658:	20004a60 	.word	0x20004a60

0000465c <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    465c:	b570      	push	{r4, r5, r6, lr}
    465e:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    4660:	f006 f90a 	bl	a878 <full_int_lock>
    4664:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    466a:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    466c:	4a17      	ldr	r2, [pc, #92]	; (46cc <channel_processing_check_and_clear+0x70>)
    466e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    4672:	4213      	tst	r3, r2
    4674:	d105      	bne.n	4682 <channel_processing_check_and_clear+0x26>
	bool result = false;
    4676:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    4678:	4628      	mov	r0, r5
    467a:	f006 f906 	bl	a88a <full_int_unlock>

	return result;
}
    467e:	4630      	mov	r0, r6
    4680:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4682:	2301      	movs	r3, #1
    4684:	40a3      	lsls	r3, r4
    4686:	43db      	mvns	r3, r3
    4688:	4a11      	ldr	r2, [pc, #68]	; (46d0 <channel_processing_check_and_clear+0x74>)
    468a:	f3bf 8f5b 	dmb	ish
    468e:	e852 1f00 	ldrex	r1, [r2]
    4692:	ea01 0003 	and.w	r0, r1, r3
    4696:	e842 0600 	strex	r6, r0, [r2]
    469a:	2e00      	cmp	r6, #0
    469c:	d1f7      	bne.n	468e <channel_processing_check_and_clear+0x32>
    469e:	f3bf 8f5b 	dmb	ish
    46a2:	b959      	cbnz	r1, 46bc <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    46a4:	f104 0350 	add.w	r3, r4, #80	; 0x50
    46a8:	009b      	lsls	r3, r3, #2
    46aa:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    46ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    46b0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    46b4:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    46b6:	b113      	cbz	r3, 46be <channel_processing_check_and_clear+0x62>
    46b8:	2301      	movs	r3, #1
    46ba:	e000      	b.n	46be <channel_processing_check_and_clear+0x62>
    46bc:	2301      	movs	r3, #1
		if (result) {
    46be:	461e      	mov	r6, r3
    46c0:	2b00      	cmp	r3, #0
    46c2:	d0d9      	beq.n	4678 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    46c4:	4620      	mov	r0, r4
    46c6:	f006 f8c8 	bl	a85a <event_clear>
    46ca:	e7d5      	b.n	4678 <channel_processing_check_and_clear+0x1c>
    46cc:	40011000 	.word	0x40011000
    46d0:	20004a5c 	.word	0x20004a5c

000046d4 <compare_int_unlock>:
	if (key) {
    46d4:	b901      	cbnz	r1, 46d8 <compare_int_unlock+0x4>
}
    46d6:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    46d8:	2301      	movs	r3, #1
    46da:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    46dc:	4a11      	ldr	r2, [pc, #68]	; (4724 <compare_int_unlock+0x50>)
    46de:	f3bf 8f5b 	dmb	ish
    46e2:	e852 1f00 	ldrex	r1, [r2]
    46e6:	4319      	orrs	r1, r3
    46e8:	e842 1c00 	strex	ip, r1, [r2]
    46ec:	f1bc 0f00 	cmp.w	ip, #0
    46f0:	d1f7      	bne.n	46e2 <compare_int_unlock+0xe>
    46f2:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    46f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    46fa:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    46fc:	4a0a      	ldr	r2, [pc, #40]	; (4728 <compare_int_unlock+0x54>)
    46fe:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4702:	f3bf 8f5b 	dmb	ish
    4706:	4b09      	ldr	r3, [pc, #36]	; (472c <compare_int_unlock+0x58>)
    4708:	681b      	ldr	r3, [r3, #0]
    470a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    470e:	fa23 f000 	lsr.w	r0, r3, r0
    4712:	f010 0f01 	tst.w	r0, #1
    4716:	d0de      	beq.n	46d6 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4718:	4b05      	ldr	r3, [pc, #20]	; (4730 <compare_int_unlock+0x5c>)
    471a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    471e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    4722:	e7d8      	b.n	46d6 <compare_int_unlock+0x2>
    4724:	20004a60 	.word	0x20004a60
    4728:	40011000 	.word	0x40011000
    472c:	20004a5c 	.word	0x20004a5c
    4730:	e000e100 	.word	0xe000e100

00004734 <sys_clock_timeout_handler>:
{
    4734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4738:	4607      	mov	r7, r0
    473a:	4614      	mov	r4, r2
    473c:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    473e:	4610      	mov	r0, r2
    4740:	4619      	mov	r1, r3
    4742:	f006 f896 	bl	a872 <absolute_time_to_cc>
    4746:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4748:	4b15      	ldr	r3, [pc, #84]	; (47a0 <sys_clock_timeout_handler+0x6c>)
    474a:	681a      	ldr	r2, [r3, #0]
    474c:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    474e:	601c      	str	r4, [r3, #0]
    4750:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4752:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    4756:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    475a:	d309      	bcc.n	4770 <sys_clock_timeout_handler+0x3c>
	return false;
    475c:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    475e:	f004 fe79 	bl	9454 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    4762:	4638      	mov	r0, r7
    4764:	f7ff ff30 	bl	45c8 <get_comparator>
    4768:	42a8      	cmp	r0, r5
    476a:	d00e      	beq.n	478a <sys_clock_timeout_handler+0x56>
}
    476c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4770:	4b0c      	ldr	r3, [pc, #48]	; (47a4 <sys_clock_timeout_handler+0x70>)
    4772:	681b      	ldr	r3, [r3, #0]
    4774:	0a1a      	lsrs	r2, r3, #8
    4776:	061b      	lsls	r3, r3, #24
    4778:	eb15 0803 	adds.w	r8, r5, r3
    477c:	f142 0900 	adc.w	r9, r2, #0
    4780:	4b09      	ldr	r3, [pc, #36]	; (47a8 <sys_clock_timeout_handler+0x74>)
    4782:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    4786:	2401      	movs	r4, #1
    4788:	e7e9      	b.n	475e <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    478a:	b11c      	cbz	r4, 4794 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    478c:	4638      	mov	r0, r7
    478e:	f7ff ff23 	bl	45d8 <event_enable>
}
    4792:	e7eb      	b.n	476c <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    4794:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    4798:	4638      	mov	r0, r7
    479a:	f7ff ff0b 	bl	45b4 <set_comparator>
    479e:	e7f5      	b.n	478c <sys_clock_timeout_handler+0x58>
    47a0:	20004288 	.word	0x20004288
    47a4:	20004a64 	.word	0x20004a64
    47a8:	20004270 	.word	0x20004270

000047ac <z_nrf_rtc_timer_read>:
{
    47ac:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    47ae:	4b0d      	ldr	r3, [pc, #52]	; (47e4 <z_nrf_rtc_timer_read+0x38>)
    47b0:	681c      	ldr	r4, [r3, #0]
    47b2:	0a25      	lsrs	r5, r4, #8
    47b4:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    47b6:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    47ba:	f7ff ff21 	bl	4600 <counter>
    47be:	4603      	mov	r3, r0
	val += cntr;
    47c0:	1900      	adds	r0, r0, r4
    47c2:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    47c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    47ca:	d20a      	bcs.n	47e2 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    47cc:	4b06      	ldr	r3, [pc, #24]	; (47e8 <z_nrf_rtc_timer_read+0x3c>)
    47ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    47d2:	4290      	cmp	r0, r2
    47d4:	eb71 0303 	sbcs.w	r3, r1, r3
    47d8:	d203      	bcs.n	47e2 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    47da:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    47de:	f141 0100 	adc.w	r1, r1, #0
}
    47e2:	bd38      	pop	{r3, r4, r5, pc}
    47e4:	20004a64 	.word	0x20004a64
    47e8:	20004270 	.word	0x20004270

000047ec <compare_set_nolocks>:
{
    47ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47ee:	4606      	mov	r6, r0
    47f0:	4614      	mov	r4, r2
    47f2:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    47f4:	4610      	mov	r0, r2
    47f6:	4619      	mov	r1, r3
    47f8:	f006 f83b 	bl	a872 <absolute_time_to_cc>
    47fc:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    47fe:	f7ff ffd5 	bl	47ac <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4802:	42a0      	cmp	r0, r4
    4804:	eb71 0305 	sbcs.w	r3, r1, r5
    4808:	d21d      	bcs.n	4846 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    480a:	1a23      	subs	r3, r4, r0
    480c:	eb65 0101 	sbc.w	r1, r5, r1
    4810:	4a1b      	ldr	r2, [pc, #108]	; (4880 <compare_set_nolocks+0x94>)
    4812:	4293      	cmp	r3, r2
    4814:	f171 0300 	sbcs.w	r3, r1, #0
    4818:	d22f      	bcs.n	487a <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    481a:	4b1a      	ldr	r3, [pc, #104]	; (4884 <compare_set_nolocks+0x98>)
    481c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    4820:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    4824:	42ab      	cmp	r3, r5
    4826:	bf08      	it	eq
    4828:	42a2      	cmpeq	r2, r4
    482a:	d01a      	beq.n	4862 <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    482c:	4639      	mov	r1, r7
    482e:	4630      	mov	r0, r6
    4830:	f006 f830 	bl	a894 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    4834:	4639      	mov	r1, r7
    4836:	f006 f80c 	bl	a852 <counter_sub>
    483a:	1900      	adds	r0, r0, r4
    483c:	f145 0300 	adc.w	r3, r5, #0
    4840:	4604      	mov	r4, r0
    4842:	461d      	mov	r5, r3
    4844:	e00d      	b.n	4862 <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    4846:	2301      	movs	r3, #1
    4848:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    484a:	4a0f      	ldr	r2, [pc, #60]	; (4888 <compare_set_nolocks+0x9c>)
    484c:	f3bf 8f5b 	dmb	ish
    4850:	e852 1f00 	ldrex	r1, [r2]
    4854:	4319      	orrs	r1, r3
    4856:	e842 1000 	strex	r0, r1, [r2]
    485a:	2800      	cmp	r0, #0
    485c:	d1f8      	bne.n	4850 <compare_set_nolocks+0x64>
    485e:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    4862:	4b08      	ldr	r3, [pc, #32]	; (4884 <compare_set_nolocks+0x98>)
    4864:	0132      	lsls	r2, r6, #4
    4866:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    486a:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    486e:	9906      	ldr	r1, [sp, #24]
    4870:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    4872:	9b07      	ldr	r3, [sp, #28]
    4874:	6073      	str	r3, [r6, #4]
	return ret;
    4876:	2000      	movs	r0, #0
}
    4878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    487a:	f06f 0015 	mvn.w	r0, #21
    487e:	e7fb      	b.n	4878 <compare_set_nolocks+0x8c>
    4880:	01000001 	.word	0x01000001
    4884:	20004278 	.word	0x20004278
    4888:	20004a5c 	.word	0x20004a5c

0000488c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    488c:	b530      	push	{r4, r5, lr}
    488e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    4890:	2300      	movs	r3, #0
    4892:	4a1d      	ldr	r2, [pc, #116]	; (4908 <sys_clock_driver_init+0x7c>)
    4894:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4898:	2b00      	cmp	r3, #0
    489a:	dd24      	ble.n	48e6 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    489c:	4c1a      	ldr	r4, [pc, #104]	; (4908 <sys_clock_driver_init+0x7c>)
    489e:	2502      	movs	r5, #2
    48a0:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48a4:	4b19      	ldr	r3, [pc, #100]	; (490c <sys_clock_driver_init+0x80>)
    48a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    48aa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    48ae:	2200      	movs	r2, #0
    48b0:	2101      	movs	r1, #1
    48b2:	2011      	movs	r0, #17
    48b4:	f7fe fa00 	bl	2cb8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    48b8:	2011      	movs	r0, #17
    48ba:	f7fe f9e1 	bl	2c80 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    48be:	2301      	movs	r3, #1
    48c0:	60a3      	str	r3, [r4, #8]
    48c2:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    48c4:	4a12      	ldr	r2, [pc, #72]	; (4910 <sys_clock_driver_init+0x84>)
    48c6:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    48c8:	2400      	movs	r4, #0
    48ca:	9401      	str	r4, [sp, #4]
    48cc:	4b11      	ldr	r3, [pc, #68]	; (4914 <sys_clock_driver_init+0x88>)
    48ce:	9300      	str	r3, [sp, #0]
    48d0:	4a11      	ldr	r2, [pc, #68]	; (4918 <sys_clock_driver_init+0x8c>)
    48d2:	2300      	movs	r3, #0
    48d4:	4620      	mov	r0, r4
    48d6:	f006 f818 	bl	a90a <compare_set>

	z_nrf_clock_control_lf_on(mode);
    48da:	4628      	mov	r0, r5
    48dc:	f7ff fabc 	bl	3e58 <z_nrf_clock_control_lf_on>

	return 0;
}
    48e0:	4620      	mov	r0, r4
    48e2:	b003      	add	sp, #12
    48e4:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    48e6:	4a0d      	ldr	r2, [pc, #52]	; (491c <sys_clock_driver_init+0x90>)
    48e8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    48ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    48f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    48f4:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    48f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    48fc:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    48fe:	4902      	ldr	r1, [pc, #8]	; (4908 <sys_clock_driver_init+0x7c>)
    4900:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4904:	3301      	adds	r3, #1
    4906:	e7c7      	b.n	4898 <sys_clock_driver_init+0xc>
    4908:	40011000 	.word	0x40011000
    490c:	e000e100 	.word	0xe000e100
    4910:	20004a60 	.word	0x20004a60
    4914:	00004735 	.word	0x00004735
    4918:	007fffff 	.word	0x007fffff
    491c:	20004278 	.word	0x20004278

00004920 <process_channel>:
{
    4920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4924:	b082      	sub	sp, #8
    4926:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    4928:	f7ff fe98 	bl	465c <channel_processing_check_and_clear>
    492c:	b910      	cbnz	r0, 4934 <process_channel+0x14>
}
    492e:	b002      	add	sp, #8
    4930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    4934:	f7ff ff3a 	bl	47ac <z_nrf_rtc_timer_read>
    4938:	4682      	mov	sl, r0
    493a:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    493c:	f005 ff9c 	bl	a878 <full_int_lock>
    4940:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    4942:	4b13      	ldr	r3, [pc, #76]	; (4990 <process_channel+0x70>)
    4944:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4948:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    494c:	45c2      	cmp	sl, r8
    494e:	eb76 0309 	sbcs.w	r3, r6, r9
    4952:	d20b      	bcs.n	496c <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4954:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    4956:	4628      	mov	r0, r5
    4958:	f005 ff97 	bl	a88a <full_int_unlock>
		if (handler) {
    495c:	2e00      	cmp	r6, #0
    495e:	d0e6      	beq.n	492e <process_channel+0xe>
			handler(chan, expire_time, user_context);
    4960:	9700      	str	r7, [sp, #0]
    4962:	4642      	mov	r2, r8
    4964:	464b      	mov	r3, r9
    4966:	4620      	mov	r0, r4
    4968:	47b0      	blx	r6
}
    496a:	e7e0      	b.n	492e <process_channel+0xe>
			handler = cc_data[chan].callback;
    496c:	4a08      	ldr	r2, [pc, #32]	; (4990 <process_channel+0x70>)
    496e:	0123      	lsls	r3, r4, #4
    4970:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    4974:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    4976:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    4978:	2000      	movs	r0, #0
    497a:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    497c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4984:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    4988:	4620      	mov	r0, r4
    498a:	f7ff fe2f 	bl	45ec <event_disable>
    498e:	e7e2      	b.n	4956 <process_channel+0x36>
    4990:	20004278 	.word	0x20004278

00004994 <rtc_nrf_isr>:
{
    4994:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    4996:	4b0e      	ldr	r3, [pc, #56]	; (49d0 <rtc_nrf_isr+0x3c>)
    4998:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    499c:	f013 0f02 	tst.w	r3, #2
    49a0:	d00d      	beq.n	49be <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    49a2:	4b0b      	ldr	r3, [pc, #44]	; (49d0 <rtc_nrf_isr+0x3c>)
    49a4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    49a8:	b14b      	cbz	r3, 49be <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    49aa:	4b09      	ldr	r3, [pc, #36]	; (49d0 <rtc_nrf_isr+0x3c>)
    49ac:	2200      	movs	r2, #0
    49ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    49b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    49b6:	4a07      	ldr	r2, [pc, #28]	; (49d4 <rtc_nrf_isr+0x40>)
    49b8:	6813      	ldr	r3, [r2, #0]
    49ba:	3301      	adds	r3, #1
    49bc:	6013      	str	r3, [r2, #0]
{
    49be:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    49c0:	2c00      	cmp	r4, #0
    49c2:	dd00      	ble.n	49c6 <rtc_nrf_isr+0x32>
}
    49c4:	bd10      	pop	{r4, pc}
		process_channel(chan);
    49c6:	4620      	mov	r0, r4
    49c8:	f7ff ffaa 	bl	4920 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    49cc:	3401      	adds	r4, #1
    49ce:	e7f7      	b.n	49c0 <rtc_nrf_isr+0x2c>
    49d0:	40011000 	.word	0x40011000
    49d4:	20004a64 	.word	0x20004a64

000049d8 <sys_clock_set_timeout>:
{
    49d8:	b510      	push	{r4, lr}
    49da:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    49dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    49e0:	d006      	beq.n	49f0 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    49e2:	2801      	cmp	r0, #1
    49e4:	dd06      	ble.n	49f4 <sys_clock_set_timeout+0x1c>
    49e6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    49ea:	da05      	bge.n	49f8 <sys_clock_set_timeout+0x20>
    49ec:	1e44      	subs	r4, r0, #1
    49ee:	e004      	b.n	49fa <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    49f0:	480f      	ldr	r0, [pc, #60]	; (4a30 <sys_clock_set_timeout+0x58>)
    49f2:	e7f8      	b.n	49e6 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    49f4:	2400      	movs	r4, #0
    49f6:	e000      	b.n	49fa <sys_clock_set_timeout+0x22>
    49f8:	4c0d      	ldr	r4, [pc, #52]	; (4a30 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    49fa:	f7ff fed7 	bl	47ac <z_nrf_rtc_timer_read>
    49fe:	4b0d      	ldr	r3, [pc, #52]	; (4a34 <sys_clock_set_timeout+0x5c>)
    4a00:	6819      	ldr	r1, [r3, #0]
    4a02:	685b      	ldr	r3, [r3, #4]
    4a04:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    4a06:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4a0a:	d300      	bcc.n	4a0e <sys_clock_set_timeout+0x36>
		ticks = 0;
    4a0c:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4a0e:	4420      	add	r0, r4
    4a10:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    4a12:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    4a16:	d300      	bcc.n	4a1a <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    4a18:	4a05      	ldr	r2, [pc, #20]	; (4a30 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    4a1a:	2000      	movs	r0, #0
    4a1c:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4a1e:	9001      	str	r0, [sp, #4]
    4a20:	4905      	ldr	r1, [pc, #20]	; (4a38 <sys_clock_set_timeout+0x60>)
    4a22:	9100      	str	r1, [sp, #0]
    4a24:	f143 0300 	adc.w	r3, r3, #0
    4a28:	f005 ff6f 	bl	a90a <compare_set>
}
    4a2c:	b002      	add	sp, #8
    4a2e:	bd10      	pop	{r4, pc}
    4a30:	007fffff 	.word	0x007fffff
    4a34:	20004288 	.word	0x20004288
    4a38:	00004735 	.word	0x00004735

00004a3c <sys_clock_elapsed>:
{
    4a3c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4a3e:	f7ff feb5 	bl	47ac <z_nrf_rtc_timer_read>
    4a42:	4b02      	ldr	r3, [pc, #8]	; (4a4c <sys_clock_elapsed+0x10>)
    4a44:	681b      	ldr	r3, [r3, #0]
}
    4a46:	1ac0      	subs	r0, r0, r3
    4a48:	bd08      	pop	{r3, pc}
    4a4a:	bf00      	nop
    4a4c:	20004288 	.word	0x20004288

00004a50 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    4a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4a54:	460c      	mov	r4, r1
    4a56:	4691      	mov	r9, r2
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    4a58:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    4a5c:	d002      	beq.n	4a64 <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4a5e:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    4a62:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    4a64:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    4a68:	f3c0 1881 	ubfx	r8, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    4a6c:	f3c0 2703 	ubfx	r7, r0, #8, #4
    uint32_t port = pin_number >> 5;
    4a70:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    4a74:	f010 0f20 	tst.w	r0, #32
    4a78:	d01d      	beq.n	4ab6 <nrf_pin_configure+0x66>
    4a7a:	b1fb      	cbz	r3, 4abc <nrf_pin_configure+0x6c>
            mask = P1_FEATURE_PINS_PRESENT;
    4a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4a80:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4a84:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4a86:	f013 0f01 	tst.w	r3, #1
    4a8a:	d019      	beq.n	4ac0 <nrf_pin_configure+0x70>
    *p_pin = pin_number & 0x1F;
    4a8c:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4a90:	096d      	lsrs	r5, r5, #5
    4a92:	d023      	beq.n	4adc <nrf_pin_configure+0x8c>
    4a94:	bb2d      	cbnz	r5, 4ae2 <nrf_pin_configure+0x92>
            NRFX_ASSERT(0);
    4a96:	4d19      	ldr	r5, [pc, #100]	; (4afc <nrf_pin_configure+0xac>)
    4a98:	f240 232e 	movw	r3, #558	; 0x22e
    4a9c:	462a      	mov	r2, r5
    4a9e:	4918      	ldr	r1, [pc, #96]	; (4b00 <nrf_pin_configure+0xb0>)
    4aa0:	4818      	ldr	r0, [pc, #96]	; (4b04 <nrf_pin_configure+0xb4>)
    4aa2:	f005 f9e8 	bl	9e76 <assert_print>
    4aa6:	f240 212e 	movw	r1, #558	; 0x22e
    4aaa:	4628      	mov	r0, r5
    4aac:	f005 f9dc 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    4ab0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4ab4:	e016      	b.n	4ae4 <nrf_pin_configure+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    4ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4aba:	e7e1      	b.n	4a80 <nrf_pin_configure+0x30>
    switch (port)
    4abc:	2300      	movs	r3, #0
    4abe:	e7df      	b.n	4a80 <nrf_pin_configure+0x30>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4ac0:	4e0e      	ldr	r6, [pc, #56]	; (4afc <nrf_pin_configure+0xac>)
    4ac2:	f240 2329 	movw	r3, #553	; 0x229
    4ac6:	4632      	mov	r2, r6
    4ac8:	490f      	ldr	r1, [pc, #60]	; (4b08 <nrf_pin_configure+0xb8>)
    4aca:	480e      	ldr	r0, [pc, #56]	; (4b04 <nrf_pin_configure+0xb4>)
    4acc:	f005 f9d3 	bl	9e76 <assert_print>
    4ad0:	f240 2129 	movw	r1, #553	; 0x229
    4ad4:	4630      	mov	r0, r6
    4ad6:	f005 f9c7 	bl	9e68 <assert_post_action>
    4ada:	e7d7      	b.n	4a8c <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
    4adc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4ae0:	e000      	b.n	4ae4 <nrf_pin_configure+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4ae2:	4b0a      	ldr	r3, [pc, #40]	; (4b0c <nrf_pin_configure+0xbc>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4ae4:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    4ae8:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4aec:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    4af0:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    4af4:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
}
    4af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4afc:	0000c2b8 	.word	0x0000c2b8
    4b00:	0000b83c 	.word	0x0000b83c
    4b04:	0000b180 	.word	0x0000b180
    4b08:	0000c2ec 	.word	0x0000c2ec
    4b0c:	50000300 	.word	0x50000300

00004b10 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    4b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b14:	4605      	mov	r5, r0
    4b16:	460e      	mov	r6, r1
    4b18:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4b1a:	2400      	movs	r4, #0
    4b1c:	e04e      	b.n	4bbc <pinctrl_configure_pins+0xac>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    4b1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4b22:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    4b26:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4b2a:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    4b2e:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    4b32:	f013 0f20 	tst.w	r3, #32
    4b36:	d01f      	beq.n	4b78 <pinctrl_configure_pins+0x68>
    4b38:	b109      	cbz	r1, 4b3e <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    4b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    4b3e:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4b42:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4b44:	f012 0f01 	tst.w	r2, #1
    4b48:	d019      	beq.n	4b7e <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    4b4a:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4b4e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4b52:	d023      	beq.n	4b9c <pinctrl_configure_pins+0x8c>
    4b54:	bb2b      	cbnz	r3, 4ba2 <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    4b56:	f8df 9344 	ldr.w	r9, [pc, #836]	; 4e9c <pinctrl_configure_pins+0x38c>
    4b5a:	f240 232e 	movw	r3, #558	; 0x22e
    4b5e:	464a      	mov	r2, r9
    4b60:	49cf      	ldr	r1, [pc, #828]	; (4ea0 <pinctrl_configure_pins+0x390>)
    4b62:	48d0      	ldr	r0, [pc, #832]	; (4ea4 <pinctrl_configure_pins+0x394>)
    4b64:	f005 f987 	bl	9e76 <assert_print>
    4b68:	f240 212e 	movw	r1, #558	; 0x22e
    4b6c:	4648      	mov	r0, r9
    4b6e:	f005 f97b 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    4b72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4b76:	e015      	b.n	4ba4 <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    4b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4b7c:	e7df      	b.n	4b3e <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4b7e:	f8df a31c 	ldr.w	sl, [pc, #796]	; 4e9c <pinctrl_configure_pins+0x38c>
    4b82:	f240 2329 	movw	r3, #553	; 0x229
    4b86:	4652      	mov	r2, sl
    4b88:	49c7      	ldr	r1, [pc, #796]	; (4ea8 <pinctrl_configure_pins+0x398>)
    4b8a:	48c6      	ldr	r0, [pc, #792]	; (4ea4 <pinctrl_configure_pins+0x394>)
    4b8c:	f005 f973 	bl	9e76 <assert_print>
    4b90:	f240 2129 	movw	r1, #553	; 0x229
    4b94:	4650      	mov	r0, sl
    4b96:	f005 f967 	bl	9e68 <assert_post_action>
    4b9a:	e7d6      	b.n	4b4a <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    4b9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4ba0:	e000      	b.n	4ba4 <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4ba2:	4ac2      	ldr	r2, [pc, #776]	; (4eac <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4ba4:	2101      	movs	r1, #1
    4ba6:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    4baa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4bae:	460a      	mov	r2, r1
    4bb0:	f855 0008 	ldr.w	r0, [r5, r8]
    4bb4:	f7ff ff4c 	bl	4a50 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4bb8:	3401      	adds	r4, #1
    4bba:	b2e4      	uxtb	r4, r4
    4bbc:	42b4      	cmp	r4, r6
    4bbe:	f080 841e 	bcs.w	53fe <pinctrl_configure_pins+0x8ee>
		switch (NRF_GET_FUN(pins[i])) {
    4bc2:	ea4f 0884 	mov.w	r8, r4, lsl #2
    4bc6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4bca:	0c1a      	lsrs	r2, r3, #16
    4bcc:	2a22      	cmp	r2, #34	; 0x22
    4bce:	f200 8418 	bhi.w	5402 <pinctrl_configure_pins+0x8f2>
    4bd2:	a101      	add	r1, pc, #4	; (adr r1, 4bd8 <pinctrl_configure_pins+0xc8>)
    4bd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4bd8:	00004b1f 	.word	0x00004b1f
    4bdc:	00004c65 	.word	0x00004c65
    4be0:	00004c7b 	.word	0x00004c7b
    4be4:	00004d1b 	.word	0x00004d1b
    4be8:	00004d31 	.word	0x00004d31
    4bec:	00004dd1 	.word	0x00004dd1
    4bf0:	00004e71 	.word	0x00004e71
    4bf4:	00005403 	.word	0x00005403
    4bf8:	00005403 	.word	0x00005403
    4bfc:	00005403 	.word	0x00005403
    4c00:	00005403 	.word	0x00005403
    4c04:	00004e87 	.word	0x00004e87
    4c08:	00004eb1 	.word	0x00004eb1
    4c0c:	00005403 	.word	0x00005403
    4c10:	00005403 	.word	0x00005403
    4c14:	00005403 	.word	0x00005403
    4c18:	00005403 	.word	0x00005403
    4c1c:	00005403 	.word	0x00005403
    4c20:	00005403 	.word	0x00005403
    4c24:	00005403 	.word	0x00005403
    4c28:	00005403 	.word	0x00005403
    4c2c:	00005403 	.word	0x00005403
    4c30:	00004ec7 	.word	0x00004ec7
    4c34:	00004fed 	.word	0x00004fed
    4c38:	00005113 	.word	0x00005113
    4c3c:	0000524f 	.word	0x0000524f
    4c40:	00005403 	.word	0x00005403
    4c44:	00005403 	.word	0x00005403
    4c48:	00005403 	.word	0x00005403
    4c4c:	00005375 	.word	0x00005375
    4c50:	0000538b 	.word	0x0000538b
    4c54:	000053a1 	.word	0x000053a1
    4c58:	000053b7 	.word	0x000053b7
    4c5c:	000053cf 	.word	0x000053cf
    4c60:	000053e7 	.word	0x000053e7
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    4c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4c68:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4c6c:	2200      	movs	r2, #0
    4c6e:	4611      	mov	r1, r2
    4c70:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4c74:	f7ff feec 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4c78:	e79e      	b.n	4bb8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    4c7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4c7e:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    4c82:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4c86:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    4c8a:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    4c8e:	f013 0f20 	tst.w	r3, #32
    4c92:	d01f      	beq.n	4cd4 <pinctrl_configure_pins+0x1c4>
    4c94:	b30a      	cbz	r2, 4cda <pinctrl_configure_pins+0x1ca>
            mask = P1_FEATURE_PINS_PRESENT;
    4c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4c9a:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4c9e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4ca0:	f013 0f01 	tst.w	r3, #1
    4ca4:	d01b      	beq.n	4cde <pinctrl_configure_pins+0x1ce>
    *p_pin = pin_number & 0x1F;
    4ca6:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4caa:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4cae:	d025      	beq.n	4cfc <pinctrl_configure_pins+0x1ec>
    4cb0:	bb3b      	cbnz	r3, 4d02 <pinctrl_configure_pins+0x1f2>
            NRFX_ASSERT(0);
    4cb2:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 4e9c <pinctrl_configure_pins+0x38c>
    4cb6:	f240 232e 	movw	r3, #558	; 0x22e
    4cba:	464a      	mov	r2, r9
    4cbc:	4978      	ldr	r1, [pc, #480]	; (4ea0 <pinctrl_configure_pins+0x390>)
    4cbe:	4879      	ldr	r0, [pc, #484]	; (4ea4 <pinctrl_configure_pins+0x394>)
    4cc0:	f005 f8d9 	bl	9e76 <assert_print>
    4cc4:	f240 212e 	movw	r1, #558	; 0x22e
    4cc8:	4648      	mov	r0, r9
    4cca:	f005 f8cd 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    4cce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4cd2:	e017      	b.n	4d04 <pinctrl_configure_pins+0x1f4>
            mask = P0_FEATURE_PINS_PRESENT;
    4cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4cd8:	e7df      	b.n	4c9a <pinctrl_configure_pins+0x18a>
    switch (port)
    4cda:	2300      	movs	r3, #0
    4cdc:	e7dd      	b.n	4c9a <pinctrl_configure_pins+0x18a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4cde:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 4e9c <pinctrl_configure_pins+0x38c>
    4ce2:	f240 2329 	movw	r3, #553	; 0x229
    4ce6:	4652      	mov	r2, sl
    4ce8:	496f      	ldr	r1, [pc, #444]	; (4ea8 <pinctrl_configure_pins+0x398>)
    4cea:	486e      	ldr	r0, [pc, #440]	; (4ea4 <pinctrl_configure_pins+0x394>)
    4cec:	f005 f8c3 	bl	9e76 <assert_print>
    4cf0:	f240 2129 	movw	r1, #553	; 0x229
    4cf4:	4650      	mov	r0, sl
    4cf6:	f005 f8b7 	bl	9e68 <assert_post_action>
    4cfa:	e7d4      	b.n	4ca6 <pinctrl_configure_pins+0x196>
        case 0: return NRF_P0;
    4cfc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4d00:	e000      	b.n	4d04 <pinctrl_configure_pins+0x1f4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d02:	4a6a      	ldr	r2, [pc, #424]	; (4eac <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4d04:	2101      	movs	r1, #1
    4d06:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    4d0a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4d0e:	460a      	mov	r2, r1
    4d10:	f855 0008 	ldr.w	r0, [r5, r8]
    4d14:	f7ff fe9c 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4d18:	e74e      	b.n	4bb8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    4d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4d1e:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4d22:	2200      	movs	r2, #0
    4d24:	4611      	mov	r1, r2
    4d26:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4d2a:	f7ff fe91 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4d2e:	e743      	b.n	4bb8 <pinctrl_configure_pins+0xa8>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    4d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4d34:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    4d38:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4d3c:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    4d40:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    4d44:	f013 0f20 	tst.w	r3, #32
    4d48:	d01f      	beq.n	4d8a <pinctrl_configure_pins+0x27a>
    4d4a:	b30a      	cbz	r2, 4d90 <pinctrl_configure_pins+0x280>
            mask = P1_FEATURE_PINS_PRESENT;
    4d4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4d50:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4d54:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4d56:	f013 0f01 	tst.w	r3, #1
    4d5a:	d01b      	beq.n	4d94 <pinctrl_configure_pins+0x284>
    *p_pin = pin_number & 0x1F;
    4d5c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d60:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4d64:	d025      	beq.n	4db2 <pinctrl_configure_pins+0x2a2>
    4d66:	bb3b      	cbnz	r3, 4db8 <pinctrl_configure_pins+0x2a8>
            NRFX_ASSERT(0);
    4d68:	f8df 9130 	ldr.w	r9, [pc, #304]	; 4e9c <pinctrl_configure_pins+0x38c>
    4d6c:	f240 232e 	movw	r3, #558	; 0x22e
    4d70:	464a      	mov	r2, r9
    4d72:	494b      	ldr	r1, [pc, #300]	; (4ea0 <pinctrl_configure_pins+0x390>)
    4d74:	484b      	ldr	r0, [pc, #300]	; (4ea4 <pinctrl_configure_pins+0x394>)
    4d76:	f005 f87e 	bl	9e76 <assert_print>
    4d7a:	f240 212e 	movw	r1, #558	; 0x22e
    4d7e:	4648      	mov	r0, r9
    4d80:	f005 f872 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    4d84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4d88:	e017      	b.n	4dba <pinctrl_configure_pins+0x2aa>
            mask = P0_FEATURE_PINS_PRESENT;
    4d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4d8e:	e7df      	b.n	4d50 <pinctrl_configure_pins+0x240>
    switch (port)
    4d90:	2300      	movs	r3, #0
    4d92:	e7dd      	b.n	4d50 <pinctrl_configure_pins+0x240>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4d94:	f8df a104 	ldr.w	sl, [pc, #260]	; 4e9c <pinctrl_configure_pins+0x38c>
    4d98:	f240 2329 	movw	r3, #553	; 0x229
    4d9c:	4652      	mov	r2, sl
    4d9e:	4942      	ldr	r1, [pc, #264]	; (4ea8 <pinctrl_configure_pins+0x398>)
    4da0:	4840      	ldr	r0, [pc, #256]	; (4ea4 <pinctrl_configure_pins+0x394>)
    4da2:	f005 f868 	bl	9e76 <assert_print>
    4da6:	f240 2129 	movw	r1, #553	; 0x229
    4daa:	4650      	mov	r0, sl
    4dac:	f005 f85c 	bl	9e68 <assert_post_action>
    4db0:	e7d4      	b.n	4d5c <pinctrl_configure_pins+0x24c>
        case 0: return NRF_P0;
    4db2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4db6:	e000      	b.n	4dba <pinctrl_configure_pins+0x2aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4db8:	4a3c      	ldr	r2, [pc, #240]	; (4eac <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4dba:	2101      	movs	r1, #1
    4dbc:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    4dc0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4dc4:	2200      	movs	r2, #0
    4dc6:	f855 0008 	ldr.w	r0, [r5, r8]
    4dca:	f7ff fe41 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4dce:	e6f3      	b.n	4bb8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    4dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4dd4:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    4dd8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4ddc:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    4de0:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    4de4:	f013 0f20 	tst.w	r3, #32
    4de8:	d01f      	beq.n	4e2a <pinctrl_configure_pins+0x31a>
    4dea:	b30a      	cbz	r2, 4e30 <pinctrl_configure_pins+0x320>
            mask = P1_FEATURE_PINS_PRESENT;
    4dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4df0:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4df4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4df6:	f013 0f01 	tst.w	r3, #1
    4dfa:	d01b      	beq.n	4e34 <pinctrl_configure_pins+0x324>
    *p_pin = pin_number & 0x1F;
    4dfc:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e00:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4e04:	d025      	beq.n	4e52 <pinctrl_configure_pins+0x342>
    4e06:	bb3b      	cbnz	r3, 4e58 <pinctrl_configure_pins+0x348>
            NRFX_ASSERT(0);
    4e08:	f8df 9090 	ldr.w	r9, [pc, #144]	; 4e9c <pinctrl_configure_pins+0x38c>
    4e0c:	f240 232e 	movw	r3, #558	; 0x22e
    4e10:	464a      	mov	r2, r9
    4e12:	4923      	ldr	r1, [pc, #140]	; (4ea0 <pinctrl_configure_pins+0x390>)
    4e14:	4823      	ldr	r0, [pc, #140]	; (4ea4 <pinctrl_configure_pins+0x394>)
    4e16:	f005 f82e 	bl	9e76 <assert_print>
    4e1a:	f240 212e 	movw	r1, #558	; 0x22e
    4e1e:	4648      	mov	r0, r9
    4e20:	f005 f822 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    4e24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4e28:	e017      	b.n	4e5a <pinctrl_configure_pins+0x34a>
            mask = P0_FEATURE_PINS_PRESENT;
    4e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4e2e:	e7df      	b.n	4df0 <pinctrl_configure_pins+0x2e0>
    switch (port)
    4e30:	2300      	movs	r3, #0
    4e32:	e7dd      	b.n	4df0 <pinctrl_configure_pins+0x2e0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4e34:	f8df a064 	ldr.w	sl, [pc, #100]	; 4e9c <pinctrl_configure_pins+0x38c>
    4e38:	f240 2329 	movw	r3, #553	; 0x229
    4e3c:	4652      	mov	r2, sl
    4e3e:	491a      	ldr	r1, [pc, #104]	; (4ea8 <pinctrl_configure_pins+0x398>)
    4e40:	4818      	ldr	r0, [pc, #96]	; (4ea4 <pinctrl_configure_pins+0x394>)
    4e42:	f005 f818 	bl	9e76 <assert_print>
    4e46:	f240 2129 	movw	r1, #553	; 0x229
    4e4a:	4650      	mov	r0, sl
    4e4c:	f005 f80c 	bl	9e68 <assert_post_action>
    4e50:	e7d4      	b.n	4dfc <pinctrl_configure_pins+0x2ec>
        case 0: return NRF_P0;
    4e52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4e56:	e000      	b.n	4e5a <pinctrl_configure_pins+0x34a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e58:	4a14      	ldr	r2, [pc, #80]	; (4eac <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4e5a:	2101      	movs	r1, #1
    4e5c:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    4e60:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4e64:	460a      	mov	r2, r1
    4e66:	f855 0008 	ldr.w	r0, [r5, r8]
    4e6a:	f7ff fdf1 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4e6e:	e6a3      	b.n	4bb8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    4e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e74:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4e78:	2200      	movs	r2, #0
    4e7a:	4611      	mov	r1, r2
    4e7c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4e80:	f7ff fde6 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4e84:	e698      	b.n	4bb8 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    4e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e8a:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4e8e:	2200      	movs	r2, #0
    4e90:	4611      	mov	r1, r2
    4e92:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4e96:	f7ff fddb 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4e9a:	e68d      	b.n	4bb8 <pinctrl_configure_pins+0xa8>
    4e9c:	0000c2b8 	.word	0x0000c2b8
    4ea0:	0000b83c 	.word	0x0000b83c
    4ea4:	0000b180 	.word	0x0000b180
    4ea8:	0000c2ec 	.word	0x0000c2ec
    4eac:	50000300 	.word	0x50000300
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    4eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4eb4:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4eb8:	2200      	movs	r2, #0
    4eba:	4611      	mov	r1, r2
    4ebc:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4ec0:	f7ff fdc6 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4ec4:	e678      	b.n	4bb8 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    4ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4eca:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4ece:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4ed2:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    4ed6:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    4eda:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    4ede:	d144      	bne.n	4f6a <pinctrl_configure_pins+0x45a>
    switch (port)
    4ee0:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4ee4:	d01f      	beq.n	4f26 <pinctrl_configure_pins+0x416>
    4ee6:	b10b      	cbz	r3, 4eec <pinctrl_configure_pins+0x3dc>
            mask = P1_FEATURE_PINS_PRESENT;
    4ee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    4eec:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4ef0:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4ef2:	f012 0f01 	tst.w	r2, #1
    4ef6:	d019      	beq.n	4f2c <pinctrl_configure_pins+0x41c>
    *p_pin = pin_number & 0x1F;
    4ef8:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4efc:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4f00:	d023      	beq.n	4f4a <pinctrl_configure_pins+0x43a>
    4f02:	bb2b      	cbnz	r3, 4f50 <pinctrl_configure_pins+0x440>
            NRFX_ASSERT(0);
    4f04:	f8df 9300 	ldr.w	r9, [pc, #768]	; 5208 <pinctrl_configure_pins+0x6f8>
    4f08:	f240 232e 	movw	r3, #558	; 0x22e
    4f0c:	464a      	mov	r2, r9
    4f0e:	49bf      	ldr	r1, [pc, #764]	; (520c <pinctrl_configure_pins+0x6fc>)
    4f10:	48bf      	ldr	r0, [pc, #764]	; (5210 <pinctrl_configure_pins+0x700>)
    4f12:	f004 ffb0 	bl	9e76 <assert_print>
    4f16:	f240 212e 	movw	r1, #558	; 0x22e
    4f1a:	4648      	mov	r0, r9
    4f1c:	f004 ffa4 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    4f20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4f24:	e015      	b.n	4f52 <pinctrl_configure_pins+0x442>
            mask = P0_FEATURE_PINS_PRESENT;
    4f26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4f2a:	e7df      	b.n	4eec <pinctrl_configure_pins+0x3dc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4f2c:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 5208 <pinctrl_configure_pins+0x6f8>
    4f30:	f240 2329 	movw	r3, #553	; 0x229
    4f34:	4652      	mov	r2, sl
    4f36:	49b7      	ldr	r1, [pc, #732]	; (5214 <pinctrl_configure_pins+0x704>)
    4f38:	48b5      	ldr	r0, [pc, #724]	; (5210 <pinctrl_configure_pins+0x700>)
    4f3a:	f004 ff9c 	bl	9e76 <assert_print>
    4f3e:	f240 2129 	movw	r1, #553	; 0x229
    4f42:	4650      	mov	r0, sl
    4f44:	f004 ff90 	bl	9e68 <assert_post_action>
    4f48:	e7d6      	b.n	4ef8 <pinctrl_configure_pins+0x3e8>
        case 0: return NRF_P0;
    4f4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4f4e:	e000      	b.n	4f52 <pinctrl_configure_pins+0x442>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f50:	4ab1      	ldr	r2, [pc, #708]	; (5218 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4f52:	2301      	movs	r3, #1
    4f54:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    4f58:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4f5c:	2201      	movs	r2, #1
    4f5e:	4611      	mov	r1, r2
    4f60:	f855 0008 	ldr.w	r0, [r5, r8]
    4f64:	f7ff fd74 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4f68:	e626      	b.n	4bb8 <pinctrl_configure_pins+0xa8>
    switch (port)
    4f6a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4f6e:	d01f      	beq.n	4fb0 <pinctrl_configure_pins+0x4a0>
    4f70:	b30b      	cbz	r3, 4fb6 <pinctrl_configure_pins+0x4a6>
            mask = P1_FEATURE_PINS_PRESENT;
    4f72:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4f76:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4f7a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4f7c:	f013 0f01 	tst.w	r3, #1
    4f80:	d01b      	beq.n	4fba <pinctrl_configure_pins+0x4aa>
    *p_pin = pin_number & 0x1F;
    4f82:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f86:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4f8a:	d025      	beq.n	4fd8 <pinctrl_configure_pins+0x4c8>
    4f8c:	bb3b      	cbnz	r3, 4fde <pinctrl_configure_pins+0x4ce>
            NRFX_ASSERT(0);
    4f8e:	f8df 9278 	ldr.w	r9, [pc, #632]	; 5208 <pinctrl_configure_pins+0x6f8>
    4f92:	f240 232e 	movw	r3, #558	; 0x22e
    4f96:	464a      	mov	r2, r9
    4f98:	499c      	ldr	r1, [pc, #624]	; (520c <pinctrl_configure_pins+0x6fc>)
    4f9a:	489d      	ldr	r0, [pc, #628]	; (5210 <pinctrl_configure_pins+0x700>)
    4f9c:	f004 ff6b 	bl	9e76 <assert_print>
    4fa0:	f240 212e 	movw	r1, #558	; 0x22e
    4fa4:	4648      	mov	r0, r9
    4fa6:	f004 ff5f 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    4faa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4fae:	e017      	b.n	4fe0 <pinctrl_configure_pins+0x4d0>
            mask = P0_FEATURE_PINS_PRESENT;
    4fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4fb4:	e7df      	b.n	4f76 <pinctrl_configure_pins+0x466>
    switch (port)
    4fb6:	2300      	movs	r3, #0
    4fb8:	e7dd      	b.n	4f76 <pinctrl_configure_pins+0x466>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4fba:	f8df a24c 	ldr.w	sl, [pc, #588]	; 5208 <pinctrl_configure_pins+0x6f8>
    4fbe:	f240 2329 	movw	r3, #553	; 0x229
    4fc2:	4652      	mov	r2, sl
    4fc4:	4993      	ldr	r1, [pc, #588]	; (5214 <pinctrl_configure_pins+0x704>)
    4fc6:	4892      	ldr	r0, [pc, #584]	; (5210 <pinctrl_configure_pins+0x700>)
    4fc8:	f004 ff55 	bl	9e76 <assert_print>
    4fcc:	f240 2129 	movw	r1, #553	; 0x229
    4fd0:	4650      	mov	r0, sl
    4fd2:	f004 ff49 	bl	9e68 <assert_post_action>
    4fd6:	e7d4      	b.n	4f82 <pinctrl_configure_pins+0x472>
        case 0: return NRF_P0;
    4fd8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4fdc:	e000      	b.n	4fe0 <pinctrl_configure_pins+0x4d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4fde:	4a8e      	ldr	r2, [pc, #568]	; (5218 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4fe0:	2301      	movs	r3, #1
    4fe2:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    4fe6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    4fea:	e7b7      	b.n	4f5c <pinctrl_configure_pins+0x44c>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    4fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4ff0:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4ff4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4ff8:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    4ffc:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    5000:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5004:	d144      	bne.n	5090 <pinctrl_configure_pins+0x580>
    switch (port)
    5006:	ea5f 1359 	movs.w	r3, r9, lsr #5
    500a:	d01f      	beq.n	504c <pinctrl_configure_pins+0x53c>
    500c:	b10b      	cbz	r3, 5012 <pinctrl_configure_pins+0x502>
            mask = P1_FEATURE_PINS_PRESENT;
    500e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5012:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5016:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5018:	f012 0f01 	tst.w	r2, #1
    501c:	d019      	beq.n	5052 <pinctrl_configure_pins+0x542>
    *p_pin = pin_number & 0x1F;
    501e:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5022:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5026:	d023      	beq.n	5070 <pinctrl_configure_pins+0x560>
    5028:	bb2b      	cbnz	r3, 5076 <pinctrl_configure_pins+0x566>
            NRFX_ASSERT(0);
    502a:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 5208 <pinctrl_configure_pins+0x6f8>
    502e:	f240 232e 	movw	r3, #558	; 0x22e
    5032:	464a      	mov	r2, r9
    5034:	4975      	ldr	r1, [pc, #468]	; (520c <pinctrl_configure_pins+0x6fc>)
    5036:	4876      	ldr	r0, [pc, #472]	; (5210 <pinctrl_configure_pins+0x700>)
    5038:	f004 ff1d 	bl	9e76 <assert_print>
    503c:	f240 212e 	movw	r1, #558	; 0x22e
    5040:	4648      	mov	r0, r9
    5042:	f004 ff11 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    5046:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    504a:	e015      	b.n	5078 <pinctrl_configure_pins+0x568>
            mask = P0_FEATURE_PINS_PRESENT;
    504c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5050:	e7df      	b.n	5012 <pinctrl_configure_pins+0x502>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5052:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 5208 <pinctrl_configure_pins+0x6f8>
    5056:	f240 2329 	movw	r3, #553	; 0x229
    505a:	4652      	mov	r2, sl
    505c:	496d      	ldr	r1, [pc, #436]	; (5214 <pinctrl_configure_pins+0x704>)
    505e:	486c      	ldr	r0, [pc, #432]	; (5210 <pinctrl_configure_pins+0x700>)
    5060:	f004 ff09 	bl	9e76 <assert_print>
    5064:	f240 2129 	movw	r1, #553	; 0x229
    5068:	4650      	mov	r0, sl
    506a:	f004 fefd 	bl	9e68 <assert_post_action>
    506e:	e7d6      	b.n	501e <pinctrl_configure_pins+0x50e>
        case 0: return NRF_P0;
    5070:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5074:	e000      	b.n	5078 <pinctrl_configure_pins+0x568>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5076:	4a68      	ldr	r2, [pc, #416]	; (5218 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5078:	2301      	movs	r3, #1
    507a:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    507e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5082:	2201      	movs	r2, #1
    5084:	4611      	mov	r1, r2
    5086:	f855 0008 	ldr.w	r0, [r5, r8]
    508a:	f7ff fce1 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    508e:	e593      	b.n	4bb8 <pinctrl_configure_pins+0xa8>
    switch (port)
    5090:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5094:	d01f      	beq.n	50d6 <pinctrl_configure_pins+0x5c6>
    5096:	b30b      	cbz	r3, 50dc <pinctrl_configure_pins+0x5cc>
            mask = P1_FEATURE_PINS_PRESENT;
    5098:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    509c:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    50a0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    50a2:	f013 0f01 	tst.w	r3, #1
    50a6:	d01b      	beq.n	50e0 <pinctrl_configure_pins+0x5d0>
    *p_pin = pin_number & 0x1F;
    50a8:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    50ac:	ea5f 1359 	movs.w	r3, r9, lsr #5
    50b0:	d025      	beq.n	50fe <pinctrl_configure_pins+0x5ee>
    50b2:	bb3b      	cbnz	r3, 5104 <pinctrl_configure_pins+0x5f4>
            NRFX_ASSERT(0);
    50b4:	f8df 9150 	ldr.w	r9, [pc, #336]	; 5208 <pinctrl_configure_pins+0x6f8>
    50b8:	f240 232e 	movw	r3, #558	; 0x22e
    50bc:	464a      	mov	r2, r9
    50be:	4953      	ldr	r1, [pc, #332]	; (520c <pinctrl_configure_pins+0x6fc>)
    50c0:	4853      	ldr	r0, [pc, #332]	; (5210 <pinctrl_configure_pins+0x700>)
    50c2:	f004 fed8 	bl	9e76 <assert_print>
    50c6:	f240 212e 	movw	r1, #558	; 0x22e
    50ca:	4648      	mov	r0, r9
    50cc:	f004 fecc 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    50d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    50d4:	e017      	b.n	5106 <pinctrl_configure_pins+0x5f6>
            mask = P0_FEATURE_PINS_PRESENT;
    50d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    50da:	e7df      	b.n	509c <pinctrl_configure_pins+0x58c>
    switch (port)
    50dc:	2300      	movs	r3, #0
    50de:	e7dd      	b.n	509c <pinctrl_configure_pins+0x58c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    50e0:	f8df a124 	ldr.w	sl, [pc, #292]	; 5208 <pinctrl_configure_pins+0x6f8>
    50e4:	f240 2329 	movw	r3, #553	; 0x229
    50e8:	4652      	mov	r2, sl
    50ea:	494a      	ldr	r1, [pc, #296]	; (5214 <pinctrl_configure_pins+0x704>)
    50ec:	4848      	ldr	r0, [pc, #288]	; (5210 <pinctrl_configure_pins+0x700>)
    50ee:	f004 fec2 	bl	9e76 <assert_print>
    50f2:	f240 2129 	movw	r1, #553	; 0x229
    50f6:	4650      	mov	r0, sl
    50f8:	f004 feb6 	bl	9e68 <assert_post_action>
    50fc:	e7d4      	b.n	50a8 <pinctrl_configure_pins+0x598>
        case 0: return NRF_P0;
    50fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5102:	e000      	b.n	5106 <pinctrl_configure_pins+0x5f6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5104:	4a44      	ldr	r2, [pc, #272]	; (5218 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5106:	2301      	movs	r3, #1
    5108:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    510c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    5110:	e7b7      	b.n	5082 <pinctrl_configure_pins+0x572>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    5112:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5116:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    511a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    511e:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    5122:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    5126:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    512a:	d144      	bne.n	51b6 <pinctrl_configure_pins+0x6a6>
    switch (port)
    512c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5130:	d01f      	beq.n	5172 <pinctrl_configure_pins+0x662>
    5132:	b10b      	cbz	r3, 5138 <pinctrl_configure_pins+0x628>
            mask = P1_FEATURE_PINS_PRESENT;
    5134:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5138:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    513c:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    513e:	f012 0f01 	tst.w	r2, #1
    5142:	d019      	beq.n	5178 <pinctrl_configure_pins+0x668>
    *p_pin = pin_number & 0x1F;
    5144:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5148:	ea5f 1359 	movs.w	r3, r9, lsr #5
    514c:	d023      	beq.n	5196 <pinctrl_configure_pins+0x686>
    514e:	bb2b      	cbnz	r3, 519c <pinctrl_configure_pins+0x68c>
            NRFX_ASSERT(0);
    5150:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 5208 <pinctrl_configure_pins+0x6f8>
    5154:	f240 232e 	movw	r3, #558	; 0x22e
    5158:	464a      	mov	r2, r9
    515a:	492c      	ldr	r1, [pc, #176]	; (520c <pinctrl_configure_pins+0x6fc>)
    515c:	482c      	ldr	r0, [pc, #176]	; (5210 <pinctrl_configure_pins+0x700>)
    515e:	f004 fe8a 	bl	9e76 <assert_print>
    5162:	f240 212e 	movw	r1, #558	; 0x22e
    5166:	4648      	mov	r0, r9
    5168:	f004 fe7e 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    516c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5170:	e015      	b.n	519e <pinctrl_configure_pins+0x68e>
            mask = P0_FEATURE_PINS_PRESENT;
    5172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5176:	e7df      	b.n	5138 <pinctrl_configure_pins+0x628>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5178:	f8df a08c 	ldr.w	sl, [pc, #140]	; 5208 <pinctrl_configure_pins+0x6f8>
    517c:	f240 2329 	movw	r3, #553	; 0x229
    5180:	4652      	mov	r2, sl
    5182:	4924      	ldr	r1, [pc, #144]	; (5214 <pinctrl_configure_pins+0x704>)
    5184:	4822      	ldr	r0, [pc, #136]	; (5210 <pinctrl_configure_pins+0x700>)
    5186:	f004 fe76 	bl	9e76 <assert_print>
    518a:	f240 2129 	movw	r1, #553	; 0x229
    518e:	4650      	mov	r0, sl
    5190:	f004 fe6a 	bl	9e68 <assert_post_action>
    5194:	e7d6      	b.n	5144 <pinctrl_configure_pins+0x634>
        case 0: return NRF_P0;
    5196:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    519a:	e000      	b.n	519e <pinctrl_configure_pins+0x68e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    519c:	4a1e      	ldr	r2, [pc, #120]	; (5218 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    519e:	2301      	movs	r3, #1
    51a0:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    51a4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    51a8:	2201      	movs	r2, #1
    51aa:	4611      	mov	r1, r2
    51ac:	f855 0008 	ldr.w	r0, [r5, r8]
    51b0:	f7ff fc4e 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    51b4:	e500      	b.n	4bb8 <pinctrl_configure_pins+0xa8>
    switch (port)
    51b6:	ea5f 1359 	movs.w	r3, r9, lsr #5
    51ba:	d01f      	beq.n	51fc <pinctrl_configure_pins+0x6ec>
    51bc:	b30b      	cbz	r3, 5202 <pinctrl_configure_pins+0x6f2>
            mask = P1_FEATURE_PINS_PRESENT;
    51be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    51c2:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    51c6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    51c8:	f013 0f01 	tst.w	r3, #1
    51cc:	d026      	beq.n	521c <pinctrl_configure_pins+0x70c>
    *p_pin = pin_number & 0x1F;
    51ce:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    51d2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    51d6:	d030      	beq.n	523a <pinctrl_configure_pins+0x72a>
    51d8:	bb93      	cbnz	r3, 5240 <pinctrl_configure_pins+0x730>
            NRFX_ASSERT(0);
    51da:	f8df 902c 	ldr.w	r9, [pc, #44]	; 5208 <pinctrl_configure_pins+0x6f8>
    51de:	f240 232e 	movw	r3, #558	; 0x22e
    51e2:	464a      	mov	r2, r9
    51e4:	4909      	ldr	r1, [pc, #36]	; (520c <pinctrl_configure_pins+0x6fc>)
    51e6:	480a      	ldr	r0, [pc, #40]	; (5210 <pinctrl_configure_pins+0x700>)
    51e8:	f004 fe45 	bl	9e76 <assert_print>
    51ec:	f240 212e 	movw	r1, #558	; 0x22e
    51f0:	4648      	mov	r0, r9
    51f2:	f004 fe39 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    51f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    51fa:	e022      	b.n	5242 <pinctrl_configure_pins+0x732>
            mask = P0_FEATURE_PINS_PRESENT;
    51fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5200:	e7df      	b.n	51c2 <pinctrl_configure_pins+0x6b2>
    switch (port)
    5202:	2300      	movs	r3, #0
    5204:	e7dd      	b.n	51c2 <pinctrl_configure_pins+0x6b2>
    5206:	bf00      	nop
    5208:	0000c2b8 	.word	0x0000c2b8
    520c:	0000b83c 	.word	0x0000b83c
    5210:	0000b180 	.word	0x0000b180
    5214:	0000c2ec 	.word	0x0000c2ec
    5218:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    521c:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 540c <pinctrl_configure_pins+0x8fc>
    5220:	f240 2329 	movw	r3, #553	; 0x229
    5224:	4652      	mov	r2, sl
    5226:	497a      	ldr	r1, [pc, #488]	; (5410 <pinctrl_configure_pins+0x900>)
    5228:	487a      	ldr	r0, [pc, #488]	; (5414 <pinctrl_configure_pins+0x904>)
    522a:	f004 fe24 	bl	9e76 <assert_print>
    522e:	f240 2129 	movw	r1, #553	; 0x229
    5232:	4650      	mov	r0, sl
    5234:	f004 fe18 	bl	9e68 <assert_post_action>
    5238:	e7c9      	b.n	51ce <pinctrl_configure_pins+0x6be>
        case 0: return NRF_P0;
    523a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    523e:	e000      	b.n	5242 <pinctrl_configure_pins+0x732>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5240:	4a75      	ldr	r2, [pc, #468]	; (5418 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5242:	2301      	movs	r3, #1
    5244:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    5248:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    524c:	e7ac      	b.n	51a8 <pinctrl_configure_pins+0x698>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    524e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5252:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5256:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    525a:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    525e:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    5262:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5266:	d144      	bne.n	52f2 <pinctrl_configure_pins+0x7e2>
    switch (port)
    5268:	ea5f 1359 	movs.w	r3, r9, lsr #5
    526c:	d01f      	beq.n	52ae <pinctrl_configure_pins+0x79e>
    526e:	b10b      	cbz	r3, 5274 <pinctrl_configure_pins+0x764>
            mask = P1_FEATURE_PINS_PRESENT;
    5270:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5274:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5278:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    527a:	f012 0f01 	tst.w	r2, #1
    527e:	d019      	beq.n	52b4 <pinctrl_configure_pins+0x7a4>
    *p_pin = pin_number & 0x1F;
    5280:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5284:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5288:	d023      	beq.n	52d2 <pinctrl_configure_pins+0x7c2>
    528a:	bb2b      	cbnz	r3, 52d8 <pinctrl_configure_pins+0x7c8>
            NRFX_ASSERT(0);
    528c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 540c <pinctrl_configure_pins+0x8fc>
    5290:	f240 232e 	movw	r3, #558	; 0x22e
    5294:	464a      	mov	r2, r9
    5296:	4961      	ldr	r1, [pc, #388]	; (541c <pinctrl_configure_pins+0x90c>)
    5298:	485e      	ldr	r0, [pc, #376]	; (5414 <pinctrl_configure_pins+0x904>)
    529a:	f004 fdec 	bl	9e76 <assert_print>
    529e:	f240 212e 	movw	r1, #558	; 0x22e
    52a2:	4648      	mov	r0, r9
    52a4:	f004 fde0 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    52a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    52ac:	e015      	b.n	52da <pinctrl_configure_pins+0x7ca>
            mask = P0_FEATURE_PINS_PRESENT;
    52ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    52b2:	e7df      	b.n	5274 <pinctrl_configure_pins+0x764>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    52b4:	f8df a154 	ldr.w	sl, [pc, #340]	; 540c <pinctrl_configure_pins+0x8fc>
    52b8:	f240 2329 	movw	r3, #553	; 0x229
    52bc:	4652      	mov	r2, sl
    52be:	4954      	ldr	r1, [pc, #336]	; (5410 <pinctrl_configure_pins+0x900>)
    52c0:	4854      	ldr	r0, [pc, #336]	; (5414 <pinctrl_configure_pins+0x904>)
    52c2:	f004 fdd8 	bl	9e76 <assert_print>
    52c6:	f240 2129 	movw	r1, #553	; 0x229
    52ca:	4650      	mov	r0, sl
    52cc:	f004 fdcc 	bl	9e68 <assert_post_action>
    52d0:	e7d6      	b.n	5280 <pinctrl_configure_pins+0x770>
        case 0: return NRF_P0;
    52d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    52d6:	e000      	b.n	52da <pinctrl_configure_pins+0x7ca>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    52d8:	4a4f      	ldr	r2, [pc, #316]	; (5418 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    52da:	2301      	movs	r3, #1
    52dc:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    52e0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    52e4:	2201      	movs	r2, #1
    52e6:	4611      	mov	r1, r2
    52e8:	f855 0008 	ldr.w	r0, [r5, r8]
    52ec:	f7ff fbb0 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    52f0:	e462      	b.n	4bb8 <pinctrl_configure_pins+0xa8>
    switch (port)
    52f2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    52f6:	d01f      	beq.n	5338 <pinctrl_configure_pins+0x828>
    52f8:	b30b      	cbz	r3, 533e <pinctrl_configure_pins+0x82e>
            mask = P1_FEATURE_PINS_PRESENT;
    52fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    52fe:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5302:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5304:	f013 0f01 	tst.w	r3, #1
    5308:	d01b      	beq.n	5342 <pinctrl_configure_pins+0x832>
    *p_pin = pin_number & 0x1F;
    530a:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    530e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5312:	d025      	beq.n	5360 <pinctrl_configure_pins+0x850>
    5314:	bb3b      	cbnz	r3, 5366 <pinctrl_configure_pins+0x856>
            NRFX_ASSERT(0);
    5316:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 540c <pinctrl_configure_pins+0x8fc>
    531a:	f240 232e 	movw	r3, #558	; 0x22e
    531e:	464a      	mov	r2, r9
    5320:	493e      	ldr	r1, [pc, #248]	; (541c <pinctrl_configure_pins+0x90c>)
    5322:	483c      	ldr	r0, [pc, #240]	; (5414 <pinctrl_configure_pins+0x904>)
    5324:	f004 fda7 	bl	9e76 <assert_print>
    5328:	f240 212e 	movw	r1, #558	; 0x22e
    532c:	4648      	mov	r0, r9
    532e:	f004 fd9b 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    5332:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5336:	e017      	b.n	5368 <pinctrl_configure_pins+0x858>
            mask = P0_FEATURE_PINS_PRESENT;
    5338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    533c:	e7df      	b.n	52fe <pinctrl_configure_pins+0x7ee>
    switch (port)
    533e:	2300      	movs	r3, #0
    5340:	e7dd      	b.n	52fe <pinctrl_configure_pins+0x7ee>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5342:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 540c <pinctrl_configure_pins+0x8fc>
    5346:	f240 2329 	movw	r3, #553	; 0x229
    534a:	4652      	mov	r2, sl
    534c:	4930      	ldr	r1, [pc, #192]	; (5410 <pinctrl_configure_pins+0x900>)
    534e:	4831      	ldr	r0, [pc, #196]	; (5414 <pinctrl_configure_pins+0x904>)
    5350:	f004 fd91 	bl	9e76 <assert_print>
    5354:	f240 2129 	movw	r1, #553	; 0x229
    5358:	4650      	mov	r0, sl
    535a:	f004 fd85 	bl	9e68 <assert_post_action>
    535e:	e7d4      	b.n	530a <pinctrl_configure_pins+0x7fa>
        case 0: return NRF_P0;
    5360:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5364:	e000      	b.n	5368 <pinctrl_configure_pins+0x858>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5366:	4a2c      	ldr	r2, [pc, #176]	; (5418 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5368:	2301      	movs	r3, #1
    536a:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    536e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    5372:	e7b7      	b.n	52e4 <pinctrl_configure_pins+0x7d4>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    5374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5378:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    537c:	2201      	movs	r2, #1
    537e:	2100      	movs	r1, #0
    5380:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5384:	f7ff fb64 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5388:	e416      	b.n	4bb8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    538a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    538e:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5392:	2201      	movs	r2, #1
    5394:	2100      	movs	r1, #0
    5396:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    539a:	f7ff fb59 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    539e:	e40b      	b.n	4bb8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    53a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53a4:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    53a8:	2201      	movs	r2, #1
    53aa:	2100      	movs	r1, #0
    53ac:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    53b0:	f7ff fb4e 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    53b4:	e400      	b.n	4bb8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    53b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53ba:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    53be:	2201      	movs	r2, #1
    53c0:	2100      	movs	r1, #0
    53c2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    53c6:	f7ff fb43 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    53ca:	f7ff bbf5 	b.w	4bb8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    53ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53d2:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    53d6:	2201      	movs	r2, #1
    53d8:	2100      	movs	r1, #0
    53da:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    53de:	f7ff fb37 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    53e2:	f7ff bbe9 	b.w	4bb8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    53e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53ea:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    53ee:	2201      	movs	r2, #1
    53f0:	2100      	movs	r1, #0
    53f2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    53f6:	f7ff fb2b 	bl	4a50 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    53fa:	f7ff bbdd 	b.w	4bb8 <pinctrl_configure_pins+0xa8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    53fe:	2000      	movs	r0, #0
    5400:	e001      	b.n	5406 <pinctrl_configure_pins+0x8f6>
		switch (NRF_GET_FUN(pins[i])) {
    5402:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    5406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    540a:	bf00      	nop
    540c:	0000c2b8 	.word	0x0000c2b8
    5410:	0000c2ec 	.word	0x0000c2ec
    5414:	0000b180 	.word	0x0000b180
    5418:	50000300 	.word	0x50000300
    541c:	0000b83c 	.word	0x0000b83c

00005420 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5420:	b510      	push	{r4, lr}
    5422:	b084      	sub	sp, #16
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    5424:	f7fc fd02 	bl	1e2c <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    5428:	4b06      	ldr	r3, [pc, #24]	; (5444 <k_sys_fatal_error_handler+0x24>)
    542a:	9302      	str	r3, [sp, #8]
    542c:	2400      	movs	r4, #0
    542e:	9401      	str	r4, [sp, #4]
    5430:	9400      	str	r4, [sp, #0]
    5432:	4623      	mov	r3, r4
    5434:	2201      	movs	r2, #1
    5436:	4904      	ldr	r1, [pc, #16]	; (5448 <k_sys_fatal_error_handler+0x28>)
    5438:	4620      	mov	r0, r4
    543a:	f005 fa9d 	bl	a978 <z_log_msg2_runtime_create>
		sys_arch_reboot(0);
    543e:	4620      	mov	r0, r4
    5440:	f7fe fb1e 	bl	3a80 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    5444:	0000c418 	.word	0x0000c418
    5448:	0000af8c 	.word	0x0000af8c

0000544c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    544c:	4b02      	ldr	r3, [pc, #8]	; (5458 <nvmc_wait+0xc>)
    544e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5452:	2b00      	cmp	r3, #0
    5454:	d0fa      	beq.n	544c <nvmc_wait>
}
    5456:	4770      	bx	lr
    5458:	4001e000 	.word	0x4001e000

0000545c <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    545c:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    545e:	4b03      	ldr	r3, [pc, #12]	; (546c <nvmc_config+0x10>)
    5460:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    5464:	f7ff fff2 	bl	544c <nvmc_wait>
}
    5468:	bd08      	pop	{r3, pc}
    546a:	bf00      	nop
    546c:	4001e000 	.word	0x4001e000

00005470 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    5470:	4b01      	ldr	r3, [pc, #4]	; (5478 <SystemCoreClockUpdate+0x8>)
    5472:	4a02      	ldr	r2, [pc, #8]	; (547c <SystemCoreClockUpdate+0xc>)
    5474:	601a      	str	r2, [r3, #0]
}
    5476:	4770      	bx	lr
    5478:	20004058 	.word	0x20004058
    547c:	03d09000 	.word	0x03d09000

00005480 <SystemInit>:

void SystemInit(void)
{
    5480:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    5482:	f005 fa96 	bl	a9b2 <nrf52_errata_36>
    5486:	b140      	cbz	r0, 549a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    5488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    548c:	2200      	movs	r2, #0
    548e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    5492:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    5496:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    549a:	f005 fa94 	bl	a9c6 <nrf52_errata_66>
    549e:	2800      	cmp	r0, #0
    54a0:	d046      	beq.n	5530 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    54a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    54a6:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    54aa:	4b59      	ldr	r3, [pc, #356]	; (5610 <SystemInit+0x190>)
    54ac:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    54b0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    54b4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    54b8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    54bc:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    54c0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    54c4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    54c8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    54cc:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    54d0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    54d4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    54d8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    54dc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    54e0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    54e4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    54e8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    54ec:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    54f0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    54f4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    54f8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    54fc:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    5500:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    5504:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5508:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    550c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    5510:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    5514:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5518:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    551c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    5520:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    5524:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5528:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    552c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    5530:	f005 fa53 	bl	a9da <nrf52_errata_98>
    5534:	b118      	cbz	r0, 553e <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    5536:	4b37      	ldr	r3, [pc, #220]	; (5614 <SystemInit+0x194>)
    5538:	4a37      	ldr	r2, [pc, #220]	; (5618 <SystemInit+0x198>)
    553a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    553e:	f005 fa5f 	bl	aa00 <nrf52_errata_103>
    5542:	b118      	cbz	r0, 554c <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5544:	4b35      	ldr	r3, [pc, #212]	; (561c <SystemInit+0x19c>)
    5546:	22fb      	movs	r2, #251	; 0xfb
    5548:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    554c:	f005 fa6b 	bl	aa26 <nrf52_errata_115>
    5550:	b170      	cbz	r0, 5570 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5552:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5556:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    555a:	f023 030f 	bic.w	r3, r3, #15
    555e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5562:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    5566:	f002 020f 	and.w	r2, r2, #15
    556a:	4313      	orrs	r3, r2
    556c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5570:	f005 fa6c 	bl	aa4c <nrf52_errata_120>
    5574:	b120      	cbz	r0, 5580 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    5576:	4b2a      	ldr	r3, [pc, #168]	; (5620 <SystemInit+0x1a0>)
    5578:	f44f 7200 	mov.w	r2, #512	; 0x200
    557c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    5580:	f005 fa77 	bl	aa72 <nrf52_errata_136>
    5584:	b160      	cbz	r0, 55a0 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    558a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    558e:	f013 0f01 	tst.w	r3, #1
    5592:	d005      	beq.n	55a0 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5598:	f06f 0201 	mvn.w	r2, #1
    559c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    55a0:	f005 fa71 	bl	aa86 <nrf52_configuration_249>
    55a4:	b138      	cbz	r0, 55b6 <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    55a6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    55aa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    55ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    55b2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    55b6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    55ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    55be:	2b00      	cmp	r3, #0
    55c0:	db08      	blt.n	55d4 <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    55c2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    55c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    55ca:	2b00      	cmp	r3, #0
    55cc:	db02      	blt.n	55d4 <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    55ce:	f7ff ff4f 	bl	5470 <SystemCoreClockUpdate>
}
    55d2:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    55d4:	2001      	movs	r0, #1
    55d6:	f7ff ff41 	bl	545c <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    55da:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    55de:	2512      	movs	r5, #18
    55e0:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    55e4:	f7ff ff32 	bl	544c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    55e8:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    55ec:	f7ff ff2e 	bl	544c <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    55f0:	2000      	movs	r0, #0
    55f2:	f7ff ff33 	bl	545c <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    55f6:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    55fa:	490a      	ldr	r1, [pc, #40]	; (5624 <SystemInit+0x1a4>)
    55fc:	68ca      	ldr	r2, [r1, #12]
    55fe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5602:	4b09      	ldr	r3, [pc, #36]	; (5628 <SystemInit+0x1a8>)
    5604:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5606:	60cb      	str	r3, [r1, #12]
    5608:	f3bf 8f4f 	dsb	sy
    __NOP();
    560c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    560e:	e7fd      	b.n	560c <SystemInit+0x18c>
    5610:	4000c000 	.word	0x4000c000
    5614:	40005000 	.word	0x40005000
    5618:	00038148 	.word	0x00038148
    561c:	4000f000 	.word	0x4000f000
    5620:	40029000 	.word	0x40029000
    5624:	e000ed00 	.word	0xe000ed00
    5628:	05fa0004 	.word	0x05fa0004

0000562c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    562c:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    562e:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    5630:	fab4 f384 	clz	r3, r4
    5634:	f1c3 031f 	rsb	r3, r3, #31
    5638:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    563c:	2b00      	cmp	r3, #0
    563e:	db16      	blt.n	566e <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    5640:	2201      	movs	r2, #1
    5642:	fa02 f303 	lsl.w	r3, r2, r3
    5646:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    564a:	f3bf 8f5b 	dmb	ish
    564e:	e850 2f00 	ldrex	r2, [r0]
    5652:	42a2      	cmp	r2, r4
    5654:	d104      	bne.n	5660 <nrfx_flag32_alloc+0x34>
    5656:	e840 3e00 	strex	lr, r3, [r0]
    565a:	f1be 0f00 	cmp.w	lr, #0
    565e:	d1f6      	bne.n	564e <nrfx_flag32_alloc+0x22>
    5660:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5664:	d1e3      	bne.n	562e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    5666:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    566a:	4802      	ldr	r0, [pc, #8]	; (5674 <nrfx_flag32_alloc+0x48>)
}
    566c:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    566e:	4802      	ldr	r0, [pc, #8]	; (5678 <nrfx_flag32_alloc+0x4c>)
    5670:	e7fc      	b.n	566c <nrfx_flag32_alloc+0x40>
    5672:	bf00      	nop
    5674:	0bad0000 	.word	0x0bad0000
    5678:	0bad0002 	.word	0x0bad0002

0000567c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    567c:	6803      	ldr	r3, [r0, #0]
    567e:	40cb      	lsrs	r3, r1
    5680:	f013 0f01 	tst.w	r3, #1
    5684:	d115      	bne.n	56b2 <nrfx_flag32_free+0x36>
{
    5686:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    5688:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    568a:	2301      	movs	r3, #1
    568c:	408b      	lsls	r3, r1
    568e:	4313      	orrs	r3, r2
    5690:	f3bf 8f5b 	dmb	ish
    5694:	e850 cf00 	ldrex	ip, [r0]
    5698:	4594      	cmp	ip, r2
    569a:	d104      	bne.n	56a6 <nrfx_flag32_free+0x2a>
    569c:	e840 3e00 	strex	lr, r3, [r0]
    56a0:	f1be 0f00 	cmp.w	lr, #0
    56a4:	d1f6      	bne.n	5694 <nrfx_flag32_free+0x18>
    56a6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    56aa:	d1ed      	bne.n	5688 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    56ac:	4802      	ldr	r0, [pc, #8]	; (56b8 <nrfx_flag32_free+0x3c>)
}
    56ae:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    56b2:	4802      	ldr	r0, [pc, #8]	; (56bc <nrfx_flag32_free+0x40>)
}
    56b4:	4770      	bx	lr
    56b6:	bf00      	nop
    56b8:	0bad0000 	.word	0x0bad0000
    56bc:	0bad0004 	.word	0x0bad0004

000056c0 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    56c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    56c2:	b083      	sub	sp, #12
    switch (domain)
    56c4:	4605      	mov	r5, r0
    56c6:	b168      	cbz	r0, 56e4 <clock_stop+0x24>
    56c8:	2801      	cmp	r0, #1
    56ca:	d020      	beq.n	570e <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    56cc:	4c3d      	ldr	r4, [pc, #244]	; (57c4 <clock_stop+0x104>)
    56ce:	23d8      	movs	r3, #216	; 0xd8
    56d0:	4622      	mov	r2, r4
    56d2:	493d      	ldr	r1, [pc, #244]	; (57c8 <clock_stop+0x108>)
    56d4:	483d      	ldr	r0, [pc, #244]	; (57cc <clock_stop+0x10c>)
    56d6:	f004 fbce 	bl	9e76 <assert_print>
    56da:	21d8      	movs	r1, #216	; 0xd8
    56dc:	4620      	mov	r0, r4
    56de:	f004 fbc3 	bl	9e68 <assert_post_action>
            return;
    56e2:	e068      	b.n	57b6 <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    56e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    56e8:	2202      	movs	r2, #2
    56ea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    56ee:	2200      	movs	r2, #0
    56f0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    56f4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    56f8:	2201      	movs	r2, #1
    56fa:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    56fc:	2301      	movs	r3, #1
    56fe:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5702:	429d      	cmp	r5, r3
    5704:	d00f      	beq.n	5726 <clock_stop+0x66>
    5706:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5708:	f242 7410 	movw	r4, #10000	; 0x2710
    570c:	e029      	b.n	5762 <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    570e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5712:	2201      	movs	r2, #1
    5714:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5718:	2100      	movs	r1, #0
    571a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    571e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5722:	605a      	str	r2, [r3, #4]
}
    5724:	e7ea      	b.n	56fc <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5726:	f10d 0607 	add.w	r6, sp, #7
    572a:	e7ed      	b.n	5708 <clock_stop+0x48>
            if (p_clk_src != NULL)
    572c:	b136      	cbz	r6, 573c <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    572e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5732:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5736:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    573a:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    573c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5740:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    5744:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5748:	d12f      	bne.n	57aa <clock_stop+0xea>
    return false;
    574a:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    574c:	b38b      	cbz	r3, 57b2 <clock_stop+0xf2>
    574e:	b11e      	cbz	r6, 5758 <clock_stop+0x98>
    5750:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5754:	2b01      	cmp	r3, #1
    5756:	d12c      	bne.n	57b2 <clock_stop+0xf2>
    5758:	2001      	movs	r0, #1
    575a:	f005 f9a7 	bl	aaac <nrfx_busy_wait>
    575e:	3c01      	subs	r4, #1
    5760:	d027      	beq.n	57b2 <clock_stop+0xf2>
    switch (domain)
    5762:	2d00      	cmp	r5, #0
    5764:	d0e2      	beq.n	572c <clock_stop+0x6c>
    5766:	2d01      	cmp	r5, #1
    5768:	d00e      	beq.n	5788 <clock_stop+0xc8>
            NRFX_ASSERT(0);
    576a:	4f19      	ldr	r7, [pc, #100]	; (57d0 <clock_stop+0x110>)
    576c:	f44f 734f 	mov.w	r3, #828	; 0x33c
    5770:	463a      	mov	r2, r7
    5772:	4915      	ldr	r1, [pc, #84]	; (57c8 <clock_stop+0x108>)
    5774:	4815      	ldr	r0, [pc, #84]	; (57cc <clock_stop+0x10c>)
    5776:	f004 fb7e 	bl	9e76 <assert_print>
    577a:	f44f 714f 	mov.w	r1, #828	; 0x33c
    577e:	4638      	mov	r0, r7
    5780:	f004 fb72 	bl	9e68 <assert_post_action>
            return false;
    5784:	2300      	movs	r3, #0
    5786:	e7e1      	b.n	574c <clock_stop+0x8c>
            if (p_clk_src != NULL)
    5788:	b136      	cbz	r6, 5798 <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    578a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    578e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    5792:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5796:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5798:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    579c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    57a0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    57a4:	d103      	bne.n	57ae <clock_stop+0xee>
    return false;
    57a6:	2300      	movs	r3, #0
    57a8:	e7d0      	b.n	574c <clock_stop+0x8c>
                return true;
    57aa:	2301      	movs	r3, #1
    57ac:	e7ce      	b.n	574c <clock_stop+0x8c>
                return true;
    57ae:	2301      	movs	r3, #1
    57b0:	e7cc      	b.n	574c <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    57b2:	2d01      	cmp	r5, #1
    57b4:	d001      	beq.n	57ba <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    57b6:	b003      	add	sp, #12
    57b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    57ba:	4b06      	ldr	r3, [pc, #24]	; (57d4 <clock_stop+0x114>)
    57bc:	2200      	movs	r2, #0
    57be:	715a      	strb	r2, [r3, #5]
    57c0:	e7f9      	b.n	57b6 <clock_stop+0xf6>
    57c2:	bf00      	nop
    57c4:	0000c438 	.word	0x0000c438
    57c8:	0000b83c 	.word	0x0000b83c
    57cc:	0000b180 	.word	0x0000b180
    57d0:	0000c478 	.word	0x0000c478
    57d4:	20004a68 	.word	0x20004a68

000057d8 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    57d8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    57da:	4604      	mov	r4, r0
    57dc:	b150      	cbz	r0, 57f4 <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    57de:	4b0d      	ldr	r3, [pc, #52]	; (5814 <nrfx_clock_init+0x3c>)
    57e0:	791b      	ldrb	r3, [r3, #4]
    57e2:	b9ab      	cbnz	r3, 5810 <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    57e4:	4b0b      	ldr	r3, [pc, #44]	; (5814 <nrfx_clock_init+0x3c>)
    57e6:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    57e8:	2201      	movs	r2, #1
    57ea:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    57ec:	2200      	movs	r2, #0
    57ee:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    57f0:	4809      	ldr	r0, [pc, #36]	; (5818 <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    57f2:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    57f4:	4d09      	ldr	r5, [pc, #36]	; (581c <nrfx_clock_init+0x44>)
    57f6:	f240 1315 	movw	r3, #277	; 0x115
    57fa:	462a      	mov	r2, r5
    57fc:	4908      	ldr	r1, [pc, #32]	; (5820 <nrfx_clock_init+0x48>)
    57fe:	4809      	ldr	r0, [pc, #36]	; (5824 <nrfx_clock_init+0x4c>)
    5800:	f004 fb39 	bl	9e76 <assert_print>
    5804:	f240 1115 	movw	r1, #277	; 0x115
    5808:	4628      	mov	r0, r5
    580a:	f004 fb2d 	bl	9e68 <assert_post_action>
    580e:	e7e6      	b.n	57de <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5810:	4805      	ldr	r0, [pc, #20]	; (5828 <nrfx_clock_init+0x50>)
    return err_code;
    5812:	e7ee      	b.n	57f2 <nrfx_clock_init+0x1a>
    5814:	20004a68 	.word	0x20004a68
    5818:	0bad0000 	.word	0x0bad0000
    581c:	0000c438 	.word	0x0000c438
    5820:	0000c4ac 	.word	0x0000c4ac
    5824:	0000b180 	.word	0x0000b180
    5828:	0bad000c 	.word	0x0bad000c

0000582c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    582c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    582e:	4b0f      	ldr	r3, [pc, #60]	; (586c <nrfx_clock_enable+0x40>)
    5830:	791b      	ldrb	r3, [r3, #4]
    5832:	b153      	cbz	r3, 584a <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5834:	2000      	movs	r0, #0
    5836:	f7fd fa31 	bl	2c9c <arch_irq_is_enabled>
    583a:	b1a0      	cbz	r0, 5866 <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    583c:	f005 f93a 	bl	aab4 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5844:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    5848:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    584a:	4c09      	ldr	r4, [pc, #36]	; (5870 <nrfx_clock_enable+0x44>)
    584c:	f44f 7397 	mov.w	r3, #302	; 0x12e
    5850:	4622      	mov	r2, r4
    5852:	4908      	ldr	r1, [pc, #32]	; (5874 <nrfx_clock_enable+0x48>)
    5854:	4808      	ldr	r0, [pc, #32]	; (5878 <nrfx_clock_enable+0x4c>)
    5856:	f004 fb0e 	bl	9e76 <assert_print>
    585a:	f44f 7197 	mov.w	r1, #302	; 0x12e
    585e:	4620      	mov	r0, r4
    5860:	f004 fb02 	bl	9e68 <assert_post_action>
    5864:	e7e6      	b.n	5834 <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5866:	f7fd fa0b 	bl	2c80 <arch_irq_enable>
    586a:	e7e7      	b.n	583c <nrfx_clock_enable+0x10>
    586c:	20004a68 	.word	0x20004a68
    5870:	0000c438 	.word	0x0000c438
    5874:	0000c4bc 	.word	0x0000c4bc
    5878:	0000b180 	.word	0x0000b180

0000587c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    587c:	b530      	push	{r4, r5, lr}
    587e:	b083      	sub	sp, #12
    5880:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5882:	4b34      	ldr	r3, [pc, #208]	; (5954 <nrfx_clock_start+0xd8>)
    5884:	791b      	ldrb	r3, [r3, #4]
    5886:	b183      	cbz	r3, 58aa <nrfx_clock_start+0x2e>
    switch (domain)
    5888:	b1ec      	cbz	r4, 58c6 <nrfx_clock_start+0x4a>
    588a:	2c01      	cmp	r4, #1
    588c:	d055      	beq.n	593a <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    588e:	4c32      	ldr	r4, [pc, #200]	; (5958 <nrfx_clock_start+0xdc>)
    5890:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    5894:	4622      	mov	r2, r4
    5896:	4931      	ldr	r1, [pc, #196]	; (595c <nrfx_clock_start+0xe0>)
    5898:	4831      	ldr	r0, [pc, #196]	; (5960 <nrfx_clock_start+0xe4>)
    589a:	f004 faec 	bl	9e76 <assert_print>
    589e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    58a2:	4620      	mov	r0, r4
    58a4:	f004 fae0 	bl	9e68 <assert_post_action>
            break;
    }
}
    58a8:	e052      	b.n	5950 <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    58aa:	4d2b      	ldr	r5, [pc, #172]	; (5958 <nrfx_clock_start+0xdc>)
    58ac:	f44f 73b4 	mov.w	r3, #360	; 0x168
    58b0:	462a      	mov	r2, r5
    58b2:	492c      	ldr	r1, [pc, #176]	; (5964 <nrfx_clock_start+0xe8>)
    58b4:	482a      	ldr	r0, [pc, #168]	; (5960 <nrfx_clock_start+0xe4>)
    58b6:	f004 fade 	bl	9e76 <assert_print>
    58ba:	f44f 71b4 	mov.w	r1, #360	; 0x168
    58be:	4628      	mov	r0, r5
    58c0:	f004 fad2 	bl	9e68 <assert_post_action>
    58c4:	e7e0      	b.n	5888 <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    58c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    58ca:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    58ce:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    58d2:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    58d4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    58d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    58dc:	d117      	bne.n	590e <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    58de:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    58e2:	f013 0f01 	tst.w	r3, #1
    58e6:	d116      	bne.n	5916 <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    58e8:	f005 f8e4 	bl	aab4 <clock_initial_lfclksrc_get>
    58ec:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    58ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58f2:	9a01      	ldr	r2, [sp, #4]
    58f4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58f8:	2200      	movs	r2, #0
    58fa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    58fe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    5902:	2202      	movs	r2, #2
    5904:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5908:	2201      	movs	r2, #1
    590a:	609a      	str	r2, [r3, #8]
}
    590c:	e020      	b.n	5950 <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    590e:	a801      	add	r0, sp, #4
    5910:	f005 f8d2 	bl	aab8 <clock_lfclksrc_tweak>
    5914:	e7eb      	b.n	58ee <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    591a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    591e:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    5922:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    5924:	a801      	add	r0, sp, #4
    5926:	f005 f8c7 	bl	aab8 <clock_lfclksrc_tweak>
    592a:	2800      	cmp	r0, #0
    592c:	d0df      	beq.n	58ee <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    592e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5932:	2202      	movs	r2, #2
    5934:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    5938:	e00a      	b.n	5950 <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    593a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    593e:	2200      	movs	r2, #0
    5940:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5944:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    5948:	2201      	movs	r2, #1
    594a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    594e:	601a      	str	r2, [r3, #0]
}
    5950:	b003      	add	sp, #12
    5952:	bd30      	pop	{r4, r5, pc}
    5954:	20004a68 	.word	0x20004a68
    5958:	0000c438 	.word	0x0000c438
    595c:	0000b83c 	.word	0x0000b83c
    5960:	0000b180 	.word	0x0000b180
    5964:	0000c4bc 	.word	0x0000c4bc

00005968 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    5968:	b538      	push	{r3, r4, r5, lr}
    596a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    596c:	4b0a      	ldr	r3, [pc, #40]	; (5998 <nrfx_clock_stop+0x30>)
    596e:	791b      	ldrb	r3, [r3, #4]
    5970:	b11b      	cbz	r3, 597a <nrfx_clock_stop+0x12>
    clock_stop(domain);
    5972:	4620      	mov	r0, r4
    5974:	f7ff fea4 	bl	56c0 <clock_stop>
}
    5978:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    597a:	4d08      	ldr	r5, [pc, #32]	; (599c <nrfx_clock_stop+0x34>)
    597c:	f240 13ad 	movw	r3, #429	; 0x1ad
    5980:	462a      	mov	r2, r5
    5982:	4907      	ldr	r1, [pc, #28]	; (59a0 <nrfx_clock_stop+0x38>)
    5984:	4807      	ldr	r0, [pc, #28]	; (59a4 <nrfx_clock_stop+0x3c>)
    5986:	f004 fa76 	bl	9e76 <assert_print>
    598a:	f240 11ad 	movw	r1, #429	; 0x1ad
    598e:	4628      	mov	r0, r5
    5990:	f004 fa6a 	bl	9e68 <assert_post_action>
    5994:	e7ed      	b.n	5972 <nrfx_clock_stop+0xa>
    5996:	bf00      	nop
    5998:	20004a68 	.word	0x20004a68
    599c:	0000c438 	.word	0x0000c438
    59a0:	0000c4bc 	.word	0x0000c4bc
    59a4:	0000b180 	.word	0x0000b180

000059a8 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    59a8:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    59aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    59b2:	b18b      	cbz	r3, 59d8 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    59b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59b8:	2200      	movs	r2, #0
    59ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    59be:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    59c2:	2201      	movs	r2, #1
    59c4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    59c8:	4b15      	ldr	r3, [pc, #84]	; (5a20 <nrfx_power_clock_irq_handler+0x78>)
    59ca:	795b      	ldrb	r3, [r3, #5]
    59cc:	b923      	cbnz	r3, 59d8 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    59ce:	4b14      	ldr	r3, [pc, #80]	; (5a20 <nrfx_power_clock_irq_handler+0x78>)
    59d0:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    59d2:	681b      	ldr	r3, [r3, #0]
    59d4:	2000      	movs	r0, #0
    59d6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    59d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59dc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    59e0:	b19b      	cbz	r3, 5a0a <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    59e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59e6:	2200      	movs	r2, #0
    59e8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    59ec:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    59f0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    59f4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    59f8:	f012 0f03 	tst.w	r2, #3
    59fc:	d106      	bne.n	5a0c <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    59fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5a02:	2201      	movs	r2, #1
    5a04:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5a08:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5a0a:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    5a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5a10:	2202      	movs	r2, #2
    5a12:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5a16:	4b02      	ldr	r3, [pc, #8]	; (5a20 <nrfx_power_clock_irq_handler+0x78>)
    5a18:	681b      	ldr	r3, [r3, #0]
    5a1a:	2001      	movs	r0, #1
    5a1c:	4798      	blx	r3
}
    5a1e:	e7f4      	b.n	5a0a <nrfx_power_clock_irq_handler+0x62>
    5a20:	20004a68 	.word	0x20004a68

00005a24 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5a24:	3008      	adds	r0, #8
    5a26:	4b03      	ldr	r3, [pc, #12]	; (5a34 <pin_in_use+0x10>)
    5a28:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5a2c:	f000 0001 	and.w	r0, r0, #1
    5a30:	4770      	bx	lr
    5a32:	bf00      	nop
    5a34:	2000405c 	.word	0x2000405c

00005a38 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5a38:	3008      	adds	r0, #8
    5a3a:	4b03      	ldr	r3, [pc, #12]	; (5a48 <pin_in_use_by_te+0x10>)
    5a3c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5a40:	f3c0 1040 	ubfx	r0, r0, #5, #1
    5a44:	4770      	bx	lr
    5a46:	bf00      	nop
    5a48:	2000405c 	.word	0x2000405c

00005a4c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    5a4c:	3008      	adds	r0, #8
    5a4e:	4b04      	ldr	r3, [pc, #16]	; (5a60 <pin_has_trigger+0x14>)
    5a50:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5a54:	f010 001c 	ands.w	r0, r0, #28
    5a58:	bf18      	it	ne
    5a5a:	2001      	movne	r0, #1
    5a5c:	4770      	bx	lr
    5a5e:	bf00      	nop
    5a60:	2000405c 	.word	0x2000405c

00005a64 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5a64:	3008      	adds	r0, #8
    5a66:	4b03      	ldr	r3, [pc, #12]	; (5a74 <pin_is_output+0x10>)
    5a68:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5a6c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    5a70:	4770      	bx	lr
    5a72:	bf00      	nop
    5a74:	2000405c 	.word	0x2000405c

00005a78 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5a78:	3008      	adds	r0, #8
    5a7a:	4b02      	ldr	r3, [pc, #8]	; (5a84 <pin_te_get+0xc>)
    5a7c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5a80:	0b40      	lsrs	r0, r0, #13
    5a82:	4770      	bx	lr
    5a84:	2000405c 	.word	0x2000405c

00005a88 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5a88:	2200      	movs	r2, #0
    5a8a:	e004      	b.n	5a96 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5a90:	4283      	cmp	r3, r0
    5a92:	d00f      	beq.n	5ab4 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5a94:	3201      	adds	r2, #1
    5a96:	2a2f      	cmp	r2, #47	; 0x2f
    5a98:	d80a      	bhi.n	5ab0 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5a9a:	f102 0308 	add.w	r3, r2, #8
    5a9e:	4906      	ldr	r1, [pc, #24]	; (5ab8 <handler_in_use+0x30>)
    5aa0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    5aa4:	f413 7f80 	tst.w	r3, #256	; 0x100
    5aa8:	d0f0      	beq.n	5a8c <handler_in_use+0x4>
    5aaa:	f3c3 2343 	ubfx	r3, r3, #9, #4
    5aae:	e7ef      	b.n	5a90 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    5ab0:	2000      	movs	r0, #0
    5ab2:	4770      	bx	lr
            return true;
    5ab4:	2001      	movs	r0, #1
}
    5ab6:	4770      	bx	lr
    5ab8:	2000405c 	.word	0x2000405c

00005abc <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    5abc:	2300      	movs	r3, #0
    5abe:	b113      	cbz	r3, 5ac6 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    5ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5ac4:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5ac6:	4a07      	ldr	r2, [pc, #28]	; (5ae4 <find_handler+0x28>)
    5ac8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    5acc:	4282      	cmp	r2, r0
    5ace:	d001      	beq.n	5ad4 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    5ad0:	3301      	adds	r3, #1
    5ad2:	e7f4      	b.n	5abe <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5ad4:	4a03      	ldr	r2, [pc, #12]	; (5ae4 <find_handler+0x28>)
    5ad6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    5ada:	6852      	ldr	r2, [r2, #4]
    5adc:	428a      	cmp	r2, r1
    5ade:	d1f7      	bne.n	5ad0 <find_handler+0x14>
            return i;
    5ae0:	4618      	mov	r0, r3
    5ae2:	4770      	bx	lr
    5ae4:	2000405c 	.word	0x2000405c

00005ae8 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5ae8:	3008      	adds	r0, #8
    5aea:	4b06      	ldr	r3, [pc, #24]	; (5b04 <channel_handler_get+0x1c>)
    5aec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    5af0:	f410 7f80 	tst.w	r0, #256	; 0x100
    5af4:	d004      	beq.n	5b00 <channel_handler_get+0x18>
    5af6:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    5afa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5afe:	4770      	bx	lr
        return NULL;
    5b00:	2000      	movs	r0, #0
}
    5b02:	4770      	bx	lr
    5b04:	2000405c 	.word	0x2000405c

00005b08 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    5b08:	b570      	push	{r4, r5, r6, lr}
    5b0a:	4604      	mov	r4, r0
    5b0c:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    5b0e:	f7ff ffeb 	bl	5ae8 <channel_handler_get>

    if (handler)
    5b12:	b120      	cbz	r0, 5b1e <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    5b14:	6806      	ldr	r6, [r0, #0]
    5b16:	6842      	ldr	r2, [r0, #4]
    5b18:	4629      	mov	r1, r5
    5b1a:	4620      	mov	r0, r4
    5b1c:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    5b1e:	4b04      	ldr	r3, [pc, #16]	; (5b30 <call_handler+0x28>)
    5b20:	689b      	ldr	r3, [r3, #8]
    5b22:	b123      	cbz	r3, 5b2e <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5b24:	4a02      	ldr	r2, [pc, #8]	; (5b30 <call_handler+0x28>)
    5b26:	68d2      	ldr	r2, [r2, #12]
    5b28:	4629      	mov	r1, r5
    5b2a:	4620      	mov	r0, r4
    5b2c:	4798      	blx	r3
    }
}
    5b2e:	bd70      	pop	{r4, r5, r6, pc}
    5b30:	2000405c 	.word	0x2000405c

00005b34 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5b34:	f100 0208 	add.w	r2, r0, #8
    5b38:	4b16      	ldr	r3, [pc, #88]	; (5b94 <release_handler+0x60>)
    5b3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    5b3e:	f413 7f80 	tst.w	r3, #256	; 0x100
    5b42:	d026      	beq.n	5b92 <release_handler+0x5e>
{
    5b44:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5b46:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    5b4a:	4610      	mov	r0, r2
    5b4c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5b50:	4a10      	ldr	r2, [pc, #64]	; (5b94 <release_handler+0x60>)
    5b52:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    5b56:	4620      	mov	r0, r4
    5b58:	f7ff ff96 	bl	5a88 <handler_in_use>
    5b5c:	b100      	cbz	r0, 5b60 <release_handler+0x2c>
}
    5b5e:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    5b60:	480c      	ldr	r0, [pc, #48]	; (5b94 <release_handler+0x60>)
    5b62:	2300      	movs	r3, #0
    5b64:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5b68:	4621      	mov	r1, r4
    5b6a:	3074      	adds	r0, #116	; 0x74
    5b6c:	f7ff fd86 	bl	567c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5b70:	4b09      	ldr	r3, [pc, #36]	; (5b98 <release_handler+0x64>)
    5b72:	4298      	cmp	r0, r3
    5b74:	d0f3      	beq.n	5b5e <release_handler+0x2a>
    5b76:	4c09      	ldr	r4, [pc, #36]	; (5b9c <release_handler+0x68>)
    5b78:	f44f 7399 	mov.w	r3, #306	; 0x132
    5b7c:	4622      	mov	r2, r4
    5b7e:	4908      	ldr	r1, [pc, #32]	; (5ba0 <release_handler+0x6c>)
    5b80:	4808      	ldr	r0, [pc, #32]	; (5ba4 <release_handler+0x70>)
    5b82:	f004 f978 	bl	9e76 <assert_print>
    5b86:	f44f 7199 	mov.w	r1, #306	; 0x132
    5b8a:	4620      	mov	r0, r4
    5b8c:	f004 f96c 	bl	9e68 <assert_post_action>
    5b90:	e7e5      	b.n	5b5e <release_handler+0x2a>
    5b92:	4770      	bx	lr
    5b94:	2000405c 	.word	0x2000405c
    5b98:	0bad0000 	.word	0x0bad0000
    5b9c:	0000c4dc 	.word	0x0000c4dc
    5ba0:	0000c51c 	.word	0x0000c51c
    5ba4:	0000b180 	.word	0x0000b180

00005ba8 <pin_handler_trigger_uninit>:
{
    5ba8:	b510      	push	{r4, lr}
    5baa:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    5bac:	f7ff ff44 	bl	5a38 <pin_in_use_by_te>
    5bb0:	b140      	cbz	r0, 5bc4 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    5bb2:	4620      	mov	r0, r4
    5bb4:	f7ff ff60 	bl	5a78 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    5bb8:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    5bbc:	4b06      	ldr	r3, [pc, #24]	; (5bd8 <pin_handler_trigger_uninit+0x30>)
    5bbe:	2200      	movs	r2, #0
    5bc0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    5bc4:	4620      	mov	r0, r4
    5bc6:	f7ff ffb5 	bl	5b34 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    5bca:	3408      	adds	r4, #8
    5bcc:	4b03      	ldr	r3, [pc, #12]	; (5bdc <pin_handler_trigger_uninit+0x34>)
    5bce:	2200      	movs	r2, #0
    5bd0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    5bd4:	bd10      	pop	{r4, pc}
    5bd6:	bf00      	nop
    5bd8:	40006000 	.word	0x40006000
    5bdc:	2000405c 	.word	0x2000405c

00005be0 <pin_handler_set>:
{
    5be0:	b570      	push	{r4, r5, r6, lr}
    5be2:	b082      	sub	sp, #8
    5be4:	4606      	mov	r6, r0
    5be6:	460c      	mov	r4, r1
    5be8:	4615      	mov	r5, r2
    release_handler(pin);
    5bea:	f7ff ffa3 	bl	5b34 <release_handler>
    if (!handler)
    5bee:	b324      	cbz	r4, 5c3a <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    5bf0:	4629      	mov	r1, r5
    5bf2:	4620      	mov	r0, r4
    5bf4:	f7ff ff62 	bl	5abc <find_handler>
    if (handler_id < 0)
    5bf8:	1e03      	subs	r3, r0, #0
    5bfa:	db13      	blt.n	5c24 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    5bfc:	4a10      	ldr	r2, [pc, #64]	; (5c40 <pin_handler_set+0x60>)
    5bfe:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5c02:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5c06:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5c08:	025b      	lsls	r3, r3, #9
    5c0a:	b29b      	uxth	r3, r3
    5c0c:	f106 0008 	add.w	r0, r6, #8
    5c10:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    5c14:	430b      	orrs	r3, r1
    5c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5c1a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    5c1e:	4809      	ldr	r0, [pc, #36]	; (5c44 <pin_handler_set+0x64>)
}
    5c20:	b002      	add	sp, #8
    5c22:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    5c24:	f10d 0107 	add.w	r1, sp, #7
    5c28:	4807      	ldr	r0, [pc, #28]	; (5c48 <pin_handler_set+0x68>)
    5c2a:	f7ff fcff 	bl	562c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5c2e:	4b05      	ldr	r3, [pc, #20]	; (5c44 <pin_handler_set+0x64>)
    5c30:	4298      	cmp	r0, r3
    5c32:	d1f5      	bne.n	5c20 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    5c34:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5c38:	e7e0      	b.n	5bfc <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    5c3a:	4802      	ldr	r0, [pc, #8]	; (5c44 <pin_handler_set+0x64>)
    5c3c:	e7f0      	b.n	5c20 <pin_handler_set+0x40>
    5c3e:	bf00      	nop
    5c40:	2000405c 	.word	0x2000405c
    5c44:	0bad0000 	.word	0x0bad0000
    5c48:	200040d0 	.word	0x200040d0

00005c4c <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    5c4c:	b538      	push	{r3, r4, r5, lr}
    5c4e:	4604      	mov	r4, r0
    while (mask)
    5c50:	e018      	b.n	5c84 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    5c52:	fa94 f3a4 	rbit	r3, r4
    5c56:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5c5a:	2201      	movs	r2, #1
    5c5c:	409a      	lsls	r2, r3
    5c5e:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5c62:	4a0a      	ldr	r2, [pc, #40]	; (5c8c <gpiote_evt_handle+0x40>)
    5c64:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    5c68:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    5c6c:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    5c70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5c74:	f3c0 4001 	ubfx	r0, r0, #16, #2
    5c78:	f004 ff4a 	bl	ab10 <gpiote_polarity_to_trigger>
    5c7c:	4601      	mov	r1, r0
    5c7e:	4628      	mov	r0, r5
    5c80:	f7ff ff42 	bl	5b08 <call_handler>
    while (mask)
    5c84:	2c00      	cmp	r4, #0
    5c86:	d1e4      	bne.n	5c52 <gpiote_evt_handle+0x6>
    }
}
    5c88:	bd38      	pop	{r3, r4, r5, pc}
    5c8a:	bf00      	nop
    5c8c:	40006000 	.word	0x40006000

00005c90 <latch_pending_read_and_check>:
{
    5c90:	b082      	sub	sp, #8
    5c92:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    5c94:	4b11      	ldr	r3, [pc, #68]	; (5cdc <latch_pending_read_and_check+0x4c>)
    5c96:	e893 0003 	ldmia.w	r3, {r0, r1}
    5c9a:	ab02      	add	r3, sp, #8
    5c9c:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    5ca0:	4660      	mov	r0, ip
    5ca2:	2300      	movs	r3, #0
    5ca4:	e00b      	b.n	5cbe <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    5ca6:	aa02      	add	r2, sp, #8
    5ca8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    5cac:	f852 2c08 	ldr.w	r2, [r2, #-8]
    5cb0:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    5cb4:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    5cb8:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    5cbc:	3301      	adds	r3, #1
    5cbe:	2b01      	cmp	r3, #1
    5cc0:	d9f1      	bls.n	5ca6 <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    5cc2:	2300      	movs	r3, #0
    5cc4:	2b01      	cmp	r3, #1
    5cc6:	d804      	bhi.n	5cd2 <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    5cc8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    5ccc:	b922      	cbnz	r2, 5cd8 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    5cce:	3301      	adds	r3, #1
    5cd0:	e7f8      	b.n	5cc4 <latch_pending_read_and_check+0x34>
    return false;
    5cd2:	2000      	movs	r0, #0
}
    5cd4:	b002      	add	sp, #8
    5cd6:	4770      	bx	lr
            return true;
    5cd8:	2001      	movs	r0, #1
    5cda:	e7fb      	b.n	5cd4 <latch_pending_read_and_check+0x44>
    5cdc:	0000b050 	.word	0x0000b050

00005ce0 <next_sense_cond_call_handler>:
{
    5ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ce4:	4604      	mov	r4, r0
    5ce6:	460d      	mov	r5, r1
    5ce8:	4616      	mov	r6, r2
    if (is_level(trigger))
    5cea:	4608      	mov	r0, r1
    5cec:	f004 ff12 	bl	ab14 <is_level>
    5cf0:	bb60      	cbnz	r0, 5d4c <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5cf2:	2e02      	cmp	r6, #2
    5cf4:	f000 80f5 	beq.w	5ee2 <next_sense_cond_call_handler+0x202>
    5cf8:	f04f 0802 	mov.w	r8, #2
    switch (port)
    5cfc:	0963      	lsrs	r3, r4, #5
    5cfe:	f000 80f3 	beq.w	5ee8 <next_sense_cond_call_handler+0x208>
    5d02:	2b01      	cmp	r3, #1
    5d04:	f040 80f3 	bne.w	5eee <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    5d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5d0c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5d10:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5d12:	f013 0f01 	tst.w	r3, #1
    5d16:	f000 80ec 	beq.w	5ef2 <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    5d1a:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5d1e:	0963      	lsrs	r3, r4, #5
    5d20:	f000 80f5 	beq.w	5f0e <next_sense_cond_call_handler+0x22e>
    5d24:	2b01      	cmp	r3, #1
    5d26:	f000 80f5 	beq.w	5f14 <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    5d2a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 5f50 <next_sense_cond_call_handler+0x270>
    5d2e:	f240 232e 	movw	r3, #558	; 0x22e
    5d32:	464a      	mov	r2, r9
    5d34:	4987      	ldr	r1, [pc, #540]	; (5f54 <next_sense_cond_call_handler+0x274>)
    5d36:	4888      	ldr	r0, [pc, #544]	; (5f58 <next_sense_cond_call_handler+0x278>)
    5d38:	f004 f89d 	bl	9e76 <assert_print>
    5d3c:	f240 212e 	movw	r1, #558	; 0x22e
    5d40:	4648      	mov	r0, r9
    5d42:	f004 f891 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    5d46:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    5d4a:	e0e4      	b.n	5f16 <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    5d4c:	4629      	mov	r1, r5
    5d4e:	4620      	mov	r0, r4
    5d50:	f7ff feda 	bl	5b08 <call_handler>
    switch (port)
    5d54:	0963      	lsrs	r3, r4, #5
    5d56:	d01f      	beq.n	5d98 <next_sense_cond_call_handler+0xb8>
    5d58:	2b01      	cmp	r3, #1
    5d5a:	d120      	bne.n	5d9e <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    5d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5d60:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5d64:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5d66:	f013 0f01 	tst.w	r3, #1
    5d6a:	d01a      	beq.n	5da2 <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    5d6c:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5d70:	0963      	lsrs	r3, r4, #5
    5d72:	d024      	beq.n	5dbe <next_sense_cond_call_handler+0xde>
    5d74:	2b01      	cmp	r3, #1
    5d76:	d025      	beq.n	5dc4 <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    5d78:	4f75      	ldr	r7, [pc, #468]	; (5f50 <next_sense_cond_call_handler+0x270>)
    5d7a:	f240 232e 	movw	r3, #558	; 0x22e
    5d7e:	463a      	mov	r2, r7
    5d80:	4974      	ldr	r1, [pc, #464]	; (5f54 <next_sense_cond_call_handler+0x274>)
    5d82:	4875      	ldr	r0, [pc, #468]	; (5f58 <next_sense_cond_call_handler+0x278>)
    5d84:	f004 f877 	bl	9e76 <assert_print>
    5d88:	f240 212e 	movw	r1, #558	; 0x22e
    5d8c:	4638      	mov	r0, r7
    5d8e:	f004 f86b 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    5d92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5d96:	e016      	b.n	5dc6 <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    5d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5d9c:	e7e0      	b.n	5d60 <next_sense_cond_call_handler+0x80>
    switch (port)
    5d9e:	2300      	movs	r3, #0
    5da0:	e7de      	b.n	5d60 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5da2:	4d6b      	ldr	r5, [pc, #428]	; (5f50 <next_sense_cond_call_handler+0x270>)
    5da4:	f240 2329 	movw	r3, #553	; 0x229
    5da8:	462a      	mov	r2, r5
    5daa:	496c      	ldr	r1, [pc, #432]	; (5f5c <next_sense_cond_call_handler+0x27c>)
    5dac:	486a      	ldr	r0, [pc, #424]	; (5f58 <next_sense_cond_call_handler+0x278>)
    5dae:	f004 f862 	bl	9e76 <assert_print>
    5db2:	f240 2129 	movw	r1, #553	; 0x229
    5db6:	4628      	mov	r0, r5
    5db8:	f004 f856 	bl	9e68 <assert_post_action>
    5dbc:	e7d6      	b.n	5d6c <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    5dbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5dc2:	e000      	b.n	5dc6 <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5dc4:	4b66      	ldr	r3, [pc, #408]	; (5f60 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5dc6:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    5dca:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    5dce:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5dd2:	429e      	cmp	r6, r3
    5dd4:	f040 80af 	bne.w	5f36 <next_sense_cond_call_handler+0x256>
    switch (port)
    5dd8:	0963      	lsrs	r3, r4, #5
    5dda:	d01f      	beq.n	5e1c <next_sense_cond_call_handler+0x13c>
    5ddc:	2b01      	cmp	r3, #1
    5dde:	d120      	bne.n	5e22 <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    5de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5de4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5de8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5dea:	f013 0f01 	tst.w	r3, #1
    5dee:	d01a      	beq.n	5e26 <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    5df0:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5df4:	0963      	lsrs	r3, r4, #5
    5df6:	d024      	beq.n	5e42 <next_sense_cond_call_handler+0x162>
    5df8:	2b01      	cmp	r3, #1
    5dfa:	d025      	beq.n	5e48 <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    5dfc:	4f54      	ldr	r7, [pc, #336]	; (5f50 <next_sense_cond_call_handler+0x270>)
    5dfe:	f240 232e 	movw	r3, #558	; 0x22e
    5e02:	463a      	mov	r2, r7
    5e04:	4953      	ldr	r1, [pc, #332]	; (5f54 <next_sense_cond_call_handler+0x274>)
    5e06:	4854      	ldr	r0, [pc, #336]	; (5f58 <next_sense_cond_call_handler+0x278>)
    5e08:	f004 f835 	bl	9e76 <assert_print>
    5e0c:	f240 212e 	movw	r1, #558	; 0x22e
    5e10:	4638      	mov	r0, r7
    5e12:	f004 f829 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    5e16:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    5e1a:	e016      	b.n	5e4a <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    5e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5e20:	e7e0      	b.n	5de4 <next_sense_cond_call_handler+0x104>
    switch (port)
    5e22:	2300      	movs	r3, #0
    5e24:	e7de      	b.n	5de4 <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5e26:	4d4a      	ldr	r5, [pc, #296]	; (5f50 <next_sense_cond_call_handler+0x270>)
    5e28:	f240 2329 	movw	r3, #553	; 0x229
    5e2c:	462a      	mov	r2, r5
    5e2e:	494b      	ldr	r1, [pc, #300]	; (5f5c <next_sense_cond_call_handler+0x27c>)
    5e30:	4849      	ldr	r0, [pc, #292]	; (5f58 <next_sense_cond_call_handler+0x278>)
    5e32:	f004 f820 	bl	9e76 <assert_print>
    5e36:	f240 2129 	movw	r1, #553	; 0x229
    5e3a:	4628      	mov	r0, r5
    5e3c:	f004 f814 	bl	9e68 <assert_post_action>
    5e40:	e7d6      	b.n	5df0 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    5e42:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    5e46:	e000      	b.n	5e4a <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5e48:	4945      	ldr	r1, [pc, #276]	; (5f60 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5e4a:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    5e4e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    5e52:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    5e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    5e5a:	0963      	lsrs	r3, r4, #5
    5e5c:	d01f      	beq.n	5e9e <next_sense_cond_call_handler+0x1be>
    5e5e:	2b01      	cmp	r3, #1
    5e60:	d120      	bne.n	5ea4 <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    5e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5e66:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5e6a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5e6c:	f013 0f01 	tst.w	r3, #1
    5e70:	d01a      	beq.n	5ea8 <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    5e72:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5e76:	0964      	lsrs	r4, r4, #5
    5e78:	d024      	beq.n	5ec4 <next_sense_cond_call_handler+0x1e4>
    5e7a:	2c01      	cmp	r4, #1
    5e7c:	d025      	beq.n	5eca <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    5e7e:	4c34      	ldr	r4, [pc, #208]	; (5f50 <next_sense_cond_call_handler+0x270>)
    5e80:	f240 232e 	movw	r3, #558	; 0x22e
    5e84:	4622      	mov	r2, r4
    5e86:	4933      	ldr	r1, [pc, #204]	; (5f54 <next_sense_cond_call_handler+0x274>)
    5e88:	4833      	ldr	r0, [pc, #204]	; (5f58 <next_sense_cond_call_handler+0x278>)
    5e8a:	f003 fff4 	bl	9e76 <assert_print>
    5e8e:	f240 212e 	movw	r1, #558	; 0x22e
    5e92:	4620      	mov	r0, r4
    5e94:	f003 ffe8 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    5e98:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    5e9c:	e016      	b.n	5ecc <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    5e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5ea2:	e7e0      	b.n	5e66 <next_sense_cond_call_handler+0x186>
    switch (port)
    5ea4:	2300      	movs	r3, #0
    5ea6:	e7de      	b.n	5e66 <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5ea8:	4d29      	ldr	r5, [pc, #164]	; (5f50 <next_sense_cond_call_handler+0x270>)
    5eaa:	f240 2329 	movw	r3, #553	; 0x229
    5eae:	462a      	mov	r2, r5
    5eb0:	492a      	ldr	r1, [pc, #168]	; (5f5c <next_sense_cond_call_handler+0x27c>)
    5eb2:	4829      	ldr	r0, [pc, #164]	; (5f58 <next_sense_cond_call_handler+0x278>)
    5eb4:	f003 ffdf 	bl	9e76 <assert_print>
    5eb8:	f240 2129 	movw	r1, #553	; 0x229
    5ebc:	4628      	mov	r0, r5
    5ebe:	f003 ffd3 	bl	9e68 <assert_post_action>
    5ec2:	e7d6      	b.n	5e72 <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    5ec4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    5ec8:	e000      	b.n	5ecc <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5eca:	4925      	ldr	r1, [pc, #148]	; (5f60 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5ecc:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    5ed0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    5ed4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5ed8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    5edc:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    5ee0:	e029      	b.n	5f36 <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5ee2:	f04f 0803 	mov.w	r8, #3
    5ee6:	e709      	b.n	5cfc <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    5ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5eec:	e70e      	b.n	5d0c <next_sense_cond_call_handler+0x2c>
    switch (port)
    5eee:	2300      	movs	r3, #0
    5ef0:	e70c      	b.n	5d0c <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5ef2:	4f17      	ldr	r7, [pc, #92]	; (5f50 <next_sense_cond_call_handler+0x270>)
    5ef4:	f240 2329 	movw	r3, #553	; 0x229
    5ef8:	463a      	mov	r2, r7
    5efa:	4918      	ldr	r1, [pc, #96]	; (5f5c <next_sense_cond_call_handler+0x27c>)
    5efc:	4816      	ldr	r0, [pc, #88]	; (5f58 <next_sense_cond_call_handler+0x278>)
    5efe:	f003 ffba 	bl	9e76 <assert_print>
    5f02:	f240 2129 	movw	r1, #553	; 0x229
    5f06:	4638      	mov	r0, r7
    5f08:	f003 ffae 	bl	9e68 <assert_post_action>
    5f0c:	e705      	b.n	5d1a <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    5f0e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    5f12:	e000      	b.n	5f16 <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5f14:	4912      	ldr	r1, [pc, #72]	; (5f60 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5f16:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    5f1a:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    5f1e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5f22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    5f26:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5f2a:	2d03      	cmp	r5, #3
    5f2c:	d007      	beq.n	5f3e <next_sense_cond_call_handler+0x25e>
    5f2e:	2e02      	cmp	r6, #2
    5f30:	d003      	beq.n	5f3a <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5f32:	2e03      	cmp	r6, #3
    5f34:	d008      	beq.n	5f48 <next_sense_cond_call_handler+0x268>
}
    5f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5f3a:	2d01      	cmp	r5, #1
    5f3c:	d1f9      	bne.n	5f32 <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    5f3e:	4629      	mov	r1, r5
    5f40:	4620      	mov	r0, r4
    5f42:	f7ff fde1 	bl	5b08 <call_handler>
}
    5f46:	e7f6      	b.n	5f36 <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5f48:	2d02      	cmp	r5, #2
    5f4a:	d1f4      	bne.n	5f36 <next_sense_cond_call_handler+0x256>
    5f4c:	e7f7      	b.n	5f3e <next_sense_cond_call_handler+0x25e>
    5f4e:	bf00      	nop
    5f50:	0000c2b8 	.word	0x0000c2b8
    5f54:	0000b83c 	.word	0x0000b83c
    5f58:	0000b180 	.word	0x0000b180
    5f5c:	0000c2ec 	.word	0x0000c2ec
    5f60:	50000300 	.word	0x50000300

00005f64 <port_event_handle>:
{
    5f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f68:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    5f6a:	4a65      	ldr	r2, [pc, #404]	; (6100 <port_event_handle+0x19c>)
    5f6c:	466b      	mov	r3, sp
    5f6e:	e892 0003 	ldmia.w	r2, {r0, r1}
    5f72:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    5f76:	2300      	movs	r3, #0
    5f78:	a802      	add	r0, sp, #8
    5f7a:	e00b      	b.n	5f94 <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    5f7c:	aa04      	add	r2, sp, #16
    5f7e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    5f82:	f852 2c10 	ldr.w	r2, [r2, #-16]
    5f86:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    5f8a:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    5f8e:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    5f92:	3301      	adds	r3, #1
    5f94:	2b01      	cmp	r3, #1
    5f96:	d9f1      	bls.n	5f7c <port_event_handle+0x18>
    5f98:	e0ad      	b.n	60f6 <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    5f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5f9e:	e07f      	b.n	60a0 <port_event_handle+0x13c>
    switch (port)
    5fa0:	2300      	movs	r3, #0
    5fa2:	e07d      	b.n	60a0 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5fa4:	4f57      	ldr	r7, [pc, #348]	; (6104 <port_event_handle+0x1a0>)
    5fa6:	f240 2329 	movw	r3, #553	; 0x229
    5faa:	463a      	mov	r2, r7
    5fac:	4956      	ldr	r1, [pc, #344]	; (6108 <port_event_handle+0x1a4>)
    5fae:	4857      	ldr	r0, [pc, #348]	; (610c <port_event_handle+0x1a8>)
    5fb0:	f003 ff61 	bl	9e76 <assert_print>
    5fb4:	f240 2129 	movw	r1, #553	; 0x229
    5fb8:	4638      	mov	r0, r7
    5fba:	f003 ff55 	bl	9e68 <assert_post_action>
    5fbe:	e076      	b.n	60ae <port_event_handle+0x14a>
        case 0: return NRF_P0;
    5fc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5fc4:	e000      	b.n	5fc8 <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5fc6:	4b52      	ldr	r3, [pc, #328]	; (6110 <port_event_handle+0x1ac>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5fc8:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    5fcc:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    5fd0:	f3c2 4201 	ubfx	r2, r2, #16, #2
    5fd4:	4631      	mov	r1, r6
    5fd6:	4620      	mov	r0, r4
    5fd8:	f7ff fe82 	bl	5ce0 <next_sense_cond_call_handler>
    switch (port)
    5fdc:	0963      	lsrs	r3, r4, #5
    5fde:	d01f      	beq.n	6020 <port_event_handle+0xbc>
    5fe0:	2b01      	cmp	r3, #1
    5fe2:	d120      	bne.n	6026 <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    5fe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5fe8:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5fec:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5fee:	f013 0f01 	tst.w	r3, #1
    5ff2:	d01a      	beq.n	602a <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    5ff4:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5ff8:	0964      	lsrs	r4, r4, #5
    5ffa:	d024      	beq.n	6046 <port_event_handle+0xe2>
    5ffc:	2c01      	cmp	r4, #1
    5ffe:	d025      	beq.n	604c <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    6000:	4c40      	ldr	r4, [pc, #256]	; (6104 <port_event_handle+0x1a0>)
    6002:	f240 232e 	movw	r3, #558	; 0x22e
    6006:	4622      	mov	r2, r4
    6008:	4942      	ldr	r1, [pc, #264]	; (6114 <port_event_handle+0x1b0>)
    600a:	4840      	ldr	r0, [pc, #256]	; (610c <port_event_handle+0x1a8>)
    600c:	f003 ff33 	bl	9e76 <assert_print>
    6010:	f240 212e 	movw	r1, #558	; 0x22e
    6014:	4620      	mov	r0, r4
    6016:	f003 ff27 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    601a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    601e:	e016      	b.n	604e <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    6020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6024:	e7e0      	b.n	5fe8 <port_event_handle+0x84>
    switch (port)
    6026:	2300      	movs	r3, #0
    6028:	e7de      	b.n	5fe8 <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    602a:	4e36      	ldr	r6, [pc, #216]	; (6104 <port_event_handle+0x1a0>)
    602c:	f240 2329 	movw	r3, #553	; 0x229
    6030:	4632      	mov	r2, r6
    6032:	4935      	ldr	r1, [pc, #212]	; (6108 <port_event_handle+0x1a4>)
    6034:	4835      	ldr	r0, [pc, #212]	; (610c <port_event_handle+0x1a8>)
    6036:	f003 ff1e 	bl	9e76 <assert_print>
    603a:	f240 2129 	movw	r1, #553	; 0x229
    603e:	4630      	mov	r0, r6
    6040:	f003 ff12 	bl	9e68 <assert_post_action>
    6044:	e7d6      	b.n	5ff4 <port_event_handle+0x90>
        case 0: return NRF_P0;
    6046:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    604a:	e000      	b.n	604e <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    604c:	4a30      	ldr	r2, [pc, #192]	; (6110 <port_event_handle+0x1ac>)
    reg->LATCH = (1 << pin_number);
    604e:	2301      	movs	r3, #1
    6050:	40b3      	lsls	r3, r6
    6052:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    6056:	ab04      	add	r3, sp, #16
    6058:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    605c:	f853 4c08 	ldr.w	r4, [r3, #-8]
    6060:	2c00      	cmp	r4, #0
    6062:	d03b      	beq.n	60dc <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    6064:	fa94 f4a4 	rbit	r4, r4
    6068:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    606c:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6070:	f104 0208 	add.w	r2, r4, #8
    6074:	4b28      	ldr	r3, [pc, #160]	; (6118 <port_event_handle+0x1b4>)
    6076:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    607a:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    607e:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    6080:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    6084:	a802      	add	r0, sp, #8
    6086:	2301      	movs	r3, #1
    6088:	fa03 f202 	lsl.w	r2, r3, r2
    608c:	5c43      	ldrb	r3, [r0, r1]
    608e:	ea23 0302 	bic.w	r3, r3, r2
    6092:	5443      	strb	r3, [r0, r1]
    switch (port)
    6094:	0963      	lsrs	r3, r4, #5
    6096:	d080      	beq.n	5f9a <port_event_handle+0x36>
    6098:	2b01      	cmp	r3, #1
    609a:	d181      	bne.n	5fa0 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    609c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    60a0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    60a4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    60a6:	f013 0f01 	tst.w	r3, #1
    60aa:	f43f af7b 	beq.w	5fa4 <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    60ae:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    60b2:	0963      	lsrs	r3, r4, #5
    60b4:	d084      	beq.n	5fc0 <port_event_handle+0x5c>
    60b6:	2b01      	cmp	r3, #1
    60b8:	d085      	beq.n	5fc6 <port_event_handle+0x62>
            NRFX_ASSERT(0);
    60ba:	f8df 8048 	ldr.w	r8, [pc, #72]	; 6104 <port_event_handle+0x1a0>
    60be:	f240 232e 	movw	r3, #558	; 0x22e
    60c2:	4642      	mov	r2, r8
    60c4:	4913      	ldr	r1, [pc, #76]	; (6114 <port_event_handle+0x1b0>)
    60c6:	4811      	ldr	r0, [pc, #68]	; (610c <port_event_handle+0x1a8>)
    60c8:	f003 fed5 	bl	9e76 <assert_print>
    60cc:	f240 212e 	movw	r1, #558	; 0x22e
    60d0:	4640      	mov	r0, r8
    60d2:	f003 fec9 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    60d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    60da:	e775      	b.n	5fc8 <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    60dc:	3501      	adds	r5, #1
    60de:	2d01      	cmp	r5, #1
    60e0:	d9b9      	bls.n	6056 <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    60e2:	4b0e      	ldr	r3, [pc, #56]	; (611c <port_event_handle+0x1b8>)
    60e4:	2200      	movs	r2, #0
    60e6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    60ea:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    60ee:	a802      	add	r0, sp, #8
    60f0:	f7ff fdce 	bl	5c90 <latch_pending_read_and_check>
    60f4:	b108      	cbz	r0, 60fa <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    60f6:	2500      	movs	r5, #0
    60f8:	e7f1      	b.n	60de <port_event_handle+0x17a>
}
    60fa:	b004      	add	sp, #16
    60fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6100:	0000b050 	.word	0x0000b050
    6104:	0000c2b8 	.word	0x0000c2b8
    6108:	0000c2ec 	.word	0x0000c2ec
    610c:	0000b180 	.word	0x0000b180
    6110:	50000300 	.word	0x50000300
    6114:	0000b83c 	.word	0x0000b83c
    6118:	2000405c 	.word	0x2000405c
    611c:	40006000 	.word	0x40006000

00006120 <nrfx_gpiote_input_configure>:
{
    6120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6124:	4604      	mov	r4, r0
    6126:	4615      	mov	r5, r2
    6128:	461e      	mov	r6, r3
    if (p_input_config)
    612a:	2900      	cmp	r1, #0
    612c:	d064      	beq.n	61f8 <nrfx_gpiote_input_configure+0xd8>
    612e:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    6130:	f004 fcd8 	bl	aae4 <pin_is_task_output>
    6134:	2800      	cmp	r0, #0
    6136:	f040 80cd 	bne.w	62d4 <nrfx_gpiote_input_configure+0x1b4>
    switch (port)
    613a:	0963      	lsrs	r3, r4, #5
    613c:	d020      	beq.n	6180 <nrfx_gpiote_input_configure+0x60>
    613e:	2b01      	cmp	r3, #1
    6140:	d121      	bne.n	6186 <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    6142:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6146:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    614a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    614c:	f013 0f01 	tst.w	r3, #1
    6150:	d01b      	beq.n	618a <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    6152:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6156:	0963      	lsrs	r3, r4, #5
    6158:	d025      	beq.n	61a6 <nrfx_gpiote_input_configure+0x86>
    615a:	2b01      	cmp	r3, #1
    615c:	d026      	beq.n	61ac <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    615e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 62e4 <nrfx_gpiote_input_configure+0x1c4>
    6162:	f240 232e 	movw	r3, #558	; 0x22e
    6166:	464a      	mov	r2, r9
    6168:	495f      	ldr	r1, [pc, #380]	; (62e8 <nrfx_gpiote_input_configure+0x1c8>)
    616a:	4860      	ldr	r0, [pc, #384]	; (62ec <nrfx_gpiote_input_configure+0x1cc>)
    616c:	f003 fe83 	bl	9e76 <assert_print>
    6170:	f240 212e 	movw	r1, #558	; 0x22e
    6174:	4648      	mov	r0, r9
    6176:	f003 fe77 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    617a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    617e:	e016      	b.n	61ae <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    6180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6184:	e7df      	b.n	6146 <nrfx_gpiote_input_configure+0x26>
    switch (port)
    6186:	2300      	movs	r3, #0
    6188:	e7dd      	b.n	6146 <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    618a:	4f56      	ldr	r7, [pc, #344]	; (62e4 <nrfx_gpiote_input_configure+0x1c4>)
    618c:	f240 2329 	movw	r3, #553	; 0x229
    6190:	463a      	mov	r2, r7
    6192:	4957      	ldr	r1, [pc, #348]	; (62f0 <nrfx_gpiote_input_configure+0x1d0>)
    6194:	4855      	ldr	r0, [pc, #340]	; (62ec <nrfx_gpiote_input_configure+0x1cc>)
    6196:	f003 fe6e 	bl	9e76 <assert_print>
    619a:	f240 2129 	movw	r1, #553	; 0x229
    619e:	4638      	mov	r0, r7
    61a0:	f003 fe62 	bl	9e68 <assert_post_action>
    61a4:	e7d5      	b.n	6152 <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    61a6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    61aa:	e000      	b.n	61ae <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    61ac:	4951      	ldr	r1, [pc, #324]	; (62f4 <nrfx_gpiote_input_configure+0x1d4>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    61ae:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    61b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    61b6:	f1b8 0f00 	cmp.w	r8, #0
    61ba:	d03f      	beq.n	623c <nrfx_gpiote_input_configure+0x11c>
    61bc:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    61be:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    61c2:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    61c6:	f1b8 0f00 	cmp.w	r8, #0
    61ca:	d039      	beq.n	6240 <nrfx_gpiote_input_configure+0x120>
    61cc:	f898 2000 	ldrb.w	r2, [r8]
    61d0:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    61d2:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    61d4:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    61d8:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    61dc:	4a46      	ldr	r2, [pc, #280]	; (62f8 <nrfx_gpiote_input_configure+0x1d8>)
    61de:	f104 0108 	add.w	r1, r4, #8
    61e2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    61e6:	f023 0302 	bic.w	r3, r3, #2
    61ea:	b29b      	uxth	r3, r3
    61ec:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    61f0:	f043 0301 	orr.w	r3, r3, #1
    61f4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    61f8:	b1bd      	cbz	r5, 622a <nrfx_gpiote_input_configure+0x10a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    61fa:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    61fc:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    6200:	4620      	mov	r0, r4
    6202:	f7ff fc2f 	bl	5a64 <pin_is_output>
    6206:	b1e8      	cbz	r0, 6244 <nrfx_gpiote_input_configure+0x124>
            if (use_evt)
    6208:	f1b8 0f00 	cmp.w	r8, #0
    620c:	d164      	bne.n	62d8 <nrfx_gpiote_input_configure+0x1b8>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    620e:	4a3a      	ldr	r2, [pc, #232]	; (62f8 <nrfx_gpiote_input_configure+0x1d8>)
    6210:	f104 0108 	add.w	r1, r4, #8
    6214:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6218:	f023 031c 	bic.w	r3, r3, #28
    621c:	b29b      	uxth	r3, r3
    621e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6222:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    6226:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    622a:	2e00      	cmp	r6, #0
    622c:	d058      	beq.n	62e0 <nrfx_gpiote_input_configure+0x1c0>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    622e:	6872      	ldr	r2, [r6, #4]
    6230:	6831      	ldr	r1, [r6, #0]
    6232:	4620      	mov	r0, r4
    6234:	f7ff fcd4 	bl	5be0 <pin_handler_set>
}
    6238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    623c:	2200      	movs	r2, #0
    623e:	e7be      	b.n	61be <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6240:	2200      	movs	r2, #0
    6242:	e7c6      	b.n	61d2 <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6244:	4a2c      	ldr	r2, [pc, #176]	; (62f8 <nrfx_gpiote_input_configure+0x1d8>)
    6246:	f104 0108 	add.w	r1, r4, #8
    624a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    624e:	f023 0320 	bic.w	r3, r3, #32
    6252:	04db      	lsls	r3, r3, #19
    6254:	0cdb      	lsrs	r3, r3, #19
    6256:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    625a:	f1b8 0f00 	cmp.w	r8, #0
    625e:	d0d6      	beq.n	620e <nrfx_gpiote_input_configure+0xee>
                if (!edge)
    6260:	2f03      	cmp	r7, #3
    6262:	d83b      	bhi.n	62dc <nrfx_gpiote_input_configure+0x1bc>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6264:	686b      	ldr	r3, [r5, #4]
    6266:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    6268:	b937      	cbnz	r7, 6278 <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    626a:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    626e:	4b23      	ldr	r3, [pc, #140]	; (62fc <nrfx_gpiote_input_configure+0x1dc>)
    6270:	2200      	movs	r2, #0
    6272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    6276:	e7ca      	b.n	620e <nrfx_gpiote_input_configure+0xee>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    6278:	4638      	mov	r0, r7
    627a:	f004 fc4a 	bl	ab12 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    627e:	4b1f      	ldr	r3, [pc, #124]	; (62fc <nrfx_gpiote_input_configure+0x1dc>)
    6280:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    6284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    6288:	f021 0103 	bic.w	r1, r1, #3
    628c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    6294:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    6298:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    629c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    62a0:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    62a4:	0221      	lsls	r1, r4, #8
    62a6:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    62aa:	0400      	lsls	r0, r0, #16
    62ac:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    62b0:	4301      	orrs	r1, r0
    62b2:	ea4c 0101 	orr.w	r1, ip, r1
    62b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    62ba:	036b      	lsls	r3, r5, #13
    62bc:	b29b      	uxth	r3, r3
    62be:	4a0e      	ldr	r2, [pc, #56]	; (62f8 <nrfx_gpiote_input_configure+0x1d8>)
    62c0:	f104 0108 	add.w	r1, r4, #8
    62c4:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    62c8:	4303      	orrs	r3, r0
    62ca:	f043 0320 	orr.w	r3, r3, #32
    62ce:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    62d2:	e79c      	b.n	620e <nrfx_gpiote_input_configure+0xee>
            return NRFX_ERROR_INVALID_PARAM;
    62d4:	480a      	ldr	r0, [pc, #40]	; (6300 <nrfx_gpiote_input_configure+0x1e0>)
    62d6:	e7af      	b.n	6238 <nrfx_gpiote_input_configure+0x118>
                return NRFX_ERROR_INVALID_PARAM;
    62d8:	4809      	ldr	r0, [pc, #36]	; (6300 <nrfx_gpiote_input_configure+0x1e0>)
    62da:	e7ad      	b.n	6238 <nrfx_gpiote_input_configure+0x118>
                    return NRFX_ERROR_INVALID_PARAM;
    62dc:	4808      	ldr	r0, [pc, #32]	; (6300 <nrfx_gpiote_input_configure+0x1e0>)
    62de:	e7ab      	b.n	6238 <nrfx_gpiote_input_configure+0x118>
        err = NRFX_SUCCESS;
    62e0:	4808      	ldr	r0, [pc, #32]	; (6304 <nrfx_gpiote_input_configure+0x1e4>)
    62e2:	e7a9      	b.n	6238 <nrfx_gpiote_input_configure+0x118>
    62e4:	0000c2b8 	.word	0x0000c2b8
    62e8:	0000b83c 	.word	0x0000b83c
    62ec:	0000b180 	.word	0x0000b180
    62f0:	0000c2ec 	.word	0x0000c2ec
    62f4:	50000300 	.word	0x50000300
    62f8:	2000405c 	.word	0x2000405c
    62fc:	40006000 	.word	0x40006000
    6300:	0bad0004 	.word	0x0bad0004
    6304:	0bad0000 	.word	0x0bad0000

00006308 <nrfx_gpiote_output_configure>:
{
    6308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    630c:	4604      	mov	r4, r0
    630e:	4615      	mov	r5, r2
    if (p_config)
    6310:	2900      	cmp	r1, #0
    6312:	f000 8086 	beq.w	6422 <nrfx_gpiote_output_configure+0x11a>
    6316:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6318:	f004 fbf3 	bl	ab02 <pin_is_input>
    631c:	b128      	cbz	r0, 632a <nrfx_gpiote_output_configure+0x22>
    631e:	4620      	mov	r0, r4
    6320:	f7ff fb8a 	bl	5a38 <pin_in_use_by_te>
    6324:	2800      	cmp	r0, #0
    6326:	f040 80ce 	bne.w	64c6 <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    632a:	4620      	mov	r0, r4
    632c:	f7ff fb8e 	bl	5a4c <pin_has_trigger>
    6330:	b118      	cbz	r0, 633a <nrfx_gpiote_output_configure+0x32>
    6332:	787b      	ldrb	r3, [r7, #1]
    6334:	2b01      	cmp	r3, #1
    6336:	f000 80c8 	beq.w	64ca <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    633a:	f107 0901 	add.w	r9, r7, #1
    633e:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    6342:	0963      	lsrs	r3, r4, #5
    6344:	d020      	beq.n	6388 <nrfx_gpiote_output_configure+0x80>
    6346:	2b01      	cmp	r3, #1
    6348:	d121      	bne.n	638e <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    634a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    634e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6352:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6354:	f013 0f01 	tst.w	r3, #1
    6358:	d01b      	beq.n	6392 <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    635a:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    635e:	0963      	lsrs	r3, r4, #5
    6360:	d025      	beq.n	63ae <nrfx_gpiote_output_configure+0xa6>
    6362:	2b01      	cmp	r3, #1
    6364:	d026      	beq.n	63b4 <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    6366:	f8df a170 	ldr.w	sl, [pc, #368]	; 64d8 <nrfx_gpiote_output_configure+0x1d0>
    636a:	f240 232e 	movw	r3, #558	; 0x22e
    636e:	4652      	mov	r2, sl
    6370:	495a      	ldr	r1, [pc, #360]	; (64dc <nrfx_gpiote_output_configure+0x1d4>)
    6372:	485b      	ldr	r0, [pc, #364]	; (64e0 <nrfx_gpiote_output_configure+0x1d8>)
    6374:	f003 fd7f 	bl	9e76 <assert_print>
    6378:	f240 212e 	movw	r1, #558	; 0x22e
    637c:	4650      	mov	r0, sl
    637e:	f003 fd73 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    6382:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6386:	e016      	b.n	63b6 <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    6388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    638c:	e7df      	b.n	634e <nrfx_gpiote_output_configure+0x46>
    switch (port)
    638e:	2300      	movs	r3, #0
    6390:	e7dd      	b.n	634e <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6392:	4e51      	ldr	r6, [pc, #324]	; (64d8 <nrfx_gpiote_output_configure+0x1d0>)
    6394:	f240 2329 	movw	r3, #553	; 0x229
    6398:	4632      	mov	r2, r6
    639a:	4952      	ldr	r1, [pc, #328]	; (64e4 <nrfx_gpiote_output_configure+0x1dc>)
    639c:	4850      	ldr	r0, [pc, #320]	; (64e0 <nrfx_gpiote_output_configure+0x1d8>)
    639e:	f003 fd6a 	bl	9e76 <assert_print>
    63a2:	f240 2129 	movw	r1, #553	; 0x229
    63a6:	4630      	mov	r0, r6
    63a8:	f003 fd5e 	bl	9e68 <assert_post_action>
    63ac:	e7d5      	b.n	635a <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    63ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    63b2:	e000      	b.n	63b6 <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    63b4:	4a4c      	ldr	r2, [pc, #304]	; (64e8 <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    63b6:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    63ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    63be:	f1b9 0f00 	cmp.w	r9, #0
    63c2:	d04b      	beq.n	645c <nrfx_gpiote_output_configure+0x154>
    63c4:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    63c6:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    63ca:	f1b8 0f00 	cmp.w	r8, #0
    63ce:	d047      	beq.n	6460 <nrfx_gpiote_output_configure+0x158>
    63d0:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    63d2:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    63d4:	2f00      	cmp	r7, #0
    63d6:	d045      	beq.n	6464 <nrfx_gpiote_output_configure+0x15c>
    63d8:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    63dc:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    63de:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    63e2:	f1b9 0f00 	cmp.w	r9, #0
    63e6:	d03f      	beq.n	6468 <nrfx_gpiote_output_configure+0x160>
    63e8:	787b      	ldrb	r3, [r7, #1]
    63ea:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    63ec:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    63f0:	f1b8 0f00 	cmp.w	r8, #0
    63f4:	d03a      	beq.n	646c <nrfx_gpiote_output_configure+0x164>
    63f6:	78b8      	ldrb	r0, [r7, #2]
    63f8:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    63fa:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    63fc:	2f00      	cmp	r7, #0
    63fe:	d037      	beq.n	6470 <nrfx_gpiote_output_configure+0x168>
    6400:	7838      	ldrb	r0, [r7, #0]
    6402:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6404:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6406:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    6408:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    640c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    6410:	4a36      	ldr	r2, [pc, #216]	; (64ec <nrfx_gpiote_output_configure+0x1e4>)
    6412:	f104 0108 	add.w	r1, r4, #8
    6416:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    641a:	f043 0303 	orr.w	r3, r3, #3
    641e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    6422:	2d00      	cmp	r5, #0
    6424:	d053      	beq.n	64ce <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    6426:	4620      	mov	r0, r4
    6428:	f004 fb6b 	bl	ab02 <pin_is_input>
    642c:	2800      	cmp	r0, #0
    642e:	d150      	bne.n	64d2 <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    6430:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    6432:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    6436:	4a2e      	ldr	r2, [pc, #184]	; (64f0 <nrfx_gpiote_output_configure+0x1e8>)
    6438:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    643c:	492b      	ldr	r1, [pc, #172]	; (64ec <nrfx_gpiote_output_configure+0x1e4>)
    643e:	f104 0008 	add.w	r0, r4, #8
    6442:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    6446:	f022 0220 	bic.w	r2, r2, #32
    644a:	04d2      	lsls	r2, r2, #19
    644c:	0cd2      	lsrs	r2, r2, #19
    644e:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    6452:	786a      	ldrb	r2, [r5, #1]
    6454:	b972      	cbnz	r2, 6474 <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    6456:	4827      	ldr	r0, [pc, #156]	; (64f4 <nrfx_gpiote_output_configure+0x1ec>)
}
    6458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    645c:	2300      	movs	r3, #0
    645e:	e7b2      	b.n	63c6 <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6460:	2000      	movs	r0, #0
    6462:	e7b6      	b.n	63d2 <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6464:	2000      	movs	r0, #0
    6466:	e7b9      	b.n	63dc <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6468:	2300      	movs	r3, #0
    646a:	e7bf      	b.n	63ec <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    646c:	2000      	movs	r0, #0
    646e:	e7c4      	b.n	63fa <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6470:	2000      	movs	r0, #0
    6472:	e7c7      	b.n	6404 <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    6474:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6476:	481e      	ldr	r0, [pc, #120]	; (64f0 <nrfx_gpiote_output_configure+0x1e8>)
    6478:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    647c:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    6480:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    6484:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    6488:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    648c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    6490:	0221      	lsls	r1, r4, #8
    6492:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6496:	0412      	lsls	r2, r2, #16
    6498:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    649c:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    649e:	0539      	lsls	r1, r7, #20
    64a0:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    64a4:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    64a6:	4332      	orrs	r2, r6
    64a8:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    64ac:	035b      	lsls	r3, r3, #13
    64ae:	b29b      	uxth	r3, r3
    64b0:	4a0e      	ldr	r2, [pc, #56]	; (64ec <nrfx_gpiote_output_configure+0x1e4>)
    64b2:	3408      	adds	r4, #8
    64b4:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    64b8:	430b      	orrs	r3, r1
    64ba:	f043 0320 	orr.w	r3, r3, #32
    64be:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    64c2:	480c      	ldr	r0, [pc, #48]	; (64f4 <nrfx_gpiote_output_configure+0x1ec>)
    64c4:	e7c8      	b.n	6458 <nrfx_gpiote_output_configure+0x150>
    64c6:	480c      	ldr	r0, [pc, #48]	; (64f8 <nrfx_gpiote_output_configure+0x1f0>)
    64c8:	e7c6      	b.n	6458 <nrfx_gpiote_output_configure+0x150>
    64ca:	480b      	ldr	r0, [pc, #44]	; (64f8 <nrfx_gpiote_output_configure+0x1f0>)
    64cc:	e7c4      	b.n	6458 <nrfx_gpiote_output_configure+0x150>
    64ce:	4809      	ldr	r0, [pc, #36]	; (64f4 <nrfx_gpiote_output_configure+0x1ec>)
    64d0:	e7c2      	b.n	6458 <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    64d2:	4809      	ldr	r0, [pc, #36]	; (64f8 <nrfx_gpiote_output_configure+0x1f0>)
    64d4:	e7c0      	b.n	6458 <nrfx_gpiote_output_configure+0x150>
    64d6:	bf00      	nop
    64d8:	0000c2b8 	.word	0x0000c2b8
    64dc:	0000b83c 	.word	0x0000b83c
    64e0:	0000b180 	.word	0x0000b180
    64e4:	0000c2ec 	.word	0x0000c2ec
    64e8:	50000300 	.word	0x50000300
    64ec:	2000405c 	.word	0x2000405c
    64f0:	40006000 	.word	0x40006000
    64f4:	0bad0000 	.word	0x0bad0000
    64f8:	0bad0004 	.word	0x0bad0004

000064fc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    64fc:	4b01      	ldr	r3, [pc, #4]	; (6504 <nrfx_gpiote_global_callback_set+0x8>)
    64fe:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    6500:	60d9      	str	r1, [r3, #12]
}
    6502:	4770      	bx	lr
    6504:	2000405c 	.word	0x2000405c

00006508 <nrfx_gpiote_channel_get>:
{
    6508:	b570      	push	{r4, r5, r6, lr}
    650a:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    650c:	460d      	mov	r5, r1
    650e:	b159      	cbz	r1, 6528 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    6510:	4620      	mov	r0, r4
    6512:	f7ff fa91 	bl	5a38 <pin_in_use_by_te>
    6516:	b1a8      	cbz	r0, 6544 <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6518:	3408      	adds	r4, #8
    651a:	4b0b      	ldr	r3, [pc, #44]	; (6548 <nrfx_gpiote_channel_get+0x40>)
    651c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    6520:	0b5b      	lsrs	r3, r3, #13
    6522:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    6524:	4809      	ldr	r0, [pc, #36]	; (654c <nrfx_gpiote_channel_get+0x44>)
}
    6526:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    6528:	4e09      	ldr	r6, [pc, #36]	; (6550 <nrfx_gpiote_channel_get+0x48>)
    652a:	f240 2335 	movw	r3, #565	; 0x235
    652e:	4632      	mov	r2, r6
    6530:	4908      	ldr	r1, [pc, #32]	; (6554 <nrfx_gpiote_channel_get+0x4c>)
    6532:	4809      	ldr	r0, [pc, #36]	; (6558 <nrfx_gpiote_channel_get+0x50>)
    6534:	f003 fc9f 	bl	9e76 <assert_print>
    6538:	f240 2135 	movw	r1, #565	; 0x235
    653c:	4630      	mov	r0, r6
    653e:	f003 fc93 	bl	9e68 <assert_post_action>
    6542:	e7e5      	b.n	6510 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    6544:	4805      	ldr	r0, [pc, #20]	; (655c <nrfx_gpiote_channel_get+0x54>)
    6546:	e7ee      	b.n	6526 <nrfx_gpiote_channel_get+0x1e>
    6548:	2000405c 	.word	0x2000405c
    654c:	0bad0000 	.word	0x0bad0000
    6550:	0000c4dc 	.word	0x0000c4dc
    6554:	0000c530 	.word	0x0000c530
    6558:	0000b180 	.word	0x0000b180
    655c:	0bad0004 	.word	0x0bad0004

00006560 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    6560:	4b10      	ldr	r3, [pc, #64]	; (65a4 <nrfx_gpiote_init+0x44>)
    6562:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6566:	b10b      	cbz	r3, 656c <nrfx_gpiote_init+0xc>
        return err_code;
    6568:	480f      	ldr	r0, [pc, #60]	; (65a8 <nrfx_gpiote_init+0x48>)
}
    656a:	4770      	bx	lr
{
    656c:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    656e:	4c0d      	ldr	r4, [pc, #52]	; (65a4 <nrfx_gpiote_init+0x44>)
    6570:	2260      	movs	r2, #96	; 0x60
    6572:	2100      	movs	r1, #0
    6574:	f104 0010 	add.w	r0, r4, #16
    6578:	f003 fe39 	bl	a1ee <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    657c:	2006      	movs	r0, #6
    657e:	f7fc fb7f 	bl	2c80 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6582:	4b0a      	ldr	r3, [pc, #40]	; (65ac <nrfx_gpiote_init+0x4c>)
    6584:	2200      	movs	r2, #0
    6586:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    658a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    658e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6592:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6596:	2301      	movs	r3, #1
    6598:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    659c:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    659e:	4804      	ldr	r0, [pc, #16]	; (65b0 <nrfx_gpiote_init+0x50>)
}
    65a0:	bd10      	pop	{r4, pc}
    65a2:	bf00      	nop
    65a4:	2000405c 	.word	0x2000405c
    65a8:	0bad0005 	.word	0x0bad0005
    65ac:	40006000 	.word	0x40006000
    65b0:	0bad0000 	.word	0x0bad0000

000065b4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    65b4:	4b03      	ldr	r3, [pc, #12]	; (65c4 <nrfx_gpiote_is_init+0x10>)
    65b6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    65ba:	3800      	subs	r0, #0
    65bc:	bf18      	it	ne
    65be:	2001      	movne	r0, #1
    65c0:	4770      	bx	lr
    65c2:	bf00      	nop
    65c4:	2000405c 	.word	0x2000405c

000065c8 <nrfx_gpiote_channel_free>:
{
    65c8:	b508      	push	{r3, lr}
    65ca:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    65cc:	4801      	ldr	r0, [pc, #4]	; (65d4 <nrfx_gpiote_channel_free+0xc>)
    65ce:	f7ff f855 	bl	567c <nrfx_flag32_free>
}
    65d2:	bd08      	pop	{r3, pc}
    65d4:	200040cc 	.word	0x200040cc

000065d8 <nrfx_gpiote_channel_alloc>:
{
    65d8:	b508      	push	{r3, lr}
    65da:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    65dc:	4801      	ldr	r0, [pc, #4]	; (65e4 <nrfx_gpiote_channel_alloc+0xc>)
    65de:	f7ff f825 	bl	562c <nrfx_flag32_alloc>
}
    65e2:	bd08      	pop	{r3, pc}
    65e4:	200040cc 	.word	0x200040cc

000065e8 <nrfx_gpiote_trigger_enable>:
{
    65e8:	b570      	push	{r4, r5, r6, lr}
    65ea:	4604      	mov	r4, r0
    65ec:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    65ee:	f7ff fa2d 	bl	5a4c <pin_has_trigger>
    65f2:	b1b8      	cbz	r0, 6624 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    65f4:	4620      	mov	r0, r4
    65f6:	f7ff fa1f 	bl	5a38 <pin_in_use_by_te>
    65fa:	b118      	cbz	r0, 6604 <nrfx_gpiote_trigger_enable+0x1c>
    65fc:	4620      	mov	r0, r4
    65fe:	f004 fa80 	bl	ab02 <pin_is_input>
    6602:	b9e8      	cbnz	r0, 6640 <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    6604:	2d00      	cmp	r5, #0
    6606:	d04c      	beq.n	66a2 <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6608:	f104 0308 	add.w	r3, r4, #8
    660c:	4a70      	ldr	r2, [pc, #448]	; (67d0 <nrfx_gpiote_trigger_enable+0x1e8>)
    660e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    6612:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6616:	2b04      	cmp	r3, #4
    6618:	f000 8092 	beq.w	6740 <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    661c:	2b05      	cmp	r3, #5
    661e:	d14e      	bne.n	66be <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    6620:	2602      	movs	r6, #2
    6622:	e08e      	b.n	6742 <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    6624:	4e6b      	ldr	r6, [pc, #428]	; (67d4 <nrfx_gpiote_trigger_enable+0x1ec>)
    6626:	f240 33df 	movw	r3, #991	; 0x3df
    662a:	4632      	mov	r2, r6
    662c:	496a      	ldr	r1, [pc, #424]	; (67d8 <nrfx_gpiote_trigger_enable+0x1f0>)
    662e:	486b      	ldr	r0, [pc, #428]	; (67dc <nrfx_gpiote_trigger_enable+0x1f4>)
    6630:	f003 fc21 	bl	9e76 <assert_print>
    6634:	f240 31df 	movw	r1, #991	; 0x3df
    6638:	4630      	mov	r0, r6
    663a:	f003 fc15 	bl	9e68 <assert_post_action>
    663e:	e7d9      	b.n	65f4 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    6640:	4620      	mov	r0, r4
    6642:	f7ff fa19 	bl	5a78 <pin_te_get>
    6646:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    6648:	2807      	cmp	r0, #7
    664a:	d81c      	bhi.n	6686 <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    664c:	00a3      	lsls	r3, r4, #2
    664e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    6652:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    6654:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6658:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    665c:	2200      	movs	r2, #0
    665e:	601a      	str	r2, [r3, #0]
    6660:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    6662:	4a5f      	ldr	r2, [pc, #380]	; (67e0 <nrfx_gpiote_trigger_enable+0x1f8>)
    6664:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    6668:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    666c:	f043 0301 	orr.w	r3, r3, #1
    6670:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    6674:	2d00      	cmp	r5, #0
    6676:	f000 80a9 	beq.w	67cc <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    667a:	2001      	movs	r0, #1
    667c:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    6680:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    6684:	e0a2      	b.n	67cc <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    6686:	4e57      	ldr	r6, [pc, #348]	; (67e4 <nrfx_gpiote_trigger_enable+0x1fc>)
    6688:	f44f 7323 	mov.w	r3, #652	; 0x28c
    668c:	4632      	mov	r2, r6
    668e:	4956      	ldr	r1, [pc, #344]	; (67e8 <nrfx_gpiote_trigger_enable+0x200>)
    6690:	4852      	ldr	r0, [pc, #328]	; (67dc <nrfx_gpiote_trigger_enable+0x1f4>)
    6692:	f003 fbf0 	bl	9e76 <assert_print>
    6696:	f44f 7123 	mov.w	r1, #652	; 0x28c
    669a:	4630      	mov	r0, r6
    669c:	f003 fbe4 	bl	9e68 <assert_post_action>
    66a0:	e7d4      	b.n	664c <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    66a2:	4d4c      	ldr	r5, [pc, #304]	; (67d4 <nrfx_gpiote_trigger_enable+0x1ec>)
    66a4:	f240 33ee 	movw	r3, #1006	; 0x3ee
    66a8:	462a      	mov	r2, r5
    66aa:	4950      	ldr	r1, [pc, #320]	; (67ec <nrfx_gpiote_trigger_enable+0x204>)
    66ac:	484b      	ldr	r0, [pc, #300]	; (67dc <nrfx_gpiote_trigger_enable+0x1f4>)
    66ae:	f003 fbe2 	bl	9e76 <assert_print>
    66b2:	f240 31ee 	movw	r1, #1006	; 0x3ee
    66b6:	4628      	mov	r0, r5
    66b8:	f003 fbd6 	bl	9e68 <assert_post_action>
    66bc:	e7a4      	b.n	6608 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    66be:	0963      	lsrs	r3, r4, #5
    66c0:	d01f      	beq.n	6702 <nrfx_gpiote_trigger_enable+0x11a>
    66c2:	2b01      	cmp	r3, #1
    66c4:	d120      	bne.n	6708 <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    66c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    66ca:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    66ce:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    66d0:	f013 0f01 	tst.w	r3, #1
    66d4:	d01a      	beq.n	670c <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    66d6:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    66da:	0963      	lsrs	r3, r4, #5
    66dc:	d024      	beq.n	6728 <nrfx_gpiote_trigger_enable+0x140>
    66de:	2b01      	cmp	r3, #1
    66e0:	d025      	beq.n	672e <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    66e2:	4e43      	ldr	r6, [pc, #268]	; (67f0 <nrfx_gpiote_trigger_enable+0x208>)
    66e4:	f240 232e 	movw	r3, #558	; 0x22e
    66e8:	4632      	mov	r2, r6
    66ea:	4942      	ldr	r1, [pc, #264]	; (67f4 <nrfx_gpiote_trigger_enable+0x20c>)
    66ec:	483b      	ldr	r0, [pc, #236]	; (67dc <nrfx_gpiote_trigger_enable+0x1f4>)
    66ee:	f003 fbc2 	bl	9e76 <assert_print>
    66f2:	f240 212e 	movw	r1, #558	; 0x22e
    66f6:	4630      	mov	r0, r6
    66f8:	f003 fbb6 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    66fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6700:	e016      	b.n	6730 <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    6702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6706:	e7e0      	b.n	66ca <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    6708:	2300      	movs	r3, #0
    670a:	e7de      	b.n	66ca <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    670c:	4d38      	ldr	r5, [pc, #224]	; (67f0 <nrfx_gpiote_trigger_enable+0x208>)
    670e:	f240 2329 	movw	r3, #553	; 0x229
    6712:	462a      	mov	r2, r5
    6714:	4938      	ldr	r1, [pc, #224]	; (67f8 <nrfx_gpiote_trigger_enable+0x210>)
    6716:	4831      	ldr	r0, [pc, #196]	; (67dc <nrfx_gpiote_trigger_enable+0x1f4>)
    6718:	f003 fbad 	bl	9e76 <assert_print>
    671c:	f240 2129 	movw	r1, #553	; 0x229
    6720:	4628      	mov	r0, r5
    6722:	f003 fba1 	bl	9e68 <assert_post_action>
    6726:	e7d6      	b.n	66d6 <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    6728:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    672c:	e000      	b.n	6730 <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    672e:	4b33      	ldr	r3, [pc, #204]	; (67fc <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    6730:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6734:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6736:	f013 0f01 	tst.w	r3, #1
    673a:	d024      	beq.n	6786 <nrfx_gpiote_trigger_enable+0x19e>
    673c:	2603      	movs	r6, #3
    673e:	e000      	b.n	6742 <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    6740:	2603      	movs	r6, #3
    switch (port)
    6742:	0963      	lsrs	r3, r4, #5
    6744:	d021      	beq.n	678a <nrfx_gpiote_trigger_enable+0x1a2>
    6746:	2b01      	cmp	r3, #1
    6748:	d122      	bne.n	6790 <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    674a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    674e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6752:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6754:	f013 0f01 	tst.w	r3, #1
    6758:	d01c      	beq.n	6794 <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    675a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    675e:	0964      	lsrs	r4, r4, #5
    6760:	d026      	beq.n	67b0 <nrfx_gpiote_trigger_enable+0x1c8>
    6762:	2c01      	cmp	r4, #1
    6764:	d027      	beq.n	67b6 <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    6766:	4c22      	ldr	r4, [pc, #136]	; (67f0 <nrfx_gpiote_trigger_enable+0x208>)
    6768:	f240 232e 	movw	r3, #558	; 0x22e
    676c:	4622      	mov	r2, r4
    676e:	4921      	ldr	r1, [pc, #132]	; (67f4 <nrfx_gpiote_trigger_enable+0x20c>)
    6770:	481a      	ldr	r0, [pc, #104]	; (67dc <nrfx_gpiote_trigger_enable+0x1f4>)
    6772:	f003 fb80 	bl	9e76 <assert_print>
    6776:	f240 212e 	movw	r1, #558	; 0x22e
    677a:	4620      	mov	r0, r4
    677c:	f003 fb74 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    6780:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6784:	e018      	b.n	67b8 <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6786:	2602      	movs	r6, #2
    6788:	e7db      	b.n	6742 <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    678a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    678e:	e7de      	b.n	674e <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    6790:	2300      	movs	r3, #0
    6792:	e7dc      	b.n	674e <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6794:	4d16      	ldr	r5, [pc, #88]	; (67f0 <nrfx_gpiote_trigger_enable+0x208>)
    6796:	f240 2329 	movw	r3, #553	; 0x229
    679a:	462a      	mov	r2, r5
    679c:	4916      	ldr	r1, [pc, #88]	; (67f8 <nrfx_gpiote_trigger_enable+0x210>)
    679e:	480f      	ldr	r0, [pc, #60]	; (67dc <nrfx_gpiote_trigger_enable+0x1f4>)
    67a0:	f003 fb69 	bl	9e76 <assert_print>
    67a4:	f240 2129 	movw	r1, #553	; 0x229
    67a8:	4628      	mov	r0, r5
    67aa:	f003 fb5d 	bl	9e68 <assert_post_action>
    67ae:	e7d4      	b.n	675a <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    67b0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    67b4:	e000      	b.n	67b8 <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    67b6:	4911      	ldr	r1, [pc, #68]	; (67fc <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    67b8:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    67bc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    67c0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    67c4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    67c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    67cc:	bd70      	pop	{r4, r5, r6, pc}
    67ce:	bf00      	nop
    67d0:	2000405c 	.word	0x2000405c
    67d4:	0000c4dc 	.word	0x0000c4dc
    67d8:	0000c580 	.word	0x0000c580
    67dc:	0000b180 	.word	0x0000b180
    67e0:	40006000 	.word	0x40006000
    67e4:	0000c53c 	.word	0x0000c53c
    67e8:	0000c574 	.word	0x0000c574
    67ec:	0000c598 	.word	0x0000c598
    67f0:	0000c2b8 	.word	0x0000c2b8
    67f4:	0000b83c 	.word	0x0000b83c
    67f8:	0000c2ec 	.word	0x0000c2ec
    67fc:	50000300 	.word	0x50000300

00006800 <nrfx_gpiote_trigger_disable>:
{
    6800:	b538      	push	{r3, r4, r5, lr}
    6802:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6804:	f7ff f918 	bl	5a38 <pin_in_use_by_te>
    6808:	b1a0      	cbz	r0, 6834 <nrfx_gpiote_trigger_disable+0x34>
    680a:	4620      	mov	r0, r4
    680c:	f004 f979 	bl	ab02 <pin_is_input>
    6810:	b180      	cbz	r0, 6834 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    6812:	4620      	mov	r0, r4
    6814:	f7ff f930 	bl	5a78 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6818:	2201      	movs	r2, #1
    681a:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    681c:	4b26      	ldr	r3, [pc, #152]	; (68b8 <nrfx_gpiote_trigger_disable+0xb8>)
    681e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6822:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    6826:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    682a:	f022 0203 	bic.w	r2, r2, #3
    682e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    6832:	e040      	b.n	68b6 <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    6834:	0963      	lsrs	r3, r4, #5
    6836:	d01f      	beq.n	6878 <nrfx_gpiote_trigger_disable+0x78>
    6838:	2b01      	cmp	r3, #1
    683a:	d120      	bne.n	687e <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    683c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6840:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6844:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6846:	f013 0f01 	tst.w	r3, #1
    684a:	d01a      	beq.n	6882 <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    684c:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6850:	0964      	lsrs	r4, r4, #5
    6852:	d024      	beq.n	689e <nrfx_gpiote_trigger_disable+0x9e>
    6854:	2c01      	cmp	r4, #1
    6856:	d025      	beq.n	68a4 <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    6858:	4c18      	ldr	r4, [pc, #96]	; (68bc <nrfx_gpiote_trigger_disable+0xbc>)
    685a:	f240 232e 	movw	r3, #558	; 0x22e
    685e:	4622      	mov	r2, r4
    6860:	4917      	ldr	r1, [pc, #92]	; (68c0 <nrfx_gpiote_trigger_disable+0xc0>)
    6862:	4818      	ldr	r0, [pc, #96]	; (68c4 <nrfx_gpiote_trigger_disable+0xc4>)
    6864:	f003 fb07 	bl	9e76 <assert_print>
    6868:	f240 212e 	movw	r1, #558	; 0x22e
    686c:	4620      	mov	r0, r4
    686e:	f003 fafb 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    6872:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6876:	e016      	b.n	68a6 <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    6878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    687c:	e7e0      	b.n	6840 <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    687e:	2300      	movs	r3, #0
    6880:	e7de      	b.n	6840 <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6882:	4d0e      	ldr	r5, [pc, #56]	; (68bc <nrfx_gpiote_trigger_disable+0xbc>)
    6884:	f240 2329 	movw	r3, #553	; 0x229
    6888:	462a      	mov	r2, r5
    688a:	490f      	ldr	r1, [pc, #60]	; (68c8 <nrfx_gpiote_trigger_disable+0xc8>)
    688c:	480d      	ldr	r0, [pc, #52]	; (68c4 <nrfx_gpiote_trigger_disable+0xc4>)
    688e:	f003 faf2 	bl	9e76 <assert_print>
    6892:	f240 2129 	movw	r1, #553	; 0x229
    6896:	4628      	mov	r0, r5
    6898:	f003 fae6 	bl	9e68 <assert_post_action>
    689c:	e7d6      	b.n	684c <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    689e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    68a2:	e000      	b.n	68a6 <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    68a4:	4909      	ldr	r1, [pc, #36]	; (68cc <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    68a6:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    68aa:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    68ae:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    68b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    68b6:	bd38      	pop	{r3, r4, r5, pc}
    68b8:	40006000 	.word	0x40006000
    68bc:	0000c2b8 	.word	0x0000c2b8
    68c0:	0000b83c 	.word	0x0000b83c
    68c4:	0000b180 	.word	0x0000b180
    68c8:	0000c2ec 	.word	0x0000c2ec
    68cc:	50000300 	.word	0x50000300

000068d0 <nrfx_gpiote_pin_uninit>:
{
    68d0:	b538      	push	{r3, r4, r5, lr}
    68d2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    68d4:	f7ff f8a6 	bl	5a24 <pin_in_use>
    68d8:	b908      	cbnz	r0, 68de <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    68da:	4824      	ldr	r0, [pc, #144]	; (696c <nrfx_gpiote_pin_uninit+0x9c>)
}
    68dc:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    68de:	4620      	mov	r0, r4
    68e0:	f7ff ff8e 	bl	6800 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    68e4:	4620      	mov	r0, r4
    68e6:	f7ff f95f 	bl	5ba8 <pin_handler_trigger_uninit>
    switch (port)
    68ea:	0963      	lsrs	r3, r4, #5
    68ec:	d01f      	beq.n	692e <nrfx_gpiote_pin_uninit+0x5e>
    68ee:	2b01      	cmp	r3, #1
    68f0:	d120      	bne.n	6934 <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    68f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    68f6:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    68fa:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    68fc:	f013 0f01 	tst.w	r3, #1
    6900:	d01a      	beq.n	6938 <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    6902:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6906:	0964      	lsrs	r4, r4, #5
    6908:	d024      	beq.n	6954 <nrfx_gpiote_pin_uninit+0x84>
    690a:	2c01      	cmp	r4, #1
    690c:	d025      	beq.n	695a <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    690e:	4c18      	ldr	r4, [pc, #96]	; (6970 <nrfx_gpiote_pin_uninit+0xa0>)
    6910:	f240 232e 	movw	r3, #558	; 0x22e
    6914:	4622      	mov	r2, r4
    6916:	4917      	ldr	r1, [pc, #92]	; (6974 <nrfx_gpiote_pin_uninit+0xa4>)
    6918:	4817      	ldr	r0, [pc, #92]	; (6978 <nrfx_gpiote_pin_uninit+0xa8>)
    691a:	f003 faac 	bl	9e76 <assert_print>
    691e:	f240 212e 	movw	r1, #558	; 0x22e
    6922:	4620      	mov	r0, r4
    6924:	f003 faa0 	bl	9e68 <assert_post_action>
        case 0: return NRF_P0;
    6928:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    692c:	e016      	b.n	695c <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    692e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6932:	e7e0      	b.n	68f6 <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    6934:	2300      	movs	r3, #0
    6936:	e7de      	b.n	68f6 <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6938:	4d0d      	ldr	r5, [pc, #52]	; (6970 <nrfx_gpiote_pin_uninit+0xa0>)
    693a:	f240 2329 	movw	r3, #553	; 0x229
    693e:	462a      	mov	r2, r5
    6940:	490e      	ldr	r1, [pc, #56]	; (697c <nrfx_gpiote_pin_uninit+0xac>)
    6942:	480d      	ldr	r0, [pc, #52]	; (6978 <nrfx_gpiote_pin_uninit+0xa8>)
    6944:	f003 fa97 	bl	9e76 <assert_print>
    6948:	f240 2129 	movw	r1, #553	; 0x229
    694c:	4628      	mov	r0, r5
    694e:	f003 fa8b 	bl	9e68 <assert_post_action>
    6952:	e7d6      	b.n	6902 <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    6954:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6958:	e000      	b.n	695c <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    695a:	4b09      	ldr	r3, [pc, #36]	; (6980 <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    695c:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    6960:	2202      	movs	r2, #2
    6962:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    6966:	4807      	ldr	r0, [pc, #28]	; (6984 <nrfx_gpiote_pin_uninit+0xb4>)
}
    6968:	e7b8      	b.n	68dc <nrfx_gpiote_pin_uninit+0xc>
    696a:	bf00      	nop
    696c:	0bad0004 	.word	0x0bad0004
    6970:	0000c2b8 	.word	0x0000c2b8
    6974:	0000b83c 	.word	0x0000b83c
    6978:	0000b180 	.word	0x0000b180
    697c:	0000c2ec 	.word	0x0000c2ec
    6980:	50000300 	.word	0x50000300
    6984:	0bad0000 	.word	0x0bad0000

00006988 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    6988:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    698a:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    698c:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6990:	2100      	movs	r1, #0
    uint32_t status = 0;
    6992:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6994:	e003      	b.n	699e <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    6996:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    6998:	3304      	adds	r3, #4
    699a:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    699c:	3101      	adds	r1, #1
    699e:	2907      	cmp	r1, #7
    69a0:	d814      	bhi.n	69cc <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    69a2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    69a6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    69aa:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    69ac:	2a00      	cmp	r2, #0
    69ae:	d0f2      	beq.n	6996 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    69b0:	4a0c      	ldr	r2, [pc, #48]	; (69e4 <nrfx_gpiote_irq_handler+0x5c>)
    69b2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    69b6:	4210      	tst	r0, r2
    69b8:	d0ed      	beq.n	6996 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    69ba:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    69be:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    69c2:	2500      	movs	r5, #0
    69c4:	6015      	str	r5, [r2, #0]
    69c6:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    69c8:	4304      	orrs	r4, r0
    69ca:	e7e4      	b.n	6996 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    69cc:	4b05      	ldr	r3, [pc, #20]	; (69e4 <nrfx_gpiote_irq_handler+0x5c>)
    69ce:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    69d2:	b91b      	cbnz	r3, 69dc <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    69d4:	4620      	mov	r0, r4
    69d6:	f7ff f939 	bl	5c4c <gpiote_evt_handle>
}
    69da:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    69dc:	f7ff fac2 	bl	5f64 <port_event_handle>
    69e0:	e7f8      	b.n	69d4 <nrfx_gpiote_irq_handler+0x4c>
    69e2:	bf00      	nop
    69e4:	40006000 	.word	0x40006000

000069e8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    69e8:	b508      	push	{r3, lr}
    69ea:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    69ec:	4801      	ldr	r0, [pc, #4]	; (69f4 <nrfx_ppi_channel_alloc+0xc>)
    69ee:	f7fe fe1d 	bl	562c <nrfx_flag32_alloc>
}
    69f2:	bd08      	pop	{r3, pc}
    69f4:	200040d8 	.word	0x200040d8

000069f8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    69f8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    69fa:	4c11      	ldr	r4, [pc, #68]	; (6a40 <_DoInit+0x48>)
    69fc:	2303      	movs	r3, #3
    69fe:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    6a00:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    6a02:	4a10      	ldr	r2, [pc, #64]	; (6a44 <_DoInit+0x4c>)
    6a04:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6a06:	4b10      	ldr	r3, [pc, #64]	; (6a48 <_DoInit+0x50>)
    6a08:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    6a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    6a0e:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    6a10:	2300      	movs	r3, #0
    6a12:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    6a14:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6a16:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    6a18:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    6a1a:	4a0c      	ldr	r2, [pc, #48]	; (6a4c <_DoInit+0x54>)
    6a1c:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    6a1e:	2210      	movs	r2, #16
    6a20:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    6a22:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    6a24:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6a26:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    6a28:	4909      	ldr	r1, [pc, #36]	; (6a50 <_DoInit+0x58>)
    6a2a:	1de0      	adds	r0, r4, #7
    6a2c:	f003 fb79 	bl	a122 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    6a30:	4908      	ldr	r1, [pc, #32]	; (6a54 <_DoInit+0x5c>)
    6a32:	4620      	mov	r0, r4
    6a34:	f003 fb75 	bl	a122 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    6a38:	2320      	movs	r3, #32
    6a3a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    6a3c:	bd10      	pop	{r4, pc}
    6a3e:	bf00      	nop
    6a40:	20004a70 	.word	0x20004a70
    6a44:	0000c5a4 	.word	0x0000c5a4
    6a48:	20004b28 	.word	0x20004b28
    6a4c:	20004b18 	.word	0x20004b18
    6a50:	0000c5b0 	.word	0x0000c5b0
    6a54:	0000c5b4 	.word	0x0000c5b4

00006a58 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6a5c:	4604      	mov	r4, r0
    6a5e:	460e      	mov	r6, r1
    6a60:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    6a62:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6a66:	4a2d      	ldr	r2, [pc, #180]	; (6b1c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    6a68:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    6a6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    6a6e:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    6a70:	42bb      	cmp	r3, r7
    6a72:	d84b      	bhi.n	6b0c <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    6a74:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    6a78:	4928      	ldr	r1, [pc, #160]	; (6b1c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    6a7a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    6a7e:	f8d2 8020 	ldr.w	r8, [r2, #32]
    6a82:	eba8 0907 	sub.w	r9, r8, r7
    6a86:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    6a8a:	4295      	cmp	r5, r2
    6a8c:	d904      	bls.n	6a98 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    6a8e:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    6a90:	429d      	cmp	r5, r3
    6a92:	d916      	bls.n	6ac2 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    6a94:	2000      	movs	r0, #0
    6a96:	e03e      	b.n	6b16 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6a98:	f8df 8080 	ldr.w	r8, [pc, #128]	; 6b1c <SEGGER_RTT_WriteSkipNoLock+0xc4>
    6a9c:	1c63      	adds	r3, r4, #1
    6a9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6aa2:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    6aa6:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    6aa8:	462a      	mov	r2, r5
    6aaa:	4631      	mov	r1, r6
    6aac:	4438      	add	r0, r7
    6aae:	f003 fb6f 	bl	a190 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    6ab2:	443d      	add	r5, r7
    6ab4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6ab8:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    6abc:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    6abe:	2001      	movs	r0, #1
    6ac0:	e029      	b.n	6b16 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6ac2:	1c43      	adds	r3, r0, #1
    6ac4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6ac8:	4a14      	ldr	r2, [pc, #80]	; (6b1c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    6aca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6ace:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    6ad0:	464a      	mov	r2, r9
    6ad2:	4631      	mov	r1, r6
    6ad4:	4438      	add	r0, r7
    6ad6:	f003 fb5b 	bl	a190 <memcpy>
      NumBytes -= Rem;
    6ada:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    6ade:	197f      	adds	r7, r7, r5
    6ae0:	d107      	bne.n	6af2 <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    6ae2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6ae6:	4b0d      	ldr	r3, [pc, #52]	; (6b1c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    6ae8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    6aec:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    6aee:	2001      	movs	r0, #1
    6af0:	e011      	b.n	6b16 <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    6af2:	1c63      	adds	r3, r4, #1
    6af4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6af8:	4a08      	ldr	r2, [pc, #32]	; (6b1c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    6afa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    6afe:	463a      	mov	r2, r7
    6b00:	eb06 0109 	add.w	r1, r6, r9
    6b04:	6858      	ldr	r0, [r3, #4]
    6b06:	f003 fb43 	bl	a190 <memcpy>
    6b0a:	e7ea      	b.n	6ae2 <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    6b0c:	1bdb      	subs	r3, r3, r7
    6b0e:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    6b10:	42ab      	cmp	r3, r5
    6b12:	d2c1      	bcs.n	6a98 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    6b14:	2000      	movs	r0, #0
}
    6b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6b1a:	bf00      	nop
    6b1c:	20004a70 	.word	0x20004a70

00006b20 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    6b20:	4b06      	ldr	r3, [pc, #24]	; (6b3c <SEGGER_RTT_HasDataUp+0x1c>)
    6b22:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    6b26:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    6b2a:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    6b2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6b30:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6b34:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    6b36:	1a80      	subs	r0, r0, r2
    6b38:	4770      	bx	lr
    6b3a:	bf00      	nop
    6b3c:	20004a70 	.word	0x20004a70

00006b40 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    6b40:	4b03      	ldr	r3, [pc, #12]	; (6b50 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    6b42:	e000      	b.n	6b46 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    6b44:	3318      	adds	r3, #24
	while (dev < __device_end) {
    6b46:	4a03      	ldr	r2, [pc, #12]	; (6b54 <z_device_state_init+0x14>)
    6b48:	4293      	cmp	r3, r2
    6b4a:	d3fb      	bcc.n	6b44 <z_device_state_init+0x4>
	}
}
    6b4c:	4770      	bx	lr
    6b4e:	bf00      	nop
    6b50:	0000ad8c 	.word	0x0000ad8c
    6b54:	0000ae04 	.word	0x0000ae04

00006b58 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    6b58:	b570      	push	{r4, r5, r6, lr}
    6b5a:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6b5c:	4b11      	ldr	r3, [pc, #68]	; (6ba4 <z_sys_init_run_level+0x4c>)
    6b5e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    6b62:	e009      	b.n	6b78 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    6b64:	4240      	negs	r0, r0
    6b66:	e017      	b.n	6b98 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    6b68:	68eb      	ldr	r3, [r5, #12]
    6b6a:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    6b6c:	68ea      	ldr	r2, [r5, #12]
    6b6e:	7853      	ldrb	r3, [r2, #1]
    6b70:	f043 0301 	orr.w	r3, r3, #1
    6b74:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6b76:	3408      	adds	r4, #8
    6b78:	1c73      	adds	r3, r6, #1
    6b7a:	4a0a      	ldr	r2, [pc, #40]	; (6ba4 <z_sys_init_run_level+0x4c>)
    6b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b80:	42a3      	cmp	r3, r4
    6b82:	d90d      	bls.n	6ba0 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    6b84:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    6b86:	6823      	ldr	r3, [r4, #0]
    6b88:	4628      	mov	r0, r5
    6b8a:	4798      	blx	r3
		if (dev != NULL) {
    6b8c:	2d00      	cmp	r5, #0
    6b8e:	d0f2      	beq.n	6b76 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    6b90:	2800      	cmp	r0, #0
    6b92:	d0eb      	beq.n	6b6c <z_sys_init_run_level+0x14>
				if (rc < 0) {
    6b94:	2800      	cmp	r0, #0
    6b96:	dbe5      	blt.n	6b64 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    6b98:	28ff      	cmp	r0, #255	; 0xff
    6b9a:	dde5      	ble.n	6b68 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    6b9c:	20ff      	movs	r0, #255	; 0xff
    6b9e:	e7e3      	b.n	6b68 <z_sys_init_run_level+0x10>
		}
	}
}
    6ba0:	bd70      	pop	{r4, r5, r6, pc}
    6ba2:	bf00      	nop
    6ba4:	0000c5bc 	.word	0x0000c5bc

00006ba8 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    6ba8:	2804      	cmp	r0, #4
    6baa:	d80c      	bhi.n	6bc6 <reason_to_str+0x1e>
    6bac:	e8df f000 	tbb	[pc, r0]
    6bb0:	07050d03 	.word	0x07050d03
    6bb4:	09          	.byte	0x09
    6bb5:	00          	.byte	0x00
    6bb6:	4806      	ldr	r0, [pc, #24]	; (6bd0 <reason_to_str+0x28>)
    6bb8:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    6bba:	4806      	ldr	r0, [pc, #24]	; (6bd4 <reason_to_str+0x2c>)
    6bbc:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    6bbe:	4806      	ldr	r0, [pc, #24]	; (6bd8 <reason_to_str+0x30>)
    6bc0:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    6bc2:	4806      	ldr	r0, [pc, #24]	; (6bdc <reason_to_str+0x34>)
    6bc4:	4770      	bx	lr
	default:
		return "Unknown error";
    6bc6:	4806      	ldr	r0, [pc, #24]	; (6be0 <reason_to_str+0x38>)
    6bc8:	4770      	bx	lr
		return "Unhandled interrupt";
    6bca:	4806      	ldr	r0, [pc, #24]	; (6be4 <reason_to_str+0x3c>)
	}
}
    6bcc:	4770      	bx	lr
    6bce:	bf00      	nop
    6bd0:	0000c624 	.word	0x0000c624
    6bd4:	0000c5f8 	.word	0x0000c5f8
    6bd8:	0000c608 	.word	0x0000c608
    6bdc:	0000c614 	.word	0x0000c614
    6be0:	0000c5d4 	.word	0x0000c5d4
    6be4:	0000c5e4 	.word	0x0000c5e4

00006be8 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    6be8:	b130      	cbz	r0, 6bf8 <thread_name_get+0x10>
{
    6bea:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    6bec:	f004 f802 	bl	abf4 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    6bf0:	b120      	cbz	r0, 6bfc <thread_name_get+0x14>
    6bf2:	7803      	ldrb	r3, [r0, #0]
    6bf4:	b123      	cbz	r3, 6c00 <thread_name_get+0x18>
}
    6bf6:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    6bf8:	4802      	ldr	r0, [pc, #8]	; (6c04 <thread_name_get+0x1c>)
}
    6bfa:	4770      	bx	lr
		thread_name = "unknown";
    6bfc:	4801      	ldr	r0, [pc, #4]	; (6c04 <thread_name_get+0x1c>)
    6bfe:	e7fa      	b.n	6bf6 <thread_name_get+0xe>
    6c00:	4800      	ldr	r0, [pc, #0]	; (6c04 <thread_name_get+0x1c>)
	return thread_name;
    6c02:	e7f8      	b.n	6bf6 <thread_name_get+0xe>
    6c04:	0000c634 	.word	0x0000c634

00006c08 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c0a:	b087      	sub	sp, #28
    6c0c:	4604      	mov	r4, r0
    6c0e:	460e      	mov	r6, r1
	__asm__ volatile(
    6c10:	f04f 0320 	mov.w	r3, #32
    6c14:	f3ef 8711 	mrs	r7, BASEPRI
    6c18:	f383 8812 	msr	BASEPRI_MAX, r3
    6c1c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    6c20:	f002 f918 	bl	8e54 <z_impl_z_current_get>
    6c24:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    6c26:	4620      	mov	r0, r4
    6c28:	f7ff ffbe 	bl	6ba8 <reason_to_str>
    6c2c:	2300      	movs	r3, #0
    6c2e:	9305      	str	r3, [sp, #20]
    6c30:	9004      	str	r0, [sp, #16]
    6c32:	9403      	str	r4, [sp, #12]
    6c34:	4a22      	ldr	r2, [pc, #136]	; (6cc0 <z_fatal_error+0xb8>)
    6c36:	9202      	str	r2, [sp, #8]
    6c38:	9301      	str	r3, [sp, #4]
    6c3a:	9300      	str	r3, [sp, #0]
    6c3c:	2201      	movs	r2, #1
    6c3e:	4921      	ldr	r1, [pc, #132]	; (6cc4 <z_fatal_error+0xbc>)
    6c40:	4618      	mov	r0, r3
    6c42:	f003 ff82 	bl	ab4a <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    6c46:	b11e      	cbz	r6, 6c50 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    6c48:	69f3      	ldr	r3, [r6, #28]
    6c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    6c4e:	b9eb      	cbnz	r3, 6c8c <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    6c50:	4628      	mov	r0, r5
    6c52:	f7ff ffc9 	bl	6be8 <thread_name_get>
    6c56:	9004      	str	r0, [sp, #16]
    6c58:	9503      	str	r5, [sp, #12]
    6c5a:	4b1b      	ldr	r3, [pc, #108]	; (6cc8 <z_fatal_error+0xc0>)
    6c5c:	9302      	str	r3, [sp, #8]
    6c5e:	2000      	movs	r0, #0
    6c60:	9001      	str	r0, [sp, #4]
    6c62:	9000      	str	r0, [sp, #0]
    6c64:	4603      	mov	r3, r0
    6c66:	2201      	movs	r2, #1
    6c68:	4916      	ldr	r1, [pc, #88]	; (6cc4 <z_fatal_error+0xbc>)
    6c6a:	f003 ff6e 	bl	ab4a <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    6c6e:	4631      	mov	r1, r6
    6c70:	4620      	mov	r0, r4
    6c72:	f7fe fbd5 	bl	5420 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    6c76:	2c04      	cmp	r4, #4
    6c78:	d013      	beq.n	6ca2 <z_fatal_error+0x9a>
	__asm__ volatile(
    6c7a:	f387 8811 	msr	BASEPRI, r7
    6c7e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    6c82:	4628      	mov	r0, r5
    6c84:	f7fc fd54 	bl	3730 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6c88:	b007      	add	sp, #28
    6c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
    6c8c:	4b0f      	ldr	r3, [pc, #60]	; (6ccc <z_fatal_error+0xc4>)
    6c8e:	9302      	str	r3, [sp, #8]
    6c90:	2000      	movs	r0, #0
    6c92:	9001      	str	r0, [sp, #4]
    6c94:	9000      	str	r0, [sp, #0]
    6c96:	4603      	mov	r3, r0
    6c98:	2201      	movs	r2, #1
    6c9a:	490a      	ldr	r1, [pc, #40]	; (6cc4 <z_fatal_error+0xbc>)
    6c9c:	f003 ff55 	bl	ab4a <z_log_msg2_runtime_create>
    6ca0:	e7d6      	b.n	6c50 <z_fatal_error+0x48>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    6ca2:	4c0b      	ldr	r4, [pc, #44]	; (6cd0 <z_fatal_error+0xc8>)
    6ca4:	238f      	movs	r3, #143	; 0x8f
    6ca6:	4622      	mov	r2, r4
    6ca8:	490a      	ldr	r1, [pc, #40]	; (6cd4 <z_fatal_error+0xcc>)
    6caa:	480b      	ldr	r0, [pc, #44]	; (6cd8 <z_fatal_error+0xd0>)
    6cac:	f003 f8e3 	bl	9e76 <assert_print>
    6cb0:	480a      	ldr	r0, [pc, #40]	; (6cdc <z_fatal_error+0xd4>)
    6cb2:	f003 f8e0 	bl	9e76 <assert_print>
    6cb6:	218f      	movs	r1, #143	; 0x8f
    6cb8:	4620      	mov	r0, r4
    6cba:	f003 f8d5 	bl	9e68 <assert_post_action>
    6cbe:	e7dc      	b.n	6c7a <z_fatal_error+0x72>
    6cc0:	0000c63c 	.word	0x0000c63c
    6cc4:	0000afac 	.word	0x0000afac
    6cc8:	0000c688 	.word	0x0000c688
    6ccc:	0000c664 	.word	0x0000c664
    6cd0:	0000c6a0 	.word	0x0000c6a0
    6cd4:	0000c6c4 	.word	0x0000c6c4
    6cd8:	0000b180 	.word	0x0000b180
    6cdc:	0000c6e4 	.word	0x0000c6e4

00006ce0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    6ce0:	b510      	push	{r4, lr}
    6ce2:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    6ce4:	4c11      	ldr	r4, [pc, #68]	; (6d2c <init_idle_thread+0x4c>)
    6ce6:	23b0      	movs	r3, #176	; 0xb0
    6ce8:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6cec:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    6cf0:	4b0f      	ldr	r3, [pc, #60]	; (6d30 <init_idle_thread+0x50>)
    6cf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    6cf6:	4a0f      	ldr	r2, [pc, #60]	; (6d34 <init_idle_thread+0x54>)
    6cf8:	9205      	str	r2, [sp, #20]
    6cfa:	2201      	movs	r2, #1
    6cfc:	9204      	str	r2, [sp, #16]
    6cfe:	220f      	movs	r2, #15
    6d00:	9203      	str	r2, [sp, #12]
    6d02:	2200      	movs	r2, #0
    6d04:	9202      	str	r2, [sp, #8]
    6d06:	9201      	str	r2, [sp, #4]
    6d08:	9300      	str	r3, [sp, #0]
    6d0a:	4b0b      	ldr	r3, [pc, #44]	; (6d38 <init_idle_thread+0x58>)
    6d0c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    6d10:	490a      	ldr	r1, [pc, #40]	; (6d3c <init_idle_thread+0x5c>)
    6d12:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    6d16:	fb0c 1100 	mla	r1, ip, r0, r1
    6d1a:	4620      	mov	r0, r4
    6d1c:	f000 fa76 	bl	720c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6d20:	7b63      	ldrb	r3, [r4, #13]
    6d22:	f023 0304 	bic.w	r3, r3, #4
    6d26:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    6d28:	b006      	add	sp, #24
    6d2a:	bd10      	pop	{r4, pc}
    6d2c:	20004290 	.word	0x20004290
    6d30:	20004f28 	.word	0x20004f28
    6d34:	0000c71c 	.word	0x0000c71c
    6d38:	00007521 	.word	0x00007521
    6d3c:	200059a0 	.word	0x200059a0

00006d40 <bg_thread_main>:
{
    6d40:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    6d42:	4b0a      	ldr	r3, [pc, #40]	; (6d6c <bg_thread_main+0x2c>)
    6d44:	2201      	movs	r2, #1
    6d46:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6d48:	2002      	movs	r0, #2
    6d4a:	f7ff ff05 	bl	6b58 <z_sys_init_run_level>
	boot_banner();
    6d4e:	f002 fca9 	bl	96a4 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    6d52:	2003      	movs	r0, #3
    6d54:	f7ff ff00 	bl	6b58 <z_sys_init_run_level>
	z_init_static_threads();
    6d58:	f000 fb68 	bl	742c <z_init_static_threads>
	main();
    6d5c:	f7f9 fc12 	bl	584 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    6d60:	4a03      	ldr	r2, [pc, #12]	; (6d70 <bg_thread_main+0x30>)
    6d62:	7b13      	ldrb	r3, [r2, #12]
    6d64:	f023 0301 	bic.w	r3, r3, #1
    6d68:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    6d6a:	bd08      	pop	{r3, pc}
    6d6c:	20005156 	.word	0x20005156
    6d70:	20004340 	.word	0x20004340

00006d74 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    6d74:	b508      	push	{r3, lr}
    6d76:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    6d78:	4a01      	ldr	r2, [pc, #4]	; (6d80 <switch_to_main_thread+0xc>)
    6d7a:	4802      	ldr	r0, [pc, #8]	; (6d84 <switch_to_main_thread+0x10>)
    6d7c:	f7fc f894 	bl	2ea8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    6d80:	00006d41 	.word	0x00006d41
    6d84:	20004340 	.word	0x20004340

00006d88 <z_bss_zero>:
{
    6d88:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    6d8a:	4803      	ldr	r0, [pc, #12]	; (6d98 <z_bss_zero+0x10>)
    6d8c:	4a03      	ldr	r2, [pc, #12]	; (6d9c <z_bss_zero+0x14>)
    6d8e:	1a12      	subs	r2, r2, r0
    6d90:	2100      	movs	r1, #0
    6d92:	f003 fee9 	bl	ab68 <z_early_memset>
}
    6d96:	bd08      	pop	{r3, pc}
    6d98:	200041c0 	.word	0x200041c0
    6d9c:	20005158 	.word	0x20005158

00006da0 <z_init_cpu>:
{
    6da0:	b510      	push	{r4, lr}
    6da2:	4604      	mov	r4, r0
	init_idle_thread(id);
    6da4:	f7ff ff9c 	bl	6ce0 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    6da8:	490b      	ldr	r1, [pc, #44]	; (6dd8 <z_init_cpu+0x38>)
    6daa:	23b0      	movs	r3, #176	; 0xb0
    6dac:	fb03 1104 	mla	r1, r3, r4, r1
    6db0:	4a0a      	ldr	r2, [pc, #40]	; (6ddc <z_init_cpu+0x3c>)
    6db2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    6db6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6dba:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    6dbc:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    6dbe:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    6dc2:	4b07      	ldr	r3, [pc, #28]	; (6de0 <z_init_cpu+0x40>)
    6dc4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    6dc8:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    6dcc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6dd0:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    6dd4:	6063      	str	r3, [r4, #4]
}
    6dd6:	bd10      	pop	{r4, pc}
    6dd8:	20004290 	.word	0x20004290
    6ddc:	20004f28 	.word	0x20004f28
    6de0:	20005b00 	.word	0x20005b00

00006de4 <prepare_multithreading>:
{
    6de4:	b570      	push	{r4, r5, r6, lr}
    6de6:	b086      	sub	sp, #24
	z_sched_init();
    6de8:	f001 fe70 	bl	8acc <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    6dec:	4d10      	ldr	r5, [pc, #64]	; (6e30 <prepare_multithreading+0x4c>)
    6dee:	4b11      	ldr	r3, [pc, #68]	; (6e34 <prepare_multithreading+0x50>)
    6df0:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6df2:	4b11      	ldr	r3, [pc, #68]	; (6e38 <prepare_multithreading+0x54>)
    6df4:	9305      	str	r3, [sp, #20]
    6df6:	2301      	movs	r3, #1
    6df8:	9304      	str	r3, [sp, #16]
    6dfa:	2400      	movs	r4, #0
    6dfc:	9403      	str	r4, [sp, #12]
    6dfe:	9402      	str	r4, [sp, #8]
    6e00:	9401      	str	r4, [sp, #4]
    6e02:	9400      	str	r4, [sp, #0]
    6e04:	4b0d      	ldr	r3, [pc, #52]	; (6e3c <prepare_multithreading+0x58>)
    6e06:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6e0a:	490d      	ldr	r1, [pc, #52]	; (6e40 <prepare_multithreading+0x5c>)
    6e0c:	4628      	mov	r0, r5
    6e0e:	f000 f9fd 	bl	720c <z_setup_new_thread>
    6e12:	4606      	mov	r6, r0
    6e14:	7b6b      	ldrb	r3, [r5, #13]
    6e16:	f023 0304 	bic.w	r3, r3, #4
    6e1a:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    6e1c:	4628      	mov	r0, r5
    6e1e:	f001 f9d9 	bl	81d4 <z_ready_thread>
	z_init_cpu(0);
    6e22:	4620      	mov	r0, r4
    6e24:	f7ff ffbc 	bl	6da0 <z_init_cpu>
}
    6e28:	4630      	mov	r0, r6
    6e2a:	b006      	add	sp, #24
    6e2c:	bd70      	pop	{r4, r5, r6, pc}
    6e2e:	bf00      	nop
    6e30:	20004340 	.word	0x20004340
    6e34:	20004f28 	.word	0x20004f28
    6e38:	0000c724 	.word	0x0000c724
    6e3c:	00006d41 	.word	0x00006d41
    6e40:	20005580 	.word	0x20005580

00006e44 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    6e44:	b500      	push	{lr}
    6e46:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    6e48:	4b1f      	ldr	r3, [pc, #124]	; (6ec8 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    6e4a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    6e4e:	4c1f      	ldr	r4, [pc, #124]	; (6ecc <z_cstart+0x88>)
    6e50:	6963      	ldr	r3, [r4, #20]
    6e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    6e56:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6e58:	23e0      	movs	r3, #224	; 0xe0
    6e5a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    6e5e:	2500      	movs	r5, #0
    6e60:	77e5      	strb	r5, [r4, #31]
    6e62:	7625      	strb	r5, [r4, #24]
    6e64:	7665      	strb	r5, [r4, #25]
    6e66:	76a5      	strb	r5, [r4, #26]
    6e68:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    6e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6e6e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    6e72:	6263      	str	r3, [r4, #36]	; 0x24
    6e74:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    6e78:	f7fc fbc6 	bl	3608 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    6e7c:	f7fb fe98 	bl	2bb0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    6e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e84:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    6e86:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    6e88:	f7fc fd72 	bl	3970 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    6e8c:	f7fc fc6a 	bl	3764 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    6e90:	f7fa ffba 	bl	1e08 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    6e94:	2401      	movs	r4, #1
    6e96:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    6e9a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    6e9e:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    6ea0:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    6ea2:	4668      	mov	r0, sp
    6ea4:	f002 fbf8 	bl	9698 <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    6ea8:	4b09      	ldr	r3, [pc, #36]	; (6ed0 <z_cstart+0x8c>)
    6eaa:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    6eae:	f7ff fe47 	bl	6b40 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    6eb2:	4628      	mov	r0, r5
    6eb4:	f7ff fe50 	bl	6b58 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    6eb8:	4620      	mov	r0, r4
    6eba:	f7ff fe4d 	bl	6b58 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    6ebe:	f7ff ff91 	bl	6de4 <prepare_multithreading>
    6ec2:	f7ff ff57 	bl	6d74 <switch_to_main_thread>
    6ec6:	bf00      	nop
    6ec8:	20006320 	.word	0x20006320
    6ecc:	e000ed00 	.word	0xe000ed00
    6ed0:	20004f28 	.word	0x20004f28

00006ed4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    6ed4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    6ed6:	4c10      	ldr	r4, [pc, #64]	; (6f18 <init_mem_slab_module+0x44>)
	int rc = 0;
    6ed8:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    6eda:	e008      	b.n	6eee <init_mem_slab_module+0x1a>
    6edc:	4b0f      	ldr	r3, [pc, #60]	; (6f1c <init_mem_slab_module+0x48>)
    6ede:	429c      	cmp	r4, r3
    6ee0:	d217      	bcs.n	6f12 <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    6ee2:	4620      	mov	r0, r4
    6ee4:	f003 fe48 	bl	ab78 <create_free_list>
		if (rc < 0) {
    6ee8:	1e05      	subs	r5, r0, #0
    6eea:	db12      	blt.n	6f12 <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    6eec:	3420      	adds	r4, #32
    6eee:	4b0b      	ldr	r3, [pc, #44]	; (6f1c <init_mem_slab_module+0x48>)
    6ef0:	429c      	cmp	r4, r3
    6ef2:	d9f3      	bls.n	6edc <init_mem_slab_module+0x8>
    6ef4:	4e0a      	ldr	r6, [pc, #40]	; (6f20 <init_mem_slab_module+0x4c>)
    6ef6:	233d      	movs	r3, #61	; 0x3d
    6ef8:	4632      	mov	r2, r6
    6efa:	490a      	ldr	r1, [pc, #40]	; (6f24 <init_mem_slab_module+0x50>)
    6efc:	480a      	ldr	r0, [pc, #40]	; (6f28 <init_mem_slab_module+0x54>)
    6efe:	f002 ffba 	bl	9e76 <assert_print>
    6f02:	480a      	ldr	r0, [pc, #40]	; (6f2c <init_mem_slab_module+0x58>)
    6f04:	f002 ffb7 	bl	9e76 <assert_print>
    6f08:	213d      	movs	r1, #61	; 0x3d
    6f0a:	4630      	mov	r0, r6
    6f0c:	f002 ffac 	bl	9e68 <assert_post_action>
    6f10:	e7e4      	b.n	6edc <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    6f12:	4628      	mov	r0, r5
    6f14:	bd70      	pop	{r4, r5, r6, pc}
    6f16:	bf00      	nop
    6f18:	20004158 	.word	0x20004158
    6f1c:	20004158 	.word	0x20004158
    6f20:	0000c730 	.word	0x0000c730
    6f24:	0000c758 	.word	0x0000c758
    6f28:	0000b180 	.word	0x0000b180
    6f2c:	0000c778 	.word	0x0000c778

00006f30 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    6f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6f34:	b082      	sub	sp, #8
    6f36:	4604      	mov	r4, r0
    6f38:	460e      	mov	r6, r1
    6f3a:	4690      	mov	r8, r2
    6f3c:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    6f3e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    6f42:	f04f 0320 	mov.w	r3, #32
    6f46:	f3ef 8711 	mrs	r7, BASEPRI
    6f4a:	f383 8812 	msr	BASEPRI_MAX, r3
    6f4e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f52:	4628      	mov	r0, r5
    6f54:	f000 f8d8 	bl	7108 <z_spin_lock_valid>
    6f58:	b1c0      	cbz	r0, 6f8c <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    6f5a:	4628      	mov	r0, r5
    6f5c:	f000 f8f4 	bl	7148 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    6f60:	69a1      	ldr	r1, [r4, #24]
    6f62:	b321      	cbz	r1, 6fae <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    6f64:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    6f66:	69a3      	ldr	r3, [r4, #24]
    6f68:	681b      	ldr	r3, [r3, #0]
    6f6a:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    6f6c:	69e3      	ldr	r3, [r4, #28]
    6f6e:	3301      	adds	r3, #1
    6f70:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    6f72:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6f74:	4628      	mov	r0, r5
    6f76:	f000 f8d7 	bl	7128 <z_spin_unlock_valid>
    6f7a:	b388      	cbz	r0, 6fe0 <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    6f7c:	f387 8811 	msr	BASEPRI, r7
    6f80:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    6f84:	4620      	mov	r0, r4
    6f86:	b002      	add	sp, #8
    6f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f8c:	f8df a070 	ldr.w	sl, [pc, #112]	; 7000 <k_mem_slab_alloc+0xd0>
    6f90:	238e      	movs	r3, #142	; 0x8e
    6f92:	4652      	mov	r2, sl
    6f94:	491b      	ldr	r1, [pc, #108]	; (7004 <k_mem_slab_alloc+0xd4>)
    6f96:	481c      	ldr	r0, [pc, #112]	; (7008 <k_mem_slab_alloc+0xd8>)
    6f98:	f002 ff6d 	bl	9e76 <assert_print>
    6f9c:	4629      	mov	r1, r5
    6f9e:	481b      	ldr	r0, [pc, #108]	; (700c <k_mem_slab_alloc+0xdc>)
    6fa0:	f002 ff69 	bl	9e76 <assert_print>
    6fa4:	218e      	movs	r1, #142	; 0x8e
    6fa6:	4650      	mov	r0, sl
    6fa8:	f002 ff5e 	bl	9e68 <assert_post_action>
    6fac:	e7d5      	b.n	6f5a <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    6fae:	ea59 0308 	orrs.w	r3, r9, r8
    6fb2:	d104      	bne.n	6fbe <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    6fb4:	2300      	movs	r3, #0
    6fb6:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    6fb8:	f06f 040b 	mvn.w	r4, #11
    6fbc:	e7da      	b.n	6f74 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    6fbe:	f8cd 8000 	str.w	r8, [sp]
    6fc2:	f8cd 9004 	str.w	r9, [sp, #4]
    6fc6:	4622      	mov	r2, r4
    6fc8:	4639      	mov	r1, r7
    6fca:	4628      	mov	r0, r5
    6fcc:	f001 fade 	bl	858c <z_pend_curr>
		if (result == 0) {
    6fd0:	4604      	mov	r4, r0
    6fd2:	2800      	cmp	r0, #0
    6fd4:	d1d6      	bne.n	6f84 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    6fd6:	4b0e      	ldr	r3, [pc, #56]	; (7010 <k_mem_slab_alloc+0xe0>)
    6fd8:	689b      	ldr	r3, [r3, #8]
    6fda:	695b      	ldr	r3, [r3, #20]
    6fdc:	6033      	str	r3, [r6, #0]
		return result;
    6fde:	e7d1      	b.n	6f84 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6fe0:	4e07      	ldr	r6, [pc, #28]	; (7000 <k_mem_slab_alloc+0xd0>)
    6fe2:	23b9      	movs	r3, #185	; 0xb9
    6fe4:	4632      	mov	r2, r6
    6fe6:	490b      	ldr	r1, [pc, #44]	; (7014 <k_mem_slab_alloc+0xe4>)
    6fe8:	4807      	ldr	r0, [pc, #28]	; (7008 <k_mem_slab_alloc+0xd8>)
    6fea:	f002 ff44 	bl	9e76 <assert_print>
    6fee:	4629      	mov	r1, r5
    6ff0:	4809      	ldr	r0, [pc, #36]	; (7018 <k_mem_slab_alloc+0xe8>)
    6ff2:	f002 ff40 	bl	9e76 <assert_print>
    6ff6:	21b9      	movs	r1, #185	; 0xb9
    6ff8:	4630      	mov	r0, r6
    6ffa:	f002 ff35 	bl	9e68 <assert_post_action>
    6ffe:	e7bd      	b.n	6f7c <k_mem_slab_alloc+0x4c>
    7000:	0000b32c 	.word	0x0000b32c
    7004:	0000b38c 	.word	0x0000b38c
    7008:	0000b180 	.word	0x0000b180
    700c:	0000b3a4 	.word	0x0000b3a4
    7010:	20004f28 	.word	0x20004f28
    7014:	0000b35c 	.word	0x0000b35c
    7018:	0000b374 	.word	0x0000b374

0000701c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    701c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7020:	4604      	mov	r4, r0
    7022:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    7024:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    7028:	f04f 0320 	mov.w	r3, #32
    702c:	f3ef 8711 	mrs	r7, BASEPRI
    7030:	f383 8812 	msr	BASEPRI_MAX, r3
    7034:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7038:	4630      	mov	r0, r6
    703a:	f000 f865 	bl	7108 <z_spin_lock_valid>
    703e:	b1b0      	cbz	r0, 706e <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    7040:	4630      	mov	r0, r6
    7042:	f000 f881 	bl	7148 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    7046:	69a3      	ldr	r3, [r4, #24]
    7048:	b313      	cbz	r3, 7090 <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    704a:	682b      	ldr	r3, [r5, #0]
    704c:	69a2      	ldr	r2, [r4, #24]
    704e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    7050:	682b      	ldr	r3, [r5, #0]
    7052:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    7054:	69e3      	ldr	r3, [r4, #28]
    7056:	3b01      	subs	r3, #1
    7058:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    705a:	4630      	mov	r0, r6
    705c:	f000 f864 	bl	7128 <z_spin_unlock_valid>
    7060:	b338      	cbz	r0, 70b2 <k_mem_slab_free+0x96>
	__asm__ volatile(
    7062:	f387 8811 	msr	BASEPRI, r7
    7066:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    706a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    706e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 70d4 <k_mem_slab_free+0xb8>
    7072:	238e      	movs	r3, #142	; 0x8e
    7074:	4642      	mov	r2, r8
    7076:	4918      	ldr	r1, [pc, #96]	; (70d8 <k_mem_slab_free+0xbc>)
    7078:	4818      	ldr	r0, [pc, #96]	; (70dc <k_mem_slab_free+0xc0>)
    707a:	f002 fefc 	bl	9e76 <assert_print>
    707e:	4631      	mov	r1, r6
    7080:	4817      	ldr	r0, [pc, #92]	; (70e0 <k_mem_slab_free+0xc4>)
    7082:	f002 fef8 	bl	9e76 <assert_print>
    7086:	218e      	movs	r1, #142	; 0x8e
    7088:	4640      	mov	r0, r8
    708a:	f002 feed 	bl	9e68 <assert_post_action>
    708e:	e7d7      	b.n	7040 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    7090:	4620      	mov	r0, r4
    7092:	f001 fcb7 	bl	8a04 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    7096:	2800      	cmp	r0, #0
    7098:	d0d7      	beq.n	704a <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    709a:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    709c:	2100      	movs	r1, #0
    709e:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    70a2:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    70a4:	f001 f896 	bl	81d4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    70a8:	4639      	mov	r1, r7
    70aa:	4630      	mov	r0, r6
    70ac:	f000 fdee 	bl	7c8c <z_reschedule>
			return;
    70b0:	e7db      	b.n	706a <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    70b2:	4c08      	ldr	r4, [pc, #32]	; (70d4 <k_mem_slab_free+0xb8>)
    70b4:	23b9      	movs	r3, #185	; 0xb9
    70b6:	4622      	mov	r2, r4
    70b8:	490a      	ldr	r1, [pc, #40]	; (70e4 <k_mem_slab_free+0xc8>)
    70ba:	4808      	ldr	r0, [pc, #32]	; (70dc <k_mem_slab_free+0xc0>)
    70bc:	f002 fedb 	bl	9e76 <assert_print>
    70c0:	4631      	mov	r1, r6
    70c2:	4809      	ldr	r0, [pc, #36]	; (70e8 <k_mem_slab_free+0xcc>)
    70c4:	f002 fed7 	bl	9e76 <assert_print>
    70c8:	21b9      	movs	r1, #185	; 0xb9
    70ca:	4620      	mov	r0, r4
    70cc:	f002 fecc 	bl	9e68 <assert_post_action>
    70d0:	e7c7      	b.n	7062 <k_mem_slab_free+0x46>
    70d2:	bf00      	nop
    70d4:	0000b32c 	.word	0x0000b32c
    70d8:	0000b38c 	.word	0x0000b38c
    70dc:	0000b180 	.word	0x0000b180
    70e0:	0000b3a4 	.word	0x0000b3a4
    70e4:	0000b35c 	.word	0x0000b35c
    70e8:	0000b374 	.word	0x0000b374

000070ec <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    70ec:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    70ee:	ea53 0102 	orrs.w	r1, r3, r2
    70f2:	d102      	bne.n	70fa <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    70f4:	f003 fd80 	bl	abf8 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    70f8:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    70fa:	4902      	ldr	r1, [pc, #8]	; (7104 <schedule_new_thread+0x18>)
    70fc:	3018      	adds	r0, #24
    70fe:	f001 ffb3 	bl	9068 <z_add_timeout>
    7102:	e7f9      	b.n	70f8 <schedule_new_thread+0xc>
    7104:	00008331 	.word	0x00008331

00007108 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    7108:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    710a:	b13b      	cbz	r3, 711c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    710c:	f003 0303 	and.w	r3, r3, #3
    7110:	4a04      	ldr	r2, [pc, #16]	; (7124 <z_spin_lock_valid+0x1c>)
    7112:	7d12      	ldrb	r2, [r2, #20]
    7114:	4293      	cmp	r3, r2
    7116:	d003      	beq.n	7120 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    7118:	2001      	movs	r0, #1
    711a:	4770      	bx	lr
    711c:	2001      	movs	r0, #1
    711e:	4770      	bx	lr
			return false;
    7120:	2000      	movs	r0, #0
}
    7122:	4770      	bx	lr
    7124:	20004f28 	.word	0x20004f28

00007128 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7128:	6801      	ldr	r1, [r0, #0]
    712a:	4a06      	ldr	r2, [pc, #24]	; (7144 <z_spin_unlock_valid+0x1c>)
    712c:	7d13      	ldrb	r3, [r2, #20]
    712e:	6892      	ldr	r2, [r2, #8]
    7130:	4313      	orrs	r3, r2
    7132:	4299      	cmp	r1, r3
    7134:	d103      	bne.n	713e <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    7136:	2300      	movs	r3, #0
    7138:	6003      	str	r3, [r0, #0]
	return true;
    713a:	2001      	movs	r0, #1
    713c:	4770      	bx	lr
		return false;
    713e:	2000      	movs	r0, #0
}
    7140:	4770      	bx	lr
    7142:	bf00      	nop
    7144:	20004f28 	.word	0x20004f28

00007148 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    7148:	4a02      	ldr	r2, [pc, #8]	; (7154 <z_spin_lock_set_owner+0xc>)
    714a:	7d13      	ldrb	r3, [r2, #20]
    714c:	6892      	ldr	r2, [r2, #8]
    714e:	4313      	orrs	r3, r2
    7150:	6003      	str	r3, [r0, #0]
}
    7152:	4770      	bx	lr
    7154:	20004f28 	.word	0x20004f28

00007158 <z_thread_monitor_exit>:
{
    7158:	b570      	push	{r4, r5, r6, lr}
    715a:	4604      	mov	r4, r0
	__asm__ volatile(
    715c:	f04f 0320 	mov.w	r3, #32
    7160:	f3ef 8511 	mrs	r5, BASEPRI
    7164:	f383 8812 	msr	BASEPRI_MAX, r3
    7168:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    716c:	481f      	ldr	r0, [pc, #124]	; (71ec <z_thread_monitor_exit+0x94>)
    716e:	f7ff ffcb 	bl	7108 <z_spin_lock_valid>
    7172:	b150      	cbz	r0, 718a <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    7174:	481d      	ldr	r0, [pc, #116]	; (71ec <z_thread_monitor_exit+0x94>)
    7176:	f7ff ffe7 	bl	7148 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    717a:	4b1d      	ldr	r3, [pc, #116]	; (71f0 <z_thread_monitor_exit+0x98>)
    717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    717e:	42a3      	cmp	r3, r4
    7180:	d114      	bne.n	71ac <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    7182:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    7184:	4b1a      	ldr	r3, [pc, #104]	; (71f0 <z_thread_monitor_exit+0x98>)
    7186:	629a      	str	r2, [r3, #40]	; 0x28
    7188:	e017      	b.n	71ba <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    718a:	4e1a      	ldr	r6, [pc, #104]	; (71f4 <z_thread_monitor_exit+0x9c>)
    718c:	238e      	movs	r3, #142	; 0x8e
    718e:	4632      	mov	r2, r6
    7190:	4919      	ldr	r1, [pc, #100]	; (71f8 <z_thread_monitor_exit+0xa0>)
    7192:	481a      	ldr	r0, [pc, #104]	; (71fc <z_thread_monitor_exit+0xa4>)
    7194:	f002 fe6f 	bl	9e76 <assert_print>
    7198:	4914      	ldr	r1, [pc, #80]	; (71ec <z_thread_monitor_exit+0x94>)
    719a:	4819      	ldr	r0, [pc, #100]	; (7200 <z_thread_monitor_exit+0xa8>)
    719c:	f002 fe6b 	bl	9e76 <assert_print>
    71a0:	218e      	movs	r1, #142	; 0x8e
    71a2:	4630      	mov	r0, r6
    71a4:	f002 fe60 	bl	9e68 <assert_post_action>
    71a8:	e7e4      	b.n	7174 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    71aa:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    71ac:	b113      	cbz	r3, 71b4 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    71ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    71b0:	42a2      	cmp	r2, r4
    71b2:	d1fa      	bne.n	71aa <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    71b4:	b10b      	cbz	r3, 71ba <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    71b6:	6f22      	ldr	r2, [r4, #112]	; 0x70
    71b8:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    71ba:	480c      	ldr	r0, [pc, #48]	; (71ec <z_thread_monitor_exit+0x94>)
    71bc:	f7ff ffb4 	bl	7128 <z_spin_unlock_valid>
    71c0:	b120      	cbz	r0, 71cc <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    71c2:	f385 8811 	msr	BASEPRI, r5
    71c6:	f3bf 8f6f 	isb	sy
}
    71ca:	bd70      	pop	{r4, r5, r6, pc}
    71cc:	4c09      	ldr	r4, [pc, #36]	; (71f4 <z_thread_monitor_exit+0x9c>)
    71ce:	23b9      	movs	r3, #185	; 0xb9
    71d0:	4622      	mov	r2, r4
    71d2:	490c      	ldr	r1, [pc, #48]	; (7204 <z_thread_monitor_exit+0xac>)
    71d4:	4809      	ldr	r0, [pc, #36]	; (71fc <z_thread_monitor_exit+0xa4>)
    71d6:	f002 fe4e 	bl	9e76 <assert_print>
    71da:	4904      	ldr	r1, [pc, #16]	; (71ec <z_thread_monitor_exit+0x94>)
    71dc:	480a      	ldr	r0, [pc, #40]	; (7208 <z_thread_monitor_exit+0xb0>)
    71de:	f002 fe4a 	bl	9e76 <assert_print>
    71e2:	21b9      	movs	r1, #185	; 0xb9
    71e4:	4620      	mov	r0, r4
    71e6:	f002 fe3f 	bl	9e68 <assert_post_action>
    71ea:	e7ea      	b.n	71c2 <z_thread_monitor_exit+0x6a>
    71ec:	20004f54 	.word	0x20004f54
    71f0:	20004f28 	.word	0x20004f28
    71f4:	0000b32c 	.word	0x0000b32c
    71f8:	0000b38c 	.word	0x0000b38c
    71fc:	0000b180 	.word	0x0000b180
    7200:	0000b3a4 	.word	0x0000b3a4
    7204:	0000b35c 	.word	0x0000b35c
    7208:	0000b374 	.word	0x0000b374

0000720c <z_setup_new_thread>:
{
    720c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7210:	b085      	sub	sp, #20
    7212:	4604      	mov	r4, r0
    7214:	460e      	mov	r6, r1
    7216:	4690      	mov	r8, r2
    7218:	461d      	mov	r5, r3
    721a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    721e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    7222:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    7224:	2f0f      	cmp	r7, #15
    7226:	d05e      	beq.n	72e6 <z_setup_new_thread+0xda>
    7228:	f107 0310 	add.w	r3, r7, #16
    722c:	2b1e      	cmp	r3, #30
    722e:	d85e      	bhi.n	72ee <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    7230:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    7234:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    7236:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    7238:	9b12      	ldr	r3, [sp, #72]	; 0x48
    723a:	2204      	movs	r2, #4
    723c:	4639      	mov	r1, r7
    723e:	4620      	mov	r0, r4
    7240:	f003 fcde 	bl	ac00 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    7244:	4642      	mov	r2, r8
    7246:	4631      	mov	r1, r6
    7248:	4620      	mov	r0, r4
    724a:	f003 fcbb 	bl	abc4 <setup_thread_stack>
    724e:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7250:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7252:	9302      	str	r3, [sp, #8]
    7254:	f8cd a004 	str.w	sl, [sp, #4]
    7258:	f8cd b000 	str.w	fp, [sp]
    725c:	462b      	mov	r3, r5
    725e:	4602      	mov	r2, r0
    7260:	4631      	mov	r1, r6
    7262:	4620      	mov	r0, r4
    7264:	f7fb fdd6 	bl	2e14 <arch_new_thread>
	new_thread->init_data = NULL;
    7268:	2300      	movs	r3, #0
    726a:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    726c:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    726e:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    7272:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    7276:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7278:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    727a:	f04f 0320 	mov.w	r3, #32
    727e:	f3ef 8611 	mrs	r6, BASEPRI
    7282:	f383 8812 	msr	BASEPRI_MAX, r3
    7286:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    728a:	4837      	ldr	r0, [pc, #220]	; (7368 <z_setup_new_thread+0x15c>)
    728c:	f7ff ff3c 	bl	7108 <z_spin_lock_valid>
    7290:	2800      	cmp	r0, #0
    7292:	d042      	beq.n	731a <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    7294:	4d34      	ldr	r5, [pc, #208]	; (7368 <z_setup_new_thread+0x15c>)
    7296:	4628      	mov	r0, r5
    7298:	f7ff ff56 	bl	7148 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    729c:	4b33      	ldr	r3, [pc, #204]	; (736c <z_setup_new_thread+0x160>)
    729e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    72a0:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    72a2:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    72a4:	4628      	mov	r0, r5
    72a6:	f7ff ff3f 	bl	7128 <z_spin_unlock_valid>
    72aa:	2800      	cmp	r0, #0
    72ac:	d045      	beq.n	733a <z_setup_new_thread+0x12e>
	__asm__ volatile(
    72ae:	f386 8811 	msr	BASEPRI, r6
    72b2:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    72b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    72b8:	2b00      	cmp	r3, #0
    72ba:	d04e      	beq.n	735a <z_setup_new_thread+0x14e>
		strncpy(new_thread->name, name,
    72bc:	221f      	movs	r2, #31
    72be:	4619      	mov	r1, r3
    72c0:	f104 0074 	add.w	r0, r4, #116	; 0x74
    72c4:	f002 ff37 	bl	a136 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    72c8:	2300      	movs	r3, #0
    72ca:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    72ce:	4b27      	ldr	r3, [pc, #156]	; (736c <z_setup_new_thread+0x160>)
    72d0:	689b      	ldr	r3, [r3, #8]
    72d2:	2b00      	cmp	r3, #0
    72d4:	d045      	beq.n	7362 <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    72d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    72da:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    72de:	4638      	mov	r0, r7
    72e0:	b005      	add	sp, #20
    72e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    72e6:	4b22      	ldr	r3, [pc, #136]	; (7370 <z_setup_new_thread+0x164>)
    72e8:	429d      	cmp	r5, r3
    72ea:	d19d      	bne.n	7228 <z_setup_new_thread+0x1c>
    72ec:	e7a0      	b.n	7230 <z_setup_new_thread+0x24>
    72ee:	f8df 9084 	ldr.w	r9, [pc, #132]	; 7374 <z_setup_new_thread+0x168>
    72f2:	f240 13ff 	movw	r3, #511	; 0x1ff
    72f6:	464a      	mov	r2, r9
    72f8:	491f      	ldr	r1, [pc, #124]	; (7378 <z_setup_new_thread+0x16c>)
    72fa:	4820      	ldr	r0, [pc, #128]	; (737c <z_setup_new_thread+0x170>)
    72fc:	f002 fdbb 	bl	9e76 <assert_print>
    7300:	f06f 030f 	mvn.w	r3, #15
    7304:	220e      	movs	r2, #14
    7306:	4639      	mov	r1, r7
    7308:	481d      	ldr	r0, [pc, #116]	; (7380 <z_setup_new_thread+0x174>)
    730a:	f002 fdb4 	bl	9e76 <assert_print>
    730e:	f240 11ff 	movw	r1, #511	; 0x1ff
    7312:	4648      	mov	r0, r9
    7314:	f002 fda8 	bl	9e68 <assert_post_action>
    7318:	e78a      	b.n	7230 <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    731a:	4d1a      	ldr	r5, [pc, #104]	; (7384 <z_setup_new_thread+0x178>)
    731c:	238e      	movs	r3, #142	; 0x8e
    731e:	462a      	mov	r2, r5
    7320:	4919      	ldr	r1, [pc, #100]	; (7388 <z_setup_new_thread+0x17c>)
    7322:	4816      	ldr	r0, [pc, #88]	; (737c <z_setup_new_thread+0x170>)
    7324:	f002 fda7 	bl	9e76 <assert_print>
    7328:	490f      	ldr	r1, [pc, #60]	; (7368 <z_setup_new_thread+0x15c>)
    732a:	4818      	ldr	r0, [pc, #96]	; (738c <z_setup_new_thread+0x180>)
    732c:	f002 fda3 	bl	9e76 <assert_print>
    7330:	218e      	movs	r1, #142	; 0x8e
    7332:	4628      	mov	r0, r5
    7334:	f002 fd98 	bl	9e68 <assert_post_action>
    7338:	e7ac      	b.n	7294 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    733a:	4d12      	ldr	r5, [pc, #72]	; (7384 <z_setup_new_thread+0x178>)
    733c:	23b9      	movs	r3, #185	; 0xb9
    733e:	462a      	mov	r2, r5
    7340:	4913      	ldr	r1, [pc, #76]	; (7390 <z_setup_new_thread+0x184>)
    7342:	480e      	ldr	r0, [pc, #56]	; (737c <z_setup_new_thread+0x170>)
    7344:	f002 fd97 	bl	9e76 <assert_print>
    7348:	4907      	ldr	r1, [pc, #28]	; (7368 <z_setup_new_thread+0x15c>)
    734a:	4812      	ldr	r0, [pc, #72]	; (7394 <z_setup_new_thread+0x188>)
    734c:	f002 fd93 	bl	9e76 <assert_print>
    7350:	21b9      	movs	r1, #185	; 0xb9
    7352:	4628      	mov	r0, r5
    7354:	f002 fd88 	bl	9e68 <assert_post_action>
    7358:	e7a9      	b.n	72ae <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    735a:	2300      	movs	r3, #0
    735c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    7360:	e7b5      	b.n	72ce <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    7362:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    7366:	e7ba      	b.n	72de <z_setup_new_thread+0xd2>
    7368:	20004f54 	.word	0x20004f54
    736c:	20004f28 	.word	0x20004f28
    7370:	00007521 	.word	0x00007521
    7374:	0000c798 	.word	0x0000c798
    7378:	0000c7f0 	.word	0x0000c7f0
    737c:	0000b180 	.word	0x0000b180
    7380:	0000c870 	.word	0x0000c870
    7384:	0000b32c 	.word	0x0000b32c
    7388:	0000b38c 	.word	0x0000b38c
    738c:	0000b3a4 	.word	0x0000b3a4
    7390:	0000b35c 	.word	0x0000b35c
    7394:	0000b374 	.word	0x0000b374

00007398 <z_impl_k_thread_create>:
{
    7398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    739c:	b086      	sub	sp, #24
    739e:	4604      	mov	r4, r0
    73a0:	460d      	mov	r5, r1
    73a2:	4616      	mov	r6, r2
    73a4:	461f      	mov	r7, r3
    73a6:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    73aa:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    73ae:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    73b2:	b9db      	cbnz	r3, 73ec <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    73b4:	2300      	movs	r3, #0
    73b6:	9305      	str	r3, [sp, #20]
    73b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    73ba:	9304      	str	r3, [sp, #16]
    73bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    73be:	9303      	str	r3, [sp, #12]
    73c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    73c2:	9302      	str	r3, [sp, #8]
    73c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    73c6:	9301      	str	r3, [sp, #4]
    73c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    73ca:	9300      	str	r3, [sp, #0]
    73cc:	463b      	mov	r3, r7
    73ce:	4632      	mov	r2, r6
    73d0:	4629      	mov	r1, r5
    73d2:	4620      	mov	r0, r4
    73d4:	f7ff ff1a 	bl	720c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    73d8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    73dc:	bf08      	it	eq
    73de:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    73e2:	d115      	bne.n	7410 <z_impl_k_thread_create+0x78>
}
    73e4:	4620      	mov	r0, r4
    73e6:	b006      	add	sp, #24
    73e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    73ec:	f8df a02c 	ldr.w	sl, [pc, #44]	; 741c <z_impl_k_thread_create+0x84>
    73f0:	f240 236e 	movw	r3, #622	; 0x26e
    73f4:	4652      	mov	r2, sl
    73f6:	490a      	ldr	r1, [pc, #40]	; (7420 <z_impl_k_thread_create+0x88>)
    73f8:	480a      	ldr	r0, [pc, #40]	; (7424 <z_impl_k_thread_create+0x8c>)
    73fa:	f002 fd3c 	bl	9e76 <assert_print>
    73fe:	480a      	ldr	r0, [pc, #40]	; (7428 <z_impl_k_thread_create+0x90>)
    7400:	f002 fd39 	bl	9e76 <assert_print>
    7404:	f240 216e 	movw	r1, #622	; 0x26e
    7408:	4650      	mov	r0, sl
    740a:	f002 fd2d 	bl	9e68 <assert_post_action>
    740e:	e7d1      	b.n	73b4 <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    7410:	464a      	mov	r2, r9
    7412:	4643      	mov	r3, r8
    7414:	4620      	mov	r0, r4
    7416:	f7ff fe69 	bl	70ec <schedule_new_thread>
    741a:	e7e3      	b.n	73e4 <z_impl_k_thread_create+0x4c>
    741c:	0000c798 	.word	0x0000c798
    7420:	0000c8a4 	.word	0x0000c8a4
    7424:	0000b180 	.word	0x0000b180
    7428:	0000c8b8 	.word	0x0000c8b8

0000742c <z_init_static_threads>:
{
    742c:	b530      	push	{r4, r5, lr}
    742e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    7430:	4c35      	ldr	r4, [pc, #212]	; (7508 <z_init_static_threads+0xdc>)
    7432:	e017      	b.n	7464 <z_init_static_threads+0x38>
    7434:	4b35      	ldr	r3, [pc, #212]	; (750c <z_init_static_threads+0xe0>)
    7436:	429c      	cmp	r4, r3
    7438:	d228      	bcs.n	748c <z_init_static_threads+0x60>
		z_setup_new_thread(
    743a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    743c:	9305      	str	r3, [sp, #20]
    743e:	6a23      	ldr	r3, [r4, #32]
    7440:	9304      	str	r3, [sp, #16]
    7442:	69e3      	ldr	r3, [r4, #28]
    7444:	9303      	str	r3, [sp, #12]
    7446:	69a3      	ldr	r3, [r4, #24]
    7448:	9302      	str	r3, [sp, #8]
    744a:	6963      	ldr	r3, [r4, #20]
    744c:	9301      	str	r3, [sp, #4]
    744e:	6923      	ldr	r3, [r4, #16]
    7450:	9300      	str	r3, [sp, #0]
    7452:	68e3      	ldr	r3, [r4, #12]
    7454:	68a2      	ldr	r2, [r4, #8]
    7456:	6861      	ldr	r1, [r4, #4]
    7458:	6820      	ldr	r0, [r4, #0]
    745a:	f7ff fed7 	bl	720c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    745e:	6823      	ldr	r3, [r4, #0]
    7460:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    7462:	3430      	adds	r4, #48	; 0x30
    7464:	4b29      	ldr	r3, [pc, #164]	; (750c <z_init_static_threads+0xe0>)
    7466:	429c      	cmp	r4, r3
    7468:	d9e4      	bls.n	7434 <z_init_static_threads+0x8>
    746a:	4d29      	ldr	r5, [pc, #164]	; (7510 <z_init_static_threads+0xe4>)
    746c:	f240 23d5 	movw	r3, #725	; 0x2d5
    7470:	462a      	mov	r2, r5
    7472:	4928      	ldr	r1, [pc, #160]	; (7514 <z_init_static_threads+0xe8>)
    7474:	4828      	ldr	r0, [pc, #160]	; (7518 <z_init_static_threads+0xec>)
    7476:	f002 fcfe 	bl	9e76 <assert_print>
    747a:	4828      	ldr	r0, [pc, #160]	; (751c <z_init_static_threads+0xf0>)
    747c:	f002 fcfb 	bl	9e76 <assert_print>
    7480:	f240 21d5 	movw	r1, #725	; 0x2d5
    7484:	4628      	mov	r0, r5
    7486:	f002 fcef 	bl	9e68 <assert_post_action>
    748a:	e7d3      	b.n	7434 <z_init_static_threads+0x8>
	k_sched_lock();
    748c:	f000 fc4c 	bl	7d28 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7490:	4c1d      	ldr	r4, [pc, #116]	; (7508 <z_init_static_threads+0xdc>)
    7492:	e000      	b.n	7496 <z_init_static_threads+0x6a>
    7494:	3430      	adds	r4, #48	; 0x30
    7496:	4b1d      	ldr	r3, [pc, #116]	; (750c <z_init_static_threads+0xe0>)
    7498:	429c      	cmp	r4, r3
    749a:	d81f      	bhi.n	74dc <z_init_static_threads+0xb0>
    749c:	4b1b      	ldr	r3, [pc, #108]	; (750c <z_init_static_threads+0xe0>)
    749e:	429c      	cmp	r4, r3
    74a0:	d22d      	bcs.n	74fe <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    74a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    74a4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    74a8:	d0f4      	beq.n	7494 <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    74aa:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    74ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    74b0:	17c1      	asrs	r1, r0, #31
			return ((t * to_hz + off) / from_hz);
    74b2:	03c9      	lsls	r1, r1, #15
    74b4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    74b8:	03c0      	lsls	r0, r0, #15
    74ba:	f240 33e7 	movw	r3, #999	; 0x3e7
    74be:	18c0      	adds	r0, r0, r3
    74c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    74c4:	f04f 0300 	mov.w	r3, #0
    74c8:	f141 0100 	adc.w	r1, r1, #0
    74cc:	f7f8 fe18 	bl	100 <__aeabi_uldivmod>
    74d0:	4602      	mov	r2, r0
    74d2:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    74d4:	4628      	mov	r0, r5
    74d6:	f7ff fe09 	bl	70ec <schedule_new_thread>
    74da:	e7db      	b.n	7494 <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    74dc:	4d0c      	ldr	r5, [pc, #48]	; (7510 <z_init_static_threads+0xe4>)
    74de:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    74e2:	462a      	mov	r2, r5
    74e4:	490b      	ldr	r1, [pc, #44]	; (7514 <z_init_static_threads+0xe8>)
    74e6:	480c      	ldr	r0, [pc, #48]	; (7518 <z_init_static_threads+0xec>)
    74e8:	f002 fcc5 	bl	9e76 <assert_print>
    74ec:	480b      	ldr	r0, [pc, #44]	; (751c <z_init_static_threads+0xf0>)
    74ee:	f002 fcc2 	bl	9e76 <assert_print>
    74f2:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    74f6:	4628      	mov	r0, r5
    74f8:	f002 fcb6 	bl	9e68 <assert_post_action>
    74fc:	e7ce      	b.n	749c <z_init_static_threads+0x70>
	k_sched_unlock();
    74fe:	f001 f99f 	bl	8840 <k_sched_unlock>
}
    7502:	b007      	add	sp, #28
    7504:	bd30      	pop	{r4, r5, pc}
    7506:	bf00      	nop
    7508:	20004158 	.word	0x20004158
    750c:	20004158 	.word	0x20004158
    7510:	0000c798 	.word	0x0000c798
    7514:	0000c8e0 	.word	0x0000c8e0
    7518:	0000b180 	.word	0x0000b180
    751c:	0000c778 	.word	0x0000c778

00007520 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    7520:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    7522:	4b14      	ldr	r3, [pc, #80]	; (7574 <idle+0x54>)
    7524:	689b      	ldr	r3, [r3, #8]
    7526:	f993 300e 	ldrsb.w	r3, [r3, #14]
    752a:	2b00      	cmp	r3, #0
    752c:	da0d      	bge.n	754a <idle+0x2a>
    752e:	4c12      	ldr	r4, [pc, #72]	; (7578 <idle+0x58>)
    7530:	2327      	movs	r3, #39	; 0x27
    7532:	4622      	mov	r2, r4
    7534:	4911      	ldr	r1, [pc, #68]	; (757c <idle+0x5c>)
    7536:	4812      	ldr	r0, [pc, #72]	; (7580 <idle+0x60>)
    7538:	f002 fc9d 	bl	9e76 <assert_print>
    753c:	2127      	movs	r1, #39	; 0x27
    753e:	4620      	mov	r0, r4
    7540:	f002 fc92 	bl	9e68 <assert_post_action>
    7544:	e001      	b.n	754a <idle+0x2a>
	arch_cpu_idle();
    7546:	f7fb fb39 	bl	2bbc <arch_cpu_idle>
	__asm__ volatile(
    754a:	f04f 0220 	mov.w	r2, #32
    754e:	f3ef 8311 	mrs	r3, BASEPRI
    7552:	f382 8812 	msr	BASEPRI_MAX, r2
    7556:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    755a:	f001 fec3 	bl	92e4 <z_get_next_timeout_expiry>
    755e:	4b05      	ldr	r3, [pc, #20]	; (7574 <idle+0x54>)
    7560:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    7562:	4b08      	ldr	r3, [pc, #32]	; (7584 <idle+0x64>)
    7564:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7566:	2b00      	cmp	r3, #0
    7568:	d0ed      	beq.n	7546 <idle+0x26>
    756a:	f7fb f8f3 	bl	2754 <pm_system_suspend>
    756e:	2800      	cmp	r0, #0
    7570:	d1eb      	bne.n	754a <idle+0x2a>
    7572:	e7e8      	b.n	7546 <idle+0x26>
    7574:	20004f28 	.word	0x20004f28
    7578:	0000c910 	.word	0x0000c910
    757c:	0000c934 	.word	0x0000c934
    7580:	0000b180 	.word	0x0000b180
    7584:	20005156 	.word	0x20005156

00007588 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    7588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    758c:	b083      	sub	sp, #12
    758e:	4604      	mov	r4, r0
    7590:	4616      	mov	r6, r2
    7592:	461d      	mov	r5, r3
    7594:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7598:	2900      	cmp	r1, #0
    759a:	d12b      	bne.n	75f4 <z_impl_k_mutex_lock+0x6c>
    759c:	f04f 0320 	mov.w	r3, #32
    75a0:	f3ef 8711 	mrs	r7, BASEPRI
    75a4:	f383 8812 	msr	BASEPRI_MAX, r3
    75a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    75ac:	487b      	ldr	r0, [pc, #492]	; (779c <z_impl_k_mutex_lock+0x214>)
    75ae:	f7ff fdab 	bl	7108 <z_spin_lock_valid>
    75b2:	2800      	cmp	r0, #0
    75b4:	d02d      	beq.n	7612 <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    75b6:	4879      	ldr	r0, [pc, #484]	; (779c <z_impl_k_mutex_lock+0x214>)
    75b8:	f7ff fdc6 	bl	7148 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    75bc:	68e1      	ldr	r1, [r4, #12]
    75be:	2900      	cmp	r1, #0
    75c0:	d138      	bne.n	7634 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    75c2:	2900      	cmp	r1, #0
    75c4:	d17d      	bne.n	76c2 <z_impl_k_mutex_lock+0x13a>
    75c6:	4b76      	ldr	r3, [pc, #472]	; (77a0 <z_impl_k_mutex_lock+0x218>)
    75c8:	689b      	ldr	r3, [r3, #8]
    75ca:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    75ce:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    75d0:	3101      	adds	r1, #1
    75d2:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    75d4:	4b72      	ldr	r3, [pc, #456]	; (77a0 <z_impl_k_mutex_lock+0x218>)
    75d6:	689b      	ldr	r3, [r3, #8]
    75d8:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    75da:	4870      	ldr	r0, [pc, #448]	; (779c <z_impl_k_mutex_lock+0x214>)
    75dc:	f7ff fda4 	bl	7128 <z_spin_unlock_valid>
    75e0:	2800      	cmp	r0, #0
    75e2:	d070      	beq.n	76c6 <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    75e4:	f387 8811 	msr	BASEPRI, r7
    75e8:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    75ec:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    75ee:	b003      	add	sp, #12
    75f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    75f4:	4f6b      	ldr	r7, [pc, #428]	; (77a4 <z_impl_k_mutex_lock+0x21c>)
    75f6:	2365      	movs	r3, #101	; 0x65
    75f8:	463a      	mov	r2, r7
    75fa:	496b      	ldr	r1, [pc, #428]	; (77a8 <z_impl_k_mutex_lock+0x220>)
    75fc:	486b      	ldr	r0, [pc, #428]	; (77ac <z_impl_k_mutex_lock+0x224>)
    75fe:	f002 fc3a 	bl	9e76 <assert_print>
    7602:	486b      	ldr	r0, [pc, #428]	; (77b0 <z_impl_k_mutex_lock+0x228>)
    7604:	f002 fc37 	bl	9e76 <assert_print>
    7608:	2165      	movs	r1, #101	; 0x65
    760a:	4638      	mov	r0, r7
    760c:	f002 fc2c 	bl	9e68 <assert_post_action>
    7610:	e7c4      	b.n	759c <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7612:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 77b4 <z_impl_k_mutex_lock+0x22c>
    7616:	238e      	movs	r3, #142	; 0x8e
    7618:	4642      	mov	r2, r8
    761a:	4967      	ldr	r1, [pc, #412]	; (77b8 <z_impl_k_mutex_lock+0x230>)
    761c:	4863      	ldr	r0, [pc, #396]	; (77ac <z_impl_k_mutex_lock+0x224>)
    761e:	f002 fc2a 	bl	9e76 <assert_print>
    7622:	495e      	ldr	r1, [pc, #376]	; (779c <z_impl_k_mutex_lock+0x214>)
    7624:	4865      	ldr	r0, [pc, #404]	; (77bc <z_impl_k_mutex_lock+0x234>)
    7626:	f002 fc26 	bl	9e76 <assert_print>
    762a:	218e      	movs	r1, #142	; 0x8e
    762c:	4640      	mov	r0, r8
    762e:	f002 fc1b 	bl	9e68 <assert_post_action>
    7632:	e7c0      	b.n	75b6 <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7634:	68a2      	ldr	r2, [r4, #8]
    7636:	4b5a      	ldr	r3, [pc, #360]	; (77a0 <z_impl_k_mutex_lock+0x218>)
    7638:	689b      	ldr	r3, [r3, #8]
    763a:	429a      	cmp	r2, r3
    763c:	d0c1      	beq.n	75c2 <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    763e:	ea55 0106 	orrs.w	r1, r5, r6
    7642:	bf0c      	ite	eq
    7644:	f04f 0801 	moveq.w	r8, #1
    7648:	f04f 0800 	movne.w	r8, #0
    764c:	d04b      	beq.n	76e6 <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    764e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    7652:	4649      	mov	r1, r9
    7654:	f993 000e 	ldrsb.w	r0, [r3, #14]
    7658:	f003 fae3 	bl	ac22 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    765c:	4581      	cmp	r9, r0
    765e:	dc5d      	bgt.n	771c <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    7660:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    7664:	9600      	str	r6, [sp, #0]
    7666:	9501      	str	r5, [sp, #4]
    7668:	4622      	mov	r2, r4
    766a:	4639      	mov	r1, r7
    766c:	484b      	ldr	r0, [pc, #300]	; (779c <z_impl_k_mutex_lock+0x214>)
    766e:	f000 ff8d 	bl	858c <z_pend_curr>
	if (got_mutex == 0) {
    7672:	2800      	cmp	r0, #0
    7674:	d0bb      	beq.n	75ee <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    7676:	f04f 0320 	mov.w	r3, #32
    767a:	f3ef 8511 	mrs	r5, BASEPRI
    767e:	f383 8812 	msr	BASEPRI_MAX, r3
    7682:	f3bf 8f6f 	isb	sy
    7686:	4845      	ldr	r0, [pc, #276]	; (779c <z_impl_k_mutex_lock+0x214>)
    7688:	f7ff fd3e 	bl	7108 <z_spin_lock_valid>
    768c:	2800      	cmp	r0, #0
    768e:	d04b      	beq.n	7728 <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    7690:	4842      	ldr	r0, [pc, #264]	; (779c <z_impl_k_mutex_lock+0x214>)
    7692:	f7ff fd59 	bl	7148 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7696:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7698:	42a3      	cmp	r3, r4
    769a:	d055      	beq.n	7748 <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    769c:	2b00      	cmp	r3, #0
    769e:	d053      	beq.n	7748 <z_impl_k_mutex_lock+0x1c0>
    76a0:	6921      	ldr	r1, [r4, #16]
    76a2:	f993 000e 	ldrsb.w	r0, [r3, #14]
    76a6:	f003 fabc 	bl	ac22 <new_prio_for_inheritance>
    76aa:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    76ac:	4620      	mov	r0, r4
    76ae:	f003 fac3 	bl	ac38 <adjust_owner_prio>
    76b2:	2800      	cmp	r0, #0
    76b4:	d14a      	bne.n	774c <z_impl_k_mutex_lock+0x1c4>
    76b6:	f1b9 0f00 	cmp.w	r9, #0
    76ba:	d049      	beq.n	7750 <z_impl_k_mutex_lock+0x1c8>
    76bc:	f04f 0801 	mov.w	r8, #1
    76c0:	e046      	b.n	7750 <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    76c2:	6923      	ldr	r3, [r4, #16]
    76c4:	e783      	b.n	75ce <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    76c6:	4c3b      	ldr	r4, [pc, #236]	; (77b4 <z_impl_k_mutex_lock+0x22c>)
    76c8:	23b9      	movs	r3, #185	; 0xb9
    76ca:	4622      	mov	r2, r4
    76cc:	493c      	ldr	r1, [pc, #240]	; (77c0 <z_impl_k_mutex_lock+0x238>)
    76ce:	4837      	ldr	r0, [pc, #220]	; (77ac <z_impl_k_mutex_lock+0x224>)
    76d0:	f002 fbd1 	bl	9e76 <assert_print>
    76d4:	4931      	ldr	r1, [pc, #196]	; (779c <z_impl_k_mutex_lock+0x214>)
    76d6:	483b      	ldr	r0, [pc, #236]	; (77c4 <z_impl_k_mutex_lock+0x23c>)
    76d8:	f002 fbcd 	bl	9e76 <assert_print>
    76dc:	21b9      	movs	r1, #185	; 0xb9
    76de:	4620      	mov	r0, r4
    76e0:	f002 fbc2 	bl	9e68 <assert_post_action>
    76e4:	e77e      	b.n	75e4 <z_impl_k_mutex_lock+0x5c>
    76e6:	482d      	ldr	r0, [pc, #180]	; (779c <z_impl_k_mutex_lock+0x214>)
    76e8:	f7ff fd1e 	bl	7128 <z_spin_unlock_valid>
    76ec:	b130      	cbz	r0, 76fc <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    76ee:	f387 8811 	msr	BASEPRI, r7
    76f2:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    76f6:	f06f 000f 	mvn.w	r0, #15
    76fa:	e778      	b.n	75ee <z_impl_k_mutex_lock+0x66>
    76fc:	4c2d      	ldr	r4, [pc, #180]	; (77b4 <z_impl_k_mutex_lock+0x22c>)
    76fe:	23b9      	movs	r3, #185	; 0xb9
    7700:	4622      	mov	r2, r4
    7702:	492f      	ldr	r1, [pc, #188]	; (77c0 <z_impl_k_mutex_lock+0x238>)
    7704:	4829      	ldr	r0, [pc, #164]	; (77ac <z_impl_k_mutex_lock+0x224>)
    7706:	f002 fbb6 	bl	9e76 <assert_print>
    770a:	4924      	ldr	r1, [pc, #144]	; (779c <z_impl_k_mutex_lock+0x214>)
    770c:	482d      	ldr	r0, [pc, #180]	; (77c4 <z_impl_k_mutex_lock+0x23c>)
    770e:	f002 fbb2 	bl	9e76 <assert_print>
    7712:	21b9      	movs	r1, #185	; 0xb9
    7714:	4620      	mov	r0, r4
    7716:	f002 fba7 	bl	9e68 <assert_post_action>
    771a:	e7e8      	b.n	76ee <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    771c:	4601      	mov	r1, r0
    771e:	4620      	mov	r0, r4
    7720:	f003 fa8a 	bl	ac38 <adjust_owner_prio>
    7724:	4681      	mov	r9, r0
    7726:	e79d      	b.n	7664 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7728:	4e22      	ldr	r6, [pc, #136]	; (77b4 <z_impl_k_mutex_lock+0x22c>)
    772a:	238e      	movs	r3, #142	; 0x8e
    772c:	4632      	mov	r2, r6
    772e:	4922      	ldr	r1, [pc, #136]	; (77b8 <z_impl_k_mutex_lock+0x230>)
    7730:	481e      	ldr	r0, [pc, #120]	; (77ac <z_impl_k_mutex_lock+0x224>)
    7732:	f002 fba0 	bl	9e76 <assert_print>
    7736:	4919      	ldr	r1, [pc, #100]	; (779c <z_impl_k_mutex_lock+0x214>)
    7738:	4820      	ldr	r0, [pc, #128]	; (77bc <z_impl_k_mutex_lock+0x234>)
    773a:	f002 fb9c 	bl	9e76 <assert_print>
    773e:	218e      	movs	r1, #142	; 0x8e
    7740:	4630      	mov	r0, r6
    7742:	f002 fb91 	bl	9e68 <assert_post_action>
    7746:	e7a3      	b.n	7690 <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7748:	6921      	ldr	r1, [r4, #16]
    774a:	e7af      	b.n	76ac <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    774c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    7750:	f1b8 0f00 	cmp.w	r8, #0
    7754:	d006      	beq.n	7764 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    7756:	4629      	mov	r1, r5
    7758:	4810      	ldr	r0, [pc, #64]	; (779c <z_impl_k_mutex_lock+0x214>)
    775a:	f000 fa97 	bl	7c8c <z_reschedule>
	return -EAGAIN;
    775e:	f06f 000a 	mvn.w	r0, #10
    7762:	e744      	b.n	75ee <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7764:	480d      	ldr	r0, [pc, #52]	; (779c <z_impl_k_mutex_lock+0x214>)
    7766:	f7ff fcdf 	bl	7128 <z_spin_unlock_valid>
    776a:	b130      	cbz	r0, 777a <z_impl_k_mutex_lock+0x1f2>
    776c:	f385 8811 	msr	BASEPRI, r5
    7770:	f3bf 8f6f 	isb	sy
    7774:	f06f 000a 	mvn.w	r0, #10
    7778:	e739      	b.n	75ee <z_impl_k_mutex_lock+0x66>
    777a:	4c0e      	ldr	r4, [pc, #56]	; (77b4 <z_impl_k_mutex_lock+0x22c>)
    777c:	23b9      	movs	r3, #185	; 0xb9
    777e:	4622      	mov	r2, r4
    7780:	490f      	ldr	r1, [pc, #60]	; (77c0 <z_impl_k_mutex_lock+0x238>)
    7782:	480a      	ldr	r0, [pc, #40]	; (77ac <z_impl_k_mutex_lock+0x224>)
    7784:	f002 fb77 	bl	9e76 <assert_print>
    7788:	4904      	ldr	r1, [pc, #16]	; (779c <z_impl_k_mutex_lock+0x214>)
    778a:	480e      	ldr	r0, [pc, #56]	; (77c4 <z_impl_k_mutex_lock+0x23c>)
    778c:	f002 fb73 	bl	9e76 <assert_print>
    7790:	21b9      	movs	r1, #185	; 0xb9
    7792:	4620      	mov	r0, r4
    7794:	f002 fb68 	bl	9e68 <assert_post_action>
    7798:	e7e8      	b.n	776c <z_impl_k_mutex_lock+0x1e4>
    779a:	bf00      	nop
    779c:	20004f58 	.word	0x20004f58
    77a0:	20004f28 	.word	0x20004f28
    77a4:	0000c95c 	.word	0x0000c95c
    77a8:	0000c8a4 	.word	0x0000c8a4
    77ac:	0000b180 	.word	0x0000b180
    77b0:	0000c980 	.word	0x0000c980
    77b4:	0000b32c 	.word	0x0000b32c
    77b8:	0000b38c 	.word	0x0000b38c
    77bc:	0000b3a4 	.word	0x0000b3a4
    77c0:	0000b35c 	.word	0x0000b35c
    77c4:	0000b374 	.word	0x0000b374

000077c8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    77c8:	b570      	push	{r4, r5, r6, lr}
    77ca:	4604      	mov	r4, r0
    77cc:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    77d0:	bb03      	cbnz	r3, 7814 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    77d2:	68a3      	ldr	r3, [r4, #8]
    77d4:	2b00      	cmp	r3, #0
    77d6:	f000 80a6 	beq.w	7926 <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    77da:	4a56      	ldr	r2, [pc, #344]	; (7934 <z_impl_k_mutex_unlock+0x16c>)
    77dc:	6892      	ldr	r2, [r2, #8]
    77de:	4293      	cmp	r3, r2
    77e0:	f040 80a4 	bne.w	792c <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    77e4:	68e3      	ldr	r3, [r4, #12]
    77e6:	b323      	cbz	r3, 7832 <z_impl_k_mutex_unlock+0x6a>
    77e8:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    77ec:	bb6b      	cbnz	r3, 784a <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    77ee:	4b51      	ldr	r3, [pc, #324]	; (7934 <z_impl_k_mutex_unlock+0x16c>)
    77f0:	689b      	ldr	r3, [r3, #8]
    77f2:	7bdb      	ldrb	r3, [r3, #15]
    77f4:	2b01      	cmp	r3, #1
    77f6:	d037      	beq.n	7868 <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    77f8:	4b4e      	ldr	r3, [pc, #312]	; (7934 <z_impl_k_mutex_unlock+0x16c>)
    77fa:	689a      	ldr	r2, [r3, #8]
    77fc:	7bd3      	ldrb	r3, [r2, #15]
    77fe:	3b01      	subs	r3, #1
    7800:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7802:	68e3      	ldr	r3, [r4, #12]
    7804:	2b01      	cmp	r3, #1
    7806:	d93e      	bls.n	7886 <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    7808:	3b01      	subs	r3, #1
    780a:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    780c:	f001 f818 	bl	8840 <k_sched_unlock>

	return 0;
    7810:	2000      	movs	r0, #0
}
    7812:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7814:	4d48      	ldr	r5, [pc, #288]	; (7938 <z_impl_k_mutex_unlock+0x170>)
    7816:	23c7      	movs	r3, #199	; 0xc7
    7818:	462a      	mov	r2, r5
    781a:	4948      	ldr	r1, [pc, #288]	; (793c <z_impl_k_mutex_unlock+0x174>)
    781c:	4848      	ldr	r0, [pc, #288]	; (7940 <z_impl_k_mutex_unlock+0x178>)
    781e:	f002 fb2a 	bl	9e76 <assert_print>
    7822:	4848      	ldr	r0, [pc, #288]	; (7944 <z_impl_k_mutex_unlock+0x17c>)
    7824:	f002 fb27 	bl	9e76 <assert_print>
    7828:	21c7      	movs	r1, #199	; 0xc7
    782a:	4628      	mov	r0, r5
    782c:	f002 fb1c 	bl	9e68 <assert_post_action>
    7830:	e7cf      	b.n	77d2 <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    7832:	4d41      	ldr	r5, [pc, #260]	; (7938 <z_impl_k_mutex_unlock+0x170>)
    7834:	23df      	movs	r3, #223	; 0xdf
    7836:	462a      	mov	r2, r5
    7838:	4943      	ldr	r1, [pc, #268]	; (7948 <z_impl_k_mutex_unlock+0x180>)
    783a:	4841      	ldr	r0, [pc, #260]	; (7940 <z_impl_k_mutex_unlock+0x178>)
    783c:	f002 fb1b 	bl	9e76 <assert_print>
    7840:	21df      	movs	r1, #223	; 0xdf
    7842:	4628      	mov	r0, r5
    7844:	f002 fb10 	bl	9e68 <assert_post_action>
    7848:	e7ce      	b.n	77e8 <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    784a:	4d40      	ldr	r5, [pc, #256]	; (794c <z_impl_k_mutex_unlock+0x184>)
    784c:	23fd      	movs	r3, #253	; 0xfd
    784e:	462a      	mov	r2, r5
    7850:	493a      	ldr	r1, [pc, #232]	; (793c <z_impl_k_mutex_unlock+0x174>)
    7852:	483b      	ldr	r0, [pc, #236]	; (7940 <z_impl_k_mutex_unlock+0x178>)
    7854:	f002 fb0f 	bl	9e76 <assert_print>
    7858:	483d      	ldr	r0, [pc, #244]	; (7950 <z_impl_k_mutex_unlock+0x188>)
    785a:	f002 fb0c 	bl	9e76 <assert_print>
    785e:	21fd      	movs	r1, #253	; 0xfd
    7860:	4628      	mov	r0, r5
    7862:	f002 fb01 	bl	9e68 <assert_post_action>
    7866:	e7c2      	b.n	77ee <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7868:	4d38      	ldr	r5, [pc, #224]	; (794c <z_impl_k_mutex_unlock+0x184>)
    786a:	23fe      	movs	r3, #254	; 0xfe
    786c:	462a      	mov	r2, r5
    786e:	4939      	ldr	r1, [pc, #228]	; (7954 <z_impl_k_mutex_unlock+0x18c>)
    7870:	4833      	ldr	r0, [pc, #204]	; (7940 <z_impl_k_mutex_unlock+0x178>)
    7872:	f002 fb00 	bl	9e76 <assert_print>
    7876:	4836      	ldr	r0, [pc, #216]	; (7950 <z_impl_k_mutex_unlock+0x188>)
    7878:	f002 fafd 	bl	9e76 <assert_print>
    787c:	21fe      	movs	r1, #254	; 0xfe
    787e:	4628      	mov	r0, r5
    7880:	f002 faf2 	bl	9e68 <assert_post_action>
    7884:	e7b8      	b.n	77f8 <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    7886:	f04f 0320 	mov.w	r3, #32
    788a:	f3ef 8511 	mrs	r5, BASEPRI
    788e:	f383 8812 	msr	BASEPRI_MAX, r3
    7892:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7896:	4830      	ldr	r0, [pc, #192]	; (7958 <z_impl_k_mutex_unlock+0x190>)
    7898:	f7ff fc36 	bl	7108 <z_spin_lock_valid>
    789c:	b1c0      	cbz	r0, 78d0 <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    789e:	482e      	ldr	r0, [pc, #184]	; (7958 <z_impl_k_mutex_unlock+0x190>)
    78a0:	f7ff fc52 	bl	7148 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    78a4:	6921      	ldr	r1, [r4, #16]
    78a6:	4620      	mov	r0, r4
    78a8:	f003 f9c6 	bl	ac38 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    78ac:	4620      	mov	r0, r4
    78ae:	f001 f8a9 	bl	8a04 <z_unpend_first_thread>
	mutex->owner = new_owner;
    78b2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    78b4:	b1e0      	cbz	r0, 78f0 <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    78b6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    78ba:	6123      	str	r3, [r4, #16]
    78bc:	2300      	movs	r3, #0
    78be:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    78c2:	f000 fc87 	bl	81d4 <z_ready_thread>
		z_reschedule(&lock, key);
    78c6:	4629      	mov	r1, r5
    78c8:	4823      	ldr	r0, [pc, #140]	; (7958 <z_impl_k_mutex_unlock+0x190>)
    78ca:	f000 f9df 	bl	7c8c <z_reschedule>
    78ce:	e79d      	b.n	780c <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    78d0:	4e22      	ldr	r6, [pc, #136]	; (795c <z_impl_k_mutex_unlock+0x194>)
    78d2:	238e      	movs	r3, #142	; 0x8e
    78d4:	4632      	mov	r2, r6
    78d6:	4922      	ldr	r1, [pc, #136]	; (7960 <z_impl_k_mutex_unlock+0x198>)
    78d8:	4819      	ldr	r0, [pc, #100]	; (7940 <z_impl_k_mutex_unlock+0x178>)
    78da:	f002 facc 	bl	9e76 <assert_print>
    78de:	491e      	ldr	r1, [pc, #120]	; (7958 <z_impl_k_mutex_unlock+0x190>)
    78e0:	4820      	ldr	r0, [pc, #128]	; (7964 <z_impl_k_mutex_unlock+0x19c>)
    78e2:	f002 fac8 	bl	9e76 <assert_print>
    78e6:	218e      	movs	r1, #142	; 0x8e
    78e8:	4630      	mov	r0, r6
    78ea:	f002 fabd 	bl	9e68 <assert_post_action>
    78ee:	e7d6      	b.n	789e <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    78f0:	2300      	movs	r3, #0
    78f2:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    78f4:	4818      	ldr	r0, [pc, #96]	; (7958 <z_impl_k_mutex_unlock+0x190>)
    78f6:	f7ff fc17 	bl	7128 <z_spin_unlock_valid>
    78fa:	b120      	cbz	r0, 7906 <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    78fc:	f385 8811 	msr	BASEPRI, r5
    7900:	f3bf 8f6f 	isb	sy
    7904:	e782      	b.n	780c <z_impl_k_mutex_unlock+0x44>
    7906:	4c15      	ldr	r4, [pc, #84]	; (795c <z_impl_k_mutex_unlock+0x194>)
    7908:	23b9      	movs	r3, #185	; 0xb9
    790a:	4622      	mov	r2, r4
    790c:	4916      	ldr	r1, [pc, #88]	; (7968 <z_impl_k_mutex_unlock+0x1a0>)
    790e:	480c      	ldr	r0, [pc, #48]	; (7940 <z_impl_k_mutex_unlock+0x178>)
    7910:	f002 fab1 	bl	9e76 <assert_print>
    7914:	4910      	ldr	r1, [pc, #64]	; (7958 <z_impl_k_mutex_unlock+0x190>)
    7916:	4815      	ldr	r0, [pc, #84]	; (796c <z_impl_k_mutex_unlock+0x1a4>)
    7918:	f002 faad 	bl	9e76 <assert_print>
    791c:	21b9      	movs	r1, #185	; 0xb9
    791e:	4620      	mov	r0, r4
    7920:	f002 faa2 	bl	9e68 <assert_post_action>
    7924:	e7ea      	b.n	78fc <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    7926:	f06f 0015 	mvn.w	r0, #21
    792a:	e772      	b.n	7812 <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    792c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7930:	e76f      	b.n	7812 <z_impl_k_mutex_unlock+0x4a>
    7932:	bf00      	nop
    7934:	20004f28 	.word	0x20004f28
    7938:	0000c95c 	.word	0x0000c95c
    793c:	0000c8a4 	.word	0x0000c8a4
    7940:	0000b180 	.word	0x0000b180
    7944:	0000c980 	.word	0x0000c980
    7948:	0000c9a8 	.word	0x0000c9a8
    794c:	0000c9c0 	.word	0x0000c9c0
    7950:	0000c9ec 	.word	0x0000c9ec
    7954:	0000c9f0 	.word	0x0000c9f0
    7958:	20004f58 	.word	0x20004f58
    795c:	0000b32c 	.word	0x0000b32c
    7960:	0000b38c 	.word	0x0000b38c
    7964:	0000b3a4 	.word	0x0000b3a4
    7968:	0000b35c 	.word	0x0000b35c
    796c:	0000b374 	.word	0x0000b374

00007970 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7970:	b570      	push	{r4, r5, r6, lr}
    7972:	4604      	mov	r4, r0
	__asm__ volatile(
    7974:	f04f 0320 	mov.w	r3, #32
    7978:	f3ef 8511 	mrs	r5, BASEPRI
    797c:	f383 8812 	msr	BASEPRI_MAX, r3
    7980:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7984:	4817      	ldr	r0, [pc, #92]	; (79e4 <z_impl_k_sem_give+0x74>)
    7986:	f7ff fbbf 	bl	7108 <z_spin_lock_valid>
    798a:	b180      	cbz	r0, 79ae <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    798c:	4815      	ldr	r0, [pc, #84]	; (79e4 <z_impl_k_sem_give+0x74>)
    798e:	f7ff fbdb 	bl	7148 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7992:	4620      	mov	r0, r4
    7994:	f001 f836 	bl	8a04 <z_unpend_first_thread>

	if (thread != NULL) {
    7998:	b1c8      	cbz	r0, 79ce <z_impl_k_sem_give+0x5e>
    799a:	2200      	movs	r2, #0
    799c:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    79a0:	f000 fc18 	bl	81d4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    79a4:	4629      	mov	r1, r5
    79a6:	480f      	ldr	r0, [pc, #60]	; (79e4 <z_impl_k_sem_give+0x74>)
    79a8:	f000 f970 	bl	7c8c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    79ac:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    79ae:	4e0e      	ldr	r6, [pc, #56]	; (79e8 <z_impl_k_sem_give+0x78>)
    79b0:	238e      	movs	r3, #142	; 0x8e
    79b2:	4632      	mov	r2, r6
    79b4:	490d      	ldr	r1, [pc, #52]	; (79ec <z_impl_k_sem_give+0x7c>)
    79b6:	480e      	ldr	r0, [pc, #56]	; (79f0 <z_impl_k_sem_give+0x80>)
    79b8:	f002 fa5d 	bl	9e76 <assert_print>
    79bc:	4909      	ldr	r1, [pc, #36]	; (79e4 <z_impl_k_sem_give+0x74>)
    79be:	480d      	ldr	r0, [pc, #52]	; (79f4 <z_impl_k_sem_give+0x84>)
    79c0:	f002 fa59 	bl	9e76 <assert_print>
    79c4:	218e      	movs	r1, #142	; 0x8e
    79c6:	4630      	mov	r0, r6
    79c8:	f002 fa4e 	bl	9e68 <assert_post_action>
    79cc:	e7de      	b.n	798c <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    79ce:	68a3      	ldr	r3, [r4, #8]
    79d0:	68e2      	ldr	r2, [r4, #12]
    79d2:	4293      	cmp	r3, r2
    79d4:	d003      	beq.n	79de <z_impl_k_sem_give+0x6e>
    79d6:	2201      	movs	r2, #1
    79d8:	4413      	add	r3, r2
    79da:	60a3      	str	r3, [r4, #8]
}
    79dc:	e7e2      	b.n	79a4 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    79de:	2200      	movs	r2, #0
    79e0:	e7fa      	b.n	79d8 <z_impl_k_sem_give+0x68>
    79e2:	bf00      	nop
    79e4:	20004f5c 	.word	0x20004f5c
    79e8:	0000b32c 	.word	0x0000b32c
    79ec:	0000b38c 	.word	0x0000b38c
    79f0:	0000b180 	.word	0x0000b180
    79f4:	0000b3a4 	.word	0x0000b3a4

000079f8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    79f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79fc:	b082      	sub	sp, #8
    79fe:	4604      	mov	r4, r0
    7a00:	4617      	mov	r7, r2
    7a02:	461d      	mov	r5, r3
    7a04:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    7a08:	b111      	cbz	r1, 7a10 <z_impl_k_sem_take+0x18>
    7a0a:	ea55 0302 	orrs.w	r3, r5, r2
    7a0e:	d11f      	bne.n	7a50 <z_impl_k_sem_take+0x58>
    7a10:	f04f 0320 	mov.w	r3, #32
    7a14:	f3ef 8611 	mrs	r6, BASEPRI
    7a18:	f383 8812 	msr	BASEPRI_MAX, r3
    7a1c:	f3bf 8f6f 	isb	sy
    7a20:	4836      	ldr	r0, [pc, #216]	; (7afc <z_impl_k_sem_take+0x104>)
    7a22:	f7ff fb71 	bl	7108 <z_spin_lock_valid>
    7a26:	b310      	cbz	r0, 7a6e <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    7a28:	4834      	ldr	r0, [pc, #208]	; (7afc <z_impl_k_sem_take+0x104>)
    7a2a:	f7ff fb8d 	bl	7148 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7a2e:	68a1      	ldr	r1, [r4, #8]
    7a30:	2900      	cmp	r1, #0
    7a32:	d03d      	beq.n	7ab0 <z_impl_k_sem_take+0xb8>
		sem->count--;
    7a34:	3901      	subs	r1, #1
    7a36:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a38:	4830      	ldr	r0, [pc, #192]	; (7afc <z_impl_k_sem_take+0x104>)
    7a3a:	f7ff fb75 	bl	7128 <z_spin_unlock_valid>
    7a3e:	b338      	cbz	r0, 7a90 <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    7a40:	f386 8811 	msr	BASEPRI, r6
    7a44:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7a48:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7a4a:	b002      	add	sp, #8
    7a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    7a50:	4e2b      	ldr	r6, [pc, #172]	; (7b00 <z_impl_k_sem_take+0x108>)
    7a52:	2379      	movs	r3, #121	; 0x79
    7a54:	4632      	mov	r2, r6
    7a56:	492b      	ldr	r1, [pc, #172]	; (7b04 <z_impl_k_sem_take+0x10c>)
    7a58:	482b      	ldr	r0, [pc, #172]	; (7b08 <z_impl_k_sem_take+0x110>)
    7a5a:	f002 fa0c 	bl	9e76 <assert_print>
    7a5e:	482b      	ldr	r0, [pc, #172]	; (7b0c <z_impl_k_sem_take+0x114>)
    7a60:	f002 fa09 	bl	9e76 <assert_print>
    7a64:	2179      	movs	r1, #121	; 0x79
    7a66:	4630      	mov	r0, r6
    7a68:	f002 f9fe 	bl	9e68 <assert_post_action>
    7a6c:	e7d0      	b.n	7a10 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a6e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 7b10 <z_impl_k_sem_take+0x118>
    7a72:	238e      	movs	r3, #142	; 0x8e
    7a74:	4642      	mov	r2, r8
    7a76:	4927      	ldr	r1, [pc, #156]	; (7b14 <z_impl_k_sem_take+0x11c>)
    7a78:	4823      	ldr	r0, [pc, #140]	; (7b08 <z_impl_k_sem_take+0x110>)
    7a7a:	f002 f9fc 	bl	9e76 <assert_print>
    7a7e:	491f      	ldr	r1, [pc, #124]	; (7afc <z_impl_k_sem_take+0x104>)
    7a80:	4825      	ldr	r0, [pc, #148]	; (7b18 <z_impl_k_sem_take+0x120>)
    7a82:	f002 f9f8 	bl	9e76 <assert_print>
    7a86:	218e      	movs	r1, #142	; 0x8e
    7a88:	4640      	mov	r0, r8
    7a8a:	f002 f9ed 	bl	9e68 <assert_post_action>
    7a8e:	e7cb      	b.n	7a28 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a90:	4c1f      	ldr	r4, [pc, #124]	; (7b10 <z_impl_k_sem_take+0x118>)
    7a92:	23b9      	movs	r3, #185	; 0xb9
    7a94:	4622      	mov	r2, r4
    7a96:	4921      	ldr	r1, [pc, #132]	; (7b1c <z_impl_k_sem_take+0x124>)
    7a98:	481b      	ldr	r0, [pc, #108]	; (7b08 <z_impl_k_sem_take+0x110>)
    7a9a:	f002 f9ec 	bl	9e76 <assert_print>
    7a9e:	4917      	ldr	r1, [pc, #92]	; (7afc <z_impl_k_sem_take+0x104>)
    7aa0:	481f      	ldr	r0, [pc, #124]	; (7b20 <z_impl_k_sem_take+0x128>)
    7aa2:	f002 f9e8 	bl	9e76 <assert_print>
    7aa6:	21b9      	movs	r1, #185	; 0xb9
    7aa8:	4620      	mov	r0, r4
    7aaa:	f002 f9dd 	bl	9e68 <assert_post_action>
    7aae:	e7c7      	b.n	7a40 <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7ab0:	ea55 0307 	orrs.w	r3, r5, r7
    7ab4:	d007      	beq.n	7ac6 <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7ab6:	9700      	str	r7, [sp, #0]
    7ab8:	9501      	str	r5, [sp, #4]
    7aba:	4622      	mov	r2, r4
    7abc:	4631      	mov	r1, r6
    7abe:	480f      	ldr	r0, [pc, #60]	; (7afc <z_impl_k_sem_take+0x104>)
    7ac0:	f000 fd64 	bl	858c <z_pend_curr>
	return ret;
    7ac4:	e7c1      	b.n	7a4a <z_impl_k_sem_take+0x52>
    7ac6:	480d      	ldr	r0, [pc, #52]	; (7afc <z_impl_k_sem_take+0x104>)
    7ac8:	f7ff fb2e 	bl	7128 <z_spin_unlock_valid>
    7acc:	b130      	cbz	r0, 7adc <z_impl_k_sem_take+0xe4>
    7ace:	f386 8811 	msr	BASEPRI, r6
    7ad2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    7ad6:	f06f 000f 	mvn.w	r0, #15
    7ada:	e7b6      	b.n	7a4a <z_impl_k_sem_take+0x52>
    7adc:	4c0c      	ldr	r4, [pc, #48]	; (7b10 <z_impl_k_sem_take+0x118>)
    7ade:	23b9      	movs	r3, #185	; 0xb9
    7ae0:	4622      	mov	r2, r4
    7ae2:	490e      	ldr	r1, [pc, #56]	; (7b1c <z_impl_k_sem_take+0x124>)
    7ae4:	4808      	ldr	r0, [pc, #32]	; (7b08 <z_impl_k_sem_take+0x110>)
    7ae6:	f002 f9c6 	bl	9e76 <assert_print>
    7aea:	4904      	ldr	r1, [pc, #16]	; (7afc <z_impl_k_sem_take+0x104>)
    7aec:	480c      	ldr	r0, [pc, #48]	; (7b20 <z_impl_k_sem_take+0x128>)
    7aee:	f002 f9c2 	bl	9e76 <assert_print>
    7af2:	21b9      	movs	r1, #185	; 0xb9
    7af4:	4620      	mov	r0, r4
    7af6:	f002 f9b7 	bl	9e68 <assert_post_action>
    7afa:	e7e8      	b.n	7ace <z_impl_k_sem_take+0xd6>
    7afc:	20004f5c 	.word	0x20004f5c
    7b00:	0000ca24 	.word	0x0000ca24
    7b04:	0000ca44 	.word	0x0000ca44
    7b08:	0000b180 	.word	0x0000b180
    7b0c:	0000c9ec 	.word	0x0000c9ec
    7b10:	0000b32c 	.word	0x0000b32c
    7b14:	0000b38c 	.word	0x0000b38c
    7b18:	0000b3a4 	.word	0x0000b3a4
    7b1c:	0000b35c 	.word	0x0000b35c
    7b20:	0000b374 	.word	0x0000b374

00007b24 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    7b24:	b538      	push	{r3, r4, r5, lr}
    7b26:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    7b28:	6883      	ldr	r3, [r0, #8]
    7b2a:	b10b      	cbz	r3, 7b30 <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    7b2c:	68a0      	ldr	r0, [r4, #8]
    7b2e:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    7b30:	4d06      	ldr	r5, [pc, #24]	; (7b4c <pended_on_thread+0x28>)
    7b32:	f240 23b9 	movw	r3, #697	; 0x2b9
    7b36:	462a      	mov	r2, r5
    7b38:	4905      	ldr	r1, [pc, #20]	; (7b50 <pended_on_thread+0x2c>)
    7b3a:	4806      	ldr	r0, [pc, #24]	; (7b54 <pended_on_thread+0x30>)
    7b3c:	f002 f99b 	bl	9e76 <assert_print>
    7b40:	f240 21b9 	movw	r1, #697	; 0x2b9
    7b44:	4628      	mov	r0, r5
    7b46:	f002 f98f 	bl	9e68 <assert_post_action>
    7b4a:	e7ef      	b.n	7b2c <pended_on_thread+0x8>
    7b4c:	0000ca94 	.word	0x0000ca94
    7b50:	0000cab8 	.word	0x0000cab8
    7b54:	0000b180 	.word	0x0000b180

00007b58 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7b5c:	bf08      	it	eq
    7b5e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    7b62:	d100      	bne.n	7b66 <add_thread_timeout+0xe>
    7b64:	4770      	bx	lr
{
    7b66:	b508      	push	{r3, lr}
    7b68:	4902      	ldr	r1, [pc, #8]	; (7b74 <add_thread_timeout+0x1c>)
    7b6a:	3018      	adds	r0, #24
    7b6c:	f001 fa7c 	bl	9068 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    7b70:	bd08      	pop	{r3, pc}
    7b72:	bf00      	nop
    7b74:	00008331 	.word	0x00008331

00007b78 <z_reset_time_slice>:
{
    7b78:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    7b7a:	4b07      	ldr	r3, [pc, #28]	; (7b98 <z_reset_time_slice+0x20>)
    7b7c:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    7b7e:	b904      	cbnz	r4, 7b82 <z_reset_time_slice+0xa>
}
    7b80:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    7b82:	f7fc ff5b 	bl	4a3c <sys_clock_elapsed>
    7b86:	4404      	add	r4, r0
    7b88:	4b04      	ldr	r3, [pc, #16]	; (7b9c <z_reset_time_slice+0x24>)
    7b8a:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    7b8c:	2100      	movs	r1, #0
    7b8e:	4b02      	ldr	r3, [pc, #8]	; (7b98 <z_reset_time_slice+0x20>)
    7b90:	6818      	ldr	r0, [r3, #0]
    7b92:	f001 fbf9 	bl	9388 <z_set_timeout_expiry>
}
    7b96:	e7f3      	b.n	7b80 <z_reset_time_slice+0x8>
    7b98:	20004f6c 	.word	0x20004f6c
    7b9c:	20004f28 	.word	0x20004f28

00007ba0 <k_sched_time_slice_set>:
{
    7ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ba4:	4604      	mov	r4, r0
    7ba6:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    7ba8:	2700      	movs	r7, #0
	__asm__ volatile(
    7baa:	f04f 0320 	mov.w	r3, #32
    7bae:	f3ef 8611 	mrs	r6, BASEPRI
    7bb2:	f383 8812 	msr	BASEPRI_MAX, r3
    7bb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7bba:	482a      	ldr	r0, [pc, #168]	; (7c64 <k_sched_time_slice_set+0xc4>)
    7bbc:	f7ff faa4 	bl	7108 <z_spin_lock_valid>
    7bc0:	b118      	cbz	r0, 7bca <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    7bc2:	4828      	ldr	r0, [pc, #160]	; (7c64 <k_sched_time_slice_set+0xc4>)
    7bc4:	f7ff fac0 	bl	7148 <z_spin_lock_set_owner>
	return k;
    7bc8:	e023      	b.n	7c12 <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7bca:	f8df 809c 	ldr.w	r8, [pc, #156]	; 7c68 <k_sched_time_slice_set+0xc8>
    7bce:	238e      	movs	r3, #142	; 0x8e
    7bd0:	4642      	mov	r2, r8
    7bd2:	4926      	ldr	r1, [pc, #152]	; (7c6c <k_sched_time_slice_set+0xcc>)
    7bd4:	4826      	ldr	r0, [pc, #152]	; (7c70 <k_sched_time_slice_set+0xd0>)
    7bd6:	f002 f94e 	bl	9e76 <assert_print>
    7bda:	4922      	ldr	r1, [pc, #136]	; (7c64 <k_sched_time_slice_set+0xc4>)
    7bdc:	4825      	ldr	r0, [pc, #148]	; (7c74 <k_sched_time_slice_set+0xd4>)
    7bde:	f002 f94a 	bl	9e76 <assert_print>
    7be2:	218e      	movs	r1, #142	; 0x8e
    7be4:	4640      	mov	r0, r8
    7be6:	f002 f93f 	bl	9e68 <assert_post_action>
    7bea:	e7ea      	b.n	7bc2 <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    7bec:	2802      	cmp	r0, #2
    7bee:	bfb8      	it	lt
    7bf0:	2002      	movlt	r0, #2
    7bf2:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    7bf4:	4b20      	ldr	r3, [pc, #128]	; (7c78 <k_sched_time_slice_set+0xd8>)
    7bf6:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    7bf8:	4b20      	ldr	r3, [pc, #128]	; (7c7c <k_sched_time_slice_set+0xdc>)
    7bfa:	6898      	ldr	r0, [r3, #8]
    7bfc:	f7ff ffbc 	bl	7b78 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c00:	4818      	ldr	r0, [pc, #96]	; (7c64 <k_sched_time_slice_set+0xc4>)
    7c02:	f7ff fa91 	bl	7128 <z_spin_unlock_valid>
    7c06:	b1d0      	cbz	r0, 7c3e <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    7c08:	f386 8811 	msr	BASEPRI, r6
    7c0c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7c10:	2701      	movs	r7, #1
    7c12:	bb27      	cbnz	r7, 7c5e <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    7c14:	4b19      	ldr	r3, [pc, #100]	; (7c7c <k_sched_time_slice_set+0xdc>)
    7c16:	2200      	movs	r2, #0
    7c18:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    7c1a:	0c61      	lsrs	r1, r4, #17
    7c1c:	03e3      	lsls	r3, r4, #15
    7c1e:	f240 30e7 	movw	r0, #999	; 0x3e7
    7c22:	1818      	adds	r0, r3, r0
    7c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7c28:	f04f 0300 	mov.w	r3, #0
    7c2c:	f141 0100 	adc.w	r1, r1, #0
    7c30:	f7f8 fa66 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    7c34:	4b12      	ldr	r3, [pc, #72]	; (7c80 <k_sched_time_slice_set+0xe0>)
    7c36:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    7c38:	2c00      	cmp	r4, #0
    7c3a:	dcd7      	bgt.n	7bec <k_sched_time_slice_set+0x4c>
    7c3c:	e7da      	b.n	7bf4 <k_sched_time_slice_set+0x54>
    7c3e:	4f0a      	ldr	r7, [pc, #40]	; (7c68 <k_sched_time_slice_set+0xc8>)
    7c40:	23b9      	movs	r3, #185	; 0xb9
    7c42:	463a      	mov	r2, r7
    7c44:	490f      	ldr	r1, [pc, #60]	; (7c84 <k_sched_time_slice_set+0xe4>)
    7c46:	480a      	ldr	r0, [pc, #40]	; (7c70 <k_sched_time_slice_set+0xd0>)
    7c48:	f002 f915 	bl	9e76 <assert_print>
    7c4c:	4905      	ldr	r1, [pc, #20]	; (7c64 <k_sched_time_slice_set+0xc4>)
    7c4e:	480e      	ldr	r0, [pc, #56]	; (7c88 <k_sched_time_slice_set+0xe8>)
    7c50:	f002 f911 	bl	9e76 <assert_print>
    7c54:	21b9      	movs	r1, #185	; 0xb9
    7c56:	4638      	mov	r0, r7
    7c58:	f002 f906 	bl	9e68 <assert_post_action>
    7c5c:	e7d4      	b.n	7c08 <k_sched_time_slice_set+0x68>
}
    7c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c62:	bf00      	nop
    7c64:	20004f64 	.word	0x20004f64
    7c68:	0000b32c 	.word	0x0000b32c
    7c6c:	0000b38c 	.word	0x0000b38c
    7c70:	0000b180 	.word	0x0000b180
    7c74:	0000b3a4 	.word	0x0000b3a4
    7c78:	20004f68 	.word	0x20004f68
    7c7c:	20004f28 	.word	0x20004f28
    7c80:	20004f6c 	.word	0x20004f6c
    7c84:	0000b35c 	.word	0x0000b35c
    7c88:	0000b374 	.word	0x0000b374

00007c8c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    7c8c:	b570      	push	{r4, r5, r6, lr}
    7c8e:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    7c90:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7c92:	b921      	cbnz	r1, 7c9e <z_reschedule+0x12>
    7c94:	f3ef 8305 	mrs	r3, IPSR
    7c98:	b913      	cbnz	r3, 7ca0 <z_reschedule+0x14>
    7c9a:	2101      	movs	r1, #1
    7c9c:	e000      	b.n	7ca0 <z_reschedule+0x14>
    7c9e:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    7ca0:	f011 0f01 	tst.w	r1, #1
    7ca4:	d01c      	beq.n	7ce0 <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    7ca6:	4b1b      	ldr	r3, [pc, #108]	; (7d14 <z_reschedule+0x88>)
    7ca8:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    7caa:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    7cac:	429a      	cmp	r2, r3
    7cae:	d017      	beq.n	7ce0 <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7cb0:	4620      	mov	r0, r4
    7cb2:	f7ff fa39 	bl	7128 <z_spin_unlock_valid>
    7cb6:	b118      	cbz	r0, 7cc0 <z_reschedule+0x34>
	ret = arch_swap(key);
    7cb8:	4628      	mov	r0, r5
    7cba:	f7fb f853 	bl	2d64 <arch_swap>
		z_swap(lock, key);
    7cbe:	e017      	b.n	7cf0 <z_reschedule+0x64>
    7cc0:	4e15      	ldr	r6, [pc, #84]	; (7d18 <z_reschedule+0x8c>)
    7cc2:	23d0      	movs	r3, #208	; 0xd0
    7cc4:	4632      	mov	r2, r6
    7cc6:	4915      	ldr	r1, [pc, #84]	; (7d1c <z_reschedule+0x90>)
    7cc8:	4815      	ldr	r0, [pc, #84]	; (7d20 <z_reschedule+0x94>)
    7cca:	f002 f8d4 	bl	9e76 <assert_print>
    7cce:	4621      	mov	r1, r4
    7cd0:	4814      	ldr	r0, [pc, #80]	; (7d24 <z_reschedule+0x98>)
    7cd2:	f002 f8d0 	bl	9e76 <assert_print>
    7cd6:	21d0      	movs	r1, #208	; 0xd0
    7cd8:	4630      	mov	r0, r6
    7cda:	f002 f8c5 	bl	9e68 <assert_post_action>
    7cde:	e7eb      	b.n	7cb8 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7ce0:	4620      	mov	r0, r4
    7ce2:	f7ff fa21 	bl	7128 <z_spin_unlock_valid>
    7ce6:	b120      	cbz	r0, 7cf2 <z_reschedule+0x66>
    7ce8:	f385 8811 	msr	BASEPRI, r5
    7cec:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    7cf0:	bd70      	pop	{r4, r5, r6, pc}
    7cf2:	4e09      	ldr	r6, [pc, #36]	; (7d18 <z_reschedule+0x8c>)
    7cf4:	23b9      	movs	r3, #185	; 0xb9
    7cf6:	4632      	mov	r2, r6
    7cf8:	4908      	ldr	r1, [pc, #32]	; (7d1c <z_reschedule+0x90>)
    7cfa:	4809      	ldr	r0, [pc, #36]	; (7d20 <z_reschedule+0x94>)
    7cfc:	f002 f8bb 	bl	9e76 <assert_print>
    7d00:	4621      	mov	r1, r4
    7d02:	4808      	ldr	r0, [pc, #32]	; (7d24 <z_reschedule+0x98>)
    7d04:	f002 f8b7 	bl	9e76 <assert_print>
    7d08:	21b9      	movs	r1, #185	; 0xb9
    7d0a:	4630      	mov	r0, r6
    7d0c:	f002 f8ac 	bl	9e68 <assert_post_action>
    7d10:	e7ea      	b.n	7ce8 <z_reschedule+0x5c>
    7d12:	bf00      	nop
    7d14:	20004f28 	.word	0x20004f28
    7d18:	0000b32c 	.word	0x0000b32c
    7d1c:	0000b35c 	.word	0x0000b35c
    7d20:	0000b180 	.word	0x0000b180
    7d24:	0000b374 	.word	0x0000b374

00007d28 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    7d28:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    7d2a:	2400      	movs	r4, #0
	__asm__ volatile(
    7d2c:	f04f 0320 	mov.w	r3, #32
    7d30:	f3ef 8511 	mrs	r5, BASEPRI
    7d34:	f383 8812 	msr	BASEPRI_MAX, r3
    7d38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d3c:	482f      	ldr	r0, [pc, #188]	; (7dfc <k_sched_lock+0xd4>)
    7d3e:	f7ff f9e3 	bl	7108 <z_spin_lock_valid>
    7d42:	b118      	cbz	r0, 7d4c <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    7d44:	482d      	ldr	r0, [pc, #180]	; (7dfc <k_sched_lock+0xd4>)
    7d46:	f7ff f9ff 	bl	7148 <z_spin_lock_set_owner>
	return k;
    7d4a:	e022      	b.n	7d92 <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d4c:	4e2c      	ldr	r6, [pc, #176]	; (7e00 <k_sched_lock+0xd8>)
    7d4e:	238e      	movs	r3, #142	; 0x8e
    7d50:	4632      	mov	r2, r6
    7d52:	492c      	ldr	r1, [pc, #176]	; (7e04 <k_sched_lock+0xdc>)
    7d54:	482c      	ldr	r0, [pc, #176]	; (7e08 <k_sched_lock+0xe0>)
    7d56:	f002 f88e 	bl	9e76 <assert_print>
    7d5a:	4928      	ldr	r1, [pc, #160]	; (7dfc <k_sched_lock+0xd4>)
    7d5c:	482b      	ldr	r0, [pc, #172]	; (7e0c <k_sched_lock+0xe4>)
    7d5e:	f002 f88a 	bl	9e76 <assert_print>
    7d62:	218e      	movs	r1, #142	; 0x8e
    7d64:	4630      	mov	r0, r6
    7d66:	f002 f87f 	bl	9e68 <assert_post_action>
    7d6a:	e7eb      	b.n	7d44 <k_sched_lock+0x1c>
    7d6c:	4b28      	ldr	r3, [pc, #160]	; (7e10 <k_sched_lock+0xe8>)
    7d6e:	689b      	ldr	r3, [r3, #8]
    7d70:	7bdb      	ldrb	r3, [r3, #15]
    7d72:	2b01      	cmp	r3, #1
    7d74:	d022      	beq.n	7dbc <k_sched_lock+0x94>
	--_current->base.sched_locked;
    7d76:	4b26      	ldr	r3, [pc, #152]	; (7e10 <k_sched_lock+0xe8>)
    7d78:	689a      	ldr	r2, [r3, #8]
    7d7a:	7bd3      	ldrb	r3, [r2, #15]
    7d7c:	3b01      	subs	r3, #1
    7d7e:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d80:	481e      	ldr	r0, [pc, #120]	; (7dfc <k_sched_lock+0xd4>)
    7d82:	f7ff f9d1 	bl	7128 <z_spin_unlock_valid>
    7d86:	b340      	cbz	r0, 7dda <k_sched_lock+0xb2>
	__asm__ volatile(
    7d88:	f385 8811 	msr	BASEPRI, r5
    7d8c:	f3bf 8f6f 	isb	sy
    7d90:	2401      	movs	r4, #1
    7d92:	2c00      	cmp	r4, #0
    7d94:	d131      	bne.n	7dfa <k_sched_lock+0xd2>
    7d96:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7d9a:	2b00      	cmp	r3, #0
    7d9c:	d0e6      	beq.n	7d6c <k_sched_lock+0x44>
    7d9e:	4c1d      	ldr	r4, [pc, #116]	; (7e14 <k_sched_lock+0xec>)
    7da0:	23fd      	movs	r3, #253	; 0xfd
    7da2:	4622      	mov	r2, r4
    7da4:	491c      	ldr	r1, [pc, #112]	; (7e18 <k_sched_lock+0xf0>)
    7da6:	4818      	ldr	r0, [pc, #96]	; (7e08 <k_sched_lock+0xe0>)
    7da8:	f002 f865 	bl	9e76 <assert_print>
    7dac:	481b      	ldr	r0, [pc, #108]	; (7e1c <k_sched_lock+0xf4>)
    7dae:	f002 f862 	bl	9e76 <assert_print>
    7db2:	21fd      	movs	r1, #253	; 0xfd
    7db4:	4620      	mov	r0, r4
    7db6:	f002 f857 	bl	9e68 <assert_post_action>
    7dba:	e7d7      	b.n	7d6c <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7dbc:	4c15      	ldr	r4, [pc, #84]	; (7e14 <k_sched_lock+0xec>)
    7dbe:	23fe      	movs	r3, #254	; 0xfe
    7dc0:	4622      	mov	r2, r4
    7dc2:	4917      	ldr	r1, [pc, #92]	; (7e20 <k_sched_lock+0xf8>)
    7dc4:	4810      	ldr	r0, [pc, #64]	; (7e08 <k_sched_lock+0xe0>)
    7dc6:	f002 f856 	bl	9e76 <assert_print>
    7dca:	4814      	ldr	r0, [pc, #80]	; (7e1c <k_sched_lock+0xf4>)
    7dcc:	f002 f853 	bl	9e76 <assert_print>
    7dd0:	21fe      	movs	r1, #254	; 0xfe
    7dd2:	4620      	mov	r0, r4
    7dd4:	f002 f848 	bl	9e68 <assert_post_action>
    7dd8:	e7cd      	b.n	7d76 <k_sched_lock+0x4e>
    7dda:	4c09      	ldr	r4, [pc, #36]	; (7e00 <k_sched_lock+0xd8>)
    7ddc:	23b9      	movs	r3, #185	; 0xb9
    7dde:	4622      	mov	r2, r4
    7de0:	4910      	ldr	r1, [pc, #64]	; (7e24 <k_sched_lock+0xfc>)
    7de2:	4809      	ldr	r0, [pc, #36]	; (7e08 <k_sched_lock+0xe0>)
    7de4:	f002 f847 	bl	9e76 <assert_print>
    7de8:	4904      	ldr	r1, [pc, #16]	; (7dfc <k_sched_lock+0xd4>)
    7dea:	480f      	ldr	r0, [pc, #60]	; (7e28 <k_sched_lock+0x100>)
    7dec:	f002 f843 	bl	9e76 <assert_print>
    7df0:	21b9      	movs	r1, #185	; 0xb9
    7df2:	4620      	mov	r0, r4
    7df4:	f002 f838 	bl	9e68 <assert_post_action>
    7df8:	e7c6      	b.n	7d88 <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    7dfa:	bd70      	pop	{r4, r5, r6, pc}
    7dfc:	20004f64 	.word	0x20004f64
    7e00:	0000b32c 	.word	0x0000b32c
    7e04:	0000b38c 	.word	0x0000b38c
    7e08:	0000b180 	.word	0x0000b180
    7e0c:	0000b3a4 	.word	0x0000b3a4
    7e10:	20004f28 	.word	0x20004f28
    7e14:	0000c9c0 	.word	0x0000c9c0
    7e18:	0000c8a4 	.word	0x0000c8a4
    7e1c:	0000c9ec 	.word	0x0000c9ec
    7e20:	0000c9f0 	.word	0x0000c9f0
    7e24:	0000b35c 	.word	0x0000b35c
    7e28:	0000b374 	.word	0x0000b374

00007e2c <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    7e2c:	b538      	push	{r3, r4, r5, lr}
    7e2e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7e30:	4b0c      	ldr	r3, [pc, #48]	; (7e64 <z_priq_dumb_remove+0x38>)
    7e32:	4299      	cmp	r1, r3
    7e34:	d007      	beq.n	7e46 <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    7e36:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    7e38:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    7e3a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7e3c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7e3e:	2300      	movs	r3, #0
    7e40:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    7e42:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    7e44:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7e46:	4d08      	ldr	r5, [pc, #32]	; (7e68 <z_priq_dumb_remove+0x3c>)
    7e48:	f240 433d 	movw	r3, #1085	; 0x43d
    7e4c:	462a      	mov	r2, r5
    7e4e:	4907      	ldr	r1, [pc, #28]	; (7e6c <z_priq_dumb_remove+0x40>)
    7e50:	4807      	ldr	r0, [pc, #28]	; (7e70 <z_priq_dumb_remove+0x44>)
    7e52:	f002 f810 	bl	9e76 <assert_print>
    7e56:	f240 413d 	movw	r1, #1085	; 0x43d
    7e5a:	4628      	mov	r0, r5
    7e5c:	f002 f804 	bl	9e68 <assert_post_action>
    7e60:	e7e9      	b.n	7e36 <z_priq_dumb_remove+0xa>
    7e62:	bf00      	nop
    7e64:	20004290 	.word	0x20004290
    7e68:	0000ca94 	.word	0x0000ca94
    7e6c:	0000cad0 	.word	0x0000cad0
    7e70:	0000b180 	.word	0x0000b180

00007e74 <update_cache>:
{
    7e74:	b538      	push	{r3, r4, r5, lr}
    7e76:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    7e78:	4819      	ldr	r0, [pc, #100]	; (7ee0 <update_cache+0x6c>)
    7e7a:	f002 ff10 	bl	ac9e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7e7e:	4605      	mov	r5, r0
    7e80:	b188      	cbz	r0, 7ea6 <update_cache+0x32>
	if (preempt_ok != 0) {
    7e82:	bb14      	cbnz	r4, 7eca <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    7e84:	4b17      	ldr	r3, [pc, #92]	; (7ee4 <update_cache+0x70>)
    7e86:	689b      	ldr	r3, [r3, #8]
    7e88:	b183      	cbz	r3, 7eac <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    7e8a:	4b16      	ldr	r3, [pc, #88]	; (7ee4 <update_cache+0x70>)
    7e8c:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    7e8e:	7b5a      	ldrb	r2, [r3, #13]
    7e90:	f012 0f1f 	tst.w	r2, #31
    7e94:	d119      	bne.n	7eca <update_cache+0x56>
	return node->next != NULL;
    7e96:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    7e98:	b9ba      	cbnz	r2, 7eca <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    7e9a:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    7e9c:	2a7f      	cmp	r2, #127	; 0x7f
    7e9e:	d914      	bls.n	7eca <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    7ea0:	4a10      	ldr	r2, [pc, #64]	; (7ee4 <update_cache+0x70>)
    7ea2:	61d3      	str	r3, [r2, #28]
    7ea4:	e01a      	b.n	7edc <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7ea6:	4b0f      	ldr	r3, [pc, #60]	; (7ee4 <update_cache+0x70>)
    7ea8:	68dd      	ldr	r5, [r3, #12]
    7eaa:	e7ea      	b.n	7e82 <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    7eac:	4c0e      	ldr	r4, [pc, #56]	; (7ee8 <update_cache+0x74>)
    7eae:	2389      	movs	r3, #137	; 0x89
    7eb0:	4622      	mov	r2, r4
    7eb2:	490e      	ldr	r1, [pc, #56]	; (7eec <update_cache+0x78>)
    7eb4:	480e      	ldr	r0, [pc, #56]	; (7ef0 <update_cache+0x7c>)
    7eb6:	f001 ffde 	bl	9e76 <assert_print>
    7eba:	480e      	ldr	r0, [pc, #56]	; (7ef4 <update_cache+0x80>)
    7ebc:	f001 ffdb 	bl	9e76 <assert_print>
    7ec0:	2189      	movs	r1, #137	; 0x89
    7ec2:	4620      	mov	r0, r4
    7ec4:	f001 ffd0 	bl	9e68 <assert_post_action>
    7ec8:	e7df      	b.n	7e8a <update_cache+0x16>
		if (thread != _current) {
    7eca:	4b06      	ldr	r3, [pc, #24]	; (7ee4 <update_cache+0x70>)
    7ecc:	689b      	ldr	r3, [r3, #8]
    7ece:	42ab      	cmp	r3, r5
    7ed0:	d002      	beq.n	7ed8 <update_cache+0x64>
			z_reset_time_slice(thread);
    7ed2:	4628      	mov	r0, r5
    7ed4:	f7ff fe50 	bl	7b78 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    7ed8:	4b02      	ldr	r3, [pc, #8]	; (7ee4 <update_cache+0x70>)
    7eda:	61dd      	str	r5, [r3, #28]
}
    7edc:	bd38      	pop	{r3, r4, r5, pc}
    7ede:	bf00      	nop
    7ee0:	20004f48 	.word	0x20004f48
    7ee4:	20004f28 	.word	0x20004f28
    7ee8:	0000ca94 	.word	0x0000ca94
    7eec:	0000caf4 	.word	0x0000caf4
    7ef0:	0000b180 	.word	0x0000b180
    7ef4:	0000c9ec 	.word	0x0000c9ec

00007ef8 <move_thread_to_end_of_prio_q>:
{
    7ef8:	b538      	push	{r3, r4, r5, lr}
    7efa:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    7efc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    7efe:	f990 300d 	ldrsb.w	r3, [r0, #13]
    7f02:	2b00      	cmp	r3, #0
    7f04:	db2b      	blt.n	7f5e <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    7f06:	7b6b      	ldrb	r3, [r5, #13]
    7f08:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7f0c:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7f0e:	4b22      	ldr	r3, [pc, #136]	; (7f98 <move_thread_to_end_of_prio_q+0xa0>)
    7f10:	429d      	cmp	r5, r3
    7f12:	d02c      	beq.n	7f6e <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    7f14:	4b21      	ldr	r3, [pc, #132]	; (7f9c <move_thread_to_end_of_prio_q+0xa4>)
    7f16:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7f1a:	429c      	cmp	r4, r3
    7f1c:	d039      	beq.n	7f92 <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7f1e:	b16c      	cbz	r4, 7f3c <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7f20:	4621      	mov	r1, r4
    7f22:	4628      	mov	r0, r5
    7f24:	f002 fe9c 	bl	ac60 <z_sched_prio_cmp>
    7f28:	2800      	cmp	r0, #0
    7f2a:	dc2c      	bgt.n	7f86 <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7f2c:	b134      	cbz	r4, 7f3c <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    7f2e:	4b1b      	ldr	r3, [pc, #108]	; (7f9c <move_thread_to_end_of_prio_q+0xa4>)
    7f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f32:	429c      	cmp	r4, r3
    7f34:	d002      	beq.n	7f3c <move_thread_to_end_of_prio_q+0x44>
    7f36:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7f38:	2c00      	cmp	r4, #0
    7f3a:	d1f0      	bne.n	7f1e <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    7f3c:	4b17      	ldr	r3, [pc, #92]	; (7f9c <move_thread_to_end_of_prio_q+0xa4>)
    7f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    7f40:	f103 0120 	add.w	r1, r3, #32
    7f44:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    7f46:	606a      	str	r2, [r5, #4]
	tail->next = node;
    7f48:	6015      	str	r5, [r2, #0]
	list->tail = node;
    7f4a:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    7f4c:	4b13      	ldr	r3, [pc, #76]	; (7f9c <move_thread_to_end_of_prio_q+0xa4>)
    7f4e:	6898      	ldr	r0, [r3, #8]
    7f50:	42a8      	cmp	r0, r5
    7f52:	bf14      	ite	ne
    7f54:	2000      	movne	r0, #0
    7f56:	2001      	moveq	r0, #1
    7f58:	f7ff ff8c 	bl	7e74 <update_cache>
}
    7f5c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7f5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7f62:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7f64:	4601      	mov	r1, r0
    7f66:	480e      	ldr	r0, [pc, #56]	; (7fa0 <move_thread_to_end_of_prio_q+0xa8>)
    7f68:	f7ff ff60 	bl	7e2c <z_priq_dumb_remove>
}
    7f6c:	e7cb      	b.n	7f06 <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7f6e:	4c0d      	ldr	r4, [pc, #52]	; (7fa4 <move_thread_to_end_of_prio_q+0xac>)
    7f70:	23ba      	movs	r3, #186	; 0xba
    7f72:	4622      	mov	r2, r4
    7f74:	490c      	ldr	r1, [pc, #48]	; (7fa8 <move_thread_to_end_of_prio_q+0xb0>)
    7f76:	480d      	ldr	r0, [pc, #52]	; (7fac <move_thread_to_end_of_prio_q+0xb4>)
    7f78:	f001 ff7d 	bl	9e76 <assert_print>
    7f7c:	21ba      	movs	r1, #186	; 0xba
    7f7e:	4620      	mov	r0, r4
    7f80:	f001 ff72 	bl	9e68 <assert_post_action>
    7f84:	e7c6      	b.n	7f14 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    7f86:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    7f88:	606b      	str	r3, [r5, #4]
	node->next = successor;
    7f8a:	602c      	str	r4, [r5, #0]
	prev->next = node;
    7f8c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    7f8e:	6065      	str	r5, [r4, #4]
}
    7f90:	e7dc      	b.n	7f4c <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7f92:	2400      	movs	r4, #0
    7f94:	e7c3      	b.n	7f1e <move_thread_to_end_of_prio_q+0x26>
    7f96:	bf00      	nop
    7f98:	20004290 	.word	0x20004290
    7f9c:	20004f28 	.word	0x20004f28
    7fa0:	20004f48 	.word	0x20004f48
    7fa4:	0000ca94 	.word	0x0000ca94
    7fa8:	0000cad0 	.word	0x0000cad0
    7fac:	0000b180 	.word	0x0000b180

00007fb0 <slice_expired_locked>:
{
    7fb0:	b538      	push	{r3, r4, r5, lr}
    7fb2:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    7fb4:	4b07      	ldr	r3, [pc, #28]	; (7fd4 <slice_expired_locked+0x24>)
    7fb6:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    7fb8:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    7fba:	f013 0f1f 	tst.w	r3, #31
    7fbe:	d004      	beq.n	7fca <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    7fc0:	4628      	mov	r0, r5
    7fc2:	f7ff fdd9 	bl	7b78 <z_reset_time_slice>
}
    7fc6:	4620      	mov	r0, r4
    7fc8:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    7fca:	4628      	mov	r0, r5
    7fcc:	f7ff ff94 	bl	7ef8 <move_thread_to_end_of_prio_q>
    7fd0:	e7f6      	b.n	7fc0 <slice_expired_locked+0x10>
    7fd2:	bf00      	nop
    7fd4:	20004f28 	.word	0x20004f28

00007fd8 <z_time_slice>:
{
    7fd8:	b570      	push	{r4, r5, r6, lr}
    7fda:	4604      	mov	r4, r0
	__asm__ volatile(
    7fdc:	f04f 0320 	mov.w	r3, #32
    7fe0:	f3ef 8511 	mrs	r5, BASEPRI
    7fe4:	f383 8812 	msr	BASEPRI_MAX, r3
    7fe8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7fec:	4842      	ldr	r0, [pc, #264]	; (80f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>)
    7fee:	f7ff f88b 	bl	7108 <z_spin_lock_valid>
    7ff2:	b310      	cbz	r0, 803a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a>
	z_spin_lock_set_owner(l);
    7ff4:	4840      	ldr	r0, [pc, #256]	; (80f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>)
    7ff6:	f7ff f8a7 	bl	7148 <z_spin_lock_set_owner>
	return k;
    7ffa:	462b      	mov	r3, r5
	if (pending_current == _current) {
    7ffc:	4a3f      	ldr	r2, [pc, #252]	; (80fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>)
    7ffe:	6892      	ldr	r2, [r2, #8]
    8000:	493f      	ldr	r1, [pc, #252]	; (8100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>)
    8002:	6809      	ldr	r1, [r1, #0]
    8004:	428a      	cmp	r2, r1
    8006:	d028      	beq.n	805a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a>
	pending_current = NULL;
    8008:	493d      	ldr	r1, [pc, #244]	; (8100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>)
    800a:	2000      	movs	r0, #0
    800c:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    800e:	493d      	ldr	r1, [pc, #244]	; (8104 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x104>)
    8010:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    8012:	2900      	cmp	r1, #0
    8014:	d052      	beq.n	80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    8016:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    8018:	297f      	cmp	r1, #127	; 0x7f
    801a:	d83a      	bhi.n	8092 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x92>
    801c:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    801e:	f011 0f1f 	tst.w	r1, #31
    8022:	d140      	bne.n	80a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8024:	f992 000e 	ldrsb.w	r0, [r2, #14]
    8028:	4937      	ldr	r1, [pc, #220]	; (8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>)
    802a:	6809      	ldr	r1, [r1, #0]
    802c:	4288      	cmp	r0, r1
    802e:	db3c      	blt.n	80aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaa>
		&& !z_is_idle_thread_object(thread);
    8030:	4936      	ldr	r1, [pc, #216]	; (810c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>)
    8032:	428a      	cmp	r2, r1
    8034:	d03b      	beq.n	80ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xae>
    8036:	2201      	movs	r2, #1
    8038:	e02c      	b.n	8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    803a:	4e35      	ldr	r6, [pc, #212]	; (8110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>)
    803c:	238e      	movs	r3, #142	; 0x8e
    803e:	4632      	mov	r2, r6
    8040:	4934      	ldr	r1, [pc, #208]	; (8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>)
    8042:	4835      	ldr	r0, [pc, #212]	; (8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>)
    8044:	f001 ff17 	bl	9e76 <assert_print>
    8048:	492b      	ldr	r1, [pc, #172]	; (80f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>)
    804a:	4834      	ldr	r0, [pc, #208]	; (811c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c>)
    804c:	f001 ff13 	bl	9e76 <assert_print>
    8050:	218e      	movs	r1, #142	; 0x8e
    8052:	4630      	mov	r0, r6
    8054:	f001 ff08 	bl	9e68 <assert_post_action>
    8058:	e7cc      	b.n	7ff4 <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    805a:	4610      	mov	r0, r2
    805c:	f7ff fd8c 	bl	7b78 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8060:	4825      	ldr	r0, [pc, #148]	; (80f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>)
    8062:	f7ff f861 	bl	7128 <z_spin_unlock_valid>
    8066:	b120      	cbz	r0, 8072 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72>
	__asm__ volatile(
    8068:	f385 8811 	msr	BASEPRI, r5
    806c:	f3bf 8f6f 	isb	sy
		return;
    8070:	e030      	b.n	80d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd4>
    8072:	4c27      	ldr	r4, [pc, #156]	; (8110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>)
    8074:	23b9      	movs	r3, #185	; 0xb9
    8076:	4622      	mov	r2, r4
    8078:	4929      	ldr	r1, [pc, #164]	; (8120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>)
    807a:	4827      	ldr	r0, [pc, #156]	; (8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>)
    807c:	f001 fefb 	bl	9e76 <assert_print>
    8080:	491d      	ldr	r1, [pc, #116]	; (80f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>)
    8082:	4828      	ldr	r0, [pc, #160]	; (8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
    8084:	f001 fef7 	bl	9e76 <assert_print>
    8088:	21b9      	movs	r1, #185	; 0xb9
    808a:	4620      	mov	r0, r4
    808c:	f001 feec 	bl	9e68 <assert_post_action>
    8090:	e7ea      	b.n	8068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>
		&& !z_is_idle_thread_object(thread);
    8092:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    8094:	b192      	cbz	r2, 80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
		if (ticks >= _current_cpu->slice_ticks) {
    8096:	4a19      	ldr	r2, [pc, #100]	; (80fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>)
    8098:	6910      	ldr	r0, [r2, #16]
    809a:	42a0      	cmp	r0, r4
    809c:	dd09      	ble.n	80b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb2>
			_current_cpu->slice_ticks -= ticks;
    809e:	1b00      	subs	r0, r0, r4
    80a0:	4a16      	ldr	r2, [pc, #88]	; (80fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>)
    80a2:	6110      	str	r0, [r2, #16]
    80a4:	e00d      	b.n	80c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc2>
		&& !z_is_idle_thread_object(thread);
    80a6:	2200      	movs	r2, #0
    80a8:	e7f4      	b.n	8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    80aa:	2200      	movs	r2, #0
    80ac:	e7f2      	b.n	8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    80ae:	2200      	movs	r2, #0
    80b0:	e7f0      	b.n	8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
			key = slice_expired_locked(key);
    80b2:	4628      	mov	r0, r5
    80b4:	f7ff ff7c 	bl	7fb0 <slice_expired_locked>
    80b8:	4603      	mov	r3, r0
    80ba:	e002      	b.n	80c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc2>
		_current_cpu->slice_ticks = 0;
    80bc:	4a0f      	ldr	r2, [pc, #60]	; (80fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>)
    80be:	2100      	movs	r1, #0
    80c0:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    80c2:	461c      	mov	r4, r3
    80c4:	480c      	ldr	r0, [pc, #48]	; (80f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>)
    80c6:	f7ff f82f 	bl	7128 <z_spin_unlock_valid>
    80ca:	b120      	cbz	r0, 80d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd6>
    80cc:	f384 8811 	msr	BASEPRI, r4
    80d0:	f3bf 8f6f 	isb	sy
}
    80d4:	bd70      	pop	{r4, r5, r6, pc}
    80d6:	4d0e      	ldr	r5, [pc, #56]	; (8110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>)
    80d8:	23b9      	movs	r3, #185	; 0xb9
    80da:	462a      	mov	r2, r5
    80dc:	4910      	ldr	r1, [pc, #64]	; (8120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>)
    80de:	480e      	ldr	r0, [pc, #56]	; (8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>)
    80e0:	f001 fec9 	bl	9e76 <assert_print>
    80e4:	4904      	ldr	r1, [pc, #16]	; (80f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>)
    80e6:	480f      	ldr	r0, [pc, #60]	; (8124 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x124>)
    80e8:	f001 fec5 	bl	9e76 <assert_print>
    80ec:	21b9      	movs	r1, #185	; 0xb9
    80ee:	4628      	mov	r0, r5
    80f0:	f001 feba 	bl	9e68 <assert_post_action>
    80f4:	e7ea      	b.n	80cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc>
    80f6:	bf00      	nop
    80f8:	20004f64 	.word	0x20004f64
    80fc:	20004f28 	.word	0x20004f28
    8100:	20004f60 	.word	0x20004f60
    8104:	20004f6c 	.word	0x20004f6c
    8108:	20004f68 	.word	0x20004f68
    810c:	20004290 	.word	0x20004290
    8110:	0000b32c 	.word	0x0000b32c
    8114:	0000b38c 	.word	0x0000b38c
    8118:	0000b180 	.word	0x0000b180
    811c:	0000b3a4 	.word	0x0000b3a4
    8120:	0000b35c 	.word	0x0000b35c
    8124:	0000b374 	.word	0x0000b374

00008128 <ready_thread>:
{
    8128:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    812a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    812c:	f990 200d 	ldrsb.w	r2, [r0, #13]
    8130:	2a00      	cmp	r2, #0
    8132:	db30      	blt.n	8196 <ready_thread+0x6e>
    8134:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8136:	f013 0f1f 	tst.w	r3, #31
    813a:	d105      	bne.n	8148 <ready_thread+0x20>
	return node->next != NULL;
    813c:	6982      	ldr	r2, [r0, #24]
    813e:	b10a      	cbz	r2, 8144 <ready_thread+0x1c>
    8140:	2200      	movs	r2, #0
    8142:	e002      	b.n	814a <ready_thread+0x22>
    8144:	2201      	movs	r2, #1
    8146:	e000      	b.n	814a <ready_thread+0x22>
    8148:	2200      	movs	r2, #0
    814a:	b322      	cbz	r2, 8196 <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    814c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8150:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8152:	4b1b      	ldr	r3, [pc, #108]	; (81c0 <ready_thread+0x98>)
    8154:	429c      	cmp	r4, r3
    8156:	d01f      	beq.n	8198 <ready_thread+0x70>
	return list->head == list;
    8158:	4b1a      	ldr	r3, [pc, #104]	; (81c4 <ready_thread+0x9c>)
    815a:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    815e:	429d      	cmp	r5, r3
    8160:	d02c      	beq.n	81bc <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8162:	b16d      	cbz	r5, 8180 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8164:	4629      	mov	r1, r5
    8166:	4620      	mov	r0, r4
    8168:	f002 fd7a 	bl	ac60 <z_sched_prio_cmp>
    816c:	2800      	cmp	r0, #0
    816e:	dc1f      	bgt.n	81b0 <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8170:	b135      	cbz	r5, 8180 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    8172:	4b14      	ldr	r3, [pc, #80]	; (81c4 <ready_thread+0x9c>)
    8174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8176:	429d      	cmp	r5, r3
    8178:	d002      	beq.n	8180 <ready_thread+0x58>
    817a:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    817c:	2d00      	cmp	r5, #0
    817e:	d1f0      	bne.n	8162 <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    8180:	4b10      	ldr	r3, [pc, #64]	; (81c4 <ready_thread+0x9c>)
    8182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8184:	f103 0120 	add.w	r1, r3, #32
    8188:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    818a:	6062      	str	r2, [r4, #4]
	tail->next = node;
    818c:	6014      	str	r4, [r2, #0]
	list->tail = node;
    818e:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    8190:	2000      	movs	r0, #0
    8192:	f7ff fe6f 	bl	7e74 <update_cache>
}
    8196:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8198:	4d0b      	ldr	r5, [pc, #44]	; (81c8 <ready_thread+0xa0>)
    819a:	23ba      	movs	r3, #186	; 0xba
    819c:	462a      	mov	r2, r5
    819e:	490b      	ldr	r1, [pc, #44]	; (81cc <ready_thread+0xa4>)
    81a0:	480b      	ldr	r0, [pc, #44]	; (81d0 <ready_thread+0xa8>)
    81a2:	f001 fe68 	bl	9e76 <assert_print>
    81a6:	21ba      	movs	r1, #186	; 0xba
    81a8:	4628      	mov	r0, r5
    81aa:	f001 fe5d 	bl	9e68 <assert_post_action>
    81ae:	e7d3      	b.n	8158 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    81b0:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    81b2:	6063      	str	r3, [r4, #4]
	node->next = successor;
    81b4:	6025      	str	r5, [r4, #0]
	prev->next = node;
    81b6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    81b8:	606c      	str	r4, [r5, #4]
}
    81ba:	e7e9      	b.n	8190 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    81bc:	2500      	movs	r5, #0
    81be:	e7d0      	b.n	8162 <ready_thread+0x3a>
    81c0:	20004290 	.word	0x20004290
    81c4:	20004f28 	.word	0x20004f28
    81c8:	0000ca94 	.word	0x0000ca94
    81cc:	0000cad0 	.word	0x0000cad0
    81d0:	0000b180 	.word	0x0000b180

000081d4 <z_ready_thread>:
{
    81d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81d6:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    81d8:	2400      	movs	r4, #0
	__asm__ volatile(
    81da:	f04f 0320 	mov.w	r3, #32
    81de:	f3ef 8611 	mrs	r6, BASEPRI
    81e2:	f383 8812 	msr	BASEPRI_MAX, r3
    81e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    81ea:	481e      	ldr	r0, [pc, #120]	; (8264 <z_ready_thread+0x90>)
    81ec:	f7fe ff8c 	bl	7108 <z_spin_lock_valid>
    81f0:	b118      	cbz	r0, 81fa <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    81f2:	481c      	ldr	r0, [pc, #112]	; (8264 <z_ready_thread+0x90>)
    81f4:	f7fe ffa8 	bl	7148 <z_spin_lock_set_owner>
	return k;
    81f8:	e018      	b.n	822c <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    81fa:	4f1b      	ldr	r7, [pc, #108]	; (8268 <z_ready_thread+0x94>)
    81fc:	238e      	movs	r3, #142	; 0x8e
    81fe:	463a      	mov	r2, r7
    8200:	491a      	ldr	r1, [pc, #104]	; (826c <z_ready_thread+0x98>)
    8202:	481b      	ldr	r0, [pc, #108]	; (8270 <z_ready_thread+0x9c>)
    8204:	f001 fe37 	bl	9e76 <assert_print>
    8208:	4916      	ldr	r1, [pc, #88]	; (8264 <z_ready_thread+0x90>)
    820a:	481a      	ldr	r0, [pc, #104]	; (8274 <z_ready_thread+0xa0>)
    820c:	f001 fe33 	bl	9e76 <assert_print>
    8210:	218e      	movs	r1, #142	; 0x8e
    8212:	4638      	mov	r0, r7
    8214:	f001 fe28 	bl	9e68 <assert_post_action>
    8218:	e7eb      	b.n	81f2 <z_ready_thread+0x1e>
			ready_thread(thread);
    821a:	4628      	mov	r0, r5
    821c:	f7ff ff84 	bl	8128 <ready_thread>
    8220:	e00a      	b.n	8238 <z_ready_thread+0x64>
	__asm__ volatile(
    8222:	f386 8811 	msr	BASEPRI, r6
    8226:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    822a:	2401      	movs	r4, #1
    822c:	b9cc      	cbnz	r4, 8262 <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    822e:	4628      	mov	r0, r5
    8230:	f002 fd14 	bl	ac5c <thread_active_elsewhere>
    8234:	2800      	cmp	r0, #0
    8236:	d0f0      	beq.n	821a <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8238:	480a      	ldr	r0, [pc, #40]	; (8264 <z_ready_thread+0x90>)
    823a:	f7fe ff75 	bl	7128 <z_spin_unlock_valid>
    823e:	2800      	cmp	r0, #0
    8240:	d1ef      	bne.n	8222 <z_ready_thread+0x4e>
    8242:	4c09      	ldr	r4, [pc, #36]	; (8268 <z_ready_thread+0x94>)
    8244:	23b9      	movs	r3, #185	; 0xb9
    8246:	4622      	mov	r2, r4
    8248:	490b      	ldr	r1, [pc, #44]	; (8278 <z_ready_thread+0xa4>)
    824a:	4809      	ldr	r0, [pc, #36]	; (8270 <z_ready_thread+0x9c>)
    824c:	f001 fe13 	bl	9e76 <assert_print>
    8250:	4904      	ldr	r1, [pc, #16]	; (8264 <z_ready_thread+0x90>)
    8252:	480a      	ldr	r0, [pc, #40]	; (827c <z_ready_thread+0xa8>)
    8254:	f001 fe0f 	bl	9e76 <assert_print>
    8258:	21b9      	movs	r1, #185	; 0xb9
    825a:	4620      	mov	r0, r4
    825c:	f001 fe04 	bl	9e68 <assert_post_action>
    8260:	e7df      	b.n	8222 <z_ready_thread+0x4e>
}
    8262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8264:	20004f64 	.word	0x20004f64
    8268:	0000b32c 	.word	0x0000b32c
    826c:	0000b38c 	.word	0x0000b38c
    8270:	0000b180 	.word	0x0000b180
    8274:	0000b3a4 	.word	0x0000b3a4
    8278:	0000b35c 	.word	0x0000b35c
    827c:	0000b374 	.word	0x0000b374

00008280 <z_sched_start>:
{
    8280:	b570      	push	{r4, r5, r6, lr}
    8282:	4604      	mov	r4, r0
	__asm__ volatile(
    8284:	f04f 0320 	mov.w	r3, #32
    8288:	f3ef 8511 	mrs	r5, BASEPRI
    828c:	f383 8812 	msr	BASEPRI_MAX, r3
    8290:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8294:	481f      	ldr	r0, [pc, #124]	; (8314 <z_sched_start+0x94>)
    8296:	f7fe ff37 	bl	7108 <z_spin_lock_valid>
    829a:	b188      	cbz	r0, 82c0 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    829c:	481d      	ldr	r0, [pc, #116]	; (8314 <z_sched_start+0x94>)
    829e:	f7fe ff53 	bl	7148 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    82a2:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    82a4:	f013 0f04 	tst.w	r3, #4
    82a8:	d01a      	beq.n	82e0 <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    82aa:	f023 0304 	bic.w	r3, r3, #4
    82ae:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    82b0:	4620      	mov	r0, r4
    82b2:	f7ff ff39 	bl	8128 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    82b6:	4629      	mov	r1, r5
    82b8:	4816      	ldr	r0, [pc, #88]	; (8314 <z_sched_start+0x94>)
    82ba:	f7ff fce7 	bl	7c8c <z_reschedule>
}
    82be:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    82c0:	4e15      	ldr	r6, [pc, #84]	; (8318 <z_sched_start+0x98>)
    82c2:	238e      	movs	r3, #142	; 0x8e
    82c4:	4632      	mov	r2, r6
    82c6:	4915      	ldr	r1, [pc, #84]	; (831c <z_sched_start+0x9c>)
    82c8:	4815      	ldr	r0, [pc, #84]	; (8320 <z_sched_start+0xa0>)
    82ca:	f001 fdd4 	bl	9e76 <assert_print>
    82ce:	4911      	ldr	r1, [pc, #68]	; (8314 <z_sched_start+0x94>)
    82d0:	4814      	ldr	r0, [pc, #80]	; (8324 <z_sched_start+0xa4>)
    82d2:	f001 fdd0 	bl	9e76 <assert_print>
    82d6:	218e      	movs	r1, #142	; 0x8e
    82d8:	4630      	mov	r0, r6
    82da:	f001 fdc5 	bl	9e68 <assert_post_action>
    82de:	e7dd      	b.n	829c <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    82e0:	480c      	ldr	r0, [pc, #48]	; (8314 <z_sched_start+0x94>)
    82e2:	f7fe ff21 	bl	7128 <z_spin_unlock_valid>
    82e6:	b120      	cbz	r0, 82f2 <z_sched_start+0x72>
	__asm__ volatile(
    82e8:	f385 8811 	msr	BASEPRI, r5
    82ec:	f3bf 8f6f 	isb	sy
		return;
    82f0:	e7e5      	b.n	82be <z_sched_start+0x3e>
    82f2:	4c09      	ldr	r4, [pc, #36]	; (8318 <z_sched_start+0x98>)
    82f4:	23b9      	movs	r3, #185	; 0xb9
    82f6:	4622      	mov	r2, r4
    82f8:	490b      	ldr	r1, [pc, #44]	; (8328 <z_sched_start+0xa8>)
    82fa:	4809      	ldr	r0, [pc, #36]	; (8320 <z_sched_start+0xa0>)
    82fc:	f001 fdbb 	bl	9e76 <assert_print>
    8300:	4904      	ldr	r1, [pc, #16]	; (8314 <z_sched_start+0x94>)
    8302:	480a      	ldr	r0, [pc, #40]	; (832c <z_sched_start+0xac>)
    8304:	f001 fdb7 	bl	9e76 <assert_print>
    8308:	21b9      	movs	r1, #185	; 0xb9
    830a:	4620      	mov	r0, r4
    830c:	f001 fdac 	bl	9e68 <assert_post_action>
    8310:	e7ea      	b.n	82e8 <z_sched_start+0x68>
    8312:	bf00      	nop
    8314:	20004f64 	.word	0x20004f64
    8318:	0000b32c 	.word	0x0000b32c
    831c:	0000b38c 	.word	0x0000b38c
    8320:	0000b180 	.word	0x0000b180
    8324:	0000b3a4 	.word	0x0000b3a4
    8328:	0000b35c 	.word	0x0000b35c
    832c:	0000b374 	.word	0x0000b374

00008330 <z_thread_timeout>:
{
    8330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8334:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    8336:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    833a:	2500      	movs	r5, #0
	__asm__ volatile(
    833c:	f04f 0320 	mov.w	r3, #32
    8340:	f3ef 8711 	mrs	r7, BASEPRI
    8344:	f383 8812 	msr	BASEPRI_MAX, r3
    8348:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    834c:	482b      	ldr	r0, [pc, #172]	; (83fc <z_thread_timeout+0xcc>)
    834e:	f7fe fedb 	bl	7108 <z_spin_lock_valid>
    8352:	b118      	cbz	r0, 835c <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    8354:	4829      	ldr	r0, [pc, #164]	; (83fc <z_thread_timeout+0xcc>)
    8356:	f7fe fef7 	bl	7148 <z_spin_lock_set_owner>
	return k;
    835a:	e026      	b.n	83aa <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    835c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8400 <z_thread_timeout+0xd0>
    8360:	238e      	movs	r3, #142	; 0x8e
    8362:	4642      	mov	r2, r8
    8364:	4927      	ldr	r1, [pc, #156]	; (8404 <z_thread_timeout+0xd4>)
    8366:	4828      	ldr	r0, [pc, #160]	; (8408 <z_thread_timeout+0xd8>)
    8368:	f001 fd85 	bl	9e76 <assert_print>
    836c:	4923      	ldr	r1, [pc, #140]	; (83fc <z_thread_timeout+0xcc>)
    836e:	4827      	ldr	r0, [pc, #156]	; (840c <z_thread_timeout+0xdc>)
    8370:	f001 fd81 	bl	9e76 <assert_print>
    8374:	218e      	movs	r1, #142	; 0x8e
    8376:	4640      	mov	r0, r8
    8378:	f001 fd76 	bl	9e68 <assert_post_action>
    837c:	e7ea      	b.n	8354 <z_thread_timeout+0x24>
    837e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    8382:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    8386:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    838a:	f023 0310 	bic.w	r3, r3, #16
    838e:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    8392:	4630      	mov	r0, r6
    8394:	f7ff fec8 	bl	8128 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8398:	4818      	ldr	r0, [pc, #96]	; (83fc <z_thread_timeout+0xcc>)
    839a:	f7fe fec5 	bl	7128 <z_spin_unlock_valid>
    839e:	b1d8      	cbz	r0, 83d8 <z_thread_timeout+0xa8>
	__asm__ volatile(
    83a0:	f387 8811 	msr	BASEPRI, r7
    83a4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    83a8:	2501      	movs	r5, #1
    83aa:	bb2d      	cbnz	r5, 83f8 <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    83ac:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    83b0:	f013 0f28 	tst.w	r3, #40	; 0x28
    83b4:	d1f0      	bne.n	8398 <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    83b6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    83ba:	2b00      	cmp	r3, #0
    83bc:	d0df      	beq.n	837e <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    83be:	4630      	mov	r0, r6
    83c0:	f7ff fbb0 	bl	7b24 <pended_on_thread>
    83c4:	4631      	mov	r1, r6
    83c6:	f7ff fd31 	bl	7e2c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    83ca:	7b73      	ldrb	r3, [r6, #13]
    83cc:	f023 0302 	bic.w	r3, r3, #2
    83d0:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    83d2:	2300      	movs	r3, #0
    83d4:	60b3      	str	r3, [r6, #8]
}
    83d6:	e7d2      	b.n	837e <z_thread_timeout+0x4e>
    83d8:	4d09      	ldr	r5, [pc, #36]	; (8400 <z_thread_timeout+0xd0>)
    83da:	23b9      	movs	r3, #185	; 0xb9
    83dc:	462a      	mov	r2, r5
    83de:	490c      	ldr	r1, [pc, #48]	; (8410 <z_thread_timeout+0xe0>)
    83e0:	4809      	ldr	r0, [pc, #36]	; (8408 <z_thread_timeout+0xd8>)
    83e2:	f001 fd48 	bl	9e76 <assert_print>
    83e6:	4905      	ldr	r1, [pc, #20]	; (83fc <z_thread_timeout+0xcc>)
    83e8:	480a      	ldr	r0, [pc, #40]	; (8414 <z_thread_timeout+0xe4>)
    83ea:	f001 fd44 	bl	9e76 <assert_print>
    83ee:	21b9      	movs	r1, #185	; 0xb9
    83f0:	4628      	mov	r0, r5
    83f2:	f001 fd39 	bl	9e68 <assert_post_action>
    83f6:	e7d3      	b.n	83a0 <z_thread_timeout+0x70>
}
    83f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83fc:	20004f64 	.word	0x20004f64
    8400:	0000b32c 	.word	0x0000b32c
    8404:	0000b38c 	.word	0x0000b38c
    8408:	0000b180 	.word	0x0000b180
    840c:	0000b3a4 	.word	0x0000b3a4
    8410:	0000b35c 	.word	0x0000b35c
    8414:	0000b374 	.word	0x0000b374

00008418 <unready_thread>:
{
    8418:	b510      	push	{r4, lr}
    841a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    841c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    841e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    8422:	2b00      	cmp	r3, #0
    8424:	db08      	blt.n	8438 <unready_thread+0x20>
	update_cache(thread == _current);
    8426:	4b08      	ldr	r3, [pc, #32]	; (8448 <unready_thread+0x30>)
    8428:	6898      	ldr	r0, [r3, #8]
    842a:	42a0      	cmp	r0, r4
    842c:	bf14      	ite	ne
    842e:	2000      	movne	r0, #0
    8430:	2001      	moveq	r0, #1
    8432:	f7ff fd1f 	bl	7e74 <update_cache>
}
    8436:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8438:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    843c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    843e:	4601      	mov	r1, r0
    8440:	4802      	ldr	r0, [pc, #8]	; (844c <unready_thread+0x34>)
    8442:	f7ff fcf3 	bl	7e2c <z_priq_dumb_remove>
}
    8446:	e7ee      	b.n	8426 <unready_thread+0xe>
    8448:	20004f28 	.word	0x20004f28
    844c:	20004f48 	.word	0x20004f48

00008450 <add_to_waitq_locked>:
{
    8450:	b570      	push	{r4, r5, r6, lr}
    8452:	4605      	mov	r5, r0
    8454:	460e      	mov	r6, r1
	unready_thread(thread);
    8456:	f7ff ffdf 	bl	8418 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    845a:	7b6b      	ldrb	r3, [r5, #13]
    845c:	f043 0302 	orr.w	r3, r3, #2
    8460:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    8462:	b1ce      	cbz	r6, 8498 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    8464:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8466:	4b17      	ldr	r3, [pc, #92]	; (84c4 <add_to_waitq_locked+0x74>)
    8468:	429d      	cmp	r5, r3
    846a:	d016      	beq.n	849a <add_to_waitq_locked+0x4a>
	return list->head == list;
    846c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    846e:	42a6      	cmp	r6, r4
    8470:	d025      	beq.n	84be <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8472:	b164      	cbz	r4, 848e <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8474:	4621      	mov	r1, r4
    8476:	4628      	mov	r0, r5
    8478:	f002 fbf2 	bl	ac60 <z_sched_prio_cmp>
    847c:	2800      	cmp	r0, #0
    847e:	dc18      	bgt.n	84b2 <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8480:	b12c      	cbz	r4, 848e <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    8482:	6873      	ldr	r3, [r6, #4]
    8484:	429c      	cmp	r4, r3
    8486:	d002      	beq.n	848e <add_to_waitq_locked+0x3e>
    8488:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    848a:	2c00      	cmp	r4, #0
    848c:	d1f1      	bne.n	8472 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    848e:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    8490:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    8492:	606b      	str	r3, [r5, #4]
	tail->next = node;
    8494:	601d      	str	r5, [r3, #0]
	list->tail = node;
    8496:	6075      	str	r5, [r6, #4]
}
    8498:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    849a:	4c0b      	ldr	r4, [pc, #44]	; (84c8 <add_to_waitq_locked+0x78>)
    849c:	23ba      	movs	r3, #186	; 0xba
    849e:	4622      	mov	r2, r4
    84a0:	490a      	ldr	r1, [pc, #40]	; (84cc <add_to_waitq_locked+0x7c>)
    84a2:	480b      	ldr	r0, [pc, #44]	; (84d0 <add_to_waitq_locked+0x80>)
    84a4:	f001 fce7 	bl	9e76 <assert_print>
    84a8:	21ba      	movs	r1, #186	; 0xba
    84aa:	4620      	mov	r0, r4
    84ac:	f001 fcdc 	bl	9e68 <assert_post_action>
    84b0:	e7dc      	b.n	846c <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    84b2:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    84b4:	606b      	str	r3, [r5, #4]
	node->next = successor;
    84b6:	602c      	str	r4, [r5, #0]
	prev->next = node;
    84b8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    84ba:	6065      	str	r5, [r4, #4]
}
    84bc:	e7ec      	b.n	8498 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    84be:	2400      	movs	r4, #0
    84c0:	e7d7      	b.n	8472 <add_to_waitq_locked+0x22>
    84c2:	bf00      	nop
    84c4:	20004290 	.word	0x20004290
    84c8:	0000ca94 	.word	0x0000ca94
    84cc:	0000cad0 	.word	0x0000cad0
    84d0:	0000b180 	.word	0x0000b180

000084d4 <pend>:
{
    84d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    84d8:	4605      	mov	r5, r0
    84da:	460e      	mov	r6, r1
    84dc:	4691      	mov	r9, r2
    84de:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    84e0:	2400      	movs	r4, #0
	__asm__ volatile(
    84e2:	f04f 0320 	mov.w	r3, #32
    84e6:	f3ef 8711 	mrs	r7, BASEPRI
    84ea:	f383 8812 	msr	BASEPRI_MAX, r3
    84ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    84f2:	481f      	ldr	r0, [pc, #124]	; (8570 <pend+0x9c>)
    84f4:	f7fe fe08 	bl	7108 <z_spin_lock_valid>
    84f8:	b118      	cbz	r0, 8502 <pend+0x2e>
	z_spin_lock_set_owner(l);
    84fa:	481d      	ldr	r0, [pc, #116]	; (8570 <pend+0x9c>)
    84fc:	f7fe fe24 	bl	7148 <z_spin_lock_set_owner>
	return k;
    8500:	e015      	b.n	852e <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8502:	f8df a070 	ldr.w	sl, [pc, #112]	; 8574 <pend+0xa0>
    8506:	238e      	movs	r3, #142	; 0x8e
    8508:	4652      	mov	r2, sl
    850a:	491b      	ldr	r1, [pc, #108]	; (8578 <pend+0xa4>)
    850c:	481b      	ldr	r0, [pc, #108]	; (857c <pend+0xa8>)
    850e:	f001 fcb2 	bl	9e76 <assert_print>
    8512:	4917      	ldr	r1, [pc, #92]	; (8570 <pend+0x9c>)
    8514:	481a      	ldr	r0, [pc, #104]	; (8580 <pend+0xac>)
    8516:	f001 fcae 	bl	9e76 <assert_print>
    851a:	218e      	movs	r1, #142	; 0x8e
    851c:	4650      	mov	r0, sl
    851e:	f001 fca3 	bl	9e68 <assert_post_action>
    8522:	e7ea      	b.n	84fa <pend+0x26>
	__asm__ volatile(
    8524:	f387 8811 	msr	BASEPRI, r7
    8528:	f3bf 8f6f 	isb	sy
    852c:	2401      	movs	r4, #1
    852e:	b9c4      	cbnz	r4, 8562 <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    8530:	4631      	mov	r1, r6
    8532:	4628      	mov	r0, r5
    8534:	f7ff ff8c 	bl	8450 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8538:	480d      	ldr	r0, [pc, #52]	; (8570 <pend+0x9c>)
    853a:	f7fe fdf5 	bl	7128 <z_spin_unlock_valid>
    853e:	2800      	cmp	r0, #0
    8540:	d1f0      	bne.n	8524 <pend+0x50>
    8542:	4c0c      	ldr	r4, [pc, #48]	; (8574 <pend+0xa0>)
    8544:	23b9      	movs	r3, #185	; 0xb9
    8546:	4622      	mov	r2, r4
    8548:	490e      	ldr	r1, [pc, #56]	; (8584 <pend+0xb0>)
    854a:	480c      	ldr	r0, [pc, #48]	; (857c <pend+0xa8>)
    854c:	f001 fc93 	bl	9e76 <assert_print>
    8550:	4907      	ldr	r1, [pc, #28]	; (8570 <pend+0x9c>)
    8552:	480d      	ldr	r0, [pc, #52]	; (8588 <pend+0xb4>)
    8554:	f001 fc8f 	bl	9e76 <assert_print>
    8558:	21b9      	movs	r1, #185	; 0xb9
    855a:	4620      	mov	r0, r4
    855c:	f001 fc84 	bl	9e68 <assert_post_action>
    8560:	e7e0      	b.n	8524 <pend+0x50>
	add_thread_timeout(thread, timeout);
    8562:	464a      	mov	r2, r9
    8564:	4643      	mov	r3, r8
    8566:	4628      	mov	r0, r5
    8568:	f7ff faf6 	bl	7b58 <add_thread_timeout>
}
    856c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8570:	20004f64 	.word	0x20004f64
    8574:	0000b32c 	.word	0x0000b32c
    8578:	0000b38c 	.word	0x0000b38c
    857c:	0000b180 	.word	0x0000b180
    8580:	0000b3a4 	.word	0x0000b3a4
    8584:	0000b35c 	.word	0x0000b35c
    8588:	0000b374 	.word	0x0000b374

0000858c <z_pend_curr>:
{
    858c:	b570      	push	{r4, r5, r6, lr}
    858e:	4604      	mov	r4, r0
    8590:	460d      	mov	r5, r1
    8592:	4611      	mov	r1, r2
	pending_current = _current;
    8594:	4b0f      	ldr	r3, [pc, #60]	; (85d4 <z_pend_curr+0x48>)
    8596:	6898      	ldr	r0, [r3, #8]
    8598:	4b0f      	ldr	r3, [pc, #60]	; (85d8 <z_pend_curr+0x4c>)
    859a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    859c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    85a0:	f7ff ff98 	bl	84d4 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    85a4:	4620      	mov	r0, r4
    85a6:	f7fe fdbf 	bl	7128 <z_spin_unlock_valid>
    85aa:	b118      	cbz	r0, 85b4 <z_pend_curr+0x28>
    85ac:	4628      	mov	r0, r5
    85ae:	f7fa fbd9 	bl	2d64 <arch_swap>
}
    85b2:	bd70      	pop	{r4, r5, r6, pc}
    85b4:	4e09      	ldr	r6, [pc, #36]	; (85dc <z_pend_curr+0x50>)
    85b6:	23d0      	movs	r3, #208	; 0xd0
    85b8:	4632      	mov	r2, r6
    85ba:	4909      	ldr	r1, [pc, #36]	; (85e0 <z_pend_curr+0x54>)
    85bc:	4809      	ldr	r0, [pc, #36]	; (85e4 <z_pend_curr+0x58>)
    85be:	f001 fc5a 	bl	9e76 <assert_print>
    85c2:	4621      	mov	r1, r4
    85c4:	4808      	ldr	r0, [pc, #32]	; (85e8 <z_pend_curr+0x5c>)
    85c6:	f001 fc56 	bl	9e76 <assert_print>
    85ca:	21d0      	movs	r1, #208	; 0xd0
    85cc:	4630      	mov	r0, r6
    85ce:	f001 fc4b 	bl	9e68 <assert_post_action>
    85d2:	e7eb      	b.n	85ac <z_pend_curr+0x20>
    85d4:	20004f28 	.word	0x20004f28
    85d8:	20004f60 	.word	0x20004f60
    85dc:	0000b32c 	.word	0x0000b32c
    85e0:	0000b35c 	.word	0x0000b35c
    85e4:	0000b180 	.word	0x0000b180
    85e8:	0000b374 	.word	0x0000b374

000085ec <z_set_prio>:
{
    85ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    85f0:	4604      	mov	r4, r0
    85f2:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    85f4:	2500      	movs	r5, #0
	__asm__ volatile(
    85f6:	f04f 0320 	mov.w	r3, #32
    85fa:	f3ef 8811 	mrs	r8, BASEPRI
    85fe:	f383 8812 	msr	BASEPRI_MAX, r3
    8602:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8606:	4844      	ldr	r0, [pc, #272]	; (8718 <z_set_prio+0x12c>)
    8608:	f7fe fd7e 	bl	7108 <z_spin_lock_valid>
    860c:	b120      	cbz	r0, 8618 <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    860e:	4842      	ldr	r0, [pc, #264]	; (8718 <z_set_prio+0x12c>)
    8610:	f7fe fd9a 	bl	7148 <z_spin_lock_set_owner>
	bool need_sched = 0;
    8614:	2700      	movs	r7, #0
	return k;
    8616:	e01d      	b.n	8654 <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8618:	4f40      	ldr	r7, [pc, #256]	; (871c <z_set_prio+0x130>)
    861a:	238e      	movs	r3, #142	; 0x8e
    861c:	463a      	mov	r2, r7
    861e:	4940      	ldr	r1, [pc, #256]	; (8720 <z_set_prio+0x134>)
    8620:	4840      	ldr	r0, [pc, #256]	; (8724 <z_set_prio+0x138>)
    8622:	f001 fc28 	bl	9e76 <assert_print>
    8626:	493c      	ldr	r1, [pc, #240]	; (8718 <z_set_prio+0x12c>)
    8628:	483f      	ldr	r0, [pc, #252]	; (8728 <z_set_prio+0x13c>)
    862a:	f001 fc24 	bl	9e76 <assert_print>
    862e:	218e      	movs	r1, #142	; 0x8e
    8630:	4638      	mov	r0, r7
    8632:	f001 fc19 	bl	9e68 <assert_post_action>
    8636:	e7ea      	b.n	860e <z_set_prio+0x22>
		if (need_sched) {
    8638:	f013 0701 	ands.w	r7, r3, #1
    863c:	d116      	bne.n	866c <z_set_prio+0x80>
			thread->base.prio = prio;
    863e:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8640:	4835      	ldr	r0, [pc, #212]	; (8718 <z_set_prio+0x12c>)
    8642:	f7fe fd71 	bl	7128 <z_spin_unlock_valid>
    8646:	2800      	cmp	r0, #0
    8648:	d053      	beq.n	86f2 <z_set_prio+0x106>
	__asm__ volatile(
    864a:	f388 8811 	msr	BASEPRI, r8
    864e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8652:	2501      	movs	r5, #1
    8654:	462b      	mov	r3, r5
    8656:	2d00      	cmp	r5, #0
    8658:	d15b      	bne.n	8712 <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    865a:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    865c:	f012 0f1f 	tst.w	r2, #31
    8660:	d1ea      	bne.n	8638 <z_set_prio+0x4c>
	return node->next != NULL;
    8662:	69a1      	ldr	r1, [r4, #24]
    8664:	2900      	cmp	r1, #0
    8666:	d1e7      	bne.n	8638 <z_set_prio+0x4c>
    8668:	2301      	movs	r3, #1
    866a:	e7e5      	b.n	8638 <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    866c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8670:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8672:	4621      	mov	r1, r4
    8674:	482d      	ldr	r0, [pc, #180]	; (872c <z_set_prio+0x140>)
    8676:	f7ff fbd9 	bl	7e2c <z_priq_dumb_remove>
				thread->base.prio = prio;
    867a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    867c:	7b63      	ldrb	r3, [r4, #13]
    867e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8682:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8684:	4b2a      	ldr	r3, [pc, #168]	; (8730 <z_set_prio+0x144>)
    8686:	429c      	cmp	r4, r3
    8688:	d01f      	beq.n	86ca <z_set_prio+0xde>
	return list->head == list;
    868a:	4b2a      	ldr	r3, [pc, #168]	; (8734 <z_set_prio+0x148>)
    868c:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8690:	429d      	cmp	r5, r3
    8692:	d02c      	beq.n	86ee <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8694:	b16d      	cbz	r5, 86b2 <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8696:	4629      	mov	r1, r5
    8698:	4620      	mov	r0, r4
    869a:	f002 fae1 	bl	ac60 <z_sched_prio_cmp>
    869e:	2800      	cmp	r0, #0
    86a0:	dc1f      	bgt.n	86e2 <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    86a2:	b135      	cbz	r5, 86b2 <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    86a4:	4b23      	ldr	r3, [pc, #140]	; (8734 <z_set_prio+0x148>)
    86a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    86a8:	429d      	cmp	r5, r3
    86aa:	d002      	beq.n	86b2 <z_set_prio+0xc6>
    86ac:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    86ae:	2d00      	cmp	r5, #0
    86b0:	d1f0      	bne.n	8694 <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    86b2:	4b20      	ldr	r3, [pc, #128]	; (8734 <z_set_prio+0x148>)
    86b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    86b6:	f103 0120 	add.w	r1, r3, #32
    86ba:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    86bc:	6062      	str	r2, [r4, #4]
	tail->next = node;
    86be:	6014      	str	r4, [r2, #0]
	list->tail = node;
    86c0:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    86c2:	2001      	movs	r0, #1
    86c4:	f7ff fbd6 	bl	7e74 <update_cache>
    86c8:	e7ba      	b.n	8640 <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    86ca:	4d1b      	ldr	r5, [pc, #108]	; (8738 <z_set_prio+0x14c>)
    86cc:	23ba      	movs	r3, #186	; 0xba
    86ce:	462a      	mov	r2, r5
    86d0:	491a      	ldr	r1, [pc, #104]	; (873c <z_set_prio+0x150>)
    86d2:	4814      	ldr	r0, [pc, #80]	; (8724 <z_set_prio+0x138>)
    86d4:	f001 fbcf 	bl	9e76 <assert_print>
    86d8:	21ba      	movs	r1, #186	; 0xba
    86da:	4628      	mov	r0, r5
    86dc:	f001 fbc4 	bl	9e68 <assert_post_action>
    86e0:	e7d3      	b.n	868a <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    86e2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    86e4:	6063      	str	r3, [r4, #4]
	node->next = successor;
    86e6:	6025      	str	r5, [r4, #0]
	prev->next = node;
    86e8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    86ea:	606c      	str	r4, [r5, #4]
}
    86ec:	e7e9      	b.n	86c2 <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    86ee:	2500      	movs	r5, #0
    86f0:	e7d0      	b.n	8694 <z_set_prio+0xa8>
    86f2:	4d0a      	ldr	r5, [pc, #40]	; (871c <z_set_prio+0x130>)
    86f4:	23b9      	movs	r3, #185	; 0xb9
    86f6:	462a      	mov	r2, r5
    86f8:	4911      	ldr	r1, [pc, #68]	; (8740 <z_set_prio+0x154>)
    86fa:	480a      	ldr	r0, [pc, #40]	; (8724 <z_set_prio+0x138>)
    86fc:	f001 fbbb 	bl	9e76 <assert_print>
    8700:	4905      	ldr	r1, [pc, #20]	; (8718 <z_set_prio+0x12c>)
    8702:	4810      	ldr	r0, [pc, #64]	; (8744 <z_set_prio+0x158>)
    8704:	f001 fbb7 	bl	9e76 <assert_print>
    8708:	21b9      	movs	r1, #185	; 0xb9
    870a:	4628      	mov	r0, r5
    870c:	f001 fbac 	bl	9e68 <assert_post_action>
    8710:	e79b      	b.n	864a <z_set_prio+0x5e>
}
    8712:	4638      	mov	r0, r7
    8714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8718:	20004f64 	.word	0x20004f64
    871c:	0000b32c 	.word	0x0000b32c
    8720:	0000b38c 	.word	0x0000b38c
    8724:	0000b180 	.word	0x0000b180
    8728:	0000b3a4 	.word	0x0000b3a4
    872c:	20004f48 	.word	0x20004f48
    8730:	20004290 	.word	0x20004290
    8734:	20004f28 	.word	0x20004f28
    8738:	0000ca94 	.word	0x0000ca94
    873c:	0000cad0 	.word	0x0000cad0
    8740:	0000b35c 	.word	0x0000b35c
    8744:	0000b374 	.word	0x0000b374

00008748 <z_impl_k_thread_suspend>:
{
    8748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    874a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    874c:	3018      	adds	r0, #24
    874e:	f000 fd6f 	bl	9230 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    8752:	2500      	movs	r5, #0
	__asm__ volatile(
    8754:	f04f 0320 	mov.w	r3, #32
    8758:	f3ef 8611 	mrs	r6, BASEPRI
    875c:	f383 8812 	msr	BASEPRI_MAX, r3
    8760:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8764:	482d      	ldr	r0, [pc, #180]	; (881c <z_impl_k_thread_suspend+0xd4>)
    8766:	f7fe fccf 	bl	7108 <z_spin_lock_valid>
    876a:	b118      	cbz	r0, 8774 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    876c:	482b      	ldr	r0, [pc, #172]	; (881c <z_impl_k_thread_suspend+0xd4>)
    876e:	f7fe fceb 	bl	7148 <z_spin_lock_set_owner>
	return k;
    8772:	e01c      	b.n	87ae <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8774:	4f2a      	ldr	r7, [pc, #168]	; (8820 <z_impl_k_thread_suspend+0xd8>)
    8776:	238e      	movs	r3, #142	; 0x8e
    8778:	463a      	mov	r2, r7
    877a:	492a      	ldr	r1, [pc, #168]	; (8824 <z_impl_k_thread_suspend+0xdc>)
    877c:	482a      	ldr	r0, [pc, #168]	; (8828 <z_impl_k_thread_suspend+0xe0>)
    877e:	f001 fb7a 	bl	9e76 <assert_print>
    8782:	4926      	ldr	r1, [pc, #152]	; (881c <z_impl_k_thread_suspend+0xd4>)
    8784:	4829      	ldr	r0, [pc, #164]	; (882c <z_impl_k_thread_suspend+0xe4>)
    8786:	f001 fb76 	bl	9e76 <assert_print>
    878a:	218e      	movs	r1, #142	; 0x8e
    878c:	4638      	mov	r0, r7
    878e:	f001 fb6b 	bl	9e68 <assert_post_action>
    8792:	e7eb      	b.n	876c <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8794:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8798:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    879a:	4621      	mov	r1, r4
    879c:	4824      	ldr	r0, [pc, #144]	; (8830 <z_impl_k_thread_suspend+0xe8>)
    879e:	f7ff fb45 	bl	7e2c <z_priq_dumb_remove>
}
    87a2:	e00a      	b.n	87ba <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    87a4:	f386 8811 	msr	BASEPRI, r6
    87a8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    87ac:	2501      	movs	r5, #1
    87ae:	bb2d      	cbnz	r5, 87fc <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    87b0:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    87b2:	f994 300d 	ldrsb.w	r3, [r4, #13]
    87b6:	2b00      	cmp	r3, #0
    87b8:	dbec      	blt.n	8794 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    87ba:	7b63      	ldrb	r3, [r4, #13]
    87bc:	f043 0310 	orr.w	r3, r3, #16
    87c0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    87c2:	4b1c      	ldr	r3, [pc, #112]	; (8834 <z_impl_k_thread_suspend+0xec>)
    87c4:	6898      	ldr	r0, [r3, #8]
    87c6:	42a0      	cmp	r0, r4
    87c8:	bf14      	ite	ne
    87ca:	2000      	movne	r0, #0
    87cc:	2001      	moveq	r0, #1
    87ce:	f7ff fb51 	bl	7e74 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    87d2:	4812      	ldr	r0, [pc, #72]	; (881c <z_impl_k_thread_suspend+0xd4>)
    87d4:	f7fe fca8 	bl	7128 <z_spin_unlock_valid>
    87d8:	2800      	cmp	r0, #0
    87da:	d1e3      	bne.n	87a4 <z_impl_k_thread_suspend+0x5c>
    87dc:	4d10      	ldr	r5, [pc, #64]	; (8820 <z_impl_k_thread_suspend+0xd8>)
    87de:	23b9      	movs	r3, #185	; 0xb9
    87e0:	462a      	mov	r2, r5
    87e2:	4915      	ldr	r1, [pc, #84]	; (8838 <z_impl_k_thread_suspend+0xf0>)
    87e4:	4810      	ldr	r0, [pc, #64]	; (8828 <z_impl_k_thread_suspend+0xe0>)
    87e6:	f001 fb46 	bl	9e76 <assert_print>
    87ea:	490c      	ldr	r1, [pc, #48]	; (881c <z_impl_k_thread_suspend+0xd4>)
    87ec:	4813      	ldr	r0, [pc, #76]	; (883c <z_impl_k_thread_suspend+0xf4>)
    87ee:	f001 fb42 	bl	9e76 <assert_print>
    87f2:	21b9      	movs	r1, #185	; 0xb9
    87f4:	4628      	mov	r0, r5
    87f6:	f001 fb37 	bl	9e68 <assert_post_action>
    87fa:	e7d3      	b.n	87a4 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    87fc:	4b0d      	ldr	r3, [pc, #52]	; (8834 <z_impl_k_thread_suspend+0xec>)
    87fe:	689b      	ldr	r3, [r3, #8]
    8800:	42a3      	cmp	r3, r4
    8802:	d000      	beq.n	8806 <z_impl_k_thread_suspend+0xbe>
}
    8804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    8806:	f04f 0320 	mov.w	r3, #32
    880a:	f3ef 8011 	mrs	r0, BASEPRI
    880e:	f383 8812 	msr	BASEPRI_MAX, r3
    8812:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8816:	f002 fa2d 	bl	ac74 <z_reschedule_irqlock>
    881a:	e7f3      	b.n	8804 <z_impl_k_thread_suspend+0xbc>
    881c:	20004f64 	.word	0x20004f64
    8820:	0000b32c 	.word	0x0000b32c
    8824:	0000b38c 	.word	0x0000b38c
    8828:	0000b180 	.word	0x0000b180
    882c:	0000b3a4 	.word	0x0000b3a4
    8830:	20004f48 	.word	0x20004f48
    8834:	20004f28 	.word	0x20004f28
    8838:	0000b35c 	.word	0x0000b35c
    883c:	0000b374 	.word	0x0000b374

00008840 <k_sched_unlock>:
{
    8840:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    8842:	2400      	movs	r4, #0
    8844:	f04f 0320 	mov.w	r3, #32
    8848:	f3ef 8511 	mrs	r5, BASEPRI
    884c:	f383 8812 	msr	BASEPRI_MAX, r3
    8850:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8854:	4838      	ldr	r0, [pc, #224]	; (8938 <k_sched_unlock+0xf8>)
    8856:	f7fe fc57 	bl	7108 <z_spin_lock_valid>
    885a:	b118      	cbz	r0, 8864 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    885c:	4836      	ldr	r0, [pc, #216]	; (8938 <k_sched_unlock+0xf8>)
    885e:	f7fe fc73 	bl	7148 <z_spin_lock_set_owner>
	return k;
    8862:	e036      	b.n	88d2 <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8864:	4e35      	ldr	r6, [pc, #212]	; (893c <k_sched_unlock+0xfc>)
    8866:	238e      	movs	r3, #142	; 0x8e
    8868:	4632      	mov	r2, r6
    886a:	4935      	ldr	r1, [pc, #212]	; (8940 <k_sched_unlock+0x100>)
    886c:	4835      	ldr	r0, [pc, #212]	; (8944 <k_sched_unlock+0x104>)
    886e:	f001 fb02 	bl	9e76 <assert_print>
    8872:	4931      	ldr	r1, [pc, #196]	; (8938 <k_sched_unlock+0xf8>)
    8874:	4834      	ldr	r0, [pc, #208]	; (8948 <k_sched_unlock+0x108>)
    8876:	f001 fafe 	bl	9e76 <assert_print>
    887a:	218e      	movs	r1, #142	; 0x8e
    887c:	4630      	mov	r0, r6
    887e:	f001 faf3 	bl	9e68 <assert_post_action>
    8882:	e7eb      	b.n	885c <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    8884:	4c31      	ldr	r4, [pc, #196]	; (894c <k_sched_unlock+0x10c>)
    8886:	f240 33bb 	movw	r3, #955	; 0x3bb
    888a:	4622      	mov	r2, r4
    888c:	4930      	ldr	r1, [pc, #192]	; (8950 <k_sched_unlock+0x110>)
    888e:	482d      	ldr	r0, [pc, #180]	; (8944 <k_sched_unlock+0x104>)
    8890:	f001 faf1 	bl	9e76 <assert_print>
    8894:	482f      	ldr	r0, [pc, #188]	; (8954 <k_sched_unlock+0x114>)
    8896:	f001 faee 	bl	9e76 <assert_print>
    889a:	f240 31bb 	movw	r1, #955	; 0x3bb
    889e:	4620      	mov	r0, r4
    88a0:	f001 fae2 	bl	9e68 <assert_post_action>
    88a4:	e01b      	b.n	88de <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    88a6:	4c29      	ldr	r4, [pc, #164]	; (894c <k_sched_unlock+0x10c>)
    88a8:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    88ac:	4622      	mov	r2, r4
    88ae:	492a      	ldr	r1, [pc, #168]	; (8958 <k_sched_unlock+0x118>)
    88b0:	4824      	ldr	r0, [pc, #144]	; (8944 <k_sched_unlock+0x104>)
    88b2:	f001 fae0 	bl	9e76 <assert_print>
    88b6:	4827      	ldr	r0, [pc, #156]	; (8954 <k_sched_unlock+0x114>)
    88b8:	f001 fadd 	bl	9e76 <assert_print>
    88bc:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    88c0:	4620      	mov	r0, r4
    88c2:	f001 fad1 	bl	9e68 <assert_post_action>
    88c6:	e00e      	b.n	88e6 <k_sched_unlock+0xa6>
	__asm__ volatile(
    88c8:	f385 8811 	msr	BASEPRI, r5
    88cc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    88d0:	2401      	movs	r4, #1
    88d2:	bb2c      	cbnz	r4, 8920 <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    88d4:	4b21      	ldr	r3, [pc, #132]	; (895c <k_sched_unlock+0x11c>)
    88d6:	689b      	ldr	r3, [r3, #8]
    88d8:	7bdb      	ldrb	r3, [r3, #15]
    88da:	2b00      	cmp	r3, #0
    88dc:	d0d2      	beq.n	8884 <k_sched_unlock+0x44>
    88de:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    88e2:	2b00      	cmp	r3, #0
    88e4:	d1df      	bne.n	88a6 <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    88e6:	4b1d      	ldr	r3, [pc, #116]	; (895c <k_sched_unlock+0x11c>)
    88e8:	689a      	ldr	r2, [r3, #8]
    88ea:	7bd3      	ldrb	r3, [r2, #15]
    88ec:	3301      	adds	r3, #1
    88ee:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    88f0:	2000      	movs	r0, #0
    88f2:	f7ff fabf 	bl	7e74 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    88f6:	4810      	ldr	r0, [pc, #64]	; (8938 <k_sched_unlock+0xf8>)
    88f8:	f7fe fc16 	bl	7128 <z_spin_unlock_valid>
    88fc:	2800      	cmp	r0, #0
    88fe:	d1e3      	bne.n	88c8 <k_sched_unlock+0x88>
    8900:	4c0e      	ldr	r4, [pc, #56]	; (893c <k_sched_unlock+0xfc>)
    8902:	23b9      	movs	r3, #185	; 0xb9
    8904:	4622      	mov	r2, r4
    8906:	4916      	ldr	r1, [pc, #88]	; (8960 <k_sched_unlock+0x120>)
    8908:	480e      	ldr	r0, [pc, #56]	; (8944 <k_sched_unlock+0x104>)
    890a:	f001 fab4 	bl	9e76 <assert_print>
    890e:	490a      	ldr	r1, [pc, #40]	; (8938 <k_sched_unlock+0xf8>)
    8910:	4814      	ldr	r0, [pc, #80]	; (8964 <k_sched_unlock+0x124>)
    8912:	f001 fab0 	bl	9e76 <assert_print>
    8916:	21b9      	movs	r1, #185	; 0xb9
    8918:	4620      	mov	r0, r4
    891a:	f001 faa5 	bl	9e68 <assert_post_action>
    891e:	e7d3      	b.n	88c8 <k_sched_unlock+0x88>
	__asm__ volatile(
    8920:	f04f 0320 	mov.w	r3, #32
    8924:	f3ef 8011 	mrs	r0, BASEPRI
    8928:	f383 8812 	msr	BASEPRI_MAX, r3
    892c:	f3bf 8f6f 	isb	sy
    8930:	f002 f9a0 	bl	ac74 <z_reschedule_irqlock>
}
    8934:	bd70      	pop	{r4, r5, r6, pc}
    8936:	bf00      	nop
    8938:	20004f64 	.word	0x20004f64
    893c:	0000b32c 	.word	0x0000b32c
    8940:	0000b38c 	.word	0x0000b38c
    8944:	0000b180 	.word	0x0000b180
    8948:	0000b3a4 	.word	0x0000b3a4
    894c:	0000ca94 	.word	0x0000ca94
    8950:	0000cb1c 	.word	0x0000cb1c
    8954:	0000c9ec 	.word	0x0000c9ec
    8958:	0000c8a4 	.word	0x0000c8a4
    895c:	20004f28 	.word	0x20004f28
    8960:	0000b35c 	.word	0x0000b35c
    8964:	0000b374 	.word	0x0000b374

00008968 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    8968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    896a:	7b43      	ldrb	r3, [r0, #13]
    896c:	f013 0f08 	tst.w	r3, #8
    8970:	d145      	bne.n	89fe <end_thread+0x96>
    8972:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    8974:	f043 0308 	orr.w	r3, r3, #8
    8978:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    897a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    897e:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    8980:	f013 0f80 	tst.w	r3, #128	; 0x80
    8984:	d12d      	bne.n	89e2 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    8986:	68ab      	ldr	r3, [r5, #8]
    8988:	b15b      	cbz	r3, 89a2 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    898a:	4628      	mov	r0, r5
    898c:	f7ff f8ca 	bl	7b24 <pended_on_thread>
    8990:	4629      	mov	r1, r5
    8992:	f7ff fa4b 	bl	7e2c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8996:	7b6b      	ldrb	r3, [r5, #13]
    8998:	f023 0302 	bic.w	r3, r3, #2
    899c:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    899e:	2300      	movs	r3, #0
    89a0:	60ab      	str	r3, [r5, #8]
    89a2:	f105 0018 	add.w	r0, r5, #24
    89a6:	f000 fc43 	bl	9230 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    89aa:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    89ae:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    89b0:	42bc      	cmp	r4, r7
    89b2:	d01e      	beq.n	89f2 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    89b4:	b1ec      	cbz	r4, 89f2 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    89b6:	4620      	mov	r0, r4
    89b8:	f7ff f8b4 	bl	7b24 <pended_on_thread>
    89bc:	4621      	mov	r1, r4
    89be:	f7ff fa35 	bl	7e2c <z_priq_dumb_remove>
    89c2:	7b63      	ldrb	r3, [r4, #13]
    89c4:	f023 0302 	bic.w	r3, r3, #2
    89c8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    89ca:	2600      	movs	r6, #0
    89cc:	60a6      	str	r6, [r4, #8]
    89ce:	f104 0018 	add.w	r0, r4, #24
    89d2:	f000 fc2d 	bl	9230 <z_abort_timeout>
    89d6:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    89da:	4620      	mov	r0, r4
    89dc:	f7ff fba4 	bl	8128 <ready_thread>
    89e0:	e7e5      	b.n	89ae <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    89e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    89e6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    89e8:	4601      	mov	r1, r0
    89ea:	4805      	ldr	r0, [pc, #20]	; (8a00 <end_thread+0x98>)
    89ec:	f7ff fa1e 	bl	7e2c <z_priq_dumb_remove>
}
    89f0:	e7c9      	b.n	8986 <end_thread+0x1e>
		update_cache(1);
    89f2:	2001      	movs	r0, #1
    89f4:	f7ff fa3e 	bl	7e74 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    89f8:	4628      	mov	r0, r5
    89fa:	f7fe fbad 	bl	7158 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    89fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a00:	20004f48 	.word	0x20004f48

00008a04 <z_unpend_first_thread>:
{
    8a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a06:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    8a08:	2500      	movs	r5, #0
    8a0a:	f04f 0320 	mov.w	r3, #32
    8a0e:	f3ef 8711 	mrs	r7, BASEPRI
    8a12:	f383 8812 	msr	BASEPRI_MAX, r3
    8a16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a1a:	4825      	ldr	r0, [pc, #148]	; (8ab0 <z_unpend_first_thread+0xac>)
    8a1c:	f7fe fb74 	bl	7108 <z_spin_lock_valid>
    8a20:	b120      	cbz	r0, 8a2c <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    8a22:	4823      	ldr	r0, [pc, #140]	; (8ab0 <z_unpend_first_thread+0xac>)
    8a24:	f7fe fb90 	bl	7148 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    8a28:	2400      	movs	r4, #0
	return k;
    8a2a:	e018      	b.n	8a5e <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a2c:	4c21      	ldr	r4, [pc, #132]	; (8ab4 <z_unpend_first_thread+0xb0>)
    8a2e:	238e      	movs	r3, #142	; 0x8e
    8a30:	4622      	mov	r2, r4
    8a32:	4921      	ldr	r1, [pc, #132]	; (8ab8 <z_unpend_first_thread+0xb4>)
    8a34:	4821      	ldr	r0, [pc, #132]	; (8abc <z_unpend_first_thread+0xb8>)
    8a36:	f001 fa1e 	bl	9e76 <assert_print>
    8a3a:	491d      	ldr	r1, [pc, #116]	; (8ab0 <z_unpend_first_thread+0xac>)
    8a3c:	4820      	ldr	r0, [pc, #128]	; (8ac0 <z_unpend_first_thread+0xbc>)
    8a3e:	f001 fa1a 	bl	9e76 <assert_print>
    8a42:	218e      	movs	r1, #142	; 0x8e
    8a44:	4620      	mov	r0, r4
    8a46:	f001 fa0f 	bl	9e68 <assert_post_action>
    8a4a:	e7ea      	b.n	8a22 <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8a4c:	4818      	ldr	r0, [pc, #96]	; (8ab0 <z_unpend_first_thread+0xac>)
    8a4e:	f7fe fb6b 	bl	7128 <z_spin_unlock_valid>
    8a52:	b1d8      	cbz	r0, 8a8c <z_unpend_first_thread+0x88>
	__asm__ volatile(
    8a54:	f387 8811 	msr	BASEPRI, r7
    8a58:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8a5c:	2501      	movs	r5, #1
    8a5e:	bb2d      	cbnz	r5, 8aac <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    8a60:	4630      	mov	r0, r6
    8a62:	f002 f91c 	bl	ac9e <z_priq_dumb_best>
		if (thread != NULL) {
    8a66:	4604      	mov	r4, r0
    8a68:	2800      	cmp	r0, #0
    8a6a:	d0ef      	beq.n	8a4c <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8a6c:	f7ff f85a 	bl	7b24 <pended_on_thread>
    8a70:	4621      	mov	r1, r4
    8a72:	f7ff f9db 	bl	7e2c <z_priq_dumb_remove>
    8a76:	7b63      	ldrb	r3, [r4, #13]
    8a78:	f023 0302 	bic.w	r3, r3, #2
    8a7c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8a7e:	2300      	movs	r3, #0
    8a80:	60a3      	str	r3, [r4, #8]
    8a82:	f104 0018 	add.w	r0, r4, #24
    8a86:	f000 fbd3 	bl	9230 <z_abort_timeout>
    8a8a:	e7df      	b.n	8a4c <z_unpend_first_thread+0x48>
    8a8c:	4d09      	ldr	r5, [pc, #36]	; (8ab4 <z_unpend_first_thread+0xb0>)
    8a8e:	23b9      	movs	r3, #185	; 0xb9
    8a90:	462a      	mov	r2, r5
    8a92:	490c      	ldr	r1, [pc, #48]	; (8ac4 <z_unpend_first_thread+0xc0>)
    8a94:	4809      	ldr	r0, [pc, #36]	; (8abc <z_unpend_first_thread+0xb8>)
    8a96:	f001 f9ee 	bl	9e76 <assert_print>
    8a9a:	4905      	ldr	r1, [pc, #20]	; (8ab0 <z_unpend_first_thread+0xac>)
    8a9c:	480a      	ldr	r0, [pc, #40]	; (8ac8 <z_unpend_first_thread+0xc4>)
    8a9e:	f001 f9ea 	bl	9e76 <assert_print>
    8aa2:	21b9      	movs	r1, #185	; 0xb9
    8aa4:	4628      	mov	r0, r5
    8aa6:	f001 f9df 	bl	9e68 <assert_post_action>
    8aaa:	e7d3      	b.n	8a54 <z_unpend_first_thread+0x50>
}
    8aac:	4620      	mov	r0, r4
    8aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8ab0:	20004f64 	.word	0x20004f64
    8ab4:	0000b32c 	.word	0x0000b32c
    8ab8:	0000b38c 	.word	0x0000b38c
    8abc:	0000b180 	.word	0x0000b180
    8ac0:	0000b3a4 	.word	0x0000b3a4
    8ac4:	0000b35c 	.word	0x0000b35c
    8ac8:	0000b374 	.word	0x0000b374

00008acc <z_sched_init>:
{
    8acc:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    8ace:	4804      	ldr	r0, [pc, #16]	; (8ae0 <z_sched_init+0x14>)
    8ad0:	f002 f8ec 	bl	acac <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    8ad4:	2100      	movs	r1, #0
    8ad6:	4608      	mov	r0, r1
    8ad8:	f7ff f862 	bl	7ba0 <k_sched_time_slice_set>
}
    8adc:	bd08      	pop	{r3, pc}
    8ade:	bf00      	nop
    8ae0:	20004f44 	.word	0x20004f44

00008ae4 <z_impl_k_yield>:
{
    8ae4:	b570      	push	{r4, r5, r6, lr}
    8ae6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    8aea:	2b00      	cmp	r3, #0
    8aec:	d149      	bne.n	8b82 <z_impl_k_yield+0x9e>
	__asm__ volatile(
    8aee:	f04f 0320 	mov.w	r3, #32
    8af2:	f3ef 8611 	mrs	r6, BASEPRI
    8af6:	f383 8812 	msr	BASEPRI_MAX, r3
    8afa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8afe:	4843      	ldr	r0, [pc, #268]	; (8c0c <z_impl_k_yield+0x128>)
    8b00:	f7fe fb02 	bl	7108 <z_spin_lock_valid>
    8b04:	2800      	cmp	r0, #0
    8b06:	d04d      	beq.n	8ba4 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    8b08:	4840      	ldr	r0, [pc, #256]	; (8c0c <z_impl_k_yield+0x128>)
    8b0a:	f7fe fb1d 	bl	7148 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    8b0e:	4c40      	ldr	r4, [pc, #256]	; (8c10 <z_impl_k_yield+0x12c>)
    8b10:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8b12:	7b4b      	ldrb	r3, [r1, #13]
    8b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8b18:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8b1a:	f104 0020 	add.w	r0, r4, #32
    8b1e:	f7ff f985 	bl	7e2c <z_priq_dumb_remove>
	queue_thread(_current);
    8b22:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    8b24:	7b6b      	ldrb	r3, [r5, #13]
    8b26:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8b2a:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8b2c:	4b39      	ldr	r3, [pc, #228]	; (8c14 <z_impl_k_yield+0x130>)
    8b2e:	429d      	cmp	r5, r3
    8b30:	d048      	beq.n	8bc4 <z_impl_k_yield+0xe0>
	return list->head == list;
    8b32:	4b37      	ldr	r3, [pc, #220]	; (8c10 <z_impl_k_yield+0x12c>)
    8b34:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b38:	429c      	cmp	r4, r3
    8b3a:	d055      	beq.n	8be8 <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8b3c:	b16c      	cbz	r4, 8b5a <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8b3e:	4621      	mov	r1, r4
    8b40:	4628      	mov	r0, r5
    8b42:	f002 f88d 	bl	ac60 <z_sched_prio_cmp>
    8b46:	2800      	cmp	r0, #0
    8b48:	dc48      	bgt.n	8bdc <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8b4a:	b134      	cbz	r4, 8b5a <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    8b4c:	4b30      	ldr	r3, [pc, #192]	; (8c10 <z_impl_k_yield+0x12c>)
    8b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b50:	429c      	cmp	r4, r3
    8b52:	d002      	beq.n	8b5a <z_impl_k_yield+0x76>
    8b54:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8b56:	2c00      	cmp	r4, #0
    8b58:	d1f0      	bne.n	8b3c <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    8b5a:	4b2d      	ldr	r3, [pc, #180]	; (8c10 <z_impl_k_yield+0x12c>)
    8b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8b5e:	f103 0120 	add.w	r1, r3, #32
    8b62:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    8b64:	606a      	str	r2, [r5, #4]
	tail->next = node;
    8b66:	6015      	str	r5, [r2, #0]
	list->tail = node;
    8b68:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    8b6a:	2001      	movs	r0, #1
    8b6c:	f7ff f982 	bl	7e74 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8b70:	4826      	ldr	r0, [pc, #152]	; (8c0c <z_impl_k_yield+0x128>)
    8b72:	f7fe fad9 	bl	7128 <z_spin_unlock_valid>
    8b76:	2800      	cmp	r0, #0
    8b78:	d038      	beq.n	8bec <z_impl_k_yield+0x108>
    8b7a:	4630      	mov	r0, r6
    8b7c:	f7fa f8f2 	bl	2d64 <arch_swap>
}
    8b80:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    8b82:	4c25      	ldr	r4, [pc, #148]	; (8c18 <z_impl_k_yield+0x134>)
    8b84:	f240 5332 	movw	r3, #1330	; 0x532
    8b88:	4622      	mov	r2, r4
    8b8a:	4924      	ldr	r1, [pc, #144]	; (8c1c <z_impl_k_yield+0x138>)
    8b8c:	4824      	ldr	r0, [pc, #144]	; (8c20 <z_impl_k_yield+0x13c>)
    8b8e:	f001 f972 	bl	9e76 <assert_print>
    8b92:	4824      	ldr	r0, [pc, #144]	; (8c24 <z_impl_k_yield+0x140>)
    8b94:	f001 f96f 	bl	9e76 <assert_print>
    8b98:	f240 5132 	movw	r1, #1330	; 0x532
    8b9c:	4620      	mov	r0, r4
    8b9e:	f001 f963 	bl	9e68 <assert_post_action>
    8ba2:	e7a4      	b.n	8aee <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ba4:	4c20      	ldr	r4, [pc, #128]	; (8c28 <z_impl_k_yield+0x144>)
    8ba6:	238e      	movs	r3, #142	; 0x8e
    8ba8:	4622      	mov	r2, r4
    8baa:	4920      	ldr	r1, [pc, #128]	; (8c2c <z_impl_k_yield+0x148>)
    8bac:	481c      	ldr	r0, [pc, #112]	; (8c20 <z_impl_k_yield+0x13c>)
    8bae:	f001 f962 	bl	9e76 <assert_print>
    8bb2:	4916      	ldr	r1, [pc, #88]	; (8c0c <z_impl_k_yield+0x128>)
    8bb4:	481e      	ldr	r0, [pc, #120]	; (8c30 <z_impl_k_yield+0x14c>)
    8bb6:	f001 f95e 	bl	9e76 <assert_print>
    8bba:	218e      	movs	r1, #142	; 0x8e
    8bbc:	4620      	mov	r0, r4
    8bbe:	f001 f953 	bl	9e68 <assert_post_action>
    8bc2:	e7a1      	b.n	8b08 <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8bc4:	4c14      	ldr	r4, [pc, #80]	; (8c18 <z_impl_k_yield+0x134>)
    8bc6:	23ba      	movs	r3, #186	; 0xba
    8bc8:	4622      	mov	r2, r4
    8bca:	491a      	ldr	r1, [pc, #104]	; (8c34 <z_impl_k_yield+0x150>)
    8bcc:	4814      	ldr	r0, [pc, #80]	; (8c20 <z_impl_k_yield+0x13c>)
    8bce:	f001 f952 	bl	9e76 <assert_print>
    8bd2:	21ba      	movs	r1, #186	; 0xba
    8bd4:	4620      	mov	r0, r4
    8bd6:	f001 f947 	bl	9e68 <assert_post_action>
    8bda:	e7aa      	b.n	8b32 <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    8bdc:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    8bde:	606b      	str	r3, [r5, #4]
	node->next = successor;
    8be0:	602c      	str	r4, [r5, #0]
	prev->next = node;
    8be2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    8be4:	6065      	str	r5, [r4, #4]
}
    8be6:	e7c0      	b.n	8b6a <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8be8:	2400      	movs	r4, #0
    8bea:	e7a7      	b.n	8b3c <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8bec:	4c0e      	ldr	r4, [pc, #56]	; (8c28 <z_impl_k_yield+0x144>)
    8bee:	23d0      	movs	r3, #208	; 0xd0
    8bf0:	4622      	mov	r2, r4
    8bf2:	4911      	ldr	r1, [pc, #68]	; (8c38 <z_impl_k_yield+0x154>)
    8bf4:	480a      	ldr	r0, [pc, #40]	; (8c20 <z_impl_k_yield+0x13c>)
    8bf6:	f001 f93e 	bl	9e76 <assert_print>
    8bfa:	4904      	ldr	r1, [pc, #16]	; (8c0c <z_impl_k_yield+0x128>)
    8bfc:	480f      	ldr	r0, [pc, #60]	; (8c3c <z_impl_k_yield+0x158>)
    8bfe:	f001 f93a 	bl	9e76 <assert_print>
    8c02:	21d0      	movs	r1, #208	; 0xd0
    8c04:	4620      	mov	r0, r4
    8c06:	f001 f92f 	bl	9e68 <assert_post_action>
    8c0a:	e7b6      	b.n	8b7a <z_impl_k_yield+0x96>
    8c0c:	20004f64 	.word	0x20004f64
    8c10:	20004f28 	.word	0x20004f28
    8c14:	20004290 	.word	0x20004290
    8c18:	0000ca94 	.word	0x0000ca94
    8c1c:	0000c8a4 	.word	0x0000c8a4
    8c20:	0000b180 	.word	0x0000b180
    8c24:	0000c9ec 	.word	0x0000c9ec
    8c28:	0000b32c 	.word	0x0000b32c
    8c2c:	0000b38c 	.word	0x0000b38c
    8c30:	0000b3a4 	.word	0x0000b3a4
    8c34:	0000cad0 	.word	0x0000cad0
    8c38:	0000b35c 	.word	0x0000b35c
    8c3c:	0000b374 	.word	0x0000b374

00008c40 <z_tick_sleep>:
{
    8c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8c44:	4604      	mov	r4, r0
    8c46:	460e      	mov	r6, r1
    8c48:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    8c4c:	2b00      	cmp	r3, #0
    8c4e:	d14e      	bne.n	8cee <z_tick_sleep+0xae>
	if (ticks == 0) {
    8c50:	ea54 0306 	orrs.w	r3, r4, r6
    8c54:	d05c      	beq.n	8d10 <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    8c56:	f06f 0301 	mvn.w	r3, #1
    8c5a:	1b1b      	subs	r3, r3, r4
    8c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8c60:	eb62 0206 	sbc.w	r2, r2, r6
    8c64:	2b01      	cmp	r3, #1
    8c66:	f172 0300 	sbcs.w	r3, r2, #0
    8c6a:	db55      	blt.n	8d18 <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    8c6c:	f06f 0501 	mvn.w	r5, #1
    8c70:	1b2d      	subs	r5, r5, r4
    8c72:	f04f 0320 	mov.w	r3, #32
    8c76:	f3ef 8911 	mrs	r9, BASEPRI
    8c7a:	f383 8812 	msr	BASEPRI_MAX, r3
    8c7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c82:	4840      	ldr	r0, [pc, #256]	; (8d84 <z_tick_sleep+0x144>)
    8c84:	f7fe fa40 	bl	7108 <z_spin_lock_valid>
    8c88:	2800      	cmp	r0, #0
    8c8a:	d049      	beq.n	8d20 <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    8c8c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8d84 <z_tick_sleep+0x144>
    8c90:	4640      	mov	r0, r8
    8c92:	f7fe fa59 	bl	7148 <z_spin_lock_set_owner>
	pending_current = _current;
    8c96:	4f3c      	ldr	r7, [pc, #240]	; (8d88 <z_tick_sleep+0x148>)
    8c98:	68b8      	ldr	r0, [r7, #8]
    8c9a:	4b3c      	ldr	r3, [pc, #240]	; (8d8c <z_tick_sleep+0x14c>)
    8c9c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    8c9e:	f7ff fbbb 	bl	8418 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    8ca2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8ca4:	4622      	mov	r2, r4
    8ca6:	4633      	mov	r3, r6
    8ca8:	4939      	ldr	r1, [pc, #228]	; (8d90 <z_tick_sleep+0x150>)
    8caa:	3018      	adds	r0, #24
    8cac:	f000 f9dc 	bl	9068 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    8cb0:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8cb2:	7b53      	ldrb	r3, [r2, #13]
    8cb4:	f043 0310 	orr.w	r3, r3, #16
    8cb8:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8cba:	4640      	mov	r0, r8
    8cbc:	f7fe fa34 	bl	7128 <z_spin_unlock_valid>
    8cc0:	2800      	cmp	r0, #0
    8cc2:	d03d      	beq.n	8d40 <z_tick_sleep+0x100>
    8cc4:	4648      	mov	r0, r9
    8cc6:	f7fa f84d 	bl	2d64 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    8cca:	4b2f      	ldr	r3, [pc, #188]	; (8d88 <z_tick_sleep+0x148>)
    8ccc:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    8cce:	7b5b      	ldrb	r3, [r3, #13]
    8cd0:	f013 0f10 	tst.w	r3, #16
    8cd4:	d144      	bne.n	8d60 <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    8cd6:	f002 f804 	bl	ace2 <sys_clock_tick_get_32>
    8cda:	1a28      	subs	r0, r5, r0
    8cdc:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    8ce0:	2801      	cmp	r0, #1
    8ce2:	f173 0300 	sbcs.w	r3, r3, #0
    8ce6:	da00      	bge.n	8cea <z_tick_sleep+0xaa>
	return 0;
    8ce8:	2000      	movs	r0, #0
}
    8cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    8cee:	4d29      	ldr	r5, [pc, #164]	; (8d94 <z_tick_sleep+0x154>)
    8cf0:	f240 534e 	movw	r3, #1358	; 0x54e
    8cf4:	462a      	mov	r2, r5
    8cf6:	4928      	ldr	r1, [pc, #160]	; (8d98 <z_tick_sleep+0x158>)
    8cf8:	4828      	ldr	r0, [pc, #160]	; (8d9c <z_tick_sleep+0x15c>)
    8cfa:	f001 f8bc 	bl	9e76 <assert_print>
    8cfe:	4828      	ldr	r0, [pc, #160]	; (8da0 <z_tick_sleep+0x160>)
    8d00:	f001 f8b9 	bl	9e76 <assert_print>
    8d04:	f240 514e 	movw	r1, #1358	; 0x54e
    8d08:	4628      	mov	r0, r5
    8d0a:	f001 f8ad 	bl	9e68 <assert_post_action>
    8d0e:	e79f      	b.n	8c50 <z_tick_sleep+0x10>
	z_impl_k_yield();
    8d10:	f7ff fee8 	bl	8ae4 <z_impl_k_yield>
		return 0;
    8d14:	2000      	movs	r0, #0
    8d16:	e7e8      	b.n	8cea <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    8d18:	f001 ffe3 	bl	ace2 <sys_clock_tick_get_32>
    8d1c:	1905      	adds	r5, r0, r4
    8d1e:	e7a8      	b.n	8c72 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d20:	4f20      	ldr	r7, [pc, #128]	; (8da4 <z_tick_sleep+0x164>)
    8d22:	238e      	movs	r3, #142	; 0x8e
    8d24:	463a      	mov	r2, r7
    8d26:	4920      	ldr	r1, [pc, #128]	; (8da8 <z_tick_sleep+0x168>)
    8d28:	481c      	ldr	r0, [pc, #112]	; (8d9c <z_tick_sleep+0x15c>)
    8d2a:	f001 f8a4 	bl	9e76 <assert_print>
    8d2e:	4915      	ldr	r1, [pc, #84]	; (8d84 <z_tick_sleep+0x144>)
    8d30:	481e      	ldr	r0, [pc, #120]	; (8dac <z_tick_sleep+0x16c>)
    8d32:	f001 f8a0 	bl	9e76 <assert_print>
    8d36:	218e      	movs	r1, #142	; 0x8e
    8d38:	4638      	mov	r0, r7
    8d3a:	f001 f895 	bl	9e68 <assert_post_action>
    8d3e:	e7a5      	b.n	8c8c <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8d40:	4c18      	ldr	r4, [pc, #96]	; (8da4 <z_tick_sleep+0x164>)
    8d42:	23d0      	movs	r3, #208	; 0xd0
    8d44:	4622      	mov	r2, r4
    8d46:	491a      	ldr	r1, [pc, #104]	; (8db0 <z_tick_sleep+0x170>)
    8d48:	4814      	ldr	r0, [pc, #80]	; (8d9c <z_tick_sleep+0x15c>)
    8d4a:	f001 f894 	bl	9e76 <assert_print>
    8d4e:	4641      	mov	r1, r8
    8d50:	4818      	ldr	r0, [pc, #96]	; (8db4 <z_tick_sleep+0x174>)
    8d52:	f001 f890 	bl	9e76 <assert_print>
    8d56:	21d0      	movs	r1, #208	; 0xd0
    8d58:	4620      	mov	r0, r4
    8d5a:	f001 f885 	bl	9e68 <assert_post_action>
    8d5e:	e7b1      	b.n	8cc4 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    8d60:	4c0c      	ldr	r4, [pc, #48]	; (8d94 <z_tick_sleep+0x154>)
    8d62:	f240 536f 	movw	r3, #1391	; 0x56f
    8d66:	4622      	mov	r2, r4
    8d68:	4913      	ldr	r1, [pc, #76]	; (8db8 <z_tick_sleep+0x178>)
    8d6a:	480c      	ldr	r0, [pc, #48]	; (8d9c <z_tick_sleep+0x15c>)
    8d6c:	f001 f883 	bl	9e76 <assert_print>
    8d70:	480b      	ldr	r0, [pc, #44]	; (8da0 <z_tick_sleep+0x160>)
    8d72:	f001 f880 	bl	9e76 <assert_print>
    8d76:	f240 516f 	movw	r1, #1391	; 0x56f
    8d7a:	4620      	mov	r0, r4
    8d7c:	f001 f874 	bl	9e68 <assert_post_action>
    8d80:	e7a9      	b.n	8cd6 <z_tick_sleep+0x96>
    8d82:	bf00      	nop
    8d84:	20004f64 	.word	0x20004f64
    8d88:	20004f28 	.word	0x20004f28
    8d8c:	20004f60 	.word	0x20004f60
    8d90:	00008331 	.word	0x00008331
    8d94:	0000ca94 	.word	0x0000ca94
    8d98:	0000c8a4 	.word	0x0000c8a4
    8d9c:	0000b180 	.word	0x0000b180
    8da0:	0000c9ec 	.word	0x0000c9ec
    8da4:	0000b32c 	.word	0x0000b32c
    8da8:	0000b38c 	.word	0x0000b38c
    8dac:	0000b3a4 	.word	0x0000b3a4
    8db0:	0000b35c 	.word	0x0000b35c
    8db4:	0000b374 	.word	0x0000b374
    8db8:	0000cb50 	.word	0x0000cb50

00008dbc <z_impl_k_sleep>:
{
    8dbc:	b570      	push	{r4, r5, r6, lr}
    8dbe:	4605      	mov	r5, r0
    8dc0:	460c      	mov	r4, r1
    8dc2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    8dc6:	bb13      	cbnz	r3, 8e0e <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8dc8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    8dcc:	bf08      	it	eq
    8dce:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    8dd2:	d02d      	beq.n	8e30 <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    8dd4:	4628      	mov	r0, r5
    8dd6:	4621      	mov	r1, r4
    8dd8:	f7ff ff32 	bl	8c40 <z_tick_sleep>
    8ddc:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    8dde:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    8de0:	0151      	lsls	r1, r2, #5
    8de2:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    8de6:	0143      	lsls	r3, r0, #5
    8de8:	1a1b      	subs	r3, r3, r0
    8dea:	eb61 0102 	sbc.w	r1, r1, r2
    8dee:	0088      	lsls	r0, r1, #2
    8df0:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    8df4:	009b      	lsls	r3, r3, #2
    8df6:	eb13 030c 	adds.w	r3, r3, ip
    8dfa:	eb42 0000 	adc.w	r0, r2, r0
    8dfe:	00c0      	lsls	r0, r0, #3
    8e00:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    8e04:	f3c3 3310 	ubfx	r3, r3, #12, #17
    8e08:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    8e0c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    8e0e:	4e0c      	ldr	r6, [pc, #48]	; (8e40 <z_impl_k_sleep+0x84>)
    8e10:	f240 537e 	movw	r3, #1406	; 0x57e
    8e14:	4632      	mov	r2, r6
    8e16:	490b      	ldr	r1, [pc, #44]	; (8e44 <z_impl_k_sleep+0x88>)
    8e18:	480b      	ldr	r0, [pc, #44]	; (8e48 <z_impl_k_sleep+0x8c>)
    8e1a:	f001 f82c 	bl	9e76 <assert_print>
    8e1e:	480b      	ldr	r0, [pc, #44]	; (8e4c <z_impl_k_sleep+0x90>)
    8e20:	f001 f829 	bl	9e76 <assert_print>
    8e24:	f240 517e 	movw	r1, #1406	; 0x57e
    8e28:	4630      	mov	r0, r6
    8e2a:	f001 f81d 	bl	9e68 <assert_post_action>
    8e2e:	e7cb      	b.n	8dc8 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    8e30:	4b07      	ldr	r3, [pc, #28]	; (8e50 <z_impl_k_sleep+0x94>)
    8e32:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    8e34:	f7ff fc88 	bl	8748 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    8e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8e3c:	e7e6      	b.n	8e0c <z_impl_k_sleep+0x50>
    8e3e:	bf00      	nop
    8e40:	0000ca94 	.word	0x0000ca94
    8e44:	0000c8a4 	.word	0x0000c8a4
    8e48:	0000b180 	.word	0x0000b180
    8e4c:	0000c9ec 	.word	0x0000c9ec
    8e50:	20004f28 	.word	0x20004f28

00008e54 <z_impl_z_current_get>:
}
    8e54:	4b01      	ldr	r3, [pc, #4]	; (8e5c <z_impl_z_current_get+0x8>)
    8e56:	6898      	ldr	r0, [r3, #8]
    8e58:	4770      	bx	lr
    8e5a:	bf00      	nop
    8e5c:	20004f28 	.word	0x20004f28

00008e60 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    8e60:	b570      	push	{r4, r5, r6, lr}
    8e62:	4604      	mov	r4, r0
    8e64:	f04f 0320 	mov.w	r3, #32
    8e68:	f3ef 8511 	mrs	r5, BASEPRI
    8e6c:	f383 8812 	msr	BASEPRI_MAX, r3
    8e70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8e74:	4840      	ldr	r0, [pc, #256]	; (8f78 <z_thread_abort+0x118>)
    8e76:	f7fe f947 	bl	7108 <z_spin_lock_valid>
    8e7a:	b1b8      	cbz	r0, 8eac <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    8e7c:	483e      	ldr	r0, [pc, #248]	; (8f78 <z_thread_abort+0x118>)
    8e7e:	f7fe f963 	bl	7148 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8e82:	7b63      	ldrb	r3, [r4, #13]
    8e84:	f013 0f08 	tst.w	r3, #8
    8e88:	d120      	bne.n	8ecc <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    8e8a:	4620      	mov	r0, r4
    8e8c:	f7ff fd6c 	bl	8968 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    8e90:	4b3a      	ldr	r3, [pc, #232]	; (8f7c <z_thread_abort+0x11c>)
    8e92:	689b      	ldr	r3, [r3, #8]
    8e94:	42a3      	cmp	r3, r4
    8e96:	d032      	beq.n	8efe <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8e98:	4837      	ldr	r0, [pc, #220]	; (8f78 <z_thread_abort+0x118>)
    8e9a:	f7fe f945 	bl	7128 <z_spin_unlock_valid>
    8e9e:	2800      	cmp	r0, #0
    8ea0:	d059      	beq.n	8f56 <z_thread_abort+0xf6>
	__asm__ volatile(
    8ea2:	f385 8811 	msr	BASEPRI, r5
    8ea6:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8eaa:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8eac:	4e34      	ldr	r6, [pc, #208]	; (8f80 <z_thread_abort+0x120>)
    8eae:	238e      	movs	r3, #142	; 0x8e
    8eb0:	4632      	mov	r2, r6
    8eb2:	4934      	ldr	r1, [pc, #208]	; (8f84 <z_thread_abort+0x124>)
    8eb4:	4834      	ldr	r0, [pc, #208]	; (8f88 <z_thread_abort+0x128>)
    8eb6:	f000 ffde 	bl	9e76 <assert_print>
    8eba:	492f      	ldr	r1, [pc, #188]	; (8f78 <z_thread_abort+0x118>)
    8ebc:	4833      	ldr	r0, [pc, #204]	; (8f8c <z_thread_abort+0x12c>)
    8ebe:	f000 ffda 	bl	9e76 <assert_print>
    8ec2:	218e      	movs	r1, #142	; 0x8e
    8ec4:	4630      	mov	r0, r6
    8ec6:	f000 ffcf 	bl	9e68 <assert_post_action>
    8eca:	e7d7      	b.n	8e7c <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ecc:	482a      	ldr	r0, [pc, #168]	; (8f78 <z_thread_abort+0x118>)
    8ece:	f7fe f92b 	bl	7128 <z_spin_unlock_valid>
    8ed2:	b120      	cbz	r0, 8ede <z_thread_abort+0x7e>
    8ed4:	f385 8811 	msr	BASEPRI, r5
    8ed8:	f3bf 8f6f 	isb	sy
		return;
    8edc:	e7e5      	b.n	8eaa <z_thread_abort+0x4a>
    8ede:	4c28      	ldr	r4, [pc, #160]	; (8f80 <z_thread_abort+0x120>)
    8ee0:	23b9      	movs	r3, #185	; 0xb9
    8ee2:	4622      	mov	r2, r4
    8ee4:	492a      	ldr	r1, [pc, #168]	; (8f90 <z_thread_abort+0x130>)
    8ee6:	4828      	ldr	r0, [pc, #160]	; (8f88 <z_thread_abort+0x128>)
    8ee8:	f000 ffc5 	bl	9e76 <assert_print>
    8eec:	4922      	ldr	r1, [pc, #136]	; (8f78 <z_thread_abort+0x118>)
    8eee:	4829      	ldr	r0, [pc, #164]	; (8f94 <z_thread_abort+0x134>)
    8ef0:	f000 ffc1 	bl	9e76 <assert_print>
    8ef4:	21b9      	movs	r1, #185	; 0xb9
    8ef6:	4620      	mov	r0, r4
    8ef8:	f000 ffb6 	bl	9e68 <assert_post_action>
    8efc:	e7ea      	b.n	8ed4 <z_thread_abort+0x74>
    8efe:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    8f02:	2b00      	cmp	r3, #0
    8f04:	d1c8      	bne.n	8e98 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f06:	481c      	ldr	r0, [pc, #112]	; (8f78 <z_thread_abort+0x118>)
    8f08:	f7fe f90e 	bl	7128 <z_spin_unlock_valid>
    8f0c:	b198      	cbz	r0, 8f36 <z_thread_abort+0xd6>
    8f0e:	4628      	mov	r0, r5
    8f10:	f7f9 ff28 	bl	2d64 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    8f14:	4c20      	ldr	r4, [pc, #128]	; (8f98 <z_thread_abort+0x138>)
    8f16:	f240 63ac 	movw	r3, #1708	; 0x6ac
    8f1a:	4622      	mov	r2, r4
    8f1c:	491f      	ldr	r1, [pc, #124]	; (8f9c <z_thread_abort+0x13c>)
    8f1e:	481a      	ldr	r0, [pc, #104]	; (8f88 <z_thread_abort+0x128>)
    8f20:	f000 ffa9 	bl	9e76 <assert_print>
    8f24:	481e      	ldr	r0, [pc, #120]	; (8fa0 <z_thread_abort+0x140>)
    8f26:	f000 ffa6 	bl	9e76 <assert_print>
    8f2a:	f240 61ac 	movw	r1, #1708	; 0x6ac
    8f2e:	4620      	mov	r0, r4
    8f30:	f000 ff9a 	bl	9e68 <assert_post_action>
    8f34:	e7b0      	b.n	8e98 <z_thread_abort+0x38>
    8f36:	4c12      	ldr	r4, [pc, #72]	; (8f80 <z_thread_abort+0x120>)
    8f38:	23d0      	movs	r3, #208	; 0xd0
    8f3a:	4622      	mov	r2, r4
    8f3c:	4914      	ldr	r1, [pc, #80]	; (8f90 <z_thread_abort+0x130>)
    8f3e:	4812      	ldr	r0, [pc, #72]	; (8f88 <z_thread_abort+0x128>)
    8f40:	f000 ff99 	bl	9e76 <assert_print>
    8f44:	490c      	ldr	r1, [pc, #48]	; (8f78 <z_thread_abort+0x118>)
    8f46:	4813      	ldr	r0, [pc, #76]	; (8f94 <z_thread_abort+0x134>)
    8f48:	f000 ff95 	bl	9e76 <assert_print>
    8f4c:	21d0      	movs	r1, #208	; 0xd0
    8f4e:	4620      	mov	r0, r4
    8f50:	f000 ff8a 	bl	9e68 <assert_post_action>
    8f54:	e7db      	b.n	8f0e <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f56:	4c0a      	ldr	r4, [pc, #40]	; (8f80 <z_thread_abort+0x120>)
    8f58:	23b9      	movs	r3, #185	; 0xb9
    8f5a:	4622      	mov	r2, r4
    8f5c:	490c      	ldr	r1, [pc, #48]	; (8f90 <z_thread_abort+0x130>)
    8f5e:	480a      	ldr	r0, [pc, #40]	; (8f88 <z_thread_abort+0x128>)
    8f60:	f000 ff89 	bl	9e76 <assert_print>
    8f64:	4904      	ldr	r1, [pc, #16]	; (8f78 <z_thread_abort+0x118>)
    8f66:	480b      	ldr	r0, [pc, #44]	; (8f94 <z_thread_abort+0x134>)
    8f68:	f000 ff85 	bl	9e76 <assert_print>
    8f6c:	21b9      	movs	r1, #185	; 0xb9
    8f6e:	4620      	mov	r0, r4
    8f70:	f000 ff7a 	bl	9e68 <assert_post_action>
    8f74:	e795      	b.n	8ea2 <z_thread_abort+0x42>
    8f76:	bf00      	nop
    8f78:	20004f64 	.word	0x20004f64
    8f7c:	20004f28 	.word	0x20004f28
    8f80:	0000b32c 	.word	0x0000b32c
    8f84:	0000b38c 	.word	0x0000b38c
    8f88:	0000b180 	.word	0x0000b180
    8f8c:	0000b3a4 	.word	0x0000b3a4
    8f90:	0000b35c 	.word	0x0000b35c
    8f94:	0000b374 	.word	0x0000b374
    8f98:	0000ca94 	.word	0x0000ca94
    8f9c:	0000b83c 	.word	0x0000b83c
    8fa0:	0000cb90 	.word	0x0000cb90

00008fa4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    8fa4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    8fa6:	4806      	ldr	r0, [pc, #24]	; (8fc0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    8fa8:	4a06      	ldr	r2, [pc, #24]	; (8fc4 <z_data_copy+0x20>)
    8faa:	1a12      	subs	r2, r2, r0
    8fac:	4906      	ldr	r1, [pc, #24]	; (8fc8 <z_data_copy+0x24>)
    8fae:	f001 fddf 	bl	ab70 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    8fb2:	4a06      	ldr	r2, [pc, #24]	; (8fcc <z_data_copy+0x28>)
    8fb4:	4906      	ldr	r1, [pc, #24]	; (8fd0 <z_data_copy+0x2c>)
    8fb6:	4807      	ldr	r0, [pc, #28]	; (8fd4 <z_data_copy+0x30>)
    8fb8:	f001 fdda 	bl	ab70 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    8fbc:	bd08      	pop	{r3, pc}
    8fbe:	bf00      	nop
    8fc0:	20000000 	.word	0x20000000
    8fc4:	200041c0 	.word	0x200041c0
    8fc8:	0000ccf4 	.word	0x0000ccf4
    8fcc:	00000000 	.word	0x00000000
    8fd0:	0000ccf4 	.word	0x0000ccf4
    8fd4:	20000000 	.word	0x20000000

00008fd8 <first>:
	return list->head == list;
    8fd8:	4b03      	ldr	r3, [pc, #12]	; (8fe8 <first+0x10>)
    8fda:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8fdc:	4298      	cmp	r0, r3
    8fde:	d000      	beq.n	8fe2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    8fe0:	4770      	bx	lr
    8fe2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    8fe4:	e7fc      	b.n	8fe0 <first+0x8>
    8fe6:	bf00      	nop
    8fe8:	200040dc 	.word	0x200040dc

00008fec <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8fec:	b130      	cbz	r0, 8ffc <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    8fee:	4a04      	ldr	r2, [pc, #16]	; (9000 <next+0x14>)
    8ff0:	6852      	ldr	r2, [r2, #4]
    8ff2:	4290      	cmp	r0, r2
    8ff4:	d001      	beq.n	8ffa <next+0xe>
    8ff6:	6800      	ldr	r0, [r0, #0]
    8ff8:	4770      	bx	lr
    8ffa:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    8ffc:	4770      	bx	lr
    8ffe:	bf00      	nop
    9000:	200040dc 	.word	0x200040dc

00009004 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    9004:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    9006:	4b04      	ldr	r3, [pc, #16]	; (9018 <elapsed+0x14>)
    9008:	681b      	ldr	r3, [r3, #0]
    900a:	b10b      	cbz	r3, 9010 <elapsed+0xc>
    900c:	2000      	movs	r0, #0
}
    900e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    9010:	f7fb fd14 	bl	4a3c <sys_clock_elapsed>
    9014:	e7fb      	b.n	900e <elapsed+0xa>
    9016:	bf00      	nop
    9018:	20004f70 	.word	0x20004f70

0000901c <next_timeout>:

static int32_t next_timeout(void)
{
    901c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    901e:	f7ff ffdb 	bl	8fd8 <first>
    9022:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    9024:	f7ff ffee 	bl	9004 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    9028:	b17c      	cbz	r4, 904a <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    902a:	6923      	ldr	r3, [r4, #16]
    902c:	6962      	ldr	r2, [r4, #20]
    902e:	1a1b      	subs	r3, r3, r0
    9030:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    9034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    9038:	f170 0200 	sbcs.w	r2, r0, #0
    903c:	da08      	bge.n	9050 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    903e:	2800      	cmp	r0, #0
    9040:	db01      	blt.n	9046 <next_timeout+0x2a>
    9042:	4618      	mov	r0, r3
    9044:	e006      	b.n	9054 <next_timeout+0x38>
    9046:	2300      	movs	r3, #0
    9048:	e7fb      	b.n	9042 <next_timeout+0x26>
		ret = MAX_WAIT;
    904a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    904e:	e001      	b.n	9054 <next_timeout+0x38>
    9050:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    9054:	4b03      	ldr	r3, [pc, #12]	; (9064 <next_timeout+0x48>)
    9056:	691b      	ldr	r3, [r3, #16]
    9058:	b113      	cbz	r3, 9060 <next_timeout+0x44>
    905a:	4283      	cmp	r3, r0
    905c:	da00      	bge.n	9060 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    905e:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    9060:	bd10      	pop	{r4, pc}
    9062:	bf00      	nop
    9064:	20004f28 	.word	0x20004f28

00009068 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    906c:	bf08      	it	eq
    906e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    9072:	f000 80c1 	beq.w	91f8 <z_add_timeout+0x190>
{
    9076:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    907a:	4604      	mov	r4, r0
    907c:	460f      	mov	r7, r1
    907e:	4692      	mov	sl, r2
    9080:	461d      	mov	r5, r3
	return node->next != NULL;
    9082:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    9084:	b173      	cbz	r3, 90a4 <z_add_timeout+0x3c>
    9086:	f8df 8174 	ldr.w	r8, [pc, #372]	; 91fc <z_add_timeout+0x194>
    908a:	2363      	movs	r3, #99	; 0x63
    908c:	4642      	mov	r2, r8
    908e:	495c      	ldr	r1, [pc, #368]	; (9200 <z_add_timeout+0x198>)
    9090:	485c      	ldr	r0, [pc, #368]	; (9204 <z_add_timeout+0x19c>)
    9092:	f000 fef0 	bl	9e76 <assert_print>
    9096:	485c      	ldr	r0, [pc, #368]	; (9208 <z_add_timeout+0x1a0>)
    9098:	f000 feed 	bl	9e76 <assert_print>
    909c:	2163      	movs	r1, #99	; 0x63
    909e:	4640      	mov	r0, r8
    90a0:	f000 fee2 	bl	9e68 <assert_post_action>
	to->fn = fn;
    90a4:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    90a6:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    90aa:	f04f 0320 	mov.w	r3, #32
    90ae:	f3ef 8711 	mrs	r7, BASEPRI
    90b2:	f383 8812 	msr	BASEPRI_MAX, r3
    90b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    90ba:	4854      	ldr	r0, [pc, #336]	; (920c <z_add_timeout+0x1a4>)
    90bc:	f7fe f824 	bl	7108 <z_spin_lock_valid>
    90c0:	b118      	cbz	r0, 90ca <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    90c2:	4852      	ldr	r0, [pc, #328]	; (920c <z_add_timeout+0x1a4>)
    90c4:	f7fe f840 	bl	7148 <z_spin_lock_set_owner>
	return k;
    90c8:	e038      	b.n	913c <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    90ca:	f8df 9144 	ldr.w	r9, [pc, #324]	; 9210 <z_add_timeout+0x1a8>
    90ce:	238e      	movs	r3, #142	; 0x8e
    90d0:	464a      	mov	r2, r9
    90d2:	4950      	ldr	r1, [pc, #320]	; (9214 <z_add_timeout+0x1ac>)
    90d4:	484b      	ldr	r0, [pc, #300]	; (9204 <z_add_timeout+0x19c>)
    90d6:	f000 fece 	bl	9e76 <assert_print>
    90da:	494c      	ldr	r1, [pc, #304]	; (920c <z_add_timeout+0x1a4>)
    90dc:	484e      	ldr	r0, [pc, #312]	; (9218 <z_add_timeout+0x1b0>)
    90de:	f000 feca 	bl	9e76 <assert_print>
    90e2:	218e      	movs	r1, #142	; 0x8e
    90e4:	4648      	mov	r0, r9
    90e6:	f000 febf 	bl	9e68 <assert_post_action>
    90ea:	e7ea      	b.n	90c2 <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    90ec:	f11a 0801 	adds.w	r8, sl, #1
    90f0:	f145 0900 	adc.w	r9, r5, #0
    90f4:	f7ff ff86 	bl	9004 <elapsed>
    90f8:	eb18 0300 	adds.w	r3, r8, r0
    90fc:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    9100:	6123      	str	r3, [r4, #16]
    9102:	6160      	str	r0, [r4, #20]
    9104:	e03d      	b.n	9182 <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    9106:	1a51      	subs	r1, r2, r1
    9108:	eb66 0303 	sbc.w	r3, r6, r3
    910c:	6101      	str	r1, [r0, #16]
    910e:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    9110:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    9112:	6063      	str	r3, [r4, #4]
	node->next = successor;
    9114:	6020      	str	r0, [r4, #0]
	prev->next = node;
    9116:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    9118:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    911a:	2800      	cmp	r0, #0
    911c:	d045      	beq.n	91aa <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    911e:	f7ff ff5b 	bl	8fd8 <first>
    9122:	4284      	cmp	r4, r0
    9124:	d048      	beq.n	91b8 <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9126:	4839      	ldr	r0, [pc, #228]	; (920c <z_add_timeout+0x1a4>)
    9128:	f7fd fffe 	bl	7128 <z_spin_unlock_valid>
    912c:	2800      	cmp	r0, #0
    912e:	d050      	beq.n	91d2 <z_add_timeout+0x16a>
	__asm__ volatile(
    9130:	f387 8811 	msr	BASEPRI, r7
    9134:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9138:	f04f 0801 	mov.w	r8, #1
    913c:	f1b8 0f00 	cmp.w	r8, #0
    9140:	d158      	bne.n	91f4 <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    9142:	4653      	mov	r3, sl
    9144:	f06f 0101 	mvn.w	r1, #1
    9148:	ebb1 010a 	subs.w	r1, r1, sl
    914c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9150:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    9154:	2a00      	cmp	r2, #0
    9156:	dbc9      	blt.n	90ec <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    9158:	4a30      	ldr	r2, [pc, #192]	; (921c <z_add_timeout+0x1b4>)
    915a:	6811      	ldr	r1, [r2, #0]
    915c:	6852      	ldr	r2, [r2, #4]
    915e:	185b      	adds	r3, r3, r1
    9160:	eb42 0205 	adc.w	r2, r2, r5
    9164:	f06f 0101 	mvn.w	r1, #1
    9168:	1acb      	subs	r3, r1, r3
    916a:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    916e:	4618      	mov	r0, r3
    9170:	4611      	mov	r1, r2
    9172:	2b01      	cmp	r3, #1
    9174:	f172 0300 	sbcs.w	r3, r2, #0
    9178:	da01      	bge.n	917e <z_add_timeout+0x116>
    917a:	2001      	movs	r0, #1
    917c:	2100      	movs	r1, #0
    917e:	6120      	str	r0, [r4, #16]
    9180:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    9182:	f7ff ff29 	bl	8fd8 <first>
    9186:	2800      	cmp	r0, #0
    9188:	d0c7      	beq.n	911a <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    918a:	6902      	ldr	r2, [r0, #16]
    918c:	6946      	ldr	r6, [r0, #20]
    918e:	6921      	ldr	r1, [r4, #16]
    9190:	6963      	ldr	r3, [r4, #20]
    9192:	4291      	cmp	r1, r2
    9194:	eb73 0c06 	sbcs.w	ip, r3, r6
    9198:	dbb5      	blt.n	9106 <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    919a:	1a89      	subs	r1, r1, r2
    919c:	eb63 0306 	sbc.w	r3, r3, r6
    91a0:	6121      	str	r1, [r4, #16]
    91a2:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    91a4:	f7ff ff22 	bl	8fec <next>
    91a8:	e7ed      	b.n	9186 <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    91aa:	4b1d      	ldr	r3, [pc, #116]	; (9220 <z_add_timeout+0x1b8>)
    91ac:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    91ae:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    91b0:	6062      	str	r2, [r4, #4]
	tail->next = node;
    91b2:	6014      	str	r4, [r2, #0]
	list->tail = node;
    91b4:	605c      	str	r4, [r3, #4]
}
    91b6:	e7b2      	b.n	911e <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    91b8:	f7ff ff30 	bl	901c <next_timeout>

			if (next_time == 0 ||
    91bc:	4603      	mov	r3, r0
    91be:	b118      	cbz	r0, 91c8 <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    91c0:	4a18      	ldr	r2, [pc, #96]	; (9224 <z_add_timeout+0x1bc>)
    91c2:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    91c4:	4282      	cmp	r2, r0
    91c6:	d0ae      	beq.n	9126 <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    91c8:	2100      	movs	r1, #0
    91ca:	4618      	mov	r0, r3
    91cc:	f7fb fc04 	bl	49d8 <sys_clock_set_timeout>
    91d0:	e7a9      	b.n	9126 <z_add_timeout+0xbe>
    91d2:	f8df 803c 	ldr.w	r8, [pc, #60]	; 9210 <z_add_timeout+0x1a8>
    91d6:	23b9      	movs	r3, #185	; 0xb9
    91d8:	4642      	mov	r2, r8
    91da:	4913      	ldr	r1, [pc, #76]	; (9228 <z_add_timeout+0x1c0>)
    91dc:	4809      	ldr	r0, [pc, #36]	; (9204 <z_add_timeout+0x19c>)
    91de:	f000 fe4a 	bl	9e76 <assert_print>
    91e2:	490a      	ldr	r1, [pc, #40]	; (920c <z_add_timeout+0x1a4>)
    91e4:	4811      	ldr	r0, [pc, #68]	; (922c <z_add_timeout+0x1c4>)
    91e6:	f000 fe46 	bl	9e76 <assert_print>
    91ea:	21b9      	movs	r1, #185	; 0xb9
    91ec:	4640      	mov	r0, r8
    91ee:	f000 fe3b 	bl	9e68 <assert_post_action>
    91f2:	e79d      	b.n	9130 <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    91f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    91f8:	4770      	bx	lr
    91fa:	bf00      	nop
    91fc:	0000cbb4 	.word	0x0000cbb4
    9200:	0000cbd8 	.word	0x0000cbd8
    9204:	0000b180 	.word	0x0000b180
    9208:	0000c9ec 	.word	0x0000c9ec
    920c:	20004f74 	.word	0x20004f74
    9210:	0000b32c 	.word	0x0000b32c
    9214:	0000b38c 	.word	0x0000b38c
    9218:	0000b3a4 	.word	0x0000b3a4
    921c:	200043f0 	.word	0x200043f0
    9220:	200040dc 	.word	0x200040dc
    9224:	20004f28 	.word	0x20004f28
    9228:	0000b35c 	.word	0x0000b35c
    922c:	0000b374 	.word	0x0000b374

00009230 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    9230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9234:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    9236:	2400      	movs	r4, #0
	__asm__ volatile(
    9238:	f04f 0320 	mov.w	r3, #32
    923c:	f3ef 8711 	mrs	r7, BASEPRI
    9240:	f383 8812 	msr	BASEPRI_MAX, r3
    9244:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9248:	481f      	ldr	r0, [pc, #124]	; (92c8 <z_abort_timeout+0x98>)
    924a:	f7fd ff5d 	bl	7108 <z_spin_lock_valid>
    924e:	b128      	cbz	r0, 925c <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    9250:	481d      	ldr	r0, [pc, #116]	; (92c8 <z_abort_timeout+0x98>)
    9252:	f7fd ff79 	bl	7148 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    9256:	f06f 0815 	mvn.w	r8, #21
	return k;
    925a:	e018      	b.n	928e <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    925c:	4e1b      	ldr	r6, [pc, #108]	; (92cc <z_abort_timeout+0x9c>)
    925e:	238e      	movs	r3, #142	; 0x8e
    9260:	4632      	mov	r2, r6
    9262:	491b      	ldr	r1, [pc, #108]	; (92d0 <z_abort_timeout+0xa0>)
    9264:	481b      	ldr	r0, [pc, #108]	; (92d4 <z_abort_timeout+0xa4>)
    9266:	f000 fe06 	bl	9e76 <assert_print>
    926a:	4917      	ldr	r1, [pc, #92]	; (92c8 <z_abort_timeout+0x98>)
    926c:	481a      	ldr	r0, [pc, #104]	; (92d8 <z_abort_timeout+0xa8>)
    926e:	f000 fe02 	bl	9e76 <assert_print>
    9272:	218e      	movs	r1, #142	; 0x8e
    9274:	4630      	mov	r0, r6
    9276:	f000 fdf7 	bl	9e68 <assert_post_action>
    927a:	e7e9      	b.n	9250 <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    927c:	4812      	ldr	r0, [pc, #72]	; (92c8 <z_abort_timeout+0x98>)
    927e:	f7fd ff53 	bl	7128 <z_spin_unlock_valid>
    9282:	b170      	cbz	r0, 92a2 <z_abort_timeout+0x72>
	__asm__ volatile(
    9284:	f387 8811 	msr	BASEPRI, r7
    9288:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    928c:	2401      	movs	r4, #1
    928e:	4626      	mov	r6, r4
    9290:	b9bc      	cbnz	r4, 92c2 <z_abort_timeout+0x92>
	return node->next != NULL;
    9292:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    9294:	2b00      	cmp	r3, #0
    9296:	d0f1      	beq.n	927c <z_abort_timeout+0x4c>
			remove_timeout(to);
    9298:	4628      	mov	r0, r5
    929a:	f001 fd0b 	bl	acb4 <remove_timeout>
			ret = 0;
    929e:	46b0      	mov	r8, r6
    92a0:	e7ec      	b.n	927c <z_abort_timeout+0x4c>
    92a2:	4c0a      	ldr	r4, [pc, #40]	; (92cc <z_abort_timeout+0x9c>)
    92a4:	23b9      	movs	r3, #185	; 0xb9
    92a6:	4622      	mov	r2, r4
    92a8:	490c      	ldr	r1, [pc, #48]	; (92dc <z_abort_timeout+0xac>)
    92aa:	480a      	ldr	r0, [pc, #40]	; (92d4 <z_abort_timeout+0xa4>)
    92ac:	f000 fde3 	bl	9e76 <assert_print>
    92b0:	4905      	ldr	r1, [pc, #20]	; (92c8 <z_abort_timeout+0x98>)
    92b2:	480b      	ldr	r0, [pc, #44]	; (92e0 <z_abort_timeout+0xb0>)
    92b4:	f000 fddf 	bl	9e76 <assert_print>
    92b8:	21b9      	movs	r1, #185	; 0xb9
    92ba:	4620      	mov	r0, r4
    92bc:	f000 fdd4 	bl	9e68 <assert_post_action>
    92c0:	e7e0      	b.n	9284 <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    92c2:	4640      	mov	r0, r8
    92c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92c8:	20004f74 	.word	0x20004f74
    92cc:	0000b32c 	.word	0x0000b32c
    92d0:	0000b38c 	.word	0x0000b38c
    92d4:	0000b180 	.word	0x0000b180
    92d8:	0000b3a4 	.word	0x0000b3a4
    92dc:	0000b35c 	.word	0x0000b35c
    92e0:	0000b374 	.word	0x0000b374

000092e4 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    92e4:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    92e6:	2500      	movs	r5, #0
	__asm__ volatile(
    92e8:	f04f 0320 	mov.w	r3, #32
    92ec:	f3ef 8611 	mrs	r6, BASEPRI
    92f0:	f383 8812 	msr	BASEPRI_MAX, r3
    92f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    92f8:	481c      	ldr	r0, [pc, #112]	; (936c <z_get_next_timeout_expiry+0x88>)
    92fa:	f7fd ff05 	bl	7108 <z_spin_lock_valid>
    92fe:	b128      	cbz	r0, 930c <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    9300:	481a      	ldr	r0, [pc, #104]	; (936c <z_get_next_timeout_expiry+0x88>)
    9302:	f7fd ff21 	bl	7148 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    9306:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    930a:	e014      	b.n	9336 <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    930c:	4c18      	ldr	r4, [pc, #96]	; (9370 <z_get_next_timeout_expiry+0x8c>)
    930e:	238e      	movs	r3, #142	; 0x8e
    9310:	4622      	mov	r2, r4
    9312:	4918      	ldr	r1, [pc, #96]	; (9374 <z_get_next_timeout_expiry+0x90>)
    9314:	4818      	ldr	r0, [pc, #96]	; (9378 <z_get_next_timeout_expiry+0x94>)
    9316:	f000 fdae 	bl	9e76 <assert_print>
    931a:	4914      	ldr	r1, [pc, #80]	; (936c <z_get_next_timeout_expiry+0x88>)
    931c:	4817      	ldr	r0, [pc, #92]	; (937c <z_get_next_timeout_expiry+0x98>)
    931e:	f000 fdaa 	bl	9e76 <assert_print>
    9322:	218e      	movs	r1, #142	; 0x8e
    9324:	4620      	mov	r0, r4
    9326:	f000 fd9f 	bl	9e68 <assert_post_action>
    932a:	e7e9      	b.n	9300 <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    932c:	f386 8811 	msr	BASEPRI, r6
    9330:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9334:	2501      	movs	r5, #1
    9336:	b9bd      	cbnz	r5, 9368 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    9338:	f7ff fe70 	bl	901c <next_timeout>
    933c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    933e:	480b      	ldr	r0, [pc, #44]	; (936c <z_get_next_timeout_expiry+0x88>)
    9340:	f7fd fef2 	bl	7128 <z_spin_unlock_valid>
    9344:	2800      	cmp	r0, #0
    9346:	d1f1      	bne.n	932c <z_get_next_timeout_expiry+0x48>
    9348:	4d09      	ldr	r5, [pc, #36]	; (9370 <z_get_next_timeout_expiry+0x8c>)
    934a:	23b9      	movs	r3, #185	; 0xb9
    934c:	462a      	mov	r2, r5
    934e:	490c      	ldr	r1, [pc, #48]	; (9380 <z_get_next_timeout_expiry+0x9c>)
    9350:	4809      	ldr	r0, [pc, #36]	; (9378 <z_get_next_timeout_expiry+0x94>)
    9352:	f000 fd90 	bl	9e76 <assert_print>
    9356:	4905      	ldr	r1, [pc, #20]	; (936c <z_get_next_timeout_expiry+0x88>)
    9358:	480a      	ldr	r0, [pc, #40]	; (9384 <z_get_next_timeout_expiry+0xa0>)
    935a:	f000 fd8c 	bl	9e76 <assert_print>
    935e:	21b9      	movs	r1, #185	; 0xb9
    9360:	4628      	mov	r0, r5
    9362:	f000 fd81 	bl	9e68 <assert_post_action>
    9366:	e7e1      	b.n	932c <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    9368:	4620      	mov	r0, r4
    936a:	bd70      	pop	{r4, r5, r6, pc}
    936c:	20004f74 	.word	0x20004f74
    9370:	0000b32c 	.word	0x0000b32c
    9374:	0000b38c 	.word	0x0000b38c
    9378:	0000b180 	.word	0x0000b180
    937c:	0000b3a4 	.word	0x0000b3a4
    9380:	0000b35c 	.word	0x0000b35c
    9384:	0000b374 	.word	0x0000b374

00009388 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    9388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    938c:	4606      	mov	r6, r0
    938e:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    9390:	2500      	movs	r5, #0
	__asm__ volatile(
    9392:	f04f 0320 	mov.w	r3, #32
    9396:	f3ef 8711 	mrs	r7, BASEPRI
    939a:	f383 8812 	msr	BASEPRI_MAX, r3
    939e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    93a2:	4825      	ldr	r0, [pc, #148]	; (9438 <z_set_timeout_expiry+0xb0>)
    93a4:	f7fd feb0 	bl	7108 <z_spin_lock_valid>
    93a8:	b118      	cbz	r0, 93b2 <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    93aa:	4823      	ldr	r0, [pc, #140]	; (9438 <z_set_timeout_expiry+0xb0>)
    93ac:	f7fd fecc 	bl	7148 <z_spin_lock_set_owner>
	return k;
    93b0:	e01e      	b.n	93f0 <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    93b2:	4c22      	ldr	r4, [pc, #136]	; (943c <z_set_timeout_expiry+0xb4>)
    93b4:	238e      	movs	r3, #142	; 0x8e
    93b6:	4622      	mov	r2, r4
    93b8:	4921      	ldr	r1, [pc, #132]	; (9440 <z_set_timeout_expiry+0xb8>)
    93ba:	4822      	ldr	r0, [pc, #136]	; (9444 <z_set_timeout_expiry+0xbc>)
    93bc:	f000 fd5b 	bl	9e76 <assert_print>
    93c0:	491d      	ldr	r1, [pc, #116]	; (9438 <z_set_timeout_expiry+0xb0>)
    93c2:	4821      	ldr	r0, [pc, #132]	; (9448 <z_set_timeout_expiry+0xc0>)
    93c4:	f000 fd57 	bl	9e76 <assert_print>
    93c8:	218e      	movs	r1, #142	; 0x8e
    93ca:	4620      	mov	r0, r4
    93cc:	f000 fd4c 	bl	9e68 <assert_post_action>
    93d0:	e7eb      	b.n	93aa <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    93d2:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    93d4:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    93d8:	2801      	cmp	r0, #1
    93da:	dd00      	ble.n	93de <z_set_timeout_expiry+0x56>
    93dc:	b99c      	cbnz	r4, 9406 <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    93de:	4816      	ldr	r0, [pc, #88]	; (9438 <z_set_timeout_expiry+0xb0>)
    93e0:	f7fd fea2 	bl	7128 <z_spin_unlock_valid>
    93e4:	b1b0      	cbz	r0, 9414 <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    93e6:	f387 8811 	msr	BASEPRI, r7
    93ea:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    93ee:	2501      	movs	r5, #1
    93f0:	462c      	mov	r4, r5
    93f2:	b9fd      	cbnz	r5, 9434 <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    93f4:	f7ff fe12 	bl	901c <next_timeout>
			      || (ticks <= next_to);
    93f8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    93fc:	d0e9      	beq.n	93d2 <z_set_timeout_expiry+0x4a>
    93fe:	42b0      	cmp	r0, r6
    9400:	dbe8      	blt.n	93d4 <z_set_timeout_expiry+0x4c>
    9402:	2401      	movs	r4, #1
    9404:	e7e6      	b.n	93d4 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    9406:	4641      	mov	r1, r8
    9408:	42b0      	cmp	r0, r6
    940a:	bfa8      	it	ge
    940c:	4630      	movge	r0, r6
    940e:	f7fb fae3 	bl	49d8 <sys_clock_set_timeout>
    9412:	e7e4      	b.n	93de <z_set_timeout_expiry+0x56>
    9414:	4c09      	ldr	r4, [pc, #36]	; (943c <z_set_timeout_expiry+0xb4>)
    9416:	23b9      	movs	r3, #185	; 0xb9
    9418:	4622      	mov	r2, r4
    941a:	490c      	ldr	r1, [pc, #48]	; (944c <z_set_timeout_expiry+0xc4>)
    941c:	4809      	ldr	r0, [pc, #36]	; (9444 <z_set_timeout_expiry+0xbc>)
    941e:	f000 fd2a 	bl	9e76 <assert_print>
    9422:	4905      	ldr	r1, [pc, #20]	; (9438 <z_set_timeout_expiry+0xb0>)
    9424:	480a      	ldr	r0, [pc, #40]	; (9450 <z_set_timeout_expiry+0xc8>)
    9426:	f000 fd26 	bl	9e76 <assert_print>
    942a:	21b9      	movs	r1, #185	; 0xb9
    942c:	4620      	mov	r0, r4
    942e:	f000 fd1b 	bl	9e68 <assert_post_action>
    9432:	e7d8      	b.n	93e6 <z_set_timeout_expiry+0x5e>
		}
	}
}
    9434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9438:	20004f74 	.word	0x20004f74
    943c:	0000b32c 	.word	0x0000b32c
    9440:	0000b38c 	.word	0x0000b38c
    9444:	0000b180 	.word	0x0000b180
    9448:	0000b3a4 	.word	0x0000b3a4
    944c:	0000b35c 	.word	0x0000b35c
    9450:	0000b374 	.word	0x0000b374

00009454 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    9454:	b570      	push	{r4, r5, r6, lr}
    9456:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    9458:	f7fe fdbe 	bl	7fd8 <z_time_slice>
	__asm__ volatile(
    945c:	f04f 0320 	mov.w	r3, #32
    9460:	f3ef 8511 	mrs	r5, BASEPRI
    9464:	f383 8812 	msr	BASEPRI_MAX, r3
    9468:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    946c:	4854      	ldr	r0, [pc, #336]	; (95c0 <sys_clock_announce+0x16c>)
    946e:	f7fd fe4b 	bl	7108 <z_spin_lock_valid>
    9472:	b128      	cbz	r0, 9480 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    9474:	4852      	ldr	r0, [pc, #328]	; (95c0 <sys_clock_announce+0x16c>)
    9476:	f7fd fe67 	bl	7148 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    947a:	4b52      	ldr	r3, [pc, #328]	; (95c4 <sys_clock_announce+0x170>)
    947c:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    947e:	e022      	b.n	94c6 <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9480:	4e51      	ldr	r6, [pc, #324]	; (95c8 <sys_clock_announce+0x174>)
    9482:	238e      	movs	r3, #142	; 0x8e
    9484:	4632      	mov	r2, r6
    9486:	4951      	ldr	r1, [pc, #324]	; (95cc <sys_clock_announce+0x178>)
    9488:	4851      	ldr	r0, [pc, #324]	; (95d0 <sys_clock_announce+0x17c>)
    948a:	f000 fcf4 	bl	9e76 <assert_print>
    948e:	494c      	ldr	r1, [pc, #304]	; (95c0 <sys_clock_announce+0x16c>)
    9490:	4850      	ldr	r0, [pc, #320]	; (95d4 <sys_clock_announce+0x180>)
    9492:	f000 fcf0 	bl	9e76 <assert_print>
    9496:	218e      	movs	r1, #142	; 0x8e
    9498:	4630      	mov	r0, r6
    949a:	f000 fce5 	bl	9e68 <assert_post_action>
    949e:	e7e9      	b.n	9474 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    94a0:	4e49      	ldr	r6, [pc, #292]	; (95c8 <sys_clock_announce+0x174>)
    94a2:	23b9      	movs	r3, #185	; 0xb9
    94a4:	4632      	mov	r2, r6
    94a6:	494c      	ldr	r1, [pc, #304]	; (95d8 <sys_clock_announce+0x184>)
    94a8:	4849      	ldr	r0, [pc, #292]	; (95d0 <sys_clock_announce+0x17c>)
    94aa:	f000 fce4 	bl	9e76 <assert_print>
    94ae:	4944      	ldr	r1, [pc, #272]	; (95c0 <sys_clock_announce+0x16c>)
    94b0:	484a      	ldr	r0, [pc, #296]	; (95dc <sys_clock_announce+0x188>)
    94b2:	f000 fce0 	bl	9e76 <assert_print>
    94b6:	21b9      	movs	r1, #185	; 0xb9
    94b8:	4630      	mov	r0, r6
    94ba:	f000 fcd5 	bl	9e68 <assert_post_action>
    94be:	e027      	b.n	9510 <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    94c0:	483f      	ldr	r0, [pc, #252]	; (95c0 <sys_clock_announce+0x16c>)
    94c2:	f7fd fe41 	bl	7148 <z_spin_lock_set_owner>
    94c6:	f7ff fd87 	bl	8fd8 <first>
    94ca:	4604      	mov	r4, r0
    94cc:	2800      	cmp	r0, #0
    94ce:	d043      	beq.n	9558 <sys_clock_announce+0x104>
    94d0:	6902      	ldr	r2, [r0, #16]
    94d2:	6941      	ldr	r1, [r0, #20]
    94d4:	4b3b      	ldr	r3, [pc, #236]	; (95c4 <sys_clock_announce+0x170>)
    94d6:	681b      	ldr	r3, [r3, #0]
    94d8:	17d8      	asrs	r0, r3, #31
    94da:	4293      	cmp	r3, r2
    94dc:	eb70 0101 	sbcs.w	r1, r0, r1
    94e0:	db3a      	blt.n	9558 <sys_clock_announce+0x104>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    94e2:	483f      	ldr	r0, [pc, #252]	; (95e0 <sys_clock_announce+0x18c>)
    94e4:	6801      	ldr	r1, [r0, #0]
    94e6:	6846      	ldr	r6, [r0, #4]
    94e8:	1889      	adds	r1, r1, r2
    94ea:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    94ee:	6001      	str	r1, [r0, #0]
    94f0:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    94f2:	1a9b      	subs	r3, r3, r2
    94f4:	4a33      	ldr	r2, [pc, #204]	; (95c4 <sys_clock_announce+0x170>)
    94f6:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    94f8:	2200      	movs	r2, #0
    94fa:	2300      	movs	r3, #0
    94fc:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    9500:	4620      	mov	r0, r4
    9502:	f001 fbd7 	bl	acb4 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9506:	482e      	ldr	r0, [pc, #184]	; (95c0 <sys_clock_announce+0x16c>)
    9508:	f7fd fe0e 	bl	7128 <z_spin_unlock_valid>
    950c:	2800      	cmp	r0, #0
    950e:	d0c7      	beq.n	94a0 <sys_clock_announce+0x4c>
	__asm__ volatile(
    9510:	f385 8811 	msr	BASEPRI, r5
    9514:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    9518:	68a3      	ldr	r3, [r4, #8]
    951a:	4620      	mov	r0, r4
    951c:	4798      	blx	r3
	__asm__ volatile(
    951e:	f04f 0320 	mov.w	r3, #32
    9522:	f3ef 8511 	mrs	r5, BASEPRI
    9526:	f383 8812 	msr	BASEPRI_MAX, r3
    952a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    952e:	4824      	ldr	r0, [pc, #144]	; (95c0 <sys_clock_announce+0x16c>)
    9530:	f7fd fdea 	bl	7108 <z_spin_lock_valid>
    9534:	2800      	cmp	r0, #0
    9536:	d1c3      	bne.n	94c0 <sys_clock_announce+0x6c>
    9538:	4c23      	ldr	r4, [pc, #140]	; (95c8 <sys_clock_announce+0x174>)
    953a:	238e      	movs	r3, #142	; 0x8e
    953c:	4622      	mov	r2, r4
    953e:	4923      	ldr	r1, [pc, #140]	; (95cc <sys_clock_announce+0x178>)
    9540:	4823      	ldr	r0, [pc, #140]	; (95d0 <sys_clock_announce+0x17c>)
    9542:	f000 fc98 	bl	9e76 <assert_print>
    9546:	491e      	ldr	r1, [pc, #120]	; (95c0 <sys_clock_announce+0x16c>)
    9548:	4822      	ldr	r0, [pc, #136]	; (95d4 <sys_clock_announce+0x180>)
    954a:	f000 fc94 	bl	9e76 <assert_print>
    954e:	218e      	movs	r1, #142	; 0x8e
    9550:	4620      	mov	r0, r4
    9552:	f000 fc89 	bl	9e68 <assert_post_action>
    9556:	e7b3      	b.n	94c0 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    9558:	b144      	cbz	r4, 956c <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    955a:	4b1a      	ldr	r3, [pc, #104]	; (95c4 <sys_clock_announce+0x170>)
    955c:	6819      	ldr	r1, [r3, #0]
    955e:	6923      	ldr	r3, [r4, #16]
    9560:	6962      	ldr	r2, [r4, #20]
    9562:	1a5b      	subs	r3, r3, r1
    9564:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    9568:	6123      	str	r3, [r4, #16]
    956a:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    956c:	4a1c      	ldr	r2, [pc, #112]	; (95e0 <sys_clock_announce+0x18c>)
    956e:	4e15      	ldr	r6, [pc, #84]	; (95c4 <sys_clock_announce+0x170>)
    9570:	6830      	ldr	r0, [r6, #0]
    9572:	6813      	ldr	r3, [r2, #0]
    9574:	6851      	ldr	r1, [r2, #4]
    9576:	181b      	adds	r3, r3, r0
    9578:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    957c:	6013      	str	r3, [r2, #0]
    957e:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    9580:	2400      	movs	r4, #0
    9582:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    9584:	f7ff fd4a 	bl	901c <next_timeout>
    9588:	4621      	mov	r1, r4
    958a:	f7fb fa25 	bl	49d8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    958e:	480c      	ldr	r0, [pc, #48]	; (95c0 <sys_clock_announce+0x16c>)
    9590:	f7fd fdca 	bl	7128 <z_spin_unlock_valid>
    9594:	b120      	cbz	r0, 95a0 <sys_clock_announce+0x14c>
	__asm__ volatile(
    9596:	f385 8811 	msr	BASEPRI, r5
    959a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    959e:	bd70      	pop	{r4, r5, r6, pc}
    95a0:	4c09      	ldr	r4, [pc, #36]	; (95c8 <sys_clock_announce+0x174>)
    95a2:	23b9      	movs	r3, #185	; 0xb9
    95a4:	4622      	mov	r2, r4
    95a6:	490c      	ldr	r1, [pc, #48]	; (95d8 <sys_clock_announce+0x184>)
    95a8:	4809      	ldr	r0, [pc, #36]	; (95d0 <sys_clock_announce+0x17c>)
    95aa:	f000 fc64 	bl	9e76 <assert_print>
    95ae:	4904      	ldr	r1, [pc, #16]	; (95c0 <sys_clock_announce+0x16c>)
    95b0:	480a      	ldr	r0, [pc, #40]	; (95dc <sys_clock_announce+0x188>)
    95b2:	f000 fc60 	bl	9e76 <assert_print>
    95b6:	21b9      	movs	r1, #185	; 0xb9
    95b8:	4620      	mov	r0, r4
    95ba:	f000 fc55 	bl	9e68 <assert_post_action>
    95be:	e7ea      	b.n	9596 <sys_clock_announce+0x142>
    95c0:	20004f74 	.word	0x20004f74
    95c4:	20004f70 	.word	0x20004f70
    95c8:	0000b32c 	.word	0x0000b32c
    95cc:	0000b38c 	.word	0x0000b38c
    95d0:	0000b180 	.word	0x0000b180
    95d4:	0000b3a4 	.word	0x0000b3a4
    95d8:	0000b35c 	.word	0x0000b35c
    95dc:	0000b374 	.word	0x0000b374
    95e0:	200043f0 	.word	0x200043f0

000095e4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    95e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    95e6:	2600      	movs	r6, #0
	__asm__ volatile(
    95e8:	f04f 0320 	mov.w	r3, #32
    95ec:	f3ef 8711 	mrs	r7, BASEPRI
    95f0:	f383 8812 	msr	BASEPRI_MAX, r3
    95f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    95f8:	481f      	ldr	r0, [pc, #124]	; (9678 <sys_clock_tick_get+0x94>)
    95fa:	f7fd fd85 	bl	7108 <z_spin_lock_valid>
    95fe:	b128      	cbz	r0, 960c <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    9600:	481d      	ldr	r0, [pc, #116]	; (9678 <sys_clock_tick_get+0x94>)
    9602:	f7fd fda1 	bl	7148 <z_spin_lock_set_owner>
	uint64_t t = 0U;
    9606:	2400      	movs	r4, #0
    9608:	4625      	mov	r5, r4
	return k;
    960a:	e014      	b.n	9636 <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    960c:	4c1b      	ldr	r4, [pc, #108]	; (967c <sys_clock_tick_get+0x98>)
    960e:	238e      	movs	r3, #142	; 0x8e
    9610:	4622      	mov	r2, r4
    9612:	491b      	ldr	r1, [pc, #108]	; (9680 <sys_clock_tick_get+0x9c>)
    9614:	481b      	ldr	r0, [pc, #108]	; (9684 <sys_clock_tick_get+0xa0>)
    9616:	f000 fc2e 	bl	9e76 <assert_print>
    961a:	4917      	ldr	r1, [pc, #92]	; (9678 <sys_clock_tick_get+0x94>)
    961c:	481a      	ldr	r0, [pc, #104]	; (9688 <sys_clock_tick_get+0xa4>)
    961e:	f000 fc2a 	bl	9e76 <assert_print>
    9622:	218e      	movs	r1, #142	; 0x8e
    9624:	4620      	mov	r0, r4
    9626:	f000 fc1f 	bl	9e68 <assert_post_action>
    962a:	e7e9      	b.n	9600 <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    962c:	f387 8811 	msr	BASEPRI, r7
    9630:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9634:	2601      	movs	r6, #1
    9636:	b9e6      	cbnz	r6, 9672 <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    9638:	f7fb fa00 	bl	4a3c <sys_clock_elapsed>
    963c:	4b13      	ldr	r3, [pc, #76]	; (968c <sys_clock_tick_get+0xa8>)
    963e:	681c      	ldr	r4, [r3, #0]
    9640:	685d      	ldr	r5, [r3, #4]
    9642:	1904      	adds	r4, r0, r4
    9644:	f145 0500 	adc.w	r5, r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9648:	480b      	ldr	r0, [pc, #44]	; (9678 <sys_clock_tick_get+0x94>)
    964a:	f7fd fd6d 	bl	7128 <z_spin_unlock_valid>
    964e:	2800      	cmp	r0, #0
    9650:	d1ec      	bne.n	962c <sys_clock_tick_get+0x48>
    9652:	4e0a      	ldr	r6, [pc, #40]	; (967c <sys_clock_tick_get+0x98>)
    9654:	23b9      	movs	r3, #185	; 0xb9
    9656:	4632      	mov	r2, r6
    9658:	490d      	ldr	r1, [pc, #52]	; (9690 <sys_clock_tick_get+0xac>)
    965a:	480a      	ldr	r0, [pc, #40]	; (9684 <sys_clock_tick_get+0xa0>)
    965c:	f000 fc0b 	bl	9e76 <assert_print>
    9660:	4905      	ldr	r1, [pc, #20]	; (9678 <sys_clock_tick_get+0x94>)
    9662:	480c      	ldr	r0, [pc, #48]	; (9694 <sys_clock_tick_get+0xb0>)
    9664:	f000 fc07 	bl	9e76 <assert_print>
    9668:	21b9      	movs	r1, #185	; 0xb9
    966a:	4630      	mov	r0, r6
    966c:	f000 fbfc 	bl	9e68 <assert_post_action>
    9670:	e7dc      	b.n	962c <sys_clock_tick_get+0x48>
	}
	return t;
}
    9672:	4620      	mov	r0, r4
    9674:	4629      	mov	r1, r5
    9676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9678:	20004f74 	.word	0x20004f74
    967c:	0000b32c 	.word	0x0000b32c
    9680:	0000b38c 	.word	0x0000b38c
    9684:	0000b180 	.word	0x0000b180
    9688:	0000b3a4 	.word	0x0000b3a4
    968c:	200043f0 	.word	0x200043f0
    9690:	0000b35c 	.word	0x0000b35c
    9694:	0000b374 	.word	0x0000b374

00009698 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    9698:	4b01      	ldr	r3, [pc, #4]	; (96a0 <k_thread_system_pool_assign+0x8>)
    969a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    969e:	4770      	bx	lr
    96a0:	20004158 	.word	0x20004158

000096a4 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    96a4:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    96a6:	4a03      	ldr	r2, [pc, #12]	; (96b4 <boot_banner+0x10>)
    96a8:	4903      	ldr	r1, [pc, #12]	; (96b8 <boot_banner+0x14>)
    96aa:	4804      	ldr	r0, [pc, #16]	; (96bc <boot_banner+0x18>)
    96ac:	f000 fa5e 	bl	9b6c <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    96b0:	bd08      	pop	{r3, pc}
    96b2:	bf00      	nop
    96b4:	0000c08c 	.word	0x0000c08c
    96b8:	0000cbf8 	.word	0x0000cbf8
    96bc:	0000cc08 	.word	0x0000cc08

000096c0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    96c0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    96c2:	4c0f      	ldr	r4, [pc, #60]	; (9700 <statics_init+0x40>)
    96c4:	e008      	b.n	96d8 <statics_init+0x18>
    96c6:	4b0f      	ldr	r3, [pc, #60]	; (9704 <statics_init+0x44>)
    96c8:	429c      	cmp	r4, r3
    96ca:	d217      	bcs.n	96fc <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    96cc:	68a2      	ldr	r2, [r4, #8]
    96ce:	6861      	ldr	r1, [r4, #4]
    96d0:	4620      	mov	r0, r4
    96d2:	f001 fb14 	bl	acfe <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    96d6:	3418      	adds	r4, #24
    96d8:	4b0a      	ldr	r3, [pc, #40]	; (9704 <statics_init+0x44>)
    96da:	429c      	cmp	r4, r3
    96dc:	d9f3      	bls.n	96c6 <statics_init+0x6>
    96de:	4d0a      	ldr	r5, [pc, #40]	; (9708 <statics_init+0x48>)
    96e0:	2318      	movs	r3, #24
    96e2:	462a      	mov	r2, r5
    96e4:	4909      	ldr	r1, [pc, #36]	; (970c <statics_init+0x4c>)
    96e6:	480a      	ldr	r0, [pc, #40]	; (9710 <statics_init+0x50>)
    96e8:	f000 fbc5 	bl	9e76 <assert_print>
    96ec:	4809      	ldr	r0, [pc, #36]	; (9714 <statics_init+0x54>)
    96ee:	f000 fbc2 	bl	9e76 <assert_print>
    96f2:	2118      	movs	r1, #24
    96f4:	4628      	mov	r0, r5
    96f6:	f000 fbb7 	bl	9e68 <assert_post_action>
    96fa:	e7e4      	b.n	96c6 <statics_init+0x6>
		}
	}
	return 0;
}
    96fc:	2000      	movs	r0, #0
    96fe:	bd38      	pop	{r3, r4, r5, pc}
    9700:	20004158 	.word	0x20004158
    9704:	20004170 	.word	0x20004170
    9708:	0000cc30 	.word	0x0000cc30
    970c:	0000cc54 	.word	0x0000cc54
    9710:	0000b180 	.word	0x0000b180
    9714:	0000c778 	.word	0x0000c778

00009718 <nrf_cc3xx_platform_init_no_rng>:
    9718:	b510      	push	{r4, lr}
    971a:	4c0a      	ldr	r4, [pc, #40]	; (9744 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    971c:	6823      	ldr	r3, [r4, #0]
    971e:	b11b      	cbz	r3, 9728 <nrf_cc3xx_platform_init_no_rng+0x10>
    9720:	2301      	movs	r3, #1
    9722:	6023      	str	r3, [r4, #0]
    9724:	2000      	movs	r0, #0
    9726:	bd10      	pop	{r4, pc}
    9728:	f000 f8ce 	bl	98c8 <CC_LibInitNoRng>
    972c:	2800      	cmp	r0, #0
    972e:	d0f7      	beq.n	9720 <nrf_cc3xx_platform_init_no_rng+0x8>
    9730:	3801      	subs	r0, #1
    9732:	2806      	cmp	r0, #6
    9734:	d803      	bhi.n	973e <nrf_cc3xx_platform_init_no_rng+0x26>
    9736:	4b04      	ldr	r3, [pc, #16]	; (9748 <nrf_cc3xx_platform_init_no_rng+0x30>)
    9738:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    973c:	bd10      	pop	{r4, pc}
    973e:	4803      	ldr	r0, [pc, #12]	; (974c <nrf_cc3xx_platform_init_no_rng+0x34>)
    9740:	bd10      	pop	{r4, pc}
    9742:	bf00      	nop
    9744:	20004f78 	.word	0x20004f78
    9748:	0000cc6c 	.word	0x0000cc6c
    974c:	ffff8ffe 	.word	0xffff8ffe

00009750 <nrf_cc3xx_platform_abort>:
    9750:	f3bf 8f4f 	dsb	sy
    9754:	4905      	ldr	r1, [pc, #20]	; (976c <nrf_cc3xx_platform_abort+0x1c>)
    9756:	4b06      	ldr	r3, [pc, #24]	; (9770 <nrf_cc3xx_platform_abort+0x20>)
    9758:	68ca      	ldr	r2, [r1, #12]
    975a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    975e:	4313      	orrs	r3, r2
    9760:	60cb      	str	r3, [r1, #12]
    9762:	f3bf 8f4f 	dsb	sy
    9766:	bf00      	nop
    9768:	e7fd      	b.n	9766 <nrf_cc3xx_platform_abort+0x16>
    976a:	bf00      	nop
    976c:	e000ed00 	.word	0xe000ed00
    9770:	05fa0004 	.word	0x05fa0004

00009774 <CC_PalAbort>:
    9774:	b410      	push	{r4}
    9776:	4b09      	ldr	r3, [pc, #36]	; (979c <CC_PalAbort+0x28>)
    9778:	4909      	ldr	r1, [pc, #36]	; (97a0 <CC_PalAbort+0x2c>)
    977a:	4c0a      	ldr	r4, [pc, #40]	; (97a4 <CC_PalAbort+0x30>)
    977c:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    9780:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    9784:	6849      	ldr	r1, [r1, #4]
    9786:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    978a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    978e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    9792:	2300      	movs	r3, #0
    9794:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    9798:	bc10      	pop	{r4}
    979a:	4708      	bx	r1
    979c:	5002b000 	.word	0x5002b000
    97a0:	200040e4 	.word	0x200040e4
    97a4:	5002a000 	.word	0x5002a000

000097a8 <nrf_cc3xx_platform_set_abort>:
    97a8:	e9d0 1200 	ldrd	r1, r2, [r0]
    97ac:	4b01      	ldr	r3, [pc, #4]	; (97b4 <nrf_cc3xx_platform_set_abort+0xc>)
    97ae:	e9c3 1200 	strd	r1, r2, [r3]
    97b2:	4770      	bx	lr
    97b4:	200040e4 	.word	0x200040e4

000097b8 <mutex_free>:
    97b8:	b510      	push	{r4, lr}
    97ba:	4604      	mov	r4, r0
    97bc:	b130      	cbz	r0, 97cc <mutex_free+0x14>
    97be:	6863      	ldr	r3, [r4, #4]
    97c0:	06db      	lsls	r3, r3, #27
    97c2:	d502      	bpl.n	97ca <mutex_free+0x12>
    97c4:	2300      	movs	r3, #0
    97c6:	6023      	str	r3, [r4, #0]
    97c8:	6063      	str	r3, [r4, #4]
    97ca:	bd10      	pop	{r4, pc}
    97cc:	4b02      	ldr	r3, [pc, #8]	; (97d8 <mutex_free+0x20>)
    97ce:	4803      	ldr	r0, [pc, #12]	; (97dc <mutex_free+0x24>)
    97d0:	685b      	ldr	r3, [r3, #4]
    97d2:	4798      	blx	r3
    97d4:	e7f3      	b.n	97be <mutex_free+0x6>
    97d6:	bf00      	nop
    97d8:	200040e4 	.word	0x200040e4
    97dc:	0000cc88 	.word	0x0000cc88

000097e0 <mutex_lock>:
    97e0:	b1b0      	cbz	r0, 9810 <mutex_lock+0x30>
    97e2:	6843      	ldr	r3, [r0, #4]
    97e4:	b193      	cbz	r3, 980c <mutex_lock+0x2c>
    97e6:	06db      	lsls	r3, r3, #27
    97e8:	d50e      	bpl.n	9808 <mutex_lock+0x28>
    97ea:	2301      	movs	r3, #1
    97ec:	e850 2f00 	ldrex	r2, [r0]
    97f0:	4619      	mov	r1, r3
    97f2:	e840 1c00 	strex	ip, r1, [r0]
    97f6:	f09c 0f00 	teq	ip, #0
    97fa:	d1f7      	bne.n	97ec <mutex_lock+0xc>
    97fc:	2a01      	cmp	r2, #1
    97fe:	d0f5      	beq.n	97ec <mutex_lock+0xc>
    9800:	f3bf 8f5f 	dmb	sy
    9804:	2000      	movs	r0, #0
    9806:	4770      	bx	lr
    9808:	4803      	ldr	r0, [pc, #12]	; (9818 <mutex_lock+0x38>)
    980a:	4770      	bx	lr
    980c:	4803      	ldr	r0, [pc, #12]	; (981c <mutex_lock+0x3c>)
    980e:	4770      	bx	lr
    9810:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    9814:	4770      	bx	lr
    9816:	bf00      	nop
    9818:	ffff8fe9 	.word	0xffff8fe9
    981c:	ffff8fea 	.word	0xffff8fea

00009820 <mutex_unlock>:
    9820:	b168      	cbz	r0, 983e <mutex_unlock+0x1e>
    9822:	6843      	ldr	r3, [r0, #4]
    9824:	b13b      	cbz	r3, 9836 <mutex_unlock+0x16>
    9826:	06db      	lsls	r3, r3, #27
    9828:	d507      	bpl.n	983a <mutex_unlock+0x1a>
    982a:	f3bf 8f5f 	dmb	sy
    982e:	2300      	movs	r3, #0
    9830:	6003      	str	r3, [r0, #0]
    9832:	4618      	mov	r0, r3
    9834:	4770      	bx	lr
    9836:	4803      	ldr	r0, [pc, #12]	; (9844 <mutex_unlock+0x24>)
    9838:	4770      	bx	lr
    983a:	4803      	ldr	r0, [pc, #12]	; (9848 <mutex_unlock+0x28>)
    983c:	4770      	bx	lr
    983e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    9842:	4770      	bx	lr
    9844:	ffff8fea 	.word	0xffff8fea
    9848:	ffff8fe9 	.word	0xffff8fe9

0000984c <mutex_init>:
    984c:	b510      	push	{r4, lr}
    984e:	4604      	mov	r4, r0
    9850:	b120      	cbz	r0, 985c <mutex_init+0x10>
    9852:	2200      	movs	r2, #0
    9854:	2311      	movs	r3, #17
    9856:	6022      	str	r2, [r4, #0]
    9858:	6063      	str	r3, [r4, #4]
    985a:	bd10      	pop	{r4, pc}
    985c:	4801      	ldr	r0, [pc, #4]	; (9864 <mutex_init+0x18>)
    985e:	f7ff ff89 	bl	9774 <CC_PalAbort>
    9862:	e7f6      	b.n	9852 <mutex_init+0x6>
    9864:	0000ccb0 	.word	0x0000ccb0

00009868 <nrf_cc3xx_platform_set_mutexes>:
    9868:	b570      	push	{r4, r5, r6, lr}
    986a:	e9d0 2300 	ldrd	r2, r3, [r0]
    986e:	4c13      	ldr	r4, [pc, #76]	; (98bc <nrf_cc3xx_platform_set_mutexes+0x54>)
    9870:	4d13      	ldr	r5, [pc, #76]	; (98c0 <nrf_cc3xx_platform_set_mutexes+0x58>)
    9872:	6063      	str	r3, [r4, #4]
    9874:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    9878:	e9c4 3002 	strd	r3, r0, [r4, #8]
    987c:	6022      	str	r2, [r4, #0]
    987e:	4b11      	ldr	r3, [pc, #68]	; (98c4 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    9880:	6808      	ldr	r0, [r1, #0]
    9882:	6018      	str	r0, [r3, #0]
    9884:	6848      	ldr	r0, [r1, #4]
    9886:	6058      	str	r0, [r3, #4]
    9888:	6888      	ldr	r0, [r1, #8]
    988a:	6098      	str	r0, [r3, #8]
    988c:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    9890:	60d8      	str	r0, [r3, #12]
    9892:	6119      	str	r1, [r3, #16]
    9894:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    9898:	06db      	lsls	r3, r3, #27
    989a:	d50d      	bpl.n	98b8 <nrf_cc3xx_platform_set_mutexes+0x50>
    989c:	2300      	movs	r3, #0
    989e:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    98a2:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    98a6:	f505 708a 	add.w	r0, r5, #276	; 0x114
    98aa:	4790      	blx	r2
    98ac:	6823      	ldr	r3, [r4, #0]
    98ae:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    98b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    98b6:	4718      	bx	r3
    98b8:	bd70      	pop	{r4, r5, r6, pc}
    98ba:	bf00      	nop
    98bc:	200040f4 	.word	0x200040f4
    98c0:	20004f90 	.word	0x20004f90
    98c4:	20004104 	.word	0x20004104

000098c8 <CC_LibInitNoRng>:
    98c8:	b538      	push	{r3, r4, r5, lr}
    98ca:	f000 f82f 	bl	992c <CC_HalInit>
    98ce:	b120      	cbz	r0, 98da <CC_LibInitNoRng+0x12>
    98d0:	2403      	movs	r4, #3
    98d2:	f000 f863 	bl	999c <CC_PalTerminate>
    98d6:	4620      	mov	r0, r4
    98d8:	bd38      	pop	{r3, r4, r5, pc}
    98da:	f000 f831 	bl	9940 <CC_PalInit>
    98de:	b998      	cbnz	r0, 9908 <CC_LibInitNoRng+0x40>
    98e0:	f000 f8ac 	bl	9a3c <CC_PalPowerSaveModeSelect>
    98e4:	b998      	cbnz	r0, 990e <CC_LibInitNoRng+0x46>
    98e6:	4d0f      	ldr	r5, [pc, #60]	; (9924 <CC_LibInitNoRng+0x5c>)
    98e8:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    98ec:	0e1b      	lsrs	r3, r3, #24
    98ee:	2bf0      	cmp	r3, #240	; 0xf0
    98f0:	d108      	bne.n	9904 <CC_LibInitNoRng+0x3c>
    98f2:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    98f6:	4b0c      	ldr	r3, [pc, #48]	; (9928 <CC_LibInitNoRng+0x60>)
    98f8:	429a      	cmp	r2, r3
    98fa:	d00a      	beq.n	9912 <CC_LibInitNoRng+0x4a>
    98fc:	2407      	movs	r4, #7
    98fe:	f000 f817 	bl	9930 <CC_HalTerminate>
    9902:	e7e6      	b.n	98d2 <CC_LibInitNoRng+0xa>
    9904:	2406      	movs	r4, #6
    9906:	e7fa      	b.n	98fe <CC_LibInitNoRng+0x36>
    9908:	2404      	movs	r4, #4
    990a:	4620      	mov	r0, r4
    990c:	bd38      	pop	{r3, r4, r5, pc}
    990e:	2400      	movs	r4, #0
    9910:	e7f5      	b.n	98fe <CC_LibInitNoRng+0x36>
    9912:	2001      	movs	r0, #1
    9914:	f000 f892 	bl	9a3c <CC_PalPowerSaveModeSelect>
    9918:	4604      	mov	r4, r0
    991a:	2800      	cmp	r0, #0
    991c:	d1f7      	bne.n	990e <CC_LibInitNoRng+0x46>
    991e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    9922:	e7d8      	b.n	98d6 <CC_LibInitNoRng+0xe>
    9924:	5002b000 	.word	0x5002b000
    9928:	20e00000 	.word	0x20e00000

0000992c <CC_HalInit>:
    992c:	2000      	movs	r0, #0
    992e:	4770      	bx	lr

00009930 <CC_HalTerminate>:
    9930:	2000      	movs	r0, #0
    9932:	4770      	bx	lr

00009934 <CC_HalMaskInterrupt>:
    9934:	4b01      	ldr	r3, [pc, #4]	; (993c <CC_HalMaskInterrupt+0x8>)
    9936:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    993a:	4770      	bx	lr
    993c:	5002b000 	.word	0x5002b000

00009940 <CC_PalInit>:
    9940:	b510      	push	{r4, lr}
    9942:	4811      	ldr	r0, [pc, #68]	; (9988 <CC_PalInit+0x48>)
    9944:	f000 f848 	bl	99d8 <CC_PalMutexCreate>
    9948:	b100      	cbz	r0, 994c <CC_PalInit+0xc>
    994a:	bd10      	pop	{r4, pc}
    994c:	480f      	ldr	r0, [pc, #60]	; (998c <CC_PalInit+0x4c>)
    994e:	f000 f843 	bl	99d8 <CC_PalMutexCreate>
    9952:	2800      	cmp	r0, #0
    9954:	d1f9      	bne.n	994a <CC_PalInit+0xa>
    9956:	4c0e      	ldr	r4, [pc, #56]	; (9990 <CC_PalInit+0x50>)
    9958:	4620      	mov	r0, r4
    995a:	f000 f83d 	bl	99d8 <CC_PalMutexCreate>
    995e:	2800      	cmp	r0, #0
    9960:	d1f3      	bne.n	994a <CC_PalInit+0xa>
    9962:	4b0c      	ldr	r3, [pc, #48]	; (9994 <CC_PalInit+0x54>)
    9964:	480c      	ldr	r0, [pc, #48]	; (9998 <CC_PalInit+0x58>)
    9966:	601c      	str	r4, [r3, #0]
    9968:	f000 f836 	bl	99d8 <CC_PalMutexCreate>
    996c:	4601      	mov	r1, r0
    996e:	2800      	cmp	r0, #0
    9970:	d1eb      	bne.n	994a <CC_PalInit+0xa>
    9972:	f000 f82d 	bl	99d0 <CC_PalDmaInit>
    9976:	4604      	mov	r4, r0
    9978:	b108      	cbz	r0, 997e <CC_PalInit+0x3e>
    997a:	4620      	mov	r0, r4
    997c:	bd10      	pop	{r4, pc}
    997e:	f000 f83f 	bl	9a00 <CC_PalPowerSaveModeInit>
    9982:	4620      	mov	r0, r4
    9984:	e7fa      	b.n	997c <CC_PalInit+0x3c>
    9986:	bf00      	nop
    9988:	2000413c 	.word	0x2000413c
    998c:	20004130 	.word	0x20004130
    9990:	20004138 	.word	0x20004138
    9994:	20004140 	.word	0x20004140
    9998:	20004134 	.word	0x20004134

0000999c <CC_PalTerminate>:
    999c:	b508      	push	{r3, lr}
    999e:	4808      	ldr	r0, [pc, #32]	; (99c0 <CC_PalTerminate+0x24>)
    99a0:	f000 f824 	bl	99ec <CC_PalMutexDestroy>
    99a4:	4807      	ldr	r0, [pc, #28]	; (99c4 <CC_PalTerminate+0x28>)
    99a6:	f000 f821 	bl	99ec <CC_PalMutexDestroy>
    99aa:	4807      	ldr	r0, [pc, #28]	; (99c8 <CC_PalTerminate+0x2c>)
    99ac:	f000 f81e 	bl	99ec <CC_PalMutexDestroy>
    99b0:	4806      	ldr	r0, [pc, #24]	; (99cc <CC_PalTerminate+0x30>)
    99b2:	f000 f81b 	bl	99ec <CC_PalMutexDestroy>
    99b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    99ba:	f000 b80b 	b.w	99d4 <CC_PalDmaTerminate>
    99be:	bf00      	nop
    99c0:	2000413c 	.word	0x2000413c
    99c4:	20004130 	.word	0x20004130
    99c8:	20004138 	.word	0x20004138
    99cc:	20004134 	.word	0x20004134

000099d0 <CC_PalDmaInit>:
    99d0:	2000      	movs	r0, #0
    99d2:	4770      	bx	lr

000099d4 <CC_PalDmaTerminate>:
    99d4:	4770      	bx	lr
    99d6:	bf00      	nop

000099d8 <CC_PalMutexCreate>:
    99d8:	b508      	push	{r3, lr}
    99da:	4b03      	ldr	r3, [pc, #12]	; (99e8 <CC_PalMutexCreate+0x10>)
    99dc:	6802      	ldr	r2, [r0, #0]
    99de:	681b      	ldr	r3, [r3, #0]
    99e0:	6810      	ldr	r0, [r2, #0]
    99e2:	4798      	blx	r3
    99e4:	2000      	movs	r0, #0
    99e6:	bd08      	pop	{r3, pc}
    99e8:	200040f4 	.word	0x200040f4

000099ec <CC_PalMutexDestroy>:
    99ec:	b508      	push	{r3, lr}
    99ee:	4b03      	ldr	r3, [pc, #12]	; (99fc <CC_PalMutexDestroy+0x10>)
    99f0:	6802      	ldr	r2, [r0, #0]
    99f2:	685b      	ldr	r3, [r3, #4]
    99f4:	6810      	ldr	r0, [r2, #0]
    99f6:	4798      	blx	r3
    99f8:	2000      	movs	r0, #0
    99fa:	bd08      	pop	{r3, pc}
    99fc:	200040f4 	.word	0x200040f4

00009a00 <CC_PalPowerSaveModeInit>:
    9a00:	b570      	push	{r4, r5, r6, lr}
    9a02:	4c09      	ldr	r4, [pc, #36]	; (9a28 <CC_PalPowerSaveModeInit+0x28>)
    9a04:	4d09      	ldr	r5, [pc, #36]	; (9a2c <CC_PalPowerSaveModeInit+0x2c>)
    9a06:	6920      	ldr	r0, [r4, #16]
    9a08:	68ab      	ldr	r3, [r5, #8]
    9a0a:	4798      	blx	r3
    9a0c:	b118      	cbz	r0, 9a16 <CC_PalPowerSaveModeInit+0x16>
    9a0e:	4b08      	ldr	r3, [pc, #32]	; (9a30 <CC_PalPowerSaveModeInit+0x30>)
    9a10:	4808      	ldr	r0, [pc, #32]	; (9a34 <CC_PalPowerSaveModeInit+0x34>)
    9a12:	685b      	ldr	r3, [r3, #4]
    9a14:	4798      	blx	r3
    9a16:	4a08      	ldr	r2, [pc, #32]	; (9a38 <CC_PalPowerSaveModeInit+0x38>)
    9a18:	68eb      	ldr	r3, [r5, #12]
    9a1a:	6920      	ldr	r0, [r4, #16]
    9a1c:	2100      	movs	r1, #0
    9a1e:	6011      	str	r1, [r2, #0]
    9a20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9a24:	4718      	bx	r3
    9a26:	bf00      	nop
    9a28:	20004104 	.word	0x20004104
    9a2c:	200040f4 	.word	0x200040f4
    9a30:	200040e4 	.word	0x200040e4
    9a34:	0000ccd4 	.word	0x0000ccd4
    9a38:	20004f8c 	.word	0x20004f8c

00009a3c <CC_PalPowerSaveModeSelect>:
    9a3c:	b570      	push	{r4, r5, r6, lr}
    9a3e:	4d1b      	ldr	r5, [pc, #108]	; (9aac <CC_PalPowerSaveModeSelect+0x70>)
    9a40:	4e1b      	ldr	r6, [pc, #108]	; (9ab0 <CC_PalPowerSaveModeSelect+0x74>)
    9a42:	4604      	mov	r4, r0
    9a44:	68b2      	ldr	r2, [r6, #8]
    9a46:	6928      	ldr	r0, [r5, #16]
    9a48:	4790      	blx	r2
    9a4a:	b9f8      	cbnz	r0, 9a8c <CC_PalPowerSaveModeSelect+0x50>
    9a4c:	b15c      	cbz	r4, 9a66 <CC_PalPowerSaveModeSelect+0x2a>
    9a4e:	4c19      	ldr	r4, [pc, #100]	; (9ab4 <CC_PalPowerSaveModeSelect+0x78>)
    9a50:	6823      	ldr	r3, [r4, #0]
    9a52:	b1b3      	cbz	r3, 9a82 <CC_PalPowerSaveModeSelect+0x46>
    9a54:	2b01      	cmp	r3, #1
    9a56:	d01b      	beq.n	9a90 <CC_PalPowerSaveModeSelect+0x54>
    9a58:	3b01      	subs	r3, #1
    9a5a:	6023      	str	r3, [r4, #0]
    9a5c:	6928      	ldr	r0, [r5, #16]
    9a5e:	68f3      	ldr	r3, [r6, #12]
    9a60:	4798      	blx	r3
    9a62:	2000      	movs	r0, #0
    9a64:	bd70      	pop	{r4, r5, r6, pc}
    9a66:	4c13      	ldr	r4, [pc, #76]	; (9ab4 <CC_PalPowerSaveModeSelect+0x78>)
    9a68:	6821      	ldr	r1, [r4, #0]
    9a6a:	b941      	cbnz	r1, 9a7e <CC_PalPowerSaveModeSelect+0x42>
    9a6c:	4b12      	ldr	r3, [pc, #72]	; (9ab8 <CC_PalPowerSaveModeSelect+0x7c>)
    9a6e:	2201      	movs	r2, #1
    9a70:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    9a74:	4a11      	ldr	r2, [pc, #68]	; (9abc <CC_PalPowerSaveModeSelect+0x80>)
    9a76:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    9a7a:	2b00      	cmp	r3, #0
    9a7c:	d1fb      	bne.n	9a76 <CC_PalPowerSaveModeSelect+0x3a>
    9a7e:	3101      	adds	r1, #1
    9a80:	6021      	str	r1, [r4, #0]
    9a82:	68f3      	ldr	r3, [r6, #12]
    9a84:	6928      	ldr	r0, [r5, #16]
    9a86:	4798      	blx	r3
    9a88:	2000      	movs	r0, #0
    9a8a:	bd70      	pop	{r4, r5, r6, pc}
    9a8c:	480c      	ldr	r0, [pc, #48]	; (9ac0 <CC_PalPowerSaveModeSelect+0x84>)
    9a8e:	bd70      	pop	{r4, r5, r6, pc}
    9a90:	4a0a      	ldr	r2, [pc, #40]	; (9abc <CC_PalPowerSaveModeSelect+0x80>)
    9a92:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    9a96:	2b00      	cmp	r3, #0
    9a98:	d1fb      	bne.n	9a92 <CC_PalPowerSaveModeSelect+0x56>
    9a9a:	4a07      	ldr	r2, [pc, #28]	; (9ab8 <CC_PalPowerSaveModeSelect+0x7c>)
    9a9c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    9aa0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    9aa4:	f7ff ff46 	bl	9934 <CC_HalMaskInterrupt>
    9aa8:	6823      	ldr	r3, [r4, #0]
    9aaa:	e7d5      	b.n	9a58 <CC_PalPowerSaveModeSelect+0x1c>
    9aac:	20004104 	.word	0x20004104
    9ab0:	200040f4 	.word	0x200040f4
    9ab4:	20004f8c 	.word	0x20004f8c
    9ab8:	5002a000 	.word	0x5002a000
    9abc:	5002b000 	.word	0x5002b000
    9ac0:	ffff8fe9 	.word	0xffff8fe9

00009ac4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    9ac4:	4770      	bx	lr

00009ac6 <cbprintf_via_va_list>:
{
    9ac6:	b510      	push	{r4, lr}
    9ac8:	460c      	mov	r4, r1
    9aca:	4611      	mov	r1, r2
    9acc:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    9ace:	9b02      	ldr	r3, [sp, #8]
    9ad0:	47a0      	blx	r4
}
    9ad2:	bd10      	pop	{r4, pc}

00009ad4 <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    9ad4:	b353      	cbz	r3, 9b2c <cbpprintf_external+0x58>
{
    9ad6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9ada:	b082      	sub	sp, #8
    9adc:	4607      	mov	r7, r0
    9ade:	4688      	mov	r8, r1
    9ae0:	4691      	mov	r9, r2
    9ae2:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
    9ae4:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = buf[1];
    9ae6:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = buf[2];
    9ae8:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = buf[3];
    9aea:	78db      	ldrb	r3, [r3, #3]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    9aec:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    9af0:	441c      	add	r4, r3
    9af2:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    9af4:	f04f 0a00 	mov.w	sl, #0
    9af8:	e00a      	b.n	9b10 <cbpprintf_external+0x3c>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
    9afa:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
    9afe:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
    9b02:	4620      	mov	r0, r4
    9b04:	f000 fb31 	bl	a16a <strlen>
    9b08:	3001      	adds	r0, #1
    9b0a:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    9b0c:	f10a 0a01 	add.w	sl, sl, #1
    9b10:	45b2      	cmp	sl, r6
    9b12:	d3f2      	bcc.n	9afa <cbpprintf_external+0x26>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
    9b14:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
    9b18:	9300      	str	r3, [sp, #0]
    9b1a:	686b      	ldr	r3, [r5, #4]
    9b1c:	464a      	mov	r2, r9
    9b1e:	4641      	mov	r1, r8
    9b20:	4638      	mov	r0, r7
    9b22:	f7ff ffd0 	bl	9ac6 <cbprintf_via_va_list>
}
    9b26:	b002      	add	sp, #8
    9b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    9b2c:	f06f 0015 	mvn.w	r0, #21
}
    9b30:	4770      	bx	lr

00009b32 <sys_notify_validate>:
	if (notify == NULL) {
    9b32:	4602      	mov	r2, r0
    9b34:	b158      	cbz	r0, 9b4e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9b36:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    9b38:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    9b3c:	2b01      	cmp	r3, #1
    9b3e:	d003      	beq.n	9b48 <sys_notify_validate+0x16>
    9b40:	2b03      	cmp	r3, #3
    9b42:	d107      	bne.n	9b54 <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    9b44:	6803      	ldr	r3, [r0, #0]
    9b46:	b143      	cbz	r3, 9b5a <sys_notify_validate+0x28>
		notify->result = 0;
    9b48:	2000      	movs	r0, #0
    9b4a:	6090      	str	r0, [r2, #8]
    9b4c:	4770      	bx	lr
		return -EINVAL;
    9b4e:	f06f 0015 	mvn.w	r0, #21
    9b52:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    9b54:	f06f 0015 	mvn.w	r0, #21
    9b58:	4770      	bx	lr
			rv = -EINVAL;
    9b5a:	f06f 0015 	mvn.w	r0, #21
}
    9b5e:	4770      	bx	lr

00009b60 <arch_printk_char_out>:
}
    9b60:	2000      	movs	r0, #0
    9b62:	4770      	bx	lr

00009b64 <vprintk>:
	ctx->count++;
	return _char_out(c);
}

void vprintk(const char *fmt, va_list ap)
{
    9b64:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    9b66:	f000 f99d 	bl	9ea4 <z_log_vprintk>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    9b6a:	bd08      	pop	{r3, pc}

00009b6c <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    9b6c:	b40f      	push	{r0, r1, r2, r3}
    9b6e:	b500      	push	{lr}
    9b70:	b083      	sub	sp, #12
    9b72:	a904      	add	r1, sp, #16
    9b74:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    9b78:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    9b7a:	f7ff fff3 	bl	9b64 <vprintk>

	va_end(ap);
}
    9b7e:	b003      	add	sp, #12
    9b80:	f85d eb04 	ldr.w	lr, [sp], #4
    9b84:	b004      	add	sp, #16
    9b86:	4770      	bx	lr

00009b88 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    9b88:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9b8c:	8b81      	ldrh	r1, [r0, #28]
    9b8e:	f021 0107 	bic.w	r1, r1, #7
    9b92:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    9b94:	8381      	strh	r1, [r0, #28]
}
    9b96:	4770      	bx	lr

00009b98 <notify_monitors>:
{
    9b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b9c:	4606      	mov	r6, r0
    9b9e:	460f      	mov	r7, r1
    9ba0:	4690      	mov	r8, r2
	return list->head;
    9ba2:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    9ba4:	b119      	cbz	r1, 9bae <notify_monitors+0x16>
    9ba6:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    9ba8:	b131      	cbz	r1, 9bb8 <notify_monitors+0x20>
	return node->next;
    9baa:	680c      	ldr	r4, [r1, #0]
    9bac:	e004      	b.n	9bb8 <notify_monitors+0x20>
    9bae:	460c      	mov	r4, r1
    9bb0:	e002      	b.n	9bb8 <notify_monitors+0x20>
    9bb2:	4623      	mov	r3, r4
    9bb4:	4621      	mov	r1, r4
    9bb6:	461c      	mov	r4, r3
    9bb8:	b159      	cbz	r1, 9bd2 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    9bba:	684d      	ldr	r5, [r1, #4]
    9bbc:	4643      	mov	r3, r8
    9bbe:	463a      	mov	r2, r7
    9bc0:	4630      	mov	r0, r6
    9bc2:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    9bc4:	2c00      	cmp	r4, #0
    9bc6:	d0f4      	beq.n	9bb2 <notify_monitors+0x1a>
    9bc8:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    9bca:	2c00      	cmp	r4, #0
    9bcc:	d0f2      	beq.n	9bb4 <notify_monitors+0x1c>
	return node->next;
    9bce:	6823      	ldr	r3, [r4, #0]
    9bd0:	e7f0      	b.n	9bb4 <notify_monitors+0x1c>
}
    9bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009bd6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9bd6:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    9bd8:	f013 0307 	ands.w	r3, r3, #7
    9bdc:	d103      	bne.n	9be6 <process_recheck+0x10>
	return list->head;
    9bde:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    9be0:	b10a      	cbz	r2, 9be6 <process_recheck+0x10>
		evt = EVT_START;
    9be2:	2003      	movs	r0, #3
    9be4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    9be6:	2b02      	cmp	r3, #2
    9be8:	d003      	beq.n	9bf2 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    9bea:	2b01      	cmp	r3, #1
    9bec:	d006      	beq.n	9bfc <process_recheck+0x26>
	int evt = EVT_NOP;
    9bee:	2000      	movs	r0, #0
    9bf0:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    9bf2:	8bc2      	ldrh	r2, [r0, #30]
    9bf4:	2a00      	cmp	r2, #0
    9bf6:	d1f8      	bne.n	9bea <process_recheck+0x14>
		evt = EVT_STOP;
    9bf8:	2004      	movs	r0, #4
    9bfa:	4770      	bx	lr
    9bfc:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    9bfe:	b10b      	cbz	r3, 9c04 <process_recheck+0x2e>
		evt = EVT_RESET;
    9c00:	2005      	movs	r0, #5
}
    9c02:	4770      	bx	lr
	int evt = EVT_NOP;
    9c04:	2000      	movs	r0, #0
    9c06:	4770      	bx	lr

00009c08 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    9c08:	b158      	cbz	r0, 9c22 <validate_args+0x1a>
{
    9c0a:	b510      	push	{r4, lr}
    9c0c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    9c0e:	b159      	cbz	r1, 9c28 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    9c10:	1d08      	adds	r0, r1, #4
    9c12:	f7ff ff8e 	bl	9b32 <sys_notify_validate>
	if ((rv == 0)
    9c16:	b918      	cbnz	r0, 9c20 <validate_args+0x18>
	    && ((cli->notify.flags
    9c18:	68a3      	ldr	r3, [r4, #8]
    9c1a:	f033 0303 	bics.w	r3, r3, #3
    9c1e:	d106      	bne.n	9c2e <validate_args+0x26>
}
    9c20:	bd10      	pop	{r4, pc}
		return -EINVAL;
    9c22:	f06f 0015 	mvn.w	r0, #21
}
    9c26:	4770      	bx	lr
		return -EINVAL;
    9c28:	f06f 0015 	mvn.w	r0, #21
    9c2c:	e7f8      	b.n	9c20 <validate_args+0x18>
		rv = -EINVAL;
    9c2e:	f06f 0015 	mvn.w	r0, #21
    9c32:	e7f5      	b.n	9c20 <validate_args+0x18>

00009c34 <notify_one>:
{
    9c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c38:	4607      	mov	r7, r0
    9c3a:	460c      	mov	r4, r1
    9c3c:	4616      	mov	r6, r2
    9c3e:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9c40:	4619      	mov	r1, r3
    9c42:	1d20      	adds	r0, r4, #4
    9c44:	f7f6 ff70 	bl	b28 <sys_notify_finalize>
	if (cb) {
    9c48:	b128      	cbz	r0, 9c56 <notify_one+0x22>
    9c4a:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    9c4c:	462b      	mov	r3, r5
    9c4e:	4632      	mov	r2, r6
    9c50:	4621      	mov	r1, r4
    9c52:	4638      	mov	r0, r7
    9c54:	47c0      	blx	r8
}
    9c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009c5a <notify_all>:
{
    9c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c5e:	4680      	mov	r8, r0
    9c60:	460c      	mov	r4, r1
    9c62:	4617      	mov	r7, r2
    9c64:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    9c66:	e004      	b.n	9c72 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    9c68:	4633      	mov	r3, r6
    9c6a:	463a      	mov	r2, r7
    9c6c:	4640      	mov	r0, r8
    9c6e:	f7ff ffe1 	bl	9c34 <notify_one>
    9c72:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    9c74:	b131      	cbz	r1, 9c84 <notify_all+0x2a>
	return node->next;
    9c76:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    9c78:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9c7a:	6863      	ldr	r3, [r4, #4]
    9c7c:	428b      	cmp	r3, r1
    9c7e:	d1f3      	bne.n	9c68 <notify_all+0xe>
	list->tail = node;
    9c80:	6065      	str	r5, [r4, #4]
}
    9c82:	e7f1      	b.n	9c68 <notify_all+0xe>
}
    9c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009c88 <onoff_manager_init>:
	if ((mgr == NULL)
    9c88:	b170      	cbz	r0, 9ca8 <onoff_manager_init+0x20>
{
    9c8a:	b538      	push	{r3, r4, r5, lr}
    9c8c:	460c      	mov	r4, r1
    9c8e:	4605      	mov	r5, r0
	    || (transitions == NULL)
    9c90:	b169      	cbz	r1, 9cae <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    9c92:	680b      	ldr	r3, [r1, #0]
    9c94:	b173      	cbz	r3, 9cb4 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    9c96:	684b      	ldr	r3, [r1, #4]
    9c98:	b17b      	cbz	r3, 9cba <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    9c9a:	2220      	movs	r2, #32
    9c9c:	2100      	movs	r1, #0
    9c9e:	f000 faa6 	bl	a1ee <memset>
    9ca2:	612c      	str	r4, [r5, #16]
	return 0;
    9ca4:	2000      	movs	r0, #0
}
    9ca6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9ca8:	f06f 0015 	mvn.w	r0, #21
}
    9cac:	4770      	bx	lr
		return -EINVAL;
    9cae:	f06f 0015 	mvn.w	r0, #21
    9cb2:	e7f8      	b.n	9ca6 <onoff_manager_init+0x1e>
    9cb4:	f06f 0015 	mvn.w	r0, #21
    9cb8:	e7f5      	b.n	9ca6 <onoff_manager_init+0x1e>
    9cba:	f06f 0015 	mvn.w	r0, #21
    9cbe:	e7f2      	b.n	9ca6 <onoff_manager_init+0x1e>

00009cc0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    9cc0:	b508      	push	{r3, lr}
    9cc2:	4604      	mov	r4, r0
    9cc4:	4608      	mov	r0, r1
    9cc6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    9cc8:	461a      	mov	r2, r3
    9cca:	47a0      	blx	r4
	return z_impl_z_current_get();
    9ccc:	f7ff f8c2 	bl	8e54 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    9cd0:	f7f9 fd2e 	bl	3730 <z_impl_k_thread_abort>

00009cd4 <free_list_add_bidx>:
{
    9cd4:	b510      	push	{r4, lr}
	if (b->next == 0U) {
    9cd6:	1d13      	adds	r3, r2, #4
    9cd8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    9cdc:	b97c      	cbnz	r4, 9cfe <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
    9cde:	2301      	movs	r3, #1
    9ce0:	fa03 f402 	lsl.w	r4, r3, r2
    9ce4:	68c3      	ldr	r3, [r0, #12]
    9ce6:	4323      	orrs	r3, r4
    9ce8:	60c3      	str	r3, [r0, #12]
		b->next = c;
    9cea:	3204      	adds	r2, #4
    9cec:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    9cf0:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    9cf2:	1d1a      	adds	r2, r3, #4
    9cf4:	b289      	uxth	r1, r1
    9cf6:	5281      	strh	r1, [r0, r2]
    9cf8:	3306      	adds	r3, #6
    9cfa:	52c1      	strh	r1, [r0, r3]
}
    9cfc:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    9cfe:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    9d00:	3204      	adds	r2, #4
    9d02:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    9d04:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    9d08:	f10c 0e04 	add.w	lr, ip, #4
    9d0c:	f820 300e 	strh.w	r3, [r0, lr]
    9d10:	f10c 0c06 	add.w	ip, ip, #6
    9d14:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    9d18:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    9d1a:	3306      	adds	r3, #6
    9d1c:	b289      	uxth	r1, r1
    9d1e:	52c1      	strh	r1, [r0, r3]
    9d20:	5281      	strh	r1, [r0, r2]
    9d22:	e7eb      	b.n	9cfc <free_list_add_bidx+0x28>

00009d24 <free_list_add>:
{
    9d24:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    9d26:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    9d2a:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    9d2c:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    9d2e:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    9d32:	f1c2 021f 	rsb	r2, r2, #31
    9d36:	f7ff ffcd 	bl	9cd4 <free_list_add_bidx>
}
    9d3a:	bd08      	pop	{r3, pc}

00009d3c <extract_decimal>:
{
    9d3c:	4684      	mov	ip, r0
	const char *sp = *str;
    9d3e:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    9d40:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    9d42:	e005      	b.n	9d50 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    9d44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    9d48:	3201      	adds	r2, #1
    9d4a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    9d4e:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    9d50:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    9d52:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    9d56:	2909      	cmp	r1, #9
    9d58:	d9f4      	bls.n	9d44 <extract_decimal+0x8>
	*str = sp;
    9d5a:	f8cc 2000 	str.w	r2, [ip]
}
    9d5e:	4770      	bx	lr

00009d60 <encode_uint>:
{
    9d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d64:	b083      	sub	sp, #12
    9d66:	4604      	mov	r4, r0
    9d68:	460d      	mov	r5, r1
    9d6a:	9201      	str	r2, [sp, #4]
    9d6c:	469a      	mov	sl, r3
    9d6e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    9d70:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    9d72:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    9d76:	2b6f      	cmp	r3, #111	; 0x6f
    9d78:	d00f      	beq.n	9d9a <encode_uint+0x3a>
    9d7a:	d906      	bls.n	9d8a <encode_uint+0x2a>
    9d7c:	2b70      	cmp	r3, #112	; 0x70
    9d7e:	d00f      	beq.n	9da0 <encode_uint+0x40>
    9d80:	2b78      	cmp	r3, #120	; 0x78
    9d82:	d110      	bne.n	9da6 <encode_uint+0x46>
		return 16;
    9d84:	f04f 0910 	mov.w	r9, #16
    9d88:	e026      	b.n	9dd8 <encode_uint+0x78>
	switch (specifier) {
    9d8a:	2b58      	cmp	r3, #88	; 0x58
    9d8c:	d002      	beq.n	9d94 <encode_uint+0x34>
    9d8e:	f04f 090a 	mov.w	r9, #10
    9d92:	e021      	b.n	9dd8 <encode_uint+0x78>
		return 16;
    9d94:	f04f 0910 	mov.w	r9, #16
    9d98:	e01e      	b.n	9dd8 <encode_uint+0x78>
		return 8;
    9d9a:	f04f 0908 	mov.w	r9, #8
    9d9e:	e01b      	b.n	9dd8 <encode_uint+0x78>
		return 16;
    9da0:	f04f 0910 	mov.w	r9, #16
    9da4:	e018      	b.n	9dd8 <encode_uint+0x78>
	switch (specifier) {
    9da6:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    9daa:	e015      	b.n	9dd8 <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9dac:	f1bb 0f19 	cmp.w	fp, #25
    9db0:	d821      	bhi.n	9df6 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    9db2:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9db4:	3237      	adds	r2, #55	; 0x37
    9db6:	b2d2      	uxtb	r2, r2
    9db8:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    9dbc:	463a      	mov	r2, r7
    9dbe:	4643      	mov	r3, r8
    9dc0:	4620      	mov	r0, r4
    9dc2:	4629      	mov	r1, r5
    9dc4:	f7f6 f99c 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    9dc8:	42bc      	cmp	r4, r7
    9dca:	f175 0300 	sbcs.w	r3, r5, #0
    9dce:	d316      	bcc.n	9dfe <encode_uint+0x9e>
    9dd0:	4556      	cmp	r6, sl
    9dd2:	d914      	bls.n	9dfe <encode_uint+0x9e>
		value /= radix;
    9dd4:	4604      	mov	r4, r0
    9dd6:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    9dd8:	f04f 0800 	mov.w	r8, #0
    9ddc:	464f      	mov	r7, r9
    9dde:	464a      	mov	r2, r9
    9de0:	4643      	mov	r3, r8
    9de2:	4620      	mov	r0, r4
    9de4:	4629      	mov	r1, r5
    9de6:	f7f6 f98b 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9dea:	2a09      	cmp	r2, #9
    9dec:	d8de      	bhi.n	9dac <encode_uint+0x4c>
    9dee:	b2d2      	uxtb	r2, r2
    9df0:	3230      	adds	r2, #48	; 0x30
    9df2:	b2d2      	uxtb	r2, r2
    9df4:	e7e0      	b.n	9db8 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    9df6:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9df8:	3257      	adds	r2, #87	; 0x57
    9dfa:	b2d2      	uxtb	r2, r2
    9dfc:	e7dc      	b.n	9db8 <encode_uint+0x58>
	if (conv->flag_hash) {
    9dfe:	9b01      	ldr	r3, [sp, #4]
    9e00:	781b      	ldrb	r3, [r3, #0]
    9e02:	f013 0f20 	tst.w	r3, #32
    9e06:	d005      	beq.n	9e14 <encode_uint+0xb4>
		if (radix == 8) {
    9e08:	f1b9 0f08 	cmp.w	r9, #8
    9e0c:	d006      	beq.n	9e1c <encode_uint+0xbc>
		} else if (radix == 16) {
    9e0e:	f1b9 0f10 	cmp.w	r9, #16
    9e12:	d009      	beq.n	9e28 <encode_uint+0xc8>
}
    9e14:	4630      	mov	r0, r6
    9e16:	b003      	add	sp, #12
    9e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    9e1c:	9a01      	ldr	r2, [sp, #4]
    9e1e:	7893      	ldrb	r3, [r2, #2]
    9e20:	f043 0308 	orr.w	r3, r3, #8
    9e24:	7093      	strb	r3, [r2, #2]
    9e26:	e7f5      	b.n	9e14 <encode_uint+0xb4>
			conv->altform_0c = true;
    9e28:	9a01      	ldr	r2, [sp, #4]
    9e2a:	7893      	ldrb	r3, [r2, #2]
    9e2c:	f043 0310 	orr.w	r3, r3, #16
    9e30:	7093      	strb	r3, [r2, #2]
    9e32:	e7ef      	b.n	9e14 <encode_uint+0xb4>

00009e34 <outs>:
{
    9e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e38:	4607      	mov	r7, r0
    9e3a:	460e      	mov	r6, r1
    9e3c:	4614      	mov	r4, r2
    9e3e:	4698      	mov	r8, r3
	size_t count = 0;
    9e40:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9e42:	e006      	b.n	9e52 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    9e44:	4631      	mov	r1, r6
    9e46:	f814 0b01 	ldrb.w	r0, [r4], #1
    9e4a:	47b8      	blx	r7
		if (rc < 0) {
    9e4c:	2800      	cmp	r0, #0
    9e4e:	db09      	blt.n	9e64 <outs+0x30>
		++count;
    9e50:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9e52:	4544      	cmp	r4, r8
    9e54:	d3f6      	bcc.n	9e44 <outs+0x10>
    9e56:	f1b8 0f00 	cmp.w	r8, #0
    9e5a:	d102      	bne.n	9e62 <outs+0x2e>
    9e5c:	7823      	ldrb	r3, [r4, #0]
    9e5e:	2b00      	cmp	r3, #0
    9e60:	d1f0      	bne.n	9e44 <outs+0x10>
	return (int)count;
    9e62:	4628      	mov	r0, r5
}
    9e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009e68 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    9e68:	4040      	eors	r0, r0
    9e6a:	f380 8811 	msr	BASEPRI, r0
    9e6e:	f04f 0004 	mov.w	r0, #4
    9e72:	df02      	svc	2
}
    9e74:	4770      	bx	lr

00009e76 <assert_print>:

void assert_print(const char *fmt, ...)
{
    9e76:	b40f      	push	{r0, r1, r2, r3}
    9e78:	b500      	push	{lr}
    9e7a:	b083      	sub	sp, #12
    9e7c:	a904      	add	r1, sp, #16
    9e7e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    9e82:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    9e84:	f7ff fe6e 	bl	9b64 <vprintk>

	va_end(ap);
}
    9e88:	b003      	add	sp, #12
    9e8a:	f85d eb04 	ldr.w	lr, [sp], #4
    9e8e:	b004      	add	sp, #16
    9e90:	4770      	bx	lr

00009e92 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    9e92:	4770      	bx	lr

00009e94 <dummy_timestamp>:
}
    9e94:	2000      	movs	r0, #0
    9e96:	4770      	bx	lr

00009e98 <msg_filter_check>:
}
    9e98:	2001      	movs	r0, #1
    9e9a:	4770      	bx	lr

00009e9c <default_get_timestamp>:
{
    9e9c:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    9e9e:	f000 fd4d 	bl	a93c <sys_clock_cycle_get_32>
}
    9ea2:	bd08      	pop	{r3, pc}

00009ea4 <z_log_vprintk>:
{
    9ea4:	b500      	push	{lr}
    9ea6:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    9ea8:	9103      	str	r1, [sp, #12]
    9eaa:	9002      	str	r0, [sp, #8]
    9eac:	2000      	movs	r0, #0
    9eae:	9001      	str	r0, [sp, #4]
    9eb0:	9000      	str	r0, [sp, #0]
    9eb2:	4603      	mov	r3, r0
    9eb4:	4602      	mov	r2, r0
    9eb6:	4601      	mov	r1, r0
    9eb8:	f7f8 fa74 	bl	23a4 <z_impl_z_log_msg2_runtime_vcreate>
}
    9ebc:	b005      	add	sp, #20
    9ebe:	f85d fb04 	ldr.w	pc, [sp], #4

00009ec2 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    9ec2:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    9ec4:	f7f7 ff44 	bl	1d50 <log_init>
	}

	return 0;
}
    9ec8:	2000      	movs	r0, #0
    9eca:	bd08      	pop	{r3, pc}

00009ecc <z_log_get_tag>:
}
    9ecc:	2000      	movs	r0, #0
    9ece:	4770      	bx	lr

00009ed0 <out_func>:
{
    9ed0:	b500      	push	{lr}
    9ed2:	b083      	sub	sp, #12
		char x = (char)c;
    9ed4:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    9ed8:	680b      	ldr	r3, [r1, #0]
    9eda:	684a      	ldr	r2, [r1, #4]
    9edc:	6852      	ldr	r2, [r2, #4]
    9ede:	2101      	movs	r1, #1
    9ee0:	f10d 0007 	add.w	r0, sp, #7
    9ee4:	4798      	blx	r3
}
    9ee6:	2000      	movs	r0, #0
    9ee8:	b003      	add	sp, #12
    9eea:	f85d fb04 	ldr.w	pc, [sp], #4

00009eee <cr_out_func>:
{
    9eee:	b538      	push	{r3, r4, r5, lr}
    9ef0:	4604      	mov	r4, r0
    9ef2:	460d      	mov	r5, r1
	out_func(c, ctx);
    9ef4:	f7ff ffec 	bl	9ed0 <out_func>
	if (c == '\n') {
    9ef8:	2c0a      	cmp	r4, #10
    9efa:	d001      	beq.n	9f00 <cr_out_func+0x12>
}
    9efc:	2000      	movs	r0, #0
    9efe:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    9f00:	4629      	mov	r1, r5
    9f02:	200d      	movs	r0, #13
    9f04:	f7ff ffe4 	bl	9ed0 <out_func>
    9f08:	e7f8      	b.n	9efc <cr_out_func+0xe>

00009f0a <buffer_write>:
{
    9f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f0c:	4607      	mov	r7, r0
    9f0e:	460d      	mov	r5, r1
    9f10:	4614      	mov	r4, r2
    9f12:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    9f14:	4632      	mov	r2, r6
    9f16:	4621      	mov	r1, r4
    9f18:	4628      	mov	r0, r5
    9f1a:	47b8      	blx	r7
		buf += processed;
    9f1c:	4405      	add	r5, r0
	} while (len != 0);
    9f1e:	1a24      	subs	r4, r4, r0
    9f20:	d1f8      	bne.n	9f14 <buffer_write+0xa>
}
    9f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009f24 <color_prefix>:
{
    9f24:	b508      	push	{r3, lr}
    9f26:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    9f28:	2201      	movs	r2, #1
    9f2a:	f7f8 f8b7 	bl	209c <color_print>
}
    9f2e:	bd08      	pop	{r3, pc}

00009f30 <color_postfix>:
{
    9f30:	b508      	push	{r3, lr}
    9f32:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    9f34:	2200      	movs	r2, #0
    9f36:	f7f8 f8b1 	bl	209c <color_print>
}
    9f3a:	bd08      	pop	{r3, pc}

00009f3c <postfix_print>:
{
    9f3c:	b538      	push	{r3, r4, r5, lr}
    9f3e:	4605      	mov	r5, r0
    9f40:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    9f42:	f001 0101 	and.w	r1, r1, #1
    9f46:	f7ff fff3 	bl	9f30 <color_postfix>
	newline_print(output, flags);
    9f4a:	4621      	mov	r1, r4
    9f4c:	4628      	mov	r0, r5
    9f4e:	f7f8 f8bb 	bl	20c8 <newline_print>
}
    9f52:	bd38      	pop	{r3, r4, r5, pc}

00009f54 <log_msg2_hexdump>:
{
    9f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9f58:	b083      	sub	sp, #12
    9f5a:	4680      	mov	r8, r0
    9f5c:	460e      	mov	r6, r1
    9f5e:	4615      	mov	r5, r2
    9f60:	461f      	mov	r7, r3
    9f62:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    9f66:	462c      	mov	r4, r5
    9f68:	2d10      	cmp	r5, #16
    9f6a:	bf28      	it	cs
    9f6c:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    9f6e:	f8cd 9000 	str.w	r9, [sp]
    9f72:	463b      	mov	r3, r7
    9f74:	4622      	mov	r2, r4
    9f76:	4631      	mov	r1, r6
    9f78:	4640      	mov	r0, r8
    9f7a:	f7f8 f8b9 	bl	20f0 <hexdump_line_print>
		data += length;
    9f7e:	4426      	add	r6, r4
	} while (len);
    9f80:	1b2d      	subs	r5, r5, r4
    9f82:	d1f0      	bne.n	9f66 <log_msg2_hexdump+0x12>
}
    9f84:	b003      	add	sp, #12
    9f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00009f8a <log_output_flush>:
{
    9f8a:	b510      	push	{r4, lr}
    9f8c:	4604      	mov	r4, r0
		     output->control_block->offset,
    9f8e:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    9f90:	6853      	ldr	r3, [r2, #4]
    9f92:	6812      	ldr	r2, [r2, #0]
    9f94:	6881      	ldr	r1, [r0, #8]
    9f96:	6800      	ldr	r0, [r0, #0]
    9f98:	f7ff ffb7 	bl	9f0a <buffer_write>
	output->control_block->offset = 0;
    9f9c:	6863      	ldr	r3, [r4, #4]
    9f9e:	2200      	movs	r2, #0
    9fa0:	601a      	str	r2, [r3, #0]
}
    9fa2:	bd10      	pop	{r4, pc}

00009fa4 <z_log_msg2_finalize>:
{
    9fa4:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    9fa6:	b198      	cbz	r0, 9fd0 <z_log_msg2_finalize+0x2c>
    9fa8:	460e      	mov	r6, r1
    9faa:	4614      	mov	r4, r2
    9fac:	4619      	mov	r1, r3
    9fae:	4605      	mov	r5, r0
	if (data) {
    9fb0:	b143      	cbz	r3, 9fc4 <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
    9fb2:	f100 0310 	add.w	r3, r0, #16
    9fb6:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    9fba:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    9fbe:	4418      	add	r0, r3
    9fc0:	f000 f8e6 	bl	a190 <memcpy>
	msg->hdr.desc = desc;
    9fc4:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    9fc6:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
    9fc8:	4628      	mov	r0, r5
    9fca:	f7f7 ffa3 	bl	1f14 <z_log_msg2_commit>
}
    9fce:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    9fd0:	f7f7 ff80 	bl	1ed4 <z_log_dropped>
		return;
    9fd4:	e7fb      	b.n	9fce <z_log_msg2_finalize+0x2a>

00009fd6 <abort_function>:
{
    9fd6:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    9fd8:	2000      	movs	r0, #0
    9fda:	f7f7 fe3f 	bl	1c5c <sys_reboot>

00009fde <z_log_msg2_runtime_create>:
{
    9fde:	b510      	push	{r4, lr}
    9fe0:	b086      	sub	sp, #24
	va_start(ap, fmt);
    9fe2:	ac0b      	add	r4, sp, #44	; 0x2c
    9fe4:	9405      	str	r4, [sp, #20]
    9fe6:	9403      	str	r4, [sp, #12]
    9fe8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9fea:	9402      	str	r4, [sp, #8]
    9fec:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9fee:	9401      	str	r4, [sp, #4]
    9ff0:	9c08      	ldr	r4, [sp, #32]
    9ff2:	9400      	str	r4, [sp, #0]
    9ff4:	f7f8 f9d6 	bl	23a4 <z_impl_z_log_msg2_runtime_vcreate>
}
    9ff8:	b006      	add	sp, #24
    9ffa:	bd10      	pop	{r4, pc}

00009ffc <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    9ffc:	b538      	push	{r3, r4, r5, lr}
    9ffe:	4604      	mov	r4, r0

	if (esf != NULL) {
    a000:	460d      	mov	r5, r1
    a002:	b111      	cbz	r1, a00a <z_arm_fatal_error+0xe>
		esf_dump(esf);
    a004:	4608      	mov	r0, r1
    a006:	f7f8 fdf1 	bl	2bec <esf_dump>
	}
	z_fatal_error(reason, esf);
    a00a:	4629      	mov	r1, r5
    a00c:	4620      	mov	r0, r4
    a00e:	f7fc fdfb 	bl	6c08 <z_fatal_error>
}
    a012:	bd38      	pop	{r3, r4, r5, pc}

0000a014 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    a014:	b508      	push	{r3, lr}
    a016:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    a018:	6800      	ldr	r0, [r0, #0]
    a01a:	f7ff ffef 	bl	9ffc <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    a01e:	bd08      	pop	{r3, pc}

0000a020 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    a020:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    a022:	2100      	movs	r1, #0
    a024:	2001      	movs	r0, #1
    a026:	f7ff ffe9 	bl	9ffc <z_arm_fatal_error>
}
    a02a:	bd08      	pop	{r3, pc}

0000a02c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    a02c:	b508      	push	{r3, lr}
	handler();
    a02e:	f7f8 fe79 	bl	2d24 <z_SysNmiOnReset>
	z_arm_int_exit();
    a032:	f7f8 ff6f 	bl	2f14 <z_arm_exc_exit>
}
    a036:	bd08      	pop	{r3, pc}

0000a038 <memory_fault_recoverable>:
}
    a038:	2000      	movs	r0, #0
    a03a:	4770      	bx	lr

0000a03c <z_log_msg2_runtime_create>:
{
    a03c:	b510      	push	{r4, lr}
    a03e:	b086      	sub	sp, #24
	va_start(ap, fmt);
    a040:	ac0b      	add	r4, sp, #44	; 0x2c
    a042:	9405      	str	r4, [sp, #20]
    a044:	9403      	str	r4, [sp, #12]
    a046:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a048:	9402      	str	r4, [sp, #8]
    a04a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a04c:	9401      	str	r4, [sp, #4]
    a04e:	9c08      	ldr	r4, [sp, #32]
    a050:	9400      	str	r4, [sp, #0]
    a052:	f7f8 f9a7 	bl	23a4 <z_impl_z_log_msg2_runtime_vcreate>
}
    a056:	b006      	add	sp, #24
    a058:	bd10      	pop	{r4, pc}

0000a05a <fault_handle>:
{
    a05a:	b508      	push	{r3, lr}
	*recoverable = false;
    a05c:	2300      	movs	r3, #0
    a05e:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    a060:	1ecb      	subs	r3, r1, #3
    a062:	2b09      	cmp	r3, #9
    a064:	d81a      	bhi.n	a09c <fault_handle+0x42>
    a066:	e8df f003 	tbb	[pc, r3]
    a06a:	0905      	.short	0x0905
    a06c:	1919110d 	.word	0x1919110d
    a070:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    a074:	4611      	mov	r1, r2
    a076:	f7f9 f99f 	bl	33b8 <hard_fault>
}
    a07a:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    a07c:	2100      	movs	r1, #0
    a07e:	f7f9 f8bd 	bl	31fc <mem_manage_fault>
		break;
    a082:	e7fa      	b.n	a07a <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    a084:	2100      	movs	r1, #0
    a086:	f7f8 ff53 	bl	2f30 <bus_fault>
		break;
    a08a:	e7f6      	b.n	a07a <fault_handle+0x20>
		reason = usage_fault(esf);
    a08c:	f7f8 fff8 	bl	3080 <usage_fault>
		break;
    a090:	e7f3      	b.n	a07a <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    a092:	4611      	mov	r1, r2
    a094:	f7f9 f87e 	bl	3194 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    a098:	2000      	movs	r0, #0
		break;
    a09a:	e7ee      	b.n	a07a <fault_handle+0x20>
		reserved_exception(esf, fault);
    a09c:	f7f9 f88e 	bl	31bc <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    a0a0:	2000      	movs	r0, #0
	return reason;
    a0a2:	e7ea      	b.n	a07a <fault_handle+0x20>

0000a0a4 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    a0a4:	6843      	ldr	r3, [r0, #4]
    a0a6:	1e5a      	subs	r2, r3, #1
		&&
    a0a8:	4213      	tst	r3, r2
    a0aa:	d106      	bne.n	a0ba <mpu_partition_is_valid+0x16>
		&&
    a0ac:	2b1f      	cmp	r3, #31
    a0ae:	d906      	bls.n	a0be <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    a0b0:	6803      	ldr	r3, [r0, #0]
		&&
    a0b2:	421a      	tst	r2, r3
    a0b4:	d005      	beq.n	a0c2 <mpu_partition_is_valid+0x1e>
    a0b6:	2000      	movs	r0, #0
    a0b8:	4770      	bx	lr
    a0ba:	2000      	movs	r0, #0
    a0bc:	4770      	bx	lr
    a0be:	2000      	movs	r0, #0
    a0c0:	4770      	bx	lr
    a0c2:	2001      	movs	r0, #1
}
    a0c4:	4770      	bx	lr

0000a0c6 <z_log_msg2_runtime_create>:
{
    a0c6:	b510      	push	{r4, lr}
    a0c8:	b086      	sub	sp, #24
	va_start(ap, fmt);
    a0ca:	ac0b      	add	r4, sp, #44	; 0x2c
    a0cc:	9405      	str	r4, [sp, #20]
    a0ce:	9403      	str	r4, [sp, #12]
    a0d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a0d2:	9402      	str	r4, [sp, #8]
    a0d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a0d6:	9401      	str	r4, [sp, #4]
    a0d8:	9c08      	ldr	r4, [sp, #32]
    a0da:	9400      	str	r4, [sp, #0]
    a0dc:	f7f8 f962 	bl	23a4 <z_impl_z_log_msg2_runtime_vcreate>
}
    a0e0:	b006      	add	sp, #24
    a0e2:	bd10      	pop	{r4, pc}

0000a0e4 <mpu_configure_region>:
{
    a0e4:	b500      	push	{lr}
    a0e6:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    a0e8:	680b      	ldr	r3, [r1, #0]
    a0ea:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    a0ec:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    a0ee:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    a0f0:	2b20      	cmp	r3, #32
    a0f2:	d912      	bls.n	a11a <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    a0f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    a0f8:	d811      	bhi.n	a11e <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    a0fa:	3b01      	subs	r3, #1
    a0fc:	fab3 f383 	clz	r3, r3
    a100:	f1c3 031f 	rsb	r3, r3, #31
    a104:	005b      	lsls	r3, r3, #1
    a106:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    a10a:	4313      	orrs	r3, r2
    a10c:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    a10e:	a901      	add	r1, sp, #4
    a110:	f7f9 fb5c 	bl	37cc <region_allocate_and_init>
}
    a114:	b005      	add	sp, #20
    a116:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    a11a:	2308      	movs	r3, #8
    a11c:	e7f5      	b.n	a10a <mpu_configure_region+0x26>
		return REGION_4G;
    a11e:	233e      	movs	r3, #62	; 0x3e
    a120:	e7f3      	b.n	a10a <mpu_configure_region+0x26>

0000a122 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    a122:	4602      	mov	r2, r0
    a124:	e002      	b.n	a12c <strcpy+0xa>
		*d = *s;
    a126:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    a12a:	3101      	adds	r1, #1
	while (*s != '\0') {
    a12c:	780b      	ldrb	r3, [r1, #0]
    a12e:	2b00      	cmp	r3, #0
    a130:	d1f9      	bne.n	a126 <strcpy+0x4>
	}

	*d = '\0';
    a132:	7013      	strb	r3, [r2, #0]

	return dest;
}
    a134:	4770      	bx	lr

0000a136 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    a136:	4603      	mov	r3, r0
    a138:	b1a2      	cbz	r2, a164 <strncpy+0x2e>
{
    a13a:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    a13c:	780c      	ldrb	r4, [r1, #0]
    a13e:	b12c      	cbz	r4, a14c <strncpy+0x16>
		*d = *s;
    a140:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    a144:	3101      	adds	r1, #1
		d++;
		n--;
    a146:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    a148:	2a00      	cmp	r2, #0
    a14a:	d1f7      	bne.n	a13c <strncpy+0x6>
	}

	while (n > 0) {
    a14c:	b122      	cbz	r2, a158 <strncpy+0x22>
		*d = '\0';
    a14e:	2100      	movs	r1, #0
    a150:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    a154:	3a01      	subs	r2, #1
    a156:	e7f9      	b.n	a14c <strncpy+0x16>
	}

	return dest;
}
    a158:	bc10      	pop	{r4}
    a15a:	4770      	bx	lr
		*d = '\0';
    a15c:	2100      	movs	r1, #0
    a15e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    a162:	3a01      	subs	r2, #1
	while (n > 0) {
    a164:	2a00      	cmp	r2, #0
    a166:	d1f9      	bne.n	a15c <strncpy+0x26>
    a168:	4770      	bx	lr

0000a16a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    a16a:	4603      	mov	r3, r0
	size_t n = 0;
    a16c:	2000      	movs	r0, #0

	while (*s != '\0') {
    a16e:	e001      	b.n	a174 <strlen+0xa>
		s++;
    a170:	3301      	adds	r3, #1
		n++;
    a172:	3001      	adds	r0, #1
	while (*s != '\0') {
    a174:	781a      	ldrb	r2, [r3, #0]
    a176:	2a00      	cmp	r2, #0
    a178:	d1fa      	bne.n	a170 <strlen+0x6>
	}

	return n;
}
    a17a:	4770      	bx	lr

0000a17c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    a17c:	4603      	mov	r3, r0
	size_t n = 0;
    a17e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    a180:	e001      	b.n	a186 <strnlen+0xa>
		s++;
    a182:	3301      	adds	r3, #1
		n++;
    a184:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    a186:	781a      	ldrb	r2, [r3, #0]
    a188:	b10a      	cbz	r2, a18e <strnlen+0x12>
    a18a:	4288      	cmp	r0, r1
    a18c:	d3f9      	bcc.n	a182 <strnlen+0x6>
	}

	return n;
}
    a18e:	4770      	bx	lr

0000a190 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    a190:	ea80 0301 	eor.w	r3, r0, r1
    a194:	f013 0f03 	tst.w	r3, #3
    a198:	d001      	beq.n	a19e <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    a19a:	4603      	mov	r3, r0
    a19c:	e023      	b.n	a1e6 <memcpy+0x56>
    a19e:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    a1a0:	f013 0f03 	tst.w	r3, #3
    a1a4:	d00f      	beq.n	a1c6 <memcpy+0x36>
			if (n == 0) {
    a1a6:	b30a      	cbz	r2, a1ec <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    a1a8:	f811 cb01 	ldrb.w	ip, [r1], #1
    a1ac:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    a1b0:	3a01      	subs	r2, #1
    a1b2:	e7f5      	b.n	a1a0 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    a1b4:	f811 cb01 	ldrb.w	ip, [r1], #1
    a1b8:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    a1bc:	3a01      	subs	r2, #1
	while (n > 0) {
    a1be:	2a00      	cmp	r2, #0
    a1c0:	d1f8      	bne.n	a1b4 <memcpy+0x24>
	}

	return d;
}
    a1c2:	bc10      	pop	{r4}
    a1c4:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    a1c6:	2a03      	cmp	r2, #3
    a1c8:	d90d      	bls.n	a1e6 <memcpy+0x56>
{
    a1ca:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    a1cc:	f851 4b04 	ldr.w	r4, [r1], #4
    a1d0:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    a1d4:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    a1d6:	2a03      	cmp	r2, #3
    a1d8:	d8f8      	bhi.n	a1cc <memcpy+0x3c>
    a1da:	e7f0      	b.n	a1be <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    a1dc:	f811 cb01 	ldrb.w	ip, [r1], #1
    a1e0:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    a1e4:	3a01      	subs	r2, #1
	while (n > 0) {
    a1e6:	2a00      	cmp	r2, #0
    a1e8:	d1f8      	bne.n	a1dc <memcpy+0x4c>
    a1ea:	4770      	bx	lr
}
    a1ec:	4770      	bx	lr

0000a1ee <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    a1ee:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    a1f2:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    a1f4:	e002      	b.n	a1fc <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    a1f6:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    a1fa:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    a1fc:	f013 0f03 	tst.w	r3, #3
    a200:	d002      	beq.n	a208 <memset+0x1a>
		if (n == 0) {
    a202:	2a00      	cmp	r2, #0
    a204:	d1f7      	bne.n	a1f6 <memset+0x8>
    a206:	e00f      	b.n	a228 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    a208:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    a20a:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    a20e:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    a212:	2a03      	cmp	r2, #3
    a214:	d906      	bls.n	a224 <memset+0x36>
		*(d_word++) = c_word;
    a216:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    a21a:	3a04      	subs	r2, #4
    a21c:	e7f9      	b.n	a212 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    a21e:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    a222:	3a01      	subs	r2, #1
	while (n > 0) {
    a224:	2a00      	cmp	r2, #0
    a226:	d1fa      	bne.n	a21e <memset+0x30>
	}

	return buf;
}
    a228:	4770      	bx	lr

0000a22a <_stdout_hook_default>:
}
    a22a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a22e:	4770      	bx	lr

0000a230 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a230:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    a234:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a238:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    a23c:	2a08      	cmp	r2, #8
    a23e:	d001      	beq.n	a244 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    a240:	2000      	movs	r0, #0
    a242:	4770      	bx	lr
                switch(var2)
    a244:	2b02      	cmp	r3, #2
    a246:	d001      	beq.n	a24c <nrf52_errata_197+0x1c>
                        return false;
    a248:	2000      	movs	r0, #0
    a24a:	4770      	bx	lr
                        return true;
    a24c:	2001      	movs	r0, #1
    #endif
}
    a24e:	4770      	bx	lr

0000a250 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    a250:	2806      	cmp	r0, #6
    a252:	d000      	beq.n	a256 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    a254:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    a256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a25a:	2201      	movs	r2, #1
    a25c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    a260:	f3bf 8f4f 	dsb	sy
        __WFE();
    a264:	bf20      	wfe
    while (true)
    a266:	e7fd      	b.n	a264 <pm_state_set+0x14>

0000a268 <pm_state_exit_post_ops>:
    a268:	2300      	movs	r3, #0
    a26a:	f383 8811 	msr	BASEPRI, r3
    a26e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    a272:	4770      	bx	lr

0000a274 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    a274:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    a276:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a27a:	0089      	lsls	r1, r1, #2
    a27c:	3140      	adds	r1, #64	; 0x40
}
    a27e:	4408      	add	r0, r1
    a280:	4770      	bx	lr

0000a282 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    a282:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    a284:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    a288:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    a28c:	4770      	bx	lr

0000a28e <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    a28e:	6900      	ldr	r0, [r0, #16]
}
    a290:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    a294:	4770      	bx	lr

0000a296 <set_off_state>:
	__asm__ volatile(
    a296:	f04f 0320 	mov.w	r3, #32
    a29a:	f3ef 8211 	mrs	r2, BASEPRI
    a29e:	f383 8812 	msr	BASEPRI_MAX, r3
    a2a2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a2a6:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    a2a8:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    a2ac:	d001      	beq.n	a2b2 <set_off_state+0x1c>
    a2ae:	428b      	cmp	r3, r1
    a2b0:	d107      	bne.n	a2c2 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    a2b2:	2301      	movs	r3, #1
    a2b4:	6003      	str	r3, [r0, #0]
	int err = 0;
    a2b6:	2000      	movs	r0, #0
	__asm__ volatile(
    a2b8:	f382 8811 	msr	BASEPRI, r2
    a2bc:	f3bf 8f6f 	isb	sy
}
    a2c0:	4770      	bx	lr
		err = -EPERM;
    a2c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a2c6:	e7f7      	b.n	a2b8 <set_off_state+0x22>

0000a2c8 <set_starting_state>:
	__asm__ volatile(
    a2c8:	f04f 0320 	mov.w	r3, #32
    a2cc:	f3ef 8211 	mrs	r2, BASEPRI
    a2d0:	f383 8812 	msr	BASEPRI_MAX, r3
    a2d4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a2d8:	6803      	ldr	r3, [r0, #0]
    a2da:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    a2de:	f003 0307 	and.w	r3, r3, #7
    a2e2:	2b01      	cmp	r3, #1
    a2e4:	d008      	beq.n	a2f8 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    a2e6:	458c      	cmp	ip, r1
    a2e8:	d009      	beq.n	a2fe <set_starting_state+0x36>
		err = -EPERM;
    a2ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    a2ee:	f382 8811 	msr	BASEPRI, r2
    a2f2:	f3bf 8f6f 	isb	sy
}
    a2f6:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    a2f8:	6001      	str	r1, [r0, #0]
	int err = 0;
    a2fa:	2000      	movs	r0, #0
    a2fc:	e7f7      	b.n	a2ee <set_starting_state+0x26>
		err = -EALREADY;
    a2fe:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a302:	e7f4      	b.n	a2ee <set_starting_state+0x26>

0000a304 <set_on_state>:
	__asm__ volatile(
    a304:	f04f 0320 	mov.w	r3, #32
    a308:	f3ef 8211 	mrs	r2, BASEPRI
    a30c:	f383 8812 	msr	BASEPRI_MAX, r3
    a310:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    a314:	6803      	ldr	r3, [r0, #0]
    a316:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a31a:	f043 0302 	orr.w	r3, r3, #2
    a31e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    a320:	f382 8811 	msr	BASEPRI, r2
    a324:	f3bf 8f6f 	isb	sy
}
    a328:	4770      	bx	lr

0000a32a <clkstarted_handle>:
{
    a32a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a32c:	4606      	mov	r6, r0
    a32e:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    a330:	f7ff ffa0 	bl	a274 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    a334:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    a336:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    a338:	2300      	movs	r3, #0
    a33a:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    a33e:	f7ff ffe1 	bl	a304 <set_on_state>
	if (callback) {
    a342:	b11d      	cbz	r5, a34c <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    a344:	463a      	mov	r2, r7
    a346:	4621      	mov	r1, r4
    a348:	4630      	mov	r0, r6
    a34a:	47a8      	blx	r5
}
    a34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a34e <async_start>:
{
    a34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a352:	4606      	mov	r6, r0
    a354:	4690      	mov	r8, r2
    a356:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    a358:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    a35a:	4629      	mov	r1, r5
    a35c:	f7ff ff8a 	bl	a274 <get_sub_data>
    a360:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    a362:	9906      	ldr	r1, [sp, #24]
    a364:	3008      	adds	r0, #8
    a366:	f7ff ffaf 	bl	a2c8 <set_starting_state>
	if (err < 0) {
    a36a:	2800      	cmp	r0, #0
    a36c:	db09      	blt.n	a382 <async_start+0x34>
	subdata->cb = cb;
    a36e:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    a372:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    a374:	4629      	mov	r1, r5
    a376:	4630      	mov	r0, r6
    a378:	f7ff ff83 	bl	a282 <get_sub_config>
    a37c:	6803      	ldr	r3, [r0, #0]
    a37e:	4798      	blx	r3
	return 0;
    a380:	2000      	movs	r0, #0
}
    a382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a386 <api_start>:
{
    a386:	b510      	push	{r4, lr}
    a388:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    a38a:	2480      	movs	r4, #128	; 0x80
    a38c:	9400      	str	r4, [sp, #0]
    a38e:	f7ff ffde 	bl	a34e <async_start>
}
    a392:	b002      	add	sp, #8
    a394:	bd10      	pop	{r4, pc}

0000a396 <onoff_started_callback>:
{
    a396:	b510      	push	{r4, lr}
    a398:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    a39a:	b2c9      	uxtb	r1, r1
    a39c:	f7ff ff77 	bl	a28e <get_onoff_manager>
	notify(mgr, 0);
    a3a0:	2100      	movs	r1, #0
    a3a2:	47a0      	blx	r4
}
    a3a4:	bd10      	pop	{r4, pc}

0000a3a6 <hfclk_start>:
{
    a3a6:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    a3a8:	2001      	movs	r0, #1
    a3aa:	f7fb fa67 	bl	587c <nrfx_clock_start>
}
    a3ae:	bd08      	pop	{r3, pc}

0000a3b0 <lfclk_start>:
{
    a3b0:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    a3b2:	2000      	movs	r0, #0
    a3b4:	f7fb fa62 	bl	587c <nrfx_clock_start>
}
    a3b8:	bd08      	pop	{r3, pc}

0000a3ba <hfclk_stop>:
{
    a3ba:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    a3bc:	2001      	movs	r0, #1
    a3be:	f7fb fad3 	bl	5968 <nrfx_clock_stop>
}
    a3c2:	bd08      	pop	{r3, pc}

0000a3c4 <lfclk_stop>:
{
    a3c4:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    a3c6:	2000      	movs	r0, #0
    a3c8:	f7fb face 	bl	5968 <nrfx_clock_stop>
}
    a3cc:	bd08      	pop	{r3, pc}

0000a3ce <api_stop>:
{
    a3ce:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    a3d0:	2280      	movs	r2, #128	; 0x80
    a3d2:	f7f9 fbd3 	bl	3b7c <stop>
}
    a3d6:	bd08      	pop	{r3, pc}

0000a3d8 <blocking_start_callback>:
{
    a3d8:	b508      	push	{r3, lr}
    a3da:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    a3dc:	f7fd fac8 	bl	7970 <z_impl_k_sem_give>
}
    a3e0:	bd08      	pop	{r3, pc}

0000a3e2 <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    a3e2:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    a3e6:	f020 0001 	bic.w	r0, r0, #1
    a3ea:	0540      	lsls	r0, r0, #21
    a3ec:	0d40      	lsrs	r0, r0, #21
    a3ee:	f240 2306 	movw	r3, #518	; 0x206
    a3f2:	4298      	cmp	r0, r3
    a3f4:	d033      	beq.n	a45e <get_drive+0x7c>
    a3f6:	d816      	bhi.n	a426 <get_drive+0x44>
    a3f8:	2806      	cmp	r0, #6
    a3fa:	d02c      	beq.n	a456 <get_drive+0x74>
    a3fc:	d906      	bls.n	a40c <get_drive+0x2a>
    a3fe:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    a402:	d10d      	bne.n	a420 <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    a404:	2301      	movs	r3, #1
    a406:	700b      	strb	r3, [r1, #0]
	int err = 0;
    a408:	2000      	movs	r0, #0
		break;
    a40a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    a40c:	b300      	cbz	r0, a450 <get_drive+0x6e>
    a40e:	2802      	cmp	r0, #2
    a410:	d103      	bne.n	a41a <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    a412:	2304      	movs	r3, #4
    a414:	700b      	strb	r3, [r1, #0]
	int err = 0;
    a416:	2000      	movs	r0, #0
		break;
    a418:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    a41a:	f06f 0015 	mvn.w	r0, #21
    a41e:	4770      	bx	lr
    a420:	f06f 0015 	mvn.w	r0, #21
    a424:	4770      	bx	lr
    a426:	f240 4302 	movw	r3, #1026	; 0x402
    a42a:	4298      	cmp	r0, r3
    a42c:	d01b      	beq.n	a466 <get_drive+0x84>
    a42e:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    a432:	d103      	bne.n	a43c <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    a434:	2303      	movs	r3, #3
    a436:	700b      	strb	r3, [r1, #0]
	int err = 0;
    a438:	2000      	movs	r0, #0
		break;
    a43a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    a43c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    a440:	d103      	bne.n	a44a <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    a442:	2302      	movs	r3, #2
    a444:	700b      	strb	r3, [r1, #0]
	int err = 0;
    a446:	2000      	movs	r0, #0
		break;
    a448:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    a44a:	f06f 0015 	mvn.w	r0, #21
    a44e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    a450:	2000      	movs	r0, #0
    a452:	7008      	strb	r0, [r1, #0]
		break;
    a454:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    a456:	2306      	movs	r3, #6
    a458:	700b      	strb	r3, [r1, #0]
	int err = 0;
    a45a:	2000      	movs	r0, #0
		break;
    a45c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    a45e:	2307      	movs	r3, #7
    a460:	700b      	strb	r3, [r1, #0]
	int err = 0;
    a462:	2000      	movs	r0, #0
		break;
    a464:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    a466:	2305      	movs	r3, #5
    a468:	700b      	strb	r3, [r1, #0]
	int err = 0;
    a46a:	2000      	movs	r0, #0
}
    a46c:	4770      	bx	lr

0000a46e <get_pull>:
	if (flags & GPIO_PULL_UP) {
    a46e:	f010 0f10 	tst.w	r0, #16
    a472:	d104      	bne.n	a47e <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    a474:	f010 0f20 	tst.w	r0, #32
    a478:	d103      	bne.n	a482 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    a47a:	2000      	movs	r0, #0
    a47c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    a47e:	2003      	movs	r0, #3
    a480:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    a482:	2001      	movs	r0, #1
}
    a484:	4770      	bx	lr

0000a486 <gpio_nrfx_port_get_raw>:
	return port->config;
    a486:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a488:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    a48a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    a48e:	600b      	str	r3, [r1, #0]
}
    a490:	2000      	movs	r0, #0
    a492:	4770      	bx	lr

0000a494 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    a494:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a496:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    a498:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    a49c:	4042      	eors	r2, r0
    a49e:	400a      	ands	r2, r1
    a4a0:	4042      	eors	r2, r0
    p_reg->OUT = value;
    a4a2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    a4a6:	2000      	movs	r0, #0
    a4a8:	4770      	bx	lr

0000a4aa <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    a4aa:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a4ac:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    a4ae:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    a4b2:	2000      	movs	r0, #0
    a4b4:	4770      	bx	lr

0000a4b6 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    a4b6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a4b8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    a4ba:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    a4be:	2000      	movs	r0, #0
    a4c0:	4770      	bx	lr

0000a4c2 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    a4c2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a4c4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    a4c6:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    a4ca:	404b      	eors	r3, r1
    p_reg->OUT = value;
    a4cc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    a4d0:	2000      	movs	r0, #0
    a4d2:	4770      	bx	lr

0000a4d4 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    a4d4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    a4d8:	d007      	beq.n	a4ea <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    a4da:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    a4de:	d00d      	beq.n	a4fc <get_trigger+0x28>
    a4e0:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    a4e4:	d008      	beq.n	a4f8 <get_trigger+0x24>
    a4e6:	2001      	movs	r0, #1
}
    a4e8:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    a4ea:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    a4ee:	d001      	beq.n	a4f4 <get_trigger+0x20>
    a4f0:	2005      	movs	r0, #5
    a4f2:	4770      	bx	lr
    a4f4:	2004      	movs	r0, #4
    a4f6:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    a4f8:	2002      	movs	r0, #2
    a4fa:	4770      	bx	lr
    a4fc:	2003      	movs	r0, #3
    a4fe:	4770      	bx	lr

0000a500 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    a500:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    a502:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    a504:	f04f 0120 	mov.w	r1, #32
    a508:	f3ef 8211 	mrs	r2, BASEPRI
    a50c:	f381 8812 	msr	BASEPRI_MAX, r1
    a510:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a514:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    a518:	b131      	cbz	r1, a528 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a51a:	2100      	movs	r1, #0
    a51c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    a520:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a524:	2101      	movs	r1, #1
    a526:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    a528:	f382 8811 	msr	BASEPRI, r2
    a52c:	f3bf 8f6f 	isb	sy
}
    a530:	4770      	bx	lr

0000a532 <uarte_nrfx_isr_int>:
{
    a532:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    a534:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    a536:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    a538:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    a53c:	f413 7f80 	tst.w	r3, #256	; 0x100
    a540:	d002      	beq.n	a548 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a542:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a546:	b9d3      	cbnz	r3, a57e <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a548:	686b      	ldr	r3, [r5, #4]
    a54a:	f013 0f10 	tst.w	r3, #16
    a54e:	d015      	beq.n	a57c <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    a550:	f04f 0220 	mov.w	r2, #32
    a554:	f3ef 8311 	mrs	r3, BASEPRI
    a558:	f382 8812 	msr	BASEPRI_MAX, r2
    a55c:	f3bf 8f6f 	isb	sy
    a560:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    a564:	b112      	cbz	r2, a56c <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    a566:	2200      	movs	r2, #0
    a568:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    a56c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    a570:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    a574:	f383 8811 	msr	BASEPRI, r3
    a578:	f3bf 8f6f 	isb	sy
}
    a57c:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    a57e:	f7ff ffbf 	bl	a500 <endtx_isr>
    a582:	e7e1      	b.n	a548 <uarte_nrfx_isr_int+0x16>

0000a584 <uarte_nrfx_configure>:
{
    a584:	b570      	push	{r4, r5, r6, lr}
    a586:	b082      	sub	sp, #8
    a588:	4606      	mov	r6, r0
    a58a:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    a58c:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    a58e:	794b      	ldrb	r3, [r1, #5]
    a590:	2b01      	cmp	r3, #1
    a592:	d006      	beq.n	a5a2 <uarte_nrfx_configure+0x1e>
    a594:	2b03      	cmp	r3, #3
    a596:	d011      	beq.n	a5bc <uarte_nrfx_configure+0x38>
    a598:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    a59c:	4618      	mov	r0, r3
    a59e:	b002      	add	sp, #8
    a5a0:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    a5a2:	2300      	movs	r3, #0
    a5a4:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    a5a8:	79a3      	ldrb	r3, [r4, #6]
    a5aa:	2b03      	cmp	r3, #3
    a5ac:	d137      	bne.n	a61e <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    a5ae:	79e3      	ldrb	r3, [r4, #7]
    a5b0:	b143      	cbz	r3, a5c4 <uarte_nrfx_configure+0x40>
    a5b2:	2b01      	cmp	r3, #1
    a5b4:	d010      	beq.n	a5d8 <uarte_nrfx_configure+0x54>
    a5b6:	f06f 0385 	mvn.w	r3, #133	; 0x85
    a5ba:	e7ef      	b.n	a59c <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    a5bc:	2310      	movs	r3, #16
    a5be:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    a5c2:	e7f1      	b.n	a5a8 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    a5c4:	2300      	movs	r3, #0
    a5c6:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    a5ca:	7923      	ldrb	r3, [r4, #4]
    a5cc:	b143      	cbz	r3, a5e0 <uarte_nrfx_configure+0x5c>
    a5ce:	2b02      	cmp	r3, #2
    a5d0:	d021      	beq.n	a616 <uarte_nrfx_configure+0x92>
    a5d2:	f06f 0385 	mvn.w	r3, #133	; 0x85
    a5d6:	e7e1      	b.n	a59c <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    a5d8:	2301      	movs	r3, #1
    a5da:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    a5de:	e7f4      	b.n	a5ca <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    a5e0:	2300      	movs	r3, #0
    a5e2:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    a5e6:	6821      	ldr	r1, [r4, #0]
    a5e8:	4630      	mov	r0, r6
    a5ea:	f7f9 fecf 	bl	438c <baudrate_set>
    a5ee:	4603      	mov	r3, r0
    a5f0:	b9c0      	cbnz	r0, a624 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    a5f2:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    a5f4:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    a5f6:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    a5fa:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    a5fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
    a602:	4331      	orrs	r1, r6
    a604:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    a606:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    a60a:	3504      	adds	r5, #4
    a60c:	e894 0003 	ldmia.w	r4, {r0, r1}
    a610:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    a614:	e7c2      	b.n	a59c <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    a616:	230e      	movs	r3, #14
    a618:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    a61c:	e7e3      	b.n	a5e6 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    a61e:	f06f 0385 	mvn.w	r3, #133	; 0x85
    a622:	e7bb      	b.n	a59c <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    a624:	f06f 0385 	mvn.w	r3, #133	; 0x85
    a628:	e7b8      	b.n	a59c <uarte_nrfx_configure+0x18>

0000a62a <uarte_nrfx_config_get>:
{
    a62a:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    a62c:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    a62e:	3304      	adds	r3, #4
    a630:	e893 0003 	ldmia.w	r3, {r0, r1}
    a634:	e882 0003 	stmia.w	r2, {r0, r1}
}
    a638:	2000      	movs	r0, #0
    a63a:	4770      	bx	lr

0000a63c <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    a63c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    a63e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    a640:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    a644:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    a648:	4770      	bx	lr

0000a64a <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    a64a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    a64c:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    a64e:	685b      	ldr	r3, [r3, #4]
    a650:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a654:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    a658:	b929      	cbnz	r1, a666 <is_tx_ready+0x1c>
    a65a:	b933      	cbnz	r3, a66a <is_tx_ready+0x20>
    a65c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    a660:	b92b      	cbnz	r3, a66e <is_tx_ready+0x24>
    a662:	2000      	movs	r0, #0
    a664:	4770      	bx	lr
    a666:	2001      	movs	r0, #1
    a668:	4770      	bx	lr
    a66a:	2000      	movs	r0, #0
    a66c:	4770      	bx	lr
    a66e:	2001      	movs	r0, #1
}
    a670:	4770      	bx	lr

0000a672 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    a672:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    a674:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a676:	2208      	movs	r2, #8
    a678:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    a67c:	4770      	bx	lr

0000a67e <tx_start>:
{
    a67e:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    a680:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    a682:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a684:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a688:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a68c:	2200      	movs	r2, #0
    a68e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    a692:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    a696:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    a69a:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a69e:	685b      	ldr	r3, [r3, #4]
    a6a0:	f013 0f10 	tst.w	r3, #16
    a6a4:	d102      	bne.n	a6ac <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a6a6:	2301      	movs	r3, #1
    a6a8:	60a3      	str	r3, [r4, #8]
}
    a6aa:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    a6ac:	2101      	movs	r1, #1
    a6ae:	f7ff ffe0 	bl	a672 <uarte_enable>
    p_reg->INTENSET = mask;
    a6b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    a6b6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    a6ba:	e7f4      	b.n	a6a6 <tx_start+0x28>

0000a6bc <uarte_nrfx_poll_in>:
{
    a6bc:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    a6be:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    a6c0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    a6c2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a6c4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    a6c8:	b152      	cbz	r2, a6e0 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    a6ca:	7c62      	ldrb	r2, [r4, #17]
    a6cc:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a6ce:	2000      	movs	r0, #0
    a6d0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    a6d4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a6d8:	2201      	movs	r2, #1
    a6da:	601a      	str	r2, [r3, #0]
}
    a6dc:	bc10      	pop	{r4}
    a6de:	4770      	bx	lr
		return -1;
    a6e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a6e4:	e7fa      	b.n	a6dc <uarte_nrfx_poll_in+0x20>

0000a6e6 <wait_tx_ready>:
{
    a6e6:	b570      	push	{r4, r5, r6, lr}
    a6e8:	4606      	mov	r6, r0
    a6ea:	e014      	b.n	a716 <wait_tx_ready+0x30>
		if (res) {
    a6ec:	b17d      	cbz	r5, a70e <wait_tx_ready+0x28>
	__asm__ volatile(
    a6ee:	f04f 0320 	mov.w	r3, #32
    a6f2:	f3ef 8411 	mrs	r4, BASEPRI
    a6f6:	f383 8812 	msr	BASEPRI_MAX, r3
    a6fa:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    a6fe:	4630      	mov	r0, r6
    a700:	f7ff ffa3 	bl	a64a <is_tx_ready>
    a704:	b9a0      	cbnz	r0, a730 <wait_tx_ready+0x4a>
	__asm__ volatile(
    a706:	f384 8811 	msr	BASEPRI, r4
    a70a:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    a70e:	2021      	movs	r0, #33	; 0x21
    a710:	2100      	movs	r1, #0
    a712:	f7fe fb53 	bl	8dbc <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    a716:	2464      	movs	r4, #100	; 0x64
    a718:	4630      	mov	r0, r6
    a71a:	f7ff ff96 	bl	a64a <is_tx_ready>
    a71e:	4605      	mov	r5, r0
    a720:	2800      	cmp	r0, #0
    a722:	d1e3      	bne.n	a6ec <wait_tx_ready+0x6>
    a724:	2001      	movs	r0, #1
    a726:	f000 f9c1 	bl	aaac <nrfx_busy_wait>
    a72a:	3c01      	subs	r4, #1
    a72c:	d1f4      	bne.n	a718 <wait_tx_ready+0x32>
    a72e:	e7dd      	b.n	a6ec <wait_tx_ready+0x6>
}
    a730:	4620      	mov	r0, r4
    a732:	bd70      	pop	{r4, r5, r6, pc}

0000a734 <z_log_msg2_runtime_create>:
{
    a734:	b510      	push	{r4, lr}
    a736:	b086      	sub	sp, #24
	va_start(ap, fmt);
    a738:	ac0b      	add	r4, sp, #44	; 0x2c
    a73a:	9405      	str	r4, [sp, #20]
    a73c:	9403      	str	r4, [sp, #12]
    a73e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a740:	9402      	str	r4, [sp, #8]
    a742:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a744:	9401      	str	r4, [sp, #4]
    a746:	9c08      	ldr	r4, [sp, #32]
    a748:	9400      	str	r4, [sp, #0]
    a74a:	f7f7 fe2b 	bl	23a4 <z_impl_z_log_msg2_runtime_vcreate>
}
    a74e:	b006      	add	sp, #24
    a750:	bd10      	pop	{r4, pc}

0000a752 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    a752:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a756:	b083      	sub	sp, #12
    a758:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    a75a:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    a75c:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    a75e:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    a762:	2100      	movs	r1, #0
    a764:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    a768:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    a76c:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    a770:	aa01      	add	r2, sp, #4
    a772:	4648      	mov	r0, r9
    a774:	f000 f8e6 	bl	a944 <pinctrl_lookup_state>
	if (ret < 0) {
    a778:	1e04      	subs	r4, r0, #0
    a77a:	db07      	blt.n	a78c <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    a77c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    a77e:	f8d9 2000 	ldr.w	r2, [r9]
    a782:	7919      	ldrb	r1, [r3, #4]
    a784:	6818      	ldr	r0, [r3, #0]
    a786:	f7fa f9c3 	bl	4b10 <pinctrl_configure_pins>
    a78a:	4604      	mov	r4, r0
	if (err < 0) {
    a78c:	2c00      	cmp	r4, #0
    a78e:	db35      	blt.n	a7fc <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    a790:	f108 0104 	add.w	r1, r8, #4
    a794:	4628      	mov	r0, r5
    a796:	f7ff fef5 	bl	a584 <uarte_nrfx_configure>
	if (err) {
    a79a:	4604      	mov	r4, r0
    a79c:	bb70      	cbnz	r0, a7fc <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    a79e:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    a7a0:	f013 0f02 	tst.w	r3, #2
    a7a4:	d12e      	bne.n	a804 <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a7a6:	2308      	movs	r3, #8
    a7a8:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    a7ac:	7a3b      	ldrb	r3, [r7, #8]
    a7ae:	b95b      	cbnz	r3, a7c8 <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a7b0:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    a7b4:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    a7b8:	f108 0311 	add.w	r3, r8, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    a7bc:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    a7c0:	2301      	movs	r3, #1
    a7c2:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a7c6:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    a7c8:	687b      	ldr	r3, [r7, #4]
    a7ca:	f013 0f02 	tst.w	r3, #2
    a7ce:	d103      	bne.n	a7d8 <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
    a7d0:	f44f 7380 	mov.w	r3, #256	; 0x100
    a7d4:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a7d8:	687b      	ldr	r3, [r7, #4]
    a7da:	f013 0f10 	tst.w	r3, #16
    a7de:	d003      	beq.n	a7e8 <uarte_instance_init+0x96>
    a7e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    a7e4:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    a7e8:	f108 0310 	add.w	r3, r8, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a7ec:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a7f0:	2300      	movs	r3, #0
    a7f2:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a7f6:	2301      	movs	r3, #1
    a7f8:	60b3      	str	r3, [r6, #8]
    a7fa:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    a7fc:	4620      	mov	r0, r4
    a7fe:	b003      	add	sp, #12
    a800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    a804:	4641      	mov	r1, r8
    a806:	4630      	mov	r0, r6
    a808:	f7f9 fea0 	bl	454c <endtx_stoptx_ppi_init>
		if (err < 0) {
    a80c:	2800      	cmp	r0, #0
    a80e:	daca      	bge.n	a7a6 <uarte_instance_init+0x54>
			return err;
    a810:	4604      	mov	r4, r0
    a812:	e7f3      	b.n	a7fc <uarte_instance_init+0xaa>

0000a814 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    a814:	b510      	push	{r4, lr}
    a816:	4604      	mov	r4, r0
    a818:	2200      	movs	r2, #0
    a81a:	2101      	movs	r1, #1
    a81c:	2002      	movs	r0, #2
    a81e:	f7f8 fa4b 	bl	2cb8 <z_arm_irq_priority_set>
    a822:	2002      	movs	r0, #2
    a824:	f7f8 fa2c 	bl	2c80 <arch_irq_enable>
    a828:	2100      	movs	r1, #0
    a82a:	4620      	mov	r0, r4
    a82c:	f7ff ff91 	bl	a752 <uarte_instance_init>
    a830:	bd10      	pop	{r4, pc}

0000a832 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    a832:	b510      	push	{r4, lr}
    a834:	4604      	mov	r4, r0
    a836:	2200      	movs	r2, #0
    a838:	2101      	movs	r1, #1
    a83a:	2028      	movs	r0, #40	; 0x28
    a83c:	f7f8 fa3c 	bl	2cb8 <z_arm_irq_priority_set>
    a840:	2028      	movs	r0, #40	; 0x28
    a842:	f7f8 fa1d 	bl	2c80 <arch_irq_enable>
    a846:	2100      	movs	r1, #0
    a848:	4620      	mov	r0, r4
    a84a:	f7ff ff82 	bl	a752 <uarte_instance_init>
    a84e:	bd10      	pop	{r4, pc}

0000a850 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    a850:	4770      	bx	lr

0000a852 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    a852:	1a40      	subs	r0, r0, r1
}
    a854:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a858:	4770      	bx	lr

0000a85a <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    a85a:	f100 0350 	add.w	r3, r0, #80	; 0x50
    a85e:	009b      	lsls	r3, r3, #2
    a860:	b29b      	uxth	r3, r3
    a862:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a866:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    a86a:	2200      	movs	r2, #0
    a86c:	601a      	str	r2, [r3, #0]
    a86e:	681b      	ldr	r3, [r3, #0]
}
    a870:	4770      	bx	lr

0000a872 <absolute_time_to_cc>:
}
    a872:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a876:	4770      	bx	lr

0000a878 <full_int_lock>:
	__asm__ volatile(
    a878:	f04f 0320 	mov.w	r3, #32
    a87c:	f3ef 8011 	mrs	r0, BASEPRI
    a880:	f383 8812 	msr	BASEPRI_MAX, r3
    a884:	f3bf 8f6f 	isb	sy
}
    a888:	4770      	bx	lr

0000a88a <full_int_unlock>:
	__asm__ volatile(
    a88a:	f380 8811 	msr	BASEPRI, r0
    a88e:	f3bf 8f6f 	isb	sy
}
    a892:	4770      	bx	lr

0000a894 <set_absolute_alarm>:
{
    a894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a896:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    a898:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    a89c:	f7f9 fe94 	bl	45c8 <get_comparator>
    a8a0:	4607      	mov	r7, r0
    a8a2:	e019      	b.n	a8d8 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    a8a4:	2013      	movs	r0, #19
    a8a6:	f000 fa24 	bl	acf2 <z_impl_k_busy_wait>
}
    a8aa:	e022      	b.n	a8f2 <set_absolute_alarm+0x5e>
		event_clear(chan);
    a8ac:	4630      	mov	r0, r6
    a8ae:	f7ff ffd4 	bl	a85a <event_clear>
		event_enable(chan);
    a8b2:	4630      	mov	r0, r6
    a8b4:	f7f9 fe90 	bl	45d8 <event_enable>
		set_comparator(chan, cc_val);
    a8b8:	4629      	mov	r1, r5
    a8ba:	4630      	mov	r0, r6
    a8bc:	f7f9 fe7a 	bl	45b4 <set_comparator>
		now2 = counter();
    a8c0:	f7f9 fe9e 	bl	4600 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    a8c4:	4284      	cmp	r4, r0
    a8c6:	d01e      	beq.n	a906 <set_absolute_alarm+0x72>
    a8c8:	1c81      	adds	r1, r0, #2
    a8ca:	4628      	mov	r0, r5
    a8cc:	f7ff ffc1 	bl	a852 <counter_sub>
	} while ((now2 != now) &&
    a8d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a8d4:	d917      	bls.n	a906 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    a8d6:	462f      	mov	r7, r5
		now = counter();
    a8d8:	f7f9 fe92 	bl	4600 <counter>
    a8dc:	4604      	mov	r4, r0
		set_comparator(chan, now);
    a8de:	4601      	mov	r1, r0
    a8e0:	4630      	mov	r0, r6
    a8e2:	f7f9 fe67 	bl	45b4 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    a8e6:	4621      	mov	r1, r4
    a8e8:	4638      	mov	r0, r7
    a8ea:	f7ff ffb2 	bl	a852 <counter_sub>
    a8ee:	2801      	cmp	r0, #1
    a8f0:	d0d8      	beq.n	a8a4 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    a8f2:	1ca7      	adds	r7, r4, #2
    a8f4:	4639      	mov	r1, r7
    a8f6:	4628      	mov	r0, r5
    a8f8:	f7ff ffab 	bl	a852 <counter_sub>
    a8fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a900:	d9d4      	bls.n	a8ac <set_absolute_alarm+0x18>
			cc_val = now + 2;
    a902:	463d      	mov	r5, r7
    a904:	e7d2      	b.n	a8ac <set_absolute_alarm+0x18>
}
    a906:	4628      	mov	r0, r5
    a908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a90a <compare_set>:
{
    a90a:	b5f0      	push	{r4, r5, r6, r7, lr}
    a90c:	b083      	sub	sp, #12
    a90e:	4604      	mov	r4, r0
    a910:	4617      	mov	r7, r2
    a912:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    a914:	f7f9 fe7a 	bl	460c <compare_int_lock>
    a918:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    a91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a91c:	9301      	str	r3, [sp, #4]
    a91e:	9b08      	ldr	r3, [sp, #32]
    a920:	9300      	str	r3, [sp, #0]
    a922:	463a      	mov	r2, r7
    a924:	462b      	mov	r3, r5
    a926:	4620      	mov	r0, r4
    a928:	f7f9 ff60 	bl	47ec <compare_set_nolocks>
    a92c:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    a92e:	4631      	mov	r1, r6
    a930:	4620      	mov	r0, r4
    a932:	f7f9 fecf 	bl	46d4 <compare_int_unlock>
}
    a936:	4628      	mov	r0, r5
    a938:	b003      	add	sp, #12
    a93a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a93c <sys_clock_cycle_get_32>:
{
    a93c:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    a93e:	f7f9 ff35 	bl	47ac <z_nrf_rtc_timer_read>
}
    a942:	bd08      	pop	{r3, pc}

0000a944 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    a944:	b410      	push	{r4}
	*state = &config->states[0];
    a946:	6843      	ldr	r3, [r0, #4]
    a948:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    a94a:	e001      	b.n	a950 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    a94c:	3408      	adds	r4, #8
    a94e:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    a950:	6814      	ldr	r4, [r2, #0]
    a952:	7a03      	ldrb	r3, [r0, #8]
    a954:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    a958:	3b01      	subs	r3, #1
    a95a:	f8d0 c004 	ldr.w	ip, [r0, #4]
    a95e:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    a962:	429c      	cmp	r4, r3
    a964:	d804      	bhi.n	a970 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    a966:	7963      	ldrb	r3, [r4, #5]
    a968:	428b      	cmp	r3, r1
    a96a:	d1ef      	bne.n	a94c <pinctrl_lookup_state+0x8>
			return 0;
    a96c:	2000      	movs	r0, #0
    a96e:	e001      	b.n	a974 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    a970:	f06f 0001 	mvn.w	r0, #1
}
    a974:	bc10      	pop	{r4}
    a976:	4770      	bx	lr

0000a978 <z_log_msg2_runtime_create>:
{
    a978:	b510      	push	{r4, lr}
    a97a:	b086      	sub	sp, #24
	va_start(ap, fmt);
    a97c:	ac0b      	add	r4, sp, #44	; 0x2c
    a97e:	9405      	str	r4, [sp, #20]
    a980:	9403      	str	r4, [sp, #12]
    a982:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a984:	9402      	str	r4, [sp, #8]
    a986:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a988:	9401      	str	r4, [sp, #4]
    a98a:	9c08      	ldr	r4, [sp, #32]
    a98c:	9400      	str	r4, [sp, #0]
    a98e:	f7f7 fd09 	bl	23a4 <z_impl_z_log_msg2_runtime_vcreate>
}
    a992:	b006      	add	sp, #24
    a994:	bd10      	pop	{r4, pc}

0000a996 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    a996:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    a998:	f7fe febe 	bl	9718 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    a99c:	bd08      	pop	{r3, pc}

0000a99e <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    a99e:	b510      	push	{r4, lr}
    a9a0:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    a9a2:	f7f8 f833 	bl	2a0c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    a9a6:	f7f8 f8ef 	bl	2b88 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    a9aa:	4620      	mov	r0, r4
    a9ac:	f7ff fff3 	bl	a996 <hw_cc3xx_init_internal>
	return res;
}
    a9b0:	bd10      	pop	{r4, pc}

0000a9b2 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a9b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    a9b6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    a9ba:	2b08      	cmp	r3, #8
    a9bc:	d001      	beq.n	a9c2 <nrf52_errata_36+0x10>
        return false;
    a9be:	2000      	movs	r0, #0
    a9c0:	4770      	bx	lr
                        return true;
    a9c2:	2001      	movs	r0, #1
}
    a9c4:	4770      	bx	lr

0000a9c6 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a9c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    a9ca:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    a9ce:	2b08      	cmp	r3, #8
    a9d0:	d001      	beq.n	a9d6 <nrf52_errata_66+0x10>
        return false;
    a9d2:	2000      	movs	r0, #0
    a9d4:	4770      	bx	lr
                        return true;
    a9d6:	2001      	movs	r0, #1
}
    a9d8:	4770      	bx	lr

0000a9da <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a9da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    a9de:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a9e2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    a9e6:	2a08      	cmp	r2, #8
    a9e8:	d001      	beq.n	a9ee <nrf52_errata_98+0x14>
        return false;
    a9ea:	2000      	movs	r0, #0
    a9ec:	4770      	bx	lr
                switch(var2)
    a9ee:	2b00      	cmp	r3, #0
    a9f0:	d804      	bhi.n	a9fc <nrf52_errata_98+0x22>
    a9f2:	e8df f003 	tbb	[pc, r3]
    a9f6:	01          	.byte	0x01
    a9f7:	00          	.byte	0x00
    a9f8:	2001      	movs	r0, #1
    a9fa:	4770      	bx	lr
                        return false;
    a9fc:	2000      	movs	r0, #0
}
    a9fe:	4770      	bx	lr

0000aa00 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    aa00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    aa04:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    aa08:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    aa0c:	2a08      	cmp	r2, #8
    aa0e:	d001      	beq.n	aa14 <nrf52_errata_103+0x14>
        return false;
    aa10:	2000      	movs	r0, #0
    aa12:	4770      	bx	lr
                switch(var2)
    aa14:	2b00      	cmp	r3, #0
    aa16:	d804      	bhi.n	aa22 <nrf52_errata_103+0x22>
    aa18:	e8df f003 	tbb	[pc, r3]
    aa1c:	01          	.byte	0x01
    aa1d:	00          	.byte	0x00
    aa1e:	2001      	movs	r0, #1
    aa20:	4770      	bx	lr
                        return false;
    aa22:	2000      	movs	r0, #0
}
    aa24:	4770      	bx	lr

0000aa26 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    aa26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    aa2a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    aa2e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    aa32:	2a08      	cmp	r2, #8
    aa34:	d001      	beq.n	aa3a <nrf52_errata_115+0x14>
        return false;
    aa36:	2000      	movs	r0, #0
    aa38:	4770      	bx	lr
                switch(var2)
    aa3a:	2b00      	cmp	r3, #0
    aa3c:	d804      	bhi.n	aa48 <nrf52_errata_115+0x22>
    aa3e:	e8df f003 	tbb	[pc, r3]
    aa42:	01          	.byte	0x01
    aa43:	00          	.byte	0x00
    aa44:	2001      	movs	r0, #1
    aa46:	4770      	bx	lr
                        return false;
    aa48:	2000      	movs	r0, #0
}
    aa4a:	4770      	bx	lr

0000aa4c <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    aa4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    aa50:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    aa54:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    aa58:	2a08      	cmp	r2, #8
    aa5a:	d001      	beq.n	aa60 <nrf52_errata_120+0x14>
        return false;
    aa5c:	2000      	movs	r0, #0
    aa5e:	4770      	bx	lr
                switch(var2)
    aa60:	2b00      	cmp	r3, #0
    aa62:	d804      	bhi.n	aa6e <nrf52_errata_120+0x22>
    aa64:	e8df f003 	tbb	[pc, r3]
    aa68:	01          	.byte	0x01
    aa69:	00          	.byte	0x00
    aa6a:	2001      	movs	r0, #1
    aa6c:	4770      	bx	lr
                        return false;
    aa6e:	2000      	movs	r0, #0
}
    aa70:	4770      	bx	lr

0000aa72 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    aa72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    aa76:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    aa7a:	2b08      	cmp	r3, #8
    aa7c:	d001      	beq.n	aa82 <nrf52_errata_136+0x10>
        return false;
    aa7e:	2000      	movs	r0, #0
    aa80:	4770      	bx	lr
                        return true;
    aa82:	2001      	movs	r0, #1
}
    aa84:	4770      	bx	lr

0000aa86 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    aa86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    aa8a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    aa8e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    aa92:	2a08      	cmp	r2, #8
    aa94:	d001      	beq.n	aa9a <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    aa96:	2000      	movs	r0, #0
    aa98:	4770      	bx	lr
                switch(var2)
    aa9a:	2b04      	cmp	r3, #4
    aa9c:	d801      	bhi.n	aaa2 <nrf52_configuration_249+0x1c>
    aa9e:	2000      	movs	r0, #0
    aaa0:	4770      	bx	lr
                        return true;
    aaa2:	2001      	movs	r0, #1
    #endif
}
    aaa4:	4770      	bx	lr

0000aaa6 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    aaa6:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    aaa8:	4780      	blx	r0
}
    aaaa:	bd08      	pop	{r3, pc}

0000aaac <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    aaac:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    aaae:	f000 f920 	bl	acf2 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    aab2:	bd08      	pop	{r3, pc}

0000aab4 <clock_initial_lfclksrc_get>:
}
    aab4:	2000      	movs	r0, #0
    aab6:	4770      	bx	lr

0000aab8 <clock_lfclksrc_tweak>:
{
    aab8:	b538      	push	{r3, r4, r5, lr}
    aaba:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    aabc:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    aabe:	2b01      	cmp	r3, #1
    aac0:	d002      	beq.n	aac8 <clock_lfclksrc_tweak+0x10>
    aac2:	b933      	cbnz	r3, aad2 <clock_lfclksrc_tweak+0x1a>
    aac4:	2301      	movs	r3, #1
    aac6:	e000      	b.n	aaca <clock_lfclksrc_tweak+0x12>
    aac8:	2301      	movs	r3, #1
    if (!is_correct_clk)
    aaca:	461d      	mov	r5, r3
    aacc:	b11b      	cbz	r3, aad6 <clock_lfclksrc_tweak+0x1e>
}
    aace:	4628      	mov	r0, r5
    aad0:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    aad2:	2300      	movs	r3, #0
    aad4:	e7f9      	b.n	aaca <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    aad6:	2000      	movs	r0, #0
    aad8:	f7fa fdf2 	bl	56c0 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    aadc:	f7ff ffea 	bl	aab4 <clock_initial_lfclksrc_get>
    aae0:	6020      	str	r0, [r4, #0]
    aae2:	e7f4      	b.n	aace <clock_lfclksrc_tweak+0x16>

0000aae4 <pin_is_task_output>:
{
    aae4:	b510      	push	{r4, lr}
    aae6:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    aae8:	f7fa ffbc 	bl	5a64 <pin_is_output>
    aaec:	b128      	cbz	r0, aafa <pin_is_task_output+0x16>
    aaee:	4620      	mov	r0, r4
    aaf0:	f7fa ffa2 	bl	5a38 <pin_in_use_by_te>
    aaf4:	b118      	cbz	r0, aafe <pin_is_task_output+0x1a>
    aaf6:	2001      	movs	r0, #1
    aaf8:	e000      	b.n	aafc <pin_is_task_output+0x18>
    aafa:	2000      	movs	r0, #0
}
    aafc:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    aafe:	2000      	movs	r0, #0
    ab00:	e7fc      	b.n	aafc <pin_is_task_output+0x18>

0000ab02 <pin_is_input>:
{
    ab02:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    ab04:	f7fa ffae 	bl	5a64 <pin_is_output>
    ab08:	f080 0001 	eor.w	r0, r0, #1
}
    ab0c:	b2c0      	uxtb	r0, r0
    ab0e:	bd08      	pop	{r3, pc}

0000ab10 <gpiote_polarity_to_trigger>:
}
    ab10:	4770      	bx	lr

0000ab12 <gpiote_trigger_to_polarity>:
}
    ab12:	4770      	bx	lr

0000ab14 <is_level>:
}
    ab14:	2803      	cmp	r0, #3
    ab16:	bf94      	ite	ls
    ab18:	2000      	movls	r0, #0
    ab1a:	2001      	movhi	r0, #1
    ab1c:	4770      	bx	lr

0000ab1e <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    ab1e:	b508      	push	{r3, lr}
  _DoInit();
    ab20:	f7fb ff6a 	bl	69f8 <_DoInit>
}
    ab24:	bd08      	pop	{r3, pc}

0000ab26 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    ab26:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    ab28:	f7ff fff9 	bl	ab1e <SEGGER_RTT_Init>

	return 0;
}
    ab2c:	2000      	movs	r0, #0
    ab2e:	bd08      	pop	{r3, pc}

0000ab30 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    ab30:	b148      	cbz	r0, ab46 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    ab32:	68c3      	ldr	r3, [r0, #12]
    ab34:	8818      	ldrh	r0, [r3, #0]
    ab36:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ab3a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    ab3e:	bf14      	ite	ne
    ab40:	2000      	movne	r0, #0
    ab42:	2001      	moveq	r0, #1
    ab44:	4770      	bx	lr
		return false;
    ab46:	2000      	movs	r0, #0
}
    ab48:	4770      	bx	lr

0000ab4a <z_log_msg2_runtime_create>:
{
    ab4a:	b510      	push	{r4, lr}
    ab4c:	b086      	sub	sp, #24
	va_start(ap, fmt);
    ab4e:	ac0b      	add	r4, sp, #44	; 0x2c
    ab50:	9405      	str	r4, [sp, #20]
    ab52:	9403      	str	r4, [sp, #12]
    ab54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ab56:	9402      	str	r4, [sp, #8]
    ab58:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ab5a:	9401      	str	r4, [sp, #4]
    ab5c:	9c08      	ldr	r4, [sp, #32]
    ab5e:	9400      	str	r4, [sp, #0]
    ab60:	f7f7 fc20 	bl	23a4 <z_impl_z_log_msg2_runtime_vcreate>
}
    ab64:	b006      	add	sp, #24
    ab66:	bd10      	pop	{r4, pc}

0000ab68 <z_early_memset>:
{
    ab68:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    ab6a:	f7ff fb40 	bl	a1ee <memset>
}
    ab6e:	bd08      	pop	{r3, pc}

0000ab70 <z_early_memcpy>:
{
    ab70:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    ab72:	f7ff fb0d 	bl	a190 <memcpy>
}
    ab76:	bd08      	pop	{r3, pc}

0000ab78 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    ab78:	6902      	ldr	r2, [r0, #16]
    ab7a:	6943      	ldr	r3, [r0, #20]
    ab7c:	431a      	orrs	r2, r3
    ab7e:	f012 0203 	ands.w	r2, r2, #3
    ab82:	d10d      	bne.n	aba0 <create_free_list+0x28>
	slab->free_list = NULL;
    ab84:	2100      	movs	r1, #0
    ab86:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    ab88:	e005      	b.n	ab96 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    ab8a:	6981      	ldr	r1, [r0, #24]
    ab8c:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    ab8e:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    ab90:	6901      	ldr	r1, [r0, #16]
    ab92:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    ab94:	3201      	adds	r2, #1
    ab96:	68c1      	ldr	r1, [r0, #12]
    ab98:	4291      	cmp	r1, r2
    ab9a:	d8f6      	bhi.n	ab8a <create_free_list+0x12>
	return 0;
    ab9c:	2000      	movs	r0, #0
    ab9e:	4770      	bx	lr
		return -EINVAL;
    aba0:	f06f 0015 	mvn.w	r0, #21
}
    aba4:	4770      	bx	lr

0000aba6 <k_mem_slab_init>:
{
    aba6:	b510      	push	{r4, lr}
    aba8:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    abaa:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    abac:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    abae:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    abb0:	2300      	movs	r3, #0
    abb2:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    abb4:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    abb6:	f7ff ffdf 	bl	ab78 <create_free_list>
	if (rc < 0) {
    abba:	2800      	cmp	r0, #0
    abbc:	db01      	blt.n	abc2 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    abbe:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    abc0:	6064      	str	r4, [r4, #4]
}
    abc2:	bd10      	pop	{r4, pc}

0000abc4 <setup_thread_stack>:
{
    abc4:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    abc6:	3207      	adds	r2, #7
    abc8:	f022 0207 	bic.w	r2, r2, #7
    abcc:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    abd0:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    abd4:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    abd8:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    abdc:	2200      	movs	r2, #0
    abde:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    abe2:	18c8      	adds	r0, r1, r3
    abe4:	bc10      	pop	{r4}
    abe6:	4770      	bx	lr

0000abe8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    abe8:	f3ef 8005 	mrs	r0, IPSR
}
    abec:	3800      	subs	r0, #0
    abee:	bf18      	it	ne
    abf0:	2001      	movne	r0, #1
    abf2:	4770      	bx	lr

0000abf4 <k_thread_name_get>:
}
    abf4:	3074      	adds	r0, #116	; 0x74
    abf6:	4770      	bx	lr

0000abf8 <z_impl_k_thread_start>:
{
    abf8:	b508      	push	{r3, lr}
	z_sched_start(thread);
    abfa:	f7fd fb41 	bl	8280 <z_sched_start>
}
    abfe:	bd08      	pop	{r3, pc}

0000ac00 <z_init_thread_base>:
{
    ac00:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    ac02:	2400      	movs	r4, #0
    ac04:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    ac06:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    ac08:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    ac0a:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    ac0c:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    ac0e:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    ac10:	61c4      	str	r4, [r0, #28]
}
    ac12:	bc10      	pop	{r4}
    ac14:	4770      	bx	lr

0000ac16 <z_pm_save_idle_exit>:
{
    ac16:	b508      	push	{r3, lr}
	pm_system_resume();
    ac18:	f7f7 fd02 	bl	2620 <pm_system_resume>
	sys_clock_idle_exit();
    ac1c:	f7ff fe18 	bl	a850 <sys_clock_idle_exit>
}
    ac20:	bd08      	pop	{r3, pc}

0000ac22 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    ac22:	4288      	cmp	r0, r1
    ac24:	da00      	bge.n	ac28 <new_prio_for_inheritance+0x6>
    ac26:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    ac28:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    ac2c:	db01      	blt.n	ac32 <new_prio_for_inheritance+0x10>
    ac2e:	4608      	mov	r0, r1
    ac30:	4770      	bx	lr
    ac32:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    ac36:	4770      	bx	lr

0000ac38 <adjust_owner_prio>:
{
    ac38:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    ac3a:	6880      	ldr	r0, [r0, #8]
    ac3c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    ac40:	428b      	cmp	r3, r1
    ac42:	d101      	bne.n	ac48 <adjust_owner_prio+0x10>
	return false;
    ac44:	2000      	movs	r0, #0
}
    ac46:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    ac48:	f7fd fcd0 	bl	85ec <z_set_prio>
    ac4c:	e7fb      	b.n	ac46 <adjust_owner_prio+0xe>

0000ac4e <z_impl_k_mutex_init>:
{
    ac4e:	4603      	mov	r3, r0
	mutex->owner = NULL;
    ac50:	2000      	movs	r0, #0
    ac52:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    ac54:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    ac56:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    ac58:	605b      	str	r3, [r3, #4]
}
    ac5a:	4770      	bx	lr

0000ac5c <thread_active_elsewhere>:
}
    ac5c:	2000      	movs	r0, #0
    ac5e:	4770      	bx	lr

0000ac60 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    ac60:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    ac64:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    ac68:	4283      	cmp	r3, r0
    ac6a:	d001      	beq.n	ac70 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    ac6c:	1ac0      	subs	r0, r0, r3
    ac6e:	4770      	bx	lr
	return 0;
    ac70:	2000      	movs	r0, #0
}
    ac72:	4770      	bx	lr

0000ac74 <z_reschedule_irqlock>:
{
    ac74:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ac76:	4603      	mov	r3, r0
    ac78:	b920      	cbnz	r0, ac84 <z_reschedule_irqlock+0x10>
    ac7a:	f3ef 8205 	mrs	r2, IPSR
    ac7e:	b942      	cbnz	r2, ac92 <z_reschedule_irqlock+0x1e>
    ac80:	2201      	movs	r2, #1
    ac82:	e000      	b.n	ac86 <z_reschedule_irqlock+0x12>
    ac84:	2200      	movs	r2, #0
	if (resched(key)) {
    ac86:	b932      	cbnz	r2, ac96 <z_reschedule_irqlock+0x22>
    ac88:	f383 8811 	msr	BASEPRI, r3
    ac8c:	f3bf 8f6f 	isb	sy
}
    ac90:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ac92:	2200      	movs	r2, #0
    ac94:	e7f7      	b.n	ac86 <z_reschedule_irqlock+0x12>
    ac96:	4618      	mov	r0, r3
    ac98:	f7f8 f864 	bl	2d64 <arch_swap>
	return ret;
    ac9c:	e7f8      	b.n	ac90 <z_reschedule_irqlock+0x1c>

0000ac9e <z_priq_dumb_best>:
{
    ac9e:	4603      	mov	r3, r0
	return list->head == list;
    aca0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aca2:	4283      	cmp	r3, r0
    aca4:	d000      	beq.n	aca8 <z_priq_dumb_best+0xa>
}
    aca6:	4770      	bx	lr
	struct k_thread *thread = NULL;
    aca8:	2000      	movs	r0, #0
	return thread;
    acaa:	e7fc      	b.n	aca6 <z_priq_dumb_best+0x8>

0000acac <init_ready_q>:
	sys_dlist_init(&rq->runq);
    acac:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    acae:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    acb0:	6083      	str	r3, [r0, #8]
}
    acb2:	4770      	bx	lr

0000acb4 <remove_timeout>:
{
    acb4:	b510      	push	{r4, lr}
    acb6:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    acb8:	f7fe f998 	bl	8fec <next>
    acbc:	b148      	cbz	r0, acd2 <remove_timeout+0x1e>
    acbe:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    acc0:	6920      	ldr	r0, [r4, #16]
    acc2:	6961      	ldr	r1, [r4, #20]
    acc4:	6913      	ldr	r3, [r2, #16]
    acc6:	181b      	adds	r3, r3, r0
    acc8:	6950      	ldr	r0, [r2, #20]
    acca:	eb41 0100 	adc.w	r1, r1, r0
    acce:	6113      	str	r3, [r2, #16]
    acd0:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    acd2:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    acd4:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    acd6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    acd8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    acda:	2300      	movs	r3, #0
    acdc:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    acde:	6063      	str	r3, [r4, #4]
}
    ace0:	bd10      	pop	{r4, pc}

0000ace2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    ace2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    ace4:	f7fe fc7e 	bl	95e4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    ace8:	bd08      	pop	{r3, pc}

0000acea <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    acea:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    acec:	f7fe fc7a 	bl	95e4 <sys_clock_tick_get>
}
    acf0:	bd08      	pop	{r3, pc}

0000acf2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    acf2:	b900      	cbnz	r0, acf6 <z_impl_k_busy_wait+0x4>
    acf4:	4770      	bx	lr
{
    acf6:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    acf8:	f7f8 fed8 	bl	3aac <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    acfc:	bd08      	pop	{r3, pc}

0000acfe <k_heap_init>:
{
    acfe:	b510      	push	{r4, lr}
    ad00:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    ad04:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    ad06:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    ad08:	f7f6 fa8a 	bl	1220 <sys_heap_init>
}
    ad0c:	bd10      	pop	{r4, pc}
	...

0000ad10 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    ad10:	f7fa bbb6 	b.w	5480 <SystemInit>
