
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	e0 ef 00 20 f1 66 00 00 db f2 00 00 a9 66 00 00     ... .f.......f..
  10:	a9 66 00 00 a9 66 00 00 a9 66 00 00 00 00 00 00     .f...f...f......
	...
  2c:	75 5e 00 00 a9 66 00 00 00 00 00 00 1d 5e 00 00     u^...f.......^..
  3c:	a9 66 00 00                                         .f..

00000040 <_irq_vector_table>:
  40:	55 5f 00 00 55 5f 00 00 55 5f 00 00 55 5f 00 00     U_..U_..U_..U_..
  50:	55 5f 00 00 55 5f 00 00 55 5f 00 00 55 5f 00 00     U_..U_..U_..U_..
  60:	55 5f 00 00 55 5f 00 00 55 5f 00 00 55 5f 00 00     U_..U_..U_..U_..
  70:	55 5f 00 00 55 5f 00 00 55 5f 00 00 55 5f 00 00     U_..U_..U_..U_..
  80:	55 5f 00 00 55 5f 00 00 55 5f 00 00 55 5f 00 00     U_..U_..U_..U_..
  90:	55 5f 00 00 55 5f 00 00 55 5f 00 00 55 5f 00 00     U_..U_..U_..U_..
  a0:	55 5f 00 00 55 5f 00 00 55 5f 00 00 55 5f 00 00     U_..U_..U_..U_..
  b0:	55 5f 00 00 55 5f 00 00 55 5f 00 00 55 5f 00 00     U_..U_..U_..U_..
  c0:	55 5f 00 00 55 5f 00 00 55 5f 00 00 55 5f 00 00     U_..U_..U_..U_..
  d0:	55 5f 00 00 55 5f 00 00 55 5f 00 00 55 5f 00 00     U_..U_..U_..U_..
  e0:	55 5f 00 00 55 5f 00 00 55 5f 00 00 55 5f 00 00     U_..U_..U_..U_..
  f0:	55 5f 00 00 55 5f 00 00 55 5f 00 00 55 5f 00 00     U_..U_..U_..U_..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <__adddf3+0x1ee>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <__adddf3+0x1da>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__adddf3+0x124>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <__adddf3+0x240>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <__adddf3+0x16e>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <__adddf3+0x16a>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <__adddf3+0x184>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <__adddf3+0x1d2>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <__adddf3+0x1ba>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <__adddf3+0x24e>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <__adddf3+0x212>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <__adddf3+0x230>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__adddf3+0x138>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__adddf3+0x138>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__adddf3+0x138>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__aeabi_dmul+0x1dc>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__aeabi_dmul+0xde>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__aeabi_dmul+0x238>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__aeabi_dmul+0x164>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__aeabi_dmul+0x134>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__aeabi_dmul+0x1c2>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__aeabi_dmul+0x1a6>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__aeabi_dmul+0x1c6>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__aeabi_dmul+0x206>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__aeabi_dmul+0x19c>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__aeabi_dmul+0x24a>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__aeabi_dmul+0x222>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__aeabi_dmul+0x24a>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__aeabi_dmul+0x234>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__aeabi_dmul+0x24a>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__aeabi_dmul+0xde>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__aeabi_dmul+0xde>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__aeabi_dmul+0xde>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__aeabi_dmul+0x24a>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__aeabi_dmul+0x24a>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__aeabi_dmul+0x234>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__aeabi_dmul+0x24a>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__aeabi_dmul+0x1f8>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__aeabi_dmul+0x24a>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__aeabi_dmul+0x19c>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__aeabi_dmul+0x234>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__aeabi_dmul+0x1f8>
     93a:	e712      	b.n	762 <__aeabi_dmul+0x24a>

0000093c <__aeabi_d2f>:
     93c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     944:	bf24      	itt	cs
     946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     94a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     94e:	d90d      	bls.n	96c <__aeabi_d2f+0x30>
     950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     95c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     964:	bf08      	it	eq
     966:	f020 0001 	biceq.w	r0, r0, #1
     96a:	4770      	bx	lr
     96c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     970:	d121      	bne.n	9b6 <__aeabi_d2f+0x7a>
     972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     976:	bfbc      	itt	lt
     978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     97c:	4770      	bxlt	lr
     97e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     982:	ea4f 5252 	mov.w	r2, r2, lsr #21
     986:	f1c2 0218 	rsb	r2, r2, #24
     98a:	f1c2 0c20 	rsb	ip, r2, #32
     98e:	fa10 f30c 	lsls.w	r3, r0, ip
     992:	fa20 f002 	lsr.w	r0, r0, r2
     996:	bf18      	it	ne
     998:	f040 0001 	orrne.w	r0, r0, #1
     99c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     9a4:	fa03 fc0c 	lsl.w	ip, r3, ip
     9a8:	ea40 000c 	orr.w	r0, r0, ip
     9ac:	fa23 f302 	lsr.w	r3, r3, r2
     9b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     9b4:	e7cc      	b.n	950 <__aeabi_d2f+0x14>
     9b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     9ba:	d107      	bne.n	9cc <__aeabi_d2f+0x90>
     9bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     9c0:	bf1e      	ittt	ne
     9c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     9c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     9ca:	4770      	bxne	lr
     9cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     9d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     9d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     9d8:	4770      	bx	lr
     9da:	bf00      	nop

000009dc <__aeabi_uldivmod>:
     9dc:	b953      	cbnz	r3, 9f4 <__aeabi_uldivmod+0x18>
     9de:	b94a      	cbnz	r2, 9f4 <__aeabi_uldivmod+0x18>
     9e0:	2900      	cmp	r1, #0
     9e2:	bf08      	it	eq
     9e4:	2800      	cmpeq	r0, #0
     9e6:	bf1c      	itt	ne
     9e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     9ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     9f0:	f000 b80c 	b.w	a0c <__aeabi_idiv0>
     9f4:	f1ad 0c08 	sub.w	ip, sp, #8
     9f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     9fc:	f000 f8ce 	bl	b9c <__udivmoddi4>
     a00:	f8dd e004 	ldr.w	lr, [sp, #4]
     a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a08:	b004      	add	sp, #16
     a0a:	4770      	bx	lr

00000a0c <__aeabi_idiv0>:
     a0c:	4770      	bx	lr
     a0e:	bf00      	nop

00000a10 <__gedf2>:
     a10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     a14:	e006      	b.n	a24 <__cmpdf2+0x4>
     a16:	bf00      	nop

00000a18 <__ledf2>:
     a18:	f04f 0c01 	mov.w	ip, #1
     a1c:	e002      	b.n	a24 <__cmpdf2+0x4>
     a1e:	bf00      	nop

00000a20 <__cmpdf2>:
     a20:	f04f 0c01 	mov.w	ip, #1
     a24:	f84d cd04 	str.w	ip, [sp, #-4]!
     a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a34:	bf18      	it	ne
     a36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     a3a:	d01b      	beq.n	a74 <__cmpdf2+0x54>
     a3c:	b001      	add	sp, #4
     a3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     a42:	bf0c      	ite	eq
     a44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     a48:	ea91 0f03 	teqne	r1, r3
     a4c:	bf02      	ittt	eq
     a4e:	ea90 0f02 	teqeq	r0, r2
     a52:	2000      	moveq	r0, #0
     a54:	4770      	bxeq	lr
     a56:	f110 0f00 	cmn.w	r0, #0
     a5a:	ea91 0f03 	teq	r1, r3
     a5e:	bf58      	it	pl
     a60:	4299      	cmppl	r1, r3
     a62:	bf08      	it	eq
     a64:	4290      	cmpeq	r0, r2
     a66:	bf2c      	ite	cs
     a68:	17d8      	asrcs	r0, r3, #31
     a6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     a6e:	f040 0001 	orr.w	r0, r0, #1
     a72:	4770      	bx	lr
     a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a7c:	d102      	bne.n	a84 <__cmpdf2+0x64>
     a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     a82:	d107      	bne.n	a94 <__cmpdf2+0x74>
     a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a8c:	d1d6      	bne.n	a3c <__cmpdf2+0x1c>
     a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     a92:	d0d3      	beq.n	a3c <__cmpdf2+0x1c>
     a94:	f85d 0b04 	ldr.w	r0, [sp], #4
     a98:	4770      	bx	lr
     a9a:	bf00      	nop

00000a9c <__aeabi_cdrcmple>:
     a9c:	4684      	mov	ip, r0
     a9e:	4610      	mov	r0, r2
     aa0:	4662      	mov	r2, ip
     aa2:	468c      	mov	ip, r1
     aa4:	4619      	mov	r1, r3
     aa6:	4663      	mov	r3, ip
     aa8:	e000      	b.n	aac <__aeabi_cdcmpeq>
     aaa:	bf00      	nop

00000aac <__aeabi_cdcmpeq>:
     aac:	b501      	push	{r0, lr}
     aae:	f7ff ffb7 	bl	a20 <__cmpdf2>
     ab2:	2800      	cmp	r0, #0
     ab4:	bf48      	it	mi
     ab6:	f110 0f00 	cmnmi.w	r0, #0
     aba:	bd01      	pop	{r0, pc}

00000abc <__aeabi_dcmpeq>:
     abc:	f84d ed08 	str.w	lr, [sp, #-8]!
     ac0:	f7ff fff4 	bl	aac <__aeabi_cdcmpeq>
     ac4:	bf0c      	ite	eq
     ac6:	2001      	moveq	r0, #1
     ac8:	2000      	movne	r0, #0
     aca:	f85d fb08 	ldr.w	pc, [sp], #8
     ace:	bf00      	nop

00000ad0 <__aeabi_dcmplt>:
     ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
     ad4:	f7ff ffea 	bl	aac <__aeabi_cdcmpeq>
     ad8:	bf34      	ite	cc
     ada:	2001      	movcc	r0, #1
     adc:	2000      	movcs	r0, #0
     ade:	f85d fb08 	ldr.w	pc, [sp], #8
     ae2:	bf00      	nop

00000ae4 <__aeabi_dcmple>:
     ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
     ae8:	f7ff ffe0 	bl	aac <__aeabi_cdcmpeq>
     aec:	bf94      	ite	ls
     aee:	2001      	movls	r0, #1
     af0:	2000      	movhi	r0, #0
     af2:	f85d fb08 	ldr.w	pc, [sp], #8
     af6:	bf00      	nop

00000af8 <__aeabi_dcmpge>:
     af8:	f84d ed08 	str.w	lr, [sp, #-8]!
     afc:	f7ff ffce 	bl	a9c <__aeabi_cdrcmple>
     b00:	bf94      	ite	ls
     b02:	2001      	movls	r0, #1
     b04:	2000      	movhi	r0, #0
     b06:	f85d fb08 	ldr.w	pc, [sp], #8
     b0a:	bf00      	nop

00000b0c <__aeabi_dcmpgt>:
     b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
     b10:	f7ff ffc4 	bl	a9c <__aeabi_cdrcmple>
     b14:	bf34      	ite	cc
     b16:	2001      	movcc	r0, #1
     b18:	2000      	movcs	r0, #0
     b1a:	f85d fb08 	ldr.w	pc, [sp], #8
     b1e:	bf00      	nop

00000b20 <__aeabi_dcmpun>:
     b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b28:	d102      	bne.n	b30 <__aeabi_dcmpun+0x10>
     b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     b2e:	d10a      	bne.n	b46 <__aeabi_dcmpun+0x26>
     b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b38:	d102      	bne.n	b40 <__aeabi_dcmpun+0x20>
     b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     b3e:	d102      	bne.n	b46 <__aeabi_dcmpun+0x26>
     b40:	f04f 0000 	mov.w	r0, #0
     b44:	4770      	bx	lr
     b46:	f04f 0001 	mov.w	r0, #1
     b4a:	4770      	bx	lr

00000b4c <__aeabi_d2iz>:
     b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     b54:	d215      	bcs.n	b82 <__aeabi_d2iz+0x36>
     b56:	d511      	bpl.n	b7c <__aeabi_d2iz+0x30>
     b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     b60:	d912      	bls.n	b88 <__aeabi_d2iz+0x3c>
     b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b72:	fa23 f002 	lsr.w	r0, r3, r2
     b76:	bf18      	it	ne
     b78:	4240      	negne	r0, r0
     b7a:	4770      	bx	lr
     b7c:	f04f 0000 	mov.w	r0, #0
     b80:	4770      	bx	lr
     b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     b86:	d105      	bne.n	b94 <__aeabi_d2iz+0x48>
     b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     b8c:	bf08      	it	eq
     b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     b92:	4770      	bx	lr
     b94:	f04f 0000 	mov.w	r0, #0
     b98:	4770      	bx	lr
     b9a:	bf00      	nop

00000b9c <__udivmoddi4>:
     b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ba0:	4607      	mov	r7, r0
     ba2:	468c      	mov	ip, r1
     ba4:	4608      	mov	r0, r1
     ba6:	9e09      	ldr	r6, [sp, #36]	; 0x24
     ba8:	4615      	mov	r5, r2
     baa:	463c      	mov	r4, r7
     bac:	4619      	mov	r1, r3
     bae:	2b00      	cmp	r3, #0
     bb0:	f040 80c6 	bne.w	d40 <__udivmoddi4+0x1a4>
     bb4:	4282      	cmp	r2, r0
     bb6:	fab2 f782 	clz	r7, r2
     bba:	d946      	bls.n	c4a <__udivmoddi4+0xae>
     bbc:	b14f      	cbz	r7, bd2 <__udivmoddi4+0x36>
     bbe:	f1c7 0e20 	rsb	lr, r7, #32
     bc2:	fa24 fe0e 	lsr.w	lr, r4, lr
     bc6:	fa00 f307 	lsl.w	r3, r0, r7
     bca:	40bd      	lsls	r5, r7
     bcc:	ea4e 0c03 	orr.w	ip, lr, r3
     bd0:	40bc      	lsls	r4, r7
     bd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
     bd6:	fa1f fe85 	uxth.w	lr, r5
     bda:	fbbc f9f8 	udiv	r9, ip, r8
     bde:	0c22      	lsrs	r2, r4, #16
     be0:	fb08 c319 	mls	r3, r8, r9, ip
     be4:	fb09 fa0e 	mul.w	sl, r9, lr
     be8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     bec:	459a      	cmp	sl, r3
     bee:	d928      	bls.n	c42 <__udivmoddi4+0xa6>
     bf0:	18eb      	adds	r3, r5, r3
     bf2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     bf6:	d204      	bcs.n	c02 <__udivmoddi4+0x66>
     bf8:	459a      	cmp	sl, r3
     bfa:	d902      	bls.n	c02 <__udivmoddi4+0x66>
     bfc:	f1a9 0002 	sub.w	r0, r9, #2
     c00:	442b      	add	r3, r5
     c02:	eba3 030a 	sub.w	r3, r3, sl
     c06:	b2a4      	uxth	r4, r4
     c08:	fbb3 f2f8 	udiv	r2, r3, r8
     c0c:	fb08 3312 	mls	r3, r8, r2, r3
     c10:	fb02 fe0e 	mul.w	lr, r2, lr
     c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c18:	45a6      	cmp	lr, r4
     c1a:	d914      	bls.n	c46 <__udivmoddi4+0xaa>
     c1c:	192c      	adds	r4, r5, r4
     c1e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     c22:	d203      	bcs.n	c2c <__udivmoddi4+0x90>
     c24:	45a6      	cmp	lr, r4
     c26:	d901      	bls.n	c2c <__udivmoddi4+0x90>
     c28:	1e93      	subs	r3, r2, #2
     c2a:	442c      	add	r4, r5
     c2c:	eba4 040e 	sub.w	r4, r4, lr
     c30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     c34:	b11e      	cbz	r6, c3e <__udivmoddi4+0xa2>
     c36:	40fc      	lsrs	r4, r7
     c38:	2300      	movs	r3, #0
     c3a:	6034      	str	r4, [r6, #0]
     c3c:	6073      	str	r3, [r6, #4]
     c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c42:	4648      	mov	r0, r9
     c44:	e7dd      	b.n	c02 <__udivmoddi4+0x66>
     c46:	4613      	mov	r3, r2
     c48:	e7f0      	b.n	c2c <__udivmoddi4+0x90>
     c4a:	b902      	cbnz	r2, c4e <__udivmoddi4+0xb2>
     c4c:	deff      	udf	#255	; 0xff
     c4e:	bb87      	cbnz	r7, cb2 <__udivmoddi4+0x116>
     c50:	1a83      	subs	r3, r0, r2
     c52:	2101      	movs	r1, #1
     c54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     c58:	b2aa      	uxth	r2, r5
     c5a:	fbb3 fcfe 	udiv	ip, r3, lr
     c5e:	0c20      	lsrs	r0, r4, #16
     c60:	fb0e 331c 	mls	r3, lr, ip, r3
     c64:	fb0c f802 	mul.w	r8, ip, r2
     c68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     c6c:	4598      	cmp	r8, r3
     c6e:	d963      	bls.n	d38 <__udivmoddi4+0x19c>
     c70:	18eb      	adds	r3, r5, r3
     c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     c76:	d204      	bcs.n	c82 <__udivmoddi4+0xe6>
     c78:	4598      	cmp	r8, r3
     c7a:	d902      	bls.n	c82 <__udivmoddi4+0xe6>
     c7c:	f1ac 0002 	sub.w	r0, ip, #2
     c80:	442b      	add	r3, r5
     c82:	eba3 0308 	sub.w	r3, r3, r8
     c86:	b2a4      	uxth	r4, r4
     c88:	fbb3 fcfe 	udiv	ip, r3, lr
     c8c:	fb0e 331c 	mls	r3, lr, ip, r3
     c90:	fb0c f202 	mul.w	r2, ip, r2
     c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c98:	42a2      	cmp	r2, r4
     c9a:	d94f      	bls.n	d3c <__udivmoddi4+0x1a0>
     c9c:	192c      	adds	r4, r5, r4
     c9e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     ca2:	d204      	bcs.n	cae <__udivmoddi4+0x112>
     ca4:	42a2      	cmp	r2, r4
     ca6:	d902      	bls.n	cae <__udivmoddi4+0x112>
     ca8:	f1ac 0302 	sub.w	r3, ip, #2
     cac:	442c      	add	r4, r5
     cae:	1aa4      	subs	r4, r4, r2
     cb0:	e7be      	b.n	c30 <__udivmoddi4+0x94>
     cb2:	f1c7 0c20 	rsb	ip, r7, #32
     cb6:	fa20 f80c 	lsr.w	r8, r0, ip
     cba:	fa00 f307 	lsl.w	r3, r0, r7
     cbe:	fa24 fc0c 	lsr.w	ip, r4, ip
     cc2:	40bd      	lsls	r5, r7
     cc4:	ea4c 0203 	orr.w	r2, ip, r3
     cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     ccc:	b2ab      	uxth	r3, r5
     cce:	fbb8 fcfe 	udiv	ip, r8, lr
     cd2:	0c11      	lsrs	r1, r2, #16
     cd4:	fb0e 801c 	mls	r0, lr, ip, r8
     cd8:	fb0c f903 	mul.w	r9, ip, r3
     cdc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     ce0:	4581      	cmp	r9, r0
     ce2:	fa04 f407 	lsl.w	r4, r4, r7
     ce6:	d923      	bls.n	d30 <__udivmoddi4+0x194>
     ce8:	1828      	adds	r0, r5, r0
     cea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     cee:	d204      	bcs.n	cfa <__udivmoddi4+0x15e>
     cf0:	4581      	cmp	r9, r0
     cf2:	d902      	bls.n	cfa <__udivmoddi4+0x15e>
     cf4:	f1ac 0102 	sub.w	r1, ip, #2
     cf8:	4428      	add	r0, r5
     cfa:	eba0 0009 	sub.w	r0, r0, r9
     cfe:	b292      	uxth	r2, r2
     d00:	fbb0 fcfe 	udiv	ip, r0, lr
     d04:	fb0e 001c 	mls	r0, lr, ip, r0
     d08:	fb0c f803 	mul.w	r8, ip, r3
     d0c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     d10:	4598      	cmp	r8, r3
     d12:	d90f      	bls.n	d34 <__udivmoddi4+0x198>
     d14:	18eb      	adds	r3, r5, r3
     d16:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     d1a:	d204      	bcs.n	d26 <__udivmoddi4+0x18a>
     d1c:	4598      	cmp	r8, r3
     d1e:	d902      	bls.n	d26 <__udivmoddi4+0x18a>
     d20:	f1ac 0202 	sub.w	r2, ip, #2
     d24:	442b      	add	r3, r5
     d26:	eba3 0308 	sub.w	r3, r3, r8
     d2a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     d2e:	e791      	b.n	c54 <__udivmoddi4+0xb8>
     d30:	4661      	mov	r1, ip
     d32:	e7e2      	b.n	cfa <__udivmoddi4+0x15e>
     d34:	4662      	mov	r2, ip
     d36:	e7f6      	b.n	d26 <__udivmoddi4+0x18a>
     d38:	4660      	mov	r0, ip
     d3a:	e7a2      	b.n	c82 <__udivmoddi4+0xe6>
     d3c:	4663      	mov	r3, ip
     d3e:	e7b6      	b.n	cae <__udivmoddi4+0x112>
     d40:	4283      	cmp	r3, r0
     d42:	d905      	bls.n	d50 <__udivmoddi4+0x1b4>
     d44:	b10e      	cbz	r6, d4a <__udivmoddi4+0x1ae>
     d46:	e9c6 7000 	strd	r7, r0, [r6]
     d4a:	2100      	movs	r1, #0
     d4c:	4608      	mov	r0, r1
     d4e:	e776      	b.n	c3e <__udivmoddi4+0xa2>
     d50:	fab3 f183 	clz	r1, r3
     d54:	b981      	cbnz	r1, d78 <__udivmoddi4+0x1dc>
     d56:	4283      	cmp	r3, r0
     d58:	d301      	bcc.n	d5e <__udivmoddi4+0x1c2>
     d5a:	42ba      	cmp	r2, r7
     d5c:	d80a      	bhi.n	d74 <__udivmoddi4+0x1d8>
     d5e:	1abc      	subs	r4, r7, r2
     d60:	eb60 0303 	sbc.w	r3, r0, r3
     d64:	2001      	movs	r0, #1
     d66:	469c      	mov	ip, r3
     d68:	2e00      	cmp	r6, #0
     d6a:	d068      	beq.n	e3e <__udivmoddi4+0x2a2>
     d6c:	e9c6 4c00 	strd	r4, ip, [r6]
     d70:	2100      	movs	r1, #0
     d72:	e764      	b.n	c3e <__udivmoddi4+0xa2>
     d74:	4608      	mov	r0, r1
     d76:	e7f7      	b.n	d68 <__udivmoddi4+0x1cc>
     d78:	f1c1 0c20 	rsb	ip, r1, #32
     d7c:	408b      	lsls	r3, r1
     d7e:	fa22 f40c 	lsr.w	r4, r2, ip
     d82:	431c      	orrs	r4, r3
     d84:	fa02 f501 	lsl.w	r5, r2, r1
     d88:	fa00 f301 	lsl.w	r3, r0, r1
     d8c:	fa27 f20c 	lsr.w	r2, r7, ip
     d90:	fa20 fb0c 	lsr.w	fp, r0, ip
     d94:	ea4f 4914 	mov.w	r9, r4, lsr #16
     d98:	4313      	orrs	r3, r2
     d9a:	fbbb f8f9 	udiv	r8, fp, r9
     d9e:	fa1f fe84 	uxth.w	lr, r4
     da2:	fb09 bb18 	mls	fp, r9, r8, fp
     da6:	0c1a      	lsrs	r2, r3, #16
     da8:	fb08 fa0e 	mul.w	sl, r8, lr
     dac:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     db0:	4592      	cmp	sl, r2
     db2:	fa07 f701 	lsl.w	r7, r7, r1
     db6:	d93e      	bls.n	e36 <__udivmoddi4+0x29a>
     db8:	18a2      	adds	r2, r4, r2
     dba:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     dbe:	d204      	bcs.n	dca <__udivmoddi4+0x22e>
     dc0:	4592      	cmp	sl, r2
     dc2:	d902      	bls.n	dca <__udivmoddi4+0x22e>
     dc4:	f1a8 0002 	sub.w	r0, r8, #2
     dc8:	4422      	add	r2, r4
     dca:	eba2 020a 	sub.w	r2, r2, sl
     dce:	b29b      	uxth	r3, r3
     dd0:	fbb2 f8f9 	udiv	r8, r2, r9
     dd4:	fb09 2218 	mls	r2, r9, r8, r2
     dd8:	fb08 fe0e 	mul.w	lr, r8, lr
     ddc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     de0:	4596      	cmp	lr, r2
     de2:	d92a      	bls.n	e3a <__udivmoddi4+0x29e>
     de4:	18a2      	adds	r2, r4, r2
     de6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     dea:	d204      	bcs.n	df6 <__udivmoddi4+0x25a>
     dec:	4596      	cmp	lr, r2
     dee:	d902      	bls.n	df6 <__udivmoddi4+0x25a>
     df0:	f1a8 0302 	sub.w	r3, r8, #2
     df4:	4422      	add	r2, r4
     df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     dfa:	fba0 9305 	umull	r9, r3, r0, r5
     dfe:	eba2 020e 	sub.w	r2, r2, lr
     e02:	429a      	cmp	r2, r3
     e04:	46ce      	mov	lr, r9
     e06:	4698      	mov	r8, r3
     e08:	d302      	bcc.n	e10 <__udivmoddi4+0x274>
     e0a:	d106      	bne.n	e1a <__udivmoddi4+0x27e>
     e0c:	454f      	cmp	r7, r9
     e0e:	d204      	bcs.n	e1a <__udivmoddi4+0x27e>
     e10:	ebb9 0e05 	subs.w	lr, r9, r5
     e14:	eb63 0804 	sbc.w	r8, r3, r4
     e18:	3801      	subs	r0, #1
     e1a:	b186      	cbz	r6, e3e <__udivmoddi4+0x2a2>
     e1c:	ebb7 030e 	subs.w	r3, r7, lr
     e20:	eb62 0708 	sbc.w	r7, r2, r8
     e24:	fa07 fc0c 	lsl.w	ip, r7, ip
     e28:	40cb      	lsrs	r3, r1
     e2a:	ea4c 0303 	orr.w	r3, ip, r3
     e2e:	40cf      	lsrs	r7, r1
     e30:	e9c6 3700 	strd	r3, r7, [r6]
     e34:	e79c      	b.n	d70 <__udivmoddi4+0x1d4>
     e36:	4640      	mov	r0, r8
     e38:	e7c7      	b.n	dca <__udivmoddi4+0x22e>
     e3a:	4643      	mov	r3, r8
     e3c:	e7db      	b.n	df6 <__udivmoddi4+0x25a>
     e3e:	4631      	mov	r1, r6
     e40:	e6fd      	b.n	c3e <__udivmoddi4+0xa2>

00000e42 <strcmp>:
     e42:	f810 2b01 	ldrb.w	r2, [r0], #1
     e46:	f811 3b01 	ldrb.w	r3, [r1], #1
     e4a:	2a01      	cmp	r2, #1
     e4c:	bf28      	it	cs
     e4e:	429a      	cmpcs	r2, r3
     e50:	d0f7      	beq.n	e42 <strcmp>
     e52:	1ad0      	subs	r0, r2, r3
     e54:	4770      	bx	lr

00000e56 <strlen>:
     e56:	4603      	mov	r3, r0
     e58:	f813 2b01 	ldrb.w	r2, [r3], #1
     e5c:	2a00      	cmp	r2, #0
     e5e:	d1fb      	bne.n	e58 <strlen+0x2>
     e60:	1a18      	subs	r0, r3, r0
     e62:	3801      	subs	r0, #1
     e64:	4770      	bx	lr
	...

00000e68 <__ieee754_acos>:
     e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e6c:	4cb2      	ldr	r4, [pc, #712]	; (1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>)
     e6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
     e72:	42a3      	cmp	r3, r4
     e74:	4607      	mov	r7, r0
     e76:	460e      	mov	r6, r1
     e78:	dd16      	ble.n	ea8 <__ieee754_acos+0x40>
     e7a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
     e7e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
     e82:	4303      	orrs	r3, r0
     e84:	d107      	bne.n	e96 <__ieee754_acos+0x2e>
     e86:	2900      	cmp	r1, #0
     e88:	f300 8202 	bgt.w	1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>
     e8c:	a190      	add	r1, pc, #576	; (adr r1, 10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
     e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
     e92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e96:	4602      	mov	r2, r0
     e98:	460b      	mov	r3, r1
     e9a:	f7ff f985 	bl	1a8 <__aeabi_dsub>
     e9e:	4602      	mov	r2, r0
     ea0:	460b      	mov	r3, r1
     ea2:	f7ff fc63 	bl	76c <__aeabi_ddiv>
     ea6:	e7f4      	b.n	e92 <__ieee754_acos+0x2a>
     ea8:	4ca4      	ldr	r4, [pc, #656]	; (113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>)
     eaa:	42a3      	cmp	r3, r4
     eac:	f300 8083 	bgt.w	fb6 <__ieee754_acos+0x14e>
     eb0:	4aa3      	ldr	r2, [pc, #652]	; (1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>)
     eb2:	4293      	cmp	r3, r2
     eb4:	f340 81ef 	ble.w	1296 <CONFIG_FPROTECT_BLOCK_SIZE+0x296>
     eb8:	4602      	mov	r2, r0
     eba:	460b      	mov	r3, r1
     ebc:	f7ff fb2c 	bl	518 <__aeabi_dmul>
     ec0:	a385      	add	r3, pc, #532	; (adr r3, 10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>)
     ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
     ec6:	4604      	mov	r4, r0
     ec8:	460d      	mov	r5, r1
     eca:	f7ff fb25 	bl	518 <__aeabi_dmul>
     ece:	a384      	add	r3, pc, #528	; (adr r3, 10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>)
     ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
     ed4:	f7ff f96a 	bl	1ac <__adddf3>
     ed8:	4622      	mov	r2, r4
     eda:	462b      	mov	r3, r5
     edc:	f7ff fb1c 	bl	518 <__aeabi_dmul>
     ee0:	a381      	add	r3, pc, #516	; (adr r3, 10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>)
     ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
     ee6:	f7ff f95f 	bl	1a8 <__aeabi_dsub>
     eea:	4622      	mov	r2, r4
     eec:	462b      	mov	r3, r5
     eee:	f7ff fb13 	bl	518 <__aeabi_dmul>
     ef2:	a37f      	add	r3, pc, #508	; (adr r3, 10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
     ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
     ef8:	f7ff f958 	bl	1ac <__adddf3>
     efc:	4622      	mov	r2, r4
     efe:	462b      	mov	r3, r5
     f00:	f7ff fb0a 	bl	518 <__aeabi_dmul>
     f04:	a37c      	add	r3, pc, #496	; (adr r3, 10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
     f06:	e9d3 2300 	ldrd	r2, r3, [r3]
     f0a:	f7ff f94d 	bl	1a8 <__aeabi_dsub>
     f0e:	4622      	mov	r2, r4
     f10:	462b      	mov	r3, r5
     f12:	f7ff fb01 	bl	518 <__aeabi_dmul>
     f16:	a37a      	add	r3, pc, #488	; (adr r3, 1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>)
     f18:	e9d3 2300 	ldrd	r2, r3, [r3]
     f1c:	f7ff f946 	bl	1ac <__adddf3>
     f20:	4622      	mov	r2, r4
     f22:	462b      	mov	r3, r5
     f24:	f7ff faf8 	bl	518 <__aeabi_dmul>
     f28:	a377      	add	r3, pc, #476	; (adr r3, 1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
     f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
     f2e:	4680      	mov	r8, r0
     f30:	4689      	mov	r9, r1
     f32:	4620      	mov	r0, r4
     f34:	4629      	mov	r1, r5
     f36:	f7ff faef 	bl	518 <__aeabi_dmul>
     f3a:	a375      	add	r3, pc, #468	; (adr r3, 1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
     f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
     f40:	f7ff f932 	bl	1a8 <__aeabi_dsub>
     f44:	4622      	mov	r2, r4
     f46:	462b      	mov	r3, r5
     f48:	f7ff fae6 	bl	518 <__aeabi_dmul>
     f4c:	a372      	add	r3, pc, #456	; (adr r3, 1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
     f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
     f52:	f7ff f92b 	bl	1ac <__adddf3>
     f56:	4622      	mov	r2, r4
     f58:	462b      	mov	r3, r5
     f5a:	f7ff fadd 	bl	518 <__aeabi_dmul>
     f5e:	a370      	add	r3, pc, #448	; (adr r3, 1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>)
     f60:	e9d3 2300 	ldrd	r2, r3, [r3]
     f64:	f7ff f920 	bl	1a8 <__aeabi_dsub>
     f68:	4622      	mov	r2, r4
     f6a:	462b      	mov	r3, r5
     f6c:	f7ff fad4 	bl	518 <__aeabi_dmul>
     f70:	4b74      	ldr	r3, [pc, #464]	; (1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>)
     f72:	2200      	movs	r2, #0
     f74:	f7ff f91a 	bl	1ac <__adddf3>
     f78:	4602      	mov	r2, r0
     f7a:	460b      	mov	r3, r1
     f7c:	4640      	mov	r0, r8
     f7e:	4649      	mov	r1, r9
     f80:	f7ff fbf4 	bl	76c <__aeabi_ddiv>
     f84:	463a      	mov	r2, r7
     f86:	4633      	mov	r3, r6
     f88:	f7ff fac6 	bl	518 <__aeabi_dmul>
     f8c:	4602      	mov	r2, r0
     f8e:	460b      	mov	r3, r1
     f90:	a165      	add	r1, pc, #404	; (adr r1, 1128 <CONFIG_FPROTECT_BLOCK_SIZE+0x128>)
     f92:	e9d1 0100 	ldrd	r0, r1, [r1]
     f96:	f7ff f907 	bl	1a8 <__aeabi_dsub>
     f9a:	4602      	mov	r2, r0
     f9c:	460b      	mov	r3, r1
     f9e:	4638      	mov	r0, r7
     fa0:	4631      	mov	r1, r6
     fa2:	f7ff f901 	bl	1a8 <__aeabi_dsub>
     fa6:	4602      	mov	r2, r0
     fa8:	460b      	mov	r3, r1
     faa:	a161      	add	r1, pc, #388	; (adr r1, 1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>)
     fac:	e9d1 0100 	ldrd	r0, r1, [r1]
     fb0:	f7ff f8fa 	bl	1a8 <__aeabi_dsub>
     fb4:	e76d      	b.n	e92 <__ieee754_acos+0x2a>
     fb6:	2900      	cmp	r1, #0
     fb8:	f280 80c8 	bge.w	114c <CONFIG_FPROTECT_BLOCK_SIZE+0x14c>
     fbc:	4b61      	ldr	r3, [pc, #388]	; (1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>)
     fbe:	2200      	movs	r2, #0
     fc0:	f7ff f8f4 	bl	1ac <__adddf3>
     fc4:	4b60      	ldr	r3, [pc, #384]	; (1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>)
     fc6:	2200      	movs	r2, #0
     fc8:	f7ff faa6 	bl	518 <__aeabi_dmul>
     fcc:	a342      	add	r3, pc, #264	; (adr r3, 10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>)
     fce:	e9d3 2300 	ldrd	r2, r3, [r3]
     fd2:	4604      	mov	r4, r0
     fd4:	460d      	mov	r5, r1
     fd6:	f7ff fa9f 	bl	518 <__aeabi_dmul>
     fda:	a341      	add	r3, pc, #260	; (adr r3, 10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>)
     fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
     fe0:	f7ff f8e4 	bl	1ac <__adddf3>
     fe4:	4622      	mov	r2, r4
     fe6:	462b      	mov	r3, r5
     fe8:	f7ff fa96 	bl	518 <__aeabi_dmul>
     fec:	a33e      	add	r3, pc, #248	; (adr r3, 10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>)
     fee:	e9d3 2300 	ldrd	r2, r3, [r3]
     ff2:	f7ff f8d9 	bl	1a8 <__aeabi_dsub>
     ff6:	4622      	mov	r2, r4
     ff8:	462b      	mov	r3, r5
     ffa:	f7ff fa8d 	bl	518 <__aeabi_dmul>
     ffe:	a33c      	add	r3, pc, #240	; (adr r3, 10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    1000:	e9d3 2300 	ldrd	r2, r3, [r3]
    1004:	f7ff f8d2 	bl	1ac <__adddf3>
    1008:	4622      	mov	r2, r4
    100a:	462b      	mov	r3, r5
    100c:	f7ff fa84 	bl	518 <__aeabi_dmul>
    1010:	a339      	add	r3, pc, #228	; (adr r3, 10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
    1012:	e9d3 2300 	ldrd	r2, r3, [r3]
    1016:	f7ff f8c7 	bl	1a8 <__aeabi_dsub>
    101a:	4622      	mov	r2, r4
    101c:	462b      	mov	r3, r5
    101e:	f7ff fa7b 	bl	518 <__aeabi_dmul>
    1022:	a337      	add	r3, pc, #220	; (adr r3, 1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>)
    1024:	e9d3 2300 	ldrd	r2, r3, [r3]
    1028:	f7ff f8c0 	bl	1ac <__adddf3>
    102c:	4622      	mov	r2, r4
    102e:	462b      	mov	r3, r5
    1030:	f7ff fa72 	bl	518 <__aeabi_dmul>
    1034:	4680      	mov	r8, r0
    1036:	4689      	mov	r9, r1
    1038:	4620      	mov	r0, r4
    103a:	4629      	mov	r1, r5
    103c:	f00c f94e 	bl	d2dc <__ieee754_sqrt>
    1040:	a331      	add	r3, pc, #196	; (adr r3, 1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
    1042:	e9d3 2300 	ldrd	r2, r3, [r3]
    1046:	4606      	mov	r6, r0
    1048:	460f      	mov	r7, r1
    104a:	4620      	mov	r0, r4
    104c:	4629      	mov	r1, r5
    104e:	f7ff fa63 	bl	518 <__aeabi_dmul>
    1052:	a32f      	add	r3, pc, #188	; (adr r3, 1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
    1054:	e9d3 2300 	ldrd	r2, r3, [r3]
    1058:	f7ff f8a6 	bl	1a8 <__aeabi_dsub>
    105c:	4622      	mov	r2, r4
    105e:	462b      	mov	r3, r5
    1060:	f7ff fa5a 	bl	518 <__aeabi_dmul>
    1064:	a32c      	add	r3, pc, #176	; (adr r3, 1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
    1066:	e9d3 2300 	ldrd	r2, r3, [r3]
    106a:	f7ff f89f 	bl	1ac <__adddf3>
    106e:	4622      	mov	r2, r4
    1070:	462b      	mov	r3, r5
    1072:	f7ff fa51 	bl	518 <__aeabi_dmul>
    1076:	a32a      	add	r3, pc, #168	; (adr r3, 1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>)
    1078:	e9d3 2300 	ldrd	r2, r3, [r3]
    107c:	f7ff f894 	bl	1a8 <__aeabi_dsub>
    1080:	4622      	mov	r2, r4
    1082:	462b      	mov	r3, r5
    1084:	f7ff fa48 	bl	518 <__aeabi_dmul>
    1088:	4b2e      	ldr	r3, [pc, #184]	; (1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>)
    108a:	2200      	movs	r2, #0
    108c:	f7ff f88e 	bl	1ac <__adddf3>
    1090:	4602      	mov	r2, r0
    1092:	460b      	mov	r3, r1
    1094:	4640      	mov	r0, r8
    1096:	4649      	mov	r1, r9
    1098:	f7ff fb68 	bl	76c <__aeabi_ddiv>
    109c:	4632      	mov	r2, r6
    109e:	463b      	mov	r3, r7
    10a0:	f7ff fa3a 	bl	518 <__aeabi_dmul>
    10a4:	a320      	add	r3, pc, #128	; (adr r3, 1128 <CONFIG_FPROTECT_BLOCK_SIZE+0x128>)
    10a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    10aa:	f7ff f87d 	bl	1a8 <__aeabi_dsub>
    10ae:	4632      	mov	r2, r6
    10b0:	463b      	mov	r3, r7
    10b2:	f7ff f87b 	bl	1ac <__adddf3>
    10b6:	4602      	mov	r2, r0
    10b8:	460b      	mov	r3, r1
    10ba:	f7ff f877 	bl	1ac <__adddf3>
    10be:	4602      	mov	r2, r0
    10c0:	460b      	mov	r3, r1
    10c2:	a103      	add	r1, pc, #12	; (adr r1, 10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
    10c4:	e9d1 0100 	ldrd	r0, r1, [r1]
    10c8:	e772      	b.n	fb0 <__ieee754_acos+0x148>
    10ca:	bf00      	nop
    10cc:	f3af 8000 	nop.w
    10d0:	54442d18 	.word	0x54442d18
    10d4:	400921fb 	.word	0x400921fb
    10d8:	0dfdf709 	.word	0x0dfdf709
    10dc:	3f023de1 	.word	0x3f023de1
    10e0:	7501b288 	.word	0x7501b288
    10e4:	3f49efe0 	.word	0x3f49efe0
    10e8:	b5688f3b 	.word	0xb5688f3b
    10ec:	3fa48228 	.word	0x3fa48228
    10f0:	0e884455 	.word	0x0e884455
    10f4:	3fc9c155 	.word	0x3fc9c155
    10f8:	03eb6f7d 	.word	0x03eb6f7d
    10fc:	3fd4d612 	.word	0x3fd4d612
    1100:	55555555 	.word	0x55555555
    1104:	3fc55555 	.word	0x3fc55555
    1108:	b12e9282 	.word	0xb12e9282
    110c:	3fb3b8c5 	.word	0x3fb3b8c5
    1110:	1b8d0159 	.word	0x1b8d0159
    1114:	3fe6066c 	.word	0x3fe6066c
    1118:	9c598ac8 	.word	0x9c598ac8
    111c:	40002ae5 	.word	0x40002ae5
    1120:	1c8a2d4b 	.word	0x1c8a2d4b
    1124:	40033a27 	.word	0x40033a27
    1128:	33145c07 	.word	0x33145c07
    112c:	3c91a626 	.word	0x3c91a626
    1130:	54442d18 	.word	0x54442d18
    1134:	3ff921fb 	.word	0x3ff921fb
    1138:	3fefffff 	.word	0x3fefffff
    113c:	3fdfffff 	.word	0x3fdfffff
    1140:	3c600000 	.word	0x3c600000
    1144:	3ff00000 	.word	0x3ff00000
    1148:	3fe00000 	.word	0x3fe00000
    114c:	4602      	mov	r2, r0
    114e:	460b      	mov	r3, r1
    1150:	2000      	movs	r0, #0
    1152:	4969      	ldr	r1, [pc, #420]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    1154:	f7ff f828 	bl	1a8 <__aeabi_dsub>
    1158:	4b68      	ldr	r3, [pc, #416]	; (12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>)
    115a:	2200      	movs	r2, #0
    115c:	f7ff f9dc 	bl	518 <__aeabi_dmul>
    1160:	4604      	mov	r4, r0
    1162:	460d      	mov	r5, r1
    1164:	f00c f8ba 	bl	d2dc <__ieee754_sqrt>
    1168:	a34d      	add	r3, pc, #308	; (adr r3, 12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
    116a:	e9d3 2300 	ldrd	r2, r3, [r3]
    116e:	4689      	mov	r9, r1
    1170:	4680      	mov	r8, r0
    1172:	4629      	mov	r1, r5
    1174:	4620      	mov	r0, r4
    1176:	f7ff f9cf 	bl	518 <__aeabi_dmul>
    117a:	a34b      	add	r3, pc, #300	; (adr r3, 12a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a8>)
    117c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1180:	f7ff f814 	bl	1ac <__adddf3>
    1184:	4622      	mov	r2, r4
    1186:	462b      	mov	r3, r5
    1188:	f7ff f9c6 	bl	518 <__aeabi_dmul>
    118c:	a348      	add	r3, pc, #288	; (adr r3, 12b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b0>)
    118e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1192:	f7ff f809 	bl	1a8 <__aeabi_dsub>
    1196:	4622      	mov	r2, r4
    1198:	462b      	mov	r3, r5
    119a:	f7ff f9bd 	bl	518 <__aeabi_dmul>
    119e:	a346      	add	r3, pc, #280	; (adr r3, 12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>)
    11a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    11a4:	f7ff f802 	bl	1ac <__adddf3>
    11a8:	4622      	mov	r2, r4
    11aa:	462b      	mov	r3, r5
    11ac:	f7ff f9b4 	bl	518 <__aeabi_dmul>
    11b0:	a343      	add	r3, pc, #268	; (adr r3, 12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>)
    11b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    11b6:	f7fe fff7 	bl	1a8 <__aeabi_dsub>
    11ba:	4622      	mov	r2, r4
    11bc:	462b      	mov	r3, r5
    11be:	f7ff f9ab 	bl	518 <__aeabi_dmul>
    11c2:	a341      	add	r3, pc, #260	; (adr r3, 12c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c8>)
    11c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    11c8:	f7fe fff0 	bl	1ac <__adddf3>
    11cc:	4622      	mov	r2, r4
    11ce:	462b      	mov	r3, r5
    11d0:	f7ff f9a2 	bl	518 <__aeabi_dmul>
    11d4:	a33e      	add	r3, pc, #248	; (adr r3, 12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>)
    11d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    11da:	4682      	mov	sl, r0
    11dc:	468b      	mov	fp, r1
    11de:	4620      	mov	r0, r4
    11e0:	4629      	mov	r1, r5
    11e2:	f7ff f999 	bl	518 <__aeabi_dmul>
    11e6:	a33c      	add	r3, pc, #240	; (adr r3, 12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>)
    11e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    11ec:	f7fe ffdc 	bl	1a8 <__aeabi_dsub>
    11f0:	4622      	mov	r2, r4
    11f2:	462b      	mov	r3, r5
    11f4:	f7ff f990 	bl	518 <__aeabi_dmul>
    11f8:	a339      	add	r3, pc, #228	; (adr r3, 12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>)
    11fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    11fe:	f7fe ffd5 	bl	1ac <__adddf3>
    1202:	4622      	mov	r2, r4
    1204:	462b      	mov	r3, r5
    1206:	f7ff f987 	bl	518 <__aeabi_dmul>
    120a:	a337      	add	r3, pc, #220	; (adr r3, 12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>)
    120c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1210:	f7fe ffca 	bl	1a8 <__aeabi_dsub>
    1214:	4622      	mov	r2, r4
    1216:	462b      	mov	r3, r5
    1218:	f7ff f97e 	bl	518 <__aeabi_dmul>
    121c:	4b36      	ldr	r3, [pc, #216]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    121e:	2200      	movs	r2, #0
    1220:	f7fe ffc4 	bl	1ac <__adddf3>
    1224:	4602      	mov	r2, r0
    1226:	460b      	mov	r3, r1
    1228:	4650      	mov	r0, sl
    122a:	4659      	mov	r1, fp
    122c:	f7ff fa9e 	bl	76c <__aeabi_ddiv>
    1230:	4642      	mov	r2, r8
    1232:	464b      	mov	r3, r9
    1234:	f7ff f970 	bl	518 <__aeabi_dmul>
    1238:	2600      	movs	r6, #0
    123a:	4682      	mov	sl, r0
    123c:	468b      	mov	fp, r1
    123e:	4632      	mov	r2, r6
    1240:	464b      	mov	r3, r9
    1242:	4630      	mov	r0, r6
    1244:	4649      	mov	r1, r9
    1246:	f7ff f967 	bl	518 <__aeabi_dmul>
    124a:	4602      	mov	r2, r0
    124c:	460b      	mov	r3, r1
    124e:	4620      	mov	r0, r4
    1250:	4629      	mov	r1, r5
    1252:	f7fe ffa9 	bl	1a8 <__aeabi_dsub>
    1256:	4632      	mov	r2, r6
    1258:	4604      	mov	r4, r0
    125a:	460d      	mov	r5, r1
    125c:	464b      	mov	r3, r9
    125e:	4640      	mov	r0, r8
    1260:	4649      	mov	r1, r9
    1262:	f7fe ffa3 	bl	1ac <__adddf3>
    1266:	4602      	mov	r2, r0
    1268:	460b      	mov	r3, r1
    126a:	4620      	mov	r0, r4
    126c:	4629      	mov	r1, r5
    126e:	f7ff fa7d 	bl	76c <__aeabi_ddiv>
    1272:	4602      	mov	r2, r0
    1274:	460b      	mov	r3, r1
    1276:	4650      	mov	r0, sl
    1278:	4659      	mov	r1, fp
    127a:	f7fe ff97 	bl	1ac <__adddf3>
    127e:	4632      	mov	r2, r6
    1280:	464b      	mov	r3, r9
    1282:	f7fe ff93 	bl	1ac <__adddf3>
    1286:	4602      	mov	r2, r0
    1288:	460b      	mov	r3, r1
    128a:	f7fe ff8f 	bl	1ac <__adddf3>
    128e:	e600      	b.n	e92 <__ieee754_acos+0x2a>
    1290:	2000      	movs	r0, #0
    1292:	2100      	movs	r1, #0
    1294:	e5fd      	b.n	e92 <__ieee754_acos+0x2a>
    1296:	a116      	add	r1, pc, #88	; (adr r1, 12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>)
    1298:	e9d1 0100 	ldrd	r0, r1, [r1]
    129c:	e5f9      	b.n	e92 <__ieee754_acos+0x2a>
    129e:	bf00      	nop
    12a0:	0dfdf709 	.word	0x0dfdf709
    12a4:	3f023de1 	.word	0x3f023de1
    12a8:	7501b288 	.word	0x7501b288
    12ac:	3f49efe0 	.word	0x3f49efe0
    12b0:	b5688f3b 	.word	0xb5688f3b
    12b4:	3fa48228 	.word	0x3fa48228
    12b8:	0e884455 	.word	0x0e884455
    12bc:	3fc9c155 	.word	0x3fc9c155
    12c0:	03eb6f7d 	.word	0x03eb6f7d
    12c4:	3fd4d612 	.word	0x3fd4d612
    12c8:	55555555 	.word	0x55555555
    12cc:	3fc55555 	.word	0x3fc55555
    12d0:	b12e9282 	.word	0xb12e9282
    12d4:	3fb3b8c5 	.word	0x3fb3b8c5
    12d8:	1b8d0159 	.word	0x1b8d0159
    12dc:	3fe6066c 	.word	0x3fe6066c
    12e0:	9c598ac8 	.word	0x9c598ac8
    12e4:	40002ae5 	.word	0x40002ae5
    12e8:	1c8a2d4b 	.word	0x1c8a2d4b
    12ec:	40033a27 	.word	0x40033a27
    12f0:	54442d18 	.word	0x54442d18
    12f4:	3ff921fb 	.word	0x3ff921fb
    12f8:	3ff00000 	.word	0x3ff00000
    12fc:	3fe00000 	.word	0x3fe00000

00001300 <__ieee754_pow>:
    1300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1304:	b093      	sub	sp, #76	; 0x4c
    1306:	e9cd 2302 	strd	r2, r3, [sp, #8]
    130a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
    130e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
    1312:	ea55 0302 	orrs.w	r3, r5, r2
    1316:	4607      	mov	r7, r0
    1318:	4688      	mov	r8, r1
    131a:	f000 84bf 	beq.w	1c9c <__ieee754_pow+0x99c>
    131e:	4b7e      	ldr	r3, [pc, #504]	; (1518 <__ieee754_pow+0x218>)
    1320:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    1324:	429c      	cmp	r4, r3
    1326:	4689      	mov	r9, r1
    1328:	4682      	mov	sl, r0
    132a:	dc09      	bgt.n	1340 <__ieee754_pow+0x40>
    132c:	d103      	bne.n	1336 <__ieee754_pow+0x36>
    132e:	b978      	cbnz	r0, 1350 <__ieee754_pow+0x50>
    1330:	42a5      	cmp	r5, r4
    1332:	dd02      	ble.n	133a <__ieee754_pow+0x3a>
    1334:	e00c      	b.n	1350 <__ieee754_pow+0x50>
    1336:	429d      	cmp	r5, r3
    1338:	dc02      	bgt.n	1340 <__ieee754_pow+0x40>
    133a:	429d      	cmp	r5, r3
    133c:	d10e      	bne.n	135c <__ieee754_pow+0x5c>
    133e:	b16a      	cbz	r2, 135c <__ieee754_pow+0x5c>
    1340:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    1344:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    1348:	ea54 030a 	orrs.w	r3, r4, sl
    134c:	f000 84a6 	beq.w	1c9c <__ieee754_pow+0x99c>
    1350:	4872      	ldr	r0, [pc, #456]	; (151c <__ieee754_pow+0x21c>)
    1352:	b013      	add	sp, #76	; 0x4c
    1354:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1358:	f00c b86e 	b.w	d438 <nan>
    135c:	f1b9 0f00 	cmp.w	r9, #0
    1360:	da39      	bge.n	13d6 <__ieee754_pow+0xd6>
    1362:	4b6f      	ldr	r3, [pc, #444]	; (1520 <__ieee754_pow+0x220>)
    1364:	429d      	cmp	r5, r3
    1366:	dc54      	bgt.n	1412 <__ieee754_pow+0x112>
    1368:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    136c:	429d      	cmp	r5, r3
    136e:	f340 84a6 	ble.w	1cbe <__ieee754_pow+0x9be>
    1372:	152b      	asrs	r3, r5, #20
    1374:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    1378:	2b14      	cmp	r3, #20
    137a:	dd0f      	ble.n	139c <__ieee754_pow+0x9c>
    137c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    1380:	fa22 f103 	lsr.w	r1, r2, r3
    1384:	fa01 f303 	lsl.w	r3, r1, r3
    1388:	4293      	cmp	r3, r2
    138a:	f040 8498 	bne.w	1cbe <__ieee754_pow+0x9be>
    138e:	f001 0101 	and.w	r1, r1, #1
    1392:	f1c1 0302 	rsb	r3, r1, #2
    1396:	9300      	str	r3, [sp, #0]
    1398:	b182      	cbz	r2, 13bc <__ieee754_pow+0xbc>
    139a:	e05e      	b.n	145a <__ieee754_pow+0x15a>
    139c:	2a00      	cmp	r2, #0
    139e:	d15a      	bne.n	1456 <__ieee754_pow+0x156>
    13a0:	f1c3 0314 	rsb	r3, r3, #20
    13a4:	fa45 f103 	asr.w	r1, r5, r3
    13a8:	fa01 f303 	lsl.w	r3, r1, r3
    13ac:	42ab      	cmp	r3, r5
    13ae:	f040 8483 	bne.w	1cb8 <__ieee754_pow+0x9b8>
    13b2:	f001 0101 	and.w	r1, r1, #1
    13b6:	f1c1 0302 	rsb	r3, r1, #2
    13ba:	9300      	str	r3, [sp, #0]
    13bc:	4b59      	ldr	r3, [pc, #356]	; (1524 <__ieee754_pow+0x224>)
    13be:	429d      	cmp	r5, r3
    13c0:	d130      	bne.n	1424 <__ieee754_pow+0x124>
    13c2:	2e00      	cmp	r6, #0
    13c4:	f280 8474 	bge.w	1cb0 <__ieee754_pow+0x9b0>
    13c8:	4956      	ldr	r1, [pc, #344]	; (1524 <__ieee754_pow+0x224>)
    13ca:	463a      	mov	r2, r7
    13cc:	4643      	mov	r3, r8
    13ce:	2000      	movs	r0, #0
    13d0:	f7ff f9cc 	bl	76c <__aeabi_ddiv>
    13d4:	e02f      	b.n	1436 <__ieee754_pow+0x136>
    13d6:	2300      	movs	r3, #0
    13d8:	9300      	str	r3, [sp, #0]
    13da:	2a00      	cmp	r2, #0
    13dc:	d13d      	bne.n	145a <__ieee754_pow+0x15a>
    13de:	4b4e      	ldr	r3, [pc, #312]	; (1518 <__ieee754_pow+0x218>)
    13e0:	429d      	cmp	r5, r3
    13e2:	d1eb      	bne.n	13bc <__ieee754_pow+0xbc>
    13e4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
    13e8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    13ec:	ea53 030a 	orrs.w	r3, r3, sl
    13f0:	f000 8454 	beq.w	1c9c <__ieee754_pow+0x99c>
    13f4:	4b4c      	ldr	r3, [pc, #304]	; (1528 <__ieee754_pow+0x228>)
    13f6:	429c      	cmp	r4, r3
    13f8:	dd0d      	ble.n	1416 <__ieee754_pow+0x116>
    13fa:	2e00      	cmp	r6, #0
    13fc:	f280 8454 	bge.w	1ca8 <__ieee754_pow+0x9a8>
    1400:	f04f 0b00 	mov.w	fp, #0
    1404:	f04f 0c00 	mov.w	ip, #0
    1408:	4658      	mov	r0, fp
    140a:	4661      	mov	r1, ip
    140c:	b013      	add	sp, #76	; 0x4c
    140e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1412:	2302      	movs	r3, #2
    1414:	e7e0      	b.n	13d8 <__ieee754_pow+0xd8>
    1416:	2e00      	cmp	r6, #0
    1418:	daf2      	bge.n	1400 <__ieee754_pow+0x100>
    141a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
    141e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
    1422:	e7f1      	b.n	1408 <__ieee754_pow+0x108>
    1424:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
    1428:	d108      	bne.n	143c <__ieee754_pow+0x13c>
    142a:	463a      	mov	r2, r7
    142c:	4643      	mov	r3, r8
    142e:	4638      	mov	r0, r7
    1430:	4641      	mov	r1, r8
    1432:	f7ff f871 	bl	518 <__aeabi_dmul>
    1436:	4683      	mov	fp, r0
    1438:	468c      	mov	ip, r1
    143a:	e7e5      	b.n	1408 <__ieee754_pow+0x108>
    143c:	4b3b      	ldr	r3, [pc, #236]	; (152c <__ieee754_pow+0x22c>)
    143e:	429e      	cmp	r6, r3
    1440:	d10b      	bne.n	145a <__ieee754_pow+0x15a>
    1442:	f1b9 0f00 	cmp.w	r9, #0
    1446:	db08      	blt.n	145a <__ieee754_pow+0x15a>
    1448:	4638      	mov	r0, r7
    144a:	4641      	mov	r1, r8
    144c:	b013      	add	sp, #76	; 0x4c
    144e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1452:	f00b bf43 	b.w	d2dc <__ieee754_sqrt>
    1456:	2300      	movs	r3, #0
    1458:	9300      	str	r3, [sp, #0]
    145a:	4638      	mov	r0, r7
    145c:	4641      	mov	r1, r8
    145e:	f00f f8c9 	bl	105f4 <fabs>
    1462:	4683      	mov	fp, r0
    1464:	468c      	mov	ip, r1
    1466:	f1ba 0f00 	cmp.w	sl, #0
    146a:	d129      	bne.n	14c0 <__ieee754_pow+0x1c0>
    146c:	b124      	cbz	r4, 1478 <__ieee754_pow+0x178>
    146e:	4b2d      	ldr	r3, [pc, #180]	; (1524 <__ieee754_pow+0x224>)
    1470:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
    1474:	429a      	cmp	r2, r3
    1476:	d123      	bne.n	14c0 <__ieee754_pow+0x1c0>
    1478:	2e00      	cmp	r6, #0
    147a:	da07      	bge.n	148c <__ieee754_pow+0x18c>
    147c:	465a      	mov	r2, fp
    147e:	4663      	mov	r3, ip
    1480:	4928      	ldr	r1, [pc, #160]	; (1524 <__ieee754_pow+0x224>)
    1482:	2000      	movs	r0, #0
    1484:	f7ff f972 	bl	76c <__aeabi_ddiv>
    1488:	4683      	mov	fp, r0
    148a:	468c      	mov	ip, r1
    148c:	f1b9 0f00 	cmp.w	r9, #0
    1490:	daba      	bge.n	1408 <__ieee754_pow+0x108>
    1492:	9b00      	ldr	r3, [sp, #0]
    1494:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    1498:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    149c:	4323      	orrs	r3, r4
    149e:	d108      	bne.n	14b2 <__ieee754_pow+0x1b2>
    14a0:	465a      	mov	r2, fp
    14a2:	4663      	mov	r3, ip
    14a4:	4658      	mov	r0, fp
    14a6:	4661      	mov	r1, ip
    14a8:	f7fe fe7e 	bl	1a8 <__aeabi_dsub>
    14ac:	4602      	mov	r2, r0
    14ae:	460b      	mov	r3, r1
    14b0:	e78e      	b.n	13d0 <__ieee754_pow+0xd0>
    14b2:	9b00      	ldr	r3, [sp, #0]
    14b4:	2b01      	cmp	r3, #1
    14b6:	d1a7      	bne.n	1408 <__ieee754_pow+0x108>
    14b8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
    14bc:	469c      	mov	ip, r3
    14be:	e7a3      	b.n	1408 <__ieee754_pow+0x108>
    14c0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
    14c4:	3b01      	subs	r3, #1
    14c6:	930c      	str	r3, [sp, #48]	; 0x30
    14c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    14ca:	9b00      	ldr	r3, [sp, #0]
    14cc:	4313      	orrs	r3, r2
    14ce:	d104      	bne.n	14da <__ieee754_pow+0x1da>
    14d0:	463a      	mov	r2, r7
    14d2:	4643      	mov	r3, r8
    14d4:	4638      	mov	r0, r7
    14d6:	4641      	mov	r1, r8
    14d8:	e7e6      	b.n	14a8 <__ieee754_pow+0x1a8>
    14da:	4b15      	ldr	r3, [pc, #84]	; (1530 <__ieee754_pow+0x230>)
    14dc:	429d      	cmp	r5, r3
    14de:	f340 80f9 	ble.w	16d4 <__ieee754_pow+0x3d4>
    14e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    14e6:	429d      	cmp	r5, r3
    14e8:	4b0f      	ldr	r3, [pc, #60]	; (1528 <__ieee754_pow+0x228>)
    14ea:	dd09      	ble.n	1500 <__ieee754_pow+0x200>
    14ec:	429c      	cmp	r4, r3
    14ee:	dc0c      	bgt.n	150a <__ieee754_pow+0x20a>
    14f0:	2e00      	cmp	r6, #0
    14f2:	da85      	bge.n	1400 <__ieee754_pow+0x100>
    14f4:	a306      	add	r3, pc, #24	; (adr r3, 1510 <__ieee754_pow+0x210>)
    14f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    14fa:	4610      	mov	r0, r2
    14fc:	4619      	mov	r1, r3
    14fe:	e798      	b.n	1432 <__ieee754_pow+0x132>
    1500:	429c      	cmp	r4, r3
    1502:	dbf5      	blt.n	14f0 <__ieee754_pow+0x1f0>
    1504:	4b07      	ldr	r3, [pc, #28]	; (1524 <__ieee754_pow+0x224>)
    1506:	429c      	cmp	r4, r3
    1508:	dd14      	ble.n	1534 <__ieee754_pow+0x234>
    150a:	2e00      	cmp	r6, #0
    150c:	dcf2      	bgt.n	14f4 <__ieee754_pow+0x1f4>
    150e:	e777      	b.n	1400 <__ieee754_pow+0x100>
    1510:	8800759c 	.word	0x8800759c
    1514:	7e37e43c 	.word	0x7e37e43c
    1518:	7ff00000 	.word	0x7ff00000
    151c:	00013501 	.word	0x00013501
    1520:	433fffff 	.word	0x433fffff
    1524:	3ff00000 	.word	0x3ff00000
    1528:	3fefffff 	.word	0x3fefffff
    152c:	3fe00000 	.word	0x3fe00000
    1530:	41e00000 	.word	0x41e00000
    1534:	4661      	mov	r1, ip
    1536:	4b62      	ldr	r3, [pc, #392]	; (16c0 <__ieee754_pow+0x3c0>)
    1538:	2200      	movs	r2, #0
    153a:	4658      	mov	r0, fp
    153c:	f7fe fe34 	bl	1a8 <__aeabi_dsub>
    1540:	a355      	add	r3, pc, #340	; (adr r3, 1698 <__ieee754_pow+0x398>)
    1542:	e9d3 2300 	ldrd	r2, r3, [r3]
    1546:	4604      	mov	r4, r0
    1548:	460d      	mov	r5, r1
    154a:	f7fe ffe5 	bl	518 <__aeabi_dmul>
    154e:	a354      	add	r3, pc, #336	; (adr r3, 16a0 <__ieee754_pow+0x3a0>)
    1550:	e9d3 2300 	ldrd	r2, r3, [r3]
    1554:	4606      	mov	r6, r0
    1556:	460f      	mov	r7, r1
    1558:	4620      	mov	r0, r4
    155a:	4629      	mov	r1, r5
    155c:	f7fe ffdc 	bl	518 <__aeabi_dmul>
    1560:	4b58      	ldr	r3, [pc, #352]	; (16c4 <__ieee754_pow+0x3c4>)
    1562:	4682      	mov	sl, r0
    1564:	468b      	mov	fp, r1
    1566:	2200      	movs	r2, #0
    1568:	4620      	mov	r0, r4
    156a:	4629      	mov	r1, r5
    156c:	f7fe ffd4 	bl	518 <__aeabi_dmul>
    1570:	4602      	mov	r2, r0
    1572:	460b      	mov	r3, r1
    1574:	a14c      	add	r1, pc, #304	; (adr r1, 16a8 <__ieee754_pow+0x3a8>)
    1576:	e9d1 0100 	ldrd	r0, r1, [r1]
    157a:	f7fe fe15 	bl	1a8 <__aeabi_dsub>
    157e:	4622      	mov	r2, r4
    1580:	462b      	mov	r3, r5
    1582:	f7fe ffc9 	bl	518 <__aeabi_dmul>
    1586:	4602      	mov	r2, r0
    1588:	460b      	mov	r3, r1
    158a:	2000      	movs	r0, #0
    158c:	494e      	ldr	r1, [pc, #312]	; (16c8 <__ieee754_pow+0x3c8>)
    158e:	f7fe fe0b 	bl	1a8 <__aeabi_dsub>
    1592:	4622      	mov	r2, r4
    1594:	462b      	mov	r3, r5
    1596:	4680      	mov	r8, r0
    1598:	4689      	mov	r9, r1
    159a:	4620      	mov	r0, r4
    159c:	4629      	mov	r1, r5
    159e:	f7fe ffbb 	bl	518 <__aeabi_dmul>
    15a2:	4602      	mov	r2, r0
    15a4:	460b      	mov	r3, r1
    15a6:	4640      	mov	r0, r8
    15a8:	4649      	mov	r1, r9
    15aa:	f7fe ffb5 	bl	518 <__aeabi_dmul>
    15ae:	a340      	add	r3, pc, #256	; (adr r3, 16b0 <__ieee754_pow+0x3b0>)
    15b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    15b4:	f7fe ffb0 	bl	518 <__aeabi_dmul>
    15b8:	4602      	mov	r2, r0
    15ba:	460b      	mov	r3, r1
    15bc:	4650      	mov	r0, sl
    15be:	4659      	mov	r1, fp
    15c0:	f7fe fdf2 	bl	1a8 <__aeabi_dsub>
    15c4:	4602      	mov	r2, r0
    15c6:	460b      	mov	r3, r1
    15c8:	4604      	mov	r4, r0
    15ca:	460d      	mov	r5, r1
    15cc:	4630      	mov	r0, r6
    15ce:	4639      	mov	r1, r7
    15d0:	f7fe fdec 	bl	1ac <__adddf3>
    15d4:	f04f 0a00 	mov.w	sl, #0
    15d8:	4632      	mov	r2, r6
    15da:	463b      	mov	r3, r7
    15dc:	4650      	mov	r0, sl
    15de:	468b      	mov	fp, r1
    15e0:	f7fe fde2 	bl	1a8 <__aeabi_dsub>
    15e4:	4602      	mov	r2, r0
    15e6:	460b      	mov	r3, r1
    15e8:	4620      	mov	r0, r4
    15ea:	4629      	mov	r1, r5
    15ec:	f7fe fddc 	bl	1a8 <__aeabi_dsub>
    15f0:	9b00      	ldr	r3, [sp, #0]
    15f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    15f4:	3b01      	subs	r3, #1
    15f6:	4313      	orrs	r3, r2
    15f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    15fc:	bf0c      	ite	eq
    15fe:	4b33      	ldreq	r3, [pc, #204]	; (16cc <__ieee754_pow+0x3cc>)
    1600:	4b2f      	ldrne	r3, [pc, #188]	; (16c0 <__ieee754_pow+0x3c0>)
    1602:	2600      	movs	r6, #0
    1604:	2200      	movs	r2, #0
    1606:	e9cd 2300 	strd	r2, r3, [sp]
    160a:	4604      	mov	r4, r0
    160c:	460d      	mov	r5, r1
    160e:	4632      	mov	r2, r6
    1610:	463b      	mov	r3, r7
    1612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1616:	f7fe fdc7 	bl	1a8 <__aeabi_dsub>
    161a:	4652      	mov	r2, sl
    161c:	465b      	mov	r3, fp
    161e:	f7fe ff7b 	bl	518 <__aeabi_dmul>
    1622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1626:	4680      	mov	r8, r0
    1628:	4689      	mov	r9, r1
    162a:	4620      	mov	r0, r4
    162c:	4629      	mov	r1, r5
    162e:	f7fe ff73 	bl	518 <__aeabi_dmul>
    1632:	4602      	mov	r2, r0
    1634:	460b      	mov	r3, r1
    1636:	4640      	mov	r0, r8
    1638:	4649      	mov	r1, r9
    163a:	f7fe fdb7 	bl	1ac <__adddf3>
    163e:	4632      	mov	r2, r6
    1640:	463b      	mov	r3, r7
    1642:	4680      	mov	r8, r0
    1644:	4689      	mov	r9, r1
    1646:	4650      	mov	r0, sl
    1648:	4659      	mov	r1, fp
    164a:	f7fe ff65 	bl	518 <__aeabi_dmul>
    164e:	460b      	mov	r3, r1
    1650:	4604      	mov	r4, r0
    1652:	460d      	mov	r5, r1
    1654:	4602      	mov	r2, r0
    1656:	4649      	mov	r1, r9
    1658:	4640      	mov	r0, r8
    165a:	e9cd 4502 	strd	r4, r5, [sp, #8]
    165e:	f7fe fda5 	bl	1ac <__adddf3>
    1662:	4b1b      	ldr	r3, [pc, #108]	; (16d0 <__ieee754_pow+0x3d0>)
    1664:	4299      	cmp	r1, r3
    1666:	4682      	mov	sl, r0
    1668:	460f      	mov	r7, r1
    166a:	460e      	mov	r6, r1
    166c:	f340 82ef 	ble.w	1c4e <__ieee754_pow+0x94e>
    1670:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    1674:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    1678:	4303      	orrs	r3, r0
    167a:	f000 81e9 	beq.w	1a50 <__ieee754_pow+0x750>
    167e:	a30e      	add	r3, pc, #56	; (adr r3, 16b8 <__ieee754_pow+0x3b8>)
    1680:	e9d3 2300 	ldrd	r2, r3, [r3]
    1684:	e9dd 0100 	ldrd	r0, r1, [sp]
    1688:	f7fe ff46 	bl	518 <__aeabi_dmul>
    168c:	a30a      	add	r3, pc, #40	; (adr r3, 16b8 <__ieee754_pow+0x3b8>)
    168e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1692:	e6ce      	b.n	1432 <__ieee754_pow+0x132>
    1694:	f3af 8000 	nop.w
    1698:	60000000 	.word	0x60000000
    169c:	3ff71547 	.word	0x3ff71547
    16a0:	f85ddf44 	.word	0xf85ddf44
    16a4:	3e54ae0b 	.word	0x3e54ae0b
    16a8:	55555555 	.word	0x55555555
    16ac:	3fd55555 	.word	0x3fd55555
    16b0:	652b82fe 	.word	0x652b82fe
    16b4:	3ff71547 	.word	0x3ff71547
    16b8:	8800759c 	.word	0x8800759c
    16bc:	7e37e43c 	.word	0x7e37e43c
    16c0:	3ff00000 	.word	0x3ff00000
    16c4:	3fd00000 	.word	0x3fd00000
    16c8:	3fe00000 	.word	0x3fe00000
    16cc:	bff00000 	.word	0xbff00000
    16d0:	408fffff 	.word	0x408fffff
    16d4:	4bd4      	ldr	r3, [pc, #848]	; (1a28 <__ieee754_pow+0x728>)
    16d6:	ea09 0303 	and.w	r3, r9, r3
    16da:	2200      	movs	r2, #0
    16dc:	b943      	cbnz	r3, 16f0 <__ieee754_pow+0x3f0>
    16de:	4658      	mov	r0, fp
    16e0:	4bd2      	ldr	r3, [pc, #840]	; (1a2c <__ieee754_pow+0x72c>)
    16e2:	4661      	mov	r1, ip
    16e4:	f7fe ff18 	bl	518 <__aeabi_dmul>
    16e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
    16ec:	4683      	mov	fp, r0
    16ee:	460c      	mov	r4, r1
    16f0:	1523      	asrs	r3, r4, #20
    16f2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    16f6:	4413      	add	r3, r2
    16f8:	930b      	str	r3, [sp, #44]	; 0x2c
    16fa:	4bcd      	ldr	r3, [pc, #820]	; (1a30 <__ieee754_pow+0x730>)
    16fc:	f3c4 0413 	ubfx	r4, r4, #0, #20
    1700:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
    1704:	429c      	cmp	r4, r3
    1706:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    170a:	dd08      	ble.n	171e <__ieee754_pow+0x41e>
    170c:	4bc9      	ldr	r3, [pc, #804]	; (1a34 <__ieee754_pow+0x734>)
    170e:	429c      	cmp	r4, r3
    1710:	f340 819c 	ble.w	1a4c <__ieee754_pow+0x74c>
    1714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1716:	3301      	adds	r3, #1
    1718:	930b      	str	r3, [sp, #44]	; 0x2c
    171a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
    171e:	2600      	movs	r6, #0
    1720:	00f3      	lsls	r3, r6, #3
    1722:	930d      	str	r3, [sp, #52]	; 0x34
    1724:	4bc4      	ldr	r3, [pc, #784]	; (1a38 <__ieee754_pow+0x738>)
    1726:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    172a:	e9d3 3400 	ldrd	r3, r4, [r3]
    172e:	4658      	mov	r0, fp
    1730:	e9cd 3408 	strd	r3, r4, [sp, #32]
    1734:	461a      	mov	r2, r3
    1736:	4629      	mov	r1, r5
    1738:	4623      	mov	r3, r4
    173a:	f7fe fd35 	bl	1a8 <__aeabi_dsub>
    173e:	46da      	mov	sl, fp
    1740:	4652      	mov	r2, sl
    1742:	462b      	mov	r3, r5
    1744:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    1748:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    174c:	f7fe fd2e 	bl	1ac <__adddf3>
    1750:	4602      	mov	r2, r0
    1752:	460b      	mov	r3, r1
    1754:	2000      	movs	r0, #0
    1756:	49b9      	ldr	r1, [pc, #740]	; (1a3c <__ieee754_pow+0x73c>)
    1758:	f7ff f808 	bl	76c <__aeabi_ddiv>
    175c:	4602      	mov	r2, r0
    175e:	460b      	mov	r3, r1
    1760:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1764:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    1768:	f7fe fed6 	bl	518 <__aeabi_dmul>
    176c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1770:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    1774:	e9cd 3404 	strd	r3, r4, [sp, #16]
    1778:	2300      	movs	r3, #0
    177a:	9304      	str	r3, [sp, #16]
    177c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    1780:	46ab      	mov	fp, r5
    1782:	106d      	asrs	r5, r5, #1
    1784:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
    1788:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
    178c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
    1790:	2200      	movs	r2, #0
    1792:	4640      	mov	r0, r8
    1794:	4649      	mov	r1, r9
    1796:	4614      	mov	r4, r2
    1798:	461d      	mov	r5, r3
    179a:	f7fe febd 	bl	518 <__aeabi_dmul>
    179e:	4602      	mov	r2, r0
    17a0:	460b      	mov	r3, r1
    17a2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    17a6:	f7fe fcff 	bl	1a8 <__aeabi_dsub>
    17aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    17ae:	4606      	mov	r6, r0
    17b0:	460f      	mov	r7, r1
    17b2:	4620      	mov	r0, r4
    17b4:	4629      	mov	r1, r5
    17b6:	f7fe fcf7 	bl	1a8 <__aeabi_dsub>
    17ba:	4602      	mov	r2, r0
    17bc:	460b      	mov	r3, r1
    17be:	4650      	mov	r0, sl
    17c0:	4659      	mov	r1, fp
    17c2:	f7fe fcf1 	bl	1a8 <__aeabi_dsub>
    17c6:	4642      	mov	r2, r8
    17c8:	464b      	mov	r3, r9
    17ca:	f7fe fea5 	bl	518 <__aeabi_dmul>
    17ce:	4602      	mov	r2, r0
    17d0:	460b      	mov	r3, r1
    17d2:	4630      	mov	r0, r6
    17d4:	4639      	mov	r1, r7
    17d6:	f7fe fce7 	bl	1a8 <__aeabi_dsub>
    17da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    17de:	f7fe fe9b 	bl	518 <__aeabi_dmul>
    17e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    17e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
    17ea:	4610      	mov	r0, r2
    17ec:	4619      	mov	r1, r3
    17ee:	f7fe fe93 	bl	518 <__aeabi_dmul>
    17f2:	a37b      	add	r3, pc, #492	; (adr r3, 19e0 <__ieee754_pow+0x6e0>)
    17f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    17f8:	4604      	mov	r4, r0
    17fa:	460d      	mov	r5, r1
    17fc:	f7fe fe8c 	bl	518 <__aeabi_dmul>
    1800:	a379      	add	r3, pc, #484	; (adr r3, 19e8 <__ieee754_pow+0x6e8>)
    1802:	e9d3 2300 	ldrd	r2, r3, [r3]
    1806:	f7fe fcd1 	bl	1ac <__adddf3>
    180a:	4622      	mov	r2, r4
    180c:	462b      	mov	r3, r5
    180e:	f7fe fe83 	bl	518 <__aeabi_dmul>
    1812:	a377      	add	r3, pc, #476	; (adr r3, 19f0 <__ieee754_pow+0x6f0>)
    1814:	e9d3 2300 	ldrd	r2, r3, [r3]
    1818:	f7fe fcc8 	bl	1ac <__adddf3>
    181c:	4622      	mov	r2, r4
    181e:	462b      	mov	r3, r5
    1820:	f7fe fe7a 	bl	518 <__aeabi_dmul>
    1824:	a374      	add	r3, pc, #464	; (adr r3, 19f8 <__ieee754_pow+0x6f8>)
    1826:	e9d3 2300 	ldrd	r2, r3, [r3]
    182a:	f7fe fcbf 	bl	1ac <__adddf3>
    182e:	4622      	mov	r2, r4
    1830:	462b      	mov	r3, r5
    1832:	f7fe fe71 	bl	518 <__aeabi_dmul>
    1836:	a372      	add	r3, pc, #456	; (adr r3, 1a00 <__ieee754_pow+0x700>)
    1838:	e9d3 2300 	ldrd	r2, r3, [r3]
    183c:	f7fe fcb6 	bl	1ac <__adddf3>
    1840:	4622      	mov	r2, r4
    1842:	462b      	mov	r3, r5
    1844:	f7fe fe68 	bl	518 <__aeabi_dmul>
    1848:	a36f      	add	r3, pc, #444	; (adr r3, 1a08 <__ieee754_pow+0x708>)
    184a:	e9d3 2300 	ldrd	r2, r3, [r3]
    184e:	f7fe fcad 	bl	1ac <__adddf3>
    1852:	4622      	mov	r2, r4
    1854:	4606      	mov	r6, r0
    1856:	460f      	mov	r7, r1
    1858:	462b      	mov	r3, r5
    185a:	4620      	mov	r0, r4
    185c:	4629      	mov	r1, r5
    185e:	f7fe fe5b 	bl	518 <__aeabi_dmul>
    1862:	4602      	mov	r2, r0
    1864:	460b      	mov	r3, r1
    1866:	4630      	mov	r0, r6
    1868:	4639      	mov	r1, r7
    186a:	f7fe fe55 	bl	518 <__aeabi_dmul>
    186e:	4642      	mov	r2, r8
    1870:	4604      	mov	r4, r0
    1872:	460d      	mov	r5, r1
    1874:	464b      	mov	r3, r9
    1876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    187a:	f7fe fc97 	bl	1ac <__adddf3>
    187e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    1882:	f7fe fe49 	bl	518 <__aeabi_dmul>
    1886:	4622      	mov	r2, r4
    1888:	462b      	mov	r3, r5
    188a:	f7fe fc8f 	bl	1ac <__adddf3>
    188e:	4642      	mov	r2, r8
    1890:	4606      	mov	r6, r0
    1892:	460f      	mov	r7, r1
    1894:	464b      	mov	r3, r9
    1896:	4640      	mov	r0, r8
    1898:	4649      	mov	r1, r9
    189a:	f7fe fe3d 	bl	518 <__aeabi_dmul>
    189e:	4b68      	ldr	r3, [pc, #416]	; (1a40 <__ieee754_pow+0x740>)
    18a0:	2200      	movs	r2, #0
    18a2:	4682      	mov	sl, r0
    18a4:	468b      	mov	fp, r1
    18a6:	f7fe fc81 	bl	1ac <__adddf3>
    18aa:	4632      	mov	r2, r6
    18ac:	463b      	mov	r3, r7
    18ae:	f7fe fc7d 	bl	1ac <__adddf3>
    18b2:	2400      	movs	r4, #0
    18b4:	460d      	mov	r5, r1
    18b6:	4622      	mov	r2, r4
    18b8:	460b      	mov	r3, r1
    18ba:	4640      	mov	r0, r8
    18bc:	4649      	mov	r1, r9
    18be:	f7fe fe2b 	bl	518 <__aeabi_dmul>
    18c2:	4b5f      	ldr	r3, [pc, #380]	; (1a40 <__ieee754_pow+0x740>)
    18c4:	4680      	mov	r8, r0
    18c6:	4689      	mov	r9, r1
    18c8:	2200      	movs	r2, #0
    18ca:	4620      	mov	r0, r4
    18cc:	4629      	mov	r1, r5
    18ce:	f7fe fc6b 	bl	1a8 <__aeabi_dsub>
    18d2:	4652      	mov	r2, sl
    18d4:	465b      	mov	r3, fp
    18d6:	f7fe fc67 	bl	1a8 <__aeabi_dsub>
    18da:	4602      	mov	r2, r0
    18dc:	460b      	mov	r3, r1
    18de:	4630      	mov	r0, r6
    18e0:	4639      	mov	r1, r7
    18e2:	f7fe fc61 	bl	1a8 <__aeabi_dsub>
    18e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    18ea:	f7fe fe15 	bl	518 <__aeabi_dmul>
    18ee:	4622      	mov	r2, r4
    18f0:	4606      	mov	r6, r0
    18f2:	460f      	mov	r7, r1
    18f4:	462b      	mov	r3, r5
    18f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    18fa:	f7fe fe0d 	bl	518 <__aeabi_dmul>
    18fe:	4602      	mov	r2, r0
    1900:	460b      	mov	r3, r1
    1902:	4630      	mov	r0, r6
    1904:	4639      	mov	r1, r7
    1906:	f7fe fc51 	bl	1ac <__adddf3>
    190a:	4606      	mov	r6, r0
    190c:	460f      	mov	r7, r1
    190e:	4602      	mov	r2, r0
    1910:	460b      	mov	r3, r1
    1912:	4640      	mov	r0, r8
    1914:	4649      	mov	r1, r9
    1916:	f7fe fc49 	bl	1ac <__adddf3>
    191a:	2400      	movs	r4, #0
    191c:	a33c      	add	r3, pc, #240	; (adr r3, 1a10 <__ieee754_pow+0x710>)
    191e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1922:	4620      	mov	r0, r4
    1924:	460d      	mov	r5, r1
    1926:	f7fe fdf7 	bl	518 <__aeabi_dmul>
    192a:	4642      	mov	r2, r8
    192c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1930:	464b      	mov	r3, r9
    1932:	4620      	mov	r0, r4
    1934:	4629      	mov	r1, r5
    1936:	f7fe fc37 	bl	1a8 <__aeabi_dsub>
    193a:	4602      	mov	r2, r0
    193c:	460b      	mov	r3, r1
    193e:	4630      	mov	r0, r6
    1940:	4639      	mov	r1, r7
    1942:	f7fe fc31 	bl	1a8 <__aeabi_dsub>
    1946:	a334      	add	r3, pc, #208	; (adr r3, 1a18 <__ieee754_pow+0x718>)
    1948:	e9d3 2300 	ldrd	r2, r3, [r3]
    194c:	f7fe fde4 	bl	518 <__aeabi_dmul>
    1950:	a333      	add	r3, pc, #204	; (adr r3, 1a20 <__ieee754_pow+0x720>)
    1952:	e9d3 2300 	ldrd	r2, r3, [r3]
    1956:	4606      	mov	r6, r0
    1958:	460f      	mov	r7, r1
    195a:	4620      	mov	r0, r4
    195c:	4629      	mov	r1, r5
    195e:	f7fe fddb 	bl	518 <__aeabi_dmul>
    1962:	4602      	mov	r2, r0
    1964:	460b      	mov	r3, r1
    1966:	4630      	mov	r0, r6
    1968:	4639      	mov	r1, r7
    196a:	f7fe fc1f 	bl	1ac <__adddf3>
    196e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1970:	4b34      	ldr	r3, [pc, #208]	; (1a44 <__ieee754_pow+0x744>)
    1972:	4413      	add	r3, r2
    1974:	e9d3 2300 	ldrd	r2, r3, [r3]
    1978:	f7fe fc18 	bl	1ac <__adddf3>
    197c:	4680      	mov	r8, r0
    197e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1980:	4689      	mov	r9, r1
    1982:	f7fe fd5f 	bl	444 <__aeabi_i2d>
    1986:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1988:	4b2f      	ldr	r3, [pc, #188]	; (1a48 <__ieee754_pow+0x748>)
    198a:	4413      	add	r3, r2
    198c:	e9d3 6700 	ldrd	r6, r7, [r3]
    1990:	4604      	mov	r4, r0
    1992:	460d      	mov	r5, r1
    1994:	4642      	mov	r2, r8
    1996:	464b      	mov	r3, r9
    1998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    199c:	f7fe fc06 	bl	1ac <__adddf3>
    19a0:	4632      	mov	r2, r6
    19a2:	463b      	mov	r3, r7
    19a4:	f7fe fc02 	bl	1ac <__adddf3>
    19a8:	4622      	mov	r2, r4
    19aa:	462b      	mov	r3, r5
    19ac:	f7fe fbfe 	bl	1ac <__adddf3>
    19b0:	f04f 0a00 	mov.w	sl, #0
    19b4:	4622      	mov	r2, r4
    19b6:	462b      	mov	r3, r5
    19b8:	4650      	mov	r0, sl
    19ba:	468b      	mov	fp, r1
    19bc:	f7fe fbf4 	bl	1a8 <__aeabi_dsub>
    19c0:	4632      	mov	r2, r6
    19c2:	463b      	mov	r3, r7
    19c4:	f7fe fbf0 	bl	1a8 <__aeabi_dsub>
    19c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    19cc:	f7fe fbec 	bl	1a8 <__aeabi_dsub>
    19d0:	4602      	mov	r2, r0
    19d2:	460b      	mov	r3, r1
    19d4:	4640      	mov	r0, r8
    19d6:	4649      	mov	r1, r9
    19d8:	e608      	b.n	15ec <__ieee754_pow+0x2ec>
    19da:	bf00      	nop
    19dc:	f3af 8000 	nop.w
    19e0:	4a454eef 	.word	0x4a454eef
    19e4:	3fca7e28 	.word	0x3fca7e28
    19e8:	93c9db65 	.word	0x93c9db65
    19ec:	3fcd864a 	.word	0x3fcd864a
    19f0:	a91d4101 	.word	0xa91d4101
    19f4:	3fd17460 	.word	0x3fd17460
    19f8:	518f264d 	.word	0x518f264d
    19fc:	3fd55555 	.word	0x3fd55555
    1a00:	db6fabff 	.word	0xdb6fabff
    1a04:	3fdb6db6 	.word	0x3fdb6db6
    1a08:	33333303 	.word	0x33333303
    1a0c:	3fe33333 	.word	0x3fe33333
    1a10:	e0000000 	.word	0xe0000000
    1a14:	3feec709 	.word	0x3feec709
    1a18:	dc3a03fd 	.word	0xdc3a03fd
    1a1c:	3feec709 	.word	0x3feec709
    1a20:	145b01f5 	.word	0x145b01f5
    1a24:	be3e2fe0 	.word	0xbe3e2fe0
    1a28:	7ff00000 	.word	0x7ff00000
    1a2c:	43400000 	.word	0x43400000
    1a30:	0003988e 	.word	0x0003988e
    1a34:	000bb679 	.word	0x000bb679
    1a38:	00010fc8 	.word	0x00010fc8
    1a3c:	3ff00000 	.word	0x3ff00000
    1a40:	40080000 	.word	0x40080000
    1a44:	00010fe8 	.word	0x00010fe8
    1a48:	00010fd8 	.word	0x00010fd8
    1a4c:	2601      	movs	r6, #1
    1a4e:	e667      	b.n	1720 <__ieee754_pow+0x420>
    1a50:	a39d      	add	r3, pc, #628	; (adr r3, 1cc8 <__ieee754_pow+0x9c8>)
    1a52:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a56:	4640      	mov	r0, r8
    1a58:	4649      	mov	r1, r9
    1a5a:	f7fe fba7 	bl	1ac <__adddf3>
    1a5e:	4622      	mov	r2, r4
    1a60:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1a64:	462b      	mov	r3, r5
    1a66:	4650      	mov	r0, sl
    1a68:	4639      	mov	r1, r7
    1a6a:	f7fe fb9d 	bl	1a8 <__aeabi_dsub>
    1a6e:	4602      	mov	r2, r0
    1a70:	460b      	mov	r3, r1
    1a72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1a76:	f7ff f849 	bl	b0c <__aeabi_dcmpgt>
    1a7a:	2800      	cmp	r0, #0
    1a7c:	f47f adff 	bne.w	167e <__ieee754_pow+0x37e>
    1a80:	4aa5      	ldr	r2, [pc, #660]	; (1d18 <__ieee754_pow+0xa18>)
    1a82:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
    1a86:	4293      	cmp	r3, r2
    1a88:	f340 8103 	ble.w	1c92 <__ieee754_pow+0x992>
    1a8c:	151b      	asrs	r3, r3, #20
    1a8e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
    1a92:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    1a96:	fa4a f303 	asr.w	r3, sl, r3
    1a9a:	4433      	add	r3, r6
    1a9c:	f3c3 520a 	ubfx	r2, r3, #20, #11
    1aa0:	4f9e      	ldr	r7, [pc, #632]	; (1d1c <__ieee754_pow+0xa1c>)
    1aa2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    1aa6:	4117      	asrs	r7, r2
    1aa8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
    1aac:	2000      	movs	r0, #0
    1aae:	ea23 0107 	bic.w	r1, r3, r7
    1ab2:	f1c2 0214 	rsb	r2, r2, #20
    1ab6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
    1aba:	fa4a fa02 	asr.w	sl, sl, r2
    1abe:	2e00      	cmp	r6, #0
    1ac0:	4602      	mov	r2, r0
    1ac2:	460b      	mov	r3, r1
    1ac4:	4620      	mov	r0, r4
    1ac6:	4629      	mov	r1, r5
    1ac8:	bfb8      	it	lt
    1aca:	f1ca 0a00 	rsblt	sl, sl, #0
    1ace:	f7fe fb6b 	bl	1a8 <__aeabi_dsub>
    1ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1ad6:	4642      	mov	r2, r8
    1ad8:	464b      	mov	r3, r9
    1ada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1ade:	f7fe fb65 	bl	1ac <__adddf3>
    1ae2:	2400      	movs	r4, #0
    1ae4:	a37a      	add	r3, pc, #488	; (adr r3, 1cd0 <__ieee754_pow+0x9d0>)
    1ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
    1aea:	4620      	mov	r0, r4
    1aec:	460d      	mov	r5, r1
    1aee:	f7fe fd13 	bl	518 <__aeabi_dmul>
    1af2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1af6:	4606      	mov	r6, r0
    1af8:	460f      	mov	r7, r1
    1afa:	4620      	mov	r0, r4
    1afc:	4629      	mov	r1, r5
    1afe:	f7fe fb53 	bl	1a8 <__aeabi_dsub>
    1b02:	4602      	mov	r2, r0
    1b04:	460b      	mov	r3, r1
    1b06:	4640      	mov	r0, r8
    1b08:	4649      	mov	r1, r9
    1b0a:	f7fe fb4d 	bl	1a8 <__aeabi_dsub>
    1b0e:	a372      	add	r3, pc, #456	; (adr r3, 1cd8 <__ieee754_pow+0x9d8>)
    1b10:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b14:	f7fe fd00 	bl	518 <__aeabi_dmul>
    1b18:	a371      	add	r3, pc, #452	; (adr r3, 1ce0 <__ieee754_pow+0x9e0>)
    1b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b1e:	4680      	mov	r8, r0
    1b20:	4689      	mov	r9, r1
    1b22:	4620      	mov	r0, r4
    1b24:	4629      	mov	r1, r5
    1b26:	f7fe fcf7 	bl	518 <__aeabi_dmul>
    1b2a:	4602      	mov	r2, r0
    1b2c:	460b      	mov	r3, r1
    1b2e:	4640      	mov	r0, r8
    1b30:	4649      	mov	r1, r9
    1b32:	f7fe fb3b 	bl	1ac <__adddf3>
    1b36:	4604      	mov	r4, r0
    1b38:	460d      	mov	r5, r1
    1b3a:	4602      	mov	r2, r0
    1b3c:	460b      	mov	r3, r1
    1b3e:	4630      	mov	r0, r6
    1b40:	4639      	mov	r1, r7
    1b42:	f7fe fb33 	bl	1ac <__adddf3>
    1b46:	4632      	mov	r2, r6
    1b48:	463b      	mov	r3, r7
    1b4a:	4680      	mov	r8, r0
    1b4c:	4689      	mov	r9, r1
    1b4e:	f7fe fb2b 	bl	1a8 <__aeabi_dsub>
    1b52:	4602      	mov	r2, r0
    1b54:	460b      	mov	r3, r1
    1b56:	4620      	mov	r0, r4
    1b58:	4629      	mov	r1, r5
    1b5a:	f7fe fb25 	bl	1a8 <__aeabi_dsub>
    1b5e:	4642      	mov	r2, r8
    1b60:	4606      	mov	r6, r0
    1b62:	460f      	mov	r7, r1
    1b64:	464b      	mov	r3, r9
    1b66:	4640      	mov	r0, r8
    1b68:	4649      	mov	r1, r9
    1b6a:	f7fe fcd5 	bl	518 <__aeabi_dmul>
    1b6e:	a35e      	add	r3, pc, #376	; (adr r3, 1ce8 <__ieee754_pow+0x9e8>)
    1b70:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b74:	4604      	mov	r4, r0
    1b76:	460d      	mov	r5, r1
    1b78:	f7fe fcce 	bl	518 <__aeabi_dmul>
    1b7c:	a35c      	add	r3, pc, #368	; (adr r3, 1cf0 <__ieee754_pow+0x9f0>)
    1b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b82:	f7fe fb11 	bl	1a8 <__aeabi_dsub>
    1b86:	4622      	mov	r2, r4
    1b88:	462b      	mov	r3, r5
    1b8a:	f7fe fcc5 	bl	518 <__aeabi_dmul>
    1b8e:	a35a      	add	r3, pc, #360	; (adr r3, 1cf8 <__ieee754_pow+0x9f8>)
    1b90:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b94:	f7fe fb0a 	bl	1ac <__adddf3>
    1b98:	4622      	mov	r2, r4
    1b9a:	462b      	mov	r3, r5
    1b9c:	f7fe fcbc 	bl	518 <__aeabi_dmul>
    1ba0:	a357      	add	r3, pc, #348	; (adr r3, 1d00 <__ieee754_pow+0xa00>)
    1ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ba6:	f7fe faff 	bl	1a8 <__aeabi_dsub>
    1baa:	4622      	mov	r2, r4
    1bac:	462b      	mov	r3, r5
    1bae:	f7fe fcb3 	bl	518 <__aeabi_dmul>
    1bb2:	a355      	add	r3, pc, #340	; (adr r3, 1d08 <__ieee754_pow+0xa08>)
    1bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
    1bb8:	f7fe faf8 	bl	1ac <__adddf3>
    1bbc:	4622      	mov	r2, r4
    1bbe:	462b      	mov	r3, r5
    1bc0:	f7fe fcaa 	bl	518 <__aeabi_dmul>
    1bc4:	4602      	mov	r2, r0
    1bc6:	460b      	mov	r3, r1
    1bc8:	4640      	mov	r0, r8
    1bca:	4649      	mov	r1, r9
    1bcc:	f7fe faec 	bl	1a8 <__aeabi_dsub>
    1bd0:	4604      	mov	r4, r0
    1bd2:	460d      	mov	r5, r1
    1bd4:	4602      	mov	r2, r0
    1bd6:	460b      	mov	r3, r1
    1bd8:	4640      	mov	r0, r8
    1bda:	4649      	mov	r1, r9
    1bdc:	f7fe fc9c 	bl	518 <__aeabi_dmul>
    1be0:	2200      	movs	r2, #0
    1be2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1be6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1bea:	4620      	mov	r0, r4
    1bec:	4629      	mov	r1, r5
    1bee:	f7fe fadb 	bl	1a8 <__aeabi_dsub>
    1bf2:	4602      	mov	r2, r0
    1bf4:	460b      	mov	r3, r1
    1bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1bfa:	f7fe fdb7 	bl	76c <__aeabi_ddiv>
    1bfe:	4632      	mov	r2, r6
    1c00:	4604      	mov	r4, r0
    1c02:	460d      	mov	r5, r1
    1c04:	463b      	mov	r3, r7
    1c06:	4640      	mov	r0, r8
    1c08:	4649      	mov	r1, r9
    1c0a:	f7fe fc85 	bl	518 <__aeabi_dmul>
    1c0e:	4632      	mov	r2, r6
    1c10:	463b      	mov	r3, r7
    1c12:	f7fe facb 	bl	1ac <__adddf3>
    1c16:	4602      	mov	r2, r0
    1c18:	460b      	mov	r3, r1
    1c1a:	4620      	mov	r0, r4
    1c1c:	4629      	mov	r1, r5
    1c1e:	f7fe fac3 	bl	1a8 <__aeabi_dsub>
    1c22:	4642      	mov	r2, r8
    1c24:	464b      	mov	r3, r9
    1c26:	f7fe fabf 	bl	1a8 <__aeabi_dsub>
    1c2a:	4602      	mov	r2, r0
    1c2c:	460b      	mov	r3, r1
    1c2e:	2000      	movs	r0, #0
    1c30:	493b      	ldr	r1, [pc, #236]	; (1d20 <__ieee754_pow+0xa20>)
    1c32:	f7fe fab9 	bl	1a8 <__aeabi_dsub>
    1c36:	eb01 540a 	add.w	r4, r1, sl, lsl #20
    1c3a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    1c3e:	da2b      	bge.n	1c98 <__ieee754_pow+0x998>
    1c40:	4652      	mov	r2, sl
    1c42:	f000 f875 	bl	1d30 <scalbn>
    1c46:	e9dd 2300 	ldrd	r2, r3, [sp]
    1c4a:	f7ff bbf2 	b.w	1432 <__ieee754_pow+0x132>
    1c4e:	4b35      	ldr	r3, [pc, #212]	; (1d24 <__ieee754_pow+0xa24>)
    1c50:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    1c54:	429f      	cmp	r7, r3
    1c56:	f77f af13 	ble.w	1a80 <__ieee754_pow+0x780>
    1c5a:	4b33      	ldr	r3, [pc, #204]	; (1d28 <__ieee754_pow+0xa28>)
    1c5c:	440b      	add	r3, r1
    1c5e:	4303      	orrs	r3, r0
    1c60:	d00b      	beq.n	1c7a <__ieee754_pow+0x97a>
    1c62:	a32b      	add	r3, pc, #172	; (adr r3, 1d10 <__ieee754_pow+0xa10>)
    1c64:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c68:	e9dd 0100 	ldrd	r0, r1, [sp]
    1c6c:	f7fe fc54 	bl	518 <__aeabi_dmul>
    1c70:	a327      	add	r3, pc, #156	; (adr r3, 1d10 <__ieee754_pow+0xa10>)
    1c72:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c76:	f7ff bbdc 	b.w	1432 <__ieee754_pow+0x132>
    1c7a:	4622      	mov	r2, r4
    1c7c:	462b      	mov	r3, r5
    1c7e:	f7fe fa93 	bl	1a8 <__aeabi_dsub>
    1c82:	4642      	mov	r2, r8
    1c84:	464b      	mov	r3, r9
    1c86:	f7fe ff37 	bl	af8 <__aeabi_dcmpge>
    1c8a:	2800      	cmp	r0, #0
    1c8c:	f43f aef8 	beq.w	1a80 <__ieee754_pow+0x780>
    1c90:	e7e7      	b.n	1c62 <__ieee754_pow+0x962>
    1c92:	f04f 0a00 	mov.w	sl, #0
    1c96:	e71e      	b.n	1ad6 <__ieee754_pow+0x7d6>
    1c98:	4621      	mov	r1, r4
    1c9a:	e7d4      	b.n	1c46 <__ieee754_pow+0x946>
    1c9c:	f8df c080 	ldr.w	ip, [pc, #128]	; 1d20 <__ieee754_pow+0xa20>
    1ca0:	f04f 0b00 	mov.w	fp, #0
    1ca4:	f7ff bbb0 	b.w	1408 <__ieee754_pow+0x108>
    1ca8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
    1cac:	f7ff bbac 	b.w	1408 <__ieee754_pow+0x108>
    1cb0:	4638      	mov	r0, r7
    1cb2:	4641      	mov	r1, r8
    1cb4:	f7ff bbbf 	b.w	1436 <__ieee754_pow+0x136>
    1cb8:	9200      	str	r2, [sp, #0]
    1cba:	f7ff bb7f 	b.w	13bc <__ieee754_pow+0xbc>
    1cbe:	2300      	movs	r3, #0
    1cc0:	f7ff bb69 	b.w	1396 <__ieee754_pow+0x96>
    1cc4:	f3af 8000 	nop.w
    1cc8:	652b82fe 	.word	0x652b82fe
    1ccc:	3c971547 	.word	0x3c971547
    1cd0:	00000000 	.word	0x00000000
    1cd4:	3fe62e43 	.word	0x3fe62e43
    1cd8:	fefa39ef 	.word	0xfefa39ef
    1cdc:	3fe62e42 	.word	0x3fe62e42
    1ce0:	0ca86c39 	.word	0x0ca86c39
    1ce4:	be205c61 	.word	0xbe205c61
    1ce8:	72bea4d0 	.word	0x72bea4d0
    1cec:	3e663769 	.word	0x3e663769
    1cf0:	c5d26bf1 	.word	0xc5d26bf1
    1cf4:	3ebbbd41 	.word	0x3ebbbd41
    1cf8:	af25de2c 	.word	0xaf25de2c
    1cfc:	3f11566a 	.word	0x3f11566a
    1d00:	16bebd93 	.word	0x16bebd93
    1d04:	3f66c16c 	.word	0x3f66c16c
    1d08:	5555553e 	.word	0x5555553e
    1d0c:	3fc55555 	.word	0x3fc55555
    1d10:	c2f8f359 	.word	0xc2f8f359
    1d14:	01a56e1f 	.word	0x01a56e1f
    1d18:	3fe00000 	.word	0x3fe00000
    1d1c:	000fffff 	.word	0x000fffff
    1d20:	3ff00000 	.word	0x3ff00000
    1d24:	4090cbff 	.word	0x4090cbff
    1d28:	3f6f3400 	.word	0x3f6f3400
    1d2c:	00000000 	.word	0x00000000

00001d30 <scalbn>:
    1d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d32:	f3c1 560a 	ubfx	r6, r1, #20, #11
    1d36:	4604      	mov	r4, r0
    1d38:	460d      	mov	r5, r1
    1d3a:	4617      	mov	r7, r2
    1d3c:	460b      	mov	r3, r1
    1d3e:	b996      	cbnz	r6, 1d66 <scalbn+0x36>
    1d40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    1d44:	4303      	orrs	r3, r0
    1d46:	d039      	beq.n	1dbc <scalbn+0x8c>
    1d48:	4b33      	ldr	r3, [pc, #204]	; (1e18 <scalbn+0xe8>)
    1d4a:	2200      	movs	r2, #0
    1d4c:	f7fe fbe4 	bl	518 <__aeabi_dmul>
    1d50:	4b32      	ldr	r3, [pc, #200]	; (1e1c <scalbn+0xec>)
    1d52:	429f      	cmp	r7, r3
    1d54:	4604      	mov	r4, r0
    1d56:	460d      	mov	r5, r1
    1d58:	da0f      	bge.n	1d7a <scalbn+0x4a>
    1d5a:	a32b      	add	r3, pc, #172	; (adr r3, 1e08 <scalbn+0xd8>)
    1d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d60:	f7fe fbda 	bl	518 <__aeabi_dmul>
    1d64:	e006      	b.n	1d74 <scalbn+0x44>
    1d66:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1d6a:	4296      	cmp	r6, r2
    1d6c:	d10a      	bne.n	1d84 <scalbn+0x54>
    1d6e:	4602      	mov	r2, r0
    1d70:	f7fe fa1c 	bl	1ac <__adddf3>
    1d74:	4604      	mov	r4, r0
    1d76:	460d      	mov	r5, r1
    1d78:	e020      	b.n	1dbc <scalbn+0x8c>
    1d7a:	460b      	mov	r3, r1
    1d7c:	f3c1 510a 	ubfx	r1, r1, #20, #11
    1d80:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
    1d84:	19b9      	adds	r1, r7, r6
    1d86:	f240 72fe 	movw	r2, #2046	; 0x7fe
    1d8a:	4291      	cmp	r1, r2
    1d8c:	dd0e      	ble.n	1dac <scalbn+0x7c>
    1d8e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
    1d92:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
    1d96:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
    1d9a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
    1d9e:	a31c      	add	r3, pc, #112	; (adr r3, 1e10 <scalbn+0xe0>)
    1da0:	e9d3 2300 	ldrd	r2, r3, [r3]
    1da4:	481e      	ldr	r0, [pc, #120]	; (1e20 <scalbn+0xf0>)
    1da6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
    1daa:	e7d9      	b.n	1d60 <scalbn+0x30>
    1dac:	2900      	cmp	r1, #0
    1dae:	dd08      	ble.n	1dc2 <scalbn+0x92>
    1db0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    1db4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    1db8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
    1dbc:	4620      	mov	r0, r4
    1dbe:	4629      	mov	r1, r5
    1dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dc2:	f111 0f35 	cmn.w	r1, #53	; 0x35
    1dc6:	da12      	bge.n	1dee <scalbn+0xbe>
    1dc8:	f24c 3350 	movw	r3, #50000	; 0xc350
    1dcc:	429f      	cmp	r7, r3
    1dce:	ea4f 73d5 	mov.w	r3, r5, lsr #31
    1dd2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
    1dd6:	dcdc      	bgt.n	1d92 <scalbn+0x62>
    1dd8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
    1ddc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
    1de0:	a309      	add	r3, pc, #36	; (adr r3, 1e08 <scalbn+0xd8>)
    1de2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1de6:	480f      	ldr	r0, [pc, #60]	; (1e24 <scalbn+0xf4>)
    1de8:	f041 011f 	orr.w	r1, r1, #31
    1dec:	e7b8      	b.n	1d60 <scalbn+0x30>
    1dee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    1df2:	3136      	adds	r1, #54	; 0x36
    1df4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    1df8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
    1dfc:	4620      	mov	r0, r4
    1dfe:	4b0a      	ldr	r3, [pc, #40]	; (1e28 <scalbn+0xf8>)
    1e00:	4629      	mov	r1, r5
    1e02:	2200      	movs	r2, #0
    1e04:	e7ac      	b.n	1d60 <scalbn+0x30>
    1e06:	bf00      	nop
    1e08:	c2f8f359 	.word	0xc2f8f359
    1e0c:	01a56e1f 	.word	0x01a56e1f
    1e10:	8800759c 	.word	0x8800759c
    1e14:	7e37e43c 	.word	0x7e37e43c
    1e18:	43500000 	.word	0x43500000
    1e1c:	ffff3cb0 	.word	0xffff3cb0
    1e20:	8800759c 	.word	0x8800759c
    1e24:	c2f8f359 	.word	0xc2f8f359
    1e28:	3c900000 	.word	0x3c900000
    1e2c:	00000000 	.word	0x00000000

00001e30 <_gcvt>:
    1e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1e34:	4690      	mov	r8, r2
    1e36:	b08b      	sub	sp, #44	; 0x2c
    1e38:	461c      	mov	r4, r3
    1e3a:	4681      	mov	r9, r0
    1e3c:	2200      	movs	r2, #0
    1e3e:	2300      	movs	r3, #0
    1e40:	4640      	mov	r0, r8
    1e42:	4621      	mov	r1, r4
    1e44:	e9dd 7512 	ldrd	r7, r5, [sp, #72]	; 0x48
    1e48:	9e15      	ldr	r6, [sp, #84]	; 0x54
    1e4a:	f7fe fe41 	bl	ad0 <__aeabi_dcmplt>
    1e4e:	b108      	cbz	r0, 1e54 <_gcvt+0x24>
    1e50:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    1e54:	2200      	movs	r2, #0
    1e56:	2300      	movs	r3, #0
    1e58:	4640      	mov	r0, r8
    1e5a:	4621      	mov	r1, r4
    1e5c:	f7fe fe2e 	bl	abc <__aeabi_dcmpeq>
    1e60:	b138      	cbz	r0, 1e72 <_gcvt+0x42>
    1e62:	2330      	movs	r3, #48	; 0x30
    1e64:	702b      	strb	r3, [r5, #0]
    1e66:	2300      	movs	r3, #0
    1e68:	706b      	strb	r3, [r5, #1]
    1e6a:	4628      	mov	r0, r5
    1e6c:	b00b      	add	sp, #44	; 0x2c
    1e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1e72:	a34d      	add	r3, pc, #308	; (adr r3, 1fa8 <_gcvt+0x178>)
    1e74:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e78:	4640      	mov	r0, r8
    1e7a:	4621      	mov	r1, r4
    1e7c:	f7fe fe32 	bl	ae4 <__aeabi_dcmple>
    1e80:	b160      	cbz	r0, 1e9c <_gcvt+0x6c>
    1e82:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    1e86:	9301      	str	r3, [sp, #4]
    1e88:	3f01      	subs	r7, #1
    1e8a:	9602      	str	r6, [sp, #8]
    1e8c:	9700      	str	r7, [sp, #0]
    1e8e:	4642      	mov	r2, r8
    1e90:	4623      	mov	r3, r4
    1e92:	4629      	mov	r1, r5
    1e94:	4648      	mov	r0, r9
    1e96:	f00e fc13 	bl	106c0 <print_e>
    1e9a:	e7e6      	b.n	1e6a <_gcvt+0x3a>
    1e9c:	4638      	mov	r0, r7
    1e9e:	f00c f883 	bl	dfa8 <_mprec_log10>
    1ea2:	4642      	mov	r2, r8
    1ea4:	4623      	mov	r3, r4
    1ea6:	f7fe fe1d 	bl	ae4 <__aeabi_dcmple>
    1eaa:	2800      	cmp	r0, #0
    1eac:	d1e9      	bne.n	1e82 <_gcvt+0x52>
    1eae:	ab09      	add	r3, sp, #36	; 0x24
    1eb0:	9304      	str	r3, [sp, #16]
    1eb2:	ab08      	add	r3, sp, #32
    1eb4:	9303      	str	r3, [sp, #12]
    1eb6:	ab07      	add	r3, sp, #28
    1eb8:	e9cd 7301 	strd	r7, r3, [sp, #4]
    1ebc:	2302      	movs	r3, #2
    1ebe:	9300      	str	r3, [sp, #0]
    1ec0:	4642      	mov	r2, r8
    1ec2:	4623      	mov	r3, r4
    1ec4:	4648      	mov	r0, r9
    1ec6:	f000 f873 	bl	1fb0 <_dtoa_r>
    1eca:	9a07      	ldr	r2, [sp, #28]
    1ecc:	f242 730f 	movw	r3, #9999	; 0x270f
    1ed0:	429a      	cmp	r2, r3
    1ed2:	4601      	mov	r1, r0
    1ed4:	d00f      	beq.n	1ef6 <_gcvt+0xc6>
    1ed6:	462b      	mov	r3, r5
    1ed8:	442f      	add	r7, r5
    1eda:	4608      	mov	r0, r1
    1edc:	f811 cb01 	ldrb.w	ip, [r1], #1
    1ee0:	9a07      	ldr	r2, [sp, #28]
    1ee2:	1afc      	subs	r4, r7, r3
    1ee4:	f1bc 0f00 	cmp.w	ip, #0
    1ee8:	d001      	beq.n	1eee <_gcvt+0xbe>
    1eea:	2a00      	cmp	r2, #0
    1eec:	dc07      	bgt.n	1efe <_gcvt+0xce>
    1eee:	2100      	movs	r1, #0
    1ef0:	f04f 0c30 	mov.w	ip, #48	; 0x30
    1ef4:	e00c      	b.n	1f10 <_gcvt+0xe0>
    1ef6:	4628      	mov	r0, r5
    1ef8:	f00e fdce 	bl	10a98 <strcpy>
    1efc:	e7b5      	b.n	1e6a <_gcvt+0x3a>
    1efe:	3a01      	subs	r2, #1
    1f00:	f803 cb01 	strb.w	ip, [r3], #1
    1f04:	9207      	str	r2, [sp, #28]
    1f06:	e7e8      	b.n	1eda <_gcvt+0xaa>
    1f08:	f803 cb01 	strb.w	ip, [r3], #1
    1f0c:	3c01      	subs	r4, #1
    1f0e:	2101      	movs	r1, #1
    1f10:	2a00      	cmp	r2, #0
    1f12:	4617      	mov	r7, r2
    1f14:	dc2a      	bgt.n	1f6c <_gcvt+0x13c>
    1f16:	b101      	cbz	r1, 1f1a <_gcvt+0xea>
    1f18:	9207      	str	r2, [sp, #28]
    1f1a:	b90e      	cbnz	r6, 1f20 <_gcvt+0xf0>
    1f1c:	7802      	ldrb	r2, [r0, #0]
    1f1e:	b312      	cbz	r2, 1f66 <_gcvt+0x136>
    1f20:	42ab      	cmp	r3, r5
    1f22:	bf04      	itt	eq
    1f24:	2230      	moveq	r2, #48	; 0x30
    1f26:	f803 2b01 	strbeq.w	r2, [r3], #1
    1f2a:	222e      	movs	r2, #46	; 0x2e
    1f2c:	701a      	strb	r2, [r3, #0]
    1f2e:	9a07      	ldr	r2, [sp, #28]
    1f30:	4619      	mov	r1, r3
    1f32:	2700      	movs	r7, #0
    1f34:	eba2 0c03 	sub.w	ip, r2, r3
    1f38:	f04f 0e30 	mov.w	lr, #48	; 0x30
    1f3c:	eb1c 0f01 	cmn.w	ip, r1
    1f40:	d41c      	bmi.n	1f7c <_gcvt+0x14c>
    1f42:	2a00      	cmp	r2, #0
    1f44:	f1c2 0100 	rsb	r1, r2, #0
    1f48:	bfc8      	it	gt
    1f4a:	2100      	movgt	r1, #0
    1f4c:	f101 0c01 	add.w	ip, r1, #1
    1f50:	4463      	add	r3, ip
    1f52:	440a      	add	r2, r1
    1f54:	b107      	cbz	r7, 1f58 <_gcvt+0x128>
    1f56:	9207      	str	r2, [sp, #28]
    1f58:	1e42      	subs	r2, r0, #1
    1f5a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1f5e:	b109      	cbz	r1, 1f64 <_gcvt+0x134>
    1f60:	2c00      	cmp	r4, #0
    1f62:	dc0f      	bgt.n	1f84 <_gcvt+0x154>
    1f64:	b9de      	cbnz	r6, 1f9e <_gcvt+0x16e>
    1f66:	2200      	movs	r2, #0
    1f68:	701a      	strb	r2, [r3, #0]
    1f6a:	e77e      	b.n	1e6a <_gcvt+0x3a>
    1f6c:	2c00      	cmp	r4, #0
    1f6e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    1f72:	dcc9      	bgt.n	1f08 <_gcvt+0xd8>
    1f74:	2900      	cmp	r1, #0
    1f76:	d0d0      	beq.n	1f1a <_gcvt+0xea>
    1f78:	9707      	str	r7, [sp, #28]
    1f7a:	e7ce      	b.n	1f1a <_gcvt+0xea>
    1f7c:	f801 ef01 	strb.w	lr, [r1, #1]!
    1f80:	2701      	movs	r7, #1
    1f82:	e7db      	b.n	1f3c <_gcvt+0x10c>
    1f84:	f803 1b01 	strb.w	r1, [r3], #1
    1f88:	3c01      	subs	r4, #1
    1f8a:	e7e6      	b.n	1f5a <_gcvt+0x12a>
    1f8c:	f802 6b01 	strb.w	r6, [r2], #1
    1f90:	1a81      	subs	r1, r0, r2
    1f92:	2900      	cmp	r1, #0
    1f94:	dcfa      	bgt.n	1f8c <_gcvt+0x15c>
    1f96:	2c00      	cmp	r4, #0
    1f98:	bfa8      	it	ge
    1f9a:	191b      	addge	r3, r3, r4
    1f9c:	e7e3      	b.n	1f66 <_gcvt+0x136>
    1f9e:	461a      	mov	r2, r3
    1fa0:	1918      	adds	r0, r3, r4
    1fa2:	2630      	movs	r6, #48	; 0x30
    1fa4:	e7f4      	b.n	1f90 <_gcvt+0x160>
    1fa6:	bf00      	nop
    1fa8:	eb1c432d 	.word	0xeb1c432d
    1fac:	3f1a36e2 	.word	0x3f1a36e2

00001fb0 <_dtoa_r>:
    1fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fb4:	6a44      	ldr	r4, [r0, #36]	; 0x24
    1fb6:	b099      	sub	sp, #100	; 0x64
    1fb8:	4616      	mov	r6, r2
    1fba:	461f      	mov	r7, r3
    1fbc:	e9cd 6704 	strd	r6, r7, [sp, #16]
    1fc0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    1fc4:	4605      	mov	r5, r0
    1fc6:	b974      	cbnz	r4, 1fe6 <_dtoa_r+0x36>
    1fc8:	2010      	movs	r0, #16
    1fca:	f00b fb07 	bl	d5dc <malloc>
    1fce:	4602      	mov	r2, r0
    1fd0:	6268      	str	r0, [r5, #36]	; 0x24
    1fd2:	b920      	cbnz	r0, 1fde <_dtoa_r+0x2e>
    1fd4:	4ba8      	ldr	r3, [pc, #672]	; (2278 <_dtoa_r+0x2c8>)
    1fd6:	21ea      	movs	r1, #234	; 0xea
    1fd8:	48a8      	ldr	r0, [pc, #672]	; (227c <_dtoa_r+0x2cc>)
    1fda:	f00c fb29 	bl	e630 <__assert_func>
    1fde:	e9c0 4401 	strd	r4, r4, [r0, #4]
    1fe2:	6004      	str	r4, [r0, #0]
    1fe4:	60c4      	str	r4, [r0, #12]
    1fe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1fe8:	6819      	ldr	r1, [r3, #0]
    1fea:	b151      	cbz	r1, 2002 <_dtoa_r+0x52>
    1fec:	685a      	ldr	r2, [r3, #4]
    1fee:	604a      	str	r2, [r1, #4]
    1ff0:	2301      	movs	r3, #1
    1ff2:	4093      	lsls	r3, r2
    1ff4:	608b      	str	r3, [r1, #8]
    1ff6:	4628      	mov	r0, r5
    1ff8:	f00b fd02 	bl	da00 <_Bfree>
    1ffc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1ffe:	2200      	movs	r2, #0
    2000:	601a      	str	r2, [r3, #0]
    2002:	1e3b      	subs	r3, r7, #0
    2004:	bfb9      	ittee	lt
    2006:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    200a:	9305      	strlt	r3, [sp, #20]
    200c:	2300      	movge	r3, #0
    200e:	f8c8 3000 	strge.w	r3, [r8]
    2012:	f8dd 9014 	ldr.w	r9, [sp, #20]
    2016:	4b9a      	ldr	r3, [pc, #616]	; (2280 <_dtoa_r+0x2d0>)
    2018:	bfbc      	itt	lt
    201a:	2201      	movlt	r2, #1
    201c:	f8c8 2000 	strlt.w	r2, [r8]
    2020:	ea33 0309 	bics.w	r3, r3, r9
    2024:	d119      	bne.n	205a <_dtoa_r+0xaa>
    2026:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2028:	f242 730f 	movw	r3, #9999	; 0x270f
    202c:	6013      	str	r3, [r2, #0]
    202e:	f3c9 0313 	ubfx	r3, r9, #0, #20
    2032:	4333      	orrs	r3, r6
    2034:	f000 8580 	beq.w	2b38 <_dtoa_r+0xb88>
    2038:	9b26      	ldr	r3, [sp, #152]	; 0x98
    203a:	b953      	cbnz	r3, 2052 <_dtoa_r+0xa2>
    203c:	4b91      	ldr	r3, [pc, #580]	; (2284 <_dtoa_r+0x2d4>)
    203e:	e022      	b.n	2086 <_dtoa_r+0xd6>
    2040:	4b91      	ldr	r3, [pc, #580]	; (2288 <_dtoa_r+0x2d8>)
    2042:	9303      	str	r3, [sp, #12]
    2044:	3308      	adds	r3, #8
    2046:	9a26      	ldr	r2, [sp, #152]	; 0x98
    2048:	6013      	str	r3, [r2, #0]
    204a:	9803      	ldr	r0, [sp, #12]
    204c:	b019      	add	sp, #100	; 0x64
    204e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2052:	4b8c      	ldr	r3, [pc, #560]	; (2284 <_dtoa_r+0x2d4>)
    2054:	9303      	str	r3, [sp, #12]
    2056:	3303      	adds	r3, #3
    2058:	e7f5      	b.n	2046 <_dtoa_r+0x96>
    205a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    205e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    2062:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    2066:	2200      	movs	r2, #0
    2068:	2300      	movs	r3, #0
    206a:	f7fe fd27 	bl	abc <__aeabi_dcmpeq>
    206e:	4680      	mov	r8, r0
    2070:	b158      	cbz	r0, 208a <_dtoa_r+0xda>
    2072:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2074:	2301      	movs	r3, #1
    2076:	6013      	str	r3, [r2, #0]
    2078:	9b26      	ldr	r3, [sp, #152]	; 0x98
    207a:	2b00      	cmp	r3, #0
    207c:	f000 8559 	beq.w	2b32 <_dtoa_r+0xb82>
    2080:	4882      	ldr	r0, [pc, #520]	; (228c <_dtoa_r+0x2dc>)
    2082:	6018      	str	r0, [r3, #0]
    2084:	1e43      	subs	r3, r0, #1
    2086:	9303      	str	r3, [sp, #12]
    2088:	e7df      	b.n	204a <_dtoa_r+0x9a>
    208a:	ab16      	add	r3, sp, #88	; 0x58
    208c:	9301      	str	r3, [sp, #4]
    208e:	ab17      	add	r3, sp, #92	; 0x5c
    2090:	9300      	str	r3, [sp, #0]
    2092:	4628      	mov	r0, r5
    2094:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    2098:	f00b ff2a 	bl	def0 <__d2b>
    209c:	f3c9 540a 	ubfx	r4, r9, #20, #11
    20a0:	4683      	mov	fp, r0
    20a2:	2c00      	cmp	r4, #0
    20a4:	d07e      	beq.n	21a4 <_dtoa_r+0x1f4>
    20a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    20a8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    20ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
    20b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    20b4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    20b8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    20bc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    20c0:	4b73      	ldr	r3, [pc, #460]	; (2290 <_dtoa_r+0x2e0>)
    20c2:	2200      	movs	r2, #0
    20c4:	f7fe f870 	bl	1a8 <__aeabi_dsub>
    20c8:	a365      	add	r3, pc, #404	; (adr r3, 2260 <_dtoa_r+0x2b0>)
    20ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    20ce:	f7fe fa23 	bl	518 <__aeabi_dmul>
    20d2:	a365      	add	r3, pc, #404	; (adr r3, 2268 <_dtoa_r+0x2b8>)
    20d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    20d8:	f7fe f868 	bl	1ac <__adddf3>
    20dc:	4606      	mov	r6, r0
    20de:	4620      	mov	r0, r4
    20e0:	460f      	mov	r7, r1
    20e2:	f7fe f9af 	bl	444 <__aeabi_i2d>
    20e6:	a362      	add	r3, pc, #392	; (adr r3, 2270 <_dtoa_r+0x2c0>)
    20e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    20ec:	f7fe fa14 	bl	518 <__aeabi_dmul>
    20f0:	4602      	mov	r2, r0
    20f2:	460b      	mov	r3, r1
    20f4:	4630      	mov	r0, r6
    20f6:	4639      	mov	r1, r7
    20f8:	f7fe f858 	bl	1ac <__adddf3>
    20fc:	4606      	mov	r6, r0
    20fe:	460f      	mov	r7, r1
    2100:	f7fe fd24 	bl	b4c <__aeabi_d2iz>
    2104:	2200      	movs	r2, #0
    2106:	4682      	mov	sl, r0
    2108:	2300      	movs	r3, #0
    210a:	4630      	mov	r0, r6
    210c:	4639      	mov	r1, r7
    210e:	f7fe fcdf 	bl	ad0 <__aeabi_dcmplt>
    2112:	b148      	cbz	r0, 2128 <_dtoa_r+0x178>
    2114:	4650      	mov	r0, sl
    2116:	f7fe f995 	bl	444 <__aeabi_i2d>
    211a:	4632      	mov	r2, r6
    211c:	463b      	mov	r3, r7
    211e:	f7fe fccd 	bl	abc <__aeabi_dcmpeq>
    2122:	b908      	cbnz	r0, 2128 <_dtoa_r+0x178>
    2124:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2128:	f1ba 0f16 	cmp.w	sl, #22
    212c:	d857      	bhi.n	21de <_dtoa_r+0x22e>
    212e:	4b59      	ldr	r3, [pc, #356]	; (2294 <_dtoa_r+0x2e4>)
    2130:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    2134:	e9d3 2300 	ldrd	r2, r3, [r3]
    2138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    213c:	f7fe fcc8 	bl	ad0 <__aeabi_dcmplt>
    2140:	2800      	cmp	r0, #0
    2142:	d04e      	beq.n	21e2 <_dtoa_r+0x232>
    2144:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2148:	2300      	movs	r3, #0
    214a:	930f      	str	r3, [sp, #60]	; 0x3c
    214c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    214e:	1b1c      	subs	r4, r3, r4
    2150:	1e63      	subs	r3, r4, #1
    2152:	9309      	str	r3, [sp, #36]	; 0x24
    2154:	bf45      	ittet	mi
    2156:	f1c4 0301 	rsbmi	r3, r4, #1
    215a:	9306      	strmi	r3, [sp, #24]
    215c:	2300      	movpl	r3, #0
    215e:	2300      	movmi	r3, #0
    2160:	bf4c      	ite	mi
    2162:	9309      	strmi	r3, [sp, #36]	; 0x24
    2164:	9306      	strpl	r3, [sp, #24]
    2166:	f1ba 0f00 	cmp.w	sl, #0
    216a:	db3c      	blt.n	21e6 <_dtoa_r+0x236>
    216c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    216e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    2172:	4453      	add	r3, sl
    2174:	9309      	str	r3, [sp, #36]	; 0x24
    2176:	2300      	movs	r3, #0
    2178:	930a      	str	r3, [sp, #40]	; 0x28
    217a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    217c:	2b09      	cmp	r3, #9
    217e:	f200 808d 	bhi.w	229c <_dtoa_r+0x2ec>
    2182:	2b05      	cmp	r3, #5
    2184:	bfc4      	itt	gt
    2186:	3b04      	subgt	r3, #4
    2188:	9322      	strgt	r3, [sp, #136]	; 0x88
    218a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    218c:	f1a3 0302 	sub.w	r3, r3, #2
    2190:	bfcc      	ite	gt
    2192:	2400      	movgt	r4, #0
    2194:	2401      	movle	r4, #1
    2196:	2b03      	cmp	r3, #3
    2198:	f200 808c 	bhi.w	22b4 <_dtoa_r+0x304>
    219c:	e8df f003 	tbb	[pc, r3]
    21a0:	5b4d4f2d 	.word	0x5b4d4f2d
    21a4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    21a8:	441c      	add	r4, r3
    21aa:	f204 4332 	addw	r3, r4, #1074	; 0x432
    21ae:	2b20      	cmp	r3, #32
    21b0:	bfc3      	ittte	gt
    21b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    21b6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    21ba:	fa09 f303 	lslgt.w	r3, r9, r3
    21be:	f1c3 0320 	rsble	r3, r3, #32
    21c2:	bfc6      	itte	gt
    21c4:	fa26 f000 	lsrgt.w	r0, r6, r0
    21c8:	4318      	orrgt	r0, r3
    21ca:	fa06 f003 	lslle.w	r0, r6, r3
    21ce:	f7fe f929 	bl	424 <__aeabi_ui2d>
    21d2:	2301      	movs	r3, #1
    21d4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    21d8:	3c01      	subs	r4, #1
    21da:	9313      	str	r3, [sp, #76]	; 0x4c
    21dc:	e770      	b.n	20c0 <_dtoa_r+0x110>
    21de:	2301      	movs	r3, #1
    21e0:	e7b3      	b.n	214a <_dtoa_r+0x19a>
    21e2:	900f      	str	r0, [sp, #60]	; 0x3c
    21e4:	e7b2      	b.n	214c <_dtoa_r+0x19c>
    21e6:	9b06      	ldr	r3, [sp, #24]
    21e8:	eba3 030a 	sub.w	r3, r3, sl
    21ec:	9306      	str	r3, [sp, #24]
    21ee:	f1ca 0300 	rsb	r3, sl, #0
    21f2:	930a      	str	r3, [sp, #40]	; 0x28
    21f4:	2300      	movs	r3, #0
    21f6:	930e      	str	r3, [sp, #56]	; 0x38
    21f8:	e7bf      	b.n	217a <_dtoa_r+0x1ca>
    21fa:	2300      	movs	r3, #0
    21fc:	930b      	str	r3, [sp, #44]	; 0x2c
    21fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2200:	2b00      	cmp	r3, #0
    2202:	dc5a      	bgt.n	22ba <_dtoa_r+0x30a>
    2204:	f04f 0901 	mov.w	r9, #1
    2208:	f8cd 9020 	str.w	r9, [sp, #32]
    220c:	464b      	mov	r3, r9
    220e:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    2212:	6a68      	ldr	r0, [r5, #36]	; 0x24
    2214:	2200      	movs	r2, #0
    2216:	6042      	str	r2, [r0, #4]
    2218:	2204      	movs	r2, #4
    221a:	f102 0614 	add.w	r6, r2, #20
    221e:	429e      	cmp	r6, r3
    2220:	6841      	ldr	r1, [r0, #4]
    2222:	d950      	bls.n	22c6 <_dtoa_r+0x316>
    2224:	4628      	mov	r0, r5
    2226:	f00b fbab 	bl	d980 <_Balloc>
    222a:	9003      	str	r0, [sp, #12]
    222c:	2800      	cmp	r0, #0
    222e:	d14e      	bne.n	22ce <_dtoa_r+0x31e>
    2230:	4b19      	ldr	r3, [pc, #100]	; (2298 <_dtoa_r+0x2e8>)
    2232:	4602      	mov	r2, r0
    2234:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    2238:	e6ce      	b.n	1fd8 <_dtoa_r+0x28>
    223a:	2301      	movs	r3, #1
    223c:	e7de      	b.n	21fc <_dtoa_r+0x24c>
    223e:	2300      	movs	r3, #0
    2240:	930b      	str	r3, [sp, #44]	; 0x2c
    2242:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2244:	eb0a 0903 	add.w	r9, sl, r3
    2248:	f109 0301 	add.w	r3, r9, #1
    224c:	2b01      	cmp	r3, #1
    224e:	9308      	str	r3, [sp, #32]
    2250:	bfb8      	it	lt
    2252:	2301      	movlt	r3, #1
    2254:	e7dd      	b.n	2212 <_dtoa_r+0x262>
    2256:	2301      	movs	r3, #1
    2258:	e7f2      	b.n	2240 <_dtoa_r+0x290>
    225a:	bf00      	nop
    225c:	f3af 8000 	nop.w
    2260:	636f4361 	.word	0x636f4361
    2264:	3fd287a7 	.word	0x3fd287a7
    2268:	8b60c8b3 	.word	0x8b60c8b3
    226c:	3fc68a28 	.word	0x3fc68a28
    2270:	509f79fb 	.word	0x509f79fb
    2274:	3fd34413 	.word	0x3fd34413
    2278:	0001340e 	.word	0x0001340e
    227c:	00013511 	.word	0x00013511
    2280:	7ff00000 	.word	0x7ff00000
    2284:	0001350b 	.word	0x0001350b
    2288:	00013502 	.word	0x00013502
    228c:	00013510 	.word	0x00013510
    2290:	3ff80000 	.word	0x3ff80000
    2294:	00011030 	.word	0x00011030
    2298:	00013482 	.word	0x00013482
    229c:	2401      	movs	r4, #1
    229e:	2300      	movs	r3, #0
    22a0:	9322      	str	r3, [sp, #136]	; 0x88
    22a2:	940b      	str	r4, [sp, #44]	; 0x2c
    22a4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    22a8:	2200      	movs	r2, #0
    22aa:	f8cd 9020 	str.w	r9, [sp, #32]
    22ae:	2312      	movs	r3, #18
    22b0:	9223      	str	r2, [sp, #140]	; 0x8c
    22b2:	e7ae      	b.n	2212 <_dtoa_r+0x262>
    22b4:	2301      	movs	r3, #1
    22b6:	930b      	str	r3, [sp, #44]	; 0x2c
    22b8:	e7f4      	b.n	22a4 <_dtoa_r+0x2f4>
    22ba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    22be:	f8cd 9020 	str.w	r9, [sp, #32]
    22c2:	464b      	mov	r3, r9
    22c4:	e7a5      	b.n	2212 <_dtoa_r+0x262>
    22c6:	3101      	adds	r1, #1
    22c8:	6041      	str	r1, [r0, #4]
    22ca:	0052      	lsls	r2, r2, #1
    22cc:	e7a5      	b.n	221a <_dtoa_r+0x26a>
    22ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    22d0:	9a03      	ldr	r2, [sp, #12]
    22d2:	601a      	str	r2, [r3, #0]
    22d4:	9b08      	ldr	r3, [sp, #32]
    22d6:	2b0e      	cmp	r3, #14
    22d8:	f200 80a8 	bhi.w	242c <_dtoa_r+0x47c>
    22dc:	2c00      	cmp	r4, #0
    22de:	f000 80a5 	beq.w	242c <_dtoa_r+0x47c>
    22e2:	f1ba 0f00 	cmp.w	sl, #0
    22e6:	dd34      	ble.n	2352 <_dtoa_r+0x3a2>
    22e8:	4a9a      	ldr	r2, [pc, #616]	; (2554 <_dtoa_r+0x5a4>)
    22ea:	f00a 030f 	and.w	r3, sl, #15
    22ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    22f2:	e9d3 3400 	ldrd	r3, r4, [r3]
    22f6:	f41a 7f80 	tst.w	sl, #256	; 0x100
    22fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    22fe:	ea4f 142a 	mov.w	r4, sl, asr #4
    2302:	d016      	beq.n	2332 <_dtoa_r+0x382>
    2304:	4b94      	ldr	r3, [pc, #592]	; (2558 <_dtoa_r+0x5a8>)
    2306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    230a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    230e:	f7fe fa2d 	bl	76c <__aeabi_ddiv>
    2312:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2316:	f004 040f 	and.w	r4, r4, #15
    231a:	2703      	movs	r7, #3
    231c:	4e8e      	ldr	r6, [pc, #568]	; (2558 <_dtoa_r+0x5a8>)
    231e:	b954      	cbnz	r4, 2336 <_dtoa_r+0x386>
    2320:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2328:	f7fe fa20 	bl	76c <__aeabi_ddiv>
    232c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2330:	e029      	b.n	2386 <_dtoa_r+0x3d6>
    2332:	2702      	movs	r7, #2
    2334:	e7f2      	b.n	231c <_dtoa_r+0x36c>
    2336:	07e1      	lsls	r1, r4, #31
    2338:	d508      	bpl.n	234c <_dtoa_r+0x39c>
    233a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    233e:	e9d6 2300 	ldrd	r2, r3, [r6]
    2342:	f7fe f8e9 	bl	518 <__aeabi_dmul>
    2346:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    234a:	3701      	adds	r7, #1
    234c:	1064      	asrs	r4, r4, #1
    234e:	3608      	adds	r6, #8
    2350:	e7e5      	b.n	231e <_dtoa_r+0x36e>
    2352:	f000 80a5 	beq.w	24a0 <_dtoa_r+0x4f0>
    2356:	f1ca 0400 	rsb	r4, sl, #0
    235a:	4b7e      	ldr	r3, [pc, #504]	; (2554 <_dtoa_r+0x5a4>)
    235c:	4e7e      	ldr	r6, [pc, #504]	; (2558 <_dtoa_r+0x5a8>)
    235e:	f004 020f 	and.w	r2, r4, #15
    2362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2366:	e9d3 2300 	ldrd	r2, r3, [r3]
    236a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    236e:	f7fe f8d3 	bl	518 <__aeabi_dmul>
    2372:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2376:	1124      	asrs	r4, r4, #4
    2378:	2300      	movs	r3, #0
    237a:	2702      	movs	r7, #2
    237c:	2c00      	cmp	r4, #0
    237e:	f040 8084 	bne.w	248a <_dtoa_r+0x4da>
    2382:	2b00      	cmp	r3, #0
    2384:	d1d2      	bne.n	232c <_dtoa_r+0x37c>
    2386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2388:	2b00      	cmp	r3, #0
    238a:	f000 808b 	beq.w	24a4 <_dtoa_r+0x4f4>
    238e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    2392:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    2396:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    239a:	4b70      	ldr	r3, [pc, #448]	; (255c <_dtoa_r+0x5ac>)
    239c:	2200      	movs	r2, #0
    239e:	f7fe fb97 	bl	ad0 <__aeabi_dcmplt>
    23a2:	2800      	cmp	r0, #0
    23a4:	d07e      	beq.n	24a4 <_dtoa_r+0x4f4>
    23a6:	9b08      	ldr	r3, [sp, #32]
    23a8:	2b00      	cmp	r3, #0
    23aa:	d07b      	beq.n	24a4 <_dtoa_r+0x4f4>
    23ac:	f1b9 0f00 	cmp.w	r9, #0
    23b0:	dd38      	ble.n	2424 <_dtoa_r+0x474>
    23b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    23b6:	4b6a      	ldr	r3, [pc, #424]	; (2560 <_dtoa_r+0x5b0>)
    23b8:	2200      	movs	r2, #0
    23ba:	f7fe f8ad 	bl	518 <__aeabi_dmul>
    23be:	e9cd 0104 	strd	r0, r1, [sp, #16]
    23c2:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
    23c6:	3701      	adds	r7, #1
    23c8:	464c      	mov	r4, r9
    23ca:	4638      	mov	r0, r7
    23cc:	f7fe f83a 	bl	444 <__aeabi_i2d>
    23d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    23d4:	f7fe f8a0 	bl	518 <__aeabi_dmul>
    23d8:	4b62      	ldr	r3, [pc, #392]	; (2564 <_dtoa_r+0x5b4>)
    23da:	2200      	movs	r2, #0
    23dc:	f7fd fee6 	bl	1ac <__adddf3>
    23e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    23e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    23e8:	9611      	str	r6, [sp, #68]	; 0x44
    23ea:	2c00      	cmp	r4, #0
    23ec:	d15d      	bne.n	24aa <_dtoa_r+0x4fa>
    23ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    23f2:	4b5d      	ldr	r3, [pc, #372]	; (2568 <_dtoa_r+0x5b8>)
    23f4:	2200      	movs	r2, #0
    23f6:	f7fd fed7 	bl	1a8 <__aeabi_dsub>
    23fa:	4602      	mov	r2, r0
    23fc:	460b      	mov	r3, r1
    23fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2402:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2404:	4633      	mov	r3, r6
    2406:	f7fe fb81 	bl	b0c <__aeabi_dcmpgt>
    240a:	2800      	cmp	r0, #0
    240c:	f040 829c 	bne.w	2948 <_dtoa_r+0x998>
    2410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2414:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2416:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    241a:	f7fe fb59 	bl	ad0 <__aeabi_dcmplt>
    241e:	2800      	cmp	r0, #0
    2420:	f040 8290 	bne.w	2944 <_dtoa_r+0x994>
    2424:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    2428:	e9cd 3404 	strd	r3, r4, [sp, #16]
    242c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    242e:	2b00      	cmp	r3, #0
    2430:	f2c0 8152 	blt.w	26d8 <_dtoa_r+0x728>
    2434:	f1ba 0f0e 	cmp.w	sl, #14
    2438:	f300 814e 	bgt.w	26d8 <_dtoa_r+0x728>
    243c:	4b45      	ldr	r3, [pc, #276]	; (2554 <_dtoa_r+0x5a4>)
    243e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    2442:	e9d3 3400 	ldrd	r3, r4, [r3]
    2446:	e9cd 3406 	strd	r3, r4, [sp, #24]
    244a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    244c:	2b00      	cmp	r3, #0
    244e:	f280 80db 	bge.w	2608 <_dtoa_r+0x658>
    2452:	9b08      	ldr	r3, [sp, #32]
    2454:	2b00      	cmp	r3, #0
    2456:	f300 80d7 	bgt.w	2608 <_dtoa_r+0x658>
    245a:	f040 8272 	bne.w	2942 <_dtoa_r+0x992>
    245e:	4b42      	ldr	r3, [pc, #264]	; (2568 <_dtoa_r+0x5b8>)
    2460:	2200      	movs	r2, #0
    2462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    2466:	f7fe f857 	bl	518 <__aeabi_dmul>
    246a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    246e:	f7fe fb43 	bl	af8 <__aeabi_dcmpge>
    2472:	9c08      	ldr	r4, [sp, #32]
    2474:	4626      	mov	r6, r4
    2476:	2800      	cmp	r0, #0
    2478:	f040 8248 	bne.w	290c <_dtoa_r+0x95c>
    247c:	9f03      	ldr	r7, [sp, #12]
    247e:	2331      	movs	r3, #49	; 0x31
    2480:	f807 3b01 	strb.w	r3, [r7], #1
    2484:	f10a 0a01 	add.w	sl, sl, #1
    2488:	e244      	b.n	2914 <_dtoa_r+0x964>
    248a:	07e2      	lsls	r2, r4, #31
    248c:	d505      	bpl.n	249a <_dtoa_r+0x4ea>
    248e:	e9d6 2300 	ldrd	r2, r3, [r6]
    2492:	f7fe f841 	bl	518 <__aeabi_dmul>
    2496:	3701      	adds	r7, #1
    2498:	2301      	movs	r3, #1
    249a:	1064      	asrs	r4, r4, #1
    249c:	3608      	adds	r6, #8
    249e:	e76d      	b.n	237c <_dtoa_r+0x3cc>
    24a0:	2702      	movs	r7, #2
    24a2:	e770      	b.n	2386 <_dtoa_r+0x3d6>
    24a4:	9c08      	ldr	r4, [sp, #32]
    24a6:	46d0      	mov	r8, sl
    24a8:	e78f      	b.n	23ca <_dtoa_r+0x41a>
    24aa:	9903      	ldr	r1, [sp, #12]
    24ac:	4b29      	ldr	r3, [pc, #164]	; (2554 <_dtoa_r+0x5a4>)
    24ae:	4421      	add	r1, r4
    24b0:	9112      	str	r1, [sp, #72]	; 0x48
    24b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    24b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    24b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    24bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    24c0:	2900      	cmp	r1, #0
    24c2:	d055      	beq.n	2570 <_dtoa_r+0x5c0>
    24c4:	4929      	ldr	r1, [pc, #164]	; (256c <_dtoa_r+0x5bc>)
    24c6:	2000      	movs	r0, #0
    24c8:	f7fe f950 	bl	76c <__aeabi_ddiv>
    24cc:	463b      	mov	r3, r7
    24ce:	4632      	mov	r2, r6
    24d0:	f7fd fe6a 	bl	1a8 <__aeabi_dsub>
    24d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    24d8:	9f03      	ldr	r7, [sp, #12]
    24da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    24de:	f7fe fb35 	bl	b4c <__aeabi_d2iz>
    24e2:	4604      	mov	r4, r0
    24e4:	f7fd ffae 	bl	444 <__aeabi_i2d>
    24e8:	4602      	mov	r2, r0
    24ea:	460b      	mov	r3, r1
    24ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    24f0:	f7fd fe5a 	bl	1a8 <__aeabi_dsub>
    24f4:	3430      	adds	r4, #48	; 0x30
    24f6:	4602      	mov	r2, r0
    24f8:	460b      	mov	r3, r1
    24fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    24fe:	f807 4b01 	strb.w	r4, [r7], #1
    2502:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2506:	f7fe fae3 	bl	ad0 <__aeabi_dcmplt>
    250a:	2800      	cmp	r0, #0
    250c:	d174      	bne.n	25f8 <_dtoa_r+0x648>
    250e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    2512:	4912      	ldr	r1, [pc, #72]	; (255c <_dtoa_r+0x5ac>)
    2514:	2000      	movs	r0, #0
    2516:	f7fd fe47 	bl	1a8 <__aeabi_dsub>
    251a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    251e:	f7fe fad7 	bl	ad0 <__aeabi_dcmplt>
    2522:	2800      	cmp	r0, #0
    2524:	f040 80b7 	bne.w	2696 <_dtoa_r+0x6e6>
    2528:	9b12      	ldr	r3, [sp, #72]	; 0x48
    252a:	429f      	cmp	r7, r3
    252c:	f43f af7a 	beq.w	2424 <_dtoa_r+0x474>
    2530:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2534:	4b0a      	ldr	r3, [pc, #40]	; (2560 <_dtoa_r+0x5b0>)
    2536:	2200      	movs	r2, #0
    2538:	f7fd ffee 	bl	518 <__aeabi_dmul>
    253c:	4b08      	ldr	r3, [pc, #32]	; (2560 <_dtoa_r+0x5b0>)
    253e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    2542:	2200      	movs	r2, #0
    2544:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2548:	f7fd ffe6 	bl	518 <__aeabi_dmul>
    254c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2550:	e7c3      	b.n	24da <_dtoa_r+0x52a>
    2552:	bf00      	nop
    2554:	00011030 	.word	0x00011030
    2558:	00011008 	.word	0x00011008
    255c:	3ff00000 	.word	0x3ff00000
    2560:	40240000 	.word	0x40240000
    2564:	401c0000 	.word	0x401c0000
    2568:	40140000 	.word	0x40140000
    256c:	3fe00000 	.word	0x3fe00000
    2570:	4630      	mov	r0, r6
    2572:	4639      	mov	r1, r7
    2574:	f7fd ffd0 	bl	518 <__aeabi_dmul>
    2578:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    257c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    257e:	9c03      	ldr	r4, [sp, #12]
    2580:	9314      	str	r3, [sp, #80]	; 0x50
    2582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2586:	f7fe fae1 	bl	b4c <__aeabi_d2iz>
    258a:	9015      	str	r0, [sp, #84]	; 0x54
    258c:	f7fd ff5a 	bl	444 <__aeabi_i2d>
    2590:	4602      	mov	r2, r0
    2592:	460b      	mov	r3, r1
    2594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2598:	f7fd fe06 	bl	1a8 <__aeabi_dsub>
    259c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    259e:	3330      	adds	r3, #48	; 0x30
    25a0:	f804 3b01 	strb.w	r3, [r4], #1
    25a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    25a6:	429c      	cmp	r4, r3
    25a8:	4606      	mov	r6, r0
    25aa:	460f      	mov	r7, r1
    25ac:	f04f 0200 	mov.w	r2, #0
    25b0:	d124      	bne.n	25fc <_dtoa_r+0x64c>
    25b2:	4ba4      	ldr	r3, [pc, #656]	; (2844 <_dtoa_r+0x894>)
    25b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    25b8:	f7fd fdf8 	bl	1ac <__adddf3>
    25bc:	4602      	mov	r2, r0
    25be:	460b      	mov	r3, r1
    25c0:	4630      	mov	r0, r6
    25c2:	4639      	mov	r1, r7
    25c4:	f7fe faa2 	bl	b0c <__aeabi_dcmpgt>
    25c8:	2800      	cmp	r0, #0
    25ca:	d163      	bne.n	2694 <_dtoa_r+0x6e4>
    25cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    25d0:	499c      	ldr	r1, [pc, #624]	; (2844 <_dtoa_r+0x894>)
    25d2:	2000      	movs	r0, #0
    25d4:	f7fd fde8 	bl	1a8 <__aeabi_dsub>
    25d8:	4602      	mov	r2, r0
    25da:	460b      	mov	r3, r1
    25dc:	4630      	mov	r0, r6
    25de:	4639      	mov	r1, r7
    25e0:	f7fe fa76 	bl	ad0 <__aeabi_dcmplt>
    25e4:	2800      	cmp	r0, #0
    25e6:	f43f af1d 	beq.w	2424 <_dtoa_r+0x474>
    25ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
    25ec:	1e7b      	subs	r3, r7, #1
    25ee:	9314      	str	r3, [sp, #80]	; 0x50
    25f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    25f4:	2b30      	cmp	r3, #48	; 0x30
    25f6:	d0f8      	beq.n	25ea <_dtoa_r+0x63a>
    25f8:	46c2      	mov	sl, r8
    25fa:	e03b      	b.n	2674 <_dtoa_r+0x6c4>
    25fc:	4b92      	ldr	r3, [pc, #584]	; (2848 <_dtoa_r+0x898>)
    25fe:	f7fd ff8b 	bl	518 <__aeabi_dmul>
    2602:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2606:	e7bc      	b.n	2582 <_dtoa_r+0x5d2>
    2608:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    260c:	9f03      	ldr	r7, [sp, #12]
    260e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2612:	4640      	mov	r0, r8
    2614:	4649      	mov	r1, r9
    2616:	f7fe f8a9 	bl	76c <__aeabi_ddiv>
    261a:	f7fe fa97 	bl	b4c <__aeabi_d2iz>
    261e:	4604      	mov	r4, r0
    2620:	f7fd ff10 	bl	444 <__aeabi_i2d>
    2624:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2628:	f7fd ff76 	bl	518 <__aeabi_dmul>
    262c:	f104 0630 	add.w	r6, r4, #48	; 0x30
    2630:	4602      	mov	r2, r0
    2632:	460b      	mov	r3, r1
    2634:	4640      	mov	r0, r8
    2636:	4649      	mov	r1, r9
    2638:	f7fd fdb6 	bl	1a8 <__aeabi_dsub>
    263c:	f807 6b01 	strb.w	r6, [r7], #1
    2640:	9e03      	ldr	r6, [sp, #12]
    2642:	f8dd c020 	ldr.w	ip, [sp, #32]
    2646:	1bbe      	subs	r6, r7, r6
    2648:	45b4      	cmp	ip, r6
    264a:	4602      	mov	r2, r0
    264c:	460b      	mov	r3, r1
    264e:	d136      	bne.n	26be <_dtoa_r+0x70e>
    2650:	f7fd fdac 	bl	1ac <__adddf3>
    2654:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2658:	4680      	mov	r8, r0
    265a:	4689      	mov	r9, r1
    265c:	f7fe fa56 	bl	b0c <__aeabi_dcmpgt>
    2660:	bb58      	cbnz	r0, 26ba <_dtoa_r+0x70a>
    2662:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2666:	4640      	mov	r0, r8
    2668:	4649      	mov	r1, r9
    266a:	f7fe fa27 	bl	abc <__aeabi_dcmpeq>
    266e:	b108      	cbz	r0, 2674 <_dtoa_r+0x6c4>
    2670:	07e1      	lsls	r1, r4, #31
    2672:	d422      	bmi.n	26ba <_dtoa_r+0x70a>
    2674:	4628      	mov	r0, r5
    2676:	4659      	mov	r1, fp
    2678:	f00b f9c2 	bl	da00 <_Bfree>
    267c:	2300      	movs	r3, #0
    267e:	703b      	strb	r3, [r7, #0]
    2680:	9b24      	ldr	r3, [sp, #144]	; 0x90
    2682:	f10a 0001 	add.w	r0, sl, #1
    2686:	6018      	str	r0, [r3, #0]
    2688:	9b26      	ldr	r3, [sp, #152]	; 0x98
    268a:	2b00      	cmp	r3, #0
    268c:	f43f acdd 	beq.w	204a <_dtoa_r+0x9a>
    2690:	601f      	str	r7, [r3, #0]
    2692:	e4da      	b.n	204a <_dtoa_r+0x9a>
    2694:	4627      	mov	r7, r4
    2696:	463b      	mov	r3, r7
    2698:	461f      	mov	r7, r3
    269a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    269e:	2a39      	cmp	r2, #57	; 0x39
    26a0:	d107      	bne.n	26b2 <_dtoa_r+0x702>
    26a2:	9a03      	ldr	r2, [sp, #12]
    26a4:	429a      	cmp	r2, r3
    26a6:	d1f7      	bne.n	2698 <_dtoa_r+0x6e8>
    26a8:	9903      	ldr	r1, [sp, #12]
    26aa:	2230      	movs	r2, #48	; 0x30
    26ac:	f108 0801 	add.w	r8, r8, #1
    26b0:	700a      	strb	r2, [r1, #0]
    26b2:	781a      	ldrb	r2, [r3, #0]
    26b4:	3201      	adds	r2, #1
    26b6:	701a      	strb	r2, [r3, #0]
    26b8:	e79e      	b.n	25f8 <_dtoa_r+0x648>
    26ba:	46d0      	mov	r8, sl
    26bc:	e7eb      	b.n	2696 <_dtoa_r+0x6e6>
    26be:	4b62      	ldr	r3, [pc, #392]	; (2848 <_dtoa_r+0x898>)
    26c0:	2200      	movs	r2, #0
    26c2:	f7fd ff29 	bl	518 <__aeabi_dmul>
    26c6:	2200      	movs	r2, #0
    26c8:	2300      	movs	r3, #0
    26ca:	4680      	mov	r8, r0
    26cc:	4689      	mov	r9, r1
    26ce:	f7fe f9f5 	bl	abc <__aeabi_dcmpeq>
    26d2:	2800      	cmp	r0, #0
    26d4:	d09b      	beq.n	260e <_dtoa_r+0x65e>
    26d6:	e7cd      	b.n	2674 <_dtoa_r+0x6c4>
    26d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    26da:	2a00      	cmp	r2, #0
    26dc:	f000 80d0 	beq.w	2880 <_dtoa_r+0x8d0>
    26e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    26e2:	2a01      	cmp	r2, #1
    26e4:	f300 80b2 	bgt.w	284c <_dtoa_r+0x89c>
    26e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    26ea:	2a00      	cmp	r2, #0
    26ec:	f000 80a6 	beq.w	283c <_dtoa_r+0x88c>
    26f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
    26f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    26f6:	9f06      	ldr	r7, [sp, #24]
    26f8:	9a06      	ldr	r2, [sp, #24]
    26fa:	441a      	add	r2, r3
    26fc:	9206      	str	r2, [sp, #24]
    26fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2700:	2101      	movs	r1, #1
    2702:	441a      	add	r2, r3
    2704:	4628      	mov	r0, r5
    2706:	9209      	str	r2, [sp, #36]	; 0x24
    2708:	f00b f9e2 	bl	dad0 <__i2b>
    270c:	4606      	mov	r6, r0
    270e:	2f00      	cmp	r7, #0
    2710:	dd0c      	ble.n	272c <_dtoa_r+0x77c>
    2712:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2714:	2b00      	cmp	r3, #0
    2716:	dd09      	ble.n	272c <_dtoa_r+0x77c>
    2718:	42bb      	cmp	r3, r7
    271a:	9a06      	ldr	r2, [sp, #24]
    271c:	bfa8      	it	ge
    271e:	463b      	movge	r3, r7
    2720:	1ad2      	subs	r2, r2, r3
    2722:	9206      	str	r2, [sp, #24]
    2724:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2726:	1aff      	subs	r7, r7, r3
    2728:	1ad3      	subs	r3, r2, r3
    272a:	9309      	str	r3, [sp, #36]	; 0x24
    272c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    272e:	b1f3      	cbz	r3, 276e <_dtoa_r+0x7be>
    2730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2732:	2b00      	cmp	r3, #0
    2734:	f000 80a8 	beq.w	2888 <_dtoa_r+0x8d8>
    2738:	2c00      	cmp	r4, #0
    273a:	dd10      	ble.n	275e <_dtoa_r+0x7ae>
    273c:	4631      	mov	r1, r6
    273e:	4622      	mov	r2, r4
    2740:	4628      	mov	r0, r5
    2742:	f00b fa83 	bl	dc4c <__pow5mult>
    2746:	465a      	mov	r2, fp
    2748:	4601      	mov	r1, r0
    274a:	4606      	mov	r6, r0
    274c:	4628      	mov	r0, r5
    274e:	f00b f9d5 	bl	dafc <__multiply>
    2752:	4659      	mov	r1, fp
    2754:	4680      	mov	r8, r0
    2756:	4628      	mov	r0, r5
    2758:	f00b f952 	bl	da00 <_Bfree>
    275c:	46c3      	mov	fp, r8
    275e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2760:	1b1a      	subs	r2, r3, r4
    2762:	d004      	beq.n	276e <_dtoa_r+0x7be>
    2764:	4659      	mov	r1, fp
    2766:	4628      	mov	r0, r5
    2768:	f00b fa70 	bl	dc4c <__pow5mult>
    276c:	4683      	mov	fp, r0
    276e:	2101      	movs	r1, #1
    2770:	4628      	mov	r0, r5
    2772:	f00b f9ad 	bl	dad0 <__i2b>
    2776:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2778:	2b00      	cmp	r3, #0
    277a:	4604      	mov	r4, r0
    277c:	f340 8086 	ble.w	288c <_dtoa_r+0x8dc>
    2780:	461a      	mov	r2, r3
    2782:	4601      	mov	r1, r0
    2784:	4628      	mov	r0, r5
    2786:	f00b fa61 	bl	dc4c <__pow5mult>
    278a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    278c:	2b01      	cmp	r3, #1
    278e:	4604      	mov	r4, r0
    2790:	dd7f      	ble.n	2892 <_dtoa_r+0x8e2>
    2792:	f04f 0800 	mov.w	r8, #0
    2796:	6923      	ldr	r3, [r4, #16]
    2798:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    279c:	6918      	ldr	r0, [r3, #16]
    279e:	f00e f83c 	bl	1081a <__hi0bits>
    27a2:	f1c0 0020 	rsb	r0, r0, #32
    27a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27a8:	4418      	add	r0, r3
    27aa:	f010 001f 	ands.w	r0, r0, #31
    27ae:	f000 8092 	beq.w	28d6 <_dtoa_r+0x926>
    27b2:	f1c0 0320 	rsb	r3, r0, #32
    27b6:	2b04      	cmp	r3, #4
    27b8:	f340 808a 	ble.w	28d0 <_dtoa_r+0x920>
    27bc:	f1c0 001c 	rsb	r0, r0, #28
    27c0:	9b06      	ldr	r3, [sp, #24]
    27c2:	4403      	add	r3, r0
    27c4:	9306      	str	r3, [sp, #24]
    27c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27c8:	4403      	add	r3, r0
    27ca:	4407      	add	r7, r0
    27cc:	9309      	str	r3, [sp, #36]	; 0x24
    27ce:	9b06      	ldr	r3, [sp, #24]
    27d0:	2b00      	cmp	r3, #0
    27d2:	dd05      	ble.n	27e0 <_dtoa_r+0x830>
    27d4:	4659      	mov	r1, fp
    27d6:	461a      	mov	r2, r3
    27d8:	4628      	mov	r0, r5
    27da:	f00b fa91 	bl	dd00 <__lshift>
    27de:	4683      	mov	fp, r0
    27e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27e2:	2b00      	cmp	r3, #0
    27e4:	dd05      	ble.n	27f2 <_dtoa_r+0x842>
    27e6:	4621      	mov	r1, r4
    27e8:	461a      	mov	r2, r3
    27ea:	4628      	mov	r0, r5
    27ec:	f00b fa88 	bl	dd00 <__lshift>
    27f0:	4604      	mov	r4, r0
    27f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    27f4:	2b00      	cmp	r3, #0
    27f6:	d070      	beq.n	28da <_dtoa_r+0x92a>
    27f8:	4621      	mov	r1, r4
    27fa:	4658      	mov	r0, fp
    27fc:	f00e f85a 	bl	108b4 <__mcmp>
    2800:	2800      	cmp	r0, #0
    2802:	da6a      	bge.n	28da <_dtoa_r+0x92a>
    2804:	2300      	movs	r3, #0
    2806:	4659      	mov	r1, fp
    2808:	220a      	movs	r2, #10
    280a:	4628      	mov	r0, r5
    280c:	f00b f91a 	bl	da44 <__multadd>
    2810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2812:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2816:	4683      	mov	fp, r0
    2818:	2b00      	cmp	r3, #0
    281a:	f000 8194 	beq.w	2b46 <_dtoa_r+0xb96>
    281e:	4631      	mov	r1, r6
    2820:	2300      	movs	r3, #0
    2822:	220a      	movs	r2, #10
    2824:	4628      	mov	r0, r5
    2826:	f00b f90d 	bl	da44 <__multadd>
    282a:	f1b9 0f00 	cmp.w	r9, #0
    282e:	4606      	mov	r6, r0
    2830:	f300 8093 	bgt.w	295a <_dtoa_r+0x9aa>
    2834:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2836:	2b02      	cmp	r3, #2
    2838:	dc57      	bgt.n	28ea <_dtoa_r+0x93a>
    283a:	e08e      	b.n	295a <_dtoa_r+0x9aa>
    283c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    283e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    2842:	e757      	b.n	26f4 <_dtoa_r+0x744>
    2844:	3fe00000 	.word	0x3fe00000
    2848:	40240000 	.word	0x40240000
    284c:	9b08      	ldr	r3, [sp, #32]
    284e:	1e5c      	subs	r4, r3, #1
    2850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2852:	42a3      	cmp	r3, r4
    2854:	bfbf      	itttt	lt
    2856:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    2858:	940a      	strlt	r4, [sp, #40]	; 0x28
    285a:	1ae2      	sublt	r2, r4, r3
    285c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    285e:	bfb6      	itet	lt
    2860:	189b      	addlt	r3, r3, r2
    2862:	1b1c      	subge	r4, r3, r4
    2864:	930e      	strlt	r3, [sp, #56]	; 0x38
    2866:	9b08      	ldr	r3, [sp, #32]
    2868:	bfb8      	it	lt
    286a:	2400      	movlt	r4, #0
    286c:	2b00      	cmp	r3, #0
    286e:	bfb9      	ittee	lt
    2870:	9b06      	ldrlt	r3, [sp, #24]
    2872:	9a08      	ldrlt	r2, [sp, #32]
    2874:	9f06      	ldrge	r7, [sp, #24]
    2876:	9b08      	ldrge	r3, [sp, #32]
    2878:	bfbc      	itt	lt
    287a:	1a9f      	sublt	r7, r3, r2
    287c:	2300      	movlt	r3, #0
    287e:	e73b      	b.n	26f8 <_dtoa_r+0x748>
    2880:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2882:	9f06      	ldr	r7, [sp, #24]
    2884:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    2886:	e742      	b.n	270e <_dtoa_r+0x75e>
    2888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    288a:	e76b      	b.n	2764 <_dtoa_r+0x7b4>
    288c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    288e:	2b01      	cmp	r3, #1
    2890:	dc19      	bgt.n	28c6 <_dtoa_r+0x916>
    2892:	9b04      	ldr	r3, [sp, #16]
    2894:	b9bb      	cbnz	r3, 28c6 <_dtoa_r+0x916>
    2896:	9b05      	ldr	r3, [sp, #20]
    2898:	f3c3 0313 	ubfx	r3, r3, #0, #20
    289c:	b99b      	cbnz	r3, 28c6 <_dtoa_r+0x916>
    289e:	9b05      	ldr	r3, [sp, #20]
    28a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    28a4:	0d1b      	lsrs	r3, r3, #20
    28a6:	051b      	lsls	r3, r3, #20
    28a8:	b183      	cbz	r3, 28cc <_dtoa_r+0x91c>
    28aa:	9b06      	ldr	r3, [sp, #24]
    28ac:	3301      	adds	r3, #1
    28ae:	9306      	str	r3, [sp, #24]
    28b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    28b2:	3301      	adds	r3, #1
    28b4:	9309      	str	r3, [sp, #36]	; 0x24
    28b6:	f04f 0801 	mov.w	r8, #1
    28ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    28bc:	2b00      	cmp	r3, #0
    28be:	f47f af6a 	bne.w	2796 <_dtoa_r+0x7e6>
    28c2:	2001      	movs	r0, #1
    28c4:	e76f      	b.n	27a6 <_dtoa_r+0x7f6>
    28c6:	f04f 0800 	mov.w	r8, #0
    28ca:	e7f6      	b.n	28ba <_dtoa_r+0x90a>
    28cc:	4698      	mov	r8, r3
    28ce:	e7f4      	b.n	28ba <_dtoa_r+0x90a>
    28d0:	f43f af7d 	beq.w	27ce <_dtoa_r+0x81e>
    28d4:	4618      	mov	r0, r3
    28d6:	301c      	adds	r0, #28
    28d8:	e772      	b.n	27c0 <_dtoa_r+0x810>
    28da:	9b08      	ldr	r3, [sp, #32]
    28dc:	2b00      	cmp	r3, #0
    28de:	dc36      	bgt.n	294e <_dtoa_r+0x99e>
    28e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    28e2:	2b02      	cmp	r3, #2
    28e4:	dd33      	ble.n	294e <_dtoa_r+0x99e>
    28e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
    28ea:	f1b9 0f00 	cmp.w	r9, #0
    28ee:	d10d      	bne.n	290c <_dtoa_r+0x95c>
    28f0:	4621      	mov	r1, r4
    28f2:	464b      	mov	r3, r9
    28f4:	2205      	movs	r2, #5
    28f6:	4628      	mov	r0, r5
    28f8:	f00b f8a4 	bl	da44 <__multadd>
    28fc:	4601      	mov	r1, r0
    28fe:	4604      	mov	r4, r0
    2900:	4658      	mov	r0, fp
    2902:	f00d ffd7 	bl	108b4 <__mcmp>
    2906:	2800      	cmp	r0, #0
    2908:	f73f adb8 	bgt.w	247c <_dtoa_r+0x4cc>
    290c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    290e:	9f03      	ldr	r7, [sp, #12]
    2910:	ea6f 0a03 	mvn.w	sl, r3
    2914:	f04f 0800 	mov.w	r8, #0
    2918:	4621      	mov	r1, r4
    291a:	4628      	mov	r0, r5
    291c:	f00b f870 	bl	da00 <_Bfree>
    2920:	2e00      	cmp	r6, #0
    2922:	f43f aea7 	beq.w	2674 <_dtoa_r+0x6c4>
    2926:	f1b8 0f00 	cmp.w	r8, #0
    292a:	d005      	beq.n	2938 <_dtoa_r+0x988>
    292c:	45b0      	cmp	r8, r6
    292e:	d003      	beq.n	2938 <_dtoa_r+0x988>
    2930:	4641      	mov	r1, r8
    2932:	4628      	mov	r0, r5
    2934:	f00b f864 	bl	da00 <_Bfree>
    2938:	4631      	mov	r1, r6
    293a:	4628      	mov	r0, r5
    293c:	f00b f860 	bl	da00 <_Bfree>
    2940:	e698      	b.n	2674 <_dtoa_r+0x6c4>
    2942:	2400      	movs	r4, #0
    2944:	4626      	mov	r6, r4
    2946:	e7e1      	b.n	290c <_dtoa_r+0x95c>
    2948:	46c2      	mov	sl, r8
    294a:	4626      	mov	r6, r4
    294c:	e596      	b.n	247c <_dtoa_r+0x4cc>
    294e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2950:	f8dd 9020 	ldr.w	r9, [sp, #32]
    2954:	2b00      	cmp	r3, #0
    2956:	f000 80fd 	beq.w	2b54 <_dtoa_r+0xba4>
    295a:	2f00      	cmp	r7, #0
    295c:	dd05      	ble.n	296a <_dtoa_r+0x9ba>
    295e:	4631      	mov	r1, r6
    2960:	463a      	mov	r2, r7
    2962:	4628      	mov	r0, r5
    2964:	f00b f9cc 	bl	dd00 <__lshift>
    2968:	4606      	mov	r6, r0
    296a:	f1b8 0f00 	cmp.w	r8, #0
    296e:	d05c      	beq.n	2a2a <_dtoa_r+0xa7a>
    2970:	6871      	ldr	r1, [r6, #4]
    2972:	4628      	mov	r0, r5
    2974:	f00b f804 	bl	d980 <_Balloc>
    2978:	4607      	mov	r7, r0
    297a:	b928      	cbnz	r0, 2988 <_dtoa_r+0x9d8>
    297c:	4b80      	ldr	r3, [pc, #512]	; (2b80 <_dtoa_r+0xbd0>)
    297e:	4602      	mov	r2, r0
    2980:	f240 21ea 	movw	r1, #746	; 0x2ea
    2984:	f7ff bb28 	b.w	1fd8 <_dtoa_r+0x28>
    2988:	6932      	ldr	r2, [r6, #16]
    298a:	3202      	adds	r2, #2
    298c:	0092      	lsls	r2, r2, #2
    298e:	f106 010c 	add.w	r1, r6, #12
    2992:	300c      	adds	r0, #12
    2994:	f00d fe51 	bl	1063a <memcpy>
    2998:	2201      	movs	r2, #1
    299a:	4639      	mov	r1, r7
    299c:	4628      	mov	r0, r5
    299e:	f00b f9af 	bl	dd00 <__lshift>
    29a2:	9b03      	ldr	r3, [sp, #12]
    29a4:	3301      	adds	r3, #1
    29a6:	9308      	str	r3, [sp, #32]
    29a8:	9b03      	ldr	r3, [sp, #12]
    29aa:	444b      	add	r3, r9
    29ac:	930a      	str	r3, [sp, #40]	; 0x28
    29ae:	9b04      	ldr	r3, [sp, #16]
    29b0:	f003 0301 	and.w	r3, r3, #1
    29b4:	46b0      	mov	r8, r6
    29b6:	9309      	str	r3, [sp, #36]	; 0x24
    29b8:	4606      	mov	r6, r0
    29ba:	9b08      	ldr	r3, [sp, #32]
    29bc:	4621      	mov	r1, r4
    29be:	3b01      	subs	r3, #1
    29c0:	4658      	mov	r0, fp
    29c2:	9304      	str	r3, [sp, #16]
    29c4:	f00e f870 	bl	10aa8 <quorem>
    29c8:	4603      	mov	r3, r0
    29ca:	3330      	adds	r3, #48	; 0x30
    29cc:	9006      	str	r0, [sp, #24]
    29ce:	4641      	mov	r1, r8
    29d0:	4658      	mov	r0, fp
    29d2:	930b      	str	r3, [sp, #44]	; 0x2c
    29d4:	f00d ff6e 	bl	108b4 <__mcmp>
    29d8:	4632      	mov	r2, r6
    29da:	4681      	mov	r9, r0
    29dc:	4621      	mov	r1, r4
    29de:	4628      	mov	r0, r5
    29e0:	f00b f9fe 	bl	dde0 <__mdiff>
    29e4:	68c2      	ldr	r2, [r0, #12]
    29e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    29e8:	4607      	mov	r7, r0
    29ea:	bb02      	cbnz	r2, 2a2e <_dtoa_r+0xa7e>
    29ec:	4601      	mov	r1, r0
    29ee:	4658      	mov	r0, fp
    29f0:	f00d ff60 	bl	108b4 <__mcmp>
    29f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    29f6:	4602      	mov	r2, r0
    29f8:	4639      	mov	r1, r7
    29fa:	4628      	mov	r0, r5
    29fc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    2a00:	f00a fffe 	bl	da00 <_Bfree>
    2a04:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2a06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2a08:	9f08      	ldr	r7, [sp, #32]
    2a0a:	ea43 0102 	orr.w	r1, r3, r2
    2a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2a10:	430b      	orrs	r3, r1
    2a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2a14:	d10d      	bne.n	2a32 <_dtoa_r+0xa82>
    2a16:	2b39      	cmp	r3, #57	; 0x39
    2a18:	d029      	beq.n	2a6e <_dtoa_r+0xabe>
    2a1a:	f1b9 0f00 	cmp.w	r9, #0
    2a1e:	dd01      	ble.n	2a24 <_dtoa_r+0xa74>
    2a20:	9b06      	ldr	r3, [sp, #24]
    2a22:	3331      	adds	r3, #49	; 0x31
    2a24:	9a04      	ldr	r2, [sp, #16]
    2a26:	7013      	strb	r3, [r2, #0]
    2a28:	e776      	b.n	2918 <_dtoa_r+0x968>
    2a2a:	4630      	mov	r0, r6
    2a2c:	e7b9      	b.n	29a2 <_dtoa_r+0x9f2>
    2a2e:	2201      	movs	r2, #1
    2a30:	e7e2      	b.n	29f8 <_dtoa_r+0xa48>
    2a32:	f1b9 0f00 	cmp.w	r9, #0
    2a36:	db06      	blt.n	2a46 <_dtoa_r+0xa96>
    2a38:	9922      	ldr	r1, [sp, #136]	; 0x88
    2a3a:	ea41 0909 	orr.w	r9, r1, r9
    2a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
    2a40:	ea59 0101 	orrs.w	r1, r9, r1
    2a44:	d120      	bne.n	2a88 <_dtoa_r+0xad8>
    2a46:	2a00      	cmp	r2, #0
    2a48:	ddec      	ble.n	2a24 <_dtoa_r+0xa74>
    2a4a:	4659      	mov	r1, fp
    2a4c:	2201      	movs	r2, #1
    2a4e:	4628      	mov	r0, r5
    2a50:	9308      	str	r3, [sp, #32]
    2a52:	f00b f955 	bl	dd00 <__lshift>
    2a56:	4621      	mov	r1, r4
    2a58:	4683      	mov	fp, r0
    2a5a:	f00d ff2b 	bl	108b4 <__mcmp>
    2a5e:	2800      	cmp	r0, #0
    2a60:	9b08      	ldr	r3, [sp, #32]
    2a62:	dc02      	bgt.n	2a6a <_dtoa_r+0xaba>
    2a64:	d1de      	bne.n	2a24 <_dtoa_r+0xa74>
    2a66:	07da      	lsls	r2, r3, #31
    2a68:	d5dc      	bpl.n	2a24 <_dtoa_r+0xa74>
    2a6a:	2b39      	cmp	r3, #57	; 0x39
    2a6c:	d1d8      	bne.n	2a20 <_dtoa_r+0xa70>
    2a6e:	9a04      	ldr	r2, [sp, #16]
    2a70:	2339      	movs	r3, #57	; 0x39
    2a72:	7013      	strb	r3, [r2, #0]
    2a74:	463b      	mov	r3, r7
    2a76:	461f      	mov	r7, r3
    2a78:	3b01      	subs	r3, #1
    2a7a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    2a7e:	2a39      	cmp	r2, #57	; 0x39
    2a80:	d050      	beq.n	2b24 <_dtoa_r+0xb74>
    2a82:	3201      	adds	r2, #1
    2a84:	701a      	strb	r2, [r3, #0]
    2a86:	e747      	b.n	2918 <_dtoa_r+0x968>
    2a88:	2a00      	cmp	r2, #0
    2a8a:	dd03      	ble.n	2a94 <_dtoa_r+0xae4>
    2a8c:	2b39      	cmp	r3, #57	; 0x39
    2a8e:	d0ee      	beq.n	2a6e <_dtoa_r+0xabe>
    2a90:	3301      	adds	r3, #1
    2a92:	e7c7      	b.n	2a24 <_dtoa_r+0xa74>
    2a94:	9a08      	ldr	r2, [sp, #32]
    2a96:	990a      	ldr	r1, [sp, #40]	; 0x28
    2a98:	f802 3c01 	strb.w	r3, [r2, #-1]
    2a9c:	428a      	cmp	r2, r1
    2a9e:	d02a      	beq.n	2af6 <_dtoa_r+0xb46>
    2aa0:	4659      	mov	r1, fp
    2aa2:	2300      	movs	r3, #0
    2aa4:	220a      	movs	r2, #10
    2aa6:	4628      	mov	r0, r5
    2aa8:	f00a ffcc 	bl	da44 <__multadd>
    2aac:	45b0      	cmp	r8, r6
    2aae:	4683      	mov	fp, r0
    2ab0:	f04f 0300 	mov.w	r3, #0
    2ab4:	f04f 020a 	mov.w	r2, #10
    2ab8:	4641      	mov	r1, r8
    2aba:	4628      	mov	r0, r5
    2abc:	d107      	bne.n	2ace <_dtoa_r+0xb1e>
    2abe:	f00a ffc1 	bl	da44 <__multadd>
    2ac2:	4680      	mov	r8, r0
    2ac4:	4606      	mov	r6, r0
    2ac6:	9b08      	ldr	r3, [sp, #32]
    2ac8:	3301      	adds	r3, #1
    2aca:	9308      	str	r3, [sp, #32]
    2acc:	e775      	b.n	29ba <_dtoa_r+0xa0a>
    2ace:	f00a ffb9 	bl	da44 <__multadd>
    2ad2:	4631      	mov	r1, r6
    2ad4:	4680      	mov	r8, r0
    2ad6:	2300      	movs	r3, #0
    2ad8:	220a      	movs	r2, #10
    2ada:	4628      	mov	r0, r5
    2adc:	f00a ffb2 	bl	da44 <__multadd>
    2ae0:	4606      	mov	r6, r0
    2ae2:	e7f0      	b.n	2ac6 <_dtoa_r+0xb16>
    2ae4:	f1b9 0f00 	cmp.w	r9, #0
    2ae8:	9a03      	ldr	r2, [sp, #12]
    2aea:	bfcc      	ite	gt
    2aec:	464f      	movgt	r7, r9
    2aee:	2701      	movle	r7, #1
    2af0:	4417      	add	r7, r2
    2af2:	f04f 0800 	mov.w	r8, #0
    2af6:	4659      	mov	r1, fp
    2af8:	2201      	movs	r2, #1
    2afa:	4628      	mov	r0, r5
    2afc:	9308      	str	r3, [sp, #32]
    2afe:	f00b f8ff 	bl	dd00 <__lshift>
    2b02:	4621      	mov	r1, r4
    2b04:	4683      	mov	fp, r0
    2b06:	f00d fed5 	bl	108b4 <__mcmp>
    2b0a:	2800      	cmp	r0, #0
    2b0c:	dcb2      	bgt.n	2a74 <_dtoa_r+0xac4>
    2b0e:	d102      	bne.n	2b16 <_dtoa_r+0xb66>
    2b10:	9b08      	ldr	r3, [sp, #32]
    2b12:	07db      	lsls	r3, r3, #31
    2b14:	d4ae      	bmi.n	2a74 <_dtoa_r+0xac4>
    2b16:	463b      	mov	r3, r7
    2b18:	461f      	mov	r7, r3
    2b1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    2b1e:	2a30      	cmp	r2, #48	; 0x30
    2b20:	d0fa      	beq.n	2b18 <_dtoa_r+0xb68>
    2b22:	e6f9      	b.n	2918 <_dtoa_r+0x968>
    2b24:	9a03      	ldr	r2, [sp, #12]
    2b26:	429a      	cmp	r2, r3
    2b28:	d1a5      	bne.n	2a76 <_dtoa_r+0xac6>
    2b2a:	f10a 0a01 	add.w	sl, sl, #1
    2b2e:	2331      	movs	r3, #49	; 0x31
    2b30:	e779      	b.n	2a26 <_dtoa_r+0xa76>
    2b32:	4b14      	ldr	r3, [pc, #80]	; (2b84 <_dtoa_r+0xbd4>)
    2b34:	f7ff baa7 	b.w	2086 <_dtoa_r+0xd6>
    2b38:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2b3a:	2b00      	cmp	r3, #0
    2b3c:	f47f aa80 	bne.w	2040 <_dtoa_r+0x90>
    2b40:	4b11      	ldr	r3, [pc, #68]	; (2b88 <_dtoa_r+0xbd8>)
    2b42:	f7ff baa0 	b.w	2086 <_dtoa_r+0xd6>
    2b46:	f1b9 0f00 	cmp.w	r9, #0
    2b4a:	dc03      	bgt.n	2b54 <_dtoa_r+0xba4>
    2b4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2b4e:	2b02      	cmp	r3, #2
    2b50:	f73f aecb 	bgt.w	28ea <_dtoa_r+0x93a>
    2b54:	9f03      	ldr	r7, [sp, #12]
    2b56:	4621      	mov	r1, r4
    2b58:	4658      	mov	r0, fp
    2b5a:	f00d ffa5 	bl	10aa8 <quorem>
    2b5e:	f100 0330 	add.w	r3, r0, #48	; 0x30
    2b62:	f807 3b01 	strb.w	r3, [r7], #1
    2b66:	9a03      	ldr	r2, [sp, #12]
    2b68:	1aba      	subs	r2, r7, r2
    2b6a:	4591      	cmp	r9, r2
    2b6c:	ddba      	ble.n	2ae4 <_dtoa_r+0xb34>
    2b6e:	4659      	mov	r1, fp
    2b70:	2300      	movs	r3, #0
    2b72:	220a      	movs	r2, #10
    2b74:	4628      	mov	r0, r5
    2b76:	f00a ff65 	bl	da44 <__multadd>
    2b7a:	4683      	mov	fp, r0
    2b7c:	e7eb      	b.n	2b56 <_dtoa_r+0xba6>
    2b7e:	bf00      	nop
    2b80:	00013482 	.word	0x00013482
    2b84:	0001350f 	.word	0x0001350f
    2b88:	00013502 	.word	0x00013502

00002b8c <uart_cb>:
/* UART callback implementation */
/* Note that callback functions are executed in the scope of interrupt handlers. */
/* They run asynchronously after hardware/software interrupts and have a higher priority than all threads */
/* Should be kept as short and simple as possible. Heavier processing should be deferred to a task with suitable priority*/
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
    2b8c:	b510      	push	{r4, lr}
    int err;

    switch (evt->type)
    2b8e:	780b      	ldrb	r3, [r1, #0]
    2b90:	2b06      	cmp	r3, #6
    2b92:	f200 8097 	bhi.w	2cc4 <uart_cb+0x138>
    2b96:	e8df f003 	tbb	[pc, r3]
    2b9a:	0804      	.short	0x0804
    2b9c:	7975710c 	.word	0x7975710c
    2ba0:	91          	.byte	0x91
    2ba1:	00          	.byte	0x00
    {

    case UART_TX_DONE:
        printk("UART_TX_DONE event \n\r");
    2ba2:	484a      	ldr	r0, [pc, #296]	; (2ccc <uart_cb+0x140>)
    2ba4:	f00c f9b5 	bl	ef12 <printk>

    default:
        printk("UART: unknown event \n\r");
        break;
    }
}
    2ba8:	bd10      	pop	{r4, pc}
        printk("UART_TX_ABORTED event \n\r");
    2baa:	4849      	ldr	r0, [pc, #292]	; (2cd0 <uart_cb+0x144>)
    2bac:	f00c f9b1 	bl	ef12 <printk>
        break;
    2bb0:	e7fa      	b.n	2ba8 <uart_cb+0x1c>
    2bb2:	460c      	mov	r4, r1
        printk("UART_RX_RDY event \n\r");
    2bb4:	4847      	ldr	r0, [pc, #284]	; (2cd4 <uart_cb+0x148>)
    2bb6:	f00c f9ac 	bl	ef12 <printk>
        printk("Received %d bytes. %d\n", evt->data.rx.len, evt->data.rx.offset);
    2bba:	68a2      	ldr	r2, [r4, #8]
    2bbc:	68e1      	ldr	r1, [r4, #12]
    2bbe:	4846      	ldr	r0, [pc, #280]	; (2cd8 <uart_cb+0x14c>)
    2bc0:	f00c f9a7 	bl	ef12 <printk>
        if (evt->data.rx.offset + evt->data.rx.len > RXBUF_SIZE)
    2bc4:	68a3      	ldr	r3, [r4, #8]
    2bc6:	68e2      	ldr	r2, [r4, #12]
    2bc8:	1899      	adds	r1, r3, r2
    2bca:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    2bce:	d821      	bhi.n	2c14 <uart_cb+0x88>
            if (ready_to_receive == 0 && evt->data.rx.len == 1)
    2bd0:	4942      	ldr	r1, [pc, #264]	; (2cdc <uart_cb+0x150>)
    2bd2:	6809      	ldr	r1, [r1, #0]
    2bd4:	b909      	cbnz	r1, 2bda <uart_cb+0x4e>
    2bd6:	2a01      	cmp	r2, #1
    2bd8:	d022      	beq.n	2c20 <uart_cb+0x94>
            else if(ready_to_receive == 1 && filling_matrix == 0){
    2bda:	4940      	ldr	r1, [pc, #256]	; (2cdc <uart_cb+0x150>)
    2bdc:	6809      	ldr	r1, [r1, #0]
    2bde:	2901      	cmp	r1, #1
    2be0:	d03b      	beq.n	2c5a <uart_cb+0xce>
            else if(filling_matrix == 1){
    2be2:	493f      	ldr	r1, [pc, #252]	; (2ce0 <uart_cb+0x154>)
    2be4:	6809      	ldr	r1, [r1, #0]
    2be6:	2901      	cmp	r1, #1
    2be8:	d1de      	bne.n	2ba8 <uart_cb+0x1c>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    2bea:	493e      	ldr	r1, [pc, #248]	; (2ce4 <uart_cb+0x158>)
    2bec:	4419      	add	r1, r3
    2bee:	483e      	ldr	r0, [pc, #248]	; (2ce8 <uart_cb+0x15c>)
    2bf0:	4418      	add	r0, r3
    2bf2:	f00d fd22 	bl	1063a <memcpy>
                if(evt->data.rx.offset + evt->data.rx.len == RXBUF_SIZE){
    2bf6:	68a3      	ldr	r3, [r4, #8]
    2bf8:	68e2      	ldr	r2, [r4, #12]
    2bfa:	4413      	add	r3, r2
    2bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    2c00:	d1d2      	bne.n	2ba8 <uart_cb+0x1c>
                    filling_matrix = 0;
    2c02:	2300      	movs	r3, #0
    2c04:	4a36      	ldr	r2, [pc, #216]	; (2ce0 <uart_cb+0x154>)
    2c06:	6013      	str	r3, [r2, #0]
                    ready_to_receive = 0;
    2c08:	4a34      	ldr	r2, [pc, #208]	; (2cdc <uart_cb+0x150>)
    2c0a:	6013      	str	r3, [r2, #0]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2c0c:	4837      	ldr	r0, [pc, #220]	; (2cec <uart_cb+0x160>)
    2c0e:	f008 f9b1 	bl	af74 <z_impl_k_sem_give>
}
    2c12:	e7c9      	b.n	2ba8 <uart_cb+0x1c>
            printk("Error. Received more data than expected for %d x %d \n", IMGWIDTH, IMGWIDTH);
    2c14:	2280      	movs	r2, #128	; 0x80
    2c16:	4611      	mov	r1, r2
    2c18:	4835      	ldr	r0, [pc, #212]	; (2cf0 <uart_cb+0x164>)
    2c1a:	f00c f97a 	bl	ef12 <printk>
            break;
    2c1e:	e7c3      	b.n	2ba8 <uart_cb+0x1c>
                if (rx_buf[evt->data.rx.offset] == HANDSHAKE_MESSAGE)
    2c20:	4a30      	ldr	r2, [pc, #192]	; (2ce4 <uart_cb+0x158>)
    2c22:	5cd3      	ldrb	r3, [r2, r3]
    2c24:	2b01      	cmp	r3, #1
    2c26:	d1bf      	bne.n	2ba8 <uart_cb+0x1c>
                    printk("Received handshake message. Sending ACK\n");
    2c28:	4832      	ldr	r0, [pc, #200]	; (2cf4 <uart_cb+0x168>)
    2c2a:	f00c f972 	bl	ef12 <printk>
                    err = uart_tx(uart_dev, (uint8_t *)ACK_MESSAGE, sizeof(uint8_t), 100);
    2c2e:	4b32      	ldr	r3, [pc, #200]	; (2cf8 <uart_cb+0x16c>)
    2c30:	6818      	ldr	r0, [r3, #0]
static inline int z_impl_uart_tx(const struct device *dev, const uint8_t *buf,
				 size_t len, int32_t timeout)

{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
    2c32:	6883      	ldr	r3, [r0, #8]
			(const struct uart_driver_api *)dev->api;

	return api->tx(dev, buf, len, timeout);
    2c34:	685c      	ldr	r4, [r3, #4]
    2c36:	2364      	movs	r3, #100	; 0x64
    2c38:	2201      	movs	r2, #1
    2c3a:	2102      	movs	r1, #2
    2c3c:	47a0      	blx	r4
                    if (err)
    2c3e:	4601      	mov	r1, r0
    2c40:	b118      	cbz	r0, 2c4a <uart_cb+0xbe>
                        printk("uart_tx() error. Error code:%d\n\r", err);
    2c42:	482e      	ldr	r0, [pc, #184]	; (2cfc <uart_cb+0x170>)
    2c44:	f00c f965 	bl	ef12 <printk>
    2c48:	e7ae      	b.n	2ba8 <uart_cb+0x1c>
                        printk("Sent %d bytes\n", sizeof(uint8_t));
    2c4a:	2101      	movs	r1, #1
    2c4c:	482c      	ldr	r0, [pc, #176]	; (2d00 <uart_cb+0x174>)
    2c4e:	f00c f960 	bl	ef12 <printk>
                        ready_to_receive = 1;
    2c52:	4b22      	ldr	r3, [pc, #136]	; (2cdc <uart_cb+0x150>)
    2c54:	2201      	movs	r2, #1
    2c56:	601a      	str	r2, [r3, #0]
    2c58:	e7a6      	b.n	2ba8 <uart_cb+0x1c>
            else if(ready_to_receive == 1 && filling_matrix == 0){
    2c5a:	4921      	ldr	r1, [pc, #132]	; (2ce0 <uart_cb+0x154>)
    2c5c:	6809      	ldr	r1, [r1, #0]
    2c5e:	2900      	cmp	r1, #0
    2c60:	d1bf      	bne.n	2be2 <uart_cb+0x56>
                if(evt->data.rx.len == 1 && rx_buf[evt->data.rx.offset] == ACK_MESSAGE){
    2c62:	2a01      	cmp	r2, #1
    2c64:	d1a0      	bne.n	2ba8 <uart_cb+0x1c>
    2c66:	4a1f      	ldr	r2, [pc, #124]	; (2ce4 <uart_cb+0x158>)
    2c68:	5cd3      	ldrb	r3, [r2, r3]
    2c6a:	2b02      	cmp	r3, #2
    2c6c:	d19c      	bne.n	2ba8 <uart_cb+0x1c>
                    filling_matrix = 1;
    2c6e:	4b1c      	ldr	r3, [pc, #112]	; (2ce0 <uart_cb+0x154>)
    2c70:	2201      	movs	r2, #1
    2c72:	601a      	str	r2, [r3, #0]
                    printk("Received ack message. Starting to receive image\n");
    2c74:	4823      	ldr	r0, [pc, #140]	; (2d04 <uart_cb+0x178>)
    2c76:	f00c f94c 	bl	ef12 <printk>
    2c7a:	e795      	b.n	2ba8 <uart_cb+0x1c>
        printk("UART_RX_BUF_REQUEST event \n\r");
    2c7c:	4822      	ldr	r0, [pc, #136]	; (2d08 <uart_cb+0x17c>)
    2c7e:	f00c f948 	bl	ef12 <printk>
        break;
    2c82:	e791      	b.n	2ba8 <uart_cb+0x1c>
        printk("UART_RX_BUF_RELEASED event \n\r");
    2c84:	4821      	ldr	r0, [pc, #132]	; (2d0c <uart_cb+0x180>)
    2c86:	f00c f944 	bl	ef12 <printk>
        break;
    2c8a:	e78d      	b.n	2ba8 <uart_cb+0x1c>
        printk("UART_RX_DISABLED event \n\r");
    2c8c:	4820      	ldr	r0, [pc, #128]	; (2d10 <uart_cb+0x184>)
    2c8e:	f00c f940 	bl	ef12 <printk>
        err = uart_rx_enable(uart_dev, rx_buf, sizeof(rx_buf), RX_TIMEOUT);
    2c92:	4b19      	ldr	r3, [pc, #100]	; (2cf8 <uart_cb+0x16c>)
    2c94:	6818      	ldr	r0, [r3, #0]
static inline int z_impl_uart_rx_enable(const struct device *dev,
					uint8_t *buf,
					size_t len, int32_t timeout)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
    2c96:	6883      	ldr	r3, [r0, #8]
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
    2c98:	68dc      	ldr	r4, [r3, #12]
    2c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2c9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2ca2:	4910      	ldr	r1, [pc, #64]	; (2ce4 <uart_cb+0x158>)
    2ca4:	47a0      	blx	r4
        if (err)
    2ca6:	4601      	mov	r1, r0
    2ca8:	2800      	cmp	r0, #0
    2caa:	f43f af7d 	beq.w	2ba8 <uart_cb+0x1c>
            printk("uart_rx_enable() error. Error code:%d\n\r", err);
    2cae:	4819      	ldr	r0, [pc, #100]	; (2d14 <uart_cb+0x188>)
    2cb0:	f00c f92f 	bl	ef12 <printk>
            exit(FATAL_ERR);
    2cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2cb8:	f00a fc7c 	bl	d5b4 <exit>
        printk("UART_RX_STOPPED event \n\r");
    2cbc:	4816      	ldr	r0, [pc, #88]	; (2d18 <uart_cb+0x18c>)
    2cbe:	f00c f928 	bl	ef12 <printk>
        break;
    2cc2:	e771      	b.n	2ba8 <uart_cb+0x1c>
        printk("UART: unknown event \n\r");
    2cc4:	4815      	ldr	r0, [pc, #84]	; (2d1c <uart_cb+0x190>)
    2cc6:	f00c f924 	bl	ef12 <printk>
}
    2cca:	e76d      	b.n	2ba8 <uart_cb+0x1c>
    2ccc:	000110f8 	.word	0x000110f8
    2cd0:	00011110 	.word	0x00011110
    2cd4:	0001112c 	.word	0x0001112c
    2cd8:	00011144 	.word	0x00011144
    2cdc:	20004948 	.word	0x20004948
    2ce0:	20004930 	.word	0x20004930
    2ce4:	2000494c 	.word	0x2000494c
    2ce8:	2000894c 	.word	0x2000894c
    2cec:	2000c94c 	.word	0x2000c94c
    2cf0:	0001115c 	.word	0x0001115c
    2cf4:	00011194 	.word	0x00011194
    2cf8:	2000c9b0 	.word	0x2000c9b0
    2cfc:	000111c0 	.word	0x000111c0
    2d00:	000111e4 	.word	0x000111e4
    2d04:	000111f4 	.word	0x000111f4
    2d08:	00011228 	.word	0x00011228
    2d0c:	00011248 	.word	0x00011248
    2d10:	00011268 	.word	0x00011268
    2d14:	00011284 	.word	0x00011284
    2d18:	000112ac 	.word	0x000112ac
    2d1c:	000112c8 	.word	0x000112c8

00002d20 <thread_receive_image_code>:
{
    2d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    printk("Thread receive_image init\n");
    2d24:	4824      	ldr	r0, [pc, #144]	; (2db8 <thread_receive_image_code+0x98>)
    2d26:	f00c f8f4 	bl	ef12 <printk>
	return z_impl_k_uptime_ticks();
    2d2a:	f00d fc2a 	bl	10582 <z_impl_k_uptime_ticks>
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    2d2e:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
    2d32:	f04f 0800 	mov.w	r8, #0
    2d36:	464f      	mov	r7, r9
    2d38:	4646      	mov	r6, r8
    2d3a:	4644      	mov	r4, r8
    2d3c:	4645      	mov	r5, r8
    2d3e:	e003      	b.n	2d48 <thread_receive_image_code+0x28>
            t_min = fin_time - t_prev;
    2d40:	4627      	mov	r7, r4
    2d42:	462e      	mov	r6, r5
        t_prev = fin_time;
    2d44:	461c      	mov	r4, r3
    2d46:	4615      	mov	r5, r2
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    2d48:	f04f 0220 	mov.w	r2, #32
    2d4c:	f3ef 8311 	mrs	r3, BASEPRI
    2d50:	f382 8812 	msr	BASEPRI_MAX, r2
    2d54:	f3bf 8f6f 	isb	sy
        key4 = irq_lock();
    2d58:	4a18      	ldr	r2, [pc, #96]	; (2dbc <thread_receive_image_code+0x9c>)
    2d5a:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2d5c:	f383 8811 	msr	BASEPRI, r3
    2d60:	f3bf 8f6f 	isb	sy
    2d64:	f00d fc0d 	bl	10582 <z_impl_k_uptime_ticks>
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
    2d68:	4684      	mov	ip, r0
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    2d6a:	014a      	lsls	r2, r1, #5
    2d6c:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    2d70:	0140      	lsls	r0, r0, #5
    2d72:	ebb0 000c 	subs.w	r0, r0, ip
    2d76:	eb62 0301 	sbc.w	r3, r2, r1
    2d7a:	009b      	lsls	r3, r3, #2
    2d7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
    2d80:	0080      	lsls	r0, r0, #2
    2d82:	eb10 000c 	adds.w	r0, r0, ip
    2d86:	eb43 0301 	adc.w	r3, r3, r1
    2d8a:	00db      	lsls	r3, r3, #3
    2d8c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    2d90:	f3c0 3010 	ubfx	r0, r0, #12, #17
    2d94:	0bda      	lsrs	r2, r3, #15
    2d96:	ea40 4343 	orr.w	r3, r0, r3, lsl #17
        if (fin_time - t_prev < t_min)
    2d9a:	1b1c      	subs	r4, r3, r4
    2d9c:	eb62 0505 	sbc.w	r5, r2, r5
    2da0:	42bc      	cmp	r4, r7
    2da2:	eb75 0106 	sbcs.w	r1, r5, r6
    2da6:	dbcb      	blt.n	2d40 <thread_receive_image_code+0x20>
        else if (fin_time - t_prev > t_max)
    2da8:	45a1      	cmp	r9, r4
    2daa:	eb78 0105 	sbcs.w	r1, r8, r5
    2dae:	dac9      	bge.n	2d44 <thread_receive_image_code+0x24>
            t_max = fin_time - t_prev;
    2db0:	46a1      	mov	r9, r4
    2db2:	46a8      	mov	r8, r5
    2db4:	e7c6      	b.n	2d44 <thread_receive_image_code+0x24>
    2db6:	bf00      	nop
    2db8:	000112e0 	.word	0x000112e0
    2dbc:	20004944 	.word	0x20004944

00002dc0 <thread_output_code>:
{
    2dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    printk("Thread output init\n");
    2dc4:	482b      	ldr	r0, [pc, #172]	; (2e74 <thread_output_code+0xb4>)
    2dc6:	f00c f8a4 	bl	ef12 <printk>
    2dca:	f00d fbda 	bl	10582 <z_impl_k_uptime_ticks>
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    2dce:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
    2dd2:	f04f 0800 	mov.w	r8, #0
    2dd6:	464f      	mov	r7, r9
    2dd8:	4646      	mov	r6, r8
    2dda:	4644      	mov	r4, r8
    2ddc:	4645      	mov	r5, r8
    2dde:	e005      	b.n	2dec <thread_output_code+0x2c>
        printk("\tCloseby obstacles detected: %s\n\r", nearobs_output == 1 ? "Yes" : "No");
    2de0:	4925      	ldr	r1, [pc, #148]	; (2e78 <thread_output_code+0xb8>)
    2de2:	e00f      	b.n	2e04 <thread_output_code+0x44>
            t_min = fin_time - t_prev;
    2de4:	4627      	mov	r7, r4
    2de6:	462e      	mov	r6, r5
        t_prev = fin_time;
    2de8:	461c      	mov	r4, r3
    2dea:	4615      	mov	r5, r2
	return z_impl_k_sem_take(sem, timeout);
    2dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2df4:	4821      	ldr	r0, [pc, #132]	; (2e7c <thread_output_code+0xbc>)
    2df6:	f008 f901 	bl	affc <z_impl_k_sem_take>
        printk("\tCloseby obstacles detected: %s\n\r", nearobs_output == 1 ? "Yes" : "No");
    2dfa:	4b21      	ldr	r3, [pc, #132]	; (2e80 <thread_output_code+0xc0>)
    2dfc:	781b      	ldrb	r3, [r3, #0]
    2dfe:	2b01      	cmp	r3, #1
    2e00:	d0ee      	beq.n	2de0 <thread_output_code+0x20>
    2e02:	4920      	ldr	r1, [pc, #128]	; (2e84 <thread_output_code+0xc4>)
    2e04:	4820      	ldr	r0, [pc, #128]	; (2e88 <thread_output_code+0xc8>)
    2e06:	f00c f884 	bl	ef12 <printk>
        printk("\tRobot position=%s, guideline angle=%s\n\r", orientation_output[0], orientation_output[1]);
    2e0a:	4920      	ldr	r1, [pc, #128]	; (2e8c <thread_output_code+0xcc>)
    2e0c:	f101 020a 	add.w	r2, r1, #10
    2e10:	481f      	ldr	r0, [pc, #124]	; (2e90 <thread_output_code+0xd0>)
    2e12:	f00c f87e 	bl	ef12 <printk>
        printk("\t%d obstacles detected\n\r", obscount_output);
    2e16:	4b1f      	ldr	r3, [pc, #124]	; (2e94 <thread_output_code+0xd4>)
    2e18:	8819      	ldrh	r1, [r3, #0]
    2e1a:	481f      	ldr	r0, [pc, #124]	; (2e98 <thread_output_code+0xd8>)
    2e1c:	f00c f879 	bl	ef12 <printk>
	return z_impl_k_uptime_ticks();
    2e20:	f00d fbaf 	bl	10582 <z_impl_k_uptime_ticks>
    2e24:	4684      	mov	ip, r0
    2e26:	014a      	lsls	r2, r1, #5
    2e28:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    2e2c:	0140      	lsls	r0, r0, #5
    2e2e:	ebb0 000c 	subs.w	r0, r0, ip
    2e32:	eb62 0301 	sbc.w	r3, r2, r1
    2e36:	009b      	lsls	r3, r3, #2
    2e38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
    2e3c:	0080      	lsls	r0, r0, #2
    2e3e:	eb10 000c 	adds.w	r0, r0, ip
    2e42:	eb43 0301 	adc.w	r3, r3, r1
    2e46:	00db      	lsls	r3, r3, #3
    2e48:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    2e4c:	f3c0 3010 	ubfx	r0, r0, #12, #17
    2e50:	0bda      	lsrs	r2, r3, #15
    2e52:	ea40 4343 	orr.w	r3, r0, r3, lsl #17
        if (fin_time - t_prev < t_min)
    2e56:	1b1c      	subs	r4, r3, r4
    2e58:	eb62 0505 	sbc.w	r5, r2, r5
    2e5c:	42bc      	cmp	r4, r7
    2e5e:	eb75 0106 	sbcs.w	r1, r5, r6
    2e62:	dbbf      	blt.n	2de4 <thread_output_code+0x24>
        else if (fin_time - t_prev > t_max)
    2e64:	45a1      	cmp	r9, r4
    2e66:	eb78 0105 	sbcs.w	r1, r8, r5
    2e6a:	dabd      	bge.n	2de8 <thread_output_code+0x28>
            t_max = fin_time - t_prev;
    2e6c:	46a1      	mov	r9, r4
    2e6e:	46a8      	mov	r8, r5
    2e70:	e7ba      	b.n	2de8 <thread_output_code+0x28>
    2e72:	bf00      	nop
    2e74:	00011304 	.word	0x00011304
    2e78:	00011300 	.word	0x00011300
    2e7c:	2000c98c 	.word	0x2000c98c
    2e80:	2000d71e 	.word	0x2000d71e
    2e84:	000112fc 	.word	0x000112fc
    2e88:	00011318 	.word	0x00011318
    2e8c:	20000000 	.word	0x20000000
    2e90:	0001133c 	.word	0x0001133c
    2e94:	2000d71c 	.word	0x2000d71c
    2e98:	00011368 	.word	0x00011368

00002e9c <main>:
{
    2e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e9e:	b089      	sub	sp, #36	; 0x24
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    2ea0:	4870      	ldr	r0, [pc, #448]	; (3064 <main+0x1c8>)
    2ea2:	f007 f94b 	bl	a13c <z_impl_device_get_binding>
    uart_dev = device_get_binding(DT_LABEL(UART_NODE));
    2ea6:	4a70      	ldr	r2, [pc, #448]	; (3068 <main+0x1cc>)
    2ea8:	6010      	str	r0, [r2, #0]
    if (uart_dev == NULL)
    2eaa:	b340      	cbz	r0, 2efe <main+0x62>
        printk("UART binding successful\n\r");
    2eac:	486f      	ldr	r0, [pc, #444]	; (306c <main+0x1d0>)
    2eae:	f00c f830 	bl	ef12 <printk>
    err = uart_configure(uart_dev, &uart_cfg);
    2eb2:	4b6d      	ldr	r3, [pc, #436]	; (3068 <main+0x1cc>)
    2eb4:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    2eb6:	6883      	ldr	r3, [r0, #8]
	if (api->configure == NULL) {
    2eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2eba:	b32b      	cbz	r3, 2f08 <main+0x6c>
	return api->configure(dev, cfg);
    2ebc:	496c      	ldr	r1, [pc, #432]	; (3070 <main+0x1d4>)
    2ebe:	4798      	blx	r3
    2ec0:	4603      	mov	r3, r0
    if (err == -ENOSYS)
    2ec2:	f113 0f58 	cmn.w	r3, #88	; 0x58
    2ec6:	d022      	beq.n	2f0e <main+0x72>
    err = uart_rx_enable(uart_dev, rx_buf, sizeof(rx_buf), RX_TIMEOUT);
    2ec8:	4b67      	ldr	r3, [pc, #412]	; (3068 <main+0x1cc>)
    2eca:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    2ecc:	6883      	ldr	r3, [r0, #8]
	return api->rx_enable(dev, buf, len, timeout);
    2ece:	68dc      	ldr	r4, [r3, #12]
    2ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2ed4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2ed8:	4966      	ldr	r1, [pc, #408]	; (3074 <main+0x1d8>)
    2eda:	47a0      	blx	r4
    if (err)
    2edc:	4601      	mov	r1, r0
    2ede:	b9d0      	cbnz	r0, 2f16 <main+0x7a>
    err = uart_callback_set(uart_dev, uart_cb, NULL);
    2ee0:	4b61      	ldr	r3, [pc, #388]	; (3068 <main+0x1cc>)
    2ee2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    2ee4:	6883      	ldr	r3, [r0, #8]
	if (api->callback_set == NULL) {
    2ee6:	681b      	ldr	r3, [r3, #0]
    2ee8:	b1cb      	cbz	r3, 2f1e <main+0x82>
	return api->callback_set(dev, callback, user_data);
    2eea:	2200      	movs	r2, #0
    2eec:	4962      	ldr	r1, [pc, #392]	; (3078 <main+0x1dc>)
    2eee:	4798      	blx	r3
    if (err)
    2ef0:	4601      	mov	r1, r0
    2ef2:	b1b8      	cbz	r0, 2f24 <main+0x88>
        printk("uart_callback_set() error. Error code:%d\n\r", err);
    2ef4:	4861      	ldr	r0, [pc, #388]	; (307c <main+0x1e0>)
    2ef6:	f00c f80c 	bl	ef12 <printk>
}
    2efa:	b009      	add	sp, #36	; 0x24
    2efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printk("device_get_binding() error for device %s!\n\r", DT_LABEL(UART_NODE));
    2efe:	4959      	ldr	r1, [pc, #356]	; (3064 <main+0x1c8>)
    2f00:	485f      	ldr	r0, [pc, #380]	; (3080 <main+0x1e4>)
    2f02:	f00c f806 	bl	ef12 <printk>
        return;
    2f06:	e7f8      	b.n	2efa <main+0x5e>
		return -ENOSYS;
    2f08:	f06f 0357 	mvn.w	r3, #87	; 0x57
    2f0c:	e7d9      	b.n	2ec2 <main+0x26>
        printk("uart_configure() error. Invalid configuration\n\r");
    2f0e:	485d      	ldr	r0, [pc, #372]	; (3084 <main+0x1e8>)
    2f10:	f00b ffff 	bl	ef12 <printk>
        return;
    2f14:	e7f1      	b.n	2efa <main+0x5e>
        printk("uart_rx_enable() error. Error code:%d\n\r", err);
    2f16:	485c      	ldr	r0, [pc, #368]	; (3088 <main+0x1ec>)
    2f18:	f00b fffb 	bl	ef12 <printk>
        return;
    2f1c:	e7ed      	b.n	2efa <main+0x5e>
		return -ENOSYS;
    2f1e:	f06f 0157 	mvn.w	r1, #87	; 0x57
    2f22:	e7e7      	b.n	2ef4 <main+0x58>
    uint8_t **img1 = (uint8_t **)malloc(IMGWIDTH * sizeof(uint8_t *));
    2f24:	f44f 7000 	mov.w	r0, #512	; 0x200
    2f28:	f00a fb58 	bl	d5dc <malloc>
    2f2c:	4604      	mov	r4, r0
    for (uint8_t j = 0; j < IMGWIDTH; j++)
    2f2e:	2500      	movs	r5, #0
    2f30:	e006      	b.n	2f40 <main+0xa4>
        img1[j] = (uint8_t *)malloc(IMGWIDTH * sizeof(uint8_t));
    2f32:	2080      	movs	r0, #128	; 0x80
    2f34:	f00a fb52 	bl	d5dc <malloc>
    2f38:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    for (uint8_t j = 0; j < IMGWIDTH; j++)
    2f3c:	3501      	adds	r5, #1
    2f3e:	b2ed      	uxtb	r5, r5
    2f40:	f015 0f80 	tst.w	r5, #128	; 0x80
    2f44:	d0f5      	beq.n	2f32 <main+0x96>
    for (size_t i = 0; i < IMGWIDTH; i++)
    2f46:	2100      	movs	r1, #0
    2f48:	e00a      	b.n	2f60 <main+0xc4>
            img1[i][j] = vertical_guide_image_data[i][j];
    2f4a:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
    2f4e:	4a4f      	ldr	r2, [pc, #316]	; (308c <main+0x1f0>)
    2f50:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    2f54:	5cd2      	ldrb	r2, [r2, r3]
    2f56:	54c2      	strb	r2, [r0, r3]
        for (size_t j = 0; j < IMGWIDTH; j++)
    2f58:	3301      	adds	r3, #1
    2f5a:	2b7f      	cmp	r3, #127	; 0x7f
    2f5c:	d9f5      	bls.n	2f4a <main+0xae>
    for (size_t i = 0; i < IMGWIDTH; i++)
    2f5e:	3101      	adds	r1, #1
    2f60:	297f      	cmp	r1, #127	; 0x7f
    2f62:	d801      	bhi.n	2f68 <main+0xcc>
        for (size_t j = 0; j < IMGWIDTH; j++)
    2f64:	2300      	movs	r3, #0
    2f66:	e7f8      	b.n	2f5a <main+0xbe>
    printk("open cab");
    2f68:	4849      	ldr	r0, [pc, #292]	; (3090 <main+0x1f4>)
    2f6a:	f00b ffd2 	bl	ef12 <printk>
    image_cab = open_cab("image cab", 5, IMGWIDTH * IMGWIDTH, (void *)img1);
    2f6e:	4623      	mov	r3, r4
    2f70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2f74:	2105      	movs	r1, #5
    2f76:	4847      	ldr	r0, [pc, #284]	; (3094 <main+0x1f8>)
    2f78:	f00b fef2 	bl	ed60 <open_cab>
    2f7c:	4b46      	ldr	r3, [pc, #280]	; (3098 <main+0x1fc>)
    2f7e:	6018      	str	r0, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    2f80:	2201      	movs	r2, #1
    2f82:	2100      	movs	r1, #0
    2f84:	4845      	ldr	r0, [pc, #276]	; (309c <main+0x200>)
    2f86:	f00d faa6 	bl	104d6 <z_impl_k_sem_init>
    2f8a:	2201      	movs	r2, #1
    2f8c:	2100      	movs	r1, #0
    2f8e:	4844      	ldr	r0, [pc, #272]	; (30a0 <main+0x204>)
    2f90:	f00d faa1 	bl	104d6 <z_impl_k_sem_init>
    2f94:	2201      	movs	r2, #1
    2f96:	2100      	movs	r1, #0
    2f98:	4842      	ldr	r0, [pc, #264]	; (30a4 <main+0x208>)
    2f9a:	f00d fa9c 	bl	104d6 <z_impl_k_sem_init>
    2f9e:	2201      	movs	r2, #1
    2fa0:	2100      	movs	r1, #0
    2fa2:	4841      	ldr	r0, [pc, #260]	; (30a8 <main+0x20c>)
    2fa4:	f00d fa97 	bl	104d6 <z_impl_k_sem_init>
    2fa8:	2201      	movs	r2, #1
    2faa:	2100      	movs	r1, #0
    2fac:	483f      	ldr	r0, [pc, #252]	; (30ac <main+0x210>)
    2fae:	f00d fa92 	bl	104d6 <z_impl_k_sem_init>
                                               NULL, NULL, NULL, thread_near_obstacle_prio, 0, K_NO_WAIT);
    2fb2:	2600      	movs	r6, #0
    2fb4:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    2fb6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    2fba:	2400      	movs	r4, #0
    2fbc:	9404      	str	r4, [sp, #16]
    2fbe:	2304      	movs	r3, #4
    2fc0:	9303      	str	r3, [sp, #12]
    2fc2:	9402      	str	r4, [sp, #8]
    2fc4:	9401      	str	r4, [sp, #4]
    2fc6:	9400      	str	r4, [sp, #0]
    2fc8:	4b39      	ldr	r3, [pc, #228]	; (30b0 <main+0x214>)
    2fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2fce:	4939      	ldr	r1, [pc, #228]	; (30b4 <main+0x218>)
    2fd0:	4839      	ldr	r0, [pc, #228]	; (30b8 <main+0x21c>)
    2fd2:	f007 fce3 	bl	a99c <z_impl_k_thread_create>
    thread_near_obstacle_tid = k_thread_create(&thread_near_obstacle_data, thread_near_obstacle_stack,
    2fd6:	4b39      	ldr	r3, [pc, #228]	; (30bc <main+0x220>)
    2fd8:	6018      	str	r0, [r3, #0]
    2fda:	e9cd 6706 	strd	r6, r7, [sp, #24]
    2fde:	9404      	str	r4, [sp, #16]
    2fe0:	2305      	movs	r3, #5
    2fe2:	9303      	str	r3, [sp, #12]
    2fe4:	9402      	str	r4, [sp, #8]
    2fe6:	9401      	str	r4, [sp, #4]
    2fe8:	9400      	str	r4, [sp, #0]
    2fea:	4b35      	ldr	r3, [pc, #212]	; (30c0 <main+0x224>)
    2fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2ff0:	4934      	ldr	r1, [pc, #208]	; (30c4 <main+0x228>)
    2ff2:	4835      	ldr	r0, [pc, #212]	; (30c8 <main+0x22c>)
    2ff4:	f007 fcd2 	bl	a99c <z_impl_k_thread_create>
    thread_receive_image_tid = k_thread_create(&thread_receive_image_data, thread_receive_image_stack,
    2ff8:	4b34      	ldr	r3, [pc, #208]	; (30cc <main+0x230>)
    2ffa:	6018      	str	r0, [r3, #0]
    2ffc:	e9cd 6706 	strd	r6, r7, [sp, #24]
    3000:	9404      	str	r4, [sp, #16]
    3002:	2302      	movs	r3, #2
    3004:	9303      	str	r3, [sp, #12]
    3006:	9402      	str	r4, [sp, #8]
    3008:	9401      	str	r4, [sp, #4]
    300a:	9400      	str	r4, [sp, #0]
    300c:	4b30      	ldr	r3, [pc, #192]	; (30d0 <main+0x234>)
    300e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3012:	4930      	ldr	r1, [pc, #192]	; (30d4 <main+0x238>)
    3014:	4830      	ldr	r0, [pc, #192]	; (30d8 <main+0x23c>)
    3016:	f007 fcc1 	bl	a99c <z_impl_k_thread_create>
    thread_orientation_tid = k_thread_create(&thread_orientation_data, thread_orientation_stack,
    301a:	4b30      	ldr	r3, [pc, #192]	; (30dc <main+0x240>)
    301c:	6018      	str	r0, [r3, #0]
    301e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    3022:	9404      	str	r4, [sp, #16]
    3024:	2303      	movs	r3, #3
    3026:	9303      	str	r3, [sp, #12]
    3028:	9402      	str	r4, [sp, #8]
    302a:	9401      	str	r4, [sp, #4]
    302c:	9400      	str	r4, [sp, #0]
    302e:	4b2c      	ldr	r3, [pc, #176]	; (30e0 <main+0x244>)
    3030:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3034:	492b      	ldr	r1, [pc, #172]	; (30e4 <main+0x248>)
    3036:	482c      	ldr	r0, [pc, #176]	; (30e8 <main+0x24c>)
    3038:	f007 fcb0 	bl	a99c <z_impl_k_thread_create>
    thread_output_tid = k_thread_create(&thread_output_data, thread_output_stack,
    303c:	4b2b      	ldr	r3, [pc, #172]	; (30ec <main+0x250>)
    303e:	6018      	str	r0, [r3, #0]
    3040:	e9cd 6706 	strd	r6, r7, [sp, #24]
    3044:	9404      	str	r4, [sp, #16]
    3046:	2301      	movs	r3, #1
    3048:	9303      	str	r3, [sp, #12]
    304a:	9402      	str	r4, [sp, #8]
    304c:	9401      	str	r4, [sp, #4]
    304e:	9400      	str	r4, [sp, #0]
    3050:	4b27      	ldr	r3, [pc, #156]	; (30f0 <main+0x254>)
    3052:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3056:	4927      	ldr	r1, [pc, #156]	; (30f4 <main+0x258>)
    3058:	4827      	ldr	r0, [pc, #156]	; (30f8 <main+0x25c>)
    305a:	f007 fc9f 	bl	a99c <z_impl_k_thread_create>
    thread_obscount_tid = k_thread_create(&thread_obscount_data, thread_obscount_stack,
    305e:	4b27      	ldr	r3, [pc, #156]	; (30fc <main+0x260>)
    3060:	6018      	str	r0, [r3, #0]
    return;
    3062:	e74a      	b.n	2efa <main+0x5e>
    3064:	00011384 	.word	0x00011384
    3068:	2000c9b0 	.word	0x2000c9b0
    306c:	000113b8 	.word	0x000113b8
    3070:	000114c4 	.word	0x000114c4
    3074:	2000494c 	.word	0x2000494c
    3078:	00002b8d 	.word	0x00002b8d
    307c:	00011404 	.word	0x00011404
    3080:	0001138c 	.word	0x0001138c
    3084:	000113d4 	.word	0x000113d4
    3088:	00011284 	.word	0x00011284
    308c:	20000014 	.word	0x20000014
    3090:	00011430 	.word	0x00011430
    3094:	0001143c 	.word	0x0001143c
    3098:	20004934 	.word	0x20004934
    309c:	2000c95c 	.word	0x2000c95c
    30a0:	2000c97c 	.word	0x2000c97c
    30a4:	2000c98c 	.word	0x2000c98c
    30a8:	2000c96c 	.word	0x2000c96c
    30ac:	2000c94c 	.word	0x2000c94c
    30b0:	00003101 	.word	0x00003101
    30b4:	2000db60 	.word	0x2000db60
    30b8:	20004288 	.word	0x20004288
    30bc:	2000c99c 	.word	0x2000c99c
    30c0:	00002d21 	.word	0x00002d21
    30c4:	2000d740 	.word	0x2000d740
    30c8:	20004548 	.word	0x20004548
    30cc:	2000c9ac 	.word	0x2000c9ac
    30d0:	0000322d 	.word	0x0000322d
    30d4:	2000df80 	.word	0x2000df80
    30d8:	200043e8 	.word	0x200043e8
    30dc:	2000c9a4 	.word	0x2000c9a4
    30e0:	00002dc1 	.word	0x00002dc1
    30e4:	2000e3a0 	.word	0x2000e3a0
    30e8:	20004498 	.word	0x20004498
    30ec:	2000c9a8 	.word	0x2000c9a8
    30f0:	0000340d 	.word	0x0000340d
    30f4:	2000e7c0 	.word	0x2000e7c0
    30f8:	20004338 	.word	0x20004338
    30fc:	2000c9a0 	.word	0x2000c9a0

00003100 <thread_near_obstacle_code>:
{
    3100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3104:	b083      	sub	sp, #12
    printk("Thread near_obstacle init\n");
    3106:	4843      	ldr	r0, [pc, #268]	; (3214 <thread_near_obstacle_code+0x114>)
    3108:	f00b ff03 	bl	ef12 <printk>
	return z_impl_k_uptime_ticks();
    310c:	f00d fa39 	bl	10582 <z_impl_k_uptime_ticks>
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    3110:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    3114:	2700      	movs	r7, #0
    3116:	46c3      	mov	fp, r8
    3118:	46ba      	mov	sl, r7
    311a:	46b9      	mov	r9, r7
    311c:	9701      	str	r7, [sp, #4]
    311e:	e058      	b.n	31d2 <thread_near_obstacle_code+0xd2>
                    inObs++;
    3120:	3201      	adds	r2, #1
                if (inObs > 1)
    3122:	2a01      	cmp	r2, #1
    3124:	dd00      	ble.n	3128 <thread_near_obstacle_code+0x28>
                    res = 1;
    3126:	2501      	movs	r5, #1
            for (i = NOB_COL; i < NOB_COL + NOB_WIDTH; i++)
    3128:	3301      	adds	r3, #1
    312a:	2b5f      	cmp	r3, #95	; 0x5f
    312c:	dc08      	bgt.n	3140 <thread_near_obstacle_code+0x40>
                if (image[j][i] == OBSTACLE_COLOR)
    312e:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
    3132:	5cc9      	ldrb	r1, [r1, r3]
    3134:	2980      	cmp	r1, #128	; 0x80
    3136:	d0f3      	beq.n	3120 <thread_near_obstacle_code+0x20>
                else if (inObs > 1)
    3138:	2a01      	cmp	r2, #1
    313a:	ddf2      	ble.n	3122 <thread_near_obstacle_code+0x22>
                    inObs = 0;
    313c:	2200      	movs	r2, #0
    313e:	e7f3      	b.n	3128 <thread_near_obstacle_code+0x28>
        for (j = NOB_ROW; j < IMGWIDTH; j++)
    3140:	3001      	adds	r0, #1
    3142:	287f      	cmp	r0, #127	; 0x7f
    3144:	dc02      	bgt.n	314c <thread_near_obstacle_code+0x4c>
            int inObs = 0;
    3146:	2200      	movs	r2, #0
            for (i = NOB_COL; i < NOB_COL + NOB_WIDTH; i++)
    3148:	2320      	movs	r3, #32
    314a:	e7ee      	b.n	312a <thread_near_obstacle_code+0x2a>
        for (i = 0; i < IMGWIDTH; i++)
    314c:	2600      	movs	r6, #0
    314e:	e004      	b.n	315a <thread_near_obstacle_code+0x5a>
            free(image[i]);
    3150:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    3154:	f00a fa4a 	bl	d5ec <free>
        for (i = 0; i < IMGWIDTH; i++)
    3158:	3601      	adds	r6, #1
    315a:	2e7f      	cmp	r6, #127	; 0x7f
    315c:	ddf8      	ble.n	3150 <thread_near_obstacle_code+0x50>
        free(image);
    315e:	4620      	mov	r0, r4
    3160:	f00a fa44 	bl	d5ec <free>
        nearobs_output = res;
    3164:	4b2c      	ldr	r3, [pc, #176]	; (3218 <thread_near_obstacle_code+0x118>)
    3166:	701d      	strb	r5, [r3, #0]
	z_impl_k_sem_give(sem);
    3168:	482c      	ldr	r0, [pc, #176]	; (321c <thread_near_obstacle_code+0x11c>)
    316a:	f007 ff03 	bl	af74 <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
    316e:	f00d fa08 	bl	10582 <z_impl_k_uptime_ticks>
    3172:	014a      	lsls	r2, r1, #5
    3174:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    3178:	0143      	lsls	r3, r0, #5
    317a:	1a1b      	subs	r3, r3, r0
    317c:	eb62 0201 	sbc.w	r2, r2, r1
    3180:	0092      	lsls	r2, r2, #2
    3182:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    3186:	009b      	lsls	r3, r3, #2
    3188:	181b      	adds	r3, r3, r0
    318a:	eb42 0201 	adc.w	r2, r2, r1
    318e:	00d2      	lsls	r2, r2, #3
    3190:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    3194:	f3c3 3310 	ubfx	r3, r3, #12, #17
    3198:	0bd0      	lsrs	r0, r2, #15
    319a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        if (fin_time - t_prev < t_min)
    319e:	ebb3 0109 	subs.w	r1, r3, r9
    31a2:	9a01      	ldr	r2, [sp, #4]
    31a4:	eb60 0202 	sbc.w	r2, r0, r2
    31a8:	4559      	cmp	r1, fp
    31aa:	eb72 040a 	sbcs.w	r4, r2, sl
    31ae:	db06      	blt.n	31be <thread_near_obstacle_code+0xbe>
        else if (fin_time - t_prev > t_max)
    31b0:	4588      	cmp	r8, r1
    31b2:	eb77 0402 	sbcs.w	r4, r7, r2
    31b6:	da04      	bge.n	31c2 <thread_near_obstacle_code+0xc2>
            t_max = fin_time - t_prev;
    31b8:	4688      	mov	r8, r1
    31ba:	4617      	mov	r7, r2
    31bc:	e001      	b.n	31c2 <thread_near_obstacle_code+0xc2>
            t_min = fin_time - t_prev;
    31be:	468b      	mov	fp, r1
    31c0:	4692      	mov	sl, r2
        irq_unlock(key1);
    31c2:	4a17      	ldr	r2, [pc, #92]	; (3220 <thread_near_obstacle_code+0x120>)
    31c4:	6812      	ldr	r2, [r2, #0]
    31c6:	f382 8811 	msr	BASEPRI, r2
    31ca:	f3bf 8f6f 	isb	sy
        t_prev = fin_time;
    31ce:	4699      	mov	r9, r3
    31d0:	9001      	str	r0, [sp, #4]
	return z_impl_k_sem_take(sem, timeout);
    31d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    31d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    31da:	4812      	ldr	r0, [pc, #72]	; (3224 <thread_near_obstacle_code+0x124>)
    31dc:	f007 ff0e 	bl	affc <z_impl_k_sem_take>
	__asm__ volatile(
    31e0:	f04f 0320 	mov.w	r3, #32
    31e4:	f3ef 8211 	mrs	r2, BASEPRI
    31e8:	f383 8812 	msr	BASEPRI_MAX, r3
    31ec:	f3bf 8f6f 	isb	sy
        key1 = irq_lock();
    31f0:	4b0b      	ldr	r3, [pc, #44]	; (3220 <thread_near_obstacle_code+0x120>)
    31f2:	601a      	str	r2, [r3, #0]
        uint8_t *cab_img = (uint8_t *)get_mes(image_cab);
    31f4:	4e0c      	ldr	r6, [pc, #48]	; (3228 <thread_near_obstacle_code+0x128>)
    31f6:	6830      	ldr	r0, [r6, #0]
    31f8:	f00b fdf2 	bl	ede0 <get_mes>
    31fc:	4605      	mov	r5, r0
        uint8_t **image = castImage(cab_img);
    31fe:	f00b fd8c 	bl	ed1a <castImage>
    3202:	4604      	mov	r4, r0
        unget((void *)cab_img, image_cab);
    3204:	6831      	ldr	r1, [r6, #0]
    3206:	4628      	mov	r0, r5
    3208:	f00b fe13 	bl	ee32 <unget>
        uint8_t res = 0;
    320c:	2500      	movs	r5, #0
        for (j = NOB_ROW; j < IMGWIDTH; j++)
    320e:	2040      	movs	r0, #64	; 0x40
    3210:	e797      	b.n	3142 <thread_near_obstacle_code+0x42>
    3212:	bf00      	nop
    3214:	00011448 	.word	0x00011448
    3218:	2000d71e 	.word	0x2000d71e
    321c:	2000c98c 	.word	0x2000c98c
    3220:	20004938 	.word	0x20004938
    3224:	2000c95c 	.word	0x2000c95c
    3228:	20004934 	.word	0x20004934

0000322c <thread_orientation_code>:
{
    322c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3230:	b087      	sub	sp, #28
    printk("Thread orientation init\n");
    3232:	486e      	ldr	r0, [pc, #440]	; (33ec <thread_orientation_code+0x1c0>)
    3234:	f00b fe6d 	bl	ef12 <printk>
	return z_impl_k_uptime_ticks();
    3238:	f00d f9a3 	bl	10582 <z_impl_k_uptime_ticks>
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    323c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3240:	9304      	str	r3, [sp, #16]
    3242:	f04f 0900 	mov.w	r9, #0
    3246:	46ca      	mov	sl, r9
    3248:	f8cd 9014 	str.w	r9, [sp, #20]
    324c:	9301      	str	r3, [sp, #4]
    324e:	46cb      	mov	fp, r9
    3250:	e0a2      	b.n	3398 <thread_orientation_code+0x16c>
                pos = i;
    3252:	b22d      	sxth	r5, r5
        for (i = 0; i < IMGWIDTH; i++)
    3254:	2600      	movs	r6, #0
    3256:	2e7f      	cmp	r6, #127	; 0x7f
    3258:	dc08      	bgt.n	326c <thread_orientation_code+0x40>
            if (image[GF_ROW][i] == GUIDELINE_COLOR)
    325a:	6823      	ldr	r3, [r4, #0]
    325c:	5d9b      	ldrb	r3, [r3, r6]
    325e:	2bff      	cmp	r3, #255	; 0xff
    3260:	d006      	beq.n	3270 <thread_orientation_code+0x44>
        for (i = 0; i < IMGWIDTH; i++)
    3262:	3601      	adds	r6, #1
    3264:	e7f7      	b.n	3256 <thread_orientation_code+0x2a>
        pos = -1;
    3266:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    326a:	e7f3      	b.n	3254 <thread_orientation_code+0x28>
        gf_pos = -1;
    326c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
        if (pos == -1 || gf_pos == -1)
    3270:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    3274:	d042      	beq.n	32fc <thread_orientation_code+0xd0>
    3276:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    327a:	d03f      	beq.n	32fc <thread_orientation_code+0xd0>
        if (pos == gf_pos)
    327c:	46a8      	mov	r8, r5
    327e:	42b5      	cmp	r5, r6
    3280:	d044      	beq.n	330c <thread_orientation_code+0xe0>
            int pos_delta = pos - gf_pos;
    3282:	1bad      	subs	r5, r5, r6
            if (pos_delta > 0)
    3284:	2d00      	cmp	r5, #0
    3286:	dd3f      	ble.n	3308 <thread_orientation_code+0xdc>
                pos_delta++;
    3288:	3501      	adds	r5, #1
            angle = acos(IMGWIDTH / sqrt(pow(IMGWIDTH, 2) + pow(pos_delta, 2)));
    328a:	2600      	movs	r6, #0
    328c:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    3290:	4632      	mov	r2, r6
    3292:	463b      	mov	r3, r7
    3294:	2000      	movs	r0, #0
    3296:	4956      	ldr	r1, [pc, #344]	; (33f0 <thread_orientation_code+0x1c4>)
    3298:	f009 ff48 	bl	d12c <pow>
    329c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    32a0:	4628      	mov	r0, r5
    32a2:	f7fd f8cf 	bl	444 <__aeabi_i2d>
    32a6:	4632      	mov	r2, r6
    32a8:	463b      	mov	r3, r7
    32aa:	f009 ff3f 	bl	d12c <pow>
    32ae:	4602      	mov	r2, r0
    32b0:	460b      	mov	r3, r1
    32b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    32b6:	f7fc ff79 	bl	1ac <__adddf3>
    32ba:	f009 ffe3 	bl	d284 <sqrt>
    32be:	4602      	mov	r2, r0
    32c0:	460b      	mov	r3, r1
    32c2:	2000      	movs	r0, #0
    32c4:	494a      	ldr	r1, [pc, #296]	; (33f0 <thread_orientation_code+0x1c4>)
    32c6:	f7fd fa51 	bl	76c <__aeabi_ddiv>
    32ca:	f009 ff01 	bl	d0d0 <acos>
    32ce:	f7fd fb35 	bl	93c <__aeabi_d2f>
    32d2:	4606      	mov	r6, r0
            if (pos_delta > 0)
    32d4:	2d00      	cmp	r5, #0
    32d6:	dd01      	ble.n	32dc <thread_orientation_code+0xb0>
                angle = -angle;
    32d8:	f100 4600 	add.w	r6, r0, #2147483648	; 0x80000000
        itoa(pos, orientation_output[0], 10);
    32dc:	4d45      	ldr	r5, [pc, #276]	; (33f4 <thread_orientation_code+0x1c8>)
    32de:	220a      	movs	r2, #10
    32e0:	4629      	mov	r1, r5
    32e2:	4640      	mov	r0, r8
    32e4:	f00d f9a7 	bl	10636 <itoa>
        gcvt(angle, 6, orientation_output[1]);
    32e8:	350a      	adds	r5, #10
    32ea:	4630      	mov	r0, r6
    32ec:	f7fd f8bc 	bl	468 <__aeabi_f2d>
    32f0:	462b      	mov	r3, r5
    32f2:	2206      	movs	r2, #6
    32f4:	f00a f93a 	bl	d56c <gcvt>
        for (i = 0; i < IMGWIDTH; i++)
    32f8:	2500      	movs	r5, #0
    32fa:	e00e      	b.n	331a <thread_orientation_code+0xee>
            printk("Failed to find guideline pos=%d, gf_pos=%d", pos, gf_pos);
    32fc:	4632      	mov	r2, r6
    32fe:	4629      	mov	r1, r5
    3300:	483d      	ldr	r0, [pc, #244]	; (33f8 <thread_orientation_code+0x1cc>)
    3302:	f00b fe06 	bl	ef12 <printk>
    3306:	e7b9      	b.n	327c <thread_orientation_code+0x50>
                pos_delta--;
    3308:	3d01      	subs	r5, #1
    330a:	e7be      	b.n	328a <thread_orientation_code+0x5e>
            angle = 0;
    330c:	2600      	movs	r6, #0
    330e:	e7e5      	b.n	32dc <thread_orientation_code+0xb0>
            free(image[i]);
    3310:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    3314:	f00a f96a 	bl	d5ec <free>
        for (i = 0; i < IMGWIDTH; i++)
    3318:	3501      	adds	r5, #1
    331a:	2d7f      	cmp	r5, #127	; 0x7f
    331c:	ddf8      	ble.n	3310 <thread_orientation_code+0xe4>
        free(image);
    331e:	4620      	mov	r0, r4
    3320:	f00a f964 	bl	d5ec <free>
	z_impl_k_sem_give(sem);
    3324:	4835      	ldr	r0, [pc, #212]	; (33fc <thread_orientation_code+0x1d0>)
    3326:	f007 fe25 	bl	af74 <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
    332a:	f00d f92a 	bl	10582 <z_impl_k_uptime_ticks>
    332e:	014a      	lsls	r2, r1, #5
    3330:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    3334:	0143      	lsls	r3, r0, #5
    3336:	1a1b      	subs	r3, r3, r0
    3338:	eb62 0201 	sbc.w	r2, r2, r1
    333c:	0092      	lsls	r2, r2, #2
    333e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    3342:	009b      	lsls	r3, r3, #2
    3344:	181b      	adds	r3, r3, r0
    3346:	eb42 0201 	adc.w	r2, r2, r1
    334a:	00d2      	lsls	r2, r2, #3
    334c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    3350:	f3c3 3310 	ubfx	r3, r3, #12, #17
    3354:	0bd1      	lsrs	r1, r2, #15
    3356:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        if (fin_time - t_prev < t_min)
    335a:	ebb3 0b0b 	subs.w	fp, r3, fp
    335e:	eb61 0a0a 	sbc.w	sl, r1, sl
    3362:	9a01      	ldr	r2, [sp, #4]
    3364:	4593      	cmp	fp, r2
    3366:	eb7a 0209 	sbcs.w	r2, sl, r9
    336a:	db0a      	blt.n	3382 <thread_orientation_code+0x156>
        else if (fin_time - t_prev > t_max)
    336c:	9a04      	ldr	r2, [sp, #16]
    336e:	455a      	cmp	r2, fp
    3370:	9a05      	ldr	r2, [sp, #20]
    3372:	eb72 020a 	sbcs.w	r2, r2, sl
    3376:	da07      	bge.n	3388 <thread_orientation_code+0x15c>
            t_max = fin_time - t_prev;
    3378:	f8cd b010 	str.w	fp, [sp, #16]
    337c:	f8cd a014 	str.w	sl, [sp, #20]
    3380:	e002      	b.n	3388 <thread_orientation_code+0x15c>
            t_min = fin_time - t_prev;
    3382:	f8cd b004 	str.w	fp, [sp, #4]
    3386:	46d1      	mov	r9, sl
        irq_unlock(key2);
    3388:	4a1d      	ldr	r2, [pc, #116]	; (3400 <thread_orientation_code+0x1d4>)
    338a:	6812      	ldr	r2, [r2, #0]
	__asm__ volatile(
    338c:	f382 8811 	msr	BASEPRI, r2
    3390:	f3bf 8f6f 	isb	sy
        t_prev = fin_time;
    3394:	469b      	mov	fp, r3
    3396:	468a      	mov	sl, r1
	return z_impl_k_sem_take(sem, timeout);
    3398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    339c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    33a0:	4818      	ldr	r0, [pc, #96]	; (3404 <thread_orientation_code+0x1d8>)
    33a2:	f007 fe2b 	bl	affc <z_impl_k_sem_take>
	__asm__ volatile(
    33a6:	f04f 0320 	mov.w	r3, #32
    33aa:	f3ef 8211 	mrs	r2, BASEPRI
    33ae:	f383 8812 	msr	BASEPRI_MAX, r3
    33b2:	f3bf 8f6f 	isb	sy
        key2 = irq_lock();
    33b6:	4b12      	ldr	r3, [pc, #72]	; (3400 <thread_orientation_code+0x1d4>)
    33b8:	601a      	str	r2, [r3, #0]
        uint8_t *cab_img = (uint8_t *)get_mes(image_cab);
    33ba:	4e13      	ldr	r6, [pc, #76]	; (3408 <thread_orientation_code+0x1dc>)
    33bc:	6830      	ldr	r0, [r6, #0]
    33be:	f00b fd0f 	bl	ede0 <get_mes>
    33c2:	4605      	mov	r5, r0
        uint8_t **image = castImage(cab_img);
    33c4:	f00b fca9 	bl	ed1a <castImage>
    33c8:	4604      	mov	r4, r0
        unget((void *)cab_img, image_cab);
    33ca:	6831      	ldr	r1, [r6, #0]
    33cc:	4628      	mov	r0, r5
    33ce:	f00b fd30 	bl	ee32 <unget>
        for (i = 0; i < IMGWIDTH; i++)
    33d2:	2500      	movs	r5, #0
    33d4:	2d7f      	cmp	r5, #127	; 0x7f
    33d6:	f73f af46 	bgt.w	3266 <thread_orientation_code+0x3a>
            if (image[GN_ROW][i] == GUIDELINE_COLOR)
    33da:	f8d4 31fc 	ldr.w	r3, [r4, #508]	; 0x1fc
    33de:	5d5b      	ldrb	r3, [r3, r5]
    33e0:	2bff      	cmp	r3, #255	; 0xff
    33e2:	f43f af36 	beq.w	3252 <thread_orientation_code+0x26>
        for (i = 0; i < IMGWIDTH; i++)
    33e6:	3501      	adds	r5, #1
    33e8:	e7f4      	b.n	33d4 <thread_orientation_code+0x1a8>
    33ea:	bf00      	nop
    33ec:	00011464 	.word	0x00011464
    33f0:	40600000 	.word	0x40600000
    33f4:	20000000 	.word	0x20000000
    33f8:	00011480 	.word	0x00011480
    33fc:	2000c98c 	.word	0x2000c98c
    3400:	2000493c 	.word	0x2000493c
    3404:	2000c97c 	.word	0x2000c97c
    3408:	20004934 	.word	0x20004934

0000340c <thread_obscount_code>:
{
    340c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3410:	b083      	sub	sp, #12
    printk("Thread obscount init\n");
    3412:	4840      	ldr	r0, [pc, #256]	; (3514 <thread_obscount_code+0x108>)
    3414:	f00b fd7d 	bl	ef12 <printk>
	return z_impl_k_uptime_ticks();
    3418:	f00d f8b3 	bl	10582 <z_impl_k_uptime_ticks>
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    341c:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
    3420:	2500      	movs	r5, #0
    3422:	46da      	mov	sl, fp
    3424:	46a9      	mov	r9, r5
    3426:	46a8      	mov	r8, r5
    3428:	462f      	mov	r7, r5
    342a:	e052      	b.n	34d2 <thread_obscount_code+0xc6>
                    inObs++;
    342c:	3101      	adds	r1, #1
            for (i = 0; i < IMGWIDTH; i++)
    342e:	3301      	adds	r3, #1
    3430:	2b7f      	cmp	r3, #127	; 0x7f
    3432:	dc09      	bgt.n	3448 <thread_obscount_code+0x3c>
                if (image[j][i] == OBSTACLE_COLOR)
    3434:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
    3438:	5cd2      	ldrb	r2, [r2, r3]
    343a:	2a80      	cmp	r2, #128	; 0x80
    343c:	d0f6      	beq.n	342c <thread_obscount_code+0x20>
                else if (inObs > 1)
    343e:	2901      	cmp	r1, #1
    3440:	ddf5      	ble.n	342e <thread_obscount_code+0x22>
                    nobs++;
    3442:	3601      	adds	r6, #1
                    inObs = 0;
    3444:	2100      	movs	r1, #0
    3446:	e7f2      	b.n	342e <thread_obscount_code+0x22>
            if (inObs > 1)
    3448:	2901      	cmp	r1, #1
    344a:	dd00      	ble.n	344e <thread_obscount_code+0x42>
                nobs++;
    344c:	3601      	adds	r6, #1
        for (j = 0; j < IMGWIDTH; j++)
    344e:	3001      	adds	r0, #1
    3450:	287f      	cmp	r0, #127	; 0x7f
    3452:	dc02      	bgt.n	345a <thread_obscount_code+0x4e>
            int inObs = 0;
    3454:	2100      	movs	r1, #0
            for (i = 0; i < IMGWIDTH; i++)
    3456:	460b      	mov	r3, r1
    3458:	e7ea      	b.n	3430 <thread_obscount_code+0x24>
        obscount_output = nobs;
    345a:	4b2f      	ldr	r3, [pc, #188]	; (3518 <thread_obscount_code+0x10c>)
    345c:	801e      	strh	r6, [r3, #0]
        for (i = 0; i < IMGWIDTH; i++)
    345e:	2600      	movs	r6, #0
    3460:	e004      	b.n	346c <thread_obscount_code+0x60>
            free(image[i]);
    3462:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    3466:	f00a f8c1 	bl	d5ec <free>
        for (i = 0; i < IMGWIDTH; i++)
    346a:	3601      	adds	r6, #1
    346c:	2e7f      	cmp	r6, #127	; 0x7f
    346e:	ddf8      	ble.n	3462 <thread_obscount_code+0x56>
        free(image);
    3470:	4620      	mov	r0, r4
    3472:	f00a f8bb 	bl	d5ec <free>
	z_impl_k_sem_give(sem);
    3476:	4829      	ldr	r0, [pc, #164]	; (351c <thread_obscount_code+0x110>)
    3478:	f007 fd7c 	bl	af74 <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
    347c:	f00d f881 	bl	10582 <z_impl_k_uptime_ticks>
    3480:	014a      	lsls	r2, r1, #5
    3482:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    3486:	0143      	lsls	r3, r0, #5
    3488:	1a1b      	subs	r3, r3, r0
    348a:	eb62 0201 	sbc.w	r2, r2, r1
    348e:	0092      	lsls	r2, r2, #2
    3490:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    3494:	009b      	lsls	r3, r3, #2
    3496:	181b      	adds	r3, r3, r0
    3498:	eb42 0201 	adc.w	r2, r2, r1
    349c:	00d2      	lsls	r2, r2, #3
    349e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    34a2:	f3c3 3310 	ubfx	r3, r3, #12, #17
    34a6:	0bd0      	lsrs	r0, r2, #15
    34a8:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        if (fin_time - t_prev < t_min)
    34ac:	ebb3 0108 	subs.w	r1, r3, r8
    34b0:	eb60 0207 	sbc.w	r2, r0, r7
    34b4:	4551      	cmp	r1, sl
    34b6:	eb72 0409 	sbcs.w	r4, r2, r9
    34ba:	db06      	blt.n	34ca <thread_obscount_code+0xbe>
        else if (fin_time - t_prev > t_max)
    34bc:	458b      	cmp	fp, r1
    34be:	eb75 0402 	sbcs.w	r4, r5, r2
    34c2:	da04      	bge.n	34ce <thread_obscount_code+0xc2>
            t_max = fin_time - t_prev;
    34c4:	468b      	mov	fp, r1
    34c6:	4615      	mov	r5, r2
    34c8:	e001      	b.n	34ce <thread_obscount_code+0xc2>
            t_min = fin_time - t_prev;
    34ca:	468a      	mov	sl, r1
    34cc:	4691      	mov	r9, r2
        t_prev = fin_time;
    34ce:	4698      	mov	r8, r3
    34d0:	4607      	mov	r7, r0
	return z_impl_k_sem_take(sem, timeout);
    34d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    34d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    34da:	4811      	ldr	r0, [pc, #68]	; (3520 <thread_obscount_code+0x114>)
    34dc:	f007 fd8e 	bl	affc <z_impl_k_sem_take>
    34e0:	f04f 0320 	mov.w	r3, #32
    34e4:	f3ef 8211 	mrs	r2, BASEPRI
    34e8:	f383 8812 	msr	BASEPRI_MAX, r3
    34ec:	f3bf 8f6f 	isb	sy
        key3 = irq_lock();
    34f0:	4b0c      	ldr	r3, [pc, #48]	; (3524 <thread_obscount_code+0x118>)
    34f2:	601a      	str	r2, [r3, #0]
        uint8_t *cab_img = (uint8_t *)get_mes(image_cab);
    34f4:	4e0c      	ldr	r6, [pc, #48]	; (3528 <thread_obscount_code+0x11c>)
    34f6:	6830      	ldr	r0, [r6, #0]
    34f8:	f00b fc72 	bl	ede0 <get_mes>
    34fc:	9001      	str	r0, [sp, #4]
        uint8_t **image = castImage(cab_img);
    34fe:	f00b fc0c 	bl	ed1a <castImage>
    3502:	4604      	mov	r4, r0
        unget((void *)cab_img, image_cab);
    3504:	6831      	ldr	r1, [r6, #0]
    3506:	9801      	ldr	r0, [sp, #4]
    3508:	f00b fc93 	bl	ee32 <unget>
        nobs = 0;
    350c:	2600      	movs	r6, #0
        for (j = 0; j < IMGWIDTH; j++)
    350e:	4630      	mov	r0, r6
    3510:	e79e      	b.n	3450 <thread_obscount_code+0x44>
    3512:	bf00      	nop
    3514:	000114ac 	.word	0x000114ac
    3518:	2000d71c 	.word	0x2000d71c
    351c:	2000c98c 	.word	0x2000c98c
    3520:	2000c96c 	.word	0x2000c96c
    3524:	20004940 	.word	0x20004940
    3528:	20004934 	.word	0x20004934

0000352c <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    352c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3530:	b08d      	sub	sp, #52	; 0x34
    3532:	9205      	str	r2, [sp, #20]
    3534:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    3536:	4613      	mov	r3, r2
    3538:	f002 0204 	and.w	r2, r2, #4
    353c:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    353e:	f3c3 02c2 	ubfx	r2, r3, #3, #3

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    3542:	f010 0303 	ands.w	r3, r0, #3
    3546:	9302      	str	r3, [sp, #8]
    3548:	f040 8293 	bne.w	3a72 <cbvprintf_package+0x546>
    354c:	4607      	mov	r7, r0
    354e:	468a      	mov	sl, r1
    3550:	3201      	adds	r2, #1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    3552:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    3554:	2800      	cmp	r0, #0
    3556:	d041      	beq.n	35dc <cbvprintf_package+0xb0>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    3558:	b127      	cbz	r7, 3564 <cbvprintf_package+0x38>
    355a:	1be3      	subs	r3, r4, r7
    355c:	3304      	adds	r3, #4
    355e:	4553      	cmp	r3, sl
    3560:	f200 828a 	bhi.w	3a78 <cbvprintf_package+0x54c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
    3564:	9b03      	ldr	r3, [sp, #12]
    3566:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    3568:	f8dd b008 	ldr.w	fp, [sp, #8]
    356c:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    3570:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
    3574:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
    3576:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
    357a:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    357c:	b10f      	cbz	r7, 3582 <cbvprintf_package+0x56>
				*(const char **)buf = s;
    357e:	9b03      	ldr	r3, [sp, #12]
    3580:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    3582:	1e53      	subs	r3, r2, #1
    3584:	9307      	str	r3, [sp, #28]
    3586:	2a00      	cmp	r2, #0
    3588:	f340 80b7 	ble.w	36fa <cbvprintf_package+0x1ce>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
    358c:	9b05      	ldr	r3, [sp, #20]
    358e:	f013 0202 	ands.w	r2, r3, #2
    3592:	d021      	beq.n	35d8 <cbvprintf_package+0xac>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    3594:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    3596:	1be1      	subs	r1, r4, r7
    3598:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    359a:	b11a      	cbz	r2, 35a4 <cbvprintf_package+0x78>
    359c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    35a0:	f080 80bf 	bcs.w	3722 <cbvprintf_package+0x1f6>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    35a4:	f1bb 0f0f 	cmp.w	fp, #15
    35a8:	f200 80ce 	bhi.w	3748 <cbvprintf_package+0x21c>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
    35ac:	2f00      	cmp	r7, #0
    35ae:	f000 80e2 	beq.w	3776 <cbvprintf_package+0x24a>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
    35b2:	b2db      	uxtb	r3, r3
    35b4:	aa0c      	add	r2, sp, #48	; 0x30
    35b6:	445a      	add	r2, fp
    35b8:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
    35bc:	2800      	cmp	r0, #0
    35be:	f000 80d6 	beq.w	376e <cbvprintf_package+0x242>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    35c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    35c6:	aa0c      	add	r2, sp, #48	; 0x30
    35c8:	445a      	add	r2, fp
    35ca:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
    35ce:	9b04      	ldr	r3, [sp, #16]
    35d0:	3301      	adds	r3, #1
    35d2:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
    35d4:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
    35d8:	3404      	adds	r4, #4
    35da:	e0f6      	b.n	37ca <cbvprintf_package+0x29e>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    35dc:	f001 0a07 	and.w	sl, r1, #7
    35e0:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    35e2:	f1ca 0a08 	rsb	sl, sl, #8
    35e6:	e7b7      	b.n	3558 <cbvprintf_package+0x2c>
			if (*fmt == '%') {
    35e8:	2b25      	cmp	r3, #37	; 0x25
    35ea:	f040 80ed 	bne.w	37c8 <cbvprintf_package+0x29c>
				parsing = true;
    35ee:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
    35f0:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
    35f4:	46c1      	mov	r9, r8
			continue;
    35f6:	e0e7      	b.n	37c8 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(intmax_t);
    35f8:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
    35fc:	46c1      	mov	r9, r8
			continue;
    35fe:	e0e3      	b.n	37c8 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(size_t);
    3600:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
    3604:	46c1      	mov	r9, r8
			continue;
    3606:	e0df      	b.n	37c8 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(ptrdiff_t);
    3608:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
    360c:	46c1      	mov	r9, r8
			continue;
    360e:	e0db      	b.n	37c8 <cbvprintf_package+0x29c>
			if (fmt[-1] == 'l') {
    3610:	782a      	ldrb	r2, [r5, #0]
    3612:	2a6c      	cmp	r2, #108	; 0x6c
    3614:	d026      	beq.n	3664 <cbvprintf_package+0x138>
			parsing = false;
    3616:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
    3618:	eb04 0208 	add.w	r2, r4, r8
    361c:	3a01      	subs	r2, #1
    361e:	f1c8 0100 	rsb	r1, r8, #0
    3622:	400a      	ands	r2, r1
    3624:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    3626:	b127      	cbz	r7, 3632 <cbvprintf_package+0x106>
    3628:	1bd1      	subs	r1, r2, r7
    362a:	4449      	add	r1, r9
    362c:	458a      	cmp	sl, r1
    362e:	f0c0 8226 	bcc.w	3a7e <cbvprintf_package+0x552>
		if (*fmt == 's') {
    3632:	2b73      	cmp	r3, #115	; 0x73
    3634:	d059      	beq.n	36ea <cbvprintf_package+0x1be>
		} else if (size == sizeof(int)) {
    3636:	f1b9 0f04 	cmp.w	r9, #4
    363a:	f000 80a8 	beq.w	378e <cbvprintf_package+0x262>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
    363e:	f1b9 0f08 	cmp.w	r9, #8
    3642:	f040 80ac 	bne.w	379e <cbvprintf_package+0x272>
			long long v = va_arg(ap, long long);
    3646:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3648:	3307      	adds	r3, #7
    364a:	f023 0307 	bic.w	r3, r3, #7
    364e:	f103 0108 	add.w	r1, r3, #8
    3652:	9116      	str	r1, [sp, #88]	; 0x58
    3654:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
    3658:	b10f      	cbz	r7, 365e <cbvprintf_package+0x132>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
    365a:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
    365e:	f102 0408 	add.w	r4, r2, #8
    3662:	e0b1      	b.n	37c8 <cbvprintf_package+0x29c>
				if (fmt[-2] == 'l') {
    3664:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
    3668:	2a6c      	cmp	r2, #108	; 0x6c
    366a:	d004      	beq.n	3676 <cbvprintf_package+0x14a>
			parsing = false;
    366c:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
    366e:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
    3672:	46c1      	mov	r9, r8
    3674:	e7d0      	b.n	3618 <cbvprintf_package+0xec>
			parsing = false;
    3676:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
    3678:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
    367c:	46c1      	mov	r9, r8
    367e:	e7cb      	b.n	3618 <cbvprintf_package+0xec>
			if (fmt[-1] == 'L') {
    3680:	782b      	ldrb	r3, [r5, #0]
    3682:	2b4c      	cmp	r3, #76	; 0x4c
    3684:	d01c      	beq.n	36c0 <cbvprintf_package+0x194>
				v.d = va_arg(ap, double);
    3686:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3688:	3307      	adds	r3, #7
    368a:	f023 0307 	bic.w	r3, r3, #7
    368e:	f103 0208 	add.w	r2, r3, #8
    3692:	9216      	str	r2, [sp, #88]	; 0x58
    3694:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
    3698:	1de2      	adds	r2, r4, #7
    369a:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
    369e:	b147      	cbz	r7, 36b2 <cbvprintf_package+0x186>
				if (BUF_OFFSET + size > len) {
    36a0:	1bd3      	subs	r3, r2, r7
    36a2:	3308      	adds	r3, #8
    36a4:	4553      	cmp	r3, sl
    36a6:	d815      	bhi.n	36d4 <cbvprintf_package+0x1a8>
				} else if (fmt[-1] == 'L') {
    36a8:	782b      	ldrb	r3, [r5, #0]
    36aa:	2b4c      	cmp	r3, #76	; 0x4c
    36ac:	d015      	beq.n	36da <cbvprintf_package+0x1ae>
					*(double *)buf = v.d;
    36ae:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
    36b2:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
    36b6:	2600      	movs	r6, #0
			continue;
    36b8:	f04f 0808 	mov.w	r8, #8
    36bc:	46c1      	mov	r9, r8
    36be:	e083      	b.n	37c8 <cbvprintf_package+0x29c>
				v.ld = va_arg(ap, long double);
    36c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    36c2:	3307      	adds	r3, #7
    36c4:	f023 0307 	bic.w	r3, r3, #7
    36c8:	f103 0208 	add.w	r2, r3, #8
    36cc:	9216      	str	r2, [sp, #88]	; 0x58
    36ce:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
    36d2:	e7e1      	b.n	3698 <cbvprintf_package+0x16c>
					return -ENOSPC;
    36d4:	f06f 001b 	mvn.w	r0, #27
    36d8:	e1c8      	b.n	3a6c <cbvprintf_package+0x540>
					*(long double *)buf = v.ld;
    36da:	e9c2 0100 	strd	r0, r1, [r2]
    36de:	e7e8      	b.n	36b2 <cbvprintf_package+0x186>
			parsing = false;
    36e0:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
    36e2:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
    36e6:	46c1      	mov	r9, r8
    36e8:	e796      	b.n	3618 <cbvprintf_package+0xec>
			s = va_arg(ap, char *);
    36ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
    36ec:	1d1a      	adds	r2, r3, #4
    36ee:	9216      	str	r2, [sp, #88]	; 0x58
    36f0:	681b      	ldr	r3, [r3, #0]
    36f2:	9303      	str	r3, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    36f4:	9a07      	ldr	r2, [sp, #28]
	while (*++fmt != '\0') {
    36f6:	4665      	mov	r5, ip
    36f8:	e740      	b.n	357c <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    36fa:	4bbb      	ldr	r3, [pc, #748]	; (39e8 <cbvprintf_package+0x4bc>)
    36fc:	9a03      	ldr	r2, [sp, #12]
    36fe:	429a      	cmp	r2, r3
    3700:	d304      	bcc.n	370c <cbvprintf_package+0x1e0>
    3702:	4bba      	ldr	r3, [pc, #744]	; (39ec <cbvprintf_package+0x4c0>)
    3704:	429a      	cmp	r2, r3
    3706:	d30a      	bcc.n	371e <cbvprintf_package+0x1f2>
    3708:	2300      	movs	r3, #0
    370a:	e000      	b.n	370e <cbvprintf_package+0x1e2>
    370c:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    370e:	2b00      	cmp	r3, #0
    3710:	f47f af3c 	bne.w	358c <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    3714:	9b05      	ldr	r3, [sp, #20]
    3716:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    371a:	2000      	movs	r0, #0
    371c:	e73b      	b.n	3596 <cbvprintf_package+0x6a>
    371e:	2301      	movs	r3, #1
    3720:	e7f5      	b.n	370e <cbvprintf_package+0x1e2>
					__ASSERT(false, "String with too many arguments");
    3722:	4cb3      	ldr	r4, [pc, #716]	; (39f0 <cbvprintf_package+0x4c4>)
    3724:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    3728:	4622      	mov	r2, r4
    372a:	49b2      	ldr	r1, [pc, #712]	; (39f4 <cbvprintf_package+0x4c8>)
    372c:	48b2      	ldr	r0, [pc, #712]	; (39f8 <cbvprintf_package+0x4cc>)
    372e:	f00b fcf9 	bl	f124 <assert_print>
    3732:	48b2      	ldr	r0, [pc, #712]	; (39fc <cbvprintf_package+0x4d0>)
    3734:	f00b fcf6 	bl	f124 <assert_print>
    3738:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    373c:	4620      	mov	r0, r4
    373e:	f00b fcea 	bl	f116 <assert_post_action>
					return -EINVAL;
    3742:	f06f 0015 	mvn.w	r0, #21
    3746:	e191      	b.n	3a6c <cbvprintf_package+0x540>
					__ASSERT(false, "str_ptr_pos[] too small");
    3748:	4ca9      	ldr	r4, [pc, #676]	; (39f0 <cbvprintf_package+0x4c4>)
    374a:	f240 13f5 	movw	r3, #501	; 0x1f5
    374e:	4622      	mov	r2, r4
    3750:	49a8      	ldr	r1, [pc, #672]	; (39f4 <cbvprintf_package+0x4c8>)
    3752:	48a9      	ldr	r0, [pc, #676]	; (39f8 <cbvprintf_package+0x4cc>)
    3754:	f00b fce6 	bl	f124 <assert_print>
    3758:	48a9      	ldr	r0, [pc, #676]	; (3a00 <cbvprintf_package+0x4d4>)
    375a:	f00b fce3 	bl	f124 <assert_print>
    375e:	f240 11f5 	movw	r1, #501	; 0x1f5
    3762:	4620      	mov	r0, r4
    3764:	f00b fcd7 	bl	f116 <assert_post_action>
					return -EINVAL;
    3768:	f06f 0015 	mvn.w	r0, #21
    376c:	e17e      	b.n	3a6c <cbvprintf_package+0x540>
						s_rw_cnt++;
    376e:	9b06      	ldr	r3, [sp, #24]
    3770:	3301      	adds	r3, #1
    3772:	9306      	str	r3, [sp, #24]
    3774:	e72e      	b.n	35d4 <cbvprintf_package+0xa8>
				} else if (is_ro || rws_pos_en) {
    3776:	b908      	cbnz	r0, 377c <cbvprintf_package+0x250>
    3778:	9b01      	ldr	r3, [sp, #4]
    377a:	b113      	cbz	r3, 3782 <cbvprintf_package+0x256>
					len += 1;
    377c:	f10a 0a01 	add.w	sl, sl, #1
    3780:	e728      	b.n	35d4 <cbvprintf_package+0xa8>
					len += strlen(s) + 1 + 1;
    3782:	9803      	ldr	r0, [sp, #12]
    3784:	f7fd fb67 	bl	e56 <strlen>
    3788:	1c83      	adds	r3, r0, #2
    378a:	449a      	add	sl, r3
    378c:	e722      	b.n	35d4 <cbvprintf_package+0xa8>
			int v = va_arg(ap, int);
    378e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3790:	1d19      	adds	r1, r3, #4
    3792:	9116      	str	r1, [sp, #88]	; 0x58
    3794:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
    3796:	b107      	cbz	r7, 379a <cbvprintf_package+0x26e>
				*(int *)buf = v;
    3798:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
    379a:	1d14      	adds	r4, r2, #4
    379c:	e014      	b.n	37c8 <cbvprintf_package+0x29c>
		} else {
			__ASSERT(false, "unexpected size %u", size);
    379e:	4c94      	ldr	r4, [pc, #592]	; (39f0 <cbvprintf_package+0x4c4>)
    37a0:	f240 2331 	movw	r3, #561	; 0x231
    37a4:	4622      	mov	r2, r4
    37a6:	4993      	ldr	r1, [pc, #588]	; (39f4 <cbvprintf_package+0x4c8>)
    37a8:	4893      	ldr	r0, [pc, #588]	; (39f8 <cbvprintf_package+0x4cc>)
    37aa:	f00b fcbb 	bl	f124 <assert_print>
    37ae:	4649      	mov	r1, r9
    37b0:	4894      	ldr	r0, [pc, #592]	; (3a04 <cbvprintf_package+0x4d8>)
    37b2:	f00b fcb7 	bl	f124 <assert_print>
    37b6:	f240 2131 	movw	r1, #561	; 0x231
    37ba:	4620      	mov	r0, r4
    37bc:	f00b fcab 	bl	f116 <assert_post_action>
			return -EINVAL;
    37c0:	f06f 0015 	mvn.w	r0, #21
    37c4:	e152      	b.n	3a6c <cbvprintf_package+0x540>
		switch (*fmt) {
    37c6:	2600      	movs	r6, #0
    37c8:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
    37ca:	f105 0c01 	add.w	ip, r5, #1
    37ce:	786b      	ldrb	r3, [r5, #1]
    37d0:	2b00      	cmp	r3, #0
    37d2:	f000 80c1 	beq.w	3958 <cbvprintf_package+0x42c>
		if (!parsing) {
    37d6:	2e00      	cmp	r6, #0
    37d8:	f43f af06 	beq.w	35e8 <cbvprintf_package+0xbc>
		switch (*fmt) {
    37dc:	f1a3 0120 	sub.w	r1, r3, #32
    37e0:	295a      	cmp	r1, #90	; 0x5a
    37e2:	d8f0      	bhi.n	37c6 <cbvprintf_package+0x29a>
    37e4:	a201      	add	r2, pc, #4	; (adr r2, 37ec <cbvprintf_package+0x2c0>)
    37e6:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
    37ea:	bf00      	nop
    37ec:	000037c9 	.word	0x000037c9
    37f0:	000037c7 	.word	0x000037c7
    37f4:	000037c7 	.word	0x000037c7
    37f8:	000037c9 	.word	0x000037c9
    37fc:	000037c7 	.word	0x000037c7
    3800:	000037c7 	.word	0x000037c7
    3804:	000037c7 	.word	0x000037c7
    3808:	000037c7 	.word	0x000037c7
    380c:	000037c7 	.word	0x000037c7
    3810:	000037c7 	.word	0x000037c7
    3814:	00003619 	.word	0x00003619
    3818:	000037c9 	.word	0x000037c9
    381c:	000037c7 	.word	0x000037c7
    3820:	000037c9 	.word	0x000037c9
    3824:	000037c9 	.word	0x000037c9
    3828:	000037c7 	.word	0x000037c7
    382c:	000037c9 	.word	0x000037c9
    3830:	000037c9 	.word	0x000037c9
    3834:	000037c9 	.word	0x000037c9
    3838:	000037c9 	.word	0x000037c9
    383c:	000037c9 	.word	0x000037c9
    3840:	000037c9 	.word	0x000037c9
    3844:	000037c9 	.word	0x000037c9
    3848:	000037c9 	.word	0x000037c9
    384c:	000037c9 	.word	0x000037c9
    3850:	000037c9 	.word	0x000037c9
    3854:	000037c7 	.word	0x000037c7
    3858:	000037c7 	.word	0x000037c7
    385c:	000037c7 	.word	0x000037c7
    3860:	000037c7 	.word	0x000037c7
    3864:	000037c7 	.word	0x000037c7
    3868:	000037c7 	.word	0x000037c7
    386c:	000037c7 	.word	0x000037c7
    3870:	00003681 	.word	0x00003681
    3874:	000037c7 	.word	0x000037c7
    3878:	000037c7 	.word	0x000037c7
    387c:	000037c7 	.word	0x000037c7
    3880:	00003681 	.word	0x00003681
    3884:	00003681 	.word	0x00003681
    3888:	00003681 	.word	0x00003681
    388c:	000037c7 	.word	0x000037c7
    3890:	000037c7 	.word	0x000037c7
    3894:	000037c7 	.word	0x000037c7
    3898:	000037c7 	.word	0x000037c7
    389c:	000037c9 	.word	0x000037c9
    38a0:	000037c7 	.word	0x000037c7
    38a4:	000037c7 	.word	0x000037c7
    38a8:	000037c7 	.word	0x000037c7
    38ac:	000037c7 	.word	0x000037c7
    38b0:	000037c7 	.word	0x000037c7
    38b4:	000037c7 	.word	0x000037c7
    38b8:	000037c7 	.word	0x000037c7
    38bc:	000037c7 	.word	0x000037c7
    38c0:	000037c7 	.word	0x000037c7
    38c4:	000037c7 	.word	0x000037c7
    38c8:	000037c7 	.word	0x000037c7
    38cc:	00003611 	.word	0x00003611
    38d0:	000037c7 	.word	0x000037c7
    38d4:	000037c7 	.word	0x000037c7
    38d8:	000037c7 	.word	0x000037c7
    38dc:	000037c7 	.word	0x000037c7
    38e0:	000037c7 	.word	0x000037c7
    38e4:	000037c7 	.word	0x000037c7
    38e8:	000037c7 	.word	0x000037c7
    38ec:	000037c7 	.word	0x000037c7
    38f0:	00003681 	.word	0x00003681
    38f4:	000037c7 	.word	0x000037c7
    38f8:	00003611 	.word	0x00003611
    38fc:	00003611 	.word	0x00003611
    3900:	00003681 	.word	0x00003681
    3904:	00003681 	.word	0x00003681
    3908:	00003681 	.word	0x00003681
    390c:	000037c9 	.word	0x000037c9
    3910:	00003611 	.word	0x00003611
    3914:	000035f9 	.word	0x000035f9
    3918:	000037c7 	.word	0x000037c7
    391c:	000037c9 	.word	0x000037c9
    3920:	000037c7 	.word	0x000037c7
    3924:	000036e1 	.word	0x000036e1
    3928:	00003611 	.word	0x00003611
    392c:	000036e1 	.word	0x000036e1
    3930:	000037c7 	.word	0x000037c7
    3934:	000037c7 	.word	0x000037c7
    3938:	000036e1 	.word	0x000036e1
    393c:	00003609 	.word	0x00003609
    3940:	00003611 	.word	0x00003611
    3944:	000037c7 	.word	0x000037c7
    3948:	000037c7 	.word	0x000037c7
    394c:	00003611 	.word	0x00003611
    3950:	000037c7 	.word	0x000037c7
    3954:	00003601 	.word	0x00003601
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
    3958:	1be3      	subs	r3, r4, r7
    395a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    395e:	d211      	bcs.n	3984 <cbvprintf_package+0x458>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
    3960:	b31f      	cbz	r7, 39aa <cbvprintf_package+0x47e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
    3962:	2200      	movs	r2, #0
    3964:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	buf0[0] = BUF_OFFSET / sizeof(int);
    3966:	089b      	lsrs	r3, r3, #2
    3968:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
    396a:	9b01      	ldr	r3, [sp, #4]
    396c:	b30b      	cbz	r3, 39b2 <cbvprintf_package+0x486>
		/* Strings are appended, update location counter. */
		buf0[1] = 0;
		buf0[3] = s_rw_cnt;
    396e:	9b06      	ldr	r3, [sp, #24]
    3970:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		buf0[1] = s_rw_cnt;
		buf0[3] = 0;
	}

	buf0[2] = s_ro_cnt;
    3972:	9b04      	ldr	r3, [sp, #16]
    3974:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
    3976:	bbab      	cbnz	r3, 39e4 <cbvprintf_package+0x4b8>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
    3978:	9d02      	ldr	r5, [sp, #8]
    397a:	f8dd 9010 	ldr.w	r9, [sp, #16]
    397e:	f8dd 800c 	ldr.w	r8, [sp, #12]
    3982:	e058      	b.n	3a36 <cbvprintf_package+0x50a>
		__ASSERT(false, "too many format args");
    3984:	4c1a      	ldr	r4, [pc, #104]	; (39f0 <cbvprintf_package+0x4c4>)
    3986:	f240 233d 	movw	r3, #573	; 0x23d
    398a:	4622      	mov	r2, r4
    398c:	4919      	ldr	r1, [pc, #100]	; (39f4 <cbvprintf_package+0x4c8>)
    398e:	481a      	ldr	r0, [pc, #104]	; (39f8 <cbvprintf_package+0x4cc>)
    3990:	f00b fbc8 	bl	f124 <assert_print>
    3994:	481c      	ldr	r0, [pc, #112]	; (3a08 <cbvprintf_package+0x4dc>)
    3996:	f00b fbc5 	bl	f124 <assert_print>
    399a:	f240 213d 	movw	r1, #573	; 0x23d
    399e:	4620      	mov	r0, r4
    39a0:	f00b fbb9 	bl	f116 <assert_post_action>
		return -EINVAL;
    39a4:	f06f 0015 	mvn.w	r0, #21
    39a8:	e060      	b.n	3a6c <cbvprintf_package+0x540>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    39aa:	4453      	add	r3, sl
    39ac:	f1a3 0008 	sub.w	r0, r3, #8
    39b0:	e05c      	b.n	3a6c <cbvprintf_package+0x540>
		buf0[1] = s_rw_cnt;
    39b2:	9b06      	ldr	r3, [sp, #24]
    39b4:	707b      	strb	r3, [r7, #1]
		buf0[3] = 0;
    39b6:	e7dc      	b.n	3972 <cbvprintf_package+0x446>
			*buf++ = pos;
    39b8:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    39bc:	3301      	adds	r3, #1
    39be:	459b      	cmp	fp, r3
    39c0:	d9da      	bls.n	3978 <cbvprintf_package+0x44c>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    39c2:	aa0c      	add	r2, sp, #48	; 0x30
    39c4:	441a      	add	r2, r3
    39c6:	f812 1c10 	ldrb.w	r1, [r2, #-16]
    39ca:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
    39ce:	2a00      	cmp	r2, #0
    39d0:	daf4      	bge.n	39bc <cbvprintf_package+0x490>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    39d2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    39d6:	1be2      	subs	r2, r4, r7
    39d8:	3201      	adds	r2, #1
    39da:	4592      	cmp	sl, r2
    39dc:	d2ec      	bcs.n	39b8 <cbvprintf_package+0x48c>
				return -ENOSPC;
    39de:	f06f 001b 	mvn.w	r0, #27
    39e2:	e043      	b.n	3a6c <cbvprintf_package+0x540>
		for (i = 0; i < s_idx; i++) {
    39e4:	9b02      	ldr	r3, [sp, #8]
    39e6:	e7ea      	b.n	39be <cbvprintf_package+0x492>
    39e8:	00010c70 	.word	0x00010c70
    39ec:	00013570 	.word	0x00013570
    39f0:	000114cc 	.word	0x000114cc
    39f4:	00011bd0 	.word	0x00011bd0
    39f8:	00011514 	.word	0x00011514
    39fc:	00011534 	.word	0x00011534
    3a00:	00011558 	.word	0x00011558
    3a04:	00011574 	.word	0x00011574
    3a08:	0001158c 	.word	0x0001158c
		if (rws_pos_en) {
    3a0c:	9b01      	ldr	r3, [sp, #4]
    3a0e:	b1f3      	cbz	r3, 3a4e <cbvprintf_package+0x522>
			size = 0;
    3a10:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
    3a12:	1be3      	subs	r3, r4, r7
    3a14:	4433      	add	r3, r6
    3a16:	3301      	adds	r3, #1
    3a18:	459a      	cmp	sl, r3
    3a1a:	d333      	bcc.n	3a84 <cbvprintf_package+0x558>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
    3a1c:	ab0c      	add	r3, sp, #48	; 0x30
    3a1e:	442b      	add	r3, r5
    3a20:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    3a24:	f804 3b01 	strb.w	r3, [r4], #1
    3a28:	4632      	mov	r2, r6
    3a2a:	4641      	mov	r1, r8
    3a2c:	4620      	mov	r0, r4
    3a2e:	f00c fe04 	bl	1063a <memcpy>
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
    3a32:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
    3a34:	3501      	adds	r5, #1
    3a36:	45ab      	cmp	fp, r5
    3a38:	d917      	bls.n	3a6a <cbvprintf_package+0x53e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    3a3a:	f1b9 0f00 	cmp.w	r9, #0
    3a3e:	d0e5      	beq.n	3a0c <cbvprintf_package+0x4e0>
    3a40:	ab0c      	add	r3, sp, #48	; 0x30
    3a42:	442b      	add	r3, r5
    3a44:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
    3a48:	2b00      	cmp	r3, #0
    3a4a:	dadf      	bge.n	3a0c <cbvprintf_package+0x4e0>
    3a4c:	e7f2      	b.n	3a34 <cbvprintf_package+0x508>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    3a4e:	ab0c      	add	r3, sp, #48	; 0x30
    3a50:	442b      	add	r3, r5
    3a52:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    3a56:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    3a5a:	2200      	movs	r2, #0
    3a5c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
    3a60:	4640      	mov	r0, r8
    3a62:	f7fd f9f8 	bl	e56 <strlen>
    3a66:	1c46      	adds	r6, r0, #1
    3a68:	e7d3      	b.n	3a12 <cbvprintf_package+0x4e6>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
    3a6a:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    3a6c:	b00d      	add	sp, #52	; 0x34
    3a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
    3a72:	f06f 000d 	mvn.w	r0, #13
    3a76:	e7f9      	b.n	3a6c <cbvprintf_package+0x540>
		return -ENOSPC;
    3a78:	f06f 001b 	mvn.w	r0, #27
    3a7c:	e7f6      	b.n	3a6c <cbvprintf_package+0x540>
			return -ENOSPC;
    3a7e:	f06f 001b 	mvn.w	r0, #27
    3a82:	e7f3      	b.n	3a6c <cbvprintf_package+0x540>
			return -ENOSPC;
    3a84:	f06f 001b 	mvn.w	r0, #27
    3a88:	e7f0      	b.n	3a6c <cbvprintf_package+0x540>
    3a8a:	bf00      	nop

00003a8c <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    3a8c:	b538      	push	{r3, r4, r5, lr}
    3a8e:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3a90:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    3a92:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    3a96:	6081      	str	r1, [r0, #8]
	switch (method) {
    3a98:	2b02      	cmp	r3, #2
    3a9a:	d903      	bls.n	3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
    3a9c:	2b03      	cmp	r3, #3
    3a9e:	d102      	bne.n	3aa6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    3aa0:	6800      	ldr	r0, [r0, #0]
		break;
    3aa2:	e00e      	b.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
	switch (method) {
    3aa4:	b963      	cbnz	r3, 3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
    3aa6:	4d08      	ldr	r5, [pc, #32]	; (3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>)
    3aa8:	2345      	movs	r3, #69	; 0x45
    3aaa:	462a      	mov	r2, r5
    3aac:	4907      	ldr	r1, [pc, #28]	; (3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>)
    3aae:	4808      	ldr	r0, [pc, #32]	; (3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>)
    3ab0:	f00b fb38 	bl	f124 <assert_print>
    3ab4:	2145      	movs	r1, #69	; 0x45
    3ab6:	4628      	mov	r0, r5
    3ab8:	f00b fb2d 	bl	f116 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    3abc:	2000      	movs	r0, #0
    3abe:	e000      	b.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
	switch (method) {
    3ac0:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    3ac2:	2300      	movs	r3, #0
    3ac4:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    3ac6:	bd38      	pop	{r3, r4, r5, pc}
    3ac8:	000115a4 	.word	0x000115a4
    3acc:	00011bd0 	.word	0x00011bd0
    3ad0:	00011514 	.word	0x00011514

00003ad4 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    3ad4:	4b01      	ldr	r3, [pc, #4]	; (3adc <__printk_hook_install+0x8>)
    3ad6:	6018      	str	r0, [r3, #0]
}
    3ad8:	4770      	bx	lr
    3ada:	bf00      	nop
    3adc:	20004014 	.word	0x20004014

00003ae0 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
    3ae0:	b538      	push	{r3, r4, r5, lr}
    3ae2:	4604      	mov	r4, r0
    3ae4:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3ae6:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
    3ae8:	2a00      	cmp	r2, #0
    3aea:	db14      	blt.n	3b16 <process_complete+0x36>
    3aec:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
    3af0:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    3af2:	2a01      	cmp	r2, #1
    3af4:	d91b      	bls.n	3b2e <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
    3af6:	2b04      	cmp	r3, #4
    3af8:	d050      	beq.n	3b9c <process_complete+0xbc>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
    3afa:	4c2f      	ldr	r4, [pc, #188]	; (3bb8 <process_complete+0xd8>)
    3afc:	f240 131b 	movw	r3, #283	; 0x11b
    3b00:	4622      	mov	r2, r4
    3b02:	492e      	ldr	r1, [pc, #184]	; (3bbc <process_complete+0xdc>)
    3b04:	482e      	ldr	r0, [pc, #184]	; (3bc0 <process_complete+0xe0>)
    3b06:	f00b fb0d 	bl	f124 <assert_print>
    3b0a:	f240 111b 	movw	r1, #283	; 0x11b
    3b0e:	4620      	mov	r0, r4
    3b10:	f00b fb01 	bl	f116 <assert_post_action>
	}
}
    3b14:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    3b16:	e9d0 0100 	ldrd	r0, r1, [r0]
    3b1a:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    3b1e:	2300      	movs	r3, #0
    3b20:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    3b22:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    3b24:	2101      	movs	r1, #1
    3b26:	4620      	mov	r0, r4
    3b28:	f00b fa01 	bl	ef2e <set_state>
    3b2c:	e7f2      	b.n	3b14 <process_complete+0x34>
		*clients = mgr->clients;
    3b2e:	e9d0 0100 	ldrd	r0, r1, [r0]
    3b32:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    3b36:	2200      	movs	r2, #0
    3b38:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    3b3a:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    3b3c:	2b06      	cmp	r3, #6
    3b3e:	d00f      	beq.n	3b60 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    3b40:	2b05      	cmp	r3, #5
    3b42:	d11d      	bne.n	3b80 <process_complete+0xa0>
			set_state(mgr, ONOFF_STATE_OFF);
    3b44:	2100      	movs	r1, #0
    3b46:	4620      	mov	r0, r4
    3b48:	f00b f9f1 	bl	ef2e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    3b4c:	4620      	mov	r0, r4
    3b4e:	f00b fa15 	bl	ef7c <process_recheck>
    3b52:	2800      	cmp	r0, #0
    3b54:	d0de      	beq.n	3b14 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3b56:	8ba3      	ldrh	r3, [r4, #28]
    3b58:	f043 0320 	orr.w	r3, r3, #32
    3b5c:	83a3      	strh	r3, [r4, #28]
    3b5e:	e7d9      	b.n	3b14 <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    3b60:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3b64:	b13b      	cbz	r3, 3b76 <process_complete+0x96>
				mgr->refs += 1U;
    3b66:	8be2      	ldrh	r2, [r4, #30]
    3b68:	3201      	adds	r2, #1
    3b6a:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	d0f9      	beq.n	3b64 <process_complete+0x84>
	return node->next;
    3b70:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3b72:	2b00      	cmp	r3, #0
    3b74:	d1f6      	bne.n	3b64 <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
    3b76:	2102      	movs	r1, #2
    3b78:	4620      	mov	r0, r4
    3b7a:	f00b f9d8 	bl	ef2e <set_state>
    3b7e:	e7e5      	b.n	3b4c <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    3b80:	4d0d      	ldr	r5, [pc, #52]	; (3bb8 <process_complete+0xd8>)
    3b82:	f240 1309 	movw	r3, #265	; 0x109
    3b86:	462a      	mov	r2, r5
    3b88:	490e      	ldr	r1, [pc, #56]	; (3bc4 <process_complete+0xe4>)
    3b8a:	480d      	ldr	r0, [pc, #52]	; (3bc0 <process_complete+0xe0>)
    3b8c:	f00b faca 	bl	f124 <assert_print>
    3b90:	f240 1109 	movw	r1, #265	; 0x109
    3b94:	4628      	mov	r0, r5
    3b96:	f00b fabe 	bl	f116 <assert_post_action>
    3b9a:	e7d3      	b.n	3b44 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    3b9c:	2100      	movs	r1, #0
    3b9e:	f00b f9c6 	bl	ef2e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    3ba2:	4620      	mov	r0, r4
    3ba4:	f00b f9ea 	bl	ef7c <process_recheck>
    3ba8:	2800      	cmp	r0, #0
    3baa:	d0b3      	beq.n	3b14 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3bac:	8ba3      	ldrh	r3, [r4, #28]
    3bae:	f043 0320 	orr.w	r3, r3, #32
    3bb2:	83a3      	strh	r3, [r4, #28]
    3bb4:	e7ae      	b.n	3b14 <process_complete+0x34>
    3bb6:	bf00      	nop
    3bb8:	000115c8 	.word	0x000115c8
    3bbc:	00011bd0 	.word	0x00011bd0
    3bc0:	00011514 	.word	0x00011514
    3bc4:	000115ec 	.word	0x000115ec

00003bc8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    3bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bcc:	b083      	sub	sp, #12
    3bce:	4604      	mov	r4, r0
    3bd0:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3bd2:	8b83      	ldrh	r3, [r0, #28]
    3bd4:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
    3bd8:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
    3bdc:	460d      	mov	r5, r1
    3bde:	b131      	cbz	r1, 3bee <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    3be0:	f1b8 0f00 	cmp.w	r8, #0
    3be4:	d112      	bne.n	3c0c <process_event+0x44>
	list->head = NULL;
    3be6:	2300      	movs	r3, #0
    3be8:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    3bea:	9301      	str	r3, [sp, #4]
}
    3bec:	e0aa      	b.n	3d44 <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
    3bee:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 3ed0 <process_event+0x308>
    3bf2:	f240 1333 	movw	r3, #307	; 0x133
    3bf6:	464a      	mov	r2, r9
    3bf8:	49b6      	ldr	r1, [pc, #728]	; (3ed4 <process_event+0x30c>)
    3bfa:	48b7      	ldr	r0, [pc, #732]	; (3ed8 <process_event+0x310>)
    3bfc:	f00b fa92 	bl	f124 <assert_print>
    3c00:	f240 1133 	movw	r1, #307	; 0x133
    3c04:	4648      	mov	r0, r9
    3c06:	f00b fa86 	bl	f116 <assert_post_action>
    3c0a:	e7e9      	b.n	3be0 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
    3c0c:	2d01      	cmp	r5, #1
    3c0e:	d013      	beq.n	3c38 <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    3c10:	2d02      	cmp	r5, #2
    3c12:	d116      	bne.n	3c42 <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
    3c14:	8ba3      	ldrh	r3, [r4, #28]
    3c16:	f043 0320 	orr.w	r3, r3, #32
    3c1a:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    3c1c:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3c1e:	4620      	mov	r0, r4
    3c20:	f006 fd84 	bl	a72c <z_spin_unlock_valid>
    3c24:	2800      	cmp	r0, #0
    3c26:	f000 819c 	beq.w	3f62 <process_event+0x39a>
	__asm__ volatile(
    3c2a:	f386 8811 	msr	BASEPRI, r6
    3c2e:	f3bf 8f6f 	isb	sy
}
    3c32:	b003      	add	sp, #12
    3c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    3c38:	8ba3      	ldrh	r3, [r4, #28]
    3c3a:	f043 0310 	orr.w	r3, r3, #16
    3c3e:	83a3      	strh	r3, [r4, #28]
    3c40:	e7ec      	b.n	3c1c <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    3c42:	4da3      	ldr	r5, [pc, #652]	; (3ed0 <process_event+0x308>)
    3c44:	f44f 739e 	mov.w	r3, #316	; 0x13c
    3c48:	462a      	mov	r2, r5
    3c4a:	49a4      	ldr	r1, [pc, #656]	; (3edc <process_event+0x314>)
    3c4c:	48a2      	ldr	r0, [pc, #648]	; (3ed8 <process_event+0x310>)
    3c4e:	f00b fa69 	bl	f124 <assert_print>
    3c52:	f44f 719e 	mov.w	r1, #316	; 0x13c
    3c56:	4628      	mov	r0, r5
    3c58:	f00b fa5d 	bl	f116 <assert_post_action>
    3c5c:	e7da      	b.n	3c14 <process_event+0x4c>
			evt = process_recheck(mgr);
    3c5e:	4620      	mov	r0, r4
    3c60:	f00b f98c 	bl	ef7c <process_recheck>
    3c64:	4605      	mov	r5, r0
    3c66:	e06f      	b.n	3d48 <process_event+0x180>
			res = mgr->last_res;
    3c68:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    3c6c:	464a      	mov	r2, r9
    3c6e:	4669      	mov	r1, sp
    3c70:	4620      	mov	r0, r4
    3c72:	f7ff ff35 	bl	3ae0 <process_complete>
		onoff_transition_fn transit = NULL;
    3c76:	2500      	movs	r5, #0
    3c78:	e011      	b.n	3c9e <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    3c7a:	2f00      	cmp	r7, #0
    3c7c:	f040 8081 	bne.w	3d82 <process_event+0x1ba>
	return list->head;
    3c80:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    3c82:	2b00      	cmp	r3, #0
    3c84:	f000 808b 	beq.w	3d9e <process_event+0x1d6>
			transit = mgr->transitions->start;
    3c88:	6923      	ldr	r3, [r4, #16]
    3c8a:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    3c8c:	2d00      	cmp	r5, #0
    3c8e:	f000 8094 	beq.w	3dba <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
    3c92:	2106      	movs	r1, #6
    3c94:	4620      	mov	r0, r4
    3c96:	f00b f94a 	bl	ef2e <set_state>
		res = 0;
    3c9a:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3c9e:	8ba3      	ldrh	r3, [r4, #28]
    3ca0:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    3ca4:	45b8      	cmp	r8, r7
    3ca6:	f000 810b 	beq.w	3ec0 <process_event+0x2f8>
    3caa:	68a2      	ldr	r2, [r4, #8]
    3cac:	2a00      	cmp	r2, #0
    3cae:	f000 8109 	beq.w	3ec4 <process_event+0x2fc>
    3cb2:	2201      	movs	r2, #1
		if (do_monitors
    3cb4:	4617      	mov	r7, r2
    3cb6:	b91a      	cbnz	r2, 3cc0 <process_event+0xf8>
    3cb8:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    3cba:	2a00      	cmp	r2, #0
    3cbc:	f000 8104 	beq.w	3ec8 <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    3cc0:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    3cc4:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    3cc6:	f104 0a14 	add.w	sl, r4, #20
    3cca:	4650      	mov	r0, sl
    3ccc:	f006 fd2e 	bl	a72c <z_spin_unlock_valid>
    3cd0:	2800      	cmp	r0, #0
    3cd2:	f000 8115 	beq.w	3f00 <process_event+0x338>
    3cd6:	f386 8811 	msr	BASEPRI, r6
    3cda:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    3cde:	2f00      	cmp	r7, #0
    3ce0:	f040 811f 	bne.w	3f22 <process_event+0x35a>
    3ce4:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    3ce6:	b12b      	cbz	r3, 3cf4 <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
    3ce8:	464b      	mov	r3, r9
    3cea:	4642      	mov	r2, r8
    3cec:	4669      	mov	r1, sp
    3cee:	4620      	mov	r0, r4
    3cf0:	f00b f986 	bl	f000 <notify_all>
			if (transit != NULL) {
    3cf4:	b115      	cbz	r5, 3cfc <process_event+0x134>
				transit(mgr, transition_complete);
    3cf6:	497a      	ldr	r1, [pc, #488]	; (3ee0 <process_event+0x318>)
    3cf8:	4620      	mov	r0, r4
    3cfa:	47a8      	blx	r5
	__asm__ volatile(
    3cfc:	f04f 0320 	mov.w	r3, #32
    3d00:	f3ef 8611 	mrs	r6, BASEPRI
    3d04:	f383 8812 	msr	BASEPRI_MAX, r3
    3d08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3d0c:	4650      	mov	r0, sl
    3d0e:	f006 fcfd 	bl	a70c <z_spin_lock_valid>
    3d12:	2800      	cmp	r0, #0
    3d14:	f000 810b 	beq.w	3f2e <process_event+0x366>
	z_spin_lock_set_owner(l);
    3d18:	4650      	mov	r0, sl
    3d1a:	f006 fd17 	bl	a74c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    3d1e:	8ba3      	ldrh	r3, [r4, #28]
    3d20:	f023 0308 	bic.w	r3, r3, #8
    3d24:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    3d26:	8ba3      	ldrh	r3, [r4, #28]
    3d28:	f013 0f10 	tst.w	r3, #16
    3d2c:	f000 810f 	beq.w	3f4e <process_event+0x386>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    3d30:	f023 0310 	bic.w	r3, r3, #16
    3d34:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    3d36:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    3d38:	8ba7      	ldrh	r7, [r4, #28]
    3d3a:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
    3d3e:	2d00      	cmp	r5, #0
    3d40:	f43f af6c 	beq.w	3c1c <process_event+0x54>
		if (evt == EVT_RECHECK) {
    3d44:	2d02      	cmp	r5, #2
    3d46:	d08a      	beq.n	3c5e <process_event+0x96>
		if (evt == EVT_NOP) {
    3d48:	2d00      	cmp	r5, #0
    3d4a:	f43f af67 	beq.w	3c1c <process_event+0x54>
		if (evt == EVT_COMPLETE) {
    3d4e:	2d01      	cmp	r5, #1
    3d50:	d08a      	beq.n	3c68 <process_event+0xa0>
		} else if (evt == EVT_START) {
    3d52:	2d03      	cmp	r5, #3
    3d54:	d091      	beq.n	3c7a <process_event+0xb2>
		} else if (evt == EVT_STOP) {
    3d56:	2d04      	cmp	r5, #4
    3d58:	d03e      	beq.n	3dd8 <process_event+0x210>
		} else if (evt == EVT_RESET) {
    3d5a:	2d05      	cmp	r5, #5
    3d5c:	f040 80a0 	bne.w	3ea0 <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    3d60:	2f01      	cmp	r7, #1
    3d62:	d172      	bne.n	3e4a <process_event+0x282>
    3d64:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    3d66:	2b00      	cmp	r3, #0
    3d68:	d07d      	beq.n	3e66 <process_event+0x29e>
			transit = mgr->transitions->reset;
    3d6a:	6923      	ldr	r3, [r4, #16]
    3d6c:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    3d6e:	2d00      	cmp	r5, #0
    3d70:	f000 8087 	beq.w	3e82 <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
    3d74:	2105      	movs	r1, #5
    3d76:	4620      	mov	r0, r4
    3d78:	f00b f8d9 	bl	ef2e <set_state>
		res = 0;
    3d7c:	f04f 0900 	mov.w	r9, #0
    3d80:	e78d      	b.n	3c9e <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    3d82:	4d53      	ldr	r5, [pc, #332]	; (3ed0 <process_event+0x308>)
    3d84:	f44f 73ab 	mov.w	r3, #342	; 0x156
    3d88:	462a      	mov	r2, r5
    3d8a:	4956      	ldr	r1, [pc, #344]	; (3ee4 <process_event+0x31c>)
    3d8c:	4852      	ldr	r0, [pc, #328]	; (3ed8 <process_event+0x310>)
    3d8e:	f00b f9c9 	bl	f124 <assert_print>
    3d92:	f44f 71ab 	mov.w	r1, #342	; 0x156
    3d96:	4628      	mov	r0, r5
    3d98:	f00b f9bd 	bl	f116 <assert_post_action>
    3d9c:	e770      	b.n	3c80 <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    3d9e:	4d4c      	ldr	r5, [pc, #304]	; (3ed0 <process_event+0x308>)
    3da0:	f240 1357 	movw	r3, #343	; 0x157
    3da4:	462a      	mov	r2, r5
    3da6:	4950      	ldr	r1, [pc, #320]	; (3ee8 <process_event+0x320>)
    3da8:	484b      	ldr	r0, [pc, #300]	; (3ed8 <process_event+0x310>)
    3daa:	f00b f9bb 	bl	f124 <assert_print>
    3dae:	f240 1157 	movw	r1, #343	; 0x157
    3db2:	4628      	mov	r0, r5
    3db4:	f00b f9af 	bl	f116 <assert_post_action>
    3db8:	e766      	b.n	3c88 <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
    3dba:	f8df 8114 	ldr.w	r8, [pc, #276]	; 3ed0 <process_event+0x308>
    3dbe:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    3dc2:	4642      	mov	r2, r8
    3dc4:	4949      	ldr	r1, [pc, #292]	; (3eec <process_event+0x324>)
    3dc6:	4844      	ldr	r0, [pc, #272]	; (3ed8 <process_event+0x310>)
    3dc8:	f00b f9ac 	bl	f124 <assert_print>
    3dcc:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    3dd0:	4640      	mov	r0, r8
    3dd2:	f00b f9a0 	bl	f116 <assert_post_action>
    3dd6:	e75c      	b.n	3c92 <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    3dd8:	2f02      	cmp	r7, #2
    3dda:	d10b      	bne.n	3df4 <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
    3ddc:	8be3      	ldrh	r3, [r4, #30]
    3dde:	b9bb      	cbnz	r3, 3e10 <process_event+0x248>
			transit = mgr->transitions->stop;
    3de0:	6923      	ldr	r3, [r4, #16]
    3de2:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    3de4:	b315      	cbz	r5, 3e2c <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
    3de6:	2104      	movs	r1, #4
    3de8:	4620      	mov	r0, r4
    3dea:	f00b f8a0 	bl	ef2e <set_state>
		res = 0;
    3dee:	f04f 0900 	mov.w	r9, #0
    3df2:	e754      	b.n	3c9e <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    3df4:	4d36      	ldr	r5, [pc, #216]	; (3ed0 <process_event+0x308>)
    3df6:	f240 135d 	movw	r3, #349	; 0x15d
    3dfa:	462a      	mov	r2, r5
    3dfc:	493c      	ldr	r1, [pc, #240]	; (3ef0 <process_event+0x328>)
    3dfe:	4836      	ldr	r0, [pc, #216]	; (3ed8 <process_event+0x310>)
    3e00:	f00b f990 	bl	f124 <assert_print>
    3e04:	f240 115d 	movw	r1, #349	; 0x15d
    3e08:	4628      	mov	r0, r5
    3e0a:	f00b f984 	bl	f116 <assert_post_action>
    3e0e:	e7e5      	b.n	3ddc <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
    3e10:	4d2f      	ldr	r5, [pc, #188]	; (3ed0 <process_event+0x308>)
    3e12:	f44f 73af 	mov.w	r3, #350	; 0x15e
    3e16:	462a      	mov	r2, r5
    3e18:	4936      	ldr	r1, [pc, #216]	; (3ef4 <process_event+0x32c>)
    3e1a:	482f      	ldr	r0, [pc, #188]	; (3ed8 <process_event+0x310>)
    3e1c:	f00b f982 	bl	f124 <assert_print>
    3e20:	f44f 71af 	mov.w	r1, #350	; 0x15e
    3e24:	4628      	mov	r0, r5
    3e26:	f00b f976 	bl	f116 <assert_post_action>
    3e2a:	e7d9      	b.n	3de0 <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
    3e2c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 3ed0 <process_event+0x308>
    3e30:	f240 1361 	movw	r3, #353	; 0x161
    3e34:	4642      	mov	r2, r8
    3e36:	492d      	ldr	r1, [pc, #180]	; (3eec <process_event+0x324>)
    3e38:	4827      	ldr	r0, [pc, #156]	; (3ed8 <process_event+0x310>)
    3e3a:	f00b f973 	bl	f124 <assert_print>
    3e3e:	f240 1161 	movw	r1, #353	; 0x161
    3e42:	4640      	mov	r0, r8
    3e44:	f00b f967 	bl	f116 <assert_post_action>
    3e48:	e7cd      	b.n	3de6 <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    3e4a:	4d21      	ldr	r5, [pc, #132]	; (3ed0 <process_event+0x308>)
    3e4c:	f44f 73b2 	mov.w	r3, #356	; 0x164
    3e50:	462a      	mov	r2, r5
    3e52:	4929      	ldr	r1, [pc, #164]	; (3ef8 <process_event+0x330>)
    3e54:	4820      	ldr	r0, [pc, #128]	; (3ed8 <process_event+0x310>)
    3e56:	f00b f965 	bl	f124 <assert_print>
    3e5a:	f44f 71b2 	mov.w	r1, #356	; 0x164
    3e5e:	4628      	mov	r0, r5
    3e60:	f00b f959 	bl	f116 <assert_post_action>
    3e64:	e77e      	b.n	3d64 <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    3e66:	4d1a      	ldr	r5, [pc, #104]	; (3ed0 <process_event+0x308>)
    3e68:	f240 1365 	movw	r3, #357	; 0x165
    3e6c:	462a      	mov	r2, r5
    3e6e:	491e      	ldr	r1, [pc, #120]	; (3ee8 <process_event+0x320>)
    3e70:	4819      	ldr	r0, [pc, #100]	; (3ed8 <process_event+0x310>)
    3e72:	f00b f957 	bl	f124 <assert_print>
    3e76:	f240 1165 	movw	r1, #357	; 0x165
    3e7a:	4628      	mov	r0, r5
    3e7c:	f00b f94b 	bl	f116 <assert_post_action>
    3e80:	e773      	b.n	3d6a <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
    3e82:	f8df 804c 	ldr.w	r8, [pc, #76]	; 3ed0 <process_event+0x308>
    3e86:	f44f 73b4 	mov.w	r3, #360	; 0x168
    3e8a:	4642      	mov	r2, r8
    3e8c:	4917      	ldr	r1, [pc, #92]	; (3eec <process_event+0x324>)
    3e8e:	4812      	ldr	r0, [pc, #72]	; (3ed8 <process_event+0x310>)
    3e90:	f00b f948 	bl	f124 <assert_print>
    3e94:	f44f 71b4 	mov.w	r1, #360	; 0x168
    3e98:	4640      	mov	r0, r8
    3e9a:	f00b f93c 	bl	f116 <assert_post_action>
    3e9e:	e769      	b.n	3d74 <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
    3ea0:	4d0b      	ldr	r5, [pc, #44]	; (3ed0 <process_event+0x308>)
    3ea2:	f240 136b 	movw	r3, #363	; 0x16b
    3ea6:	462a      	mov	r2, r5
    3ea8:	4914      	ldr	r1, [pc, #80]	; (3efc <process_event+0x334>)
    3eaa:	480b      	ldr	r0, [pc, #44]	; (3ed8 <process_event+0x310>)
    3eac:	f00b f93a 	bl	f124 <assert_print>
    3eb0:	f240 116b 	movw	r1, #363	; 0x16b
    3eb4:	4628      	mov	r0, r5
    3eb6:	f00b f92e 	bl	f116 <assert_post_action>
		onoff_transition_fn transit = NULL;
    3eba:	2500      	movs	r5, #0
		res = 0;
    3ebc:	46a9      	mov	r9, r5
    3ebe:	e6ee      	b.n	3c9e <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
    3ec0:	2200      	movs	r2, #0
    3ec2:	e6f7      	b.n	3cb4 <process_event+0xec>
    3ec4:	2200      	movs	r2, #0
    3ec6:	e6f5      	b.n	3cb4 <process_event+0xec>
		    || (transit != NULL)) {
    3ec8:	2d00      	cmp	r5, #0
    3eca:	f47f aef9 	bne.w	3cc0 <process_event+0xf8>
    3ece:	e72a      	b.n	3d26 <process_event+0x15e>
    3ed0:	000115c8 	.word	0x000115c8
    3ed4:	00011614 	.word	0x00011614
    3ed8:	00011514 	.word	0x00011514
    3edc:	00011624 	.word	0x00011624
    3ee0:	00003f9d 	.word	0x00003f9d
    3ee4:	00011638 	.word	0x00011638
    3ee8:	00011644 	.word	0x00011644
    3eec:	00011668 	.word	0x00011668
    3ef0:	00011680 	.word	0x00011680
    3ef4:	00011698 	.word	0x00011698
    3ef8:	000116a8 	.word	0x000116a8
    3efc:	00011bd0 	.word	0x00011bd0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3f00:	f8df b080 	ldr.w	fp, [pc, #128]	; 3f84 <process_event+0x3bc>
    3f04:	23b9      	movs	r3, #185	; 0xb9
    3f06:	465a      	mov	r2, fp
    3f08:	491f      	ldr	r1, [pc, #124]	; (3f88 <process_event+0x3c0>)
    3f0a:	4820      	ldr	r0, [pc, #128]	; (3f8c <process_event+0x3c4>)
    3f0c:	f00b f90a 	bl	f124 <assert_print>
    3f10:	4651      	mov	r1, sl
    3f12:	481f      	ldr	r0, [pc, #124]	; (3f90 <process_event+0x3c8>)
    3f14:	f00b f906 	bl	f124 <assert_print>
    3f18:	21b9      	movs	r1, #185	; 0xb9
    3f1a:	4658      	mov	r0, fp
    3f1c:	f00b f8fb 	bl	f116 <assert_post_action>
    3f20:	e6d9      	b.n	3cd6 <process_event+0x10e>
				notify_monitors(mgr, state, res);
    3f22:	464a      	mov	r2, r9
    3f24:	4641      	mov	r1, r8
    3f26:	4620      	mov	r0, r4
    3f28:	f00b f809 	bl	ef3e <notify_monitors>
    3f2c:	e6da      	b.n	3ce4 <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3f2e:	4d15      	ldr	r5, [pc, #84]	; (3f84 <process_event+0x3bc>)
    3f30:	238e      	movs	r3, #142	; 0x8e
    3f32:	462a      	mov	r2, r5
    3f34:	4917      	ldr	r1, [pc, #92]	; (3f94 <process_event+0x3cc>)
    3f36:	4815      	ldr	r0, [pc, #84]	; (3f8c <process_event+0x3c4>)
    3f38:	f00b f8f4 	bl	f124 <assert_print>
    3f3c:	4651      	mov	r1, sl
    3f3e:	4816      	ldr	r0, [pc, #88]	; (3f98 <process_event+0x3d0>)
    3f40:	f00b f8f0 	bl	f124 <assert_print>
    3f44:	218e      	movs	r1, #142	; 0x8e
    3f46:	4628      	mov	r0, r5
    3f48:	f00b f8e5 	bl	f116 <assert_post_action>
    3f4c:	e6e4      	b.n	3d18 <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    3f4e:	f013 0f20 	tst.w	r3, #32
    3f52:	d004      	beq.n	3f5e <process_event+0x396>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    3f54:	f023 0320 	bic.w	r3, r3, #32
    3f58:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    3f5a:	2502      	movs	r5, #2
    3f5c:	e6ec      	b.n	3d38 <process_event+0x170>
		evt = EVT_NOP;
    3f5e:	2500      	movs	r5, #0
    3f60:	e6ea      	b.n	3d38 <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3f62:	4d08      	ldr	r5, [pc, #32]	; (3f84 <process_event+0x3bc>)
    3f64:	23b9      	movs	r3, #185	; 0xb9
    3f66:	462a      	mov	r2, r5
    3f68:	4907      	ldr	r1, [pc, #28]	; (3f88 <process_event+0x3c0>)
    3f6a:	4808      	ldr	r0, [pc, #32]	; (3f8c <process_event+0x3c4>)
    3f6c:	f00b f8da 	bl	f124 <assert_print>
    3f70:	4621      	mov	r1, r4
    3f72:	4807      	ldr	r0, [pc, #28]	; (3f90 <process_event+0x3c8>)
    3f74:	f00b f8d6 	bl	f124 <assert_print>
    3f78:	21b9      	movs	r1, #185	; 0xb9
    3f7a:	4628      	mov	r0, r5
    3f7c:	f00b f8cb 	bl	f116 <assert_post_action>
    3f80:	e653      	b.n	3c2a <process_event+0x62>
    3f82:	bf00      	nop
    3f84:	000116c0 	.word	0x000116c0
    3f88:	000116f0 	.word	0x000116f0
    3f8c:	00011514 	.word	0x00011514
    3f90:	00011708 	.word	0x00011708
    3f94:	00011720 	.word	0x00011720
    3f98:	00011738 	.word	0x00011738

00003f9c <transition_complete>:
{
    3f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fa0:	4604      	mov	r4, r0
    3fa2:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    3fa4:	f100 0614 	add.w	r6, r0, #20
    3fa8:	f04f 0320 	mov.w	r3, #32
    3fac:	f3ef 8711 	mrs	r7, BASEPRI
    3fb0:	f383 8812 	msr	BASEPRI_MAX, r3
    3fb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3fb8:	4630      	mov	r0, r6
    3fba:	f006 fba7 	bl	a70c <z_spin_lock_valid>
    3fbe:	b150      	cbz	r0, 3fd6 <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    3fc0:	4630      	mov	r0, r6
    3fc2:	f006 fbc3 	bl	a74c <z_spin_lock_set_owner>
	mgr->last_res = res;
    3fc6:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    3fc8:	463a      	mov	r2, r7
    3fca:	2101      	movs	r1, #1
    3fcc:	4620      	mov	r0, r4
    3fce:	f7ff fdfb 	bl	3bc8 <process_event>
}
    3fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3fd6:	f8df 8020 	ldr.w	r8, [pc, #32]	; 3ff8 <transition_complete+0x5c>
    3fda:	238e      	movs	r3, #142	; 0x8e
    3fdc:	4642      	mov	r2, r8
    3fde:	4907      	ldr	r1, [pc, #28]	; (3ffc <transition_complete+0x60>)
    3fe0:	4807      	ldr	r0, [pc, #28]	; (4000 <transition_complete+0x64>)
    3fe2:	f00b f89f 	bl	f124 <assert_print>
    3fe6:	4631      	mov	r1, r6
    3fe8:	4806      	ldr	r0, [pc, #24]	; (4004 <transition_complete+0x68>)
    3fea:	f00b f89b 	bl	f124 <assert_print>
    3fee:	218e      	movs	r1, #142	; 0x8e
    3ff0:	4640      	mov	r0, r8
    3ff2:	f00b f890 	bl	f116 <assert_post_action>
    3ff6:	e7e3      	b.n	3fc0 <transition_complete+0x24>
    3ff8:	000116c0 	.word	0x000116c0
    3ffc:	00011720 	.word	0x00011720
    4000:	00011514 	.word	0x00011514
    4004:	00011738 	.word	0x00011738

00004008 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    400c:	4604      	mov	r4, r0
    400e:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4010:	f00a ffcd 	bl	efae <validate_args>

	if (rv < 0) {
    4014:	1e06      	subs	r6, r0, #0
    4016:	db58      	blt.n	40ca <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    4018:	f104 0714 	add.w	r7, r4, #20
    401c:	f04f 0320 	mov.w	r3, #32
    4020:	f3ef 8911 	mrs	r9, BASEPRI
    4024:	f383 8812 	msr	BASEPRI_MAX, r3
    4028:	f3bf 8f6f 	isb	sy
    402c:	4638      	mov	r0, r7
    402e:	f006 fb6d 	bl	a70c <z_spin_lock_valid>
    4032:	b1e8      	cbz	r0, 4070 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    4034:	4638      	mov	r0, r7
    4036:	f006 fb89 	bl	a74c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    403a:	8ba5      	ldrh	r5, [r4, #28]
    403c:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4040:	8be3      	ldrh	r3, [r4, #30]
    4042:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4046:	4293      	cmp	r3, r2
    4048:	d056      	beq.n	40f8 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    404a:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    404c:	2d02      	cmp	r5, #2
    404e:	d01f      	beq.n	4090 <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    4050:	b32d      	cbz	r5, 409e <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
    4052:	2d04      	cmp	r5, #4
    4054:	d023      	beq.n	409e <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
    4056:	2d06      	cmp	r5, #6
    4058:	d021      	beq.n	409e <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    405a:	2d05      	cmp	r5, #5
    405c:	d053      	beq.n	4106 <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    405e:	2d01      	cmp	r5, #1
    4060:	d136      	bne.n	40d0 <onoff_request+0xc8>
		rv = -EIO;
    4062:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    4066:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    406a:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    406c:	4652      	mov	r2, sl
    406e:	e01c      	b.n	40aa <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4070:	4d3c      	ldr	r5, [pc, #240]	; (4164 <onoff_request+0x15c>)
    4072:	238e      	movs	r3, #142	; 0x8e
    4074:	462a      	mov	r2, r5
    4076:	493c      	ldr	r1, [pc, #240]	; (4168 <onoff_request+0x160>)
    4078:	483c      	ldr	r0, [pc, #240]	; (416c <onoff_request+0x164>)
    407a:	f00b f853 	bl	f124 <assert_print>
    407e:	4639      	mov	r1, r7
    4080:	483b      	ldr	r0, [pc, #236]	; (4170 <onoff_request+0x168>)
    4082:	f00b f84f 	bl	f124 <assert_print>
    4086:	218e      	movs	r1, #142	; 0x8e
    4088:	4628      	mov	r0, r5
    408a:	f00b f844 	bl	f116 <assert_post_action>
    408e:	e7d1      	b.n	4034 <onoff_request+0x2c>
		mgr->refs += 1U;
    4090:	3301      	adds	r3, #1
    4092:	83e3      	strh	r3, [r4, #30]
		notify = true;
    4094:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    4098:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    409a:	461a      	mov	r2, r3
    409c:	e005      	b.n	40aa <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
    409e:	fab5 f385 	clz	r3, r5
    40a2:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    40a4:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    40a8:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    40aa:	b142      	cbz	r2, 40be <onoff_request+0xb6>
	parent->next = child;
    40ac:	2200      	movs	r2, #0
    40ae:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    40b2:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    40b4:	b372      	cbz	r2, 4114 <onoff_request+0x10c>
	parent->next = child;
    40b6:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    40ba:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    40be:	b373      	cbz	r3, 411e <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
    40c0:	464a      	mov	r2, r9
    40c2:	2102      	movs	r1, #2
    40c4:	4620      	mov	r0, r4
    40c6:	f7ff fd7f 	bl	3bc8 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    40ca:	4630      	mov	r0, r6
    40cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    40d0:	4e28      	ldr	r6, [pc, #160]	; (4174 <onoff_request+0x16c>)
    40d2:	f240 13c9 	movw	r3, #457	; 0x1c9
    40d6:	4632      	mov	r2, r6
    40d8:	4927      	ldr	r1, [pc, #156]	; (4178 <onoff_request+0x170>)
    40da:	4824      	ldr	r0, [pc, #144]	; (416c <onoff_request+0x164>)
    40dc:	f00b f822 	bl	f124 <assert_print>
    40e0:	f240 11c9 	movw	r1, #457	; 0x1c9
    40e4:	4630      	mov	r0, r6
    40e6:	f00b f816 	bl	f116 <assert_post_action>
		rv = -EIO;
    40ea:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    40ee:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    40f2:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    40f4:	4652      	mov	r2, sl
    40f6:	e7d8      	b.n	40aa <onoff_request+0xa2>
		rv = -EAGAIN;
    40f8:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    40fc:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    4100:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    4102:	4652      	mov	r2, sl
    4104:	e7d1      	b.n	40aa <onoff_request+0xa2>
		rv = -ENOTSUP;
    4106:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    410a:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    410e:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    4110:	4652      	mov	r2, sl
    4112:	e7ca      	b.n	40aa <onoff_request+0xa2>
    4114:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    4118:	f8c4 8000 	str.w	r8, [r4]
}
    411c:	e7cf      	b.n	40be <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    411e:	4638      	mov	r0, r7
    4120:	f006 fb04 	bl	a72c <z_spin_unlock_valid>
    4124:	b168      	cbz	r0, 4142 <onoff_request+0x13a>
	__asm__ volatile(
    4126:	f389 8811 	msr	BASEPRI, r9
    412a:	f3bf 8f6f 	isb	sy
		if (notify) {
    412e:	f1ba 0f00 	cmp.w	sl, #0
    4132:	d0ca      	beq.n	40ca <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
    4134:	2300      	movs	r3, #0
    4136:	462a      	mov	r2, r5
    4138:	4641      	mov	r1, r8
    413a:	4620      	mov	r0, r4
    413c:	f00a ff4d 	bl	efda <notify_one>
    4140:	e7c3      	b.n	40ca <onoff_request+0xc2>
    4142:	f8df b020 	ldr.w	fp, [pc, #32]	; 4164 <onoff_request+0x15c>
    4146:	23b9      	movs	r3, #185	; 0xb9
    4148:	465a      	mov	r2, fp
    414a:	490c      	ldr	r1, [pc, #48]	; (417c <onoff_request+0x174>)
    414c:	4807      	ldr	r0, [pc, #28]	; (416c <onoff_request+0x164>)
    414e:	f00a ffe9 	bl	f124 <assert_print>
    4152:	4639      	mov	r1, r7
    4154:	480a      	ldr	r0, [pc, #40]	; (4180 <onoff_request+0x178>)
    4156:	f00a ffe5 	bl	f124 <assert_print>
    415a:	21b9      	movs	r1, #185	; 0xb9
    415c:	4658      	mov	r0, fp
    415e:	f00a ffda 	bl	f116 <assert_post_action>
    4162:	e7e0      	b.n	4126 <onoff_request+0x11e>
    4164:	000116c0 	.word	0x000116c0
    4168:	00011720 	.word	0x00011720
    416c:	00011514 	.word	0x00011514
    4170:	00011738 	.word	0x00011738
    4174:	000115c8 	.word	0x000115c8
    4178:	000116a8 	.word	0x000116a8
    417c:	000116f0 	.word	0x000116f0
    4180:	00011708 	.word	0x00011708

00004184 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    4184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4188:	4606      	mov	r6, r0
    418a:	460d      	mov	r5, r1
    418c:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    418e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    4192:	d222      	bcs.n	41da <__data_size+0x11>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    4194:	2c04      	cmp	r4, #4
    4196:	d931      	bls.n	41fc <__data_size+0x33>
	bytes -= heap_footer_bytes(bytes);
    4198:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    419a:	1dec      	adds	r4, r5, #7
    419c:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    41a0:	4415      	add	r5, r2
    41a2:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    41a6:	1b2d      	subs	r5, r5, r4
    41a8:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    41ac:	2d17      	cmp	r5, #23
    41ae:	d936      	bls.n	421e <__data_size+0x55>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    41b0:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
    41b2:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
    41b6:	2300      	movs	r3, #0
    41b8:	60e3      	str	r3, [r4, #12]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    41ba:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    41be:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    41c2:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
    41c6:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    41c8:	3607      	adds	r6, #7
    41ca:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    41ce:	f109 0301 	add.w	r3, r9, #1
    41d2:	4543      	cmp	r3, r8
    41d4:	d834      	bhi.n	4240 <__data_size+0x77>
{
    41d6:	2300      	movs	r3, #0
    41d8:	e049      	b.n	426e <__data_size+0xa5>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    41da:	4f38      	ldr	r7, [pc, #224]	; (42bc <__data_size+0xf3>)
    41dc:	f240 13e3 	movw	r3, #483	; 0x1e3
    41e0:	463a      	mov	r2, r7
    41e2:	4937      	ldr	r1, [pc, #220]	; (42c0 <__data_size+0xf7>)
    41e4:	4837      	ldr	r0, [pc, #220]	; (42c4 <__data_size+0xfb>)
    41e6:	f00a ff9d 	bl	f124 <assert_print>
    41ea:	4837      	ldr	r0, [pc, #220]	; (42c8 <__data_size+0xff>)
    41ec:	f00a ff9a 	bl	f124 <assert_print>
    41f0:	f240 11e3 	movw	r1, #483	; 0x1e3
    41f4:	4638      	mov	r0, r7
    41f6:	f00a ff8e 	bl	f116 <assert_post_action>
    41fa:	e7cb      	b.n	4194 <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    41fc:	4f2f      	ldr	r7, [pc, #188]	; (42bc <__data_size+0xf3>)
    41fe:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    4202:	463a      	mov	r2, r7
    4204:	4931      	ldr	r1, [pc, #196]	; (42cc <__data_size+0x103>)
    4206:	482f      	ldr	r0, [pc, #188]	; (42c4 <__data_size+0xfb>)
    4208:	f00a ff8c 	bl	f124 <assert_print>
    420c:	4830      	ldr	r0, [pc, #192]	; (42d0 <__data_size+0x107>)
    420e:	f00a ff89 	bl	f124 <assert_print>
    4212:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    4216:	4638      	mov	r0, r7
    4218:	f00a ff7d 	bl	f116 <assert_post_action>
    421c:	e7bc      	b.n	4198 <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    421e:	4f27      	ldr	r7, [pc, #156]	; (42bc <__data_size+0xf3>)
    4220:	f240 13f3 	movw	r3, #499	; 0x1f3
    4224:	463a      	mov	r2, r7
    4226:	492b      	ldr	r1, [pc, #172]	; (42d4 <__data_size+0x10b>)
    4228:	4826      	ldr	r0, [pc, #152]	; (42c4 <__data_size+0xfb>)
    422a:	f00a ff7b 	bl	f124 <assert_print>
    422e:	4828      	ldr	r0, [pc, #160]	; (42d0 <__data_size+0x107>)
    4230:	f00a ff78 	bl	f124 <assert_print>
    4234:	f240 11f3 	movw	r1, #499	; 0x1f3
    4238:	4638      	mov	r0, r7
    423a:	f00a ff6c 	bl	f116 <assert_post_action>
    423e:	e7b7      	b.n	41b0 <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    4240:	f8df a078 	ldr.w	sl, [pc, #120]	; 42bc <__data_size+0xf3>
    4244:	f44f 7301 	mov.w	r3, #516	; 0x204
    4248:	4652      	mov	r2, sl
    424a:	4923      	ldr	r1, [pc, #140]	; (42d8 <__data_size+0x10f>)
    424c:	481d      	ldr	r0, [pc, #116]	; (42c4 <__data_size+0xfb>)
    424e:	f00a ff69 	bl	f124 <assert_print>
    4252:	481f      	ldr	r0, [pc, #124]	; (42d0 <__data_size+0x107>)
    4254:	f00a ff66 	bl	f124 <assert_print>
    4258:	f44f 7101 	mov.w	r1, #516	; 0x204
    425c:	4650      	mov	r0, sl
    425e:	f00a ff5a 	bl	f116 <assert_post_action>
    4262:	e7b8      	b.n	41d6 <__data_size+0xd>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    4264:	1d1a      	adds	r2, r3, #4
    4266:	2100      	movs	r1, #0
    4268:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    426c:	3301      	adds	r3, #1
    426e:	42bb      	cmp	r3, r7
    4270:	dbf8      	blt.n	4264 <__data_size+0x9b>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    4272:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
    4276:	b29b      	uxth	r3, r3
    4278:	8063      	strh	r3, [r4, #2]
    427a:	2200      	movs	r2, #0
    427c:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    427e:	f043 0301 	orr.w	r3, r3, #1
    4282:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    4284:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    4288:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
    428c:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
    4290:	1cb3      	adds	r3, r6, #2
    4292:	52e1      	strh	r1, [r4, r3]
    4294:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
    4298:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
    429c:	1ca9      	adds	r1, r5, #2
    429e:	5262      	strh	r2, [r4, r1]
    42a0:	4425      	add	r5, r4
    42a2:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    42a6:	886b      	ldrh	r3, [r5, #2]
    42a8:	f043 0301 	orr.w	r3, r3, #1
    42ac:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    42ae:	4649      	mov	r1, r9
    42b0:	4620      	mov	r0, r4
    42b2:	f00a ff0a 	bl	f0ca <free_list_add>
}
    42b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42ba:	bf00      	nop
    42bc:	00011750 	.word	0x00011750
    42c0:	00011824 	.word	0x00011824
    42c4:	00011514 	.word	0x00011514
    42c8:	0001183c 	.word	0x0001183c
    42cc:	00011854 	.word	0x00011854
    42d0:	00011878 	.word	0x00011878
    42d4:	00011894 	.word	0x00011894
    42d8:	000118c0 	.word	0x000118c0

000042dc <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    42dc:	4684      	mov	ip, r0
	const char *sp = *str;
    42de:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    42e0:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    42e2:	e005      	b.n	42f0 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    42e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    42e8:	3201      	adds	r2, #1
    42ea:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    42ee:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    42f0:	7813      	ldrb	r3, [r2, #0]
    42f2:	4904      	ldr	r1, [pc, #16]	; (4304 <extract_decimal+0x28>)
    42f4:	5c59      	ldrb	r1, [r3, r1]
    42f6:	f011 0f04 	tst.w	r1, #4
    42fa:	d1f3      	bne.n	42e4 <extract_decimal+0x8>
	}
	*str = sp;
    42fc:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
    4300:	4770      	bx	lr
    4302:	bf00      	nop
    4304:	000132e9 	.word	0x000132e9

00004308 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    4308:	b570      	push	{r4, r5, r6, lr}
    430a:	b082      	sub	sp, #8
    430c:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    430e:	2300      	movs	r3, #0
    4310:	6003      	str	r3, [r0, #0]
    4312:	6043      	str	r3, [r0, #4]
    4314:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    4316:	784b      	ldrb	r3, [r1, #1]
    4318:	2b25      	cmp	r3, #37	; 0x25
    431a:	d002      	beq.n	4322 <extract_conversion+0x1a>
    431c:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    431e:	2501      	movs	r5, #1
    4320:	e01f      	b.n	4362 <extract_conversion+0x5a>
		conv->specifier = *sp++;
    4322:	1c88      	adds	r0, r1, #2
    4324:	70e3      	strb	r3, [r4, #3]
		return sp;
    4326:	e145      	b.n	45b4 <extract_conversion+0x2ac>
			conv->flag_dash = true;
    4328:	7823      	ldrb	r3, [r4, #0]
    432a:	f043 0304 	orr.w	r3, r3, #4
    432e:	7023      	strb	r3, [r4, #0]
		if (loop) {
    4330:	b1b5      	cbz	r5, 4360 <extract_conversion+0x58>
			++sp;
    4332:	3601      	adds	r6, #1
    4334:	e014      	b.n	4360 <extract_conversion+0x58>
			conv->flag_plus = true;
    4336:	7823      	ldrb	r3, [r4, #0]
    4338:	f043 0308 	orr.w	r3, r3, #8
    433c:	7023      	strb	r3, [r4, #0]
			break;
    433e:	e7f7      	b.n	4330 <extract_conversion+0x28>
			conv->flag_space = true;
    4340:	7823      	ldrb	r3, [r4, #0]
    4342:	f043 0310 	orr.w	r3, r3, #16
    4346:	7023      	strb	r3, [r4, #0]
			break;
    4348:	e7f2      	b.n	4330 <extract_conversion+0x28>
			conv->flag_hash = true;
    434a:	7823      	ldrb	r3, [r4, #0]
    434c:	f043 0320 	orr.w	r3, r3, #32
    4350:	7023      	strb	r3, [r4, #0]
			break;
    4352:	e7ed      	b.n	4330 <extract_conversion+0x28>
			conv->flag_zero = true;
    4354:	7823      	ldrb	r3, [r4, #0]
    4356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    435a:	7023      	strb	r3, [r4, #0]
			break;
    435c:	e7e8      	b.n	4330 <extract_conversion+0x28>
		switch (*sp) {
    435e:	2500      	movs	r5, #0
	} while (loop);
    4360:	b345      	cbz	r5, 43b4 <extract_conversion+0xac>
		switch (*sp) {
    4362:	7833      	ldrb	r3, [r6, #0]
    4364:	3b20      	subs	r3, #32
    4366:	2b10      	cmp	r3, #16
    4368:	d8f9      	bhi.n	435e <extract_conversion+0x56>
    436a:	a201      	add	r2, pc, #4	; (adr r2, 4370 <extract_conversion+0x68>)
    436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4370:	00004341 	.word	0x00004341
    4374:	0000435f 	.word	0x0000435f
    4378:	0000435f 	.word	0x0000435f
    437c:	0000434b 	.word	0x0000434b
    4380:	0000435f 	.word	0x0000435f
    4384:	0000435f 	.word	0x0000435f
    4388:	0000435f 	.word	0x0000435f
    438c:	0000435f 	.word	0x0000435f
    4390:	0000435f 	.word	0x0000435f
    4394:	0000435f 	.word	0x0000435f
    4398:	0000435f 	.word	0x0000435f
    439c:	00004337 	.word	0x00004337
    43a0:	0000435f 	.word	0x0000435f
    43a4:	00004329 	.word	0x00004329
    43a8:	0000435f 	.word	0x0000435f
    43ac:	0000435f 	.word	0x0000435f
    43b0:	00004355 	.word	0x00004355
	if (conv->flag_zero && conv->flag_dash) {
    43b4:	7823      	ldrb	r3, [r4, #0]
    43b6:	f003 0344 	and.w	r3, r3, #68	; 0x44
    43ba:	2b44      	cmp	r3, #68	; 0x44
    43bc:	d05f      	beq.n	447e <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    43be:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    43c0:	7823      	ldrb	r3, [r4, #0]
    43c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    43c6:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    43c8:	7833      	ldrb	r3, [r6, #0]
    43ca:	2b2a      	cmp	r3, #42	; 0x2a
    43cc:	d05c      	beq.n	4488 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    43ce:	a801      	add	r0, sp, #4
    43d0:	f7ff ff84 	bl	42dc <extract_decimal>
	if (sp != wp) {
    43d4:	9b01      	ldr	r3, [sp, #4]
    43d6:	429e      	cmp	r6, r3
    43d8:	d00f      	beq.n	43fa <extract_conversion+0xf2>
		conv->width_present = true;
    43da:	7823      	ldrb	r3, [r4, #0]
    43dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    43e0:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    43e2:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    43e4:	b2db      	uxtb	r3, r3
    43e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    43ea:	2800      	cmp	r0, #0
    43ec:	db54      	blt.n	4498 <extract_conversion+0x190>
    43ee:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    43f0:	4313      	orrs	r3, r2
    43f2:	7822      	ldrb	r2, [r4, #0]
    43f4:	f363 0241 	bfi	r2, r3, #1, #1
    43f8:	7022      	strb	r2, [r4, #0]
	return sp;
    43fa:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    43fc:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    43fe:	781b      	ldrb	r3, [r3, #0]
    4400:	2b2e      	cmp	r3, #46	; 0x2e
    4402:	bf14      	ite	ne
    4404:	2300      	movne	r3, #0
    4406:	2301      	moveq	r3, #1
    4408:	7862      	ldrb	r2, [r4, #1]
    440a:	f363 0241 	bfi	r2, r3, #1, #1
    440e:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    4410:	2b00      	cmp	r3, #0
    4412:	d043      	beq.n	449c <extract_conversion+0x194>
	++sp;
    4414:	9b01      	ldr	r3, [sp, #4]
    4416:	1c5a      	adds	r2, r3, #1
    4418:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    441a:	785b      	ldrb	r3, [r3, #1]
    441c:	2b2a      	cmp	r3, #42	; 0x2a
    441e:	d03f      	beq.n	44a0 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    4420:	a801      	add	r0, sp, #4
    4422:	f7ff ff5b 	bl	42dc <extract_decimal>
	conv->prec_value = prec;
    4426:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    4428:	7823      	ldrb	r3, [r4, #0]
    442a:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    442e:	2800      	cmp	r0, #0
    4430:	db3e      	blt.n	44b0 <extract_conversion+0x1a8>
    4432:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    4434:	4313      	orrs	r3, r2
    4436:	7822      	ldrb	r2, [r4, #0]
    4438:	f363 0241 	bfi	r2, r3, #1, #1
    443c:	7022      	strb	r2, [r4, #0]
	return sp;
    443e:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    4440:	7803      	ldrb	r3, [r0, #0]
    4442:	3b4c      	subs	r3, #76	; 0x4c
    4444:	2b2e      	cmp	r3, #46	; 0x2e
    4446:	f200 809d 	bhi.w	4584 <extract_conversion+0x27c>
    444a:	e8df f003 	tbb	[pc, r3]
    444e:	9b90      	.short	0x9b90
    4450:	9b9b9b9b 	.word	0x9b9b9b9b
    4454:	9b9b9b9b 	.word	0x9b9b9b9b
    4458:	9b9b9b9b 	.word	0x9b9b9b9b
    445c:	9b9b9b9b 	.word	0x9b9b9b9b
    4460:	9b9b9b9b 	.word	0x9b9b9b9b
    4464:	9b9b9b9b 	.word	0x9b9b9b9b
    4468:	9b339b9b 	.word	0x9b339b9b
    446c:	9b459b57 	.word	0x9b459b57
    4470:	9b9b9b9b 	.word	0x9b9b9b9b
    4474:	9b899b9b 	.word	0x9b899b9b
    4478:	9b9b9b9b 	.word	0x9b9b9b9b
    447c:	82          	.byte	0x82
    447d:	00          	.byte	0x00
		conv->flag_zero = false;
    447e:	7823      	ldrb	r3, [r4, #0]
    4480:	f36f 1386 	bfc	r3, #6, #1
    4484:	7023      	strb	r3, [r4, #0]
    4486:	e79a      	b.n	43be <extract_conversion+0xb6>
		conv->width_star = true;
    4488:	7863      	ldrb	r3, [r4, #1]
    448a:	f043 0301 	orr.w	r3, r3, #1
    448e:	7063      	strb	r3, [r4, #1]
		return ++sp;
    4490:	4633      	mov	r3, r6
    4492:	3301      	adds	r3, #1
    4494:	9301      	str	r3, [sp, #4]
    4496:	e7b1      	b.n	43fc <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    4498:	2201      	movs	r2, #1
    449a:	e7a9      	b.n	43f0 <extract_conversion+0xe8>
		return sp;
    449c:	9801      	ldr	r0, [sp, #4]
    449e:	e7cf      	b.n	4440 <extract_conversion+0x138>
		conv->prec_star = true;
    44a0:	7863      	ldrb	r3, [r4, #1]
    44a2:	f043 0304 	orr.w	r3, r3, #4
    44a6:	7063      	strb	r3, [r4, #1]
		return ++sp;
    44a8:	4610      	mov	r0, r2
    44aa:	3001      	adds	r0, #1
    44ac:	9001      	str	r0, [sp, #4]
    44ae:	e7c7      	b.n	4440 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    44b0:	2201      	movs	r2, #1
    44b2:	e7bf      	b.n	4434 <extract_conversion+0x12c>
		if (*++sp == 'h') {
    44b4:	1c42      	adds	r2, r0, #1
    44b6:	7843      	ldrb	r3, [r0, #1]
    44b8:	2b68      	cmp	r3, #104	; 0x68
    44ba:	d006      	beq.n	44ca <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    44bc:	7863      	ldrb	r3, [r4, #1]
    44be:	2102      	movs	r1, #2
    44c0:	f361 03c6 	bfi	r3, r1, #3, #4
    44c4:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    44c6:	4610      	mov	r0, r2
    44c8:	e01e      	b.n	4508 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    44ca:	7863      	ldrb	r3, [r4, #1]
    44cc:	2201      	movs	r2, #1
    44ce:	f362 03c6 	bfi	r3, r2, #3, #4
    44d2:	7063      	strb	r3, [r4, #1]
			++sp;
    44d4:	3002      	adds	r0, #2
    44d6:	e017      	b.n	4508 <extract_conversion+0x200>
		if (*++sp == 'l') {
    44d8:	1c42      	adds	r2, r0, #1
    44da:	7843      	ldrb	r3, [r0, #1]
    44dc:	2b6c      	cmp	r3, #108	; 0x6c
    44de:	d006      	beq.n	44ee <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    44e0:	7863      	ldrb	r3, [r4, #1]
    44e2:	2103      	movs	r1, #3
    44e4:	f361 03c6 	bfi	r3, r1, #3, #4
    44e8:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    44ea:	4610      	mov	r0, r2
    44ec:	e00c      	b.n	4508 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    44ee:	7863      	ldrb	r3, [r4, #1]
    44f0:	2204      	movs	r2, #4
    44f2:	f362 03c6 	bfi	r3, r2, #3, #4
    44f6:	7063      	strb	r3, [r4, #1]
			++sp;
    44f8:	3002      	adds	r0, #2
    44fa:	e005      	b.n	4508 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    44fc:	7863      	ldrb	r3, [r4, #1]
    44fe:	2205      	movs	r2, #5
    4500:	f362 03c6 	bfi	r3, r2, #3, #4
    4504:	7063      	strb	r3, [r4, #1]
		++sp;
    4506:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    4508:	f810 3b01 	ldrb.w	r3, [r0], #1
    450c:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    450e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    4512:	2a37      	cmp	r2, #55	; 0x37
    4514:	d87d      	bhi.n	4612 <extract_conversion+0x30a>
    4516:	e8df f002 	tbb	[pc, r2]
    451a:	7c5e      	.short	0x7c5e
    451c:	5e5e7c7c 	.word	0x5e5e7c7c
    4520:	7c7c7c5e 	.word	0x7c7c7c5e
    4524:	7c7c7c7c 	.word	0x7c7c7c7c
    4528:	7c7c7c7c 	.word	0x7c7c7c7c
    452c:	7c7c7c7c 	.word	0x7c7c7c7c
    4530:	7c7c4f7c 	.word	0x7c7c4f7c
    4534:	7c7c7c7c 	.word	0x7c7c7c7c
    4538:	7c5e7c7c 	.word	0x7c5e7c7c
    453c:	5e5e3a4f 	.word	0x5e5e3a4f
    4540:	7c3a7c5e 	.word	0x7c3a7c5e
    4544:	657c7c7c 	.word	0x657c7c7c
    4548:	7c7c714f 	.word	0x7c7c714f
    454c:	7c4f7c71 	.word	0x7c4f7c71
    4550:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    4552:	7863      	ldrb	r3, [r4, #1]
    4554:	2206      	movs	r2, #6
    4556:	f362 03c6 	bfi	r3, r2, #3, #4
    455a:	7063      	strb	r3, [r4, #1]
		++sp;
    455c:	3001      	adds	r0, #1
		break;
    455e:	e7d3      	b.n	4508 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    4560:	7863      	ldrb	r3, [r4, #1]
    4562:	2207      	movs	r2, #7
    4564:	f362 03c6 	bfi	r3, r2, #3, #4
    4568:	7063      	strb	r3, [r4, #1]
		++sp;
    456a:	3001      	adds	r0, #1
		break;
    456c:	e7cc      	b.n	4508 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    456e:	7863      	ldrb	r3, [r4, #1]
    4570:	2208      	movs	r2, #8
    4572:	f362 03c6 	bfi	r3, r2, #3, #4
    4576:	7063      	strb	r3, [r4, #1]
		++sp;
    4578:	3001      	adds	r0, #1
		conv->unsupported = true;
    457a:	7823      	ldrb	r3, [r4, #0]
    457c:	f043 0302 	orr.w	r3, r3, #2
    4580:	7023      	strb	r3, [r4, #0]
		break;
    4582:	e7c1      	b.n	4508 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    4584:	7863      	ldrb	r3, [r4, #1]
    4586:	f36f 03c6 	bfc	r3, #3, #4
    458a:	7063      	strb	r3, [r4, #1]
		break;
    458c:	e7bc      	b.n	4508 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    458e:	78a2      	ldrb	r2, [r4, #2]
    4590:	2101      	movs	r1, #1
    4592:	f361 0202 	bfi	r2, r1, #0, #3
    4596:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    4598:	7862      	ldrb	r2, [r4, #1]
    459a:	f002 0278 	and.w	r2, r2, #120	; 0x78
    459e:	2a40      	cmp	r2, #64	; 0x40
    45a0:	d010      	beq.n	45c4 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    45a2:	2b63      	cmp	r3, #99	; 0x63
    45a4:	d013      	beq.n	45ce <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    45a6:	7823      	ldrb	r3, [r4, #0]
    45a8:	f3c3 0240 	ubfx	r2, r3, #1, #1
    45ac:	4315      	orrs	r5, r2
    45ae:	f365 0341 	bfi	r3, r5, #1, #1
    45b2:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    45b4:	b002      	add	sp, #8
    45b6:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    45b8:	78a2      	ldrb	r2, [r4, #2]
    45ba:	2102      	movs	r1, #2
    45bc:	f361 0202 	bfi	r2, r1, #0, #3
    45c0:	70a2      	strb	r2, [r4, #2]
    45c2:	e7e9      	b.n	4598 <extract_conversion+0x290>
			conv->invalid = true;
    45c4:	7821      	ldrb	r1, [r4, #0]
    45c6:	f041 0101 	orr.w	r1, r1, #1
    45ca:	7021      	strb	r1, [r4, #0]
    45cc:	e7e9      	b.n	45a2 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    45ce:	1e15      	subs	r5, r2, #0
    45d0:	bf18      	it	ne
    45d2:	2501      	movne	r5, #1
    45d4:	e7e7      	b.n	45a6 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    45d6:	78a3      	ldrb	r3, [r4, #2]
    45d8:	2204      	movs	r2, #4
    45da:	f362 0302 	bfi	r3, r2, #0, #3
    45de:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    45e0:	2501      	movs	r5, #1
			break;
    45e2:	e7e0      	b.n	45a6 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    45e4:	78a3      	ldrb	r3, [r4, #2]
    45e6:	2203      	movs	r2, #3
    45e8:	f362 0302 	bfi	r3, r2, #0, #3
    45ec:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    45ee:	7863      	ldrb	r3, [r4, #1]
    45f0:	f003 0378 	and.w	r3, r3, #120	; 0x78
    45f4:	2b40      	cmp	r3, #64	; 0x40
    45f6:	d1d6      	bne.n	45a6 <extract_conversion+0x29e>
			unsupported = true;
    45f8:	2501      	movs	r5, #1
    45fa:	e7d4      	b.n	45a6 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    45fc:	78a3      	ldrb	r3, [r4, #2]
    45fe:	2203      	movs	r2, #3
    4600:	f362 0302 	bfi	r3, r2, #0, #3
    4604:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    4606:	7863      	ldrb	r3, [r4, #1]
    4608:	f013 0f78 	tst.w	r3, #120	; 0x78
    460c:	d0cb      	beq.n	45a6 <extract_conversion+0x29e>
			unsupported = true;
    460e:	2501      	movs	r5, #1
    4610:	e7c9      	b.n	45a6 <extract_conversion+0x29e>
		conv->invalid = true;
    4612:	7823      	ldrb	r3, [r4, #0]
    4614:	f043 0301 	orr.w	r3, r3, #1
    4618:	7023      	strb	r3, [r4, #0]
		break;
    461a:	e7c4      	b.n	45a6 <extract_conversion+0x29e>

0000461c <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    461c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4620:	b083      	sub	sp, #12
    4622:	4604      	mov	r4, r0
    4624:	460d      	mov	r5, r1
    4626:	9201      	str	r2, [sp, #4]
    4628:	469a      	mov	sl, r3
    462a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    462c:	78d3      	ldrb	r3, [r2, #3]
    462e:	4a32      	ldr	r2, [pc, #200]	; (46f8 <encode_uint+0xdc>)
    4630:	f813 b002 	ldrb.w	fp, [r3, r2]
    4634:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    4638:	2b6f      	cmp	r3, #111	; 0x6f
    463a:	d00f      	beq.n	465c <encode_uint+0x40>
    463c:	d906      	bls.n	464c <encode_uint+0x30>
    463e:	2b70      	cmp	r3, #112	; 0x70
    4640:	d00f      	beq.n	4662 <encode_uint+0x46>
    4642:	2b78      	cmp	r3, #120	; 0x78
    4644:	d110      	bne.n	4668 <encode_uint+0x4c>
		return 16;
    4646:	f04f 0910 	mov.w	r9, #16
    464a:	e023      	b.n	4694 <encode_uint+0x78>
	switch (specifier) {
    464c:	2b58      	cmp	r3, #88	; 0x58
    464e:	d002      	beq.n	4656 <encode_uint+0x3a>
    4650:	f04f 090a 	mov.w	r9, #10
    4654:	e01e      	b.n	4694 <encode_uint+0x78>
		return 16;
    4656:	f04f 0910 	mov.w	r9, #16
    465a:	e01b      	b.n	4694 <encode_uint+0x78>
		return 8;
    465c:	f04f 0908 	mov.w	r9, #8
    4660:	e018      	b.n	4694 <encode_uint+0x78>
		return 16;
    4662:	f04f 0910 	mov.w	r9, #16
    4666:	e015      	b.n	4694 <encode_uint+0x78>
	switch (specifier) {
    4668:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    466c:	e012      	b.n	4694 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    466e:	b2d2      	uxtb	r2, r2
    4670:	3230      	adds	r2, #48	; 0x30
    4672:	b2d2      	uxtb	r2, r2
    4674:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    4678:	463a      	mov	r2, r7
    467a:	4643      	mov	r3, r8
    467c:	4620      	mov	r0, r4
    467e:	4629      	mov	r1, r5
    4680:	f7fc f9ac 	bl	9dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    4684:	42bc      	cmp	r4, r7
    4686:	f175 0300 	sbcs.w	r3, r5, #0
    468a:	d319      	bcc.n	46c0 <encode_uint+0xa4>
    468c:	4556      	cmp	r6, sl
    468e:	d917      	bls.n	46c0 <encode_uint+0xa4>
		value /= radix;
    4690:	4604      	mov	r4, r0
    4692:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    4694:	f04f 0800 	mov.w	r8, #0
    4698:	464f      	mov	r7, r9
    469a:	464a      	mov	r2, r9
    469c:	4643      	mov	r3, r8
    469e:	4620      	mov	r0, r4
    46a0:	4629      	mov	r1, r5
    46a2:	f7fc f99b 	bl	9dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    46a6:	2a09      	cmp	r2, #9
    46a8:	d9e1      	bls.n	466e <encode_uint+0x52>
    46aa:	f1bb 0f01 	cmp.w	fp, #1
    46ae:	d003      	beq.n	46b8 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    46b0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    46b2:	3257      	adds	r2, #87	; 0x57
    46b4:	b2d2      	uxtb	r2, r2
    46b6:	e7dd      	b.n	4674 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    46b8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    46ba:	3237      	adds	r2, #55	; 0x37
    46bc:	b2d2      	uxtb	r2, r2
    46be:	e7d9      	b.n	4674 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    46c0:	9b01      	ldr	r3, [sp, #4]
    46c2:	781b      	ldrb	r3, [r3, #0]
    46c4:	f013 0f20 	tst.w	r3, #32
    46c8:	d005      	beq.n	46d6 <encode_uint+0xba>
		if (radix == 8) {
    46ca:	f1b9 0f08 	cmp.w	r9, #8
    46ce:	d006      	beq.n	46de <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    46d0:	f1b9 0f10 	cmp.w	r9, #16
    46d4:	d009      	beq.n	46ea <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    46d6:	4630      	mov	r0, r6
    46d8:	b003      	add	sp, #12
    46da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    46de:	9a01      	ldr	r2, [sp, #4]
    46e0:	7893      	ldrb	r3, [r2, #2]
    46e2:	f043 0308 	orr.w	r3, r3, #8
    46e6:	7093      	strb	r3, [r2, #2]
    46e8:	e7f5      	b.n	46d6 <encode_uint+0xba>
			conv->altform_0c = true;
    46ea:	9a01      	ldr	r2, [sp, #4]
    46ec:	7893      	ldrb	r3, [r2, #2]
    46ee:	f043 0310 	orr.w	r3, r3, #16
    46f2:	7093      	strb	r3, [r2, #2]
    46f4:	e7ef      	b.n	46d6 <encode_uint+0xba>
    46f6:	bf00      	nop
    46f8:	000132e9 	.word	0x000132e9

000046fc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    46fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4700:	b091      	sub	sp, #68	; 0x44
    4702:	4606      	mov	r6, r0
    4704:	460d      	mov	r5, r1
    4706:	4691      	mov	r9, r2
    4708:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    470a:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    470c:	f899 0000 	ldrb.w	r0, [r9]
    4710:	2800      	cmp	r0, #0
    4712:	f000 82d5 	beq.w	4cc0 <cbvprintf+0x5c4>
		if (*fp != '%') {
    4716:	2825      	cmp	r0, #37	; 0x25
    4718:	d008      	beq.n	472c <cbvprintf+0x30>
			OUTC(*fp++);
    471a:	f109 0901 	add.w	r9, r9, #1
    471e:	4629      	mov	r1, r5
    4720:	47b0      	blx	r6
    4722:	2800      	cmp	r0, #0
    4724:	f2c0 82cd 	blt.w	4cc2 <cbvprintf+0x5c6>
    4728:	3401      	adds	r4, #1
			continue;
    472a:	e7ef      	b.n	470c <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    472c:	2300      	movs	r3, #0
    472e:	9304      	str	r3, [sp, #16]
    4730:	9305      	str	r3, [sp, #20]
    4732:	9306      	str	r3, [sp, #24]
    4734:	9307      	str	r3, [sp, #28]
    4736:	9308      	str	r3, [sp, #32]
    4738:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    473a:	4649      	mov	r1, r9
    473c:	a806      	add	r0, sp, #24
    473e:	f7ff fde3 	bl	4308 <extract_conversion>
    4742:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    4744:	f89d 3019 	ldrb.w	r3, [sp, #25]
    4748:	f013 0f01 	tst.w	r3, #1
    474c:	f000 8097 	beq.w	487e <cbvprintf+0x182>
			width = va_arg(ap, int);
    4750:	9b03      	ldr	r3, [sp, #12]
    4752:	1d1a      	adds	r2, r3, #4
    4754:	9203      	str	r2, [sp, #12]
    4756:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    4758:	2f00      	cmp	r7, #0
    475a:	f2c0 8088 	blt.w	486e <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    475e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    4762:	f013 0f04 	tst.w	r3, #4
    4766:	f000 809c 	beq.w	48a2 <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    476a:	9b03      	ldr	r3, [sp, #12]
    476c:	1d1a      	adds	r2, r3, #4
    476e:	9203      	str	r2, [sp, #12]
    4770:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    4774:	f1ba 0f00 	cmp.w	sl, #0
    4778:	f2c0 808a 	blt.w	4890 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    477c:	2300      	movs	r3, #0
    477e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    4780:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    4782:	f89d 301a 	ldrb.w	r3, [sp, #26]
    4786:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    478a:	f89d 1019 	ldrb.w	r1, [sp, #25]
    478e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    4792:	2b01      	cmp	r3, #1
    4794:	f000 808e 	beq.w	48b4 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    4798:	2b02      	cmp	r3, #2
    479a:	f000 80d3 	beq.w	4944 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    479e:	2b04      	cmp	r3, #4
    47a0:	f000 8124 	beq.w	49ec <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    47a4:	2b03      	cmp	r3, #3
    47a6:	f000 813b 	beq.w	4a20 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    47aa:	f89d 8018 	ldrb.w	r8, [sp, #24]
    47ae:	f018 0b03 	ands.w	fp, r8, #3
    47b2:	f040 813b 	bne.w	4a2c <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    47b6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    47ba:	3b25      	subs	r3, #37	; 0x25
    47bc:	2b53      	cmp	r3, #83	; 0x53
    47be:	f200 81e6 	bhi.w	4b8e <cbvprintf+0x492>
    47c2:	e8df f013 	tbh	[pc, r3, lsl #1]
    47c6:	0140      	.short	0x0140
    47c8:	01e401e4 	.word	0x01e401e4
    47cc:	01e401e4 	.word	0x01e401e4
    47d0:	01e401e4 	.word	0x01e401e4
    47d4:	01e401e4 	.word	0x01e401e4
    47d8:	01e401e4 	.word	0x01e401e4
    47dc:	01e401e4 	.word	0x01e401e4
    47e0:	01e401e4 	.word	0x01e401e4
    47e4:	01e401e4 	.word	0x01e401e4
    47e8:	01e401e4 	.word	0x01e401e4
    47ec:	01e401e4 	.word	0x01e401e4
    47f0:	01e401e4 	.word	0x01e401e4
    47f4:	01e401e4 	.word	0x01e401e4
    47f8:	01e401e4 	.word	0x01e401e4
    47fc:	01e401e4 	.word	0x01e401e4
    4800:	01e401e4 	.word	0x01e401e4
    4804:	01e401e4 	.word	0x01e401e4
    4808:	01e401e4 	.word	0x01e401e4
    480c:	01e401e4 	.word	0x01e401e4
    4810:	01e401e4 	.word	0x01e401e4
    4814:	01e401e4 	.word	0x01e401e4
    4818:	01e401e4 	.word	0x01e401e4
    481c:	01e401e4 	.word	0x01e401e4
    4820:	01e401e4 	.word	0x01e401e4
    4824:	01e401e4 	.word	0x01e401e4
    4828:	01e401e4 	.word	0x01e401e4
    482c:	01e40181 	.word	0x01e40181
    4830:	01e401e4 	.word	0x01e401e4
    4834:	01e401e4 	.word	0x01e401e4
    4838:	01e401e4 	.word	0x01e401e4
    483c:	01e401e4 	.word	0x01e401e4
    4840:	015e01e4 	.word	0x015e01e4
    4844:	01e40167 	.word	0x01e40167
    4848:	01e401e4 	.word	0x01e401e4
    484c:	016701e4 	.word	0x016701e4
    4850:	01e401e4 	.word	0x01e401e4
    4854:	01e401e4 	.word	0x01e401e4
    4858:	018101be 	.word	0x018101be
    485c:	01e401a2 	.word	0x01e401a2
    4860:	014d01e4 	.word	0x014d01e4
    4864:	018101e4 	.word	0x018101e4
    4868:	01e401e4 	.word	0x01e401e4
    486c:	0181      	.short	0x0181
				conv->flag_dash = true;
    486e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    4872:	f043 0304 	orr.w	r3, r3, #4
    4876:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    487a:	427f      	negs	r7, r7
    487c:	e76f      	b.n	475e <cbvprintf+0x62>
		} else if (conv->width_present) {
    487e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    4882:	2b00      	cmp	r3, #0
    4884:	db02      	blt.n	488c <cbvprintf+0x190>
		int width = -1;
    4886:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    488a:	e768      	b.n	475e <cbvprintf+0x62>
			width = conv->width_value;
    488c:	9f07      	ldr	r7, [sp, #28]
    488e:	e766      	b.n	475e <cbvprintf+0x62>
				conv->prec_present = false;
    4890:	f89d 3019 	ldrb.w	r3, [sp, #25]
    4894:	f36f 0341 	bfc	r3, #1, #1
    4898:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    489c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    48a0:	e76c      	b.n	477c <cbvprintf+0x80>
		} else if (conv->prec_present) {
    48a2:	f013 0f02 	tst.w	r3, #2
    48a6:	d002      	beq.n	48ae <cbvprintf+0x1b2>
			precision = conv->prec_value;
    48a8:	f8dd a020 	ldr.w	sl, [sp, #32]
    48ac:	e766      	b.n	477c <cbvprintf+0x80>
		int precision = -1;
    48ae:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    48b2:	e763      	b.n	477c <cbvprintf+0x80>
			switch (length_mod) {
    48b4:	1ecb      	subs	r3, r1, #3
    48b6:	2b04      	cmp	r3, #4
    48b8:	d804      	bhi.n	48c4 <cbvprintf+0x1c8>
    48ba:	e8df f003 	tbb	[pc, r3]
    48be:	1d0b      	.short	0x1d0b
    48c0:	3529      	.short	0x3529
    48c2:	35          	.byte	0x35
    48c3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    48c4:	9b03      	ldr	r3, [sp, #12]
    48c6:	1d1a      	adds	r2, r3, #4
    48c8:	9203      	str	r2, [sp, #12]
    48ca:	681b      	ldr	r3, [r3, #0]
    48cc:	17da      	asrs	r2, r3, #31
    48ce:	9304      	str	r3, [sp, #16]
    48d0:	9205      	str	r2, [sp, #20]
				break;
    48d2:	e006      	b.n	48e2 <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    48d4:	9b03      	ldr	r3, [sp, #12]
    48d6:	1d1a      	adds	r2, r3, #4
    48d8:	9203      	str	r2, [sp, #12]
    48da:	681b      	ldr	r3, [r3, #0]
    48dc:	17da      	asrs	r2, r3, #31
    48de:	9304      	str	r3, [sp, #16]
    48e0:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    48e2:	2901      	cmp	r1, #1
    48e4:	d028      	beq.n	4938 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    48e6:	2902      	cmp	r1, #2
    48e8:	f47f af5f 	bne.w	47aa <cbvprintf+0xae>
				value->sint = (short)value->sint;
    48ec:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    48f0:	17da      	asrs	r2, r3, #31
    48f2:	9304      	str	r3, [sp, #16]
    48f4:	9205      	str	r2, [sp, #20]
    48f6:	e758      	b.n	47aa <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    48f8:	9b03      	ldr	r3, [sp, #12]
    48fa:	3307      	adds	r3, #7
    48fc:	f023 0307 	bic.w	r3, r3, #7
    4900:	f103 0208 	add.w	r2, r3, #8
    4904:	9203      	str	r2, [sp, #12]
    4906:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    490a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    490e:	e7e8      	b.n	48e2 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    4910:	9b03      	ldr	r3, [sp, #12]
    4912:	3307      	adds	r3, #7
    4914:	f023 0307 	bic.w	r3, r3, #7
    4918:	f103 0208 	add.w	r2, r3, #8
    491c:	9203      	str	r2, [sp, #12]
    491e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    4922:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    4926:	e7dc      	b.n	48e2 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4928:	9b03      	ldr	r3, [sp, #12]
    492a:	1d1a      	adds	r2, r3, #4
    492c:	9203      	str	r2, [sp, #12]
    492e:	681b      	ldr	r3, [r3, #0]
    4930:	17da      	asrs	r2, r3, #31
				value->sint =
    4932:	9304      	str	r3, [sp, #16]
    4934:	9205      	str	r2, [sp, #20]
				break;
    4936:	e7d4      	b.n	48e2 <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    4938:	f89d 3010 	ldrb.w	r3, [sp, #16]
    493c:	9304      	str	r3, [sp, #16]
    493e:	2300      	movs	r3, #0
    4940:	9305      	str	r3, [sp, #20]
    4942:	e732      	b.n	47aa <cbvprintf+0xae>
			switch (length_mod) {
    4944:	1ecb      	subs	r3, r1, #3
    4946:	2b04      	cmp	r3, #4
    4948:	d804      	bhi.n	4954 <cbvprintf+0x258>
    494a:	e8df f003 	tbb	[pc, r3]
    494e:	1f0b      	.short	0x1f0b
    4950:	4135      	.short	0x4135
    4952:	41          	.byte	0x41
    4953:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    4954:	9b03      	ldr	r3, [sp, #12]
    4956:	1d1a      	adds	r2, r3, #4
    4958:	9203      	str	r2, [sp, #12]
    495a:	681b      	ldr	r3, [r3, #0]
    495c:	9304      	str	r3, [sp, #16]
    495e:	2300      	movs	r3, #0
    4960:	9305      	str	r3, [sp, #20]
				break;
    4962:	e01e      	b.n	49a2 <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    4964:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    4968:	2b63      	cmp	r3, #99	; 0x63
    496a:	d007      	beq.n	497c <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    496c:	9b03      	ldr	r3, [sp, #12]
    496e:	1d1a      	adds	r2, r3, #4
    4970:	9203      	str	r2, [sp, #12]
    4972:	681b      	ldr	r3, [r3, #0]
    4974:	9304      	str	r3, [sp, #16]
    4976:	2300      	movs	r3, #0
    4978:	9305      	str	r3, [sp, #20]
    497a:	e012      	b.n	49a2 <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    497c:	9b03      	ldr	r3, [sp, #12]
    497e:	1d1a      	adds	r2, r3, #4
    4980:	9203      	str	r2, [sp, #12]
    4982:	681b      	ldr	r3, [r3, #0]
    4984:	9304      	str	r3, [sp, #16]
    4986:	2300      	movs	r3, #0
    4988:	9305      	str	r3, [sp, #20]
    498a:	e00a      	b.n	49a2 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    498c:	9b03      	ldr	r3, [sp, #12]
    498e:	3307      	adds	r3, #7
    4990:	f023 0307 	bic.w	r3, r3, #7
    4994:	f103 0208 	add.w	r2, r3, #8
    4998:	9203      	str	r2, [sp, #12]
    499a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    499e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    49a2:	2901      	cmp	r1, #1
    49a4:	d01c      	beq.n	49e0 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    49a6:	2902      	cmp	r1, #2
    49a8:	f47f aeff 	bne.w	47aa <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    49ac:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    49b0:	9304      	str	r3, [sp, #16]
    49b2:	2300      	movs	r3, #0
    49b4:	9305      	str	r3, [sp, #20]
    49b6:	e6f8      	b.n	47aa <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    49b8:	9b03      	ldr	r3, [sp, #12]
    49ba:	3307      	adds	r3, #7
    49bc:	f023 0307 	bic.w	r3, r3, #7
    49c0:	f103 0208 	add.w	r2, r3, #8
    49c4:	9203      	str	r2, [sp, #12]
    49c6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    49ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    49ce:	e7e8      	b.n	49a2 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    49d0:	9b03      	ldr	r3, [sp, #12]
    49d2:	1d1a      	adds	r2, r3, #4
    49d4:	9203      	str	r2, [sp, #12]
    49d6:	681b      	ldr	r3, [r3, #0]
				value->uint =
    49d8:	9304      	str	r3, [sp, #16]
    49da:	2300      	movs	r3, #0
    49dc:	9305      	str	r3, [sp, #20]
				break;
    49de:	e7e0      	b.n	49a2 <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    49e0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    49e4:	9304      	str	r3, [sp, #16]
    49e6:	2300      	movs	r3, #0
    49e8:	9305      	str	r3, [sp, #20]
    49ea:	e6de      	b.n	47aa <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    49ec:	2908      	cmp	r1, #8
    49ee:	d00b      	beq.n	4a08 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    49f0:	9b03      	ldr	r3, [sp, #12]
    49f2:	3307      	adds	r3, #7
    49f4:	f023 0307 	bic.w	r3, r3, #7
    49f8:	f103 0208 	add.w	r2, r3, #8
    49fc:	9203      	str	r2, [sp, #12]
    49fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a02:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4a06:	e6d0      	b.n	47aa <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    4a08:	9b03      	ldr	r3, [sp, #12]
    4a0a:	3307      	adds	r3, #7
    4a0c:	f023 0307 	bic.w	r3, r3, #7
    4a10:	f103 0208 	add.w	r2, r3, #8
    4a14:	9203      	str	r2, [sp, #12]
    4a16:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4a1e:	e6c4      	b.n	47aa <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    4a20:	9b03      	ldr	r3, [sp, #12]
    4a22:	1d1a      	adds	r2, r3, #4
    4a24:	9203      	str	r2, [sp, #12]
    4a26:	681b      	ldr	r3, [r3, #0]
    4a28:	9304      	str	r3, [sp, #16]
    4a2a:	e6be      	b.n	47aa <cbvprintf+0xae>
			OUTS(sp, fp);
    4a2c:	9f02      	ldr	r7, [sp, #8]
    4a2e:	463b      	mov	r3, r7
    4a30:	464a      	mov	r2, r9
    4a32:	4629      	mov	r1, r5
    4a34:	4630      	mov	r0, r6
    4a36:	f00a fb54 	bl	f0e2 <outs>
    4a3a:	2800      	cmp	r0, #0
    4a3c:	f2c0 8141 	blt.w	4cc2 <cbvprintf+0x5c6>
    4a40:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    4a42:	46b9      	mov	r9, r7
			continue;
    4a44:	e662      	b.n	470c <cbvprintf+0x10>
		case '%':
			OUTC('%');
    4a46:	4629      	mov	r1, r5
    4a48:	2025      	movs	r0, #37	; 0x25
    4a4a:	47b0      	blx	r6
    4a4c:	2800      	cmp	r0, #0
    4a4e:	f2c0 8138 	blt.w	4cc2 <cbvprintf+0x5c6>
    4a52:	3401      	adds	r4, #1
		char sign = 0;
    4a54:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    4a56:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    4a5a:	f04f 0900 	mov.w	r9, #0
			break;
    4a5e:	e09b      	b.n	4b98 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    4a60:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    4a64:	f1ba 0f00 	cmp.w	sl, #0
    4a68:	db07      	blt.n	4a7a <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    4a6a:	4651      	mov	r1, sl
    4a6c:	4648      	mov	r0, r9
    4a6e:	f00b fe1b 	bl	106a8 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    4a72:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    4a76:	46d8      	mov	r8, fp
			precision = -1;

			break;
    4a78:	e08e      	b.n	4b98 <cbvprintf+0x49c>
				len = strlen(bps);
    4a7a:	4648      	mov	r0, r9
    4a7c:	f7fc f9eb 	bl	e56 <strlen>
    4a80:	e7f7      	b.n	4a72 <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    4a82:	9b04      	ldr	r3, [sp, #16]
    4a84:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    4a88:	46d8      	mov	r8, fp
			bpe = buf + 1;
    4a8a:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    4a8e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    4a92:	e081      	b.n	4b98 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    4a94:	f018 0f08 	tst.w	r8, #8
    4a98:	d105      	bne.n	4aa6 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    4a9a:	f018 0810 	ands.w	r8, r8, #16
    4a9e:	d004      	beq.n	4aaa <cbvprintf+0x3ae>
				sign = ' ';
    4aa0:	f04f 0820 	mov.w	r8, #32
    4aa4:	e001      	b.n	4aaa <cbvprintf+0x3ae>
				sign = '+';
    4aa6:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    4aaa:	9a04      	ldr	r2, [sp, #16]
    4aac:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    4aae:	2b00      	cmp	r3, #0
    4ab0:	db02      	blt.n	4ab8 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    4ab2:	9204      	str	r2, [sp, #16]
    4ab4:	9305      	str	r3, [sp, #20]
    4ab6:	e008      	b.n	4aca <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    4ab8:	4252      	negs	r2, r2
    4aba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4abe:	9204      	str	r2, [sp, #16]
    4ac0:	9305      	str	r3, [sp, #20]
				sign = '-';
    4ac2:	f04f 082d 	mov.w	r8, #45	; 0x2d
    4ac6:	e000      	b.n	4aca <cbvprintf+0x3ce>
		switch (conv->specifier) {
    4ac8:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    4aca:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    4ace:	9300      	str	r3, [sp, #0]
    4ad0:	ab0a      	add	r3, sp, #40	; 0x28
    4ad2:	aa06      	add	r2, sp, #24
    4ad4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4ad8:	f7ff fda0 	bl	461c <encode_uint>
    4adc:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    4ade:	f1ba 0f00 	cmp.w	sl, #0
    4ae2:	f2c0 8088 	blt.w	4bf6 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    4ae6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    4aea:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    4aee:	f89d 2018 	ldrb.w	r2, [sp, #24]
    4af2:	f36f 1286 	bfc	r2, #6, #1
    4af6:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    4afa:	459a      	cmp	sl, r3
    4afc:	d97e      	bls.n	4bfc <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    4afe:	ebaa 0303 	sub.w	r3, sl, r3
    4b02:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    4b04:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    4b08:	e046      	b.n	4b98 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    4b0a:	9804      	ldr	r0, [sp, #16]
    4b0c:	b928      	cbnz	r0, 4b1a <cbvprintf+0x41e>
		char sign = 0;
    4b0e:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    4b10:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 4cc8 <cbvprintf+0x5cc>
			bps = "(nil)";
    4b14:	f1aa 0905 	sub.w	r9, sl, #5
    4b18:	e03e      	b.n	4b98 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4b1a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    4b1e:	9300      	str	r3, [sp, #0]
    4b20:	ab0a      	add	r3, sp, #40	; 0x28
    4b22:	aa06      	add	r2, sp, #24
    4b24:	2100      	movs	r1, #0
    4b26:	f7ff fd79 	bl	461c <encode_uint>
    4b2a:	4681      	mov	r9, r0
				conv->altform_0c = true;
    4b2c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    4b30:	f043 0310 	orr.w	r3, r3, #16
    4b34:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    4b38:	2378      	movs	r3, #120	; 0x78
    4b3a:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    4b3e:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    4b40:	e7cd      	b.n	4ade <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    4b42:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    4b44:	f89d 3019 	ldrb.w	r3, [sp, #25]
    4b48:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    4b4c:	2b07      	cmp	r3, #7
    4b4e:	d806      	bhi.n	4b5e <cbvprintf+0x462>
    4b50:	e8df f003 	tbb	[pc, r3]
    4b54:	0f0d0b04 	.word	0x0f0d0b04
    4b58:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    4b5c:	6014      	str	r4, [r2, #0]
		char sign = 0;
    4b5e:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    4b60:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    4b64:	f04f 0900 	mov.w	r9, #0
}
    4b68:	e016      	b.n	4b98 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    4b6a:	7014      	strb	r4, [r2, #0]
		break;
    4b6c:	e7f7      	b.n	4b5e <cbvprintf+0x462>
		*(short *)dp = (short)count;
    4b6e:	8014      	strh	r4, [r2, #0]
		break;
    4b70:	e7f5      	b.n	4b5e <cbvprintf+0x462>
		*(long *)dp = (long)count;
    4b72:	6014      	str	r4, [r2, #0]
		break;
    4b74:	e7f3      	b.n	4b5e <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    4b76:	17e3      	asrs	r3, r4, #31
    4b78:	6014      	str	r4, [r2, #0]
    4b7a:	6053      	str	r3, [r2, #4]
		break;
    4b7c:	e7ef      	b.n	4b5e <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    4b7e:	17e3      	asrs	r3, r4, #31
    4b80:	6014      	str	r4, [r2, #0]
    4b82:	6053      	str	r3, [r2, #4]
		break;
    4b84:	e7eb      	b.n	4b5e <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    4b86:	6014      	str	r4, [r2, #0]
		break;
    4b88:	e7e9      	b.n	4b5e <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    4b8a:	6014      	str	r4, [r2, #0]
		break;
    4b8c:	e7e7      	b.n	4b5e <cbvprintf+0x462>
		switch (conv->specifier) {
    4b8e:	46d8      	mov	r8, fp
    4b90:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    4b94:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    4b98:	f1b9 0f00 	cmp.w	r9, #0
    4b9c:	f000 808d 	beq.w	4cba <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    4ba0:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    4ba4:	f1b8 0f00 	cmp.w	r8, #0
    4ba8:	d000      	beq.n	4bac <cbvprintf+0x4b0>
			nj_len += 1U;
    4baa:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    4bac:	f89d 101a 	ldrb.w	r1, [sp, #26]
    4bb0:	f011 0f10 	tst.w	r1, #16
    4bb4:	d025      	beq.n	4c02 <cbvprintf+0x506>
			nj_len += 2U;
    4bb6:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    4bb8:	9b07      	ldr	r3, [sp, #28]
    4bba:	4413      	add	r3, r2
		if (conv->pad_fp) {
    4bbc:	f011 0f40 	tst.w	r1, #64	; 0x40
    4bc0:	d001      	beq.n	4bc6 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    4bc2:	9a08      	ldr	r2, [sp, #32]
    4bc4:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    4bc6:	2f00      	cmp	r7, #0
    4bc8:	dd31      	ble.n	4c2e <cbvprintf+0x532>
			width -= (int)nj_len;
    4bca:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    4bcc:	f89d 3018 	ldrb.w	r3, [sp, #24]
    4bd0:	f013 0f04 	tst.w	r3, #4
    4bd4:	d12b      	bne.n	4c2e <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    4bd6:	f013 0f40 	tst.w	r3, #64	; 0x40
    4bda:	d017      	beq.n	4c0c <cbvprintf+0x510>
					if (sign != 0) {
    4bdc:	f1b8 0f00 	cmp.w	r8, #0
    4be0:	d017      	beq.n	4c12 <cbvprintf+0x516>
						OUTC(sign);
    4be2:	4629      	mov	r1, r5
    4be4:	4640      	mov	r0, r8
    4be6:	47b0      	blx	r6
    4be8:	2800      	cmp	r0, #0
    4bea:	db6a      	blt.n	4cc2 <cbvprintf+0x5c6>
    4bec:	3401      	adds	r4, #1
						sign = 0;
    4bee:	46d8      	mov	r8, fp
					}
					pad = '0';
    4bf0:	f04f 0b30 	mov.w	fp, #48	; 0x30
    4bf4:	e00f      	b.n	4c16 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    4bf6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    4bfa:	e7cd      	b.n	4b98 <cbvprintf+0x49c>
    4bfc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    4c00:	e7ca      	b.n	4b98 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    4c02:	f011 0f08 	tst.w	r1, #8
    4c06:	d0d7      	beq.n	4bb8 <cbvprintf+0x4bc>
			nj_len += 1U;
    4c08:	3201      	adds	r2, #1
    4c0a:	e7d5      	b.n	4bb8 <cbvprintf+0x4bc>
				char pad = ' ';
    4c0c:	f04f 0b20 	mov.w	fp, #32
    4c10:	e001      	b.n	4c16 <cbvprintf+0x51a>
					pad = '0';
    4c12:	f04f 0b30 	mov.w	fp, #48	; 0x30
    4c16:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    4c18:	1e5f      	subs	r7, r3, #1
    4c1a:	2b00      	cmp	r3, #0
    4c1c:	dd07      	ble.n	4c2e <cbvprintf+0x532>
					OUTC(pad);
    4c1e:	4629      	mov	r1, r5
    4c20:	4658      	mov	r0, fp
    4c22:	47b0      	blx	r6
    4c24:	2800      	cmp	r0, #0
    4c26:	db4c      	blt.n	4cc2 <cbvprintf+0x5c6>
    4c28:	3401      	adds	r4, #1
				while (width-- > 0) {
    4c2a:	463b      	mov	r3, r7
    4c2c:	e7f4      	b.n	4c18 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    4c2e:	f1b8 0f00 	cmp.w	r8, #0
    4c32:	d005      	beq.n	4c40 <cbvprintf+0x544>
			OUTC(sign);
    4c34:	4629      	mov	r1, r5
    4c36:	4640      	mov	r0, r8
    4c38:	47b0      	blx	r6
    4c3a:	2800      	cmp	r0, #0
    4c3c:	db41      	blt.n	4cc2 <cbvprintf+0x5c6>
    4c3e:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    4c40:	f89d 301a 	ldrb.w	r3, [sp, #26]
    4c44:	f3c3 1200 	ubfx	r2, r3, #4, #1
    4c48:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    4c4c:	4313      	orrs	r3, r2
    4c4e:	d005      	beq.n	4c5c <cbvprintf+0x560>
				OUTC('0');
    4c50:	4629      	mov	r1, r5
    4c52:	2030      	movs	r0, #48	; 0x30
    4c54:	47b0      	blx	r6
    4c56:	2800      	cmp	r0, #0
    4c58:	db33      	blt.n	4cc2 <cbvprintf+0x5c6>
    4c5a:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    4c5c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    4c60:	f013 0f10 	tst.w	r3, #16
    4c64:	d006      	beq.n	4c74 <cbvprintf+0x578>
				OUTC(conv->specifier);
    4c66:	4629      	mov	r1, r5
    4c68:	f89d 001b 	ldrb.w	r0, [sp, #27]
    4c6c:	47b0      	blx	r6
    4c6e:	2800      	cmp	r0, #0
    4c70:	db27      	blt.n	4cc2 <cbvprintf+0x5c6>
    4c72:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    4c74:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    4c76:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    4c7a:	2b00      	cmp	r3, #0
    4c7c:	dd07      	ble.n	4c8e <cbvprintf+0x592>
				OUTC('0');
    4c7e:	4629      	mov	r1, r5
    4c80:	2030      	movs	r0, #48	; 0x30
    4c82:	47b0      	blx	r6
    4c84:	2800      	cmp	r0, #0
    4c86:	db1c      	blt.n	4cc2 <cbvprintf+0x5c6>
    4c88:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    4c8a:	4643      	mov	r3, r8
    4c8c:	e7f3      	b.n	4c76 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    4c8e:	4653      	mov	r3, sl
    4c90:	464a      	mov	r2, r9
    4c92:	4629      	mov	r1, r5
    4c94:	4630      	mov	r0, r6
    4c96:	f00a fa24 	bl	f0e2 <outs>
    4c9a:	2800      	cmp	r0, #0
    4c9c:	db11      	blt.n	4cc2 <cbvprintf+0x5c6>
    4c9e:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    4ca0:	2f00      	cmp	r7, #0
    4ca2:	dd07      	ble.n	4cb4 <cbvprintf+0x5b8>
			OUTC(' ');
    4ca4:	4629      	mov	r1, r5
    4ca6:	2020      	movs	r0, #32
    4ca8:	47b0      	blx	r6
    4caa:	2800      	cmp	r0, #0
    4cac:	db09      	blt.n	4cc2 <cbvprintf+0x5c6>
    4cae:	3401      	adds	r4, #1
			--width;
    4cb0:	3f01      	subs	r7, #1
    4cb2:	e7f5      	b.n	4ca0 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    4cb4:	f8dd 9008 	ldr.w	r9, [sp, #8]
    4cb8:	e528      	b.n	470c <cbvprintf+0x10>
    4cba:	f8dd 9008 	ldr.w	r9, [sp, #8]
    4cbe:	e525      	b.n	470c <cbvprintf+0x10>
		}
	}

	return count;
    4cc0:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    4cc2:	b011      	add	sp, #68	; 0x44
    4cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4cc8:	000118f1 	.word	0x000118f1

00004ccc <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    4ccc:	b508      	push	{r3, lr}
	__asm__ volatile(
    4cce:	f04f 0220 	mov.w	r2, #32
    4cd2:	f3ef 8311 	mrs	r3, BASEPRI
    4cd6:	f382 8812 	msr	BASEPRI_MAX, r2
    4cda:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    4cde:	f001 ffff 	bl	6ce0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    4ce2:	4803      	ldr	r0, [pc, #12]	; (4cf0 <sys_reboot+0x24>)
    4ce4:	f00a f915 	bl	ef12 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    4ce8:	f000 ffa8 	bl	5c3c <arch_cpu_idle>
    4cec:	e7fc      	b.n	4ce8 <sys_reboot+0x1c>
    4cee:	bf00      	nop
    4cf0:	000118f4 	.word	0x000118f4

00004cf4 <msg_process>:

static void msg_process(union log_msgs msg, bool bypass)
{
	struct log_backend const *backend;

	if (!bypass) {
    4cf4:	2900      	cmp	r1, #0
    4cf6:	d150      	bne.n	4d9a <msg_process+0xa6>
{
    4cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4cfc:	4607      	mov	r7, r0
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    4cfe:	2400      	movs	r4, #0
    4d00:	e022      	b.n	4d48 <msg_process+0x54>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
    4d02:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4d9c <msg_process+0xa8>
    4d06:	f44f 7399 	mov.w	r3, #306	; 0x132
    4d0a:	464a      	mov	r2, r9
    4d0c:	4924      	ldr	r1, [pc, #144]	; (4da0 <msg_process+0xac>)
    4d0e:	4825      	ldr	r0, [pc, #148]	; (4da4 <msg_process+0xb0>)
    4d10:	f00a fa08 	bl	f124 <assert_print>
    4d14:	f44f 7199 	mov.w	r1, #306	; 0x132
    4d18:	4648      	mov	r0, r9
    4d1a:	f00a f9fc 	bl	f116 <assert_post_action>
    4d1e:	e01f      	b.n	4d60 <msg_process+0x6c>
	__ASSERT_NO_MSG(backend != NULL);
    4d20:	f8df 9078 	ldr.w	r9, [pc, #120]	; 4d9c <msg_process+0xa8>
    4d24:	2385      	movs	r3, #133	; 0x85
    4d26:	464a      	mov	r2, r9
    4d28:	491d      	ldr	r1, [pc, #116]	; (4da0 <msg_process+0xac>)
    4d2a:	481e      	ldr	r0, [pc, #120]	; (4da4 <msg_process+0xb0>)
    4d2c:	f00a f9fa 	bl	f124 <assert_print>
    4d30:	2185      	movs	r1, #133	; 0x85
    4d32:	4648      	mov	r0, r9
    4d34:	f00a f9ef 	bl	f116 <assert_post_action>
    4d38:	e01e      	b.n	4d78 <msg_process+0x84>
	backend->api->process(backend, msg);
    4d3a:	f858 3005 	ldr.w	r3, [r8, r5]
    4d3e:	681b      	ldr	r3, [r3, #0]
    4d40:	4639      	mov	r1, r7
    4d42:	4630      	mov	r0, r6
    4d44:	4798      	blx	r3
    4d46:	3401      	adds	r4, #1
    4d48:	4b17      	ldr	r3, [pc, #92]	; (4da8 <msg_process+0xb4>)
    4d4a:	4a18      	ldr	r2, [pc, #96]	; (4dac <msg_process+0xb8>)
    4d4c:	1a9b      	subs	r3, r3, r2
    4d4e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    4d52:	da20      	bge.n	4d96 <msg_process+0xa2>
	return &__log_backends_start[idx];
    4d54:	ea4f 1804 	mov.w	r8, r4, lsl #4
    4d58:	4d14      	ldr	r5, [pc, #80]	; (4dac <msg_process+0xb8>)
	__ASSERT_NO_MSG(backend != NULL);
    4d5a:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    4d5e:	d0d0      	beq.n	4d02 <msg_process+0xe>
	return backend->cb->active;
    4d60:	6873      	ldr	r3, [r6, #4]
    4d62:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);
			if (log_backend_is_active(backend) &&
    4d64:	2b00      	cmp	r3, #0
    4d66:	d0ee      	beq.n	4d46 <msg_process+0x52>
			    msg_filter_check(backend, msg)) {
    4d68:	4639      	mov	r1, r7
    4d6a:	4630      	mov	r0, r6
    4d6c:	f00a f9eb 	bl	f146 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    4d70:	2800      	cmp	r0, #0
    4d72:	d0e8      	beq.n	4d46 <msg_process+0x52>
	__ASSERT_NO_MSG(backend != NULL);
    4d74:	2e00      	cmp	r6, #0
    4d76:	d0d3      	beq.n	4d20 <msg_process+0x2c>
	__ASSERT_NO_MSG(msg != NULL);
    4d78:	2f00      	cmp	r7, #0
    4d7a:	d1de      	bne.n	4d3a <msg_process+0x46>
    4d7c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 4d9c <msg_process+0xa8>
    4d80:	2386      	movs	r3, #134	; 0x86
    4d82:	464a      	mov	r2, r9
    4d84:	490a      	ldr	r1, [pc, #40]	; (4db0 <msg_process+0xbc>)
    4d86:	4807      	ldr	r0, [pc, #28]	; (4da4 <msg_process+0xb0>)
    4d88:	f00a f9cc 	bl	f124 <assert_print>
    4d8c:	2186      	movs	r1, #134	; 0x86
    4d8e:	4648      	mov	r0, r9
    4d90:	f00a f9c1 	bl	f116 <assert_post_action>
    4d94:	e7d1      	b.n	4d3a <msg_process+0x46>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    4d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4d9a:	4770      	bx	lr
    4d9c:	00011920 	.word	0x00011920
    4da0:	00011958 	.word	0x00011958
    4da4:	00011514 	.word	0x00011514
    4da8:	00010f48 	.word	0x00010f48
    4dac:	00010f28 	.word	0x00010f28
    4db0:	00011970 	.word	0x00011970

00004db4 <log_format_func_t_get>:
}
    4db4:	4b01      	ldr	r3, [pc, #4]	; (4dbc <log_format_func_t_get+0x8>)
    4db6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4dba:	4770      	bx	lr
    4dbc:	000119f4 	.word	0x000119f4

00004dc0 <log_init>:
{
    4dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
    4dc2:	4b20      	ldr	r3, [pc, #128]	; (4e44 <log_init+0x84>)
    4dc4:	4a20      	ldr	r2, [pc, #128]	; (4e48 <log_init+0x88>)
    4dc6:	1a9b      	subs	r3, r3, r2
    4dc8:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    4dca:	2b90      	cmp	r3, #144	; 0x90
    4dcc:	d80e      	bhi.n	4dec <log_init+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4dce:	4b1f      	ldr	r3, [pc, #124]	; (4e4c <log_init+0x8c>)
    4dd0:	f3bf 8f5b 	dmb	ish
    4dd4:	e853 2f00 	ldrex	r2, [r3]
    4dd8:	1c51      	adds	r1, r2, #1
    4dda:	e843 1000 	strex	r0, r1, [r3]
    4dde:	2800      	cmp	r0, #0
    4de0:	d1f8      	bne.n	4dd4 <log_init+0x14>
    4de2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    4de6:	bb5a      	cbnz	r2, 4e40 <log_init+0x80>
	for (i = 0; i < log_backend_count_get(); i++) {
    4de8:	2400      	movs	r4, #0
    4dea:	e017      	b.n	4e1c <log_init+0x5c>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    4dec:	4c18      	ldr	r4, [pc, #96]	; (4e50 <log_init+0x90>)
    4dee:	f240 2373 	movw	r3, #627	; 0x273
    4df2:	4622      	mov	r2, r4
    4df4:	4917      	ldr	r1, [pc, #92]	; (4e54 <log_init+0x94>)
    4df6:	4818      	ldr	r0, [pc, #96]	; (4e58 <log_init+0x98>)
    4df8:	f00a f994 	bl	f124 <assert_print>
    4dfc:	f240 2173 	movw	r1, #627	; 0x273
    4e00:	4620      	mov	r0, r4
    4e02:	f00a f988 	bl	f116 <assert_post_action>
    4e06:	e7e2      	b.n	4dce <log_init+0xe>
					   backend->cb->ctx,
    4e08:	4b0f      	ldr	r3, [pc, #60]	; (4e48 <log_init+0x88>)
    4e0a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    4e0e:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    4e10:	2204      	movs	r2, #4
    4e12:	6819      	ldr	r1, [r3, #0]
    4e14:	4628      	mov	r0, r5
    4e16:	f000 f8d3 	bl	4fc0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    4e1a:	3401      	adds	r4, #1
    4e1c:	42b4      	cmp	r4, r6
    4e1e:	da0f      	bge.n	4e40 <log_init+0x80>
		const struct log_backend *backend = log_backend_get(i);
    4e20:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
    4e22:	4d09      	ldr	r5, [pc, #36]	; (4e48 <log_init+0x88>)
    4e24:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    4e28:	7b2b      	ldrb	r3, [r5, #12]
    4e2a:	2b00      	cmp	r3, #0
    4e2c:	d0f5      	beq.n	4e1a <log_init+0x5a>
			if (backend->api->init != NULL) {
    4e2e:	0123      	lsls	r3, r4, #4
    4e30:	4a05      	ldr	r2, [pc, #20]	; (4e48 <log_init+0x88>)
    4e32:	58d3      	ldr	r3, [r2, r3]
    4e34:	699b      	ldr	r3, [r3, #24]
    4e36:	2b00      	cmp	r3, #0
    4e38:	d0e6      	beq.n	4e08 <log_init+0x48>
				backend->api->init(backend);
    4e3a:	4628      	mov	r0, r5
    4e3c:	4798      	blx	r3
    4e3e:	e7e3      	b.n	4e08 <log_init+0x48>
}
    4e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e42:	bf00      	nop
    4e44:	00010f48 	.word	0x00010f48
    4e48:	00010f28 	.word	0x00010f28
    4e4c:	2000c9bc 	.word	0x2000c9bc
    4e50:	00011984 	.word	0x00011984
    4e54:	000119cc 	.word	0x000119cc
    4e58:	00011514 	.word	0x00011514

00004e5c <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    4e5c:	b138      	cbz	r0, 4e6e <log_set_timestamp_func+0x12>
{
    4e5e:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    4e60:	4a04      	ldr	r2, [pc, #16]	; (4e74 <log_set_timestamp_func+0x18>)
    4e62:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    4e64:	4608      	mov	r0, r1
    4e66:	f000 fac3 	bl	53f0 <log_output_timestamp_freq_set>
	return 0;
    4e6a:	2000      	movs	r0, #0
}
    4e6c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    4e6e:	f06f 0015 	mvn.w	r0, #21
}
    4e72:	4770      	bx	lr
    4e74:	20004018 	.word	0x20004018

00004e78 <log_core_init>:
{
    4e78:	b508      	push	{r3, lr}
	panic_mode = false;
    4e7a:	2300      	movs	r3, #0
    4e7c:	4a04      	ldr	r2, [pc, #16]	; (4e90 <log_core_init+0x18>)
    4e7e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    4e80:	4a04      	ldr	r2, [pc, #16]	; (4e94 <log_core_init+0x1c>)
    4e82:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    4e84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    4e88:	4803      	ldr	r0, [pc, #12]	; (4e98 <log_core_init+0x20>)
    4e8a:	f7ff ffe7 	bl	4e5c <log_set_timestamp_func>
}
    4e8e:	bd08      	pop	{r3, pc}
    4e90:	2000d720 	.word	0x2000d720
    4e94:	2000c9b8 	.word	0x2000c9b8
    4e98:	0000f14b 	.word	0x0000f14b

00004e9c <z_impl_log_panic>:
	if (panic_mode) {
    4e9c:	4b20      	ldr	r3, [pc, #128]	; (4f20 <z_impl_log_panic+0x84>)
    4e9e:	781b      	ldrb	r3, [r3, #0]
    4ea0:	b103      	cbz	r3, 4ea4 <z_impl_log_panic+0x8>
    4ea2:	4770      	bx	lr
{
    4ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
    4ea8:	f7ff ff8a 	bl	4dc0 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    4eac:	2400      	movs	r4, #0
    4eae:	e013      	b.n	4ed8 <z_impl_log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
    4eb0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4f24 <z_impl_log_panic+0x88>
    4eb4:	f44f 7399 	mov.w	r3, #306	; 0x132
    4eb8:	4642      	mov	r2, r8
    4eba:	491b      	ldr	r1, [pc, #108]	; (4f28 <z_impl_log_panic+0x8c>)
    4ebc:	481b      	ldr	r0, [pc, #108]	; (4f2c <z_impl_log_panic+0x90>)
    4ebe:	f00a f931 	bl	f124 <assert_print>
    4ec2:	f44f 7199 	mov.w	r1, #306	; 0x132
    4ec6:	4640      	mov	r0, r8
    4ec8:	f00a f925 	bl	f116 <assert_post_action>
    4ecc:	e00f      	b.n	4eee <z_impl_log_panic+0x52>
	backend->api->panic(backend);
    4ece:	597b      	ldr	r3, [r7, r5]
    4ed0:	695b      	ldr	r3, [r3, #20]
    4ed2:	4630      	mov	r0, r6
    4ed4:	4798      	blx	r3
    4ed6:	3401      	adds	r4, #1
    4ed8:	4b15      	ldr	r3, [pc, #84]	; (4f30 <z_impl_log_panic+0x94>)
    4eda:	4a16      	ldr	r2, [pc, #88]	; (4f34 <z_impl_log_panic+0x98>)
    4edc:	1a9b      	subs	r3, r3, r2
    4ede:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    4ee2:	da17      	bge.n	4f14 <z_impl_log_panic+0x78>
	return &__log_backends_start[idx];
    4ee4:	0127      	lsls	r7, r4, #4
    4ee6:	4d13      	ldr	r5, [pc, #76]	; (4f34 <z_impl_log_panic+0x98>)
	__ASSERT_NO_MSG(backend != NULL);
    4ee8:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    4eec:	d0e0      	beq.n	4eb0 <z_impl_log_panic+0x14>
	return backend->cb->active;
    4eee:	6873      	ldr	r3, [r6, #4]
    4ef0:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    4ef2:	2b00      	cmp	r3, #0
    4ef4:	d0ef      	beq.n	4ed6 <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
    4ef6:	2e00      	cmp	r6, #0
    4ef8:	d1e9      	bne.n	4ece <z_impl_log_panic+0x32>
    4efa:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4f24 <z_impl_log_panic+0x88>
    4efe:	23d7      	movs	r3, #215	; 0xd7
    4f00:	4642      	mov	r2, r8
    4f02:	4909      	ldr	r1, [pc, #36]	; (4f28 <z_impl_log_panic+0x8c>)
    4f04:	4809      	ldr	r0, [pc, #36]	; (4f2c <z_impl_log_panic+0x90>)
    4f06:	f00a f90d 	bl	f124 <assert_print>
    4f0a:	21d7      	movs	r1, #215	; 0xd7
    4f0c:	4640      	mov	r0, r8
    4f0e:	f00a f902 	bl	f116 <assert_post_action>
    4f12:	e7dc      	b.n	4ece <z_impl_log_panic+0x32>
	panic_mode = true;
    4f14:	4b02      	ldr	r3, [pc, #8]	; (4f20 <z_impl_log_panic+0x84>)
    4f16:	2201      	movs	r2, #1
    4f18:	701a      	strb	r2, [r3, #0]
}
    4f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f1e:	bf00      	nop
    4f20:	2000d720 	.word	0x2000d720
    4f24:	00011920 	.word	0x00011920
    4f28:	00011958 	.word	0x00011958
    4f2c:	00011514 	.word	0x00011514
    4f30:	00010f48 	.word	0x00010f48
    4f34:	00010f28 	.word	0x00010f28

00004f38 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    4f38:	4b01      	ldr	r3, [pc, #4]	; (4f40 <z_log_notify_backend_enabled+0x8>)
    4f3a:	2201      	movs	r2, #1
    4f3c:	701a      	strb	r2, [r3, #0]
}
    4f3e:	4770      	bx	lr
    4f40:	2000d71f 	.word	0x2000d71f

00004f44 <z_log_dropped>:
    4f44:	4b0d      	ldr	r3, [pc, #52]	; (4f7c <z_log_dropped+0x38>)
    4f46:	f3bf 8f5b 	dmb	ish
    4f4a:	e853 2f00 	ldrex	r2, [r3]
    4f4e:	3201      	adds	r2, #1
    4f50:	e843 2100 	strex	r1, r2, [r3]
    4f54:	2900      	cmp	r1, #0
    4f56:	d1f8      	bne.n	4f4a <z_log_dropped+0x6>
    4f58:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    4f5c:	b900      	cbnz	r0, 4f60 <z_log_dropped+0x1c>
		atomic_dec(&buffered_cnt);
	}
}
    4f5e:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4f60:	4b07      	ldr	r3, [pc, #28]	; (4f80 <z_log_dropped+0x3c>)
    4f62:	f3bf 8f5b 	dmb	ish
    4f66:	e853 2f00 	ldrex	r2, [r3]
    4f6a:	3a01      	subs	r2, #1
    4f6c:	e843 2100 	strex	r1, r2, [r3]
    4f70:	2900      	cmp	r1, #0
    4f72:	d1f8      	bne.n	4f66 <z_log_dropped+0x22>
    4f74:	f3bf 8f5b 	dmb	ish
    4f78:	e7f1      	b.n	4f5e <z_log_dropped+0x1a>
    4f7a:	bf00      	nop
    4f7c:	2000c9b8 	.word	0x2000c9b8
    4f80:	2000c9b4 	.word	0x2000c9b4

00004f84 <z_log_msg2_commit>:
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
    4f84:	b510      	push	{r4, lr}
    4f86:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    4f88:	4b04      	ldr	r3, [pc, #16]	; (4f9c <z_log_msg2_commit+0x18>)
    4f8a:	681b      	ldr	r3, [r3, #0]
    4f8c:	4798      	blx	r3
    4f8e:	60a0      	str	r0, [r4, #8]
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    4f90:	2100      	movs	r1, #0
    4f92:	4620      	mov	r0, r4
    4f94:	f7ff feae 	bl	4cf4 <msg_process>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    4f98:	bd10      	pop	{r4, pc}
    4f9a:	bf00      	nop
    4f9c:	20004018 	.word	0x20004018

00004fa0 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    4fa0:	4b05      	ldr	r3, [pc, #20]	; (4fb8 <log_source_name_get+0x18>)
    4fa2:	4a06      	ldr	r2, [pc, #24]	; (4fbc <log_source_name_get+0x1c>)
    4fa4:	1a9b      	subs	r3, r3, r2
    4fa6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    4faa:	d202      	bcs.n	4fb2 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    4fac:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    4fb0:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    4fb2:	2000      	movs	r0, #0
}
    4fb4:	4770      	bx	lr
    4fb6:	bf00      	nop
    4fb8:	00010f28 	.word	0x00010f28
    4fbc:	00010ee0 	.word	0x00010ee0

00004fc0 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    4fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fc2:	4604      	mov	r4, r0
    4fc4:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    4fc6:	4d1e      	ldr	r5, [pc, #120]	; (5040 <log_backend_enable+0x80>)
    4fc8:	1b45      	subs	r5, r0, r5
    4fca:	112d      	asrs	r5, r5, #4
    4fcc:	3501      	adds	r5, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    4fce:	6803      	ldr	r3, [r0, #0]
    4fd0:	681b      	ldr	r3, [r3, #0]
    4fd2:	b163      	cbz	r3, 4fee <log_backend_enable+0x2e>
	}

	log_backend_id_set(backend, id);
    4fd4:	b2ed      	uxtb	r5, r5
	__ASSERT_NO_MSG(backend != NULL);
    4fd6:	b1cc      	cbz	r4, 500c <log_backend_enable+0x4c>
	backend->cb->id = id;
    4fd8:	6863      	ldr	r3, [r4, #4]
    4fda:	711d      	strb	r5, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    4fdc:	b314      	cbz	r4, 5024 <log_backend_enable+0x64>
	backend->cb->ctx = ctx;
    4fde:	6863      	ldr	r3, [r4, #4]
    4fe0:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    4fe2:	6863      	ldr	r3, [r4, #4]
    4fe4:	2201      	movs	r2, #1
    4fe6:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    4fe8:	f7ff ffa6 	bl	4f38 <z_log_notify_backend_enabled>
}
    4fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    4fee:	4f15      	ldr	r7, [pc, #84]	; (5044 <log_backend_enable+0x84>)
    4ff0:	23bb      	movs	r3, #187	; 0xbb
    4ff2:	463a      	mov	r2, r7
    4ff4:	4914      	ldr	r1, [pc, #80]	; (5048 <log_backend_enable+0x88>)
    4ff6:	4815      	ldr	r0, [pc, #84]	; (504c <log_backend_enable+0x8c>)
    4ff8:	f00a f894 	bl	f124 <assert_print>
    4ffc:	4814      	ldr	r0, [pc, #80]	; (5050 <log_backend_enable+0x90>)
    4ffe:	f00a f891 	bl	f124 <assert_print>
    5002:	21bb      	movs	r1, #187	; 0xbb
    5004:	4638      	mov	r0, r7
    5006:	f00a f886 	bl	f116 <assert_post_action>
    500a:	e7e3      	b.n	4fd4 <log_backend_enable+0x14>
	__ASSERT_NO_MSG(backend != NULL);
    500c:	4f11      	ldr	r7, [pc, #68]	; (5054 <log_backend_enable+0x94>)
    500e:	23e6      	movs	r3, #230	; 0xe6
    5010:	463a      	mov	r2, r7
    5012:	4911      	ldr	r1, [pc, #68]	; (5058 <log_backend_enable+0x98>)
    5014:	480d      	ldr	r0, [pc, #52]	; (504c <log_backend_enable+0x8c>)
    5016:	f00a f885 	bl	f124 <assert_print>
    501a:	21e6      	movs	r1, #230	; 0xe6
    501c:	4638      	mov	r0, r7
    501e:	f00a f87a 	bl	f116 <assert_post_action>
    5022:	e7d9      	b.n	4fd8 <log_backend_enable+0x18>
	__ASSERT_NO_MSG(backend != NULL);
    5024:	4d0b      	ldr	r5, [pc, #44]	; (5054 <log_backend_enable+0x94>)
    5026:	f240 1317 	movw	r3, #279	; 0x117
    502a:	462a      	mov	r2, r5
    502c:	490a      	ldr	r1, [pc, #40]	; (5058 <log_backend_enable+0x98>)
    502e:	4807      	ldr	r0, [pc, #28]	; (504c <log_backend_enable+0x8c>)
    5030:	f00a f878 	bl	f124 <assert_print>
    5034:	f240 1117 	movw	r1, #279	; 0x117
    5038:	4628      	mov	r0, r5
    503a:	f00a f86c 	bl	f116 <assert_post_action>
    503e:	e7ce      	b.n	4fde <log_backend_enable+0x1e>
    5040:	00010f28 	.word	0x00010f28
    5044:	00011a00 	.word	0x00011a00
    5048:	00011a5c 	.word	0x00011a5c
    504c:	00011514 	.word	0x00011514
    5050:	00011a74 	.word	0x00011a74
    5054:	00011920 	.word	0x00011920
    5058:	00011958 	.word	0x00011958

0000505c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    505c:	b40e      	push	{r1, r2, r3}
    505e:	b500      	push	{lr}
    5060:	b082      	sub	sp, #8
    5062:	4601      	mov	r1, r0
    5064:	ab03      	add	r3, sp, #12
    5066:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    506a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    506c:	4803      	ldr	r0, [pc, #12]	; (507c <print_formatted+0x20>)
    506e:	f7ff fb45 	bl	46fc <cbvprintf>
	va_end(args);

	return length;
}
    5072:	b002      	add	sp, #8
    5074:	f85d eb04 	ldr.w	lr, [sp], #4
    5078:	b003      	add	sp, #12
    507a:	4770      	bx	lr
    507c:	0000f17f 	.word	0x0000f17f

00005080 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    5080:	b530      	push	{r4, r5, lr}
    5082:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    5084:	f011 0f44 	tst.w	r1, #68	; 0x44
    5088:	d005      	beq.n	5096 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    508a:	4b1a      	ldr	r3, [pc, #104]	; (50f4 <timestamp_print+0x74>)
    508c:	681c      	ldr	r4, [r3, #0]
    508e:	b934      	cbnz	r4, 509e <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    5090:	2000      	movs	r0, #0
	}

	return length;
}
    5092:	b005      	add	sp, #20
    5094:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    5096:	4918      	ldr	r1, [pc, #96]	; (50f8 <timestamp_print+0x78>)
    5098:	f7ff ffe0 	bl	505c <print_formatted>
    509c:	e7f9      	b.n	5092 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    509e:	4b17      	ldr	r3, [pc, #92]	; (50fc <timestamp_print+0x7c>)
    50a0:	6819      	ldr	r1, [r3, #0]
    50a2:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    50a6:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    50aa:	4a15      	ldr	r2, [pc, #84]	; (5100 <timestamp_print+0x80>)
    50ac:	fba2 320c 	umull	r3, r2, r2, ip
    50b0:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    50b2:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    50b6:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    50ba:	4b12      	ldr	r3, [pc, #72]	; (5104 <timestamp_print+0x84>)
    50bc:	fba3 530e 	umull	r5, r3, r3, lr
    50c0:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    50c2:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    50c6:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    50ca:	fb0c f101 	mul.w	r1, ip, r1
    50ce:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    50d2:	fb05 1114 	mls	r1, r5, r4, r1
    50d6:	fb0c f101 	mul.w	r1, ip, r1
    50da:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    50de:	9102      	str	r1, [sp, #8]
    50e0:	9501      	str	r5, [sp, #4]
    50e2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    50e6:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    50ea:	9100      	str	r1, [sp, #0]
    50ec:	4906      	ldr	r1, [pc, #24]	; (5108 <timestamp_print+0x88>)
    50ee:	f7ff ffb5 	bl	505c <print_formatted>
    50f2:	e7ce      	b.n	5092 <timestamp_print+0x12>
    50f4:	2000c9c0 	.word	0x2000c9c0
    50f8:	00011a98 	.word	0x00011a98
    50fc:	2000c9c4 	.word	0x2000c9c4
    5100:	91a2b3c5 	.word	0x91a2b3c5
    5104:	88888889 	.word	0x88888889
    5108:	00011aa4 	.word	0x00011aa4

0000510c <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    510c:	b161      	cbz	r1, 5128 <color_print+0x1c>
{
    510e:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    5110:	b12a      	cbz	r2, 511e <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    5112:	4a06      	ldr	r2, [pc, #24]	; (512c <color_print+0x20>)
    5114:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    5118:	b912      	cbnz	r2, 5120 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    511a:	4a05      	ldr	r2, [pc, #20]	; (5130 <color_print+0x24>)
    511c:	e000      	b.n	5120 <color_print+0x14>
    511e:	4a04      	ldr	r2, [pc, #16]	; (5130 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    5120:	4904      	ldr	r1, [pc, #16]	; (5134 <color_print+0x28>)
    5122:	f7ff ff9b 	bl	505c <print_formatted>
	}
}
    5126:	bd08      	pop	{r3, pc}
    5128:	4770      	bx	lr
    512a:	bf00      	nop
    512c:	00011b64 	.word	0x00011b64
    5130:	00011ac0 	.word	0x00011ac0
    5134:	00011ac8 	.word	0x00011ac8

00005138 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5138:	f011 0f10 	tst.w	r1, #16
    513c:	d10b      	bne.n	5156 <newline_print+0x1e>
{
    513e:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5140:	f011 0f20 	tst.w	r1, #32
    5144:	d003      	beq.n	514e <newline_print+0x16>
		print_formatted(ctx, "\n");
    5146:	4904      	ldr	r1, [pc, #16]	; (5158 <newline_print+0x20>)
    5148:	f7ff ff88 	bl	505c <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    514c:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    514e:	4903      	ldr	r1, [pc, #12]	; (515c <newline_print+0x24>)
    5150:	f7ff ff84 	bl	505c <print_formatted>
    5154:	e7fa      	b.n	514c <newline_print+0x14>
    5156:	4770      	bx	lr
    5158:	00011190 	.word	0x00011190
    515c:	000132c4 	.word	0x000132c4

00005160 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    5160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5164:	4605      	mov	r5, r0
    5166:	460f      	mov	r7, r1
    5168:	4616      	mov	r6, r2
    516a:	4698      	mov	r8, r3
	newline_print(output, flags);
    516c:	9906      	ldr	r1, [sp, #24]
    516e:	f7ff ffe3 	bl	5138 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    5172:	2400      	movs	r4, #0
    5174:	4544      	cmp	r4, r8
    5176:	da05      	bge.n	5184 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    5178:	4924      	ldr	r1, [pc, #144]	; (520c <hexdump_line_print+0xac>)
    517a:	4628      	mov	r0, r5
    517c:	f7ff ff6e 	bl	505c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    5180:	3401      	adds	r4, #1
    5182:	e7f7      	b.n	5174 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5184:	2400      	movs	r4, #0
    5186:	e009      	b.n	519c <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    5188:	4920      	ldr	r1, [pc, #128]	; (520c <hexdump_line_print+0xac>)
    518a:	4628      	mov	r0, r5
    518c:	f7ff ff66 	bl	505c <print_formatted>
    5190:	e00b      	b.n	51aa <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    5192:	491f      	ldr	r1, [pc, #124]	; (5210 <hexdump_line_print+0xb0>)
    5194:	4628      	mov	r0, r5
    5196:	f7ff ff61 	bl	505c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    519a:	3401      	adds	r4, #1
    519c:	2c0f      	cmp	r4, #15
    519e:	dc0c      	bgt.n	51ba <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    51a0:	2c00      	cmp	r4, #0
    51a2:	dd02      	ble.n	51aa <hexdump_line_print+0x4a>
    51a4:	f014 0f07 	tst.w	r4, #7
    51a8:	d0ee      	beq.n	5188 <hexdump_line_print+0x28>
		if (i < length) {
    51aa:	42b4      	cmp	r4, r6
    51ac:	d2f1      	bcs.n	5192 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    51ae:	5d3a      	ldrb	r2, [r7, r4]
    51b0:	4918      	ldr	r1, [pc, #96]	; (5214 <hexdump_line_print+0xb4>)
    51b2:	4628      	mov	r0, r5
    51b4:	f7ff ff52 	bl	505c <print_formatted>
    51b8:	e7ef      	b.n	519a <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    51ba:	4917      	ldr	r1, [pc, #92]	; (5218 <hexdump_line_print+0xb8>)
    51bc:	4628      	mov	r0, r5
    51be:	f7ff ff4d 	bl	505c <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    51c2:	2400      	movs	r4, #0
    51c4:	e009      	b.n	51da <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    51c6:	4911      	ldr	r1, [pc, #68]	; (520c <hexdump_line_print+0xac>)
    51c8:	4628      	mov	r0, r5
    51ca:	f7ff ff47 	bl	505c <print_formatted>
    51ce:	e00b      	b.n	51e8 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    51d0:	4912      	ldr	r1, [pc, #72]	; (521c <hexdump_line_print+0xbc>)
    51d2:	4628      	mov	r0, r5
    51d4:	f7ff ff42 	bl	505c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    51d8:	3401      	adds	r4, #1
    51da:	2c0f      	cmp	r4, #15
    51dc:	dc13      	bgt.n	5206 <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
    51de:	2c00      	cmp	r4, #0
    51e0:	dd02      	ble.n	51e8 <hexdump_line_print+0x88>
    51e2:	f014 0f07 	tst.w	r4, #7
    51e6:	d0ee      	beq.n	51c6 <hexdump_line_print+0x66>
		if (i < length) {
    51e8:	42b4      	cmp	r4, r6
    51ea:	d207      	bcs.n	51fc <hexdump_line_print+0x9c>
			char c = (char)data[i];
    51ec:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
    51ee:	4b0c      	ldr	r3, [pc, #48]	; (5220 <hexdump_line_print+0xc0>)
    51f0:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
    51f2:	f013 0f97 	tst.w	r3, #151	; 0x97
    51f6:	d1eb      	bne.n	51d0 <hexdump_line_print+0x70>
    51f8:	222e      	movs	r2, #46	; 0x2e
    51fa:	e7e9      	b.n	51d0 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
    51fc:	4903      	ldr	r1, [pc, #12]	; (520c <hexdump_line_print+0xac>)
    51fe:	4628      	mov	r0, r5
    5200:	f7ff ff2c 	bl	505c <print_formatted>
    5204:	e7e8      	b.n	51d8 <hexdump_line_print+0x78>
		}
	}
}
    5206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    520a:	bf00      	nop
    520c:	00011af0 	.word	0x00011af0
    5210:	00011ad4 	.word	0x00011ad4
    5214:	00011acc 	.word	0x00011acc
    5218:	00011ad8 	.word	0x00011ad8
    521c:	00011adc 	.word	0x00011adc
    5220:	000132e9 	.word	0x000132e9

00005224 <ids_print>:
{
    5224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5228:	4680      	mov	r8, r0
    522a:	4616      	mov	r6, r2
    522c:	461d      	mov	r5, r3
    522e:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    5232:	b959      	cbnz	r1, 524c <ids_print+0x28>
	int total = 0;
    5234:	2400      	movs	r4, #0
	if (source_id >= 0) {
    5236:	2f00      	cmp	r7, #0
    5238:	db1c      	blt.n	5274 <ids_print+0x50>
		total += print_formatted(output,
    523a:	b186      	cbz	r6, 525e <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    523c:	2301      	movs	r3, #1
    523e:	9a07      	ldr	r2, [sp, #28]
    5240:	4093      	lsls	r3, r2
				(func_on &&
    5242:	f013 0f10 	tst.w	r3, #16
    5246:	d118      	bne.n	527a <ids_print+0x56>
		total += print_formatted(output,
    5248:	4e0d      	ldr	r6, [pc, #52]	; (5280 <ids_print+0x5c>)
    524a:	e009      	b.n	5260 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    524c:	4b0d      	ldr	r3, [pc, #52]	; (5284 <ids_print+0x60>)
    524e:	9a07      	ldr	r2, [sp, #28]
    5250:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5254:	490c      	ldr	r1, [pc, #48]	; (5288 <ids_print+0x64>)
    5256:	f7ff ff01 	bl	505c <print_formatted>
    525a:	4604      	mov	r4, r0
    525c:	e7eb      	b.n	5236 <ids_print+0x12>
		total += print_formatted(output,
    525e:	4e08      	ldr	r6, [pc, #32]	; (5280 <ids_print+0x5c>)
    5260:	4639      	mov	r1, r7
    5262:	4628      	mov	r0, r5
    5264:	f7ff fe9c 	bl	4fa0 <log_source_name_get>
    5268:	4602      	mov	r2, r0
    526a:	4631      	mov	r1, r6
    526c:	4640      	mov	r0, r8
    526e:	f7ff fef5 	bl	505c <print_formatted>
    5272:	4404      	add	r4, r0
}
    5274:	4620      	mov	r0, r4
    5276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    527a:	4e04      	ldr	r6, [pc, #16]	; (528c <ids_print+0x68>)
    527c:	e7f0      	b.n	5260 <ids_print+0x3c>
    527e:	bf00      	nop
    5280:	00011ae0 	.word	0x00011ae0
    5284:	00011b78 	.word	0x00011b78
    5288:	00011aec 	.word	0x00011aec
    528c:	00011ae8 	.word	0x00011ae8

00005290 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    5290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5294:	b085      	sub	sp, #20
    5296:	4605      	mov	r5, r0
    5298:	460c      	mov	r4, r1
    529a:	4616      	mov	r6, r2
    529c:	9303      	str	r3, [sp, #12]
    529e:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    52a2:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    52a6:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    52aa:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    52ae:	f009 ff64 	bl	f17a <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    52b2:	b1e8      	cbz	r0, 52f0 <prefix_print+0x60>
    52b4:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    52b6:	4913      	ldr	r1, [pc, #76]	; (5304 <prefix_print+0x74>)
    52b8:	4628      	mov	r0, r5
    52ba:	f7ff fecf 	bl	505c <print_formatted>
    52be:	4607      	mov	r7, r0
	}

	if (stamp) {
    52c0:	f1bb 0f00 	cmp.w	fp, #0
    52c4:	d116      	bne.n	52f4 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    52c6:	4642      	mov	r2, r8
    52c8:	4651      	mov	r1, sl
    52ca:	4628      	mov	r0, r5
    52cc:	f009 ff81 	bl	f1d2 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    52d0:	f8cd 8004 	str.w	r8, [sp, #4]
    52d4:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    52d8:	9300      	str	r3, [sp, #0]
    52da:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    52de:	4632      	mov	r2, r6
    52e0:	4649      	mov	r1, r9
    52e2:	4628      	mov	r0, r5
    52e4:	f7ff ff9e 	bl	5224 <ids_print>
			domain_id, source_id, level);


	return length;
}
    52e8:	4438      	add	r0, r7
    52ea:	b005      	add	sp, #20
    52ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    52f0:	2700      	movs	r7, #0
    52f2:	e7e5      	b.n	52c0 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    52f4:	9a03      	ldr	r2, [sp, #12]
    52f6:	4621      	mov	r1, r4
    52f8:	4628      	mov	r0, r5
    52fa:	f7ff fec1 	bl	5080 <timestamp_print>
    52fe:	4407      	add	r7, r0
    5300:	e7e1      	b.n	52c6 <prefix_print+0x36>
    5302:	bf00      	nop
    5304:	00011af4 	.word	0x00011af4

00005308 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    5308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    530c:	b084      	sub	sp, #16
    530e:	4606      	mov	r6, r0
    5310:	460c      	mov	r4, r1
    5312:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    5314:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
    5316:	880a      	ldrh	r2, [r1, #0]
    5318:	f3c2 1882 	ubfx	r8, r2, #6, #3
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    531c:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
    5320:	d037      	beq.n	5392 <log_output_msg2_process+0x8a>
	return msg->hdr.source;
    5322:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
    5324:	7809      	ldrb	r1, [r1, #0]
    5326:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    532a:	b37a      	cbz	r2, 538c <log_output_msg2_process+0x84>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    532c:	4829      	ldr	r0, [pc, #164]	; (53d4 <log_output_msg2_process+0xcc>)
    532e:	1a12      	subs	r2, r2, r0
    5330:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    5334:	9202      	str	r2, [sp, #8]
    5336:	9101      	str	r1, [sp, #4]
    5338:	f8cd 8000 	str.w	r8, [sp]
    533c:	2200      	movs	r2, #0
    533e:	4639      	mov	r1, r7
    5340:	4630      	mov	r0, r6
    5342:	f7ff ffa5 	bl	5290 <prefix_print>
    5346:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    5348:	4625      	mov	r5, r4
    534a:	f855 3b10 	ldr.w	r3, [r5], #16
    534e:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    5352:	b153      	cbz	r3, 536a <log_output_msg2_process+0x62>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    5354:	f1b8 0f00 	cmp.w	r8, #0
    5358:	d11e      	bne.n	5398 <log_output_msg2_process+0x90>
    535a:	481f      	ldr	r0, [pc, #124]	; (53d8 <log_output_msg2_process+0xd0>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    535c:	462b      	mov	r3, r5
    535e:	4632      	mov	r2, r6
    5360:	491e      	ldr	r1, [pc, #120]	; (53dc <log_output_msg2_process+0xd4>)
    5362:	f009 fd8a 	bl	ee7a <cbpprintf_external>
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    5366:	2800      	cmp	r0, #0
    5368:	db18      	blt.n	539c <log_output_msg2_process+0x94>
	*len = msg->hdr.desc.data_len;
    536a:	8862      	ldrh	r2, [r4, #2]
    536c:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    5370:	6821      	ldr	r1, [r4, #0]
    5372:	f3c1 2149 	ubfx	r1, r1, #9, #10
    5376:	4429      	add	r1, r5
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    5378:	b9fa      	cbnz	r2, 53ba <log_output_msg2_process+0xb2>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    537a:	f1b8 0f00 	cmp.w	r8, #0
    537e:	d122      	bne.n	53c6 <log_output_msg2_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    5380:	4630      	mov	r0, r6
    5382:	f009 ff59 	bl	f238 <log_output_flush>
}
    5386:	b004      	add	sp, #16
    5388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		int16_t source_id = source ?
    538c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5390:	e7d0      	b.n	5334 <log_output_msg2_process+0x2c>
		prefix_offset = 0;
    5392:	f04f 0900 	mov.w	r9, #0
    5396:	e7d7      	b.n	5348 <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    5398:	4811      	ldr	r0, [pc, #68]	; (53e0 <log_output_msg2_process+0xd8>)
    539a:	e7df      	b.n	535c <log_output_msg2_process+0x54>
		__ASSERT_NO_MSG(err >= 0);
    539c:	f8df a044 	ldr.w	sl, [pc, #68]	; 53e4 <log_output_msg2_process+0xdc>
    53a0:	f240 23b7 	movw	r3, #695	; 0x2b7
    53a4:	4652      	mov	r2, sl
    53a6:	4910      	ldr	r1, [pc, #64]	; (53e8 <log_output_msg2_process+0xe0>)
    53a8:	4810      	ldr	r0, [pc, #64]	; (53ec <log_output_msg2_process+0xe4>)
    53aa:	f009 febb 	bl	f124 <assert_print>
    53ae:	f240 21b7 	movw	r1, #695	; 0x2b7
    53b2:	4650      	mov	r0, sl
    53b4:	f009 feaf 	bl	f116 <assert_post_action>
    53b8:	e7d7      	b.n	536a <log_output_msg2_process+0x62>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
    53ba:	9700      	str	r7, [sp, #0]
    53bc:	464b      	mov	r3, r9
    53be:	4630      	mov	r0, r6
    53c0:	f009 ff1f 	bl	f202 <log_msg2_hexdump>
    53c4:	e7d9      	b.n	537a <log_output_msg2_process+0x72>
		postfix_print(output, flags, level);
    53c6:	4642      	mov	r2, r8
    53c8:	4639      	mov	r1, r7
    53ca:	4630      	mov	r0, r6
    53cc:	f009 ff0d 	bl	f1ea <postfix_print>
    53d0:	e7d6      	b.n	5380 <log_output_msg2_process+0x78>
    53d2:	bf00      	nop
    53d4:	00010ee0 	.word	0x00010ee0
    53d8:	0000f19d 	.word	0x0000f19d
    53dc:	000046fd 	.word	0x000046fd
    53e0:	0000f17f 	.word	0x0000f17f
    53e4:	00011af8 	.word	0x00011af8
    53e8:	00011b38 	.word	0x00011b38
    53ec:	00011514 	.word	0x00011514

000053f0 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    53f0:	4b07      	ldr	r3, [pc, #28]	; (5410 <log_output_timestamp_freq_set+0x20>)
    53f2:	2201      	movs	r2, #1
    53f4:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    53f6:	e004      	b.n	5402 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    53f8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    53fa:	4a05      	ldr	r2, [pc, #20]	; (5410 <log_output_timestamp_freq_set+0x20>)
    53fc:	6813      	ldr	r3, [r2, #0]
    53fe:	005b      	lsls	r3, r3, #1
    5400:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    5402:	4b04      	ldr	r3, [pc, #16]	; (5414 <log_output_timestamp_freq_set+0x24>)
    5404:	4298      	cmp	r0, r3
    5406:	d8f7      	bhi.n	53f8 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    5408:	4b03      	ldr	r3, [pc, #12]	; (5418 <log_output_timestamp_freq_set+0x28>)
    540a:	6018      	str	r0, [r3, #0]
}
    540c:	4770      	bx	lr
    540e:	bf00      	nop
    5410:	2000c9c4 	.word	0x2000c9c4
    5414:	000f4240 	.word	0x000f4240
    5418:	2000c9c0 	.word	0x2000c9c0

0000541c <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    541c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5420:	b087      	sub	sp, #28
    5422:	af02      	add	r7, sp, #8
    5424:	4682      	mov	sl, r0
    5426:	6079      	str	r1, [r7, #4]
    5428:	4691      	mov	r9, r2
    542a:	4698      	mov	r8, r3
    542c:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    542e:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
	int plen;

	if (fmt) {
    5432:	f1bb 0f00 	cmp.w	fp, #0
    5436:	d016      	beq.n	5466 <z_impl_z_log_msg2_runtime_vcreate+0x4a>
		va_list ap2;

		va_copy(ap2, ap);
    5438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    543a:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    543c:	9300      	str	r3, [sp, #0]
    543e:	465b      	mov	r3, fp
    5440:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5442:	2110      	movs	r1, #16
    5444:	2000      	movs	r0, #0
    5446:	f7fe f871 	bl	352c <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    544a:	1e05      	subs	r5, r0, #0
    544c:	da0c      	bge.n	5468 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
    544e:	4c26      	ldr	r4, [pc, #152]	; (54e8 <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    5450:	2367      	movs	r3, #103	; 0x67
    5452:	4622      	mov	r2, r4
    5454:	4925      	ldr	r1, [pc, #148]	; (54ec <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    5456:	4826      	ldr	r0, [pc, #152]	; (54f0 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    5458:	f009 fe64 	bl	f124 <assert_print>
    545c:	2167      	movs	r1, #103	; 0x67
    545e:	4620      	mov	r0, r4
    5460:	f009 fe59 	bl	f116 <assert_post_action>
		va_end(ap2);
    5464:	e000      	b.n	5468 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
	} else {
		plen = 0;
    5466:	2500      	movs	r5, #0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    5468:	4629      	mov	r1, r5
    546a:	19ab      	adds	r3, r5, r6
    546c:	3317      	adds	r3, #23
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    546e:	2400      	movs	r4, #0
    5470:	f36f 0400 	bfc	r4, #0, #1
    5474:	f36f 0441 	bfc	r4, #1, #1
    5478:	f36f 0482 	bfc	r4, #2, #1
    547c:	f36a 04c5 	bfi	r4, sl, #3, #3
    5480:	f369 1488 	bfi	r4, r9, #6, #3
    5484:	f365 2452 	bfi	r4, r5, #9, #10
    5488:	f366 44de 	bfi	r4, r6, #19, #12
    548c:	f36f 74df 	bfc	r4, #31, #1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    5490:	f023 0307 	bic.w	r3, r3, #7
    5494:	ebad 0d03 	sub.w	sp, sp, r3
    5498:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    549a:	466b      	mov	r3, sp
    549c:	f113 0018 	adds.w	r0, r3, #24
    54a0:	d00a      	beq.n	54b8 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    54a2:	f1bb 0f00 	cmp.w	fp, #0
    54a6:	d007      	beq.n	54b8 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    54a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    54aa:	9300      	str	r3, [sp, #0]
    54ac:	465b      	mov	r3, fp
    54ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    54b0:	f7fe f83c 	bl	352c <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    54b4:	2800      	cmp	r0, #0
    54b6:	db09      	blt.n	54cc <z_impl_z_log_msg2_runtime_vcreate+0xb0>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    54b8:	4643      	mov	r3, r8
    54ba:	4622      	mov	r2, r4
    54bc:	6879      	ldr	r1, [r7, #4]
    54be:	4628      	mov	r0, r5
    54c0:	f009 fec7 	bl	f252 <z_log_msg2_finalize>
	}
}
    54c4:	3714      	adds	r7, #20
    54c6:	46bd      	mov	sp, r7
    54c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(plen >= 0);
    54cc:	f8df 9018 	ldr.w	r9, [pc, #24]	; 54e8 <z_impl_z_log_msg2_runtime_vcreate+0xcc>
    54d0:	2381      	movs	r3, #129	; 0x81
    54d2:	464a      	mov	r2, r9
    54d4:	4905      	ldr	r1, [pc, #20]	; (54ec <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    54d6:	4806      	ldr	r0, [pc, #24]	; (54f0 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    54d8:	f009 fe24 	bl	f124 <assert_print>
    54dc:	2181      	movs	r1, #129	; 0x81
    54de:	4648      	mov	r0, r9
    54e0:	f009 fe19 	bl	f116 <assert_post_action>
    54e4:	e7e8      	b.n	54b8 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    54e6:	bf00      	nop
    54e8:	00011b8c 	.word	0x00011b8c
    54ec:	00011bc8 	.word	0x00011bc8
    54f0:	00011514 	.word	0x00011514

000054f4 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    54f4:	b570      	push	{r4, r5, r6, lr}
    54f6:	4606      	mov	r6, r0
    54f8:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    54fa:	2400      	movs	r4, #0
    54fc:	e006      	b.n	550c <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    54fe:	4b05      	ldr	r3, [pc, #20]	; (5514 <char_out+0x20>)
    5500:	6818      	ldr	r0, [r3, #0]
    5502:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
    5504:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    5506:	69db      	ldr	r3, [r3, #28]
    5508:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    550a:	3401      	adds	r4, #1
    550c:	42ac      	cmp	r4, r5
    550e:	d3f6      	bcc.n	54fe <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    5510:	4628      	mov	r0, r5
    5512:	bd70      	pop	{r4, r5, r6, pc}
    5514:	2000c9e0 	.word	0x2000c9e0

00005518 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    5518:	4b01      	ldr	r3, [pc, #4]	; (5520 <format_set+0x8>)
    551a:	6019      	str	r1, [r3, #0]
	return 0;
}
    551c:	2000      	movs	r0, #0
    551e:	4770      	bx	lr
    5520:	2000c9d0 	.word	0x2000c9d0

00005524 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
    5524:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    5526:	4809      	ldr	r0, [pc, #36]	; (554c <log_backend_uart_init+0x28>)
    5528:	4b09      	ldr	r3, [pc, #36]	; (5550 <log_backend_uart_init+0x2c>)
    552a:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    552c:	f00a ff3d 	bl	103aa <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    5530:	b100      	cbz	r0, 5534 <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    5532:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    5534:	4c07      	ldr	r4, [pc, #28]	; (5554 <log_backend_uart_init+0x30>)
    5536:	2379      	movs	r3, #121	; 0x79
    5538:	4622      	mov	r2, r4
    553a:	4907      	ldr	r1, [pc, #28]	; (5558 <log_backend_uart_init+0x34>)
    553c:	4807      	ldr	r0, [pc, #28]	; (555c <log_backend_uart_init+0x38>)
    553e:	f009 fdf1 	bl	f124 <assert_print>
    5542:	2179      	movs	r1, #121	; 0x79
    5544:	4620      	mov	r0, r4
    5546:	f009 fde6 	bl	f116 <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
    554a:	e7f2      	b.n	5532 <log_backend_uart_init+0xe>
    554c:	00010d48 	.word	0x00010d48
    5550:	2000c9e0 	.word	0x2000c9e0
    5554:	00011bd4 	.word	0x00011bd4
    5558:	00011c0c 	.word	0x00011c0c
    555c:	00011514 	.word	0x00011514

00005560 <panic>:

static void panic(struct log_backend const *const backend)
{
    5560:	b508      	push	{r3, lr}
	in_panic = true;
    5562:	4b03      	ldr	r3, [pc, #12]	; (5570 <panic+0x10>)
    5564:	2201      	movs	r2, #1
    5566:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    5568:	4802      	ldr	r0, [pc, #8]	; (5574 <panic+0x14>)
    556a:	f009 fe65 	bl	f238 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    556e:	bd08      	pop	{r3, pc}
    5570:	2000d721 	.word	0x2000d721
    5574:	00011c68 	.word	0x00011c68

00005578 <process>:
{
    5578:	b510      	push	{r4, lr}
    557a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    557c:	4b04      	ldr	r3, [pc, #16]	; (5590 <process+0x18>)
    557e:	6818      	ldr	r0, [r3, #0]
    5580:	f7ff fc18 	bl	4db4 <log_format_func_t_get>
    5584:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    5586:	220f      	movs	r2, #15
    5588:	4621      	mov	r1, r4
    558a:	4802      	ldr	r0, [pc, #8]	; (5594 <process+0x1c>)
    558c:	4798      	blx	r3
}
    558e:	bd10      	pop	{r4, pc}
    5590:	2000c9d0 	.word	0x2000c9d0
    5594:	00011c68 	.word	0x00011c68

00005598 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    5598:	4b03      	ldr	r3, [pc, #12]	; (55a8 <log_backend_rtt_init+0x10>)
    559a:	2201      	movs	r2, #1
    559c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    559e:	4b03      	ldr	r3, [pc, #12]	; (55ac <log_backend_rtt_init+0x14>)
    55a0:	4a03      	ldr	r2, [pc, #12]	; (55b0 <log_backend_rtt_init+0x18>)
    55a2:	601a      	str	r2, [r3, #0]
}
    55a4:	4770      	bx	lr
    55a6:	bf00      	nop
    55a8:	2000d722 	.word	0x2000d722
    55ac:	2000ca0c 	.word	0x2000ca0c
    55b0:	2000c9f4 	.word	0x2000c9f4

000055b4 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    55b4:	4b01      	ldr	r3, [pc, #4]	; (55bc <format_set+0x8>)
    55b6:	6019      	str	r1, [r3, #0]
	return 0;
}
    55b8:	2000      	movs	r0, #0
    55ba:	4770      	bx	lr
    55bc:	2000ca10 	.word	0x2000ca10

000055c0 <on_failed_write>:
{
    55c0:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    55c2:	b918      	cbnz	r0, 55cc <on_failed_write+0xc>
		host_present = false;
    55c4:	4b04      	ldr	r3, [pc, #16]	; (55d8 <on_failed_write+0x18>)
    55c6:	2200      	movs	r2, #0
    55c8:	701a      	strb	r2, [r3, #0]
}
    55ca:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    55cc:	f241 3088 	movw	r0, #5000	; 0x1388
    55d0:	f00a ffdb 	bl	1058a <z_impl_k_busy_wait>
    55d4:	e7f9      	b.n	55ca <on_failed_write+0xa>
    55d6:	bf00      	nop
    55d8:	2000d722 	.word	0x2000d722

000055dc <on_write>:
{
    55dc:	b538      	push	{r3, r4, r5, lr}
    55de:	4604      	mov	r4, r0
	host_present = true;
    55e0:	4b0a      	ldr	r3, [pc, #40]	; (560c <on_write+0x30>)
    55e2:	2201      	movs	r2, #1
    55e4:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    55e6:	4b0a      	ldr	r3, [pc, #40]	; (5610 <on_write+0x34>)
    55e8:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    55ea:	b92b      	cbnz	r3, 55f8 <on_write+0x1c>
}
    55ec:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    55ee:	1e65      	subs	r5, r4, #1
    55f0:	4620      	mov	r0, r4
    55f2:	f7ff ffe5 	bl	55c0 <on_failed_write>
    55f6:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    55f8:	2000      	movs	r0, #0
    55fa:	f004 fd5b 	bl	a0b4 <SEGGER_RTT_HasDataUp>
    55fe:	2800      	cmp	r0, #0
    5600:	d0f4      	beq.n	55ec <on_write+0x10>
    5602:	4b02      	ldr	r3, [pc, #8]	; (560c <on_write+0x30>)
    5604:	781b      	ldrb	r3, [r3, #0]
    5606:	2b00      	cmp	r3, #0
    5608:	d1f1      	bne.n	55ee <on_write+0x12>
    560a:	e7ef      	b.n	55ec <on_write+0x10>
    560c:	2000d722 	.word	0x2000d722
    5610:	2000d723 	.word	0x2000d723

00005614 <data_out_block_mode>:
{
    5614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5616:	4606      	mov	r6, r0
    5618:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    561a:	2704      	movs	r7, #4
    561c:	e006      	b.n	562c <data_out_block_mode+0x18>
			on_write(retry_cnt);
    561e:	4638      	mov	r0, r7
    5620:	f7ff ffdc 	bl	55dc <on_write>
	} while ((ret == 0) && host_present);
    5624:	b99c      	cbnz	r4, 564e <data_out_block_mode+0x3a>
    5626:	4b0d      	ldr	r3, [pc, #52]	; (565c <data_out_block_mode+0x48>)
    5628:	781b      	ldrb	r3, [r3, #0]
    562a:	b183      	cbz	r3, 564e <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    562c:	462a      	mov	r2, r5
    562e:	4631      	mov	r1, r6
    5630:	2000      	movs	r0, #0
    5632:	f004 fcdb 	bl	9fec <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    5636:	4604      	mov	r4, r0
    5638:	2800      	cmp	r0, #0
    563a:	d1f0      	bne.n	561e <data_out_block_mode+0xa>
		} else if (host_present) {
    563c:	4b07      	ldr	r3, [pc, #28]	; (565c <data_out_block_mode+0x48>)
    563e:	781b      	ldrb	r3, [r3, #0]
    5640:	2b00      	cmp	r3, #0
    5642:	d0ef      	beq.n	5624 <data_out_block_mode+0x10>
			retry_cnt--;
    5644:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    5646:	4638      	mov	r0, r7
    5648:	f7ff ffba 	bl	55c0 <on_failed_write>
    564c:	e7ea      	b.n	5624 <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
    564e:	b914      	cbnz	r4, 5656 <data_out_block_mode+0x42>
    5650:	4b02      	ldr	r3, [pc, #8]	; (565c <data_out_block_mode+0x48>)
    5652:	781b      	ldrb	r3, [r3, #0]
    5654:	b903      	cbnz	r3, 5658 <data_out_block_mode+0x44>
    5656:	462c      	mov	r4, r5
}
    5658:	4620      	mov	r0, r4
    565a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    565c:	2000d722 	.word	0x2000d722

00005660 <panic>:
{
    5660:	b508      	push	{r3, lr}
	panic_mode = true;
    5662:	4b03      	ldr	r3, [pc, #12]	; (5670 <panic+0x10>)
    5664:	2201      	movs	r2, #1
    5666:	701a      	strb	r2, [r3, #0]
    5668:	4802      	ldr	r0, [pc, #8]	; (5674 <panic+0x14>)
    566a:	f009 fde5 	bl	f238 <log_output_flush>
}
    566e:	bd08      	pop	{r3, pc}
    5670:	2000d723 	.word	0x2000d723
    5674:	00011ca8 	.word	0x00011ca8

00005678 <process>:
{
    5678:	b510      	push	{r4, lr}
    567a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    567c:	4b04      	ldr	r3, [pc, #16]	; (5690 <process+0x18>)
    567e:	6818      	ldr	r0, [r3, #0]
    5680:	f7ff fb98 	bl	4db4 <log_format_func_t_get>
    5684:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    5686:	220f      	movs	r2, #15
    5688:	4621      	mov	r1, r4
    568a:	4802      	ldr	r0, [pc, #8]	; (5694 <process+0x1c>)
    568c:	4798      	blx	r3
}
    568e:	bd10      	pop	{r4, pc}
    5690:	2000ca10 	.word	0x2000ca10
    5694:	00011ca8 	.word	0x00011ca8

00005698 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    5698:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    569a:	4b40      	ldr	r3, [pc, #256]	; (579c <pm_system_resume+0x104>)
    569c:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    569e:	f005 031f 	and.w	r3, r5, #31
    56a2:	2201      	movs	r2, #1
    56a4:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    56a6:	0969      	lsrs	r1, r5, #5
    56a8:	4b3d      	ldr	r3, [pc, #244]	; (57a0 <pm_system_resume+0x108>)
    56aa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    56ae:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    56b0:	f3bf 8f5b 	dmb	ish
    56b4:	e853 1f00 	ldrex	r1, [r3]
    56b8:	ea01 0400 	and.w	r4, r1, r0
    56bc:	e843 4600 	strex	r6, r4, [r3]
    56c0:	2e00      	cmp	r6, #0
    56c2:	d1f7      	bne.n	56b4 <pm_system_resume+0x1c>
    56c4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    56c8:	420a      	tst	r2, r1
    56ca:	d100      	bne.n	56ce <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    56cc:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    56ce:	4a35      	ldr	r2, [pc, #212]	; (57a4 <pm_system_resume+0x10c>)
    56d0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    56d4:	0098      	lsls	r0, r3, #2
    56d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    56da:	4933      	ldr	r1, [pc, #204]	; (57a8 <pm_system_resume+0x110>)
    56dc:	b1a9      	cbz	r1, 570a <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    56de:	7859      	ldrb	r1, [r3, #1]
    56e0:	5c10      	ldrb	r0, [r2, r0]
    56e2:	f009 feb9 	bl	f458 <pm_state_exit_post_ops>
    56e6:	f04f 0320 	mov.w	r3, #32
    56ea:	f3ef 8611 	mrs	r6, BASEPRI
    56ee:	f383 8812 	msr	BASEPRI_MAX, r3
    56f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    56f6:	482d      	ldr	r0, [pc, #180]	; (57ac <pm_system_resume+0x114>)
    56f8:	f005 f808 	bl	a70c <z_spin_lock_valid>
    56fc:	b158      	cbz	r0, 5716 <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    56fe:	482b      	ldr	r0, [pc, #172]	; (57ac <pm_system_resume+0x114>)
    5700:	f005 f824 	bl	a74c <z_spin_lock_set_owner>
	return list->head;
    5704:	4b2a      	ldr	r3, [pc, #168]	; (57b0 <pm_system_resume+0x118>)
    5706:	681c      	ldr	r4, [r3, #0]
    5708:	e020      	b.n	574c <pm_system_resume+0xb4>
	__asm__ volatile(
    570a:	2300      	movs	r3, #0
    570c:	f383 8811 	msr	BASEPRI, r3
    5710:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    5714:	e7e7      	b.n	56e6 <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5716:	4c27      	ldr	r4, [pc, #156]	; (57b4 <pm_system_resume+0x11c>)
    5718:	238e      	movs	r3, #142	; 0x8e
    571a:	4622      	mov	r2, r4
    571c:	4926      	ldr	r1, [pc, #152]	; (57b8 <pm_system_resume+0x120>)
    571e:	4827      	ldr	r0, [pc, #156]	; (57bc <pm_system_resume+0x124>)
    5720:	f009 fd00 	bl	f124 <assert_print>
    5724:	4921      	ldr	r1, [pc, #132]	; (57ac <pm_system_resume+0x114>)
    5726:	4826      	ldr	r0, [pc, #152]	; (57c0 <pm_system_resume+0x128>)
    5728:	f009 fcfc 	bl	f124 <assert_print>
    572c:	218e      	movs	r1, #142	; 0x8e
    572e:	4620      	mov	r0, r4
    5730:	f009 fcf1 	bl	f116 <assert_post_action>
    5734:	e7e3      	b.n	56fe <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    5736:	4b19      	ldr	r3, [pc, #100]	; (579c <pm_system_resume+0x104>)
    5738:	7d1b      	ldrb	r3, [r3, #20]
    573a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    573e:	4919      	ldr	r1, [pc, #100]	; (57a4 <pm_system_resume+0x10c>)
    5740:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    5744:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    5746:	b10c      	cbz	r4, 574c <pm_system_resume+0xb4>
	return node->next;
    5748:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    574a:	b124      	cbz	r4, 5756 <pm_system_resume+0xbe>
    574c:	b11c      	cbz	r4, 5756 <pm_system_resume+0xbe>
			callback = notifier->state_exit;
    574e:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    5750:	2a00      	cmp	r2, #0
    5752:	d1f0      	bne.n	5736 <pm_system_resume+0x9e>
    5754:	e7f7      	b.n	5746 <pm_system_resume+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5756:	4815      	ldr	r0, [pc, #84]	; (57ac <pm_system_resume+0x114>)
    5758:	f004 ffe8 	bl	a72c <z_spin_unlock_valid>
    575c:	b170      	cbz	r0, 577c <pm_system_resume+0xe4>
	__asm__ volatile(
    575e:	f386 8811 	msr	BASEPRI, r6
    5762:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    5766:	4a0f      	ldr	r2, [pc, #60]	; (57a4 <pm_system_resume+0x10c>)
    5768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    576c:	00a9      	lsls	r1, r5, #2
    576e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    5772:	2300      	movs	r3, #0
    5774:	5053      	str	r3, [r2, r1]
    5776:	606b      	str	r3, [r5, #4]
    5778:	60ab      	str	r3, [r5, #8]
}
    577a:	e7a7      	b.n	56cc <pm_system_resume+0x34>
    577c:	4c0d      	ldr	r4, [pc, #52]	; (57b4 <pm_system_resume+0x11c>)
    577e:	23b9      	movs	r3, #185	; 0xb9
    5780:	4622      	mov	r2, r4
    5782:	4910      	ldr	r1, [pc, #64]	; (57c4 <pm_system_resume+0x12c>)
    5784:	480d      	ldr	r0, [pc, #52]	; (57bc <pm_system_resume+0x124>)
    5786:	f009 fccd 	bl	f124 <assert_print>
    578a:	4908      	ldr	r1, [pc, #32]	; (57ac <pm_system_resume+0x114>)
    578c:	480e      	ldr	r0, [pc, #56]	; (57c8 <pm_system_resume+0x130>)
    578e:	f009 fcc9 	bl	f124 <assert_print>
    5792:	21b9      	movs	r1, #185	; 0xb9
    5794:	4620      	mov	r0, r4
    5796:	f009 fcbe 	bl	f116 <assert_post_action>
    579a:	e7e0      	b.n	575e <pm_system_resume+0xc6>
    579c:	2000d4e4 	.word	0x2000d4e4
    57a0:	2000ca3c 	.word	0x2000ca3c
    57a4:	2000ca2c 	.word	0x2000ca2c
    57a8:	0000f459 	.word	0x0000f459
    57ac:	2000ca20 	.word	0x2000ca20
    57b0:	2000ca24 	.word	0x2000ca24
    57b4:	000116c0 	.word	0x000116c0
    57b8:	00011720 	.word	0x00011720
    57bc:	00011514 	.word	0x00011514
    57c0:	00011738 	.word	0x00011738
    57c4:	000116f0 	.word	0x000116f0
    57c8:	00011708 	.word	0x00011708

000057cc <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    57cc:	b570      	push	{r4, r5, r6, lr}
    57ce:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    57d0:	4b6d      	ldr	r3, [pc, #436]	; (5988 <pm_system_suspend+0x1bc>)
    57d2:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    57d4:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    57d6:	f3bf 8f5b 	dmb	ish
    57da:	4b6c      	ldr	r3, [pc, #432]	; (598c <pm_system_suspend+0x1c0>)
    57dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    57e0:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    57e4:	f005 021f 	and.w	r2, r5, #31
    57e8:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    57ea:	f013 0f01 	tst.w	r3, #1
    57ee:	d01d      	beq.n	582c <pm_system_suspend+0x60>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    57f0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    57f4:	4a66      	ldr	r2, [pc, #408]	; (5990 <pm_system_suspend+0x1c4>)
    57f6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    57fa:	b333      	cbz	r3, 584a <pm_system_suspend+0x7e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    57fc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    5800:	d139      	bne.n	5876 <pm_system_suspend+0xaa>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    5802:	f005 fded 	bl	b3e0 <k_sched_lock>
	__asm__ volatile(
    5806:	f04f 0320 	mov.w	r3, #32
    580a:	f3ef 8611 	mrs	r6, BASEPRI
    580e:	f383 8812 	msr	BASEPRI_MAX, r3
    5812:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5816:	485f      	ldr	r0, [pc, #380]	; (5994 <pm_system_suspend+0x1c8>)
    5818:	f004 ff78 	bl	a70c <z_spin_lock_valid>
    581c:	2800      	cmp	r0, #0
    581e:	d040      	beq.n	58a2 <pm_system_suspend+0xd6>
	z_spin_lock_set_owner(l);
    5820:	485c      	ldr	r0, [pc, #368]	; (5994 <pm_system_suspend+0x1c8>)
    5822:	f004 ff93 	bl	a74c <z_spin_lock_set_owner>
	return list->head;
    5826:	4b5c      	ldr	r3, [pc, #368]	; (5998 <pm_system_suspend+0x1cc>)
    5828:	681c      	ldr	r4, [r3, #0]
    582a:	e055      	b.n	58d8 <pm_system_suspend+0x10c>
		info = pm_policy_next_state(id, ticks);
    582c:	4601      	mov	r1, r0
    582e:	4628      	mov	r0, r5
    5830:	f000 f8d6 	bl	59e0 <pm_policy_next_state>
		if (info != NULL) {
    5834:	2800      	cmp	r0, #0
    5836:	d0db      	beq.n	57f0 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    5838:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    583c:	4a54      	ldr	r2, [pc, #336]	; (5990 <pm_system_suspend+0x1c4>)
    583e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5842:	c807      	ldmia	r0, {r0, r1, r2}
    5844:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    5848:	e7d2      	b.n	57f0 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    584a:	f005 021f 	and.w	r2, r5, #31
    584e:	2301      	movs	r3, #1
    5850:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5852:	096d      	lsrs	r5, r5, #5
    5854:	4a4d      	ldr	r2, [pc, #308]	; (598c <pm_system_suspend+0x1c0>)
    5856:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    585a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    585c:	f3bf 8f5b 	dmb	ish
    5860:	e855 2f00 	ldrex	r2, [r5]
    5864:	401a      	ands	r2, r3
    5866:	e845 2100 	strex	r1, r2, [r5]
    586a:	2900      	cmp	r1, #0
    586c:	d1f8      	bne.n	5860 <pm_system_suspend+0x94>
    586e:	f3bf 8f5b 	dmb	ish
		ret = false;
    5872:	2000      	movs	r0, #0
		goto end;
    5874:	e077      	b.n	5966 <pm_system_suspend+0x19a>
		     k_us_to_ticks_ceil32(
    5876:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    587a:	4a45      	ldr	r2, [pc, #276]	; (5990 <pm_system_suspend+0x1c4>)
    587c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5880:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    5882:	0c41      	lsrs	r1, r0, #17
    5884:	03c0      	lsls	r0, r0, #15
    5886:	4b45      	ldr	r3, [pc, #276]	; (599c <pm_system_suspend+0x1d0>)
    5888:	18c0      	adds	r0, r0, r3
    588a:	4a45      	ldr	r2, [pc, #276]	; (59a0 <pm_system_suspend+0x1d4>)
    588c:	f04f 0300 	mov.w	r3, #0
    5890:	f141 0100 	adc.w	r1, r1, #0
    5894:	f7fb f8a2 	bl	9dc <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    5898:	2101      	movs	r1, #1
    589a:	1a20      	subs	r0, r4, r0
    589c:	f007 f930 	bl	cb00 <z_set_timeout_expiry>
    58a0:	e7af      	b.n	5802 <pm_system_suspend+0x36>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    58a2:	4c40      	ldr	r4, [pc, #256]	; (59a4 <pm_system_suspend+0x1d8>)
    58a4:	238e      	movs	r3, #142	; 0x8e
    58a6:	4622      	mov	r2, r4
    58a8:	493f      	ldr	r1, [pc, #252]	; (59a8 <pm_system_suspend+0x1dc>)
    58aa:	4840      	ldr	r0, [pc, #256]	; (59ac <pm_system_suspend+0x1e0>)
    58ac:	f009 fc3a 	bl	f124 <assert_print>
    58b0:	4938      	ldr	r1, [pc, #224]	; (5994 <pm_system_suspend+0x1c8>)
    58b2:	483f      	ldr	r0, [pc, #252]	; (59b0 <pm_system_suspend+0x1e4>)
    58b4:	f009 fc36 	bl	f124 <assert_print>
    58b8:	218e      	movs	r1, #142	; 0x8e
    58ba:	4620      	mov	r0, r4
    58bc:	f009 fc2b 	bl	f116 <assert_post_action>
    58c0:	e7ae      	b.n	5820 <pm_system_suspend+0x54>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    58c2:	4b31      	ldr	r3, [pc, #196]	; (5988 <pm_system_suspend+0x1bc>)
    58c4:	7d1b      	ldrb	r3, [r3, #20]
    58c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    58ca:	4931      	ldr	r1, [pc, #196]	; (5990 <pm_system_suspend+0x1c4>)
    58cc:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    58d0:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    58d2:	b10c      	cbz	r4, 58d8 <pm_system_suspend+0x10c>
	return node->next;
    58d4:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    58d6:	b124      	cbz	r4, 58e2 <pm_system_suspend+0x116>
    58d8:	b11c      	cbz	r4, 58e2 <pm_system_suspend+0x116>
			callback = notifier->state_entry;
    58da:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    58dc:	2a00      	cmp	r2, #0
    58de:	d1f0      	bne.n	58c2 <pm_system_suspend+0xf6>
    58e0:	e7f7      	b.n	58d2 <pm_system_suspend+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    58e2:	482c      	ldr	r0, [pc, #176]	; (5994 <pm_system_suspend+0x1c8>)
    58e4:	f004 ff22 	bl	a72c <z_spin_unlock_valid>
    58e8:	2800      	cmp	r0, #0
    58ea:	d03d      	beq.n	5968 <pm_system_suspend+0x19c>
	__asm__ volatile(
    58ec:	f386 8811 	msr	BASEPRI, r6
    58f0:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    58f4:	f005 031f 	and.w	r3, r5, #31
    58f8:	2101      	movs	r1, #1
    58fa:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    58fc:	096b      	lsrs	r3, r5, #5
    58fe:	4a2d      	ldr	r2, [pc, #180]	; (59b4 <pm_system_suspend+0x1e8>)
    5900:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5904:	f3bf 8f5b 	dmb	ish
    5908:	e853 2f00 	ldrex	r2, [r3]
    590c:	430a      	orrs	r2, r1
    590e:	e843 2000 	strex	r0, r2, [r3]
    5912:	2800      	cmp	r0, #0
    5914:	d1f8      	bne.n	5908 <pm_system_suspend+0x13c>
    5916:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    591a:	4b27      	ldr	r3, [pc, #156]	; (59b8 <pm_system_suspend+0x1ec>)
    591c:	b14b      	cbz	r3, 5932 <pm_system_suspend+0x166>
		pm_state_set(info->state, info->substate_id);
    591e:	4b1c      	ldr	r3, [pc, #112]	; (5990 <pm_system_suspend+0x1c4>)
    5920:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5924:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    5928:	7849      	ldrb	r1, [r1, #1]
    592a:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    592e:	f009 fd87 	bl	f440 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    5932:	f7ff feb1 	bl	5698 <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    5936:	f005 031f 	and.w	r3, r5, #31
    593a:	2401      	movs	r4, #1
    593c:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5940:	096d      	lsrs	r5, r5, #5
    5942:	4a12      	ldr	r2, [pc, #72]	; (598c <pm_system_suspend+0x1c0>)
    5944:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    5948:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    594a:	f3bf 8f5b 	dmb	ish
    594e:	e855 2f00 	ldrex	r2, [r5]
    5952:	401a      	ands	r2, r3
    5954:	e845 2100 	strex	r1, r2, [r5]
    5958:	2900      	cmp	r1, #0
    595a:	d1f8      	bne.n	594e <pm_system_suspend+0x182>
    595c:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    5960:	f006 faca 	bl	bef8 <k_sched_unlock>
	bool ret = true;
    5964:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    5966:	bd70      	pop	{r4, r5, r6, pc}
    5968:	4c0e      	ldr	r4, [pc, #56]	; (59a4 <pm_system_suspend+0x1d8>)
    596a:	23b9      	movs	r3, #185	; 0xb9
    596c:	4622      	mov	r2, r4
    596e:	4913      	ldr	r1, [pc, #76]	; (59bc <pm_system_suspend+0x1f0>)
    5970:	480e      	ldr	r0, [pc, #56]	; (59ac <pm_system_suspend+0x1e0>)
    5972:	f009 fbd7 	bl	f124 <assert_print>
    5976:	4907      	ldr	r1, [pc, #28]	; (5994 <pm_system_suspend+0x1c8>)
    5978:	4811      	ldr	r0, [pc, #68]	; (59c0 <pm_system_suspend+0x1f4>)
    597a:	f009 fbd3 	bl	f124 <assert_print>
    597e:	21b9      	movs	r1, #185	; 0xb9
    5980:	4620      	mov	r0, r4
    5982:	f009 fbc8 	bl	f116 <assert_post_action>
    5986:	e7b1      	b.n	58ec <pm_system_suspend+0x120>
    5988:	2000d4e4 	.word	0x2000d4e4
    598c:	2000ca38 	.word	0x2000ca38
    5990:	2000ca2c 	.word	0x2000ca2c
    5994:	2000ca20 	.word	0x2000ca20
    5998:	2000ca24 	.word	0x2000ca24
    599c:	000f423f 	.word	0x000f423f
    59a0:	000f4240 	.word	0x000f4240
    59a4:	000116c0 	.word	0x000116c0
    59a8:	00011720 	.word	0x00011720
    59ac:	00011514 	.word	0x00011514
    59b0:	00011738 	.word	0x00011738
    59b4:	2000ca3c 	.word	0x2000ca3c
    59b8:	0000f441 	.word	0x0000f441
    59bc:	000116f0 	.word	0x000116f0
    59c0:	00011708 	.word	0x00011708

000059c4 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    59c4:	f3bf 8f5b 	dmb	ish
    59c8:	4b04      	ldr	r3, [pc, #16]	; (59dc <pm_policy_state_lock_is_active+0x18>)
    59ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    59ce:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    59d2:	3800      	subs	r0, #0
    59d4:	bf18      	it	ne
    59d6:	2001      	movne	r0, #1
    59d8:	4770      	bx	lr
    59da:	bf00      	nop
    59dc:	2000ca40 	.word	0x2000ca40

000059e0 <pm_policy_next_state>:
{
    59e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59e4:	b082      	sub	sp, #8
    59e6:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    59e8:	a901      	add	r1, sp, #4
    59ea:	f000 f843 	bl	5a74 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    59ee:	1e44      	subs	r4, r0, #1
    59f0:	b224      	sxth	r4, r4
    59f2:	e007      	b.n	5a04 <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    59f4:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    59f8:	d032      	beq.n	5a60 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    59fa:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    59fc:	42b0      	cmp	r0, r6
    59fe:	d92f      	bls.n	5a60 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    5a00:	3c01      	subs	r4, #1
    5a02:	b224      	sxth	r4, r4
    5a04:	2c00      	cmp	r4, #0
    5a06:	db2a      	blt.n	5a5e <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    5a08:	9b01      	ldr	r3, [sp, #4]
    5a0a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    5a0e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    5a12:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    5a16:	f7ff ffd5 	bl	59c4 <pm_policy_state_lock_is_active>
    5a1a:	2800      	cmp	r0, #0
    5a1c:	d1f0      	bne.n	5a00 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    5a1e:	6868      	ldr	r0, [r5, #4]
    5a20:	0c41      	lsrs	r1, r0, #17
    5a22:	03c0      	lsls	r0, r0, #15
    5a24:	4f10      	ldr	r7, [pc, #64]	; (5a68 <pm_policy_next_state+0x88>)
    5a26:	19c0      	adds	r0, r0, r7
    5a28:	4a10      	ldr	r2, [pc, #64]	; (5a6c <pm_policy_next_state+0x8c>)
    5a2a:	f04f 0300 	mov.w	r3, #0
    5a2e:	f141 0100 	adc.w	r1, r1, #0
    5a32:	f7fa ffd3 	bl	9dc <__aeabi_uldivmod>
    5a36:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    5a38:	68ab      	ldr	r3, [r5, #8]
    5a3a:	0c59      	lsrs	r1, r3, #17
    5a3c:	03db      	lsls	r3, r3, #15
    5a3e:	19d8      	adds	r0, r3, r7
    5a40:	4a0a      	ldr	r2, [pc, #40]	; (5a6c <pm_policy_next_state+0x8c>)
    5a42:	f04f 0300 	mov.w	r3, #0
    5a46:	f141 0100 	adc.w	r1, r1, #0
    5a4a:	f7fa ffc7 	bl	9dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    5a4e:	4b08      	ldr	r3, [pc, #32]	; (5a70 <pm_policy_next_state+0x90>)
    5a50:	681b      	ldr	r3, [r3, #0]
    5a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5a56:	d0cd      	beq.n	59f4 <pm_policy_next_state+0x14>
    5a58:	4283      	cmp	r3, r0
    5a5a:	d8cb      	bhi.n	59f4 <pm_policy_next_state+0x14>
    5a5c:	e7d0      	b.n	5a00 <pm_policy_next_state+0x20>
	return NULL;
    5a5e:	2500      	movs	r5, #0
}
    5a60:	4628      	mov	r0, r5
    5a62:	b002      	add	sp, #8
    5a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a68:	000f423f 	.word	0x000f423f
    5a6c:	000f4240 	.word	0x000f4240
    5a70:	2000401c 	.word	0x2000401c

00005a74 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    5a74:	b908      	cbnz	r0, 5a7a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    5a76:	4b02      	ldr	r3, [pc, #8]	; (5a80 <pm_state_cpu_get_all+0xc>)
    5a78:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    5a7a:	2000      	movs	r0, #0
    5a7c:	4770      	bx	lr
    5a7e:	bf00      	nop
    5a80:	00011cbc 	.word	0x00011cbc

00005a84 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    5a84:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    5a86:	4802      	ldr	r0, [pc, #8]	; (5a90 <nrf_cc3xx_platform_abort_init+0xc>)
    5a88:	f008 ffb8 	bl	e9fc <nrf_cc3xx_platform_set_abort>
}
    5a8c:	bd08      	pop	{r3, pc}
    5a8e:	bf00      	nop
    5a90:	00011cbc 	.word	0x00011cbc

00005a94 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    5a94:	b1d0      	cbz	r0, 5acc <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5a96:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    5a98:	6842      	ldr	r2, [r0, #4]
    5a9a:	2a04      	cmp	r2, #4
    5a9c:	d005      	beq.n	5aaa <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5a9e:	b1d2      	cbz	r2, 5ad6 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    5aa0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    5aa2:	f005 f993 	bl	adcc <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    5aa6:	2000      	movs	r0, #0
    }
}
    5aa8:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    5aaa:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5aac:	2200      	movs	r2, #0
    5aae:	f3bf 8f5b 	dmb	ish
    5ab2:	e853 1f00 	ldrex	r1, [r3]
    5ab6:	2901      	cmp	r1, #1
    5ab8:	d103      	bne.n	5ac2 <mutex_unlock_platform+0x2e>
    5aba:	e843 2000 	strex	r0, r2, [r3]
    5abe:	2800      	cmp	r0, #0
    5ac0:	d1f7      	bne.n	5ab2 <mutex_unlock_platform+0x1e>
    5ac2:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5ac6:	d104      	bne.n	5ad2 <mutex_unlock_platform+0x3e>
    5ac8:	4610      	mov	r0, r2
    5aca:	e7ed      	b.n	5aa8 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    5acc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    5ad0:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5ad2:	4802      	ldr	r0, [pc, #8]	; (5adc <mutex_unlock_platform+0x48>)
    5ad4:	e7e8      	b.n	5aa8 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    5ad6:	4802      	ldr	r0, [pc, #8]	; (5ae0 <mutex_unlock_platform+0x4c>)
    5ad8:	e7e6      	b.n	5aa8 <mutex_unlock_platform+0x14>
    5ada:	bf00      	nop
    5adc:	ffff8fe9 	.word	0xffff8fe9
    5ae0:	ffff8fea 	.word	0xffff8fea

00005ae4 <mutex_lock_platform>:
    if(mutex == NULL) {
    5ae4:	b320      	cbz	r0, 5b30 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5ae6:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    5ae8:	6842      	ldr	r2, [r0, #4]
    5aea:	2a04      	cmp	r2, #4
    5aec:	d002      	beq.n	5af4 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5aee:	b992      	cbnz	r2, 5b16 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    5af0:	4811      	ldr	r0, [pc, #68]	; (5b38 <mutex_lock_platform+0x54>)
    5af2:	e00f      	b.n	5b14 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    5af4:	6803      	ldr	r3, [r0, #0]
    5af6:	2201      	movs	r2, #1
    5af8:	f3bf 8f5b 	dmb	ish
    5afc:	e853 1f00 	ldrex	r1, [r3]
    5b00:	2900      	cmp	r1, #0
    5b02:	d103      	bne.n	5b0c <mutex_lock_platform+0x28>
    5b04:	e843 2000 	strex	r0, r2, [r3]
    5b08:	2800      	cmp	r0, #0
    5b0a:	d1f7      	bne.n	5afc <mutex_lock_platform+0x18>
    5b0c:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5b10:	d10c      	bne.n	5b2c <mutex_lock_platform+0x48>
    5b12:	2000      	movs	r0, #0
}
    5b14:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    5b16:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    5b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5b20:	f005 f834 	bl	ab8c <z_impl_k_mutex_lock>
        if (ret == 0) {
    5b24:	2800      	cmp	r0, #0
    5b26:	d0f5      	beq.n	5b14 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    5b28:	4804      	ldr	r0, [pc, #16]	; (5b3c <mutex_lock_platform+0x58>)
    5b2a:	e7f3      	b.n	5b14 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5b2c:	4803      	ldr	r0, [pc, #12]	; (5b3c <mutex_lock_platform+0x58>)
    5b2e:	e7f1      	b.n	5b14 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    5b30:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    5b34:	4770      	bx	lr
    5b36:	bf00      	nop
    5b38:	ffff8fea 	.word	0xffff8fea
    5b3c:	ffff8fe9 	.word	0xffff8fe9

00005b40 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5b40:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    5b42:	4604      	mov	r4, r0
    5b44:	b190      	cbz	r0, 5b6c <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    5b46:	6863      	ldr	r3, [r4, #4]
    5b48:	2b04      	cmp	r3, #4
    5b4a:	d00e      	beq.n	5b6a <mutex_free_platform+0x2a>
    5b4c:	2b08      	cmp	r3, #8
    5b4e:	d00c      	beq.n	5b6a <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5b50:	b15b      	cbz	r3, 5b6a <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    5b52:	f013 0f02 	tst.w	r3, #2
    5b56:	d10e      	bne.n	5b76 <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    5b58:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    5b5a:	2200      	movs	r2, #0
    5b5c:	601a      	str	r2, [r3, #0]
    5b5e:	605a      	str	r2, [r3, #4]
    5b60:	609a      	str	r2, [r3, #8]
    5b62:	60da      	str	r2, [r3, #12]
    5b64:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    5b66:	2300      	movs	r3, #0
    5b68:	6063      	str	r3, [r4, #4]
}
    5b6a:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    5b6c:	4b05      	ldr	r3, [pc, #20]	; (5b84 <mutex_free_platform+0x44>)
    5b6e:	685b      	ldr	r3, [r3, #4]
    5b70:	4805      	ldr	r0, [pc, #20]	; (5b88 <mutex_free_platform+0x48>)
    5b72:	4798      	blx	r3
    5b74:	e7e7      	b.n	5b46 <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    5b76:	4621      	mov	r1, r4
    5b78:	4804      	ldr	r0, [pc, #16]	; (5b8c <mutex_free_platform+0x4c>)
    5b7a:	f004 fd51 	bl	a620 <k_mem_slab_free>
        mutex->mutex = NULL;
    5b7e:	2300      	movs	r3, #0
    5b80:	6023      	str	r3, [r4, #0]
    5b82:	e7f0      	b.n	5b66 <mutex_free_platform+0x26>
    5b84:	20004168 	.word	0x20004168
    5b88:	00011cc4 	.word	0x00011cc4
    5b8c:	2000ca5c 	.word	0x2000ca5c

00005b90 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5b90:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    5b92:	4604      	mov	r4, r0
    5b94:	b178      	cbz	r0, 5bb6 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    5b96:	6863      	ldr	r3, [r4, #4]
    5b98:	2b04      	cmp	r3, #4
    5b9a:	d00b      	beq.n	5bb4 <mutex_init_platform+0x24>
    5b9c:	2b08      	cmp	r3, #8
    5b9e:	d009      	beq.n	5bb4 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    5ba0:	b90b      	cbnz	r3, 5ba6 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    5ba2:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    5ba4:	b163      	cbz	r3, 5bc0 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    5ba6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    5ba8:	f00a fc8e 	bl	104c8 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    5bac:	6863      	ldr	r3, [r4, #4]
    5bae:	f043 0301 	orr.w	r3, r3, #1
    5bb2:	6063      	str	r3, [r4, #4]
}
    5bb4:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    5bb6:	4b10      	ldr	r3, [pc, #64]	; (5bf8 <mutex_init_platform+0x68>)
    5bb8:	685b      	ldr	r3, [r3, #4]
    5bba:	4810      	ldr	r0, [pc, #64]	; (5bfc <mutex_init_platform+0x6c>)
    5bbc:	4798      	blx	r3
    5bbe:	e7ea      	b.n	5b96 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    5bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5bc8:	4621      	mov	r1, r4
    5bca:	480d      	ldr	r0, [pc, #52]	; (5c00 <mutex_init_platform+0x70>)
    5bcc:	f004 fcb2 	bl	a534 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    5bd0:	b908      	cbnz	r0, 5bd6 <mutex_init_platform+0x46>
    5bd2:	6823      	ldr	r3, [r4, #0]
    5bd4:	b91b      	cbnz	r3, 5bde <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    5bd6:	4b08      	ldr	r3, [pc, #32]	; (5bf8 <mutex_init_platform+0x68>)
    5bd8:	685b      	ldr	r3, [r3, #4]
    5bda:	480a      	ldr	r0, [pc, #40]	; (5c04 <mutex_init_platform+0x74>)
    5bdc:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    5bde:	6823      	ldr	r3, [r4, #0]
    5be0:	2200      	movs	r2, #0
    5be2:	601a      	str	r2, [r3, #0]
    5be4:	605a      	str	r2, [r3, #4]
    5be6:	609a      	str	r2, [r3, #8]
    5be8:	60da      	str	r2, [r3, #12]
    5bea:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    5bec:	6863      	ldr	r3, [r4, #4]
    5bee:	f043 0302 	orr.w	r3, r3, #2
    5bf2:	6063      	str	r3, [r4, #4]
    5bf4:	e7d7      	b.n	5ba6 <mutex_init_platform+0x16>
    5bf6:	bf00      	nop
    5bf8:	20004168 	.word	0x20004168
    5bfc:	00011cc4 	.word	0x00011cc4
    5c00:	2000ca5c 	.word	0x2000ca5c
    5c04:	00011cec 	.word	0x00011cec

00005c08 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    5c08:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    5c0a:	2340      	movs	r3, #64	; 0x40
    5c0c:	2214      	movs	r2, #20
    5c0e:	4904      	ldr	r1, [pc, #16]	; (5c20 <nrf_cc3xx_platform_mutex_init+0x18>)
    5c10:	4804      	ldr	r0, [pc, #16]	; (5c24 <nrf_cc3xx_platform_mutex_init+0x1c>)
    5c12:	f00a fc05 	bl	10420 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    5c16:	4904      	ldr	r1, [pc, #16]	; (5c28 <nrf_cc3xx_platform_mutex_init+0x20>)
    5c18:	4804      	ldr	r0, [pc, #16]	; (5c2c <nrf_cc3xx_platform_mutex_init+0x24>)
    5c1a:	f008 ff4f 	bl	eabc <nrf_cc3xx_platform_set_mutexes>
}
    5c1e:	bd08      	pop	{r3, pc}
    5c20:	2000ca7c 	.word	0x2000ca7c
    5c24:	2000ca5c 	.word	0x2000ca5c
    5c28:	00011d2c 	.word	0x00011d2c
    5c2c:	00011d1c 	.word	0x00011d1c

00005c30 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    5c30:	4901      	ldr	r1, [pc, #4]	; (5c38 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    5c32:	2210      	movs	r2, #16
	str	r2, [r1]
    5c34:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    5c36:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    5c38:	e000ed10 	.word	0xe000ed10

00005c3c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    5c3c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    5c3e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    5c40:	f380 8811 	msr	BASEPRI, r0
	isb
    5c44:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    5c48:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    5c4c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    5c4e:	b662      	cpsie	i
	isb
    5c50:	f3bf 8f6f 	isb	sy

	bx	lr
    5c54:	4770      	bx	lr
    5c56:	bf00      	nop

00005c58 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    5c58:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    5c5a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    5c5c:	f381 8811 	msr	BASEPRI, r1

	wfe
    5c60:	bf20      	wfe

	msr	BASEPRI, r0
    5c62:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    5c66:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    5c68:	4770      	bx	lr
    5c6a:	bf00      	nop

00005c6c <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    5c6c:	b570      	push	{r4, r5, r6, lr}
    5c6e:	b086      	sub	sp, #24
    5c70:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    5c72:	4e1e      	ldr	r6, [pc, #120]	; (5cec <esf_dump+0x80>)
    5c74:	6883      	ldr	r3, [r0, #8]
    5c76:	9305      	str	r3, [sp, #20]
    5c78:	6843      	ldr	r3, [r0, #4]
    5c7a:	9304      	str	r3, [sp, #16]
    5c7c:	6803      	ldr	r3, [r0, #0]
    5c7e:	9303      	str	r3, [sp, #12]
    5c80:	4b1b      	ldr	r3, [pc, #108]	; (5cf0 <esf_dump+0x84>)
    5c82:	9302      	str	r3, [sp, #8]
    5c84:	2400      	movs	r4, #0
    5c86:	9401      	str	r4, [sp, #4]
    5c88:	9400      	str	r4, [sp, #0]
    5c8a:	4623      	mov	r3, r4
    5c8c:	2201      	movs	r2, #1
    5c8e:	4631      	mov	r1, r6
    5c90:	4620      	mov	r0, r4
    5c92:	f009 fafb 	bl	f28c <z_log_msg2_runtime_create>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    5c96:	696b      	ldr	r3, [r5, #20]
    5c98:	9305      	str	r3, [sp, #20]
    5c9a:	692b      	ldr	r3, [r5, #16]
    5c9c:	9304      	str	r3, [sp, #16]
    5c9e:	68eb      	ldr	r3, [r5, #12]
    5ca0:	9303      	str	r3, [sp, #12]
    5ca2:	4b14      	ldr	r3, [pc, #80]	; (5cf4 <esf_dump+0x88>)
    5ca4:	9302      	str	r3, [sp, #8]
    5ca6:	9401      	str	r4, [sp, #4]
    5ca8:	9400      	str	r4, [sp, #0]
    5caa:	4623      	mov	r3, r4
    5cac:	2201      	movs	r2, #1
    5cae:	4631      	mov	r1, r6
    5cb0:	4620      	mov	r0, r4
    5cb2:	f009 faeb 	bl	f28c <z_log_msg2_runtime_create>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    5cb6:	69eb      	ldr	r3, [r5, #28]
    5cb8:	9303      	str	r3, [sp, #12]
    5cba:	4b0f      	ldr	r3, [pc, #60]	; (5cf8 <esf_dump+0x8c>)
    5cbc:	9302      	str	r3, [sp, #8]
    5cbe:	9401      	str	r4, [sp, #4]
    5cc0:	9400      	str	r4, [sp, #0]
    5cc2:	4623      	mov	r3, r4
    5cc4:	2201      	movs	r2, #1
    5cc6:	4631      	mov	r1, r6
    5cc8:	4620      	mov	r0, r4
    5cca:	f009 fadf 	bl	f28c <z_log_msg2_runtime_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    5cce:	69ab      	ldr	r3, [r5, #24]
    5cd0:	9303      	str	r3, [sp, #12]
    5cd2:	4b0a      	ldr	r3, [pc, #40]	; (5cfc <esf_dump+0x90>)
    5cd4:	9302      	str	r3, [sp, #8]
    5cd6:	9401      	str	r4, [sp, #4]
    5cd8:	9400      	str	r4, [sp, #0]
    5cda:	4623      	mov	r3, r4
    5cdc:	2201      	movs	r2, #1
    5cde:	4631      	mov	r1, r6
    5ce0:	4620      	mov	r0, r4
    5ce2:	f009 fad3 	bl	f28c <z_log_msg2_runtime_create>
		esf->basic.pc);
}
    5ce6:	b006      	add	sp, #24
    5ce8:	bd70      	pop	{r4, r5, r6, pc}
    5cea:	bf00      	nop
    5cec:	00010f08 	.word	0x00010f08
    5cf0:	00011d40 	.word	0x00011d40
    5cf4:	00011d70 	.word	0x00011d70
    5cf8:	00011da0 	.word	0x00011da0
    5cfc:	00011db0 	.word	0x00011db0

00005d00 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    5d00:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    5d02:	2800      	cmp	r0, #0
    5d04:	db07      	blt.n	5d16 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d06:	f000 021f 	and.w	r2, r0, #31
    5d0a:	0940      	lsrs	r0, r0, #5
    5d0c:	2301      	movs	r3, #1
    5d0e:	4093      	lsls	r3, r2
    5d10:	4a01      	ldr	r2, [pc, #4]	; (5d18 <arch_irq_enable+0x18>)
    5d12:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    5d16:	4770      	bx	lr
    5d18:	e000e100 	.word	0xe000e100

00005d1c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    5d1c:	0942      	lsrs	r2, r0, #5
    5d1e:	4b05      	ldr	r3, [pc, #20]	; (5d34 <arch_irq_is_enabled+0x18>)
    5d20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5d24:	f000 001f 	and.w	r0, r0, #31
    5d28:	2301      	movs	r3, #1
    5d2a:	fa03 f000 	lsl.w	r0, r3, r0
}
    5d2e:	4010      	ands	r0, r2
    5d30:	4770      	bx	lr
    5d32:	bf00      	nop
    5d34:	e000e100 	.word	0xe000e100

00005d38 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    5d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d3a:	4604      	mov	r4, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    5d3c:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    5d3e:	2d07      	cmp	r5, #7
    5d40:	d80b      	bhi.n	5d5a <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5d42:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    5d44:	2800      	cmp	r0, #0
    5d46:	db1b      	blt.n	5d80 <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5d48:	016d      	lsls	r5, r5, #5
    5d4a:	b2ed      	uxtb	r5, r5
    5d4c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    5d50:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    5d54:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    5d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d5a:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    5d5c:	4f0c      	ldr	r7, [pc, #48]	; (5d90 <z_arm_irq_priority_set+0x58>)
    5d5e:	2357      	movs	r3, #87	; 0x57
    5d60:	463a      	mov	r2, r7
    5d62:	490c      	ldr	r1, [pc, #48]	; (5d94 <z_arm_irq_priority_set+0x5c>)
    5d64:	480c      	ldr	r0, [pc, #48]	; (5d98 <z_arm_irq_priority_set+0x60>)
    5d66:	f009 f9dd 	bl	f124 <assert_print>
    5d6a:	2307      	movs	r3, #7
    5d6c:	4622      	mov	r2, r4
    5d6e:	4631      	mov	r1, r6
    5d70:	480a      	ldr	r0, [pc, #40]	; (5d9c <z_arm_irq_priority_set+0x64>)
    5d72:	f009 f9d7 	bl	f124 <assert_print>
    5d76:	2157      	movs	r1, #87	; 0x57
    5d78:	4638      	mov	r0, r7
    5d7a:	f009 f9cc 	bl	f116 <assert_post_action>
    5d7e:	e7e0      	b.n	5d42 <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5d80:	f000 000f 	and.w	r0, r0, #15
    5d84:	016d      	lsls	r5, r5, #5
    5d86:	b2ed      	uxtb	r5, r5
    5d88:	4b05      	ldr	r3, [pc, #20]	; (5da0 <z_arm_irq_priority_set+0x68>)
    5d8a:	541d      	strb	r5, [r3, r0]
}
    5d8c:	e7e4      	b.n	5d58 <z_arm_irq_priority_set+0x20>
    5d8e:	bf00      	nop
    5d90:	00011de0 	.word	0x00011de0
    5d94:	00011e18 	.word	0x00011e18
    5d98:	00011514 	.word	0x00011514
    5d9c:	00011e34 	.word	0x00011e34
    5da0:	e000ed14 	.word	0xe000ed14

00005da4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    5da4:	bf30      	wfi
    b z_SysNmiOnReset
    5da6:	f7ff bffd 	b.w	5da4 <z_SysNmiOnReset>
    5daa:	bf00      	nop

00005dac <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    5dac:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5dae:	4b0b      	ldr	r3, [pc, #44]	; (5ddc <z_arm_prep_c+0x30>)
    5db0:	4a0b      	ldr	r2, [pc, #44]	; (5de0 <z_arm_prep_c+0x34>)
    5db2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    5db6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5db8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5dbc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    5dc0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    5dc4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    5dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    5dcc:	f004 fade 	bl	a38c <z_bss_zero>
	z_data_copy();
    5dd0:	f006 fca4 	bl	c71c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    5dd4:	f000 fc72 	bl	66bc <z_arm_interrupt_init>
	z_cstart();
    5dd8:	f004 fb36 	bl	a448 <z_cstart>
    5ddc:	e000ed00 	.word	0xe000ed00
    5de0:	00000000 	.word	0x00000000

00005de4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    5de4:	4a0a      	ldr	r2, [pc, #40]	; (5e10 <arch_swap+0x2c>)
    5de6:	6893      	ldr	r3, [r2, #8]
    5de8:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    5dec:	4909      	ldr	r1, [pc, #36]	; (5e14 <arch_swap+0x30>)
    5dee:	6809      	ldr	r1, [r1, #0]
    5df0:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5df4:	4908      	ldr	r1, [pc, #32]	; (5e18 <arch_swap+0x34>)
    5df6:	684b      	ldr	r3, [r1, #4]
    5df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    5dfc:	604b      	str	r3, [r1, #4]
    5dfe:	2300      	movs	r3, #0
    5e00:	f383 8811 	msr	BASEPRI, r3
    5e04:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    5e08:	6893      	ldr	r3, [r2, #8]
}
    5e0a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    5e0e:	4770      	bx	lr
    5e10:	2000d4e4 	.word	0x2000d4e4
    5e14:	00012b54 	.word	0x00012b54
    5e18:	e000ed00 	.word	0xe000ed00

00005e1c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    5e1c:	4913      	ldr	r1, [pc, #76]	; (5e6c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    5e1e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    5e20:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    5e24:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    5e26:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    5e2a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5e2e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    5e30:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    5e34:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    5e38:	4f0d      	ldr	r7, [pc, #52]	; (5e70 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    5e3a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    5e3e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    5e40:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    5e42:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    5e44:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    5e48:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5e4a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    5e4e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    5e52:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    5e54:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    5e56:	f000 fcdb 	bl	6810 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    5e5a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    5e5e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    5e62:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    5e66:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    5e6a:	4770      	bx	lr
    ldr r1, =_kernel
    5e6c:	2000d4e4 	.word	0x2000d4e4
    ldr v4, =_SCS_ICSR
    5e70:	e000ed04 	.word	0xe000ed04

00005e74 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    5e74:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5e78:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    5e7a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    5e7e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    5e82:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5e84:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5e88:	2902      	cmp	r1, #2
    beq _oops
    5e8a:	d0ff      	beq.n	5e8c <_oops>

00005e8c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    5e8c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    5e8e:	f009 fa18 	bl	f2c2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    5e92:	bd01      	pop	{r0, pc}

00005e94 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    5e94:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    5e96:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    5e9a:	490e      	ldr	r1, [pc, #56]	; (5ed4 <arch_new_thread+0x40>)
    5e9c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    5ea0:	f021 0101 	bic.w	r1, r1, #1
    5ea4:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    5ea8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    5eac:	9b01      	ldr	r3, [sp, #4]
    5eae:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    5eb2:	9b02      	ldr	r3, [sp, #8]
    5eb4:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    5eb8:	9b03      	ldr	r3, [sp, #12]
    5eba:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    5ebe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    5ec2:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    5ec6:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    5ec8:	2300      	movs	r3, #0
    5eca:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    5ece:	bc10      	pop	{r4}
    5ed0:	4770      	bx	lr
    5ed2:	bf00      	nop
    5ed4:	0000f067 	.word	0x0000f067

00005ed8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    5ed8:	4b12      	ldr	r3, [pc, #72]	; (5f24 <z_check_thread_stack_fail+0x4c>)
    5eda:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    5edc:	b302      	cbz	r2, 5f20 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    5ede:	f110 0f16 	cmn.w	r0, #22
    5ee2:	d011      	beq.n	5f08 <z_check_thread_stack_fail+0x30>
    5ee4:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    5ee8:	f1a3 0c20 	sub.w	ip, r3, #32
    5eec:	4584      	cmp	ip, r0
    5eee:	d805      	bhi.n	5efc <z_check_thread_stack_fail+0x24>
    5ef0:	4283      	cmp	r3, r0
    5ef2:	d905      	bls.n	5f00 <z_check_thread_stack_fail+0x28>
    5ef4:	428b      	cmp	r3, r1
    5ef6:	d805      	bhi.n	5f04 <z_check_thread_stack_fail+0x2c>
    5ef8:	2100      	movs	r1, #0
    5efa:	e00b      	b.n	5f14 <z_check_thread_stack_fail+0x3c>
    5efc:	2100      	movs	r1, #0
    5efe:	e009      	b.n	5f14 <z_check_thread_stack_fail+0x3c>
    5f00:	2100      	movs	r1, #0
    5f02:	e007      	b.n	5f14 <z_check_thread_stack_fail+0x3c>
    5f04:	2101      	movs	r1, #1
    5f06:	e005      	b.n	5f14 <z_check_thread_stack_fail+0x3c>
    5f08:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    5f0c:	428b      	cmp	r3, r1
    5f0e:	bf94      	ite	ls
    5f10:	2100      	movls	r1, #0
    5f12:	2101      	movhi	r1, #1
    5f14:	b909      	cbnz	r1, 5f1a <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    5f16:	2000      	movs	r0, #0
}
    5f18:	4770      	bx	lr
		return thread->stack_info.start;
    5f1a:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    5f1e:	4770      	bx	lr
		return 0;
    5f20:	2000      	movs	r0, #0
    5f22:	4770      	bx	lr
    5f24:	2000d4e4 	.word	0x2000d4e4

00005f28 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    5f28:	b508      	push	{r3, lr}
    5f2a:	460d      	mov	r5, r1
    5f2c:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    5f2e:	4b08      	ldr	r3, [pc, #32]	; (5f50 <arch_switch_to_main_thread+0x28>)
    5f30:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    5f32:	f000 fc6d 	bl	6810 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    5f36:	4620      	mov	r0, r4
    5f38:	f385 8809 	msr	PSP, r5
    5f3c:	2100      	movs	r1, #0
    5f3e:	b663      	cpsie	if
    5f40:	f381 8811 	msr	BASEPRI, r1
    5f44:	f3bf 8f6f 	isb	sy
    5f48:	2200      	movs	r2, #0
    5f4a:	2300      	movs	r3, #0
    5f4c:	f009 f88b 	bl	f066 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    5f50:	2000d4e4 	.word	0x2000d4e4

00005f54 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5f54:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    5f56:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    5f58:	4a0b      	ldr	r2, [pc, #44]	; (5f88 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    5f5a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    5f5c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    5f5e:	bf1e      	ittt	ne
	movne	r1, #0
    5f60:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5f62:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    5f64:	f00a fa94 	blne	10490 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5f68:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    5f6a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5f6e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5f72:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    5f76:	4905      	ldr	r1, [pc, #20]	; (5f8c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5f78:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    5f7a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    5f7c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    5f7e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    5f82:	4903      	ldr	r1, [pc, #12]	; (5f90 <_isr_wrapper+0x3c>)
	bx r1
    5f84:	4708      	bx	r1
    5f86:	0000      	.short	0x0000
	ldr r2, =_kernel
    5f88:	2000d4e4 	.word	0x2000d4e4
	ldr r1, =_sw_isr_table
    5f8c:	00010d60 	.word	0x00010d60
	ldr r1, =z_arm_int_exit
    5f90:	00005f95 	.word	0x00005f95

00005f94 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    5f94:	4b04      	ldr	r3, [pc, #16]	; (5fa8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    5f96:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    5f98:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    5f9a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    5f9c:	d003      	beq.n	5fa6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    5f9e:	4903      	ldr	r1, [pc, #12]	; (5fac <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    5fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    5fa4:	600a      	str	r2, [r1, #0]

00005fa6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    5fa6:	4770      	bx	lr
	ldr r3, =_kernel
    5fa8:	2000d4e4 	.word	0x2000d4e4
	ldr r1, =_SCS_ICSR
    5fac:	e000ed04 	.word	0xe000ed04

00005fb0 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    5fb0:	b570      	push	{r4, r5, r6, lr}
    5fb2:	b084      	sub	sp, #16
    5fb4:	4605      	mov	r5, r0
    5fb6:	460e      	mov	r6, r1
    5fb8:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    5fba:	4b47      	ldr	r3, [pc, #284]	; (60d8 <bus_fault+0x128>)
    5fbc:	9302      	str	r3, [sp, #8]
    5fbe:	2000      	movs	r0, #0
    5fc0:	9001      	str	r0, [sp, #4]
    5fc2:	9000      	str	r0, [sp, #0]
    5fc4:	4603      	mov	r3, r0
    5fc6:	2201      	movs	r2, #1
    5fc8:	4944      	ldr	r1, [pc, #272]	; (60dc <bus_fault+0x12c>)
    5fca:	f009 f98e 	bl	f2ea <z_log_msg2_runtime_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5fce:	4b44      	ldr	r3, [pc, #272]	; (60e0 <bus_fault+0x130>)
    5fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5fd2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    5fd6:	d125      	bne.n	6024 <bus_fault+0x74>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    5fd8:	4b41      	ldr	r3, [pc, #260]	; (60e0 <bus_fault+0x130>)
    5fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5fdc:	f413 6f00 	tst.w	r3, #2048	; 0x800
    5fe0:	d12b      	bne.n	603a <bus_fault+0x8a>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5fe2:	4b3f      	ldr	r3, [pc, #252]	; (60e0 <bus_fault+0x130>)
    5fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5fe6:	f413 7f00 	tst.w	r3, #512	; 0x200
    5fea:	d131      	bne.n	6050 <bus_fault+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    5fec:	4b3c      	ldr	r3, [pc, #240]	; (60e0 <bus_fault+0x130>)
    5fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ff0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5ff4:	d14f      	bne.n	6096 <bus_fault+0xe6>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    5ff6:	4b3a      	ldr	r3, [pc, #232]	; (60e0 <bus_fault+0x130>)
    5ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ffa:	f413 7f80 	tst.w	r3, #256	; 0x100
    5ffe:	d155      	bne.n	60ac <bus_fault+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    6000:	4b37      	ldr	r3, [pc, #220]	; (60e0 <bus_fault+0x130>)
    6002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6004:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    6008:	d15b      	bne.n	60c2 <bus_fault+0x112>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    600a:	4a35      	ldr	r2, [pc, #212]	; (60e0 <bus_fault+0x130>)
    600c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    600e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    6012:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    6014:	2101      	movs	r1, #1
    6016:	4628      	mov	r0, r5
    6018:	f009 f965 	bl	f2e6 <memory_fault_recoverable>
    601c:	7020      	strb	r0, [r4, #0]

	return reason;
}
    601e:	2000      	movs	r0, #0
    6020:	b004      	add	sp, #16
    6022:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
    6024:	4b2f      	ldr	r3, [pc, #188]	; (60e4 <bus_fault+0x134>)
    6026:	9302      	str	r3, [sp, #8]
    6028:	2000      	movs	r0, #0
    602a:	9001      	str	r0, [sp, #4]
    602c:	9000      	str	r0, [sp, #0]
    602e:	4603      	mov	r3, r0
    6030:	2201      	movs	r2, #1
    6032:	492a      	ldr	r1, [pc, #168]	; (60dc <bus_fault+0x12c>)
    6034:	f009 f959 	bl	f2ea <z_log_msg2_runtime_create>
    6038:	e7ce      	b.n	5fd8 <bus_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    603a:	4b2b      	ldr	r3, [pc, #172]	; (60e8 <bus_fault+0x138>)
    603c:	9302      	str	r3, [sp, #8]
    603e:	2000      	movs	r0, #0
    6040:	9001      	str	r0, [sp, #4]
    6042:	9000      	str	r0, [sp, #0]
    6044:	4603      	mov	r3, r0
    6046:	2201      	movs	r2, #1
    6048:	4924      	ldr	r1, [pc, #144]	; (60dc <bus_fault+0x12c>)
    604a:	f009 f94e 	bl	f2ea <z_log_msg2_runtime_create>
    604e:	e7c8      	b.n	5fe2 <bus_fault+0x32>
		PR_FAULT_INFO("  Precise data bus error");
    6050:	4b26      	ldr	r3, [pc, #152]	; (60ec <bus_fault+0x13c>)
    6052:	9302      	str	r3, [sp, #8]
    6054:	2000      	movs	r0, #0
    6056:	9001      	str	r0, [sp, #4]
    6058:	9000      	str	r0, [sp, #0]
    605a:	4603      	mov	r3, r0
    605c:	2201      	movs	r2, #1
    605e:	491f      	ldr	r1, [pc, #124]	; (60dc <bus_fault+0x12c>)
    6060:	f009 f943 	bl	f2ea <z_log_msg2_runtime_create>
		STORE_xFAR(bfar, SCB->BFAR);
    6064:	4b1e      	ldr	r3, [pc, #120]	; (60e0 <bus_fault+0x130>)
    6066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    6068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    606a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    606e:	d0bd      	beq.n	5fec <bus_fault+0x3c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    6070:	9203      	str	r2, [sp, #12]
    6072:	4b1f      	ldr	r3, [pc, #124]	; (60f0 <bus_fault+0x140>)
    6074:	9302      	str	r3, [sp, #8]
    6076:	2000      	movs	r0, #0
    6078:	9001      	str	r0, [sp, #4]
    607a:	9000      	str	r0, [sp, #0]
    607c:	4603      	mov	r3, r0
    607e:	2201      	movs	r2, #1
    6080:	4916      	ldr	r1, [pc, #88]	; (60dc <bus_fault+0x12c>)
    6082:	f009 f932 	bl	f2ea <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    6086:	2e00      	cmp	r6, #0
    6088:	d0b0      	beq.n	5fec <bus_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    608a:	4a15      	ldr	r2, [pc, #84]	; (60e0 <bus_fault+0x130>)
    608c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    608e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6092:	6293      	str	r3, [r2, #40]	; 0x28
    6094:	e7aa      	b.n	5fec <bus_fault+0x3c>
		PR_FAULT_INFO("  Imprecise data bus error");
    6096:	4b17      	ldr	r3, [pc, #92]	; (60f4 <bus_fault+0x144>)
    6098:	9302      	str	r3, [sp, #8]
    609a:	2000      	movs	r0, #0
    609c:	9001      	str	r0, [sp, #4]
    609e:	9000      	str	r0, [sp, #0]
    60a0:	4603      	mov	r3, r0
    60a2:	2201      	movs	r2, #1
    60a4:	490d      	ldr	r1, [pc, #52]	; (60dc <bus_fault+0x12c>)
    60a6:	f009 f920 	bl	f2ea <z_log_msg2_runtime_create>
    60aa:	e7a4      	b.n	5ff6 <bus_fault+0x46>
		PR_FAULT_INFO("  Instruction bus error");
    60ac:	4b12      	ldr	r3, [pc, #72]	; (60f8 <bus_fault+0x148>)
    60ae:	9302      	str	r3, [sp, #8]
    60b0:	2000      	movs	r0, #0
    60b2:	9001      	str	r0, [sp, #4]
    60b4:	9000      	str	r0, [sp, #0]
    60b6:	4603      	mov	r3, r0
    60b8:	2201      	movs	r2, #1
    60ba:	4908      	ldr	r1, [pc, #32]	; (60dc <bus_fault+0x12c>)
    60bc:	f009 f915 	bl	f2ea <z_log_msg2_runtime_create>
    60c0:	e7a3      	b.n	600a <bus_fault+0x5a>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    60c2:	4b0e      	ldr	r3, [pc, #56]	; (60fc <bus_fault+0x14c>)
    60c4:	9302      	str	r3, [sp, #8]
    60c6:	2000      	movs	r0, #0
    60c8:	9001      	str	r0, [sp, #4]
    60ca:	9000      	str	r0, [sp, #0]
    60cc:	4603      	mov	r3, r0
    60ce:	2201      	movs	r2, #1
    60d0:	4902      	ldr	r1, [pc, #8]	; (60dc <bus_fault+0x12c>)
    60d2:	f009 f90a 	bl	f2ea <z_log_msg2_runtime_create>
    60d6:	e798      	b.n	600a <bus_fault+0x5a>
    60d8:	00011e74 	.word	0x00011e74
    60dc:	00010f08 	.word	0x00010f08
    60e0:	e000ed00 	.word	0xe000ed00
    60e4:	00011e8c 	.word	0x00011e8c
    60e8:	00011ea0 	.word	0x00011ea0
    60ec:	00011eb4 	.word	0x00011eb4
    60f0:	00011ed0 	.word	0x00011ed0
    60f4:	00011ee8 	.word	0x00011ee8
    60f8:	00011f04 	.word	0x00011f04
    60fc:	00011f1c 	.word	0x00011f1c

00006100 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    6100:	b500      	push	{lr}
    6102:	b085      	sub	sp, #20
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    6104:	4b3a      	ldr	r3, [pc, #232]	; (61f0 <usage_fault+0xf0>)
    6106:	9302      	str	r3, [sp, #8]
    6108:	2000      	movs	r0, #0
    610a:	9001      	str	r0, [sp, #4]
    610c:	9000      	str	r0, [sp, #0]
    610e:	4603      	mov	r3, r0
    6110:	2201      	movs	r2, #1
    6112:	4938      	ldr	r1, [pc, #224]	; (61f4 <usage_fault+0xf4>)
    6114:	f009 f8e9 	bl	f2ea <z_log_msg2_runtime_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6118:	4b37      	ldr	r3, [pc, #220]	; (61f8 <usage_fault+0xf8>)
    611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    611c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    6120:	d123      	bne.n	616a <usage_fault+0x6a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    6122:	4b35      	ldr	r3, [pc, #212]	; (61f8 <usage_fault+0xf8>)
    6124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6126:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    612a:	d129      	bne.n	6180 <usage_fault+0x80>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    612c:	4b32      	ldr	r3, [pc, #200]	; (61f8 <usage_fault+0xf8>)
    612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6130:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    6134:	d12f      	bne.n	6196 <usage_fault+0x96>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    6136:	4b30      	ldr	r3, [pc, #192]	; (61f8 <usage_fault+0xf8>)
    6138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    613a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    613e:	d135      	bne.n	61ac <usage_fault+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    6140:	4b2d      	ldr	r3, [pc, #180]	; (61f8 <usage_fault+0xf8>)
    6142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6144:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    6148:	d13b      	bne.n	61c2 <usage_fault+0xc2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    614a:	4b2b      	ldr	r3, [pc, #172]	; (61f8 <usage_fault+0xf8>)
    614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    614e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6152:	d141      	bne.n	61d8 <usage_fault+0xd8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6154:	4a28      	ldr	r2, [pc, #160]	; (61f8 <usage_fault+0xf8>)
    6156:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6158:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    615c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    6160:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    6162:	2000      	movs	r0, #0
    6164:	b005      	add	sp, #20
    6166:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    616a:	4b24      	ldr	r3, [pc, #144]	; (61fc <usage_fault+0xfc>)
    616c:	9302      	str	r3, [sp, #8]
    616e:	2000      	movs	r0, #0
    6170:	9001      	str	r0, [sp, #4]
    6172:	9000      	str	r0, [sp, #0]
    6174:	4603      	mov	r3, r0
    6176:	2201      	movs	r2, #1
    6178:	491e      	ldr	r1, [pc, #120]	; (61f4 <usage_fault+0xf4>)
    617a:	f009 f8b6 	bl	f2ea <z_log_msg2_runtime_create>
    617e:	e7d0      	b.n	6122 <usage_fault+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    6180:	4b1f      	ldr	r3, [pc, #124]	; (6200 <usage_fault+0x100>)
    6182:	9302      	str	r3, [sp, #8]
    6184:	2000      	movs	r0, #0
    6186:	9001      	str	r0, [sp, #4]
    6188:	9000      	str	r0, [sp, #0]
    618a:	4603      	mov	r3, r0
    618c:	2201      	movs	r2, #1
    618e:	4919      	ldr	r1, [pc, #100]	; (61f4 <usage_fault+0xf4>)
    6190:	f009 f8ab 	bl	f2ea <z_log_msg2_runtime_create>
    6194:	e7ca      	b.n	612c <usage_fault+0x2c>
		PR_FAULT_INFO("  No coprocessor instructions");
    6196:	4b1b      	ldr	r3, [pc, #108]	; (6204 <usage_fault+0x104>)
    6198:	9302      	str	r3, [sp, #8]
    619a:	2000      	movs	r0, #0
    619c:	9001      	str	r0, [sp, #4]
    619e:	9000      	str	r0, [sp, #0]
    61a0:	4603      	mov	r3, r0
    61a2:	2201      	movs	r2, #1
    61a4:	4913      	ldr	r1, [pc, #76]	; (61f4 <usage_fault+0xf4>)
    61a6:	f009 f8a0 	bl	f2ea <z_log_msg2_runtime_create>
    61aa:	e7c4      	b.n	6136 <usage_fault+0x36>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    61ac:	4b16      	ldr	r3, [pc, #88]	; (6208 <usage_fault+0x108>)
    61ae:	9302      	str	r3, [sp, #8]
    61b0:	2000      	movs	r0, #0
    61b2:	9001      	str	r0, [sp, #4]
    61b4:	9000      	str	r0, [sp, #0]
    61b6:	4603      	mov	r3, r0
    61b8:	2201      	movs	r2, #1
    61ba:	490e      	ldr	r1, [pc, #56]	; (61f4 <usage_fault+0xf4>)
    61bc:	f009 f895 	bl	f2ea <z_log_msg2_runtime_create>
    61c0:	e7be      	b.n	6140 <usage_fault+0x40>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    61c2:	4b12      	ldr	r3, [pc, #72]	; (620c <usage_fault+0x10c>)
    61c4:	9302      	str	r3, [sp, #8]
    61c6:	2000      	movs	r0, #0
    61c8:	9001      	str	r0, [sp, #4]
    61ca:	9000      	str	r0, [sp, #0]
    61cc:	4603      	mov	r3, r0
    61ce:	2201      	movs	r2, #1
    61d0:	4908      	ldr	r1, [pc, #32]	; (61f4 <usage_fault+0xf4>)
    61d2:	f009 f88a 	bl	f2ea <z_log_msg2_runtime_create>
    61d6:	e7b8      	b.n	614a <usage_fault+0x4a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    61d8:	4b0d      	ldr	r3, [pc, #52]	; (6210 <usage_fault+0x110>)
    61da:	9302      	str	r3, [sp, #8]
    61dc:	2000      	movs	r0, #0
    61de:	9001      	str	r0, [sp, #4]
    61e0:	9000      	str	r0, [sp, #0]
    61e2:	4603      	mov	r3, r0
    61e4:	2201      	movs	r2, #1
    61e6:	4903      	ldr	r1, [pc, #12]	; (61f4 <usage_fault+0xf4>)
    61e8:	f009 f87f 	bl	f2ea <z_log_msg2_runtime_create>
    61ec:	e7b2      	b.n	6154 <usage_fault+0x54>
    61ee:	bf00      	nop
    61f0:	00011f4c 	.word	0x00011f4c
    61f4:	00010f08 	.word	0x00010f08
    61f8:	e000ed00 	.word	0xe000ed00
    61fc:	00011f64 	.word	0x00011f64
    6200:	00011f78 	.word	0x00011f78
    6204:	00011f94 	.word	0x00011f94
    6208:	00011fb4 	.word	0x00011fb4
    620c:	00011fdc 	.word	0x00011fdc
    6210:	00011ff8 	.word	0x00011ff8

00006214 <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    6214:	b500      	push	{lr}
    6216:	b085      	sub	sp, #20
	*recoverable = false;
    6218:	2000      	movs	r0, #0
    621a:	7008      	strb	r0, [r1, #0]

	PR_FAULT_INFO(
    621c:	4b05      	ldr	r3, [pc, #20]	; (6234 <debug_monitor+0x20>)
    621e:	9302      	str	r3, [sp, #8]
    6220:	9001      	str	r0, [sp, #4]
    6222:	9000      	str	r0, [sp, #0]
    6224:	4603      	mov	r3, r0
    6226:	2201      	movs	r2, #1
    6228:	4903      	ldr	r1, [pc, #12]	; (6238 <debug_monitor+0x24>)
    622a:	f009 f85e 	bl	f2ea <z_log_msg2_runtime_create>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    622e:	b005      	add	sp, #20
    6230:	f85d fb04 	ldr.w	pc, [sp], #4
    6234:	00012024 	.word	0x00012024
    6238:	00010f08 	.word	0x00010f08

0000623c <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    623c:	b500      	push	{lr}
    623e:	b087      	sub	sp, #28
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    6240:	290f      	cmp	r1, #15
    6242:	dc10      	bgt.n	6266 <reserved_exception+0x2a>
    6244:	4b09      	ldr	r3, [pc, #36]	; (626c <reserved_exception+0x30>)
    6246:	3910      	subs	r1, #16
    6248:	9104      	str	r1, [sp, #16]
    624a:	9303      	str	r3, [sp, #12]
    624c:	4b08      	ldr	r3, [pc, #32]	; (6270 <reserved_exception+0x34>)
    624e:	9302      	str	r3, [sp, #8]
    6250:	2000      	movs	r0, #0
    6252:	9001      	str	r0, [sp, #4]
    6254:	9000      	str	r0, [sp, #0]
    6256:	4603      	mov	r3, r0
    6258:	2201      	movs	r2, #1
    625a:	4906      	ldr	r1, [pc, #24]	; (6274 <reserved_exception+0x38>)
    625c:	f009 f845 	bl	f2ea <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    6260:	b007      	add	sp, #28
    6262:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
    6266:	4b04      	ldr	r3, [pc, #16]	; (6278 <reserved_exception+0x3c>)
    6268:	e7ed      	b.n	6246 <reserved_exception+0xa>
    626a:	bf00      	nop
    626c:	00012064 	.word	0x00012064
    6270:	0001207c 	.word	0x0001207c
    6274:	00010f08 	.word	0x00010f08
    6278:	00012048 	.word	0x00012048

0000627c <mem_manage_fault>:
{
    627c:	b5f0      	push	{r4, r5, r6, r7, lr}
    627e:	b085      	sub	sp, #20
    6280:	4605      	mov	r5, r0
    6282:	460c      	mov	r4, r1
    6284:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    6286:	4b5f      	ldr	r3, [pc, #380]	; (6404 <mem_manage_fault+0x188>)
    6288:	9302      	str	r3, [sp, #8]
    628a:	2000      	movs	r0, #0
    628c:	9001      	str	r0, [sp, #4]
    628e:	9000      	str	r0, [sp, #0]
    6290:	4603      	mov	r3, r0
    6292:	2201      	movs	r2, #1
    6294:	495c      	ldr	r1, [pc, #368]	; (6408 <mem_manage_fault+0x18c>)
    6296:	f009 f828 	bl	f2ea <z_log_msg2_runtime_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    629a:	4b5c      	ldr	r3, [pc, #368]	; (640c <mem_manage_fault+0x190>)
    629c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    629e:	f013 0f10 	tst.w	r3, #16
    62a2:	d13b      	bne.n	631c <mem_manage_fault+0xa0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    62a4:	4b59      	ldr	r3, [pc, #356]	; (640c <mem_manage_fault+0x190>)
    62a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62a8:	f013 0f08 	tst.w	r3, #8
    62ac:	d141      	bne.n	6332 <mem_manage_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    62ae:	4b57      	ldr	r3, [pc, #348]	; (640c <mem_manage_fault+0x190>)
    62b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62b2:	f013 0f02 	tst.w	r3, #2
    62b6:	d147      	bne.n	6348 <mem_manage_fault+0xcc>
	uint32_t mmfar = -EINVAL;
    62b8:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    62bc:	4b53      	ldr	r3, [pc, #332]	; (640c <mem_manage_fault+0x190>)
    62be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62c0:	f013 0f01 	tst.w	r3, #1
    62c4:	d166      	bne.n	6394 <mem_manage_fault+0x118>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    62c6:	4b51      	ldr	r3, [pc, #324]	; (640c <mem_manage_fault+0x190>)
    62c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62ca:	f013 0f20 	tst.w	r3, #32
    62ce:	d16c      	bne.n	63aa <mem_manage_fault+0x12e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    62d0:	4b4e      	ldr	r3, [pc, #312]	; (640c <mem_manage_fault+0x190>)
    62d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62d4:	f013 0f10 	tst.w	r3, #16
    62d8:	d104      	bne.n	62e4 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    62da:	4b4c      	ldr	r3, [pc, #304]	; (640c <mem_manage_fault+0x190>)
    62dc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    62de:	f014 0402 	ands.w	r4, r4, #2
    62e2:	d004      	beq.n	62ee <mem_manage_fault+0x72>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    62e4:	4b49      	ldr	r3, [pc, #292]	; (640c <mem_manage_fault+0x190>)
    62e6:	685c      	ldr	r4, [r3, #4]
    62e8:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    62ec:	d168      	bne.n	63c0 <mem_manage_fault+0x144>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    62ee:	4b47      	ldr	r3, [pc, #284]	; (640c <mem_manage_fault+0x190>)
    62f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62f2:	f013 0f20 	tst.w	r3, #32
    62f6:	d004      	beq.n	6302 <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    62f8:	4a44      	ldr	r2, [pc, #272]	; (640c <mem_manage_fault+0x190>)
    62fa:	6a53      	ldr	r3, [r2, #36]	; 0x24
    62fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    6300:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    6302:	4a42      	ldr	r2, [pc, #264]	; (640c <mem_manage_fault+0x190>)
    6304:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6306:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    630a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    630c:	2101      	movs	r1, #1
    630e:	4628      	mov	r0, r5
    6310:	f008 ffe9 	bl	f2e6 <memory_fault_recoverable>
    6314:	7030      	strb	r0, [r6, #0]
}
    6316:	4620      	mov	r0, r4
    6318:	b005      	add	sp, #20
    631a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    631c:	4b3c      	ldr	r3, [pc, #240]	; (6410 <mem_manage_fault+0x194>)
    631e:	9302      	str	r3, [sp, #8]
    6320:	2000      	movs	r0, #0
    6322:	9001      	str	r0, [sp, #4]
    6324:	9000      	str	r0, [sp, #0]
    6326:	4603      	mov	r3, r0
    6328:	2201      	movs	r2, #1
    632a:	4937      	ldr	r1, [pc, #220]	; (6408 <mem_manage_fault+0x18c>)
    632c:	f008 ffdd 	bl	f2ea <z_log_msg2_runtime_create>
    6330:	e7b8      	b.n	62a4 <mem_manage_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    6332:	4b38      	ldr	r3, [pc, #224]	; (6414 <mem_manage_fault+0x198>)
    6334:	9302      	str	r3, [sp, #8]
    6336:	2000      	movs	r0, #0
    6338:	9001      	str	r0, [sp, #4]
    633a:	9000      	str	r0, [sp, #0]
    633c:	4603      	mov	r3, r0
    633e:	2201      	movs	r2, #1
    6340:	4931      	ldr	r1, [pc, #196]	; (6408 <mem_manage_fault+0x18c>)
    6342:	f008 ffd2 	bl	f2ea <z_log_msg2_runtime_create>
    6346:	e7b2      	b.n	62ae <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Data Access Violation");
    6348:	4b33      	ldr	r3, [pc, #204]	; (6418 <mem_manage_fault+0x19c>)
    634a:	9302      	str	r3, [sp, #8]
    634c:	2000      	movs	r0, #0
    634e:	9001      	str	r0, [sp, #4]
    6350:	9000      	str	r0, [sp, #0]
    6352:	4603      	mov	r3, r0
    6354:	2201      	movs	r2, #1
    6356:	492c      	ldr	r1, [pc, #176]	; (6408 <mem_manage_fault+0x18c>)
    6358:	f008 ffc7 	bl	f2ea <z_log_msg2_runtime_create>
		uint32_t temp = SCB->MMFAR;
    635c:	4b2b      	ldr	r3, [pc, #172]	; (640c <mem_manage_fault+0x190>)
    635e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    6360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6362:	f013 0f80 	tst.w	r3, #128	; 0x80
    6366:	d102      	bne.n	636e <mem_manage_fault+0xf2>
	uint32_t mmfar = -EINVAL;
    6368:	f06f 0715 	mvn.w	r7, #21
    636c:	e7a6      	b.n	62bc <mem_manage_fault+0x40>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    636e:	9703      	str	r7, [sp, #12]
    6370:	4b2a      	ldr	r3, [pc, #168]	; (641c <mem_manage_fault+0x1a0>)
    6372:	9302      	str	r3, [sp, #8]
    6374:	2000      	movs	r0, #0
    6376:	9001      	str	r0, [sp, #4]
    6378:	9000      	str	r0, [sp, #0]
    637a:	4603      	mov	r3, r0
    637c:	2201      	movs	r2, #1
    637e:	4922      	ldr	r1, [pc, #136]	; (6408 <mem_manage_fault+0x18c>)
    6380:	f008 ffb3 	bl	f2ea <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    6384:	2c00      	cmp	r4, #0
    6386:	d099      	beq.n	62bc <mem_manage_fault+0x40>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    6388:	4a20      	ldr	r2, [pc, #128]	; (640c <mem_manage_fault+0x190>)
    638a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    638c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6390:	6293      	str	r3, [r2, #40]	; 0x28
    6392:	e793      	b.n	62bc <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Instruction Access Violation");
    6394:	4b22      	ldr	r3, [pc, #136]	; (6420 <mem_manage_fault+0x1a4>)
    6396:	9302      	str	r3, [sp, #8]
    6398:	2000      	movs	r0, #0
    639a:	9001      	str	r0, [sp, #4]
    639c:	9000      	str	r0, [sp, #0]
    639e:	4603      	mov	r3, r0
    63a0:	2201      	movs	r2, #1
    63a2:	4919      	ldr	r1, [pc, #100]	; (6408 <mem_manage_fault+0x18c>)
    63a4:	f008 ffa1 	bl	f2ea <z_log_msg2_runtime_create>
    63a8:	e78d      	b.n	62c6 <mem_manage_fault+0x4a>
		PR_FAULT_INFO(
    63aa:	4b1e      	ldr	r3, [pc, #120]	; (6424 <mem_manage_fault+0x1a8>)
    63ac:	9302      	str	r3, [sp, #8]
    63ae:	2000      	movs	r0, #0
    63b0:	9001      	str	r0, [sp, #4]
    63b2:	9000      	str	r0, [sp, #0]
    63b4:	4603      	mov	r3, r0
    63b6:	2201      	movs	r2, #1
    63b8:	4913      	ldr	r1, [pc, #76]	; (6408 <mem_manage_fault+0x18c>)
    63ba:	f008 ff96 	bl	f2ea <z_log_msg2_runtime_create>
    63be:	e787      	b.n	62d0 <mem_manage_fault+0x54>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    63c0:	4629      	mov	r1, r5
    63c2:	4638      	mov	r0, r7
    63c4:	f7ff fd88 	bl	5ed8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    63c8:	4607      	mov	r7, r0
    63ca:	b9b0      	cbnz	r0, 63fa <mem_manage_fault+0x17e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    63cc:	4b0f      	ldr	r3, [pc, #60]	; (640c <mem_manage_fault+0x190>)
    63ce:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    63d0:	f014 0410 	ands.w	r4, r4, #16
    63d4:	d08b      	beq.n	62ee <mem_manage_fault+0x72>
    63d6:	4c14      	ldr	r4, [pc, #80]	; (6428 <mem_manage_fault+0x1ac>)
    63d8:	f240 1349 	movw	r3, #329	; 0x149
    63dc:	4622      	mov	r2, r4
    63de:	4913      	ldr	r1, [pc, #76]	; (642c <mem_manage_fault+0x1b0>)
    63e0:	4813      	ldr	r0, [pc, #76]	; (6430 <mem_manage_fault+0x1b4>)
    63e2:	f008 fe9f 	bl	f124 <assert_print>
    63e6:	4813      	ldr	r0, [pc, #76]	; (6434 <mem_manage_fault+0x1b8>)
    63e8:	f008 fe9c 	bl	f124 <assert_print>
    63ec:	f240 1149 	movw	r1, #329	; 0x149
    63f0:	4620      	mov	r0, r4
    63f2:	f008 fe90 	bl	f116 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    63f6:	463c      	mov	r4, r7
    63f8:	e779      	b.n	62ee <mem_manage_fault+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    63fa:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    63fe:	2402      	movs	r4, #2
    6400:	e775      	b.n	62ee <mem_manage_fault+0x72>
    6402:	bf00      	nop
    6404:	00012090 	.word	0x00012090
    6408:	00010f08 	.word	0x00010f08
    640c:	e000ed00 	.word	0xe000ed00
    6410:	000120a8 	.word	0x000120a8
    6414:	00011ea0 	.word	0x00011ea0
    6418:	000120dc 	.word	0x000120dc
    641c:	000120f4 	.word	0x000120f4
    6420:	0001210c 	.word	0x0001210c
    6424:	00011f1c 	.word	0x00011f1c
    6428:	0001212c 	.word	0x0001212c
    642c:	00012168 	.word	0x00012168
    6430:	00011514 	.word	0x00011514
    6434:	000121b4 	.word	0x000121b4

00006438 <hard_fault>:
{
    6438:	b5f0      	push	{r4, r5, r6, r7, lr}
    643a:	b085      	sub	sp, #20
    643c:	4607      	mov	r7, r0
    643e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    6440:	4b4b      	ldr	r3, [pc, #300]	; (6570 <hard_fault+0x138>)
    6442:	9302      	str	r3, [sp, #8]
    6444:	2400      	movs	r4, #0
    6446:	9401      	str	r4, [sp, #4]
    6448:	9400      	str	r4, [sp, #0]
    644a:	4623      	mov	r3, r4
    644c:	2201      	movs	r2, #1
    644e:	4949      	ldr	r1, [pc, #292]	; (6574 <hard_fault+0x13c>)
    6450:	4620      	mov	r0, r4
    6452:	f008 ff4a 	bl	f2ea <z_log_msg2_runtime_create>
	*recoverable = false;
    6456:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6458:	4b47      	ldr	r3, [pc, #284]	; (6578 <hard_fault+0x140>)
    645a:	6add      	ldr	r5, [r3, #44]	; 0x2c
    645c:	f015 0502 	ands.w	r5, r5, #2
    6460:	d12d      	bne.n	64be <hard_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    6462:	4b45      	ldr	r3, [pc, #276]	; (6578 <hard_fault+0x140>)
    6464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6466:	2b00      	cmp	r3, #0
    6468:	db36      	blt.n	64d8 <hard_fault+0xa0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    646a:	4b43      	ldr	r3, [pc, #268]	; (6578 <hard_fault+0x140>)
    646c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    646e:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    6472:	d06b      	beq.n	654c <hard_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    6474:	4b41      	ldr	r3, [pc, #260]	; (657c <hard_fault+0x144>)
    6476:	9302      	str	r3, [sp, #8]
    6478:	2000      	movs	r0, #0
    647a:	9001      	str	r0, [sp, #4]
    647c:	9000      	str	r0, [sp, #0]
    647e:	4603      	mov	r3, r0
    6480:	2201      	movs	r2, #1
    6482:	493c      	ldr	r1, [pc, #240]	; (6574 <hard_fault+0x13c>)
    6484:	f008 ff31 	bl	f2ea <z_log_msg2_runtime_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    6488:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    648a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    648e:	f64d 7302 	movw	r3, #57090	; 0xdf02
    6492:	429a      	cmp	r2, r3
    6494:	d02c      	beq.n	64f0 <hard_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
    6496:	4b38      	ldr	r3, [pc, #224]	; (6578 <hard_fault+0x140>)
    6498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    649c:	2b00      	cmp	r3, #0
    649e:	d135      	bne.n	650c <hard_fault+0xd4>
		} else if (SCB_BFSR != 0) {
    64a0:	4b35      	ldr	r3, [pc, #212]	; (6578 <hard_fault+0x140>)
    64a2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    64a6:	2b00      	cmp	r3, #0
    64a8:	d137      	bne.n	651a <hard_fault+0xe2>
		} else if (SCB_UFSR != 0) {
    64aa:	4b33      	ldr	r3, [pc, #204]	; (6578 <hard_fault+0x140>)
    64ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    64ae:	b29b      	uxth	r3, r3
    64b0:	2b00      	cmp	r3, #0
    64b2:	d039      	beq.n	6528 <hard_fault+0xf0>
			reason = usage_fault(esf);
    64b4:	4638      	mov	r0, r7
    64b6:	f7ff fe23 	bl	6100 <usage_fault>
    64ba:	4604      	mov	r4, r0
    64bc:	e009      	b.n	64d2 <hard_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    64be:	4b30      	ldr	r3, [pc, #192]	; (6580 <hard_fault+0x148>)
    64c0:	9302      	str	r3, [sp, #8]
    64c2:	9401      	str	r4, [sp, #4]
    64c4:	9400      	str	r4, [sp, #0]
    64c6:	4623      	mov	r3, r4
    64c8:	2201      	movs	r2, #1
    64ca:	492a      	ldr	r1, [pc, #168]	; (6574 <hard_fault+0x13c>)
    64cc:	4620      	mov	r0, r4
    64ce:	f008 ff0c 	bl	f2ea <z_log_msg2_runtime_create>
}
    64d2:	4620      	mov	r0, r4
    64d4:	b005      	add	sp, #20
    64d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
    64d8:	4b2a      	ldr	r3, [pc, #168]	; (6584 <hard_fault+0x14c>)
    64da:	9302      	str	r3, [sp, #8]
    64dc:	2000      	movs	r0, #0
    64de:	9001      	str	r0, [sp, #4]
    64e0:	9000      	str	r0, [sp, #0]
    64e2:	4603      	mov	r3, r0
    64e4:	2201      	movs	r2, #1
    64e6:	4923      	ldr	r1, [pc, #140]	; (6574 <hard_fault+0x13c>)
    64e8:	f008 feff 	bl	f2ea <z_log_msg2_runtime_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    64ec:	462c      	mov	r4, r5
    64ee:	e7f0      	b.n	64d2 <hard_fault+0x9a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    64f0:	683b      	ldr	r3, [r7, #0]
    64f2:	9303      	str	r3, [sp, #12]
    64f4:	4b24      	ldr	r3, [pc, #144]	; (6588 <hard_fault+0x150>)
    64f6:	9302      	str	r3, [sp, #8]
    64f8:	2000      	movs	r0, #0
    64fa:	9001      	str	r0, [sp, #4]
    64fc:	9000      	str	r0, [sp, #0]
    64fe:	4603      	mov	r3, r0
    6500:	2201      	movs	r2, #1
    6502:	491c      	ldr	r1, [pc, #112]	; (6574 <hard_fault+0x13c>)
    6504:	f008 fef1 	bl	f2ea <z_log_msg2_runtime_create>
			reason = esf->basic.r0;
    6508:	683c      	ldr	r4, [r7, #0]
    650a:	e7e2      	b.n	64d2 <hard_fault+0x9a>
			reason = mem_manage_fault(esf, 1, recoverable);
    650c:	4632      	mov	r2, r6
    650e:	2101      	movs	r1, #1
    6510:	4638      	mov	r0, r7
    6512:	f7ff feb3 	bl	627c <mem_manage_fault>
    6516:	4604      	mov	r4, r0
    6518:	e7db      	b.n	64d2 <hard_fault+0x9a>
			reason = bus_fault(esf, 1, recoverable);
    651a:	4632      	mov	r2, r6
    651c:	2101      	movs	r1, #1
    651e:	4638      	mov	r0, r7
    6520:	f7ff fd46 	bl	5fb0 <bus_fault>
    6524:	4604      	mov	r4, r0
    6526:	e7d4      	b.n	64d2 <hard_fault+0x9a>
			__ASSERT(0,
    6528:	4c18      	ldr	r4, [pc, #96]	; (658c <hard_fault+0x154>)
    652a:	f240 23cd 	movw	r3, #717	; 0x2cd
    652e:	4622      	mov	r2, r4
    6530:	4917      	ldr	r1, [pc, #92]	; (6590 <hard_fault+0x158>)
    6532:	4818      	ldr	r0, [pc, #96]	; (6594 <hard_fault+0x15c>)
    6534:	f008 fdf6 	bl	f124 <assert_print>
    6538:	4817      	ldr	r0, [pc, #92]	; (6598 <hard_fault+0x160>)
    653a:	f008 fdf3 	bl	f124 <assert_print>
    653e:	f240 21cd 	movw	r1, #717	; 0x2cd
    6542:	4620      	mov	r0, r4
    6544:	f008 fde7 	bl	f116 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6548:	462c      	mov	r4, r5
    654a:	e7c2      	b.n	64d2 <hard_fault+0x9a>
		__ASSERT(0,
    654c:	4d0f      	ldr	r5, [pc, #60]	; (658c <hard_fault+0x154>)
    654e:	f240 23d1 	movw	r3, #721	; 0x2d1
    6552:	462a      	mov	r2, r5
    6554:	490e      	ldr	r1, [pc, #56]	; (6590 <hard_fault+0x158>)
    6556:	480f      	ldr	r0, [pc, #60]	; (6594 <hard_fault+0x15c>)
    6558:	f008 fde4 	bl	f124 <assert_print>
    655c:	480f      	ldr	r0, [pc, #60]	; (659c <hard_fault+0x164>)
    655e:	f008 fde1 	bl	f124 <assert_print>
    6562:	f240 21d1 	movw	r1, #721	; 0x2d1
    6566:	4628      	mov	r0, r5
    6568:	f008 fdd5 	bl	f116 <assert_post_action>
	return reason;
    656c:	e7b1      	b.n	64d2 <hard_fault+0x9a>
    656e:	bf00      	nop
    6570:	000121d8 	.word	0x000121d8
    6574:	00010f08 	.word	0x00010f08
    6578:	e000ed00 	.word	0xe000ed00
    657c:	00012224 	.word	0x00012224
    6580:	000121f0 	.word	0x000121f0
    6584:	00012214 	.word	0x00012214
    6588:	00012244 	.word	0x00012244
    658c:	0001212c 	.word	0x0001212c
    6590:	00011bd0 	.word	0x00011bd0
    6594:	00011514 	.word	0x00011514
    6598:	00012260 	.word	0x00012260
    659c:	00012284 	.word	0x00012284

000065a0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    65a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    65a2:	b08f      	sub	sp, #60	; 0x3c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    65a4:	4b35      	ldr	r3, [pc, #212]	; (667c <z_arm_fault+0xdc>)
    65a6:	685d      	ldr	r5, [r3, #4]
    65a8:	f3c5 0508 	ubfx	r5, r5, #0, #9
    65ac:	2300      	movs	r3, #0
    65ae:	f383 8811 	msr	BASEPRI, r3
    65b2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    65b6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    65ba:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    65be:	d125      	bne.n	660c <z_arm_fault+0x6c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    65c0:	f002 030c 	and.w	r3, r2, #12
    65c4:	2b08      	cmp	r3, #8
    65c6:	d011      	beq.n	65ec <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    65c8:	f012 0f08 	tst.w	r2, #8
    65cc:	d01b      	beq.n	6606 <z_arm_fault+0x66>
			ptr_esf =  (z_arch_esf_t *)psp;
    65ce:	460c      	mov	r4, r1
	*nested_exc = false;
    65d0:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    65d2:	b1f4      	cbz	r4, 6612 <z_arm_fault+0x72>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    65d4:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    65d8:	4629      	mov	r1, r5
    65da:	4620      	mov	r0, r4
    65dc:	f008 fe94 	bl	f308 <fault_handle>
    65e0:	4605      	mov	r5, r0
	if (recoverable) {
    65e2:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    65e6:	b32b      	cbz	r3, 6634 <z_arm_fault+0x94>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    65e8:	b00f      	add	sp, #60	; 0x3c
    65ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    65ec:	4b24      	ldr	r3, [pc, #144]	; (6680 <z_arm_fault+0xe0>)
    65ee:	9302      	str	r3, [sp, #8]
    65f0:	2400      	movs	r4, #0
    65f2:	9401      	str	r4, [sp, #4]
    65f4:	9400      	str	r4, [sp, #0]
    65f6:	4623      	mov	r3, r4
    65f8:	2201      	movs	r2, #1
    65fa:	4922      	ldr	r1, [pc, #136]	; (6684 <z_arm_fault+0xe4>)
    65fc:	4620      	mov	r0, r4
    65fe:	f008 fe74 	bl	f2ea <z_log_msg2_runtime_create>
	*nested_exc = false;
    6602:	4626      	mov	r6, r4
		return NULL;
    6604:	e7e5      	b.n	65d2 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    6606:	4604      	mov	r4, r0
			*nested_exc = true;
    6608:	2601      	movs	r6, #1
    660a:	e7e2      	b.n	65d2 <z_arm_fault+0x32>
	*nested_exc = false;
    660c:	2600      	movs	r6, #0
		return NULL;
    660e:	4634      	mov	r4, r6
    6610:	e7df      	b.n	65d2 <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
    6612:	4f1d      	ldr	r7, [pc, #116]	; (6688 <z_arm_fault+0xe8>)
    6614:	f240 33fb 	movw	r3, #1019	; 0x3fb
    6618:	463a      	mov	r2, r7
    661a:	491c      	ldr	r1, [pc, #112]	; (668c <z_arm_fault+0xec>)
    661c:	481c      	ldr	r0, [pc, #112]	; (6690 <z_arm_fault+0xf0>)
    661e:	f008 fd81 	bl	f124 <assert_print>
    6622:	481c      	ldr	r0, [pc, #112]	; (6694 <z_arm_fault+0xf4>)
    6624:	f008 fd7e 	bl	f124 <assert_print>
    6628:	f240 31fb 	movw	r1, #1019	; 0x3fb
    662c:	4638      	mov	r0, r7
    662e:	f008 fd72 	bl	f116 <assert_post_action>
    6632:	e7cf      	b.n	65d4 <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    6634:	f10d 0c14 	add.w	ip, sp, #20
    6638:	6820      	ldr	r0, [r4, #0]
    663a:	6861      	ldr	r1, [r4, #4]
    663c:	68a2      	ldr	r2, [r4, #8]
    663e:	68e3      	ldr	r3, [r4, #12]
    6640:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    6644:	6920      	ldr	r0, [r4, #16]
    6646:	6961      	ldr	r1, [r4, #20]
    6648:	69a2      	ldr	r2, [r4, #24]
    664a:	69e3      	ldr	r3, [r4, #28]
    664c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
    6650:	b146      	cbz	r6, 6664 <z_arm_fault+0xc4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    6652:	f3c3 0208 	ubfx	r2, r3, #0, #9
    6656:	b95a      	cbnz	r2, 6670 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    6658:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    665c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    6660:	930c      	str	r3, [sp, #48]	; 0x30
    6662:	e005      	b.n	6670 <z_arm_fault+0xd0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6666:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    666a:	f023 0301 	bic.w	r3, r3, #1
    666e:	930c      	str	r3, [sp, #48]	; 0x30
	z_arm_fatal_error(reason, &esf_copy);
    6670:	a905      	add	r1, sp, #20
    6672:	4628      	mov	r0, r5
    6674:	f008 fe19 	bl	f2aa <z_arm_fatal_error>
    6678:	e7b6      	b.n	65e8 <z_arm_fault+0x48>
    667a:	bf00      	nop
    667c:	e000ed00 	.word	0xe000ed00
    6680:	000122b4 	.word	0x000122b4
    6684:	00010f08 	.word	0x00010f08
    6688:	0001212c 	.word	0x0001212c
    668c:	000122e0 	.word	0x000122e0
    6690:	00011514 	.word	0x00011514
    6694:	000122f4 	.word	0x000122f4

00006698 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6698:	4a02      	ldr	r2, [pc, #8]	; (66a4 <z_arm_fault_init+0xc>)
    669a:	6953      	ldr	r3, [r2, #20]
    669c:	f043 0310 	orr.w	r3, r3, #16
    66a0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    66a2:	4770      	bx	lr
    66a4:	e000ed00 	.word	0xe000ed00

000066a8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    66a8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    66ac:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    66b0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    66b2:	4672      	mov	r2, lr
	bl z_arm_fault
    66b4:	f7ff ff74 	bl	65a0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    66b8:	bd01      	pop	{r0, pc}
    66ba:	bf00      	nop

000066bc <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    66bc:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    66be:	e006      	b.n	66ce <z_arm_interrupt_init+0x12>
    66c0:	f002 010f 	and.w	r1, r2, #15
    66c4:	4b09      	ldr	r3, [pc, #36]	; (66ec <z_arm_interrupt_init+0x30>)
    66c6:	440b      	add	r3, r1
    66c8:	2120      	movs	r1, #32
    66ca:	7619      	strb	r1, [r3, #24]
    66cc:	3201      	adds	r2, #1
    66ce:	2a2f      	cmp	r2, #47	; 0x2f
    66d0:	dc0a      	bgt.n	66e8 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    66d2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    66d4:	2b00      	cmp	r3, #0
    66d6:	dbf3      	blt.n	66c0 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    66d8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    66dc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    66e0:	2120      	movs	r1, #32
    66e2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    66e6:	e7f1      	b.n	66cc <z_arm_interrupt_init+0x10>
	}
}
    66e8:	4770      	bx	lr
    66ea:	bf00      	nop
    66ec:	e000ecfc 	.word	0xe000ecfc

000066f0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    66f0:	2000      	movs	r0, #0
    msr CONTROL, r0
    66f2:	f380 8814 	msr	CONTROL, r0
    isb
    66f6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    66fa:	f00a fab3 	bl	10c64 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    66fe:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    6700:	490d      	ldr	r1, [pc, #52]	; (6738 <__start+0x48>)
    str r0, [r1]
    6702:	6008      	str	r0, [r1, #0]
    dsb
    6704:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    6708:	480c      	ldr	r0, [pc, #48]	; (673c <__start+0x4c>)
    msr msp, r0
    670a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    670e:	f000 f82d 	bl	676c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6712:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6714:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    6718:	4809      	ldr	r0, [pc, #36]	; (6740 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    671a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    671e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    6720:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    6724:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    6728:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    672a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    672c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    6730:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    6734:	f7ff fb3a 	bl	5dac <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    6738:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    673c:	2000efe0 	.word	0x2000efe0
    ldr r0, =z_interrupt_stacks
    6740:	2000f160 	.word	0x2000f160

00006744 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    6744:	4b08      	ldr	r3, [pc, #32]	; (6768 <z_arm_clear_arm_mpu_config+0x24>)
    6746:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    674a:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    674e:	2300      	movs	r3, #0
    6750:	e006      	b.n	6760 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    6752:	4a05      	ldr	r2, [pc, #20]	; (6768 <z_arm_clear_arm_mpu_config+0x24>)
    6754:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    6758:	2100      	movs	r1, #0
    675a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    675e:	3301      	adds	r3, #1
    6760:	4283      	cmp	r3, r0
    6762:	dbf6      	blt.n	6752 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    6764:	4770      	bx	lr
    6766:	bf00      	nop
    6768:	e000ed00 	.word	0xe000ed00

0000676c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    676c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    676e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    6770:	2400      	movs	r4, #0
    6772:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    6776:	f7ff ffe5 	bl	6744 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    677a:	4623      	mov	r3, r4
    677c:	e008      	b.n	6790 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    677e:	f103 0120 	add.w	r1, r3, #32
    6782:	4a0e      	ldr	r2, [pc, #56]	; (67bc <z_arm_init_arch_hw_at_boot+0x50>)
    6784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6788:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    678c:	3301      	adds	r3, #1
    678e:	b2db      	uxtb	r3, r3
    6790:	2b07      	cmp	r3, #7
    6792:	d9f4      	bls.n	677e <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    6794:	2300      	movs	r3, #0
    6796:	e008      	b.n	67aa <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    6798:	f103 0160 	add.w	r1, r3, #96	; 0x60
    679c:	4a07      	ldr	r2, [pc, #28]	; (67bc <z_arm_init_arch_hw_at_boot+0x50>)
    679e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    67a2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    67a6:	3301      	adds	r3, #1
    67a8:	b2db      	uxtb	r3, r3
    67aa:	2b07      	cmp	r3, #7
    67ac:	d9f4      	bls.n	6798 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    67ae:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    67b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    67b4:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    67b8:	bd10      	pop	{r4, pc}
    67ba:	bf00      	nop
    67bc:	e000e100 	.word	0xe000e100

000067c0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    67c0:	b508      	push	{r3, lr}
	if (_current == thread) {
    67c2:	4b0a      	ldr	r3, [pc, #40]	; (67ec <z_impl_k_thread_abort+0x2c>)
    67c4:	689b      	ldr	r3, [r3, #8]
    67c6:	4283      	cmp	r3, r0
    67c8:	d002      	beq.n	67d0 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    67ca:	f005 ff05 	bl	c5d8 <z_thread_abort>
}
    67ce:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    67d0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    67d4:	2b00      	cmp	r3, #0
    67d6:	d0f8      	beq.n	67ca <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    67d8:	4b05      	ldr	r3, [pc, #20]	; (67f0 <z_impl_k_thread_abort+0x30>)
    67da:	685a      	ldr	r2, [r3, #4]
    67dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    67e0:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    67e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    67e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    67e8:	625a      	str	r2, [r3, #36]	; 0x24
    67ea:	e7ee      	b.n	67ca <z_impl_k_thread_abort+0xa>
    67ec:	2000d4e4 	.word	0x2000d4e4
    67f0:	e000ed00 	.word	0xe000ed00

000067f4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    67f4:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    67f6:	4b03      	ldr	r3, [pc, #12]	; (6804 <z_arm_configure_static_mpu_regions+0x10>)
    67f8:	4a03      	ldr	r2, [pc, #12]	; (6808 <z_arm_configure_static_mpu_regions+0x14>)
    67fa:	2101      	movs	r1, #1
    67fc:	4803      	ldr	r0, [pc, #12]	; (680c <z_arm_configure_static_mpu_regions+0x18>)
    67fe:	f000 f8bb 	bl	6978 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    6802:	bd08      	pop	{r3, pc}
    6804:	20040000 	.word	0x20040000
    6808:	20000000 	.word	0x20000000
    680c:	00012338 	.word	0x00012338

00006810 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    6810:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    6812:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    6816:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    6818:	4804      	ldr	r0, [pc, #16]	; (682c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    681a:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    681c:	2320      	movs	r3, #32
    681e:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    6820:	4b03      	ldr	r3, [pc, #12]	; (6830 <z_arm_configure_dynamic_mpu_regions+0x20>)
    6822:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    6824:	2101      	movs	r1, #1
    6826:	f000 f8c9 	bl	69bc <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    682a:	bd08      	pop	{r3, pc}
    682c:	2000cf7c 	.word	0x2000cf7c
    6830:	150b0000 	.word	0x150b0000

00006834 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    6834:	4a08      	ldr	r2, [pc, #32]	; (6858 <region_init+0x24>)
    6836:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    683a:	680b      	ldr	r3, [r1, #0]
    683c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    6840:	4303      	orrs	r3, r0
    6842:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6846:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    684a:	688b      	ldr	r3, [r1, #8]
    684c:	f043 0301 	orr.w	r3, r3, #1
    6850:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    6854:	4770      	bx	lr
    6856:	bf00      	nop
    6858:	e000ed00 	.word	0xe000ed00

0000685c <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    685c:	b510      	push	{r4, lr}
    685e:	b084      	sub	sp, #16
    6860:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    6862:	2807      	cmp	r0, #7
    6864:	d804      	bhi.n	6870 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    6866:	f7ff ffe5 	bl	6834 <region_init>

	return index;
    686a:	4620      	mov	r0, r4
}
    686c:	b004      	add	sp, #16
    686e:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6870:	9003      	str	r0, [sp, #12]
    6872:	4b06      	ldr	r3, [pc, #24]	; (688c <region_allocate_and_init+0x30>)
    6874:	9302      	str	r3, [sp, #8]
    6876:	2000      	movs	r0, #0
    6878:	9001      	str	r0, [sp, #4]
    687a:	9000      	str	r0, [sp, #0]
    687c:	4603      	mov	r3, r0
    687e:	2201      	movs	r2, #1
    6880:	4903      	ldr	r1, [pc, #12]	; (6890 <region_allocate_and_init+0x34>)
    6882:	f008 fd77 	bl	f374 <z_log_msg2_runtime_create>
		return -EINVAL;
    6886:	f06f 0015 	mvn.w	r0, #21
    688a:	e7ef      	b.n	686c <region_allocate_and_init+0x10>
    688c:	00012344 	.word	0x00012344
    6890:	00010f00 	.word	0x00010f00

00006894 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    6894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6898:	b085      	sub	sp, #20
    689a:	4680      	mov	r8, r0
    689c:	460f      	mov	r7, r1
    689e:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
    68a0:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    68a2:	2500      	movs	r5, #0
    68a4:	e009      	b.n	68ba <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    68a6:	4621      	mov	r1, r4
    68a8:	b2f0      	uxtb	r0, r6
    68aa:	f008 fd72 	bl	f392 <mpu_configure_region>
    68ae:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    68b0:	f110 0f16 	cmn.w	r0, #22
    68b4:	d01e      	beq.n	68f4 <mpu_configure_regions+0x60>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    68b6:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    68b8:	3501      	adds	r5, #1
    68ba:	42bd      	cmp	r5, r7
    68bc:	da1a      	bge.n	68f4 <mpu_configure_regions+0x60>
		if (regions[i].size == 0U) {
    68be:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    68c2:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    68c6:	6862      	ldr	r2, [r4, #4]
    68c8:	2a00      	cmp	r2, #0
    68ca:	d0f5      	beq.n	68b8 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
    68cc:	f1b9 0f00 	cmp.w	r9, #0
    68d0:	d0e9      	beq.n	68a6 <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
    68d2:	4620      	mov	r0, r4
    68d4:	f008 fd3d 	bl	f352 <mpu_partition_is_valid>
		if (do_sanity_check &&
    68d8:	2800      	cmp	r0, #0
    68da:	d1e4      	bne.n	68a6 <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
    68dc:	9503      	str	r5, [sp, #12]
    68de:	4b07      	ldr	r3, [pc, #28]	; (68fc <mpu_configure_regions+0x68>)
    68e0:	9302      	str	r3, [sp, #8]
    68e2:	9001      	str	r0, [sp, #4]
    68e4:	9000      	str	r0, [sp, #0]
    68e6:	4603      	mov	r3, r0
    68e8:	2201      	movs	r2, #1
    68ea:	4905      	ldr	r1, [pc, #20]	; (6900 <mpu_configure_regions+0x6c>)
    68ec:	f008 fd42 	bl	f374 <z_log_msg2_runtime_create>
			return -EINVAL;
    68f0:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    68f4:	4630      	mov	r0, r6
    68f6:	b005      	add	sp, #20
    68f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    68fc:	0001236c 	.word	0x0001236c
    6900:	00010f00 	.word	0x00010f00

00006904 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    6904:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    6906:	4c03      	ldr	r4, [pc, #12]	; (6914 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    6908:	2301      	movs	r3, #1
    690a:	7822      	ldrb	r2, [r4, #0]
    690c:	f7ff ffc2 	bl	6894 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    6910:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    6912:	bd10      	pop	{r4, pc}
    6914:	2000d724 	.word	0x2000d724

00006918 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    6918:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    691a:	2300      	movs	r3, #0
    691c:	4a09      	ldr	r2, [pc, #36]	; (6944 <mpu_configure_dynamic_mpu_regions+0x2c>)
    691e:	7812      	ldrb	r2, [r2, #0]
    6920:	f7ff ffb8 	bl	6894 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    6924:	f110 0f16 	cmn.w	r0, #22
    6928:	d00a      	beq.n	6940 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    692a:	4603      	mov	r3, r0
    692c:	e006      	b.n	693c <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    692e:	4a06      	ldr	r2, [pc, #24]	; (6948 <mpu_configure_dynamic_mpu_regions+0x30>)
    6930:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    6934:	2100      	movs	r1, #0
    6936:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    693a:	3301      	adds	r3, #1
    693c:	2b07      	cmp	r3, #7
    693e:	ddf6      	ble.n	692e <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    6940:	bd08      	pop	{r3, pc}
    6942:	bf00      	nop
    6944:	2000d724 	.word	0x2000d724
    6948:	e000ed00 	.word	0xe000ed00

0000694c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    694c:	4b04      	ldr	r3, [pc, #16]	; (6960 <arm_core_mpu_enable+0x14>)
    694e:	2205      	movs	r2, #5
    6950:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    6954:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6958:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    695c:	4770      	bx	lr
    695e:	bf00      	nop
    6960:	e000ed00 	.word	0xe000ed00

00006964 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    6964:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6968:	4b02      	ldr	r3, [pc, #8]	; (6974 <arm_core_mpu_disable+0x10>)
    696a:	2200      	movs	r2, #0
    696c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    6970:	4770      	bx	lr
    6972:	bf00      	nop
    6974:	e000ed00 	.word	0xe000ed00

00006978 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    6978:	b538      	push	{r3, r4, r5, lr}
    697a:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    697c:	f7ff ffc2 	bl	6904 <mpu_configure_static_mpu_regions>
    6980:	f110 0f16 	cmn.w	r0, #22
    6984:	d000      	beq.n	6988 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    6986:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    6988:	4d08      	ldr	r5, [pc, #32]	; (69ac <arm_core_mpu_configure_static_mpu_regions+0x34>)
    698a:	f240 1311 	movw	r3, #273	; 0x111
    698e:	462a      	mov	r2, r5
    6990:	4907      	ldr	r1, [pc, #28]	; (69b0 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    6992:	4808      	ldr	r0, [pc, #32]	; (69b4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    6994:	f008 fbc6 	bl	f124 <assert_print>
    6998:	4621      	mov	r1, r4
    699a:	4807      	ldr	r0, [pc, #28]	; (69b8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    699c:	f008 fbc2 	bl	f124 <assert_print>
    69a0:	f240 1111 	movw	r1, #273	; 0x111
    69a4:	4628      	mov	r0, r5
    69a6:	f008 fbb6 	bl	f116 <assert_post_action>
}
    69aa:	e7ec      	b.n	6986 <arm_core_mpu_configure_static_mpu_regions+0xe>
    69ac:	00012390 	.word	0x00012390
    69b0:	00011bd0 	.word	0x00011bd0
    69b4:	00011514 	.word	0x00011514
    69b8:	000123c8 	.word	0x000123c8

000069bc <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    69bc:	b538      	push	{r3, r4, r5, lr}
    69be:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    69c0:	f7ff ffaa 	bl	6918 <mpu_configure_dynamic_mpu_regions>
    69c4:	f110 0f16 	cmn.w	r0, #22
    69c8:	d000      	beq.n	69cc <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    69ca:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    69cc:	4d08      	ldr	r5, [pc, #32]	; (69f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    69ce:	f44f 7398 	mov.w	r3, #304	; 0x130
    69d2:	462a      	mov	r2, r5
    69d4:	4907      	ldr	r1, [pc, #28]	; (69f4 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    69d6:	4808      	ldr	r0, [pc, #32]	; (69f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    69d8:	f008 fba4 	bl	f124 <assert_print>
    69dc:	4621      	mov	r1, r4
    69de:	4807      	ldr	r0, [pc, #28]	; (69fc <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    69e0:	f008 fba0 	bl	f124 <assert_print>
    69e4:	f44f 7198 	mov.w	r1, #304	; 0x130
    69e8:	4628      	mov	r0, r5
    69ea:	f008 fb94 	bl	f116 <assert_post_action>
}
    69ee:	e7ec      	b.n	69ca <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    69f0:	00012390 	.word	0x00012390
    69f4:	00011bd0 	.word	0x00011bd0
    69f8:	00011514 	.word	0x00011514
    69fc:	000123f4 	.word	0x000123f4

00006a00 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    6a00:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    6a02:	4b24      	ldr	r3, [pc, #144]	; (6a94 <z_arm_mpu_init+0x94>)
    6a04:	681d      	ldr	r5, [r3, #0]
    6a06:	2d08      	cmp	r5, #8
    6a08:	d803      	bhi.n	6a12 <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    6a0a:	f7ff ffab 	bl	6964 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6a0e:	2400      	movs	r4, #0
    6a10:	e01e      	b.n	6a50 <z_arm_mpu_init+0x50>
		__ASSERT(0,
    6a12:	4c21      	ldr	r4, [pc, #132]	; (6a98 <z_arm_mpu_init+0x98>)
    6a14:	f44f 73a4 	mov.w	r3, #328	; 0x148
    6a18:	4622      	mov	r2, r4
    6a1a:	4920      	ldr	r1, [pc, #128]	; (6a9c <z_arm_mpu_init+0x9c>)
    6a1c:	4820      	ldr	r0, [pc, #128]	; (6aa0 <z_arm_mpu_init+0xa0>)
    6a1e:	f008 fb81 	bl	f124 <assert_print>
    6a22:	2208      	movs	r2, #8
    6a24:	4629      	mov	r1, r5
    6a26:	481f      	ldr	r0, [pc, #124]	; (6aa4 <z_arm_mpu_init+0xa4>)
    6a28:	f008 fb7c 	bl	f124 <assert_print>
    6a2c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    6a30:	4620      	mov	r0, r4
    6a32:	f008 fb70 	bl	f116 <assert_post_action>
		return -1;
    6a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6a3a:	e017      	b.n	6a6c <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    6a3c:	4b15      	ldr	r3, [pc, #84]	; (6a94 <z_arm_mpu_init+0x94>)
    6a3e:	6859      	ldr	r1, [r3, #4]
    6a40:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    6a44:	0093      	lsls	r3, r2, #2
    6a46:	4419      	add	r1, r3
    6a48:	4620      	mov	r0, r4
    6a4a:	f7ff fef3 	bl	6834 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6a4e:	3401      	adds	r4, #1
    6a50:	42a5      	cmp	r5, r4
    6a52:	d8f3      	bhi.n	6a3c <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    6a54:	4b14      	ldr	r3, [pc, #80]	; (6aa8 <z_arm_mpu_init+0xa8>)
    6a56:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    6a58:	f7ff ff78 	bl	694c <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    6a5c:	4b13      	ldr	r3, [pc, #76]	; (6aac <z_arm_mpu_init+0xac>)
    6a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    6a62:	f3c3 2307 	ubfx	r3, r3, #8, #8
    6a66:	2b08      	cmp	r3, #8
    6a68:	d101      	bne.n	6a6e <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    6a6a:	2000      	movs	r0, #0
}
    6a6c:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    6a6e:	4c0a      	ldr	r4, [pc, #40]	; (6a98 <z_arm_mpu_init+0x98>)
    6a70:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    6a74:	4622      	mov	r2, r4
    6a76:	490e      	ldr	r1, [pc, #56]	; (6ab0 <z_arm_mpu_init+0xb0>)
    6a78:	4809      	ldr	r0, [pc, #36]	; (6aa0 <z_arm_mpu_init+0xa0>)
    6a7a:	f008 fb53 	bl	f124 <assert_print>
    6a7e:	480d      	ldr	r0, [pc, #52]	; (6ab4 <z_arm_mpu_init+0xb4>)
    6a80:	f008 fb50 	bl	f124 <assert_print>
    6a84:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    6a88:	4620      	mov	r0, r4
    6a8a:	f008 fb44 	bl	f116 <assert_post_action>
	return 0;
    6a8e:	2000      	movs	r0, #0
    6a90:	e7ec      	b.n	6a6c <z_arm_mpu_init+0x6c>
    6a92:	bf00      	nop
    6a94:	0001265c 	.word	0x0001265c
    6a98:	00012390 	.word	0x00012390
    6a9c:	00011bd0 	.word	0x00011bd0
    6aa0:	00011514 	.word	0x00011514
    6aa4:	00012424 	.word	0x00012424
    6aa8:	2000d724 	.word	0x2000d724
    6aac:	e000ed00 	.word	0xe000ed00
    6ab0:	00012458 	.word	0x00012458
    6ab4:	000124a8 	.word	0x000124a8

00006ab8 <malloc_prepare>:

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    6ab8:	4b0d      	ldr	r3, [pc, #52]	; (6af0 <malloc_prepare+0x38>)
    6aba:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    6abe:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    6ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6ac6:	d301      	bcc.n	6acc <malloc_prepare+0x14>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    6ac8:	2000      	movs	r0, #0
    6aca:	4770      	bx	lr
{
    6acc:	b510      	push	{r4, lr}
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    6ace:	4c09      	ldr	r4, [pc, #36]	; (6af4 <malloc_prepare+0x3c>)
    6ad0:	2381      	movs	r3, #129	; 0x81
    6ad2:	4622      	mov	r2, r4
    6ad4:	4908      	ldr	r1, [pc, #32]	; (6af8 <malloc_prepare+0x40>)
    6ad6:	4809      	ldr	r0, [pc, #36]	; (6afc <malloc_prepare+0x44>)
    6ad8:	f008 fb24 	bl	f124 <assert_print>
    6adc:	4808      	ldr	r0, [pc, #32]	; (6b00 <malloc_prepare+0x48>)
    6ade:	f008 fb21 	bl	f124 <assert_print>
    6ae2:	2181      	movs	r1, #129	; 0x81
    6ae4:	4620      	mov	r0, r4
    6ae6:	f008 fb16 	bl	f116 <assert_post_action>
}
    6aea:	2000      	movs	r0, #0
    6aec:	bd10      	pop	{r4, pc}
    6aee:	bf00      	nop
    6af0:	2000fa80 	.word	0x2000fa80
    6af4:	000124cc 	.word	0x000124cc
    6af8:	000124fc 	.word	0x000124fc
    6afc:	00011514 	.word	0x00011514
    6b00:	00012544 	.word	0x00012544

00006b04 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    6b04:	4b01      	ldr	r3, [pc, #4]	; (6b0c <__stdout_hook_install+0x8>)
    6b06:	6018      	str	r0, [r3, #0]
}
    6b08:	4770      	bx	lr
    6b0a:	bf00      	nop
    6b0c:	20004044 	.word	0x20004044

00006b10 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    6b10:	b570      	push	{r4, r5, r6, lr}
    6b12:	4606      	mov	r6, r0
    6b14:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    6b16:	2400      	movs	r4, #0
    6b18:	e000      	b.n	6b1c <z_impl_zephyr_read_stdin+0xc>
    6b1a:	3401      	adds	r4, #1
    6b1c:	42ac      	cmp	r4, r5
    6b1e:	da08      	bge.n	6b32 <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
    6b20:	4b05      	ldr	r3, [pc, #20]	; (6b38 <z_impl_zephyr_read_stdin+0x28>)
    6b22:	681b      	ldr	r3, [r3, #0]
    6b24:	4798      	blx	r3
    6b26:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    6b28:	280a      	cmp	r0, #10
    6b2a:	d001      	beq.n	6b30 <z_impl_zephyr_read_stdin+0x20>
    6b2c:	280d      	cmp	r0, #13
    6b2e:	d1f4      	bne.n	6b1a <z_impl_zephyr_read_stdin+0xa>
			i++;
    6b30:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
    6b32:	4620      	mov	r0, r4
    6b34:	bd70      	pop	{r4, r5, r6, pc}
    6b36:	bf00      	nop
    6b38:	20004040 	.word	0x20004040

00006b3c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    6b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b3e:	4605      	mov	r5, r0
    6b40:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    6b42:	2400      	movs	r4, #0
    6b44:	e004      	b.n	6b50 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
    6b46:	4b09      	ldr	r3, [pc, #36]	; (6b6c <z_impl_zephyr_write_stdout+0x30>)
    6b48:	681b      	ldr	r3, [r3, #0]
    6b4a:	7830      	ldrb	r0, [r6, #0]
    6b4c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    6b4e:	3401      	adds	r4, #1
    6b50:	42bc      	cmp	r4, r7
    6b52:	da08      	bge.n	6b66 <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
    6b54:	192e      	adds	r6, r5, r4
    6b56:	5d2b      	ldrb	r3, [r5, r4]
    6b58:	2b0a      	cmp	r3, #10
    6b5a:	d1f4      	bne.n	6b46 <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
    6b5c:	4b03      	ldr	r3, [pc, #12]	; (6b6c <z_impl_zephyr_write_stdout+0x30>)
    6b5e:	681b      	ldr	r3, [r3, #0]
    6b60:	200d      	movs	r0, #13
    6b62:	4798      	blx	r3
    6b64:	e7ef      	b.n	6b46 <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
    6b66:	4638      	mov	r0, r7
    6b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b6a:	bf00      	nop
    6b6c:	20004044 	.word	0x20004044

00006b70 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    6b70:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
    6b72:	2205      	movs	r2, #5
    6b74:	4902      	ldr	r1, [pc, #8]	; (6b80 <_exit+0x10>)
    6b76:	2001      	movs	r0, #1
    6b78:	f008 fc35 	bl	f3e6 <_write>
	while (1) {
    6b7c:	e7fe      	b.n	6b7c <_exit+0xc>
    6b7e:	bf00      	nop
    6b80:	000125cc 	.word	0x000125cc

00006b84 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    6b84:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    6b86:	4b08      	ldr	r3, [pc, #32]	; (6ba8 <_sbrk+0x24>)
    6b88:	6819      	ldr	r1, [r3, #0]
    6b8a:	4b08      	ldr	r3, [pc, #32]	; (6bac <_sbrk+0x28>)
    6b8c:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    6b8e:	440a      	add	r2, r1
    6b90:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    6b94:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    6b98:	429a      	cmp	r2, r3
    6b9a:	d202      	bcs.n	6ba2 <_sbrk+0x1e>
		heap_sz += count;
    6b9c:	4b02      	ldr	r3, [pc, #8]	; (6ba8 <_sbrk+0x24>)
    6b9e:	601a      	str	r2, [r3, #0]
		ret = ptr;
    6ba0:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    6ba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    6ba6:	4770      	bx	lr
    6ba8:	2000cf88 	.word	0x2000cf88
    6bac:	2000fa80 	.word	0x2000fa80

00006bb0 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    6bb0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    6bb2:	4604      	mov	r4, r0
    6bb4:	b140      	cbz	r0, 6bc8 <__retarget_lock_init_recursive+0x18>

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    6bb6:	2014      	movs	r0, #20
    6bb8:	f006 fd10 	bl	d5dc <malloc>
    6bbc:	6020      	str	r0, [r4, #0]
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
    6bbe:	b188      	cbz	r0, 6be4 <__retarget_lock_init_recursive+0x34>

	k_mutex_init((struct k_mutex *)*lock);
    6bc0:	6820      	ldr	r0, [r4, #0]
    6bc2:	f009 fc81 	bl	104c8 <z_impl_k_mutex_init>
}
    6bc6:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    6bc8:	4d0f      	ldr	r5, [pc, #60]	; (6c08 <__retarget_lock_init_recursive+0x58>)
    6bca:	f240 1377 	movw	r3, #375	; 0x177
    6bce:	462a      	mov	r2, r5
    6bd0:	490e      	ldr	r1, [pc, #56]	; (6c0c <__retarget_lock_init_recursive+0x5c>)
    6bd2:	480f      	ldr	r0, [pc, #60]	; (6c10 <__retarget_lock_init_recursive+0x60>)
    6bd4:	f008 faa6 	bl	f124 <assert_print>
    6bd8:	f240 1177 	movw	r1, #375	; 0x177
    6bdc:	4628      	mov	r0, r5
    6bde:	f008 fa9a 	bl	f116 <assert_post_action>
    6be2:	e7e8      	b.n	6bb6 <__retarget_lock_init_recursive+0x6>
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
    6be4:	4d08      	ldr	r5, [pc, #32]	; (6c08 <__retarget_lock_init_recursive+0x58>)
    6be6:	f240 137f 	movw	r3, #383	; 0x17f
    6bea:	462a      	mov	r2, r5
    6bec:	4909      	ldr	r1, [pc, #36]	; (6c14 <__retarget_lock_init_recursive+0x64>)
    6bee:	4808      	ldr	r0, [pc, #32]	; (6c10 <__retarget_lock_init_recursive+0x60>)
    6bf0:	f008 fa98 	bl	f124 <assert_print>
    6bf4:	4808      	ldr	r0, [pc, #32]	; (6c18 <__retarget_lock_init_recursive+0x68>)
    6bf6:	f008 fa95 	bl	f124 <assert_print>
    6bfa:	f240 117f 	movw	r1, #383	; 0x17f
    6bfe:	4628      	mov	r0, r5
    6c00:	f008 fa89 	bl	f116 <assert_post_action>
    6c04:	e7dc      	b.n	6bc0 <__retarget_lock_init_recursive+0x10>
    6c06:	bf00      	nop
    6c08:	000124cc 	.word	0x000124cc
    6c0c:	000125d4 	.word	0x000125d4
    6c10:	00011514 	.word	0x00011514
    6c14:	000125e8 	.word	0x000125e8
    6c18:	00012628 	.word	0x00012628

00006c1c <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    6c1c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    6c1e:	4604      	mov	r4, r0
    6c20:	b138      	cbz	r0, 6c32 <__retarget_lock_acquire_recursive+0x16>
	return z_impl_k_mutex_lock(mutex, timeout);
    6c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6c2a:	4620      	mov	r0, r4
    6c2c:	f003 ffae 	bl	ab8c <z_impl_k_mutex_lock>
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    6c30:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    6c32:	4d07      	ldr	r5, [pc, #28]	; (6c50 <__retarget_lock_acquire_recursive+0x34>)
    6c34:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    6c38:	462a      	mov	r2, r5
    6c3a:	4906      	ldr	r1, [pc, #24]	; (6c54 <__retarget_lock_acquire_recursive+0x38>)
    6c3c:	4806      	ldr	r0, [pc, #24]	; (6c58 <__retarget_lock_acquire_recursive+0x3c>)
    6c3e:	f008 fa71 	bl	f124 <assert_print>
    6c42:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    6c46:	4628      	mov	r0, r5
    6c48:	f008 fa65 	bl	f116 <assert_post_action>
    6c4c:	e7e9      	b.n	6c22 <__retarget_lock_acquire_recursive+0x6>
    6c4e:	bf00      	nop
    6c50:	000124cc 	.word	0x000124cc
    6c54:	000125d4 	.word	0x000125d4
    6c58:	00011514 	.word	0x00011514

00006c5c <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    6c5c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    6c5e:	4604      	mov	r4, r0
    6c60:	b118      	cbz	r0, 6c6a <__retarget_lock_release_recursive+0xe>
	return z_impl_k_mutex_unlock(mutex);
    6c62:	4620      	mov	r0, r4
    6c64:	f004 f8b2 	bl	adcc <z_impl_k_mutex_unlock>
	k_mutex_unlock((struct k_mutex *)lock);
}
    6c68:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    6c6a:	4d07      	ldr	r5, [pc, #28]	; (6c88 <__retarget_lock_release_recursive+0x2c>)
    6c6c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    6c70:	462a      	mov	r2, r5
    6c72:	4906      	ldr	r1, [pc, #24]	; (6c8c <__retarget_lock_release_recursive+0x30>)
    6c74:	4806      	ldr	r0, [pc, #24]	; (6c90 <__retarget_lock_release_recursive+0x34>)
    6c76:	f008 fa55 	bl	f124 <assert_print>
    6c7a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    6c7e:	4628      	mov	r0, r5
    6c80:	f008 fa49 	bl	f116 <assert_post_action>
    6c84:	e7ed      	b.n	6c62 <__retarget_lock_release_recursive+0x6>
    6c86:	bf00      	nop
    6c88:	000124cc 	.word	0x000124cc
    6c8c:	000125d4 	.word	0x000125d4
    6c90:	00011514 	.word	0x00011514

00006c94 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    6c94:	b510      	push	{r4, lr}
	__asm__ volatile(
    6c96:	f04f 0320 	mov.w	r3, #32
    6c9a:	f3ef 8411 	mrs	r4, BASEPRI
    6c9e:	f383 8812 	msr	BASEPRI_MAX, r3
    6ca2:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    6ca6:	2301      	movs	r3, #1
    6ca8:	4a0c      	ldr	r2, [pc, #48]	; (6cdc <nordicsemi_nrf52_init+0x48>)
    6caa:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6cae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6cb2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    6cb6:	f008 fbb3 	bl	f420 <nrf52_errata_197>
    6cba:	b120      	cbz	r0, 6cc6 <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    6cbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6cc0:	2201      	movs	r2, #1
    6cc2:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    6cc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6cca:	2201      	movs	r2, #1
    6ccc:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    6cd0:	f384 8811 	msr	BASEPRI, r4
    6cd4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    6cd8:	2000      	movs	r0, #0
    6cda:	bd10      	pop	{r4, pc}
    6cdc:	4001e000 	.word	0x4001e000

00006ce0 <sys_arch_reboot>:
    *p_gpregret = val;
    6ce0:	b2c0      	uxtb	r0, r0
    6ce2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6ce6:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    6cea:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6cee:	4905      	ldr	r1, [pc, #20]	; (6d04 <sys_arch_reboot+0x24>)
    6cf0:	68ca      	ldr	r2, [r1, #12]
    6cf2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6cf6:	4b04      	ldr	r3, [pc, #16]	; (6d08 <sys_arch_reboot+0x28>)
    6cf8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6cfa:	60cb      	str	r3, [r1, #12]
    6cfc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    6d00:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6d02:	e7fd      	b.n	6d00 <sys_arch_reboot+0x20>
    6d04:	e000ed00 	.word	0xe000ed00
    6d08:	05fa0004 	.word	0x05fa0004

00006d0c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    6d0c:	b130      	cbz	r0, 6d1c <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    6d0e:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    6d10:	0180      	lsls	r0, r0, #6
    6d12:	4b03      	ldr	r3, [pc, #12]	; (6d20 <arch_busy_wait+0x14>)
    6d14:	f043 0301 	orr.w	r3, r3, #1
    6d18:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    6d1a:	bd08      	pop	{r3, pc}
    6d1c:	4770      	bx	lr
    6d1e:	bf00      	nop
    6d20:	00010fc0 	.word	0x00010fc0

00006d24 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    6d24:	4800      	ldr	r0, [pc, #0]	; (6d28 <get_hf_flags+0x4>)
    6d26:	4770      	bx	lr
    6d28:	2000cfe4 	.word	0x2000cfe4

00006d2c <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    6d2c:	4b01      	ldr	r3, [pc, #4]	; (6d34 <get_subsys+0x8>)
    6d2e:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    6d30:	1140      	asrs	r0, r0, #5
    6d32:	4770      	bx	lr
    6d34:	2000cf9c 	.word	0x2000cf9c

00006d38 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6d38:	b530      	push	{r4, r5, lr}
    6d3a:	b083      	sub	sp, #12
    6d3c:	4605      	mov	r5, r0
    6d3e:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6d40:	f7ff fff4 	bl	6d2c <get_subsys>
    6d44:	4601      	mov	r1, r0
    6d46:	2340      	movs	r3, #64	; 0x40
    6d48:	9300      	str	r3, [sp, #0]
    6d4a:	4623      	mov	r3, r4
    6d4c:	4a05      	ldr	r2, [pc, #20]	; (6d64 <onoff_start+0x2c>)
    6d4e:	4806      	ldr	r0, [pc, #24]	; (6d68 <onoff_start+0x30>)
    6d50:	f008 fbf5 	bl	f53e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    6d54:	1e01      	subs	r1, r0, #0
    6d56:	db01      	blt.n	6d5c <onoff_start+0x24>
		notify(mgr, err);
	}
}
    6d58:	b003      	add	sp, #12
    6d5a:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    6d5c:	4628      	mov	r0, r5
    6d5e:	47a0      	blx	r4
}
    6d60:	e7fa      	b.n	6d58 <onoff_start+0x20>
    6d62:	bf00      	nop
    6d64:	0000f587 	.word	0x0000f587
    6d68:	00010ce8 	.word	0x00010ce8

00006d6c <generic_hfclk_stop>:
{
    6d6c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6d6e:	4b0a      	ldr	r3, [pc, #40]	; (6d98 <generic_hfclk_stop+0x2c>)
    6d70:	f3bf 8f5b 	dmb	ish
    6d74:	e853 2f00 	ldrex	r2, [r3]
    6d78:	f022 0102 	bic.w	r1, r2, #2
    6d7c:	e843 1000 	strex	r0, r1, [r3]
    6d80:	2800      	cmp	r0, #0
    6d82:	d1f7      	bne.n	6d74 <generic_hfclk_stop+0x8>
    6d84:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    6d88:	f012 0f01 	tst.w	r2, #1
    6d8c:	d000      	beq.n	6d90 <generic_hfclk_stop+0x24>
}
    6d8e:	bd08      	pop	{r3, pc}
	hfclk_stop();
    6d90:	f008 fc0b 	bl	f5aa <hfclk_stop>
    6d94:	e7fb      	b.n	6d8e <generic_hfclk_stop+0x22>
    6d96:	bf00      	nop
    6d98:	2000cff4 	.word	0x2000cff4

00006d9c <get_status>:
{
    6d9c:	b570      	push	{r4, r5, r6, lr}
    6d9e:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    6da0:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6da2:	2c01      	cmp	r4, #1
    6da4:	d807      	bhi.n	6db6 <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6da6:	4621      	mov	r1, r4
    6da8:	4628      	mov	r0, r5
    6daa:	f008 fb5b 	bl	f464 <get_sub_data>
    6dae:	6880      	ldr	r0, [r0, #8]
}
    6db0:	f000 0007 	and.w	r0, r0, #7
    6db4:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6db6:	4e06      	ldr	r6, [pc, #24]	; (6dd0 <get_status+0x34>)
    6db8:	2379      	movs	r3, #121	; 0x79
    6dba:	4632      	mov	r2, r6
    6dbc:	4905      	ldr	r1, [pc, #20]	; (6dd4 <get_status+0x38>)
    6dbe:	4806      	ldr	r0, [pc, #24]	; (6dd8 <get_status+0x3c>)
    6dc0:	f008 f9b0 	bl	f124 <assert_print>
    6dc4:	2179      	movs	r1, #121	; 0x79
    6dc6:	4630      	mov	r0, r6
    6dc8:	f008 f9a5 	bl	f116 <assert_post_action>
    6dcc:	e7eb      	b.n	6da6 <get_status+0xa>
    6dce:	bf00      	nop
    6dd0:	00012680 	.word	0x00012680
    6dd4:	000126c0 	.word	0x000126c0
    6dd8:	00011514 	.word	0x00011514

00006ddc <stop>:
{
    6ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6de0:	4607      	mov	r7, r0
    6de2:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    6de4:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    6de6:	4621      	mov	r1, r4
    6de8:	f008 fb3c 	bl	f464 <get_sub_data>
    6dec:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6dee:	2c01      	cmp	r4, #1
    6df0:	d80f      	bhi.n	6e12 <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    6df2:	4631      	mov	r1, r6
    6df4:	f105 0008 	add.w	r0, r5, #8
    6df8:	f008 fb45 	bl	f486 <set_off_state>
	if (err < 0) {
    6dfc:	2800      	cmp	r0, #0
    6dfe:	db06      	blt.n	6e0e <stop+0x32>
	get_sub_config(dev, type)->stop();
    6e00:	4621      	mov	r1, r4
    6e02:	4638      	mov	r0, r7
    6e04:	f008 fb35 	bl	f472 <get_sub_config>
    6e08:	6843      	ldr	r3, [r0, #4]
    6e0a:	4798      	blx	r3
	return 0;
    6e0c:	2000      	movs	r0, #0
}
    6e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6e12:	f8df 801c 	ldr.w	r8, [pc, #28]	; 6e30 <stop+0x54>
    6e16:	f240 134d 	movw	r3, #333	; 0x14d
    6e1a:	4642      	mov	r2, r8
    6e1c:	4905      	ldr	r1, [pc, #20]	; (6e34 <stop+0x58>)
    6e1e:	4806      	ldr	r0, [pc, #24]	; (6e38 <stop+0x5c>)
    6e20:	f008 f980 	bl	f124 <assert_print>
    6e24:	f240 114d 	movw	r1, #333	; 0x14d
    6e28:	4640      	mov	r0, r8
    6e2a:	f008 f974 	bl	f116 <assert_post_action>
    6e2e:	e7e0      	b.n	6df2 <stop+0x16>
    6e30:	00012680 	.word	0x00012680
    6e34:	000126c0 	.word	0x000126c0
    6e38:	00011514 	.word	0x00011514

00006e3c <onoff_stop>:
{
    6e3c:	b538      	push	{r3, r4, r5, lr}
    6e3e:	4605      	mov	r5, r0
    6e40:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6e42:	f7ff ff73 	bl	6d2c <get_subsys>
    6e46:	4601      	mov	r1, r0
    6e48:	2240      	movs	r2, #64	; 0x40
    6e4a:	4803      	ldr	r0, [pc, #12]	; (6e58 <onoff_stop+0x1c>)
    6e4c:	f7ff ffc6 	bl	6ddc <stop>
    6e50:	4601      	mov	r1, r0
	notify(mgr, res);
    6e52:	4628      	mov	r0, r5
    6e54:	47a0      	blx	r4
}
    6e56:	bd38      	pop	{r3, r4, r5, pc}
    6e58:	00010ce8 	.word	0x00010ce8

00006e5c <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    6e5c:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    6e5e:	2801      	cmp	r0, #1
    6e60:	d01d      	beq.n	6e9e <clock_event_handler+0x42>
    6e62:	2803      	cmp	r0, #3
    6e64:	d020      	beq.n	6ea8 <clock_event_handler+0x4c>
    6e66:	b168      	cbz	r0, 6e84 <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    6e68:	4c16      	ldr	r4, [pc, #88]	; (6ec4 <clock_event_handler+0x68>)
    6e6a:	f240 2362 	movw	r3, #610	; 0x262
    6e6e:	4622      	mov	r2, r4
    6e70:	4915      	ldr	r1, [pc, #84]	; (6ec8 <clock_event_handler+0x6c>)
    6e72:	4816      	ldr	r0, [pc, #88]	; (6ecc <clock_event_handler+0x70>)
    6e74:	f008 f956 	bl	f124 <assert_print>
    6e78:	f240 2162 	movw	r1, #610	; 0x262
    6e7c:	4620      	mov	r0, r4
    6e7e:	f008 f94a 	bl	f116 <assert_post_action>
		break;
	}
}
    6e82:	e010      	b.n	6ea6 <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    6e84:	2100      	movs	r1, #0
    6e86:	4812      	ldr	r0, [pc, #72]	; (6ed0 <clock_event_handler+0x74>)
    6e88:	f008 faec 	bl	f464 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    6e8c:	6883      	ldr	r3, [r0, #8]
    6e8e:	f013 0f07 	tst.w	r3, #7
    6e92:	d108      	bne.n	6ea6 <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    6e94:	2100      	movs	r1, #0
    6e96:	480e      	ldr	r0, [pc, #56]	; (6ed0 <clock_event_handler+0x74>)
    6e98:	f008 fb3f 	bl	f51a <clkstarted_handle>
    6e9c:	e003      	b.n	6ea6 <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6e9e:	2101      	movs	r1, #1
    6ea0:	480b      	ldr	r0, [pc, #44]	; (6ed0 <clock_event_handler+0x74>)
    6ea2:	f008 fb3a 	bl	f51a <clkstarted_handle>
}
    6ea6:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    6ea8:	4c06      	ldr	r4, [pc, #24]	; (6ec4 <clock_event_handler+0x68>)
    6eaa:	f240 235e 	movw	r3, #606	; 0x25e
    6eae:	4622      	mov	r2, r4
    6eb0:	4905      	ldr	r1, [pc, #20]	; (6ec8 <clock_event_handler+0x6c>)
    6eb2:	4806      	ldr	r0, [pc, #24]	; (6ecc <clock_event_handler+0x70>)
    6eb4:	f008 f936 	bl	f124 <assert_print>
    6eb8:	f240 215e 	movw	r1, #606	; 0x25e
    6ebc:	4620      	mov	r0, r4
    6ebe:	f008 f92a 	bl	f116 <assert_post_action>
		break;
    6ec2:	e7f0      	b.n	6ea6 <clock_event_handler+0x4a>
    6ec4:	00012680 	.word	0x00012680
    6ec8:	00011bd0 	.word	0x00011bd0
    6ecc:	00011514 	.word	0x00011514
    6ed0:	00010ce8 	.word	0x00010ce8

00006ed4 <api_blocking_start>:
{
    6ed4:	b500      	push	{lr}
    6ed6:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6ed8:	f8cd d000 	str.w	sp, [sp]
    6edc:	f8cd d004 	str.w	sp, [sp, #4]
    6ee0:	2300      	movs	r3, #0
    6ee2:	9302      	str	r3, [sp, #8]
    6ee4:	2301      	movs	r3, #1
    6ee6:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6ee8:	466b      	mov	r3, sp
    6eea:	4a07      	ldr	r2, [pc, #28]	; (6f08 <api_blocking_start+0x34>)
    6eec:	f008 fb43 	bl	f576 <api_start>
	if (err < 0) {
    6ef0:	2800      	cmp	r0, #0
    6ef2:	db05      	blt.n	6f00 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    6ef4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6ef8:	2300      	movs	r3, #0
    6efa:	4668      	mov	r0, sp
    6efc:	f004 f87e 	bl	affc <z_impl_k_sem_take>
}
    6f00:	b005      	add	sp, #20
    6f02:	f85d fb04 	ldr.w	pc, [sp], #4
    6f06:	bf00      	nop
    6f08:	0000f5c9 	.word	0x0000f5c9

00006f0c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    6f0c:	b570      	push	{r4, r5, r6, lr}
    6f0e:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6f10:	2200      	movs	r2, #0
    6f12:	2101      	movs	r1, #1
    6f14:	4610      	mov	r0, r2
    6f16:	f7fe ff0f 	bl	5d38 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    6f1a:	4811      	ldr	r0, [pc, #68]	; (6f60 <clk_init+0x54>)
    6f1c:	f001 ff24 	bl	8d68 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    6f20:	4b10      	ldr	r3, [pc, #64]	; (6f64 <clk_init+0x58>)
    6f22:	4298      	cmp	r0, r3
    6f24:	d119      	bne.n	6f5a <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    6f26:	f001 ff49 	bl	8dbc <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    6f2a:	2400      	movs	r4, #0
    6f2c:	2c01      	cmp	r4, #1
    6f2e:	d812      	bhi.n	6f56 <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    6f30:	4621      	mov	r1, r4
    6f32:	4630      	mov	r0, r6
    6f34:	f008 fa96 	bl	f464 <get_sub_data>
    6f38:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    6f3a:	4621      	mov	r1, r4
    6f3c:	4630      	mov	r0, r6
    6f3e:	f008 fa9e 	bl	f47e <get_onoff_manager>
    6f42:	4909      	ldr	r1, [pc, #36]	; (6f68 <clk_init+0x5c>)
    6f44:	f008 f873 	bl	f02e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    6f48:	2800      	cmp	r0, #0
    6f4a:	db05      	blt.n	6f58 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6f4c:	2301      	movs	r3, #1
    6f4e:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    6f50:	441c      	add	r4, r3
    6f52:	b2e4      	uxtb	r4, r4
    6f54:	e7ea      	b.n	6f2c <clk_init+0x20>
	}

	return 0;
    6f56:	2000      	movs	r0, #0
}
    6f58:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    6f5a:	f06f 0004 	mvn.w	r0, #4
    6f5e:	e7fb      	b.n	6f58 <clk_init+0x4c>
    6f60:	00006e5d 	.word	0x00006e5d
    6f64:	0bad0000 	.word	0x0bad0000
    6f68:	0001273c 	.word	0x0001273c

00006f6c <lfclk_spinwait>:
{
    6f6c:	b570      	push	{r4, r5, r6, lr}
    6f6e:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    6f70:	2801      	cmp	r0, #1
    6f72:	d107      	bne.n	6f84 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6f74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6f78:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6f7c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    6f80:	2b01      	cmp	r3, #1
    6f82:	d05a      	beq.n	703a <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6f84:	f009 fa6d 	bl	10462 <k_is_in_isr>
    6f88:	b928      	cbnz	r0, 6f96 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    6f8a:	4b2f      	ldr	r3, [pc, #188]	; (7048 <lfclk_spinwait+0xdc>)
    6f8c:	781b      	ldrb	r3, [r3, #0]
    6f8e:	2b00      	cmp	r3, #0
    6f90:	d043      	beq.n	701a <lfclk_spinwait+0xae>
    6f92:	2300      	movs	r3, #0
    6f94:	e000      	b.n	6f98 <lfclk_spinwait+0x2c>
    6f96:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    6f98:	461c      	mov	r4, r3
    6f9a:	2b00      	cmp	r3, #0
    6f9c:	d03f      	beq.n	701e <lfclk_spinwait+0xb2>
	__asm__ volatile(
    6f9e:	f04f 0320 	mov.w	r3, #32
    6fa2:	f3ef 8611 	mrs	r6, BASEPRI
    6fa6:	f383 8812 	msr	BASEPRI_MAX, r3
    6faa:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    6fae:	b924      	cbnz	r4, 6fba <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    6fb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6fb4:	2202      	movs	r2, #2
    6fb6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6fba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6fbe:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6fc2:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6fc6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    6fca:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    6fce:	d12d      	bne.n	702c <lfclk_spinwait+0xc0>
    return false;
    6fd0:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    6fd2:	b11a      	cbz	r2, 6fdc <lfclk_spinwait+0x70>
    6fd4:	2b01      	cmp	r3, #1
    6fd6:	d02b      	beq.n	7030 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    6fd8:	2d01      	cmp	r5, #1
    6fda:	d029      	beq.n	7030 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    6fdc:	b30c      	cbz	r4, 7022 <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    6fde:	4630      	mov	r0, r6
    6fe0:	f7fe fe3a 	bl	5c58 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    6fe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6fe8:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    6fec:	2b00      	cmp	r3, #0
    6fee:	d1e4      	bne.n	6fba <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6ff0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6ff4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    6ff8:	2b00      	cmp	r3, #0
    6ffa:	d0de      	beq.n	6fba <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ffc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7000:	2200      	movs	r2, #0
    7002:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    7006:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    700a:	2201      	movs	r2, #1
    700c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7010:	490e      	ldr	r1, [pc, #56]	; (704c <lfclk_spinwait+0xe0>)
    7012:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7016:	609a      	str	r2, [r3, #8]
}
    7018:	e7cf      	b.n	6fba <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    701a:	2301      	movs	r3, #1
    701c:	e7bc      	b.n	6f98 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    701e:	2600      	movs	r6, #0
    7020:	e7c5      	b.n	6fae <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    7022:	2021      	movs	r0, #33	; 0x21
    7024:	2100      	movs	r1, #0
    7026:	f005 fa85 	bl	c534 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    702a:	e7db      	b.n	6fe4 <lfclk_spinwait+0x78>
                return true;
    702c:	2201      	movs	r2, #1
    702e:	e7d0      	b.n	6fd2 <lfclk_spinwait+0x66>
	if (isr_mode) {
    7030:	b124      	cbz	r4, 703c <lfclk_spinwait+0xd0>
	__asm__ volatile(
    7032:	f386 8811 	msr	BASEPRI, r6
    7036:	f3bf 8f6f 	isb	sy
}
    703a:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    703c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7040:	2202      	movs	r2, #2
    7042:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7046:	e7f8      	b.n	703a <lfclk_spinwait+0xce>
    7048:	2000d725 	.word	0x2000d725
    704c:	e000e100 	.word	0xe000e100

00007050 <generic_hfclk_start>:
{
    7050:	b510      	push	{r4, lr}
	__asm__ volatile(
    7052:	f04f 0320 	mov.w	r3, #32
    7056:	f3ef 8411 	mrs	r4, BASEPRI
    705a:	f383 8812 	msr	BASEPRI_MAX, r3
    705e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    7062:	4a13      	ldr	r2, [pc, #76]	; (70b0 <generic_hfclk_start+0x60>)
    7064:	6813      	ldr	r3, [r2, #0]
    7066:	f043 0302 	orr.w	r3, r3, #2
    706a:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    706c:	f013 0f01 	tst.w	r3, #1
    7070:	d108      	bne.n	7084 <generic_hfclk_start+0x34>
	bool already_started = false;
    7072:	2300      	movs	r3, #0
	__asm__ volatile(
    7074:	f384 8811 	msr	BASEPRI, r4
    7078:	f3bf 8f6f 	isb	sy
	if (already_started) {
    707c:	b99b      	cbnz	r3, 70a6 <generic_hfclk_start+0x56>
	hfclk_start();
    707e:	f008 fa8a 	bl	f596 <hfclk_start>
}
    7082:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7084:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7088:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    708c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    7090:	f012 0f01 	tst.w	r2, #1
    7094:	d101      	bne.n	709a <generic_hfclk_start+0x4a>
	bool already_started = false;
    7096:	2300      	movs	r3, #0
    7098:	e7ec      	b.n	7074 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    709a:	f7ff fe43 	bl	6d24 <get_hf_flags>
    709e:	f008 fa29 	bl	f4f4 <set_on_state>
			already_started = true;
    70a2:	2301      	movs	r3, #1
    70a4:	e7e6      	b.n	7074 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    70a6:	2100      	movs	r1, #0
    70a8:	4802      	ldr	r0, [pc, #8]	; (70b4 <generic_hfclk_start+0x64>)
    70aa:	f008 fa36 	bl	f51a <clkstarted_handle>
		return;
    70ae:	e7e8      	b.n	7082 <generic_hfclk_start+0x32>
    70b0:	2000cff4 	.word	0x2000cff4
    70b4:	00010ce8 	.word	0x00010ce8

000070b8 <z_nrf_clock_control_lf_on>:
{
    70b8:	b538      	push	{r3, r4, r5, lr}
    70ba:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    70bc:	4b1f      	ldr	r3, [pc, #124]	; (713c <z_nrf_clock_control_lf_on+0x84>)
    70be:	2101      	movs	r1, #1
    70c0:	f3bf 8f5b 	dmb	ish
    70c4:	e853 2f00 	ldrex	r2, [r3]
    70c8:	e843 1000 	strex	r0, r1, [r3]
    70cc:	2800      	cmp	r0, #0
    70ce:	d1f9      	bne.n	70c4 <z_nrf_clock_control_lf_on+0xc>
    70d0:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    70d4:	b142      	cbz	r2, 70e8 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    70d6:	b134      	cbz	r4, 70e6 <z_nrf_clock_control_lf_on+0x2e>
    70d8:	1e63      	subs	r3, r4, #1
    70da:	b2db      	uxtb	r3, r3
    70dc:	2b01      	cmp	r3, #1
    70de:	d81f      	bhi.n	7120 <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    70e0:	4620      	mov	r0, r4
    70e2:	f7ff ff43 	bl	6f6c <lfclk_spinwait>
}
    70e6:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    70e8:	4815      	ldr	r0, [pc, #84]	; (7140 <z_nrf_clock_control_lf_on+0x88>)
    70ea:	f008 f9c8 	bl	f47e <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    70ee:	4915      	ldr	r1, [pc, #84]	; (7144 <z_nrf_clock_control_lf_on+0x8c>)
    70f0:	2300      	movs	r3, #0
    70f2:	604b      	str	r3, [r1, #4]
    70f4:	608b      	str	r3, [r1, #8]
    70f6:	60cb      	str	r3, [r1, #12]
    70f8:	2301      	movs	r3, #1
    70fa:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    70fc:	f7fc ff84 	bl	4008 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    7100:	2800      	cmp	r0, #0
    7102:	dae8      	bge.n	70d6 <z_nrf_clock_control_lf_on+0x1e>
    7104:	4d10      	ldr	r5, [pc, #64]	; (7148 <z_nrf_clock_control_lf_on+0x90>)
    7106:	f44f 7308 	mov.w	r3, #544	; 0x220
    710a:	462a      	mov	r2, r5
    710c:	490f      	ldr	r1, [pc, #60]	; (714c <z_nrf_clock_control_lf_on+0x94>)
    710e:	4810      	ldr	r0, [pc, #64]	; (7150 <z_nrf_clock_control_lf_on+0x98>)
    7110:	f008 f808 	bl	f124 <assert_print>
    7114:	f44f 7108 	mov.w	r1, #544	; 0x220
    7118:	4628      	mov	r0, r5
    711a:	f007 fffc 	bl	f116 <assert_post_action>
    711e:	e7da      	b.n	70d6 <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    7120:	4c09      	ldr	r4, [pc, #36]	; (7148 <z_nrf_clock_control_lf_on+0x90>)
    7122:	f240 2332 	movw	r3, #562	; 0x232
    7126:	4622      	mov	r2, r4
    7128:	490a      	ldr	r1, [pc, #40]	; (7154 <z_nrf_clock_control_lf_on+0x9c>)
    712a:	4809      	ldr	r0, [pc, #36]	; (7150 <z_nrf_clock_control_lf_on+0x98>)
    712c:	f007 fffa 	bl	f124 <assert_print>
    7130:	f240 2132 	movw	r1, #562	; 0x232
    7134:	4620      	mov	r0, r4
    7136:	f007 ffee 	bl	f116 <assert_post_action>
    713a:	e7d4      	b.n	70e6 <z_nrf_clock_control_lf_on+0x2e>
    713c:	2000cff8 	.word	0x2000cff8
    7140:	00010ce8 	.word	0x00010ce8
    7144:	2000cf8c 	.word	0x2000cf8c
    7148:	00012680 	.word	0x00012680
    714c:	00011b38 	.word	0x00011b38
    7150:	00011514 	.word	0x00011514
    7154:	00011bd0 	.word	0x00011bd0

00007158 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    7158:	b510      	push	{r4, lr}
    715a:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    715c:	280a      	cmp	r0, #10
    715e:	d007      	beq.n	7170 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    7160:	4b07      	ldr	r3, [pc, #28]	; (7180 <console_out+0x28>)
    7162:	6818      	ldr	r0, [r3, #0]
    7164:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    7166:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    7168:	69db      	ldr	r3, [r3, #28]
    716a:	4798      	blx	r3

	return c;
}
    716c:	4620      	mov	r0, r4
    716e:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    7170:	4b03      	ldr	r3, [pc, #12]	; (7180 <console_out+0x28>)
    7172:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    7174:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    7176:	69db      	ldr	r3, [r3, #28]
    7178:	210d      	movs	r1, #13
    717a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    717c:	e7f0      	b.n	7160 <console_out+0x8>
    717e:	bf00      	nop
    7180:	2000cffc 	.word	0x2000cffc

00007184 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    7184:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    7186:	4c04      	ldr	r4, [pc, #16]	; (7198 <uart_console_hook_install+0x14>)
    7188:	4620      	mov	r0, r4
    718a:	f7ff fcbb 	bl	6b04 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    718e:	4620      	mov	r0, r4
    7190:	f7fc fca0 	bl	3ad4 <__printk_hook_install>
#endif
}
    7194:	bd10      	pop	{r4, pc}
    7196:	bf00      	nop
    7198:	00007159 	.word	0x00007159

0000719c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    719c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    719e:	4806      	ldr	r0, [pc, #24]	; (71b8 <uart_console_init+0x1c>)
    71a0:	4b06      	ldr	r3, [pc, #24]	; (71bc <uart_console_init+0x20>)
    71a2:	6018      	str	r0, [r3, #0]
    71a4:	f009 f901 	bl	103aa <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    71a8:	b118      	cbz	r0, 71b2 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    71aa:	f7ff ffeb 	bl	7184 <uart_console_hook_install>

	return 0;
    71ae:	2000      	movs	r0, #0
}
    71b0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    71b2:	f06f 0012 	mvn.w	r0, #18
    71b6:	e7fb      	b.n	71b0 <uart_console_init+0x14>
    71b8:	00010d48 	.word	0x00010d48
    71bc:	2000cffc 	.word	0x2000cffc

000071c0 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    71c0:	b128      	cbz	r0, 71ce <get_dev+0xe>
    71c2:	2801      	cmp	r0, #1
    71c4:	d101      	bne.n	71ca <get_dev+0xa>
    71c6:	4803      	ldr	r0, [pc, #12]	; (71d4 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    71c8:	4770      	bx	lr
	const struct device *dev = NULL;
    71ca:	2000      	movs	r0, #0
    71cc:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    71ce:	4802      	ldr	r0, [pc, #8]	; (71d8 <get_dev+0x18>)
    71d0:	4770      	bx	lr
    71d2:	bf00      	nop
    71d4:	00010d00 	.word	0x00010d00
    71d8:	00010d18 	.word	0x00010d18

000071dc <gpio_nrfx_manage_callback>:
{
    71dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    71e0:	4616      	mov	r6, r2
	return port->data;
    71e2:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    71e4:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    71e6:	460c      	mov	r4, r1
    71e8:	b131      	cbz	r1, 71f8 <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
    71ea:	6863      	ldr	r3, [r4, #4]
    71ec:	b1a3      	cbz	r3, 7218 <gpio_nrfx_manage_callback+0x3c>
	return list->head;
    71ee:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    71f0:	2b00      	cmp	r3, #0
    71f2:	d03b      	beq.n	726c <gpio_nrfx_manage_callback+0x90>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    71f4:	2100      	movs	r1, #0
    71f6:	e02a      	b.n	724e <gpio_nrfx_manage_callback+0x72>
	__ASSERT(callback, "No callback!");
    71f8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 7290 <gpio_nrfx_manage_callback+0xb4>
    71fc:	2324      	movs	r3, #36	; 0x24
    71fe:	4642      	mov	r2, r8
    7200:	4924      	ldr	r1, [pc, #144]	; (7294 <gpio_nrfx_manage_callback+0xb8>)
    7202:	4825      	ldr	r0, [pc, #148]	; (7298 <gpio_nrfx_manage_callback+0xbc>)
    7204:	f007 ff8e 	bl	f124 <assert_print>
    7208:	4824      	ldr	r0, [pc, #144]	; (729c <gpio_nrfx_manage_callback+0xc0>)
    720a:	f007 ff8b 	bl	f124 <assert_print>
    720e:	2124      	movs	r1, #36	; 0x24
    7210:	4640      	mov	r0, r8
    7212:	f007 ff80 	bl	f116 <assert_post_action>
    7216:	e7e8      	b.n	71ea <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    7218:	f8df 8074 	ldr.w	r8, [pc, #116]	; 7290 <gpio_nrfx_manage_callback+0xb4>
    721c:	2325      	movs	r3, #37	; 0x25
    721e:	4642      	mov	r2, r8
    7220:	491f      	ldr	r1, [pc, #124]	; (72a0 <gpio_nrfx_manage_callback+0xc4>)
    7222:	481d      	ldr	r0, [pc, #116]	; (7298 <gpio_nrfx_manage_callback+0xbc>)
    7224:	f007 ff7e 	bl	f124 <assert_print>
    7228:	481e      	ldr	r0, [pc, #120]	; (72a4 <gpio_nrfx_manage_callback+0xc8>)
    722a:	f007 ff7b 	bl	f124 <assert_print>
    722e:	2125      	movs	r1, #37	; 0x25
    7230:	4640      	mov	r0, r8
    7232:	f007 ff70 	bl	f116 <assert_post_action>
    7236:	e7da      	b.n	71ee <gpio_nrfx_manage_callback+0x12>
	return node->next;
    7238:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    723a:	606b      	str	r3, [r5, #4]
	return list->tail;
    723c:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    723e:	4294      	cmp	r4, r2
    7240:	d10f      	bne.n	7262 <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    7242:	607b      	str	r3, [r7, #4]
}
    7244:	e00d      	b.n	7262 <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    7246:	6079      	str	r1, [r7, #4]
}
    7248:	e00b      	b.n	7262 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    724a:	4619      	mov	r1, r3
    724c:	681b      	ldr	r3, [r3, #0]
    724e:	b15b      	cbz	r3, 7268 <gpio_nrfx_manage_callback+0x8c>
    7250:	429c      	cmp	r4, r3
    7252:	d1fa      	bne.n	724a <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_REMOVE(slist, snode)
    7254:	2900      	cmp	r1, #0
    7256:	d0ef      	beq.n	7238 <gpio_nrfx_manage_callback+0x5c>
	return node->next;
    7258:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    725a:	600b      	str	r3, [r1, #0]
	return list->tail;
    725c:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    725e:	429c      	cmp	r4, r3
    7260:	d0f1      	beq.n	7246 <gpio_nrfx_manage_callback+0x6a>
	parent->next = child;
    7262:	2300      	movs	r3, #0
    7264:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7266:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    7268:	b903      	cbnz	r3, 726c <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    726a:	b156      	cbz	r6, 7282 <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    726c:	b166      	cbz	r6, 7288 <gpio_nrfx_manage_callback+0xac>
	return list->head;
    726e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    7270:	6023      	str	r3, [r4, #0]
	list->head = node;
    7272:	606c      	str	r4, [r5, #4]
	return list->tail;
    7274:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    7276:	b10b      	cbz	r3, 727c <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    7278:	2000      	movs	r0, #0
    727a:	e006      	b.n	728a <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    727c:	607c      	str	r4, [r7, #4]
    727e:	2000      	movs	r0, #0
}
    7280:	e003      	b.n	728a <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    7282:	f06f 0015 	mvn.w	r0, #21
    7286:	e000      	b.n	728a <gpio_nrfx_manage_callback+0xae>
	return 0;
    7288:	2000      	movs	r0, #0
}
    728a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    728e:	bf00      	nop
    7290:	00012748 	.word	0x00012748
    7294:	00012778 	.word	0x00012778
    7298:	00011514 	.word	0x00011514
    729c:	00012784 	.word	0x00012784
    72a0:	00012794 	.word	0x00012794
    72a4:	000127a8 	.word	0x000127a8

000072a8 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    72a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    72ac:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    72b0:	0940      	lsrs	r0, r0, #5
    72b2:	f7ff ff85 	bl	71c0 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    72b6:	b380      	cbz	r0, 731a <nrfx_gpio_handler+0x72>
    72b8:	4607      	mov	r7, r0
	return port->data;
    72ba:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    72bc:	2601      	movs	r6, #1
    72be:	40a6      	lsls	r6, r4
	return list->head;
    72c0:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    72c2:	b11c      	cbz	r4, 72cc <nrfx_gpio_handler+0x24>
    72c4:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    72c6:	b17c      	cbz	r4, 72e8 <nrfx_gpio_handler+0x40>
	return node->next;
    72c8:	6825      	ldr	r5, [r4, #0]
    72ca:	e00d      	b.n	72e8 <nrfx_gpio_handler+0x40>
    72cc:	4625      	mov	r5, r4
    72ce:	e00b      	b.n	72e8 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    72d0:	6863      	ldr	r3, [r4, #4]
    72d2:	68a2      	ldr	r2, [r4, #8]
    72d4:	4032      	ands	r2, r6
    72d6:	4621      	mov	r1, r4
    72d8:	4638      	mov	r0, r7
    72da:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    72dc:	b1dd      	cbz	r5, 7316 <nrfx_gpio_handler+0x6e>
    72de:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    72e0:	b105      	cbz	r5, 72e4 <nrfx_gpio_handler+0x3c>
	return node->next;
    72e2:	682b      	ldr	r3, [r5, #0]
    72e4:	462c      	mov	r4, r5
    72e6:	461d      	mov	r5, r3
    72e8:	b1bc      	cbz	r4, 731a <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    72ea:	68a3      	ldr	r3, [r4, #8]
    72ec:	421e      	tst	r6, r3
    72ee:	d0f5      	beq.n	72dc <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    72f0:	6863      	ldr	r3, [r4, #4]
    72f2:	2b00      	cmp	r3, #0
    72f4:	d1ec      	bne.n	72d0 <nrfx_gpio_handler+0x28>
    72f6:	f8df 8028 	ldr.w	r8, [pc, #40]	; 7320 <nrfx_gpio_handler+0x78>
    72fa:	2345      	movs	r3, #69	; 0x45
    72fc:	4642      	mov	r2, r8
    72fe:	4909      	ldr	r1, [pc, #36]	; (7324 <nrfx_gpio_handler+0x7c>)
    7300:	4809      	ldr	r0, [pc, #36]	; (7328 <nrfx_gpio_handler+0x80>)
    7302:	f007 ff0f 	bl	f124 <assert_print>
    7306:	4809      	ldr	r0, [pc, #36]	; (732c <nrfx_gpio_handler+0x84>)
    7308:	f007 ff0c 	bl	f124 <assert_print>
    730c:	2145      	movs	r1, #69	; 0x45
    730e:	4640      	mov	r0, r8
    7310:	f007 ff01 	bl	f116 <assert_post_action>
    7314:	e7dc      	b.n	72d0 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7316:	462b      	mov	r3, r5
    7318:	e7e4      	b.n	72e4 <nrfx_gpio_handler+0x3c>
}
    731a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    731e:	bf00      	nop
    7320:	00012748 	.word	0x00012748
    7324:	000127c0 	.word	0x000127c0
    7328:	00011514 	.word	0x00011514
    732c:	000127a8 	.word	0x000127a8

00007330 <gpio_nrfx_pin_interrupt_configure>:
{
    7330:	b5f0      	push	{r4, r5, r6, r7, lr}
    7332:	b085      	sub	sp, #20
    7334:	460e      	mov	r6, r1
    7336:	4619      	mov	r1, r3
	return port->config;
    7338:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    733a:	7b1b      	ldrb	r3, [r3, #12]
    733c:	f006 041f 	and.w	r4, r6, #31
    7340:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    7344:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    7348:	d022      	beq.n	7390 <gpio_nrfx_pin_interrupt_configure+0x60>
    734a:	4607      	mov	r7, r0
    734c:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    734e:	2300      	movs	r3, #0
    7350:	9302      	str	r3, [sp, #8]
    7352:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    7354:	4610      	mov	r0, r2
    7356:	f008 f9b5 	bl	f6c4 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    735a:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    735e:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    7360:	6899      	ldr	r1, [r3, #8]
    7362:	40f1      	lsrs	r1, r6
    7364:	f011 0101 	ands.w	r1, r1, #1
    7368:	d102      	bne.n	7370 <gpio_nrfx_pin_interrupt_configure+0x40>
    736a:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    736e:	d014      	beq.n	739a <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    7370:	2300      	movs	r3, #0
    7372:	aa02      	add	r2, sp, #8
    7374:	4619      	mov	r1, r3
    7376:	4620      	mov	r0, r4
    7378:	f002 f99a 	bl	96b0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    737c:	4b32      	ldr	r3, [pc, #200]	; (7448 <gpio_nrfx_pin_interrupt_configure+0x118>)
    737e:	4298      	cmp	r0, r3
    7380:	d15f      	bne.n	7442 <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    7382:	2101      	movs	r1, #1
    7384:	4620      	mov	r0, r4
    7386:	f002 fbf7 	bl	9b78 <nrfx_gpiote_trigger_enable>
	return 0;
    738a:	2000      	movs	r0, #0
}
    738c:	b005      	add	sp, #20
    738e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    7390:	4620      	mov	r0, r4
    7392:	f002 fcfd 	bl	9d90 <nrfx_gpiote_trigger_disable>
		return 0;
    7396:	2000      	movs	r0, #0
    7398:	e7f8      	b.n	738c <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    739a:	0963      	lsrs	r3, r4, #5
    739c:	d01f      	beq.n	73de <gpio_nrfx_pin_interrupt_configure+0xae>
    739e:	2b01      	cmp	r3, #1
    73a0:	d101      	bne.n	73a6 <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    73a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    73a6:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    73aa:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    73ac:	f011 0f01 	tst.w	r1, #1
    73b0:	d018      	beq.n	73e4 <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    73b2:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    73b6:	0963      	lsrs	r3, r4, #5
    73b8:	d022      	beq.n	7400 <gpio_nrfx_pin_interrupt_configure+0xd0>
    73ba:	2b01      	cmp	r3, #1
    73bc:	d023      	beq.n	7406 <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    73be:	4e23      	ldr	r6, [pc, #140]	; (744c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    73c0:	f240 232e 	movw	r3, #558	; 0x22e
    73c4:	4632      	mov	r2, r6
    73c6:	4922      	ldr	r1, [pc, #136]	; (7450 <gpio_nrfx_pin_interrupt_configure+0x120>)
    73c8:	4822      	ldr	r0, [pc, #136]	; (7454 <gpio_nrfx_pin_interrupt_configure+0x124>)
    73ca:	f007 feab 	bl	f124 <assert_print>
    73ce:	f240 212e 	movw	r1, #558	; 0x22e
    73d2:	4630      	mov	r0, r6
    73d4:	f007 fe9f 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    73d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    73dc:	e014      	b.n	7408 <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    73de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    73e2:	e7e0      	b.n	73a6 <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    73e4:	4d19      	ldr	r5, [pc, #100]	; (744c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    73e6:	f240 2329 	movw	r3, #553	; 0x229
    73ea:	462a      	mov	r2, r5
    73ec:	491a      	ldr	r1, [pc, #104]	; (7458 <gpio_nrfx_pin_interrupt_configure+0x128>)
    73ee:	4819      	ldr	r0, [pc, #100]	; (7454 <gpio_nrfx_pin_interrupt_configure+0x124>)
    73f0:	f007 fe98 	bl	f124 <assert_print>
    73f4:	f240 2129 	movw	r1, #553	; 0x229
    73f8:	4628      	mov	r0, r5
    73fa:	f007 fe8c 	bl	f116 <assert_post_action>
    73fe:	e7d8      	b.n	73b2 <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    7400:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7404:	e000      	b.n	7408 <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7406:	4b15      	ldr	r3, [pc, #84]	; (745c <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    7408:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    740c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    7410:	f013 0f01 	tst.w	r3, #1
    7414:	d1ac      	bne.n	7370 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    7416:	f10d 0107 	add.w	r1, sp, #7
    741a:	4620      	mov	r0, r4
    741c:	f002 fb3c 	bl	9a98 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    7420:	4b0f      	ldr	r3, [pc, #60]	; (7460 <gpio_nrfx_pin_interrupt_configure+0x130>)
    7422:	4298      	cmp	r0, r3
    7424:	d003      	beq.n	742e <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    7426:	f10d 0307 	add.w	r3, sp, #7
    742a:	9303      	str	r3, [sp, #12]
    742c:	e7a0      	b.n	7370 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    742e:	f10d 0007 	add.w	r0, sp, #7
    7432:	f002 fb99 	bl	9b68 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    7436:	4b04      	ldr	r3, [pc, #16]	; (7448 <gpio_nrfx_pin_interrupt_configure+0x118>)
    7438:	4298      	cmp	r0, r3
    743a:	d0f4      	beq.n	7426 <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    743c:	f06f 000b 	mvn.w	r0, #11
    7440:	e7a4      	b.n	738c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    7442:	f06f 0004 	mvn.w	r0, #4
    7446:	e7a1      	b.n	738c <gpio_nrfx_pin_interrupt_configure+0x5c>
    7448:	0bad0000 	.word	0x0bad0000
    744c:	000127cc 	.word	0x000127cc
    7450:	00011bd0 	.word	0x00011bd0
    7454:	00011514 	.word	0x00011514
    7458:	00012800 	.word	0x00012800
    745c:	50000300 	.word	0x50000300
    7460:	0bad0004 	.word	0x0bad0004

00007464 <pin_uninit>:
{
    7464:	b530      	push	{r4, r5, lr}
    7466:	b083      	sub	sp, #12
    7468:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    746a:	f10d 0107 	add.w	r1, sp, #7
    746e:	f002 fb13 	bl	9a98 <nrfx_gpiote_channel_get>
    7472:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    7474:	4620      	mov	r0, r4
    7476:	f002 fcf3 	bl	9e60 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    747a:	4b0b      	ldr	r3, [pc, #44]	; (74a8 <pin_uninit+0x44>)
    747c:	4298      	cmp	r0, r3
    747e:	d10f      	bne.n	74a0 <pin_uninit+0x3c>
	if (free_ch) {
    7480:	429d      	cmp	r5, r3
    7482:	d005      	beq.n	7490 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    7484:	4b08      	ldr	r3, [pc, #32]	; (74a8 <pin_uninit+0x44>)
    7486:	4298      	cmp	r0, r3
    7488:	d107      	bne.n	749a <pin_uninit+0x36>
    748a:	2000      	movs	r0, #0
}
    748c:	b003      	add	sp, #12
    748e:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    7490:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7494:	f002 fb60 	bl	9b58 <nrfx_gpiote_channel_free>
    7498:	e7f4      	b.n	7484 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    749a:	f06f 0004 	mvn.w	r0, #4
    749e:	e7f5      	b.n	748c <pin_uninit+0x28>
		return -EIO;
    74a0:	f06f 0004 	mvn.w	r0, #4
    74a4:	e7f2      	b.n	748c <pin_uninit+0x28>
    74a6:	bf00      	nop
    74a8:	0bad0000 	.word	0x0bad0000

000074ac <gpio_nrfx_pin_configure>:
{
    74ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    74b0:	b087      	sub	sp, #28
	return port->config;
    74b2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    74b6:	f898 300c 	ldrb.w	r3, [r8, #12]
    74ba:	f001 051f 	and.w	r5, r1, #31
    74be:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    74c2:	2a00      	cmp	r2, #0
    74c4:	d044      	beq.n	7550 <gpio_nrfx_pin_configure+0xa4>
    74c6:	460c      	mov	r4, r1
    74c8:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    74ca:	2600      	movs	r6, #0
    74cc:	9603      	str	r6, [sp, #12]
    74ce:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    74d0:	f10d 0117 	add.w	r1, sp, #23
    74d4:	4620      	mov	r0, r4
    74d6:	f002 fadf 	bl	9a98 <nrfx_gpiote_channel_get>
    74da:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    74dc:	4633      	mov	r3, r6
    74de:	aa03      	add	r2, sp, #12
    74e0:	4631      	mov	r1, r6
    74e2:	4628      	mov	r0, r5
    74e4:	f002 f8e4 	bl	96b0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    74e8:	4b30      	ldr	r3, [pc, #192]	; (75ac <gpio_nrfx_pin_configure+0x100>)
    74ea:	4298      	cmp	r0, r3
    74ec:	d15b      	bne.n	75a6 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    74ee:	4599      	cmp	r9, r3
    74f0:	d036      	beq.n	7560 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    74f2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    74f6:	d043      	beq.n	7580 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    74f8:	f10d 0103 	add.w	r1, sp, #3
    74fc:	4638      	mov	r0, r7
    74fe:	f008 f868 	bl	f5d2 <get_drive>
		if (rv != 0) {
    7502:	4606      	mov	r6, r0
    7504:	bb40      	cbnz	r0, 7558 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    7506:	f89d 3003 	ldrb.w	r3, [sp, #3]
    750a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    750e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    7512:	bf0c      	ite	eq
    7514:	2301      	moveq	r3, #1
    7516:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    7518:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    751c:	4638      	mov	r0, r7
    751e:	f008 f89e 	bl	f65e <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    7522:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    7526:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    752a:	d01e      	beq.n	756a <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    752c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    7530:	2101      	movs	r1, #1
    7532:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    7536:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    753a:	2200      	movs	r2, #0
    753c:	a901      	add	r1, sp, #4
    753e:	4628      	mov	r0, r5
    7540:	f002 f9aa 	bl	9898 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    7544:	4b19      	ldr	r3, [pc, #100]	; (75ac <gpio_nrfx_pin_configure+0x100>)
    7546:	4298      	cmp	r0, r3
    7548:	d006      	beq.n	7558 <gpio_nrfx_pin_configure+0xac>
    754a:	f06f 0615 	mvn.w	r6, #21
    754e:	e003      	b.n	7558 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    7550:	4628      	mov	r0, r5
    7552:	f7ff ff87 	bl	7464 <pin_uninit>
    7556:	4606      	mov	r6, r0
}
    7558:	4630      	mov	r0, r6
    755a:	b007      	add	sp, #28
    755c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    7560:	f89d 0017 	ldrb.w	r0, [sp, #23]
    7564:	f002 faf8 	bl	9b58 <nrfx_gpiote_channel_free>
    7568:	e7c3      	b.n	74f2 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    756a:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    756e:	d0e4      	beq.n	753a <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    7570:	f8d8 2004 	ldr.w	r2, [r8, #4]
    7574:	2301      	movs	r3, #1
    7576:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    757a:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    757e:	e7dc      	b.n	753a <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    7580:	4638      	mov	r0, r7
    7582:	f008 f86c 	bl	f65e <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    7586:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    758a:	2300      	movs	r3, #0
    758c:	461a      	mov	r2, r3
    758e:	a902      	add	r1, sp, #8
    7590:	4628      	mov	r0, r5
    7592:	f002 f88d 	bl	96b0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    7596:	4b05      	ldr	r3, [pc, #20]	; (75ac <gpio_nrfx_pin_configure+0x100>)
    7598:	4298      	cmp	r0, r3
    759a:	d101      	bne.n	75a0 <gpio_nrfx_pin_configure+0xf4>
    759c:	2600      	movs	r6, #0
    759e:	e7db      	b.n	7558 <gpio_nrfx_pin_configure+0xac>
    75a0:	f06f 0615 	mvn.w	r6, #21
    75a4:	e7d8      	b.n	7558 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    75a6:	f06f 0615 	mvn.w	r6, #21
    75aa:	e7d5      	b.n	7558 <gpio_nrfx_pin_configure+0xac>
    75ac:	0bad0000 	.word	0x0bad0000

000075b0 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    75b0:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    75b2:	f002 fac7 	bl	9b44 <nrfx_gpiote_is_init>
    75b6:	b108      	cbz	r0, 75bc <gpio_nrfx_init+0xc>
		return 0;
    75b8:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    75ba:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    75bc:	f002 fa98 	bl	9af0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    75c0:	4b08      	ldr	r3, [pc, #32]	; (75e4 <gpio_nrfx_init+0x34>)
    75c2:	4298      	cmp	r0, r3
    75c4:	d10a      	bne.n	75dc <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    75c6:	2100      	movs	r1, #0
    75c8:	4807      	ldr	r0, [pc, #28]	; (75e8 <gpio_nrfx_init+0x38>)
    75ca:	f002 fa5f 	bl	9a8c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    75ce:	2200      	movs	r2, #0
    75d0:	2105      	movs	r1, #5
    75d2:	2006      	movs	r0, #6
    75d4:	f7fe fbb0 	bl	5d38 <z_arm_irq_priority_set>
	return 0;
    75d8:	2000      	movs	r0, #0
    75da:	e7ee      	b.n	75ba <gpio_nrfx_init+0xa>
		return -EIO;
    75dc:	f06f 0004 	mvn.w	r0, #4
    75e0:	e7eb      	b.n	75ba <gpio_nrfx_init+0xa>
    75e2:	bf00      	nop
    75e4:	0bad0000 	.word	0x0bad0000
    75e8:	000072a9 	.word	0x000072a9

000075ec <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    75ec:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    75ee:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    75f0:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    75f4:	d06f      	beq.n	76d6 <baudrate_set+0xea>
    75f6:	d83a      	bhi.n	766e <baudrate_set+0x82>
    75f8:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    75fc:	d06e      	beq.n	76dc <baudrate_set+0xf0>
    75fe:	d90a      	bls.n	7616 <baudrate_set+0x2a>
    7600:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    7604:	d075      	beq.n	76f2 <baudrate_set+0x106>
    7606:	d924      	bls.n	7652 <baudrate_set+0x66>
    7608:	f647 2312 	movw	r3, #31250	; 0x7a12
    760c:	4299      	cmp	r1, r3
    760e:	d12b      	bne.n	7668 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    7610:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    7614:	e013      	b.n	763e <baudrate_set+0x52>
	switch (baudrate) {
    7616:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    761a:	d061      	beq.n	76e0 <baudrate_set+0xf4>
    761c:	d907      	bls.n	762e <baudrate_set+0x42>
    761e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    7622:	d063      	beq.n	76ec <baudrate_set+0x100>
    7624:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    7628:	d110      	bne.n	764c <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    762a:	4b3c      	ldr	r3, [pc, #240]	; (771c <baudrate_set+0x130>)
    762c:	e007      	b.n	763e <baudrate_set+0x52>
	switch (baudrate) {
    762e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    7632:	d058      	beq.n	76e6 <baudrate_set+0xfa>
    7634:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    7638:	d105      	bne.n	7646 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    763a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    763e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    7642:	2000      	movs	r0, #0
    7644:	4770      	bx	lr
	switch (baudrate) {
    7646:	f06f 0015 	mvn.w	r0, #21
    764a:	4770      	bx	lr
    764c:	f06f 0015 	mvn.w	r0, #21
    7650:	4770      	bx	lr
    7652:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    7656:	d04e      	beq.n	76f6 <baudrate_set+0x10a>
    7658:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    765c:	d101      	bne.n	7662 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    765e:	4b30      	ldr	r3, [pc, #192]	; (7720 <baudrate_set+0x134>)
    7660:	e7ed      	b.n	763e <baudrate_set+0x52>
	switch (baudrate) {
    7662:	f06f 0015 	mvn.w	r0, #21
    7666:	4770      	bx	lr
    7668:	f06f 0015 	mvn.w	r0, #21
    766c:	4770      	bx	lr
    766e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    7672:	d042      	beq.n	76fa <baudrate_set+0x10e>
    7674:	d909      	bls.n	768a <baudrate_set+0x9e>
    7676:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    767a:	d046      	beq.n	770a <baudrate_set+0x11e>
    767c:	d91f      	bls.n	76be <baudrate_set+0xd2>
    767e:	4b29      	ldr	r3, [pc, #164]	; (7724 <baudrate_set+0x138>)
    7680:	4299      	cmp	r1, r3
    7682:	d148      	bne.n	7716 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    7684:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7688:	e7d9      	b.n	763e <baudrate_set+0x52>
	switch (baudrate) {
    768a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    768e:	d037      	beq.n	7700 <baudrate_set+0x114>
    7690:	d905      	bls.n	769e <baudrate_set+0xb2>
    7692:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    7696:	d10f      	bne.n	76b8 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    7698:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    769c:	e7cf      	b.n	763e <baudrate_set+0x52>
	switch (baudrate) {
    769e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    76a2:	4299      	cmp	r1, r3
    76a4:	d02e      	beq.n	7704 <baudrate_set+0x118>
    76a6:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    76aa:	d102      	bne.n	76b2 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    76ac:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    76b0:	e7c5      	b.n	763e <baudrate_set+0x52>
	switch (baudrate) {
    76b2:	f06f 0015 	mvn.w	r0, #21
    76b6:	4770      	bx	lr
    76b8:	f06f 0015 	mvn.w	r0, #21
    76bc:	4770      	bx	lr
    76be:	4b1a      	ldr	r3, [pc, #104]	; (7728 <baudrate_set+0x13c>)
    76c0:	4299      	cmp	r1, r3
    76c2:	d025      	beq.n	7710 <baudrate_set+0x124>
    76c4:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    76c8:	d102      	bne.n	76d0 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    76ca:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    76ce:	e7b6      	b.n	763e <baudrate_set+0x52>
	switch (baudrate) {
    76d0:	f06f 0015 	mvn.w	r0, #21
    76d4:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    76d6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    76da:	e7b0      	b.n	763e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    76dc:	4b13      	ldr	r3, [pc, #76]	; (772c <baudrate_set+0x140>)
    76de:	e7ae      	b.n	763e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    76e0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    76e4:	e7ab      	b.n	763e <baudrate_set+0x52>
	switch (baudrate) {
    76e6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    76ea:	e7a8      	b.n	763e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    76ec:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    76f0:	e7a5      	b.n	763e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    76f2:	4b0f      	ldr	r3, [pc, #60]	; (7730 <baudrate_set+0x144>)
    76f4:	e7a3      	b.n	763e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    76f6:	4b0f      	ldr	r3, [pc, #60]	; (7734 <baudrate_set+0x148>)
    76f8:	e7a1      	b.n	763e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    76fa:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    76fe:	e79e      	b.n	763e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    7700:	4b0d      	ldr	r3, [pc, #52]	; (7738 <baudrate_set+0x14c>)
    7702:	e79c      	b.n	763e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    7704:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    7708:	e799      	b.n	763e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    770a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    770e:	e796      	b.n	763e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    7710:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    7714:	e793      	b.n	763e <baudrate_set+0x52>
	switch (baudrate) {
    7716:	f06f 0015 	mvn.w	r0, #21
}
    771a:	4770      	bx	lr
    771c:	0013b000 	.word	0x0013b000
    7720:	004ea000 	.word	0x004ea000
    7724:	000f4240 	.word	0x000f4240
    7728:	0003d090 	.word	0x0003d090
    772c:	00275000 	.word	0x00275000
    7730:	0075c000 	.word	0x0075c000
    7734:	003af000 	.word	0x003af000
    7738:	013a9000 	.word	0x013a9000

0000773c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    773c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7740:	4605      	mov	r5, r0
    7742:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
    7744:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7746:	f008 fe8c 	bl	10462 <k_is_in_isr>
    774a:	b920      	cbnz	r0, 7756 <uarte_nrfx_poll_out+0x1a>
	return !z_sys_post_kernel;
    774c:	4b1e      	ldr	r3, [pc, #120]	; (77c8 <uarte_nrfx_poll_out+0x8c>)
    774e:	781b      	ldrb	r3, [r3, #0]
    7750:	b1a3      	cbz	r3, 777c <uarte_nrfx_poll_out+0x40>
    7752:	2300      	movs	r3, #0
    7754:	e000      	b.n	7758 <uarte_nrfx_poll_out+0x1c>
    7756:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    7758:	b9b3      	cbnz	r3, 7788 <uarte_nrfx_poll_out+0x4c>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    775a:	4628      	mov	r0, r5
    775c:	f008 f943 	bl	f9e6 <wait_tx_ready>
    7760:	4606      	mov	r6, r0
	}

	data->char_out = c;
    7762:	4639      	mov	r1, r7
    7764:	f801 8f14 	strb.w	r8, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    7768:	2201      	movs	r2, #1
    776a:	4628      	mov	r0, r5
    776c:	f008 f85e 	bl	f82c <tx_start>
    7770:	f386 8811 	msr	BASEPRI, r6
    7774:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    7778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    777c:	2301      	movs	r3, #1
    777e:	e7eb      	b.n	7758 <uarte_nrfx_poll_out+0x1c>
    7780:	f384 8811 	msr	BASEPRI, r4
    7784:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    7788:	f04f 0320 	mov.w	r3, #32
    778c:	f3ef 8411 	mrs	r4, BASEPRI
    7790:	f383 8812 	msr	BASEPRI_MAX, r3
    7794:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    7798:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    779a:	4628      	mov	r0, r5
    779c:	f008 f824 	bl	f7e8 <is_tx_ready>
    77a0:	2800      	cmp	r0, #0
    77a2:	d0ed      	beq.n	7780 <uarte_nrfx_poll_out+0x44>
				if (data->async && data->async->tx_size &&
    77a4:	68fb      	ldr	r3, [r7, #12]
    77a6:	2b00      	cmp	r3, #0
    77a8:	d0db      	beq.n	7762 <uarte_nrfx_poll_out+0x26>
    77aa:	68da      	ldr	r2, [r3, #12]
    77ac:	2a00      	cmp	r2, #0
    77ae:	d0d8      	beq.n	7762 <uarte_nrfx_poll_out+0x26>
					data->async->tx_amount < 0) {
    77b0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    77b4:	2a00      	cmp	r2, #0
    77b6:	dad4      	bge.n	7762 <uarte_nrfx_poll_out+0x26>
	const struct uarte_nrfx_config *config = dev->config;
    77b8:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    77ba:	6812      	ldr	r2, [r2, #0]
    p_reg->TXD.MAXCNT = length;
}

NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
    77bc:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    77c0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    77c4:	e7cd      	b.n	7762 <uarte_nrfx_poll_out+0x26>
    77c6:	bf00      	nop
    77c8:	2000d725 	.word	0x2000d725

000077cc <uarte_nrfx_rx_enable>:
{
    77cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    77d0:	4616      	mov	r6, r2
	struct uarte_nrfx_data *data = dev->data;
    77d2:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *cfg = dev->config;
    77d4:	f8d0 9004 	ldr.w	r9, [r0, #4]
	return config->uarte_regs;
    77d8:	f8d9 5000 	ldr.w	r5, [r9]
	if (cfg->disable_rx) {
    77dc:	f899 2008 	ldrb.w	r2, [r9, #8]
    77e0:	b992      	cbnz	r2, 7808 <uarte_nrfx_rx_enable+0x3c>
    77e2:	4680      	mov	r8, r0
    77e4:	460f      	mov	r7, r1
	if (data->async->rx_enabled) {
    77e6:	68e2      	ldr	r2, [r4, #12]
    77e8:	f892 10d2 	ldrb.w	r1, [r2, #210]	; 0xd2
    77ec:	2900      	cmp	r1, #0
    77ee:	f040 8084 	bne.w	78fa <uarte_nrfx_rx_enable+0x12e>
	data->async->rx_timeout = timeout;
    77f2:	67d3      	str	r3, [r2, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    77f4:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
    77f8:	dd19      	ble.n	782e <uarte_nrfx_rx_enable+0x62>
    77fa:	4a41      	ldr	r2, [pc, #260]	; (7900 <uarte_nrfx_rx_enable+0x134>)
    77fc:	fb82 1203 	smull	r1, r2, r2, r3
    7800:	17db      	asrs	r3, r3, #31
    7802:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    7806:	e013      	b.n	7830 <uarte_nrfx_rx_enable+0x64>
		__ASSERT(false, "TX only UARTE instance");
    7808:	4c3e      	ldr	r4, [pc, #248]	; (7904 <uarte_nrfx_rx_enable+0x138>)
    780a:	f240 337f 	movw	r3, #895	; 0x37f
    780e:	4622      	mov	r2, r4
    7810:	493d      	ldr	r1, [pc, #244]	; (7908 <uarte_nrfx_rx_enable+0x13c>)
    7812:	483e      	ldr	r0, [pc, #248]	; (790c <uarte_nrfx_rx_enable+0x140>)
    7814:	f007 fc86 	bl	f124 <assert_print>
    7818:	483d      	ldr	r0, [pc, #244]	; (7910 <uarte_nrfx_rx_enable+0x144>)
    781a:	f007 fc83 	bl	f124 <assert_print>
    781e:	f240 317f 	movw	r1, #895	; 0x37f
    7822:	4620      	mov	r0, r4
    7824:	f007 fc77 	bl	f116 <assert_post_action>
		return -ENOTSUP;
    7828:	f06f 0085 	mvn.w	r0, #133	; 0x85
    782c:	e03d      	b.n	78aa <uarte_nrfx_rx_enable+0xde>
		MAX(timeout / RX_TIMEOUT_DIV,
    782e:	235c      	movs	r3, #92	; 0x5c
	data->async->rx_timeout_slab =
    7830:	68e2      	ldr	r2, [r4, #12]
    7832:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	data->async->rx_buf = buf;
    7836:	68e3      	ldr	r3, [r4, #12]
    7838:	661f      	str	r7, [r3, #96]	; 0x60
	data->async->rx_buf_len = len;
    783a:	68e3      	ldr	r3, [r4, #12]
    783c:	665e      	str	r6, [r3, #100]	; 0x64
	data->async->rx_offset = 0;
    783e:	68e2      	ldr	r2, [r4, #12]
    7840:	2300      	movs	r3, #0
    7842:	6693      	str	r3, [r2, #104]	; 0x68
	data->async->rx_next_buf = NULL;
    7844:	68e2      	ldr	r2, [r4, #12]
    7846:	66d3      	str	r3, [r2, #108]	; 0x6c
	data->async->rx_next_buf_len = 0;
    7848:	68e2      	ldr	r2, [r4, #12]
    784a:	6713      	str	r3, [r2, #112]	; 0x70
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    784c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    7850:	f013 0f10 	tst.w	r3, #16
    7854:	d010      	beq.n	7878 <uarte_nrfx_rx_enable+0xac>
		if (data->async->rx_flush_cnt) {
    7856:	68e1      	ldr	r1, [r4, #12]
    7858:	f891 30d1 	ldrb.w	r3, [r1, #209]	; 0xd1
    785c:	b163      	cbz	r3, 7878 <uarte_nrfx_rx_enable+0xac>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    785e:	42b3      	cmp	r3, r6
    7860:	bf28      	it	cs
    7862:	4633      	movcs	r3, r6
    7864:	469a      	mov	sl, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    7866:	461a      	mov	r2, r3
    7868:	31cc      	adds	r1, #204	; 0xcc
    786a:	4638      	mov	r0, r7
    786c:	f008 fee5 	bl	1063a <memcpy>
			buf += cpy_len;
    7870:	4457      	add	r7, sl
			if (!len) {
    7872:	ebb6 060a 	subs.w	r6, r6, sl
    7876:	d01a      	beq.n	78ae <uarte_nrfx_rx_enable+0xe2>

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    7878:	f8c5 7534 	str.w	r7, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    787c:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7880:	2300      	movs	r3, #0
    7882:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    7886:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    788a:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
    788e:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	data->async->rx_enabled = true;
    7892:	68e3      	ldr	r3, [r4, #12]
    7894:	2201      	movs	r2, #1
    7896:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    789a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    789e:	f013 0f10 	tst.w	r3, #16
    78a2:	d119      	bne.n	78d8 <uarte_nrfx_rx_enable+0x10c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    78a4:	2301      	movs	r3, #1
    78a6:	602b      	str	r3, [r5, #0]
	return 0;
    78a8:	2000      	movs	r0, #0
}
    78aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				data->async->rx_flush_cnt -= cpy_len;
    78ae:	68e2      	ldr	r2, [r4, #12]
    78b0:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    78b4:	eba3 030a 	sub.w	r3, r3, sl
    78b8:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    78bc:	4651      	mov	r1, sl
    78be:	4640      	mov	r0, r8
    78c0:	f008 f803 	bl	f8ca <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    78c4:	68e1      	ldr	r1, [r4, #12]
    78c6:	3160      	adds	r1, #96	; 0x60
    78c8:	4640      	mov	r0, r8
    78ca:	f008 f816 	bl	f8fa <rx_buf_release>
				notify_rx_disable(dev);
    78ce:	4640      	mov	r0, r8
    78d0:	f008 f82a 	bl	f928 <notify_rx_disable>
				return 0;
    78d4:	2000      	movs	r0, #0
    78d6:	e7e8      	b.n	78aa <uarte_nrfx_rx_enable+0xde>
    78d8:	f04f 0320 	mov.w	r3, #32
    78dc:	f3ef 8411 	mrs	r4, BASEPRI
    78e0:	f383 8812 	msr	BASEPRI_MAX, r3
    78e4:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
    78e8:	2102      	movs	r1, #2
    78ea:	4640      	mov	r0, r8
    78ec:	f007 ff90 	bl	f810 <uarte_enable>
	__asm__ volatile(
    78f0:	f384 8811 	msr	BASEPRI, r4
    78f4:	f3bf 8f6f 	isb	sy
}
    78f8:	e7d4      	b.n	78a4 <uarte_nrfx_rx_enable+0xd8>
		return -EBUSY;
    78fa:	f06f 000f 	mvn.w	r0, #15
    78fe:	e7d4      	b.n	78aa <uarte_nrfx_rx_enable+0xde>
    7900:	66666667 	.word	0x66666667
    7904:	00012878 	.word	0x00012878
    7908:	00011bd0 	.word	0x00011bd0
    790c:	00011514 	.word	0x00011514
    7910:	000128ac 	.word	0x000128ac

00007914 <uarte_nrfx_tx>:
{
    7914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7918:	b083      	sub	sp, #12
    791a:	4605      	mov	r5, r0
    791c:	4698      	mov	r8, r3
	struct uarte_nrfx_data *data = dev->data;
    791e:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    7920:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    7922:	6833      	ldr	r3, [r6, #0]
	__asm__ volatile(
    7924:	f04f 0020 	mov.w	r0, #32
    7928:	f3ef 8911 	mrs	r9, BASEPRI
    792c:	f380 8812 	msr	BASEPRI_MAX, r0
    7930:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
    7934:	68e6      	ldr	r6, [r4, #12]
    7936:	68f7      	ldr	r7, [r6, #12]
    7938:	b9f7      	cbnz	r7, 7978 <uarte_nrfx_tx+0x64>
	data->async->tx_size = len;
    793a:	60f2      	str	r2, [r6, #12]
	data->async->tx_buf = buf;
    793c:	68e0      	ldr	r0, [r4, #12]
    793e:	6081      	str	r1, [r0, #8]
    p_reg->INTENSET = mask;
    7940:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    7944:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    7948:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    794c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    7950:	d119      	bne.n	7986 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
    7952:	68e3      	ldr	r3, [r4, #12]
    7954:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
    7956:	68e3      	ldr	r3, [r4, #12]
    7958:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
    795a:	4621      	mov	r1, r4
    795c:	4628      	mov	r0, r5
    795e:	f007 ff91 	bl	f884 <start_tx_locked>
	__asm__ volatile(
    7962:	f389 8811 	msr	BASEPRI, r9
    7966:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    796a:	7ae3      	ldrb	r3, [r4, #11]
    796c:	2b01      	cmp	r3, #1
    796e:	d011      	beq.n	7994 <uarte_nrfx_tx+0x80>
	return 0;
    7970:	2000      	movs	r0, #0
}
    7972:	b003      	add	sp, #12
    7974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7978:	f389 8811 	msr	BASEPRI, r9
    797c:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    7980:	f06f 000f 	mvn.w	r0, #15
    7984:	e7f5      	b.n	7972 <uarte_nrfx_tx+0x5e>
		data->async->tx_cache_offset = 0;
    7986:	68e3      	ldr	r3, [r4, #12]
    7988:	2200      	movs	r2, #0
    798a:	621a      	str	r2, [r3, #32]
		(void)setup_tx_cache(data);
    798c:	4620      	mov	r0, r4
    798e:	f008 f969 	bl	fc64 <setup_tx_cache>
    7992:	e7e2      	b.n	795a <uarte_nrfx_tx+0x46>
	    && timeout != SYS_FOREVER_US) {
    7994:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    7998:	d101      	bne.n	799e <uarte_nrfx_tx+0x8a>
	return 0;
    799a:	2000      	movs	r0, #0
    799c:	e7e9      	b.n	7972 <uarte_nrfx_tx+0x5e>
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    799e:	68e4      	ldr	r4, [r4, #12]
    79a0:	3428      	adds	r4, #40	; 0x28
    79a2:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
    79a6:	17c1      	asrs	r1, r0, #31
			return ((t * to_hz + off) / from_hz);
    79a8:	03c9      	lsls	r1, r1, #15
    79aa:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    79ae:	03c0      	lsls	r0, r0, #15
    79b0:	4b09      	ldr	r3, [pc, #36]	; (79d8 <uarte_nrfx_tx+0xc4>)
    79b2:	18c0      	adds	r0, r0, r3
    79b4:	4a09      	ldr	r2, [pc, #36]	; (79dc <uarte_nrfx_tx+0xc8>)
    79b6:	f04f 0300 	mov.w	r3, #0
    79ba:	f141 0100 	adc.w	r1, r1, #0
    79be:	f7f9 f80d 	bl	9dc <__aeabi_uldivmod>
    79c2:	4602      	mov	r2, r0
    79c4:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    79c6:	2000      	movs	r0, #0
    79c8:	2100      	movs	r1, #0
    79ca:	e9cd 0100 	strd	r0, r1, [sp]
    79ce:	4620      	mov	r0, r4
    79d0:	f005 fae8 	bl	cfa4 <z_impl_k_timer_start>
	return 0;
    79d4:	2000      	movs	r0, #0
    79d6:	e7cc      	b.n	7972 <uarte_nrfx_tx+0x5e>
    79d8:	000f423f 	.word	0x000f423f
    79dc:	000f4240 	.word	0x000f4240

000079e0 <rxstarted_isr>:
{
    79e0:	b510      	push	{r4, lr}
    79e2:	b088      	sub	sp, #32
	struct uarte_nrfx_data *data = dev->data;
    79e4:	6904      	ldr	r4, [r0, #16]
	struct uart_event evt = {
    79e6:	2300      	movs	r3, #0
    79e8:	9303      	str	r3, [sp, #12]
    79ea:	9304      	str	r3, [sp, #16]
    79ec:	9305      	str	r3, [sp, #20]
    79ee:	9306      	str	r3, [sp, #24]
    79f0:	9307      	str	r3, [sp, #28]
    79f2:	2303      	movs	r3, #3
    79f4:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    79f8:	a903      	add	r1, sp, #12
    79fa:	f007 ff5e 	bl	f8ba <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    79fe:	68e3      	ldr	r3, [r4, #12]
    7a00:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    7a02:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    7a06:	d101      	bne.n	7a0c <rxstarted_isr+0x2c>
}
    7a08:	b008      	add	sp, #32
    7a0a:	bd10      	pop	{r4, pc}
		data->async->rx_timeout_left = data->async->rx_timeout;
    7a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		k_timer_start(&data->async->rx_timeout_timer,
    7a10:	68e3      	ldr	r3, [r4, #12]
    7a12:	f103 0488 	add.w	r4, r3, #136	; 0x88
			      K_USEC(data->async->rx_timeout_slab),
    7a16:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    7a1a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    7a1e:	17c1      	asrs	r1, r0, #31
    7a20:	03c9      	lsls	r1, r1, #15
    7a22:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    7a26:	03c0      	lsls	r0, r0, #15
    7a28:	4b08      	ldr	r3, [pc, #32]	; (7a4c <rxstarted_isr+0x6c>)
    7a2a:	18c0      	adds	r0, r0, r3
    7a2c:	4a08      	ldr	r2, [pc, #32]	; (7a50 <rxstarted_isr+0x70>)
    7a2e:	f04f 0300 	mov.w	r3, #0
    7a32:	f141 0100 	adc.w	r1, r1, #0
    7a36:	f7f8 ffd1 	bl	9dc <__aeabi_uldivmod>
    7a3a:	4602      	mov	r2, r0
    7a3c:	460b      	mov	r3, r1
    7a3e:	9000      	str	r0, [sp, #0]
    7a40:	9101      	str	r1, [sp, #4]
    7a42:	4620      	mov	r0, r4
    7a44:	f005 faae 	bl	cfa4 <z_impl_k_timer_start>
}
    7a48:	e7de      	b.n	7a08 <rxstarted_isr+0x28>
    7a4a:	bf00      	nop
    7a4c:	000f423f 	.word	0x000f423f
    7a50:	000f4240 	.word	0x000f4240

00007a54 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    7a54:	b530      	push	{r4, r5, lr}
    7a56:	b085      	sub	sp, #20
    7a58:	4604      	mov	r4, r0
    7a5a:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    7a5c:	f101 0016 	add.w	r0, r1, #22
    7a60:	f002 fa8a 	bl	9f78 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    7a64:	4b11      	ldr	r3, [pc, #68]	; (7aac <endtx_stoptx_ppi_init+0x58>)
    7a66:	4298      	cmp	r0, r3
    7a68:	d112      	bne.n	7a90 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    7a6a:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    7a6c:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    7a70:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    7a72:	4a0f      	ldr	r2, [pc, #60]	; (7ab0 <endtx_stoptx_ppi_init+0x5c>)
    7a74:	33a2      	adds	r3, #162	; 0xa2
    7a76:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    7a7a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7a7e:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    7a80:	7da9      	ldrb	r1, [r5, #22]
    7a82:	2301      	movs	r3, #1
    7a84:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    7a86:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    7a8a:	2000      	movs	r0, #0
}
    7a8c:	b005      	add	sp, #20
    7a8e:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    7a90:	4b08      	ldr	r3, [pc, #32]	; (7ab4 <endtx_stoptx_ppi_init+0x60>)
    7a92:	9302      	str	r3, [sp, #8]
    7a94:	2000      	movs	r0, #0
    7a96:	9001      	str	r0, [sp, #4]
    7a98:	9000      	str	r0, [sp, #0]
    7a9a:	4603      	mov	r3, r0
    7a9c:	2201      	movs	r2, #1
    7a9e:	4906      	ldr	r1, [pc, #24]	; (7ab8 <endtx_stoptx_ppi_init+0x64>)
    7aa0:	f008 f8f9 	bl	fc96 <z_log_msg2_runtime_create>
		return -EIO;
    7aa4:	f06f 0004 	mvn.w	r0, #4
    7aa8:	e7f0      	b.n	7a8c <endtx_stoptx_ppi_init+0x38>
    7aaa:	bf00      	nop
    7aac:	0bad0000 	.word	0x0bad0000
    7ab0:	4001f000 	.word	0x4001f000
    7ab4:	000128c8 	.word	0x000128c8
    7ab8:	00010f20 	.word	0x00010f20

00007abc <uarte_nrfx_init>:
{
    7abc:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = dev->data;
    7abe:	6905      	ldr	r5, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    7ac0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7ac2:	681c      	ldr	r4, [r3, #0]
	int ret = uarte_nrfx_rx_counting_init(dev);
    7ac4:	f007 fed7 	bl	f876 <uarte_nrfx_rx_counting_init>
	if (ret != 0) {
    7ac8:	4606      	mov	r6, r0
    7aca:	bb90      	cbnz	r0, 7b32 <uarte_nrfx_init+0x76>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    7acc:	68eb      	ldr	r3, [r5, #12]
    7ace:	2201      	movs	r2, #1
    7ad0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    p_reg->INTENSET = mask;
    7ad4:	4b18      	ldr	r3, [pc, #96]	; (7b38 <uarte_nrfx_init+0x7c>)
    7ad6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    7ada:	2308      	movs	r3, #8
    7adc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7ae0:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    7ae4:	b1a3      	cbz	r3, 7b10 <uarte_nrfx_init+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7ae6:	6062      	str	r2, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7ae8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    7aec:	b91b      	cbnz	r3, 7af6 <uarte_nrfx_init+0x3a>
    7aee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    7af2:	2b00      	cmp	r3, #0
    7af4:	d0f8      	beq.n	7ae8 <uarte_nrfx_init+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7af6:	2300      	movs	r3, #0
    7af8:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    7afc:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
    7b00:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    7b04:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    7b08:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    7b0c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    7b10:	68e8      	ldr	r0, [r5, #12]
    7b12:	2200      	movs	r2, #0
    7b14:	4909      	ldr	r1, [pc, #36]	; (7b3c <uarte_nrfx_init+0x80>)
    7b16:	3088      	adds	r0, #136	; 0x88
    7b18:	f008 fd3d 	bl	10596 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    7b1c:	68eb      	ldr	r3, [r5, #12]
	timer->user_data = user_data;
    7b1e:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    7b22:	68e8      	ldr	r0, [r5, #12]
    7b24:	2200      	movs	r2, #0
    7b26:	4906      	ldr	r1, [pc, #24]	; (7b40 <uarte_nrfx_init+0x84>)
    7b28:	3028      	adds	r0, #40	; 0x28
    7b2a:	f008 fd34 	bl	10596 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    7b2e:	68eb      	ldr	r3, [r5, #12]
    7b30:	65dd      	str	r5, [r3, #92]	; 0x5c
}
    7b32:	4630      	mov	r0, r6
    7b34:	bd70      	pop	{r4, r5, r6, pc}
    7b36:	bf00      	nop
    7b38:	000a0210 	.word	0x000a0210
    7b3c:	0000fb0b 	.word	0x0000fb0b
    7b40:	0000faff 	.word	0x0000faff

00007b44 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    7b44:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    7b48:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    7b4c:	4b01      	ldr	r3, [pc, #4]	; (7b54 <set_comparator+0x10>)
    7b4e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    7b52:	4770      	bx	lr
    7b54:	40011000 	.word	0x40011000

00007b58 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    7b58:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    7b5c:	4b01      	ldr	r3, [pc, #4]	; (7b64 <get_comparator+0xc>)
    7b5e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    7b62:	4770      	bx	lr
    7b64:	40011000 	.word	0x40011000

00007b68 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7b68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7b6c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    7b6e:	4a02      	ldr	r2, [pc, #8]	; (7b78 <event_enable+0x10>)
    7b70:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    7b74:	4770      	bx	lr
    7b76:	bf00      	nop
    7b78:	40011000 	.word	0x40011000

00007b7c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7b7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7b80:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    7b82:	4a02      	ldr	r2, [pc, #8]	; (7b8c <event_disable+0x10>)
    7b84:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    7b88:	4770      	bx	lr
    7b8a:	bf00      	nop
    7b8c:	40011000 	.word	0x40011000

00007b90 <counter>:
     return p_reg->COUNTER;
    7b90:	4b01      	ldr	r3, [pc, #4]	; (7b98 <counter+0x8>)
    7b92:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    7b96:	4770      	bx	lr
    7b98:	40011000 	.word	0x40011000

00007b9c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    7b9c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    7b9e:	2301      	movs	r3, #1
    7ba0:	4083      	lsls	r3, r0
    7ba2:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7ba6:	4a10      	ldr	r2, [pc, #64]	; (7be8 <compare_int_lock+0x4c>)
    7ba8:	f3bf 8f5b 	dmb	ish
    7bac:	e852 1f00 	ldrex	r1, [r2]
    7bb0:	ea01 0e0c 	and.w	lr, r1, ip
    7bb4:	e842 e400 	strex	r4, lr, [r2]
    7bb8:	2c00      	cmp	r4, #0
    7bba:	d1f7      	bne.n	7bac <compare_int_lock+0x10>
    7bbc:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7bc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    7bc4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    7bc8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    7bcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    7bd0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    7bd4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7bd8:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    7bdc:	420b      	tst	r3, r1
}
    7bde:	bf14      	ite	ne
    7be0:	2001      	movne	r0, #1
    7be2:	2000      	moveq	r0, #0
    7be4:	bd10      	pop	{r4, pc}
    7be6:	bf00      	nop
    7be8:	2000d01c 	.word	0x2000d01c

00007bec <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    7bec:	b570      	push	{r4, r5, r6, lr}
    7bee:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    7bf0:	f008 fa7f 	bl	100f2 <full_int_lock>
    7bf4:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    7bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7bfa:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    7bfc:	4a17      	ldr	r2, [pc, #92]	; (7c5c <channel_processing_check_and_clear+0x70>)
    7bfe:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    7c02:	4213      	tst	r3, r2
    7c04:	d105      	bne.n	7c12 <channel_processing_check_and_clear+0x26>
	bool result = false;
    7c06:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    7c08:	4628      	mov	r0, r5
    7c0a:	f008 fa7b 	bl	10104 <full_int_unlock>

	return result;
}
    7c0e:	4630      	mov	r0, r6
    7c10:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    7c12:	2301      	movs	r3, #1
    7c14:	40a3      	lsls	r3, r4
    7c16:	43db      	mvns	r3, r3
    7c18:	4a11      	ldr	r2, [pc, #68]	; (7c60 <channel_processing_check_and_clear+0x74>)
    7c1a:	f3bf 8f5b 	dmb	ish
    7c1e:	e852 1f00 	ldrex	r1, [r2]
    7c22:	ea01 0003 	and.w	r0, r1, r3
    7c26:	e842 0600 	strex	r6, r0, [r2]
    7c2a:	2e00      	cmp	r6, #0
    7c2c:	d1f7      	bne.n	7c1e <channel_processing_check_and_clear+0x32>
    7c2e:	f3bf 8f5b 	dmb	ish
    7c32:	b959      	cbnz	r1, 7c4c <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7c34:	f104 0350 	add.w	r3, r4, #80	; 0x50
    7c38:	009b      	lsls	r3, r3, #2
    7c3a:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7c3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7c40:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    7c44:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    7c46:	b113      	cbz	r3, 7c4e <channel_processing_check_and_clear+0x62>
    7c48:	2301      	movs	r3, #1
    7c4a:	e000      	b.n	7c4e <channel_processing_check_and_clear+0x62>
    7c4c:	2301      	movs	r3, #1
		if (result) {
    7c4e:	461e      	mov	r6, r3
    7c50:	2b00      	cmp	r3, #0
    7c52:	d0d9      	beq.n	7c08 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    7c54:	4620      	mov	r0, r4
    7c56:	f008 fa3d 	bl	100d4 <event_clear>
    7c5a:	e7d5      	b.n	7c08 <channel_processing_check_and_clear+0x1c>
    7c5c:	40011000 	.word	0x40011000
    7c60:	2000d018 	.word	0x2000d018

00007c64 <compare_int_unlock>:
	if (key) {
    7c64:	b901      	cbnz	r1, 7c68 <compare_int_unlock+0x4>
}
    7c66:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    7c68:	2301      	movs	r3, #1
    7c6a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7c6c:	4a11      	ldr	r2, [pc, #68]	; (7cb4 <compare_int_unlock+0x50>)
    7c6e:	f3bf 8f5b 	dmb	ish
    7c72:	e852 1f00 	ldrex	r1, [r2]
    7c76:	4319      	orrs	r1, r3
    7c78:	e842 1c00 	strex	ip, r1, [r2]
    7c7c:	f1bc 0f00 	cmp.w	ip, #0
    7c80:	d1f7      	bne.n	7c72 <compare_int_unlock+0xe>
    7c82:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7c86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7c8a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    7c8c:	4a0a      	ldr	r2, [pc, #40]	; (7cb8 <compare_int_unlock+0x54>)
    7c8e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7c92:	f3bf 8f5b 	dmb	ish
    7c96:	4b09      	ldr	r3, [pc, #36]	; (7cbc <compare_int_unlock+0x58>)
    7c98:	681b      	ldr	r3, [r3, #0]
    7c9a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    7c9e:	fa23 f000 	lsr.w	r0, r3, r0
    7ca2:	f010 0f01 	tst.w	r0, #1
    7ca6:	d0de      	beq.n	7c66 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7ca8:	4b05      	ldr	r3, [pc, #20]	; (7cc0 <compare_int_unlock+0x5c>)
    7caa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7cae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    7cb2:	e7d8      	b.n	7c66 <compare_int_unlock+0x2>
    7cb4:	2000d01c 	.word	0x2000d01c
    7cb8:	40011000 	.word	0x40011000
    7cbc:	2000d018 	.word	0x2000d018
    7cc0:	e000e100 	.word	0xe000e100

00007cc4 <sys_clock_timeout_handler>:
{
    7cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7cc8:	4607      	mov	r7, r0
    7cca:	4614      	mov	r4, r2
    7ccc:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    7cce:	4610      	mov	r0, r2
    7cd0:	4619      	mov	r1, r3
    7cd2:	f008 fa0b 	bl	100ec <absolute_time_to_cc>
    7cd6:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    7cd8:	4b15      	ldr	r3, [pc, #84]	; (7d30 <sys_clock_timeout_handler+0x6c>)
    7cda:	681a      	ldr	r2, [r3, #0]
    7cdc:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    7cde:	601c      	str	r4, [r3, #0]
    7ce0:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    7ce2:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    7ce6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    7cea:	d309      	bcc.n	7d00 <sys_clock_timeout_handler+0x3c>
	return false;
    7cec:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    7cee:	f004 ff6d 	bl	cbcc <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    7cf2:	4638      	mov	r0, r7
    7cf4:	f7ff ff30 	bl	7b58 <get_comparator>
    7cf8:	42a8      	cmp	r0, r5
    7cfa:	d00e      	beq.n	7d1a <sys_clock_timeout_handler+0x56>
}
    7cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    7d00:	4b0c      	ldr	r3, [pc, #48]	; (7d34 <sys_clock_timeout_handler+0x70>)
    7d02:	681b      	ldr	r3, [r3, #0]
    7d04:	0a1a      	lsrs	r2, r3, #8
    7d06:	061b      	lsls	r3, r3, #24
    7d08:	eb15 0803 	adds.w	r8, r5, r3
    7d0c:	f142 0900 	adc.w	r9, r2, #0
    7d10:	4b09      	ldr	r3, [pc, #36]	; (7d38 <sys_clock_timeout_handler+0x74>)
    7d12:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    7d16:	2401      	movs	r4, #1
    7d18:	e7e9      	b.n	7cee <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    7d1a:	b11c      	cbz	r4, 7d24 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    7d1c:	4638      	mov	r0, r7
    7d1e:	f7ff ff23 	bl	7b68 <event_enable>
}
    7d22:	e7eb      	b.n	7cfc <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    7d24:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    7d28:	4638      	mov	r0, r7
    7d2a:	f7ff ff0b 	bl	7b44 <set_comparator>
    7d2e:	e7f5      	b.n	7d1c <sys_clock_timeout_handler+0x58>
    7d30:	200047c0 	.word	0x200047c0
    7d34:	2000d020 	.word	0x2000d020
    7d38:	200047a8 	.word	0x200047a8

00007d3c <z_nrf_rtc_timer_read>:
{
    7d3c:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    7d3e:	4b0d      	ldr	r3, [pc, #52]	; (7d74 <z_nrf_rtc_timer_read+0x38>)
    7d40:	681c      	ldr	r4, [r3, #0]
    7d42:	0a25      	lsrs	r5, r4, #8
    7d44:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    7d46:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    7d4a:	f7ff ff21 	bl	7b90 <counter>
    7d4e:	4603      	mov	r3, r0
	val += cntr;
    7d50:	1900      	adds	r0, r0, r4
    7d52:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    7d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    7d5a:	d20a      	bcs.n	7d72 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    7d5c:	4b06      	ldr	r3, [pc, #24]	; (7d78 <z_nrf_rtc_timer_read+0x3c>)
    7d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7d62:	4290      	cmp	r0, r2
    7d64:	eb71 0303 	sbcs.w	r3, r1, r3
    7d68:	d203      	bcs.n	7d72 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    7d6a:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    7d6e:	f141 0100 	adc.w	r1, r1, #0
}
    7d72:	bd38      	pop	{r3, r4, r5, pc}
    7d74:	2000d020 	.word	0x2000d020
    7d78:	200047a8 	.word	0x200047a8

00007d7c <compare_set_nolocks>:
{
    7d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d7e:	4606      	mov	r6, r0
    7d80:	4614      	mov	r4, r2
    7d82:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    7d84:	4610      	mov	r0, r2
    7d86:	4619      	mov	r1, r3
    7d88:	f008 f9b0 	bl	100ec <absolute_time_to_cc>
    7d8c:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    7d8e:	f7ff ffd5 	bl	7d3c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    7d92:	42a0      	cmp	r0, r4
    7d94:	eb71 0305 	sbcs.w	r3, r1, r5
    7d98:	d21d      	bcs.n	7dd6 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    7d9a:	1a23      	subs	r3, r4, r0
    7d9c:	eb65 0101 	sbc.w	r1, r5, r1
    7da0:	4a1b      	ldr	r2, [pc, #108]	; (7e10 <compare_set_nolocks+0x94>)
    7da2:	4293      	cmp	r3, r2
    7da4:	f171 0300 	sbcs.w	r3, r1, #0
    7da8:	d22f      	bcs.n	7e0a <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    7daa:	4b1a      	ldr	r3, [pc, #104]	; (7e14 <compare_set_nolocks+0x98>)
    7dac:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    7db0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    7db4:	42ab      	cmp	r3, r5
    7db6:	bf08      	it	eq
    7db8:	42a2      	cmpeq	r2, r4
    7dba:	d01a      	beq.n	7df2 <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    7dbc:	4639      	mov	r1, r7
    7dbe:	4630      	mov	r0, r6
    7dc0:	f008 f9a5 	bl	1010e <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    7dc4:	4639      	mov	r1, r7
    7dc6:	f008 f981 	bl	100cc <counter_sub>
    7dca:	1900      	adds	r0, r0, r4
    7dcc:	f145 0300 	adc.w	r3, r5, #0
    7dd0:	4604      	mov	r4, r0
    7dd2:	461d      	mov	r5, r3
    7dd4:	e00d      	b.n	7df2 <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    7dd6:	2301      	movs	r3, #1
    7dd8:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7dda:	4a0f      	ldr	r2, [pc, #60]	; (7e18 <compare_set_nolocks+0x9c>)
    7ddc:	f3bf 8f5b 	dmb	ish
    7de0:	e852 1f00 	ldrex	r1, [r2]
    7de4:	4319      	orrs	r1, r3
    7de6:	e842 1000 	strex	r0, r1, [r2]
    7dea:	2800      	cmp	r0, #0
    7dec:	d1f8      	bne.n	7de0 <compare_set_nolocks+0x64>
    7dee:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    7df2:	4b08      	ldr	r3, [pc, #32]	; (7e14 <compare_set_nolocks+0x98>)
    7df4:	0132      	lsls	r2, r6, #4
    7df6:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    7dfa:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    7dfe:	9906      	ldr	r1, [sp, #24]
    7e00:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    7e02:	9b07      	ldr	r3, [sp, #28]
    7e04:	6073      	str	r3, [r6, #4]
	return ret;
    7e06:	2000      	movs	r0, #0
}
    7e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    7e0a:	f06f 0015 	mvn.w	r0, #21
    7e0e:	e7fb      	b.n	7e08 <compare_set_nolocks+0x8c>
    7e10:	01000001 	.word	0x01000001
    7e14:	200047b0 	.word	0x200047b0
    7e18:	2000d018 	.word	0x2000d018

00007e1c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    7e1c:	b530      	push	{r4, r5, lr}
    7e1e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    7e20:	2300      	movs	r3, #0
    7e22:	4a1d      	ldr	r2, [pc, #116]	; (7e98 <sys_clock_driver_init+0x7c>)
    7e24:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    7e28:	2b00      	cmp	r3, #0
    7e2a:	dd24      	ble.n	7e76 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    7e2c:	4c1a      	ldr	r4, [pc, #104]	; (7e98 <sys_clock_driver_init+0x7c>)
    7e2e:	2502      	movs	r5, #2
    7e30:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7e34:	4b19      	ldr	r3, [pc, #100]	; (7e9c <sys_clock_driver_init+0x80>)
    7e36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7e3a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    7e3e:	2200      	movs	r2, #0
    7e40:	2101      	movs	r1, #1
    7e42:	2011      	movs	r0, #17
    7e44:	f7fd ff78 	bl	5d38 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    7e48:	2011      	movs	r0, #17
    7e4a:	f7fd ff59 	bl	5d00 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    7e4e:	2301      	movs	r3, #1
    7e50:	60a3      	str	r3, [r4, #8]
    7e52:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    7e54:	4a12      	ldr	r2, [pc, #72]	; (7ea0 <sys_clock_driver_init+0x84>)
    7e56:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    7e58:	2400      	movs	r4, #0
    7e5a:	9401      	str	r4, [sp, #4]
    7e5c:	4b11      	ldr	r3, [pc, #68]	; (7ea4 <sys_clock_driver_init+0x88>)
    7e5e:	9300      	str	r3, [sp, #0]
    7e60:	4a11      	ldr	r2, [pc, #68]	; (7ea8 <sys_clock_driver_init+0x8c>)
    7e62:	2300      	movs	r3, #0
    7e64:	4620      	mov	r0, r4
    7e66:	f008 f98d 	bl	10184 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    7e6a:	4628      	mov	r0, r5
    7e6c:	f7ff f924 	bl	70b8 <z_nrf_clock_control_lf_on>

	return 0;
}
    7e70:	4620      	mov	r0, r4
    7e72:	b003      	add	sp, #12
    7e74:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    7e76:	4a0d      	ldr	r2, [pc, #52]	; (7eac <sys_clock_driver_init+0x90>)
    7e78:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    7e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7e80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7e84:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7e88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    7e8c:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    7e8e:	4902      	ldr	r1, [pc, #8]	; (7e98 <sys_clock_driver_init+0x7c>)
    7e90:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    7e94:	3301      	adds	r3, #1
    7e96:	e7c7      	b.n	7e28 <sys_clock_driver_init+0xc>
    7e98:	40011000 	.word	0x40011000
    7e9c:	e000e100 	.word	0xe000e100
    7ea0:	2000d01c 	.word	0x2000d01c
    7ea4:	00007cc5 	.word	0x00007cc5
    7ea8:	007fffff 	.word	0x007fffff
    7eac:	200047b0 	.word	0x200047b0

00007eb0 <process_channel>:
{
    7eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7eb4:	b082      	sub	sp, #8
    7eb6:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    7eb8:	f7ff fe98 	bl	7bec <channel_processing_check_and_clear>
    7ebc:	b910      	cbnz	r0, 7ec4 <process_channel+0x14>
}
    7ebe:	b002      	add	sp, #8
    7ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    7ec4:	f7ff ff3a 	bl	7d3c <z_nrf_rtc_timer_read>
    7ec8:	4682      	mov	sl, r0
    7eca:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    7ecc:	f008 f911 	bl	100f2 <full_int_lock>
    7ed0:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    7ed2:	4b13      	ldr	r3, [pc, #76]	; (7f20 <process_channel+0x70>)
    7ed4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    7ed8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    7edc:	45c2      	cmp	sl, r8
    7ede:	eb76 0309 	sbcs.w	r3, r6, r9
    7ee2:	d20b      	bcs.n	7efc <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    7ee4:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    7ee6:	4628      	mov	r0, r5
    7ee8:	f008 f90c 	bl	10104 <full_int_unlock>
		if (handler) {
    7eec:	2e00      	cmp	r6, #0
    7eee:	d0e6      	beq.n	7ebe <process_channel+0xe>
			handler(chan, expire_time, user_context);
    7ef0:	9700      	str	r7, [sp, #0]
    7ef2:	4642      	mov	r2, r8
    7ef4:	464b      	mov	r3, r9
    7ef6:	4620      	mov	r0, r4
    7ef8:	47b0      	blx	r6
}
    7efa:	e7e0      	b.n	7ebe <process_channel+0xe>
			handler = cc_data[chan].callback;
    7efc:	4a08      	ldr	r2, [pc, #32]	; (7f20 <process_channel+0x70>)
    7efe:	0123      	lsls	r3, r4, #4
    7f00:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    7f04:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    7f06:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    7f08:	2000      	movs	r0, #0
    7f0a:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    7f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7f14:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    7f18:	4620      	mov	r0, r4
    7f1a:	f7ff fe2f 	bl	7b7c <event_disable>
    7f1e:	e7e2      	b.n	7ee6 <process_channel+0x36>
    7f20:	200047b0 	.word	0x200047b0

00007f24 <rtc_nrf_isr>:
{
    7f24:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    7f26:	4b0e      	ldr	r3, [pc, #56]	; (7f60 <rtc_nrf_isr+0x3c>)
    7f28:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    7f2c:	f013 0f02 	tst.w	r3, #2
    7f30:	d00d      	beq.n	7f4e <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7f32:	4b0b      	ldr	r3, [pc, #44]	; (7f60 <rtc_nrf_isr+0x3c>)
    7f34:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    7f38:	b14b      	cbz	r3, 7f4e <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7f3a:	4b09      	ldr	r3, [pc, #36]	; (7f60 <rtc_nrf_isr+0x3c>)
    7f3c:	2200      	movs	r2, #0
    7f3e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7f42:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    7f46:	4a07      	ldr	r2, [pc, #28]	; (7f64 <rtc_nrf_isr+0x40>)
    7f48:	6813      	ldr	r3, [r2, #0]
    7f4a:	3301      	adds	r3, #1
    7f4c:	6013      	str	r3, [r2, #0]
{
    7f4e:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    7f50:	2c00      	cmp	r4, #0
    7f52:	dd00      	ble.n	7f56 <rtc_nrf_isr+0x32>
}
    7f54:	bd10      	pop	{r4, pc}
		process_channel(chan);
    7f56:	4620      	mov	r0, r4
    7f58:	f7ff ffaa 	bl	7eb0 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    7f5c:	3401      	adds	r4, #1
    7f5e:	e7f7      	b.n	7f50 <rtc_nrf_isr+0x2c>
    7f60:	40011000 	.word	0x40011000
    7f64:	2000d020 	.word	0x2000d020

00007f68 <sys_clock_set_timeout>:
{
    7f68:	b510      	push	{r4, lr}
    7f6a:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    7f6c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    7f70:	d006      	beq.n	7f80 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    7f72:	2801      	cmp	r0, #1
    7f74:	dd06      	ble.n	7f84 <sys_clock_set_timeout+0x1c>
    7f76:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7f7a:	da05      	bge.n	7f88 <sys_clock_set_timeout+0x20>
    7f7c:	1e44      	subs	r4, r0, #1
    7f7e:	e004      	b.n	7f8a <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    7f80:	480f      	ldr	r0, [pc, #60]	; (7fc0 <sys_clock_set_timeout+0x58>)
    7f82:	e7f8      	b.n	7f76 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    7f84:	2400      	movs	r4, #0
    7f86:	e000      	b.n	7f8a <sys_clock_set_timeout+0x22>
    7f88:	4c0d      	ldr	r4, [pc, #52]	; (7fc0 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    7f8a:	f7ff fed7 	bl	7d3c <z_nrf_rtc_timer_read>
    7f8e:	4b0d      	ldr	r3, [pc, #52]	; (7fc4 <sys_clock_set_timeout+0x5c>)
    7f90:	6819      	ldr	r1, [r3, #0]
    7f92:	685b      	ldr	r3, [r3, #4]
    7f94:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    7f96:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7f9a:	d300      	bcc.n	7f9e <sys_clock_set_timeout+0x36>
		ticks = 0;
    7f9c:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    7f9e:	4420      	add	r0, r4
    7fa0:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    7fa2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    7fa6:	d300      	bcc.n	7faa <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    7fa8:	4a05      	ldr	r2, [pc, #20]	; (7fc0 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    7faa:	2000      	movs	r0, #0
    7fac:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    7fae:	9001      	str	r0, [sp, #4]
    7fb0:	4905      	ldr	r1, [pc, #20]	; (7fc8 <sys_clock_set_timeout+0x60>)
    7fb2:	9100      	str	r1, [sp, #0]
    7fb4:	f143 0300 	adc.w	r3, r3, #0
    7fb8:	f008 f8e4 	bl	10184 <compare_set>
}
    7fbc:	b002      	add	sp, #8
    7fbe:	bd10      	pop	{r4, pc}
    7fc0:	007fffff 	.word	0x007fffff
    7fc4:	200047c0 	.word	0x200047c0
    7fc8:	00007cc5 	.word	0x00007cc5

00007fcc <sys_clock_elapsed>:
{
    7fcc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    7fce:	f7ff feb5 	bl	7d3c <z_nrf_rtc_timer_read>
    7fd2:	4b02      	ldr	r3, [pc, #8]	; (7fdc <sys_clock_elapsed+0x10>)
    7fd4:	681b      	ldr	r3, [r3, #0]
}
    7fd6:	1ac0      	subs	r0, r0, r3
    7fd8:	bd08      	pop	{r3, pc}
    7fda:	bf00      	nop
    7fdc:	200047c0 	.word	0x200047c0

00007fe0 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    7fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7fe4:	460c      	mov	r4, r1
    7fe6:	4691      	mov	r9, r2
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    7fe8:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    7fec:	d002      	beq.n	7ff4 <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7fee:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    7ff2:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    7ff4:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    7ff8:	f3c0 1881 	ubfx	r8, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    7ffc:	f3c0 2703 	ubfx	r7, r0, #8, #4
    uint32_t port = pin_number >> 5;
    8000:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    8004:	f010 0f20 	tst.w	r0, #32
    8008:	d01d      	beq.n	8046 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x46>
    800a:	b1fb      	cbz	r3, 804c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>
            mask = P1_FEATURE_PINS_PRESENT;
    800c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8010:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8014:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8016:	f013 0f01 	tst.w	r3, #1
    801a:	d019      	beq.n	8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    *p_pin = pin_number & 0x1F;
    801c:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8020:	096d      	lsrs	r5, r5, #5
    8022:	d023      	beq.n	806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>
    8024:	bb2d      	cbnz	r5, 8072 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x72>
            NRFX_ASSERT(0);
    8026:	4d19      	ldr	r5, [pc, #100]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    8028:	f240 232e 	movw	r3, #558	; 0x22e
    802c:	462a      	mov	r2, r5
    802e:	4918      	ldr	r1, [pc, #96]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    8030:	4818      	ldr	r0, [pc, #96]	; (8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>)
    8032:	f007 f877 	bl	f124 <assert_print>
    8036:	f240 212e 	movw	r1, #558	; 0x22e
    803a:	4628      	mov	r0, r5
    803c:	f007 f86b 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    8040:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8044:	e016      	b.n	8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
            mask = P0_FEATURE_PINS_PRESENT;
    8046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    804a:	e7e1      	b.n	8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    switch (port)
    804c:	2300      	movs	r3, #0
    804e:	e7df      	b.n	8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8050:	4e0e      	ldr	r6, [pc, #56]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    8052:	f240 2329 	movw	r3, #553	; 0x229
    8056:	4632      	mov	r2, r6
    8058:	490f      	ldr	r1, [pc, #60]	; (8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    805a:	480e      	ldr	r0, [pc, #56]	; (8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>)
    805c:	f007 f862 	bl	f124 <assert_print>
    8060:	f240 2129 	movw	r1, #553	; 0x229
    8064:	4630      	mov	r0, r6
    8066:	f007 f856 	bl	f116 <assert_post_action>
    806a:	e7d7      	b.n	801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
        case 0: return NRF_P0;
    806c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8070:	e000      	b.n	8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8072:	4b0a      	ldr	r3, [pc, #40]	; (809c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    8074:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    8078:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    807c:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    8080:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    8084:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
}
    8088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    808c:	000127cc 	.word	0x000127cc
    8090:	00011bd0 	.word	0x00011bd0
    8094:	00011514 	.word	0x00011514
    8098:	00012800 	.word	0x00012800
    809c:	50000300 	.word	0x50000300

000080a0 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    80a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    80a4:	4605      	mov	r5, r0
    80a6:	460e      	mov	r6, r1
    80a8:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    80aa:	2400      	movs	r4, #0
    80ac:	e04e      	b.n	814c <pinctrl_configure_pins+0xac>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    80ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    80b2:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    80b6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    80ba:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    80be:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    80c2:	f013 0f20 	tst.w	r3, #32
    80c6:	d01f      	beq.n	8108 <pinctrl_configure_pins+0x68>
    80c8:	b109      	cbz	r1, 80ce <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    80ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    80ce:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    80d2:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    80d4:	f012 0f01 	tst.w	r2, #1
    80d8:	d019      	beq.n	810e <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    80da:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    80de:	ea5f 1359 	movs.w	r3, r9, lsr #5
    80e2:	d023      	beq.n	812c <pinctrl_configure_pins+0x8c>
    80e4:	bb2b      	cbnz	r3, 8132 <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    80e6:	f8df 9344 	ldr.w	r9, [pc, #836]	; 842c <pinctrl_configure_pins+0x38c>
    80ea:	f240 232e 	movw	r3, #558	; 0x22e
    80ee:	464a      	mov	r2, r9
    80f0:	49cf      	ldr	r1, [pc, #828]	; (8430 <pinctrl_configure_pins+0x390>)
    80f2:	48d0      	ldr	r0, [pc, #832]	; (8434 <pinctrl_configure_pins+0x394>)
    80f4:	f007 f816 	bl	f124 <assert_print>
    80f8:	f240 212e 	movw	r1, #558	; 0x22e
    80fc:	4648      	mov	r0, r9
    80fe:	f007 f80a 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    8102:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8106:	e015      	b.n	8134 <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    8108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    810c:	e7df      	b.n	80ce <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    810e:	f8df a31c 	ldr.w	sl, [pc, #796]	; 842c <pinctrl_configure_pins+0x38c>
    8112:	f240 2329 	movw	r3, #553	; 0x229
    8116:	4652      	mov	r2, sl
    8118:	49c7      	ldr	r1, [pc, #796]	; (8438 <pinctrl_configure_pins+0x398>)
    811a:	48c6      	ldr	r0, [pc, #792]	; (8434 <pinctrl_configure_pins+0x394>)
    811c:	f007 f802 	bl	f124 <assert_print>
    8120:	f240 2129 	movw	r1, #553	; 0x229
    8124:	4650      	mov	r0, sl
    8126:	f006 fff6 	bl	f116 <assert_post_action>
    812a:	e7d6      	b.n	80da <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    812c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8130:	e000      	b.n	8134 <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8132:	4ac2      	ldr	r2, [pc, #776]	; (843c <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8134:	2101      	movs	r1, #1
    8136:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    813a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    813e:	460a      	mov	r2, r1
    8140:	f855 0008 	ldr.w	r0, [r5, r8]
    8144:	f7ff ff4c 	bl	7fe0 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    8148:	3401      	adds	r4, #1
    814a:	b2e4      	uxtb	r4, r4
    814c:	42b4      	cmp	r4, r6
    814e:	f080 841e 	bcs.w	898e <pinctrl_configure_pins+0x8ee>
		switch (NRF_GET_FUN(pins[i])) {
    8152:	ea4f 0884 	mov.w	r8, r4, lsl #2
    8156:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    815a:	0c1a      	lsrs	r2, r3, #16
    815c:	2a22      	cmp	r2, #34	; 0x22
    815e:	f200 8418 	bhi.w	8992 <pinctrl_configure_pins+0x8f2>
    8162:	a101      	add	r1, pc, #4	; (adr r1, 8168 <pinctrl_configure_pins+0xc8>)
    8164:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    8168:	000080af 	.word	0x000080af
    816c:	000081f5 	.word	0x000081f5
    8170:	0000820b 	.word	0x0000820b
    8174:	000082ab 	.word	0x000082ab
    8178:	000082c1 	.word	0x000082c1
    817c:	00008361 	.word	0x00008361
    8180:	00008401 	.word	0x00008401
    8184:	00008993 	.word	0x00008993
    8188:	00008993 	.word	0x00008993
    818c:	00008993 	.word	0x00008993
    8190:	00008993 	.word	0x00008993
    8194:	00008417 	.word	0x00008417
    8198:	00008441 	.word	0x00008441
    819c:	00008993 	.word	0x00008993
    81a0:	00008993 	.word	0x00008993
    81a4:	00008993 	.word	0x00008993
    81a8:	00008993 	.word	0x00008993
    81ac:	00008993 	.word	0x00008993
    81b0:	00008993 	.word	0x00008993
    81b4:	00008993 	.word	0x00008993
    81b8:	00008993 	.word	0x00008993
    81bc:	00008993 	.word	0x00008993
    81c0:	00008457 	.word	0x00008457
    81c4:	0000857d 	.word	0x0000857d
    81c8:	000086a3 	.word	0x000086a3
    81cc:	000087df 	.word	0x000087df
    81d0:	00008993 	.word	0x00008993
    81d4:	00008993 	.word	0x00008993
    81d8:	00008993 	.word	0x00008993
    81dc:	00008905 	.word	0x00008905
    81e0:	0000891b 	.word	0x0000891b
    81e4:	00008931 	.word	0x00008931
    81e8:	00008947 	.word	0x00008947
    81ec:	0000895f 	.word	0x0000895f
    81f0:	00008977 	.word	0x00008977
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    81f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    81f8:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    81fc:	2200      	movs	r2, #0
    81fe:	4611      	mov	r1, r2
    8200:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8204:	f7ff feec 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    8208:	e79e      	b.n	8148 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    820a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    820e:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    8212:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    8216:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    821a:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    821e:	f013 0f20 	tst.w	r3, #32
    8222:	d01f      	beq.n	8264 <pinctrl_configure_pins+0x1c4>
    8224:	b30a      	cbz	r2, 826a <pinctrl_configure_pins+0x1ca>
            mask = P1_FEATURE_PINS_PRESENT;
    8226:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    822a:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    822e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8230:	f013 0f01 	tst.w	r3, #1
    8234:	d01b      	beq.n	826e <pinctrl_configure_pins+0x1ce>
    *p_pin = pin_number & 0x1F;
    8236:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    823a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    823e:	d025      	beq.n	828c <pinctrl_configure_pins+0x1ec>
    8240:	bb3b      	cbnz	r3, 8292 <pinctrl_configure_pins+0x1f2>
            NRFX_ASSERT(0);
    8242:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 842c <pinctrl_configure_pins+0x38c>
    8246:	f240 232e 	movw	r3, #558	; 0x22e
    824a:	464a      	mov	r2, r9
    824c:	4978      	ldr	r1, [pc, #480]	; (8430 <pinctrl_configure_pins+0x390>)
    824e:	4879      	ldr	r0, [pc, #484]	; (8434 <pinctrl_configure_pins+0x394>)
    8250:	f006 ff68 	bl	f124 <assert_print>
    8254:	f240 212e 	movw	r1, #558	; 0x22e
    8258:	4648      	mov	r0, r9
    825a:	f006 ff5c 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    825e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8262:	e017      	b.n	8294 <pinctrl_configure_pins+0x1f4>
            mask = P0_FEATURE_PINS_PRESENT;
    8264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8268:	e7df      	b.n	822a <pinctrl_configure_pins+0x18a>
    switch (port)
    826a:	2300      	movs	r3, #0
    826c:	e7dd      	b.n	822a <pinctrl_configure_pins+0x18a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    826e:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 842c <pinctrl_configure_pins+0x38c>
    8272:	f240 2329 	movw	r3, #553	; 0x229
    8276:	4652      	mov	r2, sl
    8278:	496f      	ldr	r1, [pc, #444]	; (8438 <pinctrl_configure_pins+0x398>)
    827a:	486e      	ldr	r0, [pc, #440]	; (8434 <pinctrl_configure_pins+0x394>)
    827c:	f006 ff52 	bl	f124 <assert_print>
    8280:	f240 2129 	movw	r1, #553	; 0x229
    8284:	4650      	mov	r0, sl
    8286:	f006 ff46 	bl	f116 <assert_post_action>
    828a:	e7d4      	b.n	8236 <pinctrl_configure_pins+0x196>
        case 0: return NRF_P0;
    828c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8290:	e000      	b.n	8294 <pinctrl_configure_pins+0x1f4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8292:	4a6a      	ldr	r2, [pc, #424]	; (843c <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8294:	2101      	movs	r1, #1
    8296:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    829a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    829e:	460a      	mov	r2, r1
    82a0:	f855 0008 	ldr.w	r0, [r5, r8]
    82a4:	f7ff fe9c 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    82a8:	e74e      	b.n	8148 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    82aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    82ae:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    82b2:	2200      	movs	r2, #0
    82b4:	4611      	mov	r1, r2
    82b6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    82ba:	f7ff fe91 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    82be:	e743      	b.n	8148 <pinctrl_configure_pins+0xa8>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    82c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    82c4:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    82c8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    82cc:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    82d0:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    82d4:	f013 0f20 	tst.w	r3, #32
    82d8:	d01f      	beq.n	831a <pinctrl_configure_pins+0x27a>
    82da:	b30a      	cbz	r2, 8320 <pinctrl_configure_pins+0x280>
            mask = P1_FEATURE_PINS_PRESENT;
    82dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    82e0:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    82e4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    82e6:	f013 0f01 	tst.w	r3, #1
    82ea:	d01b      	beq.n	8324 <pinctrl_configure_pins+0x284>
    *p_pin = pin_number & 0x1F;
    82ec:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    82f0:	ea5f 1359 	movs.w	r3, r9, lsr #5
    82f4:	d025      	beq.n	8342 <pinctrl_configure_pins+0x2a2>
    82f6:	bb3b      	cbnz	r3, 8348 <pinctrl_configure_pins+0x2a8>
            NRFX_ASSERT(0);
    82f8:	f8df 9130 	ldr.w	r9, [pc, #304]	; 842c <pinctrl_configure_pins+0x38c>
    82fc:	f240 232e 	movw	r3, #558	; 0x22e
    8300:	464a      	mov	r2, r9
    8302:	494b      	ldr	r1, [pc, #300]	; (8430 <pinctrl_configure_pins+0x390>)
    8304:	484b      	ldr	r0, [pc, #300]	; (8434 <pinctrl_configure_pins+0x394>)
    8306:	f006 ff0d 	bl	f124 <assert_print>
    830a:	f240 212e 	movw	r1, #558	; 0x22e
    830e:	4648      	mov	r0, r9
    8310:	f006 ff01 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    8314:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8318:	e017      	b.n	834a <pinctrl_configure_pins+0x2aa>
            mask = P0_FEATURE_PINS_PRESENT;
    831a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    831e:	e7df      	b.n	82e0 <pinctrl_configure_pins+0x240>
    switch (port)
    8320:	2300      	movs	r3, #0
    8322:	e7dd      	b.n	82e0 <pinctrl_configure_pins+0x240>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8324:	f8df a104 	ldr.w	sl, [pc, #260]	; 842c <pinctrl_configure_pins+0x38c>
    8328:	f240 2329 	movw	r3, #553	; 0x229
    832c:	4652      	mov	r2, sl
    832e:	4942      	ldr	r1, [pc, #264]	; (8438 <pinctrl_configure_pins+0x398>)
    8330:	4840      	ldr	r0, [pc, #256]	; (8434 <pinctrl_configure_pins+0x394>)
    8332:	f006 fef7 	bl	f124 <assert_print>
    8336:	f240 2129 	movw	r1, #553	; 0x229
    833a:	4650      	mov	r0, sl
    833c:	f006 feeb 	bl	f116 <assert_post_action>
    8340:	e7d4      	b.n	82ec <pinctrl_configure_pins+0x24c>
        case 0: return NRF_P0;
    8342:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8346:	e000      	b.n	834a <pinctrl_configure_pins+0x2aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8348:	4a3c      	ldr	r2, [pc, #240]	; (843c <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    834a:	2101      	movs	r1, #1
    834c:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    8350:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8354:	2200      	movs	r2, #0
    8356:	f855 0008 	ldr.w	r0, [r5, r8]
    835a:	f7ff fe41 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    835e:	e6f3      	b.n	8148 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    8360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8364:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    8368:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    836c:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    8370:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    8374:	f013 0f20 	tst.w	r3, #32
    8378:	d01f      	beq.n	83ba <pinctrl_configure_pins+0x31a>
    837a:	b30a      	cbz	r2, 83c0 <pinctrl_configure_pins+0x320>
            mask = P1_FEATURE_PINS_PRESENT;
    837c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8380:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8384:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8386:	f013 0f01 	tst.w	r3, #1
    838a:	d01b      	beq.n	83c4 <pinctrl_configure_pins+0x324>
    *p_pin = pin_number & 0x1F;
    838c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8390:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8394:	d025      	beq.n	83e2 <pinctrl_configure_pins+0x342>
    8396:	bb3b      	cbnz	r3, 83e8 <pinctrl_configure_pins+0x348>
            NRFX_ASSERT(0);
    8398:	f8df 9090 	ldr.w	r9, [pc, #144]	; 842c <pinctrl_configure_pins+0x38c>
    839c:	f240 232e 	movw	r3, #558	; 0x22e
    83a0:	464a      	mov	r2, r9
    83a2:	4923      	ldr	r1, [pc, #140]	; (8430 <pinctrl_configure_pins+0x390>)
    83a4:	4823      	ldr	r0, [pc, #140]	; (8434 <pinctrl_configure_pins+0x394>)
    83a6:	f006 febd 	bl	f124 <assert_print>
    83aa:	f240 212e 	movw	r1, #558	; 0x22e
    83ae:	4648      	mov	r0, r9
    83b0:	f006 feb1 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    83b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    83b8:	e017      	b.n	83ea <pinctrl_configure_pins+0x34a>
            mask = P0_FEATURE_PINS_PRESENT;
    83ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    83be:	e7df      	b.n	8380 <pinctrl_configure_pins+0x2e0>
    switch (port)
    83c0:	2300      	movs	r3, #0
    83c2:	e7dd      	b.n	8380 <pinctrl_configure_pins+0x2e0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    83c4:	f8df a064 	ldr.w	sl, [pc, #100]	; 842c <pinctrl_configure_pins+0x38c>
    83c8:	f240 2329 	movw	r3, #553	; 0x229
    83cc:	4652      	mov	r2, sl
    83ce:	491a      	ldr	r1, [pc, #104]	; (8438 <pinctrl_configure_pins+0x398>)
    83d0:	4818      	ldr	r0, [pc, #96]	; (8434 <pinctrl_configure_pins+0x394>)
    83d2:	f006 fea7 	bl	f124 <assert_print>
    83d6:	f240 2129 	movw	r1, #553	; 0x229
    83da:	4650      	mov	r0, sl
    83dc:	f006 fe9b 	bl	f116 <assert_post_action>
    83e0:	e7d4      	b.n	838c <pinctrl_configure_pins+0x2ec>
        case 0: return NRF_P0;
    83e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    83e6:	e000      	b.n	83ea <pinctrl_configure_pins+0x34a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    83e8:	4a14      	ldr	r2, [pc, #80]	; (843c <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    83ea:	2101      	movs	r1, #1
    83ec:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    83f0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    83f4:	460a      	mov	r2, r1
    83f6:	f855 0008 	ldr.w	r0, [r5, r8]
    83fa:	f7ff fdf1 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    83fe:	e6a3      	b.n	8148 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    8400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8404:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8408:	2200      	movs	r2, #0
    840a:	4611      	mov	r1, r2
    840c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8410:	f7ff fde6 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    8414:	e698      	b.n	8148 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    8416:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    841a:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    841e:	2200      	movs	r2, #0
    8420:	4611      	mov	r1, r2
    8422:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8426:	f7ff fddb 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    842a:	e68d      	b.n	8148 <pinctrl_configure_pins+0xa8>
    842c:	000127cc 	.word	0x000127cc
    8430:	00011bd0 	.word	0x00011bd0
    8434:	00011514 	.word	0x00011514
    8438:	00012800 	.word	0x00012800
    843c:	50000300 	.word	0x50000300
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    8440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8444:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8448:	2200      	movs	r2, #0
    844a:	4611      	mov	r1, r2
    844c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8450:	f7ff fdc6 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    8454:	e678      	b.n	8148 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    8456:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    845a:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    845e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    8462:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    8466:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    846a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    846e:	d144      	bne.n	84fa <pinctrl_configure_pins+0x45a>
    switch (port)
    8470:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8474:	d01f      	beq.n	84b6 <pinctrl_configure_pins+0x416>
    8476:	b10b      	cbz	r3, 847c <pinctrl_configure_pins+0x3dc>
            mask = P1_FEATURE_PINS_PRESENT;
    8478:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    847c:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8480:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8482:	f012 0f01 	tst.w	r2, #1
    8486:	d019      	beq.n	84bc <pinctrl_configure_pins+0x41c>
    *p_pin = pin_number & 0x1F;
    8488:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    848c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8490:	d023      	beq.n	84da <pinctrl_configure_pins+0x43a>
    8492:	bb2b      	cbnz	r3, 84e0 <pinctrl_configure_pins+0x440>
            NRFX_ASSERT(0);
    8494:	f8df 9300 	ldr.w	r9, [pc, #768]	; 8798 <pinctrl_configure_pins+0x6f8>
    8498:	f240 232e 	movw	r3, #558	; 0x22e
    849c:	464a      	mov	r2, r9
    849e:	49bf      	ldr	r1, [pc, #764]	; (879c <pinctrl_configure_pins+0x6fc>)
    84a0:	48bf      	ldr	r0, [pc, #764]	; (87a0 <pinctrl_configure_pins+0x700>)
    84a2:	f006 fe3f 	bl	f124 <assert_print>
    84a6:	f240 212e 	movw	r1, #558	; 0x22e
    84aa:	4648      	mov	r0, r9
    84ac:	f006 fe33 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    84b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    84b4:	e015      	b.n	84e2 <pinctrl_configure_pins+0x442>
            mask = P0_FEATURE_PINS_PRESENT;
    84b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    84ba:	e7df      	b.n	847c <pinctrl_configure_pins+0x3dc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    84bc:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 8798 <pinctrl_configure_pins+0x6f8>
    84c0:	f240 2329 	movw	r3, #553	; 0x229
    84c4:	4652      	mov	r2, sl
    84c6:	49b7      	ldr	r1, [pc, #732]	; (87a4 <pinctrl_configure_pins+0x704>)
    84c8:	48b5      	ldr	r0, [pc, #724]	; (87a0 <pinctrl_configure_pins+0x700>)
    84ca:	f006 fe2b 	bl	f124 <assert_print>
    84ce:	f240 2129 	movw	r1, #553	; 0x229
    84d2:	4650      	mov	r0, sl
    84d4:	f006 fe1f 	bl	f116 <assert_post_action>
    84d8:	e7d6      	b.n	8488 <pinctrl_configure_pins+0x3e8>
        case 0: return NRF_P0;
    84da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    84de:	e000      	b.n	84e2 <pinctrl_configure_pins+0x442>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    84e0:	4ab1      	ldr	r2, [pc, #708]	; (87a8 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    84e2:	2301      	movs	r3, #1
    84e4:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    84e8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    84ec:	2201      	movs	r2, #1
    84ee:	4611      	mov	r1, r2
    84f0:	f855 0008 	ldr.w	r0, [r5, r8]
    84f4:	f7ff fd74 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    84f8:	e626      	b.n	8148 <pinctrl_configure_pins+0xa8>
    switch (port)
    84fa:	ea5f 1359 	movs.w	r3, r9, lsr #5
    84fe:	d01f      	beq.n	8540 <pinctrl_configure_pins+0x4a0>
    8500:	b30b      	cbz	r3, 8546 <pinctrl_configure_pins+0x4a6>
            mask = P1_FEATURE_PINS_PRESENT;
    8502:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8506:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    850a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    850c:	f013 0f01 	tst.w	r3, #1
    8510:	d01b      	beq.n	854a <pinctrl_configure_pins+0x4aa>
    *p_pin = pin_number & 0x1F;
    8512:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8516:	ea5f 1359 	movs.w	r3, r9, lsr #5
    851a:	d025      	beq.n	8568 <pinctrl_configure_pins+0x4c8>
    851c:	bb3b      	cbnz	r3, 856e <pinctrl_configure_pins+0x4ce>
            NRFX_ASSERT(0);
    851e:	f8df 9278 	ldr.w	r9, [pc, #632]	; 8798 <pinctrl_configure_pins+0x6f8>
    8522:	f240 232e 	movw	r3, #558	; 0x22e
    8526:	464a      	mov	r2, r9
    8528:	499c      	ldr	r1, [pc, #624]	; (879c <pinctrl_configure_pins+0x6fc>)
    852a:	489d      	ldr	r0, [pc, #628]	; (87a0 <pinctrl_configure_pins+0x700>)
    852c:	f006 fdfa 	bl	f124 <assert_print>
    8530:	f240 212e 	movw	r1, #558	; 0x22e
    8534:	4648      	mov	r0, r9
    8536:	f006 fdee 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    853a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    853e:	e017      	b.n	8570 <pinctrl_configure_pins+0x4d0>
            mask = P0_FEATURE_PINS_PRESENT;
    8540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8544:	e7df      	b.n	8506 <pinctrl_configure_pins+0x466>
    switch (port)
    8546:	2300      	movs	r3, #0
    8548:	e7dd      	b.n	8506 <pinctrl_configure_pins+0x466>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    854a:	f8df a24c 	ldr.w	sl, [pc, #588]	; 8798 <pinctrl_configure_pins+0x6f8>
    854e:	f240 2329 	movw	r3, #553	; 0x229
    8552:	4652      	mov	r2, sl
    8554:	4993      	ldr	r1, [pc, #588]	; (87a4 <pinctrl_configure_pins+0x704>)
    8556:	4892      	ldr	r0, [pc, #584]	; (87a0 <pinctrl_configure_pins+0x700>)
    8558:	f006 fde4 	bl	f124 <assert_print>
    855c:	f240 2129 	movw	r1, #553	; 0x229
    8560:	4650      	mov	r0, sl
    8562:	f006 fdd8 	bl	f116 <assert_post_action>
    8566:	e7d4      	b.n	8512 <pinctrl_configure_pins+0x472>
        case 0: return NRF_P0;
    8568:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    856c:	e000      	b.n	8570 <pinctrl_configure_pins+0x4d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    856e:	4a8e      	ldr	r2, [pc, #568]	; (87a8 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8570:	2301      	movs	r3, #1
    8572:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    8576:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    857a:	e7b7      	b.n	84ec <pinctrl_configure_pins+0x44c>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    857c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8580:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    8584:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    8588:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    858c:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    8590:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    8594:	d144      	bne.n	8620 <pinctrl_configure_pins+0x580>
    switch (port)
    8596:	ea5f 1359 	movs.w	r3, r9, lsr #5
    859a:	d01f      	beq.n	85dc <pinctrl_configure_pins+0x53c>
    859c:	b10b      	cbz	r3, 85a2 <pinctrl_configure_pins+0x502>
            mask = P1_FEATURE_PINS_PRESENT;
    859e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    85a2:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    85a6:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    85a8:	f012 0f01 	tst.w	r2, #1
    85ac:	d019      	beq.n	85e2 <pinctrl_configure_pins+0x542>
    *p_pin = pin_number & 0x1F;
    85ae:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    85b2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    85b6:	d023      	beq.n	8600 <pinctrl_configure_pins+0x560>
    85b8:	bb2b      	cbnz	r3, 8606 <pinctrl_configure_pins+0x566>
            NRFX_ASSERT(0);
    85ba:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8798 <pinctrl_configure_pins+0x6f8>
    85be:	f240 232e 	movw	r3, #558	; 0x22e
    85c2:	464a      	mov	r2, r9
    85c4:	4975      	ldr	r1, [pc, #468]	; (879c <pinctrl_configure_pins+0x6fc>)
    85c6:	4876      	ldr	r0, [pc, #472]	; (87a0 <pinctrl_configure_pins+0x700>)
    85c8:	f006 fdac 	bl	f124 <assert_print>
    85cc:	f240 212e 	movw	r1, #558	; 0x22e
    85d0:	4648      	mov	r0, r9
    85d2:	f006 fda0 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    85d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    85da:	e015      	b.n	8608 <pinctrl_configure_pins+0x568>
            mask = P0_FEATURE_PINS_PRESENT;
    85dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    85e0:	e7df      	b.n	85a2 <pinctrl_configure_pins+0x502>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    85e2:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8798 <pinctrl_configure_pins+0x6f8>
    85e6:	f240 2329 	movw	r3, #553	; 0x229
    85ea:	4652      	mov	r2, sl
    85ec:	496d      	ldr	r1, [pc, #436]	; (87a4 <pinctrl_configure_pins+0x704>)
    85ee:	486c      	ldr	r0, [pc, #432]	; (87a0 <pinctrl_configure_pins+0x700>)
    85f0:	f006 fd98 	bl	f124 <assert_print>
    85f4:	f240 2129 	movw	r1, #553	; 0x229
    85f8:	4650      	mov	r0, sl
    85fa:	f006 fd8c 	bl	f116 <assert_post_action>
    85fe:	e7d6      	b.n	85ae <pinctrl_configure_pins+0x50e>
        case 0: return NRF_P0;
    8600:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8604:	e000      	b.n	8608 <pinctrl_configure_pins+0x568>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8606:	4a68      	ldr	r2, [pc, #416]	; (87a8 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    8608:	2301      	movs	r3, #1
    860a:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    860e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8612:	2201      	movs	r2, #1
    8614:	4611      	mov	r1, r2
    8616:	f855 0008 	ldr.w	r0, [r5, r8]
    861a:	f7ff fce1 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    861e:	e593      	b.n	8148 <pinctrl_configure_pins+0xa8>
    switch (port)
    8620:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8624:	d01f      	beq.n	8666 <pinctrl_configure_pins+0x5c6>
    8626:	b30b      	cbz	r3, 866c <pinctrl_configure_pins+0x5cc>
            mask = P1_FEATURE_PINS_PRESENT;
    8628:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    862c:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8630:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8632:	f013 0f01 	tst.w	r3, #1
    8636:	d01b      	beq.n	8670 <pinctrl_configure_pins+0x5d0>
    *p_pin = pin_number & 0x1F;
    8638:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    863c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8640:	d025      	beq.n	868e <pinctrl_configure_pins+0x5ee>
    8642:	bb3b      	cbnz	r3, 8694 <pinctrl_configure_pins+0x5f4>
            NRFX_ASSERT(0);
    8644:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8798 <pinctrl_configure_pins+0x6f8>
    8648:	f240 232e 	movw	r3, #558	; 0x22e
    864c:	464a      	mov	r2, r9
    864e:	4953      	ldr	r1, [pc, #332]	; (879c <pinctrl_configure_pins+0x6fc>)
    8650:	4853      	ldr	r0, [pc, #332]	; (87a0 <pinctrl_configure_pins+0x700>)
    8652:	f006 fd67 	bl	f124 <assert_print>
    8656:	f240 212e 	movw	r1, #558	; 0x22e
    865a:	4648      	mov	r0, r9
    865c:	f006 fd5b 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    8660:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8664:	e017      	b.n	8696 <pinctrl_configure_pins+0x5f6>
            mask = P0_FEATURE_PINS_PRESENT;
    8666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    866a:	e7df      	b.n	862c <pinctrl_configure_pins+0x58c>
    switch (port)
    866c:	2300      	movs	r3, #0
    866e:	e7dd      	b.n	862c <pinctrl_configure_pins+0x58c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8670:	f8df a124 	ldr.w	sl, [pc, #292]	; 8798 <pinctrl_configure_pins+0x6f8>
    8674:	f240 2329 	movw	r3, #553	; 0x229
    8678:	4652      	mov	r2, sl
    867a:	494a      	ldr	r1, [pc, #296]	; (87a4 <pinctrl_configure_pins+0x704>)
    867c:	4848      	ldr	r0, [pc, #288]	; (87a0 <pinctrl_configure_pins+0x700>)
    867e:	f006 fd51 	bl	f124 <assert_print>
    8682:	f240 2129 	movw	r1, #553	; 0x229
    8686:	4650      	mov	r0, sl
    8688:	f006 fd45 	bl	f116 <assert_post_action>
    868c:	e7d4      	b.n	8638 <pinctrl_configure_pins+0x598>
        case 0: return NRF_P0;
    868e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8692:	e000      	b.n	8696 <pinctrl_configure_pins+0x5f6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8694:	4a44      	ldr	r2, [pc, #272]	; (87a8 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8696:	2301      	movs	r3, #1
    8698:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    869c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    86a0:	e7b7      	b.n	8612 <pinctrl_configure_pins+0x572>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    86a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    86a6:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    86aa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    86ae:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    86b2:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    86b6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    86ba:	d144      	bne.n	8746 <pinctrl_configure_pins+0x6a6>
    switch (port)
    86bc:	ea5f 1359 	movs.w	r3, r9, lsr #5
    86c0:	d01f      	beq.n	8702 <pinctrl_configure_pins+0x662>
    86c2:	b10b      	cbz	r3, 86c8 <pinctrl_configure_pins+0x628>
            mask = P1_FEATURE_PINS_PRESENT;
    86c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    86c8:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    86cc:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    86ce:	f012 0f01 	tst.w	r2, #1
    86d2:	d019      	beq.n	8708 <pinctrl_configure_pins+0x668>
    *p_pin = pin_number & 0x1F;
    86d4:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    86d8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    86dc:	d023      	beq.n	8726 <pinctrl_configure_pins+0x686>
    86de:	bb2b      	cbnz	r3, 872c <pinctrl_configure_pins+0x68c>
            NRFX_ASSERT(0);
    86e0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8798 <pinctrl_configure_pins+0x6f8>
    86e4:	f240 232e 	movw	r3, #558	; 0x22e
    86e8:	464a      	mov	r2, r9
    86ea:	492c      	ldr	r1, [pc, #176]	; (879c <pinctrl_configure_pins+0x6fc>)
    86ec:	482c      	ldr	r0, [pc, #176]	; (87a0 <pinctrl_configure_pins+0x700>)
    86ee:	f006 fd19 	bl	f124 <assert_print>
    86f2:	f240 212e 	movw	r1, #558	; 0x22e
    86f6:	4648      	mov	r0, r9
    86f8:	f006 fd0d 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    86fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8700:	e015      	b.n	872e <pinctrl_configure_pins+0x68e>
            mask = P0_FEATURE_PINS_PRESENT;
    8702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8706:	e7df      	b.n	86c8 <pinctrl_configure_pins+0x628>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8708:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8798 <pinctrl_configure_pins+0x6f8>
    870c:	f240 2329 	movw	r3, #553	; 0x229
    8710:	4652      	mov	r2, sl
    8712:	4924      	ldr	r1, [pc, #144]	; (87a4 <pinctrl_configure_pins+0x704>)
    8714:	4822      	ldr	r0, [pc, #136]	; (87a0 <pinctrl_configure_pins+0x700>)
    8716:	f006 fd05 	bl	f124 <assert_print>
    871a:	f240 2129 	movw	r1, #553	; 0x229
    871e:	4650      	mov	r0, sl
    8720:	f006 fcf9 	bl	f116 <assert_post_action>
    8724:	e7d6      	b.n	86d4 <pinctrl_configure_pins+0x634>
        case 0: return NRF_P0;
    8726:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    872a:	e000      	b.n	872e <pinctrl_configure_pins+0x68e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    872c:	4a1e      	ldr	r2, [pc, #120]	; (87a8 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    872e:	2301      	movs	r3, #1
    8730:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    8734:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8738:	2201      	movs	r2, #1
    873a:	4611      	mov	r1, r2
    873c:	f855 0008 	ldr.w	r0, [r5, r8]
    8740:	f7ff fc4e 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8744:	e500      	b.n	8148 <pinctrl_configure_pins+0xa8>
    switch (port)
    8746:	ea5f 1359 	movs.w	r3, r9, lsr #5
    874a:	d01f      	beq.n	878c <pinctrl_configure_pins+0x6ec>
    874c:	b30b      	cbz	r3, 8792 <pinctrl_configure_pins+0x6f2>
            mask = P1_FEATURE_PINS_PRESENT;
    874e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8752:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8756:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8758:	f013 0f01 	tst.w	r3, #1
    875c:	d026      	beq.n	87ac <pinctrl_configure_pins+0x70c>
    *p_pin = pin_number & 0x1F;
    875e:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8762:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8766:	d030      	beq.n	87ca <pinctrl_configure_pins+0x72a>
    8768:	bb93      	cbnz	r3, 87d0 <pinctrl_configure_pins+0x730>
            NRFX_ASSERT(0);
    876a:	f8df 902c 	ldr.w	r9, [pc, #44]	; 8798 <pinctrl_configure_pins+0x6f8>
    876e:	f240 232e 	movw	r3, #558	; 0x22e
    8772:	464a      	mov	r2, r9
    8774:	4909      	ldr	r1, [pc, #36]	; (879c <pinctrl_configure_pins+0x6fc>)
    8776:	480a      	ldr	r0, [pc, #40]	; (87a0 <pinctrl_configure_pins+0x700>)
    8778:	f006 fcd4 	bl	f124 <assert_print>
    877c:	f240 212e 	movw	r1, #558	; 0x22e
    8780:	4648      	mov	r0, r9
    8782:	f006 fcc8 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    8786:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    878a:	e022      	b.n	87d2 <pinctrl_configure_pins+0x732>
            mask = P0_FEATURE_PINS_PRESENT;
    878c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8790:	e7df      	b.n	8752 <pinctrl_configure_pins+0x6b2>
    switch (port)
    8792:	2300      	movs	r3, #0
    8794:	e7dd      	b.n	8752 <pinctrl_configure_pins+0x6b2>
    8796:	bf00      	nop
    8798:	000127cc 	.word	0x000127cc
    879c:	00011bd0 	.word	0x00011bd0
    87a0:	00011514 	.word	0x00011514
    87a4:	00012800 	.word	0x00012800
    87a8:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    87ac:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 899c <pinctrl_configure_pins+0x8fc>
    87b0:	f240 2329 	movw	r3, #553	; 0x229
    87b4:	4652      	mov	r2, sl
    87b6:	497a      	ldr	r1, [pc, #488]	; (89a0 <pinctrl_configure_pins+0x900>)
    87b8:	487a      	ldr	r0, [pc, #488]	; (89a4 <pinctrl_configure_pins+0x904>)
    87ba:	f006 fcb3 	bl	f124 <assert_print>
    87be:	f240 2129 	movw	r1, #553	; 0x229
    87c2:	4650      	mov	r0, sl
    87c4:	f006 fca7 	bl	f116 <assert_post_action>
    87c8:	e7c9      	b.n	875e <pinctrl_configure_pins+0x6be>
        case 0: return NRF_P0;
    87ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    87ce:	e000      	b.n	87d2 <pinctrl_configure_pins+0x732>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    87d0:	4a75      	ldr	r2, [pc, #468]	; (89a8 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    87d2:	2301      	movs	r3, #1
    87d4:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    87d8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    87dc:	e7ac      	b.n	8738 <pinctrl_configure_pins+0x698>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    87de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    87e2:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    87e6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    87ea:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    87ee:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    87f2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    87f6:	d144      	bne.n	8882 <pinctrl_configure_pins+0x7e2>
    switch (port)
    87f8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    87fc:	d01f      	beq.n	883e <pinctrl_configure_pins+0x79e>
    87fe:	b10b      	cbz	r3, 8804 <pinctrl_configure_pins+0x764>
            mask = P1_FEATURE_PINS_PRESENT;
    8800:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    8804:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8808:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    880a:	f012 0f01 	tst.w	r2, #1
    880e:	d019      	beq.n	8844 <pinctrl_configure_pins+0x7a4>
    *p_pin = pin_number & 0x1F;
    8810:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8814:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8818:	d023      	beq.n	8862 <pinctrl_configure_pins+0x7c2>
    881a:	bb2b      	cbnz	r3, 8868 <pinctrl_configure_pins+0x7c8>
            NRFX_ASSERT(0);
    881c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 899c <pinctrl_configure_pins+0x8fc>
    8820:	f240 232e 	movw	r3, #558	; 0x22e
    8824:	464a      	mov	r2, r9
    8826:	4961      	ldr	r1, [pc, #388]	; (89ac <pinctrl_configure_pins+0x90c>)
    8828:	485e      	ldr	r0, [pc, #376]	; (89a4 <pinctrl_configure_pins+0x904>)
    882a:	f006 fc7b 	bl	f124 <assert_print>
    882e:	f240 212e 	movw	r1, #558	; 0x22e
    8832:	4648      	mov	r0, r9
    8834:	f006 fc6f 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    8838:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    883c:	e015      	b.n	886a <pinctrl_configure_pins+0x7ca>
            mask = P0_FEATURE_PINS_PRESENT;
    883e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8842:	e7df      	b.n	8804 <pinctrl_configure_pins+0x764>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8844:	f8df a154 	ldr.w	sl, [pc, #340]	; 899c <pinctrl_configure_pins+0x8fc>
    8848:	f240 2329 	movw	r3, #553	; 0x229
    884c:	4652      	mov	r2, sl
    884e:	4954      	ldr	r1, [pc, #336]	; (89a0 <pinctrl_configure_pins+0x900>)
    8850:	4854      	ldr	r0, [pc, #336]	; (89a4 <pinctrl_configure_pins+0x904>)
    8852:	f006 fc67 	bl	f124 <assert_print>
    8856:	f240 2129 	movw	r1, #553	; 0x229
    885a:	4650      	mov	r0, sl
    885c:	f006 fc5b 	bl	f116 <assert_post_action>
    8860:	e7d6      	b.n	8810 <pinctrl_configure_pins+0x770>
        case 0: return NRF_P0;
    8862:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8866:	e000      	b.n	886a <pinctrl_configure_pins+0x7ca>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8868:	4a4f      	ldr	r2, [pc, #316]	; (89a8 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    886a:	2301      	movs	r3, #1
    886c:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    8870:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8874:	2201      	movs	r2, #1
    8876:	4611      	mov	r1, r2
    8878:	f855 0008 	ldr.w	r0, [r5, r8]
    887c:	f7ff fbb0 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8880:	e462      	b.n	8148 <pinctrl_configure_pins+0xa8>
    switch (port)
    8882:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8886:	d01f      	beq.n	88c8 <pinctrl_configure_pins+0x828>
    8888:	b30b      	cbz	r3, 88ce <pinctrl_configure_pins+0x82e>
            mask = P1_FEATURE_PINS_PRESENT;
    888a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    888e:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8892:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8894:	f013 0f01 	tst.w	r3, #1
    8898:	d01b      	beq.n	88d2 <pinctrl_configure_pins+0x832>
    *p_pin = pin_number & 0x1F;
    889a:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    889e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    88a2:	d025      	beq.n	88f0 <pinctrl_configure_pins+0x850>
    88a4:	bb3b      	cbnz	r3, 88f6 <pinctrl_configure_pins+0x856>
            NRFX_ASSERT(0);
    88a6:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 899c <pinctrl_configure_pins+0x8fc>
    88aa:	f240 232e 	movw	r3, #558	; 0x22e
    88ae:	464a      	mov	r2, r9
    88b0:	493e      	ldr	r1, [pc, #248]	; (89ac <pinctrl_configure_pins+0x90c>)
    88b2:	483c      	ldr	r0, [pc, #240]	; (89a4 <pinctrl_configure_pins+0x904>)
    88b4:	f006 fc36 	bl	f124 <assert_print>
    88b8:	f240 212e 	movw	r1, #558	; 0x22e
    88bc:	4648      	mov	r0, r9
    88be:	f006 fc2a 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    88c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    88c6:	e017      	b.n	88f8 <pinctrl_configure_pins+0x858>
            mask = P0_FEATURE_PINS_PRESENT;
    88c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    88cc:	e7df      	b.n	888e <pinctrl_configure_pins+0x7ee>
    switch (port)
    88ce:	2300      	movs	r3, #0
    88d0:	e7dd      	b.n	888e <pinctrl_configure_pins+0x7ee>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    88d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 899c <pinctrl_configure_pins+0x8fc>
    88d6:	f240 2329 	movw	r3, #553	; 0x229
    88da:	4652      	mov	r2, sl
    88dc:	4930      	ldr	r1, [pc, #192]	; (89a0 <pinctrl_configure_pins+0x900>)
    88de:	4831      	ldr	r0, [pc, #196]	; (89a4 <pinctrl_configure_pins+0x904>)
    88e0:	f006 fc20 	bl	f124 <assert_print>
    88e4:	f240 2129 	movw	r1, #553	; 0x229
    88e8:	4650      	mov	r0, sl
    88ea:	f006 fc14 	bl	f116 <assert_post_action>
    88ee:	e7d4      	b.n	889a <pinctrl_configure_pins+0x7fa>
        case 0: return NRF_P0;
    88f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    88f4:	e000      	b.n	88f8 <pinctrl_configure_pins+0x858>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    88f6:	4a2c      	ldr	r2, [pc, #176]	; (89a8 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    88f8:	2301      	movs	r3, #1
    88fa:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    88fe:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    8902:	e7b7      	b.n	8874 <pinctrl_configure_pins+0x7d4>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    8904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8908:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    890c:	2201      	movs	r2, #1
    890e:	2100      	movs	r1, #0
    8910:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8914:	f7ff fb64 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8918:	e416      	b.n	8148 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    891a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    891e:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8922:	2201      	movs	r2, #1
    8924:	2100      	movs	r1, #0
    8926:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    892a:	f7ff fb59 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    892e:	e40b      	b.n	8148 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    8930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8934:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8938:	2201      	movs	r2, #1
    893a:	2100      	movs	r1, #0
    893c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8940:	f7ff fb4e 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8944:	e400      	b.n	8148 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    8946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    894a:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    894e:	2201      	movs	r2, #1
    8950:	2100      	movs	r1, #0
    8952:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8956:	f7ff fb43 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    895a:	f7ff bbf5 	b.w	8148 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    895e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8962:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8966:	2201      	movs	r2, #1
    8968:	2100      	movs	r1, #0
    896a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    896e:	f7ff fb37 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8972:	f7ff bbe9 	b.w	8148 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    8976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    897a:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    897e:	2201      	movs	r2, #1
    8980:	2100      	movs	r1, #0
    8982:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8986:	f7ff fb2b 	bl	7fe0 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    898a:	f7ff bbdd 	b.w	8148 <pinctrl_configure_pins+0xa8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    898e:	2000      	movs	r0, #0
    8990:	e001      	b.n	8996 <pinctrl_configure_pins+0x8f6>
		switch (NRF_GET_FUN(pins[i])) {
    8992:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    8996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    899a:	bf00      	nop
    899c:	000127cc 	.word	0x000127cc
    89a0:	00012800 	.word	0x00012800
    89a4:	00011514 	.word	0x00011514
    89a8:	50000300 	.word	0x50000300
    89ac:	00011bd0 	.word	0x00011bd0

000089b0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    89b0:	b510      	push	{r4, lr}
    89b2:	b084      	sub	sp, #16
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    89b4:	f7fc fa72 	bl	4e9c <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    89b8:	4b06      	ldr	r3, [pc, #24]	; (89d4 <k_sys_fatal_error_handler+0x24>)
    89ba:	9302      	str	r3, [sp, #8]
    89bc:	2400      	movs	r4, #0
    89be:	9401      	str	r4, [sp, #4]
    89c0:	9400      	str	r4, [sp, #0]
    89c2:	4623      	mov	r3, r4
    89c4:	2201      	movs	r2, #1
    89c6:	4904      	ldr	r1, [pc, #16]	; (89d8 <k_sys_fatal_error_handler+0x28>)
    89c8:	4620      	mov	r0, r4
    89ca:	f007 fc12 	bl	101f2 <z_log_msg2_runtime_create>
		sys_arch_reboot(0);
    89ce:	4620      	mov	r0, r4
    89d0:	f7fe f986 	bl	6ce0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    89d4:	0001299c 	.word	0x0001299c
    89d8:	00010ee8 	.word	0x00010ee8

000089dc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    89dc:	4b02      	ldr	r3, [pc, #8]	; (89e8 <nvmc_wait+0xc>)
    89de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    89e2:	2b00      	cmp	r3, #0
    89e4:	d0fa      	beq.n	89dc <nvmc_wait>
}
    89e6:	4770      	bx	lr
    89e8:	4001e000 	.word	0x4001e000

000089ec <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    89ec:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    89ee:	4b03      	ldr	r3, [pc, #12]	; (89fc <nvmc_config+0x10>)
    89f0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    89f4:	f7ff fff2 	bl	89dc <nvmc_wait>
}
    89f8:	bd08      	pop	{r3, pc}
    89fa:	bf00      	nop
    89fc:	4001e000 	.word	0x4001e000

00008a00 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    8a00:	4b01      	ldr	r3, [pc, #4]	; (8a08 <SystemCoreClockUpdate+0x8>)
    8a02:	4a02      	ldr	r2, [pc, #8]	; (8a0c <SystemCoreClockUpdate+0xc>)
    8a04:	601a      	str	r2, [r3, #0]
}
    8a06:	4770      	bx	lr
    8a08:	20004078 	.word	0x20004078
    8a0c:	03d09000 	.word	0x03d09000

00008a10 <SystemInit>:

void SystemInit(void)
{
    8a10:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    8a12:	f007 fc0b 	bl	1022c <nrf52_errata_36>
    8a16:	b140      	cbz	r0, 8a2a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    8a18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8a1c:	2200      	movs	r2, #0
    8a1e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    8a22:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    8a26:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    8a2a:	f007 fc09 	bl	10240 <nrf52_errata_66>
    8a2e:	2800      	cmp	r0, #0
    8a30:	d046      	beq.n	8ac0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    8a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8a36:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    8a3a:	4b59      	ldr	r3, [pc, #356]	; (8ba0 <SystemInit+0x190>)
    8a3c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    8a40:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    8a44:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    8a48:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    8a4c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8a50:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    8a54:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    8a58:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    8a5c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8a60:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8a64:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    8a68:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    8a6c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8a70:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    8a74:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    8a78:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    8a7c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8a80:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    8a84:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    8a88:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8a8c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8a90:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8a94:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    8a98:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8a9c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8aa0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8aa4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    8aa8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8aac:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8ab0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8ab4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    8ab8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8abc:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    8ac0:	f007 fbc8 	bl	10254 <nrf52_errata_98>
    8ac4:	b118      	cbz	r0, 8ace <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    8ac6:	4b37      	ldr	r3, [pc, #220]	; (8ba4 <SystemInit+0x194>)
    8ac8:	4a37      	ldr	r2, [pc, #220]	; (8ba8 <SystemInit+0x198>)
    8aca:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    8ace:	f007 fbd4 	bl	1027a <nrf52_errata_103>
    8ad2:	b118      	cbz	r0, 8adc <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    8ad4:	4b35      	ldr	r3, [pc, #212]	; (8bac <SystemInit+0x19c>)
    8ad6:	22fb      	movs	r2, #251	; 0xfb
    8ad8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    8adc:	f007 fbe0 	bl	102a0 <nrf52_errata_115>
    8ae0:	b170      	cbz	r0, 8b00 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    8ae2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    8ae6:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    8aea:	f023 030f 	bic.w	r3, r3, #15
    8aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8af2:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    8af6:	f002 020f 	and.w	r2, r2, #15
    8afa:	4313      	orrs	r3, r2
    8afc:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    8b00:	f007 fbe1 	bl	102c6 <nrf52_errata_120>
    8b04:	b120      	cbz	r0, 8b10 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    8b06:	4b2a      	ldr	r3, [pc, #168]	; (8bb0 <SystemInit+0x1a0>)
    8b08:	f44f 7200 	mov.w	r2, #512	; 0x200
    8b0c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    8b10:	f007 fbec 	bl	102ec <nrf52_errata_136>
    8b14:	b160      	cbz	r0, 8b30 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    8b16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8b1a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8b1e:	f013 0f01 	tst.w	r3, #1
    8b22:	d005      	beq.n	8b30 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    8b24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8b28:	f06f 0201 	mvn.w	r2, #1
    8b2c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    8b30:	f007 fbe6 	bl	10300 <nrf52_configuration_249>
    8b34:	b138      	cbz	r0, 8b46 <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    8b36:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8b3a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    8b3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8b42:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8b46:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8b4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    8b4e:	2b00      	cmp	r3, #0
    8b50:	db08      	blt.n	8b64 <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    8b52:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8b56:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8b5a:	2b00      	cmp	r3, #0
    8b5c:	db02      	blt.n	8b64 <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    8b5e:	f7ff ff4f 	bl	8a00 <SystemCoreClockUpdate>
}
    8b62:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    8b64:	2001      	movs	r0, #1
    8b66:	f7ff ff41 	bl	89ec <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    8b6a:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    8b6e:	2512      	movs	r5, #18
    8b70:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    8b74:	f7ff ff32 	bl	89dc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    8b78:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    8b7c:	f7ff ff2e 	bl	89dc <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    8b80:	2000      	movs	r0, #0
    8b82:	f7ff ff33 	bl	89ec <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    8b86:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    8b8a:	490a      	ldr	r1, [pc, #40]	; (8bb4 <SystemInit+0x1a4>)
    8b8c:	68ca      	ldr	r2, [r1, #12]
    8b8e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8b92:	4b09      	ldr	r3, [pc, #36]	; (8bb8 <SystemInit+0x1a8>)
    8b94:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8b96:	60cb      	str	r3, [r1, #12]
    8b98:	f3bf 8f4f 	dsb	sy
    __NOP();
    8b9c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8b9e:	e7fd      	b.n	8b9c <SystemInit+0x18c>
    8ba0:	4000c000 	.word	0x4000c000
    8ba4:	40005000 	.word	0x40005000
    8ba8:	00038148 	.word	0x00038148
    8bac:	4000f000 	.word	0x4000f000
    8bb0:	40029000 	.word	0x40029000
    8bb4:	e000ed00 	.word	0xe000ed00
    8bb8:	05fa0004 	.word	0x05fa0004

00008bbc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    8bbc:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    8bbe:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    8bc0:	fab4 f384 	clz	r3, r4
    8bc4:	f1c3 031f 	rsb	r3, r3, #31
    8bc8:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    8bcc:	2b00      	cmp	r3, #0
    8bce:	db16      	blt.n	8bfe <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    8bd0:	2201      	movs	r2, #1
    8bd2:	fa02 f303 	lsl.w	r3, r2, r3
    8bd6:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8bda:	f3bf 8f5b 	dmb	ish
    8bde:	e850 2f00 	ldrex	r2, [r0]
    8be2:	42a2      	cmp	r2, r4
    8be4:	d104      	bne.n	8bf0 <nrfx_flag32_alloc+0x34>
    8be6:	e840 3e00 	strex	lr, r3, [r0]
    8bea:	f1be 0f00 	cmp.w	lr, #0
    8bee:	d1f6      	bne.n	8bde <nrfx_flag32_alloc+0x22>
    8bf0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    8bf4:	d1e3      	bne.n	8bbe <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    8bf6:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    8bfa:	4802      	ldr	r0, [pc, #8]	; (8c04 <nrfx_flag32_alloc+0x48>)
}
    8bfc:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    8bfe:	4802      	ldr	r0, [pc, #8]	; (8c08 <nrfx_flag32_alloc+0x4c>)
    8c00:	e7fc      	b.n	8bfc <nrfx_flag32_alloc+0x40>
    8c02:	bf00      	nop
    8c04:	0bad0000 	.word	0x0bad0000
    8c08:	0bad0002 	.word	0x0bad0002

00008c0c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    8c0c:	6803      	ldr	r3, [r0, #0]
    8c0e:	40cb      	lsrs	r3, r1
    8c10:	f013 0f01 	tst.w	r3, #1
    8c14:	d115      	bne.n	8c42 <nrfx_flag32_free+0x36>
{
    8c16:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    8c18:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    8c1a:	2301      	movs	r3, #1
    8c1c:	408b      	lsls	r3, r1
    8c1e:	4313      	orrs	r3, r2
    8c20:	f3bf 8f5b 	dmb	ish
    8c24:	e850 cf00 	ldrex	ip, [r0]
    8c28:	4594      	cmp	ip, r2
    8c2a:	d104      	bne.n	8c36 <nrfx_flag32_free+0x2a>
    8c2c:	e840 3e00 	strex	lr, r3, [r0]
    8c30:	f1be 0f00 	cmp.w	lr, #0
    8c34:	d1f6      	bne.n	8c24 <nrfx_flag32_free+0x18>
    8c36:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    8c3a:	d1ed      	bne.n	8c18 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    8c3c:	4802      	ldr	r0, [pc, #8]	; (8c48 <nrfx_flag32_free+0x3c>)
}
    8c3e:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    8c42:	4802      	ldr	r0, [pc, #8]	; (8c4c <nrfx_flag32_free+0x40>)
}
    8c44:	4770      	bx	lr
    8c46:	bf00      	nop
    8c48:	0bad0000 	.word	0x0bad0000
    8c4c:	0bad0004 	.word	0x0bad0004

00008c50 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    8c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c52:	b083      	sub	sp, #12
    switch (domain)
    8c54:	4605      	mov	r5, r0
    8c56:	b168      	cbz	r0, 8c74 <clock_stop+0x24>
    8c58:	2801      	cmp	r0, #1
    8c5a:	d020      	beq.n	8c9e <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    8c5c:	4c3d      	ldr	r4, [pc, #244]	; (8d54 <clock_stop+0x104>)
    8c5e:	23d8      	movs	r3, #216	; 0xd8
    8c60:	4622      	mov	r2, r4
    8c62:	493d      	ldr	r1, [pc, #244]	; (8d58 <clock_stop+0x108>)
    8c64:	483d      	ldr	r0, [pc, #244]	; (8d5c <clock_stop+0x10c>)
    8c66:	f006 fa5d 	bl	f124 <assert_print>
    8c6a:	21d8      	movs	r1, #216	; 0xd8
    8c6c:	4620      	mov	r0, r4
    8c6e:	f006 fa52 	bl	f116 <assert_post_action>
            return;
    8c72:	e068      	b.n	8d46 <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    8c74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8c78:	2202      	movs	r2, #2
    8c7a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8c7e:	2200      	movs	r2, #0
    8c80:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    8c84:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8c88:	2201      	movs	r2, #1
    8c8a:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    8c8c:	2301      	movs	r3, #1
    8c8e:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    8c92:	429d      	cmp	r5, r3
    8c94:	d00f      	beq.n	8cb6 <clock_stop+0x66>
    8c96:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    8c98:	f242 7410 	movw	r4, #10000	; 0x2710
    8c9c:	e029      	b.n	8cf2 <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    8c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8ca2:	2201      	movs	r2, #1
    8ca4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8ca8:	2100      	movs	r1, #0
    8caa:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    8cae:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8cb2:	605a      	str	r2, [r3, #4]
}
    8cb4:	e7ea      	b.n	8c8c <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    8cb6:	f10d 0607 	add.w	r6, sp, #7
    8cba:	e7ed      	b.n	8c98 <clock_stop+0x48>
            if (p_clk_src != NULL)
    8cbc:	b136      	cbz	r6, 8ccc <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8cc2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    8cc6:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    8cca:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8ccc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8cd0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    8cd4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8cd8:	d12f      	bne.n	8d3a <clock_stop+0xea>
    return false;
    8cda:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    8cdc:	b38b      	cbz	r3, 8d42 <clock_stop+0xf2>
    8cde:	b11e      	cbz	r6, 8ce8 <clock_stop+0x98>
    8ce0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8ce4:	2b01      	cmp	r3, #1
    8ce6:	d12c      	bne.n	8d42 <clock_stop+0xf2>
    8ce8:	2001      	movs	r0, #1
    8cea:	f007 fb1c 	bl	10326 <nrfx_busy_wait>
    8cee:	3c01      	subs	r4, #1
    8cf0:	d027      	beq.n	8d42 <clock_stop+0xf2>
    switch (domain)
    8cf2:	2d00      	cmp	r5, #0
    8cf4:	d0e2      	beq.n	8cbc <clock_stop+0x6c>
    8cf6:	2d01      	cmp	r5, #1
    8cf8:	d00e      	beq.n	8d18 <clock_stop+0xc8>
            NRFX_ASSERT(0);
    8cfa:	4f19      	ldr	r7, [pc, #100]	; (8d60 <clock_stop+0x110>)
    8cfc:	f44f 734f 	mov.w	r3, #828	; 0x33c
    8d00:	463a      	mov	r2, r7
    8d02:	4915      	ldr	r1, [pc, #84]	; (8d58 <clock_stop+0x108>)
    8d04:	4815      	ldr	r0, [pc, #84]	; (8d5c <clock_stop+0x10c>)
    8d06:	f006 fa0d 	bl	f124 <assert_print>
    8d0a:	f44f 714f 	mov.w	r1, #828	; 0x33c
    8d0e:	4638      	mov	r0, r7
    8d10:	f006 fa01 	bl	f116 <assert_post_action>
            return false;
    8d14:	2300      	movs	r3, #0
    8d16:	e7e1      	b.n	8cdc <clock_stop+0x8c>
            if (p_clk_src != NULL)
    8d18:	b136      	cbz	r6, 8d28 <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    8d1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8d1e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    8d22:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    8d26:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8d28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8d2c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    8d30:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8d34:	d103      	bne.n	8d3e <clock_stop+0xee>
    return false;
    8d36:	2300      	movs	r3, #0
    8d38:	e7d0      	b.n	8cdc <clock_stop+0x8c>
                return true;
    8d3a:	2301      	movs	r3, #1
    8d3c:	e7ce      	b.n	8cdc <clock_stop+0x8c>
                return true;
    8d3e:	2301      	movs	r3, #1
    8d40:	e7cc      	b.n	8cdc <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    8d42:	2d01      	cmp	r5, #1
    8d44:	d001      	beq.n	8d4a <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    8d46:	b003      	add	sp, #12
    8d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    8d4a:	4b06      	ldr	r3, [pc, #24]	; (8d64 <clock_stop+0x114>)
    8d4c:	2200      	movs	r2, #0
    8d4e:	715a      	strb	r2, [r3, #5]
    8d50:	e7f9      	b.n	8d46 <clock_stop+0xf6>
    8d52:	bf00      	nop
    8d54:	000129bc 	.word	0x000129bc
    8d58:	00011bd0 	.word	0x00011bd0
    8d5c:	00011514 	.word	0x00011514
    8d60:	000129fc 	.word	0x000129fc
    8d64:	2000d024 	.word	0x2000d024

00008d68 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    8d68:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    8d6a:	4604      	mov	r4, r0
    8d6c:	b150      	cbz	r0, 8d84 <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    8d6e:	4b0d      	ldr	r3, [pc, #52]	; (8da4 <nrfx_clock_init+0x3c>)
    8d70:	791b      	ldrb	r3, [r3, #4]
    8d72:	b9ab      	cbnz	r3, 8da0 <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    8d74:	4b0b      	ldr	r3, [pc, #44]	; (8da4 <nrfx_clock_init+0x3c>)
    8d76:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    8d78:	2201      	movs	r2, #1
    8d7a:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    8d7c:	2200      	movs	r2, #0
    8d7e:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    8d80:	4809      	ldr	r0, [pc, #36]	; (8da8 <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    8d82:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    8d84:	4d09      	ldr	r5, [pc, #36]	; (8dac <nrfx_clock_init+0x44>)
    8d86:	f240 1315 	movw	r3, #277	; 0x115
    8d8a:	462a      	mov	r2, r5
    8d8c:	4908      	ldr	r1, [pc, #32]	; (8db0 <nrfx_clock_init+0x48>)
    8d8e:	4809      	ldr	r0, [pc, #36]	; (8db4 <nrfx_clock_init+0x4c>)
    8d90:	f006 f9c8 	bl	f124 <assert_print>
    8d94:	f240 1115 	movw	r1, #277	; 0x115
    8d98:	4628      	mov	r0, r5
    8d9a:	f006 f9bc 	bl	f116 <assert_post_action>
    8d9e:	e7e6      	b.n	8d6e <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    8da0:	4805      	ldr	r0, [pc, #20]	; (8db8 <nrfx_clock_init+0x50>)
    return err_code;
    8da2:	e7ee      	b.n	8d82 <nrfx_clock_init+0x1a>
    8da4:	2000d024 	.word	0x2000d024
    8da8:	0bad0000 	.word	0x0bad0000
    8dac:	000129bc 	.word	0x000129bc
    8db0:	00012a30 	.word	0x00012a30
    8db4:	00011514 	.word	0x00011514
    8db8:	0bad000c 	.word	0x0bad000c

00008dbc <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    8dbc:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8dbe:	4b0f      	ldr	r3, [pc, #60]	; (8dfc <nrfx_clock_enable+0x40>)
    8dc0:	791b      	ldrb	r3, [r3, #4]
    8dc2:	b153      	cbz	r3, 8dda <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8dc4:	2000      	movs	r0, #0
    8dc6:	f7fc ffa9 	bl	5d1c <arch_irq_is_enabled>
    8dca:	b1a0      	cbz	r0, 8df6 <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    8dcc:	f007 faaf 	bl	1032e <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8dd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8dd4:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    8dd8:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8dda:	4c09      	ldr	r4, [pc, #36]	; (8e00 <nrfx_clock_enable+0x44>)
    8ddc:	f44f 7397 	mov.w	r3, #302	; 0x12e
    8de0:	4622      	mov	r2, r4
    8de2:	4908      	ldr	r1, [pc, #32]	; (8e04 <nrfx_clock_enable+0x48>)
    8de4:	4808      	ldr	r0, [pc, #32]	; (8e08 <nrfx_clock_enable+0x4c>)
    8de6:	f006 f99d 	bl	f124 <assert_print>
    8dea:	f44f 7197 	mov.w	r1, #302	; 0x12e
    8dee:	4620      	mov	r0, r4
    8df0:	f006 f991 	bl	f116 <assert_post_action>
    8df4:	e7e6      	b.n	8dc4 <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8df6:	f7fc ff83 	bl	5d00 <arch_irq_enable>
    8dfa:	e7e7      	b.n	8dcc <nrfx_clock_enable+0x10>
    8dfc:	2000d024 	.word	0x2000d024
    8e00:	000129bc 	.word	0x000129bc
    8e04:	00012a40 	.word	0x00012a40
    8e08:	00011514 	.word	0x00011514

00008e0c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    8e0c:	b530      	push	{r4, r5, lr}
    8e0e:	b083      	sub	sp, #12
    8e10:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8e12:	4b34      	ldr	r3, [pc, #208]	; (8ee4 <nrfx_clock_start+0xd8>)
    8e14:	791b      	ldrb	r3, [r3, #4]
    8e16:	b183      	cbz	r3, 8e3a <nrfx_clock_start+0x2e>
    switch (domain)
    8e18:	b1ec      	cbz	r4, 8e56 <nrfx_clock_start+0x4a>
    8e1a:	2c01      	cmp	r4, #1
    8e1c:	d055      	beq.n	8eca <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    8e1e:	4c32      	ldr	r4, [pc, #200]	; (8ee8 <nrfx_clock_start+0xdc>)
    8e20:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    8e24:	4622      	mov	r2, r4
    8e26:	4931      	ldr	r1, [pc, #196]	; (8eec <nrfx_clock_start+0xe0>)
    8e28:	4831      	ldr	r0, [pc, #196]	; (8ef0 <nrfx_clock_start+0xe4>)
    8e2a:	f006 f97b 	bl	f124 <assert_print>
    8e2e:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    8e32:	4620      	mov	r0, r4
    8e34:	f006 f96f 	bl	f116 <assert_post_action>
            break;
    }
}
    8e38:	e052      	b.n	8ee0 <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8e3a:	4d2b      	ldr	r5, [pc, #172]	; (8ee8 <nrfx_clock_start+0xdc>)
    8e3c:	f44f 73b4 	mov.w	r3, #360	; 0x168
    8e40:	462a      	mov	r2, r5
    8e42:	492c      	ldr	r1, [pc, #176]	; (8ef4 <nrfx_clock_start+0xe8>)
    8e44:	482a      	ldr	r0, [pc, #168]	; (8ef0 <nrfx_clock_start+0xe4>)
    8e46:	f006 f96d 	bl	f124 <assert_print>
    8e4a:	f44f 71b4 	mov.w	r1, #360	; 0x168
    8e4e:	4628      	mov	r0, r5
    8e50:	f006 f961 	bl	f116 <assert_post_action>
    8e54:	e7e0      	b.n	8e18 <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8e56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8e5a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    8e5e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    8e62:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8e64:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    8e68:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8e6c:	d117      	bne.n	8e9e <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    8e6e:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    8e72:	f013 0f01 	tst.w	r3, #1
    8e76:	d116      	bne.n	8ea6 <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    8e78:	f007 fa59 	bl	1032e <clock_initial_lfclksrc_get>
    8e7c:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    8e7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8e82:	9a01      	ldr	r2, [sp, #4]
    8e84:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8e88:	2200      	movs	r2, #0
    8e8a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    8e8e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    8e92:	2202      	movs	r2, #2
    8e94:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8e98:	2201      	movs	r2, #1
    8e9a:	609a      	str	r2, [r3, #8]
}
    8e9c:	e020      	b.n	8ee0 <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    8e9e:	a801      	add	r0, sp, #4
    8ea0:	f007 fa47 	bl	10332 <clock_lfclksrc_tweak>
    8ea4:	e7eb      	b.n	8e7e <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    8ea6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8eaa:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    8eae:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    8eb2:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    8eb4:	a801      	add	r0, sp, #4
    8eb6:	f007 fa3c 	bl	10332 <clock_lfclksrc_tweak>
    8eba:	2800      	cmp	r0, #0
    8ebc:	d0df      	beq.n	8e7e <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    8ebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8ec2:	2202      	movs	r2, #2
    8ec4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    8ec8:	e00a      	b.n	8ee0 <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8eca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8ece:	2200      	movs	r2, #0
    8ed0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8ed4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    8ed8:	2201      	movs	r2, #1
    8eda:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8ede:	601a      	str	r2, [r3, #0]
}
    8ee0:	b003      	add	sp, #12
    8ee2:	bd30      	pop	{r4, r5, pc}
    8ee4:	2000d024 	.word	0x2000d024
    8ee8:	000129bc 	.word	0x000129bc
    8eec:	00011bd0 	.word	0x00011bd0
    8ef0:	00011514 	.word	0x00011514
    8ef4:	00012a40 	.word	0x00012a40

00008ef8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    8ef8:	b538      	push	{r3, r4, r5, lr}
    8efa:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8efc:	4b0a      	ldr	r3, [pc, #40]	; (8f28 <nrfx_clock_stop+0x30>)
    8efe:	791b      	ldrb	r3, [r3, #4]
    8f00:	b11b      	cbz	r3, 8f0a <nrfx_clock_stop+0x12>
    clock_stop(domain);
    8f02:	4620      	mov	r0, r4
    8f04:	f7ff fea4 	bl	8c50 <clock_stop>
}
    8f08:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8f0a:	4d08      	ldr	r5, [pc, #32]	; (8f2c <nrfx_clock_stop+0x34>)
    8f0c:	f240 13ad 	movw	r3, #429	; 0x1ad
    8f10:	462a      	mov	r2, r5
    8f12:	4907      	ldr	r1, [pc, #28]	; (8f30 <nrfx_clock_stop+0x38>)
    8f14:	4807      	ldr	r0, [pc, #28]	; (8f34 <nrfx_clock_stop+0x3c>)
    8f16:	f006 f905 	bl	f124 <assert_print>
    8f1a:	f240 11ad 	movw	r1, #429	; 0x1ad
    8f1e:	4628      	mov	r0, r5
    8f20:	f006 f8f9 	bl	f116 <assert_post_action>
    8f24:	e7ed      	b.n	8f02 <nrfx_clock_stop+0xa>
    8f26:	bf00      	nop
    8f28:	2000d024 	.word	0x2000d024
    8f2c:	000129bc 	.word	0x000129bc
    8f30:	00012a40 	.word	0x00012a40
    8f34:	00011514 	.word	0x00011514

00008f38 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    8f38:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    8f3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    8f42:	b18b      	cbz	r3, 8f68 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8f44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f48:	2200      	movs	r2, #0
    8f4a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8f4e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    8f52:	2201      	movs	r2, #1
    8f54:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    8f58:	4b15      	ldr	r3, [pc, #84]	; (8fb0 <nrfx_power_clock_irq_handler+0x78>)
    8f5a:	795b      	ldrb	r3, [r3, #5]
    8f5c:	b923      	cbnz	r3, 8f68 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    8f5e:	4b14      	ldr	r3, [pc, #80]	; (8fb0 <nrfx_power_clock_irq_handler+0x78>)
    8f60:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    8f62:	681b      	ldr	r3, [r3, #0]
    8f64:	2000      	movs	r0, #0
    8f66:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    8f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f6c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    8f70:	b19b      	cbz	r3, 8f9a <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8f72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f76:	2200      	movs	r2, #0
    8f78:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    8f7c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8f80:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8f84:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    8f88:	f012 0f03 	tst.w	r2, #3
    8f8c:	d106      	bne.n	8f9c <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f92:	2201      	movs	r2, #1
    8f94:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8f98:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    8f9a:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    8f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8fa0:	2202      	movs	r2, #2
    8fa2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    8fa6:	4b02      	ldr	r3, [pc, #8]	; (8fb0 <nrfx_power_clock_irq_handler+0x78>)
    8fa8:	681b      	ldr	r3, [r3, #0]
    8faa:	2001      	movs	r0, #1
    8fac:	4798      	blx	r3
}
    8fae:	e7f4      	b.n	8f9a <nrfx_power_clock_irq_handler+0x62>
    8fb0:	2000d024 	.word	0x2000d024

00008fb4 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    8fb4:	3008      	adds	r0, #8
    8fb6:	4b03      	ldr	r3, [pc, #12]	; (8fc4 <pin_in_use+0x10>)
    8fb8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8fbc:	f000 0001 	and.w	r0, r0, #1
    8fc0:	4770      	bx	lr
    8fc2:	bf00      	nop
    8fc4:	2000407c 	.word	0x2000407c

00008fc8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    8fc8:	3008      	adds	r0, #8
    8fca:	4b03      	ldr	r3, [pc, #12]	; (8fd8 <pin_in_use_by_te+0x10>)
    8fcc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8fd0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    8fd4:	4770      	bx	lr
    8fd6:	bf00      	nop
    8fd8:	2000407c 	.word	0x2000407c

00008fdc <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    8fdc:	3008      	adds	r0, #8
    8fde:	4b04      	ldr	r3, [pc, #16]	; (8ff0 <pin_has_trigger+0x14>)
    8fe0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8fe4:	f010 001c 	ands.w	r0, r0, #28
    8fe8:	bf18      	it	ne
    8fea:	2001      	movne	r0, #1
    8fec:	4770      	bx	lr
    8fee:	bf00      	nop
    8ff0:	2000407c 	.word	0x2000407c

00008ff4 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8ff4:	3008      	adds	r0, #8
    8ff6:	4b03      	ldr	r3, [pc, #12]	; (9004 <pin_is_output+0x10>)
    8ff8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8ffc:	f3c0 0040 	ubfx	r0, r0, #1, #1
    9000:	4770      	bx	lr
    9002:	bf00      	nop
    9004:	2000407c 	.word	0x2000407c

00009008 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    9008:	3008      	adds	r0, #8
    900a:	4b02      	ldr	r3, [pc, #8]	; (9014 <pin_te_get+0xc>)
    900c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    9010:	0b40      	lsrs	r0, r0, #13
    9012:	4770      	bx	lr
    9014:	2000407c 	.word	0x2000407c

00009018 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    9018:	2200      	movs	r2, #0
    901a:	e004      	b.n	9026 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    901c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9020:	4283      	cmp	r3, r0
    9022:	d00f      	beq.n	9044 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    9024:	3201      	adds	r2, #1
    9026:	2a2f      	cmp	r2, #47	; 0x2f
    9028:	d80a      	bhi.n	9040 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    902a:	f102 0308 	add.w	r3, r2, #8
    902e:	4906      	ldr	r1, [pc, #24]	; (9048 <handler_in_use+0x30>)
    9030:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    9034:	f413 7f80 	tst.w	r3, #256	; 0x100
    9038:	d0f0      	beq.n	901c <handler_in_use+0x4>
    903a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    903e:	e7ef      	b.n	9020 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    9040:	2000      	movs	r0, #0
    9042:	4770      	bx	lr
            return true;
    9044:	2001      	movs	r0, #1
}
    9046:	4770      	bx	lr
    9048:	2000407c 	.word	0x2000407c

0000904c <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    904c:	2300      	movs	r3, #0
    904e:	b113      	cbz	r3, 9056 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    9050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9054:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    9056:	4a07      	ldr	r2, [pc, #28]	; (9074 <find_handler+0x28>)
    9058:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    905c:	4282      	cmp	r2, r0
    905e:	d001      	beq.n	9064 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    9060:	3301      	adds	r3, #1
    9062:	e7f4      	b.n	904e <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    9064:	4a03      	ldr	r2, [pc, #12]	; (9074 <find_handler+0x28>)
    9066:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    906a:	6852      	ldr	r2, [r2, #4]
    906c:	428a      	cmp	r2, r1
    906e:	d1f7      	bne.n	9060 <find_handler+0x14>
            return i;
    9070:	4618      	mov	r0, r3
    9072:	4770      	bx	lr
    9074:	2000407c 	.word	0x2000407c

00009078 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    9078:	3008      	adds	r0, #8
    907a:	4b06      	ldr	r3, [pc, #24]	; (9094 <channel_handler_get+0x1c>)
    907c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    9080:	f410 7f80 	tst.w	r0, #256	; 0x100
    9084:	d004      	beq.n	9090 <channel_handler_get+0x18>
    9086:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    908a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    908e:	4770      	bx	lr
        return NULL;
    9090:	2000      	movs	r0, #0
}
    9092:	4770      	bx	lr
    9094:	2000407c 	.word	0x2000407c

00009098 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    9098:	b570      	push	{r4, r5, r6, lr}
    909a:	4604      	mov	r4, r0
    909c:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    909e:	f7ff ffeb 	bl	9078 <channel_handler_get>

    if (handler)
    90a2:	b120      	cbz	r0, 90ae <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    90a4:	6806      	ldr	r6, [r0, #0]
    90a6:	6842      	ldr	r2, [r0, #4]
    90a8:	4629      	mov	r1, r5
    90aa:	4620      	mov	r0, r4
    90ac:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    90ae:	4b04      	ldr	r3, [pc, #16]	; (90c0 <call_handler+0x28>)
    90b0:	689b      	ldr	r3, [r3, #8]
    90b2:	b123      	cbz	r3, 90be <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    90b4:	4a02      	ldr	r2, [pc, #8]	; (90c0 <call_handler+0x28>)
    90b6:	68d2      	ldr	r2, [r2, #12]
    90b8:	4629      	mov	r1, r5
    90ba:	4620      	mov	r0, r4
    90bc:	4798      	blx	r3
    }
}
    90be:	bd70      	pop	{r4, r5, r6, pc}
    90c0:	2000407c 	.word	0x2000407c

000090c4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    90c4:	f100 0208 	add.w	r2, r0, #8
    90c8:	4b16      	ldr	r3, [pc, #88]	; (9124 <release_handler+0x60>)
    90ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    90ce:	f413 7f80 	tst.w	r3, #256	; 0x100
    90d2:	d026      	beq.n	9122 <release_handler+0x5e>
{
    90d4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    90d6:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    90da:	4610      	mov	r0, r2
    90dc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    90e0:	4a10      	ldr	r2, [pc, #64]	; (9124 <release_handler+0x60>)
    90e2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    90e6:	4620      	mov	r0, r4
    90e8:	f7ff ff96 	bl	9018 <handler_in_use>
    90ec:	b100      	cbz	r0, 90f0 <release_handler+0x2c>
}
    90ee:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    90f0:	480c      	ldr	r0, [pc, #48]	; (9124 <release_handler+0x60>)
    90f2:	2300      	movs	r3, #0
    90f4:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    90f8:	4621      	mov	r1, r4
    90fa:	3074      	adds	r0, #116	; 0x74
    90fc:	f7ff fd86 	bl	8c0c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    9100:	4b09      	ldr	r3, [pc, #36]	; (9128 <release_handler+0x64>)
    9102:	4298      	cmp	r0, r3
    9104:	d0f3      	beq.n	90ee <release_handler+0x2a>
    9106:	4c09      	ldr	r4, [pc, #36]	; (912c <release_handler+0x68>)
    9108:	f44f 7399 	mov.w	r3, #306	; 0x132
    910c:	4622      	mov	r2, r4
    910e:	4908      	ldr	r1, [pc, #32]	; (9130 <release_handler+0x6c>)
    9110:	4808      	ldr	r0, [pc, #32]	; (9134 <release_handler+0x70>)
    9112:	f006 f807 	bl	f124 <assert_print>
    9116:	f44f 7199 	mov.w	r1, #306	; 0x132
    911a:	4620      	mov	r0, r4
    911c:	f005 fffb 	bl	f116 <assert_post_action>
    9120:	e7e5      	b.n	90ee <release_handler+0x2a>
    9122:	4770      	bx	lr
    9124:	2000407c 	.word	0x2000407c
    9128:	0bad0000 	.word	0x0bad0000
    912c:	00012a60 	.word	0x00012a60
    9130:	00012aa0 	.word	0x00012aa0
    9134:	00011514 	.word	0x00011514

00009138 <pin_handler_trigger_uninit>:
{
    9138:	b510      	push	{r4, lr}
    913a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    913c:	f7ff ff44 	bl	8fc8 <pin_in_use_by_te>
    9140:	b140      	cbz	r0, 9154 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    9142:	4620      	mov	r0, r4
    9144:	f7ff ff60 	bl	9008 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    9148:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    914c:	4b06      	ldr	r3, [pc, #24]	; (9168 <pin_handler_trigger_uninit+0x30>)
    914e:	2200      	movs	r2, #0
    9150:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    9154:	4620      	mov	r0, r4
    9156:	f7ff ffb5 	bl	90c4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    915a:	3408      	adds	r4, #8
    915c:	4b03      	ldr	r3, [pc, #12]	; (916c <pin_handler_trigger_uninit+0x34>)
    915e:	2200      	movs	r2, #0
    9160:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    9164:	bd10      	pop	{r4, pc}
    9166:	bf00      	nop
    9168:	40006000 	.word	0x40006000
    916c:	2000407c 	.word	0x2000407c

00009170 <pin_handler_set>:
{
    9170:	b570      	push	{r4, r5, r6, lr}
    9172:	b082      	sub	sp, #8
    9174:	4606      	mov	r6, r0
    9176:	460c      	mov	r4, r1
    9178:	4615      	mov	r5, r2
    release_handler(pin);
    917a:	f7ff ffa3 	bl	90c4 <release_handler>
    if (!handler)
    917e:	b324      	cbz	r4, 91ca <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    9180:	4629      	mov	r1, r5
    9182:	4620      	mov	r0, r4
    9184:	f7ff ff62 	bl	904c <find_handler>
    if (handler_id < 0)
    9188:	1e03      	subs	r3, r0, #0
    918a:	db13      	blt.n	91b4 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    918c:	4a10      	ldr	r2, [pc, #64]	; (91d0 <pin_handler_set+0x60>)
    918e:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    9192:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    9196:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    9198:	025b      	lsls	r3, r3, #9
    919a:	b29b      	uxth	r3, r3
    919c:	f106 0008 	add.w	r0, r6, #8
    91a0:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    91a4:	430b      	orrs	r3, r1
    91a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    91aa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    91ae:	4809      	ldr	r0, [pc, #36]	; (91d4 <pin_handler_set+0x64>)
}
    91b0:	b002      	add	sp, #8
    91b2:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    91b4:	f10d 0107 	add.w	r1, sp, #7
    91b8:	4807      	ldr	r0, [pc, #28]	; (91d8 <pin_handler_set+0x68>)
    91ba:	f7ff fcff 	bl	8bbc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    91be:	4b05      	ldr	r3, [pc, #20]	; (91d4 <pin_handler_set+0x64>)
    91c0:	4298      	cmp	r0, r3
    91c2:	d1f5      	bne.n	91b0 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    91c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    91c8:	e7e0      	b.n	918c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    91ca:	4802      	ldr	r0, [pc, #8]	; (91d4 <pin_handler_set+0x64>)
    91cc:	e7f0      	b.n	91b0 <pin_handler_set+0x40>
    91ce:	bf00      	nop
    91d0:	2000407c 	.word	0x2000407c
    91d4:	0bad0000 	.word	0x0bad0000
    91d8:	200040f0 	.word	0x200040f0

000091dc <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    91dc:	b538      	push	{r3, r4, r5, lr}
    91de:	4604      	mov	r4, r0
    while (mask)
    91e0:	e018      	b.n	9214 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    91e2:	fa94 f3a4 	rbit	r3, r4
    91e6:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    91ea:	2201      	movs	r2, #1
    91ec:	409a      	lsls	r2, r3
    91ee:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    91f2:	4a0a      	ldr	r2, [pc, #40]	; (921c <gpiote_evt_handle+0x40>)
    91f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    91f8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    91fc:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    9200:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    9204:	f3c0 4001 	ubfx	r0, r0, #16, #2
    9208:	f007 f8bf 	bl	1038a <gpiote_polarity_to_trigger>
    920c:	4601      	mov	r1, r0
    920e:	4628      	mov	r0, r5
    9210:	f7ff ff42 	bl	9098 <call_handler>
    while (mask)
    9214:	2c00      	cmp	r4, #0
    9216:	d1e4      	bne.n	91e2 <gpiote_evt_handle+0x6>
    }
}
    9218:	bd38      	pop	{r3, r4, r5, pc}
    921a:	bf00      	nop
    921c:	40006000 	.word	0x40006000

00009220 <latch_pending_read_and_check>:
{
    9220:	b082      	sub	sp, #8
    9222:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    9224:	4b11      	ldr	r3, [pc, #68]	; (926c <latch_pending_read_and_check+0x4c>)
    9226:	e893 0003 	ldmia.w	r3, {r0, r1}
    922a:	ab02      	add	r3, sp, #8
    922c:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    9230:	4660      	mov	r0, ip
    9232:	2300      	movs	r3, #0
    9234:	e00b      	b.n	924e <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    9236:	aa02      	add	r2, sp, #8
    9238:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    923c:	f852 2c08 	ldr.w	r2, [r2, #-8]
    9240:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    9244:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    9248:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    924c:	3301      	adds	r3, #1
    924e:	2b01      	cmp	r3, #1
    9250:	d9f1      	bls.n	9236 <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    9252:	2300      	movs	r3, #0
    9254:	2b01      	cmp	r3, #1
    9256:	d804      	bhi.n	9262 <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    9258:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    925c:	b922      	cbnz	r2, 9268 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    925e:	3301      	adds	r3, #1
    9260:	e7f8      	b.n	9254 <latch_pending_read_and_check+0x34>
    return false;
    9262:	2000      	movs	r0, #0
}
    9264:	b002      	add	sp, #8
    9266:	4770      	bx	lr
            return true;
    9268:	2001      	movs	r0, #1
    926a:	e7fb      	b.n	9264 <latch_pending_read_and_check+0x44>
    926c:	00010fb0 	.word	0x00010fb0

00009270 <next_sense_cond_call_handler>:
{
    9270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9274:	4604      	mov	r4, r0
    9276:	460d      	mov	r5, r1
    9278:	4616      	mov	r6, r2
    if (is_level(trigger))
    927a:	4608      	mov	r0, r1
    927c:	f007 f887 	bl	1038e <is_level>
    9280:	bb60      	cbnz	r0, 92dc <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9282:	2e02      	cmp	r6, #2
    9284:	f000 80f5 	beq.w	9472 <next_sense_cond_call_handler+0x202>
    9288:	f04f 0802 	mov.w	r8, #2
    switch (port)
    928c:	0963      	lsrs	r3, r4, #5
    928e:	f000 80f3 	beq.w	9478 <next_sense_cond_call_handler+0x208>
    9292:	2b01      	cmp	r3, #1
    9294:	f040 80f3 	bne.w	947e <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    9298:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    929c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    92a0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    92a2:	f013 0f01 	tst.w	r3, #1
    92a6:	f000 80ec 	beq.w	9482 <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    92aa:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    92ae:	0963      	lsrs	r3, r4, #5
    92b0:	f000 80f5 	beq.w	949e <next_sense_cond_call_handler+0x22e>
    92b4:	2b01      	cmp	r3, #1
    92b6:	f000 80f5 	beq.w	94a4 <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    92ba:	f8df 9224 	ldr.w	r9, [pc, #548]	; 94e0 <next_sense_cond_call_handler+0x270>
    92be:	f240 232e 	movw	r3, #558	; 0x22e
    92c2:	464a      	mov	r2, r9
    92c4:	4987      	ldr	r1, [pc, #540]	; (94e4 <next_sense_cond_call_handler+0x274>)
    92c6:	4888      	ldr	r0, [pc, #544]	; (94e8 <next_sense_cond_call_handler+0x278>)
    92c8:	f005 ff2c 	bl	f124 <assert_print>
    92cc:	f240 212e 	movw	r1, #558	; 0x22e
    92d0:	4648      	mov	r0, r9
    92d2:	f005 ff20 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    92d6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    92da:	e0e4      	b.n	94a6 <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    92dc:	4629      	mov	r1, r5
    92de:	4620      	mov	r0, r4
    92e0:	f7ff feda 	bl	9098 <call_handler>
    switch (port)
    92e4:	0963      	lsrs	r3, r4, #5
    92e6:	d01f      	beq.n	9328 <next_sense_cond_call_handler+0xb8>
    92e8:	2b01      	cmp	r3, #1
    92ea:	d120      	bne.n	932e <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    92ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    92f0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    92f4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    92f6:	f013 0f01 	tst.w	r3, #1
    92fa:	d01a      	beq.n	9332 <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    92fc:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9300:	0963      	lsrs	r3, r4, #5
    9302:	d024      	beq.n	934e <next_sense_cond_call_handler+0xde>
    9304:	2b01      	cmp	r3, #1
    9306:	d025      	beq.n	9354 <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    9308:	4f75      	ldr	r7, [pc, #468]	; (94e0 <next_sense_cond_call_handler+0x270>)
    930a:	f240 232e 	movw	r3, #558	; 0x22e
    930e:	463a      	mov	r2, r7
    9310:	4974      	ldr	r1, [pc, #464]	; (94e4 <next_sense_cond_call_handler+0x274>)
    9312:	4875      	ldr	r0, [pc, #468]	; (94e8 <next_sense_cond_call_handler+0x278>)
    9314:	f005 ff06 	bl	f124 <assert_print>
    9318:	f240 212e 	movw	r1, #558	; 0x22e
    931c:	4638      	mov	r0, r7
    931e:	f005 fefa 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    9322:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9326:	e016      	b.n	9356 <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    9328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    932c:	e7e0      	b.n	92f0 <next_sense_cond_call_handler+0x80>
    switch (port)
    932e:	2300      	movs	r3, #0
    9330:	e7de      	b.n	92f0 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9332:	4d6b      	ldr	r5, [pc, #428]	; (94e0 <next_sense_cond_call_handler+0x270>)
    9334:	f240 2329 	movw	r3, #553	; 0x229
    9338:	462a      	mov	r2, r5
    933a:	496c      	ldr	r1, [pc, #432]	; (94ec <next_sense_cond_call_handler+0x27c>)
    933c:	486a      	ldr	r0, [pc, #424]	; (94e8 <next_sense_cond_call_handler+0x278>)
    933e:	f005 fef1 	bl	f124 <assert_print>
    9342:	f240 2129 	movw	r1, #553	; 0x229
    9346:	4628      	mov	r0, r5
    9348:	f005 fee5 	bl	f116 <assert_post_action>
    934c:	e7d6      	b.n	92fc <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    934e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9352:	e000      	b.n	9356 <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9354:	4b66      	ldr	r3, [pc, #408]	; (94f0 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    9356:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    935a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    935e:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    9362:	429e      	cmp	r6, r3
    9364:	f040 80af 	bne.w	94c6 <next_sense_cond_call_handler+0x256>
    switch (port)
    9368:	0963      	lsrs	r3, r4, #5
    936a:	d01f      	beq.n	93ac <next_sense_cond_call_handler+0x13c>
    936c:	2b01      	cmp	r3, #1
    936e:	d120      	bne.n	93b2 <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    9370:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9374:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9378:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    937a:	f013 0f01 	tst.w	r3, #1
    937e:	d01a      	beq.n	93b6 <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    9380:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9384:	0963      	lsrs	r3, r4, #5
    9386:	d024      	beq.n	93d2 <next_sense_cond_call_handler+0x162>
    9388:	2b01      	cmp	r3, #1
    938a:	d025      	beq.n	93d8 <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    938c:	4f54      	ldr	r7, [pc, #336]	; (94e0 <next_sense_cond_call_handler+0x270>)
    938e:	f240 232e 	movw	r3, #558	; 0x22e
    9392:	463a      	mov	r2, r7
    9394:	4953      	ldr	r1, [pc, #332]	; (94e4 <next_sense_cond_call_handler+0x274>)
    9396:	4854      	ldr	r0, [pc, #336]	; (94e8 <next_sense_cond_call_handler+0x278>)
    9398:	f005 fec4 	bl	f124 <assert_print>
    939c:	f240 212e 	movw	r1, #558	; 0x22e
    93a0:	4638      	mov	r0, r7
    93a2:	f005 feb8 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    93a6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    93aa:	e016      	b.n	93da <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    93ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    93b0:	e7e0      	b.n	9374 <next_sense_cond_call_handler+0x104>
    switch (port)
    93b2:	2300      	movs	r3, #0
    93b4:	e7de      	b.n	9374 <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    93b6:	4d4a      	ldr	r5, [pc, #296]	; (94e0 <next_sense_cond_call_handler+0x270>)
    93b8:	f240 2329 	movw	r3, #553	; 0x229
    93bc:	462a      	mov	r2, r5
    93be:	494b      	ldr	r1, [pc, #300]	; (94ec <next_sense_cond_call_handler+0x27c>)
    93c0:	4849      	ldr	r0, [pc, #292]	; (94e8 <next_sense_cond_call_handler+0x278>)
    93c2:	f005 feaf 	bl	f124 <assert_print>
    93c6:	f240 2129 	movw	r1, #553	; 0x229
    93ca:	4628      	mov	r0, r5
    93cc:	f005 fea3 	bl	f116 <assert_post_action>
    93d0:	e7d6      	b.n	9380 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    93d2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    93d6:	e000      	b.n	93da <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    93d8:	4945      	ldr	r1, [pc, #276]	; (94f0 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    93da:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    93de:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    93e2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    93e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    93ea:	0963      	lsrs	r3, r4, #5
    93ec:	d01f      	beq.n	942e <next_sense_cond_call_handler+0x1be>
    93ee:	2b01      	cmp	r3, #1
    93f0:	d120      	bne.n	9434 <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    93f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    93f6:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    93fa:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    93fc:	f013 0f01 	tst.w	r3, #1
    9400:	d01a      	beq.n	9438 <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    9402:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9406:	0964      	lsrs	r4, r4, #5
    9408:	d024      	beq.n	9454 <next_sense_cond_call_handler+0x1e4>
    940a:	2c01      	cmp	r4, #1
    940c:	d025      	beq.n	945a <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    940e:	4c34      	ldr	r4, [pc, #208]	; (94e0 <next_sense_cond_call_handler+0x270>)
    9410:	f240 232e 	movw	r3, #558	; 0x22e
    9414:	4622      	mov	r2, r4
    9416:	4933      	ldr	r1, [pc, #204]	; (94e4 <next_sense_cond_call_handler+0x274>)
    9418:	4833      	ldr	r0, [pc, #204]	; (94e8 <next_sense_cond_call_handler+0x278>)
    941a:	f005 fe83 	bl	f124 <assert_print>
    941e:	f240 212e 	movw	r1, #558	; 0x22e
    9422:	4620      	mov	r0, r4
    9424:	f005 fe77 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    9428:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    942c:	e016      	b.n	945c <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    942e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9432:	e7e0      	b.n	93f6 <next_sense_cond_call_handler+0x186>
    switch (port)
    9434:	2300      	movs	r3, #0
    9436:	e7de      	b.n	93f6 <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9438:	4d29      	ldr	r5, [pc, #164]	; (94e0 <next_sense_cond_call_handler+0x270>)
    943a:	f240 2329 	movw	r3, #553	; 0x229
    943e:	462a      	mov	r2, r5
    9440:	492a      	ldr	r1, [pc, #168]	; (94ec <next_sense_cond_call_handler+0x27c>)
    9442:	4829      	ldr	r0, [pc, #164]	; (94e8 <next_sense_cond_call_handler+0x278>)
    9444:	f005 fe6e 	bl	f124 <assert_print>
    9448:	f240 2129 	movw	r1, #553	; 0x229
    944c:	4628      	mov	r0, r5
    944e:	f005 fe62 	bl	f116 <assert_post_action>
    9452:	e7d6      	b.n	9402 <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    9454:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9458:	e000      	b.n	945c <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    945a:	4925      	ldr	r1, [pc, #148]	; (94f0 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    945c:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    9460:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    9464:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9468:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    946c:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    9470:	e029      	b.n	94c6 <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9472:	f04f 0803 	mov.w	r8, #3
    9476:	e709      	b.n	928c <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    9478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    947c:	e70e      	b.n	929c <next_sense_cond_call_handler+0x2c>
    switch (port)
    947e:	2300      	movs	r3, #0
    9480:	e70c      	b.n	929c <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9482:	4f17      	ldr	r7, [pc, #92]	; (94e0 <next_sense_cond_call_handler+0x270>)
    9484:	f240 2329 	movw	r3, #553	; 0x229
    9488:	463a      	mov	r2, r7
    948a:	4918      	ldr	r1, [pc, #96]	; (94ec <next_sense_cond_call_handler+0x27c>)
    948c:	4816      	ldr	r0, [pc, #88]	; (94e8 <next_sense_cond_call_handler+0x278>)
    948e:	f005 fe49 	bl	f124 <assert_print>
    9492:	f240 2129 	movw	r1, #553	; 0x229
    9496:	4638      	mov	r0, r7
    9498:	f005 fe3d 	bl	f116 <assert_post_action>
    949c:	e705      	b.n	92aa <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    949e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    94a2:	e000      	b.n	94a6 <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    94a4:	4912      	ldr	r1, [pc, #72]	; (94f0 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    94a6:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    94aa:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    94ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    94b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    94b6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    94ba:	2d03      	cmp	r5, #3
    94bc:	d007      	beq.n	94ce <next_sense_cond_call_handler+0x25e>
    94be:	2e02      	cmp	r6, #2
    94c0:	d003      	beq.n	94ca <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    94c2:	2e03      	cmp	r6, #3
    94c4:	d008      	beq.n	94d8 <next_sense_cond_call_handler+0x268>
}
    94c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    94ca:	2d01      	cmp	r5, #1
    94cc:	d1f9      	bne.n	94c2 <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    94ce:	4629      	mov	r1, r5
    94d0:	4620      	mov	r0, r4
    94d2:	f7ff fde1 	bl	9098 <call_handler>
}
    94d6:	e7f6      	b.n	94c6 <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    94d8:	2d02      	cmp	r5, #2
    94da:	d1f4      	bne.n	94c6 <next_sense_cond_call_handler+0x256>
    94dc:	e7f7      	b.n	94ce <next_sense_cond_call_handler+0x25e>
    94de:	bf00      	nop
    94e0:	000127cc 	.word	0x000127cc
    94e4:	00011bd0 	.word	0x00011bd0
    94e8:	00011514 	.word	0x00011514
    94ec:	00012800 	.word	0x00012800
    94f0:	50000300 	.word	0x50000300

000094f4 <port_event_handle>:
{
    94f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    94f8:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    94fa:	4a65      	ldr	r2, [pc, #404]	; (9690 <port_event_handle+0x19c>)
    94fc:	466b      	mov	r3, sp
    94fe:	e892 0003 	ldmia.w	r2, {r0, r1}
    9502:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    9506:	2300      	movs	r3, #0
    9508:	a802      	add	r0, sp, #8
    950a:	e00b      	b.n	9524 <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    950c:	aa04      	add	r2, sp, #16
    950e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    9512:	f852 2c10 	ldr.w	r2, [r2, #-16]
    9516:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    951a:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    951e:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    9522:	3301      	adds	r3, #1
    9524:	2b01      	cmp	r3, #1
    9526:	d9f1      	bls.n	950c <port_event_handle+0x18>
    9528:	e0ad      	b.n	9686 <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    952a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    952e:	e07f      	b.n	9630 <port_event_handle+0x13c>
    switch (port)
    9530:	2300      	movs	r3, #0
    9532:	e07d      	b.n	9630 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9534:	4f57      	ldr	r7, [pc, #348]	; (9694 <port_event_handle+0x1a0>)
    9536:	f240 2329 	movw	r3, #553	; 0x229
    953a:	463a      	mov	r2, r7
    953c:	4956      	ldr	r1, [pc, #344]	; (9698 <port_event_handle+0x1a4>)
    953e:	4857      	ldr	r0, [pc, #348]	; (969c <port_event_handle+0x1a8>)
    9540:	f005 fdf0 	bl	f124 <assert_print>
    9544:	f240 2129 	movw	r1, #553	; 0x229
    9548:	4638      	mov	r0, r7
    954a:	f005 fde4 	bl	f116 <assert_post_action>
    954e:	e076      	b.n	963e <port_event_handle+0x14a>
        case 0: return NRF_P0;
    9550:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9554:	e000      	b.n	9558 <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9556:	4b52      	ldr	r3, [pc, #328]	; (96a0 <port_event_handle+0x1ac>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    9558:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    955c:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    9560:	f3c2 4201 	ubfx	r2, r2, #16, #2
    9564:	4631      	mov	r1, r6
    9566:	4620      	mov	r0, r4
    9568:	f7ff fe82 	bl	9270 <next_sense_cond_call_handler>
    switch (port)
    956c:	0963      	lsrs	r3, r4, #5
    956e:	d01f      	beq.n	95b0 <port_event_handle+0xbc>
    9570:	2b01      	cmp	r3, #1
    9572:	d120      	bne.n	95b6 <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    9574:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9578:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    957c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    957e:	f013 0f01 	tst.w	r3, #1
    9582:	d01a      	beq.n	95ba <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    9584:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9588:	0964      	lsrs	r4, r4, #5
    958a:	d024      	beq.n	95d6 <port_event_handle+0xe2>
    958c:	2c01      	cmp	r4, #1
    958e:	d025      	beq.n	95dc <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    9590:	4c40      	ldr	r4, [pc, #256]	; (9694 <port_event_handle+0x1a0>)
    9592:	f240 232e 	movw	r3, #558	; 0x22e
    9596:	4622      	mov	r2, r4
    9598:	4942      	ldr	r1, [pc, #264]	; (96a4 <port_event_handle+0x1b0>)
    959a:	4840      	ldr	r0, [pc, #256]	; (969c <port_event_handle+0x1a8>)
    959c:	f005 fdc2 	bl	f124 <assert_print>
    95a0:	f240 212e 	movw	r1, #558	; 0x22e
    95a4:	4620      	mov	r0, r4
    95a6:	f005 fdb6 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    95aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    95ae:	e016      	b.n	95de <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    95b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    95b4:	e7e0      	b.n	9578 <port_event_handle+0x84>
    switch (port)
    95b6:	2300      	movs	r3, #0
    95b8:	e7de      	b.n	9578 <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    95ba:	4e36      	ldr	r6, [pc, #216]	; (9694 <port_event_handle+0x1a0>)
    95bc:	f240 2329 	movw	r3, #553	; 0x229
    95c0:	4632      	mov	r2, r6
    95c2:	4935      	ldr	r1, [pc, #212]	; (9698 <port_event_handle+0x1a4>)
    95c4:	4835      	ldr	r0, [pc, #212]	; (969c <port_event_handle+0x1a8>)
    95c6:	f005 fdad 	bl	f124 <assert_print>
    95ca:	f240 2129 	movw	r1, #553	; 0x229
    95ce:	4630      	mov	r0, r6
    95d0:	f005 fda1 	bl	f116 <assert_post_action>
    95d4:	e7d6      	b.n	9584 <port_event_handle+0x90>
        case 0: return NRF_P0;
    95d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    95da:	e000      	b.n	95de <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    95dc:	4a30      	ldr	r2, [pc, #192]	; (96a0 <port_event_handle+0x1ac>)
    reg->LATCH = (1 << pin_number);
    95de:	2301      	movs	r3, #1
    95e0:	40b3      	lsls	r3, r6
    95e2:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    95e6:	ab04      	add	r3, sp, #16
    95e8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    95ec:	f853 4c08 	ldr.w	r4, [r3, #-8]
    95f0:	2c00      	cmp	r4, #0
    95f2:	d03b      	beq.n	966c <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    95f4:	fa94 f4a4 	rbit	r4, r4
    95f8:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    95fc:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    9600:	f104 0208 	add.w	r2, r4, #8
    9604:	4b28      	ldr	r3, [pc, #160]	; (96a8 <port_event_handle+0x1b4>)
    9606:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    960a:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    960e:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    9610:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    9614:	a802      	add	r0, sp, #8
    9616:	2301      	movs	r3, #1
    9618:	fa03 f202 	lsl.w	r2, r3, r2
    961c:	5c43      	ldrb	r3, [r0, r1]
    961e:	ea23 0302 	bic.w	r3, r3, r2
    9622:	5443      	strb	r3, [r0, r1]
    switch (port)
    9624:	0963      	lsrs	r3, r4, #5
    9626:	d080      	beq.n	952a <port_event_handle+0x36>
    9628:	2b01      	cmp	r3, #1
    962a:	d181      	bne.n	9530 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    962c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9630:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9634:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9636:	f013 0f01 	tst.w	r3, #1
    963a:	f43f af7b 	beq.w	9534 <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    963e:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9642:	0963      	lsrs	r3, r4, #5
    9644:	d084      	beq.n	9550 <port_event_handle+0x5c>
    9646:	2b01      	cmp	r3, #1
    9648:	d085      	beq.n	9556 <port_event_handle+0x62>
            NRFX_ASSERT(0);
    964a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 9694 <port_event_handle+0x1a0>
    964e:	f240 232e 	movw	r3, #558	; 0x22e
    9652:	4642      	mov	r2, r8
    9654:	4913      	ldr	r1, [pc, #76]	; (96a4 <port_event_handle+0x1b0>)
    9656:	4811      	ldr	r0, [pc, #68]	; (969c <port_event_handle+0x1a8>)
    9658:	f005 fd64 	bl	f124 <assert_print>
    965c:	f240 212e 	movw	r1, #558	; 0x22e
    9660:	4640      	mov	r0, r8
    9662:	f005 fd58 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    9666:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    966a:	e775      	b.n	9558 <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    966c:	3501      	adds	r5, #1
    966e:	2d01      	cmp	r5, #1
    9670:	d9b9      	bls.n	95e6 <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9672:	4b0e      	ldr	r3, [pc, #56]	; (96ac <port_event_handle+0x1b8>)
    9674:	2200      	movs	r2, #0
    9676:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    967a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    967e:	a802      	add	r0, sp, #8
    9680:	f7ff fdce 	bl	9220 <latch_pending_read_and_check>
    9684:	b108      	cbz	r0, 968a <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    9686:	2500      	movs	r5, #0
    9688:	e7f1      	b.n	966e <port_event_handle+0x17a>
}
    968a:	b004      	add	sp, #16
    968c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9690:	00010fb0 	.word	0x00010fb0
    9694:	000127cc 	.word	0x000127cc
    9698:	00012800 	.word	0x00012800
    969c:	00011514 	.word	0x00011514
    96a0:	50000300 	.word	0x50000300
    96a4:	00011bd0 	.word	0x00011bd0
    96a8:	2000407c 	.word	0x2000407c
    96ac:	40006000 	.word	0x40006000

000096b0 <nrfx_gpiote_input_configure>:
{
    96b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    96b4:	4604      	mov	r4, r0
    96b6:	4615      	mov	r5, r2
    96b8:	461e      	mov	r6, r3
    if (p_input_config)
    96ba:	2900      	cmp	r1, #0
    96bc:	d064      	beq.n	9788 <nrfx_gpiote_input_configure+0xd8>
    96be:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    96c0:	f006 fe4d 	bl	1035e <pin_is_task_output>
    96c4:	2800      	cmp	r0, #0
    96c6:	f040 80cd 	bne.w	9864 <nrfx_gpiote_input_configure+0x1b4>
    switch (port)
    96ca:	0963      	lsrs	r3, r4, #5
    96cc:	d020      	beq.n	9710 <nrfx_gpiote_input_configure+0x60>
    96ce:	2b01      	cmp	r3, #1
    96d0:	d121      	bne.n	9716 <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    96d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    96d6:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    96da:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    96dc:	f013 0f01 	tst.w	r3, #1
    96e0:	d01b      	beq.n	971a <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    96e2:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    96e6:	0963      	lsrs	r3, r4, #5
    96e8:	d025      	beq.n	9736 <nrfx_gpiote_input_configure+0x86>
    96ea:	2b01      	cmp	r3, #1
    96ec:	d026      	beq.n	973c <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    96ee:	f8df 9184 	ldr.w	r9, [pc, #388]	; 9874 <nrfx_gpiote_input_configure+0x1c4>
    96f2:	f240 232e 	movw	r3, #558	; 0x22e
    96f6:	464a      	mov	r2, r9
    96f8:	495f      	ldr	r1, [pc, #380]	; (9878 <nrfx_gpiote_input_configure+0x1c8>)
    96fa:	4860      	ldr	r0, [pc, #384]	; (987c <nrfx_gpiote_input_configure+0x1cc>)
    96fc:	f005 fd12 	bl	f124 <assert_print>
    9700:	f240 212e 	movw	r1, #558	; 0x22e
    9704:	4648      	mov	r0, r9
    9706:	f005 fd06 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    970a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    970e:	e016      	b.n	973e <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    9710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9714:	e7df      	b.n	96d6 <nrfx_gpiote_input_configure+0x26>
    switch (port)
    9716:	2300      	movs	r3, #0
    9718:	e7dd      	b.n	96d6 <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    971a:	4f56      	ldr	r7, [pc, #344]	; (9874 <nrfx_gpiote_input_configure+0x1c4>)
    971c:	f240 2329 	movw	r3, #553	; 0x229
    9720:	463a      	mov	r2, r7
    9722:	4957      	ldr	r1, [pc, #348]	; (9880 <nrfx_gpiote_input_configure+0x1d0>)
    9724:	4855      	ldr	r0, [pc, #340]	; (987c <nrfx_gpiote_input_configure+0x1cc>)
    9726:	f005 fcfd 	bl	f124 <assert_print>
    972a:	f240 2129 	movw	r1, #553	; 0x229
    972e:	4638      	mov	r0, r7
    9730:	f005 fcf1 	bl	f116 <assert_post_action>
    9734:	e7d5      	b.n	96e2 <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    9736:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    973a:	e000      	b.n	973e <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    973c:	4951      	ldr	r1, [pc, #324]	; (9884 <nrfx_gpiote_input_configure+0x1d4>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    973e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    9742:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9746:	f1b8 0f00 	cmp.w	r8, #0
    974a:	d03f      	beq.n	97cc <nrfx_gpiote_input_configure+0x11c>
    974c:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    974e:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    9752:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9756:	f1b8 0f00 	cmp.w	r8, #0
    975a:	d039      	beq.n	97d0 <nrfx_gpiote_input_configure+0x120>
    975c:	f898 2000 	ldrb.w	r2, [r8]
    9760:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9762:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    9764:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    9768:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    976c:	4a46      	ldr	r2, [pc, #280]	; (9888 <nrfx_gpiote_input_configure+0x1d8>)
    976e:	f104 0108 	add.w	r1, r4, #8
    9772:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    9776:	f023 0302 	bic.w	r3, r3, #2
    977a:	b29b      	uxth	r3, r3
    977c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    9780:	f043 0301 	orr.w	r3, r3, #1
    9784:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    9788:	b1bd      	cbz	r5, 97ba <nrfx_gpiote_input_configure+0x10a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    978a:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    978c:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    9790:	4620      	mov	r0, r4
    9792:	f7ff fc2f 	bl	8ff4 <pin_is_output>
    9796:	b1e8      	cbz	r0, 97d4 <nrfx_gpiote_input_configure+0x124>
            if (use_evt)
    9798:	f1b8 0f00 	cmp.w	r8, #0
    979c:	d164      	bne.n	9868 <nrfx_gpiote_input_configure+0x1b8>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    979e:	4a3a      	ldr	r2, [pc, #232]	; (9888 <nrfx_gpiote_input_configure+0x1d8>)
    97a0:	f104 0108 	add.w	r1, r4, #8
    97a4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    97a8:	f023 031c 	bic.w	r3, r3, #28
    97ac:	b29b      	uxth	r3, r3
    97ae:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    97b2:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    97b6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    97ba:	2e00      	cmp	r6, #0
    97bc:	d058      	beq.n	9870 <nrfx_gpiote_input_configure+0x1c0>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    97be:	6872      	ldr	r2, [r6, #4]
    97c0:	6831      	ldr	r1, [r6, #0]
    97c2:	4620      	mov	r0, r4
    97c4:	f7ff fcd4 	bl	9170 <pin_handler_set>
}
    97c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    97cc:	2200      	movs	r2, #0
    97ce:	e7be      	b.n	974e <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    97d0:	2200      	movs	r2, #0
    97d2:	e7c6      	b.n	9762 <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    97d4:	4a2c      	ldr	r2, [pc, #176]	; (9888 <nrfx_gpiote_input_configure+0x1d8>)
    97d6:	f104 0108 	add.w	r1, r4, #8
    97da:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    97de:	f023 0320 	bic.w	r3, r3, #32
    97e2:	04db      	lsls	r3, r3, #19
    97e4:	0cdb      	lsrs	r3, r3, #19
    97e6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    97ea:	f1b8 0f00 	cmp.w	r8, #0
    97ee:	d0d6      	beq.n	979e <nrfx_gpiote_input_configure+0xee>
                if (!edge)
    97f0:	2f03      	cmp	r7, #3
    97f2:	d83b      	bhi.n	986c <nrfx_gpiote_input_configure+0x1bc>
                uint8_t ch = *p_trigger_config->p_in_channel;
    97f4:	686b      	ldr	r3, [r5, #4]
    97f6:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    97f8:	b937      	cbnz	r7, 9808 <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    97fa:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    97fe:	4b23      	ldr	r3, [pc, #140]	; (988c <nrfx_gpiote_input_configure+0x1dc>)
    9800:	2200      	movs	r2, #0
    9802:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    9806:	e7ca      	b.n	979e <nrfx_gpiote_input_configure+0xee>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    9808:	4638      	mov	r0, r7
    980a:	f006 fdbf 	bl	1038c <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    980e:	4b1f      	ldr	r3, [pc, #124]	; (988c <nrfx_gpiote_input_configure+0x1dc>)
    9810:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    9814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    9818:	f021 0103 	bic.w	r1, r1, #3
    981c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    9820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    9824:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    9828:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    982c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9830:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    9834:	0221      	lsls	r1, r4, #8
    9836:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    983a:	0400      	lsls	r0, r0, #16
    983c:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9840:	4301      	orrs	r1, r0
    9842:	ea4c 0101 	orr.w	r1, ip, r1
    9846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    984a:	036b      	lsls	r3, r5, #13
    984c:	b29b      	uxth	r3, r3
    984e:	4a0e      	ldr	r2, [pc, #56]	; (9888 <nrfx_gpiote_input_configure+0x1d8>)
    9850:	f104 0108 	add.w	r1, r4, #8
    9854:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    9858:	4303      	orrs	r3, r0
    985a:	f043 0320 	orr.w	r3, r3, #32
    985e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    9862:	e79c      	b.n	979e <nrfx_gpiote_input_configure+0xee>
            return NRFX_ERROR_INVALID_PARAM;
    9864:	480a      	ldr	r0, [pc, #40]	; (9890 <nrfx_gpiote_input_configure+0x1e0>)
    9866:	e7af      	b.n	97c8 <nrfx_gpiote_input_configure+0x118>
                return NRFX_ERROR_INVALID_PARAM;
    9868:	4809      	ldr	r0, [pc, #36]	; (9890 <nrfx_gpiote_input_configure+0x1e0>)
    986a:	e7ad      	b.n	97c8 <nrfx_gpiote_input_configure+0x118>
                    return NRFX_ERROR_INVALID_PARAM;
    986c:	4808      	ldr	r0, [pc, #32]	; (9890 <nrfx_gpiote_input_configure+0x1e0>)
    986e:	e7ab      	b.n	97c8 <nrfx_gpiote_input_configure+0x118>
        err = NRFX_SUCCESS;
    9870:	4808      	ldr	r0, [pc, #32]	; (9894 <nrfx_gpiote_input_configure+0x1e4>)
    9872:	e7a9      	b.n	97c8 <nrfx_gpiote_input_configure+0x118>
    9874:	000127cc 	.word	0x000127cc
    9878:	00011bd0 	.word	0x00011bd0
    987c:	00011514 	.word	0x00011514
    9880:	00012800 	.word	0x00012800
    9884:	50000300 	.word	0x50000300
    9888:	2000407c 	.word	0x2000407c
    988c:	40006000 	.word	0x40006000
    9890:	0bad0004 	.word	0x0bad0004
    9894:	0bad0000 	.word	0x0bad0000

00009898 <nrfx_gpiote_output_configure>:
{
    9898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    989c:	4604      	mov	r4, r0
    989e:	4615      	mov	r5, r2
    if (p_config)
    98a0:	2900      	cmp	r1, #0
    98a2:	f000 8086 	beq.w	99b2 <nrfx_gpiote_output_configure+0x11a>
    98a6:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    98a8:	f006 fd68 	bl	1037c <pin_is_input>
    98ac:	b128      	cbz	r0, 98ba <nrfx_gpiote_output_configure+0x22>
    98ae:	4620      	mov	r0, r4
    98b0:	f7ff fb8a 	bl	8fc8 <pin_in_use_by_te>
    98b4:	2800      	cmp	r0, #0
    98b6:	f040 80ce 	bne.w	9a56 <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    98ba:	4620      	mov	r0, r4
    98bc:	f7ff fb8e 	bl	8fdc <pin_has_trigger>
    98c0:	b118      	cbz	r0, 98ca <nrfx_gpiote_output_configure+0x32>
    98c2:	787b      	ldrb	r3, [r7, #1]
    98c4:	2b01      	cmp	r3, #1
    98c6:	f000 80c8 	beq.w	9a5a <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    98ca:	f107 0901 	add.w	r9, r7, #1
    98ce:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    98d2:	0963      	lsrs	r3, r4, #5
    98d4:	d020      	beq.n	9918 <nrfx_gpiote_output_configure+0x80>
    98d6:	2b01      	cmp	r3, #1
    98d8:	d121      	bne.n	991e <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    98da:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    98de:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    98e2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    98e4:	f013 0f01 	tst.w	r3, #1
    98e8:	d01b      	beq.n	9922 <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    98ea:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    98ee:	0963      	lsrs	r3, r4, #5
    98f0:	d025      	beq.n	993e <nrfx_gpiote_output_configure+0xa6>
    98f2:	2b01      	cmp	r3, #1
    98f4:	d026      	beq.n	9944 <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    98f6:	f8df a170 	ldr.w	sl, [pc, #368]	; 9a68 <nrfx_gpiote_output_configure+0x1d0>
    98fa:	f240 232e 	movw	r3, #558	; 0x22e
    98fe:	4652      	mov	r2, sl
    9900:	495a      	ldr	r1, [pc, #360]	; (9a6c <nrfx_gpiote_output_configure+0x1d4>)
    9902:	485b      	ldr	r0, [pc, #364]	; (9a70 <nrfx_gpiote_output_configure+0x1d8>)
    9904:	f005 fc0e 	bl	f124 <assert_print>
    9908:	f240 212e 	movw	r1, #558	; 0x22e
    990c:	4650      	mov	r0, sl
    990e:	f005 fc02 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    9912:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9916:	e016      	b.n	9946 <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    9918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    991c:	e7df      	b.n	98de <nrfx_gpiote_output_configure+0x46>
    switch (port)
    991e:	2300      	movs	r3, #0
    9920:	e7dd      	b.n	98de <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9922:	4e51      	ldr	r6, [pc, #324]	; (9a68 <nrfx_gpiote_output_configure+0x1d0>)
    9924:	f240 2329 	movw	r3, #553	; 0x229
    9928:	4632      	mov	r2, r6
    992a:	4952      	ldr	r1, [pc, #328]	; (9a74 <nrfx_gpiote_output_configure+0x1dc>)
    992c:	4850      	ldr	r0, [pc, #320]	; (9a70 <nrfx_gpiote_output_configure+0x1d8>)
    992e:	f005 fbf9 	bl	f124 <assert_print>
    9932:	f240 2129 	movw	r1, #553	; 0x229
    9936:	4630      	mov	r0, r6
    9938:	f005 fbed 	bl	f116 <assert_post_action>
    993c:	e7d5      	b.n	98ea <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    993e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9942:	e000      	b.n	9946 <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9944:	4a4c      	ldr	r2, [pc, #304]	; (9a78 <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9946:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    994a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    994e:	f1b9 0f00 	cmp.w	r9, #0
    9952:	d04b      	beq.n	99ec <nrfx_gpiote_output_configure+0x154>
    9954:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9956:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    995a:	f1b8 0f00 	cmp.w	r8, #0
    995e:	d047      	beq.n	99f0 <nrfx_gpiote_output_configure+0x158>
    9960:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9962:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9964:	2f00      	cmp	r7, #0
    9966:	d045      	beq.n	99f4 <nrfx_gpiote_output_configure+0x15c>
    9968:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    996c:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    996e:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9972:	f1b9 0f00 	cmp.w	r9, #0
    9976:	d03f      	beq.n	99f8 <nrfx_gpiote_output_configure+0x160>
    9978:	787b      	ldrb	r3, [r7, #1]
    997a:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    997c:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9980:	f1b8 0f00 	cmp.w	r8, #0
    9984:	d03a      	beq.n	99fc <nrfx_gpiote_output_configure+0x164>
    9986:	78b8      	ldrb	r0, [r7, #2]
    9988:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    998a:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    998c:	2f00      	cmp	r7, #0
    998e:	d037      	beq.n	9a00 <nrfx_gpiote_output_configure+0x168>
    9990:	7838      	ldrb	r0, [r7, #0]
    9992:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9994:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9996:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    9998:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    999c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    99a0:	4a36      	ldr	r2, [pc, #216]	; (9a7c <nrfx_gpiote_output_configure+0x1e4>)
    99a2:	f104 0108 	add.w	r1, r4, #8
    99a6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    99aa:	f043 0303 	orr.w	r3, r3, #3
    99ae:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    99b2:	2d00      	cmp	r5, #0
    99b4:	d053      	beq.n	9a5e <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    99b6:	4620      	mov	r0, r4
    99b8:	f006 fce0 	bl	1037c <pin_is_input>
    99bc:	2800      	cmp	r0, #0
    99be:	d150      	bne.n	9a62 <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    99c0:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    99c2:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    99c6:	4a2e      	ldr	r2, [pc, #184]	; (9a80 <nrfx_gpiote_output_configure+0x1e8>)
    99c8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    99cc:	492b      	ldr	r1, [pc, #172]	; (9a7c <nrfx_gpiote_output_configure+0x1e4>)
    99ce:	f104 0008 	add.w	r0, r4, #8
    99d2:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    99d6:	f022 0220 	bic.w	r2, r2, #32
    99da:	04d2      	lsls	r2, r2, #19
    99dc:	0cd2      	lsrs	r2, r2, #19
    99de:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    99e2:	786a      	ldrb	r2, [r5, #1]
    99e4:	b972      	cbnz	r2, 9a04 <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    99e6:	4827      	ldr	r0, [pc, #156]	; (9a84 <nrfx_gpiote_output_configure+0x1ec>)
}
    99e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    99ec:	2300      	movs	r3, #0
    99ee:	e7b2      	b.n	9956 <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    99f0:	2000      	movs	r0, #0
    99f2:	e7b6      	b.n	9962 <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    99f4:	2000      	movs	r0, #0
    99f6:	e7b9      	b.n	996c <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    99f8:	2300      	movs	r3, #0
    99fa:	e7bf      	b.n	997c <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    99fc:	2000      	movs	r0, #0
    99fe:	e7c4      	b.n	998a <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    9a00:	2000      	movs	r0, #0
    9a02:	e7c7      	b.n	9994 <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    9a04:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    9a06:	481e      	ldr	r0, [pc, #120]	; (9a80 <nrfx_gpiote_output_configure+0x1e8>)
    9a08:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    9a0c:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    9a10:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    9a14:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    9a18:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9a1c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    9a20:	0221      	lsls	r1, r4, #8
    9a22:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    9a26:	0412      	lsls	r2, r2, #16
    9a28:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9a2c:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    9a2e:	0539      	lsls	r1, r7, #20
    9a30:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    9a34:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9a36:	4332      	orrs	r2, r6
    9a38:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    9a3c:	035b      	lsls	r3, r3, #13
    9a3e:	b29b      	uxth	r3, r3
    9a40:	4a0e      	ldr	r2, [pc, #56]	; (9a7c <nrfx_gpiote_output_configure+0x1e4>)
    9a42:	3408      	adds	r4, #8
    9a44:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    9a48:	430b      	orrs	r3, r1
    9a4a:	f043 0320 	orr.w	r3, r3, #32
    9a4e:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    9a52:	480c      	ldr	r0, [pc, #48]	; (9a84 <nrfx_gpiote_output_configure+0x1ec>)
    9a54:	e7c8      	b.n	99e8 <nrfx_gpiote_output_configure+0x150>
    9a56:	480c      	ldr	r0, [pc, #48]	; (9a88 <nrfx_gpiote_output_configure+0x1f0>)
    9a58:	e7c6      	b.n	99e8 <nrfx_gpiote_output_configure+0x150>
    9a5a:	480b      	ldr	r0, [pc, #44]	; (9a88 <nrfx_gpiote_output_configure+0x1f0>)
    9a5c:	e7c4      	b.n	99e8 <nrfx_gpiote_output_configure+0x150>
    9a5e:	4809      	ldr	r0, [pc, #36]	; (9a84 <nrfx_gpiote_output_configure+0x1ec>)
    9a60:	e7c2      	b.n	99e8 <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    9a62:	4809      	ldr	r0, [pc, #36]	; (9a88 <nrfx_gpiote_output_configure+0x1f0>)
    9a64:	e7c0      	b.n	99e8 <nrfx_gpiote_output_configure+0x150>
    9a66:	bf00      	nop
    9a68:	000127cc 	.word	0x000127cc
    9a6c:	00011bd0 	.word	0x00011bd0
    9a70:	00011514 	.word	0x00011514
    9a74:	00012800 	.word	0x00012800
    9a78:	50000300 	.word	0x50000300
    9a7c:	2000407c 	.word	0x2000407c
    9a80:	40006000 	.word	0x40006000
    9a84:	0bad0000 	.word	0x0bad0000
    9a88:	0bad0004 	.word	0x0bad0004

00009a8c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    9a8c:	4b01      	ldr	r3, [pc, #4]	; (9a94 <nrfx_gpiote_global_callback_set+0x8>)
    9a8e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    9a90:	60d9      	str	r1, [r3, #12]
}
    9a92:	4770      	bx	lr
    9a94:	2000407c 	.word	0x2000407c

00009a98 <nrfx_gpiote_channel_get>:
{
    9a98:	b570      	push	{r4, r5, r6, lr}
    9a9a:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    9a9c:	460d      	mov	r5, r1
    9a9e:	b159      	cbz	r1, 9ab8 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    9aa0:	4620      	mov	r0, r4
    9aa2:	f7ff fa91 	bl	8fc8 <pin_in_use_by_te>
    9aa6:	b1a8      	cbz	r0, 9ad4 <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    9aa8:	3408      	adds	r4, #8
    9aaa:	4b0b      	ldr	r3, [pc, #44]	; (9ad8 <nrfx_gpiote_channel_get+0x40>)
    9aac:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    9ab0:	0b5b      	lsrs	r3, r3, #13
    9ab2:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    9ab4:	4809      	ldr	r0, [pc, #36]	; (9adc <nrfx_gpiote_channel_get+0x44>)
}
    9ab6:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    9ab8:	4e09      	ldr	r6, [pc, #36]	; (9ae0 <nrfx_gpiote_channel_get+0x48>)
    9aba:	f240 2335 	movw	r3, #565	; 0x235
    9abe:	4632      	mov	r2, r6
    9ac0:	4908      	ldr	r1, [pc, #32]	; (9ae4 <nrfx_gpiote_channel_get+0x4c>)
    9ac2:	4809      	ldr	r0, [pc, #36]	; (9ae8 <nrfx_gpiote_channel_get+0x50>)
    9ac4:	f005 fb2e 	bl	f124 <assert_print>
    9ac8:	f240 2135 	movw	r1, #565	; 0x235
    9acc:	4630      	mov	r0, r6
    9ace:	f005 fb22 	bl	f116 <assert_post_action>
    9ad2:	e7e5      	b.n	9aa0 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    9ad4:	4805      	ldr	r0, [pc, #20]	; (9aec <nrfx_gpiote_channel_get+0x54>)
    9ad6:	e7ee      	b.n	9ab6 <nrfx_gpiote_channel_get+0x1e>
    9ad8:	2000407c 	.word	0x2000407c
    9adc:	0bad0000 	.word	0x0bad0000
    9ae0:	00012a60 	.word	0x00012a60
    9ae4:	00012ab4 	.word	0x00012ab4
    9ae8:	00011514 	.word	0x00011514
    9aec:	0bad0004 	.word	0x0bad0004

00009af0 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    9af0:	4b10      	ldr	r3, [pc, #64]	; (9b34 <nrfx_gpiote_init+0x44>)
    9af2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    9af6:	b10b      	cbz	r3, 9afc <nrfx_gpiote_init+0xc>
        return err_code;
    9af8:	480f      	ldr	r0, [pc, #60]	; (9b38 <nrfx_gpiote_init+0x48>)
}
    9afa:	4770      	bx	lr
{
    9afc:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    9afe:	4c0d      	ldr	r4, [pc, #52]	; (9b34 <nrfx_gpiote_init+0x44>)
    9b00:	2260      	movs	r2, #96	; 0x60
    9b02:	2100      	movs	r1, #0
    9b04:	f104 0010 	add.w	r0, r4, #16
    9b08:	f006 fda5 	bl	10656 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    9b0c:	2006      	movs	r0, #6
    9b0e:	f7fc f8f7 	bl	5d00 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9b12:	4b0a      	ldr	r3, [pc, #40]	; (9b3c <nrfx_gpiote_init+0x4c>)
    9b14:	2200      	movs	r2, #0
    9b16:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    9b1a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    9b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    9b22:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    9b26:	2301      	movs	r3, #1
    9b28:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    9b2c:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    9b2e:	4804      	ldr	r0, [pc, #16]	; (9b40 <nrfx_gpiote_init+0x50>)
}
    9b30:	bd10      	pop	{r4, pc}
    9b32:	bf00      	nop
    9b34:	2000407c 	.word	0x2000407c
    9b38:	0bad0005 	.word	0x0bad0005
    9b3c:	40006000 	.word	0x40006000
    9b40:	0bad0000 	.word	0x0bad0000

00009b44 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    9b44:	4b03      	ldr	r3, [pc, #12]	; (9b54 <nrfx_gpiote_is_init+0x10>)
    9b46:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    9b4a:	3800      	subs	r0, #0
    9b4c:	bf18      	it	ne
    9b4e:	2001      	movne	r0, #1
    9b50:	4770      	bx	lr
    9b52:	bf00      	nop
    9b54:	2000407c 	.word	0x2000407c

00009b58 <nrfx_gpiote_channel_free>:
{
    9b58:	b508      	push	{r3, lr}
    9b5a:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    9b5c:	4801      	ldr	r0, [pc, #4]	; (9b64 <nrfx_gpiote_channel_free+0xc>)
    9b5e:	f7ff f855 	bl	8c0c <nrfx_flag32_free>
}
    9b62:	bd08      	pop	{r3, pc}
    9b64:	200040ec 	.word	0x200040ec

00009b68 <nrfx_gpiote_channel_alloc>:
{
    9b68:	b508      	push	{r3, lr}
    9b6a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    9b6c:	4801      	ldr	r0, [pc, #4]	; (9b74 <nrfx_gpiote_channel_alloc+0xc>)
    9b6e:	f7ff f825 	bl	8bbc <nrfx_flag32_alloc>
}
    9b72:	bd08      	pop	{r3, pc}
    9b74:	200040ec 	.word	0x200040ec

00009b78 <nrfx_gpiote_trigger_enable>:
{
    9b78:	b570      	push	{r4, r5, r6, lr}
    9b7a:	4604      	mov	r4, r0
    9b7c:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    9b7e:	f7ff fa2d 	bl	8fdc <pin_has_trigger>
    9b82:	b1b8      	cbz	r0, 9bb4 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    9b84:	4620      	mov	r0, r4
    9b86:	f7ff fa1f 	bl	8fc8 <pin_in_use_by_te>
    9b8a:	b118      	cbz	r0, 9b94 <nrfx_gpiote_trigger_enable+0x1c>
    9b8c:	4620      	mov	r0, r4
    9b8e:	f006 fbf5 	bl	1037c <pin_is_input>
    9b92:	b9e8      	cbnz	r0, 9bd0 <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    9b94:	2d00      	cmp	r5, #0
    9b96:	d04c      	beq.n	9c32 <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    9b98:	f104 0308 	add.w	r3, r4, #8
    9b9c:	4a70      	ldr	r2, [pc, #448]	; (9d60 <nrfx_gpiote_trigger_enable+0x1e8>)
    9b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    9ba2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    9ba6:	2b04      	cmp	r3, #4
    9ba8:	f000 8092 	beq.w	9cd0 <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    9bac:	2b05      	cmp	r3, #5
    9bae:	d14e      	bne.n	9c4e <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    9bb0:	2602      	movs	r6, #2
    9bb2:	e08e      	b.n	9cd2 <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    9bb4:	4e6b      	ldr	r6, [pc, #428]	; (9d64 <nrfx_gpiote_trigger_enable+0x1ec>)
    9bb6:	f240 33df 	movw	r3, #991	; 0x3df
    9bba:	4632      	mov	r2, r6
    9bbc:	496a      	ldr	r1, [pc, #424]	; (9d68 <nrfx_gpiote_trigger_enable+0x1f0>)
    9bbe:	486b      	ldr	r0, [pc, #428]	; (9d6c <nrfx_gpiote_trigger_enable+0x1f4>)
    9bc0:	f005 fab0 	bl	f124 <assert_print>
    9bc4:	f240 31df 	movw	r1, #991	; 0x3df
    9bc8:	4630      	mov	r0, r6
    9bca:	f005 faa4 	bl	f116 <assert_post_action>
    9bce:	e7d9      	b.n	9b84 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    9bd0:	4620      	mov	r0, r4
    9bd2:	f7ff fa19 	bl	9008 <pin_te_get>
    9bd6:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    9bd8:	2807      	cmp	r0, #7
    9bda:	d81c      	bhi.n	9c16 <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    9bdc:	00a3      	lsls	r3, r4, #2
    9bde:	f503 7380 	add.w	r3, r3, #256	; 0x100
    9be2:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    9be4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9be8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9bec:	2200      	movs	r2, #0
    9bee:	601a      	str	r2, [r3, #0]
    9bf0:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    9bf2:	4a5f      	ldr	r2, [pc, #380]	; (9d70 <nrfx_gpiote_trigger_enable+0x1f8>)
    9bf4:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    9bf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    9bfc:	f043 0301 	orr.w	r3, r3, #1
    9c00:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    9c04:	2d00      	cmp	r5, #0
    9c06:	f000 80a9 	beq.w	9d5c <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    9c0a:	2001      	movs	r0, #1
    9c0c:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    9c10:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    9c14:	e0a2      	b.n	9d5c <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    9c16:	4e57      	ldr	r6, [pc, #348]	; (9d74 <nrfx_gpiote_trigger_enable+0x1fc>)
    9c18:	f44f 7323 	mov.w	r3, #652	; 0x28c
    9c1c:	4632      	mov	r2, r6
    9c1e:	4956      	ldr	r1, [pc, #344]	; (9d78 <nrfx_gpiote_trigger_enable+0x200>)
    9c20:	4852      	ldr	r0, [pc, #328]	; (9d6c <nrfx_gpiote_trigger_enable+0x1f4>)
    9c22:	f005 fa7f 	bl	f124 <assert_print>
    9c26:	f44f 7123 	mov.w	r1, #652	; 0x28c
    9c2a:	4630      	mov	r0, r6
    9c2c:	f005 fa73 	bl	f116 <assert_post_action>
    9c30:	e7d4      	b.n	9bdc <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    9c32:	4d4c      	ldr	r5, [pc, #304]	; (9d64 <nrfx_gpiote_trigger_enable+0x1ec>)
    9c34:	f240 33ee 	movw	r3, #1006	; 0x3ee
    9c38:	462a      	mov	r2, r5
    9c3a:	4950      	ldr	r1, [pc, #320]	; (9d7c <nrfx_gpiote_trigger_enable+0x204>)
    9c3c:	484b      	ldr	r0, [pc, #300]	; (9d6c <nrfx_gpiote_trigger_enable+0x1f4>)
    9c3e:	f005 fa71 	bl	f124 <assert_print>
    9c42:	f240 31ee 	movw	r1, #1006	; 0x3ee
    9c46:	4628      	mov	r0, r5
    9c48:	f005 fa65 	bl	f116 <assert_post_action>
    9c4c:	e7a4      	b.n	9b98 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    9c4e:	0963      	lsrs	r3, r4, #5
    9c50:	d01f      	beq.n	9c92 <nrfx_gpiote_trigger_enable+0x11a>
    9c52:	2b01      	cmp	r3, #1
    9c54:	d120      	bne.n	9c98 <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    9c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9c5a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9c5e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9c60:	f013 0f01 	tst.w	r3, #1
    9c64:	d01a      	beq.n	9c9c <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    9c66:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9c6a:	0963      	lsrs	r3, r4, #5
    9c6c:	d024      	beq.n	9cb8 <nrfx_gpiote_trigger_enable+0x140>
    9c6e:	2b01      	cmp	r3, #1
    9c70:	d025      	beq.n	9cbe <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    9c72:	4e43      	ldr	r6, [pc, #268]	; (9d80 <nrfx_gpiote_trigger_enable+0x208>)
    9c74:	f240 232e 	movw	r3, #558	; 0x22e
    9c78:	4632      	mov	r2, r6
    9c7a:	4942      	ldr	r1, [pc, #264]	; (9d84 <nrfx_gpiote_trigger_enable+0x20c>)
    9c7c:	483b      	ldr	r0, [pc, #236]	; (9d6c <nrfx_gpiote_trigger_enable+0x1f4>)
    9c7e:	f005 fa51 	bl	f124 <assert_print>
    9c82:	f240 212e 	movw	r1, #558	; 0x22e
    9c86:	4630      	mov	r0, r6
    9c88:	f005 fa45 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    9c8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9c90:	e016      	b.n	9cc0 <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    9c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9c96:	e7e0      	b.n	9c5a <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    9c98:	2300      	movs	r3, #0
    9c9a:	e7de      	b.n	9c5a <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9c9c:	4d38      	ldr	r5, [pc, #224]	; (9d80 <nrfx_gpiote_trigger_enable+0x208>)
    9c9e:	f240 2329 	movw	r3, #553	; 0x229
    9ca2:	462a      	mov	r2, r5
    9ca4:	4938      	ldr	r1, [pc, #224]	; (9d88 <nrfx_gpiote_trigger_enable+0x210>)
    9ca6:	4831      	ldr	r0, [pc, #196]	; (9d6c <nrfx_gpiote_trigger_enable+0x1f4>)
    9ca8:	f005 fa3c 	bl	f124 <assert_print>
    9cac:	f240 2129 	movw	r1, #553	; 0x229
    9cb0:	4628      	mov	r0, r5
    9cb2:	f005 fa30 	bl	f116 <assert_post_action>
    9cb6:	e7d6      	b.n	9c66 <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    9cb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9cbc:	e000      	b.n	9cc0 <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9cbe:	4b33      	ldr	r3, [pc, #204]	; (9d8c <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    9cc0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    9cc4:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9cc6:	f013 0f01 	tst.w	r3, #1
    9cca:	d024      	beq.n	9d16 <nrfx_gpiote_trigger_enable+0x19e>
    9ccc:	2603      	movs	r6, #3
    9cce:	e000      	b.n	9cd2 <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    9cd0:	2603      	movs	r6, #3
    switch (port)
    9cd2:	0963      	lsrs	r3, r4, #5
    9cd4:	d021      	beq.n	9d1a <nrfx_gpiote_trigger_enable+0x1a2>
    9cd6:	2b01      	cmp	r3, #1
    9cd8:	d122      	bne.n	9d20 <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    9cda:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9cde:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9ce2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9ce4:	f013 0f01 	tst.w	r3, #1
    9ce8:	d01c      	beq.n	9d24 <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    9cea:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9cee:	0964      	lsrs	r4, r4, #5
    9cf0:	d026      	beq.n	9d40 <nrfx_gpiote_trigger_enable+0x1c8>
    9cf2:	2c01      	cmp	r4, #1
    9cf4:	d027      	beq.n	9d46 <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    9cf6:	4c22      	ldr	r4, [pc, #136]	; (9d80 <nrfx_gpiote_trigger_enable+0x208>)
    9cf8:	f240 232e 	movw	r3, #558	; 0x22e
    9cfc:	4622      	mov	r2, r4
    9cfe:	4921      	ldr	r1, [pc, #132]	; (9d84 <nrfx_gpiote_trigger_enable+0x20c>)
    9d00:	481a      	ldr	r0, [pc, #104]	; (9d6c <nrfx_gpiote_trigger_enable+0x1f4>)
    9d02:	f005 fa0f 	bl	f124 <assert_print>
    9d06:	f240 212e 	movw	r1, #558	; 0x22e
    9d0a:	4620      	mov	r0, r4
    9d0c:	f005 fa03 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    9d10:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9d14:	e018      	b.n	9d48 <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9d16:	2602      	movs	r6, #2
    9d18:	e7db      	b.n	9cd2 <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    9d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9d1e:	e7de      	b.n	9cde <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    9d20:	2300      	movs	r3, #0
    9d22:	e7dc      	b.n	9cde <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9d24:	4d16      	ldr	r5, [pc, #88]	; (9d80 <nrfx_gpiote_trigger_enable+0x208>)
    9d26:	f240 2329 	movw	r3, #553	; 0x229
    9d2a:	462a      	mov	r2, r5
    9d2c:	4916      	ldr	r1, [pc, #88]	; (9d88 <nrfx_gpiote_trigger_enable+0x210>)
    9d2e:	480f      	ldr	r0, [pc, #60]	; (9d6c <nrfx_gpiote_trigger_enable+0x1f4>)
    9d30:	f005 f9f8 	bl	f124 <assert_print>
    9d34:	f240 2129 	movw	r1, #553	; 0x229
    9d38:	4628      	mov	r0, r5
    9d3a:	f005 f9ec 	bl	f116 <assert_post_action>
    9d3e:	e7d4      	b.n	9cea <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    9d40:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9d44:	e000      	b.n	9d48 <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9d46:	4911      	ldr	r1, [pc, #68]	; (9d8c <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9d48:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    9d4c:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    9d50:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9d54:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    9d58:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    9d5c:	bd70      	pop	{r4, r5, r6, pc}
    9d5e:	bf00      	nop
    9d60:	2000407c 	.word	0x2000407c
    9d64:	00012a60 	.word	0x00012a60
    9d68:	00012b04 	.word	0x00012b04
    9d6c:	00011514 	.word	0x00011514
    9d70:	40006000 	.word	0x40006000
    9d74:	00012ac0 	.word	0x00012ac0
    9d78:	00012af8 	.word	0x00012af8
    9d7c:	00012b1c 	.word	0x00012b1c
    9d80:	000127cc 	.word	0x000127cc
    9d84:	00011bd0 	.word	0x00011bd0
    9d88:	00012800 	.word	0x00012800
    9d8c:	50000300 	.word	0x50000300

00009d90 <nrfx_gpiote_trigger_disable>:
{
    9d90:	b538      	push	{r3, r4, r5, lr}
    9d92:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    9d94:	f7ff f918 	bl	8fc8 <pin_in_use_by_te>
    9d98:	b1a0      	cbz	r0, 9dc4 <nrfx_gpiote_trigger_disable+0x34>
    9d9a:	4620      	mov	r0, r4
    9d9c:	f006 faee 	bl	1037c <pin_is_input>
    9da0:	b180      	cbz	r0, 9dc4 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    9da2:	4620      	mov	r0, r4
    9da4:	f7ff f930 	bl	9008 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    9da8:	2201      	movs	r2, #1
    9daa:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    9dac:	4b26      	ldr	r3, [pc, #152]	; (9e48 <nrfx_gpiote_trigger_disable+0xb8>)
    9dae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    9db2:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    9db6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    9dba:	f022 0203 	bic.w	r2, r2, #3
    9dbe:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    9dc2:	e040      	b.n	9e46 <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    9dc4:	0963      	lsrs	r3, r4, #5
    9dc6:	d01f      	beq.n	9e08 <nrfx_gpiote_trigger_disable+0x78>
    9dc8:	2b01      	cmp	r3, #1
    9dca:	d120      	bne.n	9e0e <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    9dcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9dd0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9dd4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9dd6:	f013 0f01 	tst.w	r3, #1
    9dda:	d01a      	beq.n	9e12 <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    9ddc:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9de0:	0964      	lsrs	r4, r4, #5
    9de2:	d024      	beq.n	9e2e <nrfx_gpiote_trigger_disable+0x9e>
    9de4:	2c01      	cmp	r4, #1
    9de6:	d025      	beq.n	9e34 <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    9de8:	4c18      	ldr	r4, [pc, #96]	; (9e4c <nrfx_gpiote_trigger_disable+0xbc>)
    9dea:	f240 232e 	movw	r3, #558	; 0x22e
    9dee:	4622      	mov	r2, r4
    9df0:	4917      	ldr	r1, [pc, #92]	; (9e50 <nrfx_gpiote_trigger_disable+0xc0>)
    9df2:	4818      	ldr	r0, [pc, #96]	; (9e54 <nrfx_gpiote_trigger_disable+0xc4>)
    9df4:	f005 f996 	bl	f124 <assert_print>
    9df8:	f240 212e 	movw	r1, #558	; 0x22e
    9dfc:	4620      	mov	r0, r4
    9dfe:	f005 f98a 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    9e02:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9e06:	e016      	b.n	9e36 <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    9e08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9e0c:	e7e0      	b.n	9dd0 <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    9e0e:	2300      	movs	r3, #0
    9e10:	e7de      	b.n	9dd0 <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9e12:	4d0e      	ldr	r5, [pc, #56]	; (9e4c <nrfx_gpiote_trigger_disable+0xbc>)
    9e14:	f240 2329 	movw	r3, #553	; 0x229
    9e18:	462a      	mov	r2, r5
    9e1a:	490f      	ldr	r1, [pc, #60]	; (9e58 <nrfx_gpiote_trigger_disable+0xc8>)
    9e1c:	480d      	ldr	r0, [pc, #52]	; (9e54 <nrfx_gpiote_trigger_disable+0xc4>)
    9e1e:	f005 f981 	bl	f124 <assert_print>
    9e22:	f240 2129 	movw	r1, #553	; 0x229
    9e26:	4628      	mov	r0, r5
    9e28:	f005 f975 	bl	f116 <assert_post_action>
    9e2c:	e7d6      	b.n	9ddc <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    9e2e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9e32:	e000      	b.n	9e36 <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9e34:	4909      	ldr	r1, [pc, #36]	; (9e5c <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9e36:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    9e3a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    9e3e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    9e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9e46:	bd38      	pop	{r3, r4, r5, pc}
    9e48:	40006000 	.word	0x40006000
    9e4c:	000127cc 	.word	0x000127cc
    9e50:	00011bd0 	.word	0x00011bd0
    9e54:	00011514 	.word	0x00011514
    9e58:	00012800 	.word	0x00012800
    9e5c:	50000300 	.word	0x50000300

00009e60 <nrfx_gpiote_pin_uninit>:
{
    9e60:	b538      	push	{r3, r4, r5, lr}
    9e62:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    9e64:	f7ff f8a6 	bl	8fb4 <pin_in_use>
    9e68:	b908      	cbnz	r0, 9e6e <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    9e6a:	4824      	ldr	r0, [pc, #144]	; (9efc <nrfx_gpiote_pin_uninit+0x9c>)
}
    9e6c:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    9e6e:	4620      	mov	r0, r4
    9e70:	f7ff ff8e 	bl	9d90 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    9e74:	4620      	mov	r0, r4
    9e76:	f7ff f95f 	bl	9138 <pin_handler_trigger_uninit>
    switch (port)
    9e7a:	0963      	lsrs	r3, r4, #5
    9e7c:	d01f      	beq.n	9ebe <nrfx_gpiote_pin_uninit+0x5e>
    9e7e:	2b01      	cmp	r3, #1
    9e80:	d120      	bne.n	9ec4 <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    9e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9e86:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9e8a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9e8c:	f013 0f01 	tst.w	r3, #1
    9e90:	d01a      	beq.n	9ec8 <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    9e92:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9e96:	0964      	lsrs	r4, r4, #5
    9e98:	d024      	beq.n	9ee4 <nrfx_gpiote_pin_uninit+0x84>
    9e9a:	2c01      	cmp	r4, #1
    9e9c:	d025      	beq.n	9eea <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    9e9e:	4c18      	ldr	r4, [pc, #96]	; (9f00 <nrfx_gpiote_pin_uninit+0xa0>)
    9ea0:	f240 232e 	movw	r3, #558	; 0x22e
    9ea4:	4622      	mov	r2, r4
    9ea6:	4917      	ldr	r1, [pc, #92]	; (9f04 <nrfx_gpiote_pin_uninit+0xa4>)
    9ea8:	4817      	ldr	r0, [pc, #92]	; (9f08 <nrfx_gpiote_pin_uninit+0xa8>)
    9eaa:	f005 f93b 	bl	f124 <assert_print>
    9eae:	f240 212e 	movw	r1, #558	; 0x22e
    9eb2:	4620      	mov	r0, r4
    9eb4:	f005 f92f 	bl	f116 <assert_post_action>
        case 0: return NRF_P0;
    9eb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9ebc:	e016      	b.n	9eec <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    9ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9ec2:	e7e0      	b.n	9e86 <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    9ec4:	2300      	movs	r3, #0
    9ec6:	e7de      	b.n	9e86 <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9ec8:	4d0d      	ldr	r5, [pc, #52]	; (9f00 <nrfx_gpiote_pin_uninit+0xa0>)
    9eca:	f240 2329 	movw	r3, #553	; 0x229
    9ece:	462a      	mov	r2, r5
    9ed0:	490e      	ldr	r1, [pc, #56]	; (9f0c <nrfx_gpiote_pin_uninit+0xac>)
    9ed2:	480d      	ldr	r0, [pc, #52]	; (9f08 <nrfx_gpiote_pin_uninit+0xa8>)
    9ed4:	f005 f926 	bl	f124 <assert_print>
    9ed8:	f240 2129 	movw	r1, #553	; 0x229
    9edc:	4628      	mov	r0, r5
    9ede:	f005 f91a 	bl	f116 <assert_post_action>
    9ee2:	e7d6      	b.n	9e92 <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    9ee4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9ee8:	e000      	b.n	9eec <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9eea:	4b09      	ldr	r3, [pc, #36]	; (9f10 <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    9eec:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    9ef0:	2202      	movs	r2, #2
    9ef2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    9ef6:	4807      	ldr	r0, [pc, #28]	; (9f14 <nrfx_gpiote_pin_uninit+0xb4>)
}
    9ef8:	e7b8      	b.n	9e6c <nrfx_gpiote_pin_uninit+0xc>
    9efa:	bf00      	nop
    9efc:	0bad0004 	.word	0x0bad0004
    9f00:	000127cc 	.word	0x000127cc
    9f04:	00011bd0 	.word	0x00011bd0
    9f08:	00011514 	.word	0x00011514
    9f0c:	00012800 	.word	0x00012800
    9f10:	50000300 	.word	0x50000300
    9f14:	0bad0000 	.word	0x0bad0000

00009f18 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    9f18:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    9f1a:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    9f1c:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9f20:	2100      	movs	r1, #0
    uint32_t status = 0;
    9f22:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9f24:	e003      	b.n	9f2e <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    9f26:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    9f28:	3304      	adds	r3, #4
    9f2a:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9f2c:	3101      	adds	r1, #1
    9f2e:	2907      	cmp	r1, #7
    9f30:	d814      	bhi.n	9f5c <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9f32:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    9f36:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    9f3a:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    9f3c:	2a00      	cmp	r2, #0
    9f3e:	d0f2      	beq.n	9f26 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    9f40:	4a0c      	ldr	r2, [pc, #48]	; (9f74 <nrfx_gpiote_irq_handler+0x5c>)
    9f42:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    9f46:	4210      	tst	r0, r2
    9f48:	d0ed      	beq.n	9f26 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    9f4a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    9f4e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9f52:	2500      	movs	r5, #0
    9f54:	6015      	str	r5, [r2, #0]
    9f56:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    9f58:	4304      	orrs	r4, r0
    9f5a:	e7e4      	b.n	9f26 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9f5c:	4b05      	ldr	r3, [pc, #20]	; (9f74 <nrfx_gpiote_irq_handler+0x5c>)
    9f5e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    9f62:	b91b      	cbnz	r3, 9f6c <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    9f64:	4620      	mov	r0, r4
    9f66:	f7ff f939 	bl	91dc <gpiote_evt_handle>
}
    9f6a:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    9f6c:	f7ff fac2 	bl	94f4 <port_event_handle>
    9f70:	e7f8      	b.n	9f64 <nrfx_gpiote_irq_handler+0x4c>
    9f72:	bf00      	nop
    9f74:	40006000 	.word	0x40006000

00009f78 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    9f78:	b508      	push	{r3, lr}
    9f7a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    9f7c:	4801      	ldr	r0, [pc, #4]	; (9f84 <nrfx_ppi_channel_alloc+0xc>)
    9f7e:	f7fe fe1d 	bl	8bbc <nrfx_flag32_alloc>
}
    9f82:	bd08      	pop	{r3, pc}
    9f84:	200040f8 	.word	0x200040f8

00009f88 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    9f88:	4b12      	ldr	r3, [pc, #72]	; (9fd4 <_DoInit+0x4c>)
    9f8a:	2203      	movs	r2, #3
    9f8c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    9f8e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    9f90:	4911      	ldr	r1, [pc, #68]	; (9fd8 <_DoInit+0x50>)
    9f92:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    9f94:	4a11      	ldr	r2, [pc, #68]	; (9fdc <_DoInit+0x54>)
    9f96:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    9f98:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9f9c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    9f9e:	2200      	movs	r2, #0
    9fa0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    9fa2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    9fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    9fa6:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    9fa8:	490d      	ldr	r1, [pc, #52]	; (9fe0 <_DoInit+0x58>)
    9faa:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    9fac:	2110      	movs	r1, #16
    9fae:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    9fb0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    9fb2:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    9fb4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    9fb6:	4a0b      	ldr	r2, [pc, #44]	; (9fe4 <_DoInit+0x5c>)
    9fb8:	6810      	ldr	r0, [r2, #0]
    9fba:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    9fbe:	4a0a      	ldr	r2, [pc, #40]	; (9fe8 <_DoInit+0x60>)
    9fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
    9fc4:	6018      	str	r0, [r3, #0]
    9fc6:	8099      	strh	r1, [r3, #4]
    9fc8:	0c09      	lsrs	r1, r1, #16
    9fca:	7199      	strb	r1, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    9fcc:	2220      	movs	r2, #32
    9fce:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    9fd0:	4770      	bx	lr
    9fd2:	bf00      	nop
    9fd4:	2000d02c 	.word	0x2000d02c
    9fd8:	00012b28 	.word	0x00012b28
    9fdc:	2000d0e4 	.word	0x2000d0e4
    9fe0:	2000d0d4 	.word	0x2000d0d4
    9fe4:	00012b34 	.word	0x00012b34
    9fe8:	00012b38 	.word	0x00012b38

00009fec <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    9fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9ff0:	4604      	mov	r4, r0
    9ff2:	460e      	mov	r6, r1
    9ff4:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    9ff6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    9ffa:	4a2d      	ldr	r2, [pc, #180]	; (a0b0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    9ffc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    a000:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    a002:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    a004:	42bb      	cmp	r3, r7
    a006:	d84b      	bhi.n	a0a0 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    a008:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    a00c:	4928      	ldr	r1, [pc, #160]	; (a0b0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a00e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    a012:	f8d2 8020 	ldr.w	r8, [r2, #32]
    a016:	eba8 0907 	sub.w	r9, r8, r7
    a01a:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    a01e:	4295      	cmp	r5, r2
    a020:	d904      	bls.n	a02c <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    a022:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    a024:	429d      	cmp	r5, r3
    a026:	d917      	bls.n	a058 <SEGGER_RTT_WriteSkipNoLock+0x6c>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    a028:	2000      	movs	r0, #0
    a02a:	e03e      	b.n	a0aa <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a02c:	f8df 8080 	ldr.w	r8, [pc, #128]	; a0b0 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    a030:	1c63      	adds	r3, r4, #1
    a032:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a036:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    a03a:	6858      	ldr	r0, [r3, #4]
    a03c:	462a      	mov	r2, r5
    a03e:	4631      	mov	r1, r6
    a040:	4438      	add	r0, r7
    a042:	f006 fafa 	bl	1063a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    a046:	443d      	add	r5, r7
    a048:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a04c:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
    a050:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
      return 1;
    a054:	2001      	movs	r0, #1
    a056:	e028      	b.n	a0aa <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a058:	1c43      	adds	r3, r0, #1
    a05a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a05e:	4a14      	ldr	r2, [pc, #80]	; (a0b0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a060:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    a064:	6858      	ldr	r0, [r3, #4]
    a066:	464a      	mov	r2, r9
    a068:	4631      	mov	r1, r6
    a06a:	4438      	add	r0, r7
    a06c:	f006 fae5 	bl	1063a <memcpy>
      NumBytes -= Rem;
    a070:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    a074:	197f      	adds	r7, r7, r5
    a076:	d00b      	beq.n	a090 <SEGGER_RTT_WriteSkipNoLock+0xa4>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    a078:	1c63      	adds	r3, r4, #1
    a07a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a07e:	4a0c      	ldr	r2, [pc, #48]	; (a0b0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a080:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    a084:	463a      	mov	r2, r7
    a086:	eb06 0109 	add.w	r1, r6, r9
    a08a:	6858      	ldr	r0, [r3, #4]
    a08c:	f006 fad5 	bl	1063a <memcpy>
      pRing->WrOff = NumBytes;
    a090:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a094:	4b06      	ldr	r3, [pc, #24]	; (a0b0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a096:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    a09a:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    a09c:	2001      	movs	r0, #1
    a09e:	e004      	b.n	a0aa <SEGGER_RTT_WriteSkipNoLock+0xbe>
    Avail = RdOff - WrOff - 1u;
    a0a0:	1bdb      	subs	r3, r3, r7
    a0a2:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    a0a4:	42ab      	cmp	r3, r5
    a0a6:	d2c1      	bcs.n	a02c <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    a0a8:	2000      	movs	r0, #0
}
    a0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a0ae:	bf00      	nop
    a0b0:	2000d02c 	.word	0x2000d02c

0000a0b4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    a0b4:	4b06      	ldr	r3, [pc, #24]	; (a0d0 <SEGGER_RTT_HasDataUp+0x1c>)
    a0b6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    a0ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    a0be:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    a0c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a0c4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    a0c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    a0ca:	1a80      	subs	r0, r0, r2
    a0cc:	4770      	bx	lr
    a0ce:	bf00      	nop
    a0d0:	2000d02c 	.word	0x2000d02c

0000a0d4 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    a0d4:	4b03      	ldr	r3, [pc, #12]	; (a0e4 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    a0d6:	e000      	b.n	a0da <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    a0d8:	3318      	adds	r3, #24
	while (dev < __device_end) {
    a0da:	4a03      	ldr	r2, [pc, #12]	; (a0e8 <z_device_state_init+0x14>)
    a0dc:	4293      	cmp	r3, r2
    a0de:	d3fb      	bcc.n	a0d8 <z_device_state_init+0x4>
	}
}
    a0e0:	4770      	bx	lr
    a0e2:	bf00      	nop
    a0e4:	00010ce8 	.word	0x00010ce8
    a0e8:	00010d60 	.word	0x00010d60

0000a0ec <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    a0ec:	b570      	push	{r4, r5, r6, lr}
    a0ee:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a0f0:	4b11      	ldr	r3, [pc, #68]	; (a138 <z_sys_init_run_level+0x4c>)
    a0f2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    a0f6:	e009      	b.n	a10c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    a0f8:	4240      	negs	r0, r0
    a0fa:	e017      	b.n	a12c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    a0fc:	68eb      	ldr	r3, [r5, #12]
    a0fe:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    a100:	68ea      	ldr	r2, [r5, #12]
    a102:	7853      	ldrb	r3, [r2, #1]
    a104:	f043 0301 	orr.w	r3, r3, #1
    a108:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a10a:	3408      	adds	r4, #8
    a10c:	1c73      	adds	r3, r6, #1
    a10e:	4a0a      	ldr	r2, [pc, #40]	; (a138 <z_sys_init_run_level+0x4c>)
    a110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a114:	42a3      	cmp	r3, r4
    a116:	d90d      	bls.n	a134 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    a118:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    a11a:	6823      	ldr	r3, [r4, #0]
    a11c:	4628      	mov	r0, r5
    a11e:	4798      	blx	r3
		if (dev != NULL) {
    a120:	2d00      	cmp	r5, #0
    a122:	d0f2      	beq.n	a10a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    a124:	2800      	cmp	r0, #0
    a126:	d0eb      	beq.n	a100 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    a128:	2800      	cmp	r0, #0
    a12a:	dbe5      	blt.n	a0f8 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    a12c:	28ff      	cmp	r0, #255	; 0xff
    a12e:	dde5      	ble.n	a0fc <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    a130:	20ff      	movs	r0, #255	; 0xff
    a132:	e7e3      	b.n	a0fc <z_sys_init_run_level+0x10>
		}
	}
}
    a134:	bd70      	pop	{r4, r5, r6, pc}
    a136:	bf00      	nop
    a138:	00012b40 	.word	0x00012b40

0000a13c <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    a13c:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    a13e:	4605      	mov	r5, r0
    a140:	b328      	cbz	r0, a18e <z_impl_device_get_binding+0x52>
    a142:	7803      	ldrb	r3, [r0, #0]
    a144:	b32b      	cbz	r3, a192 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    a146:	4c14      	ldr	r4, [pc, #80]	; (a198 <z_impl_device_get_binding+0x5c>)
    a148:	e000      	b.n	a14c <z_impl_device_get_binding+0x10>
    a14a:	3418      	adds	r4, #24
    a14c:	4b13      	ldr	r3, [pc, #76]	; (a19c <z_impl_device_get_binding+0x60>)
    a14e:	429c      	cmp	r4, r3
    a150:	d008      	beq.n	a164 <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    a152:	4620      	mov	r0, r4
    a154:	f006 f929 	bl	103aa <z_device_is_ready>
    a158:	2800      	cmp	r0, #0
    a15a:	d0f6      	beq.n	a14a <z_impl_device_get_binding+0xe>
    a15c:	6823      	ldr	r3, [r4, #0]
    a15e:	42ab      	cmp	r3, r5
    a160:	d1f3      	bne.n	a14a <z_impl_device_get_binding+0xe>
    a162:	e012      	b.n	a18a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    a164:	4c0c      	ldr	r4, [pc, #48]	; (a198 <z_impl_device_get_binding+0x5c>)
    a166:	e000      	b.n	a16a <z_impl_device_get_binding+0x2e>
    a168:	3418      	adds	r4, #24
    a16a:	4b0c      	ldr	r3, [pc, #48]	; (a19c <z_impl_device_get_binding+0x60>)
    a16c:	429c      	cmp	r4, r3
    a16e:	d00b      	beq.n	a188 <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    a170:	4620      	mov	r0, r4
    a172:	f006 f91a 	bl	103aa <z_device_is_ready>
    a176:	2800      	cmp	r0, #0
    a178:	d0f6      	beq.n	a168 <z_impl_device_get_binding+0x2c>
    a17a:	6821      	ldr	r1, [r4, #0]
    a17c:	4628      	mov	r0, r5
    a17e:	f7f6 fe60 	bl	e42 <strcmp>
    a182:	2800      	cmp	r0, #0
    a184:	d1f0      	bne.n	a168 <z_impl_device_get_binding+0x2c>
    a186:	e000      	b.n	a18a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    a188:	2400      	movs	r4, #0
}
    a18a:	4620      	mov	r0, r4
    a18c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    a18e:	4604      	mov	r4, r0
    a190:	e7fb      	b.n	a18a <z_impl_device_get_binding+0x4e>
    a192:	2400      	movs	r4, #0
    a194:	e7f9      	b.n	a18a <z_impl_device_get_binding+0x4e>
    a196:	bf00      	nop
    a198:	00010ce8 	.word	0x00010ce8
    a19c:	00010d60 	.word	0x00010d60

0000a1a0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    a1a0:	4b01      	ldr	r3, [pc, #4]	; (a1a8 <z_impl_z_errno+0x8>)
    a1a2:	6898      	ldr	r0, [r3, #8]
}
    a1a4:	3094      	adds	r0, #148	; 0x94
    a1a6:	4770      	bx	lr
    a1a8:	2000d4e4 	.word	0x2000d4e4

0000a1ac <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    a1ac:	2804      	cmp	r0, #4
    a1ae:	d80c      	bhi.n	a1ca <reason_to_str+0x1e>
    a1b0:	e8df f000 	tbb	[pc, r0]
    a1b4:	07050d03 	.word	0x07050d03
    a1b8:	09          	.byte	0x09
    a1b9:	00          	.byte	0x00
    a1ba:	4806      	ldr	r0, [pc, #24]	; (a1d4 <reason_to_str+0x28>)
    a1bc:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    a1be:	4806      	ldr	r0, [pc, #24]	; (a1d8 <reason_to_str+0x2c>)
    a1c0:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    a1c2:	4806      	ldr	r0, [pc, #24]	; (a1dc <reason_to_str+0x30>)
    a1c4:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    a1c6:	4806      	ldr	r0, [pc, #24]	; (a1e0 <reason_to_str+0x34>)
    a1c8:	4770      	bx	lr
	default:
		return "Unknown error";
    a1ca:	4806      	ldr	r0, [pc, #24]	; (a1e4 <reason_to_str+0x38>)
    a1cc:	4770      	bx	lr
		return "Unhandled interrupt";
    a1ce:	4806      	ldr	r0, [pc, #24]	; (a1e8 <reason_to_str+0x3c>)
	}
}
    a1d0:	4770      	bx	lr
    a1d2:	bf00      	nop
    a1d4:	00012ba8 	.word	0x00012ba8
    a1d8:	00012b7c 	.word	0x00012b7c
    a1dc:	00012b8c 	.word	0x00012b8c
    a1e0:	00012b98 	.word	0x00012b98
    a1e4:	00012b58 	.word	0x00012b58
    a1e8:	00012b68 	.word	0x00012b68

0000a1ec <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a1ec:	b130      	cbz	r0, a1fc <thread_name_get+0x10>
{
    a1ee:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a1f0:	f006 f93d 	bl	1046e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    a1f4:	b120      	cbz	r0, a200 <thread_name_get+0x14>
    a1f6:	7803      	ldrb	r3, [r0, #0]
    a1f8:	b123      	cbz	r3, a204 <thread_name_get+0x18>
}
    a1fa:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    a1fc:	4802      	ldr	r0, [pc, #8]	; (a208 <thread_name_get+0x1c>)
}
    a1fe:	4770      	bx	lr
		thread_name = "unknown";
    a200:	4801      	ldr	r0, [pc, #4]	; (a208 <thread_name_get+0x1c>)
    a202:	e7fa      	b.n	a1fa <thread_name_get+0xe>
    a204:	4800      	ldr	r0, [pc, #0]	; (a208 <thread_name_get+0x1c>)
	return thread_name;
    a206:	e7f8      	b.n	a1fa <thread_name_get+0xe>
    a208:	00012bb8 	.word	0x00012bb8

0000a20c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a20c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a20e:	b087      	sub	sp, #28
    a210:	4604      	mov	r4, r0
    a212:	460e      	mov	r6, r1
	__asm__ volatile(
    a214:	f04f 0320 	mov.w	r3, #32
    a218:	f3ef 8711 	mrs	r7, BASEPRI
    a21c:	f383 8812 	msr	BASEPRI_MAX, r3
    a220:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    a224:	f002 f9d2 	bl	c5cc <z_impl_z_current_get>
    a228:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a22a:	4620      	mov	r0, r4
    a22c:	f7ff ffbe 	bl	a1ac <reason_to_str>
    a230:	2300      	movs	r3, #0
    a232:	9305      	str	r3, [sp, #20]
    a234:	9004      	str	r0, [sp, #16]
    a236:	9403      	str	r4, [sp, #12]
    a238:	4a22      	ldr	r2, [pc, #136]	; (a2c4 <z_fatal_error+0xb8>)
    a23a:	9202      	str	r2, [sp, #8]
    a23c:	9301      	str	r3, [sp, #4]
    a23e:	9300      	str	r3, [sp, #0]
    a240:	2201      	movs	r2, #1
    a242:	4921      	ldr	r1, [pc, #132]	; (a2c8 <z_fatal_error+0xbc>)
    a244:	4618      	mov	r0, r3
    a246:	f006 f8bd 	bl	103c4 <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    a24a:	b11e      	cbz	r6, a254 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    a24c:	69f3      	ldr	r3, [r6, #28]
    a24e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    a252:	b9eb      	cbnz	r3, a290 <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    a254:	4628      	mov	r0, r5
    a256:	f7ff ffc9 	bl	a1ec <thread_name_get>
    a25a:	9004      	str	r0, [sp, #16]
    a25c:	9503      	str	r5, [sp, #12]
    a25e:	4b1b      	ldr	r3, [pc, #108]	; (a2cc <z_fatal_error+0xc0>)
    a260:	9302      	str	r3, [sp, #8]
    a262:	2000      	movs	r0, #0
    a264:	9001      	str	r0, [sp, #4]
    a266:	9000      	str	r0, [sp, #0]
    a268:	4603      	mov	r3, r0
    a26a:	2201      	movs	r2, #1
    a26c:	4916      	ldr	r1, [pc, #88]	; (a2c8 <z_fatal_error+0xbc>)
    a26e:	f006 f8a9 	bl	103c4 <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    a272:	4631      	mov	r1, r6
    a274:	4620      	mov	r0, r4
    a276:	f7fe fb9b 	bl	89b0 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    a27a:	2c04      	cmp	r4, #4
    a27c:	d013      	beq.n	a2a6 <z_fatal_error+0x9a>
	__asm__ volatile(
    a27e:	f387 8811 	msr	BASEPRI, r7
    a282:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    a286:	4628      	mov	r0, r5
    a288:	f7fc fa9a 	bl	67c0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    a28c:	b007      	add	sp, #28
    a28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
    a290:	4b0f      	ldr	r3, [pc, #60]	; (a2d0 <z_fatal_error+0xc4>)
    a292:	9302      	str	r3, [sp, #8]
    a294:	2000      	movs	r0, #0
    a296:	9001      	str	r0, [sp, #4]
    a298:	9000      	str	r0, [sp, #0]
    a29a:	4603      	mov	r3, r0
    a29c:	2201      	movs	r2, #1
    a29e:	490a      	ldr	r1, [pc, #40]	; (a2c8 <z_fatal_error+0xbc>)
    a2a0:	f006 f890 	bl	103c4 <z_log_msg2_runtime_create>
    a2a4:	e7d6      	b.n	a254 <z_fatal_error+0x48>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    a2a6:	4c0b      	ldr	r4, [pc, #44]	; (a2d4 <z_fatal_error+0xc8>)
    a2a8:	238f      	movs	r3, #143	; 0x8f
    a2aa:	4622      	mov	r2, r4
    a2ac:	490a      	ldr	r1, [pc, #40]	; (a2d8 <z_fatal_error+0xcc>)
    a2ae:	480b      	ldr	r0, [pc, #44]	; (a2dc <z_fatal_error+0xd0>)
    a2b0:	f004 ff38 	bl	f124 <assert_print>
    a2b4:	480a      	ldr	r0, [pc, #40]	; (a2e0 <z_fatal_error+0xd4>)
    a2b6:	f004 ff35 	bl	f124 <assert_print>
    a2ba:	218f      	movs	r1, #143	; 0x8f
    a2bc:	4620      	mov	r0, r4
    a2be:	f004 ff2a 	bl	f116 <assert_post_action>
    a2c2:	e7dc      	b.n	a27e <z_fatal_error+0x72>
    a2c4:	00012bc0 	.word	0x00012bc0
    a2c8:	00010f08 	.word	0x00010f08
    a2cc:	00012c0c 	.word	0x00012c0c
    a2d0:	00012be8 	.word	0x00012be8
    a2d4:	00012c24 	.word	0x00012c24
    a2d8:	00012c48 	.word	0x00012c48
    a2dc:	00011514 	.word	0x00011514
    a2e0:	00012c68 	.word	0x00012c68

0000a2e4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    a2e4:	b510      	push	{r4, lr}
    a2e6:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    a2e8:	4c11      	ldr	r4, [pc, #68]	; (a330 <init_idle_thread+0x4c>)
    a2ea:	23b0      	movs	r3, #176	; 0xb0
    a2ec:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a2f0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    a2f4:	4b0f      	ldr	r3, [pc, #60]	; (a334 <init_idle_thread+0x50>)
    a2f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    a2fa:	4a0f      	ldr	r2, [pc, #60]	; (a338 <init_idle_thread+0x54>)
    a2fc:	9205      	str	r2, [sp, #20]
    a2fe:	2201      	movs	r2, #1
    a300:	9204      	str	r2, [sp, #16]
    a302:	220f      	movs	r2, #15
    a304:	9203      	str	r2, [sp, #12]
    a306:	2200      	movs	r2, #0
    a308:	9202      	str	r2, [sp, #8]
    a30a:	9201      	str	r2, [sp, #4]
    a30c:	9300      	str	r3, [sp, #0]
    a30e:	4b0b      	ldr	r3, [pc, #44]	; (a33c <init_idle_thread+0x58>)
    a310:	f44f 72a0 	mov.w	r2, #320	; 0x140
    a314:	490a      	ldr	r1, [pc, #40]	; (a340 <init_idle_thread+0x5c>)
    a316:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    a31a:	fb0c 1100 	mla	r1, ip, r0, r1
    a31e:	4620      	mov	r0, r4
    a320:	f000 fa76 	bl	a810 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a324:	7b63      	ldrb	r3, [r4, #13]
    a326:	f023 0304 	bic.w	r3, r3, #4
    a32a:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    a32c:	b006      	add	sp, #24
    a32e:	bd10      	pop	{r4, pc}
    a330:	200047c8 	.word	0x200047c8
    a334:	2000d4e4 	.word	0x2000d4e4
    a338:	00012ca0 	.word	0x00012ca0
    a33c:	0000ab25 	.word	0x0000ab25
    a340:	2000f000 	.word	0x2000f000

0000a344 <bg_thread_main>:
{
    a344:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    a346:	4b0a      	ldr	r3, [pc, #40]	; (a370 <bg_thread_main+0x2c>)
    a348:	2201      	movs	r2, #1
    a34a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    a34c:	2002      	movs	r0, #2
    a34e:	f7ff fecd 	bl	a0ec <z_sys_init_run_level>
	boot_banner();
    a352:	f002 fe83 	bl	d05c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    a356:	2003      	movs	r0, #3
    a358:	f7ff fec8 	bl	a0ec <z_sys_init_run_level>
	z_init_static_threads();
    a35c:	f000 fb68 	bl	aa30 <z_init_static_threads>
	main();
    a360:	f7f8 fd9c 	bl	2e9c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    a364:	4a03      	ldr	r2, [pc, #12]	; (a374 <bg_thread_main+0x30>)
    a366:	7b13      	ldrb	r3, [r2, #12]
    a368:	f023 0301 	bic.w	r3, r3, #1
    a36c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    a36e:	bd08      	pop	{r3, pc}
    a370:	2000d725 	.word	0x2000d725
    a374:	20004878 	.word	0x20004878

0000a378 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    a378:	b508      	push	{r3, lr}
    a37a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a37c:	4a01      	ldr	r2, [pc, #4]	; (a384 <switch_to_main_thread+0xc>)
    a37e:	4802      	ldr	r0, [pc, #8]	; (a388 <switch_to_main_thread+0x10>)
    a380:	f7fb fdd2 	bl	5f28 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    a384:	0000a345 	.word	0x0000a345
    a388:	20004878 	.word	0x20004878

0000a38c <z_bss_zero>:
{
    a38c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    a38e:	4803      	ldr	r0, [pc, #12]	; (a39c <z_bss_zero+0x10>)
    a390:	4a03      	ldr	r2, [pc, #12]	; (a3a0 <z_bss_zero+0x14>)
    a392:	1a12      	subs	r2, r2, r0
    a394:	2100      	movs	r1, #0
    a396:	f006 f824 	bl	103e2 <z_early_memset>
}
    a39a:	bd08      	pop	{r3, pc}
    a39c:	20004288 	.word	0x20004288
    a3a0:	2000d728 	.word	0x2000d728

0000a3a4 <z_init_cpu>:
{
    a3a4:	b510      	push	{r4, lr}
    a3a6:	4604      	mov	r4, r0
	init_idle_thread(id);
    a3a8:	f7ff ff9c 	bl	a2e4 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    a3ac:	490b      	ldr	r1, [pc, #44]	; (a3dc <z_init_cpu+0x38>)
    a3ae:	23b0      	movs	r3, #176	; 0xb0
    a3b0:	fb03 1104 	mla	r1, r3, r4, r1
    a3b4:	4a0a      	ldr	r2, [pc, #40]	; (a3e0 <z_init_cpu+0x3c>)
    a3b6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    a3ba:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    a3be:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    a3c0:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    a3c2:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    a3c6:	4b07      	ldr	r3, [pc, #28]	; (a3e4 <z_init_cpu+0x40>)
    a3c8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    a3cc:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    a3d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a3d4:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    a3d8:	6063      	str	r3, [r4, #4]
}
    a3da:	bd10      	pop	{r4, pc}
    a3dc:	200047c8 	.word	0x200047c8
    a3e0:	2000d4e4 	.word	0x2000d4e4
    a3e4:	2000f160 	.word	0x2000f160

0000a3e8 <prepare_multithreading>:
{
    a3e8:	b570      	push	{r4, r5, r6, lr}
    a3ea:	b086      	sub	sp, #24
	z_sched_init();
    a3ec:	f001 ff2a 	bl	c244 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    a3f0:	4d10      	ldr	r5, [pc, #64]	; (a434 <prepare_multithreading+0x4c>)
    a3f2:	4b11      	ldr	r3, [pc, #68]	; (a438 <prepare_multithreading+0x50>)
    a3f4:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a3f6:	4b11      	ldr	r3, [pc, #68]	; (a43c <prepare_multithreading+0x54>)
    a3f8:	9305      	str	r3, [sp, #20]
    a3fa:	2301      	movs	r3, #1
    a3fc:	9304      	str	r3, [sp, #16]
    a3fe:	2400      	movs	r4, #0
    a400:	9403      	str	r4, [sp, #12]
    a402:	9402      	str	r4, [sp, #8]
    a404:	9401      	str	r4, [sp, #4]
    a406:	9400      	str	r4, [sp, #0]
    a408:	4b0d      	ldr	r3, [pc, #52]	; (a440 <prepare_multithreading+0x58>)
    a40a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a40e:	490d      	ldr	r1, [pc, #52]	; (a444 <prepare_multithreading+0x5c>)
    a410:	4628      	mov	r0, r5
    a412:	f000 f9fd 	bl	a810 <z_setup_new_thread>
    a416:	4606      	mov	r6, r0
    a418:	7b6b      	ldrb	r3, [r5, #13]
    a41a:	f023 0304 	bic.w	r3, r3, #4
    a41e:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    a420:	4628      	mov	r0, r5
    a422:	f001 fa33 	bl	b88c <z_ready_thread>
	z_init_cpu(0);
    a426:	4620      	mov	r0, r4
    a428:	f7ff ffbc 	bl	a3a4 <z_init_cpu>
}
    a42c:	4630      	mov	r0, r6
    a42e:	b006      	add	sp, #24
    a430:	bd70      	pop	{r4, r5, r6, pc}
    a432:	bf00      	nop
    a434:	20004878 	.word	0x20004878
    a438:	2000d4e4 	.word	0x2000d4e4
    a43c:	00012ca8 	.word	0x00012ca8
    a440:	0000a345 	.word	0x0000a345
    a444:	2000ebe0 	.word	0x2000ebe0

0000a448 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    a448:	b500      	push	{lr}
    a44a:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    a44c:	4b1f      	ldr	r3, [pc, #124]	; (a4cc <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    a44e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    a452:	4c1f      	ldr	r4, [pc, #124]	; (a4d0 <z_cstart+0x88>)
    a454:	6963      	ldr	r3, [r4, #20]
    a456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a45a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a45c:	23e0      	movs	r3, #224	; 0xe0
    a45e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    a462:	2500      	movs	r5, #0
    a464:	77e5      	strb	r5, [r4, #31]
    a466:	7625      	strb	r5, [r4, #24]
    a468:	7665      	strb	r5, [r4, #25]
    a46a:	76a5      	strb	r5, [r4, #26]
    a46c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    a470:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a472:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    a476:	6263      	str	r3, [r4, #36]	; 0x24
    a478:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    a47c:	f7fc f90c 	bl	6698 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    a480:	f7fb fbd6 	bl	5c30 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    a484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a488:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    a48a:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    a48c:	f7fc fab8 	bl	6a00 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    a490:	f7fc f9b0 	bl	67f4 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    a494:	f7fa fcf0 	bl	4e78 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    a498:	2401      	movs	r4, #1
    a49a:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    a49e:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    a4a2:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    a4a4:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    a4a6:	4668      	mov	r0, sp
    a4a8:	f002 fdd2 	bl	d050 <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    a4ac:	4b09      	ldr	r3, [pc, #36]	; (a4d4 <z_cstart+0x8c>)
    a4ae:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    a4b2:	f7ff fe0f 	bl	a0d4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    a4b6:	4628      	mov	r0, r5
    a4b8:	f7ff fe18 	bl	a0ec <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    a4bc:	4620      	mov	r0, r4
    a4be:	f7ff fe15 	bl	a0ec <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    a4c2:	f7ff ff91 	bl	a3e8 <prepare_multithreading>
    a4c6:	f7ff ff57 	bl	a378 <switch_to_main_thread>
    a4ca:	bf00      	nop
    a4cc:	2000f980 	.word	0x2000f980
    a4d0:	e000ed00 	.word	0xe000ed00
    a4d4:	2000d4e4 	.word	0x2000d4e4

0000a4d8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    a4d8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a4da:	4c10      	ldr	r4, [pc, #64]	; (a51c <init_mem_slab_module+0x44>)
	int rc = 0;
    a4dc:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a4de:	e008      	b.n	a4f2 <init_mem_slab_module+0x1a>
    a4e0:	4b0f      	ldr	r3, [pc, #60]	; (a520 <init_mem_slab_module+0x48>)
    a4e2:	429c      	cmp	r4, r3
    a4e4:	d217      	bcs.n	a516 <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    a4e6:	4620      	mov	r0, r4
    a4e8:	f005 ff83 	bl	103f2 <create_free_list>
		if (rc < 0) {
    a4ec:	1e05      	subs	r5, r0, #0
    a4ee:	db12      	blt.n	a516 <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a4f0:	3420      	adds	r4, #32
    a4f2:	4b0b      	ldr	r3, [pc, #44]	; (a520 <init_mem_slab_module+0x48>)
    a4f4:	429c      	cmp	r4, r3
    a4f6:	d9f3      	bls.n	a4e0 <init_mem_slab_module+0x8>
    a4f8:	4e0a      	ldr	r6, [pc, #40]	; (a524 <init_mem_slab_module+0x4c>)
    a4fa:	233d      	movs	r3, #61	; 0x3d
    a4fc:	4632      	mov	r2, r6
    a4fe:	490a      	ldr	r1, [pc, #40]	; (a528 <init_mem_slab_module+0x50>)
    a500:	480a      	ldr	r0, [pc, #40]	; (a52c <init_mem_slab_module+0x54>)
    a502:	f004 fe0f 	bl	f124 <assert_print>
    a506:	480a      	ldr	r0, [pc, #40]	; (a530 <init_mem_slab_module+0x58>)
    a508:	f004 fe0c 	bl	f124 <assert_print>
    a50c:	213d      	movs	r1, #61	; 0x3d
    a50e:	4630      	mov	r0, r6
    a510:	f004 fe01 	bl	f116 <assert_post_action>
    a514:	e7e4      	b.n	a4e0 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    a516:	4628      	mov	r0, r5
    a518:	bd70      	pop	{r4, r5, r6, pc}
    a51a:	bf00      	nop
    a51c:	200041e0 	.word	0x200041e0
    a520:	200041e0 	.word	0x200041e0
    a524:	00012cb4 	.word	0x00012cb4
    a528:	00012cdc 	.word	0x00012cdc
    a52c:	00011514 	.word	0x00011514
    a530:	00012cfc 	.word	0x00012cfc

0000a534 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    a534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a538:	b082      	sub	sp, #8
    a53a:	4604      	mov	r4, r0
    a53c:	460e      	mov	r6, r1
    a53e:	4690      	mov	r8, r2
    a540:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    a542:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    a546:	f04f 0320 	mov.w	r3, #32
    a54a:	f3ef 8711 	mrs	r7, BASEPRI
    a54e:	f383 8812 	msr	BASEPRI_MAX, r3
    a552:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a556:	4628      	mov	r0, r5
    a558:	f000 f8d8 	bl	a70c <z_spin_lock_valid>
    a55c:	b1c0      	cbz	r0, a590 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    a55e:	4628      	mov	r0, r5
    a560:	f000 f8f4 	bl	a74c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    a564:	69a1      	ldr	r1, [r4, #24]
    a566:	b321      	cbz	r1, a5b2 <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    a568:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    a56a:	69a3      	ldr	r3, [r4, #24]
    a56c:	681b      	ldr	r3, [r3, #0]
    a56e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    a570:	69e3      	ldr	r3, [r4, #28]
    a572:	3301      	adds	r3, #1
    a574:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    a576:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a578:	4628      	mov	r0, r5
    a57a:	f000 f8d7 	bl	a72c <z_spin_unlock_valid>
    a57e:	b388      	cbz	r0, a5e4 <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    a580:	f387 8811 	msr	BASEPRI, r7
    a584:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    a588:	4620      	mov	r0, r4
    a58a:	b002      	add	sp, #8
    a58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a590:	f8df a070 	ldr.w	sl, [pc, #112]	; a604 <k_mem_slab_alloc+0xd0>
    a594:	238e      	movs	r3, #142	; 0x8e
    a596:	4652      	mov	r2, sl
    a598:	491b      	ldr	r1, [pc, #108]	; (a608 <k_mem_slab_alloc+0xd4>)
    a59a:	481c      	ldr	r0, [pc, #112]	; (a60c <k_mem_slab_alloc+0xd8>)
    a59c:	f004 fdc2 	bl	f124 <assert_print>
    a5a0:	4629      	mov	r1, r5
    a5a2:	481b      	ldr	r0, [pc, #108]	; (a610 <k_mem_slab_alloc+0xdc>)
    a5a4:	f004 fdbe 	bl	f124 <assert_print>
    a5a8:	218e      	movs	r1, #142	; 0x8e
    a5aa:	4650      	mov	r0, sl
    a5ac:	f004 fdb3 	bl	f116 <assert_post_action>
    a5b0:	e7d5      	b.n	a55e <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    a5b2:	ea59 0308 	orrs.w	r3, r9, r8
    a5b6:	d104      	bne.n	a5c2 <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    a5b8:	2300      	movs	r3, #0
    a5ba:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    a5bc:	f06f 040b 	mvn.w	r4, #11
    a5c0:	e7da      	b.n	a578 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    a5c2:	f8cd 8000 	str.w	r8, [sp]
    a5c6:	f8cd 9004 	str.w	r9, [sp, #4]
    a5ca:	4622      	mov	r2, r4
    a5cc:	4639      	mov	r1, r7
    a5ce:	4628      	mov	r0, r5
    a5d0:	f001 fb38 	bl	bc44 <z_pend_curr>
		if (result == 0) {
    a5d4:	4604      	mov	r4, r0
    a5d6:	2800      	cmp	r0, #0
    a5d8:	d1d6      	bne.n	a588 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    a5da:	4b0e      	ldr	r3, [pc, #56]	; (a614 <k_mem_slab_alloc+0xe0>)
    a5dc:	689b      	ldr	r3, [r3, #8]
    a5de:	695b      	ldr	r3, [r3, #20]
    a5e0:	6033      	str	r3, [r6, #0]
		return result;
    a5e2:	e7d1      	b.n	a588 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a5e4:	4e07      	ldr	r6, [pc, #28]	; (a604 <k_mem_slab_alloc+0xd0>)
    a5e6:	23b9      	movs	r3, #185	; 0xb9
    a5e8:	4632      	mov	r2, r6
    a5ea:	490b      	ldr	r1, [pc, #44]	; (a618 <k_mem_slab_alloc+0xe4>)
    a5ec:	4807      	ldr	r0, [pc, #28]	; (a60c <k_mem_slab_alloc+0xd8>)
    a5ee:	f004 fd99 	bl	f124 <assert_print>
    a5f2:	4629      	mov	r1, r5
    a5f4:	4809      	ldr	r0, [pc, #36]	; (a61c <k_mem_slab_alloc+0xe8>)
    a5f6:	f004 fd95 	bl	f124 <assert_print>
    a5fa:	21b9      	movs	r1, #185	; 0xb9
    a5fc:	4630      	mov	r0, r6
    a5fe:	f004 fd8a 	bl	f116 <assert_post_action>
    a602:	e7bd      	b.n	a580 <k_mem_slab_alloc+0x4c>
    a604:	000116c0 	.word	0x000116c0
    a608:	00011720 	.word	0x00011720
    a60c:	00011514 	.word	0x00011514
    a610:	00011738 	.word	0x00011738
    a614:	2000d4e4 	.word	0x2000d4e4
    a618:	000116f0 	.word	0x000116f0
    a61c:	00011708 	.word	0x00011708

0000a620 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    a620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a624:	4604      	mov	r4, r0
    a626:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    a628:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    a62c:	f04f 0320 	mov.w	r3, #32
    a630:	f3ef 8711 	mrs	r7, BASEPRI
    a634:	f383 8812 	msr	BASEPRI_MAX, r3
    a638:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a63c:	4630      	mov	r0, r6
    a63e:	f000 f865 	bl	a70c <z_spin_lock_valid>
    a642:	b1b0      	cbz	r0, a672 <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    a644:	4630      	mov	r0, r6
    a646:	f000 f881 	bl	a74c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    a64a:	69a3      	ldr	r3, [r4, #24]
    a64c:	b313      	cbz	r3, a694 <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    a64e:	682b      	ldr	r3, [r5, #0]
    a650:	69a2      	ldr	r2, [r4, #24]
    a652:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    a654:	682b      	ldr	r3, [r5, #0]
    a656:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    a658:	69e3      	ldr	r3, [r4, #28]
    a65a:	3b01      	subs	r3, #1
    a65c:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a65e:	4630      	mov	r0, r6
    a660:	f000 f864 	bl	a72c <z_spin_unlock_valid>
    a664:	b338      	cbz	r0, a6b6 <k_mem_slab_free+0x96>
	__asm__ volatile(
    a666:	f387 8811 	msr	BASEPRI, r7
    a66a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    a66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a672:	f8df 8064 	ldr.w	r8, [pc, #100]	; a6d8 <k_mem_slab_free+0xb8>
    a676:	238e      	movs	r3, #142	; 0x8e
    a678:	4642      	mov	r2, r8
    a67a:	4918      	ldr	r1, [pc, #96]	; (a6dc <k_mem_slab_free+0xbc>)
    a67c:	4818      	ldr	r0, [pc, #96]	; (a6e0 <k_mem_slab_free+0xc0>)
    a67e:	f004 fd51 	bl	f124 <assert_print>
    a682:	4631      	mov	r1, r6
    a684:	4817      	ldr	r0, [pc, #92]	; (a6e4 <k_mem_slab_free+0xc4>)
    a686:	f004 fd4d 	bl	f124 <assert_print>
    a68a:	218e      	movs	r1, #142	; 0x8e
    a68c:	4640      	mov	r0, r8
    a68e:	f004 fd42 	bl	f116 <assert_post_action>
    a692:	e7d7      	b.n	a644 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    a694:	4620      	mov	r0, r4
    a696:	f001 fd71 	bl	c17c <z_unpend_first_thread>
		if (pending_thread != NULL) {
    a69a:	2800      	cmp	r0, #0
    a69c:	d0d7      	beq.n	a64e <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    a69e:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    a6a0:	2100      	movs	r1, #0
    a6a2:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    a6a6:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    a6a8:	f001 f8f0 	bl	b88c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    a6ac:	4639      	mov	r1, r7
    a6ae:	4630      	mov	r0, r6
    a6b0:	f000 fe48 	bl	b344 <z_reschedule>
			return;
    a6b4:	e7db      	b.n	a66e <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a6b6:	4c08      	ldr	r4, [pc, #32]	; (a6d8 <k_mem_slab_free+0xb8>)
    a6b8:	23b9      	movs	r3, #185	; 0xb9
    a6ba:	4622      	mov	r2, r4
    a6bc:	490a      	ldr	r1, [pc, #40]	; (a6e8 <k_mem_slab_free+0xc8>)
    a6be:	4808      	ldr	r0, [pc, #32]	; (a6e0 <k_mem_slab_free+0xc0>)
    a6c0:	f004 fd30 	bl	f124 <assert_print>
    a6c4:	4631      	mov	r1, r6
    a6c6:	4809      	ldr	r0, [pc, #36]	; (a6ec <k_mem_slab_free+0xcc>)
    a6c8:	f004 fd2c 	bl	f124 <assert_print>
    a6cc:	21b9      	movs	r1, #185	; 0xb9
    a6ce:	4620      	mov	r0, r4
    a6d0:	f004 fd21 	bl	f116 <assert_post_action>
    a6d4:	e7c7      	b.n	a666 <k_mem_slab_free+0x46>
    a6d6:	bf00      	nop
    a6d8:	000116c0 	.word	0x000116c0
    a6dc:	00011720 	.word	0x00011720
    a6e0:	00011514 	.word	0x00011514
    a6e4:	00011738 	.word	0x00011738
    a6e8:	000116f0 	.word	0x000116f0
    a6ec:	00011708 	.word	0x00011708

0000a6f0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    a6f0:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a6f2:	ea53 0102 	orrs.w	r1, r3, r2
    a6f6:	d102      	bne.n	a6fe <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    a6f8:	f005 febb 	bl	10472 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    a6fc:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a6fe:	4902      	ldr	r1, [pc, #8]	; (a708 <schedule_new_thread+0x18>)
    a700:	3018      	adds	r0, #24
    a702:	f002 f86d 	bl	c7e0 <z_add_timeout>
    a706:	e7f9      	b.n	a6fc <schedule_new_thread+0xc>
    a708:	0000b9e9 	.word	0x0000b9e9

0000a70c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    a70c:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    a70e:	b13b      	cbz	r3, a720 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    a710:	f003 0303 	and.w	r3, r3, #3
    a714:	4a04      	ldr	r2, [pc, #16]	; (a728 <z_spin_lock_valid+0x1c>)
    a716:	7d12      	ldrb	r2, [r2, #20]
    a718:	4293      	cmp	r3, r2
    a71a:	d003      	beq.n	a724 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    a71c:	2001      	movs	r0, #1
    a71e:	4770      	bx	lr
    a720:	2001      	movs	r0, #1
    a722:	4770      	bx	lr
			return false;
    a724:	2000      	movs	r0, #0
}
    a726:	4770      	bx	lr
    a728:	2000d4e4 	.word	0x2000d4e4

0000a72c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    a72c:	6801      	ldr	r1, [r0, #0]
    a72e:	4a06      	ldr	r2, [pc, #24]	; (a748 <z_spin_unlock_valid+0x1c>)
    a730:	7d13      	ldrb	r3, [r2, #20]
    a732:	6892      	ldr	r2, [r2, #8]
    a734:	4313      	orrs	r3, r2
    a736:	4299      	cmp	r1, r3
    a738:	d103      	bne.n	a742 <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    a73a:	2300      	movs	r3, #0
    a73c:	6003      	str	r3, [r0, #0]
	return true;
    a73e:	2001      	movs	r0, #1
    a740:	4770      	bx	lr
		return false;
    a742:	2000      	movs	r0, #0
}
    a744:	4770      	bx	lr
    a746:	bf00      	nop
    a748:	2000d4e4 	.word	0x2000d4e4

0000a74c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    a74c:	4a02      	ldr	r2, [pc, #8]	; (a758 <z_spin_lock_set_owner+0xc>)
    a74e:	7d13      	ldrb	r3, [r2, #20]
    a750:	6892      	ldr	r2, [r2, #8]
    a752:	4313      	orrs	r3, r2
    a754:	6003      	str	r3, [r0, #0]
}
    a756:	4770      	bx	lr
    a758:	2000d4e4 	.word	0x2000d4e4

0000a75c <z_thread_monitor_exit>:
{
    a75c:	b570      	push	{r4, r5, r6, lr}
    a75e:	4604      	mov	r4, r0
	__asm__ volatile(
    a760:	f04f 0320 	mov.w	r3, #32
    a764:	f3ef 8511 	mrs	r5, BASEPRI
    a768:	f383 8812 	msr	BASEPRI_MAX, r3
    a76c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a770:	481f      	ldr	r0, [pc, #124]	; (a7f0 <z_thread_monitor_exit+0x94>)
    a772:	f7ff ffcb 	bl	a70c <z_spin_lock_valid>
    a776:	b150      	cbz	r0, a78e <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    a778:	481d      	ldr	r0, [pc, #116]	; (a7f0 <z_thread_monitor_exit+0x94>)
    a77a:	f7ff ffe7 	bl	a74c <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    a77e:	4b1d      	ldr	r3, [pc, #116]	; (a7f4 <z_thread_monitor_exit+0x98>)
    a780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a782:	42a3      	cmp	r3, r4
    a784:	d114      	bne.n	a7b0 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    a786:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    a788:	4b1a      	ldr	r3, [pc, #104]	; (a7f4 <z_thread_monitor_exit+0x98>)
    a78a:	629a      	str	r2, [r3, #40]	; 0x28
    a78c:	e017      	b.n	a7be <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a78e:	4e1a      	ldr	r6, [pc, #104]	; (a7f8 <z_thread_monitor_exit+0x9c>)
    a790:	238e      	movs	r3, #142	; 0x8e
    a792:	4632      	mov	r2, r6
    a794:	4919      	ldr	r1, [pc, #100]	; (a7fc <z_thread_monitor_exit+0xa0>)
    a796:	481a      	ldr	r0, [pc, #104]	; (a800 <z_thread_monitor_exit+0xa4>)
    a798:	f004 fcc4 	bl	f124 <assert_print>
    a79c:	4914      	ldr	r1, [pc, #80]	; (a7f0 <z_thread_monitor_exit+0x94>)
    a79e:	4819      	ldr	r0, [pc, #100]	; (a804 <z_thread_monitor_exit+0xa8>)
    a7a0:	f004 fcc0 	bl	f124 <assert_print>
    a7a4:	218e      	movs	r1, #142	; 0x8e
    a7a6:	4630      	mov	r0, r6
    a7a8:	f004 fcb5 	bl	f116 <assert_post_action>
    a7ac:	e7e4      	b.n	a778 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    a7ae:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    a7b0:	b113      	cbz	r3, a7b8 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    a7b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    a7b4:	42a2      	cmp	r2, r4
    a7b6:	d1fa      	bne.n	a7ae <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    a7b8:	b10b      	cbz	r3, a7be <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    a7ba:	6f22      	ldr	r2, [r4, #112]	; 0x70
    a7bc:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a7be:	480c      	ldr	r0, [pc, #48]	; (a7f0 <z_thread_monitor_exit+0x94>)
    a7c0:	f7ff ffb4 	bl	a72c <z_spin_unlock_valid>
    a7c4:	b120      	cbz	r0, a7d0 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    a7c6:	f385 8811 	msr	BASEPRI, r5
    a7ca:	f3bf 8f6f 	isb	sy
}
    a7ce:	bd70      	pop	{r4, r5, r6, pc}
    a7d0:	4c09      	ldr	r4, [pc, #36]	; (a7f8 <z_thread_monitor_exit+0x9c>)
    a7d2:	23b9      	movs	r3, #185	; 0xb9
    a7d4:	4622      	mov	r2, r4
    a7d6:	490c      	ldr	r1, [pc, #48]	; (a808 <z_thread_monitor_exit+0xac>)
    a7d8:	4809      	ldr	r0, [pc, #36]	; (a800 <z_thread_monitor_exit+0xa4>)
    a7da:	f004 fca3 	bl	f124 <assert_print>
    a7de:	4904      	ldr	r1, [pc, #16]	; (a7f0 <z_thread_monitor_exit+0x94>)
    a7e0:	480a      	ldr	r0, [pc, #40]	; (a80c <z_thread_monitor_exit+0xb0>)
    a7e2:	f004 fc9f 	bl	f124 <assert_print>
    a7e6:	21b9      	movs	r1, #185	; 0xb9
    a7e8:	4620      	mov	r0, r4
    a7ea:	f004 fc94 	bl	f116 <assert_post_action>
    a7ee:	e7ea      	b.n	a7c6 <z_thread_monitor_exit+0x6a>
    a7f0:	2000d510 	.word	0x2000d510
    a7f4:	2000d4e4 	.word	0x2000d4e4
    a7f8:	000116c0 	.word	0x000116c0
    a7fc:	00011720 	.word	0x00011720
    a800:	00011514 	.word	0x00011514
    a804:	00011738 	.word	0x00011738
    a808:	000116f0 	.word	0x000116f0
    a80c:	00011708 	.word	0x00011708

0000a810 <z_setup_new_thread>:
{
    a810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a814:	b085      	sub	sp, #20
    a816:	4604      	mov	r4, r0
    a818:	460e      	mov	r6, r1
    a81a:	4690      	mov	r8, r2
    a81c:	461d      	mov	r5, r3
    a81e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    a822:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    a826:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    a828:	2f0f      	cmp	r7, #15
    a82a:	d05e      	beq.n	a8ea <z_setup_new_thread+0xda>
    a82c:	f107 0310 	add.w	r3, r7, #16
    a830:	2b1e      	cmp	r3, #30
    a832:	d85e      	bhi.n	a8f2 <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    a834:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    a838:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    a83a:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    a83c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a83e:	2204      	movs	r2, #4
    a840:	4639      	mov	r1, r7
    a842:	4620      	mov	r0, r4
    a844:	f005 fe19 	bl	1047a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    a848:	4642      	mov	r2, r8
    a84a:	4631      	mov	r1, r6
    a84c:	4620      	mov	r0, r4
    a84e:	f005 fdf6 	bl	1043e <setup_thread_stack>
    a852:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a854:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a856:	9302      	str	r3, [sp, #8]
    a858:	f8cd a004 	str.w	sl, [sp, #4]
    a85c:	f8cd b000 	str.w	fp, [sp]
    a860:	462b      	mov	r3, r5
    a862:	4602      	mov	r2, r0
    a864:	4631      	mov	r1, r6
    a866:	4620      	mov	r0, r4
    a868:	f7fb fb14 	bl	5e94 <arch_new_thread>
	new_thread->init_data = NULL;
    a86c:	2300      	movs	r3, #0
    a86e:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    a870:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    a872:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    a876:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    a87a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a87c:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    a87e:	f04f 0320 	mov.w	r3, #32
    a882:	f3ef 8611 	mrs	r6, BASEPRI
    a886:	f383 8812 	msr	BASEPRI_MAX, r3
    a88a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a88e:	4837      	ldr	r0, [pc, #220]	; (a96c <z_setup_new_thread+0x15c>)
    a890:	f7ff ff3c 	bl	a70c <z_spin_lock_valid>
    a894:	2800      	cmp	r0, #0
    a896:	d042      	beq.n	a91e <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    a898:	4d34      	ldr	r5, [pc, #208]	; (a96c <z_setup_new_thread+0x15c>)
    a89a:	4628      	mov	r0, r5
    a89c:	f7ff ff56 	bl	a74c <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    a8a0:	4b33      	ldr	r3, [pc, #204]	; (a970 <z_setup_new_thread+0x160>)
    a8a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a8a4:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    a8a6:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a8a8:	4628      	mov	r0, r5
    a8aa:	f7ff ff3f 	bl	a72c <z_spin_unlock_valid>
    a8ae:	2800      	cmp	r0, #0
    a8b0:	d045      	beq.n	a93e <z_setup_new_thread+0x12e>
	__asm__ volatile(
    a8b2:	f386 8811 	msr	BASEPRI, r6
    a8b6:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    a8ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a8bc:	2b00      	cmp	r3, #0
    a8be:	d04e      	beq.n	a95e <z_setup_new_thread+0x14e>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    a8c0:	221f      	movs	r2, #31
    a8c2:	4619      	mov	r1, r3
    a8c4:	f104 0074 	add.w	r0, r4, #116	; 0x74
    a8c8:	f005 fedb 	bl	10682 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    a8cc:	2300      	movs	r3, #0
    a8ce:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    a8d2:	4b27      	ldr	r3, [pc, #156]	; (a970 <z_setup_new_thread+0x160>)
    a8d4:	689b      	ldr	r3, [r3, #8]
    a8d6:	2b00      	cmp	r3, #0
    a8d8:	d045      	beq.n	a966 <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    a8da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    a8de:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    a8e2:	4638      	mov	r0, r7
    a8e4:	b005      	add	sp, #20
    a8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    a8ea:	4b22      	ldr	r3, [pc, #136]	; (a974 <z_setup_new_thread+0x164>)
    a8ec:	429d      	cmp	r5, r3
    a8ee:	d19d      	bne.n	a82c <z_setup_new_thread+0x1c>
    a8f0:	e7a0      	b.n	a834 <z_setup_new_thread+0x24>
    a8f2:	f8df 9084 	ldr.w	r9, [pc, #132]	; a978 <z_setup_new_thread+0x168>
    a8f6:	f240 13ff 	movw	r3, #511	; 0x1ff
    a8fa:	464a      	mov	r2, r9
    a8fc:	491f      	ldr	r1, [pc, #124]	; (a97c <z_setup_new_thread+0x16c>)
    a8fe:	4820      	ldr	r0, [pc, #128]	; (a980 <z_setup_new_thread+0x170>)
    a900:	f004 fc10 	bl	f124 <assert_print>
    a904:	f06f 030f 	mvn.w	r3, #15
    a908:	220e      	movs	r2, #14
    a90a:	4639      	mov	r1, r7
    a90c:	481d      	ldr	r0, [pc, #116]	; (a984 <z_setup_new_thread+0x174>)
    a90e:	f004 fc09 	bl	f124 <assert_print>
    a912:	f240 11ff 	movw	r1, #511	; 0x1ff
    a916:	4648      	mov	r0, r9
    a918:	f004 fbfd 	bl	f116 <assert_post_action>
    a91c:	e78a      	b.n	a834 <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a91e:	4d1a      	ldr	r5, [pc, #104]	; (a988 <z_setup_new_thread+0x178>)
    a920:	238e      	movs	r3, #142	; 0x8e
    a922:	462a      	mov	r2, r5
    a924:	4919      	ldr	r1, [pc, #100]	; (a98c <z_setup_new_thread+0x17c>)
    a926:	4816      	ldr	r0, [pc, #88]	; (a980 <z_setup_new_thread+0x170>)
    a928:	f004 fbfc 	bl	f124 <assert_print>
    a92c:	490f      	ldr	r1, [pc, #60]	; (a96c <z_setup_new_thread+0x15c>)
    a92e:	4818      	ldr	r0, [pc, #96]	; (a990 <z_setup_new_thread+0x180>)
    a930:	f004 fbf8 	bl	f124 <assert_print>
    a934:	218e      	movs	r1, #142	; 0x8e
    a936:	4628      	mov	r0, r5
    a938:	f004 fbed 	bl	f116 <assert_post_action>
    a93c:	e7ac      	b.n	a898 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a93e:	4d12      	ldr	r5, [pc, #72]	; (a988 <z_setup_new_thread+0x178>)
    a940:	23b9      	movs	r3, #185	; 0xb9
    a942:	462a      	mov	r2, r5
    a944:	4913      	ldr	r1, [pc, #76]	; (a994 <z_setup_new_thread+0x184>)
    a946:	480e      	ldr	r0, [pc, #56]	; (a980 <z_setup_new_thread+0x170>)
    a948:	f004 fbec 	bl	f124 <assert_print>
    a94c:	4907      	ldr	r1, [pc, #28]	; (a96c <z_setup_new_thread+0x15c>)
    a94e:	4812      	ldr	r0, [pc, #72]	; (a998 <z_setup_new_thread+0x188>)
    a950:	f004 fbe8 	bl	f124 <assert_print>
    a954:	21b9      	movs	r1, #185	; 0xb9
    a956:	4628      	mov	r0, r5
    a958:	f004 fbdd 	bl	f116 <assert_post_action>
    a95c:	e7a9      	b.n	a8b2 <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    a95e:	2300      	movs	r3, #0
    a960:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    a964:	e7b5      	b.n	a8d2 <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    a966:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    a96a:	e7ba      	b.n	a8e2 <z_setup_new_thread+0xd2>
    a96c:	2000d510 	.word	0x2000d510
    a970:	2000d4e4 	.word	0x2000d4e4
    a974:	0000ab25 	.word	0x0000ab25
    a978:	00012d1c 	.word	0x00012d1c
    a97c:	00012d74 	.word	0x00012d74
    a980:	00011514 	.word	0x00011514
    a984:	00012df4 	.word	0x00012df4
    a988:	000116c0 	.word	0x000116c0
    a98c:	00011720 	.word	0x00011720
    a990:	00011738 	.word	0x00011738
    a994:	000116f0 	.word	0x000116f0
    a998:	00011708 	.word	0x00011708

0000a99c <z_impl_k_thread_create>:
{
    a99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a9a0:	b086      	sub	sp, #24
    a9a2:	4604      	mov	r4, r0
    a9a4:	460d      	mov	r5, r1
    a9a6:	4616      	mov	r6, r2
    a9a8:	461f      	mov	r7, r3
    a9aa:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    a9ae:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a9b2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    a9b6:	b9db      	cbnz	r3, a9f0 <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a9b8:	2300      	movs	r3, #0
    a9ba:	9305      	str	r3, [sp, #20]
    a9bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a9be:	9304      	str	r3, [sp, #16]
    a9c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a9c2:	9303      	str	r3, [sp, #12]
    a9c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a9c6:	9302      	str	r3, [sp, #8]
    a9c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a9ca:	9301      	str	r3, [sp, #4]
    a9cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a9ce:	9300      	str	r3, [sp, #0]
    a9d0:	463b      	mov	r3, r7
    a9d2:	4632      	mov	r2, r6
    a9d4:	4629      	mov	r1, r5
    a9d6:	4620      	mov	r0, r4
    a9d8:	f7ff ff1a 	bl	a810 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    a9dc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    a9e0:	bf08      	it	eq
    a9e2:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    a9e6:	d115      	bne.n	aa14 <z_impl_k_thread_create+0x78>
}
    a9e8:	4620      	mov	r0, r4
    a9ea:	b006      	add	sp, #24
    a9ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    a9f0:	f8df a02c 	ldr.w	sl, [pc, #44]	; aa20 <z_impl_k_thread_create+0x84>
    a9f4:	f240 236e 	movw	r3, #622	; 0x26e
    a9f8:	4652      	mov	r2, sl
    a9fa:	490a      	ldr	r1, [pc, #40]	; (aa24 <z_impl_k_thread_create+0x88>)
    a9fc:	480a      	ldr	r0, [pc, #40]	; (aa28 <z_impl_k_thread_create+0x8c>)
    a9fe:	f004 fb91 	bl	f124 <assert_print>
    aa02:	480a      	ldr	r0, [pc, #40]	; (aa2c <z_impl_k_thread_create+0x90>)
    aa04:	f004 fb8e 	bl	f124 <assert_print>
    aa08:	f240 216e 	movw	r1, #622	; 0x26e
    aa0c:	4650      	mov	r0, sl
    aa0e:	f004 fb82 	bl	f116 <assert_post_action>
    aa12:	e7d1      	b.n	a9b8 <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    aa14:	464a      	mov	r2, r9
    aa16:	4643      	mov	r3, r8
    aa18:	4620      	mov	r0, r4
    aa1a:	f7ff fe69 	bl	a6f0 <schedule_new_thread>
    aa1e:	e7e3      	b.n	a9e8 <z_impl_k_thread_create+0x4c>
    aa20:	00012d1c 	.word	0x00012d1c
    aa24:	00012e28 	.word	0x00012e28
    aa28:	00011514 	.word	0x00011514
    aa2c:	00012e3c 	.word	0x00012e3c

0000aa30 <z_init_static_threads>:
{
    aa30:	b530      	push	{r4, r5, lr}
    aa32:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    aa34:	4c35      	ldr	r4, [pc, #212]	; (ab0c <z_init_static_threads+0xdc>)
    aa36:	e017      	b.n	aa68 <z_init_static_threads+0x38>
    aa38:	4b35      	ldr	r3, [pc, #212]	; (ab10 <z_init_static_threads+0xe0>)
    aa3a:	429c      	cmp	r4, r3
    aa3c:	d228      	bcs.n	aa90 <z_init_static_threads+0x60>
		z_setup_new_thread(
    aa3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    aa40:	9305      	str	r3, [sp, #20]
    aa42:	6a23      	ldr	r3, [r4, #32]
    aa44:	9304      	str	r3, [sp, #16]
    aa46:	69e3      	ldr	r3, [r4, #28]
    aa48:	9303      	str	r3, [sp, #12]
    aa4a:	69a3      	ldr	r3, [r4, #24]
    aa4c:	9302      	str	r3, [sp, #8]
    aa4e:	6963      	ldr	r3, [r4, #20]
    aa50:	9301      	str	r3, [sp, #4]
    aa52:	6923      	ldr	r3, [r4, #16]
    aa54:	9300      	str	r3, [sp, #0]
    aa56:	68e3      	ldr	r3, [r4, #12]
    aa58:	68a2      	ldr	r2, [r4, #8]
    aa5a:	6861      	ldr	r1, [r4, #4]
    aa5c:	6820      	ldr	r0, [r4, #0]
    aa5e:	f7ff fed7 	bl	a810 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    aa62:	6823      	ldr	r3, [r4, #0]
    aa64:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    aa66:	3430      	adds	r4, #48	; 0x30
    aa68:	4b29      	ldr	r3, [pc, #164]	; (ab10 <z_init_static_threads+0xe0>)
    aa6a:	429c      	cmp	r4, r3
    aa6c:	d9e4      	bls.n	aa38 <z_init_static_threads+0x8>
    aa6e:	4d29      	ldr	r5, [pc, #164]	; (ab14 <z_init_static_threads+0xe4>)
    aa70:	f240 23d5 	movw	r3, #725	; 0x2d5
    aa74:	462a      	mov	r2, r5
    aa76:	4928      	ldr	r1, [pc, #160]	; (ab18 <z_init_static_threads+0xe8>)
    aa78:	4828      	ldr	r0, [pc, #160]	; (ab1c <z_init_static_threads+0xec>)
    aa7a:	f004 fb53 	bl	f124 <assert_print>
    aa7e:	4828      	ldr	r0, [pc, #160]	; (ab20 <z_init_static_threads+0xf0>)
    aa80:	f004 fb50 	bl	f124 <assert_print>
    aa84:	f240 21d5 	movw	r1, #725	; 0x2d5
    aa88:	4628      	mov	r0, r5
    aa8a:	f004 fb44 	bl	f116 <assert_post_action>
    aa8e:	e7d3      	b.n	aa38 <z_init_static_threads+0x8>
	k_sched_lock();
    aa90:	f000 fca6 	bl	b3e0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    aa94:	4c1d      	ldr	r4, [pc, #116]	; (ab0c <z_init_static_threads+0xdc>)
    aa96:	e000      	b.n	aa9a <z_init_static_threads+0x6a>
    aa98:	3430      	adds	r4, #48	; 0x30
    aa9a:	4b1d      	ldr	r3, [pc, #116]	; (ab10 <z_init_static_threads+0xe0>)
    aa9c:	429c      	cmp	r4, r3
    aa9e:	d81f      	bhi.n	aae0 <z_init_static_threads+0xb0>
    aaa0:	4b1b      	ldr	r3, [pc, #108]	; (ab10 <z_init_static_threads+0xe0>)
    aaa2:	429c      	cmp	r4, r3
    aaa4:	d22d      	bcs.n	ab02 <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    aaa6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    aaa8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    aaac:	d0f4      	beq.n	aa98 <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    aaae:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    aab0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    aab4:	17c1      	asrs	r1, r0, #31
    aab6:	03c9      	lsls	r1, r1, #15
    aab8:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    aabc:	03c0      	lsls	r0, r0, #15
    aabe:	f240 33e7 	movw	r3, #999	; 0x3e7
    aac2:	18c0      	adds	r0, r0, r3
    aac4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    aac8:	f04f 0300 	mov.w	r3, #0
    aacc:	f141 0100 	adc.w	r1, r1, #0
    aad0:	f7f5 ff84 	bl	9dc <__aeabi_uldivmod>
    aad4:	4602      	mov	r2, r0
    aad6:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    aad8:	4628      	mov	r0, r5
    aada:	f7ff fe09 	bl	a6f0 <schedule_new_thread>
    aade:	e7db      	b.n	aa98 <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    aae0:	4d0c      	ldr	r5, [pc, #48]	; (ab14 <z_init_static_threads+0xe4>)
    aae2:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    aae6:	462a      	mov	r2, r5
    aae8:	490b      	ldr	r1, [pc, #44]	; (ab18 <z_init_static_threads+0xe8>)
    aaea:	480c      	ldr	r0, [pc, #48]	; (ab1c <z_init_static_threads+0xec>)
    aaec:	f004 fb1a 	bl	f124 <assert_print>
    aaf0:	480b      	ldr	r0, [pc, #44]	; (ab20 <z_init_static_threads+0xf0>)
    aaf2:	f004 fb17 	bl	f124 <assert_print>
    aaf6:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    aafa:	4628      	mov	r0, r5
    aafc:	f004 fb0b 	bl	f116 <assert_post_action>
    ab00:	e7ce      	b.n	aaa0 <z_init_static_threads+0x70>
	k_sched_unlock();
    ab02:	f001 f9f9 	bl	bef8 <k_sched_unlock>
}
    ab06:	b007      	add	sp, #28
    ab08:	bd30      	pop	{r4, r5, pc}
    ab0a:	bf00      	nop
    ab0c:	200041e0 	.word	0x200041e0
    ab10:	200041e0 	.word	0x200041e0
    ab14:	00012d1c 	.word	0x00012d1c
    ab18:	00012e64 	.word	0x00012e64
    ab1c:	00011514 	.word	0x00011514
    ab20:	00012cfc 	.word	0x00012cfc

0000ab24 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    ab24:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    ab26:	4b14      	ldr	r3, [pc, #80]	; (ab78 <idle+0x54>)
    ab28:	689b      	ldr	r3, [r3, #8]
    ab2a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    ab2e:	2b00      	cmp	r3, #0
    ab30:	da0d      	bge.n	ab4e <idle+0x2a>
    ab32:	4c12      	ldr	r4, [pc, #72]	; (ab7c <idle+0x58>)
    ab34:	2327      	movs	r3, #39	; 0x27
    ab36:	4622      	mov	r2, r4
    ab38:	4911      	ldr	r1, [pc, #68]	; (ab80 <idle+0x5c>)
    ab3a:	4812      	ldr	r0, [pc, #72]	; (ab84 <idle+0x60>)
    ab3c:	f004 faf2 	bl	f124 <assert_print>
    ab40:	2127      	movs	r1, #39	; 0x27
    ab42:	4620      	mov	r0, r4
    ab44:	f004 fae7 	bl	f116 <assert_post_action>
    ab48:	e001      	b.n	ab4e <idle+0x2a>
	arch_cpu_idle();
    ab4a:	f7fb f877 	bl	5c3c <arch_cpu_idle>
	__asm__ volatile(
    ab4e:	f04f 0220 	mov.w	r2, #32
    ab52:	f3ef 8311 	mrs	r3, BASEPRI
    ab56:	f382 8812 	msr	BASEPRI_MAX, r2
    ab5a:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    ab5e:	f001 ff7d 	bl	ca5c <z_get_next_timeout_expiry>
    ab62:	4b05      	ldr	r3, [pc, #20]	; (ab78 <idle+0x54>)
    ab64:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    ab66:	4b08      	ldr	r3, [pc, #32]	; (ab88 <idle+0x64>)
    ab68:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    ab6a:	2b00      	cmp	r3, #0
    ab6c:	d0ed      	beq.n	ab4a <idle+0x26>
    ab6e:	f7fa fe2d 	bl	57cc <pm_system_suspend>
    ab72:	2800      	cmp	r0, #0
    ab74:	d1eb      	bne.n	ab4e <idle+0x2a>
    ab76:	e7e8      	b.n	ab4a <idle+0x26>
    ab78:	2000d4e4 	.word	0x2000d4e4
    ab7c:	00012e94 	.word	0x00012e94
    ab80:	00012eb8 	.word	0x00012eb8
    ab84:	00011514 	.word	0x00011514
    ab88:	2000d725 	.word	0x2000d725

0000ab8c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    ab8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ab90:	b083      	sub	sp, #12
    ab92:	4604      	mov	r4, r0
    ab94:	4616      	mov	r6, r2
    ab96:	461d      	mov	r5, r3
    ab98:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    ab9c:	2900      	cmp	r1, #0
    ab9e:	d12b      	bne.n	abf8 <z_impl_k_mutex_lock+0x6c>
    aba0:	f04f 0320 	mov.w	r3, #32
    aba4:	f3ef 8711 	mrs	r7, BASEPRI
    aba8:	f383 8812 	msr	BASEPRI_MAX, r3
    abac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    abb0:	487b      	ldr	r0, [pc, #492]	; (ada0 <z_impl_k_mutex_lock+0x214>)
    abb2:	f7ff fdab 	bl	a70c <z_spin_lock_valid>
    abb6:	2800      	cmp	r0, #0
    abb8:	d02d      	beq.n	ac16 <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    abba:	4879      	ldr	r0, [pc, #484]	; (ada0 <z_impl_k_mutex_lock+0x214>)
    abbc:	f7ff fdc6 	bl	a74c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    abc0:	68e1      	ldr	r1, [r4, #12]
    abc2:	2900      	cmp	r1, #0
    abc4:	d138      	bne.n	ac38 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    abc6:	2900      	cmp	r1, #0
    abc8:	d17d      	bne.n	acc6 <z_impl_k_mutex_lock+0x13a>
    abca:	4b76      	ldr	r3, [pc, #472]	; (ada4 <z_impl_k_mutex_lock+0x218>)
    abcc:	689b      	ldr	r3, [r3, #8]
    abce:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    abd2:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    abd4:	3101      	adds	r1, #1
    abd6:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    abd8:	4b72      	ldr	r3, [pc, #456]	; (ada4 <z_impl_k_mutex_lock+0x218>)
    abda:	689b      	ldr	r3, [r3, #8]
    abdc:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    abde:	4870      	ldr	r0, [pc, #448]	; (ada0 <z_impl_k_mutex_lock+0x214>)
    abe0:	f7ff fda4 	bl	a72c <z_spin_unlock_valid>
    abe4:	2800      	cmp	r0, #0
    abe6:	d070      	beq.n	acca <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    abe8:	f387 8811 	msr	BASEPRI, r7
    abec:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    abf0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    abf2:	b003      	add	sp, #12
    abf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    abf8:	4f6b      	ldr	r7, [pc, #428]	; (ada8 <z_impl_k_mutex_lock+0x21c>)
    abfa:	2365      	movs	r3, #101	; 0x65
    abfc:	463a      	mov	r2, r7
    abfe:	496b      	ldr	r1, [pc, #428]	; (adac <z_impl_k_mutex_lock+0x220>)
    ac00:	486b      	ldr	r0, [pc, #428]	; (adb0 <z_impl_k_mutex_lock+0x224>)
    ac02:	f004 fa8f 	bl	f124 <assert_print>
    ac06:	486b      	ldr	r0, [pc, #428]	; (adb4 <z_impl_k_mutex_lock+0x228>)
    ac08:	f004 fa8c 	bl	f124 <assert_print>
    ac0c:	2165      	movs	r1, #101	; 0x65
    ac0e:	4638      	mov	r0, r7
    ac10:	f004 fa81 	bl	f116 <assert_post_action>
    ac14:	e7c4      	b.n	aba0 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ac16:	f8df 81a0 	ldr.w	r8, [pc, #416]	; adb8 <z_impl_k_mutex_lock+0x22c>
    ac1a:	238e      	movs	r3, #142	; 0x8e
    ac1c:	4642      	mov	r2, r8
    ac1e:	4967      	ldr	r1, [pc, #412]	; (adbc <z_impl_k_mutex_lock+0x230>)
    ac20:	4863      	ldr	r0, [pc, #396]	; (adb0 <z_impl_k_mutex_lock+0x224>)
    ac22:	f004 fa7f 	bl	f124 <assert_print>
    ac26:	495e      	ldr	r1, [pc, #376]	; (ada0 <z_impl_k_mutex_lock+0x214>)
    ac28:	4865      	ldr	r0, [pc, #404]	; (adc0 <z_impl_k_mutex_lock+0x234>)
    ac2a:	f004 fa7b 	bl	f124 <assert_print>
    ac2e:	218e      	movs	r1, #142	; 0x8e
    ac30:	4640      	mov	r0, r8
    ac32:	f004 fa70 	bl	f116 <assert_post_action>
    ac36:	e7c0      	b.n	abba <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    ac38:	68a2      	ldr	r2, [r4, #8]
    ac3a:	4b5a      	ldr	r3, [pc, #360]	; (ada4 <z_impl_k_mutex_lock+0x218>)
    ac3c:	689b      	ldr	r3, [r3, #8]
    ac3e:	429a      	cmp	r2, r3
    ac40:	d0c1      	beq.n	abc6 <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    ac42:	ea55 0106 	orrs.w	r1, r5, r6
    ac46:	bf0c      	ite	eq
    ac48:	f04f 0801 	moveq.w	r8, #1
    ac4c:	f04f 0800 	movne.w	r8, #0
    ac50:	d04b      	beq.n	acea <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    ac52:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    ac56:	4649      	mov	r1, r9
    ac58:	f993 000e 	ldrsb.w	r0, [r3, #14]
    ac5c:	f005 fc1e 	bl	1049c <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    ac60:	4581      	cmp	r9, r0
    ac62:	dc5d      	bgt.n	ad20 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    ac64:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    ac68:	9600      	str	r6, [sp, #0]
    ac6a:	9501      	str	r5, [sp, #4]
    ac6c:	4622      	mov	r2, r4
    ac6e:	4639      	mov	r1, r7
    ac70:	484b      	ldr	r0, [pc, #300]	; (ada0 <z_impl_k_mutex_lock+0x214>)
    ac72:	f000 ffe7 	bl	bc44 <z_pend_curr>
	if (got_mutex == 0) {
    ac76:	2800      	cmp	r0, #0
    ac78:	d0bb      	beq.n	abf2 <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    ac7a:	f04f 0320 	mov.w	r3, #32
    ac7e:	f3ef 8511 	mrs	r5, BASEPRI
    ac82:	f383 8812 	msr	BASEPRI_MAX, r3
    ac86:	f3bf 8f6f 	isb	sy
    ac8a:	4845      	ldr	r0, [pc, #276]	; (ada0 <z_impl_k_mutex_lock+0x214>)
    ac8c:	f7ff fd3e 	bl	a70c <z_spin_lock_valid>
    ac90:	2800      	cmp	r0, #0
    ac92:	d04b      	beq.n	ad2c <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    ac94:	4842      	ldr	r0, [pc, #264]	; (ada0 <z_impl_k_mutex_lock+0x214>)
    ac96:	f7ff fd59 	bl	a74c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    ac9a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ac9c:	42a3      	cmp	r3, r4
    ac9e:	d055      	beq.n	ad4c <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    aca0:	2b00      	cmp	r3, #0
    aca2:	d053      	beq.n	ad4c <z_impl_k_mutex_lock+0x1c0>
    aca4:	6921      	ldr	r1, [r4, #16]
    aca6:	f993 000e 	ldrsb.w	r0, [r3, #14]
    acaa:	f005 fbf7 	bl	1049c <new_prio_for_inheritance>
    acae:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    acb0:	4620      	mov	r0, r4
    acb2:	f005 fbfe 	bl	104b2 <adjust_owner_prio>
    acb6:	2800      	cmp	r0, #0
    acb8:	d14a      	bne.n	ad50 <z_impl_k_mutex_lock+0x1c4>
    acba:	f1b9 0f00 	cmp.w	r9, #0
    acbe:	d049      	beq.n	ad54 <z_impl_k_mutex_lock+0x1c8>
    acc0:	f04f 0801 	mov.w	r8, #1
    acc4:	e046      	b.n	ad54 <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    acc6:	6923      	ldr	r3, [r4, #16]
    acc8:	e783      	b.n	abd2 <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    acca:	4c3b      	ldr	r4, [pc, #236]	; (adb8 <z_impl_k_mutex_lock+0x22c>)
    accc:	23b9      	movs	r3, #185	; 0xb9
    acce:	4622      	mov	r2, r4
    acd0:	493c      	ldr	r1, [pc, #240]	; (adc4 <z_impl_k_mutex_lock+0x238>)
    acd2:	4837      	ldr	r0, [pc, #220]	; (adb0 <z_impl_k_mutex_lock+0x224>)
    acd4:	f004 fa26 	bl	f124 <assert_print>
    acd8:	4931      	ldr	r1, [pc, #196]	; (ada0 <z_impl_k_mutex_lock+0x214>)
    acda:	483b      	ldr	r0, [pc, #236]	; (adc8 <z_impl_k_mutex_lock+0x23c>)
    acdc:	f004 fa22 	bl	f124 <assert_print>
    ace0:	21b9      	movs	r1, #185	; 0xb9
    ace2:	4620      	mov	r0, r4
    ace4:	f004 fa17 	bl	f116 <assert_post_action>
    ace8:	e77e      	b.n	abe8 <z_impl_k_mutex_lock+0x5c>
    acea:	482d      	ldr	r0, [pc, #180]	; (ada0 <z_impl_k_mutex_lock+0x214>)
    acec:	f7ff fd1e 	bl	a72c <z_spin_unlock_valid>
    acf0:	b130      	cbz	r0, ad00 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    acf2:	f387 8811 	msr	BASEPRI, r7
    acf6:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    acfa:	f06f 000f 	mvn.w	r0, #15
    acfe:	e778      	b.n	abf2 <z_impl_k_mutex_lock+0x66>
    ad00:	4c2d      	ldr	r4, [pc, #180]	; (adb8 <z_impl_k_mutex_lock+0x22c>)
    ad02:	23b9      	movs	r3, #185	; 0xb9
    ad04:	4622      	mov	r2, r4
    ad06:	492f      	ldr	r1, [pc, #188]	; (adc4 <z_impl_k_mutex_lock+0x238>)
    ad08:	4829      	ldr	r0, [pc, #164]	; (adb0 <z_impl_k_mutex_lock+0x224>)
    ad0a:	f004 fa0b 	bl	f124 <assert_print>
    ad0e:	4924      	ldr	r1, [pc, #144]	; (ada0 <z_impl_k_mutex_lock+0x214>)
    ad10:	482d      	ldr	r0, [pc, #180]	; (adc8 <z_impl_k_mutex_lock+0x23c>)
    ad12:	f004 fa07 	bl	f124 <assert_print>
    ad16:	21b9      	movs	r1, #185	; 0xb9
    ad18:	4620      	mov	r0, r4
    ad1a:	f004 f9fc 	bl	f116 <assert_post_action>
    ad1e:	e7e8      	b.n	acf2 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    ad20:	4601      	mov	r1, r0
    ad22:	4620      	mov	r0, r4
    ad24:	f005 fbc5 	bl	104b2 <adjust_owner_prio>
    ad28:	4681      	mov	r9, r0
    ad2a:	e79d      	b.n	ac68 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ad2c:	4e22      	ldr	r6, [pc, #136]	; (adb8 <z_impl_k_mutex_lock+0x22c>)
    ad2e:	238e      	movs	r3, #142	; 0x8e
    ad30:	4632      	mov	r2, r6
    ad32:	4922      	ldr	r1, [pc, #136]	; (adbc <z_impl_k_mutex_lock+0x230>)
    ad34:	481e      	ldr	r0, [pc, #120]	; (adb0 <z_impl_k_mutex_lock+0x224>)
    ad36:	f004 f9f5 	bl	f124 <assert_print>
    ad3a:	4919      	ldr	r1, [pc, #100]	; (ada0 <z_impl_k_mutex_lock+0x214>)
    ad3c:	4820      	ldr	r0, [pc, #128]	; (adc0 <z_impl_k_mutex_lock+0x234>)
    ad3e:	f004 f9f1 	bl	f124 <assert_print>
    ad42:	218e      	movs	r1, #142	; 0x8e
    ad44:	4630      	mov	r0, r6
    ad46:	f004 f9e6 	bl	f116 <assert_post_action>
    ad4a:	e7a3      	b.n	ac94 <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    ad4c:	6921      	ldr	r1, [r4, #16]
    ad4e:	e7af      	b.n	acb0 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    ad50:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    ad54:	f1b8 0f00 	cmp.w	r8, #0
    ad58:	d006      	beq.n	ad68 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    ad5a:	4629      	mov	r1, r5
    ad5c:	4810      	ldr	r0, [pc, #64]	; (ada0 <z_impl_k_mutex_lock+0x214>)
    ad5e:	f000 faf1 	bl	b344 <z_reschedule>
	return -EAGAIN;
    ad62:	f06f 000a 	mvn.w	r0, #10
    ad66:	e744      	b.n	abf2 <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ad68:	480d      	ldr	r0, [pc, #52]	; (ada0 <z_impl_k_mutex_lock+0x214>)
    ad6a:	f7ff fcdf 	bl	a72c <z_spin_unlock_valid>
    ad6e:	b130      	cbz	r0, ad7e <z_impl_k_mutex_lock+0x1f2>
    ad70:	f385 8811 	msr	BASEPRI, r5
    ad74:	f3bf 8f6f 	isb	sy
    ad78:	f06f 000a 	mvn.w	r0, #10
    ad7c:	e739      	b.n	abf2 <z_impl_k_mutex_lock+0x66>
    ad7e:	4c0e      	ldr	r4, [pc, #56]	; (adb8 <z_impl_k_mutex_lock+0x22c>)
    ad80:	23b9      	movs	r3, #185	; 0xb9
    ad82:	4622      	mov	r2, r4
    ad84:	490f      	ldr	r1, [pc, #60]	; (adc4 <z_impl_k_mutex_lock+0x238>)
    ad86:	480a      	ldr	r0, [pc, #40]	; (adb0 <z_impl_k_mutex_lock+0x224>)
    ad88:	f004 f9cc 	bl	f124 <assert_print>
    ad8c:	4904      	ldr	r1, [pc, #16]	; (ada0 <z_impl_k_mutex_lock+0x214>)
    ad8e:	480e      	ldr	r0, [pc, #56]	; (adc8 <z_impl_k_mutex_lock+0x23c>)
    ad90:	f004 f9c8 	bl	f124 <assert_print>
    ad94:	21b9      	movs	r1, #185	; 0xb9
    ad96:	4620      	mov	r0, r4
    ad98:	f004 f9bd 	bl	f116 <assert_post_action>
    ad9c:	e7e8      	b.n	ad70 <z_impl_k_mutex_lock+0x1e4>
    ad9e:	bf00      	nop
    ada0:	2000d514 	.word	0x2000d514
    ada4:	2000d4e4 	.word	0x2000d4e4
    ada8:	00012ee0 	.word	0x00012ee0
    adac:	00012e28 	.word	0x00012e28
    adb0:	00011514 	.word	0x00011514
    adb4:	00012f04 	.word	0x00012f04
    adb8:	000116c0 	.word	0x000116c0
    adbc:	00011720 	.word	0x00011720
    adc0:	00011738 	.word	0x00011738
    adc4:	000116f0 	.word	0x000116f0
    adc8:	00011708 	.word	0x00011708

0000adcc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    adcc:	b570      	push	{r4, r5, r6, lr}
    adce:	4604      	mov	r4, r0
    add0:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    add4:	bb03      	cbnz	r3, ae18 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    add6:	68a3      	ldr	r3, [r4, #8]
    add8:	2b00      	cmp	r3, #0
    adda:	f000 80a6 	beq.w	af2a <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    adde:	4a56      	ldr	r2, [pc, #344]	; (af38 <z_impl_k_mutex_unlock+0x16c>)
    ade0:	6892      	ldr	r2, [r2, #8]
    ade2:	4293      	cmp	r3, r2
    ade4:	f040 80a4 	bne.w	af30 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    ade8:	68e3      	ldr	r3, [r4, #12]
    adea:	b323      	cbz	r3, ae36 <z_impl_k_mutex_unlock+0x6a>
    adec:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    adf0:	bb6b      	cbnz	r3, ae4e <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    adf2:	4b51      	ldr	r3, [pc, #324]	; (af38 <z_impl_k_mutex_unlock+0x16c>)
    adf4:	689b      	ldr	r3, [r3, #8]
    adf6:	7bdb      	ldrb	r3, [r3, #15]
    adf8:	2b01      	cmp	r3, #1
    adfa:	d037      	beq.n	ae6c <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    adfc:	4b4e      	ldr	r3, [pc, #312]	; (af38 <z_impl_k_mutex_unlock+0x16c>)
    adfe:	689a      	ldr	r2, [r3, #8]
    ae00:	7bd3      	ldrb	r3, [r2, #15]
    ae02:	3b01      	subs	r3, #1
    ae04:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    ae06:	68e3      	ldr	r3, [r4, #12]
    ae08:	2b01      	cmp	r3, #1
    ae0a:	d93e      	bls.n	ae8a <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    ae0c:	3b01      	subs	r3, #1
    ae0e:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    ae10:	f001 f872 	bl	bef8 <k_sched_unlock>

	return 0;
    ae14:	2000      	movs	r0, #0
}
    ae16:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    ae18:	4d48      	ldr	r5, [pc, #288]	; (af3c <z_impl_k_mutex_unlock+0x170>)
    ae1a:	23c7      	movs	r3, #199	; 0xc7
    ae1c:	462a      	mov	r2, r5
    ae1e:	4948      	ldr	r1, [pc, #288]	; (af40 <z_impl_k_mutex_unlock+0x174>)
    ae20:	4848      	ldr	r0, [pc, #288]	; (af44 <z_impl_k_mutex_unlock+0x178>)
    ae22:	f004 f97f 	bl	f124 <assert_print>
    ae26:	4848      	ldr	r0, [pc, #288]	; (af48 <z_impl_k_mutex_unlock+0x17c>)
    ae28:	f004 f97c 	bl	f124 <assert_print>
    ae2c:	21c7      	movs	r1, #199	; 0xc7
    ae2e:	4628      	mov	r0, r5
    ae30:	f004 f971 	bl	f116 <assert_post_action>
    ae34:	e7cf      	b.n	add6 <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    ae36:	4d41      	ldr	r5, [pc, #260]	; (af3c <z_impl_k_mutex_unlock+0x170>)
    ae38:	23df      	movs	r3, #223	; 0xdf
    ae3a:	462a      	mov	r2, r5
    ae3c:	4943      	ldr	r1, [pc, #268]	; (af4c <z_impl_k_mutex_unlock+0x180>)
    ae3e:	4841      	ldr	r0, [pc, #260]	; (af44 <z_impl_k_mutex_unlock+0x178>)
    ae40:	f004 f970 	bl	f124 <assert_print>
    ae44:	21df      	movs	r1, #223	; 0xdf
    ae46:	4628      	mov	r0, r5
    ae48:	f004 f965 	bl	f116 <assert_post_action>
    ae4c:	e7ce      	b.n	adec <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    ae4e:	4d40      	ldr	r5, [pc, #256]	; (af50 <z_impl_k_mutex_unlock+0x184>)
    ae50:	23fd      	movs	r3, #253	; 0xfd
    ae52:	462a      	mov	r2, r5
    ae54:	493a      	ldr	r1, [pc, #232]	; (af40 <z_impl_k_mutex_unlock+0x174>)
    ae56:	483b      	ldr	r0, [pc, #236]	; (af44 <z_impl_k_mutex_unlock+0x178>)
    ae58:	f004 f964 	bl	f124 <assert_print>
    ae5c:	483d      	ldr	r0, [pc, #244]	; (af54 <z_impl_k_mutex_unlock+0x188>)
    ae5e:	f004 f961 	bl	f124 <assert_print>
    ae62:	21fd      	movs	r1, #253	; 0xfd
    ae64:	4628      	mov	r0, r5
    ae66:	f004 f956 	bl	f116 <assert_post_action>
    ae6a:	e7c2      	b.n	adf2 <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    ae6c:	4d38      	ldr	r5, [pc, #224]	; (af50 <z_impl_k_mutex_unlock+0x184>)
    ae6e:	23fe      	movs	r3, #254	; 0xfe
    ae70:	462a      	mov	r2, r5
    ae72:	4939      	ldr	r1, [pc, #228]	; (af58 <z_impl_k_mutex_unlock+0x18c>)
    ae74:	4833      	ldr	r0, [pc, #204]	; (af44 <z_impl_k_mutex_unlock+0x178>)
    ae76:	f004 f955 	bl	f124 <assert_print>
    ae7a:	4836      	ldr	r0, [pc, #216]	; (af54 <z_impl_k_mutex_unlock+0x188>)
    ae7c:	f004 f952 	bl	f124 <assert_print>
    ae80:	21fe      	movs	r1, #254	; 0xfe
    ae82:	4628      	mov	r0, r5
    ae84:	f004 f947 	bl	f116 <assert_post_action>
    ae88:	e7b8      	b.n	adfc <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    ae8a:	f04f 0320 	mov.w	r3, #32
    ae8e:	f3ef 8511 	mrs	r5, BASEPRI
    ae92:	f383 8812 	msr	BASEPRI_MAX, r3
    ae96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ae9a:	4830      	ldr	r0, [pc, #192]	; (af5c <z_impl_k_mutex_unlock+0x190>)
    ae9c:	f7ff fc36 	bl	a70c <z_spin_lock_valid>
    aea0:	b1c0      	cbz	r0, aed4 <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    aea2:	482e      	ldr	r0, [pc, #184]	; (af5c <z_impl_k_mutex_unlock+0x190>)
    aea4:	f7ff fc52 	bl	a74c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    aea8:	6921      	ldr	r1, [r4, #16]
    aeaa:	4620      	mov	r0, r4
    aeac:	f005 fb01 	bl	104b2 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    aeb0:	4620      	mov	r0, r4
    aeb2:	f001 f963 	bl	c17c <z_unpend_first_thread>
	mutex->owner = new_owner;
    aeb6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    aeb8:	b1e0      	cbz	r0, aef4 <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    aeba:	f990 300e 	ldrsb.w	r3, [r0, #14]
    aebe:	6123      	str	r3, [r4, #16]
    aec0:	2300      	movs	r3, #0
    aec2:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    aec6:	f000 fce1 	bl	b88c <z_ready_thread>
		z_reschedule(&lock, key);
    aeca:	4629      	mov	r1, r5
    aecc:	4823      	ldr	r0, [pc, #140]	; (af5c <z_impl_k_mutex_unlock+0x190>)
    aece:	f000 fa39 	bl	b344 <z_reschedule>
    aed2:	e79d      	b.n	ae10 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aed4:	4e22      	ldr	r6, [pc, #136]	; (af60 <z_impl_k_mutex_unlock+0x194>)
    aed6:	238e      	movs	r3, #142	; 0x8e
    aed8:	4632      	mov	r2, r6
    aeda:	4922      	ldr	r1, [pc, #136]	; (af64 <z_impl_k_mutex_unlock+0x198>)
    aedc:	4819      	ldr	r0, [pc, #100]	; (af44 <z_impl_k_mutex_unlock+0x178>)
    aede:	f004 f921 	bl	f124 <assert_print>
    aee2:	491e      	ldr	r1, [pc, #120]	; (af5c <z_impl_k_mutex_unlock+0x190>)
    aee4:	4820      	ldr	r0, [pc, #128]	; (af68 <z_impl_k_mutex_unlock+0x19c>)
    aee6:	f004 f91d 	bl	f124 <assert_print>
    aeea:	218e      	movs	r1, #142	; 0x8e
    aeec:	4630      	mov	r0, r6
    aeee:	f004 f912 	bl	f116 <assert_post_action>
    aef2:	e7d6      	b.n	aea2 <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    aef4:	2300      	movs	r3, #0
    aef6:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aef8:	4818      	ldr	r0, [pc, #96]	; (af5c <z_impl_k_mutex_unlock+0x190>)
    aefa:	f7ff fc17 	bl	a72c <z_spin_unlock_valid>
    aefe:	b120      	cbz	r0, af0a <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    af00:	f385 8811 	msr	BASEPRI, r5
    af04:	f3bf 8f6f 	isb	sy
    af08:	e782      	b.n	ae10 <z_impl_k_mutex_unlock+0x44>
    af0a:	4c15      	ldr	r4, [pc, #84]	; (af60 <z_impl_k_mutex_unlock+0x194>)
    af0c:	23b9      	movs	r3, #185	; 0xb9
    af0e:	4622      	mov	r2, r4
    af10:	4916      	ldr	r1, [pc, #88]	; (af6c <z_impl_k_mutex_unlock+0x1a0>)
    af12:	480c      	ldr	r0, [pc, #48]	; (af44 <z_impl_k_mutex_unlock+0x178>)
    af14:	f004 f906 	bl	f124 <assert_print>
    af18:	4910      	ldr	r1, [pc, #64]	; (af5c <z_impl_k_mutex_unlock+0x190>)
    af1a:	4815      	ldr	r0, [pc, #84]	; (af70 <z_impl_k_mutex_unlock+0x1a4>)
    af1c:	f004 f902 	bl	f124 <assert_print>
    af20:	21b9      	movs	r1, #185	; 0xb9
    af22:	4620      	mov	r0, r4
    af24:	f004 f8f7 	bl	f116 <assert_post_action>
    af28:	e7ea      	b.n	af00 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    af2a:	f06f 0015 	mvn.w	r0, #21
    af2e:	e772      	b.n	ae16 <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    af30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    af34:	e76f      	b.n	ae16 <z_impl_k_mutex_unlock+0x4a>
    af36:	bf00      	nop
    af38:	2000d4e4 	.word	0x2000d4e4
    af3c:	00012ee0 	.word	0x00012ee0
    af40:	00012e28 	.word	0x00012e28
    af44:	00011514 	.word	0x00011514
    af48:	00012f04 	.word	0x00012f04
    af4c:	00012f2c 	.word	0x00012f2c
    af50:	00012f44 	.word	0x00012f44
    af54:	00012f70 	.word	0x00012f70
    af58:	00012f74 	.word	0x00012f74
    af5c:	2000d514 	.word	0x2000d514
    af60:	000116c0 	.word	0x000116c0
    af64:	00011720 	.word	0x00011720
    af68:	00011738 	.word	0x00011738
    af6c:	000116f0 	.word	0x000116f0
    af70:	00011708 	.word	0x00011708

0000af74 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    af74:	b570      	push	{r4, r5, r6, lr}
    af76:	4604      	mov	r4, r0
	__asm__ volatile(
    af78:	f04f 0320 	mov.w	r3, #32
    af7c:	f3ef 8511 	mrs	r5, BASEPRI
    af80:	f383 8812 	msr	BASEPRI_MAX, r3
    af84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    af88:	4817      	ldr	r0, [pc, #92]	; (afe8 <z_impl_k_sem_give+0x74>)
    af8a:	f7ff fbbf 	bl	a70c <z_spin_lock_valid>
    af8e:	b180      	cbz	r0, afb2 <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    af90:	4815      	ldr	r0, [pc, #84]	; (afe8 <z_impl_k_sem_give+0x74>)
    af92:	f7ff fbdb 	bl	a74c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    af96:	4620      	mov	r0, r4
    af98:	f001 f8f0 	bl	c17c <z_unpend_first_thread>

	if (thread != NULL) {
    af9c:	b1c8      	cbz	r0, afd2 <z_impl_k_sem_give+0x5e>
    af9e:	2200      	movs	r2, #0
    afa0:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    afa4:	f000 fc72 	bl	b88c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    afa8:	4629      	mov	r1, r5
    afaa:	480f      	ldr	r0, [pc, #60]	; (afe8 <z_impl_k_sem_give+0x74>)
    afac:	f000 f9ca 	bl	b344 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    afb0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    afb2:	4e0e      	ldr	r6, [pc, #56]	; (afec <z_impl_k_sem_give+0x78>)
    afb4:	238e      	movs	r3, #142	; 0x8e
    afb6:	4632      	mov	r2, r6
    afb8:	490d      	ldr	r1, [pc, #52]	; (aff0 <z_impl_k_sem_give+0x7c>)
    afba:	480e      	ldr	r0, [pc, #56]	; (aff4 <z_impl_k_sem_give+0x80>)
    afbc:	f004 f8b2 	bl	f124 <assert_print>
    afc0:	4909      	ldr	r1, [pc, #36]	; (afe8 <z_impl_k_sem_give+0x74>)
    afc2:	480d      	ldr	r0, [pc, #52]	; (aff8 <z_impl_k_sem_give+0x84>)
    afc4:	f004 f8ae 	bl	f124 <assert_print>
    afc8:	218e      	movs	r1, #142	; 0x8e
    afca:	4630      	mov	r0, r6
    afcc:	f004 f8a3 	bl	f116 <assert_post_action>
    afd0:	e7de      	b.n	af90 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    afd2:	68a3      	ldr	r3, [r4, #8]
    afd4:	68e2      	ldr	r2, [r4, #12]
    afd6:	4293      	cmp	r3, r2
    afd8:	d003      	beq.n	afe2 <z_impl_k_sem_give+0x6e>
    afda:	2201      	movs	r2, #1
    afdc:	4413      	add	r3, r2
    afde:	60a3      	str	r3, [r4, #8]
}
    afe0:	e7e2      	b.n	afa8 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    afe2:	2200      	movs	r2, #0
    afe4:	e7fa      	b.n	afdc <z_impl_k_sem_give+0x68>
    afe6:	bf00      	nop
    afe8:	2000d518 	.word	0x2000d518
    afec:	000116c0 	.word	0x000116c0
    aff0:	00011720 	.word	0x00011720
    aff4:	00011514 	.word	0x00011514
    aff8:	00011738 	.word	0x00011738

0000affc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    affc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b000:	b082      	sub	sp, #8
    b002:	4604      	mov	r4, r0
    b004:	4617      	mov	r7, r2
    b006:	461d      	mov	r5, r3
    b008:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    b00c:	b111      	cbz	r1, b014 <z_impl_k_sem_take+0x18>
    b00e:	ea55 0302 	orrs.w	r3, r5, r2
    b012:	d11f      	bne.n	b054 <z_impl_k_sem_take+0x58>
    b014:	f04f 0320 	mov.w	r3, #32
    b018:	f3ef 8611 	mrs	r6, BASEPRI
    b01c:	f383 8812 	msr	BASEPRI_MAX, r3
    b020:	f3bf 8f6f 	isb	sy
    b024:	4836      	ldr	r0, [pc, #216]	; (b100 <z_impl_k_sem_take+0x104>)
    b026:	f7ff fb71 	bl	a70c <z_spin_lock_valid>
    b02a:	b310      	cbz	r0, b072 <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    b02c:	4834      	ldr	r0, [pc, #208]	; (b100 <z_impl_k_sem_take+0x104>)
    b02e:	f7ff fb8d 	bl	a74c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    b032:	68a1      	ldr	r1, [r4, #8]
    b034:	2900      	cmp	r1, #0
    b036:	d03d      	beq.n	b0b4 <z_impl_k_sem_take+0xb8>
		sem->count--;
    b038:	3901      	subs	r1, #1
    b03a:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b03c:	4830      	ldr	r0, [pc, #192]	; (b100 <z_impl_k_sem_take+0x104>)
    b03e:	f7ff fb75 	bl	a72c <z_spin_unlock_valid>
    b042:	b338      	cbz	r0, b094 <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    b044:	f386 8811 	msr	BASEPRI, r6
    b048:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    b04c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    b04e:	b002      	add	sp, #8
    b050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    b054:	4e2b      	ldr	r6, [pc, #172]	; (b104 <z_impl_k_sem_take+0x108>)
    b056:	2379      	movs	r3, #121	; 0x79
    b058:	4632      	mov	r2, r6
    b05a:	492b      	ldr	r1, [pc, #172]	; (b108 <z_impl_k_sem_take+0x10c>)
    b05c:	482b      	ldr	r0, [pc, #172]	; (b10c <z_impl_k_sem_take+0x110>)
    b05e:	f004 f861 	bl	f124 <assert_print>
    b062:	482b      	ldr	r0, [pc, #172]	; (b110 <z_impl_k_sem_take+0x114>)
    b064:	f004 f85e 	bl	f124 <assert_print>
    b068:	2179      	movs	r1, #121	; 0x79
    b06a:	4630      	mov	r0, r6
    b06c:	f004 f853 	bl	f116 <assert_post_action>
    b070:	e7d0      	b.n	b014 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b072:	f8df 80a0 	ldr.w	r8, [pc, #160]	; b114 <z_impl_k_sem_take+0x118>
    b076:	238e      	movs	r3, #142	; 0x8e
    b078:	4642      	mov	r2, r8
    b07a:	4927      	ldr	r1, [pc, #156]	; (b118 <z_impl_k_sem_take+0x11c>)
    b07c:	4823      	ldr	r0, [pc, #140]	; (b10c <z_impl_k_sem_take+0x110>)
    b07e:	f004 f851 	bl	f124 <assert_print>
    b082:	491f      	ldr	r1, [pc, #124]	; (b100 <z_impl_k_sem_take+0x104>)
    b084:	4825      	ldr	r0, [pc, #148]	; (b11c <z_impl_k_sem_take+0x120>)
    b086:	f004 f84d 	bl	f124 <assert_print>
    b08a:	218e      	movs	r1, #142	; 0x8e
    b08c:	4640      	mov	r0, r8
    b08e:	f004 f842 	bl	f116 <assert_post_action>
    b092:	e7cb      	b.n	b02c <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b094:	4c1f      	ldr	r4, [pc, #124]	; (b114 <z_impl_k_sem_take+0x118>)
    b096:	23b9      	movs	r3, #185	; 0xb9
    b098:	4622      	mov	r2, r4
    b09a:	4921      	ldr	r1, [pc, #132]	; (b120 <z_impl_k_sem_take+0x124>)
    b09c:	481b      	ldr	r0, [pc, #108]	; (b10c <z_impl_k_sem_take+0x110>)
    b09e:	f004 f841 	bl	f124 <assert_print>
    b0a2:	4917      	ldr	r1, [pc, #92]	; (b100 <z_impl_k_sem_take+0x104>)
    b0a4:	481f      	ldr	r0, [pc, #124]	; (b124 <z_impl_k_sem_take+0x128>)
    b0a6:	f004 f83d 	bl	f124 <assert_print>
    b0aa:	21b9      	movs	r1, #185	; 0xb9
    b0ac:	4620      	mov	r0, r4
    b0ae:	f004 f832 	bl	f116 <assert_post_action>
    b0b2:	e7c7      	b.n	b044 <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b0b4:	ea55 0307 	orrs.w	r3, r5, r7
    b0b8:	d007      	beq.n	b0ca <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    b0ba:	9700      	str	r7, [sp, #0]
    b0bc:	9501      	str	r5, [sp, #4]
    b0be:	4622      	mov	r2, r4
    b0c0:	4631      	mov	r1, r6
    b0c2:	480f      	ldr	r0, [pc, #60]	; (b100 <z_impl_k_sem_take+0x104>)
    b0c4:	f000 fdbe 	bl	bc44 <z_pend_curr>
	return ret;
    b0c8:	e7c1      	b.n	b04e <z_impl_k_sem_take+0x52>
    b0ca:	480d      	ldr	r0, [pc, #52]	; (b100 <z_impl_k_sem_take+0x104>)
    b0cc:	f7ff fb2e 	bl	a72c <z_spin_unlock_valid>
    b0d0:	b130      	cbz	r0, b0e0 <z_impl_k_sem_take+0xe4>
    b0d2:	f386 8811 	msr	BASEPRI, r6
    b0d6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    b0da:	f06f 000f 	mvn.w	r0, #15
    b0de:	e7b6      	b.n	b04e <z_impl_k_sem_take+0x52>
    b0e0:	4c0c      	ldr	r4, [pc, #48]	; (b114 <z_impl_k_sem_take+0x118>)
    b0e2:	23b9      	movs	r3, #185	; 0xb9
    b0e4:	4622      	mov	r2, r4
    b0e6:	490e      	ldr	r1, [pc, #56]	; (b120 <z_impl_k_sem_take+0x124>)
    b0e8:	4808      	ldr	r0, [pc, #32]	; (b10c <z_impl_k_sem_take+0x110>)
    b0ea:	f004 f81b 	bl	f124 <assert_print>
    b0ee:	4904      	ldr	r1, [pc, #16]	; (b100 <z_impl_k_sem_take+0x104>)
    b0f0:	480c      	ldr	r0, [pc, #48]	; (b124 <z_impl_k_sem_take+0x128>)
    b0f2:	f004 f817 	bl	f124 <assert_print>
    b0f6:	21b9      	movs	r1, #185	; 0xb9
    b0f8:	4620      	mov	r0, r4
    b0fa:	f004 f80c 	bl	f116 <assert_post_action>
    b0fe:	e7e8      	b.n	b0d2 <z_impl_k_sem_take+0xd6>
    b100:	2000d518 	.word	0x2000d518
    b104:	00012fa8 	.word	0x00012fa8
    b108:	00012fc8 	.word	0x00012fc8
    b10c:	00011514 	.word	0x00011514
    b110:	00012f70 	.word	0x00012f70
    b114:	000116c0 	.word	0x000116c0
    b118:	00011720 	.word	0x00011720
    b11c:	00011738 	.word	0x00011738
    b120:	000116f0 	.word	0x000116f0
    b124:	00011708 	.word	0x00011708

0000b128 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    b128:	b538      	push	{r3, r4, r5, lr}
    b12a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    b12c:	6883      	ldr	r3, [r0, #8]
    b12e:	b10b      	cbz	r3, b134 <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    b130:	68a0      	ldr	r0, [r4, #8]
    b132:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    b134:	4d06      	ldr	r5, [pc, #24]	; (b150 <pended_on_thread+0x28>)
    b136:	f240 23b9 	movw	r3, #697	; 0x2b9
    b13a:	462a      	mov	r2, r5
    b13c:	4905      	ldr	r1, [pc, #20]	; (b154 <pended_on_thread+0x2c>)
    b13e:	4806      	ldr	r0, [pc, #24]	; (b158 <pended_on_thread+0x30>)
    b140:	f003 fff0 	bl	f124 <assert_print>
    b144:	f240 21b9 	movw	r1, #697	; 0x2b9
    b148:	4628      	mov	r0, r5
    b14a:	f003 ffe4 	bl	f116 <assert_post_action>
    b14e:	e7ef      	b.n	b130 <pended_on_thread+0x8>
    b150:	00013018 	.word	0x00013018
    b154:	0001303c 	.word	0x0001303c
    b158:	00011514 	.word	0x00011514

0000b15c <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b15c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b160:	bf08      	it	eq
    b162:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b166:	d100      	bne.n	b16a <add_thread_timeout+0xe>
    b168:	4770      	bx	lr
{
    b16a:	b508      	push	{r3, lr}
    b16c:	4902      	ldr	r1, [pc, #8]	; (b178 <add_thread_timeout+0x1c>)
    b16e:	3018      	adds	r0, #24
    b170:	f001 fb36 	bl	c7e0 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    b174:	bd08      	pop	{r3, pc}
    b176:	bf00      	nop
    b178:	0000b9e9 	.word	0x0000b9e9

0000b17c <z_reset_time_slice>:
{
    b17c:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    b17e:	4b07      	ldr	r3, [pc, #28]	; (b19c <z_reset_time_slice+0x20>)
    b180:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    b182:	b904      	cbnz	r4, b186 <z_reset_time_slice+0xa>
}
    b184:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    b186:	f7fc ff21 	bl	7fcc <sys_clock_elapsed>
    b18a:	4404      	add	r4, r0
    b18c:	4b04      	ldr	r3, [pc, #16]	; (b1a0 <z_reset_time_slice+0x24>)
    b18e:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    b190:	2100      	movs	r1, #0
    b192:	4b02      	ldr	r3, [pc, #8]	; (b19c <z_reset_time_slice+0x20>)
    b194:	6818      	ldr	r0, [r3, #0]
    b196:	f001 fcb3 	bl	cb00 <z_set_timeout_expiry>
}
    b19a:	e7f3      	b.n	b184 <z_reset_time_slice+0x8>
    b19c:	2000d528 	.word	0x2000d528
    b1a0:	2000d4e4 	.word	0x2000d4e4

0000b1a4 <k_sched_time_slice_set>:
{
    b1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1a8:	4604      	mov	r4, r0
    b1aa:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    b1ac:	2700      	movs	r7, #0
	__asm__ volatile(
    b1ae:	f04f 0320 	mov.w	r3, #32
    b1b2:	f3ef 8611 	mrs	r6, BASEPRI
    b1b6:	f383 8812 	msr	BASEPRI_MAX, r3
    b1ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b1be:	482a      	ldr	r0, [pc, #168]	; (b268 <k_sched_time_slice_set+0xc4>)
    b1c0:	f7ff faa4 	bl	a70c <z_spin_lock_valid>
    b1c4:	b118      	cbz	r0, b1ce <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    b1c6:	4828      	ldr	r0, [pc, #160]	; (b268 <k_sched_time_slice_set+0xc4>)
    b1c8:	f7ff fac0 	bl	a74c <z_spin_lock_set_owner>
	return k;
    b1cc:	e023      	b.n	b216 <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b1ce:	f8df 809c 	ldr.w	r8, [pc, #156]	; b26c <k_sched_time_slice_set+0xc8>
    b1d2:	238e      	movs	r3, #142	; 0x8e
    b1d4:	4642      	mov	r2, r8
    b1d6:	4926      	ldr	r1, [pc, #152]	; (b270 <k_sched_time_slice_set+0xcc>)
    b1d8:	4826      	ldr	r0, [pc, #152]	; (b274 <k_sched_time_slice_set+0xd0>)
    b1da:	f003 ffa3 	bl	f124 <assert_print>
    b1de:	4922      	ldr	r1, [pc, #136]	; (b268 <k_sched_time_slice_set+0xc4>)
    b1e0:	4825      	ldr	r0, [pc, #148]	; (b278 <k_sched_time_slice_set+0xd4>)
    b1e2:	f003 ff9f 	bl	f124 <assert_print>
    b1e6:	218e      	movs	r1, #142	; 0x8e
    b1e8:	4640      	mov	r0, r8
    b1ea:	f003 ff94 	bl	f116 <assert_post_action>
    b1ee:	e7ea      	b.n	b1c6 <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    b1f0:	2802      	cmp	r0, #2
    b1f2:	bfb8      	it	lt
    b1f4:	2002      	movlt	r0, #2
    b1f6:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    b1f8:	4b20      	ldr	r3, [pc, #128]	; (b27c <k_sched_time_slice_set+0xd8>)
    b1fa:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    b1fc:	4b20      	ldr	r3, [pc, #128]	; (b280 <k_sched_time_slice_set+0xdc>)
    b1fe:	6898      	ldr	r0, [r3, #8]
    b200:	f7ff ffbc 	bl	b17c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b204:	4818      	ldr	r0, [pc, #96]	; (b268 <k_sched_time_slice_set+0xc4>)
    b206:	f7ff fa91 	bl	a72c <z_spin_unlock_valid>
    b20a:	b1d0      	cbz	r0, b242 <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    b20c:	f386 8811 	msr	BASEPRI, r6
    b210:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b214:	2701      	movs	r7, #1
    b216:	bb27      	cbnz	r7, b262 <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    b218:	4b19      	ldr	r3, [pc, #100]	; (b280 <k_sched_time_slice_set+0xdc>)
    b21a:	2200      	movs	r2, #0
    b21c:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    b21e:	0c61      	lsrs	r1, r4, #17
    b220:	03e3      	lsls	r3, r4, #15
    b222:	f240 30e7 	movw	r0, #999	; 0x3e7
    b226:	1818      	adds	r0, r3, r0
    b228:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b22c:	f04f 0300 	mov.w	r3, #0
    b230:	f141 0100 	adc.w	r1, r1, #0
    b234:	f7f5 fbd2 	bl	9dc <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    b238:	4b12      	ldr	r3, [pc, #72]	; (b284 <k_sched_time_slice_set+0xe0>)
    b23a:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    b23c:	2c00      	cmp	r4, #0
    b23e:	dcd7      	bgt.n	b1f0 <k_sched_time_slice_set+0x4c>
    b240:	e7da      	b.n	b1f8 <k_sched_time_slice_set+0x54>
    b242:	4f0a      	ldr	r7, [pc, #40]	; (b26c <k_sched_time_slice_set+0xc8>)
    b244:	23b9      	movs	r3, #185	; 0xb9
    b246:	463a      	mov	r2, r7
    b248:	490f      	ldr	r1, [pc, #60]	; (b288 <k_sched_time_slice_set+0xe4>)
    b24a:	480a      	ldr	r0, [pc, #40]	; (b274 <k_sched_time_slice_set+0xd0>)
    b24c:	f003 ff6a 	bl	f124 <assert_print>
    b250:	4905      	ldr	r1, [pc, #20]	; (b268 <k_sched_time_slice_set+0xc4>)
    b252:	480e      	ldr	r0, [pc, #56]	; (b28c <k_sched_time_slice_set+0xe8>)
    b254:	f003 ff66 	bl	f124 <assert_print>
    b258:	21b9      	movs	r1, #185	; 0xb9
    b25a:	4638      	mov	r0, r7
    b25c:	f003 ff5b 	bl	f116 <assert_post_action>
    b260:	e7d4      	b.n	b20c <k_sched_time_slice_set+0x68>
}
    b262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b266:	bf00      	nop
    b268:	2000d520 	.word	0x2000d520
    b26c:	000116c0 	.word	0x000116c0
    b270:	00011720 	.word	0x00011720
    b274:	00011514 	.word	0x00011514
    b278:	00011738 	.word	0x00011738
    b27c:	2000d524 	.word	0x2000d524
    b280:	2000d4e4 	.word	0x2000d4e4
    b284:	2000d528 	.word	0x2000d528
    b288:	000116f0 	.word	0x000116f0
    b28c:	00011708 	.word	0x00011708

0000b290 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    b290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b292:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    b294:	2500      	movs	r5, #0
	__asm__ volatile(
    b296:	f04f 0320 	mov.w	r3, #32
    b29a:	f3ef 8611 	mrs	r6, BASEPRI
    b29e:	f383 8812 	msr	BASEPRI_MAX, r3
    b2a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b2a6:	4820      	ldr	r0, [pc, #128]	; (b328 <z_unpend_thread_no_timeout+0x98>)
    b2a8:	f7ff fa30 	bl	a70c <z_spin_lock_valid>
    b2ac:	b118      	cbz	r0, b2b6 <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
    b2ae:	481e      	ldr	r0, [pc, #120]	; (b328 <z_unpend_thread_no_timeout+0x98>)
    b2b0:	f7ff fa4c 	bl	a74c <z_spin_lock_set_owner>
	return k;
    b2b4:	e014      	b.n	b2e0 <z_unpend_thread_no_timeout+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b2b6:	4f1d      	ldr	r7, [pc, #116]	; (b32c <z_unpend_thread_no_timeout+0x9c>)
    b2b8:	238e      	movs	r3, #142	; 0x8e
    b2ba:	463a      	mov	r2, r7
    b2bc:	491c      	ldr	r1, [pc, #112]	; (b330 <z_unpend_thread_no_timeout+0xa0>)
    b2be:	481d      	ldr	r0, [pc, #116]	; (b334 <z_unpend_thread_no_timeout+0xa4>)
    b2c0:	f003 ff30 	bl	f124 <assert_print>
    b2c4:	4918      	ldr	r1, [pc, #96]	; (b328 <z_unpend_thread_no_timeout+0x98>)
    b2c6:	481c      	ldr	r0, [pc, #112]	; (b338 <z_unpend_thread_no_timeout+0xa8>)
    b2c8:	f003 ff2c 	bl	f124 <assert_print>
    b2cc:	218e      	movs	r1, #142	; 0x8e
    b2ce:	4638      	mov	r0, r7
    b2d0:	f003 ff21 	bl	f116 <assert_post_action>
    b2d4:	e7eb      	b.n	b2ae <z_unpend_thread_no_timeout+0x1e>
	__asm__ volatile(
    b2d6:	f386 8811 	msr	BASEPRI, r6
    b2da:	f3bf 8f6f 	isb	sy
    b2de:	2501      	movs	r5, #1
    b2e0:	bb05      	cbnz	r5, b324 <z_unpend_thread_no_timeout+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    b2e2:	4620      	mov	r0, r4
    b2e4:	f7ff ff20 	bl	b128 <pended_on_thread>
    b2e8:	4621      	mov	r1, r4
    b2ea:	f000 f8fb 	bl	b4e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    b2ee:	7b63      	ldrb	r3, [r4, #13]
    b2f0:	f023 0302 	bic.w	r3, r3, #2
    b2f4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    b2f6:	2300      	movs	r3, #0
    b2f8:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b2fa:	480b      	ldr	r0, [pc, #44]	; (b328 <z_unpend_thread_no_timeout+0x98>)
    b2fc:	f7ff fa16 	bl	a72c <z_spin_unlock_valid>
    b300:	2800      	cmp	r0, #0
    b302:	d1e8      	bne.n	b2d6 <z_unpend_thread_no_timeout+0x46>
    b304:	4d09      	ldr	r5, [pc, #36]	; (b32c <z_unpend_thread_no_timeout+0x9c>)
    b306:	23b9      	movs	r3, #185	; 0xb9
    b308:	462a      	mov	r2, r5
    b30a:	490c      	ldr	r1, [pc, #48]	; (b33c <z_unpend_thread_no_timeout+0xac>)
    b30c:	4809      	ldr	r0, [pc, #36]	; (b334 <z_unpend_thread_no_timeout+0xa4>)
    b30e:	f003 ff09 	bl	f124 <assert_print>
    b312:	4905      	ldr	r1, [pc, #20]	; (b328 <z_unpend_thread_no_timeout+0x98>)
    b314:	480a      	ldr	r0, [pc, #40]	; (b340 <z_unpend_thread_no_timeout+0xb0>)
    b316:	f003 ff05 	bl	f124 <assert_print>
    b31a:	21b9      	movs	r1, #185	; 0xb9
    b31c:	4628      	mov	r0, r5
    b31e:	f003 fefa 	bl	f116 <assert_post_action>
    b322:	e7d8      	b.n	b2d6 <z_unpend_thread_no_timeout+0x46>
		unpend_thread_no_timeout(thread);
	}
}
    b324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b326:	bf00      	nop
    b328:	2000d520 	.word	0x2000d520
    b32c:	000116c0 	.word	0x000116c0
    b330:	00011720 	.word	0x00011720
    b334:	00011514 	.word	0x00011514
    b338:	00011738 	.word	0x00011738
    b33c:	000116f0 	.word	0x000116f0
    b340:	00011708 	.word	0x00011708

0000b344 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    b344:	b570      	push	{r4, r5, r6, lr}
    b346:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    b348:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b34a:	b921      	cbnz	r1, b356 <z_reschedule+0x12>
    b34c:	f3ef 8305 	mrs	r3, IPSR
    b350:	b913      	cbnz	r3, b358 <z_reschedule+0x14>
    b352:	2101      	movs	r1, #1
    b354:	e000      	b.n	b358 <z_reschedule+0x14>
    b356:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    b358:	f011 0f01 	tst.w	r1, #1
    b35c:	d01c      	beq.n	b398 <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    b35e:	4b1b      	ldr	r3, [pc, #108]	; (b3cc <z_reschedule+0x88>)
    b360:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    b362:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    b364:	429a      	cmp	r2, r3
    b366:	d017      	beq.n	b398 <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b368:	4620      	mov	r0, r4
    b36a:	f7ff f9df 	bl	a72c <z_spin_unlock_valid>
    b36e:	b118      	cbz	r0, b378 <z_reschedule+0x34>
	ret = arch_swap(key);
    b370:	4628      	mov	r0, r5
    b372:	f7fa fd37 	bl	5de4 <arch_swap>
		z_swap(lock, key);
    b376:	e017      	b.n	b3a8 <z_reschedule+0x64>
    b378:	4e15      	ldr	r6, [pc, #84]	; (b3d0 <z_reschedule+0x8c>)
    b37a:	23d0      	movs	r3, #208	; 0xd0
    b37c:	4632      	mov	r2, r6
    b37e:	4915      	ldr	r1, [pc, #84]	; (b3d4 <z_reschedule+0x90>)
    b380:	4815      	ldr	r0, [pc, #84]	; (b3d8 <z_reschedule+0x94>)
    b382:	f003 fecf 	bl	f124 <assert_print>
    b386:	4621      	mov	r1, r4
    b388:	4814      	ldr	r0, [pc, #80]	; (b3dc <z_reschedule+0x98>)
    b38a:	f003 fecb 	bl	f124 <assert_print>
    b38e:	21d0      	movs	r1, #208	; 0xd0
    b390:	4630      	mov	r0, r6
    b392:	f003 fec0 	bl	f116 <assert_post_action>
    b396:	e7eb      	b.n	b370 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b398:	4620      	mov	r0, r4
    b39a:	f7ff f9c7 	bl	a72c <z_spin_unlock_valid>
    b39e:	b120      	cbz	r0, b3aa <z_reschedule+0x66>
    b3a0:	f385 8811 	msr	BASEPRI, r5
    b3a4:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    b3a8:	bd70      	pop	{r4, r5, r6, pc}
    b3aa:	4e09      	ldr	r6, [pc, #36]	; (b3d0 <z_reschedule+0x8c>)
    b3ac:	23b9      	movs	r3, #185	; 0xb9
    b3ae:	4632      	mov	r2, r6
    b3b0:	4908      	ldr	r1, [pc, #32]	; (b3d4 <z_reschedule+0x90>)
    b3b2:	4809      	ldr	r0, [pc, #36]	; (b3d8 <z_reschedule+0x94>)
    b3b4:	f003 feb6 	bl	f124 <assert_print>
    b3b8:	4621      	mov	r1, r4
    b3ba:	4808      	ldr	r0, [pc, #32]	; (b3dc <z_reschedule+0x98>)
    b3bc:	f003 feb2 	bl	f124 <assert_print>
    b3c0:	21b9      	movs	r1, #185	; 0xb9
    b3c2:	4630      	mov	r0, r6
    b3c4:	f003 fea7 	bl	f116 <assert_post_action>
    b3c8:	e7ea      	b.n	b3a0 <z_reschedule+0x5c>
    b3ca:	bf00      	nop
    b3cc:	2000d4e4 	.word	0x2000d4e4
    b3d0:	000116c0 	.word	0x000116c0
    b3d4:	000116f0 	.word	0x000116f0
    b3d8:	00011514 	.word	0x00011514
    b3dc:	00011708 	.word	0x00011708

0000b3e0 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    b3e0:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    b3e2:	2400      	movs	r4, #0
	__asm__ volatile(
    b3e4:	f04f 0320 	mov.w	r3, #32
    b3e8:	f3ef 8511 	mrs	r5, BASEPRI
    b3ec:	f383 8812 	msr	BASEPRI_MAX, r3
    b3f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b3f4:	482f      	ldr	r0, [pc, #188]	; (b4b4 <k_sched_lock+0xd4>)
    b3f6:	f7ff f989 	bl	a70c <z_spin_lock_valid>
    b3fa:	b118      	cbz	r0, b404 <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    b3fc:	482d      	ldr	r0, [pc, #180]	; (b4b4 <k_sched_lock+0xd4>)
    b3fe:	f7ff f9a5 	bl	a74c <z_spin_lock_set_owner>
	return k;
    b402:	e022      	b.n	b44a <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b404:	4e2c      	ldr	r6, [pc, #176]	; (b4b8 <k_sched_lock+0xd8>)
    b406:	238e      	movs	r3, #142	; 0x8e
    b408:	4632      	mov	r2, r6
    b40a:	492c      	ldr	r1, [pc, #176]	; (b4bc <k_sched_lock+0xdc>)
    b40c:	482c      	ldr	r0, [pc, #176]	; (b4c0 <k_sched_lock+0xe0>)
    b40e:	f003 fe89 	bl	f124 <assert_print>
    b412:	4928      	ldr	r1, [pc, #160]	; (b4b4 <k_sched_lock+0xd4>)
    b414:	482b      	ldr	r0, [pc, #172]	; (b4c4 <k_sched_lock+0xe4>)
    b416:	f003 fe85 	bl	f124 <assert_print>
    b41a:	218e      	movs	r1, #142	; 0x8e
    b41c:	4630      	mov	r0, r6
    b41e:	f003 fe7a 	bl	f116 <assert_post_action>
    b422:	e7eb      	b.n	b3fc <k_sched_lock+0x1c>
	__ASSERT(_current->base.sched_locked != 1U, "");
    b424:	4b28      	ldr	r3, [pc, #160]	; (b4c8 <k_sched_lock+0xe8>)
    b426:	689b      	ldr	r3, [r3, #8]
    b428:	7bdb      	ldrb	r3, [r3, #15]
    b42a:	2b01      	cmp	r3, #1
    b42c:	d022      	beq.n	b474 <k_sched_lock+0x94>
	--_current->base.sched_locked;
    b42e:	4b26      	ldr	r3, [pc, #152]	; (b4c8 <k_sched_lock+0xe8>)
    b430:	689a      	ldr	r2, [r3, #8]
    b432:	7bd3      	ldrb	r3, [r2, #15]
    b434:	3b01      	subs	r3, #1
    b436:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b438:	481e      	ldr	r0, [pc, #120]	; (b4b4 <k_sched_lock+0xd4>)
    b43a:	f7ff f977 	bl	a72c <z_spin_unlock_valid>
    b43e:	b340      	cbz	r0, b492 <k_sched_lock+0xb2>
	__asm__ volatile(
    b440:	f385 8811 	msr	BASEPRI, r5
    b444:	f3bf 8f6f 	isb	sy
    b448:	2401      	movs	r4, #1
    b44a:	2c00      	cmp	r4, #0
    b44c:	d131      	bne.n	b4b2 <k_sched_lock+0xd2>
    b44e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    b452:	2b00      	cmp	r3, #0
    b454:	d0e6      	beq.n	b424 <k_sched_lock+0x44>
    b456:	4c1d      	ldr	r4, [pc, #116]	; (b4cc <k_sched_lock+0xec>)
    b458:	23fd      	movs	r3, #253	; 0xfd
    b45a:	4622      	mov	r2, r4
    b45c:	491c      	ldr	r1, [pc, #112]	; (b4d0 <k_sched_lock+0xf0>)
    b45e:	4818      	ldr	r0, [pc, #96]	; (b4c0 <k_sched_lock+0xe0>)
    b460:	f003 fe60 	bl	f124 <assert_print>
    b464:	481b      	ldr	r0, [pc, #108]	; (b4d4 <k_sched_lock+0xf4>)
    b466:	f003 fe5d 	bl	f124 <assert_print>
    b46a:	21fd      	movs	r1, #253	; 0xfd
    b46c:	4620      	mov	r0, r4
    b46e:	f003 fe52 	bl	f116 <assert_post_action>
    b472:	e7d7      	b.n	b424 <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    b474:	4c15      	ldr	r4, [pc, #84]	; (b4cc <k_sched_lock+0xec>)
    b476:	23fe      	movs	r3, #254	; 0xfe
    b478:	4622      	mov	r2, r4
    b47a:	4917      	ldr	r1, [pc, #92]	; (b4d8 <k_sched_lock+0xf8>)
    b47c:	4810      	ldr	r0, [pc, #64]	; (b4c0 <k_sched_lock+0xe0>)
    b47e:	f003 fe51 	bl	f124 <assert_print>
    b482:	4814      	ldr	r0, [pc, #80]	; (b4d4 <k_sched_lock+0xf4>)
    b484:	f003 fe4e 	bl	f124 <assert_print>
    b488:	21fe      	movs	r1, #254	; 0xfe
    b48a:	4620      	mov	r0, r4
    b48c:	f003 fe43 	bl	f116 <assert_post_action>
    b490:	e7cd      	b.n	b42e <k_sched_lock+0x4e>
    b492:	4c09      	ldr	r4, [pc, #36]	; (b4b8 <k_sched_lock+0xd8>)
    b494:	23b9      	movs	r3, #185	; 0xb9
    b496:	4622      	mov	r2, r4
    b498:	4910      	ldr	r1, [pc, #64]	; (b4dc <k_sched_lock+0xfc>)
    b49a:	4809      	ldr	r0, [pc, #36]	; (b4c0 <k_sched_lock+0xe0>)
    b49c:	f003 fe42 	bl	f124 <assert_print>
    b4a0:	4904      	ldr	r1, [pc, #16]	; (b4b4 <k_sched_lock+0xd4>)
    b4a2:	480f      	ldr	r0, [pc, #60]	; (b4e0 <k_sched_lock+0x100>)
    b4a4:	f003 fe3e 	bl	f124 <assert_print>
    b4a8:	21b9      	movs	r1, #185	; 0xb9
    b4aa:	4620      	mov	r0, r4
    b4ac:	f003 fe33 	bl	f116 <assert_post_action>
    b4b0:	e7c6      	b.n	b440 <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    b4b2:	bd70      	pop	{r4, r5, r6, pc}
    b4b4:	2000d520 	.word	0x2000d520
    b4b8:	000116c0 	.word	0x000116c0
    b4bc:	00011720 	.word	0x00011720
    b4c0:	00011514 	.word	0x00011514
    b4c4:	00011738 	.word	0x00011738
    b4c8:	2000d4e4 	.word	0x2000d4e4
    b4cc:	00012f44 	.word	0x00012f44
    b4d0:	00012e28 	.word	0x00012e28
    b4d4:	00012f70 	.word	0x00012f70
    b4d8:	00012f74 	.word	0x00012f74
    b4dc:	000116f0 	.word	0x000116f0
    b4e0:	00011708 	.word	0x00011708

0000b4e4 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    b4e4:	b538      	push	{r3, r4, r5, lr}
    b4e6:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b4e8:	4b0c      	ldr	r3, [pc, #48]	; (b51c <z_priq_dumb_remove+0x38>)
    b4ea:	4299      	cmp	r1, r3
    b4ec:	d007      	beq.n	b4fe <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    b4ee:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    b4f0:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    b4f2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b4f4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b4f6:	2300      	movs	r3, #0
    b4f8:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    b4fa:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    b4fc:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b4fe:	4d08      	ldr	r5, [pc, #32]	; (b520 <z_priq_dumb_remove+0x3c>)
    b500:	f240 433d 	movw	r3, #1085	; 0x43d
    b504:	462a      	mov	r2, r5
    b506:	4907      	ldr	r1, [pc, #28]	; (b524 <z_priq_dumb_remove+0x40>)
    b508:	4807      	ldr	r0, [pc, #28]	; (b528 <z_priq_dumb_remove+0x44>)
    b50a:	f003 fe0b 	bl	f124 <assert_print>
    b50e:	f240 413d 	movw	r1, #1085	; 0x43d
    b512:	4628      	mov	r0, r5
    b514:	f003 fdff 	bl	f116 <assert_post_action>
    b518:	e7e9      	b.n	b4ee <z_priq_dumb_remove+0xa>
    b51a:	bf00      	nop
    b51c:	200047c8 	.word	0x200047c8
    b520:	00013018 	.word	0x00013018
    b524:	00013054 	.word	0x00013054
    b528:	00011514 	.word	0x00011514

0000b52c <update_cache>:
{
    b52c:	b538      	push	{r3, r4, r5, lr}
    b52e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    b530:	4819      	ldr	r0, [pc, #100]	; (b598 <update_cache+0x6c>)
    b532:	f005 f800 	bl	10536 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    b536:	4605      	mov	r5, r0
    b538:	b188      	cbz	r0, b55e <update_cache+0x32>
	if (preempt_ok != 0) {
    b53a:	bb14      	cbnz	r4, b582 <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    b53c:	4b17      	ldr	r3, [pc, #92]	; (b59c <update_cache+0x70>)
    b53e:	689b      	ldr	r3, [r3, #8]
    b540:	b183      	cbz	r3, b564 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    b542:	4b16      	ldr	r3, [pc, #88]	; (b59c <update_cache+0x70>)
    b544:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    b546:	7b5a      	ldrb	r2, [r3, #13]
    b548:	f012 0f1f 	tst.w	r2, #31
    b54c:	d119      	bne.n	b582 <update_cache+0x56>
	return node->next != NULL;
    b54e:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    b550:	b9ba      	cbnz	r2, b582 <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    b552:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    b554:	2a7f      	cmp	r2, #127	; 0x7f
    b556:	d914      	bls.n	b582 <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    b558:	4a10      	ldr	r2, [pc, #64]	; (b59c <update_cache+0x70>)
    b55a:	61d3      	str	r3, [r2, #28]
    b55c:	e01a      	b.n	b594 <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    b55e:	4b0f      	ldr	r3, [pc, #60]	; (b59c <update_cache+0x70>)
    b560:	68dd      	ldr	r5, [r3, #12]
    b562:	e7ea      	b.n	b53a <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    b564:	4c0e      	ldr	r4, [pc, #56]	; (b5a0 <update_cache+0x74>)
    b566:	2389      	movs	r3, #137	; 0x89
    b568:	4622      	mov	r2, r4
    b56a:	490e      	ldr	r1, [pc, #56]	; (b5a4 <update_cache+0x78>)
    b56c:	480e      	ldr	r0, [pc, #56]	; (b5a8 <update_cache+0x7c>)
    b56e:	f003 fdd9 	bl	f124 <assert_print>
    b572:	480e      	ldr	r0, [pc, #56]	; (b5ac <update_cache+0x80>)
    b574:	f003 fdd6 	bl	f124 <assert_print>
    b578:	2189      	movs	r1, #137	; 0x89
    b57a:	4620      	mov	r0, r4
    b57c:	f003 fdcb 	bl	f116 <assert_post_action>
    b580:	e7df      	b.n	b542 <update_cache+0x16>
		if (thread != _current) {
    b582:	4b06      	ldr	r3, [pc, #24]	; (b59c <update_cache+0x70>)
    b584:	689b      	ldr	r3, [r3, #8]
    b586:	42ab      	cmp	r3, r5
    b588:	d002      	beq.n	b590 <update_cache+0x64>
			z_reset_time_slice(thread);
    b58a:	4628      	mov	r0, r5
    b58c:	f7ff fdf6 	bl	b17c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    b590:	4b02      	ldr	r3, [pc, #8]	; (b59c <update_cache+0x70>)
    b592:	61dd      	str	r5, [r3, #28]
}
    b594:	bd38      	pop	{r3, r4, r5, pc}
    b596:	bf00      	nop
    b598:	2000d504 	.word	0x2000d504
    b59c:	2000d4e4 	.word	0x2000d4e4
    b5a0:	00013018 	.word	0x00013018
    b5a4:	00013078 	.word	0x00013078
    b5a8:	00011514 	.word	0x00011514
    b5ac:	00012f70 	.word	0x00012f70

0000b5b0 <move_thread_to_end_of_prio_q>:
{
    b5b0:	b538      	push	{r3, r4, r5, lr}
    b5b2:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    b5b4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    b5b6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    b5ba:	2b00      	cmp	r3, #0
    b5bc:	db2b      	blt.n	b616 <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    b5be:	7b6b      	ldrb	r3, [r5, #13]
    b5c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b5c4:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b5c6:	4b22      	ldr	r3, [pc, #136]	; (b650 <move_thread_to_end_of_prio_q+0xa0>)
    b5c8:	429d      	cmp	r5, r3
    b5ca:	d02c      	beq.n	b626 <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    b5cc:	4b21      	ldr	r3, [pc, #132]	; (b654 <move_thread_to_end_of_prio_q+0xa4>)
    b5ce:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b5d2:	429c      	cmp	r4, r3
    b5d4:	d039      	beq.n	b64a <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b5d6:	b16c      	cbz	r4, b5f4 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b5d8:	4621      	mov	r1, r4
    b5da:	4628      	mov	r0, r5
    b5dc:	f004 ff8c 	bl	104f8 <z_sched_prio_cmp>
    b5e0:	2800      	cmp	r0, #0
    b5e2:	dc2c      	bgt.n	b63e <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b5e4:	b134      	cbz	r4, b5f4 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    b5e6:	4b1b      	ldr	r3, [pc, #108]	; (b654 <move_thread_to_end_of_prio_q+0xa4>)
    b5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b5ea:	429c      	cmp	r4, r3
    b5ec:	d002      	beq.n	b5f4 <move_thread_to_end_of_prio_q+0x44>
    b5ee:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b5f0:	2c00      	cmp	r4, #0
    b5f2:	d1f0      	bne.n	b5d6 <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    b5f4:	4b17      	ldr	r3, [pc, #92]	; (b654 <move_thread_to_end_of_prio_q+0xa4>)
    b5f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    b5f8:	f103 0120 	add.w	r1, r3, #32
    b5fc:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    b5fe:	606a      	str	r2, [r5, #4]
	tail->next = node;
    b600:	6015      	str	r5, [r2, #0]
	list->tail = node;
    b602:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    b604:	4b13      	ldr	r3, [pc, #76]	; (b654 <move_thread_to_end_of_prio_q+0xa4>)
    b606:	6898      	ldr	r0, [r3, #8]
    b608:	42a8      	cmp	r0, r5
    b60a:	bf14      	ite	ne
    b60c:	2000      	movne	r0, #0
    b60e:	2001      	moveq	r0, #1
    b610:	f7ff ff8c 	bl	b52c <update_cache>
}
    b614:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b616:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b61a:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    b61c:	4601      	mov	r1, r0
    b61e:	480e      	ldr	r0, [pc, #56]	; (b658 <move_thread_to_end_of_prio_q+0xa8>)
    b620:	f7ff ff60 	bl	b4e4 <z_priq_dumb_remove>
}
    b624:	e7cb      	b.n	b5be <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b626:	4c0d      	ldr	r4, [pc, #52]	; (b65c <move_thread_to_end_of_prio_q+0xac>)
    b628:	23ba      	movs	r3, #186	; 0xba
    b62a:	4622      	mov	r2, r4
    b62c:	490c      	ldr	r1, [pc, #48]	; (b660 <move_thread_to_end_of_prio_q+0xb0>)
    b62e:	480d      	ldr	r0, [pc, #52]	; (b664 <move_thread_to_end_of_prio_q+0xb4>)
    b630:	f003 fd78 	bl	f124 <assert_print>
    b634:	21ba      	movs	r1, #186	; 0xba
    b636:	4620      	mov	r0, r4
    b638:	f003 fd6d 	bl	f116 <assert_post_action>
    b63c:	e7c6      	b.n	b5cc <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    b63e:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    b640:	606b      	str	r3, [r5, #4]
	node->next = successor;
    b642:	602c      	str	r4, [r5, #0]
	prev->next = node;
    b644:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    b646:	6065      	str	r5, [r4, #4]
}
    b648:	e7dc      	b.n	b604 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b64a:	2400      	movs	r4, #0
    b64c:	e7c3      	b.n	b5d6 <move_thread_to_end_of_prio_q+0x26>
    b64e:	bf00      	nop
    b650:	200047c8 	.word	0x200047c8
    b654:	2000d4e4 	.word	0x2000d4e4
    b658:	2000d504 	.word	0x2000d504
    b65c:	00013018 	.word	0x00013018
    b660:	00013054 	.word	0x00013054
    b664:	00011514 	.word	0x00011514

0000b668 <slice_expired_locked>:
{
    b668:	b538      	push	{r3, r4, r5, lr}
    b66a:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    b66c:	4b07      	ldr	r3, [pc, #28]	; (b68c <slice_expired_locked+0x24>)
    b66e:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    b670:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    b672:	f013 0f1f 	tst.w	r3, #31
    b676:	d004      	beq.n	b682 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    b678:	4628      	mov	r0, r5
    b67a:	f7ff fd7f 	bl	b17c <z_reset_time_slice>
}
    b67e:	4620      	mov	r0, r4
    b680:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    b682:	4628      	mov	r0, r5
    b684:	f7ff ff94 	bl	b5b0 <move_thread_to_end_of_prio_q>
    b688:	e7f6      	b.n	b678 <slice_expired_locked+0x10>
    b68a:	bf00      	nop
    b68c:	2000d4e4 	.word	0x2000d4e4

0000b690 <z_time_slice>:
{
    b690:	b570      	push	{r4, r5, r6, lr}
    b692:	4604      	mov	r4, r0
	__asm__ volatile(
    b694:	f04f 0320 	mov.w	r3, #32
    b698:	f3ef 8511 	mrs	r5, BASEPRI
    b69c:	f383 8812 	msr	BASEPRI_MAX, r3
    b6a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b6a4:	4842      	ldr	r0, [pc, #264]	; (b7b0 <z_time_slice+0x120>)
    b6a6:	f7ff f831 	bl	a70c <z_spin_lock_valid>
    b6aa:	b310      	cbz	r0, b6f2 <z_time_slice+0x62>
	z_spin_lock_set_owner(l);
    b6ac:	4840      	ldr	r0, [pc, #256]	; (b7b0 <z_time_slice+0x120>)
    b6ae:	f7ff f84d 	bl	a74c <z_spin_lock_set_owner>
	return k;
    b6b2:	462b      	mov	r3, r5
	if (pending_current == _current) {
    b6b4:	4a3f      	ldr	r2, [pc, #252]	; (b7b4 <z_time_slice+0x124>)
    b6b6:	6892      	ldr	r2, [r2, #8]
    b6b8:	493f      	ldr	r1, [pc, #252]	; (b7b8 <z_time_slice+0x128>)
    b6ba:	6809      	ldr	r1, [r1, #0]
    b6bc:	428a      	cmp	r2, r1
    b6be:	d028      	beq.n	b712 <z_time_slice+0x82>
	pending_current = NULL;
    b6c0:	493d      	ldr	r1, [pc, #244]	; (b7b8 <z_time_slice+0x128>)
    b6c2:	2000      	movs	r0, #0
    b6c4:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    b6c6:	493d      	ldr	r1, [pc, #244]	; (b7bc <z_time_slice+0x12c>)
    b6c8:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    b6ca:	2900      	cmp	r1, #0
    b6cc:	d052      	beq.n	b774 <z_time_slice+0xe4>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    b6ce:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    b6d0:	297f      	cmp	r1, #127	; 0x7f
    b6d2:	d83a      	bhi.n	b74a <z_time_slice+0xba>
    b6d4:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    b6d6:	f011 0f1f 	tst.w	r1, #31
    b6da:	d140      	bne.n	b75e <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    b6dc:	f992 000e 	ldrsb.w	r0, [r2, #14]
    b6e0:	4937      	ldr	r1, [pc, #220]	; (b7c0 <z_time_slice+0x130>)
    b6e2:	6809      	ldr	r1, [r1, #0]
    b6e4:	4288      	cmp	r0, r1
    b6e6:	db3c      	blt.n	b762 <z_time_slice+0xd2>
		&& !z_is_idle_thread_object(thread);
    b6e8:	4936      	ldr	r1, [pc, #216]	; (b7c4 <z_time_slice+0x134>)
    b6ea:	428a      	cmp	r2, r1
    b6ec:	d03b      	beq.n	b766 <z_time_slice+0xd6>
    b6ee:	2201      	movs	r2, #1
    b6f0:	e02c      	b.n	b74c <z_time_slice+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b6f2:	4e35      	ldr	r6, [pc, #212]	; (b7c8 <z_time_slice+0x138>)
    b6f4:	238e      	movs	r3, #142	; 0x8e
    b6f6:	4632      	mov	r2, r6
    b6f8:	4934      	ldr	r1, [pc, #208]	; (b7cc <z_time_slice+0x13c>)
    b6fa:	4835      	ldr	r0, [pc, #212]	; (b7d0 <z_time_slice+0x140>)
    b6fc:	f003 fd12 	bl	f124 <assert_print>
    b700:	492b      	ldr	r1, [pc, #172]	; (b7b0 <z_time_slice+0x120>)
    b702:	4834      	ldr	r0, [pc, #208]	; (b7d4 <z_time_slice+0x144>)
    b704:	f003 fd0e 	bl	f124 <assert_print>
    b708:	218e      	movs	r1, #142	; 0x8e
    b70a:	4630      	mov	r0, r6
    b70c:	f003 fd03 	bl	f116 <assert_post_action>
    b710:	e7cc      	b.n	b6ac <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    b712:	4610      	mov	r0, r2
    b714:	f7ff fd32 	bl	b17c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b718:	4825      	ldr	r0, [pc, #148]	; (b7b0 <z_time_slice+0x120>)
    b71a:	f7ff f807 	bl	a72c <z_spin_unlock_valid>
    b71e:	b120      	cbz	r0, b72a <z_time_slice+0x9a>
	__asm__ volatile(
    b720:	f385 8811 	msr	BASEPRI, r5
    b724:	f3bf 8f6f 	isb	sy
		return;
    b728:	e030      	b.n	b78c <z_time_slice+0xfc>
    b72a:	4c27      	ldr	r4, [pc, #156]	; (b7c8 <z_time_slice+0x138>)
    b72c:	23b9      	movs	r3, #185	; 0xb9
    b72e:	4622      	mov	r2, r4
    b730:	4929      	ldr	r1, [pc, #164]	; (b7d8 <z_time_slice+0x148>)
    b732:	4827      	ldr	r0, [pc, #156]	; (b7d0 <z_time_slice+0x140>)
    b734:	f003 fcf6 	bl	f124 <assert_print>
    b738:	491d      	ldr	r1, [pc, #116]	; (b7b0 <z_time_slice+0x120>)
    b73a:	4828      	ldr	r0, [pc, #160]	; (b7dc <z_time_slice+0x14c>)
    b73c:	f003 fcf2 	bl	f124 <assert_print>
    b740:	21b9      	movs	r1, #185	; 0xb9
    b742:	4620      	mov	r0, r4
    b744:	f003 fce7 	bl	f116 <assert_post_action>
    b748:	e7ea      	b.n	b720 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    b74a:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    b74c:	b192      	cbz	r2, b774 <z_time_slice+0xe4>
		if (ticks >= _current_cpu->slice_ticks) {
    b74e:	4a19      	ldr	r2, [pc, #100]	; (b7b4 <z_time_slice+0x124>)
    b750:	6910      	ldr	r0, [r2, #16]
    b752:	42a0      	cmp	r0, r4
    b754:	dd09      	ble.n	b76a <z_time_slice+0xda>
			_current_cpu->slice_ticks -= ticks;
    b756:	1b00      	subs	r0, r0, r4
    b758:	4a16      	ldr	r2, [pc, #88]	; (b7b4 <z_time_slice+0x124>)
    b75a:	6110      	str	r0, [r2, #16]
    b75c:	e00d      	b.n	b77a <z_time_slice+0xea>
		&& !z_is_idle_thread_object(thread);
    b75e:	2200      	movs	r2, #0
    b760:	e7f4      	b.n	b74c <z_time_slice+0xbc>
    b762:	2200      	movs	r2, #0
    b764:	e7f2      	b.n	b74c <z_time_slice+0xbc>
    b766:	2200      	movs	r2, #0
    b768:	e7f0      	b.n	b74c <z_time_slice+0xbc>
			key = slice_expired_locked(key);
    b76a:	4628      	mov	r0, r5
    b76c:	f7ff ff7c 	bl	b668 <slice_expired_locked>
    b770:	4603      	mov	r3, r0
    b772:	e002      	b.n	b77a <z_time_slice+0xea>
		_current_cpu->slice_ticks = 0;
    b774:	4a0f      	ldr	r2, [pc, #60]	; (b7b4 <z_time_slice+0x124>)
    b776:	2100      	movs	r1, #0
    b778:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    b77a:	461c      	mov	r4, r3
    b77c:	480c      	ldr	r0, [pc, #48]	; (b7b0 <z_time_slice+0x120>)
    b77e:	f7fe ffd5 	bl	a72c <z_spin_unlock_valid>
    b782:	b120      	cbz	r0, b78e <z_time_slice+0xfe>
    b784:	f384 8811 	msr	BASEPRI, r4
    b788:	f3bf 8f6f 	isb	sy
}
    b78c:	bd70      	pop	{r4, r5, r6, pc}
    b78e:	4d0e      	ldr	r5, [pc, #56]	; (b7c8 <z_time_slice+0x138>)
    b790:	23b9      	movs	r3, #185	; 0xb9
    b792:	462a      	mov	r2, r5
    b794:	4910      	ldr	r1, [pc, #64]	; (b7d8 <z_time_slice+0x148>)
    b796:	480e      	ldr	r0, [pc, #56]	; (b7d0 <z_time_slice+0x140>)
    b798:	f003 fcc4 	bl	f124 <assert_print>
    b79c:	4904      	ldr	r1, [pc, #16]	; (b7b0 <z_time_slice+0x120>)
    b79e:	480f      	ldr	r0, [pc, #60]	; (b7dc <z_time_slice+0x14c>)
    b7a0:	f003 fcc0 	bl	f124 <assert_print>
    b7a4:	21b9      	movs	r1, #185	; 0xb9
    b7a6:	4628      	mov	r0, r5
    b7a8:	f003 fcb5 	bl	f116 <assert_post_action>
    b7ac:	e7ea      	b.n	b784 <z_time_slice+0xf4>
    b7ae:	bf00      	nop
    b7b0:	2000d520 	.word	0x2000d520
    b7b4:	2000d4e4 	.word	0x2000d4e4
    b7b8:	2000d51c 	.word	0x2000d51c
    b7bc:	2000d528 	.word	0x2000d528
    b7c0:	2000d524 	.word	0x2000d524
    b7c4:	200047c8 	.word	0x200047c8
    b7c8:	000116c0 	.word	0x000116c0
    b7cc:	00011720 	.word	0x00011720
    b7d0:	00011514 	.word	0x00011514
    b7d4:	00011738 	.word	0x00011738
    b7d8:	000116f0 	.word	0x000116f0
    b7dc:	00011708 	.word	0x00011708

0000b7e0 <ready_thread>:
{
    b7e0:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    b7e2:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    b7e4:	f990 200d 	ldrsb.w	r2, [r0, #13]
    b7e8:	2a00      	cmp	r2, #0
    b7ea:	db30      	blt.n	b84e <ready_thread+0x6e>
    b7ec:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b7ee:	f013 0f1f 	tst.w	r3, #31
    b7f2:	d105      	bne.n	b800 <ready_thread+0x20>
	return node->next != NULL;
    b7f4:	6982      	ldr	r2, [r0, #24]
    b7f6:	b10a      	cbz	r2, b7fc <ready_thread+0x1c>
    b7f8:	2200      	movs	r2, #0
    b7fa:	e002      	b.n	b802 <ready_thread+0x22>
    b7fc:	2201      	movs	r2, #1
    b7fe:	e000      	b.n	b802 <ready_thread+0x22>
    b800:	2200      	movs	r2, #0
    b802:	b322      	cbz	r2, b84e <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    b804:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b808:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b80a:	4b1b      	ldr	r3, [pc, #108]	; (b878 <ready_thread+0x98>)
    b80c:	429c      	cmp	r4, r3
    b80e:	d01f      	beq.n	b850 <ready_thread+0x70>
	return list->head == list;
    b810:	4b1a      	ldr	r3, [pc, #104]	; (b87c <ready_thread+0x9c>)
    b812:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b816:	429d      	cmp	r5, r3
    b818:	d02c      	beq.n	b874 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b81a:	b16d      	cbz	r5, b838 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b81c:	4629      	mov	r1, r5
    b81e:	4620      	mov	r0, r4
    b820:	f004 fe6a 	bl	104f8 <z_sched_prio_cmp>
    b824:	2800      	cmp	r0, #0
    b826:	dc1f      	bgt.n	b868 <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b828:	b135      	cbz	r5, b838 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    b82a:	4b14      	ldr	r3, [pc, #80]	; (b87c <ready_thread+0x9c>)
    b82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b82e:	429d      	cmp	r5, r3
    b830:	d002      	beq.n	b838 <ready_thread+0x58>
    b832:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b834:	2d00      	cmp	r5, #0
    b836:	d1f0      	bne.n	b81a <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    b838:	4b10      	ldr	r3, [pc, #64]	; (b87c <ready_thread+0x9c>)
    b83a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    b83c:	f103 0120 	add.w	r1, r3, #32
    b840:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    b842:	6062      	str	r2, [r4, #4]
	tail->next = node;
    b844:	6014      	str	r4, [r2, #0]
	list->tail = node;
    b846:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    b848:	2000      	movs	r0, #0
    b84a:	f7ff fe6f 	bl	b52c <update_cache>
}
    b84e:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b850:	4d0b      	ldr	r5, [pc, #44]	; (b880 <ready_thread+0xa0>)
    b852:	23ba      	movs	r3, #186	; 0xba
    b854:	462a      	mov	r2, r5
    b856:	490b      	ldr	r1, [pc, #44]	; (b884 <ready_thread+0xa4>)
    b858:	480b      	ldr	r0, [pc, #44]	; (b888 <ready_thread+0xa8>)
    b85a:	f003 fc63 	bl	f124 <assert_print>
    b85e:	21ba      	movs	r1, #186	; 0xba
    b860:	4628      	mov	r0, r5
    b862:	f003 fc58 	bl	f116 <assert_post_action>
    b866:	e7d3      	b.n	b810 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    b868:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    b86a:	6063      	str	r3, [r4, #4]
	node->next = successor;
    b86c:	6025      	str	r5, [r4, #0]
	prev->next = node;
    b86e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b870:	606c      	str	r4, [r5, #4]
}
    b872:	e7e9      	b.n	b848 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b874:	2500      	movs	r5, #0
    b876:	e7d0      	b.n	b81a <ready_thread+0x3a>
    b878:	200047c8 	.word	0x200047c8
    b87c:	2000d4e4 	.word	0x2000d4e4
    b880:	00013018 	.word	0x00013018
    b884:	00013054 	.word	0x00013054
    b888:	00011514 	.word	0x00011514

0000b88c <z_ready_thread>:
{
    b88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b88e:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    b890:	2400      	movs	r4, #0
	__asm__ volatile(
    b892:	f04f 0320 	mov.w	r3, #32
    b896:	f3ef 8611 	mrs	r6, BASEPRI
    b89a:	f383 8812 	msr	BASEPRI_MAX, r3
    b89e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b8a2:	481e      	ldr	r0, [pc, #120]	; (b91c <z_ready_thread+0x90>)
    b8a4:	f7fe ff32 	bl	a70c <z_spin_lock_valid>
    b8a8:	b118      	cbz	r0, b8b2 <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    b8aa:	481c      	ldr	r0, [pc, #112]	; (b91c <z_ready_thread+0x90>)
    b8ac:	f7fe ff4e 	bl	a74c <z_spin_lock_set_owner>
	return k;
    b8b0:	e018      	b.n	b8e4 <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b8b2:	4f1b      	ldr	r7, [pc, #108]	; (b920 <z_ready_thread+0x94>)
    b8b4:	238e      	movs	r3, #142	; 0x8e
    b8b6:	463a      	mov	r2, r7
    b8b8:	491a      	ldr	r1, [pc, #104]	; (b924 <z_ready_thread+0x98>)
    b8ba:	481b      	ldr	r0, [pc, #108]	; (b928 <z_ready_thread+0x9c>)
    b8bc:	f003 fc32 	bl	f124 <assert_print>
    b8c0:	4916      	ldr	r1, [pc, #88]	; (b91c <z_ready_thread+0x90>)
    b8c2:	481a      	ldr	r0, [pc, #104]	; (b92c <z_ready_thread+0xa0>)
    b8c4:	f003 fc2e 	bl	f124 <assert_print>
    b8c8:	218e      	movs	r1, #142	; 0x8e
    b8ca:	4638      	mov	r0, r7
    b8cc:	f003 fc23 	bl	f116 <assert_post_action>
    b8d0:	e7eb      	b.n	b8aa <z_ready_thread+0x1e>
			ready_thread(thread);
    b8d2:	4628      	mov	r0, r5
    b8d4:	f7ff ff84 	bl	b7e0 <ready_thread>
    b8d8:	e00a      	b.n	b8f0 <z_ready_thread+0x64>
	__asm__ volatile(
    b8da:	f386 8811 	msr	BASEPRI, r6
    b8de:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b8e2:	2401      	movs	r4, #1
    b8e4:	b9cc      	cbnz	r4, b91a <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    b8e6:	4628      	mov	r0, r5
    b8e8:	f004 fe04 	bl	104f4 <thread_active_elsewhere>
    b8ec:	2800      	cmp	r0, #0
    b8ee:	d0f0      	beq.n	b8d2 <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b8f0:	480a      	ldr	r0, [pc, #40]	; (b91c <z_ready_thread+0x90>)
    b8f2:	f7fe ff1b 	bl	a72c <z_spin_unlock_valid>
    b8f6:	2800      	cmp	r0, #0
    b8f8:	d1ef      	bne.n	b8da <z_ready_thread+0x4e>
    b8fa:	4c09      	ldr	r4, [pc, #36]	; (b920 <z_ready_thread+0x94>)
    b8fc:	23b9      	movs	r3, #185	; 0xb9
    b8fe:	4622      	mov	r2, r4
    b900:	490b      	ldr	r1, [pc, #44]	; (b930 <z_ready_thread+0xa4>)
    b902:	4809      	ldr	r0, [pc, #36]	; (b928 <z_ready_thread+0x9c>)
    b904:	f003 fc0e 	bl	f124 <assert_print>
    b908:	4904      	ldr	r1, [pc, #16]	; (b91c <z_ready_thread+0x90>)
    b90a:	480a      	ldr	r0, [pc, #40]	; (b934 <z_ready_thread+0xa8>)
    b90c:	f003 fc0a 	bl	f124 <assert_print>
    b910:	21b9      	movs	r1, #185	; 0xb9
    b912:	4620      	mov	r0, r4
    b914:	f003 fbff 	bl	f116 <assert_post_action>
    b918:	e7df      	b.n	b8da <z_ready_thread+0x4e>
}
    b91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b91c:	2000d520 	.word	0x2000d520
    b920:	000116c0 	.word	0x000116c0
    b924:	00011720 	.word	0x00011720
    b928:	00011514 	.word	0x00011514
    b92c:	00011738 	.word	0x00011738
    b930:	000116f0 	.word	0x000116f0
    b934:	00011708 	.word	0x00011708

0000b938 <z_sched_start>:
{
    b938:	b570      	push	{r4, r5, r6, lr}
    b93a:	4604      	mov	r4, r0
	__asm__ volatile(
    b93c:	f04f 0320 	mov.w	r3, #32
    b940:	f3ef 8511 	mrs	r5, BASEPRI
    b944:	f383 8812 	msr	BASEPRI_MAX, r3
    b948:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b94c:	481f      	ldr	r0, [pc, #124]	; (b9cc <z_sched_start+0x94>)
    b94e:	f7fe fedd 	bl	a70c <z_spin_lock_valid>
    b952:	b188      	cbz	r0, b978 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    b954:	481d      	ldr	r0, [pc, #116]	; (b9cc <z_sched_start+0x94>)
    b956:	f7fe fef9 	bl	a74c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    b95a:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    b95c:	f013 0f04 	tst.w	r3, #4
    b960:	d01a      	beq.n	b998 <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b962:	f023 0304 	bic.w	r3, r3, #4
    b966:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    b968:	4620      	mov	r0, r4
    b96a:	f7ff ff39 	bl	b7e0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    b96e:	4629      	mov	r1, r5
    b970:	4816      	ldr	r0, [pc, #88]	; (b9cc <z_sched_start+0x94>)
    b972:	f7ff fce7 	bl	b344 <z_reschedule>
}
    b976:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b978:	4e15      	ldr	r6, [pc, #84]	; (b9d0 <z_sched_start+0x98>)
    b97a:	238e      	movs	r3, #142	; 0x8e
    b97c:	4632      	mov	r2, r6
    b97e:	4915      	ldr	r1, [pc, #84]	; (b9d4 <z_sched_start+0x9c>)
    b980:	4815      	ldr	r0, [pc, #84]	; (b9d8 <z_sched_start+0xa0>)
    b982:	f003 fbcf 	bl	f124 <assert_print>
    b986:	4911      	ldr	r1, [pc, #68]	; (b9cc <z_sched_start+0x94>)
    b988:	4814      	ldr	r0, [pc, #80]	; (b9dc <z_sched_start+0xa4>)
    b98a:	f003 fbcb 	bl	f124 <assert_print>
    b98e:	218e      	movs	r1, #142	; 0x8e
    b990:	4630      	mov	r0, r6
    b992:	f003 fbc0 	bl	f116 <assert_post_action>
    b996:	e7dd      	b.n	b954 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b998:	480c      	ldr	r0, [pc, #48]	; (b9cc <z_sched_start+0x94>)
    b99a:	f7fe fec7 	bl	a72c <z_spin_unlock_valid>
    b99e:	b120      	cbz	r0, b9aa <z_sched_start+0x72>
	__asm__ volatile(
    b9a0:	f385 8811 	msr	BASEPRI, r5
    b9a4:	f3bf 8f6f 	isb	sy
		return;
    b9a8:	e7e5      	b.n	b976 <z_sched_start+0x3e>
    b9aa:	4c09      	ldr	r4, [pc, #36]	; (b9d0 <z_sched_start+0x98>)
    b9ac:	23b9      	movs	r3, #185	; 0xb9
    b9ae:	4622      	mov	r2, r4
    b9b0:	490b      	ldr	r1, [pc, #44]	; (b9e0 <z_sched_start+0xa8>)
    b9b2:	4809      	ldr	r0, [pc, #36]	; (b9d8 <z_sched_start+0xa0>)
    b9b4:	f003 fbb6 	bl	f124 <assert_print>
    b9b8:	4904      	ldr	r1, [pc, #16]	; (b9cc <z_sched_start+0x94>)
    b9ba:	480a      	ldr	r0, [pc, #40]	; (b9e4 <z_sched_start+0xac>)
    b9bc:	f003 fbb2 	bl	f124 <assert_print>
    b9c0:	21b9      	movs	r1, #185	; 0xb9
    b9c2:	4620      	mov	r0, r4
    b9c4:	f003 fba7 	bl	f116 <assert_post_action>
    b9c8:	e7ea      	b.n	b9a0 <z_sched_start+0x68>
    b9ca:	bf00      	nop
    b9cc:	2000d520 	.word	0x2000d520
    b9d0:	000116c0 	.word	0x000116c0
    b9d4:	00011720 	.word	0x00011720
    b9d8:	00011514 	.word	0x00011514
    b9dc:	00011738 	.word	0x00011738
    b9e0:	000116f0 	.word	0x000116f0
    b9e4:	00011708 	.word	0x00011708

0000b9e8 <z_thread_timeout>:
{
    b9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9ec:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    b9ee:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    b9f2:	2500      	movs	r5, #0
	__asm__ volatile(
    b9f4:	f04f 0320 	mov.w	r3, #32
    b9f8:	f3ef 8711 	mrs	r7, BASEPRI
    b9fc:	f383 8812 	msr	BASEPRI_MAX, r3
    ba00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ba04:	482b      	ldr	r0, [pc, #172]	; (bab4 <z_thread_timeout+0xcc>)
    ba06:	f7fe fe81 	bl	a70c <z_spin_lock_valid>
    ba0a:	b118      	cbz	r0, ba14 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    ba0c:	4829      	ldr	r0, [pc, #164]	; (bab4 <z_thread_timeout+0xcc>)
    ba0e:	f7fe fe9d 	bl	a74c <z_spin_lock_set_owner>
	return k;
    ba12:	e026      	b.n	ba62 <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ba14:	f8df 80a0 	ldr.w	r8, [pc, #160]	; bab8 <z_thread_timeout+0xd0>
    ba18:	238e      	movs	r3, #142	; 0x8e
    ba1a:	4642      	mov	r2, r8
    ba1c:	4927      	ldr	r1, [pc, #156]	; (babc <z_thread_timeout+0xd4>)
    ba1e:	4828      	ldr	r0, [pc, #160]	; (bac0 <z_thread_timeout+0xd8>)
    ba20:	f003 fb80 	bl	f124 <assert_print>
    ba24:	4923      	ldr	r1, [pc, #140]	; (bab4 <z_thread_timeout+0xcc>)
    ba26:	4827      	ldr	r0, [pc, #156]	; (bac4 <z_thread_timeout+0xdc>)
    ba28:	f003 fb7c 	bl	f124 <assert_print>
    ba2c:	218e      	movs	r1, #142	; 0x8e
    ba2e:	4640      	mov	r0, r8
    ba30:	f003 fb71 	bl	f116 <assert_post_action>
    ba34:	e7ea      	b.n	ba0c <z_thread_timeout+0x24>
    ba36:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    ba3a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    ba3e:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    ba42:	f023 0310 	bic.w	r3, r3, #16
    ba46:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    ba4a:	4630      	mov	r0, r6
    ba4c:	f7ff fec8 	bl	b7e0 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ba50:	4818      	ldr	r0, [pc, #96]	; (bab4 <z_thread_timeout+0xcc>)
    ba52:	f7fe fe6b 	bl	a72c <z_spin_unlock_valid>
    ba56:	b1d8      	cbz	r0, ba90 <z_thread_timeout+0xa8>
	__asm__ volatile(
    ba58:	f387 8811 	msr	BASEPRI, r7
    ba5c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    ba60:	2501      	movs	r5, #1
    ba62:	bb2d      	cbnz	r5, bab0 <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    ba64:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    ba68:	f013 0f28 	tst.w	r3, #40	; 0x28
    ba6c:	d1f0      	bne.n	ba50 <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    ba6e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    ba72:	2b00      	cmp	r3, #0
    ba74:	d0df      	beq.n	ba36 <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    ba76:	4630      	mov	r0, r6
    ba78:	f7ff fb56 	bl	b128 <pended_on_thread>
    ba7c:	4631      	mov	r1, r6
    ba7e:	f7ff fd31 	bl	b4e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    ba82:	7b73      	ldrb	r3, [r6, #13]
    ba84:	f023 0302 	bic.w	r3, r3, #2
    ba88:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    ba8a:	2300      	movs	r3, #0
    ba8c:	60b3      	str	r3, [r6, #8]
}
    ba8e:	e7d2      	b.n	ba36 <z_thread_timeout+0x4e>
    ba90:	4d09      	ldr	r5, [pc, #36]	; (bab8 <z_thread_timeout+0xd0>)
    ba92:	23b9      	movs	r3, #185	; 0xb9
    ba94:	462a      	mov	r2, r5
    ba96:	490c      	ldr	r1, [pc, #48]	; (bac8 <z_thread_timeout+0xe0>)
    ba98:	4809      	ldr	r0, [pc, #36]	; (bac0 <z_thread_timeout+0xd8>)
    ba9a:	f003 fb43 	bl	f124 <assert_print>
    ba9e:	4905      	ldr	r1, [pc, #20]	; (bab4 <z_thread_timeout+0xcc>)
    baa0:	480a      	ldr	r0, [pc, #40]	; (bacc <z_thread_timeout+0xe4>)
    baa2:	f003 fb3f 	bl	f124 <assert_print>
    baa6:	21b9      	movs	r1, #185	; 0xb9
    baa8:	4628      	mov	r0, r5
    baaa:	f003 fb34 	bl	f116 <assert_post_action>
    baae:	e7d3      	b.n	ba58 <z_thread_timeout+0x70>
}
    bab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bab4:	2000d520 	.word	0x2000d520
    bab8:	000116c0 	.word	0x000116c0
    babc:	00011720 	.word	0x00011720
    bac0:	00011514 	.word	0x00011514
    bac4:	00011738 	.word	0x00011738
    bac8:	000116f0 	.word	0x000116f0
    bacc:	00011708 	.word	0x00011708

0000bad0 <unready_thread>:
{
    bad0:	b510      	push	{r4, lr}
    bad2:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    bad4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    bad6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    bada:	2b00      	cmp	r3, #0
    badc:	db08      	blt.n	baf0 <unready_thread+0x20>
	update_cache(thread == _current);
    bade:	4b08      	ldr	r3, [pc, #32]	; (bb00 <unready_thread+0x30>)
    bae0:	6898      	ldr	r0, [r3, #8]
    bae2:	42a0      	cmp	r0, r4
    bae4:	bf14      	ite	ne
    bae6:	2000      	movne	r0, #0
    bae8:	2001      	moveq	r0, #1
    baea:	f7ff fd1f 	bl	b52c <update_cache>
}
    baee:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    baf0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    baf4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    baf6:	4601      	mov	r1, r0
    baf8:	4802      	ldr	r0, [pc, #8]	; (bb04 <unready_thread+0x34>)
    bafa:	f7ff fcf3 	bl	b4e4 <z_priq_dumb_remove>
}
    bafe:	e7ee      	b.n	bade <unready_thread+0xe>
    bb00:	2000d4e4 	.word	0x2000d4e4
    bb04:	2000d504 	.word	0x2000d504

0000bb08 <add_to_waitq_locked>:
{
    bb08:	b570      	push	{r4, r5, r6, lr}
    bb0a:	4605      	mov	r5, r0
    bb0c:	460e      	mov	r6, r1
	unready_thread(thread);
    bb0e:	f7ff ffdf 	bl	bad0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    bb12:	7b6b      	ldrb	r3, [r5, #13]
    bb14:	f043 0302 	orr.w	r3, r3, #2
    bb18:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    bb1a:	b1ce      	cbz	r6, bb50 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    bb1c:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    bb1e:	4b17      	ldr	r3, [pc, #92]	; (bb7c <add_to_waitq_locked+0x74>)
    bb20:	429d      	cmp	r5, r3
    bb22:	d016      	beq.n	bb52 <add_to_waitq_locked+0x4a>
	return list->head == list;
    bb24:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bb26:	42a6      	cmp	r6, r4
    bb28:	d025      	beq.n	bb76 <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bb2a:	b164      	cbz	r4, bb46 <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bb2c:	4621      	mov	r1, r4
    bb2e:	4628      	mov	r0, r5
    bb30:	f004 fce2 	bl	104f8 <z_sched_prio_cmp>
    bb34:	2800      	cmp	r0, #0
    bb36:	dc18      	bgt.n	bb6a <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    bb38:	b12c      	cbz	r4, bb46 <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    bb3a:	6873      	ldr	r3, [r6, #4]
    bb3c:	429c      	cmp	r4, r3
    bb3e:	d002      	beq.n	bb46 <add_to_waitq_locked+0x3e>
    bb40:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bb42:	2c00      	cmp	r4, #0
    bb44:	d1f1      	bne.n	bb2a <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    bb46:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    bb48:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    bb4a:	606b      	str	r3, [r5, #4]
	tail->next = node;
    bb4c:	601d      	str	r5, [r3, #0]
	list->tail = node;
    bb4e:	6075      	str	r5, [r6, #4]
}
    bb50:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    bb52:	4c0b      	ldr	r4, [pc, #44]	; (bb80 <add_to_waitq_locked+0x78>)
    bb54:	23ba      	movs	r3, #186	; 0xba
    bb56:	4622      	mov	r2, r4
    bb58:	490a      	ldr	r1, [pc, #40]	; (bb84 <add_to_waitq_locked+0x7c>)
    bb5a:	480b      	ldr	r0, [pc, #44]	; (bb88 <add_to_waitq_locked+0x80>)
    bb5c:	f003 fae2 	bl	f124 <assert_print>
    bb60:	21ba      	movs	r1, #186	; 0xba
    bb62:	4620      	mov	r0, r4
    bb64:	f003 fad7 	bl	f116 <assert_post_action>
    bb68:	e7dc      	b.n	bb24 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    bb6a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    bb6c:	606b      	str	r3, [r5, #4]
	node->next = successor;
    bb6e:	602c      	str	r4, [r5, #0]
	prev->next = node;
    bb70:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    bb72:	6065      	str	r5, [r4, #4]
}
    bb74:	e7ec      	b.n	bb50 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bb76:	2400      	movs	r4, #0
    bb78:	e7d7      	b.n	bb2a <add_to_waitq_locked+0x22>
    bb7a:	bf00      	nop
    bb7c:	200047c8 	.word	0x200047c8
    bb80:	00013018 	.word	0x00013018
    bb84:	00013054 	.word	0x00013054
    bb88:	00011514 	.word	0x00011514

0000bb8c <pend>:
{
    bb8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb90:	4605      	mov	r5, r0
    bb92:	460e      	mov	r6, r1
    bb94:	4691      	mov	r9, r2
    bb96:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    bb98:	2400      	movs	r4, #0
	__asm__ volatile(
    bb9a:	f04f 0320 	mov.w	r3, #32
    bb9e:	f3ef 8711 	mrs	r7, BASEPRI
    bba2:	f383 8812 	msr	BASEPRI_MAX, r3
    bba6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bbaa:	481f      	ldr	r0, [pc, #124]	; (bc28 <pend+0x9c>)
    bbac:	f7fe fdae 	bl	a70c <z_spin_lock_valid>
    bbb0:	b118      	cbz	r0, bbba <pend+0x2e>
	z_spin_lock_set_owner(l);
    bbb2:	481d      	ldr	r0, [pc, #116]	; (bc28 <pend+0x9c>)
    bbb4:	f7fe fdca 	bl	a74c <z_spin_lock_set_owner>
	return k;
    bbb8:	e015      	b.n	bbe6 <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bbba:	f8df a070 	ldr.w	sl, [pc, #112]	; bc2c <pend+0xa0>
    bbbe:	238e      	movs	r3, #142	; 0x8e
    bbc0:	4652      	mov	r2, sl
    bbc2:	491b      	ldr	r1, [pc, #108]	; (bc30 <pend+0xa4>)
    bbc4:	481b      	ldr	r0, [pc, #108]	; (bc34 <pend+0xa8>)
    bbc6:	f003 faad 	bl	f124 <assert_print>
    bbca:	4917      	ldr	r1, [pc, #92]	; (bc28 <pend+0x9c>)
    bbcc:	481a      	ldr	r0, [pc, #104]	; (bc38 <pend+0xac>)
    bbce:	f003 faa9 	bl	f124 <assert_print>
    bbd2:	218e      	movs	r1, #142	; 0x8e
    bbd4:	4650      	mov	r0, sl
    bbd6:	f003 fa9e 	bl	f116 <assert_post_action>
    bbda:	e7ea      	b.n	bbb2 <pend+0x26>
	__asm__ volatile(
    bbdc:	f387 8811 	msr	BASEPRI, r7
    bbe0:	f3bf 8f6f 	isb	sy
    bbe4:	2401      	movs	r4, #1
    bbe6:	b9c4      	cbnz	r4, bc1a <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    bbe8:	4631      	mov	r1, r6
    bbea:	4628      	mov	r0, r5
    bbec:	f7ff ff8c 	bl	bb08 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bbf0:	480d      	ldr	r0, [pc, #52]	; (bc28 <pend+0x9c>)
    bbf2:	f7fe fd9b 	bl	a72c <z_spin_unlock_valid>
    bbf6:	2800      	cmp	r0, #0
    bbf8:	d1f0      	bne.n	bbdc <pend+0x50>
    bbfa:	4c0c      	ldr	r4, [pc, #48]	; (bc2c <pend+0xa0>)
    bbfc:	23b9      	movs	r3, #185	; 0xb9
    bbfe:	4622      	mov	r2, r4
    bc00:	490e      	ldr	r1, [pc, #56]	; (bc3c <pend+0xb0>)
    bc02:	480c      	ldr	r0, [pc, #48]	; (bc34 <pend+0xa8>)
    bc04:	f003 fa8e 	bl	f124 <assert_print>
    bc08:	4907      	ldr	r1, [pc, #28]	; (bc28 <pend+0x9c>)
    bc0a:	480d      	ldr	r0, [pc, #52]	; (bc40 <pend+0xb4>)
    bc0c:	f003 fa8a 	bl	f124 <assert_print>
    bc10:	21b9      	movs	r1, #185	; 0xb9
    bc12:	4620      	mov	r0, r4
    bc14:	f003 fa7f 	bl	f116 <assert_post_action>
    bc18:	e7e0      	b.n	bbdc <pend+0x50>
	add_thread_timeout(thread, timeout);
    bc1a:	464a      	mov	r2, r9
    bc1c:	4643      	mov	r3, r8
    bc1e:	4628      	mov	r0, r5
    bc20:	f7ff fa9c 	bl	b15c <add_thread_timeout>
}
    bc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bc28:	2000d520 	.word	0x2000d520
    bc2c:	000116c0 	.word	0x000116c0
    bc30:	00011720 	.word	0x00011720
    bc34:	00011514 	.word	0x00011514
    bc38:	00011738 	.word	0x00011738
    bc3c:	000116f0 	.word	0x000116f0
    bc40:	00011708 	.word	0x00011708

0000bc44 <z_pend_curr>:
{
    bc44:	b570      	push	{r4, r5, r6, lr}
    bc46:	4604      	mov	r4, r0
    bc48:	460d      	mov	r5, r1
    bc4a:	4611      	mov	r1, r2
	pending_current = _current;
    bc4c:	4b0f      	ldr	r3, [pc, #60]	; (bc8c <z_pend_curr+0x48>)
    bc4e:	6898      	ldr	r0, [r3, #8]
    bc50:	4b0f      	ldr	r3, [pc, #60]	; (bc90 <z_pend_curr+0x4c>)
    bc52:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    bc54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    bc58:	f7ff ff98 	bl	bb8c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bc5c:	4620      	mov	r0, r4
    bc5e:	f7fe fd65 	bl	a72c <z_spin_unlock_valid>
    bc62:	b118      	cbz	r0, bc6c <z_pend_curr+0x28>
    bc64:	4628      	mov	r0, r5
    bc66:	f7fa f8bd 	bl	5de4 <arch_swap>
}
    bc6a:	bd70      	pop	{r4, r5, r6, pc}
    bc6c:	4e09      	ldr	r6, [pc, #36]	; (bc94 <z_pend_curr+0x50>)
    bc6e:	23d0      	movs	r3, #208	; 0xd0
    bc70:	4632      	mov	r2, r6
    bc72:	4909      	ldr	r1, [pc, #36]	; (bc98 <z_pend_curr+0x54>)
    bc74:	4809      	ldr	r0, [pc, #36]	; (bc9c <z_pend_curr+0x58>)
    bc76:	f003 fa55 	bl	f124 <assert_print>
    bc7a:	4621      	mov	r1, r4
    bc7c:	4808      	ldr	r0, [pc, #32]	; (bca0 <z_pend_curr+0x5c>)
    bc7e:	f003 fa51 	bl	f124 <assert_print>
    bc82:	21d0      	movs	r1, #208	; 0xd0
    bc84:	4630      	mov	r0, r6
    bc86:	f003 fa46 	bl	f116 <assert_post_action>
    bc8a:	e7eb      	b.n	bc64 <z_pend_curr+0x20>
    bc8c:	2000d4e4 	.word	0x2000d4e4
    bc90:	2000d51c 	.word	0x2000d51c
    bc94:	000116c0 	.word	0x000116c0
    bc98:	000116f0 	.word	0x000116f0
    bc9c:	00011514 	.word	0x00011514
    bca0:	00011708 	.word	0x00011708

0000bca4 <z_set_prio>:
{
    bca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bca8:	4604      	mov	r4, r0
    bcaa:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    bcac:	2500      	movs	r5, #0
	__asm__ volatile(
    bcae:	f04f 0320 	mov.w	r3, #32
    bcb2:	f3ef 8811 	mrs	r8, BASEPRI
    bcb6:	f383 8812 	msr	BASEPRI_MAX, r3
    bcba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bcbe:	4844      	ldr	r0, [pc, #272]	; (bdd0 <z_set_prio+0x12c>)
    bcc0:	f7fe fd24 	bl	a70c <z_spin_lock_valid>
    bcc4:	b120      	cbz	r0, bcd0 <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    bcc6:	4842      	ldr	r0, [pc, #264]	; (bdd0 <z_set_prio+0x12c>)
    bcc8:	f7fe fd40 	bl	a74c <z_spin_lock_set_owner>
	bool need_sched = 0;
    bccc:	2700      	movs	r7, #0
	return k;
    bcce:	e01d      	b.n	bd0c <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bcd0:	4f40      	ldr	r7, [pc, #256]	; (bdd4 <z_set_prio+0x130>)
    bcd2:	238e      	movs	r3, #142	; 0x8e
    bcd4:	463a      	mov	r2, r7
    bcd6:	4940      	ldr	r1, [pc, #256]	; (bdd8 <z_set_prio+0x134>)
    bcd8:	4840      	ldr	r0, [pc, #256]	; (bddc <z_set_prio+0x138>)
    bcda:	f003 fa23 	bl	f124 <assert_print>
    bcde:	493c      	ldr	r1, [pc, #240]	; (bdd0 <z_set_prio+0x12c>)
    bce0:	483f      	ldr	r0, [pc, #252]	; (bde0 <z_set_prio+0x13c>)
    bce2:	f003 fa1f 	bl	f124 <assert_print>
    bce6:	218e      	movs	r1, #142	; 0x8e
    bce8:	4638      	mov	r0, r7
    bcea:	f003 fa14 	bl	f116 <assert_post_action>
    bcee:	e7ea      	b.n	bcc6 <z_set_prio+0x22>
		if (need_sched) {
    bcf0:	f013 0701 	ands.w	r7, r3, #1
    bcf4:	d116      	bne.n	bd24 <z_set_prio+0x80>
			thread->base.prio = prio;
    bcf6:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bcf8:	4835      	ldr	r0, [pc, #212]	; (bdd0 <z_set_prio+0x12c>)
    bcfa:	f7fe fd17 	bl	a72c <z_spin_unlock_valid>
    bcfe:	2800      	cmp	r0, #0
    bd00:	d053      	beq.n	bdaa <z_set_prio+0x106>
	__asm__ volatile(
    bd02:	f388 8811 	msr	BASEPRI, r8
    bd06:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bd0a:	2501      	movs	r5, #1
    bd0c:	462b      	mov	r3, r5
    bd0e:	2d00      	cmp	r5, #0
    bd10:	d15b      	bne.n	bdca <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    bd12:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    bd14:	f012 0f1f 	tst.w	r2, #31
    bd18:	d1ea      	bne.n	bcf0 <z_set_prio+0x4c>
	return node->next != NULL;
    bd1a:	69a1      	ldr	r1, [r4, #24]
    bd1c:	2900      	cmp	r1, #0
    bd1e:	d1e7      	bne.n	bcf0 <z_set_prio+0x4c>
    bd20:	2301      	movs	r3, #1
    bd22:	e7e5      	b.n	bcf0 <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bd24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    bd28:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    bd2a:	4621      	mov	r1, r4
    bd2c:	482d      	ldr	r0, [pc, #180]	; (bde4 <z_set_prio+0x140>)
    bd2e:	f7ff fbd9 	bl	b4e4 <z_priq_dumb_remove>
				thread->base.prio = prio;
    bd32:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    bd34:	7b63      	ldrb	r3, [r4, #13]
    bd36:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bd3a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    bd3c:	4b2a      	ldr	r3, [pc, #168]	; (bde8 <z_set_prio+0x144>)
    bd3e:	429c      	cmp	r4, r3
    bd40:	d01f      	beq.n	bd82 <z_set_prio+0xde>
	return list->head == list;
    bd42:	4b2a      	ldr	r3, [pc, #168]	; (bdec <z_set_prio+0x148>)
    bd44:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bd48:	429d      	cmp	r5, r3
    bd4a:	d02c      	beq.n	bda6 <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bd4c:	b16d      	cbz	r5, bd6a <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bd4e:	4629      	mov	r1, r5
    bd50:	4620      	mov	r0, r4
    bd52:	f004 fbd1 	bl	104f8 <z_sched_prio_cmp>
    bd56:	2800      	cmp	r0, #0
    bd58:	dc1f      	bgt.n	bd9a <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    bd5a:	b135      	cbz	r5, bd6a <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    bd5c:	4b23      	ldr	r3, [pc, #140]	; (bdec <z_set_prio+0x148>)
    bd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bd60:	429d      	cmp	r5, r3
    bd62:	d002      	beq.n	bd6a <z_set_prio+0xc6>
    bd64:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bd66:	2d00      	cmp	r5, #0
    bd68:	d1f0      	bne.n	bd4c <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    bd6a:	4b20      	ldr	r3, [pc, #128]	; (bdec <z_set_prio+0x148>)
    bd6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    bd6e:	f103 0120 	add.w	r1, r3, #32
    bd72:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    bd74:	6062      	str	r2, [r4, #4]
	tail->next = node;
    bd76:	6014      	str	r4, [r2, #0]
	list->tail = node;
    bd78:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    bd7a:	2001      	movs	r0, #1
    bd7c:	f7ff fbd6 	bl	b52c <update_cache>
    bd80:	e7ba      	b.n	bcf8 <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    bd82:	4d1b      	ldr	r5, [pc, #108]	; (bdf0 <z_set_prio+0x14c>)
    bd84:	23ba      	movs	r3, #186	; 0xba
    bd86:	462a      	mov	r2, r5
    bd88:	491a      	ldr	r1, [pc, #104]	; (bdf4 <z_set_prio+0x150>)
    bd8a:	4814      	ldr	r0, [pc, #80]	; (bddc <z_set_prio+0x138>)
    bd8c:	f003 f9ca 	bl	f124 <assert_print>
    bd90:	21ba      	movs	r1, #186	; 0xba
    bd92:	4628      	mov	r0, r5
    bd94:	f003 f9bf 	bl	f116 <assert_post_action>
    bd98:	e7d3      	b.n	bd42 <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    bd9a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    bd9c:	6063      	str	r3, [r4, #4]
	node->next = successor;
    bd9e:	6025      	str	r5, [r4, #0]
	prev->next = node;
    bda0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    bda2:	606c      	str	r4, [r5, #4]
}
    bda4:	e7e9      	b.n	bd7a <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bda6:	2500      	movs	r5, #0
    bda8:	e7d0      	b.n	bd4c <z_set_prio+0xa8>
    bdaa:	4d0a      	ldr	r5, [pc, #40]	; (bdd4 <z_set_prio+0x130>)
    bdac:	23b9      	movs	r3, #185	; 0xb9
    bdae:	462a      	mov	r2, r5
    bdb0:	4911      	ldr	r1, [pc, #68]	; (bdf8 <z_set_prio+0x154>)
    bdb2:	480a      	ldr	r0, [pc, #40]	; (bddc <z_set_prio+0x138>)
    bdb4:	f003 f9b6 	bl	f124 <assert_print>
    bdb8:	4905      	ldr	r1, [pc, #20]	; (bdd0 <z_set_prio+0x12c>)
    bdba:	4810      	ldr	r0, [pc, #64]	; (bdfc <z_set_prio+0x158>)
    bdbc:	f003 f9b2 	bl	f124 <assert_print>
    bdc0:	21b9      	movs	r1, #185	; 0xb9
    bdc2:	4628      	mov	r0, r5
    bdc4:	f003 f9a7 	bl	f116 <assert_post_action>
    bdc8:	e79b      	b.n	bd02 <z_set_prio+0x5e>
}
    bdca:	4638      	mov	r0, r7
    bdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bdd0:	2000d520 	.word	0x2000d520
    bdd4:	000116c0 	.word	0x000116c0
    bdd8:	00011720 	.word	0x00011720
    bddc:	00011514 	.word	0x00011514
    bde0:	00011738 	.word	0x00011738
    bde4:	2000d504 	.word	0x2000d504
    bde8:	200047c8 	.word	0x200047c8
    bdec:	2000d4e4 	.word	0x2000d4e4
    bdf0:	00013018 	.word	0x00013018
    bdf4:	00013054 	.word	0x00013054
    bdf8:	000116f0 	.word	0x000116f0
    bdfc:	00011708 	.word	0x00011708

0000be00 <z_impl_k_thread_suspend>:
{
    be00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be02:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    be04:	3018      	adds	r0, #24
    be06:	f000 fdcf 	bl	c9a8 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    be0a:	2500      	movs	r5, #0
	__asm__ volatile(
    be0c:	f04f 0320 	mov.w	r3, #32
    be10:	f3ef 8611 	mrs	r6, BASEPRI
    be14:	f383 8812 	msr	BASEPRI_MAX, r3
    be18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    be1c:	482d      	ldr	r0, [pc, #180]	; (bed4 <z_impl_k_thread_suspend+0xd4>)
    be1e:	f7fe fc75 	bl	a70c <z_spin_lock_valid>
    be22:	b118      	cbz	r0, be2c <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    be24:	482b      	ldr	r0, [pc, #172]	; (bed4 <z_impl_k_thread_suspend+0xd4>)
    be26:	f7fe fc91 	bl	a74c <z_spin_lock_set_owner>
	return k;
    be2a:	e01c      	b.n	be66 <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    be2c:	4f2a      	ldr	r7, [pc, #168]	; (bed8 <z_impl_k_thread_suspend+0xd8>)
    be2e:	238e      	movs	r3, #142	; 0x8e
    be30:	463a      	mov	r2, r7
    be32:	492a      	ldr	r1, [pc, #168]	; (bedc <z_impl_k_thread_suspend+0xdc>)
    be34:	482a      	ldr	r0, [pc, #168]	; (bee0 <z_impl_k_thread_suspend+0xe0>)
    be36:	f003 f975 	bl	f124 <assert_print>
    be3a:	4926      	ldr	r1, [pc, #152]	; (bed4 <z_impl_k_thread_suspend+0xd4>)
    be3c:	4829      	ldr	r0, [pc, #164]	; (bee4 <z_impl_k_thread_suspend+0xe4>)
    be3e:	f003 f971 	bl	f124 <assert_print>
    be42:	218e      	movs	r1, #142	; 0x8e
    be44:	4638      	mov	r0, r7
    be46:	f003 f966 	bl	f116 <assert_post_action>
    be4a:	e7eb      	b.n	be24 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    be4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    be50:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    be52:	4621      	mov	r1, r4
    be54:	4824      	ldr	r0, [pc, #144]	; (bee8 <z_impl_k_thread_suspend+0xe8>)
    be56:	f7ff fb45 	bl	b4e4 <z_priq_dumb_remove>
}
    be5a:	e00a      	b.n	be72 <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    be5c:	f386 8811 	msr	BASEPRI, r6
    be60:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    be64:	2501      	movs	r5, #1
    be66:	bb2d      	cbnz	r5, beb4 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    be68:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    be6a:	f994 300d 	ldrsb.w	r3, [r4, #13]
    be6e:	2b00      	cmp	r3, #0
    be70:	dbec      	blt.n	be4c <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    be72:	7b63      	ldrb	r3, [r4, #13]
    be74:	f043 0310 	orr.w	r3, r3, #16
    be78:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    be7a:	4b1c      	ldr	r3, [pc, #112]	; (beec <z_impl_k_thread_suspend+0xec>)
    be7c:	6898      	ldr	r0, [r3, #8]
    be7e:	42a0      	cmp	r0, r4
    be80:	bf14      	ite	ne
    be82:	2000      	movne	r0, #0
    be84:	2001      	moveq	r0, #1
    be86:	f7ff fb51 	bl	b52c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    be8a:	4812      	ldr	r0, [pc, #72]	; (bed4 <z_impl_k_thread_suspend+0xd4>)
    be8c:	f7fe fc4e 	bl	a72c <z_spin_unlock_valid>
    be90:	2800      	cmp	r0, #0
    be92:	d1e3      	bne.n	be5c <z_impl_k_thread_suspend+0x5c>
    be94:	4d10      	ldr	r5, [pc, #64]	; (bed8 <z_impl_k_thread_suspend+0xd8>)
    be96:	23b9      	movs	r3, #185	; 0xb9
    be98:	462a      	mov	r2, r5
    be9a:	4915      	ldr	r1, [pc, #84]	; (bef0 <z_impl_k_thread_suspend+0xf0>)
    be9c:	4810      	ldr	r0, [pc, #64]	; (bee0 <z_impl_k_thread_suspend+0xe0>)
    be9e:	f003 f941 	bl	f124 <assert_print>
    bea2:	490c      	ldr	r1, [pc, #48]	; (bed4 <z_impl_k_thread_suspend+0xd4>)
    bea4:	4813      	ldr	r0, [pc, #76]	; (bef4 <z_impl_k_thread_suspend+0xf4>)
    bea6:	f003 f93d 	bl	f124 <assert_print>
    beaa:	21b9      	movs	r1, #185	; 0xb9
    beac:	4628      	mov	r0, r5
    beae:	f003 f932 	bl	f116 <assert_post_action>
    beb2:	e7d3      	b.n	be5c <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    beb4:	4b0d      	ldr	r3, [pc, #52]	; (beec <z_impl_k_thread_suspend+0xec>)
    beb6:	689b      	ldr	r3, [r3, #8]
    beb8:	42a3      	cmp	r3, r4
    beba:	d000      	beq.n	bebe <z_impl_k_thread_suspend+0xbe>
}
    bebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    bebe:	f04f 0320 	mov.w	r3, #32
    bec2:	f3ef 8011 	mrs	r0, BASEPRI
    bec6:	f383 8812 	msr	BASEPRI_MAX, r3
    beca:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    bece:	f004 fb1d 	bl	1050c <z_reschedule_irqlock>
    bed2:	e7f3      	b.n	bebc <z_impl_k_thread_suspend+0xbc>
    bed4:	2000d520 	.word	0x2000d520
    bed8:	000116c0 	.word	0x000116c0
    bedc:	00011720 	.word	0x00011720
    bee0:	00011514 	.word	0x00011514
    bee4:	00011738 	.word	0x00011738
    bee8:	2000d504 	.word	0x2000d504
    beec:	2000d4e4 	.word	0x2000d4e4
    bef0:	000116f0 	.word	0x000116f0
    bef4:	00011708 	.word	0x00011708

0000bef8 <k_sched_unlock>:
{
    bef8:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    befa:	2400      	movs	r4, #0
    befc:	f04f 0320 	mov.w	r3, #32
    bf00:	f3ef 8511 	mrs	r5, BASEPRI
    bf04:	f383 8812 	msr	BASEPRI_MAX, r3
    bf08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bf0c:	4838      	ldr	r0, [pc, #224]	; (bff0 <k_sched_unlock+0xf8>)
    bf0e:	f7fe fbfd 	bl	a70c <z_spin_lock_valid>
    bf12:	b118      	cbz	r0, bf1c <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    bf14:	4836      	ldr	r0, [pc, #216]	; (bff0 <k_sched_unlock+0xf8>)
    bf16:	f7fe fc19 	bl	a74c <z_spin_lock_set_owner>
	return k;
    bf1a:	e036      	b.n	bf8a <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bf1c:	4e35      	ldr	r6, [pc, #212]	; (bff4 <k_sched_unlock+0xfc>)
    bf1e:	238e      	movs	r3, #142	; 0x8e
    bf20:	4632      	mov	r2, r6
    bf22:	4935      	ldr	r1, [pc, #212]	; (bff8 <k_sched_unlock+0x100>)
    bf24:	4835      	ldr	r0, [pc, #212]	; (bffc <k_sched_unlock+0x104>)
    bf26:	f003 f8fd 	bl	f124 <assert_print>
    bf2a:	4931      	ldr	r1, [pc, #196]	; (bff0 <k_sched_unlock+0xf8>)
    bf2c:	4834      	ldr	r0, [pc, #208]	; (c000 <k_sched_unlock+0x108>)
    bf2e:	f003 f8f9 	bl	f124 <assert_print>
    bf32:	218e      	movs	r1, #142	; 0x8e
    bf34:	4630      	mov	r0, r6
    bf36:	f003 f8ee 	bl	f116 <assert_post_action>
    bf3a:	e7eb      	b.n	bf14 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    bf3c:	4c31      	ldr	r4, [pc, #196]	; (c004 <k_sched_unlock+0x10c>)
    bf3e:	f240 33bb 	movw	r3, #955	; 0x3bb
    bf42:	4622      	mov	r2, r4
    bf44:	4930      	ldr	r1, [pc, #192]	; (c008 <k_sched_unlock+0x110>)
    bf46:	482d      	ldr	r0, [pc, #180]	; (bffc <k_sched_unlock+0x104>)
    bf48:	f003 f8ec 	bl	f124 <assert_print>
    bf4c:	482f      	ldr	r0, [pc, #188]	; (c00c <k_sched_unlock+0x114>)
    bf4e:	f003 f8e9 	bl	f124 <assert_print>
    bf52:	f240 31bb 	movw	r1, #955	; 0x3bb
    bf56:	4620      	mov	r0, r4
    bf58:	f003 f8dd 	bl	f116 <assert_post_action>
    bf5c:	e01b      	b.n	bf96 <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    bf5e:	4c29      	ldr	r4, [pc, #164]	; (c004 <k_sched_unlock+0x10c>)
    bf60:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    bf64:	4622      	mov	r2, r4
    bf66:	492a      	ldr	r1, [pc, #168]	; (c010 <k_sched_unlock+0x118>)
    bf68:	4824      	ldr	r0, [pc, #144]	; (bffc <k_sched_unlock+0x104>)
    bf6a:	f003 f8db 	bl	f124 <assert_print>
    bf6e:	4827      	ldr	r0, [pc, #156]	; (c00c <k_sched_unlock+0x114>)
    bf70:	f003 f8d8 	bl	f124 <assert_print>
    bf74:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    bf78:	4620      	mov	r0, r4
    bf7a:	f003 f8cc 	bl	f116 <assert_post_action>
    bf7e:	e00e      	b.n	bf9e <k_sched_unlock+0xa6>
	__asm__ volatile(
    bf80:	f385 8811 	msr	BASEPRI, r5
    bf84:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bf88:	2401      	movs	r4, #1
    bf8a:	bb2c      	cbnz	r4, bfd8 <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    bf8c:	4b21      	ldr	r3, [pc, #132]	; (c014 <k_sched_unlock+0x11c>)
    bf8e:	689b      	ldr	r3, [r3, #8]
    bf90:	7bdb      	ldrb	r3, [r3, #15]
    bf92:	2b00      	cmp	r3, #0
    bf94:	d0d2      	beq.n	bf3c <k_sched_unlock+0x44>
    bf96:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    bf9a:	2b00      	cmp	r3, #0
    bf9c:	d1df      	bne.n	bf5e <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    bf9e:	4b1d      	ldr	r3, [pc, #116]	; (c014 <k_sched_unlock+0x11c>)
    bfa0:	689a      	ldr	r2, [r3, #8]
    bfa2:	7bd3      	ldrb	r3, [r2, #15]
    bfa4:	3301      	adds	r3, #1
    bfa6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    bfa8:	2000      	movs	r0, #0
    bfaa:	f7ff fabf 	bl	b52c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bfae:	4810      	ldr	r0, [pc, #64]	; (bff0 <k_sched_unlock+0xf8>)
    bfb0:	f7fe fbbc 	bl	a72c <z_spin_unlock_valid>
    bfb4:	2800      	cmp	r0, #0
    bfb6:	d1e3      	bne.n	bf80 <k_sched_unlock+0x88>
    bfb8:	4c0e      	ldr	r4, [pc, #56]	; (bff4 <k_sched_unlock+0xfc>)
    bfba:	23b9      	movs	r3, #185	; 0xb9
    bfbc:	4622      	mov	r2, r4
    bfbe:	4916      	ldr	r1, [pc, #88]	; (c018 <k_sched_unlock+0x120>)
    bfc0:	480e      	ldr	r0, [pc, #56]	; (bffc <k_sched_unlock+0x104>)
    bfc2:	f003 f8af 	bl	f124 <assert_print>
    bfc6:	490a      	ldr	r1, [pc, #40]	; (bff0 <k_sched_unlock+0xf8>)
    bfc8:	4814      	ldr	r0, [pc, #80]	; (c01c <k_sched_unlock+0x124>)
    bfca:	f003 f8ab 	bl	f124 <assert_print>
    bfce:	21b9      	movs	r1, #185	; 0xb9
    bfd0:	4620      	mov	r0, r4
    bfd2:	f003 f8a0 	bl	f116 <assert_post_action>
    bfd6:	e7d3      	b.n	bf80 <k_sched_unlock+0x88>
	__asm__ volatile(
    bfd8:	f04f 0320 	mov.w	r3, #32
    bfdc:	f3ef 8011 	mrs	r0, BASEPRI
    bfe0:	f383 8812 	msr	BASEPRI_MAX, r3
    bfe4:	f3bf 8f6f 	isb	sy
    bfe8:	f004 fa90 	bl	1050c <z_reschedule_irqlock>
}
    bfec:	bd70      	pop	{r4, r5, r6, pc}
    bfee:	bf00      	nop
    bff0:	2000d520 	.word	0x2000d520
    bff4:	000116c0 	.word	0x000116c0
    bff8:	00011720 	.word	0x00011720
    bffc:	00011514 	.word	0x00011514
    c000:	00011738 	.word	0x00011738
    c004:	00013018 	.word	0x00013018
    c008:	000130a0 	.word	0x000130a0
    c00c:	00012f70 	.word	0x00012f70
    c010:	00012e28 	.word	0x00012e28
    c014:	2000d4e4 	.word	0x2000d4e4
    c018:	000116f0 	.word	0x000116f0
    c01c:	00011708 	.word	0x00011708

0000c020 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    c020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    c022:	7b43      	ldrb	r3, [r0, #13]
    c024:	f013 0f08 	tst.w	r3, #8
    c028:	d145      	bne.n	c0b6 <end_thread+0x96>
    c02a:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    c02c:	f043 0308 	orr.w	r3, r3, #8
    c030:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    c032:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c036:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    c038:	f013 0f80 	tst.w	r3, #128	; 0x80
    c03c:	d12d      	bne.n	c09a <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    c03e:	68ab      	ldr	r3, [r5, #8]
    c040:	b15b      	cbz	r3, c05a <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    c042:	4628      	mov	r0, r5
    c044:	f7ff f870 	bl	b128 <pended_on_thread>
    c048:	4629      	mov	r1, r5
    c04a:	f7ff fa4b 	bl	b4e4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    c04e:	7b6b      	ldrb	r3, [r5, #13]
    c050:	f023 0302 	bic.w	r3, r3, #2
    c054:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    c056:	2300      	movs	r3, #0
    c058:	60ab      	str	r3, [r5, #8]
    c05a:	f105 0018 	add.w	r0, r5, #24
    c05e:	f000 fca3 	bl	c9a8 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    c062:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    c066:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c068:	42bc      	cmp	r4, r7
    c06a:	d01e      	beq.n	c0aa <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    c06c:	b1ec      	cbz	r4, c0aa <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    c06e:	4620      	mov	r0, r4
    c070:	f7ff f85a 	bl	b128 <pended_on_thread>
    c074:	4621      	mov	r1, r4
    c076:	f7ff fa35 	bl	b4e4 <z_priq_dumb_remove>
    c07a:	7b63      	ldrb	r3, [r4, #13]
    c07c:	f023 0302 	bic.w	r3, r3, #2
    c080:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    c082:	2600      	movs	r6, #0
    c084:	60a6      	str	r6, [r4, #8]
    c086:	f104 0018 	add.w	r0, r4, #24
    c08a:	f000 fc8d 	bl	c9a8 <z_abort_timeout>
    c08e:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    c092:	4620      	mov	r0, r4
    c094:	f7ff fba4 	bl	b7e0 <ready_thread>
    c098:	e7e5      	b.n	c066 <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c09a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c09e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    c0a0:	4601      	mov	r1, r0
    c0a2:	4805      	ldr	r0, [pc, #20]	; (c0b8 <end_thread+0x98>)
    c0a4:	f7ff fa1e 	bl	b4e4 <z_priq_dumb_remove>
}
    c0a8:	e7c9      	b.n	c03e <end_thread+0x1e>
		update_cache(1);
    c0aa:	2001      	movs	r0, #1
    c0ac:	f7ff fa3e 	bl	b52c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    c0b0:	4628      	mov	r0, r5
    c0b2:	f7fe fb53 	bl	a75c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    c0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c0b8:	2000d504 	.word	0x2000d504

0000c0bc <z_unpend1_no_timeout>:
{
    c0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c0be:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    c0c0:	2500      	movs	r5, #0
    c0c2:	f04f 0320 	mov.w	r3, #32
    c0c6:	f3ef 8711 	mrs	r7, BASEPRI
    c0ca:	f383 8812 	msr	BASEPRI_MAX, r3
    c0ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c0d2:	4823      	ldr	r0, [pc, #140]	; (c160 <z_unpend1_no_timeout+0xa4>)
    c0d4:	f7fe fb1a 	bl	a70c <z_spin_lock_valid>
    c0d8:	b120      	cbz	r0, c0e4 <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
    c0da:	4821      	ldr	r0, [pc, #132]	; (c160 <z_unpend1_no_timeout+0xa4>)
    c0dc:	f7fe fb36 	bl	a74c <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    c0e0:	2400      	movs	r4, #0
	return k;
    c0e2:	e018      	b.n	c116 <z_unpend1_no_timeout+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c0e4:	4c1f      	ldr	r4, [pc, #124]	; (c164 <z_unpend1_no_timeout+0xa8>)
    c0e6:	238e      	movs	r3, #142	; 0x8e
    c0e8:	4622      	mov	r2, r4
    c0ea:	491f      	ldr	r1, [pc, #124]	; (c168 <z_unpend1_no_timeout+0xac>)
    c0ec:	481f      	ldr	r0, [pc, #124]	; (c16c <z_unpend1_no_timeout+0xb0>)
    c0ee:	f003 f819 	bl	f124 <assert_print>
    c0f2:	491b      	ldr	r1, [pc, #108]	; (c160 <z_unpend1_no_timeout+0xa4>)
    c0f4:	481e      	ldr	r0, [pc, #120]	; (c170 <z_unpend1_no_timeout+0xb4>)
    c0f6:	f003 f815 	bl	f124 <assert_print>
    c0fa:	218e      	movs	r1, #142	; 0x8e
    c0fc:	4620      	mov	r0, r4
    c0fe:	f003 f80a 	bl	f116 <assert_post_action>
    c102:	e7ea      	b.n	c0da <z_unpend1_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c104:	4816      	ldr	r0, [pc, #88]	; (c160 <z_unpend1_no_timeout+0xa4>)
    c106:	f7fe fb11 	bl	a72c <z_spin_unlock_valid>
    c10a:	b1b8      	cbz	r0, c13c <z_unpend1_no_timeout+0x80>
	__asm__ volatile(
    c10c:	f387 8811 	msr	BASEPRI, r7
    c110:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    c114:	2501      	movs	r5, #1
    c116:	bb0d      	cbnz	r5, c15c <z_unpend1_no_timeout+0xa0>
		thread = _priq_wait_best(&wait_q->waitq);
    c118:	4630      	mov	r0, r6
    c11a:	f004 fa0c 	bl	10536 <z_priq_dumb_best>
		if (thread != NULL) {
    c11e:	4604      	mov	r4, r0
    c120:	2800      	cmp	r0, #0
    c122:	d0ef      	beq.n	c104 <z_unpend1_no_timeout+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    c124:	f7ff f800 	bl	b128 <pended_on_thread>
    c128:	4621      	mov	r1, r4
    c12a:	f7ff f9db 	bl	b4e4 <z_priq_dumb_remove>
    c12e:	7b63      	ldrb	r3, [r4, #13]
    c130:	f023 0302 	bic.w	r3, r3, #2
    c134:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    c136:	2300      	movs	r3, #0
    c138:	60a3      	str	r3, [r4, #8]
}
    c13a:	e7e3      	b.n	c104 <z_unpend1_no_timeout+0x48>
    c13c:	4d09      	ldr	r5, [pc, #36]	; (c164 <z_unpend1_no_timeout+0xa8>)
    c13e:	23b9      	movs	r3, #185	; 0xb9
    c140:	462a      	mov	r2, r5
    c142:	490c      	ldr	r1, [pc, #48]	; (c174 <z_unpend1_no_timeout+0xb8>)
    c144:	4809      	ldr	r0, [pc, #36]	; (c16c <z_unpend1_no_timeout+0xb0>)
    c146:	f002 ffed 	bl	f124 <assert_print>
    c14a:	4905      	ldr	r1, [pc, #20]	; (c160 <z_unpend1_no_timeout+0xa4>)
    c14c:	480a      	ldr	r0, [pc, #40]	; (c178 <z_unpend1_no_timeout+0xbc>)
    c14e:	f002 ffe9 	bl	f124 <assert_print>
    c152:	21b9      	movs	r1, #185	; 0xb9
    c154:	4628      	mov	r0, r5
    c156:	f002 ffde 	bl	f116 <assert_post_action>
    c15a:	e7d7      	b.n	c10c <z_unpend1_no_timeout+0x50>
}
    c15c:	4620      	mov	r0, r4
    c15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c160:	2000d520 	.word	0x2000d520
    c164:	000116c0 	.word	0x000116c0
    c168:	00011720 	.word	0x00011720
    c16c:	00011514 	.word	0x00011514
    c170:	00011738 	.word	0x00011738
    c174:	000116f0 	.word	0x000116f0
    c178:	00011708 	.word	0x00011708

0000c17c <z_unpend_first_thread>:
{
    c17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c17e:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    c180:	2500      	movs	r5, #0
	__asm__ volatile(
    c182:	f04f 0320 	mov.w	r3, #32
    c186:	f3ef 8711 	mrs	r7, BASEPRI
    c18a:	f383 8812 	msr	BASEPRI_MAX, r3
    c18e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c192:	4825      	ldr	r0, [pc, #148]	; (c228 <z_unpend_first_thread+0xac>)
    c194:	f7fe faba 	bl	a70c <z_spin_lock_valid>
    c198:	b120      	cbz	r0, c1a4 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    c19a:	4823      	ldr	r0, [pc, #140]	; (c228 <z_unpend_first_thread+0xac>)
    c19c:	f7fe fad6 	bl	a74c <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    c1a0:	2400      	movs	r4, #0
	return k;
    c1a2:	e018      	b.n	c1d6 <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c1a4:	4c21      	ldr	r4, [pc, #132]	; (c22c <z_unpend_first_thread+0xb0>)
    c1a6:	238e      	movs	r3, #142	; 0x8e
    c1a8:	4622      	mov	r2, r4
    c1aa:	4921      	ldr	r1, [pc, #132]	; (c230 <z_unpend_first_thread+0xb4>)
    c1ac:	4821      	ldr	r0, [pc, #132]	; (c234 <z_unpend_first_thread+0xb8>)
    c1ae:	f002 ffb9 	bl	f124 <assert_print>
    c1b2:	491d      	ldr	r1, [pc, #116]	; (c228 <z_unpend_first_thread+0xac>)
    c1b4:	4820      	ldr	r0, [pc, #128]	; (c238 <z_unpend_first_thread+0xbc>)
    c1b6:	f002 ffb5 	bl	f124 <assert_print>
    c1ba:	218e      	movs	r1, #142	; 0x8e
    c1bc:	4620      	mov	r0, r4
    c1be:	f002 ffaa 	bl	f116 <assert_post_action>
    c1c2:	e7ea      	b.n	c19a <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c1c4:	4818      	ldr	r0, [pc, #96]	; (c228 <z_unpend_first_thread+0xac>)
    c1c6:	f7fe fab1 	bl	a72c <z_spin_unlock_valid>
    c1ca:	b1d8      	cbz	r0, c204 <z_unpend_first_thread+0x88>
	__asm__ volatile(
    c1cc:	f387 8811 	msr	BASEPRI, r7
    c1d0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    c1d4:	2501      	movs	r5, #1
    c1d6:	bb2d      	cbnz	r5, c224 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    c1d8:	4630      	mov	r0, r6
    c1da:	f004 f9ac 	bl	10536 <z_priq_dumb_best>
		if (thread != NULL) {
    c1de:	4604      	mov	r4, r0
    c1e0:	2800      	cmp	r0, #0
    c1e2:	d0ef      	beq.n	c1c4 <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    c1e4:	f7fe ffa0 	bl	b128 <pended_on_thread>
    c1e8:	4621      	mov	r1, r4
    c1ea:	f7ff f97b 	bl	b4e4 <z_priq_dumb_remove>
    c1ee:	7b63      	ldrb	r3, [r4, #13]
    c1f0:	f023 0302 	bic.w	r3, r3, #2
    c1f4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    c1f6:	2300      	movs	r3, #0
    c1f8:	60a3      	str	r3, [r4, #8]
    c1fa:	f104 0018 	add.w	r0, r4, #24
    c1fe:	f000 fbd3 	bl	c9a8 <z_abort_timeout>
    c202:	e7df      	b.n	c1c4 <z_unpend_first_thread+0x48>
    c204:	4d09      	ldr	r5, [pc, #36]	; (c22c <z_unpend_first_thread+0xb0>)
    c206:	23b9      	movs	r3, #185	; 0xb9
    c208:	462a      	mov	r2, r5
    c20a:	490c      	ldr	r1, [pc, #48]	; (c23c <z_unpend_first_thread+0xc0>)
    c20c:	4809      	ldr	r0, [pc, #36]	; (c234 <z_unpend_first_thread+0xb8>)
    c20e:	f002 ff89 	bl	f124 <assert_print>
    c212:	4905      	ldr	r1, [pc, #20]	; (c228 <z_unpend_first_thread+0xac>)
    c214:	480a      	ldr	r0, [pc, #40]	; (c240 <z_unpend_first_thread+0xc4>)
    c216:	f002 ff85 	bl	f124 <assert_print>
    c21a:	21b9      	movs	r1, #185	; 0xb9
    c21c:	4628      	mov	r0, r5
    c21e:	f002 ff7a 	bl	f116 <assert_post_action>
    c222:	e7d3      	b.n	c1cc <z_unpend_first_thread+0x50>
}
    c224:	4620      	mov	r0, r4
    c226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c228:	2000d520 	.word	0x2000d520
    c22c:	000116c0 	.word	0x000116c0
    c230:	00011720 	.word	0x00011720
    c234:	00011514 	.word	0x00011514
    c238:	00011738 	.word	0x00011738
    c23c:	000116f0 	.word	0x000116f0
    c240:	00011708 	.word	0x00011708

0000c244 <z_sched_init>:
{
    c244:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    c246:	4804      	ldr	r0, [pc, #16]	; (c258 <z_sched_init+0x14>)
    c248:	f004 f97c 	bl	10544 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    c24c:	2100      	movs	r1, #0
    c24e:	4608      	mov	r0, r1
    c250:	f7fe ffa8 	bl	b1a4 <k_sched_time_slice_set>
}
    c254:	bd08      	pop	{r3, pc}
    c256:	bf00      	nop
    c258:	2000d500 	.word	0x2000d500

0000c25c <z_impl_k_yield>:
{
    c25c:	b570      	push	{r4, r5, r6, lr}
    c25e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    c262:	2b00      	cmp	r3, #0
    c264:	d149      	bne.n	c2fa <z_impl_k_yield+0x9e>
	__asm__ volatile(
    c266:	f04f 0320 	mov.w	r3, #32
    c26a:	f3ef 8611 	mrs	r6, BASEPRI
    c26e:	f383 8812 	msr	BASEPRI_MAX, r3
    c272:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c276:	4843      	ldr	r0, [pc, #268]	; (c384 <z_impl_k_yield+0x128>)
    c278:	f7fe fa48 	bl	a70c <z_spin_lock_valid>
    c27c:	2800      	cmp	r0, #0
    c27e:	d04d      	beq.n	c31c <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    c280:	4840      	ldr	r0, [pc, #256]	; (c384 <z_impl_k_yield+0x128>)
    c282:	f7fe fa63 	bl	a74c <z_spin_lock_set_owner>
		dequeue_thread(_current);
    c286:	4c40      	ldr	r4, [pc, #256]	; (c388 <z_impl_k_yield+0x12c>)
    c288:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c28a:	7b4b      	ldrb	r3, [r1, #13]
    c28c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c290:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    c292:	f104 0020 	add.w	r0, r4, #32
    c296:	f7ff f925 	bl	b4e4 <z_priq_dumb_remove>
	queue_thread(_current);
    c29a:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    c29c:	7b6b      	ldrb	r3, [r5, #13]
    c29e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c2a2:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    c2a4:	4b39      	ldr	r3, [pc, #228]	; (c38c <z_impl_k_yield+0x130>)
    c2a6:	429d      	cmp	r5, r3
    c2a8:	d048      	beq.n	c33c <z_impl_k_yield+0xe0>
	return list->head == list;
    c2aa:	4b37      	ldr	r3, [pc, #220]	; (c388 <z_impl_k_yield+0x12c>)
    c2ac:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c2b0:	429c      	cmp	r4, r3
    c2b2:	d055      	beq.n	c360 <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c2b4:	b16c      	cbz	r4, c2d2 <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    c2b6:	4621      	mov	r1, r4
    c2b8:	4628      	mov	r0, r5
    c2ba:	f004 f91d 	bl	104f8 <z_sched_prio_cmp>
    c2be:	2800      	cmp	r0, #0
    c2c0:	dc48      	bgt.n	c354 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    c2c2:	b134      	cbz	r4, c2d2 <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    c2c4:	4b30      	ldr	r3, [pc, #192]	; (c388 <z_impl_k_yield+0x12c>)
    c2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c2c8:	429c      	cmp	r4, r3
    c2ca:	d002      	beq.n	c2d2 <z_impl_k_yield+0x76>
    c2cc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c2ce:	2c00      	cmp	r4, #0
    c2d0:	d1f0      	bne.n	c2b4 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    c2d2:	4b2d      	ldr	r3, [pc, #180]	; (c388 <z_impl_k_yield+0x12c>)
    c2d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    c2d6:	f103 0120 	add.w	r1, r3, #32
    c2da:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    c2dc:	606a      	str	r2, [r5, #4]
	tail->next = node;
    c2de:	6015      	str	r5, [r2, #0]
	list->tail = node;
    c2e0:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    c2e2:	2001      	movs	r0, #1
    c2e4:	f7ff f922 	bl	b52c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c2e8:	4826      	ldr	r0, [pc, #152]	; (c384 <z_impl_k_yield+0x128>)
    c2ea:	f7fe fa1f 	bl	a72c <z_spin_unlock_valid>
    c2ee:	2800      	cmp	r0, #0
    c2f0:	d038      	beq.n	c364 <z_impl_k_yield+0x108>
    c2f2:	4630      	mov	r0, r6
    c2f4:	f7f9 fd76 	bl	5de4 <arch_swap>
}
    c2f8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    c2fa:	4c25      	ldr	r4, [pc, #148]	; (c390 <z_impl_k_yield+0x134>)
    c2fc:	f240 5332 	movw	r3, #1330	; 0x532
    c300:	4622      	mov	r2, r4
    c302:	4924      	ldr	r1, [pc, #144]	; (c394 <z_impl_k_yield+0x138>)
    c304:	4824      	ldr	r0, [pc, #144]	; (c398 <z_impl_k_yield+0x13c>)
    c306:	f002 ff0d 	bl	f124 <assert_print>
    c30a:	4824      	ldr	r0, [pc, #144]	; (c39c <z_impl_k_yield+0x140>)
    c30c:	f002 ff0a 	bl	f124 <assert_print>
    c310:	f240 5132 	movw	r1, #1330	; 0x532
    c314:	4620      	mov	r0, r4
    c316:	f002 fefe 	bl	f116 <assert_post_action>
    c31a:	e7a4      	b.n	c266 <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c31c:	4c20      	ldr	r4, [pc, #128]	; (c3a0 <z_impl_k_yield+0x144>)
    c31e:	238e      	movs	r3, #142	; 0x8e
    c320:	4622      	mov	r2, r4
    c322:	4920      	ldr	r1, [pc, #128]	; (c3a4 <z_impl_k_yield+0x148>)
    c324:	481c      	ldr	r0, [pc, #112]	; (c398 <z_impl_k_yield+0x13c>)
    c326:	f002 fefd 	bl	f124 <assert_print>
    c32a:	4916      	ldr	r1, [pc, #88]	; (c384 <z_impl_k_yield+0x128>)
    c32c:	481e      	ldr	r0, [pc, #120]	; (c3a8 <z_impl_k_yield+0x14c>)
    c32e:	f002 fef9 	bl	f124 <assert_print>
    c332:	218e      	movs	r1, #142	; 0x8e
    c334:	4620      	mov	r0, r4
    c336:	f002 feee 	bl	f116 <assert_post_action>
    c33a:	e7a1      	b.n	c280 <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    c33c:	4c14      	ldr	r4, [pc, #80]	; (c390 <z_impl_k_yield+0x134>)
    c33e:	23ba      	movs	r3, #186	; 0xba
    c340:	4622      	mov	r2, r4
    c342:	491a      	ldr	r1, [pc, #104]	; (c3ac <z_impl_k_yield+0x150>)
    c344:	4814      	ldr	r0, [pc, #80]	; (c398 <z_impl_k_yield+0x13c>)
    c346:	f002 feed 	bl	f124 <assert_print>
    c34a:	21ba      	movs	r1, #186	; 0xba
    c34c:	4620      	mov	r0, r4
    c34e:	f002 fee2 	bl	f116 <assert_post_action>
    c352:	e7aa      	b.n	c2aa <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    c354:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    c356:	606b      	str	r3, [r5, #4]
	node->next = successor;
    c358:	602c      	str	r4, [r5, #0]
	prev->next = node;
    c35a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    c35c:	6065      	str	r5, [r4, #4]
}
    c35e:	e7c0      	b.n	c2e2 <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c360:	2400      	movs	r4, #0
    c362:	e7a7      	b.n	c2b4 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c364:	4c0e      	ldr	r4, [pc, #56]	; (c3a0 <z_impl_k_yield+0x144>)
    c366:	23d0      	movs	r3, #208	; 0xd0
    c368:	4622      	mov	r2, r4
    c36a:	4911      	ldr	r1, [pc, #68]	; (c3b0 <z_impl_k_yield+0x154>)
    c36c:	480a      	ldr	r0, [pc, #40]	; (c398 <z_impl_k_yield+0x13c>)
    c36e:	f002 fed9 	bl	f124 <assert_print>
    c372:	4904      	ldr	r1, [pc, #16]	; (c384 <z_impl_k_yield+0x128>)
    c374:	480f      	ldr	r0, [pc, #60]	; (c3b4 <z_impl_k_yield+0x158>)
    c376:	f002 fed5 	bl	f124 <assert_print>
    c37a:	21d0      	movs	r1, #208	; 0xd0
    c37c:	4620      	mov	r0, r4
    c37e:	f002 feca 	bl	f116 <assert_post_action>
    c382:	e7b6      	b.n	c2f2 <z_impl_k_yield+0x96>
    c384:	2000d520 	.word	0x2000d520
    c388:	2000d4e4 	.word	0x2000d4e4
    c38c:	200047c8 	.word	0x200047c8
    c390:	00013018 	.word	0x00013018
    c394:	00012e28 	.word	0x00012e28
    c398:	00011514 	.word	0x00011514
    c39c:	00012f70 	.word	0x00012f70
    c3a0:	000116c0 	.word	0x000116c0
    c3a4:	00011720 	.word	0x00011720
    c3a8:	00011738 	.word	0x00011738
    c3ac:	00013054 	.word	0x00013054
    c3b0:	000116f0 	.word	0x000116f0
    c3b4:	00011708 	.word	0x00011708

0000c3b8 <z_tick_sleep>:
{
    c3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c3bc:	4604      	mov	r4, r0
    c3be:	460e      	mov	r6, r1
    c3c0:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    c3c4:	2b00      	cmp	r3, #0
    c3c6:	d14e      	bne.n	c466 <z_tick_sleep+0xae>
	if (ticks == 0) {
    c3c8:	ea54 0306 	orrs.w	r3, r4, r6
    c3cc:	d05c      	beq.n	c488 <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    c3ce:	f06f 0301 	mvn.w	r3, #1
    c3d2:	1b1b      	subs	r3, r3, r4
    c3d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c3d8:	eb62 0206 	sbc.w	r2, r2, r6
    c3dc:	2b01      	cmp	r3, #1
    c3de:	f172 0300 	sbcs.w	r3, r2, #0
    c3e2:	db55      	blt.n	c490 <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    c3e4:	f06f 0501 	mvn.w	r5, #1
    c3e8:	1b2d      	subs	r5, r5, r4
    c3ea:	f04f 0320 	mov.w	r3, #32
    c3ee:	f3ef 8911 	mrs	r9, BASEPRI
    c3f2:	f383 8812 	msr	BASEPRI_MAX, r3
    c3f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c3fa:	4840      	ldr	r0, [pc, #256]	; (c4fc <z_tick_sleep+0x144>)
    c3fc:	f7fe f986 	bl	a70c <z_spin_lock_valid>
    c400:	2800      	cmp	r0, #0
    c402:	d049      	beq.n	c498 <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    c404:	f8df 80f4 	ldr.w	r8, [pc, #244]	; c4fc <z_tick_sleep+0x144>
    c408:	4640      	mov	r0, r8
    c40a:	f7fe f99f 	bl	a74c <z_spin_lock_set_owner>
	pending_current = _current;
    c40e:	4f3c      	ldr	r7, [pc, #240]	; (c500 <z_tick_sleep+0x148>)
    c410:	68b8      	ldr	r0, [r7, #8]
    c412:	4b3c      	ldr	r3, [pc, #240]	; (c504 <z_tick_sleep+0x14c>)
    c414:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    c416:	f7ff fb5b 	bl	bad0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    c41a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    c41c:	4622      	mov	r2, r4
    c41e:	4633      	mov	r3, r6
    c420:	4939      	ldr	r1, [pc, #228]	; (c508 <z_tick_sleep+0x150>)
    c422:	3018      	adds	r0, #24
    c424:	f000 f9dc 	bl	c7e0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    c428:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    c42a:	7b53      	ldrb	r3, [r2, #13]
    c42c:	f043 0310 	orr.w	r3, r3, #16
    c430:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c432:	4640      	mov	r0, r8
    c434:	f7fe f97a 	bl	a72c <z_spin_unlock_valid>
    c438:	2800      	cmp	r0, #0
    c43a:	d03d      	beq.n	c4b8 <z_tick_sleep+0x100>
    c43c:	4648      	mov	r0, r9
    c43e:	f7f9 fcd1 	bl	5de4 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    c442:	4b2f      	ldr	r3, [pc, #188]	; (c500 <z_tick_sleep+0x148>)
    c444:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    c446:	7b5b      	ldrb	r3, [r3, #13]
    c448:	f013 0f10 	tst.w	r3, #16
    c44c:	d144      	bne.n	c4d8 <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    c44e:	f004 f894 	bl	1057a <sys_clock_tick_get_32>
    c452:	1a28      	subs	r0, r5, r0
    c454:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    c458:	2801      	cmp	r0, #1
    c45a:	f173 0300 	sbcs.w	r3, r3, #0
    c45e:	da00      	bge.n	c462 <z_tick_sleep+0xaa>
	return 0;
    c460:	2000      	movs	r0, #0
}
    c462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    c466:	4d29      	ldr	r5, [pc, #164]	; (c50c <z_tick_sleep+0x154>)
    c468:	f240 534e 	movw	r3, #1358	; 0x54e
    c46c:	462a      	mov	r2, r5
    c46e:	4928      	ldr	r1, [pc, #160]	; (c510 <z_tick_sleep+0x158>)
    c470:	4828      	ldr	r0, [pc, #160]	; (c514 <z_tick_sleep+0x15c>)
    c472:	f002 fe57 	bl	f124 <assert_print>
    c476:	4828      	ldr	r0, [pc, #160]	; (c518 <z_tick_sleep+0x160>)
    c478:	f002 fe54 	bl	f124 <assert_print>
    c47c:	f240 514e 	movw	r1, #1358	; 0x54e
    c480:	4628      	mov	r0, r5
    c482:	f002 fe48 	bl	f116 <assert_post_action>
    c486:	e79f      	b.n	c3c8 <z_tick_sleep+0x10>
	z_impl_k_yield();
    c488:	f7ff fee8 	bl	c25c <z_impl_k_yield>
		return 0;
    c48c:	2000      	movs	r0, #0
    c48e:	e7e8      	b.n	c462 <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    c490:	f004 f873 	bl	1057a <sys_clock_tick_get_32>
    c494:	1905      	adds	r5, r0, r4
    c496:	e7a8      	b.n	c3ea <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c498:	4f20      	ldr	r7, [pc, #128]	; (c51c <z_tick_sleep+0x164>)
    c49a:	238e      	movs	r3, #142	; 0x8e
    c49c:	463a      	mov	r2, r7
    c49e:	4920      	ldr	r1, [pc, #128]	; (c520 <z_tick_sleep+0x168>)
    c4a0:	481c      	ldr	r0, [pc, #112]	; (c514 <z_tick_sleep+0x15c>)
    c4a2:	f002 fe3f 	bl	f124 <assert_print>
    c4a6:	4915      	ldr	r1, [pc, #84]	; (c4fc <z_tick_sleep+0x144>)
    c4a8:	481e      	ldr	r0, [pc, #120]	; (c524 <z_tick_sleep+0x16c>)
    c4aa:	f002 fe3b 	bl	f124 <assert_print>
    c4ae:	218e      	movs	r1, #142	; 0x8e
    c4b0:	4638      	mov	r0, r7
    c4b2:	f002 fe30 	bl	f116 <assert_post_action>
    c4b6:	e7a5      	b.n	c404 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c4b8:	4c18      	ldr	r4, [pc, #96]	; (c51c <z_tick_sleep+0x164>)
    c4ba:	23d0      	movs	r3, #208	; 0xd0
    c4bc:	4622      	mov	r2, r4
    c4be:	491a      	ldr	r1, [pc, #104]	; (c528 <z_tick_sleep+0x170>)
    c4c0:	4814      	ldr	r0, [pc, #80]	; (c514 <z_tick_sleep+0x15c>)
    c4c2:	f002 fe2f 	bl	f124 <assert_print>
    c4c6:	4641      	mov	r1, r8
    c4c8:	4818      	ldr	r0, [pc, #96]	; (c52c <z_tick_sleep+0x174>)
    c4ca:	f002 fe2b 	bl	f124 <assert_print>
    c4ce:	21d0      	movs	r1, #208	; 0xd0
    c4d0:	4620      	mov	r0, r4
    c4d2:	f002 fe20 	bl	f116 <assert_post_action>
    c4d6:	e7b1      	b.n	c43c <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    c4d8:	4c0c      	ldr	r4, [pc, #48]	; (c50c <z_tick_sleep+0x154>)
    c4da:	f240 536f 	movw	r3, #1391	; 0x56f
    c4de:	4622      	mov	r2, r4
    c4e0:	4913      	ldr	r1, [pc, #76]	; (c530 <z_tick_sleep+0x178>)
    c4e2:	480c      	ldr	r0, [pc, #48]	; (c514 <z_tick_sleep+0x15c>)
    c4e4:	f002 fe1e 	bl	f124 <assert_print>
    c4e8:	480b      	ldr	r0, [pc, #44]	; (c518 <z_tick_sleep+0x160>)
    c4ea:	f002 fe1b 	bl	f124 <assert_print>
    c4ee:	f240 516f 	movw	r1, #1391	; 0x56f
    c4f2:	4620      	mov	r0, r4
    c4f4:	f002 fe0f 	bl	f116 <assert_post_action>
    c4f8:	e7a9      	b.n	c44e <z_tick_sleep+0x96>
    c4fa:	bf00      	nop
    c4fc:	2000d520 	.word	0x2000d520
    c500:	2000d4e4 	.word	0x2000d4e4
    c504:	2000d51c 	.word	0x2000d51c
    c508:	0000b9e9 	.word	0x0000b9e9
    c50c:	00013018 	.word	0x00013018
    c510:	00012e28 	.word	0x00012e28
    c514:	00011514 	.word	0x00011514
    c518:	00012f70 	.word	0x00012f70
    c51c:	000116c0 	.word	0x000116c0
    c520:	00011720 	.word	0x00011720
    c524:	00011738 	.word	0x00011738
    c528:	000116f0 	.word	0x000116f0
    c52c:	00011708 	.word	0x00011708
    c530:	000130d4 	.word	0x000130d4

0000c534 <z_impl_k_sleep>:
{
    c534:	b570      	push	{r4, r5, r6, lr}
    c536:	4605      	mov	r5, r0
    c538:	460c      	mov	r4, r1
    c53a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    c53e:	bb13      	cbnz	r3, c586 <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c540:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    c544:	bf08      	it	eq
    c546:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    c54a:	d02d      	beq.n	c5a8 <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    c54c:	4628      	mov	r0, r5
    c54e:	4621      	mov	r1, r4
    c550:	f7ff ff32 	bl	c3b8 <z_tick_sleep>
    c554:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    c556:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    c558:	0151      	lsls	r1, r2, #5
    c55a:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    c55e:	0143      	lsls	r3, r0, #5
    c560:	1a1b      	subs	r3, r3, r0
    c562:	eb61 0102 	sbc.w	r1, r1, r2
    c566:	0088      	lsls	r0, r1, #2
    c568:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    c56c:	009b      	lsls	r3, r3, #2
    c56e:	eb13 030c 	adds.w	r3, r3, ip
    c572:	eb42 0000 	adc.w	r0, r2, r0
    c576:	00c0      	lsls	r0, r0, #3
    c578:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    c57c:	f3c3 3310 	ubfx	r3, r3, #12, #17
    c580:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    c584:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    c586:	4e0c      	ldr	r6, [pc, #48]	; (c5b8 <z_impl_k_sleep+0x84>)
    c588:	f240 537e 	movw	r3, #1406	; 0x57e
    c58c:	4632      	mov	r2, r6
    c58e:	490b      	ldr	r1, [pc, #44]	; (c5bc <z_impl_k_sleep+0x88>)
    c590:	480b      	ldr	r0, [pc, #44]	; (c5c0 <z_impl_k_sleep+0x8c>)
    c592:	f002 fdc7 	bl	f124 <assert_print>
    c596:	480b      	ldr	r0, [pc, #44]	; (c5c4 <z_impl_k_sleep+0x90>)
    c598:	f002 fdc4 	bl	f124 <assert_print>
    c59c:	f240 517e 	movw	r1, #1406	; 0x57e
    c5a0:	4630      	mov	r0, r6
    c5a2:	f002 fdb8 	bl	f116 <assert_post_action>
    c5a6:	e7cb      	b.n	c540 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    c5a8:	4b07      	ldr	r3, [pc, #28]	; (c5c8 <z_impl_k_sleep+0x94>)
    c5aa:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    c5ac:	f7ff fc28 	bl	be00 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    c5b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c5b4:	e7e6      	b.n	c584 <z_impl_k_sleep+0x50>
    c5b6:	bf00      	nop
    c5b8:	00013018 	.word	0x00013018
    c5bc:	00012e28 	.word	0x00012e28
    c5c0:	00011514 	.word	0x00011514
    c5c4:	00012f70 	.word	0x00012f70
    c5c8:	2000d4e4 	.word	0x2000d4e4

0000c5cc <z_impl_z_current_get>:
}
    c5cc:	4b01      	ldr	r3, [pc, #4]	; (c5d4 <z_impl_z_current_get+0x8>)
    c5ce:	6898      	ldr	r0, [r3, #8]
    c5d0:	4770      	bx	lr
    c5d2:	bf00      	nop
    c5d4:	2000d4e4 	.word	0x2000d4e4

0000c5d8 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    c5d8:	b570      	push	{r4, r5, r6, lr}
    c5da:	4604      	mov	r4, r0
    c5dc:	f04f 0320 	mov.w	r3, #32
    c5e0:	f3ef 8511 	mrs	r5, BASEPRI
    c5e4:	f383 8812 	msr	BASEPRI_MAX, r3
    c5e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c5ec:	4840      	ldr	r0, [pc, #256]	; (c6f0 <z_thread_abort+0x118>)
    c5ee:	f7fe f88d 	bl	a70c <z_spin_lock_valid>
    c5f2:	b1b8      	cbz	r0, c624 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    c5f4:	483e      	ldr	r0, [pc, #248]	; (c6f0 <z_thread_abort+0x118>)
    c5f6:	f7fe f8a9 	bl	a74c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    c5fa:	7b63      	ldrb	r3, [r4, #13]
    c5fc:	f013 0f08 	tst.w	r3, #8
    c600:	d120      	bne.n	c644 <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    c602:	4620      	mov	r0, r4
    c604:	f7ff fd0c 	bl	c020 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    c608:	4b3a      	ldr	r3, [pc, #232]	; (c6f4 <z_thread_abort+0x11c>)
    c60a:	689b      	ldr	r3, [r3, #8]
    c60c:	42a3      	cmp	r3, r4
    c60e:	d032      	beq.n	c676 <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c610:	4837      	ldr	r0, [pc, #220]	; (c6f0 <z_thread_abort+0x118>)
    c612:	f7fe f88b 	bl	a72c <z_spin_unlock_valid>
    c616:	2800      	cmp	r0, #0
    c618:	d059      	beq.n	c6ce <z_thread_abort+0xf6>
	__asm__ volatile(
    c61a:	f385 8811 	msr	BASEPRI, r5
    c61e:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    c622:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c624:	4e34      	ldr	r6, [pc, #208]	; (c6f8 <z_thread_abort+0x120>)
    c626:	238e      	movs	r3, #142	; 0x8e
    c628:	4632      	mov	r2, r6
    c62a:	4934      	ldr	r1, [pc, #208]	; (c6fc <z_thread_abort+0x124>)
    c62c:	4834      	ldr	r0, [pc, #208]	; (c700 <z_thread_abort+0x128>)
    c62e:	f002 fd79 	bl	f124 <assert_print>
    c632:	492f      	ldr	r1, [pc, #188]	; (c6f0 <z_thread_abort+0x118>)
    c634:	4833      	ldr	r0, [pc, #204]	; (c704 <z_thread_abort+0x12c>)
    c636:	f002 fd75 	bl	f124 <assert_print>
    c63a:	218e      	movs	r1, #142	; 0x8e
    c63c:	4630      	mov	r0, r6
    c63e:	f002 fd6a 	bl	f116 <assert_post_action>
    c642:	e7d7      	b.n	c5f4 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c644:	482a      	ldr	r0, [pc, #168]	; (c6f0 <z_thread_abort+0x118>)
    c646:	f7fe f871 	bl	a72c <z_spin_unlock_valid>
    c64a:	b120      	cbz	r0, c656 <z_thread_abort+0x7e>
    c64c:	f385 8811 	msr	BASEPRI, r5
    c650:	f3bf 8f6f 	isb	sy
		return;
    c654:	e7e5      	b.n	c622 <z_thread_abort+0x4a>
    c656:	4c28      	ldr	r4, [pc, #160]	; (c6f8 <z_thread_abort+0x120>)
    c658:	23b9      	movs	r3, #185	; 0xb9
    c65a:	4622      	mov	r2, r4
    c65c:	492a      	ldr	r1, [pc, #168]	; (c708 <z_thread_abort+0x130>)
    c65e:	4828      	ldr	r0, [pc, #160]	; (c700 <z_thread_abort+0x128>)
    c660:	f002 fd60 	bl	f124 <assert_print>
    c664:	4922      	ldr	r1, [pc, #136]	; (c6f0 <z_thread_abort+0x118>)
    c666:	4829      	ldr	r0, [pc, #164]	; (c70c <z_thread_abort+0x134>)
    c668:	f002 fd5c 	bl	f124 <assert_print>
    c66c:	21b9      	movs	r1, #185	; 0xb9
    c66e:	4620      	mov	r0, r4
    c670:	f002 fd51 	bl	f116 <assert_post_action>
    c674:	e7ea      	b.n	c64c <z_thread_abort+0x74>
    c676:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    c67a:	2b00      	cmp	r3, #0
    c67c:	d1c8      	bne.n	c610 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c67e:	481c      	ldr	r0, [pc, #112]	; (c6f0 <z_thread_abort+0x118>)
    c680:	f7fe f854 	bl	a72c <z_spin_unlock_valid>
    c684:	b198      	cbz	r0, c6ae <z_thread_abort+0xd6>
    c686:	4628      	mov	r0, r5
    c688:	f7f9 fbac 	bl	5de4 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    c68c:	4c20      	ldr	r4, [pc, #128]	; (c710 <z_thread_abort+0x138>)
    c68e:	f240 63ac 	movw	r3, #1708	; 0x6ac
    c692:	4622      	mov	r2, r4
    c694:	491f      	ldr	r1, [pc, #124]	; (c714 <z_thread_abort+0x13c>)
    c696:	481a      	ldr	r0, [pc, #104]	; (c700 <z_thread_abort+0x128>)
    c698:	f002 fd44 	bl	f124 <assert_print>
    c69c:	481e      	ldr	r0, [pc, #120]	; (c718 <z_thread_abort+0x140>)
    c69e:	f002 fd41 	bl	f124 <assert_print>
    c6a2:	f240 61ac 	movw	r1, #1708	; 0x6ac
    c6a6:	4620      	mov	r0, r4
    c6a8:	f002 fd35 	bl	f116 <assert_post_action>
    c6ac:	e7b0      	b.n	c610 <z_thread_abort+0x38>
    c6ae:	4c12      	ldr	r4, [pc, #72]	; (c6f8 <z_thread_abort+0x120>)
    c6b0:	23d0      	movs	r3, #208	; 0xd0
    c6b2:	4622      	mov	r2, r4
    c6b4:	4914      	ldr	r1, [pc, #80]	; (c708 <z_thread_abort+0x130>)
    c6b6:	4812      	ldr	r0, [pc, #72]	; (c700 <z_thread_abort+0x128>)
    c6b8:	f002 fd34 	bl	f124 <assert_print>
    c6bc:	490c      	ldr	r1, [pc, #48]	; (c6f0 <z_thread_abort+0x118>)
    c6be:	4813      	ldr	r0, [pc, #76]	; (c70c <z_thread_abort+0x134>)
    c6c0:	f002 fd30 	bl	f124 <assert_print>
    c6c4:	21d0      	movs	r1, #208	; 0xd0
    c6c6:	4620      	mov	r0, r4
    c6c8:	f002 fd25 	bl	f116 <assert_post_action>
    c6cc:	e7db      	b.n	c686 <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c6ce:	4c0a      	ldr	r4, [pc, #40]	; (c6f8 <z_thread_abort+0x120>)
    c6d0:	23b9      	movs	r3, #185	; 0xb9
    c6d2:	4622      	mov	r2, r4
    c6d4:	490c      	ldr	r1, [pc, #48]	; (c708 <z_thread_abort+0x130>)
    c6d6:	480a      	ldr	r0, [pc, #40]	; (c700 <z_thread_abort+0x128>)
    c6d8:	f002 fd24 	bl	f124 <assert_print>
    c6dc:	4904      	ldr	r1, [pc, #16]	; (c6f0 <z_thread_abort+0x118>)
    c6de:	480b      	ldr	r0, [pc, #44]	; (c70c <z_thread_abort+0x134>)
    c6e0:	f002 fd20 	bl	f124 <assert_print>
    c6e4:	21b9      	movs	r1, #185	; 0xb9
    c6e6:	4620      	mov	r0, r4
    c6e8:	f002 fd15 	bl	f116 <assert_post_action>
    c6ec:	e795      	b.n	c61a <z_thread_abort+0x42>
    c6ee:	bf00      	nop
    c6f0:	2000d520 	.word	0x2000d520
    c6f4:	2000d4e4 	.word	0x2000d4e4
    c6f8:	000116c0 	.word	0x000116c0
    c6fc:	00011720 	.word	0x00011720
    c700:	00011514 	.word	0x00011514
    c704:	00011738 	.word	0x00011738
    c708:	000116f0 	.word	0x000116f0
    c70c:	00011708 	.word	0x00011708
    c710:	00013018 	.word	0x00013018
    c714:	00011bd0 	.word	0x00011bd0
    c718:	00013114 	.word	0x00013114

0000c71c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    c71c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    c71e:	4806      	ldr	r0, [pc, #24]	; (c738 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    c720:	4a06      	ldr	r2, [pc, #24]	; (c73c <z_data_copy+0x20>)
    c722:	1a12      	subs	r2, r2, r0
    c724:	4906      	ldr	r1, [pc, #24]	; (c740 <z_data_copy+0x24>)
    c726:	f003 fe60 	bl	103ea <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    c72a:	4a06      	ldr	r2, [pc, #24]	; (c744 <z_data_copy+0x28>)
    c72c:	4906      	ldr	r1, [pc, #24]	; (c748 <z_data_copy+0x2c>)
    c72e:	4807      	ldr	r0, [pc, #28]	; (c74c <z_data_copy+0x30>)
    c730:	f003 fe5b 	bl	103ea <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    c734:	bd08      	pop	{r3, pc}
    c736:	bf00      	nop
    c738:	20000000 	.word	0x20000000
    c73c:	20004284 	.word	0x20004284
    c740:	00013570 	.word	0x00013570
    c744:	00000000 	.word	0x00000000
    c748:	00013570 	.word	0x00013570
    c74c:	20000000 	.word	0x20000000

0000c750 <first>:
	return list->head == list;
    c750:	4b03      	ldr	r3, [pc, #12]	; (c760 <first+0x10>)
    c752:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c754:	4298      	cmp	r0, r3
    c756:	d000      	beq.n	c75a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    c758:	4770      	bx	lr
    c75a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    c75c:	e7fc      	b.n	c758 <first+0x8>
    c75e:	bf00      	nop
    c760:	200040fc 	.word	0x200040fc

0000c764 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    c764:	b130      	cbz	r0, c774 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    c766:	4a04      	ldr	r2, [pc, #16]	; (c778 <next+0x14>)
    c768:	6852      	ldr	r2, [r2, #4]
    c76a:	4290      	cmp	r0, r2
    c76c:	d001      	beq.n	c772 <next+0xe>
    c76e:	6800      	ldr	r0, [r0, #0]
    c770:	4770      	bx	lr
    c772:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    c774:	4770      	bx	lr
    c776:	bf00      	nop
    c778:	200040fc 	.word	0x200040fc

0000c77c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    c77c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    c77e:	4b04      	ldr	r3, [pc, #16]	; (c790 <elapsed+0x14>)
    c780:	681b      	ldr	r3, [r3, #0]
    c782:	b10b      	cbz	r3, c788 <elapsed+0xc>
    c784:	2000      	movs	r0, #0
}
    c786:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    c788:	f7fb fc20 	bl	7fcc <sys_clock_elapsed>
    c78c:	e7fb      	b.n	c786 <elapsed+0xa>
    c78e:	bf00      	nop
    c790:	2000d52c 	.word	0x2000d52c

0000c794 <next_timeout>:

static int32_t next_timeout(void)
{
    c794:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    c796:	f7ff ffdb 	bl	c750 <first>
    c79a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    c79c:	f7ff ffee 	bl	c77c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    c7a0:	b17c      	cbz	r4, c7c2 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    c7a2:	6923      	ldr	r3, [r4, #16]
    c7a4:	6962      	ldr	r2, [r4, #20]
    c7a6:	1a1b      	subs	r3, r3, r0
    c7a8:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    c7ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    c7b0:	f170 0200 	sbcs.w	r2, r0, #0
    c7b4:	da08      	bge.n	c7c8 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    c7b6:	2800      	cmp	r0, #0
    c7b8:	db01      	blt.n	c7be <next_timeout+0x2a>
    c7ba:	4618      	mov	r0, r3
    c7bc:	e006      	b.n	c7cc <next_timeout+0x38>
    c7be:	2300      	movs	r3, #0
    c7c0:	e7fb      	b.n	c7ba <next_timeout+0x26>
		ret = MAX_WAIT;
    c7c2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    c7c6:	e001      	b.n	c7cc <next_timeout+0x38>
    c7c8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    c7cc:	4b03      	ldr	r3, [pc, #12]	; (c7dc <next_timeout+0x48>)
    c7ce:	691b      	ldr	r3, [r3, #16]
    c7d0:	b113      	cbz	r3, c7d8 <next_timeout+0x44>
    c7d2:	4283      	cmp	r3, r0
    c7d4:	da00      	bge.n	c7d8 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    c7d6:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    c7d8:	bd10      	pop	{r4, pc}
    c7da:	bf00      	nop
    c7dc:	2000d4e4 	.word	0x2000d4e4

0000c7e0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c7e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    c7e4:	bf08      	it	eq
    c7e6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    c7ea:	f000 80c1 	beq.w	c970 <z_add_timeout+0x190>
{
    c7ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c7f2:	4604      	mov	r4, r0
    c7f4:	460f      	mov	r7, r1
    c7f6:	4692      	mov	sl, r2
    c7f8:	461d      	mov	r5, r3
	return node->next != NULL;
    c7fa:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    c7fc:	b173      	cbz	r3, c81c <z_add_timeout+0x3c>
    c7fe:	f8df 8174 	ldr.w	r8, [pc, #372]	; c974 <z_add_timeout+0x194>
    c802:	2363      	movs	r3, #99	; 0x63
    c804:	4642      	mov	r2, r8
    c806:	495c      	ldr	r1, [pc, #368]	; (c978 <z_add_timeout+0x198>)
    c808:	485c      	ldr	r0, [pc, #368]	; (c97c <z_add_timeout+0x19c>)
    c80a:	f002 fc8b 	bl	f124 <assert_print>
    c80e:	485c      	ldr	r0, [pc, #368]	; (c980 <z_add_timeout+0x1a0>)
    c810:	f002 fc88 	bl	f124 <assert_print>
    c814:	2163      	movs	r1, #99	; 0x63
    c816:	4640      	mov	r0, r8
    c818:	f002 fc7d 	bl	f116 <assert_post_action>
	to->fn = fn;
    c81c:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    c81e:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    c822:	f04f 0320 	mov.w	r3, #32
    c826:	f3ef 8711 	mrs	r7, BASEPRI
    c82a:	f383 8812 	msr	BASEPRI_MAX, r3
    c82e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c832:	4854      	ldr	r0, [pc, #336]	; (c984 <z_add_timeout+0x1a4>)
    c834:	f7fd ff6a 	bl	a70c <z_spin_lock_valid>
    c838:	b118      	cbz	r0, c842 <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    c83a:	4852      	ldr	r0, [pc, #328]	; (c984 <z_add_timeout+0x1a4>)
    c83c:	f7fd ff86 	bl	a74c <z_spin_lock_set_owner>
	return k;
    c840:	e038      	b.n	c8b4 <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c842:	f8df 9144 	ldr.w	r9, [pc, #324]	; c988 <z_add_timeout+0x1a8>
    c846:	238e      	movs	r3, #142	; 0x8e
    c848:	464a      	mov	r2, r9
    c84a:	4950      	ldr	r1, [pc, #320]	; (c98c <z_add_timeout+0x1ac>)
    c84c:	484b      	ldr	r0, [pc, #300]	; (c97c <z_add_timeout+0x19c>)
    c84e:	f002 fc69 	bl	f124 <assert_print>
    c852:	494c      	ldr	r1, [pc, #304]	; (c984 <z_add_timeout+0x1a4>)
    c854:	484e      	ldr	r0, [pc, #312]	; (c990 <z_add_timeout+0x1b0>)
    c856:	f002 fc65 	bl	f124 <assert_print>
    c85a:	218e      	movs	r1, #142	; 0x8e
    c85c:	4648      	mov	r0, r9
    c85e:	f002 fc5a 	bl	f116 <assert_post_action>
    c862:	e7ea      	b.n	c83a <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    c864:	f11a 0801 	adds.w	r8, sl, #1
    c868:	f145 0900 	adc.w	r9, r5, #0
    c86c:	f7ff ff86 	bl	c77c <elapsed>
    c870:	eb18 0300 	adds.w	r3, r8, r0
    c874:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    c878:	6123      	str	r3, [r4, #16]
    c87a:	6160      	str	r0, [r4, #20]
    c87c:	e03d      	b.n	c8fa <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    c87e:	1a51      	subs	r1, r2, r1
    c880:	eb66 0303 	sbc.w	r3, r6, r3
    c884:	6101      	str	r1, [r0, #16]
    c886:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    c888:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    c88a:	6063      	str	r3, [r4, #4]
	node->next = successor;
    c88c:	6020      	str	r0, [r4, #0]
	prev->next = node;
    c88e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    c890:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    c892:	2800      	cmp	r0, #0
    c894:	d045      	beq.n	c922 <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    c896:	f7ff ff5b 	bl	c750 <first>
    c89a:	4284      	cmp	r4, r0
    c89c:	d048      	beq.n	c930 <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c89e:	4839      	ldr	r0, [pc, #228]	; (c984 <z_add_timeout+0x1a4>)
    c8a0:	f7fd ff44 	bl	a72c <z_spin_unlock_valid>
    c8a4:	2800      	cmp	r0, #0
    c8a6:	d050      	beq.n	c94a <z_add_timeout+0x16a>
	__asm__ volatile(
    c8a8:	f387 8811 	msr	BASEPRI, r7
    c8ac:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    c8b0:	f04f 0801 	mov.w	r8, #1
    c8b4:	f1b8 0f00 	cmp.w	r8, #0
    c8b8:	d158      	bne.n	c96c <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    c8ba:	4653      	mov	r3, sl
    c8bc:	f06f 0101 	mvn.w	r1, #1
    c8c0:	ebb1 010a 	subs.w	r1, r1, sl
    c8c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c8c8:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    c8cc:	2a00      	cmp	r2, #0
    c8ce:	dbc9      	blt.n	c864 <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    c8d0:	4a30      	ldr	r2, [pc, #192]	; (c994 <z_add_timeout+0x1b4>)
    c8d2:	6811      	ldr	r1, [r2, #0]
    c8d4:	6852      	ldr	r2, [r2, #4]
    c8d6:	185b      	adds	r3, r3, r1
    c8d8:	eb42 0205 	adc.w	r2, r2, r5
    c8dc:	f06f 0101 	mvn.w	r1, #1
    c8e0:	1acb      	subs	r3, r1, r3
    c8e2:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    c8e6:	4618      	mov	r0, r3
    c8e8:	4611      	mov	r1, r2
    c8ea:	2b01      	cmp	r3, #1
    c8ec:	f172 0300 	sbcs.w	r3, r2, #0
    c8f0:	da01      	bge.n	c8f6 <z_add_timeout+0x116>
    c8f2:	2001      	movs	r0, #1
    c8f4:	2100      	movs	r1, #0
    c8f6:	6120      	str	r0, [r4, #16]
    c8f8:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    c8fa:	f7ff ff29 	bl	c750 <first>
    c8fe:	2800      	cmp	r0, #0
    c900:	d0c7      	beq.n	c892 <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    c902:	6902      	ldr	r2, [r0, #16]
    c904:	6946      	ldr	r6, [r0, #20]
    c906:	6921      	ldr	r1, [r4, #16]
    c908:	6963      	ldr	r3, [r4, #20]
    c90a:	4291      	cmp	r1, r2
    c90c:	eb73 0c06 	sbcs.w	ip, r3, r6
    c910:	dbb5      	blt.n	c87e <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    c912:	1a89      	subs	r1, r1, r2
    c914:	eb63 0306 	sbc.w	r3, r3, r6
    c918:	6121      	str	r1, [r4, #16]
    c91a:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    c91c:	f7ff ff22 	bl	c764 <next>
    c920:	e7ed      	b.n	c8fe <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    c922:	4b1d      	ldr	r3, [pc, #116]	; (c998 <z_add_timeout+0x1b8>)
    c924:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    c926:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    c928:	6062      	str	r2, [r4, #4]
	tail->next = node;
    c92a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    c92c:	605c      	str	r4, [r3, #4]
}
    c92e:	e7b2      	b.n	c896 <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    c930:	f7ff ff30 	bl	c794 <next_timeout>

			if (next_time == 0 ||
    c934:	4603      	mov	r3, r0
    c936:	b118      	cbz	r0, c940 <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    c938:	4a18      	ldr	r2, [pc, #96]	; (c99c <z_add_timeout+0x1bc>)
    c93a:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    c93c:	4282      	cmp	r2, r0
    c93e:	d0ae      	beq.n	c89e <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    c940:	2100      	movs	r1, #0
    c942:	4618      	mov	r0, r3
    c944:	f7fb fb10 	bl	7f68 <sys_clock_set_timeout>
    c948:	e7a9      	b.n	c89e <z_add_timeout+0xbe>
    c94a:	f8df 803c 	ldr.w	r8, [pc, #60]	; c988 <z_add_timeout+0x1a8>
    c94e:	23b9      	movs	r3, #185	; 0xb9
    c950:	4642      	mov	r2, r8
    c952:	4913      	ldr	r1, [pc, #76]	; (c9a0 <z_add_timeout+0x1c0>)
    c954:	4809      	ldr	r0, [pc, #36]	; (c97c <z_add_timeout+0x19c>)
    c956:	f002 fbe5 	bl	f124 <assert_print>
    c95a:	490a      	ldr	r1, [pc, #40]	; (c984 <z_add_timeout+0x1a4>)
    c95c:	4811      	ldr	r0, [pc, #68]	; (c9a4 <z_add_timeout+0x1c4>)
    c95e:	f002 fbe1 	bl	f124 <assert_print>
    c962:	21b9      	movs	r1, #185	; 0xb9
    c964:	4640      	mov	r0, r8
    c966:	f002 fbd6 	bl	f116 <assert_post_action>
    c96a:	e79d      	b.n	c8a8 <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    c96c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c970:	4770      	bx	lr
    c972:	bf00      	nop
    c974:	00013138 	.word	0x00013138
    c978:	0001315c 	.word	0x0001315c
    c97c:	00011514 	.word	0x00011514
    c980:	00012f70 	.word	0x00012f70
    c984:	2000d530 	.word	0x2000d530
    c988:	000116c0 	.word	0x000116c0
    c98c:	00011720 	.word	0x00011720
    c990:	00011738 	.word	0x00011738
    c994:	20004928 	.word	0x20004928
    c998:	200040fc 	.word	0x200040fc
    c99c:	2000d4e4 	.word	0x2000d4e4
    c9a0:	000116f0 	.word	0x000116f0
    c9a4:	00011708 	.word	0x00011708

0000c9a8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    c9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9ac:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    c9ae:	2400      	movs	r4, #0
	__asm__ volatile(
    c9b0:	f04f 0320 	mov.w	r3, #32
    c9b4:	f3ef 8711 	mrs	r7, BASEPRI
    c9b8:	f383 8812 	msr	BASEPRI_MAX, r3
    c9bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c9c0:	481f      	ldr	r0, [pc, #124]	; (ca40 <z_abort_timeout+0x98>)
    c9c2:	f7fd fea3 	bl	a70c <z_spin_lock_valid>
    c9c6:	b128      	cbz	r0, c9d4 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    c9c8:	481d      	ldr	r0, [pc, #116]	; (ca40 <z_abort_timeout+0x98>)
    c9ca:	f7fd febf 	bl	a74c <z_spin_lock_set_owner>
	int ret = -EINVAL;
    c9ce:	f06f 0815 	mvn.w	r8, #21
	return k;
    c9d2:	e018      	b.n	ca06 <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c9d4:	4e1b      	ldr	r6, [pc, #108]	; (ca44 <z_abort_timeout+0x9c>)
    c9d6:	238e      	movs	r3, #142	; 0x8e
    c9d8:	4632      	mov	r2, r6
    c9da:	491b      	ldr	r1, [pc, #108]	; (ca48 <z_abort_timeout+0xa0>)
    c9dc:	481b      	ldr	r0, [pc, #108]	; (ca4c <z_abort_timeout+0xa4>)
    c9de:	f002 fba1 	bl	f124 <assert_print>
    c9e2:	4917      	ldr	r1, [pc, #92]	; (ca40 <z_abort_timeout+0x98>)
    c9e4:	481a      	ldr	r0, [pc, #104]	; (ca50 <z_abort_timeout+0xa8>)
    c9e6:	f002 fb9d 	bl	f124 <assert_print>
    c9ea:	218e      	movs	r1, #142	; 0x8e
    c9ec:	4630      	mov	r0, r6
    c9ee:	f002 fb92 	bl	f116 <assert_post_action>
    c9f2:	e7e9      	b.n	c9c8 <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c9f4:	4812      	ldr	r0, [pc, #72]	; (ca40 <z_abort_timeout+0x98>)
    c9f6:	f7fd fe99 	bl	a72c <z_spin_unlock_valid>
    c9fa:	b170      	cbz	r0, ca1a <z_abort_timeout+0x72>
	__asm__ volatile(
    c9fc:	f387 8811 	msr	BASEPRI, r7
    ca00:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ca04:	2401      	movs	r4, #1
    ca06:	4626      	mov	r6, r4
    ca08:	b9bc      	cbnz	r4, ca3a <z_abort_timeout+0x92>
	return node->next != NULL;
    ca0a:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    ca0c:	2b00      	cmp	r3, #0
    ca0e:	d0f1      	beq.n	c9f4 <z_abort_timeout+0x4c>
			remove_timeout(to);
    ca10:	4628      	mov	r0, r5
    ca12:	f003 fd9b 	bl	1054c <remove_timeout>
			ret = 0;
    ca16:	46b0      	mov	r8, r6
    ca18:	e7ec      	b.n	c9f4 <z_abort_timeout+0x4c>
    ca1a:	4c0a      	ldr	r4, [pc, #40]	; (ca44 <z_abort_timeout+0x9c>)
    ca1c:	23b9      	movs	r3, #185	; 0xb9
    ca1e:	4622      	mov	r2, r4
    ca20:	490c      	ldr	r1, [pc, #48]	; (ca54 <z_abort_timeout+0xac>)
    ca22:	480a      	ldr	r0, [pc, #40]	; (ca4c <z_abort_timeout+0xa4>)
    ca24:	f002 fb7e 	bl	f124 <assert_print>
    ca28:	4905      	ldr	r1, [pc, #20]	; (ca40 <z_abort_timeout+0x98>)
    ca2a:	480b      	ldr	r0, [pc, #44]	; (ca58 <z_abort_timeout+0xb0>)
    ca2c:	f002 fb7a 	bl	f124 <assert_print>
    ca30:	21b9      	movs	r1, #185	; 0xb9
    ca32:	4620      	mov	r0, r4
    ca34:	f002 fb6f 	bl	f116 <assert_post_action>
    ca38:	e7e0      	b.n	c9fc <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    ca3a:	4640      	mov	r0, r8
    ca3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca40:	2000d530 	.word	0x2000d530
    ca44:	000116c0 	.word	0x000116c0
    ca48:	00011720 	.word	0x00011720
    ca4c:	00011514 	.word	0x00011514
    ca50:	00011738 	.word	0x00011738
    ca54:	000116f0 	.word	0x000116f0
    ca58:	00011708 	.word	0x00011708

0000ca5c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    ca5c:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    ca5e:	2500      	movs	r5, #0
	__asm__ volatile(
    ca60:	f04f 0320 	mov.w	r3, #32
    ca64:	f3ef 8611 	mrs	r6, BASEPRI
    ca68:	f383 8812 	msr	BASEPRI_MAX, r3
    ca6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ca70:	481c      	ldr	r0, [pc, #112]	; (cae4 <z_get_next_timeout_expiry+0x88>)
    ca72:	f7fd fe4b 	bl	a70c <z_spin_lock_valid>
    ca76:	b128      	cbz	r0, ca84 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    ca78:	481a      	ldr	r0, [pc, #104]	; (cae4 <z_get_next_timeout_expiry+0x88>)
    ca7a:	f7fd fe67 	bl	a74c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    ca7e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    ca82:	e014      	b.n	caae <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ca84:	4c18      	ldr	r4, [pc, #96]	; (cae8 <z_get_next_timeout_expiry+0x8c>)
    ca86:	238e      	movs	r3, #142	; 0x8e
    ca88:	4622      	mov	r2, r4
    ca8a:	4918      	ldr	r1, [pc, #96]	; (caec <z_get_next_timeout_expiry+0x90>)
    ca8c:	4818      	ldr	r0, [pc, #96]	; (caf0 <z_get_next_timeout_expiry+0x94>)
    ca8e:	f002 fb49 	bl	f124 <assert_print>
    ca92:	4914      	ldr	r1, [pc, #80]	; (cae4 <z_get_next_timeout_expiry+0x88>)
    ca94:	4817      	ldr	r0, [pc, #92]	; (caf4 <z_get_next_timeout_expiry+0x98>)
    ca96:	f002 fb45 	bl	f124 <assert_print>
    ca9a:	218e      	movs	r1, #142	; 0x8e
    ca9c:	4620      	mov	r0, r4
    ca9e:	f002 fb3a 	bl	f116 <assert_post_action>
    caa2:	e7e9      	b.n	ca78 <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    caa4:	f386 8811 	msr	BASEPRI, r6
    caa8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    caac:	2501      	movs	r5, #1
    caae:	b9bd      	cbnz	r5, cae0 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    cab0:	f7ff fe70 	bl	c794 <next_timeout>
    cab4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cab6:	480b      	ldr	r0, [pc, #44]	; (cae4 <z_get_next_timeout_expiry+0x88>)
    cab8:	f7fd fe38 	bl	a72c <z_spin_unlock_valid>
    cabc:	2800      	cmp	r0, #0
    cabe:	d1f1      	bne.n	caa4 <z_get_next_timeout_expiry+0x48>
    cac0:	4d09      	ldr	r5, [pc, #36]	; (cae8 <z_get_next_timeout_expiry+0x8c>)
    cac2:	23b9      	movs	r3, #185	; 0xb9
    cac4:	462a      	mov	r2, r5
    cac6:	490c      	ldr	r1, [pc, #48]	; (caf8 <z_get_next_timeout_expiry+0x9c>)
    cac8:	4809      	ldr	r0, [pc, #36]	; (caf0 <z_get_next_timeout_expiry+0x94>)
    caca:	f002 fb2b 	bl	f124 <assert_print>
    cace:	4905      	ldr	r1, [pc, #20]	; (cae4 <z_get_next_timeout_expiry+0x88>)
    cad0:	480a      	ldr	r0, [pc, #40]	; (cafc <z_get_next_timeout_expiry+0xa0>)
    cad2:	f002 fb27 	bl	f124 <assert_print>
    cad6:	21b9      	movs	r1, #185	; 0xb9
    cad8:	4628      	mov	r0, r5
    cada:	f002 fb1c 	bl	f116 <assert_post_action>
    cade:	e7e1      	b.n	caa4 <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    cae0:	4620      	mov	r0, r4
    cae2:	bd70      	pop	{r4, r5, r6, pc}
    cae4:	2000d530 	.word	0x2000d530
    cae8:	000116c0 	.word	0x000116c0
    caec:	00011720 	.word	0x00011720
    caf0:	00011514 	.word	0x00011514
    caf4:	00011738 	.word	0x00011738
    caf8:	000116f0 	.word	0x000116f0
    cafc:	00011708 	.word	0x00011708

0000cb00 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    cb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb04:	4606      	mov	r6, r0
    cb06:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    cb08:	2500      	movs	r5, #0
	__asm__ volatile(
    cb0a:	f04f 0320 	mov.w	r3, #32
    cb0e:	f3ef 8711 	mrs	r7, BASEPRI
    cb12:	f383 8812 	msr	BASEPRI_MAX, r3
    cb16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cb1a:	4825      	ldr	r0, [pc, #148]	; (cbb0 <z_set_timeout_expiry+0xb0>)
    cb1c:	f7fd fdf6 	bl	a70c <z_spin_lock_valid>
    cb20:	b118      	cbz	r0, cb2a <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    cb22:	4823      	ldr	r0, [pc, #140]	; (cbb0 <z_set_timeout_expiry+0xb0>)
    cb24:	f7fd fe12 	bl	a74c <z_spin_lock_set_owner>
	return k;
    cb28:	e01e      	b.n	cb68 <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cb2a:	4c22      	ldr	r4, [pc, #136]	; (cbb4 <z_set_timeout_expiry+0xb4>)
    cb2c:	238e      	movs	r3, #142	; 0x8e
    cb2e:	4622      	mov	r2, r4
    cb30:	4921      	ldr	r1, [pc, #132]	; (cbb8 <z_set_timeout_expiry+0xb8>)
    cb32:	4822      	ldr	r0, [pc, #136]	; (cbbc <z_set_timeout_expiry+0xbc>)
    cb34:	f002 faf6 	bl	f124 <assert_print>
    cb38:	491d      	ldr	r1, [pc, #116]	; (cbb0 <z_set_timeout_expiry+0xb0>)
    cb3a:	4821      	ldr	r0, [pc, #132]	; (cbc0 <z_set_timeout_expiry+0xc0>)
    cb3c:	f002 faf2 	bl	f124 <assert_print>
    cb40:	218e      	movs	r1, #142	; 0x8e
    cb42:	4620      	mov	r0, r4
    cb44:	f002 fae7 	bl	f116 <assert_post_action>
    cb48:	e7eb      	b.n	cb22 <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    cb4a:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    cb4c:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    cb50:	2801      	cmp	r0, #1
    cb52:	dd00      	ble.n	cb56 <z_set_timeout_expiry+0x56>
    cb54:	b99c      	cbnz	r4, cb7e <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cb56:	4816      	ldr	r0, [pc, #88]	; (cbb0 <z_set_timeout_expiry+0xb0>)
    cb58:	f7fd fde8 	bl	a72c <z_spin_unlock_valid>
    cb5c:	b1b0      	cbz	r0, cb8c <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    cb5e:	f387 8811 	msr	BASEPRI, r7
    cb62:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    cb66:	2501      	movs	r5, #1
    cb68:	462c      	mov	r4, r5
    cb6a:	b9fd      	cbnz	r5, cbac <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    cb6c:	f7ff fe12 	bl	c794 <next_timeout>
			      || (ticks <= next_to);
    cb70:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    cb74:	d0e9      	beq.n	cb4a <z_set_timeout_expiry+0x4a>
    cb76:	42b0      	cmp	r0, r6
    cb78:	dbe8      	blt.n	cb4c <z_set_timeout_expiry+0x4c>
    cb7a:	2401      	movs	r4, #1
    cb7c:	e7e6      	b.n	cb4c <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    cb7e:	4641      	mov	r1, r8
    cb80:	42b0      	cmp	r0, r6
    cb82:	bfa8      	it	ge
    cb84:	4630      	movge	r0, r6
    cb86:	f7fb f9ef 	bl	7f68 <sys_clock_set_timeout>
    cb8a:	e7e4      	b.n	cb56 <z_set_timeout_expiry+0x56>
    cb8c:	4c09      	ldr	r4, [pc, #36]	; (cbb4 <z_set_timeout_expiry+0xb4>)
    cb8e:	23b9      	movs	r3, #185	; 0xb9
    cb90:	4622      	mov	r2, r4
    cb92:	490c      	ldr	r1, [pc, #48]	; (cbc4 <z_set_timeout_expiry+0xc4>)
    cb94:	4809      	ldr	r0, [pc, #36]	; (cbbc <z_set_timeout_expiry+0xbc>)
    cb96:	f002 fac5 	bl	f124 <assert_print>
    cb9a:	4905      	ldr	r1, [pc, #20]	; (cbb0 <z_set_timeout_expiry+0xb0>)
    cb9c:	480a      	ldr	r0, [pc, #40]	; (cbc8 <z_set_timeout_expiry+0xc8>)
    cb9e:	f002 fac1 	bl	f124 <assert_print>
    cba2:	21b9      	movs	r1, #185	; 0xb9
    cba4:	4620      	mov	r0, r4
    cba6:	f002 fab6 	bl	f116 <assert_post_action>
    cbaa:	e7d8      	b.n	cb5e <z_set_timeout_expiry+0x5e>
		}
	}
}
    cbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cbb0:	2000d530 	.word	0x2000d530
    cbb4:	000116c0 	.word	0x000116c0
    cbb8:	00011720 	.word	0x00011720
    cbbc:	00011514 	.word	0x00011514
    cbc0:	00011738 	.word	0x00011738
    cbc4:	000116f0 	.word	0x000116f0
    cbc8:	00011708 	.word	0x00011708

0000cbcc <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    cbcc:	b570      	push	{r4, r5, r6, lr}
    cbce:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    cbd0:	f7fe fd5e 	bl	b690 <z_time_slice>
	__asm__ volatile(
    cbd4:	f04f 0320 	mov.w	r3, #32
    cbd8:	f3ef 8511 	mrs	r5, BASEPRI
    cbdc:	f383 8812 	msr	BASEPRI_MAX, r3
    cbe0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cbe4:	4854      	ldr	r0, [pc, #336]	; (cd38 <sys_clock_announce+0x16c>)
    cbe6:	f7fd fd91 	bl	a70c <z_spin_lock_valid>
    cbea:	b128      	cbz	r0, cbf8 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    cbec:	4852      	ldr	r0, [pc, #328]	; (cd38 <sys_clock_announce+0x16c>)
    cbee:	f7fd fdad 	bl	a74c <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    cbf2:	4b52      	ldr	r3, [pc, #328]	; (cd3c <sys_clock_announce+0x170>)
    cbf4:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    cbf6:	e022      	b.n	cc3e <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cbf8:	4e51      	ldr	r6, [pc, #324]	; (cd40 <sys_clock_announce+0x174>)
    cbfa:	238e      	movs	r3, #142	; 0x8e
    cbfc:	4632      	mov	r2, r6
    cbfe:	4951      	ldr	r1, [pc, #324]	; (cd44 <sys_clock_announce+0x178>)
    cc00:	4851      	ldr	r0, [pc, #324]	; (cd48 <sys_clock_announce+0x17c>)
    cc02:	f002 fa8f 	bl	f124 <assert_print>
    cc06:	494c      	ldr	r1, [pc, #304]	; (cd38 <sys_clock_announce+0x16c>)
    cc08:	4850      	ldr	r0, [pc, #320]	; (cd4c <sys_clock_announce+0x180>)
    cc0a:	f002 fa8b 	bl	f124 <assert_print>
    cc0e:	218e      	movs	r1, #142	; 0x8e
    cc10:	4630      	mov	r0, r6
    cc12:	f002 fa80 	bl	f116 <assert_post_action>
    cc16:	e7e9      	b.n	cbec <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cc18:	4e49      	ldr	r6, [pc, #292]	; (cd40 <sys_clock_announce+0x174>)
    cc1a:	23b9      	movs	r3, #185	; 0xb9
    cc1c:	4632      	mov	r2, r6
    cc1e:	494c      	ldr	r1, [pc, #304]	; (cd50 <sys_clock_announce+0x184>)
    cc20:	4849      	ldr	r0, [pc, #292]	; (cd48 <sys_clock_announce+0x17c>)
    cc22:	f002 fa7f 	bl	f124 <assert_print>
    cc26:	4944      	ldr	r1, [pc, #272]	; (cd38 <sys_clock_announce+0x16c>)
    cc28:	484a      	ldr	r0, [pc, #296]	; (cd54 <sys_clock_announce+0x188>)
    cc2a:	f002 fa7b 	bl	f124 <assert_print>
    cc2e:	21b9      	movs	r1, #185	; 0xb9
    cc30:	4630      	mov	r0, r6
    cc32:	f002 fa70 	bl	f116 <assert_post_action>
    cc36:	e027      	b.n	cc88 <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    cc38:	483f      	ldr	r0, [pc, #252]	; (cd38 <sys_clock_announce+0x16c>)
    cc3a:	f7fd fd87 	bl	a74c <z_spin_lock_set_owner>
    cc3e:	f7ff fd87 	bl	c750 <first>
    cc42:	4604      	mov	r4, r0
    cc44:	2800      	cmp	r0, #0
    cc46:	d043      	beq.n	ccd0 <sys_clock_announce+0x104>
    cc48:	6902      	ldr	r2, [r0, #16]
    cc4a:	6941      	ldr	r1, [r0, #20]
    cc4c:	4b3b      	ldr	r3, [pc, #236]	; (cd3c <sys_clock_announce+0x170>)
    cc4e:	681b      	ldr	r3, [r3, #0]
    cc50:	17d8      	asrs	r0, r3, #31
    cc52:	4293      	cmp	r3, r2
    cc54:	eb70 0101 	sbcs.w	r1, r0, r1
    cc58:	db3a      	blt.n	ccd0 <sys_clock_announce+0x104>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    cc5a:	483f      	ldr	r0, [pc, #252]	; (cd58 <sys_clock_announce+0x18c>)
    cc5c:	6801      	ldr	r1, [r0, #0]
    cc5e:	6846      	ldr	r6, [r0, #4]
    cc60:	1889      	adds	r1, r1, r2
    cc62:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    cc66:	6001      	str	r1, [r0, #0]
    cc68:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    cc6a:	1a9b      	subs	r3, r3, r2
    cc6c:	4a33      	ldr	r2, [pc, #204]	; (cd3c <sys_clock_announce+0x170>)
    cc6e:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    cc70:	2200      	movs	r2, #0
    cc72:	2300      	movs	r3, #0
    cc74:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    cc78:	4620      	mov	r0, r4
    cc7a:	f003 fc67 	bl	1054c <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cc7e:	482e      	ldr	r0, [pc, #184]	; (cd38 <sys_clock_announce+0x16c>)
    cc80:	f7fd fd54 	bl	a72c <z_spin_unlock_valid>
    cc84:	2800      	cmp	r0, #0
    cc86:	d0c7      	beq.n	cc18 <sys_clock_announce+0x4c>
	__asm__ volatile(
    cc88:	f385 8811 	msr	BASEPRI, r5
    cc8c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    cc90:	68a3      	ldr	r3, [r4, #8]
    cc92:	4620      	mov	r0, r4
    cc94:	4798      	blx	r3
	__asm__ volatile(
    cc96:	f04f 0320 	mov.w	r3, #32
    cc9a:	f3ef 8511 	mrs	r5, BASEPRI
    cc9e:	f383 8812 	msr	BASEPRI_MAX, r3
    cca2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cca6:	4824      	ldr	r0, [pc, #144]	; (cd38 <sys_clock_announce+0x16c>)
    cca8:	f7fd fd30 	bl	a70c <z_spin_lock_valid>
    ccac:	2800      	cmp	r0, #0
    ccae:	d1c3      	bne.n	cc38 <sys_clock_announce+0x6c>
    ccb0:	4c23      	ldr	r4, [pc, #140]	; (cd40 <sys_clock_announce+0x174>)
    ccb2:	238e      	movs	r3, #142	; 0x8e
    ccb4:	4622      	mov	r2, r4
    ccb6:	4923      	ldr	r1, [pc, #140]	; (cd44 <sys_clock_announce+0x178>)
    ccb8:	4823      	ldr	r0, [pc, #140]	; (cd48 <sys_clock_announce+0x17c>)
    ccba:	f002 fa33 	bl	f124 <assert_print>
    ccbe:	491e      	ldr	r1, [pc, #120]	; (cd38 <sys_clock_announce+0x16c>)
    ccc0:	4822      	ldr	r0, [pc, #136]	; (cd4c <sys_clock_announce+0x180>)
    ccc2:	f002 fa2f 	bl	f124 <assert_print>
    ccc6:	218e      	movs	r1, #142	; 0x8e
    ccc8:	4620      	mov	r0, r4
    ccca:	f002 fa24 	bl	f116 <assert_post_action>
    ccce:	e7b3      	b.n	cc38 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    ccd0:	b144      	cbz	r4, cce4 <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    ccd2:	4b1a      	ldr	r3, [pc, #104]	; (cd3c <sys_clock_announce+0x170>)
    ccd4:	6819      	ldr	r1, [r3, #0]
    ccd6:	6923      	ldr	r3, [r4, #16]
    ccd8:	6962      	ldr	r2, [r4, #20]
    ccda:	1a5b      	subs	r3, r3, r1
    ccdc:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    cce0:	6123      	str	r3, [r4, #16]
    cce2:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    cce4:	4a1c      	ldr	r2, [pc, #112]	; (cd58 <sys_clock_announce+0x18c>)
    cce6:	4e15      	ldr	r6, [pc, #84]	; (cd3c <sys_clock_announce+0x170>)
    cce8:	6830      	ldr	r0, [r6, #0]
    ccea:	6813      	ldr	r3, [r2, #0]
    ccec:	6851      	ldr	r1, [r2, #4]
    ccee:	181b      	adds	r3, r3, r0
    ccf0:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    ccf4:	6013      	str	r3, [r2, #0]
    ccf6:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    ccf8:	2400      	movs	r4, #0
    ccfa:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    ccfc:	f7ff fd4a 	bl	c794 <next_timeout>
    cd00:	4621      	mov	r1, r4
    cd02:	f7fb f931 	bl	7f68 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cd06:	480c      	ldr	r0, [pc, #48]	; (cd38 <sys_clock_announce+0x16c>)
    cd08:	f7fd fd10 	bl	a72c <z_spin_unlock_valid>
    cd0c:	b120      	cbz	r0, cd18 <sys_clock_announce+0x14c>
	__asm__ volatile(
    cd0e:	f385 8811 	msr	BASEPRI, r5
    cd12:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    cd16:	bd70      	pop	{r4, r5, r6, pc}
    cd18:	4c09      	ldr	r4, [pc, #36]	; (cd40 <sys_clock_announce+0x174>)
    cd1a:	23b9      	movs	r3, #185	; 0xb9
    cd1c:	4622      	mov	r2, r4
    cd1e:	490c      	ldr	r1, [pc, #48]	; (cd50 <sys_clock_announce+0x184>)
    cd20:	4809      	ldr	r0, [pc, #36]	; (cd48 <sys_clock_announce+0x17c>)
    cd22:	f002 f9ff 	bl	f124 <assert_print>
    cd26:	4904      	ldr	r1, [pc, #16]	; (cd38 <sys_clock_announce+0x16c>)
    cd28:	480a      	ldr	r0, [pc, #40]	; (cd54 <sys_clock_announce+0x188>)
    cd2a:	f002 f9fb 	bl	f124 <assert_print>
    cd2e:	21b9      	movs	r1, #185	; 0xb9
    cd30:	4620      	mov	r0, r4
    cd32:	f002 f9f0 	bl	f116 <assert_post_action>
    cd36:	e7ea      	b.n	cd0e <sys_clock_announce+0x142>
    cd38:	2000d530 	.word	0x2000d530
    cd3c:	2000d52c 	.word	0x2000d52c
    cd40:	000116c0 	.word	0x000116c0
    cd44:	00011720 	.word	0x00011720
    cd48:	00011514 	.word	0x00011514
    cd4c:	00011738 	.word	0x00011738
    cd50:	000116f0 	.word	0x000116f0
    cd54:	00011708 	.word	0x00011708
    cd58:	20004928 	.word	0x20004928

0000cd5c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    cd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    cd5e:	2600      	movs	r6, #0
	__asm__ volatile(
    cd60:	f04f 0320 	mov.w	r3, #32
    cd64:	f3ef 8711 	mrs	r7, BASEPRI
    cd68:	f383 8812 	msr	BASEPRI_MAX, r3
    cd6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cd70:	481f      	ldr	r0, [pc, #124]	; (cdf0 <sys_clock_tick_get+0x94>)
    cd72:	f7fd fccb 	bl	a70c <z_spin_lock_valid>
    cd76:	b128      	cbz	r0, cd84 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    cd78:	481d      	ldr	r0, [pc, #116]	; (cdf0 <sys_clock_tick_get+0x94>)
    cd7a:	f7fd fce7 	bl	a74c <z_spin_lock_set_owner>
	uint64_t t = 0U;
    cd7e:	2400      	movs	r4, #0
    cd80:	4625      	mov	r5, r4
	return k;
    cd82:	e014      	b.n	cdae <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cd84:	4c1b      	ldr	r4, [pc, #108]	; (cdf4 <sys_clock_tick_get+0x98>)
    cd86:	238e      	movs	r3, #142	; 0x8e
    cd88:	4622      	mov	r2, r4
    cd8a:	491b      	ldr	r1, [pc, #108]	; (cdf8 <sys_clock_tick_get+0x9c>)
    cd8c:	481b      	ldr	r0, [pc, #108]	; (cdfc <sys_clock_tick_get+0xa0>)
    cd8e:	f002 f9c9 	bl	f124 <assert_print>
    cd92:	4917      	ldr	r1, [pc, #92]	; (cdf0 <sys_clock_tick_get+0x94>)
    cd94:	481a      	ldr	r0, [pc, #104]	; (ce00 <sys_clock_tick_get+0xa4>)
    cd96:	f002 f9c5 	bl	f124 <assert_print>
    cd9a:	218e      	movs	r1, #142	; 0x8e
    cd9c:	4620      	mov	r0, r4
    cd9e:	f002 f9ba 	bl	f116 <assert_post_action>
    cda2:	e7e9      	b.n	cd78 <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    cda4:	f387 8811 	msr	BASEPRI, r7
    cda8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    cdac:	2601      	movs	r6, #1
    cdae:	b9e6      	cbnz	r6, cdea <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    cdb0:	f7fb f90c 	bl	7fcc <sys_clock_elapsed>
    cdb4:	4b13      	ldr	r3, [pc, #76]	; (ce04 <sys_clock_tick_get+0xa8>)
    cdb6:	681c      	ldr	r4, [r3, #0]
    cdb8:	685d      	ldr	r5, [r3, #4]
    cdba:	1904      	adds	r4, r0, r4
    cdbc:	f145 0500 	adc.w	r5, r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cdc0:	480b      	ldr	r0, [pc, #44]	; (cdf0 <sys_clock_tick_get+0x94>)
    cdc2:	f7fd fcb3 	bl	a72c <z_spin_unlock_valid>
    cdc6:	2800      	cmp	r0, #0
    cdc8:	d1ec      	bne.n	cda4 <sys_clock_tick_get+0x48>
    cdca:	4e0a      	ldr	r6, [pc, #40]	; (cdf4 <sys_clock_tick_get+0x98>)
    cdcc:	23b9      	movs	r3, #185	; 0xb9
    cdce:	4632      	mov	r2, r6
    cdd0:	490d      	ldr	r1, [pc, #52]	; (ce08 <sys_clock_tick_get+0xac>)
    cdd2:	480a      	ldr	r0, [pc, #40]	; (cdfc <sys_clock_tick_get+0xa0>)
    cdd4:	f002 f9a6 	bl	f124 <assert_print>
    cdd8:	4905      	ldr	r1, [pc, #20]	; (cdf0 <sys_clock_tick_get+0x94>)
    cdda:	480c      	ldr	r0, [pc, #48]	; (ce0c <sys_clock_tick_get+0xb0>)
    cddc:	f002 f9a2 	bl	f124 <assert_print>
    cde0:	21b9      	movs	r1, #185	; 0xb9
    cde2:	4630      	mov	r0, r6
    cde4:	f002 f997 	bl	f116 <assert_post_action>
    cde8:	e7dc      	b.n	cda4 <sys_clock_tick_get+0x48>
	}
	return t;
}
    cdea:	4620      	mov	r0, r4
    cdec:	4629      	mov	r1, r5
    cdee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cdf0:	2000d530 	.word	0x2000d530
    cdf4:	000116c0 	.word	0x000116c0
    cdf8:	00011720 	.word	0x00011720
    cdfc:	00011514 	.word	0x00011514
    ce00:	00011738 	.word	0x00011738
    ce04:	20004928 	.word	0x20004928
    ce08:	000116f0 	.word	0x000116f0
    ce0c:	00011708 	.word	0x00011708

0000ce10 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    ce10:	b570      	push	{r4, r5, r6, lr}
    ce12:	4604      	mov	r4, r0
	__asm__ volatile(
    ce14:	f04f 0320 	mov.w	r3, #32
    ce18:	f3ef 8611 	mrs	r6, BASEPRI
    ce1c:	f383 8812 	msr	BASEPRI_MAX, r3
    ce20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ce24:	4857      	ldr	r0, [pc, #348]	; (cf84 <z_timer_expiration_handler+0x174>)
    ce26:	f7fd fc71 	bl	a70c <z_spin_lock_valid>
    ce2a:	2800      	cmp	r0, #0
    ce2c:	d049      	beq.n	cec2 <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
    ce2e:	4855      	ldr	r0, [pc, #340]	; (cf84 <z_timer_expiration_handler+0x174>)
    ce30:	f7fd fc8c 	bl	a74c <z_spin_lock_set_owner>
	return k;
    ce34:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    ce36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    ce38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ce3a:	ea52 0103 	orrs.w	r1, r2, r3
    ce3e:	d005      	beq.n	ce4c <z_timer_expiration_handler+0x3c>
    ce40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ce44:	bf08      	it	eq
    ce46:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    ce4a:	d14a      	bne.n	cee2 <z_timer_expiration_handler+0xd2>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    ce4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ce4e:	3301      	adds	r3, #1
    ce50:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    ce52:	6a23      	ldr	r3, [r4, #32]
    ce54:	b1db      	cbz	r3, ce8e <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ce56:	484b      	ldr	r0, [pc, #300]	; (cf84 <z_timer_expiration_handler+0x174>)
    ce58:	f7fd fc68 	bl	a72c <z_spin_unlock_valid>
    ce5c:	2800      	cmp	r0, #0
    ce5e:	d047      	beq.n	cef0 <z_timer_expiration_handler+0xe0>
	__asm__ volatile(
    ce60:	f386 8811 	msr	BASEPRI, r6
    ce64:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    ce68:	6a23      	ldr	r3, [r4, #32]
    ce6a:	4620      	mov	r0, r4
    ce6c:	4798      	blx	r3
	__asm__ volatile(
    ce6e:	f04f 0320 	mov.w	r3, #32
    ce72:	f3ef 8511 	mrs	r5, BASEPRI
    ce76:	f383 8812 	msr	BASEPRI_MAX, r3
    ce7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ce7e:	4841      	ldr	r0, [pc, #260]	; (cf84 <z_timer_expiration_handler+0x174>)
    ce80:	f7fd fc44 	bl	a70c <z_spin_lock_valid>
    ce84:	2800      	cmp	r0, #0
    ce86:	d043      	beq.n	cf10 <z_timer_expiration_handler+0x100>
	z_spin_lock_set_owner(l);
    ce88:	483e      	ldr	r0, [pc, #248]	; (cf84 <z_timer_expiration_handler+0x174>)
    ce8a:	f7fd fc5f 	bl	a74c <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    ce8e:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    ce92:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ce94:	42a3      	cmp	r3, r4
    ce96:	d04b      	beq.n	cf30 <z_timer_expiration_handler+0x120>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    ce98:	2c00      	cmp	r4, #0
    ce9a:	d049      	beq.n	cf30 <z_timer_expiration_handler+0x120>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    ce9c:	4620      	mov	r0, r4
    ce9e:	f7fe f9f7 	bl	b290 <z_unpend_thread_no_timeout>
    cea2:	2300      	movs	r3, #0
    cea4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cea8:	4836      	ldr	r0, [pc, #216]	; (cf84 <z_timer_expiration_handler+0x174>)
    ceaa:	f7fd fc3f 	bl	a72c <z_spin_unlock_valid>
    ceae:	2800      	cmp	r0, #0
    ceb0:	d057      	beq.n	cf62 <z_timer_expiration_handler+0x152>
	__asm__ volatile(
    ceb2:	f385 8811 	msr	BASEPRI, r5
    ceb6:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    ceba:	4620      	mov	r0, r4
    cebc:	f7fe fce6 	bl	b88c <z_ready_thread>
}
    cec0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cec2:	4d31      	ldr	r5, [pc, #196]	; (cf88 <z_timer_expiration_handler+0x178>)
    cec4:	238e      	movs	r3, #142	; 0x8e
    cec6:	462a      	mov	r2, r5
    cec8:	4930      	ldr	r1, [pc, #192]	; (cf8c <z_timer_expiration_handler+0x17c>)
    ceca:	4831      	ldr	r0, [pc, #196]	; (cf90 <z_timer_expiration_handler+0x180>)
    cecc:	f002 f92a 	bl	f124 <assert_print>
    ced0:	492c      	ldr	r1, [pc, #176]	; (cf84 <z_timer_expiration_handler+0x174>)
    ced2:	4830      	ldr	r0, [pc, #192]	; (cf94 <z_timer_expiration_handler+0x184>)
    ced4:	f002 f926 	bl	f124 <assert_print>
    ced8:	218e      	movs	r1, #142	; 0x8e
    ceda:	4628      	mov	r0, r5
    cedc:	f002 f91b 	bl	f116 <assert_post_action>
    cee0:	e7a5      	b.n	ce2e <z_timer_expiration_handler+0x1e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    cee2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    cee6:	492c      	ldr	r1, [pc, #176]	; (cf98 <z_timer_expiration_handler+0x188>)
    cee8:	4620      	mov	r0, r4
    ceea:	f7ff fc79 	bl	c7e0 <z_add_timeout>
    ceee:	e7ad      	b.n	ce4c <z_timer_expiration_handler+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cef0:	4d25      	ldr	r5, [pc, #148]	; (cf88 <z_timer_expiration_handler+0x178>)
    cef2:	23b9      	movs	r3, #185	; 0xb9
    cef4:	462a      	mov	r2, r5
    cef6:	4929      	ldr	r1, [pc, #164]	; (cf9c <z_timer_expiration_handler+0x18c>)
    cef8:	4825      	ldr	r0, [pc, #148]	; (cf90 <z_timer_expiration_handler+0x180>)
    cefa:	f002 f913 	bl	f124 <assert_print>
    cefe:	4921      	ldr	r1, [pc, #132]	; (cf84 <z_timer_expiration_handler+0x174>)
    cf00:	4827      	ldr	r0, [pc, #156]	; (cfa0 <z_timer_expiration_handler+0x190>)
    cf02:	f002 f90f 	bl	f124 <assert_print>
    cf06:	21b9      	movs	r1, #185	; 0xb9
    cf08:	4628      	mov	r0, r5
    cf0a:	f002 f904 	bl	f116 <assert_post_action>
    cf0e:	e7a7      	b.n	ce60 <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cf10:	4e1d      	ldr	r6, [pc, #116]	; (cf88 <z_timer_expiration_handler+0x178>)
    cf12:	238e      	movs	r3, #142	; 0x8e
    cf14:	4632      	mov	r2, r6
    cf16:	491d      	ldr	r1, [pc, #116]	; (cf8c <z_timer_expiration_handler+0x17c>)
    cf18:	481d      	ldr	r0, [pc, #116]	; (cf90 <z_timer_expiration_handler+0x180>)
    cf1a:	f002 f903 	bl	f124 <assert_print>
    cf1e:	4919      	ldr	r1, [pc, #100]	; (cf84 <z_timer_expiration_handler+0x174>)
    cf20:	481c      	ldr	r0, [pc, #112]	; (cf94 <z_timer_expiration_handler+0x184>)
    cf22:	f002 f8ff 	bl	f124 <assert_print>
    cf26:	218e      	movs	r1, #142	; 0x8e
    cf28:	4630      	mov	r0, r6
    cf2a:	f002 f8f4 	bl	f116 <assert_post_action>
    cf2e:	e7ab      	b.n	ce88 <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cf30:	4814      	ldr	r0, [pc, #80]	; (cf84 <z_timer_expiration_handler+0x174>)
    cf32:	f7fd fbfb 	bl	a72c <z_spin_unlock_valid>
    cf36:	b120      	cbz	r0, cf42 <z_timer_expiration_handler+0x132>
    cf38:	f385 8811 	msr	BASEPRI, r5
    cf3c:	f3bf 8f6f 	isb	sy
		return;
    cf40:	e7be      	b.n	cec0 <z_timer_expiration_handler+0xb0>
    cf42:	4c11      	ldr	r4, [pc, #68]	; (cf88 <z_timer_expiration_handler+0x178>)
    cf44:	23b9      	movs	r3, #185	; 0xb9
    cf46:	4622      	mov	r2, r4
    cf48:	4914      	ldr	r1, [pc, #80]	; (cf9c <z_timer_expiration_handler+0x18c>)
    cf4a:	4811      	ldr	r0, [pc, #68]	; (cf90 <z_timer_expiration_handler+0x180>)
    cf4c:	f002 f8ea 	bl	f124 <assert_print>
    cf50:	490c      	ldr	r1, [pc, #48]	; (cf84 <z_timer_expiration_handler+0x174>)
    cf52:	4813      	ldr	r0, [pc, #76]	; (cfa0 <z_timer_expiration_handler+0x190>)
    cf54:	f002 f8e6 	bl	f124 <assert_print>
    cf58:	21b9      	movs	r1, #185	; 0xb9
    cf5a:	4620      	mov	r0, r4
    cf5c:	f002 f8db 	bl	f116 <assert_post_action>
    cf60:	e7ea      	b.n	cf38 <z_timer_expiration_handler+0x128>
    cf62:	4e09      	ldr	r6, [pc, #36]	; (cf88 <z_timer_expiration_handler+0x178>)
    cf64:	23b9      	movs	r3, #185	; 0xb9
    cf66:	4632      	mov	r2, r6
    cf68:	490c      	ldr	r1, [pc, #48]	; (cf9c <z_timer_expiration_handler+0x18c>)
    cf6a:	4809      	ldr	r0, [pc, #36]	; (cf90 <z_timer_expiration_handler+0x180>)
    cf6c:	f002 f8da 	bl	f124 <assert_print>
    cf70:	4904      	ldr	r1, [pc, #16]	; (cf84 <z_timer_expiration_handler+0x174>)
    cf72:	480b      	ldr	r0, [pc, #44]	; (cfa0 <z_timer_expiration_handler+0x190>)
    cf74:	f002 f8d6 	bl	f124 <assert_print>
    cf78:	21b9      	movs	r1, #185	; 0xb9
    cf7a:	4630      	mov	r0, r6
    cf7c:	f002 f8cb 	bl	f116 <assert_post_action>
    cf80:	e797      	b.n	ceb2 <z_timer_expiration_handler+0xa2>
    cf82:	bf00      	nop
    cf84:	2000d534 	.word	0x2000d534
    cf88:	000116c0 	.word	0x000116c0
    cf8c:	00011720 	.word	0x00011720
    cf90:	00011514 	.word	0x00011514
    cf94:	00011738 	.word	0x00011738
    cf98:	0000ce11 	.word	0x0000ce11
    cf9c:	000116f0 	.word	0x000116f0
    cfa0:	00011708 	.word	0x00011708

0000cfa4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    cfa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cfa8:	9f06      	ldr	r7, [sp, #24]
    cfaa:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    cfae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cfb2:	bf08      	it	eq
    cfb4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    cfb8:	d02f      	beq.n	d01a <z_impl_k_timer_start+0x76>
    cfba:	4605      	mov	r5, r0
    cfbc:	4614      	mov	r4, r2
    cfbe:	461e      	mov	r6, r3
    cfc0:	4611      	mov	r1, r2
    cfc2:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    cfc4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    cfc8:	bf08      	it	eq
    cfca:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    cfce:	d00d      	beq.n	cfec <z_impl_k_timer_start+0x48>
    cfd0:	ea57 0c08 	orrs.w	ip, r7, r8
    cfd4:	d00a      	beq.n	cfec <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
    cfd6:	f06f 0c01 	mvn.w	ip, #1
    cfda:	ebbc 0c07 	subs.w	ip, ip, r7
    cfde:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    cfe2:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    cfe6:	f1bc 0f00 	cmp.w	ip, #0
    cfea:	db18      	blt.n	d01e <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    cfec:	f06f 0301 	mvn.w	r3, #1
    cff0:	1a5b      	subs	r3, r3, r1
    cff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cff6:	eb63 0300 	sbc.w	r3, r3, r0
    cffa:	2b00      	cmp	r3, #0
    cffc:	db1a      	blt.n	d034 <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    cffe:	4628      	mov	r0, r5
    d000:	f7ff fcd2 	bl	c9a8 <z_abort_timeout>
	timer->period = period;
    d004:	62af      	str	r7, [r5, #40]	; 0x28
    d006:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    d00a:	2300      	movs	r3, #0
    d00c:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    d00e:	4622      	mov	r2, r4
    d010:	4633      	mov	r3, r6
    d012:	490e      	ldr	r1, [pc, #56]	; (d04c <z_impl_k_timer_start+0xa8>)
    d014:	4628      	mov	r0, r5
    d016:	f7ff fbe3 	bl	c7e0 <z_add_timeout>
		     duration);
}
    d01a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    d01e:	2f02      	cmp	r7, #2
    d020:	f178 0300 	sbcs.w	r3, r8, #0
    d024:	da02      	bge.n	d02c <z_impl_k_timer_start+0x88>
    d026:	2702      	movs	r7, #2
    d028:	f04f 0800 	mov.w	r8, #0
    d02c:	3f01      	subs	r7, #1
    d02e:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
    d032:	e7db      	b.n	cfec <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
    d034:	460c      	mov	r4, r1
    d036:	4606      	mov	r6, r0
    d038:	2901      	cmp	r1, #1
    d03a:	f170 0300 	sbcs.w	r3, r0, #0
    d03e:	da01      	bge.n	d044 <z_impl_k_timer_start+0xa0>
    d040:	2401      	movs	r4, #1
    d042:	2600      	movs	r6, #0
    d044:	3c01      	subs	r4, #1
    d046:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    d04a:	e7d8      	b.n	cffe <z_impl_k_timer_start+0x5a>
    d04c:	0000ce11 	.word	0x0000ce11

0000d050 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    d050:	4b01      	ldr	r3, [pc, #4]	; (d058 <k_thread_system_pool_assign+0x8>)
    d052:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    d056:	4770      	bx	lr
    d058:	200041e0 	.word	0x200041e0

0000d05c <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    d05c:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    d05e:	4a03      	ldr	r2, [pc, #12]	; (d06c <boot_banner+0x10>)
    d060:	4903      	ldr	r1, [pc, #12]	; (d070 <boot_banner+0x14>)
    d062:	4804      	ldr	r0, [pc, #16]	; (d074 <boot_banner+0x18>)
    d064:	f001 ff55 	bl	ef12 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    d068:	bd08      	pop	{r3, pc}
    d06a:	bf00      	nop
    d06c:	00012420 	.word	0x00012420
    d070:	0001317c 	.word	0x0001317c
    d074:	0001318c 	.word	0x0001318c

0000d078 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    d078:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    d07a:	4c0f      	ldr	r4, [pc, #60]	; (d0b8 <statics_init+0x40>)
    d07c:	e008      	b.n	d090 <statics_init+0x18>
    d07e:	4b0f      	ldr	r3, [pc, #60]	; (d0bc <statics_init+0x44>)
    d080:	429c      	cmp	r4, r3
    d082:	d217      	bcs.n	d0b4 <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    d084:	68a2      	ldr	r2, [r4, #8]
    d086:	6861      	ldr	r1, [r4, #4]
    d088:	4620      	mov	r0, r4
    d08a:	f003 faab 	bl	105e4 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    d08e:	3418      	adds	r4, #24
    d090:	4b0a      	ldr	r3, [pc, #40]	; (d0bc <statics_init+0x44>)
    d092:	429c      	cmp	r4, r3
    d094:	d9f3      	bls.n	d07e <statics_init+0x6>
    d096:	4d0a      	ldr	r5, [pc, #40]	; (d0c0 <statics_init+0x48>)
    d098:	2318      	movs	r3, #24
    d09a:	462a      	mov	r2, r5
    d09c:	4909      	ldr	r1, [pc, #36]	; (d0c4 <statics_init+0x4c>)
    d09e:	480a      	ldr	r0, [pc, #40]	; (d0c8 <statics_init+0x50>)
    d0a0:	f002 f840 	bl	f124 <assert_print>
    d0a4:	4809      	ldr	r0, [pc, #36]	; (d0cc <statics_init+0x54>)
    d0a6:	f002 f83d 	bl	f124 <assert_print>
    d0aa:	2118      	movs	r1, #24
    d0ac:	4628      	mov	r0, r5
    d0ae:	f002 f832 	bl	f116 <assert_post_action>
    d0b2:	e7e4      	b.n	d07e <statics_init+0x6>
		}
	}
	return 0;
}
    d0b4:	2000      	movs	r0, #0
    d0b6:	bd38      	pop	{r3, r4, r5, pc}
    d0b8:	200041e0 	.word	0x200041e0
    d0bc:	200041f8 	.word	0x200041f8
    d0c0:	000131b4 	.word	0x000131b4
    d0c4:	000131d8 	.word	0x000131d8
    d0c8:	00011514 	.word	0x00011514
    d0cc:	00012cfc 	.word	0x00012cfc

0000d0d0 <acos>:
    d0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0d2:	4604      	mov	r4, r0
    d0d4:	460d      	mov	r5, r1
    d0d6:	f7f3 fec7 	bl	e68 <__ieee754_acos>
    d0da:	4b11      	ldr	r3, [pc, #68]	; (d120 <acos+0x50>)
    d0dc:	f993 3000 	ldrsb.w	r3, [r3]
    d0e0:	3301      	adds	r3, #1
    d0e2:	4606      	mov	r6, r0
    d0e4:	460f      	mov	r7, r1
    d0e6:	d018      	beq.n	d11a <acos+0x4a>
    d0e8:	4622      	mov	r2, r4
    d0ea:	462b      	mov	r3, r5
    d0ec:	4620      	mov	r0, r4
    d0ee:	4629      	mov	r1, r5
    d0f0:	f7f3 fd16 	bl	b20 <__aeabi_dcmpun>
    d0f4:	b988      	cbnz	r0, d11a <acos+0x4a>
    d0f6:	4620      	mov	r0, r4
    d0f8:	4629      	mov	r1, r5
    d0fa:	f003 fa7b 	bl	105f4 <fabs>
    d0fe:	4b09      	ldr	r3, [pc, #36]	; (d124 <acos+0x54>)
    d100:	2200      	movs	r2, #0
    d102:	f7f3 fd03 	bl	b0c <__aeabi_dcmpgt>
    d106:	b140      	cbz	r0, d11a <acos+0x4a>
    d108:	f002 f986 	bl	f418 <__errno>
    d10c:	2321      	movs	r3, #33	; 0x21
    d10e:	6003      	str	r3, [r0, #0]
    d110:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d114:	4804      	ldr	r0, [pc, #16]	; (d128 <acos+0x58>)
    d116:	f000 b98f 	b.w	d438 <nan>
    d11a:	4630      	mov	r0, r6
    d11c:	4639      	mov	r1, r7
    d11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d120:	200041c8 	.word	0x200041c8
    d124:	3ff00000 	.word	0x3ff00000
    d128:	00013501 	.word	0x00013501

0000d12c <pow>:
    d12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d130:	461f      	mov	r7, r3
    d132:	4680      	mov	r8, r0
    d134:	4689      	mov	r9, r1
    d136:	4616      	mov	r6, r2
    d138:	f7f4 f8e2 	bl	1300 <__ieee754_pow>
    d13c:	4b4d      	ldr	r3, [pc, #308]	; (d274 <pow+0x148>)
    d13e:	f993 3000 	ldrsb.w	r3, [r3]
    d142:	3301      	adds	r3, #1
    d144:	4604      	mov	r4, r0
    d146:	460d      	mov	r5, r1
    d148:	d015      	beq.n	d176 <pow+0x4a>
    d14a:	4632      	mov	r2, r6
    d14c:	463b      	mov	r3, r7
    d14e:	4630      	mov	r0, r6
    d150:	4639      	mov	r1, r7
    d152:	f7f3 fce5 	bl	b20 <__aeabi_dcmpun>
    d156:	b970      	cbnz	r0, d176 <pow+0x4a>
    d158:	4642      	mov	r2, r8
    d15a:	464b      	mov	r3, r9
    d15c:	4640      	mov	r0, r8
    d15e:	4649      	mov	r1, r9
    d160:	f7f3 fcde 	bl	b20 <__aeabi_dcmpun>
    d164:	2200      	movs	r2, #0
    d166:	2300      	movs	r3, #0
    d168:	b148      	cbz	r0, d17e <pow+0x52>
    d16a:	4630      	mov	r0, r6
    d16c:	4639      	mov	r1, r7
    d16e:	f7f3 fca5 	bl	abc <__aeabi_dcmpeq>
    d172:	2800      	cmp	r0, #0
    d174:	d17b      	bne.n	d26e <pow+0x142>
    d176:	4620      	mov	r0, r4
    d178:	4629      	mov	r1, r5
    d17a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d17e:	4640      	mov	r0, r8
    d180:	4649      	mov	r1, r9
    d182:	f7f3 fc9b 	bl	abc <__aeabi_dcmpeq>
    d186:	b1e0      	cbz	r0, d1c2 <pow+0x96>
    d188:	2200      	movs	r2, #0
    d18a:	2300      	movs	r3, #0
    d18c:	4630      	mov	r0, r6
    d18e:	4639      	mov	r1, r7
    d190:	f7f3 fc94 	bl	abc <__aeabi_dcmpeq>
    d194:	2800      	cmp	r0, #0
    d196:	d16a      	bne.n	d26e <pow+0x142>
    d198:	4630      	mov	r0, r6
    d19a:	4639      	mov	r1, r7
    d19c:	f003 fa2d 	bl	105fa <finite>
    d1a0:	2800      	cmp	r0, #0
    d1a2:	d0e8      	beq.n	d176 <pow+0x4a>
    d1a4:	2200      	movs	r2, #0
    d1a6:	2300      	movs	r3, #0
    d1a8:	4630      	mov	r0, r6
    d1aa:	4639      	mov	r1, r7
    d1ac:	f7f3 fc90 	bl	ad0 <__aeabi_dcmplt>
    d1b0:	2800      	cmp	r0, #0
    d1b2:	d0e0      	beq.n	d176 <pow+0x4a>
    d1b4:	f002 f930 	bl	f418 <__errno>
    d1b8:	2321      	movs	r3, #33	; 0x21
    d1ba:	6003      	str	r3, [r0, #0]
    d1bc:	2400      	movs	r4, #0
    d1be:	4d2e      	ldr	r5, [pc, #184]	; (d278 <pow+0x14c>)
    d1c0:	e7d9      	b.n	d176 <pow+0x4a>
    d1c2:	4620      	mov	r0, r4
    d1c4:	4629      	mov	r1, r5
    d1c6:	f003 fa18 	bl	105fa <finite>
    d1ca:	bba8      	cbnz	r0, d238 <pow+0x10c>
    d1cc:	4640      	mov	r0, r8
    d1ce:	4649      	mov	r1, r9
    d1d0:	f003 fa13 	bl	105fa <finite>
    d1d4:	b380      	cbz	r0, d238 <pow+0x10c>
    d1d6:	4630      	mov	r0, r6
    d1d8:	4639      	mov	r1, r7
    d1da:	f003 fa0e 	bl	105fa <finite>
    d1de:	b358      	cbz	r0, d238 <pow+0x10c>
    d1e0:	4622      	mov	r2, r4
    d1e2:	462b      	mov	r3, r5
    d1e4:	4620      	mov	r0, r4
    d1e6:	4629      	mov	r1, r5
    d1e8:	f7f3 fc9a 	bl	b20 <__aeabi_dcmpun>
    d1ec:	b160      	cbz	r0, d208 <pow+0xdc>
    d1ee:	f002 f913 	bl	f418 <__errno>
    d1f2:	2321      	movs	r3, #33	; 0x21
    d1f4:	6003      	str	r3, [r0, #0]
    d1f6:	2200      	movs	r2, #0
    d1f8:	2300      	movs	r3, #0
    d1fa:	4610      	mov	r0, r2
    d1fc:	4619      	mov	r1, r3
    d1fe:	f7f3 fab5 	bl	76c <__aeabi_ddiv>
    d202:	4604      	mov	r4, r0
    d204:	460d      	mov	r5, r1
    d206:	e7b6      	b.n	d176 <pow+0x4a>
    d208:	f002 f906 	bl	f418 <__errno>
    d20c:	2322      	movs	r3, #34	; 0x22
    d20e:	6003      	str	r3, [r0, #0]
    d210:	2200      	movs	r2, #0
    d212:	2300      	movs	r3, #0
    d214:	4640      	mov	r0, r8
    d216:	4649      	mov	r1, r9
    d218:	f7f3 fc5a 	bl	ad0 <__aeabi_dcmplt>
    d21c:	2400      	movs	r4, #0
    d21e:	b148      	cbz	r0, d234 <pow+0x108>
    d220:	4630      	mov	r0, r6
    d222:	4639      	mov	r1, r7
    d224:	f000 f90e 	bl	d444 <rint>
    d228:	4632      	mov	r2, r6
    d22a:	463b      	mov	r3, r7
    d22c:	f7f3 fc46 	bl	abc <__aeabi_dcmpeq>
    d230:	2800      	cmp	r0, #0
    d232:	d0c4      	beq.n	d1be <pow+0x92>
    d234:	4d11      	ldr	r5, [pc, #68]	; (d27c <pow+0x150>)
    d236:	e79e      	b.n	d176 <pow+0x4a>
    d238:	2200      	movs	r2, #0
    d23a:	2300      	movs	r3, #0
    d23c:	4620      	mov	r0, r4
    d23e:	4629      	mov	r1, r5
    d240:	f7f3 fc3c 	bl	abc <__aeabi_dcmpeq>
    d244:	2800      	cmp	r0, #0
    d246:	d096      	beq.n	d176 <pow+0x4a>
    d248:	4640      	mov	r0, r8
    d24a:	4649      	mov	r1, r9
    d24c:	f003 f9d5 	bl	105fa <finite>
    d250:	2800      	cmp	r0, #0
    d252:	d090      	beq.n	d176 <pow+0x4a>
    d254:	4630      	mov	r0, r6
    d256:	4639      	mov	r1, r7
    d258:	f003 f9cf 	bl	105fa <finite>
    d25c:	2800      	cmp	r0, #0
    d25e:	d08a      	beq.n	d176 <pow+0x4a>
    d260:	f002 f8da 	bl	f418 <__errno>
    d264:	2322      	movs	r3, #34	; 0x22
    d266:	6003      	str	r3, [r0, #0]
    d268:	2400      	movs	r4, #0
    d26a:	2500      	movs	r5, #0
    d26c:	e783      	b.n	d176 <pow+0x4a>
    d26e:	4d04      	ldr	r5, [pc, #16]	; (d280 <pow+0x154>)
    d270:	2400      	movs	r4, #0
    d272:	e780      	b.n	d176 <pow+0x4a>
    d274:	200041c8 	.word	0x200041c8
    d278:	fff00000 	.word	0xfff00000
    d27c:	7ff00000 	.word	0x7ff00000
    d280:	3ff00000 	.word	0x3ff00000

0000d284 <sqrt>:
    d284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d286:	4606      	mov	r6, r0
    d288:	460f      	mov	r7, r1
    d28a:	f000 f827 	bl	d2dc <__ieee754_sqrt>
    d28e:	4b12      	ldr	r3, [pc, #72]	; (d2d8 <sqrt+0x54>)
    d290:	f993 3000 	ldrsb.w	r3, [r3]
    d294:	3301      	adds	r3, #1
    d296:	4604      	mov	r4, r0
    d298:	460d      	mov	r5, r1
    d29a:	d019      	beq.n	d2d0 <sqrt+0x4c>
    d29c:	4632      	mov	r2, r6
    d29e:	463b      	mov	r3, r7
    d2a0:	4630      	mov	r0, r6
    d2a2:	4639      	mov	r1, r7
    d2a4:	f7f3 fc3c 	bl	b20 <__aeabi_dcmpun>
    d2a8:	b990      	cbnz	r0, d2d0 <sqrt+0x4c>
    d2aa:	2200      	movs	r2, #0
    d2ac:	2300      	movs	r3, #0
    d2ae:	4630      	mov	r0, r6
    d2b0:	4639      	mov	r1, r7
    d2b2:	f7f3 fc0d 	bl	ad0 <__aeabi_dcmplt>
    d2b6:	b158      	cbz	r0, d2d0 <sqrt+0x4c>
    d2b8:	f002 f8ae 	bl	f418 <__errno>
    d2bc:	2321      	movs	r3, #33	; 0x21
    d2be:	6003      	str	r3, [r0, #0]
    d2c0:	2200      	movs	r2, #0
    d2c2:	2300      	movs	r3, #0
    d2c4:	4610      	mov	r0, r2
    d2c6:	4619      	mov	r1, r3
    d2c8:	f7f3 fa50 	bl	76c <__aeabi_ddiv>
    d2cc:	4604      	mov	r4, r0
    d2ce:	460d      	mov	r5, r1
    d2d0:	4620      	mov	r0, r4
    d2d2:	4629      	mov	r1, r5
    d2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d2d6:	bf00      	nop
    d2d8:	200041c8 	.word	0x200041c8

0000d2dc <__ieee754_sqrt>:
    d2dc:	f8df c154 	ldr.w	ip, [pc, #340]	; d434 <__ieee754_sqrt+0x158>
    d2e0:	ea3c 0c01 	bics.w	ip, ip, r1
    d2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2e8:	460a      	mov	r2, r1
    d2ea:	4606      	mov	r6, r0
    d2ec:	460d      	mov	r5, r1
    d2ee:	460c      	mov	r4, r1
    d2f0:	4607      	mov	r7, r0
    d2f2:	4603      	mov	r3, r0
    d2f4:	d10f      	bne.n	d316 <__ieee754_sqrt+0x3a>
    d2f6:	4602      	mov	r2, r0
    d2f8:	460b      	mov	r3, r1
    d2fa:	f7f3 f90d 	bl	518 <__aeabi_dmul>
    d2fe:	4602      	mov	r2, r0
    d300:	460b      	mov	r3, r1
    d302:	4630      	mov	r0, r6
    d304:	4629      	mov	r1, r5
    d306:	f7f2 ff51 	bl	1ac <__adddf3>
    d30a:	4606      	mov	r6, r0
    d30c:	460d      	mov	r5, r1
    d30e:	4630      	mov	r0, r6
    d310:	4629      	mov	r1, r5
    d312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d316:	2900      	cmp	r1, #0
    d318:	dc0e      	bgt.n	d338 <__ieee754_sqrt+0x5c>
    d31a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
    d31e:	ea5c 0707 	orrs.w	r7, ip, r7
    d322:	d0f4      	beq.n	d30e <__ieee754_sqrt+0x32>
    d324:	b141      	cbz	r1, d338 <__ieee754_sqrt+0x5c>
    d326:	4602      	mov	r2, r0
    d328:	460b      	mov	r3, r1
    d32a:	f7f2 ff3d 	bl	1a8 <__aeabi_dsub>
    d32e:	4602      	mov	r2, r0
    d330:	460b      	mov	r3, r1
    d332:	f7f3 fa1b 	bl	76c <__aeabi_ddiv>
    d336:	e7e8      	b.n	d30a <__ieee754_sqrt+0x2e>
    d338:	1521      	asrs	r1, r4, #20
    d33a:	d074      	beq.n	d426 <__ieee754_sqrt+0x14a>
    d33c:	07cc      	lsls	r4, r1, #31
    d33e:	f3c2 0213 	ubfx	r2, r2, #0, #20
    d342:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
    d346:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    d34a:	bf5e      	ittt	pl
    d34c:	0fd9      	lsrpl	r1, r3, #31
    d34e:	005b      	lslpl	r3, r3, #1
    d350:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
    d354:	2400      	movs	r4, #0
    d356:	0fd9      	lsrs	r1, r3, #31
    d358:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    d35c:	107f      	asrs	r7, r7, #1
    d35e:	005b      	lsls	r3, r3, #1
    d360:	2516      	movs	r5, #22
    d362:	4620      	mov	r0, r4
    d364:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    d368:	1846      	adds	r6, r0, r1
    d36a:	4296      	cmp	r6, r2
    d36c:	bfde      	ittt	le
    d36e:	1b92      	suble	r2, r2, r6
    d370:	1870      	addle	r0, r6, r1
    d372:	1864      	addle	r4, r4, r1
    d374:	0052      	lsls	r2, r2, #1
    d376:	3d01      	subs	r5, #1
    d378:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
    d37c:	ea4f 0151 	mov.w	r1, r1, lsr #1
    d380:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d384:	d1f0      	bne.n	d368 <__ieee754_sqrt+0x8c>
    d386:	4629      	mov	r1, r5
    d388:	f04f 0e20 	mov.w	lr, #32
    d38c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    d390:	4282      	cmp	r2, r0
    d392:	eb06 0c05 	add.w	ip, r6, r5
    d396:	dc02      	bgt.n	d39e <__ieee754_sqrt+0xc2>
    d398:	d113      	bne.n	d3c2 <__ieee754_sqrt+0xe6>
    d39a:	459c      	cmp	ip, r3
    d39c:	d811      	bhi.n	d3c2 <__ieee754_sqrt+0xe6>
    d39e:	f1bc 0f00 	cmp.w	ip, #0
    d3a2:	eb0c 0506 	add.w	r5, ip, r6
    d3a6:	da43      	bge.n	d430 <__ieee754_sqrt+0x154>
    d3a8:	2d00      	cmp	r5, #0
    d3aa:	db41      	blt.n	d430 <__ieee754_sqrt+0x154>
    d3ac:	f100 0801 	add.w	r8, r0, #1
    d3b0:	1a12      	subs	r2, r2, r0
    d3b2:	459c      	cmp	ip, r3
    d3b4:	bf88      	it	hi
    d3b6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
    d3ba:	eba3 030c 	sub.w	r3, r3, ip
    d3be:	4431      	add	r1, r6
    d3c0:	4640      	mov	r0, r8
    d3c2:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
    d3c6:	f1be 0e01 	subs.w	lr, lr, #1
    d3ca:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
    d3ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d3d2:	ea4f 0656 	mov.w	r6, r6, lsr #1
    d3d6:	d1db      	bne.n	d390 <__ieee754_sqrt+0xb4>
    d3d8:	4313      	orrs	r3, r2
    d3da:	d006      	beq.n	d3ea <__ieee754_sqrt+0x10e>
    d3dc:	1c48      	adds	r0, r1, #1
    d3de:	bf13      	iteet	ne
    d3e0:	3101      	addne	r1, #1
    d3e2:	3401      	addeq	r4, #1
    d3e4:	4671      	moveq	r1, lr
    d3e6:	f021 0101 	bicne.w	r1, r1, #1
    d3ea:	1063      	asrs	r3, r4, #1
    d3ec:	0849      	lsrs	r1, r1, #1
    d3ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    d3f2:	07e2      	lsls	r2, r4, #31
    d3f4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    d3f8:	bf48      	it	mi
    d3fa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
    d3fe:	eb03 5507 	add.w	r5, r3, r7, lsl #20
    d402:	460e      	mov	r6, r1
    d404:	e783      	b.n	d30e <__ieee754_sqrt+0x32>
    d406:	0ada      	lsrs	r2, r3, #11
    d408:	3815      	subs	r0, #21
    d40a:	055b      	lsls	r3, r3, #21
    d40c:	2a00      	cmp	r2, #0
    d40e:	d0fa      	beq.n	d406 <__ieee754_sqrt+0x12a>
    d410:	02d5      	lsls	r5, r2, #11
    d412:	d50a      	bpl.n	d42a <__ieee754_sqrt+0x14e>
    d414:	f1c1 0420 	rsb	r4, r1, #32
    d418:	fa23 f404 	lsr.w	r4, r3, r4
    d41c:	1e4d      	subs	r5, r1, #1
    d41e:	408b      	lsls	r3, r1
    d420:	4322      	orrs	r2, r4
    d422:	1b41      	subs	r1, r0, r5
    d424:	e78a      	b.n	d33c <__ieee754_sqrt+0x60>
    d426:	4608      	mov	r0, r1
    d428:	e7f0      	b.n	d40c <__ieee754_sqrt+0x130>
    d42a:	0052      	lsls	r2, r2, #1
    d42c:	3101      	adds	r1, #1
    d42e:	e7ef      	b.n	d410 <__ieee754_sqrt+0x134>
    d430:	4680      	mov	r8, r0
    d432:	e7bd      	b.n	d3b0 <__ieee754_sqrt+0xd4>
    d434:	7ff00000 	.word	0x7ff00000

0000d438 <nan>:
    d438:	4901      	ldr	r1, [pc, #4]	; (d440 <nan+0x8>)
    d43a:	2000      	movs	r0, #0
    d43c:	4770      	bx	lr
    d43e:	bf00      	nop
    d440:	7ff80000 	.word	0x7ff80000

0000d444 <rint>:
    d444:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
    d448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d44a:	f2ac 36ff 	subw	r6, ip, #1023	; 0x3ff
    d44e:	2e13      	cmp	r6, #19
    d450:	4602      	mov	r2, r0
    d452:	460b      	mov	r3, r1
    d454:	460c      	mov	r4, r1
    d456:	4605      	mov	r5, r0
    d458:	ea4f 77d1 	mov.w	r7, r1, lsr #31
    d45c:	dc5a      	bgt.n	d514 <rint+0xd0>
    d45e:	2e00      	cmp	r6, #0
    d460:	da2c      	bge.n	d4bc <rint+0x78>
    d462:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d466:	4301      	orrs	r1, r0
    d468:	d024      	beq.n	d4b4 <rint+0x70>
    d46a:	f3c3 0113 	ubfx	r1, r3, #0, #20
    d46e:	4301      	orrs	r1, r0
    d470:	424d      	negs	r5, r1
    d472:	430d      	orrs	r5, r1
    d474:	0b2d      	lsrs	r5, r5, #12
    d476:	0c59      	lsrs	r1, r3, #17
    d478:	0449      	lsls	r1, r1, #17
    d47a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    d47e:	ea45 0301 	orr.w	r3, r5, r1
    d482:	4934      	ldr	r1, [pc, #208]	; (d554 <rint+0x110>)
    d484:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
    d488:	e9d7 6700 	ldrd	r6, r7, [r7]
    d48c:	4639      	mov	r1, r7
    d48e:	4630      	mov	r0, r6
    d490:	f7f2 fe8c 	bl	1ac <__adddf3>
    d494:	e9cd 0100 	strd	r0, r1, [sp]
    d498:	463b      	mov	r3, r7
    d49a:	4632      	mov	r2, r6
    d49c:	e9dd 0100 	ldrd	r0, r1, [sp]
    d4a0:	f7f2 fe82 	bl	1a8 <__aeabi_dsub>
    d4a4:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
    d4a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    d4ac:	ea43 0704 	orr.w	r7, r3, r4
    d4b0:	4602      	mov	r2, r0
    d4b2:	463b      	mov	r3, r7
    d4b4:	4610      	mov	r0, r2
    d4b6:	4619      	mov	r1, r3
    d4b8:	b003      	add	sp, #12
    d4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d4bc:	4926      	ldr	r1, [pc, #152]	; (d558 <rint+0x114>)
    d4be:	4131      	asrs	r1, r6
    d4c0:	ea03 0001 	and.w	r0, r3, r1
    d4c4:	4310      	orrs	r0, r2
    d4c6:	d0f5      	beq.n	d4b4 <rint+0x70>
    d4c8:	084b      	lsrs	r3, r1, #1
    d4ca:	ea04 0151 	and.w	r1, r4, r1, lsr #1
    d4ce:	430d      	orrs	r5, r1
    d4d0:	d00c      	beq.n	d4ec <rint+0xa8>
    d4d2:	ea24 0303 	bic.w	r3, r4, r3
    d4d6:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    d4da:	2e13      	cmp	r6, #19
    d4dc:	fa44 f606 	asr.w	r6, r4, r6
    d4e0:	bf0c      	ite	eq
    d4e2:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    d4e6:	2500      	movne	r5, #0
    d4e8:	ea43 0406 	orr.w	r4, r3, r6
    d4ec:	4919      	ldr	r1, [pc, #100]	; (d554 <rint+0x110>)
    d4ee:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
    d4f2:	4623      	mov	r3, r4
    d4f4:	462a      	mov	r2, r5
    d4f6:	e9d7 4500 	ldrd	r4, r5, [r7]
    d4fa:	4620      	mov	r0, r4
    d4fc:	4629      	mov	r1, r5
    d4fe:	f7f2 fe55 	bl	1ac <__adddf3>
    d502:	e9cd 0100 	strd	r0, r1, [sp]
    d506:	e9dd 0100 	ldrd	r0, r1, [sp]
    d50a:	4622      	mov	r2, r4
    d50c:	462b      	mov	r3, r5
    d50e:	f7f2 fe4b 	bl	1a8 <__aeabi_dsub>
    d512:	e006      	b.n	d522 <rint+0xde>
    d514:	2e33      	cmp	r6, #51	; 0x33
    d516:	dd07      	ble.n	d528 <rint+0xe4>
    d518:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    d51c:	d1ca      	bne.n	d4b4 <rint+0x70>
    d51e:	f7f2 fe45 	bl	1ac <__adddf3>
    d522:	4602      	mov	r2, r0
    d524:	460b      	mov	r3, r1
    d526:	e7c5      	b.n	d4b4 <rint+0x70>
    d528:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
    d52c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d530:	fa21 f10c 	lsr.w	r1, r1, ip
    d534:	4208      	tst	r0, r1
    d536:	d0bd      	beq.n	d4b4 <rint+0x70>
    d538:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
    d53c:	ea4f 0351 	mov.w	r3, r1, lsr #1
    d540:	bf1f      	itttt	ne
    d542:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
    d546:	ea20 0303 	bicne.w	r3, r0, r3
    d54a:	fa45 fc0c 	asrne.w	ip, r5, ip
    d54e:	ea43 050c 	orrne.w	r5, r3, ip
    d552:	e7cb      	b.n	d4ec <rint+0xa8>
    d554:	00010ff8 	.word	0x00010ff8
    d558:	000fffff 	.word	0x000fffff

0000d55c <calloc>:
    d55c:	4b02      	ldr	r3, [pc, #8]	; (d568 <calloc+0xc>)
    d55e:	460a      	mov	r2, r1
    d560:	4601      	mov	r1, r0
    d562:	6818      	ldr	r0, [r3, #0]
    d564:	f003 b87f 	b.w	10666 <_calloc_r>
    d568:	20004104 	.word	0x20004104

0000d56c <gcvt>:
    d56c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d56e:	461c      	mov	r4, r3
    d570:	b085      	sub	sp, #20
    d572:	2300      	movs	r3, #0
    d574:	4615      	mov	r5, r2
    d576:	2200      	movs	r2, #0
    d578:	4606      	mov	r6, r0
    d57a:	460f      	mov	r7, r1
    d57c:	f7f3 faa8 	bl	ad0 <__aeabi_dcmplt>
    d580:	4623      	mov	r3, r4
    d582:	b118      	cbz	r0, d58c <gcvt+0x20>
    d584:	222d      	movs	r2, #45	; 0x2d
    d586:	f803 2b01 	strb.w	r2, [r3], #1
    d58a:	3d01      	subs	r5, #1
    d58c:	2267      	movs	r2, #103	; 0x67
    d58e:	2100      	movs	r1, #0
    d590:	e9cd 2102 	strd	r2, r1, [sp, #8]
    d594:	e9cd 5300 	strd	r5, r3, [sp]
    d598:	4905      	ldr	r1, [pc, #20]	; (d5b0 <gcvt+0x44>)
    d59a:	4632      	mov	r2, r6
    d59c:	6808      	ldr	r0, [r1, #0]
    d59e:	463b      	mov	r3, r7
    d5a0:	f7f4 fc46 	bl	1e30 <_gcvt>
    d5a4:	2800      	cmp	r0, #0
    d5a6:	bf14      	ite	ne
    d5a8:	4620      	movne	r0, r4
    d5aa:	2000      	moveq	r0, #0
    d5ac:	b005      	add	sp, #20
    d5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d5b0:	20004104 	.word	0x20004104

0000d5b4 <exit>:
    d5b4:	b508      	push	{r3, lr}
    d5b6:	4b07      	ldr	r3, [pc, #28]	; (d5d4 <exit+0x20>)
    d5b8:	4604      	mov	r4, r0
    d5ba:	b113      	cbz	r3, d5c2 <exit+0xe>
    d5bc:	2100      	movs	r1, #0
    d5be:	f3af 8000 	nop.w
    d5c2:	4b05      	ldr	r3, [pc, #20]	; (d5d8 <exit+0x24>)
    d5c4:	6818      	ldr	r0, [r3, #0]
    d5c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    d5c8:	b103      	cbz	r3, d5cc <exit+0x18>
    d5ca:	4798      	blx	r3
    d5cc:	4620      	mov	r0, r4
    d5ce:	f7f9 facf 	bl	6b70 <_exit>
    d5d2:	bf00      	nop
    d5d4:	00000000 	.word	0x00000000
    d5d8:	000131f0 	.word	0x000131f0

0000d5dc <malloc>:
    d5dc:	4b02      	ldr	r3, [pc, #8]	; (d5e8 <malloc+0xc>)
    d5de:	4601      	mov	r1, r0
    d5e0:	6818      	ldr	r0, [r3, #0]
    d5e2:	f000 b855 	b.w	d690 <_malloc_r>
    d5e6:	bf00      	nop
    d5e8:	20004104 	.word	0x20004104

0000d5ec <free>:
    d5ec:	4b02      	ldr	r3, [pc, #8]	; (d5f8 <free+0xc>)
    d5ee:	4601      	mov	r1, r0
    d5f0:	6818      	ldr	r0, [r3, #0]
    d5f2:	f000 b803 	b.w	d5fc <_free_r>
    d5f6:	bf00      	nop
    d5f8:	20004104 	.word	0x20004104

0000d5fc <_free_r>:
    d5fc:	b538      	push	{r3, r4, r5, lr}
    d5fe:	4605      	mov	r5, r0
    d600:	2900      	cmp	r1, #0
    d602:	d041      	beq.n	d688 <_free_r+0x8c>
    d604:	f851 3c04 	ldr.w	r3, [r1, #-4]
    d608:	1f0c      	subs	r4, r1, #4
    d60a:	2b00      	cmp	r3, #0
    d60c:	bfb8      	it	lt
    d60e:	18e4      	addlt	r4, r4, r3
    d610:	f000 f9aa 	bl	d968 <__malloc_lock>
    d614:	4a1d      	ldr	r2, [pc, #116]	; (d68c <_free_r+0x90>)
    d616:	6813      	ldr	r3, [r2, #0]
    d618:	b933      	cbnz	r3, d628 <_free_r+0x2c>
    d61a:	6063      	str	r3, [r4, #4]
    d61c:	6014      	str	r4, [r2, #0]
    d61e:	4628      	mov	r0, r5
    d620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d624:	f000 b9a6 	b.w	d974 <__malloc_unlock>
    d628:	42a3      	cmp	r3, r4
    d62a:	d908      	bls.n	d63e <_free_r+0x42>
    d62c:	6820      	ldr	r0, [r4, #0]
    d62e:	1821      	adds	r1, r4, r0
    d630:	428b      	cmp	r3, r1
    d632:	bf01      	itttt	eq
    d634:	6819      	ldreq	r1, [r3, #0]
    d636:	685b      	ldreq	r3, [r3, #4]
    d638:	1809      	addeq	r1, r1, r0
    d63a:	6021      	streq	r1, [r4, #0]
    d63c:	e7ed      	b.n	d61a <_free_r+0x1e>
    d63e:	461a      	mov	r2, r3
    d640:	685b      	ldr	r3, [r3, #4]
    d642:	b10b      	cbz	r3, d648 <_free_r+0x4c>
    d644:	42a3      	cmp	r3, r4
    d646:	d9fa      	bls.n	d63e <_free_r+0x42>
    d648:	6811      	ldr	r1, [r2, #0]
    d64a:	1850      	adds	r0, r2, r1
    d64c:	42a0      	cmp	r0, r4
    d64e:	d10b      	bne.n	d668 <_free_r+0x6c>
    d650:	6820      	ldr	r0, [r4, #0]
    d652:	4401      	add	r1, r0
    d654:	1850      	adds	r0, r2, r1
    d656:	4283      	cmp	r3, r0
    d658:	6011      	str	r1, [r2, #0]
    d65a:	d1e0      	bne.n	d61e <_free_r+0x22>
    d65c:	6818      	ldr	r0, [r3, #0]
    d65e:	685b      	ldr	r3, [r3, #4]
    d660:	6053      	str	r3, [r2, #4]
    d662:	4401      	add	r1, r0
    d664:	6011      	str	r1, [r2, #0]
    d666:	e7da      	b.n	d61e <_free_r+0x22>
    d668:	d902      	bls.n	d670 <_free_r+0x74>
    d66a:	230c      	movs	r3, #12
    d66c:	602b      	str	r3, [r5, #0]
    d66e:	e7d6      	b.n	d61e <_free_r+0x22>
    d670:	6820      	ldr	r0, [r4, #0]
    d672:	1821      	adds	r1, r4, r0
    d674:	428b      	cmp	r3, r1
    d676:	bf04      	itt	eq
    d678:	6819      	ldreq	r1, [r3, #0]
    d67a:	685b      	ldreq	r3, [r3, #4]
    d67c:	6063      	str	r3, [r4, #4]
    d67e:	bf04      	itt	eq
    d680:	1809      	addeq	r1, r1, r0
    d682:	6021      	streq	r1, [r4, #0]
    d684:	6054      	str	r4, [r2, #4]
    d686:	e7ca      	b.n	d61e <_free_r+0x22>
    d688:	bd38      	pop	{r3, r4, r5, pc}
    d68a:	bf00      	nop
    d68c:	2000d538 	.word	0x2000d538

0000d690 <_malloc_r>:
    d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d692:	1ccd      	adds	r5, r1, #3
    d694:	f025 0503 	bic.w	r5, r5, #3
    d698:	3508      	adds	r5, #8
    d69a:	2d0c      	cmp	r5, #12
    d69c:	bf38      	it	cc
    d69e:	250c      	movcc	r5, #12
    d6a0:	2d00      	cmp	r5, #0
    d6a2:	4606      	mov	r6, r0
    d6a4:	db01      	blt.n	d6aa <_malloc_r+0x1a>
    d6a6:	42a9      	cmp	r1, r5
    d6a8:	d903      	bls.n	d6b2 <_malloc_r+0x22>
    d6aa:	230c      	movs	r3, #12
    d6ac:	6033      	str	r3, [r6, #0]
    d6ae:	2000      	movs	r0, #0
    d6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d6b2:	f000 f959 	bl	d968 <__malloc_lock>
    d6b6:	4921      	ldr	r1, [pc, #132]	; (d73c <_malloc_r+0xac>)
    d6b8:	680a      	ldr	r2, [r1, #0]
    d6ba:	4614      	mov	r4, r2
    d6bc:	b99c      	cbnz	r4, d6e6 <_malloc_r+0x56>
    d6be:	4f20      	ldr	r7, [pc, #128]	; (d740 <_malloc_r+0xb0>)
    d6c0:	683b      	ldr	r3, [r7, #0]
    d6c2:	b923      	cbnz	r3, d6ce <_malloc_r+0x3e>
    d6c4:	4621      	mov	r1, r4
    d6c6:	4630      	mov	r0, r6
    d6c8:	f000 f83c 	bl	d744 <_sbrk_r>
    d6cc:	6038      	str	r0, [r7, #0]
    d6ce:	4629      	mov	r1, r5
    d6d0:	4630      	mov	r0, r6
    d6d2:	f000 f837 	bl	d744 <_sbrk_r>
    d6d6:	1c43      	adds	r3, r0, #1
    d6d8:	d123      	bne.n	d722 <_malloc_r+0x92>
    d6da:	230c      	movs	r3, #12
    d6dc:	6033      	str	r3, [r6, #0]
    d6de:	4630      	mov	r0, r6
    d6e0:	f000 f948 	bl	d974 <__malloc_unlock>
    d6e4:	e7e3      	b.n	d6ae <_malloc_r+0x1e>
    d6e6:	6823      	ldr	r3, [r4, #0]
    d6e8:	1b5b      	subs	r3, r3, r5
    d6ea:	d417      	bmi.n	d71c <_malloc_r+0x8c>
    d6ec:	2b0b      	cmp	r3, #11
    d6ee:	d903      	bls.n	d6f8 <_malloc_r+0x68>
    d6f0:	6023      	str	r3, [r4, #0]
    d6f2:	441c      	add	r4, r3
    d6f4:	6025      	str	r5, [r4, #0]
    d6f6:	e004      	b.n	d702 <_malloc_r+0x72>
    d6f8:	6863      	ldr	r3, [r4, #4]
    d6fa:	42a2      	cmp	r2, r4
    d6fc:	bf0c      	ite	eq
    d6fe:	600b      	streq	r3, [r1, #0]
    d700:	6053      	strne	r3, [r2, #4]
    d702:	4630      	mov	r0, r6
    d704:	f000 f936 	bl	d974 <__malloc_unlock>
    d708:	f104 000b 	add.w	r0, r4, #11
    d70c:	1d23      	adds	r3, r4, #4
    d70e:	f020 0007 	bic.w	r0, r0, #7
    d712:	1ac2      	subs	r2, r0, r3
    d714:	d0cc      	beq.n	d6b0 <_malloc_r+0x20>
    d716:	1a1b      	subs	r3, r3, r0
    d718:	50a3      	str	r3, [r4, r2]
    d71a:	e7c9      	b.n	d6b0 <_malloc_r+0x20>
    d71c:	4622      	mov	r2, r4
    d71e:	6864      	ldr	r4, [r4, #4]
    d720:	e7cc      	b.n	d6bc <_malloc_r+0x2c>
    d722:	1cc4      	adds	r4, r0, #3
    d724:	f024 0403 	bic.w	r4, r4, #3
    d728:	42a0      	cmp	r0, r4
    d72a:	d0e3      	beq.n	d6f4 <_malloc_r+0x64>
    d72c:	1a21      	subs	r1, r4, r0
    d72e:	4630      	mov	r0, r6
    d730:	f000 f808 	bl	d744 <_sbrk_r>
    d734:	3001      	adds	r0, #1
    d736:	d1dd      	bne.n	d6f4 <_malloc_r+0x64>
    d738:	e7cf      	b.n	d6da <_malloc_r+0x4a>
    d73a:	bf00      	nop
    d73c:	2000d538 	.word	0x2000d538
    d740:	2000d53c 	.word	0x2000d53c

0000d744 <_sbrk_r>:
    d744:	b538      	push	{r3, r4, r5, lr}
    d746:	4d06      	ldr	r5, [pc, #24]	; (d760 <_sbrk_r+0x1c>)
    d748:	2300      	movs	r3, #0
    d74a:	4604      	mov	r4, r0
    d74c:	4608      	mov	r0, r1
    d74e:	602b      	str	r3, [r5, #0]
    d750:	f7f9 fa18 	bl	6b84 <_sbrk>
    d754:	1c43      	adds	r3, r0, #1
    d756:	d102      	bne.n	d75e <_sbrk_r+0x1a>
    d758:	682b      	ldr	r3, [r5, #0]
    d75a:	b103      	cbz	r3, d75e <_sbrk_r+0x1a>
    d75c:	6023      	str	r3, [r4, #0]
    d75e:	bd38      	pop	{r3, r4, r5, pc}
    d760:	2000d540 	.word	0x2000d540

0000d764 <__utoa>:
    d764:	b5f0      	push	{r4, r5, r6, r7, lr}
    d766:	4c1f      	ldr	r4, [pc, #124]	; (d7e4 <__utoa+0x80>)
    d768:	b08b      	sub	sp, #44	; 0x2c
    d76a:	4605      	mov	r5, r0
    d76c:	460b      	mov	r3, r1
    d76e:	466e      	mov	r6, sp
    d770:	f104 0c20 	add.w	ip, r4, #32
    d774:	6820      	ldr	r0, [r4, #0]
    d776:	6861      	ldr	r1, [r4, #4]
    d778:	4637      	mov	r7, r6
    d77a:	c703      	stmia	r7!, {r0, r1}
    d77c:	3408      	adds	r4, #8
    d77e:	4564      	cmp	r4, ip
    d780:	463e      	mov	r6, r7
    d782:	d1f7      	bne.n	d774 <__utoa+0x10>
    d784:	7921      	ldrb	r1, [r4, #4]
    d786:	7139      	strb	r1, [r7, #4]
    d788:	1e91      	subs	r1, r2, #2
    d78a:	6820      	ldr	r0, [r4, #0]
    d78c:	6038      	str	r0, [r7, #0]
    d78e:	2922      	cmp	r1, #34	; 0x22
    d790:	f04f 0100 	mov.w	r1, #0
    d794:	d904      	bls.n	d7a0 <__utoa+0x3c>
    d796:	7019      	strb	r1, [r3, #0]
    d798:	460b      	mov	r3, r1
    d79a:	4618      	mov	r0, r3
    d79c:	b00b      	add	sp, #44	; 0x2c
    d79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d7a0:	1e58      	subs	r0, r3, #1
    d7a2:	4684      	mov	ip, r0
    d7a4:	fbb5 f7f2 	udiv	r7, r5, r2
    d7a8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
    d7ac:	fb02 5617 	mls	r6, r2, r7, r5
    d7b0:	4476      	add	r6, lr
    d7b2:	460c      	mov	r4, r1
    d7b4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
    d7b8:	f80c 6f01 	strb.w	r6, [ip, #1]!
    d7bc:	462e      	mov	r6, r5
    d7be:	42b2      	cmp	r2, r6
    d7c0:	f101 0101 	add.w	r1, r1, #1
    d7c4:	463d      	mov	r5, r7
    d7c6:	d9ed      	bls.n	d7a4 <__utoa+0x40>
    d7c8:	2200      	movs	r2, #0
    d7ca:	545a      	strb	r2, [r3, r1]
    d7cc:	1919      	adds	r1, r3, r4
    d7ce:	1aa5      	subs	r5, r4, r2
    d7d0:	42aa      	cmp	r2, r5
    d7d2:	dae2      	bge.n	d79a <__utoa+0x36>
    d7d4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
    d7d8:	780e      	ldrb	r6, [r1, #0]
    d7da:	7006      	strb	r6, [r0, #0]
    d7dc:	3201      	adds	r2, #1
    d7de:	f801 5901 	strb.w	r5, [r1], #-1
    d7e2:	e7f4      	b.n	d7ce <__utoa+0x6a>
    d7e4:	000133e9 	.word	0x000133e9

0000d7e8 <std>:
    d7e8:	2300      	movs	r3, #0
    d7ea:	b510      	push	{r4, lr}
    d7ec:	4604      	mov	r4, r0
    d7ee:	e9c0 3300 	strd	r3, r3, [r0]
    d7f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
    d7f6:	6083      	str	r3, [r0, #8]
    d7f8:	8181      	strh	r1, [r0, #12]
    d7fa:	6643      	str	r3, [r0, #100]	; 0x64
    d7fc:	81c2      	strh	r2, [r0, #14]
    d7fe:	6183      	str	r3, [r0, #24]
    d800:	4619      	mov	r1, r3
    d802:	2208      	movs	r2, #8
    d804:	305c      	adds	r0, #92	; 0x5c
    d806:	f002 ff26 	bl	10656 <memset>
    d80a:	4b05      	ldr	r3, [pc, #20]	; (d820 <std+0x38>)
    d80c:	6263      	str	r3, [r4, #36]	; 0x24
    d80e:	4b05      	ldr	r3, [pc, #20]	; (d824 <std+0x3c>)
    d810:	62a3      	str	r3, [r4, #40]	; 0x28
    d812:	4b05      	ldr	r3, [pc, #20]	; (d828 <std+0x40>)
    d814:	62e3      	str	r3, [r4, #44]	; 0x2c
    d816:	4b05      	ldr	r3, [pc, #20]	; (d82c <std+0x44>)
    d818:	6224      	str	r4, [r4, #32]
    d81a:	6323      	str	r3, [r4, #48]	; 0x30
    d81c:	bd10      	pop	{r4, pc}
    d81e:	bf00      	nop
    d820:	00010a13 	.word	0x00010a13
    d824:	00010a35 	.word	0x00010a35
    d828:	00010a6d 	.word	0x00010a6d
    d82c:	00010a91 	.word	0x00010a91

0000d830 <_cleanup_r>:
    d830:	4901      	ldr	r1, [pc, #4]	; (d838 <_cleanup_r+0x8>)
    d832:	f002 bfd3 	b.w	107dc <_fwalk_reent>
    d836:	bf00      	nop
    d838:	0000e791 	.word	0x0000e791

0000d83c <__sfp_lock_acquire>:
    d83c:	4801      	ldr	r0, [pc, #4]	; (d844 <__sfp_lock_acquire+0x8>)
    d83e:	f7f9 b9ed 	b.w	6c1c <__retarget_lock_acquire_recursive>
    d842:	bf00      	nop
    d844:	2000420c 	.word	0x2000420c

0000d848 <__sfp_lock_release>:
    d848:	4801      	ldr	r0, [pc, #4]	; (d850 <__sfp_lock_release+0x8>)
    d84a:	f7f9 ba07 	b.w	6c5c <__retarget_lock_release_recursive>
    d84e:	bf00      	nop
    d850:	2000420c 	.word	0x2000420c

0000d854 <__sinit_lock_acquire>:
    d854:	4801      	ldr	r0, [pc, #4]	; (d85c <__sinit_lock_acquire+0x8>)
    d856:	f7f9 b9e1 	b.w	6c1c <__retarget_lock_acquire_recursive>
    d85a:	bf00      	nop
    d85c:	20004220 	.word	0x20004220

0000d860 <__sinit_lock_release>:
    d860:	4801      	ldr	r0, [pc, #4]	; (d868 <__sinit_lock_release+0x8>)
    d862:	f7f9 b9fb 	b.w	6c5c <__retarget_lock_release_recursive>
    d866:	bf00      	nop
    d868:	20004220 	.word	0x20004220

0000d86c <__sinit>:
    d86c:	b510      	push	{r4, lr}
    d86e:	4604      	mov	r4, r0
    d870:	f7ff fff0 	bl	d854 <__sinit_lock_acquire>
    d874:	69a3      	ldr	r3, [r4, #24]
    d876:	b11b      	cbz	r3, d880 <__sinit+0x14>
    d878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d87c:	f7ff bff0 	b.w	d860 <__sinit_lock_release>
    d880:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    d884:	6523      	str	r3, [r4, #80]	; 0x50
    d886:	4b13      	ldr	r3, [pc, #76]	; (d8d4 <__sinit+0x68>)
    d888:	4a13      	ldr	r2, [pc, #76]	; (d8d8 <__sinit+0x6c>)
    d88a:	681b      	ldr	r3, [r3, #0]
    d88c:	62a2      	str	r2, [r4, #40]	; 0x28
    d88e:	42a3      	cmp	r3, r4
    d890:	bf04      	itt	eq
    d892:	2301      	moveq	r3, #1
    d894:	61a3      	streq	r3, [r4, #24]
    d896:	4620      	mov	r0, r4
    d898:	f000 f820 	bl	d8dc <__sfp>
    d89c:	6060      	str	r0, [r4, #4]
    d89e:	4620      	mov	r0, r4
    d8a0:	f000 f81c 	bl	d8dc <__sfp>
    d8a4:	60a0      	str	r0, [r4, #8]
    d8a6:	4620      	mov	r0, r4
    d8a8:	f000 f818 	bl	d8dc <__sfp>
    d8ac:	2200      	movs	r2, #0
    d8ae:	60e0      	str	r0, [r4, #12]
    d8b0:	2104      	movs	r1, #4
    d8b2:	6860      	ldr	r0, [r4, #4]
    d8b4:	f7ff ff98 	bl	d7e8 <std>
    d8b8:	68a0      	ldr	r0, [r4, #8]
    d8ba:	2201      	movs	r2, #1
    d8bc:	2109      	movs	r1, #9
    d8be:	f7ff ff93 	bl	d7e8 <std>
    d8c2:	68e0      	ldr	r0, [r4, #12]
    d8c4:	2202      	movs	r2, #2
    d8c6:	2112      	movs	r1, #18
    d8c8:	f7ff ff8e 	bl	d7e8 <std>
    d8cc:	2301      	movs	r3, #1
    d8ce:	61a3      	str	r3, [r4, #24]
    d8d0:	e7d2      	b.n	d878 <__sinit+0xc>
    d8d2:	bf00      	nop
    d8d4:	000131f0 	.word	0x000131f0
    d8d8:	0000d831 	.word	0x0000d831

0000d8dc <__sfp>:
    d8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d8de:	4607      	mov	r7, r0
    d8e0:	f7ff ffac 	bl	d83c <__sfp_lock_acquire>
    d8e4:	4b1e      	ldr	r3, [pc, #120]	; (d960 <__sfp+0x84>)
    d8e6:	681e      	ldr	r6, [r3, #0]
    d8e8:	69b3      	ldr	r3, [r6, #24]
    d8ea:	b913      	cbnz	r3, d8f2 <__sfp+0x16>
    d8ec:	4630      	mov	r0, r6
    d8ee:	f7ff ffbd 	bl	d86c <__sinit>
    d8f2:	3648      	adds	r6, #72	; 0x48
    d8f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    d8f8:	3b01      	subs	r3, #1
    d8fa:	d503      	bpl.n	d904 <__sfp+0x28>
    d8fc:	6833      	ldr	r3, [r6, #0]
    d8fe:	b30b      	cbz	r3, d944 <__sfp+0x68>
    d900:	6836      	ldr	r6, [r6, #0]
    d902:	e7f7      	b.n	d8f4 <__sfp+0x18>
    d904:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    d908:	b9d5      	cbnz	r5, d940 <__sfp+0x64>
    d90a:	4b16      	ldr	r3, [pc, #88]	; (d964 <__sfp+0x88>)
    d90c:	60e3      	str	r3, [r4, #12]
    d90e:	f104 0058 	add.w	r0, r4, #88	; 0x58
    d912:	6665      	str	r5, [r4, #100]	; 0x64
    d914:	f7f9 f94c 	bl	6bb0 <__retarget_lock_init_recursive>
    d918:	f7ff ff96 	bl	d848 <__sfp_lock_release>
    d91c:	e9c4 5501 	strd	r5, r5, [r4, #4]
    d920:	e9c4 5504 	strd	r5, r5, [r4, #16]
    d924:	6025      	str	r5, [r4, #0]
    d926:	61a5      	str	r5, [r4, #24]
    d928:	2208      	movs	r2, #8
    d92a:	4629      	mov	r1, r5
    d92c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    d930:	f002 fe91 	bl	10656 <memset>
    d934:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    d938:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    d93c:	4620      	mov	r0, r4
    d93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d940:	3468      	adds	r4, #104	; 0x68
    d942:	e7d9      	b.n	d8f8 <__sfp+0x1c>
    d944:	2104      	movs	r1, #4
    d946:	4638      	mov	r0, r7
    d948:	f002 ff32 	bl	107b0 <__sfmoreglue>
    d94c:	4604      	mov	r4, r0
    d94e:	6030      	str	r0, [r6, #0]
    d950:	2800      	cmp	r0, #0
    d952:	d1d5      	bne.n	d900 <__sfp+0x24>
    d954:	f7ff ff78 	bl	d848 <__sfp_lock_release>
    d958:	230c      	movs	r3, #12
    d95a:	603b      	str	r3, [r7, #0]
    d95c:	e7ee      	b.n	d93c <__sfp+0x60>
    d95e:	bf00      	nop
    d960:	000131f0 	.word	0x000131f0
    d964:	ffff0001 	.word	0xffff0001

0000d968 <__malloc_lock>:
    d968:	4801      	ldr	r0, [pc, #4]	; (d970 <__malloc_lock+0x8>)
    d96a:	f7f9 b957 	b.w	6c1c <__retarget_lock_acquire_recursive>
    d96e:	bf00      	nop
    d970:	200041f8 	.word	0x200041f8

0000d974 <__malloc_unlock>:
    d974:	4801      	ldr	r0, [pc, #4]	; (d97c <__malloc_unlock+0x8>)
    d976:	f7f9 b971 	b.w	6c5c <__retarget_lock_release_recursive>
    d97a:	bf00      	nop
    d97c:	200041f8 	.word	0x200041f8

0000d980 <_Balloc>:
    d980:	b570      	push	{r4, r5, r6, lr}
    d982:	6a46      	ldr	r6, [r0, #36]	; 0x24
    d984:	4604      	mov	r4, r0
    d986:	460d      	mov	r5, r1
    d988:	b976      	cbnz	r6, d9a8 <_Balloc+0x28>
    d98a:	2010      	movs	r0, #16
    d98c:	f7ff fe26 	bl	d5dc <malloc>
    d990:	4602      	mov	r2, r0
    d992:	6260      	str	r0, [r4, #36]	; 0x24
    d994:	b920      	cbnz	r0, d9a0 <_Balloc+0x20>
    d996:	4b18      	ldr	r3, [pc, #96]	; (d9f8 <_Balloc+0x78>)
    d998:	4818      	ldr	r0, [pc, #96]	; (d9fc <_Balloc+0x7c>)
    d99a:	2166      	movs	r1, #102	; 0x66
    d99c:	f000 fe48 	bl	e630 <__assert_func>
    d9a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
    d9a4:	6006      	str	r6, [r0, #0]
    d9a6:	60c6      	str	r6, [r0, #12]
    d9a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
    d9aa:	68f3      	ldr	r3, [r6, #12]
    d9ac:	b183      	cbz	r3, d9d0 <_Balloc+0x50>
    d9ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d9b0:	68db      	ldr	r3, [r3, #12]
    d9b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    d9b6:	b9b8      	cbnz	r0, d9e8 <_Balloc+0x68>
    d9b8:	2101      	movs	r1, #1
    d9ba:	fa01 f605 	lsl.w	r6, r1, r5
    d9be:	1d72      	adds	r2, r6, #5
    d9c0:	0092      	lsls	r2, r2, #2
    d9c2:	4620      	mov	r0, r4
    d9c4:	f002 fe4f 	bl	10666 <_calloc_r>
    d9c8:	b160      	cbz	r0, d9e4 <_Balloc+0x64>
    d9ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
    d9ce:	e00e      	b.n	d9ee <_Balloc+0x6e>
    d9d0:	2221      	movs	r2, #33	; 0x21
    d9d2:	2104      	movs	r1, #4
    d9d4:	4620      	mov	r0, r4
    d9d6:	f002 fe46 	bl	10666 <_calloc_r>
    d9da:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d9dc:	60f0      	str	r0, [r6, #12]
    d9de:	68db      	ldr	r3, [r3, #12]
    d9e0:	2b00      	cmp	r3, #0
    d9e2:	d1e4      	bne.n	d9ae <_Balloc+0x2e>
    d9e4:	2000      	movs	r0, #0
    d9e6:	bd70      	pop	{r4, r5, r6, pc}
    d9e8:	6802      	ldr	r2, [r0, #0]
    d9ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    d9ee:	2300      	movs	r3, #0
    d9f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
    d9f4:	e7f7      	b.n	d9e6 <_Balloc+0x66>
    d9f6:	bf00      	nop
    d9f8:	0001340e 	.word	0x0001340e
    d9fc:	00013425 	.word	0x00013425

0000da00 <_Bfree>:
    da00:	b570      	push	{r4, r5, r6, lr}
    da02:	6a46      	ldr	r6, [r0, #36]	; 0x24
    da04:	4605      	mov	r5, r0
    da06:	460c      	mov	r4, r1
    da08:	b976      	cbnz	r6, da28 <_Bfree+0x28>
    da0a:	2010      	movs	r0, #16
    da0c:	f7ff fde6 	bl	d5dc <malloc>
    da10:	4602      	mov	r2, r0
    da12:	6268      	str	r0, [r5, #36]	; 0x24
    da14:	b920      	cbnz	r0, da20 <_Bfree+0x20>
    da16:	4b09      	ldr	r3, [pc, #36]	; (da3c <_Bfree+0x3c>)
    da18:	4809      	ldr	r0, [pc, #36]	; (da40 <_Bfree+0x40>)
    da1a:	218a      	movs	r1, #138	; 0x8a
    da1c:	f000 fe08 	bl	e630 <__assert_func>
    da20:	e9c0 6601 	strd	r6, r6, [r0, #4]
    da24:	6006      	str	r6, [r0, #0]
    da26:	60c6      	str	r6, [r0, #12]
    da28:	b13c      	cbz	r4, da3a <_Bfree+0x3a>
    da2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    da2c:	6862      	ldr	r2, [r4, #4]
    da2e:	68db      	ldr	r3, [r3, #12]
    da30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    da34:	6021      	str	r1, [r4, #0]
    da36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    da3a:	bd70      	pop	{r4, r5, r6, pc}
    da3c:	0001340e 	.word	0x0001340e
    da40:	00013425 	.word	0x00013425

0000da44 <__multadd>:
    da44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da48:	690d      	ldr	r5, [r1, #16]
    da4a:	4607      	mov	r7, r0
    da4c:	460c      	mov	r4, r1
    da4e:	461e      	mov	r6, r3
    da50:	f101 0c14 	add.w	ip, r1, #20
    da54:	2000      	movs	r0, #0
    da56:	f8dc 3000 	ldr.w	r3, [ip]
    da5a:	b299      	uxth	r1, r3
    da5c:	fb02 6101 	mla	r1, r2, r1, r6
    da60:	0c1e      	lsrs	r6, r3, #16
    da62:	0c0b      	lsrs	r3, r1, #16
    da64:	fb02 3306 	mla	r3, r2, r6, r3
    da68:	b289      	uxth	r1, r1
    da6a:	3001      	adds	r0, #1
    da6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    da70:	4285      	cmp	r5, r0
    da72:	f84c 1b04 	str.w	r1, [ip], #4
    da76:	ea4f 4613 	mov.w	r6, r3, lsr #16
    da7a:	dcec      	bgt.n	da56 <__multadd+0x12>
    da7c:	b30e      	cbz	r6, dac2 <__multadd+0x7e>
    da7e:	68a3      	ldr	r3, [r4, #8]
    da80:	42ab      	cmp	r3, r5
    da82:	dc19      	bgt.n	dab8 <__multadd+0x74>
    da84:	6861      	ldr	r1, [r4, #4]
    da86:	4638      	mov	r0, r7
    da88:	3101      	adds	r1, #1
    da8a:	f7ff ff79 	bl	d980 <_Balloc>
    da8e:	4680      	mov	r8, r0
    da90:	b928      	cbnz	r0, da9e <__multadd+0x5a>
    da92:	4602      	mov	r2, r0
    da94:	4b0c      	ldr	r3, [pc, #48]	; (dac8 <__multadd+0x84>)
    da96:	480d      	ldr	r0, [pc, #52]	; (dacc <__multadd+0x88>)
    da98:	21b5      	movs	r1, #181	; 0xb5
    da9a:	f000 fdc9 	bl	e630 <__assert_func>
    da9e:	6922      	ldr	r2, [r4, #16]
    daa0:	3202      	adds	r2, #2
    daa2:	f104 010c 	add.w	r1, r4, #12
    daa6:	0092      	lsls	r2, r2, #2
    daa8:	300c      	adds	r0, #12
    daaa:	f002 fdc6 	bl	1063a <memcpy>
    daae:	4621      	mov	r1, r4
    dab0:	4638      	mov	r0, r7
    dab2:	f7ff ffa5 	bl	da00 <_Bfree>
    dab6:	4644      	mov	r4, r8
    dab8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    dabc:	3501      	adds	r5, #1
    dabe:	615e      	str	r6, [r3, #20]
    dac0:	6125      	str	r5, [r4, #16]
    dac2:	4620      	mov	r0, r4
    dac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dac8:	00013482 	.word	0x00013482
    dacc:	00013425 	.word	0x00013425

0000dad0 <__i2b>:
    dad0:	b510      	push	{r4, lr}
    dad2:	460c      	mov	r4, r1
    dad4:	2101      	movs	r1, #1
    dad6:	f7ff ff53 	bl	d980 <_Balloc>
    dada:	4602      	mov	r2, r0
    dadc:	b928      	cbnz	r0, daea <__i2b+0x1a>
    dade:	4b05      	ldr	r3, [pc, #20]	; (daf4 <__i2b+0x24>)
    dae0:	4805      	ldr	r0, [pc, #20]	; (daf8 <__i2b+0x28>)
    dae2:	f44f 71a0 	mov.w	r1, #320	; 0x140
    dae6:	f000 fda3 	bl	e630 <__assert_func>
    daea:	2301      	movs	r3, #1
    daec:	6144      	str	r4, [r0, #20]
    daee:	6103      	str	r3, [r0, #16]
    daf0:	bd10      	pop	{r4, pc}
    daf2:	bf00      	nop
    daf4:	00013482 	.word	0x00013482
    daf8:	00013425 	.word	0x00013425

0000dafc <__multiply>:
    dafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db00:	4691      	mov	r9, r2
    db02:	690a      	ldr	r2, [r1, #16]
    db04:	f8d9 3010 	ldr.w	r3, [r9, #16]
    db08:	429a      	cmp	r2, r3
    db0a:	bfb8      	it	lt
    db0c:	460b      	movlt	r3, r1
    db0e:	460c      	mov	r4, r1
    db10:	bfbc      	itt	lt
    db12:	464c      	movlt	r4, r9
    db14:	4699      	movlt	r9, r3
    db16:	6927      	ldr	r7, [r4, #16]
    db18:	f8d9 a010 	ldr.w	sl, [r9, #16]
    db1c:	68a3      	ldr	r3, [r4, #8]
    db1e:	6861      	ldr	r1, [r4, #4]
    db20:	eb07 060a 	add.w	r6, r7, sl
    db24:	42b3      	cmp	r3, r6
    db26:	b085      	sub	sp, #20
    db28:	bfb8      	it	lt
    db2a:	3101      	addlt	r1, #1
    db2c:	f7ff ff28 	bl	d980 <_Balloc>
    db30:	b930      	cbnz	r0, db40 <__multiply+0x44>
    db32:	4602      	mov	r2, r0
    db34:	4b43      	ldr	r3, [pc, #268]	; (dc44 <__multiply+0x148>)
    db36:	4844      	ldr	r0, [pc, #272]	; (dc48 <__multiply+0x14c>)
    db38:	f240 115d 	movw	r1, #349	; 0x15d
    db3c:	f000 fd78 	bl	e630 <__assert_func>
    db40:	f100 0514 	add.w	r5, r0, #20
    db44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
    db48:	462b      	mov	r3, r5
    db4a:	2200      	movs	r2, #0
    db4c:	4543      	cmp	r3, r8
    db4e:	d321      	bcc.n	db94 <__multiply+0x98>
    db50:	f104 0314 	add.w	r3, r4, #20
    db54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    db58:	f109 0314 	add.w	r3, r9, #20
    db5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
    db60:	9202      	str	r2, [sp, #8]
    db62:	1b3a      	subs	r2, r7, r4
    db64:	3a15      	subs	r2, #21
    db66:	f022 0203 	bic.w	r2, r2, #3
    db6a:	3204      	adds	r2, #4
    db6c:	f104 0115 	add.w	r1, r4, #21
    db70:	428f      	cmp	r7, r1
    db72:	bf38      	it	cc
    db74:	2204      	movcc	r2, #4
    db76:	9201      	str	r2, [sp, #4]
    db78:	9a02      	ldr	r2, [sp, #8]
    db7a:	9303      	str	r3, [sp, #12]
    db7c:	429a      	cmp	r2, r3
    db7e:	d80c      	bhi.n	db9a <__multiply+0x9e>
    db80:	2e00      	cmp	r6, #0
    db82:	dd03      	ble.n	db8c <__multiply+0x90>
    db84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
    db88:	2b00      	cmp	r3, #0
    db8a:	d059      	beq.n	dc40 <__multiply+0x144>
    db8c:	6106      	str	r6, [r0, #16]
    db8e:	b005      	add	sp, #20
    db90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db94:	f843 2b04 	str.w	r2, [r3], #4
    db98:	e7d8      	b.n	db4c <__multiply+0x50>
    db9a:	f8b3 a000 	ldrh.w	sl, [r3]
    db9e:	f1ba 0f00 	cmp.w	sl, #0
    dba2:	d023      	beq.n	dbec <__multiply+0xf0>
    dba4:	f104 0e14 	add.w	lr, r4, #20
    dba8:	46a9      	mov	r9, r5
    dbaa:	f04f 0c00 	mov.w	ip, #0
    dbae:	f85e 2b04 	ldr.w	r2, [lr], #4
    dbb2:	f8d9 1000 	ldr.w	r1, [r9]
    dbb6:	fa1f fb82 	uxth.w	fp, r2
    dbba:	b289      	uxth	r1, r1
    dbbc:	fb0a 110b 	mla	r1, sl, fp, r1
    dbc0:	4461      	add	r1, ip
    dbc2:	f8d9 c000 	ldr.w	ip, [r9]
    dbc6:	0c12      	lsrs	r2, r2, #16
    dbc8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    dbcc:	fb0a c202 	mla	r2, sl, r2, ip
    dbd0:	eb02 4211 	add.w	r2, r2, r1, lsr #16
    dbd4:	b289      	uxth	r1, r1
    dbd6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    dbda:	4577      	cmp	r7, lr
    dbdc:	f849 1b04 	str.w	r1, [r9], #4
    dbe0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    dbe4:	d8e3      	bhi.n	dbae <__multiply+0xb2>
    dbe6:	9a01      	ldr	r2, [sp, #4]
    dbe8:	f845 c002 	str.w	ip, [r5, r2]
    dbec:	9a03      	ldr	r2, [sp, #12]
    dbee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
    dbf2:	3304      	adds	r3, #4
    dbf4:	f1b9 0f00 	cmp.w	r9, #0
    dbf8:	d020      	beq.n	dc3c <__multiply+0x140>
    dbfa:	6829      	ldr	r1, [r5, #0]
    dbfc:	f104 0c14 	add.w	ip, r4, #20
    dc00:	46ae      	mov	lr, r5
    dc02:	f04f 0a00 	mov.w	sl, #0
    dc06:	f8bc b000 	ldrh.w	fp, [ip]
    dc0a:	f8be 2002 	ldrh.w	r2, [lr, #2]
    dc0e:	fb09 220b 	mla	r2, r9, fp, r2
    dc12:	4492      	add	sl, r2
    dc14:	b289      	uxth	r1, r1
    dc16:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    dc1a:	f84e 1b04 	str.w	r1, [lr], #4
    dc1e:	f85c 2b04 	ldr.w	r2, [ip], #4
    dc22:	f8be 1000 	ldrh.w	r1, [lr]
    dc26:	0c12      	lsrs	r2, r2, #16
    dc28:	fb09 1102 	mla	r1, r9, r2, r1
    dc2c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
    dc30:	4567      	cmp	r7, ip
    dc32:	ea4f 4a11 	mov.w	sl, r1, lsr #16
    dc36:	d8e6      	bhi.n	dc06 <__multiply+0x10a>
    dc38:	9a01      	ldr	r2, [sp, #4]
    dc3a:	50a9      	str	r1, [r5, r2]
    dc3c:	3504      	adds	r5, #4
    dc3e:	e79b      	b.n	db78 <__multiply+0x7c>
    dc40:	3e01      	subs	r6, #1
    dc42:	e79d      	b.n	db80 <__multiply+0x84>
    dc44:	00013482 	.word	0x00013482
    dc48:	00013425 	.word	0x00013425

0000dc4c <__pow5mult>:
    dc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dc50:	4615      	mov	r5, r2
    dc52:	f012 0203 	ands.w	r2, r2, #3
    dc56:	4606      	mov	r6, r0
    dc58:	460f      	mov	r7, r1
    dc5a:	d007      	beq.n	dc6c <__pow5mult+0x20>
    dc5c:	4c25      	ldr	r4, [pc, #148]	; (dcf4 <__pow5mult+0xa8>)
    dc5e:	3a01      	subs	r2, #1
    dc60:	2300      	movs	r3, #0
    dc62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    dc66:	f7ff feed 	bl	da44 <__multadd>
    dc6a:	4607      	mov	r7, r0
    dc6c:	10ad      	asrs	r5, r5, #2
    dc6e:	d03d      	beq.n	dcec <__pow5mult+0xa0>
    dc70:	6a74      	ldr	r4, [r6, #36]	; 0x24
    dc72:	b97c      	cbnz	r4, dc94 <__pow5mult+0x48>
    dc74:	2010      	movs	r0, #16
    dc76:	f7ff fcb1 	bl	d5dc <malloc>
    dc7a:	4602      	mov	r2, r0
    dc7c:	6270      	str	r0, [r6, #36]	; 0x24
    dc7e:	b928      	cbnz	r0, dc8c <__pow5mult+0x40>
    dc80:	4b1d      	ldr	r3, [pc, #116]	; (dcf8 <__pow5mult+0xac>)
    dc82:	481e      	ldr	r0, [pc, #120]	; (dcfc <__pow5mult+0xb0>)
    dc84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    dc88:	f000 fcd2 	bl	e630 <__assert_func>
    dc8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
    dc90:	6004      	str	r4, [r0, #0]
    dc92:	60c4      	str	r4, [r0, #12]
    dc94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    dc98:	f8d8 4008 	ldr.w	r4, [r8, #8]
    dc9c:	b94c      	cbnz	r4, dcb2 <__pow5mult+0x66>
    dc9e:	f240 2171 	movw	r1, #625	; 0x271
    dca2:	4630      	mov	r0, r6
    dca4:	f7ff ff14 	bl	dad0 <__i2b>
    dca8:	2300      	movs	r3, #0
    dcaa:	f8c8 0008 	str.w	r0, [r8, #8]
    dcae:	4604      	mov	r4, r0
    dcb0:	6003      	str	r3, [r0, #0]
    dcb2:	f04f 0900 	mov.w	r9, #0
    dcb6:	07eb      	lsls	r3, r5, #31
    dcb8:	d50a      	bpl.n	dcd0 <__pow5mult+0x84>
    dcba:	4639      	mov	r1, r7
    dcbc:	4622      	mov	r2, r4
    dcbe:	4630      	mov	r0, r6
    dcc0:	f7ff ff1c 	bl	dafc <__multiply>
    dcc4:	4639      	mov	r1, r7
    dcc6:	4680      	mov	r8, r0
    dcc8:	4630      	mov	r0, r6
    dcca:	f7ff fe99 	bl	da00 <_Bfree>
    dcce:	4647      	mov	r7, r8
    dcd0:	106d      	asrs	r5, r5, #1
    dcd2:	d00b      	beq.n	dcec <__pow5mult+0xa0>
    dcd4:	6820      	ldr	r0, [r4, #0]
    dcd6:	b938      	cbnz	r0, dce8 <__pow5mult+0x9c>
    dcd8:	4622      	mov	r2, r4
    dcda:	4621      	mov	r1, r4
    dcdc:	4630      	mov	r0, r6
    dcde:	f7ff ff0d 	bl	dafc <__multiply>
    dce2:	6020      	str	r0, [r4, #0]
    dce4:	f8c0 9000 	str.w	r9, [r0]
    dce8:	4604      	mov	r4, r0
    dcea:	e7e4      	b.n	dcb6 <__pow5mult+0x6a>
    dcec:	4638      	mov	r0, r7
    dcee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dcf2:	bf00      	nop
    dcf4:	00013254 	.word	0x00013254
    dcf8:	0001340e 	.word	0x0001340e
    dcfc:	00013425 	.word	0x00013425

0000dd00 <__lshift>:
    dd00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dd04:	460c      	mov	r4, r1
    dd06:	6849      	ldr	r1, [r1, #4]
    dd08:	6923      	ldr	r3, [r4, #16]
    dd0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
    dd0e:	68a3      	ldr	r3, [r4, #8]
    dd10:	4607      	mov	r7, r0
    dd12:	4691      	mov	r9, r2
    dd14:	ea4f 1a62 	mov.w	sl, r2, asr #5
    dd18:	f108 0601 	add.w	r6, r8, #1
    dd1c:	42b3      	cmp	r3, r6
    dd1e:	db0b      	blt.n	dd38 <__lshift+0x38>
    dd20:	4638      	mov	r0, r7
    dd22:	f7ff fe2d 	bl	d980 <_Balloc>
    dd26:	4605      	mov	r5, r0
    dd28:	b948      	cbnz	r0, dd3e <__lshift+0x3e>
    dd2a:	4602      	mov	r2, r0
    dd2c:	4b2a      	ldr	r3, [pc, #168]	; (ddd8 <__lshift+0xd8>)
    dd2e:	482b      	ldr	r0, [pc, #172]	; (dddc <__lshift+0xdc>)
    dd30:	f240 11d9 	movw	r1, #473	; 0x1d9
    dd34:	f000 fc7c 	bl	e630 <__assert_func>
    dd38:	3101      	adds	r1, #1
    dd3a:	005b      	lsls	r3, r3, #1
    dd3c:	e7ee      	b.n	dd1c <__lshift+0x1c>
    dd3e:	2300      	movs	r3, #0
    dd40:	f100 0114 	add.w	r1, r0, #20
    dd44:	f100 0210 	add.w	r2, r0, #16
    dd48:	4618      	mov	r0, r3
    dd4a:	4553      	cmp	r3, sl
    dd4c:	db37      	blt.n	ddbe <__lshift+0xbe>
    dd4e:	6920      	ldr	r0, [r4, #16]
    dd50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
    dd54:	f104 0314 	add.w	r3, r4, #20
    dd58:	f019 091f 	ands.w	r9, r9, #31
    dd5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
    dd60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    dd64:	d02f      	beq.n	ddc6 <__lshift+0xc6>
    dd66:	f1c9 0e20 	rsb	lr, r9, #32
    dd6a:	468a      	mov	sl, r1
    dd6c:	f04f 0c00 	mov.w	ip, #0
    dd70:	681a      	ldr	r2, [r3, #0]
    dd72:	fa02 f209 	lsl.w	r2, r2, r9
    dd76:	ea42 020c 	orr.w	r2, r2, ip
    dd7a:	f84a 2b04 	str.w	r2, [sl], #4
    dd7e:	f853 2b04 	ldr.w	r2, [r3], #4
    dd82:	4298      	cmp	r0, r3
    dd84:	fa22 fc0e 	lsr.w	ip, r2, lr
    dd88:	d8f2      	bhi.n	dd70 <__lshift+0x70>
    dd8a:	1b03      	subs	r3, r0, r4
    dd8c:	3b15      	subs	r3, #21
    dd8e:	f023 0303 	bic.w	r3, r3, #3
    dd92:	3304      	adds	r3, #4
    dd94:	f104 0215 	add.w	r2, r4, #21
    dd98:	4290      	cmp	r0, r2
    dd9a:	bf38      	it	cc
    dd9c:	2304      	movcc	r3, #4
    dd9e:	f841 c003 	str.w	ip, [r1, r3]
    dda2:	f1bc 0f00 	cmp.w	ip, #0
    dda6:	d001      	beq.n	ddac <__lshift+0xac>
    dda8:	f108 0602 	add.w	r6, r8, #2
    ddac:	3e01      	subs	r6, #1
    ddae:	4638      	mov	r0, r7
    ddb0:	612e      	str	r6, [r5, #16]
    ddb2:	4621      	mov	r1, r4
    ddb4:	f7ff fe24 	bl	da00 <_Bfree>
    ddb8:	4628      	mov	r0, r5
    ddba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ddbe:	f842 0f04 	str.w	r0, [r2, #4]!
    ddc2:	3301      	adds	r3, #1
    ddc4:	e7c1      	b.n	dd4a <__lshift+0x4a>
    ddc6:	3904      	subs	r1, #4
    ddc8:	f853 2b04 	ldr.w	r2, [r3], #4
    ddcc:	f841 2f04 	str.w	r2, [r1, #4]!
    ddd0:	4298      	cmp	r0, r3
    ddd2:	d8f9      	bhi.n	ddc8 <__lshift+0xc8>
    ddd4:	e7ea      	b.n	ddac <__lshift+0xac>
    ddd6:	bf00      	nop
    ddd8:	00013482 	.word	0x00013482
    dddc:	00013425 	.word	0x00013425

0000dde0 <__mdiff>:
    dde0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dde4:	460d      	mov	r5, r1
    dde6:	4607      	mov	r7, r0
    dde8:	4611      	mov	r1, r2
    ddea:	4628      	mov	r0, r5
    ddec:	4614      	mov	r4, r2
    ddee:	f002 fd61 	bl	108b4 <__mcmp>
    ddf2:	1e06      	subs	r6, r0, #0
    ddf4:	d111      	bne.n	de1a <__mdiff+0x3a>
    ddf6:	4631      	mov	r1, r6
    ddf8:	4638      	mov	r0, r7
    ddfa:	f7ff fdc1 	bl	d980 <_Balloc>
    ddfe:	4602      	mov	r2, r0
    de00:	b928      	cbnz	r0, de0e <__mdiff+0x2e>
    de02:	4b39      	ldr	r3, [pc, #228]	; (dee8 <__mdiff+0x108>)
    de04:	f240 2132 	movw	r1, #562	; 0x232
    de08:	4838      	ldr	r0, [pc, #224]	; (deec <__mdiff+0x10c>)
    de0a:	f000 fc11 	bl	e630 <__assert_func>
    de0e:	2301      	movs	r3, #1
    de10:	e9c0 3604 	strd	r3, r6, [r0, #16]
    de14:	4610      	mov	r0, r2
    de16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de1a:	bfa4      	itt	ge
    de1c:	4623      	movge	r3, r4
    de1e:	462c      	movge	r4, r5
    de20:	4638      	mov	r0, r7
    de22:	6861      	ldr	r1, [r4, #4]
    de24:	bfa6      	itte	ge
    de26:	461d      	movge	r5, r3
    de28:	2600      	movge	r6, #0
    de2a:	2601      	movlt	r6, #1
    de2c:	f7ff fda8 	bl	d980 <_Balloc>
    de30:	4602      	mov	r2, r0
    de32:	b918      	cbnz	r0, de3c <__mdiff+0x5c>
    de34:	4b2c      	ldr	r3, [pc, #176]	; (dee8 <__mdiff+0x108>)
    de36:	f44f 7110 	mov.w	r1, #576	; 0x240
    de3a:	e7e5      	b.n	de08 <__mdiff+0x28>
    de3c:	6927      	ldr	r7, [r4, #16]
    de3e:	60c6      	str	r6, [r0, #12]
    de40:	692e      	ldr	r6, [r5, #16]
    de42:	f104 0014 	add.w	r0, r4, #20
    de46:	f105 0914 	add.w	r9, r5, #20
    de4a:	f102 0e14 	add.w	lr, r2, #20
    de4e:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
    de52:	eb09 0686 	add.w	r6, r9, r6, lsl #2
    de56:	3410      	adds	r4, #16
    de58:	46f2      	mov	sl, lr
    de5a:	2100      	movs	r1, #0
    de5c:	f859 3b04 	ldr.w	r3, [r9], #4
    de60:	f854 bf04 	ldr.w	fp, [r4, #4]!
    de64:	fa1f f883 	uxth.w	r8, r3
    de68:	fa11 f18b 	uxtah	r1, r1, fp
    de6c:	0c1b      	lsrs	r3, r3, #16
    de6e:	eba1 0808 	sub.w	r8, r1, r8
    de72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
    de76:	eb03 4328 	add.w	r3, r3, r8, asr #16
    de7a:	fa1f f888 	uxth.w	r8, r8
    de7e:	1419      	asrs	r1, r3, #16
    de80:	454e      	cmp	r6, r9
    de82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
    de86:	f84a 3b04 	str.w	r3, [sl], #4
    de8a:	d8e7      	bhi.n	de5c <__mdiff+0x7c>
    de8c:	1b73      	subs	r3, r6, r5
    de8e:	3b15      	subs	r3, #21
    de90:	f023 0303 	bic.w	r3, r3, #3
    de94:	3304      	adds	r3, #4
    de96:	3515      	adds	r5, #21
    de98:	42ae      	cmp	r6, r5
    de9a:	bf38      	it	cc
    de9c:	2304      	movcc	r3, #4
    de9e:	4418      	add	r0, r3
    dea0:	4473      	add	r3, lr
    dea2:	469e      	mov	lr, r3
    dea4:	4606      	mov	r6, r0
    dea6:	4566      	cmp	r6, ip
    dea8:	d30e      	bcc.n	dec8 <__mdiff+0xe8>
    deaa:	f10c 0103 	add.w	r1, ip, #3
    deae:	1a09      	subs	r1, r1, r0
    deb0:	f021 0103 	bic.w	r1, r1, #3
    deb4:	3803      	subs	r0, #3
    deb6:	4584      	cmp	ip, r0
    deb8:	bf38      	it	cc
    deba:	2100      	movcc	r1, #0
    debc:	4419      	add	r1, r3
    debe:	f851 3d04 	ldr.w	r3, [r1, #-4]!
    dec2:	b17b      	cbz	r3, dee4 <__mdiff+0x104>
    dec4:	6117      	str	r7, [r2, #16]
    dec6:	e7a5      	b.n	de14 <__mdiff+0x34>
    dec8:	f856 8b04 	ldr.w	r8, [r6], #4
    decc:	fa11 f488 	uxtah	r4, r1, r8
    ded0:	1425      	asrs	r5, r4, #16
    ded2:	eb05 4518 	add.w	r5, r5, r8, lsr #16
    ded6:	b2a4      	uxth	r4, r4
    ded8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    dedc:	f84e 4b04 	str.w	r4, [lr], #4
    dee0:	1429      	asrs	r1, r5, #16
    dee2:	e7e0      	b.n	dea6 <__mdiff+0xc6>
    dee4:	3f01      	subs	r7, #1
    dee6:	e7ea      	b.n	debe <__mdiff+0xde>
    dee8:	00013482 	.word	0x00013482
    deec:	00013425 	.word	0x00013425

0000def0 <__d2b>:
    def0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    def4:	2101      	movs	r1, #1
    def6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    defa:	4690      	mov	r8, r2
    defc:	461d      	mov	r5, r3
    defe:	f7ff fd3f 	bl	d980 <_Balloc>
    df02:	4604      	mov	r4, r0
    df04:	b930      	cbnz	r0, df14 <__d2b+0x24>
    df06:	4602      	mov	r2, r0
    df08:	4b25      	ldr	r3, [pc, #148]	; (dfa0 <__d2b+0xb0>)
    df0a:	4826      	ldr	r0, [pc, #152]	; (dfa4 <__d2b+0xb4>)
    df0c:	f240 310a 	movw	r1, #778	; 0x30a
    df10:	f000 fb8e 	bl	e630 <__assert_func>
    df14:	f3c5 0313 	ubfx	r3, r5, #0, #20
    df18:	f3c5 550a 	ubfx	r5, r5, #20, #11
    df1c:	bb2d      	cbnz	r5, df6a <__d2b+0x7a>
    df1e:	9301      	str	r3, [sp, #4]
    df20:	f1b8 0300 	subs.w	r3, r8, #0
    df24:	d026      	beq.n	df74 <__d2b+0x84>
    df26:	4668      	mov	r0, sp
    df28:	9300      	str	r3, [sp, #0]
    df2a:	f002 fc96 	bl	1085a <__lo0bits>
    df2e:	9900      	ldr	r1, [sp, #0]
    df30:	b1f0      	cbz	r0, df70 <__d2b+0x80>
    df32:	9a01      	ldr	r2, [sp, #4]
    df34:	f1c0 0320 	rsb	r3, r0, #32
    df38:	fa02 f303 	lsl.w	r3, r2, r3
    df3c:	430b      	orrs	r3, r1
    df3e:	40c2      	lsrs	r2, r0
    df40:	6163      	str	r3, [r4, #20]
    df42:	9201      	str	r2, [sp, #4]
    df44:	9b01      	ldr	r3, [sp, #4]
    df46:	61a3      	str	r3, [r4, #24]
    df48:	2b00      	cmp	r3, #0
    df4a:	bf14      	ite	ne
    df4c:	2102      	movne	r1, #2
    df4e:	2101      	moveq	r1, #1
    df50:	6121      	str	r1, [r4, #16]
    df52:	b1c5      	cbz	r5, df86 <__d2b+0x96>
    df54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    df58:	4405      	add	r5, r0
    df5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    df5e:	603d      	str	r5, [r7, #0]
    df60:	6030      	str	r0, [r6, #0]
    df62:	4620      	mov	r0, r4
    df64:	b002      	add	sp, #8
    df66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    df6e:	e7d6      	b.n	df1e <__d2b+0x2e>
    df70:	6161      	str	r1, [r4, #20]
    df72:	e7e7      	b.n	df44 <__d2b+0x54>
    df74:	a801      	add	r0, sp, #4
    df76:	f002 fc70 	bl	1085a <__lo0bits>
    df7a:	9b01      	ldr	r3, [sp, #4]
    df7c:	6163      	str	r3, [r4, #20]
    df7e:	2101      	movs	r1, #1
    df80:	6121      	str	r1, [r4, #16]
    df82:	3020      	adds	r0, #32
    df84:	e7e5      	b.n	df52 <__d2b+0x62>
    df86:	eb04 0381 	add.w	r3, r4, r1, lsl #2
    df8a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    df8e:	6038      	str	r0, [r7, #0]
    df90:	6918      	ldr	r0, [r3, #16]
    df92:	f002 fc42 	bl	1081a <__hi0bits>
    df96:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
    df9a:	6031      	str	r1, [r6, #0]
    df9c:	e7e1      	b.n	df62 <__d2b+0x72>
    df9e:	bf00      	nop
    dfa0:	00013482 	.word	0x00013482
    dfa4:	00013425 	.word	0x00013425

0000dfa8 <_mprec_log10>:
    dfa8:	2817      	cmp	r0, #23
    dfaa:	b5d0      	push	{r4, r6, r7, lr}
    dfac:	4604      	mov	r4, r0
    dfae:	dc05      	bgt.n	dfbc <_mprec_log10+0x14>
    dfb0:	4808      	ldr	r0, [pc, #32]	; (dfd4 <_mprec_log10+0x2c>)
    dfb2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
    dfb6:	e9d4 0100 	ldrd	r0, r1, [r4]
    dfba:	bdd0      	pop	{r4, r6, r7, pc}
    dfbc:	4906      	ldr	r1, [pc, #24]	; (dfd8 <_mprec_log10+0x30>)
    dfbe:	4f07      	ldr	r7, [pc, #28]	; (dfdc <_mprec_log10+0x34>)
    dfc0:	2000      	movs	r0, #0
    dfc2:	2600      	movs	r6, #0
    dfc4:	4632      	mov	r2, r6
    dfc6:	463b      	mov	r3, r7
    dfc8:	f7f2 faa6 	bl	518 <__aeabi_dmul>
    dfcc:	3c01      	subs	r4, #1
    dfce:	d1f9      	bne.n	dfc4 <_mprec_log10+0x1c>
    dfd0:	e7f3      	b.n	dfba <_mprec_log10+0x12>
    dfd2:	bf00      	nop
    dfd4:	00011030 	.word	0x00011030
    dfd8:	3ff00000 	.word	0x3ff00000
    dfdc:	40240000 	.word	0x40240000

0000dfe0 <_vfiprintf_r>:
    dfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dfe4:	460d      	mov	r5, r1
    dfe6:	b09d      	sub	sp, #116	; 0x74
    dfe8:	4614      	mov	r4, r2
    dfea:	4698      	mov	r8, r3
    dfec:	4606      	mov	r6, r0
    dfee:	b118      	cbz	r0, dff8 <_vfiprintf_r+0x18>
    dff0:	6983      	ldr	r3, [r0, #24]
    dff2:	b90b      	cbnz	r3, dff8 <_vfiprintf_r+0x18>
    dff4:	f7ff fc3a 	bl	d86c <__sinit>
    dff8:	4b89      	ldr	r3, [pc, #548]	; (e220 <_vfiprintf_r+0x240>)
    dffa:	429d      	cmp	r5, r3
    dffc:	d11b      	bne.n	e036 <_vfiprintf_r+0x56>
    dffe:	6875      	ldr	r5, [r6, #4]
    e000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    e002:	07d9      	lsls	r1, r3, #31
    e004:	d405      	bmi.n	e012 <_vfiprintf_r+0x32>
    e006:	89ab      	ldrh	r3, [r5, #12]
    e008:	059a      	lsls	r2, r3, #22
    e00a:	d402      	bmi.n	e012 <_vfiprintf_r+0x32>
    e00c:	6da8      	ldr	r0, [r5, #88]	; 0x58
    e00e:	f7f8 fe05 	bl	6c1c <__retarget_lock_acquire_recursive>
    e012:	89ab      	ldrh	r3, [r5, #12]
    e014:	071b      	lsls	r3, r3, #28
    e016:	d501      	bpl.n	e01c <_vfiprintf_r+0x3c>
    e018:	692b      	ldr	r3, [r5, #16]
    e01a:	b9eb      	cbnz	r3, e058 <_vfiprintf_r+0x78>
    e01c:	4629      	mov	r1, r5
    e01e:	4630      	mov	r0, r6
    e020:	f000 fa98 	bl	e554 <__swsetup_r>
    e024:	b1c0      	cbz	r0, e058 <_vfiprintf_r+0x78>
    e026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    e028:	07dc      	lsls	r4, r3, #31
    e02a:	d50e      	bpl.n	e04a <_vfiprintf_r+0x6a>
    e02c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e030:	b01d      	add	sp, #116	; 0x74
    e032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e036:	4b7b      	ldr	r3, [pc, #492]	; (e224 <_vfiprintf_r+0x244>)
    e038:	429d      	cmp	r5, r3
    e03a:	d101      	bne.n	e040 <_vfiprintf_r+0x60>
    e03c:	68b5      	ldr	r5, [r6, #8]
    e03e:	e7df      	b.n	e000 <_vfiprintf_r+0x20>
    e040:	4b79      	ldr	r3, [pc, #484]	; (e228 <_vfiprintf_r+0x248>)
    e042:	429d      	cmp	r5, r3
    e044:	bf08      	it	eq
    e046:	68f5      	ldreq	r5, [r6, #12]
    e048:	e7da      	b.n	e000 <_vfiprintf_r+0x20>
    e04a:	89ab      	ldrh	r3, [r5, #12]
    e04c:	0598      	lsls	r0, r3, #22
    e04e:	d4ed      	bmi.n	e02c <_vfiprintf_r+0x4c>
    e050:	6da8      	ldr	r0, [r5, #88]	; 0x58
    e052:	f7f8 fe03 	bl	6c5c <__retarget_lock_release_recursive>
    e056:	e7e9      	b.n	e02c <_vfiprintf_r+0x4c>
    e058:	2300      	movs	r3, #0
    e05a:	9309      	str	r3, [sp, #36]	; 0x24
    e05c:	2320      	movs	r3, #32
    e05e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    e062:	f8cd 800c 	str.w	r8, [sp, #12]
    e066:	2330      	movs	r3, #48	; 0x30
    e068:	f8df 81c0 	ldr.w	r8, [pc, #448]	; e22c <_vfiprintf_r+0x24c>
    e06c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    e070:	f04f 0901 	mov.w	r9, #1
    e074:	4623      	mov	r3, r4
    e076:	469a      	mov	sl, r3
    e078:	f813 2b01 	ldrb.w	r2, [r3], #1
    e07c:	b10a      	cbz	r2, e082 <_vfiprintf_r+0xa2>
    e07e:	2a25      	cmp	r2, #37	; 0x25
    e080:	d1f9      	bne.n	e076 <_vfiprintf_r+0x96>
    e082:	ebba 0b04 	subs.w	fp, sl, r4
    e086:	d00b      	beq.n	e0a0 <_vfiprintf_r+0xc0>
    e088:	465b      	mov	r3, fp
    e08a:	4622      	mov	r2, r4
    e08c:	4629      	mov	r1, r5
    e08e:	4630      	mov	r0, r6
    e090:	f002 fc40 	bl	10914 <__sfputs_r>
    e094:	3001      	adds	r0, #1
    e096:	f000 80aa 	beq.w	e1ee <_vfiprintf_r+0x20e>
    e09a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e09c:	445a      	add	r2, fp
    e09e:	9209      	str	r2, [sp, #36]	; 0x24
    e0a0:	f89a 3000 	ldrb.w	r3, [sl]
    e0a4:	2b00      	cmp	r3, #0
    e0a6:	f000 80a2 	beq.w	e1ee <_vfiprintf_r+0x20e>
    e0aa:	2300      	movs	r3, #0
    e0ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e0b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
    e0b4:	f10a 0a01 	add.w	sl, sl, #1
    e0b8:	9304      	str	r3, [sp, #16]
    e0ba:	9307      	str	r3, [sp, #28]
    e0bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    e0c0:	931a      	str	r3, [sp, #104]	; 0x68
    e0c2:	4654      	mov	r4, sl
    e0c4:	2205      	movs	r2, #5
    e0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
    e0ca:	4858      	ldr	r0, [pc, #352]	; (e22c <_vfiprintf_r+0x24c>)
    e0cc:	f7f2 f818 	bl	100 <memchr>
    e0d0:	9a04      	ldr	r2, [sp, #16]
    e0d2:	b9d8      	cbnz	r0, e10c <_vfiprintf_r+0x12c>
    e0d4:	06d1      	lsls	r1, r2, #27
    e0d6:	bf44      	itt	mi
    e0d8:	2320      	movmi	r3, #32
    e0da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    e0de:	0713      	lsls	r3, r2, #28
    e0e0:	bf44      	itt	mi
    e0e2:	232b      	movmi	r3, #43	; 0x2b
    e0e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    e0e8:	f89a 3000 	ldrb.w	r3, [sl]
    e0ec:	2b2a      	cmp	r3, #42	; 0x2a
    e0ee:	d015      	beq.n	e11c <_vfiprintf_r+0x13c>
    e0f0:	9a07      	ldr	r2, [sp, #28]
    e0f2:	4654      	mov	r4, sl
    e0f4:	2000      	movs	r0, #0
    e0f6:	f04f 0c0a 	mov.w	ip, #10
    e0fa:	4621      	mov	r1, r4
    e0fc:	f811 3b01 	ldrb.w	r3, [r1], #1
    e100:	3b30      	subs	r3, #48	; 0x30
    e102:	2b09      	cmp	r3, #9
    e104:	d94e      	bls.n	e1a4 <_vfiprintf_r+0x1c4>
    e106:	b1b0      	cbz	r0, e136 <_vfiprintf_r+0x156>
    e108:	9207      	str	r2, [sp, #28]
    e10a:	e014      	b.n	e136 <_vfiprintf_r+0x156>
    e10c:	eba0 0308 	sub.w	r3, r0, r8
    e110:	fa09 f303 	lsl.w	r3, r9, r3
    e114:	4313      	orrs	r3, r2
    e116:	9304      	str	r3, [sp, #16]
    e118:	46a2      	mov	sl, r4
    e11a:	e7d2      	b.n	e0c2 <_vfiprintf_r+0xe2>
    e11c:	9b03      	ldr	r3, [sp, #12]
    e11e:	1d19      	adds	r1, r3, #4
    e120:	681b      	ldr	r3, [r3, #0]
    e122:	9103      	str	r1, [sp, #12]
    e124:	2b00      	cmp	r3, #0
    e126:	bfbb      	ittet	lt
    e128:	425b      	neglt	r3, r3
    e12a:	f042 0202 	orrlt.w	r2, r2, #2
    e12e:	9307      	strge	r3, [sp, #28]
    e130:	9307      	strlt	r3, [sp, #28]
    e132:	bfb8      	it	lt
    e134:	9204      	strlt	r2, [sp, #16]
    e136:	7823      	ldrb	r3, [r4, #0]
    e138:	2b2e      	cmp	r3, #46	; 0x2e
    e13a:	d10c      	bne.n	e156 <_vfiprintf_r+0x176>
    e13c:	7863      	ldrb	r3, [r4, #1]
    e13e:	2b2a      	cmp	r3, #42	; 0x2a
    e140:	d135      	bne.n	e1ae <_vfiprintf_r+0x1ce>
    e142:	9b03      	ldr	r3, [sp, #12]
    e144:	1d1a      	adds	r2, r3, #4
    e146:	681b      	ldr	r3, [r3, #0]
    e148:	9203      	str	r2, [sp, #12]
    e14a:	2b00      	cmp	r3, #0
    e14c:	bfb8      	it	lt
    e14e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    e152:	3402      	adds	r4, #2
    e154:	9305      	str	r3, [sp, #20]
    e156:	f8df a0d8 	ldr.w	sl, [pc, #216]	; e230 <_vfiprintf_r+0x250>
    e15a:	7821      	ldrb	r1, [r4, #0]
    e15c:	2203      	movs	r2, #3
    e15e:	4650      	mov	r0, sl
    e160:	f7f1 ffce 	bl	100 <memchr>
    e164:	b140      	cbz	r0, e178 <_vfiprintf_r+0x198>
    e166:	2340      	movs	r3, #64	; 0x40
    e168:	eba0 000a 	sub.w	r0, r0, sl
    e16c:	fa03 f000 	lsl.w	r0, r3, r0
    e170:	9b04      	ldr	r3, [sp, #16]
    e172:	4303      	orrs	r3, r0
    e174:	3401      	adds	r4, #1
    e176:	9304      	str	r3, [sp, #16]
    e178:	f814 1b01 	ldrb.w	r1, [r4], #1
    e17c:	482d      	ldr	r0, [pc, #180]	; (e234 <_vfiprintf_r+0x254>)
    e17e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    e182:	2206      	movs	r2, #6
    e184:	f7f1 ffbc 	bl	100 <memchr>
    e188:	2800      	cmp	r0, #0
    e18a:	d03f      	beq.n	e20c <_vfiprintf_r+0x22c>
    e18c:	4b2a      	ldr	r3, [pc, #168]	; (e238 <_vfiprintf_r+0x258>)
    e18e:	bb1b      	cbnz	r3, e1d8 <_vfiprintf_r+0x1f8>
    e190:	9b03      	ldr	r3, [sp, #12]
    e192:	3307      	adds	r3, #7
    e194:	f023 0307 	bic.w	r3, r3, #7
    e198:	3308      	adds	r3, #8
    e19a:	9303      	str	r3, [sp, #12]
    e19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e19e:	443b      	add	r3, r7
    e1a0:	9309      	str	r3, [sp, #36]	; 0x24
    e1a2:	e767      	b.n	e074 <_vfiprintf_r+0x94>
    e1a4:	fb0c 3202 	mla	r2, ip, r2, r3
    e1a8:	460c      	mov	r4, r1
    e1aa:	2001      	movs	r0, #1
    e1ac:	e7a5      	b.n	e0fa <_vfiprintf_r+0x11a>
    e1ae:	2300      	movs	r3, #0
    e1b0:	3401      	adds	r4, #1
    e1b2:	9305      	str	r3, [sp, #20]
    e1b4:	4619      	mov	r1, r3
    e1b6:	f04f 0c0a 	mov.w	ip, #10
    e1ba:	4620      	mov	r0, r4
    e1bc:	f810 2b01 	ldrb.w	r2, [r0], #1
    e1c0:	3a30      	subs	r2, #48	; 0x30
    e1c2:	2a09      	cmp	r2, #9
    e1c4:	d903      	bls.n	e1ce <_vfiprintf_r+0x1ee>
    e1c6:	2b00      	cmp	r3, #0
    e1c8:	d0c5      	beq.n	e156 <_vfiprintf_r+0x176>
    e1ca:	9105      	str	r1, [sp, #20]
    e1cc:	e7c3      	b.n	e156 <_vfiprintf_r+0x176>
    e1ce:	fb0c 2101 	mla	r1, ip, r1, r2
    e1d2:	4604      	mov	r4, r0
    e1d4:	2301      	movs	r3, #1
    e1d6:	e7f0      	b.n	e1ba <_vfiprintf_r+0x1da>
    e1d8:	ab03      	add	r3, sp, #12
    e1da:	9300      	str	r3, [sp, #0]
    e1dc:	462a      	mov	r2, r5
    e1de:	4b17      	ldr	r3, [pc, #92]	; (e23c <_vfiprintf_r+0x25c>)
    e1e0:	a904      	add	r1, sp, #16
    e1e2:	4630      	mov	r0, r6
    e1e4:	f3af 8000 	nop.w
    e1e8:	4607      	mov	r7, r0
    e1ea:	1c78      	adds	r0, r7, #1
    e1ec:	d1d6      	bne.n	e19c <_vfiprintf_r+0x1bc>
    e1ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    e1f0:	07d9      	lsls	r1, r3, #31
    e1f2:	d405      	bmi.n	e200 <_vfiprintf_r+0x220>
    e1f4:	89ab      	ldrh	r3, [r5, #12]
    e1f6:	059a      	lsls	r2, r3, #22
    e1f8:	d402      	bmi.n	e200 <_vfiprintf_r+0x220>
    e1fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
    e1fc:	f7f8 fd2e 	bl	6c5c <__retarget_lock_release_recursive>
    e200:	89ab      	ldrh	r3, [r5, #12]
    e202:	065b      	lsls	r3, r3, #25
    e204:	f53f af12 	bmi.w	e02c <_vfiprintf_r+0x4c>
    e208:	9809      	ldr	r0, [sp, #36]	; 0x24
    e20a:	e711      	b.n	e030 <_vfiprintf_r+0x50>
    e20c:	ab03      	add	r3, sp, #12
    e20e:	9300      	str	r3, [sp, #0]
    e210:	462a      	mov	r2, r5
    e212:	4b0a      	ldr	r3, [pc, #40]	; (e23c <_vfiprintf_r+0x25c>)
    e214:	a904      	add	r1, sp, #16
    e216:	4630      	mov	r0, r6
    e218:	f000 f812 	bl	e240 <_printf_i>
    e21c:	e7e4      	b.n	e1e8 <_vfiprintf_r+0x208>
    e21e:	bf00      	nop
    e220:	00013214 	.word	0x00013214
    e224:	00013234 	.word	0x00013234
    e228:	000131f4 	.word	0x000131f4
    e22c:	00013493 	.word	0x00013493
    e230:	00013499 	.word	0x00013499
    e234:	0001349d 	.word	0x0001349d
    e238:	00000000 	.word	0x00000000
    e23c:	00010915 	.word	0x00010915

0000e240 <_printf_i>:
    e240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    e244:	7e0f      	ldrb	r7, [r1, #24]
    e246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    e248:	2f78      	cmp	r7, #120	; 0x78
    e24a:	4691      	mov	r9, r2
    e24c:	4680      	mov	r8, r0
    e24e:	460c      	mov	r4, r1
    e250:	469a      	mov	sl, r3
    e252:	f101 0243 	add.w	r2, r1, #67	; 0x43
    e256:	d807      	bhi.n	e268 <_printf_i+0x28>
    e258:	2f62      	cmp	r7, #98	; 0x62
    e25a:	d80a      	bhi.n	e272 <_printf_i+0x32>
    e25c:	2f00      	cmp	r7, #0
    e25e:	f000 80d8 	beq.w	e412 <_printf_i+0x1d2>
    e262:	2f58      	cmp	r7, #88	; 0x58
    e264:	f000 80a3 	beq.w	e3ae <_printf_i+0x16e>
    e268:	f104 0542 	add.w	r5, r4, #66	; 0x42
    e26c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    e270:	e03a      	b.n	e2e8 <_printf_i+0xa8>
    e272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    e276:	2b15      	cmp	r3, #21
    e278:	d8f6      	bhi.n	e268 <_printf_i+0x28>
    e27a:	a101      	add	r1, pc, #4	; (adr r1, e280 <_printf_i+0x40>)
    e27c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    e280:	0000e2d9 	.word	0x0000e2d9
    e284:	0000e2ed 	.word	0x0000e2ed
    e288:	0000e269 	.word	0x0000e269
    e28c:	0000e269 	.word	0x0000e269
    e290:	0000e269 	.word	0x0000e269
    e294:	0000e269 	.word	0x0000e269
    e298:	0000e2ed 	.word	0x0000e2ed
    e29c:	0000e269 	.word	0x0000e269
    e2a0:	0000e269 	.word	0x0000e269
    e2a4:	0000e269 	.word	0x0000e269
    e2a8:	0000e269 	.word	0x0000e269
    e2ac:	0000e3f9 	.word	0x0000e3f9
    e2b0:	0000e31d 	.word	0x0000e31d
    e2b4:	0000e3db 	.word	0x0000e3db
    e2b8:	0000e269 	.word	0x0000e269
    e2bc:	0000e269 	.word	0x0000e269
    e2c0:	0000e41b 	.word	0x0000e41b
    e2c4:	0000e269 	.word	0x0000e269
    e2c8:	0000e31d 	.word	0x0000e31d
    e2cc:	0000e269 	.word	0x0000e269
    e2d0:	0000e269 	.word	0x0000e269
    e2d4:	0000e3e3 	.word	0x0000e3e3
    e2d8:	682b      	ldr	r3, [r5, #0]
    e2da:	1d1a      	adds	r2, r3, #4
    e2dc:	681b      	ldr	r3, [r3, #0]
    e2de:	602a      	str	r2, [r5, #0]
    e2e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
    e2e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    e2e8:	2301      	movs	r3, #1
    e2ea:	e0a3      	b.n	e434 <_printf_i+0x1f4>
    e2ec:	6820      	ldr	r0, [r4, #0]
    e2ee:	6829      	ldr	r1, [r5, #0]
    e2f0:	0606      	lsls	r6, r0, #24
    e2f2:	f101 0304 	add.w	r3, r1, #4
    e2f6:	d50a      	bpl.n	e30e <_printf_i+0xce>
    e2f8:	680e      	ldr	r6, [r1, #0]
    e2fa:	602b      	str	r3, [r5, #0]
    e2fc:	2e00      	cmp	r6, #0
    e2fe:	da03      	bge.n	e308 <_printf_i+0xc8>
    e300:	232d      	movs	r3, #45	; 0x2d
    e302:	4276      	negs	r6, r6
    e304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    e308:	485e      	ldr	r0, [pc, #376]	; (e484 <_printf_i+0x244>)
    e30a:	230a      	movs	r3, #10
    e30c:	e019      	b.n	e342 <_printf_i+0x102>
    e30e:	680e      	ldr	r6, [r1, #0]
    e310:	602b      	str	r3, [r5, #0]
    e312:	f010 0f40 	tst.w	r0, #64	; 0x40
    e316:	bf18      	it	ne
    e318:	b236      	sxthne	r6, r6
    e31a:	e7ef      	b.n	e2fc <_printf_i+0xbc>
    e31c:	682b      	ldr	r3, [r5, #0]
    e31e:	6820      	ldr	r0, [r4, #0]
    e320:	1d19      	adds	r1, r3, #4
    e322:	6029      	str	r1, [r5, #0]
    e324:	0601      	lsls	r1, r0, #24
    e326:	d501      	bpl.n	e32c <_printf_i+0xec>
    e328:	681e      	ldr	r6, [r3, #0]
    e32a:	e002      	b.n	e332 <_printf_i+0xf2>
    e32c:	0646      	lsls	r6, r0, #25
    e32e:	d5fb      	bpl.n	e328 <_printf_i+0xe8>
    e330:	881e      	ldrh	r6, [r3, #0]
    e332:	4854      	ldr	r0, [pc, #336]	; (e484 <_printf_i+0x244>)
    e334:	2f6f      	cmp	r7, #111	; 0x6f
    e336:	bf0c      	ite	eq
    e338:	2308      	moveq	r3, #8
    e33a:	230a      	movne	r3, #10
    e33c:	2100      	movs	r1, #0
    e33e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    e342:	6865      	ldr	r5, [r4, #4]
    e344:	60a5      	str	r5, [r4, #8]
    e346:	2d00      	cmp	r5, #0
    e348:	bfa2      	ittt	ge
    e34a:	6821      	ldrge	r1, [r4, #0]
    e34c:	f021 0104 	bicge.w	r1, r1, #4
    e350:	6021      	strge	r1, [r4, #0]
    e352:	b90e      	cbnz	r6, e358 <_printf_i+0x118>
    e354:	2d00      	cmp	r5, #0
    e356:	d04d      	beq.n	e3f4 <_printf_i+0x1b4>
    e358:	4615      	mov	r5, r2
    e35a:	fbb6 f1f3 	udiv	r1, r6, r3
    e35e:	fb03 6711 	mls	r7, r3, r1, r6
    e362:	5dc7      	ldrb	r7, [r0, r7]
    e364:	f805 7d01 	strb.w	r7, [r5, #-1]!
    e368:	4637      	mov	r7, r6
    e36a:	42bb      	cmp	r3, r7
    e36c:	460e      	mov	r6, r1
    e36e:	d9f4      	bls.n	e35a <_printf_i+0x11a>
    e370:	2b08      	cmp	r3, #8
    e372:	d10b      	bne.n	e38c <_printf_i+0x14c>
    e374:	6823      	ldr	r3, [r4, #0]
    e376:	07de      	lsls	r6, r3, #31
    e378:	d508      	bpl.n	e38c <_printf_i+0x14c>
    e37a:	6923      	ldr	r3, [r4, #16]
    e37c:	6861      	ldr	r1, [r4, #4]
    e37e:	4299      	cmp	r1, r3
    e380:	bfde      	ittt	le
    e382:	2330      	movle	r3, #48	; 0x30
    e384:	f805 3c01 	strble.w	r3, [r5, #-1]
    e388:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    e38c:	1b52      	subs	r2, r2, r5
    e38e:	6122      	str	r2, [r4, #16]
    e390:	f8cd a000 	str.w	sl, [sp]
    e394:	464b      	mov	r3, r9
    e396:	aa03      	add	r2, sp, #12
    e398:	4621      	mov	r1, r4
    e39a:	4640      	mov	r0, r8
    e39c:	f002 facc 	bl	10938 <_printf_common>
    e3a0:	3001      	adds	r0, #1
    e3a2:	d14c      	bne.n	e43e <_printf_i+0x1fe>
    e3a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e3a8:	b004      	add	sp, #16
    e3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e3ae:	4835      	ldr	r0, [pc, #212]	; (e484 <_printf_i+0x244>)
    e3b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
    e3b4:	6829      	ldr	r1, [r5, #0]
    e3b6:	6823      	ldr	r3, [r4, #0]
    e3b8:	f851 6b04 	ldr.w	r6, [r1], #4
    e3bc:	6029      	str	r1, [r5, #0]
    e3be:	061d      	lsls	r5, r3, #24
    e3c0:	d514      	bpl.n	e3ec <_printf_i+0x1ac>
    e3c2:	07df      	lsls	r7, r3, #31
    e3c4:	bf44      	itt	mi
    e3c6:	f043 0320 	orrmi.w	r3, r3, #32
    e3ca:	6023      	strmi	r3, [r4, #0]
    e3cc:	b91e      	cbnz	r6, e3d6 <_printf_i+0x196>
    e3ce:	6823      	ldr	r3, [r4, #0]
    e3d0:	f023 0320 	bic.w	r3, r3, #32
    e3d4:	6023      	str	r3, [r4, #0]
    e3d6:	2310      	movs	r3, #16
    e3d8:	e7b0      	b.n	e33c <_printf_i+0xfc>
    e3da:	6823      	ldr	r3, [r4, #0]
    e3dc:	f043 0320 	orr.w	r3, r3, #32
    e3e0:	6023      	str	r3, [r4, #0]
    e3e2:	2378      	movs	r3, #120	; 0x78
    e3e4:	4828      	ldr	r0, [pc, #160]	; (e488 <_printf_i+0x248>)
    e3e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    e3ea:	e7e3      	b.n	e3b4 <_printf_i+0x174>
    e3ec:	0659      	lsls	r1, r3, #25
    e3ee:	bf48      	it	mi
    e3f0:	b2b6      	uxthmi	r6, r6
    e3f2:	e7e6      	b.n	e3c2 <_printf_i+0x182>
    e3f4:	4615      	mov	r5, r2
    e3f6:	e7bb      	b.n	e370 <_printf_i+0x130>
    e3f8:	682b      	ldr	r3, [r5, #0]
    e3fa:	6826      	ldr	r6, [r4, #0]
    e3fc:	6961      	ldr	r1, [r4, #20]
    e3fe:	1d18      	adds	r0, r3, #4
    e400:	6028      	str	r0, [r5, #0]
    e402:	0635      	lsls	r5, r6, #24
    e404:	681b      	ldr	r3, [r3, #0]
    e406:	d501      	bpl.n	e40c <_printf_i+0x1cc>
    e408:	6019      	str	r1, [r3, #0]
    e40a:	e002      	b.n	e412 <_printf_i+0x1d2>
    e40c:	0670      	lsls	r0, r6, #25
    e40e:	d5fb      	bpl.n	e408 <_printf_i+0x1c8>
    e410:	8019      	strh	r1, [r3, #0]
    e412:	2300      	movs	r3, #0
    e414:	6123      	str	r3, [r4, #16]
    e416:	4615      	mov	r5, r2
    e418:	e7ba      	b.n	e390 <_printf_i+0x150>
    e41a:	682b      	ldr	r3, [r5, #0]
    e41c:	1d1a      	adds	r2, r3, #4
    e41e:	602a      	str	r2, [r5, #0]
    e420:	681d      	ldr	r5, [r3, #0]
    e422:	6862      	ldr	r2, [r4, #4]
    e424:	2100      	movs	r1, #0
    e426:	4628      	mov	r0, r5
    e428:	f7f1 fe6a 	bl	100 <memchr>
    e42c:	b108      	cbz	r0, e432 <_printf_i+0x1f2>
    e42e:	1b40      	subs	r0, r0, r5
    e430:	6060      	str	r0, [r4, #4]
    e432:	6863      	ldr	r3, [r4, #4]
    e434:	6123      	str	r3, [r4, #16]
    e436:	2300      	movs	r3, #0
    e438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    e43c:	e7a8      	b.n	e390 <_printf_i+0x150>
    e43e:	6923      	ldr	r3, [r4, #16]
    e440:	462a      	mov	r2, r5
    e442:	4649      	mov	r1, r9
    e444:	4640      	mov	r0, r8
    e446:	47d0      	blx	sl
    e448:	3001      	adds	r0, #1
    e44a:	d0ab      	beq.n	e3a4 <_printf_i+0x164>
    e44c:	6823      	ldr	r3, [r4, #0]
    e44e:	079b      	lsls	r3, r3, #30
    e450:	d413      	bmi.n	e47a <_printf_i+0x23a>
    e452:	68e0      	ldr	r0, [r4, #12]
    e454:	9b03      	ldr	r3, [sp, #12]
    e456:	4298      	cmp	r0, r3
    e458:	bfb8      	it	lt
    e45a:	4618      	movlt	r0, r3
    e45c:	e7a4      	b.n	e3a8 <_printf_i+0x168>
    e45e:	2301      	movs	r3, #1
    e460:	4632      	mov	r2, r6
    e462:	4649      	mov	r1, r9
    e464:	4640      	mov	r0, r8
    e466:	47d0      	blx	sl
    e468:	3001      	adds	r0, #1
    e46a:	d09b      	beq.n	e3a4 <_printf_i+0x164>
    e46c:	3501      	adds	r5, #1
    e46e:	68e3      	ldr	r3, [r4, #12]
    e470:	9903      	ldr	r1, [sp, #12]
    e472:	1a5b      	subs	r3, r3, r1
    e474:	42ab      	cmp	r3, r5
    e476:	dcf2      	bgt.n	e45e <_printf_i+0x21e>
    e478:	e7eb      	b.n	e452 <_printf_i+0x212>
    e47a:	2500      	movs	r5, #0
    e47c:	f104 0619 	add.w	r6, r4, #25
    e480:	e7f5      	b.n	e46e <_printf_i+0x22e>
    e482:	bf00      	nop
    e484:	000134a4 	.word	0x000134a4
    e488:	000134b5 	.word	0x000134b5

0000e48c <__swbuf_r>:
    e48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e48e:	460e      	mov	r6, r1
    e490:	4614      	mov	r4, r2
    e492:	4605      	mov	r5, r0
    e494:	b118      	cbz	r0, e49e <__swbuf_r+0x12>
    e496:	6983      	ldr	r3, [r0, #24]
    e498:	b90b      	cbnz	r3, e49e <__swbuf_r+0x12>
    e49a:	f7ff f9e7 	bl	d86c <__sinit>
    e49e:	4b21      	ldr	r3, [pc, #132]	; (e524 <__swbuf_r+0x98>)
    e4a0:	429c      	cmp	r4, r3
    e4a2:	d12b      	bne.n	e4fc <__swbuf_r+0x70>
    e4a4:	686c      	ldr	r4, [r5, #4]
    e4a6:	69a3      	ldr	r3, [r4, #24]
    e4a8:	60a3      	str	r3, [r4, #8]
    e4aa:	89a3      	ldrh	r3, [r4, #12]
    e4ac:	071a      	lsls	r2, r3, #28
    e4ae:	d52f      	bpl.n	e510 <__swbuf_r+0x84>
    e4b0:	6923      	ldr	r3, [r4, #16]
    e4b2:	b36b      	cbz	r3, e510 <__swbuf_r+0x84>
    e4b4:	6923      	ldr	r3, [r4, #16]
    e4b6:	6820      	ldr	r0, [r4, #0]
    e4b8:	1ac0      	subs	r0, r0, r3
    e4ba:	6963      	ldr	r3, [r4, #20]
    e4bc:	b2f6      	uxtb	r6, r6
    e4be:	4283      	cmp	r3, r0
    e4c0:	4637      	mov	r7, r6
    e4c2:	dc04      	bgt.n	e4ce <__swbuf_r+0x42>
    e4c4:	4621      	mov	r1, r4
    e4c6:	4628      	mov	r0, r5
    e4c8:	f000 f962 	bl	e790 <_fflush_r>
    e4cc:	bb30      	cbnz	r0, e51c <__swbuf_r+0x90>
    e4ce:	68a3      	ldr	r3, [r4, #8]
    e4d0:	3b01      	subs	r3, #1
    e4d2:	60a3      	str	r3, [r4, #8]
    e4d4:	6823      	ldr	r3, [r4, #0]
    e4d6:	1c5a      	adds	r2, r3, #1
    e4d8:	6022      	str	r2, [r4, #0]
    e4da:	701e      	strb	r6, [r3, #0]
    e4dc:	6963      	ldr	r3, [r4, #20]
    e4de:	3001      	adds	r0, #1
    e4e0:	4283      	cmp	r3, r0
    e4e2:	d004      	beq.n	e4ee <__swbuf_r+0x62>
    e4e4:	89a3      	ldrh	r3, [r4, #12]
    e4e6:	07db      	lsls	r3, r3, #31
    e4e8:	d506      	bpl.n	e4f8 <__swbuf_r+0x6c>
    e4ea:	2e0a      	cmp	r6, #10
    e4ec:	d104      	bne.n	e4f8 <__swbuf_r+0x6c>
    e4ee:	4621      	mov	r1, r4
    e4f0:	4628      	mov	r0, r5
    e4f2:	f000 f94d 	bl	e790 <_fflush_r>
    e4f6:	b988      	cbnz	r0, e51c <__swbuf_r+0x90>
    e4f8:	4638      	mov	r0, r7
    e4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e4fc:	4b0a      	ldr	r3, [pc, #40]	; (e528 <__swbuf_r+0x9c>)
    e4fe:	429c      	cmp	r4, r3
    e500:	d101      	bne.n	e506 <__swbuf_r+0x7a>
    e502:	68ac      	ldr	r4, [r5, #8]
    e504:	e7cf      	b.n	e4a6 <__swbuf_r+0x1a>
    e506:	4b09      	ldr	r3, [pc, #36]	; (e52c <__swbuf_r+0xa0>)
    e508:	429c      	cmp	r4, r3
    e50a:	bf08      	it	eq
    e50c:	68ec      	ldreq	r4, [r5, #12]
    e50e:	e7ca      	b.n	e4a6 <__swbuf_r+0x1a>
    e510:	4621      	mov	r1, r4
    e512:	4628      	mov	r0, r5
    e514:	f000 f81e 	bl	e554 <__swsetup_r>
    e518:	2800      	cmp	r0, #0
    e51a:	d0cb      	beq.n	e4b4 <__swbuf_r+0x28>
    e51c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    e520:	e7ea      	b.n	e4f8 <__swbuf_r+0x6c>
    e522:	bf00      	nop
    e524:	00013214 	.word	0x00013214
    e528:	00013234 	.word	0x00013234
    e52c:	000131f4 	.word	0x000131f4

0000e530 <_write_r>:
    e530:	b538      	push	{r3, r4, r5, lr}
    e532:	4d07      	ldr	r5, [pc, #28]	; (e550 <_write_r+0x20>)
    e534:	4604      	mov	r4, r0
    e536:	4608      	mov	r0, r1
    e538:	4611      	mov	r1, r2
    e53a:	2200      	movs	r2, #0
    e53c:	602a      	str	r2, [r5, #0]
    e53e:	461a      	mov	r2, r3
    e540:	f000 ff51 	bl	f3e6 <_write>
    e544:	1c43      	adds	r3, r0, #1
    e546:	d102      	bne.n	e54e <_write_r+0x1e>
    e548:	682b      	ldr	r3, [r5, #0]
    e54a:	b103      	cbz	r3, e54e <_write_r+0x1e>
    e54c:	6023      	str	r3, [r4, #0]
    e54e:	bd38      	pop	{r3, r4, r5, pc}
    e550:	2000d540 	.word	0x2000d540

0000e554 <__swsetup_r>:
    e554:	4b32      	ldr	r3, [pc, #200]	; (e620 <__swsetup_r+0xcc>)
    e556:	b570      	push	{r4, r5, r6, lr}
    e558:	681d      	ldr	r5, [r3, #0]
    e55a:	4606      	mov	r6, r0
    e55c:	460c      	mov	r4, r1
    e55e:	b125      	cbz	r5, e56a <__swsetup_r+0x16>
    e560:	69ab      	ldr	r3, [r5, #24]
    e562:	b913      	cbnz	r3, e56a <__swsetup_r+0x16>
    e564:	4628      	mov	r0, r5
    e566:	f7ff f981 	bl	d86c <__sinit>
    e56a:	4b2e      	ldr	r3, [pc, #184]	; (e624 <__swsetup_r+0xd0>)
    e56c:	429c      	cmp	r4, r3
    e56e:	d10f      	bne.n	e590 <__swsetup_r+0x3c>
    e570:	686c      	ldr	r4, [r5, #4]
    e572:	89a3      	ldrh	r3, [r4, #12]
    e574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    e578:	0719      	lsls	r1, r3, #28
    e57a:	d42c      	bmi.n	e5d6 <__swsetup_r+0x82>
    e57c:	06dd      	lsls	r5, r3, #27
    e57e:	d411      	bmi.n	e5a4 <__swsetup_r+0x50>
    e580:	2309      	movs	r3, #9
    e582:	6033      	str	r3, [r6, #0]
    e584:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    e588:	81a3      	strh	r3, [r4, #12]
    e58a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e58e:	e03e      	b.n	e60e <__swsetup_r+0xba>
    e590:	4b25      	ldr	r3, [pc, #148]	; (e628 <__swsetup_r+0xd4>)
    e592:	429c      	cmp	r4, r3
    e594:	d101      	bne.n	e59a <__swsetup_r+0x46>
    e596:	68ac      	ldr	r4, [r5, #8]
    e598:	e7eb      	b.n	e572 <__swsetup_r+0x1e>
    e59a:	4b24      	ldr	r3, [pc, #144]	; (e62c <__swsetup_r+0xd8>)
    e59c:	429c      	cmp	r4, r3
    e59e:	bf08      	it	eq
    e5a0:	68ec      	ldreq	r4, [r5, #12]
    e5a2:	e7e6      	b.n	e572 <__swsetup_r+0x1e>
    e5a4:	0758      	lsls	r0, r3, #29
    e5a6:	d512      	bpl.n	e5ce <__swsetup_r+0x7a>
    e5a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e5aa:	b141      	cbz	r1, e5be <__swsetup_r+0x6a>
    e5ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
    e5b0:	4299      	cmp	r1, r3
    e5b2:	d002      	beq.n	e5ba <__swsetup_r+0x66>
    e5b4:	4630      	mov	r0, r6
    e5b6:	f7ff f821 	bl	d5fc <_free_r>
    e5ba:	2300      	movs	r3, #0
    e5bc:	6363      	str	r3, [r4, #52]	; 0x34
    e5be:	89a3      	ldrh	r3, [r4, #12]
    e5c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    e5c4:	81a3      	strh	r3, [r4, #12]
    e5c6:	2300      	movs	r3, #0
    e5c8:	6063      	str	r3, [r4, #4]
    e5ca:	6923      	ldr	r3, [r4, #16]
    e5cc:	6023      	str	r3, [r4, #0]
    e5ce:	89a3      	ldrh	r3, [r4, #12]
    e5d0:	f043 0308 	orr.w	r3, r3, #8
    e5d4:	81a3      	strh	r3, [r4, #12]
    e5d6:	6923      	ldr	r3, [r4, #16]
    e5d8:	b94b      	cbnz	r3, e5ee <__swsetup_r+0x9a>
    e5da:	89a3      	ldrh	r3, [r4, #12]
    e5dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
    e5e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    e5e4:	d003      	beq.n	e5ee <__swsetup_r+0x9a>
    e5e6:	4621      	mov	r1, r4
    e5e8:	4630      	mov	r0, r6
    e5ea:	f000 f931 	bl	e850 <__smakebuf_r>
    e5ee:	89a0      	ldrh	r0, [r4, #12]
    e5f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    e5f4:	f010 0301 	ands.w	r3, r0, #1
    e5f8:	d00a      	beq.n	e610 <__swsetup_r+0xbc>
    e5fa:	2300      	movs	r3, #0
    e5fc:	60a3      	str	r3, [r4, #8]
    e5fe:	6963      	ldr	r3, [r4, #20]
    e600:	425b      	negs	r3, r3
    e602:	61a3      	str	r3, [r4, #24]
    e604:	6923      	ldr	r3, [r4, #16]
    e606:	b943      	cbnz	r3, e61a <__swsetup_r+0xc6>
    e608:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    e60c:	d1ba      	bne.n	e584 <__swsetup_r+0x30>
    e60e:	bd70      	pop	{r4, r5, r6, pc}
    e610:	0781      	lsls	r1, r0, #30
    e612:	bf58      	it	pl
    e614:	6963      	ldrpl	r3, [r4, #20]
    e616:	60a3      	str	r3, [r4, #8]
    e618:	e7f4      	b.n	e604 <__swsetup_r+0xb0>
    e61a:	2000      	movs	r0, #0
    e61c:	e7f7      	b.n	e60e <__swsetup_r+0xba>
    e61e:	bf00      	nop
    e620:	20004104 	.word	0x20004104
    e624:	00013214 	.word	0x00013214
    e628:	00013234 	.word	0x00013234
    e62c:	000131f4 	.word	0x000131f4

0000e630 <__assert_func>:
    e630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    e632:	4614      	mov	r4, r2
    e634:	461a      	mov	r2, r3
    e636:	4b09      	ldr	r3, [pc, #36]	; (e65c <__assert_func+0x2c>)
    e638:	681b      	ldr	r3, [r3, #0]
    e63a:	4605      	mov	r5, r0
    e63c:	68d8      	ldr	r0, [r3, #12]
    e63e:	b14c      	cbz	r4, e654 <__assert_func+0x24>
    e640:	4b07      	ldr	r3, [pc, #28]	; (e660 <__assert_func+0x30>)
    e642:	9100      	str	r1, [sp, #0]
    e644:	e9cd 3401 	strd	r3, r4, [sp, #4]
    e648:	4906      	ldr	r1, [pc, #24]	; (e664 <__assert_func+0x34>)
    e64a:	462b      	mov	r3, r5
    e64c:	f000 f8dc 	bl	e808 <fiprintf>
    e650:	f002 fad6 	bl	10c00 <abort>
    e654:	4b04      	ldr	r3, [pc, #16]	; (e668 <__assert_func+0x38>)
    e656:	461c      	mov	r4, r3
    e658:	e7f3      	b.n	e642 <__assert_func+0x12>
    e65a:	bf00      	nop
    e65c:	20004104 	.word	0x20004104
    e660:	000134c6 	.word	0x000134c6
    e664:	000134d3 	.word	0x000134d3
    e668:	00013501 	.word	0x00013501

0000e66c <_close_r>:
    e66c:	b538      	push	{r3, r4, r5, lr}
    e66e:	4d06      	ldr	r5, [pc, #24]	; (e688 <_close_r+0x1c>)
    e670:	2300      	movs	r3, #0
    e672:	4604      	mov	r4, r0
    e674:	4608      	mov	r0, r1
    e676:	602b      	str	r3, [r5, #0]
    e678:	f000 febb 	bl	f3f2 <_close>
    e67c:	1c43      	adds	r3, r0, #1
    e67e:	d102      	bne.n	e686 <_close_r+0x1a>
    e680:	682b      	ldr	r3, [r5, #0]
    e682:	b103      	cbz	r3, e686 <_close_r+0x1a>
    e684:	6023      	str	r3, [r4, #0]
    e686:	bd38      	pop	{r3, r4, r5, pc}
    e688:	2000d540 	.word	0x2000d540

0000e68c <__sflush_r>:
    e68c:	898a      	ldrh	r2, [r1, #12]
    e68e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e690:	4605      	mov	r5, r0
    e692:	0710      	lsls	r0, r2, #28
    e694:	460c      	mov	r4, r1
    e696:	d457      	bmi.n	e748 <__sflush_r+0xbc>
    e698:	684b      	ldr	r3, [r1, #4]
    e69a:	2b00      	cmp	r3, #0
    e69c:	dc04      	bgt.n	e6a8 <__sflush_r+0x1c>
    e69e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    e6a0:	2b00      	cmp	r3, #0
    e6a2:	dc01      	bgt.n	e6a8 <__sflush_r+0x1c>
    e6a4:	2000      	movs	r0, #0
    e6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e6a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    e6aa:	2e00      	cmp	r6, #0
    e6ac:	d0fa      	beq.n	e6a4 <__sflush_r+0x18>
    e6ae:	2300      	movs	r3, #0
    e6b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    e6b4:	682f      	ldr	r7, [r5, #0]
    e6b6:	602b      	str	r3, [r5, #0]
    e6b8:	d032      	beq.n	e720 <__sflush_r+0x94>
    e6ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
    e6bc:	89a3      	ldrh	r3, [r4, #12]
    e6be:	075a      	lsls	r2, r3, #29
    e6c0:	d505      	bpl.n	e6ce <__sflush_r+0x42>
    e6c2:	6863      	ldr	r3, [r4, #4]
    e6c4:	1ac0      	subs	r0, r0, r3
    e6c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e6c8:	b10b      	cbz	r3, e6ce <__sflush_r+0x42>
    e6ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
    e6cc:	1ac0      	subs	r0, r0, r3
    e6ce:	2300      	movs	r3, #0
    e6d0:	4602      	mov	r2, r0
    e6d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    e6d4:	6a21      	ldr	r1, [r4, #32]
    e6d6:	4628      	mov	r0, r5
    e6d8:	47b0      	blx	r6
    e6da:	1c43      	adds	r3, r0, #1
    e6dc:	89a3      	ldrh	r3, [r4, #12]
    e6de:	d106      	bne.n	e6ee <__sflush_r+0x62>
    e6e0:	6829      	ldr	r1, [r5, #0]
    e6e2:	291d      	cmp	r1, #29
    e6e4:	d82c      	bhi.n	e740 <__sflush_r+0xb4>
    e6e6:	4a29      	ldr	r2, [pc, #164]	; (e78c <__sflush_r+0x100>)
    e6e8:	40ca      	lsrs	r2, r1
    e6ea:	07d6      	lsls	r6, r2, #31
    e6ec:	d528      	bpl.n	e740 <__sflush_r+0xb4>
    e6ee:	2200      	movs	r2, #0
    e6f0:	6062      	str	r2, [r4, #4]
    e6f2:	04d9      	lsls	r1, r3, #19
    e6f4:	6922      	ldr	r2, [r4, #16]
    e6f6:	6022      	str	r2, [r4, #0]
    e6f8:	d504      	bpl.n	e704 <__sflush_r+0x78>
    e6fa:	1c42      	adds	r2, r0, #1
    e6fc:	d101      	bne.n	e702 <__sflush_r+0x76>
    e6fe:	682b      	ldr	r3, [r5, #0]
    e700:	b903      	cbnz	r3, e704 <__sflush_r+0x78>
    e702:	6560      	str	r0, [r4, #84]	; 0x54
    e704:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e706:	602f      	str	r7, [r5, #0]
    e708:	2900      	cmp	r1, #0
    e70a:	d0cb      	beq.n	e6a4 <__sflush_r+0x18>
    e70c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    e710:	4299      	cmp	r1, r3
    e712:	d002      	beq.n	e71a <__sflush_r+0x8e>
    e714:	4628      	mov	r0, r5
    e716:	f7fe ff71 	bl	d5fc <_free_r>
    e71a:	2000      	movs	r0, #0
    e71c:	6360      	str	r0, [r4, #52]	; 0x34
    e71e:	e7c2      	b.n	e6a6 <__sflush_r+0x1a>
    e720:	6a21      	ldr	r1, [r4, #32]
    e722:	2301      	movs	r3, #1
    e724:	4628      	mov	r0, r5
    e726:	47b0      	blx	r6
    e728:	1c41      	adds	r1, r0, #1
    e72a:	d1c7      	bne.n	e6bc <__sflush_r+0x30>
    e72c:	682b      	ldr	r3, [r5, #0]
    e72e:	2b00      	cmp	r3, #0
    e730:	d0c4      	beq.n	e6bc <__sflush_r+0x30>
    e732:	2b1d      	cmp	r3, #29
    e734:	d001      	beq.n	e73a <__sflush_r+0xae>
    e736:	2b16      	cmp	r3, #22
    e738:	d101      	bne.n	e73e <__sflush_r+0xb2>
    e73a:	602f      	str	r7, [r5, #0]
    e73c:	e7b2      	b.n	e6a4 <__sflush_r+0x18>
    e73e:	89a3      	ldrh	r3, [r4, #12]
    e740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e744:	81a3      	strh	r3, [r4, #12]
    e746:	e7ae      	b.n	e6a6 <__sflush_r+0x1a>
    e748:	690f      	ldr	r7, [r1, #16]
    e74a:	2f00      	cmp	r7, #0
    e74c:	d0aa      	beq.n	e6a4 <__sflush_r+0x18>
    e74e:	0793      	lsls	r3, r2, #30
    e750:	680e      	ldr	r6, [r1, #0]
    e752:	bf08      	it	eq
    e754:	694b      	ldreq	r3, [r1, #20]
    e756:	600f      	str	r7, [r1, #0]
    e758:	bf18      	it	ne
    e75a:	2300      	movne	r3, #0
    e75c:	1bf6      	subs	r6, r6, r7
    e75e:	608b      	str	r3, [r1, #8]
    e760:	2e00      	cmp	r6, #0
    e762:	dd9f      	ble.n	e6a4 <__sflush_r+0x18>
    e764:	6a21      	ldr	r1, [r4, #32]
    e766:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
    e76a:	4633      	mov	r3, r6
    e76c:	463a      	mov	r2, r7
    e76e:	4628      	mov	r0, r5
    e770:	47e0      	blx	ip
    e772:	2800      	cmp	r0, #0
    e774:	dc06      	bgt.n	e784 <__sflush_r+0xf8>
    e776:	89a3      	ldrh	r3, [r4, #12]
    e778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e77c:	81a3      	strh	r3, [r4, #12]
    e77e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e782:	e790      	b.n	e6a6 <__sflush_r+0x1a>
    e784:	4407      	add	r7, r0
    e786:	1a36      	subs	r6, r6, r0
    e788:	e7ea      	b.n	e760 <__sflush_r+0xd4>
    e78a:	bf00      	nop
    e78c:	20400001 	.word	0x20400001

0000e790 <_fflush_r>:
    e790:	b538      	push	{r3, r4, r5, lr}
    e792:	690b      	ldr	r3, [r1, #16]
    e794:	4605      	mov	r5, r0
    e796:	460c      	mov	r4, r1
    e798:	b913      	cbnz	r3, e7a0 <_fflush_r+0x10>
    e79a:	2500      	movs	r5, #0
    e79c:	4628      	mov	r0, r5
    e79e:	bd38      	pop	{r3, r4, r5, pc}
    e7a0:	b118      	cbz	r0, e7aa <_fflush_r+0x1a>
    e7a2:	6983      	ldr	r3, [r0, #24]
    e7a4:	b90b      	cbnz	r3, e7aa <_fflush_r+0x1a>
    e7a6:	f7ff f861 	bl	d86c <__sinit>
    e7aa:	4b14      	ldr	r3, [pc, #80]	; (e7fc <_fflush_r+0x6c>)
    e7ac:	429c      	cmp	r4, r3
    e7ae:	d11b      	bne.n	e7e8 <_fflush_r+0x58>
    e7b0:	686c      	ldr	r4, [r5, #4]
    e7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e7b6:	2b00      	cmp	r3, #0
    e7b8:	d0ef      	beq.n	e79a <_fflush_r+0xa>
    e7ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e7bc:	07d0      	lsls	r0, r2, #31
    e7be:	d404      	bmi.n	e7ca <_fflush_r+0x3a>
    e7c0:	0599      	lsls	r1, r3, #22
    e7c2:	d402      	bmi.n	e7ca <_fflush_r+0x3a>
    e7c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e7c6:	f7f8 fa29 	bl	6c1c <__retarget_lock_acquire_recursive>
    e7ca:	4628      	mov	r0, r5
    e7cc:	4621      	mov	r1, r4
    e7ce:	f7ff ff5d 	bl	e68c <__sflush_r>
    e7d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e7d4:	07da      	lsls	r2, r3, #31
    e7d6:	4605      	mov	r5, r0
    e7d8:	d4e0      	bmi.n	e79c <_fflush_r+0xc>
    e7da:	89a3      	ldrh	r3, [r4, #12]
    e7dc:	059b      	lsls	r3, r3, #22
    e7de:	d4dd      	bmi.n	e79c <_fflush_r+0xc>
    e7e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e7e2:	f7f8 fa3b 	bl	6c5c <__retarget_lock_release_recursive>
    e7e6:	e7d9      	b.n	e79c <_fflush_r+0xc>
    e7e8:	4b05      	ldr	r3, [pc, #20]	; (e800 <_fflush_r+0x70>)
    e7ea:	429c      	cmp	r4, r3
    e7ec:	d101      	bne.n	e7f2 <_fflush_r+0x62>
    e7ee:	68ac      	ldr	r4, [r5, #8]
    e7f0:	e7df      	b.n	e7b2 <_fflush_r+0x22>
    e7f2:	4b04      	ldr	r3, [pc, #16]	; (e804 <_fflush_r+0x74>)
    e7f4:	429c      	cmp	r4, r3
    e7f6:	bf08      	it	eq
    e7f8:	68ec      	ldreq	r4, [r5, #12]
    e7fa:	e7da      	b.n	e7b2 <_fflush_r+0x22>
    e7fc:	00013214 	.word	0x00013214
    e800:	00013234 	.word	0x00013234
    e804:	000131f4 	.word	0x000131f4

0000e808 <fiprintf>:
    e808:	b40e      	push	{r1, r2, r3}
    e80a:	b503      	push	{r0, r1, lr}
    e80c:	4601      	mov	r1, r0
    e80e:	ab03      	add	r3, sp, #12
    e810:	4805      	ldr	r0, [pc, #20]	; (e828 <fiprintf+0x20>)
    e812:	f853 2b04 	ldr.w	r2, [r3], #4
    e816:	6800      	ldr	r0, [r0, #0]
    e818:	9301      	str	r3, [sp, #4]
    e81a:	f7ff fbe1 	bl	dfe0 <_vfiprintf_r>
    e81e:	b002      	add	sp, #8
    e820:	f85d eb04 	ldr.w	lr, [sp], #4
    e824:	b003      	add	sp, #12
    e826:	4770      	bx	lr
    e828:	20004104 	.word	0x20004104

0000e82c <_lseek_r>:
    e82c:	b538      	push	{r3, r4, r5, lr}
    e82e:	4d07      	ldr	r5, [pc, #28]	; (e84c <_lseek_r+0x20>)
    e830:	4604      	mov	r4, r0
    e832:	4608      	mov	r0, r1
    e834:	4611      	mov	r1, r2
    e836:	2200      	movs	r2, #0
    e838:	602a      	str	r2, [r5, #0]
    e83a:	461a      	mov	r2, r3
    e83c:	f000 fddc 	bl	f3f8 <_lseek>
    e840:	1c43      	adds	r3, r0, #1
    e842:	d102      	bne.n	e84a <_lseek_r+0x1e>
    e844:	682b      	ldr	r3, [r5, #0]
    e846:	b103      	cbz	r3, e84a <_lseek_r+0x1e>
    e848:	6023      	str	r3, [r4, #0]
    e84a:	bd38      	pop	{r3, r4, r5, pc}
    e84c:	2000d540 	.word	0x2000d540

0000e850 <__smakebuf_r>:
    e850:	898b      	ldrh	r3, [r1, #12]
    e852:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e854:	079d      	lsls	r5, r3, #30
    e856:	4606      	mov	r6, r0
    e858:	460c      	mov	r4, r1
    e85a:	d507      	bpl.n	e86c <__smakebuf_r+0x1c>
    e85c:	f104 0347 	add.w	r3, r4, #71	; 0x47
    e860:	6023      	str	r3, [r4, #0]
    e862:	6123      	str	r3, [r4, #16]
    e864:	2301      	movs	r3, #1
    e866:	6163      	str	r3, [r4, #20]
    e868:	b002      	add	sp, #8
    e86a:	bd70      	pop	{r4, r5, r6, pc}
    e86c:	ab01      	add	r3, sp, #4
    e86e:	466a      	mov	r2, sp
    e870:	f002 f9a1 	bl	10bb6 <__swhatbuf_r>
    e874:	9900      	ldr	r1, [sp, #0]
    e876:	4605      	mov	r5, r0
    e878:	4630      	mov	r0, r6
    e87a:	f7fe ff09 	bl	d690 <_malloc_r>
    e87e:	b948      	cbnz	r0, e894 <__smakebuf_r+0x44>
    e880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e884:	059a      	lsls	r2, r3, #22
    e886:	d4ef      	bmi.n	e868 <__smakebuf_r+0x18>
    e888:	f023 0303 	bic.w	r3, r3, #3
    e88c:	f043 0302 	orr.w	r3, r3, #2
    e890:	81a3      	strh	r3, [r4, #12]
    e892:	e7e3      	b.n	e85c <__smakebuf_r+0xc>
    e894:	4b0d      	ldr	r3, [pc, #52]	; (e8cc <__smakebuf_r+0x7c>)
    e896:	62b3      	str	r3, [r6, #40]	; 0x28
    e898:	89a3      	ldrh	r3, [r4, #12]
    e89a:	6020      	str	r0, [r4, #0]
    e89c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e8a0:	81a3      	strh	r3, [r4, #12]
    e8a2:	9b00      	ldr	r3, [sp, #0]
    e8a4:	6163      	str	r3, [r4, #20]
    e8a6:	9b01      	ldr	r3, [sp, #4]
    e8a8:	6120      	str	r0, [r4, #16]
    e8aa:	b15b      	cbz	r3, e8c4 <__smakebuf_r+0x74>
    e8ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    e8b0:	4630      	mov	r0, r6
    e8b2:	f000 f831 	bl	e918 <_isatty_r>
    e8b6:	b128      	cbz	r0, e8c4 <__smakebuf_r+0x74>
    e8b8:	89a3      	ldrh	r3, [r4, #12]
    e8ba:	f023 0303 	bic.w	r3, r3, #3
    e8be:	f043 0301 	orr.w	r3, r3, #1
    e8c2:	81a3      	strh	r3, [r4, #12]
    e8c4:	89a0      	ldrh	r0, [r4, #12]
    e8c6:	4305      	orrs	r5, r0
    e8c8:	81a5      	strh	r5, [r4, #12]
    e8ca:	e7cd      	b.n	e868 <__smakebuf_r+0x18>
    e8cc:	0000d831 	.word	0x0000d831

0000e8d0 <_read_r>:
    e8d0:	b538      	push	{r3, r4, r5, lr}
    e8d2:	4d07      	ldr	r5, [pc, #28]	; (e8f0 <_read_r+0x20>)
    e8d4:	4604      	mov	r4, r0
    e8d6:	4608      	mov	r0, r1
    e8d8:	4611      	mov	r1, r2
    e8da:	2200      	movs	r2, #0
    e8dc:	602a      	str	r2, [r5, #0]
    e8de:	461a      	mov	r2, r3
    e8e0:	f000 fd7b 	bl	f3da <_read>
    e8e4:	1c43      	adds	r3, r0, #1
    e8e6:	d102      	bne.n	e8ee <_read_r+0x1e>
    e8e8:	682b      	ldr	r3, [r5, #0]
    e8ea:	b103      	cbz	r3, e8ee <_read_r+0x1e>
    e8ec:	6023      	str	r3, [r4, #0]
    e8ee:	bd38      	pop	{r3, r4, r5, pc}
    e8f0:	2000d540 	.word	0x2000d540

0000e8f4 <_fstat_r>:
    e8f4:	b538      	push	{r3, r4, r5, lr}
    e8f6:	4d07      	ldr	r5, [pc, #28]	; (e914 <_fstat_r+0x20>)
    e8f8:	2300      	movs	r3, #0
    e8fa:	4604      	mov	r4, r0
    e8fc:	4608      	mov	r0, r1
    e8fe:	4611      	mov	r1, r2
    e900:	602b      	str	r3, [r5, #0]
    e902:	f000 fd84 	bl	f40e <_fstat>
    e906:	1c43      	adds	r3, r0, #1
    e908:	d102      	bne.n	e910 <_fstat_r+0x1c>
    e90a:	682b      	ldr	r3, [r5, #0]
    e90c:	b103      	cbz	r3, e910 <_fstat_r+0x1c>
    e90e:	6023      	str	r3, [r4, #0]
    e910:	bd38      	pop	{r3, r4, r5, pc}
    e912:	bf00      	nop
    e914:	2000d540 	.word	0x2000d540

0000e918 <_isatty_r>:
    e918:	b538      	push	{r3, r4, r5, lr}
    e91a:	4d06      	ldr	r5, [pc, #24]	; (e934 <_isatty_r+0x1c>)
    e91c:	2300      	movs	r3, #0
    e91e:	4604      	mov	r4, r0
    e920:	4608      	mov	r0, r1
    e922:	602b      	str	r3, [r5, #0]
    e924:	f000 fd6a 	bl	f3fc <_isatty>
    e928:	1c43      	adds	r3, r0, #1
    e92a:	d102      	bne.n	e932 <_isatty_r+0x1a>
    e92c:	682b      	ldr	r3, [r5, #0]
    e92e:	b103      	cbz	r3, e932 <_isatty_r+0x1a>
    e930:	6023      	str	r3, [r4, #0]
    e932:	bd38      	pop	{r3, r4, r5, pc}
    e934:	2000d540 	.word	0x2000d540

0000e938 <raise>:
    e938:	4b02      	ldr	r3, [pc, #8]	; (e944 <raise+0xc>)
    e93a:	4601      	mov	r1, r0
    e93c:	6818      	ldr	r0, [r3, #0]
    e93e:	f002 b966 	b.w	10c0e <_raise_r>
    e942:	bf00      	nop
    e944:	20004104 	.word	0x20004104

0000e948 <_kill_r>:
    e948:	b538      	push	{r3, r4, r5, lr}
    e94a:	4d07      	ldr	r5, [pc, #28]	; (e968 <_kill_r+0x20>)
    e94c:	2300      	movs	r3, #0
    e94e:	4604      	mov	r4, r0
    e950:	4608      	mov	r0, r1
    e952:	4611      	mov	r1, r2
    e954:	602b      	str	r3, [r5, #0]
    e956:	f000 fd56 	bl	f406 <_kill>
    e95a:	1c43      	adds	r3, r0, #1
    e95c:	d102      	bne.n	e964 <_kill_r+0x1c>
    e95e:	682b      	ldr	r3, [r5, #0]
    e960:	b103      	cbz	r3, e964 <_kill_r+0x1c>
    e962:	6023      	str	r3, [r4, #0]
    e964:	bd38      	pop	{r3, r4, r5, pc}
    e966:	bf00      	nop
    e968:	2000d540 	.word	0x2000d540

0000e96c <nrf_cc3xx_platform_init_no_rng>:
    e96c:	b510      	push	{r4, lr}
    e96e:	4c0a      	ldr	r4, [pc, #40]	; (e998 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    e970:	6823      	ldr	r3, [r4, #0]
    e972:	b11b      	cbz	r3, e97c <nrf_cc3xx_platform_init_no_rng+0x10>
    e974:	2301      	movs	r3, #1
    e976:	6023      	str	r3, [r4, #0]
    e978:	2000      	movs	r0, #0
    e97a:	bd10      	pop	{r4, pc}
    e97c:	f000 f8ce 	bl	eb1c <CC_LibInitNoRng>
    e980:	2800      	cmp	r0, #0
    e982:	d0f7      	beq.n	e974 <nrf_cc3xx_platform_init_no_rng+0x8>
    e984:	3801      	subs	r0, #1
    e986:	2806      	cmp	r0, #6
    e988:	d803      	bhi.n	e992 <nrf_cc3xx_platform_init_no_rng+0x26>
    e98a:	4b04      	ldr	r3, [pc, #16]	; (e99c <nrf_cc3xx_platform_init_no_rng+0x30>)
    e98c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    e990:	bd10      	pop	{r4, pc}
    e992:	4803      	ldr	r0, [pc, #12]	; (e9a0 <nrf_cc3xx_platform_init_no_rng+0x34>)
    e994:	bd10      	pop	{r4, pc}
    e996:	bf00      	nop
    e998:	2000d544 	.word	0x2000d544
    e99c:	00013260 	.word	0x00013260
    e9a0:	ffff8ffe 	.word	0xffff8ffe

0000e9a4 <nrf_cc3xx_platform_abort>:
    e9a4:	f3bf 8f4f 	dsb	sy
    e9a8:	4905      	ldr	r1, [pc, #20]	; (e9c0 <nrf_cc3xx_platform_abort+0x1c>)
    e9aa:	4b06      	ldr	r3, [pc, #24]	; (e9c4 <nrf_cc3xx_platform_abort+0x20>)
    e9ac:	68ca      	ldr	r2, [r1, #12]
    e9ae:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e9b2:	4313      	orrs	r3, r2
    e9b4:	60cb      	str	r3, [r1, #12]
    e9b6:	f3bf 8f4f 	dsb	sy
    e9ba:	bf00      	nop
    e9bc:	e7fd      	b.n	e9ba <nrf_cc3xx_platform_abort+0x16>
    e9be:	bf00      	nop
    e9c0:	e000ed00 	.word	0xe000ed00
    e9c4:	05fa0004 	.word	0x05fa0004

0000e9c8 <CC_PalAbort>:
    e9c8:	b410      	push	{r4}
    e9ca:	4b09      	ldr	r3, [pc, #36]	; (e9f0 <CC_PalAbort+0x28>)
    e9cc:	4909      	ldr	r1, [pc, #36]	; (e9f4 <CC_PalAbort+0x2c>)
    e9ce:	4c0a      	ldr	r4, [pc, #40]	; (e9f8 <CC_PalAbort+0x30>)
    e9d0:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    e9d4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    e9d8:	6849      	ldr	r1, [r1, #4]
    e9da:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    e9de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    e9e2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    e9e6:	2300      	movs	r3, #0
    e9e8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    e9ec:	bc10      	pop	{r4}
    e9ee:	4708      	bx	r1
    e9f0:	5002b000 	.word	0x5002b000
    e9f4:	20004168 	.word	0x20004168
    e9f8:	5002a000 	.word	0x5002a000

0000e9fc <nrf_cc3xx_platform_set_abort>:
    e9fc:	e9d0 1200 	ldrd	r1, r2, [r0]
    ea00:	4b01      	ldr	r3, [pc, #4]	; (ea08 <nrf_cc3xx_platform_set_abort+0xc>)
    ea02:	e9c3 1200 	strd	r1, r2, [r3]
    ea06:	4770      	bx	lr
    ea08:	20004168 	.word	0x20004168

0000ea0c <mutex_free>:
    ea0c:	b510      	push	{r4, lr}
    ea0e:	4604      	mov	r4, r0
    ea10:	b130      	cbz	r0, ea20 <mutex_free+0x14>
    ea12:	6863      	ldr	r3, [r4, #4]
    ea14:	06db      	lsls	r3, r3, #27
    ea16:	d502      	bpl.n	ea1e <mutex_free+0x12>
    ea18:	2300      	movs	r3, #0
    ea1a:	6023      	str	r3, [r4, #0]
    ea1c:	6063      	str	r3, [r4, #4]
    ea1e:	bd10      	pop	{r4, pc}
    ea20:	4b02      	ldr	r3, [pc, #8]	; (ea2c <mutex_free+0x20>)
    ea22:	4803      	ldr	r0, [pc, #12]	; (ea30 <mutex_free+0x24>)
    ea24:	685b      	ldr	r3, [r3, #4]
    ea26:	4798      	blx	r3
    ea28:	e7f3      	b.n	ea12 <mutex_free+0x6>
    ea2a:	bf00      	nop
    ea2c:	20004168 	.word	0x20004168
    ea30:	0001327c 	.word	0x0001327c

0000ea34 <mutex_lock>:
    ea34:	b1b0      	cbz	r0, ea64 <mutex_lock+0x30>
    ea36:	6843      	ldr	r3, [r0, #4]
    ea38:	b193      	cbz	r3, ea60 <mutex_lock+0x2c>
    ea3a:	06db      	lsls	r3, r3, #27
    ea3c:	d50e      	bpl.n	ea5c <mutex_lock+0x28>
    ea3e:	2301      	movs	r3, #1
    ea40:	e850 2f00 	ldrex	r2, [r0]
    ea44:	4619      	mov	r1, r3
    ea46:	e840 1c00 	strex	ip, r1, [r0]
    ea4a:	f09c 0f00 	teq	ip, #0
    ea4e:	d1f7      	bne.n	ea40 <mutex_lock+0xc>
    ea50:	2a01      	cmp	r2, #1
    ea52:	d0f5      	beq.n	ea40 <mutex_lock+0xc>
    ea54:	f3bf 8f5f 	dmb	sy
    ea58:	2000      	movs	r0, #0
    ea5a:	4770      	bx	lr
    ea5c:	4803      	ldr	r0, [pc, #12]	; (ea6c <mutex_lock+0x38>)
    ea5e:	4770      	bx	lr
    ea60:	4803      	ldr	r0, [pc, #12]	; (ea70 <mutex_lock+0x3c>)
    ea62:	4770      	bx	lr
    ea64:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    ea68:	4770      	bx	lr
    ea6a:	bf00      	nop
    ea6c:	ffff8fe9 	.word	0xffff8fe9
    ea70:	ffff8fea 	.word	0xffff8fea

0000ea74 <mutex_unlock>:
    ea74:	b168      	cbz	r0, ea92 <mutex_unlock+0x1e>
    ea76:	6843      	ldr	r3, [r0, #4]
    ea78:	b13b      	cbz	r3, ea8a <mutex_unlock+0x16>
    ea7a:	06db      	lsls	r3, r3, #27
    ea7c:	d507      	bpl.n	ea8e <mutex_unlock+0x1a>
    ea7e:	f3bf 8f5f 	dmb	sy
    ea82:	2300      	movs	r3, #0
    ea84:	6003      	str	r3, [r0, #0]
    ea86:	4618      	mov	r0, r3
    ea88:	4770      	bx	lr
    ea8a:	4803      	ldr	r0, [pc, #12]	; (ea98 <mutex_unlock+0x24>)
    ea8c:	4770      	bx	lr
    ea8e:	4803      	ldr	r0, [pc, #12]	; (ea9c <mutex_unlock+0x28>)
    ea90:	4770      	bx	lr
    ea92:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    ea96:	4770      	bx	lr
    ea98:	ffff8fea 	.word	0xffff8fea
    ea9c:	ffff8fe9 	.word	0xffff8fe9

0000eaa0 <mutex_init>:
    eaa0:	b510      	push	{r4, lr}
    eaa2:	4604      	mov	r4, r0
    eaa4:	b120      	cbz	r0, eab0 <mutex_init+0x10>
    eaa6:	2200      	movs	r2, #0
    eaa8:	2311      	movs	r3, #17
    eaaa:	6022      	str	r2, [r4, #0]
    eaac:	6063      	str	r3, [r4, #4]
    eaae:	bd10      	pop	{r4, pc}
    eab0:	4801      	ldr	r0, [pc, #4]	; (eab8 <mutex_init+0x18>)
    eab2:	f7ff ff89 	bl	e9c8 <CC_PalAbort>
    eab6:	e7f6      	b.n	eaa6 <mutex_init+0x6>
    eab8:	000132a4 	.word	0x000132a4

0000eabc <nrf_cc3xx_platform_set_mutexes>:
    eabc:	b570      	push	{r4, r5, r6, lr}
    eabe:	e9d0 2300 	ldrd	r2, r3, [r0]
    eac2:	4c13      	ldr	r4, [pc, #76]	; (eb10 <nrf_cc3xx_platform_set_mutexes+0x54>)
    eac4:	4d13      	ldr	r5, [pc, #76]	; (eb14 <nrf_cc3xx_platform_set_mutexes+0x58>)
    eac6:	6063      	str	r3, [r4, #4]
    eac8:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    eacc:	e9c4 3002 	strd	r3, r0, [r4, #8]
    ead0:	6022      	str	r2, [r4, #0]
    ead2:	4b11      	ldr	r3, [pc, #68]	; (eb18 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    ead4:	6808      	ldr	r0, [r1, #0]
    ead6:	6018      	str	r0, [r3, #0]
    ead8:	6848      	ldr	r0, [r1, #4]
    eada:	6058      	str	r0, [r3, #4]
    eadc:	6888      	ldr	r0, [r1, #8]
    eade:	6098      	str	r0, [r3, #8]
    eae0:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    eae4:	60d8      	str	r0, [r3, #12]
    eae6:	6119      	str	r1, [r3, #16]
    eae8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    eaec:	06db      	lsls	r3, r3, #27
    eaee:	d50d      	bpl.n	eb0c <nrf_cc3xx_platform_set_mutexes+0x50>
    eaf0:	2300      	movs	r3, #0
    eaf2:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    eaf6:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    eafa:	f505 708a 	add.w	r0, r5, #276	; 0x114
    eafe:	4790      	blx	r2
    eb00:	6823      	ldr	r3, [r4, #0]
    eb02:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    eb06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    eb0a:	4718      	bx	r3
    eb0c:	bd70      	pop	{r4, r5, r6, pc}
    eb0e:	bf00      	nop
    eb10:	20004178 	.word	0x20004178
    eb14:	2000d55c 	.word	0x2000d55c
    eb18:	20004188 	.word	0x20004188

0000eb1c <CC_LibInitNoRng>:
    eb1c:	b538      	push	{r3, r4, r5, lr}
    eb1e:	f000 f82f 	bl	eb80 <CC_HalInit>
    eb22:	b120      	cbz	r0, eb2e <CC_LibInitNoRng+0x12>
    eb24:	2403      	movs	r4, #3
    eb26:	f000 f863 	bl	ebf0 <CC_PalTerminate>
    eb2a:	4620      	mov	r0, r4
    eb2c:	bd38      	pop	{r3, r4, r5, pc}
    eb2e:	f000 f831 	bl	eb94 <CC_PalInit>
    eb32:	b998      	cbnz	r0, eb5c <CC_LibInitNoRng+0x40>
    eb34:	f000 f8ac 	bl	ec90 <CC_PalPowerSaveModeSelect>
    eb38:	b998      	cbnz	r0, eb62 <CC_LibInitNoRng+0x46>
    eb3a:	4d0f      	ldr	r5, [pc, #60]	; (eb78 <CC_LibInitNoRng+0x5c>)
    eb3c:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    eb40:	0e1b      	lsrs	r3, r3, #24
    eb42:	2bf0      	cmp	r3, #240	; 0xf0
    eb44:	d108      	bne.n	eb58 <CC_LibInitNoRng+0x3c>
    eb46:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    eb4a:	4b0c      	ldr	r3, [pc, #48]	; (eb7c <CC_LibInitNoRng+0x60>)
    eb4c:	429a      	cmp	r2, r3
    eb4e:	d00a      	beq.n	eb66 <CC_LibInitNoRng+0x4a>
    eb50:	2407      	movs	r4, #7
    eb52:	f000 f817 	bl	eb84 <CC_HalTerminate>
    eb56:	e7e6      	b.n	eb26 <CC_LibInitNoRng+0xa>
    eb58:	2406      	movs	r4, #6
    eb5a:	e7fa      	b.n	eb52 <CC_LibInitNoRng+0x36>
    eb5c:	2404      	movs	r4, #4
    eb5e:	4620      	mov	r0, r4
    eb60:	bd38      	pop	{r3, r4, r5, pc}
    eb62:	2400      	movs	r4, #0
    eb64:	e7f5      	b.n	eb52 <CC_LibInitNoRng+0x36>
    eb66:	2001      	movs	r0, #1
    eb68:	f000 f892 	bl	ec90 <CC_PalPowerSaveModeSelect>
    eb6c:	4604      	mov	r4, r0
    eb6e:	2800      	cmp	r0, #0
    eb70:	d1f7      	bne.n	eb62 <CC_LibInitNoRng+0x46>
    eb72:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    eb76:	e7d8      	b.n	eb2a <CC_LibInitNoRng+0xe>
    eb78:	5002b000 	.word	0x5002b000
    eb7c:	20e00000 	.word	0x20e00000

0000eb80 <CC_HalInit>:
    eb80:	2000      	movs	r0, #0
    eb82:	4770      	bx	lr

0000eb84 <CC_HalTerminate>:
    eb84:	2000      	movs	r0, #0
    eb86:	4770      	bx	lr

0000eb88 <CC_HalMaskInterrupt>:
    eb88:	4b01      	ldr	r3, [pc, #4]	; (eb90 <CC_HalMaskInterrupt+0x8>)
    eb8a:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    eb8e:	4770      	bx	lr
    eb90:	5002b000 	.word	0x5002b000

0000eb94 <CC_PalInit>:
    eb94:	b510      	push	{r4, lr}
    eb96:	4811      	ldr	r0, [pc, #68]	; (ebdc <CC_PalInit+0x48>)
    eb98:	f000 f848 	bl	ec2c <CC_PalMutexCreate>
    eb9c:	b100      	cbz	r0, eba0 <CC_PalInit+0xc>
    eb9e:	bd10      	pop	{r4, pc}
    eba0:	480f      	ldr	r0, [pc, #60]	; (ebe0 <CC_PalInit+0x4c>)
    eba2:	f000 f843 	bl	ec2c <CC_PalMutexCreate>
    eba6:	2800      	cmp	r0, #0
    eba8:	d1f9      	bne.n	eb9e <CC_PalInit+0xa>
    ebaa:	4c0e      	ldr	r4, [pc, #56]	; (ebe4 <CC_PalInit+0x50>)
    ebac:	4620      	mov	r0, r4
    ebae:	f000 f83d 	bl	ec2c <CC_PalMutexCreate>
    ebb2:	2800      	cmp	r0, #0
    ebb4:	d1f3      	bne.n	eb9e <CC_PalInit+0xa>
    ebb6:	4b0c      	ldr	r3, [pc, #48]	; (ebe8 <CC_PalInit+0x54>)
    ebb8:	480c      	ldr	r0, [pc, #48]	; (ebec <CC_PalInit+0x58>)
    ebba:	601c      	str	r4, [r3, #0]
    ebbc:	f000 f836 	bl	ec2c <CC_PalMutexCreate>
    ebc0:	4601      	mov	r1, r0
    ebc2:	2800      	cmp	r0, #0
    ebc4:	d1eb      	bne.n	eb9e <CC_PalInit+0xa>
    ebc6:	f000 f82d 	bl	ec24 <CC_PalDmaInit>
    ebca:	4604      	mov	r4, r0
    ebcc:	b108      	cbz	r0, ebd2 <CC_PalInit+0x3e>
    ebce:	4620      	mov	r0, r4
    ebd0:	bd10      	pop	{r4, pc}
    ebd2:	f000 f83f 	bl	ec54 <CC_PalPowerSaveModeInit>
    ebd6:	4620      	mov	r0, r4
    ebd8:	e7fa      	b.n	ebd0 <CC_PalInit+0x3c>
    ebda:	bf00      	nop
    ebdc:	200041c0 	.word	0x200041c0
    ebe0:	200041b4 	.word	0x200041b4
    ebe4:	200041bc 	.word	0x200041bc
    ebe8:	200041c4 	.word	0x200041c4
    ebec:	200041b8 	.word	0x200041b8

0000ebf0 <CC_PalTerminate>:
    ebf0:	b508      	push	{r3, lr}
    ebf2:	4808      	ldr	r0, [pc, #32]	; (ec14 <CC_PalTerminate+0x24>)
    ebf4:	f000 f824 	bl	ec40 <CC_PalMutexDestroy>
    ebf8:	4807      	ldr	r0, [pc, #28]	; (ec18 <CC_PalTerminate+0x28>)
    ebfa:	f000 f821 	bl	ec40 <CC_PalMutexDestroy>
    ebfe:	4807      	ldr	r0, [pc, #28]	; (ec1c <CC_PalTerminate+0x2c>)
    ec00:	f000 f81e 	bl	ec40 <CC_PalMutexDestroy>
    ec04:	4806      	ldr	r0, [pc, #24]	; (ec20 <CC_PalTerminate+0x30>)
    ec06:	f000 f81b 	bl	ec40 <CC_PalMutexDestroy>
    ec0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ec0e:	f000 b80b 	b.w	ec28 <CC_PalDmaTerminate>
    ec12:	bf00      	nop
    ec14:	200041c0 	.word	0x200041c0
    ec18:	200041b4 	.word	0x200041b4
    ec1c:	200041bc 	.word	0x200041bc
    ec20:	200041b8 	.word	0x200041b8

0000ec24 <CC_PalDmaInit>:
    ec24:	2000      	movs	r0, #0
    ec26:	4770      	bx	lr

0000ec28 <CC_PalDmaTerminate>:
    ec28:	4770      	bx	lr
    ec2a:	bf00      	nop

0000ec2c <CC_PalMutexCreate>:
    ec2c:	b508      	push	{r3, lr}
    ec2e:	4b03      	ldr	r3, [pc, #12]	; (ec3c <CC_PalMutexCreate+0x10>)
    ec30:	6802      	ldr	r2, [r0, #0]
    ec32:	681b      	ldr	r3, [r3, #0]
    ec34:	6810      	ldr	r0, [r2, #0]
    ec36:	4798      	blx	r3
    ec38:	2000      	movs	r0, #0
    ec3a:	bd08      	pop	{r3, pc}
    ec3c:	20004178 	.word	0x20004178

0000ec40 <CC_PalMutexDestroy>:
    ec40:	b508      	push	{r3, lr}
    ec42:	4b03      	ldr	r3, [pc, #12]	; (ec50 <CC_PalMutexDestroy+0x10>)
    ec44:	6802      	ldr	r2, [r0, #0]
    ec46:	685b      	ldr	r3, [r3, #4]
    ec48:	6810      	ldr	r0, [r2, #0]
    ec4a:	4798      	blx	r3
    ec4c:	2000      	movs	r0, #0
    ec4e:	bd08      	pop	{r3, pc}
    ec50:	20004178 	.word	0x20004178

0000ec54 <CC_PalPowerSaveModeInit>:
    ec54:	b570      	push	{r4, r5, r6, lr}
    ec56:	4c09      	ldr	r4, [pc, #36]	; (ec7c <CC_PalPowerSaveModeInit+0x28>)
    ec58:	4d09      	ldr	r5, [pc, #36]	; (ec80 <CC_PalPowerSaveModeInit+0x2c>)
    ec5a:	6920      	ldr	r0, [r4, #16]
    ec5c:	68ab      	ldr	r3, [r5, #8]
    ec5e:	4798      	blx	r3
    ec60:	b118      	cbz	r0, ec6a <CC_PalPowerSaveModeInit+0x16>
    ec62:	4b08      	ldr	r3, [pc, #32]	; (ec84 <CC_PalPowerSaveModeInit+0x30>)
    ec64:	4808      	ldr	r0, [pc, #32]	; (ec88 <CC_PalPowerSaveModeInit+0x34>)
    ec66:	685b      	ldr	r3, [r3, #4]
    ec68:	4798      	blx	r3
    ec6a:	4a08      	ldr	r2, [pc, #32]	; (ec8c <CC_PalPowerSaveModeInit+0x38>)
    ec6c:	68eb      	ldr	r3, [r5, #12]
    ec6e:	6920      	ldr	r0, [r4, #16]
    ec70:	2100      	movs	r1, #0
    ec72:	6011      	str	r1, [r2, #0]
    ec74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ec78:	4718      	bx	r3
    ec7a:	bf00      	nop
    ec7c:	20004188 	.word	0x20004188
    ec80:	20004178 	.word	0x20004178
    ec84:	20004168 	.word	0x20004168
    ec88:	000132c8 	.word	0x000132c8
    ec8c:	2000d558 	.word	0x2000d558

0000ec90 <CC_PalPowerSaveModeSelect>:
    ec90:	b570      	push	{r4, r5, r6, lr}
    ec92:	4d1b      	ldr	r5, [pc, #108]	; (ed00 <CC_PalPowerSaveModeSelect+0x70>)
    ec94:	4e1b      	ldr	r6, [pc, #108]	; (ed04 <CC_PalPowerSaveModeSelect+0x74>)
    ec96:	4604      	mov	r4, r0
    ec98:	68b2      	ldr	r2, [r6, #8]
    ec9a:	6928      	ldr	r0, [r5, #16]
    ec9c:	4790      	blx	r2
    ec9e:	b9f8      	cbnz	r0, ece0 <CC_PalPowerSaveModeSelect+0x50>
    eca0:	b15c      	cbz	r4, ecba <CC_PalPowerSaveModeSelect+0x2a>
    eca2:	4c19      	ldr	r4, [pc, #100]	; (ed08 <CC_PalPowerSaveModeSelect+0x78>)
    eca4:	6823      	ldr	r3, [r4, #0]
    eca6:	b1b3      	cbz	r3, ecd6 <CC_PalPowerSaveModeSelect+0x46>
    eca8:	2b01      	cmp	r3, #1
    ecaa:	d01b      	beq.n	ece4 <CC_PalPowerSaveModeSelect+0x54>
    ecac:	3b01      	subs	r3, #1
    ecae:	6023      	str	r3, [r4, #0]
    ecb0:	6928      	ldr	r0, [r5, #16]
    ecb2:	68f3      	ldr	r3, [r6, #12]
    ecb4:	4798      	blx	r3
    ecb6:	2000      	movs	r0, #0
    ecb8:	bd70      	pop	{r4, r5, r6, pc}
    ecba:	4c13      	ldr	r4, [pc, #76]	; (ed08 <CC_PalPowerSaveModeSelect+0x78>)
    ecbc:	6821      	ldr	r1, [r4, #0]
    ecbe:	b941      	cbnz	r1, ecd2 <CC_PalPowerSaveModeSelect+0x42>
    ecc0:	4b12      	ldr	r3, [pc, #72]	; (ed0c <CC_PalPowerSaveModeSelect+0x7c>)
    ecc2:	2201      	movs	r2, #1
    ecc4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    ecc8:	4a11      	ldr	r2, [pc, #68]	; (ed10 <CC_PalPowerSaveModeSelect+0x80>)
    ecca:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    ecce:	2b00      	cmp	r3, #0
    ecd0:	d1fb      	bne.n	ecca <CC_PalPowerSaveModeSelect+0x3a>
    ecd2:	3101      	adds	r1, #1
    ecd4:	6021      	str	r1, [r4, #0]
    ecd6:	68f3      	ldr	r3, [r6, #12]
    ecd8:	6928      	ldr	r0, [r5, #16]
    ecda:	4798      	blx	r3
    ecdc:	2000      	movs	r0, #0
    ecde:	bd70      	pop	{r4, r5, r6, pc}
    ece0:	480c      	ldr	r0, [pc, #48]	; (ed14 <CC_PalPowerSaveModeSelect+0x84>)
    ece2:	bd70      	pop	{r4, r5, r6, pc}
    ece4:	4a0a      	ldr	r2, [pc, #40]	; (ed10 <CC_PalPowerSaveModeSelect+0x80>)
    ece6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    ecea:	2b00      	cmp	r3, #0
    ecec:	d1fb      	bne.n	ece6 <CC_PalPowerSaveModeSelect+0x56>
    ecee:	4a07      	ldr	r2, [pc, #28]	; (ed0c <CC_PalPowerSaveModeSelect+0x7c>)
    ecf0:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    ecf4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    ecf8:	f7ff ff46 	bl	eb88 <CC_HalMaskInterrupt>
    ecfc:	6823      	ldr	r3, [r4, #0]
    ecfe:	e7d5      	b.n	ecac <CC_PalPowerSaveModeSelect+0x1c>
    ed00:	20004188 	.word	0x20004188
    ed04:	20004178 	.word	0x20004178
    ed08:	2000d558 	.word	0x2000d558
    ed0c:	5002a000 	.word	0x5002a000
    ed10:	5002b000 	.word	0x5002b000
    ed14:	ffff8fe9 	.word	0xffff8fe9

0000ed18 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    ed18:	4770      	bx	lr

0000ed1a <castImage>:

uint8_t **castImage(uint8_t *img)
{
    ed1a:	b570      	push	{r4, r5, r6, lr}
    ed1c:	4605      	mov	r5, r0
    uint8_t **image = (uint8_t **)malloc(IMGWIDTH * sizeof(uint8_t *));
    ed1e:	f44f 7000 	mov.w	r0, #512	; 0x200
    ed22:	f7fe fc5b 	bl	d5dc <malloc>
    ed26:	4604      	mov	r4, r0
    for (int i = 0; i < IMGWIDTH; i++)
    ed28:	2600      	movs	r6, #0
    ed2a:	e005      	b.n	ed38 <castImage+0x1e>
    {
        image[i] = (uint8_t *)malloc(IMGWIDTH * sizeof(uint8_t));
    ed2c:	2080      	movs	r0, #128	; 0x80
    ed2e:	f7fe fc55 	bl	d5dc <malloc>
    ed32:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    for (int i = 0; i < IMGWIDTH; i++)
    ed36:	3601      	adds	r6, #1
    ed38:	2e7f      	cmp	r6, #127	; 0x7f
    ed3a:	ddf7      	ble.n	ed2c <castImage+0x12>
    }

    for (int i = 0; i < IMGWIDTH; i++)
    ed3c:	2200      	movs	r2, #0
    ed3e:	e009      	b.n	ed54 <castImage+0x3a>
    {
        for (int j = 0; j < IMGWIDTH; j++)
        {
            image[i][j] = img[i * IMGWIDTH + j];
    ed40:	eb03 10c2 	add.w	r0, r3, r2, lsl #7
    ed44:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
    ed48:	5c28      	ldrb	r0, [r5, r0]
    ed4a:	54c8      	strb	r0, [r1, r3]
        for (int j = 0; j < IMGWIDTH; j++)
    ed4c:	3301      	adds	r3, #1
    ed4e:	2b7f      	cmp	r3, #127	; 0x7f
    ed50:	ddf6      	ble.n	ed40 <castImage+0x26>
    for (int i = 0; i < IMGWIDTH; i++)
    ed52:	3201      	adds	r2, #1
    ed54:	2a7f      	cmp	r2, #127	; 0x7f
    ed56:	dc01      	bgt.n	ed5c <castImage+0x42>
        for (int j = 0; j < IMGWIDTH; j++)
    ed58:	2300      	movs	r3, #0
    ed5a:	e7f8      	b.n	ed4e <castImage+0x34>
        }
    }
    return image;
}
    ed5c:	4620      	mov	r0, r4
    ed5e:	bd70      	pop	{r4, r5, r6, pc}

0000ed60 <open_cab>:
    uint8_t *buffersTaken;
};

// creates a new cab
cab *open_cab(char *name, int num, size_t dim, void *first)
{
    ed60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ed64:	4604      	mov	r4, r0
    ed66:	460e      	mov	r6, r1
    ed68:	4690      	mov	r8, r2
    ed6a:	4699      	mov	r9, r3
    cab *new_cab = calloc(1, sizeof(cab));
    ed6c:	2118      	movs	r1, #24
    ed6e:	2001      	movs	r0, #1
    ed70:	f7fe fbf4 	bl	d55c <calloc>
    ed74:	4605      	mov	r5, r0
    new_cab->name = name;
    ed76:	6044      	str	r4, [r0, #4]
    new_cab->num = num;
    ed78:	6086      	str	r6, [r0, #8]
    new_cab->dim = dim;
    ed7a:	f8c0 800c 	str.w	r8, [r0, #12]
    new_cab->op_Mutex = (struct k_mutex*)calloc(1, sizeof(struct k_mutex));
    ed7e:	2114      	movs	r1, #20
    ed80:	2001      	movs	r0, #1
    ed82:	f7fe fbeb 	bl	d55c <calloc>
    ed86:	6028      	str	r0, [r5, #0]
	return z_impl_k_mutex_init(mutex);
    ed88:	f001 fb9e 	bl	104c8 <z_impl_k_mutex_init>
    k_mutex_init(new_cab->op_Mutex);
    // allocate the buffersTaken array
    new_cab->buffersTaken = (uint8_t *)calloc(num, sizeof(uint8_t));
    ed8c:	2101      	movs	r1, #1
    ed8e:	4630      	mov	r0, r6
    ed90:	f7fe fbe4 	bl	d55c <calloc>
    ed94:	6168      	str	r0, [r5, #20]
    for (size_t i = 0; i < num; i++)
    ed96:	2400      	movs	r4, #0
    ed98:	e003      	b.n	eda2 <open_cab+0x42>
        new_cab->buffersTaken[i] = 0;
    ed9a:	696b      	ldr	r3, [r5, #20]
    ed9c:	2200      	movs	r2, #0
    ed9e:	551a      	strb	r2, [r3, r4]
    for (size_t i = 0; i < num; i++)
    eda0:	3401      	adds	r4, #1
    eda2:	42a6      	cmp	r6, r4
    eda4:	d8f9      	bhi.n	ed9a <open_cab+0x3a>

    // allocate all buffers
    new_cab->buffers = (void **)calloc(num, sizeof(void *));
    eda6:	2104      	movs	r1, #4
    eda8:	4630      	mov	r0, r6
    edaa:	f7fe fbd7 	bl	d55c <calloc>
    edae:	6128      	str	r0, [r5, #16]
    for (size_t i = 0; i < num; i++)
    edb0:	2400      	movs	r4, #0
    edb2:	e007      	b.n	edc4 <open_cab+0x64>
    {
        new_cab->buffers[i] = (void *)calloc(1, dim);
    edb4:	692f      	ldr	r7, [r5, #16]
    edb6:	4641      	mov	r1, r8
    edb8:	2001      	movs	r0, #1
    edba:	f7fe fbcf 	bl	d55c <calloc>
    edbe:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
    for (size_t i = 0; i < num; i++)
    edc2:	3401      	adds	r4, #1
    edc4:	42a6      	cmp	r6, r4
    edc6:	d8f5      	bhi.n	edb4 <open_cab+0x54>
    }

    memcpy(new_cab->buffers[0], first, dim);
    edc8:	692b      	ldr	r3, [r5, #16]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    edca:	4642      	mov	r2, r8
    edcc:	4649      	mov	r1, r9
    edce:	6818      	ldr	r0, [r3, #0]
    edd0:	f001 fc33 	bl	1063a <memcpy>
    new_cab->buffersTaken[0] = 1; // The first will always be taken
    edd4:	696b      	ldr	r3, [r5, #20]
    edd6:	2201      	movs	r2, #1
    edd8:	701a      	strb	r2, [r3, #0]
    return new_cab;
}
    edda:	4628      	mov	r0, r5
    eddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ede0 <get_mes>:
    
}

// get latest message
void *get_mes(cab *cab_id)
{
    ede0:	b538      	push	{r3, r4, r5, lr}
    ede2:	4605      	mov	r5, r0
    k_mutex_lock(cab_id->op_Mutex, K_FOREVER);
    ede4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    ede6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    edea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    edee:	f7fb fecd 	bl	ab8c <z_impl_k_mutex_lock>
    
    // find a free buffer
    for (size_t i = 0; i < cab_id->num; i++)
    edf2:	2400      	movs	r4, #0
    edf4:	e000      	b.n	edf8 <get_mes+0x18>
    edf6:	3401      	adds	r4, #1
    edf8:	68ab      	ldr	r3, [r5, #8]
    edfa:	42a3      	cmp	r3, r4
    edfc:	d914      	bls.n	ee28 <get_mes+0x48>
    {
        if (cab_id->buffersTaken[i] == 0)
    edfe:	696b      	ldr	r3, [r5, #20]
    ee00:	191a      	adds	r2, r3, r4
    ee02:	5d1b      	ldrb	r3, [r3, r4]
    ee04:	2b00      	cmp	r3, #0
    ee06:	d1f6      	bne.n	edf6 <get_mes+0x16>
        {
            cab_id->buffersTaken[i] = 1;
    ee08:	2301      	movs	r3, #1
    ee0a:	7013      	strb	r3, [r2, #0]
            memcpy(cab_id->buffers[i], cab_id->buffers[0], cab_id->dim);
    ee0c:	692b      	ldr	r3, [r5, #16]
    ee0e:	68ea      	ldr	r2, [r5, #12]
    ee10:	6819      	ldr	r1, [r3, #0]
    ee12:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    ee16:	f001 fc10 	bl	1063a <memcpy>
            k_mutex_unlock(cab_id->op_Mutex);
    ee1a:	6828      	ldr	r0, [r5, #0]
	return z_impl_k_mutex_unlock(mutex);
    ee1c:	f7fb ffd6 	bl	adcc <z_impl_k_mutex_unlock>
            
            return cab_id->buffers[i];
    ee20:	692b      	ldr	r3, [r5, #16]
    ee22:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    ee26:	e003      	b.n	ee30 <get_mes+0x50>
        }
    }
            k_mutex_unlock(cab_id->op_Mutex);
    ee28:	6828      	ldr	r0, [r5, #0]
    ee2a:	f7fb ffcf 	bl	adcc <z_impl_k_mutex_unlock>
    
    return NULL;
    ee2e:	2000      	movs	r0, #0
}
    ee30:	bd38      	pop	{r3, r4, r5, pc}

0000ee32 <unget>:

// release message to the CAB
void unget(void* mes_pointer, cab *cab_id)
{
    ee32:	b538      	push	{r3, r4, r5, lr}
    ee34:	4605      	mov	r5, r0
    ee36:	460c      	mov	r4, r1
    k_mutex_lock(cab_id->op_Mutex, K_FOREVER);
    ee38:	6808      	ldr	r0, [r1, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    ee3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ee3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ee42:	f7fb fea3 	bl	ab8c <z_impl_k_mutex_lock>
    
    for (size_t i = 0; i < cab_id->num; i++)
    ee46:	2300      	movs	r3, #0
    ee48:	e000      	b.n	ee4c <unget+0x1a>
    ee4a:	3301      	adds	r3, #1
    ee4c:	68a2      	ldr	r2, [r4, #8]
    ee4e:	429a      	cmp	r2, r3
    ee50:	d908      	bls.n	ee64 <unget+0x32>
    {
        if (cab_id->buffers[i] == mes_pointer)
    ee52:	6922      	ldr	r2, [r4, #16]
    ee54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ee58:	42aa      	cmp	r2, r5
    ee5a:	d1f6      	bne.n	ee4a <unget+0x18>
        {
            cab_id->buffersTaken[i] = 0;
    ee5c:	6962      	ldr	r2, [r4, #20]
    ee5e:	2100      	movs	r1, #0
    ee60:	54d1      	strb	r1, [r2, r3]
    ee62:	e7f2      	b.n	ee4a <unget+0x18>
        }
    }
            k_mutex_unlock(cab_id->op_Mutex);
    ee64:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_unlock(mutex);
    ee66:	f7fb ffb1 	bl	adcc <z_impl_k_mutex_unlock>
    
}
    ee6a:	bd38      	pop	{r3, r4, r5, pc}

0000ee6c <cbprintf_via_va_list>:
{
    ee6c:	b510      	push	{r4, lr}
    ee6e:	460c      	mov	r4, r1
    ee70:	4611      	mov	r1, r2
    ee72:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    ee74:	9b02      	ldr	r3, [sp, #8]
    ee76:	47a0      	blx	r4
}
    ee78:	bd10      	pop	{r4, pc}

0000ee7a <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    ee7a:	b353      	cbz	r3, eed2 <cbpprintf_external+0x58>
{
    ee7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ee80:	b082      	sub	sp, #8
    ee82:	4607      	mov	r7, r0
    ee84:	4688      	mov	r8, r1
    ee86:	4691      	mov	r9, r2
    ee88:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
    ee8a:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = buf[1];
    ee8c:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = buf[2];
    ee8e:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = buf[3];
    ee90:	78db      	ldrb	r3, [r3, #3]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    ee92:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    ee96:	441c      	add	r4, r3
    ee98:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    ee9a:	f04f 0a00 	mov.w	sl, #0
    ee9e:	e00a      	b.n	eeb6 <cbpprintf_external+0x3c>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
    eea0:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
    eea4:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
    eea8:	4620      	mov	r0, r4
    eeaa:	f7f1 ffd4 	bl	e56 <strlen>
    eeae:	3001      	adds	r0, #1
    eeb0:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    eeb2:	f10a 0a01 	add.w	sl, sl, #1
    eeb6:	45b2      	cmp	sl, r6
    eeb8:	d3f2      	bcc.n	eea0 <cbpprintf_external+0x26>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
    eeba:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
    eebe:	9300      	str	r3, [sp, #0]
    eec0:	686b      	ldr	r3, [r5, #4]
    eec2:	464a      	mov	r2, r9
    eec4:	4641      	mov	r1, r8
    eec6:	4638      	mov	r0, r7
    eec8:	f7ff ffd0 	bl	ee6c <cbprintf_via_va_list>
}
    eecc:	b002      	add	sp, #8
    eece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    eed2:	f06f 0015 	mvn.w	r0, #21
}
    eed6:	4770      	bx	lr

0000eed8 <sys_notify_validate>:
	if (notify == NULL) {
    eed8:	4602      	mov	r2, r0
    eeda:	b158      	cbz	r0, eef4 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    eedc:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    eede:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    eee2:	2b01      	cmp	r3, #1
    eee4:	d003      	beq.n	eeee <sys_notify_validate+0x16>
    eee6:	2b03      	cmp	r3, #3
    eee8:	d107      	bne.n	eefa <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    eeea:	6803      	ldr	r3, [r0, #0]
    eeec:	b143      	cbz	r3, ef00 <sys_notify_validate+0x28>
		notify->result = 0;
    eeee:	2000      	movs	r0, #0
    eef0:	6090      	str	r0, [r2, #8]
    eef2:	4770      	bx	lr
		return -EINVAL;
    eef4:	f06f 0015 	mvn.w	r0, #21
    eef8:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    eefa:	f06f 0015 	mvn.w	r0, #21
    eefe:	4770      	bx	lr
			rv = -EINVAL;
    ef00:	f06f 0015 	mvn.w	r0, #21
}
    ef04:	4770      	bx	lr

0000ef06 <arch_printk_char_out>:
}
    ef06:	2000      	movs	r0, #0
    ef08:	4770      	bx	lr

0000ef0a <vprintk>:
	ctx->count++;
	return _char_out(c);
}

void vprintk(const char *fmt, va_list ap)
{
    ef0a:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    ef0c:	f000 f921 	bl	f152 <z_log_vprintk>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    ef10:	bd08      	pop	{r3, pc}

0000ef12 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    ef12:	b40f      	push	{r0, r1, r2, r3}
    ef14:	b500      	push	{lr}
    ef16:	b083      	sub	sp, #12
    ef18:	a904      	add	r1, sp, #16
    ef1a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    ef1e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    ef20:	f7ff fff3 	bl	ef0a <vprintk>

	va_end(ap);
}
    ef24:	b003      	add	sp, #12
    ef26:	f85d eb04 	ldr.w	lr, [sp], #4
    ef2a:	b004      	add	sp, #16
    ef2c:	4770      	bx	lr

0000ef2e <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    ef2e:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ef32:	8b81      	ldrh	r1, [r0, #28]
    ef34:	f021 0107 	bic.w	r1, r1, #7
    ef38:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    ef3a:	8381      	strh	r1, [r0, #28]
}
    ef3c:	4770      	bx	lr

0000ef3e <notify_monitors>:
{
    ef3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef42:	4606      	mov	r6, r0
    ef44:	460f      	mov	r7, r1
    ef46:	4690      	mov	r8, r2
	return list->head;
    ef48:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ef4a:	b119      	cbz	r1, ef54 <notify_monitors+0x16>
    ef4c:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    ef4e:	b131      	cbz	r1, ef5e <notify_monitors+0x20>
	return node->next;
    ef50:	680c      	ldr	r4, [r1, #0]
    ef52:	e004      	b.n	ef5e <notify_monitors+0x20>
    ef54:	460c      	mov	r4, r1
    ef56:	e002      	b.n	ef5e <notify_monitors+0x20>
    ef58:	4623      	mov	r3, r4
    ef5a:	4621      	mov	r1, r4
    ef5c:	461c      	mov	r4, r3
    ef5e:	b159      	cbz	r1, ef78 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    ef60:	684d      	ldr	r5, [r1, #4]
    ef62:	4643      	mov	r3, r8
    ef64:	463a      	mov	r2, r7
    ef66:	4630      	mov	r0, r6
    ef68:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ef6a:	2c00      	cmp	r4, #0
    ef6c:	d0f4      	beq.n	ef58 <notify_monitors+0x1a>
    ef6e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    ef70:	2c00      	cmp	r4, #0
    ef72:	d0f2      	beq.n	ef5a <notify_monitors+0x1c>
	return node->next;
    ef74:	6823      	ldr	r3, [r4, #0]
    ef76:	e7f0      	b.n	ef5a <notify_monitors+0x1c>
}
    ef78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ef7c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ef7c:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    ef7e:	f013 0307 	ands.w	r3, r3, #7
    ef82:	d103      	bne.n	ef8c <process_recheck+0x10>
	return list->head;
    ef84:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    ef86:	b10a      	cbz	r2, ef8c <process_recheck+0x10>
		evt = EVT_START;
    ef88:	2003      	movs	r0, #3
    ef8a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    ef8c:	2b02      	cmp	r3, #2
    ef8e:	d003      	beq.n	ef98 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    ef90:	2b01      	cmp	r3, #1
    ef92:	d006      	beq.n	efa2 <process_recheck+0x26>
	int evt = EVT_NOP;
    ef94:	2000      	movs	r0, #0
    ef96:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    ef98:	8bc2      	ldrh	r2, [r0, #30]
    ef9a:	2a00      	cmp	r2, #0
    ef9c:	d1f8      	bne.n	ef90 <process_recheck+0x14>
		evt = EVT_STOP;
    ef9e:	2004      	movs	r0, #4
    efa0:	4770      	bx	lr
    efa2:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    efa4:	b10b      	cbz	r3, efaa <process_recheck+0x2e>
		evt = EVT_RESET;
    efa6:	2005      	movs	r0, #5
}
    efa8:	4770      	bx	lr
	int evt = EVT_NOP;
    efaa:	2000      	movs	r0, #0
    efac:	4770      	bx	lr

0000efae <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    efae:	b158      	cbz	r0, efc8 <validate_args+0x1a>
{
    efb0:	b510      	push	{r4, lr}
    efb2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    efb4:	b159      	cbz	r1, efce <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    efb6:	1d08      	adds	r0, r1, #4
    efb8:	f7ff ff8e 	bl	eed8 <sys_notify_validate>
	if ((rv == 0)
    efbc:	b918      	cbnz	r0, efc6 <validate_args+0x18>
	    && ((cli->notify.flags
    efbe:	68a3      	ldr	r3, [r4, #8]
    efc0:	f033 0303 	bics.w	r3, r3, #3
    efc4:	d106      	bne.n	efd4 <validate_args+0x26>
}
    efc6:	bd10      	pop	{r4, pc}
		return -EINVAL;
    efc8:	f06f 0015 	mvn.w	r0, #21
}
    efcc:	4770      	bx	lr
		return -EINVAL;
    efce:	f06f 0015 	mvn.w	r0, #21
    efd2:	e7f8      	b.n	efc6 <validate_args+0x18>
		rv = -EINVAL;
    efd4:	f06f 0015 	mvn.w	r0, #21
    efd8:	e7f5      	b.n	efc6 <validate_args+0x18>

0000efda <notify_one>:
{
    efda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    efde:	4607      	mov	r7, r0
    efe0:	460c      	mov	r4, r1
    efe2:	4616      	mov	r6, r2
    efe4:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    efe6:	4619      	mov	r1, r3
    efe8:	1d20      	adds	r0, r4, #4
    efea:	f7f4 fd4f 	bl	3a8c <sys_notify_finalize>
	if (cb) {
    efee:	b128      	cbz	r0, effc <notify_one+0x22>
    eff0:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    eff2:	462b      	mov	r3, r5
    eff4:	4632      	mov	r2, r6
    eff6:	4621      	mov	r1, r4
    eff8:	4638      	mov	r0, r7
    effa:	47c0      	blx	r8
}
    effc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f000 <notify_all>:
{
    f000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f004:	4680      	mov	r8, r0
    f006:	460c      	mov	r4, r1
    f008:	4617      	mov	r7, r2
    f00a:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    f00c:	e004      	b.n	f018 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    f00e:	4633      	mov	r3, r6
    f010:	463a      	mov	r2, r7
    f012:	4640      	mov	r0, r8
    f014:	f7ff ffe1 	bl	efda <notify_one>
    f018:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    f01a:	b131      	cbz	r1, f02a <notify_all+0x2a>
	return node->next;
    f01c:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    f01e:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f020:	6863      	ldr	r3, [r4, #4]
    f022:	428b      	cmp	r3, r1
    f024:	d1f3      	bne.n	f00e <notify_all+0xe>
	list->tail = node;
    f026:	6065      	str	r5, [r4, #4]
}
    f028:	e7f1      	b.n	f00e <notify_all+0xe>
}
    f02a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f02e <onoff_manager_init>:
	if ((mgr == NULL)
    f02e:	b170      	cbz	r0, f04e <onoff_manager_init+0x20>
{
    f030:	b538      	push	{r3, r4, r5, lr}
    f032:	460c      	mov	r4, r1
    f034:	4605      	mov	r5, r0
	    || (transitions == NULL)
    f036:	b169      	cbz	r1, f054 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    f038:	680b      	ldr	r3, [r1, #0]
    f03a:	b173      	cbz	r3, f05a <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    f03c:	684b      	ldr	r3, [r1, #4]
    f03e:	b17b      	cbz	r3, f060 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    f040:	2220      	movs	r2, #32
    f042:	2100      	movs	r1, #0
    f044:	f001 fb07 	bl	10656 <memset>
    f048:	612c      	str	r4, [r5, #16]
	return 0;
    f04a:	2000      	movs	r0, #0
}
    f04c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    f04e:	f06f 0015 	mvn.w	r0, #21
}
    f052:	4770      	bx	lr
		return -EINVAL;
    f054:	f06f 0015 	mvn.w	r0, #21
    f058:	e7f8      	b.n	f04c <onoff_manager_init+0x1e>
    f05a:	f06f 0015 	mvn.w	r0, #21
    f05e:	e7f5      	b.n	f04c <onoff_manager_init+0x1e>
    f060:	f06f 0015 	mvn.w	r0, #21
    f064:	e7f2      	b.n	f04c <onoff_manager_init+0x1e>

0000f066 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    f066:	b508      	push	{r3, lr}
    f068:	4604      	mov	r4, r0
    f06a:	4608      	mov	r0, r1
    f06c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    f06e:	461a      	mov	r2, r3
    f070:	47a0      	blx	r4
	return z_impl_z_current_get();
    f072:	f7fd faab 	bl	c5cc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    f076:	f7f7 fba3 	bl	67c0 <z_impl_k_thread_abort>

0000f07a <free_list_add_bidx>:
{
    f07a:	b510      	push	{r4, lr}
	if (b->next == 0U) {
    f07c:	1d13      	adds	r3, r2, #4
    f07e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    f082:	b97c      	cbnz	r4, f0a4 <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
    f084:	2301      	movs	r3, #1
    f086:	fa03 f402 	lsl.w	r4, r3, r2
    f08a:	68c3      	ldr	r3, [r0, #12]
    f08c:	4323      	orrs	r3, r4
    f08e:	60c3      	str	r3, [r0, #12]
		b->next = c;
    f090:	3204      	adds	r2, #4
    f092:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    f096:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    f098:	1d1a      	adds	r2, r3, #4
    f09a:	b289      	uxth	r1, r1
    f09c:	5281      	strh	r1, [r0, r2]
    f09e:	3306      	adds	r3, #6
    f0a0:	52c1      	strh	r1, [r0, r3]
}
    f0a2:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    f0a4:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    f0a6:	3204      	adds	r2, #4
    f0a8:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    f0aa:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    f0ae:	f10c 0e04 	add.w	lr, ip, #4
    f0b2:	f820 300e 	strh.w	r3, [r0, lr]
    f0b6:	f10c 0c06 	add.w	ip, ip, #6
    f0ba:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    f0be:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    f0c0:	3306      	adds	r3, #6
    f0c2:	b289      	uxth	r1, r1
    f0c4:	52c1      	strh	r1, [r0, r3]
    f0c6:	5281      	strh	r1, [r0, r2]
    f0c8:	e7eb      	b.n	f0a2 <free_list_add_bidx+0x28>

0000f0ca <free_list_add>:
{
    f0ca:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    f0cc:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    f0d0:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    f0d2:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    f0d4:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    f0d8:	f1c2 021f 	rsb	r2, r2, #31
    f0dc:	f7ff ffcd 	bl	f07a <free_list_add_bidx>
}
    f0e0:	bd08      	pop	{r3, pc}

0000f0e2 <outs>:
{
    f0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0e6:	4607      	mov	r7, r0
    f0e8:	460e      	mov	r6, r1
    f0ea:	4614      	mov	r4, r2
    f0ec:	4698      	mov	r8, r3
	size_t count = 0;
    f0ee:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    f0f0:	e006      	b.n	f100 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    f0f2:	4631      	mov	r1, r6
    f0f4:	f814 0b01 	ldrb.w	r0, [r4], #1
    f0f8:	47b8      	blx	r7
		if (rc < 0) {
    f0fa:	2800      	cmp	r0, #0
    f0fc:	db09      	blt.n	f112 <outs+0x30>
		++count;
    f0fe:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    f100:	4544      	cmp	r4, r8
    f102:	d3f6      	bcc.n	f0f2 <outs+0x10>
    f104:	f1b8 0f00 	cmp.w	r8, #0
    f108:	d102      	bne.n	f110 <outs+0x2e>
    f10a:	7823      	ldrb	r3, [r4, #0]
    f10c:	2b00      	cmp	r3, #0
    f10e:	d1f0      	bne.n	f0f2 <outs+0x10>
	return (int)count;
    f110:	4628      	mov	r0, r5
}
    f112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f116 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    f116:	4040      	eors	r0, r0
    f118:	f380 8811 	msr	BASEPRI, r0
    f11c:	f04f 0004 	mov.w	r0, #4
    f120:	df02      	svc	2
}
    f122:	4770      	bx	lr

0000f124 <assert_print>:

void assert_print(const char *fmt, ...)
{
    f124:	b40f      	push	{r0, r1, r2, r3}
    f126:	b500      	push	{lr}
    f128:	b083      	sub	sp, #12
    f12a:	a904      	add	r1, sp, #16
    f12c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    f130:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    f132:	f7ff feea 	bl	ef0a <vprintk>

	va_end(ap);
}
    f136:	b003      	add	sp, #12
    f138:	f85d eb04 	ldr.w	lr, [sp], #4
    f13c:	b004      	add	sp, #16
    f13e:	4770      	bx	lr

0000f140 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    f140:	4770      	bx	lr

0000f142 <dummy_timestamp>:
}
    f142:	2000      	movs	r0, #0
    f144:	4770      	bx	lr

0000f146 <msg_filter_check>:
}
    f146:	2001      	movs	r0, #1
    f148:	4770      	bx	lr

0000f14a <default_get_timestamp>:
{
    f14a:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    f14c:	f001 f833 	bl	101b6 <sys_clock_cycle_get_32>
}
    f150:	bd08      	pop	{r3, pc}

0000f152 <z_log_vprintk>:
{
    f152:	b500      	push	{lr}
    f154:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    f156:	9103      	str	r1, [sp, #12]
    f158:	9002      	str	r0, [sp, #8]
    f15a:	2000      	movs	r0, #0
    f15c:	9001      	str	r0, [sp, #4]
    f15e:	9000      	str	r0, [sp, #0]
    f160:	4603      	mov	r3, r0
    f162:	4602      	mov	r2, r0
    f164:	4601      	mov	r1, r0
    f166:	f7f6 f959 	bl	541c <z_impl_z_log_msg2_runtime_vcreate>
}
    f16a:	b005      	add	sp, #20
    f16c:	f85d fb04 	ldr.w	pc, [sp], #4

0000f170 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    f170:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    f172:	f7f5 fe25 	bl	4dc0 <log_init>
	}

	return 0;
}
    f176:	2000      	movs	r0, #0
    f178:	bd08      	pop	{r3, pc}

0000f17a <z_log_get_tag>:
}
    f17a:	2000      	movs	r0, #0
    f17c:	4770      	bx	lr

0000f17e <out_func>:
{
    f17e:	b500      	push	{lr}
    f180:	b083      	sub	sp, #12
		char x = (char)c;
    f182:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    f186:	680b      	ldr	r3, [r1, #0]
    f188:	684a      	ldr	r2, [r1, #4]
    f18a:	6852      	ldr	r2, [r2, #4]
    f18c:	2101      	movs	r1, #1
    f18e:	f10d 0007 	add.w	r0, sp, #7
    f192:	4798      	blx	r3
}
    f194:	2000      	movs	r0, #0
    f196:	b003      	add	sp, #12
    f198:	f85d fb04 	ldr.w	pc, [sp], #4

0000f19c <cr_out_func>:
{
    f19c:	b538      	push	{r3, r4, r5, lr}
    f19e:	4604      	mov	r4, r0
    f1a0:	460d      	mov	r5, r1
	out_func(c, ctx);
    f1a2:	f7ff ffec 	bl	f17e <out_func>
	if (c == '\n') {
    f1a6:	2c0a      	cmp	r4, #10
    f1a8:	d001      	beq.n	f1ae <cr_out_func+0x12>
}
    f1aa:	2000      	movs	r0, #0
    f1ac:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    f1ae:	4629      	mov	r1, r5
    f1b0:	200d      	movs	r0, #13
    f1b2:	f7ff ffe4 	bl	f17e <out_func>
    f1b6:	e7f8      	b.n	f1aa <cr_out_func+0xe>

0000f1b8 <buffer_write>:
{
    f1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f1ba:	4607      	mov	r7, r0
    f1bc:	460d      	mov	r5, r1
    f1be:	4614      	mov	r4, r2
    f1c0:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    f1c2:	4632      	mov	r2, r6
    f1c4:	4621      	mov	r1, r4
    f1c6:	4628      	mov	r0, r5
    f1c8:	47b8      	blx	r7
		buf += processed;
    f1ca:	4405      	add	r5, r0
	} while (len != 0);
    f1cc:	1a24      	subs	r4, r4, r0
    f1ce:	d1f8      	bne.n	f1c2 <buffer_write+0xa>
}
    f1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f1d2 <color_prefix>:
{
    f1d2:	b508      	push	{r3, lr}
    f1d4:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    f1d6:	2201      	movs	r2, #1
    f1d8:	f7f5 ff98 	bl	510c <color_print>
}
    f1dc:	bd08      	pop	{r3, pc}

0000f1de <color_postfix>:
{
    f1de:	b508      	push	{r3, lr}
    f1e0:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    f1e2:	2200      	movs	r2, #0
    f1e4:	f7f5 ff92 	bl	510c <color_print>
}
    f1e8:	bd08      	pop	{r3, pc}

0000f1ea <postfix_print>:
{
    f1ea:	b538      	push	{r3, r4, r5, lr}
    f1ec:	4605      	mov	r5, r0
    f1ee:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    f1f0:	f001 0101 	and.w	r1, r1, #1
    f1f4:	f7ff fff3 	bl	f1de <color_postfix>
	newline_print(output, flags);
    f1f8:	4621      	mov	r1, r4
    f1fa:	4628      	mov	r0, r5
    f1fc:	f7f5 ff9c 	bl	5138 <newline_print>
}
    f200:	bd38      	pop	{r3, r4, r5, pc}

0000f202 <log_msg2_hexdump>:
{
    f202:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f206:	b083      	sub	sp, #12
    f208:	4680      	mov	r8, r0
    f20a:	460e      	mov	r6, r1
    f20c:	4615      	mov	r5, r2
    f20e:	461f      	mov	r7, r3
    f210:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f214:	462c      	mov	r4, r5
    f216:	2d10      	cmp	r5, #16
    f218:	bf28      	it	cs
    f21a:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    f21c:	f8cd 9000 	str.w	r9, [sp]
    f220:	463b      	mov	r3, r7
    f222:	4622      	mov	r2, r4
    f224:	4631      	mov	r1, r6
    f226:	4640      	mov	r0, r8
    f228:	f7f5 ff9a 	bl	5160 <hexdump_line_print>
		data += length;
    f22c:	4426      	add	r6, r4
	} while (len);
    f22e:	1b2d      	subs	r5, r5, r4
    f230:	d1f0      	bne.n	f214 <log_msg2_hexdump+0x12>
}
    f232:	b003      	add	sp, #12
    f234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000f238 <log_output_flush>:
{
    f238:	b510      	push	{r4, lr}
    f23a:	4604      	mov	r4, r0
		     output->control_block->offset,
    f23c:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    f23e:	6853      	ldr	r3, [r2, #4]
    f240:	6812      	ldr	r2, [r2, #0]
    f242:	6881      	ldr	r1, [r0, #8]
    f244:	6800      	ldr	r0, [r0, #0]
    f246:	f7ff ffb7 	bl	f1b8 <buffer_write>
	output->control_block->offset = 0;
    f24a:	6863      	ldr	r3, [r4, #4]
    f24c:	2200      	movs	r2, #0
    f24e:	601a      	str	r2, [r3, #0]
}
    f250:	bd10      	pop	{r4, pc}

0000f252 <z_log_msg2_finalize>:
{
    f252:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    f254:	b198      	cbz	r0, f27e <z_log_msg2_finalize+0x2c>
    f256:	460e      	mov	r6, r1
    f258:	4614      	mov	r4, r2
    f25a:	4619      	mov	r1, r3
    f25c:	4605      	mov	r5, r0
	if (data) {
    f25e:	b143      	cbz	r3, f272 <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
    f260:	f100 0310 	add.w	r3, r0, #16
    f264:	f3c2 2049 	ubfx	r0, r2, #9, #10
    f268:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    f26c:	4418      	add	r0, r3
    f26e:	f001 f9e4 	bl	1063a <memcpy>
	msg->hdr.desc = desc;
    f272:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    f274:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
    f276:	4628      	mov	r0, r5
    f278:	f7f5 fe84 	bl	4f84 <z_log_msg2_commit>
}
    f27c:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    f27e:	f7f5 fe61 	bl	4f44 <z_log_dropped>
		return;
    f282:	e7fb      	b.n	f27c <z_log_msg2_finalize+0x2a>

0000f284 <abort_function>:
{
    f284:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    f286:	2000      	movs	r0, #0
    f288:	f7f5 fd20 	bl	4ccc <sys_reboot>

0000f28c <z_log_msg2_runtime_create>:
{
    f28c:	b510      	push	{r4, lr}
    f28e:	b086      	sub	sp, #24
	va_start(ap, fmt);
    f290:	ac0b      	add	r4, sp, #44	; 0x2c
    f292:	9405      	str	r4, [sp, #20]
    f294:	9403      	str	r4, [sp, #12]
    f296:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f298:	9402      	str	r4, [sp, #8]
    f29a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f29c:	9401      	str	r4, [sp, #4]
    f29e:	9c08      	ldr	r4, [sp, #32]
    f2a0:	9400      	str	r4, [sp, #0]
    f2a2:	f7f6 f8bb 	bl	541c <z_impl_z_log_msg2_runtime_vcreate>
}
    f2a6:	b006      	add	sp, #24
    f2a8:	bd10      	pop	{r4, pc}

0000f2aa <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f2aa:	b538      	push	{r3, r4, r5, lr}
    f2ac:	4604      	mov	r4, r0

	if (esf != NULL) {
    f2ae:	460d      	mov	r5, r1
    f2b0:	b111      	cbz	r1, f2b8 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    f2b2:	4608      	mov	r0, r1
    f2b4:	f7f6 fcda 	bl	5c6c <esf_dump>
	}
	z_fatal_error(reason, esf);
    f2b8:	4629      	mov	r1, r5
    f2ba:	4620      	mov	r0, r4
    f2bc:	f7fa ffa6 	bl	a20c <z_fatal_error>
}
    f2c0:	bd38      	pop	{r3, r4, r5, pc}

0000f2c2 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    f2c2:	b508      	push	{r3, lr}
    f2c4:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    f2c6:	6800      	ldr	r0, [r0, #0]
    f2c8:	f7ff ffef 	bl	f2aa <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    f2cc:	bd08      	pop	{r3, pc}

0000f2ce <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    f2ce:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    f2d0:	2100      	movs	r1, #0
    f2d2:	2001      	movs	r0, #1
    f2d4:	f7ff ffe9 	bl	f2aa <z_arm_fatal_error>
}
    f2d8:	bd08      	pop	{r3, pc}

0000f2da <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    f2da:	b508      	push	{r3, lr}
	handler();
    f2dc:	f7f6 fd62 	bl	5da4 <z_SysNmiOnReset>
	z_arm_int_exit();
    f2e0:	f7f6 fe58 	bl	5f94 <z_arm_exc_exit>
}
    f2e4:	bd08      	pop	{r3, pc}

0000f2e6 <memory_fault_recoverable>:
}
    f2e6:	2000      	movs	r0, #0
    f2e8:	4770      	bx	lr

0000f2ea <z_log_msg2_runtime_create>:
{
    f2ea:	b510      	push	{r4, lr}
    f2ec:	b086      	sub	sp, #24
	va_start(ap, fmt);
    f2ee:	ac0b      	add	r4, sp, #44	; 0x2c
    f2f0:	9405      	str	r4, [sp, #20]
    f2f2:	9403      	str	r4, [sp, #12]
    f2f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f2f6:	9402      	str	r4, [sp, #8]
    f2f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f2fa:	9401      	str	r4, [sp, #4]
    f2fc:	9c08      	ldr	r4, [sp, #32]
    f2fe:	9400      	str	r4, [sp, #0]
    f300:	f7f6 f88c 	bl	541c <z_impl_z_log_msg2_runtime_vcreate>
}
    f304:	b006      	add	sp, #24
    f306:	bd10      	pop	{r4, pc}

0000f308 <fault_handle>:
{
    f308:	b508      	push	{r3, lr}
	*recoverable = false;
    f30a:	2300      	movs	r3, #0
    f30c:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    f30e:	1ecb      	subs	r3, r1, #3
    f310:	2b09      	cmp	r3, #9
    f312:	d81a      	bhi.n	f34a <fault_handle+0x42>
    f314:	e8df f003 	tbb	[pc, r3]
    f318:	110d0905 	.word	0x110d0905
    f31c:	19191919 	.word	0x19191919
    f320:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    f322:	4611      	mov	r1, r2
    f324:	f7f7 f888 	bl	6438 <hard_fault>
}
    f328:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    f32a:	2100      	movs	r1, #0
    f32c:	f7f6 ffa6 	bl	627c <mem_manage_fault>
		break;
    f330:	e7fa      	b.n	f328 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    f332:	2100      	movs	r1, #0
    f334:	f7f6 fe3c 	bl	5fb0 <bus_fault>
		break;
    f338:	e7f6      	b.n	f328 <fault_handle+0x20>
		reason = usage_fault(esf);
    f33a:	f7f6 fee1 	bl	6100 <usage_fault>
		break;
    f33e:	e7f3      	b.n	f328 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    f340:	4611      	mov	r1, r2
    f342:	f7f6 ff67 	bl	6214 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f346:	2000      	movs	r0, #0
		break;
    f348:	e7ee      	b.n	f328 <fault_handle+0x20>
		reserved_exception(esf, fault);
    f34a:	f7f6 ff77 	bl	623c <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f34e:	2000      	movs	r0, #0
	return reason;
    f350:	e7ea      	b.n	f328 <fault_handle+0x20>

0000f352 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    f352:	6843      	ldr	r3, [r0, #4]
    f354:	1e5a      	subs	r2, r3, #1
		&&
    f356:	4213      	tst	r3, r2
    f358:	d106      	bne.n	f368 <mpu_partition_is_valid+0x16>
		&&
    f35a:	2b1f      	cmp	r3, #31
    f35c:	d906      	bls.n	f36c <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    f35e:	6803      	ldr	r3, [r0, #0]
		&&
    f360:	421a      	tst	r2, r3
    f362:	d005      	beq.n	f370 <mpu_partition_is_valid+0x1e>
    f364:	2000      	movs	r0, #0
    f366:	4770      	bx	lr
    f368:	2000      	movs	r0, #0
    f36a:	4770      	bx	lr
    f36c:	2000      	movs	r0, #0
    f36e:	4770      	bx	lr
    f370:	2001      	movs	r0, #1
}
    f372:	4770      	bx	lr

0000f374 <z_log_msg2_runtime_create>:
{
    f374:	b510      	push	{r4, lr}
    f376:	b086      	sub	sp, #24
	va_start(ap, fmt);
    f378:	ac0b      	add	r4, sp, #44	; 0x2c
    f37a:	9405      	str	r4, [sp, #20]
    f37c:	9403      	str	r4, [sp, #12]
    f37e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f380:	9402      	str	r4, [sp, #8]
    f382:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f384:	9401      	str	r4, [sp, #4]
    f386:	9c08      	ldr	r4, [sp, #32]
    f388:	9400      	str	r4, [sp, #0]
    f38a:	f7f6 f847 	bl	541c <z_impl_z_log_msg2_runtime_vcreate>
}
    f38e:	b006      	add	sp, #24
    f390:	bd10      	pop	{r4, pc}

0000f392 <mpu_configure_region>:
{
    f392:	b500      	push	{lr}
    f394:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    f396:	680b      	ldr	r3, [r1, #0]
    f398:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    f39a:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    f39c:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    f39e:	2b20      	cmp	r3, #32
    f3a0:	d912      	bls.n	f3c8 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    f3a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    f3a6:	d811      	bhi.n	f3cc <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    f3a8:	3b01      	subs	r3, #1
    f3aa:	fab3 f383 	clz	r3, r3
    f3ae:	f1c3 031f 	rsb	r3, r3, #31
    f3b2:	005b      	lsls	r3, r3, #1
    f3b4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    f3b8:	4313      	orrs	r3, r2
    f3ba:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    f3bc:	a901      	add	r1, sp, #4
    f3be:	f7f7 fa4d 	bl	685c <region_allocate_and_init>
}
    f3c2:	b005      	add	sp, #20
    f3c4:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    f3c8:	2308      	movs	r3, #8
    f3ca:	e7f5      	b.n	f3b8 <mpu_configure_region+0x26>
		return REGION_4G;
    f3cc:	233e      	movs	r3, #62	; 0x3e
    f3ce:	e7f3      	b.n	f3b8 <mpu_configure_region+0x26>

0000f3d0 <_stdout_hook_default>:
}
    f3d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f3d4:	4770      	bx	lr

0000f3d6 <_stdin_hook_default>:
}
    f3d6:	2000      	movs	r0, #0
    f3d8:	4770      	bx	lr

0000f3da <_read>:
{
    f3da:	b508      	push	{r3, lr}
    f3dc:	4608      	mov	r0, r1
    f3de:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
    f3e0:	f7f7 fb96 	bl	6b10 <z_impl_zephyr_read_stdin>
}
    f3e4:	bd08      	pop	{r3, pc}

0000f3e6 <_write>:
{
    f3e6:	b508      	push	{r3, lr}
    f3e8:	4608      	mov	r0, r1
    f3ea:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    f3ec:	f7f7 fba6 	bl	6b3c <z_impl_zephyr_write_stdout>
}
    f3f0:	bd08      	pop	{r3, pc}

0000f3f2 <_close>:
}
    f3f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f3f6:	4770      	bx	lr

0000f3f8 <_lseek>:
}
    f3f8:	2000      	movs	r0, #0
    f3fa:	4770      	bx	lr

0000f3fc <_isatty>:
}
    f3fc:	2802      	cmp	r0, #2
    f3fe:	bfcc      	ite	gt
    f400:	2000      	movgt	r0, #0
    f402:	2001      	movle	r0, #1
    f404:	4770      	bx	lr

0000f406 <_kill>:
}
    f406:	2000      	movs	r0, #0
    f408:	4770      	bx	lr

0000f40a <_getpid>:
}
    f40a:	2000      	movs	r0, #0
    f40c:	4770      	bx	lr

0000f40e <_fstat>:
	st->st_mode = S_IFCHR;
    f40e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    f412:	604b      	str	r3, [r1, #4]
}
    f414:	2000      	movs	r0, #0
    f416:	4770      	bx	lr

0000f418 <__errno>:
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
    f418:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    f41a:	f7fa fec1 	bl	a1a0 <z_impl_z_errno>
	return z_errno();
}
    f41e:	bd08      	pop	{r3, pc}

0000f420 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f420:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f424:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    f428:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    f42c:	2a08      	cmp	r2, #8
    f42e:	d001      	beq.n	f434 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    f430:	2000      	movs	r0, #0
    f432:	4770      	bx	lr
                switch(var2)
    f434:	2b02      	cmp	r3, #2
    f436:	d001      	beq.n	f43c <nrf52_errata_197+0x1c>
                        return false;
    f438:	2000      	movs	r0, #0
    f43a:	4770      	bx	lr
                        return true;
    f43c:	2001      	movs	r0, #1
    #endif
}
    f43e:	4770      	bx	lr

0000f440 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    f440:	2806      	cmp	r0, #6
    f442:	d000      	beq.n	f446 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    f444:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    f446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f44a:	2201      	movs	r2, #1
    f44c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    f450:	f3bf 8f4f 	dsb	sy
        __WFE();
    f454:	bf20      	wfe
    while (true)
    f456:	e7fd      	b.n	f454 <pm_state_set+0x14>

0000f458 <pm_state_exit_post_ops>:
    f458:	2300      	movs	r3, #0
    f45a:	f383 8811 	msr	BASEPRI, r3
    f45e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    f462:	4770      	bx	lr

0000f464 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    f464:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    f466:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    f46a:	0089      	lsls	r1, r1, #2
    f46c:	3140      	adds	r1, #64	; 0x40
}
    f46e:	4408      	add	r0, r1
    f470:	4770      	bx	lr

0000f472 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    f472:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    f474:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    f478:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    f47c:	4770      	bx	lr

0000f47e <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    f47e:	6900      	ldr	r0, [r0, #16]
}
    f480:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    f484:	4770      	bx	lr

0000f486 <set_off_state>:
	__asm__ volatile(
    f486:	f04f 0320 	mov.w	r3, #32
    f48a:	f3ef 8211 	mrs	r2, BASEPRI
    f48e:	f383 8812 	msr	BASEPRI_MAX, r3
    f492:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    f496:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    f498:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    f49c:	d001      	beq.n	f4a2 <set_off_state+0x1c>
    f49e:	428b      	cmp	r3, r1
    f4a0:	d107      	bne.n	f4b2 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    f4a2:	2301      	movs	r3, #1
    f4a4:	6003      	str	r3, [r0, #0]
	int err = 0;
    f4a6:	2000      	movs	r0, #0
	__asm__ volatile(
    f4a8:	f382 8811 	msr	BASEPRI, r2
    f4ac:	f3bf 8f6f 	isb	sy
}
    f4b0:	4770      	bx	lr
		err = -EPERM;
    f4b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f4b6:	e7f7      	b.n	f4a8 <set_off_state+0x22>

0000f4b8 <set_starting_state>:
	__asm__ volatile(
    f4b8:	f04f 0320 	mov.w	r3, #32
    f4bc:	f3ef 8211 	mrs	r2, BASEPRI
    f4c0:	f383 8812 	msr	BASEPRI_MAX, r3
    f4c4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    f4c8:	6803      	ldr	r3, [r0, #0]
    f4ca:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    f4ce:	f003 0307 	and.w	r3, r3, #7
    f4d2:	2b01      	cmp	r3, #1
    f4d4:	d008      	beq.n	f4e8 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    f4d6:	458c      	cmp	ip, r1
    f4d8:	d009      	beq.n	f4ee <set_starting_state+0x36>
		err = -EPERM;
    f4da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    f4de:	f382 8811 	msr	BASEPRI, r2
    f4e2:	f3bf 8f6f 	isb	sy
}
    f4e6:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    f4e8:	6001      	str	r1, [r0, #0]
	int err = 0;
    f4ea:	2000      	movs	r0, #0
    f4ec:	e7f7      	b.n	f4de <set_starting_state+0x26>
		err = -EALREADY;
    f4ee:	f06f 0077 	mvn.w	r0, #119	; 0x77
    f4f2:	e7f4      	b.n	f4de <set_starting_state+0x26>

0000f4f4 <set_on_state>:
	__asm__ volatile(
    f4f4:	f04f 0320 	mov.w	r3, #32
    f4f8:	f3ef 8211 	mrs	r2, BASEPRI
    f4fc:	f383 8812 	msr	BASEPRI_MAX, r3
    f500:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    f504:	6803      	ldr	r3, [r0, #0]
    f506:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f50a:	f043 0302 	orr.w	r3, r3, #2
    f50e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    f510:	f382 8811 	msr	BASEPRI, r2
    f514:	f3bf 8f6f 	isb	sy
}
    f518:	4770      	bx	lr

0000f51a <clkstarted_handle>:
{
    f51a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f51c:	4606      	mov	r6, r0
    f51e:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    f520:	f7ff ffa0 	bl	f464 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    f524:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    f526:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    f528:	2300      	movs	r3, #0
    f52a:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    f52e:	f7ff ffe1 	bl	f4f4 <set_on_state>
	if (callback) {
    f532:	b11d      	cbz	r5, f53c <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    f534:	463a      	mov	r2, r7
    f536:	4621      	mov	r1, r4
    f538:	4630      	mov	r0, r6
    f53a:	47a8      	blx	r5
}
    f53c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f53e <async_start>:
{
    f53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f542:	4606      	mov	r6, r0
    f544:	4690      	mov	r8, r2
    f546:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    f548:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    f54a:	4629      	mov	r1, r5
    f54c:	f7ff ff8a 	bl	f464 <get_sub_data>
    f550:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    f552:	9906      	ldr	r1, [sp, #24]
    f554:	3008      	adds	r0, #8
    f556:	f7ff ffaf 	bl	f4b8 <set_starting_state>
	if (err < 0) {
    f55a:	2800      	cmp	r0, #0
    f55c:	db09      	blt.n	f572 <async_start+0x34>
	subdata->cb = cb;
    f55e:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    f562:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    f564:	4629      	mov	r1, r5
    f566:	4630      	mov	r0, r6
    f568:	f7ff ff83 	bl	f472 <get_sub_config>
    f56c:	6803      	ldr	r3, [r0, #0]
    f56e:	4798      	blx	r3
	return 0;
    f570:	2000      	movs	r0, #0
}
    f572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f576 <api_start>:
{
    f576:	b510      	push	{r4, lr}
    f578:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    f57a:	2480      	movs	r4, #128	; 0x80
    f57c:	9400      	str	r4, [sp, #0]
    f57e:	f7ff ffde 	bl	f53e <async_start>
}
    f582:	b002      	add	sp, #8
    f584:	bd10      	pop	{r4, pc}

0000f586 <onoff_started_callback>:
{
    f586:	b510      	push	{r4, lr}
    f588:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    f58a:	b2c9      	uxtb	r1, r1
    f58c:	f7ff ff77 	bl	f47e <get_onoff_manager>
	notify(mgr, 0);
    f590:	2100      	movs	r1, #0
    f592:	47a0      	blx	r4
}
    f594:	bd10      	pop	{r4, pc}

0000f596 <hfclk_start>:
{
    f596:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    f598:	2001      	movs	r0, #1
    f59a:	f7f9 fc37 	bl	8e0c <nrfx_clock_start>
}
    f59e:	bd08      	pop	{r3, pc}

0000f5a0 <lfclk_start>:
{
    f5a0:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    f5a2:	2000      	movs	r0, #0
    f5a4:	f7f9 fc32 	bl	8e0c <nrfx_clock_start>
}
    f5a8:	bd08      	pop	{r3, pc}

0000f5aa <hfclk_stop>:
{
    f5aa:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    f5ac:	2001      	movs	r0, #1
    f5ae:	f7f9 fca3 	bl	8ef8 <nrfx_clock_stop>
}
    f5b2:	bd08      	pop	{r3, pc}

0000f5b4 <lfclk_stop>:
{
    f5b4:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    f5b6:	2000      	movs	r0, #0
    f5b8:	f7f9 fc9e 	bl	8ef8 <nrfx_clock_stop>
}
    f5bc:	bd08      	pop	{r3, pc}

0000f5be <api_stop>:
{
    f5be:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    f5c0:	2280      	movs	r2, #128	; 0x80
    f5c2:	f7f7 fc0b 	bl	6ddc <stop>
}
    f5c6:	bd08      	pop	{r3, pc}

0000f5c8 <blocking_start_callback>:
{
    f5c8:	b508      	push	{r3, lr}
    f5ca:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    f5cc:	f7fb fcd2 	bl	af74 <z_impl_k_sem_give>
}
    f5d0:	bd08      	pop	{r3, pc}

0000f5d2 <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f5d2:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    f5d6:	f020 0001 	bic.w	r0, r0, #1
    f5da:	0540      	lsls	r0, r0, #21
    f5dc:	0d40      	lsrs	r0, r0, #21
    f5de:	f240 2306 	movw	r3, #518	; 0x206
    f5e2:	4298      	cmp	r0, r3
    f5e4:	d033      	beq.n	f64e <get_drive+0x7c>
    f5e6:	d816      	bhi.n	f616 <get_drive+0x44>
    f5e8:	2806      	cmp	r0, #6
    f5ea:	d02c      	beq.n	f646 <get_drive+0x74>
    f5ec:	d906      	bls.n	f5fc <get_drive+0x2a>
    f5ee:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    f5f2:	d10d      	bne.n	f610 <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    f5f4:	2301      	movs	r3, #1
    f5f6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f5f8:	2000      	movs	r0, #0
		break;
    f5fa:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f5fc:	b300      	cbz	r0, f640 <get_drive+0x6e>
    f5fe:	2802      	cmp	r0, #2
    f600:	d103      	bne.n	f60a <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    f602:	2304      	movs	r3, #4
    f604:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f606:	2000      	movs	r0, #0
		break;
    f608:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f60a:	f06f 0015 	mvn.w	r0, #21
    f60e:	4770      	bx	lr
    f610:	f06f 0015 	mvn.w	r0, #21
    f614:	4770      	bx	lr
    f616:	f240 4302 	movw	r3, #1026	; 0x402
    f61a:	4298      	cmp	r0, r3
    f61c:	d01b      	beq.n	f656 <get_drive+0x84>
    f61e:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    f622:	d103      	bne.n	f62c <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    f624:	2303      	movs	r3, #3
    f626:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f628:	2000      	movs	r0, #0
		break;
    f62a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f62c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    f630:	d103      	bne.n	f63a <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    f632:	2302      	movs	r3, #2
    f634:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f636:	2000      	movs	r0, #0
		break;
    f638:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f63a:	f06f 0015 	mvn.w	r0, #21
    f63e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    f640:	2000      	movs	r0, #0
    f642:	7008      	strb	r0, [r1, #0]
		break;
    f644:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    f646:	2306      	movs	r3, #6
    f648:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f64a:	2000      	movs	r0, #0
		break;
    f64c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    f64e:	2307      	movs	r3, #7
    f650:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f652:	2000      	movs	r0, #0
		break;
    f654:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    f656:	2305      	movs	r3, #5
    f658:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f65a:	2000      	movs	r0, #0
}
    f65c:	4770      	bx	lr

0000f65e <get_pull>:
	if (flags & GPIO_PULL_UP) {
    f65e:	f010 0f10 	tst.w	r0, #16
    f662:	d104      	bne.n	f66e <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    f664:	f010 0f20 	tst.w	r0, #32
    f668:	d103      	bne.n	f672 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    f66a:	2000      	movs	r0, #0
    f66c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    f66e:	2003      	movs	r0, #3
    f670:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    f672:	2001      	movs	r0, #1
}
    f674:	4770      	bx	lr

0000f676 <gpio_nrfx_port_get_raw>:
	return port->config;
    f676:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f678:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    f67a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    f67e:	600b      	str	r3, [r1, #0]
}
    f680:	2000      	movs	r0, #0
    f682:	4770      	bx	lr

0000f684 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    f684:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f686:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    f688:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    f68c:	4042      	eors	r2, r0
    f68e:	400a      	ands	r2, r1
    f690:	4042      	eors	r2, r0
    p_reg->OUT = value;
    f692:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    f696:	2000      	movs	r0, #0
    f698:	4770      	bx	lr

0000f69a <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    f69a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f69c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    f69e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    f6a2:	2000      	movs	r0, #0
    f6a4:	4770      	bx	lr

0000f6a6 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    f6a6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f6a8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    f6aa:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    f6ae:	2000      	movs	r0, #0
    f6b0:	4770      	bx	lr

0000f6b2 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    f6b2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f6b4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    f6b6:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    f6ba:	404b      	eors	r3, r1
    p_reg->OUT = value;
    f6bc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    f6c0:	2000      	movs	r0, #0
    f6c2:	4770      	bx	lr

0000f6c4 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    f6c4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    f6c8:	d007      	beq.n	f6da <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    f6ca:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    f6ce:	d00d      	beq.n	f6ec <get_trigger+0x28>
    f6d0:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    f6d4:	d008      	beq.n	f6e8 <get_trigger+0x24>
    f6d6:	2001      	movs	r0, #1
}
    f6d8:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    f6da:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    f6de:	d001      	beq.n	f6e4 <get_trigger+0x20>
    f6e0:	2005      	movs	r0, #5
    f6e2:	4770      	bx	lr
    f6e4:	2004      	movs	r0, #4
    f6e6:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    f6e8:	2002      	movs	r0, #2
    f6ea:	4770      	bx	lr
    f6ec:	2003      	movs	r0, #3
    f6ee:	4770      	bx	lr

0000f6f0 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    f6f0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f6f2:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    f6f4:	f04f 0120 	mov.w	r1, #32
    f6f8:	f3ef 8211 	mrs	r2, BASEPRI
    f6fc:	f381 8812 	msr	BASEPRI_MAX, r1
    f700:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f704:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    f708:	b131      	cbz	r1, f718 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f70a:	2100      	movs	r1, #0
    f70c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    f710:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f714:	2101      	movs	r1, #1
    f716:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    f718:	f382 8811 	msr	BASEPRI, r2
    f71c:	f3bf 8f6f 	isb	sy
}
    f720:	4770      	bx	lr

0000f722 <uarte_nrfx_configure>:
{
    f722:	b570      	push	{r4, r5, r6, lr}
    f724:	b082      	sub	sp, #8
    f726:	4606      	mov	r6, r0
    f728:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    f72a:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    f72c:	794b      	ldrb	r3, [r1, #5]
    f72e:	2b01      	cmp	r3, #1
    f730:	d006      	beq.n	f740 <uarte_nrfx_configure+0x1e>
    f732:	2b03      	cmp	r3, #3
    f734:	d011      	beq.n	f75a <uarte_nrfx_configure+0x38>
    f736:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    f73a:	4618      	mov	r0, r3
    f73c:	b002      	add	sp, #8
    f73e:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    f740:	2300      	movs	r3, #0
    f742:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    f746:	79a3      	ldrb	r3, [r4, #6]
    f748:	2b03      	cmp	r3, #3
    f74a:	d137      	bne.n	f7bc <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    f74c:	79e3      	ldrb	r3, [r4, #7]
    f74e:	b143      	cbz	r3, f762 <uarte_nrfx_configure+0x40>
    f750:	2b01      	cmp	r3, #1
    f752:	d010      	beq.n	f776 <uarte_nrfx_configure+0x54>
    f754:	f06f 0385 	mvn.w	r3, #133	; 0x85
    f758:	e7ef      	b.n	f73a <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    f75a:	2310      	movs	r3, #16
    f75c:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    f760:	e7f1      	b.n	f746 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    f762:	2300      	movs	r3, #0
    f764:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    f768:	7923      	ldrb	r3, [r4, #4]
    f76a:	b143      	cbz	r3, f77e <uarte_nrfx_configure+0x5c>
    f76c:	2b02      	cmp	r3, #2
    f76e:	d021      	beq.n	f7b4 <uarte_nrfx_configure+0x92>
    f770:	f06f 0385 	mvn.w	r3, #133	; 0x85
    f774:	e7e1      	b.n	f73a <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    f776:	2301      	movs	r3, #1
    f778:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    f77c:	e7f4      	b.n	f768 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    f77e:	2300      	movs	r3, #0
    f780:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    f784:	6821      	ldr	r1, [r4, #0]
    f786:	4630      	mov	r0, r6
    f788:	f7f7 ff30 	bl	75ec <baudrate_set>
    f78c:	4603      	mov	r3, r0
    f78e:	b9c0      	cbnz	r0, f7c2 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    f790:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    f792:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    f794:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    f798:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    f79c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    f7a0:	4331      	orrs	r1, r6
    f7a2:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    f7a4:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    f7a8:	3504      	adds	r5, #4
    f7aa:	e894 0003 	ldmia.w	r4, {r0, r1}
    f7ae:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    f7b2:	e7c2      	b.n	f73a <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    f7b4:	230e      	movs	r3, #14
    f7b6:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    f7ba:	e7e3      	b.n	f784 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    f7bc:	f06f 0385 	mvn.w	r3, #133	; 0x85
    f7c0:	e7bb      	b.n	f73a <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    f7c2:	f06f 0385 	mvn.w	r3, #133	; 0x85
    f7c6:	e7b8      	b.n	f73a <uarte_nrfx_configure+0x18>

0000f7c8 <uarte_nrfx_config_get>:
{
    f7c8:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    f7ca:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    f7cc:	3304      	adds	r3, #4
    f7ce:	e893 0003 	ldmia.w	r3, {r0, r1}
    f7d2:	e882 0003 	stmia.w	r2, {r0, r1}
}
    f7d6:	2000      	movs	r0, #0
    f7d8:	4770      	bx	lr

0000f7da <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    f7da:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f7dc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    f7de:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    f7e2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    f7e6:	4770      	bx	lr

0000f7e8 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    f7e8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f7ea:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    f7ec:	685b      	ldr	r3, [r3, #4]
    f7ee:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f7f2:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    f7f6:	b929      	cbnz	r1, f804 <is_tx_ready+0x1c>
    f7f8:	b933      	cbnz	r3, f808 <is_tx_ready+0x20>
    f7fa:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    f7fe:	b92b      	cbnz	r3, f80c <is_tx_ready+0x24>
    f800:	2000      	movs	r0, #0
    f802:	4770      	bx	lr
    f804:	2001      	movs	r0, #1
    f806:	4770      	bx	lr
    f808:	2000      	movs	r0, #0
    f80a:	4770      	bx	lr
    f80c:	2001      	movs	r0, #1
}
    f80e:	4770      	bx	lr

0000f810 <uarte_enable>:
	struct uarte_nrfx_data *data = dev->data;
    f810:	6903      	ldr	r3, [r0, #16]
	if (data->async) {
    f812:	68db      	ldr	r3, [r3, #12]
    f814:	b123      	cbz	r3, f820 <uarte_enable+0x10>
		bool disabled = data->async->low_power_mask == 0;
    f816:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
		data->async->low_power_mask |= mask;
    f81a:	4311      	orrs	r1, r2
    f81c:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
	const struct uarte_nrfx_config *config = dev->config;
    f820:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f822:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f824:	2208      	movs	r2, #8
    f826:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    f82a:	4770      	bx	lr

0000f82c <tx_start>:
{
    f82c:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    f82e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f830:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    f832:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    f836:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f83a:	2200      	movs	r2, #0
    f83c:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    f840:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    f844:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    f848:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    f84c:	685b      	ldr	r3, [r3, #4]
    f84e:	f013 0f10 	tst.w	r3, #16
    f852:	d102      	bne.n	f85a <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f854:	2301      	movs	r3, #1
    f856:	60a3      	str	r3, [r4, #8]
}
    f858:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    f85a:	2101      	movs	r1, #1
    f85c:	f7ff ffd8 	bl	f810 <uarte_enable>
    p_reg->INTENSET = mask;
    f860:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    f864:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    f868:	e7f4      	b.n	f854 <tx_start+0x28>

0000f86a <uart_disable>:
	const struct uarte_nrfx_config *config = dev->config;
    f86a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f86c:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    f86e:	2200      	movs	r2, #0
    f870:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    f874:	4770      	bx	lr

0000f876 <uarte_nrfx_rx_counting_init>:
	const struct uarte_nrfx_config *cfg = dev->config;
    f876:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f878:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    f87a:	2204      	movs	r2, #4
    f87c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    f880:	2000      	movs	r0, #0
    f882:	4770      	bx	lr

0000f884 <start_tx_locked>:
{
    f884:	b538      	push	{r3, r4, r5, lr}
    f886:	4605      	mov	r5, r0
    f888:	460c      	mov	r4, r1
	if (!is_tx_ready(dev)) {
    f88a:	f7ff ffad 	bl	f7e8 <is_tx_ready>
    f88e:	b920      	cbnz	r0, f89a <start_tx_locked+0x16>
		data->async->pending_tx = true;
    f890:	68e3      	ldr	r3, [r4, #12]
    f892:	2201      	movs	r2, #1
    f894:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    f898:	bd38      	pop	{r3, r4, r5, pc}
		data->async->pending_tx = false;
    f89a:	68e3      	ldr	r3, [r4, #12]
    f89c:	2200      	movs	r2, #0
    f89e:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    f8a2:	68e3      	ldr	r3, [r4, #12]
    f8a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f8a8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    f8ac:	68e3      	ldr	r3, [r4, #12]
    f8ae:	695a      	ldr	r2, [r3, #20]
    f8b0:	6919      	ldr	r1, [r3, #16]
    f8b2:	4628      	mov	r0, r5
    f8b4:	f7ff ffba 	bl	f82c <tx_start>
}
    f8b8:	e7ee      	b.n	f898 <start_tx_locked+0x14>

0000f8ba <user_callback>:
{
    f8ba:	b508      	push	{r3, lr}
	struct uarte_nrfx_data *data = dev->data;
    f8bc:	6903      	ldr	r3, [r0, #16]
	if (data->async->user_callback) {
    f8be:	68da      	ldr	r2, [r3, #12]
    f8c0:	6813      	ldr	r3, [r2, #0]
    f8c2:	b10b      	cbz	r3, f8c8 <user_callback+0xe>
		data->async->user_callback(dev, evt, data->async->user_data);
    f8c4:	6852      	ldr	r2, [r2, #4]
    f8c6:	4798      	blx	r3
}
    f8c8:	bd08      	pop	{r3, pc}

0000f8ca <notify_uart_rx_rdy>:
{
    f8ca:	b500      	push	{lr}
    f8cc:	b087      	sub	sp, #28
	struct uarte_nrfx_data *data = dev->data;
    f8ce:	6902      	ldr	r2, [r0, #16]
	struct uart_event evt = {
    f8d0:	2300      	movs	r3, #0
    f8d2:	9301      	str	r3, [sp, #4]
    f8d4:	9302      	str	r3, [sp, #8]
    f8d6:	9303      	str	r3, [sp, #12]
    f8d8:	9304      	str	r3, [sp, #16]
    f8da:	9305      	str	r3, [sp, #20]
    f8dc:	2302      	movs	r3, #2
    f8de:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    f8e2:	68d3      	ldr	r3, [r2, #12]
    f8e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
	struct uart_event evt = {
    f8e6:	9202      	str	r2, [sp, #8]
		.data.rx.offset = data->async->rx_offset
    f8e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	struct uart_event evt = {
    f8ea:	9303      	str	r3, [sp, #12]
    f8ec:	9104      	str	r1, [sp, #16]
	user_callback(dev, &evt);
    f8ee:	a901      	add	r1, sp, #4
    f8f0:	f7ff ffe3 	bl	f8ba <user_callback>
}
    f8f4:	b007      	add	sp, #28
    f8f6:	f85d fb04 	ldr.w	pc, [sp], #4

0000f8fa <rx_buf_release>:
	if (*buf) {
    f8fa:	680b      	ldr	r3, [r1, #0]
    f8fc:	b19b      	cbz	r3, f926 <rx_buf_release+0x2c>
{
    f8fe:	b530      	push	{r4, r5, lr}
    f900:	b087      	sub	sp, #28
    f902:	460c      	mov	r4, r1
		struct uart_event evt = {
    f904:	2500      	movs	r5, #0
    f906:	9501      	str	r5, [sp, #4]
    f908:	9502      	str	r5, [sp, #8]
    f90a:	9503      	str	r5, [sp, #12]
    f90c:	9504      	str	r5, [sp, #16]
    f90e:	9505      	str	r5, [sp, #20]
    f910:	2304      	movs	r3, #4
    f912:	f88d 3004 	strb.w	r3, [sp, #4]
			.data.rx_buf.buf = *buf,
    f916:	680b      	ldr	r3, [r1, #0]
		struct uart_event evt = {
    f918:	9302      	str	r3, [sp, #8]
		user_callback(dev, &evt);
    f91a:	a901      	add	r1, sp, #4
    f91c:	f7ff ffcd 	bl	f8ba <user_callback>
		*buf = NULL;
    f920:	6025      	str	r5, [r4, #0]
}
    f922:	b007      	add	sp, #28
    f924:	bd30      	pop	{r4, r5, pc}
    f926:	4770      	bx	lr

0000f928 <notify_rx_disable>:
{
    f928:	b500      	push	{lr}
    f92a:	b087      	sub	sp, #28
	struct uart_event evt = {
    f92c:	2300      	movs	r3, #0
    f92e:	9301      	str	r3, [sp, #4]
    f930:	9302      	str	r3, [sp, #8]
    f932:	9303      	str	r3, [sp, #12]
    f934:	9304      	str	r3, [sp, #16]
    f936:	9305      	str	r3, [sp, #20]
    f938:	2305      	movs	r3, #5
    f93a:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    f93e:	a901      	add	r1, sp, #4
    f940:	f7ff ffbb 	bl	f8ba <user_callback>
}
    f944:	b007      	add	sp, #28
    f946:	f85d fb04 	ldr.w	pc, [sp], #4

0000f94a <uarte_nrfx_rx_buf_rsp>:
{
    f94a:	b430      	push	{r4, r5}
	struct uarte_nrfx_data *data = dev->data;
    f94c:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    f94e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f950:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    f952:	f04f 0020 	mov.w	r0, #32
    f956:	f3ef 8c11 	mrs	ip, BASEPRI
    f95a:	f380 8812 	msr	BASEPRI_MAX, r0
    f95e:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    f962:	68e0      	ldr	r0, [r4, #12]
    f964:	6e05      	ldr	r5, [r0, #96]	; 0x60
    f966:	b1ad      	cbz	r5, f994 <uarte_nrfx_rx_buf_rsp+0x4a>
	} else if (data->async->rx_next_buf == NULL) {
    f968:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    f96a:	b9b5      	cbnz	r5, f99a <uarte_nrfx_rx_buf_rsp+0x50>
		data->async->rx_next_buf = buf;
    f96c:	66c1      	str	r1, [r0, #108]	; 0x6c
		data->async->rx_next_buf_len = len;
    f96e:	68e0      	ldr	r0, [r4, #12]
    f970:	6702      	str	r2, [r0, #112]	; 0x70
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    f972:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    f976:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    f97a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f97e:	f042 0220 	orr.w	r2, r2, #32
    f982:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		err = 0;
    f986:	2000      	movs	r0, #0
	__asm__ volatile(
    f988:	f38c 8811 	msr	BASEPRI, ip
    f98c:	f3bf 8f6f 	isb	sy
}
    f990:	bc30      	pop	{r4, r5}
    f992:	4770      	bx	lr
		err = -EACCES;
    f994:	f06f 000c 	mvn.w	r0, #12
    f998:	e7f6      	b.n	f988 <uarte_nrfx_rx_buf_rsp+0x3e>
		err = -EBUSY;
    f99a:	f06f 000f 	mvn.w	r0, #15
    f99e:	e7f3      	b.n	f988 <uarte_nrfx_rx_buf_rsp+0x3e>

0000f9a0 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    f9a0:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
    f9a2:	68d8      	ldr	r0, [r3, #12]
    f9a4:	b120      	cbz	r0, f9b0 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
    f9a6:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
    f9a8:	68db      	ldr	r3, [r3, #12]
    f9aa:	605a      	str	r2, [r3, #4]
	return 0;
    f9ac:	2000      	movs	r0, #0
    f9ae:	4770      	bx	lr
		return -ENOTSUP;
    f9b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    f9b4:	4770      	bx	lr

0000f9b6 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = dev->data;
    f9b6:	6902      	ldr	r2, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    f9b8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f9ba:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
    f9bc:	68d0      	ldr	r0, [r2, #12]
    f9be:	b960      	cbnz	r0, f9da <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f9c0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    f9c4:	b160      	cbz	r0, f9e0 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    f9c6:	7d52      	ldrb	r2, [r2, #21]
    f9c8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f9ca:	2000      	movs	r0, #0
    f9cc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    f9d0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f9d4:	2201      	movs	r2, #1
    f9d6:	601a      	str	r2, [r3, #0]
	return 0;
    f9d8:	4770      	bx	lr
		return -ENOTSUP;
    f9da:	f06f 0085 	mvn.w	r0, #133	; 0x85
    f9de:	4770      	bx	lr
		return -1;
    f9e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    f9e4:	4770      	bx	lr

0000f9e6 <wait_tx_ready>:
{
    f9e6:	b570      	push	{r4, r5, r6, lr}
    f9e8:	4606      	mov	r6, r0
    f9ea:	e014      	b.n	fa16 <wait_tx_ready+0x30>
		if (res) {
    f9ec:	b17d      	cbz	r5, fa0e <wait_tx_ready+0x28>
	__asm__ volatile(
    f9ee:	f04f 0320 	mov.w	r3, #32
    f9f2:	f3ef 8411 	mrs	r4, BASEPRI
    f9f6:	f383 8812 	msr	BASEPRI_MAX, r3
    f9fa:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    f9fe:	4630      	mov	r0, r6
    fa00:	f7ff fef2 	bl	f7e8 <is_tx_ready>
    fa04:	b9a0      	cbnz	r0, fa30 <wait_tx_ready+0x4a>
	__asm__ volatile(
    fa06:	f384 8811 	msr	BASEPRI, r4
    fa0a:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    fa0e:	2021      	movs	r0, #33	; 0x21
    fa10:	2100      	movs	r1, #0
    fa12:	f7fc fd8f 	bl	c534 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    fa16:	2464      	movs	r4, #100	; 0x64
    fa18:	4630      	mov	r0, r6
    fa1a:	f7ff fee5 	bl	f7e8 <is_tx_ready>
    fa1e:	4605      	mov	r5, r0
    fa20:	2800      	cmp	r0, #0
    fa22:	d1e3      	bne.n	f9ec <wait_tx_ready+0x6>
    fa24:	2001      	movs	r0, #1
    fa26:	f000 fc7e 	bl	10326 <nrfx_busy_wait>
    fa2a:	3c01      	subs	r4, #1
    fa2c:	d1f4      	bne.n	fa18 <wait_tx_ready+0x32>
    fa2e:	e7dd      	b.n	f9ec <wait_tx_ready+0x6>
}
    fa30:	4620      	mov	r0, r4
    fa32:	bd70      	pop	{r4, r5, r6, pc}

0000fa34 <uarte_nrfx_rx_disable>:
{
    fa34:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    fa36:	6905      	ldr	r5, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    fa38:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    fa3a:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    fa3c:	68eb      	ldr	r3, [r5, #12]
    fa3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    fa40:	b1ba      	cbz	r2, fa72 <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
    fa42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    fa44:	b153      	cbz	r3, fa5c <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    fa46:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    fa4a:	f023 0320 	bic.w	r3, r3, #32
    fa4e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fa52:	2300      	movs	r3, #0
    fa54:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    fa58:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
    fa5c:	68e8      	ldr	r0, [r5, #12]
    fa5e:	3088      	adds	r0, #136	; 0x88
	z_impl_k_timer_stop(timer);
    fa60:	f000 fda5 	bl	105ae <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    fa64:	68eb      	ldr	r3, [r5, #12]
    fa66:	2000      	movs	r0, #0
    fa68:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fa6c:	2301      	movs	r3, #1
    fa6e:	6063      	str	r3, [r4, #4]
}
    fa70:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    fa72:	f06f 000d 	mvn.w	r0, #13
    fa76:	e7fb      	b.n	fa70 <uarte_nrfx_rx_disable+0x3c>

0000fa78 <error_isr>:
{
    fa78:	b510      	push	{r4, lr}
    fa7a:	b086      	sub	sp, #24
    fa7c:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    fa7e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    fa80:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    fa82:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    fa86:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
	struct uart_event evt = {
    fa8a:	2300      	movs	r3, #0
    fa8c:	9301      	str	r3, [sp, #4]
    fa8e:	9302      	str	r3, [sp, #8]
    fa90:	9303      	str	r3, [sp, #12]
    fa92:	9304      	str	r3, [sp, #16]
    fa94:	9305      	str	r3, [sp, #20]
    fa96:	2306      	movs	r3, #6
    fa98:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    fa9c:	f012 0f01 	tst.w	r2, #1
    faa0:	d108      	bne.n	fab4 <error_isr+0x3c>
    faa2:	f012 0f02 	tst.w	r2, #2
    faa6:	d111      	bne.n	facc <error_isr+0x54>
    faa8:	f012 0f04 	tst.w	r2, #4
    faac:	d110      	bne.n	fad0 <error_isr+0x58>
    faae:	f002 0208 	and.w	r2, r2, #8
    fab2:	e000      	b.n	fab6 <error_isr+0x3e>
    fab4:	2201      	movs	r2, #1
	struct uart_event evt = {
    fab6:	f88d 2008 	strb.w	r2, [sp, #8]
	user_callback(dev, &evt);
    faba:	a901      	add	r1, sp, #4
    fabc:	4620      	mov	r0, r4
    fabe:	f7ff fefc 	bl	f8ba <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    fac2:	4620      	mov	r0, r4
    fac4:	f7ff ffb6 	bl	fa34 <uarte_nrfx_rx_disable>
}
    fac8:	b006      	add	sp, #24
    faca:	bd10      	pop	{r4, pc}
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    facc:	2202      	movs	r2, #2
    face:	e7f2      	b.n	fab6 <error_isr+0x3e>
    fad0:	2204      	movs	r2, #4
    fad2:	e7f0      	b.n	fab6 <error_isr+0x3e>

0000fad4 <uarte_nrfx_tx_abort>:
{
    fad4:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    fad6:	6903      	ldr	r3, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    fad8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    fada:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
    fadc:	68da      	ldr	r2, [r3, #12]
    fade:	6891      	ldr	r1, [r2, #8]
    fae0:	b151      	cbz	r1, faf8 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
    fae2:	2400      	movs	r4, #0
    fae4:	f882 40d4 	strb.w	r4, [r2, #212]	; 0xd4
	k_timer_stop(&data->async->tx_timeout_timer);
    fae8:	68d8      	ldr	r0, [r3, #12]
    faea:	3028      	adds	r0, #40	; 0x28
    faec:	f000 fd5f 	bl	105ae <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    faf0:	2301      	movs	r3, #1
    faf2:	60eb      	str	r3, [r5, #12]
	return 0;
    faf4:	4620      	mov	r0, r4
}
    faf6:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    faf8:	f06f 000d 	mvn.w	r0, #13
    fafc:	e7fb      	b.n	faf6 <uarte_nrfx_tx_abort+0x22>

0000fafe <tx_timeout>:
{
    fafe:	b508      	push	{r3, lr}
	return timer->user_data;
    fb00:	6b43      	ldr	r3, [r0, #52]	; 0x34
	(void) uarte_nrfx_tx_abort(data->dev);
    fb02:	6818      	ldr	r0, [r3, #0]
    fb04:	f7ff ffe6 	bl	fad4 <uarte_nrfx_tx_abort>
}
    fb08:	bd08      	pop	{r3, pc}

0000fb0a <rx_timeout>:
{
    fb0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb0c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	const struct device *dev = data->dev;
    fb0e:	6826      	ldr	r6, [r4, #0]
	const struct uarte_nrfx_config *cfg = dev->config;
    fb10:	6872      	ldr	r2, [r6, #4]
	if (data->async->is_in_irq) {
    fb12:	68e3      	ldr	r3, [r4, #12]
    fb14:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
    fb18:	2b00      	cmp	r3, #0
    fb1a:	d138      	bne.n	fb8e <rx_timeout+0x84>
    fb1c:	f003 07ff 	and.w	r7, r3, #255	; 0xff
	return config->uarte_regs;
    fb20:	6813      	ldr	r3, [r2, #0]
    p_reg->INTENCLR = mask;
    fb22:	2210      	movs	r2, #16
    fb24:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    fb28:	68e3      	ldr	r3, [r4, #12]
    fb2a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    fb2e:	6f59      	ldr	r1, [r3, #116]	; 0x74
    fb30:	4291      	cmp	r1, r2
    fb32:	d004      	beq.n	fb3e <rx_timeout+0x34>
		data->async->rx_total_byte_cnt = read;
    fb34:	675a      	str	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    fb36:	68e3      	ldr	r3, [r4, #12]
    fb38:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    fb3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	int32_t len = data->async->rx_total_byte_cnt
    fb3e:	68e3      	ldr	r3, [r4, #12]
    fb40:	6f5d      	ldr	r5, [r3, #116]	; 0x74
		    - data->async->rx_total_user_byte_cnt;
    fb42:	6f9a      	ldr	r2, [r3, #120]	; 0x78
	if (!HW_RX_COUNTING_ENABLED(data) &&
    fb44:	1aad      	subs	r5, r5, r2
    fb46:	d423      	bmi.n	fb90 <rx_timeout+0x86>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    fb48:	68e3      	ldr	r3, [r4, #12]
    fb4a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    fb4c:	18a8      	adds	r0, r5, r2
    fb4e:	6e59      	ldr	r1, [r3, #100]	; 0x64
    fb50:	4288      	cmp	r0, r1
    fb52:	d901      	bls.n	fb58 <rx_timeout+0x4e>
		len = data->async->rx_buf_len - data->async->rx_offset;
    fb54:	1a8d      	subs	r5, r1, r2
		clipped = true;
    fb56:	2701      	movs	r7, #1
	if (len > 0) {
    fb58:	2d00      	cmp	r5, #0
    fb5a:	dd13      	ble.n	fb84 <rx_timeout+0x7a>
		if (clipped ||
    fb5c:	b92f      	cbnz	r7, fb6a <rx_timeout+0x60>
			(data->async->rx_timeout_left
    fb5e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
				< data->async->rx_timeout_slab)) {
    fb62:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		if (clipped ||
    fb66:	428a      	cmp	r2, r1
    fb68:	da16      	bge.n	fb98 <rx_timeout+0x8e>
			notify_uart_rx_rdy(dev, len);
    fb6a:	4629      	mov	r1, r5
    fb6c:	4630      	mov	r0, r6
    fb6e:	f7ff feac 	bl	f8ca <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    fb72:	68e2      	ldr	r2, [r4, #12]
    fb74:	6e93      	ldr	r3, [r2, #104]	; 0x68
    fb76:	442b      	add	r3, r5
    fb78:	6693      	str	r3, [r2, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    fb7a:	68e2      	ldr	r2, [r4, #12]
    fb7c:	6f93      	ldr	r3, [r2, #120]	; 0x78
    fb7e:	442b      	add	r3, r5
    fb80:	6793      	str	r3, [r2, #120]	; 0x78
		if (clipped) {
    fb82:	b96f      	cbnz	r7, fba0 <rx_timeout+0x96>
	const struct uarte_nrfx_config *config = dev->config;
    fb84:	6873      	ldr	r3, [r6, #4]
	return config->uarte_regs;
    fb86:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    fb88:	2210      	movs	r2, #16
    fb8a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    fb8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    fb90:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		len = 0;
    fb94:	2500      	movs	r5, #0
    fb96:	e7d7      	b.n	fb48 <rx_timeout+0x3e>
			data->async->rx_timeout_left -=
    fb98:	1a52      	subs	r2, r2, r1
    fb9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    fb9e:	e7f0      	b.n	fb82 <rx_timeout+0x78>
			k_timer_stop(&data->async->rx_timeout_timer);
    fba0:	68e0      	ldr	r0, [r4, #12]
    fba2:	3088      	adds	r0, #136	; 0x88
    fba4:	f000 fd03 	bl	105ae <z_impl_k_timer_stop>
}
    fba8:	e7ec      	b.n	fb84 <rx_timeout+0x7a>

0000fbaa <endrx_isr>:
{
    fbaa:	b570      	push	{r4, r5, r6, lr}
    fbac:	4605      	mov	r5, r0
	struct uarte_nrfx_data *data = dev->data;
    fbae:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    fbb0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    fbb2:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    fbb4:	68e3      	ldr	r3, [r4, #12]
    fbb6:	2201      	movs	r2, #1
    fbb8:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	k_timer_stop(&data->async->rx_timeout_timer);
    fbbc:	68e0      	ldr	r0, [r4, #12]
    fbbe:	3088      	adds	r0, #136	; 0x88
	z_impl_k_timer_stop(timer);
    fbc0:	f000 fcf5 	bl	105ae <z_impl_k_timer_stop>
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    fbc4:	f8d6 253c 	ldr.w	r2, [r6, #1340]	; 0x53c
				data->async->rx_flush_cnt;
    fbc8:	68e3      	ldr	r3, [r4, #12]
    fbca:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
	const int rx_amount = nrf_uarte_rx_amount_get(uarte) +
    fbce:	4411      	add	r1, r2
	data->async->rx_flush_cnt = 0;
    fbd0:	2200      	movs	r2, #0
    fbd2:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    fbd6:	68e3      	ldr	r3, [r4, #12]
    fbd8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	if (rx_len < 0) {
    fbda:	1a89      	subs	r1, r1, r2
    fbdc:	d40b      	bmi.n	fbf6 <endrx_isr+0x4c>
	data->async->rx_total_user_byte_cnt += rx_len;
    fbde:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    fbe0:	440a      	add	r2, r1
    fbe2:	679a      	str	r2, [r3, #120]	; 0x78
	if (rx_len > 0) {
    fbe4:	2900      	cmp	r1, #0
    fbe6:	dc08      	bgt.n	fbfa <endrx_isr+0x50>
	if (!data->async->rx_enabled) {
    fbe8:	68e1      	ldr	r1, [r4, #12]
    fbea:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    fbee:	b943      	cbnz	r3, fc02 <endrx_isr+0x58>
		data->async->is_in_irq = false;
    fbf0:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
}
    fbf4:	bd70      	pop	{r4, r5, r6, pc}
		rx_len = 0;
    fbf6:	2100      	movs	r1, #0
    fbf8:	e7f1      	b.n	fbde <endrx_isr+0x34>
		notify_uart_rx_rdy(dev, rx_len);
    fbfa:	4628      	mov	r0, r5
    fbfc:	f7ff fe65 	bl	f8ca <notify_uart_rx_rdy>
    fc00:	e7f2      	b.n	fbe8 <endrx_isr+0x3e>
	rx_buf_release(dev, &data->async->rx_buf);
    fc02:	3160      	adds	r1, #96	; 0x60
    fc04:	4628      	mov	r0, r5
    fc06:	f7ff fe78 	bl	f8fa <rx_buf_release>
	__asm__ volatile(
    fc0a:	f04f 0320 	mov.w	r3, #32
    fc0e:	f3ef 8111 	mrs	r1, BASEPRI
    fc12:	f383 8812 	msr	BASEPRI_MAX, r3
    fc16:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    fc1a:	68e3      	ldr	r3, [r4, #12]
    fc1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    fc1e:	b1f2      	cbz	r2, fc5e <endrx_isr+0xb4>
		data->async->rx_buf = data->async->rx_next_buf;
    fc20:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    fc22:	68e3      	ldr	r3, [r4, #12]
    fc24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    fc26:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    fc28:	68e2      	ldr	r2, [r4, #12]
    fc2a:	2300      	movs	r3, #0
    fc2c:	66d3      	str	r3, [r2, #108]	; 0x6c
		data->async->rx_next_buf_len = 0;
    fc2e:	68e2      	ldr	r2, [r4, #12]
    fc30:	6713      	str	r3, [r2, #112]	; 0x70
		data->async->rx_offset = 0;
    fc32:	68e2      	ldr	r2, [r4, #12]
    fc34:	6693      	str	r3, [r2, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fc36:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    fc3a:	b90b      	cbnz	r3, fc40 <endrx_isr+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fc3c:	2301      	movs	r3, #1
    fc3e:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    fc40:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    fc44:	f023 0320 	bic.w	r3, r3, #32
    fc48:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    fc4c:	f381 8811 	msr	BASEPRI, r1
    fc50:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    fc54:	68e3      	ldr	r3, [r4, #12]
    fc56:	2200      	movs	r2, #0
    fc58:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    fc5c:	e7ca      	b.n	fbf4 <endrx_isr+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fc5e:	2301      	movs	r3, #1
    fc60:	6073      	str	r3, [r6, #4]
}
    fc62:	e7f3      	b.n	fc4c <endrx_isr+0xa2>

0000fc64 <setup_tx_cache>:
{
    fc64:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    fc66:	68c3      	ldr	r3, [r0, #12]
    fc68:	68da      	ldr	r2, [r3, #12]
    fc6a:	6a19      	ldr	r1, [r3, #32]
	if (!remaining) {
    fc6c:	1a52      	subs	r2, r2, r1
    fc6e:	d010      	beq.n	fc92 <setup_tx_cache+0x2e>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    fc70:	2a08      	cmp	r2, #8
    fc72:	bf28      	it	cs
    fc74:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    fc76:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
    fc78:	68c3      	ldr	r3, [r0, #12]
    fc7a:	f103 0118 	add.w	r1, r3, #24
    fc7e:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    fc80:	68c0      	ldr	r0, [r0, #12]
    fc82:	6881      	ldr	r1, [r0, #8]
    fc84:	6a03      	ldr	r3, [r0, #32]
    fc86:	4419      	add	r1, r3
    fc88:	3018      	adds	r0, #24
    fc8a:	f000 fcd6 	bl	1063a <memcpy>
	return true;
    fc8e:	2001      	movs	r0, #1
}
    fc90:	bd08      	pop	{r3, pc}
		return false;
    fc92:	2000      	movs	r0, #0
    fc94:	e7fc      	b.n	fc90 <setup_tx_cache+0x2c>

0000fc96 <z_log_msg2_runtime_create>:
{
    fc96:	b510      	push	{r4, lr}
    fc98:	b086      	sub	sp, #24
	va_start(ap, fmt);
    fc9a:	ac0b      	add	r4, sp, #44	; 0x2c
    fc9c:	9405      	str	r4, [sp, #20]
    fc9e:	9403      	str	r4, [sp, #12]
    fca0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    fca2:	9402      	str	r4, [sp, #8]
    fca4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    fca6:	9401      	str	r4, [sp, #4]
    fca8:	9c08      	ldr	r4, [sp, #32]
    fcaa:	9400      	str	r4, [sp, #0]
    fcac:	f7f5 fbb6 	bl	541c <z_impl_z_log_msg2_runtime_vcreate>
}
    fcb0:	b006      	add	sp, #24
    fcb2:	bd10      	pop	{r4, pc}

0000fcb4 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    fcb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fcb8:	b083      	sub	sp, #12
    fcba:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    fcbc:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    fcbe:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    fcc0:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    fcc4:	2100      	movs	r1, #0
    fcc6:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    fcca:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    fcce:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    fcd2:	aa01      	add	r2, sp, #4
    fcd4:	4648      	mov	r0, r9
    fcd6:	f000 fa72 	bl	101be <pinctrl_lookup_state>
	if (ret < 0) {
    fcda:	1e04      	subs	r4, r0, #0
    fcdc:	db07      	blt.n	fcee <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    fcde:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    fce0:	f8d9 2000 	ldr.w	r2, [r9]
    fce4:	7919      	ldrb	r1, [r3, #4]
    fce6:	6818      	ldr	r0, [r3, #0]
    fce8:	f7f8 f9da 	bl	80a0 <pinctrl_configure_pins>
    fcec:	4604      	mov	r4, r0
	if (err < 0) {
    fcee:	2c00      	cmp	r4, #0
    fcf0:	db2c      	blt.n	fd4c <uarte_instance_init+0x98>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    fcf2:	f108 0104 	add.w	r1, r8, #4
    fcf6:	4628      	mov	r0, r5
    fcf8:	f7ff fd13 	bl	f722 <uarte_nrfx_configure>
	if (err) {
    fcfc:	4604      	mov	r4, r0
    fcfe:	bb28      	cbnz	r0, fd4c <uarte_instance_init+0x98>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    fd00:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    fd02:	f013 0f02 	tst.w	r3, #2
    fd06:	d125      	bne.n	fd54 <uarte_instance_init+0xa0>
		}
	}


#ifdef UARTE_ANY_ASYNC
	if (data->async) {
    fd08:	f8d8 300c 	ldr.w	r3, [r8, #12]
    fd0c:	b353      	cbz	r3, fd64 <uarte_instance_init+0xb0>
		err = uarte_nrfx_init(dev);
    fd0e:	4628      	mov	r0, r5
    fd10:	f7f7 fed4 	bl	7abc <uarte_nrfx_init>
		if (err < 0) {
    fd14:	2800      	cmp	r0, #0
    fd16:	db38      	blt.n	fd8a <uarte_instance_init+0xd6>
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    fd18:	687b      	ldr	r3, [r7, #4]
    fd1a:	f013 0f02 	tst.w	r3, #2
    fd1e:	d103      	bne.n	fd28 <uarte_instance_init+0x74>
    p_reg->INTENSET = mask;
    fd20:	f44f 7380 	mov.w	r3, #256	; 0x100
    fd24:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    fd28:	687b      	ldr	r3, [r7, #4]
    fd2a:	f013 0f10 	tst.w	r3, #16
    fd2e:	d003      	beq.n	fd38 <uarte_instance_init+0x84>
    fd30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    fd34:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    fd38:	f108 0314 	add.w	r3, r8, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fd3c:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fd40:	2300      	movs	r3, #0
    fd42:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd46:	2301      	movs	r3, #1
    fd48:	60b3      	str	r3, [r6, #8]
    fd4a:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    fd4c:	4620      	mov	r0, r4
    fd4e:	b003      	add	sp, #12
    fd50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    fd54:	4641      	mov	r1, r8
    fd56:	4630      	mov	r0, r6
    fd58:	f7f7 fe7c 	bl	7a54 <endtx_stoptx_ppi_init>
		if (err < 0) {
    fd5c:	2800      	cmp	r0, #0
    fd5e:	dad3      	bge.n	fd08 <uarte_instance_init+0x54>
			return err;
    fd60:	4604      	mov	r4, r0
    fd62:	e7f3      	b.n	fd4c <uarte_instance_init+0x98>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    fd64:	2308      	movs	r3, #8
    fd66:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
		if (!cfg->disable_rx) {
    fd6a:	7a3b      	ldrb	r3, [r7, #8]
    fd6c:	2b00      	cmp	r3, #0
    fd6e:	d1d3      	bne.n	fd18 <uarte_instance_init+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fd70:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    fd74:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    fd78:	f108 0315 	add.w	r3, r8, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    fd7c:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    fd80:	2301      	movs	r3, #1
    fd82:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd86:	6033      	str	r3, [r6, #0]
}
    fd88:	e7c6      	b.n	fd18 <uarte_instance_init+0x64>
			return err;
    fd8a:	4604      	mov	r4, r0
    fd8c:	e7de      	b.n	fd4c <uarte_instance_init+0x98>

0000fd8e <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    fd8e:	b510      	push	{r4, lr}
    fd90:	4604      	mov	r4, r0
    fd92:	2200      	movs	r2, #0
    fd94:	2101      	movs	r1, #1
    fd96:	2002      	movs	r0, #2
    fd98:	f7f5 ffce 	bl	5d38 <z_arm_irq_priority_set>
    fd9c:	2002      	movs	r0, #2
    fd9e:	f7f5 ffaf 	bl	5d00 <arch_irq_enable>
    fda2:	2100      	movs	r1, #0
    fda4:	4620      	mov	r0, r4
    fda6:	f7ff ff85 	bl	fcb4 <uarte_instance_init>
    fdaa:	bd10      	pop	{r4, pc}

0000fdac <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    fdac:	b510      	push	{r4, lr}
    fdae:	4604      	mov	r4, r0
    fdb0:	2200      	movs	r2, #0
    fdb2:	2101      	movs	r1, #1
    fdb4:	2028      	movs	r0, #40	; 0x28
    fdb6:	f7f5 ffbf 	bl	5d38 <z_arm_irq_priority_set>
    fdba:	2028      	movs	r0, #40	; 0x28
    fdbc:	f7f5 ffa0 	bl	5d00 <arch_irq_enable>
    fdc0:	2100      	movs	r1, #0
    fdc2:	4620      	mov	r0, r4
    fdc4:	f7ff ff76 	bl	fcb4 <uarte_instance_init>
    fdc8:	bd10      	pop	{r4, pc}

0000fdca <rx_flush>:
{
    fdca:	b5f0      	push	{r4, r5, r6, r7, lr}
    fdcc:	b083      	sub	sp, #12
	const struct uarte_nrfx_config *config = dev->config;
    fdce:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    fdd0:	681c      	ldr	r4, [r3, #0]
    return p_reg->RXD.AMOUNT;
    fdd2:	f8d4 753c 	ldr.w	r7, [r4, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    fdd6:	460d      	mov	r5, r1
    fdd8:	b311      	cbz	r1, fe20 <rx_flush+0x56>
    fdda:	4616      	mov	r6, r2
	if (buf) {
    fddc:	b315      	cbz	r5, fe24 <rx_flush+0x5a>
__ssp_bos_icheck3(memset, void *, int)
    fdde:	2100      	movs	r1, #0
    fde0:	4628      	mov	r0, r5
    fde2:	f000 fc38 	bl	10656 <memset>
		flush_buf = buf;
    fde6:	462b      	mov	r3, r5
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    fde8:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    fdec:	f8c4 6538 	str.w	r6, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fdf0:	2300      	movs	r3, #0
    fdf2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    fdf6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fdfa:	2301      	movs	r3, #1
    fdfc:	62e3      	str	r3, [r4, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fdfe:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    fe02:	2b00      	cmp	r3, #0
    fe04:	d0fb      	beq.n	fdfe <rx_flush+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fe06:	2300      	movs	r3, #0
    fe08:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    fe0c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (!buf) {
    fe10:	b155      	cbz	r5, fe28 <rx_flush+0x5e>
    return p_reg->RXD.AMOUNT;
    fe12:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
	if (rx_amount != prev_rx_amount) {
    fe16:	4287      	cmp	r7, r0
    fe18:	d00c      	beq.n	fe34 <rx_flush+0x6a>
		return rx_amount;
    fe1a:	b2c0      	uxtb	r0, r0
}
    fe1c:	b003      	add	sp, #12
    fe1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    fe20:	2605      	movs	r6, #5
    fe22:	e7db      	b.n	fddc <rx_flush+0x12>
		flush_buf = tmp_buf;
    fe24:	466b      	mov	r3, sp
    fe26:	e7df      	b.n	fde8 <rx_flush+0x1e>
    fe28:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
		return nrf_uarte_rx_amount_get(uarte);
    fe2c:	b2c0      	uxtb	r0, r0
    fe2e:	e7f5      	b.n	fe1c <rx_flush+0x52>
			return rx_amount;
    fe30:	b2c0      	uxtb	r0, r0
    fe32:	e7f3      	b.n	fe1c <rx_flush+0x52>
	for (int i = 0; i < flush_len; i++) {
    fe34:	2300      	movs	r3, #0
    fe36:	42b3      	cmp	r3, r6
    fe38:	d204      	bcs.n	fe44 <rx_flush+0x7a>
		if (buf[i] != dirty) {
    fe3a:	5cea      	ldrb	r2, [r5, r3]
    fe3c:	2a00      	cmp	r2, #0
    fe3e:	d1f7      	bne.n	fe30 <rx_flush+0x66>
	for (int i = 0; i < flush_len; i++) {
    fe40:	3301      	adds	r3, #1
    fe42:	e7f8      	b.n	fe36 <rx_flush+0x6c>
	return 0;
    fe44:	2000      	movs	r0, #0
    fe46:	e7e9      	b.n	fe1c <rx_flush+0x52>

0000fe48 <async_uart_release>:
{
    fe48:	b570      	push	{r4, r5, r6, lr}
    fe4a:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    fe4c:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
    fe4e:	f04f 0320 	mov.w	r3, #32
    fe52:	f3ef 8611 	mrs	r6, BASEPRI
    fe56:	f383 8812 	msr	BASEPRI_MAX, r3
    fe5a:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    fe5e:	68d0      	ldr	r0, [r2, #12]
    fe60:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
    fe64:	ea23 0301 	bic.w	r3, r3, r1
    fe68:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    fe6c:	68d5      	ldr	r5, [r2, #12]
    fe6e:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    fe72:	b923      	cbnz	r3, fe7e <async_uart_release+0x36>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    fe74:	2902      	cmp	r1, #2
    fe76:	d007      	beq.n	fe88 <async_uart_release+0x40>
		uart_disable(dev);
    fe78:	4620      	mov	r0, r4
    fe7a:	f7ff fcf6 	bl	f86a <uart_disable>
	__asm__ volatile(
    fe7e:	f386 8811 	msr	BASEPRI, r6
    fe82:	f3bf 8f6f 	isb	sy
}
    fe86:	bd70      	pop	{r4, r5, r6, pc}
				rx_flush(dev, data->async->rx_flush_buffer,
    fe88:	2205      	movs	r2, #5
    fe8a:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    fe8e:	4620      	mov	r0, r4
    fe90:	f7ff ff9b 	bl	fdca <rx_flush>
			data->async->rx_flush_cnt =
    fe94:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
    fe98:	e7ee      	b.n	fe78 <async_uart_release+0x30>

0000fe9a <txstopped_isr>:
{
    fe9a:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe9c:	b087      	sub	sp, #28
    fe9e:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    fea0:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    fea2:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
    fea4:	681f      	ldr	r7, [r3, #0]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    fea6:	685b      	ldr	r3, [r3, #4]
    fea8:	f013 0f10 	tst.w	r3, #16
    feac:	d147      	bne.n	ff3e <txstopped_isr+0xa4>
	if (!data->async->tx_buf) {
    feae:	68e3      	ldr	r3, [r4, #12]
    feb0:	689b      	ldr	r3, [r3, #8]
    feb2:	2b00      	cmp	r3, #0
    feb4:	d041      	beq.n	ff3a <txstopped_isr+0xa0>
	__asm__ volatile(
    feb6:	f04f 0320 	mov.w	r3, #32
    feba:	f3ef 8211 	mrs	r2, BASEPRI
    febe:	f383 8812 	msr	BASEPRI_MAX, r3
    fec2:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    fec6:	68e3      	ldr	r3, [r4, #12]
    fec8:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    fecc:	2900      	cmp	r1, #0
    fece:	db42      	blt.n	ff56 <txstopped_isr+0xbc>
    fed0:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
	__asm__ volatile(
    fed4:	f382 8811 	msr	BASEPRI, r2
    fed8:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    fedc:	68e3      	ldr	r3, [r4, #12]
    fede:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
    fee2:	2a00      	cmp	r2, #0
    fee4:	d13a      	bne.n	ff5c <txstopped_isr+0xc2>
	if (data->async->tx_buf != data->async->xfer_buf) {
    fee6:	6899      	ldr	r1, [r3, #8]
    fee8:	691a      	ldr	r2, [r3, #16]
    feea:	4291      	cmp	r1, r2
    feec:	d004      	beq.n	fef8 <txstopped_isr+0x5e>
		if (amount == data->async->xfer_len) {
    feee:	695a      	ldr	r2, [r3, #20]
    fef0:	42b2      	cmp	r2, r6
    fef2:	d044      	beq.n	ff7e <txstopped_isr+0xe4>
			amount += data->async->tx_cache_offset;
    fef4:	6a1b      	ldr	r3, [r3, #32]
    fef6:	441e      	add	r6, r3
	k_timer_stop(&data->async->tx_timeout_timer);
    fef8:	68e0      	ldr	r0, [r4, #12]
    fefa:	3028      	adds	r0, #40	; 0x28
    fefc:	f000 fb57 	bl	105ae <z_impl_k_timer_stop>
	struct uart_event evt = {
    ff00:	2300      	movs	r3, #0
    ff02:	9301      	str	r3, [sp, #4]
    ff04:	9302      	str	r3, [sp, #8]
    ff06:	9303      	str	r3, [sp, #12]
    ff08:	9304      	str	r3, [sp, #16]
    ff0a:	9305      	str	r3, [sp, #20]
		.data.tx.buf = data->async->tx_buf,
    ff0c:	68e3      	ldr	r3, [r4, #12]
    ff0e:	689a      	ldr	r2, [r3, #8]
	struct uart_event evt = {
    ff10:	9202      	str	r2, [sp, #8]
    ff12:	9603      	str	r6, [sp, #12]
	if (amount == data->async->tx_size) {
    ff14:	68db      	ldr	r3, [r3, #12]
    ff16:	42b3      	cmp	r3, r6
    ff18:	d002      	beq.n	ff20 <txstopped_isr+0x86>
		evt.type = UART_TX_ABORTED;
    ff1a:	2301      	movs	r3, #1
    ff1c:	f88d 3004 	strb.w	r3, [sp, #4]
    p_reg->INTENCLR = mask;
    ff20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    ff24:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    ff28:	68e2      	ldr	r2, [r4, #12]
    ff2a:	2300      	movs	r3, #0
    ff2c:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
    ff2e:	68e2      	ldr	r2, [r4, #12]
    ff30:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
    ff32:	a901      	add	r1, sp, #4
    ff34:	4628      	mov	r0, r5
    ff36:	f7ff fcc0 	bl	f8ba <user_callback>
}
    ff3a:	b007      	add	sp, #28
    ff3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    ff42:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    ff46:	2101      	movs	r1, #1
    ff48:	f7ff ff7e 	bl	fe48 <async_uart_release>
		if (!data->async->tx_size) {
    ff4c:	68e3      	ldr	r3, [r4, #12]
    ff4e:	68db      	ldr	r3, [r3, #12]
    ff50:	2b00      	cmp	r3, #0
    ff52:	d1ac      	bne.n	feae <txstopped_isr+0x14>
    ff54:	e7f1      	b.n	ff3a <txstopped_isr+0xa0>
    return p_reg->TXD.AMOUNT;
    ff56:	f8d7 654c 	ldr.w	r6, [r7, #1356]	; 0x54c
    ff5a:	e7bb      	b.n	fed4 <txstopped_isr+0x3a>
	__asm__ volatile(
    ff5c:	f04f 0320 	mov.w	r3, #32
    ff60:	f3ef 8611 	mrs	r6, BASEPRI
    ff64:	f383 8812 	msr	BASEPRI_MAX, r3
    ff68:	f3bf 8f6f 	isb	sy
		start_tx_locked(dev, data);
    ff6c:	4621      	mov	r1, r4
    ff6e:	4628      	mov	r0, r5
    ff70:	f7ff fc88 	bl	f884 <start_tx_locked>
	__asm__ volatile(
    ff74:	f386 8811 	msr	BASEPRI, r6
    ff78:	f3bf 8f6f 	isb	sy
		return;
    ff7c:	e7dd      	b.n	ff3a <txstopped_isr+0xa0>
			data->async->tx_cache_offset += amount;
    ff7e:	6a1a      	ldr	r2, [r3, #32]
    ff80:	4432      	add	r2, r6
    ff82:	621a      	str	r2, [r3, #32]
			if (setup_tx_cache(data)) {
    ff84:	4620      	mov	r0, r4
    ff86:	f7ff fe6d 	bl	fc64 <setup_tx_cache>
    ff8a:	b910      	cbnz	r0, ff92 <txstopped_isr+0xf8>
			amount = data->async->tx_cache_offset;
    ff8c:	68e3      	ldr	r3, [r4, #12]
    ff8e:	6a1e      	ldr	r6, [r3, #32]
    ff90:	e7b2      	b.n	fef8 <txstopped_isr+0x5e>
	__asm__ volatile(
    ff92:	f04f 0320 	mov.w	r3, #32
    ff96:	f3ef 8611 	mrs	r6, BASEPRI
    ff9a:	f383 8812 	msr	BASEPRI_MAX, r3
    ff9e:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    ffa2:	4621      	mov	r1, r4
    ffa4:	4628      	mov	r0, r5
    ffa6:	f7ff fc6d 	bl	f884 <start_tx_locked>
	__asm__ volatile(
    ffaa:	f386 8811 	msr	BASEPRI, r6
    ffae:	f3bf 8f6f 	isb	sy
				return;
    ffb2:	e7c2      	b.n	ff3a <txstopped_isr+0xa0>

0000ffb4 <rxto_isr>:
{
    ffb4:	b570      	push	{r4, r5, r6, lr}
    ffb6:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    ffb8:	6846      	ldr	r6, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    ffba:	6905      	ldr	r5, [r0, #16]
	rx_buf_release(dev, &data->async->rx_buf);
    ffbc:	68e9      	ldr	r1, [r5, #12]
    ffbe:	3160      	adds	r1, #96	; 0x60
    ffc0:	f7ff fc9b 	bl	f8fa <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
    ffc4:	68e9      	ldr	r1, [r5, #12]
    ffc6:	316c      	adds	r1, #108	; 0x6c
    ffc8:	4620      	mov	r0, r4
    ffca:	f7ff fc96 	bl	f8fa <rx_buf_release>
	if (data->async->rx_enabled) {
    ffce:	68eb      	ldr	r3, [r5, #12]
    ffd0:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
    ffd4:	b152      	cbz	r2, ffec <rxto_isr+0x38>
		data->async->rx_enabled = false;
    ffd6:	2200      	movs	r2, #0
    ffd8:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    ffdc:	6873      	ldr	r3, [r6, #4]
    ffde:	f013 0f10 	tst.w	r3, #16
    ffe2:	d109      	bne.n	fff8 <rxto_isr+0x44>
	notify_rx_disable(dev);
    ffe4:	4620      	mov	r0, r4
    ffe6:	f7ff fc9f 	bl	f928 <notify_rx_disable>
}
    ffea:	bd70      	pop	{r4, r5, r6, pc}
		(void)rx_flush(dev, NULL, 0);
    ffec:	2200      	movs	r2, #0
    ffee:	4611      	mov	r1, r2
    fff0:	4620      	mov	r0, r4
    fff2:	f7ff feea 	bl	fdca <rx_flush>
    fff6:	e7f1      	b.n	ffdc <rxto_isr+0x28>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    fff8:	2102      	movs	r1, #2
    fffa:	4620      	mov	r0, r4
    fffc:	f7ff ff24 	bl	fe48 <async_uart_release>
   10000:	e7f0      	b.n	ffe4 <rxto_isr+0x30>

00010002 <uarte_nrfx_isr_async>:
{
   10002:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   10004:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   10006:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   10008:	6902      	ldr	r2, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1000a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
	if (!HW_RX_COUNTING_ENABLED(data)
   1000e:	bb5b      	cbnz	r3, 10068 <uarte_nrfx_isr_async+0x66>
   10010:	4605      	mov	r5, r0
   10012:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   10016:	bb9b      	cbnz	r3, 10080 <uarte_nrfx_isr_async+0x7e>
   10018:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1001c:	b123      	cbz	r3, 10028 <uarte_nrfx_isr_async+0x26>
    return p_reg->INTENSET & mask;
   1001e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   10022:	f013 0f10 	tst.w	r3, #16
   10026:	d133      	bne.n	10090 <uarte_nrfx_isr_async+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10028:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1002c:	b113      	cbz	r3, 10034 <uarte_nrfx_isr_async+0x32>
   1002e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   10032:	b3b3      	cbz	r3, 100a2 <uarte_nrfx_isr_async+0xa0>
   10034:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   10038:	b113      	cbz	r3, 10040 <uarte_nrfx_isr_async+0x3e>
   1003a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1003e:	b3c3      	cbz	r3, 100b2 <uarte_nrfx_isr_async+0xb0>
   10040:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   10044:	b123      	cbz	r3, 10050 <uarte_nrfx_isr_async+0x4e>
    return p_reg->INTENSET & mask;
   10046:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1004a:	f413 7f80 	tst.w	r3, #256	; 0x100
   1004e:	d138      	bne.n	100c2 <uarte_nrfx_isr_async+0xc0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10050:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   10054:	b19b      	cbz	r3, 1007e <uarte_nrfx_isr_async+0x7c>
    return p_reg->INTENSET & mask;
   10056:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1005a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   1005e:	d00e      	beq.n	1007e <uarte_nrfx_isr_async+0x7c>
		txstopped_isr(dev);
   10060:	4628      	mov	r0, r5
   10062:	f7ff ff1a 	bl	fe9a <txstopped_isr>
   10066:	e00a      	b.n	1007e <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10068:	2300      	movs	r3, #0
   1006a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1006e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   10072:	68d2      	ldr	r2, [r2, #12]
   10074:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
   10078:	3301      	adds	r3, #1
   1007a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
   1007e:	bd38      	pop	{r3, r4, r5, pc}
   10080:	2300      	movs	r3, #0
   10082:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   10086:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
		error_isr(dev);
   1008a:	f7ff fcf5 	bl	fa78 <error_isr>
   1008e:	e7c3      	b.n	10018 <uarte_nrfx_isr_async+0x16>
   10090:	2300      	movs	r3, #0
   10092:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   10096:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		endrx_isr(dev);
   1009a:	4628      	mov	r0, r5
   1009c:	f7ff fd85 	bl	fbaa <endrx_isr>
   100a0:	e7c2      	b.n	10028 <uarte_nrfx_isr_async+0x26>
   100a2:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   100a6:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		rxstarted_isr(dev);
   100aa:	4628      	mov	r0, r5
   100ac:	f7f7 fc98 	bl	79e0 <rxstarted_isr>
   100b0:	e7c0      	b.n	10034 <uarte_nrfx_isr_async+0x32>
   100b2:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   100b6:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		rxto_isr(dev);
   100ba:	4628      	mov	r0, r5
   100bc:	f7ff ff7a 	bl	ffb4 <rxto_isr>
   100c0:	e7be      	b.n	10040 <uarte_nrfx_isr_async+0x3e>
		endtx_isr(dev);
   100c2:	4628      	mov	r0, r5
   100c4:	f7ff fb14 	bl	f6f0 <endtx_isr>
   100c8:	e7c2      	b.n	10050 <uarte_nrfx_isr_async+0x4e>

000100ca <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   100ca:	4770      	bx	lr

000100cc <counter_sub>:
	return (a - b) & COUNTER_MAX;
   100cc:	1a40      	subs	r0, r0, r1
}
   100ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   100d2:	4770      	bx	lr

000100d4 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   100d4:	f100 0350 	add.w	r3, r0, #80	; 0x50
   100d8:	009b      	lsls	r3, r3, #2
   100da:	b29b      	uxth	r3, r3
   100dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   100e0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   100e4:	2200      	movs	r2, #0
   100e6:	601a      	str	r2, [r3, #0]
   100e8:	681b      	ldr	r3, [r3, #0]
}
   100ea:	4770      	bx	lr

000100ec <absolute_time_to_cc>:
}
   100ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   100f0:	4770      	bx	lr

000100f2 <full_int_lock>:
	__asm__ volatile(
   100f2:	f04f 0320 	mov.w	r3, #32
   100f6:	f3ef 8011 	mrs	r0, BASEPRI
   100fa:	f383 8812 	msr	BASEPRI_MAX, r3
   100fe:	f3bf 8f6f 	isb	sy
}
   10102:	4770      	bx	lr

00010104 <full_int_unlock>:
	__asm__ volatile(
   10104:	f380 8811 	msr	BASEPRI, r0
   10108:	f3bf 8f6f 	isb	sy
}
   1010c:	4770      	bx	lr

0001010e <set_absolute_alarm>:
{
   1010e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10110:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   10112:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   10116:	f7f7 fd1f 	bl	7b58 <get_comparator>
   1011a:	4607      	mov	r7, r0
   1011c:	e019      	b.n	10152 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   1011e:	2013      	movs	r0, #19
   10120:	f000 fa33 	bl	1058a <z_impl_k_busy_wait>
}
   10124:	e022      	b.n	1016c <set_absolute_alarm+0x5e>
		event_clear(chan);
   10126:	4630      	mov	r0, r6
   10128:	f7ff ffd4 	bl	100d4 <event_clear>
		event_enable(chan);
   1012c:	4630      	mov	r0, r6
   1012e:	f7f7 fd1b 	bl	7b68 <event_enable>
		set_comparator(chan, cc_val);
   10132:	4629      	mov	r1, r5
   10134:	4630      	mov	r0, r6
   10136:	f7f7 fd05 	bl	7b44 <set_comparator>
		now2 = counter();
   1013a:	f7f7 fd29 	bl	7b90 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1013e:	4284      	cmp	r4, r0
   10140:	d01e      	beq.n	10180 <set_absolute_alarm+0x72>
   10142:	1c81      	adds	r1, r0, #2
   10144:	4628      	mov	r0, r5
   10146:	f7ff ffc1 	bl	100cc <counter_sub>
	} while ((now2 != now) &&
   1014a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1014e:	d917      	bls.n	10180 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   10150:	462f      	mov	r7, r5
		now = counter();
   10152:	f7f7 fd1d 	bl	7b90 <counter>
   10156:	4604      	mov	r4, r0
		set_comparator(chan, now);
   10158:	4601      	mov	r1, r0
   1015a:	4630      	mov	r0, r6
   1015c:	f7f7 fcf2 	bl	7b44 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   10160:	4621      	mov	r1, r4
   10162:	4638      	mov	r0, r7
   10164:	f7ff ffb2 	bl	100cc <counter_sub>
   10168:	2801      	cmp	r0, #1
   1016a:	d0d8      	beq.n	1011e <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1016c:	1ca7      	adds	r7, r4, #2
   1016e:	4639      	mov	r1, r7
   10170:	4628      	mov	r0, r5
   10172:	f7ff ffab 	bl	100cc <counter_sub>
   10176:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1017a:	d9d4      	bls.n	10126 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   1017c:	463d      	mov	r5, r7
   1017e:	e7d2      	b.n	10126 <set_absolute_alarm+0x18>
}
   10180:	4628      	mov	r0, r5
   10182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010184 <compare_set>:
{
   10184:	b5f0      	push	{r4, r5, r6, r7, lr}
   10186:	b083      	sub	sp, #12
   10188:	4604      	mov	r4, r0
   1018a:	4617      	mov	r7, r2
   1018c:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   1018e:	f7f7 fd05 	bl	7b9c <compare_int_lock>
   10192:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   10194:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10196:	9301      	str	r3, [sp, #4]
   10198:	9b08      	ldr	r3, [sp, #32]
   1019a:	9300      	str	r3, [sp, #0]
   1019c:	463a      	mov	r2, r7
   1019e:	462b      	mov	r3, r5
   101a0:	4620      	mov	r0, r4
   101a2:	f7f7 fdeb 	bl	7d7c <compare_set_nolocks>
   101a6:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   101a8:	4631      	mov	r1, r6
   101aa:	4620      	mov	r0, r4
   101ac:	f7f7 fd5a 	bl	7c64 <compare_int_unlock>
}
   101b0:	4628      	mov	r0, r5
   101b2:	b003      	add	sp, #12
   101b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000101b6 <sys_clock_cycle_get_32>:
{
   101b6:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   101b8:	f7f7 fdc0 	bl	7d3c <z_nrf_rtc_timer_read>
}
   101bc:	bd08      	pop	{r3, pc}

000101be <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   101be:	b410      	push	{r4}
	*state = &config->states[0];
   101c0:	6843      	ldr	r3, [r0, #4]
   101c2:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   101c4:	e001      	b.n	101ca <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   101c6:	3408      	adds	r4, #8
   101c8:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   101ca:	6814      	ldr	r4, [r2, #0]
   101cc:	7a03      	ldrb	r3, [r0, #8]
   101ce:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   101d2:	3b01      	subs	r3, #1
   101d4:	f8d0 c004 	ldr.w	ip, [r0, #4]
   101d8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   101dc:	429c      	cmp	r4, r3
   101de:	d804      	bhi.n	101ea <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
   101e0:	7963      	ldrb	r3, [r4, #5]
   101e2:	428b      	cmp	r3, r1
   101e4:	d1ef      	bne.n	101c6 <pinctrl_lookup_state+0x8>
			return 0;
   101e6:	2000      	movs	r0, #0
   101e8:	e001      	b.n	101ee <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
   101ea:	f06f 0001 	mvn.w	r0, #1
}
   101ee:	bc10      	pop	{r4}
   101f0:	4770      	bx	lr

000101f2 <z_log_msg2_runtime_create>:
{
   101f2:	b510      	push	{r4, lr}
   101f4:	b086      	sub	sp, #24
	va_start(ap, fmt);
   101f6:	ac0b      	add	r4, sp, #44	; 0x2c
   101f8:	9405      	str	r4, [sp, #20]
   101fa:	9403      	str	r4, [sp, #12]
   101fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   101fe:	9402      	str	r4, [sp, #8]
   10200:	9c09      	ldr	r4, [sp, #36]	; 0x24
   10202:	9401      	str	r4, [sp, #4]
   10204:	9c08      	ldr	r4, [sp, #32]
   10206:	9400      	str	r4, [sp, #0]
   10208:	f7f5 f908 	bl	541c <z_impl_z_log_msg2_runtime_vcreate>
}
   1020c:	b006      	add	sp, #24
   1020e:	bd10      	pop	{r4, pc}

00010210 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   10210:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   10212:	f7fe fbab 	bl	e96c <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
   10216:	bd08      	pop	{r3, pc}

00010218 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   10218:	b510      	push	{r4, lr}
   1021a:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1021c:	f7f5 fc32 	bl	5a84 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   10220:	f7f5 fcf2 	bl	5c08 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   10224:	4620      	mov	r0, r4
   10226:	f7ff fff3 	bl	10210 <hw_cc3xx_init_internal>
	return res;
}
   1022a:	bd10      	pop	{r4, pc}

0001022c <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1022c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10230:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   10234:	2b08      	cmp	r3, #8
   10236:	d001      	beq.n	1023c <nrf52_errata_36+0x10>
        return false;
   10238:	2000      	movs	r0, #0
   1023a:	4770      	bx	lr
                        return true;
   1023c:	2001      	movs	r0, #1
}
   1023e:	4770      	bx	lr

00010240 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   10240:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10244:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   10248:	2b08      	cmp	r3, #8
   1024a:	d001      	beq.n	10250 <nrf52_errata_66+0x10>
        return false;
   1024c:	2000      	movs	r0, #0
   1024e:	4770      	bx	lr
                        return true;
   10250:	2001      	movs	r0, #1
}
   10252:	4770      	bx	lr

00010254 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   10254:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10258:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1025c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   10260:	2a08      	cmp	r2, #8
   10262:	d001      	beq.n	10268 <nrf52_errata_98+0x14>
        return false;
   10264:	2000      	movs	r0, #0
   10266:	4770      	bx	lr
                switch(var2)
   10268:	2b00      	cmp	r3, #0
   1026a:	d804      	bhi.n	10276 <nrf52_errata_98+0x22>
   1026c:	e8df f003 	tbb	[pc, r3]
   10270:	01          	.byte	0x01
   10271:	00          	.byte	0x00
   10272:	2001      	movs	r0, #1
   10274:	4770      	bx	lr
                        return false;
   10276:	2000      	movs	r0, #0
}
   10278:	4770      	bx	lr

0001027a <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1027a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1027e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   10282:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   10286:	2a08      	cmp	r2, #8
   10288:	d001      	beq.n	1028e <nrf52_errata_103+0x14>
        return false;
   1028a:	2000      	movs	r0, #0
   1028c:	4770      	bx	lr
                switch(var2)
   1028e:	2b00      	cmp	r3, #0
   10290:	d804      	bhi.n	1029c <nrf52_errata_103+0x22>
   10292:	e8df f003 	tbb	[pc, r3]
   10296:	01          	.byte	0x01
   10297:	00          	.byte	0x00
   10298:	2001      	movs	r0, #1
   1029a:	4770      	bx	lr
                        return false;
   1029c:	2000      	movs	r0, #0
}
   1029e:	4770      	bx	lr

000102a0 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   102a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   102a4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   102a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   102ac:	2a08      	cmp	r2, #8
   102ae:	d001      	beq.n	102b4 <nrf52_errata_115+0x14>
        return false;
   102b0:	2000      	movs	r0, #0
   102b2:	4770      	bx	lr
                switch(var2)
   102b4:	2b00      	cmp	r3, #0
   102b6:	d804      	bhi.n	102c2 <nrf52_errata_115+0x22>
   102b8:	e8df f003 	tbb	[pc, r3]
   102bc:	01          	.byte	0x01
   102bd:	00          	.byte	0x00
   102be:	2001      	movs	r0, #1
   102c0:	4770      	bx	lr
                        return false;
   102c2:	2000      	movs	r0, #0
}
   102c4:	4770      	bx	lr

000102c6 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   102c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   102ca:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   102ce:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   102d2:	2a08      	cmp	r2, #8
   102d4:	d001      	beq.n	102da <nrf52_errata_120+0x14>
        return false;
   102d6:	2000      	movs	r0, #0
   102d8:	4770      	bx	lr
                switch(var2)
   102da:	2b00      	cmp	r3, #0
   102dc:	d804      	bhi.n	102e8 <nrf52_errata_120+0x22>
   102de:	e8df f003 	tbb	[pc, r3]
   102e2:	01          	.byte	0x01
   102e3:	00          	.byte	0x00
   102e4:	2001      	movs	r0, #1
   102e6:	4770      	bx	lr
                        return false;
   102e8:	2000      	movs	r0, #0
}
   102ea:	4770      	bx	lr

000102ec <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   102ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   102f0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   102f4:	2b08      	cmp	r3, #8
   102f6:	d001      	beq.n	102fc <nrf52_errata_136+0x10>
        return false;
   102f8:	2000      	movs	r0, #0
   102fa:	4770      	bx	lr
                        return true;
   102fc:	2001      	movs	r0, #1
}
   102fe:	4770      	bx	lr

00010300 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   10300:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10304:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   10308:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1030c:	2a08      	cmp	r2, #8
   1030e:	d001      	beq.n	10314 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   10310:	2000      	movs	r0, #0
   10312:	4770      	bx	lr
                switch(var2)
   10314:	2b04      	cmp	r3, #4
   10316:	d801      	bhi.n	1031c <nrf52_configuration_249+0x1c>
   10318:	2000      	movs	r0, #0
   1031a:	4770      	bx	lr
                        return true;
   1031c:	2001      	movs	r0, #1
    #endif
}
   1031e:	4770      	bx	lr

00010320 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   10320:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   10322:	4780      	blx	r0
}
   10324:	bd08      	pop	{r3, pc}

00010326 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   10326:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   10328:	f000 f92f 	bl	1058a <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   1032c:	bd08      	pop	{r3, pc}

0001032e <clock_initial_lfclksrc_get>:
}
   1032e:	2000      	movs	r0, #0
   10330:	4770      	bx	lr

00010332 <clock_lfclksrc_tweak>:
{
   10332:	b538      	push	{r3, r4, r5, lr}
   10334:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
   10336:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   10338:	2b01      	cmp	r3, #1
   1033a:	d002      	beq.n	10342 <clock_lfclksrc_tweak+0x10>
   1033c:	b933      	cbnz	r3, 1034c <clock_lfclksrc_tweak+0x1a>
   1033e:	2301      	movs	r3, #1
   10340:	e000      	b.n	10344 <clock_lfclksrc_tweak+0x12>
   10342:	2301      	movs	r3, #1
    if (!is_correct_clk)
   10344:	461d      	mov	r5, r3
   10346:	b11b      	cbz	r3, 10350 <clock_lfclksrc_tweak+0x1e>
}
   10348:	4628      	mov	r0, r5
   1034a:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1034c:	2300      	movs	r3, #0
   1034e:	e7f9      	b.n	10344 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   10350:	2000      	movs	r0, #0
   10352:	f7f8 fc7d 	bl	8c50 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   10356:	f7ff ffea 	bl	1032e <clock_initial_lfclksrc_get>
   1035a:	6020      	str	r0, [r4, #0]
   1035c:	e7f4      	b.n	10348 <clock_lfclksrc_tweak+0x16>

0001035e <pin_is_task_output>:
{
   1035e:	b510      	push	{r4, lr}
   10360:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   10362:	f7f8 fe47 	bl	8ff4 <pin_is_output>
   10366:	b128      	cbz	r0, 10374 <pin_is_task_output+0x16>
   10368:	4620      	mov	r0, r4
   1036a:	f7f8 fe2d 	bl	8fc8 <pin_in_use_by_te>
   1036e:	b118      	cbz	r0, 10378 <pin_is_task_output+0x1a>
   10370:	2001      	movs	r0, #1
   10372:	e000      	b.n	10376 <pin_is_task_output+0x18>
   10374:	2000      	movs	r0, #0
}
   10376:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   10378:	2000      	movs	r0, #0
   1037a:	e7fc      	b.n	10376 <pin_is_task_output+0x18>

0001037c <pin_is_input>:
{
   1037c:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   1037e:	f7f8 fe39 	bl	8ff4 <pin_is_output>
   10382:	f080 0001 	eor.w	r0, r0, #1
}
   10386:	b2c0      	uxtb	r0, r0
   10388:	bd08      	pop	{r3, pc}

0001038a <gpiote_polarity_to_trigger>:
}
   1038a:	4770      	bx	lr

0001038c <gpiote_trigger_to_polarity>:
}
   1038c:	4770      	bx	lr

0001038e <is_level>:
}
   1038e:	2803      	cmp	r0, #3
   10390:	bf94      	ite	ls
   10392:	2000      	movls	r0, #0
   10394:	2001      	movhi	r0, #1
   10396:	4770      	bx	lr

00010398 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   10398:	b508      	push	{r3, lr}
  _DoInit();
   1039a:	f7f9 fdf5 	bl	9f88 <_DoInit>
}
   1039e:	bd08      	pop	{r3, pc}

000103a0 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   103a0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   103a2:	f7ff fff9 	bl	10398 <SEGGER_RTT_Init>

	return 0;
}
   103a6:	2000      	movs	r0, #0
   103a8:	bd08      	pop	{r3, pc}

000103aa <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   103aa:	b148      	cbz	r0, 103c0 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   103ac:	68c3      	ldr	r3, [r0, #12]
   103ae:	8818      	ldrh	r0, [r3, #0]
   103b0:	f3c0 0008 	ubfx	r0, r0, #0, #9
   103b4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   103b8:	bf14      	ite	ne
   103ba:	2000      	movne	r0, #0
   103bc:	2001      	moveq	r0, #1
   103be:	4770      	bx	lr
		return false;
   103c0:	2000      	movs	r0, #0
}
   103c2:	4770      	bx	lr

000103c4 <z_log_msg2_runtime_create>:
{
   103c4:	b510      	push	{r4, lr}
   103c6:	b086      	sub	sp, #24
	va_start(ap, fmt);
   103c8:	ac0b      	add	r4, sp, #44	; 0x2c
   103ca:	9405      	str	r4, [sp, #20]
   103cc:	9403      	str	r4, [sp, #12]
   103ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   103d0:	9402      	str	r4, [sp, #8]
   103d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   103d4:	9401      	str	r4, [sp, #4]
   103d6:	9c08      	ldr	r4, [sp, #32]
   103d8:	9400      	str	r4, [sp, #0]
   103da:	f7f5 f81f 	bl	541c <z_impl_z_log_msg2_runtime_vcreate>
}
   103de:	b006      	add	sp, #24
   103e0:	bd10      	pop	{r4, pc}

000103e2 <z_early_memset>:
{
   103e2:	b508      	push	{r3, lr}
   103e4:	f000 f937 	bl	10656 <memset>
}
   103e8:	bd08      	pop	{r3, pc}

000103ea <z_early_memcpy>:
{
   103ea:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   103ec:	f000 f925 	bl	1063a <memcpy>
}
   103f0:	bd08      	pop	{r3, pc}

000103f2 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   103f2:	6902      	ldr	r2, [r0, #16]
   103f4:	6943      	ldr	r3, [r0, #20]
   103f6:	431a      	orrs	r2, r3
   103f8:	f012 0203 	ands.w	r2, r2, #3
   103fc:	d10d      	bne.n	1041a <create_free_list+0x28>
	slab->free_list = NULL;
   103fe:	2100      	movs	r1, #0
   10400:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   10402:	e005      	b.n	10410 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   10404:	6981      	ldr	r1, [r0, #24]
   10406:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   10408:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   1040a:	6901      	ldr	r1, [r0, #16]
   1040c:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1040e:	3201      	adds	r2, #1
   10410:	68c1      	ldr	r1, [r0, #12]
   10412:	4291      	cmp	r1, r2
   10414:	d8f6      	bhi.n	10404 <create_free_list+0x12>
	return 0;
   10416:	2000      	movs	r0, #0
   10418:	4770      	bx	lr
		return -EINVAL;
   1041a:	f06f 0015 	mvn.w	r0, #21
}
   1041e:	4770      	bx	lr

00010420 <k_mem_slab_init>:
{
   10420:	b510      	push	{r4, lr}
   10422:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   10424:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
   10426:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
   10428:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   1042a:	2300      	movs	r3, #0
   1042c:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   1042e:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
   10430:	f7ff ffdf 	bl	103f2 <create_free_list>
	if (rc < 0) {
   10434:	2800      	cmp	r0, #0
   10436:	db01      	blt.n	1043c <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
   10438:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   1043a:	6064      	str	r4, [r4, #4]
}
   1043c:	bd10      	pop	{r4, pc}

0001043e <setup_thread_stack>:
{
   1043e:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   10440:	3207      	adds	r2, #7
   10442:	f022 0207 	bic.w	r2, r2, #7
   10446:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1044a:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   1044e:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   10452:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   10456:	2200      	movs	r2, #0
   10458:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
   1045c:	18c8      	adds	r0, r1, r3
   1045e:	bc10      	pop	{r4}
   10460:	4770      	bx	lr

00010462 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   10462:	f3ef 8005 	mrs	r0, IPSR
}
   10466:	3800      	subs	r0, #0
   10468:	bf18      	it	ne
   1046a:	2001      	movne	r0, #1
   1046c:	4770      	bx	lr

0001046e <k_thread_name_get>:
}
   1046e:	3074      	adds	r0, #116	; 0x74
   10470:	4770      	bx	lr

00010472 <z_impl_k_thread_start>:
{
   10472:	b508      	push	{r3, lr}
	z_sched_start(thread);
   10474:	f7fb fa60 	bl	b938 <z_sched_start>
}
   10478:	bd08      	pop	{r3, pc}

0001047a <z_init_thread_base>:
{
   1047a:	b410      	push	{r4}
	thread_base->pended_on = NULL;
   1047c:	2400      	movs	r4, #0
   1047e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   10480:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   10482:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   10484:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   10486:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   10488:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   1048a:	61c4      	str	r4, [r0, #28]
}
   1048c:	bc10      	pop	{r4}
   1048e:	4770      	bx	lr

00010490 <z_pm_save_idle_exit>:
{
   10490:	b508      	push	{r3, lr}
	pm_system_resume();
   10492:	f7f5 f901 	bl	5698 <pm_system_resume>
	sys_clock_idle_exit();
   10496:	f7ff fe18 	bl	100ca <sys_clock_idle_exit>
}
   1049a:	bd08      	pop	{r3, pc}

0001049c <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   1049c:	4288      	cmp	r0, r1
   1049e:	da00      	bge.n	104a2 <new_prio_for_inheritance+0x6>
   104a0:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   104a2:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   104a6:	db01      	blt.n	104ac <new_prio_for_inheritance+0x10>
   104a8:	4608      	mov	r0, r1
   104aa:	4770      	bx	lr
   104ac:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   104b0:	4770      	bx	lr

000104b2 <adjust_owner_prio>:
{
   104b2:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   104b4:	6880      	ldr	r0, [r0, #8]
   104b6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   104ba:	428b      	cmp	r3, r1
   104bc:	d101      	bne.n	104c2 <adjust_owner_prio+0x10>
	return false;
   104be:	2000      	movs	r0, #0
}
   104c0:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   104c2:	f7fb fbef 	bl	bca4 <z_set_prio>
   104c6:	e7fb      	b.n	104c0 <adjust_owner_prio+0xe>

000104c8 <z_impl_k_mutex_init>:
{
   104c8:	4603      	mov	r3, r0
	mutex->owner = NULL;
   104ca:	2000      	movs	r0, #0
   104cc:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   104ce:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   104d0:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   104d2:	605b      	str	r3, [r3, #4]
}
   104d4:	4770      	bx	lr

000104d6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   104d6:	b13a      	cbz	r2, 104e8 <z_impl_k_sem_init+0x12>
   104d8:	428a      	cmp	r2, r1
   104da:	d308      	bcc.n	104ee <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   104dc:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   104de:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   104e0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   104e2:	6040      	str	r0, [r0, #4]
	return 0;
   104e4:	2000      	movs	r0, #0
   104e6:	4770      	bx	lr
		return -EINVAL;
   104e8:	f06f 0015 	mvn.w	r0, #21
   104ec:	4770      	bx	lr
   104ee:	f06f 0015 	mvn.w	r0, #21
}
   104f2:	4770      	bx	lr

000104f4 <thread_active_elsewhere>:
}
   104f4:	2000      	movs	r0, #0
   104f6:	4770      	bx	lr

000104f8 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   104f8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   104fc:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   10500:	4283      	cmp	r3, r0
   10502:	d001      	beq.n	10508 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   10504:	1ac0      	subs	r0, r0, r3
   10506:	4770      	bx	lr
	return 0;
   10508:	2000      	movs	r0, #0
}
   1050a:	4770      	bx	lr

0001050c <z_reschedule_irqlock>:
{
   1050c:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1050e:	4603      	mov	r3, r0
   10510:	b920      	cbnz	r0, 1051c <z_reschedule_irqlock+0x10>
   10512:	f3ef 8205 	mrs	r2, IPSR
   10516:	b942      	cbnz	r2, 1052a <z_reschedule_irqlock+0x1e>
   10518:	2201      	movs	r2, #1
   1051a:	e000      	b.n	1051e <z_reschedule_irqlock+0x12>
   1051c:	2200      	movs	r2, #0
	if (resched(key)) {
   1051e:	b932      	cbnz	r2, 1052e <z_reschedule_irqlock+0x22>
   10520:	f383 8811 	msr	BASEPRI, r3
   10524:	f3bf 8f6f 	isb	sy
}
   10528:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1052a:	2200      	movs	r2, #0
   1052c:	e7f7      	b.n	1051e <z_reschedule_irqlock+0x12>
   1052e:	4618      	mov	r0, r3
   10530:	f7f5 fc58 	bl	5de4 <arch_swap>
	return ret;
   10534:	e7f8      	b.n	10528 <z_reschedule_irqlock+0x1c>

00010536 <z_priq_dumb_best>:
{
   10536:	4603      	mov	r3, r0
	return list->head == list;
   10538:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1053a:	4283      	cmp	r3, r0
   1053c:	d000      	beq.n	10540 <z_priq_dumb_best+0xa>
}
   1053e:	4770      	bx	lr
	struct k_thread *thread = NULL;
   10540:	2000      	movs	r0, #0
	return thread;
   10542:	e7fc      	b.n	1053e <z_priq_dumb_best+0x8>

00010544 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   10544:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   10546:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   10548:	6083      	str	r3, [r0, #8]
}
   1054a:	4770      	bx	lr

0001054c <remove_timeout>:
{
   1054c:	b510      	push	{r4, lr}
   1054e:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   10550:	f7fc f908 	bl	c764 <next>
   10554:	b148      	cbz	r0, 1056a <remove_timeout+0x1e>
   10556:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   10558:	6920      	ldr	r0, [r4, #16]
   1055a:	6961      	ldr	r1, [r4, #20]
   1055c:	6913      	ldr	r3, [r2, #16]
   1055e:	181b      	adds	r3, r3, r0
   10560:	6950      	ldr	r0, [r2, #20]
   10562:	eb41 0100 	adc.w	r1, r1, r0
   10566:	6113      	str	r3, [r2, #16]
   10568:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   1056a:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   1056c:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   1056e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   10570:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   10572:	2300      	movs	r3, #0
   10574:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   10576:	6063      	str	r3, [r4, #4]
}
   10578:	bd10      	pop	{r4, pc}

0001057a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1057a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1057c:	f7fc fbee 	bl	cd5c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   10580:	bd08      	pop	{r3, pc}

00010582 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   10582:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   10584:	f7fc fbea 	bl	cd5c <sys_clock_tick_get>
}
   10588:	bd08      	pop	{r3, pc}

0001058a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1058a:	b900      	cbnz	r0, 1058e <z_impl_k_busy_wait+0x4>
   1058c:	4770      	bx	lr
{
   1058e:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   10590:	f7f6 fbbc 	bl	6d0c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   10594:	bd08      	pop	{r3, pc}

00010596 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   10596:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   10598:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   1059a:	2300      	movs	r3, #0
   1059c:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
   1059e:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   105a2:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   105a4:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   105a6:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   105a8:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   105aa:	6343      	str	r3, [r0, #52]	; 0x34
}
   105ac:	4770      	bx	lr

000105ae <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   105ae:	b510      	push	{r4, lr}
   105b0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   105b2:	f7fc f9f9 	bl	c9a8 <z_abort_timeout>

	if (inactive) {
   105b6:	b9a0      	cbnz	r0, 105e2 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   105b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   105ba:	b10b      	cbz	r3, 105c0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   105bc:	4620      	mov	r0, r4
   105be:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   105c0:	f104 0018 	add.w	r0, r4, #24
   105c4:	f7fb fd7a 	bl	c0bc <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   105c8:	b158      	cbz	r0, 105e2 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   105ca:	f7fb f95f 	bl	b88c <z_ready_thread>
	__asm__ volatile(
   105ce:	f04f 0320 	mov.w	r3, #32
   105d2:	f3ef 8011 	mrs	r0, BASEPRI
   105d6:	f383 8812 	msr	BASEPRI_MAX, r3
   105da:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   105de:	f7ff ff95 	bl	1050c <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   105e2:	bd10      	pop	{r4, pc}

000105e4 <k_heap_init>:
{
   105e4:	b510      	push	{r4, lr}
   105e6:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   105ea:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   105ec:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   105ee:	f7f3 fdc9 	bl	4184 <sys_heap_init>
}
   105f2:	bd10      	pop	{r4, pc}

000105f4 <fabs>:
   105f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   105f8:	4770      	bx	lr

000105fa <finite>:
   105fa:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
   105fe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   10602:	0fc0      	lsrs	r0, r0, #31
   10604:	4770      	bx	lr

00010606 <__itoa>:
   10606:	1e93      	subs	r3, r2, #2
   10608:	2b22      	cmp	r3, #34	; 0x22
   1060a:	b510      	push	{r4, lr}
   1060c:	460c      	mov	r4, r1
   1060e:	d904      	bls.n	1061a <__itoa+0x14>
   10610:	2300      	movs	r3, #0
   10612:	700b      	strb	r3, [r1, #0]
   10614:	461c      	mov	r4, r3
   10616:	4620      	mov	r0, r4
   10618:	bd10      	pop	{r4, pc}
   1061a:	2a0a      	cmp	r2, #10
   1061c:	d109      	bne.n	10632 <__itoa+0x2c>
   1061e:	2800      	cmp	r0, #0
   10620:	da07      	bge.n	10632 <__itoa+0x2c>
   10622:	232d      	movs	r3, #45	; 0x2d
   10624:	700b      	strb	r3, [r1, #0]
   10626:	4240      	negs	r0, r0
   10628:	2101      	movs	r1, #1
   1062a:	4421      	add	r1, r4
   1062c:	f7fd f89a 	bl	d764 <__utoa>
   10630:	e7f1      	b.n	10616 <__itoa+0x10>
   10632:	2100      	movs	r1, #0
   10634:	e7f9      	b.n	1062a <__itoa+0x24>

00010636 <itoa>:
   10636:	f7ff bfe6 	b.w	10606 <__itoa>

0001063a <memcpy>:
   1063a:	440a      	add	r2, r1
   1063c:	4291      	cmp	r1, r2
   1063e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   10642:	d100      	bne.n	10646 <memcpy+0xc>
   10644:	4770      	bx	lr
   10646:	b510      	push	{r4, lr}
   10648:	f811 4b01 	ldrb.w	r4, [r1], #1
   1064c:	f803 4f01 	strb.w	r4, [r3, #1]!
   10650:	4291      	cmp	r1, r2
   10652:	d1f9      	bne.n	10648 <memcpy+0xe>
   10654:	bd10      	pop	{r4, pc}

00010656 <memset>:
   10656:	4402      	add	r2, r0
   10658:	4603      	mov	r3, r0
   1065a:	4293      	cmp	r3, r2
   1065c:	d100      	bne.n	10660 <memset+0xa>
   1065e:	4770      	bx	lr
   10660:	f803 1b01 	strb.w	r1, [r3], #1
   10664:	e7f9      	b.n	1065a <memset+0x4>

00010666 <_calloc_r>:
   10666:	b538      	push	{r3, r4, r5, lr}
   10668:	fb02 f501 	mul.w	r5, r2, r1
   1066c:	4629      	mov	r1, r5
   1066e:	f7fd f80f 	bl	d690 <_malloc_r>
   10672:	4604      	mov	r4, r0
   10674:	b118      	cbz	r0, 1067e <_calloc_r+0x18>
   10676:	462a      	mov	r2, r5
   10678:	2100      	movs	r1, #0
   1067a:	f7ff ffec 	bl	10656 <memset>
   1067e:	4620      	mov	r0, r4
   10680:	bd38      	pop	{r3, r4, r5, pc}

00010682 <strncpy>:
   10682:	b510      	push	{r4, lr}
   10684:	3901      	subs	r1, #1
   10686:	4603      	mov	r3, r0
   10688:	b132      	cbz	r2, 10698 <strncpy+0x16>
   1068a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1068e:	f803 4b01 	strb.w	r4, [r3], #1
   10692:	3a01      	subs	r2, #1
   10694:	2c00      	cmp	r4, #0
   10696:	d1f7      	bne.n	10688 <strncpy+0x6>
   10698:	441a      	add	r2, r3
   1069a:	2100      	movs	r1, #0
   1069c:	4293      	cmp	r3, r2
   1069e:	d100      	bne.n	106a2 <strncpy+0x20>
   106a0:	bd10      	pop	{r4, pc}
   106a2:	f803 1b01 	strb.w	r1, [r3], #1
   106a6:	e7f9      	b.n	1069c <strncpy+0x1a>

000106a8 <strnlen>:
   106a8:	b510      	push	{r4, lr}
   106aa:	4602      	mov	r2, r0
   106ac:	4401      	add	r1, r0
   106ae:	428a      	cmp	r2, r1
   106b0:	4613      	mov	r3, r2
   106b2:	d003      	beq.n	106bc <strnlen+0x14>
   106b4:	781c      	ldrb	r4, [r3, #0]
   106b6:	3201      	adds	r2, #1
   106b8:	2c00      	cmp	r4, #0
   106ba:	d1f8      	bne.n	106ae <strnlen+0x6>
   106bc:	1a18      	subs	r0, r3, r0
   106be:	bd10      	pop	{r4, pc}

000106c0 <print_e>:
   106c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   106c2:	b08b      	sub	sp, #44	; 0x2c
   106c4:	460d      	mov	r5, r1
   106c6:	a908      	add	r1, sp, #32
   106c8:	9e10      	ldr	r6, [sp, #64]	; 0x40
   106ca:	9104      	str	r1, [sp, #16]
   106cc:	a907      	add	r1, sp, #28
   106ce:	9103      	str	r1, [sp, #12]
   106d0:	a909      	add	r1, sp, #36	; 0x24
   106d2:	9102      	str	r1, [sp, #8]
   106d4:	1c71      	adds	r1, r6, #1
   106d6:	9101      	str	r1, [sp, #4]
   106d8:	2102      	movs	r1, #2
   106da:	9100      	str	r1, [sp, #0]
   106dc:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
   106e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
   106e2:	f7f1 fc65 	bl	1fb0 <_dtoa_r>
   106e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   106e8:	f242 730f 	movw	r3, #9999	; 0x270f
   106ec:	429a      	cmp	r2, r3
   106ee:	4601      	mov	r1, r0
   106f0:	d104      	bne.n	106fc <print_e+0x3c>
   106f2:	4628      	mov	r0, r5
   106f4:	f000 f9d0 	bl	10a98 <strcpy>
   106f8:	b00b      	add	sp, #44	; 0x2c
   106fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106fc:	462b      	mov	r3, r5
   106fe:	7800      	ldrb	r0, [r0, #0]
   10700:	f803 0b01 	strb.w	r0, [r3], #1
   10704:	2e00      	cmp	r6, #0
   10706:	bfc8      	it	gt
   10708:	2401      	movgt	r4, #1
   1070a:	202e      	movs	r0, #46	; 0x2e
   1070c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   10710:	b10d      	cbz	r5, 10716 <print_e+0x56>
   10712:	2e00      	cmp	r6, #0
   10714:	dc37      	bgt.n	10786 <print_e+0xc6>
   10716:	2f67      	cmp	r7, #103	; 0x67
   10718:	d046      	beq.n	107a8 <print_e+0xe8>
   1071a:	2f47      	cmp	r7, #71	; 0x47
   1071c:	d046      	beq.n	107ac <print_e+0xec>
   1071e:	212e      	movs	r1, #46	; 0x2e
   10720:	2030      	movs	r0, #48	; 0x30
   10722:	2e00      	cmp	r6, #0
   10724:	dc38      	bgt.n	10798 <print_e+0xd8>
   10726:	1e51      	subs	r1, r2, #1
   10728:	2900      	cmp	r1, #0
   1072a:	bfb8      	it	lt
   1072c:	f1c2 0201 	rsblt	r2, r2, #1
   10730:	4618      	mov	r0, r3
   10732:	9109      	str	r1, [sp, #36]	; 0x24
   10734:	bfac      	ite	ge
   10736:	222b      	movge	r2, #43	; 0x2b
   10738:	9209      	strlt	r2, [sp, #36]	; 0x24
   1073a:	f800 7b02 	strb.w	r7, [r0], #2
   1073e:	bfa8      	it	ge
   10740:	705a      	strbge	r2, [r3, #1]
   10742:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10744:	bfbc      	itt	lt
   10746:	212d      	movlt	r1, #45	; 0x2d
   10748:	7059      	strblt	r1, [r3, #1]
   1074a:	2a63      	cmp	r2, #99	; 0x63
   1074c:	dd0b      	ble.n	10766 <print_e+0xa6>
   1074e:	2164      	movs	r1, #100	; 0x64
   10750:	fb92 f1f1 	sdiv	r1, r2, r1
   10754:	f101 0430 	add.w	r4, r1, #48	; 0x30
   10758:	1cd8      	adds	r0, r3, #3
   1075a:	709c      	strb	r4, [r3, #2]
   1075c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   10760:	fb03 2201 	mla	r2, r3, r1, r2
   10764:	9209      	str	r2, [sp, #36]	; 0x24
   10766:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10768:	220a      	movs	r2, #10
   1076a:	fb93 f2f2 	sdiv	r2, r3, r2
   1076e:	f102 0130 	add.w	r1, r2, #48	; 0x30
   10772:	7001      	strb	r1, [r0, #0]
   10774:	f06f 0109 	mvn.w	r1, #9
   10778:	fb01 3302 	mla	r3, r1, r2, r3
   1077c:	3330      	adds	r3, #48	; 0x30
   1077e:	7043      	strb	r3, [r0, #1]
   10780:	2300      	movs	r3, #0
   10782:	7083      	strb	r3, [r0, #2]
   10784:	e7b8      	b.n	106f8 <print_e+0x38>
   10786:	b10c      	cbz	r4, 1078c <print_e+0xcc>
   10788:	f803 0b01 	strb.w	r0, [r3], #1
   1078c:	780c      	ldrb	r4, [r1, #0]
   1078e:	f803 4b01 	strb.w	r4, [r3], #1
   10792:	3e01      	subs	r6, #1
   10794:	2400      	movs	r4, #0
   10796:	e7b9      	b.n	1070c <print_e+0x4c>
   10798:	b10c      	cbz	r4, 1079e <print_e+0xde>
   1079a:	f803 1b01 	strb.w	r1, [r3], #1
   1079e:	f803 0b01 	strb.w	r0, [r3], #1
   107a2:	3e01      	subs	r6, #1
   107a4:	2400      	movs	r4, #0
   107a6:	e7bc      	b.n	10722 <print_e+0x62>
   107a8:	2765      	movs	r7, #101	; 0x65
   107aa:	e7bc      	b.n	10726 <print_e+0x66>
   107ac:	2745      	movs	r7, #69	; 0x45
   107ae:	e7ba      	b.n	10726 <print_e+0x66>

000107b0 <__sfmoreglue>:
   107b0:	b570      	push	{r4, r5, r6, lr}
   107b2:	2268      	movs	r2, #104	; 0x68
   107b4:	1e4d      	subs	r5, r1, #1
   107b6:	4355      	muls	r5, r2
   107b8:	460e      	mov	r6, r1
   107ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
   107be:	f7fc ff67 	bl	d690 <_malloc_r>
   107c2:	4604      	mov	r4, r0
   107c4:	b140      	cbz	r0, 107d8 <__sfmoreglue+0x28>
   107c6:	2100      	movs	r1, #0
   107c8:	e9c0 1600 	strd	r1, r6, [r0]
   107cc:	300c      	adds	r0, #12
   107ce:	60a0      	str	r0, [r4, #8]
   107d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
   107d4:	f7ff ff3f 	bl	10656 <memset>
   107d8:	4620      	mov	r0, r4
   107da:	bd70      	pop	{r4, r5, r6, pc}

000107dc <_fwalk_reent>:
   107dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   107e0:	4606      	mov	r6, r0
   107e2:	4688      	mov	r8, r1
   107e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
   107e8:	2700      	movs	r7, #0
   107ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   107ee:	f1b9 0901 	subs.w	r9, r9, #1
   107f2:	d505      	bpl.n	10800 <_fwalk_reent+0x24>
   107f4:	6824      	ldr	r4, [r4, #0]
   107f6:	2c00      	cmp	r4, #0
   107f8:	d1f7      	bne.n	107ea <_fwalk_reent+0xe>
   107fa:	4638      	mov	r0, r7
   107fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10800:	89ab      	ldrh	r3, [r5, #12]
   10802:	2b01      	cmp	r3, #1
   10804:	d907      	bls.n	10816 <_fwalk_reent+0x3a>
   10806:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   1080a:	3301      	adds	r3, #1
   1080c:	d003      	beq.n	10816 <_fwalk_reent+0x3a>
   1080e:	4629      	mov	r1, r5
   10810:	4630      	mov	r0, r6
   10812:	47c0      	blx	r8
   10814:	4307      	orrs	r7, r0
   10816:	3568      	adds	r5, #104	; 0x68
   10818:	e7e9      	b.n	107ee <_fwalk_reent+0x12>

0001081a <__hi0bits>:
   1081a:	0c02      	lsrs	r2, r0, #16
   1081c:	0412      	lsls	r2, r2, #16
   1081e:	4603      	mov	r3, r0
   10820:	b9ca      	cbnz	r2, 10856 <__hi0bits+0x3c>
   10822:	0403      	lsls	r3, r0, #16
   10824:	2010      	movs	r0, #16
   10826:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   1082a:	bf04      	itt	eq
   1082c:	021b      	lsleq	r3, r3, #8
   1082e:	3008      	addeq	r0, #8
   10830:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   10834:	bf04      	itt	eq
   10836:	011b      	lsleq	r3, r3, #4
   10838:	3004      	addeq	r0, #4
   1083a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   1083e:	bf04      	itt	eq
   10840:	009b      	lsleq	r3, r3, #2
   10842:	3002      	addeq	r0, #2
   10844:	2b00      	cmp	r3, #0
   10846:	db05      	blt.n	10854 <__hi0bits+0x3a>
   10848:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1084c:	f100 0001 	add.w	r0, r0, #1
   10850:	bf08      	it	eq
   10852:	2020      	moveq	r0, #32
   10854:	4770      	bx	lr
   10856:	2000      	movs	r0, #0
   10858:	e7e5      	b.n	10826 <__hi0bits+0xc>

0001085a <__lo0bits>:
   1085a:	6803      	ldr	r3, [r0, #0]
   1085c:	4602      	mov	r2, r0
   1085e:	f013 0007 	ands.w	r0, r3, #7
   10862:	d00b      	beq.n	1087c <__lo0bits+0x22>
   10864:	07d9      	lsls	r1, r3, #31
   10866:	d421      	bmi.n	108ac <__lo0bits+0x52>
   10868:	0798      	lsls	r0, r3, #30
   1086a:	bf49      	itett	mi
   1086c:	085b      	lsrmi	r3, r3, #1
   1086e:	089b      	lsrpl	r3, r3, #2
   10870:	2001      	movmi	r0, #1
   10872:	6013      	strmi	r3, [r2, #0]
   10874:	bf5c      	itt	pl
   10876:	6013      	strpl	r3, [r2, #0]
   10878:	2002      	movpl	r0, #2
   1087a:	4770      	bx	lr
   1087c:	b299      	uxth	r1, r3
   1087e:	b909      	cbnz	r1, 10884 <__lo0bits+0x2a>
   10880:	0c1b      	lsrs	r3, r3, #16
   10882:	2010      	movs	r0, #16
   10884:	b2d9      	uxtb	r1, r3
   10886:	b909      	cbnz	r1, 1088c <__lo0bits+0x32>
   10888:	3008      	adds	r0, #8
   1088a:	0a1b      	lsrs	r3, r3, #8
   1088c:	0719      	lsls	r1, r3, #28
   1088e:	bf04      	itt	eq
   10890:	091b      	lsreq	r3, r3, #4
   10892:	3004      	addeq	r0, #4
   10894:	0799      	lsls	r1, r3, #30
   10896:	bf04      	itt	eq
   10898:	089b      	lsreq	r3, r3, #2
   1089a:	3002      	addeq	r0, #2
   1089c:	07d9      	lsls	r1, r3, #31
   1089e:	d403      	bmi.n	108a8 <__lo0bits+0x4e>
   108a0:	085b      	lsrs	r3, r3, #1
   108a2:	f100 0001 	add.w	r0, r0, #1
   108a6:	d003      	beq.n	108b0 <__lo0bits+0x56>
   108a8:	6013      	str	r3, [r2, #0]
   108aa:	4770      	bx	lr
   108ac:	2000      	movs	r0, #0
   108ae:	4770      	bx	lr
   108b0:	2020      	movs	r0, #32
   108b2:	4770      	bx	lr

000108b4 <__mcmp>:
   108b4:	690a      	ldr	r2, [r1, #16]
   108b6:	4603      	mov	r3, r0
   108b8:	6900      	ldr	r0, [r0, #16]
   108ba:	1a80      	subs	r0, r0, r2
   108bc:	b530      	push	{r4, r5, lr}
   108be:	d10d      	bne.n	108dc <__mcmp+0x28>
   108c0:	3314      	adds	r3, #20
   108c2:	3114      	adds	r1, #20
   108c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   108c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   108cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   108d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   108d4:	4295      	cmp	r5, r2
   108d6:	d002      	beq.n	108de <__mcmp+0x2a>
   108d8:	d304      	bcc.n	108e4 <__mcmp+0x30>
   108da:	2001      	movs	r0, #1
   108dc:	bd30      	pop	{r4, r5, pc}
   108de:	42a3      	cmp	r3, r4
   108e0:	d3f4      	bcc.n	108cc <__mcmp+0x18>
   108e2:	e7fb      	b.n	108dc <__mcmp+0x28>
   108e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   108e8:	e7f8      	b.n	108dc <__mcmp+0x28>

000108ea <__sfputc_r>:
   108ea:	6893      	ldr	r3, [r2, #8]
   108ec:	3b01      	subs	r3, #1
   108ee:	2b00      	cmp	r3, #0
   108f0:	b410      	push	{r4}
   108f2:	6093      	str	r3, [r2, #8]
   108f4:	da07      	bge.n	10906 <__sfputc_r+0x1c>
   108f6:	6994      	ldr	r4, [r2, #24]
   108f8:	42a3      	cmp	r3, r4
   108fa:	db01      	blt.n	10900 <__sfputc_r+0x16>
   108fc:	290a      	cmp	r1, #10
   108fe:	d102      	bne.n	10906 <__sfputc_r+0x1c>
   10900:	bc10      	pop	{r4}
   10902:	f7fd bdc3 	b.w	e48c <__swbuf_r>
   10906:	6813      	ldr	r3, [r2, #0]
   10908:	1c58      	adds	r0, r3, #1
   1090a:	6010      	str	r0, [r2, #0]
   1090c:	7019      	strb	r1, [r3, #0]
   1090e:	4608      	mov	r0, r1
   10910:	bc10      	pop	{r4}
   10912:	4770      	bx	lr

00010914 <__sfputs_r>:
   10914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10916:	4606      	mov	r6, r0
   10918:	460f      	mov	r7, r1
   1091a:	4614      	mov	r4, r2
   1091c:	18d5      	adds	r5, r2, r3
   1091e:	42ac      	cmp	r4, r5
   10920:	d101      	bne.n	10926 <__sfputs_r+0x12>
   10922:	2000      	movs	r0, #0
   10924:	e007      	b.n	10936 <__sfputs_r+0x22>
   10926:	f814 1b01 	ldrb.w	r1, [r4], #1
   1092a:	463a      	mov	r2, r7
   1092c:	4630      	mov	r0, r6
   1092e:	f7ff ffdc 	bl	108ea <__sfputc_r>
   10932:	1c43      	adds	r3, r0, #1
   10934:	d1f3      	bne.n	1091e <__sfputs_r+0xa>
   10936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010938 <_printf_common>:
   10938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1093c:	4616      	mov	r6, r2
   1093e:	4699      	mov	r9, r3
   10940:	688a      	ldr	r2, [r1, #8]
   10942:	690b      	ldr	r3, [r1, #16]
   10944:	f8dd 8020 	ldr.w	r8, [sp, #32]
   10948:	4293      	cmp	r3, r2
   1094a:	bfb8      	it	lt
   1094c:	4613      	movlt	r3, r2
   1094e:	6033      	str	r3, [r6, #0]
   10950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   10954:	4607      	mov	r7, r0
   10956:	460c      	mov	r4, r1
   10958:	b10a      	cbz	r2, 1095e <_printf_common+0x26>
   1095a:	3301      	adds	r3, #1
   1095c:	6033      	str	r3, [r6, #0]
   1095e:	6823      	ldr	r3, [r4, #0]
   10960:	0699      	lsls	r1, r3, #26
   10962:	bf42      	ittt	mi
   10964:	6833      	ldrmi	r3, [r6, #0]
   10966:	3302      	addmi	r3, #2
   10968:	6033      	strmi	r3, [r6, #0]
   1096a:	6825      	ldr	r5, [r4, #0]
   1096c:	f015 0506 	ands.w	r5, r5, #6
   10970:	d106      	bne.n	10980 <_printf_common+0x48>
   10972:	f104 0a19 	add.w	sl, r4, #25
   10976:	68e3      	ldr	r3, [r4, #12]
   10978:	6832      	ldr	r2, [r6, #0]
   1097a:	1a9b      	subs	r3, r3, r2
   1097c:	42ab      	cmp	r3, r5
   1097e:	dc26      	bgt.n	109ce <_printf_common+0x96>
   10980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   10984:	1e13      	subs	r3, r2, #0
   10986:	6822      	ldr	r2, [r4, #0]
   10988:	bf18      	it	ne
   1098a:	2301      	movne	r3, #1
   1098c:	0692      	lsls	r2, r2, #26
   1098e:	d42b      	bmi.n	109e8 <_printf_common+0xb0>
   10990:	f104 0243 	add.w	r2, r4, #67	; 0x43
   10994:	4649      	mov	r1, r9
   10996:	4638      	mov	r0, r7
   10998:	47c0      	blx	r8
   1099a:	3001      	adds	r0, #1
   1099c:	d01e      	beq.n	109dc <_printf_common+0xa4>
   1099e:	6823      	ldr	r3, [r4, #0]
   109a0:	68e5      	ldr	r5, [r4, #12]
   109a2:	6832      	ldr	r2, [r6, #0]
   109a4:	f003 0306 	and.w	r3, r3, #6
   109a8:	2b04      	cmp	r3, #4
   109aa:	bf08      	it	eq
   109ac:	1aad      	subeq	r5, r5, r2
   109ae:	68a3      	ldr	r3, [r4, #8]
   109b0:	6922      	ldr	r2, [r4, #16]
   109b2:	bf0c      	ite	eq
   109b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   109b8:	2500      	movne	r5, #0
   109ba:	4293      	cmp	r3, r2
   109bc:	bfc4      	itt	gt
   109be:	1a9b      	subgt	r3, r3, r2
   109c0:	18ed      	addgt	r5, r5, r3
   109c2:	2600      	movs	r6, #0
   109c4:	341a      	adds	r4, #26
   109c6:	42b5      	cmp	r5, r6
   109c8:	d11a      	bne.n	10a00 <_printf_common+0xc8>
   109ca:	2000      	movs	r0, #0
   109cc:	e008      	b.n	109e0 <_printf_common+0xa8>
   109ce:	2301      	movs	r3, #1
   109d0:	4652      	mov	r2, sl
   109d2:	4649      	mov	r1, r9
   109d4:	4638      	mov	r0, r7
   109d6:	47c0      	blx	r8
   109d8:	3001      	adds	r0, #1
   109da:	d103      	bne.n	109e4 <_printf_common+0xac>
   109dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   109e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   109e4:	3501      	adds	r5, #1
   109e6:	e7c6      	b.n	10976 <_printf_common+0x3e>
   109e8:	18e1      	adds	r1, r4, r3
   109ea:	1c5a      	adds	r2, r3, #1
   109ec:	2030      	movs	r0, #48	; 0x30
   109ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   109f2:	4422      	add	r2, r4
   109f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   109f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   109fc:	3302      	adds	r3, #2
   109fe:	e7c7      	b.n	10990 <_printf_common+0x58>
   10a00:	2301      	movs	r3, #1
   10a02:	4622      	mov	r2, r4
   10a04:	4649      	mov	r1, r9
   10a06:	4638      	mov	r0, r7
   10a08:	47c0      	blx	r8
   10a0a:	3001      	adds	r0, #1
   10a0c:	d0e6      	beq.n	109dc <_printf_common+0xa4>
   10a0e:	3601      	adds	r6, #1
   10a10:	e7d9      	b.n	109c6 <_printf_common+0x8e>

00010a12 <__sread>:
   10a12:	b510      	push	{r4, lr}
   10a14:	460c      	mov	r4, r1
   10a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10a1a:	f7fd ff59 	bl	e8d0 <_read_r>
   10a1e:	2800      	cmp	r0, #0
   10a20:	bfab      	itete	ge
   10a22:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   10a24:	89a3      	ldrhlt	r3, [r4, #12]
   10a26:	181b      	addge	r3, r3, r0
   10a28:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   10a2c:	bfac      	ite	ge
   10a2e:	6563      	strge	r3, [r4, #84]	; 0x54
   10a30:	81a3      	strhlt	r3, [r4, #12]
   10a32:	bd10      	pop	{r4, pc}

00010a34 <__swrite>:
   10a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a38:	461f      	mov	r7, r3
   10a3a:	898b      	ldrh	r3, [r1, #12]
   10a3c:	05db      	lsls	r3, r3, #23
   10a3e:	4605      	mov	r5, r0
   10a40:	460c      	mov	r4, r1
   10a42:	4616      	mov	r6, r2
   10a44:	d505      	bpl.n	10a52 <__swrite+0x1e>
   10a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10a4a:	2302      	movs	r3, #2
   10a4c:	2200      	movs	r2, #0
   10a4e:	f7fd feed 	bl	e82c <_lseek_r>
   10a52:	89a3      	ldrh	r3, [r4, #12]
   10a54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   10a58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   10a5c:	81a3      	strh	r3, [r4, #12]
   10a5e:	4632      	mov	r2, r6
   10a60:	463b      	mov	r3, r7
   10a62:	4628      	mov	r0, r5
   10a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10a68:	f7fd bd62 	b.w	e530 <_write_r>

00010a6c <__sseek>:
   10a6c:	b510      	push	{r4, lr}
   10a6e:	460c      	mov	r4, r1
   10a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10a74:	f7fd feda 	bl	e82c <_lseek_r>
   10a78:	1c43      	adds	r3, r0, #1
   10a7a:	89a3      	ldrh	r3, [r4, #12]
   10a7c:	bf15      	itete	ne
   10a7e:	6560      	strne	r0, [r4, #84]	; 0x54
   10a80:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   10a84:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   10a88:	81a3      	strheq	r3, [r4, #12]
   10a8a:	bf18      	it	ne
   10a8c:	81a3      	strhne	r3, [r4, #12]
   10a8e:	bd10      	pop	{r4, pc}

00010a90 <__sclose>:
   10a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10a94:	f7fd bdea 	b.w	e66c <_close_r>

00010a98 <strcpy>:
   10a98:	4603      	mov	r3, r0
   10a9a:	f811 2b01 	ldrb.w	r2, [r1], #1
   10a9e:	f803 2b01 	strb.w	r2, [r3], #1
   10aa2:	2a00      	cmp	r2, #0
   10aa4:	d1f9      	bne.n	10a9a <strcpy+0x2>
   10aa6:	4770      	bx	lr

00010aa8 <quorem>:
   10aa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10aac:	6903      	ldr	r3, [r0, #16]
   10aae:	690c      	ldr	r4, [r1, #16]
   10ab0:	42a3      	cmp	r3, r4
   10ab2:	4607      	mov	r7, r0
   10ab4:	db7d      	blt.n	10bb2 <quorem+0x10a>
   10ab6:	3c01      	subs	r4, #1
   10ab8:	f101 0814 	add.w	r8, r1, #20
   10abc:	f100 0514 	add.w	r5, r0, #20
   10ac0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   10ac4:	9301      	str	r3, [sp, #4]
   10ac6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   10aca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   10ace:	3301      	adds	r3, #1
   10ad0:	429a      	cmp	r2, r3
   10ad2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   10ad6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   10ada:	fbb2 f6f3 	udiv	r6, r2, r3
   10ade:	d32e      	bcc.n	10b3e <quorem+0x96>
   10ae0:	f04f 0e00 	mov.w	lr, #0
   10ae4:	4640      	mov	r0, r8
   10ae6:	46ac      	mov	ip, r5
   10ae8:	46f2      	mov	sl, lr
   10aea:	f850 2b04 	ldr.w	r2, [r0], #4
   10aee:	b293      	uxth	r3, r2
   10af0:	fb06 e303 	mla	r3, r6, r3, lr
   10af4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   10af8:	0c12      	lsrs	r2, r2, #16
   10afa:	b29b      	uxth	r3, r3
   10afc:	fb06 e202 	mla	r2, r6, r2, lr
   10b00:	ebaa 0303 	sub.w	r3, sl, r3
   10b04:	f8dc a000 	ldr.w	sl, [ip]
   10b08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   10b0c:	b292      	uxth	r2, r2
   10b0e:	fa13 f38a 	uxtah	r3, r3, sl
   10b12:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
   10b16:	eb02 4223 	add.w	r2, r2, r3, asr #16
   10b1a:	b29b      	uxth	r3, r3
   10b1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10b20:	4581      	cmp	r9, r0
   10b22:	f84c 3b04 	str.w	r3, [ip], #4
   10b26:	ea4f 4a22 	mov.w	sl, r2, asr #16
   10b2a:	d2de      	bcs.n	10aea <quorem+0x42>
   10b2c:	f855 300b 	ldr.w	r3, [r5, fp]
   10b30:	b92b      	cbnz	r3, 10b3e <quorem+0x96>
   10b32:	9b01      	ldr	r3, [sp, #4]
   10b34:	3b04      	subs	r3, #4
   10b36:	429d      	cmp	r5, r3
   10b38:	461a      	mov	r2, r3
   10b3a:	d32e      	bcc.n	10b9a <quorem+0xf2>
   10b3c:	613c      	str	r4, [r7, #16]
   10b3e:	4638      	mov	r0, r7
   10b40:	f7ff feb8 	bl	108b4 <__mcmp>
   10b44:	2800      	cmp	r0, #0
   10b46:	db24      	blt.n	10b92 <quorem+0xea>
   10b48:	3601      	adds	r6, #1
   10b4a:	4628      	mov	r0, r5
   10b4c:	f04f 0c00 	mov.w	ip, #0
   10b50:	f858 2b04 	ldr.w	r2, [r8], #4
   10b54:	f8d0 e000 	ldr.w	lr, [r0]
   10b58:	b293      	uxth	r3, r2
   10b5a:	ebac 0303 	sub.w	r3, ip, r3
   10b5e:	0c12      	lsrs	r2, r2, #16
   10b60:	fa13 f38e 	uxtah	r3, r3, lr
   10b64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   10b68:	eb02 4223 	add.w	r2, r2, r3, asr #16
   10b6c:	b29b      	uxth	r3, r3
   10b6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10b72:	45c1      	cmp	r9, r8
   10b74:	f840 3b04 	str.w	r3, [r0], #4
   10b78:	ea4f 4c22 	mov.w	ip, r2, asr #16
   10b7c:	d2e8      	bcs.n	10b50 <quorem+0xa8>
   10b7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   10b82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   10b86:	b922      	cbnz	r2, 10b92 <quorem+0xea>
   10b88:	3b04      	subs	r3, #4
   10b8a:	429d      	cmp	r5, r3
   10b8c:	461a      	mov	r2, r3
   10b8e:	d30a      	bcc.n	10ba6 <quorem+0xfe>
   10b90:	613c      	str	r4, [r7, #16]
   10b92:	4630      	mov	r0, r6
   10b94:	b003      	add	sp, #12
   10b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b9a:	6812      	ldr	r2, [r2, #0]
   10b9c:	3b04      	subs	r3, #4
   10b9e:	2a00      	cmp	r2, #0
   10ba0:	d1cc      	bne.n	10b3c <quorem+0x94>
   10ba2:	3c01      	subs	r4, #1
   10ba4:	e7c7      	b.n	10b36 <quorem+0x8e>
   10ba6:	6812      	ldr	r2, [r2, #0]
   10ba8:	3b04      	subs	r3, #4
   10baa:	2a00      	cmp	r2, #0
   10bac:	d1f0      	bne.n	10b90 <quorem+0xe8>
   10bae:	3c01      	subs	r4, #1
   10bb0:	e7eb      	b.n	10b8a <quorem+0xe2>
   10bb2:	2000      	movs	r0, #0
   10bb4:	e7ee      	b.n	10b94 <quorem+0xec>

00010bb6 <__swhatbuf_r>:
   10bb6:	b570      	push	{r4, r5, r6, lr}
   10bb8:	460e      	mov	r6, r1
   10bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10bbe:	2900      	cmp	r1, #0
   10bc0:	b096      	sub	sp, #88	; 0x58
   10bc2:	4614      	mov	r4, r2
   10bc4:	461d      	mov	r5, r3
   10bc6:	da08      	bge.n	10bda <__swhatbuf_r+0x24>
   10bc8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   10bcc:	2200      	movs	r2, #0
   10bce:	602a      	str	r2, [r5, #0]
   10bd0:	061a      	lsls	r2, r3, #24
   10bd2:	d410      	bmi.n	10bf6 <__swhatbuf_r+0x40>
   10bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   10bd8:	e00e      	b.n	10bf8 <__swhatbuf_r+0x42>
   10bda:	466a      	mov	r2, sp
   10bdc:	f7fd fe8a 	bl	e8f4 <_fstat_r>
   10be0:	2800      	cmp	r0, #0
   10be2:	dbf1      	blt.n	10bc8 <__swhatbuf_r+0x12>
   10be4:	9a01      	ldr	r2, [sp, #4]
   10be6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   10bea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   10bee:	425a      	negs	r2, r3
   10bf0:	415a      	adcs	r2, r3
   10bf2:	602a      	str	r2, [r5, #0]
   10bf4:	e7ee      	b.n	10bd4 <__swhatbuf_r+0x1e>
   10bf6:	2340      	movs	r3, #64	; 0x40
   10bf8:	2000      	movs	r0, #0
   10bfa:	6023      	str	r3, [r4, #0]
   10bfc:	b016      	add	sp, #88	; 0x58
   10bfe:	bd70      	pop	{r4, r5, r6, pc}

00010c00 <abort>:
   10c00:	b508      	push	{r3, lr}
   10c02:	2006      	movs	r0, #6
   10c04:	f7fd fe98 	bl	e938 <raise>
   10c08:	2001      	movs	r0, #1
   10c0a:	f7f5 ffb1 	bl	6b70 <_exit>

00010c0e <_raise_r>:
   10c0e:	291f      	cmp	r1, #31
   10c10:	b538      	push	{r3, r4, r5, lr}
   10c12:	4604      	mov	r4, r0
   10c14:	460d      	mov	r5, r1
   10c16:	d904      	bls.n	10c22 <_raise_r+0x14>
   10c18:	2316      	movs	r3, #22
   10c1a:	6003      	str	r3, [r0, #0]
   10c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10c20:	bd38      	pop	{r3, r4, r5, pc}
   10c22:	6c42      	ldr	r2, [r0, #68]	; 0x44
   10c24:	b112      	cbz	r2, 10c2c <_raise_r+0x1e>
   10c26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   10c2a:	b94b      	cbnz	r3, 10c40 <_raise_r+0x32>
   10c2c:	4620      	mov	r0, r4
   10c2e:	f000 f816 	bl	10c5e <_getpid_r>
   10c32:	462a      	mov	r2, r5
   10c34:	4601      	mov	r1, r0
   10c36:	4620      	mov	r0, r4
   10c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10c3c:	f7fd be84 	b.w	e948 <_kill_r>
   10c40:	2b01      	cmp	r3, #1
   10c42:	d00a      	beq.n	10c5a <_raise_r+0x4c>
   10c44:	1c59      	adds	r1, r3, #1
   10c46:	d103      	bne.n	10c50 <_raise_r+0x42>
   10c48:	2316      	movs	r3, #22
   10c4a:	6003      	str	r3, [r0, #0]
   10c4c:	2001      	movs	r0, #1
   10c4e:	e7e7      	b.n	10c20 <_raise_r+0x12>
   10c50:	2400      	movs	r4, #0
   10c52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   10c56:	4628      	mov	r0, r5
   10c58:	4798      	blx	r3
   10c5a:	2000      	movs	r0, #0
   10c5c:	e7e0      	b.n	10c20 <_raise_r+0x12>

00010c5e <_getpid_r>:
   10c5e:	f7fe bbd4 	b.w	f40a <_getpid>
	...

00010c64 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   10c64:	f7f7 bed4 	b.w	8a10 <SystemInit>
