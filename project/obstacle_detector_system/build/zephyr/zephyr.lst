
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	20 6e 00 20 5d 64 00 00 65 e7 00 00 15 64 00 00      n. ]d..e....d..
  10:	15 64 00 00 15 64 00 00 15 64 00 00 00 00 00 00     .d...d...d......
	...
  2c:	e1 5b 00 00 15 64 00 00 00 00 00 00 89 5b 00 00     .[...d.......[..
  3c:	15 64 00 00                                         .d..

00000040 <_irq_vector_table>:
  40:	c1 5c 00 00 c1 5c 00 00 c1 5c 00 00 c1 5c 00 00     .\...\...\...\..
  50:	c1 5c 00 00 c1 5c 00 00 c1 5c 00 00 c1 5c 00 00     .\...\...\...\..
  60:	c1 5c 00 00 c1 5c 00 00 c1 5c 00 00 c1 5c 00 00     .\...\...\...\..
  70:	c1 5c 00 00 c1 5c 00 00 c1 5c 00 00 c1 5c 00 00     .\...\...\...\..
  80:	c1 5c 00 00 c1 5c 00 00 c1 5c 00 00 c1 5c 00 00     .\...\...\...\..
  90:	c1 5c 00 00 c1 5c 00 00 c1 5c 00 00 c1 5c 00 00     .\...\...\...\..
  a0:	c1 5c 00 00 c1 5c 00 00 c1 5c 00 00 c1 5c 00 00     .\...\...\...\..
  b0:	c1 5c 00 00 c1 5c 00 00 c1 5c 00 00 c1 5c 00 00     .\...\...\...\..
  c0:	c1 5c 00 00 c1 5c 00 00 c1 5c 00 00 c1 5c 00 00     .\...\...\...\..
  d0:	c1 5c 00 00 c1 5c 00 00 c1 5c 00 00 c1 5c 00 00     .\...\...\...\..
  e0:	c1 5c 00 00 c1 5c 00 00 c1 5c 00 00 c1 5c 00 00     .\...\...\...\..
  f0:	c1 5c 00 00 c1 5c 00 00 c1 5c 00 00 c1 5c 00 00     .\...\...\...\..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <__adddf3+0x1ee>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <__adddf3+0x1da>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__adddf3+0x124>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <__adddf3+0x240>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <__adddf3+0x16e>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <__adddf3+0x16a>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <__adddf3+0x184>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <__adddf3+0x1d2>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <__adddf3+0x1ba>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <__adddf3+0x24e>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <__adddf3+0x212>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <__adddf3+0x230>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__adddf3+0x138>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__adddf3+0x138>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__adddf3+0x138>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__aeabi_dmul+0x1dc>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__aeabi_dmul+0xde>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__aeabi_dmul+0x238>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__aeabi_dmul+0x164>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__aeabi_dmul+0x134>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__aeabi_dmul+0x1c2>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__aeabi_dmul+0x1a6>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__aeabi_dmul+0x1c6>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__aeabi_dmul+0x206>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__aeabi_dmul+0x19c>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__aeabi_dmul+0x24a>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__aeabi_dmul+0x222>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__aeabi_dmul+0x24a>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__aeabi_dmul+0x234>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__aeabi_dmul+0x24a>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__aeabi_dmul+0xde>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__aeabi_dmul+0xde>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__aeabi_dmul+0xde>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__aeabi_dmul+0x24a>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__aeabi_dmul+0x24a>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__aeabi_dmul+0x234>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__aeabi_dmul+0x24a>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__aeabi_dmul+0x1f8>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__aeabi_dmul+0x24a>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__aeabi_dmul+0x19c>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__aeabi_dmul+0x234>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__aeabi_dmul+0x1f8>
     93a:	e712      	b.n	762 <__aeabi_dmul+0x24a>

0000093c <__aeabi_d2f>:
     93c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     944:	bf24      	itt	cs
     946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     94a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     94e:	d90d      	bls.n	96c <__aeabi_d2f+0x30>
     950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     95c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     964:	bf08      	it	eq
     966:	f020 0001 	biceq.w	r0, r0, #1
     96a:	4770      	bx	lr
     96c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     970:	d121      	bne.n	9b6 <__aeabi_d2f+0x7a>
     972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     976:	bfbc      	itt	lt
     978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     97c:	4770      	bxlt	lr
     97e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     982:	ea4f 5252 	mov.w	r2, r2, lsr #21
     986:	f1c2 0218 	rsb	r2, r2, #24
     98a:	f1c2 0c20 	rsb	ip, r2, #32
     98e:	fa10 f30c 	lsls.w	r3, r0, ip
     992:	fa20 f002 	lsr.w	r0, r0, r2
     996:	bf18      	it	ne
     998:	f040 0001 	orrne.w	r0, r0, #1
     99c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     9a4:	fa03 fc0c 	lsl.w	ip, r3, ip
     9a8:	ea40 000c 	orr.w	r0, r0, ip
     9ac:	fa23 f302 	lsr.w	r3, r3, r2
     9b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     9b4:	e7cc      	b.n	950 <__aeabi_d2f+0x14>
     9b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     9ba:	d107      	bne.n	9cc <__aeabi_d2f+0x90>
     9bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     9c0:	bf1e      	ittt	ne
     9c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     9c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     9ca:	4770      	bxne	lr
     9cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     9d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     9d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     9d8:	4770      	bx	lr
     9da:	bf00      	nop

000009dc <__aeabi_uldivmod>:
     9dc:	b953      	cbnz	r3, 9f4 <__aeabi_uldivmod+0x18>
     9de:	b94a      	cbnz	r2, 9f4 <__aeabi_uldivmod+0x18>
     9e0:	2900      	cmp	r1, #0
     9e2:	bf08      	it	eq
     9e4:	2800      	cmpeq	r0, #0
     9e6:	bf1c      	itt	ne
     9e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     9ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     9f0:	f000 b80c 	b.w	a0c <__aeabi_idiv0>
     9f4:	f1ad 0c08 	sub.w	ip, sp, #8
     9f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     9fc:	f000 f8ce 	bl	b9c <__udivmoddi4>
     a00:	f8dd e004 	ldr.w	lr, [sp, #4]
     a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a08:	b004      	add	sp, #16
     a0a:	4770      	bx	lr

00000a0c <__aeabi_idiv0>:
     a0c:	4770      	bx	lr
     a0e:	bf00      	nop

00000a10 <__gedf2>:
     a10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     a14:	e006      	b.n	a24 <__cmpdf2+0x4>
     a16:	bf00      	nop

00000a18 <__ledf2>:
     a18:	f04f 0c01 	mov.w	ip, #1
     a1c:	e002      	b.n	a24 <__cmpdf2+0x4>
     a1e:	bf00      	nop

00000a20 <__cmpdf2>:
     a20:	f04f 0c01 	mov.w	ip, #1
     a24:	f84d cd04 	str.w	ip, [sp, #-4]!
     a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a34:	bf18      	it	ne
     a36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     a3a:	d01b      	beq.n	a74 <__cmpdf2+0x54>
     a3c:	b001      	add	sp, #4
     a3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     a42:	bf0c      	ite	eq
     a44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     a48:	ea91 0f03 	teqne	r1, r3
     a4c:	bf02      	ittt	eq
     a4e:	ea90 0f02 	teqeq	r0, r2
     a52:	2000      	moveq	r0, #0
     a54:	4770      	bxeq	lr
     a56:	f110 0f00 	cmn.w	r0, #0
     a5a:	ea91 0f03 	teq	r1, r3
     a5e:	bf58      	it	pl
     a60:	4299      	cmppl	r1, r3
     a62:	bf08      	it	eq
     a64:	4290      	cmpeq	r0, r2
     a66:	bf2c      	ite	cs
     a68:	17d8      	asrcs	r0, r3, #31
     a6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     a6e:	f040 0001 	orr.w	r0, r0, #1
     a72:	4770      	bx	lr
     a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a7c:	d102      	bne.n	a84 <__cmpdf2+0x64>
     a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     a82:	d107      	bne.n	a94 <__cmpdf2+0x74>
     a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a8c:	d1d6      	bne.n	a3c <__cmpdf2+0x1c>
     a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     a92:	d0d3      	beq.n	a3c <__cmpdf2+0x1c>
     a94:	f85d 0b04 	ldr.w	r0, [sp], #4
     a98:	4770      	bx	lr
     a9a:	bf00      	nop

00000a9c <__aeabi_cdrcmple>:
     a9c:	4684      	mov	ip, r0
     a9e:	4610      	mov	r0, r2
     aa0:	4662      	mov	r2, ip
     aa2:	468c      	mov	ip, r1
     aa4:	4619      	mov	r1, r3
     aa6:	4663      	mov	r3, ip
     aa8:	e000      	b.n	aac <__aeabi_cdcmpeq>
     aaa:	bf00      	nop

00000aac <__aeabi_cdcmpeq>:
     aac:	b501      	push	{r0, lr}
     aae:	f7ff ffb7 	bl	a20 <__cmpdf2>
     ab2:	2800      	cmp	r0, #0
     ab4:	bf48      	it	mi
     ab6:	f110 0f00 	cmnmi.w	r0, #0
     aba:	bd01      	pop	{r0, pc}

00000abc <__aeabi_dcmpeq>:
     abc:	f84d ed08 	str.w	lr, [sp, #-8]!
     ac0:	f7ff fff4 	bl	aac <__aeabi_cdcmpeq>
     ac4:	bf0c      	ite	eq
     ac6:	2001      	moveq	r0, #1
     ac8:	2000      	movne	r0, #0
     aca:	f85d fb08 	ldr.w	pc, [sp], #8
     ace:	bf00      	nop

00000ad0 <__aeabi_dcmplt>:
     ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
     ad4:	f7ff ffea 	bl	aac <__aeabi_cdcmpeq>
     ad8:	bf34      	ite	cc
     ada:	2001      	movcc	r0, #1
     adc:	2000      	movcs	r0, #0
     ade:	f85d fb08 	ldr.w	pc, [sp], #8
     ae2:	bf00      	nop

00000ae4 <__aeabi_dcmple>:
     ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
     ae8:	f7ff ffe0 	bl	aac <__aeabi_cdcmpeq>
     aec:	bf94      	ite	ls
     aee:	2001      	movls	r0, #1
     af0:	2000      	movhi	r0, #0
     af2:	f85d fb08 	ldr.w	pc, [sp], #8
     af6:	bf00      	nop

00000af8 <__aeabi_dcmpge>:
     af8:	f84d ed08 	str.w	lr, [sp, #-8]!
     afc:	f7ff ffce 	bl	a9c <__aeabi_cdrcmple>
     b00:	bf94      	ite	ls
     b02:	2001      	movls	r0, #1
     b04:	2000      	movhi	r0, #0
     b06:	f85d fb08 	ldr.w	pc, [sp], #8
     b0a:	bf00      	nop

00000b0c <__aeabi_dcmpgt>:
     b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
     b10:	f7ff ffc4 	bl	a9c <__aeabi_cdrcmple>
     b14:	bf34      	ite	cc
     b16:	2001      	movcc	r0, #1
     b18:	2000      	movcs	r0, #0
     b1a:	f85d fb08 	ldr.w	pc, [sp], #8
     b1e:	bf00      	nop

00000b20 <__aeabi_dcmpun>:
     b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b28:	d102      	bne.n	b30 <__aeabi_dcmpun+0x10>
     b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     b2e:	d10a      	bne.n	b46 <__aeabi_dcmpun+0x26>
     b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b38:	d102      	bne.n	b40 <__aeabi_dcmpun+0x20>
     b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     b3e:	d102      	bne.n	b46 <__aeabi_dcmpun+0x26>
     b40:	f04f 0000 	mov.w	r0, #0
     b44:	4770      	bx	lr
     b46:	f04f 0001 	mov.w	r0, #1
     b4a:	4770      	bx	lr

00000b4c <__aeabi_d2iz>:
     b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     b54:	d215      	bcs.n	b82 <__aeabi_d2iz+0x36>
     b56:	d511      	bpl.n	b7c <__aeabi_d2iz+0x30>
     b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     b60:	d912      	bls.n	b88 <__aeabi_d2iz+0x3c>
     b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b72:	fa23 f002 	lsr.w	r0, r3, r2
     b76:	bf18      	it	ne
     b78:	4240      	negne	r0, r0
     b7a:	4770      	bx	lr
     b7c:	f04f 0000 	mov.w	r0, #0
     b80:	4770      	bx	lr
     b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     b86:	d105      	bne.n	b94 <__aeabi_d2iz+0x48>
     b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     b8c:	bf08      	it	eq
     b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     b92:	4770      	bx	lr
     b94:	f04f 0000 	mov.w	r0, #0
     b98:	4770      	bx	lr
     b9a:	bf00      	nop

00000b9c <__udivmoddi4>:
     b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ba0:	4607      	mov	r7, r0
     ba2:	468c      	mov	ip, r1
     ba4:	4608      	mov	r0, r1
     ba6:	9e09      	ldr	r6, [sp, #36]	; 0x24
     ba8:	4615      	mov	r5, r2
     baa:	463c      	mov	r4, r7
     bac:	4619      	mov	r1, r3
     bae:	2b00      	cmp	r3, #0
     bb0:	f040 80c6 	bne.w	d40 <__udivmoddi4+0x1a4>
     bb4:	4282      	cmp	r2, r0
     bb6:	fab2 f782 	clz	r7, r2
     bba:	d946      	bls.n	c4a <__udivmoddi4+0xae>
     bbc:	b14f      	cbz	r7, bd2 <__udivmoddi4+0x36>
     bbe:	f1c7 0e20 	rsb	lr, r7, #32
     bc2:	fa24 fe0e 	lsr.w	lr, r4, lr
     bc6:	fa00 f307 	lsl.w	r3, r0, r7
     bca:	40bd      	lsls	r5, r7
     bcc:	ea4e 0c03 	orr.w	ip, lr, r3
     bd0:	40bc      	lsls	r4, r7
     bd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
     bd6:	fa1f fe85 	uxth.w	lr, r5
     bda:	fbbc f9f8 	udiv	r9, ip, r8
     bde:	0c22      	lsrs	r2, r4, #16
     be0:	fb08 c319 	mls	r3, r8, r9, ip
     be4:	fb09 fa0e 	mul.w	sl, r9, lr
     be8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     bec:	459a      	cmp	sl, r3
     bee:	d928      	bls.n	c42 <__udivmoddi4+0xa6>
     bf0:	18eb      	adds	r3, r5, r3
     bf2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     bf6:	d204      	bcs.n	c02 <__udivmoddi4+0x66>
     bf8:	459a      	cmp	sl, r3
     bfa:	d902      	bls.n	c02 <__udivmoddi4+0x66>
     bfc:	f1a9 0002 	sub.w	r0, r9, #2
     c00:	442b      	add	r3, r5
     c02:	eba3 030a 	sub.w	r3, r3, sl
     c06:	b2a4      	uxth	r4, r4
     c08:	fbb3 f2f8 	udiv	r2, r3, r8
     c0c:	fb08 3312 	mls	r3, r8, r2, r3
     c10:	fb02 fe0e 	mul.w	lr, r2, lr
     c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c18:	45a6      	cmp	lr, r4
     c1a:	d914      	bls.n	c46 <__udivmoddi4+0xaa>
     c1c:	192c      	adds	r4, r5, r4
     c1e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     c22:	d203      	bcs.n	c2c <__udivmoddi4+0x90>
     c24:	45a6      	cmp	lr, r4
     c26:	d901      	bls.n	c2c <__udivmoddi4+0x90>
     c28:	1e93      	subs	r3, r2, #2
     c2a:	442c      	add	r4, r5
     c2c:	eba4 040e 	sub.w	r4, r4, lr
     c30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     c34:	b11e      	cbz	r6, c3e <__udivmoddi4+0xa2>
     c36:	40fc      	lsrs	r4, r7
     c38:	2300      	movs	r3, #0
     c3a:	6034      	str	r4, [r6, #0]
     c3c:	6073      	str	r3, [r6, #4]
     c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c42:	4648      	mov	r0, r9
     c44:	e7dd      	b.n	c02 <__udivmoddi4+0x66>
     c46:	4613      	mov	r3, r2
     c48:	e7f0      	b.n	c2c <__udivmoddi4+0x90>
     c4a:	b902      	cbnz	r2, c4e <__udivmoddi4+0xb2>
     c4c:	deff      	udf	#255	; 0xff
     c4e:	bb87      	cbnz	r7, cb2 <__udivmoddi4+0x116>
     c50:	1a83      	subs	r3, r0, r2
     c52:	2101      	movs	r1, #1
     c54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     c58:	b2aa      	uxth	r2, r5
     c5a:	fbb3 fcfe 	udiv	ip, r3, lr
     c5e:	0c20      	lsrs	r0, r4, #16
     c60:	fb0e 331c 	mls	r3, lr, ip, r3
     c64:	fb0c f802 	mul.w	r8, ip, r2
     c68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     c6c:	4598      	cmp	r8, r3
     c6e:	d963      	bls.n	d38 <__udivmoddi4+0x19c>
     c70:	18eb      	adds	r3, r5, r3
     c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     c76:	d204      	bcs.n	c82 <__udivmoddi4+0xe6>
     c78:	4598      	cmp	r8, r3
     c7a:	d902      	bls.n	c82 <__udivmoddi4+0xe6>
     c7c:	f1ac 0002 	sub.w	r0, ip, #2
     c80:	442b      	add	r3, r5
     c82:	eba3 0308 	sub.w	r3, r3, r8
     c86:	b2a4      	uxth	r4, r4
     c88:	fbb3 fcfe 	udiv	ip, r3, lr
     c8c:	fb0e 331c 	mls	r3, lr, ip, r3
     c90:	fb0c f202 	mul.w	r2, ip, r2
     c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c98:	42a2      	cmp	r2, r4
     c9a:	d94f      	bls.n	d3c <__udivmoddi4+0x1a0>
     c9c:	192c      	adds	r4, r5, r4
     c9e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     ca2:	d204      	bcs.n	cae <__udivmoddi4+0x112>
     ca4:	42a2      	cmp	r2, r4
     ca6:	d902      	bls.n	cae <__udivmoddi4+0x112>
     ca8:	f1ac 0302 	sub.w	r3, ip, #2
     cac:	442c      	add	r4, r5
     cae:	1aa4      	subs	r4, r4, r2
     cb0:	e7be      	b.n	c30 <__udivmoddi4+0x94>
     cb2:	f1c7 0c20 	rsb	ip, r7, #32
     cb6:	fa20 f80c 	lsr.w	r8, r0, ip
     cba:	fa00 f307 	lsl.w	r3, r0, r7
     cbe:	fa24 fc0c 	lsr.w	ip, r4, ip
     cc2:	40bd      	lsls	r5, r7
     cc4:	ea4c 0203 	orr.w	r2, ip, r3
     cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     ccc:	b2ab      	uxth	r3, r5
     cce:	fbb8 fcfe 	udiv	ip, r8, lr
     cd2:	0c11      	lsrs	r1, r2, #16
     cd4:	fb0e 801c 	mls	r0, lr, ip, r8
     cd8:	fb0c f903 	mul.w	r9, ip, r3
     cdc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     ce0:	4581      	cmp	r9, r0
     ce2:	fa04 f407 	lsl.w	r4, r4, r7
     ce6:	d923      	bls.n	d30 <__udivmoddi4+0x194>
     ce8:	1828      	adds	r0, r5, r0
     cea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     cee:	d204      	bcs.n	cfa <__udivmoddi4+0x15e>
     cf0:	4581      	cmp	r9, r0
     cf2:	d902      	bls.n	cfa <__udivmoddi4+0x15e>
     cf4:	f1ac 0102 	sub.w	r1, ip, #2
     cf8:	4428      	add	r0, r5
     cfa:	eba0 0009 	sub.w	r0, r0, r9
     cfe:	b292      	uxth	r2, r2
     d00:	fbb0 fcfe 	udiv	ip, r0, lr
     d04:	fb0e 001c 	mls	r0, lr, ip, r0
     d08:	fb0c f803 	mul.w	r8, ip, r3
     d0c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     d10:	4598      	cmp	r8, r3
     d12:	d90f      	bls.n	d34 <__udivmoddi4+0x198>
     d14:	18eb      	adds	r3, r5, r3
     d16:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     d1a:	d204      	bcs.n	d26 <__udivmoddi4+0x18a>
     d1c:	4598      	cmp	r8, r3
     d1e:	d902      	bls.n	d26 <__udivmoddi4+0x18a>
     d20:	f1ac 0202 	sub.w	r2, ip, #2
     d24:	442b      	add	r3, r5
     d26:	eba3 0308 	sub.w	r3, r3, r8
     d2a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     d2e:	e791      	b.n	c54 <__udivmoddi4+0xb8>
     d30:	4661      	mov	r1, ip
     d32:	e7e2      	b.n	cfa <__udivmoddi4+0x15e>
     d34:	4662      	mov	r2, ip
     d36:	e7f6      	b.n	d26 <__udivmoddi4+0x18a>
     d38:	4660      	mov	r0, ip
     d3a:	e7a2      	b.n	c82 <__udivmoddi4+0xe6>
     d3c:	4663      	mov	r3, ip
     d3e:	e7b6      	b.n	cae <__udivmoddi4+0x112>
     d40:	4283      	cmp	r3, r0
     d42:	d905      	bls.n	d50 <__udivmoddi4+0x1b4>
     d44:	b10e      	cbz	r6, d4a <__udivmoddi4+0x1ae>
     d46:	e9c6 7000 	strd	r7, r0, [r6]
     d4a:	2100      	movs	r1, #0
     d4c:	4608      	mov	r0, r1
     d4e:	e776      	b.n	c3e <__udivmoddi4+0xa2>
     d50:	fab3 f183 	clz	r1, r3
     d54:	b981      	cbnz	r1, d78 <__udivmoddi4+0x1dc>
     d56:	4283      	cmp	r3, r0
     d58:	d301      	bcc.n	d5e <__udivmoddi4+0x1c2>
     d5a:	42ba      	cmp	r2, r7
     d5c:	d80a      	bhi.n	d74 <__udivmoddi4+0x1d8>
     d5e:	1abc      	subs	r4, r7, r2
     d60:	eb60 0303 	sbc.w	r3, r0, r3
     d64:	2001      	movs	r0, #1
     d66:	469c      	mov	ip, r3
     d68:	2e00      	cmp	r6, #0
     d6a:	d068      	beq.n	e3e <__udivmoddi4+0x2a2>
     d6c:	e9c6 4c00 	strd	r4, ip, [r6]
     d70:	2100      	movs	r1, #0
     d72:	e764      	b.n	c3e <__udivmoddi4+0xa2>
     d74:	4608      	mov	r0, r1
     d76:	e7f7      	b.n	d68 <__udivmoddi4+0x1cc>
     d78:	f1c1 0c20 	rsb	ip, r1, #32
     d7c:	408b      	lsls	r3, r1
     d7e:	fa22 f40c 	lsr.w	r4, r2, ip
     d82:	431c      	orrs	r4, r3
     d84:	fa02 f501 	lsl.w	r5, r2, r1
     d88:	fa00 f301 	lsl.w	r3, r0, r1
     d8c:	fa27 f20c 	lsr.w	r2, r7, ip
     d90:	fa20 fb0c 	lsr.w	fp, r0, ip
     d94:	ea4f 4914 	mov.w	r9, r4, lsr #16
     d98:	4313      	orrs	r3, r2
     d9a:	fbbb f8f9 	udiv	r8, fp, r9
     d9e:	fa1f fe84 	uxth.w	lr, r4
     da2:	fb09 bb18 	mls	fp, r9, r8, fp
     da6:	0c1a      	lsrs	r2, r3, #16
     da8:	fb08 fa0e 	mul.w	sl, r8, lr
     dac:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     db0:	4592      	cmp	sl, r2
     db2:	fa07 f701 	lsl.w	r7, r7, r1
     db6:	d93e      	bls.n	e36 <__udivmoddi4+0x29a>
     db8:	18a2      	adds	r2, r4, r2
     dba:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     dbe:	d204      	bcs.n	dca <__udivmoddi4+0x22e>
     dc0:	4592      	cmp	sl, r2
     dc2:	d902      	bls.n	dca <__udivmoddi4+0x22e>
     dc4:	f1a8 0002 	sub.w	r0, r8, #2
     dc8:	4422      	add	r2, r4
     dca:	eba2 020a 	sub.w	r2, r2, sl
     dce:	b29b      	uxth	r3, r3
     dd0:	fbb2 f8f9 	udiv	r8, r2, r9
     dd4:	fb09 2218 	mls	r2, r9, r8, r2
     dd8:	fb08 fe0e 	mul.w	lr, r8, lr
     ddc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     de0:	4596      	cmp	lr, r2
     de2:	d92a      	bls.n	e3a <__udivmoddi4+0x29e>
     de4:	18a2      	adds	r2, r4, r2
     de6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     dea:	d204      	bcs.n	df6 <__udivmoddi4+0x25a>
     dec:	4596      	cmp	lr, r2
     dee:	d902      	bls.n	df6 <__udivmoddi4+0x25a>
     df0:	f1a8 0302 	sub.w	r3, r8, #2
     df4:	4422      	add	r2, r4
     df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     dfa:	fba0 9305 	umull	r9, r3, r0, r5
     dfe:	eba2 020e 	sub.w	r2, r2, lr
     e02:	429a      	cmp	r2, r3
     e04:	46ce      	mov	lr, r9
     e06:	4698      	mov	r8, r3
     e08:	d302      	bcc.n	e10 <__udivmoddi4+0x274>
     e0a:	d106      	bne.n	e1a <__udivmoddi4+0x27e>
     e0c:	454f      	cmp	r7, r9
     e0e:	d204      	bcs.n	e1a <__udivmoddi4+0x27e>
     e10:	ebb9 0e05 	subs.w	lr, r9, r5
     e14:	eb63 0804 	sbc.w	r8, r3, r4
     e18:	3801      	subs	r0, #1
     e1a:	b186      	cbz	r6, e3e <__udivmoddi4+0x2a2>
     e1c:	ebb7 030e 	subs.w	r3, r7, lr
     e20:	eb62 0708 	sbc.w	r7, r2, r8
     e24:	fa07 fc0c 	lsl.w	ip, r7, ip
     e28:	40cb      	lsrs	r3, r1
     e2a:	ea4c 0303 	orr.w	r3, ip, r3
     e2e:	40cf      	lsrs	r7, r1
     e30:	e9c6 3700 	strd	r3, r7, [r6]
     e34:	e79c      	b.n	d70 <__udivmoddi4+0x1d4>
     e36:	4640      	mov	r0, r8
     e38:	e7c7      	b.n	dca <__udivmoddi4+0x22e>
     e3a:	4643      	mov	r3, r8
     e3c:	e7db      	b.n	df6 <__udivmoddi4+0x25a>
     e3e:	4631      	mov	r1, r6
     e40:	e6fd      	b.n	c3e <__udivmoddi4+0xa2>

00000e42 <strlen>:
     e42:	4603      	mov	r3, r0
     e44:	f813 2b01 	ldrb.w	r2, [r3], #1
     e48:	2a00      	cmp	r2, #0
     e4a:	d1fb      	bne.n	e44 <strlen+0x2>
     e4c:	1a18      	subs	r0, r3, r0
     e4e:	3801      	subs	r0, #1
     e50:	4770      	bx	lr
     e52:	0000      	movs	r0, r0
     e54:	0000      	movs	r0, r0
	...

00000e58 <__ieee754_acos>:
     e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e5c:	4cb2      	ldr	r4, [pc, #712]	; (1128 <CONFIG_FPROTECT_BLOCK_SIZE+0x128>)
     e5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
     e62:	42a3      	cmp	r3, r4
     e64:	4607      	mov	r7, r0
     e66:	460e      	mov	r6, r1
     e68:	dd16      	ble.n	e98 <__ieee754_acos+0x40>
     e6a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
     e6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
     e72:	4303      	orrs	r3, r0
     e74:	d107      	bne.n	e86 <__ieee754_acos+0x2e>
     e76:	2900      	cmp	r1, #0
     e78:	f300 8202 	bgt.w	1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>
     e7c:	a190      	add	r1, pc, #576	; (adr r1, 10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>)
     e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
     e82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e86:	4602      	mov	r2, r0
     e88:	460b      	mov	r3, r1
     e8a:	f7ff f98d 	bl	1a8 <__aeabi_dsub>
     e8e:	4602      	mov	r2, r0
     e90:	460b      	mov	r3, r1
     e92:	f7ff fc6b 	bl	76c <__aeabi_ddiv>
     e96:	e7f4      	b.n	e82 <__ieee754_acos+0x2a>
     e98:	4ca4      	ldr	r4, [pc, #656]	; (112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>)
     e9a:	42a3      	cmp	r3, r4
     e9c:	f300 8083 	bgt.w	fa6 <__ieee754_acos+0x14e>
     ea0:	4aa3      	ldr	r2, [pc, #652]	; (1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>)
     ea2:	4293      	cmp	r3, r2
     ea4:	f340 81ef 	ble.w	1286 <CONFIG_FPROTECT_BLOCK_SIZE+0x286>
     ea8:	4602      	mov	r2, r0
     eaa:	460b      	mov	r3, r1
     eac:	f7ff fb34 	bl	518 <__aeabi_dmul>
     eb0:	a385      	add	r3, pc, #532	; (adr r3, 10c8 <CONFIG_FPROTECT_BLOCK_SIZE+0xc8>)
     eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
     eb6:	4604      	mov	r4, r0
     eb8:	460d      	mov	r5, r1
     eba:	f7ff fb2d 	bl	518 <__aeabi_dmul>
     ebe:	a384      	add	r3, pc, #528	; (adr r3, 10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
     ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
     ec4:	f7ff f972 	bl	1ac <__adddf3>
     ec8:	4622      	mov	r2, r4
     eca:	462b      	mov	r3, r5
     ecc:	f7ff fb24 	bl	518 <__aeabi_dmul>
     ed0:	a381      	add	r3, pc, #516	; (adr r3, 10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>)
     ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
     ed6:	f7ff f967 	bl	1a8 <__aeabi_dsub>
     eda:	4622      	mov	r2, r4
     edc:	462b      	mov	r3, r5
     ede:	f7ff fb1b 	bl	518 <__aeabi_dmul>
     ee2:	a37f      	add	r3, pc, #508	; (adr r3, 10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>)
     ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
     ee8:	f7ff f960 	bl	1ac <__adddf3>
     eec:	4622      	mov	r2, r4
     eee:	462b      	mov	r3, r5
     ef0:	f7ff fb12 	bl	518 <__aeabi_dmul>
     ef4:	a37c      	add	r3, pc, #496	; (adr r3, 10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>)
     ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
     efa:	f7ff f955 	bl	1a8 <__aeabi_dsub>
     efe:	4622      	mov	r2, r4
     f00:	462b      	mov	r3, r5
     f02:	f7ff fb09 	bl	518 <__aeabi_dmul>
     f06:	a37a      	add	r3, pc, #488	; (adr r3, 10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
     f08:	e9d3 2300 	ldrd	r2, r3, [r3]
     f0c:	f7ff f94e 	bl	1ac <__adddf3>
     f10:	4622      	mov	r2, r4
     f12:	462b      	mov	r3, r5
     f14:	f7ff fb00 	bl	518 <__aeabi_dmul>
     f18:	a377      	add	r3, pc, #476	; (adr r3, 10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
     f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
     f1e:	4680      	mov	r8, r0
     f20:	4689      	mov	r9, r1
     f22:	4620      	mov	r0, r4
     f24:	4629      	mov	r1, r5
     f26:	f7ff faf7 	bl	518 <__aeabi_dmul>
     f2a:	a375      	add	r3, pc, #468	; (adr r3, 1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>)
     f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
     f30:	f7ff f93a 	bl	1a8 <__aeabi_dsub>
     f34:	4622      	mov	r2, r4
     f36:	462b      	mov	r3, r5
     f38:	f7ff faee 	bl	518 <__aeabi_dmul>
     f3c:	a372      	add	r3, pc, #456	; (adr r3, 1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
     f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
     f42:	f7ff f933 	bl	1ac <__adddf3>
     f46:	4622      	mov	r2, r4
     f48:	462b      	mov	r3, r5
     f4a:	f7ff fae5 	bl	518 <__aeabi_dmul>
     f4e:	a370      	add	r3, pc, #448	; (adr r3, 1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
     f50:	e9d3 2300 	ldrd	r2, r3, [r3]
     f54:	f7ff f928 	bl	1a8 <__aeabi_dsub>
     f58:	4622      	mov	r2, r4
     f5a:	462b      	mov	r3, r5
     f5c:	f7ff fadc 	bl	518 <__aeabi_dmul>
     f60:	4b74      	ldr	r3, [pc, #464]	; (1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>)
     f62:	2200      	movs	r2, #0
     f64:	f7ff f922 	bl	1ac <__adddf3>
     f68:	4602      	mov	r2, r0
     f6a:	460b      	mov	r3, r1
     f6c:	4640      	mov	r0, r8
     f6e:	4649      	mov	r1, r9
     f70:	f7ff fbfc 	bl	76c <__aeabi_ddiv>
     f74:	463a      	mov	r2, r7
     f76:	4633      	mov	r3, r6
     f78:	f7ff face 	bl	518 <__aeabi_dmul>
     f7c:	4602      	mov	r2, r0
     f7e:	460b      	mov	r3, r1
     f80:	a165      	add	r1, pc, #404	; (adr r1, 1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
     f82:	e9d1 0100 	ldrd	r0, r1, [r1]
     f86:	f7ff f90f 	bl	1a8 <__aeabi_dsub>
     f8a:	4602      	mov	r2, r0
     f8c:	460b      	mov	r3, r1
     f8e:	4638      	mov	r0, r7
     f90:	4631      	mov	r1, r6
     f92:	f7ff f909 	bl	1a8 <__aeabi_dsub>
     f96:	4602      	mov	r2, r0
     f98:	460b      	mov	r3, r1
     f9a:	a161      	add	r1, pc, #388	; (adr r1, 1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>)
     f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
     fa0:	f7ff f902 	bl	1a8 <__aeabi_dsub>
     fa4:	e76d      	b.n	e82 <__ieee754_acos+0x2a>
     fa6:	2900      	cmp	r1, #0
     fa8:	f280 80c8 	bge.w	113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>
     fac:	4b61      	ldr	r3, [pc, #388]	; (1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>)
     fae:	2200      	movs	r2, #0
     fb0:	f7ff f8fc 	bl	1ac <__adddf3>
     fb4:	4b60      	ldr	r3, [pc, #384]	; (1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>)
     fb6:	2200      	movs	r2, #0
     fb8:	f7ff faae 	bl	518 <__aeabi_dmul>
     fbc:	a342      	add	r3, pc, #264	; (adr r3, 10c8 <CONFIG_FPROTECT_BLOCK_SIZE+0xc8>)
     fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
     fc2:	4604      	mov	r4, r0
     fc4:	460d      	mov	r5, r1
     fc6:	f7ff faa7 	bl	518 <__aeabi_dmul>
     fca:	a341      	add	r3, pc, #260	; (adr r3, 10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
     fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
     fd0:	f7ff f8ec 	bl	1ac <__adddf3>
     fd4:	4622      	mov	r2, r4
     fd6:	462b      	mov	r3, r5
     fd8:	f7ff fa9e 	bl	518 <__aeabi_dmul>
     fdc:	a33e      	add	r3, pc, #248	; (adr r3, 10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>)
     fde:	e9d3 2300 	ldrd	r2, r3, [r3]
     fe2:	f7ff f8e1 	bl	1a8 <__aeabi_dsub>
     fe6:	4622      	mov	r2, r4
     fe8:	462b      	mov	r3, r5
     fea:	f7ff fa95 	bl	518 <__aeabi_dmul>
     fee:	a33c      	add	r3, pc, #240	; (adr r3, 10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>)
     ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
     ff4:	f7ff f8da 	bl	1ac <__adddf3>
     ff8:	4622      	mov	r2, r4
     ffa:	462b      	mov	r3, r5
     ffc:	f7ff fa8c 	bl	518 <__aeabi_dmul>
    1000:	a339      	add	r3, pc, #228	; (adr r3, 10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>)
    1002:	e9d3 2300 	ldrd	r2, r3, [r3]
    1006:	f7ff f8cf 	bl	1a8 <__aeabi_dsub>
    100a:	4622      	mov	r2, r4
    100c:	462b      	mov	r3, r5
    100e:	f7ff fa83 	bl	518 <__aeabi_dmul>
    1012:	a337      	add	r3, pc, #220	; (adr r3, 10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    1014:	e9d3 2300 	ldrd	r2, r3, [r3]
    1018:	f7ff f8c8 	bl	1ac <__adddf3>
    101c:	4622      	mov	r2, r4
    101e:	462b      	mov	r3, r5
    1020:	f7ff fa7a 	bl	518 <__aeabi_dmul>
    1024:	4680      	mov	r8, r0
    1026:	4689      	mov	r9, r1
    1028:	4620      	mov	r0, r4
    102a:	4629      	mov	r1, r5
    102c:	f00b fc68 	bl	c900 <__ieee754_sqrt>
    1030:	a331      	add	r3, pc, #196	; (adr r3, 10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
    1032:	e9d3 2300 	ldrd	r2, r3, [r3]
    1036:	4606      	mov	r6, r0
    1038:	460f      	mov	r7, r1
    103a:	4620      	mov	r0, r4
    103c:	4629      	mov	r1, r5
    103e:	f7ff fa6b 	bl	518 <__aeabi_dmul>
    1042:	a32f      	add	r3, pc, #188	; (adr r3, 1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>)
    1044:	e9d3 2300 	ldrd	r2, r3, [r3]
    1048:	f7ff f8ae 	bl	1a8 <__aeabi_dsub>
    104c:	4622      	mov	r2, r4
    104e:	462b      	mov	r3, r5
    1050:	f7ff fa62 	bl	518 <__aeabi_dmul>
    1054:	a32c      	add	r3, pc, #176	; (adr r3, 1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
    1056:	e9d3 2300 	ldrd	r2, r3, [r3]
    105a:	f7ff f8a7 	bl	1ac <__adddf3>
    105e:	4622      	mov	r2, r4
    1060:	462b      	mov	r3, r5
    1062:	f7ff fa59 	bl	518 <__aeabi_dmul>
    1066:	a32a      	add	r3, pc, #168	; (adr r3, 1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
    1068:	e9d3 2300 	ldrd	r2, r3, [r3]
    106c:	f7ff f89c 	bl	1a8 <__aeabi_dsub>
    1070:	4622      	mov	r2, r4
    1072:	462b      	mov	r3, r5
    1074:	f7ff fa50 	bl	518 <__aeabi_dmul>
    1078:	4b2e      	ldr	r3, [pc, #184]	; (1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>)
    107a:	2200      	movs	r2, #0
    107c:	f7ff f896 	bl	1ac <__adddf3>
    1080:	4602      	mov	r2, r0
    1082:	460b      	mov	r3, r1
    1084:	4640      	mov	r0, r8
    1086:	4649      	mov	r1, r9
    1088:	f7ff fb70 	bl	76c <__aeabi_ddiv>
    108c:	4632      	mov	r2, r6
    108e:	463b      	mov	r3, r7
    1090:	f7ff fa42 	bl	518 <__aeabi_dmul>
    1094:	a320      	add	r3, pc, #128	; (adr r3, 1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
    1096:	e9d3 2300 	ldrd	r2, r3, [r3]
    109a:	f7ff f885 	bl	1a8 <__aeabi_dsub>
    109e:	4632      	mov	r2, r6
    10a0:	463b      	mov	r3, r7
    10a2:	f7ff f883 	bl	1ac <__adddf3>
    10a6:	4602      	mov	r2, r0
    10a8:	460b      	mov	r3, r1
    10aa:	f7ff f87f 	bl	1ac <__adddf3>
    10ae:	4602      	mov	r2, r0
    10b0:	460b      	mov	r3, r1
    10b2:	a103      	add	r1, pc, #12	; (adr r1, 10c0 <CONFIG_FPROTECT_BLOCK_SIZE+0xc0>)
    10b4:	e9d1 0100 	ldrd	r0, r1, [r1]
    10b8:	e772      	b.n	fa0 <__ieee754_acos+0x148>
    10ba:	bf00      	nop
    10bc:	f3af 8000 	nop.w
    10c0:	54442d18 	.word	0x54442d18
    10c4:	400921fb 	.word	0x400921fb
    10c8:	0dfdf709 	.word	0x0dfdf709
    10cc:	3f023de1 	.word	0x3f023de1
    10d0:	7501b288 	.word	0x7501b288
    10d4:	3f49efe0 	.word	0x3f49efe0
    10d8:	b5688f3b 	.word	0xb5688f3b
    10dc:	3fa48228 	.word	0x3fa48228
    10e0:	0e884455 	.word	0x0e884455
    10e4:	3fc9c155 	.word	0x3fc9c155
    10e8:	03eb6f7d 	.word	0x03eb6f7d
    10ec:	3fd4d612 	.word	0x3fd4d612
    10f0:	55555555 	.word	0x55555555
    10f4:	3fc55555 	.word	0x3fc55555
    10f8:	b12e9282 	.word	0xb12e9282
    10fc:	3fb3b8c5 	.word	0x3fb3b8c5
    1100:	1b8d0159 	.word	0x1b8d0159
    1104:	3fe6066c 	.word	0x3fe6066c
    1108:	9c598ac8 	.word	0x9c598ac8
    110c:	40002ae5 	.word	0x40002ae5
    1110:	1c8a2d4b 	.word	0x1c8a2d4b
    1114:	40033a27 	.word	0x40033a27
    1118:	33145c07 	.word	0x33145c07
    111c:	3c91a626 	.word	0x3c91a626
    1120:	54442d18 	.word	0x54442d18
    1124:	3ff921fb 	.word	0x3ff921fb
    1128:	3fefffff 	.word	0x3fefffff
    112c:	3fdfffff 	.word	0x3fdfffff
    1130:	3c600000 	.word	0x3c600000
    1134:	3ff00000 	.word	0x3ff00000
    1138:	3fe00000 	.word	0x3fe00000
    113c:	4602      	mov	r2, r0
    113e:	460b      	mov	r3, r1
    1140:	2000      	movs	r0, #0
    1142:	4969      	ldr	r1, [pc, #420]	; (12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>)
    1144:	f7ff f830 	bl	1a8 <__aeabi_dsub>
    1148:	4b68      	ldr	r3, [pc, #416]	; (12ec <CONFIG_FPROTECT_BLOCK_SIZE+0x2ec>)
    114a:	2200      	movs	r2, #0
    114c:	f7ff f9e4 	bl	518 <__aeabi_dmul>
    1150:	4604      	mov	r4, r0
    1152:	460d      	mov	r5, r1
    1154:	f00b fbd4 	bl	c900 <__ieee754_sqrt>
    1158:	a34d      	add	r3, pc, #308	; (adr r3, 1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>)
    115a:	e9d3 2300 	ldrd	r2, r3, [r3]
    115e:	4689      	mov	r9, r1
    1160:	4680      	mov	r8, r0
    1162:	4629      	mov	r1, r5
    1164:	4620      	mov	r0, r4
    1166:	f7ff f9d7 	bl	518 <__aeabi_dmul>
    116a:	a34b      	add	r3, pc, #300	; (adr r3, 1298 <CONFIG_FPROTECT_BLOCK_SIZE+0x298>)
    116c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1170:	f7ff f81c 	bl	1ac <__adddf3>
    1174:	4622      	mov	r2, r4
    1176:	462b      	mov	r3, r5
    1178:	f7ff f9ce 	bl	518 <__aeabi_dmul>
    117c:	a348      	add	r3, pc, #288	; (adr r3, 12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
    117e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1182:	f7ff f811 	bl	1a8 <__aeabi_dsub>
    1186:	4622      	mov	r2, r4
    1188:	462b      	mov	r3, r5
    118a:	f7ff f9c5 	bl	518 <__aeabi_dmul>
    118e:	a346      	add	r3, pc, #280	; (adr r3, 12a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a8>)
    1190:	e9d3 2300 	ldrd	r2, r3, [r3]
    1194:	f7ff f80a 	bl	1ac <__adddf3>
    1198:	4622      	mov	r2, r4
    119a:	462b      	mov	r3, r5
    119c:	f7ff f9bc 	bl	518 <__aeabi_dmul>
    11a0:	a343      	add	r3, pc, #268	; (adr r3, 12b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b0>)
    11a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    11a6:	f7fe ffff 	bl	1a8 <__aeabi_dsub>
    11aa:	4622      	mov	r2, r4
    11ac:	462b      	mov	r3, r5
    11ae:	f7ff f9b3 	bl	518 <__aeabi_dmul>
    11b2:	a341      	add	r3, pc, #260	; (adr r3, 12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>)
    11b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    11b8:	f7fe fff8 	bl	1ac <__adddf3>
    11bc:	4622      	mov	r2, r4
    11be:	462b      	mov	r3, r5
    11c0:	f7ff f9aa 	bl	518 <__aeabi_dmul>
    11c4:	a33e      	add	r3, pc, #248	; (adr r3, 12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>)
    11c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    11ca:	4682      	mov	sl, r0
    11cc:	468b      	mov	fp, r1
    11ce:	4620      	mov	r0, r4
    11d0:	4629      	mov	r1, r5
    11d2:	f7ff f9a1 	bl	518 <__aeabi_dmul>
    11d6:	a33c      	add	r3, pc, #240	; (adr r3, 12c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c8>)
    11d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    11dc:	f7fe ffe4 	bl	1a8 <__aeabi_dsub>
    11e0:	4622      	mov	r2, r4
    11e2:	462b      	mov	r3, r5
    11e4:	f7ff f998 	bl	518 <__aeabi_dmul>
    11e8:	a339      	add	r3, pc, #228	; (adr r3, 12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>)
    11ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    11ee:	f7fe ffdd 	bl	1ac <__adddf3>
    11f2:	4622      	mov	r2, r4
    11f4:	462b      	mov	r3, r5
    11f6:	f7ff f98f 	bl	518 <__aeabi_dmul>
    11fa:	a337      	add	r3, pc, #220	; (adr r3, 12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>)
    11fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    1200:	f7fe ffd2 	bl	1a8 <__aeabi_dsub>
    1204:	4622      	mov	r2, r4
    1206:	462b      	mov	r3, r5
    1208:	f7ff f986 	bl	518 <__aeabi_dmul>
    120c:	4b36      	ldr	r3, [pc, #216]	; (12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>)
    120e:	2200      	movs	r2, #0
    1210:	f7fe ffcc 	bl	1ac <__adddf3>
    1214:	4602      	mov	r2, r0
    1216:	460b      	mov	r3, r1
    1218:	4650      	mov	r0, sl
    121a:	4659      	mov	r1, fp
    121c:	f7ff faa6 	bl	76c <__aeabi_ddiv>
    1220:	4642      	mov	r2, r8
    1222:	464b      	mov	r3, r9
    1224:	f7ff f978 	bl	518 <__aeabi_dmul>
    1228:	2600      	movs	r6, #0
    122a:	4682      	mov	sl, r0
    122c:	468b      	mov	fp, r1
    122e:	4632      	mov	r2, r6
    1230:	464b      	mov	r3, r9
    1232:	4630      	mov	r0, r6
    1234:	4649      	mov	r1, r9
    1236:	f7ff f96f 	bl	518 <__aeabi_dmul>
    123a:	4602      	mov	r2, r0
    123c:	460b      	mov	r3, r1
    123e:	4620      	mov	r0, r4
    1240:	4629      	mov	r1, r5
    1242:	f7fe ffb1 	bl	1a8 <__aeabi_dsub>
    1246:	4632      	mov	r2, r6
    1248:	4604      	mov	r4, r0
    124a:	460d      	mov	r5, r1
    124c:	464b      	mov	r3, r9
    124e:	4640      	mov	r0, r8
    1250:	4649      	mov	r1, r9
    1252:	f7fe ffab 	bl	1ac <__adddf3>
    1256:	4602      	mov	r2, r0
    1258:	460b      	mov	r3, r1
    125a:	4620      	mov	r0, r4
    125c:	4629      	mov	r1, r5
    125e:	f7ff fa85 	bl	76c <__aeabi_ddiv>
    1262:	4602      	mov	r2, r0
    1264:	460b      	mov	r3, r1
    1266:	4650      	mov	r0, sl
    1268:	4659      	mov	r1, fp
    126a:	f7fe ff9f 	bl	1ac <__adddf3>
    126e:	4632      	mov	r2, r6
    1270:	464b      	mov	r3, r9
    1272:	f7fe ff9b 	bl	1ac <__adddf3>
    1276:	4602      	mov	r2, r0
    1278:	460b      	mov	r3, r1
    127a:	f7fe ff97 	bl	1ac <__adddf3>
    127e:	e600      	b.n	e82 <__ieee754_acos+0x2a>
    1280:	2000      	movs	r0, #0
    1282:	2100      	movs	r1, #0
    1284:	e5fd      	b.n	e82 <__ieee754_acos+0x2a>
    1286:	a116      	add	r1, pc, #88	; (adr r1, 12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>)
    1288:	e9d1 0100 	ldrd	r0, r1, [r1]
    128c:	e5f9      	b.n	e82 <__ieee754_acos+0x2a>
    128e:	bf00      	nop
    1290:	0dfdf709 	.word	0x0dfdf709
    1294:	3f023de1 	.word	0x3f023de1
    1298:	7501b288 	.word	0x7501b288
    129c:	3f49efe0 	.word	0x3f49efe0
    12a0:	b5688f3b 	.word	0xb5688f3b
    12a4:	3fa48228 	.word	0x3fa48228
    12a8:	0e884455 	.word	0x0e884455
    12ac:	3fc9c155 	.word	0x3fc9c155
    12b0:	03eb6f7d 	.word	0x03eb6f7d
    12b4:	3fd4d612 	.word	0x3fd4d612
    12b8:	55555555 	.word	0x55555555
    12bc:	3fc55555 	.word	0x3fc55555
    12c0:	b12e9282 	.word	0xb12e9282
    12c4:	3fb3b8c5 	.word	0x3fb3b8c5
    12c8:	1b8d0159 	.word	0x1b8d0159
    12cc:	3fe6066c 	.word	0x3fe6066c
    12d0:	9c598ac8 	.word	0x9c598ac8
    12d4:	40002ae5 	.word	0x40002ae5
    12d8:	1c8a2d4b 	.word	0x1c8a2d4b
    12dc:	40033a27 	.word	0x40033a27
    12e0:	54442d18 	.word	0x54442d18
    12e4:	3ff921fb 	.word	0x3ff921fb
    12e8:	3ff00000 	.word	0x3ff00000
    12ec:	3fe00000 	.word	0x3fe00000

000012f0 <__ieee754_pow>:
    12f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12f4:	b093      	sub	sp, #76	; 0x4c
    12f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    12fa:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
    12fe:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
    1302:	ea55 0302 	orrs.w	r3, r5, r2
    1306:	4607      	mov	r7, r0
    1308:	4688      	mov	r8, r1
    130a:	f000 84bf 	beq.w	1c8c <__ieee754_pow+0x99c>
    130e:	4b7e      	ldr	r3, [pc, #504]	; (1508 <__ieee754_pow+0x218>)
    1310:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    1314:	429c      	cmp	r4, r3
    1316:	4689      	mov	r9, r1
    1318:	4682      	mov	sl, r0
    131a:	dc09      	bgt.n	1330 <__ieee754_pow+0x40>
    131c:	d103      	bne.n	1326 <__ieee754_pow+0x36>
    131e:	b978      	cbnz	r0, 1340 <__ieee754_pow+0x50>
    1320:	42a5      	cmp	r5, r4
    1322:	dd02      	ble.n	132a <__ieee754_pow+0x3a>
    1324:	e00c      	b.n	1340 <__ieee754_pow+0x50>
    1326:	429d      	cmp	r5, r3
    1328:	dc02      	bgt.n	1330 <__ieee754_pow+0x40>
    132a:	429d      	cmp	r5, r3
    132c:	d10e      	bne.n	134c <__ieee754_pow+0x5c>
    132e:	b16a      	cbz	r2, 134c <__ieee754_pow+0x5c>
    1330:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    1334:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    1338:	ea54 030a 	orrs.w	r3, r4, sl
    133c:	f000 84a6 	beq.w	1c8c <__ieee754_pow+0x99c>
    1340:	4872      	ldr	r0, [pc, #456]	; (150c <__ieee754_pow+0x21c>)
    1342:	b013      	add	sp, #76	; 0x4c
    1344:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1348:	f00b bb88 	b.w	ca5c <nan>
    134c:	f1b9 0f00 	cmp.w	r9, #0
    1350:	da39      	bge.n	13c6 <__ieee754_pow+0xd6>
    1352:	4b6f      	ldr	r3, [pc, #444]	; (1510 <__ieee754_pow+0x220>)
    1354:	429d      	cmp	r5, r3
    1356:	dc54      	bgt.n	1402 <__ieee754_pow+0x112>
    1358:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    135c:	429d      	cmp	r5, r3
    135e:	f340 84a6 	ble.w	1cae <__ieee754_pow+0x9be>
    1362:	152b      	asrs	r3, r5, #20
    1364:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    1368:	2b14      	cmp	r3, #20
    136a:	dd0f      	ble.n	138c <__ieee754_pow+0x9c>
    136c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    1370:	fa22 f103 	lsr.w	r1, r2, r3
    1374:	fa01 f303 	lsl.w	r3, r1, r3
    1378:	4293      	cmp	r3, r2
    137a:	f040 8498 	bne.w	1cae <__ieee754_pow+0x9be>
    137e:	f001 0101 	and.w	r1, r1, #1
    1382:	f1c1 0302 	rsb	r3, r1, #2
    1386:	9300      	str	r3, [sp, #0]
    1388:	b182      	cbz	r2, 13ac <__ieee754_pow+0xbc>
    138a:	e05e      	b.n	144a <__ieee754_pow+0x15a>
    138c:	2a00      	cmp	r2, #0
    138e:	d15a      	bne.n	1446 <__ieee754_pow+0x156>
    1390:	f1c3 0314 	rsb	r3, r3, #20
    1394:	fa45 f103 	asr.w	r1, r5, r3
    1398:	fa01 f303 	lsl.w	r3, r1, r3
    139c:	42ab      	cmp	r3, r5
    139e:	f040 8483 	bne.w	1ca8 <__ieee754_pow+0x9b8>
    13a2:	f001 0101 	and.w	r1, r1, #1
    13a6:	f1c1 0302 	rsb	r3, r1, #2
    13aa:	9300      	str	r3, [sp, #0]
    13ac:	4b59      	ldr	r3, [pc, #356]	; (1514 <__ieee754_pow+0x224>)
    13ae:	429d      	cmp	r5, r3
    13b0:	d130      	bne.n	1414 <__ieee754_pow+0x124>
    13b2:	2e00      	cmp	r6, #0
    13b4:	f280 8474 	bge.w	1ca0 <__ieee754_pow+0x9b0>
    13b8:	4956      	ldr	r1, [pc, #344]	; (1514 <__ieee754_pow+0x224>)
    13ba:	463a      	mov	r2, r7
    13bc:	4643      	mov	r3, r8
    13be:	2000      	movs	r0, #0
    13c0:	f7ff f9d4 	bl	76c <__aeabi_ddiv>
    13c4:	e02f      	b.n	1426 <__ieee754_pow+0x136>
    13c6:	2300      	movs	r3, #0
    13c8:	9300      	str	r3, [sp, #0]
    13ca:	2a00      	cmp	r2, #0
    13cc:	d13d      	bne.n	144a <__ieee754_pow+0x15a>
    13ce:	4b4e      	ldr	r3, [pc, #312]	; (1508 <__ieee754_pow+0x218>)
    13d0:	429d      	cmp	r5, r3
    13d2:	d1eb      	bne.n	13ac <__ieee754_pow+0xbc>
    13d4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
    13d8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    13dc:	ea53 030a 	orrs.w	r3, r3, sl
    13e0:	f000 8454 	beq.w	1c8c <__ieee754_pow+0x99c>
    13e4:	4b4c      	ldr	r3, [pc, #304]	; (1518 <__ieee754_pow+0x228>)
    13e6:	429c      	cmp	r4, r3
    13e8:	dd0d      	ble.n	1406 <__ieee754_pow+0x116>
    13ea:	2e00      	cmp	r6, #0
    13ec:	f280 8454 	bge.w	1c98 <__ieee754_pow+0x9a8>
    13f0:	f04f 0b00 	mov.w	fp, #0
    13f4:	f04f 0c00 	mov.w	ip, #0
    13f8:	4658      	mov	r0, fp
    13fa:	4661      	mov	r1, ip
    13fc:	b013      	add	sp, #76	; 0x4c
    13fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1402:	2302      	movs	r3, #2
    1404:	e7e0      	b.n	13c8 <__ieee754_pow+0xd8>
    1406:	2e00      	cmp	r6, #0
    1408:	daf2      	bge.n	13f0 <__ieee754_pow+0x100>
    140a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
    140e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
    1412:	e7f1      	b.n	13f8 <__ieee754_pow+0x108>
    1414:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
    1418:	d108      	bne.n	142c <__ieee754_pow+0x13c>
    141a:	463a      	mov	r2, r7
    141c:	4643      	mov	r3, r8
    141e:	4638      	mov	r0, r7
    1420:	4641      	mov	r1, r8
    1422:	f7ff f879 	bl	518 <__aeabi_dmul>
    1426:	4683      	mov	fp, r0
    1428:	468c      	mov	ip, r1
    142a:	e7e5      	b.n	13f8 <__ieee754_pow+0x108>
    142c:	4b3b      	ldr	r3, [pc, #236]	; (151c <__ieee754_pow+0x22c>)
    142e:	429e      	cmp	r6, r3
    1430:	d10b      	bne.n	144a <__ieee754_pow+0x15a>
    1432:	f1b9 0f00 	cmp.w	r9, #0
    1436:	db08      	blt.n	144a <__ieee754_pow+0x15a>
    1438:	4638      	mov	r0, r7
    143a:	4641      	mov	r1, r8
    143c:	b013      	add	sp, #76	; 0x4c
    143e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1442:	f00b ba5d 	b.w	c900 <__ieee754_sqrt>
    1446:	2300      	movs	r3, #0
    1448:	9300      	str	r3, [sp, #0]
    144a:	4638      	mov	r0, r7
    144c:	4641      	mov	r1, r8
    144e:	f00d ffaa 	bl	f3a6 <fabs>
    1452:	4683      	mov	fp, r0
    1454:	468c      	mov	ip, r1
    1456:	f1ba 0f00 	cmp.w	sl, #0
    145a:	d129      	bne.n	14b0 <__ieee754_pow+0x1c0>
    145c:	b124      	cbz	r4, 1468 <__ieee754_pow+0x178>
    145e:	4b2d      	ldr	r3, [pc, #180]	; (1514 <__ieee754_pow+0x224>)
    1460:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
    1464:	429a      	cmp	r2, r3
    1466:	d123      	bne.n	14b0 <__ieee754_pow+0x1c0>
    1468:	2e00      	cmp	r6, #0
    146a:	da07      	bge.n	147c <__ieee754_pow+0x18c>
    146c:	465a      	mov	r2, fp
    146e:	4663      	mov	r3, ip
    1470:	4928      	ldr	r1, [pc, #160]	; (1514 <__ieee754_pow+0x224>)
    1472:	2000      	movs	r0, #0
    1474:	f7ff f97a 	bl	76c <__aeabi_ddiv>
    1478:	4683      	mov	fp, r0
    147a:	468c      	mov	ip, r1
    147c:	f1b9 0f00 	cmp.w	r9, #0
    1480:	daba      	bge.n	13f8 <__ieee754_pow+0x108>
    1482:	9b00      	ldr	r3, [sp, #0]
    1484:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    1488:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    148c:	4323      	orrs	r3, r4
    148e:	d108      	bne.n	14a2 <__ieee754_pow+0x1b2>
    1490:	465a      	mov	r2, fp
    1492:	4663      	mov	r3, ip
    1494:	4658      	mov	r0, fp
    1496:	4661      	mov	r1, ip
    1498:	f7fe fe86 	bl	1a8 <__aeabi_dsub>
    149c:	4602      	mov	r2, r0
    149e:	460b      	mov	r3, r1
    14a0:	e78e      	b.n	13c0 <__ieee754_pow+0xd0>
    14a2:	9b00      	ldr	r3, [sp, #0]
    14a4:	2b01      	cmp	r3, #1
    14a6:	d1a7      	bne.n	13f8 <__ieee754_pow+0x108>
    14a8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
    14ac:	469c      	mov	ip, r3
    14ae:	e7a3      	b.n	13f8 <__ieee754_pow+0x108>
    14b0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
    14b4:	3b01      	subs	r3, #1
    14b6:	930c      	str	r3, [sp, #48]	; 0x30
    14b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    14ba:	9b00      	ldr	r3, [sp, #0]
    14bc:	4313      	orrs	r3, r2
    14be:	d104      	bne.n	14ca <__ieee754_pow+0x1da>
    14c0:	463a      	mov	r2, r7
    14c2:	4643      	mov	r3, r8
    14c4:	4638      	mov	r0, r7
    14c6:	4641      	mov	r1, r8
    14c8:	e7e6      	b.n	1498 <__ieee754_pow+0x1a8>
    14ca:	4b15      	ldr	r3, [pc, #84]	; (1520 <__ieee754_pow+0x230>)
    14cc:	429d      	cmp	r5, r3
    14ce:	f340 80f9 	ble.w	16c4 <__ieee754_pow+0x3d4>
    14d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    14d6:	429d      	cmp	r5, r3
    14d8:	4b0f      	ldr	r3, [pc, #60]	; (1518 <__ieee754_pow+0x228>)
    14da:	dd09      	ble.n	14f0 <__ieee754_pow+0x200>
    14dc:	429c      	cmp	r4, r3
    14de:	dc0c      	bgt.n	14fa <__ieee754_pow+0x20a>
    14e0:	2e00      	cmp	r6, #0
    14e2:	da85      	bge.n	13f0 <__ieee754_pow+0x100>
    14e4:	a306      	add	r3, pc, #24	; (adr r3, 1500 <__ieee754_pow+0x210>)
    14e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    14ea:	4610      	mov	r0, r2
    14ec:	4619      	mov	r1, r3
    14ee:	e798      	b.n	1422 <__ieee754_pow+0x132>
    14f0:	429c      	cmp	r4, r3
    14f2:	dbf5      	blt.n	14e0 <__ieee754_pow+0x1f0>
    14f4:	4b07      	ldr	r3, [pc, #28]	; (1514 <__ieee754_pow+0x224>)
    14f6:	429c      	cmp	r4, r3
    14f8:	dd14      	ble.n	1524 <__ieee754_pow+0x234>
    14fa:	2e00      	cmp	r6, #0
    14fc:	dcf2      	bgt.n	14e4 <__ieee754_pow+0x1f4>
    14fe:	e777      	b.n	13f0 <__ieee754_pow+0x100>
    1500:	8800759c 	.word	0x8800759c
    1504:	7e37e43c 	.word	0x7e37e43c
    1508:	7ff00000 	.word	0x7ff00000
    150c:	0001202e 	.word	0x0001202e
    1510:	433fffff 	.word	0x433fffff
    1514:	3ff00000 	.word	0x3ff00000
    1518:	3fefffff 	.word	0x3fefffff
    151c:	3fe00000 	.word	0x3fe00000
    1520:	41e00000 	.word	0x41e00000
    1524:	4661      	mov	r1, ip
    1526:	4b62      	ldr	r3, [pc, #392]	; (16b0 <__ieee754_pow+0x3c0>)
    1528:	2200      	movs	r2, #0
    152a:	4658      	mov	r0, fp
    152c:	f7fe fe3c 	bl	1a8 <__aeabi_dsub>
    1530:	a355      	add	r3, pc, #340	; (adr r3, 1688 <__ieee754_pow+0x398>)
    1532:	e9d3 2300 	ldrd	r2, r3, [r3]
    1536:	4604      	mov	r4, r0
    1538:	460d      	mov	r5, r1
    153a:	f7fe ffed 	bl	518 <__aeabi_dmul>
    153e:	a354      	add	r3, pc, #336	; (adr r3, 1690 <__ieee754_pow+0x3a0>)
    1540:	e9d3 2300 	ldrd	r2, r3, [r3]
    1544:	4606      	mov	r6, r0
    1546:	460f      	mov	r7, r1
    1548:	4620      	mov	r0, r4
    154a:	4629      	mov	r1, r5
    154c:	f7fe ffe4 	bl	518 <__aeabi_dmul>
    1550:	4b58      	ldr	r3, [pc, #352]	; (16b4 <__ieee754_pow+0x3c4>)
    1552:	4682      	mov	sl, r0
    1554:	468b      	mov	fp, r1
    1556:	2200      	movs	r2, #0
    1558:	4620      	mov	r0, r4
    155a:	4629      	mov	r1, r5
    155c:	f7fe ffdc 	bl	518 <__aeabi_dmul>
    1560:	4602      	mov	r2, r0
    1562:	460b      	mov	r3, r1
    1564:	a14c      	add	r1, pc, #304	; (adr r1, 1698 <__ieee754_pow+0x3a8>)
    1566:	e9d1 0100 	ldrd	r0, r1, [r1]
    156a:	f7fe fe1d 	bl	1a8 <__aeabi_dsub>
    156e:	4622      	mov	r2, r4
    1570:	462b      	mov	r3, r5
    1572:	f7fe ffd1 	bl	518 <__aeabi_dmul>
    1576:	4602      	mov	r2, r0
    1578:	460b      	mov	r3, r1
    157a:	2000      	movs	r0, #0
    157c:	494e      	ldr	r1, [pc, #312]	; (16b8 <__ieee754_pow+0x3c8>)
    157e:	f7fe fe13 	bl	1a8 <__aeabi_dsub>
    1582:	4622      	mov	r2, r4
    1584:	462b      	mov	r3, r5
    1586:	4680      	mov	r8, r0
    1588:	4689      	mov	r9, r1
    158a:	4620      	mov	r0, r4
    158c:	4629      	mov	r1, r5
    158e:	f7fe ffc3 	bl	518 <__aeabi_dmul>
    1592:	4602      	mov	r2, r0
    1594:	460b      	mov	r3, r1
    1596:	4640      	mov	r0, r8
    1598:	4649      	mov	r1, r9
    159a:	f7fe ffbd 	bl	518 <__aeabi_dmul>
    159e:	a340      	add	r3, pc, #256	; (adr r3, 16a0 <__ieee754_pow+0x3b0>)
    15a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    15a4:	f7fe ffb8 	bl	518 <__aeabi_dmul>
    15a8:	4602      	mov	r2, r0
    15aa:	460b      	mov	r3, r1
    15ac:	4650      	mov	r0, sl
    15ae:	4659      	mov	r1, fp
    15b0:	f7fe fdfa 	bl	1a8 <__aeabi_dsub>
    15b4:	4602      	mov	r2, r0
    15b6:	460b      	mov	r3, r1
    15b8:	4604      	mov	r4, r0
    15ba:	460d      	mov	r5, r1
    15bc:	4630      	mov	r0, r6
    15be:	4639      	mov	r1, r7
    15c0:	f7fe fdf4 	bl	1ac <__adddf3>
    15c4:	f04f 0a00 	mov.w	sl, #0
    15c8:	4632      	mov	r2, r6
    15ca:	463b      	mov	r3, r7
    15cc:	4650      	mov	r0, sl
    15ce:	468b      	mov	fp, r1
    15d0:	f7fe fdea 	bl	1a8 <__aeabi_dsub>
    15d4:	4602      	mov	r2, r0
    15d6:	460b      	mov	r3, r1
    15d8:	4620      	mov	r0, r4
    15da:	4629      	mov	r1, r5
    15dc:	f7fe fde4 	bl	1a8 <__aeabi_dsub>
    15e0:	9b00      	ldr	r3, [sp, #0]
    15e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    15e4:	3b01      	subs	r3, #1
    15e6:	4313      	orrs	r3, r2
    15e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    15ec:	bf0c      	ite	eq
    15ee:	4b33      	ldreq	r3, [pc, #204]	; (16bc <__ieee754_pow+0x3cc>)
    15f0:	4b2f      	ldrne	r3, [pc, #188]	; (16b0 <__ieee754_pow+0x3c0>)
    15f2:	2600      	movs	r6, #0
    15f4:	2200      	movs	r2, #0
    15f6:	e9cd 2300 	strd	r2, r3, [sp]
    15fa:	4604      	mov	r4, r0
    15fc:	460d      	mov	r5, r1
    15fe:	4632      	mov	r2, r6
    1600:	463b      	mov	r3, r7
    1602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1606:	f7fe fdcf 	bl	1a8 <__aeabi_dsub>
    160a:	4652      	mov	r2, sl
    160c:	465b      	mov	r3, fp
    160e:	f7fe ff83 	bl	518 <__aeabi_dmul>
    1612:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1616:	4680      	mov	r8, r0
    1618:	4689      	mov	r9, r1
    161a:	4620      	mov	r0, r4
    161c:	4629      	mov	r1, r5
    161e:	f7fe ff7b 	bl	518 <__aeabi_dmul>
    1622:	4602      	mov	r2, r0
    1624:	460b      	mov	r3, r1
    1626:	4640      	mov	r0, r8
    1628:	4649      	mov	r1, r9
    162a:	f7fe fdbf 	bl	1ac <__adddf3>
    162e:	4632      	mov	r2, r6
    1630:	463b      	mov	r3, r7
    1632:	4680      	mov	r8, r0
    1634:	4689      	mov	r9, r1
    1636:	4650      	mov	r0, sl
    1638:	4659      	mov	r1, fp
    163a:	f7fe ff6d 	bl	518 <__aeabi_dmul>
    163e:	460b      	mov	r3, r1
    1640:	4604      	mov	r4, r0
    1642:	460d      	mov	r5, r1
    1644:	4602      	mov	r2, r0
    1646:	4649      	mov	r1, r9
    1648:	4640      	mov	r0, r8
    164a:	e9cd 4502 	strd	r4, r5, [sp, #8]
    164e:	f7fe fdad 	bl	1ac <__adddf3>
    1652:	4b1b      	ldr	r3, [pc, #108]	; (16c0 <__ieee754_pow+0x3d0>)
    1654:	4299      	cmp	r1, r3
    1656:	4682      	mov	sl, r0
    1658:	460f      	mov	r7, r1
    165a:	460e      	mov	r6, r1
    165c:	f340 82ef 	ble.w	1c3e <__ieee754_pow+0x94e>
    1660:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    1664:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    1668:	4303      	orrs	r3, r0
    166a:	f000 81e9 	beq.w	1a40 <__ieee754_pow+0x750>
    166e:	a30e      	add	r3, pc, #56	; (adr r3, 16a8 <__ieee754_pow+0x3b8>)
    1670:	e9d3 2300 	ldrd	r2, r3, [r3]
    1674:	e9dd 0100 	ldrd	r0, r1, [sp]
    1678:	f7fe ff4e 	bl	518 <__aeabi_dmul>
    167c:	a30a      	add	r3, pc, #40	; (adr r3, 16a8 <__ieee754_pow+0x3b8>)
    167e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1682:	e6ce      	b.n	1422 <__ieee754_pow+0x132>
    1684:	f3af 8000 	nop.w
    1688:	60000000 	.word	0x60000000
    168c:	3ff71547 	.word	0x3ff71547
    1690:	f85ddf44 	.word	0xf85ddf44
    1694:	3e54ae0b 	.word	0x3e54ae0b
    1698:	55555555 	.word	0x55555555
    169c:	3fd55555 	.word	0x3fd55555
    16a0:	652b82fe 	.word	0x652b82fe
    16a4:	3ff71547 	.word	0x3ff71547
    16a8:	8800759c 	.word	0x8800759c
    16ac:	7e37e43c 	.word	0x7e37e43c
    16b0:	3ff00000 	.word	0x3ff00000
    16b4:	3fd00000 	.word	0x3fd00000
    16b8:	3fe00000 	.word	0x3fe00000
    16bc:	bff00000 	.word	0xbff00000
    16c0:	408fffff 	.word	0x408fffff
    16c4:	4bd4      	ldr	r3, [pc, #848]	; (1a18 <__ieee754_pow+0x728>)
    16c6:	ea09 0303 	and.w	r3, r9, r3
    16ca:	2200      	movs	r2, #0
    16cc:	b943      	cbnz	r3, 16e0 <__ieee754_pow+0x3f0>
    16ce:	4658      	mov	r0, fp
    16d0:	4bd2      	ldr	r3, [pc, #840]	; (1a1c <__ieee754_pow+0x72c>)
    16d2:	4661      	mov	r1, ip
    16d4:	f7fe ff20 	bl	518 <__aeabi_dmul>
    16d8:	f06f 0234 	mvn.w	r2, #52	; 0x34
    16dc:	4683      	mov	fp, r0
    16de:	460c      	mov	r4, r1
    16e0:	1523      	asrs	r3, r4, #20
    16e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    16e6:	4413      	add	r3, r2
    16e8:	930b      	str	r3, [sp, #44]	; 0x2c
    16ea:	4bcd      	ldr	r3, [pc, #820]	; (1a20 <__ieee754_pow+0x730>)
    16ec:	f3c4 0413 	ubfx	r4, r4, #0, #20
    16f0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
    16f4:	429c      	cmp	r4, r3
    16f6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    16fa:	dd08      	ble.n	170e <__ieee754_pow+0x41e>
    16fc:	4bc9      	ldr	r3, [pc, #804]	; (1a24 <__ieee754_pow+0x734>)
    16fe:	429c      	cmp	r4, r3
    1700:	f340 819c 	ble.w	1a3c <__ieee754_pow+0x74c>
    1704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1706:	3301      	adds	r3, #1
    1708:	930b      	str	r3, [sp, #44]	; 0x2c
    170a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
    170e:	2600      	movs	r6, #0
    1710:	00f3      	lsls	r3, r6, #3
    1712:	930d      	str	r3, [sp, #52]	; 0x34
    1714:	4bc4      	ldr	r3, [pc, #784]	; (1a28 <__ieee754_pow+0x738>)
    1716:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    171a:	e9d3 3400 	ldrd	r3, r4, [r3]
    171e:	4658      	mov	r0, fp
    1720:	e9cd 3408 	strd	r3, r4, [sp, #32]
    1724:	461a      	mov	r2, r3
    1726:	4629      	mov	r1, r5
    1728:	4623      	mov	r3, r4
    172a:	f7fe fd3d 	bl	1a8 <__aeabi_dsub>
    172e:	46da      	mov	sl, fp
    1730:	4652      	mov	r2, sl
    1732:	462b      	mov	r3, r5
    1734:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    1738:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    173c:	f7fe fd36 	bl	1ac <__adddf3>
    1740:	4602      	mov	r2, r0
    1742:	460b      	mov	r3, r1
    1744:	2000      	movs	r0, #0
    1746:	49b9      	ldr	r1, [pc, #740]	; (1a2c <__ieee754_pow+0x73c>)
    1748:	f7ff f810 	bl	76c <__aeabi_ddiv>
    174c:	4602      	mov	r2, r0
    174e:	460b      	mov	r3, r1
    1750:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1754:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    1758:	f7fe fede 	bl	518 <__aeabi_dmul>
    175c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1760:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    1764:	e9cd 3404 	strd	r3, r4, [sp, #16]
    1768:	2300      	movs	r3, #0
    176a:	9304      	str	r3, [sp, #16]
    176c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    1770:	46ab      	mov	fp, r5
    1772:	106d      	asrs	r5, r5, #1
    1774:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
    1778:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
    177c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
    1780:	2200      	movs	r2, #0
    1782:	4640      	mov	r0, r8
    1784:	4649      	mov	r1, r9
    1786:	4614      	mov	r4, r2
    1788:	461d      	mov	r5, r3
    178a:	f7fe fec5 	bl	518 <__aeabi_dmul>
    178e:	4602      	mov	r2, r0
    1790:	460b      	mov	r3, r1
    1792:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    1796:	f7fe fd07 	bl	1a8 <__aeabi_dsub>
    179a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    179e:	4606      	mov	r6, r0
    17a0:	460f      	mov	r7, r1
    17a2:	4620      	mov	r0, r4
    17a4:	4629      	mov	r1, r5
    17a6:	f7fe fcff 	bl	1a8 <__aeabi_dsub>
    17aa:	4602      	mov	r2, r0
    17ac:	460b      	mov	r3, r1
    17ae:	4650      	mov	r0, sl
    17b0:	4659      	mov	r1, fp
    17b2:	f7fe fcf9 	bl	1a8 <__aeabi_dsub>
    17b6:	4642      	mov	r2, r8
    17b8:	464b      	mov	r3, r9
    17ba:	f7fe fead 	bl	518 <__aeabi_dmul>
    17be:	4602      	mov	r2, r0
    17c0:	460b      	mov	r3, r1
    17c2:	4630      	mov	r0, r6
    17c4:	4639      	mov	r1, r7
    17c6:	f7fe fcef 	bl	1a8 <__aeabi_dsub>
    17ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    17ce:	f7fe fea3 	bl	518 <__aeabi_dmul>
    17d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    17d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
    17da:	4610      	mov	r0, r2
    17dc:	4619      	mov	r1, r3
    17de:	f7fe fe9b 	bl	518 <__aeabi_dmul>
    17e2:	a37b      	add	r3, pc, #492	; (adr r3, 19d0 <__ieee754_pow+0x6e0>)
    17e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    17e8:	4604      	mov	r4, r0
    17ea:	460d      	mov	r5, r1
    17ec:	f7fe fe94 	bl	518 <__aeabi_dmul>
    17f0:	a379      	add	r3, pc, #484	; (adr r3, 19d8 <__ieee754_pow+0x6e8>)
    17f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    17f6:	f7fe fcd9 	bl	1ac <__adddf3>
    17fa:	4622      	mov	r2, r4
    17fc:	462b      	mov	r3, r5
    17fe:	f7fe fe8b 	bl	518 <__aeabi_dmul>
    1802:	a377      	add	r3, pc, #476	; (adr r3, 19e0 <__ieee754_pow+0x6f0>)
    1804:	e9d3 2300 	ldrd	r2, r3, [r3]
    1808:	f7fe fcd0 	bl	1ac <__adddf3>
    180c:	4622      	mov	r2, r4
    180e:	462b      	mov	r3, r5
    1810:	f7fe fe82 	bl	518 <__aeabi_dmul>
    1814:	a374      	add	r3, pc, #464	; (adr r3, 19e8 <__ieee754_pow+0x6f8>)
    1816:	e9d3 2300 	ldrd	r2, r3, [r3]
    181a:	f7fe fcc7 	bl	1ac <__adddf3>
    181e:	4622      	mov	r2, r4
    1820:	462b      	mov	r3, r5
    1822:	f7fe fe79 	bl	518 <__aeabi_dmul>
    1826:	a372      	add	r3, pc, #456	; (adr r3, 19f0 <__ieee754_pow+0x700>)
    1828:	e9d3 2300 	ldrd	r2, r3, [r3]
    182c:	f7fe fcbe 	bl	1ac <__adddf3>
    1830:	4622      	mov	r2, r4
    1832:	462b      	mov	r3, r5
    1834:	f7fe fe70 	bl	518 <__aeabi_dmul>
    1838:	a36f      	add	r3, pc, #444	; (adr r3, 19f8 <__ieee754_pow+0x708>)
    183a:	e9d3 2300 	ldrd	r2, r3, [r3]
    183e:	f7fe fcb5 	bl	1ac <__adddf3>
    1842:	4622      	mov	r2, r4
    1844:	4606      	mov	r6, r0
    1846:	460f      	mov	r7, r1
    1848:	462b      	mov	r3, r5
    184a:	4620      	mov	r0, r4
    184c:	4629      	mov	r1, r5
    184e:	f7fe fe63 	bl	518 <__aeabi_dmul>
    1852:	4602      	mov	r2, r0
    1854:	460b      	mov	r3, r1
    1856:	4630      	mov	r0, r6
    1858:	4639      	mov	r1, r7
    185a:	f7fe fe5d 	bl	518 <__aeabi_dmul>
    185e:	4642      	mov	r2, r8
    1860:	4604      	mov	r4, r0
    1862:	460d      	mov	r5, r1
    1864:	464b      	mov	r3, r9
    1866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    186a:	f7fe fc9f 	bl	1ac <__adddf3>
    186e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    1872:	f7fe fe51 	bl	518 <__aeabi_dmul>
    1876:	4622      	mov	r2, r4
    1878:	462b      	mov	r3, r5
    187a:	f7fe fc97 	bl	1ac <__adddf3>
    187e:	4642      	mov	r2, r8
    1880:	4606      	mov	r6, r0
    1882:	460f      	mov	r7, r1
    1884:	464b      	mov	r3, r9
    1886:	4640      	mov	r0, r8
    1888:	4649      	mov	r1, r9
    188a:	f7fe fe45 	bl	518 <__aeabi_dmul>
    188e:	4b68      	ldr	r3, [pc, #416]	; (1a30 <__ieee754_pow+0x740>)
    1890:	2200      	movs	r2, #0
    1892:	4682      	mov	sl, r0
    1894:	468b      	mov	fp, r1
    1896:	f7fe fc89 	bl	1ac <__adddf3>
    189a:	4632      	mov	r2, r6
    189c:	463b      	mov	r3, r7
    189e:	f7fe fc85 	bl	1ac <__adddf3>
    18a2:	2400      	movs	r4, #0
    18a4:	460d      	mov	r5, r1
    18a6:	4622      	mov	r2, r4
    18a8:	460b      	mov	r3, r1
    18aa:	4640      	mov	r0, r8
    18ac:	4649      	mov	r1, r9
    18ae:	f7fe fe33 	bl	518 <__aeabi_dmul>
    18b2:	4b5f      	ldr	r3, [pc, #380]	; (1a30 <__ieee754_pow+0x740>)
    18b4:	4680      	mov	r8, r0
    18b6:	4689      	mov	r9, r1
    18b8:	2200      	movs	r2, #0
    18ba:	4620      	mov	r0, r4
    18bc:	4629      	mov	r1, r5
    18be:	f7fe fc73 	bl	1a8 <__aeabi_dsub>
    18c2:	4652      	mov	r2, sl
    18c4:	465b      	mov	r3, fp
    18c6:	f7fe fc6f 	bl	1a8 <__aeabi_dsub>
    18ca:	4602      	mov	r2, r0
    18cc:	460b      	mov	r3, r1
    18ce:	4630      	mov	r0, r6
    18d0:	4639      	mov	r1, r7
    18d2:	f7fe fc69 	bl	1a8 <__aeabi_dsub>
    18d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    18da:	f7fe fe1d 	bl	518 <__aeabi_dmul>
    18de:	4622      	mov	r2, r4
    18e0:	4606      	mov	r6, r0
    18e2:	460f      	mov	r7, r1
    18e4:	462b      	mov	r3, r5
    18e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    18ea:	f7fe fe15 	bl	518 <__aeabi_dmul>
    18ee:	4602      	mov	r2, r0
    18f0:	460b      	mov	r3, r1
    18f2:	4630      	mov	r0, r6
    18f4:	4639      	mov	r1, r7
    18f6:	f7fe fc59 	bl	1ac <__adddf3>
    18fa:	4606      	mov	r6, r0
    18fc:	460f      	mov	r7, r1
    18fe:	4602      	mov	r2, r0
    1900:	460b      	mov	r3, r1
    1902:	4640      	mov	r0, r8
    1904:	4649      	mov	r1, r9
    1906:	f7fe fc51 	bl	1ac <__adddf3>
    190a:	2400      	movs	r4, #0
    190c:	a33c      	add	r3, pc, #240	; (adr r3, 1a00 <__ieee754_pow+0x710>)
    190e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1912:	4620      	mov	r0, r4
    1914:	460d      	mov	r5, r1
    1916:	f7fe fdff 	bl	518 <__aeabi_dmul>
    191a:	4642      	mov	r2, r8
    191c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1920:	464b      	mov	r3, r9
    1922:	4620      	mov	r0, r4
    1924:	4629      	mov	r1, r5
    1926:	f7fe fc3f 	bl	1a8 <__aeabi_dsub>
    192a:	4602      	mov	r2, r0
    192c:	460b      	mov	r3, r1
    192e:	4630      	mov	r0, r6
    1930:	4639      	mov	r1, r7
    1932:	f7fe fc39 	bl	1a8 <__aeabi_dsub>
    1936:	a334      	add	r3, pc, #208	; (adr r3, 1a08 <__ieee754_pow+0x718>)
    1938:	e9d3 2300 	ldrd	r2, r3, [r3]
    193c:	f7fe fdec 	bl	518 <__aeabi_dmul>
    1940:	a333      	add	r3, pc, #204	; (adr r3, 1a10 <__ieee754_pow+0x720>)
    1942:	e9d3 2300 	ldrd	r2, r3, [r3]
    1946:	4606      	mov	r6, r0
    1948:	460f      	mov	r7, r1
    194a:	4620      	mov	r0, r4
    194c:	4629      	mov	r1, r5
    194e:	f7fe fde3 	bl	518 <__aeabi_dmul>
    1952:	4602      	mov	r2, r0
    1954:	460b      	mov	r3, r1
    1956:	4630      	mov	r0, r6
    1958:	4639      	mov	r1, r7
    195a:	f7fe fc27 	bl	1ac <__adddf3>
    195e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1960:	4b34      	ldr	r3, [pc, #208]	; (1a34 <__ieee754_pow+0x744>)
    1962:	4413      	add	r3, r2
    1964:	e9d3 2300 	ldrd	r2, r3, [r3]
    1968:	f7fe fc20 	bl	1ac <__adddf3>
    196c:	4680      	mov	r8, r0
    196e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1970:	4689      	mov	r9, r1
    1972:	f7fe fd67 	bl	444 <__aeabi_i2d>
    1976:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1978:	4b2f      	ldr	r3, [pc, #188]	; (1a38 <__ieee754_pow+0x748>)
    197a:	4413      	add	r3, r2
    197c:	e9d3 6700 	ldrd	r6, r7, [r3]
    1980:	4604      	mov	r4, r0
    1982:	460d      	mov	r5, r1
    1984:	4642      	mov	r2, r8
    1986:	464b      	mov	r3, r9
    1988:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    198c:	f7fe fc0e 	bl	1ac <__adddf3>
    1990:	4632      	mov	r2, r6
    1992:	463b      	mov	r3, r7
    1994:	f7fe fc0a 	bl	1ac <__adddf3>
    1998:	4622      	mov	r2, r4
    199a:	462b      	mov	r3, r5
    199c:	f7fe fc06 	bl	1ac <__adddf3>
    19a0:	f04f 0a00 	mov.w	sl, #0
    19a4:	4622      	mov	r2, r4
    19a6:	462b      	mov	r3, r5
    19a8:	4650      	mov	r0, sl
    19aa:	468b      	mov	fp, r1
    19ac:	f7fe fbfc 	bl	1a8 <__aeabi_dsub>
    19b0:	4632      	mov	r2, r6
    19b2:	463b      	mov	r3, r7
    19b4:	f7fe fbf8 	bl	1a8 <__aeabi_dsub>
    19b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    19bc:	f7fe fbf4 	bl	1a8 <__aeabi_dsub>
    19c0:	4602      	mov	r2, r0
    19c2:	460b      	mov	r3, r1
    19c4:	4640      	mov	r0, r8
    19c6:	4649      	mov	r1, r9
    19c8:	e608      	b.n	15dc <__ieee754_pow+0x2ec>
    19ca:	bf00      	nop
    19cc:	f3af 8000 	nop.w
    19d0:	4a454eef 	.word	0x4a454eef
    19d4:	3fca7e28 	.word	0x3fca7e28
    19d8:	93c9db65 	.word	0x93c9db65
    19dc:	3fcd864a 	.word	0x3fcd864a
    19e0:	a91d4101 	.word	0xa91d4101
    19e4:	3fd17460 	.word	0x3fd17460
    19e8:	518f264d 	.word	0x518f264d
    19ec:	3fd55555 	.word	0x3fd55555
    19f0:	db6fabff 	.word	0xdb6fabff
    19f4:	3fdb6db6 	.word	0x3fdb6db6
    19f8:	33333303 	.word	0x33333303
    19fc:	3fe33333 	.word	0x3fe33333
    1a00:	e0000000 	.word	0xe0000000
    1a04:	3feec709 	.word	0x3feec709
    1a08:	dc3a03fd 	.word	0xdc3a03fd
    1a0c:	3feec709 	.word	0x3feec709
    1a10:	145b01f5 	.word	0x145b01f5
    1a14:	be3e2fe0 	.word	0xbe3e2fe0
    1a18:	7ff00000 	.word	0x7ff00000
    1a1c:	43400000 	.word	0x43400000
    1a20:	0003988e 	.word	0x0003988e
    1a24:	000bb679 	.word	0x000bb679
    1a28:	0000fd78 	.word	0x0000fd78
    1a2c:	3ff00000 	.word	0x3ff00000
    1a30:	40080000 	.word	0x40080000
    1a34:	0000fd98 	.word	0x0000fd98
    1a38:	0000fd88 	.word	0x0000fd88
    1a3c:	2601      	movs	r6, #1
    1a3e:	e667      	b.n	1710 <__ieee754_pow+0x420>
    1a40:	a39d      	add	r3, pc, #628	; (adr r3, 1cb8 <__ieee754_pow+0x9c8>)
    1a42:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a46:	4640      	mov	r0, r8
    1a48:	4649      	mov	r1, r9
    1a4a:	f7fe fbaf 	bl	1ac <__adddf3>
    1a4e:	4622      	mov	r2, r4
    1a50:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1a54:	462b      	mov	r3, r5
    1a56:	4650      	mov	r0, sl
    1a58:	4639      	mov	r1, r7
    1a5a:	f7fe fba5 	bl	1a8 <__aeabi_dsub>
    1a5e:	4602      	mov	r2, r0
    1a60:	460b      	mov	r3, r1
    1a62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1a66:	f7ff f851 	bl	b0c <__aeabi_dcmpgt>
    1a6a:	2800      	cmp	r0, #0
    1a6c:	f47f adff 	bne.w	166e <__ieee754_pow+0x37e>
    1a70:	4aa5      	ldr	r2, [pc, #660]	; (1d08 <__ieee754_pow+0xa18>)
    1a72:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
    1a76:	4293      	cmp	r3, r2
    1a78:	f340 8103 	ble.w	1c82 <__ieee754_pow+0x992>
    1a7c:	151b      	asrs	r3, r3, #20
    1a7e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
    1a82:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    1a86:	fa4a f303 	asr.w	r3, sl, r3
    1a8a:	4433      	add	r3, r6
    1a8c:	f3c3 520a 	ubfx	r2, r3, #20, #11
    1a90:	4f9e      	ldr	r7, [pc, #632]	; (1d0c <__ieee754_pow+0xa1c>)
    1a92:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    1a96:	4117      	asrs	r7, r2
    1a98:	f3c3 0a13 	ubfx	sl, r3, #0, #20
    1a9c:	2000      	movs	r0, #0
    1a9e:	ea23 0107 	bic.w	r1, r3, r7
    1aa2:	f1c2 0214 	rsb	r2, r2, #20
    1aa6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
    1aaa:	fa4a fa02 	asr.w	sl, sl, r2
    1aae:	2e00      	cmp	r6, #0
    1ab0:	4602      	mov	r2, r0
    1ab2:	460b      	mov	r3, r1
    1ab4:	4620      	mov	r0, r4
    1ab6:	4629      	mov	r1, r5
    1ab8:	bfb8      	it	lt
    1aba:	f1ca 0a00 	rsblt	sl, sl, #0
    1abe:	f7fe fb73 	bl	1a8 <__aeabi_dsub>
    1ac2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1ac6:	4642      	mov	r2, r8
    1ac8:	464b      	mov	r3, r9
    1aca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1ace:	f7fe fb6d 	bl	1ac <__adddf3>
    1ad2:	2400      	movs	r4, #0
    1ad4:	a37a      	add	r3, pc, #488	; (adr r3, 1cc0 <__ieee754_pow+0x9d0>)
    1ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ada:	4620      	mov	r0, r4
    1adc:	460d      	mov	r5, r1
    1ade:	f7fe fd1b 	bl	518 <__aeabi_dmul>
    1ae2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1ae6:	4606      	mov	r6, r0
    1ae8:	460f      	mov	r7, r1
    1aea:	4620      	mov	r0, r4
    1aec:	4629      	mov	r1, r5
    1aee:	f7fe fb5b 	bl	1a8 <__aeabi_dsub>
    1af2:	4602      	mov	r2, r0
    1af4:	460b      	mov	r3, r1
    1af6:	4640      	mov	r0, r8
    1af8:	4649      	mov	r1, r9
    1afa:	f7fe fb55 	bl	1a8 <__aeabi_dsub>
    1afe:	a372      	add	r3, pc, #456	; (adr r3, 1cc8 <__ieee754_pow+0x9d8>)
    1b00:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b04:	f7fe fd08 	bl	518 <__aeabi_dmul>
    1b08:	a371      	add	r3, pc, #452	; (adr r3, 1cd0 <__ieee754_pow+0x9e0>)
    1b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b0e:	4680      	mov	r8, r0
    1b10:	4689      	mov	r9, r1
    1b12:	4620      	mov	r0, r4
    1b14:	4629      	mov	r1, r5
    1b16:	f7fe fcff 	bl	518 <__aeabi_dmul>
    1b1a:	4602      	mov	r2, r0
    1b1c:	460b      	mov	r3, r1
    1b1e:	4640      	mov	r0, r8
    1b20:	4649      	mov	r1, r9
    1b22:	f7fe fb43 	bl	1ac <__adddf3>
    1b26:	4604      	mov	r4, r0
    1b28:	460d      	mov	r5, r1
    1b2a:	4602      	mov	r2, r0
    1b2c:	460b      	mov	r3, r1
    1b2e:	4630      	mov	r0, r6
    1b30:	4639      	mov	r1, r7
    1b32:	f7fe fb3b 	bl	1ac <__adddf3>
    1b36:	4632      	mov	r2, r6
    1b38:	463b      	mov	r3, r7
    1b3a:	4680      	mov	r8, r0
    1b3c:	4689      	mov	r9, r1
    1b3e:	f7fe fb33 	bl	1a8 <__aeabi_dsub>
    1b42:	4602      	mov	r2, r0
    1b44:	460b      	mov	r3, r1
    1b46:	4620      	mov	r0, r4
    1b48:	4629      	mov	r1, r5
    1b4a:	f7fe fb2d 	bl	1a8 <__aeabi_dsub>
    1b4e:	4642      	mov	r2, r8
    1b50:	4606      	mov	r6, r0
    1b52:	460f      	mov	r7, r1
    1b54:	464b      	mov	r3, r9
    1b56:	4640      	mov	r0, r8
    1b58:	4649      	mov	r1, r9
    1b5a:	f7fe fcdd 	bl	518 <__aeabi_dmul>
    1b5e:	a35e      	add	r3, pc, #376	; (adr r3, 1cd8 <__ieee754_pow+0x9e8>)
    1b60:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b64:	4604      	mov	r4, r0
    1b66:	460d      	mov	r5, r1
    1b68:	f7fe fcd6 	bl	518 <__aeabi_dmul>
    1b6c:	a35c      	add	r3, pc, #368	; (adr r3, 1ce0 <__ieee754_pow+0x9f0>)
    1b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b72:	f7fe fb19 	bl	1a8 <__aeabi_dsub>
    1b76:	4622      	mov	r2, r4
    1b78:	462b      	mov	r3, r5
    1b7a:	f7fe fccd 	bl	518 <__aeabi_dmul>
    1b7e:	a35a      	add	r3, pc, #360	; (adr r3, 1ce8 <__ieee754_pow+0x9f8>)
    1b80:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b84:	f7fe fb12 	bl	1ac <__adddf3>
    1b88:	4622      	mov	r2, r4
    1b8a:	462b      	mov	r3, r5
    1b8c:	f7fe fcc4 	bl	518 <__aeabi_dmul>
    1b90:	a357      	add	r3, pc, #348	; (adr r3, 1cf0 <__ieee754_pow+0xa00>)
    1b92:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b96:	f7fe fb07 	bl	1a8 <__aeabi_dsub>
    1b9a:	4622      	mov	r2, r4
    1b9c:	462b      	mov	r3, r5
    1b9e:	f7fe fcbb 	bl	518 <__aeabi_dmul>
    1ba2:	a355      	add	r3, pc, #340	; (adr r3, 1cf8 <__ieee754_pow+0xa08>)
    1ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ba8:	f7fe fb00 	bl	1ac <__adddf3>
    1bac:	4622      	mov	r2, r4
    1bae:	462b      	mov	r3, r5
    1bb0:	f7fe fcb2 	bl	518 <__aeabi_dmul>
    1bb4:	4602      	mov	r2, r0
    1bb6:	460b      	mov	r3, r1
    1bb8:	4640      	mov	r0, r8
    1bba:	4649      	mov	r1, r9
    1bbc:	f7fe faf4 	bl	1a8 <__aeabi_dsub>
    1bc0:	4604      	mov	r4, r0
    1bc2:	460d      	mov	r5, r1
    1bc4:	4602      	mov	r2, r0
    1bc6:	460b      	mov	r3, r1
    1bc8:	4640      	mov	r0, r8
    1bca:	4649      	mov	r1, r9
    1bcc:	f7fe fca4 	bl	518 <__aeabi_dmul>
    1bd0:	2200      	movs	r2, #0
    1bd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1bd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1bda:	4620      	mov	r0, r4
    1bdc:	4629      	mov	r1, r5
    1bde:	f7fe fae3 	bl	1a8 <__aeabi_dsub>
    1be2:	4602      	mov	r2, r0
    1be4:	460b      	mov	r3, r1
    1be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1bea:	f7fe fdbf 	bl	76c <__aeabi_ddiv>
    1bee:	4632      	mov	r2, r6
    1bf0:	4604      	mov	r4, r0
    1bf2:	460d      	mov	r5, r1
    1bf4:	463b      	mov	r3, r7
    1bf6:	4640      	mov	r0, r8
    1bf8:	4649      	mov	r1, r9
    1bfa:	f7fe fc8d 	bl	518 <__aeabi_dmul>
    1bfe:	4632      	mov	r2, r6
    1c00:	463b      	mov	r3, r7
    1c02:	f7fe fad3 	bl	1ac <__adddf3>
    1c06:	4602      	mov	r2, r0
    1c08:	460b      	mov	r3, r1
    1c0a:	4620      	mov	r0, r4
    1c0c:	4629      	mov	r1, r5
    1c0e:	f7fe facb 	bl	1a8 <__aeabi_dsub>
    1c12:	4642      	mov	r2, r8
    1c14:	464b      	mov	r3, r9
    1c16:	f7fe fac7 	bl	1a8 <__aeabi_dsub>
    1c1a:	4602      	mov	r2, r0
    1c1c:	460b      	mov	r3, r1
    1c1e:	2000      	movs	r0, #0
    1c20:	493b      	ldr	r1, [pc, #236]	; (1d10 <__ieee754_pow+0xa20>)
    1c22:	f7fe fac1 	bl	1a8 <__aeabi_dsub>
    1c26:	eb01 540a 	add.w	r4, r1, sl, lsl #20
    1c2a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    1c2e:	da2b      	bge.n	1c88 <__ieee754_pow+0x998>
    1c30:	4652      	mov	r2, sl
    1c32:	f000 f875 	bl	1d20 <scalbn>
    1c36:	e9dd 2300 	ldrd	r2, r3, [sp]
    1c3a:	f7ff bbf2 	b.w	1422 <__ieee754_pow+0x132>
    1c3e:	4b35      	ldr	r3, [pc, #212]	; (1d14 <__ieee754_pow+0xa24>)
    1c40:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    1c44:	429f      	cmp	r7, r3
    1c46:	f77f af13 	ble.w	1a70 <__ieee754_pow+0x780>
    1c4a:	4b33      	ldr	r3, [pc, #204]	; (1d18 <__ieee754_pow+0xa28>)
    1c4c:	440b      	add	r3, r1
    1c4e:	4303      	orrs	r3, r0
    1c50:	d00b      	beq.n	1c6a <__ieee754_pow+0x97a>
    1c52:	a32b      	add	r3, pc, #172	; (adr r3, 1d00 <__ieee754_pow+0xa10>)
    1c54:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c58:	e9dd 0100 	ldrd	r0, r1, [sp]
    1c5c:	f7fe fc5c 	bl	518 <__aeabi_dmul>
    1c60:	a327      	add	r3, pc, #156	; (adr r3, 1d00 <__ieee754_pow+0xa10>)
    1c62:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c66:	f7ff bbdc 	b.w	1422 <__ieee754_pow+0x132>
    1c6a:	4622      	mov	r2, r4
    1c6c:	462b      	mov	r3, r5
    1c6e:	f7fe fa9b 	bl	1a8 <__aeabi_dsub>
    1c72:	4642      	mov	r2, r8
    1c74:	464b      	mov	r3, r9
    1c76:	f7fe ff3f 	bl	af8 <__aeabi_dcmpge>
    1c7a:	2800      	cmp	r0, #0
    1c7c:	f43f aef8 	beq.w	1a70 <__ieee754_pow+0x780>
    1c80:	e7e7      	b.n	1c52 <__ieee754_pow+0x962>
    1c82:	f04f 0a00 	mov.w	sl, #0
    1c86:	e71e      	b.n	1ac6 <__ieee754_pow+0x7d6>
    1c88:	4621      	mov	r1, r4
    1c8a:	e7d4      	b.n	1c36 <__ieee754_pow+0x946>
    1c8c:	f8df c080 	ldr.w	ip, [pc, #128]	; 1d10 <__ieee754_pow+0xa20>
    1c90:	f04f 0b00 	mov.w	fp, #0
    1c94:	f7ff bbb0 	b.w	13f8 <__ieee754_pow+0x108>
    1c98:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
    1c9c:	f7ff bbac 	b.w	13f8 <__ieee754_pow+0x108>
    1ca0:	4638      	mov	r0, r7
    1ca2:	4641      	mov	r1, r8
    1ca4:	f7ff bbbf 	b.w	1426 <__ieee754_pow+0x136>
    1ca8:	9200      	str	r2, [sp, #0]
    1caa:	f7ff bb7f 	b.w	13ac <__ieee754_pow+0xbc>
    1cae:	2300      	movs	r3, #0
    1cb0:	f7ff bb69 	b.w	1386 <__ieee754_pow+0x96>
    1cb4:	f3af 8000 	nop.w
    1cb8:	652b82fe 	.word	0x652b82fe
    1cbc:	3c971547 	.word	0x3c971547
    1cc0:	00000000 	.word	0x00000000
    1cc4:	3fe62e43 	.word	0x3fe62e43
    1cc8:	fefa39ef 	.word	0xfefa39ef
    1ccc:	3fe62e42 	.word	0x3fe62e42
    1cd0:	0ca86c39 	.word	0x0ca86c39
    1cd4:	be205c61 	.word	0xbe205c61
    1cd8:	72bea4d0 	.word	0x72bea4d0
    1cdc:	3e663769 	.word	0x3e663769
    1ce0:	c5d26bf1 	.word	0xc5d26bf1
    1ce4:	3ebbbd41 	.word	0x3ebbbd41
    1ce8:	af25de2c 	.word	0xaf25de2c
    1cec:	3f11566a 	.word	0x3f11566a
    1cf0:	16bebd93 	.word	0x16bebd93
    1cf4:	3f66c16c 	.word	0x3f66c16c
    1cf8:	5555553e 	.word	0x5555553e
    1cfc:	3fc55555 	.word	0x3fc55555
    1d00:	c2f8f359 	.word	0xc2f8f359
    1d04:	01a56e1f 	.word	0x01a56e1f
    1d08:	3fe00000 	.word	0x3fe00000
    1d0c:	000fffff 	.word	0x000fffff
    1d10:	3ff00000 	.word	0x3ff00000
    1d14:	4090cbff 	.word	0x4090cbff
    1d18:	3f6f3400 	.word	0x3f6f3400
    1d1c:	00000000 	.word	0x00000000

00001d20 <scalbn>:
    1d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d22:	f3c1 560a 	ubfx	r6, r1, #20, #11
    1d26:	4604      	mov	r4, r0
    1d28:	460d      	mov	r5, r1
    1d2a:	4617      	mov	r7, r2
    1d2c:	460b      	mov	r3, r1
    1d2e:	b996      	cbnz	r6, 1d56 <scalbn+0x36>
    1d30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    1d34:	4303      	orrs	r3, r0
    1d36:	d039      	beq.n	1dac <scalbn+0x8c>
    1d38:	4b33      	ldr	r3, [pc, #204]	; (1e08 <scalbn+0xe8>)
    1d3a:	2200      	movs	r2, #0
    1d3c:	f7fe fbec 	bl	518 <__aeabi_dmul>
    1d40:	4b32      	ldr	r3, [pc, #200]	; (1e0c <scalbn+0xec>)
    1d42:	429f      	cmp	r7, r3
    1d44:	4604      	mov	r4, r0
    1d46:	460d      	mov	r5, r1
    1d48:	da0f      	bge.n	1d6a <scalbn+0x4a>
    1d4a:	a32b      	add	r3, pc, #172	; (adr r3, 1df8 <scalbn+0xd8>)
    1d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d50:	f7fe fbe2 	bl	518 <__aeabi_dmul>
    1d54:	e006      	b.n	1d64 <scalbn+0x44>
    1d56:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1d5a:	4296      	cmp	r6, r2
    1d5c:	d10a      	bne.n	1d74 <scalbn+0x54>
    1d5e:	4602      	mov	r2, r0
    1d60:	f7fe fa24 	bl	1ac <__adddf3>
    1d64:	4604      	mov	r4, r0
    1d66:	460d      	mov	r5, r1
    1d68:	e020      	b.n	1dac <scalbn+0x8c>
    1d6a:	460b      	mov	r3, r1
    1d6c:	f3c1 510a 	ubfx	r1, r1, #20, #11
    1d70:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
    1d74:	19b9      	adds	r1, r7, r6
    1d76:	f240 72fe 	movw	r2, #2046	; 0x7fe
    1d7a:	4291      	cmp	r1, r2
    1d7c:	dd0e      	ble.n	1d9c <scalbn+0x7c>
    1d7e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
    1d82:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
    1d86:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
    1d8a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
    1d8e:	a31c      	add	r3, pc, #112	; (adr r3, 1e00 <scalbn+0xe0>)
    1d90:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d94:	481e      	ldr	r0, [pc, #120]	; (1e10 <scalbn+0xf0>)
    1d96:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
    1d9a:	e7d9      	b.n	1d50 <scalbn+0x30>
    1d9c:	2900      	cmp	r1, #0
    1d9e:	dd08      	ble.n	1db2 <scalbn+0x92>
    1da0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    1da4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    1da8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
    1dac:	4620      	mov	r0, r4
    1dae:	4629      	mov	r1, r5
    1db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1db2:	f111 0f35 	cmn.w	r1, #53	; 0x35
    1db6:	da12      	bge.n	1dde <scalbn+0xbe>
    1db8:	f24c 3350 	movw	r3, #50000	; 0xc350
    1dbc:	429f      	cmp	r7, r3
    1dbe:	ea4f 73d5 	mov.w	r3, r5, lsr #31
    1dc2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
    1dc6:	dcdc      	bgt.n	1d82 <scalbn+0x62>
    1dc8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
    1dcc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
    1dd0:	a309      	add	r3, pc, #36	; (adr r3, 1df8 <scalbn+0xd8>)
    1dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1dd6:	480f      	ldr	r0, [pc, #60]	; (1e14 <scalbn+0xf4>)
    1dd8:	f041 011f 	orr.w	r1, r1, #31
    1ddc:	e7b8      	b.n	1d50 <scalbn+0x30>
    1dde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    1de2:	3136      	adds	r1, #54	; 0x36
    1de4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    1de8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
    1dec:	4620      	mov	r0, r4
    1dee:	4b0a      	ldr	r3, [pc, #40]	; (1e18 <scalbn+0xf8>)
    1df0:	4629      	mov	r1, r5
    1df2:	2200      	movs	r2, #0
    1df4:	e7ac      	b.n	1d50 <scalbn+0x30>
    1df6:	bf00      	nop
    1df8:	c2f8f359 	.word	0xc2f8f359
    1dfc:	01a56e1f 	.word	0x01a56e1f
    1e00:	8800759c 	.word	0x8800759c
    1e04:	7e37e43c 	.word	0x7e37e43c
    1e08:	43500000 	.word	0x43500000
    1e0c:	ffff3cb0 	.word	0xffff3cb0
    1e10:	8800759c 	.word	0x8800759c
    1e14:	c2f8f359 	.word	0xc2f8f359
    1e18:	3c900000 	.word	0x3c900000
    1e1c:	00000000 	.word	0x00000000

00001e20 <_gcvt>:
    1e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1e24:	4690      	mov	r8, r2
    1e26:	b08b      	sub	sp, #44	; 0x2c
    1e28:	461c      	mov	r4, r3
    1e2a:	4681      	mov	r9, r0
    1e2c:	2200      	movs	r2, #0
    1e2e:	2300      	movs	r3, #0
    1e30:	4640      	mov	r0, r8
    1e32:	4621      	mov	r1, r4
    1e34:	e9dd 7512 	ldrd	r7, r5, [sp, #72]	; 0x48
    1e38:	9e15      	ldr	r6, [sp, #84]	; 0x54
    1e3a:	f7fe fe49 	bl	ad0 <__aeabi_dcmplt>
    1e3e:	b108      	cbz	r0, 1e44 <_gcvt+0x24>
    1e40:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    1e44:	2200      	movs	r2, #0
    1e46:	2300      	movs	r3, #0
    1e48:	4640      	mov	r0, r8
    1e4a:	4621      	mov	r1, r4
    1e4c:	f7fe fe36 	bl	abc <__aeabi_dcmpeq>
    1e50:	b138      	cbz	r0, 1e62 <_gcvt+0x42>
    1e52:	2330      	movs	r3, #48	; 0x30
    1e54:	702b      	strb	r3, [r5, #0]
    1e56:	2300      	movs	r3, #0
    1e58:	706b      	strb	r3, [r5, #1]
    1e5a:	4628      	mov	r0, r5
    1e5c:	b00b      	add	sp, #44	; 0x2c
    1e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1e62:	a34d      	add	r3, pc, #308	; (adr r3, 1f98 <_gcvt+0x178>)
    1e64:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e68:	4640      	mov	r0, r8
    1e6a:	4621      	mov	r1, r4
    1e6c:	f7fe fe3a 	bl	ae4 <__aeabi_dcmple>
    1e70:	b160      	cbz	r0, 1e8c <_gcvt+0x6c>
    1e72:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    1e76:	9301      	str	r3, [sp, #4]
    1e78:	3f01      	subs	r7, #1
    1e7a:	9602      	str	r6, [sp, #8]
    1e7c:	9700      	str	r7, [sp, #0]
    1e7e:	4642      	mov	r2, r8
    1e80:	4623      	mov	r3, r4
    1e82:	4629      	mov	r1, r5
    1e84:	4648      	mov	r0, r9
    1e86:	f00d faee 	bl	f466 <print_e>
    1e8a:	e7e6      	b.n	1e5a <_gcvt+0x3a>
    1e8c:	4638      	mov	r0, r7
    1e8e:	f00b fab9 	bl	d404 <_mprec_log10>
    1e92:	4642      	mov	r2, r8
    1e94:	4623      	mov	r3, r4
    1e96:	f7fe fe25 	bl	ae4 <__aeabi_dcmple>
    1e9a:	2800      	cmp	r0, #0
    1e9c:	d1e9      	bne.n	1e72 <_gcvt+0x52>
    1e9e:	ab09      	add	r3, sp, #36	; 0x24
    1ea0:	9304      	str	r3, [sp, #16]
    1ea2:	ab08      	add	r3, sp, #32
    1ea4:	9303      	str	r3, [sp, #12]
    1ea6:	ab07      	add	r3, sp, #28
    1ea8:	e9cd 7301 	strd	r7, r3, [sp, #4]
    1eac:	2302      	movs	r3, #2
    1eae:	9300      	str	r3, [sp, #0]
    1eb0:	4642      	mov	r2, r8
    1eb2:	4623      	mov	r3, r4
    1eb4:	4648      	mov	r0, r9
    1eb6:	f000 f873 	bl	1fa0 <_dtoa_r>
    1eba:	9a07      	ldr	r2, [sp, #28]
    1ebc:	f242 730f 	movw	r3, #9999	; 0x270f
    1ec0:	429a      	cmp	r2, r3
    1ec2:	4601      	mov	r1, r0
    1ec4:	d00f      	beq.n	1ee6 <_gcvt+0xc6>
    1ec6:	462b      	mov	r3, r5
    1ec8:	442f      	add	r7, r5
    1eca:	4608      	mov	r0, r1
    1ecc:	f811 cb01 	ldrb.w	ip, [r1], #1
    1ed0:	9a07      	ldr	r2, [sp, #28]
    1ed2:	1afc      	subs	r4, r7, r3
    1ed4:	f1bc 0f00 	cmp.w	ip, #0
    1ed8:	d001      	beq.n	1ede <_gcvt+0xbe>
    1eda:	2a00      	cmp	r2, #0
    1edc:	dc07      	bgt.n	1eee <_gcvt+0xce>
    1ede:	2100      	movs	r1, #0
    1ee0:	f04f 0c30 	mov.w	ip, #48	; 0x30
    1ee4:	e00c      	b.n	1f00 <_gcvt+0xe0>
    1ee6:	4628      	mov	r0, r5
    1ee8:	f00d fa96 	bl	f418 <strcpy>
    1eec:	e7b5      	b.n	1e5a <_gcvt+0x3a>
    1eee:	3a01      	subs	r2, #1
    1ef0:	f803 cb01 	strb.w	ip, [r3], #1
    1ef4:	9207      	str	r2, [sp, #28]
    1ef6:	e7e8      	b.n	1eca <_gcvt+0xaa>
    1ef8:	f803 cb01 	strb.w	ip, [r3], #1
    1efc:	3c01      	subs	r4, #1
    1efe:	2101      	movs	r1, #1
    1f00:	2a00      	cmp	r2, #0
    1f02:	4617      	mov	r7, r2
    1f04:	dc2a      	bgt.n	1f5c <_gcvt+0x13c>
    1f06:	b101      	cbz	r1, 1f0a <_gcvt+0xea>
    1f08:	9207      	str	r2, [sp, #28]
    1f0a:	b90e      	cbnz	r6, 1f10 <_gcvt+0xf0>
    1f0c:	7802      	ldrb	r2, [r0, #0]
    1f0e:	b312      	cbz	r2, 1f56 <_gcvt+0x136>
    1f10:	42ab      	cmp	r3, r5
    1f12:	bf04      	itt	eq
    1f14:	2230      	moveq	r2, #48	; 0x30
    1f16:	f803 2b01 	strbeq.w	r2, [r3], #1
    1f1a:	222e      	movs	r2, #46	; 0x2e
    1f1c:	701a      	strb	r2, [r3, #0]
    1f1e:	9a07      	ldr	r2, [sp, #28]
    1f20:	4619      	mov	r1, r3
    1f22:	2700      	movs	r7, #0
    1f24:	eba2 0c03 	sub.w	ip, r2, r3
    1f28:	f04f 0e30 	mov.w	lr, #48	; 0x30
    1f2c:	eb1c 0f01 	cmn.w	ip, r1
    1f30:	d41c      	bmi.n	1f6c <_gcvt+0x14c>
    1f32:	2a00      	cmp	r2, #0
    1f34:	f1c2 0100 	rsb	r1, r2, #0
    1f38:	bfc8      	it	gt
    1f3a:	2100      	movgt	r1, #0
    1f3c:	f101 0c01 	add.w	ip, r1, #1
    1f40:	4463      	add	r3, ip
    1f42:	440a      	add	r2, r1
    1f44:	b107      	cbz	r7, 1f48 <_gcvt+0x128>
    1f46:	9207      	str	r2, [sp, #28]
    1f48:	1e42      	subs	r2, r0, #1
    1f4a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1f4e:	b109      	cbz	r1, 1f54 <_gcvt+0x134>
    1f50:	2c00      	cmp	r4, #0
    1f52:	dc0f      	bgt.n	1f74 <_gcvt+0x154>
    1f54:	b9de      	cbnz	r6, 1f8e <_gcvt+0x16e>
    1f56:	2200      	movs	r2, #0
    1f58:	701a      	strb	r2, [r3, #0]
    1f5a:	e77e      	b.n	1e5a <_gcvt+0x3a>
    1f5c:	2c00      	cmp	r4, #0
    1f5e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    1f62:	dcc9      	bgt.n	1ef8 <_gcvt+0xd8>
    1f64:	2900      	cmp	r1, #0
    1f66:	d0d0      	beq.n	1f0a <_gcvt+0xea>
    1f68:	9707      	str	r7, [sp, #28]
    1f6a:	e7ce      	b.n	1f0a <_gcvt+0xea>
    1f6c:	f801 ef01 	strb.w	lr, [r1, #1]!
    1f70:	2701      	movs	r7, #1
    1f72:	e7db      	b.n	1f2c <_gcvt+0x10c>
    1f74:	f803 1b01 	strb.w	r1, [r3], #1
    1f78:	3c01      	subs	r4, #1
    1f7a:	e7e6      	b.n	1f4a <_gcvt+0x12a>
    1f7c:	f802 6b01 	strb.w	r6, [r2], #1
    1f80:	1a81      	subs	r1, r0, r2
    1f82:	2900      	cmp	r1, #0
    1f84:	dcfa      	bgt.n	1f7c <_gcvt+0x15c>
    1f86:	2c00      	cmp	r4, #0
    1f88:	bfa8      	it	ge
    1f8a:	191b      	addge	r3, r3, r4
    1f8c:	e7e3      	b.n	1f56 <_gcvt+0x136>
    1f8e:	461a      	mov	r2, r3
    1f90:	1918      	adds	r0, r3, r4
    1f92:	2630      	movs	r6, #48	; 0x30
    1f94:	e7f4      	b.n	1f80 <_gcvt+0x160>
    1f96:	bf00      	nop
    1f98:	eb1c432d 	.word	0xeb1c432d
    1f9c:	3f1a36e2 	.word	0x3f1a36e2

00001fa0 <_dtoa_r>:
    1fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fa4:	6a44      	ldr	r4, [r0, #36]	; 0x24
    1fa6:	b099      	sub	sp, #100	; 0x64
    1fa8:	4616      	mov	r6, r2
    1faa:	461f      	mov	r7, r3
    1fac:	e9cd 6704 	strd	r6, r7, [sp, #16]
    1fb0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    1fb4:	4605      	mov	r5, r0
    1fb6:	b974      	cbnz	r4, 1fd6 <_dtoa_r+0x36>
    1fb8:	2010      	movs	r0, #16
    1fba:	f00a fe05 	bl	cbc8 <malloc>
    1fbe:	4602      	mov	r2, r0
    1fc0:	6268      	str	r0, [r5, #36]	; 0x24
    1fc2:	b920      	cbnz	r0, 1fce <_dtoa_r+0x2e>
    1fc4:	4ba8      	ldr	r3, [pc, #672]	; (2268 <_dtoa_r+0x2c8>)
    1fc6:	21ea      	movs	r1, #234	; 0xea
    1fc8:	48a8      	ldr	r0, [pc, #672]	; (226c <_dtoa_r+0x2cc>)
    1fca:	f00b fa37 	bl	d43c <__assert_func>
    1fce:	e9c0 4401 	strd	r4, r4, [r0, #4]
    1fd2:	6004      	str	r4, [r0, #0]
    1fd4:	60c4      	str	r4, [r0, #12]
    1fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1fd8:	6819      	ldr	r1, [r3, #0]
    1fda:	b151      	cbz	r1, 1ff2 <_dtoa_r+0x52>
    1fdc:	685a      	ldr	r2, [r3, #4]
    1fde:	604a      	str	r2, [r1, #4]
    1fe0:	2301      	movs	r3, #1
    1fe2:	4093      	lsls	r3, r2
    1fe4:	608b      	str	r3, [r1, #8]
    1fe6:	4628      	mov	r0, r5
    1fe8:	f00a ff38 	bl	ce5c <_Bfree>
    1fec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1fee:	2200      	movs	r2, #0
    1ff0:	601a      	str	r2, [r3, #0]
    1ff2:	1e3b      	subs	r3, r7, #0
    1ff4:	bfb9      	ittee	lt
    1ff6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    1ffa:	9305      	strlt	r3, [sp, #20]
    1ffc:	2300      	movge	r3, #0
    1ffe:	f8c8 3000 	strge.w	r3, [r8]
    2002:	f8dd 9014 	ldr.w	r9, [sp, #20]
    2006:	4b9a      	ldr	r3, [pc, #616]	; (2270 <_dtoa_r+0x2d0>)
    2008:	bfbc      	itt	lt
    200a:	2201      	movlt	r2, #1
    200c:	f8c8 2000 	strlt.w	r2, [r8]
    2010:	ea33 0309 	bics.w	r3, r3, r9
    2014:	d119      	bne.n	204a <_dtoa_r+0xaa>
    2016:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2018:	f242 730f 	movw	r3, #9999	; 0x270f
    201c:	6013      	str	r3, [r2, #0]
    201e:	f3c9 0313 	ubfx	r3, r9, #0, #20
    2022:	4333      	orrs	r3, r6
    2024:	f000 8580 	beq.w	2b28 <_dtoa_r+0xb88>
    2028:	9b26      	ldr	r3, [sp, #152]	; 0x98
    202a:	b953      	cbnz	r3, 2042 <_dtoa_r+0xa2>
    202c:	4b91      	ldr	r3, [pc, #580]	; (2274 <_dtoa_r+0x2d4>)
    202e:	e022      	b.n	2076 <_dtoa_r+0xd6>
    2030:	4b91      	ldr	r3, [pc, #580]	; (2278 <_dtoa_r+0x2d8>)
    2032:	9303      	str	r3, [sp, #12]
    2034:	3308      	adds	r3, #8
    2036:	9a26      	ldr	r2, [sp, #152]	; 0x98
    2038:	6013      	str	r3, [r2, #0]
    203a:	9803      	ldr	r0, [sp, #12]
    203c:	b019      	add	sp, #100	; 0x64
    203e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2042:	4b8c      	ldr	r3, [pc, #560]	; (2274 <_dtoa_r+0x2d4>)
    2044:	9303      	str	r3, [sp, #12]
    2046:	3303      	adds	r3, #3
    2048:	e7f5      	b.n	2036 <_dtoa_r+0x96>
    204a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    204e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    2052:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    2056:	2200      	movs	r2, #0
    2058:	2300      	movs	r3, #0
    205a:	f7fe fd2f 	bl	abc <__aeabi_dcmpeq>
    205e:	4680      	mov	r8, r0
    2060:	b158      	cbz	r0, 207a <_dtoa_r+0xda>
    2062:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2064:	2301      	movs	r3, #1
    2066:	6013      	str	r3, [r2, #0]
    2068:	9b26      	ldr	r3, [sp, #152]	; 0x98
    206a:	2b00      	cmp	r3, #0
    206c:	f000 8559 	beq.w	2b22 <_dtoa_r+0xb82>
    2070:	4882      	ldr	r0, [pc, #520]	; (227c <_dtoa_r+0x2dc>)
    2072:	6018      	str	r0, [r3, #0]
    2074:	1e43      	subs	r3, r0, #1
    2076:	9303      	str	r3, [sp, #12]
    2078:	e7df      	b.n	203a <_dtoa_r+0x9a>
    207a:	ab16      	add	r3, sp, #88	; 0x58
    207c:	9301      	str	r3, [sp, #4]
    207e:	ab17      	add	r3, sp, #92	; 0x5c
    2080:	9300      	str	r3, [sp, #0]
    2082:	4628      	mov	r0, r5
    2084:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    2088:	f00b f960 	bl	d34c <__d2b>
    208c:	f3c9 540a 	ubfx	r4, r9, #20, #11
    2090:	4683      	mov	fp, r0
    2092:	2c00      	cmp	r4, #0
    2094:	d07e      	beq.n	2194 <_dtoa_r+0x1f4>
    2096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2098:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    209c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    20a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    20a4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    20a8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    20ac:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    20b0:	4b73      	ldr	r3, [pc, #460]	; (2280 <_dtoa_r+0x2e0>)
    20b2:	2200      	movs	r2, #0
    20b4:	f7fe f878 	bl	1a8 <__aeabi_dsub>
    20b8:	a365      	add	r3, pc, #404	; (adr r3, 2250 <_dtoa_r+0x2b0>)
    20ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    20be:	f7fe fa2b 	bl	518 <__aeabi_dmul>
    20c2:	a365      	add	r3, pc, #404	; (adr r3, 2258 <_dtoa_r+0x2b8>)
    20c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    20c8:	f7fe f870 	bl	1ac <__adddf3>
    20cc:	4606      	mov	r6, r0
    20ce:	4620      	mov	r0, r4
    20d0:	460f      	mov	r7, r1
    20d2:	f7fe f9b7 	bl	444 <__aeabi_i2d>
    20d6:	a362      	add	r3, pc, #392	; (adr r3, 2260 <_dtoa_r+0x2c0>)
    20d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    20dc:	f7fe fa1c 	bl	518 <__aeabi_dmul>
    20e0:	4602      	mov	r2, r0
    20e2:	460b      	mov	r3, r1
    20e4:	4630      	mov	r0, r6
    20e6:	4639      	mov	r1, r7
    20e8:	f7fe f860 	bl	1ac <__adddf3>
    20ec:	4606      	mov	r6, r0
    20ee:	460f      	mov	r7, r1
    20f0:	f7fe fd2c 	bl	b4c <__aeabi_d2iz>
    20f4:	2200      	movs	r2, #0
    20f6:	4682      	mov	sl, r0
    20f8:	2300      	movs	r3, #0
    20fa:	4630      	mov	r0, r6
    20fc:	4639      	mov	r1, r7
    20fe:	f7fe fce7 	bl	ad0 <__aeabi_dcmplt>
    2102:	b148      	cbz	r0, 2118 <_dtoa_r+0x178>
    2104:	4650      	mov	r0, sl
    2106:	f7fe f99d 	bl	444 <__aeabi_i2d>
    210a:	4632      	mov	r2, r6
    210c:	463b      	mov	r3, r7
    210e:	f7fe fcd5 	bl	abc <__aeabi_dcmpeq>
    2112:	b908      	cbnz	r0, 2118 <_dtoa_r+0x178>
    2114:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2118:	f1ba 0f16 	cmp.w	sl, #22
    211c:	d857      	bhi.n	21ce <_dtoa_r+0x22e>
    211e:	4b59      	ldr	r3, [pc, #356]	; (2284 <_dtoa_r+0x2e4>)
    2120:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    2124:	e9d3 2300 	ldrd	r2, r3, [r3]
    2128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    212c:	f7fe fcd0 	bl	ad0 <__aeabi_dcmplt>
    2130:	2800      	cmp	r0, #0
    2132:	d04e      	beq.n	21d2 <_dtoa_r+0x232>
    2134:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2138:	2300      	movs	r3, #0
    213a:	930f      	str	r3, [sp, #60]	; 0x3c
    213c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    213e:	1b1c      	subs	r4, r3, r4
    2140:	1e63      	subs	r3, r4, #1
    2142:	9309      	str	r3, [sp, #36]	; 0x24
    2144:	bf45      	ittet	mi
    2146:	f1c4 0301 	rsbmi	r3, r4, #1
    214a:	9306      	strmi	r3, [sp, #24]
    214c:	2300      	movpl	r3, #0
    214e:	2300      	movmi	r3, #0
    2150:	bf4c      	ite	mi
    2152:	9309      	strmi	r3, [sp, #36]	; 0x24
    2154:	9306      	strpl	r3, [sp, #24]
    2156:	f1ba 0f00 	cmp.w	sl, #0
    215a:	db3c      	blt.n	21d6 <_dtoa_r+0x236>
    215c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    215e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    2162:	4453      	add	r3, sl
    2164:	9309      	str	r3, [sp, #36]	; 0x24
    2166:	2300      	movs	r3, #0
    2168:	930a      	str	r3, [sp, #40]	; 0x28
    216a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    216c:	2b09      	cmp	r3, #9
    216e:	f200 808d 	bhi.w	228c <_dtoa_r+0x2ec>
    2172:	2b05      	cmp	r3, #5
    2174:	bfc4      	itt	gt
    2176:	3b04      	subgt	r3, #4
    2178:	9322      	strgt	r3, [sp, #136]	; 0x88
    217a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    217c:	f1a3 0302 	sub.w	r3, r3, #2
    2180:	bfcc      	ite	gt
    2182:	2400      	movgt	r4, #0
    2184:	2401      	movle	r4, #1
    2186:	2b03      	cmp	r3, #3
    2188:	f200 808c 	bhi.w	22a4 <_dtoa_r+0x304>
    218c:	e8df f003 	tbb	[pc, r3]
    2190:	5b4d4f2d 	.word	0x5b4d4f2d
    2194:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    2198:	441c      	add	r4, r3
    219a:	f204 4332 	addw	r3, r4, #1074	; 0x432
    219e:	2b20      	cmp	r3, #32
    21a0:	bfc3      	ittte	gt
    21a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    21a6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    21aa:	fa09 f303 	lslgt.w	r3, r9, r3
    21ae:	f1c3 0320 	rsble	r3, r3, #32
    21b2:	bfc6      	itte	gt
    21b4:	fa26 f000 	lsrgt.w	r0, r6, r0
    21b8:	4318      	orrgt	r0, r3
    21ba:	fa06 f003 	lslle.w	r0, r6, r3
    21be:	f7fe f931 	bl	424 <__aeabi_ui2d>
    21c2:	2301      	movs	r3, #1
    21c4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    21c8:	3c01      	subs	r4, #1
    21ca:	9313      	str	r3, [sp, #76]	; 0x4c
    21cc:	e770      	b.n	20b0 <_dtoa_r+0x110>
    21ce:	2301      	movs	r3, #1
    21d0:	e7b3      	b.n	213a <_dtoa_r+0x19a>
    21d2:	900f      	str	r0, [sp, #60]	; 0x3c
    21d4:	e7b2      	b.n	213c <_dtoa_r+0x19c>
    21d6:	9b06      	ldr	r3, [sp, #24]
    21d8:	eba3 030a 	sub.w	r3, r3, sl
    21dc:	9306      	str	r3, [sp, #24]
    21de:	f1ca 0300 	rsb	r3, sl, #0
    21e2:	930a      	str	r3, [sp, #40]	; 0x28
    21e4:	2300      	movs	r3, #0
    21e6:	930e      	str	r3, [sp, #56]	; 0x38
    21e8:	e7bf      	b.n	216a <_dtoa_r+0x1ca>
    21ea:	2300      	movs	r3, #0
    21ec:	930b      	str	r3, [sp, #44]	; 0x2c
    21ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    21f0:	2b00      	cmp	r3, #0
    21f2:	dc5a      	bgt.n	22aa <_dtoa_r+0x30a>
    21f4:	f04f 0901 	mov.w	r9, #1
    21f8:	f8cd 9020 	str.w	r9, [sp, #32]
    21fc:	464b      	mov	r3, r9
    21fe:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    2202:	6a68      	ldr	r0, [r5, #36]	; 0x24
    2204:	2200      	movs	r2, #0
    2206:	6042      	str	r2, [r0, #4]
    2208:	2204      	movs	r2, #4
    220a:	f102 0614 	add.w	r6, r2, #20
    220e:	429e      	cmp	r6, r3
    2210:	6841      	ldr	r1, [r0, #4]
    2212:	d950      	bls.n	22b6 <_dtoa_r+0x316>
    2214:	4628      	mov	r0, r5
    2216:	f00a fde1 	bl	cddc <_Balloc>
    221a:	9003      	str	r0, [sp, #12]
    221c:	2800      	cmp	r0, #0
    221e:	d14e      	bne.n	22be <_dtoa_r+0x31e>
    2220:	4b19      	ldr	r3, [pc, #100]	; (2288 <_dtoa_r+0x2e8>)
    2222:	4602      	mov	r2, r0
    2224:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    2228:	e6ce      	b.n	1fc8 <_dtoa_r+0x28>
    222a:	2301      	movs	r3, #1
    222c:	e7de      	b.n	21ec <_dtoa_r+0x24c>
    222e:	2300      	movs	r3, #0
    2230:	930b      	str	r3, [sp, #44]	; 0x2c
    2232:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2234:	eb0a 0903 	add.w	r9, sl, r3
    2238:	f109 0301 	add.w	r3, r9, #1
    223c:	2b01      	cmp	r3, #1
    223e:	9308      	str	r3, [sp, #32]
    2240:	bfb8      	it	lt
    2242:	2301      	movlt	r3, #1
    2244:	e7dd      	b.n	2202 <_dtoa_r+0x262>
    2246:	2301      	movs	r3, #1
    2248:	e7f2      	b.n	2230 <_dtoa_r+0x290>
    224a:	bf00      	nop
    224c:	f3af 8000 	nop.w
    2250:	636f4361 	.word	0x636f4361
    2254:	3fd287a7 	.word	0x3fd287a7
    2258:	8b60c8b3 	.word	0x8b60c8b3
    225c:	3fc68a28 	.word	0x3fc68a28
    2260:	509f79fb 	.word	0x509f79fb
    2264:	3fd34413 	.word	0x3fd34413
    2268:	00011f6e 	.word	0x00011f6e
    226c:	0001203e 	.word	0x0001203e
    2270:	7ff00000 	.word	0x7ff00000
    2274:	00012038 	.word	0x00012038
    2278:	0001202f 	.word	0x0001202f
    227c:	0001203d 	.word	0x0001203d
    2280:	3ff80000 	.word	0x3ff80000
    2284:	0000fde0 	.word	0x0000fde0
    2288:	00011fe2 	.word	0x00011fe2
    228c:	2401      	movs	r4, #1
    228e:	2300      	movs	r3, #0
    2290:	9322      	str	r3, [sp, #136]	; 0x88
    2292:	940b      	str	r4, [sp, #44]	; 0x2c
    2294:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    2298:	2200      	movs	r2, #0
    229a:	f8cd 9020 	str.w	r9, [sp, #32]
    229e:	2312      	movs	r3, #18
    22a0:	9223      	str	r2, [sp, #140]	; 0x8c
    22a2:	e7ae      	b.n	2202 <_dtoa_r+0x262>
    22a4:	2301      	movs	r3, #1
    22a6:	930b      	str	r3, [sp, #44]	; 0x2c
    22a8:	e7f4      	b.n	2294 <_dtoa_r+0x2f4>
    22aa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    22ae:	f8cd 9020 	str.w	r9, [sp, #32]
    22b2:	464b      	mov	r3, r9
    22b4:	e7a5      	b.n	2202 <_dtoa_r+0x262>
    22b6:	3101      	adds	r1, #1
    22b8:	6041      	str	r1, [r0, #4]
    22ba:	0052      	lsls	r2, r2, #1
    22bc:	e7a5      	b.n	220a <_dtoa_r+0x26a>
    22be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    22c0:	9a03      	ldr	r2, [sp, #12]
    22c2:	601a      	str	r2, [r3, #0]
    22c4:	9b08      	ldr	r3, [sp, #32]
    22c6:	2b0e      	cmp	r3, #14
    22c8:	f200 80a8 	bhi.w	241c <_dtoa_r+0x47c>
    22cc:	2c00      	cmp	r4, #0
    22ce:	f000 80a5 	beq.w	241c <_dtoa_r+0x47c>
    22d2:	f1ba 0f00 	cmp.w	sl, #0
    22d6:	dd34      	ble.n	2342 <_dtoa_r+0x3a2>
    22d8:	4a9a      	ldr	r2, [pc, #616]	; (2544 <_dtoa_r+0x5a4>)
    22da:	f00a 030f 	and.w	r3, sl, #15
    22de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    22e2:	e9d3 3400 	ldrd	r3, r4, [r3]
    22e6:	f41a 7f80 	tst.w	sl, #256	; 0x100
    22ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    22ee:	ea4f 142a 	mov.w	r4, sl, asr #4
    22f2:	d016      	beq.n	2322 <_dtoa_r+0x382>
    22f4:	4b94      	ldr	r3, [pc, #592]	; (2548 <_dtoa_r+0x5a8>)
    22f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    22fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    22fe:	f7fe fa35 	bl	76c <__aeabi_ddiv>
    2302:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2306:	f004 040f 	and.w	r4, r4, #15
    230a:	2703      	movs	r7, #3
    230c:	4e8e      	ldr	r6, [pc, #568]	; (2548 <_dtoa_r+0x5a8>)
    230e:	b954      	cbnz	r4, 2326 <_dtoa_r+0x386>
    2310:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2318:	f7fe fa28 	bl	76c <__aeabi_ddiv>
    231c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2320:	e029      	b.n	2376 <_dtoa_r+0x3d6>
    2322:	2702      	movs	r7, #2
    2324:	e7f2      	b.n	230c <_dtoa_r+0x36c>
    2326:	07e1      	lsls	r1, r4, #31
    2328:	d508      	bpl.n	233c <_dtoa_r+0x39c>
    232a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    232e:	e9d6 2300 	ldrd	r2, r3, [r6]
    2332:	f7fe f8f1 	bl	518 <__aeabi_dmul>
    2336:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    233a:	3701      	adds	r7, #1
    233c:	1064      	asrs	r4, r4, #1
    233e:	3608      	adds	r6, #8
    2340:	e7e5      	b.n	230e <_dtoa_r+0x36e>
    2342:	f000 80a5 	beq.w	2490 <_dtoa_r+0x4f0>
    2346:	f1ca 0400 	rsb	r4, sl, #0
    234a:	4b7e      	ldr	r3, [pc, #504]	; (2544 <_dtoa_r+0x5a4>)
    234c:	4e7e      	ldr	r6, [pc, #504]	; (2548 <_dtoa_r+0x5a8>)
    234e:	f004 020f 	and.w	r2, r4, #15
    2352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2356:	e9d3 2300 	ldrd	r2, r3, [r3]
    235a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    235e:	f7fe f8db 	bl	518 <__aeabi_dmul>
    2362:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2366:	1124      	asrs	r4, r4, #4
    2368:	2300      	movs	r3, #0
    236a:	2702      	movs	r7, #2
    236c:	2c00      	cmp	r4, #0
    236e:	f040 8084 	bne.w	247a <_dtoa_r+0x4da>
    2372:	2b00      	cmp	r3, #0
    2374:	d1d2      	bne.n	231c <_dtoa_r+0x37c>
    2376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2378:	2b00      	cmp	r3, #0
    237a:	f000 808b 	beq.w	2494 <_dtoa_r+0x4f4>
    237e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    2382:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    2386:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    238a:	4b70      	ldr	r3, [pc, #448]	; (254c <_dtoa_r+0x5ac>)
    238c:	2200      	movs	r2, #0
    238e:	f7fe fb9f 	bl	ad0 <__aeabi_dcmplt>
    2392:	2800      	cmp	r0, #0
    2394:	d07e      	beq.n	2494 <_dtoa_r+0x4f4>
    2396:	9b08      	ldr	r3, [sp, #32]
    2398:	2b00      	cmp	r3, #0
    239a:	d07b      	beq.n	2494 <_dtoa_r+0x4f4>
    239c:	f1b9 0f00 	cmp.w	r9, #0
    23a0:	dd38      	ble.n	2414 <_dtoa_r+0x474>
    23a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    23a6:	4b6a      	ldr	r3, [pc, #424]	; (2550 <_dtoa_r+0x5b0>)
    23a8:	2200      	movs	r2, #0
    23aa:	f7fe f8b5 	bl	518 <__aeabi_dmul>
    23ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
    23b2:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
    23b6:	3701      	adds	r7, #1
    23b8:	464c      	mov	r4, r9
    23ba:	4638      	mov	r0, r7
    23bc:	f7fe f842 	bl	444 <__aeabi_i2d>
    23c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    23c4:	f7fe f8a8 	bl	518 <__aeabi_dmul>
    23c8:	4b62      	ldr	r3, [pc, #392]	; (2554 <_dtoa_r+0x5b4>)
    23ca:	2200      	movs	r2, #0
    23cc:	f7fd feee 	bl	1ac <__adddf3>
    23d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    23d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    23d8:	9611      	str	r6, [sp, #68]	; 0x44
    23da:	2c00      	cmp	r4, #0
    23dc:	d15d      	bne.n	249a <_dtoa_r+0x4fa>
    23de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    23e2:	4b5d      	ldr	r3, [pc, #372]	; (2558 <_dtoa_r+0x5b8>)
    23e4:	2200      	movs	r2, #0
    23e6:	f7fd fedf 	bl	1a8 <__aeabi_dsub>
    23ea:	4602      	mov	r2, r0
    23ec:	460b      	mov	r3, r1
    23ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
    23f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    23f4:	4633      	mov	r3, r6
    23f6:	f7fe fb89 	bl	b0c <__aeabi_dcmpgt>
    23fa:	2800      	cmp	r0, #0
    23fc:	f040 829c 	bne.w	2938 <_dtoa_r+0x998>
    2400:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2404:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2406:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    240a:	f7fe fb61 	bl	ad0 <__aeabi_dcmplt>
    240e:	2800      	cmp	r0, #0
    2410:	f040 8290 	bne.w	2934 <_dtoa_r+0x994>
    2414:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    2418:	e9cd 3404 	strd	r3, r4, [sp, #16]
    241c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    241e:	2b00      	cmp	r3, #0
    2420:	f2c0 8152 	blt.w	26c8 <_dtoa_r+0x728>
    2424:	f1ba 0f0e 	cmp.w	sl, #14
    2428:	f300 814e 	bgt.w	26c8 <_dtoa_r+0x728>
    242c:	4b45      	ldr	r3, [pc, #276]	; (2544 <_dtoa_r+0x5a4>)
    242e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    2432:	e9d3 3400 	ldrd	r3, r4, [r3]
    2436:	e9cd 3406 	strd	r3, r4, [sp, #24]
    243a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    243c:	2b00      	cmp	r3, #0
    243e:	f280 80db 	bge.w	25f8 <_dtoa_r+0x658>
    2442:	9b08      	ldr	r3, [sp, #32]
    2444:	2b00      	cmp	r3, #0
    2446:	f300 80d7 	bgt.w	25f8 <_dtoa_r+0x658>
    244a:	f040 8272 	bne.w	2932 <_dtoa_r+0x992>
    244e:	4b42      	ldr	r3, [pc, #264]	; (2558 <_dtoa_r+0x5b8>)
    2450:	2200      	movs	r2, #0
    2452:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    2456:	f7fe f85f 	bl	518 <__aeabi_dmul>
    245a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    245e:	f7fe fb4b 	bl	af8 <__aeabi_dcmpge>
    2462:	9c08      	ldr	r4, [sp, #32]
    2464:	4626      	mov	r6, r4
    2466:	2800      	cmp	r0, #0
    2468:	f040 8248 	bne.w	28fc <_dtoa_r+0x95c>
    246c:	9f03      	ldr	r7, [sp, #12]
    246e:	2331      	movs	r3, #49	; 0x31
    2470:	f807 3b01 	strb.w	r3, [r7], #1
    2474:	f10a 0a01 	add.w	sl, sl, #1
    2478:	e244      	b.n	2904 <_dtoa_r+0x964>
    247a:	07e2      	lsls	r2, r4, #31
    247c:	d505      	bpl.n	248a <_dtoa_r+0x4ea>
    247e:	e9d6 2300 	ldrd	r2, r3, [r6]
    2482:	f7fe f849 	bl	518 <__aeabi_dmul>
    2486:	3701      	adds	r7, #1
    2488:	2301      	movs	r3, #1
    248a:	1064      	asrs	r4, r4, #1
    248c:	3608      	adds	r6, #8
    248e:	e76d      	b.n	236c <_dtoa_r+0x3cc>
    2490:	2702      	movs	r7, #2
    2492:	e770      	b.n	2376 <_dtoa_r+0x3d6>
    2494:	9c08      	ldr	r4, [sp, #32]
    2496:	46d0      	mov	r8, sl
    2498:	e78f      	b.n	23ba <_dtoa_r+0x41a>
    249a:	9903      	ldr	r1, [sp, #12]
    249c:	4b29      	ldr	r3, [pc, #164]	; (2544 <_dtoa_r+0x5a4>)
    249e:	4421      	add	r1, r4
    24a0:	9112      	str	r1, [sp, #72]	; 0x48
    24a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    24a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    24a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    24ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    24b0:	2900      	cmp	r1, #0
    24b2:	d055      	beq.n	2560 <_dtoa_r+0x5c0>
    24b4:	4929      	ldr	r1, [pc, #164]	; (255c <_dtoa_r+0x5bc>)
    24b6:	2000      	movs	r0, #0
    24b8:	f7fe f958 	bl	76c <__aeabi_ddiv>
    24bc:	463b      	mov	r3, r7
    24be:	4632      	mov	r2, r6
    24c0:	f7fd fe72 	bl	1a8 <__aeabi_dsub>
    24c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    24c8:	9f03      	ldr	r7, [sp, #12]
    24ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    24ce:	f7fe fb3d 	bl	b4c <__aeabi_d2iz>
    24d2:	4604      	mov	r4, r0
    24d4:	f7fd ffb6 	bl	444 <__aeabi_i2d>
    24d8:	4602      	mov	r2, r0
    24da:	460b      	mov	r3, r1
    24dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    24e0:	f7fd fe62 	bl	1a8 <__aeabi_dsub>
    24e4:	3430      	adds	r4, #48	; 0x30
    24e6:	4602      	mov	r2, r0
    24e8:	460b      	mov	r3, r1
    24ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
    24ee:	f807 4b01 	strb.w	r4, [r7], #1
    24f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    24f6:	f7fe faeb 	bl	ad0 <__aeabi_dcmplt>
    24fa:	2800      	cmp	r0, #0
    24fc:	d174      	bne.n	25e8 <_dtoa_r+0x648>
    24fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    2502:	4912      	ldr	r1, [pc, #72]	; (254c <_dtoa_r+0x5ac>)
    2504:	2000      	movs	r0, #0
    2506:	f7fd fe4f 	bl	1a8 <__aeabi_dsub>
    250a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    250e:	f7fe fadf 	bl	ad0 <__aeabi_dcmplt>
    2512:	2800      	cmp	r0, #0
    2514:	f040 80b7 	bne.w	2686 <_dtoa_r+0x6e6>
    2518:	9b12      	ldr	r3, [sp, #72]	; 0x48
    251a:	429f      	cmp	r7, r3
    251c:	f43f af7a 	beq.w	2414 <_dtoa_r+0x474>
    2520:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2524:	4b0a      	ldr	r3, [pc, #40]	; (2550 <_dtoa_r+0x5b0>)
    2526:	2200      	movs	r2, #0
    2528:	f7fd fff6 	bl	518 <__aeabi_dmul>
    252c:	4b08      	ldr	r3, [pc, #32]	; (2550 <_dtoa_r+0x5b0>)
    252e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    2532:	2200      	movs	r2, #0
    2534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2538:	f7fd ffee 	bl	518 <__aeabi_dmul>
    253c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2540:	e7c3      	b.n	24ca <_dtoa_r+0x52a>
    2542:	bf00      	nop
    2544:	0000fde0 	.word	0x0000fde0
    2548:	0000fdb8 	.word	0x0000fdb8
    254c:	3ff00000 	.word	0x3ff00000
    2550:	40240000 	.word	0x40240000
    2554:	401c0000 	.word	0x401c0000
    2558:	40140000 	.word	0x40140000
    255c:	3fe00000 	.word	0x3fe00000
    2560:	4630      	mov	r0, r6
    2562:	4639      	mov	r1, r7
    2564:	f7fd ffd8 	bl	518 <__aeabi_dmul>
    2568:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    256c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    256e:	9c03      	ldr	r4, [sp, #12]
    2570:	9314      	str	r3, [sp, #80]	; 0x50
    2572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2576:	f7fe fae9 	bl	b4c <__aeabi_d2iz>
    257a:	9015      	str	r0, [sp, #84]	; 0x54
    257c:	f7fd ff62 	bl	444 <__aeabi_i2d>
    2580:	4602      	mov	r2, r0
    2582:	460b      	mov	r3, r1
    2584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2588:	f7fd fe0e 	bl	1a8 <__aeabi_dsub>
    258c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    258e:	3330      	adds	r3, #48	; 0x30
    2590:	f804 3b01 	strb.w	r3, [r4], #1
    2594:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2596:	429c      	cmp	r4, r3
    2598:	4606      	mov	r6, r0
    259a:	460f      	mov	r7, r1
    259c:	f04f 0200 	mov.w	r2, #0
    25a0:	d124      	bne.n	25ec <_dtoa_r+0x64c>
    25a2:	4ba4      	ldr	r3, [pc, #656]	; (2834 <_dtoa_r+0x894>)
    25a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    25a8:	f7fd fe00 	bl	1ac <__adddf3>
    25ac:	4602      	mov	r2, r0
    25ae:	460b      	mov	r3, r1
    25b0:	4630      	mov	r0, r6
    25b2:	4639      	mov	r1, r7
    25b4:	f7fe faaa 	bl	b0c <__aeabi_dcmpgt>
    25b8:	2800      	cmp	r0, #0
    25ba:	d163      	bne.n	2684 <_dtoa_r+0x6e4>
    25bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    25c0:	499c      	ldr	r1, [pc, #624]	; (2834 <_dtoa_r+0x894>)
    25c2:	2000      	movs	r0, #0
    25c4:	f7fd fdf0 	bl	1a8 <__aeabi_dsub>
    25c8:	4602      	mov	r2, r0
    25ca:	460b      	mov	r3, r1
    25cc:	4630      	mov	r0, r6
    25ce:	4639      	mov	r1, r7
    25d0:	f7fe fa7e 	bl	ad0 <__aeabi_dcmplt>
    25d4:	2800      	cmp	r0, #0
    25d6:	f43f af1d 	beq.w	2414 <_dtoa_r+0x474>
    25da:	9f14      	ldr	r7, [sp, #80]	; 0x50
    25dc:	1e7b      	subs	r3, r7, #1
    25de:	9314      	str	r3, [sp, #80]	; 0x50
    25e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    25e4:	2b30      	cmp	r3, #48	; 0x30
    25e6:	d0f8      	beq.n	25da <_dtoa_r+0x63a>
    25e8:	46c2      	mov	sl, r8
    25ea:	e03b      	b.n	2664 <_dtoa_r+0x6c4>
    25ec:	4b92      	ldr	r3, [pc, #584]	; (2838 <_dtoa_r+0x898>)
    25ee:	f7fd ff93 	bl	518 <__aeabi_dmul>
    25f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    25f6:	e7bc      	b.n	2572 <_dtoa_r+0x5d2>
    25f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    25fc:	9f03      	ldr	r7, [sp, #12]
    25fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2602:	4640      	mov	r0, r8
    2604:	4649      	mov	r1, r9
    2606:	f7fe f8b1 	bl	76c <__aeabi_ddiv>
    260a:	f7fe fa9f 	bl	b4c <__aeabi_d2iz>
    260e:	4604      	mov	r4, r0
    2610:	f7fd ff18 	bl	444 <__aeabi_i2d>
    2614:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2618:	f7fd ff7e 	bl	518 <__aeabi_dmul>
    261c:	f104 0630 	add.w	r6, r4, #48	; 0x30
    2620:	4602      	mov	r2, r0
    2622:	460b      	mov	r3, r1
    2624:	4640      	mov	r0, r8
    2626:	4649      	mov	r1, r9
    2628:	f7fd fdbe 	bl	1a8 <__aeabi_dsub>
    262c:	f807 6b01 	strb.w	r6, [r7], #1
    2630:	9e03      	ldr	r6, [sp, #12]
    2632:	f8dd c020 	ldr.w	ip, [sp, #32]
    2636:	1bbe      	subs	r6, r7, r6
    2638:	45b4      	cmp	ip, r6
    263a:	4602      	mov	r2, r0
    263c:	460b      	mov	r3, r1
    263e:	d136      	bne.n	26ae <_dtoa_r+0x70e>
    2640:	f7fd fdb4 	bl	1ac <__adddf3>
    2644:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2648:	4680      	mov	r8, r0
    264a:	4689      	mov	r9, r1
    264c:	f7fe fa5e 	bl	b0c <__aeabi_dcmpgt>
    2650:	bb58      	cbnz	r0, 26aa <_dtoa_r+0x70a>
    2652:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2656:	4640      	mov	r0, r8
    2658:	4649      	mov	r1, r9
    265a:	f7fe fa2f 	bl	abc <__aeabi_dcmpeq>
    265e:	b108      	cbz	r0, 2664 <_dtoa_r+0x6c4>
    2660:	07e1      	lsls	r1, r4, #31
    2662:	d422      	bmi.n	26aa <_dtoa_r+0x70a>
    2664:	4628      	mov	r0, r5
    2666:	4659      	mov	r1, fp
    2668:	f00a fbf8 	bl	ce5c <_Bfree>
    266c:	2300      	movs	r3, #0
    266e:	703b      	strb	r3, [r7, #0]
    2670:	9b24      	ldr	r3, [sp, #144]	; 0x90
    2672:	f10a 0001 	add.w	r0, sl, #1
    2676:	6018      	str	r0, [r3, #0]
    2678:	9b26      	ldr	r3, [sp, #152]	; 0x98
    267a:	2b00      	cmp	r3, #0
    267c:	f43f acdd 	beq.w	203a <_dtoa_r+0x9a>
    2680:	601f      	str	r7, [r3, #0]
    2682:	e4da      	b.n	203a <_dtoa_r+0x9a>
    2684:	4627      	mov	r7, r4
    2686:	463b      	mov	r3, r7
    2688:	461f      	mov	r7, r3
    268a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    268e:	2a39      	cmp	r2, #57	; 0x39
    2690:	d107      	bne.n	26a2 <_dtoa_r+0x702>
    2692:	9a03      	ldr	r2, [sp, #12]
    2694:	429a      	cmp	r2, r3
    2696:	d1f7      	bne.n	2688 <_dtoa_r+0x6e8>
    2698:	9903      	ldr	r1, [sp, #12]
    269a:	2230      	movs	r2, #48	; 0x30
    269c:	f108 0801 	add.w	r8, r8, #1
    26a0:	700a      	strb	r2, [r1, #0]
    26a2:	781a      	ldrb	r2, [r3, #0]
    26a4:	3201      	adds	r2, #1
    26a6:	701a      	strb	r2, [r3, #0]
    26a8:	e79e      	b.n	25e8 <_dtoa_r+0x648>
    26aa:	46d0      	mov	r8, sl
    26ac:	e7eb      	b.n	2686 <_dtoa_r+0x6e6>
    26ae:	4b62      	ldr	r3, [pc, #392]	; (2838 <_dtoa_r+0x898>)
    26b0:	2200      	movs	r2, #0
    26b2:	f7fd ff31 	bl	518 <__aeabi_dmul>
    26b6:	2200      	movs	r2, #0
    26b8:	2300      	movs	r3, #0
    26ba:	4680      	mov	r8, r0
    26bc:	4689      	mov	r9, r1
    26be:	f7fe f9fd 	bl	abc <__aeabi_dcmpeq>
    26c2:	2800      	cmp	r0, #0
    26c4:	d09b      	beq.n	25fe <_dtoa_r+0x65e>
    26c6:	e7cd      	b.n	2664 <_dtoa_r+0x6c4>
    26c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    26ca:	2a00      	cmp	r2, #0
    26cc:	f000 80d0 	beq.w	2870 <_dtoa_r+0x8d0>
    26d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    26d2:	2a01      	cmp	r2, #1
    26d4:	f300 80b2 	bgt.w	283c <_dtoa_r+0x89c>
    26d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    26da:	2a00      	cmp	r2, #0
    26dc:	f000 80a6 	beq.w	282c <_dtoa_r+0x88c>
    26e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
    26e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    26e6:	9f06      	ldr	r7, [sp, #24]
    26e8:	9a06      	ldr	r2, [sp, #24]
    26ea:	441a      	add	r2, r3
    26ec:	9206      	str	r2, [sp, #24]
    26ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
    26f0:	2101      	movs	r1, #1
    26f2:	441a      	add	r2, r3
    26f4:	4628      	mov	r0, r5
    26f6:	9209      	str	r2, [sp, #36]	; 0x24
    26f8:	f00a fc18 	bl	cf2c <__i2b>
    26fc:	4606      	mov	r6, r0
    26fe:	2f00      	cmp	r7, #0
    2700:	dd0c      	ble.n	271c <_dtoa_r+0x77c>
    2702:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2704:	2b00      	cmp	r3, #0
    2706:	dd09      	ble.n	271c <_dtoa_r+0x77c>
    2708:	42bb      	cmp	r3, r7
    270a:	9a06      	ldr	r2, [sp, #24]
    270c:	bfa8      	it	ge
    270e:	463b      	movge	r3, r7
    2710:	1ad2      	subs	r2, r2, r3
    2712:	9206      	str	r2, [sp, #24]
    2714:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2716:	1aff      	subs	r7, r7, r3
    2718:	1ad3      	subs	r3, r2, r3
    271a:	9309      	str	r3, [sp, #36]	; 0x24
    271c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    271e:	b1f3      	cbz	r3, 275e <_dtoa_r+0x7be>
    2720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2722:	2b00      	cmp	r3, #0
    2724:	f000 80a8 	beq.w	2878 <_dtoa_r+0x8d8>
    2728:	2c00      	cmp	r4, #0
    272a:	dd10      	ble.n	274e <_dtoa_r+0x7ae>
    272c:	4631      	mov	r1, r6
    272e:	4622      	mov	r2, r4
    2730:	4628      	mov	r0, r5
    2732:	f00a fcb9 	bl	d0a8 <__pow5mult>
    2736:	465a      	mov	r2, fp
    2738:	4601      	mov	r1, r0
    273a:	4606      	mov	r6, r0
    273c:	4628      	mov	r0, r5
    273e:	f00a fc0b 	bl	cf58 <__multiply>
    2742:	4659      	mov	r1, fp
    2744:	4680      	mov	r8, r0
    2746:	4628      	mov	r0, r5
    2748:	f00a fb88 	bl	ce5c <_Bfree>
    274c:	46c3      	mov	fp, r8
    274e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2750:	1b1a      	subs	r2, r3, r4
    2752:	d004      	beq.n	275e <_dtoa_r+0x7be>
    2754:	4659      	mov	r1, fp
    2756:	4628      	mov	r0, r5
    2758:	f00a fca6 	bl	d0a8 <__pow5mult>
    275c:	4683      	mov	fp, r0
    275e:	2101      	movs	r1, #1
    2760:	4628      	mov	r0, r5
    2762:	f00a fbe3 	bl	cf2c <__i2b>
    2766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2768:	2b00      	cmp	r3, #0
    276a:	4604      	mov	r4, r0
    276c:	f340 8086 	ble.w	287c <_dtoa_r+0x8dc>
    2770:	461a      	mov	r2, r3
    2772:	4601      	mov	r1, r0
    2774:	4628      	mov	r0, r5
    2776:	f00a fc97 	bl	d0a8 <__pow5mult>
    277a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    277c:	2b01      	cmp	r3, #1
    277e:	4604      	mov	r4, r0
    2780:	dd7f      	ble.n	2882 <_dtoa_r+0x8e2>
    2782:	f04f 0800 	mov.w	r8, #0
    2786:	6923      	ldr	r3, [r4, #16]
    2788:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    278c:	6918      	ldr	r0, [r3, #16]
    278e:	f00c fee2 	bl	f556 <__hi0bits>
    2792:	f1c0 0020 	rsb	r0, r0, #32
    2796:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2798:	4418      	add	r0, r3
    279a:	f010 001f 	ands.w	r0, r0, #31
    279e:	f000 8092 	beq.w	28c6 <_dtoa_r+0x926>
    27a2:	f1c0 0320 	rsb	r3, r0, #32
    27a6:	2b04      	cmp	r3, #4
    27a8:	f340 808a 	ble.w	28c0 <_dtoa_r+0x920>
    27ac:	f1c0 001c 	rsb	r0, r0, #28
    27b0:	9b06      	ldr	r3, [sp, #24]
    27b2:	4403      	add	r3, r0
    27b4:	9306      	str	r3, [sp, #24]
    27b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27b8:	4403      	add	r3, r0
    27ba:	4407      	add	r7, r0
    27bc:	9309      	str	r3, [sp, #36]	; 0x24
    27be:	9b06      	ldr	r3, [sp, #24]
    27c0:	2b00      	cmp	r3, #0
    27c2:	dd05      	ble.n	27d0 <_dtoa_r+0x830>
    27c4:	4659      	mov	r1, fp
    27c6:	461a      	mov	r2, r3
    27c8:	4628      	mov	r0, r5
    27ca:	f00a fcc7 	bl	d15c <__lshift>
    27ce:	4683      	mov	fp, r0
    27d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27d2:	2b00      	cmp	r3, #0
    27d4:	dd05      	ble.n	27e2 <_dtoa_r+0x842>
    27d6:	4621      	mov	r1, r4
    27d8:	461a      	mov	r2, r3
    27da:	4628      	mov	r0, r5
    27dc:	f00a fcbe 	bl	d15c <__lshift>
    27e0:	4604      	mov	r4, r0
    27e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    27e4:	2b00      	cmp	r3, #0
    27e6:	d070      	beq.n	28ca <_dtoa_r+0x92a>
    27e8:	4621      	mov	r1, r4
    27ea:	4658      	mov	r0, fp
    27ec:	f00c ff00 	bl	f5f0 <__mcmp>
    27f0:	2800      	cmp	r0, #0
    27f2:	da6a      	bge.n	28ca <_dtoa_r+0x92a>
    27f4:	2300      	movs	r3, #0
    27f6:	4659      	mov	r1, fp
    27f8:	220a      	movs	r2, #10
    27fa:	4628      	mov	r0, r5
    27fc:	f00a fb50 	bl	cea0 <__multadd>
    2800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2802:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2806:	4683      	mov	fp, r0
    2808:	2b00      	cmp	r3, #0
    280a:	f000 8194 	beq.w	2b36 <_dtoa_r+0xb96>
    280e:	4631      	mov	r1, r6
    2810:	2300      	movs	r3, #0
    2812:	220a      	movs	r2, #10
    2814:	4628      	mov	r0, r5
    2816:	f00a fb43 	bl	cea0 <__multadd>
    281a:	f1b9 0f00 	cmp.w	r9, #0
    281e:	4606      	mov	r6, r0
    2820:	f300 8093 	bgt.w	294a <_dtoa_r+0x9aa>
    2824:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2826:	2b02      	cmp	r3, #2
    2828:	dc57      	bgt.n	28da <_dtoa_r+0x93a>
    282a:	e08e      	b.n	294a <_dtoa_r+0x9aa>
    282c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    282e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    2832:	e757      	b.n	26e4 <_dtoa_r+0x744>
    2834:	3fe00000 	.word	0x3fe00000
    2838:	40240000 	.word	0x40240000
    283c:	9b08      	ldr	r3, [sp, #32]
    283e:	1e5c      	subs	r4, r3, #1
    2840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2842:	42a3      	cmp	r3, r4
    2844:	bfbf      	itttt	lt
    2846:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    2848:	940a      	strlt	r4, [sp, #40]	; 0x28
    284a:	1ae2      	sublt	r2, r4, r3
    284c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    284e:	bfb6      	itet	lt
    2850:	189b      	addlt	r3, r3, r2
    2852:	1b1c      	subge	r4, r3, r4
    2854:	930e      	strlt	r3, [sp, #56]	; 0x38
    2856:	9b08      	ldr	r3, [sp, #32]
    2858:	bfb8      	it	lt
    285a:	2400      	movlt	r4, #0
    285c:	2b00      	cmp	r3, #0
    285e:	bfb9      	ittee	lt
    2860:	9b06      	ldrlt	r3, [sp, #24]
    2862:	9a08      	ldrlt	r2, [sp, #32]
    2864:	9f06      	ldrge	r7, [sp, #24]
    2866:	9b08      	ldrge	r3, [sp, #32]
    2868:	bfbc      	itt	lt
    286a:	1a9f      	sublt	r7, r3, r2
    286c:	2300      	movlt	r3, #0
    286e:	e73b      	b.n	26e8 <_dtoa_r+0x748>
    2870:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2872:	9f06      	ldr	r7, [sp, #24]
    2874:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    2876:	e742      	b.n	26fe <_dtoa_r+0x75e>
    2878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    287a:	e76b      	b.n	2754 <_dtoa_r+0x7b4>
    287c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    287e:	2b01      	cmp	r3, #1
    2880:	dc19      	bgt.n	28b6 <_dtoa_r+0x916>
    2882:	9b04      	ldr	r3, [sp, #16]
    2884:	b9bb      	cbnz	r3, 28b6 <_dtoa_r+0x916>
    2886:	9b05      	ldr	r3, [sp, #20]
    2888:	f3c3 0313 	ubfx	r3, r3, #0, #20
    288c:	b99b      	cbnz	r3, 28b6 <_dtoa_r+0x916>
    288e:	9b05      	ldr	r3, [sp, #20]
    2890:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    2894:	0d1b      	lsrs	r3, r3, #20
    2896:	051b      	lsls	r3, r3, #20
    2898:	b183      	cbz	r3, 28bc <_dtoa_r+0x91c>
    289a:	9b06      	ldr	r3, [sp, #24]
    289c:	3301      	adds	r3, #1
    289e:	9306      	str	r3, [sp, #24]
    28a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    28a2:	3301      	adds	r3, #1
    28a4:	9309      	str	r3, [sp, #36]	; 0x24
    28a6:	f04f 0801 	mov.w	r8, #1
    28aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    28ac:	2b00      	cmp	r3, #0
    28ae:	f47f af6a 	bne.w	2786 <_dtoa_r+0x7e6>
    28b2:	2001      	movs	r0, #1
    28b4:	e76f      	b.n	2796 <_dtoa_r+0x7f6>
    28b6:	f04f 0800 	mov.w	r8, #0
    28ba:	e7f6      	b.n	28aa <_dtoa_r+0x90a>
    28bc:	4698      	mov	r8, r3
    28be:	e7f4      	b.n	28aa <_dtoa_r+0x90a>
    28c0:	f43f af7d 	beq.w	27be <_dtoa_r+0x81e>
    28c4:	4618      	mov	r0, r3
    28c6:	301c      	adds	r0, #28
    28c8:	e772      	b.n	27b0 <_dtoa_r+0x810>
    28ca:	9b08      	ldr	r3, [sp, #32]
    28cc:	2b00      	cmp	r3, #0
    28ce:	dc36      	bgt.n	293e <_dtoa_r+0x99e>
    28d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    28d2:	2b02      	cmp	r3, #2
    28d4:	dd33      	ble.n	293e <_dtoa_r+0x99e>
    28d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
    28da:	f1b9 0f00 	cmp.w	r9, #0
    28de:	d10d      	bne.n	28fc <_dtoa_r+0x95c>
    28e0:	4621      	mov	r1, r4
    28e2:	464b      	mov	r3, r9
    28e4:	2205      	movs	r2, #5
    28e6:	4628      	mov	r0, r5
    28e8:	f00a fada 	bl	cea0 <__multadd>
    28ec:	4601      	mov	r1, r0
    28ee:	4604      	mov	r4, r0
    28f0:	4658      	mov	r0, fp
    28f2:	f00c fe7d 	bl	f5f0 <__mcmp>
    28f6:	2800      	cmp	r0, #0
    28f8:	f73f adb8 	bgt.w	246c <_dtoa_r+0x4cc>
    28fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    28fe:	9f03      	ldr	r7, [sp, #12]
    2900:	ea6f 0a03 	mvn.w	sl, r3
    2904:	f04f 0800 	mov.w	r8, #0
    2908:	4621      	mov	r1, r4
    290a:	4628      	mov	r0, r5
    290c:	f00a faa6 	bl	ce5c <_Bfree>
    2910:	2e00      	cmp	r6, #0
    2912:	f43f aea7 	beq.w	2664 <_dtoa_r+0x6c4>
    2916:	f1b8 0f00 	cmp.w	r8, #0
    291a:	d005      	beq.n	2928 <_dtoa_r+0x988>
    291c:	45b0      	cmp	r8, r6
    291e:	d003      	beq.n	2928 <_dtoa_r+0x988>
    2920:	4641      	mov	r1, r8
    2922:	4628      	mov	r0, r5
    2924:	f00a fa9a 	bl	ce5c <_Bfree>
    2928:	4631      	mov	r1, r6
    292a:	4628      	mov	r0, r5
    292c:	f00a fa96 	bl	ce5c <_Bfree>
    2930:	e698      	b.n	2664 <_dtoa_r+0x6c4>
    2932:	2400      	movs	r4, #0
    2934:	4626      	mov	r6, r4
    2936:	e7e1      	b.n	28fc <_dtoa_r+0x95c>
    2938:	46c2      	mov	sl, r8
    293a:	4626      	mov	r6, r4
    293c:	e596      	b.n	246c <_dtoa_r+0x4cc>
    293e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2940:	f8dd 9020 	ldr.w	r9, [sp, #32]
    2944:	2b00      	cmp	r3, #0
    2946:	f000 80fd 	beq.w	2b44 <_dtoa_r+0xba4>
    294a:	2f00      	cmp	r7, #0
    294c:	dd05      	ble.n	295a <_dtoa_r+0x9ba>
    294e:	4631      	mov	r1, r6
    2950:	463a      	mov	r2, r7
    2952:	4628      	mov	r0, r5
    2954:	f00a fc02 	bl	d15c <__lshift>
    2958:	4606      	mov	r6, r0
    295a:	f1b8 0f00 	cmp.w	r8, #0
    295e:	d05c      	beq.n	2a1a <_dtoa_r+0xa7a>
    2960:	6871      	ldr	r1, [r6, #4]
    2962:	4628      	mov	r0, r5
    2964:	f00a fa3a 	bl	cddc <_Balloc>
    2968:	4607      	mov	r7, r0
    296a:	b928      	cbnz	r0, 2978 <_dtoa_r+0x9d8>
    296c:	4b80      	ldr	r3, [pc, #512]	; (2b70 <_dtoa_r+0xbd0>)
    296e:	4602      	mov	r2, r0
    2970:	f240 21ea 	movw	r1, #746	; 0x2ea
    2974:	f7ff bb28 	b.w	1fc8 <_dtoa_r+0x28>
    2978:	6932      	ldr	r2, [r6, #16]
    297a:	3202      	adds	r2, #2
    297c:	0092      	lsls	r2, r2, #2
    297e:	f106 010c 	add.w	r1, r6, #12
    2982:	300c      	adds	r0, #12
    2984:	f00c fd32 	bl	f3ec <memcpy>
    2988:	2201      	movs	r2, #1
    298a:	4639      	mov	r1, r7
    298c:	4628      	mov	r0, r5
    298e:	f00a fbe5 	bl	d15c <__lshift>
    2992:	9b03      	ldr	r3, [sp, #12]
    2994:	3301      	adds	r3, #1
    2996:	9308      	str	r3, [sp, #32]
    2998:	9b03      	ldr	r3, [sp, #12]
    299a:	444b      	add	r3, r9
    299c:	930a      	str	r3, [sp, #40]	; 0x28
    299e:	9b04      	ldr	r3, [sp, #16]
    29a0:	f003 0301 	and.w	r3, r3, #1
    29a4:	46b0      	mov	r8, r6
    29a6:	9309      	str	r3, [sp, #36]	; 0x24
    29a8:	4606      	mov	r6, r0
    29aa:	9b08      	ldr	r3, [sp, #32]
    29ac:	4621      	mov	r1, r4
    29ae:	3b01      	subs	r3, #1
    29b0:	4658      	mov	r0, fp
    29b2:	9304      	str	r3, [sp, #16]
    29b4:	f00c fe45 	bl	f642 <quorem>
    29b8:	4603      	mov	r3, r0
    29ba:	3330      	adds	r3, #48	; 0x30
    29bc:	9006      	str	r0, [sp, #24]
    29be:	4641      	mov	r1, r8
    29c0:	4658      	mov	r0, fp
    29c2:	930b      	str	r3, [sp, #44]	; 0x2c
    29c4:	f00c fe14 	bl	f5f0 <__mcmp>
    29c8:	4632      	mov	r2, r6
    29ca:	4681      	mov	r9, r0
    29cc:	4621      	mov	r1, r4
    29ce:	4628      	mov	r0, r5
    29d0:	f00a fc34 	bl	d23c <__mdiff>
    29d4:	68c2      	ldr	r2, [r0, #12]
    29d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    29d8:	4607      	mov	r7, r0
    29da:	bb02      	cbnz	r2, 2a1e <_dtoa_r+0xa7e>
    29dc:	4601      	mov	r1, r0
    29de:	4658      	mov	r0, fp
    29e0:	f00c fe06 	bl	f5f0 <__mcmp>
    29e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    29e6:	4602      	mov	r2, r0
    29e8:	4639      	mov	r1, r7
    29ea:	4628      	mov	r0, r5
    29ec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    29f0:	f00a fa34 	bl	ce5c <_Bfree>
    29f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    29f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    29f8:	9f08      	ldr	r7, [sp, #32]
    29fa:	ea43 0102 	orr.w	r1, r3, r2
    29fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2a00:	430b      	orrs	r3, r1
    2a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2a04:	d10d      	bne.n	2a22 <_dtoa_r+0xa82>
    2a06:	2b39      	cmp	r3, #57	; 0x39
    2a08:	d029      	beq.n	2a5e <_dtoa_r+0xabe>
    2a0a:	f1b9 0f00 	cmp.w	r9, #0
    2a0e:	dd01      	ble.n	2a14 <_dtoa_r+0xa74>
    2a10:	9b06      	ldr	r3, [sp, #24]
    2a12:	3331      	adds	r3, #49	; 0x31
    2a14:	9a04      	ldr	r2, [sp, #16]
    2a16:	7013      	strb	r3, [r2, #0]
    2a18:	e776      	b.n	2908 <_dtoa_r+0x968>
    2a1a:	4630      	mov	r0, r6
    2a1c:	e7b9      	b.n	2992 <_dtoa_r+0x9f2>
    2a1e:	2201      	movs	r2, #1
    2a20:	e7e2      	b.n	29e8 <_dtoa_r+0xa48>
    2a22:	f1b9 0f00 	cmp.w	r9, #0
    2a26:	db06      	blt.n	2a36 <_dtoa_r+0xa96>
    2a28:	9922      	ldr	r1, [sp, #136]	; 0x88
    2a2a:	ea41 0909 	orr.w	r9, r1, r9
    2a2e:	9909      	ldr	r1, [sp, #36]	; 0x24
    2a30:	ea59 0101 	orrs.w	r1, r9, r1
    2a34:	d120      	bne.n	2a78 <_dtoa_r+0xad8>
    2a36:	2a00      	cmp	r2, #0
    2a38:	ddec      	ble.n	2a14 <_dtoa_r+0xa74>
    2a3a:	4659      	mov	r1, fp
    2a3c:	2201      	movs	r2, #1
    2a3e:	4628      	mov	r0, r5
    2a40:	9308      	str	r3, [sp, #32]
    2a42:	f00a fb8b 	bl	d15c <__lshift>
    2a46:	4621      	mov	r1, r4
    2a48:	4683      	mov	fp, r0
    2a4a:	f00c fdd1 	bl	f5f0 <__mcmp>
    2a4e:	2800      	cmp	r0, #0
    2a50:	9b08      	ldr	r3, [sp, #32]
    2a52:	dc02      	bgt.n	2a5a <_dtoa_r+0xaba>
    2a54:	d1de      	bne.n	2a14 <_dtoa_r+0xa74>
    2a56:	07da      	lsls	r2, r3, #31
    2a58:	d5dc      	bpl.n	2a14 <_dtoa_r+0xa74>
    2a5a:	2b39      	cmp	r3, #57	; 0x39
    2a5c:	d1d8      	bne.n	2a10 <_dtoa_r+0xa70>
    2a5e:	9a04      	ldr	r2, [sp, #16]
    2a60:	2339      	movs	r3, #57	; 0x39
    2a62:	7013      	strb	r3, [r2, #0]
    2a64:	463b      	mov	r3, r7
    2a66:	461f      	mov	r7, r3
    2a68:	3b01      	subs	r3, #1
    2a6a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    2a6e:	2a39      	cmp	r2, #57	; 0x39
    2a70:	d050      	beq.n	2b14 <_dtoa_r+0xb74>
    2a72:	3201      	adds	r2, #1
    2a74:	701a      	strb	r2, [r3, #0]
    2a76:	e747      	b.n	2908 <_dtoa_r+0x968>
    2a78:	2a00      	cmp	r2, #0
    2a7a:	dd03      	ble.n	2a84 <_dtoa_r+0xae4>
    2a7c:	2b39      	cmp	r3, #57	; 0x39
    2a7e:	d0ee      	beq.n	2a5e <_dtoa_r+0xabe>
    2a80:	3301      	adds	r3, #1
    2a82:	e7c7      	b.n	2a14 <_dtoa_r+0xa74>
    2a84:	9a08      	ldr	r2, [sp, #32]
    2a86:	990a      	ldr	r1, [sp, #40]	; 0x28
    2a88:	f802 3c01 	strb.w	r3, [r2, #-1]
    2a8c:	428a      	cmp	r2, r1
    2a8e:	d02a      	beq.n	2ae6 <_dtoa_r+0xb46>
    2a90:	4659      	mov	r1, fp
    2a92:	2300      	movs	r3, #0
    2a94:	220a      	movs	r2, #10
    2a96:	4628      	mov	r0, r5
    2a98:	f00a fa02 	bl	cea0 <__multadd>
    2a9c:	45b0      	cmp	r8, r6
    2a9e:	4683      	mov	fp, r0
    2aa0:	f04f 0300 	mov.w	r3, #0
    2aa4:	f04f 020a 	mov.w	r2, #10
    2aa8:	4641      	mov	r1, r8
    2aaa:	4628      	mov	r0, r5
    2aac:	d107      	bne.n	2abe <_dtoa_r+0xb1e>
    2aae:	f00a f9f7 	bl	cea0 <__multadd>
    2ab2:	4680      	mov	r8, r0
    2ab4:	4606      	mov	r6, r0
    2ab6:	9b08      	ldr	r3, [sp, #32]
    2ab8:	3301      	adds	r3, #1
    2aba:	9308      	str	r3, [sp, #32]
    2abc:	e775      	b.n	29aa <_dtoa_r+0xa0a>
    2abe:	f00a f9ef 	bl	cea0 <__multadd>
    2ac2:	4631      	mov	r1, r6
    2ac4:	4680      	mov	r8, r0
    2ac6:	2300      	movs	r3, #0
    2ac8:	220a      	movs	r2, #10
    2aca:	4628      	mov	r0, r5
    2acc:	f00a f9e8 	bl	cea0 <__multadd>
    2ad0:	4606      	mov	r6, r0
    2ad2:	e7f0      	b.n	2ab6 <_dtoa_r+0xb16>
    2ad4:	f1b9 0f00 	cmp.w	r9, #0
    2ad8:	9a03      	ldr	r2, [sp, #12]
    2ada:	bfcc      	ite	gt
    2adc:	464f      	movgt	r7, r9
    2ade:	2701      	movle	r7, #1
    2ae0:	4417      	add	r7, r2
    2ae2:	f04f 0800 	mov.w	r8, #0
    2ae6:	4659      	mov	r1, fp
    2ae8:	2201      	movs	r2, #1
    2aea:	4628      	mov	r0, r5
    2aec:	9308      	str	r3, [sp, #32]
    2aee:	f00a fb35 	bl	d15c <__lshift>
    2af2:	4621      	mov	r1, r4
    2af4:	4683      	mov	fp, r0
    2af6:	f00c fd7b 	bl	f5f0 <__mcmp>
    2afa:	2800      	cmp	r0, #0
    2afc:	dcb2      	bgt.n	2a64 <_dtoa_r+0xac4>
    2afe:	d102      	bne.n	2b06 <_dtoa_r+0xb66>
    2b00:	9b08      	ldr	r3, [sp, #32]
    2b02:	07db      	lsls	r3, r3, #31
    2b04:	d4ae      	bmi.n	2a64 <_dtoa_r+0xac4>
    2b06:	463b      	mov	r3, r7
    2b08:	461f      	mov	r7, r3
    2b0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    2b0e:	2a30      	cmp	r2, #48	; 0x30
    2b10:	d0fa      	beq.n	2b08 <_dtoa_r+0xb68>
    2b12:	e6f9      	b.n	2908 <_dtoa_r+0x968>
    2b14:	9a03      	ldr	r2, [sp, #12]
    2b16:	429a      	cmp	r2, r3
    2b18:	d1a5      	bne.n	2a66 <_dtoa_r+0xac6>
    2b1a:	f10a 0a01 	add.w	sl, sl, #1
    2b1e:	2331      	movs	r3, #49	; 0x31
    2b20:	e779      	b.n	2a16 <_dtoa_r+0xa76>
    2b22:	4b14      	ldr	r3, [pc, #80]	; (2b74 <_dtoa_r+0xbd4>)
    2b24:	f7ff baa7 	b.w	2076 <_dtoa_r+0xd6>
    2b28:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2b2a:	2b00      	cmp	r3, #0
    2b2c:	f47f aa80 	bne.w	2030 <_dtoa_r+0x90>
    2b30:	4b11      	ldr	r3, [pc, #68]	; (2b78 <_dtoa_r+0xbd8>)
    2b32:	f7ff baa0 	b.w	2076 <_dtoa_r+0xd6>
    2b36:	f1b9 0f00 	cmp.w	r9, #0
    2b3a:	dc03      	bgt.n	2b44 <_dtoa_r+0xba4>
    2b3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2b3e:	2b02      	cmp	r3, #2
    2b40:	f73f aecb 	bgt.w	28da <_dtoa_r+0x93a>
    2b44:	9f03      	ldr	r7, [sp, #12]
    2b46:	4621      	mov	r1, r4
    2b48:	4658      	mov	r0, fp
    2b4a:	f00c fd7a 	bl	f642 <quorem>
    2b4e:	f100 0330 	add.w	r3, r0, #48	; 0x30
    2b52:	f807 3b01 	strb.w	r3, [r7], #1
    2b56:	9a03      	ldr	r2, [sp, #12]
    2b58:	1aba      	subs	r2, r7, r2
    2b5a:	4591      	cmp	r9, r2
    2b5c:	ddba      	ble.n	2ad4 <_dtoa_r+0xb34>
    2b5e:	4659      	mov	r1, fp
    2b60:	2300      	movs	r3, #0
    2b62:	220a      	movs	r2, #10
    2b64:	4628      	mov	r0, r5
    2b66:	f00a f99b 	bl	cea0 <__multadd>
    2b6a:	4683      	mov	fp, r0
    2b6c:	e7eb      	b.n	2b46 <_dtoa_r+0xba6>
    2b6e:	bf00      	nop
    2b70:	00011fe2 	.word	0x00011fe2
    2b74:	0001203c 	.word	0x0001203c
    2b78:	0001202f 	.word	0x0001202f

00002b7c <thread_receive_image_code>:
}

/* Thread code implementation */

void thread_receive_image_code(void *argA, void *argB, void *argC)
{
    2b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b80:	b089      	sub	sp, #36	; 0x24
    int64_t release_time=0, fin_time=0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;

    printk("Thread receive_image init (periodic)\n");
    2b82:	4852      	ldr	r0, [pc, #328]	; (2ccc <thread_receive_image_code+0x150>)
    2b84:	f00b fc0a 	bl	e39c <printk>
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    2b88:	f00c fbfb 	bl	f382 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    2b8c:	014a      	lsls	r2, r1, #5
    2b8e:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    2b92:	0143      	lsls	r3, r0, #5
    2b94:	1a1b      	subs	r3, r3, r0
    2b96:	eb62 0201 	sbc.w	r2, r2, r1
    2b9a:	0092      	lsls	r2, r2, #2
    2b9c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    2ba0:	009b      	lsls	r3, r3, #2
    2ba2:	eb13 0800 	adds.w	r8, r3, r0
    2ba6:	eb42 0301 	adc.w	r3, r2, r1
    2baa:	00db      	lsls	r3, r3, #3
    2bac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
    2bb0:	f3c8 3810 	ubfx	r8, r8, #12, #17
    2bb4:	ea48 4843 	orr.w	r8, r8, r3, lsl #17
    2bb8:	0bdb      	lsrs	r3, r3, #15

    /* Compute next release instant */
    release_time = k_uptime_get() + SAMP_PERIOD_MS;
    2bba:	f518 787a 	adds.w	r8, r8, #1000	; 0x3e8
    2bbe:	f143 0900 	adc.w	r9, r3, #0
    int64_t release_time=0, fin_time=0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    2bc2:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
    2bc6:	f8cd b018 	str.w	fp, [sp, #24]
    2bca:	2300      	movs	r3, #0
    2bcc:	461f      	mov	r7, r3
    2bce:	9307      	str	r3, [sp, #28]
    2bd0:	469a      	mov	sl, r3
    2bd2:	461e      	mov	r6, r3
    2bd4:	e02d      	b.n	2c32 <thread_receive_image_code+0xb6>

        /* Wait for next release instant */
        fin_time = k_uptime_get();
        
        if (fin_time - t_prev < t_min)
            t_min = fin_time - t_prev;
    2bd6:	46b3      	mov	fp, r6
    2bd8:	46ba      	mov	sl, r7
    2bda:	f00c fbd2 	bl	f382 <z_impl_k_uptime_ticks>
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
    2bde:	4607      	mov	r7, r0
    2be0:	014e      	lsls	r6, r1, #5
    2be2:	ea46 66d0 	orr.w	r6, r6, r0, lsr #27
    2be6:	0140      	lsls	r0, r0, #5
    2be8:	1bc0      	subs	r0, r0, r7
    2bea:	eb66 0201 	sbc.w	r2, r6, r1
    2bee:	0093      	lsls	r3, r2, #2
    2bf0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
    2bf4:	0082      	lsls	r2, r0, #2
    2bf6:	19d2      	adds	r2, r2, r7
    2bf8:	eb43 0301 	adc.w	r3, r3, r1
    2bfc:	00db      	lsls	r3, r3, #3
    2bfe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    2c02:	f3c2 3210 	ubfx	r2, r2, #12, #17
        else if (fin_time - t_prev > t_max)
            t_max = fin_time - t_prev;
            
        t_prev = fin_time;

        printk("Task %s arrived at %lld inter-arrival time (us): min: %lld / max: %lld \n\r", "rcv img", (long long)k_uptime_get(), t_min, t_max);
    2c06:	9906      	ldr	r1, [sp, #24]
    2c08:	9102      	str	r1, [sp, #8]
    2c0a:	9907      	ldr	r1, [sp, #28]
    2c0c:	9103      	str	r1, [sp, #12]
    2c0e:	f8cd b000 	str.w	fp, [sp]
    2c12:	f8cd a004 	str.w	sl, [sp, #4]
    2c16:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    2c1a:	0bdb      	lsrs	r3, r3, #15
    2c1c:	492c      	ldr	r1, [pc, #176]	; (2cd0 <thread_receive_image_code+0x154>)
    2c1e:	482d      	ldr	r0, [pc, #180]	; (2cd4 <thread_receive_image_code+0x158>)
    2c20:	f00b fbbc 	bl	e39c <printk>

        if (fin_time < release_time)
    2c24:	9b05      	ldr	r3, [sp, #20]
    2c26:	4543      	cmp	r3, r8
    2c28:	eb75 0309 	sbcs.w	r3, r5, r9
    2c2c:	db32      	blt.n	2c94 <thread_receive_image_code+0x118>
{
    2c2e:	9e05      	ldr	r6, [sp, #20]
    2c30:	462f      	mov	r7, r5
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2c32:	4829      	ldr	r0, [pc, #164]	; (2cd8 <thread_receive_image_code+0x15c>)
    2c34:	f007 fe8a 	bl	a94c <z_impl_k_sem_give>
    2c38:	4828      	ldr	r0, [pc, #160]	; (2cdc <thread_receive_image_code+0x160>)
    2c3a:	f007 fe87 	bl	a94c <z_impl_k_sem_give>
    2c3e:	4828      	ldr	r0, [pc, #160]	; (2ce0 <thread_receive_image_code+0x164>)
    2c40:	f007 fe84 	bl	a94c <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
    2c44:	f00c fb9d 	bl	f382 <z_impl_k_uptime_ticks>
    2c48:	014b      	lsls	r3, r1, #5
    2c4a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
    2c4e:	0144      	lsls	r4, r0, #5
    2c50:	1a24      	subs	r4, r4, r0
    2c52:	eb63 0301 	sbc.w	r3, r3, r1
    2c56:	009d      	lsls	r5, r3, #2
    2c58:	ea45 7594 	orr.w	r5, r5, r4, lsr #30
    2c5c:	00a4      	lsls	r4, r4, #2
    2c5e:	1824      	adds	r4, r4, r0
    2c60:	eb45 0501 	adc.w	r5, r5, r1
    2c64:	00ed      	lsls	r5, r5, #3
    2c66:	ea45 7554 	orr.w	r5, r5, r4, lsr #29
    2c6a:	f3c4 3410 	ubfx	r4, r4, #12, #17
    2c6e:	ea44 4445 	orr.w	r4, r4, r5, lsl #17
    2c72:	0bed      	lsrs	r5, r5, #15
    2c74:	9405      	str	r4, [sp, #20]
        if (fin_time - t_prev < t_min)
    2c76:	1ba6      	subs	r6, r4, r6
    2c78:	eb65 0707 	sbc.w	r7, r5, r7
    2c7c:	455e      	cmp	r6, fp
    2c7e:	eb77 030a 	sbcs.w	r3, r7, sl
    2c82:	dba8      	blt.n	2bd6 <thread_receive_image_code+0x5a>
        else if (fin_time - t_prev > t_max)
    2c84:	9b06      	ldr	r3, [sp, #24]
    2c86:	42b3      	cmp	r3, r6
    2c88:	9b07      	ldr	r3, [sp, #28]
    2c8a:	41bb      	sbcs	r3, r7
    2c8c:	daa5      	bge.n	2bda <thread_receive_image_code+0x5e>
            t_max = fin_time - t_prev;
    2c8e:	9606      	str	r6, [sp, #24]
    2c90:	9707      	str	r7, [sp, #28]
    2c92:	e7a2      	b.n	2bda <thread_receive_image_code+0x5e>
        {
            k_msleep(release_time - fin_time);
    2c94:	eba8 0004 	sub.w	r0, r8, r4
	return k_sleep(Z_TIMEOUT_MS(ms));
    2c98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    2c9c:	17c1      	asrs	r1, r0, #31
    2c9e:	03c9      	lsls	r1, r1, #15
    2ca0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    2ca4:	03c0      	lsls	r0, r0, #15
    2ca6:	f240 34e7 	movw	r4, #999	; 0x3e7
    2caa:	1900      	adds	r0, r0, r4
    2cac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2cb0:	f04f 0300 	mov.w	r3, #0
    2cb4:	f141 0100 	adc.w	r1, r1, #0
    2cb8:	f7fd fe90 	bl	9dc <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    2cbc:	f009 f86c 	bl	bd98 <z_impl_k_sleep>
            release_time += SAMP_PERIOD_MS;
    2cc0:	f518 787a 	adds.w	r8, r8, #1000	; 0x3e8
    2cc4:	f149 0900 	adc.w	r9, r9, #0
    2cc8:	e7b1      	b.n	2c2e <thread_receive_image_code+0xb2>
    2cca:	bf00      	nop
    2ccc:	0000fea8 	.word	0x0000fea8
    2cd0:	0000fed0 	.word	0x0000fed0
    2cd4:	0000fed8 	.word	0x0000fed8
    2cd8:	200047b0 	.word	0x200047b0
    2cdc:	200047d0 	.word	0x200047d0
    2ce0:	200047c0 	.word	0x200047c0

00002ce4 <thread_output_code>:
        
    }
}

void thread_output_code(void *argA, void *argB, void *argC)
{
    2ce4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    printk("Thread output init\n");
    2ce8:	482d      	ldr	r0, [pc, #180]	; (2da0 <thread_output_code+0xbc>)
    2cea:	f00b fb57 	bl	e39c <printk>
	return z_impl_k_uptime_ticks();
    2cee:	f00c fb48 	bl	f382 <z_impl_k_uptime_ticks>
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    2cf2:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
    2cf6:	f04f 0a00 	mov.w	sl, #0
    2cfa:	46d9      	mov	r9, fp
    2cfc:	46d0      	mov	r8, sl
    2cfe:	4654      	mov	r4, sl
    2d00:	4655      	mov	r5, sl
    2d02:	e003      	b.n	2d0c <thread_output_code+0x28>
        
        /* Wait for next release instant */
        fin_time = k_uptime_get();
        
        if (fin_time - t_prev < t_min)
            t_min = fin_time - t_prev;
    2d04:	46a1      	mov	r9, r4
    2d06:	46a8      	mov	r8, r5
        else if (fin_time - t_prev > t_max)
            t_max = fin_time - t_prev;
            
        t_prev = fin_time;
    2d08:	461c      	mov	r4, r3
    2d0a:	4615      	mov	r5, r2
        k_sem_take(&sem_nearobs_output, K_FOREVER);
    2d0c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    2d10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	return z_impl_k_sem_take(sem, timeout);
    2d14:	4632      	mov	r2, r6
    2d16:	463b      	mov	r3, r7
    2d18:	4822      	ldr	r0, [pc, #136]	; (2da4 <thread_output_code+0xc0>)
    2d1a:	f007 fe5b 	bl	a9d4 <z_impl_k_sem_take>
        printk("\tCloseby obstacles detected: %s\n\r", nearobs_output);
    2d1e:	4922      	ldr	r1, [pc, #136]	; (2da8 <thread_output_code+0xc4>)
    2d20:	4822      	ldr	r0, [pc, #136]	; (2dac <thread_output_code+0xc8>)
    2d22:	f00b fb3b 	bl	e39c <printk>
    2d26:	4632      	mov	r2, r6
    2d28:	463b      	mov	r3, r7
    2d2a:	4821      	ldr	r0, [pc, #132]	; (2db0 <thread_output_code+0xcc>)
    2d2c:	f007 fe52 	bl	a9d4 <z_impl_k_sem_take>
        printk("\tRobot position=%s, guideline angle=%s\n\r", orientation_output[0], orientation_output[1]);
    2d30:	4920      	ldr	r1, [pc, #128]	; (2db4 <thread_output_code+0xd0>)
    2d32:	f101 020a 	add.w	r2, r1, #10
    2d36:	4820      	ldr	r0, [pc, #128]	; (2db8 <thread_output_code+0xd4>)
    2d38:	f00b fb30 	bl	e39c <printk>
    2d3c:	4632      	mov	r2, r6
    2d3e:	463b      	mov	r3, r7
    2d40:	481e      	ldr	r0, [pc, #120]	; (2dbc <thread_output_code+0xd8>)
    2d42:	f007 fe47 	bl	a9d4 <z_impl_k_sem_take>
	    printk("\t%d obstacles detected\n\r", obscount_output);
    2d46:	4b1e      	ldr	r3, [pc, #120]	; (2dc0 <thread_output_code+0xdc>)
    2d48:	8819      	ldrh	r1, [r3, #0]
    2d4a:	481e      	ldr	r0, [pc, #120]	; (2dc4 <thread_output_code+0xe0>)
    2d4c:	f00b fb26 	bl	e39c <printk>
	return z_impl_k_uptime_ticks();
    2d50:	f00c fb17 	bl	f382 <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
    2d54:	4606      	mov	r6, r0
    2d56:	014a      	lsls	r2, r1, #5
    2d58:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    2d5c:	0140      	lsls	r0, r0, #5
    2d5e:	1b80      	subs	r0, r0, r6
    2d60:	eb62 0301 	sbc.w	r3, r2, r1
    2d64:	009b      	lsls	r3, r3, #2
    2d66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
    2d6a:	0080      	lsls	r0, r0, #2
    2d6c:	1980      	adds	r0, r0, r6
    2d6e:	eb43 0301 	adc.w	r3, r3, r1
    2d72:	00db      	lsls	r3, r3, #3
    2d74:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    2d78:	f3c0 3010 	ubfx	r0, r0, #12, #17
    2d7c:	0bda      	lsrs	r2, r3, #15
    2d7e:	ea40 4343 	orr.w	r3, r0, r3, lsl #17
        if (fin_time - t_prev < t_min)
    2d82:	1b1c      	subs	r4, r3, r4
    2d84:	eb62 0505 	sbc.w	r5, r2, r5
    2d88:	454c      	cmp	r4, r9
    2d8a:	eb75 0108 	sbcs.w	r1, r5, r8
    2d8e:	dbb9      	blt.n	2d04 <thread_output_code+0x20>
        else if (fin_time - t_prev > t_max)
    2d90:	45a3      	cmp	fp, r4
    2d92:	eb7a 0105 	sbcs.w	r1, sl, r5
    2d96:	dab7      	bge.n	2d08 <thread_output_code+0x24>
            t_max = fin_time - t_prev;
    2d98:	46a3      	mov	fp, r4
    2d9a:	46aa      	mov	sl, r5
    2d9c:	e7b4      	b.n	2d08 <thread_output_code+0x24>
    2d9e:	bf00      	nop
    2da0:	0000ff24 	.word	0x0000ff24
    2da4:	20004780 	.word	0x20004780
    2da8:	20000000 	.word	0x20000000
    2dac:	0000ff38 	.word	0x0000ff38
    2db0:	200047a0 	.word	0x200047a0
    2db4:	2000000c 	.word	0x2000000c
    2db8:	0000ff5c 	.word	0x0000ff5c
    2dbc:	20004790 	.word	0x20004790
    2dc0:	20005558 	.word	0x20005558
    2dc4:	0000ff88 	.word	0x0000ff88

00002dc8 <thread_obscount_code>:
        
    }
}

void thread_obscount_code(void *argA, void *argB, void *argC)
{
    2dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;

    printk("Thread obscount init\n");
    2dcc:	4832      	ldr	r0, [pc, #200]	; (2e98 <thread_obscount_code+0xd0>)
    2dce:	f00b fae5 	bl	e39c <printk>
    2dd2:	f00c fad6 	bl	f382 <z_impl_k_uptime_ticks>
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    2dd6:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
    2dda:	2400      	movs	r4, #0
    2ddc:	46c8      	mov	r8, r9
    2dde:	4627      	mov	r7, r4
    2de0:	4626      	mov	r6, r4
    2de2:	4625      	mov	r5, r4
    2de4:	e049      	b.n	2e7a <thread_obscount_code+0xb2>
            int inObs = 0;
            for (i = 0; i < IMGWIDTH; i++)
            {
                if (vertical_guide_image_data[j][i] == OBSTACLE_COLOR)
                {
                    inObs++;
    2de6:	3101      	adds	r1, #1
            for (i = 0; i < IMGWIDTH; i++)
    2de8:	3301      	adds	r3, #1
    2dea:	2b7f      	cmp	r3, #127	; 0x7f
    2dec:	dc0b      	bgt.n	2e06 <thread_obscount_code+0x3e>
                if (vertical_guide_image_data[j][i] == OBSTACLE_COLOR)
    2dee:	4a2b      	ldr	r2, [pc, #172]	; (2e9c <thread_obscount_code+0xd4>)
    2df0:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    2df4:	5cd2      	ldrb	r2, [r2, r3]
    2df6:	2a80      	cmp	r2, #128	; 0x80
    2df8:	d0f5      	beq.n	2de6 <thread_obscount_code+0x1e>
                }
                else if (inObs > 1)
    2dfa:	2901      	cmp	r1, #1
    2dfc:	ddf4      	ble.n	2de8 <thread_obscount_code+0x20>
                {
                    nobs++;
    2dfe:	f10c 0c01 	add.w	ip, ip, #1
                    inObs = 0;
    2e02:	2100      	movs	r1, #0
    2e04:	e7f0      	b.n	2de8 <thread_obscount_code+0x20>
                }
            }
            if (inObs > 1)
    2e06:	2901      	cmp	r1, #1
    2e08:	dd01      	ble.n	2e0e <thread_obscount_code+0x46>
                nobs++;
    2e0a:	f10c 0c01 	add.w	ip, ip, #1
        for (j = 0; j < IMGWIDTH; j++)
    2e0e:	3001      	adds	r0, #1
    2e10:	287f      	cmp	r0, #127	; 0x7f
    2e12:	dc02      	bgt.n	2e1a <thread_obscount_code+0x52>
            int inObs = 0;
    2e14:	2100      	movs	r1, #0
            for (i = 0; i < IMGWIDTH; i++)
    2e16:	460b      	mov	r3, r1
    2e18:	e7e7      	b.n	2dea <thread_obscount_code+0x22>
        }

        obscount_output = nobs;
    2e1a:	4b21      	ldr	r3, [pc, #132]	; (2ea0 <thread_obscount_code+0xd8>)
    2e1c:	f8a3 c000 	strh.w	ip, [r3]
	z_impl_k_sem_give(sem);
    2e20:	4820      	ldr	r0, [pc, #128]	; (2ea4 <thread_obscount_code+0xdc>)
    2e22:	f007 fd93 	bl	a94c <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
    2e26:	f00c faac 	bl	f382 <z_impl_k_uptime_ticks>
    2e2a:	014a      	lsls	r2, r1, #5
    2e2c:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    2e30:	0143      	lsls	r3, r0, #5
    2e32:	1a1b      	subs	r3, r3, r0
    2e34:	eb62 0201 	sbc.w	r2, r2, r1
    2e38:	0092      	lsls	r2, r2, #2
    2e3a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    2e3e:	009b      	lsls	r3, r3, #2
    2e40:	181b      	adds	r3, r3, r0
    2e42:	eb42 0201 	adc.w	r2, r2, r1
    2e46:	00d2      	lsls	r2, r2, #3
    2e48:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    2e4c:	f3c3 3310 	ubfx	r3, r3, #12, #17
    2e50:	0bd0      	lsrs	r0, r2, #15
    2e52:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        k_sem_give(&sem_obscount_output);
        
        /* Wait for next release instant */
        fin_time = k_uptime_get();
        
        if (fin_time - t_prev < t_min)
    2e56:	1b99      	subs	r1, r3, r6
    2e58:	eb60 0205 	sbc.w	r2, r0, r5
    2e5c:	4541      	cmp	r1, r8
    2e5e:	eb72 0507 	sbcs.w	r5, r2, r7
    2e62:	db06      	blt.n	2e72 <thread_obscount_code+0xaa>
            t_min = fin_time - t_prev;
        else if (fin_time - t_prev > t_max)
    2e64:	4589      	cmp	r9, r1
    2e66:	eb74 0502 	sbcs.w	r5, r4, r2
    2e6a:	da04      	bge.n	2e76 <thread_obscount_code+0xae>
            t_max = fin_time - t_prev;
    2e6c:	4689      	mov	r9, r1
    2e6e:	4614      	mov	r4, r2
    2e70:	e001      	b.n	2e76 <thread_obscount_code+0xae>
            t_min = fin_time - t_prev;
    2e72:	4688      	mov	r8, r1
    2e74:	4617      	mov	r7, r2
            
        t_prev = fin_time;
    2e76:	461e      	mov	r6, r3
    2e78:	4605      	mov	r5, r0
	return z_impl_k_sem_take(sem, timeout);
    2e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e82:	4809      	ldr	r0, [pc, #36]	; (2ea8 <thread_obscount_code+0xe0>)
    2e84:	f007 fda6 	bl	a9d4 <z_impl_k_sem_take>
	    printk("Detecting number of obstacles ...\n");
    2e88:	4808      	ldr	r0, [pc, #32]	; (2eac <thread_obscount_code+0xe4>)
    2e8a:	f00b fa87 	bl	e39c <printk>
        nobs = 0;
    2e8e:	f04f 0c00 	mov.w	ip, #0
        for (j = 0; j < IMGWIDTH; j++)
    2e92:	4660      	mov	r0, ip
    2e94:	e7bc      	b.n	2e10 <thread_obscount_code+0x48>
    2e96:	bf00      	nop
    2e98:	0000ffa4 	.word	0x0000ffa4
    2e9c:	20000020 	.word	0x20000020
    2ea0:	20005558 	.word	0x20005558
    2ea4:	20004790 	.word	0x20004790
    2ea8:	200047c0 	.word	0x200047c0
    2eac:	0000ffbc 	.word	0x0000ffbc

00002eb0 <thread_orientation_code>:
{
    2eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2eb4:	b085      	sub	sp, #20
    printk("Thread orientation init\n");
    2eb6:	485b      	ldr	r0, [pc, #364]	; (3024 <thread_orientation_code+0x174>)
    2eb8:	f00b fa70 	bl	e39c <printk>
	return z_impl_k_uptime_ticks();
    2ebc:	f00c fa61 	bl	f382 <z_impl_k_uptime_ticks>
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    2ec0:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
    2ec4:	f8cd 9008 	str.w	r9, [sp, #8]
    2ec8:	f04f 0a00 	mov.w	sl, #0
    2ecc:	46d3      	mov	fp, sl
    2ece:	f8cd a00c 	str.w	sl, [sp, #12]
    2ed2:	4655      	mov	r5, sl
    2ed4:	e091      	b.n	2ffa <thread_orientation_code+0x14a>
                pos = i;
    2ed6:	b224      	sxth	r4, r4
        for (i = 0; i < IMGWIDTH; i++)
    2ed8:	2600      	movs	r6, #0
    2eda:	2e7f      	cmp	r6, #127	; 0x7f
    2edc:	dc0b      	bgt.n	2ef6 <thread_orientation_code+0x46>
            if (vertical_guide_image_data[GF_ROW][i] == GUIDELINE_COLOR)
    2ede:	4b52      	ldr	r3, [pc, #328]	; (3028 <thread_orientation_code+0x178>)
    2ee0:	4433      	add	r3, r6
    2ee2:	f503 537e 	add.w	r3, r3, #16256	; 0x3f80
    2ee6:	781b      	ldrb	r3, [r3, #0]
    2ee8:	2bff      	cmp	r3, #255	; 0xff
    2eea:	d006      	beq.n	2efa <thread_orientation_code+0x4a>
        for (i = 0; i < IMGWIDTH; i++)
    2eec:	3601      	adds	r6, #1
    2eee:	e7f4      	b.n	2eda <thread_orientation_code+0x2a>
        pos = -1;
    2ef0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2ef4:	e7f0      	b.n	2ed8 <thread_orientation_code+0x28>
        gf_pos = -1;
    2ef6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
        if (pos == -1 || gf_pos == -1)
    2efa:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    2efe:	d06b      	beq.n	2fd8 <thread_orientation_code+0x128>
    2f00:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    2f04:	d068      	beq.n	2fd8 <thread_orientation_code+0x128>
        if (pos == gf_pos)
    2f06:	46a0      	mov	r8, r4
    2f08:	42b4      	cmp	r4, r6
    2f0a:	d070      	beq.n	2fee <thread_orientation_code+0x13e>
            int pos_delta = pos - gf_pos;
    2f0c:	1ba4      	subs	r4, r4, r6
            if (pos_delta > 0)
    2f0e:	2c00      	cmp	r4, #0
    2f10:	dd68      	ble.n	2fe4 <thread_orientation_code+0x134>
                pos_delta++;
    2f12:	3401      	adds	r4, #1
            angle = acos(IMGWIDTH / sqrt(pow(IMGWIDTH, 2) + pow(pos_delta, 2)));
    2f14:	2600      	movs	r6, #0
    2f16:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    2f1a:	4632      	mov	r2, r6
    2f1c:	463b      	mov	r3, r7
    2f1e:	2000      	movs	r0, #0
    2f20:	4942      	ldr	r1, [pc, #264]	; (302c <thread_orientation_code+0x17c>)
    2f22:	f009 fc15 	bl	c750 <pow>
    2f26:	e9cd 0100 	strd	r0, r1, [sp]
    2f2a:	4620      	mov	r0, r4
    2f2c:	f7fd fa8a 	bl	444 <__aeabi_i2d>
    2f30:	4632      	mov	r2, r6
    2f32:	463b      	mov	r3, r7
    2f34:	f009 fc0c 	bl	c750 <pow>
    2f38:	4602      	mov	r2, r0
    2f3a:	460b      	mov	r3, r1
    2f3c:	e9dd 0100 	ldrd	r0, r1, [sp]
    2f40:	f7fd f934 	bl	1ac <__adddf3>
    2f44:	f009 fcb0 	bl	c8a8 <sqrt>
    2f48:	4602      	mov	r2, r0
    2f4a:	460b      	mov	r3, r1
    2f4c:	2000      	movs	r0, #0
    2f4e:	4937      	ldr	r1, [pc, #220]	; (302c <thread_orientation_code+0x17c>)
    2f50:	f7fd fc0c 	bl	76c <__aeabi_ddiv>
    2f54:	f009 fbce 	bl	c6f4 <acos>
    2f58:	f7fd fcf0 	bl	93c <__aeabi_d2f>
    2f5c:	4606      	mov	r6, r0
            if (pos_delta < 0)
    2f5e:	2c00      	cmp	r4, #0
    2f60:	db42      	blt.n	2fe8 <thread_orientation_code+0x138>
        itoa(pos, orientation_output[0], 10);
    2f62:	4c33      	ldr	r4, [pc, #204]	; (3030 <thread_orientation_code+0x180>)
    2f64:	220a      	movs	r2, #10
    2f66:	4621      	mov	r1, r4
    2f68:	4640      	mov	r0, r8
    2f6a:	f00c fa3d 	bl	f3e8 <itoa>
        gcvt (angle, 6, orientation_output[1]);
    2f6e:	340a      	adds	r4, #10
    2f70:	4630      	mov	r0, r6
    2f72:	f7fd fa79 	bl	468 <__aeabi_f2d>
    2f76:	4623      	mov	r3, r4
    2f78:	2206      	movs	r2, #6
    2f7a:	f009 fe01 	bl	cb80 <gcvt>
	z_impl_k_sem_give(sem);
    2f7e:	482d      	ldr	r0, [pc, #180]	; (3034 <thread_orientation_code+0x184>)
    2f80:	f007 fce4 	bl	a94c <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
    2f84:	f00c f9fd 	bl	f382 <z_impl_k_uptime_ticks>
    2f88:	4604      	mov	r4, r0
    2f8a:	014a      	lsls	r2, r1, #5
    2f8c:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    2f90:	0140      	lsls	r0, r0, #5
    2f92:	1b00      	subs	r0, r0, r4
    2f94:	eb62 0301 	sbc.w	r3, r2, r1
    2f98:	009b      	lsls	r3, r3, #2
    2f9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
    2f9e:	0080      	lsls	r0, r0, #2
    2fa0:	1900      	adds	r0, r0, r4
    2fa2:	eb43 0301 	adc.w	r3, r3, r1
    2fa6:	00db      	lsls	r3, r3, #3
    2fa8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    2fac:	f3c0 3010 	ubfx	r0, r0, #12, #17
    2fb0:	0bda      	lsrs	r2, r3, #15
    2fb2:	ea40 4343 	orr.w	r3, r0, r3, lsl #17
        if (fin_time - t_prev < t_min)
    2fb6:	1b5d      	subs	r5, r3, r5
    2fb8:	eb62 0b0b 	sbc.w	fp, r2, fp
    2fbc:	454d      	cmp	r5, r9
    2fbe:	eb7b 010a 	sbcs.w	r1, fp, sl
    2fc2:	db16      	blt.n	2ff2 <thread_orientation_code+0x142>
        else if (fin_time - t_prev > t_max)
    2fc4:	9902      	ldr	r1, [sp, #8]
    2fc6:	42a9      	cmp	r1, r5
    2fc8:	9903      	ldr	r1, [sp, #12]
    2fca:	eb71 010b 	sbcs.w	r1, r1, fp
    2fce:	da12      	bge.n	2ff6 <thread_orientation_code+0x146>
            t_max = fin_time - t_prev;
    2fd0:	9502      	str	r5, [sp, #8]
    2fd2:	f8cd b00c 	str.w	fp, [sp, #12]
    2fd6:	e00e      	b.n	2ff6 <thread_orientation_code+0x146>
            printk("Failed to find guideline pos=%d, gf_pos=%d", pos, gf_pos);
    2fd8:	4632      	mov	r2, r6
    2fda:	4621      	mov	r1, r4
    2fdc:	4816      	ldr	r0, [pc, #88]	; (3038 <thread_orientation_code+0x188>)
    2fde:	f00b f9dd 	bl	e39c <printk>
    2fe2:	e790      	b.n	2f06 <thread_orientation_code+0x56>
                pos_delta--;
    2fe4:	3c01      	subs	r4, #1
    2fe6:	e795      	b.n	2f14 <thread_orientation_code+0x64>
                angle = -angle;
    2fe8:	f100 4600 	add.w	r6, r0, #2147483648	; 0x80000000
    2fec:	e7b9      	b.n	2f62 <thread_orientation_code+0xb2>
            angle = 0;
    2fee:	2600      	movs	r6, #0
    2ff0:	e7b7      	b.n	2f62 <thread_orientation_code+0xb2>
            t_min = fin_time - t_prev;
    2ff2:	46a9      	mov	r9, r5
    2ff4:	46da      	mov	sl, fp
        t_prev = fin_time;
    2ff6:	461d      	mov	r5, r3
    2ff8:	4693      	mov	fp, r2
	return z_impl_k_sem_take(sem, timeout);
    2ffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3002:	480e      	ldr	r0, [pc, #56]	; (303c <thread_orientation_code+0x18c>)
    3004:	f007 fce6 	bl	a9d4 <z_impl_k_sem_take>
        printk("Detecting position and guideline angle...\n");
    3008:	480d      	ldr	r0, [pc, #52]	; (3040 <thread_orientation_code+0x190>)
    300a:	f00b f9c7 	bl	e39c <printk>
        for (i = 0; i < IMGWIDTH; i++)
    300e:	2400      	movs	r4, #0
    3010:	2c7f      	cmp	r4, #127	; 0x7f
    3012:	f73f af6d 	bgt.w	2ef0 <thread_orientation_code+0x40>
            if (vertical_guide_image_data[GN_ROW][i] == GUIDELINE_COLOR)
    3016:	4b04      	ldr	r3, [pc, #16]	; (3028 <thread_orientation_code+0x178>)
    3018:	5d1b      	ldrb	r3, [r3, r4]
    301a:	2bff      	cmp	r3, #255	; 0xff
    301c:	f43f af5b 	beq.w	2ed6 <thread_orientation_code+0x26>
        for (i = 0; i < IMGWIDTH; i++)
    3020:	3401      	adds	r4, #1
    3022:	e7f5      	b.n	3010 <thread_orientation_code+0x160>
    3024:	0000ffe0 	.word	0x0000ffe0
    3028:	20000020 	.word	0x20000020
    302c:	40600000 	.word	0x40600000
    3030:	2000000c 	.word	0x2000000c
    3034:	200047a0 	.word	0x200047a0
    3038:	00010028 	.word	0x00010028
    303c:	200047d0 	.word	0x200047d0
    3040:	0000fffc 	.word	0x0000fffc

00003044 <thread_near_obstacle_code>:
{
    3044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    printk("Thread near_obstacle init\n");
    3048:	4834      	ldr	r0, [pc, #208]	; (311c <thread_near_obstacle_code+0xd8>)
    304a:	f00b f9a7 	bl	e39c <printk>
	return z_impl_k_uptime_ticks();
    304e:	f00c f998 	bl	f382 <z_impl_k_uptime_ticks>
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    3052:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
    3056:	2400      	movs	r4, #0
    3058:	46c8      	mov	r8, r9
    305a:	4627      	mov	r7, r4
    305c:	4626      	mov	r6, r4
    305e:	4625      	mov	r5, r4
    3060:	e04d      	b.n	30fe <thread_near_obstacle_code+0xba>
                    inObs++;
    3062:	3101      	adds	r1, #1
                if (inObs > 1)
    3064:	2901      	cmp	r1, #1
    3066:	dd01      	ble.n	306c <thread_near_obstacle_code+0x28>
                    res=1;
    3068:	f04f 0c01 	mov.w	ip, #1
            for (i = NOB_COL; i < NOB_COL * 3; i++)
    306c:	3301      	adds	r3, #1
    306e:	2b5f      	cmp	r3, #95	; 0x5f
    3070:	dc09      	bgt.n	3086 <thread_near_obstacle_code+0x42>
                if (vertical_guide_image_data[j][i] == OBSTACLE_COLOR)
    3072:	4a2b      	ldr	r2, [pc, #172]	; (3120 <thread_near_obstacle_code+0xdc>)
    3074:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
    3078:	5cd2      	ldrb	r2, [r2, r3]
    307a:	2a80      	cmp	r2, #128	; 0x80
    307c:	d0f1      	beq.n	3062 <thread_near_obstacle_code+0x1e>
                else if (inObs > 1)
    307e:	2901      	cmp	r1, #1
    3080:	ddf0      	ble.n	3064 <thread_near_obstacle_code+0x20>
                    inObs = 0;
    3082:	2100      	movs	r1, #0
    3084:	e7f2      	b.n	306c <thread_near_obstacle_code+0x28>
        for (j = 0; j < NOB_ROW; j++)
    3086:	3001      	adds	r0, #1
    3088:	283f      	cmp	r0, #63	; 0x3f
    308a:	dc02      	bgt.n	3092 <thread_near_obstacle_code+0x4e>
            int inObs = 0;
    308c:	2100      	movs	r1, #0
            for (i = NOB_COL; i < NOB_COL * 3; i++)
    308e:	2320      	movs	r3, #32
    3090:	e7ed      	b.n	306e <thread_near_obstacle_code+0x2a>
        strcpy(nearobs_output, res == 1 ? "Yes" : "No");
    3092:	f1bc 0f00 	cmp.w	ip, #0
    3096:	d12c      	bne.n	30f2 <thread_near_obstacle_code+0xae>
    3098:	4922      	ldr	r1, [pc, #136]	; (3124 <thread_near_obstacle_code+0xe0>)
    309a:	4823      	ldr	r0, [pc, #140]	; (3128 <thread_near_obstacle_code+0xe4>)
    309c:	f00c f9bc 	bl	f418 <strcpy>
	z_impl_k_sem_give(sem);
    30a0:	4822      	ldr	r0, [pc, #136]	; (312c <thread_near_obstacle_code+0xe8>)
    30a2:	f007 fc53 	bl	a94c <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
    30a6:	f00c f96c 	bl	f382 <z_impl_k_uptime_ticks>
    30aa:	014a      	lsls	r2, r1, #5
    30ac:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    30b0:	0143      	lsls	r3, r0, #5
    30b2:	1a1b      	subs	r3, r3, r0
    30b4:	eb62 0201 	sbc.w	r2, r2, r1
    30b8:	0092      	lsls	r2, r2, #2
    30ba:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    30be:	009b      	lsls	r3, r3, #2
    30c0:	181b      	adds	r3, r3, r0
    30c2:	eb42 0201 	adc.w	r2, r2, r1
    30c6:	00d2      	lsls	r2, r2, #3
    30c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    30cc:	f3c3 3310 	ubfx	r3, r3, #12, #17
    30d0:	0bd0      	lsrs	r0, r2, #15
    30d2:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        if (fin_time - t_prev < t_min)
    30d6:	1b99      	subs	r1, r3, r6
    30d8:	eb60 0205 	sbc.w	r2, r0, r5
    30dc:	4541      	cmp	r1, r8
    30de:	eb72 0507 	sbcs.w	r5, r2, r7
    30e2:	db08      	blt.n	30f6 <thread_near_obstacle_code+0xb2>
        else if (fin_time - t_prev > t_max)
    30e4:	4589      	cmp	r9, r1
    30e6:	eb74 0502 	sbcs.w	r5, r4, r2
    30ea:	da06      	bge.n	30fa <thread_near_obstacle_code+0xb6>
            t_max = fin_time - t_prev;
    30ec:	4689      	mov	r9, r1
    30ee:	4614      	mov	r4, r2
    30f0:	e003      	b.n	30fa <thread_near_obstacle_code+0xb6>
        strcpy(nearobs_output, res == 1 ? "Yes" : "No");
    30f2:	490f      	ldr	r1, [pc, #60]	; (3130 <thread_near_obstacle_code+0xec>)
    30f4:	e7d1      	b.n	309a <thread_near_obstacle_code+0x56>
            t_min = fin_time - t_prev;
    30f6:	4688      	mov	r8, r1
    30f8:	4617      	mov	r7, r2
        t_prev = fin_time;
    30fa:	461e      	mov	r6, r3
    30fc:	4605      	mov	r5, r0
	return z_impl_k_sem_take(sem, timeout);
    30fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3106:	480b      	ldr	r0, [pc, #44]	; (3134 <thread_near_obstacle_code+0xf0>)
    3108:	f007 fc64 	bl	a9d4 <z_impl_k_sem_take>
        printk("Detecting closeby obstacles ...\n");
    310c:	480a      	ldr	r0, [pc, #40]	; (3138 <thread_near_obstacle_code+0xf4>)
    310e:	f00b f945 	bl	e39c <printk>
        int res=0;
    3112:	f04f 0c00 	mov.w	ip, #0
        for (j = 0; j < NOB_ROW; j++)
    3116:	4660      	mov	r0, ip
    3118:	e7b6      	b.n	3088 <thread_near_obstacle_code+0x44>
    311a:	bf00      	nop
    311c:	0001005c 	.word	0x0001005c
    3120:	20000020 	.word	0x20000020
    3124:	00010054 	.word	0x00010054
    3128:	20000000 	.word	0x20000000
    312c:	20004780 	.word	0x20004780
    3130:	00010058 	.word	0x00010058
    3134:	200047b0 	.word	0x200047b0
    3138:	00010078 	.word	0x00010078

0000313c <main>:
{
    313c:	b5d0      	push	{r4, r6, r7, lr}
    313e:	b088      	sub	sp, #32
	return z_impl_k_sem_init(sem, initial_count, limit);
    3140:	2201      	movs	r2, #1
    3142:	2100      	movs	r1, #0
    3144:	483a      	ldr	r0, [pc, #232]	; (3230 <main+0xf4>)
    3146:	f00c f8c6 	bl	f2d6 <z_impl_k_sem_init>
    314a:	2201      	movs	r2, #1
    314c:	2100      	movs	r1, #0
    314e:	4839      	ldr	r0, [pc, #228]	; (3234 <main+0xf8>)
    3150:	f00c f8c1 	bl	f2d6 <z_impl_k_sem_init>
    3154:	2201      	movs	r2, #1
    3156:	2100      	movs	r1, #0
    3158:	4837      	ldr	r0, [pc, #220]	; (3238 <main+0xfc>)
    315a:	f00c f8bc 	bl	f2d6 <z_impl_k_sem_init>
    315e:	2201      	movs	r2, #1
    3160:	2100      	movs	r1, #0
    3162:	4836      	ldr	r0, [pc, #216]	; (323c <main+0x100>)
    3164:	f00c f8b7 	bl	f2d6 <z_impl_k_sem_init>
    3168:	2201      	movs	r2, #1
    316a:	2100      	movs	r1, #0
    316c:	4834      	ldr	r0, [pc, #208]	; (3240 <main+0x104>)
    316e:	f00c f8b2 	bl	f2d6 <z_impl_k_sem_init>
    3172:	2201      	movs	r2, #1
    3174:	2100      	movs	r1, #0
    3176:	4833      	ldr	r0, [pc, #204]	; (3244 <main+0x108>)
    3178:	f00c f8ad 	bl	f2d6 <z_impl_k_sem_init>
                                               NULL, NULL, NULL, thread_near_obstacle_prio, 0, K_NO_WAIT);
    317c:	2600      	movs	r6, #0
    317e:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    3180:	e9cd 6706 	strd	r6, r7, [sp, #24]
    3184:	2400      	movs	r4, #0
    3186:	9404      	str	r4, [sp, #16]
    3188:	2303      	movs	r3, #3
    318a:	9303      	str	r3, [sp, #12]
    318c:	9402      	str	r4, [sp, #8]
    318e:	9401      	str	r4, [sp, #4]
    3190:	9400      	str	r4, [sp, #0]
    3192:	4b2d      	ldr	r3, [pc, #180]	; (3248 <main+0x10c>)
    3194:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3198:	492c      	ldr	r1, [pc, #176]	; (324c <main+0x110>)
    319a:	482d      	ldr	r0, [pc, #180]	; (3250 <main+0x114>)
    319c:	f007 f8ea 	bl	a374 <z_impl_k_thread_create>
    thread_near_obstacle_tid = k_thread_create(&thread_near_obstacle_data, thread_near_obstacle_stack,
    31a0:	4b2c      	ldr	r3, [pc, #176]	; (3254 <main+0x118>)
    31a2:	6018      	str	r0, [r3, #0]
    31a4:	e9cd 6706 	strd	r6, r7, [sp, #24]
    31a8:	9404      	str	r4, [sp, #16]
    31aa:	2305      	movs	r3, #5
    31ac:	9303      	str	r3, [sp, #12]
    31ae:	9402      	str	r4, [sp, #8]
    31b0:	9401      	str	r4, [sp, #4]
    31b2:	9400      	str	r4, [sp, #0]
    31b4:	4b28      	ldr	r3, [pc, #160]	; (3258 <main+0x11c>)
    31b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    31ba:	4928      	ldr	r1, [pc, #160]	; (325c <main+0x120>)
    31bc:	4828      	ldr	r0, [pc, #160]	; (3260 <main+0x124>)
    31be:	f007 f8d9 	bl	a374 <z_impl_k_thread_create>
    thread_receive_image_tid = k_thread_create(&thread_receive_image_data, thread_receive_image_stack,
    31c2:	4b28      	ldr	r3, [pc, #160]	; (3264 <main+0x128>)
    31c4:	6018      	str	r0, [r3, #0]
    31c6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    31ca:	9404      	str	r4, [sp, #16]
    31cc:	2302      	movs	r3, #2
    31ce:	9303      	str	r3, [sp, #12]
    31d0:	9402      	str	r4, [sp, #8]
    31d2:	9401      	str	r4, [sp, #4]
    31d4:	9400      	str	r4, [sp, #0]
    31d6:	4b24      	ldr	r3, [pc, #144]	; (3268 <main+0x12c>)
    31d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    31dc:	4923      	ldr	r1, [pc, #140]	; (326c <main+0x130>)
    31de:	4824      	ldr	r0, [pc, #144]	; (3270 <main+0x134>)
    31e0:	f007 f8c8 	bl	a374 <z_impl_k_thread_create>
    thread_orientation_tid = k_thread_create(&thread_orientation_data, thread_orientation_stack,
    31e4:	4b23      	ldr	r3, [pc, #140]	; (3274 <main+0x138>)
    31e6:	6018      	str	r0, [r3, #0]
    31e8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    31ec:	9404      	str	r4, [sp, #16]
    31ee:	2304      	movs	r3, #4
    31f0:	9303      	str	r3, [sp, #12]
    31f2:	9402      	str	r4, [sp, #8]
    31f4:	9401      	str	r4, [sp, #4]
    31f6:	9400      	str	r4, [sp, #0]
    31f8:	4b1f      	ldr	r3, [pc, #124]	; (3278 <main+0x13c>)
    31fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    31fe:	491f      	ldr	r1, [pc, #124]	; (327c <main+0x140>)
    3200:	481f      	ldr	r0, [pc, #124]	; (3280 <main+0x144>)
    3202:	f007 f8b7 	bl	a374 <z_impl_k_thread_create>
    thread_output_tid = k_thread_create(&thread_output_data, thread_output_stack,
    3206:	4b1f      	ldr	r3, [pc, #124]	; (3284 <main+0x148>)
    3208:	6018      	str	r0, [r3, #0]
    320a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    320e:	9404      	str	r4, [sp, #16]
    3210:	2301      	movs	r3, #1
    3212:	9303      	str	r3, [sp, #12]
    3214:	9402      	str	r4, [sp, #8]
    3216:	9401      	str	r4, [sp, #4]
    3218:	9400      	str	r4, [sp, #0]
    321a:	4b1b      	ldr	r3, [pc, #108]	; (3288 <main+0x14c>)
    321c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3220:	491a      	ldr	r1, [pc, #104]	; (328c <main+0x150>)
    3222:	481b      	ldr	r0, [pc, #108]	; (3290 <main+0x154>)
    3224:	f007 f8a6 	bl	a374 <z_impl_k_thread_create>
    thread_obscount_tid = k_thread_create(&thread_obscount_data, thread_obscount_stack,
    3228:	4b1a      	ldr	r3, [pc, #104]	; (3294 <main+0x158>)
    322a:	6018      	str	r0, [r3, #0]
}
    322c:	b008      	add	sp, #32
    322e:	bdd0      	pop	{r4, r6, r7, pc}
    3230:	200047b0 	.word	0x200047b0
    3234:	200047d0 	.word	0x200047d0
    3238:	20004780 	.word	0x20004780
    323c:	200047a0 	.word	0x200047a0
    3240:	200047c0 	.word	0x200047c0
    3244:	20004790 	.word	0x20004790
    3248:	00003045 	.word	0x00003045
    324c:	200059a0 	.word	0x200059a0
    3250:	20004288 	.word	0x20004288
    3254:	200047e0 	.word	0x200047e0
    3258:	00002b7d 	.word	0x00002b7d
    325c:	20005580 	.word	0x20005580
    3260:	20004548 	.word	0x20004548
    3264:	200047f0 	.word	0x200047f0
    3268:	00002eb1 	.word	0x00002eb1
    326c:	20005dc0 	.word	0x20005dc0
    3270:	200043e8 	.word	0x200043e8
    3274:	200047e8 	.word	0x200047e8
    3278:	00002ce5 	.word	0x00002ce5
    327c:	200061e0 	.word	0x200061e0
    3280:	20004498 	.word	0x20004498
    3284:	200047ec 	.word	0x200047ec
    3288:	00002dc9 	.word	0x00002dc9
    328c:	20006600 	.word	0x20006600
    3290:	20004338 	.word	0x20004338
    3294:	200047e4 	.word	0x200047e4

00003298 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    3298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    329c:	b08d      	sub	sp, #52	; 0x34
    329e:	9205      	str	r2, [sp, #20]
    32a0:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    32a2:	4613      	mov	r3, r2
    32a4:	f002 0204 	and.w	r2, r2, #4
    32a8:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    32aa:	f3c3 02c2 	ubfx	r2, r3, #3, #3

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    32ae:	f010 0303 	ands.w	r3, r0, #3
    32b2:	9302      	str	r3, [sp, #8]
    32b4:	f040 8293 	bne.w	37de <cbvprintf_package+0x546>
    32b8:	4607      	mov	r7, r0
    32ba:	468a      	mov	sl, r1
    32bc:	3201      	adds	r2, #1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    32be:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    32c0:	2800      	cmp	r0, #0
    32c2:	d041      	beq.n	3348 <cbvprintf_package+0xb0>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    32c4:	b127      	cbz	r7, 32d0 <cbvprintf_package+0x38>
    32c6:	1be3      	subs	r3, r4, r7
    32c8:	3304      	adds	r3, #4
    32ca:	4553      	cmp	r3, sl
    32cc:	f200 828a 	bhi.w	37e4 <cbvprintf_package+0x54c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
    32d0:	9b03      	ldr	r3, [sp, #12]
    32d2:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    32d4:	f8dd b008 	ldr.w	fp, [sp, #8]
    32d8:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    32dc:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
    32e0:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
    32e2:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
    32e6:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    32e8:	b10f      	cbz	r7, 32ee <cbvprintf_package+0x56>
				*(const char **)buf = s;
    32ea:	9b03      	ldr	r3, [sp, #12]
    32ec:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    32ee:	1e53      	subs	r3, r2, #1
    32f0:	9307      	str	r3, [sp, #28]
    32f2:	2a00      	cmp	r2, #0
    32f4:	f340 80b7 	ble.w	3466 <cbvprintf_package+0x1ce>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
    32f8:	9b05      	ldr	r3, [sp, #20]
    32fa:	f013 0202 	ands.w	r2, r3, #2
    32fe:	d021      	beq.n	3344 <cbvprintf_package+0xac>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    3300:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    3302:	1be1      	subs	r1, r4, r7
    3304:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    3306:	b11a      	cbz	r2, 3310 <cbvprintf_package+0x78>
    3308:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    330c:	f080 80bf 	bcs.w	348e <cbvprintf_package+0x1f6>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    3310:	f1bb 0f0f 	cmp.w	fp, #15
    3314:	f200 80ce 	bhi.w	34b4 <cbvprintf_package+0x21c>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
    3318:	2f00      	cmp	r7, #0
    331a:	f000 80e2 	beq.w	34e2 <cbvprintf_package+0x24a>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
    331e:	b2db      	uxtb	r3, r3
    3320:	aa0c      	add	r2, sp, #48	; 0x30
    3322:	445a      	add	r2, fp
    3324:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
    3328:	2800      	cmp	r0, #0
    332a:	f000 80d6 	beq.w	34da <cbvprintf_package+0x242>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    332e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3332:	aa0c      	add	r2, sp, #48	; 0x30
    3334:	445a      	add	r2, fp
    3336:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
    333a:	9b04      	ldr	r3, [sp, #16]
    333c:	3301      	adds	r3, #1
    333e:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
    3340:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
    3344:	3404      	adds	r4, #4
    3346:	e0f6      	b.n	3536 <cbvprintf_package+0x29e>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    3348:	f001 0a07 	and.w	sl, r1, #7
    334c:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    334e:	f1ca 0a08 	rsb	sl, sl, #8
    3352:	e7b7      	b.n	32c4 <cbvprintf_package+0x2c>
			if (*fmt == '%') {
    3354:	2b25      	cmp	r3, #37	; 0x25
    3356:	f040 80ed 	bne.w	3534 <cbvprintf_package+0x29c>
				parsing = true;
    335a:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
    335c:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
    3360:	46c1      	mov	r9, r8
			continue;
    3362:	e0e7      	b.n	3534 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(intmax_t);
    3364:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
    3368:	46c1      	mov	r9, r8
			continue;
    336a:	e0e3      	b.n	3534 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(size_t);
    336c:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
    3370:	46c1      	mov	r9, r8
			continue;
    3372:	e0df      	b.n	3534 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(ptrdiff_t);
    3374:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
    3378:	46c1      	mov	r9, r8
			continue;
    337a:	e0db      	b.n	3534 <cbvprintf_package+0x29c>
			if (fmt[-1] == 'l') {
    337c:	782a      	ldrb	r2, [r5, #0]
    337e:	2a6c      	cmp	r2, #108	; 0x6c
    3380:	d026      	beq.n	33d0 <cbvprintf_package+0x138>
			parsing = false;
    3382:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
    3384:	eb04 0208 	add.w	r2, r4, r8
    3388:	3a01      	subs	r2, #1
    338a:	f1c8 0100 	rsb	r1, r8, #0
    338e:	400a      	ands	r2, r1
    3390:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    3392:	b127      	cbz	r7, 339e <cbvprintf_package+0x106>
    3394:	1bd1      	subs	r1, r2, r7
    3396:	4449      	add	r1, r9
    3398:	458a      	cmp	sl, r1
    339a:	f0c0 8226 	bcc.w	37ea <cbvprintf_package+0x552>
		if (*fmt == 's') {
    339e:	2b73      	cmp	r3, #115	; 0x73
    33a0:	d059      	beq.n	3456 <cbvprintf_package+0x1be>
		} else if (size == sizeof(int)) {
    33a2:	f1b9 0f04 	cmp.w	r9, #4
    33a6:	f000 80a8 	beq.w	34fa <cbvprintf_package+0x262>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
    33aa:	f1b9 0f08 	cmp.w	r9, #8
    33ae:	f040 80ac 	bne.w	350a <cbvprintf_package+0x272>
			long long v = va_arg(ap, long long);
    33b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    33b4:	3307      	adds	r3, #7
    33b6:	f023 0307 	bic.w	r3, r3, #7
    33ba:	f103 0108 	add.w	r1, r3, #8
    33be:	9116      	str	r1, [sp, #88]	; 0x58
    33c0:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
    33c4:	b10f      	cbz	r7, 33ca <cbvprintf_package+0x132>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
    33c6:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
    33ca:	f102 0408 	add.w	r4, r2, #8
    33ce:	e0b1      	b.n	3534 <cbvprintf_package+0x29c>
				if (fmt[-2] == 'l') {
    33d0:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
    33d4:	2a6c      	cmp	r2, #108	; 0x6c
    33d6:	d004      	beq.n	33e2 <cbvprintf_package+0x14a>
			parsing = false;
    33d8:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
    33da:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
    33de:	46c1      	mov	r9, r8
    33e0:	e7d0      	b.n	3384 <cbvprintf_package+0xec>
			parsing = false;
    33e2:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
    33e4:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
    33e8:	46c1      	mov	r9, r8
    33ea:	e7cb      	b.n	3384 <cbvprintf_package+0xec>
			if (fmt[-1] == 'L') {
    33ec:	782b      	ldrb	r3, [r5, #0]
    33ee:	2b4c      	cmp	r3, #76	; 0x4c
    33f0:	d01c      	beq.n	342c <cbvprintf_package+0x194>
				v.d = va_arg(ap, double);
    33f2:	9b16      	ldr	r3, [sp, #88]	; 0x58
    33f4:	3307      	adds	r3, #7
    33f6:	f023 0307 	bic.w	r3, r3, #7
    33fa:	f103 0208 	add.w	r2, r3, #8
    33fe:	9216      	str	r2, [sp, #88]	; 0x58
    3400:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
    3404:	1de2      	adds	r2, r4, #7
    3406:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
    340a:	b147      	cbz	r7, 341e <cbvprintf_package+0x186>
				if (BUF_OFFSET + size > len) {
    340c:	1bd3      	subs	r3, r2, r7
    340e:	3308      	adds	r3, #8
    3410:	4553      	cmp	r3, sl
    3412:	d815      	bhi.n	3440 <cbvprintf_package+0x1a8>
				} else if (fmt[-1] == 'L') {
    3414:	782b      	ldrb	r3, [r5, #0]
    3416:	2b4c      	cmp	r3, #76	; 0x4c
    3418:	d015      	beq.n	3446 <cbvprintf_package+0x1ae>
					*(double *)buf = v.d;
    341a:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
    341e:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
    3422:	2600      	movs	r6, #0
			continue;
    3424:	f04f 0808 	mov.w	r8, #8
    3428:	46c1      	mov	r9, r8
    342a:	e083      	b.n	3534 <cbvprintf_package+0x29c>
				v.ld = va_arg(ap, long double);
    342c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    342e:	3307      	adds	r3, #7
    3430:	f023 0307 	bic.w	r3, r3, #7
    3434:	f103 0208 	add.w	r2, r3, #8
    3438:	9216      	str	r2, [sp, #88]	; 0x58
    343a:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
    343e:	e7e1      	b.n	3404 <cbvprintf_package+0x16c>
					return -ENOSPC;
    3440:	f06f 001b 	mvn.w	r0, #27
    3444:	e1c8      	b.n	37d8 <cbvprintf_package+0x540>
					*(long double *)buf = v.ld;
    3446:	e9c2 0100 	strd	r0, r1, [r2]
    344a:	e7e8      	b.n	341e <cbvprintf_package+0x186>
			parsing = false;
    344c:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
    344e:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
    3452:	46c1      	mov	r9, r8
    3454:	e796      	b.n	3384 <cbvprintf_package+0xec>
			s = va_arg(ap, char *);
    3456:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3458:	1d1a      	adds	r2, r3, #4
    345a:	9216      	str	r2, [sp, #88]	; 0x58
    345c:	681b      	ldr	r3, [r3, #0]
    345e:	9303      	str	r3, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    3460:	9a07      	ldr	r2, [sp, #28]
	while (*++fmt != '\0') {
    3462:	4665      	mov	r5, ip
    3464:	e740      	b.n	32e8 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    3466:	4bbb      	ldr	r3, [pc, #748]	; (3754 <cbvprintf_package+0x4bc>)
    3468:	9a03      	ldr	r2, [sp, #12]
    346a:	429a      	cmp	r2, r3
    346c:	d304      	bcc.n	3478 <cbvprintf_package+0x1e0>
    346e:	4bba      	ldr	r3, [pc, #744]	; (3758 <cbvprintf_package+0x4c0>)
    3470:	429a      	cmp	r2, r3
    3472:	d30a      	bcc.n	348a <cbvprintf_package+0x1f2>
    3474:	2300      	movs	r3, #0
    3476:	e000      	b.n	347a <cbvprintf_package+0x1e2>
    3478:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    347a:	2b00      	cmp	r3, #0
    347c:	f47f af3c 	bne.w	32f8 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    3480:	9b05      	ldr	r3, [sp, #20]
    3482:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    3486:	2000      	movs	r0, #0
    3488:	e73b      	b.n	3302 <cbvprintf_package+0x6a>
    348a:	2301      	movs	r3, #1
    348c:	e7f5      	b.n	347a <cbvprintf_package+0x1e2>
					__ASSERT(false, "String with too many arguments");
    348e:	4cb3      	ldr	r4, [pc, #716]	; (375c <cbvprintf_package+0x4c4>)
    3490:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    3494:	4622      	mov	r2, r4
    3496:	49b2      	ldr	r1, [pc, #712]	; (3760 <cbvprintf_package+0x4c8>)
    3498:	48b2      	ldr	r0, [pc, #712]	; (3764 <cbvprintf_package+0x4cc>)
    349a:	f00b f888 	bl	e5ae <assert_print>
    349e:	48b2      	ldr	r0, [pc, #712]	; (3768 <cbvprintf_package+0x4d0>)
    34a0:	f00b f885 	bl	e5ae <assert_print>
    34a4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    34a8:	4620      	mov	r0, r4
    34aa:	f00b f879 	bl	e5a0 <assert_post_action>
					return -EINVAL;
    34ae:	f06f 0015 	mvn.w	r0, #21
    34b2:	e191      	b.n	37d8 <cbvprintf_package+0x540>
					__ASSERT(false, "str_ptr_pos[] too small");
    34b4:	4ca9      	ldr	r4, [pc, #676]	; (375c <cbvprintf_package+0x4c4>)
    34b6:	f240 13f5 	movw	r3, #501	; 0x1f5
    34ba:	4622      	mov	r2, r4
    34bc:	49a8      	ldr	r1, [pc, #672]	; (3760 <cbvprintf_package+0x4c8>)
    34be:	48a9      	ldr	r0, [pc, #676]	; (3764 <cbvprintf_package+0x4cc>)
    34c0:	f00b f875 	bl	e5ae <assert_print>
    34c4:	48a9      	ldr	r0, [pc, #676]	; (376c <cbvprintf_package+0x4d4>)
    34c6:	f00b f872 	bl	e5ae <assert_print>
    34ca:	f240 11f5 	movw	r1, #501	; 0x1f5
    34ce:	4620      	mov	r0, r4
    34d0:	f00b f866 	bl	e5a0 <assert_post_action>
					return -EINVAL;
    34d4:	f06f 0015 	mvn.w	r0, #21
    34d8:	e17e      	b.n	37d8 <cbvprintf_package+0x540>
						s_rw_cnt++;
    34da:	9b06      	ldr	r3, [sp, #24]
    34dc:	3301      	adds	r3, #1
    34de:	9306      	str	r3, [sp, #24]
    34e0:	e72e      	b.n	3340 <cbvprintf_package+0xa8>
				} else if (is_ro || rws_pos_en) {
    34e2:	b908      	cbnz	r0, 34e8 <cbvprintf_package+0x250>
    34e4:	9b01      	ldr	r3, [sp, #4]
    34e6:	b113      	cbz	r3, 34ee <cbvprintf_package+0x256>
					len += 1;
    34e8:	f10a 0a01 	add.w	sl, sl, #1
    34ec:	e728      	b.n	3340 <cbvprintf_package+0xa8>
					len += strlen(s) + 1 + 1;
    34ee:	9803      	ldr	r0, [sp, #12]
    34f0:	f7fd fca7 	bl	e42 <strlen>
    34f4:	1c83      	adds	r3, r0, #2
    34f6:	449a      	add	sl, r3
    34f8:	e722      	b.n	3340 <cbvprintf_package+0xa8>
			int v = va_arg(ap, int);
    34fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
    34fc:	1d19      	adds	r1, r3, #4
    34fe:	9116      	str	r1, [sp, #88]	; 0x58
    3500:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
    3502:	b107      	cbz	r7, 3506 <cbvprintf_package+0x26e>
				*(int *)buf = v;
    3504:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
    3506:	1d14      	adds	r4, r2, #4
    3508:	e014      	b.n	3534 <cbvprintf_package+0x29c>
		} else {
			__ASSERT(false, "unexpected size %u", size);
    350a:	4c94      	ldr	r4, [pc, #592]	; (375c <cbvprintf_package+0x4c4>)
    350c:	f240 2331 	movw	r3, #561	; 0x231
    3510:	4622      	mov	r2, r4
    3512:	4993      	ldr	r1, [pc, #588]	; (3760 <cbvprintf_package+0x4c8>)
    3514:	4893      	ldr	r0, [pc, #588]	; (3764 <cbvprintf_package+0x4cc>)
    3516:	f00b f84a 	bl	e5ae <assert_print>
    351a:	4649      	mov	r1, r9
    351c:	4894      	ldr	r0, [pc, #592]	; (3770 <cbvprintf_package+0x4d8>)
    351e:	f00b f846 	bl	e5ae <assert_print>
    3522:	f240 2131 	movw	r1, #561	; 0x231
    3526:	4620      	mov	r0, r4
    3528:	f00b f83a 	bl	e5a0 <assert_post_action>
			return -EINVAL;
    352c:	f06f 0015 	mvn.w	r0, #21
    3530:	e152      	b.n	37d8 <cbvprintf_package+0x540>
		switch (*fmt) {
    3532:	2600      	movs	r6, #0
    3534:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
    3536:	f105 0c01 	add.w	ip, r5, #1
    353a:	786b      	ldrb	r3, [r5, #1]
    353c:	2b00      	cmp	r3, #0
    353e:	f000 80c1 	beq.w	36c4 <cbvprintf_package+0x42c>
		if (!parsing) {
    3542:	2e00      	cmp	r6, #0
    3544:	f43f af06 	beq.w	3354 <cbvprintf_package+0xbc>
		switch (*fmt) {
    3548:	f1a3 0120 	sub.w	r1, r3, #32
    354c:	295a      	cmp	r1, #90	; 0x5a
    354e:	d8f0      	bhi.n	3532 <cbvprintf_package+0x29a>
    3550:	a201      	add	r2, pc, #4	; (adr r2, 3558 <cbvprintf_package+0x2c0>)
    3552:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
    3556:	bf00      	nop
    3558:	00003535 	.word	0x00003535
    355c:	00003533 	.word	0x00003533
    3560:	00003533 	.word	0x00003533
    3564:	00003535 	.word	0x00003535
    3568:	00003533 	.word	0x00003533
    356c:	00003533 	.word	0x00003533
    3570:	00003533 	.word	0x00003533
    3574:	00003533 	.word	0x00003533
    3578:	00003533 	.word	0x00003533
    357c:	00003533 	.word	0x00003533
    3580:	00003385 	.word	0x00003385
    3584:	00003535 	.word	0x00003535
    3588:	00003533 	.word	0x00003533
    358c:	00003535 	.word	0x00003535
    3590:	00003535 	.word	0x00003535
    3594:	00003533 	.word	0x00003533
    3598:	00003535 	.word	0x00003535
    359c:	00003535 	.word	0x00003535
    35a0:	00003535 	.word	0x00003535
    35a4:	00003535 	.word	0x00003535
    35a8:	00003535 	.word	0x00003535
    35ac:	00003535 	.word	0x00003535
    35b0:	00003535 	.word	0x00003535
    35b4:	00003535 	.word	0x00003535
    35b8:	00003535 	.word	0x00003535
    35bc:	00003535 	.word	0x00003535
    35c0:	00003533 	.word	0x00003533
    35c4:	00003533 	.word	0x00003533
    35c8:	00003533 	.word	0x00003533
    35cc:	00003533 	.word	0x00003533
    35d0:	00003533 	.word	0x00003533
    35d4:	00003533 	.word	0x00003533
    35d8:	00003533 	.word	0x00003533
    35dc:	000033ed 	.word	0x000033ed
    35e0:	00003533 	.word	0x00003533
    35e4:	00003533 	.word	0x00003533
    35e8:	00003533 	.word	0x00003533
    35ec:	000033ed 	.word	0x000033ed
    35f0:	000033ed 	.word	0x000033ed
    35f4:	000033ed 	.word	0x000033ed
    35f8:	00003533 	.word	0x00003533
    35fc:	00003533 	.word	0x00003533
    3600:	00003533 	.word	0x00003533
    3604:	00003533 	.word	0x00003533
    3608:	00003535 	.word	0x00003535
    360c:	00003533 	.word	0x00003533
    3610:	00003533 	.word	0x00003533
    3614:	00003533 	.word	0x00003533
    3618:	00003533 	.word	0x00003533
    361c:	00003533 	.word	0x00003533
    3620:	00003533 	.word	0x00003533
    3624:	00003533 	.word	0x00003533
    3628:	00003533 	.word	0x00003533
    362c:	00003533 	.word	0x00003533
    3630:	00003533 	.word	0x00003533
    3634:	00003533 	.word	0x00003533
    3638:	0000337d 	.word	0x0000337d
    363c:	00003533 	.word	0x00003533
    3640:	00003533 	.word	0x00003533
    3644:	00003533 	.word	0x00003533
    3648:	00003533 	.word	0x00003533
    364c:	00003533 	.word	0x00003533
    3650:	00003533 	.word	0x00003533
    3654:	00003533 	.word	0x00003533
    3658:	00003533 	.word	0x00003533
    365c:	000033ed 	.word	0x000033ed
    3660:	00003533 	.word	0x00003533
    3664:	0000337d 	.word	0x0000337d
    3668:	0000337d 	.word	0x0000337d
    366c:	000033ed 	.word	0x000033ed
    3670:	000033ed 	.word	0x000033ed
    3674:	000033ed 	.word	0x000033ed
    3678:	00003535 	.word	0x00003535
    367c:	0000337d 	.word	0x0000337d
    3680:	00003365 	.word	0x00003365
    3684:	00003533 	.word	0x00003533
    3688:	00003535 	.word	0x00003535
    368c:	00003533 	.word	0x00003533
    3690:	0000344d 	.word	0x0000344d
    3694:	0000337d 	.word	0x0000337d
    3698:	0000344d 	.word	0x0000344d
    369c:	00003533 	.word	0x00003533
    36a0:	00003533 	.word	0x00003533
    36a4:	0000344d 	.word	0x0000344d
    36a8:	00003375 	.word	0x00003375
    36ac:	0000337d 	.word	0x0000337d
    36b0:	00003533 	.word	0x00003533
    36b4:	00003533 	.word	0x00003533
    36b8:	0000337d 	.word	0x0000337d
    36bc:	00003533 	.word	0x00003533
    36c0:	0000336d 	.word	0x0000336d
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
    36c4:	1be3      	subs	r3, r4, r7
    36c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    36ca:	d211      	bcs.n	36f0 <cbvprintf_package+0x458>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
    36cc:	b31f      	cbz	r7, 3716 <cbvprintf_package+0x47e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
    36ce:	2200      	movs	r2, #0
    36d0:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	buf0[0] = BUF_OFFSET / sizeof(int);
    36d2:	089b      	lsrs	r3, r3, #2
    36d4:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
    36d6:	9b01      	ldr	r3, [sp, #4]
    36d8:	b30b      	cbz	r3, 371e <cbvprintf_package+0x486>
		/* Strings are appended, update location counter. */
		buf0[1] = 0;
		buf0[3] = s_rw_cnt;
    36da:	9b06      	ldr	r3, [sp, #24]
    36dc:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		buf0[1] = s_rw_cnt;
		buf0[3] = 0;
	}

	buf0[2] = s_ro_cnt;
    36de:	9b04      	ldr	r3, [sp, #16]
    36e0:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
    36e2:	bbab      	cbnz	r3, 3750 <cbvprintf_package+0x4b8>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
    36e4:	9d02      	ldr	r5, [sp, #8]
    36e6:	f8dd 9010 	ldr.w	r9, [sp, #16]
    36ea:	f8dd 800c 	ldr.w	r8, [sp, #12]
    36ee:	e058      	b.n	37a2 <cbvprintf_package+0x50a>
		__ASSERT(false, "too many format args");
    36f0:	4c1a      	ldr	r4, [pc, #104]	; (375c <cbvprintf_package+0x4c4>)
    36f2:	f240 233d 	movw	r3, #573	; 0x23d
    36f6:	4622      	mov	r2, r4
    36f8:	4919      	ldr	r1, [pc, #100]	; (3760 <cbvprintf_package+0x4c8>)
    36fa:	481a      	ldr	r0, [pc, #104]	; (3764 <cbvprintf_package+0x4cc>)
    36fc:	f00a ff57 	bl	e5ae <assert_print>
    3700:	481c      	ldr	r0, [pc, #112]	; (3774 <cbvprintf_package+0x4dc>)
    3702:	f00a ff54 	bl	e5ae <assert_print>
    3706:	f240 213d 	movw	r1, #573	; 0x23d
    370a:	4620      	mov	r0, r4
    370c:	f00a ff48 	bl	e5a0 <assert_post_action>
		return -EINVAL;
    3710:	f06f 0015 	mvn.w	r0, #21
    3714:	e060      	b.n	37d8 <cbvprintf_package+0x540>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    3716:	4453      	add	r3, sl
    3718:	f1a3 0008 	sub.w	r0, r3, #8
    371c:	e05c      	b.n	37d8 <cbvprintf_package+0x540>
		buf0[1] = s_rw_cnt;
    371e:	9b06      	ldr	r3, [sp, #24]
    3720:	707b      	strb	r3, [r7, #1]
		buf0[3] = 0;
    3722:	e7dc      	b.n	36de <cbvprintf_package+0x446>
			*buf++ = pos;
    3724:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    3728:	3301      	adds	r3, #1
    372a:	459b      	cmp	fp, r3
    372c:	d9da      	bls.n	36e4 <cbvprintf_package+0x44c>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    372e:	aa0c      	add	r2, sp, #48	; 0x30
    3730:	441a      	add	r2, r3
    3732:	f812 1c10 	ldrb.w	r1, [r2, #-16]
    3736:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
    373a:	2a00      	cmp	r2, #0
    373c:	daf4      	bge.n	3728 <cbvprintf_package+0x490>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    373e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    3742:	1be2      	subs	r2, r4, r7
    3744:	3201      	adds	r2, #1
    3746:	4592      	cmp	sl, r2
    3748:	d2ec      	bcs.n	3724 <cbvprintf_package+0x48c>
				return -ENOSPC;
    374a:	f06f 001b 	mvn.w	r0, #27
    374e:	e043      	b.n	37d8 <cbvprintf_package+0x540>
		for (i = 0; i < s_idx; i++) {
    3750:	9b02      	ldr	r3, [sp, #8]
    3752:	e7ea      	b.n	372a <cbvprintf_package+0x492>
    3754:	0000fa20 	.word	0x0000fa20
    3758:	000120d0 	.word	0x000120d0
    375c:	0001009c 	.word	0x0001009c
    3760:	000107a0 	.word	0x000107a0
    3764:	000100e4 	.word	0x000100e4
    3768:	00010104 	.word	0x00010104
    376c:	00010128 	.word	0x00010128
    3770:	00010144 	.word	0x00010144
    3774:	0001015c 	.word	0x0001015c
		if (rws_pos_en) {
    3778:	9b01      	ldr	r3, [sp, #4]
    377a:	b1f3      	cbz	r3, 37ba <cbvprintf_package+0x522>
			size = 0;
    377c:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
    377e:	1be3      	subs	r3, r4, r7
    3780:	4433      	add	r3, r6
    3782:	3301      	adds	r3, #1
    3784:	459a      	cmp	sl, r3
    3786:	d333      	bcc.n	37f0 <cbvprintf_package+0x558>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
    3788:	ab0c      	add	r3, sp, #48	; 0x30
    378a:	442b      	add	r3, r5
    378c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    3790:	f804 3b01 	strb.w	r3, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    3794:	4632      	mov	r2, r6
    3796:	4641      	mov	r1, r8
    3798:	4620      	mov	r0, r4
    379a:	f00b fe27 	bl	f3ec <memcpy>
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
    379e:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
    37a0:	3501      	adds	r5, #1
    37a2:	45ab      	cmp	fp, r5
    37a4:	d917      	bls.n	37d6 <cbvprintf_package+0x53e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    37a6:	f1b9 0f00 	cmp.w	r9, #0
    37aa:	d0e5      	beq.n	3778 <cbvprintf_package+0x4e0>
    37ac:	ab0c      	add	r3, sp, #48	; 0x30
    37ae:	442b      	add	r3, r5
    37b0:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
    37b4:	2b00      	cmp	r3, #0
    37b6:	dadf      	bge.n	3778 <cbvprintf_package+0x4e0>
    37b8:	e7f2      	b.n	37a0 <cbvprintf_package+0x508>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    37ba:	ab0c      	add	r3, sp, #48	; 0x30
    37bc:	442b      	add	r3, r5
    37be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    37c2:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    37c6:	2200      	movs	r2, #0
    37c8:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
    37cc:	4640      	mov	r0, r8
    37ce:	f7fd fb38 	bl	e42 <strlen>
    37d2:	1c46      	adds	r6, r0, #1
    37d4:	e7d3      	b.n	377e <cbvprintf_package+0x4e6>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
    37d6:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    37d8:	b00d      	add	sp, #52	; 0x34
    37da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
    37de:	f06f 000d 	mvn.w	r0, #13
    37e2:	e7f9      	b.n	37d8 <cbvprintf_package+0x540>
		return -ENOSPC;
    37e4:	f06f 001b 	mvn.w	r0, #27
    37e8:	e7f6      	b.n	37d8 <cbvprintf_package+0x540>
			return -ENOSPC;
    37ea:	f06f 001b 	mvn.w	r0, #27
    37ee:	e7f3      	b.n	37d8 <cbvprintf_package+0x540>
			return -ENOSPC;
    37f0:	f06f 001b 	mvn.w	r0, #27
    37f4:	e7f0      	b.n	37d8 <cbvprintf_package+0x540>
    37f6:	bf00      	nop

000037f8 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    37f8:	b538      	push	{r3, r4, r5, lr}
    37fa:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    37fc:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    37fe:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    3802:	6081      	str	r1, [r0, #8]
	switch (method) {
    3804:	2b02      	cmp	r3, #2
    3806:	d903      	bls.n	3810 <sys_notify_finalize+0x18>
    3808:	2b03      	cmp	r3, #3
    380a:	d102      	bne.n	3812 <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    380c:	6800      	ldr	r0, [r0, #0]
		break;
    380e:	e00e      	b.n	382e <sys_notify_finalize+0x36>
	switch (method) {
    3810:	b963      	cbnz	r3, 382c <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
    3812:	4d08      	ldr	r5, [pc, #32]	; (3834 <sys_notify_finalize+0x3c>)
    3814:	2345      	movs	r3, #69	; 0x45
    3816:	462a      	mov	r2, r5
    3818:	4907      	ldr	r1, [pc, #28]	; (3838 <sys_notify_finalize+0x40>)
    381a:	4808      	ldr	r0, [pc, #32]	; (383c <sys_notify_finalize+0x44>)
    381c:	f00a fec7 	bl	e5ae <assert_print>
    3820:	2145      	movs	r1, #69	; 0x45
    3822:	4628      	mov	r0, r5
    3824:	f00a febc 	bl	e5a0 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    3828:	2000      	movs	r0, #0
    382a:	e000      	b.n	382e <sys_notify_finalize+0x36>
	switch (method) {
    382c:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    382e:	2300      	movs	r3, #0
    3830:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    3832:	bd38      	pop	{r3, r4, r5, pc}
    3834:	00010174 	.word	0x00010174
    3838:	000107a0 	.word	0x000107a0
    383c:	000100e4 	.word	0x000100e4

00003840 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    3840:	4b01      	ldr	r3, [pc, #4]	; (3848 <__printk_hook_install+0x8>)
    3842:	6018      	str	r0, [r3, #0]
}
    3844:	4770      	bx	lr
    3846:	bf00      	nop
    3848:	20004020 	.word	0x20004020

0000384c <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
    384c:	b538      	push	{r3, r4, r5, lr}
    384e:	4604      	mov	r4, r0
    3850:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3852:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
    3854:	2a00      	cmp	r2, #0
    3856:	db14      	blt.n	3882 <process_complete+0x36>
    3858:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
    385c:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    385e:	2a01      	cmp	r2, #1
    3860:	d91b      	bls.n	389a <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
    3862:	2b04      	cmp	r3, #4
    3864:	d050      	beq.n	3908 <process_complete+0xbc>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
    3866:	4c2f      	ldr	r4, [pc, #188]	; (3924 <process_complete+0xd8>)
    3868:	f240 131b 	movw	r3, #283	; 0x11b
    386c:	4622      	mov	r2, r4
    386e:	492e      	ldr	r1, [pc, #184]	; (3928 <process_complete+0xdc>)
    3870:	482e      	ldr	r0, [pc, #184]	; (392c <process_complete+0xe0>)
    3872:	f00a fe9c 	bl	e5ae <assert_print>
    3876:	f240 111b 	movw	r1, #283	; 0x11b
    387a:	4620      	mov	r0, r4
    387c:	f00a fe90 	bl	e5a0 <assert_post_action>
	}
}
    3880:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    3882:	e9d0 0100 	ldrd	r0, r1, [r0]
    3886:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    388a:	2300      	movs	r3, #0
    388c:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    388e:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    3890:	2101      	movs	r1, #1
    3892:	4620      	mov	r0, r4
    3894:	f00a fd90 	bl	e3b8 <set_state>
    3898:	e7f2      	b.n	3880 <process_complete+0x34>
		*clients = mgr->clients;
    389a:	e9d0 0100 	ldrd	r0, r1, [r0]
    389e:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    38a2:	2200      	movs	r2, #0
    38a4:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    38a6:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    38a8:	2b06      	cmp	r3, #6
    38aa:	d00f      	beq.n	38cc <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    38ac:	2b05      	cmp	r3, #5
    38ae:	d11d      	bne.n	38ec <process_complete+0xa0>
			set_state(mgr, ONOFF_STATE_OFF);
    38b0:	2100      	movs	r1, #0
    38b2:	4620      	mov	r0, r4
    38b4:	f00a fd80 	bl	e3b8 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    38b8:	4620      	mov	r0, r4
    38ba:	f00a fda4 	bl	e406 <process_recheck>
    38be:	2800      	cmp	r0, #0
    38c0:	d0de      	beq.n	3880 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    38c2:	8ba3      	ldrh	r3, [r4, #28]
    38c4:	f043 0320 	orr.w	r3, r3, #32
    38c8:	83a3      	strh	r3, [r4, #28]
    38ca:	e7d9      	b.n	3880 <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    38cc:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    38d0:	b13b      	cbz	r3, 38e2 <process_complete+0x96>
				mgr->refs += 1U;
    38d2:	8be2      	ldrh	r2, [r4, #30]
    38d4:	3201      	adds	r2, #1
    38d6:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    38d8:	2b00      	cmp	r3, #0
    38da:	d0f9      	beq.n	38d0 <process_complete+0x84>
	return node->next;
    38dc:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    38de:	2b00      	cmp	r3, #0
    38e0:	d1f6      	bne.n	38d0 <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
    38e2:	2102      	movs	r1, #2
    38e4:	4620      	mov	r0, r4
    38e6:	f00a fd67 	bl	e3b8 <set_state>
    38ea:	e7e5      	b.n	38b8 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    38ec:	4d0d      	ldr	r5, [pc, #52]	; (3924 <process_complete+0xd8>)
    38ee:	f240 1309 	movw	r3, #265	; 0x109
    38f2:	462a      	mov	r2, r5
    38f4:	490e      	ldr	r1, [pc, #56]	; (3930 <process_complete+0xe4>)
    38f6:	480d      	ldr	r0, [pc, #52]	; (392c <process_complete+0xe0>)
    38f8:	f00a fe59 	bl	e5ae <assert_print>
    38fc:	f240 1109 	movw	r1, #265	; 0x109
    3900:	4628      	mov	r0, r5
    3902:	f00a fe4d 	bl	e5a0 <assert_post_action>
    3906:	e7d3      	b.n	38b0 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    3908:	2100      	movs	r1, #0
    390a:	f00a fd55 	bl	e3b8 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    390e:	4620      	mov	r0, r4
    3910:	f00a fd79 	bl	e406 <process_recheck>
    3914:	2800      	cmp	r0, #0
    3916:	d0b3      	beq.n	3880 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3918:	8ba3      	ldrh	r3, [r4, #28]
    391a:	f043 0320 	orr.w	r3, r3, #32
    391e:	83a3      	strh	r3, [r4, #28]
    3920:	e7ae      	b.n	3880 <process_complete+0x34>
    3922:	bf00      	nop
    3924:	00010198 	.word	0x00010198
    3928:	000107a0 	.word	0x000107a0
    392c:	000100e4 	.word	0x000100e4
    3930:	000101bc 	.word	0x000101bc

00003934 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    3934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3938:	b083      	sub	sp, #12
    393a:	4604      	mov	r4, r0
    393c:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    393e:	8b83      	ldrh	r3, [r0, #28]
    3940:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
    3944:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
    3948:	460d      	mov	r5, r1
    394a:	b131      	cbz	r1, 395a <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    394c:	f1b8 0f00 	cmp.w	r8, #0
    3950:	d112      	bne.n	3978 <process_event+0x44>
	list->head = NULL;
    3952:	2300      	movs	r3, #0
    3954:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    3956:	9301      	str	r3, [sp, #4]
}
    3958:	e0aa      	b.n	3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
	__ASSERT_NO_MSG(evt != EVT_NOP);
    395a:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>
    395e:	f240 1333 	movw	r3, #307	; 0x133
    3962:	464a      	mov	r2, r9
    3964:	49b6      	ldr	r1, [pc, #728]	; (3c40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a8>)
    3966:	48b7      	ldr	r0, [pc, #732]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3968:	f00a fe21 	bl	e5ae <assert_print>
    396c:	f240 1133 	movw	r1, #307	; 0x133
    3970:	4648      	mov	r0, r9
    3972:	f00a fe15 	bl	e5a0 <assert_post_action>
    3976:	e7e9      	b.n	394c <process_event+0x18>
		if (evt == EVT_COMPLETE) {
    3978:	2d01      	cmp	r5, #1
    397a:	d013      	beq.n	39a4 <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    397c:	2d02      	cmp	r5, #2
    397e:	d116      	bne.n	39ae <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
    3980:	8ba3      	ldrh	r3, [r4, #28]
    3982:	f043 0320 	orr.w	r3, r3, #32
    3986:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    3988:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    398a:	4620      	mov	r0, r4
    398c:	f006 fbba 	bl	a104 <z_spin_unlock_valid>
    3990:	2800      	cmp	r0, #0
    3992:	f000 819c 	beq.w	3cce <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x236>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    3996:	f386 8811 	msr	BASEPRI, r6
    399a:	f3bf 8f6f 	isb	sy
}
    399e:	b003      	add	sp, #12
    39a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    39a4:	8ba3      	ldrh	r3, [r4, #28]
    39a6:	f043 0310 	orr.w	r3, r3, #16
    39aa:	83a3      	strh	r3, [r4, #28]
    39ac:	e7ec      	b.n	3988 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    39ae:	4da3      	ldr	r5, [pc, #652]	; (3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>)
    39b0:	f44f 739e 	mov.w	r3, #316	; 0x13c
    39b4:	462a      	mov	r2, r5
    39b6:	49a4      	ldr	r1, [pc, #656]	; (3c48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b0>)
    39b8:	48a2      	ldr	r0, [pc, #648]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    39ba:	f00a fdf8 	bl	e5ae <assert_print>
    39be:	f44f 719e 	mov.w	r1, #316	; 0x13c
    39c2:	4628      	mov	r0, r5
    39c4:	f00a fdec 	bl	e5a0 <assert_post_action>
    39c8:	e7da      	b.n	3980 <process_event+0x4c>
			evt = process_recheck(mgr);
    39ca:	4620      	mov	r0, r4
    39cc:	f00a fd1b 	bl	e406 <process_recheck>
    39d0:	4605      	mov	r5, r0
    39d2:	e06f      	b.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
			res = mgr->last_res;
    39d4:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    39d8:	464a      	mov	r2, r9
    39da:	4669      	mov	r1, sp
    39dc:	4620      	mov	r0, r4
    39de:	f7ff ff35 	bl	384c <process_complete>
		onoff_transition_fn transit = NULL;
    39e2:	2500      	movs	r5, #0
    39e4:	e011      	b.n	3a0a <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    39e6:	2f00      	cmp	r7, #0
    39e8:	f040 8081 	bne.w	3aee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x56>
	return list->head;
    39ec:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    39ee:	2b00      	cmp	r3, #0
    39f0:	f000 808b 	beq.w	3b0a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x72>
			transit = mgr->transitions->start;
    39f4:	6923      	ldr	r3, [r4, #16]
    39f6:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    39f8:	2d00      	cmp	r5, #0
    39fa:	f000 8094 	beq.w	3b26 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8e>
			set_state(mgr, ONOFF_STATE_TO_ON);
    39fe:	2106      	movs	r1, #6
    3a00:	4620      	mov	r0, r4
    3a02:	f00a fcd9 	bl	e3b8 <set_state>
		res = 0;
    3a06:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3a0a:	8ba3      	ldrh	r3, [r4, #28]
    3a0c:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    3a10:	45b8      	cmp	r8, r7
    3a12:	f000 810b 	beq.w	3c2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x194>
    3a16:	68a2      	ldr	r2, [r4, #8]
    3a18:	2a00      	cmp	r2, #0
    3a1a:	f000 8109 	beq.w	3c30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x198>
    3a1e:	2201      	movs	r2, #1
		if (do_monitors
    3a20:	4617      	mov	r7, r2
    3a22:	b91a      	cbnz	r2, 3a2c <process_event+0xf8>
    3a24:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    3a26:	2a00      	cmp	r2, #0
    3a28:	f000 8104 	beq.w	3c34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x19c>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    3a2c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    3a30:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    3a32:	f104 0a14 	add.w	sl, r4, #20
    3a36:	4650      	mov	r0, sl
    3a38:	f006 fb64 	bl	a104 <z_spin_unlock_valid>
    3a3c:	2800      	cmp	r0, #0
    3a3e:	f000 8115 	beq.w	3c6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d4>
    3a42:	f386 8811 	msr	BASEPRI, r6
    3a46:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    3a4a:	2f00      	cmp	r7, #0
    3a4c:	f040 811f 	bne.w	3c8e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1f6>
    3a50:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    3a52:	b12b      	cbz	r3, 3a60 <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
    3a54:	464b      	mov	r3, r9
    3a56:	4642      	mov	r2, r8
    3a58:	4669      	mov	r1, sp
    3a5a:	4620      	mov	r0, r4
    3a5c:	f00a fd15 	bl	e48a <notify_all>
			if (transit != NULL) {
    3a60:	b115      	cbz	r5, 3a68 <process_event+0x134>
				transit(mgr, transition_complete);
    3a62:	497a      	ldr	r1, [pc, #488]	; (3c4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b4>)
    3a64:	4620      	mov	r0, r4
    3a66:	47a8      	blx	r5
	__asm__ volatile(
    3a68:	f04f 0320 	mov.w	r3, #32
    3a6c:	f3ef 8611 	mrs	r6, BASEPRI
    3a70:	f383 8812 	msr	BASEPRI_MAX, r3
    3a74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3a78:	4650      	mov	r0, sl
    3a7a:	f006 fb33 	bl	a0e4 <z_spin_lock_valid>
    3a7e:	2800      	cmp	r0, #0
    3a80:	f000 810b 	beq.w	3c9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x202>
	z_spin_lock_set_owner(l);
    3a84:	4650      	mov	r0, sl
    3a86:	f006 fb4d 	bl	a124 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    3a8a:	8ba3      	ldrh	r3, [r4, #28]
    3a8c:	f023 0308 	bic.w	r3, r3, #8
    3a90:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    3a92:	8ba3      	ldrh	r3, [r4, #28]
    3a94:	f013 0f10 	tst.w	r3, #16
    3a98:	f000 810f 	beq.w	3cba <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x222>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    3a9c:	f023 0310 	bic.w	r3, r3, #16
    3aa0:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    3aa2:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    3aa4:	8ba7      	ldrh	r7, [r4, #28]
    3aa6:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
    3aaa:	2d00      	cmp	r5, #0
    3aac:	f43f af6c 	beq.w	3988 <process_event+0x54>
		if (evt == EVT_RECHECK) {
    3ab0:	2d02      	cmp	r5, #2
    3ab2:	d08a      	beq.n	39ca <process_event+0x96>
		if (evt == EVT_NOP) {
    3ab4:	2d00      	cmp	r5, #0
    3ab6:	f43f af67 	beq.w	3988 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
    3aba:	2d01      	cmp	r5, #1
    3abc:	d08a      	beq.n	39d4 <process_event+0xa0>
		} else if (evt == EVT_START) {
    3abe:	2d03      	cmp	r5, #3
    3ac0:	d091      	beq.n	39e6 <process_event+0xb2>
		} else if (evt == EVT_STOP) {
    3ac2:	2d04      	cmp	r5, #4
    3ac4:	d03e      	beq.n	3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>
		} else if (evt == EVT_RESET) {
    3ac6:	2d05      	cmp	r5, #5
    3ac8:	f040 80a0 	bne.w	3c0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x174>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    3acc:	2f01      	cmp	r7, #1
    3ace:	d172      	bne.n	3bb6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11e>
    3ad0:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    3ad2:	2b00      	cmp	r3, #0
    3ad4:	d07d      	beq.n	3bd2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13a>
			transit = mgr->transitions->reset;
    3ad6:	6923      	ldr	r3, [r4, #16]
    3ad8:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    3ada:	2d00      	cmp	r5, #0
    3adc:	f000 8087 	beq.w	3bee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x156>
			set_state(mgr, ONOFF_STATE_RESETTING);
    3ae0:	2105      	movs	r1, #5
    3ae2:	4620      	mov	r0, r4
    3ae4:	f00a fc68 	bl	e3b8 <set_state>
		res = 0;
    3ae8:	f04f 0900 	mov.w	r9, #0
    3aec:	e78d      	b.n	3a0a <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    3aee:	4d53      	ldr	r5, [pc, #332]	; (3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>)
    3af0:	f44f 73ab 	mov.w	r3, #342	; 0x156
    3af4:	462a      	mov	r2, r5
    3af6:	4956      	ldr	r1, [pc, #344]	; (3c50 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b8>)
    3af8:	4852      	ldr	r0, [pc, #328]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3afa:	f00a fd58 	bl	e5ae <assert_print>
    3afe:	f44f 71ab 	mov.w	r1, #342	; 0x156
    3b02:	4628      	mov	r0, r5
    3b04:	f00a fd4c 	bl	e5a0 <assert_post_action>
    3b08:	e770      	b.n	39ec <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    3b0a:	4d4c      	ldr	r5, [pc, #304]	; (3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>)
    3b0c:	f240 1357 	movw	r3, #343	; 0x157
    3b10:	462a      	mov	r2, r5
    3b12:	4950      	ldr	r1, [pc, #320]	; (3c54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1bc>)
    3b14:	484b      	ldr	r0, [pc, #300]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3b16:	f00a fd4a 	bl	e5ae <assert_print>
    3b1a:	f240 1157 	movw	r1, #343	; 0x157
    3b1e:	4628      	mov	r0, r5
    3b20:	f00a fd3e 	bl	e5a0 <assert_post_action>
    3b24:	e766      	b.n	39f4 <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
    3b26:	f8df 8114 	ldr.w	r8, [pc, #276]	; 3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>
    3b2a:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    3b2e:	4642      	mov	r2, r8
    3b30:	4949      	ldr	r1, [pc, #292]	; (3c58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c0>)
    3b32:	4844      	ldr	r0, [pc, #272]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3b34:	f00a fd3b 	bl	e5ae <assert_print>
    3b38:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    3b3c:	4640      	mov	r0, r8
    3b3e:	f00a fd2f 	bl	e5a0 <assert_post_action>
    3b42:	e75c      	b.n	39fe <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    3b44:	2f02      	cmp	r7, #2
    3b46:	d10b      	bne.n	3b60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc8>
			__ASSERT_NO_MSG(mgr->refs == 0);
    3b48:	8be3      	ldrh	r3, [r4, #30]
    3b4a:	b9bb      	cbnz	r3, 3b7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe4>
			transit = mgr->transitions->stop;
    3b4c:	6923      	ldr	r3, [r4, #16]
    3b4e:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    3b50:	b315      	cbz	r5, 3b98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x100>
			set_state(mgr, ONOFF_STATE_TO_OFF);
    3b52:	2104      	movs	r1, #4
    3b54:	4620      	mov	r0, r4
    3b56:	f00a fc2f 	bl	e3b8 <set_state>
		res = 0;
    3b5a:	f04f 0900 	mov.w	r9, #0
    3b5e:	e754      	b.n	3a0a <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    3b60:	4d36      	ldr	r5, [pc, #216]	; (3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>)
    3b62:	f240 135d 	movw	r3, #349	; 0x15d
    3b66:	462a      	mov	r2, r5
    3b68:	493c      	ldr	r1, [pc, #240]	; (3c5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c4>)
    3b6a:	4836      	ldr	r0, [pc, #216]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3b6c:	f00a fd1f 	bl	e5ae <assert_print>
    3b70:	f240 115d 	movw	r1, #349	; 0x15d
    3b74:	4628      	mov	r0, r5
    3b76:	f00a fd13 	bl	e5a0 <assert_post_action>
    3b7a:	e7e5      	b.n	3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>
			__ASSERT_NO_MSG(mgr->refs == 0);
    3b7c:	4d2f      	ldr	r5, [pc, #188]	; (3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>)
    3b7e:	f44f 73af 	mov.w	r3, #350	; 0x15e
    3b82:	462a      	mov	r2, r5
    3b84:	4936      	ldr	r1, [pc, #216]	; (3c60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c8>)
    3b86:	482f      	ldr	r0, [pc, #188]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3b88:	f00a fd11 	bl	e5ae <assert_print>
    3b8c:	f44f 71af 	mov.w	r1, #350	; 0x15e
    3b90:	4628      	mov	r0, r5
    3b92:	f00a fd05 	bl	e5a0 <assert_post_action>
    3b96:	e7d9      	b.n	3b4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb4>
			__ASSERT_NO_MSG(transit != NULL);
    3b98:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>
    3b9c:	f240 1361 	movw	r3, #353	; 0x161
    3ba0:	4642      	mov	r2, r8
    3ba2:	492d      	ldr	r1, [pc, #180]	; (3c58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c0>)
    3ba4:	4827      	ldr	r0, [pc, #156]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3ba6:	f00a fd02 	bl	e5ae <assert_print>
    3baa:	f240 1161 	movw	r1, #353	; 0x161
    3bae:	4640      	mov	r0, r8
    3bb0:	f00a fcf6 	bl	e5a0 <assert_post_action>
    3bb4:	e7cd      	b.n	3b52 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xba>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    3bb6:	4d21      	ldr	r5, [pc, #132]	; (3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>)
    3bb8:	f44f 73b2 	mov.w	r3, #356	; 0x164
    3bbc:	462a      	mov	r2, r5
    3bbe:	4929      	ldr	r1, [pc, #164]	; (3c64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1cc>)
    3bc0:	4820      	ldr	r0, [pc, #128]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3bc2:	f00a fcf4 	bl	e5ae <assert_print>
    3bc6:	f44f 71b2 	mov.w	r1, #356	; 0x164
    3bca:	4628      	mov	r0, r5
    3bcc:	f00a fce8 	bl	e5a0 <assert_post_action>
    3bd0:	e77e      	b.n	3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    3bd2:	4d1a      	ldr	r5, [pc, #104]	; (3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>)
    3bd4:	f240 1365 	movw	r3, #357	; 0x165
    3bd8:	462a      	mov	r2, r5
    3bda:	491e      	ldr	r1, [pc, #120]	; (3c54 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1bc>)
    3bdc:	4819      	ldr	r0, [pc, #100]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3bde:	f00a fce6 	bl	e5ae <assert_print>
    3be2:	f240 1165 	movw	r1, #357	; 0x165
    3be6:	4628      	mov	r0, r5
    3be8:	f00a fcda 	bl	e5a0 <assert_post_action>
    3bec:	e773      	b.n	3ad6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3e>
			__ASSERT_NO_MSG(transit != NULL);
    3bee:	f8df 804c 	ldr.w	r8, [pc, #76]	; 3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>
    3bf2:	f44f 73b4 	mov.w	r3, #360	; 0x168
    3bf6:	4642      	mov	r2, r8
    3bf8:	4917      	ldr	r1, [pc, #92]	; (3c58 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c0>)
    3bfa:	4812      	ldr	r0, [pc, #72]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3bfc:	f00a fcd7 	bl	e5ae <assert_print>
    3c00:	f44f 71b4 	mov.w	r1, #360	; 0x168
    3c04:	4640      	mov	r0, r8
    3c06:	f00a fccb 	bl	e5a0 <assert_post_action>
    3c0a:	e769      	b.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
			__ASSERT_NO_MSG(false);
    3c0c:	4d0b      	ldr	r5, [pc, #44]	; (3c3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a4>)
    3c0e:	f240 136b 	movw	r3, #363	; 0x16b
    3c12:	462a      	mov	r2, r5
    3c14:	4914      	ldr	r1, [pc, #80]	; (3c68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1d0>)
    3c16:	480b      	ldr	r0, [pc, #44]	; (3c44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ac>)
    3c18:	f00a fcc9 	bl	e5ae <assert_print>
    3c1c:	f240 116b 	movw	r1, #363	; 0x16b
    3c20:	4628      	mov	r0, r5
    3c22:	f00a fcbd 	bl	e5a0 <assert_post_action>
		onoff_transition_fn transit = NULL;
    3c26:	2500      	movs	r5, #0
		res = 0;
    3c28:	46a9      	mov	r9, r5
    3c2a:	e6ee      	b.n	3a0a <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
    3c2c:	2200      	movs	r2, #0
    3c2e:	e6f7      	b.n	3a20 <process_event+0xec>
    3c30:	2200      	movs	r2, #0
    3c32:	e6f5      	b.n	3a20 <process_event+0xec>
		    || (transit != NULL)) {
    3c34:	2d00      	cmp	r5, #0
    3c36:	f47f aef9 	bne.w	3a2c <process_event+0xf8>
    3c3a:	e72a      	b.n	3a92 <process_event+0x15e>
    3c3c:	00010198 	.word	0x00010198
    3c40:	000101e4 	.word	0x000101e4
    3c44:	000100e4 	.word	0x000100e4
    3c48:	000101f4 	.word	0x000101f4
    3c4c:	00003d09 	.word	0x00003d09
    3c50:	00010208 	.word	0x00010208
    3c54:	00010214 	.word	0x00010214
    3c58:	00010238 	.word	0x00010238
    3c5c:	00010250 	.word	0x00010250
    3c60:	00010268 	.word	0x00010268
    3c64:	00010278 	.word	0x00010278
    3c68:	000107a0 	.word	0x000107a0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3c6c:	f8df b080 	ldr.w	fp, [pc, #128]	; 3cf0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x258>
    3c70:	23b9      	movs	r3, #185	; 0xb9
    3c72:	465a      	mov	r2, fp
    3c74:	491f      	ldr	r1, [pc, #124]	; (3cf4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x25c>)
    3c76:	4820      	ldr	r0, [pc, #128]	; (3cf8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x260>)
    3c78:	f00a fc99 	bl	e5ae <assert_print>
    3c7c:	4651      	mov	r1, sl
    3c7e:	481f      	ldr	r0, [pc, #124]	; (3cfc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x264>)
    3c80:	f00a fc95 	bl	e5ae <assert_print>
    3c84:	21b9      	movs	r1, #185	; 0xb9
    3c86:	4658      	mov	r0, fp
    3c88:	f00a fc8a 	bl	e5a0 <assert_post_action>
    3c8c:	e6d9      	b.n	3a42 <process_event+0x10e>
				notify_monitors(mgr, state, res);
    3c8e:	464a      	mov	r2, r9
    3c90:	4641      	mov	r1, r8
    3c92:	4620      	mov	r0, r4
    3c94:	f00a fb98 	bl	e3c8 <notify_monitors>
    3c98:	e6da      	b.n	3a50 <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3c9a:	4d15      	ldr	r5, [pc, #84]	; (3cf0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x258>)
    3c9c:	238e      	movs	r3, #142	; 0x8e
    3c9e:	462a      	mov	r2, r5
    3ca0:	4917      	ldr	r1, [pc, #92]	; (3d00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x268>)
    3ca2:	4815      	ldr	r0, [pc, #84]	; (3cf8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x260>)
    3ca4:	f00a fc83 	bl	e5ae <assert_print>
    3ca8:	4651      	mov	r1, sl
    3caa:	4816      	ldr	r0, [pc, #88]	; (3d04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26c>)
    3cac:	f00a fc7f 	bl	e5ae <assert_print>
    3cb0:	218e      	movs	r1, #142	; 0x8e
    3cb2:	4628      	mov	r0, r5
    3cb4:	f00a fc74 	bl	e5a0 <assert_post_action>
    3cb8:	e6e4      	b.n	3a84 <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    3cba:	f013 0f20 	tst.w	r3, #32
    3cbe:	d004      	beq.n	3cca <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x232>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    3cc0:	f023 0320 	bic.w	r3, r3, #32
    3cc4:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    3cc6:	2502      	movs	r5, #2
    3cc8:	e6ec      	b.n	3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
		evt = EVT_NOP;
    3cca:	2500      	movs	r5, #0
    3ccc:	e6ea      	b.n	3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3cce:	4d08      	ldr	r5, [pc, #32]	; (3cf0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x258>)
    3cd0:	23b9      	movs	r3, #185	; 0xb9
    3cd2:	462a      	mov	r2, r5
    3cd4:	4907      	ldr	r1, [pc, #28]	; (3cf4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x25c>)
    3cd6:	4808      	ldr	r0, [pc, #32]	; (3cf8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x260>)
    3cd8:	f00a fc69 	bl	e5ae <assert_print>
    3cdc:	4621      	mov	r1, r4
    3cde:	4807      	ldr	r0, [pc, #28]	; (3cfc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x264>)
    3ce0:	f00a fc65 	bl	e5ae <assert_print>
    3ce4:	21b9      	movs	r1, #185	; 0xb9
    3ce6:	4628      	mov	r0, r5
    3ce8:	f00a fc5a 	bl	e5a0 <assert_post_action>
    3cec:	e653      	b.n	3996 <process_event+0x62>
    3cee:	bf00      	nop
    3cf0:	00010290 	.word	0x00010290
    3cf4:	000102c0 	.word	0x000102c0
    3cf8:	000100e4 	.word	0x000100e4
    3cfc:	000102d8 	.word	0x000102d8
    3d00:	000102f0 	.word	0x000102f0
    3d04:	00010308 	.word	0x00010308

00003d08 <transition_complete>:
{
    3d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d0c:	4604      	mov	r4, r0
    3d0e:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    3d10:	f100 0614 	add.w	r6, r0, #20
    3d14:	f04f 0320 	mov.w	r3, #32
    3d18:	f3ef 8711 	mrs	r7, BASEPRI
    3d1c:	f383 8812 	msr	BASEPRI_MAX, r3
    3d20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3d24:	4630      	mov	r0, r6
    3d26:	f006 f9dd 	bl	a0e4 <z_spin_lock_valid>
    3d2a:	b150      	cbz	r0, 3d42 <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    3d2c:	4630      	mov	r0, r6
    3d2e:	f006 f9f9 	bl	a124 <z_spin_lock_set_owner>
	mgr->last_res = res;
    3d32:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    3d34:	463a      	mov	r2, r7
    3d36:	2101      	movs	r1, #1
    3d38:	4620      	mov	r0, r4
    3d3a:	f7ff fdfb 	bl	3934 <process_event>
}
    3d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3d42:	f8df 8020 	ldr.w	r8, [pc, #32]	; 3d64 <transition_complete+0x5c>
    3d46:	238e      	movs	r3, #142	; 0x8e
    3d48:	4642      	mov	r2, r8
    3d4a:	4907      	ldr	r1, [pc, #28]	; (3d68 <transition_complete+0x60>)
    3d4c:	4807      	ldr	r0, [pc, #28]	; (3d6c <transition_complete+0x64>)
    3d4e:	f00a fc2e 	bl	e5ae <assert_print>
    3d52:	4631      	mov	r1, r6
    3d54:	4806      	ldr	r0, [pc, #24]	; (3d70 <transition_complete+0x68>)
    3d56:	f00a fc2a 	bl	e5ae <assert_print>
    3d5a:	218e      	movs	r1, #142	; 0x8e
    3d5c:	4640      	mov	r0, r8
    3d5e:	f00a fc1f 	bl	e5a0 <assert_post_action>
    3d62:	e7e3      	b.n	3d2c <transition_complete+0x24>
    3d64:	00010290 	.word	0x00010290
    3d68:	000102f0 	.word	0x000102f0
    3d6c:	000100e4 	.word	0x000100e4
    3d70:	00010308 	.word	0x00010308

00003d74 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    3d74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d78:	4604      	mov	r4, r0
    3d7a:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    3d7c:	f00a fb5c 	bl	e438 <validate_args>

	if (rv < 0) {
    3d80:	1e06      	subs	r6, r0, #0
    3d82:	db58      	blt.n	3e36 <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    3d84:	f104 0714 	add.w	r7, r4, #20
    3d88:	f04f 0320 	mov.w	r3, #32
    3d8c:	f3ef 8911 	mrs	r9, BASEPRI
    3d90:	f383 8812 	msr	BASEPRI_MAX, r3
    3d94:	f3bf 8f6f 	isb	sy
    3d98:	4638      	mov	r0, r7
    3d9a:	f006 f9a3 	bl	a0e4 <z_spin_lock_valid>
    3d9e:	b1e8      	cbz	r0, 3ddc <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    3da0:	4638      	mov	r0, r7
    3da2:	f006 f9bf 	bl	a124 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3da6:	8ba5      	ldrh	r5, [r4, #28]
    3da8:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    3dac:	8be3      	ldrh	r3, [r4, #30]
    3dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3db2:	4293      	cmp	r3, r2
    3db4:	d056      	beq.n	3e64 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    3db6:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    3db8:	2d02      	cmp	r5, #2
    3dba:	d01f      	beq.n	3dfc <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    3dbc:	b32d      	cbz	r5, 3e0a <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
    3dbe:	2d04      	cmp	r5, #4
    3dc0:	d023      	beq.n	3e0a <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
    3dc2:	2d06      	cmp	r5, #6
    3dc4:	d021      	beq.n	3e0a <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    3dc6:	2d05      	cmp	r5, #5
    3dc8:	d053      	beq.n	3e72 <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    3dca:	2d01      	cmp	r5, #1
    3dcc:	d136      	bne.n	3e3c <onoff_request+0xc8>
		rv = -EIO;
    3dce:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    3dd2:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    3dd6:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    3dd8:	4652      	mov	r2, sl
    3dda:	e01c      	b.n	3e16 <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3ddc:	4d3c      	ldr	r5, [pc, #240]	; (3ed0 <onoff_request+0x15c>)
    3dde:	238e      	movs	r3, #142	; 0x8e
    3de0:	462a      	mov	r2, r5
    3de2:	493c      	ldr	r1, [pc, #240]	; (3ed4 <onoff_request+0x160>)
    3de4:	483c      	ldr	r0, [pc, #240]	; (3ed8 <onoff_request+0x164>)
    3de6:	f00a fbe2 	bl	e5ae <assert_print>
    3dea:	4639      	mov	r1, r7
    3dec:	483b      	ldr	r0, [pc, #236]	; (3edc <onoff_request+0x168>)
    3dee:	f00a fbde 	bl	e5ae <assert_print>
    3df2:	218e      	movs	r1, #142	; 0x8e
    3df4:	4628      	mov	r0, r5
    3df6:	f00a fbd3 	bl	e5a0 <assert_post_action>
    3dfa:	e7d1      	b.n	3da0 <onoff_request+0x2c>
		mgr->refs += 1U;
    3dfc:	3301      	adds	r3, #1
    3dfe:	83e3      	strh	r3, [r4, #30]
		notify = true;
    3e00:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    3e04:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    3e06:	461a      	mov	r2, r3
    3e08:	e005      	b.n	3e16 <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
    3e0a:	fab5 f385 	clz	r3, r5
    3e0e:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    3e10:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    3e14:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    3e16:	b142      	cbz	r2, 3e2a <onoff_request+0xb6>
	parent->next = child;
    3e18:	2200      	movs	r2, #0
    3e1a:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    3e1e:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    3e20:	b372      	cbz	r2, 3e80 <onoff_request+0x10c>
	parent->next = child;
    3e22:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    3e26:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    3e2a:	b373      	cbz	r3, 3e8a <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
    3e2c:	464a      	mov	r2, r9
    3e2e:	2102      	movs	r1, #2
    3e30:	4620      	mov	r0, r4
    3e32:	f7ff fd7f 	bl	3934 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    3e36:	4630      	mov	r0, r6
    3e38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    3e3c:	4e28      	ldr	r6, [pc, #160]	; (3ee0 <onoff_request+0x16c>)
    3e3e:	f240 13c9 	movw	r3, #457	; 0x1c9
    3e42:	4632      	mov	r2, r6
    3e44:	4927      	ldr	r1, [pc, #156]	; (3ee4 <onoff_request+0x170>)
    3e46:	4824      	ldr	r0, [pc, #144]	; (3ed8 <onoff_request+0x164>)
    3e48:	f00a fbb1 	bl	e5ae <assert_print>
    3e4c:	f240 11c9 	movw	r1, #457	; 0x1c9
    3e50:	4630      	mov	r0, r6
    3e52:	f00a fba5 	bl	e5a0 <assert_post_action>
		rv = -EIO;
    3e56:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    3e5a:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    3e5e:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    3e60:	4652      	mov	r2, sl
    3e62:	e7d8      	b.n	3e16 <onoff_request+0xa2>
		rv = -EAGAIN;
    3e64:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    3e68:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    3e6c:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    3e6e:	4652      	mov	r2, sl
    3e70:	e7d1      	b.n	3e16 <onoff_request+0xa2>
		rv = -ENOTSUP;
    3e72:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    3e76:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    3e7a:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    3e7c:	4652      	mov	r2, sl
    3e7e:	e7ca      	b.n	3e16 <onoff_request+0xa2>
    3e80:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    3e84:	f8c4 8000 	str.w	r8, [r4]
}
    3e88:	e7cf      	b.n	3e2a <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3e8a:	4638      	mov	r0, r7
    3e8c:	f006 f93a 	bl	a104 <z_spin_unlock_valid>
    3e90:	b168      	cbz	r0, 3eae <onoff_request+0x13a>
	__asm__ volatile(
    3e92:	f389 8811 	msr	BASEPRI, r9
    3e96:	f3bf 8f6f 	isb	sy
		if (notify) {
    3e9a:	f1ba 0f00 	cmp.w	sl, #0
    3e9e:	d0ca      	beq.n	3e36 <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
    3ea0:	2300      	movs	r3, #0
    3ea2:	462a      	mov	r2, r5
    3ea4:	4641      	mov	r1, r8
    3ea6:	4620      	mov	r0, r4
    3ea8:	f00a fadc 	bl	e464 <notify_one>
    3eac:	e7c3      	b.n	3e36 <onoff_request+0xc2>
    3eae:	f8df b020 	ldr.w	fp, [pc, #32]	; 3ed0 <onoff_request+0x15c>
    3eb2:	23b9      	movs	r3, #185	; 0xb9
    3eb4:	465a      	mov	r2, fp
    3eb6:	490c      	ldr	r1, [pc, #48]	; (3ee8 <onoff_request+0x174>)
    3eb8:	4807      	ldr	r0, [pc, #28]	; (3ed8 <onoff_request+0x164>)
    3eba:	f00a fb78 	bl	e5ae <assert_print>
    3ebe:	4639      	mov	r1, r7
    3ec0:	480a      	ldr	r0, [pc, #40]	; (3eec <onoff_request+0x178>)
    3ec2:	f00a fb74 	bl	e5ae <assert_print>
    3ec6:	21b9      	movs	r1, #185	; 0xb9
    3ec8:	4658      	mov	r0, fp
    3eca:	f00a fb69 	bl	e5a0 <assert_post_action>
    3ece:	e7e0      	b.n	3e92 <onoff_request+0x11e>
    3ed0:	00010290 	.word	0x00010290
    3ed4:	000102f0 	.word	0x000102f0
    3ed8:	000100e4 	.word	0x000100e4
    3edc:	00010308 	.word	0x00010308
    3ee0:	00010198 	.word	0x00010198
    3ee4:	00010278 	.word	0x00010278
    3ee8:	000102c0 	.word	0x000102c0
    3eec:	000102d8 	.word	0x000102d8

00003ef0 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    3ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ef4:	4606      	mov	r6, r0
    3ef6:	460d      	mov	r5, r1
    3ef8:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    3efa:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    3efe:	d222      	bcs.n	3f46 <sys_heap_init+0x56>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    3f00:	2c04      	cmp	r4, #4
    3f02:	d931      	bls.n	3f68 <sys_heap_init+0x78>
	bytes -= heap_footer_bytes(bytes);
    3f04:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    3f06:	1dec      	adds	r4, r5, #7
    3f08:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    3f0c:	4415      	add	r5, r2
    3f0e:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    3f12:	1b2d      	subs	r5, r5, r4
    3f14:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    3f18:	2d17      	cmp	r5, #23
    3f1a:	d936      	bls.n	3f8a <sys_heap_init+0x9a>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    3f1c:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
    3f1e:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
    3f22:	2300      	movs	r3, #0
    3f24:	60e3      	str	r3, [r4, #12]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    3f26:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    3f2a:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    3f2e:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
    3f32:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    3f34:	3607      	adds	r6, #7
    3f36:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    3f3a:	f109 0301 	add.w	r3, r9, #1
    3f3e:	4543      	cmp	r3, r8
    3f40:	d834      	bhi.n	3fac <sys_heap_init+0xbc>
{
    3f42:	2300      	movs	r3, #0
    3f44:	e049      	b.n	3fda <sys_heap_init+0xea>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    3f46:	4f38      	ldr	r7, [pc, #224]	; (4028 <sys_heap_init+0x138>)
    3f48:	f240 13e3 	movw	r3, #483	; 0x1e3
    3f4c:	463a      	mov	r2, r7
    3f4e:	4937      	ldr	r1, [pc, #220]	; (402c <sys_heap_init+0x13c>)
    3f50:	4837      	ldr	r0, [pc, #220]	; (4030 <sys_heap_init+0x140>)
    3f52:	f00a fb2c 	bl	e5ae <assert_print>
    3f56:	4837      	ldr	r0, [pc, #220]	; (4034 <sys_heap_init+0x144>)
    3f58:	f00a fb29 	bl	e5ae <assert_print>
    3f5c:	f240 11e3 	movw	r1, #483	; 0x1e3
    3f60:	4638      	mov	r0, r7
    3f62:	f00a fb1d 	bl	e5a0 <assert_post_action>
    3f66:	e7cb      	b.n	3f00 <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    3f68:	4f2f      	ldr	r7, [pc, #188]	; (4028 <sys_heap_init+0x138>)
    3f6a:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    3f6e:	463a      	mov	r2, r7
    3f70:	4931      	ldr	r1, [pc, #196]	; (4038 <sys_heap_init+0x148>)
    3f72:	482f      	ldr	r0, [pc, #188]	; (4030 <sys_heap_init+0x140>)
    3f74:	f00a fb1b 	bl	e5ae <assert_print>
    3f78:	4830      	ldr	r0, [pc, #192]	; (403c <sys_heap_init+0x14c>)
    3f7a:	f00a fb18 	bl	e5ae <assert_print>
    3f7e:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    3f82:	4638      	mov	r0, r7
    3f84:	f00a fb0c 	bl	e5a0 <assert_post_action>
    3f88:	e7bc      	b.n	3f04 <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    3f8a:	4f27      	ldr	r7, [pc, #156]	; (4028 <sys_heap_init+0x138>)
    3f8c:	f240 13f3 	movw	r3, #499	; 0x1f3
    3f90:	463a      	mov	r2, r7
    3f92:	492b      	ldr	r1, [pc, #172]	; (4040 <sys_heap_init+0x150>)
    3f94:	4826      	ldr	r0, [pc, #152]	; (4030 <sys_heap_init+0x140>)
    3f96:	f00a fb0a 	bl	e5ae <assert_print>
    3f9a:	4828      	ldr	r0, [pc, #160]	; (403c <sys_heap_init+0x14c>)
    3f9c:	f00a fb07 	bl	e5ae <assert_print>
    3fa0:	f240 11f3 	movw	r1, #499	; 0x1f3
    3fa4:	4638      	mov	r0, r7
    3fa6:	f00a fafb 	bl	e5a0 <assert_post_action>
    3faa:	e7b7      	b.n	3f1c <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    3fac:	f8df a078 	ldr.w	sl, [pc, #120]	; 4028 <sys_heap_init+0x138>
    3fb0:	f44f 7301 	mov.w	r3, #516	; 0x204
    3fb4:	4652      	mov	r2, sl
    3fb6:	4923      	ldr	r1, [pc, #140]	; (4044 <sys_heap_init+0x154>)
    3fb8:	481d      	ldr	r0, [pc, #116]	; (4030 <sys_heap_init+0x140>)
    3fba:	f00a faf8 	bl	e5ae <assert_print>
    3fbe:	481f      	ldr	r0, [pc, #124]	; (403c <sys_heap_init+0x14c>)
    3fc0:	f00a faf5 	bl	e5ae <assert_print>
    3fc4:	f44f 7101 	mov.w	r1, #516	; 0x204
    3fc8:	4650      	mov	r0, sl
    3fca:	f00a fae9 	bl	e5a0 <assert_post_action>
    3fce:	e7b8      	b.n	3f42 <sys_heap_init+0x52>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    3fd0:	1d1a      	adds	r2, r3, #4
    3fd2:	2100      	movs	r1, #0
    3fd4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    3fd8:	3301      	adds	r3, #1
    3fda:	42bb      	cmp	r3, r7
    3fdc:	dbf8      	blt.n	3fd0 <sys_heap_init+0xe0>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    3fde:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
    3fe2:	b29b      	uxth	r3, r3
    3fe4:	8063      	strh	r3, [r4, #2]
    3fe6:	2200      	movs	r2, #0
    3fe8:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    3fea:	f043 0301 	orr.w	r3, r3, #1
    3fee:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    3ff0:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    3ff4:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
    3ff8:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
    3ffc:	1cb3      	adds	r3, r6, #2
    3ffe:	52e1      	strh	r1, [r4, r3]
    4000:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
    4004:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
    4008:	1ca9      	adds	r1, r5, #2
    400a:	5262      	strh	r2, [r4, r1]
    400c:	4425      	add	r5, r4
    400e:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    4012:	886b      	ldrh	r3, [r5, #2]
    4014:	f043 0301 	orr.w	r3, r3, #1
    4018:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    401a:	4649      	mov	r1, r9
    401c:	4620      	mov	r0, r4
    401e:	f00a fa99 	bl	e554 <free_list_add>
}
    4022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4026:	bf00      	nop
    4028:	00010320 	.word	0x00010320
    402c:	000103f4 	.word	0x000103f4
    4030:	000100e4 	.word	0x000100e4
    4034:	0001040c 	.word	0x0001040c
    4038:	00010424 	.word	0x00010424
    403c:	00010448 	.word	0x00010448
    4040:	00010464 	.word	0x00010464
    4044:	00010490 	.word	0x00010490

00004048 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    4048:	4684      	mov	ip, r0
	const char *sp = *str;
    404a:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    404c:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    404e:	e005      	b.n	405c <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    4050:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4054:	3201      	adds	r2, #1
    4056:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    405a:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    405c:	7813      	ldrb	r3, [r2, #0]
    405e:	4904      	ldr	r1, [pc, #16]	; (4070 <extract_decimal+0x28>)
    4060:	5c59      	ldrb	r1, [r3, r1]
    4062:	f011 0f04 	tst.w	r1, #4
    4066:	d1f3      	bne.n	4050 <extract_decimal+0x8>
	}
	*str = sp;
    4068:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
    406c:	4770      	bx	lr
    406e:	bf00      	nop
    4070:	00011e49 	.word	0x00011e49

00004074 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    4074:	b570      	push	{r4, r5, r6, lr}
    4076:	b082      	sub	sp, #8
    4078:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    407a:	2300      	movs	r3, #0
    407c:	6003      	str	r3, [r0, #0]
    407e:	6043      	str	r3, [r0, #4]
    4080:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    4082:	784b      	ldrb	r3, [r1, #1]
    4084:	2b25      	cmp	r3, #37	; 0x25
    4086:	d002      	beq.n	408e <extract_conversion+0x1a>
    4088:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    408a:	2501      	movs	r5, #1
    408c:	e01f      	b.n	40ce <extract_conversion+0x5a>
		conv->specifier = *sp++;
    408e:	1c88      	adds	r0, r1, #2
    4090:	70e3      	strb	r3, [r4, #3]
		return sp;
    4092:	e145      	b.n	4320 <__data_size+0x153>
			conv->flag_dash = true;
    4094:	7823      	ldrb	r3, [r4, #0]
    4096:	f043 0304 	orr.w	r3, r3, #4
    409a:	7023      	strb	r3, [r4, #0]
		if (loop) {
    409c:	b1b5      	cbz	r5, 40cc <extract_conversion+0x58>
			++sp;
    409e:	3601      	adds	r6, #1
    40a0:	e014      	b.n	40cc <extract_conversion+0x58>
			conv->flag_plus = true;
    40a2:	7823      	ldrb	r3, [r4, #0]
    40a4:	f043 0308 	orr.w	r3, r3, #8
    40a8:	7023      	strb	r3, [r4, #0]
			break;
    40aa:	e7f7      	b.n	409c <extract_conversion+0x28>
			conv->flag_space = true;
    40ac:	7823      	ldrb	r3, [r4, #0]
    40ae:	f043 0310 	orr.w	r3, r3, #16
    40b2:	7023      	strb	r3, [r4, #0]
			break;
    40b4:	e7f2      	b.n	409c <extract_conversion+0x28>
			conv->flag_hash = true;
    40b6:	7823      	ldrb	r3, [r4, #0]
    40b8:	f043 0320 	orr.w	r3, r3, #32
    40bc:	7023      	strb	r3, [r4, #0]
			break;
    40be:	e7ed      	b.n	409c <extract_conversion+0x28>
			conv->flag_zero = true;
    40c0:	7823      	ldrb	r3, [r4, #0]
    40c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    40c6:	7023      	strb	r3, [r4, #0]
			break;
    40c8:	e7e8      	b.n	409c <extract_conversion+0x28>
		switch (*sp) {
    40ca:	2500      	movs	r5, #0
	} while (loop);
    40cc:	b345      	cbz	r5, 4120 <extract_conversion+0xac>
		switch (*sp) {
    40ce:	7833      	ldrb	r3, [r6, #0]
    40d0:	3b20      	subs	r3, #32
    40d2:	2b10      	cmp	r3, #16
    40d4:	d8f9      	bhi.n	40ca <extract_conversion+0x56>
    40d6:	a201      	add	r2, pc, #4	; (adr r2, 40dc <extract_conversion+0x68>)
    40d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    40dc:	000040ad 	.word	0x000040ad
    40e0:	000040cb 	.word	0x000040cb
    40e4:	000040cb 	.word	0x000040cb
    40e8:	000040b7 	.word	0x000040b7
    40ec:	000040cb 	.word	0x000040cb
    40f0:	000040cb 	.word	0x000040cb
    40f4:	000040cb 	.word	0x000040cb
    40f8:	000040cb 	.word	0x000040cb
    40fc:	000040cb 	.word	0x000040cb
    4100:	000040cb 	.word	0x000040cb
    4104:	000040cb 	.word	0x000040cb
    4108:	000040a3 	.word	0x000040a3
    410c:	000040cb 	.word	0x000040cb
    4110:	00004095 	.word	0x00004095
    4114:	000040cb 	.word	0x000040cb
    4118:	000040cb 	.word	0x000040cb
    411c:	000040c1 	.word	0x000040c1
	if (conv->flag_zero && conv->flag_dash) {
    4120:	7823      	ldrb	r3, [r4, #0]
    4122:	f003 0344 	and.w	r3, r3, #68	; 0x44
    4126:	2b44      	cmp	r3, #68	; 0x44
    4128:	d05f      	beq.n	41ea <__data_size+0x1d>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    412a:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    412c:	7823      	ldrb	r3, [r4, #0]
    412e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4132:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    4134:	7833      	ldrb	r3, [r6, #0]
    4136:	2b2a      	cmp	r3, #42	; 0x2a
    4138:	d05c      	beq.n	41f4 <__data_size+0x27>
	size_t width = extract_decimal(&sp);
    413a:	a801      	add	r0, sp, #4
    413c:	f7ff ff84 	bl	4048 <extract_decimal>
	if (sp != wp) {
    4140:	9b01      	ldr	r3, [sp, #4]
    4142:	429e      	cmp	r6, r3
    4144:	d00f      	beq.n	4166 <extract_conversion+0xf2>
		conv->width_present = true;
    4146:	7823      	ldrb	r3, [r4, #0]
    4148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    414c:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    414e:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    4150:	b2db      	uxtb	r3, r3
    4152:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    4156:	2800      	cmp	r0, #0
    4158:	db54      	blt.n	4204 <__data_size+0x37>
    415a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    415c:	4313      	orrs	r3, r2
    415e:	7822      	ldrb	r2, [r4, #0]
    4160:	f363 0241 	bfi	r2, r3, #1, #1
    4164:	7022      	strb	r2, [r4, #0]
	return sp;
    4166:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    4168:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    416a:	781b      	ldrb	r3, [r3, #0]
    416c:	2b2e      	cmp	r3, #46	; 0x2e
    416e:	bf14      	ite	ne
    4170:	2300      	movne	r3, #0
    4172:	2301      	moveq	r3, #1
    4174:	7862      	ldrb	r2, [r4, #1]
    4176:	f363 0241 	bfi	r2, r3, #1, #1
    417a:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    417c:	2b00      	cmp	r3, #0
    417e:	d043      	beq.n	4208 <__data_size+0x3b>
	++sp;
    4180:	9b01      	ldr	r3, [sp, #4]
    4182:	1c5a      	adds	r2, r3, #1
    4184:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    4186:	785b      	ldrb	r3, [r3, #1]
    4188:	2b2a      	cmp	r3, #42	; 0x2a
    418a:	d03f      	beq.n	420c <__data_size+0x3f>
	size_t prec = extract_decimal(&sp);
    418c:	a801      	add	r0, sp, #4
    418e:	f7ff ff5b 	bl	4048 <extract_decimal>
	conv->prec_value = prec;
    4192:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    4194:	7823      	ldrb	r3, [r4, #0]
    4196:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    419a:	2800      	cmp	r0, #0
    419c:	db3e      	blt.n	421c <__data_size+0x4f>
    419e:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    41a0:	4313      	orrs	r3, r2
    41a2:	7822      	ldrb	r2, [r4, #0]
    41a4:	f363 0241 	bfi	r2, r3, #1, #1
    41a8:	7022      	strb	r2, [r4, #0]
	return sp;
    41aa:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    41ac:	7803      	ldrb	r3, [r0, #0]
    41ae:	3b4c      	subs	r3, #76	; 0x4c
    41b0:	2b2e      	cmp	r3, #46	; 0x2e
    41b2:	f200 809d 	bhi.w	42f0 <__data_size+0x123>
    41b6:	e8df f003 	tbb	[pc, r3]
    41ba:	9b90      	.short	0x9b90
    41bc:	9b9b9b9b 	.word	0x9b9b9b9b
    41c0:	9b9b9b9b 	.word	0x9b9b9b9b
    41c4:	9b9b9b9b 	.word	0x9b9b9b9b
    41c8:	9b9b9b9b 	.word	0x9b9b9b9b
    41cc:	9b9b9b9b 	.word	0x9b9b9b9b
    41d0:	9b9b9b9b 	.word	0x9b9b9b9b
    41d4:	9b339b9b 	.word	0x9b339b9b
    41d8:	9b459b57 	.word	0x9b459b57
    41dc:	9b9b9b9b 	.word	0x9b9b9b9b
    41e0:	9b899b9b 	.word	0x9b899b9b
    41e4:	9b9b9b9b 	.word	0x9b9b9b9b
    41e8:	82          	.byte	0x82
    41e9:	00          	.byte	0x00
		conv->flag_zero = false;
    41ea:	7823      	ldrb	r3, [r4, #0]
    41ec:	f36f 1386 	bfc	r3, #6, #1
    41f0:	7023      	strb	r3, [r4, #0]
    41f2:	e79a      	b.n	412a <extract_conversion+0xb6>
		conv->width_star = true;
    41f4:	7863      	ldrb	r3, [r4, #1]
    41f6:	f043 0301 	orr.w	r3, r3, #1
    41fa:	7063      	strb	r3, [r4, #1]
		return ++sp;
    41fc:	4633      	mov	r3, r6
    41fe:	3301      	adds	r3, #1
    4200:	9301      	str	r3, [sp, #4]
    4202:	e7b1      	b.n	4168 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    4204:	2201      	movs	r2, #1
    4206:	e7a9      	b.n	415c <extract_conversion+0xe8>
		return sp;
    4208:	9801      	ldr	r0, [sp, #4]
    420a:	e7cf      	b.n	41ac <extract_conversion+0x138>
		conv->prec_star = true;
    420c:	7863      	ldrb	r3, [r4, #1]
    420e:	f043 0304 	orr.w	r3, r3, #4
    4212:	7063      	strb	r3, [r4, #1]
		return ++sp;
    4214:	4610      	mov	r0, r2
    4216:	3001      	adds	r0, #1
    4218:	9001      	str	r0, [sp, #4]
    421a:	e7c7      	b.n	41ac <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    421c:	2201      	movs	r2, #1
    421e:	e7bf      	b.n	41a0 <extract_conversion+0x12c>
		if (*++sp == 'h') {
    4220:	1c42      	adds	r2, r0, #1
    4222:	7843      	ldrb	r3, [r0, #1]
    4224:	2b68      	cmp	r3, #104	; 0x68
    4226:	d006      	beq.n	4236 <__data_size+0x69>
			conv->length_mod = LENGTH_H;
    4228:	7863      	ldrb	r3, [r4, #1]
    422a:	2102      	movs	r1, #2
    422c:	f361 03c6 	bfi	r3, r1, #3, #4
    4230:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    4232:	4610      	mov	r0, r2
    4234:	e01e      	b.n	4274 <__data_size+0xa7>
			conv->length_mod = LENGTH_HH;
    4236:	7863      	ldrb	r3, [r4, #1]
    4238:	2201      	movs	r2, #1
    423a:	f362 03c6 	bfi	r3, r2, #3, #4
    423e:	7063      	strb	r3, [r4, #1]
			++sp;
    4240:	3002      	adds	r0, #2
    4242:	e017      	b.n	4274 <__data_size+0xa7>
		if (*++sp == 'l') {
    4244:	1c42      	adds	r2, r0, #1
    4246:	7843      	ldrb	r3, [r0, #1]
    4248:	2b6c      	cmp	r3, #108	; 0x6c
    424a:	d006      	beq.n	425a <__data_size+0x8d>
			conv->length_mod = LENGTH_L;
    424c:	7863      	ldrb	r3, [r4, #1]
    424e:	2103      	movs	r1, #3
    4250:	f361 03c6 	bfi	r3, r1, #3, #4
    4254:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    4256:	4610      	mov	r0, r2
    4258:	e00c      	b.n	4274 <__data_size+0xa7>
			conv->length_mod = LENGTH_LL;
    425a:	7863      	ldrb	r3, [r4, #1]
    425c:	2204      	movs	r2, #4
    425e:	f362 03c6 	bfi	r3, r2, #3, #4
    4262:	7063      	strb	r3, [r4, #1]
			++sp;
    4264:	3002      	adds	r0, #2
    4266:	e005      	b.n	4274 <__data_size+0xa7>
		conv->length_mod = LENGTH_J;
    4268:	7863      	ldrb	r3, [r4, #1]
    426a:	2205      	movs	r2, #5
    426c:	f362 03c6 	bfi	r3, r2, #3, #4
    4270:	7063      	strb	r3, [r4, #1]
		++sp;
    4272:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    4274:	f810 3b01 	ldrb.w	r3, [r0], #1
    4278:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    427a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    427e:	2a37      	cmp	r2, #55	; 0x37
    4280:	d87d      	bhi.n	437e <__data_size+0x1b1>
    4282:	e8df f002 	tbb	[pc, r2]
    4286:	7c5e      	.short	0x7c5e
    4288:	5e5e7c7c 	.word	0x5e5e7c7c
    428c:	7c7c7c5e 	.word	0x7c7c7c5e
    4290:	7c7c7c7c 	.word	0x7c7c7c7c
    4294:	7c7c7c7c 	.word	0x7c7c7c7c
    4298:	7c7c7c7c 	.word	0x7c7c7c7c
    429c:	7c7c4f7c 	.word	0x7c7c4f7c
    42a0:	7c7c7c7c 	.word	0x7c7c7c7c
    42a4:	7c5e7c7c 	.word	0x7c5e7c7c
    42a8:	5e5e3a4f 	.word	0x5e5e3a4f
    42ac:	7c3a7c5e 	.word	0x7c3a7c5e
    42b0:	657c7c7c 	.word	0x657c7c7c
    42b4:	7c7c714f 	.word	0x7c7c714f
    42b8:	7c4f7c71 	.word	0x7c4f7c71
    42bc:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    42be:	7863      	ldrb	r3, [r4, #1]
    42c0:	2206      	movs	r2, #6
    42c2:	f362 03c6 	bfi	r3, r2, #3, #4
    42c6:	7063      	strb	r3, [r4, #1]
		++sp;
    42c8:	3001      	adds	r0, #1
		break;
    42ca:	e7d3      	b.n	4274 <__data_size+0xa7>
		conv->length_mod = LENGTH_T;
    42cc:	7863      	ldrb	r3, [r4, #1]
    42ce:	2207      	movs	r2, #7
    42d0:	f362 03c6 	bfi	r3, r2, #3, #4
    42d4:	7063      	strb	r3, [r4, #1]
		++sp;
    42d6:	3001      	adds	r0, #1
		break;
    42d8:	e7cc      	b.n	4274 <__data_size+0xa7>
		conv->length_mod = LENGTH_UPPER_L;
    42da:	7863      	ldrb	r3, [r4, #1]
    42dc:	2208      	movs	r2, #8
    42de:	f362 03c6 	bfi	r3, r2, #3, #4
    42e2:	7063      	strb	r3, [r4, #1]
		++sp;
    42e4:	3001      	adds	r0, #1
		conv->unsupported = true;
    42e6:	7823      	ldrb	r3, [r4, #0]
    42e8:	f043 0302 	orr.w	r3, r3, #2
    42ec:	7023      	strb	r3, [r4, #0]
		break;
    42ee:	e7c1      	b.n	4274 <__data_size+0xa7>
		conv->length_mod = LENGTH_NONE;
    42f0:	7863      	ldrb	r3, [r4, #1]
    42f2:	f36f 03c6 	bfc	r3, #3, #4
    42f6:	7063      	strb	r3, [r4, #1]
		break;
    42f8:	e7bc      	b.n	4274 <__data_size+0xa7>
		conv->specifier_cat = SPECIFIER_SINT;
    42fa:	78a2      	ldrb	r2, [r4, #2]
    42fc:	2101      	movs	r1, #1
    42fe:	f361 0202 	bfi	r2, r1, #0, #3
    4302:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    4304:	7862      	ldrb	r2, [r4, #1]
    4306:	f002 0278 	and.w	r2, r2, #120	; 0x78
    430a:	2a40      	cmp	r2, #64	; 0x40
    430c:	d010      	beq.n	4330 <__data_size+0x163>
		if (conv->specifier == 'c') {
    430e:	2b63      	cmp	r3, #99	; 0x63
    4310:	d013      	beq.n	433a <__data_size+0x16d>
	conv->unsupported |= unsupported;
    4312:	7823      	ldrb	r3, [r4, #0]
    4314:	f3c3 0240 	ubfx	r2, r3, #1, #1
    4318:	4315      	orrs	r5, r2
    431a:	f365 0341 	bfi	r3, r5, #1, #1
    431e:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    4320:	b002      	add	sp, #8
    4322:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    4324:	78a2      	ldrb	r2, [r4, #2]
    4326:	2102      	movs	r1, #2
    4328:	f361 0202 	bfi	r2, r1, #0, #3
    432c:	70a2      	strb	r2, [r4, #2]
    432e:	e7e9      	b.n	4304 <__data_size+0x137>
			conv->invalid = true;
    4330:	7821      	ldrb	r1, [r4, #0]
    4332:	f041 0101 	orr.w	r1, r1, #1
    4336:	7021      	strb	r1, [r4, #0]
    4338:	e7e9      	b.n	430e <__data_size+0x141>
			unsupported = (conv->length_mod != LENGTH_NONE);
    433a:	1e15      	subs	r5, r2, #0
    433c:	bf18      	it	ne
    433e:	2501      	movne	r5, #1
    4340:	e7e7      	b.n	4312 <__data_size+0x145>
		conv->specifier_cat = SPECIFIER_FP;
    4342:	78a3      	ldrb	r3, [r4, #2]
    4344:	2204      	movs	r2, #4
    4346:	f362 0302 	bfi	r3, r2, #0, #3
    434a:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    434c:	2501      	movs	r5, #1
			break;
    434e:	e7e0      	b.n	4312 <__data_size+0x145>
		conv->specifier_cat = SPECIFIER_PTR;
    4350:	78a3      	ldrb	r3, [r4, #2]
    4352:	2203      	movs	r2, #3
    4354:	f362 0302 	bfi	r3, r2, #0, #3
    4358:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    435a:	7863      	ldrb	r3, [r4, #1]
    435c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    4360:	2b40      	cmp	r3, #64	; 0x40
    4362:	d1d6      	bne.n	4312 <__data_size+0x145>
			unsupported = true;
    4364:	2501      	movs	r5, #1
    4366:	e7d4      	b.n	4312 <__data_size+0x145>
		conv->specifier_cat = SPECIFIER_PTR;
    4368:	78a3      	ldrb	r3, [r4, #2]
    436a:	2203      	movs	r2, #3
    436c:	f362 0302 	bfi	r3, r2, #0, #3
    4370:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    4372:	7863      	ldrb	r3, [r4, #1]
    4374:	f013 0f78 	tst.w	r3, #120	; 0x78
    4378:	d0cb      	beq.n	4312 <__data_size+0x145>
			unsupported = true;
    437a:	2501      	movs	r5, #1
    437c:	e7c9      	b.n	4312 <__data_size+0x145>
		conv->invalid = true;
    437e:	7823      	ldrb	r3, [r4, #0]
    4380:	f043 0301 	orr.w	r3, r3, #1
    4384:	7023      	strb	r3, [r4, #0]
		break;
    4386:	e7c4      	b.n	4312 <__data_size+0x145>

00004388 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    4388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    438c:	b083      	sub	sp, #12
    438e:	4604      	mov	r4, r0
    4390:	460d      	mov	r5, r1
    4392:	9201      	str	r2, [sp, #4]
    4394:	469a      	mov	sl, r3
    4396:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    4398:	78d3      	ldrb	r3, [r2, #3]
    439a:	4a32      	ldr	r2, [pc, #200]	; (4464 <encode_uint+0xdc>)
    439c:	f813 b002 	ldrb.w	fp, [r3, r2]
    43a0:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    43a4:	2b6f      	cmp	r3, #111	; 0x6f
    43a6:	d00f      	beq.n	43c8 <encode_uint+0x40>
    43a8:	d906      	bls.n	43b8 <encode_uint+0x30>
    43aa:	2b70      	cmp	r3, #112	; 0x70
    43ac:	d00f      	beq.n	43ce <encode_uint+0x46>
    43ae:	2b78      	cmp	r3, #120	; 0x78
    43b0:	d110      	bne.n	43d4 <encode_uint+0x4c>
		return 16;
    43b2:	f04f 0910 	mov.w	r9, #16
    43b6:	e023      	b.n	4400 <encode_uint+0x78>
	switch (specifier) {
    43b8:	2b58      	cmp	r3, #88	; 0x58
    43ba:	d002      	beq.n	43c2 <encode_uint+0x3a>
    43bc:	f04f 090a 	mov.w	r9, #10
    43c0:	e01e      	b.n	4400 <encode_uint+0x78>
		return 16;
    43c2:	f04f 0910 	mov.w	r9, #16
    43c6:	e01b      	b.n	4400 <encode_uint+0x78>
		return 8;
    43c8:	f04f 0908 	mov.w	r9, #8
    43cc:	e018      	b.n	4400 <encode_uint+0x78>
		return 16;
    43ce:	f04f 0910 	mov.w	r9, #16
    43d2:	e015      	b.n	4400 <encode_uint+0x78>
	switch (specifier) {
    43d4:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    43d8:	e012      	b.n	4400 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    43da:	b2d2      	uxtb	r2, r2
    43dc:	3230      	adds	r2, #48	; 0x30
    43de:	b2d2      	uxtb	r2, r2
    43e0:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    43e4:	463a      	mov	r2, r7
    43e6:	4643      	mov	r3, r8
    43e8:	4620      	mov	r0, r4
    43ea:	4629      	mov	r1, r5
    43ec:	f7fc faf6 	bl	9dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    43f0:	42bc      	cmp	r4, r7
    43f2:	f175 0300 	sbcs.w	r3, r5, #0
    43f6:	d319      	bcc.n	442c <encode_uint+0xa4>
    43f8:	4556      	cmp	r6, sl
    43fa:	d917      	bls.n	442c <encode_uint+0xa4>
		value /= radix;
    43fc:	4604      	mov	r4, r0
    43fe:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    4400:	f04f 0800 	mov.w	r8, #0
    4404:	464f      	mov	r7, r9
    4406:	464a      	mov	r2, r9
    4408:	4643      	mov	r3, r8
    440a:	4620      	mov	r0, r4
    440c:	4629      	mov	r1, r5
    440e:	f7fc fae5 	bl	9dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4412:	2a09      	cmp	r2, #9
    4414:	d9e1      	bls.n	43da <encode_uint+0x52>
    4416:	f1bb 0f01 	cmp.w	fp, #1
    441a:	d003      	beq.n	4424 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    441c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    441e:	3257      	adds	r2, #87	; 0x57
    4420:	b2d2      	uxtb	r2, r2
    4422:	e7dd      	b.n	43e0 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    4424:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4426:	3237      	adds	r2, #55	; 0x37
    4428:	b2d2      	uxtb	r2, r2
    442a:	e7d9      	b.n	43e0 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    442c:	9b01      	ldr	r3, [sp, #4]
    442e:	781b      	ldrb	r3, [r3, #0]
    4430:	f013 0f20 	tst.w	r3, #32
    4434:	d005      	beq.n	4442 <encode_uint+0xba>
		if (radix == 8) {
    4436:	f1b9 0f08 	cmp.w	r9, #8
    443a:	d006      	beq.n	444a <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    443c:	f1b9 0f10 	cmp.w	r9, #16
    4440:	d009      	beq.n	4456 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    4442:	4630      	mov	r0, r6
    4444:	b003      	add	sp, #12
    4446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    444a:	9a01      	ldr	r2, [sp, #4]
    444c:	7893      	ldrb	r3, [r2, #2]
    444e:	f043 0308 	orr.w	r3, r3, #8
    4452:	7093      	strb	r3, [r2, #2]
    4454:	e7f5      	b.n	4442 <encode_uint+0xba>
			conv->altform_0c = true;
    4456:	9a01      	ldr	r2, [sp, #4]
    4458:	7893      	ldrb	r3, [r2, #2]
    445a:	f043 0310 	orr.w	r3, r3, #16
    445e:	7093      	strb	r3, [r2, #2]
    4460:	e7ef      	b.n	4442 <encode_uint+0xba>
    4462:	bf00      	nop
    4464:	00011e49 	.word	0x00011e49

00004468 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    4468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    446c:	b091      	sub	sp, #68	; 0x44
    446e:	4606      	mov	r6, r0
    4470:	460d      	mov	r5, r1
    4472:	4691      	mov	r9, r2
    4474:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    4476:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    4478:	f899 0000 	ldrb.w	r0, [r9]
    447c:	2800      	cmp	r0, #0
    447e:	f000 82d5 	beq.w	4a2c <cbvprintf+0x5c4>
		if (*fp != '%') {
    4482:	2825      	cmp	r0, #37	; 0x25
    4484:	d008      	beq.n	4498 <cbvprintf+0x30>
			OUTC(*fp++);
    4486:	f109 0901 	add.w	r9, r9, #1
    448a:	4629      	mov	r1, r5
    448c:	47b0      	blx	r6
    448e:	2800      	cmp	r0, #0
    4490:	f2c0 82cd 	blt.w	4a2e <cbvprintf+0x5c6>
    4494:	3401      	adds	r4, #1
			continue;
    4496:	e7ef      	b.n	4478 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    4498:	2300      	movs	r3, #0
    449a:	9304      	str	r3, [sp, #16]
    449c:	9305      	str	r3, [sp, #20]
    449e:	9306      	str	r3, [sp, #24]
    44a0:	9307      	str	r3, [sp, #28]
    44a2:	9308      	str	r3, [sp, #32]
    44a4:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    44a6:	4649      	mov	r1, r9
    44a8:	a806      	add	r0, sp, #24
    44aa:	f7ff fde3 	bl	4074 <extract_conversion>
    44ae:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    44b0:	f89d 3019 	ldrb.w	r3, [sp, #25]
    44b4:	f013 0f01 	tst.w	r3, #1
    44b8:	f000 8097 	beq.w	45ea <cbvprintf+0x182>
			width = va_arg(ap, int);
    44bc:	9b03      	ldr	r3, [sp, #12]
    44be:	1d1a      	adds	r2, r3, #4
    44c0:	9203      	str	r2, [sp, #12]
    44c2:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    44c4:	2f00      	cmp	r7, #0
    44c6:	f2c0 8088 	blt.w	45da <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    44ca:	f89d 3019 	ldrb.w	r3, [sp, #25]
    44ce:	f013 0f04 	tst.w	r3, #4
    44d2:	f000 809c 	beq.w	460e <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    44d6:	9b03      	ldr	r3, [sp, #12]
    44d8:	1d1a      	adds	r2, r3, #4
    44da:	9203      	str	r2, [sp, #12]
    44dc:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    44e0:	f1ba 0f00 	cmp.w	sl, #0
    44e4:	f2c0 808a 	blt.w	45fc <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    44e8:	2300      	movs	r3, #0
    44ea:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    44ec:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    44ee:	f89d 301a 	ldrb.w	r3, [sp, #26]
    44f2:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    44f6:	f89d 1019 	ldrb.w	r1, [sp, #25]
    44fa:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    44fe:	2b01      	cmp	r3, #1
    4500:	f000 808e 	beq.w	4620 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    4504:	2b02      	cmp	r3, #2
    4506:	f000 80d3 	beq.w	46b0 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    450a:	2b04      	cmp	r3, #4
    450c:	f000 8124 	beq.w	4758 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    4510:	2b03      	cmp	r3, #3
    4512:	f000 813b 	beq.w	478c <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    4516:	f89d 8018 	ldrb.w	r8, [sp, #24]
    451a:	f018 0b03 	ands.w	fp, r8, #3
    451e:	f040 813b 	bne.w	4798 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    4522:	f89d 301b 	ldrb.w	r3, [sp, #27]
    4526:	3b25      	subs	r3, #37	; 0x25
    4528:	2b53      	cmp	r3, #83	; 0x53
    452a:	f200 81e6 	bhi.w	48fa <cbvprintf+0x492>
    452e:	e8df f013 	tbh	[pc, r3, lsl #1]
    4532:	0140      	.short	0x0140
    4534:	01e401e4 	.word	0x01e401e4
    4538:	01e401e4 	.word	0x01e401e4
    453c:	01e401e4 	.word	0x01e401e4
    4540:	01e401e4 	.word	0x01e401e4
    4544:	01e401e4 	.word	0x01e401e4
    4548:	01e401e4 	.word	0x01e401e4
    454c:	01e401e4 	.word	0x01e401e4
    4550:	01e401e4 	.word	0x01e401e4
    4554:	01e401e4 	.word	0x01e401e4
    4558:	01e401e4 	.word	0x01e401e4
    455c:	01e401e4 	.word	0x01e401e4
    4560:	01e401e4 	.word	0x01e401e4
    4564:	01e401e4 	.word	0x01e401e4
    4568:	01e401e4 	.word	0x01e401e4
    456c:	01e401e4 	.word	0x01e401e4
    4570:	01e401e4 	.word	0x01e401e4
    4574:	01e401e4 	.word	0x01e401e4
    4578:	01e401e4 	.word	0x01e401e4
    457c:	01e401e4 	.word	0x01e401e4
    4580:	01e401e4 	.word	0x01e401e4
    4584:	01e401e4 	.word	0x01e401e4
    4588:	01e401e4 	.word	0x01e401e4
    458c:	01e401e4 	.word	0x01e401e4
    4590:	01e401e4 	.word	0x01e401e4
    4594:	01e401e4 	.word	0x01e401e4
    4598:	01e40181 	.word	0x01e40181
    459c:	01e401e4 	.word	0x01e401e4
    45a0:	01e401e4 	.word	0x01e401e4
    45a4:	01e401e4 	.word	0x01e401e4
    45a8:	01e401e4 	.word	0x01e401e4
    45ac:	015e01e4 	.word	0x015e01e4
    45b0:	01e40167 	.word	0x01e40167
    45b4:	01e401e4 	.word	0x01e401e4
    45b8:	016701e4 	.word	0x016701e4
    45bc:	01e401e4 	.word	0x01e401e4
    45c0:	01e401e4 	.word	0x01e401e4
    45c4:	018101be 	.word	0x018101be
    45c8:	01e401a2 	.word	0x01e401a2
    45cc:	014d01e4 	.word	0x014d01e4
    45d0:	018101e4 	.word	0x018101e4
    45d4:	01e401e4 	.word	0x01e401e4
    45d8:	0181      	.short	0x0181
				conv->flag_dash = true;
    45da:	f89d 3018 	ldrb.w	r3, [sp, #24]
    45de:	f043 0304 	orr.w	r3, r3, #4
    45e2:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    45e6:	427f      	negs	r7, r7
    45e8:	e76f      	b.n	44ca <cbvprintf+0x62>
		} else if (conv->width_present) {
    45ea:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    45ee:	2b00      	cmp	r3, #0
    45f0:	db02      	blt.n	45f8 <cbvprintf+0x190>
		int width = -1;
    45f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    45f6:	e768      	b.n	44ca <cbvprintf+0x62>
			width = conv->width_value;
    45f8:	9f07      	ldr	r7, [sp, #28]
    45fa:	e766      	b.n	44ca <cbvprintf+0x62>
				conv->prec_present = false;
    45fc:	f89d 3019 	ldrb.w	r3, [sp, #25]
    4600:	f36f 0341 	bfc	r3, #1, #1
    4604:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    4608:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    460c:	e76c      	b.n	44e8 <cbvprintf+0x80>
		} else if (conv->prec_present) {
    460e:	f013 0f02 	tst.w	r3, #2
    4612:	d002      	beq.n	461a <cbvprintf+0x1b2>
			precision = conv->prec_value;
    4614:	f8dd a020 	ldr.w	sl, [sp, #32]
    4618:	e766      	b.n	44e8 <cbvprintf+0x80>
		int precision = -1;
    461a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    461e:	e763      	b.n	44e8 <cbvprintf+0x80>
			switch (length_mod) {
    4620:	1ecb      	subs	r3, r1, #3
    4622:	2b04      	cmp	r3, #4
    4624:	d804      	bhi.n	4630 <cbvprintf+0x1c8>
    4626:	e8df f003 	tbb	[pc, r3]
    462a:	1d0b      	.short	0x1d0b
    462c:	3529      	.short	0x3529
    462e:	35          	.byte	0x35
    462f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    4630:	9b03      	ldr	r3, [sp, #12]
    4632:	1d1a      	adds	r2, r3, #4
    4634:	9203      	str	r2, [sp, #12]
    4636:	681b      	ldr	r3, [r3, #0]
    4638:	17da      	asrs	r2, r3, #31
    463a:	9304      	str	r3, [sp, #16]
    463c:	9205      	str	r2, [sp, #20]
				break;
    463e:	e006      	b.n	464e <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    4640:	9b03      	ldr	r3, [sp, #12]
    4642:	1d1a      	adds	r2, r3, #4
    4644:	9203      	str	r2, [sp, #12]
    4646:	681b      	ldr	r3, [r3, #0]
    4648:	17da      	asrs	r2, r3, #31
    464a:	9304      	str	r3, [sp, #16]
    464c:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    464e:	2901      	cmp	r1, #1
    4650:	d028      	beq.n	46a4 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    4652:	2902      	cmp	r1, #2
    4654:	f47f af5f 	bne.w	4516 <cbvprintf+0xae>
				value->sint = (short)value->sint;
    4658:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    465c:	17da      	asrs	r2, r3, #31
    465e:	9304      	str	r3, [sp, #16]
    4660:	9205      	str	r2, [sp, #20]
    4662:	e758      	b.n	4516 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    4664:	9b03      	ldr	r3, [sp, #12]
    4666:	3307      	adds	r3, #7
    4668:	f023 0307 	bic.w	r3, r3, #7
    466c:	f103 0208 	add.w	r2, r3, #8
    4670:	9203      	str	r2, [sp, #12]
    4672:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    4676:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    467a:	e7e8      	b.n	464e <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    467c:	9b03      	ldr	r3, [sp, #12]
    467e:	3307      	adds	r3, #7
    4680:	f023 0307 	bic.w	r3, r3, #7
    4684:	f103 0208 	add.w	r2, r3, #8
    4688:	9203      	str	r2, [sp, #12]
    468a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    468e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    4692:	e7dc      	b.n	464e <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4694:	9b03      	ldr	r3, [sp, #12]
    4696:	1d1a      	adds	r2, r3, #4
    4698:	9203      	str	r2, [sp, #12]
    469a:	681b      	ldr	r3, [r3, #0]
    469c:	17da      	asrs	r2, r3, #31
				value->sint =
    469e:	9304      	str	r3, [sp, #16]
    46a0:	9205      	str	r2, [sp, #20]
				break;
    46a2:	e7d4      	b.n	464e <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    46a4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    46a8:	9304      	str	r3, [sp, #16]
    46aa:	2300      	movs	r3, #0
    46ac:	9305      	str	r3, [sp, #20]
    46ae:	e732      	b.n	4516 <cbvprintf+0xae>
			switch (length_mod) {
    46b0:	1ecb      	subs	r3, r1, #3
    46b2:	2b04      	cmp	r3, #4
    46b4:	d804      	bhi.n	46c0 <cbvprintf+0x258>
    46b6:	e8df f003 	tbb	[pc, r3]
    46ba:	1f0b      	.short	0x1f0b
    46bc:	4135      	.short	0x4135
    46be:	41          	.byte	0x41
    46bf:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    46c0:	9b03      	ldr	r3, [sp, #12]
    46c2:	1d1a      	adds	r2, r3, #4
    46c4:	9203      	str	r2, [sp, #12]
    46c6:	681b      	ldr	r3, [r3, #0]
    46c8:	9304      	str	r3, [sp, #16]
    46ca:	2300      	movs	r3, #0
    46cc:	9305      	str	r3, [sp, #20]
				break;
    46ce:	e01e      	b.n	470e <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    46d0:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    46d4:	2b63      	cmp	r3, #99	; 0x63
    46d6:	d007      	beq.n	46e8 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    46d8:	9b03      	ldr	r3, [sp, #12]
    46da:	1d1a      	adds	r2, r3, #4
    46dc:	9203      	str	r2, [sp, #12]
    46de:	681b      	ldr	r3, [r3, #0]
    46e0:	9304      	str	r3, [sp, #16]
    46e2:	2300      	movs	r3, #0
    46e4:	9305      	str	r3, [sp, #20]
    46e6:	e012      	b.n	470e <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    46e8:	9b03      	ldr	r3, [sp, #12]
    46ea:	1d1a      	adds	r2, r3, #4
    46ec:	9203      	str	r2, [sp, #12]
    46ee:	681b      	ldr	r3, [r3, #0]
    46f0:	9304      	str	r3, [sp, #16]
    46f2:	2300      	movs	r3, #0
    46f4:	9305      	str	r3, [sp, #20]
    46f6:	e00a      	b.n	470e <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    46f8:	9b03      	ldr	r3, [sp, #12]
    46fa:	3307      	adds	r3, #7
    46fc:	f023 0307 	bic.w	r3, r3, #7
    4700:	f103 0208 	add.w	r2, r3, #8
    4704:	9203      	str	r2, [sp, #12]
    4706:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    470a:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    470e:	2901      	cmp	r1, #1
    4710:	d01c      	beq.n	474c <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    4712:	2902      	cmp	r1, #2
    4714:	f47f aeff 	bne.w	4516 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    4718:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    471c:	9304      	str	r3, [sp, #16]
    471e:	2300      	movs	r3, #0
    4720:	9305      	str	r3, [sp, #20]
    4722:	e6f8      	b.n	4516 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    4724:	9b03      	ldr	r3, [sp, #12]
    4726:	3307      	adds	r3, #7
    4728:	f023 0307 	bic.w	r3, r3, #7
    472c:	f103 0208 	add.w	r2, r3, #8
    4730:	9203      	str	r2, [sp, #12]
    4732:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    4736:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    473a:	e7e8      	b.n	470e <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    473c:	9b03      	ldr	r3, [sp, #12]
    473e:	1d1a      	adds	r2, r3, #4
    4740:	9203      	str	r2, [sp, #12]
    4742:	681b      	ldr	r3, [r3, #0]
				value->uint =
    4744:	9304      	str	r3, [sp, #16]
    4746:	2300      	movs	r3, #0
    4748:	9305      	str	r3, [sp, #20]
				break;
    474a:	e7e0      	b.n	470e <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    474c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4750:	9304      	str	r3, [sp, #16]
    4752:	2300      	movs	r3, #0
    4754:	9305      	str	r3, [sp, #20]
    4756:	e6de      	b.n	4516 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    4758:	2908      	cmp	r1, #8
    475a:	d00b      	beq.n	4774 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    475c:	9b03      	ldr	r3, [sp, #12]
    475e:	3307      	adds	r3, #7
    4760:	f023 0307 	bic.w	r3, r3, #7
    4764:	f103 0208 	add.w	r2, r3, #8
    4768:	9203      	str	r2, [sp, #12]
    476a:	e9d3 2300 	ldrd	r2, r3, [r3]
    476e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4772:	e6d0      	b.n	4516 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    4774:	9b03      	ldr	r3, [sp, #12]
    4776:	3307      	adds	r3, #7
    4778:	f023 0307 	bic.w	r3, r3, #7
    477c:	f103 0208 	add.w	r2, r3, #8
    4780:	9203      	str	r2, [sp, #12]
    4782:	e9d3 2300 	ldrd	r2, r3, [r3]
    4786:	e9cd 2304 	strd	r2, r3, [sp, #16]
    478a:	e6c4      	b.n	4516 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    478c:	9b03      	ldr	r3, [sp, #12]
    478e:	1d1a      	adds	r2, r3, #4
    4790:	9203      	str	r2, [sp, #12]
    4792:	681b      	ldr	r3, [r3, #0]
    4794:	9304      	str	r3, [sp, #16]
    4796:	e6be      	b.n	4516 <cbvprintf+0xae>
			OUTS(sp, fp);
    4798:	9f02      	ldr	r7, [sp, #8]
    479a:	463b      	mov	r3, r7
    479c:	464a      	mov	r2, r9
    479e:	4629      	mov	r1, r5
    47a0:	4630      	mov	r0, r6
    47a2:	f009 fee3 	bl	e56c <outs>
    47a6:	2800      	cmp	r0, #0
    47a8:	f2c0 8141 	blt.w	4a2e <cbvprintf+0x5c6>
    47ac:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    47ae:	46b9      	mov	r9, r7
			continue;
    47b0:	e662      	b.n	4478 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    47b2:	4629      	mov	r1, r5
    47b4:	2025      	movs	r0, #37	; 0x25
    47b6:	47b0      	blx	r6
    47b8:	2800      	cmp	r0, #0
    47ba:	f2c0 8138 	blt.w	4a2e <cbvprintf+0x5c6>
    47be:	3401      	adds	r4, #1
		char sign = 0;
    47c0:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    47c2:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    47c6:	f04f 0900 	mov.w	r9, #0
			break;
    47ca:	e09b      	b.n	4904 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    47cc:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    47d0:	f1ba 0f00 	cmp.w	sl, #0
    47d4:	db07      	blt.n	47e6 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    47d6:	4651      	mov	r1, sl
    47d8:	4648      	mov	r0, r9
    47da:	f00a fe38 	bl	f44e <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    47de:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    47e2:	46d8      	mov	r8, fp
			precision = -1;

			break;
    47e4:	e08e      	b.n	4904 <cbvprintf+0x49c>
				len = strlen(bps);
    47e6:	4648      	mov	r0, r9
    47e8:	f7fc fb2b 	bl	e42 <strlen>
    47ec:	e7f7      	b.n	47de <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    47ee:	9b04      	ldr	r3, [sp, #16]
    47f0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    47f4:	46d8      	mov	r8, fp
			bpe = buf + 1;
    47f6:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    47fa:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    47fe:	e081      	b.n	4904 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    4800:	f018 0f08 	tst.w	r8, #8
    4804:	d105      	bne.n	4812 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    4806:	f018 0810 	ands.w	r8, r8, #16
    480a:	d004      	beq.n	4816 <cbvprintf+0x3ae>
				sign = ' ';
    480c:	f04f 0820 	mov.w	r8, #32
    4810:	e001      	b.n	4816 <cbvprintf+0x3ae>
				sign = '+';
    4812:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    4816:	9a04      	ldr	r2, [sp, #16]
    4818:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    481a:	2b00      	cmp	r3, #0
    481c:	db02      	blt.n	4824 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    481e:	9204      	str	r2, [sp, #16]
    4820:	9305      	str	r3, [sp, #20]
    4822:	e008      	b.n	4836 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    4824:	4252      	negs	r2, r2
    4826:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    482a:	9204      	str	r2, [sp, #16]
    482c:	9305      	str	r3, [sp, #20]
				sign = '-';
    482e:	f04f 082d 	mov.w	r8, #45	; 0x2d
    4832:	e000      	b.n	4836 <cbvprintf+0x3ce>
		switch (conv->specifier) {
    4834:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    4836:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    483a:	9300      	str	r3, [sp, #0]
    483c:	ab0a      	add	r3, sp, #40	; 0x28
    483e:	aa06      	add	r2, sp, #24
    4840:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4844:	f7ff fda0 	bl	4388 <encode_uint>
    4848:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    484a:	f1ba 0f00 	cmp.w	sl, #0
    484e:	f2c0 8088 	blt.w	4962 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    4852:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    4856:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    485a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    485e:	f36f 1286 	bfc	r2, #6, #1
    4862:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    4866:	459a      	cmp	sl, r3
    4868:	d97e      	bls.n	4968 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    486a:	ebaa 0303 	sub.w	r3, sl, r3
    486e:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    4870:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    4874:	e046      	b.n	4904 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    4876:	9804      	ldr	r0, [sp, #16]
    4878:	b928      	cbnz	r0, 4886 <cbvprintf+0x41e>
		char sign = 0;
    487a:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    487c:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 4a34 <cbvprintf+0x5cc>
			bps = "(nil)";
    4880:	f1aa 0905 	sub.w	r9, sl, #5
    4884:	e03e      	b.n	4904 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4886:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    488a:	9300      	str	r3, [sp, #0]
    488c:	ab0a      	add	r3, sp, #40	; 0x28
    488e:	aa06      	add	r2, sp, #24
    4890:	2100      	movs	r1, #0
    4892:	f7ff fd79 	bl	4388 <encode_uint>
    4896:	4681      	mov	r9, r0
				conv->altform_0c = true;
    4898:	f89d 301a 	ldrb.w	r3, [sp, #26]
    489c:	f043 0310 	orr.w	r3, r3, #16
    48a0:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    48a4:	2378      	movs	r3, #120	; 0x78
    48a6:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    48aa:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    48ac:	e7cd      	b.n	484a <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    48ae:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    48b0:	f89d 3019 	ldrb.w	r3, [sp, #25]
    48b4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    48b8:	2b07      	cmp	r3, #7
    48ba:	d806      	bhi.n	48ca <cbvprintf+0x462>
    48bc:	e8df f003 	tbb	[pc, r3]
    48c0:	0f0d0b04 	.word	0x0f0d0b04
    48c4:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    48c8:	6014      	str	r4, [r2, #0]
		char sign = 0;
    48ca:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    48cc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    48d0:	f04f 0900 	mov.w	r9, #0
}
    48d4:	e016      	b.n	4904 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    48d6:	7014      	strb	r4, [r2, #0]
		break;
    48d8:	e7f7      	b.n	48ca <cbvprintf+0x462>
		*(short *)dp = (short)count;
    48da:	8014      	strh	r4, [r2, #0]
		break;
    48dc:	e7f5      	b.n	48ca <cbvprintf+0x462>
		*(long *)dp = (long)count;
    48de:	6014      	str	r4, [r2, #0]
		break;
    48e0:	e7f3      	b.n	48ca <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    48e2:	17e3      	asrs	r3, r4, #31
    48e4:	6014      	str	r4, [r2, #0]
    48e6:	6053      	str	r3, [r2, #4]
		break;
    48e8:	e7ef      	b.n	48ca <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    48ea:	17e3      	asrs	r3, r4, #31
    48ec:	6014      	str	r4, [r2, #0]
    48ee:	6053      	str	r3, [r2, #4]
		break;
    48f0:	e7eb      	b.n	48ca <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    48f2:	6014      	str	r4, [r2, #0]
		break;
    48f4:	e7e9      	b.n	48ca <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    48f6:	6014      	str	r4, [r2, #0]
		break;
    48f8:	e7e7      	b.n	48ca <cbvprintf+0x462>
		switch (conv->specifier) {
    48fa:	46d8      	mov	r8, fp
    48fc:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    4900:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    4904:	f1b9 0f00 	cmp.w	r9, #0
    4908:	f000 808d 	beq.w	4a26 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    490c:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    4910:	f1b8 0f00 	cmp.w	r8, #0
    4914:	d000      	beq.n	4918 <cbvprintf+0x4b0>
			nj_len += 1U;
    4916:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    4918:	f89d 101a 	ldrb.w	r1, [sp, #26]
    491c:	f011 0f10 	tst.w	r1, #16
    4920:	d025      	beq.n	496e <cbvprintf+0x506>
			nj_len += 2U;
    4922:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    4924:	9b07      	ldr	r3, [sp, #28]
    4926:	4413      	add	r3, r2
		if (conv->pad_fp) {
    4928:	f011 0f40 	tst.w	r1, #64	; 0x40
    492c:	d001      	beq.n	4932 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    492e:	9a08      	ldr	r2, [sp, #32]
    4930:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    4932:	2f00      	cmp	r7, #0
    4934:	dd31      	ble.n	499a <cbvprintf+0x532>
			width -= (int)nj_len;
    4936:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    4938:	f89d 3018 	ldrb.w	r3, [sp, #24]
    493c:	f013 0f04 	tst.w	r3, #4
    4940:	d12b      	bne.n	499a <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    4942:	f013 0f40 	tst.w	r3, #64	; 0x40
    4946:	d017      	beq.n	4978 <cbvprintf+0x510>
					if (sign != 0) {
    4948:	f1b8 0f00 	cmp.w	r8, #0
    494c:	d017      	beq.n	497e <cbvprintf+0x516>
						OUTC(sign);
    494e:	4629      	mov	r1, r5
    4950:	4640      	mov	r0, r8
    4952:	47b0      	blx	r6
    4954:	2800      	cmp	r0, #0
    4956:	db6a      	blt.n	4a2e <cbvprintf+0x5c6>
    4958:	3401      	adds	r4, #1
						sign = 0;
    495a:	46d8      	mov	r8, fp
					}
					pad = '0';
    495c:	f04f 0b30 	mov.w	fp, #48	; 0x30
    4960:	e00f      	b.n	4982 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    4962:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    4966:	e7cd      	b.n	4904 <cbvprintf+0x49c>
    4968:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    496c:	e7ca      	b.n	4904 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    496e:	f011 0f08 	tst.w	r1, #8
    4972:	d0d7      	beq.n	4924 <cbvprintf+0x4bc>
			nj_len += 1U;
    4974:	3201      	adds	r2, #1
    4976:	e7d5      	b.n	4924 <cbvprintf+0x4bc>
				char pad = ' ';
    4978:	f04f 0b20 	mov.w	fp, #32
    497c:	e001      	b.n	4982 <cbvprintf+0x51a>
					pad = '0';
    497e:	f04f 0b30 	mov.w	fp, #48	; 0x30
    4982:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    4984:	1e5f      	subs	r7, r3, #1
    4986:	2b00      	cmp	r3, #0
    4988:	dd07      	ble.n	499a <cbvprintf+0x532>
					OUTC(pad);
    498a:	4629      	mov	r1, r5
    498c:	4658      	mov	r0, fp
    498e:	47b0      	blx	r6
    4990:	2800      	cmp	r0, #0
    4992:	db4c      	blt.n	4a2e <cbvprintf+0x5c6>
    4994:	3401      	adds	r4, #1
				while (width-- > 0) {
    4996:	463b      	mov	r3, r7
    4998:	e7f4      	b.n	4984 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    499a:	f1b8 0f00 	cmp.w	r8, #0
    499e:	d005      	beq.n	49ac <cbvprintf+0x544>
			OUTC(sign);
    49a0:	4629      	mov	r1, r5
    49a2:	4640      	mov	r0, r8
    49a4:	47b0      	blx	r6
    49a6:	2800      	cmp	r0, #0
    49a8:	db41      	blt.n	4a2e <cbvprintf+0x5c6>
    49aa:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    49ac:	f89d 301a 	ldrb.w	r3, [sp, #26]
    49b0:	f3c3 1200 	ubfx	r2, r3, #4, #1
    49b4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    49b8:	4313      	orrs	r3, r2
    49ba:	d005      	beq.n	49c8 <cbvprintf+0x560>
				OUTC('0');
    49bc:	4629      	mov	r1, r5
    49be:	2030      	movs	r0, #48	; 0x30
    49c0:	47b0      	blx	r6
    49c2:	2800      	cmp	r0, #0
    49c4:	db33      	blt.n	4a2e <cbvprintf+0x5c6>
    49c6:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    49c8:	f89d 301a 	ldrb.w	r3, [sp, #26]
    49cc:	f013 0f10 	tst.w	r3, #16
    49d0:	d006      	beq.n	49e0 <cbvprintf+0x578>
				OUTC(conv->specifier);
    49d2:	4629      	mov	r1, r5
    49d4:	f89d 001b 	ldrb.w	r0, [sp, #27]
    49d8:	47b0      	blx	r6
    49da:	2800      	cmp	r0, #0
    49dc:	db27      	blt.n	4a2e <cbvprintf+0x5c6>
    49de:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    49e0:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    49e2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    49e6:	2b00      	cmp	r3, #0
    49e8:	dd07      	ble.n	49fa <cbvprintf+0x592>
				OUTC('0');
    49ea:	4629      	mov	r1, r5
    49ec:	2030      	movs	r0, #48	; 0x30
    49ee:	47b0      	blx	r6
    49f0:	2800      	cmp	r0, #0
    49f2:	db1c      	blt.n	4a2e <cbvprintf+0x5c6>
    49f4:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    49f6:	4643      	mov	r3, r8
    49f8:	e7f3      	b.n	49e2 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    49fa:	4653      	mov	r3, sl
    49fc:	464a      	mov	r2, r9
    49fe:	4629      	mov	r1, r5
    4a00:	4630      	mov	r0, r6
    4a02:	f009 fdb3 	bl	e56c <outs>
    4a06:	2800      	cmp	r0, #0
    4a08:	db11      	blt.n	4a2e <cbvprintf+0x5c6>
    4a0a:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    4a0c:	2f00      	cmp	r7, #0
    4a0e:	dd07      	ble.n	4a20 <cbvprintf+0x5b8>
			OUTC(' ');
    4a10:	4629      	mov	r1, r5
    4a12:	2020      	movs	r0, #32
    4a14:	47b0      	blx	r6
    4a16:	2800      	cmp	r0, #0
    4a18:	db09      	blt.n	4a2e <cbvprintf+0x5c6>
    4a1a:	3401      	adds	r4, #1
			--width;
    4a1c:	3f01      	subs	r7, #1
    4a1e:	e7f5      	b.n	4a0c <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    4a20:	f8dd 9008 	ldr.w	r9, [sp, #8]
    4a24:	e528      	b.n	4478 <cbvprintf+0x10>
    4a26:	f8dd 9008 	ldr.w	r9, [sp, #8]
    4a2a:	e525      	b.n	4478 <cbvprintf+0x10>
		}
	}

	return count;
    4a2c:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    4a2e:	b011      	add	sp, #68	; 0x44
    4a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a34:	000104c1 	.word	0x000104c1

00004a38 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    4a38:	b508      	push	{r3, lr}
	__asm__ volatile(
    4a3a:	f04f 0220 	mov.w	r2, #32
    4a3e:	f3ef 8311 	mrs	r3, BASEPRI
    4a42:	f382 8812 	msr	BASEPRI_MAX, r2
    4a46:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    4a4a:	f001 ffff 	bl	6a4c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    4a4e:	4803      	ldr	r0, [pc, #12]	; (4a5c <sys_reboot+0x24>)
    4a50:	f009 fca4 	bl	e39c <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    4a54:	f000 ffa8 	bl	59a8 <arch_cpu_idle>
    4a58:	e7fc      	b.n	4a54 <sys_reboot+0x1c>
    4a5a:	bf00      	nop
    4a5c:	000104c4 	.word	0x000104c4

00004a60 <msg_process>:

static void msg_process(union log_msgs msg, bool bypass)
{
	struct log_backend const *backend;

	if (!bypass) {
    4a60:	2900      	cmp	r1, #0
    4a62:	d150      	bne.n	4b06 <msg_process+0xa6>
{
    4a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4a68:	4607      	mov	r7, r0
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    4a6a:	2400      	movs	r4, #0
    4a6c:	e022      	b.n	4ab4 <msg_process+0x54>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
    4a6e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4b08 <msg_process+0xa8>
    4a72:	f44f 7399 	mov.w	r3, #306	; 0x132
    4a76:	464a      	mov	r2, r9
    4a78:	4924      	ldr	r1, [pc, #144]	; (4b0c <msg_process+0xac>)
    4a7a:	4825      	ldr	r0, [pc, #148]	; (4b10 <msg_process+0xb0>)
    4a7c:	f009 fd97 	bl	e5ae <assert_print>
    4a80:	f44f 7199 	mov.w	r1, #306	; 0x132
    4a84:	4648      	mov	r0, r9
    4a86:	f009 fd8b 	bl	e5a0 <assert_post_action>
    4a8a:	e01f      	b.n	4acc <msg_process+0x6c>
	__ASSERT_NO_MSG(backend != NULL);
    4a8c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 4b08 <msg_process+0xa8>
    4a90:	2385      	movs	r3, #133	; 0x85
    4a92:	464a      	mov	r2, r9
    4a94:	491d      	ldr	r1, [pc, #116]	; (4b0c <msg_process+0xac>)
    4a96:	481e      	ldr	r0, [pc, #120]	; (4b10 <msg_process+0xb0>)
    4a98:	f009 fd89 	bl	e5ae <assert_print>
    4a9c:	2185      	movs	r1, #133	; 0x85
    4a9e:	4648      	mov	r0, r9
    4aa0:	f009 fd7e 	bl	e5a0 <assert_post_action>
    4aa4:	e01e      	b.n	4ae4 <msg_process+0x84>
	backend->api->process(backend, msg);
    4aa6:	f858 3005 	ldr.w	r3, [r8, r5]
    4aaa:	681b      	ldr	r3, [r3, #0]
    4aac:	4639      	mov	r1, r7
    4aae:	4630      	mov	r0, r6
    4ab0:	4798      	blx	r3
    4ab2:	3401      	adds	r4, #1
    4ab4:	4b17      	ldr	r3, [pc, #92]	; (4b14 <msg_process+0xb4>)
    4ab6:	4a18      	ldr	r2, [pc, #96]	; (4b18 <msg_process+0xb8>)
    4ab8:	1a9b      	subs	r3, r3, r2
    4aba:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    4abe:	da20      	bge.n	4b02 <msg_process+0xa2>
	return &__log_backends_start[idx];
    4ac0:	ea4f 1804 	mov.w	r8, r4, lsl #4
    4ac4:	4d14      	ldr	r5, [pc, #80]	; (4b18 <msg_process+0xb8>)
	__ASSERT_NO_MSG(backend != NULL);
    4ac6:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    4aca:	d0d0      	beq.n	4a6e <msg_process+0xe>
	return backend->cb->active;
    4acc:	6873      	ldr	r3, [r6, #4]
    4ace:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);
			if (log_backend_is_active(backend) &&
    4ad0:	2b00      	cmp	r3, #0
    4ad2:	d0ee      	beq.n	4ab2 <msg_process+0x52>
			    msg_filter_check(backend, msg)) {
    4ad4:	4639      	mov	r1, r7
    4ad6:	4630      	mov	r0, r6
    4ad8:	f009 fd7a 	bl	e5d0 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    4adc:	2800      	cmp	r0, #0
    4ade:	d0e8      	beq.n	4ab2 <msg_process+0x52>
	__ASSERT_NO_MSG(backend != NULL);
    4ae0:	2e00      	cmp	r6, #0
    4ae2:	d0d3      	beq.n	4a8c <msg_process+0x2c>
	__ASSERT_NO_MSG(msg != NULL);
    4ae4:	2f00      	cmp	r7, #0
    4ae6:	d1de      	bne.n	4aa6 <msg_process+0x46>
    4ae8:	f8df 901c 	ldr.w	r9, [pc, #28]	; 4b08 <msg_process+0xa8>
    4aec:	2386      	movs	r3, #134	; 0x86
    4aee:	464a      	mov	r2, r9
    4af0:	490a      	ldr	r1, [pc, #40]	; (4b1c <msg_process+0xbc>)
    4af2:	4807      	ldr	r0, [pc, #28]	; (4b10 <msg_process+0xb0>)
    4af4:	f009 fd5b 	bl	e5ae <assert_print>
    4af8:	2186      	movs	r1, #134	; 0x86
    4afa:	4648      	mov	r0, r9
    4afc:	f009 fd50 	bl	e5a0 <assert_post_action>
    4b00:	e7d1      	b.n	4aa6 <msg_process+0x46>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    4b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4b06:	4770      	bx	lr
    4b08:	000104f0 	.word	0x000104f0
    4b0c:	00010528 	.word	0x00010528
    4b10:	000100e4 	.word	0x000100e4
    4b14:	0000fcf8 	.word	0x0000fcf8
    4b18:	0000fcd8 	.word	0x0000fcd8
    4b1c:	00010540 	.word	0x00010540

00004b20 <log_format_func_t_get>:
}
    4b20:	4b01      	ldr	r3, [pc, #4]	; (4b28 <log_format_func_t_get+0x8>)
    4b22:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4b26:	4770      	bx	lr
    4b28:	000105c4 	.word	0x000105c4

00004b2c <log_init>:
{
    4b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
    4b2e:	4b20      	ldr	r3, [pc, #128]	; (4bb0 <log_init+0x84>)
    4b30:	4a20      	ldr	r2, [pc, #128]	; (4bb4 <log_init+0x88>)
    4b32:	1a9b      	subs	r3, r3, r2
    4b34:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    4b36:	2b90      	cmp	r3, #144	; 0x90
    4b38:	d80e      	bhi.n	4b58 <log_init+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4b3a:	4b1f      	ldr	r3, [pc, #124]	; (4bb8 <log_init+0x8c>)
    4b3c:	f3bf 8f5b 	dmb	ish
    4b40:	e853 2f00 	ldrex	r2, [r3]
    4b44:	1c51      	adds	r1, r2, #1
    4b46:	e843 1000 	strex	r0, r1, [r3]
    4b4a:	2800      	cmp	r0, #0
    4b4c:	d1f8      	bne.n	4b40 <log_init+0x14>
    4b4e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    4b52:	bb5a      	cbnz	r2, 4bac <log_init+0x80>
	for (i = 0; i < log_backend_count_get(); i++) {
    4b54:	2400      	movs	r4, #0
    4b56:	e017      	b.n	4b88 <log_init+0x5c>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    4b58:	4c18      	ldr	r4, [pc, #96]	; (4bbc <log_init+0x90>)
    4b5a:	f240 2373 	movw	r3, #627	; 0x273
    4b5e:	4622      	mov	r2, r4
    4b60:	4917      	ldr	r1, [pc, #92]	; (4bc0 <log_init+0x94>)
    4b62:	4818      	ldr	r0, [pc, #96]	; (4bc4 <log_init+0x98>)
    4b64:	f009 fd23 	bl	e5ae <assert_print>
    4b68:	f240 2173 	movw	r1, #627	; 0x273
    4b6c:	4620      	mov	r0, r4
    4b6e:	f009 fd17 	bl	e5a0 <assert_post_action>
    4b72:	e7e2      	b.n	4b3a <log_init+0xe>
					   backend->cb->ctx,
    4b74:	4b0f      	ldr	r3, [pc, #60]	; (4bb4 <log_init+0x88>)
    4b76:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    4b7a:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    4b7c:	2204      	movs	r2, #4
    4b7e:	6819      	ldr	r1, [r3, #0]
    4b80:	4628      	mov	r0, r5
    4b82:	f000 f8d3 	bl	4d2c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    4b86:	3401      	adds	r4, #1
    4b88:	42b4      	cmp	r4, r6
    4b8a:	da0f      	bge.n	4bac <log_init+0x80>
		const struct log_backend *backend = log_backend_get(i);
    4b8c:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
    4b8e:	4d09      	ldr	r5, [pc, #36]	; (4bb4 <log_init+0x88>)
    4b90:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    4b94:	7b2b      	ldrb	r3, [r5, #12]
    4b96:	2b00      	cmp	r3, #0
    4b98:	d0f5      	beq.n	4b86 <log_init+0x5a>
			if (backend->api->init != NULL) {
    4b9a:	0123      	lsls	r3, r4, #4
    4b9c:	4a05      	ldr	r2, [pc, #20]	; (4bb4 <log_init+0x88>)
    4b9e:	58d3      	ldr	r3, [r2, r3]
    4ba0:	699b      	ldr	r3, [r3, #24]
    4ba2:	2b00      	cmp	r3, #0
    4ba4:	d0e6      	beq.n	4b74 <log_init+0x48>
				backend->api->init(backend);
    4ba6:	4628      	mov	r0, r5
    4ba8:	4798      	blx	r3
    4baa:	e7e3      	b.n	4b74 <log_init+0x48>
}
    4bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4bae:	bf00      	nop
    4bb0:	0000fcf8 	.word	0x0000fcf8
    4bb4:	0000fcd8 	.word	0x0000fcd8
    4bb8:	200047fc 	.word	0x200047fc
    4bbc:	00010554 	.word	0x00010554
    4bc0:	0001059c 	.word	0x0001059c
    4bc4:	000100e4 	.word	0x000100e4

00004bc8 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    4bc8:	b138      	cbz	r0, 4bda <log_set_timestamp_func+0x12>
{
    4bca:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    4bcc:	4a04      	ldr	r2, [pc, #16]	; (4be0 <log_set_timestamp_func+0x18>)
    4bce:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    4bd0:	4608      	mov	r0, r1
    4bd2:	f000 fac3 	bl	515c <log_output_timestamp_freq_set>
	return 0;
    4bd6:	2000      	movs	r0, #0
}
    4bd8:	bd08      	pop	{r3, pc}
		return -EINVAL;
    4bda:	f06f 0015 	mvn.w	r0, #21
}
    4bde:	4770      	bx	lr
    4be0:	20004024 	.word	0x20004024

00004be4 <log_core_init>:
{
    4be4:	b508      	push	{r3, lr}
	panic_mode = false;
    4be6:	2300      	movs	r3, #0
    4be8:	4a04      	ldr	r2, [pc, #16]	; (4bfc <log_core_init+0x18>)
    4bea:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    4bec:	4a04      	ldr	r2, [pc, #16]	; (4c00 <log_core_init+0x1c>)
    4bee:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    4bf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    4bf4:	4803      	ldr	r0, [pc, #12]	; (4c04 <log_core_init+0x20>)
    4bf6:	f7ff ffe7 	bl	4bc8 <log_set_timestamp_func>
}
    4bfa:	bd08      	pop	{r3, pc}
    4bfc:	2000555b 	.word	0x2000555b
    4c00:	200047f8 	.word	0x200047f8
    4c04:	0000e5d5 	.word	0x0000e5d5

00004c08 <z_impl_log_panic>:
	if (panic_mode) {
    4c08:	4b20      	ldr	r3, [pc, #128]	; (4c8c <z_impl_log_panic+0x84>)
    4c0a:	781b      	ldrb	r3, [r3, #0]
    4c0c:	b103      	cbz	r3, 4c10 <z_impl_log_panic+0x8>
    4c0e:	4770      	bx	lr
{
    4c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
    4c14:	f7ff ff8a 	bl	4b2c <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    4c18:	2400      	movs	r4, #0
    4c1a:	e013      	b.n	4c44 <z_impl_log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
    4c1c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4c90 <z_impl_log_panic+0x88>
    4c20:	f44f 7399 	mov.w	r3, #306	; 0x132
    4c24:	4642      	mov	r2, r8
    4c26:	491b      	ldr	r1, [pc, #108]	; (4c94 <z_impl_log_panic+0x8c>)
    4c28:	481b      	ldr	r0, [pc, #108]	; (4c98 <z_impl_log_panic+0x90>)
    4c2a:	f009 fcc0 	bl	e5ae <assert_print>
    4c2e:	f44f 7199 	mov.w	r1, #306	; 0x132
    4c32:	4640      	mov	r0, r8
    4c34:	f009 fcb4 	bl	e5a0 <assert_post_action>
    4c38:	e00f      	b.n	4c5a <z_impl_log_panic+0x52>
	backend->api->panic(backend);
    4c3a:	597b      	ldr	r3, [r7, r5]
    4c3c:	695b      	ldr	r3, [r3, #20]
    4c3e:	4630      	mov	r0, r6
    4c40:	4798      	blx	r3
    4c42:	3401      	adds	r4, #1
    4c44:	4b15      	ldr	r3, [pc, #84]	; (4c9c <z_impl_log_panic+0x94>)
    4c46:	4a16      	ldr	r2, [pc, #88]	; (4ca0 <z_impl_log_panic+0x98>)
    4c48:	1a9b      	subs	r3, r3, r2
    4c4a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    4c4e:	da17      	bge.n	4c80 <z_impl_log_panic+0x78>
	return &__log_backends_start[idx];
    4c50:	0127      	lsls	r7, r4, #4
    4c52:	4d13      	ldr	r5, [pc, #76]	; (4ca0 <z_impl_log_panic+0x98>)
	__ASSERT_NO_MSG(backend != NULL);
    4c54:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    4c58:	d0e0      	beq.n	4c1c <z_impl_log_panic+0x14>
	return backend->cb->active;
    4c5a:	6873      	ldr	r3, [r6, #4]
    4c5c:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    4c5e:	2b00      	cmp	r3, #0
    4c60:	d0ef      	beq.n	4c42 <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
    4c62:	2e00      	cmp	r6, #0
    4c64:	d1e9      	bne.n	4c3a <z_impl_log_panic+0x32>
    4c66:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4c90 <z_impl_log_panic+0x88>
    4c6a:	23d7      	movs	r3, #215	; 0xd7
    4c6c:	4642      	mov	r2, r8
    4c6e:	4909      	ldr	r1, [pc, #36]	; (4c94 <z_impl_log_panic+0x8c>)
    4c70:	4809      	ldr	r0, [pc, #36]	; (4c98 <z_impl_log_panic+0x90>)
    4c72:	f009 fc9c 	bl	e5ae <assert_print>
    4c76:	21d7      	movs	r1, #215	; 0xd7
    4c78:	4640      	mov	r0, r8
    4c7a:	f009 fc91 	bl	e5a0 <assert_post_action>
    4c7e:	e7dc      	b.n	4c3a <z_impl_log_panic+0x32>
	panic_mode = true;
    4c80:	4b02      	ldr	r3, [pc, #8]	; (4c8c <z_impl_log_panic+0x84>)
    4c82:	2201      	movs	r2, #1
    4c84:	701a      	strb	r2, [r3, #0]
}
    4c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c8a:	bf00      	nop
    4c8c:	2000555b 	.word	0x2000555b
    4c90:	000104f0 	.word	0x000104f0
    4c94:	00010528 	.word	0x00010528
    4c98:	000100e4 	.word	0x000100e4
    4c9c:	0000fcf8 	.word	0x0000fcf8
    4ca0:	0000fcd8 	.word	0x0000fcd8

00004ca4 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    4ca4:	4b01      	ldr	r3, [pc, #4]	; (4cac <z_log_notify_backend_enabled+0x8>)
    4ca6:	2201      	movs	r2, #1
    4ca8:	701a      	strb	r2, [r3, #0]
}
    4caa:	4770      	bx	lr
    4cac:	2000555a 	.word	0x2000555a

00004cb0 <z_log_dropped>:
    4cb0:	4b0d      	ldr	r3, [pc, #52]	; (4ce8 <z_log_dropped+0x38>)
    4cb2:	f3bf 8f5b 	dmb	ish
    4cb6:	e853 2f00 	ldrex	r2, [r3]
    4cba:	3201      	adds	r2, #1
    4cbc:	e843 2100 	strex	r1, r2, [r3]
    4cc0:	2900      	cmp	r1, #0
    4cc2:	d1f8      	bne.n	4cb6 <z_log_dropped+0x6>
    4cc4:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    4cc8:	b900      	cbnz	r0, 4ccc <z_log_dropped+0x1c>
		atomic_dec(&buffered_cnt);
	}
}
    4cca:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4ccc:	4b07      	ldr	r3, [pc, #28]	; (4cec <z_log_dropped+0x3c>)
    4cce:	f3bf 8f5b 	dmb	ish
    4cd2:	e853 2f00 	ldrex	r2, [r3]
    4cd6:	3a01      	subs	r2, #1
    4cd8:	e843 2100 	strex	r1, r2, [r3]
    4cdc:	2900      	cmp	r1, #0
    4cde:	d1f8      	bne.n	4cd2 <z_log_dropped+0x22>
    4ce0:	f3bf 8f5b 	dmb	ish
    4ce4:	e7f1      	b.n	4cca <z_log_dropped+0x1a>
    4ce6:	bf00      	nop
    4ce8:	200047f8 	.word	0x200047f8
    4cec:	200047f4 	.word	0x200047f4

00004cf0 <z_log_msg2_commit>:
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
    4cf0:	b510      	push	{r4, lr}
    4cf2:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    4cf4:	4b04      	ldr	r3, [pc, #16]	; (4d08 <z_log_msg2_commit+0x18>)
    4cf6:	681b      	ldr	r3, [r3, #0]
    4cf8:	4798      	blx	r3
    4cfa:	60a0      	str	r0, [r4, #8]
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    4cfc:	2100      	movs	r1, #0
    4cfe:	4620      	mov	r0, r4
    4d00:	f7ff feae 	bl	4a60 <msg_process>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    4d04:	bd10      	pop	{r4, pc}
    4d06:	bf00      	nop
    4d08:	20004024 	.word	0x20004024

00004d0c <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    4d0c:	4b05      	ldr	r3, [pc, #20]	; (4d24 <log_source_name_get+0x18>)
    4d0e:	4a06      	ldr	r2, [pc, #24]	; (4d28 <log_source_name_get+0x1c>)
    4d10:	1a9b      	subs	r3, r3, r2
    4d12:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    4d16:	d202      	bcs.n	4d1e <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    4d18:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    4d1c:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    4d1e:	2000      	movs	r0, #0
}
    4d20:	4770      	bx	lr
    4d22:	bf00      	nop
    4d24:	0000fcd8 	.word	0x0000fcd8
    4d28:	0000fc90 	.word	0x0000fc90

00004d2c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    4d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d2e:	4604      	mov	r4, r0
    4d30:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    4d32:	4d1e      	ldr	r5, [pc, #120]	; (4dac <log_backend_enable+0x80>)
    4d34:	1b45      	subs	r5, r0, r5
    4d36:	112d      	asrs	r5, r5, #4
    4d38:	3501      	adds	r5, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    4d3a:	6803      	ldr	r3, [r0, #0]
    4d3c:	681b      	ldr	r3, [r3, #0]
    4d3e:	b163      	cbz	r3, 4d5a <log_backend_enable+0x2e>
	}

	log_backend_id_set(backend, id);
    4d40:	b2ed      	uxtb	r5, r5
	__ASSERT_NO_MSG(backend != NULL);
    4d42:	b1cc      	cbz	r4, 4d78 <log_backend_enable+0x4c>
	backend->cb->id = id;
    4d44:	6863      	ldr	r3, [r4, #4]
    4d46:	711d      	strb	r5, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    4d48:	b314      	cbz	r4, 4d90 <log_backend_enable+0x64>
	backend->cb->ctx = ctx;
    4d4a:	6863      	ldr	r3, [r4, #4]
    4d4c:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    4d4e:	6863      	ldr	r3, [r4, #4]
    4d50:	2201      	movs	r2, #1
    4d52:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    4d54:	f7ff ffa6 	bl	4ca4 <z_log_notify_backend_enabled>
}
    4d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    4d5a:	4f15      	ldr	r7, [pc, #84]	; (4db0 <log_backend_enable+0x84>)
    4d5c:	23bb      	movs	r3, #187	; 0xbb
    4d5e:	463a      	mov	r2, r7
    4d60:	4914      	ldr	r1, [pc, #80]	; (4db4 <log_backend_enable+0x88>)
    4d62:	4815      	ldr	r0, [pc, #84]	; (4db8 <log_backend_enable+0x8c>)
    4d64:	f009 fc23 	bl	e5ae <assert_print>
    4d68:	4814      	ldr	r0, [pc, #80]	; (4dbc <log_backend_enable+0x90>)
    4d6a:	f009 fc20 	bl	e5ae <assert_print>
    4d6e:	21bb      	movs	r1, #187	; 0xbb
    4d70:	4638      	mov	r0, r7
    4d72:	f009 fc15 	bl	e5a0 <assert_post_action>
    4d76:	e7e3      	b.n	4d40 <log_backend_enable+0x14>
	__ASSERT_NO_MSG(backend != NULL);
    4d78:	4f11      	ldr	r7, [pc, #68]	; (4dc0 <log_backend_enable+0x94>)
    4d7a:	23e6      	movs	r3, #230	; 0xe6
    4d7c:	463a      	mov	r2, r7
    4d7e:	4911      	ldr	r1, [pc, #68]	; (4dc4 <log_backend_enable+0x98>)
    4d80:	480d      	ldr	r0, [pc, #52]	; (4db8 <log_backend_enable+0x8c>)
    4d82:	f009 fc14 	bl	e5ae <assert_print>
    4d86:	21e6      	movs	r1, #230	; 0xe6
    4d88:	4638      	mov	r0, r7
    4d8a:	f009 fc09 	bl	e5a0 <assert_post_action>
    4d8e:	e7d9      	b.n	4d44 <log_backend_enable+0x18>
	__ASSERT_NO_MSG(backend != NULL);
    4d90:	4d0b      	ldr	r5, [pc, #44]	; (4dc0 <log_backend_enable+0x94>)
    4d92:	f240 1317 	movw	r3, #279	; 0x117
    4d96:	462a      	mov	r2, r5
    4d98:	490a      	ldr	r1, [pc, #40]	; (4dc4 <log_backend_enable+0x98>)
    4d9a:	4807      	ldr	r0, [pc, #28]	; (4db8 <log_backend_enable+0x8c>)
    4d9c:	f009 fc07 	bl	e5ae <assert_print>
    4da0:	f240 1117 	movw	r1, #279	; 0x117
    4da4:	4628      	mov	r0, r5
    4da6:	f009 fbfb 	bl	e5a0 <assert_post_action>
    4daa:	e7ce      	b.n	4d4a <log_backend_enable+0x1e>
    4dac:	0000fcd8 	.word	0x0000fcd8
    4db0:	000105d0 	.word	0x000105d0
    4db4:	0001062c 	.word	0x0001062c
    4db8:	000100e4 	.word	0x000100e4
    4dbc:	00010644 	.word	0x00010644
    4dc0:	000104f0 	.word	0x000104f0
    4dc4:	00010528 	.word	0x00010528

00004dc8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    4dc8:	b40e      	push	{r1, r2, r3}
    4dca:	b500      	push	{lr}
    4dcc:	b082      	sub	sp, #8
    4dce:	4601      	mov	r1, r0
    4dd0:	ab03      	add	r3, sp, #12
    4dd2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    4dd6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    4dd8:	4803      	ldr	r0, [pc, #12]	; (4de8 <print_formatted+0x20>)
    4dda:	f7ff fb45 	bl	4468 <cbvprintf>
	va_end(args);

	return length;
}
    4dde:	b002      	add	sp, #8
    4de0:	f85d eb04 	ldr.w	lr, [sp], #4
    4de4:	b003      	add	sp, #12
    4de6:	4770      	bx	lr
    4de8:	0000e609 	.word	0x0000e609

00004dec <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    4dec:	b530      	push	{r4, r5, lr}
    4dee:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    4df0:	f011 0f44 	tst.w	r1, #68	; 0x44
    4df4:	d005      	beq.n	4e02 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    4df6:	4b1a      	ldr	r3, [pc, #104]	; (4e60 <timestamp_print+0x74>)
    4df8:	681c      	ldr	r4, [r3, #0]
    4dfa:	b934      	cbnz	r4, 4e0a <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    4dfc:	2000      	movs	r0, #0
	}

	return length;
}
    4dfe:	b005      	add	sp, #20
    4e00:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    4e02:	4918      	ldr	r1, [pc, #96]	; (4e64 <timestamp_print+0x78>)
    4e04:	f7ff ffe0 	bl	4dc8 <print_formatted>
    4e08:	e7f9      	b.n	4dfe <timestamp_print+0x12>
		timestamp /= timestamp_div;
    4e0a:	4b17      	ldr	r3, [pc, #92]	; (4e68 <timestamp_print+0x7c>)
    4e0c:	6819      	ldr	r1, [r3, #0]
    4e0e:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    4e12:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    4e16:	4a15      	ldr	r2, [pc, #84]	; (4e6c <timestamp_print+0x80>)
    4e18:	fba2 320c 	umull	r3, r2, r2, ip
    4e1c:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    4e1e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    4e22:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    4e26:	4b12      	ldr	r3, [pc, #72]	; (4e70 <timestamp_print+0x84>)
    4e28:	fba3 530e 	umull	r5, r3, r3, lr
    4e2c:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    4e2e:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    4e32:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    4e36:	fb0c f101 	mul.w	r1, ip, r1
    4e3a:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    4e3e:	fb05 1114 	mls	r1, r5, r4, r1
    4e42:	fb0c f101 	mul.w	r1, ip, r1
    4e46:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    4e4a:	9102      	str	r1, [sp, #8]
    4e4c:	9501      	str	r5, [sp, #4]
    4e4e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    4e52:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    4e56:	9100      	str	r1, [sp, #0]
    4e58:	4906      	ldr	r1, [pc, #24]	; (4e74 <timestamp_print+0x88>)
    4e5a:	f7ff ffb5 	bl	4dc8 <print_formatted>
    4e5e:	e7ce      	b.n	4dfe <timestamp_print+0x12>
    4e60:	20004800 	.word	0x20004800
    4e64:	00010668 	.word	0x00010668
    4e68:	20004804 	.word	0x20004804
    4e6c:	91a2b3c5 	.word	0x91a2b3c5
    4e70:	88888889 	.word	0x88888889
    4e74:	00010674 	.word	0x00010674

00004e78 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    4e78:	b161      	cbz	r1, 4e94 <color_print+0x1c>
{
    4e7a:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    4e7c:	b12a      	cbz	r2, 4e8a <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    4e7e:	4a06      	ldr	r2, [pc, #24]	; (4e98 <color_print+0x20>)
    4e80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4e84:	b912      	cbnz	r2, 4e8c <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    4e86:	4a05      	ldr	r2, [pc, #20]	; (4e9c <color_print+0x24>)
    4e88:	e000      	b.n	4e8c <color_print+0x14>
    4e8a:	4a04      	ldr	r2, [pc, #16]	; (4e9c <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    4e8c:	4904      	ldr	r1, [pc, #16]	; (4ea0 <color_print+0x28>)
    4e8e:	f7ff ff9b 	bl	4dc8 <print_formatted>
	}
}
    4e92:	bd08      	pop	{r3, pc}
    4e94:	4770      	bx	lr
    4e96:	bf00      	nop
    4e98:	00010734 	.word	0x00010734
    4e9c:	00010690 	.word	0x00010690
    4ea0:	00010698 	.word	0x00010698

00004ea4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    4ea4:	f011 0f10 	tst.w	r1, #16
    4ea8:	d10b      	bne.n	4ec2 <newline_print+0x1e>
{
    4eaa:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    4eac:	f011 0f20 	tst.w	r1, #32
    4eb0:	d003      	beq.n	4eba <newline_print+0x16>
		print_formatted(ctx, "\n");
    4eb2:	4904      	ldr	r1, [pc, #16]	; (4ec4 <newline_print+0x20>)
    4eb4:	f7ff ff88 	bl	4dc8 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    4eb8:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    4eba:	4903      	ldr	r1, [pc, #12]	; (4ec8 <newline_print+0x24>)
    4ebc:	f7ff ff84 	bl	4dc8 <print_formatted>
    4ec0:	e7fa      	b.n	4eb8 <newline_print+0x14>
    4ec2:	4770      	bx	lr
    4ec4:	0000fecc 	.word	0x0000fecc
    4ec8:	00011e24 	.word	0x00011e24

00004ecc <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    4ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ed0:	4605      	mov	r5, r0
    4ed2:	460f      	mov	r7, r1
    4ed4:	4616      	mov	r6, r2
    4ed6:	4698      	mov	r8, r3
	newline_print(output, flags);
    4ed8:	9906      	ldr	r1, [sp, #24]
    4eda:	f7ff ffe3 	bl	4ea4 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    4ede:	2400      	movs	r4, #0
    4ee0:	4544      	cmp	r4, r8
    4ee2:	da05      	bge.n	4ef0 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    4ee4:	4924      	ldr	r1, [pc, #144]	; (4f78 <hexdump_line_print+0xac>)
    4ee6:	4628      	mov	r0, r5
    4ee8:	f7ff ff6e 	bl	4dc8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    4eec:	3401      	adds	r4, #1
    4eee:	e7f7      	b.n	4ee0 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4ef0:	2400      	movs	r4, #0
    4ef2:	e009      	b.n	4f08 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    4ef4:	4920      	ldr	r1, [pc, #128]	; (4f78 <hexdump_line_print+0xac>)
    4ef6:	4628      	mov	r0, r5
    4ef8:	f7ff ff66 	bl	4dc8 <print_formatted>
    4efc:	e00b      	b.n	4f16 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    4efe:	491f      	ldr	r1, [pc, #124]	; (4f7c <hexdump_line_print+0xb0>)
    4f00:	4628      	mov	r0, r5
    4f02:	f7ff ff61 	bl	4dc8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4f06:	3401      	adds	r4, #1
    4f08:	2c0f      	cmp	r4, #15
    4f0a:	dc0c      	bgt.n	4f26 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    4f0c:	2c00      	cmp	r4, #0
    4f0e:	dd02      	ble.n	4f16 <hexdump_line_print+0x4a>
    4f10:	f014 0f07 	tst.w	r4, #7
    4f14:	d0ee      	beq.n	4ef4 <hexdump_line_print+0x28>
		if (i < length) {
    4f16:	42b4      	cmp	r4, r6
    4f18:	d2f1      	bcs.n	4efe <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    4f1a:	5d3a      	ldrb	r2, [r7, r4]
    4f1c:	4918      	ldr	r1, [pc, #96]	; (4f80 <hexdump_line_print+0xb4>)
    4f1e:	4628      	mov	r0, r5
    4f20:	f7ff ff52 	bl	4dc8 <print_formatted>
    4f24:	e7ef      	b.n	4f06 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    4f26:	4917      	ldr	r1, [pc, #92]	; (4f84 <hexdump_line_print+0xb8>)
    4f28:	4628      	mov	r0, r5
    4f2a:	f7ff ff4d 	bl	4dc8 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4f2e:	2400      	movs	r4, #0
    4f30:	e009      	b.n	4f46 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    4f32:	4911      	ldr	r1, [pc, #68]	; (4f78 <hexdump_line_print+0xac>)
    4f34:	4628      	mov	r0, r5
    4f36:	f7ff ff47 	bl	4dc8 <print_formatted>
    4f3a:	e00b      	b.n	4f54 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    4f3c:	4912      	ldr	r1, [pc, #72]	; (4f88 <hexdump_line_print+0xbc>)
    4f3e:	4628      	mov	r0, r5
    4f40:	f7ff ff42 	bl	4dc8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4f44:	3401      	adds	r4, #1
    4f46:	2c0f      	cmp	r4, #15
    4f48:	dc13      	bgt.n	4f72 <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
    4f4a:	2c00      	cmp	r4, #0
    4f4c:	dd02      	ble.n	4f54 <hexdump_line_print+0x88>
    4f4e:	f014 0f07 	tst.w	r4, #7
    4f52:	d0ee      	beq.n	4f32 <hexdump_line_print+0x66>
		if (i < length) {
    4f54:	42b4      	cmp	r4, r6
    4f56:	d207      	bcs.n	4f68 <hexdump_line_print+0x9c>
			char c = (char)data[i];
    4f58:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
    4f5a:	4b0c      	ldr	r3, [pc, #48]	; (4f8c <hexdump_line_print+0xc0>)
    4f5c:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
    4f5e:	f013 0f97 	tst.w	r3, #151	; 0x97
    4f62:	d1eb      	bne.n	4f3c <hexdump_line_print+0x70>
    4f64:	222e      	movs	r2, #46	; 0x2e
    4f66:	e7e9      	b.n	4f3c <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
    4f68:	4903      	ldr	r1, [pc, #12]	; (4f78 <hexdump_line_print+0xac>)
    4f6a:	4628      	mov	r0, r5
    4f6c:	f7ff ff2c 	bl	4dc8 <print_formatted>
    4f70:	e7e8      	b.n	4f44 <hexdump_line_print+0x78>
		}
	}
}
    4f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f76:	bf00      	nop
    4f78:	000106c0 	.word	0x000106c0
    4f7c:	000106a4 	.word	0x000106a4
    4f80:	0001069c 	.word	0x0001069c
    4f84:	000106a8 	.word	0x000106a8
    4f88:	000106ac 	.word	0x000106ac
    4f8c:	00011e49 	.word	0x00011e49

00004f90 <ids_print>:
{
    4f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f94:	4680      	mov	r8, r0
    4f96:	4616      	mov	r6, r2
    4f98:	461d      	mov	r5, r3
    4f9a:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    4f9e:	b959      	cbnz	r1, 4fb8 <ids_print+0x28>
	int total = 0;
    4fa0:	2400      	movs	r4, #0
	if (source_id >= 0) {
    4fa2:	2f00      	cmp	r7, #0
    4fa4:	db1c      	blt.n	4fe0 <ids_print+0x50>
		total += print_formatted(output,
    4fa6:	b186      	cbz	r6, 4fca <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    4fa8:	2301      	movs	r3, #1
    4faa:	9a07      	ldr	r2, [sp, #28]
    4fac:	4093      	lsls	r3, r2
				(func_on &&
    4fae:	f013 0f10 	tst.w	r3, #16
    4fb2:	d118      	bne.n	4fe6 <ids_print+0x56>
		total += print_formatted(output,
    4fb4:	4e0d      	ldr	r6, [pc, #52]	; (4fec <ids_print+0x5c>)
    4fb6:	e009      	b.n	4fcc <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    4fb8:	4b0d      	ldr	r3, [pc, #52]	; (4ff0 <ids_print+0x60>)
    4fba:	9a07      	ldr	r2, [sp, #28]
    4fbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4fc0:	490c      	ldr	r1, [pc, #48]	; (4ff4 <ids_print+0x64>)
    4fc2:	f7ff ff01 	bl	4dc8 <print_formatted>
    4fc6:	4604      	mov	r4, r0
    4fc8:	e7eb      	b.n	4fa2 <ids_print+0x12>
		total += print_formatted(output,
    4fca:	4e08      	ldr	r6, [pc, #32]	; (4fec <ids_print+0x5c>)
    4fcc:	4639      	mov	r1, r7
    4fce:	4628      	mov	r0, r5
    4fd0:	f7ff fe9c 	bl	4d0c <log_source_name_get>
    4fd4:	4602      	mov	r2, r0
    4fd6:	4631      	mov	r1, r6
    4fd8:	4640      	mov	r0, r8
    4fda:	f7ff fef5 	bl	4dc8 <print_formatted>
    4fde:	4404      	add	r4, r0
}
    4fe0:	4620      	mov	r0, r4
    4fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    4fe6:	4e04      	ldr	r6, [pc, #16]	; (4ff8 <ids_print+0x68>)
    4fe8:	e7f0      	b.n	4fcc <ids_print+0x3c>
    4fea:	bf00      	nop
    4fec:	000106b0 	.word	0x000106b0
    4ff0:	00010748 	.word	0x00010748
    4ff4:	000106bc 	.word	0x000106bc
    4ff8:	000106b8 	.word	0x000106b8

00004ffc <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    4ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5000:	b085      	sub	sp, #20
    5002:	4605      	mov	r5, r0
    5004:	460c      	mov	r4, r1
    5006:	4616      	mov	r6, r2
    5008:	9303      	str	r3, [sp, #12]
    500a:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    500e:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    5012:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    5016:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    501a:	f009 faf3 	bl	e604 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    501e:	b1e8      	cbz	r0, 505c <prefix_print+0x60>
    5020:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    5022:	4913      	ldr	r1, [pc, #76]	; (5070 <prefix_print+0x74>)
    5024:	4628      	mov	r0, r5
    5026:	f7ff fecf 	bl	4dc8 <print_formatted>
    502a:	4607      	mov	r7, r0
	}

	if (stamp) {
    502c:	f1bb 0f00 	cmp.w	fp, #0
    5030:	d116      	bne.n	5060 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    5032:	4642      	mov	r2, r8
    5034:	4651      	mov	r1, sl
    5036:	4628      	mov	r0, r5
    5038:	f009 fb10 	bl	e65c <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    503c:	f8cd 8004 	str.w	r8, [sp, #4]
    5040:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    5044:	9300      	str	r3, [sp, #0]
    5046:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    504a:	4632      	mov	r2, r6
    504c:	4649      	mov	r1, r9
    504e:	4628      	mov	r0, r5
    5050:	f7ff ff9e 	bl	4f90 <ids_print>
			domain_id, source_id, level);


	return length;
}
    5054:	4438      	add	r0, r7
    5056:	b005      	add	sp, #20
    5058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    505c:	2700      	movs	r7, #0
    505e:	e7e5      	b.n	502c <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    5060:	9a03      	ldr	r2, [sp, #12]
    5062:	4621      	mov	r1, r4
    5064:	4628      	mov	r0, r5
    5066:	f7ff fec1 	bl	4dec <timestamp_print>
    506a:	4407      	add	r7, r0
    506c:	e7e1      	b.n	5032 <prefix_print+0x36>
    506e:	bf00      	nop
    5070:	000106c4 	.word	0x000106c4

00005074 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    5074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5078:	b084      	sub	sp, #16
    507a:	4606      	mov	r6, r0
    507c:	460c      	mov	r4, r1
    507e:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    5080:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
    5082:	880a      	ldrh	r2, [r1, #0]
    5084:	f3c2 1882 	ubfx	r8, r2, #6, #3
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    5088:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
    508c:	d037      	beq.n	50fe <log_output_msg2_process+0x8a>
	return msg->hdr.source;
    508e:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
    5090:	7809      	ldrb	r1, [r1, #0]
    5092:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    5096:	b37a      	cbz	r2, 50f8 <log_output_msg2_process+0x84>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    5098:	4829      	ldr	r0, [pc, #164]	; (5140 <log_output_msg2_process+0xcc>)
    509a:	1a12      	subs	r2, r2, r0
    509c:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    50a0:	9202      	str	r2, [sp, #8]
    50a2:	9101      	str	r1, [sp, #4]
    50a4:	f8cd 8000 	str.w	r8, [sp]
    50a8:	2200      	movs	r2, #0
    50aa:	4639      	mov	r1, r7
    50ac:	4630      	mov	r0, r6
    50ae:	f7ff ffa5 	bl	4ffc <prefix_print>
    50b2:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    50b4:	4625      	mov	r5, r4
    50b6:	f855 3b10 	ldr.w	r3, [r5], #16
    50ba:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    50be:	b153      	cbz	r3, 50d6 <log_output_msg2_process+0x62>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    50c0:	f1b8 0f00 	cmp.w	r8, #0
    50c4:	d11e      	bne.n	5104 <log_output_msg2_process+0x90>
    50c6:	481f      	ldr	r0, [pc, #124]	; (5144 <log_output_msg2_process+0xd0>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    50c8:	462b      	mov	r3, r5
    50ca:	4632      	mov	r2, r6
    50cc:	491e      	ldr	r1, [pc, #120]	; (5148 <log_output_msg2_process+0xd4>)
    50ce:	f009 f919 	bl	e304 <cbpprintf_external>
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    50d2:	2800      	cmp	r0, #0
    50d4:	db18      	blt.n	5108 <log_output_msg2_process+0x94>
	*len = msg->hdr.desc.data_len;
    50d6:	8862      	ldrh	r2, [r4, #2]
    50d8:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    50dc:	6821      	ldr	r1, [r4, #0]
    50de:	f3c1 2149 	ubfx	r1, r1, #9, #10
    50e2:	4429      	add	r1, r5
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    50e4:	b9fa      	cbnz	r2, 5126 <log_output_msg2_process+0xb2>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    50e6:	f1b8 0f00 	cmp.w	r8, #0
    50ea:	d122      	bne.n	5132 <log_output_msg2_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    50ec:	4630      	mov	r0, r6
    50ee:	f009 fae8 	bl	e6c2 <log_output_flush>
}
    50f2:	b004      	add	sp, #16
    50f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		int16_t source_id = source ?
    50f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    50fc:	e7d0      	b.n	50a0 <log_output_msg2_process+0x2c>
		prefix_offset = 0;
    50fe:	f04f 0900 	mov.w	r9, #0
    5102:	e7d7      	b.n	50b4 <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    5104:	4811      	ldr	r0, [pc, #68]	; (514c <log_output_msg2_process+0xd8>)
    5106:	e7df      	b.n	50c8 <log_output_msg2_process+0x54>
		__ASSERT_NO_MSG(err >= 0);
    5108:	f8df a044 	ldr.w	sl, [pc, #68]	; 5150 <log_output_msg2_process+0xdc>
    510c:	f240 23b7 	movw	r3, #695	; 0x2b7
    5110:	4652      	mov	r2, sl
    5112:	4910      	ldr	r1, [pc, #64]	; (5154 <log_output_msg2_process+0xe0>)
    5114:	4810      	ldr	r0, [pc, #64]	; (5158 <log_output_msg2_process+0xe4>)
    5116:	f009 fa4a 	bl	e5ae <assert_print>
    511a:	f240 21b7 	movw	r1, #695	; 0x2b7
    511e:	4650      	mov	r0, sl
    5120:	f009 fa3e 	bl	e5a0 <assert_post_action>
    5124:	e7d7      	b.n	50d6 <log_output_msg2_process+0x62>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
    5126:	9700      	str	r7, [sp, #0]
    5128:	464b      	mov	r3, r9
    512a:	4630      	mov	r0, r6
    512c:	f009 faae 	bl	e68c <log_msg2_hexdump>
    5130:	e7d9      	b.n	50e6 <log_output_msg2_process+0x72>
		postfix_print(output, flags, level);
    5132:	4642      	mov	r2, r8
    5134:	4639      	mov	r1, r7
    5136:	4630      	mov	r0, r6
    5138:	f009 fa9c 	bl	e674 <postfix_print>
    513c:	e7d6      	b.n	50ec <log_output_msg2_process+0x78>
    513e:	bf00      	nop
    5140:	0000fc90 	.word	0x0000fc90
    5144:	0000e627 	.word	0x0000e627
    5148:	00004469 	.word	0x00004469
    514c:	0000e609 	.word	0x0000e609
    5150:	000106c8 	.word	0x000106c8
    5154:	00010708 	.word	0x00010708
    5158:	000100e4 	.word	0x000100e4

0000515c <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    515c:	4b07      	ldr	r3, [pc, #28]	; (517c <log_output_timestamp_freq_set+0x20>)
    515e:	2201      	movs	r2, #1
    5160:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    5162:	e004      	b.n	516e <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    5164:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    5166:	4a05      	ldr	r2, [pc, #20]	; (517c <log_output_timestamp_freq_set+0x20>)
    5168:	6813      	ldr	r3, [r2, #0]
    516a:	005b      	lsls	r3, r3, #1
    516c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    516e:	4b04      	ldr	r3, [pc, #16]	; (5180 <log_output_timestamp_freq_set+0x24>)
    5170:	4298      	cmp	r0, r3
    5172:	d8f7      	bhi.n	5164 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    5174:	4b03      	ldr	r3, [pc, #12]	; (5184 <log_output_timestamp_freq_set+0x28>)
    5176:	6018      	str	r0, [r3, #0]
}
    5178:	4770      	bx	lr
    517a:	bf00      	nop
    517c:	20004804 	.word	0x20004804
    5180:	000f4240 	.word	0x000f4240
    5184:	20004800 	.word	0x20004800

00005188 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    5188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    518c:	b087      	sub	sp, #28
    518e:	af02      	add	r7, sp, #8
    5190:	4682      	mov	sl, r0
    5192:	6079      	str	r1, [r7, #4]
    5194:	4691      	mov	r9, r2
    5196:	4698      	mov	r8, r3
    5198:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    519a:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
	int plen;

	if (fmt) {
    519e:	f1bb 0f00 	cmp.w	fp, #0
    51a2:	d016      	beq.n	51d2 <z_impl_z_log_msg2_runtime_vcreate+0x4a>
		va_list ap2;

		va_copy(ap2, ap);
    51a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    51a6:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    51a8:	9300      	str	r3, [sp, #0]
    51aa:	465b      	mov	r3, fp
    51ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    51ae:	2110      	movs	r1, #16
    51b0:	2000      	movs	r0, #0
    51b2:	f7fe f871 	bl	3298 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    51b6:	1e05      	subs	r5, r0, #0
    51b8:	da0c      	bge.n	51d4 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
    51ba:	4c26      	ldr	r4, [pc, #152]	; (5254 <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    51bc:	2367      	movs	r3, #103	; 0x67
    51be:	4622      	mov	r2, r4
    51c0:	4925      	ldr	r1, [pc, #148]	; (5258 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    51c2:	4826      	ldr	r0, [pc, #152]	; (525c <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    51c4:	f009 f9f3 	bl	e5ae <assert_print>
    51c8:	2167      	movs	r1, #103	; 0x67
    51ca:	4620      	mov	r0, r4
    51cc:	f009 f9e8 	bl	e5a0 <assert_post_action>
		va_end(ap2);
    51d0:	e000      	b.n	51d4 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
	} else {
		plen = 0;
    51d2:	2500      	movs	r5, #0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    51d4:	4629      	mov	r1, r5
    51d6:	19ab      	adds	r3, r5, r6
    51d8:	3317      	adds	r3, #23
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    51da:	2400      	movs	r4, #0
    51dc:	f36f 0400 	bfc	r4, #0, #1
    51e0:	f36f 0441 	bfc	r4, #1, #1
    51e4:	f36f 0482 	bfc	r4, #2, #1
    51e8:	f36a 04c5 	bfi	r4, sl, #3, #3
    51ec:	f369 1488 	bfi	r4, r9, #6, #3
    51f0:	f365 2452 	bfi	r4, r5, #9, #10
    51f4:	f366 44de 	bfi	r4, r6, #19, #12
    51f8:	f36f 74df 	bfc	r4, #31, #1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    51fc:	f023 0307 	bic.w	r3, r3, #7
    5200:	ebad 0d03 	sub.w	sp, sp, r3
    5204:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    5206:	466b      	mov	r3, sp
    5208:	f113 0018 	adds.w	r0, r3, #24
    520c:	d00a      	beq.n	5224 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    520e:	f1bb 0f00 	cmp.w	fp, #0
    5212:	d007      	beq.n	5224 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    5214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5216:	9300      	str	r3, [sp, #0]
    5218:	465b      	mov	r3, fp
    521a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    521c:	f7fe f83c 	bl	3298 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    5220:	2800      	cmp	r0, #0
    5222:	db09      	blt.n	5238 <z_impl_z_log_msg2_runtime_vcreate+0xb0>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    5224:	4643      	mov	r3, r8
    5226:	4622      	mov	r2, r4
    5228:	6879      	ldr	r1, [r7, #4]
    522a:	4628      	mov	r0, r5
    522c:	f009 fa56 	bl	e6dc <z_log_msg2_finalize>
	}
}
    5230:	3714      	adds	r7, #20
    5232:	46bd      	mov	sp, r7
    5234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(plen >= 0);
    5238:	f8df 9018 	ldr.w	r9, [pc, #24]	; 5254 <z_impl_z_log_msg2_runtime_vcreate+0xcc>
    523c:	2381      	movs	r3, #129	; 0x81
    523e:	464a      	mov	r2, r9
    5240:	4905      	ldr	r1, [pc, #20]	; (5258 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    5242:	4806      	ldr	r0, [pc, #24]	; (525c <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    5244:	f009 f9b3 	bl	e5ae <assert_print>
    5248:	2181      	movs	r1, #129	; 0x81
    524a:	4648      	mov	r0, r9
    524c:	f009 f9a8 	bl	e5a0 <assert_post_action>
    5250:	e7e8      	b.n	5224 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    5252:	bf00      	nop
    5254:	0001075c 	.word	0x0001075c
    5258:	00010798 	.word	0x00010798
    525c:	000100e4 	.word	0x000100e4

00005260 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    5260:	b570      	push	{r4, r5, r6, lr}
    5262:	4606      	mov	r6, r0
    5264:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    5266:	2400      	movs	r4, #0
    5268:	e006      	b.n	5278 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    526a:	4b05      	ldr	r3, [pc, #20]	; (5280 <char_out+0x20>)
    526c:	6818      	ldr	r0, [r3, #0]
    526e:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    5270:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    5272:	685b      	ldr	r3, [r3, #4]
    5274:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    5276:	3401      	adds	r4, #1
    5278:	42ac      	cmp	r4, r5
    527a:	d3f6      	bcc.n	526a <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    527c:	4628      	mov	r0, r5
    527e:	bd70      	pop	{r4, r5, r6, pc}
    5280:	20004820 	.word	0x20004820

00005284 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    5284:	4b01      	ldr	r3, [pc, #4]	; (528c <format_set+0x8>)
    5286:	6019      	str	r1, [r3, #0]
	return 0;
}
    5288:	2000      	movs	r0, #0
    528a:	4770      	bx	lr
    528c:	20004810 	.word	0x20004810

00005290 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
    5290:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    5292:	4809      	ldr	r0, [pc, #36]	; (52b8 <log_backend_uart_init+0x28>)
    5294:	4b09      	ldr	r3, [pc, #36]	; (52bc <log_backend_uart_init+0x2c>)
    5296:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    5298:	f009 ff87 	bl	f1aa <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    529c:	b100      	cbz	r0, 52a0 <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    529e:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    52a0:	4c07      	ldr	r4, [pc, #28]	; (52c0 <log_backend_uart_init+0x30>)
    52a2:	2379      	movs	r3, #121	; 0x79
    52a4:	4622      	mov	r2, r4
    52a6:	4907      	ldr	r1, [pc, #28]	; (52c4 <log_backend_uart_init+0x34>)
    52a8:	4807      	ldr	r0, [pc, #28]	; (52c8 <log_backend_uart_init+0x38>)
    52aa:	f009 f980 	bl	e5ae <assert_print>
    52ae:	2179      	movs	r1, #121	; 0x79
    52b0:	4620      	mov	r0, r4
    52b2:	f009 f975 	bl	e5a0 <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
    52b6:	e7f2      	b.n	529e <log_backend_uart_init+0xe>
    52b8:	0000faf8 	.word	0x0000faf8
    52bc:	20004820 	.word	0x20004820
    52c0:	000107a4 	.word	0x000107a4
    52c4:	000107dc 	.word	0x000107dc
    52c8:	000100e4 	.word	0x000100e4

000052cc <panic>:

static void panic(struct log_backend const *const backend)
{
    52cc:	b508      	push	{r3, lr}
	in_panic = true;
    52ce:	4b03      	ldr	r3, [pc, #12]	; (52dc <panic+0x10>)
    52d0:	2201      	movs	r2, #1
    52d2:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    52d4:	4802      	ldr	r0, [pc, #8]	; (52e0 <panic+0x14>)
    52d6:	f009 f9f4 	bl	e6c2 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    52da:	bd08      	pop	{r3, pc}
    52dc:	2000555c 	.word	0x2000555c
    52e0:	00010838 	.word	0x00010838

000052e4 <process>:
{
    52e4:	b510      	push	{r4, lr}
    52e6:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    52e8:	4b04      	ldr	r3, [pc, #16]	; (52fc <process+0x18>)
    52ea:	6818      	ldr	r0, [r3, #0]
    52ec:	f7ff fc18 	bl	4b20 <log_format_func_t_get>
    52f0:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    52f2:	220f      	movs	r2, #15
    52f4:	4621      	mov	r1, r4
    52f6:	4802      	ldr	r0, [pc, #8]	; (5300 <process+0x1c>)
    52f8:	4798      	blx	r3
}
    52fa:	bd10      	pop	{r4, pc}
    52fc:	20004810 	.word	0x20004810
    5300:	00010838 	.word	0x00010838

00005304 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    5304:	4b03      	ldr	r3, [pc, #12]	; (5314 <log_backend_rtt_init+0x10>)
    5306:	2201      	movs	r2, #1
    5308:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    530a:	4b03      	ldr	r3, [pc, #12]	; (5318 <log_backend_rtt_init+0x14>)
    530c:	4a03      	ldr	r2, [pc, #12]	; (531c <log_backend_rtt_init+0x18>)
    530e:	601a      	str	r2, [r3, #0]
}
    5310:	4770      	bx	lr
    5312:	bf00      	nop
    5314:	2000555d 	.word	0x2000555d
    5318:	2000484c 	.word	0x2000484c
    531c:	20004834 	.word	0x20004834

00005320 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    5320:	4b01      	ldr	r3, [pc, #4]	; (5328 <format_set+0x8>)
    5322:	6019      	str	r1, [r3, #0]
	return 0;
}
    5324:	2000      	movs	r0, #0
    5326:	4770      	bx	lr
    5328:	20004850 	.word	0x20004850

0000532c <on_failed_write>:
{
    532c:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    532e:	b918      	cbnz	r0, 5338 <on_failed_write+0xc>
		host_present = false;
    5330:	4b04      	ldr	r3, [pc, #16]	; (5344 <on_failed_write+0x18>)
    5332:	2200      	movs	r2, #0
    5334:	701a      	strb	r2, [r3, #0]
}
    5336:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    5338:	f241 3088 	movw	r0, #5000	; 0x1388
    533c:	f00a f825 	bl	f38a <z_impl_k_busy_wait>
    5340:	e7f9      	b.n	5336 <on_failed_write+0xa>
    5342:	bf00      	nop
    5344:	2000555d 	.word	0x2000555d

00005348 <on_write>:
{
    5348:	b538      	push	{r3, r4, r5, lr}
    534a:	4604      	mov	r4, r0
	host_present = true;
    534c:	4b0a      	ldr	r3, [pc, #40]	; (5378 <on_write+0x30>)
    534e:	2201      	movs	r2, #1
    5350:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    5352:	4b0a      	ldr	r3, [pc, #40]	; (537c <on_write+0x34>)
    5354:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    5356:	b92b      	cbnz	r3, 5364 <on_write+0x1c>
}
    5358:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    535a:	1e65      	subs	r5, r4, #1
    535c:	4620      	mov	r0, r4
    535e:	f7ff ffe5 	bl	532c <on_failed_write>
    5362:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    5364:	2000      	movs	r0, #0
    5366:	f004 fbc3 	bl	9af0 <SEGGER_RTT_HasDataUp>
    536a:	2800      	cmp	r0, #0
    536c:	d0f4      	beq.n	5358 <on_write+0x10>
    536e:	4b02      	ldr	r3, [pc, #8]	; (5378 <on_write+0x30>)
    5370:	781b      	ldrb	r3, [r3, #0]
    5372:	2b00      	cmp	r3, #0
    5374:	d1f1      	bne.n	535a <on_write+0x12>
    5376:	e7ef      	b.n	5358 <on_write+0x10>
    5378:	2000555d 	.word	0x2000555d
    537c:	2000555e 	.word	0x2000555e

00005380 <data_out_block_mode>:
{
    5380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5382:	4606      	mov	r6, r0
    5384:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    5386:	2704      	movs	r7, #4
    5388:	e006      	b.n	5398 <data_out_block_mode+0x18>
			on_write(retry_cnt);
    538a:	4638      	mov	r0, r7
    538c:	f7ff ffdc 	bl	5348 <on_write>
	} while ((ret == 0) && host_present);
    5390:	b99c      	cbnz	r4, 53ba <data_out_block_mode+0x3a>
    5392:	4b0d      	ldr	r3, [pc, #52]	; (53c8 <data_out_block_mode+0x48>)
    5394:	781b      	ldrb	r3, [r3, #0]
    5396:	b183      	cbz	r3, 53ba <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5398:	462a      	mov	r2, r5
    539a:	4631      	mov	r1, r6
    539c:	2000      	movs	r0, #0
    539e:	f004 fb43 	bl	9a28 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    53a2:	4604      	mov	r4, r0
    53a4:	2800      	cmp	r0, #0
    53a6:	d1f0      	bne.n	538a <data_out_block_mode+0xa>
		} else if (host_present) {
    53a8:	4b07      	ldr	r3, [pc, #28]	; (53c8 <data_out_block_mode+0x48>)
    53aa:	781b      	ldrb	r3, [r3, #0]
    53ac:	2b00      	cmp	r3, #0
    53ae:	d0ef      	beq.n	5390 <data_out_block_mode+0x10>
			retry_cnt--;
    53b0:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    53b2:	4638      	mov	r0, r7
    53b4:	f7ff ffba 	bl	532c <on_failed_write>
    53b8:	e7ea      	b.n	5390 <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
    53ba:	b914      	cbnz	r4, 53c2 <data_out_block_mode+0x42>
    53bc:	4b02      	ldr	r3, [pc, #8]	; (53c8 <data_out_block_mode+0x48>)
    53be:	781b      	ldrb	r3, [r3, #0]
    53c0:	b903      	cbnz	r3, 53c4 <data_out_block_mode+0x44>
    53c2:	462c      	mov	r4, r5
}
    53c4:	4620      	mov	r0, r4
    53c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53c8:	2000555d 	.word	0x2000555d

000053cc <panic>:
{
    53cc:	b508      	push	{r3, lr}
	panic_mode = true;
    53ce:	4b03      	ldr	r3, [pc, #12]	; (53dc <panic+0x10>)
    53d0:	2201      	movs	r2, #1
    53d2:	701a      	strb	r2, [r3, #0]
    53d4:	4802      	ldr	r0, [pc, #8]	; (53e0 <panic+0x14>)
    53d6:	f009 f974 	bl	e6c2 <log_output_flush>
}
    53da:	bd08      	pop	{r3, pc}
    53dc:	2000555e 	.word	0x2000555e
    53e0:	00010878 	.word	0x00010878

000053e4 <process>:
{
    53e4:	b510      	push	{r4, lr}
    53e6:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    53e8:	4b04      	ldr	r3, [pc, #16]	; (53fc <process+0x18>)
    53ea:	6818      	ldr	r0, [r3, #0]
    53ec:	f7ff fb98 	bl	4b20 <log_format_func_t_get>
    53f0:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    53f2:	220f      	movs	r2, #15
    53f4:	4621      	mov	r1, r4
    53f6:	4802      	ldr	r0, [pc, #8]	; (5400 <process+0x1c>)
    53f8:	4798      	blx	r3
}
    53fa:	bd10      	pop	{r4, pc}
    53fc:	20004850 	.word	0x20004850
    5400:	00010878 	.word	0x00010878

00005404 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    5404:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    5406:	4b40      	ldr	r3, [pc, #256]	; (5508 <pm_system_resume+0x104>)
    5408:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    540a:	f005 031f 	and.w	r3, r5, #31
    540e:	2201      	movs	r2, #1
    5410:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5412:	0969      	lsrs	r1, r5, #5
    5414:	4b3d      	ldr	r3, [pc, #244]	; (550c <pm_system_resume+0x108>)
    5416:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    541a:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    541c:	f3bf 8f5b 	dmb	ish
    5420:	e853 1f00 	ldrex	r1, [r3]
    5424:	ea01 0400 	and.w	r4, r1, r0
    5428:	e843 4600 	strex	r6, r4, [r3]
    542c:	2e00      	cmp	r6, #0
    542e:	d1f7      	bne.n	5420 <pm_system_resume+0x1c>
    5430:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    5434:	420a      	tst	r2, r1
    5436:	d100      	bne.n	543a <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    5438:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    543a:	4a35      	ldr	r2, [pc, #212]	; (5510 <pm_system_resume+0x10c>)
    543c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    5440:	0098      	lsls	r0, r3, #2
    5442:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    5446:	4933      	ldr	r1, [pc, #204]	; (5514 <pm_system_resume+0x110>)
    5448:	b1a9      	cbz	r1, 5476 <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    544a:	7859      	ldrb	r1, [r3, #1]
    544c:	5c10      	ldrb	r0, [r2, r0]
    544e:	f009 fa48 	bl	e8e2 <pm_state_exit_post_ops>
    5452:	f04f 0320 	mov.w	r3, #32
    5456:	f3ef 8611 	mrs	r6, BASEPRI
    545a:	f383 8812 	msr	BASEPRI_MAX, r3
    545e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5462:	482d      	ldr	r0, [pc, #180]	; (5518 <pm_system_resume+0x114>)
    5464:	f004 fe3e 	bl	a0e4 <z_spin_lock_valid>
    5468:	b158      	cbz	r0, 5482 <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    546a:	482b      	ldr	r0, [pc, #172]	; (5518 <pm_system_resume+0x114>)
    546c:	f004 fe5a 	bl	a124 <z_spin_lock_set_owner>
	return list->head;
    5470:	4b2a      	ldr	r3, [pc, #168]	; (551c <pm_system_resume+0x118>)
    5472:	681c      	ldr	r4, [r3, #0]
    5474:	e020      	b.n	54b8 <pm_system_resume+0xb4>
	__asm__ volatile(
    5476:	2300      	movs	r3, #0
    5478:	f383 8811 	msr	BASEPRI, r3
    547c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    5480:	e7e7      	b.n	5452 <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5482:	4c27      	ldr	r4, [pc, #156]	; (5520 <pm_system_resume+0x11c>)
    5484:	238e      	movs	r3, #142	; 0x8e
    5486:	4622      	mov	r2, r4
    5488:	4926      	ldr	r1, [pc, #152]	; (5524 <pm_system_resume+0x120>)
    548a:	4827      	ldr	r0, [pc, #156]	; (5528 <pm_system_resume+0x124>)
    548c:	f009 f88f 	bl	e5ae <assert_print>
    5490:	4921      	ldr	r1, [pc, #132]	; (5518 <pm_system_resume+0x114>)
    5492:	4826      	ldr	r0, [pc, #152]	; (552c <pm_system_resume+0x128>)
    5494:	f009 f88b 	bl	e5ae <assert_print>
    5498:	218e      	movs	r1, #142	; 0x8e
    549a:	4620      	mov	r0, r4
    549c:	f009 f880 	bl	e5a0 <assert_post_action>
    54a0:	e7e3      	b.n	546a <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    54a2:	4b19      	ldr	r3, [pc, #100]	; (5508 <pm_system_resume+0x104>)
    54a4:	7d1b      	ldrb	r3, [r3, #20]
    54a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    54aa:	4919      	ldr	r1, [pc, #100]	; (5510 <pm_system_resume+0x10c>)
    54ac:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    54b0:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    54b2:	b10c      	cbz	r4, 54b8 <pm_system_resume+0xb4>
	return node->next;
    54b4:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    54b6:	b124      	cbz	r4, 54c2 <pm_system_resume+0xbe>
    54b8:	b11c      	cbz	r4, 54c2 <pm_system_resume+0xbe>
			callback = notifier->state_exit;
    54ba:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    54bc:	2a00      	cmp	r2, #0
    54be:	d1f0      	bne.n	54a2 <pm_system_resume+0x9e>
    54c0:	e7f7      	b.n	54b2 <pm_system_resume+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    54c2:	4815      	ldr	r0, [pc, #84]	; (5518 <pm_system_resume+0x114>)
    54c4:	f004 fe1e 	bl	a104 <z_spin_unlock_valid>
    54c8:	b170      	cbz	r0, 54e8 <pm_system_resume+0xe4>
	__asm__ volatile(
    54ca:	f386 8811 	msr	BASEPRI, r6
    54ce:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    54d2:	4a0f      	ldr	r2, [pc, #60]	; (5510 <pm_system_resume+0x10c>)
    54d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    54d8:	00a9      	lsls	r1, r5, #2
    54da:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    54de:	2300      	movs	r3, #0
    54e0:	5053      	str	r3, [r2, r1]
    54e2:	606b      	str	r3, [r5, #4]
    54e4:	60ab      	str	r3, [r5, #8]
}
    54e6:	e7a7      	b.n	5438 <pm_system_resume+0x34>
    54e8:	4c0d      	ldr	r4, [pc, #52]	; (5520 <pm_system_resume+0x11c>)
    54ea:	23b9      	movs	r3, #185	; 0xb9
    54ec:	4622      	mov	r2, r4
    54ee:	4910      	ldr	r1, [pc, #64]	; (5530 <pm_system_resume+0x12c>)
    54f0:	480d      	ldr	r0, [pc, #52]	; (5528 <pm_system_resume+0x124>)
    54f2:	f009 f85c 	bl	e5ae <assert_print>
    54f6:	4908      	ldr	r1, [pc, #32]	; (5518 <pm_system_resume+0x114>)
    54f8:	480e      	ldr	r0, [pc, #56]	; (5534 <pm_system_resume+0x130>)
    54fa:	f009 f858 	bl	e5ae <assert_print>
    54fe:	21b9      	movs	r1, #185	; 0xb9
    5500:	4620      	mov	r0, r4
    5502:	f009 f84d 	bl	e5a0 <assert_post_action>
    5506:	e7e0      	b.n	54ca <pm_system_resume+0xc6>
    5508:	20005324 	.word	0x20005324
    550c:	2000487c 	.word	0x2000487c
    5510:	2000486c 	.word	0x2000486c
    5514:	0000e8e3 	.word	0x0000e8e3
    5518:	20004860 	.word	0x20004860
    551c:	20004864 	.word	0x20004864
    5520:	00010290 	.word	0x00010290
    5524:	000102f0 	.word	0x000102f0
    5528:	000100e4 	.word	0x000100e4
    552c:	00010308 	.word	0x00010308
    5530:	000102c0 	.word	0x000102c0
    5534:	000102d8 	.word	0x000102d8

00005538 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    5538:	b570      	push	{r4, r5, r6, lr}
    553a:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    553c:	4b6d      	ldr	r3, [pc, #436]	; (56f4 <pm_system_suspend+0x1bc>)
    553e:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5540:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5542:	f3bf 8f5b 	dmb	ish
    5546:	4b6c      	ldr	r3, [pc, #432]	; (56f8 <pm_system_suspend+0x1c0>)
    5548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    554c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5550:	f005 021f 	and.w	r2, r5, #31
    5554:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    5556:	f013 0f01 	tst.w	r3, #1
    555a:	d01d      	beq.n	5598 <pm_system_suspend+0x60>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    555c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    5560:	4a66      	ldr	r2, [pc, #408]	; (56fc <pm_system_suspend+0x1c4>)
    5562:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    5566:	b333      	cbz	r3, 55b6 <pm_system_suspend+0x7e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    5568:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    556c:	d139      	bne.n	55e2 <pm_system_suspend+0xaa>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    556e:	f005 fbc9 	bl	ad04 <k_sched_lock>
	__asm__ volatile(
    5572:	f04f 0320 	mov.w	r3, #32
    5576:	f3ef 8611 	mrs	r6, BASEPRI
    557a:	f383 8812 	msr	BASEPRI_MAX, r3
    557e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5582:	485f      	ldr	r0, [pc, #380]	; (5700 <pm_system_suspend+0x1c8>)
    5584:	f004 fdae 	bl	a0e4 <z_spin_lock_valid>
    5588:	2800      	cmp	r0, #0
    558a:	d040      	beq.n	560e <pm_system_suspend+0xd6>
	z_spin_lock_set_owner(l);
    558c:	485c      	ldr	r0, [pc, #368]	; (5700 <pm_system_suspend+0x1c8>)
    558e:	f004 fdc9 	bl	a124 <z_spin_lock_set_owner>
	return list->head;
    5592:	4b5c      	ldr	r3, [pc, #368]	; (5704 <pm_system_suspend+0x1cc>)
    5594:	681c      	ldr	r4, [r3, #0]
    5596:	e055      	b.n	5644 <pm_system_suspend+0x10c>
		info = pm_policy_next_state(id, ticks);
    5598:	4601      	mov	r1, r0
    559a:	4628      	mov	r0, r5
    559c:	f000 f8d6 	bl	574c <pm_policy_next_state>
		if (info != NULL) {
    55a0:	2800      	cmp	r0, #0
    55a2:	d0db      	beq.n	555c <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    55a4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    55a8:	4a54      	ldr	r2, [pc, #336]	; (56fc <pm_system_suspend+0x1c4>)
    55aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    55ae:	c807      	ldmia	r0, {r0, r1, r2}
    55b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    55b4:	e7d2      	b.n	555c <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    55b6:	f005 021f 	and.w	r2, r5, #31
    55ba:	2301      	movs	r3, #1
    55bc:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    55be:	096d      	lsrs	r5, r5, #5
    55c0:	4a4d      	ldr	r2, [pc, #308]	; (56f8 <pm_system_suspend+0x1c0>)
    55c2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    55c6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    55c8:	f3bf 8f5b 	dmb	ish
    55cc:	e855 2f00 	ldrex	r2, [r5]
    55d0:	401a      	ands	r2, r3
    55d2:	e845 2100 	strex	r1, r2, [r5]
    55d6:	2900      	cmp	r1, #0
    55d8:	d1f8      	bne.n	55cc <pm_system_suspend+0x94>
    55da:	f3bf 8f5b 	dmb	ish
		ret = false;
    55de:	2000      	movs	r0, #0
		goto end;
    55e0:	e077      	b.n	56d2 <pm_system_suspend+0x19a>
		     k_us_to_ticks_ceil32(
    55e2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    55e6:	4a45      	ldr	r2, [pc, #276]	; (56fc <pm_system_suspend+0x1c4>)
    55e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    55ec:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    55ee:	0c41      	lsrs	r1, r0, #17
    55f0:	03c0      	lsls	r0, r0, #15
    55f2:	4b45      	ldr	r3, [pc, #276]	; (5708 <pm_system_suspend+0x1d0>)
    55f4:	18c0      	adds	r0, r0, r3
    55f6:	4a45      	ldr	r2, [pc, #276]	; (570c <pm_system_suspend+0x1d4>)
    55f8:	f04f 0300 	mov.w	r3, #0
    55fc:	f141 0100 	adc.w	r1, r1, #0
    5600:	f7fb f9ec 	bl	9dc <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    5604:	2101      	movs	r1, #1
    5606:	1a20      	subs	r0, r4, r0
    5608:	f006 feac 	bl	c364 <z_set_timeout_expiry>
    560c:	e7af      	b.n	556e <pm_system_suspend+0x36>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    560e:	4c40      	ldr	r4, [pc, #256]	; (5710 <pm_system_suspend+0x1d8>)
    5610:	238e      	movs	r3, #142	; 0x8e
    5612:	4622      	mov	r2, r4
    5614:	493f      	ldr	r1, [pc, #252]	; (5714 <pm_system_suspend+0x1dc>)
    5616:	4840      	ldr	r0, [pc, #256]	; (5718 <pm_system_suspend+0x1e0>)
    5618:	f008 ffc9 	bl	e5ae <assert_print>
    561c:	4938      	ldr	r1, [pc, #224]	; (5700 <pm_system_suspend+0x1c8>)
    561e:	483f      	ldr	r0, [pc, #252]	; (571c <pm_system_suspend+0x1e4>)
    5620:	f008 ffc5 	bl	e5ae <assert_print>
    5624:	218e      	movs	r1, #142	; 0x8e
    5626:	4620      	mov	r0, r4
    5628:	f008 ffba 	bl	e5a0 <assert_post_action>
    562c:	e7ae      	b.n	558c <pm_system_suspend+0x54>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    562e:	4b31      	ldr	r3, [pc, #196]	; (56f4 <pm_system_suspend+0x1bc>)
    5630:	7d1b      	ldrb	r3, [r3, #20]
    5632:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5636:	4931      	ldr	r1, [pc, #196]	; (56fc <pm_system_suspend+0x1c4>)
    5638:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    563c:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    563e:	b10c      	cbz	r4, 5644 <pm_system_suspend+0x10c>
	return node->next;
    5640:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    5642:	b124      	cbz	r4, 564e <pm_system_suspend+0x116>
    5644:	b11c      	cbz	r4, 564e <pm_system_suspend+0x116>
			callback = notifier->state_entry;
    5646:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    5648:	2a00      	cmp	r2, #0
    564a:	d1f0      	bne.n	562e <pm_system_suspend+0xf6>
    564c:	e7f7      	b.n	563e <pm_system_suspend+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    564e:	482c      	ldr	r0, [pc, #176]	; (5700 <pm_system_suspend+0x1c8>)
    5650:	f004 fd58 	bl	a104 <z_spin_unlock_valid>
    5654:	2800      	cmp	r0, #0
    5656:	d03d      	beq.n	56d4 <pm_system_suspend+0x19c>
	__asm__ volatile(
    5658:	f386 8811 	msr	BASEPRI, r6
    565c:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    5660:	f005 031f 	and.w	r3, r5, #31
    5664:	2101      	movs	r1, #1
    5666:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5668:	096b      	lsrs	r3, r5, #5
    566a:	4a2d      	ldr	r2, [pc, #180]	; (5720 <pm_system_suspend+0x1e8>)
    566c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5670:	f3bf 8f5b 	dmb	ish
    5674:	e853 2f00 	ldrex	r2, [r3]
    5678:	430a      	orrs	r2, r1
    567a:	e843 2000 	strex	r0, r2, [r3]
    567e:	2800      	cmp	r0, #0
    5680:	d1f8      	bne.n	5674 <pm_system_suspend+0x13c>
    5682:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    5686:	4b27      	ldr	r3, [pc, #156]	; (5724 <pm_system_suspend+0x1ec>)
    5688:	b14b      	cbz	r3, 569e <pm_system_suspend+0x166>
		pm_state_set(info->state, info->substate_id);
    568a:	4b1c      	ldr	r3, [pc, #112]	; (56fc <pm_system_suspend+0x1c4>)
    568c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5690:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    5694:	7849      	ldrb	r1, [r1, #1]
    5696:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    569a:	f009 f916 	bl	e8ca <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    569e:	f7ff feb1 	bl	5404 <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    56a2:	f005 031f 	and.w	r3, r5, #31
    56a6:	2401      	movs	r4, #1
    56a8:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    56ac:	096d      	lsrs	r5, r5, #5
    56ae:	4a12      	ldr	r2, [pc, #72]	; (56f8 <pm_system_suspend+0x1c0>)
    56b0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    56b4:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    56b6:	f3bf 8f5b 	dmb	ish
    56ba:	e855 2f00 	ldrex	r2, [r5]
    56be:	401a      	ands	r2, r3
    56c0:	e845 2100 	strex	r1, r2, [r5]
    56c4:	2900      	cmp	r1, #0
    56c6:	d1f8      	bne.n	56ba <pm_system_suspend+0x182>
    56c8:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    56cc:	f006 f8a6 	bl	b81c <k_sched_unlock>
	bool ret = true;
    56d0:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    56d2:	bd70      	pop	{r4, r5, r6, pc}
    56d4:	4c0e      	ldr	r4, [pc, #56]	; (5710 <pm_system_suspend+0x1d8>)
    56d6:	23b9      	movs	r3, #185	; 0xb9
    56d8:	4622      	mov	r2, r4
    56da:	4913      	ldr	r1, [pc, #76]	; (5728 <pm_system_suspend+0x1f0>)
    56dc:	480e      	ldr	r0, [pc, #56]	; (5718 <pm_system_suspend+0x1e0>)
    56de:	f008 ff66 	bl	e5ae <assert_print>
    56e2:	4907      	ldr	r1, [pc, #28]	; (5700 <pm_system_suspend+0x1c8>)
    56e4:	4811      	ldr	r0, [pc, #68]	; (572c <pm_system_suspend+0x1f4>)
    56e6:	f008 ff62 	bl	e5ae <assert_print>
    56ea:	21b9      	movs	r1, #185	; 0xb9
    56ec:	4620      	mov	r0, r4
    56ee:	f008 ff57 	bl	e5a0 <assert_post_action>
    56f2:	e7b1      	b.n	5658 <pm_system_suspend+0x120>
    56f4:	20005324 	.word	0x20005324
    56f8:	20004878 	.word	0x20004878
    56fc:	2000486c 	.word	0x2000486c
    5700:	20004860 	.word	0x20004860
    5704:	20004864 	.word	0x20004864
    5708:	000f423f 	.word	0x000f423f
    570c:	000f4240 	.word	0x000f4240
    5710:	00010290 	.word	0x00010290
    5714:	000102f0 	.word	0x000102f0
    5718:	000100e4 	.word	0x000100e4
    571c:	00010308 	.word	0x00010308
    5720:	2000487c 	.word	0x2000487c
    5724:	0000e8cb 	.word	0x0000e8cb
    5728:	000102c0 	.word	0x000102c0
    572c:	000102d8 	.word	0x000102d8

00005730 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5730:	f3bf 8f5b 	dmb	ish
    5734:	4b04      	ldr	r3, [pc, #16]	; (5748 <pm_policy_state_lock_is_active+0x18>)
    5736:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    573a:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    573e:	3800      	subs	r0, #0
    5740:	bf18      	it	ne
    5742:	2001      	movne	r0, #1
    5744:	4770      	bx	lr
    5746:	bf00      	nop
    5748:	20004880 	.word	0x20004880

0000574c <pm_policy_next_state>:
{
    574c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5750:	b082      	sub	sp, #8
    5752:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    5754:	a901      	add	r1, sp, #4
    5756:	f000 f843 	bl	57e0 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    575a:	1e44      	subs	r4, r0, #1
    575c:	b224      	sxth	r4, r4
    575e:	e007      	b.n	5770 <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    5760:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    5764:	d032      	beq.n	57cc <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    5766:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    5768:	42b0      	cmp	r0, r6
    576a:	d92f      	bls.n	57cc <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    576c:	3c01      	subs	r4, #1
    576e:	b224      	sxth	r4, r4
    5770:	2c00      	cmp	r4, #0
    5772:	db2a      	blt.n	57ca <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    5774:	9b01      	ldr	r3, [sp, #4]
    5776:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    577a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    577e:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    5782:	f7ff ffd5 	bl	5730 <pm_policy_state_lock_is_active>
    5786:	2800      	cmp	r0, #0
    5788:	d1f0      	bne.n	576c <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    578a:	6868      	ldr	r0, [r5, #4]
    578c:	0c41      	lsrs	r1, r0, #17
    578e:	03c0      	lsls	r0, r0, #15
    5790:	4f10      	ldr	r7, [pc, #64]	; (57d4 <pm_policy_next_state+0x88>)
    5792:	19c0      	adds	r0, r0, r7
    5794:	4a10      	ldr	r2, [pc, #64]	; (57d8 <pm_policy_next_state+0x8c>)
    5796:	f04f 0300 	mov.w	r3, #0
    579a:	f141 0100 	adc.w	r1, r1, #0
    579e:	f7fb f91d 	bl	9dc <__aeabi_uldivmod>
    57a2:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    57a4:	68ab      	ldr	r3, [r5, #8]
    57a6:	0c59      	lsrs	r1, r3, #17
    57a8:	03db      	lsls	r3, r3, #15
    57aa:	19d8      	adds	r0, r3, r7
    57ac:	4a0a      	ldr	r2, [pc, #40]	; (57d8 <pm_policy_next_state+0x8c>)
    57ae:	f04f 0300 	mov.w	r3, #0
    57b2:	f141 0100 	adc.w	r1, r1, #0
    57b6:	f7fb f911 	bl	9dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    57ba:	4b08      	ldr	r3, [pc, #32]	; (57dc <pm_policy_next_state+0x90>)
    57bc:	681b      	ldr	r3, [r3, #0]
    57be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    57c2:	d0cd      	beq.n	5760 <pm_policy_next_state+0x14>
    57c4:	4283      	cmp	r3, r0
    57c6:	d8cb      	bhi.n	5760 <pm_policy_next_state+0x14>
    57c8:	e7d0      	b.n	576c <pm_policy_next_state+0x20>
	return NULL;
    57ca:	2500      	movs	r5, #0
}
    57cc:	4628      	mov	r0, r5
    57ce:	b002      	add	sp, #8
    57d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57d4:	000f423f 	.word	0x000f423f
    57d8:	000f4240 	.word	0x000f4240
    57dc:	20004028 	.word	0x20004028

000057e0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    57e0:	b908      	cbnz	r0, 57e6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    57e2:	4b02      	ldr	r3, [pc, #8]	; (57ec <pm_state_cpu_get_all+0xc>)
    57e4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    57e6:	2000      	movs	r0, #0
    57e8:	4770      	bx	lr
    57ea:	bf00      	nop
    57ec:	0001088c 	.word	0x0001088c

000057f0 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    57f0:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    57f2:	4802      	ldr	r0, [pc, #8]	; (57fc <nrf_cc3xx_platform_abort_init+0xc>)
    57f4:	f008 fbf0 	bl	dfd8 <nrf_cc3xx_platform_set_abort>
}
    57f8:	bd08      	pop	{r3, pc}
    57fa:	bf00      	nop
    57fc:	0001088c 	.word	0x0001088c

00005800 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    5800:	b1d0      	cbz	r0, 5838 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5802:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    5804:	6842      	ldr	r2, [r0, #4]
    5806:	2a04      	cmp	r2, #4
    5808:	d005      	beq.n	5816 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    580a:	b1d2      	cbz	r2, 5842 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    580c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    580e:	f004 ffc9 	bl	a7a4 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    5812:	2000      	movs	r0, #0
    }
}
    5814:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    5816:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5818:	2200      	movs	r2, #0
    581a:	f3bf 8f5b 	dmb	ish
    581e:	e853 1f00 	ldrex	r1, [r3]
    5822:	2901      	cmp	r1, #1
    5824:	d103      	bne.n	582e <mutex_unlock_platform+0x2e>
    5826:	e843 2000 	strex	r0, r2, [r3]
    582a:	2800      	cmp	r0, #0
    582c:	d1f7      	bne.n	581e <mutex_unlock_platform+0x1e>
    582e:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5832:	d104      	bne.n	583e <mutex_unlock_platform+0x3e>
    5834:	4610      	mov	r0, r2
    5836:	e7ed      	b.n	5814 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    5838:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    583c:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    583e:	4802      	ldr	r0, [pc, #8]	; (5848 <mutex_unlock_platform+0x48>)
    5840:	e7e8      	b.n	5814 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    5842:	4802      	ldr	r0, [pc, #8]	; (584c <mutex_unlock_platform+0x4c>)
    5844:	e7e6      	b.n	5814 <mutex_unlock_platform+0x14>
    5846:	bf00      	nop
    5848:	ffff8fe9 	.word	0xffff8fe9
    584c:	ffff8fea 	.word	0xffff8fea

00005850 <mutex_lock_platform>:
    if(mutex == NULL) {
    5850:	b320      	cbz	r0, 589c <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5852:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    5854:	6842      	ldr	r2, [r0, #4]
    5856:	2a04      	cmp	r2, #4
    5858:	d002      	beq.n	5860 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    585a:	b992      	cbnz	r2, 5882 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    585c:	4811      	ldr	r0, [pc, #68]	; (58a4 <mutex_lock_platform+0x54>)
    585e:	e00f      	b.n	5880 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    5860:	6803      	ldr	r3, [r0, #0]
    5862:	2201      	movs	r2, #1
    5864:	f3bf 8f5b 	dmb	ish
    5868:	e853 1f00 	ldrex	r1, [r3]
    586c:	2900      	cmp	r1, #0
    586e:	d103      	bne.n	5878 <mutex_lock_platform+0x28>
    5870:	e843 2000 	strex	r0, r2, [r3]
    5874:	2800      	cmp	r0, #0
    5876:	d1f7      	bne.n	5868 <mutex_lock_platform+0x18>
    5878:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    587c:	d10c      	bne.n	5898 <mutex_lock_platform+0x48>
    587e:	2000      	movs	r0, #0
}
    5880:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    5882:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    5884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    588c:	f004 fe6a 	bl	a564 <z_impl_k_mutex_lock>
        if (ret == 0) {
    5890:	2800      	cmp	r0, #0
    5892:	d0f5      	beq.n	5880 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    5894:	4804      	ldr	r0, [pc, #16]	; (58a8 <mutex_lock_platform+0x58>)
    5896:	e7f3      	b.n	5880 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5898:	4803      	ldr	r0, [pc, #12]	; (58a8 <mutex_lock_platform+0x58>)
    589a:	e7f1      	b.n	5880 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    589c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    58a0:	4770      	bx	lr
    58a2:	bf00      	nop
    58a4:	ffff8fea 	.word	0xffff8fea
    58a8:	ffff8fe9 	.word	0xffff8fe9

000058ac <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    58ac:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    58ae:	4604      	mov	r4, r0
    58b0:	b190      	cbz	r0, 58d8 <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    58b2:	6863      	ldr	r3, [r4, #4]
    58b4:	2b04      	cmp	r3, #4
    58b6:	d00e      	beq.n	58d6 <mutex_free_platform+0x2a>
    58b8:	2b08      	cmp	r3, #8
    58ba:	d00c      	beq.n	58d6 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    58bc:	b15b      	cbz	r3, 58d6 <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    58be:	f013 0f02 	tst.w	r3, #2
    58c2:	d10e      	bne.n	58e2 <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    58c4:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    58c6:	2200      	movs	r2, #0
    58c8:	601a      	str	r2, [r3, #0]
    58ca:	605a      	str	r2, [r3, #4]
    58cc:	609a      	str	r2, [r3, #8]
    58ce:	60da      	str	r2, [r3, #12]
    58d0:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    58d2:	2300      	movs	r3, #0
    58d4:	6063      	str	r3, [r4, #4]
}
    58d6:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    58d8:	4b05      	ldr	r3, [pc, #20]	; (58f0 <mutex_free_platform+0x44>)
    58da:	685b      	ldr	r3, [r3, #4]
    58dc:	4805      	ldr	r0, [pc, #20]	; (58f4 <mutex_free_platform+0x48>)
    58de:	4798      	blx	r3
    58e0:	e7e7      	b.n	58b2 <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    58e2:	4621      	mov	r1, r4
    58e4:	4804      	ldr	r0, [pc, #16]	; (58f8 <mutex_free_platform+0x4c>)
    58e6:	f004 fb87 	bl	9ff8 <k_mem_slab_free>
        mutex->mutex = NULL;
    58ea:	2300      	movs	r3, #0
    58ec:	6023      	str	r3, [r4, #0]
    58ee:	e7f0      	b.n	58d2 <mutex_free_platform+0x26>
    58f0:	2000416c 	.word	0x2000416c
    58f4:	00010894 	.word	0x00010894
    58f8:	2000489c 	.word	0x2000489c

000058fc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    58fc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    58fe:	4604      	mov	r4, r0
    5900:	b178      	cbz	r0, 5922 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    5902:	6863      	ldr	r3, [r4, #4]
    5904:	2b04      	cmp	r3, #4
    5906:	d00b      	beq.n	5920 <mutex_init_platform+0x24>
    5908:	2b08      	cmp	r3, #8
    590a:	d009      	beq.n	5920 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    590c:	b90b      	cbnz	r3, 5912 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    590e:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    5910:	b163      	cbz	r3, 592c <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    5912:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    5914:	f009 fcd8 	bl	f2c8 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    5918:	6863      	ldr	r3, [r4, #4]
    591a:	f043 0301 	orr.w	r3, r3, #1
    591e:	6063      	str	r3, [r4, #4]
}
    5920:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    5922:	4b10      	ldr	r3, [pc, #64]	; (5964 <mutex_init_platform+0x68>)
    5924:	685b      	ldr	r3, [r3, #4]
    5926:	4810      	ldr	r0, [pc, #64]	; (5968 <mutex_init_platform+0x6c>)
    5928:	4798      	blx	r3
    592a:	e7ea      	b.n	5902 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    592c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5934:	4621      	mov	r1, r4
    5936:	480d      	ldr	r0, [pc, #52]	; (596c <mutex_init_platform+0x70>)
    5938:	f004 fae8 	bl	9f0c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    593c:	b908      	cbnz	r0, 5942 <mutex_init_platform+0x46>
    593e:	6823      	ldr	r3, [r4, #0]
    5940:	b91b      	cbnz	r3, 594a <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    5942:	4b08      	ldr	r3, [pc, #32]	; (5964 <mutex_init_platform+0x68>)
    5944:	685b      	ldr	r3, [r3, #4]
    5946:	480a      	ldr	r0, [pc, #40]	; (5970 <mutex_init_platform+0x74>)
    5948:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    594a:	6823      	ldr	r3, [r4, #0]
    594c:	2200      	movs	r2, #0
    594e:	601a      	str	r2, [r3, #0]
    5950:	605a      	str	r2, [r3, #4]
    5952:	609a      	str	r2, [r3, #8]
    5954:	60da      	str	r2, [r3, #12]
    5956:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    5958:	6863      	ldr	r3, [r4, #4]
    595a:	f043 0302 	orr.w	r3, r3, #2
    595e:	6063      	str	r3, [r4, #4]
    5960:	e7d7      	b.n	5912 <mutex_init_platform+0x16>
    5962:	bf00      	nop
    5964:	2000416c 	.word	0x2000416c
    5968:	00010894 	.word	0x00010894
    596c:	2000489c 	.word	0x2000489c
    5970:	000108bc 	.word	0x000108bc

00005974 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    5974:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    5976:	2340      	movs	r3, #64	; 0x40
    5978:	2214      	movs	r2, #20
    597a:	4904      	ldr	r1, [pc, #16]	; (598c <nrf_cc3xx_platform_mutex_init+0x18>)
    597c:	4804      	ldr	r0, [pc, #16]	; (5990 <nrf_cc3xx_platform_mutex_init+0x1c>)
    597e:	f009 fc4f 	bl	f220 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    5982:	4904      	ldr	r1, [pc, #16]	; (5994 <nrf_cc3xx_platform_mutex_init+0x20>)
    5984:	4804      	ldr	r0, [pc, #16]	; (5998 <nrf_cc3xx_platform_mutex_init+0x24>)
    5986:	f008 fb87 	bl	e098 <nrf_cc3xx_platform_set_mutexes>
}
    598a:	bd08      	pop	{r3, pc}
    598c:	200048bc 	.word	0x200048bc
    5990:	2000489c 	.word	0x2000489c
    5994:	000108fc 	.word	0x000108fc
    5998:	000108ec 	.word	0x000108ec

0000599c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    599c:	4901      	ldr	r1, [pc, #4]	; (59a4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    599e:	2210      	movs	r2, #16
	str	r2, [r1]
    59a0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    59a2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    59a4:	e000ed10 	.word	0xe000ed10

000059a8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    59a8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    59aa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    59ac:	f380 8811 	msr	BASEPRI, r0
	isb
    59b0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    59b4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    59b8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    59ba:	b662      	cpsie	i
	isb
    59bc:	f3bf 8f6f 	isb	sy

	bx	lr
    59c0:	4770      	bx	lr
    59c2:	bf00      	nop

000059c4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    59c4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    59c6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    59c8:	f381 8811 	msr	BASEPRI, r1

	wfe
    59cc:	bf20      	wfe

	msr	BASEPRI, r0
    59ce:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    59d2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    59d4:	4770      	bx	lr
    59d6:	bf00      	nop

000059d8 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    59d8:	b570      	push	{r4, r5, r6, lr}
    59da:	b086      	sub	sp, #24
    59dc:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    59de:	4e1e      	ldr	r6, [pc, #120]	; (5a58 <esf_dump+0x80>)
    59e0:	6883      	ldr	r3, [r0, #8]
    59e2:	9305      	str	r3, [sp, #20]
    59e4:	6843      	ldr	r3, [r0, #4]
    59e6:	9304      	str	r3, [sp, #16]
    59e8:	6803      	ldr	r3, [r0, #0]
    59ea:	9303      	str	r3, [sp, #12]
    59ec:	4b1b      	ldr	r3, [pc, #108]	; (5a5c <esf_dump+0x84>)
    59ee:	9302      	str	r3, [sp, #8]
    59f0:	2400      	movs	r4, #0
    59f2:	9401      	str	r4, [sp, #4]
    59f4:	9400      	str	r4, [sp, #0]
    59f6:	4623      	mov	r3, r4
    59f8:	2201      	movs	r2, #1
    59fa:	4631      	mov	r1, r6
    59fc:	4620      	mov	r0, r4
    59fe:	f008 fe8a 	bl	e716 <z_log_msg2_runtime_create>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    5a02:	696b      	ldr	r3, [r5, #20]
    5a04:	9305      	str	r3, [sp, #20]
    5a06:	692b      	ldr	r3, [r5, #16]
    5a08:	9304      	str	r3, [sp, #16]
    5a0a:	68eb      	ldr	r3, [r5, #12]
    5a0c:	9303      	str	r3, [sp, #12]
    5a0e:	4b14      	ldr	r3, [pc, #80]	; (5a60 <esf_dump+0x88>)
    5a10:	9302      	str	r3, [sp, #8]
    5a12:	9401      	str	r4, [sp, #4]
    5a14:	9400      	str	r4, [sp, #0]
    5a16:	4623      	mov	r3, r4
    5a18:	2201      	movs	r2, #1
    5a1a:	4631      	mov	r1, r6
    5a1c:	4620      	mov	r0, r4
    5a1e:	f008 fe7a 	bl	e716 <z_log_msg2_runtime_create>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    5a22:	69eb      	ldr	r3, [r5, #28]
    5a24:	9303      	str	r3, [sp, #12]
    5a26:	4b0f      	ldr	r3, [pc, #60]	; (5a64 <esf_dump+0x8c>)
    5a28:	9302      	str	r3, [sp, #8]
    5a2a:	9401      	str	r4, [sp, #4]
    5a2c:	9400      	str	r4, [sp, #0]
    5a2e:	4623      	mov	r3, r4
    5a30:	2201      	movs	r2, #1
    5a32:	4631      	mov	r1, r6
    5a34:	4620      	mov	r0, r4
    5a36:	f008 fe6e 	bl	e716 <z_log_msg2_runtime_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    5a3a:	69ab      	ldr	r3, [r5, #24]
    5a3c:	9303      	str	r3, [sp, #12]
    5a3e:	4b0a      	ldr	r3, [pc, #40]	; (5a68 <esf_dump+0x90>)
    5a40:	9302      	str	r3, [sp, #8]
    5a42:	9401      	str	r4, [sp, #4]
    5a44:	9400      	str	r4, [sp, #0]
    5a46:	4623      	mov	r3, r4
    5a48:	2201      	movs	r2, #1
    5a4a:	4631      	mov	r1, r6
    5a4c:	4620      	mov	r0, r4
    5a4e:	f008 fe62 	bl	e716 <z_log_msg2_runtime_create>
		esf->basic.pc);
}
    5a52:	b006      	add	sp, #24
    5a54:	bd70      	pop	{r4, r5, r6, pc}
    5a56:	bf00      	nop
    5a58:	0000fcb8 	.word	0x0000fcb8
    5a5c:	00010910 	.word	0x00010910
    5a60:	00010940 	.word	0x00010940
    5a64:	00010970 	.word	0x00010970
    5a68:	00010980 	.word	0x00010980

00005a6c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    5a6c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    5a6e:	2800      	cmp	r0, #0
    5a70:	db07      	blt.n	5a82 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5a72:	f000 021f 	and.w	r2, r0, #31
    5a76:	0940      	lsrs	r0, r0, #5
    5a78:	2301      	movs	r3, #1
    5a7a:	4093      	lsls	r3, r2
    5a7c:	4a01      	ldr	r2, [pc, #4]	; (5a84 <arch_irq_enable+0x18>)
    5a7e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    5a82:	4770      	bx	lr
    5a84:	e000e100 	.word	0xe000e100

00005a88 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    5a88:	0942      	lsrs	r2, r0, #5
    5a8a:	4b05      	ldr	r3, [pc, #20]	; (5aa0 <arch_irq_is_enabled+0x18>)
    5a8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5a90:	f000 001f 	and.w	r0, r0, #31
    5a94:	2301      	movs	r3, #1
    5a96:	fa03 f000 	lsl.w	r0, r3, r0
}
    5a9a:	4010      	ands	r0, r2
    5a9c:	4770      	bx	lr
    5a9e:	bf00      	nop
    5aa0:	e000e100 	.word	0xe000e100

00005aa4 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    5aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5aa6:	4604      	mov	r4, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    5aa8:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    5aaa:	2d07      	cmp	r5, #7
    5aac:	d80b      	bhi.n	5ac6 <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5aae:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    5ab0:	2800      	cmp	r0, #0
    5ab2:	db1b      	blt.n	5aec <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5ab4:	016d      	lsls	r5, r5, #5
    5ab6:	b2ed      	uxtb	r5, r5
    5ab8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    5abc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    5ac0:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    5ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ac6:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    5ac8:	4f0c      	ldr	r7, [pc, #48]	; (5afc <z_arm_irq_priority_set+0x58>)
    5aca:	2357      	movs	r3, #87	; 0x57
    5acc:	463a      	mov	r2, r7
    5ace:	490c      	ldr	r1, [pc, #48]	; (5b00 <z_arm_irq_priority_set+0x5c>)
    5ad0:	480c      	ldr	r0, [pc, #48]	; (5b04 <z_arm_irq_priority_set+0x60>)
    5ad2:	f008 fd6c 	bl	e5ae <assert_print>
    5ad6:	2307      	movs	r3, #7
    5ad8:	4622      	mov	r2, r4
    5ada:	4631      	mov	r1, r6
    5adc:	480a      	ldr	r0, [pc, #40]	; (5b08 <z_arm_irq_priority_set+0x64>)
    5ade:	f008 fd66 	bl	e5ae <assert_print>
    5ae2:	2157      	movs	r1, #87	; 0x57
    5ae4:	4638      	mov	r0, r7
    5ae6:	f008 fd5b 	bl	e5a0 <assert_post_action>
    5aea:	e7e0      	b.n	5aae <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5aec:	f000 000f 	and.w	r0, r0, #15
    5af0:	016d      	lsls	r5, r5, #5
    5af2:	b2ed      	uxtb	r5, r5
    5af4:	4b05      	ldr	r3, [pc, #20]	; (5b0c <z_arm_irq_priority_set+0x68>)
    5af6:	541d      	strb	r5, [r3, r0]
}
    5af8:	e7e4      	b.n	5ac4 <z_arm_irq_priority_set+0x20>
    5afa:	bf00      	nop
    5afc:	000109b0 	.word	0x000109b0
    5b00:	000109e8 	.word	0x000109e8
    5b04:	000100e4 	.word	0x000100e4
    5b08:	00010a04 	.word	0x00010a04
    5b0c:	e000ed14 	.word	0xe000ed14

00005b10 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    5b10:	bf30      	wfi
    b z_SysNmiOnReset
    5b12:	f7ff bffd 	b.w	5b10 <z_SysNmiOnReset>
    5b16:	bf00      	nop

00005b18 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    5b18:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5b1a:	4b0b      	ldr	r3, [pc, #44]	; (5b48 <z_arm_prep_c+0x30>)
    5b1c:	4a0b      	ldr	r2, [pc, #44]	; (5b4c <z_arm_prep_c+0x34>)
    5b1e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    5b22:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5b24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5b28:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    5b2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    5b30:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    5b34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    5b38:	f004 f914 	bl	9d64 <z_bss_zero>
	z_data_copy();
    5b3c:	f006 fa20 	bl	bf80 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    5b40:	f000 fc72 	bl	6428 <z_arm_interrupt_init>
	z_cstart();
    5b44:	f004 f96c 	bl	9e20 <z_cstart>
    5b48:	e000ed00 	.word	0xe000ed00
    5b4c:	00000000 	.word	0x00000000

00005b50 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    5b50:	4a0a      	ldr	r2, [pc, #40]	; (5b7c <arch_swap+0x2c>)
    5b52:	6893      	ldr	r3, [r2, #8]
    5b54:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    5b58:	4909      	ldr	r1, [pc, #36]	; (5b80 <arch_swap+0x30>)
    5b5a:	6809      	ldr	r1, [r1, #0]
    5b5c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5b60:	4908      	ldr	r1, [pc, #32]	; (5b84 <arch_swap+0x34>)
    5b62:	684b      	ldr	r3, [r1, #4]
    5b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    5b68:	604b      	str	r3, [r1, #4]
    5b6a:	2300      	movs	r3, #0
    5b6c:	f383 8811 	msr	BASEPRI, r3
    5b70:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    5b74:	6893      	ldr	r3, [r2, #8]
}
    5b76:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    5b7a:	4770      	bx	lr
    5b7c:	20005324 	.word	0x20005324
    5b80:	000116b4 	.word	0x000116b4
    5b84:	e000ed00 	.word	0xe000ed00

00005b88 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    5b88:	4913      	ldr	r1, [pc, #76]	; (5bd8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    5b8a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    5b8c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    5b90:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    5b92:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    5b96:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5b9a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    5b9c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    5ba0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    5ba4:	4f0d      	ldr	r7, [pc, #52]	; (5bdc <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    5ba6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    5baa:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    5bac:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    5bae:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    5bb0:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    5bb4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5bb6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    5bba:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    5bbe:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    5bc0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    5bc2:	f000 fcdb 	bl	657c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    5bc6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    5bca:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    5bce:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    5bd2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    5bd6:	4770      	bx	lr
    ldr r1, =_kernel
    5bd8:	20005324 	.word	0x20005324
    ldr v4, =_SCS_ICSR
    5bdc:	e000ed04 	.word	0xe000ed04

00005be0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    5be0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5be4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    5be6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    5bea:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    5bee:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5bf0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5bf4:	2902      	cmp	r1, #2
    beq _oops
    5bf6:	d0ff      	beq.n	5bf8 <_oops>

00005bf8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    5bf8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    5bfa:	f008 fda7 	bl	e74c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    5bfe:	bd01      	pop	{r0, pc}

00005c00 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    5c00:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    5c02:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    5c06:	490e      	ldr	r1, [pc, #56]	; (5c40 <arch_new_thread+0x40>)
    5c08:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    5c0c:	f021 0101 	bic.w	r1, r1, #1
    5c10:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    5c14:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    5c18:	9b01      	ldr	r3, [sp, #4]
    5c1a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    5c1e:	9b02      	ldr	r3, [sp, #8]
    5c20:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    5c24:	9b03      	ldr	r3, [sp, #12]
    5c26:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    5c2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    5c2e:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    5c32:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    5c34:	2300      	movs	r3, #0
    5c36:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    5c3a:	bc10      	pop	{r4}
    5c3c:	4770      	bx	lr
    5c3e:	bf00      	nop
    5c40:	0000e4f1 	.word	0x0000e4f1

00005c44 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    5c44:	4b12      	ldr	r3, [pc, #72]	; (5c90 <z_check_thread_stack_fail+0x4c>)
    5c46:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    5c48:	b302      	cbz	r2, 5c8c <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    5c4a:	f110 0f16 	cmn.w	r0, #22
    5c4e:	d011      	beq.n	5c74 <z_check_thread_stack_fail+0x30>
    5c50:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    5c54:	f1a3 0c20 	sub.w	ip, r3, #32
    5c58:	4584      	cmp	ip, r0
    5c5a:	d805      	bhi.n	5c68 <z_check_thread_stack_fail+0x24>
    5c5c:	4283      	cmp	r3, r0
    5c5e:	d905      	bls.n	5c6c <z_check_thread_stack_fail+0x28>
    5c60:	428b      	cmp	r3, r1
    5c62:	d805      	bhi.n	5c70 <z_check_thread_stack_fail+0x2c>
    5c64:	2100      	movs	r1, #0
    5c66:	e00b      	b.n	5c80 <z_check_thread_stack_fail+0x3c>
    5c68:	2100      	movs	r1, #0
    5c6a:	e009      	b.n	5c80 <z_check_thread_stack_fail+0x3c>
    5c6c:	2100      	movs	r1, #0
    5c6e:	e007      	b.n	5c80 <z_check_thread_stack_fail+0x3c>
    5c70:	2101      	movs	r1, #1
    5c72:	e005      	b.n	5c80 <z_check_thread_stack_fail+0x3c>
    5c74:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    5c78:	428b      	cmp	r3, r1
    5c7a:	bf94      	ite	ls
    5c7c:	2100      	movls	r1, #0
    5c7e:	2101      	movhi	r1, #1
    5c80:	b909      	cbnz	r1, 5c86 <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    5c82:	2000      	movs	r0, #0
}
    5c84:	4770      	bx	lr
		return thread->stack_info.start;
    5c86:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    5c8a:	4770      	bx	lr
		return 0;
    5c8c:	2000      	movs	r0, #0
    5c8e:	4770      	bx	lr
    5c90:	20005324 	.word	0x20005324

00005c94 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    5c94:	b508      	push	{r3, lr}
    5c96:	460d      	mov	r5, r1
    5c98:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    5c9a:	4b08      	ldr	r3, [pc, #32]	; (5cbc <arch_switch_to_main_thread+0x28>)
    5c9c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    5c9e:	f000 fc6d 	bl	657c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    5ca2:	4620      	mov	r0, r4
    5ca4:	f385 8809 	msr	PSP, r5
    5ca8:	2100      	movs	r1, #0
    5caa:	b663      	cpsie	if
    5cac:	f381 8811 	msr	BASEPRI, r1
    5cb0:	f3bf 8f6f 	isb	sy
    5cb4:	2200      	movs	r2, #0
    5cb6:	2300      	movs	r3, #0
    5cb8:	f008 fc1a 	bl	e4f0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    5cbc:	20005324 	.word	0x20005324

00005cc0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5cc0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    5cc2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    5cc4:	4a0b      	ldr	r2, [pc, #44]	; (5cf4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    5cc6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    5cc8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    5cca:	bf1e      	ittt	ne
	movne	r1, #0
    5ccc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5cce:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    5cd0:	f009 fade 	blne	f290 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5cd4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    5cd6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5cda:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5cde:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    5ce2:	4905      	ldr	r1, [pc, #20]	; (5cf8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5ce4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    5ce6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    5ce8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    5cea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    5cee:	4903      	ldr	r1, [pc, #12]	; (5cfc <_isr_wrapper+0x3c>)
	bx r1
    5cf0:	4708      	bx	r1
    5cf2:	0000      	.short	0x0000
	ldr r2, =_kernel
    5cf4:	20005324 	.word	0x20005324
	ldr r1, =_sw_isr_table
    5cf8:	0000fb10 	.word	0x0000fb10
	ldr r1, =z_arm_int_exit
    5cfc:	00005d01 	.word	0x00005d01

00005d00 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    5d00:	4b04      	ldr	r3, [pc, #16]	; (5d14 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    5d02:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    5d04:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    5d06:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    5d08:	d003      	beq.n	5d12 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    5d0a:	4903      	ldr	r1, [pc, #12]	; (5d18 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    5d0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    5d10:	600a      	str	r2, [r1, #0]

00005d12 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    5d12:	4770      	bx	lr
	ldr r3, =_kernel
    5d14:	20005324 	.word	0x20005324
	ldr r1, =_SCS_ICSR
    5d18:	e000ed04 	.word	0xe000ed04

00005d1c <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    5d1c:	b570      	push	{r4, r5, r6, lr}
    5d1e:	b084      	sub	sp, #16
    5d20:	4605      	mov	r5, r0
    5d22:	460e      	mov	r6, r1
    5d24:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    5d26:	4b47      	ldr	r3, [pc, #284]	; (5e44 <bus_fault+0x128>)
    5d28:	9302      	str	r3, [sp, #8]
    5d2a:	2000      	movs	r0, #0
    5d2c:	9001      	str	r0, [sp, #4]
    5d2e:	9000      	str	r0, [sp, #0]
    5d30:	4603      	mov	r3, r0
    5d32:	2201      	movs	r2, #1
    5d34:	4944      	ldr	r1, [pc, #272]	; (5e48 <bus_fault+0x12c>)
    5d36:	f008 fd1d 	bl	e774 <z_log_msg2_runtime_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5d3a:	4b44      	ldr	r3, [pc, #272]	; (5e4c <bus_fault+0x130>)
    5d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d3e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    5d42:	d125      	bne.n	5d90 <bus_fault+0x74>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    5d44:	4b41      	ldr	r3, [pc, #260]	; (5e4c <bus_fault+0x130>)
    5d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d48:	f413 6f00 	tst.w	r3, #2048	; 0x800
    5d4c:	d12b      	bne.n	5da6 <bus_fault+0x8a>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5d4e:	4b3f      	ldr	r3, [pc, #252]	; (5e4c <bus_fault+0x130>)
    5d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d52:	f413 7f00 	tst.w	r3, #512	; 0x200
    5d56:	d131      	bne.n	5dbc <bus_fault+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    5d58:	4b3c      	ldr	r3, [pc, #240]	; (5e4c <bus_fault+0x130>)
    5d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d5c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5d60:	d14f      	bne.n	5e02 <bus_fault+0xe6>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    5d62:	4b3a      	ldr	r3, [pc, #232]	; (5e4c <bus_fault+0x130>)
    5d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d66:	f413 7f80 	tst.w	r3, #256	; 0x100
    5d6a:	d155      	bne.n	5e18 <bus_fault+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    5d6c:	4b37      	ldr	r3, [pc, #220]	; (5e4c <bus_fault+0x130>)
    5d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d70:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5d74:	d15b      	bne.n	5e2e <bus_fault+0x112>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5d76:	4a35      	ldr	r2, [pc, #212]	; (5e4c <bus_fault+0x130>)
    5d78:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5d7a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    5d7e:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    5d80:	2101      	movs	r1, #1
    5d82:	4628      	mov	r0, r5
    5d84:	f008 fcf4 	bl	e770 <memory_fault_recoverable>
    5d88:	7020      	strb	r0, [r4, #0]

	return reason;
}
    5d8a:	2000      	movs	r0, #0
    5d8c:	b004      	add	sp, #16
    5d8e:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
    5d90:	4b2f      	ldr	r3, [pc, #188]	; (5e50 <bus_fault+0x134>)
    5d92:	9302      	str	r3, [sp, #8]
    5d94:	2000      	movs	r0, #0
    5d96:	9001      	str	r0, [sp, #4]
    5d98:	9000      	str	r0, [sp, #0]
    5d9a:	4603      	mov	r3, r0
    5d9c:	2201      	movs	r2, #1
    5d9e:	492a      	ldr	r1, [pc, #168]	; (5e48 <bus_fault+0x12c>)
    5da0:	f008 fce8 	bl	e774 <z_log_msg2_runtime_create>
    5da4:	e7ce      	b.n	5d44 <bus_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    5da6:	4b2b      	ldr	r3, [pc, #172]	; (5e54 <bus_fault+0x138>)
    5da8:	9302      	str	r3, [sp, #8]
    5daa:	2000      	movs	r0, #0
    5dac:	9001      	str	r0, [sp, #4]
    5dae:	9000      	str	r0, [sp, #0]
    5db0:	4603      	mov	r3, r0
    5db2:	2201      	movs	r2, #1
    5db4:	4924      	ldr	r1, [pc, #144]	; (5e48 <bus_fault+0x12c>)
    5db6:	f008 fcdd 	bl	e774 <z_log_msg2_runtime_create>
    5dba:	e7c8      	b.n	5d4e <bus_fault+0x32>
		PR_FAULT_INFO("  Precise data bus error");
    5dbc:	4b26      	ldr	r3, [pc, #152]	; (5e58 <bus_fault+0x13c>)
    5dbe:	9302      	str	r3, [sp, #8]
    5dc0:	2000      	movs	r0, #0
    5dc2:	9001      	str	r0, [sp, #4]
    5dc4:	9000      	str	r0, [sp, #0]
    5dc6:	4603      	mov	r3, r0
    5dc8:	2201      	movs	r2, #1
    5dca:	491f      	ldr	r1, [pc, #124]	; (5e48 <bus_fault+0x12c>)
    5dcc:	f008 fcd2 	bl	e774 <z_log_msg2_runtime_create>
		STORE_xFAR(bfar, SCB->BFAR);
    5dd0:	4b1e      	ldr	r3, [pc, #120]	; (5e4c <bus_fault+0x130>)
    5dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    5dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5dd6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    5dda:	d0bd      	beq.n	5d58 <bus_fault+0x3c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    5ddc:	9203      	str	r2, [sp, #12]
    5dde:	4b1f      	ldr	r3, [pc, #124]	; (5e5c <bus_fault+0x140>)
    5de0:	9302      	str	r3, [sp, #8]
    5de2:	2000      	movs	r0, #0
    5de4:	9001      	str	r0, [sp, #4]
    5de6:	9000      	str	r0, [sp, #0]
    5de8:	4603      	mov	r3, r0
    5dea:	2201      	movs	r2, #1
    5dec:	4916      	ldr	r1, [pc, #88]	; (5e48 <bus_fault+0x12c>)
    5dee:	f008 fcc1 	bl	e774 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    5df2:	2e00      	cmp	r6, #0
    5df4:	d0b0      	beq.n	5d58 <bus_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5df6:	4a15      	ldr	r2, [pc, #84]	; (5e4c <bus_fault+0x130>)
    5df8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5dfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    5dfe:	6293      	str	r3, [r2, #40]	; 0x28
    5e00:	e7aa      	b.n	5d58 <bus_fault+0x3c>
		PR_FAULT_INFO("  Imprecise data bus error");
    5e02:	4b17      	ldr	r3, [pc, #92]	; (5e60 <bus_fault+0x144>)
    5e04:	9302      	str	r3, [sp, #8]
    5e06:	2000      	movs	r0, #0
    5e08:	9001      	str	r0, [sp, #4]
    5e0a:	9000      	str	r0, [sp, #0]
    5e0c:	4603      	mov	r3, r0
    5e0e:	2201      	movs	r2, #1
    5e10:	490d      	ldr	r1, [pc, #52]	; (5e48 <bus_fault+0x12c>)
    5e12:	f008 fcaf 	bl	e774 <z_log_msg2_runtime_create>
    5e16:	e7a4      	b.n	5d62 <bus_fault+0x46>
		PR_FAULT_INFO("  Instruction bus error");
    5e18:	4b12      	ldr	r3, [pc, #72]	; (5e64 <bus_fault+0x148>)
    5e1a:	9302      	str	r3, [sp, #8]
    5e1c:	2000      	movs	r0, #0
    5e1e:	9001      	str	r0, [sp, #4]
    5e20:	9000      	str	r0, [sp, #0]
    5e22:	4603      	mov	r3, r0
    5e24:	2201      	movs	r2, #1
    5e26:	4908      	ldr	r1, [pc, #32]	; (5e48 <bus_fault+0x12c>)
    5e28:	f008 fca4 	bl	e774 <z_log_msg2_runtime_create>
    5e2c:	e7a3      	b.n	5d76 <bus_fault+0x5a>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    5e2e:	4b0e      	ldr	r3, [pc, #56]	; (5e68 <bus_fault+0x14c>)
    5e30:	9302      	str	r3, [sp, #8]
    5e32:	2000      	movs	r0, #0
    5e34:	9001      	str	r0, [sp, #4]
    5e36:	9000      	str	r0, [sp, #0]
    5e38:	4603      	mov	r3, r0
    5e3a:	2201      	movs	r2, #1
    5e3c:	4902      	ldr	r1, [pc, #8]	; (5e48 <bus_fault+0x12c>)
    5e3e:	f008 fc99 	bl	e774 <z_log_msg2_runtime_create>
    5e42:	e798      	b.n	5d76 <bus_fault+0x5a>
    5e44:	00010a44 	.word	0x00010a44
    5e48:	0000fcb8 	.word	0x0000fcb8
    5e4c:	e000ed00 	.word	0xe000ed00
    5e50:	00010a5c 	.word	0x00010a5c
    5e54:	00010a70 	.word	0x00010a70
    5e58:	00010a84 	.word	0x00010a84
    5e5c:	00010aa0 	.word	0x00010aa0
    5e60:	00010ab8 	.word	0x00010ab8
    5e64:	00010ad4 	.word	0x00010ad4
    5e68:	00010aec 	.word	0x00010aec

00005e6c <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    5e6c:	b500      	push	{lr}
    5e6e:	b085      	sub	sp, #20
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    5e70:	4b3a      	ldr	r3, [pc, #232]	; (5f5c <usage_fault+0xf0>)
    5e72:	9302      	str	r3, [sp, #8]
    5e74:	2000      	movs	r0, #0
    5e76:	9001      	str	r0, [sp, #4]
    5e78:	9000      	str	r0, [sp, #0]
    5e7a:	4603      	mov	r3, r0
    5e7c:	2201      	movs	r2, #1
    5e7e:	4938      	ldr	r1, [pc, #224]	; (5f60 <usage_fault+0xf4>)
    5e80:	f008 fc78 	bl	e774 <z_log_msg2_runtime_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5e84:	4b37      	ldr	r3, [pc, #220]	; (5f64 <usage_fault+0xf8>)
    5e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e88:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    5e8c:	d123      	bne.n	5ed6 <usage_fault+0x6a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    5e8e:	4b35      	ldr	r3, [pc, #212]	; (5f64 <usage_fault+0xf8>)
    5e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e92:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    5e96:	d129      	bne.n	5eec <usage_fault+0x80>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    5e98:	4b32      	ldr	r3, [pc, #200]	; (5f64 <usage_fault+0xf8>)
    5e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e9c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    5ea0:	d12f      	bne.n	5f02 <usage_fault+0x96>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    5ea2:	4b30      	ldr	r3, [pc, #192]	; (5f64 <usage_fault+0xf8>)
    5ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ea6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    5eaa:	d135      	bne.n	5f18 <usage_fault+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    5eac:	4b2d      	ldr	r3, [pc, #180]	; (5f64 <usage_fault+0xf8>)
    5eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5eb0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    5eb4:	d13b      	bne.n	5f2e <usage_fault+0xc2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    5eb6:	4b2b      	ldr	r3, [pc, #172]	; (5f64 <usage_fault+0xf8>)
    5eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5eba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5ebe:	d141      	bne.n	5f44 <usage_fault+0xd8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5ec0:	4a28      	ldr	r2, [pc, #160]	; (5f64 <usage_fault+0xf8>)
    5ec2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5ec4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    5ec8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    5ecc:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    5ece:	2000      	movs	r0, #0
    5ed0:	b005      	add	sp, #20
    5ed2:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    5ed6:	4b24      	ldr	r3, [pc, #144]	; (5f68 <usage_fault+0xfc>)
    5ed8:	9302      	str	r3, [sp, #8]
    5eda:	2000      	movs	r0, #0
    5edc:	9001      	str	r0, [sp, #4]
    5ede:	9000      	str	r0, [sp, #0]
    5ee0:	4603      	mov	r3, r0
    5ee2:	2201      	movs	r2, #1
    5ee4:	491e      	ldr	r1, [pc, #120]	; (5f60 <usage_fault+0xf4>)
    5ee6:	f008 fc45 	bl	e774 <z_log_msg2_runtime_create>
    5eea:	e7d0      	b.n	5e8e <usage_fault+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    5eec:	4b1f      	ldr	r3, [pc, #124]	; (5f6c <usage_fault+0x100>)
    5eee:	9302      	str	r3, [sp, #8]
    5ef0:	2000      	movs	r0, #0
    5ef2:	9001      	str	r0, [sp, #4]
    5ef4:	9000      	str	r0, [sp, #0]
    5ef6:	4603      	mov	r3, r0
    5ef8:	2201      	movs	r2, #1
    5efa:	4919      	ldr	r1, [pc, #100]	; (5f60 <usage_fault+0xf4>)
    5efc:	f008 fc3a 	bl	e774 <z_log_msg2_runtime_create>
    5f00:	e7ca      	b.n	5e98 <usage_fault+0x2c>
		PR_FAULT_INFO("  No coprocessor instructions");
    5f02:	4b1b      	ldr	r3, [pc, #108]	; (5f70 <usage_fault+0x104>)
    5f04:	9302      	str	r3, [sp, #8]
    5f06:	2000      	movs	r0, #0
    5f08:	9001      	str	r0, [sp, #4]
    5f0a:	9000      	str	r0, [sp, #0]
    5f0c:	4603      	mov	r3, r0
    5f0e:	2201      	movs	r2, #1
    5f10:	4913      	ldr	r1, [pc, #76]	; (5f60 <usage_fault+0xf4>)
    5f12:	f008 fc2f 	bl	e774 <z_log_msg2_runtime_create>
    5f16:	e7c4      	b.n	5ea2 <usage_fault+0x36>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    5f18:	4b16      	ldr	r3, [pc, #88]	; (5f74 <usage_fault+0x108>)
    5f1a:	9302      	str	r3, [sp, #8]
    5f1c:	2000      	movs	r0, #0
    5f1e:	9001      	str	r0, [sp, #4]
    5f20:	9000      	str	r0, [sp, #0]
    5f22:	4603      	mov	r3, r0
    5f24:	2201      	movs	r2, #1
    5f26:	490e      	ldr	r1, [pc, #56]	; (5f60 <usage_fault+0xf4>)
    5f28:	f008 fc24 	bl	e774 <z_log_msg2_runtime_create>
    5f2c:	e7be      	b.n	5eac <usage_fault+0x40>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    5f2e:	4b12      	ldr	r3, [pc, #72]	; (5f78 <usage_fault+0x10c>)
    5f30:	9302      	str	r3, [sp, #8]
    5f32:	2000      	movs	r0, #0
    5f34:	9001      	str	r0, [sp, #4]
    5f36:	9000      	str	r0, [sp, #0]
    5f38:	4603      	mov	r3, r0
    5f3a:	2201      	movs	r2, #1
    5f3c:	4908      	ldr	r1, [pc, #32]	; (5f60 <usage_fault+0xf4>)
    5f3e:	f008 fc19 	bl	e774 <z_log_msg2_runtime_create>
    5f42:	e7b8      	b.n	5eb6 <usage_fault+0x4a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    5f44:	4b0d      	ldr	r3, [pc, #52]	; (5f7c <usage_fault+0x110>)
    5f46:	9302      	str	r3, [sp, #8]
    5f48:	2000      	movs	r0, #0
    5f4a:	9001      	str	r0, [sp, #4]
    5f4c:	9000      	str	r0, [sp, #0]
    5f4e:	4603      	mov	r3, r0
    5f50:	2201      	movs	r2, #1
    5f52:	4903      	ldr	r1, [pc, #12]	; (5f60 <usage_fault+0xf4>)
    5f54:	f008 fc0e 	bl	e774 <z_log_msg2_runtime_create>
    5f58:	e7b2      	b.n	5ec0 <usage_fault+0x54>
    5f5a:	bf00      	nop
    5f5c:	00010b1c 	.word	0x00010b1c
    5f60:	0000fcb8 	.word	0x0000fcb8
    5f64:	e000ed00 	.word	0xe000ed00
    5f68:	00010b34 	.word	0x00010b34
    5f6c:	00010b48 	.word	0x00010b48
    5f70:	00010b64 	.word	0x00010b64
    5f74:	00010b84 	.word	0x00010b84
    5f78:	00010bac 	.word	0x00010bac
    5f7c:	00010bc8 	.word	0x00010bc8

00005f80 <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    5f80:	b500      	push	{lr}
    5f82:	b085      	sub	sp, #20
	*recoverable = false;
    5f84:	2000      	movs	r0, #0
    5f86:	7008      	strb	r0, [r1, #0]

	PR_FAULT_INFO(
    5f88:	4b05      	ldr	r3, [pc, #20]	; (5fa0 <debug_monitor+0x20>)
    5f8a:	9302      	str	r3, [sp, #8]
    5f8c:	9001      	str	r0, [sp, #4]
    5f8e:	9000      	str	r0, [sp, #0]
    5f90:	4603      	mov	r3, r0
    5f92:	2201      	movs	r2, #1
    5f94:	4903      	ldr	r1, [pc, #12]	; (5fa4 <debug_monitor+0x24>)
    5f96:	f008 fbed 	bl	e774 <z_log_msg2_runtime_create>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    5f9a:	b005      	add	sp, #20
    5f9c:	f85d fb04 	ldr.w	pc, [sp], #4
    5fa0:	00010bf4 	.word	0x00010bf4
    5fa4:	0000fcb8 	.word	0x0000fcb8

00005fa8 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    5fa8:	b500      	push	{lr}
    5faa:	b087      	sub	sp, #28
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    5fac:	290f      	cmp	r1, #15
    5fae:	dc10      	bgt.n	5fd2 <reserved_exception+0x2a>
    5fb0:	4b09      	ldr	r3, [pc, #36]	; (5fd8 <reserved_exception+0x30>)
    5fb2:	3910      	subs	r1, #16
    5fb4:	9104      	str	r1, [sp, #16]
    5fb6:	9303      	str	r3, [sp, #12]
    5fb8:	4b08      	ldr	r3, [pc, #32]	; (5fdc <reserved_exception+0x34>)
    5fba:	9302      	str	r3, [sp, #8]
    5fbc:	2000      	movs	r0, #0
    5fbe:	9001      	str	r0, [sp, #4]
    5fc0:	9000      	str	r0, [sp, #0]
    5fc2:	4603      	mov	r3, r0
    5fc4:	2201      	movs	r2, #1
    5fc6:	4906      	ldr	r1, [pc, #24]	; (5fe0 <reserved_exception+0x38>)
    5fc8:	f008 fbd4 	bl	e774 <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    5fcc:	b007      	add	sp, #28
    5fce:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
    5fd2:	4b04      	ldr	r3, [pc, #16]	; (5fe4 <reserved_exception+0x3c>)
    5fd4:	e7ed      	b.n	5fb2 <reserved_exception+0xa>
    5fd6:	bf00      	nop
    5fd8:	00010c34 	.word	0x00010c34
    5fdc:	00010c4c 	.word	0x00010c4c
    5fe0:	0000fcb8 	.word	0x0000fcb8
    5fe4:	00010c18 	.word	0x00010c18

00005fe8 <mem_manage_fault>:
{
    5fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fea:	b085      	sub	sp, #20
    5fec:	4605      	mov	r5, r0
    5fee:	460c      	mov	r4, r1
    5ff0:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    5ff2:	4b5f      	ldr	r3, [pc, #380]	; (6170 <mem_manage_fault+0x188>)
    5ff4:	9302      	str	r3, [sp, #8]
    5ff6:	2000      	movs	r0, #0
    5ff8:	9001      	str	r0, [sp, #4]
    5ffa:	9000      	str	r0, [sp, #0]
    5ffc:	4603      	mov	r3, r0
    5ffe:	2201      	movs	r2, #1
    6000:	495c      	ldr	r1, [pc, #368]	; (6174 <mem_manage_fault+0x18c>)
    6002:	f008 fbb7 	bl	e774 <z_log_msg2_runtime_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6006:	4b5c      	ldr	r3, [pc, #368]	; (6178 <mem_manage_fault+0x190>)
    6008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    600a:	f013 0f10 	tst.w	r3, #16
    600e:	d13b      	bne.n	6088 <mem_manage_fault+0xa0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    6010:	4b59      	ldr	r3, [pc, #356]	; (6178 <mem_manage_fault+0x190>)
    6012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6014:	f013 0f08 	tst.w	r3, #8
    6018:	d141      	bne.n	609e <mem_manage_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    601a:	4b57      	ldr	r3, [pc, #348]	; (6178 <mem_manage_fault+0x190>)
    601c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    601e:	f013 0f02 	tst.w	r3, #2
    6022:	d147      	bne.n	60b4 <mem_manage_fault+0xcc>
	uint32_t mmfar = -EINVAL;
    6024:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    6028:	4b53      	ldr	r3, [pc, #332]	; (6178 <mem_manage_fault+0x190>)
    602a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    602c:	f013 0f01 	tst.w	r3, #1
    6030:	d166      	bne.n	6100 <mem_manage_fault+0x118>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    6032:	4b51      	ldr	r3, [pc, #324]	; (6178 <mem_manage_fault+0x190>)
    6034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6036:	f013 0f20 	tst.w	r3, #32
    603a:	d16c      	bne.n	6116 <mem_manage_fault+0x12e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    603c:	4b4e      	ldr	r3, [pc, #312]	; (6178 <mem_manage_fault+0x190>)
    603e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6040:	f013 0f10 	tst.w	r3, #16
    6044:	d104      	bne.n	6050 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    6046:	4b4c      	ldr	r3, [pc, #304]	; (6178 <mem_manage_fault+0x190>)
    6048:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    604a:	f014 0402 	ands.w	r4, r4, #2
    604e:	d004      	beq.n	605a <mem_manage_fault+0x72>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    6050:	4b49      	ldr	r3, [pc, #292]	; (6178 <mem_manage_fault+0x190>)
    6052:	685c      	ldr	r4, [r3, #4]
    6054:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    6058:	d168      	bne.n	612c <mem_manage_fault+0x144>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    605a:	4b47      	ldr	r3, [pc, #284]	; (6178 <mem_manage_fault+0x190>)
    605c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    605e:	f013 0f20 	tst.w	r3, #32
    6062:	d004      	beq.n	606e <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    6064:	4a44      	ldr	r2, [pc, #272]	; (6178 <mem_manage_fault+0x190>)
    6066:	6a53      	ldr	r3, [r2, #36]	; 0x24
    6068:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    606c:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    606e:	4a42      	ldr	r2, [pc, #264]	; (6178 <mem_manage_fault+0x190>)
    6070:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6072:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    6076:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    6078:	2101      	movs	r1, #1
    607a:	4628      	mov	r0, r5
    607c:	f008 fb78 	bl	e770 <memory_fault_recoverable>
    6080:	7030      	strb	r0, [r6, #0]
}
    6082:	4620      	mov	r0, r4
    6084:	b005      	add	sp, #20
    6086:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    6088:	4b3c      	ldr	r3, [pc, #240]	; (617c <mem_manage_fault+0x194>)
    608a:	9302      	str	r3, [sp, #8]
    608c:	2000      	movs	r0, #0
    608e:	9001      	str	r0, [sp, #4]
    6090:	9000      	str	r0, [sp, #0]
    6092:	4603      	mov	r3, r0
    6094:	2201      	movs	r2, #1
    6096:	4937      	ldr	r1, [pc, #220]	; (6174 <mem_manage_fault+0x18c>)
    6098:	f008 fb6c 	bl	e774 <z_log_msg2_runtime_create>
    609c:	e7b8      	b.n	6010 <mem_manage_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    609e:	4b38      	ldr	r3, [pc, #224]	; (6180 <mem_manage_fault+0x198>)
    60a0:	9302      	str	r3, [sp, #8]
    60a2:	2000      	movs	r0, #0
    60a4:	9001      	str	r0, [sp, #4]
    60a6:	9000      	str	r0, [sp, #0]
    60a8:	4603      	mov	r3, r0
    60aa:	2201      	movs	r2, #1
    60ac:	4931      	ldr	r1, [pc, #196]	; (6174 <mem_manage_fault+0x18c>)
    60ae:	f008 fb61 	bl	e774 <z_log_msg2_runtime_create>
    60b2:	e7b2      	b.n	601a <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Data Access Violation");
    60b4:	4b33      	ldr	r3, [pc, #204]	; (6184 <mem_manage_fault+0x19c>)
    60b6:	9302      	str	r3, [sp, #8]
    60b8:	2000      	movs	r0, #0
    60ba:	9001      	str	r0, [sp, #4]
    60bc:	9000      	str	r0, [sp, #0]
    60be:	4603      	mov	r3, r0
    60c0:	2201      	movs	r2, #1
    60c2:	492c      	ldr	r1, [pc, #176]	; (6174 <mem_manage_fault+0x18c>)
    60c4:	f008 fb56 	bl	e774 <z_log_msg2_runtime_create>
		uint32_t temp = SCB->MMFAR;
    60c8:	4b2b      	ldr	r3, [pc, #172]	; (6178 <mem_manage_fault+0x190>)
    60ca:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    60cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    60ce:	f013 0f80 	tst.w	r3, #128	; 0x80
    60d2:	d102      	bne.n	60da <mem_manage_fault+0xf2>
	uint32_t mmfar = -EINVAL;
    60d4:	f06f 0715 	mvn.w	r7, #21
    60d8:	e7a6      	b.n	6028 <mem_manage_fault+0x40>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    60da:	9703      	str	r7, [sp, #12]
    60dc:	4b2a      	ldr	r3, [pc, #168]	; (6188 <mem_manage_fault+0x1a0>)
    60de:	9302      	str	r3, [sp, #8]
    60e0:	2000      	movs	r0, #0
    60e2:	9001      	str	r0, [sp, #4]
    60e4:	9000      	str	r0, [sp, #0]
    60e6:	4603      	mov	r3, r0
    60e8:	2201      	movs	r2, #1
    60ea:	4922      	ldr	r1, [pc, #136]	; (6174 <mem_manage_fault+0x18c>)
    60ec:	f008 fb42 	bl	e774 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    60f0:	2c00      	cmp	r4, #0
    60f2:	d099      	beq.n	6028 <mem_manage_fault+0x40>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    60f4:	4a20      	ldr	r2, [pc, #128]	; (6178 <mem_manage_fault+0x190>)
    60f6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    60f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    60fc:	6293      	str	r3, [r2, #40]	; 0x28
    60fe:	e793      	b.n	6028 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Instruction Access Violation");
    6100:	4b22      	ldr	r3, [pc, #136]	; (618c <mem_manage_fault+0x1a4>)
    6102:	9302      	str	r3, [sp, #8]
    6104:	2000      	movs	r0, #0
    6106:	9001      	str	r0, [sp, #4]
    6108:	9000      	str	r0, [sp, #0]
    610a:	4603      	mov	r3, r0
    610c:	2201      	movs	r2, #1
    610e:	4919      	ldr	r1, [pc, #100]	; (6174 <mem_manage_fault+0x18c>)
    6110:	f008 fb30 	bl	e774 <z_log_msg2_runtime_create>
    6114:	e78d      	b.n	6032 <mem_manage_fault+0x4a>
		PR_FAULT_INFO(
    6116:	4b1e      	ldr	r3, [pc, #120]	; (6190 <mem_manage_fault+0x1a8>)
    6118:	9302      	str	r3, [sp, #8]
    611a:	2000      	movs	r0, #0
    611c:	9001      	str	r0, [sp, #4]
    611e:	9000      	str	r0, [sp, #0]
    6120:	4603      	mov	r3, r0
    6122:	2201      	movs	r2, #1
    6124:	4913      	ldr	r1, [pc, #76]	; (6174 <mem_manage_fault+0x18c>)
    6126:	f008 fb25 	bl	e774 <z_log_msg2_runtime_create>
    612a:	e787      	b.n	603c <mem_manage_fault+0x54>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    612c:	4629      	mov	r1, r5
    612e:	4638      	mov	r0, r7
    6130:	f7ff fd88 	bl	5c44 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    6134:	4607      	mov	r7, r0
    6136:	b9b0      	cbnz	r0, 6166 <mem_manage_fault+0x17e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    6138:	4b0f      	ldr	r3, [pc, #60]	; (6178 <mem_manage_fault+0x190>)
    613a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    613c:	f014 0410 	ands.w	r4, r4, #16
    6140:	d08b      	beq.n	605a <mem_manage_fault+0x72>
    6142:	4c14      	ldr	r4, [pc, #80]	; (6194 <mem_manage_fault+0x1ac>)
    6144:	f240 1349 	movw	r3, #329	; 0x149
    6148:	4622      	mov	r2, r4
    614a:	4913      	ldr	r1, [pc, #76]	; (6198 <mem_manage_fault+0x1b0>)
    614c:	4813      	ldr	r0, [pc, #76]	; (619c <mem_manage_fault+0x1b4>)
    614e:	f008 fa2e 	bl	e5ae <assert_print>
    6152:	4813      	ldr	r0, [pc, #76]	; (61a0 <mem_manage_fault+0x1b8>)
    6154:	f008 fa2b 	bl	e5ae <assert_print>
    6158:	f240 1149 	movw	r1, #329	; 0x149
    615c:	4620      	mov	r0, r4
    615e:	f008 fa1f 	bl	e5a0 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6162:	463c      	mov	r4, r7
    6164:	e779      	b.n	605a <mem_manage_fault+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    6166:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    616a:	2402      	movs	r4, #2
    616c:	e775      	b.n	605a <mem_manage_fault+0x72>
    616e:	bf00      	nop
    6170:	00010c60 	.word	0x00010c60
    6174:	0000fcb8 	.word	0x0000fcb8
    6178:	e000ed00 	.word	0xe000ed00
    617c:	00010c78 	.word	0x00010c78
    6180:	00010a70 	.word	0x00010a70
    6184:	00010cac 	.word	0x00010cac
    6188:	00010cc4 	.word	0x00010cc4
    618c:	00010cdc 	.word	0x00010cdc
    6190:	00010aec 	.word	0x00010aec
    6194:	00010cfc 	.word	0x00010cfc
    6198:	00010d38 	.word	0x00010d38
    619c:	000100e4 	.word	0x000100e4
    61a0:	00010d84 	.word	0x00010d84

000061a4 <hard_fault>:
{
    61a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    61a6:	b085      	sub	sp, #20
    61a8:	4607      	mov	r7, r0
    61aa:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    61ac:	4b4b      	ldr	r3, [pc, #300]	; (62dc <hard_fault+0x138>)
    61ae:	9302      	str	r3, [sp, #8]
    61b0:	2400      	movs	r4, #0
    61b2:	9401      	str	r4, [sp, #4]
    61b4:	9400      	str	r4, [sp, #0]
    61b6:	4623      	mov	r3, r4
    61b8:	2201      	movs	r2, #1
    61ba:	4949      	ldr	r1, [pc, #292]	; (62e0 <hard_fault+0x13c>)
    61bc:	4620      	mov	r0, r4
    61be:	f008 fad9 	bl	e774 <z_log_msg2_runtime_create>
	*recoverable = false;
    61c2:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    61c4:	4b47      	ldr	r3, [pc, #284]	; (62e4 <hard_fault+0x140>)
    61c6:	6add      	ldr	r5, [r3, #44]	; 0x2c
    61c8:	f015 0502 	ands.w	r5, r5, #2
    61cc:	d12d      	bne.n	622a <hard_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    61ce:	4b45      	ldr	r3, [pc, #276]	; (62e4 <hard_fault+0x140>)
    61d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    61d2:	2b00      	cmp	r3, #0
    61d4:	db36      	blt.n	6244 <hard_fault+0xa0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    61d6:	4b43      	ldr	r3, [pc, #268]	; (62e4 <hard_fault+0x140>)
    61d8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    61da:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    61de:	d06b      	beq.n	62b8 <hard_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    61e0:	4b41      	ldr	r3, [pc, #260]	; (62e8 <hard_fault+0x144>)
    61e2:	9302      	str	r3, [sp, #8]
    61e4:	2000      	movs	r0, #0
    61e6:	9001      	str	r0, [sp, #4]
    61e8:	9000      	str	r0, [sp, #0]
    61ea:	4603      	mov	r3, r0
    61ec:	2201      	movs	r2, #1
    61ee:	493c      	ldr	r1, [pc, #240]	; (62e0 <hard_fault+0x13c>)
    61f0:	f008 fac0 	bl	e774 <z_log_msg2_runtime_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    61f4:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    61f6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    61fa:	f64d 7302 	movw	r3, #57090	; 0xdf02
    61fe:	429a      	cmp	r2, r3
    6200:	d02c      	beq.n	625c <hard_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
    6202:	4b38      	ldr	r3, [pc, #224]	; (62e4 <hard_fault+0x140>)
    6204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    6208:	2b00      	cmp	r3, #0
    620a:	d135      	bne.n	6278 <hard_fault+0xd4>
		} else if (SCB_BFSR != 0) {
    620c:	4b35      	ldr	r3, [pc, #212]	; (62e4 <hard_fault+0x140>)
    620e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    6212:	2b00      	cmp	r3, #0
    6214:	d137      	bne.n	6286 <hard_fault+0xe2>
		} else if (SCB_UFSR != 0) {
    6216:	4b33      	ldr	r3, [pc, #204]	; (62e4 <hard_fault+0x140>)
    6218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    621a:	b29b      	uxth	r3, r3
    621c:	2b00      	cmp	r3, #0
    621e:	d039      	beq.n	6294 <hard_fault+0xf0>
			reason = usage_fault(esf);
    6220:	4638      	mov	r0, r7
    6222:	f7ff fe23 	bl	5e6c <usage_fault>
    6226:	4604      	mov	r4, r0
    6228:	e009      	b.n	623e <hard_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    622a:	4b30      	ldr	r3, [pc, #192]	; (62ec <hard_fault+0x148>)
    622c:	9302      	str	r3, [sp, #8]
    622e:	9401      	str	r4, [sp, #4]
    6230:	9400      	str	r4, [sp, #0]
    6232:	4623      	mov	r3, r4
    6234:	2201      	movs	r2, #1
    6236:	492a      	ldr	r1, [pc, #168]	; (62e0 <hard_fault+0x13c>)
    6238:	4620      	mov	r0, r4
    623a:	f008 fa9b 	bl	e774 <z_log_msg2_runtime_create>
}
    623e:	4620      	mov	r0, r4
    6240:	b005      	add	sp, #20
    6242:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
    6244:	4b2a      	ldr	r3, [pc, #168]	; (62f0 <hard_fault+0x14c>)
    6246:	9302      	str	r3, [sp, #8]
    6248:	2000      	movs	r0, #0
    624a:	9001      	str	r0, [sp, #4]
    624c:	9000      	str	r0, [sp, #0]
    624e:	4603      	mov	r3, r0
    6250:	2201      	movs	r2, #1
    6252:	4923      	ldr	r1, [pc, #140]	; (62e0 <hard_fault+0x13c>)
    6254:	f008 fa8e 	bl	e774 <z_log_msg2_runtime_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6258:	462c      	mov	r4, r5
    625a:	e7f0      	b.n	623e <hard_fault+0x9a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    625c:	683b      	ldr	r3, [r7, #0]
    625e:	9303      	str	r3, [sp, #12]
    6260:	4b24      	ldr	r3, [pc, #144]	; (62f4 <hard_fault+0x150>)
    6262:	9302      	str	r3, [sp, #8]
    6264:	2000      	movs	r0, #0
    6266:	9001      	str	r0, [sp, #4]
    6268:	9000      	str	r0, [sp, #0]
    626a:	4603      	mov	r3, r0
    626c:	2201      	movs	r2, #1
    626e:	491c      	ldr	r1, [pc, #112]	; (62e0 <hard_fault+0x13c>)
    6270:	f008 fa80 	bl	e774 <z_log_msg2_runtime_create>
			reason = esf->basic.r0;
    6274:	683c      	ldr	r4, [r7, #0]
    6276:	e7e2      	b.n	623e <hard_fault+0x9a>
			reason = mem_manage_fault(esf, 1, recoverable);
    6278:	4632      	mov	r2, r6
    627a:	2101      	movs	r1, #1
    627c:	4638      	mov	r0, r7
    627e:	f7ff feb3 	bl	5fe8 <mem_manage_fault>
    6282:	4604      	mov	r4, r0
    6284:	e7db      	b.n	623e <hard_fault+0x9a>
			reason = bus_fault(esf, 1, recoverable);
    6286:	4632      	mov	r2, r6
    6288:	2101      	movs	r1, #1
    628a:	4638      	mov	r0, r7
    628c:	f7ff fd46 	bl	5d1c <bus_fault>
    6290:	4604      	mov	r4, r0
    6292:	e7d4      	b.n	623e <hard_fault+0x9a>
			__ASSERT(0,
    6294:	4c18      	ldr	r4, [pc, #96]	; (62f8 <hard_fault+0x154>)
    6296:	f240 23cd 	movw	r3, #717	; 0x2cd
    629a:	4622      	mov	r2, r4
    629c:	4917      	ldr	r1, [pc, #92]	; (62fc <hard_fault+0x158>)
    629e:	4818      	ldr	r0, [pc, #96]	; (6300 <hard_fault+0x15c>)
    62a0:	f008 f985 	bl	e5ae <assert_print>
    62a4:	4817      	ldr	r0, [pc, #92]	; (6304 <hard_fault+0x160>)
    62a6:	f008 f982 	bl	e5ae <assert_print>
    62aa:	f240 21cd 	movw	r1, #717	; 0x2cd
    62ae:	4620      	mov	r0, r4
    62b0:	f008 f976 	bl	e5a0 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    62b4:	462c      	mov	r4, r5
    62b6:	e7c2      	b.n	623e <hard_fault+0x9a>
		__ASSERT(0,
    62b8:	4d0f      	ldr	r5, [pc, #60]	; (62f8 <hard_fault+0x154>)
    62ba:	f240 23d1 	movw	r3, #721	; 0x2d1
    62be:	462a      	mov	r2, r5
    62c0:	490e      	ldr	r1, [pc, #56]	; (62fc <hard_fault+0x158>)
    62c2:	480f      	ldr	r0, [pc, #60]	; (6300 <hard_fault+0x15c>)
    62c4:	f008 f973 	bl	e5ae <assert_print>
    62c8:	480f      	ldr	r0, [pc, #60]	; (6308 <hard_fault+0x164>)
    62ca:	f008 f970 	bl	e5ae <assert_print>
    62ce:	f240 21d1 	movw	r1, #721	; 0x2d1
    62d2:	4628      	mov	r0, r5
    62d4:	f008 f964 	bl	e5a0 <assert_post_action>
	return reason;
    62d8:	e7b1      	b.n	623e <hard_fault+0x9a>
    62da:	bf00      	nop
    62dc:	00010da8 	.word	0x00010da8
    62e0:	0000fcb8 	.word	0x0000fcb8
    62e4:	e000ed00 	.word	0xe000ed00
    62e8:	00010df4 	.word	0x00010df4
    62ec:	00010dc0 	.word	0x00010dc0
    62f0:	00010de4 	.word	0x00010de4
    62f4:	00010e14 	.word	0x00010e14
    62f8:	00010cfc 	.word	0x00010cfc
    62fc:	000107a0 	.word	0x000107a0
    6300:	000100e4 	.word	0x000100e4
    6304:	00010e30 	.word	0x00010e30
    6308:	00010e54 	.word	0x00010e54

0000630c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    630c:	b5f0      	push	{r4, r5, r6, r7, lr}
    630e:	b08f      	sub	sp, #60	; 0x3c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6310:	4b35      	ldr	r3, [pc, #212]	; (63e8 <z_arm_fault+0xdc>)
    6312:	685d      	ldr	r5, [r3, #4]
    6314:	f3c5 0508 	ubfx	r5, r5, #0, #9
    6318:	2300      	movs	r3, #0
    631a:	f383 8811 	msr	BASEPRI, r3
    631e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    6322:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    6326:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    632a:	d125      	bne.n	6378 <z_arm_fault+0x6c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    632c:	f002 030c 	and.w	r3, r2, #12
    6330:	2b08      	cmp	r3, #8
    6332:	d011      	beq.n	6358 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    6334:	f012 0f08 	tst.w	r2, #8
    6338:	d01b      	beq.n	6372 <z_arm_fault+0x66>
			ptr_esf =  (z_arch_esf_t *)psp;
    633a:	460c      	mov	r4, r1
	*nested_exc = false;
    633c:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    633e:	b1f4      	cbz	r4, 637e <z_arm_fault+0x72>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    6340:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    6344:	4629      	mov	r1, r5
    6346:	4620      	mov	r0, r4
    6348:	f008 fa23 	bl	e792 <fault_handle>
    634c:	4605      	mov	r5, r0
	if (recoverable) {
    634e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    6352:	b32b      	cbz	r3, 63a0 <z_arm_fault+0x94>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    6354:	b00f      	add	sp, #60	; 0x3c
    6356:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    6358:	4b24      	ldr	r3, [pc, #144]	; (63ec <z_arm_fault+0xe0>)
    635a:	9302      	str	r3, [sp, #8]
    635c:	2400      	movs	r4, #0
    635e:	9401      	str	r4, [sp, #4]
    6360:	9400      	str	r4, [sp, #0]
    6362:	4623      	mov	r3, r4
    6364:	2201      	movs	r2, #1
    6366:	4922      	ldr	r1, [pc, #136]	; (63f0 <z_arm_fault+0xe4>)
    6368:	4620      	mov	r0, r4
    636a:	f008 fa03 	bl	e774 <z_log_msg2_runtime_create>
	*nested_exc = false;
    636e:	4626      	mov	r6, r4
		return NULL;
    6370:	e7e5      	b.n	633e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    6372:	4604      	mov	r4, r0
			*nested_exc = true;
    6374:	2601      	movs	r6, #1
    6376:	e7e2      	b.n	633e <z_arm_fault+0x32>
	*nested_exc = false;
    6378:	2600      	movs	r6, #0
		return NULL;
    637a:	4634      	mov	r4, r6
    637c:	e7df      	b.n	633e <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
    637e:	4f1d      	ldr	r7, [pc, #116]	; (63f4 <z_arm_fault+0xe8>)
    6380:	f240 33fb 	movw	r3, #1019	; 0x3fb
    6384:	463a      	mov	r2, r7
    6386:	491c      	ldr	r1, [pc, #112]	; (63f8 <z_arm_fault+0xec>)
    6388:	481c      	ldr	r0, [pc, #112]	; (63fc <z_arm_fault+0xf0>)
    638a:	f008 f910 	bl	e5ae <assert_print>
    638e:	481c      	ldr	r0, [pc, #112]	; (6400 <z_arm_fault+0xf4>)
    6390:	f008 f90d 	bl	e5ae <assert_print>
    6394:	f240 31fb 	movw	r1, #1019	; 0x3fb
    6398:	4638      	mov	r0, r7
    639a:	f008 f901 	bl	e5a0 <assert_post_action>
    639e:	e7cf      	b.n	6340 <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    63a0:	f10d 0c14 	add.w	ip, sp, #20
    63a4:	6820      	ldr	r0, [r4, #0]
    63a6:	6861      	ldr	r1, [r4, #4]
    63a8:	68a2      	ldr	r2, [r4, #8]
    63aa:	68e3      	ldr	r3, [r4, #12]
    63ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    63b0:	6920      	ldr	r0, [r4, #16]
    63b2:	6961      	ldr	r1, [r4, #20]
    63b4:	69a2      	ldr	r2, [r4, #24]
    63b6:	69e3      	ldr	r3, [r4, #28]
    63b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
    63bc:	b146      	cbz	r6, 63d0 <z_arm_fault+0xc4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    63be:	f3c3 0208 	ubfx	r2, r3, #0, #9
    63c2:	b95a      	cbnz	r2, 63dc <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    63c4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    63c8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    63cc:	930c      	str	r3, [sp, #48]	; 0x30
    63ce:	e005      	b.n	63dc <z_arm_fault+0xd0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    63d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    63d2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    63d6:	f023 0301 	bic.w	r3, r3, #1
    63da:	930c      	str	r3, [sp, #48]	; 0x30
	z_arm_fatal_error(reason, &esf_copy);
    63dc:	a905      	add	r1, sp, #20
    63de:	4628      	mov	r0, r5
    63e0:	f008 f9a8 	bl	e734 <z_arm_fatal_error>
    63e4:	e7b6      	b.n	6354 <z_arm_fault+0x48>
    63e6:	bf00      	nop
    63e8:	e000ed00 	.word	0xe000ed00
    63ec:	00010e84 	.word	0x00010e84
    63f0:	0000fcb8 	.word	0x0000fcb8
    63f4:	00010cfc 	.word	0x00010cfc
    63f8:	00010eb0 	.word	0x00010eb0
    63fc:	000100e4 	.word	0x000100e4
    6400:	00010ec4 	.word	0x00010ec4

00006404 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6404:	4a02      	ldr	r2, [pc, #8]	; (6410 <z_arm_fault_init+0xc>)
    6406:	6953      	ldr	r3, [r2, #20]
    6408:	f043 0310 	orr.w	r3, r3, #16
    640c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    640e:	4770      	bx	lr
    6410:	e000ed00 	.word	0xe000ed00

00006414 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6414:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    6418:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    641c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    641e:	4672      	mov	r2, lr
	bl z_arm_fault
    6420:	f7ff ff74 	bl	630c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    6424:	bd01      	pop	{r0, pc}
    6426:	bf00      	nop

00006428 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    6428:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    642a:	e006      	b.n	643a <z_arm_interrupt_init+0x12>
    642c:	f002 010f 	and.w	r1, r2, #15
    6430:	4b09      	ldr	r3, [pc, #36]	; (6458 <z_arm_interrupt_init+0x30>)
    6432:	440b      	add	r3, r1
    6434:	2120      	movs	r1, #32
    6436:	7619      	strb	r1, [r3, #24]
    6438:	3201      	adds	r2, #1
    643a:	2a2f      	cmp	r2, #47	; 0x2f
    643c:	dc0a      	bgt.n	6454 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    643e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    6440:	2b00      	cmp	r3, #0
    6442:	dbf3      	blt.n	642c <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6444:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6448:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    644c:	2120      	movs	r1, #32
    644e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    6452:	e7f1      	b.n	6438 <z_arm_interrupt_init+0x10>
	}
}
    6454:	4770      	bx	lr
    6456:	bf00      	nop
    6458:	e000ecfc 	.word	0xe000ecfc

0000645c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    645c:	2000      	movs	r0, #0
    msr CONTROL, r0
    645e:	f380 8814 	msr	CONTROL, r0
    isb
    6462:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    6466:	f009 fad5 	bl	fa14 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    646a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    646c:	490d      	ldr	r1, [pc, #52]	; (64a4 <__start+0x48>)
    str r0, [r1]
    646e:	6008      	str	r0, [r1, #0]
    dsb
    6470:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    6474:	480c      	ldr	r0, [pc, #48]	; (64a8 <__start+0x4c>)
    msr msp, r0
    6476:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    647a:	f000 f82d 	bl	64d8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    647e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6480:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    6484:	4809      	ldr	r0, [pc, #36]	; (64ac <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    6486:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    648a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    648c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    6490:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    6494:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    6496:	4308      	orrs	r0, r1
    msr CONTROL, r0
    6498:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    649c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    64a0:	f7ff fb3a 	bl	5b18 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    64a4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    64a8:	20006e20 	.word	0x20006e20
    ldr r0, =z_interrupt_stacks
    64ac:	20006fa0 	.word	0x20006fa0

000064b0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    64b0:	4b08      	ldr	r3, [pc, #32]	; (64d4 <z_arm_clear_arm_mpu_config+0x24>)
    64b2:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    64b6:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    64ba:	2300      	movs	r3, #0
    64bc:	e006      	b.n	64cc <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    64be:	4a05      	ldr	r2, [pc, #20]	; (64d4 <z_arm_clear_arm_mpu_config+0x24>)
    64c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    64c4:	2100      	movs	r1, #0
    64c6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    64ca:	3301      	adds	r3, #1
    64cc:	4283      	cmp	r3, r0
    64ce:	dbf6      	blt.n	64be <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    64d0:	4770      	bx	lr
    64d2:	bf00      	nop
    64d4:	e000ed00 	.word	0xe000ed00

000064d8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    64d8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    64da:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    64dc:	2400      	movs	r4, #0
    64de:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    64e2:	f7ff ffe5 	bl	64b0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    64e6:	4623      	mov	r3, r4
    64e8:	e008      	b.n	64fc <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    64ea:	f103 0120 	add.w	r1, r3, #32
    64ee:	4a0e      	ldr	r2, [pc, #56]	; (6528 <z_arm_init_arch_hw_at_boot+0x50>)
    64f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    64f4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    64f8:	3301      	adds	r3, #1
    64fa:	b2db      	uxtb	r3, r3
    64fc:	2b07      	cmp	r3, #7
    64fe:	d9f4      	bls.n	64ea <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    6500:	2300      	movs	r3, #0
    6502:	e008      	b.n	6516 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    6504:	f103 0160 	add.w	r1, r3, #96	; 0x60
    6508:	4a07      	ldr	r2, [pc, #28]	; (6528 <z_arm_init_arch_hw_at_boot+0x50>)
    650a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    650e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    6512:	3301      	adds	r3, #1
    6514:	b2db      	uxtb	r3, r3
    6516:	2b07      	cmp	r3, #7
    6518:	d9f4      	bls.n	6504 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    651a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    651c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6520:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    6524:	bd10      	pop	{r4, pc}
    6526:	bf00      	nop
    6528:	e000e100 	.word	0xe000e100

0000652c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    652c:	b508      	push	{r3, lr}
	if (_current == thread) {
    652e:	4b0a      	ldr	r3, [pc, #40]	; (6558 <z_impl_k_thread_abort+0x2c>)
    6530:	689b      	ldr	r3, [r3, #8]
    6532:	4283      	cmp	r3, r0
    6534:	d002      	beq.n	653c <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    6536:	f005 fc81 	bl	be3c <z_thread_abort>
}
    653a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    653c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    6540:	2b00      	cmp	r3, #0
    6542:	d0f8      	beq.n	6536 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6544:	4b05      	ldr	r3, [pc, #20]	; (655c <z_impl_k_thread_abort+0x30>)
    6546:	685a      	ldr	r2, [r3, #4]
    6548:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    654c:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    654e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6550:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    6554:	625a      	str	r2, [r3, #36]	; 0x24
    6556:	e7ee      	b.n	6536 <z_impl_k_thread_abort+0xa>
    6558:	20005324 	.word	0x20005324
    655c:	e000ed00 	.word	0xe000ed00

00006560 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    6560:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    6562:	4b03      	ldr	r3, [pc, #12]	; (6570 <z_arm_configure_static_mpu_regions+0x10>)
    6564:	4a03      	ldr	r2, [pc, #12]	; (6574 <z_arm_configure_static_mpu_regions+0x14>)
    6566:	2101      	movs	r1, #1
    6568:	4803      	ldr	r0, [pc, #12]	; (6578 <z_arm_configure_static_mpu_regions+0x18>)
    656a:	f000 f8bb 	bl	66e4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    656e:	bd08      	pop	{r3, pc}
    6570:	20040000 	.word	0x20040000
    6574:	20000000 	.word	0x20000000
    6578:	00010f08 	.word	0x00010f08

0000657c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    657c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    657e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    6582:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    6584:	4804      	ldr	r0, [pc, #16]	; (6598 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    6586:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    6588:	2320      	movs	r3, #32
    658a:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    658c:	4b03      	ldr	r3, [pc, #12]	; (659c <z_arm_configure_dynamic_mpu_regions+0x20>)
    658e:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    6590:	2101      	movs	r1, #1
    6592:	f000 f8c9 	bl	6728 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    6596:	bd08      	pop	{r3, pc}
    6598:	20004dbc 	.word	0x20004dbc
    659c:	150b0000 	.word	0x150b0000

000065a0 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    65a0:	4a08      	ldr	r2, [pc, #32]	; (65c4 <region_init+0x24>)
    65a2:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    65a6:	680b      	ldr	r3, [r1, #0]
    65a8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    65ac:	4303      	orrs	r3, r0
    65ae:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    65b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    65b6:	688b      	ldr	r3, [r1, #8]
    65b8:	f043 0301 	orr.w	r3, r3, #1
    65bc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    65c0:	4770      	bx	lr
    65c2:	bf00      	nop
    65c4:	e000ed00 	.word	0xe000ed00

000065c8 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    65c8:	b510      	push	{r4, lr}
    65ca:	b084      	sub	sp, #16
    65cc:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    65ce:	2807      	cmp	r0, #7
    65d0:	d804      	bhi.n	65dc <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    65d2:	f7ff ffe5 	bl	65a0 <region_init>

	return index;
    65d6:	4620      	mov	r0, r4
}
    65d8:	b004      	add	sp, #16
    65da:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    65dc:	9003      	str	r0, [sp, #12]
    65de:	4b06      	ldr	r3, [pc, #24]	; (65f8 <region_allocate_and_init+0x30>)
    65e0:	9302      	str	r3, [sp, #8]
    65e2:	2000      	movs	r0, #0
    65e4:	9001      	str	r0, [sp, #4]
    65e6:	9000      	str	r0, [sp, #0]
    65e8:	4603      	mov	r3, r0
    65ea:	2201      	movs	r2, #1
    65ec:	4903      	ldr	r1, [pc, #12]	; (65fc <region_allocate_and_init+0x34>)
    65ee:	f008 f906 	bl	e7fe <z_log_msg2_runtime_create>
		return -EINVAL;
    65f2:	f06f 0015 	mvn.w	r0, #21
    65f6:	e7ef      	b.n	65d8 <region_allocate_and_init+0x10>
    65f8:	00010f14 	.word	0x00010f14
    65fc:	0000fcb0 	.word	0x0000fcb0

00006600 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    6600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6604:	b085      	sub	sp, #20
    6606:	4680      	mov	r8, r0
    6608:	460f      	mov	r7, r1
    660a:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
    660c:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    660e:	2500      	movs	r5, #0
    6610:	e009      	b.n	6626 <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6612:	4621      	mov	r1, r4
    6614:	b2f0      	uxtb	r0, r6
    6616:	f008 f901 	bl	e81c <mpu_configure_region>
    661a:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    661c:	f110 0f16 	cmn.w	r0, #22
    6620:	d01e      	beq.n	6660 <mpu_configure_regions+0x60>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    6622:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    6624:	3501      	adds	r5, #1
    6626:	42bd      	cmp	r5, r7
    6628:	da1a      	bge.n	6660 <mpu_configure_regions+0x60>
		if (regions[i].size == 0U) {
    662a:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    662e:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    6632:	6862      	ldr	r2, [r4, #4]
    6634:	2a00      	cmp	r2, #0
    6636:	d0f5      	beq.n	6624 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
    6638:	f1b9 0f00 	cmp.w	r9, #0
    663c:	d0e9      	beq.n	6612 <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
    663e:	4620      	mov	r0, r4
    6640:	f008 f8cc 	bl	e7dc <mpu_partition_is_valid>
		if (do_sanity_check &&
    6644:	2800      	cmp	r0, #0
    6646:	d1e4      	bne.n	6612 <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
    6648:	9503      	str	r5, [sp, #12]
    664a:	4b07      	ldr	r3, [pc, #28]	; (6668 <mpu_configure_regions+0x68>)
    664c:	9302      	str	r3, [sp, #8]
    664e:	9001      	str	r0, [sp, #4]
    6650:	9000      	str	r0, [sp, #0]
    6652:	4603      	mov	r3, r0
    6654:	2201      	movs	r2, #1
    6656:	4905      	ldr	r1, [pc, #20]	; (666c <mpu_configure_regions+0x6c>)
    6658:	f008 f8d1 	bl	e7fe <z_log_msg2_runtime_create>
			return -EINVAL;
    665c:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    6660:	4630      	mov	r0, r6
    6662:	b005      	add	sp, #20
    6664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6668:	00010f3c 	.word	0x00010f3c
    666c:	0000fcb0 	.word	0x0000fcb0

00006670 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    6670:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    6672:	4c03      	ldr	r4, [pc, #12]	; (6680 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    6674:	2301      	movs	r3, #1
    6676:	7822      	ldrb	r2, [r4, #0]
    6678:	f7ff ffc2 	bl	6600 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    667c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    667e:	bd10      	pop	{r4, pc}
    6680:	2000555f 	.word	0x2000555f

00006684 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    6684:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    6686:	2300      	movs	r3, #0
    6688:	4a09      	ldr	r2, [pc, #36]	; (66b0 <mpu_configure_dynamic_mpu_regions+0x2c>)
    668a:	7812      	ldrb	r2, [r2, #0]
    668c:	f7ff ffb8 	bl	6600 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    6690:	f110 0f16 	cmn.w	r0, #22
    6694:	d00a      	beq.n	66ac <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    6696:	4603      	mov	r3, r0
    6698:	e006      	b.n	66a8 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    669a:	4a06      	ldr	r2, [pc, #24]	; (66b4 <mpu_configure_dynamic_mpu_regions+0x30>)
    669c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    66a0:	2100      	movs	r1, #0
    66a2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    66a6:	3301      	adds	r3, #1
    66a8:	2b07      	cmp	r3, #7
    66aa:	ddf6      	ble.n	669a <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    66ac:	bd08      	pop	{r3, pc}
    66ae:	bf00      	nop
    66b0:	2000555f 	.word	0x2000555f
    66b4:	e000ed00 	.word	0xe000ed00

000066b8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    66b8:	4b04      	ldr	r3, [pc, #16]	; (66cc <arm_core_mpu_enable+0x14>)
    66ba:	2205      	movs	r2, #5
    66bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    66c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    66c4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    66c8:	4770      	bx	lr
    66ca:	bf00      	nop
    66cc:	e000ed00 	.word	0xe000ed00

000066d0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    66d0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    66d4:	4b02      	ldr	r3, [pc, #8]	; (66e0 <arm_core_mpu_disable+0x10>)
    66d6:	2200      	movs	r2, #0
    66d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    66dc:	4770      	bx	lr
    66de:	bf00      	nop
    66e0:	e000ed00 	.word	0xe000ed00

000066e4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    66e4:	b538      	push	{r3, r4, r5, lr}
    66e6:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    66e8:	f7ff ffc2 	bl	6670 <mpu_configure_static_mpu_regions>
    66ec:	f110 0f16 	cmn.w	r0, #22
    66f0:	d000      	beq.n	66f4 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    66f2:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    66f4:	4d08      	ldr	r5, [pc, #32]	; (6718 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    66f6:	f240 1311 	movw	r3, #273	; 0x111
    66fa:	462a      	mov	r2, r5
    66fc:	4907      	ldr	r1, [pc, #28]	; (671c <arm_core_mpu_configure_static_mpu_regions+0x38>)
    66fe:	4808      	ldr	r0, [pc, #32]	; (6720 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    6700:	f007 ff55 	bl	e5ae <assert_print>
    6704:	4621      	mov	r1, r4
    6706:	4807      	ldr	r0, [pc, #28]	; (6724 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    6708:	f007 ff51 	bl	e5ae <assert_print>
    670c:	f240 1111 	movw	r1, #273	; 0x111
    6710:	4628      	mov	r0, r5
    6712:	f007 ff45 	bl	e5a0 <assert_post_action>
}
    6716:	e7ec      	b.n	66f2 <arm_core_mpu_configure_static_mpu_regions+0xe>
    6718:	00010f60 	.word	0x00010f60
    671c:	000107a0 	.word	0x000107a0
    6720:	000100e4 	.word	0x000100e4
    6724:	00010f98 	.word	0x00010f98

00006728 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    6728:	b538      	push	{r3, r4, r5, lr}
    672a:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    672c:	f7ff ffaa 	bl	6684 <mpu_configure_dynamic_mpu_regions>
    6730:	f110 0f16 	cmn.w	r0, #22
    6734:	d000      	beq.n	6738 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    6736:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    6738:	4d08      	ldr	r5, [pc, #32]	; (675c <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    673a:	f44f 7398 	mov.w	r3, #304	; 0x130
    673e:	462a      	mov	r2, r5
    6740:	4907      	ldr	r1, [pc, #28]	; (6760 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    6742:	4808      	ldr	r0, [pc, #32]	; (6764 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    6744:	f007 ff33 	bl	e5ae <assert_print>
    6748:	4621      	mov	r1, r4
    674a:	4807      	ldr	r0, [pc, #28]	; (6768 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    674c:	f007 ff2f 	bl	e5ae <assert_print>
    6750:	f44f 7198 	mov.w	r1, #304	; 0x130
    6754:	4628      	mov	r0, r5
    6756:	f007 ff23 	bl	e5a0 <assert_post_action>
}
    675a:	e7ec      	b.n	6736 <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    675c:	00010f60 	.word	0x00010f60
    6760:	000107a0 	.word	0x000107a0
    6764:	000100e4 	.word	0x000100e4
    6768:	00010fc4 	.word	0x00010fc4

0000676c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    676c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    676e:	4b24      	ldr	r3, [pc, #144]	; (6800 <z_arm_mpu_init+0x94>)
    6770:	681d      	ldr	r5, [r3, #0]
    6772:	2d08      	cmp	r5, #8
    6774:	d803      	bhi.n	677e <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    6776:	f7ff ffab 	bl	66d0 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    677a:	2400      	movs	r4, #0
    677c:	e01e      	b.n	67bc <z_arm_mpu_init+0x50>
		__ASSERT(0,
    677e:	4c21      	ldr	r4, [pc, #132]	; (6804 <z_arm_mpu_init+0x98>)
    6780:	f44f 73a4 	mov.w	r3, #328	; 0x148
    6784:	4622      	mov	r2, r4
    6786:	4920      	ldr	r1, [pc, #128]	; (6808 <z_arm_mpu_init+0x9c>)
    6788:	4820      	ldr	r0, [pc, #128]	; (680c <z_arm_mpu_init+0xa0>)
    678a:	f007 ff10 	bl	e5ae <assert_print>
    678e:	2208      	movs	r2, #8
    6790:	4629      	mov	r1, r5
    6792:	481f      	ldr	r0, [pc, #124]	; (6810 <z_arm_mpu_init+0xa4>)
    6794:	f007 ff0b 	bl	e5ae <assert_print>
    6798:	f44f 71a4 	mov.w	r1, #328	; 0x148
    679c:	4620      	mov	r0, r4
    679e:	f007 feff 	bl	e5a0 <assert_post_action>
		return -1;
    67a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    67a6:	e017      	b.n	67d8 <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    67a8:	4b15      	ldr	r3, [pc, #84]	; (6800 <z_arm_mpu_init+0x94>)
    67aa:	6859      	ldr	r1, [r3, #4]
    67ac:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    67b0:	0093      	lsls	r3, r2, #2
    67b2:	4419      	add	r1, r3
    67b4:	4620      	mov	r0, r4
    67b6:	f7ff fef3 	bl	65a0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    67ba:	3401      	adds	r4, #1
    67bc:	42a5      	cmp	r5, r4
    67be:	d8f3      	bhi.n	67a8 <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    67c0:	4b14      	ldr	r3, [pc, #80]	; (6814 <z_arm_mpu_init+0xa8>)
    67c2:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    67c4:	f7ff ff78 	bl	66b8 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    67c8:	4b13      	ldr	r3, [pc, #76]	; (6818 <z_arm_mpu_init+0xac>)
    67ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    67ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
    67d2:	2b08      	cmp	r3, #8
    67d4:	d101      	bne.n	67da <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    67d6:	2000      	movs	r0, #0
}
    67d8:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    67da:	4c0a      	ldr	r4, [pc, #40]	; (6804 <z_arm_mpu_init+0x98>)
    67dc:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    67e0:	4622      	mov	r2, r4
    67e2:	490e      	ldr	r1, [pc, #56]	; (681c <z_arm_mpu_init+0xb0>)
    67e4:	4809      	ldr	r0, [pc, #36]	; (680c <z_arm_mpu_init+0xa0>)
    67e6:	f007 fee2 	bl	e5ae <assert_print>
    67ea:	480d      	ldr	r0, [pc, #52]	; (6820 <z_arm_mpu_init+0xb4>)
    67ec:	f007 fedf 	bl	e5ae <assert_print>
    67f0:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    67f4:	4620      	mov	r0, r4
    67f6:	f007 fed3 	bl	e5a0 <assert_post_action>
	return 0;
    67fa:	2000      	movs	r0, #0
    67fc:	e7ec      	b.n	67d8 <z_arm_mpu_init+0x6c>
    67fe:	bf00      	nop
    6800:	0001122c 	.word	0x0001122c
    6804:	00010f60 	.word	0x00010f60
    6808:	000107a0 	.word	0x000107a0
    680c:	000100e4 	.word	0x000100e4
    6810:	00010ff4 	.word	0x00010ff4
    6814:	2000555f 	.word	0x2000555f
    6818:	e000ed00 	.word	0xe000ed00
    681c:	00011028 	.word	0x00011028
    6820:	00011078 	.word	0x00011078

00006824 <malloc_prepare>:

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    6824:	4b0d      	ldr	r3, [pc, #52]	; (685c <malloc_prepare+0x38>)
    6826:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    682a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    682e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6832:	d301      	bcc.n	6838 <malloc_prepare+0x14>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    6834:	2000      	movs	r0, #0
    6836:	4770      	bx	lr
{
    6838:	b510      	push	{r4, lr}
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    683a:	4c09      	ldr	r4, [pc, #36]	; (6860 <malloc_prepare+0x3c>)
    683c:	2381      	movs	r3, #129	; 0x81
    683e:	4622      	mov	r2, r4
    6840:	4908      	ldr	r1, [pc, #32]	; (6864 <malloc_prepare+0x40>)
    6842:	4809      	ldr	r0, [pc, #36]	; (6868 <malloc_prepare+0x44>)
    6844:	f007 feb3 	bl	e5ae <assert_print>
    6848:	4808      	ldr	r0, [pc, #32]	; (686c <malloc_prepare+0x48>)
    684a:	f007 feb0 	bl	e5ae <assert_print>
    684e:	2181      	movs	r1, #129	; 0x81
    6850:	4620      	mov	r0, r4
    6852:	f007 fea5 	bl	e5a0 <assert_post_action>
}
    6856:	2000      	movs	r0, #0
    6858:	bd10      	pop	{r4, pc}
    685a:	bf00      	nop
    685c:	200078c0 	.word	0x200078c0
    6860:	0001109c 	.word	0x0001109c
    6864:	000110cc 	.word	0x000110cc
    6868:	000100e4 	.word	0x000100e4
    686c:	00011114 	.word	0x00011114

00006870 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    6870:	4b01      	ldr	r3, [pc, #4]	; (6878 <__stdout_hook_install+0x8>)
    6872:	6018      	str	r0, [r3, #0]
}
    6874:	4770      	bx	lr
    6876:	bf00      	nop
    6878:	20004050 	.word	0x20004050

0000687c <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    687c:	b570      	push	{r4, r5, r6, lr}
    687e:	4606      	mov	r6, r0
    6880:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    6882:	2400      	movs	r4, #0
    6884:	e000      	b.n	6888 <z_impl_zephyr_read_stdin+0xc>
    6886:	3401      	adds	r4, #1
    6888:	42ac      	cmp	r4, r5
    688a:	da08      	bge.n	689e <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
    688c:	4b05      	ldr	r3, [pc, #20]	; (68a4 <z_impl_zephyr_read_stdin+0x28>)
    688e:	681b      	ldr	r3, [r3, #0]
    6890:	4798      	blx	r3
    6892:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    6894:	280a      	cmp	r0, #10
    6896:	d001      	beq.n	689c <z_impl_zephyr_read_stdin+0x20>
    6898:	280d      	cmp	r0, #13
    689a:	d1f4      	bne.n	6886 <z_impl_zephyr_read_stdin+0xa>
			i++;
    689c:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
    689e:	4620      	mov	r0, r4
    68a0:	bd70      	pop	{r4, r5, r6, pc}
    68a2:	bf00      	nop
    68a4:	2000404c 	.word	0x2000404c

000068a8 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    68a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68aa:	4605      	mov	r5, r0
    68ac:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    68ae:	2400      	movs	r4, #0
    68b0:	e004      	b.n	68bc <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
    68b2:	4b09      	ldr	r3, [pc, #36]	; (68d8 <z_impl_zephyr_write_stdout+0x30>)
    68b4:	681b      	ldr	r3, [r3, #0]
    68b6:	7830      	ldrb	r0, [r6, #0]
    68b8:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    68ba:	3401      	adds	r4, #1
    68bc:	42bc      	cmp	r4, r7
    68be:	da08      	bge.n	68d2 <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
    68c0:	192e      	adds	r6, r5, r4
    68c2:	5d2b      	ldrb	r3, [r5, r4]
    68c4:	2b0a      	cmp	r3, #10
    68c6:	d1f4      	bne.n	68b2 <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
    68c8:	4b03      	ldr	r3, [pc, #12]	; (68d8 <z_impl_zephyr_write_stdout+0x30>)
    68ca:	681b      	ldr	r3, [r3, #0]
    68cc:	200d      	movs	r0, #13
    68ce:	4798      	blx	r3
    68d0:	e7ef      	b.n	68b2 <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
    68d2:	4638      	mov	r0, r7
    68d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    68d6:	bf00      	nop
    68d8:	20004050 	.word	0x20004050

000068dc <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    68dc:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
    68de:	2205      	movs	r2, #5
    68e0:	4902      	ldr	r1, [pc, #8]	; (68ec <_exit+0x10>)
    68e2:	2001      	movs	r0, #1
    68e4:	f007 ffc4 	bl	e870 <_write>
	while (1) {
    68e8:	e7fe      	b.n	68e8 <_exit+0xc>
    68ea:	bf00      	nop
    68ec:	0001119c 	.word	0x0001119c

000068f0 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    68f0:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    68f2:	4b08      	ldr	r3, [pc, #32]	; (6914 <_sbrk+0x24>)
    68f4:	6819      	ldr	r1, [r3, #0]
    68f6:	4b08      	ldr	r3, [pc, #32]	; (6918 <_sbrk+0x28>)
    68f8:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    68fa:	440a      	add	r2, r1
    68fc:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    6900:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    6904:	429a      	cmp	r2, r3
    6906:	d202      	bcs.n	690e <_sbrk+0x1e>
		heap_sz += count;
    6908:	4b02      	ldr	r3, [pc, #8]	; (6914 <_sbrk+0x24>)
    690a:	601a      	str	r2, [r3, #0]
		ret = ptr;
    690c:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    690e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    6912:	4770      	bx	lr
    6914:	20004dc8 	.word	0x20004dc8
    6918:	200078c0 	.word	0x200078c0

0000691c <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    691c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    691e:	4604      	mov	r4, r0
    6920:	b140      	cbz	r0, 6934 <__retarget_lock_init_recursive+0x18>

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    6922:	2014      	movs	r0, #20
    6924:	f006 f950 	bl	cbc8 <malloc>
    6928:	6020      	str	r0, [r4, #0]
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
    692a:	b188      	cbz	r0, 6950 <__retarget_lock_init_recursive+0x34>

	k_mutex_init((struct k_mutex *)*lock);
    692c:	6820      	ldr	r0, [r4, #0]
    692e:	f008 fccb 	bl	f2c8 <z_impl_k_mutex_init>
}
    6932:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    6934:	4d0f      	ldr	r5, [pc, #60]	; (6974 <__retarget_lock_init_recursive+0x58>)
    6936:	f240 1377 	movw	r3, #375	; 0x177
    693a:	462a      	mov	r2, r5
    693c:	490e      	ldr	r1, [pc, #56]	; (6978 <__retarget_lock_init_recursive+0x5c>)
    693e:	480f      	ldr	r0, [pc, #60]	; (697c <__retarget_lock_init_recursive+0x60>)
    6940:	f007 fe35 	bl	e5ae <assert_print>
    6944:	f240 1177 	movw	r1, #375	; 0x177
    6948:	4628      	mov	r0, r5
    694a:	f007 fe29 	bl	e5a0 <assert_post_action>
    694e:	e7e8      	b.n	6922 <__retarget_lock_init_recursive+0x6>
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
    6950:	4d08      	ldr	r5, [pc, #32]	; (6974 <__retarget_lock_init_recursive+0x58>)
    6952:	f240 137f 	movw	r3, #383	; 0x17f
    6956:	462a      	mov	r2, r5
    6958:	4909      	ldr	r1, [pc, #36]	; (6980 <__retarget_lock_init_recursive+0x64>)
    695a:	4808      	ldr	r0, [pc, #32]	; (697c <__retarget_lock_init_recursive+0x60>)
    695c:	f007 fe27 	bl	e5ae <assert_print>
    6960:	4808      	ldr	r0, [pc, #32]	; (6984 <__retarget_lock_init_recursive+0x68>)
    6962:	f007 fe24 	bl	e5ae <assert_print>
    6966:	f240 117f 	movw	r1, #383	; 0x17f
    696a:	4628      	mov	r0, r5
    696c:	f007 fe18 	bl	e5a0 <assert_post_action>
    6970:	e7dc      	b.n	692c <__retarget_lock_init_recursive+0x10>
    6972:	bf00      	nop
    6974:	0001109c 	.word	0x0001109c
    6978:	000111a4 	.word	0x000111a4
    697c:	000100e4 	.word	0x000100e4
    6980:	000111b8 	.word	0x000111b8
    6984:	000111f8 	.word	0x000111f8

00006988 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    6988:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    698a:	4604      	mov	r4, r0
    698c:	b138      	cbz	r0, 699e <__retarget_lock_acquire_recursive+0x16>
	return z_impl_k_mutex_lock(mutex, timeout);
    698e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6996:	4620      	mov	r0, r4
    6998:	f003 fde4 	bl	a564 <z_impl_k_mutex_lock>
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    699c:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    699e:	4d07      	ldr	r5, [pc, #28]	; (69bc <__retarget_lock_acquire_recursive+0x34>)
    69a0:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    69a4:	462a      	mov	r2, r5
    69a6:	4906      	ldr	r1, [pc, #24]	; (69c0 <__retarget_lock_acquire_recursive+0x38>)
    69a8:	4806      	ldr	r0, [pc, #24]	; (69c4 <__retarget_lock_acquire_recursive+0x3c>)
    69aa:	f007 fe00 	bl	e5ae <assert_print>
    69ae:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    69b2:	4628      	mov	r0, r5
    69b4:	f007 fdf4 	bl	e5a0 <assert_post_action>
    69b8:	e7e9      	b.n	698e <__retarget_lock_acquire_recursive+0x6>
    69ba:	bf00      	nop
    69bc:	0001109c 	.word	0x0001109c
    69c0:	000111a4 	.word	0x000111a4
    69c4:	000100e4 	.word	0x000100e4

000069c8 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    69c8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    69ca:	4604      	mov	r4, r0
    69cc:	b118      	cbz	r0, 69d6 <__retarget_lock_release_recursive+0xe>
	return z_impl_k_mutex_unlock(mutex);
    69ce:	4620      	mov	r0, r4
    69d0:	f003 fee8 	bl	a7a4 <z_impl_k_mutex_unlock>
	k_mutex_unlock((struct k_mutex *)lock);
}
    69d4:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    69d6:	4d07      	ldr	r5, [pc, #28]	; (69f4 <__retarget_lock_release_recursive+0x2c>)
    69d8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    69dc:	462a      	mov	r2, r5
    69de:	4906      	ldr	r1, [pc, #24]	; (69f8 <__retarget_lock_release_recursive+0x30>)
    69e0:	4806      	ldr	r0, [pc, #24]	; (69fc <__retarget_lock_release_recursive+0x34>)
    69e2:	f007 fde4 	bl	e5ae <assert_print>
    69e6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    69ea:	4628      	mov	r0, r5
    69ec:	f007 fdd8 	bl	e5a0 <assert_post_action>
    69f0:	e7ed      	b.n	69ce <__retarget_lock_release_recursive+0x6>
    69f2:	bf00      	nop
    69f4:	0001109c 	.word	0x0001109c
    69f8:	000111a4 	.word	0x000111a4
    69fc:	000100e4 	.word	0x000100e4

00006a00 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    6a00:	b510      	push	{r4, lr}
	__asm__ volatile(
    6a02:	f04f 0320 	mov.w	r3, #32
    6a06:	f3ef 8411 	mrs	r4, BASEPRI
    6a0a:	f383 8812 	msr	BASEPRI_MAX, r3
    6a0e:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    6a12:	2301      	movs	r3, #1
    6a14:	4a0c      	ldr	r2, [pc, #48]	; (6a48 <nordicsemi_nrf52_init+0x48>)
    6a16:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6a1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6a1e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    6a22:	f007 ff42 	bl	e8aa <nrf52_errata_197>
    6a26:	b120      	cbz	r0, 6a32 <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    6a28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6a2c:	2201      	movs	r2, #1
    6a2e:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    6a32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6a36:	2201      	movs	r2, #1
    6a38:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    6a3c:	f384 8811 	msr	BASEPRI, r4
    6a40:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    6a44:	2000      	movs	r0, #0
    6a46:	bd10      	pop	{r4, pc}
    6a48:	4001e000 	.word	0x4001e000

00006a4c <sys_arch_reboot>:
    *p_gpregret = val;
    6a4c:	b2c0      	uxtb	r0, r0
    6a4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6a52:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    6a56:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6a5a:	4905      	ldr	r1, [pc, #20]	; (6a70 <sys_arch_reboot+0x24>)
    6a5c:	68ca      	ldr	r2, [r1, #12]
    6a5e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6a62:	4b04      	ldr	r3, [pc, #16]	; (6a74 <sys_arch_reboot+0x28>)
    6a64:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6a66:	60cb      	str	r3, [r1, #12]
    6a68:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    6a6c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6a6e:	e7fd      	b.n	6a6c <sys_arch_reboot+0x20>
    6a70:	e000ed00 	.word	0xe000ed00
    6a74:	05fa0004 	.word	0x05fa0004

00006a78 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    6a78:	b130      	cbz	r0, 6a88 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    6a7a:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    6a7c:	0180      	lsls	r0, r0, #6
    6a7e:	4b03      	ldr	r3, [pc, #12]	; (6a8c <arch_busy_wait+0x14>)
    6a80:	f043 0301 	orr.w	r3, r3, #1
    6a84:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    6a86:	bd08      	pop	{r3, pc}
    6a88:	4770      	bx	lr
    6a8a:	bf00      	nop
    6a8c:	0000fd70 	.word	0x0000fd70

00006a90 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    6a90:	4800      	ldr	r0, [pc, #0]	; (6a94 <get_hf_flags+0x4>)
    6a92:	4770      	bx	lr
    6a94:	20004e24 	.word	0x20004e24

00006a98 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    6a98:	4b01      	ldr	r3, [pc, #4]	; (6aa0 <get_subsys+0x8>)
    6a9a:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    6a9c:	1140      	asrs	r0, r0, #5
    6a9e:	4770      	bx	lr
    6aa0:	20004ddc 	.word	0x20004ddc

00006aa4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6aa4:	b530      	push	{r4, r5, lr}
    6aa6:	b083      	sub	sp, #12
    6aa8:	4605      	mov	r5, r0
    6aaa:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6aac:	f7ff fff4 	bl	6a98 <get_subsys>
    6ab0:	4601      	mov	r1, r0
    6ab2:	2340      	movs	r3, #64	; 0x40
    6ab4:	9300      	str	r3, [sp, #0]
    6ab6:	4623      	mov	r3, r4
    6ab8:	4a05      	ldr	r2, [pc, #20]	; (6ad0 <onoff_start+0x2c>)
    6aba:	4806      	ldr	r0, [pc, #24]	; (6ad4 <onoff_start+0x30>)
    6abc:	f007 ff84 	bl	e9c8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    6ac0:	1e01      	subs	r1, r0, #0
    6ac2:	db01      	blt.n	6ac8 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    6ac4:	b003      	add	sp, #12
    6ac6:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    6ac8:	4628      	mov	r0, r5
    6aca:	47a0      	blx	r4
}
    6acc:	e7fa      	b.n	6ac4 <onoff_start+0x20>
    6ace:	bf00      	nop
    6ad0:	0000ea11 	.word	0x0000ea11
    6ad4:	0000fa98 	.word	0x0000fa98

00006ad8 <generic_hfclk_stop>:
{
    6ad8:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6ada:	4b0a      	ldr	r3, [pc, #40]	; (6b04 <generic_hfclk_stop+0x2c>)
    6adc:	f3bf 8f5b 	dmb	ish
    6ae0:	e853 2f00 	ldrex	r2, [r3]
    6ae4:	f022 0102 	bic.w	r1, r2, #2
    6ae8:	e843 1000 	strex	r0, r1, [r3]
    6aec:	2800      	cmp	r0, #0
    6aee:	d1f7      	bne.n	6ae0 <generic_hfclk_stop+0x8>
    6af0:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    6af4:	f012 0f01 	tst.w	r2, #1
    6af8:	d000      	beq.n	6afc <generic_hfclk_stop+0x24>
}
    6afa:	bd08      	pop	{r3, pc}
	hfclk_stop();
    6afc:	f007 ff9a 	bl	ea34 <hfclk_stop>
    6b00:	e7fb      	b.n	6afa <generic_hfclk_stop+0x22>
    6b02:	bf00      	nop
    6b04:	20004e34 	.word	0x20004e34

00006b08 <get_status>:
{
    6b08:	b570      	push	{r4, r5, r6, lr}
    6b0a:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    6b0c:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6b0e:	2c01      	cmp	r4, #1
    6b10:	d807      	bhi.n	6b22 <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6b12:	4621      	mov	r1, r4
    6b14:	4628      	mov	r0, r5
    6b16:	f007 feea 	bl	e8ee <get_sub_data>
    6b1a:	6880      	ldr	r0, [r0, #8]
}
    6b1c:	f000 0007 	and.w	r0, r0, #7
    6b20:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6b22:	4e06      	ldr	r6, [pc, #24]	; (6b3c <get_status+0x34>)
    6b24:	2379      	movs	r3, #121	; 0x79
    6b26:	4632      	mov	r2, r6
    6b28:	4905      	ldr	r1, [pc, #20]	; (6b40 <get_status+0x38>)
    6b2a:	4806      	ldr	r0, [pc, #24]	; (6b44 <get_status+0x3c>)
    6b2c:	f007 fd3f 	bl	e5ae <assert_print>
    6b30:	2179      	movs	r1, #121	; 0x79
    6b32:	4630      	mov	r0, r6
    6b34:	f007 fd34 	bl	e5a0 <assert_post_action>
    6b38:	e7eb      	b.n	6b12 <get_status+0xa>
    6b3a:	bf00      	nop
    6b3c:	00011250 	.word	0x00011250
    6b40:	00011290 	.word	0x00011290
    6b44:	000100e4 	.word	0x000100e4

00006b48 <stop>:
{
    6b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b4c:	4607      	mov	r7, r0
    6b4e:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    6b50:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    6b52:	4621      	mov	r1, r4
    6b54:	f007 fecb 	bl	e8ee <get_sub_data>
    6b58:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6b5a:	2c01      	cmp	r4, #1
    6b5c:	d80f      	bhi.n	6b7e <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    6b5e:	4631      	mov	r1, r6
    6b60:	f105 0008 	add.w	r0, r5, #8
    6b64:	f007 fed4 	bl	e910 <set_off_state>
	if (err < 0) {
    6b68:	2800      	cmp	r0, #0
    6b6a:	db06      	blt.n	6b7a <stop+0x32>
	get_sub_config(dev, type)->stop();
    6b6c:	4621      	mov	r1, r4
    6b6e:	4638      	mov	r0, r7
    6b70:	f007 fec4 	bl	e8fc <get_sub_config>
    6b74:	6843      	ldr	r3, [r0, #4]
    6b76:	4798      	blx	r3
	return 0;
    6b78:	2000      	movs	r0, #0
}
    6b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6b7e:	f8df 801c 	ldr.w	r8, [pc, #28]	; 6b9c <stop+0x54>
    6b82:	f240 134d 	movw	r3, #333	; 0x14d
    6b86:	4642      	mov	r2, r8
    6b88:	4905      	ldr	r1, [pc, #20]	; (6ba0 <stop+0x58>)
    6b8a:	4806      	ldr	r0, [pc, #24]	; (6ba4 <stop+0x5c>)
    6b8c:	f007 fd0f 	bl	e5ae <assert_print>
    6b90:	f240 114d 	movw	r1, #333	; 0x14d
    6b94:	4640      	mov	r0, r8
    6b96:	f007 fd03 	bl	e5a0 <assert_post_action>
    6b9a:	e7e0      	b.n	6b5e <stop+0x16>
    6b9c:	00011250 	.word	0x00011250
    6ba0:	00011290 	.word	0x00011290
    6ba4:	000100e4 	.word	0x000100e4

00006ba8 <onoff_stop>:
{
    6ba8:	b538      	push	{r3, r4, r5, lr}
    6baa:	4605      	mov	r5, r0
    6bac:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6bae:	f7ff ff73 	bl	6a98 <get_subsys>
    6bb2:	4601      	mov	r1, r0
    6bb4:	2240      	movs	r2, #64	; 0x40
    6bb6:	4803      	ldr	r0, [pc, #12]	; (6bc4 <onoff_stop+0x1c>)
    6bb8:	f7ff ffc6 	bl	6b48 <stop>
    6bbc:	4601      	mov	r1, r0
	notify(mgr, res);
    6bbe:	4628      	mov	r0, r5
    6bc0:	47a0      	blx	r4
}
    6bc2:	bd38      	pop	{r3, r4, r5, pc}
    6bc4:	0000fa98 	.word	0x0000fa98

00006bc8 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    6bc8:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    6bca:	2801      	cmp	r0, #1
    6bcc:	d01d      	beq.n	6c0a <clock_event_handler+0x42>
    6bce:	2803      	cmp	r0, #3
    6bd0:	d020      	beq.n	6c14 <clock_event_handler+0x4c>
    6bd2:	b168      	cbz	r0, 6bf0 <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    6bd4:	4c16      	ldr	r4, [pc, #88]	; (6c30 <clock_event_handler+0x68>)
    6bd6:	f240 2362 	movw	r3, #610	; 0x262
    6bda:	4622      	mov	r2, r4
    6bdc:	4915      	ldr	r1, [pc, #84]	; (6c34 <clock_event_handler+0x6c>)
    6bde:	4816      	ldr	r0, [pc, #88]	; (6c38 <clock_event_handler+0x70>)
    6be0:	f007 fce5 	bl	e5ae <assert_print>
    6be4:	f240 2162 	movw	r1, #610	; 0x262
    6be8:	4620      	mov	r0, r4
    6bea:	f007 fcd9 	bl	e5a0 <assert_post_action>
		break;
	}
}
    6bee:	e010      	b.n	6c12 <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    6bf0:	2100      	movs	r1, #0
    6bf2:	4812      	ldr	r0, [pc, #72]	; (6c3c <clock_event_handler+0x74>)
    6bf4:	f007 fe7b 	bl	e8ee <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    6bf8:	6883      	ldr	r3, [r0, #8]
    6bfa:	f013 0f07 	tst.w	r3, #7
    6bfe:	d108      	bne.n	6c12 <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    6c00:	2100      	movs	r1, #0
    6c02:	480e      	ldr	r0, [pc, #56]	; (6c3c <clock_event_handler+0x74>)
    6c04:	f007 fece 	bl	e9a4 <clkstarted_handle>
    6c08:	e003      	b.n	6c12 <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6c0a:	2101      	movs	r1, #1
    6c0c:	480b      	ldr	r0, [pc, #44]	; (6c3c <clock_event_handler+0x74>)
    6c0e:	f007 fec9 	bl	e9a4 <clkstarted_handle>
}
    6c12:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    6c14:	4c06      	ldr	r4, [pc, #24]	; (6c30 <clock_event_handler+0x68>)
    6c16:	f240 235e 	movw	r3, #606	; 0x25e
    6c1a:	4622      	mov	r2, r4
    6c1c:	4905      	ldr	r1, [pc, #20]	; (6c34 <clock_event_handler+0x6c>)
    6c1e:	4806      	ldr	r0, [pc, #24]	; (6c38 <clock_event_handler+0x70>)
    6c20:	f007 fcc5 	bl	e5ae <assert_print>
    6c24:	f240 215e 	movw	r1, #606	; 0x25e
    6c28:	4620      	mov	r0, r4
    6c2a:	f007 fcb9 	bl	e5a0 <assert_post_action>
		break;
    6c2e:	e7f0      	b.n	6c12 <clock_event_handler+0x4a>
    6c30:	00011250 	.word	0x00011250
    6c34:	000107a0 	.word	0x000107a0
    6c38:	000100e4 	.word	0x000100e4
    6c3c:	0000fa98 	.word	0x0000fa98

00006c40 <api_blocking_start>:
{
    6c40:	b500      	push	{lr}
    6c42:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6c44:	f8cd d000 	str.w	sp, [sp]
    6c48:	f8cd d004 	str.w	sp, [sp, #4]
    6c4c:	2300      	movs	r3, #0
    6c4e:	9302      	str	r3, [sp, #8]
    6c50:	2301      	movs	r3, #1
    6c52:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6c54:	466b      	mov	r3, sp
    6c56:	4a07      	ldr	r2, [pc, #28]	; (6c74 <api_blocking_start+0x34>)
    6c58:	f007 fed2 	bl	ea00 <api_start>
	if (err < 0) {
    6c5c:	2800      	cmp	r0, #0
    6c5e:	db05      	blt.n	6c6c <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    6c60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6c64:	2300      	movs	r3, #0
    6c66:	4668      	mov	r0, sp
    6c68:	f003 feb4 	bl	a9d4 <z_impl_k_sem_take>
}
    6c6c:	b005      	add	sp, #20
    6c6e:	f85d fb04 	ldr.w	pc, [sp], #4
    6c72:	bf00      	nop
    6c74:	0000ea53 	.word	0x0000ea53

00006c78 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    6c78:	b570      	push	{r4, r5, r6, lr}
    6c7a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6c7c:	2200      	movs	r2, #0
    6c7e:	2101      	movs	r1, #1
    6c80:	4610      	mov	r0, r2
    6c82:	f7fe ff0f 	bl	5aa4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    6c86:	4811      	ldr	r0, [pc, #68]	; (6ccc <clk_init+0x54>)
    6c88:	f001 fd8c 	bl	87a4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    6c8c:	4b10      	ldr	r3, [pc, #64]	; (6cd0 <clk_init+0x58>)
    6c8e:	4298      	cmp	r0, r3
    6c90:	d119      	bne.n	6cc6 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    6c92:	f001 fdb1 	bl	87f8 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    6c96:	2400      	movs	r4, #0
    6c98:	2c01      	cmp	r4, #1
    6c9a:	d812      	bhi.n	6cc2 <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    6c9c:	4621      	mov	r1, r4
    6c9e:	4630      	mov	r0, r6
    6ca0:	f007 fe25 	bl	e8ee <get_sub_data>
    6ca4:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    6ca6:	4621      	mov	r1, r4
    6ca8:	4630      	mov	r0, r6
    6caa:	f007 fe2d 	bl	e908 <get_onoff_manager>
    6cae:	4909      	ldr	r1, [pc, #36]	; (6cd4 <clk_init+0x5c>)
    6cb0:	f007 fc02 	bl	e4b8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    6cb4:	2800      	cmp	r0, #0
    6cb6:	db05      	blt.n	6cc4 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6cb8:	2301      	movs	r3, #1
    6cba:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    6cbc:	441c      	add	r4, r3
    6cbe:	b2e4      	uxtb	r4, r4
    6cc0:	e7ea      	b.n	6c98 <clk_init+0x20>
	}

	return 0;
    6cc2:	2000      	movs	r0, #0
}
    6cc4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    6cc6:	f06f 0004 	mvn.w	r0, #4
    6cca:	e7fb      	b.n	6cc4 <clk_init+0x4c>
    6ccc:	00006bc9 	.word	0x00006bc9
    6cd0:	0bad0000 	.word	0x0bad0000
    6cd4:	0001130c 	.word	0x0001130c

00006cd8 <lfclk_spinwait>:
{
    6cd8:	b570      	push	{r4, r5, r6, lr}
    6cda:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    6cdc:	2801      	cmp	r0, #1
    6cde:	d107      	bne.n	6cf0 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6ce0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6ce4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6ce8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    6cec:	2b01      	cmp	r3, #1
    6cee:	d05a      	beq.n	6da6 <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6cf0:	f008 fab7 	bl	f262 <k_is_in_isr>
    6cf4:	b928      	cbnz	r0, 6d02 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    6cf6:	4b2f      	ldr	r3, [pc, #188]	; (6db4 <lfclk_spinwait+0xdc>)
    6cf8:	781b      	ldrb	r3, [r3, #0]
    6cfa:	2b00      	cmp	r3, #0
    6cfc:	d043      	beq.n	6d86 <lfclk_spinwait+0xae>
    6cfe:	2300      	movs	r3, #0
    6d00:	e000      	b.n	6d04 <lfclk_spinwait+0x2c>
    6d02:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    6d04:	461c      	mov	r4, r3
    6d06:	2b00      	cmp	r3, #0
    6d08:	d03f      	beq.n	6d8a <lfclk_spinwait+0xb2>
	__asm__ volatile(
    6d0a:	f04f 0320 	mov.w	r3, #32
    6d0e:	f3ef 8611 	mrs	r6, BASEPRI
    6d12:	f383 8812 	msr	BASEPRI_MAX, r3
    6d16:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    6d1a:	b924      	cbnz	r4, 6d26 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    6d1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d20:	2202      	movs	r2, #2
    6d22:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6d26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6d2a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6d2e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6d32:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    6d36:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    6d3a:	d12d      	bne.n	6d98 <lfclk_spinwait+0xc0>
    return false;
    6d3c:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    6d3e:	b11a      	cbz	r2, 6d48 <lfclk_spinwait+0x70>
    6d40:	2b01      	cmp	r3, #1
    6d42:	d02b      	beq.n	6d9c <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    6d44:	2d01      	cmp	r5, #1
    6d46:	d029      	beq.n	6d9c <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    6d48:	b30c      	cbz	r4, 6d8e <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    6d4a:	4630      	mov	r0, r6
    6d4c:	f7fe fe3a 	bl	59c4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    6d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d54:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    6d58:	2b00      	cmp	r3, #0
    6d5a:	d1e4      	bne.n	6d26 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6d5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d60:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    6d64:	2b00      	cmp	r3, #0
    6d66:	d0de      	beq.n	6d26 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d6c:	2200      	movs	r2, #0
    6d6e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    6d72:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    6d76:	2201      	movs	r2, #1
    6d78:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6d7c:	490e      	ldr	r1, [pc, #56]	; (6db8 <lfclk_spinwait+0xe0>)
    6d7e:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6d82:	609a      	str	r2, [r3, #8]
}
    6d84:	e7cf      	b.n	6d26 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6d86:	2301      	movs	r3, #1
    6d88:	e7bc      	b.n	6d04 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    6d8a:	2600      	movs	r6, #0
    6d8c:	e7c5      	b.n	6d1a <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    6d8e:	2021      	movs	r0, #33	; 0x21
    6d90:	2100      	movs	r1, #0
    6d92:	f005 f801 	bl	bd98 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    6d96:	e7db      	b.n	6d50 <lfclk_spinwait+0x78>
                return true;
    6d98:	2201      	movs	r2, #1
    6d9a:	e7d0      	b.n	6d3e <lfclk_spinwait+0x66>
	if (isr_mode) {
    6d9c:	b124      	cbz	r4, 6da8 <lfclk_spinwait+0xd0>
	__asm__ volatile(
    6d9e:	f386 8811 	msr	BASEPRI, r6
    6da2:	f3bf 8f6f 	isb	sy
}
    6da6:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    6da8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6dac:	2202      	movs	r2, #2
    6dae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6db2:	e7f8      	b.n	6da6 <lfclk_spinwait+0xce>
    6db4:	20005560 	.word	0x20005560
    6db8:	e000e100 	.word	0xe000e100

00006dbc <generic_hfclk_start>:
{
    6dbc:	b510      	push	{r4, lr}
	__asm__ volatile(
    6dbe:	f04f 0320 	mov.w	r3, #32
    6dc2:	f3ef 8411 	mrs	r4, BASEPRI
    6dc6:	f383 8812 	msr	BASEPRI_MAX, r3
    6dca:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    6dce:	4a13      	ldr	r2, [pc, #76]	; (6e1c <generic_hfclk_start+0x60>)
    6dd0:	6813      	ldr	r3, [r2, #0]
    6dd2:	f043 0302 	orr.w	r3, r3, #2
    6dd6:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    6dd8:	f013 0f01 	tst.w	r3, #1
    6ddc:	d108      	bne.n	6df0 <generic_hfclk_start+0x34>
	bool already_started = false;
    6dde:	2300      	movs	r3, #0
	__asm__ volatile(
    6de0:	f384 8811 	msr	BASEPRI, r4
    6de4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    6de8:	b99b      	cbnz	r3, 6e12 <generic_hfclk_start+0x56>
	hfclk_start();
    6dea:	f007 fe19 	bl	ea20 <hfclk_start>
}
    6dee:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6df0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6df4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6df8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    6dfc:	f012 0f01 	tst.w	r2, #1
    6e00:	d101      	bne.n	6e06 <generic_hfclk_start+0x4a>
	bool already_started = false;
    6e02:	2300      	movs	r3, #0
    6e04:	e7ec      	b.n	6de0 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    6e06:	f7ff fe43 	bl	6a90 <get_hf_flags>
    6e0a:	f007 fdb8 	bl	e97e <set_on_state>
			already_started = true;
    6e0e:	2301      	movs	r3, #1
    6e10:	e7e6      	b.n	6de0 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    6e12:	2100      	movs	r1, #0
    6e14:	4802      	ldr	r0, [pc, #8]	; (6e20 <generic_hfclk_start+0x64>)
    6e16:	f007 fdc5 	bl	e9a4 <clkstarted_handle>
		return;
    6e1a:	e7e8      	b.n	6dee <generic_hfclk_start+0x32>
    6e1c:	20004e34 	.word	0x20004e34
    6e20:	0000fa98 	.word	0x0000fa98

00006e24 <z_nrf_clock_control_lf_on>:
{
    6e24:	b538      	push	{r3, r4, r5, lr}
    6e26:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6e28:	4b1f      	ldr	r3, [pc, #124]	; (6ea8 <z_nrf_clock_control_lf_on+0x84>)
    6e2a:	2101      	movs	r1, #1
    6e2c:	f3bf 8f5b 	dmb	ish
    6e30:	e853 2f00 	ldrex	r2, [r3]
    6e34:	e843 1000 	strex	r0, r1, [r3]
    6e38:	2800      	cmp	r0, #0
    6e3a:	d1f9      	bne.n	6e30 <z_nrf_clock_control_lf_on+0xc>
    6e3c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    6e40:	b142      	cbz	r2, 6e54 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    6e42:	b134      	cbz	r4, 6e52 <z_nrf_clock_control_lf_on+0x2e>
    6e44:	1e63      	subs	r3, r4, #1
    6e46:	b2db      	uxtb	r3, r3
    6e48:	2b01      	cmp	r3, #1
    6e4a:	d81f      	bhi.n	6e8c <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    6e4c:	4620      	mov	r0, r4
    6e4e:	f7ff ff43 	bl	6cd8 <lfclk_spinwait>
}
    6e52:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    6e54:	4815      	ldr	r0, [pc, #84]	; (6eac <z_nrf_clock_control_lf_on+0x88>)
    6e56:	f007 fd57 	bl	e908 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    6e5a:	4915      	ldr	r1, [pc, #84]	; (6eb0 <z_nrf_clock_control_lf_on+0x8c>)
    6e5c:	2300      	movs	r3, #0
    6e5e:	604b      	str	r3, [r1, #4]
    6e60:	608b      	str	r3, [r1, #8]
    6e62:	60cb      	str	r3, [r1, #12]
    6e64:	2301      	movs	r3, #1
    6e66:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    6e68:	f7fc ff84 	bl	3d74 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    6e6c:	2800      	cmp	r0, #0
    6e6e:	dae8      	bge.n	6e42 <z_nrf_clock_control_lf_on+0x1e>
    6e70:	4d10      	ldr	r5, [pc, #64]	; (6eb4 <z_nrf_clock_control_lf_on+0x90>)
    6e72:	f44f 7308 	mov.w	r3, #544	; 0x220
    6e76:	462a      	mov	r2, r5
    6e78:	490f      	ldr	r1, [pc, #60]	; (6eb8 <z_nrf_clock_control_lf_on+0x94>)
    6e7a:	4810      	ldr	r0, [pc, #64]	; (6ebc <z_nrf_clock_control_lf_on+0x98>)
    6e7c:	f007 fb97 	bl	e5ae <assert_print>
    6e80:	f44f 7108 	mov.w	r1, #544	; 0x220
    6e84:	4628      	mov	r0, r5
    6e86:	f007 fb8b 	bl	e5a0 <assert_post_action>
    6e8a:	e7da      	b.n	6e42 <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    6e8c:	4c09      	ldr	r4, [pc, #36]	; (6eb4 <z_nrf_clock_control_lf_on+0x90>)
    6e8e:	f240 2332 	movw	r3, #562	; 0x232
    6e92:	4622      	mov	r2, r4
    6e94:	490a      	ldr	r1, [pc, #40]	; (6ec0 <z_nrf_clock_control_lf_on+0x9c>)
    6e96:	4809      	ldr	r0, [pc, #36]	; (6ebc <z_nrf_clock_control_lf_on+0x98>)
    6e98:	f007 fb89 	bl	e5ae <assert_print>
    6e9c:	f240 2132 	movw	r1, #562	; 0x232
    6ea0:	4620      	mov	r0, r4
    6ea2:	f007 fb7d 	bl	e5a0 <assert_post_action>
    6ea6:	e7d4      	b.n	6e52 <z_nrf_clock_control_lf_on+0x2e>
    6ea8:	20004e38 	.word	0x20004e38
    6eac:	0000fa98 	.word	0x0000fa98
    6eb0:	20004dcc 	.word	0x20004dcc
    6eb4:	00011250 	.word	0x00011250
    6eb8:	00010708 	.word	0x00010708
    6ebc:	000100e4 	.word	0x000100e4
    6ec0:	000107a0 	.word	0x000107a0

00006ec4 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    6ec4:	b510      	push	{r4, lr}
    6ec6:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    6ec8:	280a      	cmp	r0, #10
    6eca:	d007      	beq.n	6edc <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    6ecc:	4b07      	ldr	r3, [pc, #28]	; (6eec <console_out+0x28>)
    6ece:	6818      	ldr	r0, [r3, #0]
    6ed0:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    6ed2:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    6ed4:	685b      	ldr	r3, [r3, #4]
    6ed6:	4798      	blx	r3

	return c;
}
    6ed8:	4620      	mov	r0, r4
    6eda:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    6edc:	4b03      	ldr	r3, [pc, #12]	; (6eec <console_out+0x28>)
    6ede:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    6ee0:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    6ee2:	685b      	ldr	r3, [r3, #4]
    6ee4:	210d      	movs	r1, #13
    6ee6:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    6ee8:	e7f0      	b.n	6ecc <console_out+0x8>
    6eea:	bf00      	nop
    6eec:	20004e3c 	.word	0x20004e3c

00006ef0 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    6ef0:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    6ef2:	4c04      	ldr	r4, [pc, #16]	; (6f04 <uart_console_hook_install+0x14>)
    6ef4:	4620      	mov	r0, r4
    6ef6:	f7ff fcbb 	bl	6870 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    6efa:	4620      	mov	r0, r4
    6efc:	f7fc fca0 	bl	3840 <__printk_hook_install>
#endif
}
    6f00:	bd10      	pop	{r4, pc}
    6f02:	bf00      	nop
    6f04:	00006ec5 	.word	0x00006ec5

00006f08 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    6f08:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    6f0a:	4806      	ldr	r0, [pc, #24]	; (6f24 <uart_console_init+0x1c>)
    6f0c:	4b06      	ldr	r3, [pc, #24]	; (6f28 <uart_console_init+0x20>)
    6f0e:	6018      	str	r0, [r3, #0]
    6f10:	f008 f94b 	bl	f1aa <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    6f14:	b118      	cbz	r0, 6f1e <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    6f16:	f7ff ffeb 	bl	6ef0 <uart_console_hook_install>

	return 0;
    6f1a:	2000      	movs	r0, #0
}
    6f1c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    6f1e:	f06f 0012 	mvn.w	r0, #18
    6f22:	e7fb      	b.n	6f1c <uart_console_init+0x14>
    6f24:	0000faf8 	.word	0x0000faf8
    6f28:	20004e3c 	.word	0x20004e3c

00006f2c <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6f2c:	b128      	cbz	r0, 6f3a <get_dev+0xe>
    6f2e:	2801      	cmp	r0, #1
    6f30:	d101      	bne.n	6f36 <get_dev+0xa>
    6f32:	4803      	ldr	r0, [pc, #12]	; (6f40 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    6f34:	4770      	bx	lr
	const struct device *dev = NULL;
    6f36:	2000      	movs	r0, #0
    6f38:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6f3a:	4802      	ldr	r0, [pc, #8]	; (6f44 <get_dev+0x18>)
    6f3c:	4770      	bx	lr
    6f3e:	bf00      	nop
    6f40:	0000fab0 	.word	0x0000fab0
    6f44:	0000fac8 	.word	0x0000fac8

00006f48 <gpio_nrfx_manage_callback>:
{
    6f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f4c:	4616      	mov	r6, r2
	return port->data;
    6f4e:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6f50:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    6f52:	460c      	mov	r4, r1
    6f54:	b131      	cbz	r1, 6f64 <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
    6f56:	6863      	ldr	r3, [r4, #4]
    6f58:	b1a3      	cbz	r3, 6f84 <gpio_nrfx_manage_callback+0x3c>
	return list->head;
    6f5a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    6f5c:	2b00      	cmp	r3, #0
    6f5e:	d03b      	beq.n	6fd8 <gpio_nrfx_manage_callback+0x90>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6f60:	2100      	movs	r1, #0
    6f62:	e02a      	b.n	6fba <gpio_nrfx_manage_callback+0x72>
	__ASSERT(callback, "No callback!");
    6f64:	f8df 8094 	ldr.w	r8, [pc, #148]	; 6ffc <gpio_nrfx_manage_callback+0xb4>
    6f68:	2324      	movs	r3, #36	; 0x24
    6f6a:	4642      	mov	r2, r8
    6f6c:	4924      	ldr	r1, [pc, #144]	; (7000 <gpio_nrfx_manage_callback+0xb8>)
    6f6e:	4825      	ldr	r0, [pc, #148]	; (7004 <gpio_nrfx_manage_callback+0xbc>)
    6f70:	f007 fb1d 	bl	e5ae <assert_print>
    6f74:	4824      	ldr	r0, [pc, #144]	; (7008 <gpio_nrfx_manage_callback+0xc0>)
    6f76:	f007 fb1a 	bl	e5ae <assert_print>
    6f7a:	2124      	movs	r1, #36	; 0x24
    6f7c:	4640      	mov	r0, r8
    6f7e:	f007 fb0f 	bl	e5a0 <assert_post_action>
    6f82:	e7e8      	b.n	6f56 <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    6f84:	f8df 8074 	ldr.w	r8, [pc, #116]	; 6ffc <gpio_nrfx_manage_callback+0xb4>
    6f88:	2325      	movs	r3, #37	; 0x25
    6f8a:	4642      	mov	r2, r8
    6f8c:	491f      	ldr	r1, [pc, #124]	; (700c <gpio_nrfx_manage_callback+0xc4>)
    6f8e:	481d      	ldr	r0, [pc, #116]	; (7004 <gpio_nrfx_manage_callback+0xbc>)
    6f90:	f007 fb0d 	bl	e5ae <assert_print>
    6f94:	481e      	ldr	r0, [pc, #120]	; (7010 <gpio_nrfx_manage_callback+0xc8>)
    6f96:	f007 fb0a 	bl	e5ae <assert_print>
    6f9a:	2125      	movs	r1, #37	; 0x25
    6f9c:	4640      	mov	r0, r8
    6f9e:	f007 faff 	bl	e5a0 <assert_post_action>
    6fa2:	e7da      	b.n	6f5a <gpio_nrfx_manage_callback+0x12>
	return node->next;
    6fa4:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    6fa6:	606b      	str	r3, [r5, #4]
	return list->tail;
    6fa8:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    6faa:	4294      	cmp	r4, r2
    6fac:	d10f      	bne.n	6fce <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    6fae:	607b      	str	r3, [r7, #4]
}
    6fb0:	e00d      	b.n	6fce <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    6fb2:	6079      	str	r1, [r7, #4]
}
    6fb4:	e00b      	b.n	6fce <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6fb6:	4619      	mov	r1, r3
    6fb8:	681b      	ldr	r3, [r3, #0]
    6fba:	b15b      	cbz	r3, 6fd4 <gpio_nrfx_manage_callback+0x8c>
    6fbc:	429c      	cmp	r4, r3
    6fbe:	d1fa      	bne.n	6fb6 <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_REMOVE(slist, snode)
    6fc0:	2900      	cmp	r1, #0
    6fc2:	d0ef      	beq.n	6fa4 <gpio_nrfx_manage_callback+0x5c>
	return node->next;
    6fc4:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    6fc6:	600b      	str	r3, [r1, #0]
	return list->tail;
    6fc8:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    6fca:	429c      	cmp	r4, r3
    6fcc:	d0f1      	beq.n	6fb2 <gpio_nrfx_manage_callback+0x6a>
	parent->next = child;
    6fce:	2300      	movs	r3, #0
    6fd0:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6fd2:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    6fd4:	b903      	cbnz	r3, 6fd8 <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    6fd6:	b156      	cbz	r6, 6fee <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    6fd8:	b166      	cbz	r6, 6ff4 <gpio_nrfx_manage_callback+0xac>
	return list->head;
    6fda:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    6fdc:	6023      	str	r3, [r4, #0]
	list->head = node;
    6fde:	606c      	str	r4, [r5, #4]
	return list->tail;
    6fe0:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    6fe2:	b10b      	cbz	r3, 6fe8 <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    6fe4:	2000      	movs	r0, #0
    6fe6:	e006      	b.n	6ff6 <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    6fe8:	607c      	str	r4, [r7, #4]
    6fea:	2000      	movs	r0, #0
}
    6fec:	e003      	b.n	6ff6 <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    6fee:	f06f 0015 	mvn.w	r0, #21
    6ff2:	e000      	b.n	6ff6 <gpio_nrfx_manage_callback+0xae>
	return 0;
    6ff4:	2000      	movs	r0, #0
}
    6ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ffa:	bf00      	nop
    6ffc:	00011318 	.word	0x00011318
    7000:	00011348 	.word	0x00011348
    7004:	000100e4 	.word	0x000100e4
    7008:	00011354 	.word	0x00011354
    700c:	00011364 	.word	0x00011364
    7010:	00011378 	.word	0x00011378

00007014 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    7014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    7018:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    701c:	0940      	lsrs	r0, r0, #5
    701e:	f7ff ff85 	bl	6f2c <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    7022:	b380      	cbz	r0, 7086 <nrfx_gpio_handler+0x72>
    7024:	4607      	mov	r7, r0
	return port->data;
    7026:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    7028:	2601      	movs	r6, #1
    702a:	40a6      	lsls	r6, r4
	return list->head;
    702c:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    702e:	b11c      	cbz	r4, 7038 <nrfx_gpio_handler+0x24>
    7030:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    7032:	b17c      	cbz	r4, 7054 <nrfx_gpio_handler+0x40>
	return node->next;
    7034:	6825      	ldr	r5, [r4, #0]
    7036:	e00d      	b.n	7054 <nrfx_gpio_handler+0x40>
    7038:	4625      	mov	r5, r4
    703a:	e00b      	b.n	7054 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    703c:	6863      	ldr	r3, [r4, #4]
    703e:	68a2      	ldr	r2, [r4, #8]
    7040:	4032      	ands	r2, r6
    7042:	4621      	mov	r1, r4
    7044:	4638      	mov	r0, r7
    7046:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7048:	b1dd      	cbz	r5, 7082 <nrfx_gpio_handler+0x6e>
    704a:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    704c:	b105      	cbz	r5, 7050 <nrfx_gpio_handler+0x3c>
	return node->next;
    704e:	682b      	ldr	r3, [r5, #0]
    7050:	462c      	mov	r4, r5
    7052:	461d      	mov	r5, r3
    7054:	b1bc      	cbz	r4, 7086 <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    7056:	68a3      	ldr	r3, [r4, #8]
    7058:	421e      	tst	r6, r3
    705a:	d0f5      	beq.n	7048 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    705c:	6863      	ldr	r3, [r4, #4]
    705e:	2b00      	cmp	r3, #0
    7060:	d1ec      	bne.n	703c <nrfx_gpio_handler+0x28>
    7062:	f8df 8028 	ldr.w	r8, [pc, #40]	; 708c <nrfx_gpio_handler+0x78>
    7066:	2345      	movs	r3, #69	; 0x45
    7068:	4642      	mov	r2, r8
    706a:	4909      	ldr	r1, [pc, #36]	; (7090 <nrfx_gpio_handler+0x7c>)
    706c:	4809      	ldr	r0, [pc, #36]	; (7094 <nrfx_gpio_handler+0x80>)
    706e:	f007 fa9e 	bl	e5ae <assert_print>
    7072:	4809      	ldr	r0, [pc, #36]	; (7098 <nrfx_gpio_handler+0x84>)
    7074:	f007 fa9b 	bl	e5ae <assert_print>
    7078:	2145      	movs	r1, #69	; 0x45
    707a:	4640      	mov	r0, r8
    707c:	f007 fa90 	bl	e5a0 <assert_post_action>
    7080:	e7dc      	b.n	703c <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7082:	462b      	mov	r3, r5
    7084:	e7e4      	b.n	7050 <nrfx_gpio_handler+0x3c>
}
    7086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    708a:	bf00      	nop
    708c:	00011318 	.word	0x00011318
    7090:	00011390 	.word	0x00011390
    7094:	000100e4 	.word	0x000100e4
    7098:	00011378 	.word	0x00011378

0000709c <gpio_nrfx_pin_interrupt_configure>:
{
    709c:	b5f0      	push	{r4, r5, r6, r7, lr}
    709e:	b085      	sub	sp, #20
    70a0:	460e      	mov	r6, r1
    70a2:	4619      	mov	r1, r3
	return port->config;
    70a4:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    70a6:	7b1b      	ldrb	r3, [r3, #12]
    70a8:	f006 041f 	and.w	r4, r6, #31
    70ac:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    70b0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    70b4:	d022      	beq.n	70fc <gpio_nrfx_pin_interrupt_configure+0x60>
    70b6:	4607      	mov	r7, r0
    70b8:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    70ba:	2300      	movs	r3, #0
    70bc:	9302      	str	r3, [sp, #8]
    70be:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    70c0:	4610      	mov	r0, r2
    70c2:	f007 fd44 	bl	eb4e <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    70c6:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    70ca:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    70cc:	6899      	ldr	r1, [r3, #8]
    70ce:	40f1      	lsrs	r1, r6
    70d0:	f011 0101 	ands.w	r1, r1, #1
    70d4:	d102      	bne.n	70dc <gpio_nrfx_pin_interrupt_configure+0x40>
    70d6:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    70da:	d014      	beq.n	7106 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    70dc:	2300      	movs	r3, #0
    70de:	aa02      	add	r2, sp, #8
    70e0:	4619      	mov	r1, r3
    70e2:	4620      	mov	r0, r4
    70e4:	f002 f802 	bl	90ec <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    70e8:	4b32      	ldr	r3, [pc, #200]	; (71b4 <gpio_nrfx_pin_interrupt_configure+0x118>)
    70ea:	4298      	cmp	r0, r3
    70ec:	d15f      	bne.n	71ae <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    70ee:	2101      	movs	r1, #1
    70f0:	4620      	mov	r0, r4
    70f2:	f002 fa5f 	bl	95b4 <nrfx_gpiote_trigger_enable>
	return 0;
    70f6:	2000      	movs	r0, #0
}
    70f8:	b005      	add	sp, #20
    70fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    70fc:	4620      	mov	r0, r4
    70fe:	f002 fb65 	bl	97cc <nrfx_gpiote_trigger_disable>
		return 0;
    7102:	2000      	movs	r0, #0
    7104:	e7f8      	b.n	70f8 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    7106:	0963      	lsrs	r3, r4, #5
    7108:	d01f      	beq.n	714a <gpio_nrfx_pin_interrupt_configure+0xae>
    710a:	2b01      	cmp	r3, #1
    710c:	d101      	bne.n	7112 <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    710e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    7112:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7116:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7118:	f011 0f01 	tst.w	r1, #1
    711c:	d018      	beq.n	7150 <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    711e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7122:	0963      	lsrs	r3, r4, #5
    7124:	d022      	beq.n	716c <gpio_nrfx_pin_interrupt_configure+0xd0>
    7126:	2b01      	cmp	r3, #1
    7128:	d023      	beq.n	7172 <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    712a:	4e23      	ldr	r6, [pc, #140]	; (71b8 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    712c:	f240 232e 	movw	r3, #558	; 0x22e
    7130:	4632      	mov	r2, r6
    7132:	4922      	ldr	r1, [pc, #136]	; (71bc <gpio_nrfx_pin_interrupt_configure+0x120>)
    7134:	4822      	ldr	r0, [pc, #136]	; (71c0 <gpio_nrfx_pin_interrupt_configure+0x124>)
    7136:	f007 fa3a 	bl	e5ae <assert_print>
    713a:	f240 212e 	movw	r1, #558	; 0x22e
    713e:	4630      	mov	r0, r6
    7140:	f007 fa2e 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    7144:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7148:	e014      	b.n	7174 <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    714a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    714e:	e7e0      	b.n	7112 <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7150:	4d19      	ldr	r5, [pc, #100]	; (71b8 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    7152:	f240 2329 	movw	r3, #553	; 0x229
    7156:	462a      	mov	r2, r5
    7158:	491a      	ldr	r1, [pc, #104]	; (71c4 <gpio_nrfx_pin_interrupt_configure+0x128>)
    715a:	4819      	ldr	r0, [pc, #100]	; (71c0 <gpio_nrfx_pin_interrupt_configure+0x124>)
    715c:	f007 fa27 	bl	e5ae <assert_print>
    7160:	f240 2129 	movw	r1, #553	; 0x229
    7164:	4628      	mov	r0, r5
    7166:	f007 fa1b 	bl	e5a0 <assert_post_action>
    716a:	e7d8      	b.n	711e <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    716c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7170:	e000      	b.n	7174 <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7172:	4b15      	ldr	r3, [pc, #84]	; (71c8 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    7174:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    7178:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    717c:	f013 0f01 	tst.w	r3, #1
    7180:	d1ac      	bne.n	70dc <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    7182:	f10d 0107 	add.w	r1, sp, #7
    7186:	4620      	mov	r0, r4
    7188:	f002 f9a4 	bl	94d4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    718c:	4b0f      	ldr	r3, [pc, #60]	; (71cc <gpio_nrfx_pin_interrupt_configure+0x130>)
    718e:	4298      	cmp	r0, r3
    7190:	d003      	beq.n	719a <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    7192:	f10d 0307 	add.w	r3, sp, #7
    7196:	9303      	str	r3, [sp, #12]
    7198:	e7a0      	b.n	70dc <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    719a:	f10d 0007 	add.w	r0, sp, #7
    719e:	f002 fa01 	bl	95a4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    71a2:	4b04      	ldr	r3, [pc, #16]	; (71b4 <gpio_nrfx_pin_interrupt_configure+0x118>)
    71a4:	4298      	cmp	r0, r3
    71a6:	d0f4      	beq.n	7192 <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    71a8:	f06f 000b 	mvn.w	r0, #11
    71ac:	e7a4      	b.n	70f8 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    71ae:	f06f 0004 	mvn.w	r0, #4
    71b2:	e7a1      	b.n	70f8 <gpio_nrfx_pin_interrupt_configure+0x5c>
    71b4:	0bad0000 	.word	0x0bad0000
    71b8:	0001139c 	.word	0x0001139c
    71bc:	000107a0 	.word	0x000107a0
    71c0:	000100e4 	.word	0x000100e4
    71c4:	000113d0 	.word	0x000113d0
    71c8:	50000300 	.word	0x50000300
    71cc:	0bad0004 	.word	0x0bad0004

000071d0 <pin_uninit>:
{
    71d0:	b530      	push	{r4, r5, lr}
    71d2:	b083      	sub	sp, #12
    71d4:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    71d6:	f10d 0107 	add.w	r1, sp, #7
    71da:	f002 f97b 	bl	94d4 <nrfx_gpiote_channel_get>
    71de:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    71e0:	4620      	mov	r0, r4
    71e2:	f002 fb5b 	bl	989c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    71e6:	4b0b      	ldr	r3, [pc, #44]	; (7214 <pin_uninit+0x44>)
    71e8:	4298      	cmp	r0, r3
    71ea:	d10f      	bne.n	720c <pin_uninit+0x3c>
	if (free_ch) {
    71ec:	429d      	cmp	r5, r3
    71ee:	d005      	beq.n	71fc <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    71f0:	4b08      	ldr	r3, [pc, #32]	; (7214 <pin_uninit+0x44>)
    71f2:	4298      	cmp	r0, r3
    71f4:	d107      	bne.n	7206 <pin_uninit+0x36>
    71f6:	2000      	movs	r0, #0
}
    71f8:	b003      	add	sp, #12
    71fa:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    71fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7200:	f002 f9c8 	bl	9594 <nrfx_gpiote_channel_free>
    7204:	e7f4      	b.n	71f0 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    7206:	f06f 0004 	mvn.w	r0, #4
    720a:	e7f5      	b.n	71f8 <pin_uninit+0x28>
		return -EIO;
    720c:	f06f 0004 	mvn.w	r0, #4
    7210:	e7f2      	b.n	71f8 <pin_uninit+0x28>
    7212:	bf00      	nop
    7214:	0bad0000 	.word	0x0bad0000

00007218 <gpio_nrfx_pin_configure>:
{
    7218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    721c:	b087      	sub	sp, #28
	return port->config;
    721e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7222:	f898 300c 	ldrb.w	r3, [r8, #12]
    7226:	f001 051f 	and.w	r5, r1, #31
    722a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    722e:	2a00      	cmp	r2, #0
    7230:	d044      	beq.n	72bc <gpio_nrfx_pin_configure+0xa4>
    7232:	460c      	mov	r4, r1
    7234:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    7236:	2600      	movs	r6, #0
    7238:	9603      	str	r6, [sp, #12]
    723a:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    723c:	f10d 0117 	add.w	r1, sp, #23
    7240:	4620      	mov	r0, r4
    7242:	f002 f947 	bl	94d4 <nrfx_gpiote_channel_get>
    7246:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    7248:	4633      	mov	r3, r6
    724a:	aa03      	add	r2, sp, #12
    724c:	4631      	mov	r1, r6
    724e:	4628      	mov	r0, r5
    7250:	f001 ff4c 	bl	90ec <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    7254:	4b30      	ldr	r3, [pc, #192]	; (7318 <gpio_nrfx_pin_configure+0x100>)
    7256:	4298      	cmp	r0, r3
    7258:	d15b      	bne.n	7312 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    725a:	4599      	cmp	r9, r3
    725c:	d036      	beq.n	72cc <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    725e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    7262:	d043      	beq.n	72ec <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    7264:	f10d 0103 	add.w	r1, sp, #3
    7268:	4638      	mov	r0, r7
    726a:	f007 fbf7 	bl	ea5c <get_drive>
		if (rv != 0) {
    726e:	4606      	mov	r6, r0
    7270:	bb40      	cbnz	r0, 72c4 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    7272:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7276:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    727a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    727e:	bf0c      	ite	eq
    7280:	2301      	moveq	r3, #1
    7282:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    7284:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    7288:	4638      	mov	r0, r7
    728a:	f007 fc2d 	bl	eae8 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    728e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    7292:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    7296:	d01e      	beq.n	72d6 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    7298:	f8d8 3004 	ldr.w	r3, [r8, #4]
    729c:	2101      	movs	r1, #1
    729e:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    72a2:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    72a6:	2200      	movs	r2, #0
    72a8:	a901      	add	r1, sp, #4
    72aa:	4628      	mov	r0, r5
    72ac:	f002 f812 	bl	92d4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    72b0:	4b19      	ldr	r3, [pc, #100]	; (7318 <gpio_nrfx_pin_configure+0x100>)
    72b2:	4298      	cmp	r0, r3
    72b4:	d006      	beq.n	72c4 <gpio_nrfx_pin_configure+0xac>
    72b6:	f06f 0615 	mvn.w	r6, #21
    72ba:	e003      	b.n	72c4 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    72bc:	4628      	mov	r0, r5
    72be:	f7ff ff87 	bl	71d0 <pin_uninit>
    72c2:	4606      	mov	r6, r0
}
    72c4:	4630      	mov	r0, r6
    72c6:	b007      	add	sp, #28
    72c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    72cc:	f89d 0017 	ldrb.w	r0, [sp, #23]
    72d0:	f002 f960 	bl	9594 <nrfx_gpiote_channel_free>
    72d4:	e7c3      	b.n	725e <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    72d6:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    72da:	d0e4      	beq.n	72a6 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    72dc:	f8d8 2004 	ldr.w	r2, [r8, #4]
    72e0:	2301      	movs	r3, #1
    72e2:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    72e6:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    72ea:	e7dc      	b.n	72a6 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    72ec:	4638      	mov	r0, r7
    72ee:	f007 fbfb 	bl	eae8 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    72f2:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    72f6:	2300      	movs	r3, #0
    72f8:	461a      	mov	r2, r3
    72fa:	a902      	add	r1, sp, #8
    72fc:	4628      	mov	r0, r5
    72fe:	f001 fef5 	bl	90ec <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    7302:	4b05      	ldr	r3, [pc, #20]	; (7318 <gpio_nrfx_pin_configure+0x100>)
    7304:	4298      	cmp	r0, r3
    7306:	d101      	bne.n	730c <gpio_nrfx_pin_configure+0xf4>
    7308:	2600      	movs	r6, #0
    730a:	e7db      	b.n	72c4 <gpio_nrfx_pin_configure+0xac>
    730c:	f06f 0615 	mvn.w	r6, #21
    7310:	e7d8      	b.n	72c4 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    7312:	f06f 0615 	mvn.w	r6, #21
    7316:	e7d5      	b.n	72c4 <gpio_nrfx_pin_configure+0xac>
    7318:	0bad0000 	.word	0x0bad0000

0000731c <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    731c:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    731e:	f002 f92f 	bl	9580 <nrfx_gpiote_is_init>
    7322:	b108      	cbz	r0, 7328 <gpio_nrfx_init+0xc>
		return 0;
    7324:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    7326:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    7328:	f002 f900 	bl	952c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    732c:	4b08      	ldr	r3, [pc, #32]	; (7350 <gpio_nrfx_init+0x34>)
    732e:	4298      	cmp	r0, r3
    7330:	d10a      	bne.n	7348 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    7332:	2100      	movs	r1, #0
    7334:	4807      	ldr	r0, [pc, #28]	; (7354 <gpio_nrfx_init+0x38>)
    7336:	f002 f8c7 	bl	94c8 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    733a:	2200      	movs	r2, #0
    733c:	2105      	movs	r1, #5
    733e:	2006      	movs	r0, #6
    7340:	f7fe fbb0 	bl	5aa4 <z_arm_irq_priority_set>
	return 0;
    7344:	2000      	movs	r0, #0
    7346:	e7ee      	b.n	7326 <gpio_nrfx_init+0xa>
		return -EIO;
    7348:	f06f 0004 	mvn.w	r0, #4
    734c:	e7eb      	b.n	7326 <gpio_nrfx_init+0xa>
    734e:	bf00      	nop
    7350:	0bad0000 	.word	0x0bad0000
    7354:	00007015 	.word	0x00007015

00007358 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    7358:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    735a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    735c:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    7360:	d06f      	beq.n	7442 <baudrate_set+0xea>
    7362:	d83a      	bhi.n	73da <baudrate_set+0x82>
    7364:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    7368:	d06e      	beq.n	7448 <baudrate_set+0xf0>
    736a:	d90a      	bls.n	7382 <baudrate_set+0x2a>
    736c:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    7370:	d075      	beq.n	745e <baudrate_set+0x106>
    7372:	d924      	bls.n	73be <baudrate_set+0x66>
    7374:	f647 2312 	movw	r3, #31250	; 0x7a12
    7378:	4299      	cmp	r1, r3
    737a:	d12b      	bne.n	73d4 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    737c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    7380:	e013      	b.n	73aa <baudrate_set+0x52>
	switch (baudrate) {
    7382:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    7386:	d061      	beq.n	744c <baudrate_set+0xf4>
    7388:	d907      	bls.n	739a <baudrate_set+0x42>
    738a:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    738e:	d063      	beq.n	7458 <baudrate_set+0x100>
    7390:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    7394:	d110      	bne.n	73b8 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    7396:	4b3c      	ldr	r3, [pc, #240]	; (7488 <baudrate_set+0x130>)
    7398:	e007      	b.n	73aa <baudrate_set+0x52>
	switch (baudrate) {
    739a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    739e:	d058      	beq.n	7452 <baudrate_set+0xfa>
    73a0:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    73a4:	d105      	bne.n	73b2 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    73a6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    73aa:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    73ae:	2000      	movs	r0, #0
    73b0:	4770      	bx	lr
	switch (baudrate) {
    73b2:	f06f 0015 	mvn.w	r0, #21
    73b6:	4770      	bx	lr
    73b8:	f06f 0015 	mvn.w	r0, #21
    73bc:	4770      	bx	lr
    73be:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    73c2:	d04e      	beq.n	7462 <baudrate_set+0x10a>
    73c4:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    73c8:	d101      	bne.n	73ce <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    73ca:	4b30      	ldr	r3, [pc, #192]	; (748c <baudrate_set+0x134>)
    73cc:	e7ed      	b.n	73aa <baudrate_set+0x52>
	switch (baudrate) {
    73ce:	f06f 0015 	mvn.w	r0, #21
    73d2:	4770      	bx	lr
    73d4:	f06f 0015 	mvn.w	r0, #21
    73d8:	4770      	bx	lr
    73da:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    73de:	d042      	beq.n	7466 <baudrate_set+0x10e>
    73e0:	d909      	bls.n	73f6 <baudrate_set+0x9e>
    73e2:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    73e6:	d046      	beq.n	7476 <baudrate_set+0x11e>
    73e8:	d91f      	bls.n	742a <baudrate_set+0xd2>
    73ea:	4b29      	ldr	r3, [pc, #164]	; (7490 <baudrate_set+0x138>)
    73ec:	4299      	cmp	r1, r3
    73ee:	d148      	bne.n	7482 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    73f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    73f4:	e7d9      	b.n	73aa <baudrate_set+0x52>
	switch (baudrate) {
    73f6:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    73fa:	d037      	beq.n	746c <baudrate_set+0x114>
    73fc:	d905      	bls.n	740a <baudrate_set+0xb2>
    73fe:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    7402:	d10f      	bne.n	7424 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    7404:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    7408:	e7cf      	b.n	73aa <baudrate_set+0x52>
	switch (baudrate) {
    740a:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    740e:	4299      	cmp	r1, r3
    7410:	d02e      	beq.n	7470 <baudrate_set+0x118>
    7412:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    7416:	d102      	bne.n	741e <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    7418:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    741c:	e7c5      	b.n	73aa <baudrate_set+0x52>
	switch (baudrate) {
    741e:	f06f 0015 	mvn.w	r0, #21
    7422:	4770      	bx	lr
    7424:	f06f 0015 	mvn.w	r0, #21
    7428:	4770      	bx	lr
    742a:	4b1a      	ldr	r3, [pc, #104]	; (7494 <baudrate_set+0x13c>)
    742c:	4299      	cmp	r1, r3
    742e:	d025      	beq.n	747c <baudrate_set+0x124>
    7430:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    7434:	d102      	bne.n	743c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    7436:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    743a:	e7b6      	b.n	73aa <baudrate_set+0x52>
	switch (baudrate) {
    743c:	f06f 0015 	mvn.w	r0, #21
    7440:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    7442:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    7446:	e7b0      	b.n	73aa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    7448:	4b13      	ldr	r3, [pc, #76]	; (7498 <baudrate_set+0x140>)
    744a:	e7ae      	b.n	73aa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    744c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    7450:	e7ab      	b.n	73aa <baudrate_set+0x52>
	switch (baudrate) {
    7452:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    7456:	e7a8      	b.n	73aa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    7458:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    745c:	e7a5      	b.n	73aa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    745e:	4b0f      	ldr	r3, [pc, #60]	; (749c <baudrate_set+0x144>)
    7460:	e7a3      	b.n	73aa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    7462:	4b0f      	ldr	r3, [pc, #60]	; (74a0 <baudrate_set+0x148>)
    7464:	e7a1      	b.n	73aa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    7466:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    746a:	e79e      	b.n	73aa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    746c:	4b0d      	ldr	r3, [pc, #52]	; (74a4 <baudrate_set+0x14c>)
    746e:	e79c      	b.n	73aa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    7470:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    7474:	e799      	b.n	73aa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    7476:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    747a:	e796      	b.n	73aa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    747c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    7480:	e793      	b.n	73aa <baudrate_set+0x52>
	switch (baudrate) {
    7482:	f06f 0015 	mvn.w	r0, #21
}
    7486:	4770      	bx	lr
    7488:	0013b000 	.word	0x0013b000
    748c:	004ea000 	.word	0x004ea000
    7490:	000f4240 	.word	0x000f4240
    7494:	0003d090 	.word	0x0003d090
    7498:	00275000 	.word	0x00275000
    749c:	0075c000 	.word	0x0075c000
    74a0:	003af000 	.word	0x003af000
    74a4:	013a9000 	.word	0x013a9000

000074a8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    74a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74ac:	4605      	mov	r5, r0
    74ae:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    74b0:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    74b4:	f007 fed5 	bl	f262 <k_is_in_isr>
    74b8:	b920      	cbnz	r0, 74c4 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    74ba:	4b16      	ldr	r3, [pc, #88]	; (7514 <uarte_nrfx_poll_out+0x6c>)
    74bc:	781b      	ldrb	r3, [r3, #0]
    74be:	b143      	cbz	r3, 74d2 <uarte_nrfx_poll_out+0x2a>
    74c0:	2300      	movs	r3, #0
    74c2:	e000      	b.n	74c6 <uarte_nrfx_poll_out+0x1e>
    74c4:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    74c6:	b953      	cbnz	r3, 74de <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    74c8:	4628      	mov	r0, r5
    74ca:	f007 fc49 	bl	ed60 <wait_tx_ready>
    74ce:	4606      	mov	r6, r0
    74d0:	e013      	b.n	74fa <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    74d2:	2301      	movs	r3, #1
    74d4:	e7f7      	b.n	74c6 <uarte_nrfx_poll_out+0x1e>
    74d6:	f384 8811 	msr	BASEPRI, r4
    74da:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    74de:	f04f 0320 	mov.w	r3, #32
    74e2:	f3ef 8411 	mrs	r4, BASEPRI
    74e6:	f383 8812 	msr	BASEPRI_MAX, r3
    74ea:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    74ee:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    74f0:	4628      	mov	r0, r5
    74f2:	f007 fbe7 	bl	ecc4 <is_tx_ready>
    74f6:	2800      	cmp	r0, #0
    74f8:	d0ed      	beq.n	74d6 <uarte_nrfx_poll_out+0x2e>
	}

	data->char_out = c;
    74fa:	4641      	mov	r1, r8
    74fc:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    7500:	2201      	movs	r2, #1
    7502:	4628      	mov	r0, r5
    7504:	f007 fbf8 	bl	ecf8 <tx_start>
	__asm__ volatile(
    7508:	f386 8811 	msr	BASEPRI, r6
    750c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    7510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7514:	20005560 	.word	0x20005560

00007518 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    7518:	b530      	push	{r4, r5, lr}
    751a:	b085      	sub	sp, #20
    751c:	4604      	mov	r4, r0
    751e:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    7520:	f101 0012 	add.w	r0, r1, #18
    7524:	f002 fa46 	bl	99b4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    7528:	4b11      	ldr	r3, [pc, #68]	; (7570 <endtx_stoptx_ppi_init+0x58>)
    752a:	4298      	cmp	r0, r3
    752c:	d112      	bne.n	7554 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    752e:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    7530:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    7534:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    7536:	4a0f      	ldr	r2, [pc, #60]	; (7574 <endtx_stoptx_ppi_init+0x5c>)
    7538:	33a2      	adds	r3, #162	; 0xa2
    753a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    753e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7542:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    7544:	7ca9      	ldrb	r1, [r5, #18]
    7546:	2301      	movs	r3, #1
    7548:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    754a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    754e:	2000      	movs	r0, #0
}
    7550:	b005      	add	sp, #20
    7552:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    7554:	4b08      	ldr	r3, [pc, #32]	; (7578 <endtx_stoptx_ppi_init+0x60>)
    7556:	9302      	str	r3, [sp, #8]
    7558:	2000      	movs	r0, #0
    755a:	9001      	str	r0, [sp, #4]
    755c:	9000      	str	r0, [sp, #0]
    755e:	4603      	mov	r3, r0
    7560:	2201      	movs	r2, #1
    7562:	4906      	ldr	r1, [pc, #24]	; (757c <endtx_stoptx_ppi_init+0x64>)
    7564:	f007 fc23 	bl	edae <z_log_msg2_runtime_create>
		return -EIO;
    7568:	f06f 0004 	mvn.w	r0, #4
    756c:	e7f0      	b.n	7550 <endtx_stoptx_ppi_init+0x38>
    756e:	bf00      	nop
    7570:	0bad0000 	.word	0x0bad0000
    7574:	4001f000 	.word	0x4001f000
    7578:	00011448 	.word	0x00011448
    757c:	0000fcd0 	.word	0x0000fcd0

00007580 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    7580:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    7584:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    7588:	4b01      	ldr	r3, [pc, #4]	; (7590 <set_comparator+0x10>)
    758a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    758e:	4770      	bx	lr
    7590:	40011000 	.word	0x40011000

00007594 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    7594:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    7598:	4b01      	ldr	r3, [pc, #4]	; (75a0 <get_comparator+0xc>)
    759a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    759e:	4770      	bx	lr
    75a0:	40011000 	.word	0x40011000

000075a4 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    75a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    75a8:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    75aa:	4a02      	ldr	r2, [pc, #8]	; (75b4 <event_enable+0x10>)
    75ac:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    75b0:	4770      	bx	lr
    75b2:	bf00      	nop
    75b4:	40011000 	.word	0x40011000

000075b8 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    75b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    75bc:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    75be:	4a02      	ldr	r2, [pc, #8]	; (75c8 <event_disable+0x10>)
    75c0:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    75c4:	4770      	bx	lr
    75c6:	bf00      	nop
    75c8:	40011000 	.word	0x40011000

000075cc <counter>:
     return p_reg->COUNTER;
    75cc:	4b01      	ldr	r3, [pc, #4]	; (75d4 <counter+0x8>)
    75ce:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    75d2:	4770      	bx	lr
    75d4:	40011000 	.word	0x40011000

000075d8 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    75d8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    75da:	2301      	movs	r3, #1
    75dc:	4083      	lsls	r3, r0
    75de:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    75e2:	4a10      	ldr	r2, [pc, #64]	; (7624 <compare_int_lock+0x4c>)
    75e4:	f3bf 8f5b 	dmb	ish
    75e8:	e852 1f00 	ldrex	r1, [r2]
    75ec:	ea01 0e0c 	and.w	lr, r1, ip
    75f0:	e842 e400 	strex	r4, lr, [r2]
    75f4:	2c00      	cmp	r4, #0
    75f6:	d1f7      	bne.n	75e8 <compare_int_lock+0x10>
    75f8:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    75fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    7600:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    7604:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    7608:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    760c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    7610:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7614:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    7618:	420b      	tst	r3, r1
}
    761a:	bf14      	ite	ne
    761c:	2001      	movne	r0, #1
    761e:	2000      	moveq	r0, #0
    7620:	bd10      	pop	{r4, pc}
    7622:	bf00      	nop
    7624:	20004e5c 	.word	0x20004e5c

00007628 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    7628:	b570      	push	{r4, r5, r6, lr}
    762a:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    762c:	f007 fc61 	bl	eef2 <full_int_lock>
    7630:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    7632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7636:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    7638:	4a17      	ldr	r2, [pc, #92]	; (7698 <channel_processing_check_and_clear+0x70>)
    763a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    763e:	4213      	tst	r3, r2
    7640:	d105      	bne.n	764e <channel_processing_check_and_clear+0x26>
	bool result = false;
    7642:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    7644:	4628      	mov	r0, r5
    7646:	f007 fc5d 	bl	ef04 <full_int_unlock>

	return result;
}
    764a:	4630      	mov	r0, r6
    764c:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    764e:	2301      	movs	r3, #1
    7650:	40a3      	lsls	r3, r4
    7652:	43db      	mvns	r3, r3
    7654:	4a11      	ldr	r2, [pc, #68]	; (769c <channel_processing_check_and_clear+0x74>)
    7656:	f3bf 8f5b 	dmb	ish
    765a:	e852 1f00 	ldrex	r1, [r2]
    765e:	ea01 0003 	and.w	r0, r1, r3
    7662:	e842 0600 	strex	r6, r0, [r2]
    7666:	2e00      	cmp	r6, #0
    7668:	d1f7      	bne.n	765a <channel_processing_check_and_clear+0x32>
    766a:	f3bf 8f5b 	dmb	ish
    766e:	b959      	cbnz	r1, 7688 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7670:	f104 0350 	add.w	r3, r4, #80	; 0x50
    7674:	009b      	lsls	r3, r3, #2
    7676:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7678:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    767c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    7680:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    7682:	b113      	cbz	r3, 768a <channel_processing_check_and_clear+0x62>
    7684:	2301      	movs	r3, #1
    7686:	e000      	b.n	768a <channel_processing_check_and_clear+0x62>
    7688:	2301      	movs	r3, #1
		if (result) {
    768a:	461e      	mov	r6, r3
    768c:	2b00      	cmp	r3, #0
    768e:	d0d9      	beq.n	7644 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    7690:	4620      	mov	r0, r4
    7692:	f007 fc1f 	bl	eed4 <event_clear>
    7696:	e7d5      	b.n	7644 <channel_processing_check_and_clear+0x1c>
    7698:	40011000 	.word	0x40011000
    769c:	20004e58 	.word	0x20004e58

000076a0 <compare_int_unlock>:
	if (key) {
    76a0:	b901      	cbnz	r1, 76a4 <compare_int_unlock+0x4>
}
    76a2:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    76a4:	2301      	movs	r3, #1
    76a6:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    76a8:	4a11      	ldr	r2, [pc, #68]	; (76f0 <compare_int_unlock+0x50>)
    76aa:	f3bf 8f5b 	dmb	ish
    76ae:	e852 1f00 	ldrex	r1, [r2]
    76b2:	4319      	orrs	r1, r3
    76b4:	e842 1c00 	strex	ip, r1, [r2]
    76b8:	f1bc 0f00 	cmp.w	ip, #0
    76bc:	d1f7      	bne.n	76ae <compare_int_unlock+0xe>
    76be:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    76c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    76c6:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    76c8:	4a0a      	ldr	r2, [pc, #40]	; (76f4 <compare_int_unlock+0x54>)
    76ca:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    76ce:	f3bf 8f5b 	dmb	ish
    76d2:	4b09      	ldr	r3, [pc, #36]	; (76f8 <compare_int_unlock+0x58>)
    76d4:	681b      	ldr	r3, [r3, #0]
    76d6:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    76da:	fa23 f000 	lsr.w	r0, r3, r0
    76de:	f010 0f01 	tst.w	r0, #1
    76e2:	d0de      	beq.n	76a2 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    76e4:	4b05      	ldr	r3, [pc, #20]	; (76fc <compare_int_unlock+0x5c>)
    76e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    76ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    76ee:	e7d8      	b.n	76a2 <compare_int_unlock+0x2>
    76f0:	20004e5c 	.word	0x20004e5c
    76f4:	40011000 	.word	0x40011000
    76f8:	20004e58 	.word	0x20004e58
    76fc:	e000e100 	.word	0xe000e100

00007700 <sys_clock_timeout_handler>:
{
    7700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7704:	4607      	mov	r7, r0
    7706:	4614      	mov	r4, r2
    7708:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    770a:	4610      	mov	r0, r2
    770c:	4619      	mov	r1, r3
    770e:	f007 fbed 	bl	eeec <absolute_time_to_cc>
    7712:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    7714:	4b15      	ldr	r3, [pc, #84]	; (776c <sys_clock_timeout_handler+0x6c>)
    7716:	681a      	ldr	r2, [r3, #0]
    7718:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    771a:	601c      	str	r4, [r3, #0]
    771c:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    771e:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    7722:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    7726:	d309      	bcc.n	773c <sys_clock_timeout_handler+0x3c>
	return false;
    7728:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    772a:	f004 fe81 	bl	c430 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    772e:	4638      	mov	r0, r7
    7730:	f7ff ff30 	bl	7594 <get_comparator>
    7734:	42a8      	cmp	r0, r5
    7736:	d00e      	beq.n	7756 <sys_clock_timeout_handler+0x56>
}
    7738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    773c:	4b0c      	ldr	r3, [pc, #48]	; (7770 <sys_clock_timeout_handler+0x70>)
    773e:	681b      	ldr	r3, [r3, #0]
    7740:	0a1a      	lsrs	r2, r3, #8
    7742:	061b      	lsls	r3, r3, #24
    7744:	eb15 0803 	adds.w	r8, r5, r3
    7748:	f142 0900 	adc.w	r9, r2, #0
    774c:	4b09      	ldr	r3, [pc, #36]	; (7774 <sys_clock_timeout_handler+0x74>)
    774e:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    7752:	2401      	movs	r4, #1
    7754:	e7e9      	b.n	772a <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    7756:	b11c      	cbz	r4, 7760 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    7758:	4638      	mov	r0, r7
    775a:	f7ff ff23 	bl	75a4 <event_enable>
}
    775e:	e7eb      	b.n	7738 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    7760:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    7764:	4638      	mov	r0, r7
    7766:	f7ff ff0b 	bl	7580 <set_comparator>
    776a:	e7f5      	b.n	7758 <sys_clock_timeout_handler+0x58>
    776c:	20004610 	.word	0x20004610
    7770:	20004e60 	.word	0x20004e60
    7774:	200045f8 	.word	0x200045f8

00007778 <z_nrf_rtc_timer_read>:
{
    7778:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    777a:	4b0d      	ldr	r3, [pc, #52]	; (77b0 <z_nrf_rtc_timer_read+0x38>)
    777c:	681c      	ldr	r4, [r3, #0]
    777e:	0a25      	lsrs	r5, r4, #8
    7780:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    7782:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    7786:	f7ff ff21 	bl	75cc <counter>
    778a:	4603      	mov	r3, r0
	val += cntr;
    778c:	1900      	adds	r0, r0, r4
    778e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    7792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    7796:	d20a      	bcs.n	77ae <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    7798:	4b06      	ldr	r3, [pc, #24]	; (77b4 <z_nrf_rtc_timer_read+0x3c>)
    779a:	e9d3 2300 	ldrd	r2, r3, [r3]
    779e:	4290      	cmp	r0, r2
    77a0:	eb71 0303 	sbcs.w	r3, r1, r3
    77a4:	d203      	bcs.n	77ae <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    77a6:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    77aa:	f141 0100 	adc.w	r1, r1, #0
}
    77ae:	bd38      	pop	{r3, r4, r5, pc}
    77b0:	20004e60 	.word	0x20004e60
    77b4:	200045f8 	.word	0x200045f8

000077b8 <compare_set_nolocks>:
{
    77b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    77ba:	4606      	mov	r6, r0
    77bc:	4614      	mov	r4, r2
    77be:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    77c0:	4610      	mov	r0, r2
    77c2:	4619      	mov	r1, r3
    77c4:	f007 fb92 	bl	eeec <absolute_time_to_cc>
    77c8:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    77ca:	f7ff ffd5 	bl	7778 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    77ce:	42a0      	cmp	r0, r4
    77d0:	eb71 0305 	sbcs.w	r3, r1, r5
    77d4:	d21d      	bcs.n	7812 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    77d6:	1a23      	subs	r3, r4, r0
    77d8:	eb65 0101 	sbc.w	r1, r5, r1
    77dc:	4a1b      	ldr	r2, [pc, #108]	; (784c <compare_set_nolocks+0x94>)
    77de:	4293      	cmp	r3, r2
    77e0:	f171 0300 	sbcs.w	r3, r1, #0
    77e4:	d22f      	bcs.n	7846 <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    77e6:	4b1a      	ldr	r3, [pc, #104]	; (7850 <compare_set_nolocks+0x98>)
    77e8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    77ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    77f0:	42ab      	cmp	r3, r5
    77f2:	bf08      	it	eq
    77f4:	42a2      	cmpeq	r2, r4
    77f6:	d01a      	beq.n	782e <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    77f8:	4639      	mov	r1, r7
    77fa:	4630      	mov	r0, r6
    77fc:	f007 fb87 	bl	ef0e <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    7800:	4639      	mov	r1, r7
    7802:	f007 fb63 	bl	eecc <counter_sub>
    7806:	1900      	adds	r0, r0, r4
    7808:	f145 0300 	adc.w	r3, r5, #0
    780c:	4604      	mov	r4, r0
    780e:	461d      	mov	r5, r3
    7810:	e00d      	b.n	782e <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    7812:	2301      	movs	r3, #1
    7814:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7816:	4a0f      	ldr	r2, [pc, #60]	; (7854 <compare_set_nolocks+0x9c>)
    7818:	f3bf 8f5b 	dmb	ish
    781c:	e852 1f00 	ldrex	r1, [r2]
    7820:	4319      	orrs	r1, r3
    7822:	e842 1000 	strex	r0, r1, [r2]
    7826:	2800      	cmp	r0, #0
    7828:	d1f8      	bne.n	781c <compare_set_nolocks+0x64>
    782a:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    782e:	4b08      	ldr	r3, [pc, #32]	; (7850 <compare_set_nolocks+0x98>)
    7830:	0132      	lsls	r2, r6, #4
    7832:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    7836:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    783a:	9906      	ldr	r1, [sp, #24]
    783c:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    783e:	9b07      	ldr	r3, [sp, #28]
    7840:	6073      	str	r3, [r6, #4]
	return ret;
    7842:	2000      	movs	r0, #0
}
    7844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    7846:	f06f 0015 	mvn.w	r0, #21
    784a:	e7fb      	b.n	7844 <compare_set_nolocks+0x8c>
    784c:	01000001 	.word	0x01000001
    7850:	20004600 	.word	0x20004600
    7854:	20004e58 	.word	0x20004e58

00007858 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    7858:	b530      	push	{r4, r5, lr}
    785a:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    785c:	2300      	movs	r3, #0
    785e:	4a1d      	ldr	r2, [pc, #116]	; (78d4 <sys_clock_driver_init+0x7c>)
    7860:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    7864:	2b00      	cmp	r3, #0
    7866:	dd24      	ble.n	78b2 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    7868:	4c1a      	ldr	r4, [pc, #104]	; (78d4 <sys_clock_driver_init+0x7c>)
    786a:	2502      	movs	r5, #2
    786c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7870:	4b19      	ldr	r3, [pc, #100]	; (78d8 <sys_clock_driver_init+0x80>)
    7872:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7876:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    787a:	2200      	movs	r2, #0
    787c:	2101      	movs	r1, #1
    787e:	2011      	movs	r0, #17
    7880:	f7fe f910 	bl	5aa4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    7884:	2011      	movs	r0, #17
    7886:	f7fe f8f1 	bl	5a6c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    788a:	2301      	movs	r3, #1
    788c:	60a3      	str	r3, [r4, #8]
    788e:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    7890:	4a12      	ldr	r2, [pc, #72]	; (78dc <sys_clock_driver_init+0x84>)
    7892:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    7894:	2400      	movs	r4, #0
    7896:	9401      	str	r4, [sp, #4]
    7898:	4b11      	ldr	r3, [pc, #68]	; (78e0 <sys_clock_driver_init+0x88>)
    789a:	9300      	str	r3, [sp, #0]
    789c:	4a11      	ldr	r2, [pc, #68]	; (78e4 <sys_clock_driver_init+0x8c>)
    789e:	2300      	movs	r3, #0
    78a0:	4620      	mov	r0, r4
    78a2:	f007 fb6f 	bl	ef84 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    78a6:	4628      	mov	r0, r5
    78a8:	f7ff fabc 	bl	6e24 <z_nrf_clock_control_lf_on>

	return 0;
}
    78ac:	4620      	mov	r0, r4
    78ae:	b003      	add	sp, #12
    78b0:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    78b2:	4a0d      	ldr	r2, [pc, #52]	; (78e8 <sys_clock_driver_init+0x90>)
    78b4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    78b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    78bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    78c0:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    78c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    78c8:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    78ca:	4902      	ldr	r1, [pc, #8]	; (78d4 <sys_clock_driver_init+0x7c>)
    78cc:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    78d0:	3301      	adds	r3, #1
    78d2:	e7c7      	b.n	7864 <sys_clock_driver_init+0xc>
    78d4:	40011000 	.word	0x40011000
    78d8:	e000e100 	.word	0xe000e100
    78dc:	20004e5c 	.word	0x20004e5c
    78e0:	00007701 	.word	0x00007701
    78e4:	007fffff 	.word	0x007fffff
    78e8:	20004600 	.word	0x20004600

000078ec <process_channel>:
{
    78ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    78f0:	b082      	sub	sp, #8
    78f2:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    78f4:	f7ff fe98 	bl	7628 <channel_processing_check_and_clear>
    78f8:	b910      	cbnz	r0, 7900 <process_channel+0x14>
}
    78fa:	b002      	add	sp, #8
    78fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    7900:	f7ff ff3a 	bl	7778 <z_nrf_rtc_timer_read>
    7904:	4682      	mov	sl, r0
    7906:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    7908:	f007 faf3 	bl	eef2 <full_int_lock>
    790c:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    790e:	4b13      	ldr	r3, [pc, #76]	; (795c <process_channel+0x70>)
    7910:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    7914:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    7918:	45c2      	cmp	sl, r8
    791a:	eb76 0309 	sbcs.w	r3, r6, r9
    791e:	d20b      	bcs.n	7938 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    7920:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    7922:	4628      	mov	r0, r5
    7924:	f007 faee 	bl	ef04 <full_int_unlock>
		if (handler) {
    7928:	2e00      	cmp	r6, #0
    792a:	d0e6      	beq.n	78fa <process_channel+0xe>
			handler(chan, expire_time, user_context);
    792c:	9700      	str	r7, [sp, #0]
    792e:	4642      	mov	r2, r8
    7930:	464b      	mov	r3, r9
    7932:	4620      	mov	r0, r4
    7934:	47b0      	blx	r6
}
    7936:	e7e0      	b.n	78fa <process_channel+0xe>
			handler = cc_data[chan].callback;
    7938:	4a08      	ldr	r2, [pc, #32]	; (795c <process_channel+0x70>)
    793a:	0123      	lsls	r3, r4, #4
    793c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    7940:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    7942:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    7944:	2000      	movs	r0, #0
    7946:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    7948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    794c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7950:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    7954:	4620      	mov	r0, r4
    7956:	f7ff fe2f 	bl	75b8 <event_disable>
    795a:	e7e2      	b.n	7922 <process_channel+0x36>
    795c:	20004600 	.word	0x20004600

00007960 <rtc_nrf_isr>:
{
    7960:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    7962:	4b0e      	ldr	r3, [pc, #56]	; (799c <rtc_nrf_isr+0x3c>)
    7964:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    7968:	f013 0f02 	tst.w	r3, #2
    796c:	d00d      	beq.n	798a <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    796e:	4b0b      	ldr	r3, [pc, #44]	; (799c <rtc_nrf_isr+0x3c>)
    7970:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    7974:	b14b      	cbz	r3, 798a <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7976:	4b09      	ldr	r3, [pc, #36]	; (799c <rtc_nrf_isr+0x3c>)
    7978:	2200      	movs	r2, #0
    797a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    797e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    7982:	4a07      	ldr	r2, [pc, #28]	; (79a0 <rtc_nrf_isr+0x40>)
    7984:	6813      	ldr	r3, [r2, #0]
    7986:	3301      	adds	r3, #1
    7988:	6013      	str	r3, [r2, #0]
{
    798a:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    798c:	2c00      	cmp	r4, #0
    798e:	dd00      	ble.n	7992 <rtc_nrf_isr+0x32>
}
    7990:	bd10      	pop	{r4, pc}
		process_channel(chan);
    7992:	4620      	mov	r0, r4
    7994:	f7ff ffaa 	bl	78ec <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    7998:	3401      	adds	r4, #1
    799a:	e7f7      	b.n	798c <rtc_nrf_isr+0x2c>
    799c:	40011000 	.word	0x40011000
    79a0:	20004e60 	.word	0x20004e60

000079a4 <sys_clock_set_timeout>:
{
    79a4:	b510      	push	{r4, lr}
    79a6:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    79a8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    79ac:	d006      	beq.n	79bc <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    79ae:	2801      	cmp	r0, #1
    79b0:	dd06      	ble.n	79c0 <sys_clock_set_timeout+0x1c>
    79b2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    79b6:	da05      	bge.n	79c4 <sys_clock_set_timeout+0x20>
    79b8:	1e44      	subs	r4, r0, #1
    79ba:	e004      	b.n	79c6 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    79bc:	480f      	ldr	r0, [pc, #60]	; (79fc <sys_clock_set_timeout+0x58>)
    79be:	e7f8      	b.n	79b2 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    79c0:	2400      	movs	r4, #0
    79c2:	e000      	b.n	79c6 <sys_clock_set_timeout+0x22>
    79c4:	4c0d      	ldr	r4, [pc, #52]	; (79fc <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    79c6:	f7ff fed7 	bl	7778 <z_nrf_rtc_timer_read>
    79ca:	4b0d      	ldr	r3, [pc, #52]	; (7a00 <sys_clock_set_timeout+0x5c>)
    79cc:	6819      	ldr	r1, [r3, #0]
    79ce:	685b      	ldr	r3, [r3, #4]
    79d0:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    79d2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    79d6:	d300      	bcc.n	79da <sys_clock_set_timeout+0x36>
		ticks = 0;
    79d8:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    79da:	4420      	add	r0, r4
    79dc:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    79de:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    79e2:	d300      	bcc.n	79e6 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    79e4:	4a05      	ldr	r2, [pc, #20]	; (79fc <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    79e6:	2000      	movs	r0, #0
    79e8:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    79ea:	9001      	str	r0, [sp, #4]
    79ec:	4905      	ldr	r1, [pc, #20]	; (7a04 <sys_clock_set_timeout+0x60>)
    79ee:	9100      	str	r1, [sp, #0]
    79f0:	f143 0300 	adc.w	r3, r3, #0
    79f4:	f007 fac6 	bl	ef84 <compare_set>
}
    79f8:	b002      	add	sp, #8
    79fa:	bd10      	pop	{r4, pc}
    79fc:	007fffff 	.word	0x007fffff
    7a00:	20004610 	.word	0x20004610
    7a04:	00007701 	.word	0x00007701

00007a08 <sys_clock_elapsed>:
{
    7a08:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    7a0a:	f7ff feb5 	bl	7778 <z_nrf_rtc_timer_read>
    7a0e:	4b02      	ldr	r3, [pc, #8]	; (7a18 <sys_clock_elapsed+0x10>)
    7a10:	681b      	ldr	r3, [r3, #0]
}
    7a12:	1ac0      	subs	r0, r0, r3
    7a14:	bd08      	pop	{r3, pc}
    7a16:	bf00      	nop
    7a18:	20004610 	.word	0x20004610

00007a1c <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    7a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7a20:	460c      	mov	r4, r1
    7a22:	4691      	mov	r9, r2
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    7a24:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    7a28:	d002      	beq.n	7a30 <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7a2a:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    7a2e:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    7a30:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    7a34:	f3c0 1881 	ubfx	r8, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    7a38:	f3c0 2703 	ubfx	r7, r0, #8, #4
    uint32_t port = pin_number >> 5;
    7a3c:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    7a40:	f010 0f20 	tst.w	r0, #32
    7a44:	d01d      	beq.n	7a82 <nrf_pin_configure+0x66>
    7a46:	b1fb      	cbz	r3, 7a88 <nrf_pin_configure+0x6c>
            mask = P1_FEATURE_PINS_PRESENT;
    7a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7a4c:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7a50:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7a52:	f013 0f01 	tst.w	r3, #1
    7a56:	d019      	beq.n	7a8c <nrf_pin_configure+0x70>
    *p_pin = pin_number & 0x1F;
    7a58:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7a5c:	096d      	lsrs	r5, r5, #5
    7a5e:	d023      	beq.n	7aa8 <nrf_pin_configure+0x8c>
    7a60:	bb2d      	cbnz	r5, 7aae <nrf_pin_configure+0x92>
            NRFX_ASSERT(0);
    7a62:	4d19      	ldr	r5, [pc, #100]	; (7ac8 <nrf_pin_configure+0xac>)
    7a64:	f240 232e 	movw	r3, #558	; 0x22e
    7a68:	462a      	mov	r2, r5
    7a6a:	4918      	ldr	r1, [pc, #96]	; (7acc <nrf_pin_configure+0xb0>)
    7a6c:	4818      	ldr	r0, [pc, #96]	; (7ad0 <nrf_pin_configure+0xb4>)
    7a6e:	f006 fd9e 	bl	e5ae <assert_print>
    7a72:	f240 212e 	movw	r1, #558	; 0x22e
    7a76:	4628      	mov	r0, r5
    7a78:	f006 fd92 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    7a7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7a80:	e016      	b.n	7ab0 <nrf_pin_configure+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    7a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7a86:	e7e1      	b.n	7a4c <nrf_pin_configure+0x30>
    switch (port)
    7a88:	2300      	movs	r3, #0
    7a8a:	e7df      	b.n	7a4c <nrf_pin_configure+0x30>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7a8c:	4e0e      	ldr	r6, [pc, #56]	; (7ac8 <nrf_pin_configure+0xac>)
    7a8e:	f240 2329 	movw	r3, #553	; 0x229
    7a92:	4632      	mov	r2, r6
    7a94:	490f      	ldr	r1, [pc, #60]	; (7ad4 <nrf_pin_configure+0xb8>)
    7a96:	480e      	ldr	r0, [pc, #56]	; (7ad0 <nrf_pin_configure+0xb4>)
    7a98:	f006 fd89 	bl	e5ae <assert_print>
    7a9c:	f240 2129 	movw	r1, #553	; 0x229
    7aa0:	4630      	mov	r0, r6
    7aa2:	f006 fd7d 	bl	e5a0 <assert_post_action>
    7aa6:	e7d7      	b.n	7a58 <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
    7aa8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7aac:	e000      	b.n	7ab0 <nrf_pin_configure+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7aae:	4b0a      	ldr	r3, [pc, #40]	; (7ad8 <nrf_pin_configure+0xbc>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    7ab0:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    7ab4:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7ab8:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    7abc:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    7ac0:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
}
    7ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7ac8:	0001139c 	.word	0x0001139c
    7acc:	000107a0 	.word	0x000107a0
    7ad0:	000100e4 	.word	0x000100e4
    7ad4:	000113d0 	.word	0x000113d0
    7ad8:	50000300 	.word	0x50000300

00007adc <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    7adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ae0:	4605      	mov	r5, r0
    7ae2:	460e      	mov	r6, r1
    7ae4:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7ae6:	2400      	movs	r4, #0
    7ae8:	e04e      	b.n	7b88 <pinctrl_configure_pins+0xac>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    7aea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7aee:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    7af2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7af6:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    7afa:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    7afe:	f013 0f20 	tst.w	r3, #32
    7b02:	d01f      	beq.n	7b44 <pinctrl_configure_pins+0x68>
    7b04:	b109      	cbz	r1, 7b0a <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    7b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    7b0a:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7b0e:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7b10:	f012 0f01 	tst.w	r2, #1
    7b14:	d019      	beq.n	7b4a <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    7b16:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7b1a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    7b1e:	d023      	beq.n	7b68 <pinctrl_configure_pins+0x8c>
    7b20:	bb2b      	cbnz	r3, 7b6e <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    7b22:	f8df 9344 	ldr.w	r9, [pc, #836]	; 7e68 <pinctrl_configure_pins+0x38c>
    7b26:	f240 232e 	movw	r3, #558	; 0x22e
    7b2a:	464a      	mov	r2, r9
    7b2c:	49cf      	ldr	r1, [pc, #828]	; (7e6c <pinctrl_configure_pins+0x390>)
    7b2e:	48d0      	ldr	r0, [pc, #832]	; (7e70 <pinctrl_configure_pins+0x394>)
    7b30:	f006 fd3d 	bl	e5ae <assert_print>
    7b34:	f240 212e 	movw	r1, #558	; 0x22e
    7b38:	4648      	mov	r0, r9
    7b3a:	f006 fd31 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    7b3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7b42:	e015      	b.n	7b70 <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    7b44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7b48:	e7df      	b.n	7b0a <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7b4a:	f8df a31c 	ldr.w	sl, [pc, #796]	; 7e68 <pinctrl_configure_pins+0x38c>
    7b4e:	f240 2329 	movw	r3, #553	; 0x229
    7b52:	4652      	mov	r2, sl
    7b54:	49c7      	ldr	r1, [pc, #796]	; (7e74 <pinctrl_configure_pins+0x398>)
    7b56:	48c6      	ldr	r0, [pc, #792]	; (7e70 <pinctrl_configure_pins+0x394>)
    7b58:	f006 fd29 	bl	e5ae <assert_print>
    7b5c:	f240 2129 	movw	r1, #553	; 0x229
    7b60:	4650      	mov	r0, sl
    7b62:	f006 fd1d 	bl	e5a0 <assert_post_action>
    7b66:	e7d6      	b.n	7b16 <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    7b68:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7b6c:	e000      	b.n	7b70 <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7b6e:	4ac2      	ldr	r2, [pc, #776]	; (7e78 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7b70:	2101      	movs	r1, #1
    7b72:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    7b76:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7b7a:	460a      	mov	r2, r1
    7b7c:	f855 0008 	ldr.w	r0, [r5, r8]
    7b80:	f7ff ff4c 	bl	7a1c <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7b84:	3401      	adds	r4, #1
    7b86:	b2e4      	uxtb	r4, r4
    7b88:	42b4      	cmp	r4, r6
    7b8a:	f080 841e 	bcs.w	83ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ca>
		switch (NRF_GET_FUN(pins[i])) {
    7b8e:	ea4f 0884 	mov.w	r8, r4, lsl #2
    7b92:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7b96:	0c1a      	lsrs	r2, r3, #16
    7b98:	2a22      	cmp	r2, #34	; 0x22
    7b9a:	f200 8418 	bhi.w	83ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ce>
    7b9e:	a101      	add	r1, pc, #4	; (adr r1, 7ba4 <pinctrl_configure_pins+0xc8>)
    7ba0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    7ba4:	00007aeb 	.word	0x00007aeb
    7ba8:	00007c31 	.word	0x00007c31
    7bac:	00007c47 	.word	0x00007c47
    7bb0:	00007ce7 	.word	0x00007ce7
    7bb4:	00007cfd 	.word	0x00007cfd
    7bb8:	00007d9d 	.word	0x00007d9d
    7bbc:	00007e3d 	.word	0x00007e3d
    7bc0:	000083cf 	.word	0x000083cf
    7bc4:	000083cf 	.word	0x000083cf
    7bc8:	000083cf 	.word	0x000083cf
    7bcc:	000083cf 	.word	0x000083cf
    7bd0:	00007e53 	.word	0x00007e53
    7bd4:	00007e7d 	.word	0x00007e7d
    7bd8:	000083cf 	.word	0x000083cf
    7bdc:	000083cf 	.word	0x000083cf
    7be0:	000083cf 	.word	0x000083cf
    7be4:	000083cf 	.word	0x000083cf
    7be8:	000083cf 	.word	0x000083cf
    7bec:	000083cf 	.word	0x000083cf
    7bf0:	000083cf 	.word	0x000083cf
    7bf4:	000083cf 	.word	0x000083cf
    7bf8:	000083cf 	.word	0x000083cf
    7bfc:	00007e93 	.word	0x00007e93
    7c00:	00007fb9 	.word	0x00007fb9
    7c04:	000080df 	.word	0x000080df
    7c08:	0000821b 	.word	0x0000821b
    7c0c:	000083cf 	.word	0x000083cf
    7c10:	000083cf 	.word	0x000083cf
    7c14:	000083cf 	.word	0x000083cf
    7c18:	00008341 	.word	0x00008341
    7c1c:	00008357 	.word	0x00008357
    7c20:	0000836d 	.word	0x0000836d
    7c24:	00008383 	.word	0x00008383
    7c28:	0000839b 	.word	0x0000839b
    7c2c:	000083b3 	.word	0x000083b3
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    7c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7c34:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7c38:	2200      	movs	r2, #0
    7c3a:	4611      	mov	r1, r2
    7c3c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    7c40:	f7ff feec 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    7c44:	e79e      	b.n	7b84 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    7c46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7c4a:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    7c4e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7c52:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    7c56:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    7c5a:	f013 0f20 	tst.w	r3, #32
    7c5e:	d01f      	beq.n	7ca0 <pinctrl_configure_pins+0x1c4>
    7c60:	b30a      	cbz	r2, 7ca6 <pinctrl_configure_pins+0x1ca>
            mask = P1_FEATURE_PINS_PRESENT;
    7c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7c66:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7c6a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7c6c:	f013 0f01 	tst.w	r3, #1
    7c70:	d01b      	beq.n	7caa <pinctrl_configure_pins+0x1ce>
    *p_pin = pin_number & 0x1F;
    7c72:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7c76:	ea5f 1359 	movs.w	r3, r9, lsr #5
    7c7a:	d025      	beq.n	7cc8 <pinctrl_configure_pins+0x1ec>
    7c7c:	bb3b      	cbnz	r3, 7cce <pinctrl_configure_pins+0x1f2>
            NRFX_ASSERT(0);
    7c7e:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 7e68 <pinctrl_configure_pins+0x38c>
    7c82:	f240 232e 	movw	r3, #558	; 0x22e
    7c86:	464a      	mov	r2, r9
    7c88:	4978      	ldr	r1, [pc, #480]	; (7e6c <pinctrl_configure_pins+0x390>)
    7c8a:	4879      	ldr	r0, [pc, #484]	; (7e70 <pinctrl_configure_pins+0x394>)
    7c8c:	f006 fc8f 	bl	e5ae <assert_print>
    7c90:	f240 212e 	movw	r1, #558	; 0x22e
    7c94:	4648      	mov	r0, r9
    7c96:	f006 fc83 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    7c9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7c9e:	e017      	b.n	7cd0 <pinctrl_configure_pins+0x1f4>
            mask = P0_FEATURE_PINS_PRESENT;
    7ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7ca4:	e7df      	b.n	7c66 <pinctrl_configure_pins+0x18a>
    switch (port)
    7ca6:	2300      	movs	r3, #0
    7ca8:	e7dd      	b.n	7c66 <pinctrl_configure_pins+0x18a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7caa:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 7e68 <pinctrl_configure_pins+0x38c>
    7cae:	f240 2329 	movw	r3, #553	; 0x229
    7cb2:	4652      	mov	r2, sl
    7cb4:	496f      	ldr	r1, [pc, #444]	; (7e74 <pinctrl_configure_pins+0x398>)
    7cb6:	486e      	ldr	r0, [pc, #440]	; (7e70 <pinctrl_configure_pins+0x394>)
    7cb8:	f006 fc79 	bl	e5ae <assert_print>
    7cbc:	f240 2129 	movw	r1, #553	; 0x229
    7cc0:	4650      	mov	r0, sl
    7cc2:	f006 fc6d 	bl	e5a0 <assert_post_action>
    7cc6:	e7d4      	b.n	7c72 <pinctrl_configure_pins+0x196>
        case 0: return NRF_P0;
    7cc8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7ccc:	e000      	b.n	7cd0 <pinctrl_configure_pins+0x1f4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7cce:	4a6a      	ldr	r2, [pc, #424]	; (7e78 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7cd0:	2101      	movs	r1, #1
    7cd2:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    7cd6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7cda:	460a      	mov	r2, r1
    7cdc:	f855 0008 	ldr.w	r0, [r5, r8]
    7ce0:	f7ff fe9c 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    7ce4:	e74e      	b.n	7b84 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    7ce6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7cea:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7cee:	2200      	movs	r2, #0
    7cf0:	4611      	mov	r1, r2
    7cf2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    7cf6:	f7ff fe91 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    7cfa:	e743      	b.n	7b84 <pinctrl_configure_pins+0xa8>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    7cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7d00:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    7d04:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7d08:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    7d0c:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    7d10:	f013 0f20 	tst.w	r3, #32
    7d14:	d01f      	beq.n	7d56 <pinctrl_configure_pins+0x27a>
    7d16:	b30a      	cbz	r2, 7d5c <pinctrl_configure_pins+0x280>
            mask = P1_FEATURE_PINS_PRESENT;
    7d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7d1c:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7d20:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7d22:	f013 0f01 	tst.w	r3, #1
    7d26:	d01b      	beq.n	7d60 <pinctrl_configure_pins+0x284>
    *p_pin = pin_number & 0x1F;
    7d28:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7d2c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    7d30:	d025      	beq.n	7d7e <pinctrl_configure_pins+0x2a2>
    7d32:	bb3b      	cbnz	r3, 7d84 <pinctrl_configure_pins+0x2a8>
            NRFX_ASSERT(0);
    7d34:	f8df 9130 	ldr.w	r9, [pc, #304]	; 7e68 <pinctrl_configure_pins+0x38c>
    7d38:	f240 232e 	movw	r3, #558	; 0x22e
    7d3c:	464a      	mov	r2, r9
    7d3e:	494b      	ldr	r1, [pc, #300]	; (7e6c <pinctrl_configure_pins+0x390>)
    7d40:	484b      	ldr	r0, [pc, #300]	; (7e70 <pinctrl_configure_pins+0x394>)
    7d42:	f006 fc34 	bl	e5ae <assert_print>
    7d46:	f240 212e 	movw	r1, #558	; 0x22e
    7d4a:	4648      	mov	r0, r9
    7d4c:	f006 fc28 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    7d50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7d54:	e017      	b.n	7d86 <pinctrl_configure_pins+0x2aa>
            mask = P0_FEATURE_PINS_PRESENT;
    7d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7d5a:	e7df      	b.n	7d1c <pinctrl_configure_pins+0x240>
    switch (port)
    7d5c:	2300      	movs	r3, #0
    7d5e:	e7dd      	b.n	7d1c <pinctrl_configure_pins+0x240>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7d60:	f8df a104 	ldr.w	sl, [pc, #260]	; 7e68 <pinctrl_configure_pins+0x38c>
    7d64:	f240 2329 	movw	r3, #553	; 0x229
    7d68:	4652      	mov	r2, sl
    7d6a:	4942      	ldr	r1, [pc, #264]	; (7e74 <pinctrl_configure_pins+0x398>)
    7d6c:	4840      	ldr	r0, [pc, #256]	; (7e70 <pinctrl_configure_pins+0x394>)
    7d6e:	f006 fc1e 	bl	e5ae <assert_print>
    7d72:	f240 2129 	movw	r1, #553	; 0x229
    7d76:	4650      	mov	r0, sl
    7d78:	f006 fc12 	bl	e5a0 <assert_post_action>
    7d7c:	e7d4      	b.n	7d28 <pinctrl_configure_pins+0x24c>
        case 0: return NRF_P0;
    7d7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7d82:	e000      	b.n	7d86 <pinctrl_configure_pins+0x2aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7d84:	4a3c      	ldr	r2, [pc, #240]	; (7e78 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7d86:	2101      	movs	r1, #1
    7d88:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    7d8c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7d90:	2200      	movs	r2, #0
    7d92:	f855 0008 	ldr.w	r0, [r5, r8]
    7d96:	f7ff fe41 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    7d9a:	e6f3      	b.n	7b84 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    7d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7da0:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    7da4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7da8:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    7dac:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    7db0:	f013 0f20 	tst.w	r3, #32
    7db4:	d01f      	beq.n	7df6 <pinctrl_configure_pins+0x31a>
    7db6:	b30a      	cbz	r2, 7dfc <pinctrl_configure_pins+0x320>
            mask = P1_FEATURE_PINS_PRESENT;
    7db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7dbc:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7dc0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7dc2:	f013 0f01 	tst.w	r3, #1
    7dc6:	d01b      	beq.n	7e00 <pinctrl_configure_pins+0x324>
    *p_pin = pin_number & 0x1F;
    7dc8:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7dcc:	ea5f 1359 	movs.w	r3, r9, lsr #5
    7dd0:	d025      	beq.n	7e1e <pinctrl_configure_pins+0x342>
    7dd2:	bb3b      	cbnz	r3, 7e24 <pinctrl_configure_pins+0x348>
            NRFX_ASSERT(0);
    7dd4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 7e68 <pinctrl_configure_pins+0x38c>
    7dd8:	f240 232e 	movw	r3, #558	; 0x22e
    7ddc:	464a      	mov	r2, r9
    7dde:	4923      	ldr	r1, [pc, #140]	; (7e6c <pinctrl_configure_pins+0x390>)
    7de0:	4823      	ldr	r0, [pc, #140]	; (7e70 <pinctrl_configure_pins+0x394>)
    7de2:	f006 fbe4 	bl	e5ae <assert_print>
    7de6:	f240 212e 	movw	r1, #558	; 0x22e
    7dea:	4648      	mov	r0, r9
    7dec:	f006 fbd8 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    7df0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7df4:	e017      	b.n	7e26 <pinctrl_configure_pins+0x34a>
            mask = P0_FEATURE_PINS_PRESENT;
    7df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7dfa:	e7df      	b.n	7dbc <pinctrl_configure_pins+0x2e0>
    switch (port)
    7dfc:	2300      	movs	r3, #0
    7dfe:	e7dd      	b.n	7dbc <pinctrl_configure_pins+0x2e0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7e00:	f8df a064 	ldr.w	sl, [pc, #100]	; 7e68 <pinctrl_configure_pins+0x38c>
    7e04:	f240 2329 	movw	r3, #553	; 0x229
    7e08:	4652      	mov	r2, sl
    7e0a:	491a      	ldr	r1, [pc, #104]	; (7e74 <pinctrl_configure_pins+0x398>)
    7e0c:	4818      	ldr	r0, [pc, #96]	; (7e70 <pinctrl_configure_pins+0x394>)
    7e0e:	f006 fbce 	bl	e5ae <assert_print>
    7e12:	f240 2129 	movw	r1, #553	; 0x229
    7e16:	4650      	mov	r0, sl
    7e18:	f006 fbc2 	bl	e5a0 <assert_post_action>
    7e1c:	e7d4      	b.n	7dc8 <pinctrl_configure_pins+0x2ec>
        case 0: return NRF_P0;
    7e1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7e22:	e000      	b.n	7e26 <pinctrl_configure_pins+0x34a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7e24:	4a14      	ldr	r2, [pc, #80]	; (7e78 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7e26:	2101      	movs	r1, #1
    7e28:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    7e2c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7e30:	460a      	mov	r2, r1
    7e32:	f855 0008 	ldr.w	r0, [r5, r8]
    7e36:	f7ff fdf1 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    7e3a:	e6a3      	b.n	7b84 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    7e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7e40:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7e44:	2200      	movs	r2, #0
    7e46:	4611      	mov	r1, r2
    7e48:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    7e4c:	f7ff fde6 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    7e50:	e698      	b.n	7b84 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    7e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7e56:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7e5a:	2200      	movs	r2, #0
    7e5c:	4611      	mov	r1, r2
    7e5e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    7e62:	f7ff fddb 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    7e66:	e68d      	b.n	7b84 <pinctrl_configure_pins+0xa8>
    7e68:	0001139c 	.word	0x0001139c
    7e6c:	000107a0 	.word	0x000107a0
    7e70:	000100e4 	.word	0x000100e4
    7e74:	000113d0 	.word	0x000113d0
    7e78:	50000300 	.word	0x50000300
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    7e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7e80:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7e84:	2200      	movs	r2, #0
    7e86:	4611      	mov	r1, r2
    7e88:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    7e8c:	f7ff fdc6 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    7e90:	e678      	b.n	7b84 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    7e92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7e96:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7e9a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7e9e:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    7ea2:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    7ea6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    7eaa:	d144      	bne.n	7f36 <pinctrl_configure_pins+0x45a>
    switch (port)
    7eac:	ea5f 1359 	movs.w	r3, r9, lsr #5
    7eb0:	d01f      	beq.n	7ef2 <pinctrl_configure_pins+0x416>
    7eb2:	b10b      	cbz	r3, 7eb8 <pinctrl_configure_pins+0x3dc>
            mask = P1_FEATURE_PINS_PRESENT;
    7eb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    7eb8:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7ebc:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7ebe:	f012 0f01 	tst.w	r2, #1
    7ec2:	d019      	beq.n	7ef8 <pinctrl_configure_pins+0x41c>
    *p_pin = pin_number & 0x1F;
    7ec4:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7ec8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    7ecc:	d023      	beq.n	7f16 <pinctrl_configure_pins+0x43a>
    7ece:	bb2b      	cbnz	r3, 7f1c <pinctrl_configure_pins+0x440>
            NRFX_ASSERT(0);
    7ed0:	f8df 9300 	ldr.w	r9, [pc, #768]	; 81d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4>
    7ed4:	f240 232e 	movw	r3, #558	; 0x22e
    7ed8:	464a      	mov	r2, r9
    7eda:	49bf      	ldr	r1, [pc, #764]	; (81d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d8>)
    7edc:	48bf      	ldr	r0, [pc, #764]	; (81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>)
    7ede:	f006 fb66 	bl	e5ae <assert_print>
    7ee2:	f240 212e 	movw	r1, #558	; 0x22e
    7ee6:	4648      	mov	r0, r9
    7ee8:	f006 fb5a 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    7eec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7ef0:	e015      	b.n	7f1e <pinctrl_configure_pins+0x442>
            mask = P0_FEATURE_PINS_PRESENT;
    7ef2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7ef6:	e7df      	b.n	7eb8 <pinctrl_configure_pins+0x3dc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7ef8:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 81d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4>
    7efc:	f240 2329 	movw	r3, #553	; 0x229
    7f00:	4652      	mov	r2, sl
    7f02:	49b7      	ldr	r1, [pc, #732]	; (81e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e0>)
    7f04:	48b5      	ldr	r0, [pc, #724]	; (81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>)
    7f06:	f006 fb52 	bl	e5ae <assert_print>
    7f0a:	f240 2129 	movw	r1, #553	; 0x229
    7f0e:	4650      	mov	r0, sl
    7f10:	f006 fb46 	bl	e5a0 <assert_post_action>
    7f14:	e7d6      	b.n	7ec4 <pinctrl_configure_pins+0x3e8>
        case 0: return NRF_P0;
    7f16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7f1a:	e000      	b.n	7f1e <pinctrl_configure_pins+0x442>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7f1c:	4ab1      	ldr	r2, [pc, #708]	; (81e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e4>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7f1e:	2301      	movs	r3, #1
    7f20:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    7f24:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7f28:	2201      	movs	r2, #1
    7f2a:	4611      	mov	r1, r2
    7f2c:	f855 0008 	ldr.w	r0, [r5, r8]
    7f30:	f7ff fd74 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    7f34:	e626      	b.n	7b84 <pinctrl_configure_pins+0xa8>
    switch (port)
    7f36:	ea5f 1359 	movs.w	r3, r9, lsr #5
    7f3a:	d01f      	beq.n	7f7c <pinctrl_configure_pins+0x4a0>
    7f3c:	b30b      	cbz	r3, 7f82 <pinctrl_configure_pins+0x4a6>
            mask = P1_FEATURE_PINS_PRESENT;
    7f3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    7f42:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7f46:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7f48:	f013 0f01 	tst.w	r3, #1
    7f4c:	d01b      	beq.n	7f86 <pinctrl_configure_pins+0x4aa>
    *p_pin = pin_number & 0x1F;
    7f4e:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7f52:	ea5f 1359 	movs.w	r3, r9, lsr #5
    7f56:	d025      	beq.n	7fa4 <pinctrl_configure_pins+0x4c8>
    7f58:	bb3b      	cbnz	r3, 7faa <pinctrl_configure_pins+0x4ce>
            NRFX_ASSERT(0);
    7f5a:	f8df 9278 	ldr.w	r9, [pc, #632]	; 81d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4>
    7f5e:	f240 232e 	movw	r3, #558	; 0x22e
    7f62:	464a      	mov	r2, r9
    7f64:	499c      	ldr	r1, [pc, #624]	; (81d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d8>)
    7f66:	489d      	ldr	r0, [pc, #628]	; (81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>)
    7f68:	f006 fb21 	bl	e5ae <assert_print>
    7f6c:	f240 212e 	movw	r1, #558	; 0x22e
    7f70:	4648      	mov	r0, r9
    7f72:	f006 fb15 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    7f76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7f7a:	e017      	b.n	7fac <pinctrl_configure_pins+0x4d0>
            mask = P0_FEATURE_PINS_PRESENT;
    7f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7f80:	e7df      	b.n	7f42 <pinctrl_configure_pins+0x466>
    switch (port)
    7f82:	2300      	movs	r3, #0
    7f84:	e7dd      	b.n	7f42 <pinctrl_configure_pins+0x466>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7f86:	f8df a24c 	ldr.w	sl, [pc, #588]	; 81d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4>
    7f8a:	f240 2329 	movw	r3, #553	; 0x229
    7f8e:	4652      	mov	r2, sl
    7f90:	4993      	ldr	r1, [pc, #588]	; (81e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e0>)
    7f92:	4892      	ldr	r0, [pc, #584]	; (81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>)
    7f94:	f006 fb0b 	bl	e5ae <assert_print>
    7f98:	f240 2129 	movw	r1, #553	; 0x229
    7f9c:	4650      	mov	r0, sl
    7f9e:	f006 faff 	bl	e5a0 <assert_post_action>
    7fa2:	e7d4      	b.n	7f4e <pinctrl_configure_pins+0x472>
        case 0: return NRF_P0;
    7fa4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7fa8:	e000      	b.n	7fac <pinctrl_configure_pins+0x4d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7faa:	4a8e      	ldr	r2, [pc, #568]	; (81e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7fac:	2301      	movs	r3, #1
    7fae:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    7fb2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    7fb6:	e7b7      	b.n	7f28 <pinctrl_configure_pins+0x44c>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    7fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7fbc:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7fc0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    7fc4:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    7fc8:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    7fcc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    7fd0:	d144      	bne.n	805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>
    switch (port)
    7fd2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    7fd6:	d01f      	beq.n	8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>
    7fd8:	b10b      	cbz	r3, 7fde <pinctrl_configure_pins+0x502>
            mask = P1_FEATURE_PINS_PRESENT;
    7fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    7fde:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7fe2:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7fe4:	f012 0f01 	tst.w	r2, #1
    7fe8:	d019      	beq.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
    *p_pin = pin_number & 0x1F;
    7fea:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7fee:	ea5f 1359 	movs.w	r3, r9, lsr #5
    7ff2:	d023      	beq.n	803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
    7ff4:	bb2b      	cbnz	r3, 8042 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42>
            NRFX_ASSERT(0);
    7ff6:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 81d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4>
    7ffa:	f240 232e 	movw	r3, #558	; 0x22e
    7ffe:	464a      	mov	r2, r9
    8000:	4975      	ldr	r1, [pc, #468]	; (81d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d8>)
    8002:	4876      	ldr	r0, [pc, #472]	; (81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>)
    8004:	f006 fad3 	bl	e5ae <assert_print>
    8008:	f240 212e 	movw	r1, #558	; 0x22e
    800c:	4648      	mov	r0, r9
    800e:	f006 fac7 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    8012:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8016:	e015      	b.n	8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
            mask = P0_FEATURE_PINS_PRESENT;
    8018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    801c:	e7df      	b.n	7fde <pinctrl_configure_pins+0x502>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    801e:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 81d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4>
    8022:	f240 2329 	movw	r3, #553	; 0x229
    8026:	4652      	mov	r2, sl
    8028:	496d      	ldr	r1, [pc, #436]	; (81e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e0>)
    802a:	486c      	ldr	r0, [pc, #432]	; (81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>)
    802c:	f006 fabf 	bl	e5ae <assert_print>
    8030:	f240 2129 	movw	r1, #553	; 0x229
    8034:	4650      	mov	r0, sl
    8036:	f006 fab3 	bl	e5a0 <assert_post_action>
    803a:	e7d6      	b.n	7fea <pinctrl_configure_pins+0x50e>
        case 0: return NRF_P0;
    803c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8040:	e000      	b.n	8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8042:	4a68      	ldr	r2, [pc, #416]	; (81e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e4>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    8044:	2301      	movs	r3, #1
    8046:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    804a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    804e:	2201      	movs	r2, #1
    8050:	4611      	mov	r1, r2
    8052:	f855 0008 	ldr.w	r0, [r5, r8]
    8056:	f7ff fce1 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    805a:	e593      	b.n	7b84 <pinctrl_configure_pins+0xa8>
    switch (port)
    805c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8060:	d01f      	beq.n	80a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa2>
    8062:	b30b      	cbz	r3, 80a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>
            mask = P1_FEATURE_PINS_PRESENT;
    8064:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8068:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    806c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    806e:	f013 0f01 	tst.w	r3, #1
    8072:	d01b      	beq.n	80ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>
    *p_pin = pin_number & 0x1F;
    8074:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8078:	ea5f 1359 	movs.w	r3, r9, lsr #5
    807c:	d025      	beq.n	80ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xca>
    807e:	bb3b      	cbnz	r3, 80d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd0>
            NRFX_ASSERT(0);
    8080:	f8df 9150 	ldr.w	r9, [pc, #336]	; 81d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4>
    8084:	f240 232e 	movw	r3, #558	; 0x22e
    8088:	464a      	mov	r2, r9
    808a:	4953      	ldr	r1, [pc, #332]	; (81d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d8>)
    808c:	4853      	ldr	r0, [pc, #332]	; (81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>)
    808e:	f006 fa8e 	bl	e5ae <assert_print>
    8092:	f240 212e 	movw	r1, #558	; 0x22e
    8096:	4648      	mov	r0, r9
    8098:	f006 fa82 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    809c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    80a0:	e017      	b.n	80d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd2>
            mask = P0_FEATURE_PINS_PRESENT;
    80a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    80a6:	e7df      	b.n	8068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>
    switch (port)
    80a8:	2300      	movs	r3, #0
    80aa:	e7dd      	b.n	8068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    80ac:	f8df a124 	ldr.w	sl, [pc, #292]	; 81d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4>
    80b0:	f240 2329 	movw	r3, #553	; 0x229
    80b4:	4652      	mov	r2, sl
    80b6:	494a      	ldr	r1, [pc, #296]	; (81e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e0>)
    80b8:	4848      	ldr	r0, [pc, #288]	; (81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>)
    80ba:	f006 fa78 	bl	e5ae <assert_print>
    80be:	f240 2129 	movw	r1, #553	; 0x229
    80c2:	4650      	mov	r0, sl
    80c4:	f006 fa6c 	bl	e5a0 <assert_post_action>
    80c8:	e7d4      	b.n	8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
        case 0: return NRF_P0;
    80ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    80ce:	e000      	b.n	80d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd2>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    80d0:	4a44      	ldr	r2, [pc, #272]	; (81e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    80d2:	2301      	movs	r3, #1
    80d4:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    80d8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    80dc:	e7b7      	b.n	804e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    80de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    80e2:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    80e6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    80ea:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    80ee:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    80f2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    80f6:	d144      	bne.n	8182 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x182>
    switch (port)
    80f8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    80fc:	d01f      	beq.n	813e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13e>
    80fe:	b10b      	cbz	r3, 8104 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x104>
            mask = P1_FEATURE_PINS_PRESENT;
    8100:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    8104:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8108:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    810a:	f012 0f01 	tst.w	r2, #1
    810e:	d019      	beq.n	8144 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x144>
    *p_pin = pin_number & 0x1F;
    8110:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8114:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8118:	d023      	beq.n	8162 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x162>
    811a:	bb2b      	cbnz	r3, 8168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>
            NRFX_ASSERT(0);
    811c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 81d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4>
    8120:	f240 232e 	movw	r3, #558	; 0x22e
    8124:	464a      	mov	r2, r9
    8126:	492c      	ldr	r1, [pc, #176]	; (81d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d8>)
    8128:	482c      	ldr	r0, [pc, #176]	; (81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>)
    812a:	f006 fa40 	bl	e5ae <assert_print>
    812e:	f240 212e 	movw	r1, #558	; 0x22e
    8132:	4648      	mov	r0, r9
    8134:	f006 fa34 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    8138:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    813c:	e015      	b.n	816a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    813e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8142:	e7df      	b.n	8104 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8144:	f8df a08c 	ldr.w	sl, [pc, #140]	; 81d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4>
    8148:	f240 2329 	movw	r3, #553	; 0x229
    814c:	4652      	mov	r2, sl
    814e:	4924      	ldr	r1, [pc, #144]	; (81e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e0>)
    8150:	4822      	ldr	r0, [pc, #136]	; (81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>)
    8152:	f006 fa2c 	bl	e5ae <assert_print>
    8156:	f240 2129 	movw	r1, #553	; 0x229
    815a:	4650      	mov	r0, sl
    815c:	f006 fa20 	bl	e5a0 <assert_post_action>
    8160:	e7d6      	b.n	8110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>
        case 0: return NRF_P0;
    8162:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8166:	e000      	b.n	816a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8168:	4a1e      	ldr	r2, [pc, #120]	; (81e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e4>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    816a:	2301      	movs	r3, #1
    816c:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    8170:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8174:	2201      	movs	r2, #1
    8176:	4611      	mov	r1, r2
    8178:	f855 0008 	ldr.w	r0, [r5, r8]
    817c:	f7ff fc4e 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8180:	e500      	b.n	7b84 <pinctrl_configure_pins+0xa8>
    switch (port)
    8182:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8186:	d01f      	beq.n	81c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c8>
    8188:	b30b      	cbz	r3, 81ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ce>
            mask = P1_FEATURE_PINS_PRESENT;
    818a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    818e:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8192:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8194:	f013 0f01 	tst.w	r3, #1
    8198:	d026      	beq.n	81e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e8>
    *p_pin = pin_number & 0x1F;
    819a:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    819e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    81a2:	d030      	beq.n	8206 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x206>
    81a4:	bb93      	cbnz	r3, 820c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20c>
            NRFX_ASSERT(0);
    81a6:	f8df 902c 	ldr.w	r9, [pc, #44]	; 81d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d4>
    81aa:	f240 232e 	movw	r3, #558	; 0x22e
    81ae:	464a      	mov	r2, r9
    81b0:	4909      	ldr	r1, [pc, #36]	; (81d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d8>)
    81b2:	480a      	ldr	r0, [pc, #40]	; (81dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1dc>)
    81b4:	f006 f9fb 	bl	e5ae <assert_print>
    81b8:	f240 212e 	movw	r1, #558	; 0x22e
    81bc:	4648      	mov	r0, r9
    81be:	f006 f9ef 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    81c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    81c6:	e022      	b.n	820e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20e>
            mask = P0_FEATURE_PINS_PRESENT;
    81c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    81cc:	e7df      	b.n	818e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18e>
    switch (port)
    81ce:	2300      	movs	r3, #0
    81d0:	e7dd      	b.n	818e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18e>
    81d2:	bf00      	nop
    81d4:	0001139c 	.word	0x0001139c
    81d8:	000107a0 	.word	0x000107a0
    81dc:	000100e4 	.word	0x000100e4
    81e0:	000113d0 	.word	0x000113d0
    81e4:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    81e8:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 83d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d8>
    81ec:	f240 2329 	movw	r3, #553	; 0x229
    81f0:	4652      	mov	r2, sl
    81f2:	497a      	ldr	r1, [pc, #488]	; (83dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3dc>)
    81f4:	487a      	ldr	r0, [pc, #488]	; (83e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e0>)
    81f6:	f006 f9da 	bl	e5ae <assert_print>
    81fa:	f240 2129 	movw	r1, #553	; 0x229
    81fe:	4650      	mov	r0, sl
    8200:	f006 f9ce 	bl	e5a0 <assert_post_action>
    8204:	e7c9      	b.n	819a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x19a>
        case 0: return NRF_P0;
    8206:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    820a:	e000      	b.n	820e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    820c:	4a75      	ldr	r2, [pc, #468]	; (83e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    820e:	2301      	movs	r3, #1
    8210:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    8214:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    8218:	e7ac      	b.n	8174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    821a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    821e:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    8222:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    8226:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    822a:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    822e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    8232:	d144      	bne.n	82be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2be>
    switch (port)
    8234:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8238:	d01f      	beq.n	827a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x27a>
    823a:	b10b      	cbz	r3, 8240 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x240>
            mask = P1_FEATURE_PINS_PRESENT;
    823c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    8240:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8244:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8246:	f012 0f01 	tst.w	r2, #1
    824a:	d019      	beq.n	8280 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x280>
    *p_pin = pin_number & 0x1F;
    824c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8250:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8254:	d023      	beq.n	829e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x29e>
    8256:	bb2b      	cbnz	r3, 82a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a4>
            NRFX_ASSERT(0);
    8258:	f8df 917c 	ldr.w	r9, [pc, #380]	; 83d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d8>
    825c:	f240 232e 	movw	r3, #558	; 0x22e
    8260:	464a      	mov	r2, r9
    8262:	4961      	ldr	r1, [pc, #388]	; (83e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e8>)
    8264:	485e      	ldr	r0, [pc, #376]	; (83e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e0>)
    8266:	f006 f9a2 	bl	e5ae <assert_print>
    826a:	f240 212e 	movw	r1, #558	; 0x22e
    826e:	4648      	mov	r0, r9
    8270:	f006 f996 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    8274:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8278:	e015      	b.n	82a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a6>
            mask = P0_FEATURE_PINS_PRESENT;
    827a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    827e:	e7df      	b.n	8240 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x240>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8280:	f8df a154 	ldr.w	sl, [pc, #340]	; 83d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d8>
    8284:	f240 2329 	movw	r3, #553	; 0x229
    8288:	4652      	mov	r2, sl
    828a:	4954      	ldr	r1, [pc, #336]	; (83dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3dc>)
    828c:	4854      	ldr	r0, [pc, #336]	; (83e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e0>)
    828e:	f006 f98e 	bl	e5ae <assert_print>
    8292:	f240 2129 	movw	r1, #553	; 0x229
    8296:	4650      	mov	r0, sl
    8298:	f006 f982 	bl	e5a0 <assert_post_action>
    829c:	e7d6      	b.n	824c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24c>
        case 0: return NRF_P0;
    829e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    82a2:	e000      	b.n	82a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    82a4:	4a4f      	ldr	r2, [pc, #316]	; (83e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    82a6:	2301      	movs	r3, #1
    82a8:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    82ac:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    82b0:	2201      	movs	r2, #1
    82b2:	4611      	mov	r1, r2
    82b4:	f855 0008 	ldr.w	r0, [r5, r8]
    82b8:	f7ff fbb0 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    82bc:	e462      	b.n	7b84 <pinctrl_configure_pins+0xa8>
    switch (port)
    82be:	ea5f 1359 	movs.w	r3, r9, lsr #5
    82c2:	d01f      	beq.n	8304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    82c4:	b30b      	cbz	r3, 830a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30a>
            mask = P1_FEATURE_PINS_PRESENT;
    82c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    82ca:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    82ce:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    82d0:	f013 0f01 	tst.w	r3, #1
    82d4:	d01b      	beq.n	830e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30e>
    *p_pin = pin_number & 0x1F;
    82d6:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    82da:	ea5f 1359 	movs.w	r3, r9, lsr #5
    82de:	d025      	beq.n	832c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32c>
    82e0:	bb3b      	cbnz	r3, 8332 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x332>
            NRFX_ASSERT(0);
    82e2:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 83d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d8>
    82e6:	f240 232e 	movw	r3, #558	; 0x22e
    82ea:	464a      	mov	r2, r9
    82ec:	493e      	ldr	r1, [pc, #248]	; (83e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e8>)
    82ee:	483c      	ldr	r0, [pc, #240]	; (83e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e0>)
    82f0:	f006 f95d 	bl	e5ae <assert_print>
    82f4:	f240 212e 	movw	r1, #558	; 0x22e
    82f8:	4648      	mov	r0, r9
    82fa:	f006 f951 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    82fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8302:	e017      	b.n	8334 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x334>
            mask = P0_FEATURE_PINS_PRESENT;
    8304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8308:	e7df      	b.n	82ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ca>
    switch (port)
    830a:	2300      	movs	r3, #0
    830c:	e7dd      	b.n	82ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ca>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    830e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 83d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d8>
    8312:	f240 2329 	movw	r3, #553	; 0x229
    8316:	4652      	mov	r2, sl
    8318:	4930      	ldr	r1, [pc, #192]	; (83dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3dc>)
    831a:	4831      	ldr	r0, [pc, #196]	; (83e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e0>)
    831c:	f006 f947 	bl	e5ae <assert_print>
    8320:	f240 2129 	movw	r1, #553	; 0x229
    8324:	4650      	mov	r0, sl
    8326:	f006 f93b 	bl	e5a0 <assert_post_action>
    832a:	e7d4      	b.n	82d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2d6>
        case 0: return NRF_P0;
    832c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8330:	e000      	b.n	8334 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x334>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8332:	4a2c      	ldr	r2, [pc, #176]	; (83e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8334:	2301      	movs	r3, #1
    8336:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    833a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    833e:	e7b7      	b.n	82b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b0>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    8340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8344:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8348:	2201      	movs	r2, #1
    834a:	2100      	movs	r1, #0
    834c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8350:	f7ff fb64 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8354:	e416      	b.n	7b84 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    8356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    835a:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    835e:	2201      	movs	r2, #1
    8360:	2100      	movs	r1, #0
    8362:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8366:	f7ff fb59 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    836a:	e40b      	b.n	7b84 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    836c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8370:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8374:	2201      	movs	r2, #1
    8376:	2100      	movs	r1, #0
    8378:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    837c:	f7ff fb4e 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8380:	e400      	b.n	7b84 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    8382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8386:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    838a:	2201      	movs	r2, #1
    838c:	2100      	movs	r1, #0
    838e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8392:	f7ff fb43 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8396:	f7ff bbf5 	b.w	7b84 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    839a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    839e:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    83a2:	2201      	movs	r2, #1
    83a4:	2100      	movs	r1, #0
    83a6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    83aa:	f7ff fb37 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    83ae:	f7ff bbe9 	b.w	7b84 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    83b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    83b6:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    83ba:	2201      	movs	r2, #1
    83bc:	2100      	movs	r1, #0
    83be:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    83c2:	f7ff fb2b 	bl	7a1c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    83c6:	f7ff bbdd 	b.w	7b84 <pinctrl_configure_pins+0xa8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    83ca:	2000      	movs	r0, #0
    83cc:	e001      	b.n	83d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d2>
		switch (NRF_GET_FUN(pins[i])) {
    83ce:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    83d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    83d6:	bf00      	nop
    83d8:	0001139c 	.word	0x0001139c
    83dc:	000113d0 	.word	0x000113d0
    83e0:	000100e4 	.word	0x000100e4
    83e4:	50000300 	.word	0x50000300
    83e8:	000107a0 	.word	0x000107a0

000083ec <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    83ec:	b510      	push	{r4, lr}
    83ee:	b084      	sub	sp, #16
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    83f0:	f7fc fc0a 	bl	4c08 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    83f4:	4b06      	ldr	r3, [pc, #24]	; (8410 <k_sys_fatal_error_handler+0x24>)
    83f6:	9302      	str	r3, [sp, #8]
    83f8:	2400      	movs	r4, #0
    83fa:	9401      	str	r4, [sp, #4]
    83fc:	9400      	str	r4, [sp, #0]
    83fe:	4623      	mov	r3, r4
    8400:	2201      	movs	r2, #1
    8402:	4904      	ldr	r1, [pc, #16]	; (8414 <k_sys_fatal_error_handler+0x28>)
    8404:	4620      	mov	r0, r4
    8406:	f006 fdf4 	bl	eff2 <z_log_msg2_runtime_create>
		sys_arch_reboot(0);
    840a:	4620      	mov	r0, r4
    840c:	f7fe fb1e 	bl	6a4c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    8410:	000114fc 	.word	0x000114fc
    8414:	0000fc98 	.word	0x0000fc98

00008418 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8418:	4b02      	ldr	r3, [pc, #8]	; (8424 <nvmc_wait+0xc>)
    841a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    841e:	2b00      	cmp	r3, #0
    8420:	d0fa      	beq.n	8418 <nvmc_wait>
}
    8422:	4770      	bx	lr
    8424:	4001e000 	.word	0x4001e000

00008428 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    8428:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    842a:	4b03      	ldr	r3, [pc, #12]	; (8438 <nvmc_config+0x10>)
    842c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    8430:	f7ff fff2 	bl	8418 <nvmc_wait>
}
    8434:	bd08      	pop	{r3, pc}
    8436:	bf00      	nop
    8438:	4001e000 	.word	0x4001e000

0000843c <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    843c:	4b01      	ldr	r3, [pc, #4]	; (8444 <SystemCoreClockUpdate+0x8>)
    843e:	4a02      	ldr	r2, [pc, #8]	; (8448 <SystemCoreClockUpdate+0xc>)
    8440:	601a      	str	r2, [r3, #0]
}
    8442:	4770      	bx	lr
    8444:	2000407c 	.word	0x2000407c
    8448:	03d09000 	.word	0x03d09000

0000844c <SystemInit>:

void SystemInit(void)
{
    844c:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    844e:	f006 fded 	bl	f02c <nrf52_errata_36>
    8452:	b140      	cbz	r0, 8466 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    8454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8458:	2200      	movs	r2, #0
    845a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    845e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    8462:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    8466:	f006 fdeb 	bl	f040 <nrf52_errata_66>
    846a:	2800      	cmp	r0, #0
    846c:	d046      	beq.n	84fc <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    846e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8472:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    8476:	4b59      	ldr	r3, [pc, #356]	; (85dc <SystemInit+0x190>)
    8478:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    847c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    8480:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    8484:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    8488:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    848c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    8490:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    8494:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    8498:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    849c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84a0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84a4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84a8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84ac:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84b0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84b4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84b8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84bc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84c0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84c4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    84c8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    84cc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    84d0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    84d4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    84d8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    84dc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    84e0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    84e4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    84e8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    84ec:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    84f0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    84f4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    84f8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    84fc:	f006 fdaa 	bl	f054 <nrf52_errata_98>
    8500:	b118      	cbz	r0, 850a <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    8502:	4b37      	ldr	r3, [pc, #220]	; (85e0 <SystemInit+0x194>)
    8504:	4a37      	ldr	r2, [pc, #220]	; (85e4 <SystemInit+0x198>)
    8506:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    850a:	f006 fdb6 	bl	f07a <nrf52_errata_103>
    850e:	b118      	cbz	r0, 8518 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    8510:	4b35      	ldr	r3, [pc, #212]	; (85e8 <SystemInit+0x19c>)
    8512:	22fb      	movs	r2, #251	; 0xfb
    8514:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    8518:	f006 fdc2 	bl	f0a0 <nrf52_errata_115>
    851c:	b170      	cbz	r0, 853c <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    851e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    8522:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    8526:	f023 030f 	bic.w	r3, r3, #15
    852a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    852e:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    8532:	f002 020f 	and.w	r2, r2, #15
    8536:	4313      	orrs	r3, r2
    8538:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    853c:	f006 fdc3 	bl	f0c6 <nrf52_errata_120>
    8540:	b120      	cbz	r0, 854c <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    8542:	4b2a      	ldr	r3, [pc, #168]	; (85ec <SystemInit+0x1a0>)
    8544:	f44f 7200 	mov.w	r2, #512	; 0x200
    8548:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    854c:	f006 fdce 	bl	f0ec <nrf52_errata_136>
    8550:	b160      	cbz	r0, 856c <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    8552:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8556:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    855a:	f013 0f01 	tst.w	r3, #1
    855e:	d005      	beq.n	856c <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    8560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8564:	f06f 0201 	mvn.w	r2, #1
    8568:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    856c:	f006 fdc8 	bl	f100 <nrf52_configuration_249>
    8570:	b138      	cbz	r0, 8582 <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    8572:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8576:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    857a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    857e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8582:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8586:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    858a:	2b00      	cmp	r3, #0
    858c:	db08      	blt.n	85a0 <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    858e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8592:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8596:	2b00      	cmp	r3, #0
    8598:	db02      	blt.n	85a0 <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    859a:	f7ff ff4f 	bl	843c <SystemCoreClockUpdate>
}
    859e:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    85a0:	2001      	movs	r0, #1
    85a2:	f7ff ff41 	bl	8428 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    85a6:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    85aa:	2512      	movs	r5, #18
    85ac:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    85b0:	f7ff ff32 	bl	8418 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    85b4:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    85b8:	f7ff ff2e 	bl	8418 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    85bc:	2000      	movs	r0, #0
    85be:	f7ff ff33 	bl	8428 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    85c2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85c6:	490a      	ldr	r1, [pc, #40]	; (85f0 <SystemInit+0x1a4>)
    85c8:	68ca      	ldr	r2, [r1, #12]
    85ca:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    85ce:	4b09      	ldr	r3, [pc, #36]	; (85f4 <SystemInit+0x1a8>)
    85d0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85d2:	60cb      	str	r3, [r1, #12]
    85d4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85d8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    85da:	e7fd      	b.n	85d8 <SystemInit+0x18c>
    85dc:	4000c000 	.word	0x4000c000
    85e0:	40005000 	.word	0x40005000
    85e4:	00038148 	.word	0x00038148
    85e8:	4000f000 	.word	0x4000f000
    85ec:	40029000 	.word	0x40029000
    85f0:	e000ed00 	.word	0xe000ed00
    85f4:	05fa0004 	.word	0x05fa0004

000085f8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    85f8:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    85fa:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    85fc:	fab4 f384 	clz	r3, r4
    8600:	f1c3 031f 	rsb	r3, r3, #31
    8604:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    8608:	2b00      	cmp	r3, #0
    860a:	db16      	blt.n	863a <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    860c:	2201      	movs	r2, #1
    860e:	fa02 f303 	lsl.w	r3, r2, r3
    8612:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8616:	f3bf 8f5b 	dmb	ish
    861a:	e850 2f00 	ldrex	r2, [r0]
    861e:	42a2      	cmp	r2, r4
    8620:	d104      	bne.n	862c <nrfx_flag32_alloc+0x34>
    8622:	e840 3e00 	strex	lr, r3, [r0]
    8626:	f1be 0f00 	cmp.w	lr, #0
    862a:	d1f6      	bne.n	861a <nrfx_flag32_alloc+0x22>
    862c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    8630:	d1e3      	bne.n	85fa <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    8632:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    8636:	4802      	ldr	r0, [pc, #8]	; (8640 <nrfx_flag32_alloc+0x48>)
}
    8638:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    863a:	4802      	ldr	r0, [pc, #8]	; (8644 <nrfx_flag32_alloc+0x4c>)
    863c:	e7fc      	b.n	8638 <nrfx_flag32_alloc+0x40>
    863e:	bf00      	nop
    8640:	0bad0000 	.word	0x0bad0000
    8644:	0bad0002 	.word	0x0bad0002

00008648 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    8648:	6803      	ldr	r3, [r0, #0]
    864a:	40cb      	lsrs	r3, r1
    864c:	f013 0f01 	tst.w	r3, #1
    8650:	d115      	bne.n	867e <nrfx_flag32_free+0x36>
{
    8652:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    8654:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    8656:	2301      	movs	r3, #1
    8658:	408b      	lsls	r3, r1
    865a:	4313      	orrs	r3, r2
    865c:	f3bf 8f5b 	dmb	ish
    8660:	e850 cf00 	ldrex	ip, [r0]
    8664:	4594      	cmp	ip, r2
    8666:	d104      	bne.n	8672 <nrfx_flag32_free+0x2a>
    8668:	e840 3e00 	strex	lr, r3, [r0]
    866c:	f1be 0f00 	cmp.w	lr, #0
    8670:	d1f6      	bne.n	8660 <nrfx_flag32_free+0x18>
    8672:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    8676:	d1ed      	bne.n	8654 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    8678:	4802      	ldr	r0, [pc, #8]	; (8684 <nrfx_flag32_free+0x3c>)
}
    867a:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    867e:	4802      	ldr	r0, [pc, #8]	; (8688 <nrfx_flag32_free+0x40>)
}
    8680:	4770      	bx	lr
    8682:	bf00      	nop
    8684:	0bad0000 	.word	0x0bad0000
    8688:	0bad0004 	.word	0x0bad0004

0000868c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    868c:	b5f0      	push	{r4, r5, r6, r7, lr}
    868e:	b083      	sub	sp, #12
    switch (domain)
    8690:	4605      	mov	r5, r0
    8692:	b168      	cbz	r0, 86b0 <clock_stop+0x24>
    8694:	2801      	cmp	r0, #1
    8696:	d020      	beq.n	86da <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    8698:	4c3d      	ldr	r4, [pc, #244]	; (8790 <clock_stop+0x104>)
    869a:	23d8      	movs	r3, #216	; 0xd8
    869c:	4622      	mov	r2, r4
    869e:	493d      	ldr	r1, [pc, #244]	; (8794 <clock_stop+0x108>)
    86a0:	483d      	ldr	r0, [pc, #244]	; (8798 <clock_stop+0x10c>)
    86a2:	f005 ff84 	bl	e5ae <assert_print>
    86a6:	21d8      	movs	r1, #216	; 0xd8
    86a8:	4620      	mov	r0, r4
    86aa:	f005 ff79 	bl	e5a0 <assert_post_action>
            return;
    86ae:	e068      	b.n	8782 <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    86b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    86b4:	2202      	movs	r2, #2
    86b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    86ba:	2200      	movs	r2, #0
    86bc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    86c0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    86c4:	2201      	movs	r2, #1
    86c6:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    86c8:	2301      	movs	r3, #1
    86ca:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    86ce:	429d      	cmp	r5, r3
    86d0:	d00f      	beq.n	86f2 <clock_stop+0x66>
    86d2:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    86d4:	f242 7410 	movw	r4, #10000	; 0x2710
    86d8:	e029      	b.n	872e <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    86da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    86de:	2201      	movs	r2, #1
    86e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    86e4:	2100      	movs	r1, #0
    86e6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    86ea:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    86ee:	605a      	str	r2, [r3, #4]
}
    86f0:	e7ea      	b.n	86c8 <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    86f2:	f10d 0607 	add.w	r6, sp, #7
    86f6:	e7ed      	b.n	86d4 <clock_stop+0x48>
            if (p_clk_src != NULL)
    86f8:	b136      	cbz	r6, 8708 <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    86fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    86fe:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    8702:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    8706:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8708:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    870c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    8710:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8714:	d12f      	bne.n	8776 <clock_stop+0xea>
    return false;
    8716:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    8718:	b38b      	cbz	r3, 877e <clock_stop+0xf2>
    871a:	b11e      	cbz	r6, 8724 <clock_stop+0x98>
    871c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8720:	2b01      	cmp	r3, #1
    8722:	d12c      	bne.n	877e <clock_stop+0xf2>
    8724:	2001      	movs	r0, #1
    8726:	f006 fcfe 	bl	f126 <nrfx_busy_wait>
    872a:	3c01      	subs	r4, #1
    872c:	d027      	beq.n	877e <clock_stop+0xf2>
    switch (domain)
    872e:	2d00      	cmp	r5, #0
    8730:	d0e2      	beq.n	86f8 <clock_stop+0x6c>
    8732:	2d01      	cmp	r5, #1
    8734:	d00e      	beq.n	8754 <clock_stop+0xc8>
            NRFX_ASSERT(0);
    8736:	4f19      	ldr	r7, [pc, #100]	; (879c <clock_stop+0x110>)
    8738:	f44f 734f 	mov.w	r3, #828	; 0x33c
    873c:	463a      	mov	r2, r7
    873e:	4915      	ldr	r1, [pc, #84]	; (8794 <clock_stop+0x108>)
    8740:	4815      	ldr	r0, [pc, #84]	; (8798 <clock_stop+0x10c>)
    8742:	f005 ff34 	bl	e5ae <assert_print>
    8746:	f44f 714f 	mov.w	r1, #828	; 0x33c
    874a:	4638      	mov	r0, r7
    874c:	f005 ff28 	bl	e5a0 <assert_post_action>
            return false;
    8750:	2300      	movs	r3, #0
    8752:	e7e1      	b.n	8718 <clock_stop+0x8c>
            if (p_clk_src != NULL)
    8754:	b136      	cbz	r6, 8764 <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    8756:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    875a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    875e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    8762:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8768:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    876c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8770:	d103      	bne.n	877a <clock_stop+0xee>
    return false;
    8772:	2300      	movs	r3, #0
    8774:	e7d0      	b.n	8718 <clock_stop+0x8c>
                return true;
    8776:	2301      	movs	r3, #1
    8778:	e7ce      	b.n	8718 <clock_stop+0x8c>
                return true;
    877a:	2301      	movs	r3, #1
    877c:	e7cc      	b.n	8718 <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    877e:	2d01      	cmp	r5, #1
    8780:	d001      	beq.n	8786 <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    8782:	b003      	add	sp, #12
    8784:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    8786:	4b06      	ldr	r3, [pc, #24]	; (87a0 <clock_stop+0x114>)
    8788:	2200      	movs	r2, #0
    878a:	715a      	strb	r2, [r3, #5]
    878c:	e7f9      	b.n	8782 <clock_stop+0xf6>
    878e:	bf00      	nop
    8790:	0001151c 	.word	0x0001151c
    8794:	000107a0 	.word	0x000107a0
    8798:	000100e4 	.word	0x000100e4
    879c:	0001155c 	.word	0x0001155c
    87a0:	20004e64 	.word	0x20004e64

000087a4 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    87a4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    87a6:	4604      	mov	r4, r0
    87a8:	b150      	cbz	r0, 87c0 <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    87aa:	4b0d      	ldr	r3, [pc, #52]	; (87e0 <nrfx_clock_init+0x3c>)
    87ac:	791b      	ldrb	r3, [r3, #4]
    87ae:	b9ab      	cbnz	r3, 87dc <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    87b0:	4b0b      	ldr	r3, [pc, #44]	; (87e0 <nrfx_clock_init+0x3c>)
    87b2:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    87b4:	2201      	movs	r2, #1
    87b6:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    87b8:	2200      	movs	r2, #0
    87ba:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    87bc:	4809      	ldr	r0, [pc, #36]	; (87e4 <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    87be:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    87c0:	4d09      	ldr	r5, [pc, #36]	; (87e8 <nrfx_clock_init+0x44>)
    87c2:	f240 1315 	movw	r3, #277	; 0x115
    87c6:	462a      	mov	r2, r5
    87c8:	4908      	ldr	r1, [pc, #32]	; (87ec <nrfx_clock_init+0x48>)
    87ca:	4809      	ldr	r0, [pc, #36]	; (87f0 <nrfx_clock_init+0x4c>)
    87cc:	f005 feef 	bl	e5ae <assert_print>
    87d0:	f240 1115 	movw	r1, #277	; 0x115
    87d4:	4628      	mov	r0, r5
    87d6:	f005 fee3 	bl	e5a0 <assert_post_action>
    87da:	e7e6      	b.n	87aa <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    87dc:	4805      	ldr	r0, [pc, #20]	; (87f4 <nrfx_clock_init+0x50>)
    return err_code;
    87de:	e7ee      	b.n	87be <nrfx_clock_init+0x1a>
    87e0:	20004e64 	.word	0x20004e64
    87e4:	0bad0000 	.word	0x0bad0000
    87e8:	0001151c 	.word	0x0001151c
    87ec:	00011590 	.word	0x00011590
    87f0:	000100e4 	.word	0x000100e4
    87f4:	0bad000c 	.word	0x0bad000c

000087f8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    87f8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    87fa:	4b0f      	ldr	r3, [pc, #60]	; (8838 <nrfx_clock_enable+0x40>)
    87fc:	791b      	ldrb	r3, [r3, #4]
    87fe:	b153      	cbz	r3, 8816 <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8800:	2000      	movs	r0, #0
    8802:	f7fd f941 	bl	5a88 <arch_irq_is_enabled>
    8806:	b1a0      	cbz	r0, 8832 <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    8808:	f006 fc91 	bl	f12e <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    880c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8810:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    8814:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8816:	4c09      	ldr	r4, [pc, #36]	; (883c <nrfx_clock_enable+0x44>)
    8818:	f44f 7397 	mov.w	r3, #302	; 0x12e
    881c:	4622      	mov	r2, r4
    881e:	4908      	ldr	r1, [pc, #32]	; (8840 <nrfx_clock_enable+0x48>)
    8820:	4808      	ldr	r0, [pc, #32]	; (8844 <nrfx_clock_enable+0x4c>)
    8822:	f005 fec4 	bl	e5ae <assert_print>
    8826:	f44f 7197 	mov.w	r1, #302	; 0x12e
    882a:	4620      	mov	r0, r4
    882c:	f005 feb8 	bl	e5a0 <assert_post_action>
    8830:	e7e6      	b.n	8800 <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8832:	f7fd f91b 	bl	5a6c <arch_irq_enable>
    8836:	e7e7      	b.n	8808 <nrfx_clock_enable+0x10>
    8838:	20004e64 	.word	0x20004e64
    883c:	0001151c 	.word	0x0001151c
    8840:	000115a0 	.word	0x000115a0
    8844:	000100e4 	.word	0x000100e4

00008848 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    8848:	b530      	push	{r4, r5, lr}
    884a:	b083      	sub	sp, #12
    884c:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    884e:	4b34      	ldr	r3, [pc, #208]	; (8920 <nrfx_clock_start+0xd8>)
    8850:	791b      	ldrb	r3, [r3, #4]
    8852:	b183      	cbz	r3, 8876 <nrfx_clock_start+0x2e>
    switch (domain)
    8854:	b1ec      	cbz	r4, 8892 <nrfx_clock_start+0x4a>
    8856:	2c01      	cmp	r4, #1
    8858:	d055      	beq.n	8906 <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    885a:	4c32      	ldr	r4, [pc, #200]	; (8924 <nrfx_clock_start+0xdc>)
    885c:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    8860:	4622      	mov	r2, r4
    8862:	4931      	ldr	r1, [pc, #196]	; (8928 <nrfx_clock_start+0xe0>)
    8864:	4831      	ldr	r0, [pc, #196]	; (892c <nrfx_clock_start+0xe4>)
    8866:	f005 fea2 	bl	e5ae <assert_print>
    886a:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    886e:	4620      	mov	r0, r4
    8870:	f005 fe96 	bl	e5a0 <assert_post_action>
            break;
    }
}
    8874:	e052      	b.n	891c <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8876:	4d2b      	ldr	r5, [pc, #172]	; (8924 <nrfx_clock_start+0xdc>)
    8878:	f44f 73b4 	mov.w	r3, #360	; 0x168
    887c:	462a      	mov	r2, r5
    887e:	492c      	ldr	r1, [pc, #176]	; (8930 <nrfx_clock_start+0xe8>)
    8880:	482a      	ldr	r0, [pc, #168]	; (892c <nrfx_clock_start+0xe4>)
    8882:	f005 fe94 	bl	e5ae <assert_print>
    8886:	f44f 71b4 	mov.w	r1, #360	; 0x168
    888a:	4628      	mov	r0, r5
    888c:	f005 fe88 	bl	e5a0 <assert_post_action>
    8890:	e7e0      	b.n	8854 <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8892:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8896:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    889a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    889e:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    88a0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    88a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    88a8:	d117      	bne.n	88da <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    88aa:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    88ae:	f013 0f01 	tst.w	r3, #1
    88b2:	d116      	bne.n	88e2 <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    88b4:	f006 fc3b 	bl	f12e <clock_initial_lfclksrc_get>
    88b8:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    88ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    88be:	9a01      	ldr	r2, [sp, #4]
    88c0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    88c4:	2200      	movs	r2, #0
    88c6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    88ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    88ce:	2202      	movs	r2, #2
    88d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    88d4:	2201      	movs	r2, #1
    88d6:	609a      	str	r2, [r3, #8]
}
    88d8:	e020      	b.n	891c <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    88da:	a801      	add	r0, sp, #4
    88dc:	f006 fc29 	bl	f132 <clock_lfclksrc_tweak>
    88e0:	e7eb      	b.n	88ba <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    88e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    88e6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    88ea:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    88ee:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    88f0:	a801      	add	r0, sp, #4
    88f2:	f006 fc1e 	bl	f132 <clock_lfclksrc_tweak>
    88f6:	2800      	cmp	r0, #0
    88f8:	d0df      	beq.n	88ba <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    88fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    88fe:	2202      	movs	r2, #2
    8900:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    8904:	e00a      	b.n	891c <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    890a:	2200      	movs	r2, #0
    890c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8910:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    8914:	2201      	movs	r2, #1
    8916:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    891a:	601a      	str	r2, [r3, #0]
}
    891c:	b003      	add	sp, #12
    891e:	bd30      	pop	{r4, r5, pc}
    8920:	20004e64 	.word	0x20004e64
    8924:	0001151c 	.word	0x0001151c
    8928:	000107a0 	.word	0x000107a0
    892c:	000100e4 	.word	0x000100e4
    8930:	000115a0 	.word	0x000115a0

00008934 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    8934:	b538      	push	{r3, r4, r5, lr}
    8936:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8938:	4b0a      	ldr	r3, [pc, #40]	; (8964 <nrfx_clock_stop+0x30>)
    893a:	791b      	ldrb	r3, [r3, #4]
    893c:	b11b      	cbz	r3, 8946 <nrfx_clock_stop+0x12>
    clock_stop(domain);
    893e:	4620      	mov	r0, r4
    8940:	f7ff fea4 	bl	868c <clock_stop>
}
    8944:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8946:	4d08      	ldr	r5, [pc, #32]	; (8968 <nrfx_clock_stop+0x34>)
    8948:	f240 13ad 	movw	r3, #429	; 0x1ad
    894c:	462a      	mov	r2, r5
    894e:	4907      	ldr	r1, [pc, #28]	; (896c <nrfx_clock_stop+0x38>)
    8950:	4807      	ldr	r0, [pc, #28]	; (8970 <nrfx_clock_stop+0x3c>)
    8952:	f005 fe2c 	bl	e5ae <assert_print>
    8956:	f240 11ad 	movw	r1, #429	; 0x1ad
    895a:	4628      	mov	r0, r5
    895c:	f005 fe20 	bl	e5a0 <assert_post_action>
    8960:	e7ed      	b.n	893e <nrfx_clock_stop+0xa>
    8962:	bf00      	nop
    8964:	20004e64 	.word	0x20004e64
    8968:	0001151c 	.word	0x0001151c
    896c:	000115a0 	.word	0x000115a0
    8970:	000100e4 	.word	0x000100e4

00008974 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    8974:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    8976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    897a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    897e:	b18b      	cbz	r3, 89a4 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8980:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8984:	2200      	movs	r2, #0
    8986:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    898a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    898e:	2201      	movs	r2, #1
    8990:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    8994:	4b15      	ldr	r3, [pc, #84]	; (89ec <nrfx_power_clock_irq_handler+0x78>)
    8996:	795b      	ldrb	r3, [r3, #5]
    8998:	b923      	cbnz	r3, 89a4 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    899a:	4b14      	ldr	r3, [pc, #80]	; (89ec <nrfx_power_clock_irq_handler+0x78>)
    899c:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    899e:	681b      	ldr	r3, [r3, #0]
    89a0:	2000      	movs	r0, #0
    89a2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    89a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    89a8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    89ac:	b19b      	cbz	r3, 89d6 <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    89ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    89b2:	2200      	movs	r2, #0
    89b4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    89b8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    89bc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    89c0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    89c4:	f012 0f03 	tst.w	r2, #3
    89c8:	d106      	bne.n	89d8 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    89ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    89ce:	2201      	movs	r2, #1
    89d0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    89d4:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    89d6:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    89d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    89dc:	2202      	movs	r2, #2
    89de:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    89e2:	4b02      	ldr	r3, [pc, #8]	; (89ec <nrfx_power_clock_irq_handler+0x78>)
    89e4:	681b      	ldr	r3, [r3, #0]
    89e6:	2001      	movs	r0, #1
    89e8:	4798      	blx	r3
}
    89ea:	e7f4      	b.n	89d6 <nrfx_power_clock_irq_handler+0x62>
    89ec:	20004e64 	.word	0x20004e64

000089f0 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    89f0:	3008      	adds	r0, #8
    89f2:	4b03      	ldr	r3, [pc, #12]	; (8a00 <pin_in_use+0x10>)
    89f4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    89f8:	f000 0001 	and.w	r0, r0, #1
    89fc:	4770      	bx	lr
    89fe:	bf00      	nop
    8a00:	20004080 	.word	0x20004080

00008a04 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    8a04:	3008      	adds	r0, #8
    8a06:	4b03      	ldr	r3, [pc, #12]	; (8a14 <pin_in_use_by_te+0x10>)
    8a08:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8a0c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    8a10:	4770      	bx	lr
    8a12:	bf00      	nop
    8a14:	20004080 	.word	0x20004080

00008a18 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    8a18:	3008      	adds	r0, #8
    8a1a:	4b04      	ldr	r3, [pc, #16]	; (8a2c <pin_has_trigger+0x14>)
    8a1c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8a20:	f010 001c 	ands.w	r0, r0, #28
    8a24:	bf18      	it	ne
    8a26:	2001      	movne	r0, #1
    8a28:	4770      	bx	lr
    8a2a:	bf00      	nop
    8a2c:	20004080 	.word	0x20004080

00008a30 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8a30:	3008      	adds	r0, #8
    8a32:	4b03      	ldr	r3, [pc, #12]	; (8a40 <pin_is_output+0x10>)
    8a34:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8a38:	f3c0 0040 	ubfx	r0, r0, #1, #1
    8a3c:	4770      	bx	lr
    8a3e:	bf00      	nop
    8a40:	20004080 	.word	0x20004080

00008a44 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8a44:	3008      	adds	r0, #8
    8a46:	4b02      	ldr	r3, [pc, #8]	; (8a50 <pin_te_get+0xc>)
    8a48:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    8a4c:	0b40      	lsrs	r0, r0, #13
    8a4e:	4770      	bx	lr
    8a50:	20004080 	.word	0x20004080

00008a54 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    8a54:	2200      	movs	r2, #0
    8a56:	e004      	b.n	8a62 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    8a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8a5c:	4283      	cmp	r3, r0
    8a5e:	d00f      	beq.n	8a80 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    8a60:	3201      	adds	r2, #1
    8a62:	2a2f      	cmp	r2, #47	; 0x2f
    8a64:	d80a      	bhi.n	8a7c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    8a66:	f102 0308 	add.w	r3, r2, #8
    8a6a:	4906      	ldr	r1, [pc, #24]	; (8a84 <handler_in_use+0x30>)
    8a6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    8a70:	f413 7f80 	tst.w	r3, #256	; 0x100
    8a74:	d0f0      	beq.n	8a58 <handler_in_use+0x4>
    8a76:	f3c3 2343 	ubfx	r3, r3, #9, #4
    8a7a:	e7ef      	b.n	8a5c <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    8a7c:	2000      	movs	r0, #0
    8a7e:	4770      	bx	lr
            return true;
    8a80:	2001      	movs	r0, #1
}
    8a82:	4770      	bx	lr
    8a84:	20004080 	.word	0x20004080

00008a88 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    8a88:	2300      	movs	r3, #0
    8a8a:	b113      	cbz	r3, 8a92 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    8a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8a90:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    8a92:	4a07      	ldr	r2, [pc, #28]	; (8ab0 <find_handler+0x28>)
    8a94:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    8a98:	4282      	cmp	r2, r0
    8a9a:	d001      	beq.n	8aa0 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    8a9c:	3301      	adds	r3, #1
    8a9e:	e7f4      	b.n	8a8a <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    8aa0:	4a03      	ldr	r2, [pc, #12]	; (8ab0 <find_handler+0x28>)
    8aa2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    8aa6:	6852      	ldr	r2, [r2, #4]
    8aa8:	428a      	cmp	r2, r1
    8aaa:	d1f7      	bne.n	8a9c <find_handler+0x14>
            return i;
    8aac:	4618      	mov	r0, r3
    8aae:	4770      	bx	lr
    8ab0:	20004080 	.word	0x20004080

00008ab4 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8ab4:	3008      	adds	r0, #8
    8ab6:	4b06      	ldr	r3, [pc, #24]	; (8ad0 <channel_handler_get+0x1c>)
    8ab8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    8abc:	f410 7f80 	tst.w	r0, #256	; 0x100
    8ac0:	d004      	beq.n	8acc <channel_handler_get+0x18>
    8ac2:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    8ac6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    8aca:	4770      	bx	lr
        return NULL;
    8acc:	2000      	movs	r0, #0
}
    8ace:	4770      	bx	lr
    8ad0:	20004080 	.word	0x20004080

00008ad4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    8ad4:	b570      	push	{r4, r5, r6, lr}
    8ad6:	4604      	mov	r4, r0
    8ad8:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    8ada:	f7ff ffeb 	bl	8ab4 <channel_handler_get>

    if (handler)
    8ade:	b120      	cbz	r0, 8aea <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    8ae0:	6806      	ldr	r6, [r0, #0]
    8ae2:	6842      	ldr	r2, [r0, #4]
    8ae4:	4629      	mov	r1, r5
    8ae6:	4620      	mov	r0, r4
    8ae8:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    8aea:	4b04      	ldr	r3, [pc, #16]	; (8afc <call_handler+0x28>)
    8aec:	689b      	ldr	r3, [r3, #8]
    8aee:	b123      	cbz	r3, 8afa <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    8af0:	4a02      	ldr	r2, [pc, #8]	; (8afc <call_handler+0x28>)
    8af2:	68d2      	ldr	r2, [r2, #12]
    8af4:	4629      	mov	r1, r5
    8af6:	4620      	mov	r0, r4
    8af8:	4798      	blx	r3
    }
}
    8afa:	bd70      	pop	{r4, r5, r6, pc}
    8afc:	20004080 	.word	0x20004080

00008b00 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8b00:	f100 0208 	add.w	r2, r0, #8
    8b04:	4b16      	ldr	r3, [pc, #88]	; (8b60 <release_handler+0x60>)
    8b06:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    8b0a:	f413 7f80 	tst.w	r3, #256	; 0x100
    8b0e:	d026      	beq.n	8b5e <release_handler+0x5e>
{
    8b10:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    8b12:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    8b16:	4610      	mov	r0, r2
    8b18:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    8b1c:	4a10      	ldr	r2, [pc, #64]	; (8b60 <release_handler+0x60>)
    8b1e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    8b22:	4620      	mov	r0, r4
    8b24:	f7ff ff96 	bl	8a54 <handler_in_use>
    8b28:	b100      	cbz	r0, 8b2c <release_handler+0x2c>
}
    8b2a:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    8b2c:	480c      	ldr	r0, [pc, #48]	; (8b60 <release_handler+0x60>)
    8b2e:	2300      	movs	r3, #0
    8b30:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    8b34:	4621      	mov	r1, r4
    8b36:	3074      	adds	r0, #116	; 0x74
    8b38:	f7ff fd86 	bl	8648 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    8b3c:	4b09      	ldr	r3, [pc, #36]	; (8b64 <release_handler+0x64>)
    8b3e:	4298      	cmp	r0, r3
    8b40:	d0f3      	beq.n	8b2a <release_handler+0x2a>
    8b42:	4c09      	ldr	r4, [pc, #36]	; (8b68 <release_handler+0x68>)
    8b44:	f44f 7399 	mov.w	r3, #306	; 0x132
    8b48:	4622      	mov	r2, r4
    8b4a:	4908      	ldr	r1, [pc, #32]	; (8b6c <release_handler+0x6c>)
    8b4c:	4808      	ldr	r0, [pc, #32]	; (8b70 <release_handler+0x70>)
    8b4e:	f005 fd2e 	bl	e5ae <assert_print>
    8b52:	f44f 7199 	mov.w	r1, #306	; 0x132
    8b56:	4620      	mov	r0, r4
    8b58:	f005 fd22 	bl	e5a0 <assert_post_action>
    8b5c:	e7e5      	b.n	8b2a <release_handler+0x2a>
    8b5e:	4770      	bx	lr
    8b60:	20004080 	.word	0x20004080
    8b64:	0bad0000 	.word	0x0bad0000
    8b68:	000115c0 	.word	0x000115c0
    8b6c:	00011600 	.word	0x00011600
    8b70:	000100e4 	.word	0x000100e4

00008b74 <pin_handler_trigger_uninit>:
{
    8b74:	b510      	push	{r4, lr}
    8b76:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    8b78:	f7ff ff44 	bl	8a04 <pin_in_use_by_te>
    8b7c:	b140      	cbz	r0, 8b90 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    8b7e:	4620      	mov	r0, r4
    8b80:	f7ff ff60 	bl	8a44 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    8b84:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    8b88:	4b06      	ldr	r3, [pc, #24]	; (8ba4 <pin_handler_trigger_uninit+0x30>)
    8b8a:	2200      	movs	r2, #0
    8b8c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    8b90:	4620      	mov	r0, r4
    8b92:	f7ff ffb5 	bl	8b00 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    8b96:	3408      	adds	r4, #8
    8b98:	4b03      	ldr	r3, [pc, #12]	; (8ba8 <pin_handler_trigger_uninit+0x34>)
    8b9a:	2200      	movs	r2, #0
    8b9c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    8ba0:	bd10      	pop	{r4, pc}
    8ba2:	bf00      	nop
    8ba4:	40006000 	.word	0x40006000
    8ba8:	20004080 	.word	0x20004080

00008bac <pin_handler_set>:
{
    8bac:	b570      	push	{r4, r5, r6, lr}
    8bae:	b082      	sub	sp, #8
    8bb0:	4606      	mov	r6, r0
    8bb2:	460c      	mov	r4, r1
    8bb4:	4615      	mov	r5, r2
    release_handler(pin);
    8bb6:	f7ff ffa3 	bl	8b00 <release_handler>
    if (!handler)
    8bba:	b324      	cbz	r4, 8c06 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    8bbc:	4629      	mov	r1, r5
    8bbe:	4620      	mov	r0, r4
    8bc0:	f7ff ff62 	bl	8a88 <find_handler>
    if (handler_id < 0)
    8bc4:	1e03      	subs	r3, r0, #0
    8bc6:	db13      	blt.n	8bf0 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    8bc8:	4a10      	ldr	r2, [pc, #64]	; (8c0c <pin_handler_set+0x60>)
    8bca:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    8bce:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    8bd2:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    8bd4:	025b      	lsls	r3, r3, #9
    8bd6:	b29b      	uxth	r3, r3
    8bd8:	f106 0008 	add.w	r0, r6, #8
    8bdc:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    8be0:	430b      	orrs	r3, r1
    8be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8be6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    8bea:	4809      	ldr	r0, [pc, #36]	; (8c10 <pin_handler_set+0x64>)
}
    8bec:	b002      	add	sp, #8
    8bee:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    8bf0:	f10d 0107 	add.w	r1, sp, #7
    8bf4:	4807      	ldr	r0, [pc, #28]	; (8c14 <pin_handler_set+0x68>)
    8bf6:	f7ff fcff 	bl	85f8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    8bfa:	4b05      	ldr	r3, [pc, #20]	; (8c10 <pin_handler_set+0x64>)
    8bfc:	4298      	cmp	r0, r3
    8bfe:	d1f5      	bne.n	8bec <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    8c00:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8c04:	e7e0      	b.n	8bc8 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    8c06:	4802      	ldr	r0, [pc, #8]	; (8c10 <pin_handler_set+0x64>)
    8c08:	e7f0      	b.n	8bec <pin_handler_set+0x40>
    8c0a:	bf00      	nop
    8c0c:	20004080 	.word	0x20004080
    8c10:	0bad0000 	.word	0x0bad0000
    8c14:	200040f4 	.word	0x200040f4

00008c18 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    8c18:	b538      	push	{r3, r4, r5, lr}
    8c1a:	4604      	mov	r4, r0
    while (mask)
    8c1c:	e018      	b.n	8c50 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    8c1e:	fa94 f3a4 	rbit	r3, r4
    8c22:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    8c26:	2201      	movs	r2, #1
    8c28:	409a      	lsls	r2, r3
    8c2a:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    8c2e:	4a0a      	ldr	r2, [pc, #40]	; (8c58 <gpiote_evt_handle+0x40>)
    8c30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    8c34:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    8c38:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    8c3c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    8c40:	f3c0 4001 	ubfx	r0, r0, #16, #2
    8c44:	f006 faa1 	bl	f18a <gpiote_polarity_to_trigger>
    8c48:	4601      	mov	r1, r0
    8c4a:	4628      	mov	r0, r5
    8c4c:	f7ff ff42 	bl	8ad4 <call_handler>
    while (mask)
    8c50:	2c00      	cmp	r4, #0
    8c52:	d1e4      	bne.n	8c1e <gpiote_evt_handle+0x6>
    }
}
    8c54:	bd38      	pop	{r3, r4, r5, pc}
    8c56:	bf00      	nop
    8c58:	40006000 	.word	0x40006000

00008c5c <latch_pending_read_and_check>:
{
    8c5c:	b082      	sub	sp, #8
    8c5e:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    8c60:	4b11      	ldr	r3, [pc, #68]	; (8ca8 <latch_pending_read_and_check+0x4c>)
    8c62:	e893 0003 	ldmia.w	r3, {r0, r1}
    8c66:	ab02      	add	r3, sp, #8
    8c68:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    8c6c:	4660      	mov	r0, ip
    8c6e:	2300      	movs	r3, #0
    8c70:	e00b      	b.n	8c8a <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    8c72:	aa02      	add	r2, sp, #8
    8c74:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    8c78:	f852 2c08 	ldr.w	r2, [r2, #-8]
    8c7c:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    8c80:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    8c84:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    8c88:	3301      	adds	r3, #1
    8c8a:	2b01      	cmp	r3, #1
    8c8c:	d9f1      	bls.n	8c72 <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    8c8e:	2300      	movs	r3, #0
    8c90:	2b01      	cmp	r3, #1
    8c92:	d804      	bhi.n	8c9e <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    8c94:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    8c98:	b922      	cbnz	r2, 8ca4 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    8c9a:	3301      	adds	r3, #1
    8c9c:	e7f8      	b.n	8c90 <latch_pending_read_and_check+0x34>
    return false;
    8c9e:	2000      	movs	r0, #0
}
    8ca0:	b002      	add	sp, #8
    8ca2:	4770      	bx	lr
            return true;
    8ca4:	2001      	movs	r0, #1
    8ca6:	e7fb      	b.n	8ca0 <latch_pending_read_and_check+0x44>
    8ca8:	0000fd60 	.word	0x0000fd60

00008cac <next_sense_cond_call_handler>:
{
    8cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8cb0:	4604      	mov	r4, r0
    8cb2:	460d      	mov	r5, r1
    8cb4:	4616      	mov	r6, r2
    if (is_level(trigger))
    8cb6:	4608      	mov	r0, r1
    8cb8:	f006 fa69 	bl	f18e <is_level>
    8cbc:	bb60      	cbnz	r0, 8d18 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    8cbe:	2e02      	cmp	r6, #2
    8cc0:	f000 80f5 	beq.w	8eae <next_sense_cond_call_handler+0x202>
    8cc4:	f04f 0802 	mov.w	r8, #2
    switch (port)
    8cc8:	0963      	lsrs	r3, r4, #5
    8cca:	f000 80f3 	beq.w	8eb4 <next_sense_cond_call_handler+0x208>
    8cce:	2b01      	cmp	r3, #1
    8cd0:	f040 80f3 	bne.w	8eba <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    8cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8cd8:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8cdc:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8cde:	f013 0f01 	tst.w	r3, #1
    8ce2:	f000 80ec 	beq.w	8ebe <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    8ce6:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8cea:	0963      	lsrs	r3, r4, #5
    8cec:	f000 80f5 	beq.w	8eda <next_sense_cond_call_handler+0x22e>
    8cf0:	2b01      	cmp	r3, #1
    8cf2:	f000 80f5 	beq.w	8ee0 <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    8cf6:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8f1c <next_sense_cond_call_handler+0x270>
    8cfa:	f240 232e 	movw	r3, #558	; 0x22e
    8cfe:	464a      	mov	r2, r9
    8d00:	4987      	ldr	r1, [pc, #540]	; (8f20 <next_sense_cond_call_handler+0x274>)
    8d02:	4888      	ldr	r0, [pc, #544]	; (8f24 <next_sense_cond_call_handler+0x278>)
    8d04:	f005 fc53 	bl	e5ae <assert_print>
    8d08:	f240 212e 	movw	r1, #558	; 0x22e
    8d0c:	4648      	mov	r0, r9
    8d0e:	f005 fc47 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    8d12:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    8d16:	e0e4      	b.n	8ee2 <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    8d18:	4629      	mov	r1, r5
    8d1a:	4620      	mov	r0, r4
    8d1c:	f7ff feda 	bl	8ad4 <call_handler>
    switch (port)
    8d20:	0963      	lsrs	r3, r4, #5
    8d22:	d01f      	beq.n	8d64 <next_sense_cond_call_handler+0xb8>
    8d24:	2b01      	cmp	r3, #1
    8d26:	d120      	bne.n	8d6a <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    8d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8d2c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8d30:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8d32:	f013 0f01 	tst.w	r3, #1
    8d36:	d01a      	beq.n	8d6e <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    8d38:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8d3c:	0963      	lsrs	r3, r4, #5
    8d3e:	d024      	beq.n	8d8a <next_sense_cond_call_handler+0xde>
    8d40:	2b01      	cmp	r3, #1
    8d42:	d025      	beq.n	8d90 <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    8d44:	4f75      	ldr	r7, [pc, #468]	; (8f1c <next_sense_cond_call_handler+0x270>)
    8d46:	f240 232e 	movw	r3, #558	; 0x22e
    8d4a:	463a      	mov	r2, r7
    8d4c:	4974      	ldr	r1, [pc, #464]	; (8f20 <next_sense_cond_call_handler+0x274>)
    8d4e:	4875      	ldr	r0, [pc, #468]	; (8f24 <next_sense_cond_call_handler+0x278>)
    8d50:	f005 fc2d 	bl	e5ae <assert_print>
    8d54:	f240 212e 	movw	r1, #558	; 0x22e
    8d58:	4638      	mov	r0, r7
    8d5a:	f005 fc21 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    8d5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8d62:	e016      	b.n	8d92 <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    8d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8d68:	e7e0      	b.n	8d2c <next_sense_cond_call_handler+0x80>
    switch (port)
    8d6a:	2300      	movs	r3, #0
    8d6c:	e7de      	b.n	8d2c <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8d6e:	4d6b      	ldr	r5, [pc, #428]	; (8f1c <next_sense_cond_call_handler+0x270>)
    8d70:	f240 2329 	movw	r3, #553	; 0x229
    8d74:	462a      	mov	r2, r5
    8d76:	496c      	ldr	r1, [pc, #432]	; (8f28 <next_sense_cond_call_handler+0x27c>)
    8d78:	486a      	ldr	r0, [pc, #424]	; (8f24 <next_sense_cond_call_handler+0x278>)
    8d7a:	f005 fc18 	bl	e5ae <assert_print>
    8d7e:	f240 2129 	movw	r1, #553	; 0x229
    8d82:	4628      	mov	r0, r5
    8d84:	f005 fc0c 	bl	e5a0 <assert_post_action>
    8d88:	e7d6      	b.n	8d38 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    8d8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8d8e:	e000      	b.n	8d92 <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8d90:	4b66      	ldr	r3, [pc, #408]	; (8f2c <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8d92:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    8d96:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    8d9a:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    8d9e:	429e      	cmp	r6, r3
    8da0:	f040 80af 	bne.w	8f02 <next_sense_cond_call_handler+0x256>
    switch (port)
    8da4:	0963      	lsrs	r3, r4, #5
    8da6:	d01f      	beq.n	8de8 <next_sense_cond_call_handler+0x13c>
    8da8:	2b01      	cmp	r3, #1
    8daa:	d120      	bne.n	8dee <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    8dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8db0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8db4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8db6:	f013 0f01 	tst.w	r3, #1
    8dba:	d01a      	beq.n	8df2 <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    8dbc:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8dc0:	0963      	lsrs	r3, r4, #5
    8dc2:	d024      	beq.n	8e0e <next_sense_cond_call_handler+0x162>
    8dc4:	2b01      	cmp	r3, #1
    8dc6:	d025      	beq.n	8e14 <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    8dc8:	4f54      	ldr	r7, [pc, #336]	; (8f1c <next_sense_cond_call_handler+0x270>)
    8dca:	f240 232e 	movw	r3, #558	; 0x22e
    8dce:	463a      	mov	r2, r7
    8dd0:	4953      	ldr	r1, [pc, #332]	; (8f20 <next_sense_cond_call_handler+0x274>)
    8dd2:	4854      	ldr	r0, [pc, #336]	; (8f24 <next_sense_cond_call_handler+0x278>)
    8dd4:	f005 fbeb 	bl	e5ae <assert_print>
    8dd8:	f240 212e 	movw	r1, #558	; 0x22e
    8ddc:	4638      	mov	r0, r7
    8dde:	f005 fbdf 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    8de2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    8de6:	e016      	b.n	8e16 <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    8de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8dec:	e7e0      	b.n	8db0 <next_sense_cond_call_handler+0x104>
    switch (port)
    8dee:	2300      	movs	r3, #0
    8df0:	e7de      	b.n	8db0 <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8df2:	4d4a      	ldr	r5, [pc, #296]	; (8f1c <next_sense_cond_call_handler+0x270>)
    8df4:	f240 2329 	movw	r3, #553	; 0x229
    8df8:	462a      	mov	r2, r5
    8dfa:	494b      	ldr	r1, [pc, #300]	; (8f28 <next_sense_cond_call_handler+0x27c>)
    8dfc:	4849      	ldr	r0, [pc, #292]	; (8f24 <next_sense_cond_call_handler+0x278>)
    8dfe:	f005 fbd6 	bl	e5ae <assert_print>
    8e02:	f240 2129 	movw	r1, #553	; 0x229
    8e06:	4628      	mov	r0, r5
    8e08:	f005 fbca 	bl	e5a0 <assert_post_action>
    8e0c:	e7d6      	b.n	8dbc <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    8e0e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    8e12:	e000      	b.n	8e16 <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8e14:	4945      	ldr	r1, [pc, #276]	; (8f2c <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8e16:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    8e1a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    8e1e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    8e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    8e26:	0963      	lsrs	r3, r4, #5
    8e28:	d01f      	beq.n	8e6a <next_sense_cond_call_handler+0x1be>
    8e2a:	2b01      	cmp	r3, #1
    8e2c:	d120      	bne.n	8e70 <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    8e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8e32:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8e36:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8e38:	f013 0f01 	tst.w	r3, #1
    8e3c:	d01a      	beq.n	8e74 <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    8e3e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8e42:	0964      	lsrs	r4, r4, #5
    8e44:	d024      	beq.n	8e90 <next_sense_cond_call_handler+0x1e4>
    8e46:	2c01      	cmp	r4, #1
    8e48:	d025      	beq.n	8e96 <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    8e4a:	4c34      	ldr	r4, [pc, #208]	; (8f1c <next_sense_cond_call_handler+0x270>)
    8e4c:	f240 232e 	movw	r3, #558	; 0x22e
    8e50:	4622      	mov	r2, r4
    8e52:	4933      	ldr	r1, [pc, #204]	; (8f20 <next_sense_cond_call_handler+0x274>)
    8e54:	4833      	ldr	r0, [pc, #204]	; (8f24 <next_sense_cond_call_handler+0x278>)
    8e56:	f005 fbaa 	bl	e5ae <assert_print>
    8e5a:	f240 212e 	movw	r1, #558	; 0x22e
    8e5e:	4620      	mov	r0, r4
    8e60:	f005 fb9e 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    8e64:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    8e68:	e016      	b.n	8e98 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    8e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8e6e:	e7e0      	b.n	8e32 <next_sense_cond_call_handler+0x186>
    switch (port)
    8e70:	2300      	movs	r3, #0
    8e72:	e7de      	b.n	8e32 <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8e74:	4d29      	ldr	r5, [pc, #164]	; (8f1c <next_sense_cond_call_handler+0x270>)
    8e76:	f240 2329 	movw	r3, #553	; 0x229
    8e7a:	462a      	mov	r2, r5
    8e7c:	492a      	ldr	r1, [pc, #168]	; (8f28 <next_sense_cond_call_handler+0x27c>)
    8e7e:	4829      	ldr	r0, [pc, #164]	; (8f24 <next_sense_cond_call_handler+0x278>)
    8e80:	f005 fb95 	bl	e5ae <assert_print>
    8e84:	f240 2129 	movw	r1, #553	; 0x229
    8e88:	4628      	mov	r0, r5
    8e8a:	f005 fb89 	bl	e5a0 <assert_post_action>
    8e8e:	e7d6      	b.n	8e3e <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    8e90:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    8e94:	e000      	b.n	8e98 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8e96:	4925      	ldr	r1, [pc, #148]	; (8f2c <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8e98:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    8e9c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    8ea0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8ea4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    8ea8:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    8eac:	e029      	b.n	8f02 <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    8eae:	f04f 0803 	mov.w	r8, #3
    8eb2:	e709      	b.n	8cc8 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    8eb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8eb8:	e70e      	b.n	8cd8 <next_sense_cond_call_handler+0x2c>
    switch (port)
    8eba:	2300      	movs	r3, #0
    8ebc:	e70c      	b.n	8cd8 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8ebe:	4f17      	ldr	r7, [pc, #92]	; (8f1c <next_sense_cond_call_handler+0x270>)
    8ec0:	f240 2329 	movw	r3, #553	; 0x229
    8ec4:	463a      	mov	r2, r7
    8ec6:	4918      	ldr	r1, [pc, #96]	; (8f28 <next_sense_cond_call_handler+0x27c>)
    8ec8:	4816      	ldr	r0, [pc, #88]	; (8f24 <next_sense_cond_call_handler+0x278>)
    8eca:	f005 fb70 	bl	e5ae <assert_print>
    8ece:	f240 2129 	movw	r1, #553	; 0x229
    8ed2:	4638      	mov	r0, r7
    8ed4:	f005 fb64 	bl	e5a0 <assert_post_action>
    8ed8:	e705      	b.n	8ce6 <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    8eda:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    8ede:	e000      	b.n	8ee2 <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8ee0:	4912      	ldr	r1, [pc, #72]	; (8f2c <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8ee2:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    8ee6:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    8eea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8eee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    8ef2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    8ef6:	2d03      	cmp	r5, #3
    8ef8:	d007      	beq.n	8f0a <next_sense_cond_call_handler+0x25e>
    8efa:	2e02      	cmp	r6, #2
    8efc:	d003      	beq.n	8f06 <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    8efe:	2e03      	cmp	r6, #3
    8f00:	d008      	beq.n	8f14 <next_sense_cond_call_handler+0x268>
}
    8f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    8f06:	2d01      	cmp	r5, #1
    8f08:	d1f9      	bne.n	8efe <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    8f0a:	4629      	mov	r1, r5
    8f0c:	4620      	mov	r0, r4
    8f0e:	f7ff fde1 	bl	8ad4 <call_handler>
}
    8f12:	e7f6      	b.n	8f02 <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    8f14:	2d02      	cmp	r5, #2
    8f16:	d1f4      	bne.n	8f02 <next_sense_cond_call_handler+0x256>
    8f18:	e7f7      	b.n	8f0a <next_sense_cond_call_handler+0x25e>
    8f1a:	bf00      	nop
    8f1c:	0001139c 	.word	0x0001139c
    8f20:	000107a0 	.word	0x000107a0
    8f24:	000100e4 	.word	0x000100e4
    8f28:	000113d0 	.word	0x000113d0
    8f2c:	50000300 	.word	0x50000300

00008f30 <port_event_handle>:
{
    8f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f34:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    8f36:	4a65      	ldr	r2, [pc, #404]	; (90cc <port_event_handle+0x19c>)
    8f38:	466b      	mov	r3, sp
    8f3a:	e892 0003 	ldmia.w	r2, {r0, r1}
    8f3e:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    8f42:	2300      	movs	r3, #0
    8f44:	a802      	add	r0, sp, #8
    8f46:	e00b      	b.n	8f60 <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    8f48:	aa04      	add	r2, sp, #16
    8f4a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    8f4e:	f852 2c10 	ldr.w	r2, [r2, #-16]
    8f52:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    8f56:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    8f5a:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    8f5e:	3301      	adds	r3, #1
    8f60:	2b01      	cmp	r3, #1
    8f62:	d9f1      	bls.n	8f48 <port_event_handle+0x18>
    8f64:	e0ad      	b.n	90c2 <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    8f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8f6a:	e07f      	b.n	906c <port_event_handle+0x13c>
    switch (port)
    8f6c:	2300      	movs	r3, #0
    8f6e:	e07d      	b.n	906c <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8f70:	4f57      	ldr	r7, [pc, #348]	; (90d0 <port_event_handle+0x1a0>)
    8f72:	f240 2329 	movw	r3, #553	; 0x229
    8f76:	463a      	mov	r2, r7
    8f78:	4956      	ldr	r1, [pc, #344]	; (90d4 <port_event_handle+0x1a4>)
    8f7a:	4857      	ldr	r0, [pc, #348]	; (90d8 <port_event_handle+0x1a8>)
    8f7c:	f005 fb17 	bl	e5ae <assert_print>
    8f80:	f240 2129 	movw	r1, #553	; 0x229
    8f84:	4638      	mov	r0, r7
    8f86:	f005 fb0b 	bl	e5a0 <assert_post_action>
    8f8a:	e076      	b.n	907a <port_event_handle+0x14a>
        case 0: return NRF_P0;
    8f8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8f90:	e000      	b.n	8f94 <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8f92:	4b52      	ldr	r3, [pc, #328]	; (90dc <port_event_handle+0x1ac>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8f94:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    8f98:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    8f9c:	f3c2 4201 	ubfx	r2, r2, #16, #2
    8fa0:	4631      	mov	r1, r6
    8fa2:	4620      	mov	r0, r4
    8fa4:	f7ff fe82 	bl	8cac <next_sense_cond_call_handler>
    switch (port)
    8fa8:	0963      	lsrs	r3, r4, #5
    8faa:	d01f      	beq.n	8fec <port_event_handle+0xbc>
    8fac:	2b01      	cmp	r3, #1
    8fae:	d120      	bne.n	8ff2 <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    8fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8fb4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8fb8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8fba:	f013 0f01 	tst.w	r3, #1
    8fbe:	d01a      	beq.n	8ff6 <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    8fc0:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8fc4:	0964      	lsrs	r4, r4, #5
    8fc6:	d024      	beq.n	9012 <port_event_handle+0xe2>
    8fc8:	2c01      	cmp	r4, #1
    8fca:	d025      	beq.n	9018 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    8fcc:	4c40      	ldr	r4, [pc, #256]	; (90d0 <port_event_handle+0x1a0>)
    8fce:	f240 232e 	movw	r3, #558	; 0x22e
    8fd2:	4622      	mov	r2, r4
    8fd4:	4942      	ldr	r1, [pc, #264]	; (90e0 <port_event_handle+0x1b0>)
    8fd6:	4840      	ldr	r0, [pc, #256]	; (90d8 <port_event_handle+0x1a8>)
    8fd8:	f005 fae9 	bl	e5ae <assert_print>
    8fdc:	f240 212e 	movw	r1, #558	; 0x22e
    8fe0:	4620      	mov	r0, r4
    8fe2:	f005 fadd 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    8fe6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8fea:	e016      	b.n	901a <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    8fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8ff0:	e7e0      	b.n	8fb4 <port_event_handle+0x84>
    switch (port)
    8ff2:	2300      	movs	r3, #0
    8ff4:	e7de      	b.n	8fb4 <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8ff6:	4e36      	ldr	r6, [pc, #216]	; (90d0 <port_event_handle+0x1a0>)
    8ff8:	f240 2329 	movw	r3, #553	; 0x229
    8ffc:	4632      	mov	r2, r6
    8ffe:	4935      	ldr	r1, [pc, #212]	; (90d4 <port_event_handle+0x1a4>)
    9000:	4835      	ldr	r0, [pc, #212]	; (90d8 <port_event_handle+0x1a8>)
    9002:	f005 fad4 	bl	e5ae <assert_print>
    9006:	f240 2129 	movw	r1, #553	; 0x229
    900a:	4630      	mov	r0, r6
    900c:	f005 fac8 	bl	e5a0 <assert_post_action>
    9010:	e7d6      	b.n	8fc0 <port_event_handle+0x90>
        case 0: return NRF_P0;
    9012:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9016:	e000      	b.n	901a <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9018:	4a30      	ldr	r2, [pc, #192]	; (90dc <port_event_handle+0x1ac>)
    reg->LATCH = (1 << pin_number);
    901a:	2301      	movs	r3, #1
    901c:	40b3      	lsls	r3, r6
    901e:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    9022:	ab04      	add	r3, sp, #16
    9024:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    9028:	f853 4c08 	ldr.w	r4, [r3, #-8]
    902c:	2c00      	cmp	r4, #0
    902e:	d03b      	beq.n	90a8 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    9030:	fa94 f4a4 	rbit	r4, r4
    9034:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    9038:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    903c:	f104 0208 	add.w	r2, r4, #8
    9040:	4b28      	ldr	r3, [pc, #160]	; (90e4 <port_event_handle+0x1b4>)
    9042:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    9046:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    904a:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    904c:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    9050:	a802      	add	r0, sp, #8
    9052:	2301      	movs	r3, #1
    9054:	fa03 f202 	lsl.w	r2, r3, r2
    9058:	5c43      	ldrb	r3, [r0, r1]
    905a:	ea23 0302 	bic.w	r3, r3, r2
    905e:	5443      	strb	r3, [r0, r1]
    switch (port)
    9060:	0963      	lsrs	r3, r4, #5
    9062:	d080      	beq.n	8f66 <port_event_handle+0x36>
    9064:	2b01      	cmp	r3, #1
    9066:	d181      	bne.n	8f6c <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    9068:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    906c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9070:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9072:	f013 0f01 	tst.w	r3, #1
    9076:	f43f af7b 	beq.w	8f70 <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    907a:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    907e:	0963      	lsrs	r3, r4, #5
    9080:	d084      	beq.n	8f8c <port_event_handle+0x5c>
    9082:	2b01      	cmp	r3, #1
    9084:	d085      	beq.n	8f92 <port_event_handle+0x62>
            NRFX_ASSERT(0);
    9086:	f8df 8048 	ldr.w	r8, [pc, #72]	; 90d0 <port_event_handle+0x1a0>
    908a:	f240 232e 	movw	r3, #558	; 0x22e
    908e:	4642      	mov	r2, r8
    9090:	4913      	ldr	r1, [pc, #76]	; (90e0 <port_event_handle+0x1b0>)
    9092:	4811      	ldr	r0, [pc, #68]	; (90d8 <port_event_handle+0x1a8>)
    9094:	f005 fa8b 	bl	e5ae <assert_print>
    9098:	f240 212e 	movw	r1, #558	; 0x22e
    909c:	4640      	mov	r0, r8
    909e:	f005 fa7f 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    90a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    90a6:	e775      	b.n	8f94 <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    90a8:	3501      	adds	r5, #1
    90aa:	2d01      	cmp	r5, #1
    90ac:	d9b9      	bls.n	9022 <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    90ae:	4b0e      	ldr	r3, [pc, #56]	; (90e8 <port_event_handle+0x1b8>)
    90b0:	2200      	movs	r2, #0
    90b2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    90b6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    90ba:	a802      	add	r0, sp, #8
    90bc:	f7ff fdce 	bl	8c5c <latch_pending_read_and_check>
    90c0:	b108      	cbz	r0, 90c6 <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    90c2:	2500      	movs	r5, #0
    90c4:	e7f1      	b.n	90aa <port_event_handle+0x17a>
}
    90c6:	b004      	add	sp, #16
    90c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    90cc:	0000fd60 	.word	0x0000fd60
    90d0:	0001139c 	.word	0x0001139c
    90d4:	000113d0 	.word	0x000113d0
    90d8:	000100e4 	.word	0x000100e4
    90dc:	50000300 	.word	0x50000300
    90e0:	000107a0 	.word	0x000107a0
    90e4:	20004080 	.word	0x20004080
    90e8:	40006000 	.word	0x40006000

000090ec <nrfx_gpiote_input_configure>:
{
    90ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    90f0:	4604      	mov	r4, r0
    90f2:	4615      	mov	r5, r2
    90f4:	461e      	mov	r6, r3
    if (p_input_config)
    90f6:	2900      	cmp	r1, #0
    90f8:	d064      	beq.n	91c4 <nrfx_gpiote_input_configure+0xd8>
    90fa:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    90fc:	f006 f82f 	bl	f15e <pin_is_task_output>
    9100:	2800      	cmp	r0, #0
    9102:	f040 80cd 	bne.w	92a0 <nrfx_gpiote_input_configure+0x1b4>
    switch (port)
    9106:	0963      	lsrs	r3, r4, #5
    9108:	d020      	beq.n	914c <nrfx_gpiote_input_configure+0x60>
    910a:	2b01      	cmp	r3, #1
    910c:	d121      	bne.n	9152 <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    910e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9112:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9116:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9118:	f013 0f01 	tst.w	r3, #1
    911c:	d01b      	beq.n	9156 <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    911e:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9122:	0963      	lsrs	r3, r4, #5
    9124:	d025      	beq.n	9172 <nrfx_gpiote_input_configure+0x86>
    9126:	2b01      	cmp	r3, #1
    9128:	d026      	beq.n	9178 <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    912a:	f8df 9184 	ldr.w	r9, [pc, #388]	; 92b0 <nrfx_gpiote_input_configure+0x1c4>
    912e:	f240 232e 	movw	r3, #558	; 0x22e
    9132:	464a      	mov	r2, r9
    9134:	495f      	ldr	r1, [pc, #380]	; (92b4 <nrfx_gpiote_input_configure+0x1c8>)
    9136:	4860      	ldr	r0, [pc, #384]	; (92b8 <nrfx_gpiote_input_configure+0x1cc>)
    9138:	f005 fa39 	bl	e5ae <assert_print>
    913c:	f240 212e 	movw	r1, #558	; 0x22e
    9140:	4648      	mov	r0, r9
    9142:	f005 fa2d 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    9146:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    914a:	e016      	b.n	917a <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    914c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9150:	e7df      	b.n	9112 <nrfx_gpiote_input_configure+0x26>
    switch (port)
    9152:	2300      	movs	r3, #0
    9154:	e7dd      	b.n	9112 <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9156:	4f56      	ldr	r7, [pc, #344]	; (92b0 <nrfx_gpiote_input_configure+0x1c4>)
    9158:	f240 2329 	movw	r3, #553	; 0x229
    915c:	463a      	mov	r2, r7
    915e:	4957      	ldr	r1, [pc, #348]	; (92bc <nrfx_gpiote_input_configure+0x1d0>)
    9160:	4855      	ldr	r0, [pc, #340]	; (92b8 <nrfx_gpiote_input_configure+0x1cc>)
    9162:	f005 fa24 	bl	e5ae <assert_print>
    9166:	f240 2129 	movw	r1, #553	; 0x229
    916a:	4638      	mov	r0, r7
    916c:	f005 fa18 	bl	e5a0 <assert_post_action>
    9170:	e7d5      	b.n	911e <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    9172:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9176:	e000      	b.n	917a <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9178:	4951      	ldr	r1, [pc, #324]	; (92c0 <nrfx_gpiote_input_configure+0x1d4>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    917a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    917e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9182:	f1b8 0f00 	cmp.w	r8, #0
    9186:	d03f      	beq.n	9208 <nrfx_gpiote_input_configure+0x11c>
    9188:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    918a:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    918e:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9192:	f1b8 0f00 	cmp.w	r8, #0
    9196:	d039      	beq.n	920c <nrfx_gpiote_input_configure+0x120>
    9198:	f898 2000 	ldrb.w	r2, [r8]
    919c:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    919e:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    91a0:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    91a4:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    91a8:	4a46      	ldr	r2, [pc, #280]	; (92c4 <nrfx_gpiote_input_configure+0x1d8>)
    91aa:	f104 0108 	add.w	r1, r4, #8
    91ae:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    91b2:	f023 0302 	bic.w	r3, r3, #2
    91b6:	b29b      	uxth	r3, r3
    91b8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    91bc:	f043 0301 	orr.w	r3, r3, #1
    91c0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    91c4:	b1bd      	cbz	r5, 91f6 <nrfx_gpiote_input_configure+0x10a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    91c6:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    91c8:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    91cc:	4620      	mov	r0, r4
    91ce:	f7ff fc2f 	bl	8a30 <pin_is_output>
    91d2:	b1e8      	cbz	r0, 9210 <nrfx_gpiote_input_configure+0x124>
            if (use_evt)
    91d4:	f1b8 0f00 	cmp.w	r8, #0
    91d8:	d164      	bne.n	92a4 <nrfx_gpiote_input_configure+0x1b8>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    91da:	4a3a      	ldr	r2, [pc, #232]	; (92c4 <nrfx_gpiote_input_configure+0x1d8>)
    91dc:	f104 0108 	add.w	r1, r4, #8
    91e0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    91e4:	f023 031c 	bic.w	r3, r3, #28
    91e8:	b29b      	uxth	r3, r3
    91ea:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    91ee:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    91f2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    91f6:	2e00      	cmp	r6, #0
    91f8:	d058      	beq.n	92ac <nrfx_gpiote_input_configure+0x1c0>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    91fa:	6872      	ldr	r2, [r6, #4]
    91fc:	6831      	ldr	r1, [r6, #0]
    91fe:	4620      	mov	r0, r4
    9200:	f7ff fcd4 	bl	8bac <pin_handler_set>
}
    9204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9208:	2200      	movs	r2, #0
    920a:	e7be      	b.n	918a <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    920c:	2200      	movs	r2, #0
    920e:	e7c6      	b.n	919e <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    9210:	4a2c      	ldr	r2, [pc, #176]	; (92c4 <nrfx_gpiote_input_configure+0x1d8>)
    9212:	f104 0108 	add.w	r1, r4, #8
    9216:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    921a:	f023 0320 	bic.w	r3, r3, #32
    921e:	04db      	lsls	r3, r3, #19
    9220:	0cdb      	lsrs	r3, r3, #19
    9222:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    9226:	f1b8 0f00 	cmp.w	r8, #0
    922a:	d0d6      	beq.n	91da <nrfx_gpiote_input_configure+0xee>
                if (!edge)
    922c:	2f03      	cmp	r7, #3
    922e:	d83b      	bhi.n	92a8 <nrfx_gpiote_input_configure+0x1bc>
                uint8_t ch = *p_trigger_config->p_in_channel;
    9230:	686b      	ldr	r3, [r5, #4]
    9232:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    9234:	b937      	cbnz	r7, 9244 <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    9236:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    923a:	4b23      	ldr	r3, [pc, #140]	; (92c8 <nrfx_gpiote_input_configure+0x1dc>)
    923c:	2200      	movs	r2, #0
    923e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    9242:	e7ca      	b.n	91da <nrfx_gpiote_input_configure+0xee>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    9244:	4638      	mov	r0, r7
    9246:	f005 ffa1 	bl	f18c <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    924a:	4b1f      	ldr	r3, [pc, #124]	; (92c8 <nrfx_gpiote_input_configure+0x1dc>)
    924c:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    9250:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    9254:	f021 0103 	bic.w	r1, r1, #3
    9258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    925c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    9260:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    9264:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    9268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    926c:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    9270:	0221      	lsls	r1, r4, #8
    9272:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    9276:	0400      	lsls	r0, r0, #16
    9278:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    927c:	4301      	orrs	r1, r0
    927e:	ea4c 0101 	orr.w	r1, ip, r1
    9282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    9286:	036b      	lsls	r3, r5, #13
    9288:	b29b      	uxth	r3, r3
    928a:	4a0e      	ldr	r2, [pc, #56]	; (92c4 <nrfx_gpiote_input_configure+0x1d8>)
    928c:	f104 0108 	add.w	r1, r4, #8
    9290:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    9294:	4303      	orrs	r3, r0
    9296:	f043 0320 	orr.w	r3, r3, #32
    929a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    929e:	e79c      	b.n	91da <nrfx_gpiote_input_configure+0xee>
            return NRFX_ERROR_INVALID_PARAM;
    92a0:	480a      	ldr	r0, [pc, #40]	; (92cc <nrfx_gpiote_input_configure+0x1e0>)
    92a2:	e7af      	b.n	9204 <nrfx_gpiote_input_configure+0x118>
                return NRFX_ERROR_INVALID_PARAM;
    92a4:	4809      	ldr	r0, [pc, #36]	; (92cc <nrfx_gpiote_input_configure+0x1e0>)
    92a6:	e7ad      	b.n	9204 <nrfx_gpiote_input_configure+0x118>
                    return NRFX_ERROR_INVALID_PARAM;
    92a8:	4808      	ldr	r0, [pc, #32]	; (92cc <nrfx_gpiote_input_configure+0x1e0>)
    92aa:	e7ab      	b.n	9204 <nrfx_gpiote_input_configure+0x118>
        err = NRFX_SUCCESS;
    92ac:	4808      	ldr	r0, [pc, #32]	; (92d0 <nrfx_gpiote_input_configure+0x1e4>)
    92ae:	e7a9      	b.n	9204 <nrfx_gpiote_input_configure+0x118>
    92b0:	0001139c 	.word	0x0001139c
    92b4:	000107a0 	.word	0x000107a0
    92b8:	000100e4 	.word	0x000100e4
    92bc:	000113d0 	.word	0x000113d0
    92c0:	50000300 	.word	0x50000300
    92c4:	20004080 	.word	0x20004080
    92c8:	40006000 	.word	0x40006000
    92cc:	0bad0004 	.word	0x0bad0004
    92d0:	0bad0000 	.word	0x0bad0000

000092d4 <nrfx_gpiote_output_configure>:
{
    92d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    92d8:	4604      	mov	r4, r0
    92da:	4615      	mov	r5, r2
    if (p_config)
    92dc:	2900      	cmp	r1, #0
    92de:	f000 8086 	beq.w	93ee <nrfx_gpiote_output_configure+0x11a>
    92e2:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    92e4:	f005 ff4a 	bl	f17c <pin_is_input>
    92e8:	b128      	cbz	r0, 92f6 <nrfx_gpiote_output_configure+0x22>
    92ea:	4620      	mov	r0, r4
    92ec:	f7ff fb8a 	bl	8a04 <pin_in_use_by_te>
    92f0:	2800      	cmp	r0, #0
    92f2:	f040 80ce 	bne.w	9492 <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    92f6:	4620      	mov	r0, r4
    92f8:	f7ff fb8e 	bl	8a18 <pin_has_trigger>
    92fc:	b118      	cbz	r0, 9306 <nrfx_gpiote_output_configure+0x32>
    92fe:	787b      	ldrb	r3, [r7, #1]
    9300:	2b01      	cmp	r3, #1
    9302:	f000 80c8 	beq.w	9496 <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    9306:	f107 0901 	add.w	r9, r7, #1
    930a:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    930e:	0963      	lsrs	r3, r4, #5
    9310:	d020      	beq.n	9354 <nrfx_gpiote_output_configure+0x80>
    9312:	2b01      	cmp	r3, #1
    9314:	d121      	bne.n	935a <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    9316:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    931a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    931e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9320:	f013 0f01 	tst.w	r3, #1
    9324:	d01b      	beq.n	935e <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    9326:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    932a:	0963      	lsrs	r3, r4, #5
    932c:	d025      	beq.n	937a <nrfx_gpiote_output_configure+0xa6>
    932e:	2b01      	cmp	r3, #1
    9330:	d026      	beq.n	9380 <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    9332:	f8df a170 	ldr.w	sl, [pc, #368]	; 94a4 <nrfx_gpiote_output_configure+0x1d0>
    9336:	f240 232e 	movw	r3, #558	; 0x22e
    933a:	4652      	mov	r2, sl
    933c:	495a      	ldr	r1, [pc, #360]	; (94a8 <nrfx_gpiote_output_configure+0x1d4>)
    933e:	485b      	ldr	r0, [pc, #364]	; (94ac <nrfx_gpiote_output_configure+0x1d8>)
    9340:	f005 f935 	bl	e5ae <assert_print>
    9344:	f240 212e 	movw	r1, #558	; 0x22e
    9348:	4650      	mov	r0, sl
    934a:	f005 f929 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    934e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9352:	e016      	b.n	9382 <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    9354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9358:	e7df      	b.n	931a <nrfx_gpiote_output_configure+0x46>
    switch (port)
    935a:	2300      	movs	r3, #0
    935c:	e7dd      	b.n	931a <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    935e:	4e51      	ldr	r6, [pc, #324]	; (94a4 <nrfx_gpiote_output_configure+0x1d0>)
    9360:	f240 2329 	movw	r3, #553	; 0x229
    9364:	4632      	mov	r2, r6
    9366:	4952      	ldr	r1, [pc, #328]	; (94b0 <nrfx_gpiote_output_configure+0x1dc>)
    9368:	4850      	ldr	r0, [pc, #320]	; (94ac <nrfx_gpiote_output_configure+0x1d8>)
    936a:	f005 f920 	bl	e5ae <assert_print>
    936e:	f240 2129 	movw	r1, #553	; 0x229
    9372:	4630      	mov	r0, r6
    9374:	f005 f914 	bl	e5a0 <assert_post_action>
    9378:	e7d5      	b.n	9326 <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    937a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    937e:	e000      	b.n	9382 <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9380:	4a4c      	ldr	r2, [pc, #304]	; (94b4 <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9382:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    9386:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    938a:	f1b9 0f00 	cmp.w	r9, #0
    938e:	d04b      	beq.n	9428 <nrfx_gpiote_output_configure+0x154>
    9390:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9392:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9396:	f1b8 0f00 	cmp.w	r8, #0
    939a:	d047      	beq.n	942c <nrfx_gpiote_output_configure+0x158>
    939c:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    939e:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    93a0:	2f00      	cmp	r7, #0
    93a2:	d045      	beq.n	9430 <nrfx_gpiote_output_configure+0x15c>
    93a4:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    93a8:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    93aa:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    93ae:	f1b9 0f00 	cmp.w	r9, #0
    93b2:	d03f      	beq.n	9434 <nrfx_gpiote_output_configure+0x160>
    93b4:	787b      	ldrb	r3, [r7, #1]
    93b6:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    93b8:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    93bc:	f1b8 0f00 	cmp.w	r8, #0
    93c0:	d03a      	beq.n	9438 <nrfx_gpiote_output_configure+0x164>
    93c2:	78b8      	ldrb	r0, [r7, #2]
    93c4:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    93c6:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    93c8:	2f00      	cmp	r7, #0
    93ca:	d037      	beq.n	943c <nrfx_gpiote_output_configure+0x168>
    93cc:	7838      	ldrb	r0, [r7, #0]
    93ce:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    93d0:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    93d2:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    93d4:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    93d8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    93dc:	4a36      	ldr	r2, [pc, #216]	; (94b8 <nrfx_gpiote_output_configure+0x1e4>)
    93de:	f104 0108 	add.w	r1, r4, #8
    93e2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    93e6:	f043 0303 	orr.w	r3, r3, #3
    93ea:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    93ee:	2d00      	cmp	r5, #0
    93f0:	d053      	beq.n	949a <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    93f2:	4620      	mov	r0, r4
    93f4:	f005 fec2 	bl	f17c <pin_is_input>
    93f8:	2800      	cmp	r0, #0
    93fa:	d150      	bne.n	949e <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    93fc:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    93fe:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    9402:	4a2e      	ldr	r2, [pc, #184]	; (94bc <nrfx_gpiote_output_configure+0x1e8>)
    9404:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    9408:	492b      	ldr	r1, [pc, #172]	; (94b8 <nrfx_gpiote_output_configure+0x1e4>)
    940a:	f104 0008 	add.w	r0, r4, #8
    940e:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    9412:	f022 0220 	bic.w	r2, r2, #32
    9416:	04d2      	lsls	r2, r2, #19
    9418:	0cd2      	lsrs	r2, r2, #19
    941a:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    941e:	786a      	ldrb	r2, [r5, #1]
    9420:	b972      	cbnz	r2, 9440 <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    9422:	4827      	ldr	r0, [pc, #156]	; (94c0 <nrfx_gpiote_output_configure+0x1ec>)
}
    9424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9428:	2300      	movs	r3, #0
    942a:	e7b2      	b.n	9392 <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    942c:	2000      	movs	r0, #0
    942e:	e7b6      	b.n	939e <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9430:	2000      	movs	r0, #0
    9432:	e7b9      	b.n	93a8 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9434:	2300      	movs	r3, #0
    9436:	e7bf      	b.n	93b8 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9438:	2000      	movs	r0, #0
    943a:	e7c4      	b.n	93c6 <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    943c:	2000      	movs	r0, #0
    943e:	e7c7      	b.n	93d0 <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    9440:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    9442:	481e      	ldr	r0, [pc, #120]	; (94bc <nrfx_gpiote_output_configure+0x1e8>)
    9444:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    9448:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    944c:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    9450:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    9454:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9458:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    945c:	0221      	lsls	r1, r4, #8
    945e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    9462:	0412      	lsls	r2, r2, #16
    9464:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9468:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    946a:	0539      	lsls	r1, r7, #20
    946c:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    9470:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9472:	4332      	orrs	r2, r6
    9474:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    9478:	035b      	lsls	r3, r3, #13
    947a:	b29b      	uxth	r3, r3
    947c:	4a0e      	ldr	r2, [pc, #56]	; (94b8 <nrfx_gpiote_output_configure+0x1e4>)
    947e:	3408      	adds	r4, #8
    9480:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    9484:	430b      	orrs	r3, r1
    9486:	f043 0320 	orr.w	r3, r3, #32
    948a:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    948e:	480c      	ldr	r0, [pc, #48]	; (94c0 <nrfx_gpiote_output_configure+0x1ec>)
    9490:	e7c8      	b.n	9424 <nrfx_gpiote_output_configure+0x150>
    9492:	480c      	ldr	r0, [pc, #48]	; (94c4 <nrfx_gpiote_output_configure+0x1f0>)
    9494:	e7c6      	b.n	9424 <nrfx_gpiote_output_configure+0x150>
    9496:	480b      	ldr	r0, [pc, #44]	; (94c4 <nrfx_gpiote_output_configure+0x1f0>)
    9498:	e7c4      	b.n	9424 <nrfx_gpiote_output_configure+0x150>
    949a:	4809      	ldr	r0, [pc, #36]	; (94c0 <nrfx_gpiote_output_configure+0x1ec>)
    949c:	e7c2      	b.n	9424 <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    949e:	4809      	ldr	r0, [pc, #36]	; (94c4 <nrfx_gpiote_output_configure+0x1f0>)
    94a0:	e7c0      	b.n	9424 <nrfx_gpiote_output_configure+0x150>
    94a2:	bf00      	nop
    94a4:	0001139c 	.word	0x0001139c
    94a8:	000107a0 	.word	0x000107a0
    94ac:	000100e4 	.word	0x000100e4
    94b0:	000113d0 	.word	0x000113d0
    94b4:	50000300 	.word	0x50000300
    94b8:	20004080 	.word	0x20004080
    94bc:	40006000 	.word	0x40006000
    94c0:	0bad0000 	.word	0x0bad0000
    94c4:	0bad0004 	.word	0x0bad0004

000094c8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    94c8:	4b01      	ldr	r3, [pc, #4]	; (94d0 <nrfx_gpiote_global_callback_set+0x8>)
    94ca:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    94cc:	60d9      	str	r1, [r3, #12]
}
    94ce:	4770      	bx	lr
    94d0:	20004080 	.word	0x20004080

000094d4 <nrfx_gpiote_channel_get>:
{
    94d4:	b570      	push	{r4, r5, r6, lr}
    94d6:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    94d8:	460d      	mov	r5, r1
    94da:	b159      	cbz	r1, 94f4 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    94dc:	4620      	mov	r0, r4
    94de:	f7ff fa91 	bl	8a04 <pin_in_use_by_te>
    94e2:	b1a8      	cbz	r0, 9510 <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    94e4:	3408      	adds	r4, #8
    94e6:	4b0b      	ldr	r3, [pc, #44]	; (9514 <nrfx_gpiote_channel_get+0x40>)
    94e8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    94ec:	0b5b      	lsrs	r3, r3, #13
    94ee:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    94f0:	4809      	ldr	r0, [pc, #36]	; (9518 <nrfx_gpiote_channel_get+0x44>)
}
    94f2:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    94f4:	4e09      	ldr	r6, [pc, #36]	; (951c <nrfx_gpiote_channel_get+0x48>)
    94f6:	f240 2335 	movw	r3, #565	; 0x235
    94fa:	4632      	mov	r2, r6
    94fc:	4908      	ldr	r1, [pc, #32]	; (9520 <nrfx_gpiote_channel_get+0x4c>)
    94fe:	4809      	ldr	r0, [pc, #36]	; (9524 <nrfx_gpiote_channel_get+0x50>)
    9500:	f005 f855 	bl	e5ae <assert_print>
    9504:	f240 2135 	movw	r1, #565	; 0x235
    9508:	4630      	mov	r0, r6
    950a:	f005 f849 	bl	e5a0 <assert_post_action>
    950e:	e7e5      	b.n	94dc <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    9510:	4805      	ldr	r0, [pc, #20]	; (9528 <nrfx_gpiote_channel_get+0x54>)
    9512:	e7ee      	b.n	94f2 <nrfx_gpiote_channel_get+0x1e>
    9514:	20004080 	.word	0x20004080
    9518:	0bad0000 	.word	0x0bad0000
    951c:	000115c0 	.word	0x000115c0
    9520:	00011614 	.word	0x00011614
    9524:	000100e4 	.word	0x000100e4
    9528:	0bad0004 	.word	0x0bad0004

0000952c <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    952c:	4b10      	ldr	r3, [pc, #64]	; (9570 <nrfx_gpiote_init+0x44>)
    952e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    9532:	b10b      	cbz	r3, 9538 <nrfx_gpiote_init+0xc>
        return err_code;
    9534:	480f      	ldr	r0, [pc, #60]	; (9574 <nrfx_gpiote_init+0x48>)
}
    9536:	4770      	bx	lr
{
    9538:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    953a:	4c0d      	ldr	r4, [pc, #52]	; (9570 <nrfx_gpiote_init+0x44>)
    953c:	2260      	movs	r2, #96	; 0x60
    953e:	2100      	movs	r1, #0
    9540:	f104 0010 	add.w	r0, r4, #16
    9544:	f005 ff60 	bl	f408 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    9548:	2006      	movs	r0, #6
    954a:	f7fc fa8f 	bl	5a6c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    954e:	4b0a      	ldr	r3, [pc, #40]	; (9578 <nrfx_gpiote_init+0x4c>)
    9550:	2200      	movs	r2, #0
    9552:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    9556:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    955a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    955e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    9562:	2301      	movs	r3, #1
    9564:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    9568:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    956a:	4804      	ldr	r0, [pc, #16]	; (957c <nrfx_gpiote_init+0x50>)
}
    956c:	bd10      	pop	{r4, pc}
    956e:	bf00      	nop
    9570:	20004080 	.word	0x20004080
    9574:	0bad0005 	.word	0x0bad0005
    9578:	40006000 	.word	0x40006000
    957c:	0bad0000 	.word	0x0bad0000

00009580 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    9580:	4b03      	ldr	r3, [pc, #12]	; (9590 <nrfx_gpiote_is_init+0x10>)
    9582:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    9586:	3800      	subs	r0, #0
    9588:	bf18      	it	ne
    958a:	2001      	movne	r0, #1
    958c:	4770      	bx	lr
    958e:	bf00      	nop
    9590:	20004080 	.word	0x20004080

00009594 <nrfx_gpiote_channel_free>:
{
    9594:	b508      	push	{r3, lr}
    9596:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    9598:	4801      	ldr	r0, [pc, #4]	; (95a0 <nrfx_gpiote_channel_free+0xc>)
    959a:	f7ff f855 	bl	8648 <nrfx_flag32_free>
}
    959e:	bd08      	pop	{r3, pc}
    95a0:	200040f0 	.word	0x200040f0

000095a4 <nrfx_gpiote_channel_alloc>:
{
    95a4:	b508      	push	{r3, lr}
    95a6:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    95a8:	4801      	ldr	r0, [pc, #4]	; (95b0 <nrfx_gpiote_channel_alloc+0xc>)
    95aa:	f7ff f825 	bl	85f8 <nrfx_flag32_alloc>
}
    95ae:	bd08      	pop	{r3, pc}
    95b0:	200040f0 	.word	0x200040f0

000095b4 <nrfx_gpiote_trigger_enable>:
{
    95b4:	b570      	push	{r4, r5, r6, lr}
    95b6:	4604      	mov	r4, r0
    95b8:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    95ba:	f7ff fa2d 	bl	8a18 <pin_has_trigger>
    95be:	b1b8      	cbz	r0, 95f0 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    95c0:	4620      	mov	r0, r4
    95c2:	f7ff fa1f 	bl	8a04 <pin_in_use_by_te>
    95c6:	b118      	cbz	r0, 95d0 <nrfx_gpiote_trigger_enable+0x1c>
    95c8:	4620      	mov	r0, r4
    95ca:	f005 fdd7 	bl	f17c <pin_is_input>
    95ce:	b9e8      	cbnz	r0, 960c <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    95d0:	2d00      	cmp	r5, #0
    95d2:	d04c      	beq.n	966e <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    95d4:	f104 0308 	add.w	r3, r4, #8
    95d8:	4a70      	ldr	r2, [pc, #448]	; (979c <nrfx_gpiote_trigger_enable+0x1e8>)
    95da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    95de:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    95e2:	2b04      	cmp	r3, #4
    95e4:	f000 8092 	beq.w	970c <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    95e8:	2b05      	cmp	r3, #5
    95ea:	d14e      	bne.n	968a <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    95ec:	2602      	movs	r6, #2
    95ee:	e08e      	b.n	970e <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    95f0:	4e6b      	ldr	r6, [pc, #428]	; (97a0 <nrfx_gpiote_trigger_enable+0x1ec>)
    95f2:	f240 33df 	movw	r3, #991	; 0x3df
    95f6:	4632      	mov	r2, r6
    95f8:	496a      	ldr	r1, [pc, #424]	; (97a4 <nrfx_gpiote_trigger_enable+0x1f0>)
    95fa:	486b      	ldr	r0, [pc, #428]	; (97a8 <nrfx_gpiote_trigger_enable+0x1f4>)
    95fc:	f004 ffd7 	bl	e5ae <assert_print>
    9600:	f240 31df 	movw	r1, #991	; 0x3df
    9604:	4630      	mov	r0, r6
    9606:	f004 ffcb 	bl	e5a0 <assert_post_action>
    960a:	e7d9      	b.n	95c0 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    960c:	4620      	mov	r0, r4
    960e:	f7ff fa19 	bl	8a44 <pin_te_get>
    9612:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    9614:	2807      	cmp	r0, #7
    9616:	d81c      	bhi.n	9652 <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    9618:	00a3      	lsls	r3, r4, #2
    961a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    961e:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    9620:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9624:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9628:	2200      	movs	r2, #0
    962a:	601a      	str	r2, [r3, #0]
    962c:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    962e:	4a5f      	ldr	r2, [pc, #380]	; (97ac <nrfx_gpiote_trigger_enable+0x1f8>)
    9630:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    9634:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    9638:	f043 0301 	orr.w	r3, r3, #1
    963c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    9640:	2d00      	cmp	r5, #0
    9642:	f000 80a9 	beq.w	9798 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    9646:	2001      	movs	r0, #1
    9648:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    964c:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    9650:	e0a2      	b.n	9798 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    9652:	4e57      	ldr	r6, [pc, #348]	; (97b0 <nrfx_gpiote_trigger_enable+0x1fc>)
    9654:	f44f 7323 	mov.w	r3, #652	; 0x28c
    9658:	4632      	mov	r2, r6
    965a:	4956      	ldr	r1, [pc, #344]	; (97b4 <nrfx_gpiote_trigger_enable+0x200>)
    965c:	4852      	ldr	r0, [pc, #328]	; (97a8 <nrfx_gpiote_trigger_enable+0x1f4>)
    965e:	f004 ffa6 	bl	e5ae <assert_print>
    9662:	f44f 7123 	mov.w	r1, #652	; 0x28c
    9666:	4630      	mov	r0, r6
    9668:	f004 ff9a 	bl	e5a0 <assert_post_action>
    966c:	e7d4      	b.n	9618 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    966e:	4d4c      	ldr	r5, [pc, #304]	; (97a0 <nrfx_gpiote_trigger_enable+0x1ec>)
    9670:	f240 33ee 	movw	r3, #1006	; 0x3ee
    9674:	462a      	mov	r2, r5
    9676:	4950      	ldr	r1, [pc, #320]	; (97b8 <nrfx_gpiote_trigger_enable+0x204>)
    9678:	484b      	ldr	r0, [pc, #300]	; (97a8 <nrfx_gpiote_trigger_enable+0x1f4>)
    967a:	f004 ff98 	bl	e5ae <assert_print>
    967e:	f240 31ee 	movw	r1, #1006	; 0x3ee
    9682:	4628      	mov	r0, r5
    9684:	f004 ff8c 	bl	e5a0 <assert_post_action>
    9688:	e7a4      	b.n	95d4 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    968a:	0963      	lsrs	r3, r4, #5
    968c:	d01f      	beq.n	96ce <nrfx_gpiote_trigger_enable+0x11a>
    968e:	2b01      	cmp	r3, #1
    9690:	d120      	bne.n	96d4 <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    9692:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9696:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    969a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    969c:	f013 0f01 	tst.w	r3, #1
    96a0:	d01a      	beq.n	96d8 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    96a2:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    96a6:	0963      	lsrs	r3, r4, #5
    96a8:	d024      	beq.n	96f4 <nrfx_gpiote_trigger_enable+0x140>
    96aa:	2b01      	cmp	r3, #1
    96ac:	d025      	beq.n	96fa <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    96ae:	4e43      	ldr	r6, [pc, #268]	; (97bc <nrfx_gpiote_trigger_enable+0x208>)
    96b0:	f240 232e 	movw	r3, #558	; 0x22e
    96b4:	4632      	mov	r2, r6
    96b6:	4942      	ldr	r1, [pc, #264]	; (97c0 <nrfx_gpiote_trigger_enable+0x20c>)
    96b8:	483b      	ldr	r0, [pc, #236]	; (97a8 <nrfx_gpiote_trigger_enable+0x1f4>)
    96ba:	f004 ff78 	bl	e5ae <assert_print>
    96be:	f240 212e 	movw	r1, #558	; 0x22e
    96c2:	4630      	mov	r0, r6
    96c4:	f004 ff6c 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    96c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    96cc:	e016      	b.n	96fc <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    96ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    96d2:	e7e0      	b.n	9696 <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    96d4:	2300      	movs	r3, #0
    96d6:	e7de      	b.n	9696 <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    96d8:	4d38      	ldr	r5, [pc, #224]	; (97bc <nrfx_gpiote_trigger_enable+0x208>)
    96da:	f240 2329 	movw	r3, #553	; 0x229
    96de:	462a      	mov	r2, r5
    96e0:	4938      	ldr	r1, [pc, #224]	; (97c4 <nrfx_gpiote_trigger_enable+0x210>)
    96e2:	4831      	ldr	r0, [pc, #196]	; (97a8 <nrfx_gpiote_trigger_enable+0x1f4>)
    96e4:	f004 ff63 	bl	e5ae <assert_print>
    96e8:	f240 2129 	movw	r1, #553	; 0x229
    96ec:	4628      	mov	r0, r5
    96ee:	f004 ff57 	bl	e5a0 <assert_post_action>
    96f2:	e7d6      	b.n	96a2 <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    96f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    96f8:	e000      	b.n	96fc <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    96fa:	4b33      	ldr	r3, [pc, #204]	; (97c8 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    96fc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    9700:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9702:	f013 0f01 	tst.w	r3, #1
    9706:	d024      	beq.n	9752 <nrfx_gpiote_trigger_enable+0x19e>
    9708:	2603      	movs	r6, #3
    970a:	e000      	b.n	970e <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    970c:	2603      	movs	r6, #3
    switch (port)
    970e:	0963      	lsrs	r3, r4, #5
    9710:	d021      	beq.n	9756 <nrfx_gpiote_trigger_enable+0x1a2>
    9712:	2b01      	cmp	r3, #1
    9714:	d122      	bne.n	975c <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    9716:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    971a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    971e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9720:	f013 0f01 	tst.w	r3, #1
    9724:	d01c      	beq.n	9760 <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    9726:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    972a:	0964      	lsrs	r4, r4, #5
    972c:	d026      	beq.n	977c <nrfx_gpiote_trigger_enable+0x1c8>
    972e:	2c01      	cmp	r4, #1
    9730:	d027      	beq.n	9782 <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    9732:	4c22      	ldr	r4, [pc, #136]	; (97bc <nrfx_gpiote_trigger_enable+0x208>)
    9734:	f240 232e 	movw	r3, #558	; 0x22e
    9738:	4622      	mov	r2, r4
    973a:	4921      	ldr	r1, [pc, #132]	; (97c0 <nrfx_gpiote_trigger_enable+0x20c>)
    973c:	481a      	ldr	r0, [pc, #104]	; (97a8 <nrfx_gpiote_trigger_enable+0x1f4>)
    973e:	f004 ff36 	bl	e5ae <assert_print>
    9742:	f240 212e 	movw	r1, #558	; 0x22e
    9746:	4620      	mov	r0, r4
    9748:	f004 ff2a 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    974c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9750:	e018      	b.n	9784 <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9752:	2602      	movs	r6, #2
    9754:	e7db      	b.n	970e <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    9756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    975a:	e7de      	b.n	971a <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    975c:	2300      	movs	r3, #0
    975e:	e7dc      	b.n	971a <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9760:	4d16      	ldr	r5, [pc, #88]	; (97bc <nrfx_gpiote_trigger_enable+0x208>)
    9762:	f240 2329 	movw	r3, #553	; 0x229
    9766:	462a      	mov	r2, r5
    9768:	4916      	ldr	r1, [pc, #88]	; (97c4 <nrfx_gpiote_trigger_enable+0x210>)
    976a:	480f      	ldr	r0, [pc, #60]	; (97a8 <nrfx_gpiote_trigger_enable+0x1f4>)
    976c:	f004 ff1f 	bl	e5ae <assert_print>
    9770:	f240 2129 	movw	r1, #553	; 0x229
    9774:	4628      	mov	r0, r5
    9776:	f004 ff13 	bl	e5a0 <assert_post_action>
    977a:	e7d4      	b.n	9726 <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    977c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9780:	e000      	b.n	9784 <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9782:	4911      	ldr	r1, [pc, #68]	; (97c8 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9784:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    9788:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    978c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9790:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    9794:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    9798:	bd70      	pop	{r4, r5, r6, pc}
    979a:	bf00      	nop
    979c:	20004080 	.word	0x20004080
    97a0:	000115c0 	.word	0x000115c0
    97a4:	00011664 	.word	0x00011664
    97a8:	000100e4 	.word	0x000100e4
    97ac:	40006000 	.word	0x40006000
    97b0:	00011620 	.word	0x00011620
    97b4:	00011658 	.word	0x00011658
    97b8:	0001167c 	.word	0x0001167c
    97bc:	0001139c 	.word	0x0001139c
    97c0:	000107a0 	.word	0x000107a0
    97c4:	000113d0 	.word	0x000113d0
    97c8:	50000300 	.word	0x50000300

000097cc <nrfx_gpiote_trigger_disable>:
{
    97cc:	b538      	push	{r3, r4, r5, lr}
    97ce:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    97d0:	f7ff f918 	bl	8a04 <pin_in_use_by_te>
    97d4:	b1a0      	cbz	r0, 9800 <nrfx_gpiote_trigger_disable+0x34>
    97d6:	4620      	mov	r0, r4
    97d8:	f005 fcd0 	bl	f17c <pin_is_input>
    97dc:	b180      	cbz	r0, 9800 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    97de:	4620      	mov	r0, r4
    97e0:	f7ff f930 	bl	8a44 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    97e4:	2201      	movs	r2, #1
    97e6:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    97e8:	4b26      	ldr	r3, [pc, #152]	; (9884 <nrfx_gpiote_trigger_disable+0xb8>)
    97ea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    97ee:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    97f2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    97f6:	f022 0203 	bic.w	r2, r2, #3
    97fa:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    97fe:	e040      	b.n	9882 <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    9800:	0963      	lsrs	r3, r4, #5
    9802:	d01f      	beq.n	9844 <nrfx_gpiote_trigger_disable+0x78>
    9804:	2b01      	cmp	r3, #1
    9806:	d120      	bne.n	984a <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    9808:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    980c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9810:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9812:	f013 0f01 	tst.w	r3, #1
    9816:	d01a      	beq.n	984e <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    9818:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    981c:	0964      	lsrs	r4, r4, #5
    981e:	d024      	beq.n	986a <nrfx_gpiote_trigger_disable+0x9e>
    9820:	2c01      	cmp	r4, #1
    9822:	d025      	beq.n	9870 <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    9824:	4c18      	ldr	r4, [pc, #96]	; (9888 <nrfx_gpiote_trigger_disable+0xbc>)
    9826:	f240 232e 	movw	r3, #558	; 0x22e
    982a:	4622      	mov	r2, r4
    982c:	4917      	ldr	r1, [pc, #92]	; (988c <nrfx_gpiote_trigger_disable+0xc0>)
    982e:	4818      	ldr	r0, [pc, #96]	; (9890 <nrfx_gpiote_trigger_disable+0xc4>)
    9830:	f004 febd 	bl	e5ae <assert_print>
    9834:	f240 212e 	movw	r1, #558	; 0x22e
    9838:	4620      	mov	r0, r4
    983a:	f004 feb1 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    983e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9842:	e016      	b.n	9872 <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    9844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9848:	e7e0      	b.n	980c <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    984a:	2300      	movs	r3, #0
    984c:	e7de      	b.n	980c <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    984e:	4d0e      	ldr	r5, [pc, #56]	; (9888 <nrfx_gpiote_trigger_disable+0xbc>)
    9850:	f240 2329 	movw	r3, #553	; 0x229
    9854:	462a      	mov	r2, r5
    9856:	490f      	ldr	r1, [pc, #60]	; (9894 <nrfx_gpiote_trigger_disable+0xc8>)
    9858:	480d      	ldr	r0, [pc, #52]	; (9890 <nrfx_gpiote_trigger_disable+0xc4>)
    985a:	f004 fea8 	bl	e5ae <assert_print>
    985e:	f240 2129 	movw	r1, #553	; 0x229
    9862:	4628      	mov	r0, r5
    9864:	f004 fe9c 	bl	e5a0 <assert_post_action>
    9868:	e7d6      	b.n	9818 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    986a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    986e:	e000      	b.n	9872 <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9870:	4909      	ldr	r1, [pc, #36]	; (9898 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9872:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    9876:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    987a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    987e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9882:	bd38      	pop	{r3, r4, r5, pc}
    9884:	40006000 	.word	0x40006000
    9888:	0001139c 	.word	0x0001139c
    988c:	000107a0 	.word	0x000107a0
    9890:	000100e4 	.word	0x000100e4
    9894:	000113d0 	.word	0x000113d0
    9898:	50000300 	.word	0x50000300

0000989c <nrfx_gpiote_pin_uninit>:
{
    989c:	b538      	push	{r3, r4, r5, lr}
    989e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    98a0:	f7ff f8a6 	bl	89f0 <pin_in_use>
    98a4:	b908      	cbnz	r0, 98aa <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    98a6:	4824      	ldr	r0, [pc, #144]	; (9938 <nrfx_gpiote_pin_uninit+0x9c>)
}
    98a8:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    98aa:	4620      	mov	r0, r4
    98ac:	f7ff ff8e 	bl	97cc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    98b0:	4620      	mov	r0, r4
    98b2:	f7ff f95f 	bl	8b74 <pin_handler_trigger_uninit>
    switch (port)
    98b6:	0963      	lsrs	r3, r4, #5
    98b8:	d01f      	beq.n	98fa <nrfx_gpiote_pin_uninit+0x5e>
    98ba:	2b01      	cmp	r3, #1
    98bc:	d120      	bne.n	9900 <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    98be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    98c2:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    98c6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    98c8:	f013 0f01 	tst.w	r3, #1
    98cc:	d01a      	beq.n	9904 <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    98ce:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    98d2:	0964      	lsrs	r4, r4, #5
    98d4:	d024      	beq.n	9920 <nrfx_gpiote_pin_uninit+0x84>
    98d6:	2c01      	cmp	r4, #1
    98d8:	d025      	beq.n	9926 <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    98da:	4c18      	ldr	r4, [pc, #96]	; (993c <nrfx_gpiote_pin_uninit+0xa0>)
    98dc:	f240 232e 	movw	r3, #558	; 0x22e
    98e0:	4622      	mov	r2, r4
    98e2:	4917      	ldr	r1, [pc, #92]	; (9940 <nrfx_gpiote_pin_uninit+0xa4>)
    98e4:	4817      	ldr	r0, [pc, #92]	; (9944 <nrfx_gpiote_pin_uninit+0xa8>)
    98e6:	f004 fe62 	bl	e5ae <assert_print>
    98ea:	f240 212e 	movw	r1, #558	; 0x22e
    98ee:	4620      	mov	r0, r4
    98f0:	f004 fe56 	bl	e5a0 <assert_post_action>
        case 0: return NRF_P0;
    98f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    98f8:	e016      	b.n	9928 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    98fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    98fe:	e7e0      	b.n	98c2 <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    9900:	2300      	movs	r3, #0
    9902:	e7de      	b.n	98c2 <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9904:	4d0d      	ldr	r5, [pc, #52]	; (993c <nrfx_gpiote_pin_uninit+0xa0>)
    9906:	f240 2329 	movw	r3, #553	; 0x229
    990a:	462a      	mov	r2, r5
    990c:	490e      	ldr	r1, [pc, #56]	; (9948 <nrfx_gpiote_pin_uninit+0xac>)
    990e:	480d      	ldr	r0, [pc, #52]	; (9944 <nrfx_gpiote_pin_uninit+0xa8>)
    9910:	f004 fe4d 	bl	e5ae <assert_print>
    9914:	f240 2129 	movw	r1, #553	; 0x229
    9918:	4628      	mov	r0, r5
    991a:	f004 fe41 	bl	e5a0 <assert_post_action>
    991e:	e7d6      	b.n	98ce <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    9920:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9924:	e000      	b.n	9928 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9926:	4b09      	ldr	r3, [pc, #36]	; (994c <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    9928:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    992c:	2202      	movs	r2, #2
    992e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    9932:	4807      	ldr	r0, [pc, #28]	; (9950 <nrfx_gpiote_pin_uninit+0xb4>)
}
    9934:	e7b8      	b.n	98a8 <nrfx_gpiote_pin_uninit+0xc>
    9936:	bf00      	nop
    9938:	0bad0004 	.word	0x0bad0004
    993c:	0001139c 	.word	0x0001139c
    9940:	000107a0 	.word	0x000107a0
    9944:	000100e4 	.word	0x000100e4
    9948:	000113d0 	.word	0x000113d0
    994c:	50000300 	.word	0x50000300
    9950:	0bad0000 	.word	0x0bad0000

00009954 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    9954:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    9956:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    9958:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    995c:	2100      	movs	r1, #0
    uint32_t status = 0;
    995e:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9960:	e003      	b.n	996a <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    9962:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    9964:	3304      	adds	r3, #4
    9966:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9968:	3101      	adds	r1, #1
    996a:	2907      	cmp	r1, #7
    996c:	d814      	bhi.n	9998 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    996e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    9972:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    9976:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    9978:	2a00      	cmp	r2, #0
    997a:	d0f2      	beq.n	9962 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    997c:	4a0c      	ldr	r2, [pc, #48]	; (99b0 <nrfx_gpiote_irq_handler+0x5c>)
    997e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    9982:	4210      	tst	r0, r2
    9984:	d0ed      	beq.n	9962 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    9986:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    998a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    998e:	2500      	movs	r5, #0
    9990:	6015      	str	r5, [r2, #0]
    9992:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    9994:	4304      	orrs	r4, r0
    9996:	e7e4      	b.n	9962 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9998:	4b05      	ldr	r3, [pc, #20]	; (99b0 <nrfx_gpiote_irq_handler+0x5c>)
    999a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    999e:	b91b      	cbnz	r3, 99a8 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    99a0:	4620      	mov	r0, r4
    99a2:	f7ff f939 	bl	8c18 <gpiote_evt_handle>
}
    99a6:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    99a8:	f7ff fac2 	bl	8f30 <port_event_handle>
    99ac:	e7f8      	b.n	99a0 <nrfx_gpiote_irq_handler+0x4c>
    99ae:	bf00      	nop
    99b0:	40006000 	.word	0x40006000

000099b4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    99b4:	b508      	push	{r3, lr}
    99b6:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    99b8:	4801      	ldr	r0, [pc, #4]	; (99c0 <nrfx_ppi_channel_alloc+0xc>)
    99ba:	f7fe fe1d 	bl	85f8 <nrfx_flag32_alloc>
}
    99be:	bd08      	pop	{r3, pc}
    99c0:	200040fc 	.word	0x200040fc

000099c4 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    99c4:	4b12      	ldr	r3, [pc, #72]	; (9a10 <_DoInit+0x4c>)
    99c6:	2203      	movs	r2, #3
    99c8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    99ca:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    99cc:	4911      	ldr	r1, [pc, #68]	; (9a14 <_DoInit+0x50>)
    99ce:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    99d0:	4a11      	ldr	r2, [pc, #68]	; (9a18 <_DoInit+0x54>)
    99d2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    99d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    99d8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    99da:	2200      	movs	r2, #0
    99dc:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    99de:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    99e0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    99e2:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    99e4:	490d      	ldr	r1, [pc, #52]	; (9a1c <_DoInit+0x58>)
    99e6:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    99e8:	2110      	movs	r1, #16
    99ea:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    99ec:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    99ee:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    99f0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    99f2:	4a0b      	ldr	r2, [pc, #44]	; (9a20 <_DoInit+0x5c>)
    99f4:	6810      	ldr	r0, [r2, #0]
    99f6:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    99fa:	4a0a      	ldr	r2, [pc, #40]	; (9a24 <_DoInit+0x60>)
    99fc:	e892 0003 	ldmia.w	r2, {r0, r1}
    9a00:	6018      	str	r0, [r3, #0]
    9a02:	8099      	strh	r1, [r3, #4]
    9a04:	0c09      	lsrs	r1, r1, #16
    9a06:	7199      	strb	r1, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    9a08:	2220      	movs	r2, #32
    9a0a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    9a0c:	4770      	bx	lr
    9a0e:	bf00      	nop
    9a10:	20004e6c 	.word	0x20004e6c
    9a14:	00011688 	.word	0x00011688
    9a18:	20004f24 	.word	0x20004f24
    9a1c:	20004f14 	.word	0x20004f14
    9a20:	00011694 	.word	0x00011694
    9a24:	00011698 	.word	0x00011698

00009a28 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    9a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9a2c:	4604      	mov	r4, r0
    9a2e:	460e      	mov	r6, r1
    9a30:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    9a32:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    9a36:	4a2d      	ldr	r2, [pc, #180]	; (9aec <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    9a38:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    9a3c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    9a3e:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    9a40:	42bb      	cmp	r3, r7
    9a42:	d84b      	bhi.n	9adc <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    9a44:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    9a48:	4928      	ldr	r1, [pc, #160]	; (9aec <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    9a4a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    9a4e:	f8d2 8020 	ldr.w	r8, [r2, #32]
    9a52:	eba8 0907 	sub.w	r9, r8, r7
    9a56:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    9a5a:	4295      	cmp	r5, r2
    9a5c:	d904      	bls.n	9a68 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    9a5e:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    9a60:	429d      	cmp	r5, r3
    9a62:	d917      	bls.n	9a94 <SEGGER_RTT_WriteSkipNoLock+0x6c>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    9a64:	2000      	movs	r0, #0
    9a66:	e03e      	b.n	9ae6 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    9a68:	f8df 8080 	ldr.w	r8, [pc, #128]	; 9aec <SEGGER_RTT_WriteSkipNoLock+0xc4>
    9a6c:	1c63      	adds	r3, r4, #1
    9a6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9a72:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    9a76:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    9a78:	462a      	mov	r2, r5
    9a7a:	4631      	mov	r1, r6
    9a7c:	4438      	add	r0, r7
    9a7e:	f005 fcb5 	bl	f3ec <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    9a82:	443d      	add	r5, r7
    9a84:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    9a88:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
    9a8c:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
      return 1;
    9a90:	2001      	movs	r0, #1
    9a92:	e028      	b.n	9ae6 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    9a94:	1c43      	adds	r3, r0, #1
    9a96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9a9a:	4a14      	ldr	r2, [pc, #80]	; (9aec <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    9a9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    9aa0:	6858      	ldr	r0, [r3, #4]
    9aa2:	464a      	mov	r2, r9
    9aa4:	4631      	mov	r1, r6
    9aa6:	4438      	add	r0, r7
    9aa8:	f005 fca0 	bl	f3ec <memcpy>
      NumBytes -= Rem;
    9aac:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    9ab0:	197f      	adds	r7, r7, r5
    9ab2:	d00b      	beq.n	9acc <SEGGER_RTT_WriteSkipNoLock+0xa4>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    9ab4:	1c63      	adds	r3, r4, #1
    9ab6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9aba:	4a0c      	ldr	r2, [pc, #48]	; (9aec <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    9abc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    9ac0:	463a      	mov	r2, r7
    9ac2:	eb06 0109 	add.w	r1, r6, r9
    9ac6:	6858      	ldr	r0, [r3, #4]
    9ac8:	f005 fc90 	bl	f3ec <memcpy>
      pRing->WrOff = NumBytes;
    9acc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    9ad0:	4b06      	ldr	r3, [pc, #24]	; (9aec <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    9ad2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    9ad6:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    9ad8:	2001      	movs	r0, #1
    9ada:	e004      	b.n	9ae6 <SEGGER_RTT_WriteSkipNoLock+0xbe>
    Avail = RdOff - WrOff - 1u;
    9adc:	1bdb      	subs	r3, r3, r7
    9ade:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    9ae0:	42ab      	cmp	r3, r5
    9ae2:	d2c1      	bcs.n	9a68 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    9ae4:	2000      	movs	r0, #0
}
    9ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9aea:	bf00      	nop
    9aec:	20004e6c 	.word	0x20004e6c

00009af0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    9af0:	4b06      	ldr	r3, [pc, #24]	; (9b0c <SEGGER_RTT_HasDataUp+0x1c>)
    9af2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    9af6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    9afa:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    9afc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9b00:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    9b04:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    9b06:	1a80      	subs	r0, r0, r2
    9b08:	4770      	bx	lr
    9b0a:	bf00      	nop
    9b0c:	20004e6c 	.word	0x20004e6c

00009b10 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    9b10:	4b03      	ldr	r3, [pc, #12]	; (9b20 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    9b12:	e000      	b.n	9b16 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    9b14:	3318      	adds	r3, #24
	while (dev < __device_end) {
    9b16:	4a03      	ldr	r2, [pc, #12]	; (9b24 <z_device_state_init+0x14>)
    9b18:	4293      	cmp	r3, r2
    9b1a:	d3fb      	bcc.n	9b14 <z_device_state_init+0x4>
	}
}
    9b1c:	4770      	bx	lr
    9b1e:	bf00      	nop
    9b20:	0000fa98 	.word	0x0000fa98
    9b24:	0000fb10 	.word	0x0000fb10

00009b28 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    9b28:	b570      	push	{r4, r5, r6, lr}
    9b2a:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    9b2c:	4b11      	ldr	r3, [pc, #68]	; (9b74 <z_sys_init_run_level+0x4c>)
    9b2e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    9b32:	e009      	b.n	9b48 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    9b34:	4240      	negs	r0, r0
    9b36:	e017      	b.n	9b68 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    9b38:	68eb      	ldr	r3, [r5, #12]
    9b3a:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    9b3c:	68ea      	ldr	r2, [r5, #12]
    9b3e:	7853      	ldrb	r3, [r2, #1]
    9b40:	f043 0301 	orr.w	r3, r3, #1
    9b44:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    9b46:	3408      	adds	r4, #8
    9b48:	1c73      	adds	r3, r6, #1
    9b4a:	4a0a      	ldr	r2, [pc, #40]	; (9b74 <z_sys_init_run_level+0x4c>)
    9b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b50:	42a3      	cmp	r3, r4
    9b52:	d90d      	bls.n	9b70 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    9b54:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    9b56:	6823      	ldr	r3, [r4, #0]
    9b58:	4628      	mov	r0, r5
    9b5a:	4798      	blx	r3
		if (dev != NULL) {
    9b5c:	2d00      	cmp	r5, #0
    9b5e:	d0f2      	beq.n	9b46 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    9b60:	2800      	cmp	r0, #0
    9b62:	d0eb      	beq.n	9b3c <z_sys_init_run_level+0x14>
				if (rc < 0) {
    9b64:	2800      	cmp	r0, #0
    9b66:	dbe5      	blt.n	9b34 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    9b68:	28ff      	cmp	r0, #255	; 0xff
    9b6a:	dde5      	ble.n	9b38 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    9b6c:	20ff      	movs	r0, #255	; 0xff
    9b6e:	e7e3      	b.n	9b38 <z_sys_init_run_level+0x10>
		}
	}
}
    9b70:	bd70      	pop	{r4, r5, r6, pc}
    9b72:	bf00      	nop
    9b74:	000116a0 	.word	0x000116a0

00009b78 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    9b78:	4b01      	ldr	r3, [pc, #4]	; (9b80 <z_impl_z_errno+0x8>)
    9b7a:	6898      	ldr	r0, [r3, #8]
}
    9b7c:	3094      	adds	r0, #148	; 0x94
    9b7e:	4770      	bx	lr
    9b80:	20005324 	.word	0x20005324

00009b84 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    9b84:	2804      	cmp	r0, #4
    9b86:	d80c      	bhi.n	9ba2 <reason_to_str+0x1e>
    9b88:	e8df f000 	tbb	[pc, r0]
    9b8c:	07050d03 	.word	0x07050d03
    9b90:	09          	.byte	0x09
    9b91:	00          	.byte	0x00
    9b92:	4806      	ldr	r0, [pc, #24]	; (9bac <reason_to_str+0x28>)
    9b94:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    9b96:	4806      	ldr	r0, [pc, #24]	; (9bb0 <reason_to_str+0x2c>)
    9b98:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    9b9a:	4806      	ldr	r0, [pc, #24]	; (9bb4 <reason_to_str+0x30>)
    9b9c:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    9b9e:	4806      	ldr	r0, [pc, #24]	; (9bb8 <reason_to_str+0x34>)
    9ba0:	4770      	bx	lr
	default:
		return "Unknown error";
    9ba2:	4806      	ldr	r0, [pc, #24]	; (9bbc <reason_to_str+0x38>)
    9ba4:	4770      	bx	lr
		return "Unhandled interrupt";
    9ba6:	4806      	ldr	r0, [pc, #24]	; (9bc0 <reason_to_str+0x3c>)
	}
}
    9ba8:	4770      	bx	lr
    9baa:	bf00      	nop
    9bac:	00011708 	.word	0x00011708
    9bb0:	000116dc 	.word	0x000116dc
    9bb4:	000116ec 	.word	0x000116ec
    9bb8:	000116f8 	.word	0x000116f8
    9bbc:	000116b8 	.word	0x000116b8
    9bc0:	000116c8 	.word	0x000116c8

00009bc4 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    9bc4:	b130      	cbz	r0, 9bd4 <thread_name_get+0x10>
{
    9bc6:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    9bc8:	f005 fb51 	bl	f26e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    9bcc:	b120      	cbz	r0, 9bd8 <thread_name_get+0x14>
    9bce:	7803      	ldrb	r3, [r0, #0]
    9bd0:	b123      	cbz	r3, 9bdc <thread_name_get+0x18>
}
    9bd2:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    9bd4:	4802      	ldr	r0, [pc, #8]	; (9be0 <thread_name_get+0x1c>)
}
    9bd6:	4770      	bx	lr
		thread_name = "unknown";
    9bd8:	4801      	ldr	r0, [pc, #4]	; (9be0 <thread_name_get+0x1c>)
    9bda:	e7fa      	b.n	9bd2 <thread_name_get+0xe>
    9bdc:	4800      	ldr	r0, [pc, #0]	; (9be0 <thread_name_get+0x1c>)
	return thread_name;
    9bde:	e7f8      	b.n	9bd2 <thread_name_get+0xe>
    9be0:	00011718 	.word	0x00011718

00009be4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    9be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9be6:	b087      	sub	sp, #28
    9be8:	4604      	mov	r4, r0
    9bea:	460e      	mov	r6, r1
	__asm__ volatile(
    9bec:	f04f 0320 	mov.w	r3, #32
    9bf0:	f3ef 8711 	mrs	r7, BASEPRI
    9bf4:	f383 8812 	msr	BASEPRI_MAX, r3
    9bf8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    9bfc:	f002 f918 	bl	be30 <z_impl_z_current_get>
    9c00:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    9c02:	4620      	mov	r0, r4
    9c04:	f7ff ffbe 	bl	9b84 <reason_to_str>
    9c08:	2300      	movs	r3, #0
    9c0a:	9305      	str	r3, [sp, #20]
    9c0c:	9004      	str	r0, [sp, #16]
    9c0e:	9403      	str	r4, [sp, #12]
    9c10:	4a22      	ldr	r2, [pc, #136]	; (9c9c <z_fatal_error+0xb8>)
    9c12:	9202      	str	r2, [sp, #8]
    9c14:	9301      	str	r3, [sp, #4]
    9c16:	9300      	str	r3, [sp, #0]
    9c18:	2201      	movs	r2, #1
    9c1a:	4921      	ldr	r1, [pc, #132]	; (9ca0 <z_fatal_error+0xbc>)
    9c1c:	4618      	mov	r0, r3
    9c1e:	f005 fad1 	bl	f1c4 <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    9c22:	b11e      	cbz	r6, 9c2c <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    9c24:	69f3      	ldr	r3, [r6, #28]
    9c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
    9c2a:	b9eb      	cbnz	r3, 9c68 <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    9c2c:	4628      	mov	r0, r5
    9c2e:	f7ff ffc9 	bl	9bc4 <thread_name_get>
    9c32:	9004      	str	r0, [sp, #16]
    9c34:	9503      	str	r5, [sp, #12]
    9c36:	4b1b      	ldr	r3, [pc, #108]	; (9ca4 <z_fatal_error+0xc0>)
    9c38:	9302      	str	r3, [sp, #8]
    9c3a:	2000      	movs	r0, #0
    9c3c:	9001      	str	r0, [sp, #4]
    9c3e:	9000      	str	r0, [sp, #0]
    9c40:	4603      	mov	r3, r0
    9c42:	2201      	movs	r2, #1
    9c44:	4916      	ldr	r1, [pc, #88]	; (9ca0 <z_fatal_error+0xbc>)
    9c46:	f005 fabd 	bl	f1c4 <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    9c4a:	4631      	mov	r1, r6
    9c4c:	4620      	mov	r0, r4
    9c4e:	f7fe fbcd 	bl	83ec <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    9c52:	2c04      	cmp	r4, #4
    9c54:	d013      	beq.n	9c7e <z_fatal_error+0x9a>
	__asm__ volatile(
    9c56:	f387 8811 	msr	BASEPRI, r7
    9c5a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    9c5e:	4628      	mov	r0, r5
    9c60:	f7fc fc64 	bl	652c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    9c64:	b007      	add	sp, #28
    9c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
    9c68:	4b0f      	ldr	r3, [pc, #60]	; (9ca8 <z_fatal_error+0xc4>)
    9c6a:	9302      	str	r3, [sp, #8]
    9c6c:	2000      	movs	r0, #0
    9c6e:	9001      	str	r0, [sp, #4]
    9c70:	9000      	str	r0, [sp, #0]
    9c72:	4603      	mov	r3, r0
    9c74:	2201      	movs	r2, #1
    9c76:	490a      	ldr	r1, [pc, #40]	; (9ca0 <z_fatal_error+0xbc>)
    9c78:	f005 faa4 	bl	f1c4 <z_log_msg2_runtime_create>
    9c7c:	e7d6      	b.n	9c2c <z_fatal_error+0x48>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    9c7e:	4c0b      	ldr	r4, [pc, #44]	; (9cac <z_fatal_error+0xc8>)
    9c80:	238f      	movs	r3, #143	; 0x8f
    9c82:	4622      	mov	r2, r4
    9c84:	490a      	ldr	r1, [pc, #40]	; (9cb0 <z_fatal_error+0xcc>)
    9c86:	480b      	ldr	r0, [pc, #44]	; (9cb4 <z_fatal_error+0xd0>)
    9c88:	f004 fc91 	bl	e5ae <assert_print>
    9c8c:	480a      	ldr	r0, [pc, #40]	; (9cb8 <z_fatal_error+0xd4>)
    9c8e:	f004 fc8e 	bl	e5ae <assert_print>
    9c92:	218f      	movs	r1, #143	; 0x8f
    9c94:	4620      	mov	r0, r4
    9c96:	f004 fc83 	bl	e5a0 <assert_post_action>
    9c9a:	e7dc      	b.n	9c56 <z_fatal_error+0x72>
    9c9c:	00011720 	.word	0x00011720
    9ca0:	0000fcb8 	.word	0x0000fcb8
    9ca4:	0001176c 	.word	0x0001176c
    9ca8:	00011748 	.word	0x00011748
    9cac:	00011784 	.word	0x00011784
    9cb0:	000117a8 	.word	0x000117a8
    9cb4:	000100e4 	.word	0x000100e4
    9cb8:	000117c8 	.word	0x000117c8

00009cbc <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    9cbc:	b510      	push	{r4, lr}
    9cbe:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    9cc0:	4c11      	ldr	r4, [pc, #68]	; (9d08 <init_idle_thread+0x4c>)
    9cc2:	23b0      	movs	r3, #176	; 0xb0
    9cc4:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    9cc8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    9ccc:	4b0f      	ldr	r3, [pc, #60]	; (9d0c <init_idle_thread+0x50>)
    9cce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    9cd2:	4a0f      	ldr	r2, [pc, #60]	; (9d10 <init_idle_thread+0x54>)
    9cd4:	9205      	str	r2, [sp, #20]
    9cd6:	2201      	movs	r2, #1
    9cd8:	9204      	str	r2, [sp, #16]
    9cda:	220f      	movs	r2, #15
    9cdc:	9203      	str	r2, [sp, #12]
    9cde:	2200      	movs	r2, #0
    9ce0:	9202      	str	r2, [sp, #8]
    9ce2:	9201      	str	r2, [sp, #4]
    9ce4:	9300      	str	r3, [sp, #0]
    9ce6:	4b0b      	ldr	r3, [pc, #44]	; (9d14 <init_idle_thread+0x58>)
    9ce8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    9cec:	490a      	ldr	r1, [pc, #40]	; (9d18 <init_idle_thread+0x5c>)
    9cee:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    9cf2:	fb0c 1100 	mla	r1, ip, r0, r1
    9cf6:	4620      	mov	r0, r4
    9cf8:	f000 fa76 	bl	a1e8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9cfc:	7b63      	ldrb	r3, [r4, #13]
    9cfe:	f023 0304 	bic.w	r3, r3, #4
    9d02:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    9d04:	b006      	add	sp, #24
    9d06:	bd10      	pop	{r4, pc}
    9d08:	20004618 	.word	0x20004618
    9d0c:	20005324 	.word	0x20005324
    9d10:	00011800 	.word	0x00011800
    9d14:	0000a4fd 	.word	0x0000a4fd
    9d18:	20006e40 	.word	0x20006e40

00009d1c <bg_thread_main>:
{
    9d1c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    9d1e:	4b0a      	ldr	r3, [pc, #40]	; (9d48 <bg_thread_main+0x2c>)
    9d20:	2201      	movs	r2, #1
    9d22:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    9d24:	2002      	movs	r0, #2
    9d26:	f7ff feff 	bl	9b28 <z_sys_init_run_level>
	boot_banner();
    9d2a:	f002 fca9 	bl	c680 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    9d2e:	2003      	movs	r0, #3
    9d30:	f7ff fefa 	bl	9b28 <z_sys_init_run_level>
	z_init_static_threads();
    9d34:	f000 fb68 	bl	a408 <z_init_static_threads>
	main();
    9d38:	f7f9 fa00 	bl	313c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    9d3c:	4a03      	ldr	r2, [pc, #12]	; (9d4c <bg_thread_main+0x30>)
    9d3e:	7b13      	ldrb	r3, [r2, #12]
    9d40:	f023 0301 	bic.w	r3, r3, #1
    9d44:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    9d46:	bd08      	pop	{r3, pc}
    9d48:	20005560 	.word	0x20005560
    9d4c:	200046c8 	.word	0x200046c8

00009d50 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    9d50:	b508      	push	{r3, lr}
    9d52:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    9d54:	4a01      	ldr	r2, [pc, #4]	; (9d5c <switch_to_main_thread+0xc>)
    9d56:	4802      	ldr	r0, [pc, #8]	; (9d60 <switch_to_main_thread+0x10>)
    9d58:	f7fb ff9c 	bl	5c94 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    9d5c:	00009d1d 	.word	0x00009d1d
    9d60:	200046c8 	.word	0x200046c8

00009d64 <z_bss_zero>:
{
    9d64:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    9d66:	4803      	ldr	r0, [pc, #12]	; (9d74 <z_bss_zero+0x10>)
    9d68:	4a03      	ldr	r2, [pc, #12]	; (9d78 <z_bss_zero+0x14>)
    9d6a:	1a12      	subs	r2, r2, r0
    9d6c:	2100      	movs	r1, #0
    9d6e:	f005 fa38 	bl	f1e2 <z_early_memset>
}
    9d72:	bd08      	pop	{r3, pc}
    9d74:	20004288 	.word	0x20004288
    9d78:	20005564 	.word	0x20005564

00009d7c <z_init_cpu>:
{
    9d7c:	b510      	push	{r4, lr}
    9d7e:	4604      	mov	r4, r0
	init_idle_thread(id);
    9d80:	f7ff ff9c 	bl	9cbc <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    9d84:	490b      	ldr	r1, [pc, #44]	; (9db4 <z_init_cpu+0x38>)
    9d86:	23b0      	movs	r3, #176	; 0xb0
    9d88:	fb03 1104 	mla	r1, r3, r4, r1
    9d8c:	4a0a      	ldr	r2, [pc, #40]	; (9db8 <z_init_cpu+0x3c>)
    9d8e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    9d92:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    9d96:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    9d98:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    9d9a:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    9d9e:	4b07      	ldr	r3, [pc, #28]	; (9dbc <z_init_cpu+0x40>)
    9da0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    9da4:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    9da8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    9dac:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    9db0:	6063      	str	r3, [r4, #4]
}
    9db2:	bd10      	pop	{r4, pc}
    9db4:	20004618 	.word	0x20004618
    9db8:	20005324 	.word	0x20005324
    9dbc:	20006fa0 	.word	0x20006fa0

00009dc0 <prepare_multithreading>:
{
    9dc0:	b570      	push	{r4, r5, r6, lr}
    9dc2:	b086      	sub	sp, #24
	z_sched_init();
    9dc4:	f001 fe70 	bl	baa8 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    9dc8:	4d10      	ldr	r5, [pc, #64]	; (9e0c <prepare_multithreading+0x4c>)
    9dca:	4b11      	ldr	r3, [pc, #68]	; (9e10 <prepare_multithreading+0x50>)
    9dcc:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    9dce:	4b11      	ldr	r3, [pc, #68]	; (9e14 <prepare_multithreading+0x54>)
    9dd0:	9305      	str	r3, [sp, #20]
    9dd2:	2301      	movs	r3, #1
    9dd4:	9304      	str	r3, [sp, #16]
    9dd6:	2400      	movs	r4, #0
    9dd8:	9403      	str	r4, [sp, #12]
    9dda:	9402      	str	r4, [sp, #8]
    9ddc:	9401      	str	r4, [sp, #4]
    9dde:	9400      	str	r4, [sp, #0]
    9de0:	4b0d      	ldr	r3, [pc, #52]	; (9e18 <prepare_multithreading+0x58>)
    9de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9de6:	490d      	ldr	r1, [pc, #52]	; (9e1c <prepare_multithreading+0x5c>)
    9de8:	4628      	mov	r0, r5
    9dea:	f000 f9fd 	bl	a1e8 <z_setup_new_thread>
    9dee:	4606      	mov	r6, r0
    9df0:	7b6b      	ldrb	r3, [r5, #13]
    9df2:	f023 0304 	bic.w	r3, r3, #4
    9df6:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    9df8:	4628      	mov	r0, r5
    9dfa:	f001 f9d9 	bl	b1b0 <z_ready_thread>
	z_init_cpu(0);
    9dfe:	4620      	mov	r0, r4
    9e00:	f7ff ffbc 	bl	9d7c <z_init_cpu>
}
    9e04:	4630      	mov	r0, r6
    9e06:	b006      	add	sp, #24
    9e08:	bd70      	pop	{r4, r5, r6, pc}
    9e0a:	bf00      	nop
    9e0c:	200046c8 	.word	0x200046c8
    9e10:	20005324 	.word	0x20005324
    9e14:	00011808 	.word	0x00011808
    9e18:	00009d1d 	.word	0x00009d1d
    9e1c:	20006a20 	.word	0x20006a20

00009e20 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    9e20:	b500      	push	{lr}
    9e22:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    9e24:	4b1f      	ldr	r3, [pc, #124]	; (9ea4 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    9e26:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    9e2a:	4c1f      	ldr	r4, [pc, #124]	; (9ea8 <z_cstart+0x88>)
    9e2c:	6963      	ldr	r3, [r4, #20]
    9e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    9e32:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9e34:	23e0      	movs	r3, #224	; 0xe0
    9e36:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    9e3a:	2500      	movs	r5, #0
    9e3c:	77e5      	strb	r5, [r4, #31]
    9e3e:	7625      	strb	r5, [r4, #24]
    9e40:	7665      	strb	r5, [r4, #25]
    9e42:	76a5      	strb	r5, [r4, #26]
    9e44:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    9e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9e4a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    9e4e:	6263      	str	r3, [r4, #36]	; 0x24
    9e50:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    9e54:	f7fc fad6 	bl	6404 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    9e58:	f7fb fda0 	bl	599c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    9e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9e60:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    9e62:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    9e64:	f7fc fc82 	bl	676c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    9e68:	f7fc fb7a 	bl	6560 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    9e6c:	f7fa feba 	bl	4be4 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    9e70:	2401      	movs	r4, #1
    9e72:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    9e76:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    9e7a:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    9e7c:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    9e7e:	4668      	mov	r0, sp
    9e80:	f002 fbf8 	bl	c674 <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    9e84:	4b09      	ldr	r3, [pc, #36]	; (9eac <z_cstart+0x8c>)
    9e86:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    9e8a:	f7ff fe41 	bl	9b10 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    9e8e:	4628      	mov	r0, r5
    9e90:	f7ff fe4a 	bl	9b28 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    9e94:	4620      	mov	r0, r4
    9e96:	f7ff fe47 	bl	9b28 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    9e9a:	f7ff ff91 	bl	9dc0 <prepare_multithreading>
    9e9e:	f7ff ff57 	bl	9d50 <switch_to_main_thread>
    9ea2:	bf00      	nop
    9ea4:	200077c0 	.word	0x200077c0
    9ea8:	e000ed00 	.word	0xe000ed00
    9eac:	20005324 	.word	0x20005324

00009eb0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    9eb0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    9eb2:	4c10      	ldr	r4, [pc, #64]	; (9ef4 <init_mem_slab_module+0x44>)
	int rc = 0;
    9eb4:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    9eb6:	e008      	b.n	9eca <init_mem_slab_module+0x1a>
    9eb8:	4b0f      	ldr	r3, [pc, #60]	; (9ef8 <init_mem_slab_module+0x48>)
    9eba:	429c      	cmp	r4, r3
    9ebc:	d217      	bcs.n	9eee <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    9ebe:	4620      	mov	r0, r4
    9ec0:	f005 f997 	bl	f1f2 <create_free_list>
		if (rc < 0) {
    9ec4:	1e05      	subs	r5, r0, #0
    9ec6:	db12      	blt.n	9eee <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    9ec8:	3420      	adds	r4, #32
    9eca:	4b0b      	ldr	r3, [pc, #44]	; (9ef8 <init_mem_slab_module+0x48>)
    9ecc:	429c      	cmp	r4, r3
    9ece:	d9f3      	bls.n	9eb8 <init_mem_slab_module+0x8>
    9ed0:	4e0a      	ldr	r6, [pc, #40]	; (9efc <init_mem_slab_module+0x4c>)
    9ed2:	233d      	movs	r3, #61	; 0x3d
    9ed4:	4632      	mov	r2, r6
    9ed6:	490a      	ldr	r1, [pc, #40]	; (9f00 <init_mem_slab_module+0x50>)
    9ed8:	480a      	ldr	r0, [pc, #40]	; (9f04 <init_mem_slab_module+0x54>)
    9eda:	f004 fb68 	bl	e5ae <assert_print>
    9ede:	480a      	ldr	r0, [pc, #40]	; (9f08 <init_mem_slab_module+0x58>)
    9ee0:	f004 fb65 	bl	e5ae <assert_print>
    9ee4:	213d      	movs	r1, #61	; 0x3d
    9ee6:	4630      	mov	r0, r6
    9ee8:	f004 fb5a 	bl	e5a0 <assert_post_action>
    9eec:	e7e4      	b.n	9eb8 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    9eee:	4628      	mov	r0, r5
    9ef0:	bd70      	pop	{r4, r5, r6, pc}
    9ef2:	bf00      	nop
    9ef4:	200041e4 	.word	0x200041e4
    9ef8:	200041e4 	.word	0x200041e4
    9efc:	00011814 	.word	0x00011814
    9f00:	0001183c 	.word	0x0001183c
    9f04:	000100e4 	.word	0x000100e4
    9f08:	0001185c 	.word	0x0001185c

00009f0c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    9f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9f10:	b082      	sub	sp, #8
    9f12:	4604      	mov	r4, r0
    9f14:	460e      	mov	r6, r1
    9f16:	4690      	mov	r8, r2
    9f18:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    9f1a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    9f1e:	f04f 0320 	mov.w	r3, #32
    9f22:	f3ef 8711 	mrs	r7, BASEPRI
    9f26:	f383 8812 	msr	BASEPRI_MAX, r3
    9f2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9f2e:	4628      	mov	r0, r5
    9f30:	f000 f8d8 	bl	a0e4 <z_spin_lock_valid>
    9f34:	b1c0      	cbz	r0, 9f68 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    9f36:	4628      	mov	r0, r5
    9f38:	f000 f8f4 	bl	a124 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    9f3c:	69a1      	ldr	r1, [r4, #24]
    9f3e:	b321      	cbz	r1, 9f8a <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    9f40:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    9f42:	69a3      	ldr	r3, [r4, #24]
    9f44:	681b      	ldr	r3, [r3, #0]
    9f46:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    9f48:	69e3      	ldr	r3, [r4, #28]
    9f4a:	3301      	adds	r3, #1
    9f4c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    9f4e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9f50:	4628      	mov	r0, r5
    9f52:	f000 f8d7 	bl	a104 <z_spin_unlock_valid>
    9f56:	b388      	cbz	r0, 9fbc <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    9f58:	f387 8811 	msr	BASEPRI, r7
    9f5c:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    9f60:	4620      	mov	r0, r4
    9f62:	b002      	add	sp, #8
    9f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9f68:	f8df a070 	ldr.w	sl, [pc, #112]	; 9fdc <k_mem_slab_alloc+0xd0>
    9f6c:	238e      	movs	r3, #142	; 0x8e
    9f6e:	4652      	mov	r2, sl
    9f70:	491b      	ldr	r1, [pc, #108]	; (9fe0 <k_mem_slab_alloc+0xd4>)
    9f72:	481c      	ldr	r0, [pc, #112]	; (9fe4 <k_mem_slab_alloc+0xd8>)
    9f74:	f004 fb1b 	bl	e5ae <assert_print>
    9f78:	4629      	mov	r1, r5
    9f7a:	481b      	ldr	r0, [pc, #108]	; (9fe8 <k_mem_slab_alloc+0xdc>)
    9f7c:	f004 fb17 	bl	e5ae <assert_print>
    9f80:	218e      	movs	r1, #142	; 0x8e
    9f82:	4650      	mov	r0, sl
    9f84:	f004 fb0c 	bl	e5a0 <assert_post_action>
    9f88:	e7d5      	b.n	9f36 <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    9f8a:	ea59 0308 	orrs.w	r3, r9, r8
    9f8e:	d104      	bne.n	9f9a <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    9f90:	2300      	movs	r3, #0
    9f92:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    9f94:	f06f 040b 	mvn.w	r4, #11
    9f98:	e7da      	b.n	9f50 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    9f9a:	f8cd 8000 	str.w	r8, [sp]
    9f9e:	f8cd 9004 	str.w	r9, [sp, #4]
    9fa2:	4622      	mov	r2, r4
    9fa4:	4639      	mov	r1, r7
    9fa6:	4628      	mov	r0, r5
    9fa8:	f001 fade 	bl	b568 <z_pend_curr>
		if (result == 0) {
    9fac:	4604      	mov	r4, r0
    9fae:	2800      	cmp	r0, #0
    9fb0:	d1d6      	bne.n	9f60 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    9fb2:	4b0e      	ldr	r3, [pc, #56]	; (9fec <k_mem_slab_alloc+0xe0>)
    9fb4:	689b      	ldr	r3, [r3, #8]
    9fb6:	695b      	ldr	r3, [r3, #20]
    9fb8:	6033      	str	r3, [r6, #0]
		return result;
    9fba:	e7d1      	b.n	9f60 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9fbc:	4e07      	ldr	r6, [pc, #28]	; (9fdc <k_mem_slab_alloc+0xd0>)
    9fbe:	23b9      	movs	r3, #185	; 0xb9
    9fc0:	4632      	mov	r2, r6
    9fc2:	490b      	ldr	r1, [pc, #44]	; (9ff0 <k_mem_slab_alloc+0xe4>)
    9fc4:	4807      	ldr	r0, [pc, #28]	; (9fe4 <k_mem_slab_alloc+0xd8>)
    9fc6:	f004 faf2 	bl	e5ae <assert_print>
    9fca:	4629      	mov	r1, r5
    9fcc:	4809      	ldr	r0, [pc, #36]	; (9ff4 <k_mem_slab_alloc+0xe8>)
    9fce:	f004 faee 	bl	e5ae <assert_print>
    9fd2:	21b9      	movs	r1, #185	; 0xb9
    9fd4:	4630      	mov	r0, r6
    9fd6:	f004 fae3 	bl	e5a0 <assert_post_action>
    9fda:	e7bd      	b.n	9f58 <k_mem_slab_alloc+0x4c>
    9fdc:	00010290 	.word	0x00010290
    9fe0:	000102f0 	.word	0x000102f0
    9fe4:	000100e4 	.word	0x000100e4
    9fe8:	00010308 	.word	0x00010308
    9fec:	20005324 	.word	0x20005324
    9ff0:	000102c0 	.word	0x000102c0
    9ff4:	000102d8 	.word	0x000102d8

00009ff8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    9ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ffc:	4604      	mov	r4, r0
    9ffe:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    a000:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    a004:	f04f 0320 	mov.w	r3, #32
    a008:	f3ef 8711 	mrs	r7, BASEPRI
    a00c:	f383 8812 	msr	BASEPRI_MAX, r3
    a010:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a014:	4630      	mov	r0, r6
    a016:	f000 f865 	bl	a0e4 <z_spin_lock_valid>
    a01a:	b1b0      	cbz	r0, a04a <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    a01c:	4630      	mov	r0, r6
    a01e:	f000 f881 	bl	a124 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    a022:	69a3      	ldr	r3, [r4, #24]
    a024:	b313      	cbz	r3, a06c <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    a026:	682b      	ldr	r3, [r5, #0]
    a028:	69a2      	ldr	r2, [r4, #24]
    a02a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    a02c:	682b      	ldr	r3, [r5, #0]
    a02e:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    a030:	69e3      	ldr	r3, [r4, #28]
    a032:	3b01      	subs	r3, #1
    a034:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a036:	4630      	mov	r0, r6
    a038:	f000 f864 	bl	a104 <z_spin_unlock_valid>
    a03c:	b338      	cbz	r0, a08e <k_mem_slab_free+0x96>
	__asm__ volatile(
    a03e:	f387 8811 	msr	BASEPRI, r7
    a042:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    a046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a04a:	f8df 8064 	ldr.w	r8, [pc, #100]	; a0b0 <k_mem_slab_free+0xb8>
    a04e:	238e      	movs	r3, #142	; 0x8e
    a050:	4642      	mov	r2, r8
    a052:	4918      	ldr	r1, [pc, #96]	; (a0b4 <k_mem_slab_free+0xbc>)
    a054:	4818      	ldr	r0, [pc, #96]	; (a0b8 <k_mem_slab_free+0xc0>)
    a056:	f004 faaa 	bl	e5ae <assert_print>
    a05a:	4631      	mov	r1, r6
    a05c:	4817      	ldr	r0, [pc, #92]	; (a0bc <k_mem_slab_free+0xc4>)
    a05e:	f004 faa6 	bl	e5ae <assert_print>
    a062:	218e      	movs	r1, #142	; 0x8e
    a064:	4640      	mov	r0, r8
    a066:	f004 fa9b 	bl	e5a0 <assert_post_action>
    a06a:	e7d7      	b.n	a01c <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    a06c:	4620      	mov	r0, r4
    a06e:	f001 fcb7 	bl	b9e0 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    a072:	2800      	cmp	r0, #0
    a074:	d0d7      	beq.n	a026 <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    a076:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    a078:	2100      	movs	r1, #0
    a07a:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    a07e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    a080:	f001 f896 	bl	b1b0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    a084:	4639      	mov	r1, r7
    a086:	4630      	mov	r0, r6
    a088:	f000 fdee 	bl	ac68 <z_reschedule>
			return;
    a08c:	e7db      	b.n	a046 <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a08e:	4c08      	ldr	r4, [pc, #32]	; (a0b0 <k_mem_slab_free+0xb8>)
    a090:	23b9      	movs	r3, #185	; 0xb9
    a092:	4622      	mov	r2, r4
    a094:	490a      	ldr	r1, [pc, #40]	; (a0c0 <k_mem_slab_free+0xc8>)
    a096:	4808      	ldr	r0, [pc, #32]	; (a0b8 <k_mem_slab_free+0xc0>)
    a098:	f004 fa89 	bl	e5ae <assert_print>
    a09c:	4631      	mov	r1, r6
    a09e:	4809      	ldr	r0, [pc, #36]	; (a0c4 <k_mem_slab_free+0xcc>)
    a0a0:	f004 fa85 	bl	e5ae <assert_print>
    a0a4:	21b9      	movs	r1, #185	; 0xb9
    a0a6:	4620      	mov	r0, r4
    a0a8:	f004 fa7a 	bl	e5a0 <assert_post_action>
    a0ac:	e7c7      	b.n	a03e <k_mem_slab_free+0x46>
    a0ae:	bf00      	nop
    a0b0:	00010290 	.word	0x00010290
    a0b4:	000102f0 	.word	0x000102f0
    a0b8:	000100e4 	.word	0x000100e4
    a0bc:	00010308 	.word	0x00010308
    a0c0:	000102c0 	.word	0x000102c0
    a0c4:	000102d8 	.word	0x000102d8

0000a0c8 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    a0c8:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a0ca:	ea53 0102 	orrs.w	r1, r3, r2
    a0ce:	d102      	bne.n	a0d6 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    a0d0:	f005 f8cf 	bl	f272 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    a0d4:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a0d6:	4902      	ldr	r1, [pc, #8]	; (a0e0 <schedule_new_thread+0x18>)
    a0d8:	3018      	adds	r0, #24
    a0da:	f001 ffb3 	bl	c044 <z_add_timeout>
    a0de:	e7f9      	b.n	a0d4 <schedule_new_thread+0xc>
    a0e0:	0000b30d 	.word	0x0000b30d

0000a0e4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    a0e4:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    a0e6:	b13b      	cbz	r3, a0f8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    a0e8:	f003 0303 	and.w	r3, r3, #3
    a0ec:	4a04      	ldr	r2, [pc, #16]	; (a100 <z_spin_lock_valid+0x1c>)
    a0ee:	7d12      	ldrb	r2, [r2, #20]
    a0f0:	4293      	cmp	r3, r2
    a0f2:	d003      	beq.n	a0fc <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    a0f4:	2001      	movs	r0, #1
    a0f6:	4770      	bx	lr
    a0f8:	2001      	movs	r0, #1
    a0fa:	4770      	bx	lr
			return false;
    a0fc:	2000      	movs	r0, #0
}
    a0fe:	4770      	bx	lr
    a100:	20005324 	.word	0x20005324

0000a104 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    a104:	6801      	ldr	r1, [r0, #0]
    a106:	4a06      	ldr	r2, [pc, #24]	; (a120 <z_spin_unlock_valid+0x1c>)
    a108:	7d13      	ldrb	r3, [r2, #20]
    a10a:	6892      	ldr	r2, [r2, #8]
    a10c:	4313      	orrs	r3, r2
    a10e:	4299      	cmp	r1, r3
    a110:	d103      	bne.n	a11a <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    a112:	2300      	movs	r3, #0
    a114:	6003      	str	r3, [r0, #0]
	return true;
    a116:	2001      	movs	r0, #1
    a118:	4770      	bx	lr
		return false;
    a11a:	2000      	movs	r0, #0
}
    a11c:	4770      	bx	lr
    a11e:	bf00      	nop
    a120:	20005324 	.word	0x20005324

0000a124 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    a124:	4a02      	ldr	r2, [pc, #8]	; (a130 <z_spin_lock_set_owner+0xc>)
    a126:	7d13      	ldrb	r3, [r2, #20]
    a128:	6892      	ldr	r2, [r2, #8]
    a12a:	4313      	orrs	r3, r2
    a12c:	6003      	str	r3, [r0, #0]
}
    a12e:	4770      	bx	lr
    a130:	20005324 	.word	0x20005324

0000a134 <z_thread_monitor_exit>:
{
    a134:	b570      	push	{r4, r5, r6, lr}
    a136:	4604      	mov	r4, r0
	__asm__ volatile(
    a138:	f04f 0320 	mov.w	r3, #32
    a13c:	f3ef 8511 	mrs	r5, BASEPRI
    a140:	f383 8812 	msr	BASEPRI_MAX, r3
    a144:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a148:	481f      	ldr	r0, [pc, #124]	; (a1c8 <z_thread_monitor_exit+0x94>)
    a14a:	f7ff ffcb 	bl	a0e4 <z_spin_lock_valid>
    a14e:	b150      	cbz	r0, a166 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    a150:	481d      	ldr	r0, [pc, #116]	; (a1c8 <z_thread_monitor_exit+0x94>)
    a152:	f7ff ffe7 	bl	a124 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    a156:	4b1d      	ldr	r3, [pc, #116]	; (a1cc <z_thread_monitor_exit+0x98>)
    a158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a15a:	42a3      	cmp	r3, r4
    a15c:	d114      	bne.n	a188 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    a15e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    a160:	4b1a      	ldr	r3, [pc, #104]	; (a1cc <z_thread_monitor_exit+0x98>)
    a162:	629a      	str	r2, [r3, #40]	; 0x28
    a164:	e017      	b.n	a196 <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a166:	4e1a      	ldr	r6, [pc, #104]	; (a1d0 <z_thread_monitor_exit+0x9c>)
    a168:	238e      	movs	r3, #142	; 0x8e
    a16a:	4632      	mov	r2, r6
    a16c:	4919      	ldr	r1, [pc, #100]	; (a1d4 <z_thread_monitor_exit+0xa0>)
    a16e:	481a      	ldr	r0, [pc, #104]	; (a1d8 <z_thread_monitor_exit+0xa4>)
    a170:	f004 fa1d 	bl	e5ae <assert_print>
    a174:	4914      	ldr	r1, [pc, #80]	; (a1c8 <z_thread_monitor_exit+0x94>)
    a176:	4819      	ldr	r0, [pc, #100]	; (a1dc <z_thread_monitor_exit+0xa8>)
    a178:	f004 fa19 	bl	e5ae <assert_print>
    a17c:	218e      	movs	r1, #142	; 0x8e
    a17e:	4630      	mov	r0, r6
    a180:	f004 fa0e 	bl	e5a0 <assert_post_action>
    a184:	e7e4      	b.n	a150 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    a186:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    a188:	b113      	cbz	r3, a190 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    a18a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    a18c:	42a2      	cmp	r2, r4
    a18e:	d1fa      	bne.n	a186 <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    a190:	b10b      	cbz	r3, a196 <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    a192:	6f22      	ldr	r2, [r4, #112]	; 0x70
    a194:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a196:	480c      	ldr	r0, [pc, #48]	; (a1c8 <z_thread_monitor_exit+0x94>)
    a198:	f7ff ffb4 	bl	a104 <z_spin_unlock_valid>
    a19c:	b120      	cbz	r0, a1a8 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    a19e:	f385 8811 	msr	BASEPRI, r5
    a1a2:	f3bf 8f6f 	isb	sy
}
    a1a6:	bd70      	pop	{r4, r5, r6, pc}
    a1a8:	4c09      	ldr	r4, [pc, #36]	; (a1d0 <z_thread_monitor_exit+0x9c>)
    a1aa:	23b9      	movs	r3, #185	; 0xb9
    a1ac:	4622      	mov	r2, r4
    a1ae:	490c      	ldr	r1, [pc, #48]	; (a1e0 <z_thread_monitor_exit+0xac>)
    a1b0:	4809      	ldr	r0, [pc, #36]	; (a1d8 <z_thread_monitor_exit+0xa4>)
    a1b2:	f004 f9fc 	bl	e5ae <assert_print>
    a1b6:	4904      	ldr	r1, [pc, #16]	; (a1c8 <z_thread_monitor_exit+0x94>)
    a1b8:	480a      	ldr	r0, [pc, #40]	; (a1e4 <z_thread_monitor_exit+0xb0>)
    a1ba:	f004 f9f8 	bl	e5ae <assert_print>
    a1be:	21b9      	movs	r1, #185	; 0xb9
    a1c0:	4620      	mov	r0, r4
    a1c2:	f004 f9ed 	bl	e5a0 <assert_post_action>
    a1c6:	e7ea      	b.n	a19e <z_thread_monitor_exit+0x6a>
    a1c8:	20005350 	.word	0x20005350
    a1cc:	20005324 	.word	0x20005324
    a1d0:	00010290 	.word	0x00010290
    a1d4:	000102f0 	.word	0x000102f0
    a1d8:	000100e4 	.word	0x000100e4
    a1dc:	00010308 	.word	0x00010308
    a1e0:	000102c0 	.word	0x000102c0
    a1e4:	000102d8 	.word	0x000102d8

0000a1e8 <z_setup_new_thread>:
{
    a1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1ec:	b085      	sub	sp, #20
    a1ee:	4604      	mov	r4, r0
    a1f0:	460e      	mov	r6, r1
    a1f2:	4690      	mov	r8, r2
    a1f4:	461d      	mov	r5, r3
    a1f6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    a1fa:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    a1fe:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    a200:	2f0f      	cmp	r7, #15
    a202:	d05e      	beq.n	a2c2 <z_setup_new_thread+0xda>
    a204:	f107 0310 	add.w	r3, r7, #16
    a208:	2b1e      	cmp	r3, #30
    a20a:	d85e      	bhi.n	a2ca <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    a20c:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    a210:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    a212:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    a214:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a216:	2204      	movs	r2, #4
    a218:	4639      	mov	r1, r7
    a21a:	4620      	mov	r0, r4
    a21c:	f005 f82d 	bl	f27a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    a220:	4642      	mov	r2, r8
    a222:	4631      	mov	r1, r6
    a224:	4620      	mov	r0, r4
    a226:	f005 f80a 	bl	f23e <setup_thread_stack>
    a22a:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a22c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a22e:	9302      	str	r3, [sp, #8]
    a230:	f8cd a004 	str.w	sl, [sp, #4]
    a234:	f8cd b000 	str.w	fp, [sp]
    a238:	462b      	mov	r3, r5
    a23a:	4602      	mov	r2, r0
    a23c:	4631      	mov	r1, r6
    a23e:	4620      	mov	r0, r4
    a240:	f7fb fcde 	bl	5c00 <arch_new_thread>
	new_thread->init_data = NULL;
    a244:	2300      	movs	r3, #0
    a246:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    a248:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    a24a:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    a24e:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    a252:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a254:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    a256:	f04f 0320 	mov.w	r3, #32
    a25a:	f3ef 8611 	mrs	r6, BASEPRI
    a25e:	f383 8812 	msr	BASEPRI_MAX, r3
    a262:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a266:	4837      	ldr	r0, [pc, #220]	; (a344 <z_setup_new_thread+0x15c>)
    a268:	f7ff ff3c 	bl	a0e4 <z_spin_lock_valid>
    a26c:	2800      	cmp	r0, #0
    a26e:	d042      	beq.n	a2f6 <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    a270:	4d34      	ldr	r5, [pc, #208]	; (a344 <z_setup_new_thread+0x15c>)
    a272:	4628      	mov	r0, r5
    a274:	f7ff ff56 	bl	a124 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    a278:	4b33      	ldr	r3, [pc, #204]	; (a348 <z_setup_new_thread+0x160>)
    a27a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a27c:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    a27e:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a280:	4628      	mov	r0, r5
    a282:	f7ff ff3f 	bl	a104 <z_spin_unlock_valid>
    a286:	2800      	cmp	r0, #0
    a288:	d045      	beq.n	a316 <z_setup_new_thread+0x12e>
	__asm__ volatile(
    a28a:	f386 8811 	msr	BASEPRI, r6
    a28e:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    a292:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a294:	2b00      	cmp	r3, #0
    a296:	d04e      	beq.n	a336 <z_setup_new_thread+0x14e>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    a298:	221f      	movs	r2, #31
    a29a:	4619      	mov	r1, r3
    a29c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    a2a0:	f005 f8c2 	bl	f428 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    a2a4:	2300      	movs	r3, #0
    a2a6:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    a2aa:	4b27      	ldr	r3, [pc, #156]	; (a348 <z_setup_new_thread+0x160>)
    a2ac:	689b      	ldr	r3, [r3, #8]
    a2ae:	2b00      	cmp	r3, #0
    a2b0:	d045      	beq.n	a33e <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    a2b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    a2b6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    a2ba:	4638      	mov	r0, r7
    a2bc:	b005      	add	sp, #20
    a2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    a2c2:	4b22      	ldr	r3, [pc, #136]	; (a34c <z_setup_new_thread+0x164>)
    a2c4:	429d      	cmp	r5, r3
    a2c6:	d19d      	bne.n	a204 <z_setup_new_thread+0x1c>
    a2c8:	e7a0      	b.n	a20c <z_setup_new_thread+0x24>
    a2ca:	f8df 9084 	ldr.w	r9, [pc, #132]	; a350 <z_setup_new_thread+0x168>
    a2ce:	f240 13ff 	movw	r3, #511	; 0x1ff
    a2d2:	464a      	mov	r2, r9
    a2d4:	491f      	ldr	r1, [pc, #124]	; (a354 <z_setup_new_thread+0x16c>)
    a2d6:	4820      	ldr	r0, [pc, #128]	; (a358 <z_setup_new_thread+0x170>)
    a2d8:	f004 f969 	bl	e5ae <assert_print>
    a2dc:	f06f 030f 	mvn.w	r3, #15
    a2e0:	220e      	movs	r2, #14
    a2e2:	4639      	mov	r1, r7
    a2e4:	481d      	ldr	r0, [pc, #116]	; (a35c <z_setup_new_thread+0x174>)
    a2e6:	f004 f962 	bl	e5ae <assert_print>
    a2ea:	f240 11ff 	movw	r1, #511	; 0x1ff
    a2ee:	4648      	mov	r0, r9
    a2f0:	f004 f956 	bl	e5a0 <assert_post_action>
    a2f4:	e78a      	b.n	a20c <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a2f6:	4d1a      	ldr	r5, [pc, #104]	; (a360 <z_setup_new_thread+0x178>)
    a2f8:	238e      	movs	r3, #142	; 0x8e
    a2fa:	462a      	mov	r2, r5
    a2fc:	4919      	ldr	r1, [pc, #100]	; (a364 <z_setup_new_thread+0x17c>)
    a2fe:	4816      	ldr	r0, [pc, #88]	; (a358 <z_setup_new_thread+0x170>)
    a300:	f004 f955 	bl	e5ae <assert_print>
    a304:	490f      	ldr	r1, [pc, #60]	; (a344 <z_setup_new_thread+0x15c>)
    a306:	4818      	ldr	r0, [pc, #96]	; (a368 <z_setup_new_thread+0x180>)
    a308:	f004 f951 	bl	e5ae <assert_print>
    a30c:	218e      	movs	r1, #142	; 0x8e
    a30e:	4628      	mov	r0, r5
    a310:	f004 f946 	bl	e5a0 <assert_post_action>
    a314:	e7ac      	b.n	a270 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a316:	4d12      	ldr	r5, [pc, #72]	; (a360 <z_setup_new_thread+0x178>)
    a318:	23b9      	movs	r3, #185	; 0xb9
    a31a:	462a      	mov	r2, r5
    a31c:	4913      	ldr	r1, [pc, #76]	; (a36c <z_setup_new_thread+0x184>)
    a31e:	480e      	ldr	r0, [pc, #56]	; (a358 <z_setup_new_thread+0x170>)
    a320:	f004 f945 	bl	e5ae <assert_print>
    a324:	4907      	ldr	r1, [pc, #28]	; (a344 <z_setup_new_thread+0x15c>)
    a326:	4812      	ldr	r0, [pc, #72]	; (a370 <z_setup_new_thread+0x188>)
    a328:	f004 f941 	bl	e5ae <assert_print>
    a32c:	21b9      	movs	r1, #185	; 0xb9
    a32e:	4628      	mov	r0, r5
    a330:	f004 f936 	bl	e5a0 <assert_post_action>
    a334:	e7a9      	b.n	a28a <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    a336:	2300      	movs	r3, #0
    a338:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    a33c:	e7b5      	b.n	a2aa <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    a33e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    a342:	e7ba      	b.n	a2ba <z_setup_new_thread+0xd2>
    a344:	20005350 	.word	0x20005350
    a348:	20005324 	.word	0x20005324
    a34c:	0000a4fd 	.word	0x0000a4fd
    a350:	0001187c 	.word	0x0001187c
    a354:	000118d4 	.word	0x000118d4
    a358:	000100e4 	.word	0x000100e4
    a35c:	00011954 	.word	0x00011954
    a360:	00010290 	.word	0x00010290
    a364:	000102f0 	.word	0x000102f0
    a368:	00010308 	.word	0x00010308
    a36c:	000102c0 	.word	0x000102c0
    a370:	000102d8 	.word	0x000102d8

0000a374 <z_impl_k_thread_create>:
{
    a374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a378:	b086      	sub	sp, #24
    a37a:	4604      	mov	r4, r0
    a37c:	460d      	mov	r5, r1
    a37e:	4616      	mov	r6, r2
    a380:	461f      	mov	r7, r3
    a382:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    a386:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a38a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    a38e:	b9db      	cbnz	r3, a3c8 <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a390:	2300      	movs	r3, #0
    a392:	9305      	str	r3, [sp, #20]
    a394:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a396:	9304      	str	r3, [sp, #16]
    a398:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a39a:	9303      	str	r3, [sp, #12]
    a39c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a39e:	9302      	str	r3, [sp, #8]
    a3a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a3a2:	9301      	str	r3, [sp, #4]
    a3a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a3a6:	9300      	str	r3, [sp, #0]
    a3a8:	463b      	mov	r3, r7
    a3aa:	4632      	mov	r2, r6
    a3ac:	4629      	mov	r1, r5
    a3ae:	4620      	mov	r0, r4
    a3b0:	f7ff ff1a 	bl	a1e8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    a3b4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    a3b8:	bf08      	it	eq
    a3ba:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    a3be:	d115      	bne.n	a3ec <z_impl_k_thread_create+0x78>
}
    a3c0:	4620      	mov	r0, r4
    a3c2:	b006      	add	sp, #24
    a3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    a3c8:	f8df a02c 	ldr.w	sl, [pc, #44]	; a3f8 <z_impl_k_thread_create+0x84>
    a3cc:	f240 236e 	movw	r3, #622	; 0x26e
    a3d0:	4652      	mov	r2, sl
    a3d2:	490a      	ldr	r1, [pc, #40]	; (a3fc <z_impl_k_thread_create+0x88>)
    a3d4:	480a      	ldr	r0, [pc, #40]	; (a400 <z_impl_k_thread_create+0x8c>)
    a3d6:	f004 f8ea 	bl	e5ae <assert_print>
    a3da:	480a      	ldr	r0, [pc, #40]	; (a404 <z_impl_k_thread_create+0x90>)
    a3dc:	f004 f8e7 	bl	e5ae <assert_print>
    a3e0:	f240 216e 	movw	r1, #622	; 0x26e
    a3e4:	4650      	mov	r0, sl
    a3e6:	f004 f8db 	bl	e5a0 <assert_post_action>
    a3ea:	e7d1      	b.n	a390 <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    a3ec:	464a      	mov	r2, r9
    a3ee:	4643      	mov	r3, r8
    a3f0:	4620      	mov	r0, r4
    a3f2:	f7ff fe69 	bl	a0c8 <schedule_new_thread>
    a3f6:	e7e3      	b.n	a3c0 <z_impl_k_thread_create+0x4c>
    a3f8:	0001187c 	.word	0x0001187c
    a3fc:	00011988 	.word	0x00011988
    a400:	000100e4 	.word	0x000100e4
    a404:	0001199c 	.word	0x0001199c

0000a408 <z_init_static_threads>:
{
    a408:	b530      	push	{r4, r5, lr}
    a40a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    a40c:	4c35      	ldr	r4, [pc, #212]	; (a4e4 <z_init_static_threads+0xdc>)
    a40e:	e017      	b.n	a440 <z_init_static_threads+0x38>
    a410:	4b35      	ldr	r3, [pc, #212]	; (a4e8 <z_init_static_threads+0xe0>)
    a412:	429c      	cmp	r4, r3
    a414:	d228      	bcs.n	a468 <z_init_static_threads+0x60>
		z_setup_new_thread(
    a416:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a418:	9305      	str	r3, [sp, #20]
    a41a:	6a23      	ldr	r3, [r4, #32]
    a41c:	9304      	str	r3, [sp, #16]
    a41e:	69e3      	ldr	r3, [r4, #28]
    a420:	9303      	str	r3, [sp, #12]
    a422:	69a3      	ldr	r3, [r4, #24]
    a424:	9302      	str	r3, [sp, #8]
    a426:	6963      	ldr	r3, [r4, #20]
    a428:	9301      	str	r3, [sp, #4]
    a42a:	6923      	ldr	r3, [r4, #16]
    a42c:	9300      	str	r3, [sp, #0]
    a42e:	68e3      	ldr	r3, [r4, #12]
    a430:	68a2      	ldr	r2, [r4, #8]
    a432:	6861      	ldr	r1, [r4, #4]
    a434:	6820      	ldr	r0, [r4, #0]
    a436:	f7ff fed7 	bl	a1e8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    a43a:	6823      	ldr	r3, [r4, #0]
    a43c:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    a43e:	3430      	adds	r4, #48	; 0x30
    a440:	4b29      	ldr	r3, [pc, #164]	; (a4e8 <z_init_static_threads+0xe0>)
    a442:	429c      	cmp	r4, r3
    a444:	d9e4      	bls.n	a410 <z_init_static_threads+0x8>
    a446:	4d29      	ldr	r5, [pc, #164]	; (a4ec <z_init_static_threads+0xe4>)
    a448:	f240 23d5 	movw	r3, #725	; 0x2d5
    a44c:	462a      	mov	r2, r5
    a44e:	4928      	ldr	r1, [pc, #160]	; (a4f0 <z_init_static_threads+0xe8>)
    a450:	4828      	ldr	r0, [pc, #160]	; (a4f4 <z_init_static_threads+0xec>)
    a452:	f004 f8ac 	bl	e5ae <assert_print>
    a456:	4828      	ldr	r0, [pc, #160]	; (a4f8 <z_init_static_threads+0xf0>)
    a458:	f004 f8a9 	bl	e5ae <assert_print>
    a45c:	f240 21d5 	movw	r1, #725	; 0x2d5
    a460:	4628      	mov	r0, r5
    a462:	f004 f89d 	bl	e5a0 <assert_post_action>
    a466:	e7d3      	b.n	a410 <z_init_static_threads+0x8>
	k_sched_lock();
    a468:	f000 fc4c 	bl	ad04 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    a46c:	4c1d      	ldr	r4, [pc, #116]	; (a4e4 <z_init_static_threads+0xdc>)
    a46e:	e000      	b.n	a472 <z_init_static_threads+0x6a>
    a470:	3430      	adds	r4, #48	; 0x30
    a472:	4b1d      	ldr	r3, [pc, #116]	; (a4e8 <z_init_static_threads+0xe0>)
    a474:	429c      	cmp	r4, r3
    a476:	d81f      	bhi.n	a4b8 <z_init_static_threads+0xb0>
    a478:	4b1b      	ldr	r3, [pc, #108]	; (a4e8 <z_init_static_threads+0xe0>)
    a47a:	429c      	cmp	r4, r3
    a47c:	d22d      	bcs.n	a4da <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    a47e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    a480:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    a484:	d0f4      	beq.n	a470 <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    a486:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    a488:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    a48c:	17c1      	asrs	r1, r0, #31
			return ((t * to_hz + off) / from_hz);
    a48e:	03c9      	lsls	r1, r1, #15
    a490:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    a494:	03c0      	lsls	r0, r0, #15
    a496:	f240 33e7 	movw	r3, #999	; 0x3e7
    a49a:	18c0      	adds	r0, r0, r3
    a49c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a4a0:	f04f 0300 	mov.w	r3, #0
    a4a4:	f141 0100 	adc.w	r1, r1, #0
    a4a8:	f7f6 fa98 	bl	9dc <__aeabi_uldivmod>
    a4ac:	4602      	mov	r2, r0
    a4ae:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    a4b0:	4628      	mov	r0, r5
    a4b2:	f7ff fe09 	bl	a0c8 <schedule_new_thread>
    a4b6:	e7db      	b.n	a470 <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    a4b8:	4d0c      	ldr	r5, [pc, #48]	; (a4ec <z_init_static_threads+0xe4>)
    a4ba:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    a4be:	462a      	mov	r2, r5
    a4c0:	490b      	ldr	r1, [pc, #44]	; (a4f0 <z_init_static_threads+0xe8>)
    a4c2:	480c      	ldr	r0, [pc, #48]	; (a4f4 <z_init_static_threads+0xec>)
    a4c4:	f004 f873 	bl	e5ae <assert_print>
    a4c8:	480b      	ldr	r0, [pc, #44]	; (a4f8 <z_init_static_threads+0xf0>)
    a4ca:	f004 f870 	bl	e5ae <assert_print>
    a4ce:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    a4d2:	4628      	mov	r0, r5
    a4d4:	f004 f864 	bl	e5a0 <assert_post_action>
    a4d8:	e7ce      	b.n	a478 <z_init_static_threads+0x70>
	k_sched_unlock();
    a4da:	f001 f99f 	bl	b81c <k_sched_unlock>
}
    a4de:	b007      	add	sp, #28
    a4e0:	bd30      	pop	{r4, r5, pc}
    a4e2:	bf00      	nop
    a4e4:	200041e4 	.word	0x200041e4
    a4e8:	200041e4 	.word	0x200041e4
    a4ec:	0001187c 	.word	0x0001187c
    a4f0:	000119c4 	.word	0x000119c4
    a4f4:	000100e4 	.word	0x000100e4
    a4f8:	0001185c 	.word	0x0001185c

0000a4fc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    a4fc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    a4fe:	4b14      	ldr	r3, [pc, #80]	; (a550 <idle+0x54>)
    a500:	689b      	ldr	r3, [r3, #8]
    a502:	f993 300e 	ldrsb.w	r3, [r3, #14]
    a506:	2b00      	cmp	r3, #0
    a508:	da0d      	bge.n	a526 <idle+0x2a>
    a50a:	4c12      	ldr	r4, [pc, #72]	; (a554 <idle+0x58>)
    a50c:	2327      	movs	r3, #39	; 0x27
    a50e:	4622      	mov	r2, r4
    a510:	4911      	ldr	r1, [pc, #68]	; (a558 <idle+0x5c>)
    a512:	4812      	ldr	r0, [pc, #72]	; (a55c <idle+0x60>)
    a514:	f004 f84b 	bl	e5ae <assert_print>
    a518:	2127      	movs	r1, #39	; 0x27
    a51a:	4620      	mov	r0, r4
    a51c:	f004 f840 	bl	e5a0 <assert_post_action>
    a520:	e001      	b.n	a526 <idle+0x2a>
	arch_cpu_idle();
    a522:	f7fb fa41 	bl	59a8 <arch_cpu_idle>
	__asm__ volatile(
    a526:	f04f 0220 	mov.w	r2, #32
    a52a:	f3ef 8311 	mrs	r3, BASEPRI
    a52e:	f382 8812 	msr	BASEPRI_MAX, r2
    a532:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    a536:	f001 fec3 	bl	c2c0 <z_get_next_timeout_expiry>
    a53a:	4b05      	ldr	r3, [pc, #20]	; (a550 <idle+0x54>)
    a53c:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    a53e:	4b08      	ldr	r3, [pc, #32]	; (a560 <idle+0x64>)
    a540:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    a542:	2b00      	cmp	r3, #0
    a544:	d0ed      	beq.n	a522 <idle+0x26>
    a546:	f7fa fff7 	bl	5538 <pm_system_suspend>
    a54a:	2800      	cmp	r0, #0
    a54c:	d1eb      	bne.n	a526 <idle+0x2a>
    a54e:	e7e8      	b.n	a522 <idle+0x26>
    a550:	20005324 	.word	0x20005324
    a554:	000119f4 	.word	0x000119f4
    a558:	00011a18 	.word	0x00011a18
    a55c:	000100e4 	.word	0x000100e4
    a560:	20005560 	.word	0x20005560

0000a564 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    a564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a568:	b083      	sub	sp, #12
    a56a:	4604      	mov	r4, r0
    a56c:	4616      	mov	r6, r2
    a56e:	461d      	mov	r5, r3
    a570:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    a574:	2900      	cmp	r1, #0
    a576:	d12b      	bne.n	a5d0 <z_impl_k_mutex_lock+0x6c>
    a578:	f04f 0320 	mov.w	r3, #32
    a57c:	f3ef 8711 	mrs	r7, BASEPRI
    a580:	f383 8812 	msr	BASEPRI_MAX, r3
    a584:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a588:	487b      	ldr	r0, [pc, #492]	; (a778 <z_impl_k_mutex_lock+0x214>)
    a58a:	f7ff fdab 	bl	a0e4 <z_spin_lock_valid>
    a58e:	2800      	cmp	r0, #0
    a590:	d02d      	beq.n	a5ee <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    a592:	4879      	ldr	r0, [pc, #484]	; (a778 <z_impl_k_mutex_lock+0x214>)
    a594:	f7ff fdc6 	bl	a124 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    a598:	68e1      	ldr	r1, [r4, #12]
    a59a:	2900      	cmp	r1, #0
    a59c:	d138      	bne.n	a610 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    a59e:	2900      	cmp	r1, #0
    a5a0:	d17d      	bne.n	a69e <z_impl_k_mutex_lock+0x13a>
    a5a2:	4b76      	ldr	r3, [pc, #472]	; (a77c <z_impl_k_mutex_lock+0x218>)
    a5a4:	689b      	ldr	r3, [r3, #8]
    a5a6:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    a5aa:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    a5ac:	3101      	adds	r1, #1
    a5ae:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    a5b0:	4b72      	ldr	r3, [pc, #456]	; (a77c <z_impl_k_mutex_lock+0x218>)
    a5b2:	689b      	ldr	r3, [r3, #8]
    a5b4:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a5b6:	4870      	ldr	r0, [pc, #448]	; (a778 <z_impl_k_mutex_lock+0x214>)
    a5b8:	f7ff fda4 	bl	a104 <z_spin_unlock_valid>
    a5bc:	2800      	cmp	r0, #0
    a5be:	d070      	beq.n	a6a2 <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    a5c0:	f387 8811 	msr	BASEPRI, r7
    a5c4:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    a5c8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    a5ca:	b003      	add	sp, #12
    a5cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    a5d0:	4f6b      	ldr	r7, [pc, #428]	; (a780 <z_impl_k_mutex_lock+0x21c>)
    a5d2:	2365      	movs	r3, #101	; 0x65
    a5d4:	463a      	mov	r2, r7
    a5d6:	496b      	ldr	r1, [pc, #428]	; (a784 <z_impl_k_mutex_lock+0x220>)
    a5d8:	486b      	ldr	r0, [pc, #428]	; (a788 <z_impl_k_mutex_lock+0x224>)
    a5da:	f003 ffe8 	bl	e5ae <assert_print>
    a5de:	486b      	ldr	r0, [pc, #428]	; (a78c <z_impl_k_mutex_lock+0x228>)
    a5e0:	f003 ffe5 	bl	e5ae <assert_print>
    a5e4:	2165      	movs	r1, #101	; 0x65
    a5e6:	4638      	mov	r0, r7
    a5e8:	f003 ffda 	bl	e5a0 <assert_post_action>
    a5ec:	e7c4      	b.n	a578 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a5ee:	f8df 81a0 	ldr.w	r8, [pc, #416]	; a790 <z_impl_k_mutex_lock+0x22c>
    a5f2:	238e      	movs	r3, #142	; 0x8e
    a5f4:	4642      	mov	r2, r8
    a5f6:	4967      	ldr	r1, [pc, #412]	; (a794 <z_impl_k_mutex_lock+0x230>)
    a5f8:	4863      	ldr	r0, [pc, #396]	; (a788 <z_impl_k_mutex_lock+0x224>)
    a5fa:	f003 ffd8 	bl	e5ae <assert_print>
    a5fe:	495e      	ldr	r1, [pc, #376]	; (a778 <z_impl_k_mutex_lock+0x214>)
    a600:	4865      	ldr	r0, [pc, #404]	; (a798 <z_impl_k_mutex_lock+0x234>)
    a602:	f003 ffd4 	bl	e5ae <assert_print>
    a606:	218e      	movs	r1, #142	; 0x8e
    a608:	4640      	mov	r0, r8
    a60a:	f003 ffc9 	bl	e5a0 <assert_post_action>
    a60e:	e7c0      	b.n	a592 <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    a610:	68a2      	ldr	r2, [r4, #8]
    a612:	4b5a      	ldr	r3, [pc, #360]	; (a77c <z_impl_k_mutex_lock+0x218>)
    a614:	689b      	ldr	r3, [r3, #8]
    a616:	429a      	cmp	r2, r3
    a618:	d0c1      	beq.n	a59e <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    a61a:	ea55 0106 	orrs.w	r1, r5, r6
    a61e:	bf0c      	ite	eq
    a620:	f04f 0801 	moveq.w	r8, #1
    a624:	f04f 0800 	movne.w	r8, #0
    a628:	d04b      	beq.n	a6c2 <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    a62a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    a62e:	4649      	mov	r1, r9
    a630:	f993 000e 	ldrsb.w	r0, [r3, #14]
    a634:	f004 fe32 	bl	f29c <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    a638:	4581      	cmp	r9, r0
    a63a:	dc5d      	bgt.n	a6f8 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    a63c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    a640:	9600      	str	r6, [sp, #0]
    a642:	9501      	str	r5, [sp, #4]
    a644:	4622      	mov	r2, r4
    a646:	4639      	mov	r1, r7
    a648:	484b      	ldr	r0, [pc, #300]	; (a778 <z_impl_k_mutex_lock+0x214>)
    a64a:	f000 ff8d 	bl	b568 <z_pend_curr>
	if (got_mutex == 0) {
    a64e:	2800      	cmp	r0, #0
    a650:	d0bb      	beq.n	a5ca <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    a652:	f04f 0320 	mov.w	r3, #32
    a656:	f3ef 8511 	mrs	r5, BASEPRI
    a65a:	f383 8812 	msr	BASEPRI_MAX, r3
    a65e:	f3bf 8f6f 	isb	sy
    a662:	4845      	ldr	r0, [pc, #276]	; (a778 <z_impl_k_mutex_lock+0x214>)
    a664:	f7ff fd3e 	bl	a0e4 <z_spin_lock_valid>
    a668:	2800      	cmp	r0, #0
    a66a:	d04b      	beq.n	a704 <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    a66c:	4842      	ldr	r0, [pc, #264]	; (a778 <z_impl_k_mutex_lock+0x214>)
    a66e:	f7ff fd59 	bl	a124 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    a672:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a674:	42a3      	cmp	r3, r4
    a676:	d055      	beq.n	a724 <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    a678:	2b00      	cmp	r3, #0
    a67a:	d053      	beq.n	a724 <z_impl_k_mutex_lock+0x1c0>
    a67c:	6921      	ldr	r1, [r4, #16]
    a67e:	f993 000e 	ldrsb.w	r0, [r3, #14]
    a682:	f004 fe0b 	bl	f29c <new_prio_for_inheritance>
    a686:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    a688:	4620      	mov	r0, r4
    a68a:	f004 fe12 	bl	f2b2 <adjust_owner_prio>
    a68e:	2800      	cmp	r0, #0
    a690:	d14a      	bne.n	a728 <z_impl_k_mutex_lock+0x1c4>
    a692:	f1b9 0f00 	cmp.w	r9, #0
    a696:	d049      	beq.n	a72c <z_impl_k_mutex_lock+0x1c8>
    a698:	f04f 0801 	mov.w	r8, #1
    a69c:	e046      	b.n	a72c <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    a69e:	6923      	ldr	r3, [r4, #16]
    a6a0:	e783      	b.n	a5aa <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a6a2:	4c3b      	ldr	r4, [pc, #236]	; (a790 <z_impl_k_mutex_lock+0x22c>)
    a6a4:	23b9      	movs	r3, #185	; 0xb9
    a6a6:	4622      	mov	r2, r4
    a6a8:	493c      	ldr	r1, [pc, #240]	; (a79c <z_impl_k_mutex_lock+0x238>)
    a6aa:	4837      	ldr	r0, [pc, #220]	; (a788 <z_impl_k_mutex_lock+0x224>)
    a6ac:	f003 ff7f 	bl	e5ae <assert_print>
    a6b0:	4931      	ldr	r1, [pc, #196]	; (a778 <z_impl_k_mutex_lock+0x214>)
    a6b2:	483b      	ldr	r0, [pc, #236]	; (a7a0 <z_impl_k_mutex_lock+0x23c>)
    a6b4:	f003 ff7b 	bl	e5ae <assert_print>
    a6b8:	21b9      	movs	r1, #185	; 0xb9
    a6ba:	4620      	mov	r0, r4
    a6bc:	f003 ff70 	bl	e5a0 <assert_post_action>
    a6c0:	e77e      	b.n	a5c0 <z_impl_k_mutex_lock+0x5c>
    a6c2:	482d      	ldr	r0, [pc, #180]	; (a778 <z_impl_k_mutex_lock+0x214>)
    a6c4:	f7ff fd1e 	bl	a104 <z_spin_unlock_valid>
    a6c8:	b130      	cbz	r0, a6d8 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    a6ca:	f387 8811 	msr	BASEPRI, r7
    a6ce:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    a6d2:	f06f 000f 	mvn.w	r0, #15
    a6d6:	e778      	b.n	a5ca <z_impl_k_mutex_lock+0x66>
    a6d8:	4c2d      	ldr	r4, [pc, #180]	; (a790 <z_impl_k_mutex_lock+0x22c>)
    a6da:	23b9      	movs	r3, #185	; 0xb9
    a6dc:	4622      	mov	r2, r4
    a6de:	492f      	ldr	r1, [pc, #188]	; (a79c <z_impl_k_mutex_lock+0x238>)
    a6e0:	4829      	ldr	r0, [pc, #164]	; (a788 <z_impl_k_mutex_lock+0x224>)
    a6e2:	f003 ff64 	bl	e5ae <assert_print>
    a6e6:	4924      	ldr	r1, [pc, #144]	; (a778 <z_impl_k_mutex_lock+0x214>)
    a6e8:	482d      	ldr	r0, [pc, #180]	; (a7a0 <z_impl_k_mutex_lock+0x23c>)
    a6ea:	f003 ff60 	bl	e5ae <assert_print>
    a6ee:	21b9      	movs	r1, #185	; 0xb9
    a6f0:	4620      	mov	r0, r4
    a6f2:	f003 ff55 	bl	e5a0 <assert_post_action>
    a6f6:	e7e8      	b.n	a6ca <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    a6f8:	4601      	mov	r1, r0
    a6fa:	4620      	mov	r0, r4
    a6fc:	f004 fdd9 	bl	f2b2 <adjust_owner_prio>
    a700:	4681      	mov	r9, r0
    a702:	e79d      	b.n	a640 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a704:	4e22      	ldr	r6, [pc, #136]	; (a790 <z_impl_k_mutex_lock+0x22c>)
    a706:	238e      	movs	r3, #142	; 0x8e
    a708:	4632      	mov	r2, r6
    a70a:	4922      	ldr	r1, [pc, #136]	; (a794 <z_impl_k_mutex_lock+0x230>)
    a70c:	481e      	ldr	r0, [pc, #120]	; (a788 <z_impl_k_mutex_lock+0x224>)
    a70e:	f003 ff4e 	bl	e5ae <assert_print>
    a712:	4919      	ldr	r1, [pc, #100]	; (a778 <z_impl_k_mutex_lock+0x214>)
    a714:	4820      	ldr	r0, [pc, #128]	; (a798 <z_impl_k_mutex_lock+0x234>)
    a716:	f003 ff4a 	bl	e5ae <assert_print>
    a71a:	218e      	movs	r1, #142	; 0x8e
    a71c:	4630      	mov	r0, r6
    a71e:	f003 ff3f 	bl	e5a0 <assert_post_action>
    a722:	e7a3      	b.n	a66c <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    a724:	6921      	ldr	r1, [r4, #16]
    a726:	e7af      	b.n	a688 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    a728:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    a72c:	f1b8 0f00 	cmp.w	r8, #0
    a730:	d006      	beq.n	a740 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    a732:	4629      	mov	r1, r5
    a734:	4810      	ldr	r0, [pc, #64]	; (a778 <z_impl_k_mutex_lock+0x214>)
    a736:	f000 fa97 	bl	ac68 <z_reschedule>
	return -EAGAIN;
    a73a:	f06f 000a 	mvn.w	r0, #10
    a73e:	e744      	b.n	a5ca <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a740:	480d      	ldr	r0, [pc, #52]	; (a778 <z_impl_k_mutex_lock+0x214>)
    a742:	f7ff fcdf 	bl	a104 <z_spin_unlock_valid>
    a746:	b130      	cbz	r0, a756 <z_impl_k_mutex_lock+0x1f2>
    a748:	f385 8811 	msr	BASEPRI, r5
    a74c:	f3bf 8f6f 	isb	sy
    a750:	f06f 000a 	mvn.w	r0, #10
    a754:	e739      	b.n	a5ca <z_impl_k_mutex_lock+0x66>
    a756:	4c0e      	ldr	r4, [pc, #56]	; (a790 <z_impl_k_mutex_lock+0x22c>)
    a758:	23b9      	movs	r3, #185	; 0xb9
    a75a:	4622      	mov	r2, r4
    a75c:	490f      	ldr	r1, [pc, #60]	; (a79c <z_impl_k_mutex_lock+0x238>)
    a75e:	480a      	ldr	r0, [pc, #40]	; (a788 <z_impl_k_mutex_lock+0x224>)
    a760:	f003 ff25 	bl	e5ae <assert_print>
    a764:	4904      	ldr	r1, [pc, #16]	; (a778 <z_impl_k_mutex_lock+0x214>)
    a766:	480e      	ldr	r0, [pc, #56]	; (a7a0 <z_impl_k_mutex_lock+0x23c>)
    a768:	f003 ff21 	bl	e5ae <assert_print>
    a76c:	21b9      	movs	r1, #185	; 0xb9
    a76e:	4620      	mov	r0, r4
    a770:	f003 ff16 	bl	e5a0 <assert_post_action>
    a774:	e7e8      	b.n	a748 <z_impl_k_mutex_lock+0x1e4>
    a776:	bf00      	nop
    a778:	20005354 	.word	0x20005354
    a77c:	20005324 	.word	0x20005324
    a780:	00011a40 	.word	0x00011a40
    a784:	00011988 	.word	0x00011988
    a788:	000100e4 	.word	0x000100e4
    a78c:	00011a64 	.word	0x00011a64
    a790:	00010290 	.word	0x00010290
    a794:	000102f0 	.word	0x000102f0
    a798:	00010308 	.word	0x00010308
    a79c:	000102c0 	.word	0x000102c0
    a7a0:	000102d8 	.word	0x000102d8

0000a7a4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    a7a4:	b570      	push	{r4, r5, r6, lr}
    a7a6:	4604      	mov	r4, r0
    a7a8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    a7ac:	bb03      	cbnz	r3, a7f0 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    a7ae:	68a3      	ldr	r3, [r4, #8]
    a7b0:	2b00      	cmp	r3, #0
    a7b2:	f000 80a6 	beq.w	a902 <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    a7b6:	4a56      	ldr	r2, [pc, #344]	; (a910 <z_impl_k_mutex_unlock+0x16c>)
    a7b8:	6892      	ldr	r2, [r2, #8]
    a7ba:	4293      	cmp	r3, r2
    a7bc:	f040 80a4 	bne.w	a908 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    a7c0:	68e3      	ldr	r3, [r4, #12]
    a7c2:	b323      	cbz	r3, a80e <z_impl_k_mutex_unlock+0x6a>
    a7c4:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    a7c8:	bb6b      	cbnz	r3, a826 <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    a7ca:	4b51      	ldr	r3, [pc, #324]	; (a910 <z_impl_k_mutex_unlock+0x16c>)
    a7cc:	689b      	ldr	r3, [r3, #8]
    a7ce:	7bdb      	ldrb	r3, [r3, #15]
    a7d0:	2b01      	cmp	r3, #1
    a7d2:	d037      	beq.n	a844 <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    a7d4:	4b4e      	ldr	r3, [pc, #312]	; (a910 <z_impl_k_mutex_unlock+0x16c>)
    a7d6:	689a      	ldr	r2, [r3, #8]
    a7d8:	7bd3      	ldrb	r3, [r2, #15]
    a7da:	3b01      	subs	r3, #1
    a7dc:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    a7de:	68e3      	ldr	r3, [r4, #12]
    a7e0:	2b01      	cmp	r3, #1
    a7e2:	d93e      	bls.n	a862 <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    a7e4:	3b01      	subs	r3, #1
    a7e6:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    a7e8:	f001 f818 	bl	b81c <k_sched_unlock>

	return 0;
    a7ec:	2000      	movs	r0, #0
}
    a7ee:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    a7f0:	4d48      	ldr	r5, [pc, #288]	; (a914 <z_impl_k_mutex_unlock+0x170>)
    a7f2:	23c7      	movs	r3, #199	; 0xc7
    a7f4:	462a      	mov	r2, r5
    a7f6:	4948      	ldr	r1, [pc, #288]	; (a918 <z_impl_k_mutex_unlock+0x174>)
    a7f8:	4848      	ldr	r0, [pc, #288]	; (a91c <z_impl_k_mutex_unlock+0x178>)
    a7fa:	f003 fed8 	bl	e5ae <assert_print>
    a7fe:	4848      	ldr	r0, [pc, #288]	; (a920 <z_impl_k_mutex_unlock+0x17c>)
    a800:	f003 fed5 	bl	e5ae <assert_print>
    a804:	21c7      	movs	r1, #199	; 0xc7
    a806:	4628      	mov	r0, r5
    a808:	f003 feca 	bl	e5a0 <assert_post_action>
    a80c:	e7cf      	b.n	a7ae <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    a80e:	4d41      	ldr	r5, [pc, #260]	; (a914 <z_impl_k_mutex_unlock+0x170>)
    a810:	23df      	movs	r3, #223	; 0xdf
    a812:	462a      	mov	r2, r5
    a814:	4943      	ldr	r1, [pc, #268]	; (a924 <z_impl_k_mutex_unlock+0x180>)
    a816:	4841      	ldr	r0, [pc, #260]	; (a91c <z_impl_k_mutex_unlock+0x178>)
    a818:	f003 fec9 	bl	e5ae <assert_print>
    a81c:	21df      	movs	r1, #223	; 0xdf
    a81e:	4628      	mov	r0, r5
    a820:	f003 febe 	bl	e5a0 <assert_post_action>
    a824:	e7ce      	b.n	a7c4 <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    a826:	4d40      	ldr	r5, [pc, #256]	; (a928 <z_impl_k_mutex_unlock+0x184>)
    a828:	23fd      	movs	r3, #253	; 0xfd
    a82a:	462a      	mov	r2, r5
    a82c:	493a      	ldr	r1, [pc, #232]	; (a918 <z_impl_k_mutex_unlock+0x174>)
    a82e:	483b      	ldr	r0, [pc, #236]	; (a91c <z_impl_k_mutex_unlock+0x178>)
    a830:	f003 febd 	bl	e5ae <assert_print>
    a834:	483d      	ldr	r0, [pc, #244]	; (a92c <z_impl_k_mutex_unlock+0x188>)
    a836:	f003 feba 	bl	e5ae <assert_print>
    a83a:	21fd      	movs	r1, #253	; 0xfd
    a83c:	4628      	mov	r0, r5
    a83e:	f003 feaf 	bl	e5a0 <assert_post_action>
    a842:	e7c2      	b.n	a7ca <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    a844:	4d38      	ldr	r5, [pc, #224]	; (a928 <z_impl_k_mutex_unlock+0x184>)
    a846:	23fe      	movs	r3, #254	; 0xfe
    a848:	462a      	mov	r2, r5
    a84a:	4939      	ldr	r1, [pc, #228]	; (a930 <z_impl_k_mutex_unlock+0x18c>)
    a84c:	4833      	ldr	r0, [pc, #204]	; (a91c <z_impl_k_mutex_unlock+0x178>)
    a84e:	f003 feae 	bl	e5ae <assert_print>
    a852:	4836      	ldr	r0, [pc, #216]	; (a92c <z_impl_k_mutex_unlock+0x188>)
    a854:	f003 feab 	bl	e5ae <assert_print>
    a858:	21fe      	movs	r1, #254	; 0xfe
    a85a:	4628      	mov	r0, r5
    a85c:	f003 fea0 	bl	e5a0 <assert_post_action>
    a860:	e7b8      	b.n	a7d4 <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    a862:	f04f 0320 	mov.w	r3, #32
    a866:	f3ef 8511 	mrs	r5, BASEPRI
    a86a:	f383 8812 	msr	BASEPRI_MAX, r3
    a86e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a872:	4830      	ldr	r0, [pc, #192]	; (a934 <z_impl_k_mutex_unlock+0x190>)
    a874:	f7ff fc36 	bl	a0e4 <z_spin_lock_valid>
    a878:	b1c0      	cbz	r0, a8ac <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    a87a:	482e      	ldr	r0, [pc, #184]	; (a934 <z_impl_k_mutex_unlock+0x190>)
    a87c:	f7ff fc52 	bl	a124 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    a880:	6921      	ldr	r1, [r4, #16]
    a882:	4620      	mov	r0, r4
    a884:	f004 fd15 	bl	f2b2 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    a888:	4620      	mov	r0, r4
    a88a:	f001 f8a9 	bl	b9e0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    a88e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    a890:	b1e0      	cbz	r0, a8cc <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    a892:	f990 300e 	ldrsb.w	r3, [r0, #14]
    a896:	6123      	str	r3, [r4, #16]
    a898:	2300      	movs	r3, #0
    a89a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    a89e:	f000 fc87 	bl	b1b0 <z_ready_thread>
		z_reschedule(&lock, key);
    a8a2:	4629      	mov	r1, r5
    a8a4:	4823      	ldr	r0, [pc, #140]	; (a934 <z_impl_k_mutex_unlock+0x190>)
    a8a6:	f000 f9df 	bl	ac68 <z_reschedule>
    a8aa:	e79d      	b.n	a7e8 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a8ac:	4e22      	ldr	r6, [pc, #136]	; (a938 <z_impl_k_mutex_unlock+0x194>)
    a8ae:	238e      	movs	r3, #142	; 0x8e
    a8b0:	4632      	mov	r2, r6
    a8b2:	4922      	ldr	r1, [pc, #136]	; (a93c <z_impl_k_mutex_unlock+0x198>)
    a8b4:	4819      	ldr	r0, [pc, #100]	; (a91c <z_impl_k_mutex_unlock+0x178>)
    a8b6:	f003 fe7a 	bl	e5ae <assert_print>
    a8ba:	491e      	ldr	r1, [pc, #120]	; (a934 <z_impl_k_mutex_unlock+0x190>)
    a8bc:	4820      	ldr	r0, [pc, #128]	; (a940 <z_impl_k_mutex_unlock+0x19c>)
    a8be:	f003 fe76 	bl	e5ae <assert_print>
    a8c2:	218e      	movs	r1, #142	; 0x8e
    a8c4:	4630      	mov	r0, r6
    a8c6:	f003 fe6b 	bl	e5a0 <assert_post_action>
    a8ca:	e7d6      	b.n	a87a <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    a8cc:	2300      	movs	r3, #0
    a8ce:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a8d0:	4818      	ldr	r0, [pc, #96]	; (a934 <z_impl_k_mutex_unlock+0x190>)
    a8d2:	f7ff fc17 	bl	a104 <z_spin_unlock_valid>
    a8d6:	b120      	cbz	r0, a8e2 <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    a8d8:	f385 8811 	msr	BASEPRI, r5
    a8dc:	f3bf 8f6f 	isb	sy
    a8e0:	e782      	b.n	a7e8 <z_impl_k_mutex_unlock+0x44>
    a8e2:	4c15      	ldr	r4, [pc, #84]	; (a938 <z_impl_k_mutex_unlock+0x194>)
    a8e4:	23b9      	movs	r3, #185	; 0xb9
    a8e6:	4622      	mov	r2, r4
    a8e8:	4916      	ldr	r1, [pc, #88]	; (a944 <z_impl_k_mutex_unlock+0x1a0>)
    a8ea:	480c      	ldr	r0, [pc, #48]	; (a91c <z_impl_k_mutex_unlock+0x178>)
    a8ec:	f003 fe5f 	bl	e5ae <assert_print>
    a8f0:	4910      	ldr	r1, [pc, #64]	; (a934 <z_impl_k_mutex_unlock+0x190>)
    a8f2:	4815      	ldr	r0, [pc, #84]	; (a948 <z_impl_k_mutex_unlock+0x1a4>)
    a8f4:	f003 fe5b 	bl	e5ae <assert_print>
    a8f8:	21b9      	movs	r1, #185	; 0xb9
    a8fa:	4620      	mov	r0, r4
    a8fc:	f003 fe50 	bl	e5a0 <assert_post_action>
    a900:	e7ea      	b.n	a8d8 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    a902:	f06f 0015 	mvn.w	r0, #21
    a906:	e772      	b.n	a7ee <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    a908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a90c:	e76f      	b.n	a7ee <z_impl_k_mutex_unlock+0x4a>
    a90e:	bf00      	nop
    a910:	20005324 	.word	0x20005324
    a914:	00011a40 	.word	0x00011a40
    a918:	00011988 	.word	0x00011988
    a91c:	000100e4 	.word	0x000100e4
    a920:	00011a64 	.word	0x00011a64
    a924:	00011a8c 	.word	0x00011a8c
    a928:	00011aa4 	.word	0x00011aa4
    a92c:	00011ad0 	.word	0x00011ad0
    a930:	00011ad4 	.word	0x00011ad4
    a934:	20005354 	.word	0x20005354
    a938:	00010290 	.word	0x00010290
    a93c:	000102f0 	.word	0x000102f0
    a940:	00010308 	.word	0x00010308
    a944:	000102c0 	.word	0x000102c0
    a948:	000102d8 	.word	0x000102d8

0000a94c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    a94c:	b570      	push	{r4, r5, r6, lr}
    a94e:	4604      	mov	r4, r0
	__asm__ volatile(
    a950:	f04f 0320 	mov.w	r3, #32
    a954:	f3ef 8511 	mrs	r5, BASEPRI
    a958:	f383 8812 	msr	BASEPRI_MAX, r3
    a95c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a960:	4817      	ldr	r0, [pc, #92]	; (a9c0 <z_impl_k_sem_give+0x74>)
    a962:	f7ff fbbf 	bl	a0e4 <z_spin_lock_valid>
    a966:	b180      	cbz	r0, a98a <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    a968:	4815      	ldr	r0, [pc, #84]	; (a9c0 <z_impl_k_sem_give+0x74>)
    a96a:	f7ff fbdb 	bl	a124 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    a96e:	4620      	mov	r0, r4
    a970:	f001 f836 	bl	b9e0 <z_unpend_first_thread>

	if (thread != NULL) {
    a974:	b1c8      	cbz	r0, a9aa <z_impl_k_sem_give+0x5e>
    a976:	2200      	movs	r2, #0
    a978:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    a97c:	f000 fc18 	bl	b1b0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    a980:	4629      	mov	r1, r5
    a982:	480f      	ldr	r0, [pc, #60]	; (a9c0 <z_impl_k_sem_give+0x74>)
    a984:	f000 f970 	bl	ac68 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    a988:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a98a:	4e0e      	ldr	r6, [pc, #56]	; (a9c4 <z_impl_k_sem_give+0x78>)
    a98c:	238e      	movs	r3, #142	; 0x8e
    a98e:	4632      	mov	r2, r6
    a990:	490d      	ldr	r1, [pc, #52]	; (a9c8 <z_impl_k_sem_give+0x7c>)
    a992:	480e      	ldr	r0, [pc, #56]	; (a9cc <z_impl_k_sem_give+0x80>)
    a994:	f003 fe0b 	bl	e5ae <assert_print>
    a998:	4909      	ldr	r1, [pc, #36]	; (a9c0 <z_impl_k_sem_give+0x74>)
    a99a:	480d      	ldr	r0, [pc, #52]	; (a9d0 <z_impl_k_sem_give+0x84>)
    a99c:	f003 fe07 	bl	e5ae <assert_print>
    a9a0:	218e      	movs	r1, #142	; 0x8e
    a9a2:	4630      	mov	r0, r6
    a9a4:	f003 fdfc 	bl	e5a0 <assert_post_action>
    a9a8:	e7de      	b.n	a968 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    a9aa:	68a3      	ldr	r3, [r4, #8]
    a9ac:	68e2      	ldr	r2, [r4, #12]
    a9ae:	4293      	cmp	r3, r2
    a9b0:	d003      	beq.n	a9ba <z_impl_k_sem_give+0x6e>
    a9b2:	2201      	movs	r2, #1
    a9b4:	4413      	add	r3, r2
    a9b6:	60a3      	str	r3, [r4, #8]
}
    a9b8:	e7e2      	b.n	a980 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    a9ba:	2200      	movs	r2, #0
    a9bc:	e7fa      	b.n	a9b4 <z_impl_k_sem_give+0x68>
    a9be:	bf00      	nop
    a9c0:	20005358 	.word	0x20005358
    a9c4:	00010290 	.word	0x00010290
    a9c8:	000102f0 	.word	0x000102f0
    a9cc:	000100e4 	.word	0x000100e4
    a9d0:	00010308 	.word	0x00010308

0000a9d4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    a9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a9d8:	b082      	sub	sp, #8
    a9da:	4604      	mov	r4, r0
    a9dc:	4617      	mov	r7, r2
    a9de:	461d      	mov	r5, r3
    a9e0:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    a9e4:	b111      	cbz	r1, a9ec <z_impl_k_sem_take+0x18>
    a9e6:	ea55 0302 	orrs.w	r3, r5, r2
    a9ea:	d11f      	bne.n	aa2c <z_impl_k_sem_take+0x58>
    a9ec:	f04f 0320 	mov.w	r3, #32
    a9f0:	f3ef 8611 	mrs	r6, BASEPRI
    a9f4:	f383 8812 	msr	BASEPRI_MAX, r3
    a9f8:	f3bf 8f6f 	isb	sy
    a9fc:	4836      	ldr	r0, [pc, #216]	; (aad8 <z_impl_k_sem_take+0x104>)
    a9fe:	f7ff fb71 	bl	a0e4 <z_spin_lock_valid>
    aa02:	b310      	cbz	r0, aa4a <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    aa04:	4834      	ldr	r0, [pc, #208]	; (aad8 <z_impl_k_sem_take+0x104>)
    aa06:	f7ff fb8d 	bl	a124 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    aa0a:	68a1      	ldr	r1, [r4, #8]
    aa0c:	2900      	cmp	r1, #0
    aa0e:	d03d      	beq.n	aa8c <z_impl_k_sem_take+0xb8>
		sem->count--;
    aa10:	3901      	subs	r1, #1
    aa12:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aa14:	4830      	ldr	r0, [pc, #192]	; (aad8 <z_impl_k_sem_take+0x104>)
    aa16:	f7ff fb75 	bl	a104 <z_spin_unlock_valid>
    aa1a:	b338      	cbz	r0, aa6c <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    aa1c:	f386 8811 	msr	BASEPRI, r6
    aa20:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    aa24:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    aa26:	b002      	add	sp, #8
    aa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    aa2c:	4e2b      	ldr	r6, [pc, #172]	; (aadc <z_impl_k_sem_take+0x108>)
    aa2e:	2379      	movs	r3, #121	; 0x79
    aa30:	4632      	mov	r2, r6
    aa32:	492b      	ldr	r1, [pc, #172]	; (aae0 <z_impl_k_sem_take+0x10c>)
    aa34:	482b      	ldr	r0, [pc, #172]	; (aae4 <z_impl_k_sem_take+0x110>)
    aa36:	f003 fdba 	bl	e5ae <assert_print>
    aa3a:	482b      	ldr	r0, [pc, #172]	; (aae8 <z_impl_k_sem_take+0x114>)
    aa3c:	f003 fdb7 	bl	e5ae <assert_print>
    aa40:	2179      	movs	r1, #121	; 0x79
    aa42:	4630      	mov	r0, r6
    aa44:	f003 fdac 	bl	e5a0 <assert_post_action>
    aa48:	e7d0      	b.n	a9ec <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aa4a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; aaec <z_impl_k_sem_take+0x118>
    aa4e:	238e      	movs	r3, #142	; 0x8e
    aa50:	4642      	mov	r2, r8
    aa52:	4927      	ldr	r1, [pc, #156]	; (aaf0 <z_impl_k_sem_take+0x11c>)
    aa54:	4823      	ldr	r0, [pc, #140]	; (aae4 <z_impl_k_sem_take+0x110>)
    aa56:	f003 fdaa 	bl	e5ae <assert_print>
    aa5a:	491f      	ldr	r1, [pc, #124]	; (aad8 <z_impl_k_sem_take+0x104>)
    aa5c:	4825      	ldr	r0, [pc, #148]	; (aaf4 <z_impl_k_sem_take+0x120>)
    aa5e:	f003 fda6 	bl	e5ae <assert_print>
    aa62:	218e      	movs	r1, #142	; 0x8e
    aa64:	4640      	mov	r0, r8
    aa66:	f003 fd9b 	bl	e5a0 <assert_post_action>
    aa6a:	e7cb      	b.n	aa04 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    aa6c:	4c1f      	ldr	r4, [pc, #124]	; (aaec <z_impl_k_sem_take+0x118>)
    aa6e:	23b9      	movs	r3, #185	; 0xb9
    aa70:	4622      	mov	r2, r4
    aa72:	4921      	ldr	r1, [pc, #132]	; (aaf8 <z_impl_k_sem_take+0x124>)
    aa74:	481b      	ldr	r0, [pc, #108]	; (aae4 <z_impl_k_sem_take+0x110>)
    aa76:	f003 fd9a 	bl	e5ae <assert_print>
    aa7a:	4917      	ldr	r1, [pc, #92]	; (aad8 <z_impl_k_sem_take+0x104>)
    aa7c:	481f      	ldr	r0, [pc, #124]	; (aafc <z_impl_k_sem_take+0x128>)
    aa7e:	f003 fd96 	bl	e5ae <assert_print>
    aa82:	21b9      	movs	r1, #185	; 0xb9
    aa84:	4620      	mov	r0, r4
    aa86:	f003 fd8b 	bl	e5a0 <assert_post_action>
    aa8a:	e7c7      	b.n	aa1c <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    aa8c:	ea55 0307 	orrs.w	r3, r5, r7
    aa90:	d007      	beq.n	aaa2 <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    aa92:	9700      	str	r7, [sp, #0]
    aa94:	9501      	str	r5, [sp, #4]
    aa96:	4622      	mov	r2, r4
    aa98:	4631      	mov	r1, r6
    aa9a:	480f      	ldr	r0, [pc, #60]	; (aad8 <z_impl_k_sem_take+0x104>)
    aa9c:	f000 fd64 	bl	b568 <z_pend_curr>
	return ret;
    aaa0:	e7c1      	b.n	aa26 <z_impl_k_sem_take+0x52>
    aaa2:	480d      	ldr	r0, [pc, #52]	; (aad8 <z_impl_k_sem_take+0x104>)
    aaa4:	f7ff fb2e 	bl	a104 <z_spin_unlock_valid>
    aaa8:	b130      	cbz	r0, aab8 <z_impl_k_sem_take+0xe4>
    aaaa:	f386 8811 	msr	BASEPRI, r6
    aaae:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    aab2:	f06f 000f 	mvn.w	r0, #15
    aab6:	e7b6      	b.n	aa26 <z_impl_k_sem_take+0x52>
    aab8:	4c0c      	ldr	r4, [pc, #48]	; (aaec <z_impl_k_sem_take+0x118>)
    aaba:	23b9      	movs	r3, #185	; 0xb9
    aabc:	4622      	mov	r2, r4
    aabe:	490e      	ldr	r1, [pc, #56]	; (aaf8 <z_impl_k_sem_take+0x124>)
    aac0:	4808      	ldr	r0, [pc, #32]	; (aae4 <z_impl_k_sem_take+0x110>)
    aac2:	f003 fd74 	bl	e5ae <assert_print>
    aac6:	4904      	ldr	r1, [pc, #16]	; (aad8 <z_impl_k_sem_take+0x104>)
    aac8:	480c      	ldr	r0, [pc, #48]	; (aafc <z_impl_k_sem_take+0x128>)
    aaca:	f003 fd70 	bl	e5ae <assert_print>
    aace:	21b9      	movs	r1, #185	; 0xb9
    aad0:	4620      	mov	r0, r4
    aad2:	f003 fd65 	bl	e5a0 <assert_post_action>
    aad6:	e7e8      	b.n	aaaa <z_impl_k_sem_take+0xd6>
    aad8:	20005358 	.word	0x20005358
    aadc:	00011b08 	.word	0x00011b08
    aae0:	00011b28 	.word	0x00011b28
    aae4:	000100e4 	.word	0x000100e4
    aae8:	00011ad0 	.word	0x00011ad0
    aaec:	00010290 	.word	0x00010290
    aaf0:	000102f0 	.word	0x000102f0
    aaf4:	00010308 	.word	0x00010308
    aaf8:	000102c0 	.word	0x000102c0
    aafc:	000102d8 	.word	0x000102d8

0000ab00 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    ab00:	b538      	push	{r3, r4, r5, lr}
    ab02:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    ab04:	6883      	ldr	r3, [r0, #8]
    ab06:	b10b      	cbz	r3, ab0c <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    ab08:	68a0      	ldr	r0, [r4, #8]
    ab0a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    ab0c:	4d06      	ldr	r5, [pc, #24]	; (ab28 <pended_on_thread+0x28>)
    ab0e:	f240 23b9 	movw	r3, #697	; 0x2b9
    ab12:	462a      	mov	r2, r5
    ab14:	4905      	ldr	r1, [pc, #20]	; (ab2c <pended_on_thread+0x2c>)
    ab16:	4806      	ldr	r0, [pc, #24]	; (ab30 <pended_on_thread+0x30>)
    ab18:	f003 fd49 	bl	e5ae <assert_print>
    ab1c:	f240 21b9 	movw	r1, #697	; 0x2b9
    ab20:	4628      	mov	r0, r5
    ab22:	f003 fd3d 	bl	e5a0 <assert_post_action>
    ab26:	e7ef      	b.n	ab08 <pended_on_thread+0x8>
    ab28:	00011b78 	.word	0x00011b78
    ab2c:	00011b9c 	.word	0x00011b9c
    ab30:	000100e4 	.word	0x000100e4

0000ab34 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ab34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ab38:	bf08      	it	eq
    ab3a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    ab3e:	d100      	bne.n	ab42 <add_thread_timeout+0xe>
    ab40:	4770      	bx	lr
{
    ab42:	b508      	push	{r3, lr}
    ab44:	4902      	ldr	r1, [pc, #8]	; (ab50 <add_thread_timeout+0x1c>)
    ab46:	3018      	adds	r0, #24
    ab48:	f001 fa7c 	bl	c044 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    ab4c:	bd08      	pop	{r3, pc}
    ab4e:	bf00      	nop
    ab50:	0000b30d 	.word	0x0000b30d

0000ab54 <z_reset_time_slice>:
{
    ab54:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    ab56:	4b07      	ldr	r3, [pc, #28]	; (ab74 <z_reset_time_slice+0x20>)
    ab58:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    ab5a:	b904      	cbnz	r4, ab5e <z_reset_time_slice+0xa>
}
    ab5c:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    ab5e:	f7fc ff53 	bl	7a08 <sys_clock_elapsed>
    ab62:	4404      	add	r4, r0
    ab64:	4b04      	ldr	r3, [pc, #16]	; (ab78 <z_reset_time_slice+0x24>)
    ab66:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    ab68:	2100      	movs	r1, #0
    ab6a:	4b02      	ldr	r3, [pc, #8]	; (ab74 <z_reset_time_slice+0x20>)
    ab6c:	6818      	ldr	r0, [r3, #0]
    ab6e:	f001 fbf9 	bl	c364 <z_set_timeout_expiry>
}
    ab72:	e7f3      	b.n	ab5c <z_reset_time_slice+0x8>
    ab74:	20005368 	.word	0x20005368
    ab78:	20005324 	.word	0x20005324

0000ab7c <k_sched_time_slice_set>:
{
    ab7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab80:	4604      	mov	r4, r0
    ab82:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    ab84:	2700      	movs	r7, #0
	__asm__ volatile(
    ab86:	f04f 0320 	mov.w	r3, #32
    ab8a:	f3ef 8611 	mrs	r6, BASEPRI
    ab8e:	f383 8812 	msr	BASEPRI_MAX, r3
    ab92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ab96:	482a      	ldr	r0, [pc, #168]	; (ac40 <k_sched_time_slice_set+0xc4>)
    ab98:	f7ff faa4 	bl	a0e4 <z_spin_lock_valid>
    ab9c:	b118      	cbz	r0, aba6 <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    ab9e:	4828      	ldr	r0, [pc, #160]	; (ac40 <k_sched_time_slice_set+0xc4>)
    aba0:	f7ff fac0 	bl	a124 <z_spin_lock_set_owner>
	return k;
    aba4:	e023      	b.n	abee <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    aba6:	f8df 809c 	ldr.w	r8, [pc, #156]	; ac44 <k_sched_time_slice_set+0xc8>
    abaa:	238e      	movs	r3, #142	; 0x8e
    abac:	4642      	mov	r2, r8
    abae:	4926      	ldr	r1, [pc, #152]	; (ac48 <k_sched_time_slice_set+0xcc>)
    abb0:	4826      	ldr	r0, [pc, #152]	; (ac4c <k_sched_time_slice_set+0xd0>)
    abb2:	f003 fcfc 	bl	e5ae <assert_print>
    abb6:	4922      	ldr	r1, [pc, #136]	; (ac40 <k_sched_time_slice_set+0xc4>)
    abb8:	4825      	ldr	r0, [pc, #148]	; (ac50 <k_sched_time_slice_set+0xd4>)
    abba:	f003 fcf8 	bl	e5ae <assert_print>
    abbe:	218e      	movs	r1, #142	; 0x8e
    abc0:	4640      	mov	r0, r8
    abc2:	f003 fced 	bl	e5a0 <assert_post_action>
    abc6:	e7ea      	b.n	ab9e <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    abc8:	2802      	cmp	r0, #2
    abca:	bfb8      	it	lt
    abcc:	2002      	movlt	r0, #2
    abce:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    abd0:	4b20      	ldr	r3, [pc, #128]	; (ac54 <k_sched_time_slice_set+0xd8>)
    abd2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    abd4:	4b20      	ldr	r3, [pc, #128]	; (ac58 <k_sched_time_slice_set+0xdc>)
    abd6:	6898      	ldr	r0, [r3, #8]
    abd8:	f7ff ffbc 	bl	ab54 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    abdc:	4818      	ldr	r0, [pc, #96]	; (ac40 <k_sched_time_slice_set+0xc4>)
    abde:	f7ff fa91 	bl	a104 <z_spin_unlock_valid>
    abe2:	b1d0      	cbz	r0, ac1a <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    abe4:	f386 8811 	msr	BASEPRI, r6
    abe8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    abec:	2701      	movs	r7, #1
    abee:	bb27      	cbnz	r7, ac3a <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    abf0:	4b19      	ldr	r3, [pc, #100]	; (ac58 <k_sched_time_slice_set+0xdc>)
    abf2:	2200      	movs	r2, #0
    abf4:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    abf6:	0c61      	lsrs	r1, r4, #17
    abf8:	03e3      	lsls	r3, r4, #15
    abfa:	f240 30e7 	movw	r0, #999	; 0x3e7
    abfe:	1818      	adds	r0, r3, r0
    ac00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ac04:	f04f 0300 	mov.w	r3, #0
    ac08:	f141 0100 	adc.w	r1, r1, #0
    ac0c:	f7f5 fee6 	bl	9dc <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    ac10:	4b12      	ldr	r3, [pc, #72]	; (ac5c <k_sched_time_slice_set+0xe0>)
    ac12:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    ac14:	2c00      	cmp	r4, #0
    ac16:	dcd7      	bgt.n	abc8 <k_sched_time_slice_set+0x4c>
    ac18:	e7da      	b.n	abd0 <k_sched_time_slice_set+0x54>
    ac1a:	4f0a      	ldr	r7, [pc, #40]	; (ac44 <k_sched_time_slice_set+0xc8>)
    ac1c:	23b9      	movs	r3, #185	; 0xb9
    ac1e:	463a      	mov	r2, r7
    ac20:	490f      	ldr	r1, [pc, #60]	; (ac60 <k_sched_time_slice_set+0xe4>)
    ac22:	480a      	ldr	r0, [pc, #40]	; (ac4c <k_sched_time_slice_set+0xd0>)
    ac24:	f003 fcc3 	bl	e5ae <assert_print>
    ac28:	4905      	ldr	r1, [pc, #20]	; (ac40 <k_sched_time_slice_set+0xc4>)
    ac2a:	480e      	ldr	r0, [pc, #56]	; (ac64 <k_sched_time_slice_set+0xe8>)
    ac2c:	f003 fcbf 	bl	e5ae <assert_print>
    ac30:	21b9      	movs	r1, #185	; 0xb9
    ac32:	4638      	mov	r0, r7
    ac34:	f003 fcb4 	bl	e5a0 <assert_post_action>
    ac38:	e7d4      	b.n	abe4 <k_sched_time_slice_set+0x68>
}
    ac3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ac3e:	bf00      	nop
    ac40:	20005360 	.word	0x20005360
    ac44:	00010290 	.word	0x00010290
    ac48:	000102f0 	.word	0x000102f0
    ac4c:	000100e4 	.word	0x000100e4
    ac50:	00010308 	.word	0x00010308
    ac54:	20005364 	.word	0x20005364
    ac58:	20005324 	.word	0x20005324
    ac5c:	20005368 	.word	0x20005368
    ac60:	000102c0 	.word	0x000102c0
    ac64:	000102d8 	.word	0x000102d8

0000ac68 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    ac68:	b570      	push	{r4, r5, r6, lr}
    ac6a:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    ac6c:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ac6e:	b921      	cbnz	r1, ac7a <z_reschedule+0x12>
    ac70:	f3ef 8305 	mrs	r3, IPSR
    ac74:	b913      	cbnz	r3, ac7c <z_reschedule+0x14>
    ac76:	2101      	movs	r1, #1
    ac78:	e000      	b.n	ac7c <z_reschedule+0x14>
    ac7a:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    ac7c:	f011 0f01 	tst.w	r1, #1
    ac80:	d01c      	beq.n	acbc <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    ac82:	4b1b      	ldr	r3, [pc, #108]	; (acf0 <z_reschedule+0x88>)
    ac84:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    ac86:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    ac88:	429a      	cmp	r2, r3
    ac8a:	d017      	beq.n	acbc <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ac8c:	4620      	mov	r0, r4
    ac8e:	f7ff fa39 	bl	a104 <z_spin_unlock_valid>
    ac92:	b118      	cbz	r0, ac9c <z_reschedule+0x34>
	ret = arch_swap(key);
    ac94:	4628      	mov	r0, r5
    ac96:	f7fa ff5b 	bl	5b50 <arch_swap>
		z_swap(lock, key);
    ac9a:	e017      	b.n	accc <z_reschedule+0x64>
    ac9c:	4e15      	ldr	r6, [pc, #84]	; (acf4 <z_reschedule+0x8c>)
    ac9e:	23d0      	movs	r3, #208	; 0xd0
    aca0:	4632      	mov	r2, r6
    aca2:	4915      	ldr	r1, [pc, #84]	; (acf8 <z_reschedule+0x90>)
    aca4:	4815      	ldr	r0, [pc, #84]	; (acfc <z_reschedule+0x94>)
    aca6:	f003 fc82 	bl	e5ae <assert_print>
    acaa:	4621      	mov	r1, r4
    acac:	4814      	ldr	r0, [pc, #80]	; (ad00 <z_reschedule+0x98>)
    acae:	f003 fc7e 	bl	e5ae <assert_print>
    acb2:	21d0      	movs	r1, #208	; 0xd0
    acb4:	4630      	mov	r0, r6
    acb6:	f003 fc73 	bl	e5a0 <assert_post_action>
    acba:	e7eb      	b.n	ac94 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    acbc:	4620      	mov	r0, r4
    acbe:	f7ff fa21 	bl	a104 <z_spin_unlock_valid>
    acc2:	b120      	cbz	r0, acce <z_reschedule+0x66>
    acc4:	f385 8811 	msr	BASEPRI, r5
    acc8:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    accc:	bd70      	pop	{r4, r5, r6, pc}
    acce:	4e09      	ldr	r6, [pc, #36]	; (acf4 <z_reschedule+0x8c>)
    acd0:	23b9      	movs	r3, #185	; 0xb9
    acd2:	4632      	mov	r2, r6
    acd4:	4908      	ldr	r1, [pc, #32]	; (acf8 <z_reschedule+0x90>)
    acd6:	4809      	ldr	r0, [pc, #36]	; (acfc <z_reschedule+0x94>)
    acd8:	f003 fc69 	bl	e5ae <assert_print>
    acdc:	4621      	mov	r1, r4
    acde:	4808      	ldr	r0, [pc, #32]	; (ad00 <z_reschedule+0x98>)
    ace0:	f003 fc65 	bl	e5ae <assert_print>
    ace4:	21b9      	movs	r1, #185	; 0xb9
    ace6:	4630      	mov	r0, r6
    ace8:	f003 fc5a 	bl	e5a0 <assert_post_action>
    acec:	e7ea      	b.n	acc4 <z_reschedule+0x5c>
    acee:	bf00      	nop
    acf0:	20005324 	.word	0x20005324
    acf4:	00010290 	.word	0x00010290
    acf8:	000102c0 	.word	0x000102c0
    acfc:	000100e4 	.word	0x000100e4
    ad00:	000102d8 	.word	0x000102d8

0000ad04 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    ad04:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    ad06:	2400      	movs	r4, #0
	__asm__ volatile(
    ad08:	f04f 0320 	mov.w	r3, #32
    ad0c:	f3ef 8511 	mrs	r5, BASEPRI
    ad10:	f383 8812 	msr	BASEPRI_MAX, r3
    ad14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ad18:	482f      	ldr	r0, [pc, #188]	; (add8 <k_sched_lock+0xd4>)
    ad1a:	f7ff f9e3 	bl	a0e4 <z_spin_lock_valid>
    ad1e:	b118      	cbz	r0, ad28 <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    ad20:	482d      	ldr	r0, [pc, #180]	; (add8 <k_sched_lock+0xd4>)
    ad22:	f7ff f9ff 	bl	a124 <z_spin_lock_set_owner>
	return k;
    ad26:	e022      	b.n	ad6e <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ad28:	4e2c      	ldr	r6, [pc, #176]	; (addc <k_sched_lock+0xd8>)
    ad2a:	238e      	movs	r3, #142	; 0x8e
    ad2c:	4632      	mov	r2, r6
    ad2e:	492c      	ldr	r1, [pc, #176]	; (ade0 <k_sched_lock+0xdc>)
    ad30:	482c      	ldr	r0, [pc, #176]	; (ade4 <k_sched_lock+0xe0>)
    ad32:	f003 fc3c 	bl	e5ae <assert_print>
    ad36:	4928      	ldr	r1, [pc, #160]	; (add8 <k_sched_lock+0xd4>)
    ad38:	482b      	ldr	r0, [pc, #172]	; (ade8 <k_sched_lock+0xe4>)
    ad3a:	f003 fc38 	bl	e5ae <assert_print>
    ad3e:	218e      	movs	r1, #142	; 0x8e
    ad40:	4630      	mov	r0, r6
    ad42:	f003 fc2d 	bl	e5a0 <assert_post_action>
    ad46:	e7eb      	b.n	ad20 <k_sched_lock+0x1c>
    ad48:	4b28      	ldr	r3, [pc, #160]	; (adec <k_sched_lock+0xe8>)
    ad4a:	689b      	ldr	r3, [r3, #8]
    ad4c:	7bdb      	ldrb	r3, [r3, #15]
    ad4e:	2b01      	cmp	r3, #1
    ad50:	d022      	beq.n	ad98 <k_sched_lock+0x94>
	--_current->base.sched_locked;
    ad52:	4b26      	ldr	r3, [pc, #152]	; (adec <k_sched_lock+0xe8>)
    ad54:	689a      	ldr	r2, [r3, #8]
    ad56:	7bd3      	ldrb	r3, [r2, #15]
    ad58:	3b01      	subs	r3, #1
    ad5a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ad5c:	481e      	ldr	r0, [pc, #120]	; (add8 <k_sched_lock+0xd4>)
    ad5e:	f7ff f9d1 	bl	a104 <z_spin_unlock_valid>
    ad62:	b340      	cbz	r0, adb6 <k_sched_lock+0xb2>
	__asm__ volatile(
    ad64:	f385 8811 	msr	BASEPRI, r5
    ad68:	f3bf 8f6f 	isb	sy
    ad6c:	2401      	movs	r4, #1
    ad6e:	2c00      	cmp	r4, #0
    ad70:	d131      	bne.n	add6 <k_sched_lock+0xd2>
    ad72:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    ad76:	2b00      	cmp	r3, #0
    ad78:	d0e6      	beq.n	ad48 <k_sched_lock+0x44>
    ad7a:	4c1d      	ldr	r4, [pc, #116]	; (adf0 <k_sched_lock+0xec>)
    ad7c:	23fd      	movs	r3, #253	; 0xfd
    ad7e:	4622      	mov	r2, r4
    ad80:	491c      	ldr	r1, [pc, #112]	; (adf4 <k_sched_lock+0xf0>)
    ad82:	4818      	ldr	r0, [pc, #96]	; (ade4 <k_sched_lock+0xe0>)
    ad84:	f003 fc13 	bl	e5ae <assert_print>
    ad88:	481b      	ldr	r0, [pc, #108]	; (adf8 <k_sched_lock+0xf4>)
    ad8a:	f003 fc10 	bl	e5ae <assert_print>
    ad8e:	21fd      	movs	r1, #253	; 0xfd
    ad90:	4620      	mov	r0, r4
    ad92:	f003 fc05 	bl	e5a0 <assert_post_action>
    ad96:	e7d7      	b.n	ad48 <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    ad98:	4c15      	ldr	r4, [pc, #84]	; (adf0 <k_sched_lock+0xec>)
    ad9a:	23fe      	movs	r3, #254	; 0xfe
    ad9c:	4622      	mov	r2, r4
    ad9e:	4917      	ldr	r1, [pc, #92]	; (adfc <k_sched_lock+0xf8>)
    ada0:	4810      	ldr	r0, [pc, #64]	; (ade4 <k_sched_lock+0xe0>)
    ada2:	f003 fc04 	bl	e5ae <assert_print>
    ada6:	4814      	ldr	r0, [pc, #80]	; (adf8 <k_sched_lock+0xf4>)
    ada8:	f003 fc01 	bl	e5ae <assert_print>
    adac:	21fe      	movs	r1, #254	; 0xfe
    adae:	4620      	mov	r0, r4
    adb0:	f003 fbf6 	bl	e5a0 <assert_post_action>
    adb4:	e7cd      	b.n	ad52 <k_sched_lock+0x4e>
    adb6:	4c09      	ldr	r4, [pc, #36]	; (addc <k_sched_lock+0xd8>)
    adb8:	23b9      	movs	r3, #185	; 0xb9
    adba:	4622      	mov	r2, r4
    adbc:	4910      	ldr	r1, [pc, #64]	; (ae00 <k_sched_lock+0xfc>)
    adbe:	4809      	ldr	r0, [pc, #36]	; (ade4 <k_sched_lock+0xe0>)
    adc0:	f003 fbf5 	bl	e5ae <assert_print>
    adc4:	4904      	ldr	r1, [pc, #16]	; (add8 <k_sched_lock+0xd4>)
    adc6:	480f      	ldr	r0, [pc, #60]	; (ae04 <k_sched_lock+0x100>)
    adc8:	f003 fbf1 	bl	e5ae <assert_print>
    adcc:	21b9      	movs	r1, #185	; 0xb9
    adce:	4620      	mov	r0, r4
    add0:	f003 fbe6 	bl	e5a0 <assert_post_action>
    add4:	e7c6      	b.n	ad64 <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    add6:	bd70      	pop	{r4, r5, r6, pc}
    add8:	20005360 	.word	0x20005360
    addc:	00010290 	.word	0x00010290
    ade0:	000102f0 	.word	0x000102f0
    ade4:	000100e4 	.word	0x000100e4
    ade8:	00010308 	.word	0x00010308
    adec:	20005324 	.word	0x20005324
    adf0:	00011aa4 	.word	0x00011aa4
    adf4:	00011988 	.word	0x00011988
    adf8:	00011ad0 	.word	0x00011ad0
    adfc:	00011ad4 	.word	0x00011ad4
    ae00:	000102c0 	.word	0x000102c0
    ae04:	000102d8 	.word	0x000102d8

0000ae08 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    ae08:	b538      	push	{r3, r4, r5, lr}
    ae0a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    ae0c:	4b0c      	ldr	r3, [pc, #48]	; (ae40 <z_priq_dumb_remove+0x38>)
    ae0e:	4299      	cmp	r1, r3
    ae10:	d007      	beq.n	ae22 <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    ae12:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    ae14:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    ae16:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    ae18:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    ae1a:	2300      	movs	r3, #0
    ae1c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    ae1e:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    ae20:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    ae22:	4d08      	ldr	r5, [pc, #32]	; (ae44 <z_priq_dumb_remove+0x3c>)
    ae24:	f240 433d 	movw	r3, #1085	; 0x43d
    ae28:	462a      	mov	r2, r5
    ae2a:	4907      	ldr	r1, [pc, #28]	; (ae48 <z_priq_dumb_remove+0x40>)
    ae2c:	4807      	ldr	r0, [pc, #28]	; (ae4c <z_priq_dumb_remove+0x44>)
    ae2e:	f003 fbbe 	bl	e5ae <assert_print>
    ae32:	f240 413d 	movw	r1, #1085	; 0x43d
    ae36:	4628      	mov	r0, r5
    ae38:	f003 fbb2 	bl	e5a0 <assert_post_action>
    ae3c:	e7e9      	b.n	ae12 <z_priq_dumb_remove+0xa>
    ae3e:	bf00      	nop
    ae40:	20004618 	.word	0x20004618
    ae44:	00011b78 	.word	0x00011b78
    ae48:	00011bb4 	.word	0x00011bb4
    ae4c:	000100e4 	.word	0x000100e4

0000ae50 <update_cache>:
{
    ae50:	b538      	push	{r3, r4, r5, lr}
    ae52:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    ae54:	4819      	ldr	r0, [pc, #100]	; (aebc <update_cache+0x6c>)
    ae56:	f004 fa6e 	bl	f336 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    ae5a:	4605      	mov	r5, r0
    ae5c:	b188      	cbz	r0, ae82 <update_cache+0x32>
	if (preempt_ok != 0) {
    ae5e:	bb14      	cbnz	r4, aea6 <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    ae60:	4b17      	ldr	r3, [pc, #92]	; (aec0 <update_cache+0x70>)
    ae62:	689b      	ldr	r3, [r3, #8]
    ae64:	b183      	cbz	r3, ae88 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    ae66:	4b16      	ldr	r3, [pc, #88]	; (aec0 <update_cache+0x70>)
    ae68:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    ae6a:	7b5a      	ldrb	r2, [r3, #13]
    ae6c:	f012 0f1f 	tst.w	r2, #31
    ae70:	d119      	bne.n	aea6 <update_cache+0x56>
	return node->next != NULL;
    ae72:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    ae74:	b9ba      	cbnz	r2, aea6 <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    ae76:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    ae78:	2a7f      	cmp	r2, #127	; 0x7f
    ae7a:	d914      	bls.n	aea6 <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    ae7c:	4a10      	ldr	r2, [pc, #64]	; (aec0 <update_cache+0x70>)
    ae7e:	61d3      	str	r3, [r2, #28]
    ae80:	e01a      	b.n	aeb8 <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    ae82:	4b0f      	ldr	r3, [pc, #60]	; (aec0 <update_cache+0x70>)
    ae84:	68dd      	ldr	r5, [r3, #12]
    ae86:	e7ea      	b.n	ae5e <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    ae88:	4c0e      	ldr	r4, [pc, #56]	; (aec4 <update_cache+0x74>)
    ae8a:	2389      	movs	r3, #137	; 0x89
    ae8c:	4622      	mov	r2, r4
    ae8e:	490e      	ldr	r1, [pc, #56]	; (aec8 <update_cache+0x78>)
    ae90:	480e      	ldr	r0, [pc, #56]	; (aecc <update_cache+0x7c>)
    ae92:	f003 fb8c 	bl	e5ae <assert_print>
    ae96:	480e      	ldr	r0, [pc, #56]	; (aed0 <update_cache+0x80>)
    ae98:	f003 fb89 	bl	e5ae <assert_print>
    ae9c:	2189      	movs	r1, #137	; 0x89
    ae9e:	4620      	mov	r0, r4
    aea0:	f003 fb7e 	bl	e5a0 <assert_post_action>
    aea4:	e7df      	b.n	ae66 <update_cache+0x16>
		if (thread != _current) {
    aea6:	4b06      	ldr	r3, [pc, #24]	; (aec0 <update_cache+0x70>)
    aea8:	689b      	ldr	r3, [r3, #8]
    aeaa:	42ab      	cmp	r3, r5
    aeac:	d002      	beq.n	aeb4 <update_cache+0x64>
			z_reset_time_slice(thread);
    aeae:	4628      	mov	r0, r5
    aeb0:	f7ff fe50 	bl	ab54 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    aeb4:	4b02      	ldr	r3, [pc, #8]	; (aec0 <update_cache+0x70>)
    aeb6:	61dd      	str	r5, [r3, #28]
}
    aeb8:	bd38      	pop	{r3, r4, r5, pc}
    aeba:	bf00      	nop
    aebc:	20005344 	.word	0x20005344
    aec0:	20005324 	.word	0x20005324
    aec4:	00011b78 	.word	0x00011b78
    aec8:	00011bd8 	.word	0x00011bd8
    aecc:	000100e4 	.word	0x000100e4
    aed0:	00011ad0 	.word	0x00011ad0

0000aed4 <move_thread_to_end_of_prio_q>:
{
    aed4:	b538      	push	{r3, r4, r5, lr}
    aed6:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    aed8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    aeda:	f990 300d 	ldrsb.w	r3, [r0, #13]
    aede:	2b00      	cmp	r3, #0
    aee0:	db2b      	blt.n	af3a <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    aee2:	7b6b      	ldrb	r3, [r5, #13]
    aee4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    aee8:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    aeea:	4b22      	ldr	r3, [pc, #136]	; (af74 <move_thread_to_end_of_prio_q+0xa0>)
    aeec:	429d      	cmp	r5, r3
    aeee:	d02c      	beq.n	af4a <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    aef0:	4b21      	ldr	r3, [pc, #132]	; (af78 <move_thread_to_end_of_prio_q+0xa4>)
    aef2:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aef6:	429c      	cmp	r4, r3
    aef8:	d039      	beq.n	af6e <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    aefa:	b16c      	cbz	r4, af18 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    aefc:	4621      	mov	r1, r4
    aefe:	4628      	mov	r0, r5
    af00:	f004 f9fa 	bl	f2f8 <z_sched_prio_cmp>
    af04:	2800      	cmp	r0, #0
    af06:	dc2c      	bgt.n	af62 <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    af08:	b134      	cbz	r4, af18 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    af0a:	4b1b      	ldr	r3, [pc, #108]	; (af78 <move_thread_to_end_of_prio_q+0xa4>)
    af0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    af0e:	429c      	cmp	r4, r3
    af10:	d002      	beq.n	af18 <move_thread_to_end_of_prio_q+0x44>
    af12:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    af14:	2c00      	cmp	r4, #0
    af16:	d1f0      	bne.n	aefa <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    af18:	4b17      	ldr	r3, [pc, #92]	; (af78 <move_thread_to_end_of_prio_q+0xa4>)
    af1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    af1c:	f103 0120 	add.w	r1, r3, #32
    af20:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    af22:	606a      	str	r2, [r5, #4]
	tail->next = node;
    af24:	6015      	str	r5, [r2, #0]
	list->tail = node;
    af26:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    af28:	4b13      	ldr	r3, [pc, #76]	; (af78 <move_thread_to_end_of_prio_q+0xa4>)
    af2a:	6898      	ldr	r0, [r3, #8]
    af2c:	42a8      	cmp	r0, r5
    af2e:	bf14      	ite	ne
    af30:	2000      	movne	r0, #0
    af32:	2001      	moveq	r0, #1
    af34:	f7ff ff8c 	bl	ae50 <update_cache>
}
    af38:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    af3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    af3e:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    af40:	4601      	mov	r1, r0
    af42:	480e      	ldr	r0, [pc, #56]	; (af7c <move_thread_to_end_of_prio_q+0xa8>)
    af44:	f7ff ff60 	bl	ae08 <z_priq_dumb_remove>
}
    af48:	e7cb      	b.n	aee2 <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    af4a:	4c0d      	ldr	r4, [pc, #52]	; (af80 <move_thread_to_end_of_prio_q+0xac>)
    af4c:	23ba      	movs	r3, #186	; 0xba
    af4e:	4622      	mov	r2, r4
    af50:	490c      	ldr	r1, [pc, #48]	; (af84 <move_thread_to_end_of_prio_q+0xb0>)
    af52:	480d      	ldr	r0, [pc, #52]	; (af88 <move_thread_to_end_of_prio_q+0xb4>)
    af54:	f003 fb2b 	bl	e5ae <assert_print>
    af58:	21ba      	movs	r1, #186	; 0xba
    af5a:	4620      	mov	r0, r4
    af5c:	f003 fb20 	bl	e5a0 <assert_post_action>
    af60:	e7c6      	b.n	aef0 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    af62:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    af64:	606b      	str	r3, [r5, #4]
	node->next = successor;
    af66:	602c      	str	r4, [r5, #0]
	prev->next = node;
    af68:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    af6a:	6065      	str	r5, [r4, #4]
}
    af6c:	e7dc      	b.n	af28 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    af6e:	2400      	movs	r4, #0
    af70:	e7c3      	b.n	aefa <move_thread_to_end_of_prio_q+0x26>
    af72:	bf00      	nop
    af74:	20004618 	.word	0x20004618
    af78:	20005324 	.word	0x20005324
    af7c:	20005344 	.word	0x20005344
    af80:	00011b78 	.word	0x00011b78
    af84:	00011bb4 	.word	0x00011bb4
    af88:	000100e4 	.word	0x000100e4

0000af8c <slice_expired_locked>:
{
    af8c:	b538      	push	{r3, r4, r5, lr}
    af8e:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    af90:	4b07      	ldr	r3, [pc, #28]	; (afb0 <slice_expired_locked+0x24>)
    af92:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    af94:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    af96:	f013 0f1f 	tst.w	r3, #31
    af9a:	d004      	beq.n	afa6 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    af9c:	4628      	mov	r0, r5
    af9e:	f7ff fdd9 	bl	ab54 <z_reset_time_slice>
}
    afa2:	4620      	mov	r0, r4
    afa4:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    afa6:	4628      	mov	r0, r5
    afa8:	f7ff ff94 	bl	aed4 <move_thread_to_end_of_prio_q>
    afac:	e7f6      	b.n	af9c <slice_expired_locked+0x10>
    afae:	bf00      	nop
    afb0:	20005324 	.word	0x20005324

0000afb4 <z_time_slice>:
{
    afb4:	b570      	push	{r4, r5, r6, lr}
    afb6:	4604      	mov	r4, r0
	__asm__ volatile(
    afb8:	f04f 0320 	mov.w	r3, #32
    afbc:	f3ef 8511 	mrs	r5, BASEPRI
    afc0:	f383 8812 	msr	BASEPRI_MAX, r3
    afc4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    afc8:	4842      	ldr	r0, [pc, #264]	; (b0d4 <z_time_slice+0x120>)
    afca:	f7ff f88b 	bl	a0e4 <z_spin_lock_valid>
    afce:	b310      	cbz	r0, b016 <z_time_slice+0x62>
	z_spin_lock_set_owner(l);
    afd0:	4840      	ldr	r0, [pc, #256]	; (b0d4 <z_time_slice+0x120>)
    afd2:	f7ff f8a7 	bl	a124 <z_spin_lock_set_owner>
	return k;
    afd6:	462b      	mov	r3, r5
	if (pending_current == _current) {
    afd8:	4a3f      	ldr	r2, [pc, #252]	; (b0d8 <z_time_slice+0x124>)
    afda:	6892      	ldr	r2, [r2, #8]
    afdc:	493f      	ldr	r1, [pc, #252]	; (b0dc <z_time_slice+0x128>)
    afde:	6809      	ldr	r1, [r1, #0]
    afe0:	428a      	cmp	r2, r1
    afe2:	d028      	beq.n	b036 <z_time_slice+0x82>
	pending_current = NULL;
    afe4:	493d      	ldr	r1, [pc, #244]	; (b0dc <z_time_slice+0x128>)
    afe6:	2000      	movs	r0, #0
    afe8:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    afea:	493d      	ldr	r1, [pc, #244]	; (b0e0 <z_time_slice+0x12c>)
    afec:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    afee:	2900      	cmp	r1, #0
    aff0:	d052      	beq.n	b098 <z_time_slice+0xe4>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    aff2:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    aff4:	297f      	cmp	r1, #127	; 0x7f
    aff6:	d83a      	bhi.n	b06e <z_time_slice+0xba>
    aff8:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    affa:	f011 0f1f 	tst.w	r1, #31
    affe:	d140      	bne.n	b082 <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    b000:	f992 000e 	ldrsb.w	r0, [r2, #14]
    b004:	4937      	ldr	r1, [pc, #220]	; (b0e4 <z_time_slice+0x130>)
    b006:	6809      	ldr	r1, [r1, #0]
    b008:	4288      	cmp	r0, r1
    b00a:	db3c      	blt.n	b086 <z_time_slice+0xd2>
		&& !z_is_idle_thread_object(thread);
    b00c:	4936      	ldr	r1, [pc, #216]	; (b0e8 <z_time_slice+0x134>)
    b00e:	428a      	cmp	r2, r1
    b010:	d03b      	beq.n	b08a <z_time_slice+0xd6>
    b012:	2201      	movs	r2, #1
    b014:	e02c      	b.n	b070 <z_time_slice+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b016:	4e35      	ldr	r6, [pc, #212]	; (b0ec <z_time_slice+0x138>)
    b018:	238e      	movs	r3, #142	; 0x8e
    b01a:	4632      	mov	r2, r6
    b01c:	4934      	ldr	r1, [pc, #208]	; (b0f0 <z_time_slice+0x13c>)
    b01e:	4835      	ldr	r0, [pc, #212]	; (b0f4 <z_time_slice+0x140>)
    b020:	f003 fac5 	bl	e5ae <assert_print>
    b024:	492b      	ldr	r1, [pc, #172]	; (b0d4 <z_time_slice+0x120>)
    b026:	4834      	ldr	r0, [pc, #208]	; (b0f8 <z_time_slice+0x144>)
    b028:	f003 fac1 	bl	e5ae <assert_print>
    b02c:	218e      	movs	r1, #142	; 0x8e
    b02e:	4630      	mov	r0, r6
    b030:	f003 fab6 	bl	e5a0 <assert_post_action>
    b034:	e7cc      	b.n	afd0 <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    b036:	4610      	mov	r0, r2
    b038:	f7ff fd8c 	bl	ab54 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b03c:	4825      	ldr	r0, [pc, #148]	; (b0d4 <z_time_slice+0x120>)
    b03e:	f7ff f861 	bl	a104 <z_spin_unlock_valid>
    b042:	b120      	cbz	r0, b04e <z_time_slice+0x9a>
	__asm__ volatile(
    b044:	f385 8811 	msr	BASEPRI, r5
    b048:	f3bf 8f6f 	isb	sy
		return;
    b04c:	e030      	b.n	b0b0 <z_time_slice+0xfc>
    b04e:	4c27      	ldr	r4, [pc, #156]	; (b0ec <z_time_slice+0x138>)
    b050:	23b9      	movs	r3, #185	; 0xb9
    b052:	4622      	mov	r2, r4
    b054:	4929      	ldr	r1, [pc, #164]	; (b0fc <z_time_slice+0x148>)
    b056:	4827      	ldr	r0, [pc, #156]	; (b0f4 <z_time_slice+0x140>)
    b058:	f003 faa9 	bl	e5ae <assert_print>
    b05c:	491d      	ldr	r1, [pc, #116]	; (b0d4 <z_time_slice+0x120>)
    b05e:	4828      	ldr	r0, [pc, #160]	; (b100 <z_time_slice+0x14c>)
    b060:	f003 faa5 	bl	e5ae <assert_print>
    b064:	21b9      	movs	r1, #185	; 0xb9
    b066:	4620      	mov	r0, r4
    b068:	f003 fa9a 	bl	e5a0 <assert_post_action>
    b06c:	e7ea      	b.n	b044 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    b06e:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    b070:	b192      	cbz	r2, b098 <z_time_slice+0xe4>
		if (ticks >= _current_cpu->slice_ticks) {
    b072:	4a19      	ldr	r2, [pc, #100]	; (b0d8 <z_time_slice+0x124>)
    b074:	6910      	ldr	r0, [r2, #16]
    b076:	42a0      	cmp	r0, r4
    b078:	dd09      	ble.n	b08e <z_time_slice+0xda>
			_current_cpu->slice_ticks -= ticks;
    b07a:	1b00      	subs	r0, r0, r4
    b07c:	4a16      	ldr	r2, [pc, #88]	; (b0d8 <z_time_slice+0x124>)
    b07e:	6110      	str	r0, [r2, #16]
    b080:	e00d      	b.n	b09e <z_time_slice+0xea>
		&& !z_is_idle_thread_object(thread);
    b082:	2200      	movs	r2, #0
    b084:	e7f4      	b.n	b070 <z_time_slice+0xbc>
    b086:	2200      	movs	r2, #0
    b088:	e7f2      	b.n	b070 <z_time_slice+0xbc>
    b08a:	2200      	movs	r2, #0
    b08c:	e7f0      	b.n	b070 <z_time_slice+0xbc>
			key = slice_expired_locked(key);
    b08e:	4628      	mov	r0, r5
    b090:	f7ff ff7c 	bl	af8c <slice_expired_locked>
    b094:	4603      	mov	r3, r0
    b096:	e002      	b.n	b09e <z_time_slice+0xea>
		_current_cpu->slice_ticks = 0;
    b098:	4a0f      	ldr	r2, [pc, #60]	; (b0d8 <z_time_slice+0x124>)
    b09a:	2100      	movs	r1, #0
    b09c:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    b09e:	461c      	mov	r4, r3
    b0a0:	480c      	ldr	r0, [pc, #48]	; (b0d4 <z_time_slice+0x120>)
    b0a2:	f7ff f82f 	bl	a104 <z_spin_unlock_valid>
    b0a6:	b120      	cbz	r0, b0b2 <z_time_slice+0xfe>
    b0a8:	f384 8811 	msr	BASEPRI, r4
    b0ac:	f3bf 8f6f 	isb	sy
}
    b0b0:	bd70      	pop	{r4, r5, r6, pc}
    b0b2:	4d0e      	ldr	r5, [pc, #56]	; (b0ec <z_time_slice+0x138>)
    b0b4:	23b9      	movs	r3, #185	; 0xb9
    b0b6:	462a      	mov	r2, r5
    b0b8:	4910      	ldr	r1, [pc, #64]	; (b0fc <z_time_slice+0x148>)
    b0ba:	480e      	ldr	r0, [pc, #56]	; (b0f4 <z_time_slice+0x140>)
    b0bc:	f003 fa77 	bl	e5ae <assert_print>
    b0c0:	4904      	ldr	r1, [pc, #16]	; (b0d4 <z_time_slice+0x120>)
    b0c2:	480f      	ldr	r0, [pc, #60]	; (b100 <z_time_slice+0x14c>)
    b0c4:	f003 fa73 	bl	e5ae <assert_print>
    b0c8:	21b9      	movs	r1, #185	; 0xb9
    b0ca:	4628      	mov	r0, r5
    b0cc:	f003 fa68 	bl	e5a0 <assert_post_action>
    b0d0:	e7ea      	b.n	b0a8 <z_time_slice+0xf4>
    b0d2:	bf00      	nop
    b0d4:	20005360 	.word	0x20005360
    b0d8:	20005324 	.word	0x20005324
    b0dc:	2000535c 	.word	0x2000535c
    b0e0:	20005368 	.word	0x20005368
    b0e4:	20005364 	.word	0x20005364
    b0e8:	20004618 	.word	0x20004618
    b0ec:	00010290 	.word	0x00010290
    b0f0:	000102f0 	.word	0x000102f0
    b0f4:	000100e4 	.word	0x000100e4
    b0f8:	00010308 	.word	0x00010308
    b0fc:	000102c0 	.word	0x000102c0
    b100:	000102d8 	.word	0x000102d8

0000b104 <ready_thread>:
{
    b104:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    b106:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    b108:	f990 200d 	ldrsb.w	r2, [r0, #13]
    b10c:	2a00      	cmp	r2, #0
    b10e:	db30      	blt.n	b172 <ready_thread+0x6e>
    b110:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b112:	f013 0f1f 	tst.w	r3, #31
    b116:	d105      	bne.n	b124 <ready_thread+0x20>
	return node->next != NULL;
    b118:	6982      	ldr	r2, [r0, #24]
    b11a:	b10a      	cbz	r2, b120 <ready_thread+0x1c>
    b11c:	2200      	movs	r2, #0
    b11e:	e002      	b.n	b126 <ready_thread+0x22>
    b120:	2201      	movs	r2, #1
    b122:	e000      	b.n	b126 <ready_thread+0x22>
    b124:	2200      	movs	r2, #0
    b126:	b322      	cbz	r2, b172 <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    b128:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b12c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b12e:	4b1b      	ldr	r3, [pc, #108]	; (b19c <ready_thread+0x98>)
    b130:	429c      	cmp	r4, r3
    b132:	d01f      	beq.n	b174 <ready_thread+0x70>
	return list->head == list;
    b134:	4b1a      	ldr	r3, [pc, #104]	; (b1a0 <ready_thread+0x9c>)
    b136:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b13a:	429d      	cmp	r5, r3
    b13c:	d02c      	beq.n	b198 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b13e:	b16d      	cbz	r5, b15c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b140:	4629      	mov	r1, r5
    b142:	4620      	mov	r0, r4
    b144:	f004 f8d8 	bl	f2f8 <z_sched_prio_cmp>
    b148:	2800      	cmp	r0, #0
    b14a:	dc1f      	bgt.n	b18c <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b14c:	b135      	cbz	r5, b15c <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    b14e:	4b14      	ldr	r3, [pc, #80]	; (b1a0 <ready_thread+0x9c>)
    b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b152:	429d      	cmp	r5, r3
    b154:	d002      	beq.n	b15c <ready_thread+0x58>
    b156:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b158:	2d00      	cmp	r5, #0
    b15a:	d1f0      	bne.n	b13e <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    b15c:	4b10      	ldr	r3, [pc, #64]	; (b1a0 <ready_thread+0x9c>)
    b15e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    b160:	f103 0120 	add.w	r1, r3, #32
    b164:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    b166:	6062      	str	r2, [r4, #4]
	tail->next = node;
    b168:	6014      	str	r4, [r2, #0]
	list->tail = node;
    b16a:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    b16c:	2000      	movs	r0, #0
    b16e:	f7ff fe6f 	bl	ae50 <update_cache>
}
    b172:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b174:	4d0b      	ldr	r5, [pc, #44]	; (b1a4 <ready_thread+0xa0>)
    b176:	23ba      	movs	r3, #186	; 0xba
    b178:	462a      	mov	r2, r5
    b17a:	490b      	ldr	r1, [pc, #44]	; (b1a8 <ready_thread+0xa4>)
    b17c:	480b      	ldr	r0, [pc, #44]	; (b1ac <ready_thread+0xa8>)
    b17e:	f003 fa16 	bl	e5ae <assert_print>
    b182:	21ba      	movs	r1, #186	; 0xba
    b184:	4628      	mov	r0, r5
    b186:	f003 fa0b 	bl	e5a0 <assert_post_action>
    b18a:	e7d3      	b.n	b134 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    b18c:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    b18e:	6063      	str	r3, [r4, #4]
	node->next = successor;
    b190:	6025      	str	r5, [r4, #0]
	prev->next = node;
    b192:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b194:	606c      	str	r4, [r5, #4]
}
    b196:	e7e9      	b.n	b16c <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b198:	2500      	movs	r5, #0
    b19a:	e7d0      	b.n	b13e <ready_thread+0x3a>
    b19c:	20004618 	.word	0x20004618
    b1a0:	20005324 	.word	0x20005324
    b1a4:	00011b78 	.word	0x00011b78
    b1a8:	00011bb4 	.word	0x00011bb4
    b1ac:	000100e4 	.word	0x000100e4

0000b1b0 <z_ready_thread>:
{
    b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b1b2:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    b1b4:	2400      	movs	r4, #0
	__asm__ volatile(
    b1b6:	f04f 0320 	mov.w	r3, #32
    b1ba:	f3ef 8611 	mrs	r6, BASEPRI
    b1be:	f383 8812 	msr	BASEPRI_MAX, r3
    b1c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b1c6:	481e      	ldr	r0, [pc, #120]	; (b240 <z_ready_thread+0x90>)
    b1c8:	f7fe ff8c 	bl	a0e4 <z_spin_lock_valid>
    b1cc:	b118      	cbz	r0, b1d6 <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    b1ce:	481c      	ldr	r0, [pc, #112]	; (b240 <z_ready_thread+0x90>)
    b1d0:	f7fe ffa8 	bl	a124 <z_spin_lock_set_owner>
	return k;
    b1d4:	e018      	b.n	b208 <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b1d6:	4f1b      	ldr	r7, [pc, #108]	; (b244 <z_ready_thread+0x94>)
    b1d8:	238e      	movs	r3, #142	; 0x8e
    b1da:	463a      	mov	r2, r7
    b1dc:	491a      	ldr	r1, [pc, #104]	; (b248 <z_ready_thread+0x98>)
    b1de:	481b      	ldr	r0, [pc, #108]	; (b24c <z_ready_thread+0x9c>)
    b1e0:	f003 f9e5 	bl	e5ae <assert_print>
    b1e4:	4916      	ldr	r1, [pc, #88]	; (b240 <z_ready_thread+0x90>)
    b1e6:	481a      	ldr	r0, [pc, #104]	; (b250 <z_ready_thread+0xa0>)
    b1e8:	f003 f9e1 	bl	e5ae <assert_print>
    b1ec:	218e      	movs	r1, #142	; 0x8e
    b1ee:	4638      	mov	r0, r7
    b1f0:	f003 f9d6 	bl	e5a0 <assert_post_action>
    b1f4:	e7eb      	b.n	b1ce <z_ready_thread+0x1e>
			ready_thread(thread);
    b1f6:	4628      	mov	r0, r5
    b1f8:	f7ff ff84 	bl	b104 <ready_thread>
    b1fc:	e00a      	b.n	b214 <z_ready_thread+0x64>
	__asm__ volatile(
    b1fe:	f386 8811 	msr	BASEPRI, r6
    b202:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b206:	2401      	movs	r4, #1
    b208:	b9cc      	cbnz	r4, b23e <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    b20a:	4628      	mov	r0, r5
    b20c:	f004 f872 	bl	f2f4 <thread_active_elsewhere>
    b210:	2800      	cmp	r0, #0
    b212:	d0f0      	beq.n	b1f6 <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b214:	480a      	ldr	r0, [pc, #40]	; (b240 <z_ready_thread+0x90>)
    b216:	f7fe ff75 	bl	a104 <z_spin_unlock_valid>
    b21a:	2800      	cmp	r0, #0
    b21c:	d1ef      	bne.n	b1fe <z_ready_thread+0x4e>
    b21e:	4c09      	ldr	r4, [pc, #36]	; (b244 <z_ready_thread+0x94>)
    b220:	23b9      	movs	r3, #185	; 0xb9
    b222:	4622      	mov	r2, r4
    b224:	490b      	ldr	r1, [pc, #44]	; (b254 <z_ready_thread+0xa4>)
    b226:	4809      	ldr	r0, [pc, #36]	; (b24c <z_ready_thread+0x9c>)
    b228:	f003 f9c1 	bl	e5ae <assert_print>
    b22c:	4904      	ldr	r1, [pc, #16]	; (b240 <z_ready_thread+0x90>)
    b22e:	480a      	ldr	r0, [pc, #40]	; (b258 <z_ready_thread+0xa8>)
    b230:	f003 f9bd 	bl	e5ae <assert_print>
    b234:	21b9      	movs	r1, #185	; 0xb9
    b236:	4620      	mov	r0, r4
    b238:	f003 f9b2 	bl	e5a0 <assert_post_action>
    b23c:	e7df      	b.n	b1fe <z_ready_thread+0x4e>
}
    b23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b240:	20005360 	.word	0x20005360
    b244:	00010290 	.word	0x00010290
    b248:	000102f0 	.word	0x000102f0
    b24c:	000100e4 	.word	0x000100e4
    b250:	00010308 	.word	0x00010308
    b254:	000102c0 	.word	0x000102c0
    b258:	000102d8 	.word	0x000102d8

0000b25c <z_sched_start>:
{
    b25c:	b570      	push	{r4, r5, r6, lr}
    b25e:	4604      	mov	r4, r0
	__asm__ volatile(
    b260:	f04f 0320 	mov.w	r3, #32
    b264:	f3ef 8511 	mrs	r5, BASEPRI
    b268:	f383 8812 	msr	BASEPRI_MAX, r3
    b26c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b270:	481f      	ldr	r0, [pc, #124]	; (b2f0 <z_sched_start+0x94>)
    b272:	f7fe ff37 	bl	a0e4 <z_spin_lock_valid>
    b276:	b188      	cbz	r0, b29c <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    b278:	481d      	ldr	r0, [pc, #116]	; (b2f0 <z_sched_start+0x94>)
    b27a:	f7fe ff53 	bl	a124 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    b27e:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    b280:	f013 0f04 	tst.w	r3, #4
    b284:	d01a      	beq.n	b2bc <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b286:	f023 0304 	bic.w	r3, r3, #4
    b28a:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    b28c:	4620      	mov	r0, r4
    b28e:	f7ff ff39 	bl	b104 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    b292:	4629      	mov	r1, r5
    b294:	4816      	ldr	r0, [pc, #88]	; (b2f0 <z_sched_start+0x94>)
    b296:	f7ff fce7 	bl	ac68 <z_reschedule>
}
    b29a:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b29c:	4e15      	ldr	r6, [pc, #84]	; (b2f4 <z_sched_start+0x98>)
    b29e:	238e      	movs	r3, #142	; 0x8e
    b2a0:	4632      	mov	r2, r6
    b2a2:	4915      	ldr	r1, [pc, #84]	; (b2f8 <z_sched_start+0x9c>)
    b2a4:	4815      	ldr	r0, [pc, #84]	; (b2fc <z_sched_start+0xa0>)
    b2a6:	f003 f982 	bl	e5ae <assert_print>
    b2aa:	4911      	ldr	r1, [pc, #68]	; (b2f0 <z_sched_start+0x94>)
    b2ac:	4814      	ldr	r0, [pc, #80]	; (b300 <z_sched_start+0xa4>)
    b2ae:	f003 f97e 	bl	e5ae <assert_print>
    b2b2:	218e      	movs	r1, #142	; 0x8e
    b2b4:	4630      	mov	r0, r6
    b2b6:	f003 f973 	bl	e5a0 <assert_post_action>
    b2ba:	e7dd      	b.n	b278 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b2bc:	480c      	ldr	r0, [pc, #48]	; (b2f0 <z_sched_start+0x94>)
    b2be:	f7fe ff21 	bl	a104 <z_spin_unlock_valid>
    b2c2:	b120      	cbz	r0, b2ce <z_sched_start+0x72>
	__asm__ volatile(
    b2c4:	f385 8811 	msr	BASEPRI, r5
    b2c8:	f3bf 8f6f 	isb	sy
		return;
    b2cc:	e7e5      	b.n	b29a <z_sched_start+0x3e>
    b2ce:	4c09      	ldr	r4, [pc, #36]	; (b2f4 <z_sched_start+0x98>)
    b2d0:	23b9      	movs	r3, #185	; 0xb9
    b2d2:	4622      	mov	r2, r4
    b2d4:	490b      	ldr	r1, [pc, #44]	; (b304 <z_sched_start+0xa8>)
    b2d6:	4809      	ldr	r0, [pc, #36]	; (b2fc <z_sched_start+0xa0>)
    b2d8:	f003 f969 	bl	e5ae <assert_print>
    b2dc:	4904      	ldr	r1, [pc, #16]	; (b2f0 <z_sched_start+0x94>)
    b2de:	480a      	ldr	r0, [pc, #40]	; (b308 <z_sched_start+0xac>)
    b2e0:	f003 f965 	bl	e5ae <assert_print>
    b2e4:	21b9      	movs	r1, #185	; 0xb9
    b2e6:	4620      	mov	r0, r4
    b2e8:	f003 f95a 	bl	e5a0 <assert_post_action>
    b2ec:	e7ea      	b.n	b2c4 <z_sched_start+0x68>
    b2ee:	bf00      	nop
    b2f0:	20005360 	.word	0x20005360
    b2f4:	00010290 	.word	0x00010290
    b2f8:	000102f0 	.word	0x000102f0
    b2fc:	000100e4 	.word	0x000100e4
    b300:	00010308 	.word	0x00010308
    b304:	000102c0 	.word	0x000102c0
    b308:	000102d8 	.word	0x000102d8

0000b30c <z_thread_timeout>:
{
    b30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b310:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    b312:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    b316:	2500      	movs	r5, #0
	__asm__ volatile(
    b318:	f04f 0320 	mov.w	r3, #32
    b31c:	f3ef 8711 	mrs	r7, BASEPRI
    b320:	f383 8812 	msr	BASEPRI_MAX, r3
    b324:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b328:	482b      	ldr	r0, [pc, #172]	; (b3d8 <z_thread_timeout+0xcc>)
    b32a:	f7fe fedb 	bl	a0e4 <z_spin_lock_valid>
    b32e:	b118      	cbz	r0, b338 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    b330:	4829      	ldr	r0, [pc, #164]	; (b3d8 <z_thread_timeout+0xcc>)
    b332:	f7fe fef7 	bl	a124 <z_spin_lock_set_owner>
	return k;
    b336:	e026      	b.n	b386 <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b338:	f8df 80a0 	ldr.w	r8, [pc, #160]	; b3dc <z_thread_timeout+0xd0>
    b33c:	238e      	movs	r3, #142	; 0x8e
    b33e:	4642      	mov	r2, r8
    b340:	4927      	ldr	r1, [pc, #156]	; (b3e0 <z_thread_timeout+0xd4>)
    b342:	4828      	ldr	r0, [pc, #160]	; (b3e4 <z_thread_timeout+0xd8>)
    b344:	f003 f933 	bl	e5ae <assert_print>
    b348:	4923      	ldr	r1, [pc, #140]	; (b3d8 <z_thread_timeout+0xcc>)
    b34a:	4827      	ldr	r0, [pc, #156]	; (b3e8 <z_thread_timeout+0xdc>)
    b34c:	f003 f92f 	bl	e5ae <assert_print>
    b350:	218e      	movs	r1, #142	; 0x8e
    b352:	4640      	mov	r0, r8
    b354:	f003 f924 	bl	e5a0 <assert_post_action>
    b358:	e7ea      	b.n	b330 <z_thread_timeout+0x24>
    b35a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    b35e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    b362:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    b366:	f023 0310 	bic.w	r3, r3, #16
    b36a:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    b36e:	4630      	mov	r0, r6
    b370:	f7ff fec8 	bl	b104 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b374:	4818      	ldr	r0, [pc, #96]	; (b3d8 <z_thread_timeout+0xcc>)
    b376:	f7fe fec5 	bl	a104 <z_spin_unlock_valid>
    b37a:	b1d8      	cbz	r0, b3b4 <z_thread_timeout+0xa8>
	__asm__ volatile(
    b37c:	f387 8811 	msr	BASEPRI, r7
    b380:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b384:	2501      	movs	r5, #1
    b386:	bb2d      	cbnz	r5, b3d4 <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    b388:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    b38c:	f013 0f28 	tst.w	r3, #40	; 0x28
    b390:	d1f0      	bne.n	b374 <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    b392:	f854 3c10 	ldr.w	r3, [r4, #-16]
    b396:	2b00      	cmp	r3, #0
    b398:	d0df      	beq.n	b35a <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    b39a:	4630      	mov	r0, r6
    b39c:	f7ff fbb0 	bl	ab00 <pended_on_thread>
    b3a0:	4631      	mov	r1, r6
    b3a2:	f7ff fd31 	bl	ae08 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    b3a6:	7b73      	ldrb	r3, [r6, #13]
    b3a8:	f023 0302 	bic.w	r3, r3, #2
    b3ac:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    b3ae:	2300      	movs	r3, #0
    b3b0:	60b3      	str	r3, [r6, #8]
}
    b3b2:	e7d2      	b.n	b35a <z_thread_timeout+0x4e>
    b3b4:	4d09      	ldr	r5, [pc, #36]	; (b3dc <z_thread_timeout+0xd0>)
    b3b6:	23b9      	movs	r3, #185	; 0xb9
    b3b8:	462a      	mov	r2, r5
    b3ba:	490c      	ldr	r1, [pc, #48]	; (b3ec <z_thread_timeout+0xe0>)
    b3bc:	4809      	ldr	r0, [pc, #36]	; (b3e4 <z_thread_timeout+0xd8>)
    b3be:	f003 f8f6 	bl	e5ae <assert_print>
    b3c2:	4905      	ldr	r1, [pc, #20]	; (b3d8 <z_thread_timeout+0xcc>)
    b3c4:	480a      	ldr	r0, [pc, #40]	; (b3f0 <z_thread_timeout+0xe4>)
    b3c6:	f003 f8f2 	bl	e5ae <assert_print>
    b3ca:	21b9      	movs	r1, #185	; 0xb9
    b3cc:	4628      	mov	r0, r5
    b3ce:	f003 f8e7 	bl	e5a0 <assert_post_action>
    b3d2:	e7d3      	b.n	b37c <z_thread_timeout+0x70>
}
    b3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b3d8:	20005360 	.word	0x20005360
    b3dc:	00010290 	.word	0x00010290
    b3e0:	000102f0 	.word	0x000102f0
    b3e4:	000100e4 	.word	0x000100e4
    b3e8:	00010308 	.word	0x00010308
    b3ec:	000102c0 	.word	0x000102c0
    b3f0:	000102d8 	.word	0x000102d8

0000b3f4 <unready_thread>:
{
    b3f4:	b510      	push	{r4, lr}
    b3f6:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    b3f8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    b3fa:	f990 300d 	ldrsb.w	r3, [r0, #13]
    b3fe:	2b00      	cmp	r3, #0
    b400:	db08      	blt.n	b414 <unready_thread+0x20>
	update_cache(thread == _current);
    b402:	4b08      	ldr	r3, [pc, #32]	; (b424 <unready_thread+0x30>)
    b404:	6898      	ldr	r0, [r3, #8]
    b406:	42a0      	cmp	r0, r4
    b408:	bf14      	ite	ne
    b40a:	2000      	movne	r0, #0
    b40c:	2001      	moveq	r0, #1
    b40e:	f7ff fd1f 	bl	ae50 <update_cache>
}
    b412:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b414:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b418:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    b41a:	4601      	mov	r1, r0
    b41c:	4802      	ldr	r0, [pc, #8]	; (b428 <unready_thread+0x34>)
    b41e:	f7ff fcf3 	bl	ae08 <z_priq_dumb_remove>
}
    b422:	e7ee      	b.n	b402 <unready_thread+0xe>
    b424:	20005324 	.word	0x20005324
    b428:	20005344 	.word	0x20005344

0000b42c <add_to_waitq_locked>:
{
    b42c:	b570      	push	{r4, r5, r6, lr}
    b42e:	4605      	mov	r5, r0
    b430:	460e      	mov	r6, r1
	unready_thread(thread);
    b432:	f7ff ffdf 	bl	b3f4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    b436:	7b6b      	ldrb	r3, [r5, #13]
    b438:	f043 0302 	orr.w	r3, r3, #2
    b43c:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    b43e:	b1ce      	cbz	r6, b474 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    b440:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b442:	4b17      	ldr	r3, [pc, #92]	; (b4a0 <add_to_waitq_locked+0x74>)
    b444:	429d      	cmp	r5, r3
    b446:	d016      	beq.n	b476 <add_to_waitq_locked+0x4a>
	return list->head == list;
    b448:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b44a:	42a6      	cmp	r6, r4
    b44c:	d025      	beq.n	b49a <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b44e:	b164      	cbz	r4, b46a <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b450:	4621      	mov	r1, r4
    b452:	4628      	mov	r0, r5
    b454:	f003 ff50 	bl	f2f8 <z_sched_prio_cmp>
    b458:	2800      	cmp	r0, #0
    b45a:	dc18      	bgt.n	b48e <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b45c:	b12c      	cbz	r4, b46a <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    b45e:	6873      	ldr	r3, [r6, #4]
    b460:	429c      	cmp	r4, r3
    b462:	d002      	beq.n	b46a <add_to_waitq_locked+0x3e>
    b464:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b466:	2c00      	cmp	r4, #0
    b468:	d1f1      	bne.n	b44e <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    b46a:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    b46c:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    b46e:	606b      	str	r3, [r5, #4]
	tail->next = node;
    b470:	601d      	str	r5, [r3, #0]
	list->tail = node;
    b472:	6075      	str	r5, [r6, #4]
}
    b474:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b476:	4c0b      	ldr	r4, [pc, #44]	; (b4a4 <add_to_waitq_locked+0x78>)
    b478:	23ba      	movs	r3, #186	; 0xba
    b47a:	4622      	mov	r2, r4
    b47c:	490a      	ldr	r1, [pc, #40]	; (b4a8 <add_to_waitq_locked+0x7c>)
    b47e:	480b      	ldr	r0, [pc, #44]	; (b4ac <add_to_waitq_locked+0x80>)
    b480:	f003 f895 	bl	e5ae <assert_print>
    b484:	21ba      	movs	r1, #186	; 0xba
    b486:	4620      	mov	r0, r4
    b488:	f003 f88a 	bl	e5a0 <assert_post_action>
    b48c:	e7dc      	b.n	b448 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    b48e:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    b490:	606b      	str	r3, [r5, #4]
	node->next = successor;
    b492:	602c      	str	r4, [r5, #0]
	prev->next = node;
    b494:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    b496:	6065      	str	r5, [r4, #4]
}
    b498:	e7ec      	b.n	b474 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b49a:	2400      	movs	r4, #0
    b49c:	e7d7      	b.n	b44e <add_to_waitq_locked+0x22>
    b49e:	bf00      	nop
    b4a0:	20004618 	.word	0x20004618
    b4a4:	00011b78 	.word	0x00011b78
    b4a8:	00011bb4 	.word	0x00011bb4
    b4ac:	000100e4 	.word	0x000100e4

0000b4b0 <pend>:
{
    b4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b4b4:	4605      	mov	r5, r0
    b4b6:	460e      	mov	r6, r1
    b4b8:	4691      	mov	r9, r2
    b4ba:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    b4bc:	2400      	movs	r4, #0
	__asm__ volatile(
    b4be:	f04f 0320 	mov.w	r3, #32
    b4c2:	f3ef 8711 	mrs	r7, BASEPRI
    b4c6:	f383 8812 	msr	BASEPRI_MAX, r3
    b4ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b4ce:	481f      	ldr	r0, [pc, #124]	; (b54c <pend+0x9c>)
    b4d0:	f7fe fe08 	bl	a0e4 <z_spin_lock_valid>
    b4d4:	b118      	cbz	r0, b4de <pend+0x2e>
	z_spin_lock_set_owner(l);
    b4d6:	481d      	ldr	r0, [pc, #116]	; (b54c <pend+0x9c>)
    b4d8:	f7fe fe24 	bl	a124 <z_spin_lock_set_owner>
	return k;
    b4dc:	e015      	b.n	b50a <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b4de:	f8df a070 	ldr.w	sl, [pc, #112]	; b550 <pend+0xa0>
    b4e2:	238e      	movs	r3, #142	; 0x8e
    b4e4:	4652      	mov	r2, sl
    b4e6:	491b      	ldr	r1, [pc, #108]	; (b554 <pend+0xa4>)
    b4e8:	481b      	ldr	r0, [pc, #108]	; (b558 <pend+0xa8>)
    b4ea:	f003 f860 	bl	e5ae <assert_print>
    b4ee:	4917      	ldr	r1, [pc, #92]	; (b54c <pend+0x9c>)
    b4f0:	481a      	ldr	r0, [pc, #104]	; (b55c <pend+0xac>)
    b4f2:	f003 f85c 	bl	e5ae <assert_print>
    b4f6:	218e      	movs	r1, #142	; 0x8e
    b4f8:	4650      	mov	r0, sl
    b4fa:	f003 f851 	bl	e5a0 <assert_post_action>
    b4fe:	e7ea      	b.n	b4d6 <pend+0x26>
	__asm__ volatile(
    b500:	f387 8811 	msr	BASEPRI, r7
    b504:	f3bf 8f6f 	isb	sy
    b508:	2401      	movs	r4, #1
    b50a:	b9c4      	cbnz	r4, b53e <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    b50c:	4631      	mov	r1, r6
    b50e:	4628      	mov	r0, r5
    b510:	f7ff ff8c 	bl	b42c <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b514:	480d      	ldr	r0, [pc, #52]	; (b54c <pend+0x9c>)
    b516:	f7fe fdf5 	bl	a104 <z_spin_unlock_valid>
    b51a:	2800      	cmp	r0, #0
    b51c:	d1f0      	bne.n	b500 <pend+0x50>
    b51e:	4c0c      	ldr	r4, [pc, #48]	; (b550 <pend+0xa0>)
    b520:	23b9      	movs	r3, #185	; 0xb9
    b522:	4622      	mov	r2, r4
    b524:	490e      	ldr	r1, [pc, #56]	; (b560 <pend+0xb0>)
    b526:	480c      	ldr	r0, [pc, #48]	; (b558 <pend+0xa8>)
    b528:	f003 f841 	bl	e5ae <assert_print>
    b52c:	4907      	ldr	r1, [pc, #28]	; (b54c <pend+0x9c>)
    b52e:	480d      	ldr	r0, [pc, #52]	; (b564 <pend+0xb4>)
    b530:	f003 f83d 	bl	e5ae <assert_print>
    b534:	21b9      	movs	r1, #185	; 0xb9
    b536:	4620      	mov	r0, r4
    b538:	f003 f832 	bl	e5a0 <assert_post_action>
    b53c:	e7e0      	b.n	b500 <pend+0x50>
	add_thread_timeout(thread, timeout);
    b53e:	464a      	mov	r2, r9
    b540:	4643      	mov	r3, r8
    b542:	4628      	mov	r0, r5
    b544:	f7ff faf6 	bl	ab34 <add_thread_timeout>
}
    b548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b54c:	20005360 	.word	0x20005360
    b550:	00010290 	.word	0x00010290
    b554:	000102f0 	.word	0x000102f0
    b558:	000100e4 	.word	0x000100e4
    b55c:	00010308 	.word	0x00010308
    b560:	000102c0 	.word	0x000102c0
    b564:	000102d8 	.word	0x000102d8

0000b568 <z_pend_curr>:
{
    b568:	b570      	push	{r4, r5, r6, lr}
    b56a:	4604      	mov	r4, r0
    b56c:	460d      	mov	r5, r1
    b56e:	4611      	mov	r1, r2
	pending_current = _current;
    b570:	4b0f      	ldr	r3, [pc, #60]	; (b5b0 <z_pend_curr+0x48>)
    b572:	6898      	ldr	r0, [r3, #8]
    b574:	4b0f      	ldr	r3, [pc, #60]	; (b5b4 <z_pend_curr+0x4c>)
    b576:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    b578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    b57c:	f7ff ff98 	bl	b4b0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b580:	4620      	mov	r0, r4
    b582:	f7fe fdbf 	bl	a104 <z_spin_unlock_valid>
    b586:	b118      	cbz	r0, b590 <z_pend_curr+0x28>
    b588:	4628      	mov	r0, r5
    b58a:	f7fa fae1 	bl	5b50 <arch_swap>
}
    b58e:	bd70      	pop	{r4, r5, r6, pc}
    b590:	4e09      	ldr	r6, [pc, #36]	; (b5b8 <z_pend_curr+0x50>)
    b592:	23d0      	movs	r3, #208	; 0xd0
    b594:	4632      	mov	r2, r6
    b596:	4909      	ldr	r1, [pc, #36]	; (b5bc <z_pend_curr+0x54>)
    b598:	4809      	ldr	r0, [pc, #36]	; (b5c0 <z_pend_curr+0x58>)
    b59a:	f003 f808 	bl	e5ae <assert_print>
    b59e:	4621      	mov	r1, r4
    b5a0:	4808      	ldr	r0, [pc, #32]	; (b5c4 <z_pend_curr+0x5c>)
    b5a2:	f003 f804 	bl	e5ae <assert_print>
    b5a6:	21d0      	movs	r1, #208	; 0xd0
    b5a8:	4630      	mov	r0, r6
    b5aa:	f002 fff9 	bl	e5a0 <assert_post_action>
    b5ae:	e7eb      	b.n	b588 <z_pend_curr+0x20>
    b5b0:	20005324 	.word	0x20005324
    b5b4:	2000535c 	.word	0x2000535c
    b5b8:	00010290 	.word	0x00010290
    b5bc:	000102c0 	.word	0x000102c0
    b5c0:	000100e4 	.word	0x000100e4
    b5c4:	000102d8 	.word	0x000102d8

0000b5c8 <z_set_prio>:
{
    b5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5cc:	4604      	mov	r4, r0
    b5ce:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    b5d0:	2500      	movs	r5, #0
	__asm__ volatile(
    b5d2:	f04f 0320 	mov.w	r3, #32
    b5d6:	f3ef 8811 	mrs	r8, BASEPRI
    b5da:	f383 8812 	msr	BASEPRI_MAX, r3
    b5de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b5e2:	4844      	ldr	r0, [pc, #272]	; (b6f4 <z_set_prio+0x12c>)
    b5e4:	f7fe fd7e 	bl	a0e4 <z_spin_lock_valid>
    b5e8:	b120      	cbz	r0, b5f4 <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    b5ea:	4842      	ldr	r0, [pc, #264]	; (b6f4 <z_set_prio+0x12c>)
    b5ec:	f7fe fd9a 	bl	a124 <z_spin_lock_set_owner>
	bool need_sched = 0;
    b5f0:	2700      	movs	r7, #0
	return k;
    b5f2:	e01d      	b.n	b630 <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b5f4:	4f40      	ldr	r7, [pc, #256]	; (b6f8 <z_set_prio+0x130>)
    b5f6:	238e      	movs	r3, #142	; 0x8e
    b5f8:	463a      	mov	r2, r7
    b5fa:	4940      	ldr	r1, [pc, #256]	; (b6fc <z_set_prio+0x134>)
    b5fc:	4840      	ldr	r0, [pc, #256]	; (b700 <z_set_prio+0x138>)
    b5fe:	f002 ffd6 	bl	e5ae <assert_print>
    b602:	493c      	ldr	r1, [pc, #240]	; (b6f4 <z_set_prio+0x12c>)
    b604:	483f      	ldr	r0, [pc, #252]	; (b704 <z_set_prio+0x13c>)
    b606:	f002 ffd2 	bl	e5ae <assert_print>
    b60a:	218e      	movs	r1, #142	; 0x8e
    b60c:	4638      	mov	r0, r7
    b60e:	f002 ffc7 	bl	e5a0 <assert_post_action>
    b612:	e7ea      	b.n	b5ea <z_set_prio+0x22>
		if (need_sched) {
    b614:	f013 0701 	ands.w	r7, r3, #1
    b618:	d116      	bne.n	b648 <z_set_prio+0x80>
			thread->base.prio = prio;
    b61a:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b61c:	4835      	ldr	r0, [pc, #212]	; (b6f4 <z_set_prio+0x12c>)
    b61e:	f7fe fd71 	bl	a104 <z_spin_unlock_valid>
    b622:	2800      	cmp	r0, #0
    b624:	d053      	beq.n	b6ce <z_set_prio+0x106>
	__asm__ volatile(
    b626:	f388 8811 	msr	BASEPRI, r8
    b62a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b62e:	2501      	movs	r5, #1
    b630:	462b      	mov	r3, r5
    b632:	2d00      	cmp	r5, #0
    b634:	d15b      	bne.n	b6ee <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    b636:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b638:	f012 0f1f 	tst.w	r2, #31
    b63c:	d1ea      	bne.n	b614 <z_set_prio+0x4c>
	return node->next != NULL;
    b63e:	69a1      	ldr	r1, [r4, #24]
    b640:	2900      	cmp	r1, #0
    b642:	d1e7      	bne.n	b614 <z_set_prio+0x4c>
    b644:	2301      	movs	r3, #1
    b646:	e7e5      	b.n	b614 <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b648:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b64c:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    b64e:	4621      	mov	r1, r4
    b650:	482d      	ldr	r0, [pc, #180]	; (b708 <z_set_prio+0x140>)
    b652:	f7ff fbd9 	bl	ae08 <z_priq_dumb_remove>
				thread->base.prio = prio;
    b656:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    b658:	7b63      	ldrb	r3, [r4, #13]
    b65a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b65e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b660:	4b2a      	ldr	r3, [pc, #168]	; (b70c <z_set_prio+0x144>)
    b662:	429c      	cmp	r4, r3
    b664:	d01f      	beq.n	b6a6 <z_set_prio+0xde>
	return list->head == list;
    b666:	4b2a      	ldr	r3, [pc, #168]	; (b710 <z_set_prio+0x148>)
    b668:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b66c:	429d      	cmp	r5, r3
    b66e:	d02c      	beq.n	b6ca <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b670:	b16d      	cbz	r5, b68e <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b672:	4629      	mov	r1, r5
    b674:	4620      	mov	r0, r4
    b676:	f003 fe3f 	bl	f2f8 <z_sched_prio_cmp>
    b67a:	2800      	cmp	r0, #0
    b67c:	dc1f      	bgt.n	b6be <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b67e:	b135      	cbz	r5, b68e <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    b680:	4b23      	ldr	r3, [pc, #140]	; (b710 <z_set_prio+0x148>)
    b682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b684:	429d      	cmp	r5, r3
    b686:	d002      	beq.n	b68e <z_set_prio+0xc6>
    b688:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b68a:	2d00      	cmp	r5, #0
    b68c:	d1f0      	bne.n	b670 <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    b68e:	4b20      	ldr	r3, [pc, #128]	; (b710 <z_set_prio+0x148>)
    b690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    b692:	f103 0120 	add.w	r1, r3, #32
    b696:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    b698:	6062      	str	r2, [r4, #4]
	tail->next = node;
    b69a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    b69c:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    b69e:	2001      	movs	r0, #1
    b6a0:	f7ff fbd6 	bl	ae50 <update_cache>
    b6a4:	e7ba      	b.n	b61c <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b6a6:	4d1b      	ldr	r5, [pc, #108]	; (b714 <z_set_prio+0x14c>)
    b6a8:	23ba      	movs	r3, #186	; 0xba
    b6aa:	462a      	mov	r2, r5
    b6ac:	491a      	ldr	r1, [pc, #104]	; (b718 <z_set_prio+0x150>)
    b6ae:	4814      	ldr	r0, [pc, #80]	; (b700 <z_set_prio+0x138>)
    b6b0:	f002 ff7d 	bl	e5ae <assert_print>
    b6b4:	21ba      	movs	r1, #186	; 0xba
    b6b6:	4628      	mov	r0, r5
    b6b8:	f002 ff72 	bl	e5a0 <assert_post_action>
    b6bc:	e7d3      	b.n	b666 <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    b6be:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    b6c0:	6063      	str	r3, [r4, #4]
	node->next = successor;
    b6c2:	6025      	str	r5, [r4, #0]
	prev->next = node;
    b6c4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b6c6:	606c      	str	r4, [r5, #4]
}
    b6c8:	e7e9      	b.n	b69e <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b6ca:	2500      	movs	r5, #0
    b6cc:	e7d0      	b.n	b670 <z_set_prio+0xa8>
    b6ce:	4d0a      	ldr	r5, [pc, #40]	; (b6f8 <z_set_prio+0x130>)
    b6d0:	23b9      	movs	r3, #185	; 0xb9
    b6d2:	462a      	mov	r2, r5
    b6d4:	4911      	ldr	r1, [pc, #68]	; (b71c <z_set_prio+0x154>)
    b6d6:	480a      	ldr	r0, [pc, #40]	; (b700 <z_set_prio+0x138>)
    b6d8:	f002 ff69 	bl	e5ae <assert_print>
    b6dc:	4905      	ldr	r1, [pc, #20]	; (b6f4 <z_set_prio+0x12c>)
    b6de:	4810      	ldr	r0, [pc, #64]	; (b720 <z_set_prio+0x158>)
    b6e0:	f002 ff65 	bl	e5ae <assert_print>
    b6e4:	21b9      	movs	r1, #185	; 0xb9
    b6e6:	4628      	mov	r0, r5
    b6e8:	f002 ff5a 	bl	e5a0 <assert_post_action>
    b6ec:	e79b      	b.n	b626 <z_set_prio+0x5e>
}
    b6ee:	4638      	mov	r0, r7
    b6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b6f4:	20005360 	.word	0x20005360
    b6f8:	00010290 	.word	0x00010290
    b6fc:	000102f0 	.word	0x000102f0
    b700:	000100e4 	.word	0x000100e4
    b704:	00010308 	.word	0x00010308
    b708:	20005344 	.word	0x20005344
    b70c:	20004618 	.word	0x20004618
    b710:	20005324 	.word	0x20005324
    b714:	00011b78 	.word	0x00011b78
    b718:	00011bb4 	.word	0x00011bb4
    b71c:	000102c0 	.word	0x000102c0
    b720:	000102d8 	.word	0x000102d8

0000b724 <z_impl_k_thread_suspend>:
{
    b724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b726:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    b728:	3018      	adds	r0, #24
    b72a:	f000 fd6f 	bl	c20c <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    b72e:	2500      	movs	r5, #0
	__asm__ volatile(
    b730:	f04f 0320 	mov.w	r3, #32
    b734:	f3ef 8611 	mrs	r6, BASEPRI
    b738:	f383 8812 	msr	BASEPRI_MAX, r3
    b73c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b740:	482d      	ldr	r0, [pc, #180]	; (b7f8 <z_impl_k_thread_suspend+0xd4>)
    b742:	f7fe fccf 	bl	a0e4 <z_spin_lock_valid>
    b746:	b118      	cbz	r0, b750 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    b748:	482b      	ldr	r0, [pc, #172]	; (b7f8 <z_impl_k_thread_suspend+0xd4>)
    b74a:	f7fe fceb 	bl	a124 <z_spin_lock_set_owner>
	return k;
    b74e:	e01c      	b.n	b78a <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b750:	4f2a      	ldr	r7, [pc, #168]	; (b7fc <z_impl_k_thread_suspend+0xd8>)
    b752:	238e      	movs	r3, #142	; 0x8e
    b754:	463a      	mov	r2, r7
    b756:	492a      	ldr	r1, [pc, #168]	; (b800 <z_impl_k_thread_suspend+0xdc>)
    b758:	482a      	ldr	r0, [pc, #168]	; (b804 <z_impl_k_thread_suspend+0xe0>)
    b75a:	f002 ff28 	bl	e5ae <assert_print>
    b75e:	4926      	ldr	r1, [pc, #152]	; (b7f8 <z_impl_k_thread_suspend+0xd4>)
    b760:	4829      	ldr	r0, [pc, #164]	; (b808 <z_impl_k_thread_suspend+0xe4>)
    b762:	f002 ff24 	bl	e5ae <assert_print>
    b766:	218e      	movs	r1, #142	; 0x8e
    b768:	4638      	mov	r0, r7
    b76a:	f002 ff19 	bl	e5a0 <assert_post_action>
    b76e:	e7eb      	b.n	b748 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b770:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b774:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    b776:	4621      	mov	r1, r4
    b778:	4824      	ldr	r0, [pc, #144]	; (b80c <z_impl_k_thread_suspend+0xe8>)
    b77a:	f7ff fb45 	bl	ae08 <z_priq_dumb_remove>
}
    b77e:	e00a      	b.n	b796 <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    b780:	f386 8811 	msr	BASEPRI, r6
    b784:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b788:	2501      	movs	r5, #1
    b78a:	bb2d      	cbnz	r5, b7d8 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    b78c:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    b78e:	f994 300d 	ldrsb.w	r3, [r4, #13]
    b792:	2b00      	cmp	r3, #0
    b794:	dbec      	blt.n	b770 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    b796:	7b63      	ldrb	r3, [r4, #13]
    b798:	f043 0310 	orr.w	r3, r3, #16
    b79c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    b79e:	4b1c      	ldr	r3, [pc, #112]	; (b810 <z_impl_k_thread_suspend+0xec>)
    b7a0:	6898      	ldr	r0, [r3, #8]
    b7a2:	42a0      	cmp	r0, r4
    b7a4:	bf14      	ite	ne
    b7a6:	2000      	movne	r0, #0
    b7a8:	2001      	moveq	r0, #1
    b7aa:	f7ff fb51 	bl	ae50 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b7ae:	4812      	ldr	r0, [pc, #72]	; (b7f8 <z_impl_k_thread_suspend+0xd4>)
    b7b0:	f7fe fca8 	bl	a104 <z_spin_unlock_valid>
    b7b4:	2800      	cmp	r0, #0
    b7b6:	d1e3      	bne.n	b780 <z_impl_k_thread_suspend+0x5c>
    b7b8:	4d10      	ldr	r5, [pc, #64]	; (b7fc <z_impl_k_thread_suspend+0xd8>)
    b7ba:	23b9      	movs	r3, #185	; 0xb9
    b7bc:	462a      	mov	r2, r5
    b7be:	4915      	ldr	r1, [pc, #84]	; (b814 <z_impl_k_thread_suspend+0xf0>)
    b7c0:	4810      	ldr	r0, [pc, #64]	; (b804 <z_impl_k_thread_suspend+0xe0>)
    b7c2:	f002 fef4 	bl	e5ae <assert_print>
    b7c6:	490c      	ldr	r1, [pc, #48]	; (b7f8 <z_impl_k_thread_suspend+0xd4>)
    b7c8:	4813      	ldr	r0, [pc, #76]	; (b818 <z_impl_k_thread_suspend+0xf4>)
    b7ca:	f002 fef0 	bl	e5ae <assert_print>
    b7ce:	21b9      	movs	r1, #185	; 0xb9
    b7d0:	4628      	mov	r0, r5
    b7d2:	f002 fee5 	bl	e5a0 <assert_post_action>
    b7d6:	e7d3      	b.n	b780 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    b7d8:	4b0d      	ldr	r3, [pc, #52]	; (b810 <z_impl_k_thread_suspend+0xec>)
    b7da:	689b      	ldr	r3, [r3, #8]
    b7dc:	42a3      	cmp	r3, r4
    b7de:	d000      	beq.n	b7e2 <z_impl_k_thread_suspend+0xbe>
}
    b7e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    b7e2:	f04f 0320 	mov.w	r3, #32
    b7e6:	f3ef 8011 	mrs	r0, BASEPRI
    b7ea:	f383 8812 	msr	BASEPRI_MAX, r3
    b7ee:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    b7f2:	f003 fd8b 	bl	f30c <z_reschedule_irqlock>
    b7f6:	e7f3      	b.n	b7e0 <z_impl_k_thread_suspend+0xbc>
    b7f8:	20005360 	.word	0x20005360
    b7fc:	00010290 	.word	0x00010290
    b800:	000102f0 	.word	0x000102f0
    b804:	000100e4 	.word	0x000100e4
    b808:	00010308 	.word	0x00010308
    b80c:	20005344 	.word	0x20005344
    b810:	20005324 	.word	0x20005324
    b814:	000102c0 	.word	0x000102c0
    b818:	000102d8 	.word	0x000102d8

0000b81c <k_sched_unlock>:
{
    b81c:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    b81e:	2400      	movs	r4, #0
    b820:	f04f 0320 	mov.w	r3, #32
    b824:	f3ef 8511 	mrs	r5, BASEPRI
    b828:	f383 8812 	msr	BASEPRI_MAX, r3
    b82c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b830:	4838      	ldr	r0, [pc, #224]	; (b914 <k_sched_unlock+0xf8>)
    b832:	f7fe fc57 	bl	a0e4 <z_spin_lock_valid>
    b836:	b118      	cbz	r0, b840 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    b838:	4836      	ldr	r0, [pc, #216]	; (b914 <k_sched_unlock+0xf8>)
    b83a:	f7fe fc73 	bl	a124 <z_spin_lock_set_owner>
	return k;
    b83e:	e036      	b.n	b8ae <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b840:	4e35      	ldr	r6, [pc, #212]	; (b918 <k_sched_unlock+0xfc>)
    b842:	238e      	movs	r3, #142	; 0x8e
    b844:	4632      	mov	r2, r6
    b846:	4935      	ldr	r1, [pc, #212]	; (b91c <k_sched_unlock+0x100>)
    b848:	4835      	ldr	r0, [pc, #212]	; (b920 <k_sched_unlock+0x104>)
    b84a:	f002 feb0 	bl	e5ae <assert_print>
    b84e:	4931      	ldr	r1, [pc, #196]	; (b914 <k_sched_unlock+0xf8>)
    b850:	4834      	ldr	r0, [pc, #208]	; (b924 <k_sched_unlock+0x108>)
    b852:	f002 feac 	bl	e5ae <assert_print>
    b856:	218e      	movs	r1, #142	; 0x8e
    b858:	4630      	mov	r0, r6
    b85a:	f002 fea1 	bl	e5a0 <assert_post_action>
    b85e:	e7eb      	b.n	b838 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    b860:	4c31      	ldr	r4, [pc, #196]	; (b928 <k_sched_unlock+0x10c>)
    b862:	f240 33bb 	movw	r3, #955	; 0x3bb
    b866:	4622      	mov	r2, r4
    b868:	4930      	ldr	r1, [pc, #192]	; (b92c <k_sched_unlock+0x110>)
    b86a:	482d      	ldr	r0, [pc, #180]	; (b920 <k_sched_unlock+0x104>)
    b86c:	f002 fe9f 	bl	e5ae <assert_print>
    b870:	482f      	ldr	r0, [pc, #188]	; (b930 <k_sched_unlock+0x114>)
    b872:	f002 fe9c 	bl	e5ae <assert_print>
    b876:	f240 31bb 	movw	r1, #955	; 0x3bb
    b87a:	4620      	mov	r0, r4
    b87c:	f002 fe90 	bl	e5a0 <assert_post_action>
    b880:	e01b      	b.n	b8ba <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    b882:	4c29      	ldr	r4, [pc, #164]	; (b928 <k_sched_unlock+0x10c>)
    b884:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    b888:	4622      	mov	r2, r4
    b88a:	492a      	ldr	r1, [pc, #168]	; (b934 <k_sched_unlock+0x118>)
    b88c:	4824      	ldr	r0, [pc, #144]	; (b920 <k_sched_unlock+0x104>)
    b88e:	f002 fe8e 	bl	e5ae <assert_print>
    b892:	4827      	ldr	r0, [pc, #156]	; (b930 <k_sched_unlock+0x114>)
    b894:	f002 fe8b 	bl	e5ae <assert_print>
    b898:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    b89c:	4620      	mov	r0, r4
    b89e:	f002 fe7f 	bl	e5a0 <assert_post_action>
    b8a2:	e00e      	b.n	b8c2 <k_sched_unlock+0xa6>
	__asm__ volatile(
    b8a4:	f385 8811 	msr	BASEPRI, r5
    b8a8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b8ac:	2401      	movs	r4, #1
    b8ae:	bb2c      	cbnz	r4, b8fc <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    b8b0:	4b21      	ldr	r3, [pc, #132]	; (b938 <k_sched_unlock+0x11c>)
    b8b2:	689b      	ldr	r3, [r3, #8]
    b8b4:	7bdb      	ldrb	r3, [r3, #15]
    b8b6:	2b00      	cmp	r3, #0
    b8b8:	d0d2      	beq.n	b860 <k_sched_unlock+0x44>
    b8ba:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    b8be:	2b00      	cmp	r3, #0
    b8c0:	d1df      	bne.n	b882 <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    b8c2:	4b1d      	ldr	r3, [pc, #116]	; (b938 <k_sched_unlock+0x11c>)
    b8c4:	689a      	ldr	r2, [r3, #8]
    b8c6:	7bd3      	ldrb	r3, [r2, #15]
    b8c8:	3301      	adds	r3, #1
    b8ca:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    b8cc:	2000      	movs	r0, #0
    b8ce:	f7ff fabf 	bl	ae50 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b8d2:	4810      	ldr	r0, [pc, #64]	; (b914 <k_sched_unlock+0xf8>)
    b8d4:	f7fe fc16 	bl	a104 <z_spin_unlock_valid>
    b8d8:	2800      	cmp	r0, #0
    b8da:	d1e3      	bne.n	b8a4 <k_sched_unlock+0x88>
    b8dc:	4c0e      	ldr	r4, [pc, #56]	; (b918 <k_sched_unlock+0xfc>)
    b8de:	23b9      	movs	r3, #185	; 0xb9
    b8e0:	4622      	mov	r2, r4
    b8e2:	4916      	ldr	r1, [pc, #88]	; (b93c <k_sched_unlock+0x120>)
    b8e4:	480e      	ldr	r0, [pc, #56]	; (b920 <k_sched_unlock+0x104>)
    b8e6:	f002 fe62 	bl	e5ae <assert_print>
    b8ea:	490a      	ldr	r1, [pc, #40]	; (b914 <k_sched_unlock+0xf8>)
    b8ec:	4814      	ldr	r0, [pc, #80]	; (b940 <k_sched_unlock+0x124>)
    b8ee:	f002 fe5e 	bl	e5ae <assert_print>
    b8f2:	21b9      	movs	r1, #185	; 0xb9
    b8f4:	4620      	mov	r0, r4
    b8f6:	f002 fe53 	bl	e5a0 <assert_post_action>
    b8fa:	e7d3      	b.n	b8a4 <k_sched_unlock+0x88>
	__asm__ volatile(
    b8fc:	f04f 0320 	mov.w	r3, #32
    b900:	f3ef 8011 	mrs	r0, BASEPRI
    b904:	f383 8812 	msr	BASEPRI_MAX, r3
    b908:	f3bf 8f6f 	isb	sy
    b90c:	f003 fcfe 	bl	f30c <z_reschedule_irqlock>
}
    b910:	bd70      	pop	{r4, r5, r6, pc}
    b912:	bf00      	nop
    b914:	20005360 	.word	0x20005360
    b918:	00010290 	.word	0x00010290
    b91c:	000102f0 	.word	0x000102f0
    b920:	000100e4 	.word	0x000100e4
    b924:	00010308 	.word	0x00010308
    b928:	00011b78 	.word	0x00011b78
    b92c:	00011c00 	.word	0x00011c00
    b930:	00011ad0 	.word	0x00011ad0
    b934:	00011988 	.word	0x00011988
    b938:	20005324 	.word	0x20005324
    b93c:	000102c0 	.word	0x000102c0
    b940:	000102d8 	.word	0x000102d8

0000b944 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    b944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    b946:	7b43      	ldrb	r3, [r0, #13]
    b948:	f013 0f08 	tst.w	r3, #8
    b94c:	d145      	bne.n	b9da <end_thread+0x96>
    b94e:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    b950:	f043 0308 	orr.w	r3, r3, #8
    b954:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b956:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b95a:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    b95c:	f013 0f80 	tst.w	r3, #128	; 0x80
    b960:	d12d      	bne.n	b9be <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    b962:	68ab      	ldr	r3, [r5, #8]
    b964:	b15b      	cbz	r3, b97e <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    b966:	4628      	mov	r0, r5
    b968:	f7ff f8ca 	bl	ab00 <pended_on_thread>
    b96c:	4629      	mov	r1, r5
    b96e:	f7ff fa4b 	bl	ae08 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    b972:	7b6b      	ldrb	r3, [r5, #13]
    b974:	f023 0302 	bic.w	r3, r3, #2
    b978:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    b97a:	2300      	movs	r3, #0
    b97c:	60ab      	str	r3, [r5, #8]
    b97e:	f105 0018 	add.w	r0, r5, #24
    b982:	f000 fc43 	bl	c20c <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    b986:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    b98a:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b98c:	42bc      	cmp	r4, r7
    b98e:	d01e      	beq.n	b9ce <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    b990:	b1ec      	cbz	r4, b9ce <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    b992:	4620      	mov	r0, r4
    b994:	f7ff f8b4 	bl	ab00 <pended_on_thread>
    b998:	4621      	mov	r1, r4
    b99a:	f7ff fa35 	bl	ae08 <z_priq_dumb_remove>
    b99e:	7b63      	ldrb	r3, [r4, #13]
    b9a0:	f023 0302 	bic.w	r3, r3, #2
    b9a4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    b9a6:	2600      	movs	r6, #0
    b9a8:	60a6      	str	r6, [r4, #8]
    b9aa:	f104 0018 	add.w	r0, r4, #24
    b9ae:	f000 fc2d 	bl	c20c <z_abort_timeout>
    b9b2:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    b9b6:	4620      	mov	r0, r4
    b9b8:	f7ff fba4 	bl	b104 <ready_thread>
    b9bc:	e7e5      	b.n	b98a <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b9be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b9c2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    b9c4:	4601      	mov	r1, r0
    b9c6:	4805      	ldr	r0, [pc, #20]	; (b9dc <end_thread+0x98>)
    b9c8:	f7ff fa1e 	bl	ae08 <z_priq_dumb_remove>
}
    b9cc:	e7c9      	b.n	b962 <end_thread+0x1e>
		update_cache(1);
    b9ce:	2001      	movs	r0, #1
    b9d0:	f7ff fa3e 	bl	ae50 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    b9d4:	4628      	mov	r0, r5
    b9d6:	f7fe fbad 	bl	a134 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    b9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b9dc:	20005344 	.word	0x20005344

0000b9e0 <z_unpend_first_thread>:
{
    b9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b9e2:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    b9e4:	2500      	movs	r5, #0
    b9e6:	f04f 0320 	mov.w	r3, #32
    b9ea:	f3ef 8711 	mrs	r7, BASEPRI
    b9ee:	f383 8812 	msr	BASEPRI_MAX, r3
    b9f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b9f6:	4825      	ldr	r0, [pc, #148]	; (ba8c <z_unpend_first_thread+0xac>)
    b9f8:	f7fe fb74 	bl	a0e4 <z_spin_lock_valid>
    b9fc:	b120      	cbz	r0, ba08 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    b9fe:	4823      	ldr	r0, [pc, #140]	; (ba8c <z_unpend_first_thread+0xac>)
    ba00:	f7fe fb90 	bl	a124 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    ba04:	2400      	movs	r4, #0
	return k;
    ba06:	e018      	b.n	ba3a <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ba08:	4c21      	ldr	r4, [pc, #132]	; (ba90 <z_unpend_first_thread+0xb0>)
    ba0a:	238e      	movs	r3, #142	; 0x8e
    ba0c:	4622      	mov	r2, r4
    ba0e:	4921      	ldr	r1, [pc, #132]	; (ba94 <z_unpend_first_thread+0xb4>)
    ba10:	4821      	ldr	r0, [pc, #132]	; (ba98 <z_unpend_first_thread+0xb8>)
    ba12:	f002 fdcc 	bl	e5ae <assert_print>
    ba16:	491d      	ldr	r1, [pc, #116]	; (ba8c <z_unpend_first_thread+0xac>)
    ba18:	4820      	ldr	r0, [pc, #128]	; (ba9c <z_unpend_first_thread+0xbc>)
    ba1a:	f002 fdc8 	bl	e5ae <assert_print>
    ba1e:	218e      	movs	r1, #142	; 0x8e
    ba20:	4620      	mov	r0, r4
    ba22:	f002 fdbd 	bl	e5a0 <assert_post_action>
    ba26:	e7ea      	b.n	b9fe <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ba28:	4818      	ldr	r0, [pc, #96]	; (ba8c <z_unpend_first_thread+0xac>)
    ba2a:	f7fe fb6b 	bl	a104 <z_spin_unlock_valid>
    ba2e:	b1d8      	cbz	r0, ba68 <z_unpend_first_thread+0x88>
	__asm__ volatile(
    ba30:	f387 8811 	msr	BASEPRI, r7
    ba34:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    ba38:	2501      	movs	r5, #1
    ba3a:	bb2d      	cbnz	r5, ba88 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    ba3c:	4630      	mov	r0, r6
    ba3e:	f003 fc7a 	bl	f336 <z_priq_dumb_best>
		if (thread != NULL) {
    ba42:	4604      	mov	r4, r0
    ba44:	2800      	cmp	r0, #0
    ba46:	d0ef      	beq.n	ba28 <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    ba48:	f7ff f85a 	bl	ab00 <pended_on_thread>
    ba4c:	4621      	mov	r1, r4
    ba4e:	f7ff f9db 	bl	ae08 <z_priq_dumb_remove>
    ba52:	7b63      	ldrb	r3, [r4, #13]
    ba54:	f023 0302 	bic.w	r3, r3, #2
    ba58:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    ba5a:	2300      	movs	r3, #0
    ba5c:	60a3      	str	r3, [r4, #8]
    ba5e:	f104 0018 	add.w	r0, r4, #24
    ba62:	f000 fbd3 	bl	c20c <z_abort_timeout>
    ba66:	e7df      	b.n	ba28 <z_unpend_first_thread+0x48>
    ba68:	4d09      	ldr	r5, [pc, #36]	; (ba90 <z_unpend_first_thread+0xb0>)
    ba6a:	23b9      	movs	r3, #185	; 0xb9
    ba6c:	462a      	mov	r2, r5
    ba6e:	490c      	ldr	r1, [pc, #48]	; (baa0 <z_unpend_first_thread+0xc0>)
    ba70:	4809      	ldr	r0, [pc, #36]	; (ba98 <z_unpend_first_thread+0xb8>)
    ba72:	f002 fd9c 	bl	e5ae <assert_print>
    ba76:	4905      	ldr	r1, [pc, #20]	; (ba8c <z_unpend_first_thread+0xac>)
    ba78:	480a      	ldr	r0, [pc, #40]	; (baa4 <z_unpend_first_thread+0xc4>)
    ba7a:	f002 fd98 	bl	e5ae <assert_print>
    ba7e:	21b9      	movs	r1, #185	; 0xb9
    ba80:	4628      	mov	r0, r5
    ba82:	f002 fd8d 	bl	e5a0 <assert_post_action>
    ba86:	e7d3      	b.n	ba30 <z_unpend_first_thread+0x50>
}
    ba88:	4620      	mov	r0, r4
    ba8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba8c:	20005360 	.word	0x20005360
    ba90:	00010290 	.word	0x00010290
    ba94:	000102f0 	.word	0x000102f0
    ba98:	000100e4 	.word	0x000100e4
    ba9c:	00010308 	.word	0x00010308
    baa0:	000102c0 	.word	0x000102c0
    baa4:	000102d8 	.word	0x000102d8

0000baa8 <z_sched_init>:
{
    baa8:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    baaa:	4804      	ldr	r0, [pc, #16]	; (babc <z_sched_init+0x14>)
    baac:	f003 fc4a 	bl	f344 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    bab0:	2100      	movs	r1, #0
    bab2:	4608      	mov	r0, r1
    bab4:	f7ff f862 	bl	ab7c <k_sched_time_slice_set>
}
    bab8:	bd08      	pop	{r3, pc}
    baba:	bf00      	nop
    babc:	20005340 	.word	0x20005340

0000bac0 <z_impl_k_yield>:
{
    bac0:	b570      	push	{r4, r5, r6, lr}
    bac2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    bac6:	2b00      	cmp	r3, #0
    bac8:	d149      	bne.n	bb5e <z_impl_k_yield+0x9e>
	__asm__ volatile(
    baca:	f04f 0320 	mov.w	r3, #32
    bace:	f3ef 8611 	mrs	r6, BASEPRI
    bad2:	f383 8812 	msr	BASEPRI_MAX, r3
    bad6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bada:	4843      	ldr	r0, [pc, #268]	; (bbe8 <z_impl_k_yield+0x128>)
    badc:	f7fe fb02 	bl	a0e4 <z_spin_lock_valid>
    bae0:	2800      	cmp	r0, #0
    bae2:	d04d      	beq.n	bb80 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    bae4:	4840      	ldr	r0, [pc, #256]	; (bbe8 <z_impl_k_yield+0x128>)
    bae6:	f7fe fb1d 	bl	a124 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    baea:	4c40      	ldr	r4, [pc, #256]	; (bbec <z_impl_k_yield+0x12c>)
    baec:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    baee:	7b4b      	ldrb	r3, [r1, #13]
    baf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    baf4:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    baf6:	f104 0020 	add.w	r0, r4, #32
    bafa:	f7ff f985 	bl	ae08 <z_priq_dumb_remove>
	queue_thread(_current);
    bafe:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    bb00:	7b6b      	ldrb	r3, [r5, #13]
    bb02:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bb06:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    bb08:	4b39      	ldr	r3, [pc, #228]	; (bbf0 <z_impl_k_yield+0x130>)
    bb0a:	429d      	cmp	r5, r3
    bb0c:	d048      	beq.n	bba0 <z_impl_k_yield+0xe0>
	return list->head == list;
    bb0e:	4b37      	ldr	r3, [pc, #220]	; (bbec <z_impl_k_yield+0x12c>)
    bb10:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bb14:	429c      	cmp	r4, r3
    bb16:	d055      	beq.n	bbc4 <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bb18:	b16c      	cbz	r4, bb36 <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bb1a:	4621      	mov	r1, r4
    bb1c:	4628      	mov	r0, r5
    bb1e:	f003 fbeb 	bl	f2f8 <z_sched_prio_cmp>
    bb22:	2800      	cmp	r0, #0
    bb24:	dc48      	bgt.n	bbb8 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    bb26:	b134      	cbz	r4, bb36 <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    bb28:	4b30      	ldr	r3, [pc, #192]	; (bbec <z_impl_k_yield+0x12c>)
    bb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bb2c:	429c      	cmp	r4, r3
    bb2e:	d002      	beq.n	bb36 <z_impl_k_yield+0x76>
    bb30:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bb32:	2c00      	cmp	r4, #0
    bb34:	d1f0      	bne.n	bb18 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    bb36:	4b2d      	ldr	r3, [pc, #180]	; (bbec <z_impl_k_yield+0x12c>)
    bb38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    bb3a:	f103 0120 	add.w	r1, r3, #32
    bb3e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    bb40:	606a      	str	r2, [r5, #4]
	tail->next = node;
    bb42:	6015      	str	r5, [r2, #0]
	list->tail = node;
    bb44:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    bb46:	2001      	movs	r0, #1
    bb48:	f7ff f982 	bl	ae50 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bb4c:	4826      	ldr	r0, [pc, #152]	; (bbe8 <z_impl_k_yield+0x128>)
    bb4e:	f7fe fad9 	bl	a104 <z_spin_unlock_valid>
    bb52:	2800      	cmp	r0, #0
    bb54:	d038      	beq.n	bbc8 <z_impl_k_yield+0x108>
    bb56:	4630      	mov	r0, r6
    bb58:	f7f9 fffa 	bl	5b50 <arch_swap>
}
    bb5c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    bb5e:	4c25      	ldr	r4, [pc, #148]	; (bbf4 <z_impl_k_yield+0x134>)
    bb60:	f240 5332 	movw	r3, #1330	; 0x532
    bb64:	4622      	mov	r2, r4
    bb66:	4924      	ldr	r1, [pc, #144]	; (bbf8 <z_impl_k_yield+0x138>)
    bb68:	4824      	ldr	r0, [pc, #144]	; (bbfc <z_impl_k_yield+0x13c>)
    bb6a:	f002 fd20 	bl	e5ae <assert_print>
    bb6e:	4824      	ldr	r0, [pc, #144]	; (bc00 <z_impl_k_yield+0x140>)
    bb70:	f002 fd1d 	bl	e5ae <assert_print>
    bb74:	f240 5132 	movw	r1, #1330	; 0x532
    bb78:	4620      	mov	r0, r4
    bb7a:	f002 fd11 	bl	e5a0 <assert_post_action>
    bb7e:	e7a4      	b.n	baca <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bb80:	4c20      	ldr	r4, [pc, #128]	; (bc04 <z_impl_k_yield+0x144>)
    bb82:	238e      	movs	r3, #142	; 0x8e
    bb84:	4622      	mov	r2, r4
    bb86:	4920      	ldr	r1, [pc, #128]	; (bc08 <z_impl_k_yield+0x148>)
    bb88:	481c      	ldr	r0, [pc, #112]	; (bbfc <z_impl_k_yield+0x13c>)
    bb8a:	f002 fd10 	bl	e5ae <assert_print>
    bb8e:	4916      	ldr	r1, [pc, #88]	; (bbe8 <z_impl_k_yield+0x128>)
    bb90:	481e      	ldr	r0, [pc, #120]	; (bc0c <z_impl_k_yield+0x14c>)
    bb92:	f002 fd0c 	bl	e5ae <assert_print>
    bb96:	218e      	movs	r1, #142	; 0x8e
    bb98:	4620      	mov	r0, r4
    bb9a:	f002 fd01 	bl	e5a0 <assert_post_action>
    bb9e:	e7a1      	b.n	bae4 <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    bba0:	4c14      	ldr	r4, [pc, #80]	; (bbf4 <z_impl_k_yield+0x134>)
    bba2:	23ba      	movs	r3, #186	; 0xba
    bba4:	4622      	mov	r2, r4
    bba6:	491a      	ldr	r1, [pc, #104]	; (bc10 <z_impl_k_yield+0x150>)
    bba8:	4814      	ldr	r0, [pc, #80]	; (bbfc <z_impl_k_yield+0x13c>)
    bbaa:	f002 fd00 	bl	e5ae <assert_print>
    bbae:	21ba      	movs	r1, #186	; 0xba
    bbb0:	4620      	mov	r0, r4
    bbb2:	f002 fcf5 	bl	e5a0 <assert_post_action>
    bbb6:	e7aa      	b.n	bb0e <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    bbb8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    bbba:	606b      	str	r3, [r5, #4]
	node->next = successor;
    bbbc:	602c      	str	r4, [r5, #0]
	prev->next = node;
    bbbe:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    bbc0:	6065      	str	r5, [r4, #4]
}
    bbc2:	e7c0      	b.n	bb46 <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bbc4:	2400      	movs	r4, #0
    bbc6:	e7a7      	b.n	bb18 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bbc8:	4c0e      	ldr	r4, [pc, #56]	; (bc04 <z_impl_k_yield+0x144>)
    bbca:	23d0      	movs	r3, #208	; 0xd0
    bbcc:	4622      	mov	r2, r4
    bbce:	4911      	ldr	r1, [pc, #68]	; (bc14 <z_impl_k_yield+0x154>)
    bbd0:	480a      	ldr	r0, [pc, #40]	; (bbfc <z_impl_k_yield+0x13c>)
    bbd2:	f002 fcec 	bl	e5ae <assert_print>
    bbd6:	4904      	ldr	r1, [pc, #16]	; (bbe8 <z_impl_k_yield+0x128>)
    bbd8:	480f      	ldr	r0, [pc, #60]	; (bc18 <z_impl_k_yield+0x158>)
    bbda:	f002 fce8 	bl	e5ae <assert_print>
    bbde:	21d0      	movs	r1, #208	; 0xd0
    bbe0:	4620      	mov	r0, r4
    bbe2:	f002 fcdd 	bl	e5a0 <assert_post_action>
    bbe6:	e7b6      	b.n	bb56 <z_impl_k_yield+0x96>
    bbe8:	20005360 	.word	0x20005360
    bbec:	20005324 	.word	0x20005324
    bbf0:	20004618 	.word	0x20004618
    bbf4:	00011b78 	.word	0x00011b78
    bbf8:	00011988 	.word	0x00011988
    bbfc:	000100e4 	.word	0x000100e4
    bc00:	00011ad0 	.word	0x00011ad0
    bc04:	00010290 	.word	0x00010290
    bc08:	000102f0 	.word	0x000102f0
    bc0c:	00010308 	.word	0x00010308
    bc10:	00011bb4 	.word	0x00011bb4
    bc14:	000102c0 	.word	0x000102c0
    bc18:	000102d8 	.word	0x000102d8

0000bc1c <z_tick_sleep>:
{
    bc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bc20:	4604      	mov	r4, r0
    bc22:	460e      	mov	r6, r1
    bc24:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    bc28:	2b00      	cmp	r3, #0
    bc2a:	d14e      	bne.n	bcca <z_tick_sleep+0xae>
	if (ticks == 0) {
    bc2c:	ea54 0306 	orrs.w	r3, r4, r6
    bc30:	d05c      	beq.n	bcec <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    bc32:	f06f 0301 	mvn.w	r3, #1
    bc36:	1b1b      	subs	r3, r3, r4
    bc38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bc3c:	eb62 0206 	sbc.w	r2, r2, r6
    bc40:	2b01      	cmp	r3, #1
    bc42:	f172 0300 	sbcs.w	r3, r2, #0
    bc46:	db55      	blt.n	bcf4 <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    bc48:	f06f 0501 	mvn.w	r5, #1
    bc4c:	1b2d      	subs	r5, r5, r4
    bc4e:	f04f 0320 	mov.w	r3, #32
    bc52:	f3ef 8911 	mrs	r9, BASEPRI
    bc56:	f383 8812 	msr	BASEPRI_MAX, r3
    bc5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bc5e:	4840      	ldr	r0, [pc, #256]	; (bd60 <z_tick_sleep+0x144>)
    bc60:	f7fe fa40 	bl	a0e4 <z_spin_lock_valid>
    bc64:	2800      	cmp	r0, #0
    bc66:	d049      	beq.n	bcfc <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    bc68:	f8df 80f4 	ldr.w	r8, [pc, #244]	; bd60 <z_tick_sleep+0x144>
    bc6c:	4640      	mov	r0, r8
    bc6e:	f7fe fa59 	bl	a124 <z_spin_lock_set_owner>
	pending_current = _current;
    bc72:	4f3c      	ldr	r7, [pc, #240]	; (bd64 <z_tick_sleep+0x148>)
    bc74:	68b8      	ldr	r0, [r7, #8]
    bc76:	4b3c      	ldr	r3, [pc, #240]	; (bd68 <z_tick_sleep+0x14c>)
    bc78:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    bc7a:	f7ff fbbb 	bl	b3f4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    bc7e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    bc80:	4622      	mov	r2, r4
    bc82:	4633      	mov	r3, r6
    bc84:	4939      	ldr	r1, [pc, #228]	; (bd6c <z_tick_sleep+0x150>)
    bc86:	3018      	adds	r0, #24
    bc88:	f000 f9dc 	bl	c044 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    bc8c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    bc8e:	7b53      	ldrb	r3, [r2, #13]
    bc90:	f043 0310 	orr.w	r3, r3, #16
    bc94:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bc96:	4640      	mov	r0, r8
    bc98:	f7fe fa34 	bl	a104 <z_spin_unlock_valid>
    bc9c:	2800      	cmp	r0, #0
    bc9e:	d03d      	beq.n	bd1c <z_tick_sleep+0x100>
    bca0:	4648      	mov	r0, r9
    bca2:	f7f9 ff55 	bl	5b50 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    bca6:	4b2f      	ldr	r3, [pc, #188]	; (bd64 <z_tick_sleep+0x148>)
    bca8:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    bcaa:	7b5b      	ldrb	r3, [r3, #13]
    bcac:	f013 0f10 	tst.w	r3, #16
    bcb0:	d144      	bne.n	bd3c <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    bcb2:	f003 fb62 	bl	f37a <sys_clock_tick_get_32>
    bcb6:	1a28      	subs	r0, r5, r0
    bcb8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    bcbc:	2801      	cmp	r0, #1
    bcbe:	f173 0300 	sbcs.w	r3, r3, #0
    bcc2:	da00      	bge.n	bcc6 <z_tick_sleep+0xaa>
	return 0;
    bcc4:	2000      	movs	r0, #0
}
    bcc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    bcca:	4d29      	ldr	r5, [pc, #164]	; (bd70 <z_tick_sleep+0x154>)
    bccc:	f240 534e 	movw	r3, #1358	; 0x54e
    bcd0:	462a      	mov	r2, r5
    bcd2:	4928      	ldr	r1, [pc, #160]	; (bd74 <z_tick_sleep+0x158>)
    bcd4:	4828      	ldr	r0, [pc, #160]	; (bd78 <z_tick_sleep+0x15c>)
    bcd6:	f002 fc6a 	bl	e5ae <assert_print>
    bcda:	4828      	ldr	r0, [pc, #160]	; (bd7c <z_tick_sleep+0x160>)
    bcdc:	f002 fc67 	bl	e5ae <assert_print>
    bce0:	f240 514e 	movw	r1, #1358	; 0x54e
    bce4:	4628      	mov	r0, r5
    bce6:	f002 fc5b 	bl	e5a0 <assert_post_action>
    bcea:	e79f      	b.n	bc2c <z_tick_sleep+0x10>
	z_impl_k_yield();
    bcec:	f7ff fee8 	bl	bac0 <z_impl_k_yield>
		return 0;
    bcf0:	2000      	movs	r0, #0
    bcf2:	e7e8      	b.n	bcc6 <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    bcf4:	f003 fb41 	bl	f37a <sys_clock_tick_get_32>
    bcf8:	1905      	adds	r5, r0, r4
    bcfa:	e7a8      	b.n	bc4e <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bcfc:	4f20      	ldr	r7, [pc, #128]	; (bd80 <z_tick_sleep+0x164>)
    bcfe:	238e      	movs	r3, #142	; 0x8e
    bd00:	463a      	mov	r2, r7
    bd02:	4920      	ldr	r1, [pc, #128]	; (bd84 <z_tick_sleep+0x168>)
    bd04:	481c      	ldr	r0, [pc, #112]	; (bd78 <z_tick_sleep+0x15c>)
    bd06:	f002 fc52 	bl	e5ae <assert_print>
    bd0a:	4915      	ldr	r1, [pc, #84]	; (bd60 <z_tick_sleep+0x144>)
    bd0c:	481e      	ldr	r0, [pc, #120]	; (bd88 <z_tick_sleep+0x16c>)
    bd0e:	f002 fc4e 	bl	e5ae <assert_print>
    bd12:	218e      	movs	r1, #142	; 0x8e
    bd14:	4638      	mov	r0, r7
    bd16:	f002 fc43 	bl	e5a0 <assert_post_action>
    bd1a:	e7a5      	b.n	bc68 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bd1c:	4c18      	ldr	r4, [pc, #96]	; (bd80 <z_tick_sleep+0x164>)
    bd1e:	23d0      	movs	r3, #208	; 0xd0
    bd20:	4622      	mov	r2, r4
    bd22:	491a      	ldr	r1, [pc, #104]	; (bd8c <z_tick_sleep+0x170>)
    bd24:	4814      	ldr	r0, [pc, #80]	; (bd78 <z_tick_sleep+0x15c>)
    bd26:	f002 fc42 	bl	e5ae <assert_print>
    bd2a:	4641      	mov	r1, r8
    bd2c:	4818      	ldr	r0, [pc, #96]	; (bd90 <z_tick_sleep+0x174>)
    bd2e:	f002 fc3e 	bl	e5ae <assert_print>
    bd32:	21d0      	movs	r1, #208	; 0xd0
    bd34:	4620      	mov	r0, r4
    bd36:	f002 fc33 	bl	e5a0 <assert_post_action>
    bd3a:	e7b1      	b.n	bca0 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    bd3c:	4c0c      	ldr	r4, [pc, #48]	; (bd70 <z_tick_sleep+0x154>)
    bd3e:	f240 536f 	movw	r3, #1391	; 0x56f
    bd42:	4622      	mov	r2, r4
    bd44:	4913      	ldr	r1, [pc, #76]	; (bd94 <z_tick_sleep+0x178>)
    bd46:	480c      	ldr	r0, [pc, #48]	; (bd78 <z_tick_sleep+0x15c>)
    bd48:	f002 fc31 	bl	e5ae <assert_print>
    bd4c:	480b      	ldr	r0, [pc, #44]	; (bd7c <z_tick_sleep+0x160>)
    bd4e:	f002 fc2e 	bl	e5ae <assert_print>
    bd52:	f240 516f 	movw	r1, #1391	; 0x56f
    bd56:	4620      	mov	r0, r4
    bd58:	f002 fc22 	bl	e5a0 <assert_post_action>
    bd5c:	e7a9      	b.n	bcb2 <z_tick_sleep+0x96>
    bd5e:	bf00      	nop
    bd60:	20005360 	.word	0x20005360
    bd64:	20005324 	.word	0x20005324
    bd68:	2000535c 	.word	0x2000535c
    bd6c:	0000b30d 	.word	0x0000b30d
    bd70:	00011b78 	.word	0x00011b78
    bd74:	00011988 	.word	0x00011988
    bd78:	000100e4 	.word	0x000100e4
    bd7c:	00011ad0 	.word	0x00011ad0
    bd80:	00010290 	.word	0x00010290
    bd84:	000102f0 	.word	0x000102f0
    bd88:	00010308 	.word	0x00010308
    bd8c:	000102c0 	.word	0x000102c0
    bd90:	000102d8 	.word	0x000102d8
    bd94:	00011c34 	.word	0x00011c34

0000bd98 <z_impl_k_sleep>:
{
    bd98:	b570      	push	{r4, r5, r6, lr}
    bd9a:	4605      	mov	r5, r0
    bd9c:	460c      	mov	r4, r1
    bd9e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    bda2:	bb13      	cbnz	r3, bdea <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bda4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    bda8:	bf08      	it	eq
    bdaa:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    bdae:	d02d      	beq.n	be0c <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    bdb0:	4628      	mov	r0, r5
    bdb2:	4621      	mov	r1, r4
    bdb4:	f7ff ff32 	bl	bc1c <z_tick_sleep>
    bdb8:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    bdba:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    bdbc:	0151      	lsls	r1, r2, #5
    bdbe:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    bdc2:	0143      	lsls	r3, r0, #5
    bdc4:	1a1b      	subs	r3, r3, r0
    bdc6:	eb61 0102 	sbc.w	r1, r1, r2
    bdca:	0088      	lsls	r0, r1, #2
    bdcc:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    bdd0:	009b      	lsls	r3, r3, #2
    bdd2:	eb13 030c 	adds.w	r3, r3, ip
    bdd6:	eb42 0000 	adc.w	r0, r2, r0
    bdda:	00c0      	lsls	r0, r0, #3
    bddc:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    bde0:	f3c3 3310 	ubfx	r3, r3, #12, #17
    bde4:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    bde8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    bdea:	4e0c      	ldr	r6, [pc, #48]	; (be1c <z_impl_k_sleep+0x84>)
    bdec:	f240 537e 	movw	r3, #1406	; 0x57e
    bdf0:	4632      	mov	r2, r6
    bdf2:	490b      	ldr	r1, [pc, #44]	; (be20 <z_impl_k_sleep+0x88>)
    bdf4:	480b      	ldr	r0, [pc, #44]	; (be24 <z_impl_k_sleep+0x8c>)
    bdf6:	f002 fbda 	bl	e5ae <assert_print>
    bdfa:	480b      	ldr	r0, [pc, #44]	; (be28 <z_impl_k_sleep+0x90>)
    bdfc:	f002 fbd7 	bl	e5ae <assert_print>
    be00:	f240 517e 	movw	r1, #1406	; 0x57e
    be04:	4630      	mov	r0, r6
    be06:	f002 fbcb 	bl	e5a0 <assert_post_action>
    be0a:	e7cb      	b.n	bda4 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    be0c:	4b07      	ldr	r3, [pc, #28]	; (be2c <z_impl_k_sleep+0x94>)
    be0e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    be10:	f7ff fc88 	bl	b724 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    be14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    be18:	e7e6      	b.n	bde8 <z_impl_k_sleep+0x50>
    be1a:	bf00      	nop
    be1c:	00011b78 	.word	0x00011b78
    be20:	00011988 	.word	0x00011988
    be24:	000100e4 	.word	0x000100e4
    be28:	00011ad0 	.word	0x00011ad0
    be2c:	20005324 	.word	0x20005324

0000be30 <z_impl_z_current_get>:
}
    be30:	4b01      	ldr	r3, [pc, #4]	; (be38 <z_impl_z_current_get+0x8>)
    be32:	6898      	ldr	r0, [r3, #8]
    be34:	4770      	bx	lr
    be36:	bf00      	nop
    be38:	20005324 	.word	0x20005324

0000be3c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    be3c:	b570      	push	{r4, r5, r6, lr}
    be3e:	4604      	mov	r4, r0
    be40:	f04f 0320 	mov.w	r3, #32
    be44:	f3ef 8511 	mrs	r5, BASEPRI
    be48:	f383 8812 	msr	BASEPRI_MAX, r3
    be4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    be50:	4840      	ldr	r0, [pc, #256]	; (bf54 <z_thread_abort+0x118>)
    be52:	f7fe f947 	bl	a0e4 <z_spin_lock_valid>
    be56:	b1b8      	cbz	r0, be88 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    be58:	483e      	ldr	r0, [pc, #248]	; (bf54 <z_thread_abort+0x118>)
    be5a:	f7fe f963 	bl	a124 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    be5e:	7b63      	ldrb	r3, [r4, #13]
    be60:	f013 0f08 	tst.w	r3, #8
    be64:	d120      	bne.n	bea8 <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    be66:	4620      	mov	r0, r4
    be68:	f7ff fd6c 	bl	b944 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    be6c:	4b3a      	ldr	r3, [pc, #232]	; (bf58 <z_thread_abort+0x11c>)
    be6e:	689b      	ldr	r3, [r3, #8]
    be70:	42a3      	cmp	r3, r4
    be72:	d032      	beq.n	beda <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    be74:	4837      	ldr	r0, [pc, #220]	; (bf54 <z_thread_abort+0x118>)
    be76:	f7fe f945 	bl	a104 <z_spin_unlock_valid>
    be7a:	2800      	cmp	r0, #0
    be7c:	d059      	beq.n	bf32 <z_thread_abort+0xf6>
	__asm__ volatile(
    be7e:	f385 8811 	msr	BASEPRI, r5
    be82:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    be86:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    be88:	4e34      	ldr	r6, [pc, #208]	; (bf5c <z_thread_abort+0x120>)
    be8a:	238e      	movs	r3, #142	; 0x8e
    be8c:	4632      	mov	r2, r6
    be8e:	4934      	ldr	r1, [pc, #208]	; (bf60 <z_thread_abort+0x124>)
    be90:	4834      	ldr	r0, [pc, #208]	; (bf64 <z_thread_abort+0x128>)
    be92:	f002 fb8c 	bl	e5ae <assert_print>
    be96:	492f      	ldr	r1, [pc, #188]	; (bf54 <z_thread_abort+0x118>)
    be98:	4833      	ldr	r0, [pc, #204]	; (bf68 <z_thread_abort+0x12c>)
    be9a:	f002 fb88 	bl	e5ae <assert_print>
    be9e:	218e      	movs	r1, #142	; 0x8e
    bea0:	4630      	mov	r0, r6
    bea2:	f002 fb7d 	bl	e5a0 <assert_post_action>
    bea6:	e7d7      	b.n	be58 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bea8:	482a      	ldr	r0, [pc, #168]	; (bf54 <z_thread_abort+0x118>)
    beaa:	f7fe f92b 	bl	a104 <z_spin_unlock_valid>
    beae:	b120      	cbz	r0, beba <z_thread_abort+0x7e>
    beb0:	f385 8811 	msr	BASEPRI, r5
    beb4:	f3bf 8f6f 	isb	sy
		return;
    beb8:	e7e5      	b.n	be86 <z_thread_abort+0x4a>
    beba:	4c28      	ldr	r4, [pc, #160]	; (bf5c <z_thread_abort+0x120>)
    bebc:	23b9      	movs	r3, #185	; 0xb9
    bebe:	4622      	mov	r2, r4
    bec0:	492a      	ldr	r1, [pc, #168]	; (bf6c <z_thread_abort+0x130>)
    bec2:	4828      	ldr	r0, [pc, #160]	; (bf64 <z_thread_abort+0x128>)
    bec4:	f002 fb73 	bl	e5ae <assert_print>
    bec8:	4922      	ldr	r1, [pc, #136]	; (bf54 <z_thread_abort+0x118>)
    beca:	4829      	ldr	r0, [pc, #164]	; (bf70 <z_thread_abort+0x134>)
    becc:	f002 fb6f 	bl	e5ae <assert_print>
    bed0:	21b9      	movs	r1, #185	; 0xb9
    bed2:	4620      	mov	r0, r4
    bed4:	f002 fb64 	bl	e5a0 <assert_post_action>
    bed8:	e7ea      	b.n	beb0 <z_thread_abort+0x74>
    beda:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    bede:	2b00      	cmp	r3, #0
    bee0:	d1c8      	bne.n	be74 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bee2:	481c      	ldr	r0, [pc, #112]	; (bf54 <z_thread_abort+0x118>)
    bee4:	f7fe f90e 	bl	a104 <z_spin_unlock_valid>
    bee8:	b198      	cbz	r0, bf12 <z_thread_abort+0xd6>
    beea:	4628      	mov	r0, r5
    beec:	f7f9 fe30 	bl	5b50 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    bef0:	4c20      	ldr	r4, [pc, #128]	; (bf74 <z_thread_abort+0x138>)
    bef2:	f240 63ac 	movw	r3, #1708	; 0x6ac
    bef6:	4622      	mov	r2, r4
    bef8:	491f      	ldr	r1, [pc, #124]	; (bf78 <z_thread_abort+0x13c>)
    befa:	481a      	ldr	r0, [pc, #104]	; (bf64 <z_thread_abort+0x128>)
    befc:	f002 fb57 	bl	e5ae <assert_print>
    bf00:	481e      	ldr	r0, [pc, #120]	; (bf7c <z_thread_abort+0x140>)
    bf02:	f002 fb54 	bl	e5ae <assert_print>
    bf06:	f240 61ac 	movw	r1, #1708	; 0x6ac
    bf0a:	4620      	mov	r0, r4
    bf0c:	f002 fb48 	bl	e5a0 <assert_post_action>
    bf10:	e7b0      	b.n	be74 <z_thread_abort+0x38>
    bf12:	4c12      	ldr	r4, [pc, #72]	; (bf5c <z_thread_abort+0x120>)
    bf14:	23d0      	movs	r3, #208	; 0xd0
    bf16:	4622      	mov	r2, r4
    bf18:	4914      	ldr	r1, [pc, #80]	; (bf6c <z_thread_abort+0x130>)
    bf1a:	4812      	ldr	r0, [pc, #72]	; (bf64 <z_thread_abort+0x128>)
    bf1c:	f002 fb47 	bl	e5ae <assert_print>
    bf20:	490c      	ldr	r1, [pc, #48]	; (bf54 <z_thread_abort+0x118>)
    bf22:	4813      	ldr	r0, [pc, #76]	; (bf70 <z_thread_abort+0x134>)
    bf24:	f002 fb43 	bl	e5ae <assert_print>
    bf28:	21d0      	movs	r1, #208	; 0xd0
    bf2a:	4620      	mov	r0, r4
    bf2c:	f002 fb38 	bl	e5a0 <assert_post_action>
    bf30:	e7db      	b.n	beea <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bf32:	4c0a      	ldr	r4, [pc, #40]	; (bf5c <z_thread_abort+0x120>)
    bf34:	23b9      	movs	r3, #185	; 0xb9
    bf36:	4622      	mov	r2, r4
    bf38:	490c      	ldr	r1, [pc, #48]	; (bf6c <z_thread_abort+0x130>)
    bf3a:	480a      	ldr	r0, [pc, #40]	; (bf64 <z_thread_abort+0x128>)
    bf3c:	f002 fb37 	bl	e5ae <assert_print>
    bf40:	4904      	ldr	r1, [pc, #16]	; (bf54 <z_thread_abort+0x118>)
    bf42:	480b      	ldr	r0, [pc, #44]	; (bf70 <z_thread_abort+0x134>)
    bf44:	f002 fb33 	bl	e5ae <assert_print>
    bf48:	21b9      	movs	r1, #185	; 0xb9
    bf4a:	4620      	mov	r0, r4
    bf4c:	f002 fb28 	bl	e5a0 <assert_post_action>
    bf50:	e795      	b.n	be7e <z_thread_abort+0x42>
    bf52:	bf00      	nop
    bf54:	20005360 	.word	0x20005360
    bf58:	20005324 	.word	0x20005324
    bf5c:	00010290 	.word	0x00010290
    bf60:	000102f0 	.word	0x000102f0
    bf64:	000100e4 	.word	0x000100e4
    bf68:	00010308 	.word	0x00010308
    bf6c:	000102c0 	.word	0x000102c0
    bf70:	000102d8 	.word	0x000102d8
    bf74:	00011b78 	.word	0x00011b78
    bf78:	000107a0 	.word	0x000107a0
    bf7c:	00011c74 	.word	0x00011c74

0000bf80 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    bf80:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    bf82:	4806      	ldr	r0, [pc, #24]	; (bf9c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    bf84:	4a06      	ldr	r2, [pc, #24]	; (bfa0 <z_data_copy+0x20>)
    bf86:	1a12      	subs	r2, r2, r0
    bf88:	4906      	ldr	r1, [pc, #24]	; (bfa4 <z_data_copy+0x24>)
    bf8a:	f003 f92e 	bl	f1ea <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    bf8e:	4a06      	ldr	r2, [pc, #24]	; (bfa8 <z_data_copy+0x28>)
    bf90:	4906      	ldr	r1, [pc, #24]	; (bfac <z_data_copy+0x2c>)
    bf92:	4807      	ldr	r0, [pc, #28]	; (bfb0 <z_data_copy+0x30>)
    bf94:	f003 f929 	bl	f1ea <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    bf98:	bd08      	pop	{r3, pc}
    bf9a:	bf00      	nop
    bf9c:	20000000 	.word	0x20000000
    bfa0:	20004288 	.word	0x20004288
    bfa4:	000120d0 	.word	0x000120d0
    bfa8:	00000000 	.word	0x00000000
    bfac:	000120d0 	.word	0x000120d0
    bfb0:	20000000 	.word	0x20000000

0000bfb4 <first>:
	return list->head == list;
    bfb4:	4b03      	ldr	r3, [pc, #12]	; (bfc4 <first+0x10>)
    bfb6:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bfb8:	4298      	cmp	r0, r3
    bfba:	d000      	beq.n	bfbe <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    bfbc:	4770      	bx	lr
    bfbe:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    bfc0:	e7fc      	b.n	bfbc <first+0x8>
    bfc2:	bf00      	nop
    bfc4:	20004100 	.word	0x20004100

0000bfc8 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    bfc8:	b130      	cbz	r0, bfd8 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    bfca:	4a04      	ldr	r2, [pc, #16]	; (bfdc <next+0x14>)
    bfcc:	6852      	ldr	r2, [r2, #4]
    bfce:	4290      	cmp	r0, r2
    bfd0:	d001      	beq.n	bfd6 <next+0xe>
    bfd2:	6800      	ldr	r0, [r0, #0]
    bfd4:	4770      	bx	lr
    bfd6:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    bfd8:	4770      	bx	lr
    bfda:	bf00      	nop
    bfdc:	20004100 	.word	0x20004100

0000bfe0 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    bfe0:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    bfe2:	4b04      	ldr	r3, [pc, #16]	; (bff4 <elapsed+0x14>)
    bfe4:	681b      	ldr	r3, [r3, #0]
    bfe6:	b10b      	cbz	r3, bfec <elapsed+0xc>
    bfe8:	2000      	movs	r0, #0
}
    bfea:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    bfec:	f7fb fd0c 	bl	7a08 <sys_clock_elapsed>
    bff0:	e7fb      	b.n	bfea <elapsed+0xa>
    bff2:	bf00      	nop
    bff4:	2000536c 	.word	0x2000536c

0000bff8 <next_timeout>:

static int32_t next_timeout(void)
{
    bff8:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    bffa:	f7ff ffdb 	bl	bfb4 <first>
    bffe:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    c000:	f7ff ffee 	bl	bfe0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    c004:	b17c      	cbz	r4, c026 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    c006:	6923      	ldr	r3, [r4, #16]
    c008:	6962      	ldr	r2, [r4, #20]
    c00a:	1a1b      	subs	r3, r3, r0
    c00c:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    c010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    c014:	f170 0200 	sbcs.w	r2, r0, #0
    c018:	da08      	bge.n	c02c <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    c01a:	2800      	cmp	r0, #0
    c01c:	db01      	blt.n	c022 <next_timeout+0x2a>
    c01e:	4618      	mov	r0, r3
    c020:	e006      	b.n	c030 <next_timeout+0x38>
    c022:	2300      	movs	r3, #0
    c024:	e7fb      	b.n	c01e <next_timeout+0x26>
		ret = MAX_WAIT;
    c026:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    c02a:	e001      	b.n	c030 <next_timeout+0x38>
    c02c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    c030:	4b03      	ldr	r3, [pc, #12]	; (c040 <next_timeout+0x48>)
    c032:	691b      	ldr	r3, [r3, #16]
    c034:	b113      	cbz	r3, c03c <next_timeout+0x44>
    c036:	4283      	cmp	r3, r0
    c038:	da00      	bge.n	c03c <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    c03a:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    c03c:	bd10      	pop	{r4, pc}
    c03e:	bf00      	nop
    c040:	20005324 	.word	0x20005324

0000c044 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    c048:	bf08      	it	eq
    c04a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    c04e:	f000 80c1 	beq.w	c1d4 <z_add_timeout+0x190>
{
    c052:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c056:	4604      	mov	r4, r0
    c058:	460f      	mov	r7, r1
    c05a:	4692      	mov	sl, r2
    c05c:	461d      	mov	r5, r3
	return node->next != NULL;
    c05e:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    c060:	b173      	cbz	r3, c080 <z_add_timeout+0x3c>
    c062:	f8df 8174 	ldr.w	r8, [pc, #372]	; c1d8 <z_add_timeout+0x194>
    c066:	2363      	movs	r3, #99	; 0x63
    c068:	4642      	mov	r2, r8
    c06a:	495c      	ldr	r1, [pc, #368]	; (c1dc <z_add_timeout+0x198>)
    c06c:	485c      	ldr	r0, [pc, #368]	; (c1e0 <z_add_timeout+0x19c>)
    c06e:	f002 fa9e 	bl	e5ae <assert_print>
    c072:	485c      	ldr	r0, [pc, #368]	; (c1e4 <z_add_timeout+0x1a0>)
    c074:	f002 fa9b 	bl	e5ae <assert_print>
    c078:	2163      	movs	r1, #99	; 0x63
    c07a:	4640      	mov	r0, r8
    c07c:	f002 fa90 	bl	e5a0 <assert_post_action>
	to->fn = fn;
    c080:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    c082:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    c086:	f04f 0320 	mov.w	r3, #32
    c08a:	f3ef 8711 	mrs	r7, BASEPRI
    c08e:	f383 8812 	msr	BASEPRI_MAX, r3
    c092:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c096:	4854      	ldr	r0, [pc, #336]	; (c1e8 <z_add_timeout+0x1a4>)
    c098:	f7fe f824 	bl	a0e4 <z_spin_lock_valid>
    c09c:	b118      	cbz	r0, c0a6 <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    c09e:	4852      	ldr	r0, [pc, #328]	; (c1e8 <z_add_timeout+0x1a4>)
    c0a0:	f7fe f840 	bl	a124 <z_spin_lock_set_owner>
	return k;
    c0a4:	e038      	b.n	c118 <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c0a6:	f8df 9144 	ldr.w	r9, [pc, #324]	; c1ec <z_add_timeout+0x1a8>
    c0aa:	238e      	movs	r3, #142	; 0x8e
    c0ac:	464a      	mov	r2, r9
    c0ae:	4950      	ldr	r1, [pc, #320]	; (c1f0 <z_add_timeout+0x1ac>)
    c0b0:	484b      	ldr	r0, [pc, #300]	; (c1e0 <z_add_timeout+0x19c>)
    c0b2:	f002 fa7c 	bl	e5ae <assert_print>
    c0b6:	494c      	ldr	r1, [pc, #304]	; (c1e8 <z_add_timeout+0x1a4>)
    c0b8:	484e      	ldr	r0, [pc, #312]	; (c1f4 <z_add_timeout+0x1b0>)
    c0ba:	f002 fa78 	bl	e5ae <assert_print>
    c0be:	218e      	movs	r1, #142	; 0x8e
    c0c0:	4648      	mov	r0, r9
    c0c2:	f002 fa6d 	bl	e5a0 <assert_post_action>
    c0c6:	e7ea      	b.n	c09e <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    c0c8:	f11a 0801 	adds.w	r8, sl, #1
    c0cc:	f145 0900 	adc.w	r9, r5, #0
    c0d0:	f7ff ff86 	bl	bfe0 <elapsed>
    c0d4:	eb18 0300 	adds.w	r3, r8, r0
    c0d8:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    c0dc:	6123      	str	r3, [r4, #16]
    c0de:	6160      	str	r0, [r4, #20]
    c0e0:	e03d      	b.n	c15e <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    c0e2:	1a51      	subs	r1, r2, r1
    c0e4:	eb66 0303 	sbc.w	r3, r6, r3
    c0e8:	6101      	str	r1, [r0, #16]
    c0ea:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    c0ec:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    c0ee:	6063      	str	r3, [r4, #4]
	node->next = successor;
    c0f0:	6020      	str	r0, [r4, #0]
	prev->next = node;
    c0f2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    c0f4:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    c0f6:	2800      	cmp	r0, #0
    c0f8:	d045      	beq.n	c186 <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    c0fa:	f7ff ff5b 	bl	bfb4 <first>
    c0fe:	4284      	cmp	r4, r0
    c100:	d048      	beq.n	c194 <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c102:	4839      	ldr	r0, [pc, #228]	; (c1e8 <z_add_timeout+0x1a4>)
    c104:	f7fd fffe 	bl	a104 <z_spin_unlock_valid>
    c108:	2800      	cmp	r0, #0
    c10a:	d050      	beq.n	c1ae <z_add_timeout+0x16a>
	__asm__ volatile(
    c10c:	f387 8811 	msr	BASEPRI, r7
    c110:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    c114:	f04f 0801 	mov.w	r8, #1
    c118:	f1b8 0f00 	cmp.w	r8, #0
    c11c:	d158      	bne.n	c1d0 <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    c11e:	4653      	mov	r3, sl
    c120:	f06f 0101 	mvn.w	r1, #1
    c124:	ebb1 010a 	subs.w	r1, r1, sl
    c128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c12c:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    c130:	2a00      	cmp	r2, #0
    c132:	dbc9      	blt.n	c0c8 <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    c134:	4a30      	ldr	r2, [pc, #192]	; (c1f8 <z_add_timeout+0x1b4>)
    c136:	6811      	ldr	r1, [r2, #0]
    c138:	6852      	ldr	r2, [r2, #4]
    c13a:	185b      	adds	r3, r3, r1
    c13c:	eb42 0205 	adc.w	r2, r2, r5
    c140:	f06f 0101 	mvn.w	r1, #1
    c144:	1acb      	subs	r3, r1, r3
    c146:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    c14a:	4618      	mov	r0, r3
    c14c:	4611      	mov	r1, r2
    c14e:	2b01      	cmp	r3, #1
    c150:	f172 0300 	sbcs.w	r3, r2, #0
    c154:	da01      	bge.n	c15a <z_add_timeout+0x116>
    c156:	2001      	movs	r0, #1
    c158:	2100      	movs	r1, #0
    c15a:	6120      	str	r0, [r4, #16]
    c15c:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    c15e:	f7ff ff29 	bl	bfb4 <first>
    c162:	2800      	cmp	r0, #0
    c164:	d0c7      	beq.n	c0f6 <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    c166:	6902      	ldr	r2, [r0, #16]
    c168:	6946      	ldr	r6, [r0, #20]
    c16a:	6921      	ldr	r1, [r4, #16]
    c16c:	6963      	ldr	r3, [r4, #20]
    c16e:	4291      	cmp	r1, r2
    c170:	eb73 0c06 	sbcs.w	ip, r3, r6
    c174:	dbb5      	blt.n	c0e2 <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    c176:	1a89      	subs	r1, r1, r2
    c178:	eb63 0306 	sbc.w	r3, r3, r6
    c17c:	6121      	str	r1, [r4, #16]
    c17e:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    c180:	f7ff ff22 	bl	bfc8 <next>
    c184:	e7ed      	b.n	c162 <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    c186:	4b1d      	ldr	r3, [pc, #116]	; (c1fc <z_add_timeout+0x1b8>)
    c188:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    c18a:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    c18c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    c18e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    c190:	605c      	str	r4, [r3, #4]
}
    c192:	e7b2      	b.n	c0fa <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    c194:	f7ff ff30 	bl	bff8 <next_timeout>

			if (next_time == 0 ||
    c198:	4603      	mov	r3, r0
    c19a:	b118      	cbz	r0, c1a4 <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    c19c:	4a18      	ldr	r2, [pc, #96]	; (c200 <z_add_timeout+0x1bc>)
    c19e:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    c1a0:	4282      	cmp	r2, r0
    c1a2:	d0ae      	beq.n	c102 <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    c1a4:	2100      	movs	r1, #0
    c1a6:	4618      	mov	r0, r3
    c1a8:	f7fb fbfc 	bl	79a4 <sys_clock_set_timeout>
    c1ac:	e7a9      	b.n	c102 <z_add_timeout+0xbe>
    c1ae:	f8df 803c 	ldr.w	r8, [pc, #60]	; c1ec <z_add_timeout+0x1a8>
    c1b2:	23b9      	movs	r3, #185	; 0xb9
    c1b4:	4642      	mov	r2, r8
    c1b6:	4913      	ldr	r1, [pc, #76]	; (c204 <z_add_timeout+0x1c0>)
    c1b8:	4809      	ldr	r0, [pc, #36]	; (c1e0 <z_add_timeout+0x19c>)
    c1ba:	f002 f9f8 	bl	e5ae <assert_print>
    c1be:	490a      	ldr	r1, [pc, #40]	; (c1e8 <z_add_timeout+0x1a4>)
    c1c0:	4811      	ldr	r0, [pc, #68]	; (c208 <z_add_timeout+0x1c4>)
    c1c2:	f002 f9f4 	bl	e5ae <assert_print>
    c1c6:	21b9      	movs	r1, #185	; 0xb9
    c1c8:	4640      	mov	r0, r8
    c1ca:	f002 f9e9 	bl	e5a0 <assert_post_action>
    c1ce:	e79d      	b.n	c10c <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    c1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c1d4:	4770      	bx	lr
    c1d6:	bf00      	nop
    c1d8:	00011c98 	.word	0x00011c98
    c1dc:	00011cbc 	.word	0x00011cbc
    c1e0:	000100e4 	.word	0x000100e4
    c1e4:	00011ad0 	.word	0x00011ad0
    c1e8:	20005370 	.word	0x20005370
    c1ec:	00010290 	.word	0x00010290
    c1f0:	000102f0 	.word	0x000102f0
    c1f4:	00010308 	.word	0x00010308
    c1f8:	20004778 	.word	0x20004778
    c1fc:	20004100 	.word	0x20004100
    c200:	20005324 	.word	0x20005324
    c204:	000102c0 	.word	0x000102c0
    c208:	000102d8 	.word	0x000102d8

0000c20c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    c20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c210:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    c212:	2400      	movs	r4, #0
	__asm__ volatile(
    c214:	f04f 0320 	mov.w	r3, #32
    c218:	f3ef 8711 	mrs	r7, BASEPRI
    c21c:	f383 8812 	msr	BASEPRI_MAX, r3
    c220:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c224:	481f      	ldr	r0, [pc, #124]	; (c2a4 <z_abort_timeout+0x98>)
    c226:	f7fd ff5d 	bl	a0e4 <z_spin_lock_valid>
    c22a:	b128      	cbz	r0, c238 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    c22c:	481d      	ldr	r0, [pc, #116]	; (c2a4 <z_abort_timeout+0x98>)
    c22e:	f7fd ff79 	bl	a124 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    c232:	f06f 0815 	mvn.w	r8, #21
	return k;
    c236:	e018      	b.n	c26a <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c238:	4e1b      	ldr	r6, [pc, #108]	; (c2a8 <z_abort_timeout+0x9c>)
    c23a:	238e      	movs	r3, #142	; 0x8e
    c23c:	4632      	mov	r2, r6
    c23e:	491b      	ldr	r1, [pc, #108]	; (c2ac <z_abort_timeout+0xa0>)
    c240:	481b      	ldr	r0, [pc, #108]	; (c2b0 <z_abort_timeout+0xa4>)
    c242:	f002 f9b4 	bl	e5ae <assert_print>
    c246:	4917      	ldr	r1, [pc, #92]	; (c2a4 <z_abort_timeout+0x98>)
    c248:	481a      	ldr	r0, [pc, #104]	; (c2b4 <z_abort_timeout+0xa8>)
    c24a:	f002 f9b0 	bl	e5ae <assert_print>
    c24e:	218e      	movs	r1, #142	; 0x8e
    c250:	4630      	mov	r0, r6
    c252:	f002 f9a5 	bl	e5a0 <assert_post_action>
    c256:	e7e9      	b.n	c22c <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c258:	4812      	ldr	r0, [pc, #72]	; (c2a4 <z_abort_timeout+0x98>)
    c25a:	f7fd ff53 	bl	a104 <z_spin_unlock_valid>
    c25e:	b170      	cbz	r0, c27e <z_abort_timeout+0x72>
	__asm__ volatile(
    c260:	f387 8811 	msr	BASEPRI, r7
    c264:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    c268:	2401      	movs	r4, #1
    c26a:	4626      	mov	r6, r4
    c26c:	b9bc      	cbnz	r4, c29e <z_abort_timeout+0x92>
	return node->next != NULL;
    c26e:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    c270:	2b00      	cmp	r3, #0
    c272:	d0f1      	beq.n	c258 <z_abort_timeout+0x4c>
			remove_timeout(to);
    c274:	4628      	mov	r0, r5
    c276:	f003 f869 	bl	f34c <remove_timeout>
			ret = 0;
    c27a:	46b0      	mov	r8, r6
    c27c:	e7ec      	b.n	c258 <z_abort_timeout+0x4c>
    c27e:	4c0a      	ldr	r4, [pc, #40]	; (c2a8 <z_abort_timeout+0x9c>)
    c280:	23b9      	movs	r3, #185	; 0xb9
    c282:	4622      	mov	r2, r4
    c284:	490c      	ldr	r1, [pc, #48]	; (c2b8 <z_abort_timeout+0xac>)
    c286:	480a      	ldr	r0, [pc, #40]	; (c2b0 <z_abort_timeout+0xa4>)
    c288:	f002 f991 	bl	e5ae <assert_print>
    c28c:	4905      	ldr	r1, [pc, #20]	; (c2a4 <z_abort_timeout+0x98>)
    c28e:	480b      	ldr	r0, [pc, #44]	; (c2bc <z_abort_timeout+0xb0>)
    c290:	f002 f98d 	bl	e5ae <assert_print>
    c294:	21b9      	movs	r1, #185	; 0xb9
    c296:	4620      	mov	r0, r4
    c298:	f002 f982 	bl	e5a0 <assert_post_action>
    c29c:	e7e0      	b.n	c260 <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    c29e:	4640      	mov	r0, r8
    c2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c2a4:	20005370 	.word	0x20005370
    c2a8:	00010290 	.word	0x00010290
    c2ac:	000102f0 	.word	0x000102f0
    c2b0:	000100e4 	.word	0x000100e4
    c2b4:	00010308 	.word	0x00010308
    c2b8:	000102c0 	.word	0x000102c0
    c2bc:	000102d8 	.word	0x000102d8

0000c2c0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    c2c0:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    c2c2:	2500      	movs	r5, #0
	__asm__ volatile(
    c2c4:	f04f 0320 	mov.w	r3, #32
    c2c8:	f3ef 8611 	mrs	r6, BASEPRI
    c2cc:	f383 8812 	msr	BASEPRI_MAX, r3
    c2d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c2d4:	481c      	ldr	r0, [pc, #112]	; (c348 <z_get_next_timeout_expiry+0x88>)
    c2d6:	f7fd ff05 	bl	a0e4 <z_spin_lock_valid>
    c2da:	b128      	cbz	r0, c2e8 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    c2dc:	481a      	ldr	r0, [pc, #104]	; (c348 <z_get_next_timeout_expiry+0x88>)
    c2de:	f7fd ff21 	bl	a124 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    c2e2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    c2e6:	e014      	b.n	c312 <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c2e8:	4c18      	ldr	r4, [pc, #96]	; (c34c <z_get_next_timeout_expiry+0x8c>)
    c2ea:	238e      	movs	r3, #142	; 0x8e
    c2ec:	4622      	mov	r2, r4
    c2ee:	4918      	ldr	r1, [pc, #96]	; (c350 <z_get_next_timeout_expiry+0x90>)
    c2f0:	4818      	ldr	r0, [pc, #96]	; (c354 <z_get_next_timeout_expiry+0x94>)
    c2f2:	f002 f95c 	bl	e5ae <assert_print>
    c2f6:	4914      	ldr	r1, [pc, #80]	; (c348 <z_get_next_timeout_expiry+0x88>)
    c2f8:	4817      	ldr	r0, [pc, #92]	; (c358 <z_get_next_timeout_expiry+0x98>)
    c2fa:	f002 f958 	bl	e5ae <assert_print>
    c2fe:	218e      	movs	r1, #142	; 0x8e
    c300:	4620      	mov	r0, r4
    c302:	f002 f94d 	bl	e5a0 <assert_post_action>
    c306:	e7e9      	b.n	c2dc <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    c308:	f386 8811 	msr	BASEPRI, r6
    c30c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    c310:	2501      	movs	r5, #1
    c312:	b9bd      	cbnz	r5, c344 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    c314:	f7ff fe70 	bl	bff8 <next_timeout>
    c318:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c31a:	480b      	ldr	r0, [pc, #44]	; (c348 <z_get_next_timeout_expiry+0x88>)
    c31c:	f7fd fef2 	bl	a104 <z_spin_unlock_valid>
    c320:	2800      	cmp	r0, #0
    c322:	d1f1      	bne.n	c308 <z_get_next_timeout_expiry+0x48>
    c324:	4d09      	ldr	r5, [pc, #36]	; (c34c <z_get_next_timeout_expiry+0x8c>)
    c326:	23b9      	movs	r3, #185	; 0xb9
    c328:	462a      	mov	r2, r5
    c32a:	490c      	ldr	r1, [pc, #48]	; (c35c <z_get_next_timeout_expiry+0x9c>)
    c32c:	4809      	ldr	r0, [pc, #36]	; (c354 <z_get_next_timeout_expiry+0x94>)
    c32e:	f002 f93e 	bl	e5ae <assert_print>
    c332:	4905      	ldr	r1, [pc, #20]	; (c348 <z_get_next_timeout_expiry+0x88>)
    c334:	480a      	ldr	r0, [pc, #40]	; (c360 <z_get_next_timeout_expiry+0xa0>)
    c336:	f002 f93a 	bl	e5ae <assert_print>
    c33a:	21b9      	movs	r1, #185	; 0xb9
    c33c:	4628      	mov	r0, r5
    c33e:	f002 f92f 	bl	e5a0 <assert_post_action>
    c342:	e7e1      	b.n	c308 <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    c344:	4620      	mov	r0, r4
    c346:	bd70      	pop	{r4, r5, r6, pc}
    c348:	20005370 	.word	0x20005370
    c34c:	00010290 	.word	0x00010290
    c350:	000102f0 	.word	0x000102f0
    c354:	000100e4 	.word	0x000100e4
    c358:	00010308 	.word	0x00010308
    c35c:	000102c0 	.word	0x000102c0
    c360:	000102d8 	.word	0x000102d8

0000c364 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    c364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c368:	4606      	mov	r6, r0
    c36a:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    c36c:	2500      	movs	r5, #0
	__asm__ volatile(
    c36e:	f04f 0320 	mov.w	r3, #32
    c372:	f3ef 8711 	mrs	r7, BASEPRI
    c376:	f383 8812 	msr	BASEPRI_MAX, r3
    c37a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c37e:	4825      	ldr	r0, [pc, #148]	; (c414 <z_set_timeout_expiry+0xb0>)
    c380:	f7fd feb0 	bl	a0e4 <z_spin_lock_valid>
    c384:	b118      	cbz	r0, c38e <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    c386:	4823      	ldr	r0, [pc, #140]	; (c414 <z_set_timeout_expiry+0xb0>)
    c388:	f7fd fecc 	bl	a124 <z_spin_lock_set_owner>
	return k;
    c38c:	e01e      	b.n	c3cc <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c38e:	4c22      	ldr	r4, [pc, #136]	; (c418 <z_set_timeout_expiry+0xb4>)
    c390:	238e      	movs	r3, #142	; 0x8e
    c392:	4622      	mov	r2, r4
    c394:	4921      	ldr	r1, [pc, #132]	; (c41c <z_set_timeout_expiry+0xb8>)
    c396:	4822      	ldr	r0, [pc, #136]	; (c420 <z_set_timeout_expiry+0xbc>)
    c398:	f002 f909 	bl	e5ae <assert_print>
    c39c:	491d      	ldr	r1, [pc, #116]	; (c414 <z_set_timeout_expiry+0xb0>)
    c39e:	4821      	ldr	r0, [pc, #132]	; (c424 <z_set_timeout_expiry+0xc0>)
    c3a0:	f002 f905 	bl	e5ae <assert_print>
    c3a4:	218e      	movs	r1, #142	; 0x8e
    c3a6:	4620      	mov	r0, r4
    c3a8:	f002 f8fa 	bl	e5a0 <assert_post_action>
    c3ac:	e7eb      	b.n	c386 <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    c3ae:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    c3b0:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    c3b4:	2801      	cmp	r0, #1
    c3b6:	dd00      	ble.n	c3ba <z_set_timeout_expiry+0x56>
    c3b8:	b99c      	cbnz	r4, c3e2 <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c3ba:	4816      	ldr	r0, [pc, #88]	; (c414 <z_set_timeout_expiry+0xb0>)
    c3bc:	f7fd fea2 	bl	a104 <z_spin_unlock_valid>
    c3c0:	b1b0      	cbz	r0, c3f0 <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    c3c2:	f387 8811 	msr	BASEPRI, r7
    c3c6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    c3ca:	2501      	movs	r5, #1
    c3cc:	462c      	mov	r4, r5
    c3ce:	b9fd      	cbnz	r5, c410 <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    c3d0:	f7ff fe12 	bl	bff8 <next_timeout>
			      || (ticks <= next_to);
    c3d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    c3d8:	d0e9      	beq.n	c3ae <z_set_timeout_expiry+0x4a>
    c3da:	42b0      	cmp	r0, r6
    c3dc:	dbe8      	blt.n	c3b0 <z_set_timeout_expiry+0x4c>
    c3de:	2401      	movs	r4, #1
    c3e0:	e7e6      	b.n	c3b0 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    c3e2:	4641      	mov	r1, r8
    c3e4:	42b0      	cmp	r0, r6
    c3e6:	bfa8      	it	ge
    c3e8:	4630      	movge	r0, r6
    c3ea:	f7fb fadb 	bl	79a4 <sys_clock_set_timeout>
    c3ee:	e7e4      	b.n	c3ba <z_set_timeout_expiry+0x56>
    c3f0:	4c09      	ldr	r4, [pc, #36]	; (c418 <z_set_timeout_expiry+0xb4>)
    c3f2:	23b9      	movs	r3, #185	; 0xb9
    c3f4:	4622      	mov	r2, r4
    c3f6:	490c      	ldr	r1, [pc, #48]	; (c428 <z_set_timeout_expiry+0xc4>)
    c3f8:	4809      	ldr	r0, [pc, #36]	; (c420 <z_set_timeout_expiry+0xbc>)
    c3fa:	f002 f8d8 	bl	e5ae <assert_print>
    c3fe:	4905      	ldr	r1, [pc, #20]	; (c414 <z_set_timeout_expiry+0xb0>)
    c400:	480a      	ldr	r0, [pc, #40]	; (c42c <z_set_timeout_expiry+0xc8>)
    c402:	f002 f8d4 	bl	e5ae <assert_print>
    c406:	21b9      	movs	r1, #185	; 0xb9
    c408:	4620      	mov	r0, r4
    c40a:	f002 f8c9 	bl	e5a0 <assert_post_action>
    c40e:	e7d8      	b.n	c3c2 <z_set_timeout_expiry+0x5e>
		}
	}
}
    c410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c414:	20005370 	.word	0x20005370
    c418:	00010290 	.word	0x00010290
    c41c:	000102f0 	.word	0x000102f0
    c420:	000100e4 	.word	0x000100e4
    c424:	00010308 	.word	0x00010308
    c428:	000102c0 	.word	0x000102c0
    c42c:	000102d8 	.word	0x000102d8

0000c430 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    c430:	b570      	push	{r4, r5, r6, lr}
    c432:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    c434:	f7fe fdbe 	bl	afb4 <z_time_slice>
	__asm__ volatile(
    c438:	f04f 0320 	mov.w	r3, #32
    c43c:	f3ef 8511 	mrs	r5, BASEPRI
    c440:	f383 8812 	msr	BASEPRI_MAX, r3
    c444:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c448:	4854      	ldr	r0, [pc, #336]	; (c59c <sys_clock_announce+0x16c>)
    c44a:	f7fd fe4b 	bl	a0e4 <z_spin_lock_valid>
    c44e:	b128      	cbz	r0, c45c <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    c450:	4852      	ldr	r0, [pc, #328]	; (c59c <sys_clock_announce+0x16c>)
    c452:	f7fd fe67 	bl	a124 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    c456:	4b52      	ldr	r3, [pc, #328]	; (c5a0 <sys_clock_announce+0x170>)
    c458:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    c45a:	e022      	b.n	c4a2 <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c45c:	4e51      	ldr	r6, [pc, #324]	; (c5a4 <sys_clock_announce+0x174>)
    c45e:	238e      	movs	r3, #142	; 0x8e
    c460:	4632      	mov	r2, r6
    c462:	4951      	ldr	r1, [pc, #324]	; (c5a8 <sys_clock_announce+0x178>)
    c464:	4851      	ldr	r0, [pc, #324]	; (c5ac <sys_clock_announce+0x17c>)
    c466:	f002 f8a2 	bl	e5ae <assert_print>
    c46a:	494c      	ldr	r1, [pc, #304]	; (c59c <sys_clock_announce+0x16c>)
    c46c:	4850      	ldr	r0, [pc, #320]	; (c5b0 <sys_clock_announce+0x180>)
    c46e:	f002 f89e 	bl	e5ae <assert_print>
    c472:	218e      	movs	r1, #142	; 0x8e
    c474:	4630      	mov	r0, r6
    c476:	f002 f893 	bl	e5a0 <assert_post_action>
    c47a:	e7e9      	b.n	c450 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c47c:	4e49      	ldr	r6, [pc, #292]	; (c5a4 <sys_clock_announce+0x174>)
    c47e:	23b9      	movs	r3, #185	; 0xb9
    c480:	4632      	mov	r2, r6
    c482:	494c      	ldr	r1, [pc, #304]	; (c5b4 <sys_clock_announce+0x184>)
    c484:	4849      	ldr	r0, [pc, #292]	; (c5ac <sys_clock_announce+0x17c>)
    c486:	f002 f892 	bl	e5ae <assert_print>
    c48a:	4944      	ldr	r1, [pc, #272]	; (c59c <sys_clock_announce+0x16c>)
    c48c:	484a      	ldr	r0, [pc, #296]	; (c5b8 <sys_clock_announce+0x188>)
    c48e:	f002 f88e 	bl	e5ae <assert_print>
    c492:	21b9      	movs	r1, #185	; 0xb9
    c494:	4630      	mov	r0, r6
    c496:	f002 f883 	bl	e5a0 <assert_post_action>
    c49a:	e027      	b.n	c4ec <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    c49c:	483f      	ldr	r0, [pc, #252]	; (c59c <sys_clock_announce+0x16c>)
    c49e:	f7fd fe41 	bl	a124 <z_spin_lock_set_owner>
    c4a2:	f7ff fd87 	bl	bfb4 <first>
    c4a6:	4604      	mov	r4, r0
    c4a8:	2800      	cmp	r0, #0
    c4aa:	d043      	beq.n	c534 <sys_clock_announce+0x104>
    c4ac:	6902      	ldr	r2, [r0, #16]
    c4ae:	6941      	ldr	r1, [r0, #20]
    c4b0:	4b3b      	ldr	r3, [pc, #236]	; (c5a0 <sys_clock_announce+0x170>)
    c4b2:	681b      	ldr	r3, [r3, #0]
    c4b4:	17d8      	asrs	r0, r3, #31
    c4b6:	4293      	cmp	r3, r2
    c4b8:	eb70 0101 	sbcs.w	r1, r0, r1
    c4bc:	db3a      	blt.n	c534 <sys_clock_announce+0x104>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    c4be:	483f      	ldr	r0, [pc, #252]	; (c5bc <sys_clock_announce+0x18c>)
    c4c0:	6801      	ldr	r1, [r0, #0]
    c4c2:	6846      	ldr	r6, [r0, #4]
    c4c4:	1889      	adds	r1, r1, r2
    c4c6:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    c4ca:	6001      	str	r1, [r0, #0]
    c4cc:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    c4ce:	1a9b      	subs	r3, r3, r2
    c4d0:	4a33      	ldr	r2, [pc, #204]	; (c5a0 <sys_clock_announce+0x170>)
    c4d2:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    c4d4:	2200      	movs	r2, #0
    c4d6:	2300      	movs	r3, #0
    c4d8:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    c4dc:	4620      	mov	r0, r4
    c4de:	f002 ff35 	bl	f34c <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c4e2:	482e      	ldr	r0, [pc, #184]	; (c59c <sys_clock_announce+0x16c>)
    c4e4:	f7fd fe0e 	bl	a104 <z_spin_unlock_valid>
    c4e8:	2800      	cmp	r0, #0
    c4ea:	d0c7      	beq.n	c47c <sys_clock_announce+0x4c>
	__asm__ volatile(
    c4ec:	f385 8811 	msr	BASEPRI, r5
    c4f0:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    c4f4:	68a3      	ldr	r3, [r4, #8]
    c4f6:	4620      	mov	r0, r4
    c4f8:	4798      	blx	r3
	__asm__ volatile(
    c4fa:	f04f 0320 	mov.w	r3, #32
    c4fe:	f3ef 8511 	mrs	r5, BASEPRI
    c502:	f383 8812 	msr	BASEPRI_MAX, r3
    c506:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c50a:	4824      	ldr	r0, [pc, #144]	; (c59c <sys_clock_announce+0x16c>)
    c50c:	f7fd fdea 	bl	a0e4 <z_spin_lock_valid>
    c510:	2800      	cmp	r0, #0
    c512:	d1c3      	bne.n	c49c <sys_clock_announce+0x6c>
    c514:	4c23      	ldr	r4, [pc, #140]	; (c5a4 <sys_clock_announce+0x174>)
    c516:	238e      	movs	r3, #142	; 0x8e
    c518:	4622      	mov	r2, r4
    c51a:	4923      	ldr	r1, [pc, #140]	; (c5a8 <sys_clock_announce+0x178>)
    c51c:	4823      	ldr	r0, [pc, #140]	; (c5ac <sys_clock_announce+0x17c>)
    c51e:	f002 f846 	bl	e5ae <assert_print>
    c522:	491e      	ldr	r1, [pc, #120]	; (c59c <sys_clock_announce+0x16c>)
    c524:	4822      	ldr	r0, [pc, #136]	; (c5b0 <sys_clock_announce+0x180>)
    c526:	f002 f842 	bl	e5ae <assert_print>
    c52a:	218e      	movs	r1, #142	; 0x8e
    c52c:	4620      	mov	r0, r4
    c52e:	f002 f837 	bl	e5a0 <assert_post_action>
    c532:	e7b3      	b.n	c49c <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    c534:	b144      	cbz	r4, c548 <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    c536:	4b1a      	ldr	r3, [pc, #104]	; (c5a0 <sys_clock_announce+0x170>)
    c538:	6819      	ldr	r1, [r3, #0]
    c53a:	6923      	ldr	r3, [r4, #16]
    c53c:	6962      	ldr	r2, [r4, #20]
    c53e:	1a5b      	subs	r3, r3, r1
    c540:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    c544:	6123      	str	r3, [r4, #16]
    c546:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    c548:	4a1c      	ldr	r2, [pc, #112]	; (c5bc <sys_clock_announce+0x18c>)
    c54a:	4e15      	ldr	r6, [pc, #84]	; (c5a0 <sys_clock_announce+0x170>)
    c54c:	6830      	ldr	r0, [r6, #0]
    c54e:	6813      	ldr	r3, [r2, #0]
    c550:	6851      	ldr	r1, [r2, #4]
    c552:	181b      	adds	r3, r3, r0
    c554:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    c558:	6013      	str	r3, [r2, #0]
    c55a:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    c55c:	2400      	movs	r4, #0
    c55e:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    c560:	f7ff fd4a 	bl	bff8 <next_timeout>
    c564:	4621      	mov	r1, r4
    c566:	f7fb fa1d 	bl	79a4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c56a:	480c      	ldr	r0, [pc, #48]	; (c59c <sys_clock_announce+0x16c>)
    c56c:	f7fd fdca 	bl	a104 <z_spin_unlock_valid>
    c570:	b120      	cbz	r0, c57c <sys_clock_announce+0x14c>
	__asm__ volatile(
    c572:	f385 8811 	msr	BASEPRI, r5
    c576:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    c57a:	bd70      	pop	{r4, r5, r6, pc}
    c57c:	4c09      	ldr	r4, [pc, #36]	; (c5a4 <sys_clock_announce+0x174>)
    c57e:	23b9      	movs	r3, #185	; 0xb9
    c580:	4622      	mov	r2, r4
    c582:	490c      	ldr	r1, [pc, #48]	; (c5b4 <sys_clock_announce+0x184>)
    c584:	4809      	ldr	r0, [pc, #36]	; (c5ac <sys_clock_announce+0x17c>)
    c586:	f002 f812 	bl	e5ae <assert_print>
    c58a:	4904      	ldr	r1, [pc, #16]	; (c59c <sys_clock_announce+0x16c>)
    c58c:	480a      	ldr	r0, [pc, #40]	; (c5b8 <sys_clock_announce+0x188>)
    c58e:	f002 f80e 	bl	e5ae <assert_print>
    c592:	21b9      	movs	r1, #185	; 0xb9
    c594:	4620      	mov	r0, r4
    c596:	f002 f803 	bl	e5a0 <assert_post_action>
    c59a:	e7ea      	b.n	c572 <sys_clock_announce+0x142>
    c59c:	20005370 	.word	0x20005370
    c5a0:	2000536c 	.word	0x2000536c
    c5a4:	00010290 	.word	0x00010290
    c5a8:	000102f0 	.word	0x000102f0
    c5ac:	000100e4 	.word	0x000100e4
    c5b0:	00010308 	.word	0x00010308
    c5b4:	000102c0 	.word	0x000102c0
    c5b8:	000102d8 	.word	0x000102d8
    c5bc:	20004778 	.word	0x20004778

0000c5c0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    c5c2:	2600      	movs	r6, #0
	__asm__ volatile(
    c5c4:	f04f 0320 	mov.w	r3, #32
    c5c8:	f3ef 8711 	mrs	r7, BASEPRI
    c5cc:	f383 8812 	msr	BASEPRI_MAX, r3
    c5d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c5d4:	481f      	ldr	r0, [pc, #124]	; (c654 <sys_clock_tick_get+0x94>)
    c5d6:	f7fd fd85 	bl	a0e4 <z_spin_lock_valid>
    c5da:	b128      	cbz	r0, c5e8 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    c5dc:	481d      	ldr	r0, [pc, #116]	; (c654 <sys_clock_tick_get+0x94>)
    c5de:	f7fd fda1 	bl	a124 <z_spin_lock_set_owner>
	uint64_t t = 0U;
    c5e2:	2400      	movs	r4, #0
    c5e4:	4625      	mov	r5, r4
	return k;
    c5e6:	e014      	b.n	c612 <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c5e8:	4c1b      	ldr	r4, [pc, #108]	; (c658 <sys_clock_tick_get+0x98>)
    c5ea:	238e      	movs	r3, #142	; 0x8e
    c5ec:	4622      	mov	r2, r4
    c5ee:	491b      	ldr	r1, [pc, #108]	; (c65c <sys_clock_tick_get+0x9c>)
    c5f0:	481b      	ldr	r0, [pc, #108]	; (c660 <sys_clock_tick_get+0xa0>)
    c5f2:	f001 ffdc 	bl	e5ae <assert_print>
    c5f6:	4917      	ldr	r1, [pc, #92]	; (c654 <sys_clock_tick_get+0x94>)
    c5f8:	481a      	ldr	r0, [pc, #104]	; (c664 <sys_clock_tick_get+0xa4>)
    c5fa:	f001 ffd8 	bl	e5ae <assert_print>
    c5fe:	218e      	movs	r1, #142	; 0x8e
    c600:	4620      	mov	r0, r4
    c602:	f001 ffcd 	bl	e5a0 <assert_post_action>
    c606:	e7e9      	b.n	c5dc <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    c608:	f387 8811 	msr	BASEPRI, r7
    c60c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    c610:	2601      	movs	r6, #1
    c612:	b9e6      	cbnz	r6, c64e <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    c614:	f7fb f9f8 	bl	7a08 <sys_clock_elapsed>
    c618:	4b13      	ldr	r3, [pc, #76]	; (c668 <sys_clock_tick_get+0xa8>)
    c61a:	681c      	ldr	r4, [r3, #0]
    c61c:	685d      	ldr	r5, [r3, #4]
    c61e:	1904      	adds	r4, r0, r4
    c620:	f145 0500 	adc.w	r5, r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c624:	480b      	ldr	r0, [pc, #44]	; (c654 <sys_clock_tick_get+0x94>)
    c626:	f7fd fd6d 	bl	a104 <z_spin_unlock_valid>
    c62a:	2800      	cmp	r0, #0
    c62c:	d1ec      	bne.n	c608 <sys_clock_tick_get+0x48>
    c62e:	4e0a      	ldr	r6, [pc, #40]	; (c658 <sys_clock_tick_get+0x98>)
    c630:	23b9      	movs	r3, #185	; 0xb9
    c632:	4632      	mov	r2, r6
    c634:	490d      	ldr	r1, [pc, #52]	; (c66c <sys_clock_tick_get+0xac>)
    c636:	480a      	ldr	r0, [pc, #40]	; (c660 <sys_clock_tick_get+0xa0>)
    c638:	f001 ffb9 	bl	e5ae <assert_print>
    c63c:	4905      	ldr	r1, [pc, #20]	; (c654 <sys_clock_tick_get+0x94>)
    c63e:	480c      	ldr	r0, [pc, #48]	; (c670 <sys_clock_tick_get+0xb0>)
    c640:	f001 ffb5 	bl	e5ae <assert_print>
    c644:	21b9      	movs	r1, #185	; 0xb9
    c646:	4630      	mov	r0, r6
    c648:	f001 ffaa 	bl	e5a0 <assert_post_action>
    c64c:	e7dc      	b.n	c608 <sys_clock_tick_get+0x48>
	}
	return t;
}
    c64e:	4620      	mov	r0, r4
    c650:	4629      	mov	r1, r5
    c652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c654:	20005370 	.word	0x20005370
    c658:	00010290 	.word	0x00010290
    c65c:	000102f0 	.word	0x000102f0
    c660:	000100e4 	.word	0x000100e4
    c664:	00010308 	.word	0x00010308
    c668:	20004778 	.word	0x20004778
    c66c:	000102c0 	.word	0x000102c0
    c670:	000102d8 	.word	0x000102d8

0000c674 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    c674:	4b01      	ldr	r3, [pc, #4]	; (c67c <k_thread_system_pool_assign+0x8>)
    c676:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    c67a:	4770      	bx	lr
    c67c:	200041e4 	.word	0x200041e4

0000c680 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    c680:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    c682:	4a03      	ldr	r2, [pc, #12]	; (c690 <boot_banner+0x10>)
    c684:	4903      	ldr	r1, [pc, #12]	; (c694 <boot_banner+0x14>)
    c686:	4804      	ldr	r0, [pc, #16]	; (c698 <boot_banner+0x18>)
    c688:	f001 fe88 	bl	e39c <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    c68c:	bd08      	pop	{r3, pc}
    c68e:	bf00      	nop
    c690:	00010ff0 	.word	0x00010ff0
    c694:	00011cdc 	.word	0x00011cdc
    c698:	00011cec 	.word	0x00011cec

0000c69c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    c69c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    c69e:	4c0f      	ldr	r4, [pc, #60]	; (c6dc <statics_init+0x40>)
    c6a0:	e008      	b.n	c6b4 <statics_init+0x18>
    c6a2:	4b0f      	ldr	r3, [pc, #60]	; (c6e0 <statics_init+0x44>)
    c6a4:	429c      	cmp	r4, r3
    c6a6:	d217      	bcs.n	c6d8 <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    c6a8:	68a2      	ldr	r2, [r4, #8]
    c6aa:	6861      	ldr	r1, [r4, #4]
    c6ac:	4620      	mov	r0, r4
    c6ae:	f002 fe72 	bl	f396 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    c6b2:	3418      	adds	r4, #24
    c6b4:	4b0a      	ldr	r3, [pc, #40]	; (c6e0 <statics_init+0x44>)
    c6b6:	429c      	cmp	r4, r3
    c6b8:	d9f3      	bls.n	c6a2 <statics_init+0x6>
    c6ba:	4d0a      	ldr	r5, [pc, #40]	; (c6e4 <statics_init+0x48>)
    c6bc:	2318      	movs	r3, #24
    c6be:	462a      	mov	r2, r5
    c6c0:	4909      	ldr	r1, [pc, #36]	; (c6e8 <statics_init+0x4c>)
    c6c2:	480a      	ldr	r0, [pc, #40]	; (c6ec <statics_init+0x50>)
    c6c4:	f001 ff73 	bl	e5ae <assert_print>
    c6c8:	4809      	ldr	r0, [pc, #36]	; (c6f0 <statics_init+0x54>)
    c6ca:	f001 ff70 	bl	e5ae <assert_print>
    c6ce:	2118      	movs	r1, #24
    c6d0:	4628      	mov	r0, r5
    c6d2:	f001 ff65 	bl	e5a0 <assert_post_action>
    c6d6:	e7e4      	b.n	c6a2 <statics_init+0x6>
		}
	}
	return 0;
}
    c6d8:	2000      	movs	r0, #0
    c6da:	bd38      	pop	{r3, r4, r5, pc}
    c6dc:	200041e4 	.word	0x200041e4
    c6e0:	200041fc 	.word	0x200041fc
    c6e4:	00011d14 	.word	0x00011d14
    c6e8:	00011d38 	.word	0x00011d38
    c6ec:	000100e4 	.word	0x000100e4
    c6f0:	0001185c 	.word	0x0001185c

0000c6f4 <acos>:
    c6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c6f6:	4604      	mov	r4, r0
    c6f8:	460d      	mov	r5, r1
    c6fa:	f7f4 fbad 	bl	e58 <__ieee754_acos>
    c6fe:	4b11      	ldr	r3, [pc, #68]	; (c744 <acos+0x50>)
    c700:	f993 3000 	ldrsb.w	r3, [r3]
    c704:	3301      	adds	r3, #1
    c706:	4606      	mov	r6, r0
    c708:	460f      	mov	r7, r1
    c70a:	d018      	beq.n	c73e <acos+0x4a>
    c70c:	4622      	mov	r2, r4
    c70e:	462b      	mov	r3, r5
    c710:	4620      	mov	r0, r4
    c712:	4629      	mov	r1, r5
    c714:	f7f4 fa04 	bl	b20 <__aeabi_dcmpun>
    c718:	b988      	cbnz	r0, c73e <acos+0x4a>
    c71a:	4620      	mov	r0, r4
    c71c:	4629      	mov	r1, r5
    c71e:	f002 fe42 	bl	f3a6 <fabs>
    c722:	4b09      	ldr	r3, [pc, #36]	; (c748 <acos+0x54>)
    c724:	2200      	movs	r2, #0
    c726:	f7f4 f9f1 	bl	b0c <__aeabi_dcmpgt>
    c72a:	b140      	cbz	r0, c73e <acos+0x4a>
    c72c:	f002 f8b9 	bl	e8a2 <__errno>
    c730:	2321      	movs	r3, #33	; 0x21
    c732:	6003      	str	r3, [r0, #0]
    c734:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c738:	4804      	ldr	r0, [pc, #16]	; (c74c <acos+0x58>)
    c73a:	f000 b98f 	b.w	ca5c <nan>
    c73e:	4630      	mov	r0, r6
    c740:	4639      	mov	r1, r7
    c742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c744:	200041cc 	.word	0x200041cc
    c748:	3ff00000 	.word	0x3ff00000
    c74c:	0001202e 	.word	0x0001202e

0000c750 <pow>:
    c750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c754:	461f      	mov	r7, r3
    c756:	4680      	mov	r8, r0
    c758:	4689      	mov	r9, r1
    c75a:	4616      	mov	r6, r2
    c75c:	f7f4 fdc8 	bl	12f0 <__ieee754_pow>
    c760:	4b4d      	ldr	r3, [pc, #308]	; (c898 <pow+0x148>)
    c762:	f993 3000 	ldrsb.w	r3, [r3]
    c766:	3301      	adds	r3, #1
    c768:	4604      	mov	r4, r0
    c76a:	460d      	mov	r5, r1
    c76c:	d015      	beq.n	c79a <pow+0x4a>
    c76e:	4632      	mov	r2, r6
    c770:	463b      	mov	r3, r7
    c772:	4630      	mov	r0, r6
    c774:	4639      	mov	r1, r7
    c776:	f7f4 f9d3 	bl	b20 <__aeabi_dcmpun>
    c77a:	b970      	cbnz	r0, c79a <pow+0x4a>
    c77c:	4642      	mov	r2, r8
    c77e:	464b      	mov	r3, r9
    c780:	4640      	mov	r0, r8
    c782:	4649      	mov	r1, r9
    c784:	f7f4 f9cc 	bl	b20 <__aeabi_dcmpun>
    c788:	2200      	movs	r2, #0
    c78a:	2300      	movs	r3, #0
    c78c:	b148      	cbz	r0, c7a2 <pow+0x52>
    c78e:	4630      	mov	r0, r6
    c790:	4639      	mov	r1, r7
    c792:	f7f4 f993 	bl	abc <__aeabi_dcmpeq>
    c796:	2800      	cmp	r0, #0
    c798:	d17b      	bne.n	c892 <pow+0x142>
    c79a:	4620      	mov	r0, r4
    c79c:	4629      	mov	r1, r5
    c79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c7a2:	4640      	mov	r0, r8
    c7a4:	4649      	mov	r1, r9
    c7a6:	f7f4 f989 	bl	abc <__aeabi_dcmpeq>
    c7aa:	b1e0      	cbz	r0, c7e6 <pow+0x96>
    c7ac:	2200      	movs	r2, #0
    c7ae:	2300      	movs	r3, #0
    c7b0:	4630      	mov	r0, r6
    c7b2:	4639      	mov	r1, r7
    c7b4:	f7f4 f982 	bl	abc <__aeabi_dcmpeq>
    c7b8:	2800      	cmp	r0, #0
    c7ba:	d16a      	bne.n	c892 <pow+0x142>
    c7bc:	4630      	mov	r0, r6
    c7be:	4639      	mov	r1, r7
    c7c0:	f002 fdf4 	bl	f3ac <finite>
    c7c4:	2800      	cmp	r0, #0
    c7c6:	d0e8      	beq.n	c79a <pow+0x4a>
    c7c8:	2200      	movs	r2, #0
    c7ca:	2300      	movs	r3, #0
    c7cc:	4630      	mov	r0, r6
    c7ce:	4639      	mov	r1, r7
    c7d0:	f7f4 f97e 	bl	ad0 <__aeabi_dcmplt>
    c7d4:	2800      	cmp	r0, #0
    c7d6:	d0e0      	beq.n	c79a <pow+0x4a>
    c7d8:	f002 f863 	bl	e8a2 <__errno>
    c7dc:	2321      	movs	r3, #33	; 0x21
    c7de:	6003      	str	r3, [r0, #0]
    c7e0:	2400      	movs	r4, #0
    c7e2:	4d2e      	ldr	r5, [pc, #184]	; (c89c <pow+0x14c>)
    c7e4:	e7d9      	b.n	c79a <pow+0x4a>
    c7e6:	4620      	mov	r0, r4
    c7e8:	4629      	mov	r1, r5
    c7ea:	f002 fddf 	bl	f3ac <finite>
    c7ee:	bba8      	cbnz	r0, c85c <pow+0x10c>
    c7f0:	4640      	mov	r0, r8
    c7f2:	4649      	mov	r1, r9
    c7f4:	f002 fdda 	bl	f3ac <finite>
    c7f8:	b380      	cbz	r0, c85c <pow+0x10c>
    c7fa:	4630      	mov	r0, r6
    c7fc:	4639      	mov	r1, r7
    c7fe:	f002 fdd5 	bl	f3ac <finite>
    c802:	b358      	cbz	r0, c85c <pow+0x10c>
    c804:	4622      	mov	r2, r4
    c806:	462b      	mov	r3, r5
    c808:	4620      	mov	r0, r4
    c80a:	4629      	mov	r1, r5
    c80c:	f7f4 f988 	bl	b20 <__aeabi_dcmpun>
    c810:	b160      	cbz	r0, c82c <pow+0xdc>
    c812:	f002 f846 	bl	e8a2 <__errno>
    c816:	2321      	movs	r3, #33	; 0x21
    c818:	6003      	str	r3, [r0, #0]
    c81a:	2200      	movs	r2, #0
    c81c:	2300      	movs	r3, #0
    c81e:	4610      	mov	r0, r2
    c820:	4619      	mov	r1, r3
    c822:	f7f3 ffa3 	bl	76c <__aeabi_ddiv>
    c826:	4604      	mov	r4, r0
    c828:	460d      	mov	r5, r1
    c82a:	e7b6      	b.n	c79a <pow+0x4a>
    c82c:	f002 f839 	bl	e8a2 <__errno>
    c830:	2322      	movs	r3, #34	; 0x22
    c832:	6003      	str	r3, [r0, #0]
    c834:	2200      	movs	r2, #0
    c836:	2300      	movs	r3, #0
    c838:	4640      	mov	r0, r8
    c83a:	4649      	mov	r1, r9
    c83c:	f7f4 f948 	bl	ad0 <__aeabi_dcmplt>
    c840:	2400      	movs	r4, #0
    c842:	b148      	cbz	r0, c858 <pow+0x108>
    c844:	4630      	mov	r0, r6
    c846:	4639      	mov	r1, r7
    c848:	f000 f90e 	bl	ca68 <rint>
    c84c:	4632      	mov	r2, r6
    c84e:	463b      	mov	r3, r7
    c850:	f7f4 f934 	bl	abc <__aeabi_dcmpeq>
    c854:	2800      	cmp	r0, #0
    c856:	d0c4      	beq.n	c7e2 <pow+0x92>
    c858:	4d11      	ldr	r5, [pc, #68]	; (c8a0 <pow+0x150>)
    c85a:	e79e      	b.n	c79a <pow+0x4a>
    c85c:	2200      	movs	r2, #0
    c85e:	2300      	movs	r3, #0
    c860:	4620      	mov	r0, r4
    c862:	4629      	mov	r1, r5
    c864:	f7f4 f92a 	bl	abc <__aeabi_dcmpeq>
    c868:	2800      	cmp	r0, #0
    c86a:	d096      	beq.n	c79a <pow+0x4a>
    c86c:	4640      	mov	r0, r8
    c86e:	4649      	mov	r1, r9
    c870:	f002 fd9c 	bl	f3ac <finite>
    c874:	2800      	cmp	r0, #0
    c876:	d090      	beq.n	c79a <pow+0x4a>
    c878:	4630      	mov	r0, r6
    c87a:	4639      	mov	r1, r7
    c87c:	f002 fd96 	bl	f3ac <finite>
    c880:	2800      	cmp	r0, #0
    c882:	d08a      	beq.n	c79a <pow+0x4a>
    c884:	f002 f80d 	bl	e8a2 <__errno>
    c888:	2322      	movs	r3, #34	; 0x22
    c88a:	6003      	str	r3, [r0, #0]
    c88c:	2400      	movs	r4, #0
    c88e:	2500      	movs	r5, #0
    c890:	e783      	b.n	c79a <pow+0x4a>
    c892:	4d04      	ldr	r5, [pc, #16]	; (c8a4 <pow+0x154>)
    c894:	2400      	movs	r4, #0
    c896:	e780      	b.n	c79a <pow+0x4a>
    c898:	200041cc 	.word	0x200041cc
    c89c:	fff00000 	.word	0xfff00000
    c8a0:	7ff00000 	.word	0x7ff00000
    c8a4:	3ff00000 	.word	0x3ff00000

0000c8a8 <sqrt>:
    c8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c8aa:	4606      	mov	r6, r0
    c8ac:	460f      	mov	r7, r1
    c8ae:	f000 f827 	bl	c900 <__ieee754_sqrt>
    c8b2:	4b12      	ldr	r3, [pc, #72]	; (c8fc <sqrt+0x54>)
    c8b4:	f993 3000 	ldrsb.w	r3, [r3]
    c8b8:	3301      	adds	r3, #1
    c8ba:	4604      	mov	r4, r0
    c8bc:	460d      	mov	r5, r1
    c8be:	d019      	beq.n	c8f4 <sqrt+0x4c>
    c8c0:	4632      	mov	r2, r6
    c8c2:	463b      	mov	r3, r7
    c8c4:	4630      	mov	r0, r6
    c8c6:	4639      	mov	r1, r7
    c8c8:	f7f4 f92a 	bl	b20 <__aeabi_dcmpun>
    c8cc:	b990      	cbnz	r0, c8f4 <sqrt+0x4c>
    c8ce:	2200      	movs	r2, #0
    c8d0:	2300      	movs	r3, #0
    c8d2:	4630      	mov	r0, r6
    c8d4:	4639      	mov	r1, r7
    c8d6:	f7f4 f8fb 	bl	ad0 <__aeabi_dcmplt>
    c8da:	b158      	cbz	r0, c8f4 <sqrt+0x4c>
    c8dc:	f001 ffe1 	bl	e8a2 <__errno>
    c8e0:	2321      	movs	r3, #33	; 0x21
    c8e2:	6003      	str	r3, [r0, #0]
    c8e4:	2200      	movs	r2, #0
    c8e6:	2300      	movs	r3, #0
    c8e8:	4610      	mov	r0, r2
    c8ea:	4619      	mov	r1, r3
    c8ec:	f7f3 ff3e 	bl	76c <__aeabi_ddiv>
    c8f0:	4604      	mov	r4, r0
    c8f2:	460d      	mov	r5, r1
    c8f4:	4620      	mov	r0, r4
    c8f6:	4629      	mov	r1, r5
    c8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c8fa:	bf00      	nop
    c8fc:	200041cc 	.word	0x200041cc

0000c900 <__ieee754_sqrt>:
    c900:	f8df c154 	ldr.w	ip, [pc, #340]	; ca58 <__ieee754_sqrt+0x158>
    c904:	ea3c 0c01 	bics.w	ip, ip, r1
    c908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c90c:	460a      	mov	r2, r1
    c90e:	4606      	mov	r6, r0
    c910:	460d      	mov	r5, r1
    c912:	460c      	mov	r4, r1
    c914:	4607      	mov	r7, r0
    c916:	4603      	mov	r3, r0
    c918:	d10f      	bne.n	c93a <__ieee754_sqrt+0x3a>
    c91a:	4602      	mov	r2, r0
    c91c:	460b      	mov	r3, r1
    c91e:	f7f3 fdfb 	bl	518 <__aeabi_dmul>
    c922:	4602      	mov	r2, r0
    c924:	460b      	mov	r3, r1
    c926:	4630      	mov	r0, r6
    c928:	4629      	mov	r1, r5
    c92a:	f7f3 fc3f 	bl	1ac <__adddf3>
    c92e:	4606      	mov	r6, r0
    c930:	460d      	mov	r5, r1
    c932:	4630      	mov	r0, r6
    c934:	4629      	mov	r1, r5
    c936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c93a:	2900      	cmp	r1, #0
    c93c:	dc0e      	bgt.n	c95c <__ieee754_sqrt+0x5c>
    c93e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
    c942:	ea5c 0707 	orrs.w	r7, ip, r7
    c946:	d0f4      	beq.n	c932 <__ieee754_sqrt+0x32>
    c948:	b141      	cbz	r1, c95c <__ieee754_sqrt+0x5c>
    c94a:	4602      	mov	r2, r0
    c94c:	460b      	mov	r3, r1
    c94e:	f7f3 fc2b 	bl	1a8 <__aeabi_dsub>
    c952:	4602      	mov	r2, r0
    c954:	460b      	mov	r3, r1
    c956:	f7f3 ff09 	bl	76c <__aeabi_ddiv>
    c95a:	e7e8      	b.n	c92e <__ieee754_sqrt+0x2e>
    c95c:	1521      	asrs	r1, r4, #20
    c95e:	d074      	beq.n	ca4a <__ieee754_sqrt+0x14a>
    c960:	07cc      	lsls	r4, r1, #31
    c962:	f3c2 0213 	ubfx	r2, r2, #0, #20
    c966:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
    c96a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    c96e:	bf5e      	ittt	pl
    c970:	0fd9      	lsrpl	r1, r3, #31
    c972:	005b      	lslpl	r3, r3, #1
    c974:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
    c978:	2400      	movs	r4, #0
    c97a:	0fd9      	lsrs	r1, r3, #31
    c97c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    c980:	107f      	asrs	r7, r7, #1
    c982:	005b      	lsls	r3, r3, #1
    c984:	2516      	movs	r5, #22
    c986:	4620      	mov	r0, r4
    c988:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    c98c:	1846      	adds	r6, r0, r1
    c98e:	4296      	cmp	r6, r2
    c990:	bfde      	ittt	le
    c992:	1b92      	suble	r2, r2, r6
    c994:	1870      	addle	r0, r6, r1
    c996:	1864      	addle	r4, r4, r1
    c998:	0052      	lsls	r2, r2, #1
    c99a:	3d01      	subs	r5, #1
    c99c:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
    c9a0:	ea4f 0151 	mov.w	r1, r1, lsr #1
    c9a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c9a8:	d1f0      	bne.n	c98c <__ieee754_sqrt+0x8c>
    c9aa:	4629      	mov	r1, r5
    c9ac:	f04f 0e20 	mov.w	lr, #32
    c9b0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    c9b4:	4282      	cmp	r2, r0
    c9b6:	eb06 0c05 	add.w	ip, r6, r5
    c9ba:	dc02      	bgt.n	c9c2 <__ieee754_sqrt+0xc2>
    c9bc:	d113      	bne.n	c9e6 <__ieee754_sqrt+0xe6>
    c9be:	459c      	cmp	ip, r3
    c9c0:	d811      	bhi.n	c9e6 <__ieee754_sqrt+0xe6>
    c9c2:	f1bc 0f00 	cmp.w	ip, #0
    c9c6:	eb0c 0506 	add.w	r5, ip, r6
    c9ca:	da43      	bge.n	ca54 <__ieee754_sqrt+0x154>
    c9cc:	2d00      	cmp	r5, #0
    c9ce:	db41      	blt.n	ca54 <__ieee754_sqrt+0x154>
    c9d0:	f100 0801 	add.w	r8, r0, #1
    c9d4:	1a12      	subs	r2, r2, r0
    c9d6:	459c      	cmp	ip, r3
    c9d8:	bf88      	it	hi
    c9da:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
    c9de:	eba3 030c 	sub.w	r3, r3, ip
    c9e2:	4431      	add	r1, r6
    c9e4:	4640      	mov	r0, r8
    c9e6:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
    c9ea:	f1be 0e01 	subs.w	lr, lr, #1
    c9ee:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
    c9f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    c9f6:	ea4f 0656 	mov.w	r6, r6, lsr #1
    c9fa:	d1db      	bne.n	c9b4 <__ieee754_sqrt+0xb4>
    c9fc:	4313      	orrs	r3, r2
    c9fe:	d006      	beq.n	ca0e <__ieee754_sqrt+0x10e>
    ca00:	1c48      	adds	r0, r1, #1
    ca02:	bf13      	iteet	ne
    ca04:	3101      	addne	r1, #1
    ca06:	3401      	addeq	r4, #1
    ca08:	4671      	moveq	r1, lr
    ca0a:	f021 0101 	bicne.w	r1, r1, #1
    ca0e:	1063      	asrs	r3, r4, #1
    ca10:	0849      	lsrs	r1, r1, #1
    ca12:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    ca16:	07e2      	lsls	r2, r4, #31
    ca18:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    ca1c:	bf48      	it	mi
    ca1e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
    ca22:	eb03 5507 	add.w	r5, r3, r7, lsl #20
    ca26:	460e      	mov	r6, r1
    ca28:	e783      	b.n	c932 <__ieee754_sqrt+0x32>
    ca2a:	0ada      	lsrs	r2, r3, #11
    ca2c:	3815      	subs	r0, #21
    ca2e:	055b      	lsls	r3, r3, #21
    ca30:	2a00      	cmp	r2, #0
    ca32:	d0fa      	beq.n	ca2a <__ieee754_sqrt+0x12a>
    ca34:	02d5      	lsls	r5, r2, #11
    ca36:	d50a      	bpl.n	ca4e <__ieee754_sqrt+0x14e>
    ca38:	f1c1 0420 	rsb	r4, r1, #32
    ca3c:	fa23 f404 	lsr.w	r4, r3, r4
    ca40:	1e4d      	subs	r5, r1, #1
    ca42:	408b      	lsls	r3, r1
    ca44:	4322      	orrs	r2, r4
    ca46:	1b41      	subs	r1, r0, r5
    ca48:	e78a      	b.n	c960 <__ieee754_sqrt+0x60>
    ca4a:	4608      	mov	r0, r1
    ca4c:	e7f0      	b.n	ca30 <__ieee754_sqrt+0x130>
    ca4e:	0052      	lsls	r2, r2, #1
    ca50:	3101      	adds	r1, #1
    ca52:	e7ef      	b.n	ca34 <__ieee754_sqrt+0x134>
    ca54:	4680      	mov	r8, r0
    ca56:	e7bd      	b.n	c9d4 <__ieee754_sqrt+0xd4>
    ca58:	7ff00000 	.word	0x7ff00000

0000ca5c <nan>:
    ca5c:	4901      	ldr	r1, [pc, #4]	; (ca64 <nan+0x8>)
    ca5e:	2000      	movs	r0, #0
    ca60:	4770      	bx	lr
    ca62:	bf00      	nop
    ca64:	7ff80000 	.word	0x7ff80000

0000ca68 <rint>:
    ca68:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
    ca6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ca6e:	f2ac 36ff 	subw	r6, ip, #1023	; 0x3ff
    ca72:	2e13      	cmp	r6, #19
    ca74:	4602      	mov	r2, r0
    ca76:	460b      	mov	r3, r1
    ca78:	460c      	mov	r4, r1
    ca7a:	4605      	mov	r5, r0
    ca7c:	ea4f 77d1 	mov.w	r7, r1, lsr #31
    ca80:	dc5a      	bgt.n	cb38 <rint+0xd0>
    ca82:	2e00      	cmp	r6, #0
    ca84:	da2c      	bge.n	cae0 <rint+0x78>
    ca86:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    ca8a:	4301      	orrs	r1, r0
    ca8c:	d024      	beq.n	cad8 <rint+0x70>
    ca8e:	f3c3 0113 	ubfx	r1, r3, #0, #20
    ca92:	4301      	orrs	r1, r0
    ca94:	424d      	negs	r5, r1
    ca96:	430d      	orrs	r5, r1
    ca98:	0b2d      	lsrs	r5, r5, #12
    ca9a:	0c59      	lsrs	r1, r3, #17
    ca9c:	0449      	lsls	r1, r1, #17
    ca9e:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    caa2:	ea45 0301 	orr.w	r3, r5, r1
    caa6:	4934      	ldr	r1, [pc, #208]	; (cb78 <rint+0x110>)
    caa8:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
    caac:	e9d7 6700 	ldrd	r6, r7, [r7]
    cab0:	4639      	mov	r1, r7
    cab2:	4630      	mov	r0, r6
    cab4:	f7f3 fb7a 	bl	1ac <__adddf3>
    cab8:	e9cd 0100 	strd	r0, r1, [sp]
    cabc:	463b      	mov	r3, r7
    cabe:	4632      	mov	r2, r6
    cac0:	e9dd 0100 	ldrd	r0, r1, [sp]
    cac4:	f7f3 fb70 	bl	1a8 <__aeabi_dsub>
    cac8:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
    cacc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    cad0:	ea43 0704 	orr.w	r7, r3, r4
    cad4:	4602      	mov	r2, r0
    cad6:	463b      	mov	r3, r7
    cad8:	4610      	mov	r0, r2
    cada:	4619      	mov	r1, r3
    cadc:	b003      	add	sp, #12
    cade:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cae0:	4926      	ldr	r1, [pc, #152]	; (cb7c <rint+0x114>)
    cae2:	4131      	asrs	r1, r6
    cae4:	ea03 0001 	and.w	r0, r3, r1
    cae8:	4310      	orrs	r0, r2
    caea:	d0f5      	beq.n	cad8 <rint+0x70>
    caec:	084b      	lsrs	r3, r1, #1
    caee:	ea04 0151 	and.w	r1, r4, r1, lsr #1
    caf2:	430d      	orrs	r5, r1
    caf4:	d00c      	beq.n	cb10 <rint+0xa8>
    caf6:	ea24 0303 	bic.w	r3, r4, r3
    cafa:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    cafe:	2e13      	cmp	r6, #19
    cb00:	fa44 f606 	asr.w	r6, r4, r6
    cb04:	bf0c      	ite	eq
    cb06:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    cb0a:	2500      	movne	r5, #0
    cb0c:	ea43 0406 	orr.w	r4, r3, r6
    cb10:	4919      	ldr	r1, [pc, #100]	; (cb78 <rint+0x110>)
    cb12:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
    cb16:	4623      	mov	r3, r4
    cb18:	462a      	mov	r2, r5
    cb1a:	e9d7 4500 	ldrd	r4, r5, [r7]
    cb1e:	4620      	mov	r0, r4
    cb20:	4629      	mov	r1, r5
    cb22:	f7f3 fb43 	bl	1ac <__adddf3>
    cb26:	e9cd 0100 	strd	r0, r1, [sp]
    cb2a:	e9dd 0100 	ldrd	r0, r1, [sp]
    cb2e:	4622      	mov	r2, r4
    cb30:	462b      	mov	r3, r5
    cb32:	f7f3 fb39 	bl	1a8 <__aeabi_dsub>
    cb36:	e006      	b.n	cb46 <rint+0xde>
    cb38:	2e33      	cmp	r6, #51	; 0x33
    cb3a:	dd07      	ble.n	cb4c <rint+0xe4>
    cb3c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    cb40:	d1ca      	bne.n	cad8 <rint+0x70>
    cb42:	f7f3 fb33 	bl	1ac <__adddf3>
    cb46:	4602      	mov	r2, r0
    cb48:	460b      	mov	r3, r1
    cb4a:	e7c5      	b.n	cad8 <rint+0x70>
    cb4c:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
    cb50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    cb54:	fa21 f10c 	lsr.w	r1, r1, ip
    cb58:	4208      	tst	r0, r1
    cb5a:	d0bd      	beq.n	cad8 <rint+0x70>
    cb5c:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
    cb60:	ea4f 0351 	mov.w	r3, r1, lsr #1
    cb64:	bf1f      	itttt	ne
    cb66:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
    cb6a:	ea20 0303 	bicne.w	r3, r0, r3
    cb6e:	fa45 fc0c 	asrne.w	ip, r5, ip
    cb72:	ea43 050c 	orrne.w	r5, r3, ip
    cb76:	e7cb      	b.n	cb10 <rint+0xa8>
    cb78:	0000fda8 	.word	0x0000fda8
    cb7c:	000fffff 	.word	0x000fffff

0000cb80 <gcvt>:
    cb80:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb82:	461c      	mov	r4, r3
    cb84:	b085      	sub	sp, #20
    cb86:	2300      	movs	r3, #0
    cb88:	4615      	mov	r5, r2
    cb8a:	2200      	movs	r2, #0
    cb8c:	4606      	mov	r6, r0
    cb8e:	460f      	mov	r7, r1
    cb90:	f7f3 ff9e 	bl	ad0 <__aeabi_dcmplt>
    cb94:	4623      	mov	r3, r4
    cb96:	b118      	cbz	r0, cba0 <gcvt+0x20>
    cb98:	222d      	movs	r2, #45	; 0x2d
    cb9a:	f803 2b01 	strb.w	r2, [r3], #1
    cb9e:	3d01      	subs	r5, #1
    cba0:	2267      	movs	r2, #103	; 0x67
    cba2:	2100      	movs	r1, #0
    cba4:	e9cd 2102 	strd	r2, r1, [sp, #8]
    cba8:	e9cd 5300 	strd	r5, r3, [sp]
    cbac:	4905      	ldr	r1, [pc, #20]	; (cbc4 <gcvt+0x44>)
    cbae:	4632      	mov	r2, r6
    cbb0:	6808      	ldr	r0, [r1, #0]
    cbb2:	463b      	mov	r3, r7
    cbb4:	f7f5 f934 	bl	1e20 <_gcvt>
    cbb8:	2800      	cmp	r0, #0
    cbba:	bf14      	ite	ne
    cbbc:	4620      	movne	r0, r4
    cbbe:	2000      	moveq	r0, #0
    cbc0:	b005      	add	sp, #20
    cbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cbc4:	20004108 	.word	0x20004108

0000cbc8 <malloc>:
    cbc8:	4b02      	ldr	r3, [pc, #8]	; (cbd4 <malloc+0xc>)
    cbca:	4601      	mov	r1, r0
    cbcc:	6818      	ldr	r0, [r3, #0]
    cbce:	f000 b84d 	b.w	cc6c <_malloc_r>
    cbd2:	bf00      	nop
    cbd4:	20004108 	.word	0x20004108

0000cbd8 <_free_r>:
    cbd8:	b538      	push	{r3, r4, r5, lr}
    cbda:	4605      	mov	r5, r0
    cbdc:	2900      	cmp	r1, #0
    cbde:	d041      	beq.n	cc64 <_free_r+0x8c>
    cbe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
    cbe4:	1f0c      	subs	r4, r1, #4
    cbe6:	2b00      	cmp	r3, #0
    cbe8:	bfb8      	it	lt
    cbea:	18e4      	addlt	r4, r4, r3
    cbec:	f000 f8ea 	bl	cdc4 <__malloc_lock>
    cbf0:	4a1d      	ldr	r2, [pc, #116]	; (cc68 <_free_r+0x90>)
    cbf2:	6813      	ldr	r3, [r2, #0]
    cbf4:	b933      	cbnz	r3, cc04 <_free_r+0x2c>
    cbf6:	6063      	str	r3, [r4, #4]
    cbf8:	6014      	str	r4, [r2, #0]
    cbfa:	4628      	mov	r0, r5
    cbfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cc00:	f000 b8e6 	b.w	cdd0 <__malloc_unlock>
    cc04:	42a3      	cmp	r3, r4
    cc06:	d908      	bls.n	cc1a <_free_r+0x42>
    cc08:	6820      	ldr	r0, [r4, #0]
    cc0a:	1821      	adds	r1, r4, r0
    cc0c:	428b      	cmp	r3, r1
    cc0e:	bf01      	itttt	eq
    cc10:	6819      	ldreq	r1, [r3, #0]
    cc12:	685b      	ldreq	r3, [r3, #4]
    cc14:	1809      	addeq	r1, r1, r0
    cc16:	6021      	streq	r1, [r4, #0]
    cc18:	e7ed      	b.n	cbf6 <_free_r+0x1e>
    cc1a:	461a      	mov	r2, r3
    cc1c:	685b      	ldr	r3, [r3, #4]
    cc1e:	b10b      	cbz	r3, cc24 <_free_r+0x4c>
    cc20:	42a3      	cmp	r3, r4
    cc22:	d9fa      	bls.n	cc1a <_free_r+0x42>
    cc24:	6811      	ldr	r1, [r2, #0]
    cc26:	1850      	adds	r0, r2, r1
    cc28:	42a0      	cmp	r0, r4
    cc2a:	d10b      	bne.n	cc44 <_free_r+0x6c>
    cc2c:	6820      	ldr	r0, [r4, #0]
    cc2e:	4401      	add	r1, r0
    cc30:	1850      	adds	r0, r2, r1
    cc32:	4283      	cmp	r3, r0
    cc34:	6011      	str	r1, [r2, #0]
    cc36:	d1e0      	bne.n	cbfa <_free_r+0x22>
    cc38:	6818      	ldr	r0, [r3, #0]
    cc3a:	685b      	ldr	r3, [r3, #4]
    cc3c:	6053      	str	r3, [r2, #4]
    cc3e:	4401      	add	r1, r0
    cc40:	6011      	str	r1, [r2, #0]
    cc42:	e7da      	b.n	cbfa <_free_r+0x22>
    cc44:	d902      	bls.n	cc4c <_free_r+0x74>
    cc46:	230c      	movs	r3, #12
    cc48:	602b      	str	r3, [r5, #0]
    cc4a:	e7d6      	b.n	cbfa <_free_r+0x22>
    cc4c:	6820      	ldr	r0, [r4, #0]
    cc4e:	1821      	adds	r1, r4, r0
    cc50:	428b      	cmp	r3, r1
    cc52:	bf04      	itt	eq
    cc54:	6819      	ldreq	r1, [r3, #0]
    cc56:	685b      	ldreq	r3, [r3, #4]
    cc58:	6063      	str	r3, [r4, #4]
    cc5a:	bf04      	itt	eq
    cc5c:	1809      	addeq	r1, r1, r0
    cc5e:	6021      	streq	r1, [r4, #0]
    cc60:	6054      	str	r4, [r2, #4]
    cc62:	e7ca      	b.n	cbfa <_free_r+0x22>
    cc64:	bd38      	pop	{r3, r4, r5, pc}
    cc66:	bf00      	nop
    cc68:	20005374 	.word	0x20005374

0000cc6c <_malloc_r>:
    cc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cc6e:	1ccd      	adds	r5, r1, #3
    cc70:	f025 0503 	bic.w	r5, r5, #3
    cc74:	3508      	adds	r5, #8
    cc76:	2d0c      	cmp	r5, #12
    cc78:	bf38      	it	cc
    cc7a:	250c      	movcc	r5, #12
    cc7c:	2d00      	cmp	r5, #0
    cc7e:	4606      	mov	r6, r0
    cc80:	db01      	blt.n	cc86 <_malloc_r+0x1a>
    cc82:	42a9      	cmp	r1, r5
    cc84:	d903      	bls.n	cc8e <_malloc_r+0x22>
    cc86:	230c      	movs	r3, #12
    cc88:	6033      	str	r3, [r6, #0]
    cc8a:	2000      	movs	r0, #0
    cc8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc8e:	f000 f899 	bl	cdc4 <__malloc_lock>
    cc92:	4921      	ldr	r1, [pc, #132]	; (cd18 <_malloc_r+0xac>)
    cc94:	680a      	ldr	r2, [r1, #0]
    cc96:	4614      	mov	r4, r2
    cc98:	b99c      	cbnz	r4, ccc2 <_malloc_r+0x56>
    cc9a:	4f20      	ldr	r7, [pc, #128]	; (cd1c <_malloc_r+0xb0>)
    cc9c:	683b      	ldr	r3, [r7, #0]
    cc9e:	b923      	cbnz	r3, ccaa <_malloc_r+0x3e>
    cca0:	4621      	mov	r1, r4
    cca2:	4630      	mov	r0, r6
    cca4:	f000 f83c 	bl	cd20 <_sbrk_r>
    cca8:	6038      	str	r0, [r7, #0]
    ccaa:	4629      	mov	r1, r5
    ccac:	4630      	mov	r0, r6
    ccae:	f000 f837 	bl	cd20 <_sbrk_r>
    ccb2:	1c43      	adds	r3, r0, #1
    ccb4:	d123      	bne.n	ccfe <_malloc_r+0x92>
    ccb6:	230c      	movs	r3, #12
    ccb8:	6033      	str	r3, [r6, #0]
    ccba:	4630      	mov	r0, r6
    ccbc:	f000 f888 	bl	cdd0 <__malloc_unlock>
    ccc0:	e7e3      	b.n	cc8a <_malloc_r+0x1e>
    ccc2:	6823      	ldr	r3, [r4, #0]
    ccc4:	1b5b      	subs	r3, r3, r5
    ccc6:	d417      	bmi.n	ccf8 <_malloc_r+0x8c>
    ccc8:	2b0b      	cmp	r3, #11
    ccca:	d903      	bls.n	ccd4 <_malloc_r+0x68>
    cccc:	6023      	str	r3, [r4, #0]
    ccce:	441c      	add	r4, r3
    ccd0:	6025      	str	r5, [r4, #0]
    ccd2:	e004      	b.n	ccde <_malloc_r+0x72>
    ccd4:	6863      	ldr	r3, [r4, #4]
    ccd6:	42a2      	cmp	r2, r4
    ccd8:	bf0c      	ite	eq
    ccda:	600b      	streq	r3, [r1, #0]
    ccdc:	6053      	strne	r3, [r2, #4]
    ccde:	4630      	mov	r0, r6
    cce0:	f000 f876 	bl	cdd0 <__malloc_unlock>
    cce4:	f104 000b 	add.w	r0, r4, #11
    cce8:	1d23      	adds	r3, r4, #4
    ccea:	f020 0007 	bic.w	r0, r0, #7
    ccee:	1ac2      	subs	r2, r0, r3
    ccf0:	d0cc      	beq.n	cc8c <_malloc_r+0x20>
    ccf2:	1a1b      	subs	r3, r3, r0
    ccf4:	50a3      	str	r3, [r4, r2]
    ccf6:	e7c9      	b.n	cc8c <_malloc_r+0x20>
    ccf8:	4622      	mov	r2, r4
    ccfa:	6864      	ldr	r4, [r4, #4]
    ccfc:	e7cc      	b.n	cc98 <_malloc_r+0x2c>
    ccfe:	1cc4      	adds	r4, r0, #3
    cd00:	f024 0403 	bic.w	r4, r4, #3
    cd04:	42a0      	cmp	r0, r4
    cd06:	d0e3      	beq.n	ccd0 <_malloc_r+0x64>
    cd08:	1a21      	subs	r1, r4, r0
    cd0a:	4630      	mov	r0, r6
    cd0c:	f000 f808 	bl	cd20 <_sbrk_r>
    cd10:	3001      	adds	r0, #1
    cd12:	d1dd      	bne.n	ccd0 <_malloc_r+0x64>
    cd14:	e7cf      	b.n	ccb6 <_malloc_r+0x4a>
    cd16:	bf00      	nop
    cd18:	20005374 	.word	0x20005374
    cd1c:	20005378 	.word	0x20005378

0000cd20 <_sbrk_r>:
    cd20:	b538      	push	{r3, r4, r5, lr}
    cd22:	4d06      	ldr	r5, [pc, #24]	; (cd3c <_sbrk_r+0x1c>)
    cd24:	2300      	movs	r3, #0
    cd26:	4604      	mov	r4, r0
    cd28:	4608      	mov	r0, r1
    cd2a:	602b      	str	r3, [r5, #0]
    cd2c:	f7f9 fde0 	bl	68f0 <_sbrk>
    cd30:	1c43      	adds	r3, r0, #1
    cd32:	d102      	bne.n	cd3a <_sbrk_r+0x1a>
    cd34:	682b      	ldr	r3, [r5, #0]
    cd36:	b103      	cbz	r3, cd3a <_sbrk_r+0x1a>
    cd38:	6023      	str	r3, [r4, #0]
    cd3a:	bd38      	pop	{r3, r4, r5, pc}
    cd3c:	2000537c 	.word	0x2000537c

0000cd40 <__utoa>:
    cd40:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd42:	4c1f      	ldr	r4, [pc, #124]	; (cdc0 <__utoa+0x80>)
    cd44:	b08b      	sub	sp, #44	; 0x2c
    cd46:	4605      	mov	r5, r0
    cd48:	460b      	mov	r3, r1
    cd4a:	466e      	mov	r6, sp
    cd4c:	f104 0c20 	add.w	ip, r4, #32
    cd50:	6820      	ldr	r0, [r4, #0]
    cd52:	6861      	ldr	r1, [r4, #4]
    cd54:	4637      	mov	r7, r6
    cd56:	c703      	stmia	r7!, {r0, r1}
    cd58:	3408      	adds	r4, #8
    cd5a:	4564      	cmp	r4, ip
    cd5c:	463e      	mov	r6, r7
    cd5e:	d1f7      	bne.n	cd50 <__utoa+0x10>
    cd60:	7921      	ldrb	r1, [r4, #4]
    cd62:	7139      	strb	r1, [r7, #4]
    cd64:	1e91      	subs	r1, r2, #2
    cd66:	6820      	ldr	r0, [r4, #0]
    cd68:	6038      	str	r0, [r7, #0]
    cd6a:	2922      	cmp	r1, #34	; 0x22
    cd6c:	f04f 0100 	mov.w	r1, #0
    cd70:	d904      	bls.n	cd7c <__utoa+0x3c>
    cd72:	7019      	strb	r1, [r3, #0]
    cd74:	460b      	mov	r3, r1
    cd76:	4618      	mov	r0, r3
    cd78:	b00b      	add	sp, #44	; 0x2c
    cd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd7c:	1e58      	subs	r0, r3, #1
    cd7e:	4684      	mov	ip, r0
    cd80:	fbb5 f7f2 	udiv	r7, r5, r2
    cd84:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
    cd88:	fb02 5617 	mls	r6, r2, r7, r5
    cd8c:	4476      	add	r6, lr
    cd8e:	460c      	mov	r4, r1
    cd90:	f816 6c28 	ldrb.w	r6, [r6, #-40]
    cd94:	f80c 6f01 	strb.w	r6, [ip, #1]!
    cd98:	462e      	mov	r6, r5
    cd9a:	42b2      	cmp	r2, r6
    cd9c:	f101 0101 	add.w	r1, r1, #1
    cda0:	463d      	mov	r5, r7
    cda2:	d9ed      	bls.n	cd80 <__utoa+0x40>
    cda4:	2200      	movs	r2, #0
    cda6:	545a      	strb	r2, [r3, r1]
    cda8:	1919      	adds	r1, r3, r4
    cdaa:	1aa5      	subs	r5, r4, r2
    cdac:	42aa      	cmp	r2, r5
    cdae:	dae2      	bge.n	cd76 <__utoa+0x36>
    cdb0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
    cdb4:	780e      	ldrb	r6, [r1, #0]
    cdb6:	7006      	strb	r6, [r0, #0]
    cdb8:	3201      	adds	r2, #1
    cdba:	f801 5901 	strb.w	r5, [r1], #-1
    cdbe:	e7f4      	b.n	cdaa <__utoa+0x6a>
    cdc0:	00011f49 	.word	0x00011f49

0000cdc4 <__malloc_lock>:
    cdc4:	4801      	ldr	r0, [pc, #4]	; (cdcc <__malloc_lock+0x8>)
    cdc6:	f7f9 bddf 	b.w	6988 <__retarget_lock_acquire_recursive>
    cdca:	bf00      	nop
    cdcc:	200041fc 	.word	0x200041fc

0000cdd0 <__malloc_unlock>:
    cdd0:	4801      	ldr	r0, [pc, #4]	; (cdd8 <__malloc_unlock+0x8>)
    cdd2:	f7f9 bdf9 	b.w	69c8 <__retarget_lock_release_recursive>
    cdd6:	bf00      	nop
    cdd8:	200041fc 	.word	0x200041fc

0000cddc <_Balloc>:
    cddc:	b570      	push	{r4, r5, r6, lr}
    cdde:	6a46      	ldr	r6, [r0, #36]	; 0x24
    cde0:	4604      	mov	r4, r0
    cde2:	460d      	mov	r5, r1
    cde4:	b976      	cbnz	r6, ce04 <_Balloc+0x28>
    cde6:	2010      	movs	r0, #16
    cde8:	f7ff feee 	bl	cbc8 <malloc>
    cdec:	4602      	mov	r2, r0
    cdee:	6260      	str	r0, [r4, #36]	; 0x24
    cdf0:	b920      	cbnz	r0, cdfc <_Balloc+0x20>
    cdf2:	4b18      	ldr	r3, [pc, #96]	; (ce54 <_Balloc+0x78>)
    cdf4:	4818      	ldr	r0, [pc, #96]	; (ce58 <_Balloc+0x7c>)
    cdf6:	2166      	movs	r1, #102	; 0x66
    cdf8:	f000 fb20 	bl	d43c <__assert_func>
    cdfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
    ce00:	6006      	str	r6, [r0, #0]
    ce02:	60c6      	str	r6, [r0, #12]
    ce04:	6a66      	ldr	r6, [r4, #36]	; 0x24
    ce06:	68f3      	ldr	r3, [r6, #12]
    ce08:	b183      	cbz	r3, ce2c <_Balloc+0x50>
    ce0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ce0c:	68db      	ldr	r3, [r3, #12]
    ce0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    ce12:	b9b8      	cbnz	r0, ce44 <_Balloc+0x68>
    ce14:	2101      	movs	r1, #1
    ce16:	fa01 f605 	lsl.w	r6, r1, r5
    ce1a:	1d72      	adds	r2, r6, #5
    ce1c:	0092      	lsls	r2, r2, #2
    ce1e:	4620      	mov	r0, r4
    ce20:	f002 fc01 	bl	f626 <_calloc_r>
    ce24:	b160      	cbz	r0, ce40 <_Balloc+0x64>
    ce26:	e9c0 5601 	strd	r5, r6, [r0, #4]
    ce2a:	e00e      	b.n	ce4a <_Balloc+0x6e>
    ce2c:	2221      	movs	r2, #33	; 0x21
    ce2e:	2104      	movs	r1, #4
    ce30:	4620      	mov	r0, r4
    ce32:	f002 fbf8 	bl	f626 <_calloc_r>
    ce36:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ce38:	60f0      	str	r0, [r6, #12]
    ce3a:	68db      	ldr	r3, [r3, #12]
    ce3c:	2b00      	cmp	r3, #0
    ce3e:	d1e4      	bne.n	ce0a <_Balloc+0x2e>
    ce40:	2000      	movs	r0, #0
    ce42:	bd70      	pop	{r4, r5, r6, pc}
    ce44:	6802      	ldr	r2, [r0, #0]
    ce46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    ce4a:	2300      	movs	r3, #0
    ce4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    ce50:	e7f7      	b.n	ce42 <_Balloc+0x66>
    ce52:	bf00      	nop
    ce54:	00011f6e 	.word	0x00011f6e
    ce58:	00011f85 	.word	0x00011f85

0000ce5c <_Bfree>:
    ce5c:	b570      	push	{r4, r5, r6, lr}
    ce5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
    ce60:	4605      	mov	r5, r0
    ce62:	460c      	mov	r4, r1
    ce64:	b976      	cbnz	r6, ce84 <_Bfree+0x28>
    ce66:	2010      	movs	r0, #16
    ce68:	f7ff feae 	bl	cbc8 <malloc>
    ce6c:	4602      	mov	r2, r0
    ce6e:	6268      	str	r0, [r5, #36]	; 0x24
    ce70:	b920      	cbnz	r0, ce7c <_Bfree+0x20>
    ce72:	4b09      	ldr	r3, [pc, #36]	; (ce98 <_Bfree+0x3c>)
    ce74:	4809      	ldr	r0, [pc, #36]	; (ce9c <_Bfree+0x40>)
    ce76:	218a      	movs	r1, #138	; 0x8a
    ce78:	f000 fae0 	bl	d43c <__assert_func>
    ce7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
    ce80:	6006      	str	r6, [r0, #0]
    ce82:	60c6      	str	r6, [r0, #12]
    ce84:	b13c      	cbz	r4, ce96 <_Bfree+0x3a>
    ce86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ce88:	6862      	ldr	r2, [r4, #4]
    ce8a:	68db      	ldr	r3, [r3, #12]
    ce8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    ce90:	6021      	str	r1, [r4, #0]
    ce92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    ce96:	bd70      	pop	{r4, r5, r6, pc}
    ce98:	00011f6e 	.word	0x00011f6e
    ce9c:	00011f85 	.word	0x00011f85

0000cea0 <__multadd>:
    cea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cea4:	690d      	ldr	r5, [r1, #16]
    cea6:	4607      	mov	r7, r0
    cea8:	460c      	mov	r4, r1
    ceaa:	461e      	mov	r6, r3
    ceac:	f101 0c14 	add.w	ip, r1, #20
    ceb0:	2000      	movs	r0, #0
    ceb2:	f8dc 3000 	ldr.w	r3, [ip]
    ceb6:	b299      	uxth	r1, r3
    ceb8:	fb02 6101 	mla	r1, r2, r1, r6
    cebc:	0c1e      	lsrs	r6, r3, #16
    cebe:	0c0b      	lsrs	r3, r1, #16
    cec0:	fb02 3306 	mla	r3, r2, r6, r3
    cec4:	b289      	uxth	r1, r1
    cec6:	3001      	adds	r0, #1
    cec8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    cecc:	4285      	cmp	r5, r0
    cece:	f84c 1b04 	str.w	r1, [ip], #4
    ced2:	ea4f 4613 	mov.w	r6, r3, lsr #16
    ced6:	dcec      	bgt.n	ceb2 <__multadd+0x12>
    ced8:	b30e      	cbz	r6, cf1e <__multadd+0x7e>
    ceda:	68a3      	ldr	r3, [r4, #8]
    cedc:	42ab      	cmp	r3, r5
    cede:	dc19      	bgt.n	cf14 <__multadd+0x74>
    cee0:	6861      	ldr	r1, [r4, #4]
    cee2:	4638      	mov	r0, r7
    cee4:	3101      	adds	r1, #1
    cee6:	f7ff ff79 	bl	cddc <_Balloc>
    ceea:	4680      	mov	r8, r0
    ceec:	b928      	cbnz	r0, cefa <__multadd+0x5a>
    ceee:	4602      	mov	r2, r0
    cef0:	4b0c      	ldr	r3, [pc, #48]	; (cf24 <__multadd+0x84>)
    cef2:	480d      	ldr	r0, [pc, #52]	; (cf28 <__multadd+0x88>)
    cef4:	21b5      	movs	r1, #181	; 0xb5
    cef6:	f000 faa1 	bl	d43c <__assert_func>
    cefa:	6922      	ldr	r2, [r4, #16]
    cefc:	3202      	adds	r2, #2
    cefe:	f104 010c 	add.w	r1, r4, #12
    cf02:	0092      	lsls	r2, r2, #2
    cf04:	300c      	adds	r0, #12
    cf06:	f002 fa71 	bl	f3ec <memcpy>
    cf0a:	4621      	mov	r1, r4
    cf0c:	4638      	mov	r0, r7
    cf0e:	f7ff ffa5 	bl	ce5c <_Bfree>
    cf12:	4644      	mov	r4, r8
    cf14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    cf18:	3501      	adds	r5, #1
    cf1a:	615e      	str	r6, [r3, #20]
    cf1c:	6125      	str	r5, [r4, #16]
    cf1e:	4620      	mov	r0, r4
    cf20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf24:	00011fe2 	.word	0x00011fe2
    cf28:	00011f85 	.word	0x00011f85

0000cf2c <__i2b>:
    cf2c:	b510      	push	{r4, lr}
    cf2e:	460c      	mov	r4, r1
    cf30:	2101      	movs	r1, #1
    cf32:	f7ff ff53 	bl	cddc <_Balloc>
    cf36:	4602      	mov	r2, r0
    cf38:	b928      	cbnz	r0, cf46 <__i2b+0x1a>
    cf3a:	4b05      	ldr	r3, [pc, #20]	; (cf50 <__i2b+0x24>)
    cf3c:	4805      	ldr	r0, [pc, #20]	; (cf54 <__i2b+0x28>)
    cf3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
    cf42:	f000 fa7b 	bl	d43c <__assert_func>
    cf46:	2301      	movs	r3, #1
    cf48:	6144      	str	r4, [r0, #20]
    cf4a:	6103      	str	r3, [r0, #16]
    cf4c:	bd10      	pop	{r4, pc}
    cf4e:	bf00      	nop
    cf50:	00011fe2 	.word	0x00011fe2
    cf54:	00011f85 	.word	0x00011f85

0000cf58 <__multiply>:
    cf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf5c:	4691      	mov	r9, r2
    cf5e:	690a      	ldr	r2, [r1, #16]
    cf60:	f8d9 3010 	ldr.w	r3, [r9, #16]
    cf64:	429a      	cmp	r2, r3
    cf66:	bfb8      	it	lt
    cf68:	460b      	movlt	r3, r1
    cf6a:	460c      	mov	r4, r1
    cf6c:	bfbc      	itt	lt
    cf6e:	464c      	movlt	r4, r9
    cf70:	4699      	movlt	r9, r3
    cf72:	6927      	ldr	r7, [r4, #16]
    cf74:	f8d9 a010 	ldr.w	sl, [r9, #16]
    cf78:	68a3      	ldr	r3, [r4, #8]
    cf7a:	6861      	ldr	r1, [r4, #4]
    cf7c:	eb07 060a 	add.w	r6, r7, sl
    cf80:	42b3      	cmp	r3, r6
    cf82:	b085      	sub	sp, #20
    cf84:	bfb8      	it	lt
    cf86:	3101      	addlt	r1, #1
    cf88:	f7ff ff28 	bl	cddc <_Balloc>
    cf8c:	b930      	cbnz	r0, cf9c <__multiply+0x44>
    cf8e:	4602      	mov	r2, r0
    cf90:	4b43      	ldr	r3, [pc, #268]	; (d0a0 <__multiply+0x148>)
    cf92:	4844      	ldr	r0, [pc, #272]	; (d0a4 <__multiply+0x14c>)
    cf94:	f240 115d 	movw	r1, #349	; 0x15d
    cf98:	f000 fa50 	bl	d43c <__assert_func>
    cf9c:	f100 0514 	add.w	r5, r0, #20
    cfa0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
    cfa4:	462b      	mov	r3, r5
    cfa6:	2200      	movs	r2, #0
    cfa8:	4543      	cmp	r3, r8
    cfaa:	d321      	bcc.n	cff0 <__multiply+0x98>
    cfac:	f104 0314 	add.w	r3, r4, #20
    cfb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    cfb4:	f109 0314 	add.w	r3, r9, #20
    cfb8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
    cfbc:	9202      	str	r2, [sp, #8]
    cfbe:	1b3a      	subs	r2, r7, r4
    cfc0:	3a15      	subs	r2, #21
    cfc2:	f022 0203 	bic.w	r2, r2, #3
    cfc6:	3204      	adds	r2, #4
    cfc8:	f104 0115 	add.w	r1, r4, #21
    cfcc:	428f      	cmp	r7, r1
    cfce:	bf38      	it	cc
    cfd0:	2204      	movcc	r2, #4
    cfd2:	9201      	str	r2, [sp, #4]
    cfd4:	9a02      	ldr	r2, [sp, #8]
    cfd6:	9303      	str	r3, [sp, #12]
    cfd8:	429a      	cmp	r2, r3
    cfda:	d80c      	bhi.n	cff6 <__multiply+0x9e>
    cfdc:	2e00      	cmp	r6, #0
    cfde:	dd03      	ble.n	cfe8 <__multiply+0x90>
    cfe0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
    cfe4:	2b00      	cmp	r3, #0
    cfe6:	d059      	beq.n	d09c <__multiply+0x144>
    cfe8:	6106      	str	r6, [r0, #16]
    cfea:	b005      	add	sp, #20
    cfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cff0:	f843 2b04 	str.w	r2, [r3], #4
    cff4:	e7d8      	b.n	cfa8 <__multiply+0x50>
    cff6:	f8b3 a000 	ldrh.w	sl, [r3]
    cffa:	f1ba 0f00 	cmp.w	sl, #0
    cffe:	d023      	beq.n	d048 <__multiply+0xf0>
    d000:	f104 0e14 	add.w	lr, r4, #20
    d004:	46a9      	mov	r9, r5
    d006:	f04f 0c00 	mov.w	ip, #0
    d00a:	f85e 2b04 	ldr.w	r2, [lr], #4
    d00e:	f8d9 1000 	ldr.w	r1, [r9]
    d012:	fa1f fb82 	uxth.w	fp, r2
    d016:	b289      	uxth	r1, r1
    d018:	fb0a 110b 	mla	r1, sl, fp, r1
    d01c:	4461      	add	r1, ip
    d01e:	f8d9 c000 	ldr.w	ip, [r9]
    d022:	0c12      	lsrs	r2, r2, #16
    d024:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    d028:	fb0a c202 	mla	r2, sl, r2, ip
    d02c:	eb02 4211 	add.w	r2, r2, r1, lsr #16
    d030:	b289      	uxth	r1, r1
    d032:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    d036:	4577      	cmp	r7, lr
    d038:	f849 1b04 	str.w	r1, [r9], #4
    d03c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    d040:	d8e3      	bhi.n	d00a <__multiply+0xb2>
    d042:	9a01      	ldr	r2, [sp, #4]
    d044:	f845 c002 	str.w	ip, [r5, r2]
    d048:	9a03      	ldr	r2, [sp, #12]
    d04a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
    d04e:	3304      	adds	r3, #4
    d050:	f1b9 0f00 	cmp.w	r9, #0
    d054:	d020      	beq.n	d098 <__multiply+0x140>
    d056:	6829      	ldr	r1, [r5, #0]
    d058:	f104 0c14 	add.w	ip, r4, #20
    d05c:	46ae      	mov	lr, r5
    d05e:	f04f 0a00 	mov.w	sl, #0
    d062:	f8bc b000 	ldrh.w	fp, [ip]
    d066:	f8be 2002 	ldrh.w	r2, [lr, #2]
    d06a:	fb09 220b 	mla	r2, r9, fp, r2
    d06e:	4492      	add	sl, r2
    d070:	b289      	uxth	r1, r1
    d072:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    d076:	f84e 1b04 	str.w	r1, [lr], #4
    d07a:	f85c 2b04 	ldr.w	r2, [ip], #4
    d07e:	f8be 1000 	ldrh.w	r1, [lr]
    d082:	0c12      	lsrs	r2, r2, #16
    d084:	fb09 1102 	mla	r1, r9, r2, r1
    d088:	eb01 411a 	add.w	r1, r1, sl, lsr #16
    d08c:	4567      	cmp	r7, ip
    d08e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
    d092:	d8e6      	bhi.n	d062 <__multiply+0x10a>
    d094:	9a01      	ldr	r2, [sp, #4]
    d096:	50a9      	str	r1, [r5, r2]
    d098:	3504      	adds	r5, #4
    d09a:	e79b      	b.n	cfd4 <__multiply+0x7c>
    d09c:	3e01      	subs	r6, #1
    d09e:	e79d      	b.n	cfdc <__multiply+0x84>
    d0a0:	00011fe2 	.word	0x00011fe2
    d0a4:	00011f85 	.word	0x00011f85

0000d0a8 <__pow5mult>:
    d0a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d0ac:	4615      	mov	r5, r2
    d0ae:	f012 0203 	ands.w	r2, r2, #3
    d0b2:	4606      	mov	r6, r0
    d0b4:	460f      	mov	r7, r1
    d0b6:	d007      	beq.n	d0c8 <__pow5mult+0x20>
    d0b8:	4c25      	ldr	r4, [pc, #148]	; (d150 <__pow5mult+0xa8>)
    d0ba:	3a01      	subs	r2, #1
    d0bc:	2300      	movs	r3, #0
    d0be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    d0c2:	f7ff feed 	bl	cea0 <__multadd>
    d0c6:	4607      	mov	r7, r0
    d0c8:	10ad      	asrs	r5, r5, #2
    d0ca:	d03d      	beq.n	d148 <__pow5mult+0xa0>
    d0cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
    d0ce:	b97c      	cbnz	r4, d0f0 <__pow5mult+0x48>
    d0d0:	2010      	movs	r0, #16
    d0d2:	f7ff fd79 	bl	cbc8 <malloc>
    d0d6:	4602      	mov	r2, r0
    d0d8:	6270      	str	r0, [r6, #36]	; 0x24
    d0da:	b928      	cbnz	r0, d0e8 <__pow5mult+0x40>
    d0dc:	4b1d      	ldr	r3, [pc, #116]	; (d154 <__pow5mult+0xac>)
    d0de:	481e      	ldr	r0, [pc, #120]	; (d158 <__pow5mult+0xb0>)
    d0e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    d0e4:	f000 f9aa 	bl	d43c <__assert_func>
    d0e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
    d0ec:	6004      	str	r4, [r0, #0]
    d0ee:	60c4      	str	r4, [r0, #12]
    d0f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    d0f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
    d0f8:	b94c      	cbnz	r4, d10e <__pow5mult+0x66>
    d0fa:	f240 2171 	movw	r1, #625	; 0x271
    d0fe:	4630      	mov	r0, r6
    d100:	f7ff ff14 	bl	cf2c <__i2b>
    d104:	2300      	movs	r3, #0
    d106:	f8c8 0008 	str.w	r0, [r8, #8]
    d10a:	4604      	mov	r4, r0
    d10c:	6003      	str	r3, [r0, #0]
    d10e:	f04f 0900 	mov.w	r9, #0
    d112:	07eb      	lsls	r3, r5, #31
    d114:	d50a      	bpl.n	d12c <__pow5mult+0x84>
    d116:	4639      	mov	r1, r7
    d118:	4622      	mov	r2, r4
    d11a:	4630      	mov	r0, r6
    d11c:	f7ff ff1c 	bl	cf58 <__multiply>
    d120:	4639      	mov	r1, r7
    d122:	4680      	mov	r8, r0
    d124:	4630      	mov	r0, r6
    d126:	f7ff fe99 	bl	ce5c <_Bfree>
    d12a:	4647      	mov	r7, r8
    d12c:	106d      	asrs	r5, r5, #1
    d12e:	d00b      	beq.n	d148 <__pow5mult+0xa0>
    d130:	6820      	ldr	r0, [r4, #0]
    d132:	b938      	cbnz	r0, d144 <__pow5mult+0x9c>
    d134:	4622      	mov	r2, r4
    d136:	4621      	mov	r1, r4
    d138:	4630      	mov	r0, r6
    d13a:	f7ff ff0d 	bl	cf58 <__multiply>
    d13e:	6020      	str	r0, [r4, #0]
    d140:	f8c0 9000 	str.w	r9, [r0]
    d144:	4604      	mov	r4, r0
    d146:	e7e4      	b.n	d112 <__pow5mult+0x6a>
    d148:	4638      	mov	r0, r7
    d14a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d14e:	bf00      	nop
    d150:	00011d54 	.word	0x00011d54
    d154:	00011f6e 	.word	0x00011f6e
    d158:	00011f85 	.word	0x00011f85

0000d15c <__lshift>:
    d15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d160:	460c      	mov	r4, r1
    d162:	6849      	ldr	r1, [r1, #4]
    d164:	6923      	ldr	r3, [r4, #16]
    d166:	eb03 1862 	add.w	r8, r3, r2, asr #5
    d16a:	68a3      	ldr	r3, [r4, #8]
    d16c:	4607      	mov	r7, r0
    d16e:	4691      	mov	r9, r2
    d170:	ea4f 1a62 	mov.w	sl, r2, asr #5
    d174:	f108 0601 	add.w	r6, r8, #1
    d178:	42b3      	cmp	r3, r6
    d17a:	db0b      	blt.n	d194 <__lshift+0x38>
    d17c:	4638      	mov	r0, r7
    d17e:	f7ff fe2d 	bl	cddc <_Balloc>
    d182:	4605      	mov	r5, r0
    d184:	b948      	cbnz	r0, d19a <__lshift+0x3e>
    d186:	4602      	mov	r2, r0
    d188:	4b2a      	ldr	r3, [pc, #168]	; (d234 <__lshift+0xd8>)
    d18a:	482b      	ldr	r0, [pc, #172]	; (d238 <__lshift+0xdc>)
    d18c:	f240 11d9 	movw	r1, #473	; 0x1d9
    d190:	f000 f954 	bl	d43c <__assert_func>
    d194:	3101      	adds	r1, #1
    d196:	005b      	lsls	r3, r3, #1
    d198:	e7ee      	b.n	d178 <__lshift+0x1c>
    d19a:	2300      	movs	r3, #0
    d19c:	f100 0114 	add.w	r1, r0, #20
    d1a0:	f100 0210 	add.w	r2, r0, #16
    d1a4:	4618      	mov	r0, r3
    d1a6:	4553      	cmp	r3, sl
    d1a8:	db37      	blt.n	d21a <__lshift+0xbe>
    d1aa:	6920      	ldr	r0, [r4, #16]
    d1ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
    d1b0:	f104 0314 	add.w	r3, r4, #20
    d1b4:	f019 091f 	ands.w	r9, r9, #31
    d1b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
    d1bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    d1c0:	d02f      	beq.n	d222 <__lshift+0xc6>
    d1c2:	f1c9 0e20 	rsb	lr, r9, #32
    d1c6:	468a      	mov	sl, r1
    d1c8:	f04f 0c00 	mov.w	ip, #0
    d1cc:	681a      	ldr	r2, [r3, #0]
    d1ce:	fa02 f209 	lsl.w	r2, r2, r9
    d1d2:	ea42 020c 	orr.w	r2, r2, ip
    d1d6:	f84a 2b04 	str.w	r2, [sl], #4
    d1da:	f853 2b04 	ldr.w	r2, [r3], #4
    d1de:	4298      	cmp	r0, r3
    d1e0:	fa22 fc0e 	lsr.w	ip, r2, lr
    d1e4:	d8f2      	bhi.n	d1cc <__lshift+0x70>
    d1e6:	1b03      	subs	r3, r0, r4
    d1e8:	3b15      	subs	r3, #21
    d1ea:	f023 0303 	bic.w	r3, r3, #3
    d1ee:	3304      	adds	r3, #4
    d1f0:	f104 0215 	add.w	r2, r4, #21
    d1f4:	4290      	cmp	r0, r2
    d1f6:	bf38      	it	cc
    d1f8:	2304      	movcc	r3, #4
    d1fa:	f841 c003 	str.w	ip, [r1, r3]
    d1fe:	f1bc 0f00 	cmp.w	ip, #0
    d202:	d001      	beq.n	d208 <__lshift+0xac>
    d204:	f108 0602 	add.w	r6, r8, #2
    d208:	3e01      	subs	r6, #1
    d20a:	4638      	mov	r0, r7
    d20c:	612e      	str	r6, [r5, #16]
    d20e:	4621      	mov	r1, r4
    d210:	f7ff fe24 	bl	ce5c <_Bfree>
    d214:	4628      	mov	r0, r5
    d216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d21a:	f842 0f04 	str.w	r0, [r2, #4]!
    d21e:	3301      	adds	r3, #1
    d220:	e7c1      	b.n	d1a6 <__lshift+0x4a>
    d222:	3904      	subs	r1, #4
    d224:	f853 2b04 	ldr.w	r2, [r3], #4
    d228:	f841 2f04 	str.w	r2, [r1, #4]!
    d22c:	4298      	cmp	r0, r3
    d22e:	d8f9      	bhi.n	d224 <__lshift+0xc8>
    d230:	e7ea      	b.n	d208 <__lshift+0xac>
    d232:	bf00      	nop
    d234:	00011fe2 	.word	0x00011fe2
    d238:	00011f85 	.word	0x00011f85

0000d23c <__mdiff>:
    d23c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d240:	460d      	mov	r5, r1
    d242:	4607      	mov	r7, r0
    d244:	4611      	mov	r1, r2
    d246:	4628      	mov	r0, r5
    d248:	4614      	mov	r4, r2
    d24a:	f002 f9d1 	bl	f5f0 <__mcmp>
    d24e:	1e06      	subs	r6, r0, #0
    d250:	d111      	bne.n	d276 <__mdiff+0x3a>
    d252:	4631      	mov	r1, r6
    d254:	4638      	mov	r0, r7
    d256:	f7ff fdc1 	bl	cddc <_Balloc>
    d25a:	4602      	mov	r2, r0
    d25c:	b928      	cbnz	r0, d26a <__mdiff+0x2e>
    d25e:	4b39      	ldr	r3, [pc, #228]	; (d344 <__mdiff+0x108>)
    d260:	f240 2132 	movw	r1, #562	; 0x232
    d264:	4838      	ldr	r0, [pc, #224]	; (d348 <__mdiff+0x10c>)
    d266:	f000 f8e9 	bl	d43c <__assert_func>
    d26a:	2301      	movs	r3, #1
    d26c:	e9c0 3604 	strd	r3, r6, [r0, #16]
    d270:	4610      	mov	r0, r2
    d272:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d276:	bfa4      	itt	ge
    d278:	4623      	movge	r3, r4
    d27a:	462c      	movge	r4, r5
    d27c:	4638      	mov	r0, r7
    d27e:	6861      	ldr	r1, [r4, #4]
    d280:	bfa6      	itte	ge
    d282:	461d      	movge	r5, r3
    d284:	2600      	movge	r6, #0
    d286:	2601      	movlt	r6, #1
    d288:	f7ff fda8 	bl	cddc <_Balloc>
    d28c:	4602      	mov	r2, r0
    d28e:	b918      	cbnz	r0, d298 <__mdiff+0x5c>
    d290:	4b2c      	ldr	r3, [pc, #176]	; (d344 <__mdiff+0x108>)
    d292:	f44f 7110 	mov.w	r1, #576	; 0x240
    d296:	e7e5      	b.n	d264 <__mdiff+0x28>
    d298:	6927      	ldr	r7, [r4, #16]
    d29a:	60c6      	str	r6, [r0, #12]
    d29c:	692e      	ldr	r6, [r5, #16]
    d29e:	f104 0014 	add.w	r0, r4, #20
    d2a2:	f105 0914 	add.w	r9, r5, #20
    d2a6:	f102 0e14 	add.w	lr, r2, #20
    d2aa:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
    d2ae:	eb09 0686 	add.w	r6, r9, r6, lsl #2
    d2b2:	3410      	adds	r4, #16
    d2b4:	46f2      	mov	sl, lr
    d2b6:	2100      	movs	r1, #0
    d2b8:	f859 3b04 	ldr.w	r3, [r9], #4
    d2bc:	f854 bf04 	ldr.w	fp, [r4, #4]!
    d2c0:	fa1f f883 	uxth.w	r8, r3
    d2c4:	fa11 f18b 	uxtah	r1, r1, fp
    d2c8:	0c1b      	lsrs	r3, r3, #16
    d2ca:	eba1 0808 	sub.w	r8, r1, r8
    d2ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
    d2d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
    d2d6:	fa1f f888 	uxth.w	r8, r8
    d2da:	1419      	asrs	r1, r3, #16
    d2dc:	454e      	cmp	r6, r9
    d2de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
    d2e2:	f84a 3b04 	str.w	r3, [sl], #4
    d2e6:	d8e7      	bhi.n	d2b8 <__mdiff+0x7c>
    d2e8:	1b73      	subs	r3, r6, r5
    d2ea:	3b15      	subs	r3, #21
    d2ec:	f023 0303 	bic.w	r3, r3, #3
    d2f0:	3304      	adds	r3, #4
    d2f2:	3515      	adds	r5, #21
    d2f4:	42ae      	cmp	r6, r5
    d2f6:	bf38      	it	cc
    d2f8:	2304      	movcc	r3, #4
    d2fa:	4418      	add	r0, r3
    d2fc:	4473      	add	r3, lr
    d2fe:	469e      	mov	lr, r3
    d300:	4606      	mov	r6, r0
    d302:	4566      	cmp	r6, ip
    d304:	d30e      	bcc.n	d324 <__mdiff+0xe8>
    d306:	f10c 0103 	add.w	r1, ip, #3
    d30a:	1a09      	subs	r1, r1, r0
    d30c:	f021 0103 	bic.w	r1, r1, #3
    d310:	3803      	subs	r0, #3
    d312:	4584      	cmp	ip, r0
    d314:	bf38      	it	cc
    d316:	2100      	movcc	r1, #0
    d318:	4419      	add	r1, r3
    d31a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
    d31e:	b17b      	cbz	r3, d340 <__mdiff+0x104>
    d320:	6117      	str	r7, [r2, #16]
    d322:	e7a5      	b.n	d270 <__mdiff+0x34>
    d324:	f856 8b04 	ldr.w	r8, [r6], #4
    d328:	fa11 f488 	uxtah	r4, r1, r8
    d32c:	1425      	asrs	r5, r4, #16
    d32e:	eb05 4518 	add.w	r5, r5, r8, lsr #16
    d332:	b2a4      	uxth	r4, r4
    d334:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    d338:	f84e 4b04 	str.w	r4, [lr], #4
    d33c:	1429      	asrs	r1, r5, #16
    d33e:	e7e0      	b.n	d302 <__mdiff+0xc6>
    d340:	3f01      	subs	r7, #1
    d342:	e7ea      	b.n	d31a <__mdiff+0xde>
    d344:	00011fe2 	.word	0x00011fe2
    d348:	00011f85 	.word	0x00011f85

0000d34c <__d2b>:
    d34c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d350:	2101      	movs	r1, #1
    d352:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    d356:	4690      	mov	r8, r2
    d358:	461d      	mov	r5, r3
    d35a:	f7ff fd3f 	bl	cddc <_Balloc>
    d35e:	4604      	mov	r4, r0
    d360:	b930      	cbnz	r0, d370 <__d2b+0x24>
    d362:	4602      	mov	r2, r0
    d364:	4b25      	ldr	r3, [pc, #148]	; (d3fc <__d2b+0xb0>)
    d366:	4826      	ldr	r0, [pc, #152]	; (d400 <__d2b+0xb4>)
    d368:	f240 310a 	movw	r1, #778	; 0x30a
    d36c:	f000 f866 	bl	d43c <__assert_func>
    d370:	f3c5 0313 	ubfx	r3, r5, #0, #20
    d374:	f3c5 550a 	ubfx	r5, r5, #20, #11
    d378:	bb2d      	cbnz	r5, d3c6 <__d2b+0x7a>
    d37a:	9301      	str	r3, [sp, #4]
    d37c:	f1b8 0300 	subs.w	r3, r8, #0
    d380:	d026      	beq.n	d3d0 <__d2b+0x84>
    d382:	4668      	mov	r0, sp
    d384:	9300      	str	r3, [sp, #0]
    d386:	f002 f906 	bl	f596 <__lo0bits>
    d38a:	9900      	ldr	r1, [sp, #0]
    d38c:	b1f0      	cbz	r0, d3cc <__d2b+0x80>
    d38e:	9a01      	ldr	r2, [sp, #4]
    d390:	f1c0 0320 	rsb	r3, r0, #32
    d394:	fa02 f303 	lsl.w	r3, r2, r3
    d398:	430b      	orrs	r3, r1
    d39a:	40c2      	lsrs	r2, r0
    d39c:	6163      	str	r3, [r4, #20]
    d39e:	9201      	str	r2, [sp, #4]
    d3a0:	9b01      	ldr	r3, [sp, #4]
    d3a2:	61a3      	str	r3, [r4, #24]
    d3a4:	2b00      	cmp	r3, #0
    d3a6:	bf14      	ite	ne
    d3a8:	2102      	movne	r1, #2
    d3aa:	2101      	moveq	r1, #1
    d3ac:	6121      	str	r1, [r4, #16]
    d3ae:	b1c5      	cbz	r5, d3e2 <__d2b+0x96>
    d3b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    d3b4:	4405      	add	r5, r0
    d3b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    d3ba:	603d      	str	r5, [r7, #0]
    d3bc:	6030      	str	r0, [r6, #0]
    d3be:	4620      	mov	r0, r4
    d3c0:	b002      	add	sp, #8
    d3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d3c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d3ca:	e7d6      	b.n	d37a <__d2b+0x2e>
    d3cc:	6161      	str	r1, [r4, #20]
    d3ce:	e7e7      	b.n	d3a0 <__d2b+0x54>
    d3d0:	a801      	add	r0, sp, #4
    d3d2:	f002 f8e0 	bl	f596 <__lo0bits>
    d3d6:	9b01      	ldr	r3, [sp, #4]
    d3d8:	6163      	str	r3, [r4, #20]
    d3da:	2101      	movs	r1, #1
    d3dc:	6121      	str	r1, [r4, #16]
    d3de:	3020      	adds	r0, #32
    d3e0:	e7e5      	b.n	d3ae <__d2b+0x62>
    d3e2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
    d3e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    d3ea:	6038      	str	r0, [r7, #0]
    d3ec:	6918      	ldr	r0, [r3, #16]
    d3ee:	f002 f8b2 	bl	f556 <__hi0bits>
    d3f2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
    d3f6:	6031      	str	r1, [r6, #0]
    d3f8:	e7e1      	b.n	d3be <__d2b+0x72>
    d3fa:	bf00      	nop
    d3fc:	00011fe2 	.word	0x00011fe2
    d400:	00011f85 	.word	0x00011f85

0000d404 <_mprec_log10>:
    d404:	2817      	cmp	r0, #23
    d406:	b5d0      	push	{r4, r6, r7, lr}
    d408:	4604      	mov	r4, r0
    d40a:	dc05      	bgt.n	d418 <_mprec_log10+0x14>
    d40c:	4808      	ldr	r0, [pc, #32]	; (d430 <_mprec_log10+0x2c>)
    d40e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
    d412:	e9d4 0100 	ldrd	r0, r1, [r4]
    d416:	bdd0      	pop	{r4, r6, r7, pc}
    d418:	4906      	ldr	r1, [pc, #24]	; (d434 <_mprec_log10+0x30>)
    d41a:	4f07      	ldr	r7, [pc, #28]	; (d438 <_mprec_log10+0x34>)
    d41c:	2000      	movs	r0, #0
    d41e:	2600      	movs	r6, #0
    d420:	4632      	mov	r2, r6
    d422:	463b      	mov	r3, r7
    d424:	f7f3 f878 	bl	518 <__aeabi_dmul>
    d428:	3c01      	subs	r4, #1
    d42a:	d1f9      	bne.n	d420 <_mprec_log10+0x1c>
    d42c:	e7f3      	b.n	d416 <_mprec_log10+0x12>
    d42e:	bf00      	nop
    d430:	0000fde0 	.word	0x0000fde0
    d434:	3ff00000 	.word	0x3ff00000
    d438:	40240000 	.word	0x40240000

0000d43c <__assert_func>:
    d43c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d43e:	4614      	mov	r4, r2
    d440:	461a      	mov	r2, r3
    d442:	4b09      	ldr	r3, [pc, #36]	; (d468 <__assert_func+0x2c>)
    d444:	681b      	ldr	r3, [r3, #0]
    d446:	4605      	mov	r5, r0
    d448:	68d8      	ldr	r0, [r3, #12]
    d44a:	b14c      	cbz	r4, d460 <__assert_func+0x24>
    d44c:	4b07      	ldr	r3, [pc, #28]	; (d46c <__assert_func+0x30>)
    d44e:	9100      	str	r1, [sp, #0]
    d450:	e9cd 3401 	strd	r3, r4, [sp, #4]
    d454:	4906      	ldr	r1, [pc, #24]	; (d470 <__assert_func+0x34>)
    d456:	462b      	mov	r3, r5
    d458:	f000 f80e 	bl	d478 <fiprintf>
    d45c:	f002 fa0c 	bl	f878 <abort>
    d460:	4b04      	ldr	r3, [pc, #16]	; (d474 <__assert_func+0x38>)
    d462:	461c      	mov	r4, r3
    d464:	e7f3      	b.n	d44e <__assert_func+0x12>
    d466:	bf00      	nop
    d468:	20004108 	.word	0x20004108
    d46c:	00011ff3 	.word	0x00011ff3
    d470:	00012000 	.word	0x00012000
    d474:	0001202e 	.word	0x0001202e

0000d478 <fiprintf>:
    d478:	b40e      	push	{r1, r2, r3}
    d47a:	b503      	push	{r0, r1, lr}
    d47c:	4601      	mov	r1, r0
    d47e:	ab03      	add	r3, sp, #12
    d480:	4805      	ldr	r0, [pc, #20]	; (d498 <fiprintf+0x20>)
    d482:	f853 2b04 	ldr.w	r2, [r3], #4
    d486:	6800      	ldr	r0, [r0, #0]
    d488:	9301      	str	r3, [sp, #4]
    d48a:	f000 f807 	bl	d49c <_vfiprintf_r>
    d48e:	b002      	add	sp, #8
    d490:	f85d eb04 	ldr.w	lr, [sp], #4
    d494:	b003      	add	sp, #12
    d496:	4770      	bx	lr
    d498:	20004108 	.word	0x20004108

0000d49c <_vfiprintf_r>:
    d49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4a0:	460d      	mov	r5, r1
    d4a2:	b09d      	sub	sp, #116	; 0x74
    d4a4:	4614      	mov	r4, r2
    d4a6:	4698      	mov	r8, r3
    d4a8:	4606      	mov	r6, r0
    d4aa:	b118      	cbz	r0, d4b4 <_vfiprintf_r+0x18>
    d4ac:	6983      	ldr	r3, [r0, #24]
    d4ae:	b90b      	cbnz	r3, d4b4 <_vfiprintf_r+0x18>
    d4b0:	f000 fc0a 	bl	dcc8 <__sinit>
    d4b4:	4b89      	ldr	r3, [pc, #548]	; (d6dc <_vfiprintf_r+0x240>)
    d4b6:	429d      	cmp	r5, r3
    d4b8:	d11b      	bne.n	d4f2 <_vfiprintf_r+0x56>
    d4ba:	6875      	ldr	r5, [r6, #4]
    d4bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    d4be:	07d9      	lsls	r1, r3, #31
    d4c0:	d405      	bmi.n	d4ce <_vfiprintf_r+0x32>
    d4c2:	89ab      	ldrh	r3, [r5, #12]
    d4c4:	059a      	lsls	r2, r3, #22
    d4c6:	d402      	bmi.n	d4ce <_vfiprintf_r+0x32>
    d4c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
    d4ca:	f7f9 fa5d 	bl	6988 <__retarget_lock_acquire_recursive>
    d4ce:	89ab      	ldrh	r3, [r5, #12]
    d4d0:	071b      	lsls	r3, r3, #28
    d4d2:	d501      	bpl.n	d4d8 <_vfiprintf_r+0x3c>
    d4d4:	692b      	ldr	r3, [r5, #16]
    d4d6:	b9eb      	cbnz	r3, d514 <_vfiprintf_r+0x78>
    d4d8:	4629      	mov	r1, r5
    d4da:	4630      	mov	r0, r6
    d4dc:	f000 fa86 	bl	d9ec <__swsetup_r>
    d4e0:	b1c0      	cbz	r0, d514 <_vfiprintf_r+0x78>
    d4e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    d4e4:	07dc      	lsls	r4, r3, #31
    d4e6:	d50e      	bpl.n	d506 <_vfiprintf_r+0x6a>
    d4e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d4ec:	b01d      	add	sp, #116	; 0x74
    d4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4f2:	4b7b      	ldr	r3, [pc, #492]	; (d6e0 <_vfiprintf_r+0x244>)
    d4f4:	429d      	cmp	r5, r3
    d4f6:	d101      	bne.n	d4fc <_vfiprintf_r+0x60>
    d4f8:	68b5      	ldr	r5, [r6, #8]
    d4fa:	e7df      	b.n	d4bc <_vfiprintf_r+0x20>
    d4fc:	4b79      	ldr	r3, [pc, #484]	; (d6e4 <_vfiprintf_r+0x248>)
    d4fe:	429d      	cmp	r5, r3
    d500:	bf08      	it	eq
    d502:	68f5      	ldreq	r5, [r6, #12]
    d504:	e7da      	b.n	d4bc <_vfiprintf_r+0x20>
    d506:	89ab      	ldrh	r3, [r5, #12]
    d508:	0598      	lsls	r0, r3, #22
    d50a:	d4ed      	bmi.n	d4e8 <_vfiprintf_r+0x4c>
    d50c:	6da8      	ldr	r0, [r5, #88]	; 0x58
    d50e:	f7f9 fa5b 	bl	69c8 <__retarget_lock_release_recursive>
    d512:	e7e9      	b.n	d4e8 <_vfiprintf_r+0x4c>
    d514:	2300      	movs	r3, #0
    d516:	9309      	str	r3, [sp, #36]	; 0x24
    d518:	2320      	movs	r3, #32
    d51a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    d51e:	f8cd 800c 	str.w	r8, [sp, #12]
    d522:	2330      	movs	r3, #48	; 0x30
    d524:	f8df 81c0 	ldr.w	r8, [pc, #448]	; d6e8 <_vfiprintf_r+0x24c>
    d528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    d52c:	f04f 0901 	mov.w	r9, #1
    d530:	4623      	mov	r3, r4
    d532:	469a      	mov	sl, r3
    d534:	f813 2b01 	ldrb.w	r2, [r3], #1
    d538:	b10a      	cbz	r2, d53e <_vfiprintf_r+0xa2>
    d53a:	2a25      	cmp	r2, #37	; 0x25
    d53c:	d1f9      	bne.n	d532 <_vfiprintf_r+0x96>
    d53e:	ebba 0b04 	subs.w	fp, sl, r4
    d542:	d00b      	beq.n	d55c <_vfiprintf_r+0xc0>
    d544:	465b      	mov	r3, fp
    d546:	4622      	mov	r2, r4
    d548:	4629      	mov	r1, r5
    d54a:	4630      	mov	r0, r6
    d54c:	f002 f915 	bl	f77a <__sfputs_r>
    d550:	3001      	adds	r0, #1
    d552:	f000 80aa 	beq.w	d6aa <_vfiprintf_r+0x20e>
    d556:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d558:	445a      	add	r2, fp
    d55a:	9209      	str	r2, [sp, #36]	; 0x24
    d55c:	f89a 3000 	ldrb.w	r3, [sl]
    d560:	2b00      	cmp	r3, #0
    d562:	f000 80a2 	beq.w	d6aa <_vfiprintf_r+0x20e>
    d566:	2300      	movs	r3, #0
    d568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d56c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    d570:	f10a 0a01 	add.w	sl, sl, #1
    d574:	9304      	str	r3, [sp, #16]
    d576:	9307      	str	r3, [sp, #28]
    d578:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    d57c:	931a      	str	r3, [sp, #104]	; 0x68
    d57e:	4654      	mov	r4, sl
    d580:	2205      	movs	r2, #5
    d582:	f814 1b01 	ldrb.w	r1, [r4], #1
    d586:	4858      	ldr	r0, [pc, #352]	; (d6e8 <_vfiprintf_r+0x24c>)
    d588:	f7f2 fdba 	bl	100 <memchr>
    d58c:	9a04      	ldr	r2, [sp, #16]
    d58e:	b9d8      	cbnz	r0, d5c8 <_vfiprintf_r+0x12c>
    d590:	06d1      	lsls	r1, r2, #27
    d592:	bf44      	itt	mi
    d594:	2320      	movmi	r3, #32
    d596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    d59a:	0713      	lsls	r3, r2, #28
    d59c:	bf44      	itt	mi
    d59e:	232b      	movmi	r3, #43	; 0x2b
    d5a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    d5a4:	f89a 3000 	ldrb.w	r3, [sl]
    d5a8:	2b2a      	cmp	r3, #42	; 0x2a
    d5aa:	d015      	beq.n	d5d8 <_vfiprintf_r+0x13c>
    d5ac:	9a07      	ldr	r2, [sp, #28]
    d5ae:	4654      	mov	r4, sl
    d5b0:	2000      	movs	r0, #0
    d5b2:	f04f 0c0a 	mov.w	ip, #10
    d5b6:	4621      	mov	r1, r4
    d5b8:	f811 3b01 	ldrb.w	r3, [r1], #1
    d5bc:	3b30      	subs	r3, #48	; 0x30
    d5be:	2b09      	cmp	r3, #9
    d5c0:	d94e      	bls.n	d660 <_vfiprintf_r+0x1c4>
    d5c2:	b1b0      	cbz	r0, d5f2 <_vfiprintf_r+0x156>
    d5c4:	9207      	str	r2, [sp, #28]
    d5c6:	e014      	b.n	d5f2 <_vfiprintf_r+0x156>
    d5c8:	eba0 0308 	sub.w	r3, r0, r8
    d5cc:	fa09 f303 	lsl.w	r3, r9, r3
    d5d0:	4313      	orrs	r3, r2
    d5d2:	9304      	str	r3, [sp, #16]
    d5d4:	46a2      	mov	sl, r4
    d5d6:	e7d2      	b.n	d57e <_vfiprintf_r+0xe2>
    d5d8:	9b03      	ldr	r3, [sp, #12]
    d5da:	1d19      	adds	r1, r3, #4
    d5dc:	681b      	ldr	r3, [r3, #0]
    d5de:	9103      	str	r1, [sp, #12]
    d5e0:	2b00      	cmp	r3, #0
    d5e2:	bfbb      	ittet	lt
    d5e4:	425b      	neglt	r3, r3
    d5e6:	f042 0202 	orrlt.w	r2, r2, #2
    d5ea:	9307      	strge	r3, [sp, #28]
    d5ec:	9307      	strlt	r3, [sp, #28]
    d5ee:	bfb8      	it	lt
    d5f0:	9204      	strlt	r2, [sp, #16]
    d5f2:	7823      	ldrb	r3, [r4, #0]
    d5f4:	2b2e      	cmp	r3, #46	; 0x2e
    d5f6:	d10c      	bne.n	d612 <_vfiprintf_r+0x176>
    d5f8:	7863      	ldrb	r3, [r4, #1]
    d5fa:	2b2a      	cmp	r3, #42	; 0x2a
    d5fc:	d135      	bne.n	d66a <_vfiprintf_r+0x1ce>
    d5fe:	9b03      	ldr	r3, [sp, #12]
    d600:	1d1a      	adds	r2, r3, #4
    d602:	681b      	ldr	r3, [r3, #0]
    d604:	9203      	str	r2, [sp, #12]
    d606:	2b00      	cmp	r3, #0
    d608:	bfb8      	it	lt
    d60a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    d60e:	3402      	adds	r4, #2
    d610:	9305      	str	r3, [sp, #20]
    d612:	f8df a0d8 	ldr.w	sl, [pc, #216]	; d6ec <_vfiprintf_r+0x250>
    d616:	7821      	ldrb	r1, [r4, #0]
    d618:	2203      	movs	r2, #3
    d61a:	4650      	mov	r0, sl
    d61c:	f7f2 fd70 	bl	100 <memchr>
    d620:	b140      	cbz	r0, d634 <_vfiprintf_r+0x198>
    d622:	2340      	movs	r3, #64	; 0x40
    d624:	eba0 000a 	sub.w	r0, r0, sl
    d628:	fa03 f000 	lsl.w	r0, r3, r0
    d62c:	9b04      	ldr	r3, [sp, #16]
    d62e:	4303      	orrs	r3, r0
    d630:	3401      	adds	r4, #1
    d632:	9304      	str	r3, [sp, #16]
    d634:	f814 1b01 	ldrb.w	r1, [r4], #1
    d638:	482d      	ldr	r0, [pc, #180]	; (d6f0 <_vfiprintf_r+0x254>)
    d63a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    d63e:	2206      	movs	r2, #6
    d640:	f7f2 fd5e 	bl	100 <memchr>
    d644:	2800      	cmp	r0, #0
    d646:	d03f      	beq.n	d6c8 <_vfiprintf_r+0x22c>
    d648:	4b2a      	ldr	r3, [pc, #168]	; (d6f4 <_vfiprintf_r+0x258>)
    d64a:	bb1b      	cbnz	r3, d694 <_vfiprintf_r+0x1f8>
    d64c:	9b03      	ldr	r3, [sp, #12]
    d64e:	3307      	adds	r3, #7
    d650:	f023 0307 	bic.w	r3, r3, #7
    d654:	3308      	adds	r3, #8
    d656:	9303      	str	r3, [sp, #12]
    d658:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d65a:	443b      	add	r3, r7
    d65c:	9309      	str	r3, [sp, #36]	; 0x24
    d65e:	e767      	b.n	d530 <_vfiprintf_r+0x94>
    d660:	fb0c 3202 	mla	r2, ip, r2, r3
    d664:	460c      	mov	r4, r1
    d666:	2001      	movs	r0, #1
    d668:	e7a5      	b.n	d5b6 <_vfiprintf_r+0x11a>
    d66a:	2300      	movs	r3, #0
    d66c:	3401      	adds	r4, #1
    d66e:	9305      	str	r3, [sp, #20]
    d670:	4619      	mov	r1, r3
    d672:	f04f 0c0a 	mov.w	ip, #10
    d676:	4620      	mov	r0, r4
    d678:	f810 2b01 	ldrb.w	r2, [r0], #1
    d67c:	3a30      	subs	r2, #48	; 0x30
    d67e:	2a09      	cmp	r2, #9
    d680:	d903      	bls.n	d68a <_vfiprintf_r+0x1ee>
    d682:	2b00      	cmp	r3, #0
    d684:	d0c5      	beq.n	d612 <_vfiprintf_r+0x176>
    d686:	9105      	str	r1, [sp, #20]
    d688:	e7c3      	b.n	d612 <_vfiprintf_r+0x176>
    d68a:	fb0c 2101 	mla	r1, ip, r1, r2
    d68e:	4604      	mov	r4, r0
    d690:	2301      	movs	r3, #1
    d692:	e7f0      	b.n	d676 <_vfiprintf_r+0x1da>
    d694:	ab03      	add	r3, sp, #12
    d696:	9300      	str	r3, [sp, #0]
    d698:	462a      	mov	r2, r5
    d69a:	4b17      	ldr	r3, [pc, #92]	; (d6f8 <_vfiprintf_r+0x25c>)
    d69c:	a904      	add	r1, sp, #16
    d69e:	4630      	mov	r0, r6
    d6a0:	f3af 8000 	nop.w
    d6a4:	4607      	mov	r7, r0
    d6a6:	1c78      	adds	r0, r7, #1
    d6a8:	d1d6      	bne.n	d658 <_vfiprintf_r+0x1bc>
    d6aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    d6ac:	07d9      	lsls	r1, r3, #31
    d6ae:	d405      	bmi.n	d6bc <_vfiprintf_r+0x220>
    d6b0:	89ab      	ldrh	r3, [r5, #12]
    d6b2:	059a      	lsls	r2, r3, #22
    d6b4:	d402      	bmi.n	d6bc <_vfiprintf_r+0x220>
    d6b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
    d6b8:	f7f9 f986 	bl	69c8 <__retarget_lock_release_recursive>
    d6bc:	89ab      	ldrh	r3, [r5, #12]
    d6be:	065b      	lsls	r3, r3, #25
    d6c0:	f53f af12 	bmi.w	d4e8 <_vfiprintf_r+0x4c>
    d6c4:	9809      	ldr	r0, [sp, #36]	; 0x24
    d6c6:	e711      	b.n	d4ec <_vfiprintf_r+0x50>
    d6c8:	ab03      	add	r3, sp, #12
    d6ca:	9300      	str	r3, [sp, #0]
    d6cc:	462a      	mov	r2, r5
    d6ce:	4b0a      	ldr	r3, [pc, #40]	; (d6f8 <_vfiprintf_r+0x25c>)
    d6d0:	a904      	add	r1, sp, #16
    d6d2:	4630      	mov	r0, r6
    d6d4:	f000 f812 	bl	d6fc <_printf_i>
    d6d8:	e7e4      	b.n	d6a4 <_vfiprintf_r+0x208>
    d6da:	bf00      	nop
    d6dc:	00011d80 	.word	0x00011d80
    d6e0:	00011da0 	.word	0x00011da0
    d6e4:	00011d60 	.word	0x00011d60
    d6e8:	0001209a 	.word	0x0001209a
    d6ec:	000120a0 	.word	0x000120a0
    d6f0:	000120a4 	.word	0x000120a4
    d6f4:	00000000 	.word	0x00000000
    d6f8:	0000f77b 	.word	0x0000f77b

0000d6fc <_printf_i>:
    d6fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    d700:	7e0f      	ldrb	r7, [r1, #24]
    d702:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    d704:	2f78      	cmp	r7, #120	; 0x78
    d706:	4691      	mov	r9, r2
    d708:	4680      	mov	r8, r0
    d70a:	460c      	mov	r4, r1
    d70c:	469a      	mov	sl, r3
    d70e:	f101 0243 	add.w	r2, r1, #67	; 0x43
    d712:	d807      	bhi.n	d724 <_printf_i+0x28>
    d714:	2f62      	cmp	r7, #98	; 0x62
    d716:	d80a      	bhi.n	d72e <_printf_i+0x32>
    d718:	2f00      	cmp	r7, #0
    d71a:	f000 80d8 	beq.w	d8ce <_printf_i+0x1d2>
    d71e:	2f58      	cmp	r7, #88	; 0x58
    d720:	f000 80a3 	beq.w	d86a <_printf_i+0x16e>
    d724:	f104 0542 	add.w	r5, r4, #66	; 0x42
    d728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    d72c:	e03a      	b.n	d7a4 <_printf_i+0xa8>
    d72e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    d732:	2b15      	cmp	r3, #21
    d734:	d8f6      	bhi.n	d724 <_printf_i+0x28>
    d736:	a101      	add	r1, pc, #4	; (adr r1, d73c <_printf_i+0x40>)
    d738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    d73c:	0000d795 	.word	0x0000d795
    d740:	0000d7a9 	.word	0x0000d7a9
    d744:	0000d725 	.word	0x0000d725
    d748:	0000d725 	.word	0x0000d725
    d74c:	0000d725 	.word	0x0000d725
    d750:	0000d725 	.word	0x0000d725
    d754:	0000d7a9 	.word	0x0000d7a9
    d758:	0000d725 	.word	0x0000d725
    d75c:	0000d725 	.word	0x0000d725
    d760:	0000d725 	.word	0x0000d725
    d764:	0000d725 	.word	0x0000d725
    d768:	0000d8b5 	.word	0x0000d8b5
    d76c:	0000d7d9 	.word	0x0000d7d9
    d770:	0000d897 	.word	0x0000d897
    d774:	0000d725 	.word	0x0000d725
    d778:	0000d725 	.word	0x0000d725
    d77c:	0000d8d7 	.word	0x0000d8d7
    d780:	0000d725 	.word	0x0000d725
    d784:	0000d7d9 	.word	0x0000d7d9
    d788:	0000d725 	.word	0x0000d725
    d78c:	0000d725 	.word	0x0000d725
    d790:	0000d89f 	.word	0x0000d89f
    d794:	682b      	ldr	r3, [r5, #0]
    d796:	1d1a      	adds	r2, r3, #4
    d798:	681b      	ldr	r3, [r3, #0]
    d79a:	602a      	str	r2, [r5, #0]
    d79c:	f104 0542 	add.w	r5, r4, #66	; 0x42
    d7a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    d7a4:	2301      	movs	r3, #1
    d7a6:	e0a3      	b.n	d8f0 <_printf_i+0x1f4>
    d7a8:	6820      	ldr	r0, [r4, #0]
    d7aa:	6829      	ldr	r1, [r5, #0]
    d7ac:	0606      	lsls	r6, r0, #24
    d7ae:	f101 0304 	add.w	r3, r1, #4
    d7b2:	d50a      	bpl.n	d7ca <_printf_i+0xce>
    d7b4:	680e      	ldr	r6, [r1, #0]
    d7b6:	602b      	str	r3, [r5, #0]
    d7b8:	2e00      	cmp	r6, #0
    d7ba:	da03      	bge.n	d7c4 <_printf_i+0xc8>
    d7bc:	232d      	movs	r3, #45	; 0x2d
    d7be:	4276      	negs	r6, r6
    d7c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    d7c4:	485e      	ldr	r0, [pc, #376]	; (d940 <_printf_i+0x244>)
    d7c6:	230a      	movs	r3, #10
    d7c8:	e019      	b.n	d7fe <_printf_i+0x102>
    d7ca:	680e      	ldr	r6, [r1, #0]
    d7cc:	602b      	str	r3, [r5, #0]
    d7ce:	f010 0f40 	tst.w	r0, #64	; 0x40
    d7d2:	bf18      	it	ne
    d7d4:	b236      	sxthne	r6, r6
    d7d6:	e7ef      	b.n	d7b8 <_printf_i+0xbc>
    d7d8:	682b      	ldr	r3, [r5, #0]
    d7da:	6820      	ldr	r0, [r4, #0]
    d7dc:	1d19      	adds	r1, r3, #4
    d7de:	6029      	str	r1, [r5, #0]
    d7e0:	0601      	lsls	r1, r0, #24
    d7e2:	d501      	bpl.n	d7e8 <_printf_i+0xec>
    d7e4:	681e      	ldr	r6, [r3, #0]
    d7e6:	e002      	b.n	d7ee <_printf_i+0xf2>
    d7e8:	0646      	lsls	r6, r0, #25
    d7ea:	d5fb      	bpl.n	d7e4 <_printf_i+0xe8>
    d7ec:	881e      	ldrh	r6, [r3, #0]
    d7ee:	4854      	ldr	r0, [pc, #336]	; (d940 <_printf_i+0x244>)
    d7f0:	2f6f      	cmp	r7, #111	; 0x6f
    d7f2:	bf0c      	ite	eq
    d7f4:	2308      	moveq	r3, #8
    d7f6:	230a      	movne	r3, #10
    d7f8:	2100      	movs	r1, #0
    d7fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    d7fe:	6865      	ldr	r5, [r4, #4]
    d800:	60a5      	str	r5, [r4, #8]
    d802:	2d00      	cmp	r5, #0
    d804:	bfa2      	ittt	ge
    d806:	6821      	ldrge	r1, [r4, #0]
    d808:	f021 0104 	bicge.w	r1, r1, #4
    d80c:	6021      	strge	r1, [r4, #0]
    d80e:	b90e      	cbnz	r6, d814 <_printf_i+0x118>
    d810:	2d00      	cmp	r5, #0
    d812:	d04d      	beq.n	d8b0 <_printf_i+0x1b4>
    d814:	4615      	mov	r5, r2
    d816:	fbb6 f1f3 	udiv	r1, r6, r3
    d81a:	fb03 6711 	mls	r7, r3, r1, r6
    d81e:	5dc7      	ldrb	r7, [r0, r7]
    d820:	f805 7d01 	strb.w	r7, [r5, #-1]!
    d824:	4637      	mov	r7, r6
    d826:	42bb      	cmp	r3, r7
    d828:	460e      	mov	r6, r1
    d82a:	d9f4      	bls.n	d816 <_printf_i+0x11a>
    d82c:	2b08      	cmp	r3, #8
    d82e:	d10b      	bne.n	d848 <_printf_i+0x14c>
    d830:	6823      	ldr	r3, [r4, #0]
    d832:	07de      	lsls	r6, r3, #31
    d834:	d508      	bpl.n	d848 <_printf_i+0x14c>
    d836:	6923      	ldr	r3, [r4, #16]
    d838:	6861      	ldr	r1, [r4, #4]
    d83a:	4299      	cmp	r1, r3
    d83c:	bfde      	ittt	le
    d83e:	2330      	movle	r3, #48	; 0x30
    d840:	f805 3c01 	strble.w	r3, [r5, #-1]
    d844:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    d848:	1b52      	subs	r2, r2, r5
    d84a:	6122      	str	r2, [r4, #16]
    d84c:	f8cd a000 	str.w	sl, [sp]
    d850:	464b      	mov	r3, r9
    d852:	aa03      	add	r2, sp, #12
    d854:	4621      	mov	r1, r4
    d856:	4640      	mov	r0, r8
    d858:	f001 ffa1 	bl	f79e <_printf_common>
    d85c:	3001      	adds	r0, #1
    d85e:	d14c      	bne.n	d8fa <_printf_i+0x1fe>
    d860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d864:	b004      	add	sp, #16
    d866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d86a:	4835      	ldr	r0, [pc, #212]	; (d940 <_printf_i+0x244>)
    d86c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
    d870:	6829      	ldr	r1, [r5, #0]
    d872:	6823      	ldr	r3, [r4, #0]
    d874:	f851 6b04 	ldr.w	r6, [r1], #4
    d878:	6029      	str	r1, [r5, #0]
    d87a:	061d      	lsls	r5, r3, #24
    d87c:	d514      	bpl.n	d8a8 <_printf_i+0x1ac>
    d87e:	07df      	lsls	r7, r3, #31
    d880:	bf44      	itt	mi
    d882:	f043 0320 	orrmi.w	r3, r3, #32
    d886:	6023      	strmi	r3, [r4, #0]
    d888:	b91e      	cbnz	r6, d892 <_printf_i+0x196>
    d88a:	6823      	ldr	r3, [r4, #0]
    d88c:	f023 0320 	bic.w	r3, r3, #32
    d890:	6023      	str	r3, [r4, #0]
    d892:	2310      	movs	r3, #16
    d894:	e7b0      	b.n	d7f8 <_printf_i+0xfc>
    d896:	6823      	ldr	r3, [r4, #0]
    d898:	f043 0320 	orr.w	r3, r3, #32
    d89c:	6023      	str	r3, [r4, #0]
    d89e:	2378      	movs	r3, #120	; 0x78
    d8a0:	4828      	ldr	r0, [pc, #160]	; (d944 <_printf_i+0x248>)
    d8a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    d8a6:	e7e3      	b.n	d870 <_printf_i+0x174>
    d8a8:	0659      	lsls	r1, r3, #25
    d8aa:	bf48      	it	mi
    d8ac:	b2b6      	uxthmi	r6, r6
    d8ae:	e7e6      	b.n	d87e <_printf_i+0x182>
    d8b0:	4615      	mov	r5, r2
    d8b2:	e7bb      	b.n	d82c <_printf_i+0x130>
    d8b4:	682b      	ldr	r3, [r5, #0]
    d8b6:	6826      	ldr	r6, [r4, #0]
    d8b8:	6961      	ldr	r1, [r4, #20]
    d8ba:	1d18      	adds	r0, r3, #4
    d8bc:	6028      	str	r0, [r5, #0]
    d8be:	0635      	lsls	r5, r6, #24
    d8c0:	681b      	ldr	r3, [r3, #0]
    d8c2:	d501      	bpl.n	d8c8 <_printf_i+0x1cc>
    d8c4:	6019      	str	r1, [r3, #0]
    d8c6:	e002      	b.n	d8ce <_printf_i+0x1d2>
    d8c8:	0670      	lsls	r0, r6, #25
    d8ca:	d5fb      	bpl.n	d8c4 <_printf_i+0x1c8>
    d8cc:	8019      	strh	r1, [r3, #0]
    d8ce:	2300      	movs	r3, #0
    d8d0:	6123      	str	r3, [r4, #16]
    d8d2:	4615      	mov	r5, r2
    d8d4:	e7ba      	b.n	d84c <_printf_i+0x150>
    d8d6:	682b      	ldr	r3, [r5, #0]
    d8d8:	1d1a      	adds	r2, r3, #4
    d8da:	602a      	str	r2, [r5, #0]
    d8dc:	681d      	ldr	r5, [r3, #0]
    d8de:	6862      	ldr	r2, [r4, #4]
    d8e0:	2100      	movs	r1, #0
    d8e2:	4628      	mov	r0, r5
    d8e4:	f7f2 fc0c 	bl	100 <memchr>
    d8e8:	b108      	cbz	r0, d8ee <_printf_i+0x1f2>
    d8ea:	1b40      	subs	r0, r0, r5
    d8ec:	6060      	str	r0, [r4, #4]
    d8ee:	6863      	ldr	r3, [r4, #4]
    d8f0:	6123      	str	r3, [r4, #16]
    d8f2:	2300      	movs	r3, #0
    d8f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    d8f8:	e7a8      	b.n	d84c <_printf_i+0x150>
    d8fa:	6923      	ldr	r3, [r4, #16]
    d8fc:	462a      	mov	r2, r5
    d8fe:	4649      	mov	r1, r9
    d900:	4640      	mov	r0, r8
    d902:	47d0      	blx	sl
    d904:	3001      	adds	r0, #1
    d906:	d0ab      	beq.n	d860 <_printf_i+0x164>
    d908:	6823      	ldr	r3, [r4, #0]
    d90a:	079b      	lsls	r3, r3, #30
    d90c:	d413      	bmi.n	d936 <_printf_i+0x23a>
    d90e:	68e0      	ldr	r0, [r4, #12]
    d910:	9b03      	ldr	r3, [sp, #12]
    d912:	4298      	cmp	r0, r3
    d914:	bfb8      	it	lt
    d916:	4618      	movlt	r0, r3
    d918:	e7a4      	b.n	d864 <_printf_i+0x168>
    d91a:	2301      	movs	r3, #1
    d91c:	4632      	mov	r2, r6
    d91e:	4649      	mov	r1, r9
    d920:	4640      	mov	r0, r8
    d922:	47d0      	blx	sl
    d924:	3001      	adds	r0, #1
    d926:	d09b      	beq.n	d860 <_printf_i+0x164>
    d928:	3501      	adds	r5, #1
    d92a:	68e3      	ldr	r3, [r4, #12]
    d92c:	9903      	ldr	r1, [sp, #12]
    d92e:	1a5b      	subs	r3, r3, r1
    d930:	42ab      	cmp	r3, r5
    d932:	dcf2      	bgt.n	d91a <_printf_i+0x21e>
    d934:	e7eb      	b.n	d90e <_printf_i+0x212>
    d936:	2500      	movs	r5, #0
    d938:	f104 0619 	add.w	r6, r4, #25
    d93c:	e7f5      	b.n	d92a <_printf_i+0x22e>
    d93e:	bf00      	nop
    d940:	000120ab 	.word	0x000120ab
    d944:	000120bc 	.word	0x000120bc

0000d948 <__swbuf_r>:
    d948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d94a:	460e      	mov	r6, r1
    d94c:	4614      	mov	r4, r2
    d94e:	4605      	mov	r5, r0
    d950:	b118      	cbz	r0, d95a <__swbuf_r+0x12>
    d952:	6983      	ldr	r3, [r0, #24]
    d954:	b90b      	cbnz	r3, d95a <__swbuf_r+0x12>
    d956:	f000 f9b7 	bl	dcc8 <__sinit>
    d95a:	4b21      	ldr	r3, [pc, #132]	; (d9e0 <__swbuf_r+0x98>)
    d95c:	429c      	cmp	r4, r3
    d95e:	d12b      	bne.n	d9b8 <__swbuf_r+0x70>
    d960:	686c      	ldr	r4, [r5, #4]
    d962:	69a3      	ldr	r3, [r4, #24]
    d964:	60a3      	str	r3, [r4, #8]
    d966:	89a3      	ldrh	r3, [r4, #12]
    d968:	071a      	lsls	r2, r3, #28
    d96a:	d52f      	bpl.n	d9cc <__swbuf_r+0x84>
    d96c:	6923      	ldr	r3, [r4, #16]
    d96e:	b36b      	cbz	r3, d9cc <__swbuf_r+0x84>
    d970:	6923      	ldr	r3, [r4, #16]
    d972:	6820      	ldr	r0, [r4, #0]
    d974:	1ac0      	subs	r0, r0, r3
    d976:	6963      	ldr	r3, [r4, #20]
    d978:	b2f6      	uxtb	r6, r6
    d97a:	4283      	cmp	r3, r0
    d97c:	4637      	mov	r7, r6
    d97e:	dc04      	bgt.n	d98a <__swbuf_r+0x42>
    d980:	4621      	mov	r1, r4
    d982:	4628      	mov	r0, r5
    d984:	f000 f922 	bl	dbcc <_fflush_r>
    d988:	bb30      	cbnz	r0, d9d8 <__swbuf_r+0x90>
    d98a:	68a3      	ldr	r3, [r4, #8]
    d98c:	3b01      	subs	r3, #1
    d98e:	60a3      	str	r3, [r4, #8]
    d990:	6823      	ldr	r3, [r4, #0]
    d992:	1c5a      	adds	r2, r3, #1
    d994:	6022      	str	r2, [r4, #0]
    d996:	701e      	strb	r6, [r3, #0]
    d998:	6963      	ldr	r3, [r4, #20]
    d99a:	3001      	adds	r0, #1
    d99c:	4283      	cmp	r3, r0
    d99e:	d004      	beq.n	d9aa <__swbuf_r+0x62>
    d9a0:	89a3      	ldrh	r3, [r4, #12]
    d9a2:	07db      	lsls	r3, r3, #31
    d9a4:	d506      	bpl.n	d9b4 <__swbuf_r+0x6c>
    d9a6:	2e0a      	cmp	r6, #10
    d9a8:	d104      	bne.n	d9b4 <__swbuf_r+0x6c>
    d9aa:	4621      	mov	r1, r4
    d9ac:	4628      	mov	r0, r5
    d9ae:	f000 f90d 	bl	dbcc <_fflush_r>
    d9b2:	b988      	cbnz	r0, d9d8 <__swbuf_r+0x90>
    d9b4:	4638      	mov	r0, r7
    d9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d9b8:	4b0a      	ldr	r3, [pc, #40]	; (d9e4 <__swbuf_r+0x9c>)
    d9ba:	429c      	cmp	r4, r3
    d9bc:	d101      	bne.n	d9c2 <__swbuf_r+0x7a>
    d9be:	68ac      	ldr	r4, [r5, #8]
    d9c0:	e7cf      	b.n	d962 <__swbuf_r+0x1a>
    d9c2:	4b09      	ldr	r3, [pc, #36]	; (d9e8 <__swbuf_r+0xa0>)
    d9c4:	429c      	cmp	r4, r3
    d9c6:	bf08      	it	eq
    d9c8:	68ec      	ldreq	r4, [r5, #12]
    d9ca:	e7ca      	b.n	d962 <__swbuf_r+0x1a>
    d9cc:	4621      	mov	r1, r4
    d9ce:	4628      	mov	r0, r5
    d9d0:	f000 f80c 	bl	d9ec <__swsetup_r>
    d9d4:	2800      	cmp	r0, #0
    d9d6:	d0cb      	beq.n	d970 <__swbuf_r+0x28>
    d9d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    d9dc:	e7ea      	b.n	d9b4 <__swbuf_r+0x6c>
    d9de:	bf00      	nop
    d9e0:	00011d80 	.word	0x00011d80
    d9e4:	00011da0 	.word	0x00011da0
    d9e8:	00011d60 	.word	0x00011d60

0000d9ec <__swsetup_r>:
    d9ec:	4b32      	ldr	r3, [pc, #200]	; (dab8 <__swsetup_r+0xcc>)
    d9ee:	b570      	push	{r4, r5, r6, lr}
    d9f0:	681d      	ldr	r5, [r3, #0]
    d9f2:	4606      	mov	r6, r0
    d9f4:	460c      	mov	r4, r1
    d9f6:	b125      	cbz	r5, da02 <__swsetup_r+0x16>
    d9f8:	69ab      	ldr	r3, [r5, #24]
    d9fa:	b913      	cbnz	r3, da02 <__swsetup_r+0x16>
    d9fc:	4628      	mov	r0, r5
    d9fe:	f000 f963 	bl	dcc8 <__sinit>
    da02:	4b2e      	ldr	r3, [pc, #184]	; (dabc <__swsetup_r+0xd0>)
    da04:	429c      	cmp	r4, r3
    da06:	d10f      	bne.n	da28 <__swsetup_r+0x3c>
    da08:	686c      	ldr	r4, [r5, #4]
    da0a:	89a3      	ldrh	r3, [r4, #12]
    da0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    da10:	0719      	lsls	r1, r3, #28
    da12:	d42c      	bmi.n	da6e <__swsetup_r+0x82>
    da14:	06dd      	lsls	r5, r3, #27
    da16:	d411      	bmi.n	da3c <__swsetup_r+0x50>
    da18:	2309      	movs	r3, #9
    da1a:	6033      	str	r3, [r6, #0]
    da1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    da20:	81a3      	strh	r3, [r4, #12]
    da22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    da26:	e03e      	b.n	daa6 <__swsetup_r+0xba>
    da28:	4b25      	ldr	r3, [pc, #148]	; (dac0 <__swsetup_r+0xd4>)
    da2a:	429c      	cmp	r4, r3
    da2c:	d101      	bne.n	da32 <__swsetup_r+0x46>
    da2e:	68ac      	ldr	r4, [r5, #8]
    da30:	e7eb      	b.n	da0a <__swsetup_r+0x1e>
    da32:	4b24      	ldr	r3, [pc, #144]	; (dac4 <__swsetup_r+0xd8>)
    da34:	429c      	cmp	r4, r3
    da36:	bf08      	it	eq
    da38:	68ec      	ldreq	r4, [r5, #12]
    da3a:	e7e6      	b.n	da0a <__swsetup_r+0x1e>
    da3c:	0758      	lsls	r0, r3, #29
    da3e:	d512      	bpl.n	da66 <__swsetup_r+0x7a>
    da40:	6b61      	ldr	r1, [r4, #52]	; 0x34
    da42:	b141      	cbz	r1, da56 <__swsetup_r+0x6a>
    da44:	f104 0344 	add.w	r3, r4, #68	; 0x44
    da48:	4299      	cmp	r1, r3
    da4a:	d002      	beq.n	da52 <__swsetup_r+0x66>
    da4c:	4630      	mov	r0, r6
    da4e:	f7ff f8c3 	bl	cbd8 <_free_r>
    da52:	2300      	movs	r3, #0
    da54:	6363      	str	r3, [r4, #52]	; 0x34
    da56:	89a3      	ldrh	r3, [r4, #12]
    da58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    da5c:	81a3      	strh	r3, [r4, #12]
    da5e:	2300      	movs	r3, #0
    da60:	6063      	str	r3, [r4, #4]
    da62:	6923      	ldr	r3, [r4, #16]
    da64:	6023      	str	r3, [r4, #0]
    da66:	89a3      	ldrh	r3, [r4, #12]
    da68:	f043 0308 	orr.w	r3, r3, #8
    da6c:	81a3      	strh	r3, [r4, #12]
    da6e:	6923      	ldr	r3, [r4, #16]
    da70:	b94b      	cbnz	r3, da86 <__swsetup_r+0x9a>
    da72:	89a3      	ldrh	r3, [r4, #12]
    da74:	f403 7320 	and.w	r3, r3, #640	; 0x280
    da78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    da7c:	d003      	beq.n	da86 <__swsetup_r+0x9a>
    da7e:	4621      	mov	r1, r4
    da80:	4630      	mov	r0, r6
    da82:	f000 f99f 	bl	ddc4 <__smakebuf_r>
    da86:	89a0      	ldrh	r0, [r4, #12]
    da88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    da8c:	f010 0301 	ands.w	r3, r0, #1
    da90:	d00a      	beq.n	daa8 <__swsetup_r+0xbc>
    da92:	2300      	movs	r3, #0
    da94:	60a3      	str	r3, [r4, #8]
    da96:	6963      	ldr	r3, [r4, #20]
    da98:	425b      	negs	r3, r3
    da9a:	61a3      	str	r3, [r4, #24]
    da9c:	6923      	ldr	r3, [r4, #16]
    da9e:	b943      	cbnz	r3, dab2 <__swsetup_r+0xc6>
    daa0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    daa4:	d1ba      	bne.n	da1c <__swsetup_r+0x30>
    daa6:	bd70      	pop	{r4, r5, r6, pc}
    daa8:	0781      	lsls	r1, r0, #30
    daaa:	bf58      	it	pl
    daac:	6963      	ldrpl	r3, [r4, #20]
    daae:	60a3      	str	r3, [r4, #8]
    dab0:	e7f4      	b.n	da9c <__swsetup_r+0xb0>
    dab2:	2000      	movs	r0, #0
    dab4:	e7f7      	b.n	daa6 <__swsetup_r+0xba>
    dab6:	bf00      	nop
    dab8:	20004108 	.word	0x20004108
    dabc:	00011d80 	.word	0x00011d80
    dac0:	00011da0 	.word	0x00011da0
    dac4:	00011d60 	.word	0x00011d60

0000dac8 <__sflush_r>:
    dac8:	898a      	ldrh	r2, [r1, #12]
    daca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dacc:	4605      	mov	r5, r0
    dace:	0710      	lsls	r0, r2, #28
    dad0:	460c      	mov	r4, r1
    dad2:	d457      	bmi.n	db84 <__sflush_r+0xbc>
    dad4:	684b      	ldr	r3, [r1, #4]
    dad6:	2b00      	cmp	r3, #0
    dad8:	dc04      	bgt.n	dae4 <__sflush_r+0x1c>
    dada:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    dadc:	2b00      	cmp	r3, #0
    dade:	dc01      	bgt.n	dae4 <__sflush_r+0x1c>
    dae0:	2000      	movs	r0, #0
    dae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    dae6:	2e00      	cmp	r6, #0
    dae8:	d0fa      	beq.n	dae0 <__sflush_r+0x18>
    daea:	2300      	movs	r3, #0
    daec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    daf0:	682f      	ldr	r7, [r5, #0]
    daf2:	602b      	str	r3, [r5, #0]
    daf4:	d032      	beq.n	db5c <__sflush_r+0x94>
    daf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    daf8:	89a3      	ldrh	r3, [r4, #12]
    dafa:	075a      	lsls	r2, r3, #29
    dafc:	d505      	bpl.n	db0a <__sflush_r+0x42>
    dafe:	6863      	ldr	r3, [r4, #4]
    db00:	1ac0      	subs	r0, r0, r3
    db02:	6b63      	ldr	r3, [r4, #52]	; 0x34
    db04:	b10b      	cbz	r3, db0a <__sflush_r+0x42>
    db06:	6c23      	ldr	r3, [r4, #64]	; 0x40
    db08:	1ac0      	subs	r0, r0, r3
    db0a:	2300      	movs	r3, #0
    db0c:	4602      	mov	r2, r0
    db0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    db10:	6a21      	ldr	r1, [r4, #32]
    db12:	4628      	mov	r0, r5
    db14:	47b0      	blx	r6
    db16:	1c43      	adds	r3, r0, #1
    db18:	89a3      	ldrh	r3, [r4, #12]
    db1a:	d106      	bne.n	db2a <__sflush_r+0x62>
    db1c:	6829      	ldr	r1, [r5, #0]
    db1e:	291d      	cmp	r1, #29
    db20:	d82c      	bhi.n	db7c <__sflush_r+0xb4>
    db22:	4a29      	ldr	r2, [pc, #164]	; (dbc8 <__sflush_r+0x100>)
    db24:	40ca      	lsrs	r2, r1
    db26:	07d6      	lsls	r6, r2, #31
    db28:	d528      	bpl.n	db7c <__sflush_r+0xb4>
    db2a:	2200      	movs	r2, #0
    db2c:	6062      	str	r2, [r4, #4]
    db2e:	04d9      	lsls	r1, r3, #19
    db30:	6922      	ldr	r2, [r4, #16]
    db32:	6022      	str	r2, [r4, #0]
    db34:	d504      	bpl.n	db40 <__sflush_r+0x78>
    db36:	1c42      	adds	r2, r0, #1
    db38:	d101      	bne.n	db3e <__sflush_r+0x76>
    db3a:	682b      	ldr	r3, [r5, #0]
    db3c:	b903      	cbnz	r3, db40 <__sflush_r+0x78>
    db3e:	6560      	str	r0, [r4, #84]	; 0x54
    db40:	6b61      	ldr	r1, [r4, #52]	; 0x34
    db42:	602f      	str	r7, [r5, #0]
    db44:	2900      	cmp	r1, #0
    db46:	d0cb      	beq.n	dae0 <__sflush_r+0x18>
    db48:	f104 0344 	add.w	r3, r4, #68	; 0x44
    db4c:	4299      	cmp	r1, r3
    db4e:	d002      	beq.n	db56 <__sflush_r+0x8e>
    db50:	4628      	mov	r0, r5
    db52:	f7ff f841 	bl	cbd8 <_free_r>
    db56:	2000      	movs	r0, #0
    db58:	6360      	str	r0, [r4, #52]	; 0x34
    db5a:	e7c2      	b.n	dae2 <__sflush_r+0x1a>
    db5c:	6a21      	ldr	r1, [r4, #32]
    db5e:	2301      	movs	r3, #1
    db60:	4628      	mov	r0, r5
    db62:	47b0      	blx	r6
    db64:	1c41      	adds	r1, r0, #1
    db66:	d1c7      	bne.n	daf8 <__sflush_r+0x30>
    db68:	682b      	ldr	r3, [r5, #0]
    db6a:	2b00      	cmp	r3, #0
    db6c:	d0c4      	beq.n	daf8 <__sflush_r+0x30>
    db6e:	2b1d      	cmp	r3, #29
    db70:	d001      	beq.n	db76 <__sflush_r+0xae>
    db72:	2b16      	cmp	r3, #22
    db74:	d101      	bne.n	db7a <__sflush_r+0xb2>
    db76:	602f      	str	r7, [r5, #0]
    db78:	e7b2      	b.n	dae0 <__sflush_r+0x18>
    db7a:	89a3      	ldrh	r3, [r4, #12]
    db7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    db80:	81a3      	strh	r3, [r4, #12]
    db82:	e7ae      	b.n	dae2 <__sflush_r+0x1a>
    db84:	690f      	ldr	r7, [r1, #16]
    db86:	2f00      	cmp	r7, #0
    db88:	d0aa      	beq.n	dae0 <__sflush_r+0x18>
    db8a:	0793      	lsls	r3, r2, #30
    db8c:	680e      	ldr	r6, [r1, #0]
    db8e:	bf08      	it	eq
    db90:	694b      	ldreq	r3, [r1, #20]
    db92:	600f      	str	r7, [r1, #0]
    db94:	bf18      	it	ne
    db96:	2300      	movne	r3, #0
    db98:	1bf6      	subs	r6, r6, r7
    db9a:	608b      	str	r3, [r1, #8]
    db9c:	2e00      	cmp	r6, #0
    db9e:	dd9f      	ble.n	dae0 <__sflush_r+0x18>
    dba0:	6a21      	ldr	r1, [r4, #32]
    dba2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
    dba6:	4633      	mov	r3, r6
    dba8:	463a      	mov	r2, r7
    dbaa:	4628      	mov	r0, r5
    dbac:	47e0      	blx	ip
    dbae:	2800      	cmp	r0, #0
    dbb0:	dc06      	bgt.n	dbc0 <__sflush_r+0xf8>
    dbb2:	89a3      	ldrh	r3, [r4, #12]
    dbb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dbb8:	81a3      	strh	r3, [r4, #12]
    dbba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dbbe:	e790      	b.n	dae2 <__sflush_r+0x1a>
    dbc0:	4407      	add	r7, r0
    dbc2:	1a36      	subs	r6, r6, r0
    dbc4:	e7ea      	b.n	db9c <__sflush_r+0xd4>
    dbc6:	bf00      	nop
    dbc8:	20400001 	.word	0x20400001

0000dbcc <_fflush_r>:
    dbcc:	b538      	push	{r3, r4, r5, lr}
    dbce:	690b      	ldr	r3, [r1, #16]
    dbd0:	4605      	mov	r5, r0
    dbd2:	460c      	mov	r4, r1
    dbd4:	b913      	cbnz	r3, dbdc <_fflush_r+0x10>
    dbd6:	2500      	movs	r5, #0
    dbd8:	4628      	mov	r0, r5
    dbda:	bd38      	pop	{r3, r4, r5, pc}
    dbdc:	b118      	cbz	r0, dbe6 <_fflush_r+0x1a>
    dbde:	6983      	ldr	r3, [r0, #24]
    dbe0:	b90b      	cbnz	r3, dbe6 <_fflush_r+0x1a>
    dbe2:	f000 f871 	bl	dcc8 <__sinit>
    dbe6:	4b14      	ldr	r3, [pc, #80]	; (dc38 <_fflush_r+0x6c>)
    dbe8:	429c      	cmp	r4, r3
    dbea:	d11b      	bne.n	dc24 <_fflush_r+0x58>
    dbec:	686c      	ldr	r4, [r5, #4]
    dbee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    dbf2:	2b00      	cmp	r3, #0
    dbf4:	d0ef      	beq.n	dbd6 <_fflush_r+0xa>
    dbf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
    dbf8:	07d0      	lsls	r0, r2, #31
    dbfa:	d404      	bmi.n	dc06 <_fflush_r+0x3a>
    dbfc:	0599      	lsls	r1, r3, #22
    dbfe:	d402      	bmi.n	dc06 <_fflush_r+0x3a>
    dc00:	6da0      	ldr	r0, [r4, #88]	; 0x58
    dc02:	f7f8 fec1 	bl	6988 <__retarget_lock_acquire_recursive>
    dc06:	4628      	mov	r0, r5
    dc08:	4621      	mov	r1, r4
    dc0a:	f7ff ff5d 	bl	dac8 <__sflush_r>
    dc0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    dc10:	07da      	lsls	r2, r3, #31
    dc12:	4605      	mov	r5, r0
    dc14:	d4e0      	bmi.n	dbd8 <_fflush_r+0xc>
    dc16:	89a3      	ldrh	r3, [r4, #12]
    dc18:	059b      	lsls	r3, r3, #22
    dc1a:	d4dd      	bmi.n	dbd8 <_fflush_r+0xc>
    dc1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    dc1e:	f7f8 fed3 	bl	69c8 <__retarget_lock_release_recursive>
    dc22:	e7d9      	b.n	dbd8 <_fflush_r+0xc>
    dc24:	4b05      	ldr	r3, [pc, #20]	; (dc3c <_fflush_r+0x70>)
    dc26:	429c      	cmp	r4, r3
    dc28:	d101      	bne.n	dc2e <_fflush_r+0x62>
    dc2a:	68ac      	ldr	r4, [r5, #8]
    dc2c:	e7df      	b.n	dbee <_fflush_r+0x22>
    dc2e:	4b04      	ldr	r3, [pc, #16]	; (dc40 <_fflush_r+0x74>)
    dc30:	429c      	cmp	r4, r3
    dc32:	bf08      	it	eq
    dc34:	68ec      	ldreq	r4, [r5, #12]
    dc36:	e7da      	b.n	dbee <_fflush_r+0x22>
    dc38:	00011d80 	.word	0x00011d80
    dc3c:	00011da0 	.word	0x00011da0
    dc40:	00011d60 	.word	0x00011d60

0000dc44 <std>:
    dc44:	2300      	movs	r3, #0
    dc46:	b510      	push	{r4, lr}
    dc48:	4604      	mov	r4, r0
    dc4a:	e9c0 3300 	strd	r3, r3, [r0]
    dc4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
    dc52:	6083      	str	r3, [r0, #8]
    dc54:	8181      	strh	r1, [r0, #12]
    dc56:	6643      	str	r3, [r0, #100]	; 0x64
    dc58:	81c2      	strh	r2, [r0, #14]
    dc5a:	6183      	str	r3, [r0, #24]
    dc5c:	4619      	mov	r1, r3
    dc5e:	2208      	movs	r2, #8
    dc60:	305c      	adds	r0, #92	; 0x5c
    dc62:	f001 fbd1 	bl	f408 <memset>
    dc66:	4b05      	ldr	r3, [pc, #20]	; (dc7c <std+0x38>)
    dc68:	6263      	str	r3, [r4, #36]	; 0x24
    dc6a:	4b05      	ldr	r3, [pc, #20]	; (dc80 <std+0x3c>)
    dc6c:	62a3      	str	r3, [r4, #40]	; 0x28
    dc6e:	4b05      	ldr	r3, [pc, #20]	; (dc84 <std+0x40>)
    dc70:	62e3      	str	r3, [r4, #44]	; 0x2c
    dc72:	4b05      	ldr	r3, [pc, #20]	; (dc88 <std+0x44>)
    dc74:	6224      	str	r4, [r4, #32]
    dc76:	6323      	str	r3, [r4, #48]	; 0x30
    dc78:	bd10      	pop	{r4, pc}
    dc7a:	bf00      	nop
    dc7c:	0000f98f 	.word	0x0000f98f
    dc80:	0000f9b1 	.word	0x0000f9b1
    dc84:	0000f9e9 	.word	0x0000f9e9
    dc88:	0000fa0d 	.word	0x0000fa0d

0000dc8c <_cleanup_r>:
    dc8c:	4901      	ldr	r1, [pc, #4]	; (dc94 <_cleanup_r+0x8>)
    dc8e:	f001 be10 	b.w	f8b2 <_fwalk_reent>
    dc92:	bf00      	nop
    dc94:	0000dbcd 	.word	0x0000dbcd

0000dc98 <__sfp_lock_acquire>:
    dc98:	4801      	ldr	r0, [pc, #4]	; (dca0 <__sfp_lock_acquire+0x8>)
    dc9a:	f7f8 be75 	b.w	6988 <__retarget_lock_acquire_recursive>
    dc9e:	bf00      	nop
    dca0:	20004210 	.word	0x20004210

0000dca4 <__sfp_lock_release>:
    dca4:	4801      	ldr	r0, [pc, #4]	; (dcac <__sfp_lock_release+0x8>)
    dca6:	f7f8 be8f 	b.w	69c8 <__retarget_lock_release_recursive>
    dcaa:	bf00      	nop
    dcac:	20004210 	.word	0x20004210

0000dcb0 <__sinit_lock_acquire>:
    dcb0:	4801      	ldr	r0, [pc, #4]	; (dcb8 <__sinit_lock_acquire+0x8>)
    dcb2:	f7f8 be69 	b.w	6988 <__retarget_lock_acquire_recursive>
    dcb6:	bf00      	nop
    dcb8:	20004224 	.word	0x20004224

0000dcbc <__sinit_lock_release>:
    dcbc:	4801      	ldr	r0, [pc, #4]	; (dcc4 <__sinit_lock_release+0x8>)
    dcbe:	f7f8 be83 	b.w	69c8 <__retarget_lock_release_recursive>
    dcc2:	bf00      	nop
    dcc4:	20004224 	.word	0x20004224

0000dcc8 <__sinit>:
    dcc8:	b510      	push	{r4, lr}
    dcca:	4604      	mov	r4, r0
    dccc:	f7ff fff0 	bl	dcb0 <__sinit_lock_acquire>
    dcd0:	69a3      	ldr	r3, [r4, #24]
    dcd2:	b11b      	cbz	r3, dcdc <__sinit+0x14>
    dcd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dcd8:	f7ff bff0 	b.w	dcbc <__sinit_lock_release>
    dcdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    dce0:	6523      	str	r3, [r4, #80]	; 0x50
    dce2:	4b13      	ldr	r3, [pc, #76]	; (dd30 <__sinit+0x68>)
    dce4:	4a13      	ldr	r2, [pc, #76]	; (dd34 <__sinit+0x6c>)
    dce6:	681b      	ldr	r3, [r3, #0]
    dce8:	62a2      	str	r2, [r4, #40]	; 0x28
    dcea:	42a3      	cmp	r3, r4
    dcec:	bf04      	itt	eq
    dcee:	2301      	moveq	r3, #1
    dcf0:	61a3      	streq	r3, [r4, #24]
    dcf2:	4620      	mov	r0, r4
    dcf4:	f000 f820 	bl	dd38 <__sfp>
    dcf8:	6060      	str	r0, [r4, #4]
    dcfa:	4620      	mov	r0, r4
    dcfc:	f000 f81c 	bl	dd38 <__sfp>
    dd00:	60a0      	str	r0, [r4, #8]
    dd02:	4620      	mov	r0, r4
    dd04:	f000 f818 	bl	dd38 <__sfp>
    dd08:	2200      	movs	r2, #0
    dd0a:	60e0      	str	r0, [r4, #12]
    dd0c:	2104      	movs	r1, #4
    dd0e:	6860      	ldr	r0, [r4, #4]
    dd10:	f7ff ff98 	bl	dc44 <std>
    dd14:	68a0      	ldr	r0, [r4, #8]
    dd16:	2201      	movs	r2, #1
    dd18:	2109      	movs	r1, #9
    dd1a:	f7ff ff93 	bl	dc44 <std>
    dd1e:	68e0      	ldr	r0, [r4, #12]
    dd20:	2202      	movs	r2, #2
    dd22:	2112      	movs	r1, #18
    dd24:	f7ff ff8e 	bl	dc44 <std>
    dd28:	2301      	movs	r3, #1
    dd2a:	61a3      	str	r3, [r4, #24]
    dd2c:	e7d2      	b.n	dcd4 <__sinit+0xc>
    dd2e:	bf00      	nop
    dd30:	00011d50 	.word	0x00011d50
    dd34:	0000dc8d 	.word	0x0000dc8d

0000dd38 <__sfp>:
    dd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd3a:	4607      	mov	r7, r0
    dd3c:	f7ff ffac 	bl	dc98 <__sfp_lock_acquire>
    dd40:	4b1e      	ldr	r3, [pc, #120]	; (ddbc <__sfp+0x84>)
    dd42:	681e      	ldr	r6, [r3, #0]
    dd44:	69b3      	ldr	r3, [r6, #24]
    dd46:	b913      	cbnz	r3, dd4e <__sfp+0x16>
    dd48:	4630      	mov	r0, r6
    dd4a:	f7ff ffbd 	bl	dcc8 <__sinit>
    dd4e:	3648      	adds	r6, #72	; 0x48
    dd50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    dd54:	3b01      	subs	r3, #1
    dd56:	d503      	bpl.n	dd60 <__sfp+0x28>
    dd58:	6833      	ldr	r3, [r6, #0]
    dd5a:	b30b      	cbz	r3, dda0 <__sfp+0x68>
    dd5c:	6836      	ldr	r6, [r6, #0]
    dd5e:	e7f7      	b.n	dd50 <__sfp+0x18>
    dd60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    dd64:	b9d5      	cbnz	r5, dd9c <__sfp+0x64>
    dd66:	4b16      	ldr	r3, [pc, #88]	; (ddc0 <__sfp+0x88>)
    dd68:	60e3      	str	r3, [r4, #12]
    dd6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    dd6e:	6665      	str	r5, [r4, #100]	; 0x64
    dd70:	f7f8 fdd4 	bl	691c <__retarget_lock_init_recursive>
    dd74:	f7ff ff96 	bl	dca4 <__sfp_lock_release>
    dd78:	e9c4 5501 	strd	r5, r5, [r4, #4]
    dd7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
    dd80:	6025      	str	r5, [r4, #0]
    dd82:	61a5      	str	r5, [r4, #24]
    dd84:	2208      	movs	r2, #8
    dd86:	4629      	mov	r1, r5
    dd88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    dd8c:	f001 fb3c 	bl	f408 <memset>
    dd90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    dd94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    dd98:	4620      	mov	r0, r4
    dd9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dd9c:	3468      	adds	r4, #104	; 0x68
    dd9e:	e7d9      	b.n	dd54 <__sfp+0x1c>
    dda0:	2104      	movs	r1, #4
    dda2:	4638      	mov	r0, r7
    dda4:	f001 fd6f 	bl	f886 <__sfmoreglue>
    dda8:	4604      	mov	r4, r0
    ddaa:	6030      	str	r0, [r6, #0]
    ddac:	2800      	cmp	r0, #0
    ddae:	d1d5      	bne.n	dd5c <__sfp+0x24>
    ddb0:	f7ff ff78 	bl	dca4 <__sfp_lock_release>
    ddb4:	230c      	movs	r3, #12
    ddb6:	603b      	str	r3, [r7, #0]
    ddb8:	e7ee      	b.n	dd98 <__sfp+0x60>
    ddba:	bf00      	nop
    ddbc:	00011d50 	.word	0x00011d50
    ddc0:	ffff0001 	.word	0xffff0001

0000ddc4 <__smakebuf_r>:
    ddc4:	898b      	ldrh	r3, [r1, #12]
    ddc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ddc8:	079d      	lsls	r5, r3, #30
    ddca:	4606      	mov	r6, r0
    ddcc:	460c      	mov	r4, r1
    ddce:	d507      	bpl.n	dde0 <__smakebuf_r+0x1c>
    ddd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
    ddd4:	6023      	str	r3, [r4, #0]
    ddd6:	6123      	str	r3, [r4, #16]
    ddd8:	2301      	movs	r3, #1
    ddda:	6163      	str	r3, [r4, #20]
    dddc:	b002      	add	sp, #8
    ddde:	bd70      	pop	{r4, r5, r6, pc}
    dde0:	ab01      	add	r3, sp, #4
    dde2:	466a      	mov	r2, sp
    dde4:	f001 fd84 	bl	f8f0 <__swhatbuf_r>
    dde8:	9900      	ldr	r1, [sp, #0]
    ddea:	4605      	mov	r5, r0
    ddec:	4630      	mov	r0, r6
    ddee:	f7fe ff3d 	bl	cc6c <_malloc_r>
    ddf2:	b948      	cbnz	r0, de08 <__smakebuf_r+0x44>
    ddf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    ddf8:	059a      	lsls	r2, r3, #22
    ddfa:	d4ef      	bmi.n	dddc <__smakebuf_r+0x18>
    ddfc:	f023 0303 	bic.w	r3, r3, #3
    de00:	f043 0302 	orr.w	r3, r3, #2
    de04:	81a3      	strh	r3, [r4, #12]
    de06:	e7e3      	b.n	ddd0 <__smakebuf_r+0xc>
    de08:	4b0d      	ldr	r3, [pc, #52]	; (de40 <__smakebuf_r+0x7c>)
    de0a:	62b3      	str	r3, [r6, #40]	; 0x28
    de0c:	89a3      	ldrh	r3, [r4, #12]
    de0e:	6020      	str	r0, [r4, #0]
    de10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    de14:	81a3      	strh	r3, [r4, #12]
    de16:	9b00      	ldr	r3, [sp, #0]
    de18:	6163      	str	r3, [r4, #20]
    de1a:	9b01      	ldr	r3, [sp, #4]
    de1c:	6120      	str	r0, [r4, #16]
    de1e:	b15b      	cbz	r3, de38 <__smakebuf_r+0x74>
    de20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    de24:	4630      	mov	r0, r6
    de26:	f000 f85b 	bl	dee0 <_isatty_r>
    de2a:	b128      	cbz	r0, de38 <__smakebuf_r+0x74>
    de2c:	89a3      	ldrh	r3, [r4, #12]
    de2e:	f023 0303 	bic.w	r3, r3, #3
    de32:	f043 0301 	orr.w	r3, r3, #1
    de36:	81a3      	strh	r3, [r4, #12]
    de38:	89a0      	ldrh	r0, [r4, #12]
    de3a:	4305      	orrs	r5, r0
    de3c:	81a5      	strh	r5, [r4, #12]
    de3e:	e7cd      	b.n	dddc <__smakebuf_r+0x18>
    de40:	0000dc8d 	.word	0x0000dc8d

0000de44 <raise>:
    de44:	4b02      	ldr	r3, [pc, #8]	; (de50 <raise+0xc>)
    de46:	4601      	mov	r1, r0
    de48:	6818      	ldr	r0, [r3, #0]
    de4a:	f001 bd76 	b.w	f93a <_raise_r>
    de4e:	bf00      	nop
    de50:	20004108 	.word	0x20004108

0000de54 <_kill_r>:
    de54:	b538      	push	{r3, r4, r5, lr}
    de56:	4d07      	ldr	r5, [pc, #28]	; (de74 <_kill_r+0x20>)
    de58:	2300      	movs	r3, #0
    de5a:	4604      	mov	r4, r0
    de5c:	4608      	mov	r0, r1
    de5e:	4611      	mov	r1, r2
    de60:	602b      	str	r3, [r5, #0]
    de62:	f000 fd15 	bl	e890 <_kill>
    de66:	1c43      	adds	r3, r0, #1
    de68:	d102      	bne.n	de70 <_kill_r+0x1c>
    de6a:	682b      	ldr	r3, [r5, #0]
    de6c:	b103      	cbz	r3, de70 <_kill_r+0x1c>
    de6e:	6023      	str	r3, [r4, #0]
    de70:	bd38      	pop	{r3, r4, r5, pc}
    de72:	bf00      	nop
    de74:	2000537c 	.word	0x2000537c

0000de78 <_write_r>:
    de78:	b538      	push	{r3, r4, r5, lr}
    de7a:	4d07      	ldr	r5, [pc, #28]	; (de98 <_write_r+0x20>)
    de7c:	4604      	mov	r4, r0
    de7e:	4608      	mov	r0, r1
    de80:	4611      	mov	r1, r2
    de82:	2200      	movs	r2, #0
    de84:	602a      	str	r2, [r5, #0]
    de86:	461a      	mov	r2, r3
    de88:	f000 fcf2 	bl	e870 <_write>
    de8c:	1c43      	adds	r3, r0, #1
    de8e:	d102      	bne.n	de96 <_write_r+0x1e>
    de90:	682b      	ldr	r3, [r5, #0]
    de92:	b103      	cbz	r3, de96 <_write_r+0x1e>
    de94:	6023      	str	r3, [r4, #0]
    de96:	bd38      	pop	{r3, r4, r5, pc}
    de98:	2000537c 	.word	0x2000537c

0000de9c <_close_r>:
    de9c:	b538      	push	{r3, r4, r5, lr}
    de9e:	4d06      	ldr	r5, [pc, #24]	; (deb8 <_close_r+0x1c>)
    dea0:	2300      	movs	r3, #0
    dea2:	4604      	mov	r4, r0
    dea4:	4608      	mov	r0, r1
    dea6:	602b      	str	r3, [r5, #0]
    dea8:	f000 fce8 	bl	e87c <_close>
    deac:	1c43      	adds	r3, r0, #1
    deae:	d102      	bne.n	deb6 <_close_r+0x1a>
    deb0:	682b      	ldr	r3, [r5, #0]
    deb2:	b103      	cbz	r3, deb6 <_close_r+0x1a>
    deb4:	6023      	str	r3, [r4, #0]
    deb6:	bd38      	pop	{r3, r4, r5, pc}
    deb8:	2000537c 	.word	0x2000537c

0000debc <_fstat_r>:
    debc:	b538      	push	{r3, r4, r5, lr}
    debe:	4d07      	ldr	r5, [pc, #28]	; (dedc <_fstat_r+0x20>)
    dec0:	2300      	movs	r3, #0
    dec2:	4604      	mov	r4, r0
    dec4:	4608      	mov	r0, r1
    dec6:	4611      	mov	r1, r2
    dec8:	602b      	str	r3, [r5, #0]
    deca:	f000 fce5 	bl	e898 <_fstat>
    dece:	1c43      	adds	r3, r0, #1
    ded0:	d102      	bne.n	ded8 <_fstat_r+0x1c>
    ded2:	682b      	ldr	r3, [r5, #0]
    ded4:	b103      	cbz	r3, ded8 <_fstat_r+0x1c>
    ded6:	6023      	str	r3, [r4, #0]
    ded8:	bd38      	pop	{r3, r4, r5, pc}
    deda:	bf00      	nop
    dedc:	2000537c 	.word	0x2000537c

0000dee0 <_isatty_r>:
    dee0:	b538      	push	{r3, r4, r5, lr}
    dee2:	4d06      	ldr	r5, [pc, #24]	; (defc <_isatty_r+0x1c>)
    dee4:	2300      	movs	r3, #0
    dee6:	4604      	mov	r4, r0
    dee8:	4608      	mov	r0, r1
    deea:	602b      	str	r3, [r5, #0]
    deec:	f000 fccb 	bl	e886 <_isatty>
    def0:	1c43      	adds	r3, r0, #1
    def2:	d102      	bne.n	defa <_isatty_r+0x1a>
    def4:	682b      	ldr	r3, [r5, #0]
    def6:	b103      	cbz	r3, defa <_isatty_r+0x1a>
    def8:	6023      	str	r3, [r4, #0]
    defa:	bd38      	pop	{r3, r4, r5, pc}
    defc:	2000537c 	.word	0x2000537c

0000df00 <_lseek_r>:
    df00:	b538      	push	{r3, r4, r5, lr}
    df02:	4d07      	ldr	r5, [pc, #28]	; (df20 <_lseek_r+0x20>)
    df04:	4604      	mov	r4, r0
    df06:	4608      	mov	r0, r1
    df08:	4611      	mov	r1, r2
    df0a:	2200      	movs	r2, #0
    df0c:	602a      	str	r2, [r5, #0]
    df0e:	461a      	mov	r2, r3
    df10:	f000 fcb7 	bl	e882 <_lseek>
    df14:	1c43      	adds	r3, r0, #1
    df16:	d102      	bne.n	df1e <_lseek_r+0x1e>
    df18:	682b      	ldr	r3, [r5, #0]
    df1a:	b103      	cbz	r3, df1e <_lseek_r+0x1e>
    df1c:	6023      	str	r3, [r4, #0]
    df1e:	bd38      	pop	{r3, r4, r5, pc}
    df20:	2000537c 	.word	0x2000537c

0000df24 <_read_r>:
    df24:	b538      	push	{r3, r4, r5, lr}
    df26:	4d07      	ldr	r5, [pc, #28]	; (df44 <_read_r+0x20>)
    df28:	4604      	mov	r4, r0
    df2a:	4608      	mov	r0, r1
    df2c:	4611      	mov	r1, r2
    df2e:	2200      	movs	r2, #0
    df30:	602a      	str	r2, [r5, #0]
    df32:	461a      	mov	r2, r3
    df34:	f000 fc96 	bl	e864 <_read>
    df38:	1c43      	adds	r3, r0, #1
    df3a:	d102      	bne.n	df42 <_read_r+0x1e>
    df3c:	682b      	ldr	r3, [r5, #0]
    df3e:	b103      	cbz	r3, df42 <_read_r+0x1e>
    df40:	6023      	str	r3, [r4, #0]
    df42:	bd38      	pop	{r3, r4, r5, pc}
    df44:	2000537c 	.word	0x2000537c

0000df48 <nrf_cc3xx_platform_init_no_rng>:
    df48:	b510      	push	{r4, lr}
    df4a:	4c0a      	ldr	r4, [pc, #40]	; (df74 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    df4c:	6823      	ldr	r3, [r4, #0]
    df4e:	b11b      	cbz	r3, df58 <nrf_cc3xx_platform_init_no_rng+0x10>
    df50:	2301      	movs	r3, #1
    df52:	6023      	str	r3, [r4, #0]
    df54:	2000      	movs	r0, #0
    df56:	bd10      	pop	{r4, pc}
    df58:	f000 f8ce 	bl	e0f8 <CC_LibInitNoRng>
    df5c:	2800      	cmp	r0, #0
    df5e:	d0f7      	beq.n	df50 <nrf_cc3xx_platform_init_no_rng+0x8>
    df60:	3801      	subs	r0, #1
    df62:	2806      	cmp	r0, #6
    df64:	d803      	bhi.n	df6e <nrf_cc3xx_platform_init_no_rng+0x26>
    df66:	4b04      	ldr	r3, [pc, #16]	; (df78 <nrf_cc3xx_platform_init_no_rng+0x30>)
    df68:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    df6c:	bd10      	pop	{r4, pc}
    df6e:	4803      	ldr	r0, [pc, #12]	; (df7c <nrf_cc3xx_platform_init_no_rng+0x34>)
    df70:	bd10      	pop	{r4, pc}
    df72:	bf00      	nop
    df74:	20005380 	.word	0x20005380
    df78:	00011dc0 	.word	0x00011dc0
    df7c:	ffff8ffe 	.word	0xffff8ffe

0000df80 <nrf_cc3xx_platform_abort>:
    df80:	f3bf 8f4f 	dsb	sy
    df84:	4905      	ldr	r1, [pc, #20]	; (df9c <nrf_cc3xx_platform_abort+0x1c>)
    df86:	4b06      	ldr	r3, [pc, #24]	; (dfa0 <nrf_cc3xx_platform_abort+0x20>)
    df88:	68ca      	ldr	r2, [r1, #12]
    df8a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    df8e:	4313      	orrs	r3, r2
    df90:	60cb      	str	r3, [r1, #12]
    df92:	f3bf 8f4f 	dsb	sy
    df96:	bf00      	nop
    df98:	e7fd      	b.n	df96 <nrf_cc3xx_platform_abort+0x16>
    df9a:	bf00      	nop
    df9c:	e000ed00 	.word	0xe000ed00
    dfa0:	05fa0004 	.word	0x05fa0004

0000dfa4 <CC_PalAbort>:
    dfa4:	b410      	push	{r4}
    dfa6:	4b09      	ldr	r3, [pc, #36]	; (dfcc <CC_PalAbort+0x28>)
    dfa8:	4909      	ldr	r1, [pc, #36]	; (dfd0 <CC_PalAbort+0x2c>)
    dfaa:	4c0a      	ldr	r4, [pc, #40]	; (dfd4 <CC_PalAbort+0x30>)
    dfac:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    dfb0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    dfb4:	6849      	ldr	r1, [r1, #4]
    dfb6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    dfba:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    dfbe:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    dfc2:	2300      	movs	r3, #0
    dfc4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    dfc8:	bc10      	pop	{r4}
    dfca:	4708      	bx	r1
    dfcc:	5002b000 	.word	0x5002b000
    dfd0:	2000416c 	.word	0x2000416c
    dfd4:	5002a000 	.word	0x5002a000

0000dfd8 <nrf_cc3xx_platform_set_abort>:
    dfd8:	e9d0 1200 	ldrd	r1, r2, [r0]
    dfdc:	4b01      	ldr	r3, [pc, #4]	; (dfe4 <nrf_cc3xx_platform_set_abort+0xc>)
    dfde:	e9c3 1200 	strd	r1, r2, [r3]
    dfe2:	4770      	bx	lr
    dfe4:	2000416c 	.word	0x2000416c

0000dfe8 <mutex_free>:
    dfe8:	b510      	push	{r4, lr}
    dfea:	4604      	mov	r4, r0
    dfec:	b130      	cbz	r0, dffc <mutex_free+0x14>
    dfee:	6863      	ldr	r3, [r4, #4]
    dff0:	06db      	lsls	r3, r3, #27
    dff2:	d502      	bpl.n	dffa <mutex_free+0x12>
    dff4:	2300      	movs	r3, #0
    dff6:	6023      	str	r3, [r4, #0]
    dff8:	6063      	str	r3, [r4, #4]
    dffa:	bd10      	pop	{r4, pc}
    dffc:	4b02      	ldr	r3, [pc, #8]	; (e008 <mutex_free+0x20>)
    dffe:	4803      	ldr	r0, [pc, #12]	; (e00c <mutex_free+0x24>)
    e000:	685b      	ldr	r3, [r3, #4]
    e002:	4798      	blx	r3
    e004:	e7f3      	b.n	dfee <mutex_free+0x6>
    e006:	bf00      	nop
    e008:	2000416c 	.word	0x2000416c
    e00c:	00011ddc 	.word	0x00011ddc

0000e010 <mutex_lock>:
    e010:	b1b0      	cbz	r0, e040 <mutex_lock+0x30>
    e012:	6843      	ldr	r3, [r0, #4]
    e014:	b193      	cbz	r3, e03c <mutex_lock+0x2c>
    e016:	06db      	lsls	r3, r3, #27
    e018:	d50e      	bpl.n	e038 <mutex_lock+0x28>
    e01a:	2301      	movs	r3, #1
    e01c:	e850 2f00 	ldrex	r2, [r0]
    e020:	4619      	mov	r1, r3
    e022:	e840 1c00 	strex	ip, r1, [r0]
    e026:	f09c 0f00 	teq	ip, #0
    e02a:	d1f7      	bne.n	e01c <mutex_lock+0xc>
    e02c:	2a01      	cmp	r2, #1
    e02e:	d0f5      	beq.n	e01c <mutex_lock+0xc>
    e030:	f3bf 8f5f 	dmb	sy
    e034:	2000      	movs	r0, #0
    e036:	4770      	bx	lr
    e038:	4803      	ldr	r0, [pc, #12]	; (e048 <mutex_lock+0x38>)
    e03a:	4770      	bx	lr
    e03c:	4803      	ldr	r0, [pc, #12]	; (e04c <mutex_lock+0x3c>)
    e03e:	4770      	bx	lr
    e040:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    e044:	4770      	bx	lr
    e046:	bf00      	nop
    e048:	ffff8fe9 	.word	0xffff8fe9
    e04c:	ffff8fea 	.word	0xffff8fea

0000e050 <mutex_unlock>:
    e050:	b168      	cbz	r0, e06e <mutex_unlock+0x1e>
    e052:	6843      	ldr	r3, [r0, #4]
    e054:	b13b      	cbz	r3, e066 <mutex_unlock+0x16>
    e056:	06db      	lsls	r3, r3, #27
    e058:	d507      	bpl.n	e06a <mutex_unlock+0x1a>
    e05a:	f3bf 8f5f 	dmb	sy
    e05e:	2300      	movs	r3, #0
    e060:	6003      	str	r3, [r0, #0]
    e062:	4618      	mov	r0, r3
    e064:	4770      	bx	lr
    e066:	4803      	ldr	r0, [pc, #12]	; (e074 <mutex_unlock+0x24>)
    e068:	4770      	bx	lr
    e06a:	4803      	ldr	r0, [pc, #12]	; (e078 <mutex_unlock+0x28>)
    e06c:	4770      	bx	lr
    e06e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    e072:	4770      	bx	lr
    e074:	ffff8fea 	.word	0xffff8fea
    e078:	ffff8fe9 	.word	0xffff8fe9

0000e07c <mutex_init>:
    e07c:	b510      	push	{r4, lr}
    e07e:	4604      	mov	r4, r0
    e080:	b120      	cbz	r0, e08c <mutex_init+0x10>
    e082:	2200      	movs	r2, #0
    e084:	2311      	movs	r3, #17
    e086:	6022      	str	r2, [r4, #0]
    e088:	6063      	str	r3, [r4, #4]
    e08a:	bd10      	pop	{r4, pc}
    e08c:	4801      	ldr	r0, [pc, #4]	; (e094 <mutex_init+0x18>)
    e08e:	f7ff ff89 	bl	dfa4 <CC_PalAbort>
    e092:	e7f6      	b.n	e082 <mutex_init+0x6>
    e094:	00011e04 	.word	0x00011e04

0000e098 <nrf_cc3xx_platform_set_mutexes>:
    e098:	b570      	push	{r4, r5, r6, lr}
    e09a:	e9d0 2300 	ldrd	r2, r3, [r0]
    e09e:	4c13      	ldr	r4, [pc, #76]	; (e0ec <nrf_cc3xx_platform_set_mutexes+0x54>)
    e0a0:	4d13      	ldr	r5, [pc, #76]	; (e0f0 <nrf_cc3xx_platform_set_mutexes+0x58>)
    e0a2:	6063      	str	r3, [r4, #4]
    e0a4:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    e0a8:	e9c4 3002 	strd	r3, r0, [r4, #8]
    e0ac:	6022      	str	r2, [r4, #0]
    e0ae:	4b11      	ldr	r3, [pc, #68]	; (e0f4 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    e0b0:	6808      	ldr	r0, [r1, #0]
    e0b2:	6018      	str	r0, [r3, #0]
    e0b4:	6848      	ldr	r0, [r1, #4]
    e0b6:	6058      	str	r0, [r3, #4]
    e0b8:	6888      	ldr	r0, [r1, #8]
    e0ba:	6098      	str	r0, [r3, #8]
    e0bc:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    e0c0:	60d8      	str	r0, [r3, #12]
    e0c2:	6119      	str	r1, [r3, #16]
    e0c4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    e0c8:	06db      	lsls	r3, r3, #27
    e0ca:	d50d      	bpl.n	e0e8 <nrf_cc3xx_platform_set_mutexes+0x50>
    e0cc:	2300      	movs	r3, #0
    e0ce:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    e0d2:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    e0d6:	f505 708a 	add.w	r0, r5, #276	; 0x114
    e0da:	4790      	blx	r2
    e0dc:	6823      	ldr	r3, [r4, #0]
    e0de:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    e0e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e0e6:	4718      	bx	r3
    e0e8:	bd70      	pop	{r4, r5, r6, pc}
    e0ea:	bf00      	nop
    e0ec:	2000417c 	.word	0x2000417c
    e0f0:	20005398 	.word	0x20005398
    e0f4:	2000418c 	.word	0x2000418c

0000e0f8 <CC_LibInitNoRng>:
    e0f8:	b538      	push	{r3, r4, r5, lr}
    e0fa:	f000 f82f 	bl	e15c <CC_HalInit>
    e0fe:	b120      	cbz	r0, e10a <CC_LibInitNoRng+0x12>
    e100:	2403      	movs	r4, #3
    e102:	f000 f863 	bl	e1cc <CC_PalTerminate>
    e106:	4620      	mov	r0, r4
    e108:	bd38      	pop	{r3, r4, r5, pc}
    e10a:	f000 f831 	bl	e170 <CC_PalInit>
    e10e:	b998      	cbnz	r0, e138 <CC_LibInitNoRng+0x40>
    e110:	f000 f8ac 	bl	e26c <CC_PalPowerSaveModeSelect>
    e114:	b998      	cbnz	r0, e13e <CC_LibInitNoRng+0x46>
    e116:	4d0f      	ldr	r5, [pc, #60]	; (e154 <CC_LibInitNoRng+0x5c>)
    e118:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    e11c:	0e1b      	lsrs	r3, r3, #24
    e11e:	2bf0      	cmp	r3, #240	; 0xf0
    e120:	d108      	bne.n	e134 <CC_LibInitNoRng+0x3c>
    e122:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    e126:	4b0c      	ldr	r3, [pc, #48]	; (e158 <CC_LibInitNoRng+0x60>)
    e128:	429a      	cmp	r2, r3
    e12a:	d00a      	beq.n	e142 <CC_LibInitNoRng+0x4a>
    e12c:	2407      	movs	r4, #7
    e12e:	f000 f817 	bl	e160 <CC_HalTerminate>
    e132:	e7e6      	b.n	e102 <CC_LibInitNoRng+0xa>
    e134:	2406      	movs	r4, #6
    e136:	e7fa      	b.n	e12e <CC_LibInitNoRng+0x36>
    e138:	2404      	movs	r4, #4
    e13a:	4620      	mov	r0, r4
    e13c:	bd38      	pop	{r3, r4, r5, pc}
    e13e:	2400      	movs	r4, #0
    e140:	e7f5      	b.n	e12e <CC_LibInitNoRng+0x36>
    e142:	2001      	movs	r0, #1
    e144:	f000 f892 	bl	e26c <CC_PalPowerSaveModeSelect>
    e148:	4604      	mov	r4, r0
    e14a:	2800      	cmp	r0, #0
    e14c:	d1f7      	bne.n	e13e <CC_LibInitNoRng+0x46>
    e14e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    e152:	e7d8      	b.n	e106 <CC_LibInitNoRng+0xe>
    e154:	5002b000 	.word	0x5002b000
    e158:	20e00000 	.word	0x20e00000

0000e15c <CC_HalInit>:
    e15c:	2000      	movs	r0, #0
    e15e:	4770      	bx	lr

0000e160 <CC_HalTerminate>:
    e160:	2000      	movs	r0, #0
    e162:	4770      	bx	lr

0000e164 <CC_HalMaskInterrupt>:
    e164:	4b01      	ldr	r3, [pc, #4]	; (e16c <CC_HalMaskInterrupt+0x8>)
    e166:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    e16a:	4770      	bx	lr
    e16c:	5002b000 	.word	0x5002b000

0000e170 <CC_PalInit>:
    e170:	b510      	push	{r4, lr}
    e172:	4811      	ldr	r0, [pc, #68]	; (e1b8 <CC_PalInit+0x48>)
    e174:	f000 f848 	bl	e208 <CC_PalMutexCreate>
    e178:	b100      	cbz	r0, e17c <CC_PalInit+0xc>
    e17a:	bd10      	pop	{r4, pc}
    e17c:	480f      	ldr	r0, [pc, #60]	; (e1bc <CC_PalInit+0x4c>)
    e17e:	f000 f843 	bl	e208 <CC_PalMutexCreate>
    e182:	2800      	cmp	r0, #0
    e184:	d1f9      	bne.n	e17a <CC_PalInit+0xa>
    e186:	4c0e      	ldr	r4, [pc, #56]	; (e1c0 <CC_PalInit+0x50>)
    e188:	4620      	mov	r0, r4
    e18a:	f000 f83d 	bl	e208 <CC_PalMutexCreate>
    e18e:	2800      	cmp	r0, #0
    e190:	d1f3      	bne.n	e17a <CC_PalInit+0xa>
    e192:	4b0c      	ldr	r3, [pc, #48]	; (e1c4 <CC_PalInit+0x54>)
    e194:	480c      	ldr	r0, [pc, #48]	; (e1c8 <CC_PalInit+0x58>)
    e196:	601c      	str	r4, [r3, #0]
    e198:	f000 f836 	bl	e208 <CC_PalMutexCreate>
    e19c:	4601      	mov	r1, r0
    e19e:	2800      	cmp	r0, #0
    e1a0:	d1eb      	bne.n	e17a <CC_PalInit+0xa>
    e1a2:	f000 f82d 	bl	e200 <CC_PalDmaInit>
    e1a6:	4604      	mov	r4, r0
    e1a8:	b108      	cbz	r0, e1ae <CC_PalInit+0x3e>
    e1aa:	4620      	mov	r0, r4
    e1ac:	bd10      	pop	{r4, pc}
    e1ae:	f000 f83f 	bl	e230 <CC_PalPowerSaveModeInit>
    e1b2:	4620      	mov	r0, r4
    e1b4:	e7fa      	b.n	e1ac <CC_PalInit+0x3c>
    e1b6:	bf00      	nop
    e1b8:	200041c4 	.word	0x200041c4
    e1bc:	200041b8 	.word	0x200041b8
    e1c0:	200041c0 	.word	0x200041c0
    e1c4:	200041c8 	.word	0x200041c8
    e1c8:	200041bc 	.word	0x200041bc

0000e1cc <CC_PalTerminate>:
    e1cc:	b508      	push	{r3, lr}
    e1ce:	4808      	ldr	r0, [pc, #32]	; (e1f0 <CC_PalTerminate+0x24>)
    e1d0:	f000 f824 	bl	e21c <CC_PalMutexDestroy>
    e1d4:	4807      	ldr	r0, [pc, #28]	; (e1f4 <CC_PalTerminate+0x28>)
    e1d6:	f000 f821 	bl	e21c <CC_PalMutexDestroy>
    e1da:	4807      	ldr	r0, [pc, #28]	; (e1f8 <CC_PalTerminate+0x2c>)
    e1dc:	f000 f81e 	bl	e21c <CC_PalMutexDestroy>
    e1e0:	4806      	ldr	r0, [pc, #24]	; (e1fc <CC_PalTerminate+0x30>)
    e1e2:	f000 f81b 	bl	e21c <CC_PalMutexDestroy>
    e1e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e1ea:	f000 b80b 	b.w	e204 <CC_PalDmaTerminate>
    e1ee:	bf00      	nop
    e1f0:	200041c4 	.word	0x200041c4
    e1f4:	200041b8 	.word	0x200041b8
    e1f8:	200041c0 	.word	0x200041c0
    e1fc:	200041bc 	.word	0x200041bc

0000e200 <CC_PalDmaInit>:
    e200:	2000      	movs	r0, #0
    e202:	4770      	bx	lr

0000e204 <CC_PalDmaTerminate>:
    e204:	4770      	bx	lr
    e206:	bf00      	nop

0000e208 <CC_PalMutexCreate>:
    e208:	b508      	push	{r3, lr}
    e20a:	4b03      	ldr	r3, [pc, #12]	; (e218 <CC_PalMutexCreate+0x10>)
    e20c:	6802      	ldr	r2, [r0, #0]
    e20e:	681b      	ldr	r3, [r3, #0]
    e210:	6810      	ldr	r0, [r2, #0]
    e212:	4798      	blx	r3
    e214:	2000      	movs	r0, #0
    e216:	bd08      	pop	{r3, pc}
    e218:	2000417c 	.word	0x2000417c

0000e21c <CC_PalMutexDestroy>:
    e21c:	b508      	push	{r3, lr}
    e21e:	4b03      	ldr	r3, [pc, #12]	; (e22c <CC_PalMutexDestroy+0x10>)
    e220:	6802      	ldr	r2, [r0, #0]
    e222:	685b      	ldr	r3, [r3, #4]
    e224:	6810      	ldr	r0, [r2, #0]
    e226:	4798      	blx	r3
    e228:	2000      	movs	r0, #0
    e22a:	bd08      	pop	{r3, pc}
    e22c:	2000417c 	.word	0x2000417c

0000e230 <CC_PalPowerSaveModeInit>:
    e230:	b570      	push	{r4, r5, r6, lr}
    e232:	4c09      	ldr	r4, [pc, #36]	; (e258 <CC_PalPowerSaveModeInit+0x28>)
    e234:	4d09      	ldr	r5, [pc, #36]	; (e25c <CC_PalPowerSaveModeInit+0x2c>)
    e236:	6920      	ldr	r0, [r4, #16]
    e238:	68ab      	ldr	r3, [r5, #8]
    e23a:	4798      	blx	r3
    e23c:	b118      	cbz	r0, e246 <CC_PalPowerSaveModeInit+0x16>
    e23e:	4b08      	ldr	r3, [pc, #32]	; (e260 <CC_PalPowerSaveModeInit+0x30>)
    e240:	4808      	ldr	r0, [pc, #32]	; (e264 <CC_PalPowerSaveModeInit+0x34>)
    e242:	685b      	ldr	r3, [r3, #4]
    e244:	4798      	blx	r3
    e246:	4a08      	ldr	r2, [pc, #32]	; (e268 <CC_PalPowerSaveModeInit+0x38>)
    e248:	68eb      	ldr	r3, [r5, #12]
    e24a:	6920      	ldr	r0, [r4, #16]
    e24c:	2100      	movs	r1, #0
    e24e:	6011      	str	r1, [r2, #0]
    e250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e254:	4718      	bx	r3
    e256:	bf00      	nop
    e258:	2000418c 	.word	0x2000418c
    e25c:	2000417c 	.word	0x2000417c
    e260:	2000416c 	.word	0x2000416c
    e264:	00011e28 	.word	0x00011e28
    e268:	20005394 	.word	0x20005394

0000e26c <CC_PalPowerSaveModeSelect>:
    e26c:	b570      	push	{r4, r5, r6, lr}
    e26e:	4d1b      	ldr	r5, [pc, #108]	; (e2dc <CC_PalPowerSaveModeSelect+0x70>)
    e270:	4e1b      	ldr	r6, [pc, #108]	; (e2e0 <CC_PalPowerSaveModeSelect+0x74>)
    e272:	4604      	mov	r4, r0
    e274:	68b2      	ldr	r2, [r6, #8]
    e276:	6928      	ldr	r0, [r5, #16]
    e278:	4790      	blx	r2
    e27a:	b9f8      	cbnz	r0, e2bc <CC_PalPowerSaveModeSelect+0x50>
    e27c:	b15c      	cbz	r4, e296 <CC_PalPowerSaveModeSelect+0x2a>
    e27e:	4c19      	ldr	r4, [pc, #100]	; (e2e4 <CC_PalPowerSaveModeSelect+0x78>)
    e280:	6823      	ldr	r3, [r4, #0]
    e282:	b1b3      	cbz	r3, e2b2 <CC_PalPowerSaveModeSelect+0x46>
    e284:	2b01      	cmp	r3, #1
    e286:	d01b      	beq.n	e2c0 <CC_PalPowerSaveModeSelect+0x54>
    e288:	3b01      	subs	r3, #1
    e28a:	6023      	str	r3, [r4, #0]
    e28c:	6928      	ldr	r0, [r5, #16]
    e28e:	68f3      	ldr	r3, [r6, #12]
    e290:	4798      	blx	r3
    e292:	2000      	movs	r0, #0
    e294:	bd70      	pop	{r4, r5, r6, pc}
    e296:	4c13      	ldr	r4, [pc, #76]	; (e2e4 <CC_PalPowerSaveModeSelect+0x78>)
    e298:	6821      	ldr	r1, [r4, #0]
    e29a:	b941      	cbnz	r1, e2ae <CC_PalPowerSaveModeSelect+0x42>
    e29c:	4b12      	ldr	r3, [pc, #72]	; (e2e8 <CC_PalPowerSaveModeSelect+0x7c>)
    e29e:	2201      	movs	r2, #1
    e2a0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    e2a4:	4a11      	ldr	r2, [pc, #68]	; (e2ec <CC_PalPowerSaveModeSelect+0x80>)
    e2a6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    e2aa:	2b00      	cmp	r3, #0
    e2ac:	d1fb      	bne.n	e2a6 <CC_PalPowerSaveModeSelect+0x3a>
    e2ae:	3101      	adds	r1, #1
    e2b0:	6021      	str	r1, [r4, #0]
    e2b2:	68f3      	ldr	r3, [r6, #12]
    e2b4:	6928      	ldr	r0, [r5, #16]
    e2b6:	4798      	blx	r3
    e2b8:	2000      	movs	r0, #0
    e2ba:	bd70      	pop	{r4, r5, r6, pc}
    e2bc:	480c      	ldr	r0, [pc, #48]	; (e2f0 <CC_PalPowerSaveModeSelect+0x84>)
    e2be:	bd70      	pop	{r4, r5, r6, pc}
    e2c0:	4a0a      	ldr	r2, [pc, #40]	; (e2ec <CC_PalPowerSaveModeSelect+0x80>)
    e2c2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    e2c6:	2b00      	cmp	r3, #0
    e2c8:	d1fb      	bne.n	e2c2 <CC_PalPowerSaveModeSelect+0x56>
    e2ca:	4a07      	ldr	r2, [pc, #28]	; (e2e8 <CC_PalPowerSaveModeSelect+0x7c>)
    e2cc:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    e2d0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    e2d4:	f7ff ff46 	bl	e164 <CC_HalMaskInterrupt>
    e2d8:	6823      	ldr	r3, [r4, #0]
    e2da:	e7d5      	b.n	e288 <CC_PalPowerSaveModeSelect+0x1c>
    e2dc:	2000418c 	.word	0x2000418c
    e2e0:	2000417c 	.word	0x2000417c
    e2e4:	20005394 	.word	0x20005394
    e2e8:	5002a000 	.word	0x5002a000
    e2ec:	5002b000 	.word	0x5002b000
    e2f0:	ffff8fe9 	.word	0xffff8fe9

0000e2f4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    e2f4:	4770      	bx	lr

0000e2f6 <cbprintf_via_va_list>:
{
    e2f6:	b510      	push	{r4, lr}
    e2f8:	460c      	mov	r4, r1
    e2fa:	4611      	mov	r1, r2
    e2fc:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    e2fe:	9b02      	ldr	r3, [sp, #8]
    e300:	47a0      	blx	r4
}
    e302:	bd10      	pop	{r4, pc}

0000e304 <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    e304:	b353      	cbz	r3, e35c <cbpprintf_external+0x58>
{
    e306:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e30a:	b082      	sub	sp, #8
    e30c:	4607      	mov	r7, r0
    e30e:	4688      	mov	r8, r1
    e310:	4691      	mov	r9, r2
    e312:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
    e314:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = buf[1];
    e316:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = buf[2];
    e318:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = buf[3];
    e31a:	78db      	ldrb	r3, [r3, #3]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    e31c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    e320:	441c      	add	r4, r3
    e322:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    e324:	f04f 0a00 	mov.w	sl, #0
    e328:	e00a      	b.n	e340 <cbpprintf_external+0x3c>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
    e32a:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
    e32e:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
    e332:	4620      	mov	r0, r4
    e334:	f7f2 fd85 	bl	e42 <strlen>
    e338:	3001      	adds	r0, #1
    e33a:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    e33c:	f10a 0a01 	add.w	sl, sl, #1
    e340:	45b2      	cmp	sl, r6
    e342:	d3f2      	bcc.n	e32a <cbpprintf_external+0x26>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
    e344:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
    e348:	9300      	str	r3, [sp, #0]
    e34a:	686b      	ldr	r3, [r5, #4]
    e34c:	464a      	mov	r2, r9
    e34e:	4641      	mov	r1, r8
    e350:	4638      	mov	r0, r7
    e352:	f7ff ffd0 	bl	e2f6 <cbprintf_via_va_list>
}
    e356:	b002      	add	sp, #8
    e358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    e35c:	f06f 0015 	mvn.w	r0, #21
}
    e360:	4770      	bx	lr

0000e362 <sys_notify_validate>:
	if (notify == NULL) {
    e362:	4602      	mov	r2, r0
    e364:	b158      	cbz	r0, e37e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    e366:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    e368:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    e36c:	2b01      	cmp	r3, #1
    e36e:	d003      	beq.n	e378 <sys_notify_validate+0x16>
    e370:	2b03      	cmp	r3, #3
    e372:	d107      	bne.n	e384 <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    e374:	6803      	ldr	r3, [r0, #0]
    e376:	b143      	cbz	r3, e38a <sys_notify_validate+0x28>
		notify->result = 0;
    e378:	2000      	movs	r0, #0
    e37a:	6090      	str	r0, [r2, #8]
    e37c:	4770      	bx	lr
		return -EINVAL;
    e37e:	f06f 0015 	mvn.w	r0, #21
    e382:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    e384:	f06f 0015 	mvn.w	r0, #21
    e388:	4770      	bx	lr
			rv = -EINVAL;
    e38a:	f06f 0015 	mvn.w	r0, #21
}
    e38e:	4770      	bx	lr

0000e390 <arch_printk_char_out>:
}
    e390:	2000      	movs	r0, #0
    e392:	4770      	bx	lr

0000e394 <vprintk>:
	ctx->count++;
	return _char_out(c);
}

void vprintk(const char *fmt, va_list ap)
{
    e394:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    e396:	f000 f921 	bl	e5dc <z_log_vprintk>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    e39a:	bd08      	pop	{r3, pc}

0000e39c <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    e39c:	b40f      	push	{r0, r1, r2, r3}
    e39e:	b500      	push	{lr}
    e3a0:	b083      	sub	sp, #12
    e3a2:	a904      	add	r1, sp, #16
    e3a4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    e3a8:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    e3aa:	f7ff fff3 	bl	e394 <vprintk>

	va_end(ap);
}
    e3ae:	b003      	add	sp, #12
    e3b0:	f85d eb04 	ldr.w	lr, [sp], #4
    e3b4:	b004      	add	sp, #16
    e3b6:	4770      	bx	lr

0000e3b8 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    e3b8:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    e3bc:	8b81      	ldrh	r1, [r0, #28]
    e3be:	f021 0107 	bic.w	r1, r1, #7
    e3c2:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    e3c4:	8381      	strh	r1, [r0, #28]
}
    e3c6:	4770      	bx	lr

0000e3c8 <notify_monitors>:
{
    e3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3cc:	4606      	mov	r6, r0
    e3ce:	460f      	mov	r7, r1
    e3d0:	4690      	mov	r8, r2
	return list->head;
    e3d2:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e3d4:	b119      	cbz	r1, e3de <notify_monitors+0x16>
    e3d6:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    e3d8:	b131      	cbz	r1, e3e8 <notify_monitors+0x20>
	return node->next;
    e3da:	680c      	ldr	r4, [r1, #0]
    e3dc:	e004      	b.n	e3e8 <notify_monitors+0x20>
    e3de:	460c      	mov	r4, r1
    e3e0:	e002      	b.n	e3e8 <notify_monitors+0x20>
    e3e2:	4623      	mov	r3, r4
    e3e4:	4621      	mov	r1, r4
    e3e6:	461c      	mov	r4, r3
    e3e8:	b159      	cbz	r1, e402 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    e3ea:	684d      	ldr	r5, [r1, #4]
    e3ec:	4643      	mov	r3, r8
    e3ee:	463a      	mov	r2, r7
    e3f0:	4630      	mov	r0, r6
    e3f2:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    e3f4:	2c00      	cmp	r4, #0
    e3f6:	d0f4      	beq.n	e3e2 <notify_monitors+0x1a>
    e3f8:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    e3fa:	2c00      	cmp	r4, #0
    e3fc:	d0f2      	beq.n	e3e4 <notify_monitors+0x1c>
	return node->next;
    e3fe:	6823      	ldr	r3, [r4, #0]
    e400:	e7f0      	b.n	e3e4 <notify_monitors+0x1c>
}
    e402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e406 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    e406:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    e408:	f013 0307 	ands.w	r3, r3, #7
    e40c:	d103      	bne.n	e416 <process_recheck+0x10>
	return list->head;
    e40e:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    e410:	b10a      	cbz	r2, e416 <process_recheck+0x10>
		evt = EVT_START;
    e412:	2003      	movs	r0, #3
    e414:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    e416:	2b02      	cmp	r3, #2
    e418:	d003      	beq.n	e422 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    e41a:	2b01      	cmp	r3, #1
    e41c:	d006      	beq.n	e42c <process_recheck+0x26>
	int evt = EVT_NOP;
    e41e:	2000      	movs	r0, #0
    e420:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    e422:	8bc2      	ldrh	r2, [r0, #30]
    e424:	2a00      	cmp	r2, #0
    e426:	d1f8      	bne.n	e41a <process_recheck+0x14>
		evt = EVT_STOP;
    e428:	2004      	movs	r0, #4
    e42a:	4770      	bx	lr
    e42c:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    e42e:	b10b      	cbz	r3, e434 <process_recheck+0x2e>
		evt = EVT_RESET;
    e430:	2005      	movs	r0, #5
}
    e432:	4770      	bx	lr
	int evt = EVT_NOP;
    e434:	2000      	movs	r0, #0
    e436:	4770      	bx	lr

0000e438 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    e438:	b158      	cbz	r0, e452 <validate_args+0x1a>
{
    e43a:	b510      	push	{r4, lr}
    e43c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    e43e:	b159      	cbz	r1, e458 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    e440:	1d08      	adds	r0, r1, #4
    e442:	f7ff ff8e 	bl	e362 <sys_notify_validate>
	if ((rv == 0)
    e446:	b918      	cbnz	r0, e450 <validate_args+0x18>
	    && ((cli->notify.flags
    e448:	68a3      	ldr	r3, [r4, #8]
    e44a:	f033 0303 	bics.w	r3, r3, #3
    e44e:	d106      	bne.n	e45e <validate_args+0x26>
}
    e450:	bd10      	pop	{r4, pc}
		return -EINVAL;
    e452:	f06f 0015 	mvn.w	r0, #21
}
    e456:	4770      	bx	lr
		return -EINVAL;
    e458:	f06f 0015 	mvn.w	r0, #21
    e45c:	e7f8      	b.n	e450 <validate_args+0x18>
		rv = -EINVAL;
    e45e:	f06f 0015 	mvn.w	r0, #21
    e462:	e7f5      	b.n	e450 <validate_args+0x18>

0000e464 <notify_one>:
{
    e464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e468:	4607      	mov	r7, r0
    e46a:	460c      	mov	r4, r1
    e46c:	4616      	mov	r6, r2
    e46e:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    e470:	4619      	mov	r1, r3
    e472:	1d20      	adds	r0, r4, #4
    e474:	f7f5 f9c0 	bl	37f8 <sys_notify_finalize>
	if (cb) {
    e478:	b128      	cbz	r0, e486 <notify_one+0x22>
    e47a:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    e47c:	462b      	mov	r3, r5
    e47e:	4632      	mov	r2, r6
    e480:	4621      	mov	r1, r4
    e482:	4638      	mov	r0, r7
    e484:	47c0      	blx	r8
}
    e486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e48a <notify_all>:
{
    e48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e48e:	4680      	mov	r8, r0
    e490:	460c      	mov	r4, r1
    e492:	4617      	mov	r7, r2
    e494:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    e496:	e004      	b.n	e4a2 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    e498:	4633      	mov	r3, r6
    e49a:	463a      	mov	r2, r7
    e49c:	4640      	mov	r0, r8
    e49e:	f7ff ffe1 	bl	e464 <notify_one>
    e4a2:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    e4a4:	b131      	cbz	r1, e4b4 <notify_all+0x2a>
	return node->next;
    e4a6:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    e4a8:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e4aa:	6863      	ldr	r3, [r4, #4]
    e4ac:	428b      	cmp	r3, r1
    e4ae:	d1f3      	bne.n	e498 <notify_all+0xe>
	list->tail = node;
    e4b0:	6065      	str	r5, [r4, #4]
}
    e4b2:	e7f1      	b.n	e498 <notify_all+0xe>
}
    e4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e4b8 <onoff_manager_init>:
	if ((mgr == NULL)
    e4b8:	b170      	cbz	r0, e4d8 <onoff_manager_init+0x20>
{
    e4ba:	b538      	push	{r3, r4, r5, lr}
    e4bc:	460c      	mov	r4, r1
    e4be:	4605      	mov	r5, r0
	    || (transitions == NULL)
    e4c0:	b169      	cbz	r1, e4de <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    e4c2:	680b      	ldr	r3, [r1, #0]
    e4c4:	b173      	cbz	r3, e4e4 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    e4c6:	684b      	ldr	r3, [r1, #4]
    e4c8:	b17b      	cbz	r3, e4ea <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    e4ca:	2220      	movs	r2, #32
    e4cc:	2100      	movs	r1, #0
    e4ce:	f000 ff9b 	bl	f408 <memset>
    e4d2:	612c      	str	r4, [r5, #16]
	return 0;
    e4d4:	2000      	movs	r0, #0
}
    e4d6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    e4d8:	f06f 0015 	mvn.w	r0, #21
}
    e4dc:	4770      	bx	lr
		return -EINVAL;
    e4de:	f06f 0015 	mvn.w	r0, #21
    e4e2:	e7f8      	b.n	e4d6 <onoff_manager_init+0x1e>
    e4e4:	f06f 0015 	mvn.w	r0, #21
    e4e8:	e7f5      	b.n	e4d6 <onoff_manager_init+0x1e>
    e4ea:	f06f 0015 	mvn.w	r0, #21
    e4ee:	e7f2      	b.n	e4d6 <onoff_manager_init+0x1e>

0000e4f0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    e4f0:	b508      	push	{r3, lr}
    e4f2:	4604      	mov	r4, r0
    e4f4:	4608      	mov	r0, r1
    e4f6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    e4f8:	461a      	mov	r2, r3
    e4fa:	47a0      	blx	r4
	return z_impl_z_current_get();
    e4fc:	f7fd fc98 	bl	be30 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    e500:	f7f8 f814 	bl	652c <z_impl_k_thread_abort>

0000e504 <free_list_add_bidx>:
{
    e504:	b510      	push	{r4, lr}
	if (b->next == 0U) {
    e506:	1d13      	adds	r3, r2, #4
    e508:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    e50c:	b97c      	cbnz	r4, e52e <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
    e50e:	2301      	movs	r3, #1
    e510:	fa03 f402 	lsl.w	r4, r3, r2
    e514:	68c3      	ldr	r3, [r0, #12]
    e516:	4323      	orrs	r3, r4
    e518:	60c3      	str	r3, [r0, #12]
		b->next = c;
    e51a:	3204      	adds	r2, #4
    e51c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    e520:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    e522:	1d1a      	adds	r2, r3, #4
    e524:	b289      	uxth	r1, r1
    e526:	5281      	strh	r1, [r0, r2]
    e528:	3306      	adds	r3, #6
    e52a:	52c1      	strh	r1, [r0, r3]
}
    e52c:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    e52e:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    e530:	3204      	adds	r2, #4
    e532:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    e534:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    e538:	f10c 0e04 	add.w	lr, ip, #4
    e53c:	f820 300e 	strh.w	r3, [r0, lr]
    e540:	f10c 0c06 	add.w	ip, ip, #6
    e544:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    e548:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    e54a:	3306      	adds	r3, #6
    e54c:	b289      	uxth	r1, r1
    e54e:	52c1      	strh	r1, [r0, r3]
    e550:	5281      	strh	r1, [r0, r2]
    e552:	e7eb      	b.n	e52c <free_list_add_bidx+0x28>

0000e554 <free_list_add>:
{
    e554:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    e556:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    e55a:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    e55c:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    e55e:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    e562:	f1c2 021f 	rsb	r2, r2, #31
    e566:	f7ff ffcd 	bl	e504 <free_list_add_bidx>
}
    e56a:	bd08      	pop	{r3, pc}

0000e56c <outs>:
{
    e56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e570:	4607      	mov	r7, r0
    e572:	460e      	mov	r6, r1
    e574:	4614      	mov	r4, r2
    e576:	4698      	mov	r8, r3
	size_t count = 0;
    e578:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    e57a:	e006      	b.n	e58a <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    e57c:	4631      	mov	r1, r6
    e57e:	f814 0b01 	ldrb.w	r0, [r4], #1
    e582:	47b8      	blx	r7
		if (rc < 0) {
    e584:	2800      	cmp	r0, #0
    e586:	db09      	blt.n	e59c <outs+0x30>
		++count;
    e588:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    e58a:	4544      	cmp	r4, r8
    e58c:	d3f6      	bcc.n	e57c <outs+0x10>
    e58e:	f1b8 0f00 	cmp.w	r8, #0
    e592:	d102      	bne.n	e59a <outs+0x2e>
    e594:	7823      	ldrb	r3, [r4, #0]
    e596:	2b00      	cmp	r3, #0
    e598:	d1f0      	bne.n	e57c <outs+0x10>
	return (int)count;
    e59a:	4628      	mov	r0, r5
}
    e59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e5a0 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    e5a0:	4040      	eors	r0, r0
    e5a2:	f380 8811 	msr	BASEPRI, r0
    e5a6:	f04f 0004 	mov.w	r0, #4
    e5aa:	df02      	svc	2
}
    e5ac:	4770      	bx	lr

0000e5ae <assert_print>:

void assert_print(const char *fmt, ...)
{
    e5ae:	b40f      	push	{r0, r1, r2, r3}
    e5b0:	b500      	push	{lr}
    e5b2:	b083      	sub	sp, #12
    e5b4:	a904      	add	r1, sp, #16
    e5b6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    e5ba:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    e5bc:	f7ff feea 	bl	e394 <vprintk>

	va_end(ap);
}
    e5c0:	b003      	add	sp, #12
    e5c2:	f85d eb04 	ldr.w	lr, [sp], #4
    e5c6:	b004      	add	sp, #16
    e5c8:	4770      	bx	lr

0000e5ca <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    e5ca:	4770      	bx	lr

0000e5cc <dummy_timestamp>:
}
    e5cc:	2000      	movs	r0, #0
    e5ce:	4770      	bx	lr

0000e5d0 <msg_filter_check>:
}
    e5d0:	2001      	movs	r0, #1
    e5d2:	4770      	bx	lr

0000e5d4 <default_get_timestamp>:
{
    e5d4:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    e5d6:	f000 fcee 	bl	efb6 <sys_clock_cycle_get_32>
}
    e5da:	bd08      	pop	{r3, pc}

0000e5dc <z_log_vprintk>:
{
    e5dc:	b500      	push	{lr}
    e5de:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    e5e0:	9103      	str	r1, [sp, #12]
    e5e2:	9002      	str	r0, [sp, #8]
    e5e4:	2000      	movs	r0, #0
    e5e6:	9001      	str	r0, [sp, #4]
    e5e8:	9000      	str	r0, [sp, #0]
    e5ea:	4603      	mov	r3, r0
    e5ec:	4602      	mov	r2, r0
    e5ee:	4601      	mov	r1, r0
    e5f0:	f7f6 fdca 	bl	5188 <z_impl_z_log_msg2_runtime_vcreate>
}
    e5f4:	b005      	add	sp, #20
    e5f6:	f85d fb04 	ldr.w	pc, [sp], #4

0000e5fa <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    e5fa:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    e5fc:	f7f6 fa96 	bl	4b2c <log_init>
	}

	return 0;
}
    e600:	2000      	movs	r0, #0
    e602:	bd08      	pop	{r3, pc}

0000e604 <z_log_get_tag>:
}
    e604:	2000      	movs	r0, #0
    e606:	4770      	bx	lr

0000e608 <out_func>:
{
    e608:	b500      	push	{lr}
    e60a:	b083      	sub	sp, #12
		char x = (char)c;
    e60c:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    e610:	680b      	ldr	r3, [r1, #0]
    e612:	684a      	ldr	r2, [r1, #4]
    e614:	6852      	ldr	r2, [r2, #4]
    e616:	2101      	movs	r1, #1
    e618:	f10d 0007 	add.w	r0, sp, #7
    e61c:	4798      	blx	r3
}
    e61e:	2000      	movs	r0, #0
    e620:	b003      	add	sp, #12
    e622:	f85d fb04 	ldr.w	pc, [sp], #4

0000e626 <cr_out_func>:
{
    e626:	b538      	push	{r3, r4, r5, lr}
    e628:	4604      	mov	r4, r0
    e62a:	460d      	mov	r5, r1
	out_func(c, ctx);
    e62c:	f7ff ffec 	bl	e608 <out_func>
	if (c == '\n') {
    e630:	2c0a      	cmp	r4, #10
    e632:	d001      	beq.n	e638 <cr_out_func+0x12>
}
    e634:	2000      	movs	r0, #0
    e636:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    e638:	4629      	mov	r1, r5
    e63a:	200d      	movs	r0, #13
    e63c:	f7ff ffe4 	bl	e608 <out_func>
    e640:	e7f8      	b.n	e634 <cr_out_func+0xe>

0000e642 <buffer_write>:
{
    e642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e644:	4607      	mov	r7, r0
    e646:	460d      	mov	r5, r1
    e648:	4614      	mov	r4, r2
    e64a:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    e64c:	4632      	mov	r2, r6
    e64e:	4621      	mov	r1, r4
    e650:	4628      	mov	r0, r5
    e652:	47b8      	blx	r7
		buf += processed;
    e654:	4405      	add	r5, r0
	} while (len != 0);
    e656:	1a24      	subs	r4, r4, r0
    e658:	d1f8      	bne.n	e64c <buffer_write+0xa>
}
    e65a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e65c <color_prefix>:
{
    e65c:	b508      	push	{r3, lr}
    e65e:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    e660:	2201      	movs	r2, #1
    e662:	f7f6 fc09 	bl	4e78 <color_print>
}
    e666:	bd08      	pop	{r3, pc}

0000e668 <color_postfix>:
{
    e668:	b508      	push	{r3, lr}
    e66a:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    e66c:	2200      	movs	r2, #0
    e66e:	f7f6 fc03 	bl	4e78 <color_print>
}
    e672:	bd08      	pop	{r3, pc}

0000e674 <postfix_print>:
{
    e674:	b538      	push	{r3, r4, r5, lr}
    e676:	4605      	mov	r5, r0
    e678:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    e67a:	f001 0101 	and.w	r1, r1, #1
    e67e:	f7ff fff3 	bl	e668 <color_postfix>
	newline_print(output, flags);
    e682:	4621      	mov	r1, r4
    e684:	4628      	mov	r0, r5
    e686:	f7f6 fc0d 	bl	4ea4 <newline_print>
}
    e68a:	bd38      	pop	{r3, r4, r5, pc}

0000e68c <log_msg2_hexdump>:
{
    e68c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e690:	b083      	sub	sp, #12
    e692:	4680      	mov	r8, r0
    e694:	460e      	mov	r6, r1
    e696:	4615      	mov	r5, r2
    e698:	461f      	mov	r7, r3
    e69a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    e69e:	462c      	mov	r4, r5
    e6a0:	2d10      	cmp	r5, #16
    e6a2:	bf28      	it	cs
    e6a4:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    e6a6:	f8cd 9000 	str.w	r9, [sp]
    e6aa:	463b      	mov	r3, r7
    e6ac:	4622      	mov	r2, r4
    e6ae:	4631      	mov	r1, r6
    e6b0:	4640      	mov	r0, r8
    e6b2:	f7f6 fc0b 	bl	4ecc <hexdump_line_print>
		data += length;
    e6b6:	4426      	add	r6, r4
	} while (len);
    e6b8:	1b2d      	subs	r5, r5, r4
    e6ba:	d1f0      	bne.n	e69e <log_msg2_hexdump+0x12>
}
    e6bc:	b003      	add	sp, #12
    e6be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000e6c2 <log_output_flush>:
{
    e6c2:	b510      	push	{r4, lr}
    e6c4:	4604      	mov	r4, r0
		     output->control_block->offset,
    e6c6:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    e6c8:	6853      	ldr	r3, [r2, #4]
    e6ca:	6812      	ldr	r2, [r2, #0]
    e6cc:	6881      	ldr	r1, [r0, #8]
    e6ce:	6800      	ldr	r0, [r0, #0]
    e6d0:	f7ff ffb7 	bl	e642 <buffer_write>
	output->control_block->offset = 0;
    e6d4:	6863      	ldr	r3, [r4, #4]
    e6d6:	2200      	movs	r2, #0
    e6d8:	601a      	str	r2, [r3, #0]
}
    e6da:	bd10      	pop	{r4, pc}

0000e6dc <z_log_msg2_finalize>:
{
    e6dc:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    e6de:	b198      	cbz	r0, e708 <z_log_msg2_finalize+0x2c>
    e6e0:	460e      	mov	r6, r1
    e6e2:	4614      	mov	r4, r2
    e6e4:	4619      	mov	r1, r3
    e6e6:	4605      	mov	r5, r0
	if (data) {
    e6e8:	b143      	cbz	r3, e6fc <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
    e6ea:	f100 0310 	add.w	r3, r0, #16
    e6ee:	f3c2 2049 	ubfx	r0, r2, #9, #10
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e6f2:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    e6f6:	4418      	add	r0, r3
    e6f8:	f000 fe78 	bl	f3ec <memcpy>
	msg->hdr.desc = desc;
    e6fc:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    e6fe:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
    e700:	4628      	mov	r0, r5
    e702:	f7f6 faf5 	bl	4cf0 <z_log_msg2_commit>
}
    e706:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    e708:	f7f6 fad2 	bl	4cb0 <z_log_dropped>
		return;
    e70c:	e7fb      	b.n	e706 <z_log_msg2_finalize+0x2a>

0000e70e <abort_function>:
{
    e70e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    e710:	2000      	movs	r0, #0
    e712:	f7f6 f991 	bl	4a38 <sys_reboot>

0000e716 <z_log_msg2_runtime_create>:
{
    e716:	b510      	push	{r4, lr}
    e718:	b086      	sub	sp, #24
	va_start(ap, fmt);
    e71a:	ac0b      	add	r4, sp, #44	; 0x2c
    e71c:	9405      	str	r4, [sp, #20]
    e71e:	9403      	str	r4, [sp, #12]
    e720:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    e722:	9402      	str	r4, [sp, #8]
    e724:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e726:	9401      	str	r4, [sp, #4]
    e728:	9c08      	ldr	r4, [sp, #32]
    e72a:	9400      	str	r4, [sp, #0]
    e72c:	f7f6 fd2c 	bl	5188 <z_impl_z_log_msg2_runtime_vcreate>
}
    e730:	b006      	add	sp, #24
    e732:	bd10      	pop	{r4, pc}

0000e734 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    e734:	b538      	push	{r3, r4, r5, lr}
    e736:	4604      	mov	r4, r0

	if (esf != NULL) {
    e738:	460d      	mov	r5, r1
    e73a:	b111      	cbz	r1, e742 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    e73c:	4608      	mov	r0, r1
    e73e:	f7f7 f94b 	bl	59d8 <esf_dump>
	}
	z_fatal_error(reason, esf);
    e742:	4629      	mov	r1, r5
    e744:	4620      	mov	r0, r4
    e746:	f7fb fa4d 	bl	9be4 <z_fatal_error>
}
    e74a:	bd38      	pop	{r3, r4, r5, pc}

0000e74c <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    e74c:	b508      	push	{r3, lr}
    e74e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    e750:	6800      	ldr	r0, [r0, #0]
    e752:	f7ff ffef 	bl	e734 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    e756:	bd08      	pop	{r3, pc}

0000e758 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    e758:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    e75a:	2100      	movs	r1, #0
    e75c:	2001      	movs	r0, #1
    e75e:	f7ff ffe9 	bl	e734 <z_arm_fatal_error>
}
    e762:	bd08      	pop	{r3, pc}

0000e764 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    e764:	b508      	push	{r3, lr}
	handler();
    e766:	f7f7 f9d3 	bl	5b10 <z_SysNmiOnReset>
	z_arm_int_exit();
    e76a:	f7f7 fac9 	bl	5d00 <z_arm_exc_exit>
}
    e76e:	bd08      	pop	{r3, pc}

0000e770 <memory_fault_recoverable>:
}
    e770:	2000      	movs	r0, #0
    e772:	4770      	bx	lr

0000e774 <z_log_msg2_runtime_create>:
{
    e774:	b510      	push	{r4, lr}
    e776:	b086      	sub	sp, #24
	va_start(ap, fmt);
    e778:	ac0b      	add	r4, sp, #44	; 0x2c
    e77a:	9405      	str	r4, [sp, #20]
    e77c:	9403      	str	r4, [sp, #12]
    e77e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    e780:	9402      	str	r4, [sp, #8]
    e782:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e784:	9401      	str	r4, [sp, #4]
    e786:	9c08      	ldr	r4, [sp, #32]
    e788:	9400      	str	r4, [sp, #0]
    e78a:	f7f6 fcfd 	bl	5188 <z_impl_z_log_msg2_runtime_vcreate>
}
    e78e:	b006      	add	sp, #24
    e790:	bd10      	pop	{r4, pc}

0000e792 <fault_handle>:
{
    e792:	b508      	push	{r3, lr}
	*recoverable = false;
    e794:	2300      	movs	r3, #0
    e796:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    e798:	1ecb      	subs	r3, r1, #3
    e79a:	2b09      	cmp	r3, #9
    e79c:	d81a      	bhi.n	e7d4 <fault_handle+0x42>
    e79e:	e8df f003 	tbb	[pc, r3]
    e7a2:	0905      	.short	0x0905
    e7a4:	1919110d 	.word	0x1919110d
    e7a8:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    e7ac:	4611      	mov	r1, r2
    e7ae:	f7f7 fcf9 	bl	61a4 <hard_fault>
}
    e7b2:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    e7b4:	2100      	movs	r1, #0
    e7b6:	f7f7 fc17 	bl	5fe8 <mem_manage_fault>
		break;
    e7ba:	e7fa      	b.n	e7b2 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    e7bc:	2100      	movs	r1, #0
    e7be:	f7f7 faad 	bl	5d1c <bus_fault>
		break;
    e7c2:	e7f6      	b.n	e7b2 <fault_handle+0x20>
		reason = usage_fault(esf);
    e7c4:	f7f7 fb52 	bl	5e6c <usage_fault>
		break;
    e7c8:	e7f3      	b.n	e7b2 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    e7ca:	4611      	mov	r1, r2
    e7cc:	f7f7 fbd8 	bl	5f80 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    e7d0:	2000      	movs	r0, #0
		break;
    e7d2:	e7ee      	b.n	e7b2 <fault_handle+0x20>
		reserved_exception(esf, fault);
    e7d4:	f7f7 fbe8 	bl	5fa8 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    e7d8:	2000      	movs	r0, #0
	return reason;
    e7da:	e7ea      	b.n	e7b2 <fault_handle+0x20>

0000e7dc <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    e7dc:	6843      	ldr	r3, [r0, #4]
    e7de:	1e5a      	subs	r2, r3, #1
		&&
    e7e0:	4213      	tst	r3, r2
    e7e2:	d106      	bne.n	e7f2 <mpu_partition_is_valid+0x16>
		&&
    e7e4:	2b1f      	cmp	r3, #31
    e7e6:	d906      	bls.n	e7f6 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    e7e8:	6803      	ldr	r3, [r0, #0]
		&&
    e7ea:	421a      	tst	r2, r3
    e7ec:	d005      	beq.n	e7fa <mpu_partition_is_valid+0x1e>
    e7ee:	2000      	movs	r0, #0
    e7f0:	4770      	bx	lr
    e7f2:	2000      	movs	r0, #0
    e7f4:	4770      	bx	lr
    e7f6:	2000      	movs	r0, #0
    e7f8:	4770      	bx	lr
    e7fa:	2001      	movs	r0, #1
}
    e7fc:	4770      	bx	lr

0000e7fe <z_log_msg2_runtime_create>:
{
    e7fe:	b510      	push	{r4, lr}
    e800:	b086      	sub	sp, #24
	va_start(ap, fmt);
    e802:	ac0b      	add	r4, sp, #44	; 0x2c
    e804:	9405      	str	r4, [sp, #20]
    e806:	9403      	str	r4, [sp, #12]
    e808:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    e80a:	9402      	str	r4, [sp, #8]
    e80c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e80e:	9401      	str	r4, [sp, #4]
    e810:	9c08      	ldr	r4, [sp, #32]
    e812:	9400      	str	r4, [sp, #0]
    e814:	f7f6 fcb8 	bl	5188 <z_impl_z_log_msg2_runtime_vcreate>
}
    e818:	b006      	add	sp, #24
    e81a:	bd10      	pop	{r4, pc}

0000e81c <mpu_configure_region>:
{
    e81c:	b500      	push	{lr}
    e81e:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    e820:	680b      	ldr	r3, [r1, #0]
    e822:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    e824:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    e826:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    e828:	2b20      	cmp	r3, #32
    e82a:	d912      	bls.n	e852 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    e82c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    e830:	d811      	bhi.n	e856 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    e832:	3b01      	subs	r3, #1
    e834:	fab3 f383 	clz	r3, r3
    e838:	f1c3 031f 	rsb	r3, r3, #31
    e83c:	005b      	lsls	r3, r3, #1
    e83e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    e842:	4313      	orrs	r3, r2
    e844:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    e846:	a901      	add	r1, sp, #4
    e848:	f7f7 febe 	bl	65c8 <region_allocate_and_init>
}
    e84c:	b005      	add	sp, #20
    e84e:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    e852:	2308      	movs	r3, #8
    e854:	e7f5      	b.n	e842 <mpu_configure_region+0x26>
		return REGION_4G;
    e856:	233e      	movs	r3, #62	; 0x3e
    e858:	e7f3      	b.n	e842 <mpu_configure_region+0x26>

0000e85a <_stdout_hook_default>:
}
    e85a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e85e:	4770      	bx	lr

0000e860 <_stdin_hook_default>:
}
    e860:	2000      	movs	r0, #0
    e862:	4770      	bx	lr

0000e864 <_read>:
{
    e864:	b508      	push	{r3, lr}
    e866:	4608      	mov	r0, r1
    e868:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
    e86a:	f7f8 f807 	bl	687c <z_impl_zephyr_read_stdin>
}
    e86e:	bd08      	pop	{r3, pc}

0000e870 <_write>:
{
    e870:	b508      	push	{r3, lr}
    e872:	4608      	mov	r0, r1
    e874:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    e876:	f7f8 f817 	bl	68a8 <z_impl_zephyr_write_stdout>
}
    e87a:	bd08      	pop	{r3, pc}

0000e87c <_close>:
}
    e87c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e880:	4770      	bx	lr

0000e882 <_lseek>:
}
    e882:	2000      	movs	r0, #0
    e884:	4770      	bx	lr

0000e886 <_isatty>:
}
    e886:	2802      	cmp	r0, #2
    e888:	bfcc      	ite	gt
    e88a:	2000      	movgt	r0, #0
    e88c:	2001      	movle	r0, #1
    e88e:	4770      	bx	lr

0000e890 <_kill>:
}
    e890:	2000      	movs	r0, #0
    e892:	4770      	bx	lr

0000e894 <_getpid>:
}
    e894:	2000      	movs	r0, #0
    e896:	4770      	bx	lr

0000e898 <_fstat>:
	st->st_mode = S_IFCHR;
    e898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e89c:	604b      	str	r3, [r1, #4]
}
    e89e:	2000      	movs	r0, #0
    e8a0:	4770      	bx	lr

0000e8a2 <__errno>:
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
    e8a2:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    e8a4:	f7fb f968 	bl	9b78 <z_impl_z_errno>
	return z_errno();
}
    e8a8:	bd08      	pop	{r3, pc}

0000e8aa <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    e8aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    e8ae:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    e8b2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    e8b6:	2a08      	cmp	r2, #8
    e8b8:	d001      	beq.n	e8be <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    e8ba:	2000      	movs	r0, #0
    e8bc:	4770      	bx	lr
                switch(var2)
    e8be:	2b02      	cmp	r3, #2
    e8c0:	d001      	beq.n	e8c6 <nrf52_errata_197+0x1c>
                        return false;
    e8c2:	2000      	movs	r0, #0
    e8c4:	4770      	bx	lr
                        return true;
    e8c6:	2001      	movs	r0, #1
    #endif
}
    e8c8:	4770      	bx	lr

0000e8ca <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    e8ca:	2806      	cmp	r0, #6
    e8cc:	d000      	beq.n	e8d0 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    e8ce:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    e8d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    e8d4:	2201      	movs	r2, #1
    e8d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    e8da:	f3bf 8f4f 	dsb	sy
        __WFE();
    e8de:	bf20      	wfe
    while (true)
    e8e0:	e7fd      	b.n	e8de <pm_state_set+0x14>

0000e8e2 <pm_state_exit_post_ops>:
    e8e2:	2300      	movs	r3, #0
    e8e4:	f383 8811 	msr	BASEPRI, r3
    e8e8:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    e8ec:	4770      	bx	lr

0000e8ee <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    e8ee:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    e8f0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    e8f4:	0089      	lsls	r1, r1, #2
    e8f6:	3140      	adds	r1, #64	; 0x40
}
    e8f8:	4408      	add	r0, r1
    e8fa:	4770      	bx	lr

0000e8fc <get_sub_config>:
	const struct nrf_clock_control_config *config =
    e8fc:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    e8fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    e902:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    e906:	4770      	bx	lr

0000e908 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    e908:	6900      	ldr	r0, [r0, #16]
}
    e90a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    e90e:	4770      	bx	lr

0000e910 <set_off_state>:
	__asm__ volatile(
    e910:	f04f 0320 	mov.w	r3, #32
    e914:	f3ef 8211 	mrs	r2, BASEPRI
    e918:	f383 8812 	msr	BASEPRI_MAX, r3
    e91c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e920:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    e922:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    e926:	d001      	beq.n	e92c <set_off_state+0x1c>
    e928:	428b      	cmp	r3, r1
    e92a:	d107      	bne.n	e93c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    e92c:	2301      	movs	r3, #1
    e92e:	6003      	str	r3, [r0, #0]
	int err = 0;
    e930:	2000      	movs	r0, #0
	__asm__ volatile(
    e932:	f382 8811 	msr	BASEPRI, r2
    e936:	f3bf 8f6f 	isb	sy
}
    e93a:	4770      	bx	lr
		err = -EPERM;
    e93c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e940:	e7f7      	b.n	e932 <set_off_state+0x22>

0000e942 <set_starting_state>:
	__asm__ volatile(
    e942:	f04f 0320 	mov.w	r3, #32
    e946:	f3ef 8211 	mrs	r2, BASEPRI
    e94a:	f383 8812 	msr	BASEPRI_MAX, r3
    e94e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    e952:	6803      	ldr	r3, [r0, #0]
    e954:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    e958:	f003 0307 	and.w	r3, r3, #7
    e95c:	2b01      	cmp	r3, #1
    e95e:	d008      	beq.n	e972 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    e960:	458c      	cmp	ip, r1
    e962:	d009      	beq.n	e978 <set_starting_state+0x36>
		err = -EPERM;
    e964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    e968:	f382 8811 	msr	BASEPRI, r2
    e96c:	f3bf 8f6f 	isb	sy
}
    e970:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    e972:	6001      	str	r1, [r0, #0]
	int err = 0;
    e974:	2000      	movs	r0, #0
    e976:	e7f7      	b.n	e968 <set_starting_state+0x26>
		err = -EALREADY;
    e978:	f06f 0077 	mvn.w	r0, #119	; 0x77
    e97c:	e7f4      	b.n	e968 <set_starting_state+0x26>

0000e97e <set_on_state>:
	__asm__ volatile(
    e97e:	f04f 0320 	mov.w	r3, #32
    e982:	f3ef 8211 	mrs	r2, BASEPRI
    e986:	f383 8812 	msr	BASEPRI_MAX, r3
    e98a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    e98e:	6803      	ldr	r3, [r0, #0]
    e990:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e994:	f043 0302 	orr.w	r3, r3, #2
    e998:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    e99a:	f382 8811 	msr	BASEPRI, r2
    e99e:	f3bf 8f6f 	isb	sy
}
    e9a2:	4770      	bx	lr

0000e9a4 <clkstarted_handle>:
{
    e9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e9a6:	4606      	mov	r6, r0
    e9a8:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    e9aa:	f7ff ffa0 	bl	e8ee <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    e9ae:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    e9b0:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    e9b2:	2300      	movs	r3, #0
    e9b4:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    e9b8:	f7ff ffe1 	bl	e97e <set_on_state>
	if (callback) {
    e9bc:	b11d      	cbz	r5, e9c6 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    e9be:	463a      	mov	r2, r7
    e9c0:	4621      	mov	r1, r4
    e9c2:	4630      	mov	r0, r6
    e9c4:	47a8      	blx	r5
}
    e9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e9c8 <async_start>:
{
    e9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9cc:	4606      	mov	r6, r0
    e9ce:	4690      	mov	r8, r2
    e9d0:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    e9d2:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    e9d4:	4629      	mov	r1, r5
    e9d6:	f7ff ff8a 	bl	e8ee <get_sub_data>
    e9da:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    e9dc:	9906      	ldr	r1, [sp, #24]
    e9de:	3008      	adds	r0, #8
    e9e0:	f7ff ffaf 	bl	e942 <set_starting_state>
	if (err < 0) {
    e9e4:	2800      	cmp	r0, #0
    e9e6:	db09      	blt.n	e9fc <async_start+0x34>
	subdata->cb = cb;
    e9e8:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    e9ec:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    e9ee:	4629      	mov	r1, r5
    e9f0:	4630      	mov	r0, r6
    e9f2:	f7ff ff83 	bl	e8fc <get_sub_config>
    e9f6:	6803      	ldr	r3, [r0, #0]
    e9f8:	4798      	blx	r3
	return 0;
    e9fa:	2000      	movs	r0, #0
}
    e9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ea00 <api_start>:
{
    ea00:	b510      	push	{r4, lr}
    ea02:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    ea04:	2480      	movs	r4, #128	; 0x80
    ea06:	9400      	str	r4, [sp, #0]
    ea08:	f7ff ffde 	bl	e9c8 <async_start>
}
    ea0c:	b002      	add	sp, #8
    ea0e:	bd10      	pop	{r4, pc}

0000ea10 <onoff_started_callback>:
{
    ea10:	b510      	push	{r4, lr}
    ea12:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    ea14:	b2c9      	uxtb	r1, r1
    ea16:	f7ff ff77 	bl	e908 <get_onoff_manager>
	notify(mgr, 0);
    ea1a:	2100      	movs	r1, #0
    ea1c:	47a0      	blx	r4
}
    ea1e:	bd10      	pop	{r4, pc}

0000ea20 <hfclk_start>:
{
    ea20:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    ea22:	2001      	movs	r0, #1
    ea24:	f7f9 ff10 	bl	8848 <nrfx_clock_start>
}
    ea28:	bd08      	pop	{r3, pc}

0000ea2a <lfclk_start>:
{
    ea2a:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    ea2c:	2000      	movs	r0, #0
    ea2e:	f7f9 ff0b 	bl	8848 <nrfx_clock_start>
}
    ea32:	bd08      	pop	{r3, pc}

0000ea34 <hfclk_stop>:
{
    ea34:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    ea36:	2001      	movs	r0, #1
    ea38:	f7f9 ff7c 	bl	8934 <nrfx_clock_stop>
}
    ea3c:	bd08      	pop	{r3, pc}

0000ea3e <lfclk_stop>:
{
    ea3e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    ea40:	2000      	movs	r0, #0
    ea42:	f7f9 ff77 	bl	8934 <nrfx_clock_stop>
}
    ea46:	bd08      	pop	{r3, pc}

0000ea48 <api_stop>:
{
    ea48:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    ea4a:	2280      	movs	r2, #128	; 0x80
    ea4c:	f7f8 f87c 	bl	6b48 <stop>
}
    ea50:	bd08      	pop	{r3, pc}

0000ea52 <blocking_start_callback>:
{
    ea52:	b508      	push	{r3, lr}
    ea54:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    ea56:	f7fb ff79 	bl	a94c <z_impl_k_sem_give>
}
    ea5a:	bd08      	pop	{r3, pc}

0000ea5c <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    ea5c:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    ea60:	f020 0001 	bic.w	r0, r0, #1
    ea64:	0540      	lsls	r0, r0, #21
    ea66:	0d40      	lsrs	r0, r0, #21
    ea68:	f240 2306 	movw	r3, #518	; 0x206
    ea6c:	4298      	cmp	r0, r3
    ea6e:	d033      	beq.n	ead8 <get_drive+0x7c>
    ea70:	d816      	bhi.n	eaa0 <get_drive+0x44>
    ea72:	2806      	cmp	r0, #6
    ea74:	d02c      	beq.n	ead0 <get_drive+0x74>
    ea76:	d906      	bls.n	ea86 <get_drive+0x2a>
    ea78:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    ea7c:	d10d      	bne.n	ea9a <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    ea7e:	2301      	movs	r3, #1
    ea80:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ea82:	2000      	movs	r0, #0
		break;
    ea84:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    ea86:	b300      	cbz	r0, eaca <get_drive+0x6e>
    ea88:	2802      	cmp	r0, #2
    ea8a:	d103      	bne.n	ea94 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    ea8c:	2304      	movs	r3, #4
    ea8e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ea90:	2000      	movs	r0, #0
		break;
    ea92:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    ea94:	f06f 0015 	mvn.w	r0, #21
    ea98:	4770      	bx	lr
    ea9a:	f06f 0015 	mvn.w	r0, #21
    ea9e:	4770      	bx	lr
    eaa0:	f240 4302 	movw	r3, #1026	; 0x402
    eaa4:	4298      	cmp	r0, r3
    eaa6:	d01b      	beq.n	eae0 <get_drive+0x84>
    eaa8:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    eaac:	d103      	bne.n	eab6 <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    eaae:	2303      	movs	r3, #3
    eab0:	700b      	strb	r3, [r1, #0]
	int err = 0;
    eab2:	2000      	movs	r0, #0
		break;
    eab4:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    eab6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    eaba:	d103      	bne.n	eac4 <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    eabc:	2302      	movs	r3, #2
    eabe:	700b      	strb	r3, [r1, #0]
	int err = 0;
    eac0:	2000      	movs	r0, #0
		break;
    eac2:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    eac4:	f06f 0015 	mvn.w	r0, #21
    eac8:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    eaca:	2000      	movs	r0, #0
    eacc:	7008      	strb	r0, [r1, #0]
		break;
    eace:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    ead0:	2306      	movs	r3, #6
    ead2:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ead4:	2000      	movs	r0, #0
		break;
    ead6:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    ead8:	2307      	movs	r3, #7
    eada:	700b      	strb	r3, [r1, #0]
	int err = 0;
    eadc:	2000      	movs	r0, #0
		break;
    eade:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    eae0:	2305      	movs	r3, #5
    eae2:	700b      	strb	r3, [r1, #0]
	int err = 0;
    eae4:	2000      	movs	r0, #0
}
    eae6:	4770      	bx	lr

0000eae8 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    eae8:	f010 0f10 	tst.w	r0, #16
    eaec:	d104      	bne.n	eaf8 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    eaee:	f010 0f20 	tst.w	r0, #32
    eaf2:	d103      	bne.n	eafc <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    eaf4:	2000      	movs	r0, #0
    eaf6:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    eaf8:	2003      	movs	r0, #3
    eafa:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    eafc:	2001      	movs	r0, #1
}
    eafe:	4770      	bx	lr

0000eb00 <gpio_nrfx_port_get_raw>:
	return port->config;
    eb00:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    eb02:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    eb04:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    eb08:	600b      	str	r3, [r1, #0]
}
    eb0a:	2000      	movs	r0, #0
    eb0c:	4770      	bx	lr

0000eb0e <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    eb0e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    eb10:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    eb12:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    eb16:	4042      	eors	r2, r0
    eb18:	400a      	ands	r2, r1
    eb1a:	4042      	eors	r2, r0
    p_reg->OUT = value;
    eb1c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    eb20:	2000      	movs	r0, #0
    eb22:	4770      	bx	lr

0000eb24 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    eb24:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    eb26:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    eb28:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    eb2c:	2000      	movs	r0, #0
    eb2e:	4770      	bx	lr

0000eb30 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    eb30:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    eb32:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    eb34:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    eb38:	2000      	movs	r0, #0
    eb3a:	4770      	bx	lr

0000eb3c <gpio_nrfx_port_toggle_bits>:
	return port->config;
    eb3c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    eb3e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    eb40:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    eb44:	404b      	eors	r3, r1
    p_reg->OUT = value;
    eb46:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    eb4a:	2000      	movs	r0, #0
    eb4c:	4770      	bx	lr

0000eb4e <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    eb4e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    eb52:	d007      	beq.n	eb64 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    eb54:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    eb58:	d00d      	beq.n	eb76 <get_trigger+0x28>
    eb5a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    eb5e:	d008      	beq.n	eb72 <get_trigger+0x24>
    eb60:	2001      	movs	r0, #1
}
    eb62:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    eb64:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    eb68:	d001      	beq.n	eb6e <get_trigger+0x20>
    eb6a:	2005      	movs	r0, #5
    eb6c:	4770      	bx	lr
    eb6e:	2004      	movs	r0, #4
    eb70:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    eb72:	2002      	movs	r0, #2
    eb74:	4770      	bx	lr
    eb76:	2003      	movs	r0, #3
    eb78:	4770      	bx	lr

0000eb7a <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    eb7a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    eb7c:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    eb7e:	f04f 0120 	mov.w	r1, #32
    eb82:	f3ef 8211 	mrs	r2, BASEPRI
    eb86:	f381 8812 	msr	BASEPRI_MAX, r1
    eb8a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    eb8e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    eb92:	b131      	cbz	r1, eba2 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    eb94:	2100      	movs	r1, #0
    eb96:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    eb9a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    eb9e:	2101      	movs	r1, #1
    eba0:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    eba2:	f382 8811 	msr	BASEPRI, r2
    eba6:	f3bf 8f6f 	isb	sy
}
    ebaa:	4770      	bx	lr

0000ebac <uarte_nrfx_isr_int>:
{
    ebac:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    ebae:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    ebb0:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    ebb2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    ebb6:	f413 7f80 	tst.w	r3, #256	; 0x100
    ebba:	d002      	beq.n	ebc2 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ebbc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    ebc0:	b9d3      	cbnz	r3, ebf8 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    ebc2:	686b      	ldr	r3, [r5, #4]
    ebc4:	f013 0f10 	tst.w	r3, #16
    ebc8:	d015      	beq.n	ebf6 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    ebca:	f04f 0220 	mov.w	r2, #32
    ebce:	f3ef 8311 	mrs	r3, BASEPRI
    ebd2:	f382 8812 	msr	BASEPRI_MAX, r2
    ebd6:	f3bf 8f6f 	isb	sy
    ebda:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    ebde:	b112      	cbz	r2, ebe6 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    ebe0:	2200      	movs	r2, #0
    ebe2:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    ebe6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    ebea:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    ebee:	f383 8811 	msr	BASEPRI, r3
    ebf2:	f3bf 8f6f 	isb	sy
}
    ebf6:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    ebf8:	f7ff ffbf 	bl	eb7a <endtx_isr>
    ebfc:	e7e1      	b.n	ebc2 <uarte_nrfx_isr_int+0x16>

0000ebfe <uarte_nrfx_configure>:
{
    ebfe:	b570      	push	{r4, r5, r6, lr}
    ec00:	b082      	sub	sp, #8
    ec02:	4606      	mov	r6, r0
    ec04:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    ec06:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    ec08:	794b      	ldrb	r3, [r1, #5]
    ec0a:	2b01      	cmp	r3, #1
    ec0c:	d006      	beq.n	ec1c <uarte_nrfx_configure+0x1e>
    ec0e:	2b03      	cmp	r3, #3
    ec10:	d011      	beq.n	ec36 <uarte_nrfx_configure+0x38>
    ec12:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    ec16:	4618      	mov	r0, r3
    ec18:	b002      	add	sp, #8
    ec1a:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    ec1c:	2300      	movs	r3, #0
    ec1e:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    ec22:	79a3      	ldrb	r3, [r4, #6]
    ec24:	2b03      	cmp	r3, #3
    ec26:	d137      	bne.n	ec98 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    ec28:	79e3      	ldrb	r3, [r4, #7]
    ec2a:	b143      	cbz	r3, ec3e <uarte_nrfx_configure+0x40>
    ec2c:	2b01      	cmp	r3, #1
    ec2e:	d010      	beq.n	ec52 <uarte_nrfx_configure+0x54>
    ec30:	f06f 0385 	mvn.w	r3, #133	; 0x85
    ec34:	e7ef      	b.n	ec16 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    ec36:	2310      	movs	r3, #16
    ec38:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    ec3c:	e7f1      	b.n	ec22 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    ec3e:	2300      	movs	r3, #0
    ec40:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    ec44:	7923      	ldrb	r3, [r4, #4]
    ec46:	b143      	cbz	r3, ec5a <uarte_nrfx_configure+0x5c>
    ec48:	2b02      	cmp	r3, #2
    ec4a:	d021      	beq.n	ec90 <uarte_nrfx_configure+0x92>
    ec4c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    ec50:	e7e1      	b.n	ec16 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    ec52:	2301      	movs	r3, #1
    ec54:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    ec58:	e7f4      	b.n	ec44 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    ec5a:	2300      	movs	r3, #0
    ec5c:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    ec60:	6821      	ldr	r1, [r4, #0]
    ec62:	4630      	mov	r0, r6
    ec64:	f7f8 fb78 	bl	7358 <baudrate_set>
    ec68:	4603      	mov	r3, r0
    ec6a:	b9c0      	cbnz	r0, ec9e <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    ec6c:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    ec6e:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    ec70:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    ec74:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    ec78:	f89d 2004 	ldrb.w	r2, [sp, #4]
    ec7c:	4331      	orrs	r1, r6
    ec7e:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    ec80:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    ec84:	3504      	adds	r5, #4
    ec86:	e894 0003 	ldmia.w	r4, {r0, r1}
    ec8a:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    ec8e:	e7c2      	b.n	ec16 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    ec90:	230e      	movs	r3, #14
    ec92:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    ec96:	e7e3      	b.n	ec60 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    ec98:	f06f 0385 	mvn.w	r3, #133	; 0x85
    ec9c:	e7bb      	b.n	ec16 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    ec9e:	f06f 0385 	mvn.w	r3, #133	; 0x85
    eca2:	e7b8      	b.n	ec16 <uarte_nrfx_configure+0x18>

0000eca4 <uarte_nrfx_config_get>:
{
    eca4:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    eca6:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    eca8:	3304      	adds	r3, #4
    ecaa:	e893 0003 	ldmia.w	r3, {r0, r1}
    ecae:	e882 0003 	stmia.w	r2, {r0, r1}
}
    ecb2:	2000      	movs	r0, #0
    ecb4:	4770      	bx	lr

0000ecb6 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    ecb6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ecb8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    ecba:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    ecbe:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    ecc2:	4770      	bx	lr

0000ecc4 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    ecc4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ecc6:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    ecc8:	685b      	ldr	r3, [r3, #4]
    ecca:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ecce:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    ecd2:	b929      	cbnz	r1, ece0 <is_tx_ready+0x1c>
    ecd4:	b933      	cbnz	r3, ece4 <is_tx_ready+0x20>
    ecd6:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    ecda:	b92b      	cbnz	r3, ece8 <is_tx_ready+0x24>
    ecdc:	2000      	movs	r0, #0
    ecde:	4770      	bx	lr
    ece0:	2001      	movs	r0, #1
    ece2:	4770      	bx	lr
    ece4:	2000      	movs	r0, #0
    ece6:	4770      	bx	lr
    ece8:	2001      	movs	r0, #1
}
    ecea:	4770      	bx	lr

0000ecec <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    ecec:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ecee:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    ecf0:	2208      	movs	r2, #8
    ecf2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    ecf6:	4770      	bx	lr

0000ecf8 <tx_start>:
{
    ecf8:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    ecfa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ecfc:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    ecfe:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    ed02:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ed06:	2200      	movs	r2, #0
    ed08:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    ed0c:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    ed10:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    ed14:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    ed18:	685b      	ldr	r3, [r3, #4]
    ed1a:	f013 0f10 	tst.w	r3, #16
    ed1e:	d102      	bne.n	ed26 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ed20:	2301      	movs	r3, #1
    ed22:	60a3      	str	r3, [r4, #8]
}
    ed24:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    ed26:	2101      	movs	r1, #1
    ed28:	f7ff ffe0 	bl	ecec <uarte_enable>
    p_reg->INTENSET = mask;
    ed2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    ed30:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    ed34:	e7f4      	b.n	ed20 <tx_start+0x28>

0000ed36 <uarte_nrfx_poll_in>:
{
    ed36:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    ed38:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    ed3a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ed3c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ed3e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    ed42:	b152      	cbz	r2, ed5a <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    ed44:	7c62      	ldrb	r2, [r4, #17]
    ed46:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ed48:	2000      	movs	r0, #0
    ed4a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    ed4e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ed52:	2201      	movs	r2, #1
    ed54:	601a      	str	r2, [r3, #0]
}
    ed56:	bc10      	pop	{r4}
    ed58:	4770      	bx	lr
		return -1;
    ed5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ed5e:	e7fa      	b.n	ed56 <uarte_nrfx_poll_in+0x20>

0000ed60 <wait_tx_ready>:
{
    ed60:	b570      	push	{r4, r5, r6, lr}
    ed62:	4606      	mov	r6, r0
    ed64:	e014      	b.n	ed90 <wait_tx_ready+0x30>
		if (res) {
    ed66:	b17d      	cbz	r5, ed88 <wait_tx_ready+0x28>
	__asm__ volatile(
    ed68:	f04f 0320 	mov.w	r3, #32
    ed6c:	f3ef 8411 	mrs	r4, BASEPRI
    ed70:	f383 8812 	msr	BASEPRI_MAX, r3
    ed74:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    ed78:	4630      	mov	r0, r6
    ed7a:	f7ff ffa3 	bl	ecc4 <is_tx_ready>
    ed7e:	b9a0      	cbnz	r0, edaa <wait_tx_ready+0x4a>
	__asm__ volatile(
    ed80:	f384 8811 	msr	BASEPRI, r4
    ed84:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    ed88:	2021      	movs	r0, #33	; 0x21
    ed8a:	2100      	movs	r1, #0
    ed8c:	f7fd f804 	bl	bd98 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    ed90:	2464      	movs	r4, #100	; 0x64
    ed92:	4630      	mov	r0, r6
    ed94:	f7ff ff96 	bl	ecc4 <is_tx_ready>
    ed98:	4605      	mov	r5, r0
    ed9a:	2800      	cmp	r0, #0
    ed9c:	d1e3      	bne.n	ed66 <wait_tx_ready+0x6>
    ed9e:	2001      	movs	r0, #1
    eda0:	f000 f9c1 	bl	f126 <nrfx_busy_wait>
    eda4:	3c01      	subs	r4, #1
    eda6:	d1f4      	bne.n	ed92 <wait_tx_ready+0x32>
    eda8:	e7dd      	b.n	ed66 <wait_tx_ready+0x6>
}
    edaa:	4620      	mov	r0, r4
    edac:	bd70      	pop	{r4, r5, r6, pc}

0000edae <z_log_msg2_runtime_create>:
{
    edae:	b510      	push	{r4, lr}
    edb0:	b086      	sub	sp, #24
	va_start(ap, fmt);
    edb2:	ac0b      	add	r4, sp, #44	; 0x2c
    edb4:	9405      	str	r4, [sp, #20]
    edb6:	9403      	str	r4, [sp, #12]
    edb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    edba:	9402      	str	r4, [sp, #8]
    edbc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    edbe:	9401      	str	r4, [sp, #4]
    edc0:	9c08      	ldr	r4, [sp, #32]
    edc2:	9400      	str	r4, [sp, #0]
    edc4:	f7f6 f9e0 	bl	5188 <z_impl_z_log_msg2_runtime_vcreate>
}
    edc8:	b006      	add	sp, #24
    edca:	bd10      	pop	{r4, pc}

0000edcc <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    edcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    edd0:	b083      	sub	sp, #12
    edd2:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    edd4:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    edd6:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    edd8:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    eddc:	2100      	movs	r1, #0
    edde:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    ede2:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    ede6:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    edea:	aa01      	add	r2, sp, #4
    edec:	4648      	mov	r0, r9
    edee:	f000 f8e6 	bl	efbe <pinctrl_lookup_state>
	if (ret < 0) {
    edf2:	1e04      	subs	r4, r0, #0
    edf4:	db07      	blt.n	ee06 <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    edf6:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    edf8:	f8d9 2000 	ldr.w	r2, [r9]
    edfc:	7919      	ldrb	r1, [r3, #4]
    edfe:	6818      	ldr	r0, [r3, #0]
    ee00:	f7f8 fe6c 	bl	7adc <pinctrl_configure_pins>
    ee04:	4604      	mov	r4, r0
	if (err < 0) {
    ee06:	2c00      	cmp	r4, #0
    ee08:	db35      	blt.n	ee76 <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    ee0a:	f108 0104 	add.w	r1, r8, #4
    ee0e:	4628      	mov	r0, r5
    ee10:	f7ff fef5 	bl	ebfe <uarte_nrfx_configure>
	if (err) {
    ee14:	4604      	mov	r4, r0
    ee16:	bb70      	cbnz	r0, ee76 <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    ee18:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    ee1a:	f013 0f02 	tst.w	r3, #2
    ee1e:	d12e      	bne.n	ee7e <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    ee20:	2308      	movs	r3, #8
    ee22:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    ee26:	7a3b      	ldrb	r3, [r7, #8]
    ee28:	b95b      	cbnz	r3, ee42 <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ee2a:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    ee2e:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    ee32:	f108 0311 	add.w	r3, r8, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    ee36:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    ee3a:	2301      	movs	r3, #1
    ee3c:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ee40:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    ee42:	687b      	ldr	r3, [r7, #4]
    ee44:	f013 0f02 	tst.w	r3, #2
    ee48:	d103      	bne.n	ee52 <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
    ee4a:	f44f 7380 	mov.w	r3, #256	; 0x100
    ee4e:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    ee52:	687b      	ldr	r3, [r7, #4]
    ee54:	f013 0f10 	tst.w	r3, #16
    ee58:	d003      	beq.n	ee62 <uarte_instance_init+0x96>
    ee5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    ee5e:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    ee62:	f108 0310 	add.w	r3, r8, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    ee66:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    ee6a:	2300      	movs	r3, #0
    ee6c:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ee70:	2301      	movs	r3, #1
    ee72:	60b3      	str	r3, [r6, #8]
    ee74:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    ee76:	4620      	mov	r0, r4
    ee78:	b003      	add	sp, #12
    ee7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    ee7e:	4641      	mov	r1, r8
    ee80:	4630      	mov	r0, r6
    ee82:	f7f8 fb49 	bl	7518 <endtx_stoptx_ppi_init>
		if (err < 0) {
    ee86:	2800      	cmp	r0, #0
    ee88:	daca      	bge.n	ee20 <uarte_instance_init+0x54>
			return err;
    ee8a:	4604      	mov	r4, r0
    ee8c:	e7f3      	b.n	ee76 <uarte_instance_init+0xaa>

0000ee8e <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    ee8e:	b510      	push	{r4, lr}
    ee90:	4604      	mov	r4, r0
    ee92:	2200      	movs	r2, #0
    ee94:	2101      	movs	r1, #1
    ee96:	2002      	movs	r0, #2
    ee98:	f7f6 fe04 	bl	5aa4 <z_arm_irq_priority_set>
    ee9c:	2002      	movs	r0, #2
    ee9e:	f7f6 fde5 	bl	5a6c <arch_irq_enable>
    eea2:	2100      	movs	r1, #0
    eea4:	4620      	mov	r0, r4
    eea6:	f7ff ff91 	bl	edcc <uarte_instance_init>
    eeaa:	bd10      	pop	{r4, pc}

0000eeac <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    eeac:	b510      	push	{r4, lr}
    eeae:	4604      	mov	r4, r0
    eeb0:	2200      	movs	r2, #0
    eeb2:	2101      	movs	r1, #1
    eeb4:	2028      	movs	r0, #40	; 0x28
    eeb6:	f7f6 fdf5 	bl	5aa4 <z_arm_irq_priority_set>
    eeba:	2028      	movs	r0, #40	; 0x28
    eebc:	f7f6 fdd6 	bl	5a6c <arch_irq_enable>
    eec0:	2100      	movs	r1, #0
    eec2:	4620      	mov	r0, r4
    eec4:	f7ff ff82 	bl	edcc <uarte_instance_init>
    eec8:	bd10      	pop	{r4, pc}

0000eeca <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    eeca:	4770      	bx	lr

0000eecc <counter_sub>:
	return (a - b) & COUNTER_MAX;
    eecc:	1a40      	subs	r0, r0, r1
}
    eece:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    eed2:	4770      	bx	lr

0000eed4 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    eed4:	f100 0350 	add.w	r3, r0, #80	; 0x50
    eed8:	009b      	lsls	r3, r3, #2
    eeda:	b29b      	uxth	r3, r3
    eedc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    eee0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    eee4:	2200      	movs	r2, #0
    eee6:	601a      	str	r2, [r3, #0]
    eee8:	681b      	ldr	r3, [r3, #0]
}
    eeea:	4770      	bx	lr

0000eeec <absolute_time_to_cc>:
}
    eeec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    eef0:	4770      	bx	lr

0000eef2 <full_int_lock>:
	__asm__ volatile(
    eef2:	f04f 0320 	mov.w	r3, #32
    eef6:	f3ef 8011 	mrs	r0, BASEPRI
    eefa:	f383 8812 	msr	BASEPRI_MAX, r3
    eefe:	f3bf 8f6f 	isb	sy
}
    ef02:	4770      	bx	lr

0000ef04 <full_int_unlock>:
	__asm__ volatile(
    ef04:	f380 8811 	msr	BASEPRI, r0
    ef08:	f3bf 8f6f 	isb	sy
}
    ef0c:	4770      	bx	lr

0000ef0e <set_absolute_alarm>:
{
    ef0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ef10:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    ef12:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    ef16:	f7f8 fb3d 	bl	7594 <get_comparator>
    ef1a:	4607      	mov	r7, r0
    ef1c:	e019      	b.n	ef52 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    ef1e:	2013      	movs	r0, #19
    ef20:	f000 fa33 	bl	f38a <z_impl_k_busy_wait>
}
    ef24:	e022      	b.n	ef6c <set_absolute_alarm+0x5e>
		event_clear(chan);
    ef26:	4630      	mov	r0, r6
    ef28:	f7ff ffd4 	bl	eed4 <event_clear>
		event_enable(chan);
    ef2c:	4630      	mov	r0, r6
    ef2e:	f7f8 fb39 	bl	75a4 <event_enable>
		set_comparator(chan, cc_val);
    ef32:	4629      	mov	r1, r5
    ef34:	4630      	mov	r0, r6
    ef36:	f7f8 fb23 	bl	7580 <set_comparator>
		now2 = counter();
    ef3a:	f7f8 fb47 	bl	75cc <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    ef3e:	4284      	cmp	r4, r0
    ef40:	d01e      	beq.n	ef80 <set_absolute_alarm+0x72>
    ef42:	1c81      	adds	r1, r0, #2
    ef44:	4628      	mov	r0, r5
    ef46:	f7ff ffc1 	bl	eecc <counter_sub>
	} while ((now2 != now) &&
    ef4a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ef4e:	d917      	bls.n	ef80 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    ef50:	462f      	mov	r7, r5
		now = counter();
    ef52:	f7f8 fb3b 	bl	75cc <counter>
    ef56:	4604      	mov	r4, r0
		set_comparator(chan, now);
    ef58:	4601      	mov	r1, r0
    ef5a:	4630      	mov	r0, r6
    ef5c:	f7f8 fb10 	bl	7580 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    ef60:	4621      	mov	r1, r4
    ef62:	4638      	mov	r0, r7
    ef64:	f7ff ffb2 	bl	eecc <counter_sub>
    ef68:	2801      	cmp	r0, #1
    ef6a:	d0d8      	beq.n	ef1e <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    ef6c:	1ca7      	adds	r7, r4, #2
    ef6e:	4639      	mov	r1, r7
    ef70:	4628      	mov	r0, r5
    ef72:	f7ff ffab 	bl	eecc <counter_sub>
    ef76:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ef7a:	d9d4      	bls.n	ef26 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    ef7c:	463d      	mov	r5, r7
    ef7e:	e7d2      	b.n	ef26 <set_absolute_alarm+0x18>
}
    ef80:	4628      	mov	r0, r5
    ef82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ef84 <compare_set>:
{
    ef84:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef86:	b083      	sub	sp, #12
    ef88:	4604      	mov	r4, r0
    ef8a:	4617      	mov	r7, r2
    ef8c:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    ef8e:	f7f8 fb23 	bl	75d8 <compare_int_lock>
    ef92:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    ef94:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ef96:	9301      	str	r3, [sp, #4]
    ef98:	9b08      	ldr	r3, [sp, #32]
    ef9a:	9300      	str	r3, [sp, #0]
    ef9c:	463a      	mov	r2, r7
    ef9e:	462b      	mov	r3, r5
    efa0:	4620      	mov	r0, r4
    efa2:	f7f8 fc09 	bl	77b8 <compare_set_nolocks>
    efa6:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    efa8:	4631      	mov	r1, r6
    efaa:	4620      	mov	r0, r4
    efac:	f7f8 fb78 	bl	76a0 <compare_int_unlock>
}
    efb0:	4628      	mov	r0, r5
    efb2:	b003      	add	sp, #12
    efb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000efb6 <sys_clock_cycle_get_32>:
{
    efb6:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    efb8:	f7f8 fbde 	bl	7778 <z_nrf_rtc_timer_read>
}
    efbc:	bd08      	pop	{r3, pc}

0000efbe <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    efbe:	b410      	push	{r4}
	*state = &config->states[0];
    efc0:	6843      	ldr	r3, [r0, #4]
    efc2:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    efc4:	e001      	b.n	efca <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    efc6:	3408      	adds	r4, #8
    efc8:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    efca:	6814      	ldr	r4, [r2, #0]
    efcc:	7a03      	ldrb	r3, [r0, #8]
    efce:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    efd2:	3b01      	subs	r3, #1
    efd4:	f8d0 c004 	ldr.w	ip, [r0, #4]
    efd8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    efdc:	429c      	cmp	r4, r3
    efde:	d804      	bhi.n	efea <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    efe0:	7963      	ldrb	r3, [r4, #5]
    efe2:	428b      	cmp	r3, r1
    efe4:	d1ef      	bne.n	efc6 <pinctrl_lookup_state+0x8>
			return 0;
    efe6:	2000      	movs	r0, #0
    efe8:	e001      	b.n	efee <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    efea:	f06f 0001 	mvn.w	r0, #1
}
    efee:	bc10      	pop	{r4}
    eff0:	4770      	bx	lr

0000eff2 <z_log_msg2_runtime_create>:
{
    eff2:	b510      	push	{r4, lr}
    eff4:	b086      	sub	sp, #24
	va_start(ap, fmt);
    eff6:	ac0b      	add	r4, sp, #44	; 0x2c
    eff8:	9405      	str	r4, [sp, #20]
    effa:	9403      	str	r4, [sp, #12]
    effc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    effe:	9402      	str	r4, [sp, #8]
    f000:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f002:	9401      	str	r4, [sp, #4]
    f004:	9c08      	ldr	r4, [sp, #32]
    f006:	9400      	str	r4, [sp, #0]
    f008:	f7f6 f8be 	bl	5188 <z_impl_z_log_msg2_runtime_vcreate>
}
    f00c:	b006      	add	sp, #24
    f00e:	bd10      	pop	{r4, pc}

0000f010 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    f010:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    f012:	f7fe ff99 	bl	df48 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    f016:	bd08      	pop	{r3, pc}

0000f018 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    f018:	b510      	push	{r4, lr}
    f01a:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    f01c:	f7f6 fbe8 	bl	57f0 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    f020:	f7f6 fca8 	bl	5974 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    f024:	4620      	mov	r0, r4
    f026:	f7ff fff3 	bl	f010 <hw_cc3xx_init_internal>
	return res;
}
    f02a:	bd10      	pop	{r4, pc}

0000f02c <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f02c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f030:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    f034:	2b08      	cmp	r3, #8
    f036:	d001      	beq.n	f03c <nrf52_errata_36+0x10>
        return false;
    f038:	2000      	movs	r0, #0
    f03a:	4770      	bx	lr
                        return true;
    f03c:	2001      	movs	r0, #1
}
    f03e:	4770      	bx	lr

0000f040 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f040:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f044:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    f048:	2b08      	cmp	r3, #8
    f04a:	d001      	beq.n	f050 <nrf52_errata_66+0x10>
        return false;
    f04c:	2000      	movs	r0, #0
    f04e:	4770      	bx	lr
                        return true;
    f050:	2001      	movs	r0, #1
}
    f052:	4770      	bx	lr

0000f054 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f054:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f058:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    f05c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    f060:	2a08      	cmp	r2, #8
    f062:	d001      	beq.n	f068 <nrf52_errata_98+0x14>
        return false;
    f064:	2000      	movs	r0, #0
    f066:	4770      	bx	lr
                switch(var2)
    f068:	2b00      	cmp	r3, #0
    f06a:	d804      	bhi.n	f076 <nrf52_errata_98+0x22>
    f06c:	e8df f003 	tbb	[pc, r3]
    f070:	01          	.byte	0x01
    f071:	00          	.byte	0x00
    f072:	2001      	movs	r0, #1
    f074:	4770      	bx	lr
                        return false;
    f076:	2000      	movs	r0, #0
}
    f078:	4770      	bx	lr

0000f07a <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f07a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f07e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    f082:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    f086:	2a08      	cmp	r2, #8
    f088:	d001      	beq.n	f08e <nrf52_errata_103+0x14>
        return false;
    f08a:	2000      	movs	r0, #0
    f08c:	4770      	bx	lr
                switch(var2)
    f08e:	2b00      	cmp	r3, #0
    f090:	d804      	bhi.n	f09c <nrf52_errata_103+0x22>
    f092:	e8df f003 	tbb	[pc, r3]
    f096:	01          	.byte	0x01
    f097:	00          	.byte	0x00
    f098:	2001      	movs	r0, #1
    f09a:	4770      	bx	lr
                        return false;
    f09c:	2000      	movs	r0, #0
}
    f09e:	4770      	bx	lr

0000f0a0 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f0a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f0a4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    f0a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    f0ac:	2a08      	cmp	r2, #8
    f0ae:	d001      	beq.n	f0b4 <nrf52_errata_115+0x14>
        return false;
    f0b0:	2000      	movs	r0, #0
    f0b2:	4770      	bx	lr
                switch(var2)
    f0b4:	2b00      	cmp	r3, #0
    f0b6:	d804      	bhi.n	f0c2 <nrf52_errata_115+0x22>
    f0b8:	e8df f003 	tbb	[pc, r3]
    f0bc:	01          	.byte	0x01
    f0bd:	00          	.byte	0x00
    f0be:	2001      	movs	r0, #1
    f0c0:	4770      	bx	lr
                        return false;
    f0c2:	2000      	movs	r0, #0
}
    f0c4:	4770      	bx	lr

0000f0c6 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f0c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f0ca:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    f0ce:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    f0d2:	2a08      	cmp	r2, #8
    f0d4:	d001      	beq.n	f0da <nrf52_errata_120+0x14>
        return false;
    f0d6:	2000      	movs	r0, #0
    f0d8:	4770      	bx	lr
                switch(var2)
    f0da:	2b00      	cmp	r3, #0
    f0dc:	d804      	bhi.n	f0e8 <nrf52_errata_120+0x22>
    f0de:	e8df f003 	tbb	[pc, r3]
    f0e2:	01          	.byte	0x01
    f0e3:	00          	.byte	0x00
    f0e4:	2001      	movs	r0, #1
    f0e6:	4770      	bx	lr
                        return false;
    f0e8:	2000      	movs	r0, #0
}
    f0ea:	4770      	bx	lr

0000f0ec <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f0ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f0f0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    f0f4:	2b08      	cmp	r3, #8
    f0f6:	d001      	beq.n	f0fc <nrf52_errata_136+0x10>
        return false;
    f0f8:	2000      	movs	r0, #0
    f0fa:	4770      	bx	lr
                        return true;
    f0fc:	2001      	movs	r0, #1
}
    f0fe:	4770      	bx	lr

0000f100 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f100:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f104:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    f108:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    f10c:	2a08      	cmp	r2, #8
    f10e:	d001      	beq.n	f114 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    f110:	2000      	movs	r0, #0
    f112:	4770      	bx	lr
                switch(var2)
    f114:	2b04      	cmp	r3, #4
    f116:	d801      	bhi.n	f11c <nrf52_configuration_249+0x1c>
    f118:	2000      	movs	r0, #0
    f11a:	4770      	bx	lr
                        return true;
    f11c:	2001      	movs	r0, #1
    #endif
}
    f11e:	4770      	bx	lr

0000f120 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    f120:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    f122:	4780      	blx	r0
}
    f124:	bd08      	pop	{r3, pc}

0000f126 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    f126:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    f128:	f000 f92f 	bl	f38a <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    f12c:	bd08      	pop	{r3, pc}

0000f12e <clock_initial_lfclksrc_get>:
}
    f12e:	2000      	movs	r0, #0
    f130:	4770      	bx	lr

0000f132 <clock_lfclksrc_tweak>:
{
    f132:	b538      	push	{r3, r4, r5, lr}
    f134:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    f136:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    f138:	2b01      	cmp	r3, #1
    f13a:	d002      	beq.n	f142 <clock_lfclksrc_tweak+0x10>
    f13c:	b933      	cbnz	r3, f14c <clock_lfclksrc_tweak+0x1a>
    f13e:	2301      	movs	r3, #1
    f140:	e000      	b.n	f144 <clock_lfclksrc_tweak+0x12>
    f142:	2301      	movs	r3, #1
    if (!is_correct_clk)
    f144:	461d      	mov	r5, r3
    f146:	b11b      	cbz	r3, f150 <clock_lfclksrc_tweak+0x1e>
}
    f148:	4628      	mov	r0, r5
    f14a:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    f14c:	2300      	movs	r3, #0
    f14e:	e7f9      	b.n	f144 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    f150:	2000      	movs	r0, #0
    f152:	f7f9 fa9b 	bl	868c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    f156:	f7ff ffea 	bl	f12e <clock_initial_lfclksrc_get>
    f15a:	6020      	str	r0, [r4, #0]
    f15c:	e7f4      	b.n	f148 <clock_lfclksrc_tweak+0x16>

0000f15e <pin_is_task_output>:
{
    f15e:	b510      	push	{r4, lr}
    f160:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    f162:	f7f9 fc65 	bl	8a30 <pin_is_output>
    f166:	b128      	cbz	r0, f174 <pin_is_task_output+0x16>
    f168:	4620      	mov	r0, r4
    f16a:	f7f9 fc4b 	bl	8a04 <pin_in_use_by_te>
    f16e:	b118      	cbz	r0, f178 <pin_is_task_output+0x1a>
    f170:	2001      	movs	r0, #1
    f172:	e000      	b.n	f176 <pin_is_task_output+0x18>
    f174:	2000      	movs	r0, #0
}
    f176:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    f178:	2000      	movs	r0, #0
    f17a:	e7fc      	b.n	f176 <pin_is_task_output+0x18>

0000f17c <pin_is_input>:
{
    f17c:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    f17e:	f7f9 fc57 	bl	8a30 <pin_is_output>
    f182:	f080 0001 	eor.w	r0, r0, #1
}
    f186:	b2c0      	uxtb	r0, r0
    f188:	bd08      	pop	{r3, pc}

0000f18a <gpiote_polarity_to_trigger>:
}
    f18a:	4770      	bx	lr

0000f18c <gpiote_trigger_to_polarity>:
}
    f18c:	4770      	bx	lr

0000f18e <is_level>:
}
    f18e:	2803      	cmp	r0, #3
    f190:	bf94      	ite	ls
    f192:	2000      	movls	r0, #0
    f194:	2001      	movhi	r0, #1
    f196:	4770      	bx	lr

0000f198 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    f198:	b508      	push	{r3, lr}
  _DoInit();
    f19a:	f7fa fc13 	bl	99c4 <_DoInit>
}
    f19e:	bd08      	pop	{r3, pc}

0000f1a0 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    f1a0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    f1a2:	f7ff fff9 	bl	f198 <SEGGER_RTT_Init>

	return 0;
}
    f1a6:	2000      	movs	r0, #0
    f1a8:	bd08      	pop	{r3, pc}

0000f1aa <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    f1aa:	b148      	cbz	r0, f1c0 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    f1ac:	68c3      	ldr	r3, [r0, #12]
    f1ae:	8818      	ldrh	r0, [r3, #0]
    f1b0:	f3c0 0008 	ubfx	r0, r0, #0, #9
    f1b4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    f1b8:	bf14      	ite	ne
    f1ba:	2000      	movne	r0, #0
    f1bc:	2001      	moveq	r0, #1
    f1be:	4770      	bx	lr
		return false;
    f1c0:	2000      	movs	r0, #0
}
    f1c2:	4770      	bx	lr

0000f1c4 <z_log_msg2_runtime_create>:
{
    f1c4:	b510      	push	{r4, lr}
    f1c6:	b086      	sub	sp, #24
	va_start(ap, fmt);
    f1c8:	ac0b      	add	r4, sp, #44	; 0x2c
    f1ca:	9405      	str	r4, [sp, #20]
    f1cc:	9403      	str	r4, [sp, #12]
    f1ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f1d0:	9402      	str	r4, [sp, #8]
    f1d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f1d4:	9401      	str	r4, [sp, #4]
    f1d6:	9c08      	ldr	r4, [sp, #32]
    f1d8:	9400      	str	r4, [sp, #0]
    f1da:	f7f5 ffd5 	bl	5188 <z_impl_z_log_msg2_runtime_vcreate>
}
    f1de:	b006      	add	sp, #24
    f1e0:	bd10      	pop	{r4, pc}

0000f1e2 <z_early_memset>:
{
    f1e2:	b508      	push	{r3, lr}
__ssp_bos_icheck3(memset, void *, int)
    f1e4:	f000 f910 	bl	f408 <memset>
}
    f1e8:	bd08      	pop	{r3, pc}

0000f1ea <z_early_memcpy>:
{
    f1ea:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    f1ec:	f000 f8fe 	bl	f3ec <memcpy>
}
    f1f0:	bd08      	pop	{r3, pc}

0000f1f2 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    f1f2:	6902      	ldr	r2, [r0, #16]
    f1f4:	6943      	ldr	r3, [r0, #20]
    f1f6:	431a      	orrs	r2, r3
    f1f8:	f012 0203 	ands.w	r2, r2, #3
    f1fc:	d10d      	bne.n	f21a <create_free_list+0x28>
	slab->free_list = NULL;
    f1fe:	2100      	movs	r1, #0
    f200:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    f202:	e005      	b.n	f210 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    f204:	6981      	ldr	r1, [r0, #24]
    f206:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    f208:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    f20a:	6901      	ldr	r1, [r0, #16]
    f20c:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    f20e:	3201      	adds	r2, #1
    f210:	68c1      	ldr	r1, [r0, #12]
    f212:	4291      	cmp	r1, r2
    f214:	d8f6      	bhi.n	f204 <create_free_list+0x12>
	return 0;
    f216:	2000      	movs	r0, #0
    f218:	4770      	bx	lr
		return -EINVAL;
    f21a:	f06f 0015 	mvn.w	r0, #21
}
    f21e:	4770      	bx	lr

0000f220 <k_mem_slab_init>:
{
    f220:	b510      	push	{r4, lr}
    f222:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    f224:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    f226:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    f228:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    f22a:	2300      	movs	r3, #0
    f22c:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    f22e:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    f230:	f7ff ffdf 	bl	f1f2 <create_free_list>
	if (rc < 0) {
    f234:	2800      	cmp	r0, #0
    f236:	db01      	blt.n	f23c <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    f238:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    f23a:	6064      	str	r4, [r4, #4]
}
    f23c:	bd10      	pop	{r4, pc}

0000f23e <setup_thread_stack>:
{
    f23e:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    f240:	3207      	adds	r2, #7
    f242:	f022 0207 	bic.w	r2, r2, #7
    f246:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    f24a:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    f24e:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    f252:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    f256:	2200      	movs	r2, #0
    f258:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    f25c:	18c8      	adds	r0, r1, r3
    f25e:	bc10      	pop	{r4}
    f260:	4770      	bx	lr

0000f262 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    f262:	f3ef 8005 	mrs	r0, IPSR
}
    f266:	3800      	subs	r0, #0
    f268:	bf18      	it	ne
    f26a:	2001      	movne	r0, #1
    f26c:	4770      	bx	lr

0000f26e <k_thread_name_get>:
}
    f26e:	3074      	adds	r0, #116	; 0x74
    f270:	4770      	bx	lr

0000f272 <z_impl_k_thread_start>:
{
    f272:	b508      	push	{r3, lr}
	z_sched_start(thread);
    f274:	f7fb fff2 	bl	b25c <z_sched_start>
}
    f278:	bd08      	pop	{r3, pc}

0000f27a <z_init_thread_base>:
{
    f27a:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    f27c:	2400      	movs	r4, #0
    f27e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    f280:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    f282:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    f284:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    f286:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    f288:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    f28a:	61c4      	str	r4, [r0, #28]
}
    f28c:	bc10      	pop	{r4}
    f28e:	4770      	bx	lr

0000f290 <z_pm_save_idle_exit>:
{
    f290:	b508      	push	{r3, lr}
	pm_system_resume();
    f292:	f7f6 f8b7 	bl	5404 <pm_system_resume>
	sys_clock_idle_exit();
    f296:	f7ff fe18 	bl	eeca <sys_clock_idle_exit>
}
    f29a:	bd08      	pop	{r3, pc}

0000f29c <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    f29c:	4288      	cmp	r0, r1
    f29e:	da00      	bge.n	f2a2 <new_prio_for_inheritance+0x6>
    f2a0:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    f2a2:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    f2a6:	db01      	blt.n	f2ac <new_prio_for_inheritance+0x10>
    f2a8:	4608      	mov	r0, r1
    f2aa:	4770      	bx	lr
    f2ac:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    f2b0:	4770      	bx	lr

0000f2b2 <adjust_owner_prio>:
{
    f2b2:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    f2b4:	6880      	ldr	r0, [r0, #8]
    f2b6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f2ba:	428b      	cmp	r3, r1
    f2bc:	d101      	bne.n	f2c2 <adjust_owner_prio+0x10>
	return false;
    f2be:	2000      	movs	r0, #0
}
    f2c0:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    f2c2:	f7fc f981 	bl	b5c8 <z_set_prio>
    f2c6:	e7fb      	b.n	f2c0 <adjust_owner_prio+0xe>

0000f2c8 <z_impl_k_mutex_init>:
{
    f2c8:	4603      	mov	r3, r0
	mutex->owner = NULL;
    f2ca:	2000      	movs	r0, #0
    f2cc:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    f2ce:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    f2d0:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    f2d2:	605b      	str	r3, [r3, #4]
}
    f2d4:	4770      	bx	lr

0000f2d6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    f2d6:	b13a      	cbz	r2, f2e8 <z_impl_k_sem_init+0x12>
    f2d8:	428a      	cmp	r2, r1
    f2da:	d308      	bcc.n	f2ee <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    f2dc:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    f2de:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    f2e0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    f2e2:	6040      	str	r0, [r0, #4]
	return 0;
    f2e4:	2000      	movs	r0, #0
    f2e6:	4770      	bx	lr
		return -EINVAL;
    f2e8:	f06f 0015 	mvn.w	r0, #21
    f2ec:	4770      	bx	lr
    f2ee:	f06f 0015 	mvn.w	r0, #21
}
    f2f2:	4770      	bx	lr

0000f2f4 <thread_active_elsewhere>:
}
    f2f4:	2000      	movs	r0, #0
    f2f6:	4770      	bx	lr

0000f2f8 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    f2f8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    f2fc:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    f300:	4283      	cmp	r3, r0
    f302:	d001      	beq.n	f308 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    f304:	1ac0      	subs	r0, r0, r3
    f306:	4770      	bx	lr
	return 0;
    f308:	2000      	movs	r0, #0
}
    f30a:	4770      	bx	lr

0000f30c <z_reschedule_irqlock>:
{
    f30c:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    f30e:	4603      	mov	r3, r0
    f310:	b920      	cbnz	r0, f31c <z_reschedule_irqlock+0x10>
    f312:	f3ef 8205 	mrs	r2, IPSR
    f316:	b942      	cbnz	r2, f32a <z_reschedule_irqlock+0x1e>
    f318:	2201      	movs	r2, #1
    f31a:	e000      	b.n	f31e <z_reschedule_irqlock+0x12>
    f31c:	2200      	movs	r2, #0
	if (resched(key)) {
    f31e:	b932      	cbnz	r2, f32e <z_reschedule_irqlock+0x22>
    f320:	f383 8811 	msr	BASEPRI, r3
    f324:	f3bf 8f6f 	isb	sy
}
    f328:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    f32a:	2200      	movs	r2, #0
    f32c:	e7f7      	b.n	f31e <z_reschedule_irqlock+0x12>
    f32e:	4618      	mov	r0, r3
    f330:	f7f6 fc0e 	bl	5b50 <arch_swap>
	return ret;
    f334:	e7f8      	b.n	f328 <z_reschedule_irqlock+0x1c>

0000f336 <z_priq_dumb_best>:
{
    f336:	4603      	mov	r3, r0
	return list->head == list;
    f338:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f33a:	4283      	cmp	r3, r0
    f33c:	d000      	beq.n	f340 <z_priq_dumb_best+0xa>
}
    f33e:	4770      	bx	lr
	struct k_thread *thread = NULL;
    f340:	2000      	movs	r0, #0
	return thread;
    f342:	e7fc      	b.n	f33e <z_priq_dumb_best+0x8>

0000f344 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    f344:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    f346:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    f348:	6083      	str	r3, [r0, #8]
}
    f34a:	4770      	bx	lr

0000f34c <remove_timeout>:
{
    f34c:	b510      	push	{r4, lr}
    f34e:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    f350:	f7fc fe3a 	bl	bfc8 <next>
    f354:	b148      	cbz	r0, f36a <remove_timeout+0x1e>
    f356:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    f358:	6920      	ldr	r0, [r4, #16]
    f35a:	6961      	ldr	r1, [r4, #20]
    f35c:	6913      	ldr	r3, [r2, #16]
    f35e:	181b      	adds	r3, r3, r0
    f360:	6950      	ldr	r0, [r2, #20]
    f362:	eb41 0100 	adc.w	r1, r1, r0
    f366:	6113      	str	r3, [r2, #16]
    f368:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    f36a:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    f36c:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    f36e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    f370:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    f372:	2300      	movs	r3, #0
    f374:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    f376:	6063      	str	r3, [r4, #4]
}
    f378:	bd10      	pop	{r4, pc}

0000f37a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    f37a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    f37c:	f7fd f920 	bl	c5c0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    f380:	bd08      	pop	{r3, pc}

0000f382 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    f382:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    f384:	f7fd f91c 	bl	c5c0 <sys_clock_tick_get>
}
    f388:	bd08      	pop	{r3, pc}

0000f38a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    f38a:	b900      	cbnz	r0, f38e <z_impl_k_busy_wait+0x4>
    f38c:	4770      	bx	lr
{
    f38e:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    f390:	f7f7 fb72 	bl	6a78 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    f394:	bd08      	pop	{r3, pc}

0000f396 <k_heap_init>:
{
    f396:	b510      	push	{r4, lr}
    f398:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    f39c:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    f39e:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    f3a0:	f7f4 fda6 	bl	3ef0 <sys_heap_init>
}
    f3a4:	bd10      	pop	{r4, pc}

0000f3a6 <fabs>:
    f3a6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    f3aa:	4770      	bx	lr

0000f3ac <finite>:
    f3ac:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
    f3b0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
    f3b4:	0fc0      	lsrs	r0, r0, #31
    f3b6:	4770      	bx	lr

0000f3b8 <__itoa>:
    f3b8:	1e93      	subs	r3, r2, #2
    f3ba:	2b22      	cmp	r3, #34	; 0x22
    f3bc:	b510      	push	{r4, lr}
    f3be:	460c      	mov	r4, r1
    f3c0:	d904      	bls.n	f3cc <__itoa+0x14>
    f3c2:	2300      	movs	r3, #0
    f3c4:	700b      	strb	r3, [r1, #0]
    f3c6:	461c      	mov	r4, r3
    f3c8:	4620      	mov	r0, r4
    f3ca:	bd10      	pop	{r4, pc}
    f3cc:	2a0a      	cmp	r2, #10
    f3ce:	d109      	bne.n	f3e4 <__itoa+0x2c>
    f3d0:	2800      	cmp	r0, #0
    f3d2:	da07      	bge.n	f3e4 <__itoa+0x2c>
    f3d4:	232d      	movs	r3, #45	; 0x2d
    f3d6:	700b      	strb	r3, [r1, #0]
    f3d8:	4240      	negs	r0, r0
    f3da:	2101      	movs	r1, #1
    f3dc:	4421      	add	r1, r4
    f3de:	f7fd fcaf 	bl	cd40 <__utoa>
    f3e2:	e7f1      	b.n	f3c8 <__itoa+0x10>
    f3e4:	2100      	movs	r1, #0
    f3e6:	e7f9      	b.n	f3dc <__itoa+0x24>

0000f3e8 <itoa>:
    f3e8:	f7ff bfe6 	b.w	f3b8 <__itoa>

0000f3ec <memcpy>:
    f3ec:	440a      	add	r2, r1
    f3ee:	4291      	cmp	r1, r2
    f3f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    f3f4:	d100      	bne.n	f3f8 <memcpy+0xc>
    f3f6:	4770      	bx	lr
    f3f8:	b510      	push	{r4, lr}
    f3fa:	f811 4b01 	ldrb.w	r4, [r1], #1
    f3fe:	f803 4f01 	strb.w	r4, [r3, #1]!
    f402:	4291      	cmp	r1, r2
    f404:	d1f9      	bne.n	f3fa <memcpy+0xe>
    f406:	bd10      	pop	{r4, pc}

0000f408 <memset>:
    f408:	4402      	add	r2, r0
    f40a:	4603      	mov	r3, r0
    f40c:	4293      	cmp	r3, r2
    f40e:	d100      	bne.n	f412 <memset+0xa>
    f410:	4770      	bx	lr
    f412:	f803 1b01 	strb.w	r1, [r3], #1
    f416:	e7f9      	b.n	f40c <memset+0x4>

0000f418 <strcpy>:
    f418:	4603      	mov	r3, r0
    f41a:	f811 2b01 	ldrb.w	r2, [r1], #1
    f41e:	f803 2b01 	strb.w	r2, [r3], #1
    f422:	2a00      	cmp	r2, #0
    f424:	d1f9      	bne.n	f41a <strcpy+0x2>
    f426:	4770      	bx	lr

0000f428 <strncpy>:
    f428:	b510      	push	{r4, lr}
    f42a:	3901      	subs	r1, #1
    f42c:	4603      	mov	r3, r0
    f42e:	b132      	cbz	r2, f43e <strncpy+0x16>
    f430:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    f434:	f803 4b01 	strb.w	r4, [r3], #1
    f438:	3a01      	subs	r2, #1
    f43a:	2c00      	cmp	r4, #0
    f43c:	d1f7      	bne.n	f42e <strncpy+0x6>
    f43e:	441a      	add	r2, r3
    f440:	2100      	movs	r1, #0
    f442:	4293      	cmp	r3, r2
    f444:	d100      	bne.n	f448 <strncpy+0x20>
    f446:	bd10      	pop	{r4, pc}
    f448:	f803 1b01 	strb.w	r1, [r3], #1
    f44c:	e7f9      	b.n	f442 <strncpy+0x1a>

0000f44e <strnlen>:
    f44e:	b510      	push	{r4, lr}
    f450:	4602      	mov	r2, r0
    f452:	4401      	add	r1, r0
    f454:	428a      	cmp	r2, r1
    f456:	4613      	mov	r3, r2
    f458:	d003      	beq.n	f462 <strnlen+0x14>
    f45a:	781c      	ldrb	r4, [r3, #0]
    f45c:	3201      	adds	r2, #1
    f45e:	2c00      	cmp	r4, #0
    f460:	d1f8      	bne.n	f454 <strnlen+0x6>
    f462:	1a18      	subs	r0, r3, r0
    f464:	bd10      	pop	{r4, pc}

0000f466 <print_e>:
    f466:	b5f0      	push	{r4, r5, r6, r7, lr}
    f468:	b08b      	sub	sp, #44	; 0x2c
    f46a:	460d      	mov	r5, r1
    f46c:	a908      	add	r1, sp, #32
    f46e:	9e10      	ldr	r6, [sp, #64]	; 0x40
    f470:	9104      	str	r1, [sp, #16]
    f472:	a907      	add	r1, sp, #28
    f474:	9103      	str	r1, [sp, #12]
    f476:	a909      	add	r1, sp, #36	; 0x24
    f478:	9102      	str	r1, [sp, #8]
    f47a:	1c71      	adds	r1, r6, #1
    f47c:	9101      	str	r1, [sp, #4]
    f47e:	2102      	movs	r1, #2
    f480:	9100      	str	r1, [sp, #0]
    f482:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
    f486:	9c12      	ldr	r4, [sp, #72]	; 0x48
    f488:	f7f2 fd8a 	bl	1fa0 <_dtoa_r>
    f48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f48e:	f242 730f 	movw	r3, #9999	; 0x270f
    f492:	429a      	cmp	r2, r3
    f494:	4601      	mov	r1, r0
    f496:	d104      	bne.n	f4a2 <print_e+0x3c>
    f498:	4628      	mov	r0, r5
    f49a:	f7ff ffbd 	bl	f418 <strcpy>
    f49e:	b00b      	add	sp, #44	; 0x2c
    f4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4a2:	462b      	mov	r3, r5
    f4a4:	7800      	ldrb	r0, [r0, #0]
    f4a6:	f803 0b01 	strb.w	r0, [r3], #1
    f4aa:	2e00      	cmp	r6, #0
    f4ac:	bfc8      	it	gt
    f4ae:	2401      	movgt	r4, #1
    f4b0:	202e      	movs	r0, #46	; 0x2e
    f4b2:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    f4b6:	b10d      	cbz	r5, f4bc <print_e+0x56>
    f4b8:	2e00      	cmp	r6, #0
    f4ba:	dc37      	bgt.n	f52c <print_e+0xc6>
    f4bc:	2f67      	cmp	r7, #103	; 0x67
    f4be:	d046      	beq.n	f54e <print_e+0xe8>
    f4c0:	2f47      	cmp	r7, #71	; 0x47
    f4c2:	d046      	beq.n	f552 <print_e+0xec>
    f4c4:	212e      	movs	r1, #46	; 0x2e
    f4c6:	2030      	movs	r0, #48	; 0x30
    f4c8:	2e00      	cmp	r6, #0
    f4ca:	dc38      	bgt.n	f53e <print_e+0xd8>
    f4cc:	1e51      	subs	r1, r2, #1
    f4ce:	2900      	cmp	r1, #0
    f4d0:	bfb8      	it	lt
    f4d2:	f1c2 0201 	rsblt	r2, r2, #1
    f4d6:	4618      	mov	r0, r3
    f4d8:	9109      	str	r1, [sp, #36]	; 0x24
    f4da:	bfac      	ite	ge
    f4dc:	222b      	movge	r2, #43	; 0x2b
    f4de:	9209      	strlt	r2, [sp, #36]	; 0x24
    f4e0:	f800 7b02 	strb.w	r7, [r0], #2
    f4e4:	bfa8      	it	ge
    f4e6:	705a      	strbge	r2, [r3, #1]
    f4e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f4ea:	bfbc      	itt	lt
    f4ec:	212d      	movlt	r1, #45	; 0x2d
    f4ee:	7059      	strblt	r1, [r3, #1]
    f4f0:	2a63      	cmp	r2, #99	; 0x63
    f4f2:	dd0b      	ble.n	f50c <print_e+0xa6>
    f4f4:	2164      	movs	r1, #100	; 0x64
    f4f6:	fb92 f1f1 	sdiv	r1, r2, r1
    f4fa:	f101 0430 	add.w	r4, r1, #48	; 0x30
    f4fe:	1cd8      	adds	r0, r3, #3
    f500:	709c      	strb	r4, [r3, #2]
    f502:	f06f 0363 	mvn.w	r3, #99	; 0x63
    f506:	fb03 2201 	mla	r2, r3, r1, r2
    f50a:	9209      	str	r2, [sp, #36]	; 0x24
    f50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f50e:	220a      	movs	r2, #10
    f510:	fb93 f2f2 	sdiv	r2, r3, r2
    f514:	f102 0130 	add.w	r1, r2, #48	; 0x30
    f518:	7001      	strb	r1, [r0, #0]
    f51a:	f06f 0109 	mvn.w	r1, #9
    f51e:	fb01 3302 	mla	r3, r1, r2, r3
    f522:	3330      	adds	r3, #48	; 0x30
    f524:	7043      	strb	r3, [r0, #1]
    f526:	2300      	movs	r3, #0
    f528:	7083      	strb	r3, [r0, #2]
    f52a:	e7b8      	b.n	f49e <print_e+0x38>
    f52c:	b10c      	cbz	r4, f532 <print_e+0xcc>
    f52e:	f803 0b01 	strb.w	r0, [r3], #1
    f532:	780c      	ldrb	r4, [r1, #0]
    f534:	f803 4b01 	strb.w	r4, [r3], #1
    f538:	3e01      	subs	r6, #1
    f53a:	2400      	movs	r4, #0
    f53c:	e7b9      	b.n	f4b2 <print_e+0x4c>
    f53e:	b10c      	cbz	r4, f544 <print_e+0xde>
    f540:	f803 1b01 	strb.w	r1, [r3], #1
    f544:	f803 0b01 	strb.w	r0, [r3], #1
    f548:	3e01      	subs	r6, #1
    f54a:	2400      	movs	r4, #0
    f54c:	e7bc      	b.n	f4c8 <print_e+0x62>
    f54e:	2765      	movs	r7, #101	; 0x65
    f550:	e7bc      	b.n	f4cc <print_e+0x66>
    f552:	2745      	movs	r7, #69	; 0x45
    f554:	e7ba      	b.n	f4cc <print_e+0x66>

0000f556 <__hi0bits>:
    f556:	0c02      	lsrs	r2, r0, #16
    f558:	0412      	lsls	r2, r2, #16
    f55a:	4603      	mov	r3, r0
    f55c:	b9ca      	cbnz	r2, f592 <__hi0bits+0x3c>
    f55e:	0403      	lsls	r3, r0, #16
    f560:	2010      	movs	r0, #16
    f562:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    f566:	bf04      	itt	eq
    f568:	021b      	lsleq	r3, r3, #8
    f56a:	3008      	addeq	r0, #8
    f56c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    f570:	bf04      	itt	eq
    f572:	011b      	lsleq	r3, r3, #4
    f574:	3004      	addeq	r0, #4
    f576:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    f57a:	bf04      	itt	eq
    f57c:	009b      	lsleq	r3, r3, #2
    f57e:	3002      	addeq	r0, #2
    f580:	2b00      	cmp	r3, #0
    f582:	db05      	blt.n	f590 <__hi0bits+0x3a>
    f584:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    f588:	f100 0001 	add.w	r0, r0, #1
    f58c:	bf08      	it	eq
    f58e:	2020      	moveq	r0, #32
    f590:	4770      	bx	lr
    f592:	2000      	movs	r0, #0
    f594:	e7e5      	b.n	f562 <__hi0bits+0xc>

0000f596 <__lo0bits>:
    f596:	6803      	ldr	r3, [r0, #0]
    f598:	4602      	mov	r2, r0
    f59a:	f013 0007 	ands.w	r0, r3, #7
    f59e:	d00b      	beq.n	f5b8 <__lo0bits+0x22>
    f5a0:	07d9      	lsls	r1, r3, #31
    f5a2:	d421      	bmi.n	f5e8 <__lo0bits+0x52>
    f5a4:	0798      	lsls	r0, r3, #30
    f5a6:	bf49      	itett	mi
    f5a8:	085b      	lsrmi	r3, r3, #1
    f5aa:	089b      	lsrpl	r3, r3, #2
    f5ac:	2001      	movmi	r0, #1
    f5ae:	6013      	strmi	r3, [r2, #0]
    f5b0:	bf5c      	itt	pl
    f5b2:	6013      	strpl	r3, [r2, #0]
    f5b4:	2002      	movpl	r0, #2
    f5b6:	4770      	bx	lr
    f5b8:	b299      	uxth	r1, r3
    f5ba:	b909      	cbnz	r1, f5c0 <__lo0bits+0x2a>
    f5bc:	0c1b      	lsrs	r3, r3, #16
    f5be:	2010      	movs	r0, #16
    f5c0:	b2d9      	uxtb	r1, r3
    f5c2:	b909      	cbnz	r1, f5c8 <__lo0bits+0x32>
    f5c4:	3008      	adds	r0, #8
    f5c6:	0a1b      	lsrs	r3, r3, #8
    f5c8:	0719      	lsls	r1, r3, #28
    f5ca:	bf04      	itt	eq
    f5cc:	091b      	lsreq	r3, r3, #4
    f5ce:	3004      	addeq	r0, #4
    f5d0:	0799      	lsls	r1, r3, #30
    f5d2:	bf04      	itt	eq
    f5d4:	089b      	lsreq	r3, r3, #2
    f5d6:	3002      	addeq	r0, #2
    f5d8:	07d9      	lsls	r1, r3, #31
    f5da:	d403      	bmi.n	f5e4 <__lo0bits+0x4e>
    f5dc:	085b      	lsrs	r3, r3, #1
    f5de:	f100 0001 	add.w	r0, r0, #1
    f5e2:	d003      	beq.n	f5ec <__lo0bits+0x56>
    f5e4:	6013      	str	r3, [r2, #0]
    f5e6:	4770      	bx	lr
    f5e8:	2000      	movs	r0, #0
    f5ea:	4770      	bx	lr
    f5ec:	2020      	movs	r0, #32
    f5ee:	4770      	bx	lr

0000f5f0 <__mcmp>:
    f5f0:	690a      	ldr	r2, [r1, #16]
    f5f2:	4603      	mov	r3, r0
    f5f4:	6900      	ldr	r0, [r0, #16]
    f5f6:	1a80      	subs	r0, r0, r2
    f5f8:	b530      	push	{r4, r5, lr}
    f5fa:	d10d      	bne.n	f618 <__mcmp+0x28>
    f5fc:	3314      	adds	r3, #20
    f5fe:	3114      	adds	r1, #20
    f600:	eb03 0482 	add.w	r4, r3, r2, lsl #2
    f604:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    f608:	f854 5d04 	ldr.w	r5, [r4, #-4]!
    f60c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    f610:	4295      	cmp	r5, r2
    f612:	d002      	beq.n	f61a <__mcmp+0x2a>
    f614:	d304      	bcc.n	f620 <__mcmp+0x30>
    f616:	2001      	movs	r0, #1
    f618:	bd30      	pop	{r4, r5, pc}
    f61a:	42a3      	cmp	r3, r4
    f61c:	d3f4      	bcc.n	f608 <__mcmp+0x18>
    f61e:	e7fb      	b.n	f618 <__mcmp+0x28>
    f620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f624:	e7f8      	b.n	f618 <__mcmp+0x28>

0000f626 <_calloc_r>:
    f626:	b538      	push	{r3, r4, r5, lr}
    f628:	fb02 f501 	mul.w	r5, r2, r1
    f62c:	4629      	mov	r1, r5
    f62e:	f7fd fb1d 	bl	cc6c <_malloc_r>
    f632:	4604      	mov	r4, r0
    f634:	b118      	cbz	r0, f63e <_calloc_r+0x18>
    f636:	462a      	mov	r2, r5
    f638:	2100      	movs	r1, #0
    f63a:	f7ff fee5 	bl	f408 <memset>
    f63e:	4620      	mov	r0, r4
    f640:	bd38      	pop	{r3, r4, r5, pc}

0000f642 <quorem>:
    f642:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f646:	6903      	ldr	r3, [r0, #16]
    f648:	690c      	ldr	r4, [r1, #16]
    f64a:	42a3      	cmp	r3, r4
    f64c:	4607      	mov	r7, r0
    f64e:	db7d      	blt.n	f74c <quorem+0x10a>
    f650:	3c01      	subs	r4, #1
    f652:	f101 0814 	add.w	r8, r1, #20
    f656:	f100 0514 	add.w	r5, r0, #20
    f65a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    f65e:	9301      	str	r3, [sp, #4]
    f660:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
    f664:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    f668:	3301      	adds	r3, #1
    f66a:	429a      	cmp	r2, r3
    f66c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
    f670:	eb08 0984 	add.w	r9, r8, r4, lsl #2
    f674:	fbb2 f6f3 	udiv	r6, r2, r3
    f678:	d32e      	bcc.n	f6d8 <quorem+0x96>
    f67a:	f04f 0e00 	mov.w	lr, #0
    f67e:	4640      	mov	r0, r8
    f680:	46ac      	mov	ip, r5
    f682:	46f2      	mov	sl, lr
    f684:	f850 2b04 	ldr.w	r2, [r0], #4
    f688:	b293      	uxth	r3, r2
    f68a:	fb06 e303 	mla	r3, r6, r3, lr
    f68e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
    f692:	0c12      	lsrs	r2, r2, #16
    f694:	b29b      	uxth	r3, r3
    f696:	fb06 e202 	mla	r2, r6, r2, lr
    f69a:	ebaa 0303 	sub.w	r3, sl, r3
    f69e:	f8dc a000 	ldr.w	sl, [ip]
    f6a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    f6a6:	b292      	uxth	r2, r2
    f6a8:	fa13 f38a 	uxtah	r3, r3, sl
    f6ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
    f6b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
    f6b4:	b29b      	uxth	r3, r3
    f6b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    f6ba:	4581      	cmp	r9, r0
    f6bc:	f84c 3b04 	str.w	r3, [ip], #4
    f6c0:	ea4f 4a22 	mov.w	sl, r2, asr #16
    f6c4:	d2de      	bcs.n	f684 <quorem+0x42>
    f6c6:	f855 300b 	ldr.w	r3, [r5, fp]
    f6ca:	b92b      	cbnz	r3, f6d8 <quorem+0x96>
    f6cc:	9b01      	ldr	r3, [sp, #4]
    f6ce:	3b04      	subs	r3, #4
    f6d0:	429d      	cmp	r5, r3
    f6d2:	461a      	mov	r2, r3
    f6d4:	d32e      	bcc.n	f734 <quorem+0xf2>
    f6d6:	613c      	str	r4, [r7, #16]
    f6d8:	4638      	mov	r0, r7
    f6da:	f7ff ff89 	bl	f5f0 <__mcmp>
    f6de:	2800      	cmp	r0, #0
    f6e0:	db24      	blt.n	f72c <quorem+0xea>
    f6e2:	3601      	adds	r6, #1
    f6e4:	4628      	mov	r0, r5
    f6e6:	f04f 0c00 	mov.w	ip, #0
    f6ea:	f858 2b04 	ldr.w	r2, [r8], #4
    f6ee:	f8d0 e000 	ldr.w	lr, [r0]
    f6f2:	b293      	uxth	r3, r2
    f6f4:	ebac 0303 	sub.w	r3, ip, r3
    f6f8:	0c12      	lsrs	r2, r2, #16
    f6fa:	fa13 f38e 	uxtah	r3, r3, lr
    f6fe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
    f702:	eb02 4223 	add.w	r2, r2, r3, asr #16
    f706:	b29b      	uxth	r3, r3
    f708:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    f70c:	45c1      	cmp	r9, r8
    f70e:	f840 3b04 	str.w	r3, [r0], #4
    f712:	ea4f 4c22 	mov.w	ip, r2, asr #16
    f716:	d2e8      	bcs.n	f6ea <quorem+0xa8>
    f718:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    f71c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    f720:	b922      	cbnz	r2, f72c <quorem+0xea>
    f722:	3b04      	subs	r3, #4
    f724:	429d      	cmp	r5, r3
    f726:	461a      	mov	r2, r3
    f728:	d30a      	bcc.n	f740 <quorem+0xfe>
    f72a:	613c      	str	r4, [r7, #16]
    f72c:	4630      	mov	r0, r6
    f72e:	b003      	add	sp, #12
    f730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f734:	6812      	ldr	r2, [r2, #0]
    f736:	3b04      	subs	r3, #4
    f738:	2a00      	cmp	r2, #0
    f73a:	d1cc      	bne.n	f6d6 <quorem+0x94>
    f73c:	3c01      	subs	r4, #1
    f73e:	e7c7      	b.n	f6d0 <quorem+0x8e>
    f740:	6812      	ldr	r2, [r2, #0]
    f742:	3b04      	subs	r3, #4
    f744:	2a00      	cmp	r2, #0
    f746:	d1f0      	bne.n	f72a <quorem+0xe8>
    f748:	3c01      	subs	r4, #1
    f74a:	e7eb      	b.n	f724 <quorem+0xe2>
    f74c:	2000      	movs	r0, #0
    f74e:	e7ee      	b.n	f72e <quorem+0xec>

0000f750 <__sfputc_r>:
    f750:	6893      	ldr	r3, [r2, #8]
    f752:	3b01      	subs	r3, #1
    f754:	2b00      	cmp	r3, #0
    f756:	b410      	push	{r4}
    f758:	6093      	str	r3, [r2, #8]
    f75a:	da07      	bge.n	f76c <__sfputc_r+0x1c>
    f75c:	6994      	ldr	r4, [r2, #24]
    f75e:	42a3      	cmp	r3, r4
    f760:	db01      	blt.n	f766 <__sfputc_r+0x16>
    f762:	290a      	cmp	r1, #10
    f764:	d102      	bne.n	f76c <__sfputc_r+0x1c>
    f766:	bc10      	pop	{r4}
    f768:	f7fe b8ee 	b.w	d948 <__swbuf_r>
    f76c:	6813      	ldr	r3, [r2, #0]
    f76e:	1c58      	adds	r0, r3, #1
    f770:	6010      	str	r0, [r2, #0]
    f772:	7019      	strb	r1, [r3, #0]
    f774:	4608      	mov	r0, r1
    f776:	bc10      	pop	{r4}
    f778:	4770      	bx	lr

0000f77a <__sfputs_r>:
    f77a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f77c:	4606      	mov	r6, r0
    f77e:	460f      	mov	r7, r1
    f780:	4614      	mov	r4, r2
    f782:	18d5      	adds	r5, r2, r3
    f784:	42ac      	cmp	r4, r5
    f786:	d101      	bne.n	f78c <__sfputs_r+0x12>
    f788:	2000      	movs	r0, #0
    f78a:	e007      	b.n	f79c <__sfputs_r+0x22>
    f78c:	f814 1b01 	ldrb.w	r1, [r4], #1
    f790:	463a      	mov	r2, r7
    f792:	4630      	mov	r0, r6
    f794:	f7ff ffdc 	bl	f750 <__sfputc_r>
    f798:	1c43      	adds	r3, r0, #1
    f79a:	d1f3      	bne.n	f784 <__sfputs_r+0xa>
    f79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f79e <_printf_common>:
    f79e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f7a2:	4616      	mov	r6, r2
    f7a4:	4699      	mov	r9, r3
    f7a6:	688a      	ldr	r2, [r1, #8]
    f7a8:	690b      	ldr	r3, [r1, #16]
    f7aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
    f7ae:	4293      	cmp	r3, r2
    f7b0:	bfb8      	it	lt
    f7b2:	4613      	movlt	r3, r2
    f7b4:	6033      	str	r3, [r6, #0]
    f7b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    f7ba:	4607      	mov	r7, r0
    f7bc:	460c      	mov	r4, r1
    f7be:	b10a      	cbz	r2, f7c4 <_printf_common+0x26>
    f7c0:	3301      	adds	r3, #1
    f7c2:	6033      	str	r3, [r6, #0]
    f7c4:	6823      	ldr	r3, [r4, #0]
    f7c6:	0699      	lsls	r1, r3, #26
    f7c8:	bf42      	ittt	mi
    f7ca:	6833      	ldrmi	r3, [r6, #0]
    f7cc:	3302      	addmi	r3, #2
    f7ce:	6033      	strmi	r3, [r6, #0]
    f7d0:	6825      	ldr	r5, [r4, #0]
    f7d2:	f015 0506 	ands.w	r5, r5, #6
    f7d6:	d106      	bne.n	f7e6 <_printf_common+0x48>
    f7d8:	f104 0a19 	add.w	sl, r4, #25
    f7dc:	68e3      	ldr	r3, [r4, #12]
    f7de:	6832      	ldr	r2, [r6, #0]
    f7e0:	1a9b      	subs	r3, r3, r2
    f7e2:	42ab      	cmp	r3, r5
    f7e4:	dc26      	bgt.n	f834 <_printf_common+0x96>
    f7e6:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
    f7ea:	1e13      	subs	r3, r2, #0
    f7ec:	6822      	ldr	r2, [r4, #0]
    f7ee:	bf18      	it	ne
    f7f0:	2301      	movne	r3, #1
    f7f2:	0692      	lsls	r2, r2, #26
    f7f4:	d42b      	bmi.n	f84e <_printf_common+0xb0>
    f7f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
    f7fa:	4649      	mov	r1, r9
    f7fc:	4638      	mov	r0, r7
    f7fe:	47c0      	blx	r8
    f800:	3001      	adds	r0, #1
    f802:	d01e      	beq.n	f842 <_printf_common+0xa4>
    f804:	6823      	ldr	r3, [r4, #0]
    f806:	68e5      	ldr	r5, [r4, #12]
    f808:	6832      	ldr	r2, [r6, #0]
    f80a:	f003 0306 	and.w	r3, r3, #6
    f80e:	2b04      	cmp	r3, #4
    f810:	bf08      	it	eq
    f812:	1aad      	subeq	r5, r5, r2
    f814:	68a3      	ldr	r3, [r4, #8]
    f816:	6922      	ldr	r2, [r4, #16]
    f818:	bf0c      	ite	eq
    f81a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    f81e:	2500      	movne	r5, #0
    f820:	4293      	cmp	r3, r2
    f822:	bfc4      	itt	gt
    f824:	1a9b      	subgt	r3, r3, r2
    f826:	18ed      	addgt	r5, r5, r3
    f828:	2600      	movs	r6, #0
    f82a:	341a      	adds	r4, #26
    f82c:	42b5      	cmp	r5, r6
    f82e:	d11a      	bne.n	f866 <_printf_common+0xc8>
    f830:	2000      	movs	r0, #0
    f832:	e008      	b.n	f846 <_printf_common+0xa8>
    f834:	2301      	movs	r3, #1
    f836:	4652      	mov	r2, sl
    f838:	4649      	mov	r1, r9
    f83a:	4638      	mov	r0, r7
    f83c:	47c0      	blx	r8
    f83e:	3001      	adds	r0, #1
    f840:	d103      	bne.n	f84a <_printf_common+0xac>
    f842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f84a:	3501      	adds	r5, #1
    f84c:	e7c6      	b.n	f7dc <_printf_common+0x3e>
    f84e:	18e1      	adds	r1, r4, r3
    f850:	1c5a      	adds	r2, r3, #1
    f852:	2030      	movs	r0, #48	; 0x30
    f854:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    f858:	4422      	add	r2, r4
    f85a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    f85e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    f862:	3302      	adds	r3, #2
    f864:	e7c7      	b.n	f7f6 <_printf_common+0x58>
    f866:	2301      	movs	r3, #1
    f868:	4622      	mov	r2, r4
    f86a:	4649      	mov	r1, r9
    f86c:	4638      	mov	r0, r7
    f86e:	47c0      	blx	r8
    f870:	3001      	adds	r0, #1
    f872:	d0e6      	beq.n	f842 <_printf_common+0xa4>
    f874:	3601      	adds	r6, #1
    f876:	e7d9      	b.n	f82c <_printf_common+0x8e>

0000f878 <abort>:
    f878:	b508      	push	{r3, lr}
    f87a:	2006      	movs	r0, #6
    f87c:	f7fe fae2 	bl	de44 <raise>
    f880:	2001      	movs	r0, #1
    f882:	f7f7 f82b 	bl	68dc <_exit>

0000f886 <__sfmoreglue>:
    f886:	b570      	push	{r4, r5, r6, lr}
    f888:	2268      	movs	r2, #104	; 0x68
    f88a:	1e4d      	subs	r5, r1, #1
    f88c:	4355      	muls	r5, r2
    f88e:	460e      	mov	r6, r1
    f890:	f105 0174 	add.w	r1, r5, #116	; 0x74
    f894:	f7fd f9ea 	bl	cc6c <_malloc_r>
    f898:	4604      	mov	r4, r0
    f89a:	b140      	cbz	r0, f8ae <__sfmoreglue+0x28>
    f89c:	2100      	movs	r1, #0
    f89e:	e9c0 1600 	strd	r1, r6, [r0]
    f8a2:	300c      	adds	r0, #12
    f8a4:	60a0      	str	r0, [r4, #8]
    f8a6:	f105 0268 	add.w	r2, r5, #104	; 0x68
    f8aa:	f7ff fdad 	bl	f408 <memset>
    f8ae:	4620      	mov	r0, r4
    f8b0:	bd70      	pop	{r4, r5, r6, pc}

0000f8b2 <_fwalk_reent>:
    f8b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f8b6:	4606      	mov	r6, r0
    f8b8:	4688      	mov	r8, r1
    f8ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
    f8be:	2700      	movs	r7, #0
    f8c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
    f8c4:	f1b9 0901 	subs.w	r9, r9, #1
    f8c8:	d505      	bpl.n	f8d6 <_fwalk_reent+0x24>
    f8ca:	6824      	ldr	r4, [r4, #0]
    f8cc:	2c00      	cmp	r4, #0
    f8ce:	d1f7      	bne.n	f8c0 <_fwalk_reent+0xe>
    f8d0:	4638      	mov	r0, r7
    f8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f8d6:	89ab      	ldrh	r3, [r5, #12]
    f8d8:	2b01      	cmp	r3, #1
    f8da:	d907      	bls.n	f8ec <_fwalk_reent+0x3a>
    f8dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    f8e0:	3301      	adds	r3, #1
    f8e2:	d003      	beq.n	f8ec <_fwalk_reent+0x3a>
    f8e4:	4629      	mov	r1, r5
    f8e6:	4630      	mov	r0, r6
    f8e8:	47c0      	blx	r8
    f8ea:	4307      	orrs	r7, r0
    f8ec:	3568      	adds	r5, #104	; 0x68
    f8ee:	e7e9      	b.n	f8c4 <_fwalk_reent+0x12>

0000f8f0 <__swhatbuf_r>:
    f8f0:	b570      	push	{r4, r5, r6, lr}
    f8f2:	460e      	mov	r6, r1
    f8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    f8f8:	2900      	cmp	r1, #0
    f8fa:	b096      	sub	sp, #88	; 0x58
    f8fc:	4614      	mov	r4, r2
    f8fe:	461d      	mov	r5, r3
    f900:	da08      	bge.n	f914 <__swhatbuf_r+0x24>
    f902:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
    f906:	2200      	movs	r2, #0
    f908:	602a      	str	r2, [r5, #0]
    f90a:	061a      	lsls	r2, r3, #24
    f90c:	d410      	bmi.n	f930 <__swhatbuf_r+0x40>
    f90e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    f912:	e00e      	b.n	f932 <__swhatbuf_r+0x42>
    f914:	466a      	mov	r2, sp
    f916:	f7fe fad1 	bl	debc <_fstat_r>
    f91a:	2800      	cmp	r0, #0
    f91c:	dbf1      	blt.n	f902 <__swhatbuf_r+0x12>
    f91e:	9a01      	ldr	r2, [sp, #4]
    f920:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    f924:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    f928:	425a      	negs	r2, r3
    f92a:	415a      	adcs	r2, r3
    f92c:	602a      	str	r2, [r5, #0]
    f92e:	e7ee      	b.n	f90e <__swhatbuf_r+0x1e>
    f930:	2340      	movs	r3, #64	; 0x40
    f932:	2000      	movs	r0, #0
    f934:	6023      	str	r3, [r4, #0]
    f936:	b016      	add	sp, #88	; 0x58
    f938:	bd70      	pop	{r4, r5, r6, pc}

0000f93a <_raise_r>:
    f93a:	291f      	cmp	r1, #31
    f93c:	b538      	push	{r3, r4, r5, lr}
    f93e:	4604      	mov	r4, r0
    f940:	460d      	mov	r5, r1
    f942:	d904      	bls.n	f94e <_raise_r+0x14>
    f944:	2316      	movs	r3, #22
    f946:	6003      	str	r3, [r0, #0]
    f948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f94c:	bd38      	pop	{r3, r4, r5, pc}
    f94e:	6c42      	ldr	r2, [r0, #68]	; 0x44
    f950:	b112      	cbz	r2, f958 <_raise_r+0x1e>
    f952:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    f956:	b94b      	cbnz	r3, f96c <_raise_r+0x32>
    f958:	4620      	mov	r0, r4
    f95a:	f000 f816 	bl	f98a <_getpid_r>
    f95e:	462a      	mov	r2, r5
    f960:	4601      	mov	r1, r0
    f962:	4620      	mov	r0, r4
    f964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f968:	f7fe ba74 	b.w	de54 <_kill_r>
    f96c:	2b01      	cmp	r3, #1
    f96e:	d00a      	beq.n	f986 <_raise_r+0x4c>
    f970:	1c59      	adds	r1, r3, #1
    f972:	d103      	bne.n	f97c <_raise_r+0x42>
    f974:	2316      	movs	r3, #22
    f976:	6003      	str	r3, [r0, #0]
    f978:	2001      	movs	r0, #1
    f97a:	e7e7      	b.n	f94c <_raise_r+0x12>
    f97c:	2400      	movs	r4, #0
    f97e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    f982:	4628      	mov	r0, r5
    f984:	4798      	blx	r3
    f986:	2000      	movs	r0, #0
    f988:	e7e0      	b.n	f94c <_raise_r+0x12>

0000f98a <_getpid_r>:
    f98a:	f7fe bf83 	b.w	e894 <_getpid>

0000f98e <__sread>:
    f98e:	b510      	push	{r4, lr}
    f990:	460c      	mov	r4, r1
    f992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    f996:	f7fe fac5 	bl	df24 <_read_r>
    f99a:	2800      	cmp	r0, #0
    f99c:	bfab      	itete	ge
    f99e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    f9a0:	89a3      	ldrhlt	r3, [r4, #12]
    f9a2:	181b      	addge	r3, r3, r0
    f9a4:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    f9a8:	bfac      	ite	ge
    f9aa:	6563      	strge	r3, [r4, #84]	; 0x54
    f9ac:	81a3      	strhlt	r3, [r4, #12]
    f9ae:	bd10      	pop	{r4, pc}

0000f9b0 <__swrite>:
    f9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9b4:	461f      	mov	r7, r3
    f9b6:	898b      	ldrh	r3, [r1, #12]
    f9b8:	05db      	lsls	r3, r3, #23
    f9ba:	4605      	mov	r5, r0
    f9bc:	460c      	mov	r4, r1
    f9be:	4616      	mov	r6, r2
    f9c0:	d505      	bpl.n	f9ce <__swrite+0x1e>
    f9c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    f9c6:	2302      	movs	r3, #2
    f9c8:	2200      	movs	r2, #0
    f9ca:	f7fe fa99 	bl	df00 <_lseek_r>
    f9ce:	89a3      	ldrh	r3, [r4, #12]
    f9d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    f9d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    f9d8:	81a3      	strh	r3, [r4, #12]
    f9da:	4632      	mov	r2, r6
    f9dc:	463b      	mov	r3, r7
    f9de:	4628      	mov	r0, r5
    f9e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f9e4:	f7fe ba48 	b.w	de78 <_write_r>

0000f9e8 <__sseek>:
    f9e8:	b510      	push	{r4, lr}
    f9ea:	460c      	mov	r4, r1
    f9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    f9f0:	f7fe fa86 	bl	df00 <_lseek_r>
    f9f4:	1c43      	adds	r3, r0, #1
    f9f6:	89a3      	ldrh	r3, [r4, #12]
    f9f8:	bf15      	itete	ne
    f9fa:	6560      	strne	r0, [r4, #84]	; 0x54
    f9fc:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    fa00:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    fa04:	81a3      	strheq	r3, [r4, #12]
    fa06:	bf18      	it	ne
    fa08:	81a3      	strhne	r3, [r4, #12]
    fa0a:	bd10      	pop	{r4, pc}

0000fa0c <__sclose>:
    fa0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    fa10:	f7fe ba44 	b.w	de9c <_close_r>

0000fa14 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    fa14:	f7f8 bd1a 	b.w	844c <SystemInit>
