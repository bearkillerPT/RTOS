
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	c0 ef 00 20 a1 67 00 00 15 f4 00 00 59 67 00 00     ... .g......Yg..
  10:	59 67 00 00 59 67 00 00 59 67 00 00 00 00 00 00     Yg..Yg..Yg......
	...
  2c:	25 5f 00 00 59 67 00 00 00 00 00 00 cd 5e 00 00     %_..Yg.......^..
  3c:	59 67 00 00                                         Yg..

00000040 <_irq_vector_table>:
  40:	05 60 00 00 05 60 00 00 05 60 00 00 05 60 00 00     .`...`...`...`..
  50:	05 60 00 00 05 60 00 00 05 60 00 00 05 60 00 00     .`...`...`...`..
  60:	05 60 00 00 05 60 00 00 05 60 00 00 05 60 00 00     .`...`...`...`..
  70:	05 60 00 00 05 60 00 00 05 60 00 00 05 60 00 00     .`...`...`...`..
  80:	05 60 00 00 05 60 00 00 05 60 00 00 05 60 00 00     .`...`...`...`..
  90:	05 60 00 00 05 60 00 00 05 60 00 00 05 60 00 00     .`...`...`...`..
  a0:	05 60 00 00 05 60 00 00 05 60 00 00 05 60 00 00     .`...`...`...`..
  b0:	05 60 00 00 05 60 00 00 05 60 00 00 05 60 00 00     .`...`...`...`..
  c0:	05 60 00 00 05 60 00 00 05 60 00 00 05 60 00 00     .`...`...`...`..
  d0:	05 60 00 00 05 60 00 00 05 60 00 00 05 60 00 00     .`...`...`...`..
  e0:	05 60 00 00 05 60 00 00 05 60 00 00 05 60 00 00     .`...`...`...`..
  f0:	05 60 00 00 05 60 00 00 05 60 00 00 05 60 00 00     .`...`...`...`..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <__adddf3+0x1ee>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <__adddf3+0x52>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <__adddf3+0x70>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <__adddf3+0x84>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <__adddf3+0x1da>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <__adddf3+0xb2>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <__adddf3+0xd0>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <__adddf3+0xe6>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <__adddf3+0x124>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <__adddf3+0x10c>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <__adddf3+0x240>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <__adddf3+0x10c>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <__adddf3+0x16e>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <__adddf3+0x16a>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <__adddf3+0x184>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <__adddf3+0x1d2>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <__adddf3+0x1ba>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <__adddf3+0x8c>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <__adddf3+0x24e>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <__adddf3+0x212>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <__adddf3+0x230>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <__adddf3+0x138>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <__adddf3+0x138>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <__adddf3+0x138>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <__adddf3+0xe6>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <__adddf3+0xe6>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <__aeabi_dmul+0x1dc>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <__aeabi_dmul+0xde>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <__aeabi_dmul+0x238>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <__aeabi_dmul+0x164>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <__aeabi_dmul+0x134>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <__aeabi_dmul+0x1c2>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <__aeabi_dmul+0x1a6>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <__aeabi_dmul+0x1c6>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <__aeabi_dmul+0x206>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <__aeabi_dmul+0x19c>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <__aeabi_dmul+0x24a>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <__aeabi_dmul+0x222>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <__aeabi_dmul+0x24a>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <__aeabi_dmul+0x234>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <__aeabi_dmul+0x24a>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_ISR_STACK_SIZE+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <__aeabi_dmul+0xde>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <__aeabi_dmul+0xde>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <__aeabi_dmul+0xde>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <__aeabi_dmul+0x24a>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <__aeabi_dmul+0x24a>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <__aeabi_dmul+0x234>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <__aeabi_dmul+0x24a>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_ISR_STACK_SIZE+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <__aeabi_dmul+0x1f8>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <__aeabi_dmul+0x24a>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <__aeabi_dmul+0x19c>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <__aeabi_dmul+0x234>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <__aeabi_dmul+0x1f8>
     93a:	e712      	b.n	762 <__aeabi_dmul+0x24a>

0000093c <__aeabi_d2f>:
     93c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     944:	bf24      	itt	cs
     946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     94a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     94e:	d90d      	bls.n	96c <__aeabi_d2f+0x30>
     950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     95c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     964:	bf08      	it	eq
     966:	f020 0001 	biceq.w	r0, r0, #1
     96a:	4770      	bx	lr
     96c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     970:	d121      	bne.n	9b6 <__aeabi_d2f+0x7a>
     972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     976:	bfbc      	itt	lt
     978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     97c:	4770      	bxlt	lr
     97e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     982:	ea4f 5252 	mov.w	r2, r2, lsr #21
     986:	f1c2 0218 	rsb	r2, r2, #24
     98a:	f1c2 0c20 	rsb	ip, r2, #32
     98e:	fa10 f30c 	lsls.w	r3, r0, ip
     992:	fa20 f002 	lsr.w	r0, r0, r2
     996:	bf18      	it	ne
     998:	f040 0001 	orrne.w	r0, r0, #1
     99c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     9a4:	fa03 fc0c 	lsl.w	ip, r3, ip
     9a8:	ea40 000c 	orr.w	r0, r0, ip
     9ac:	fa23 f302 	lsr.w	r3, r3, r2
     9b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     9b4:	e7cc      	b.n	950 <__aeabi_d2f+0x14>
     9b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     9ba:	d107      	bne.n	9cc <__aeabi_d2f+0x90>
     9bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     9c0:	bf1e      	ittt	ne
     9c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     9c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     9ca:	4770      	bxne	lr
     9cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     9d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     9d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     9d8:	4770      	bx	lr
     9da:	bf00      	nop

000009dc <__aeabi_uldivmod>:
     9dc:	b953      	cbnz	r3, 9f4 <__aeabi_uldivmod+0x18>
     9de:	b94a      	cbnz	r2, 9f4 <__aeabi_uldivmod+0x18>
     9e0:	2900      	cmp	r1, #0
     9e2:	bf08      	it	eq
     9e4:	2800      	cmpeq	r0, #0
     9e6:	bf1c      	itt	ne
     9e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     9ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     9f0:	f000 b80c 	b.w	a0c <__aeabi_idiv0>
     9f4:	f1ad 0c08 	sub.w	ip, sp, #8
     9f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     9fc:	f000 f8ce 	bl	b9c <__udivmoddi4>
     a00:	f8dd e004 	ldr.w	lr, [sp, #4]
     a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a08:	b004      	add	sp, #16
     a0a:	4770      	bx	lr

00000a0c <__aeabi_idiv0>:
     a0c:	4770      	bx	lr
     a0e:	bf00      	nop

00000a10 <__gedf2>:
     a10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     a14:	e006      	b.n	a24 <__cmpdf2+0x4>
     a16:	bf00      	nop

00000a18 <__ledf2>:
     a18:	f04f 0c01 	mov.w	ip, #1
     a1c:	e002      	b.n	a24 <__cmpdf2+0x4>
     a1e:	bf00      	nop

00000a20 <__cmpdf2>:
     a20:	f04f 0c01 	mov.w	ip, #1
     a24:	f84d cd04 	str.w	ip, [sp, #-4]!
     a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a34:	bf18      	it	ne
     a36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     a3a:	d01b      	beq.n	a74 <__cmpdf2+0x54>
     a3c:	b001      	add	sp, #4
     a3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     a42:	bf0c      	ite	eq
     a44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     a48:	ea91 0f03 	teqne	r1, r3
     a4c:	bf02      	ittt	eq
     a4e:	ea90 0f02 	teqeq	r0, r2
     a52:	2000      	moveq	r0, #0
     a54:	4770      	bxeq	lr
     a56:	f110 0f00 	cmn.w	r0, #0
     a5a:	ea91 0f03 	teq	r1, r3
     a5e:	bf58      	it	pl
     a60:	4299      	cmppl	r1, r3
     a62:	bf08      	it	eq
     a64:	4290      	cmpeq	r0, r2
     a66:	bf2c      	ite	cs
     a68:	17d8      	asrcs	r0, r3, #31
     a6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     a6e:	f040 0001 	orr.w	r0, r0, #1
     a72:	4770      	bx	lr
     a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a7c:	d102      	bne.n	a84 <__cmpdf2+0x64>
     a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     a82:	d107      	bne.n	a94 <__cmpdf2+0x74>
     a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a8c:	d1d6      	bne.n	a3c <__cmpdf2+0x1c>
     a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     a92:	d0d3      	beq.n	a3c <__cmpdf2+0x1c>
     a94:	f85d 0b04 	ldr.w	r0, [sp], #4
     a98:	4770      	bx	lr
     a9a:	bf00      	nop

00000a9c <__aeabi_cdrcmple>:
     a9c:	4684      	mov	ip, r0
     a9e:	4610      	mov	r0, r2
     aa0:	4662      	mov	r2, ip
     aa2:	468c      	mov	ip, r1
     aa4:	4619      	mov	r1, r3
     aa6:	4663      	mov	r3, ip
     aa8:	e000      	b.n	aac <__aeabi_cdcmpeq>
     aaa:	bf00      	nop

00000aac <__aeabi_cdcmpeq>:
     aac:	b501      	push	{r0, lr}
     aae:	f7ff ffb7 	bl	a20 <__cmpdf2>
     ab2:	2800      	cmp	r0, #0
     ab4:	bf48      	it	mi
     ab6:	f110 0f00 	cmnmi.w	r0, #0
     aba:	bd01      	pop	{r0, pc}

00000abc <__aeabi_dcmpeq>:
     abc:	f84d ed08 	str.w	lr, [sp, #-8]!
     ac0:	f7ff fff4 	bl	aac <__aeabi_cdcmpeq>
     ac4:	bf0c      	ite	eq
     ac6:	2001      	moveq	r0, #1
     ac8:	2000      	movne	r0, #0
     aca:	f85d fb08 	ldr.w	pc, [sp], #8
     ace:	bf00      	nop

00000ad0 <__aeabi_dcmplt>:
     ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
     ad4:	f7ff ffea 	bl	aac <__aeabi_cdcmpeq>
     ad8:	bf34      	ite	cc
     ada:	2001      	movcc	r0, #1
     adc:	2000      	movcs	r0, #0
     ade:	f85d fb08 	ldr.w	pc, [sp], #8
     ae2:	bf00      	nop

00000ae4 <__aeabi_dcmple>:
     ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
     ae8:	f7ff ffe0 	bl	aac <__aeabi_cdcmpeq>
     aec:	bf94      	ite	ls
     aee:	2001      	movls	r0, #1
     af0:	2000      	movhi	r0, #0
     af2:	f85d fb08 	ldr.w	pc, [sp], #8
     af6:	bf00      	nop

00000af8 <__aeabi_dcmpge>:
     af8:	f84d ed08 	str.w	lr, [sp, #-8]!
     afc:	f7ff ffce 	bl	a9c <__aeabi_cdrcmple>
     b00:	bf94      	ite	ls
     b02:	2001      	movls	r0, #1
     b04:	2000      	movhi	r0, #0
     b06:	f85d fb08 	ldr.w	pc, [sp], #8
     b0a:	bf00      	nop

00000b0c <__aeabi_dcmpgt>:
     b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
     b10:	f7ff ffc4 	bl	a9c <__aeabi_cdrcmple>
     b14:	bf34      	ite	cc
     b16:	2001      	movcc	r0, #1
     b18:	2000      	movcs	r0, #0
     b1a:	f85d fb08 	ldr.w	pc, [sp], #8
     b1e:	bf00      	nop

00000b20 <__aeabi_dcmpun>:
     b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b28:	d102      	bne.n	b30 <__aeabi_dcmpun+0x10>
     b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     b2e:	d10a      	bne.n	b46 <__aeabi_dcmpun+0x26>
     b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b38:	d102      	bne.n	b40 <__aeabi_dcmpun+0x20>
     b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     b3e:	d102      	bne.n	b46 <__aeabi_dcmpun+0x26>
     b40:	f04f 0000 	mov.w	r0, #0
     b44:	4770      	bx	lr
     b46:	f04f 0001 	mov.w	r0, #1
     b4a:	4770      	bx	lr

00000b4c <__aeabi_d2iz>:
     b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     b54:	d215      	bcs.n	b82 <__aeabi_d2iz+0x36>
     b56:	d511      	bpl.n	b7c <__aeabi_d2iz+0x30>
     b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     b60:	d912      	bls.n	b88 <__aeabi_d2iz+0x3c>
     b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b72:	fa23 f002 	lsr.w	r0, r3, r2
     b76:	bf18      	it	ne
     b78:	4240      	negne	r0, r0
     b7a:	4770      	bx	lr
     b7c:	f04f 0000 	mov.w	r0, #0
     b80:	4770      	bx	lr
     b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     b86:	d105      	bne.n	b94 <__aeabi_d2iz+0x48>
     b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     b8c:	bf08      	it	eq
     b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     b92:	4770      	bx	lr
     b94:	f04f 0000 	mov.w	r0, #0
     b98:	4770      	bx	lr
     b9a:	bf00      	nop

00000b9c <__udivmoddi4>:
     b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ba0:	4607      	mov	r7, r0
     ba2:	468c      	mov	ip, r1
     ba4:	4608      	mov	r0, r1
     ba6:	9e09      	ldr	r6, [sp, #36]	; 0x24
     ba8:	4615      	mov	r5, r2
     baa:	463c      	mov	r4, r7
     bac:	4619      	mov	r1, r3
     bae:	2b00      	cmp	r3, #0
     bb0:	f040 80c6 	bne.w	d40 <__udivmoddi4+0x1a4>
     bb4:	4282      	cmp	r2, r0
     bb6:	fab2 f782 	clz	r7, r2
     bba:	d946      	bls.n	c4a <__udivmoddi4+0xae>
     bbc:	b14f      	cbz	r7, bd2 <__udivmoddi4+0x36>
     bbe:	f1c7 0e20 	rsb	lr, r7, #32
     bc2:	fa24 fe0e 	lsr.w	lr, r4, lr
     bc6:	fa00 f307 	lsl.w	r3, r0, r7
     bca:	40bd      	lsls	r5, r7
     bcc:	ea4e 0c03 	orr.w	ip, lr, r3
     bd0:	40bc      	lsls	r4, r7
     bd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
     bd6:	fa1f fe85 	uxth.w	lr, r5
     bda:	fbbc f9f8 	udiv	r9, ip, r8
     bde:	0c22      	lsrs	r2, r4, #16
     be0:	fb08 c319 	mls	r3, r8, r9, ip
     be4:	fb09 fa0e 	mul.w	sl, r9, lr
     be8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     bec:	459a      	cmp	sl, r3
     bee:	d928      	bls.n	c42 <__udivmoddi4+0xa6>
     bf0:	18eb      	adds	r3, r5, r3
     bf2:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     bf6:	d204      	bcs.n	c02 <__udivmoddi4+0x66>
     bf8:	459a      	cmp	sl, r3
     bfa:	d902      	bls.n	c02 <__udivmoddi4+0x66>
     bfc:	f1a9 0002 	sub.w	r0, r9, #2
     c00:	442b      	add	r3, r5
     c02:	eba3 030a 	sub.w	r3, r3, sl
     c06:	b2a4      	uxth	r4, r4
     c08:	fbb3 f2f8 	udiv	r2, r3, r8
     c0c:	fb08 3312 	mls	r3, r8, r2, r3
     c10:	fb02 fe0e 	mul.w	lr, r2, lr
     c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c18:	45a6      	cmp	lr, r4
     c1a:	d914      	bls.n	c46 <__udivmoddi4+0xaa>
     c1c:	192c      	adds	r4, r5, r4
     c1e:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     c22:	d203      	bcs.n	c2c <__udivmoddi4+0x90>
     c24:	45a6      	cmp	lr, r4
     c26:	d901      	bls.n	c2c <__udivmoddi4+0x90>
     c28:	1e93      	subs	r3, r2, #2
     c2a:	442c      	add	r4, r5
     c2c:	eba4 040e 	sub.w	r4, r4, lr
     c30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     c34:	b11e      	cbz	r6, c3e <__udivmoddi4+0xa2>
     c36:	40fc      	lsrs	r4, r7
     c38:	2300      	movs	r3, #0
     c3a:	6034      	str	r4, [r6, #0]
     c3c:	6073      	str	r3, [r6, #4]
     c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c42:	4648      	mov	r0, r9
     c44:	e7dd      	b.n	c02 <__udivmoddi4+0x66>
     c46:	4613      	mov	r3, r2
     c48:	e7f0      	b.n	c2c <__udivmoddi4+0x90>
     c4a:	b902      	cbnz	r2, c4e <__udivmoddi4+0xb2>
     c4c:	deff      	udf	#255	; 0xff
     c4e:	bb87      	cbnz	r7, cb2 <__udivmoddi4+0x116>
     c50:	1a83      	subs	r3, r0, r2
     c52:	2101      	movs	r1, #1
     c54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     c58:	b2aa      	uxth	r2, r5
     c5a:	fbb3 fcfe 	udiv	ip, r3, lr
     c5e:	0c20      	lsrs	r0, r4, #16
     c60:	fb0e 331c 	mls	r3, lr, ip, r3
     c64:	fb0c f802 	mul.w	r8, ip, r2
     c68:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     c6c:	4598      	cmp	r8, r3
     c6e:	d963      	bls.n	d38 <__udivmoddi4+0x19c>
     c70:	18eb      	adds	r3, r5, r3
     c72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     c76:	d204      	bcs.n	c82 <__udivmoddi4+0xe6>
     c78:	4598      	cmp	r8, r3
     c7a:	d902      	bls.n	c82 <__udivmoddi4+0xe6>
     c7c:	f1ac 0002 	sub.w	r0, ip, #2
     c80:	442b      	add	r3, r5
     c82:	eba3 0308 	sub.w	r3, r3, r8
     c86:	b2a4      	uxth	r4, r4
     c88:	fbb3 fcfe 	udiv	ip, r3, lr
     c8c:	fb0e 331c 	mls	r3, lr, ip, r3
     c90:	fb0c f202 	mul.w	r2, ip, r2
     c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c98:	42a2      	cmp	r2, r4
     c9a:	d94f      	bls.n	d3c <__udivmoddi4+0x1a0>
     c9c:	192c      	adds	r4, r5, r4
     c9e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     ca2:	d204      	bcs.n	cae <__udivmoddi4+0x112>
     ca4:	42a2      	cmp	r2, r4
     ca6:	d902      	bls.n	cae <__udivmoddi4+0x112>
     ca8:	f1ac 0302 	sub.w	r3, ip, #2
     cac:	442c      	add	r4, r5
     cae:	1aa4      	subs	r4, r4, r2
     cb0:	e7be      	b.n	c30 <__udivmoddi4+0x94>
     cb2:	f1c7 0c20 	rsb	ip, r7, #32
     cb6:	fa20 f80c 	lsr.w	r8, r0, ip
     cba:	fa00 f307 	lsl.w	r3, r0, r7
     cbe:	fa24 fc0c 	lsr.w	ip, r4, ip
     cc2:	40bd      	lsls	r5, r7
     cc4:	ea4c 0203 	orr.w	r2, ip, r3
     cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     ccc:	b2ab      	uxth	r3, r5
     cce:	fbb8 fcfe 	udiv	ip, r8, lr
     cd2:	0c11      	lsrs	r1, r2, #16
     cd4:	fb0e 801c 	mls	r0, lr, ip, r8
     cd8:	fb0c f903 	mul.w	r9, ip, r3
     cdc:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     ce0:	4581      	cmp	r9, r0
     ce2:	fa04 f407 	lsl.w	r4, r4, r7
     ce6:	d923      	bls.n	d30 <__udivmoddi4+0x194>
     ce8:	1828      	adds	r0, r5, r0
     cea:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     cee:	d204      	bcs.n	cfa <__udivmoddi4+0x15e>
     cf0:	4581      	cmp	r9, r0
     cf2:	d902      	bls.n	cfa <__udivmoddi4+0x15e>
     cf4:	f1ac 0102 	sub.w	r1, ip, #2
     cf8:	4428      	add	r0, r5
     cfa:	eba0 0009 	sub.w	r0, r0, r9
     cfe:	b292      	uxth	r2, r2
     d00:	fbb0 fcfe 	udiv	ip, r0, lr
     d04:	fb0e 001c 	mls	r0, lr, ip, r0
     d08:	fb0c f803 	mul.w	r8, ip, r3
     d0c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     d10:	4598      	cmp	r8, r3
     d12:	d90f      	bls.n	d34 <__udivmoddi4+0x198>
     d14:	18eb      	adds	r3, r5, r3
     d16:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     d1a:	d204      	bcs.n	d26 <__udivmoddi4+0x18a>
     d1c:	4598      	cmp	r8, r3
     d1e:	d902      	bls.n	d26 <__udivmoddi4+0x18a>
     d20:	f1ac 0202 	sub.w	r2, ip, #2
     d24:	442b      	add	r3, r5
     d26:	eba3 0308 	sub.w	r3, r3, r8
     d2a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     d2e:	e791      	b.n	c54 <__udivmoddi4+0xb8>
     d30:	4661      	mov	r1, ip
     d32:	e7e2      	b.n	cfa <__udivmoddi4+0x15e>
     d34:	4662      	mov	r2, ip
     d36:	e7f6      	b.n	d26 <__udivmoddi4+0x18a>
     d38:	4660      	mov	r0, ip
     d3a:	e7a2      	b.n	c82 <__udivmoddi4+0xe6>
     d3c:	4663      	mov	r3, ip
     d3e:	e7b6      	b.n	cae <__udivmoddi4+0x112>
     d40:	4283      	cmp	r3, r0
     d42:	d905      	bls.n	d50 <__udivmoddi4+0x1b4>
     d44:	b10e      	cbz	r6, d4a <__udivmoddi4+0x1ae>
     d46:	e9c6 7000 	strd	r7, r0, [r6]
     d4a:	2100      	movs	r1, #0
     d4c:	4608      	mov	r0, r1
     d4e:	e776      	b.n	c3e <__udivmoddi4+0xa2>
     d50:	fab3 f183 	clz	r1, r3
     d54:	b981      	cbnz	r1, d78 <__udivmoddi4+0x1dc>
     d56:	4283      	cmp	r3, r0
     d58:	d301      	bcc.n	d5e <__udivmoddi4+0x1c2>
     d5a:	42ba      	cmp	r2, r7
     d5c:	d80a      	bhi.n	d74 <__udivmoddi4+0x1d8>
     d5e:	1abc      	subs	r4, r7, r2
     d60:	eb60 0303 	sbc.w	r3, r0, r3
     d64:	2001      	movs	r0, #1
     d66:	469c      	mov	ip, r3
     d68:	2e00      	cmp	r6, #0
     d6a:	d068      	beq.n	e3e <__udivmoddi4+0x2a2>
     d6c:	e9c6 4c00 	strd	r4, ip, [r6]
     d70:	2100      	movs	r1, #0
     d72:	e764      	b.n	c3e <__udivmoddi4+0xa2>
     d74:	4608      	mov	r0, r1
     d76:	e7f7      	b.n	d68 <__udivmoddi4+0x1cc>
     d78:	f1c1 0c20 	rsb	ip, r1, #32
     d7c:	408b      	lsls	r3, r1
     d7e:	fa22 f40c 	lsr.w	r4, r2, ip
     d82:	431c      	orrs	r4, r3
     d84:	fa02 f501 	lsl.w	r5, r2, r1
     d88:	fa00 f301 	lsl.w	r3, r0, r1
     d8c:	fa27 f20c 	lsr.w	r2, r7, ip
     d90:	fa20 fb0c 	lsr.w	fp, r0, ip
     d94:	ea4f 4914 	mov.w	r9, r4, lsr #16
     d98:	4313      	orrs	r3, r2
     d9a:	fbbb f8f9 	udiv	r8, fp, r9
     d9e:	fa1f fe84 	uxth.w	lr, r4
     da2:	fb09 bb18 	mls	fp, r9, r8, fp
     da6:	0c1a      	lsrs	r2, r3, #16
     da8:	fb08 fa0e 	mul.w	sl, r8, lr
     dac:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     db0:	4592      	cmp	sl, r2
     db2:	fa07 f701 	lsl.w	r7, r7, r1
     db6:	d93e      	bls.n	e36 <__udivmoddi4+0x29a>
     db8:	18a2      	adds	r2, r4, r2
     dba:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     dbe:	d204      	bcs.n	dca <__udivmoddi4+0x22e>
     dc0:	4592      	cmp	sl, r2
     dc2:	d902      	bls.n	dca <__udivmoddi4+0x22e>
     dc4:	f1a8 0002 	sub.w	r0, r8, #2
     dc8:	4422      	add	r2, r4
     dca:	eba2 020a 	sub.w	r2, r2, sl
     dce:	b29b      	uxth	r3, r3
     dd0:	fbb2 f8f9 	udiv	r8, r2, r9
     dd4:	fb09 2218 	mls	r2, r9, r8, r2
     dd8:	fb08 fe0e 	mul.w	lr, r8, lr
     ddc:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     de0:	4596      	cmp	lr, r2
     de2:	d92a      	bls.n	e3a <__udivmoddi4+0x29e>
     de4:	18a2      	adds	r2, r4, r2
     de6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     dea:	d204      	bcs.n	df6 <__udivmoddi4+0x25a>
     dec:	4596      	cmp	lr, r2
     dee:	d902      	bls.n	df6 <__udivmoddi4+0x25a>
     df0:	f1a8 0302 	sub.w	r3, r8, #2
     df4:	4422      	add	r2, r4
     df6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     dfa:	fba0 9305 	umull	r9, r3, r0, r5
     dfe:	eba2 020e 	sub.w	r2, r2, lr
     e02:	429a      	cmp	r2, r3
     e04:	46ce      	mov	lr, r9
     e06:	4698      	mov	r8, r3
     e08:	d302      	bcc.n	e10 <__udivmoddi4+0x274>
     e0a:	d106      	bne.n	e1a <__udivmoddi4+0x27e>
     e0c:	454f      	cmp	r7, r9
     e0e:	d204      	bcs.n	e1a <__udivmoddi4+0x27e>
     e10:	ebb9 0e05 	subs.w	lr, r9, r5
     e14:	eb63 0804 	sbc.w	r8, r3, r4
     e18:	3801      	subs	r0, #1
     e1a:	b186      	cbz	r6, e3e <__udivmoddi4+0x2a2>
     e1c:	ebb7 030e 	subs.w	r3, r7, lr
     e20:	eb62 0708 	sbc.w	r7, r2, r8
     e24:	fa07 fc0c 	lsl.w	ip, r7, ip
     e28:	40cb      	lsrs	r3, r1
     e2a:	ea4c 0303 	orr.w	r3, ip, r3
     e2e:	40cf      	lsrs	r7, r1
     e30:	e9c6 3700 	strd	r3, r7, [r6]
     e34:	e79c      	b.n	d70 <__udivmoddi4+0x1d4>
     e36:	4640      	mov	r0, r8
     e38:	e7c7      	b.n	dca <__udivmoddi4+0x22e>
     e3a:	4643      	mov	r3, r8
     e3c:	e7db      	b.n	df6 <__udivmoddi4+0x25a>
     e3e:	4631      	mov	r1, r6
     e40:	e6fd      	b.n	c3e <__udivmoddi4+0xa2>

00000e42 <strcmp>:
     e42:	f810 2b01 	ldrb.w	r2, [r0], #1
     e46:	f811 3b01 	ldrb.w	r3, [r1], #1
     e4a:	2a01      	cmp	r2, #1
     e4c:	bf28      	it	cs
     e4e:	429a      	cmpcs	r2, r3
     e50:	d0f7      	beq.n	e42 <strcmp>
     e52:	1ad0      	subs	r0, r2, r3
     e54:	4770      	bx	lr

00000e56 <strlen>:
     e56:	4603      	mov	r3, r0
     e58:	f813 2b01 	ldrb.w	r2, [r3], #1
     e5c:	2a00      	cmp	r2, #0
     e5e:	d1fb      	bne.n	e58 <strlen+0x2>
     e60:	1a18      	subs	r0, r3, r0
     e62:	3801      	subs	r0, #1
     e64:	4770      	bx	lr
	...

00000e68 <__ieee754_acos>:
     e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e6c:	4cb2      	ldr	r4, [pc, #712]	; (1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>)
     e6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
     e72:	42a3      	cmp	r3, r4
     e74:	4607      	mov	r7, r0
     e76:	460e      	mov	r6, r1
     e78:	dd16      	ble.n	ea8 <__ieee754_acos+0x40>
     e7a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
     e7e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
     e82:	4303      	orrs	r3, r0
     e84:	d107      	bne.n	e96 <__ieee754_acos+0x2e>
     e86:	2900      	cmp	r1, #0
     e88:	f300 8202 	bgt.w	1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>
     e8c:	a190      	add	r1, pc, #576	; (adr r1, 10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
     e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
     e92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e96:	4602      	mov	r2, r0
     e98:	460b      	mov	r3, r1
     e9a:	f7ff f985 	bl	1a8 <__aeabi_dsub>
     e9e:	4602      	mov	r2, r0
     ea0:	460b      	mov	r3, r1
     ea2:	f7ff fc63 	bl	76c <__aeabi_ddiv>
     ea6:	e7f4      	b.n	e92 <__ieee754_acos+0x2a>
     ea8:	4ca4      	ldr	r4, [pc, #656]	; (113c <CONFIG_FPROTECT_BLOCK_SIZE+0x13c>)
     eaa:	42a3      	cmp	r3, r4
     eac:	f300 8083 	bgt.w	fb6 <__ieee754_acos+0x14e>
     eb0:	4aa3      	ldr	r2, [pc, #652]	; (1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>)
     eb2:	4293      	cmp	r3, r2
     eb4:	f340 81ef 	ble.w	1296 <CONFIG_FPROTECT_BLOCK_SIZE+0x296>
     eb8:	4602      	mov	r2, r0
     eba:	460b      	mov	r3, r1
     ebc:	f7ff fb2c 	bl	518 <__aeabi_dmul>
     ec0:	a385      	add	r3, pc, #532	; (adr r3, 10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>)
     ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
     ec6:	4604      	mov	r4, r0
     ec8:	460d      	mov	r5, r1
     eca:	f7ff fb25 	bl	518 <__aeabi_dmul>
     ece:	a384      	add	r3, pc, #528	; (adr r3, 10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>)
     ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
     ed4:	f7ff f96a 	bl	1ac <__adddf3>
     ed8:	4622      	mov	r2, r4
     eda:	462b      	mov	r3, r5
     edc:	f7ff fb1c 	bl	518 <__aeabi_dmul>
     ee0:	a381      	add	r3, pc, #516	; (adr r3, 10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>)
     ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
     ee6:	f7ff f95f 	bl	1a8 <__aeabi_dsub>
     eea:	4622      	mov	r2, r4
     eec:	462b      	mov	r3, r5
     eee:	f7ff fb13 	bl	518 <__aeabi_dmul>
     ef2:	a37f      	add	r3, pc, #508	; (adr r3, 10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
     ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
     ef8:	f7ff f958 	bl	1ac <__adddf3>
     efc:	4622      	mov	r2, r4
     efe:	462b      	mov	r3, r5
     f00:	f7ff fb0a 	bl	518 <__aeabi_dmul>
     f04:	a37c      	add	r3, pc, #496	; (adr r3, 10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
     f06:	e9d3 2300 	ldrd	r2, r3, [r3]
     f0a:	f7ff f94d 	bl	1a8 <__aeabi_dsub>
     f0e:	4622      	mov	r2, r4
     f10:	462b      	mov	r3, r5
     f12:	f7ff fb01 	bl	518 <__aeabi_dmul>
     f16:	a37a      	add	r3, pc, #488	; (adr r3, 1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>)
     f18:	e9d3 2300 	ldrd	r2, r3, [r3]
     f1c:	f7ff f946 	bl	1ac <__adddf3>
     f20:	4622      	mov	r2, r4
     f22:	462b      	mov	r3, r5
     f24:	f7ff faf8 	bl	518 <__aeabi_dmul>
     f28:	a377      	add	r3, pc, #476	; (adr r3, 1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
     f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
     f2e:	4680      	mov	r8, r0
     f30:	4689      	mov	r9, r1
     f32:	4620      	mov	r0, r4
     f34:	4629      	mov	r1, r5
     f36:	f7ff faef 	bl	518 <__aeabi_dmul>
     f3a:	a375      	add	r3, pc, #468	; (adr r3, 1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
     f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
     f40:	f7ff f932 	bl	1a8 <__aeabi_dsub>
     f44:	4622      	mov	r2, r4
     f46:	462b      	mov	r3, r5
     f48:	f7ff fae6 	bl	518 <__aeabi_dmul>
     f4c:	a372      	add	r3, pc, #456	; (adr r3, 1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
     f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
     f52:	f7ff f92b 	bl	1ac <__adddf3>
     f56:	4622      	mov	r2, r4
     f58:	462b      	mov	r3, r5
     f5a:	f7ff fadd 	bl	518 <__aeabi_dmul>
     f5e:	a370      	add	r3, pc, #448	; (adr r3, 1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>)
     f60:	e9d3 2300 	ldrd	r2, r3, [r3]
     f64:	f7ff f920 	bl	1a8 <__aeabi_dsub>
     f68:	4622      	mov	r2, r4
     f6a:	462b      	mov	r3, r5
     f6c:	f7ff fad4 	bl	518 <__aeabi_dmul>
     f70:	4b74      	ldr	r3, [pc, #464]	; (1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>)
     f72:	2200      	movs	r2, #0
     f74:	f7ff f91a 	bl	1ac <__adddf3>
     f78:	4602      	mov	r2, r0
     f7a:	460b      	mov	r3, r1
     f7c:	4640      	mov	r0, r8
     f7e:	4649      	mov	r1, r9
     f80:	f7ff fbf4 	bl	76c <__aeabi_ddiv>
     f84:	463a      	mov	r2, r7
     f86:	4633      	mov	r3, r6
     f88:	f7ff fac6 	bl	518 <__aeabi_dmul>
     f8c:	4602      	mov	r2, r0
     f8e:	460b      	mov	r3, r1
     f90:	a165      	add	r1, pc, #404	; (adr r1, 1128 <CONFIG_FPROTECT_BLOCK_SIZE+0x128>)
     f92:	e9d1 0100 	ldrd	r0, r1, [r1]
     f96:	f7ff f907 	bl	1a8 <__aeabi_dsub>
     f9a:	4602      	mov	r2, r0
     f9c:	460b      	mov	r3, r1
     f9e:	4638      	mov	r0, r7
     fa0:	4631      	mov	r1, r6
     fa2:	f7ff f901 	bl	1a8 <__aeabi_dsub>
     fa6:	4602      	mov	r2, r0
     fa8:	460b      	mov	r3, r1
     faa:	a161      	add	r1, pc, #388	; (adr r1, 1130 <CONFIG_FPROTECT_BLOCK_SIZE+0x130>)
     fac:	e9d1 0100 	ldrd	r0, r1, [r1]
     fb0:	f7ff f8fa 	bl	1a8 <__aeabi_dsub>
     fb4:	e76d      	b.n	e92 <__ieee754_acos+0x2a>
     fb6:	2900      	cmp	r1, #0
     fb8:	f280 80c8 	bge.w	114c <CONFIG_FPROTECT_BLOCK_SIZE+0x14c>
     fbc:	4b61      	ldr	r3, [pc, #388]	; (1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>)
     fbe:	2200      	movs	r2, #0
     fc0:	f7ff f8f4 	bl	1ac <__adddf3>
     fc4:	4b60      	ldr	r3, [pc, #384]	; (1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>)
     fc6:	2200      	movs	r2, #0
     fc8:	f7ff faa6 	bl	518 <__aeabi_dmul>
     fcc:	a342      	add	r3, pc, #264	; (adr r3, 10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>)
     fce:	e9d3 2300 	ldrd	r2, r3, [r3]
     fd2:	4604      	mov	r4, r0
     fd4:	460d      	mov	r5, r1
     fd6:	f7ff fa9f 	bl	518 <__aeabi_dmul>
     fda:	a341      	add	r3, pc, #260	; (adr r3, 10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>)
     fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
     fe0:	f7ff f8e4 	bl	1ac <__adddf3>
     fe4:	4622      	mov	r2, r4
     fe6:	462b      	mov	r3, r5
     fe8:	f7ff fa96 	bl	518 <__aeabi_dmul>
     fec:	a33e      	add	r3, pc, #248	; (adr r3, 10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>)
     fee:	e9d3 2300 	ldrd	r2, r3, [r3]
     ff2:	f7ff f8d9 	bl	1a8 <__aeabi_dsub>
     ff6:	4622      	mov	r2, r4
     ff8:	462b      	mov	r3, r5
     ffa:	f7ff fa8d 	bl	518 <__aeabi_dmul>
     ffe:	a33c      	add	r3, pc, #240	; (adr r3, 10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>)
    1000:	e9d3 2300 	ldrd	r2, r3, [r3]
    1004:	f7ff f8d2 	bl	1ac <__adddf3>
    1008:	4622      	mov	r2, r4
    100a:	462b      	mov	r3, r5
    100c:	f7ff fa84 	bl	518 <__aeabi_dmul>
    1010:	a339      	add	r3, pc, #228	; (adr r3, 10f8 <CONFIG_FPROTECT_BLOCK_SIZE+0xf8>)
    1012:	e9d3 2300 	ldrd	r2, r3, [r3]
    1016:	f7ff f8c7 	bl	1a8 <__aeabi_dsub>
    101a:	4622      	mov	r2, r4
    101c:	462b      	mov	r3, r5
    101e:	f7ff fa7b 	bl	518 <__aeabi_dmul>
    1022:	a337      	add	r3, pc, #220	; (adr r3, 1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>)
    1024:	e9d3 2300 	ldrd	r2, r3, [r3]
    1028:	f7ff f8c0 	bl	1ac <__adddf3>
    102c:	4622      	mov	r2, r4
    102e:	462b      	mov	r3, r5
    1030:	f7ff fa72 	bl	518 <__aeabi_dmul>
    1034:	4680      	mov	r8, r0
    1036:	4689      	mov	r9, r1
    1038:	4620      	mov	r0, r4
    103a:	4629      	mov	r1, r5
    103c:	f00c f9a6 	bl	d38c <__ieee754_sqrt>
    1040:	a331      	add	r3, pc, #196	; (adr r3, 1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>)
    1042:	e9d3 2300 	ldrd	r2, r3, [r3]
    1046:	4606      	mov	r6, r0
    1048:	460f      	mov	r7, r1
    104a:	4620      	mov	r0, r4
    104c:	4629      	mov	r1, r5
    104e:	f7ff fa63 	bl	518 <__aeabi_dmul>
    1052:	a32f      	add	r3, pc, #188	; (adr r3, 1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
    1054:	e9d3 2300 	ldrd	r2, r3, [r3]
    1058:	f7ff f8a6 	bl	1a8 <__aeabi_dsub>
    105c:	4622      	mov	r2, r4
    105e:	462b      	mov	r3, r5
    1060:	f7ff fa5a 	bl	518 <__aeabi_dmul>
    1064:	a32c      	add	r3, pc, #176	; (adr r3, 1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
    1066:	e9d3 2300 	ldrd	r2, r3, [r3]
    106a:	f7ff f89f 	bl	1ac <__adddf3>
    106e:	4622      	mov	r2, r4
    1070:	462b      	mov	r3, r5
    1072:	f7ff fa51 	bl	518 <__aeabi_dmul>
    1076:	a32a      	add	r3, pc, #168	; (adr r3, 1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>)
    1078:	e9d3 2300 	ldrd	r2, r3, [r3]
    107c:	f7ff f894 	bl	1a8 <__aeabi_dsub>
    1080:	4622      	mov	r2, r4
    1082:	462b      	mov	r3, r5
    1084:	f7ff fa48 	bl	518 <__aeabi_dmul>
    1088:	4b2e      	ldr	r3, [pc, #184]	; (1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>)
    108a:	2200      	movs	r2, #0
    108c:	f7ff f88e 	bl	1ac <__adddf3>
    1090:	4602      	mov	r2, r0
    1092:	460b      	mov	r3, r1
    1094:	4640      	mov	r0, r8
    1096:	4649      	mov	r1, r9
    1098:	f7ff fb68 	bl	76c <__aeabi_ddiv>
    109c:	4632      	mov	r2, r6
    109e:	463b      	mov	r3, r7
    10a0:	f7ff fa3a 	bl	518 <__aeabi_dmul>
    10a4:	a320      	add	r3, pc, #128	; (adr r3, 1128 <CONFIG_FPROTECT_BLOCK_SIZE+0x128>)
    10a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    10aa:	f7ff f87d 	bl	1a8 <__aeabi_dsub>
    10ae:	4632      	mov	r2, r6
    10b0:	463b      	mov	r3, r7
    10b2:	f7ff f87b 	bl	1ac <__adddf3>
    10b6:	4602      	mov	r2, r0
    10b8:	460b      	mov	r3, r1
    10ba:	f7ff f877 	bl	1ac <__adddf3>
    10be:	4602      	mov	r2, r0
    10c0:	460b      	mov	r3, r1
    10c2:	a103      	add	r1, pc, #12	; (adr r1, 10d0 <CONFIG_FPROTECT_BLOCK_SIZE+0xd0>)
    10c4:	e9d1 0100 	ldrd	r0, r1, [r1]
    10c8:	e772      	b.n	fb0 <__ieee754_acos+0x148>
    10ca:	bf00      	nop
    10cc:	f3af 8000 	nop.w
    10d0:	54442d18 	.word	0x54442d18
    10d4:	400921fb 	.word	0x400921fb
    10d8:	0dfdf709 	.word	0x0dfdf709
    10dc:	3f023de1 	.word	0x3f023de1
    10e0:	7501b288 	.word	0x7501b288
    10e4:	3f49efe0 	.word	0x3f49efe0
    10e8:	b5688f3b 	.word	0xb5688f3b
    10ec:	3fa48228 	.word	0x3fa48228
    10f0:	0e884455 	.word	0x0e884455
    10f4:	3fc9c155 	.word	0x3fc9c155
    10f8:	03eb6f7d 	.word	0x03eb6f7d
    10fc:	3fd4d612 	.word	0x3fd4d612
    1100:	55555555 	.word	0x55555555
    1104:	3fc55555 	.word	0x3fc55555
    1108:	b12e9282 	.word	0xb12e9282
    110c:	3fb3b8c5 	.word	0x3fb3b8c5
    1110:	1b8d0159 	.word	0x1b8d0159
    1114:	3fe6066c 	.word	0x3fe6066c
    1118:	9c598ac8 	.word	0x9c598ac8
    111c:	40002ae5 	.word	0x40002ae5
    1120:	1c8a2d4b 	.word	0x1c8a2d4b
    1124:	40033a27 	.word	0x40033a27
    1128:	33145c07 	.word	0x33145c07
    112c:	3c91a626 	.word	0x3c91a626
    1130:	54442d18 	.word	0x54442d18
    1134:	3ff921fb 	.word	0x3ff921fb
    1138:	3fefffff 	.word	0x3fefffff
    113c:	3fdfffff 	.word	0x3fdfffff
    1140:	3c600000 	.word	0x3c600000
    1144:	3ff00000 	.word	0x3ff00000
    1148:	3fe00000 	.word	0x3fe00000
    114c:	4602      	mov	r2, r0
    114e:	460b      	mov	r3, r1
    1150:	2000      	movs	r0, #0
    1152:	4969      	ldr	r1, [pc, #420]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    1154:	f7ff f828 	bl	1a8 <__aeabi_dsub>
    1158:	4b68      	ldr	r3, [pc, #416]	; (12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>)
    115a:	2200      	movs	r2, #0
    115c:	f7ff f9dc 	bl	518 <__aeabi_dmul>
    1160:	4604      	mov	r4, r0
    1162:	460d      	mov	r5, r1
    1164:	f00c f912 	bl	d38c <__ieee754_sqrt>
    1168:	a34d      	add	r3, pc, #308	; (adr r3, 12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>)
    116a:	e9d3 2300 	ldrd	r2, r3, [r3]
    116e:	4689      	mov	r9, r1
    1170:	4680      	mov	r8, r0
    1172:	4629      	mov	r1, r5
    1174:	4620      	mov	r0, r4
    1176:	f7ff f9cf 	bl	518 <__aeabi_dmul>
    117a:	a34b      	add	r3, pc, #300	; (adr r3, 12a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a8>)
    117c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1180:	f7ff f814 	bl	1ac <__adddf3>
    1184:	4622      	mov	r2, r4
    1186:	462b      	mov	r3, r5
    1188:	f7ff f9c6 	bl	518 <__aeabi_dmul>
    118c:	a348      	add	r3, pc, #288	; (adr r3, 12b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b0>)
    118e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1192:	f7ff f809 	bl	1a8 <__aeabi_dsub>
    1196:	4622      	mov	r2, r4
    1198:	462b      	mov	r3, r5
    119a:	f7ff f9bd 	bl	518 <__aeabi_dmul>
    119e:	a346      	add	r3, pc, #280	; (adr r3, 12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>)
    11a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    11a4:	f7ff f802 	bl	1ac <__adddf3>
    11a8:	4622      	mov	r2, r4
    11aa:	462b      	mov	r3, r5
    11ac:	f7ff f9b4 	bl	518 <__aeabi_dmul>
    11b0:	a343      	add	r3, pc, #268	; (adr r3, 12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>)
    11b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    11b6:	f7fe fff7 	bl	1a8 <__aeabi_dsub>
    11ba:	4622      	mov	r2, r4
    11bc:	462b      	mov	r3, r5
    11be:	f7ff f9ab 	bl	518 <__aeabi_dmul>
    11c2:	a341      	add	r3, pc, #260	; (adr r3, 12c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c8>)
    11c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    11c8:	f7fe fff0 	bl	1ac <__adddf3>
    11cc:	4622      	mov	r2, r4
    11ce:	462b      	mov	r3, r5
    11d0:	f7ff f9a2 	bl	518 <__aeabi_dmul>
    11d4:	a33e      	add	r3, pc, #248	; (adr r3, 12d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d0>)
    11d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    11da:	4682      	mov	sl, r0
    11dc:	468b      	mov	fp, r1
    11de:	4620      	mov	r0, r4
    11e0:	4629      	mov	r1, r5
    11e2:	f7ff f999 	bl	518 <__aeabi_dmul>
    11e6:	a33c      	add	r3, pc, #240	; (adr r3, 12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>)
    11e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    11ec:	f7fe ffdc 	bl	1a8 <__aeabi_dsub>
    11f0:	4622      	mov	r2, r4
    11f2:	462b      	mov	r3, r5
    11f4:	f7ff f990 	bl	518 <__aeabi_dmul>
    11f8:	a339      	add	r3, pc, #228	; (adr r3, 12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>)
    11fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    11fe:	f7fe ffd5 	bl	1ac <__adddf3>
    1202:	4622      	mov	r2, r4
    1204:	462b      	mov	r3, r5
    1206:	f7ff f987 	bl	518 <__aeabi_dmul>
    120a:	a337      	add	r3, pc, #220	; (adr r3, 12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>)
    120c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1210:	f7fe ffca 	bl	1a8 <__aeabi_dsub>
    1214:	4622      	mov	r2, r4
    1216:	462b      	mov	r3, r5
    1218:	f7ff f97e 	bl	518 <__aeabi_dmul>
    121c:	4b36      	ldr	r3, [pc, #216]	; (12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>)
    121e:	2200      	movs	r2, #0
    1220:	f7fe ffc4 	bl	1ac <__adddf3>
    1224:	4602      	mov	r2, r0
    1226:	460b      	mov	r3, r1
    1228:	4650      	mov	r0, sl
    122a:	4659      	mov	r1, fp
    122c:	f7ff fa9e 	bl	76c <__aeabi_ddiv>
    1230:	4642      	mov	r2, r8
    1232:	464b      	mov	r3, r9
    1234:	f7ff f970 	bl	518 <__aeabi_dmul>
    1238:	2600      	movs	r6, #0
    123a:	4682      	mov	sl, r0
    123c:	468b      	mov	fp, r1
    123e:	4632      	mov	r2, r6
    1240:	464b      	mov	r3, r9
    1242:	4630      	mov	r0, r6
    1244:	4649      	mov	r1, r9
    1246:	f7ff f967 	bl	518 <__aeabi_dmul>
    124a:	4602      	mov	r2, r0
    124c:	460b      	mov	r3, r1
    124e:	4620      	mov	r0, r4
    1250:	4629      	mov	r1, r5
    1252:	f7fe ffa9 	bl	1a8 <__aeabi_dsub>
    1256:	4632      	mov	r2, r6
    1258:	4604      	mov	r4, r0
    125a:	460d      	mov	r5, r1
    125c:	464b      	mov	r3, r9
    125e:	4640      	mov	r0, r8
    1260:	4649      	mov	r1, r9
    1262:	f7fe ffa3 	bl	1ac <__adddf3>
    1266:	4602      	mov	r2, r0
    1268:	460b      	mov	r3, r1
    126a:	4620      	mov	r0, r4
    126c:	4629      	mov	r1, r5
    126e:	f7ff fa7d 	bl	76c <__aeabi_ddiv>
    1272:	4602      	mov	r2, r0
    1274:	460b      	mov	r3, r1
    1276:	4650      	mov	r0, sl
    1278:	4659      	mov	r1, fp
    127a:	f7fe ff97 	bl	1ac <__adddf3>
    127e:	4632      	mov	r2, r6
    1280:	464b      	mov	r3, r9
    1282:	f7fe ff93 	bl	1ac <__adddf3>
    1286:	4602      	mov	r2, r0
    1288:	460b      	mov	r3, r1
    128a:	f7fe ff8f 	bl	1ac <__adddf3>
    128e:	e600      	b.n	e92 <__ieee754_acos+0x2a>
    1290:	2000      	movs	r0, #0
    1292:	2100      	movs	r1, #0
    1294:	e5fd      	b.n	e92 <__ieee754_acos+0x2a>
    1296:	a116      	add	r1, pc, #88	; (adr r1, 12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>)
    1298:	e9d1 0100 	ldrd	r0, r1, [r1]
    129c:	e5f9      	b.n	e92 <__ieee754_acos+0x2a>
    129e:	bf00      	nop
    12a0:	0dfdf709 	.word	0x0dfdf709
    12a4:	3f023de1 	.word	0x3f023de1
    12a8:	7501b288 	.word	0x7501b288
    12ac:	3f49efe0 	.word	0x3f49efe0
    12b0:	b5688f3b 	.word	0xb5688f3b
    12b4:	3fa48228 	.word	0x3fa48228
    12b8:	0e884455 	.word	0x0e884455
    12bc:	3fc9c155 	.word	0x3fc9c155
    12c0:	03eb6f7d 	.word	0x03eb6f7d
    12c4:	3fd4d612 	.word	0x3fd4d612
    12c8:	55555555 	.word	0x55555555
    12cc:	3fc55555 	.word	0x3fc55555
    12d0:	b12e9282 	.word	0xb12e9282
    12d4:	3fb3b8c5 	.word	0x3fb3b8c5
    12d8:	1b8d0159 	.word	0x1b8d0159
    12dc:	3fe6066c 	.word	0x3fe6066c
    12e0:	9c598ac8 	.word	0x9c598ac8
    12e4:	40002ae5 	.word	0x40002ae5
    12e8:	1c8a2d4b 	.word	0x1c8a2d4b
    12ec:	40033a27 	.word	0x40033a27
    12f0:	54442d18 	.word	0x54442d18
    12f4:	3ff921fb 	.word	0x3ff921fb
    12f8:	3ff00000 	.word	0x3ff00000
    12fc:	3fe00000 	.word	0x3fe00000

00001300 <__ieee754_pow>:
    1300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1304:	b093      	sub	sp, #76	; 0x4c
    1306:	e9cd 2302 	strd	r2, r3, [sp, #8]
    130a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
    130e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
    1312:	ea55 0302 	orrs.w	r3, r5, r2
    1316:	4607      	mov	r7, r0
    1318:	4688      	mov	r8, r1
    131a:	f000 84bf 	beq.w	1c9c <__ieee754_pow+0x99c>
    131e:	4b7e      	ldr	r3, [pc, #504]	; (1518 <__ieee754_pow+0x218>)
    1320:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
    1324:	429c      	cmp	r4, r3
    1326:	4689      	mov	r9, r1
    1328:	4682      	mov	sl, r0
    132a:	dc09      	bgt.n	1340 <__ieee754_pow+0x40>
    132c:	d103      	bne.n	1336 <__ieee754_pow+0x36>
    132e:	b978      	cbnz	r0, 1350 <__ieee754_pow+0x50>
    1330:	42a5      	cmp	r5, r4
    1332:	dd02      	ble.n	133a <__ieee754_pow+0x3a>
    1334:	e00c      	b.n	1350 <__ieee754_pow+0x50>
    1336:	429d      	cmp	r5, r3
    1338:	dc02      	bgt.n	1340 <__ieee754_pow+0x40>
    133a:	429d      	cmp	r5, r3
    133c:	d10e      	bne.n	135c <__ieee754_pow+0x5c>
    133e:	b16a      	cbz	r2, 135c <__ieee754_pow+0x5c>
    1340:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    1344:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    1348:	ea54 030a 	orrs.w	r3, r4, sl
    134c:	f000 84a6 	beq.w	1c9c <__ieee754_pow+0x99c>
    1350:	4872      	ldr	r0, [pc, #456]	; (151c <__ieee754_pow+0x21c>)
    1352:	b013      	add	sp, #76	; 0x4c
    1354:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1358:	f00c b8c6 	b.w	d4e8 <nan>
    135c:	f1b9 0f00 	cmp.w	r9, #0
    1360:	da39      	bge.n	13d6 <__ieee754_pow+0xd6>
    1362:	4b6f      	ldr	r3, [pc, #444]	; (1520 <__ieee754_pow+0x220>)
    1364:	429d      	cmp	r5, r3
    1366:	dc54      	bgt.n	1412 <__ieee754_pow+0x112>
    1368:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
    136c:	429d      	cmp	r5, r3
    136e:	f340 84a6 	ble.w	1cbe <__ieee754_pow+0x9be>
    1372:	152b      	asrs	r3, r5, #20
    1374:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    1378:	2b14      	cmp	r3, #20
    137a:	dd0f      	ble.n	139c <__ieee754_pow+0x9c>
    137c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
    1380:	fa22 f103 	lsr.w	r1, r2, r3
    1384:	fa01 f303 	lsl.w	r3, r1, r3
    1388:	4293      	cmp	r3, r2
    138a:	f040 8498 	bne.w	1cbe <__ieee754_pow+0x9be>
    138e:	f001 0101 	and.w	r1, r1, #1
    1392:	f1c1 0302 	rsb	r3, r1, #2
    1396:	9300      	str	r3, [sp, #0]
    1398:	b182      	cbz	r2, 13bc <__ieee754_pow+0xbc>
    139a:	e05e      	b.n	145a <__ieee754_pow+0x15a>
    139c:	2a00      	cmp	r2, #0
    139e:	d15a      	bne.n	1456 <__ieee754_pow+0x156>
    13a0:	f1c3 0314 	rsb	r3, r3, #20
    13a4:	fa45 f103 	asr.w	r1, r5, r3
    13a8:	fa01 f303 	lsl.w	r3, r1, r3
    13ac:	42ab      	cmp	r3, r5
    13ae:	f040 8483 	bne.w	1cb8 <__ieee754_pow+0x9b8>
    13b2:	f001 0101 	and.w	r1, r1, #1
    13b6:	f1c1 0302 	rsb	r3, r1, #2
    13ba:	9300      	str	r3, [sp, #0]
    13bc:	4b59      	ldr	r3, [pc, #356]	; (1524 <__ieee754_pow+0x224>)
    13be:	429d      	cmp	r5, r3
    13c0:	d130      	bne.n	1424 <__ieee754_pow+0x124>
    13c2:	2e00      	cmp	r6, #0
    13c4:	f280 8474 	bge.w	1cb0 <__ieee754_pow+0x9b0>
    13c8:	4956      	ldr	r1, [pc, #344]	; (1524 <__ieee754_pow+0x224>)
    13ca:	463a      	mov	r2, r7
    13cc:	4643      	mov	r3, r8
    13ce:	2000      	movs	r0, #0
    13d0:	f7ff f9cc 	bl	76c <__aeabi_ddiv>
    13d4:	e02f      	b.n	1436 <__ieee754_pow+0x136>
    13d6:	2300      	movs	r3, #0
    13d8:	9300      	str	r3, [sp, #0]
    13da:	2a00      	cmp	r2, #0
    13dc:	d13d      	bne.n	145a <__ieee754_pow+0x15a>
    13de:	4b4e      	ldr	r3, [pc, #312]	; (1518 <__ieee754_pow+0x218>)
    13e0:	429d      	cmp	r5, r3
    13e2:	d1eb      	bne.n	13bc <__ieee754_pow+0xbc>
    13e4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
    13e8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    13ec:	ea53 030a 	orrs.w	r3, r3, sl
    13f0:	f000 8454 	beq.w	1c9c <__ieee754_pow+0x99c>
    13f4:	4b4c      	ldr	r3, [pc, #304]	; (1528 <__ieee754_pow+0x228>)
    13f6:	429c      	cmp	r4, r3
    13f8:	dd0d      	ble.n	1416 <__ieee754_pow+0x116>
    13fa:	2e00      	cmp	r6, #0
    13fc:	f280 8454 	bge.w	1ca8 <__ieee754_pow+0x9a8>
    1400:	f04f 0b00 	mov.w	fp, #0
    1404:	f04f 0c00 	mov.w	ip, #0
    1408:	4658      	mov	r0, fp
    140a:	4661      	mov	r1, ip
    140c:	b013      	add	sp, #76	; 0x4c
    140e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1412:	2302      	movs	r3, #2
    1414:	e7e0      	b.n	13d8 <__ieee754_pow+0xd8>
    1416:	2e00      	cmp	r6, #0
    1418:	daf2      	bge.n	1400 <__ieee754_pow+0x100>
    141a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
    141e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
    1422:	e7f1      	b.n	1408 <__ieee754_pow+0x108>
    1424:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
    1428:	d108      	bne.n	143c <__ieee754_pow+0x13c>
    142a:	463a      	mov	r2, r7
    142c:	4643      	mov	r3, r8
    142e:	4638      	mov	r0, r7
    1430:	4641      	mov	r1, r8
    1432:	f7ff f871 	bl	518 <__aeabi_dmul>
    1436:	4683      	mov	fp, r0
    1438:	468c      	mov	ip, r1
    143a:	e7e5      	b.n	1408 <__ieee754_pow+0x108>
    143c:	4b3b      	ldr	r3, [pc, #236]	; (152c <__ieee754_pow+0x22c>)
    143e:	429e      	cmp	r6, r3
    1440:	d10b      	bne.n	145a <__ieee754_pow+0x15a>
    1442:	f1b9 0f00 	cmp.w	r9, #0
    1446:	db08      	blt.n	145a <__ieee754_pow+0x15a>
    1448:	4638      	mov	r0, r7
    144a:	4641      	mov	r1, r8
    144c:	b013      	add	sp, #76	; 0x4c
    144e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1452:	f00b bf9b 	b.w	d38c <__ieee754_sqrt>
    1456:	2300      	movs	r3, #0
    1458:	9300      	str	r3, [sp, #0]
    145a:	4638      	mov	r0, r7
    145c:	4641      	mov	r1, r8
    145e:	f00f f966 	bl	1072e <fabs>
    1462:	4683      	mov	fp, r0
    1464:	468c      	mov	ip, r1
    1466:	f1ba 0f00 	cmp.w	sl, #0
    146a:	d129      	bne.n	14c0 <__ieee754_pow+0x1c0>
    146c:	b124      	cbz	r4, 1478 <__ieee754_pow+0x178>
    146e:	4b2d      	ldr	r3, [pc, #180]	; (1524 <__ieee754_pow+0x224>)
    1470:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
    1474:	429a      	cmp	r2, r3
    1476:	d123      	bne.n	14c0 <__ieee754_pow+0x1c0>
    1478:	2e00      	cmp	r6, #0
    147a:	da07      	bge.n	148c <__ieee754_pow+0x18c>
    147c:	465a      	mov	r2, fp
    147e:	4663      	mov	r3, ip
    1480:	4928      	ldr	r1, [pc, #160]	; (1524 <__ieee754_pow+0x224>)
    1482:	2000      	movs	r0, #0
    1484:	f7ff f972 	bl	76c <__aeabi_ddiv>
    1488:	4683      	mov	fp, r0
    148a:	468c      	mov	ip, r1
    148c:	f1b9 0f00 	cmp.w	r9, #0
    1490:	daba      	bge.n	1408 <__ieee754_pow+0x108>
    1492:	9b00      	ldr	r3, [sp, #0]
    1494:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    1498:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    149c:	4323      	orrs	r3, r4
    149e:	d108      	bne.n	14b2 <__ieee754_pow+0x1b2>
    14a0:	465a      	mov	r2, fp
    14a2:	4663      	mov	r3, ip
    14a4:	4658      	mov	r0, fp
    14a6:	4661      	mov	r1, ip
    14a8:	f7fe fe7e 	bl	1a8 <__aeabi_dsub>
    14ac:	4602      	mov	r2, r0
    14ae:	460b      	mov	r3, r1
    14b0:	e78e      	b.n	13d0 <__ieee754_pow+0xd0>
    14b2:	9b00      	ldr	r3, [sp, #0]
    14b4:	2b01      	cmp	r3, #1
    14b6:	d1a7      	bne.n	1408 <__ieee754_pow+0x108>
    14b8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
    14bc:	469c      	mov	ip, r3
    14be:	e7a3      	b.n	1408 <__ieee754_pow+0x108>
    14c0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
    14c4:	3b01      	subs	r3, #1
    14c6:	930c      	str	r3, [sp, #48]	; 0x30
    14c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    14ca:	9b00      	ldr	r3, [sp, #0]
    14cc:	4313      	orrs	r3, r2
    14ce:	d104      	bne.n	14da <__ieee754_pow+0x1da>
    14d0:	463a      	mov	r2, r7
    14d2:	4643      	mov	r3, r8
    14d4:	4638      	mov	r0, r7
    14d6:	4641      	mov	r1, r8
    14d8:	e7e6      	b.n	14a8 <__ieee754_pow+0x1a8>
    14da:	4b15      	ldr	r3, [pc, #84]	; (1530 <__ieee754_pow+0x230>)
    14dc:	429d      	cmp	r5, r3
    14de:	f340 80f9 	ble.w	16d4 <__ieee754_pow+0x3d4>
    14e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    14e6:	429d      	cmp	r5, r3
    14e8:	4b0f      	ldr	r3, [pc, #60]	; (1528 <__ieee754_pow+0x228>)
    14ea:	dd09      	ble.n	1500 <__ieee754_pow+0x200>
    14ec:	429c      	cmp	r4, r3
    14ee:	dc0c      	bgt.n	150a <__ieee754_pow+0x20a>
    14f0:	2e00      	cmp	r6, #0
    14f2:	da85      	bge.n	1400 <__ieee754_pow+0x100>
    14f4:	a306      	add	r3, pc, #24	; (adr r3, 1510 <__ieee754_pow+0x210>)
    14f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    14fa:	4610      	mov	r0, r2
    14fc:	4619      	mov	r1, r3
    14fe:	e798      	b.n	1432 <__ieee754_pow+0x132>
    1500:	429c      	cmp	r4, r3
    1502:	dbf5      	blt.n	14f0 <__ieee754_pow+0x1f0>
    1504:	4b07      	ldr	r3, [pc, #28]	; (1524 <__ieee754_pow+0x224>)
    1506:	429c      	cmp	r4, r3
    1508:	dd14      	ble.n	1534 <__ieee754_pow+0x234>
    150a:	2e00      	cmp	r6, #0
    150c:	dcf2      	bgt.n	14f4 <__ieee754_pow+0x1f4>
    150e:	e777      	b.n	1400 <__ieee754_pow+0x100>
    1510:	8800759c 	.word	0x8800759c
    1514:	7e37e43c 	.word	0x7e37e43c
    1518:	7ff00000 	.word	0x7ff00000
    151c:	000135f9 	.word	0x000135f9
    1520:	433fffff 	.word	0x433fffff
    1524:	3ff00000 	.word	0x3ff00000
    1528:	3fefffff 	.word	0x3fefffff
    152c:	3fe00000 	.word	0x3fe00000
    1530:	41e00000 	.word	0x41e00000
    1534:	4661      	mov	r1, ip
    1536:	4b62      	ldr	r3, [pc, #392]	; (16c0 <__ieee754_pow+0x3c0>)
    1538:	2200      	movs	r2, #0
    153a:	4658      	mov	r0, fp
    153c:	f7fe fe34 	bl	1a8 <__aeabi_dsub>
    1540:	a355      	add	r3, pc, #340	; (adr r3, 1698 <__ieee754_pow+0x398>)
    1542:	e9d3 2300 	ldrd	r2, r3, [r3]
    1546:	4604      	mov	r4, r0
    1548:	460d      	mov	r5, r1
    154a:	f7fe ffe5 	bl	518 <__aeabi_dmul>
    154e:	a354      	add	r3, pc, #336	; (adr r3, 16a0 <__ieee754_pow+0x3a0>)
    1550:	e9d3 2300 	ldrd	r2, r3, [r3]
    1554:	4606      	mov	r6, r0
    1556:	460f      	mov	r7, r1
    1558:	4620      	mov	r0, r4
    155a:	4629      	mov	r1, r5
    155c:	f7fe ffdc 	bl	518 <__aeabi_dmul>
    1560:	4b58      	ldr	r3, [pc, #352]	; (16c4 <__ieee754_pow+0x3c4>)
    1562:	4682      	mov	sl, r0
    1564:	468b      	mov	fp, r1
    1566:	2200      	movs	r2, #0
    1568:	4620      	mov	r0, r4
    156a:	4629      	mov	r1, r5
    156c:	f7fe ffd4 	bl	518 <__aeabi_dmul>
    1570:	4602      	mov	r2, r0
    1572:	460b      	mov	r3, r1
    1574:	a14c      	add	r1, pc, #304	; (adr r1, 16a8 <__ieee754_pow+0x3a8>)
    1576:	e9d1 0100 	ldrd	r0, r1, [r1]
    157a:	f7fe fe15 	bl	1a8 <__aeabi_dsub>
    157e:	4622      	mov	r2, r4
    1580:	462b      	mov	r3, r5
    1582:	f7fe ffc9 	bl	518 <__aeabi_dmul>
    1586:	4602      	mov	r2, r0
    1588:	460b      	mov	r3, r1
    158a:	2000      	movs	r0, #0
    158c:	494e      	ldr	r1, [pc, #312]	; (16c8 <__ieee754_pow+0x3c8>)
    158e:	f7fe fe0b 	bl	1a8 <__aeabi_dsub>
    1592:	4622      	mov	r2, r4
    1594:	462b      	mov	r3, r5
    1596:	4680      	mov	r8, r0
    1598:	4689      	mov	r9, r1
    159a:	4620      	mov	r0, r4
    159c:	4629      	mov	r1, r5
    159e:	f7fe ffbb 	bl	518 <__aeabi_dmul>
    15a2:	4602      	mov	r2, r0
    15a4:	460b      	mov	r3, r1
    15a6:	4640      	mov	r0, r8
    15a8:	4649      	mov	r1, r9
    15aa:	f7fe ffb5 	bl	518 <__aeabi_dmul>
    15ae:	a340      	add	r3, pc, #256	; (adr r3, 16b0 <__ieee754_pow+0x3b0>)
    15b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    15b4:	f7fe ffb0 	bl	518 <__aeabi_dmul>
    15b8:	4602      	mov	r2, r0
    15ba:	460b      	mov	r3, r1
    15bc:	4650      	mov	r0, sl
    15be:	4659      	mov	r1, fp
    15c0:	f7fe fdf2 	bl	1a8 <__aeabi_dsub>
    15c4:	4602      	mov	r2, r0
    15c6:	460b      	mov	r3, r1
    15c8:	4604      	mov	r4, r0
    15ca:	460d      	mov	r5, r1
    15cc:	4630      	mov	r0, r6
    15ce:	4639      	mov	r1, r7
    15d0:	f7fe fdec 	bl	1ac <__adddf3>
    15d4:	f04f 0a00 	mov.w	sl, #0
    15d8:	4632      	mov	r2, r6
    15da:	463b      	mov	r3, r7
    15dc:	4650      	mov	r0, sl
    15de:	468b      	mov	fp, r1
    15e0:	f7fe fde2 	bl	1a8 <__aeabi_dsub>
    15e4:	4602      	mov	r2, r0
    15e6:	460b      	mov	r3, r1
    15e8:	4620      	mov	r0, r4
    15ea:	4629      	mov	r1, r5
    15ec:	f7fe fddc 	bl	1a8 <__aeabi_dsub>
    15f0:	9b00      	ldr	r3, [sp, #0]
    15f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    15f4:	3b01      	subs	r3, #1
    15f6:	4313      	orrs	r3, r2
    15f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    15fc:	bf0c      	ite	eq
    15fe:	4b33      	ldreq	r3, [pc, #204]	; (16cc <__ieee754_pow+0x3cc>)
    1600:	4b2f      	ldrne	r3, [pc, #188]	; (16c0 <__ieee754_pow+0x3c0>)
    1602:	2600      	movs	r6, #0
    1604:	2200      	movs	r2, #0
    1606:	e9cd 2300 	strd	r2, r3, [sp]
    160a:	4604      	mov	r4, r0
    160c:	460d      	mov	r5, r1
    160e:	4632      	mov	r2, r6
    1610:	463b      	mov	r3, r7
    1612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1616:	f7fe fdc7 	bl	1a8 <__aeabi_dsub>
    161a:	4652      	mov	r2, sl
    161c:	465b      	mov	r3, fp
    161e:	f7fe ff7b 	bl	518 <__aeabi_dmul>
    1622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1626:	4680      	mov	r8, r0
    1628:	4689      	mov	r9, r1
    162a:	4620      	mov	r0, r4
    162c:	4629      	mov	r1, r5
    162e:	f7fe ff73 	bl	518 <__aeabi_dmul>
    1632:	4602      	mov	r2, r0
    1634:	460b      	mov	r3, r1
    1636:	4640      	mov	r0, r8
    1638:	4649      	mov	r1, r9
    163a:	f7fe fdb7 	bl	1ac <__adddf3>
    163e:	4632      	mov	r2, r6
    1640:	463b      	mov	r3, r7
    1642:	4680      	mov	r8, r0
    1644:	4689      	mov	r9, r1
    1646:	4650      	mov	r0, sl
    1648:	4659      	mov	r1, fp
    164a:	f7fe ff65 	bl	518 <__aeabi_dmul>
    164e:	460b      	mov	r3, r1
    1650:	4604      	mov	r4, r0
    1652:	460d      	mov	r5, r1
    1654:	4602      	mov	r2, r0
    1656:	4649      	mov	r1, r9
    1658:	4640      	mov	r0, r8
    165a:	e9cd 4502 	strd	r4, r5, [sp, #8]
    165e:	f7fe fda5 	bl	1ac <__adddf3>
    1662:	4b1b      	ldr	r3, [pc, #108]	; (16d0 <__ieee754_pow+0x3d0>)
    1664:	4299      	cmp	r1, r3
    1666:	4682      	mov	sl, r0
    1668:	460f      	mov	r7, r1
    166a:	460e      	mov	r6, r1
    166c:	f340 82ef 	ble.w	1c4e <__ieee754_pow+0x94e>
    1670:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    1674:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    1678:	4303      	orrs	r3, r0
    167a:	f000 81e9 	beq.w	1a50 <__ieee754_pow+0x750>
    167e:	a30e      	add	r3, pc, #56	; (adr r3, 16b8 <__ieee754_pow+0x3b8>)
    1680:	e9d3 2300 	ldrd	r2, r3, [r3]
    1684:	e9dd 0100 	ldrd	r0, r1, [sp]
    1688:	f7fe ff46 	bl	518 <__aeabi_dmul>
    168c:	a30a      	add	r3, pc, #40	; (adr r3, 16b8 <__ieee754_pow+0x3b8>)
    168e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1692:	e6ce      	b.n	1432 <__ieee754_pow+0x132>
    1694:	f3af 8000 	nop.w
    1698:	60000000 	.word	0x60000000
    169c:	3ff71547 	.word	0x3ff71547
    16a0:	f85ddf44 	.word	0xf85ddf44
    16a4:	3e54ae0b 	.word	0x3e54ae0b
    16a8:	55555555 	.word	0x55555555
    16ac:	3fd55555 	.word	0x3fd55555
    16b0:	652b82fe 	.word	0x652b82fe
    16b4:	3ff71547 	.word	0x3ff71547
    16b8:	8800759c 	.word	0x8800759c
    16bc:	7e37e43c 	.word	0x7e37e43c
    16c0:	3ff00000 	.word	0x3ff00000
    16c4:	3fd00000 	.word	0x3fd00000
    16c8:	3fe00000 	.word	0x3fe00000
    16cc:	bff00000 	.word	0xbff00000
    16d0:	408fffff 	.word	0x408fffff
    16d4:	4bd4      	ldr	r3, [pc, #848]	; (1a28 <__ieee754_pow+0x728>)
    16d6:	ea09 0303 	and.w	r3, r9, r3
    16da:	2200      	movs	r2, #0
    16dc:	b943      	cbnz	r3, 16f0 <__ieee754_pow+0x3f0>
    16de:	4658      	mov	r0, fp
    16e0:	4bd2      	ldr	r3, [pc, #840]	; (1a2c <__ieee754_pow+0x72c>)
    16e2:	4661      	mov	r1, ip
    16e4:	f7fe ff18 	bl	518 <__aeabi_dmul>
    16e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
    16ec:	4683      	mov	fp, r0
    16ee:	460c      	mov	r4, r1
    16f0:	1523      	asrs	r3, r4, #20
    16f2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    16f6:	4413      	add	r3, r2
    16f8:	930b      	str	r3, [sp, #44]	; 0x2c
    16fa:	4bcd      	ldr	r3, [pc, #820]	; (1a30 <__ieee754_pow+0x730>)
    16fc:	f3c4 0413 	ubfx	r4, r4, #0, #20
    1700:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
    1704:	429c      	cmp	r4, r3
    1706:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    170a:	dd08      	ble.n	171e <__ieee754_pow+0x41e>
    170c:	4bc9      	ldr	r3, [pc, #804]	; (1a34 <__ieee754_pow+0x734>)
    170e:	429c      	cmp	r4, r3
    1710:	f340 819c 	ble.w	1a4c <__ieee754_pow+0x74c>
    1714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1716:	3301      	adds	r3, #1
    1718:	930b      	str	r3, [sp, #44]	; 0x2c
    171a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
    171e:	2600      	movs	r6, #0
    1720:	00f3      	lsls	r3, r6, #3
    1722:	930d      	str	r3, [sp, #52]	; 0x34
    1724:	4bc4      	ldr	r3, [pc, #784]	; (1a38 <__ieee754_pow+0x738>)
    1726:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    172a:	e9d3 3400 	ldrd	r3, r4, [r3]
    172e:	4658      	mov	r0, fp
    1730:	e9cd 3408 	strd	r3, r4, [sp, #32]
    1734:	461a      	mov	r2, r3
    1736:	4629      	mov	r1, r5
    1738:	4623      	mov	r3, r4
    173a:	f7fe fd35 	bl	1a8 <__aeabi_dsub>
    173e:	46da      	mov	sl, fp
    1740:	4652      	mov	r2, sl
    1742:	462b      	mov	r3, r5
    1744:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    1748:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    174c:	f7fe fd2e 	bl	1ac <__adddf3>
    1750:	4602      	mov	r2, r0
    1752:	460b      	mov	r3, r1
    1754:	2000      	movs	r0, #0
    1756:	49b9      	ldr	r1, [pc, #740]	; (1a3c <__ieee754_pow+0x73c>)
    1758:	f7ff f808 	bl	76c <__aeabi_ddiv>
    175c:	4602      	mov	r2, r0
    175e:	460b      	mov	r3, r1
    1760:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1764:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    1768:	f7fe fed6 	bl	518 <__aeabi_dmul>
    176c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1770:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
    1774:	e9cd 3404 	strd	r3, r4, [sp, #16]
    1778:	2300      	movs	r3, #0
    177a:	9304      	str	r3, [sp, #16]
    177c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    1780:	46ab      	mov	fp, r5
    1782:	106d      	asrs	r5, r5, #1
    1784:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
    1788:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
    178c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
    1790:	2200      	movs	r2, #0
    1792:	4640      	mov	r0, r8
    1794:	4649      	mov	r1, r9
    1796:	4614      	mov	r4, r2
    1798:	461d      	mov	r5, r3
    179a:	f7fe febd 	bl	518 <__aeabi_dmul>
    179e:	4602      	mov	r2, r0
    17a0:	460b      	mov	r3, r1
    17a2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    17a6:	f7fe fcff 	bl	1a8 <__aeabi_dsub>
    17aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    17ae:	4606      	mov	r6, r0
    17b0:	460f      	mov	r7, r1
    17b2:	4620      	mov	r0, r4
    17b4:	4629      	mov	r1, r5
    17b6:	f7fe fcf7 	bl	1a8 <__aeabi_dsub>
    17ba:	4602      	mov	r2, r0
    17bc:	460b      	mov	r3, r1
    17be:	4650      	mov	r0, sl
    17c0:	4659      	mov	r1, fp
    17c2:	f7fe fcf1 	bl	1a8 <__aeabi_dsub>
    17c6:	4642      	mov	r2, r8
    17c8:	464b      	mov	r3, r9
    17ca:	f7fe fea5 	bl	518 <__aeabi_dmul>
    17ce:	4602      	mov	r2, r0
    17d0:	460b      	mov	r3, r1
    17d2:	4630      	mov	r0, r6
    17d4:	4639      	mov	r1, r7
    17d6:	f7fe fce7 	bl	1a8 <__aeabi_dsub>
    17da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    17de:	f7fe fe9b 	bl	518 <__aeabi_dmul>
    17e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    17e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
    17ea:	4610      	mov	r0, r2
    17ec:	4619      	mov	r1, r3
    17ee:	f7fe fe93 	bl	518 <__aeabi_dmul>
    17f2:	a37b      	add	r3, pc, #492	; (adr r3, 19e0 <__ieee754_pow+0x6e0>)
    17f4:	e9d3 2300 	ldrd	r2, r3, [r3]
    17f8:	4604      	mov	r4, r0
    17fa:	460d      	mov	r5, r1
    17fc:	f7fe fe8c 	bl	518 <__aeabi_dmul>
    1800:	a379      	add	r3, pc, #484	; (adr r3, 19e8 <__ieee754_pow+0x6e8>)
    1802:	e9d3 2300 	ldrd	r2, r3, [r3]
    1806:	f7fe fcd1 	bl	1ac <__adddf3>
    180a:	4622      	mov	r2, r4
    180c:	462b      	mov	r3, r5
    180e:	f7fe fe83 	bl	518 <__aeabi_dmul>
    1812:	a377      	add	r3, pc, #476	; (adr r3, 19f0 <__ieee754_pow+0x6f0>)
    1814:	e9d3 2300 	ldrd	r2, r3, [r3]
    1818:	f7fe fcc8 	bl	1ac <__adddf3>
    181c:	4622      	mov	r2, r4
    181e:	462b      	mov	r3, r5
    1820:	f7fe fe7a 	bl	518 <__aeabi_dmul>
    1824:	a374      	add	r3, pc, #464	; (adr r3, 19f8 <__ieee754_pow+0x6f8>)
    1826:	e9d3 2300 	ldrd	r2, r3, [r3]
    182a:	f7fe fcbf 	bl	1ac <__adddf3>
    182e:	4622      	mov	r2, r4
    1830:	462b      	mov	r3, r5
    1832:	f7fe fe71 	bl	518 <__aeabi_dmul>
    1836:	a372      	add	r3, pc, #456	; (adr r3, 1a00 <__ieee754_pow+0x700>)
    1838:	e9d3 2300 	ldrd	r2, r3, [r3]
    183c:	f7fe fcb6 	bl	1ac <__adddf3>
    1840:	4622      	mov	r2, r4
    1842:	462b      	mov	r3, r5
    1844:	f7fe fe68 	bl	518 <__aeabi_dmul>
    1848:	a36f      	add	r3, pc, #444	; (adr r3, 1a08 <__ieee754_pow+0x708>)
    184a:	e9d3 2300 	ldrd	r2, r3, [r3]
    184e:	f7fe fcad 	bl	1ac <__adddf3>
    1852:	4622      	mov	r2, r4
    1854:	4606      	mov	r6, r0
    1856:	460f      	mov	r7, r1
    1858:	462b      	mov	r3, r5
    185a:	4620      	mov	r0, r4
    185c:	4629      	mov	r1, r5
    185e:	f7fe fe5b 	bl	518 <__aeabi_dmul>
    1862:	4602      	mov	r2, r0
    1864:	460b      	mov	r3, r1
    1866:	4630      	mov	r0, r6
    1868:	4639      	mov	r1, r7
    186a:	f7fe fe55 	bl	518 <__aeabi_dmul>
    186e:	4642      	mov	r2, r8
    1870:	4604      	mov	r4, r0
    1872:	460d      	mov	r5, r1
    1874:	464b      	mov	r3, r9
    1876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    187a:	f7fe fc97 	bl	1ac <__adddf3>
    187e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    1882:	f7fe fe49 	bl	518 <__aeabi_dmul>
    1886:	4622      	mov	r2, r4
    1888:	462b      	mov	r3, r5
    188a:	f7fe fc8f 	bl	1ac <__adddf3>
    188e:	4642      	mov	r2, r8
    1890:	4606      	mov	r6, r0
    1892:	460f      	mov	r7, r1
    1894:	464b      	mov	r3, r9
    1896:	4640      	mov	r0, r8
    1898:	4649      	mov	r1, r9
    189a:	f7fe fe3d 	bl	518 <__aeabi_dmul>
    189e:	4b68      	ldr	r3, [pc, #416]	; (1a40 <__ieee754_pow+0x740>)
    18a0:	2200      	movs	r2, #0
    18a2:	4682      	mov	sl, r0
    18a4:	468b      	mov	fp, r1
    18a6:	f7fe fc81 	bl	1ac <__adddf3>
    18aa:	4632      	mov	r2, r6
    18ac:	463b      	mov	r3, r7
    18ae:	f7fe fc7d 	bl	1ac <__adddf3>
    18b2:	2400      	movs	r4, #0
    18b4:	460d      	mov	r5, r1
    18b6:	4622      	mov	r2, r4
    18b8:	460b      	mov	r3, r1
    18ba:	4640      	mov	r0, r8
    18bc:	4649      	mov	r1, r9
    18be:	f7fe fe2b 	bl	518 <__aeabi_dmul>
    18c2:	4b5f      	ldr	r3, [pc, #380]	; (1a40 <__ieee754_pow+0x740>)
    18c4:	4680      	mov	r8, r0
    18c6:	4689      	mov	r9, r1
    18c8:	2200      	movs	r2, #0
    18ca:	4620      	mov	r0, r4
    18cc:	4629      	mov	r1, r5
    18ce:	f7fe fc6b 	bl	1a8 <__aeabi_dsub>
    18d2:	4652      	mov	r2, sl
    18d4:	465b      	mov	r3, fp
    18d6:	f7fe fc67 	bl	1a8 <__aeabi_dsub>
    18da:	4602      	mov	r2, r0
    18dc:	460b      	mov	r3, r1
    18de:	4630      	mov	r0, r6
    18e0:	4639      	mov	r1, r7
    18e2:	f7fe fc61 	bl	1a8 <__aeabi_dsub>
    18e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    18ea:	f7fe fe15 	bl	518 <__aeabi_dmul>
    18ee:	4622      	mov	r2, r4
    18f0:	4606      	mov	r6, r0
    18f2:	460f      	mov	r7, r1
    18f4:	462b      	mov	r3, r5
    18f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    18fa:	f7fe fe0d 	bl	518 <__aeabi_dmul>
    18fe:	4602      	mov	r2, r0
    1900:	460b      	mov	r3, r1
    1902:	4630      	mov	r0, r6
    1904:	4639      	mov	r1, r7
    1906:	f7fe fc51 	bl	1ac <__adddf3>
    190a:	4606      	mov	r6, r0
    190c:	460f      	mov	r7, r1
    190e:	4602      	mov	r2, r0
    1910:	460b      	mov	r3, r1
    1912:	4640      	mov	r0, r8
    1914:	4649      	mov	r1, r9
    1916:	f7fe fc49 	bl	1ac <__adddf3>
    191a:	2400      	movs	r4, #0
    191c:	a33c      	add	r3, pc, #240	; (adr r3, 1a10 <__ieee754_pow+0x710>)
    191e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1922:	4620      	mov	r0, r4
    1924:	460d      	mov	r5, r1
    1926:	f7fe fdf7 	bl	518 <__aeabi_dmul>
    192a:	4642      	mov	r2, r8
    192c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1930:	464b      	mov	r3, r9
    1932:	4620      	mov	r0, r4
    1934:	4629      	mov	r1, r5
    1936:	f7fe fc37 	bl	1a8 <__aeabi_dsub>
    193a:	4602      	mov	r2, r0
    193c:	460b      	mov	r3, r1
    193e:	4630      	mov	r0, r6
    1940:	4639      	mov	r1, r7
    1942:	f7fe fc31 	bl	1a8 <__aeabi_dsub>
    1946:	a334      	add	r3, pc, #208	; (adr r3, 1a18 <__ieee754_pow+0x718>)
    1948:	e9d3 2300 	ldrd	r2, r3, [r3]
    194c:	f7fe fde4 	bl	518 <__aeabi_dmul>
    1950:	a333      	add	r3, pc, #204	; (adr r3, 1a20 <__ieee754_pow+0x720>)
    1952:	e9d3 2300 	ldrd	r2, r3, [r3]
    1956:	4606      	mov	r6, r0
    1958:	460f      	mov	r7, r1
    195a:	4620      	mov	r0, r4
    195c:	4629      	mov	r1, r5
    195e:	f7fe fddb 	bl	518 <__aeabi_dmul>
    1962:	4602      	mov	r2, r0
    1964:	460b      	mov	r3, r1
    1966:	4630      	mov	r0, r6
    1968:	4639      	mov	r1, r7
    196a:	f7fe fc1f 	bl	1ac <__adddf3>
    196e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1970:	4b34      	ldr	r3, [pc, #208]	; (1a44 <__ieee754_pow+0x744>)
    1972:	4413      	add	r3, r2
    1974:	e9d3 2300 	ldrd	r2, r3, [r3]
    1978:	f7fe fc18 	bl	1ac <__adddf3>
    197c:	4680      	mov	r8, r0
    197e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1980:	4689      	mov	r9, r1
    1982:	f7fe fd5f 	bl	444 <__aeabi_i2d>
    1986:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1988:	4b2f      	ldr	r3, [pc, #188]	; (1a48 <__ieee754_pow+0x748>)
    198a:	4413      	add	r3, r2
    198c:	e9d3 6700 	ldrd	r6, r7, [r3]
    1990:	4604      	mov	r4, r0
    1992:	460d      	mov	r5, r1
    1994:	4642      	mov	r2, r8
    1996:	464b      	mov	r3, r9
    1998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    199c:	f7fe fc06 	bl	1ac <__adddf3>
    19a0:	4632      	mov	r2, r6
    19a2:	463b      	mov	r3, r7
    19a4:	f7fe fc02 	bl	1ac <__adddf3>
    19a8:	4622      	mov	r2, r4
    19aa:	462b      	mov	r3, r5
    19ac:	f7fe fbfe 	bl	1ac <__adddf3>
    19b0:	f04f 0a00 	mov.w	sl, #0
    19b4:	4622      	mov	r2, r4
    19b6:	462b      	mov	r3, r5
    19b8:	4650      	mov	r0, sl
    19ba:	468b      	mov	fp, r1
    19bc:	f7fe fbf4 	bl	1a8 <__aeabi_dsub>
    19c0:	4632      	mov	r2, r6
    19c2:	463b      	mov	r3, r7
    19c4:	f7fe fbf0 	bl	1a8 <__aeabi_dsub>
    19c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    19cc:	f7fe fbec 	bl	1a8 <__aeabi_dsub>
    19d0:	4602      	mov	r2, r0
    19d2:	460b      	mov	r3, r1
    19d4:	4640      	mov	r0, r8
    19d6:	4649      	mov	r1, r9
    19d8:	e608      	b.n	15ec <__ieee754_pow+0x2ec>
    19da:	bf00      	nop
    19dc:	f3af 8000 	nop.w
    19e0:	4a454eef 	.word	0x4a454eef
    19e4:	3fca7e28 	.word	0x3fca7e28
    19e8:	93c9db65 	.word	0x93c9db65
    19ec:	3fcd864a 	.word	0x3fcd864a
    19f0:	a91d4101 	.word	0xa91d4101
    19f4:	3fd17460 	.word	0x3fd17460
    19f8:	518f264d 	.word	0x518f264d
    19fc:	3fd55555 	.word	0x3fd55555
    1a00:	db6fabff 	.word	0xdb6fabff
    1a04:	3fdb6db6 	.word	0x3fdb6db6
    1a08:	33333303 	.word	0x33333303
    1a0c:	3fe33333 	.word	0x3fe33333
    1a10:	e0000000 	.word	0xe0000000
    1a14:	3feec709 	.word	0x3feec709
    1a18:	dc3a03fd 	.word	0xdc3a03fd
    1a1c:	3feec709 	.word	0x3feec709
    1a20:	145b01f5 	.word	0x145b01f5
    1a24:	be3e2fe0 	.word	0xbe3e2fe0
    1a28:	7ff00000 	.word	0x7ff00000
    1a2c:	43400000 	.word	0x43400000
    1a30:	0003988e 	.word	0x0003988e
    1a34:	000bb679 	.word	0x000bb679
    1a38:	000110f8 	.word	0x000110f8
    1a3c:	3ff00000 	.word	0x3ff00000
    1a40:	40080000 	.word	0x40080000
    1a44:	00011118 	.word	0x00011118
    1a48:	00011108 	.word	0x00011108
    1a4c:	2601      	movs	r6, #1
    1a4e:	e667      	b.n	1720 <__ieee754_pow+0x420>
    1a50:	a39d      	add	r3, pc, #628	; (adr r3, 1cc8 <__ieee754_pow+0x9c8>)
    1a52:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a56:	4640      	mov	r0, r8
    1a58:	4649      	mov	r1, r9
    1a5a:	f7fe fba7 	bl	1ac <__adddf3>
    1a5e:	4622      	mov	r2, r4
    1a60:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1a64:	462b      	mov	r3, r5
    1a66:	4650      	mov	r0, sl
    1a68:	4639      	mov	r1, r7
    1a6a:	f7fe fb9d 	bl	1a8 <__aeabi_dsub>
    1a6e:	4602      	mov	r2, r0
    1a70:	460b      	mov	r3, r1
    1a72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1a76:	f7ff f849 	bl	b0c <__aeabi_dcmpgt>
    1a7a:	2800      	cmp	r0, #0
    1a7c:	f47f adff 	bne.w	167e <__ieee754_pow+0x37e>
    1a80:	4aa5      	ldr	r2, [pc, #660]	; (1d18 <__ieee754_pow+0xa18>)
    1a82:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
    1a86:	4293      	cmp	r3, r2
    1a88:	f340 8103 	ble.w	1c92 <__ieee754_pow+0x992>
    1a8c:	151b      	asrs	r3, r3, #20
    1a8e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
    1a92:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    1a96:	fa4a f303 	asr.w	r3, sl, r3
    1a9a:	4433      	add	r3, r6
    1a9c:	f3c3 520a 	ubfx	r2, r3, #20, #11
    1aa0:	4f9e      	ldr	r7, [pc, #632]	; (1d1c <__ieee754_pow+0xa1c>)
    1aa2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    1aa6:	4117      	asrs	r7, r2
    1aa8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
    1aac:	2000      	movs	r0, #0
    1aae:	ea23 0107 	bic.w	r1, r3, r7
    1ab2:	f1c2 0214 	rsb	r2, r2, #20
    1ab6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
    1aba:	fa4a fa02 	asr.w	sl, sl, r2
    1abe:	2e00      	cmp	r6, #0
    1ac0:	4602      	mov	r2, r0
    1ac2:	460b      	mov	r3, r1
    1ac4:	4620      	mov	r0, r4
    1ac6:	4629      	mov	r1, r5
    1ac8:	bfb8      	it	lt
    1aca:	f1ca 0a00 	rsblt	sl, sl, #0
    1ace:	f7fe fb6b 	bl	1a8 <__aeabi_dsub>
    1ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1ad6:	4642      	mov	r2, r8
    1ad8:	464b      	mov	r3, r9
    1ada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1ade:	f7fe fb65 	bl	1ac <__adddf3>
    1ae2:	2400      	movs	r4, #0
    1ae4:	a37a      	add	r3, pc, #488	; (adr r3, 1cd0 <__ieee754_pow+0x9d0>)
    1ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
    1aea:	4620      	mov	r0, r4
    1aec:	460d      	mov	r5, r1
    1aee:	f7fe fd13 	bl	518 <__aeabi_dmul>
    1af2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1af6:	4606      	mov	r6, r0
    1af8:	460f      	mov	r7, r1
    1afa:	4620      	mov	r0, r4
    1afc:	4629      	mov	r1, r5
    1afe:	f7fe fb53 	bl	1a8 <__aeabi_dsub>
    1b02:	4602      	mov	r2, r0
    1b04:	460b      	mov	r3, r1
    1b06:	4640      	mov	r0, r8
    1b08:	4649      	mov	r1, r9
    1b0a:	f7fe fb4d 	bl	1a8 <__aeabi_dsub>
    1b0e:	a372      	add	r3, pc, #456	; (adr r3, 1cd8 <__ieee754_pow+0x9d8>)
    1b10:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b14:	f7fe fd00 	bl	518 <__aeabi_dmul>
    1b18:	a371      	add	r3, pc, #452	; (adr r3, 1ce0 <__ieee754_pow+0x9e0>)
    1b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b1e:	4680      	mov	r8, r0
    1b20:	4689      	mov	r9, r1
    1b22:	4620      	mov	r0, r4
    1b24:	4629      	mov	r1, r5
    1b26:	f7fe fcf7 	bl	518 <__aeabi_dmul>
    1b2a:	4602      	mov	r2, r0
    1b2c:	460b      	mov	r3, r1
    1b2e:	4640      	mov	r0, r8
    1b30:	4649      	mov	r1, r9
    1b32:	f7fe fb3b 	bl	1ac <__adddf3>
    1b36:	4604      	mov	r4, r0
    1b38:	460d      	mov	r5, r1
    1b3a:	4602      	mov	r2, r0
    1b3c:	460b      	mov	r3, r1
    1b3e:	4630      	mov	r0, r6
    1b40:	4639      	mov	r1, r7
    1b42:	f7fe fb33 	bl	1ac <__adddf3>
    1b46:	4632      	mov	r2, r6
    1b48:	463b      	mov	r3, r7
    1b4a:	4680      	mov	r8, r0
    1b4c:	4689      	mov	r9, r1
    1b4e:	f7fe fb2b 	bl	1a8 <__aeabi_dsub>
    1b52:	4602      	mov	r2, r0
    1b54:	460b      	mov	r3, r1
    1b56:	4620      	mov	r0, r4
    1b58:	4629      	mov	r1, r5
    1b5a:	f7fe fb25 	bl	1a8 <__aeabi_dsub>
    1b5e:	4642      	mov	r2, r8
    1b60:	4606      	mov	r6, r0
    1b62:	460f      	mov	r7, r1
    1b64:	464b      	mov	r3, r9
    1b66:	4640      	mov	r0, r8
    1b68:	4649      	mov	r1, r9
    1b6a:	f7fe fcd5 	bl	518 <__aeabi_dmul>
    1b6e:	a35e      	add	r3, pc, #376	; (adr r3, 1ce8 <__ieee754_pow+0x9e8>)
    1b70:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b74:	4604      	mov	r4, r0
    1b76:	460d      	mov	r5, r1
    1b78:	f7fe fcce 	bl	518 <__aeabi_dmul>
    1b7c:	a35c      	add	r3, pc, #368	; (adr r3, 1cf0 <__ieee754_pow+0x9f0>)
    1b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b82:	f7fe fb11 	bl	1a8 <__aeabi_dsub>
    1b86:	4622      	mov	r2, r4
    1b88:	462b      	mov	r3, r5
    1b8a:	f7fe fcc5 	bl	518 <__aeabi_dmul>
    1b8e:	a35a      	add	r3, pc, #360	; (adr r3, 1cf8 <__ieee754_pow+0x9f8>)
    1b90:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b94:	f7fe fb0a 	bl	1ac <__adddf3>
    1b98:	4622      	mov	r2, r4
    1b9a:	462b      	mov	r3, r5
    1b9c:	f7fe fcbc 	bl	518 <__aeabi_dmul>
    1ba0:	a357      	add	r3, pc, #348	; (adr r3, 1d00 <__ieee754_pow+0xa00>)
    1ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ba6:	f7fe faff 	bl	1a8 <__aeabi_dsub>
    1baa:	4622      	mov	r2, r4
    1bac:	462b      	mov	r3, r5
    1bae:	f7fe fcb3 	bl	518 <__aeabi_dmul>
    1bb2:	a355      	add	r3, pc, #340	; (adr r3, 1d08 <__ieee754_pow+0xa08>)
    1bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
    1bb8:	f7fe faf8 	bl	1ac <__adddf3>
    1bbc:	4622      	mov	r2, r4
    1bbe:	462b      	mov	r3, r5
    1bc0:	f7fe fcaa 	bl	518 <__aeabi_dmul>
    1bc4:	4602      	mov	r2, r0
    1bc6:	460b      	mov	r3, r1
    1bc8:	4640      	mov	r0, r8
    1bca:	4649      	mov	r1, r9
    1bcc:	f7fe faec 	bl	1a8 <__aeabi_dsub>
    1bd0:	4604      	mov	r4, r0
    1bd2:	460d      	mov	r5, r1
    1bd4:	4602      	mov	r2, r0
    1bd6:	460b      	mov	r3, r1
    1bd8:	4640      	mov	r0, r8
    1bda:	4649      	mov	r1, r9
    1bdc:	f7fe fc9c 	bl	518 <__aeabi_dmul>
    1be0:	2200      	movs	r2, #0
    1be2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1be6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1bea:	4620      	mov	r0, r4
    1bec:	4629      	mov	r1, r5
    1bee:	f7fe fadb 	bl	1a8 <__aeabi_dsub>
    1bf2:	4602      	mov	r2, r0
    1bf4:	460b      	mov	r3, r1
    1bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    1bfa:	f7fe fdb7 	bl	76c <__aeabi_ddiv>
    1bfe:	4632      	mov	r2, r6
    1c00:	4604      	mov	r4, r0
    1c02:	460d      	mov	r5, r1
    1c04:	463b      	mov	r3, r7
    1c06:	4640      	mov	r0, r8
    1c08:	4649      	mov	r1, r9
    1c0a:	f7fe fc85 	bl	518 <__aeabi_dmul>
    1c0e:	4632      	mov	r2, r6
    1c10:	463b      	mov	r3, r7
    1c12:	f7fe facb 	bl	1ac <__adddf3>
    1c16:	4602      	mov	r2, r0
    1c18:	460b      	mov	r3, r1
    1c1a:	4620      	mov	r0, r4
    1c1c:	4629      	mov	r1, r5
    1c1e:	f7fe fac3 	bl	1a8 <__aeabi_dsub>
    1c22:	4642      	mov	r2, r8
    1c24:	464b      	mov	r3, r9
    1c26:	f7fe fabf 	bl	1a8 <__aeabi_dsub>
    1c2a:	4602      	mov	r2, r0
    1c2c:	460b      	mov	r3, r1
    1c2e:	2000      	movs	r0, #0
    1c30:	493b      	ldr	r1, [pc, #236]	; (1d20 <__ieee754_pow+0xa20>)
    1c32:	f7fe fab9 	bl	1a8 <__aeabi_dsub>
    1c36:	eb01 540a 	add.w	r4, r1, sl, lsl #20
    1c3a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    1c3e:	da2b      	bge.n	1c98 <__ieee754_pow+0x998>
    1c40:	4652      	mov	r2, sl
    1c42:	f000 f875 	bl	1d30 <scalbn>
    1c46:	e9dd 2300 	ldrd	r2, r3, [sp]
    1c4a:	f7ff bbf2 	b.w	1432 <__ieee754_pow+0x132>
    1c4e:	4b35      	ldr	r3, [pc, #212]	; (1d24 <__ieee754_pow+0xa24>)
    1c50:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    1c54:	429f      	cmp	r7, r3
    1c56:	f77f af13 	ble.w	1a80 <__ieee754_pow+0x780>
    1c5a:	4b33      	ldr	r3, [pc, #204]	; (1d28 <__ieee754_pow+0xa28>)
    1c5c:	440b      	add	r3, r1
    1c5e:	4303      	orrs	r3, r0
    1c60:	d00b      	beq.n	1c7a <__ieee754_pow+0x97a>
    1c62:	a32b      	add	r3, pc, #172	; (adr r3, 1d10 <__ieee754_pow+0xa10>)
    1c64:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c68:	e9dd 0100 	ldrd	r0, r1, [sp]
    1c6c:	f7fe fc54 	bl	518 <__aeabi_dmul>
    1c70:	a327      	add	r3, pc, #156	; (adr r3, 1d10 <__ieee754_pow+0xa10>)
    1c72:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c76:	f7ff bbdc 	b.w	1432 <__ieee754_pow+0x132>
    1c7a:	4622      	mov	r2, r4
    1c7c:	462b      	mov	r3, r5
    1c7e:	f7fe fa93 	bl	1a8 <__aeabi_dsub>
    1c82:	4642      	mov	r2, r8
    1c84:	464b      	mov	r3, r9
    1c86:	f7fe ff37 	bl	af8 <__aeabi_dcmpge>
    1c8a:	2800      	cmp	r0, #0
    1c8c:	f43f aef8 	beq.w	1a80 <__ieee754_pow+0x780>
    1c90:	e7e7      	b.n	1c62 <__ieee754_pow+0x962>
    1c92:	f04f 0a00 	mov.w	sl, #0
    1c96:	e71e      	b.n	1ad6 <__ieee754_pow+0x7d6>
    1c98:	4621      	mov	r1, r4
    1c9a:	e7d4      	b.n	1c46 <__ieee754_pow+0x946>
    1c9c:	f8df c080 	ldr.w	ip, [pc, #128]	; 1d20 <__ieee754_pow+0xa20>
    1ca0:	f04f 0b00 	mov.w	fp, #0
    1ca4:	f7ff bbb0 	b.w	1408 <__ieee754_pow+0x108>
    1ca8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
    1cac:	f7ff bbac 	b.w	1408 <__ieee754_pow+0x108>
    1cb0:	4638      	mov	r0, r7
    1cb2:	4641      	mov	r1, r8
    1cb4:	f7ff bbbf 	b.w	1436 <__ieee754_pow+0x136>
    1cb8:	9200      	str	r2, [sp, #0]
    1cba:	f7ff bb7f 	b.w	13bc <__ieee754_pow+0xbc>
    1cbe:	2300      	movs	r3, #0
    1cc0:	f7ff bb69 	b.w	1396 <__ieee754_pow+0x96>
    1cc4:	f3af 8000 	nop.w
    1cc8:	652b82fe 	.word	0x652b82fe
    1ccc:	3c971547 	.word	0x3c971547
    1cd0:	00000000 	.word	0x00000000
    1cd4:	3fe62e43 	.word	0x3fe62e43
    1cd8:	fefa39ef 	.word	0xfefa39ef
    1cdc:	3fe62e42 	.word	0x3fe62e42
    1ce0:	0ca86c39 	.word	0x0ca86c39
    1ce4:	be205c61 	.word	0xbe205c61
    1ce8:	72bea4d0 	.word	0x72bea4d0
    1cec:	3e663769 	.word	0x3e663769
    1cf0:	c5d26bf1 	.word	0xc5d26bf1
    1cf4:	3ebbbd41 	.word	0x3ebbbd41
    1cf8:	af25de2c 	.word	0xaf25de2c
    1cfc:	3f11566a 	.word	0x3f11566a
    1d00:	16bebd93 	.word	0x16bebd93
    1d04:	3f66c16c 	.word	0x3f66c16c
    1d08:	5555553e 	.word	0x5555553e
    1d0c:	3fc55555 	.word	0x3fc55555
    1d10:	c2f8f359 	.word	0xc2f8f359
    1d14:	01a56e1f 	.word	0x01a56e1f
    1d18:	3fe00000 	.word	0x3fe00000
    1d1c:	000fffff 	.word	0x000fffff
    1d20:	3ff00000 	.word	0x3ff00000
    1d24:	4090cbff 	.word	0x4090cbff
    1d28:	3f6f3400 	.word	0x3f6f3400
    1d2c:	00000000 	.word	0x00000000

00001d30 <scalbn>:
    1d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d32:	f3c1 560a 	ubfx	r6, r1, #20, #11
    1d36:	4604      	mov	r4, r0
    1d38:	460d      	mov	r5, r1
    1d3a:	4617      	mov	r7, r2
    1d3c:	460b      	mov	r3, r1
    1d3e:	b996      	cbnz	r6, 1d66 <scalbn+0x36>
    1d40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    1d44:	4303      	orrs	r3, r0
    1d46:	d039      	beq.n	1dbc <scalbn+0x8c>
    1d48:	4b33      	ldr	r3, [pc, #204]	; (1e18 <scalbn+0xe8>)
    1d4a:	2200      	movs	r2, #0
    1d4c:	f7fe fbe4 	bl	518 <__aeabi_dmul>
    1d50:	4b32      	ldr	r3, [pc, #200]	; (1e1c <scalbn+0xec>)
    1d52:	429f      	cmp	r7, r3
    1d54:	4604      	mov	r4, r0
    1d56:	460d      	mov	r5, r1
    1d58:	da0f      	bge.n	1d7a <scalbn+0x4a>
    1d5a:	a32b      	add	r3, pc, #172	; (adr r3, 1e08 <scalbn+0xd8>)
    1d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d60:	f7fe fbda 	bl	518 <__aeabi_dmul>
    1d64:	e006      	b.n	1d74 <scalbn+0x44>
    1d66:	f240 72ff 	movw	r2, #2047	; 0x7ff
    1d6a:	4296      	cmp	r6, r2
    1d6c:	d10a      	bne.n	1d84 <scalbn+0x54>
    1d6e:	4602      	mov	r2, r0
    1d70:	f7fe fa1c 	bl	1ac <__adddf3>
    1d74:	4604      	mov	r4, r0
    1d76:	460d      	mov	r5, r1
    1d78:	e020      	b.n	1dbc <scalbn+0x8c>
    1d7a:	460b      	mov	r3, r1
    1d7c:	f3c1 510a 	ubfx	r1, r1, #20, #11
    1d80:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
    1d84:	19b9      	adds	r1, r7, r6
    1d86:	f240 72fe 	movw	r2, #2046	; 0x7fe
    1d8a:	4291      	cmp	r1, r2
    1d8c:	dd0e      	ble.n	1dac <scalbn+0x7c>
    1d8e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
    1d92:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
    1d96:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
    1d9a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
    1d9e:	a31c      	add	r3, pc, #112	; (adr r3, 1e10 <scalbn+0xe0>)
    1da0:	e9d3 2300 	ldrd	r2, r3, [r3]
    1da4:	481e      	ldr	r0, [pc, #120]	; (1e20 <scalbn+0xf0>)
    1da6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
    1daa:	e7d9      	b.n	1d60 <scalbn+0x30>
    1dac:	2900      	cmp	r1, #0
    1dae:	dd08      	ble.n	1dc2 <scalbn+0x92>
    1db0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    1db4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    1db8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
    1dbc:	4620      	mov	r0, r4
    1dbe:	4629      	mov	r1, r5
    1dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dc2:	f111 0f35 	cmn.w	r1, #53	; 0x35
    1dc6:	da12      	bge.n	1dee <scalbn+0xbe>
    1dc8:	f24c 3350 	movw	r3, #50000	; 0xc350
    1dcc:	429f      	cmp	r7, r3
    1dce:	ea4f 73d5 	mov.w	r3, r5, lsr #31
    1dd2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
    1dd6:	dcdc      	bgt.n	1d92 <scalbn+0x62>
    1dd8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
    1ddc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
    1de0:	a309      	add	r3, pc, #36	; (adr r3, 1e08 <scalbn+0xd8>)
    1de2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1de6:	480f      	ldr	r0, [pc, #60]	; (1e24 <scalbn+0xf4>)
    1de8:	f041 011f 	orr.w	r1, r1, #31
    1dec:	e7b8      	b.n	1d60 <scalbn+0x30>
    1dee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    1df2:	3136      	adds	r1, #54	; 0x36
    1df4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    1df8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
    1dfc:	4620      	mov	r0, r4
    1dfe:	4b0a      	ldr	r3, [pc, #40]	; (1e28 <scalbn+0xf8>)
    1e00:	4629      	mov	r1, r5
    1e02:	2200      	movs	r2, #0
    1e04:	e7ac      	b.n	1d60 <scalbn+0x30>
    1e06:	bf00      	nop
    1e08:	c2f8f359 	.word	0xc2f8f359
    1e0c:	01a56e1f 	.word	0x01a56e1f
    1e10:	8800759c 	.word	0x8800759c
    1e14:	7e37e43c 	.word	0x7e37e43c
    1e18:	43500000 	.word	0x43500000
    1e1c:	ffff3cb0 	.word	0xffff3cb0
    1e20:	8800759c 	.word	0x8800759c
    1e24:	c2f8f359 	.word	0xc2f8f359
    1e28:	3c900000 	.word	0x3c900000
    1e2c:	00000000 	.word	0x00000000

00001e30 <_gcvt>:
    1e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1e34:	4690      	mov	r8, r2
    1e36:	b08b      	sub	sp, #44	; 0x2c
    1e38:	461c      	mov	r4, r3
    1e3a:	4681      	mov	r9, r0
    1e3c:	2200      	movs	r2, #0
    1e3e:	2300      	movs	r3, #0
    1e40:	4640      	mov	r0, r8
    1e42:	4621      	mov	r1, r4
    1e44:	e9dd 7512 	ldrd	r7, r5, [sp, #72]	; 0x48
    1e48:	9e15      	ldr	r6, [sp, #84]	; 0x54
    1e4a:	f7fe fe41 	bl	ad0 <__aeabi_dcmplt>
    1e4e:	b108      	cbz	r0, 1e54 <_gcvt+0x24>
    1e50:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    1e54:	2200      	movs	r2, #0
    1e56:	2300      	movs	r3, #0
    1e58:	4640      	mov	r0, r8
    1e5a:	4621      	mov	r1, r4
    1e5c:	f7fe fe2e 	bl	abc <__aeabi_dcmpeq>
    1e60:	b138      	cbz	r0, 1e72 <_gcvt+0x42>
    1e62:	2330      	movs	r3, #48	; 0x30
    1e64:	702b      	strb	r3, [r5, #0]
    1e66:	2300      	movs	r3, #0
    1e68:	706b      	strb	r3, [r5, #1]
    1e6a:	4628      	mov	r0, r5
    1e6c:	b00b      	add	sp, #44	; 0x2c
    1e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1e72:	a34d      	add	r3, pc, #308	; (adr r3, 1fa8 <_gcvt+0x178>)
    1e74:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e78:	4640      	mov	r0, r8
    1e7a:	4621      	mov	r1, r4
    1e7c:	f7fe fe32 	bl	ae4 <__aeabi_dcmple>
    1e80:	b160      	cbz	r0, 1e9c <_gcvt+0x6c>
    1e82:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    1e86:	9301      	str	r3, [sp, #4]
    1e88:	3f01      	subs	r7, #1
    1e8a:	9602      	str	r6, [sp, #8]
    1e8c:	9700      	str	r7, [sp, #0]
    1e8e:	4642      	mov	r2, r8
    1e90:	4623      	mov	r3, r4
    1e92:	4629      	mov	r1, r5
    1e94:	4648      	mov	r0, r9
    1e96:	f00e fcb0 	bl	107fa <print_e>
    1e9a:	e7e6      	b.n	1e6a <_gcvt+0x3a>
    1e9c:	4638      	mov	r0, r7
    1e9e:	f00c f8db 	bl	e058 <_mprec_log10>
    1ea2:	4642      	mov	r2, r8
    1ea4:	4623      	mov	r3, r4
    1ea6:	f7fe fe1d 	bl	ae4 <__aeabi_dcmple>
    1eaa:	2800      	cmp	r0, #0
    1eac:	d1e9      	bne.n	1e82 <_gcvt+0x52>
    1eae:	ab09      	add	r3, sp, #36	; 0x24
    1eb0:	9304      	str	r3, [sp, #16]
    1eb2:	ab08      	add	r3, sp, #32
    1eb4:	9303      	str	r3, [sp, #12]
    1eb6:	ab07      	add	r3, sp, #28
    1eb8:	e9cd 7301 	strd	r7, r3, [sp, #4]
    1ebc:	2302      	movs	r3, #2
    1ebe:	9300      	str	r3, [sp, #0]
    1ec0:	4642      	mov	r2, r8
    1ec2:	4623      	mov	r3, r4
    1ec4:	4648      	mov	r0, r9
    1ec6:	f000 f873 	bl	1fb0 <_dtoa_r>
    1eca:	9a07      	ldr	r2, [sp, #28]
    1ecc:	f242 730f 	movw	r3, #9999	; 0x270f
    1ed0:	429a      	cmp	r2, r3
    1ed2:	4601      	mov	r1, r0
    1ed4:	d00f      	beq.n	1ef6 <_gcvt+0xc6>
    1ed6:	462b      	mov	r3, r5
    1ed8:	442f      	add	r7, r5
    1eda:	4608      	mov	r0, r1
    1edc:	f811 cb01 	ldrb.w	ip, [r1], #1
    1ee0:	9a07      	ldr	r2, [sp, #28]
    1ee2:	1afc      	subs	r4, r7, r3
    1ee4:	f1bc 0f00 	cmp.w	ip, #0
    1ee8:	d001      	beq.n	1eee <_gcvt+0xbe>
    1eea:	2a00      	cmp	r2, #0
    1eec:	dc07      	bgt.n	1efe <_gcvt+0xce>
    1eee:	2100      	movs	r1, #0
    1ef0:	f04f 0c30 	mov.w	ip, #48	; 0x30
    1ef4:	e00c      	b.n	1f10 <_gcvt+0xe0>
    1ef6:	4628      	mov	r0, r5
    1ef8:	f00e fe6b 	bl	10bd2 <strcpy>
    1efc:	e7b5      	b.n	1e6a <_gcvt+0x3a>
    1efe:	3a01      	subs	r2, #1
    1f00:	f803 cb01 	strb.w	ip, [r3], #1
    1f04:	9207      	str	r2, [sp, #28]
    1f06:	e7e8      	b.n	1eda <_gcvt+0xaa>
    1f08:	f803 cb01 	strb.w	ip, [r3], #1
    1f0c:	3c01      	subs	r4, #1
    1f0e:	2101      	movs	r1, #1
    1f10:	2a00      	cmp	r2, #0
    1f12:	4617      	mov	r7, r2
    1f14:	dc2a      	bgt.n	1f6c <_gcvt+0x13c>
    1f16:	b101      	cbz	r1, 1f1a <_gcvt+0xea>
    1f18:	9207      	str	r2, [sp, #28]
    1f1a:	b90e      	cbnz	r6, 1f20 <_gcvt+0xf0>
    1f1c:	7802      	ldrb	r2, [r0, #0]
    1f1e:	b312      	cbz	r2, 1f66 <_gcvt+0x136>
    1f20:	42ab      	cmp	r3, r5
    1f22:	bf04      	itt	eq
    1f24:	2230      	moveq	r2, #48	; 0x30
    1f26:	f803 2b01 	strbeq.w	r2, [r3], #1
    1f2a:	222e      	movs	r2, #46	; 0x2e
    1f2c:	701a      	strb	r2, [r3, #0]
    1f2e:	9a07      	ldr	r2, [sp, #28]
    1f30:	4619      	mov	r1, r3
    1f32:	2700      	movs	r7, #0
    1f34:	eba2 0c03 	sub.w	ip, r2, r3
    1f38:	f04f 0e30 	mov.w	lr, #48	; 0x30
    1f3c:	eb1c 0f01 	cmn.w	ip, r1
    1f40:	d41c      	bmi.n	1f7c <_gcvt+0x14c>
    1f42:	2a00      	cmp	r2, #0
    1f44:	f1c2 0100 	rsb	r1, r2, #0
    1f48:	bfc8      	it	gt
    1f4a:	2100      	movgt	r1, #0
    1f4c:	f101 0c01 	add.w	ip, r1, #1
    1f50:	4463      	add	r3, ip
    1f52:	440a      	add	r2, r1
    1f54:	b107      	cbz	r7, 1f58 <_gcvt+0x128>
    1f56:	9207      	str	r2, [sp, #28]
    1f58:	1e42      	subs	r2, r0, #1
    1f5a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    1f5e:	b109      	cbz	r1, 1f64 <_gcvt+0x134>
    1f60:	2c00      	cmp	r4, #0
    1f62:	dc0f      	bgt.n	1f84 <_gcvt+0x154>
    1f64:	b9de      	cbnz	r6, 1f9e <_gcvt+0x16e>
    1f66:	2200      	movs	r2, #0
    1f68:	701a      	strb	r2, [r3, #0]
    1f6a:	e77e      	b.n	1e6a <_gcvt+0x3a>
    1f6c:	2c00      	cmp	r4, #0
    1f6e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
    1f72:	dcc9      	bgt.n	1f08 <_gcvt+0xd8>
    1f74:	2900      	cmp	r1, #0
    1f76:	d0d0      	beq.n	1f1a <_gcvt+0xea>
    1f78:	9707      	str	r7, [sp, #28]
    1f7a:	e7ce      	b.n	1f1a <_gcvt+0xea>
    1f7c:	f801 ef01 	strb.w	lr, [r1, #1]!
    1f80:	2701      	movs	r7, #1
    1f82:	e7db      	b.n	1f3c <_gcvt+0x10c>
    1f84:	f803 1b01 	strb.w	r1, [r3], #1
    1f88:	3c01      	subs	r4, #1
    1f8a:	e7e6      	b.n	1f5a <_gcvt+0x12a>
    1f8c:	f802 6b01 	strb.w	r6, [r2], #1
    1f90:	1a81      	subs	r1, r0, r2
    1f92:	2900      	cmp	r1, #0
    1f94:	dcfa      	bgt.n	1f8c <_gcvt+0x15c>
    1f96:	2c00      	cmp	r4, #0
    1f98:	bfa8      	it	ge
    1f9a:	191b      	addge	r3, r3, r4
    1f9c:	e7e3      	b.n	1f66 <_gcvt+0x136>
    1f9e:	461a      	mov	r2, r3
    1fa0:	1918      	adds	r0, r3, r4
    1fa2:	2630      	movs	r6, #48	; 0x30
    1fa4:	e7f4      	b.n	1f90 <_gcvt+0x160>
    1fa6:	bf00      	nop
    1fa8:	eb1c432d 	.word	0xeb1c432d
    1fac:	3f1a36e2 	.word	0x3f1a36e2

00001fb0 <_dtoa_r>:
    1fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fb4:	6a44      	ldr	r4, [r0, #36]	; 0x24
    1fb6:	b099      	sub	sp, #100	; 0x64
    1fb8:	4616      	mov	r6, r2
    1fba:	461f      	mov	r7, r3
    1fbc:	e9cd 6704 	strd	r6, r7, [sp, #16]
    1fc0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    1fc4:	4605      	mov	r5, r0
    1fc6:	b974      	cbnz	r4, 1fe6 <_dtoa_r+0x36>
    1fc8:	2010      	movs	r0, #16
    1fca:	f00b fb5f 	bl	d68c <malloc>
    1fce:	4602      	mov	r2, r0
    1fd0:	6268      	str	r0, [r5, #36]	; 0x24
    1fd2:	b920      	cbnz	r0, 1fde <_dtoa_r+0x2e>
    1fd4:	4ba8      	ldr	r3, [pc, #672]	; (2278 <_dtoa_r+0x2c8>)
    1fd6:	21ea      	movs	r1, #234	; 0xea
    1fd8:	48a8      	ldr	r0, [pc, #672]	; (227c <_dtoa_r+0x2cc>)
    1fda:	f00c fb81 	bl	e6e0 <__assert_func>
    1fde:	e9c0 4401 	strd	r4, r4, [r0, #4]
    1fe2:	6004      	str	r4, [r0, #0]
    1fe4:	60c4      	str	r4, [r0, #12]
    1fe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1fe8:	6819      	ldr	r1, [r3, #0]
    1fea:	b151      	cbz	r1, 2002 <_dtoa_r+0x52>
    1fec:	685a      	ldr	r2, [r3, #4]
    1fee:	604a      	str	r2, [r1, #4]
    1ff0:	2301      	movs	r3, #1
    1ff2:	4093      	lsls	r3, r2
    1ff4:	608b      	str	r3, [r1, #8]
    1ff6:	4628      	mov	r0, r5
    1ff8:	f00b fd5a 	bl	dab0 <_Bfree>
    1ffc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1ffe:	2200      	movs	r2, #0
    2000:	601a      	str	r2, [r3, #0]
    2002:	1e3b      	subs	r3, r7, #0
    2004:	bfb9      	ittee	lt
    2006:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    200a:	9305      	strlt	r3, [sp, #20]
    200c:	2300      	movge	r3, #0
    200e:	f8c8 3000 	strge.w	r3, [r8]
    2012:	f8dd 9014 	ldr.w	r9, [sp, #20]
    2016:	4b9a      	ldr	r3, [pc, #616]	; (2280 <_dtoa_r+0x2d0>)
    2018:	bfbc      	itt	lt
    201a:	2201      	movlt	r2, #1
    201c:	f8c8 2000 	strlt.w	r2, [r8]
    2020:	ea33 0309 	bics.w	r3, r3, r9
    2024:	d119      	bne.n	205a <_dtoa_r+0xaa>
    2026:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2028:	f242 730f 	movw	r3, #9999	; 0x270f
    202c:	6013      	str	r3, [r2, #0]
    202e:	f3c9 0313 	ubfx	r3, r9, #0, #20
    2032:	4333      	orrs	r3, r6
    2034:	f000 8580 	beq.w	2b38 <_dtoa_r+0xb88>
    2038:	9b26      	ldr	r3, [sp, #152]	; 0x98
    203a:	b953      	cbnz	r3, 2052 <_dtoa_r+0xa2>
    203c:	4b91      	ldr	r3, [pc, #580]	; (2284 <_dtoa_r+0x2d4>)
    203e:	e022      	b.n	2086 <_dtoa_r+0xd6>
    2040:	4b91      	ldr	r3, [pc, #580]	; (2288 <_dtoa_r+0x2d8>)
    2042:	9303      	str	r3, [sp, #12]
    2044:	3308      	adds	r3, #8
    2046:	9a26      	ldr	r2, [sp, #152]	; 0x98
    2048:	6013      	str	r3, [r2, #0]
    204a:	9803      	ldr	r0, [sp, #12]
    204c:	b019      	add	sp, #100	; 0x64
    204e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2052:	4b8c      	ldr	r3, [pc, #560]	; (2284 <_dtoa_r+0x2d4>)
    2054:	9303      	str	r3, [sp, #12]
    2056:	3303      	adds	r3, #3
    2058:	e7f5      	b.n	2046 <_dtoa_r+0x96>
    205a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    205e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    2062:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    2066:	2200      	movs	r2, #0
    2068:	2300      	movs	r3, #0
    206a:	f7fe fd27 	bl	abc <__aeabi_dcmpeq>
    206e:	4680      	mov	r8, r0
    2070:	b158      	cbz	r0, 208a <_dtoa_r+0xda>
    2072:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2074:	2301      	movs	r3, #1
    2076:	6013      	str	r3, [r2, #0]
    2078:	9b26      	ldr	r3, [sp, #152]	; 0x98
    207a:	2b00      	cmp	r3, #0
    207c:	f000 8559 	beq.w	2b32 <_dtoa_r+0xb82>
    2080:	4882      	ldr	r0, [pc, #520]	; (228c <_dtoa_r+0x2dc>)
    2082:	6018      	str	r0, [r3, #0]
    2084:	1e43      	subs	r3, r0, #1
    2086:	9303      	str	r3, [sp, #12]
    2088:	e7df      	b.n	204a <_dtoa_r+0x9a>
    208a:	ab16      	add	r3, sp, #88	; 0x58
    208c:	9301      	str	r3, [sp, #4]
    208e:	ab17      	add	r3, sp, #92	; 0x5c
    2090:	9300      	str	r3, [sp, #0]
    2092:	4628      	mov	r0, r5
    2094:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    2098:	f00b ff82 	bl	dfa0 <__d2b>
    209c:	f3c9 540a 	ubfx	r4, r9, #20, #11
    20a0:	4683      	mov	fp, r0
    20a2:	2c00      	cmp	r4, #0
    20a4:	d07e      	beq.n	21a4 <_dtoa_r+0x1f4>
    20a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    20a8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    20ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
    20b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    20b4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    20b8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    20bc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    20c0:	4b73      	ldr	r3, [pc, #460]	; (2290 <_dtoa_r+0x2e0>)
    20c2:	2200      	movs	r2, #0
    20c4:	f7fe f870 	bl	1a8 <__aeabi_dsub>
    20c8:	a365      	add	r3, pc, #404	; (adr r3, 2260 <_dtoa_r+0x2b0>)
    20ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    20ce:	f7fe fa23 	bl	518 <__aeabi_dmul>
    20d2:	a365      	add	r3, pc, #404	; (adr r3, 2268 <_dtoa_r+0x2b8>)
    20d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    20d8:	f7fe f868 	bl	1ac <__adddf3>
    20dc:	4606      	mov	r6, r0
    20de:	4620      	mov	r0, r4
    20e0:	460f      	mov	r7, r1
    20e2:	f7fe f9af 	bl	444 <__aeabi_i2d>
    20e6:	a362      	add	r3, pc, #392	; (adr r3, 2270 <_dtoa_r+0x2c0>)
    20e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    20ec:	f7fe fa14 	bl	518 <__aeabi_dmul>
    20f0:	4602      	mov	r2, r0
    20f2:	460b      	mov	r3, r1
    20f4:	4630      	mov	r0, r6
    20f6:	4639      	mov	r1, r7
    20f8:	f7fe f858 	bl	1ac <__adddf3>
    20fc:	4606      	mov	r6, r0
    20fe:	460f      	mov	r7, r1
    2100:	f7fe fd24 	bl	b4c <__aeabi_d2iz>
    2104:	2200      	movs	r2, #0
    2106:	4682      	mov	sl, r0
    2108:	2300      	movs	r3, #0
    210a:	4630      	mov	r0, r6
    210c:	4639      	mov	r1, r7
    210e:	f7fe fcdf 	bl	ad0 <__aeabi_dcmplt>
    2112:	b148      	cbz	r0, 2128 <_dtoa_r+0x178>
    2114:	4650      	mov	r0, sl
    2116:	f7fe f995 	bl	444 <__aeabi_i2d>
    211a:	4632      	mov	r2, r6
    211c:	463b      	mov	r3, r7
    211e:	f7fe fccd 	bl	abc <__aeabi_dcmpeq>
    2122:	b908      	cbnz	r0, 2128 <_dtoa_r+0x178>
    2124:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2128:	f1ba 0f16 	cmp.w	sl, #22
    212c:	d857      	bhi.n	21de <_dtoa_r+0x22e>
    212e:	4b59      	ldr	r3, [pc, #356]	; (2294 <_dtoa_r+0x2e4>)
    2130:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    2134:	e9d3 2300 	ldrd	r2, r3, [r3]
    2138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    213c:	f7fe fcc8 	bl	ad0 <__aeabi_dcmplt>
    2140:	2800      	cmp	r0, #0
    2142:	d04e      	beq.n	21e2 <_dtoa_r+0x232>
    2144:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2148:	2300      	movs	r3, #0
    214a:	930f      	str	r3, [sp, #60]	; 0x3c
    214c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    214e:	1b1c      	subs	r4, r3, r4
    2150:	1e63      	subs	r3, r4, #1
    2152:	9309      	str	r3, [sp, #36]	; 0x24
    2154:	bf45      	ittet	mi
    2156:	f1c4 0301 	rsbmi	r3, r4, #1
    215a:	9306      	strmi	r3, [sp, #24]
    215c:	2300      	movpl	r3, #0
    215e:	2300      	movmi	r3, #0
    2160:	bf4c      	ite	mi
    2162:	9309      	strmi	r3, [sp, #36]	; 0x24
    2164:	9306      	strpl	r3, [sp, #24]
    2166:	f1ba 0f00 	cmp.w	sl, #0
    216a:	db3c      	blt.n	21e6 <_dtoa_r+0x236>
    216c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    216e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    2172:	4453      	add	r3, sl
    2174:	9309      	str	r3, [sp, #36]	; 0x24
    2176:	2300      	movs	r3, #0
    2178:	930a      	str	r3, [sp, #40]	; 0x28
    217a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    217c:	2b09      	cmp	r3, #9
    217e:	f200 808d 	bhi.w	229c <_dtoa_r+0x2ec>
    2182:	2b05      	cmp	r3, #5
    2184:	bfc4      	itt	gt
    2186:	3b04      	subgt	r3, #4
    2188:	9322      	strgt	r3, [sp, #136]	; 0x88
    218a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    218c:	f1a3 0302 	sub.w	r3, r3, #2
    2190:	bfcc      	ite	gt
    2192:	2400      	movgt	r4, #0
    2194:	2401      	movle	r4, #1
    2196:	2b03      	cmp	r3, #3
    2198:	f200 808c 	bhi.w	22b4 <_dtoa_r+0x304>
    219c:	e8df f003 	tbb	[pc, r3]
    21a0:	5b4d4f2d 	.word	0x5b4d4f2d
    21a4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    21a8:	441c      	add	r4, r3
    21aa:	f204 4332 	addw	r3, r4, #1074	; 0x432
    21ae:	2b20      	cmp	r3, #32
    21b0:	bfc3      	ittte	gt
    21b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    21b6:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    21ba:	fa09 f303 	lslgt.w	r3, r9, r3
    21be:	f1c3 0320 	rsble	r3, r3, #32
    21c2:	bfc6      	itte	gt
    21c4:	fa26 f000 	lsrgt.w	r0, r6, r0
    21c8:	4318      	orrgt	r0, r3
    21ca:	fa06 f003 	lslle.w	r0, r6, r3
    21ce:	f7fe f929 	bl	424 <__aeabi_ui2d>
    21d2:	2301      	movs	r3, #1
    21d4:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    21d8:	3c01      	subs	r4, #1
    21da:	9313      	str	r3, [sp, #76]	; 0x4c
    21dc:	e770      	b.n	20c0 <_dtoa_r+0x110>
    21de:	2301      	movs	r3, #1
    21e0:	e7b3      	b.n	214a <_dtoa_r+0x19a>
    21e2:	900f      	str	r0, [sp, #60]	; 0x3c
    21e4:	e7b2      	b.n	214c <_dtoa_r+0x19c>
    21e6:	9b06      	ldr	r3, [sp, #24]
    21e8:	eba3 030a 	sub.w	r3, r3, sl
    21ec:	9306      	str	r3, [sp, #24]
    21ee:	f1ca 0300 	rsb	r3, sl, #0
    21f2:	930a      	str	r3, [sp, #40]	; 0x28
    21f4:	2300      	movs	r3, #0
    21f6:	930e      	str	r3, [sp, #56]	; 0x38
    21f8:	e7bf      	b.n	217a <_dtoa_r+0x1ca>
    21fa:	2300      	movs	r3, #0
    21fc:	930b      	str	r3, [sp, #44]	; 0x2c
    21fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2200:	2b00      	cmp	r3, #0
    2202:	dc5a      	bgt.n	22ba <_dtoa_r+0x30a>
    2204:	f04f 0901 	mov.w	r9, #1
    2208:	f8cd 9020 	str.w	r9, [sp, #32]
    220c:	464b      	mov	r3, r9
    220e:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    2212:	6a68      	ldr	r0, [r5, #36]	; 0x24
    2214:	2200      	movs	r2, #0
    2216:	6042      	str	r2, [r0, #4]
    2218:	2204      	movs	r2, #4
    221a:	f102 0614 	add.w	r6, r2, #20
    221e:	429e      	cmp	r6, r3
    2220:	6841      	ldr	r1, [r0, #4]
    2222:	d950      	bls.n	22c6 <_dtoa_r+0x316>
    2224:	4628      	mov	r0, r5
    2226:	f00b fc03 	bl	da30 <_Balloc>
    222a:	9003      	str	r0, [sp, #12]
    222c:	2800      	cmp	r0, #0
    222e:	d14e      	bne.n	22ce <_dtoa_r+0x31e>
    2230:	4b19      	ldr	r3, [pc, #100]	; (2298 <_dtoa_r+0x2e8>)
    2232:	4602      	mov	r2, r0
    2234:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    2238:	e6ce      	b.n	1fd8 <_dtoa_r+0x28>
    223a:	2301      	movs	r3, #1
    223c:	e7de      	b.n	21fc <_dtoa_r+0x24c>
    223e:	2300      	movs	r3, #0
    2240:	930b      	str	r3, [sp, #44]	; 0x2c
    2242:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2244:	eb0a 0903 	add.w	r9, sl, r3
    2248:	f109 0301 	add.w	r3, r9, #1
    224c:	2b01      	cmp	r3, #1
    224e:	9308      	str	r3, [sp, #32]
    2250:	bfb8      	it	lt
    2252:	2301      	movlt	r3, #1
    2254:	e7dd      	b.n	2212 <_dtoa_r+0x262>
    2256:	2301      	movs	r3, #1
    2258:	e7f2      	b.n	2240 <_dtoa_r+0x290>
    225a:	bf00      	nop
    225c:	f3af 8000 	nop.w
    2260:	636f4361 	.word	0x636f4361
    2264:	3fd287a7 	.word	0x3fd287a7
    2268:	8b60c8b3 	.word	0x8b60c8b3
    226c:	3fc68a28 	.word	0x3fc68a28
    2270:	509f79fb 	.word	0x509f79fb
    2274:	3fd34413 	.word	0x3fd34413
    2278:	00013506 	.word	0x00013506
    227c:	00013609 	.word	0x00013609
    2280:	7ff00000 	.word	0x7ff00000
    2284:	00013603 	.word	0x00013603
    2288:	000135fa 	.word	0x000135fa
    228c:	00013608 	.word	0x00013608
    2290:	3ff80000 	.word	0x3ff80000
    2294:	00011160 	.word	0x00011160
    2298:	0001357a 	.word	0x0001357a
    229c:	2401      	movs	r4, #1
    229e:	2300      	movs	r3, #0
    22a0:	9322      	str	r3, [sp, #136]	; 0x88
    22a2:	940b      	str	r4, [sp, #44]	; 0x2c
    22a4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    22a8:	2200      	movs	r2, #0
    22aa:	f8cd 9020 	str.w	r9, [sp, #32]
    22ae:	2312      	movs	r3, #18
    22b0:	9223      	str	r2, [sp, #140]	; 0x8c
    22b2:	e7ae      	b.n	2212 <_dtoa_r+0x262>
    22b4:	2301      	movs	r3, #1
    22b6:	930b      	str	r3, [sp, #44]	; 0x2c
    22b8:	e7f4      	b.n	22a4 <_dtoa_r+0x2f4>
    22ba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    22be:	f8cd 9020 	str.w	r9, [sp, #32]
    22c2:	464b      	mov	r3, r9
    22c4:	e7a5      	b.n	2212 <_dtoa_r+0x262>
    22c6:	3101      	adds	r1, #1
    22c8:	6041      	str	r1, [r0, #4]
    22ca:	0052      	lsls	r2, r2, #1
    22cc:	e7a5      	b.n	221a <_dtoa_r+0x26a>
    22ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    22d0:	9a03      	ldr	r2, [sp, #12]
    22d2:	601a      	str	r2, [r3, #0]
    22d4:	9b08      	ldr	r3, [sp, #32]
    22d6:	2b0e      	cmp	r3, #14
    22d8:	f200 80a8 	bhi.w	242c <_dtoa_r+0x47c>
    22dc:	2c00      	cmp	r4, #0
    22de:	f000 80a5 	beq.w	242c <_dtoa_r+0x47c>
    22e2:	f1ba 0f00 	cmp.w	sl, #0
    22e6:	dd34      	ble.n	2352 <_dtoa_r+0x3a2>
    22e8:	4a9a      	ldr	r2, [pc, #616]	; (2554 <_dtoa_r+0x5a4>)
    22ea:	f00a 030f 	and.w	r3, sl, #15
    22ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    22f2:	e9d3 3400 	ldrd	r3, r4, [r3]
    22f6:	f41a 7f80 	tst.w	sl, #256	; 0x100
    22fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    22fe:	ea4f 142a 	mov.w	r4, sl, asr #4
    2302:	d016      	beq.n	2332 <_dtoa_r+0x382>
    2304:	4b94      	ldr	r3, [pc, #592]	; (2558 <_dtoa_r+0x5a8>)
    2306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    230a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    230e:	f7fe fa2d 	bl	76c <__aeabi_ddiv>
    2312:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2316:	f004 040f 	and.w	r4, r4, #15
    231a:	2703      	movs	r7, #3
    231c:	4e8e      	ldr	r6, [pc, #568]	; (2558 <_dtoa_r+0x5a8>)
    231e:	b954      	cbnz	r4, 2336 <_dtoa_r+0x386>
    2320:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2328:	f7fe fa20 	bl	76c <__aeabi_ddiv>
    232c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2330:	e029      	b.n	2386 <_dtoa_r+0x3d6>
    2332:	2702      	movs	r7, #2
    2334:	e7f2      	b.n	231c <_dtoa_r+0x36c>
    2336:	07e1      	lsls	r1, r4, #31
    2338:	d508      	bpl.n	234c <_dtoa_r+0x39c>
    233a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    233e:	e9d6 2300 	ldrd	r2, r3, [r6]
    2342:	f7fe f8e9 	bl	518 <__aeabi_dmul>
    2346:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    234a:	3701      	adds	r7, #1
    234c:	1064      	asrs	r4, r4, #1
    234e:	3608      	adds	r6, #8
    2350:	e7e5      	b.n	231e <_dtoa_r+0x36e>
    2352:	f000 80a5 	beq.w	24a0 <_dtoa_r+0x4f0>
    2356:	f1ca 0400 	rsb	r4, sl, #0
    235a:	4b7e      	ldr	r3, [pc, #504]	; (2554 <_dtoa_r+0x5a4>)
    235c:	4e7e      	ldr	r6, [pc, #504]	; (2558 <_dtoa_r+0x5a8>)
    235e:	f004 020f 	and.w	r2, r4, #15
    2362:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2366:	e9d3 2300 	ldrd	r2, r3, [r3]
    236a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    236e:	f7fe f8d3 	bl	518 <__aeabi_dmul>
    2372:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2376:	1124      	asrs	r4, r4, #4
    2378:	2300      	movs	r3, #0
    237a:	2702      	movs	r7, #2
    237c:	2c00      	cmp	r4, #0
    237e:	f040 8084 	bne.w	248a <_dtoa_r+0x4da>
    2382:	2b00      	cmp	r3, #0
    2384:	d1d2      	bne.n	232c <_dtoa_r+0x37c>
    2386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2388:	2b00      	cmp	r3, #0
    238a:	f000 808b 	beq.w	24a4 <_dtoa_r+0x4f4>
    238e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    2392:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    2396:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    239a:	4b70      	ldr	r3, [pc, #448]	; (255c <_dtoa_r+0x5ac>)
    239c:	2200      	movs	r2, #0
    239e:	f7fe fb97 	bl	ad0 <__aeabi_dcmplt>
    23a2:	2800      	cmp	r0, #0
    23a4:	d07e      	beq.n	24a4 <_dtoa_r+0x4f4>
    23a6:	9b08      	ldr	r3, [sp, #32]
    23a8:	2b00      	cmp	r3, #0
    23aa:	d07b      	beq.n	24a4 <_dtoa_r+0x4f4>
    23ac:	f1b9 0f00 	cmp.w	r9, #0
    23b0:	dd38      	ble.n	2424 <_dtoa_r+0x474>
    23b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    23b6:	4b6a      	ldr	r3, [pc, #424]	; (2560 <_dtoa_r+0x5b0>)
    23b8:	2200      	movs	r2, #0
    23ba:	f7fe f8ad 	bl	518 <__aeabi_dmul>
    23be:	e9cd 0104 	strd	r0, r1, [sp, #16]
    23c2:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
    23c6:	3701      	adds	r7, #1
    23c8:	464c      	mov	r4, r9
    23ca:	4638      	mov	r0, r7
    23cc:	f7fe f83a 	bl	444 <__aeabi_i2d>
    23d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    23d4:	f7fe f8a0 	bl	518 <__aeabi_dmul>
    23d8:	4b62      	ldr	r3, [pc, #392]	; (2564 <_dtoa_r+0x5b4>)
    23da:	2200      	movs	r2, #0
    23dc:	f7fd fee6 	bl	1ac <__adddf3>
    23e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    23e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    23e8:	9611      	str	r6, [sp, #68]	; 0x44
    23ea:	2c00      	cmp	r4, #0
    23ec:	d15d      	bne.n	24aa <_dtoa_r+0x4fa>
    23ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    23f2:	4b5d      	ldr	r3, [pc, #372]	; (2568 <_dtoa_r+0x5b8>)
    23f4:	2200      	movs	r2, #0
    23f6:	f7fd fed7 	bl	1a8 <__aeabi_dsub>
    23fa:	4602      	mov	r2, r0
    23fc:	460b      	mov	r3, r1
    23fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2402:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2404:	4633      	mov	r3, r6
    2406:	f7fe fb81 	bl	b0c <__aeabi_dcmpgt>
    240a:	2800      	cmp	r0, #0
    240c:	f040 829c 	bne.w	2948 <_dtoa_r+0x998>
    2410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2414:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2416:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    241a:	f7fe fb59 	bl	ad0 <__aeabi_dcmplt>
    241e:	2800      	cmp	r0, #0
    2420:	f040 8290 	bne.w	2944 <_dtoa_r+0x994>
    2424:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    2428:	e9cd 3404 	strd	r3, r4, [sp, #16]
    242c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    242e:	2b00      	cmp	r3, #0
    2430:	f2c0 8152 	blt.w	26d8 <_dtoa_r+0x728>
    2434:	f1ba 0f0e 	cmp.w	sl, #14
    2438:	f300 814e 	bgt.w	26d8 <_dtoa_r+0x728>
    243c:	4b45      	ldr	r3, [pc, #276]	; (2554 <_dtoa_r+0x5a4>)
    243e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    2442:	e9d3 3400 	ldrd	r3, r4, [r3]
    2446:	e9cd 3406 	strd	r3, r4, [sp, #24]
    244a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    244c:	2b00      	cmp	r3, #0
    244e:	f280 80db 	bge.w	2608 <_dtoa_r+0x658>
    2452:	9b08      	ldr	r3, [sp, #32]
    2454:	2b00      	cmp	r3, #0
    2456:	f300 80d7 	bgt.w	2608 <_dtoa_r+0x658>
    245a:	f040 8272 	bne.w	2942 <_dtoa_r+0x992>
    245e:	4b42      	ldr	r3, [pc, #264]	; (2568 <_dtoa_r+0x5b8>)
    2460:	2200      	movs	r2, #0
    2462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    2466:	f7fe f857 	bl	518 <__aeabi_dmul>
    246a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    246e:	f7fe fb43 	bl	af8 <__aeabi_dcmpge>
    2472:	9c08      	ldr	r4, [sp, #32]
    2474:	4626      	mov	r6, r4
    2476:	2800      	cmp	r0, #0
    2478:	f040 8248 	bne.w	290c <_dtoa_r+0x95c>
    247c:	9f03      	ldr	r7, [sp, #12]
    247e:	2331      	movs	r3, #49	; 0x31
    2480:	f807 3b01 	strb.w	r3, [r7], #1
    2484:	f10a 0a01 	add.w	sl, sl, #1
    2488:	e244      	b.n	2914 <_dtoa_r+0x964>
    248a:	07e2      	lsls	r2, r4, #31
    248c:	d505      	bpl.n	249a <_dtoa_r+0x4ea>
    248e:	e9d6 2300 	ldrd	r2, r3, [r6]
    2492:	f7fe f841 	bl	518 <__aeabi_dmul>
    2496:	3701      	adds	r7, #1
    2498:	2301      	movs	r3, #1
    249a:	1064      	asrs	r4, r4, #1
    249c:	3608      	adds	r6, #8
    249e:	e76d      	b.n	237c <_dtoa_r+0x3cc>
    24a0:	2702      	movs	r7, #2
    24a2:	e770      	b.n	2386 <_dtoa_r+0x3d6>
    24a4:	9c08      	ldr	r4, [sp, #32]
    24a6:	46d0      	mov	r8, sl
    24a8:	e78f      	b.n	23ca <_dtoa_r+0x41a>
    24aa:	9903      	ldr	r1, [sp, #12]
    24ac:	4b29      	ldr	r3, [pc, #164]	; (2554 <_dtoa_r+0x5a4>)
    24ae:	4421      	add	r1, r4
    24b0:	9112      	str	r1, [sp, #72]	; 0x48
    24b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    24b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    24b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    24bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    24c0:	2900      	cmp	r1, #0
    24c2:	d055      	beq.n	2570 <_dtoa_r+0x5c0>
    24c4:	4929      	ldr	r1, [pc, #164]	; (256c <_dtoa_r+0x5bc>)
    24c6:	2000      	movs	r0, #0
    24c8:	f7fe f950 	bl	76c <__aeabi_ddiv>
    24cc:	463b      	mov	r3, r7
    24ce:	4632      	mov	r2, r6
    24d0:	f7fd fe6a 	bl	1a8 <__aeabi_dsub>
    24d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    24d8:	9f03      	ldr	r7, [sp, #12]
    24da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    24de:	f7fe fb35 	bl	b4c <__aeabi_d2iz>
    24e2:	4604      	mov	r4, r0
    24e4:	f7fd ffae 	bl	444 <__aeabi_i2d>
    24e8:	4602      	mov	r2, r0
    24ea:	460b      	mov	r3, r1
    24ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    24f0:	f7fd fe5a 	bl	1a8 <__aeabi_dsub>
    24f4:	3430      	adds	r4, #48	; 0x30
    24f6:	4602      	mov	r2, r0
    24f8:	460b      	mov	r3, r1
    24fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    24fe:	f807 4b01 	strb.w	r4, [r7], #1
    2502:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    2506:	f7fe fae3 	bl	ad0 <__aeabi_dcmplt>
    250a:	2800      	cmp	r0, #0
    250c:	d174      	bne.n	25f8 <_dtoa_r+0x648>
    250e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    2512:	4912      	ldr	r1, [pc, #72]	; (255c <_dtoa_r+0x5ac>)
    2514:	2000      	movs	r0, #0
    2516:	f7fd fe47 	bl	1a8 <__aeabi_dsub>
    251a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    251e:	f7fe fad7 	bl	ad0 <__aeabi_dcmplt>
    2522:	2800      	cmp	r0, #0
    2524:	f040 80b7 	bne.w	2696 <_dtoa_r+0x6e6>
    2528:	9b12      	ldr	r3, [sp, #72]	; 0x48
    252a:	429f      	cmp	r7, r3
    252c:	f43f af7a 	beq.w	2424 <_dtoa_r+0x474>
    2530:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2534:	4b0a      	ldr	r3, [pc, #40]	; (2560 <_dtoa_r+0x5b0>)
    2536:	2200      	movs	r2, #0
    2538:	f7fd ffee 	bl	518 <__aeabi_dmul>
    253c:	4b08      	ldr	r3, [pc, #32]	; (2560 <_dtoa_r+0x5b0>)
    253e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    2542:	2200      	movs	r2, #0
    2544:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2548:	f7fd ffe6 	bl	518 <__aeabi_dmul>
    254c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2550:	e7c3      	b.n	24da <_dtoa_r+0x52a>
    2552:	bf00      	nop
    2554:	00011160 	.word	0x00011160
    2558:	00011138 	.word	0x00011138
    255c:	3ff00000 	.word	0x3ff00000
    2560:	40240000 	.word	0x40240000
    2564:	401c0000 	.word	0x401c0000
    2568:	40140000 	.word	0x40140000
    256c:	3fe00000 	.word	0x3fe00000
    2570:	4630      	mov	r0, r6
    2572:	4639      	mov	r1, r7
    2574:	f7fd ffd0 	bl	518 <__aeabi_dmul>
    2578:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    257c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    257e:	9c03      	ldr	r4, [sp, #12]
    2580:	9314      	str	r3, [sp, #80]	; 0x50
    2582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2586:	f7fe fae1 	bl	b4c <__aeabi_d2iz>
    258a:	9015      	str	r0, [sp, #84]	; 0x54
    258c:	f7fd ff5a 	bl	444 <__aeabi_i2d>
    2590:	4602      	mov	r2, r0
    2592:	460b      	mov	r3, r1
    2594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    2598:	f7fd fe06 	bl	1a8 <__aeabi_dsub>
    259c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    259e:	3330      	adds	r3, #48	; 0x30
    25a0:	f804 3b01 	strb.w	r3, [r4], #1
    25a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    25a6:	429c      	cmp	r4, r3
    25a8:	4606      	mov	r6, r0
    25aa:	460f      	mov	r7, r1
    25ac:	f04f 0200 	mov.w	r2, #0
    25b0:	d124      	bne.n	25fc <_dtoa_r+0x64c>
    25b2:	4ba4      	ldr	r3, [pc, #656]	; (2844 <_dtoa_r+0x894>)
    25b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    25b8:	f7fd fdf8 	bl	1ac <__adddf3>
    25bc:	4602      	mov	r2, r0
    25be:	460b      	mov	r3, r1
    25c0:	4630      	mov	r0, r6
    25c2:	4639      	mov	r1, r7
    25c4:	f7fe faa2 	bl	b0c <__aeabi_dcmpgt>
    25c8:	2800      	cmp	r0, #0
    25ca:	d163      	bne.n	2694 <_dtoa_r+0x6e4>
    25cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    25d0:	499c      	ldr	r1, [pc, #624]	; (2844 <_dtoa_r+0x894>)
    25d2:	2000      	movs	r0, #0
    25d4:	f7fd fde8 	bl	1a8 <__aeabi_dsub>
    25d8:	4602      	mov	r2, r0
    25da:	460b      	mov	r3, r1
    25dc:	4630      	mov	r0, r6
    25de:	4639      	mov	r1, r7
    25e0:	f7fe fa76 	bl	ad0 <__aeabi_dcmplt>
    25e4:	2800      	cmp	r0, #0
    25e6:	f43f af1d 	beq.w	2424 <_dtoa_r+0x474>
    25ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
    25ec:	1e7b      	subs	r3, r7, #1
    25ee:	9314      	str	r3, [sp, #80]	; 0x50
    25f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    25f4:	2b30      	cmp	r3, #48	; 0x30
    25f6:	d0f8      	beq.n	25ea <_dtoa_r+0x63a>
    25f8:	46c2      	mov	sl, r8
    25fa:	e03b      	b.n	2674 <_dtoa_r+0x6c4>
    25fc:	4b92      	ldr	r3, [pc, #584]	; (2848 <_dtoa_r+0x898>)
    25fe:	f7fd ff8b 	bl	518 <__aeabi_dmul>
    2602:	e9cd 0104 	strd	r0, r1, [sp, #16]
    2606:	e7bc      	b.n	2582 <_dtoa_r+0x5d2>
    2608:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    260c:	9f03      	ldr	r7, [sp, #12]
    260e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2612:	4640      	mov	r0, r8
    2614:	4649      	mov	r1, r9
    2616:	f7fe f8a9 	bl	76c <__aeabi_ddiv>
    261a:	f7fe fa97 	bl	b4c <__aeabi_d2iz>
    261e:	4604      	mov	r4, r0
    2620:	f7fd ff10 	bl	444 <__aeabi_i2d>
    2624:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2628:	f7fd ff76 	bl	518 <__aeabi_dmul>
    262c:	f104 0630 	add.w	r6, r4, #48	; 0x30
    2630:	4602      	mov	r2, r0
    2632:	460b      	mov	r3, r1
    2634:	4640      	mov	r0, r8
    2636:	4649      	mov	r1, r9
    2638:	f7fd fdb6 	bl	1a8 <__aeabi_dsub>
    263c:	f807 6b01 	strb.w	r6, [r7], #1
    2640:	9e03      	ldr	r6, [sp, #12]
    2642:	f8dd c020 	ldr.w	ip, [sp, #32]
    2646:	1bbe      	subs	r6, r7, r6
    2648:	45b4      	cmp	ip, r6
    264a:	4602      	mov	r2, r0
    264c:	460b      	mov	r3, r1
    264e:	d136      	bne.n	26be <_dtoa_r+0x70e>
    2650:	f7fd fdac 	bl	1ac <__adddf3>
    2654:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2658:	4680      	mov	r8, r0
    265a:	4689      	mov	r9, r1
    265c:	f7fe fa56 	bl	b0c <__aeabi_dcmpgt>
    2660:	bb58      	cbnz	r0, 26ba <_dtoa_r+0x70a>
    2662:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2666:	4640      	mov	r0, r8
    2668:	4649      	mov	r1, r9
    266a:	f7fe fa27 	bl	abc <__aeabi_dcmpeq>
    266e:	b108      	cbz	r0, 2674 <_dtoa_r+0x6c4>
    2670:	07e1      	lsls	r1, r4, #31
    2672:	d422      	bmi.n	26ba <_dtoa_r+0x70a>
    2674:	4628      	mov	r0, r5
    2676:	4659      	mov	r1, fp
    2678:	f00b fa1a 	bl	dab0 <_Bfree>
    267c:	2300      	movs	r3, #0
    267e:	703b      	strb	r3, [r7, #0]
    2680:	9b24      	ldr	r3, [sp, #144]	; 0x90
    2682:	f10a 0001 	add.w	r0, sl, #1
    2686:	6018      	str	r0, [r3, #0]
    2688:	9b26      	ldr	r3, [sp, #152]	; 0x98
    268a:	2b00      	cmp	r3, #0
    268c:	f43f acdd 	beq.w	204a <_dtoa_r+0x9a>
    2690:	601f      	str	r7, [r3, #0]
    2692:	e4da      	b.n	204a <_dtoa_r+0x9a>
    2694:	4627      	mov	r7, r4
    2696:	463b      	mov	r3, r7
    2698:	461f      	mov	r7, r3
    269a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    269e:	2a39      	cmp	r2, #57	; 0x39
    26a0:	d107      	bne.n	26b2 <_dtoa_r+0x702>
    26a2:	9a03      	ldr	r2, [sp, #12]
    26a4:	429a      	cmp	r2, r3
    26a6:	d1f7      	bne.n	2698 <_dtoa_r+0x6e8>
    26a8:	9903      	ldr	r1, [sp, #12]
    26aa:	2230      	movs	r2, #48	; 0x30
    26ac:	f108 0801 	add.w	r8, r8, #1
    26b0:	700a      	strb	r2, [r1, #0]
    26b2:	781a      	ldrb	r2, [r3, #0]
    26b4:	3201      	adds	r2, #1
    26b6:	701a      	strb	r2, [r3, #0]
    26b8:	e79e      	b.n	25f8 <_dtoa_r+0x648>
    26ba:	46d0      	mov	r8, sl
    26bc:	e7eb      	b.n	2696 <_dtoa_r+0x6e6>
    26be:	4b62      	ldr	r3, [pc, #392]	; (2848 <_dtoa_r+0x898>)
    26c0:	2200      	movs	r2, #0
    26c2:	f7fd ff29 	bl	518 <__aeabi_dmul>
    26c6:	2200      	movs	r2, #0
    26c8:	2300      	movs	r3, #0
    26ca:	4680      	mov	r8, r0
    26cc:	4689      	mov	r9, r1
    26ce:	f7fe f9f5 	bl	abc <__aeabi_dcmpeq>
    26d2:	2800      	cmp	r0, #0
    26d4:	d09b      	beq.n	260e <_dtoa_r+0x65e>
    26d6:	e7cd      	b.n	2674 <_dtoa_r+0x6c4>
    26d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    26da:	2a00      	cmp	r2, #0
    26dc:	f000 80d0 	beq.w	2880 <_dtoa_r+0x8d0>
    26e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    26e2:	2a01      	cmp	r2, #1
    26e4:	f300 80b2 	bgt.w	284c <_dtoa_r+0x89c>
    26e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    26ea:	2a00      	cmp	r2, #0
    26ec:	f000 80a6 	beq.w	283c <_dtoa_r+0x88c>
    26f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
    26f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    26f6:	9f06      	ldr	r7, [sp, #24]
    26f8:	9a06      	ldr	r2, [sp, #24]
    26fa:	441a      	add	r2, r3
    26fc:	9206      	str	r2, [sp, #24]
    26fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2700:	2101      	movs	r1, #1
    2702:	441a      	add	r2, r3
    2704:	4628      	mov	r0, r5
    2706:	9209      	str	r2, [sp, #36]	; 0x24
    2708:	f00b fa3a 	bl	db80 <__i2b>
    270c:	4606      	mov	r6, r0
    270e:	2f00      	cmp	r7, #0
    2710:	dd0c      	ble.n	272c <_dtoa_r+0x77c>
    2712:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2714:	2b00      	cmp	r3, #0
    2716:	dd09      	ble.n	272c <_dtoa_r+0x77c>
    2718:	42bb      	cmp	r3, r7
    271a:	9a06      	ldr	r2, [sp, #24]
    271c:	bfa8      	it	ge
    271e:	463b      	movge	r3, r7
    2720:	1ad2      	subs	r2, r2, r3
    2722:	9206      	str	r2, [sp, #24]
    2724:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2726:	1aff      	subs	r7, r7, r3
    2728:	1ad3      	subs	r3, r2, r3
    272a:	9309      	str	r3, [sp, #36]	; 0x24
    272c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    272e:	b1f3      	cbz	r3, 276e <_dtoa_r+0x7be>
    2730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2732:	2b00      	cmp	r3, #0
    2734:	f000 80a8 	beq.w	2888 <_dtoa_r+0x8d8>
    2738:	2c00      	cmp	r4, #0
    273a:	dd10      	ble.n	275e <_dtoa_r+0x7ae>
    273c:	4631      	mov	r1, r6
    273e:	4622      	mov	r2, r4
    2740:	4628      	mov	r0, r5
    2742:	f00b fadb 	bl	dcfc <__pow5mult>
    2746:	465a      	mov	r2, fp
    2748:	4601      	mov	r1, r0
    274a:	4606      	mov	r6, r0
    274c:	4628      	mov	r0, r5
    274e:	f00b fa2d 	bl	dbac <__multiply>
    2752:	4659      	mov	r1, fp
    2754:	4680      	mov	r8, r0
    2756:	4628      	mov	r0, r5
    2758:	f00b f9aa 	bl	dab0 <_Bfree>
    275c:	46c3      	mov	fp, r8
    275e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2760:	1b1a      	subs	r2, r3, r4
    2762:	d004      	beq.n	276e <_dtoa_r+0x7be>
    2764:	4659      	mov	r1, fp
    2766:	4628      	mov	r0, r5
    2768:	f00b fac8 	bl	dcfc <__pow5mult>
    276c:	4683      	mov	fp, r0
    276e:	2101      	movs	r1, #1
    2770:	4628      	mov	r0, r5
    2772:	f00b fa05 	bl	db80 <__i2b>
    2776:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2778:	2b00      	cmp	r3, #0
    277a:	4604      	mov	r4, r0
    277c:	f340 8086 	ble.w	288c <_dtoa_r+0x8dc>
    2780:	461a      	mov	r2, r3
    2782:	4601      	mov	r1, r0
    2784:	4628      	mov	r0, r5
    2786:	f00b fab9 	bl	dcfc <__pow5mult>
    278a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    278c:	2b01      	cmp	r3, #1
    278e:	4604      	mov	r4, r0
    2790:	dd7f      	ble.n	2892 <_dtoa_r+0x8e2>
    2792:	f04f 0800 	mov.w	r8, #0
    2796:	6923      	ldr	r3, [r4, #16]
    2798:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    279c:	6918      	ldr	r0, [r3, #16]
    279e:	f00e f8d9 	bl	10954 <__hi0bits>
    27a2:	f1c0 0020 	rsb	r0, r0, #32
    27a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27a8:	4418      	add	r0, r3
    27aa:	f010 001f 	ands.w	r0, r0, #31
    27ae:	f000 8092 	beq.w	28d6 <_dtoa_r+0x926>
    27b2:	f1c0 0320 	rsb	r3, r0, #32
    27b6:	2b04      	cmp	r3, #4
    27b8:	f340 808a 	ble.w	28d0 <_dtoa_r+0x920>
    27bc:	f1c0 001c 	rsb	r0, r0, #28
    27c0:	9b06      	ldr	r3, [sp, #24]
    27c2:	4403      	add	r3, r0
    27c4:	9306      	str	r3, [sp, #24]
    27c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27c8:	4403      	add	r3, r0
    27ca:	4407      	add	r7, r0
    27cc:	9309      	str	r3, [sp, #36]	; 0x24
    27ce:	9b06      	ldr	r3, [sp, #24]
    27d0:	2b00      	cmp	r3, #0
    27d2:	dd05      	ble.n	27e0 <_dtoa_r+0x830>
    27d4:	4659      	mov	r1, fp
    27d6:	461a      	mov	r2, r3
    27d8:	4628      	mov	r0, r5
    27da:	f00b fae9 	bl	ddb0 <__lshift>
    27de:	4683      	mov	fp, r0
    27e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27e2:	2b00      	cmp	r3, #0
    27e4:	dd05      	ble.n	27f2 <_dtoa_r+0x842>
    27e6:	4621      	mov	r1, r4
    27e8:	461a      	mov	r2, r3
    27ea:	4628      	mov	r0, r5
    27ec:	f00b fae0 	bl	ddb0 <__lshift>
    27f0:	4604      	mov	r4, r0
    27f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    27f4:	2b00      	cmp	r3, #0
    27f6:	d070      	beq.n	28da <_dtoa_r+0x92a>
    27f8:	4621      	mov	r1, r4
    27fa:	4658      	mov	r0, fp
    27fc:	f00e f8f7 	bl	109ee <__mcmp>
    2800:	2800      	cmp	r0, #0
    2802:	da6a      	bge.n	28da <_dtoa_r+0x92a>
    2804:	2300      	movs	r3, #0
    2806:	4659      	mov	r1, fp
    2808:	220a      	movs	r2, #10
    280a:	4628      	mov	r0, r5
    280c:	f00b f972 	bl	daf4 <__multadd>
    2810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2812:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2816:	4683      	mov	fp, r0
    2818:	2b00      	cmp	r3, #0
    281a:	f000 8194 	beq.w	2b46 <_dtoa_r+0xb96>
    281e:	4631      	mov	r1, r6
    2820:	2300      	movs	r3, #0
    2822:	220a      	movs	r2, #10
    2824:	4628      	mov	r0, r5
    2826:	f00b f965 	bl	daf4 <__multadd>
    282a:	f1b9 0f00 	cmp.w	r9, #0
    282e:	4606      	mov	r6, r0
    2830:	f300 8093 	bgt.w	295a <_dtoa_r+0x9aa>
    2834:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2836:	2b02      	cmp	r3, #2
    2838:	dc57      	bgt.n	28ea <_dtoa_r+0x93a>
    283a:	e08e      	b.n	295a <_dtoa_r+0x9aa>
    283c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    283e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    2842:	e757      	b.n	26f4 <_dtoa_r+0x744>
    2844:	3fe00000 	.word	0x3fe00000
    2848:	40240000 	.word	0x40240000
    284c:	9b08      	ldr	r3, [sp, #32]
    284e:	1e5c      	subs	r4, r3, #1
    2850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2852:	42a3      	cmp	r3, r4
    2854:	bfbf      	itttt	lt
    2856:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    2858:	940a      	strlt	r4, [sp, #40]	; 0x28
    285a:	1ae2      	sublt	r2, r4, r3
    285c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    285e:	bfb6      	itet	lt
    2860:	189b      	addlt	r3, r3, r2
    2862:	1b1c      	subge	r4, r3, r4
    2864:	930e      	strlt	r3, [sp, #56]	; 0x38
    2866:	9b08      	ldr	r3, [sp, #32]
    2868:	bfb8      	it	lt
    286a:	2400      	movlt	r4, #0
    286c:	2b00      	cmp	r3, #0
    286e:	bfb9      	ittee	lt
    2870:	9b06      	ldrlt	r3, [sp, #24]
    2872:	9a08      	ldrlt	r2, [sp, #32]
    2874:	9f06      	ldrge	r7, [sp, #24]
    2876:	9b08      	ldrge	r3, [sp, #32]
    2878:	bfbc      	itt	lt
    287a:	1a9f      	sublt	r7, r3, r2
    287c:	2300      	movlt	r3, #0
    287e:	e73b      	b.n	26f8 <_dtoa_r+0x748>
    2880:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2882:	9f06      	ldr	r7, [sp, #24]
    2884:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    2886:	e742      	b.n	270e <_dtoa_r+0x75e>
    2888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    288a:	e76b      	b.n	2764 <_dtoa_r+0x7b4>
    288c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    288e:	2b01      	cmp	r3, #1
    2890:	dc19      	bgt.n	28c6 <_dtoa_r+0x916>
    2892:	9b04      	ldr	r3, [sp, #16]
    2894:	b9bb      	cbnz	r3, 28c6 <_dtoa_r+0x916>
    2896:	9b05      	ldr	r3, [sp, #20]
    2898:	f3c3 0313 	ubfx	r3, r3, #0, #20
    289c:	b99b      	cbnz	r3, 28c6 <_dtoa_r+0x916>
    289e:	9b05      	ldr	r3, [sp, #20]
    28a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    28a4:	0d1b      	lsrs	r3, r3, #20
    28a6:	051b      	lsls	r3, r3, #20
    28a8:	b183      	cbz	r3, 28cc <_dtoa_r+0x91c>
    28aa:	9b06      	ldr	r3, [sp, #24]
    28ac:	3301      	adds	r3, #1
    28ae:	9306      	str	r3, [sp, #24]
    28b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    28b2:	3301      	adds	r3, #1
    28b4:	9309      	str	r3, [sp, #36]	; 0x24
    28b6:	f04f 0801 	mov.w	r8, #1
    28ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    28bc:	2b00      	cmp	r3, #0
    28be:	f47f af6a 	bne.w	2796 <_dtoa_r+0x7e6>
    28c2:	2001      	movs	r0, #1
    28c4:	e76f      	b.n	27a6 <_dtoa_r+0x7f6>
    28c6:	f04f 0800 	mov.w	r8, #0
    28ca:	e7f6      	b.n	28ba <_dtoa_r+0x90a>
    28cc:	4698      	mov	r8, r3
    28ce:	e7f4      	b.n	28ba <_dtoa_r+0x90a>
    28d0:	f43f af7d 	beq.w	27ce <_dtoa_r+0x81e>
    28d4:	4618      	mov	r0, r3
    28d6:	301c      	adds	r0, #28
    28d8:	e772      	b.n	27c0 <_dtoa_r+0x810>
    28da:	9b08      	ldr	r3, [sp, #32]
    28dc:	2b00      	cmp	r3, #0
    28de:	dc36      	bgt.n	294e <_dtoa_r+0x99e>
    28e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    28e2:	2b02      	cmp	r3, #2
    28e4:	dd33      	ble.n	294e <_dtoa_r+0x99e>
    28e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
    28ea:	f1b9 0f00 	cmp.w	r9, #0
    28ee:	d10d      	bne.n	290c <_dtoa_r+0x95c>
    28f0:	4621      	mov	r1, r4
    28f2:	464b      	mov	r3, r9
    28f4:	2205      	movs	r2, #5
    28f6:	4628      	mov	r0, r5
    28f8:	f00b f8fc 	bl	daf4 <__multadd>
    28fc:	4601      	mov	r1, r0
    28fe:	4604      	mov	r4, r0
    2900:	4658      	mov	r0, fp
    2902:	f00e f874 	bl	109ee <__mcmp>
    2906:	2800      	cmp	r0, #0
    2908:	f73f adb8 	bgt.w	247c <_dtoa_r+0x4cc>
    290c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    290e:	9f03      	ldr	r7, [sp, #12]
    2910:	ea6f 0a03 	mvn.w	sl, r3
    2914:	f04f 0800 	mov.w	r8, #0
    2918:	4621      	mov	r1, r4
    291a:	4628      	mov	r0, r5
    291c:	f00b f8c8 	bl	dab0 <_Bfree>
    2920:	2e00      	cmp	r6, #0
    2922:	f43f aea7 	beq.w	2674 <_dtoa_r+0x6c4>
    2926:	f1b8 0f00 	cmp.w	r8, #0
    292a:	d005      	beq.n	2938 <_dtoa_r+0x988>
    292c:	45b0      	cmp	r8, r6
    292e:	d003      	beq.n	2938 <_dtoa_r+0x988>
    2930:	4641      	mov	r1, r8
    2932:	4628      	mov	r0, r5
    2934:	f00b f8bc 	bl	dab0 <_Bfree>
    2938:	4631      	mov	r1, r6
    293a:	4628      	mov	r0, r5
    293c:	f00b f8b8 	bl	dab0 <_Bfree>
    2940:	e698      	b.n	2674 <_dtoa_r+0x6c4>
    2942:	2400      	movs	r4, #0
    2944:	4626      	mov	r6, r4
    2946:	e7e1      	b.n	290c <_dtoa_r+0x95c>
    2948:	46c2      	mov	sl, r8
    294a:	4626      	mov	r6, r4
    294c:	e596      	b.n	247c <_dtoa_r+0x4cc>
    294e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2950:	f8dd 9020 	ldr.w	r9, [sp, #32]
    2954:	2b00      	cmp	r3, #0
    2956:	f000 80fd 	beq.w	2b54 <_dtoa_r+0xba4>
    295a:	2f00      	cmp	r7, #0
    295c:	dd05      	ble.n	296a <_dtoa_r+0x9ba>
    295e:	4631      	mov	r1, r6
    2960:	463a      	mov	r2, r7
    2962:	4628      	mov	r0, r5
    2964:	f00b fa24 	bl	ddb0 <__lshift>
    2968:	4606      	mov	r6, r0
    296a:	f1b8 0f00 	cmp.w	r8, #0
    296e:	d05c      	beq.n	2a2a <_dtoa_r+0xa7a>
    2970:	6871      	ldr	r1, [r6, #4]
    2972:	4628      	mov	r0, r5
    2974:	f00b f85c 	bl	da30 <_Balloc>
    2978:	4607      	mov	r7, r0
    297a:	b928      	cbnz	r0, 2988 <_dtoa_r+0x9d8>
    297c:	4b80      	ldr	r3, [pc, #512]	; (2b80 <_dtoa_r+0xbd0>)
    297e:	4602      	mov	r2, r0
    2980:	f240 21ea 	movw	r1, #746	; 0x2ea
    2984:	f7ff bb28 	b.w	1fd8 <_dtoa_r+0x28>
    2988:	6932      	ldr	r2, [r6, #16]
    298a:	3202      	adds	r2, #2
    298c:	0092      	lsls	r2, r2, #2
    298e:	f106 010c 	add.w	r1, r6, #12
    2992:	300c      	adds	r0, #12
    2994:	f00d feee 	bl	10774 <memcpy>
    2998:	2201      	movs	r2, #1
    299a:	4639      	mov	r1, r7
    299c:	4628      	mov	r0, r5
    299e:	f00b fa07 	bl	ddb0 <__lshift>
    29a2:	9b03      	ldr	r3, [sp, #12]
    29a4:	3301      	adds	r3, #1
    29a6:	9308      	str	r3, [sp, #32]
    29a8:	9b03      	ldr	r3, [sp, #12]
    29aa:	444b      	add	r3, r9
    29ac:	930a      	str	r3, [sp, #40]	; 0x28
    29ae:	9b04      	ldr	r3, [sp, #16]
    29b0:	f003 0301 	and.w	r3, r3, #1
    29b4:	46b0      	mov	r8, r6
    29b6:	9309      	str	r3, [sp, #36]	; 0x24
    29b8:	4606      	mov	r6, r0
    29ba:	9b08      	ldr	r3, [sp, #32]
    29bc:	4621      	mov	r1, r4
    29be:	3b01      	subs	r3, #1
    29c0:	4658      	mov	r0, fp
    29c2:	9304      	str	r3, [sp, #16]
    29c4:	f00e f90d 	bl	10be2 <quorem>
    29c8:	4603      	mov	r3, r0
    29ca:	3330      	adds	r3, #48	; 0x30
    29cc:	9006      	str	r0, [sp, #24]
    29ce:	4641      	mov	r1, r8
    29d0:	4658      	mov	r0, fp
    29d2:	930b      	str	r3, [sp, #44]	; 0x2c
    29d4:	f00e f80b 	bl	109ee <__mcmp>
    29d8:	4632      	mov	r2, r6
    29da:	4681      	mov	r9, r0
    29dc:	4621      	mov	r1, r4
    29de:	4628      	mov	r0, r5
    29e0:	f00b fa56 	bl	de90 <__mdiff>
    29e4:	68c2      	ldr	r2, [r0, #12]
    29e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    29e8:	4607      	mov	r7, r0
    29ea:	bb02      	cbnz	r2, 2a2e <_dtoa_r+0xa7e>
    29ec:	4601      	mov	r1, r0
    29ee:	4658      	mov	r0, fp
    29f0:	f00d fffd 	bl	109ee <__mcmp>
    29f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    29f6:	4602      	mov	r2, r0
    29f8:	4639      	mov	r1, r7
    29fa:	4628      	mov	r0, r5
    29fc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    2a00:	f00b f856 	bl	dab0 <_Bfree>
    2a04:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2a06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2a08:	9f08      	ldr	r7, [sp, #32]
    2a0a:	ea43 0102 	orr.w	r1, r3, r2
    2a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2a10:	430b      	orrs	r3, r1
    2a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2a14:	d10d      	bne.n	2a32 <_dtoa_r+0xa82>
    2a16:	2b39      	cmp	r3, #57	; 0x39
    2a18:	d029      	beq.n	2a6e <_dtoa_r+0xabe>
    2a1a:	f1b9 0f00 	cmp.w	r9, #0
    2a1e:	dd01      	ble.n	2a24 <_dtoa_r+0xa74>
    2a20:	9b06      	ldr	r3, [sp, #24]
    2a22:	3331      	adds	r3, #49	; 0x31
    2a24:	9a04      	ldr	r2, [sp, #16]
    2a26:	7013      	strb	r3, [r2, #0]
    2a28:	e776      	b.n	2918 <_dtoa_r+0x968>
    2a2a:	4630      	mov	r0, r6
    2a2c:	e7b9      	b.n	29a2 <_dtoa_r+0x9f2>
    2a2e:	2201      	movs	r2, #1
    2a30:	e7e2      	b.n	29f8 <_dtoa_r+0xa48>
    2a32:	f1b9 0f00 	cmp.w	r9, #0
    2a36:	db06      	blt.n	2a46 <_dtoa_r+0xa96>
    2a38:	9922      	ldr	r1, [sp, #136]	; 0x88
    2a3a:	ea41 0909 	orr.w	r9, r1, r9
    2a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
    2a40:	ea59 0101 	orrs.w	r1, r9, r1
    2a44:	d120      	bne.n	2a88 <_dtoa_r+0xad8>
    2a46:	2a00      	cmp	r2, #0
    2a48:	ddec      	ble.n	2a24 <_dtoa_r+0xa74>
    2a4a:	4659      	mov	r1, fp
    2a4c:	2201      	movs	r2, #1
    2a4e:	4628      	mov	r0, r5
    2a50:	9308      	str	r3, [sp, #32]
    2a52:	f00b f9ad 	bl	ddb0 <__lshift>
    2a56:	4621      	mov	r1, r4
    2a58:	4683      	mov	fp, r0
    2a5a:	f00d ffc8 	bl	109ee <__mcmp>
    2a5e:	2800      	cmp	r0, #0
    2a60:	9b08      	ldr	r3, [sp, #32]
    2a62:	dc02      	bgt.n	2a6a <_dtoa_r+0xaba>
    2a64:	d1de      	bne.n	2a24 <_dtoa_r+0xa74>
    2a66:	07da      	lsls	r2, r3, #31
    2a68:	d5dc      	bpl.n	2a24 <_dtoa_r+0xa74>
    2a6a:	2b39      	cmp	r3, #57	; 0x39
    2a6c:	d1d8      	bne.n	2a20 <_dtoa_r+0xa70>
    2a6e:	9a04      	ldr	r2, [sp, #16]
    2a70:	2339      	movs	r3, #57	; 0x39
    2a72:	7013      	strb	r3, [r2, #0]
    2a74:	463b      	mov	r3, r7
    2a76:	461f      	mov	r7, r3
    2a78:	3b01      	subs	r3, #1
    2a7a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    2a7e:	2a39      	cmp	r2, #57	; 0x39
    2a80:	d050      	beq.n	2b24 <_dtoa_r+0xb74>
    2a82:	3201      	adds	r2, #1
    2a84:	701a      	strb	r2, [r3, #0]
    2a86:	e747      	b.n	2918 <_dtoa_r+0x968>
    2a88:	2a00      	cmp	r2, #0
    2a8a:	dd03      	ble.n	2a94 <_dtoa_r+0xae4>
    2a8c:	2b39      	cmp	r3, #57	; 0x39
    2a8e:	d0ee      	beq.n	2a6e <_dtoa_r+0xabe>
    2a90:	3301      	adds	r3, #1
    2a92:	e7c7      	b.n	2a24 <_dtoa_r+0xa74>
    2a94:	9a08      	ldr	r2, [sp, #32]
    2a96:	990a      	ldr	r1, [sp, #40]	; 0x28
    2a98:	f802 3c01 	strb.w	r3, [r2, #-1]
    2a9c:	428a      	cmp	r2, r1
    2a9e:	d02a      	beq.n	2af6 <_dtoa_r+0xb46>
    2aa0:	4659      	mov	r1, fp
    2aa2:	2300      	movs	r3, #0
    2aa4:	220a      	movs	r2, #10
    2aa6:	4628      	mov	r0, r5
    2aa8:	f00b f824 	bl	daf4 <__multadd>
    2aac:	45b0      	cmp	r8, r6
    2aae:	4683      	mov	fp, r0
    2ab0:	f04f 0300 	mov.w	r3, #0
    2ab4:	f04f 020a 	mov.w	r2, #10
    2ab8:	4641      	mov	r1, r8
    2aba:	4628      	mov	r0, r5
    2abc:	d107      	bne.n	2ace <_dtoa_r+0xb1e>
    2abe:	f00b f819 	bl	daf4 <__multadd>
    2ac2:	4680      	mov	r8, r0
    2ac4:	4606      	mov	r6, r0
    2ac6:	9b08      	ldr	r3, [sp, #32]
    2ac8:	3301      	adds	r3, #1
    2aca:	9308      	str	r3, [sp, #32]
    2acc:	e775      	b.n	29ba <_dtoa_r+0xa0a>
    2ace:	f00b f811 	bl	daf4 <__multadd>
    2ad2:	4631      	mov	r1, r6
    2ad4:	4680      	mov	r8, r0
    2ad6:	2300      	movs	r3, #0
    2ad8:	220a      	movs	r2, #10
    2ada:	4628      	mov	r0, r5
    2adc:	f00b f80a 	bl	daf4 <__multadd>
    2ae0:	4606      	mov	r6, r0
    2ae2:	e7f0      	b.n	2ac6 <_dtoa_r+0xb16>
    2ae4:	f1b9 0f00 	cmp.w	r9, #0
    2ae8:	9a03      	ldr	r2, [sp, #12]
    2aea:	bfcc      	ite	gt
    2aec:	464f      	movgt	r7, r9
    2aee:	2701      	movle	r7, #1
    2af0:	4417      	add	r7, r2
    2af2:	f04f 0800 	mov.w	r8, #0
    2af6:	4659      	mov	r1, fp
    2af8:	2201      	movs	r2, #1
    2afa:	4628      	mov	r0, r5
    2afc:	9308      	str	r3, [sp, #32]
    2afe:	f00b f957 	bl	ddb0 <__lshift>
    2b02:	4621      	mov	r1, r4
    2b04:	4683      	mov	fp, r0
    2b06:	f00d ff72 	bl	109ee <__mcmp>
    2b0a:	2800      	cmp	r0, #0
    2b0c:	dcb2      	bgt.n	2a74 <_dtoa_r+0xac4>
    2b0e:	d102      	bne.n	2b16 <_dtoa_r+0xb66>
    2b10:	9b08      	ldr	r3, [sp, #32]
    2b12:	07db      	lsls	r3, r3, #31
    2b14:	d4ae      	bmi.n	2a74 <_dtoa_r+0xac4>
    2b16:	463b      	mov	r3, r7
    2b18:	461f      	mov	r7, r3
    2b1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    2b1e:	2a30      	cmp	r2, #48	; 0x30
    2b20:	d0fa      	beq.n	2b18 <_dtoa_r+0xb68>
    2b22:	e6f9      	b.n	2918 <_dtoa_r+0x968>
    2b24:	9a03      	ldr	r2, [sp, #12]
    2b26:	429a      	cmp	r2, r3
    2b28:	d1a5      	bne.n	2a76 <_dtoa_r+0xac6>
    2b2a:	f10a 0a01 	add.w	sl, sl, #1
    2b2e:	2331      	movs	r3, #49	; 0x31
    2b30:	e779      	b.n	2a26 <_dtoa_r+0xa76>
    2b32:	4b14      	ldr	r3, [pc, #80]	; (2b84 <_dtoa_r+0xbd4>)
    2b34:	f7ff baa7 	b.w	2086 <_dtoa_r+0xd6>
    2b38:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2b3a:	2b00      	cmp	r3, #0
    2b3c:	f47f aa80 	bne.w	2040 <_dtoa_r+0x90>
    2b40:	4b11      	ldr	r3, [pc, #68]	; (2b88 <_dtoa_r+0xbd8>)
    2b42:	f7ff baa0 	b.w	2086 <_dtoa_r+0xd6>
    2b46:	f1b9 0f00 	cmp.w	r9, #0
    2b4a:	dc03      	bgt.n	2b54 <_dtoa_r+0xba4>
    2b4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    2b4e:	2b02      	cmp	r3, #2
    2b50:	f73f aecb 	bgt.w	28ea <_dtoa_r+0x93a>
    2b54:	9f03      	ldr	r7, [sp, #12]
    2b56:	4621      	mov	r1, r4
    2b58:	4658      	mov	r0, fp
    2b5a:	f00e f842 	bl	10be2 <quorem>
    2b5e:	f100 0330 	add.w	r3, r0, #48	; 0x30
    2b62:	f807 3b01 	strb.w	r3, [r7], #1
    2b66:	9a03      	ldr	r2, [sp, #12]
    2b68:	1aba      	subs	r2, r7, r2
    2b6a:	4591      	cmp	r9, r2
    2b6c:	ddba      	ble.n	2ae4 <_dtoa_r+0xb34>
    2b6e:	4659      	mov	r1, fp
    2b70:	2300      	movs	r3, #0
    2b72:	220a      	movs	r2, #10
    2b74:	4628      	mov	r0, r5
    2b76:	f00a ffbd 	bl	daf4 <__multadd>
    2b7a:	4683      	mov	fp, r0
    2b7c:	e7eb      	b.n	2b56 <_dtoa_r+0xba6>
    2b7e:	bf00      	nop
    2b80:	0001357a 	.word	0x0001357a
    2b84:	00013607 	.word	0x00013607
    2b88:	000135fa 	.word	0x000135fa

00002b8c <uart_cb>:
/* UART callback implementation */
/* Note that callback functions are executed in the scope of interrupt handlers. */
/* They run asynchronously after hardware/software interrupts and have a higher priority than all threads */
/* Should be kept as short and simple as possible. Heavier processing should be deferred to a task with suitable priority*/
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
    2b8c:	b510      	push	{r4, lr}
    int err;

    switch (evt->type) {
    2b8e:	780b      	ldrb	r3, [r1, #0]
    2b90:	2b06      	cmp	r3, #6
    2b92:	d855      	bhi.n	2c40 <uart_cb+0xb4>
    2b94:	e8df f003 	tbb	[pc, r3]
    2b98:	310c0804 	.word	0x310c0804
    2b9c:	3935      	.short	0x3935
    2b9e:	50          	.byte	0x50
    2b9f:	00          	.byte	0x00
	
        case UART_TX_DONE:
		    printk("UART_TX_DONE event \n\r");
    2ba0:	4829      	ldr	r0, [pc, #164]	; (2c48 <uart_cb+0xbc>)
    2ba2:	f00c fa53 	bl	f04c <printk>
	    default:
            printk("UART: unknown event \n\r");
		    break;
    }
    
}
    2ba6:	bd10      	pop	{r4, pc}
	    	printk("UART_TX_ABORTED event \n\r");
    2ba8:	4828      	ldr	r0, [pc, #160]	; (2c4c <uart_cb+0xc0>)
    2baa:	f00c fa4f 	bl	f04c <printk>
		    break;
    2bae:	e7fa      	b.n	2ba6 <uart_cb+0x1a>
    2bb0:	460c      	mov	r4, r1
		    printk("UART_RX_RDY event \n\r");
    2bb2:	4827      	ldr	r0, [pc, #156]	; (2c50 <uart_cb+0xc4>)
    2bb4:	f00c fa4a 	bl	f04c <printk>
            printk("Received %d bytes. %d\n", evt->data.rx.len, evt->data.rx.offset);
    2bb8:	68a2      	ldr	r2, [r4, #8]
    2bba:	68e1      	ldr	r1, [r4, #12]
    2bbc:	4825      	ldr	r0, [pc, #148]	; (2c54 <uart_cb+0xc8>)
    2bbe:	f00c fa45 	bl	f04c <printk>
            if(evt->data.rx.offset + evt->data.rx.len > RXBUF_SIZE){
    2bc2:	68a3      	ldr	r3, [r4, #8]
    2bc4:	68e2      	ldr	r2, [r4, #12]
    2bc6:	1899      	adds	r1, r3, r2
    2bc8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
    2bcc:	d80f      	bhi.n	2bee <uart_cb+0x62>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    2bce:	4922      	ldr	r1, [pc, #136]	; (2c58 <uart_cb+0xcc>)
    2bd0:	4419      	add	r1, r3
    2bd2:	4822      	ldr	r0, [pc, #136]	; (2c5c <uart_cb+0xd0>)
    2bd4:	4418      	add	r0, r3
    2bd6:	f00d fdcd 	bl	10774 <memcpy>
            if(evt->data.rx.offset + evt->data.rx.len == RXBUF_SIZE){
    2bda:	68a3      	ldr	r3, [r4, #8]
    2bdc:	68e2      	ldr	r2, [r4, #12]
    2bde:	4413      	add	r3, r2
    2be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    2be4:	d1df      	bne.n	2ba6 <uart_cb+0x1a>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2be6:	481e      	ldr	r0, [pc, #120]	; (2c60 <uart_cb+0xd4>)
    2be8:	f008 fa1c 	bl	b024 <z_impl_k_sem_give>
}
    2bec:	e7db      	b.n	2ba6 <uart_cb+0x1a>
                printk("Error. Received more data than expected for %d x %d \n", IMGWIDTH, IMGWIDTH);
    2bee:	2280      	movs	r2, #128	; 0x80
    2bf0:	4611      	mov	r1, r2
    2bf2:	481c      	ldr	r0, [pc, #112]	; (2c64 <uart_cb+0xd8>)
    2bf4:	f00c fa2a 	bl	f04c <printk>
                break;
    2bf8:	e7d5      	b.n	2ba6 <uart_cb+0x1a>
		    printk("UART_RX_BUF_REQUEST event \n\r");
    2bfa:	481b      	ldr	r0, [pc, #108]	; (2c68 <uart_cb+0xdc>)
    2bfc:	f00c fa26 	bl	f04c <printk>
		    break;
    2c00:	e7d1      	b.n	2ba6 <uart_cb+0x1a>
		    printk("UART_RX_BUF_RELEASED event \n\r");
    2c02:	481a      	ldr	r0, [pc, #104]	; (2c6c <uart_cb+0xe0>)
    2c04:	f00c fa22 	bl	f04c <printk>
		    break;
    2c08:	e7cd      	b.n	2ba6 <uart_cb+0x1a>
            printk("UART_RX_DISABLED event \n\r");
    2c0a:	4819      	ldr	r0, [pc, #100]	; (2c70 <uart_cb+0xe4>)
    2c0c:	f00c fa1e 	bl	f04c <printk>
		    err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf),RX_TIMEOUT);
    2c10:	4b18      	ldr	r3, [pc, #96]	; (2c74 <uart_cb+0xe8>)
    2c12:	6818      	ldr	r0, [r3, #0]
static inline int z_impl_uart_rx_enable(const struct device *dev,
					uint8_t *buf,
					size_t len, int32_t timeout)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
    2c14:	6883      	ldr	r3, [r0, #8]
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
    2c16:	68dc      	ldr	r4, [r3, #12]
    2c18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2c1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2c20:	490d      	ldr	r1, [pc, #52]	; (2c58 <uart_cb+0xcc>)
    2c22:	47a0      	blx	r4
            if (err) {
    2c24:	4601      	mov	r1, r0
    2c26:	2800      	cmp	r0, #0
    2c28:	d0bd      	beq.n	2ba6 <uart_cb+0x1a>
                printk("uart_rx_enable() error. Error code:%d\n\r",err);
    2c2a:	4813      	ldr	r0, [pc, #76]	; (2c78 <uart_cb+0xec>)
    2c2c:	f00c fa0e 	bl	f04c <printk>
                exit(FATAL_ERR);                
    2c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2c34:	f00a fd16 	bl	d664 <exit>
		    printk("UART_RX_STOPPED event \n\r");
    2c38:	4810      	ldr	r0, [pc, #64]	; (2c7c <uart_cb+0xf0>)
    2c3a:	f00c fa07 	bl	f04c <printk>
		    break;
    2c3e:	e7b2      	b.n	2ba6 <uart_cb+0x1a>
            printk("UART: unknown event \n\r");
    2c40:	480f      	ldr	r0, [pc, #60]	; (2c80 <uart_cb+0xf4>)
    2c42:	f00c fa03 	bl	f04c <printk>
}
    2c46:	e7ae      	b.n	2ba6 <uart_cb+0x1a>
    2c48:	00011228 	.word	0x00011228
    2c4c:	00011240 	.word	0x00011240
    2c50:	0001125c 	.word	0x0001125c
    2c54:	00011274 	.word	0x00011274
    2c58:	20004944 	.word	0x20004944
    2c5c:	20008944 	.word	0x20008944
    2c60:	2000c944 	.word	0x2000c944
    2c64:	0001128c 	.word	0x0001128c
    2c68:	000112c4 	.word	0x000112c4
    2c6c:	000112e4 	.word	0x000112e4
    2c70:	00011304 	.word	0x00011304
    2c74:	2000c9a8 	.word	0x2000c9a8
    2c78:	00011320 	.word	0x00011320
    2c7c:	00011348 	.word	0x00011348
    2c80:	00011364 	.word	0x00011364

00002c84 <thread_receive_image_code>:
{
    2c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    printk("Thread receive_image init\n");
    2c88:	4841      	ldr	r0, [pc, #260]	; (2d90 <thread_receive_image_code+0x10c>)
    2c8a:	f00c f9df 	bl	f04c <printk>
	return z_impl_k_uptime_ticks();
    2c8e:	f00d fd15 	bl	106bc <z_impl_k_uptime_ticks>
    int64_t release_time=0, fin_time=0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    2c92:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
    2c96:	f04f 0800 	mov.w	r8, #0
    2c9a:	464f      	mov	r7, r9
    2c9c:	4646      	mov	r6, r8
    2c9e:	4644      	mov	r4, r8
    2ca0:	4645      	mov	r5, r8
    2ca2:	e043      	b.n	2d2c <thread_receive_image_code+0xa8>
            img[i] = (uint8_t)rx_chars[i];
    2ca4:	4a3b      	ldr	r2, [pc, #236]	; (2d94 <thread_receive_image_code+0x110>)
    2ca6:	5cd2      	ldrb	r2, [r2, r3]
    2ca8:	54c2      	strb	r2, [r0, r3]
        for(int i = 0; i < RXBUF_SIZE; i++){
    2caa:	3301      	adds	r3, #1
    2cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    2cb0:	dbf8      	blt.n	2ca4 <thread_receive_image_code+0x20>
        put_mes((void*)img, image_cab);
    2cb2:	4b39      	ldr	r3, [pc, #228]	; (2d98 <thread_receive_image_code+0x114>)
    2cb4:	6819      	ldr	r1, [r3, #0]
    2cb6:	f00c f90f 	bl	eed8 <put_mes>
	z_impl_k_sem_give(sem);
    2cba:	4838      	ldr	r0, [pc, #224]	; (2d9c <thread_receive_image_code+0x118>)
    2cbc:	f008 f9b2 	bl	b024 <z_impl_k_sem_give>
    2cc0:	4837      	ldr	r0, [pc, #220]	; (2da0 <thread_receive_image_code+0x11c>)
    2cc2:	f008 f9af 	bl	b024 <z_impl_k_sem_give>
    2cc6:	4837      	ldr	r0, [pc, #220]	; (2da4 <thread_receive_image_code+0x120>)
    2cc8:	f008 f9ac 	bl	b024 <z_impl_k_sem_give>
        irq_unlock(key4);
    2ccc:	4b36      	ldr	r3, [pc, #216]	; (2da8 <thread_receive_image_code+0x124>)
    2cce:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2cd0:	f383 8811 	msr	BASEPRI, r3
    2cd4:	f3bf 8f6f 	isb	sy
	return z_impl_k_uptime_ticks();
    2cd8:	f00d fcf0 	bl	106bc <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    2cdc:	014a      	lsls	r2, r1, #5
    2cde:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    2ce2:	0143      	lsls	r3, r0, #5
    2ce4:	1a1b      	subs	r3, r3, r0
    2ce6:	eb62 0201 	sbc.w	r2, r2, r1
    2cea:	0092      	lsls	r2, r2, #2
    2cec:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    2cf0:	009b      	lsls	r3, r3, #2
    2cf2:	181b      	adds	r3, r3, r0
    2cf4:	eb42 0201 	adc.w	r2, r2, r1
    2cf8:	00d2      	lsls	r2, r2, #3
    2cfa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    2cfe:	f3c3 3310 	ubfx	r3, r3, #12, #17
    2d02:	0bd1      	lsrs	r1, r2, #15
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
    2d04:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        if (fin_time - t_prev < t_min)
    2d08:	1b1c      	subs	r4, r3, r4
    2d0a:	eb61 0505 	sbc.w	r5, r1, r5
    2d0e:	42bc      	cmp	r4, r7
    2d10:	eb75 0206 	sbcs.w	r2, r5, r6
    2d14:	db06      	blt.n	2d24 <thread_receive_image_code+0xa0>
        else if (fin_time - t_prev > t_max)
    2d16:	45a1      	cmp	r9, r4
    2d18:	eb78 0205 	sbcs.w	r2, r8, r5
    2d1c:	da04      	bge.n	2d28 <thread_receive_image_code+0xa4>
            t_max = fin_time - t_prev;
    2d1e:	46a1      	mov	r9, r4
    2d20:	46a8      	mov	r8, r5
    2d22:	e001      	b.n	2d28 <thread_receive_image_code+0xa4>
            t_min = fin_time - t_prev;
    2d24:	4627      	mov	r7, r4
    2d26:	462e      	mov	r6, r5
        t_prev = fin_time;
    2d28:	461c      	mov	r4, r3
    2d2a:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
    2d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2d34:	481d      	ldr	r0, [pc, #116]	; (2dac <thread_receive_image_code+0x128>)
    2d36:	f008 f9b9 	bl	b0ac <z_impl_k_sem_take>
	__asm__ volatile(
    2d3a:	f04f 0320 	mov.w	r3, #32
    2d3e:	f3ef 8211 	mrs	r2, BASEPRI
    2d42:	f383 8812 	msr	BASEPRI_MAX, r3
    2d46:	f3bf 8f6f 	isb	sy
        key4 = irq_lock();
    2d4a:	4b17      	ldr	r3, [pc, #92]	; (2da8 <thread_receive_image_code+0x124>)
    2d4c:	601a      	str	r2, [r3, #0]
	return z_impl_k_uptime_ticks();
    2d4e:	f00d fcb5 	bl	106bc <z_impl_k_uptime_ticks>
    2d52:	014a      	lsls	r2, r1, #5
    2d54:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    2d58:	0143      	lsls	r3, r0, #5
    2d5a:	1a1b      	subs	r3, r3, r0
    2d5c:	eb62 0201 	sbc.w	r2, r2, r1
    2d60:	0092      	lsls	r2, r2, #2
    2d62:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    2d66:	009b      	lsls	r3, r3, #2
    2d68:	181b      	adds	r3, r3, r0
    2d6a:	eb42 0201 	adc.w	r2, r2, r1
    2d6e:	00d1      	lsls	r1, r2, #3
    2d70:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
    2d74:	f3c3 3310 	ubfx	r3, r3, #12, #17
        printk("$Receive image -> %lld\n", (long long) k_uptime_get());
    2d78:	ea43 4241 	orr.w	r2, r3, r1, lsl #17
    2d7c:	0bcb      	lsrs	r3, r1, #15
    2d7e:	480c      	ldr	r0, [pc, #48]	; (2db0 <thread_receive_image_code+0x12c>)
    2d80:	f00c f964 	bl	f04c <printk>
        uint8_t * img = (uint8_t*)reserve(image_cab);
    2d84:	4b04      	ldr	r3, [pc, #16]	; (2d98 <thread_receive_image_code+0x114>)
    2d86:	6818      	ldr	r0, [r3, #0]
    2d88:	f00c f884 	bl	ee94 <reserve>
        for(int i = 0; i < RXBUF_SIZE; i++){
    2d8c:	2300      	movs	r3, #0
    2d8e:	e78d      	b.n	2cac <thread_receive_image_code+0x28>
    2d90:	0001137c 	.word	0x0001137c
    2d94:	20008944 	.word	0x20008944
    2d98:	20004930 	.word	0x20004930
    2d9c:	2000c954 	.word	0x2000c954
    2da0:	2000c974 	.word	0x2000c974
    2da4:	2000c964 	.word	0x2000c964
    2da8:	20004940 	.word	0x20004940
    2dac:	2000c944 	.word	0x2000c944
    2db0:	00011398 	.word	0x00011398

00002db4 <thread_output_code>:
{
    2db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    printk("Thread output init\n");
    2db8:	482b      	ldr	r0, [pc, #172]	; (2e68 <thread_output_code+0xb4>)
    2dba:	f00c f947 	bl	f04c <printk>
    2dbe:	f00d fc7d 	bl	106bc <z_impl_k_uptime_ticks>
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    2dc2:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
    2dc6:	f04f 0800 	mov.w	r8, #0
    2dca:	464f      	mov	r7, r9
    2dcc:	4646      	mov	r6, r8
    2dce:	4644      	mov	r4, r8
    2dd0:	4645      	mov	r5, r8
    2dd2:	e005      	b.n	2de0 <thread_output_code+0x2c>
        printk("\tCloseby obstacles detected: %s\n\r", nearobs_output==1? "Yes" : "No");
    2dd4:	4925      	ldr	r1, [pc, #148]	; (2e6c <thread_output_code+0xb8>)
    2dd6:	e00f      	b.n	2df8 <thread_output_code+0x44>
            t_min = fin_time - t_prev;
    2dd8:	4627      	mov	r7, r4
    2dda:	462e      	mov	r6, r5
        t_prev = fin_time;
    2ddc:	461c      	mov	r4, r3
    2dde:	4615      	mov	r5, r2
	return z_impl_k_sem_take(sem, timeout);
    2de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2de4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2de8:	4821      	ldr	r0, [pc, #132]	; (2e70 <thread_output_code+0xbc>)
    2dea:	f008 f95f 	bl	b0ac <z_impl_k_sem_take>
        printk("\tCloseby obstacles detected: %s\n\r", nearobs_output==1? "Yes" : "No");
    2dee:	4b21      	ldr	r3, [pc, #132]	; (2e74 <thread_output_code+0xc0>)
    2df0:	781b      	ldrb	r3, [r3, #0]
    2df2:	2b01      	cmp	r3, #1
    2df4:	d0ee      	beq.n	2dd4 <thread_output_code+0x20>
    2df6:	4920      	ldr	r1, [pc, #128]	; (2e78 <thread_output_code+0xc4>)
    2df8:	4820      	ldr	r0, [pc, #128]	; (2e7c <thread_output_code+0xc8>)
    2dfa:	f00c f927 	bl	f04c <printk>
        printk("\tRobot position=%s, guideline angle=%s\n\r", orientation_output[0], orientation_output[1]);
    2dfe:	4920      	ldr	r1, [pc, #128]	; (2e80 <thread_output_code+0xcc>)
    2e00:	f101 020a 	add.w	r2, r1, #10
    2e04:	481f      	ldr	r0, [pc, #124]	; (2e84 <thread_output_code+0xd0>)
    2e06:	f00c f921 	bl	f04c <printk>
        printk("\t%d obstacles detected\n\r", obscount_output);
    2e0a:	4b1f      	ldr	r3, [pc, #124]	; (2e88 <thread_output_code+0xd4>)
    2e0c:	8819      	ldrh	r1, [r3, #0]
    2e0e:	481f      	ldr	r0, [pc, #124]	; (2e8c <thread_output_code+0xd8>)
    2e10:	f00c f91c 	bl	f04c <printk>
	return z_impl_k_uptime_ticks();
    2e14:	f00d fc52 	bl	106bc <z_impl_k_uptime_ticks>
    2e18:	4684      	mov	ip, r0
    2e1a:	014a      	lsls	r2, r1, #5
    2e1c:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    2e20:	0140      	lsls	r0, r0, #5
    2e22:	ebb0 000c 	subs.w	r0, r0, ip
    2e26:	eb62 0301 	sbc.w	r3, r2, r1
    2e2a:	009b      	lsls	r3, r3, #2
    2e2c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
    2e30:	0080      	lsls	r0, r0, #2
    2e32:	eb10 000c 	adds.w	r0, r0, ip
    2e36:	eb43 0301 	adc.w	r3, r3, r1
    2e3a:	00db      	lsls	r3, r3, #3
    2e3c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    2e40:	f3c0 3010 	ubfx	r0, r0, #12, #17
    2e44:	0bda      	lsrs	r2, r3, #15
    2e46:	ea40 4343 	orr.w	r3, r0, r3, lsl #17
        if (fin_time - t_prev < t_min)
    2e4a:	1b1c      	subs	r4, r3, r4
    2e4c:	eb62 0505 	sbc.w	r5, r2, r5
    2e50:	42bc      	cmp	r4, r7
    2e52:	eb75 0106 	sbcs.w	r1, r5, r6
    2e56:	dbbf      	blt.n	2dd8 <thread_output_code+0x24>
        else if (fin_time - t_prev > t_max)
    2e58:	45a1      	cmp	r9, r4
    2e5a:	eb78 0105 	sbcs.w	r1, r8, r5
    2e5e:	dabd      	bge.n	2ddc <thread_output_code+0x28>
            t_max = fin_time - t_prev;
    2e60:	46a1      	mov	r9, r4
    2e62:	46a8      	mov	r8, r5
    2e64:	e7ba      	b.n	2ddc <thread_output_code+0x28>
    2e66:	bf00      	nop
    2e68:	000113b8 	.word	0x000113b8
    2e6c:	000113b4 	.word	0x000113b4
    2e70:	2000c984 	.word	0x2000c984
    2e74:	2000d716 	.word	0x2000d716
    2e78:	000113b0 	.word	0x000113b0
    2e7c:	000113cc 	.word	0x000113cc
    2e80:	20000000 	.word	0x20000000
    2e84:	000113f0 	.word	0x000113f0
    2e88:	2000d714 	.word	0x2000d714
    2e8c:	0001141c 	.word	0x0001141c

00002e90 <main>:
{
    2e90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e92:	b089      	sub	sp, #36	; 0x24
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    2e94:	4870      	ldr	r0, [pc, #448]	; (3058 <main+0x1c8>)
    2e96:	f007 f9a9 	bl	a1ec <z_impl_device_get_binding>
    uart_dev= device_get_binding(DT_LABEL(UART_NODE));
    2e9a:	4a70      	ldr	r2, [pc, #448]	; (305c <main+0x1cc>)
    2e9c:	6010      	str	r0, [r2, #0]
    if (uart_dev == NULL) {
    2e9e:	b340      	cbz	r0, 2ef2 <main+0x62>
        printk("UART binding successful\n\r");
    2ea0:	486f      	ldr	r0, [pc, #444]	; (3060 <main+0x1d0>)
    2ea2:	f00c f8d3 	bl	f04c <printk>
    err = uart_configure(uart_dev, &uart_cfg);
    2ea6:	4b6d      	ldr	r3, [pc, #436]	; (305c <main+0x1cc>)
    2ea8:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    2eaa:	6883      	ldr	r3, [r0, #8]
	if (api->configure == NULL) {
    2eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2eae:	b32b      	cbz	r3, 2efc <main+0x6c>
	return api->configure(dev, cfg);
    2eb0:	496c      	ldr	r1, [pc, #432]	; (3064 <main+0x1d4>)
    2eb2:	4798      	blx	r3
    2eb4:	4603      	mov	r3, r0
    if (err == -ENOSYS) { /* If invalid configuration */
    2eb6:	f113 0f58 	cmn.w	r3, #88	; 0x58
    2eba:	d022      	beq.n	2f02 <main+0x72>
    err =  uart_rx_enable(uart_dev ,rx_buf,sizeof(rx_buf),RX_TIMEOUT);
    2ebc:	4b67      	ldr	r3, [pc, #412]	; (305c <main+0x1cc>)
    2ebe:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    2ec0:	6883      	ldr	r3, [r0, #8]
	return api->rx_enable(dev, buf, len, timeout);
    2ec2:	68dc      	ldr	r4, [r3, #12]
    2ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2ec8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2ecc:	4966      	ldr	r1, [pc, #408]	; (3068 <main+0x1d8>)
    2ece:	47a0      	blx	r4
    if (err) {
    2ed0:	4601      	mov	r1, r0
    2ed2:	b9d0      	cbnz	r0, 2f0a <main+0x7a>
    err = uart_callback_set(uart_dev, uart_cb, NULL);
    2ed4:	4b61      	ldr	r3, [pc, #388]	; (305c <main+0x1cc>)
    2ed6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    2ed8:	6883      	ldr	r3, [r0, #8]
	if (api->callback_set == NULL) {
    2eda:	681b      	ldr	r3, [r3, #0]
    2edc:	b1cb      	cbz	r3, 2f12 <main+0x82>
	return api->callback_set(dev, callback, user_data);
    2ede:	2200      	movs	r2, #0
    2ee0:	4962      	ldr	r1, [pc, #392]	; (306c <main+0x1dc>)
    2ee2:	4798      	blx	r3
    if (err) {
    2ee4:	4601      	mov	r1, r0
    2ee6:	b1b8      	cbz	r0, 2f18 <main+0x88>
        printk("uart_callback_set() error. Error code:%d\n\r",err);
    2ee8:	4861      	ldr	r0, [pc, #388]	; (3070 <main+0x1e0>)
    2eea:	f00c f8af 	bl	f04c <printk>
}
    2eee:	b009      	add	sp, #36	; 0x24
    2ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printk("device_get_binding() error for device %s!\n\r", DT_LABEL(UART_NODE));
    2ef2:	4959      	ldr	r1, [pc, #356]	; (3058 <main+0x1c8>)
    2ef4:	485f      	ldr	r0, [pc, #380]	; (3074 <main+0x1e4>)
    2ef6:	f00c f8a9 	bl	f04c <printk>
        return;
    2efa:	e7f8      	b.n	2eee <main+0x5e>
		return -ENOSYS;
    2efc:	f06f 0357 	mvn.w	r3, #87	; 0x57
    2f00:	e7d9      	b.n	2eb6 <main+0x26>
        printk("uart_configure() error. Invalid configuration\n\r");
    2f02:	485d      	ldr	r0, [pc, #372]	; (3078 <main+0x1e8>)
    2f04:	f00c f8a2 	bl	f04c <printk>
        return; 
    2f08:	e7f1      	b.n	2eee <main+0x5e>
        printk("uart_rx_enable() error. Error code:%d\n\r",err);
    2f0a:	485c      	ldr	r0, [pc, #368]	; (307c <main+0x1ec>)
    2f0c:	f00c f89e 	bl	f04c <printk>
        return;
    2f10:	e7ed      	b.n	2eee <main+0x5e>
		return -ENOSYS;
    2f12:	f06f 0157 	mvn.w	r1, #87	; 0x57
    2f16:	e7e7      	b.n	2ee8 <main+0x58>
    uint8_t **img1 = (uint8_t **)malloc(IMGWIDTH * sizeof(uint8_t *));
    2f18:	f44f 7000 	mov.w	r0, #512	; 0x200
    2f1c:	f00a fbb6 	bl	d68c <malloc>
    2f20:	4604      	mov	r4, r0
    for (uint8_t j = 0; j < IMGWIDTH; j++)
    2f22:	2500      	movs	r5, #0
    2f24:	e006      	b.n	2f34 <main+0xa4>
        img1[j] = (uint8_t *)malloc(IMGWIDTH * sizeof(uint8_t));
    2f26:	2080      	movs	r0, #128	; 0x80
    2f28:	f00a fbb0 	bl	d68c <malloc>
    2f2c:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    for (uint8_t j = 0; j < IMGWIDTH; j++)
    2f30:	3501      	adds	r5, #1
    2f32:	b2ed      	uxtb	r5, r5
    2f34:	f015 0f80 	tst.w	r5, #128	; 0x80
    2f38:	d0f5      	beq.n	2f26 <main+0x96>
    for (size_t i = 0; i < IMGWIDTH; i++)
    2f3a:	2100      	movs	r1, #0
    2f3c:	e00a      	b.n	2f54 <main+0xc4>
            img1[i][j] = vertical_guide_image_data[i][j];
    2f3e:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
    2f42:	4a4f      	ldr	r2, [pc, #316]	; (3080 <main+0x1f0>)
    2f44:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
    2f48:	5cd2      	ldrb	r2, [r2, r3]
    2f4a:	54c2      	strb	r2, [r0, r3]
        for (size_t j = 0; j < IMGWIDTH; j++)
    2f4c:	3301      	adds	r3, #1
    2f4e:	2b7f      	cmp	r3, #127	; 0x7f
    2f50:	d9f5      	bls.n	2f3e <main+0xae>
    for (size_t i = 0; i < IMGWIDTH; i++)
    2f52:	3101      	adds	r1, #1
    2f54:	297f      	cmp	r1, #127	; 0x7f
    2f56:	d801      	bhi.n	2f5c <main+0xcc>
        for (size_t j = 0; j < IMGWIDTH; j++)
    2f58:	2300      	movs	r3, #0
    2f5a:	e7f8      	b.n	2f4e <main+0xbe>
    printk("open cab");
    2f5c:	4849      	ldr	r0, [pc, #292]	; (3084 <main+0x1f4>)
    2f5e:	f00c f875 	bl	f04c <printk>
    image_cab = open_cab("image cab", 5, IMGWIDTH*IMGWIDTH, (void*)img1);
    2f62:	4623      	mov	r3, r4
    2f64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2f68:	2105      	movs	r1, #5
    2f6a:	4847      	ldr	r0, [pc, #284]	; (3088 <main+0x1f8>)
    2f6c:	f00b ff50 	bl	ee10 <open_cab>
    2f70:	4b46      	ldr	r3, [pc, #280]	; (308c <main+0x1fc>)
    2f72:	6018      	str	r0, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    2f74:	2201      	movs	r2, #1
    2f76:	2100      	movs	r1, #0
    2f78:	4845      	ldr	r0, [pc, #276]	; (3090 <main+0x200>)
    2f7a:	f00d fb49 	bl	10610 <z_impl_k_sem_init>
    2f7e:	2201      	movs	r2, #1
    2f80:	2100      	movs	r1, #0
    2f82:	4844      	ldr	r0, [pc, #272]	; (3094 <main+0x204>)
    2f84:	f00d fb44 	bl	10610 <z_impl_k_sem_init>
    2f88:	2201      	movs	r2, #1
    2f8a:	2100      	movs	r1, #0
    2f8c:	4842      	ldr	r0, [pc, #264]	; (3098 <main+0x208>)
    2f8e:	f00d fb3f 	bl	10610 <z_impl_k_sem_init>
    2f92:	2201      	movs	r2, #1
    2f94:	2100      	movs	r1, #0
    2f96:	4841      	ldr	r0, [pc, #260]	; (309c <main+0x20c>)
    2f98:	f00d fb3a 	bl	10610 <z_impl_k_sem_init>
    2f9c:	2201      	movs	r2, #1
    2f9e:	2100      	movs	r1, #0
    2fa0:	483f      	ldr	r0, [pc, #252]	; (30a0 <main+0x210>)
    2fa2:	f00d fb35 	bl	10610 <z_impl_k_sem_init>
                                               NULL, NULL, NULL, thread_near_obstacle_prio, 0, K_NO_WAIT);
    2fa6:	2600      	movs	r6, #0
    2fa8:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    2faa:	e9cd 6706 	strd	r6, r7, [sp, #24]
    2fae:	2400      	movs	r4, #0
    2fb0:	9404      	str	r4, [sp, #16]
    2fb2:	2304      	movs	r3, #4
    2fb4:	9303      	str	r3, [sp, #12]
    2fb6:	9402      	str	r4, [sp, #8]
    2fb8:	9401      	str	r4, [sp, #4]
    2fba:	9400      	str	r4, [sp, #0]
    2fbc:	4b39      	ldr	r3, [pc, #228]	; (30a4 <main+0x214>)
    2fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2fc2:	4939      	ldr	r1, [pc, #228]	; (30a8 <main+0x218>)
    2fc4:	4839      	ldr	r0, [pc, #228]	; (30ac <main+0x21c>)
    2fc6:	f007 fd41 	bl	aa4c <z_impl_k_thread_create>
    thread_near_obstacle_tid = k_thread_create(&thread_near_obstacle_data, thread_near_obstacle_stack,
    2fca:	4b39      	ldr	r3, [pc, #228]	; (30b0 <main+0x220>)
    2fcc:	6018      	str	r0, [r3, #0]
    2fce:	e9cd 6706 	strd	r6, r7, [sp, #24]
    2fd2:	9404      	str	r4, [sp, #16]
    2fd4:	2305      	movs	r3, #5
    2fd6:	9303      	str	r3, [sp, #12]
    2fd8:	9402      	str	r4, [sp, #8]
    2fda:	9401      	str	r4, [sp, #4]
    2fdc:	9400      	str	r4, [sp, #0]
    2fde:	4b35      	ldr	r3, [pc, #212]	; (30b4 <main+0x224>)
    2fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2fe4:	4934      	ldr	r1, [pc, #208]	; (30b8 <main+0x228>)
    2fe6:	4835      	ldr	r0, [pc, #212]	; (30bc <main+0x22c>)
    2fe8:	f007 fd30 	bl	aa4c <z_impl_k_thread_create>
    thread_receive_image_tid = k_thread_create(&thread_receive_image_data, thread_receive_image_stack,
    2fec:	4b34      	ldr	r3, [pc, #208]	; (30c0 <main+0x230>)
    2fee:	6018      	str	r0, [r3, #0]
    2ff0:	e9cd 6706 	strd	r6, r7, [sp, #24]
    2ff4:	9404      	str	r4, [sp, #16]
    2ff6:	2302      	movs	r3, #2
    2ff8:	9303      	str	r3, [sp, #12]
    2ffa:	9402      	str	r4, [sp, #8]
    2ffc:	9401      	str	r4, [sp, #4]
    2ffe:	9400      	str	r4, [sp, #0]
    3000:	4b30      	ldr	r3, [pc, #192]	; (30c4 <main+0x234>)
    3002:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3006:	4930      	ldr	r1, [pc, #192]	; (30c8 <main+0x238>)
    3008:	4830      	ldr	r0, [pc, #192]	; (30cc <main+0x23c>)
    300a:	f007 fd1f 	bl	aa4c <z_impl_k_thread_create>
    thread_orientation_tid = k_thread_create(&thread_orientation_data, thread_orientation_stack,
    300e:	4b30      	ldr	r3, [pc, #192]	; (30d0 <main+0x240>)
    3010:	6018      	str	r0, [r3, #0]
    3012:	e9cd 6706 	strd	r6, r7, [sp, #24]
    3016:	9404      	str	r4, [sp, #16]
    3018:	2303      	movs	r3, #3
    301a:	9303      	str	r3, [sp, #12]
    301c:	9402      	str	r4, [sp, #8]
    301e:	9401      	str	r4, [sp, #4]
    3020:	9400      	str	r4, [sp, #0]
    3022:	4b2c      	ldr	r3, [pc, #176]	; (30d4 <main+0x244>)
    3024:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3028:	492b      	ldr	r1, [pc, #172]	; (30d8 <main+0x248>)
    302a:	482c      	ldr	r0, [pc, #176]	; (30dc <main+0x24c>)
    302c:	f007 fd0e 	bl	aa4c <z_impl_k_thread_create>
    thread_output_tid = k_thread_create(&thread_output_data, thread_output_stack,
    3030:	4b2b      	ldr	r3, [pc, #172]	; (30e0 <main+0x250>)
    3032:	6018      	str	r0, [r3, #0]
    3034:	e9cd 6706 	strd	r6, r7, [sp, #24]
    3038:	9404      	str	r4, [sp, #16]
    303a:	2301      	movs	r3, #1
    303c:	9303      	str	r3, [sp, #12]
    303e:	9402      	str	r4, [sp, #8]
    3040:	9401      	str	r4, [sp, #4]
    3042:	9400      	str	r4, [sp, #0]
    3044:	4b27      	ldr	r3, [pc, #156]	; (30e4 <main+0x254>)
    3046:	f44f 6280 	mov.w	r2, #1024	; 0x400
    304a:	4927      	ldr	r1, [pc, #156]	; (30e8 <main+0x258>)
    304c:	4827      	ldr	r0, [pc, #156]	; (30ec <main+0x25c>)
    304e:	f007 fcfd 	bl	aa4c <z_impl_k_thread_create>
    thread_obscount_tid = k_thread_create(&thread_obscount_data, thread_obscount_stack,
    3052:	4b27      	ldr	r3, [pc, #156]	; (30f0 <main+0x260>)
    3054:	6018      	str	r0, [r3, #0]
    return;
    3056:	e74a      	b.n	2eee <main+0x5e>
    3058:	00011438 	.word	0x00011438
    305c:	2000c9a8 	.word	0x2000c9a8
    3060:	0001146c 	.word	0x0001146c
    3064:	000115bc 	.word	0x000115bc
    3068:	20004944 	.word	0x20004944
    306c:	00002b8d 	.word	0x00002b8d
    3070:	000114b8 	.word	0x000114b8
    3074:	00011440 	.word	0x00011440
    3078:	00011488 	.word	0x00011488
    307c:	00011320 	.word	0x00011320
    3080:	20000014 	.word	0x20000014
    3084:	000114e4 	.word	0x000114e4
    3088:	000114f0 	.word	0x000114f0
    308c:	20004930 	.word	0x20004930
    3090:	2000c954 	.word	0x2000c954
    3094:	2000c974 	.word	0x2000c974
    3098:	2000c984 	.word	0x2000c984
    309c:	2000c964 	.word	0x2000c964
    30a0:	2000c944 	.word	0x2000c944
    30a4:	000030f5 	.word	0x000030f5
    30a8:	2000db40 	.word	0x2000db40
    30ac:	20004288 	.word	0x20004288
    30b0:	2000c994 	.word	0x2000c994
    30b4:	00002c85 	.word	0x00002c85
    30b8:	2000d720 	.word	0x2000d720
    30bc:	20004548 	.word	0x20004548
    30c0:	2000c9a4 	.word	0x2000c9a4
    30c4:	00003261 	.word	0x00003261
    30c8:	2000df60 	.word	0x2000df60
    30cc:	200043e8 	.word	0x200043e8
    30d0:	2000c99c 	.word	0x2000c99c
    30d4:	00002db5 	.word	0x00002db5
    30d8:	2000e380 	.word	0x2000e380
    30dc:	20004498 	.word	0x20004498
    30e0:	2000c9a0 	.word	0x2000c9a0
    30e4:	0000347d 	.word	0x0000347d
    30e8:	2000e7a0 	.word	0x2000e7a0
    30ec:	20004338 	.word	0x20004338
    30f0:	2000c998 	.word	0x2000c998

000030f4 <thread_near_obstacle_code>:
{
    30f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30f8:	b083      	sub	sp, #12
    printk("Thread near_obstacle init\n");
    30fa:	4852      	ldr	r0, [pc, #328]	; (3244 <thread_near_obstacle_code+0x150>)
    30fc:	f00b ffa6 	bl	f04c <printk>
	return z_impl_k_uptime_ticks();
    3100:	f00d fadc 	bl	106bc <z_impl_k_uptime_ticks>
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    3104:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    3108:	2700      	movs	r7, #0
    310a:	46c3      	mov	fp, r8
    310c:	46ba      	mov	sl, r7
    310e:	46b9      	mov	r9, r7
    3110:	9701      	str	r7, [sp, #4]
    3112:	e070      	b.n	31f6 <thread_near_obstacle_code+0x102>
                    inObs++;
    3114:	3201      	adds	r2, #1
                if (inObs > 1)
    3116:	2a01      	cmp	r2, #1
    3118:	dd00      	ble.n	311c <thread_near_obstacle_code+0x28>
                    res=1;
    311a:	2501      	movs	r5, #1
            for (i = NOB_COL; i < NOB_COL + NOB_WIDTH; i++)
    311c:	3301      	adds	r3, #1
    311e:	2b5f      	cmp	r3, #95	; 0x5f
    3120:	dc08      	bgt.n	3134 <thread_near_obstacle_code+0x40>
                if (image[j][i] == OBSTACLE_COLOR)
    3122:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
    3126:	5cc9      	ldrb	r1, [r1, r3]
    3128:	2980      	cmp	r1, #128	; 0x80
    312a:	d0f3      	beq.n	3114 <thread_near_obstacle_code+0x20>
                else if (inObs > 1)
    312c:	2a01      	cmp	r2, #1
    312e:	ddf2      	ble.n	3116 <thread_near_obstacle_code+0x22>
                    inObs = 0;
    3130:	2200      	movs	r2, #0
    3132:	e7f3      	b.n	311c <thread_near_obstacle_code+0x28>
        for (j = NOB_ROW; j < IMGWIDTH; j++)
    3134:	3001      	adds	r0, #1
    3136:	287f      	cmp	r0, #127	; 0x7f
    3138:	dc02      	bgt.n	3140 <thread_near_obstacle_code+0x4c>
            int inObs = 0;
    313a:	2200      	movs	r2, #0
            for (i = NOB_COL; i < NOB_COL + NOB_WIDTH; i++)
    313c:	2320      	movs	r3, #32
    313e:	e7ee      	b.n	311e <thread_near_obstacle_code+0x2a>
        for (i = 0; i < IMGWIDTH; i++)
    3140:	2600      	movs	r6, #0
    3142:	e004      	b.n	314e <thread_near_obstacle_code+0x5a>
            free(image[i]);
    3144:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    3148:	f00a faa8 	bl	d69c <free>
        for (i = 0; i < IMGWIDTH; i++)
    314c:	3601      	adds	r6, #1
    314e:	2e7f      	cmp	r6, #127	; 0x7f
    3150:	ddf8      	ble.n	3144 <thread_near_obstacle_code+0x50>
        free(image);
    3152:	4620      	mov	r0, r4
    3154:	f00a faa2 	bl	d69c <free>
        nearobs_output = res;
    3158:	4b3b      	ldr	r3, [pc, #236]	; (3248 <thread_near_obstacle_code+0x154>)
    315a:	701d      	strb	r5, [r3, #0]
	z_impl_k_sem_give(sem);
    315c:	483b      	ldr	r0, [pc, #236]	; (324c <thread_near_obstacle_code+0x158>)
    315e:	f007 ff61 	bl	b024 <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
    3162:	f00d faab 	bl	106bc <z_impl_k_uptime_ticks>
    3166:	4603      	mov	r3, r0
    3168:	460c      	mov	r4, r1
    316a:	0162      	lsls	r2, r4, #5
    316c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
    3170:	015b      	lsls	r3, r3, #5
    3172:	1a1b      	subs	r3, r3, r0
    3174:	eb62 0204 	sbc.w	r2, r2, r4
    3178:	0092      	lsls	r2, r2, #2
    317a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    317e:	009b      	lsls	r3, r3, #2
    3180:	181b      	adds	r3, r3, r0
    3182:	eb42 0404 	adc.w	r4, r2, r4
    3186:	00e4      	lsls	r4, r4, #3
    3188:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
    318c:	f3c3 3310 	ubfx	r3, r3, #12, #17
    3190:	0be5      	lsrs	r5, r4, #15
    3192:	ea43 4444 	orr.w	r4, r3, r4, lsl #17
        if (fin_time - t_prev < t_min)
    3196:	ebb4 0209 	subs.w	r2, r4, r9
    319a:	9b01      	ldr	r3, [sp, #4]
    319c:	eb65 0303 	sbc.w	r3, r5, r3
    31a0:	455a      	cmp	r2, fp
    31a2:	eb73 010a 	sbcs.w	r1, r3, sl
    31a6:	db46      	blt.n	3236 <thread_near_obstacle_code+0x142>
        else if (fin_time - t_prev > t_max)
    31a8:	4590      	cmp	r8, r2
    31aa:	eb77 0103 	sbcs.w	r1, r7, r3
    31ae:	db45      	blt.n	323c <thread_near_obstacle_code+0x148>
        irq_unlock(key1);
    31b0:	4b27      	ldr	r3, [pc, #156]	; (3250 <thread_near_obstacle_code+0x15c>)
    31b2:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    31b4:	f383 8811 	msr	BASEPRI, r3
    31b8:	f3bf 8f6f 	isb	sy
    31bc:	f00d fa7e 	bl	106bc <z_impl_k_uptime_ticks>
    31c0:	014a      	lsls	r2, r1, #5
    31c2:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    31c6:	0143      	lsls	r3, r0, #5
    31c8:	1a1b      	subs	r3, r3, r0
    31ca:	eb62 0201 	sbc.w	r2, r2, r1
    31ce:	0092      	lsls	r2, r2, #2
    31d0:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    31d4:	009b      	lsls	r3, r3, #2
    31d6:	181b      	adds	r3, r3, r0
    31d8:	eb42 0201 	adc.w	r2, r2, r1
    31dc:	00d1      	lsls	r1, r2, #3
    31de:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
    31e2:	f3c3 3310 	ubfx	r3, r3, #12, #17
        printk("$Near obs -> %lld\n", (long long) k_uptime_get());
    31e6:	ea43 4241 	orr.w	r2, r3, r1, lsl #17
    31ea:	0bcb      	lsrs	r3, r1, #15
    31ec:	4819      	ldr	r0, [pc, #100]	; (3254 <thread_near_obstacle_code+0x160>)
    31ee:	f00b ff2d 	bl	f04c <printk>
        t_prev = fin_time;
    31f2:	46a1      	mov	r9, r4
    31f4:	9501      	str	r5, [sp, #4]
	return z_impl_k_sem_take(sem, timeout);
    31f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    31fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    31fe:	4816      	ldr	r0, [pc, #88]	; (3258 <thread_near_obstacle_code+0x164>)
    3200:	f007 ff54 	bl	b0ac <z_impl_k_sem_take>
	__asm__ volatile(
    3204:	f04f 0320 	mov.w	r3, #32
    3208:	f3ef 8211 	mrs	r2, BASEPRI
    320c:	f383 8812 	msr	BASEPRI_MAX, r3
    3210:	f3bf 8f6f 	isb	sy
        key1=irq_lock();
    3214:	4b0e      	ldr	r3, [pc, #56]	; (3250 <thread_near_obstacle_code+0x15c>)
    3216:	601a      	str	r2, [r3, #0]
        uint8_t* cab_img = (uint8_t*)get_mes(image_cab);
    3218:	4e10      	ldr	r6, [pc, #64]	; (325c <thread_near_obstacle_code+0x168>)
    321a:	6830      	ldr	r0, [r6, #0]
    321c:	f00b fe7d 	bl	ef1a <get_mes>
    3220:	4605      	mov	r5, r0
        uint8_t ** image = castImage(cab_img);
    3222:	f00b fdd2 	bl	edca <castImage>
    3226:	4604      	mov	r4, r0
        unget((void*)cab_img, image_cab);
    3228:	6831      	ldr	r1, [r6, #0]
    322a:	4628      	mov	r0, r5
    322c:	f00b fe9e 	bl	ef6c <unget>
        uint8_t res=0;
    3230:	2500      	movs	r5, #0
        for (j = NOB_ROW; j < IMGWIDTH; j++)
    3232:	2040      	movs	r0, #64	; 0x40
    3234:	e77f      	b.n	3136 <thread_near_obstacle_code+0x42>
            t_min = fin_time - t_prev;
    3236:	4693      	mov	fp, r2
    3238:	469a      	mov	sl, r3
    323a:	e7b9      	b.n	31b0 <thread_near_obstacle_code+0xbc>
            t_max = fin_time - t_prev;
    323c:	4690      	mov	r8, r2
    323e:	461f      	mov	r7, r3
    3240:	e7b6      	b.n	31b0 <thread_near_obstacle_code+0xbc>
    3242:	bf00      	nop
    3244:	000114fc 	.word	0x000114fc
    3248:	2000d716 	.word	0x2000d716
    324c:	2000c984 	.word	0x2000c984
    3250:	20004934 	.word	0x20004934
    3254:	00011518 	.word	0x00011518
    3258:	2000c954 	.word	0x2000c954
    325c:	20004930 	.word	0x20004930

00003260 <thread_orientation_code>:
{
    3260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3264:	b087      	sub	sp, #28
    printk("Thread orientation init\n");
    3266:	487c      	ldr	r0, [pc, #496]	; (3458 <thread_orientation_code+0x1f8>)
    3268:	f00b fef0 	bl	f04c <printk>
	return z_impl_k_uptime_ticks();
    326c:	f00d fa26 	bl	106bc <z_impl_k_uptime_ticks>
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    3270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3274:	9304      	str	r3, [sp, #16]
    3276:	f04f 0900 	mov.w	r9, #0
    327a:	46ca      	mov	sl, r9
    327c:	f8cd 9014 	str.w	r9, [sp, #20]
    3280:	9301      	str	r3, [sp, #4]
    3282:	46cb      	mov	fp, r9
    3284:	e0b6      	b.n	33f4 <thread_orientation_code+0x194>
                pos = i;
    3286:	b22d      	sxth	r5, r5
        for (i = 0; i < IMGWIDTH; i++)
    3288:	2600      	movs	r6, #0
    328a:	2e7f      	cmp	r6, #127	; 0x7f
    328c:	dc09      	bgt.n	32a2 <thread_orientation_code+0x42>
            if (image[GF_ROW][i] == GUIDELINE_COLOR)
    328e:	f8d4 31fc 	ldr.w	r3, [r4, #508]	; 0x1fc
    3292:	5d9b      	ldrb	r3, [r3, r6]
    3294:	2bff      	cmp	r3, #255	; 0xff
    3296:	d006      	beq.n	32a6 <thread_orientation_code+0x46>
        for (i = 0; i < IMGWIDTH; i++)
    3298:	3601      	adds	r6, #1
    329a:	e7f6      	b.n	328a <thread_orientation_code+0x2a>
        pos = -1;
    329c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    32a0:	e7f2      	b.n	3288 <thread_orientation_code+0x28>
        gf_pos = -1;
    32a2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
        if (pos == -1 || gf_pos == -1)
    32a6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    32aa:	d042      	beq.n	3332 <thread_orientation_code+0xd2>
    32ac:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    32b0:	d03f      	beq.n	3332 <thread_orientation_code+0xd2>
        if (pos == gf_pos)
    32b2:	46a8      	mov	r8, r5
    32b4:	42b5      	cmp	r5, r6
    32b6:	d044      	beq.n	3342 <thread_orientation_code+0xe2>
            int pos_delta = pos - gf_pos;
    32b8:	1bad      	subs	r5, r5, r6
            if (pos_delta > 0)
    32ba:	2d00      	cmp	r5, #0
    32bc:	dd3f      	ble.n	333e <thread_orientation_code+0xde>
                pos_delta++;
    32be:	3501      	adds	r5, #1
            angle = acos(IMGWIDTH / sqrt(pow(IMGWIDTH, 2) + pow(pos_delta, 2)));
    32c0:	2600      	movs	r6, #0
    32c2:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    32c6:	4632      	mov	r2, r6
    32c8:	463b      	mov	r3, r7
    32ca:	2000      	movs	r0, #0
    32cc:	4963      	ldr	r1, [pc, #396]	; (345c <thread_orientation_code+0x1fc>)
    32ce:	f009 ff85 	bl	d1dc <pow>
    32d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    32d6:	4628      	mov	r0, r5
    32d8:	f7fd f8b4 	bl	444 <__aeabi_i2d>
    32dc:	4632      	mov	r2, r6
    32de:	463b      	mov	r3, r7
    32e0:	f009 ff7c 	bl	d1dc <pow>
    32e4:	4602      	mov	r2, r0
    32e6:	460b      	mov	r3, r1
    32e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    32ec:	f7fc ff5e 	bl	1ac <__adddf3>
    32f0:	f00a f820 	bl	d334 <sqrt>
    32f4:	4602      	mov	r2, r0
    32f6:	460b      	mov	r3, r1
    32f8:	2000      	movs	r0, #0
    32fa:	4958      	ldr	r1, [pc, #352]	; (345c <thread_orientation_code+0x1fc>)
    32fc:	f7fd fa36 	bl	76c <__aeabi_ddiv>
    3300:	f009 ff3e 	bl	d180 <acos>
    3304:	f7fd fb1a 	bl	93c <__aeabi_d2f>
    3308:	4606      	mov	r6, r0
            if (pos_delta > 0)
    330a:	2d00      	cmp	r5, #0
    330c:	dd01      	ble.n	3312 <thread_orientation_code+0xb2>
                angle = -angle;
    330e:	f100 4600 	add.w	r6, r0, #2147483648	; 0x80000000
        itoa(pos, orientation_output[0], 10);
    3312:	4d53      	ldr	r5, [pc, #332]	; (3460 <thread_orientation_code+0x200>)
    3314:	220a      	movs	r2, #10
    3316:	4629      	mov	r1, r5
    3318:	4640      	mov	r0, r8
    331a:	f00d fa29 	bl	10770 <itoa>
        gcvt (angle, 6, orientation_output[1]);
    331e:	350a      	adds	r5, #10
    3320:	4630      	mov	r0, r6
    3322:	f7fd f8a1 	bl	468 <__aeabi_f2d>
    3326:	462b      	mov	r3, r5
    3328:	2206      	movs	r2, #6
    332a:	f00a f977 	bl	d61c <gcvt>
        for (i = 0; i < IMGWIDTH; i++)
    332e:	2500      	movs	r5, #0
    3330:	e00e      	b.n	3350 <thread_orientation_code+0xf0>
            printk("Failed to find guideline pos=%d, gf_pos=%d", pos, gf_pos);
    3332:	4632      	mov	r2, r6
    3334:	4629      	mov	r1, r5
    3336:	484b      	ldr	r0, [pc, #300]	; (3464 <thread_orientation_code+0x204>)
    3338:	f00b fe88 	bl	f04c <printk>
    333c:	e7b9      	b.n	32b2 <thread_orientation_code+0x52>
                pos_delta--;
    333e:	3d01      	subs	r5, #1
    3340:	e7be      	b.n	32c0 <thread_orientation_code+0x60>
            angle = 0;
    3342:	2600      	movs	r6, #0
    3344:	e7e5      	b.n	3312 <thread_orientation_code+0xb2>
            free(image[i]);
    3346:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
    334a:	f00a f9a7 	bl	d69c <free>
        for (i = 0; i < IMGWIDTH; i++)
    334e:	3501      	adds	r5, #1
    3350:	2d7f      	cmp	r5, #127	; 0x7f
    3352:	ddf8      	ble.n	3346 <thread_orientation_code+0xe6>
        free(image);
    3354:	4620      	mov	r0, r4
    3356:	f00a f9a1 	bl	d69c <free>
	z_impl_k_sem_give(sem);
    335a:	4843      	ldr	r0, [pc, #268]	; (3468 <thread_orientation_code+0x208>)
    335c:	f007 fe62 	bl	b024 <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
    3360:	f00d f9ac 	bl	106bc <z_impl_k_uptime_ticks>
    3364:	014a      	lsls	r2, r1, #5
    3366:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    336a:	0143      	lsls	r3, r0, #5
    336c:	1a1b      	subs	r3, r3, r0
    336e:	eb62 0201 	sbc.w	r2, r2, r1
    3372:	0092      	lsls	r2, r2, #2
    3374:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    3378:	009b      	lsls	r3, r3, #2
    337a:	181b      	adds	r3, r3, r0
    337c:	eb42 0401 	adc.w	r4, r2, r1
    3380:	00e4      	lsls	r4, r4, #3
    3382:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
    3386:	f3c3 3310 	ubfx	r3, r3, #12, #17
    338a:	0be5      	lsrs	r5, r4, #15
    338c:	ea43 4444 	orr.w	r4, r3, r4, lsl #17
        if (fin_time - t_prev < t_min)
    3390:	ebb4 0b0b 	subs.w	fp, r4, fp
    3394:	eb65 0a0a 	sbc.w	sl, r5, sl
    3398:	9b01      	ldr	r3, [sp, #4]
    339a:	459b      	cmp	fp, r3
    339c:	eb7a 0309 	sbcs.w	r3, sl, r9
    33a0:	db50      	blt.n	3444 <thread_orientation_code+0x1e4>
        else if (fin_time - t_prev > t_max)
    33a2:	9b04      	ldr	r3, [sp, #16]
    33a4:	455b      	cmp	r3, fp
    33a6:	9b05      	ldr	r3, [sp, #20]
    33a8:	eb73 030a 	sbcs.w	r3, r3, sl
    33ac:	db4e      	blt.n	344c <thread_orientation_code+0x1ec>
        irq_unlock(key2);
    33ae:	4b2f      	ldr	r3, [pc, #188]	; (346c <thread_orientation_code+0x20c>)
    33b0:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    33b2:	f383 8811 	msr	BASEPRI, r3
    33b6:	f3bf 8f6f 	isb	sy
    33ba:	f00d f97f 	bl	106bc <z_impl_k_uptime_ticks>
    33be:	014a      	lsls	r2, r1, #5
    33c0:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    33c4:	0143      	lsls	r3, r0, #5
    33c6:	1a1b      	subs	r3, r3, r0
    33c8:	eb62 0201 	sbc.w	r2, r2, r1
    33cc:	0092      	lsls	r2, r2, #2
    33ce:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    33d2:	009b      	lsls	r3, r3, #2
    33d4:	181b      	adds	r3, r3, r0
    33d6:	eb42 0201 	adc.w	r2, r2, r1
    33da:	00d1      	lsls	r1, r2, #3
    33dc:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
    33e0:	f3c3 3310 	ubfx	r3, r3, #12, #17
        printk("$orientation -> %lld\n", (long long) k_uptime_get());
    33e4:	ea43 4241 	orr.w	r2, r3, r1, lsl #17
    33e8:	0bcb      	lsrs	r3, r1, #15
    33ea:	4821      	ldr	r0, [pc, #132]	; (3470 <thread_orientation_code+0x210>)
    33ec:	f00b fe2e 	bl	f04c <printk>
        t_prev = fin_time;
    33f0:	46a3      	mov	fp, r4
    33f2:	46aa      	mov	sl, r5
	return z_impl_k_sem_take(sem, timeout);
    33f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    33f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    33fc:	481d      	ldr	r0, [pc, #116]	; (3474 <thread_orientation_code+0x214>)
    33fe:	f007 fe55 	bl	b0ac <z_impl_k_sem_take>
	__asm__ volatile(
    3402:	f04f 0320 	mov.w	r3, #32
    3406:	f3ef 8211 	mrs	r2, BASEPRI
    340a:	f383 8812 	msr	BASEPRI_MAX, r3
    340e:	f3bf 8f6f 	isb	sy
        key2 = irq_lock();
    3412:	4b16      	ldr	r3, [pc, #88]	; (346c <thread_orientation_code+0x20c>)
    3414:	601a      	str	r2, [r3, #0]
        uint8_t* cab_img = (uint8_t*)get_mes(image_cab);
    3416:	4e18      	ldr	r6, [pc, #96]	; (3478 <thread_orientation_code+0x218>)
    3418:	6830      	ldr	r0, [r6, #0]
    341a:	f00b fd7e 	bl	ef1a <get_mes>
    341e:	4605      	mov	r5, r0
        uint8_t ** image = castImage(cab_img);
    3420:	f00b fcd3 	bl	edca <castImage>
    3424:	4604      	mov	r4, r0
        unget((void*)cab_img, image_cab);
    3426:	6831      	ldr	r1, [r6, #0]
    3428:	4628      	mov	r0, r5
    342a:	f00b fd9f 	bl	ef6c <unget>
        for (i = 0; i < IMGWIDTH; i++)
    342e:	2500      	movs	r5, #0
    3430:	2d7f      	cmp	r5, #127	; 0x7f
    3432:	f73f af33 	bgt.w	329c <thread_orientation_code+0x3c>
            if (image[GN_ROW][i] == GUIDELINE_COLOR)
    3436:	6823      	ldr	r3, [r4, #0]
    3438:	5d5b      	ldrb	r3, [r3, r5]
    343a:	2bff      	cmp	r3, #255	; 0xff
    343c:	f43f af23 	beq.w	3286 <thread_orientation_code+0x26>
        for (i = 0; i < IMGWIDTH; i++)
    3440:	3501      	adds	r5, #1
    3442:	e7f5      	b.n	3430 <thread_orientation_code+0x1d0>
            t_min = fin_time - t_prev;
    3444:	f8cd b004 	str.w	fp, [sp, #4]
    3448:	46d1      	mov	r9, sl
    344a:	e7b0      	b.n	33ae <thread_orientation_code+0x14e>
            t_max = fin_time - t_prev;
    344c:	f8cd b010 	str.w	fp, [sp, #16]
    3450:	f8cd a014 	str.w	sl, [sp, #20]
    3454:	e7ab      	b.n	33ae <thread_orientation_code+0x14e>
    3456:	bf00      	nop
    3458:	0001152c 	.word	0x0001152c
    345c:	40600000 	.word	0x40600000
    3460:	20000000 	.word	0x20000000
    3464:	00011548 	.word	0x00011548
    3468:	2000c984 	.word	0x2000c984
    346c:	20004938 	.word	0x20004938
    3470:	00011574 	.word	0x00011574
    3474:	2000c974 	.word	0x2000c974
    3478:	20004930 	.word	0x20004930

0000347c <thread_obscount_code>:
{
    347c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3480:	b083      	sub	sp, #12
    printk("Thread obscount init\n");
    3482:	484f      	ldr	r0, [pc, #316]	; (35c0 <thread_obscount_code+0x144>)
    3484:	f00b fde2 	bl	f04c <printk>
	return z_impl_k_uptime_ticks();
    3488:	f00d f918 	bl	106bc <z_impl_k_uptime_ticks>
    int64_t release_time = 0, fin_time = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
    348c:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
    3490:	2500      	movs	r5, #0
    3492:	46da      	mov	sl, fp
    3494:	46a9      	mov	r9, r5
    3496:	46a8      	mov	r8, r5
    3498:	462f      	mov	r7, r5
    349a:	e06a      	b.n	3572 <thread_obscount_code+0xf6>
                    inObs++;
    349c:	3101      	adds	r1, #1
            for (i = 0; i < IMGWIDTH; i++)
    349e:	3301      	adds	r3, #1
    34a0:	2b7f      	cmp	r3, #127	; 0x7f
    34a2:	dc09      	bgt.n	34b8 <thread_obscount_code+0x3c>
                if (image[j][i] == OBSTACLE_COLOR)
    34a4:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
    34a8:	5cd2      	ldrb	r2, [r2, r3]
    34aa:	2a80      	cmp	r2, #128	; 0x80
    34ac:	d0f6      	beq.n	349c <thread_obscount_code+0x20>
                else if (inObs > 1)
    34ae:	2901      	cmp	r1, #1
    34b0:	ddf5      	ble.n	349e <thread_obscount_code+0x22>
                    nobs++;
    34b2:	3601      	adds	r6, #1
                    inObs = 0;
    34b4:	2100      	movs	r1, #0
    34b6:	e7f2      	b.n	349e <thread_obscount_code+0x22>
            if (inObs > 1)
    34b8:	2901      	cmp	r1, #1
    34ba:	dd00      	ble.n	34be <thread_obscount_code+0x42>
                nobs++;
    34bc:	3601      	adds	r6, #1
        for (j = 0; j < IMGWIDTH; j++)
    34be:	3001      	adds	r0, #1
    34c0:	287f      	cmp	r0, #127	; 0x7f
    34c2:	dc02      	bgt.n	34ca <thread_obscount_code+0x4e>
            int inObs = 0;
    34c4:	2100      	movs	r1, #0
            for (i = 0; i < IMGWIDTH; i++)
    34c6:	460b      	mov	r3, r1
    34c8:	e7ea      	b.n	34a0 <thread_obscount_code+0x24>
        obscount_output = nobs;
    34ca:	4b3e      	ldr	r3, [pc, #248]	; (35c4 <thread_obscount_code+0x148>)
    34cc:	801e      	strh	r6, [r3, #0]
        for (i = 0; i < IMGWIDTH; i++)
    34ce:	2600      	movs	r6, #0
    34d0:	e004      	b.n	34dc <thread_obscount_code+0x60>
            free(image[i]);
    34d2:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
    34d6:	f00a f8e1 	bl	d69c <free>
        for (i = 0; i < IMGWIDTH; i++)
    34da:	3601      	adds	r6, #1
    34dc:	2e7f      	cmp	r6, #127	; 0x7f
    34de:	ddf8      	ble.n	34d2 <thread_obscount_code+0x56>
        free(image);
    34e0:	4620      	mov	r0, r4
    34e2:	f00a f8db 	bl	d69c <free>
	z_impl_k_sem_give(sem);
    34e6:	4838      	ldr	r0, [pc, #224]	; (35c8 <thread_obscount_code+0x14c>)
    34e8:	f007 fd9c 	bl	b024 <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
    34ec:	f00d f8e6 	bl	106bc <z_impl_k_uptime_ticks>
    34f0:	4603      	mov	r3, r0
    34f2:	460c      	mov	r4, r1
    34f4:	0162      	lsls	r2, r4, #5
    34f6:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
    34fa:	015b      	lsls	r3, r3, #5
    34fc:	1a1b      	subs	r3, r3, r0
    34fe:	eb62 0204 	sbc.w	r2, r2, r4
    3502:	0092      	lsls	r2, r2, #2
    3504:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    3508:	009b      	lsls	r3, r3, #2
    350a:	181b      	adds	r3, r3, r0
    350c:	eb42 0404 	adc.w	r4, r2, r4
    3510:	00e4      	lsls	r4, r4, #3
    3512:	ea44 7453 	orr.w	r4, r4, r3, lsr #29
    3516:	f3c3 3310 	ubfx	r3, r3, #12, #17
    351a:	0be6      	lsrs	r6, r4, #15
    351c:	ea43 4444 	orr.w	r4, r3, r4, lsl #17
        if (fin_time - t_prev < t_min)
    3520:	ebb4 0208 	subs.w	r2, r4, r8
    3524:	eb66 0307 	sbc.w	r3, r6, r7
    3528:	4552      	cmp	r2, sl
    352a:	eb73 0109 	sbcs.w	r1, r3, r9
    352e:	db40      	blt.n	35b2 <thread_obscount_code+0x136>
        else if (fin_time - t_prev > t_max)
    3530:	4593      	cmp	fp, r2
    3532:	eb75 0103 	sbcs.w	r1, r5, r3
    3536:	db3f      	blt.n	35b8 <thread_obscount_code+0x13c>
    3538:	f00d f8c0 	bl	106bc <z_impl_k_uptime_ticks>
    353c:	014a      	lsls	r2, r1, #5
    353e:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    3542:	0143      	lsls	r3, r0, #5
    3544:	1a1b      	subs	r3, r3, r0
    3546:	eb62 0201 	sbc.w	r2, r2, r1
    354a:	0092      	lsls	r2, r2, #2
    354c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    3550:	009b      	lsls	r3, r3, #2
    3552:	181b      	adds	r3, r3, r0
    3554:	eb42 0201 	adc.w	r2, r2, r1
    3558:	00d1      	lsls	r1, r2, #3
    355a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
    355e:	f3c3 3310 	ubfx	r3, r3, #12, #17
        printk("$obs count -> %lld\n\n", (long long) k_uptime_get());
    3562:	ea43 4241 	orr.w	r2, r3, r1, lsl #17
    3566:	0bcb      	lsrs	r3, r1, #15
    3568:	4818      	ldr	r0, [pc, #96]	; (35cc <thread_obscount_code+0x150>)
    356a:	f00b fd6f 	bl	f04c <printk>
        t_prev = fin_time;
    356e:	46a0      	mov	r8, r4
    3570:	4637      	mov	r7, r6
	return z_impl_k_sem_take(sem, timeout);
    3572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    357a:	4815      	ldr	r0, [pc, #84]	; (35d0 <thread_obscount_code+0x154>)
    357c:	f007 fd96 	bl	b0ac <z_impl_k_sem_take>
    3580:	f04f 0320 	mov.w	r3, #32
    3584:	f3ef 8211 	mrs	r2, BASEPRI
    3588:	f383 8812 	msr	BASEPRI_MAX, r3
    358c:	f3bf 8f6f 	isb	sy
        key3 = irq_lock();
    3590:	4b10      	ldr	r3, [pc, #64]	; (35d4 <thread_obscount_code+0x158>)
    3592:	601a      	str	r2, [r3, #0]
        uint8_t* cab_img = (uint8_t*)get_mes(image_cab);
    3594:	4e10      	ldr	r6, [pc, #64]	; (35d8 <thread_obscount_code+0x15c>)
    3596:	6830      	ldr	r0, [r6, #0]
    3598:	f00b fcbf 	bl	ef1a <get_mes>
    359c:	9001      	str	r0, [sp, #4]
        uint8_t ** image = castImage(cab_img);
    359e:	f00b fc14 	bl	edca <castImage>
    35a2:	4604      	mov	r4, r0
        unget((void*)cab_img, image_cab);
    35a4:	6831      	ldr	r1, [r6, #0]
    35a6:	9801      	ldr	r0, [sp, #4]
    35a8:	f00b fce0 	bl	ef6c <unget>
        nobs = 0;
    35ac:	2600      	movs	r6, #0
        for (j = 0; j < IMGWIDTH; j++)
    35ae:	4630      	mov	r0, r6
    35b0:	e786      	b.n	34c0 <thread_obscount_code+0x44>
            t_min = fin_time - t_prev;
    35b2:	4692      	mov	sl, r2
    35b4:	4699      	mov	r9, r3
    35b6:	e7bf      	b.n	3538 <thread_obscount_code+0xbc>
            t_max = fin_time - t_prev;
    35b8:	4693      	mov	fp, r2
    35ba:	461d      	mov	r5, r3
    35bc:	e7bc      	b.n	3538 <thread_obscount_code+0xbc>
    35be:	bf00      	nop
    35c0:	0001158c 	.word	0x0001158c
    35c4:	2000d714 	.word	0x2000d714
    35c8:	2000c984 	.word	0x2000c984
    35cc:	000115a4 	.word	0x000115a4
    35d0:	2000c964 	.word	0x2000c964
    35d4:	2000493c 	.word	0x2000493c
    35d8:	20004930 	.word	0x20004930

000035dc <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    35dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35e0:	b08d      	sub	sp, #52	; 0x34
    35e2:	9205      	str	r2, [sp, #20]
    35e4:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    35e6:	4613      	mov	r3, r2
    35e8:	f002 0204 	and.w	r2, r2, #4
    35ec:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    35ee:	f3c3 02c2 	ubfx	r2, r3, #3, #3

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    35f2:	f010 0303 	ands.w	r3, r0, #3
    35f6:	9302      	str	r3, [sp, #8]
    35f8:	f040 8293 	bne.w	3b22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8a>
    35fc:	4607      	mov	r7, r0
    35fe:	468a      	mov	sl, r1
    3600:	3201      	adds	r2, #1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    3602:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    3604:	2800      	cmp	r0, #0
    3606:	d041      	beq.n	368c <cbvprintf_package+0xb0>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    3608:	b127      	cbz	r7, 3614 <cbvprintf_package+0x38>
    360a:	1be3      	subs	r3, r4, r7
    360c:	3304      	adds	r3, #4
    360e:	4553      	cmp	r3, sl
    3610:	f200 828a 	bhi.w	3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
    3614:	9b03      	ldr	r3, [sp, #12]
    3616:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    3618:	f8dd b008 	ldr.w	fp, [sp, #8]
    361c:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    3620:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
    3624:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
    3626:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
    362a:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    362c:	b10f      	cbz	r7, 3632 <cbvprintf_package+0x56>
				*(const char **)buf = s;
    362e:	9b03      	ldr	r3, [sp, #12]
    3630:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    3632:	1e53      	subs	r3, r2, #1
    3634:	9307      	str	r3, [sp, #28]
    3636:	2a00      	cmp	r2, #0
    3638:	f340 80b7 	ble.w	37aa <cbvprintf_package+0x1ce>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
    363c:	9b05      	ldr	r3, [sp, #20]
    363e:	f013 0202 	ands.w	r2, r3, #2
    3642:	d021      	beq.n	3688 <cbvprintf_package+0xac>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    3644:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    3646:	1be1      	subs	r1, r4, r7
    3648:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    364a:	b11a      	cbz	r2, 3654 <cbvprintf_package+0x78>
    364c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    3650:	f080 80bf 	bcs.w	37d2 <cbvprintf_package+0x1f6>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    3654:	f1bb 0f0f 	cmp.w	fp, #15
    3658:	f200 80ce 	bhi.w	37f8 <cbvprintf_package+0x21c>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
    365c:	2f00      	cmp	r7, #0
    365e:	f000 80e2 	beq.w	3826 <cbvprintf_package+0x24a>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
    3662:	b2db      	uxtb	r3, r3
    3664:	aa0c      	add	r2, sp, #48	; 0x30
    3666:	445a      	add	r2, fp
    3668:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
    366c:	2800      	cmp	r0, #0
    366e:	f000 80d6 	beq.w	381e <cbvprintf_package+0x242>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    3672:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3676:	aa0c      	add	r2, sp, #48	; 0x30
    3678:	445a      	add	r2, fp
    367a:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
    367e:	9b04      	ldr	r3, [sp, #16]
    3680:	3301      	adds	r3, #1
    3682:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
    3684:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
    3688:	3404      	adds	r4, #4
    368a:	e0f6      	b.n	387a <cbvprintf_package+0x29e>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    368c:	f001 0a07 	and.w	sl, r1, #7
    3690:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    3692:	f1ca 0a08 	rsb	sl, sl, #8
    3696:	e7b7      	b.n	3608 <cbvprintf_package+0x2c>
			if (*fmt == '%') {
    3698:	2b25      	cmp	r3, #37	; 0x25
    369a:	f040 80ed 	bne.w	3878 <cbvprintf_package+0x29c>
				parsing = true;
    369e:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
    36a0:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
    36a4:	46c1      	mov	r9, r8
			continue;
    36a6:	e0e7      	b.n	3878 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(intmax_t);
    36a8:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
    36ac:	46c1      	mov	r9, r8
			continue;
    36ae:	e0e3      	b.n	3878 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(size_t);
    36b0:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
    36b4:	46c1      	mov	r9, r8
			continue;
    36b6:	e0df      	b.n	3878 <cbvprintf_package+0x29c>
			align = VA_STACK_ALIGN(ptrdiff_t);
    36b8:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
    36bc:	46c1      	mov	r9, r8
			continue;
    36be:	e0db      	b.n	3878 <cbvprintf_package+0x29c>
			if (fmt[-1] == 'l') {
    36c0:	782a      	ldrb	r2, [r5, #0]
    36c2:	2a6c      	cmp	r2, #108	; 0x6c
    36c4:	d026      	beq.n	3714 <cbvprintf_package+0x138>
			parsing = false;
    36c6:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
    36c8:	eb04 0208 	add.w	r2, r4, r8
    36cc:	3a01      	subs	r2, #1
    36ce:	f1c8 0100 	rsb	r1, r8, #0
    36d2:	400a      	ands	r2, r1
    36d4:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    36d6:	b127      	cbz	r7, 36e2 <cbvprintf_package+0x106>
    36d8:	1bd1      	subs	r1, r2, r7
    36da:	4449      	add	r1, r9
    36dc:	458a      	cmp	sl, r1
    36de:	f0c0 8226 	bcc.w	3b2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x96>
		if (*fmt == 's') {
    36e2:	2b73      	cmp	r3, #115	; 0x73
    36e4:	d059      	beq.n	379a <cbvprintf_package+0x1be>
		} else if (size == sizeof(int)) {
    36e6:	f1b9 0f04 	cmp.w	r9, #4
    36ea:	f000 80a8 	beq.w	383e <cbvprintf_package+0x262>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
    36ee:	f1b9 0f08 	cmp.w	r9, #8
    36f2:	f040 80ac 	bne.w	384e <cbvprintf_package+0x272>
			long long v = va_arg(ap, long long);
    36f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    36f8:	3307      	adds	r3, #7
    36fa:	f023 0307 	bic.w	r3, r3, #7
    36fe:	f103 0108 	add.w	r1, r3, #8
    3702:	9116      	str	r1, [sp, #88]	; 0x58
    3704:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
    3708:	b10f      	cbz	r7, 370e <cbvprintf_package+0x132>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
    370a:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
    370e:	f102 0408 	add.w	r4, r2, #8
    3712:	e0b1      	b.n	3878 <cbvprintf_package+0x29c>
				if (fmt[-2] == 'l') {
    3714:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
    3718:	2a6c      	cmp	r2, #108	; 0x6c
    371a:	d004      	beq.n	3726 <cbvprintf_package+0x14a>
			parsing = false;
    371c:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
    371e:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
    3722:	46c1      	mov	r9, r8
    3724:	e7d0      	b.n	36c8 <cbvprintf_package+0xec>
			parsing = false;
    3726:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
    3728:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
    372c:	46c1      	mov	r9, r8
    372e:	e7cb      	b.n	36c8 <cbvprintf_package+0xec>
			if (fmt[-1] == 'L') {
    3730:	782b      	ldrb	r3, [r5, #0]
    3732:	2b4c      	cmp	r3, #76	; 0x4c
    3734:	d01c      	beq.n	3770 <cbvprintf_package+0x194>
				v.d = va_arg(ap, double);
    3736:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3738:	3307      	adds	r3, #7
    373a:	f023 0307 	bic.w	r3, r3, #7
    373e:	f103 0208 	add.w	r2, r3, #8
    3742:	9216      	str	r2, [sp, #88]	; 0x58
    3744:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
    3748:	1de2      	adds	r2, r4, #7
    374a:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
    374e:	b147      	cbz	r7, 3762 <cbvprintf_package+0x186>
				if (BUF_OFFSET + size > len) {
    3750:	1bd3      	subs	r3, r2, r7
    3752:	3308      	adds	r3, #8
    3754:	4553      	cmp	r3, sl
    3756:	d815      	bhi.n	3784 <cbvprintf_package+0x1a8>
				} else if (fmt[-1] == 'L') {
    3758:	782b      	ldrb	r3, [r5, #0]
    375a:	2b4c      	cmp	r3, #76	; 0x4c
    375c:	d015      	beq.n	378a <cbvprintf_package+0x1ae>
					*(double *)buf = v.d;
    375e:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
    3762:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
    3766:	2600      	movs	r6, #0
			continue;
    3768:	f04f 0808 	mov.w	r8, #8
    376c:	46c1      	mov	r9, r8
    376e:	e083      	b.n	3878 <cbvprintf_package+0x29c>
				v.ld = va_arg(ap, long double);
    3770:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3772:	3307      	adds	r3, #7
    3774:	f023 0307 	bic.w	r3, r3, #7
    3778:	f103 0208 	add.w	r2, r3, #8
    377c:	9216      	str	r2, [sp, #88]	; 0x58
    377e:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
    3782:	e7e1      	b.n	3748 <cbvprintf_package+0x16c>
					return -ENOSPC;
    3784:	f06f 001b 	mvn.w	r0, #27
    3788:	e1c8      	b.n	3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
					*(long double *)buf = v.ld;
    378a:	e9c2 0100 	strd	r0, r1, [r2]
    378e:	e7e8      	b.n	3762 <cbvprintf_package+0x186>
			parsing = false;
    3790:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
    3792:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
    3796:	46c1      	mov	r9, r8
    3798:	e796      	b.n	36c8 <cbvprintf_package+0xec>
			s = va_arg(ap, char *);
    379a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    379c:	1d1a      	adds	r2, r3, #4
    379e:	9216      	str	r2, [sp, #88]	; 0x58
    37a0:	681b      	ldr	r3, [r3, #0]
    37a2:	9303      	str	r3, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    37a4:	9a07      	ldr	r2, [sp, #28]
	while (*++fmt != '\0') {
    37a6:	4665      	mov	r5, ip
    37a8:	e740      	b.n	362c <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    37aa:	4bbb      	ldr	r3, [pc, #748]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    37ac:	9a03      	ldr	r2, [sp, #12]
    37ae:	429a      	cmp	r2, r3
    37b0:	d304      	bcc.n	37bc <cbvprintf_package+0x1e0>
    37b2:	4bba      	ldr	r3, [pc, #744]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    37b4:	429a      	cmp	r2, r3
    37b6:	d30a      	bcc.n	37ce <cbvprintf_package+0x1f2>
    37b8:	2300      	movs	r3, #0
    37ba:	e000      	b.n	37be <cbvprintf_package+0x1e2>
    37bc:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    37be:	2b00      	cmp	r3, #0
    37c0:	f47f af3c 	bne.w	363c <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    37c4:	9b05      	ldr	r3, [sp, #20]
    37c6:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    37ca:	2000      	movs	r0, #0
    37cc:	e73b      	b.n	3646 <cbvprintf_package+0x6a>
    37ce:	2301      	movs	r3, #1
    37d0:	e7f5      	b.n	37be <cbvprintf_package+0x1e2>
					__ASSERT(false, "String with too many arguments");
    37d2:	4cb3      	ldr	r4, [pc, #716]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    37d4:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    37d8:	4622      	mov	r2, r4
    37da:	49b2      	ldr	r1, [pc, #712]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    37dc:	48b2      	ldr	r0, [pc, #712]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    37de:	f00b fd3e 	bl	f25e <assert_print>
    37e2:	48b2      	ldr	r0, [pc, #712]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    37e4:	f00b fd3b 	bl	f25e <assert_print>
    37e8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    37ec:	4620      	mov	r0, r4
    37ee:	f00b fd2f 	bl	f250 <assert_post_action>
					return -EINVAL;
    37f2:	f06f 0015 	mvn.w	r0, #21
    37f6:	e191      	b.n	3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
					__ASSERT(false, "str_ptr_pos[] too small");
    37f8:	4ca9      	ldr	r4, [pc, #676]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    37fa:	f240 13f5 	movw	r3, #501	; 0x1f5
    37fe:	4622      	mov	r2, r4
    3800:	49a8      	ldr	r1, [pc, #672]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3802:	48a9      	ldr	r0, [pc, #676]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3804:	f00b fd2b 	bl	f25e <assert_print>
    3808:	48a9      	ldr	r0, [pc, #676]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    380a:	f00b fd28 	bl	f25e <assert_print>
    380e:	f240 11f5 	movw	r1, #501	; 0x1f5
    3812:	4620      	mov	r0, r4
    3814:	f00b fd1c 	bl	f250 <assert_post_action>
					return -EINVAL;
    3818:	f06f 0015 	mvn.w	r0, #21
    381c:	e17e      	b.n	3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
						s_rw_cnt++;
    381e:	9b06      	ldr	r3, [sp, #24]
    3820:	3301      	adds	r3, #1
    3822:	9306      	str	r3, [sp, #24]
    3824:	e72e      	b.n	3684 <cbvprintf_package+0xa8>
				} else if (is_ro || rws_pos_en) {
    3826:	b908      	cbnz	r0, 382c <cbvprintf_package+0x250>
    3828:	9b01      	ldr	r3, [sp, #4]
    382a:	b113      	cbz	r3, 3832 <cbvprintf_package+0x256>
					len += 1;
    382c:	f10a 0a01 	add.w	sl, sl, #1
    3830:	e728      	b.n	3684 <cbvprintf_package+0xa8>
					len += strlen(s) + 1 + 1;
    3832:	9803      	ldr	r0, [sp, #12]
    3834:	f7fd fb0f 	bl	e56 <strlen>
    3838:	1c83      	adds	r3, r0, #2
    383a:	449a      	add	sl, r3
    383c:	e722      	b.n	3684 <cbvprintf_package+0xa8>
			int v = va_arg(ap, int);
    383e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3840:	1d19      	adds	r1, r3, #4
    3842:	9116      	str	r1, [sp, #88]	; 0x58
    3844:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
    3846:	b107      	cbz	r7, 384a <cbvprintf_package+0x26e>
				*(int *)buf = v;
    3848:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
    384a:	1d14      	adds	r4, r2, #4
    384c:	e014      	b.n	3878 <cbvprintf_package+0x29c>
		} else {
			__ASSERT(false, "unexpected size %u", size);
    384e:	4c94      	ldr	r4, [pc, #592]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3850:	f240 2331 	movw	r3, #561	; 0x231
    3854:	4622      	mov	r2, r4
    3856:	4993      	ldr	r1, [pc, #588]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3858:	4893      	ldr	r0, [pc, #588]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    385a:	f00b fd00 	bl	f25e <assert_print>
    385e:	4649      	mov	r1, r9
    3860:	4894      	ldr	r0, [pc, #592]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    3862:	f00b fcfc 	bl	f25e <assert_print>
    3866:	f240 2131 	movw	r1, #561	; 0x231
    386a:	4620      	mov	r0, r4
    386c:	f00b fcf0 	bl	f250 <assert_post_action>
			return -EINVAL;
    3870:	f06f 0015 	mvn.w	r0, #21
    3874:	e152      	b.n	3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
		switch (*fmt) {
    3876:	2600      	movs	r6, #0
    3878:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
    387a:	f105 0c01 	add.w	ip, r5, #1
    387e:	786b      	ldrb	r3, [r5, #1]
    3880:	2b00      	cmp	r3, #0
    3882:	f000 80c1 	beq.w	3a08 <cbvprintf_package+0x42c>
		if (!parsing) {
    3886:	2e00      	cmp	r6, #0
    3888:	f43f af06 	beq.w	3698 <cbvprintf_package+0xbc>
		switch (*fmt) {
    388c:	f1a3 0120 	sub.w	r1, r3, #32
    3890:	295a      	cmp	r1, #90	; 0x5a
    3892:	d8f0      	bhi.n	3876 <cbvprintf_package+0x29a>
    3894:	a201      	add	r2, pc, #4	; (adr r2, 389c <cbvprintf_package+0x2c0>)
    3896:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
    389a:	bf00      	nop
    389c:	00003879 	.word	0x00003879
    38a0:	00003877 	.word	0x00003877
    38a4:	00003877 	.word	0x00003877
    38a8:	00003879 	.word	0x00003879
    38ac:	00003877 	.word	0x00003877
    38b0:	00003877 	.word	0x00003877
    38b4:	00003877 	.word	0x00003877
    38b8:	00003877 	.word	0x00003877
    38bc:	00003877 	.word	0x00003877
    38c0:	00003877 	.word	0x00003877
    38c4:	000036c9 	.word	0x000036c9
    38c8:	00003879 	.word	0x00003879
    38cc:	00003877 	.word	0x00003877
    38d0:	00003879 	.word	0x00003879
    38d4:	00003879 	.word	0x00003879
    38d8:	00003877 	.word	0x00003877
    38dc:	00003879 	.word	0x00003879
    38e0:	00003879 	.word	0x00003879
    38e4:	00003879 	.word	0x00003879
    38e8:	00003879 	.word	0x00003879
    38ec:	00003879 	.word	0x00003879
    38f0:	00003879 	.word	0x00003879
    38f4:	00003879 	.word	0x00003879
    38f8:	00003879 	.word	0x00003879
    38fc:	00003879 	.word	0x00003879
    3900:	00003879 	.word	0x00003879
    3904:	00003877 	.word	0x00003877
    3908:	00003877 	.word	0x00003877
    390c:	00003877 	.word	0x00003877
    3910:	00003877 	.word	0x00003877
    3914:	00003877 	.word	0x00003877
    3918:	00003877 	.word	0x00003877
    391c:	00003877 	.word	0x00003877
    3920:	00003731 	.word	0x00003731
    3924:	00003877 	.word	0x00003877
    3928:	00003877 	.word	0x00003877
    392c:	00003877 	.word	0x00003877
    3930:	00003731 	.word	0x00003731
    3934:	00003731 	.word	0x00003731
    3938:	00003731 	.word	0x00003731
    393c:	00003877 	.word	0x00003877
    3940:	00003877 	.word	0x00003877
    3944:	00003877 	.word	0x00003877
    3948:	00003877 	.word	0x00003877
    394c:	00003879 	.word	0x00003879
    3950:	00003877 	.word	0x00003877
    3954:	00003877 	.word	0x00003877
    3958:	00003877 	.word	0x00003877
    395c:	00003877 	.word	0x00003877
    3960:	00003877 	.word	0x00003877
    3964:	00003877 	.word	0x00003877
    3968:	00003877 	.word	0x00003877
    396c:	00003877 	.word	0x00003877
    3970:	00003877 	.word	0x00003877
    3974:	00003877 	.word	0x00003877
    3978:	00003877 	.word	0x00003877
    397c:	000036c1 	.word	0x000036c1
    3980:	00003877 	.word	0x00003877
    3984:	00003877 	.word	0x00003877
    3988:	00003877 	.word	0x00003877
    398c:	00003877 	.word	0x00003877
    3990:	00003877 	.word	0x00003877
    3994:	00003877 	.word	0x00003877
    3998:	00003877 	.word	0x00003877
    399c:	00003877 	.word	0x00003877
    39a0:	00003731 	.word	0x00003731
    39a4:	00003877 	.word	0x00003877
    39a8:	000036c1 	.word	0x000036c1
    39ac:	000036c1 	.word	0x000036c1
    39b0:	00003731 	.word	0x00003731
    39b4:	00003731 	.word	0x00003731
    39b8:	00003731 	.word	0x00003731
    39bc:	00003879 	.word	0x00003879
    39c0:	000036c1 	.word	0x000036c1
    39c4:	000036a9 	.word	0x000036a9
    39c8:	00003877 	.word	0x00003877
    39cc:	00003879 	.word	0x00003879
    39d0:	00003877 	.word	0x00003877
    39d4:	00003791 	.word	0x00003791
    39d8:	000036c1 	.word	0x000036c1
    39dc:	00003791 	.word	0x00003791
    39e0:	00003877 	.word	0x00003877
    39e4:	00003877 	.word	0x00003877
    39e8:	00003791 	.word	0x00003791
    39ec:	000036b9 	.word	0x000036b9
    39f0:	000036c1 	.word	0x000036c1
    39f4:	00003877 	.word	0x00003877
    39f8:	00003877 	.word	0x00003877
    39fc:	000036c1 	.word	0x000036c1
    3a00:	00003877 	.word	0x00003877
    3a04:	000036b1 	.word	0x000036b1
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
    3a08:	1be3      	subs	r3, r4, r7
    3a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3a0e:	d211      	bcs.n	3a34 <cbvprintf_package+0x458>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
    3a10:	b31f      	cbz	r7, 3a5a <cbvprintf_package+0x47e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
    3a12:	2200      	movs	r2, #0
    3a14:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	buf0[0] = BUF_OFFSET / sizeof(int);
    3a16:	089b      	lsrs	r3, r3, #2
    3a18:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
    3a1a:	9b01      	ldr	r3, [sp, #4]
    3a1c:	b30b      	cbz	r3, 3a62 <cbvprintf_package+0x486>
		/* Strings are appended, update location counter. */
		buf0[1] = 0;
		buf0[3] = s_rw_cnt;
    3a1e:	9b06      	ldr	r3, [sp, #24]
    3a20:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		buf0[1] = s_rw_cnt;
		buf0[3] = 0;
	}

	buf0[2] = s_ro_cnt;
    3a22:	9b04      	ldr	r3, [sp, #16]
    3a24:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
    3a26:	bbab      	cbnz	r3, 3a94 <cbvprintf_package+0x4b8>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
    3a28:	9d02      	ldr	r5, [sp, #8]
    3a2a:	f8dd 9010 	ldr.w	r9, [sp, #16]
    3a2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
    3a32:	e058      	b.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
		__ASSERT(false, "too many format args");
    3a34:	4c1a      	ldr	r4, [pc, #104]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a36:	f240 233d 	movw	r3, #573	; 0x23d
    3a3a:	4622      	mov	r2, r4
    3a3c:	4919      	ldr	r1, [pc, #100]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a3e:	481a      	ldr	r0, [pc, #104]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a40:	f00b fc0d 	bl	f25e <assert_print>
    3a44:	481c      	ldr	r0, [pc, #112]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a46:	f00b fc0a 	bl	f25e <assert_print>
    3a4a:	f240 213d 	movw	r1, #573	; 0x23d
    3a4e:	4620      	mov	r0, r4
    3a50:	f00b fbfe 	bl	f250 <assert_post_action>
		return -EINVAL;
    3a54:	f06f 0015 	mvn.w	r0, #21
    3a58:	e060      	b.n	3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    3a5a:	4453      	add	r3, sl
    3a5c:	f1a3 0008 	sub.w	r0, r3, #8
    3a60:	e05c      	b.n	3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
		buf0[1] = s_rw_cnt;
    3a62:	9b06      	ldr	r3, [sp, #24]
    3a64:	707b      	strb	r3, [r7, #1]
		buf0[3] = 0;
    3a66:	e7dc      	b.n	3a22 <cbvprintf_package+0x446>
			*buf++ = pos;
    3a68:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    3a6c:	3301      	adds	r3, #1
    3a6e:	459b      	cmp	fp, r3
    3a70:	d9da      	bls.n	3a28 <cbvprintf_package+0x44c>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    3a72:	aa0c      	add	r2, sp, #48	; 0x30
    3a74:	441a      	add	r2, r3
    3a76:	f812 1c10 	ldrb.w	r1, [r2, #-16]
    3a7a:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
    3a7e:	2a00      	cmp	r2, #0
    3a80:	daf4      	bge.n	3a6c <cbvprintf_package+0x490>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    3a82:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    3a86:	1be2      	subs	r2, r4, r7
    3a88:	3201      	adds	r2, #1
    3a8a:	4592      	cmp	sl, r2
    3a8c:	d2ec      	bcs.n	3a68 <cbvprintf_package+0x48c>
				return -ENOSPC;
    3a8e:	f06f 001b 	mvn.w	r0, #27
    3a92:	e043      	b.n	3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
		for (i = 0; i < s_idx; i++) {
    3a94:	9b02      	ldr	r3, [sp, #8]
    3a96:	e7ea      	b.n	3a6e <cbvprintf_package+0x492>
    3a98:	00010da8 	.word	0x00010da8
    3a9c:	00013668 	.word	0x00013668
    3aa0:	000115c4 	.word	0x000115c4
    3aa4:	00011cc8 	.word	0x00011cc8
    3aa8:	0001160c 	.word	0x0001160c
    3aac:	0001162c 	.word	0x0001162c
    3ab0:	00011650 	.word	0x00011650
    3ab4:	0001166c 	.word	0x0001166c
    3ab8:	00011684 	.word	0x00011684
		if (rws_pos_en) {
    3abc:	9b01      	ldr	r3, [sp, #4]
    3abe:	b1f3      	cbz	r3, 3afe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x66>
			size = 0;
    3ac0:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
    3ac2:	1be3      	subs	r3, r4, r7
    3ac4:	4433      	add	r3, r6
    3ac6:	3301      	adds	r3, #1
    3ac8:	459a      	cmp	sl, r3
    3aca:	d333      	bcc.n	3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
    3acc:	ab0c      	add	r3, sp, #48	; 0x30
    3ace:	442b      	add	r3, r5
    3ad0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    3ad4:	f804 3b01 	strb.w	r3, [r4], #1
    3ad8:	4632      	mov	r2, r6
    3ada:	4641      	mov	r1, r8
    3adc:	4620      	mov	r0, r4
    3ade:	f00c fe49 	bl	10774 <memcpy>
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
    3ae2:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
    3ae4:	3501      	adds	r5, #1
    3ae6:	45ab      	cmp	fp, r5
    3ae8:	d917      	bls.n	3b1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x82>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    3aea:	f1b9 0f00 	cmp.w	r9, #0
    3aee:	d0e5      	beq.n	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
    3af0:	ab0c      	add	r3, sp, #48	; 0x30
    3af2:	442b      	add	r3, r5
    3af4:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
    3af8:	2b00      	cmp	r3, #0
    3afa:	dadf      	bge.n	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
    3afc:	e7f2      	b.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    3afe:	ab0c      	add	r3, sp, #48	; 0x30
    3b00:	442b      	add	r3, r5
    3b02:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    3b06:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    3b0a:	2200      	movs	r2, #0
    3b0c:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
    3b10:	4640      	mov	r0, r8
    3b12:	f7fd f9a0 	bl	e56 <strlen>
    3b16:	1c46      	adds	r6, r0, #1
    3b18:	e7d3      	b.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
    3b1a:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    3b1c:	b00d      	add	sp, #52	; 0x34
    3b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
    3b22:	f06f 000d 	mvn.w	r0, #13
    3b26:	e7f9      	b.n	3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
		return -ENOSPC;
    3b28:	f06f 001b 	mvn.w	r0, #27
    3b2c:	e7f6      	b.n	3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
			return -ENOSPC;
    3b2e:	f06f 001b 	mvn.w	r0, #27
    3b32:	e7f3      	b.n	3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
			return -ENOSPC;
    3b34:	f06f 001b 	mvn.w	r0, #27
    3b38:	e7f0      	b.n	3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>
    3b3a:	bf00      	nop

00003b3c <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    3b3c:	b538      	push	{r3, r4, r5, lr}
    3b3e:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3b40:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    3b42:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    3b46:	6081      	str	r1, [r0, #8]
	switch (method) {
    3b48:	2b02      	cmp	r3, #2
    3b4a:	d903      	bls.n	3b54 <sys_notify_finalize+0x18>
    3b4c:	2b03      	cmp	r3, #3
    3b4e:	d102      	bne.n	3b56 <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    3b50:	6800      	ldr	r0, [r0, #0]
		break;
    3b52:	e00e      	b.n	3b72 <sys_notify_finalize+0x36>
	switch (method) {
    3b54:	b963      	cbnz	r3, 3b70 <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
    3b56:	4d08      	ldr	r5, [pc, #32]	; (3b78 <sys_notify_finalize+0x3c>)
    3b58:	2345      	movs	r3, #69	; 0x45
    3b5a:	462a      	mov	r2, r5
    3b5c:	4907      	ldr	r1, [pc, #28]	; (3b7c <sys_notify_finalize+0x40>)
    3b5e:	4808      	ldr	r0, [pc, #32]	; (3b80 <sys_notify_finalize+0x44>)
    3b60:	f00b fb7d 	bl	f25e <assert_print>
    3b64:	2145      	movs	r1, #69	; 0x45
    3b66:	4628      	mov	r0, r5
    3b68:	f00b fb72 	bl	f250 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    3b6c:	2000      	movs	r0, #0
    3b6e:	e000      	b.n	3b72 <sys_notify_finalize+0x36>
	switch (method) {
    3b70:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    3b72:	2300      	movs	r3, #0
    3b74:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    3b76:	bd38      	pop	{r3, r4, r5, pc}
    3b78:	0001169c 	.word	0x0001169c
    3b7c:	00011cc8 	.word	0x00011cc8
    3b80:	0001160c 	.word	0x0001160c

00003b84 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    3b84:	4b01      	ldr	r3, [pc, #4]	; (3b8c <__printk_hook_install+0x8>)
    3b86:	6018      	str	r0, [r3, #0]
}
    3b88:	4770      	bx	lr
    3b8a:	bf00      	nop
    3b8c:	20004014 	.word	0x20004014

00003b90 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
    3b90:	b538      	push	{r3, r4, r5, lr}
    3b92:	4604      	mov	r4, r0
    3b94:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3b96:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
    3b98:	2a00      	cmp	r2, #0
    3b9a:	db14      	blt.n	3bc6 <process_complete+0x36>
    3b9c:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
    3ba0:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    3ba2:	2a01      	cmp	r2, #1
    3ba4:	d91b      	bls.n	3bde <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
    3ba6:	2b04      	cmp	r3, #4
    3ba8:	d050      	beq.n	3c4c <process_complete+0xbc>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
    3baa:	4c2f      	ldr	r4, [pc, #188]	; (3c68 <process_complete+0xd8>)
    3bac:	f240 131b 	movw	r3, #283	; 0x11b
    3bb0:	4622      	mov	r2, r4
    3bb2:	492e      	ldr	r1, [pc, #184]	; (3c6c <process_complete+0xdc>)
    3bb4:	482e      	ldr	r0, [pc, #184]	; (3c70 <process_complete+0xe0>)
    3bb6:	f00b fb52 	bl	f25e <assert_print>
    3bba:	f240 111b 	movw	r1, #283	; 0x11b
    3bbe:	4620      	mov	r0, r4
    3bc0:	f00b fb46 	bl	f250 <assert_post_action>
	}
}
    3bc4:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    3bc6:	e9d0 0100 	ldrd	r0, r1, [r0]
    3bca:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    3bce:	2300      	movs	r3, #0
    3bd0:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    3bd2:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    3bd4:	2101      	movs	r1, #1
    3bd6:	4620      	mov	r0, r4
    3bd8:	f00b fa46 	bl	f068 <set_state>
    3bdc:	e7f2      	b.n	3bc4 <process_complete+0x34>
		*clients = mgr->clients;
    3bde:	e9d0 0100 	ldrd	r0, r1, [r0]
    3be2:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    3be6:	2200      	movs	r2, #0
    3be8:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    3bea:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    3bec:	2b06      	cmp	r3, #6
    3bee:	d00f      	beq.n	3c10 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    3bf0:	2b05      	cmp	r3, #5
    3bf2:	d11d      	bne.n	3c30 <process_complete+0xa0>
			set_state(mgr, ONOFF_STATE_OFF);
    3bf4:	2100      	movs	r1, #0
    3bf6:	4620      	mov	r0, r4
    3bf8:	f00b fa36 	bl	f068 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    3bfc:	4620      	mov	r0, r4
    3bfe:	f00b fa5a 	bl	f0b6 <process_recheck>
    3c02:	2800      	cmp	r0, #0
    3c04:	d0de      	beq.n	3bc4 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3c06:	8ba3      	ldrh	r3, [r4, #28]
    3c08:	f043 0320 	orr.w	r3, r3, #32
    3c0c:	83a3      	strh	r3, [r4, #28]
    3c0e:	e7d9      	b.n	3bc4 <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    3c10:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3c14:	b13b      	cbz	r3, 3c26 <process_complete+0x96>
				mgr->refs += 1U;
    3c16:	8be2      	ldrh	r2, [r4, #30]
    3c18:	3201      	adds	r2, #1
    3c1a:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    3c1c:	2b00      	cmp	r3, #0
    3c1e:	d0f9      	beq.n	3c14 <process_complete+0x84>
	return node->next;
    3c20:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3c22:	2b00      	cmp	r3, #0
    3c24:	d1f6      	bne.n	3c14 <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
    3c26:	2102      	movs	r1, #2
    3c28:	4620      	mov	r0, r4
    3c2a:	f00b fa1d 	bl	f068 <set_state>
    3c2e:	e7e5      	b.n	3bfc <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
    3c30:	4d0d      	ldr	r5, [pc, #52]	; (3c68 <process_complete+0xd8>)
    3c32:	f240 1309 	movw	r3, #265	; 0x109
    3c36:	462a      	mov	r2, r5
    3c38:	490e      	ldr	r1, [pc, #56]	; (3c74 <process_complete+0xe4>)
    3c3a:	480d      	ldr	r0, [pc, #52]	; (3c70 <process_complete+0xe0>)
    3c3c:	f00b fb0f 	bl	f25e <assert_print>
    3c40:	f240 1109 	movw	r1, #265	; 0x109
    3c44:	4628      	mov	r0, r5
    3c46:	f00b fb03 	bl	f250 <assert_post_action>
    3c4a:	e7d3      	b.n	3bf4 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
    3c4c:	2100      	movs	r1, #0
    3c4e:	f00b fa0b 	bl	f068 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    3c52:	4620      	mov	r0, r4
    3c54:	f00b fa2f 	bl	f0b6 <process_recheck>
    3c58:	2800      	cmp	r0, #0
    3c5a:	d0b3      	beq.n	3bc4 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3c5c:	8ba3      	ldrh	r3, [r4, #28]
    3c5e:	f043 0320 	orr.w	r3, r3, #32
    3c62:	83a3      	strh	r3, [r4, #28]
    3c64:	e7ae      	b.n	3bc4 <process_complete+0x34>
    3c66:	bf00      	nop
    3c68:	000116c0 	.word	0x000116c0
    3c6c:	00011cc8 	.word	0x00011cc8
    3c70:	0001160c 	.word	0x0001160c
    3c74:	000116e4 	.word	0x000116e4

00003c78 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    3c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c7c:	b083      	sub	sp, #12
    3c7e:	4604      	mov	r4, r0
    3c80:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3c82:	8b83      	ldrh	r3, [r0, #28]
    3c84:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
    3c88:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
    3c8c:	460d      	mov	r5, r1
    3c8e:	b131      	cbz	r1, 3c9e <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    3c90:	f1b8 0f00 	cmp.w	r8, #0
    3c94:	d112      	bne.n	3cbc <process_event+0x44>
	list->head = NULL;
    3c96:	2300      	movs	r3, #0
    3c98:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    3c9a:	9301      	str	r3, [sp, #4]
}
    3c9c:	e0aa      	b.n	3df4 <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
    3c9e:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 3f80 <process_event+0x308>
    3ca2:	f240 1333 	movw	r3, #307	; 0x133
    3ca6:	464a      	mov	r2, r9
    3ca8:	49b6      	ldr	r1, [pc, #728]	; (3f84 <process_event+0x30c>)
    3caa:	48b7      	ldr	r0, [pc, #732]	; (3f88 <process_event+0x310>)
    3cac:	f00b fad7 	bl	f25e <assert_print>
    3cb0:	f240 1133 	movw	r1, #307	; 0x133
    3cb4:	4648      	mov	r0, r9
    3cb6:	f00b facb 	bl	f250 <assert_post_action>
    3cba:	e7e9      	b.n	3c90 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
    3cbc:	2d01      	cmp	r5, #1
    3cbe:	d013      	beq.n	3ce8 <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    3cc0:	2d02      	cmp	r5, #2
    3cc2:	d116      	bne.n	3cf2 <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
    3cc4:	8ba3      	ldrh	r3, [r4, #28]
    3cc6:	f043 0320 	orr.w	r3, r3, #32
    3cca:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    3ccc:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3cce:	4620      	mov	r0, r4
    3cd0:	f006 fd84 	bl	a7dc <z_spin_unlock_valid>
    3cd4:	2800      	cmp	r0, #0
    3cd6:	f000 819c 	beq.w	4012 <process_event+0x39a>
	__asm__ volatile(
    3cda:	f386 8811 	msr	BASEPRI, r6
    3cde:	f3bf 8f6f 	isb	sy
}
    3ce2:	b003      	add	sp, #12
    3ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    3ce8:	8ba3      	ldrh	r3, [r4, #28]
    3cea:	f043 0310 	orr.w	r3, r3, #16
    3cee:	83a3      	strh	r3, [r4, #28]
    3cf0:	e7ec      	b.n	3ccc <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
    3cf2:	4da3      	ldr	r5, [pc, #652]	; (3f80 <process_event+0x308>)
    3cf4:	f44f 739e 	mov.w	r3, #316	; 0x13c
    3cf8:	462a      	mov	r2, r5
    3cfa:	49a4      	ldr	r1, [pc, #656]	; (3f8c <process_event+0x314>)
    3cfc:	48a2      	ldr	r0, [pc, #648]	; (3f88 <process_event+0x310>)
    3cfe:	f00b faae 	bl	f25e <assert_print>
    3d02:	f44f 719e 	mov.w	r1, #316	; 0x13c
    3d06:	4628      	mov	r0, r5
    3d08:	f00b faa2 	bl	f250 <assert_post_action>
    3d0c:	e7da      	b.n	3cc4 <process_event+0x4c>
			evt = process_recheck(mgr);
    3d0e:	4620      	mov	r0, r4
    3d10:	f00b f9d1 	bl	f0b6 <process_recheck>
    3d14:	4605      	mov	r5, r0
    3d16:	e06f      	b.n	3df8 <process_event+0x180>
			res = mgr->last_res;
    3d18:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
    3d1c:	464a      	mov	r2, r9
    3d1e:	4669      	mov	r1, sp
    3d20:	4620      	mov	r0, r4
    3d22:	f7ff ff35 	bl	3b90 <process_complete>
		onoff_transition_fn transit = NULL;
    3d26:	2500      	movs	r5, #0
    3d28:	e011      	b.n	3d4e <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    3d2a:	2f00      	cmp	r7, #0
    3d2c:	f040 8081 	bne.w	3e32 <process_event+0x1ba>
	return list->head;
    3d30:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    3d32:	2b00      	cmp	r3, #0
    3d34:	f000 808b 	beq.w	3e4e <process_event+0x1d6>
			transit = mgr->transitions->start;
    3d38:	6923      	ldr	r3, [r4, #16]
    3d3a:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    3d3c:	2d00      	cmp	r5, #0
    3d3e:	f000 8094 	beq.w	3e6a <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
    3d42:	2106      	movs	r1, #6
    3d44:	4620      	mov	r0, r4
    3d46:	f00b f98f 	bl	f068 <set_state>
		res = 0;
    3d4a:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3d4e:	8ba3      	ldrh	r3, [r4, #28]
    3d50:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    3d54:	45b8      	cmp	r8, r7
    3d56:	f000 810b 	beq.w	3f70 <process_event+0x2f8>
    3d5a:	68a2      	ldr	r2, [r4, #8]
    3d5c:	2a00      	cmp	r2, #0
    3d5e:	f000 8109 	beq.w	3f74 <process_event+0x2fc>
    3d62:	2201      	movs	r2, #1
		if (do_monitors
    3d64:	4617      	mov	r7, r2
    3d66:	b91a      	cbnz	r2, 3d70 <process_event+0xf8>
    3d68:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    3d6a:	2a00      	cmp	r2, #0
    3d6c:	f000 8104 	beq.w	3f78 <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    3d70:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    3d74:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    3d76:	f104 0a14 	add.w	sl, r4, #20
    3d7a:	4650      	mov	r0, sl
    3d7c:	f006 fd2e 	bl	a7dc <z_spin_unlock_valid>
    3d80:	2800      	cmp	r0, #0
    3d82:	f000 8115 	beq.w	3fb0 <process_event+0x338>
    3d86:	f386 8811 	msr	BASEPRI, r6
    3d8a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    3d8e:	2f00      	cmp	r7, #0
    3d90:	f040 811f 	bne.w	3fd2 <process_event+0x35a>
    3d94:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    3d96:	b12b      	cbz	r3, 3da4 <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
    3d98:	464b      	mov	r3, r9
    3d9a:	4642      	mov	r2, r8
    3d9c:	4669      	mov	r1, sp
    3d9e:	4620      	mov	r0, r4
    3da0:	f00b f9cb 	bl	f13a <notify_all>
			if (transit != NULL) {
    3da4:	b115      	cbz	r5, 3dac <process_event+0x134>
				transit(mgr, transition_complete);
    3da6:	497a      	ldr	r1, [pc, #488]	; (3f90 <process_event+0x318>)
    3da8:	4620      	mov	r0, r4
    3daa:	47a8      	blx	r5
	__asm__ volatile(
    3dac:	f04f 0320 	mov.w	r3, #32
    3db0:	f3ef 8611 	mrs	r6, BASEPRI
    3db4:	f383 8812 	msr	BASEPRI_MAX, r3
    3db8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3dbc:	4650      	mov	r0, sl
    3dbe:	f006 fcfd 	bl	a7bc <z_spin_lock_valid>
    3dc2:	2800      	cmp	r0, #0
    3dc4:	f000 810b 	beq.w	3fde <process_event+0x366>
	z_spin_lock_set_owner(l);
    3dc8:	4650      	mov	r0, sl
    3dca:	f006 fd17 	bl	a7fc <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    3dce:	8ba3      	ldrh	r3, [r4, #28]
    3dd0:	f023 0308 	bic.w	r3, r3, #8
    3dd4:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    3dd6:	8ba3      	ldrh	r3, [r4, #28]
    3dd8:	f013 0f10 	tst.w	r3, #16
    3ddc:	f000 810f 	beq.w	3ffe <process_event+0x386>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    3de0:	f023 0310 	bic.w	r3, r3, #16
    3de4:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    3de6:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    3de8:	8ba7      	ldrh	r7, [r4, #28]
    3dea:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
    3dee:	2d00      	cmp	r5, #0
    3df0:	f43f af6c 	beq.w	3ccc <process_event+0x54>
		if (evt == EVT_RECHECK) {
    3df4:	2d02      	cmp	r5, #2
    3df6:	d08a      	beq.n	3d0e <process_event+0x96>
		if (evt == EVT_NOP) {
    3df8:	2d00      	cmp	r5, #0
    3dfa:	f43f af67 	beq.w	3ccc <process_event+0x54>
		if (evt == EVT_COMPLETE) {
    3dfe:	2d01      	cmp	r5, #1
    3e00:	d08a      	beq.n	3d18 <process_event+0xa0>
		} else if (evt == EVT_START) {
    3e02:	2d03      	cmp	r5, #3
    3e04:	d091      	beq.n	3d2a <process_event+0xb2>
		} else if (evt == EVT_STOP) {
    3e06:	2d04      	cmp	r5, #4
    3e08:	d03e      	beq.n	3e88 <process_event+0x210>
		} else if (evt == EVT_RESET) {
    3e0a:	2d05      	cmp	r5, #5
    3e0c:	f040 80a0 	bne.w	3f50 <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    3e10:	2f01      	cmp	r7, #1
    3e12:	d172      	bne.n	3efa <process_event+0x282>
    3e14:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    3e16:	2b00      	cmp	r3, #0
    3e18:	d07d      	beq.n	3f16 <process_event+0x29e>
			transit = mgr->transitions->reset;
    3e1a:	6923      	ldr	r3, [r4, #16]
    3e1c:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    3e1e:	2d00      	cmp	r5, #0
    3e20:	f000 8087 	beq.w	3f32 <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
    3e24:	2105      	movs	r1, #5
    3e26:	4620      	mov	r0, r4
    3e28:	f00b f91e 	bl	f068 <set_state>
		res = 0;
    3e2c:	f04f 0900 	mov.w	r9, #0
    3e30:	e78d      	b.n	3d4e <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    3e32:	4d53      	ldr	r5, [pc, #332]	; (3f80 <process_event+0x308>)
    3e34:	f44f 73ab 	mov.w	r3, #342	; 0x156
    3e38:	462a      	mov	r2, r5
    3e3a:	4956      	ldr	r1, [pc, #344]	; (3f94 <process_event+0x31c>)
    3e3c:	4852      	ldr	r0, [pc, #328]	; (3f88 <process_event+0x310>)
    3e3e:	f00b fa0e 	bl	f25e <assert_print>
    3e42:	f44f 71ab 	mov.w	r1, #342	; 0x156
    3e46:	4628      	mov	r0, r5
    3e48:	f00b fa02 	bl	f250 <assert_post_action>
    3e4c:	e770      	b.n	3d30 <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    3e4e:	4d4c      	ldr	r5, [pc, #304]	; (3f80 <process_event+0x308>)
    3e50:	f240 1357 	movw	r3, #343	; 0x157
    3e54:	462a      	mov	r2, r5
    3e56:	4950      	ldr	r1, [pc, #320]	; (3f98 <process_event+0x320>)
    3e58:	484b      	ldr	r0, [pc, #300]	; (3f88 <process_event+0x310>)
    3e5a:	f00b fa00 	bl	f25e <assert_print>
    3e5e:	f240 1157 	movw	r1, #343	; 0x157
    3e62:	4628      	mov	r0, r5
    3e64:	f00b f9f4 	bl	f250 <assert_post_action>
    3e68:	e766      	b.n	3d38 <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
    3e6a:	f8df 8114 	ldr.w	r8, [pc, #276]	; 3f80 <process_event+0x308>
    3e6e:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    3e72:	4642      	mov	r2, r8
    3e74:	4949      	ldr	r1, [pc, #292]	; (3f9c <process_event+0x324>)
    3e76:	4844      	ldr	r0, [pc, #272]	; (3f88 <process_event+0x310>)
    3e78:	f00b f9f1 	bl	f25e <assert_print>
    3e7c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    3e80:	4640      	mov	r0, r8
    3e82:	f00b f9e5 	bl	f250 <assert_post_action>
    3e86:	e75c      	b.n	3d42 <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    3e88:	2f02      	cmp	r7, #2
    3e8a:	d10b      	bne.n	3ea4 <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
    3e8c:	8be3      	ldrh	r3, [r4, #30]
    3e8e:	b9bb      	cbnz	r3, 3ec0 <process_event+0x248>
			transit = mgr->transitions->stop;
    3e90:	6923      	ldr	r3, [r4, #16]
    3e92:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    3e94:	b315      	cbz	r5, 3edc <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
    3e96:	2104      	movs	r1, #4
    3e98:	4620      	mov	r0, r4
    3e9a:	f00b f8e5 	bl	f068 <set_state>
		res = 0;
    3e9e:	f04f 0900 	mov.w	r9, #0
    3ea2:	e754      	b.n	3d4e <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    3ea4:	4d36      	ldr	r5, [pc, #216]	; (3f80 <process_event+0x308>)
    3ea6:	f240 135d 	movw	r3, #349	; 0x15d
    3eaa:	462a      	mov	r2, r5
    3eac:	493c      	ldr	r1, [pc, #240]	; (3fa0 <process_event+0x328>)
    3eae:	4836      	ldr	r0, [pc, #216]	; (3f88 <process_event+0x310>)
    3eb0:	f00b f9d5 	bl	f25e <assert_print>
    3eb4:	f240 115d 	movw	r1, #349	; 0x15d
    3eb8:	4628      	mov	r0, r5
    3eba:	f00b f9c9 	bl	f250 <assert_post_action>
    3ebe:	e7e5      	b.n	3e8c <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
    3ec0:	4d2f      	ldr	r5, [pc, #188]	; (3f80 <process_event+0x308>)
    3ec2:	f44f 73af 	mov.w	r3, #350	; 0x15e
    3ec6:	462a      	mov	r2, r5
    3ec8:	4936      	ldr	r1, [pc, #216]	; (3fa4 <process_event+0x32c>)
    3eca:	482f      	ldr	r0, [pc, #188]	; (3f88 <process_event+0x310>)
    3ecc:	f00b f9c7 	bl	f25e <assert_print>
    3ed0:	f44f 71af 	mov.w	r1, #350	; 0x15e
    3ed4:	4628      	mov	r0, r5
    3ed6:	f00b f9bb 	bl	f250 <assert_post_action>
    3eda:	e7d9      	b.n	3e90 <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
    3edc:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 3f80 <process_event+0x308>
    3ee0:	f240 1361 	movw	r3, #353	; 0x161
    3ee4:	4642      	mov	r2, r8
    3ee6:	492d      	ldr	r1, [pc, #180]	; (3f9c <process_event+0x324>)
    3ee8:	4827      	ldr	r0, [pc, #156]	; (3f88 <process_event+0x310>)
    3eea:	f00b f9b8 	bl	f25e <assert_print>
    3eee:	f240 1161 	movw	r1, #353	; 0x161
    3ef2:	4640      	mov	r0, r8
    3ef4:	f00b f9ac 	bl	f250 <assert_post_action>
    3ef8:	e7cd      	b.n	3e96 <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    3efa:	4d21      	ldr	r5, [pc, #132]	; (3f80 <process_event+0x308>)
    3efc:	f44f 73b2 	mov.w	r3, #356	; 0x164
    3f00:	462a      	mov	r2, r5
    3f02:	4929      	ldr	r1, [pc, #164]	; (3fa8 <process_event+0x330>)
    3f04:	4820      	ldr	r0, [pc, #128]	; (3f88 <process_event+0x310>)
    3f06:	f00b f9aa 	bl	f25e <assert_print>
    3f0a:	f44f 71b2 	mov.w	r1, #356	; 0x164
    3f0e:	4628      	mov	r0, r5
    3f10:	f00b f99e 	bl	f250 <assert_post_action>
    3f14:	e77e      	b.n	3e14 <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    3f16:	4d1a      	ldr	r5, [pc, #104]	; (3f80 <process_event+0x308>)
    3f18:	f240 1365 	movw	r3, #357	; 0x165
    3f1c:	462a      	mov	r2, r5
    3f1e:	491e      	ldr	r1, [pc, #120]	; (3f98 <process_event+0x320>)
    3f20:	4819      	ldr	r0, [pc, #100]	; (3f88 <process_event+0x310>)
    3f22:	f00b f99c 	bl	f25e <assert_print>
    3f26:	f240 1165 	movw	r1, #357	; 0x165
    3f2a:	4628      	mov	r0, r5
    3f2c:	f00b f990 	bl	f250 <assert_post_action>
    3f30:	e773      	b.n	3e1a <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
    3f32:	f8df 804c 	ldr.w	r8, [pc, #76]	; 3f80 <process_event+0x308>
    3f36:	f44f 73b4 	mov.w	r3, #360	; 0x168
    3f3a:	4642      	mov	r2, r8
    3f3c:	4917      	ldr	r1, [pc, #92]	; (3f9c <process_event+0x324>)
    3f3e:	4812      	ldr	r0, [pc, #72]	; (3f88 <process_event+0x310>)
    3f40:	f00b f98d 	bl	f25e <assert_print>
    3f44:	f44f 71b4 	mov.w	r1, #360	; 0x168
    3f48:	4640      	mov	r0, r8
    3f4a:	f00b f981 	bl	f250 <assert_post_action>
    3f4e:	e769      	b.n	3e24 <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
    3f50:	4d0b      	ldr	r5, [pc, #44]	; (3f80 <process_event+0x308>)
    3f52:	f240 136b 	movw	r3, #363	; 0x16b
    3f56:	462a      	mov	r2, r5
    3f58:	4914      	ldr	r1, [pc, #80]	; (3fac <process_event+0x334>)
    3f5a:	480b      	ldr	r0, [pc, #44]	; (3f88 <process_event+0x310>)
    3f5c:	f00b f97f 	bl	f25e <assert_print>
    3f60:	f240 116b 	movw	r1, #363	; 0x16b
    3f64:	4628      	mov	r0, r5
    3f66:	f00b f973 	bl	f250 <assert_post_action>
		onoff_transition_fn transit = NULL;
    3f6a:	2500      	movs	r5, #0
		res = 0;
    3f6c:	46a9      	mov	r9, r5
    3f6e:	e6ee      	b.n	3d4e <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
    3f70:	2200      	movs	r2, #0
    3f72:	e6f7      	b.n	3d64 <process_event+0xec>
    3f74:	2200      	movs	r2, #0
    3f76:	e6f5      	b.n	3d64 <process_event+0xec>
		    || (transit != NULL)) {
    3f78:	2d00      	cmp	r5, #0
    3f7a:	f47f aef9 	bne.w	3d70 <process_event+0xf8>
    3f7e:	e72a      	b.n	3dd6 <process_event+0x15e>
    3f80:	000116c0 	.word	0x000116c0
    3f84:	0001170c 	.word	0x0001170c
    3f88:	0001160c 	.word	0x0001160c
    3f8c:	0001171c 	.word	0x0001171c
    3f90:	0000404d 	.word	0x0000404d
    3f94:	00011730 	.word	0x00011730
    3f98:	0001173c 	.word	0x0001173c
    3f9c:	00011760 	.word	0x00011760
    3fa0:	00011778 	.word	0x00011778
    3fa4:	00011790 	.word	0x00011790
    3fa8:	000117a0 	.word	0x000117a0
    3fac:	00011cc8 	.word	0x00011cc8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3fb0:	f8df b080 	ldr.w	fp, [pc, #128]	; 4034 <process_event+0x3bc>
    3fb4:	23b9      	movs	r3, #185	; 0xb9
    3fb6:	465a      	mov	r2, fp
    3fb8:	491f      	ldr	r1, [pc, #124]	; (4038 <process_event+0x3c0>)
    3fba:	4820      	ldr	r0, [pc, #128]	; (403c <process_event+0x3c4>)
    3fbc:	f00b f94f 	bl	f25e <assert_print>
    3fc0:	4651      	mov	r1, sl
    3fc2:	481f      	ldr	r0, [pc, #124]	; (4040 <process_event+0x3c8>)
    3fc4:	f00b f94b 	bl	f25e <assert_print>
    3fc8:	21b9      	movs	r1, #185	; 0xb9
    3fca:	4658      	mov	r0, fp
    3fcc:	f00b f940 	bl	f250 <assert_post_action>
    3fd0:	e6d9      	b.n	3d86 <process_event+0x10e>
				notify_monitors(mgr, state, res);
    3fd2:	464a      	mov	r2, r9
    3fd4:	4641      	mov	r1, r8
    3fd6:	4620      	mov	r0, r4
    3fd8:	f00b f84e 	bl	f078 <notify_monitors>
    3fdc:	e6da      	b.n	3d94 <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3fde:	4d15      	ldr	r5, [pc, #84]	; (4034 <process_event+0x3bc>)
    3fe0:	238e      	movs	r3, #142	; 0x8e
    3fe2:	462a      	mov	r2, r5
    3fe4:	4917      	ldr	r1, [pc, #92]	; (4044 <process_event+0x3cc>)
    3fe6:	4815      	ldr	r0, [pc, #84]	; (403c <process_event+0x3c4>)
    3fe8:	f00b f939 	bl	f25e <assert_print>
    3fec:	4651      	mov	r1, sl
    3fee:	4816      	ldr	r0, [pc, #88]	; (4048 <process_event+0x3d0>)
    3ff0:	f00b f935 	bl	f25e <assert_print>
    3ff4:	218e      	movs	r1, #142	; 0x8e
    3ff6:	4628      	mov	r0, r5
    3ff8:	f00b f92a 	bl	f250 <assert_post_action>
    3ffc:	e6e4      	b.n	3dc8 <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    3ffe:	f013 0f20 	tst.w	r3, #32
    4002:	d004      	beq.n	400e <process_event+0x396>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    4004:	f023 0320 	bic.w	r3, r3, #32
    4008:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
    400a:	2502      	movs	r5, #2
    400c:	e6ec      	b.n	3de8 <process_event+0x170>
		evt = EVT_NOP;
    400e:	2500      	movs	r5, #0
    4010:	e6ea      	b.n	3de8 <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4012:	4d08      	ldr	r5, [pc, #32]	; (4034 <process_event+0x3bc>)
    4014:	23b9      	movs	r3, #185	; 0xb9
    4016:	462a      	mov	r2, r5
    4018:	4907      	ldr	r1, [pc, #28]	; (4038 <process_event+0x3c0>)
    401a:	4808      	ldr	r0, [pc, #32]	; (403c <process_event+0x3c4>)
    401c:	f00b f91f 	bl	f25e <assert_print>
    4020:	4621      	mov	r1, r4
    4022:	4807      	ldr	r0, [pc, #28]	; (4040 <process_event+0x3c8>)
    4024:	f00b f91b 	bl	f25e <assert_print>
    4028:	21b9      	movs	r1, #185	; 0xb9
    402a:	4628      	mov	r0, r5
    402c:	f00b f910 	bl	f250 <assert_post_action>
    4030:	e653      	b.n	3cda <process_event+0x62>
    4032:	bf00      	nop
    4034:	000117b8 	.word	0x000117b8
    4038:	000117e8 	.word	0x000117e8
    403c:	0001160c 	.word	0x0001160c
    4040:	00011800 	.word	0x00011800
    4044:	00011818 	.word	0x00011818
    4048:	00011830 	.word	0x00011830

0000404c <transition_complete>:
{
    404c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4050:	4604      	mov	r4, r0
    4052:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    4054:	f100 0614 	add.w	r6, r0, #20
    4058:	f04f 0320 	mov.w	r3, #32
    405c:	f3ef 8711 	mrs	r7, BASEPRI
    4060:	f383 8812 	msr	BASEPRI_MAX, r3
    4064:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4068:	4630      	mov	r0, r6
    406a:	f006 fba7 	bl	a7bc <z_spin_lock_valid>
    406e:	b150      	cbz	r0, 4086 <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    4070:	4630      	mov	r0, r6
    4072:	f006 fbc3 	bl	a7fc <z_spin_lock_set_owner>
	mgr->last_res = res;
    4076:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    4078:	463a      	mov	r2, r7
    407a:	2101      	movs	r1, #1
    407c:	4620      	mov	r0, r4
    407e:	f7ff fdfb 	bl	3c78 <process_event>
}
    4082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4086:	f8df 8020 	ldr.w	r8, [pc, #32]	; 40a8 <transition_complete+0x5c>
    408a:	238e      	movs	r3, #142	; 0x8e
    408c:	4642      	mov	r2, r8
    408e:	4907      	ldr	r1, [pc, #28]	; (40ac <transition_complete+0x60>)
    4090:	4807      	ldr	r0, [pc, #28]	; (40b0 <transition_complete+0x64>)
    4092:	f00b f8e4 	bl	f25e <assert_print>
    4096:	4631      	mov	r1, r6
    4098:	4806      	ldr	r0, [pc, #24]	; (40b4 <transition_complete+0x68>)
    409a:	f00b f8e0 	bl	f25e <assert_print>
    409e:	218e      	movs	r1, #142	; 0x8e
    40a0:	4640      	mov	r0, r8
    40a2:	f00b f8d5 	bl	f250 <assert_post_action>
    40a6:	e7e3      	b.n	4070 <transition_complete+0x24>
    40a8:	000117b8 	.word	0x000117b8
    40ac:	00011818 	.word	0x00011818
    40b0:	0001160c 	.word	0x0001160c
    40b4:	00011830 	.word	0x00011830

000040b8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    40b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    40bc:	4604      	mov	r4, r0
    40be:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    40c0:	f00b f812 	bl	f0e8 <validate_args>

	if (rv < 0) {
    40c4:	1e06      	subs	r6, r0, #0
    40c6:	db58      	blt.n	417a <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    40c8:	f104 0714 	add.w	r7, r4, #20
    40cc:	f04f 0320 	mov.w	r3, #32
    40d0:	f3ef 8911 	mrs	r9, BASEPRI
    40d4:	f383 8812 	msr	BASEPRI_MAX, r3
    40d8:	f3bf 8f6f 	isb	sy
    40dc:	4638      	mov	r0, r7
    40de:	f006 fb6d 	bl	a7bc <z_spin_lock_valid>
    40e2:	b1e8      	cbz	r0, 4120 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    40e4:	4638      	mov	r0, r7
    40e6:	f006 fb89 	bl	a7fc <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    40ea:	8ba5      	ldrh	r5, [r4, #28]
    40ec:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    40f0:	8be3      	ldrh	r3, [r4, #30]
    40f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    40f6:	4293      	cmp	r3, r2
    40f8:	d056      	beq.n	41a8 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    40fa:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    40fc:	2d02      	cmp	r5, #2
    40fe:	d01f      	beq.n	4140 <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    4100:	b32d      	cbz	r5, 414e <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
    4102:	2d04      	cmp	r5, #4
    4104:	d023      	beq.n	414e <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
    4106:	2d06      	cmp	r5, #6
    4108:	d021      	beq.n	414e <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    410a:	2d05      	cmp	r5, #5
    410c:	d053      	beq.n	41b6 <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    410e:	2d01      	cmp	r5, #1
    4110:	d136      	bne.n	4180 <onoff_request+0xc8>
		rv = -EIO;
    4112:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    4116:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    411a:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    411c:	4652      	mov	r2, sl
    411e:	e01c      	b.n	415a <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4120:	4d3c      	ldr	r5, [pc, #240]	; (4214 <__data_size+0x4b>)
    4122:	238e      	movs	r3, #142	; 0x8e
    4124:	462a      	mov	r2, r5
    4126:	493c      	ldr	r1, [pc, #240]	; (4218 <__data_size+0x4f>)
    4128:	483c      	ldr	r0, [pc, #240]	; (421c <__data_size+0x53>)
    412a:	f00b f898 	bl	f25e <assert_print>
    412e:	4639      	mov	r1, r7
    4130:	483b      	ldr	r0, [pc, #236]	; (4220 <__data_size+0x57>)
    4132:	f00b f894 	bl	f25e <assert_print>
    4136:	218e      	movs	r1, #142	; 0x8e
    4138:	4628      	mov	r0, r5
    413a:	f00b f889 	bl	f250 <assert_post_action>
    413e:	e7d1      	b.n	40e4 <onoff_request+0x2c>
		mgr->refs += 1U;
    4140:	3301      	adds	r3, #1
    4142:	83e3      	strh	r3, [r4, #30]
		notify = true;
    4144:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    4148:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    414a:	461a      	mov	r2, r3
    414c:	e005      	b.n	415a <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
    414e:	fab5 f385 	clz	r3, r5
    4152:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    4154:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    4158:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    415a:	b142      	cbz	r2, 416e <onoff_request+0xb6>
	parent->next = child;
    415c:	2200      	movs	r2, #0
    415e:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    4162:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4164:	b372      	cbz	r2, 41c4 <onoff_request+0x10c>
	parent->next = child;
    4166:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    416a:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    416e:	b373      	cbz	r3, 41ce <__data_size+0x5>
		process_event(mgr, EVT_RECHECK, key);
    4170:	464a      	mov	r2, r9
    4172:	2102      	movs	r1, #2
    4174:	4620      	mov	r0, r4
    4176:	f7ff fd7f 	bl	3c78 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    417a:	4630      	mov	r0, r6
    417c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    4180:	4e28      	ldr	r6, [pc, #160]	; (4224 <__data_size+0x5b>)
    4182:	f240 13c9 	movw	r3, #457	; 0x1c9
    4186:	4632      	mov	r2, r6
    4188:	4927      	ldr	r1, [pc, #156]	; (4228 <__data_size+0x5f>)
    418a:	4824      	ldr	r0, [pc, #144]	; (421c <__data_size+0x53>)
    418c:	f00b f867 	bl	f25e <assert_print>
    4190:	f240 11c9 	movw	r1, #457	; 0x1c9
    4194:	4630      	mov	r0, r6
    4196:	f00b f85b 	bl	f250 <assert_post_action>
		rv = -EIO;
    419a:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    419e:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    41a2:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    41a4:	4652      	mov	r2, sl
    41a6:	e7d8      	b.n	415a <onoff_request+0xa2>
		rv = -EAGAIN;
    41a8:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    41ac:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    41b0:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    41b2:	4652      	mov	r2, sl
    41b4:	e7d1      	b.n	415a <onoff_request+0xa2>
		rv = -ENOTSUP;
    41b6:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    41ba:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    41be:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    41c0:	4652      	mov	r2, sl
    41c2:	e7ca      	b.n	415a <onoff_request+0xa2>
    41c4:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    41c8:	f8c4 8000 	str.w	r8, [r4]
}
    41cc:	e7cf      	b.n	416e <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    41ce:	4638      	mov	r0, r7
    41d0:	f006 fb04 	bl	a7dc <z_spin_unlock_valid>
    41d4:	b168      	cbz	r0, 41f2 <__data_size+0x29>
	__asm__ volatile(
    41d6:	f389 8811 	msr	BASEPRI, r9
    41da:	f3bf 8f6f 	isb	sy
		if (notify) {
    41de:	f1ba 0f00 	cmp.w	sl, #0
    41e2:	d0ca      	beq.n	417a <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
    41e4:	2300      	movs	r3, #0
    41e6:	462a      	mov	r2, r5
    41e8:	4641      	mov	r1, r8
    41ea:	4620      	mov	r0, r4
    41ec:	f00a ff92 	bl	f114 <notify_one>
    41f0:	e7c3      	b.n	417a <onoff_request+0xc2>
    41f2:	f8df b020 	ldr.w	fp, [pc, #32]	; 4214 <__data_size+0x4b>
    41f6:	23b9      	movs	r3, #185	; 0xb9
    41f8:	465a      	mov	r2, fp
    41fa:	490c      	ldr	r1, [pc, #48]	; (422c <__data_size+0x63>)
    41fc:	4807      	ldr	r0, [pc, #28]	; (421c <__data_size+0x53>)
    41fe:	f00b f82e 	bl	f25e <assert_print>
    4202:	4639      	mov	r1, r7
    4204:	480a      	ldr	r0, [pc, #40]	; (4230 <__data_size+0x67>)
    4206:	f00b f82a 	bl	f25e <assert_print>
    420a:	21b9      	movs	r1, #185	; 0xb9
    420c:	4658      	mov	r0, fp
    420e:	f00b f81f 	bl	f250 <assert_post_action>
    4212:	e7e0      	b.n	41d6 <__data_size+0xd>
    4214:	000117b8 	.word	0x000117b8
    4218:	00011818 	.word	0x00011818
    421c:	0001160c 	.word	0x0001160c
    4220:	00011830 	.word	0x00011830
    4224:	000116c0 	.word	0x000116c0
    4228:	000117a0 	.word	0x000117a0
    422c:	000117e8 	.word	0x000117e8
    4230:	00011800 	.word	0x00011800

00004234 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    4234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4238:	4606      	mov	r6, r0
    423a:	460d      	mov	r5, r1
    423c:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    423e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    4242:	d222      	bcs.n	428a <sys_heap_init+0x56>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    4244:	2c04      	cmp	r4, #4
    4246:	d931      	bls.n	42ac <sys_heap_init+0x78>
	bytes -= heap_footer_bytes(bytes);
    4248:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    424a:	1dec      	adds	r4, r5, #7
    424c:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    4250:	4415      	add	r5, r2
    4252:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    4256:	1b2d      	subs	r5, r5, r4
    4258:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    425c:	2d17      	cmp	r5, #23
    425e:	d936      	bls.n	42ce <sys_heap_init+0x9a>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    4260:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
    4262:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
    4266:	2300      	movs	r3, #0
    4268:	60e3      	str	r3, [r4, #12]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    426a:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    426e:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    4272:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
    4276:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    4278:	3607      	adds	r6, #7
    427a:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    427e:	f109 0301 	add.w	r3, r9, #1
    4282:	4543      	cmp	r3, r8
    4284:	d834      	bhi.n	42f0 <sys_heap_init+0xbc>
{
    4286:	2300      	movs	r3, #0
    4288:	e049      	b.n	431e <sys_heap_init+0xea>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    428a:	4f38      	ldr	r7, [pc, #224]	; (436c <sys_heap_init+0x138>)
    428c:	f240 13e3 	movw	r3, #483	; 0x1e3
    4290:	463a      	mov	r2, r7
    4292:	4937      	ldr	r1, [pc, #220]	; (4370 <sys_heap_init+0x13c>)
    4294:	4837      	ldr	r0, [pc, #220]	; (4374 <sys_heap_init+0x140>)
    4296:	f00a ffe2 	bl	f25e <assert_print>
    429a:	4837      	ldr	r0, [pc, #220]	; (4378 <sys_heap_init+0x144>)
    429c:	f00a ffdf 	bl	f25e <assert_print>
    42a0:	f240 11e3 	movw	r1, #483	; 0x1e3
    42a4:	4638      	mov	r0, r7
    42a6:	f00a ffd3 	bl	f250 <assert_post_action>
    42aa:	e7cb      	b.n	4244 <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    42ac:	4f2f      	ldr	r7, [pc, #188]	; (436c <sys_heap_init+0x138>)
    42ae:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    42b2:	463a      	mov	r2, r7
    42b4:	4931      	ldr	r1, [pc, #196]	; (437c <sys_heap_init+0x148>)
    42b6:	482f      	ldr	r0, [pc, #188]	; (4374 <sys_heap_init+0x140>)
    42b8:	f00a ffd1 	bl	f25e <assert_print>
    42bc:	4830      	ldr	r0, [pc, #192]	; (4380 <sys_heap_init+0x14c>)
    42be:	f00a ffce 	bl	f25e <assert_print>
    42c2:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    42c6:	4638      	mov	r0, r7
    42c8:	f00a ffc2 	bl	f250 <assert_post_action>
    42cc:	e7bc      	b.n	4248 <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    42ce:	4f27      	ldr	r7, [pc, #156]	; (436c <sys_heap_init+0x138>)
    42d0:	f240 13f3 	movw	r3, #499	; 0x1f3
    42d4:	463a      	mov	r2, r7
    42d6:	492b      	ldr	r1, [pc, #172]	; (4384 <sys_heap_init+0x150>)
    42d8:	4826      	ldr	r0, [pc, #152]	; (4374 <sys_heap_init+0x140>)
    42da:	f00a ffc0 	bl	f25e <assert_print>
    42de:	4828      	ldr	r0, [pc, #160]	; (4380 <sys_heap_init+0x14c>)
    42e0:	f00a ffbd 	bl	f25e <assert_print>
    42e4:	f240 11f3 	movw	r1, #499	; 0x1f3
    42e8:	4638      	mov	r0, r7
    42ea:	f00a ffb1 	bl	f250 <assert_post_action>
    42ee:	e7b7      	b.n	4260 <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    42f0:	f8df a078 	ldr.w	sl, [pc, #120]	; 436c <sys_heap_init+0x138>
    42f4:	f44f 7301 	mov.w	r3, #516	; 0x204
    42f8:	4652      	mov	r2, sl
    42fa:	4923      	ldr	r1, [pc, #140]	; (4388 <sys_heap_init+0x154>)
    42fc:	481d      	ldr	r0, [pc, #116]	; (4374 <sys_heap_init+0x140>)
    42fe:	f00a ffae 	bl	f25e <assert_print>
    4302:	481f      	ldr	r0, [pc, #124]	; (4380 <sys_heap_init+0x14c>)
    4304:	f00a ffab 	bl	f25e <assert_print>
    4308:	f44f 7101 	mov.w	r1, #516	; 0x204
    430c:	4650      	mov	r0, sl
    430e:	f00a ff9f 	bl	f250 <assert_post_action>
    4312:	e7b8      	b.n	4286 <sys_heap_init+0x52>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    4314:	1d1a      	adds	r2, r3, #4
    4316:	2100      	movs	r1, #0
    4318:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    431c:	3301      	adds	r3, #1
    431e:	42bb      	cmp	r3, r7
    4320:	dbf8      	blt.n	4314 <sys_heap_init+0xe0>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    4322:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
    4326:	b29b      	uxth	r3, r3
    4328:	8063      	strh	r3, [r4, #2]
    432a:	2200      	movs	r2, #0
    432c:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    432e:	f043 0301 	orr.w	r3, r3, #1
    4332:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    4334:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    4338:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
    433c:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
    4340:	1cb3      	adds	r3, r6, #2
    4342:	52e1      	strh	r1, [r4, r3]
    4344:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
    4348:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
    434c:	1ca9      	adds	r1, r5, #2
    434e:	5262      	strh	r2, [r4, r1]
    4350:	4425      	add	r5, r4
    4352:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    4356:	886b      	ldrh	r3, [r5, #2]
    4358:	f043 0301 	orr.w	r3, r3, #1
    435c:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    435e:	4649      	mov	r1, r9
    4360:	4620      	mov	r0, r4
    4362:	f00a ff4f 	bl	f204 <free_list_add>
}
    4366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    436a:	bf00      	nop
    436c:	00011848 	.word	0x00011848
    4370:	0001191c 	.word	0x0001191c
    4374:	0001160c 	.word	0x0001160c
    4378:	00011934 	.word	0x00011934
    437c:	0001194c 	.word	0x0001194c
    4380:	00011970 	.word	0x00011970
    4384:	0001198c 	.word	0x0001198c
    4388:	000119b8 	.word	0x000119b8

0000438c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    438c:	4684      	mov	ip, r0
	const char *sp = *str;
    438e:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    4390:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    4392:	e005      	b.n	43a0 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    4394:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4398:	3201      	adds	r2, #1
    439a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    439e:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    43a0:	7813      	ldrb	r3, [r2, #0]
    43a2:	4904      	ldr	r1, [pc, #16]	; (43b4 <extract_decimal+0x28>)
    43a4:	5c59      	ldrb	r1, [r3, r1]
    43a6:	f011 0f04 	tst.w	r1, #4
    43aa:	d1f3      	bne.n	4394 <extract_decimal+0x8>
	}
	*str = sp;
    43ac:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
    43b0:	4770      	bx	lr
    43b2:	bf00      	nop
    43b4:	000133e1 	.word	0x000133e1

000043b8 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    43b8:	b570      	push	{r4, r5, r6, lr}
    43ba:	b082      	sub	sp, #8
    43bc:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    43be:	2300      	movs	r3, #0
    43c0:	6003      	str	r3, [r0, #0]
    43c2:	6043      	str	r3, [r0, #4]
    43c4:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    43c6:	784b      	ldrb	r3, [r1, #1]
    43c8:	2b25      	cmp	r3, #37	; 0x25
    43ca:	d002      	beq.n	43d2 <extract_conversion+0x1a>
    43cc:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    43ce:	2501      	movs	r5, #1
    43d0:	e01f      	b.n	4412 <extract_conversion+0x5a>
		conv->specifier = *sp++;
    43d2:	1c88      	adds	r0, r1, #2
    43d4:	70e3      	strb	r3, [r4, #3]
		return sp;
    43d6:	e145      	b.n	4664 <extract_conversion+0x2ac>
			conv->flag_dash = true;
    43d8:	7823      	ldrb	r3, [r4, #0]
    43da:	f043 0304 	orr.w	r3, r3, #4
    43de:	7023      	strb	r3, [r4, #0]
		if (loop) {
    43e0:	b1b5      	cbz	r5, 4410 <extract_conversion+0x58>
			++sp;
    43e2:	3601      	adds	r6, #1
    43e4:	e014      	b.n	4410 <extract_conversion+0x58>
			conv->flag_plus = true;
    43e6:	7823      	ldrb	r3, [r4, #0]
    43e8:	f043 0308 	orr.w	r3, r3, #8
    43ec:	7023      	strb	r3, [r4, #0]
			break;
    43ee:	e7f7      	b.n	43e0 <extract_conversion+0x28>
			conv->flag_space = true;
    43f0:	7823      	ldrb	r3, [r4, #0]
    43f2:	f043 0310 	orr.w	r3, r3, #16
    43f6:	7023      	strb	r3, [r4, #0]
			break;
    43f8:	e7f2      	b.n	43e0 <extract_conversion+0x28>
			conv->flag_hash = true;
    43fa:	7823      	ldrb	r3, [r4, #0]
    43fc:	f043 0320 	orr.w	r3, r3, #32
    4400:	7023      	strb	r3, [r4, #0]
			break;
    4402:	e7ed      	b.n	43e0 <extract_conversion+0x28>
			conv->flag_zero = true;
    4404:	7823      	ldrb	r3, [r4, #0]
    4406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    440a:	7023      	strb	r3, [r4, #0]
			break;
    440c:	e7e8      	b.n	43e0 <extract_conversion+0x28>
		switch (*sp) {
    440e:	2500      	movs	r5, #0
	} while (loop);
    4410:	b345      	cbz	r5, 4464 <extract_conversion+0xac>
		switch (*sp) {
    4412:	7833      	ldrb	r3, [r6, #0]
    4414:	3b20      	subs	r3, #32
    4416:	2b10      	cmp	r3, #16
    4418:	d8f9      	bhi.n	440e <extract_conversion+0x56>
    441a:	a201      	add	r2, pc, #4	; (adr r2, 4420 <extract_conversion+0x68>)
    441c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4420:	000043f1 	.word	0x000043f1
    4424:	0000440f 	.word	0x0000440f
    4428:	0000440f 	.word	0x0000440f
    442c:	000043fb 	.word	0x000043fb
    4430:	0000440f 	.word	0x0000440f
    4434:	0000440f 	.word	0x0000440f
    4438:	0000440f 	.word	0x0000440f
    443c:	0000440f 	.word	0x0000440f
    4440:	0000440f 	.word	0x0000440f
    4444:	0000440f 	.word	0x0000440f
    4448:	0000440f 	.word	0x0000440f
    444c:	000043e7 	.word	0x000043e7
    4450:	0000440f 	.word	0x0000440f
    4454:	000043d9 	.word	0x000043d9
    4458:	0000440f 	.word	0x0000440f
    445c:	0000440f 	.word	0x0000440f
    4460:	00004405 	.word	0x00004405
	if (conv->flag_zero && conv->flag_dash) {
    4464:	7823      	ldrb	r3, [r4, #0]
    4466:	f003 0344 	and.w	r3, r3, #68	; 0x44
    446a:	2b44      	cmp	r3, #68	; 0x44
    446c:	d05f      	beq.n	452e <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    446e:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    4470:	7823      	ldrb	r3, [r4, #0]
    4472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4476:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    4478:	7833      	ldrb	r3, [r6, #0]
    447a:	2b2a      	cmp	r3, #42	; 0x2a
    447c:	d05c      	beq.n	4538 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    447e:	a801      	add	r0, sp, #4
    4480:	f7ff ff84 	bl	438c <extract_decimal>
	if (sp != wp) {
    4484:	9b01      	ldr	r3, [sp, #4]
    4486:	429e      	cmp	r6, r3
    4488:	d00f      	beq.n	44aa <extract_conversion+0xf2>
		conv->width_present = true;
    448a:	7823      	ldrb	r3, [r4, #0]
    448c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4490:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    4492:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    4494:	b2db      	uxtb	r3, r3
    4496:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    449a:	2800      	cmp	r0, #0
    449c:	db54      	blt.n	4548 <extract_conversion+0x190>
    449e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    44a0:	4313      	orrs	r3, r2
    44a2:	7822      	ldrb	r2, [r4, #0]
    44a4:	f363 0241 	bfi	r2, r3, #1, #1
    44a8:	7022      	strb	r2, [r4, #0]
	return sp;
    44aa:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    44ac:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    44ae:	781b      	ldrb	r3, [r3, #0]
    44b0:	2b2e      	cmp	r3, #46	; 0x2e
    44b2:	bf14      	ite	ne
    44b4:	2300      	movne	r3, #0
    44b6:	2301      	moveq	r3, #1
    44b8:	7862      	ldrb	r2, [r4, #1]
    44ba:	f363 0241 	bfi	r2, r3, #1, #1
    44be:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    44c0:	2b00      	cmp	r3, #0
    44c2:	d043      	beq.n	454c <extract_conversion+0x194>
	++sp;
    44c4:	9b01      	ldr	r3, [sp, #4]
    44c6:	1c5a      	adds	r2, r3, #1
    44c8:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    44ca:	785b      	ldrb	r3, [r3, #1]
    44cc:	2b2a      	cmp	r3, #42	; 0x2a
    44ce:	d03f      	beq.n	4550 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    44d0:	a801      	add	r0, sp, #4
    44d2:	f7ff ff5b 	bl	438c <extract_decimal>
	conv->prec_value = prec;
    44d6:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    44d8:	7823      	ldrb	r3, [r4, #0]
    44da:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    44de:	2800      	cmp	r0, #0
    44e0:	db3e      	blt.n	4560 <extract_conversion+0x1a8>
    44e2:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    44e4:	4313      	orrs	r3, r2
    44e6:	7822      	ldrb	r2, [r4, #0]
    44e8:	f363 0241 	bfi	r2, r3, #1, #1
    44ec:	7022      	strb	r2, [r4, #0]
	return sp;
    44ee:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    44f0:	7803      	ldrb	r3, [r0, #0]
    44f2:	3b4c      	subs	r3, #76	; 0x4c
    44f4:	2b2e      	cmp	r3, #46	; 0x2e
    44f6:	f200 809d 	bhi.w	4634 <extract_conversion+0x27c>
    44fa:	e8df f003 	tbb	[pc, r3]
    44fe:	9b90      	.short	0x9b90
    4500:	9b9b9b9b 	.word	0x9b9b9b9b
    4504:	9b9b9b9b 	.word	0x9b9b9b9b
    4508:	9b9b9b9b 	.word	0x9b9b9b9b
    450c:	9b9b9b9b 	.word	0x9b9b9b9b
    4510:	9b9b9b9b 	.word	0x9b9b9b9b
    4514:	9b9b9b9b 	.word	0x9b9b9b9b
    4518:	9b339b9b 	.word	0x9b339b9b
    451c:	9b459b57 	.word	0x9b459b57
    4520:	9b9b9b9b 	.word	0x9b9b9b9b
    4524:	9b899b9b 	.word	0x9b899b9b
    4528:	9b9b9b9b 	.word	0x9b9b9b9b
    452c:	82          	.byte	0x82
    452d:	00          	.byte	0x00
		conv->flag_zero = false;
    452e:	7823      	ldrb	r3, [r4, #0]
    4530:	f36f 1386 	bfc	r3, #6, #1
    4534:	7023      	strb	r3, [r4, #0]
    4536:	e79a      	b.n	446e <extract_conversion+0xb6>
		conv->width_star = true;
    4538:	7863      	ldrb	r3, [r4, #1]
    453a:	f043 0301 	orr.w	r3, r3, #1
    453e:	7063      	strb	r3, [r4, #1]
		return ++sp;
    4540:	4633      	mov	r3, r6
    4542:	3301      	adds	r3, #1
    4544:	9301      	str	r3, [sp, #4]
    4546:	e7b1      	b.n	44ac <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    4548:	2201      	movs	r2, #1
    454a:	e7a9      	b.n	44a0 <extract_conversion+0xe8>
		return sp;
    454c:	9801      	ldr	r0, [sp, #4]
    454e:	e7cf      	b.n	44f0 <extract_conversion+0x138>
		conv->prec_star = true;
    4550:	7863      	ldrb	r3, [r4, #1]
    4552:	f043 0304 	orr.w	r3, r3, #4
    4556:	7063      	strb	r3, [r4, #1]
		return ++sp;
    4558:	4610      	mov	r0, r2
    455a:	3001      	adds	r0, #1
    455c:	9001      	str	r0, [sp, #4]
    455e:	e7c7      	b.n	44f0 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    4560:	2201      	movs	r2, #1
    4562:	e7bf      	b.n	44e4 <extract_conversion+0x12c>
		if (*++sp == 'h') {
    4564:	1c42      	adds	r2, r0, #1
    4566:	7843      	ldrb	r3, [r0, #1]
    4568:	2b68      	cmp	r3, #104	; 0x68
    456a:	d006      	beq.n	457a <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    456c:	7863      	ldrb	r3, [r4, #1]
    456e:	2102      	movs	r1, #2
    4570:	f361 03c6 	bfi	r3, r1, #3, #4
    4574:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    4576:	4610      	mov	r0, r2
    4578:	e01e      	b.n	45b8 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    457a:	7863      	ldrb	r3, [r4, #1]
    457c:	2201      	movs	r2, #1
    457e:	f362 03c6 	bfi	r3, r2, #3, #4
    4582:	7063      	strb	r3, [r4, #1]
			++sp;
    4584:	3002      	adds	r0, #2
    4586:	e017      	b.n	45b8 <extract_conversion+0x200>
		if (*++sp == 'l') {
    4588:	1c42      	adds	r2, r0, #1
    458a:	7843      	ldrb	r3, [r0, #1]
    458c:	2b6c      	cmp	r3, #108	; 0x6c
    458e:	d006      	beq.n	459e <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    4590:	7863      	ldrb	r3, [r4, #1]
    4592:	2103      	movs	r1, #3
    4594:	f361 03c6 	bfi	r3, r1, #3, #4
    4598:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    459a:	4610      	mov	r0, r2
    459c:	e00c      	b.n	45b8 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    459e:	7863      	ldrb	r3, [r4, #1]
    45a0:	2204      	movs	r2, #4
    45a2:	f362 03c6 	bfi	r3, r2, #3, #4
    45a6:	7063      	strb	r3, [r4, #1]
			++sp;
    45a8:	3002      	adds	r0, #2
    45aa:	e005      	b.n	45b8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    45ac:	7863      	ldrb	r3, [r4, #1]
    45ae:	2205      	movs	r2, #5
    45b0:	f362 03c6 	bfi	r3, r2, #3, #4
    45b4:	7063      	strb	r3, [r4, #1]
		++sp;
    45b6:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    45b8:	f810 3b01 	ldrb.w	r3, [r0], #1
    45bc:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    45be:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    45c2:	2a37      	cmp	r2, #55	; 0x37
    45c4:	d87d      	bhi.n	46c2 <extract_conversion+0x30a>
    45c6:	e8df f002 	tbb	[pc, r2]
    45ca:	7c5e      	.short	0x7c5e
    45cc:	5e5e7c7c 	.word	0x5e5e7c7c
    45d0:	7c7c7c5e 	.word	0x7c7c7c5e
    45d4:	7c7c7c7c 	.word	0x7c7c7c7c
    45d8:	7c7c7c7c 	.word	0x7c7c7c7c
    45dc:	7c7c7c7c 	.word	0x7c7c7c7c
    45e0:	7c7c4f7c 	.word	0x7c7c4f7c
    45e4:	7c7c7c7c 	.word	0x7c7c7c7c
    45e8:	7c5e7c7c 	.word	0x7c5e7c7c
    45ec:	5e5e3a4f 	.word	0x5e5e3a4f
    45f0:	7c3a7c5e 	.word	0x7c3a7c5e
    45f4:	657c7c7c 	.word	0x657c7c7c
    45f8:	7c7c714f 	.word	0x7c7c714f
    45fc:	7c4f7c71 	.word	0x7c4f7c71
    4600:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    4602:	7863      	ldrb	r3, [r4, #1]
    4604:	2206      	movs	r2, #6
    4606:	f362 03c6 	bfi	r3, r2, #3, #4
    460a:	7063      	strb	r3, [r4, #1]
		++sp;
    460c:	3001      	adds	r0, #1
		break;
    460e:	e7d3      	b.n	45b8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    4610:	7863      	ldrb	r3, [r4, #1]
    4612:	2207      	movs	r2, #7
    4614:	f362 03c6 	bfi	r3, r2, #3, #4
    4618:	7063      	strb	r3, [r4, #1]
		++sp;
    461a:	3001      	adds	r0, #1
		break;
    461c:	e7cc      	b.n	45b8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    461e:	7863      	ldrb	r3, [r4, #1]
    4620:	2208      	movs	r2, #8
    4622:	f362 03c6 	bfi	r3, r2, #3, #4
    4626:	7063      	strb	r3, [r4, #1]
		++sp;
    4628:	3001      	adds	r0, #1
		conv->unsupported = true;
    462a:	7823      	ldrb	r3, [r4, #0]
    462c:	f043 0302 	orr.w	r3, r3, #2
    4630:	7023      	strb	r3, [r4, #0]
		break;
    4632:	e7c1      	b.n	45b8 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    4634:	7863      	ldrb	r3, [r4, #1]
    4636:	f36f 03c6 	bfc	r3, #3, #4
    463a:	7063      	strb	r3, [r4, #1]
		break;
    463c:	e7bc      	b.n	45b8 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    463e:	78a2      	ldrb	r2, [r4, #2]
    4640:	2101      	movs	r1, #1
    4642:	f361 0202 	bfi	r2, r1, #0, #3
    4646:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    4648:	7862      	ldrb	r2, [r4, #1]
    464a:	f002 0278 	and.w	r2, r2, #120	; 0x78
    464e:	2a40      	cmp	r2, #64	; 0x40
    4650:	d010      	beq.n	4674 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    4652:	2b63      	cmp	r3, #99	; 0x63
    4654:	d013      	beq.n	467e <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    4656:	7823      	ldrb	r3, [r4, #0]
    4658:	f3c3 0240 	ubfx	r2, r3, #1, #1
    465c:	4315      	orrs	r5, r2
    465e:	f365 0341 	bfi	r3, r5, #1, #1
    4662:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    4664:	b002      	add	sp, #8
    4666:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    4668:	78a2      	ldrb	r2, [r4, #2]
    466a:	2102      	movs	r1, #2
    466c:	f361 0202 	bfi	r2, r1, #0, #3
    4670:	70a2      	strb	r2, [r4, #2]
    4672:	e7e9      	b.n	4648 <extract_conversion+0x290>
			conv->invalid = true;
    4674:	7821      	ldrb	r1, [r4, #0]
    4676:	f041 0101 	orr.w	r1, r1, #1
    467a:	7021      	strb	r1, [r4, #0]
    467c:	e7e9      	b.n	4652 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    467e:	1e15      	subs	r5, r2, #0
    4680:	bf18      	it	ne
    4682:	2501      	movne	r5, #1
    4684:	e7e7      	b.n	4656 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    4686:	78a3      	ldrb	r3, [r4, #2]
    4688:	2204      	movs	r2, #4
    468a:	f362 0302 	bfi	r3, r2, #0, #3
    468e:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    4690:	2501      	movs	r5, #1
			break;
    4692:	e7e0      	b.n	4656 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    4694:	78a3      	ldrb	r3, [r4, #2]
    4696:	2203      	movs	r2, #3
    4698:	f362 0302 	bfi	r3, r2, #0, #3
    469c:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    469e:	7863      	ldrb	r3, [r4, #1]
    46a0:	f003 0378 	and.w	r3, r3, #120	; 0x78
    46a4:	2b40      	cmp	r3, #64	; 0x40
    46a6:	d1d6      	bne.n	4656 <extract_conversion+0x29e>
			unsupported = true;
    46a8:	2501      	movs	r5, #1
    46aa:	e7d4      	b.n	4656 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    46ac:	78a3      	ldrb	r3, [r4, #2]
    46ae:	2203      	movs	r2, #3
    46b0:	f362 0302 	bfi	r3, r2, #0, #3
    46b4:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    46b6:	7863      	ldrb	r3, [r4, #1]
    46b8:	f013 0f78 	tst.w	r3, #120	; 0x78
    46bc:	d0cb      	beq.n	4656 <extract_conversion+0x29e>
			unsupported = true;
    46be:	2501      	movs	r5, #1
    46c0:	e7c9      	b.n	4656 <extract_conversion+0x29e>
		conv->invalid = true;
    46c2:	7823      	ldrb	r3, [r4, #0]
    46c4:	f043 0301 	orr.w	r3, r3, #1
    46c8:	7023      	strb	r3, [r4, #0]
		break;
    46ca:	e7c4      	b.n	4656 <extract_conversion+0x29e>

000046cc <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    46cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46d0:	b083      	sub	sp, #12
    46d2:	4604      	mov	r4, r0
    46d4:	460d      	mov	r5, r1
    46d6:	9201      	str	r2, [sp, #4]
    46d8:	469a      	mov	sl, r3
    46da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    46dc:	78d3      	ldrb	r3, [r2, #3]
    46de:	4a32      	ldr	r2, [pc, #200]	; (47a8 <encode_uint+0xdc>)
    46e0:	f813 b002 	ldrb.w	fp, [r3, r2]
    46e4:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    46e8:	2b6f      	cmp	r3, #111	; 0x6f
    46ea:	d00f      	beq.n	470c <encode_uint+0x40>
    46ec:	d906      	bls.n	46fc <encode_uint+0x30>
    46ee:	2b70      	cmp	r3, #112	; 0x70
    46f0:	d00f      	beq.n	4712 <encode_uint+0x46>
    46f2:	2b78      	cmp	r3, #120	; 0x78
    46f4:	d110      	bne.n	4718 <encode_uint+0x4c>
		return 16;
    46f6:	f04f 0910 	mov.w	r9, #16
    46fa:	e023      	b.n	4744 <encode_uint+0x78>
	switch (specifier) {
    46fc:	2b58      	cmp	r3, #88	; 0x58
    46fe:	d002      	beq.n	4706 <encode_uint+0x3a>
    4700:	f04f 090a 	mov.w	r9, #10
    4704:	e01e      	b.n	4744 <encode_uint+0x78>
		return 16;
    4706:	f04f 0910 	mov.w	r9, #16
    470a:	e01b      	b.n	4744 <encode_uint+0x78>
		return 8;
    470c:	f04f 0908 	mov.w	r9, #8
    4710:	e018      	b.n	4744 <encode_uint+0x78>
		return 16;
    4712:	f04f 0910 	mov.w	r9, #16
    4716:	e015      	b.n	4744 <encode_uint+0x78>
	switch (specifier) {
    4718:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    471c:	e012      	b.n	4744 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    471e:	b2d2      	uxtb	r2, r2
    4720:	3230      	adds	r2, #48	; 0x30
    4722:	b2d2      	uxtb	r2, r2
    4724:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    4728:	463a      	mov	r2, r7
    472a:	4643      	mov	r3, r8
    472c:	4620      	mov	r0, r4
    472e:	4629      	mov	r1, r5
    4730:	f7fc f954 	bl	9dc <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    4734:	42bc      	cmp	r4, r7
    4736:	f175 0300 	sbcs.w	r3, r5, #0
    473a:	d319      	bcc.n	4770 <encode_uint+0xa4>
    473c:	4556      	cmp	r6, sl
    473e:	d917      	bls.n	4770 <encode_uint+0xa4>
		value /= radix;
    4740:	4604      	mov	r4, r0
    4742:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    4744:	f04f 0800 	mov.w	r8, #0
    4748:	464f      	mov	r7, r9
    474a:	464a      	mov	r2, r9
    474c:	4643      	mov	r3, r8
    474e:	4620      	mov	r0, r4
    4750:	4629      	mov	r1, r5
    4752:	f7fc f943 	bl	9dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4756:	2a09      	cmp	r2, #9
    4758:	d9e1      	bls.n	471e <encode_uint+0x52>
    475a:	f1bb 0f01 	cmp.w	fp, #1
    475e:	d003      	beq.n	4768 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    4760:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4762:	3257      	adds	r2, #87	; 0x57
    4764:	b2d2      	uxtb	r2, r2
    4766:	e7dd      	b.n	4724 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    4768:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    476a:	3237      	adds	r2, #55	; 0x37
    476c:	b2d2      	uxtb	r2, r2
    476e:	e7d9      	b.n	4724 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    4770:	9b01      	ldr	r3, [sp, #4]
    4772:	781b      	ldrb	r3, [r3, #0]
    4774:	f013 0f20 	tst.w	r3, #32
    4778:	d005      	beq.n	4786 <encode_uint+0xba>
		if (radix == 8) {
    477a:	f1b9 0f08 	cmp.w	r9, #8
    477e:	d006      	beq.n	478e <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    4780:	f1b9 0f10 	cmp.w	r9, #16
    4784:	d009      	beq.n	479a <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    4786:	4630      	mov	r0, r6
    4788:	b003      	add	sp, #12
    478a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    478e:	9a01      	ldr	r2, [sp, #4]
    4790:	7893      	ldrb	r3, [r2, #2]
    4792:	f043 0308 	orr.w	r3, r3, #8
    4796:	7093      	strb	r3, [r2, #2]
    4798:	e7f5      	b.n	4786 <encode_uint+0xba>
			conv->altform_0c = true;
    479a:	9a01      	ldr	r2, [sp, #4]
    479c:	7893      	ldrb	r3, [r2, #2]
    479e:	f043 0310 	orr.w	r3, r3, #16
    47a2:	7093      	strb	r3, [r2, #2]
    47a4:	e7ef      	b.n	4786 <encode_uint+0xba>
    47a6:	bf00      	nop
    47a8:	000133e1 	.word	0x000133e1

000047ac <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    47ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47b0:	b091      	sub	sp, #68	; 0x44
    47b2:	4606      	mov	r6, r0
    47b4:	460d      	mov	r5, r1
    47b6:	4691      	mov	r9, r2
    47b8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    47ba:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    47bc:	f899 0000 	ldrb.w	r0, [r9]
    47c0:	2800      	cmp	r0, #0
    47c2:	f000 82d5 	beq.w	4d70 <cbvprintf+0x5c4>
		if (*fp != '%') {
    47c6:	2825      	cmp	r0, #37	; 0x25
    47c8:	d008      	beq.n	47dc <cbvprintf+0x30>
			OUTC(*fp++);
    47ca:	f109 0901 	add.w	r9, r9, #1
    47ce:	4629      	mov	r1, r5
    47d0:	47b0      	blx	r6
    47d2:	2800      	cmp	r0, #0
    47d4:	f2c0 82cd 	blt.w	4d72 <cbvprintf+0x5c6>
    47d8:	3401      	adds	r4, #1
			continue;
    47da:	e7ef      	b.n	47bc <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    47dc:	2300      	movs	r3, #0
    47de:	9304      	str	r3, [sp, #16]
    47e0:	9305      	str	r3, [sp, #20]
    47e2:	9306      	str	r3, [sp, #24]
    47e4:	9307      	str	r3, [sp, #28]
    47e6:	9308      	str	r3, [sp, #32]
    47e8:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    47ea:	4649      	mov	r1, r9
    47ec:	a806      	add	r0, sp, #24
    47ee:	f7ff fde3 	bl	43b8 <extract_conversion>
    47f2:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    47f4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    47f8:	f013 0f01 	tst.w	r3, #1
    47fc:	f000 8097 	beq.w	492e <cbvprintf+0x182>
			width = va_arg(ap, int);
    4800:	9b03      	ldr	r3, [sp, #12]
    4802:	1d1a      	adds	r2, r3, #4
    4804:	9203      	str	r2, [sp, #12]
    4806:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    4808:	2f00      	cmp	r7, #0
    480a:	f2c0 8088 	blt.w	491e <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    480e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    4812:	f013 0f04 	tst.w	r3, #4
    4816:	f000 809c 	beq.w	4952 <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    481a:	9b03      	ldr	r3, [sp, #12]
    481c:	1d1a      	adds	r2, r3, #4
    481e:	9203      	str	r2, [sp, #12]
    4820:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    4824:	f1ba 0f00 	cmp.w	sl, #0
    4828:	f2c0 808a 	blt.w	4940 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    482c:	2300      	movs	r3, #0
    482e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    4830:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    4832:	f89d 301a 	ldrb.w	r3, [sp, #26]
    4836:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    483a:	f89d 1019 	ldrb.w	r1, [sp, #25]
    483e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    4842:	2b01      	cmp	r3, #1
    4844:	f000 808e 	beq.w	4964 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    4848:	2b02      	cmp	r3, #2
    484a:	f000 80d3 	beq.w	49f4 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    484e:	2b04      	cmp	r3, #4
    4850:	f000 8124 	beq.w	4a9c <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    4854:	2b03      	cmp	r3, #3
    4856:	f000 813b 	beq.w	4ad0 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    485a:	f89d 8018 	ldrb.w	r8, [sp, #24]
    485e:	f018 0b03 	ands.w	fp, r8, #3
    4862:	f040 813b 	bne.w	4adc <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    4866:	f89d 301b 	ldrb.w	r3, [sp, #27]
    486a:	3b25      	subs	r3, #37	; 0x25
    486c:	2b53      	cmp	r3, #83	; 0x53
    486e:	f200 81e6 	bhi.w	4c3e <cbvprintf+0x492>
    4872:	e8df f013 	tbh	[pc, r3, lsl #1]
    4876:	0140      	.short	0x0140
    4878:	01e401e4 	.word	0x01e401e4
    487c:	01e401e4 	.word	0x01e401e4
    4880:	01e401e4 	.word	0x01e401e4
    4884:	01e401e4 	.word	0x01e401e4
    4888:	01e401e4 	.word	0x01e401e4
    488c:	01e401e4 	.word	0x01e401e4
    4890:	01e401e4 	.word	0x01e401e4
    4894:	01e401e4 	.word	0x01e401e4
    4898:	01e401e4 	.word	0x01e401e4
    489c:	01e401e4 	.word	0x01e401e4
    48a0:	01e401e4 	.word	0x01e401e4
    48a4:	01e401e4 	.word	0x01e401e4
    48a8:	01e401e4 	.word	0x01e401e4
    48ac:	01e401e4 	.word	0x01e401e4
    48b0:	01e401e4 	.word	0x01e401e4
    48b4:	01e401e4 	.word	0x01e401e4
    48b8:	01e401e4 	.word	0x01e401e4
    48bc:	01e401e4 	.word	0x01e401e4
    48c0:	01e401e4 	.word	0x01e401e4
    48c4:	01e401e4 	.word	0x01e401e4
    48c8:	01e401e4 	.word	0x01e401e4
    48cc:	01e401e4 	.word	0x01e401e4
    48d0:	01e401e4 	.word	0x01e401e4
    48d4:	01e401e4 	.word	0x01e401e4
    48d8:	01e401e4 	.word	0x01e401e4
    48dc:	01e40181 	.word	0x01e40181
    48e0:	01e401e4 	.word	0x01e401e4
    48e4:	01e401e4 	.word	0x01e401e4
    48e8:	01e401e4 	.word	0x01e401e4
    48ec:	01e401e4 	.word	0x01e401e4
    48f0:	015e01e4 	.word	0x015e01e4
    48f4:	01e40167 	.word	0x01e40167
    48f8:	01e401e4 	.word	0x01e401e4
    48fc:	016701e4 	.word	0x016701e4
    4900:	01e401e4 	.word	0x01e401e4
    4904:	01e401e4 	.word	0x01e401e4
    4908:	018101be 	.word	0x018101be
    490c:	01e401a2 	.word	0x01e401a2
    4910:	014d01e4 	.word	0x014d01e4
    4914:	018101e4 	.word	0x018101e4
    4918:	01e401e4 	.word	0x01e401e4
    491c:	0181      	.short	0x0181
				conv->flag_dash = true;
    491e:	f89d 3018 	ldrb.w	r3, [sp, #24]
    4922:	f043 0304 	orr.w	r3, r3, #4
    4926:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    492a:	427f      	negs	r7, r7
    492c:	e76f      	b.n	480e <cbvprintf+0x62>
		} else if (conv->width_present) {
    492e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    4932:	2b00      	cmp	r3, #0
    4934:	db02      	blt.n	493c <cbvprintf+0x190>
		int width = -1;
    4936:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    493a:	e768      	b.n	480e <cbvprintf+0x62>
			width = conv->width_value;
    493c:	9f07      	ldr	r7, [sp, #28]
    493e:	e766      	b.n	480e <cbvprintf+0x62>
				conv->prec_present = false;
    4940:	f89d 3019 	ldrb.w	r3, [sp, #25]
    4944:	f36f 0341 	bfc	r3, #1, #1
    4948:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    494c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    4950:	e76c      	b.n	482c <cbvprintf+0x80>
		} else if (conv->prec_present) {
    4952:	f013 0f02 	tst.w	r3, #2
    4956:	d002      	beq.n	495e <cbvprintf+0x1b2>
			precision = conv->prec_value;
    4958:	f8dd a020 	ldr.w	sl, [sp, #32]
    495c:	e766      	b.n	482c <cbvprintf+0x80>
		int precision = -1;
    495e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    4962:	e763      	b.n	482c <cbvprintf+0x80>
			switch (length_mod) {
    4964:	1ecb      	subs	r3, r1, #3
    4966:	2b04      	cmp	r3, #4
    4968:	d804      	bhi.n	4974 <cbvprintf+0x1c8>
    496a:	e8df f003 	tbb	[pc, r3]
    496e:	1d0b      	.short	0x1d0b
    4970:	3529      	.short	0x3529
    4972:	35          	.byte	0x35
    4973:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    4974:	9b03      	ldr	r3, [sp, #12]
    4976:	1d1a      	adds	r2, r3, #4
    4978:	9203      	str	r2, [sp, #12]
    497a:	681b      	ldr	r3, [r3, #0]
    497c:	17da      	asrs	r2, r3, #31
    497e:	9304      	str	r3, [sp, #16]
    4980:	9205      	str	r2, [sp, #20]
				break;
    4982:	e006      	b.n	4992 <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    4984:	9b03      	ldr	r3, [sp, #12]
    4986:	1d1a      	adds	r2, r3, #4
    4988:	9203      	str	r2, [sp, #12]
    498a:	681b      	ldr	r3, [r3, #0]
    498c:	17da      	asrs	r2, r3, #31
    498e:	9304      	str	r3, [sp, #16]
    4990:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    4992:	2901      	cmp	r1, #1
    4994:	d028      	beq.n	49e8 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    4996:	2902      	cmp	r1, #2
    4998:	f47f af5f 	bne.w	485a <cbvprintf+0xae>
				value->sint = (short)value->sint;
    499c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    49a0:	17da      	asrs	r2, r3, #31
    49a2:	9304      	str	r3, [sp, #16]
    49a4:	9205      	str	r2, [sp, #20]
    49a6:	e758      	b.n	485a <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    49a8:	9b03      	ldr	r3, [sp, #12]
    49aa:	3307      	adds	r3, #7
    49ac:	f023 0307 	bic.w	r3, r3, #7
    49b0:	f103 0208 	add.w	r2, r3, #8
    49b4:	9203      	str	r2, [sp, #12]
    49b6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    49ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    49be:	e7e8      	b.n	4992 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    49c0:	9b03      	ldr	r3, [sp, #12]
    49c2:	3307      	adds	r3, #7
    49c4:	f023 0307 	bic.w	r3, r3, #7
    49c8:	f103 0208 	add.w	r2, r3, #8
    49cc:	9203      	str	r2, [sp, #12]
    49ce:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    49d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    49d6:	e7dc      	b.n	4992 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    49d8:	9b03      	ldr	r3, [sp, #12]
    49da:	1d1a      	adds	r2, r3, #4
    49dc:	9203      	str	r2, [sp, #12]
    49de:	681b      	ldr	r3, [r3, #0]
    49e0:	17da      	asrs	r2, r3, #31
				value->sint =
    49e2:	9304      	str	r3, [sp, #16]
    49e4:	9205      	str	r2, [sp, #20]
				break;
    49e6:	e7d4      	b.n	4992 <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    49e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    49ec:	9304      	str	r3, [sp, #16]
    49ee:	2300      	movs	r3, #0
    49f0:	9305      	str	r3, [sp, #20]
    49f2:	e732      	b.n	485a <cbvprintf+0xae>
			switch (length_mod) {
    49f4:	1ecb      	subs	r3, r1, #3
    49f6:	2b04      	cmp	r3, #4
    49f8:	d804      	bhi.n	4a04 <cbvprintf+0x258>
    49fa:	e8df f003 	tbb	[pc, r3]
    49fe:	1f0b      	.short	0x1f0b
    4a00:	4135      	.short	0x4135
    4a02:	41          	.byte	0x41
    4a03:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    4a04:	9b03      	ldr	r3, [sp, #12]
    4a06:	1d1a      	adds	r2, r3, #4
    4a08:	9203      	str	r2, [sp, #12]
    4a0a:	681b      	ldr	r3, [r3, #0]
    4a0c:	9304      	str	r3, [sp, #16]
    4a0e:	2300      	movs	r3, #0
    4a10:	9305      	str	r3, [sp, #20]
				break;
    4a12:	e01e      	b.n	4a52 <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    4a14:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    4a18:	2b63      	cmp	r3, #99	; 0x63
    4a1a:	d007      	beq.n	4a2c <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    4a1c:	9b03      	ldr	r3, [sp, #12]
    4a1e:	1d1a      	adds	r2, r3, #4
    4a20:	9203      	str	r2, [sp, #12]
    4a22:	681b      	ldr	r3, [r3, #0]
    4a24:	9304      	str	r3, [sp, #16]
    4a26:	2300      	movs	r3, #0
    4a28:	9305      	str	r3, [sp, #20]
    4a2a:	e012      	b.n	4a52 <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    4a2c:	9b03      	ldr	r3, [sp, #12]
    4a2e:	1d1a      	adds	r2, r3, #4
    4a30:	9203      	str	r2, [sp, #12]
    4a32:	681b      	ldr	r3, [r3, #0]
    4a34:	9304      	str	r3, [sp, #16]
    4a36:	2300      	movs	r3, #0
    4a38:	9305      	str	r3, [sp, #20]
    4a3a:	e00a      	b.n	4a52 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    4a3c:	9b03      	ldr	r3, [sp, #12]
    4a3e:	3307      	adds	r3, #7
    4a40:	f023 0307 	bic.w	r3, r3, #7
    4a44:	f103 0208 	add.w	r2, r3, #8
    4a48:	9203      	str	r2, [sp, #12]
    4a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    4a4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    4a52:	2901      	cmp	r1, #1
    4a54:	d01c      	beq.n	4a90 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    4a56:	2902      	cmp	r1, #2
    4a58:	f47f aeff 	bne.w	485a <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    4a5c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    4a60:	9304      	str	r3, [sp, #16]
    4a62:	2300      	movs	r3, #0
    4a64:	9305      	str	r3, [sp, #20]
    4a66:	e6f8      	b.n	485a <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    4a68:	9b03      	ldr	r3, [sp, #12]
    4a6a:	3307      	adds	r3, #7
    4a6c:	f023 0307 	bic.w	r3, r3, #7
    4a70:	f103 0208 	add.w	r2, r3, #8
    4a74:	9203      	str	r2, [sp, #12]
    4a76:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    4a7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    4a7e:	e7e8      	b.n	4a52 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    4a80:	9b03      	ldr	r3, [sp, #12]
    4a82:	1d1a      	adds	r2, r3, #4
    4a84:	9203      	str	r2, [sp, #12]
    4a86:	681b      	ldr	r3, [r3, #0]
				value->uint =
    4a88:	9304      	str	r3, [sp, #16]
    4a8a:	2300      	movs	r3, #0
    4a8c:	9305      	str	r3, [sp, #20]
				break;
    4a8e:	e7e0      	b.n	4a52 <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    4a90:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4a94:	9304      	str	r3, [sp, #16]
    4a96:	2300      	movs	r3, #0
    4a98:	9305      	str	r3, [sp, #20]
    4a9a:	e6de      	b.n	485a <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    4a9c:	2908      	cmp	r1, #8
    4a9e:	d00b      	beq.n	4ab8 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    4aa0:	9b03      	ldr	r3, [sp, #12]
    4aa2:	3307      	adds	r3, #7
    4aa4:	f023 0307 	bic.w	r3, r3, #7
    4aa8:	f103 0208 	add.w	r2, r3, #8
    4aac:	9203      	str	r2, [sp, #12]
    4aae:	e9d3 2300 	ldrd	r2, r3, [r3]
    4ab2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4ab6:	e6d0      	b.n	485a <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    4ab8:	9b03      	ldr	r3, [sp, #12]
    4aba:	3307      	adds	r3, #7
    4abc:	f023 0307 	bic.w	r3, r3, #7
    4ac0:	f103 0208 	add.w	r2, r3, #8
    4ac4:	9203      	str	r2, [sp, #12]
    4ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
    4aca:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4ace:	e6c4      	b.n	485a <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    4ad0:	9b03      	ldr	r3, [sp, #12]
    4ad2:	1d1a      	adds	r2, r3, #4
    4ad4:	9203      	str	r2, [sp, #12]
    4ad6:	681b      	ldr	r3, [r3, #0]
    4ad8:	9304      	str	r3, [sp, #16]
    4ada:	e6be      	b.n	485a <cbvprintf+0xae>
			OUTS(sp, fp);
    4adc:	9f02      	ldr	r7, [sp, #8]
    4ade:	463b      	mov	r3, r7
    4ae0:	464a      	mov	r2, r9
    4ae2:	4629      	mov	r1, r5
    4ae4:	4630      	mov	r0, r6
    4ae6:	f00a fb99 	bl	f21c <outs>
    4aea:	2800      	cmp	r0, #0
    4aec:	f2c0 8141 	blt.w	4d72 <cbvprintf+0x5c6>
    4af0:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    4af2:	46b9      	mov	r9, r7
			continue;
    4af4:	e662      	b.n	47bc <cbvprintf+0x10>
		case '%':
			OUTC('%');
    4af6:	4629      	mov	r1, r5
    4af8:	2025      	movs	r0, #37	; 0x25
    4afa:	47b0      	blx	r6
    4afc:	2800      	cmp	r0, #0
    4afe:	f2c0 8138 	blt.w	4d72 <cbvprintf+0x5c6>
    4b02:	3401      	adds	r4, #1
		char sign = 0;
    4b04:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    4b06:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    4b0a:	f04f 0900 	mov.w	r9, #0
			break;
    4b0e:	e09b      	b.n	4c48 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    4b10:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    4b14:	f1ba 0f00 	cmp.w	sl, #0
    4b18:	db07      	blt.n	4b2a <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    4b1a:	4651      	mov	r1, sl
    4b1c:	4648      	mov	r0, r9
    4b1e:	f00b fe60 	bl	107e2 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    4b22:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    4b26:	46d8      	mov	r8, fp
			precision = -1;

			break;
    4b28:	e08e      	b.n	4c48 <cbvprintf+0x49c>
				len = strlen(bps);
    4b2a:	4648      	mov	r0, r9
    4b2c:	f7fc f993 	bl	e56 <strlen>
    4b30:	e7f7      	b.n	4b22 <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    4b32:	9b04      	ldr	r3, [sp, #16]
    4b34:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    4b38:	46d8      	mov	r8, fp
			bpe = buf + 1;
    4b3a:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    4b3e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    4b42:	e081      	b.n	4c48 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    4b44:	f018 0f08 	tst.w	r8, #8
    4b48:	d105      	bne.n	4b56 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    4b4a:	f018 0810 	ands.w	r8, r8, #16
    4b4e:	d004      	beq.n	4b5a <cbvprintf+0x3ae>
				sign = ' ';
    4b50:	f04f 0820 	mov.w	r8, #32
    4b54:	e001      	b.n	4b5a <cbvprintf+0x3ae>
				sign = '+';
    4b56:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    4b5a:	9a04      	ldr	r2, [sp, #16]
    4b5c:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    4b5e:	2b00      	cmp	r3, #0
    4b60:	db02      	blt.n	4b68 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    4b62:	9204      	str	r2, [sp, #16]
    4b64:	9305      	str	r3, [sp, #20]
    4b66:	e008      	b.n	4b7a <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    4b68:	4252      	negs	r2, r2
    4b6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4b6e:	9204      	str	r2, [sp, #16]
    4b70:	9305      	str	r3, [sp, #20]
				sign = '-';
    4b72:	f04f 082d 	mov.w	r8, #45	; 0x2d
    4b76:	e000      	b.n	4b7a <cbvprintf+0x3ce>
		switch (conv->specifier) {
    4b78:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    4b7a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    4b7e:	9300      	str	r3, [sp, #0]
    4b80:	ab0a      	add	r3, sp, #40	; 0x28
    4b82:	aa06      	add	r2, sp, #24
    4b84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4b88:	f7ff fda0 	bl	46cc <encode_uint>
    4b8c:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    4b8e:	f1ba 0f00 	cmp.w	sl, #0
    4b92:	f2c0 8088 	blt.w	4ca6 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    4b96:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    4b9a:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    4b9e:	f89d 2018 	ldrb.w	r2, [sp, #24]
    4ba2:	f36f 1286 	bfc	r2, #6, #1
    4ba6:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    4baa:	459a      	cmp	sl, r3
    4bac:	d97e      	bls.n	4cac <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    4bae:	ebaa 0303 	sub.w	r3, sl, r3
    4bb2:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    4bb4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    4bb8:	e046      	b.n	4c48 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    4bba:	9804      	ldr	r0, [sp, #16]
    4bbc:	b928      	cbnz	r0, 4bca <cbvprintf+0x41e>
		char sign = 0;
    4bbe:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    4bc0:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 4d78 <cbvprintf+0x5cc>
			bps = "(nil)";
    4bc4:	f1aa 0905 	sub.w	r9, sl, #5
    4bc8:	e03e      	b.n	4c48 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4bca:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    4bce:	9300      	str	r3, [sp, #0]
    4bd0:	ab0a      	add	r3, sp, #40	; 0x28
    4bd2:	aa06      	add	r2, sp, #24
    4bd4:	2100      	movs	r1, #0
    4bd6:	f7ff fd79 	bl	46cc <encode_uint>
    4bda:	4681      	mov	r9, r0
				conv->altform_0c = true;
    4bdc:	f89d 301a 	ldrb.w	r3, [sp, #26]
    4be0:	f043 0310 	orr.w	r3, r3, #16
    4be4:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    4be8:	2378      	movs	r3, #120	; 0x78
    4bea:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    4bee:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    4bf0:	e7cd      	b.n	4b8e <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    4bf2:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    4bf4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    4bf8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    4bfc:	2b07      	cmp	r3, #7
    4bfe:	d806      	bhi.n	4c0e <cbvprintf+0x462>
    4c00:	e8df f003 	tbb	[pc, r3]
    4c04:	0f0d0b04 	.word	0x0f0d0b04
    4c08:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    4c0c:	6014      	str	r4, [r2, #0]
		char sign = 0;
    4c0e:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    4c10:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    4c14:	f04f 0900 	mov.w	r9, #0
}
    4c18:	e016      	b.n	4c48 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    4c1a:	7014      	strb	r4, [r2, #0]
		break;
    4c1c:	e7f7      	b.n	4c0e <cbvprintf+0x462>
		*(short *)dp = (short)count;
    4c1e:	8014      	strh	r4, [r2, #0]
		break;
    4c20:	e7f5      	b.n	4c0e <cbvprintf+0x462>
		*(long *)dp = (long)count;
    4c22:	6014      	str	r4, [r2, #0]
		break;
    4c24:	e7f3      	b.n	4c0e <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    4c26:	17e3      	asrs	r3, r4, #31
    4c28:	6014      	str	r4, [r2, #0]
    4c2a:	6053      	str	r3, [r2, #4]
		break;
    4c2c:	e7ef      	b.n	4c0e <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    4c2e:	17e3      	asrs	r3, r4, #31
    4c30:	6014      	str	r4, [r2, #0]
    4c32:	6053      	str	r3, [r2, #4]
		break;
    4c34:	e7eb      	b.n	4c0e <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    4c36:	6014      	str	r4, [r2, #0]
		break;
    4c38:	e7e9      	b.n	4c0e <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    4c3a:	6014      	str	r4, [r2, #0]
		break;
    4c3c:	e7e7      	b.n	4c0e <cbvprintf+0x462>
		switch (conv->specifier) {
    4c3e:	46d8      	mov	r8, fp
    4c40:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    4c44:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    4c48:	f1b9 0f00 	cmp.w	r9, #0
    4c4c:	f000 808d 	beq.w	4d6a <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    4c50:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    4c54:	f1b8 0f00 	cmp.w	r8, #0
    4c58:	d000      	beq.n	4c5c <cbvprintf+0x4b0>
			nj_len += 1U;
    4c5a:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    4c5c:	f89d 101a 	ldrb.w	r1, [sp, #26]
    4c60:	f011 0f10 	tst.w	r1, #16
    4c64:	d025      	beq.n	4cb2 <cbvprintf+0x506>
			nj_len += 2U;
    4c66:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    4c68:	9b07      	ldr	r3, [sp, #28]
    4c6a:	4413      	add	r3, r2
		if (conv->pad_fp) {
    4c6c:	f011 0f40 	tst.w	r1, #64	; 0x40
    4c70:	d001      	beq.n	4c76 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    4c72:	9a08      	ldr	r2, [sp, #32]
    4c74:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    4c76:	2f00      	cmp	r7, #0
    4c78:	dd31      	ble.n	4cde <cbvprintf+0x532>
			width -= (int)nj_len;
    4c7a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    4c7c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    4c80:	f013 0f04 	tst.w	r3, #4
    4c84:	d12b      	bne.n	4cde <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    4c86:	f013 0f40 	tst.w	r3, #64	; 0x40
    4c8a:	d017      	beq.n	4cbc <cbvprintf+0x510>
					if (sign != 0) {
    4c8c:	f1b8 0f00 	cmp.w	r8, #0
    4c90:	d017      	beq.n	4cc2 <cbvprintf+0x516>
						OUTC(sign);
    4c92:	4629      	mov	r1, r5
    4c94:	4640      	mov	r0, r8
    4c96:	47b0      	blx	r6
    4c98:	2800      	cmp	r0, #0
    4c9a:	db6a      	blt.n	4d72 <cbvprintf+0x5c6>
    4c9c:	3401      	adds	r4, #1
						sign = 0;
    4c9e:	46d8      	mov	r8, fp
					}
					pad = '0';
    4ca0:	f04f 0b30 	mov.w	fp, #48	; 0x30
    4ca4:	e00f      	b.n	4cc6 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    4ca6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    4caa:	e7cd      	b.n	4c48 <cbvprintf+0x49c>
    4cac:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    4cb0:	e7ca      	b.n	4c48 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    4cb2:	f011 0f08 	tst.w	r1, #8
    4cb6:	d0d7      	beq.n	4c68 <cbvprintf+0x4bc>
			nj_len += 1U;
    4cb8:	3201      	adds	r2, #1
    4cba:	e7d5      	b.n	4c68 <cbvprintf+0x4bc>
				char pad = ' ';
    4cbc:	f04f 0b20 	mov.w	fp, #32
    4cc0:	e001      	b.n	4cc6 <cbvprintf+0x51a>
					pad = '0';
    4cc2:	f04f 0b30 	mov.w	fp, #48	; 0x30
    4cc6:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    4cc8:	1e5f      	subs	r7, r3, #1
    4cca:	2b00      	cmp	r3, #0
    4ccc:	dd07      	ble.n	4cde <cbvprintf+0x532>
					OUTC(pad);
    4cce:	4629      	mov	r1, r5
    4cd0:	4658      	mov	r0, fp
    4cd2:	47b0      	blx	r6
    4cd4:	2800      	cmp	r0, #0
    4cd6:	db4c      	blt.n	4d72 <cbvprintf+0x5c6>
    4cd8:	3401      	adds	r4, #1
				while (width-- > 0) {
    4cda:	463b      	mov	r3, r7
    4cdc:	e7f4      	b.n	4cc8 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    4cde:	f1b8 0f00 	cmp.w	r8, #0
    4ce2:	d005      	beq.n	4cf0 <cbvprintf+0x544>
			OUTC(sign);
    4ce4:	4629      	mov	r1, r5
    4ce6:	4640      	mov	r0, r8
    4ce8:	47b0      	blx	r6
    4cea:	2800      	cmp	r0, #0
    4cec:	db41      	blt.n	4d72 <cbvprintf+0x5c6>
    4cee:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    4cf0:	f89d 301a 	ldrb.w	r3, [sp, #26]
    4cf4:	f3c3 1200 	ubfx	r2, r3, #4, #1
    4cf8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    4cfc:	4313      	orrs	r3, r2
    4cfe:	d005      	beq.n	4d0c <cbvprintf+0x560>
				OUTC('0');
    4d00:	4629      	mov	r1, r5
    4d02:	2030      	movs	r0, #48	; 0x30
    4d04:	47b0      	blx	r6
    4d06:	2800      	cmp	r0, #0
    4d08:	db33      	blt.n	4d72 <cbvprintf+0x5c6>
    4d0a:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    4d0c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    4d10:	f013 0f10 	tst.w	r3, #16
    4d14:	d006      	beq.n	4d24 <cbvprintf+0x578>
				OUTC(conv->specifier);
    4d16:	4629      	mov	r1, r5
    4d18:	f89d 001b 	ldrb.w	r0, [sp, #27]
    4d1c:	47b0      	blx	r6
    4d1e:	2800      	cmp	r0, #0
    4d20:	db27      	blt.n	4d72 <cbvprintf+0x5c6>
    4d22:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    4d24:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    4d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    4d2a:	2b00      	cmp	r3, #0
    4d2c:	dd07      	ble.n	4d3e <cbvprintf+0x592>
				OUTC('0');
    4d2e:	4629      	mov	r1, r5
    4d30:	2030      	movs	r0, #48	; 0x30
    4d32:	47b0      	blx	r6
    4d34:	2800      	cmp	r0, #0
    4d36:	db1c      	blt.n	4d72 <cbvprintf+0x5c6>
    4d38:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    4d3a:	4643      	mov	r3, r8
    4d3c:	e7f3      	b.n	4d26 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    4d3e:	4653      	mov	r3, sl
    4d40:	464a      	mov	r2, r9
    4d42:	4629      	mov	r1, r5
    4d44:	4630      	mov	r0, r6
    4d46:	f00a fa69 	bl	f21c <outs>
    4d4a:	2800      	cmp	r0, #0
    4d4c:	db11      	blt.n	4d72 <cbvprintf+0x5c6>
    4d4e:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    4d50:	2f00      	cmp	r7, #0
    4d52:	dd07      	ble.n	4d64 <cbvprintf+0x5b8>
			OUTC(' ');
    4d54:	4629      	mov	r1, r5
    4d56:	2020      	movs	r0, #32
    4d58:	47b0      	blx	r6
    4d5a:	2800      	cmp	r0, #0
    4d5c:	db09      	blt.n	4d72 <cbvprintf+0x5c6>
    4d5e:	3401      	adds	r4, #1
			--width;
    4d60:	3f01      	subs	r7, #1
    4d62:	e7f5      	b.n	4d50 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    4d64:	f8dd 9008 	ldr.w	r9, [sp, #8]
    4d68:	e528      	b.n	47bc <cbvprintf+0x10>
    4d6a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    4d6e:	e525      	b.n	47bc <cbvprintf+0x10>
		}
	}

	return count;
    4d70:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    4d72:	b011      	add	sp, #68	; 0x44
    4d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d78:	000119e9 	.word	0x000119e9

00004d7c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    4d7c:	b508      	push	{r3, lr}
	__asm__ volatile(
    4d7e:	f04f 0220 	mov.w	r2, #32
    4d82:	f3ef 8311 	mrs	r3, BASEPRI
    4d86:	f382 8812 	msr	BASEPRI_MAX, r2
    4d8a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    4d8e:	f001 ffff 	bl	6d90 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    4d92:	4803      	ldr	r0, [pc, #12]	; (4da0 <sys_reboot+0x24>)
    4d94:	f00a f95a 	bl	f04c <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    4d98:	f000 ffa8 	bl	5cec <arch_cpu_idle>
    4d9c:	e7fc      	b.n	4d98 <sys_reboot+0x1c>
    4d9e:	bf00      	nop
    4da0:	000119ec 	.word	0x000119ec

00004da4 <msg_process>:

static void msg_process(union log_msgs msg, bool bypass)
{
	struct log_backend const *backend;

	if (!bypass) {
    4da4:	2900      	cmp	r1, #0
    4da6:	d150      	bne.n	4e4a <msg_process+0xa6>
{
    4da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4dac:	4607      	mov	r7, r0
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    4dae:	2400      	movs	r4, #0
    4db0:	e022      	b.n	4df8 <msg_process+0x54>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
    4db2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4e4c <msg_process+0xa8>
    4db6:	f44f 7399 	mov.w	r3, #306	; 0x132
    4dba:	464a      	mov	r2, r9
    4dbc:	4924      	ldr	r1, [pc, #144]	; (4e50 <msg_process+0xac>)
    4dbe:	4825      	ldr	r0, [pc, #148]	; (4e54 <msg_process+0xb0>)
    4dc0:	f00a fa4d 	bl	f25e <assert_print>
    4dc4:	f44f 7199 	mov.w	r1, #306	; 0x132
    4dc8:	4648      	mov	r0, r9
    4dca:	f00a fa41 	bl	f250 <assert_post_action>
    4dce:	e01f      	b.n	4e10 <msg_process+0x6c>
	__ASSERT_NO_MSG(backend != NULL);
    4dd0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 4e4c <msg_process+0xa8>
    4dd4:	2385      	movs	r3, #133	; 0x85
    4dd6:	464a      	mov	r2, r9
    4dd8:	491d      	ldr	r1, [pc, #116]	; (4e50 <msg_process+0xac>)
    4dda:	481e      	ldr	r0, [pc, #120]	; (4e54 <msg_process+0xb0>)
    4ddc:	f00a fa3f 	bl	f25e <assert_print>
    4de0:	2185      	movs	r1, #133	; 0x85
    4de2:	4648      	mov	r0, r9
    4de4:	f00a fa34 	bl	f250 <assert_post_action>
    4de8:	e01e      	b.n	4e28 <msg_process+0x84>
	backend->api->process(backend, msg);
    4dea:	f858 3005 	ldr.w	r3, [r8, r5]
    4dee:	681b      	ldr	r3, [r3, #0]
    4df0:	4639      	mov	r1, r7
    4df2:	4630      	mov	r0, r6
    4df4:	4798      	blx	r3
    4df6:	3401      	adds	r4, #1
    4df8:	4b17      	ldr	r3, [pc, #92]	; (4e58 <msg_process+0xb4>)
    4dfa:	4a18      	ldr	r2, [pc, #96]	; (4e5c <msg_process+0xb8>)
    4dfc:	1a9b      	subs	r3, r3, r2
    4dfe:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    4e02:	da20      	bge.n	4e46 <msg_process+0xa2>
	return &__log_backends_start[idx];
    4e04:	ea4f 1804 	mov.w	r8, r4, lsl #4
    4e08:	4d14      	ldr	r5, [pc, #80]	; (4e5c <msg_process+0xb8>)
	__ASSERT_NO_MSG(backend != NULL);
    4e0a:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    4e0e:	d0d0      	beq.n	4db2 <msg_process+0xe>
	return backend->cb->active;
    4e10:	6873      	ldr	r3, [r6, #4]
    4e12:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);
			if (log_backend_is_active(backend) &&
    4e14:	2b00      	cmp	r3, #0
    4e16:	d0ee      	beq.n	4df6 <msg_process+0x52>
			    msg_filter_check(backend, msg)) {
    4e18:	4639      	mov	r1, r7
    4e1a:	4630      	mov	r0, r6
    4e1c:	f00a fa30 	bl	f280 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    4e20:	2800      	cmp	r0, #0
    4e22:	d0e8      	beq.n	4df6 <msg_process+0x52>
	__ASSERT_NO_MSG(backend != NULL);
    4e24:	2e00      	cmp	r6, #0
    4e26:	d0d3      	beq.n	4dd0 <msg_process+0x2c>
	__ASSERT_NO_MSG(msg != NULL);
    4e28:	2f00      	cmp	r7, #0
    4e2a:	d1de      	bne.n	4dea <msg_process+0x46>
    4e2c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 4e4c <msg_process+0xa8>
    4e30:	2386      	movs	r3, #134	; 0x86
    4e32:	464a      	mov	r2, r9
    4e34:	490a      	ldr	r1, [pc, #40]	; (4e60 <msg_process+0xbc>)
    4e36:	4807      	ldr	r0, [pc, #28]	; (4e54 <msg_process+0xb0>)
    4e38:	f00a fa11 	bl	f25e <assert_print>
    4e3c:	2186      	movs	r1, #134	; 0x86
    4e3e:	4648      	mov	r0, r9
    4e40:	f00a fa06 	bl	f250 <assert_post_action>
    4e44:	e7d1      	b.n	4dea <msg_process+0x46>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    4e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4e4a:	4770      	bx	lr
    4e4c:	00011a18 	.word	0x00011a18
    4e50:	00011a50 	.word	0x00011a50
    4e54:	0001160c 	.word	0x0001160c
    4e58:	00011080 	.word	0x00011080
    4e5c:	00011060 	.word	0x00011060
    4e60:	00011a68 	.word	0x00011a68

00004e64 <log_format_func_t_get>:
}
    4e64:	4b01      	ldr	r3, [pc, #4]	; (4e6c <log_format_func_t_get+0x8>)
    4e66:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4e6a:	4770      	bx	lr
    4e6c:	00011aec 	.word	0x00011aec

00004e70 <log_init>:
{
    4e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
    4e72:	4b20      	ldr	r3, [pc, #128]	; (4ef4 <log_init+0x84>)
    4e74:	4a20      	ldr	r2, [pc, #128]	; (4ef8 <log_init+0x88>)
    4e76:	1a9b      	subs	r3, r3, r2
    4e78:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    4e7a:	2b90      	cmp	r3, #144	; 0x90
    4e7c:	d80e      	bhi.n	4e9c <log_init+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4e7e:	4b1f      	ldr	r3, [pc, #124]	; (4efc <log_init+0x8c>)
    4e80:	f3bf 8f5b 	dmb	ish
    4e84:	e853 2f00 	ldrex	r2, [r3]
    4e88:	1c51      	adds	r1, r2, #1
    4e8a:	e843 1000 	strex	r0, r1, [r3]
    4e8e:	2800      	cmp	r0, #0
    4e90:	d1f8      	bne.n	4e84 <log_init+0x14>
    4e92:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    4e96:	bb5a      	cbnz	r2, 4ef0 <log_init+0x80>
	for (i = 0; i < log_backend_count_get(); i++) {
    4e98:	2400      	movs	r4, #0
    4e9a:	e017      	b.n	4ecc <log_init+0x5c>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    4e9c:	4c18      	ldr	r4, [pc, #96]	; (4f00 <log_init+0x90>)
    4e9e:	f240 2373 	movw	r3, #627	; 0x273
    4ea2:	4622      	mov	r2, r4
    4ea4:	4917      	ldr	r1, [pc, #92]	; (4f04 <log_init+0x94>)
    4ea6:	4818      	ldr	r0, [pc, #96]	; (4f08 <log_init+0x98>)
    4ea8:	f00a f9d9 	bl	f25e <assert_print>
    4eac:	f240 2173 	movw	r1, #627	; 0x273
    4eb0:	4620      	mov	r0, r4
    4eb2:	f00a f9cd 	bl	f250 <assert_post_action>
    4eb6:	e7e2      	b.n	4e7e <log_init+0xe>
					   backend->cb->ctx,
    4eb8:	4b0f      	ldr	r3, [pc, #60]	; (4ef8 <log_init+0x88>)
    4eba:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    4ebe:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    4ec0:	2204      	movs	r2, #4
    4ec2:	6819      	ldr	r1, [r3, #0]
    4ec4:	4628      	mov	r0, r5
    4ec6:	f000 f8d3 	bl	5070 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    4eca:	3401      	adds	r4, #1
    4ecc:	42b4      	cmp	r4, r6
    4ece:	da0f      	bge.n	4ef0 <log_init+0x80>
		const struct log_backend *backend = log_backend_get(i);
    4ed0:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
    4ed2:	4d09      	ldr	r5, [pc, #36]	; (4ef8 <log_init+0x88>)
    4ed4:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    4ed8:	7b2b      	ldrb	r3, [r5, #12]
    4eda:	2b00      	cmp	r3, #0
    4edc:	d0f5      	beq.n	4eca <log_init+0x5a>
			if (backend->api->init != NULL) {
    4ede:	0123      	lsls	r3, r4, #4
    4ee0:	4a05      	ldr	r2, [pc, #20]	; (4ef8 <log_init+0x88>)
    4ee2:	58d3      	ldr	r3, [r2, r3]
    4ee4:	699b      	ldr	r3, [r3, #24]
    4ee6:	2b00      	cmp	r3, #0
    4ee8:	d0e6      	beq.n	4eb8 <log_init+0x48>
				backend->api->init(backend);
    4eea:	4628      	mov	r0, r5
    4eec:	4798      	blx	r3
    4eee:	e7e3      	b.n	4eb8 <log_init+0x48>
}
    4ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4ef2:	bf00      	nop
    4ef4:	00011080 	.word	0x00011080
    4ef8:	00011060 	.word	0x00011060
    4efc:	2000c9b4 	.word	0x2000c9b4
    4f00:	00011a7c 	.word	0x00011a7c
    4f04:	00011ac4 	.word	0x00011ac4
    4f08:	0001160c 	.word	0x0001160c

00004f0c <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    4f0c:	b138      	cbz	r0, 4f1e <log_set_timestamp_func+0x12>
{
    4f0e:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    4f10:	4a04      	ldr	r2, [pc, #16]	; (4f24 <log_set_timestamp_func+0x18>)
    4f12:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    4f14:	4608      	mov	r0, r1
    4f16:	f000 fac3 	bl	54a0 <log_output_timestamp_freq_set>
	return 0;
    4f1a:	2000      	movs	r0, #0
}
    4f1c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    4f1e:	f06f 0015 	mvn.w	r0, #21
}
    4f22:	4770      	bx	lr
    4f24:	20004018 	.word	0x20004018

00004f28 <log_core_init>:
{
    4f28:	b508      	push	{r3, lr}
	panic_mode = false;
    4f2a:	2300      	movs	r3, #0
    4f2c:	4a04      	ldr	r2, [pc, #16]	; (4f40 <log_core_init+0x18>)
    4f2e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    4f30:	4a04      	ldr	r2, [pc, #16]	; (4f44 <log_core_init+0x1c>)
    4f32:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    4f34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    4f38:	4803      	ldr	r0, [pc, #12]	; (4f48 <log_core_init+0x20>)
    4f3a:	f7ff ffe7 	bl	4f0c <log_set_timestamp_func>
}
    4f3e:	bd08      	pop	{r3, pc}
    4f40:	2000d718 	.word	0x2000d718
    4f44:	2000c9b0 	.word	0x2000c9b0
    4f48:	0000f285 	.word	0x0000f285

00004f4c <z_impl_log_panic>:
	if (panic_mode) {
    4f4c:	4b20      	ldr	r3, [pc, #128]	; (4fd0 <z_impl_log_panic+0x84>)
    4f4e:	781b      	ldrb	r3, [r3, #0]
    4f50:	b103      	cbz	r3, 4f54 <z_impl_log_panic+0x8>
    4f52:	4770      	bx	lr
{
    4f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
    4f58:	f7ff ff8a 	bl	4e70 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    4f5c:	2400      	movs	r4, #0
    4f5e:	e013      	b.n	4f88 <z_impl_log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
    4f60:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4fd4 <z_impl_log_panic+0x88>
    4f64:	f44f 7399 	mov.w	r3, #306	; 0x132
    4f68:	4642      	mov	r2, r8
    4f6a:	491b      	ldr	r1, [pc, #108]	; (4fd8 <z_impl_log_panic+0x8c>)
    4f6c:	481b      	ldr	r0, [pc, #108]	; (4fdc <z_impl_log_panic+0x90>)
    4f6e:	f00a f976 	bl	f25e <assert_print>
    4f72:	f44f 7199 	mov.w	r1, #306	; 0x132
    4f76:	4640      	mov	r0, r8
    4f78:	f00a f96a 	bl	f250 <assert_post_action>
    4f7c:	e00f      	b.n	4f9e <z_impl_log_panic+0x52>
	backend->api->panic(backend);
    4f7e:	597b      	ldr	r3, [r7, r5]
    4f80:	695b      	ldr	r3, [r3, #20]
    4f82:	4630      	mov	r0, r6
    4f84:	4798      	blx	r3
    4f86:	3401      	adds	r4, #1
    4f88:	4b15      	ldr	r3, [pc, #84]	; (4fe0 <z_impl_log_panic+0x94>)
    4f8a:	4a16      	ldr	r2, [pc, #88]	; (4fe4 <z_impl_log_panic+0x98>)
    4f8c:	1a9b      	subs	r3, r3, r2
    4f8e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    4f92:	da17      	bge.n	4fc4 <z_impl_log_panic+0x78>
	return &__log_backends_start[idx];
    4f94:	0127      	lsls	r7, r4, #4
    4f96:	4d13      	ldr	r5, [pc, #76]	; (4fe4 <z_impl_log_panic+0x98>)
	__ASSERT_NO_MSG(backend != NULL);
    4f98:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    4f9c:	d0e0      	beq.n	4f60 <z_impl_log_panic+0x14>
	return backend->cb->active;
    4f9e:	6873      	ldr	r3, [r6, #4]
    4fa0:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    4fa2:	2b00      	cmp	r3, #0
    4fa4:	d0ef      	beq.n	4f86 <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
    4fa6:	2e00      	cmp	r6, #0
    4fa8:	d1e9      	bne.n	4f7e <z_impl_log_panic+0x32>
    4faa:	f8df 8028 	ldr.w	r8, [pc, #40]	; 4fd4 <z_impl_log_panic+0x88>
    4fae:	23d7      	movs	r3, #215	; 0xd7
    4fb0:	4642      	mov	r2, r8
    4fb2:	4909      	ldr	r1, [pc, #36]	; (4fd8 <z_impl_log_panic+0x8c>)
    4fb4:	4809      	ldr	r0, [pc, #36]	; (4fdc <z_impl_log_panic+0x90>)
    4fb6:	f00a f952 	bl	f25e <assert_print>
    4fba:	21d7      	movs	r1, #215	; 0xd7
    4fbc:	4640      	mov	r0, r8
    4fbe:	f00a f947 	bl	f250 <assert_post_action>
    4fc2:	e7dc      	b.n	4f7e <z_impl_log_panic+0x32>
	panic_mode = true;
    4fc4:	4b02      	ldr	r3, [pc, #8]	; (4fd0 <z_impl_log_panic+0x84>)
    4fc6:	2201      	movs	r2, #1
    4fc8:	701a      	strb	r2, [r3, #0]
}
    4fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fce:	bf00      	nop
    4fd0:	2000d718 	.word	0x2000d718
    4fd4:	00011a18 	.word	0x00011a18
    4fd8:	00011a50 	.word	0x00011a50
    4fdc:	0001160c 	.word	0x0001160c
    4fe0:	00011080 	.word	0x00011080
    4fe4:	00011060 	.word	0x00011060

00004fe8 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    4fe8:	4b01      	ldr	r3, [pc, #4]	; (4ff0 <z_log_notify_backend_enabled+0x8>)
    4fea:	2201      	movs	r2, #1
    4fec:	701a      	strb	r2, [r3, #0]
}
    4fee:	4770      	bx	lr
    4ff0:	2000d717 	.word	0x2000d717

00004ff4 <z_log_dropped>:
    4ff4:	4b0d      	ldr	r3, [pc, #52]	; (502c <z_log_dropped+0x38>)
    4ff6:	f3bf 8f5b 	dmb	ish
    4ffa:	e853 2f00 	ldrex	r2, [r3]
    4ffe:	3201      	adds	r2, #1
    5000:	e843 2100 	strex	r1, r2, [r3]
    5004:	2900      	cmp	r1, #0
    5006:	d1f8      	bne.n	4ffa <z_log_dropped+0x6>
    5008:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    500c:	b900      	cbnz	r0, 5010 <z_log_dropped+0x1c>
		atomic_dec(&buffered_cnt);
	}
}
    500e:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5010:	4b07      	ldr	r3, [pc, #28]	; (5030 <z_log_dropped+0x3c>)
    5012:	f3bf 8f5b 	dmb	ish
    5016:	e853 2f00 	ldrex	r2, [r3]
    501a:	3a01      	subs	r2, #1
    501c:	e843 2100 	strex	r1, r2, [r3]
    5020:	2900      	cmp	r1, #0
    5022:	d1f8      	bne.n	5016 <z_log_dropped+0x22>
    5024:	f3bf 8f5b 	dmb	ish
    5028:	e7f1      	b.n	500e <z_log_dropped+0x1a>
    502a:	bf00      	nop
    502c:	2000c9b0 	.word	0x2000c9b0
    5030:	2000c9ac 	.word	0x2000c9ac

00005034 <z_log_msg2_commit>:
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
    5034:	b510      	push	{r4, lr}
    5036:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    5038:	4b04      	ldr	r3, [pc, #16]	; (504c <z_log_msg2_commit+0x18>)
    503a:	681b      	ldr	r3, [r3, #0]
    503c:	4798      	blx	r3
    503e:	60a0      	str	r0, [r4, #8]
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    5040:	2100      	movs	r1, #0
    5042:	4620      	mov	r0, r4
    5044:	f7ff feae 	bl	4da4 <msg_process>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    5048:	bd10      	pop	{r4, pc}
    504a:	bf00      	nop
    504c:	20004018 	.word	0x20004018

00005050 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    5050:	4b05      	ldr	r3, [pc, #20]	; (5068 <log_source_name_get+0x18>)
    5052:	4a06      	ldr	r2, [pc, #24]	; (506c <log_source_name_get+0x1c>)
    5054:	1a9b      	subs	r3, r3, r2
    5056:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    505a:	d202      	bcs.n	5062 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    505c:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    5060:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    5062:	2000      	movs	r0, #0
}
    5064:	4770      	bx	lr
    5066:	bf00      	nop
    5068:	00011060 	.word	0x00011060
    506c:	00011018 	.word	0x00011018

00005070 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    5070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5072:	4604      	mov	r4, r0
    5074:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    5076:	4d1e      	ldr	r5, [pc, #120]	; (50f0 <log_backend_enable+0x80>)
    5078:	1b45      	subs	r5, r0, r5
    507a:	112d      	asrs	r5, r5, #4
    507c:	3501      	adds	r5, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    507e:	6803      	ldr	r3, [r0, #0]
    5080:	681b      	ldr	r3, [r3, #0]
    5082:	b163      	cbz	r3, 509e <log_backend_enable+0x2e>
	}

	log_backend_id_set(backend, id);
    5084:	b2ed      	uxtb	r5, r5
	__ASSERT_NO_MSG(backend != NULL);
    5086:	b1cc      	cbz	r4, 50bc <log_backend_enable+0x4c>
	backend->cb->id = id;
    5088:	6863      	ldr	r3, [r4, #4]
    508a:	711d      	strb	r5, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    508c:	b314      	cbz	r4, 50d4 <log_backend_enable+0x64>
	backend->cb->ctx = ctx;
    508e:	6863      	ldr	r3, [r4, #4]
    5090:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    5092:	6863      	ldr	r3, [r4, #4]
    5094:	2201      	movs	r2, #1
    5096:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    5098:	f7ff ffa6 	bl	4fe8 <z_log_notify_backend_enabled>
}
    509c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    509e:	4f15      	ldr	r7, [pc, #84]	; (50f4 <log_backend_enable+0x84>)
    50a0:	23bb      	movs	r3, #187	; 0xbb
    50a2:	463a      	mov	r2, r7
    50a4:	4914      	ldr	r1, [pc, #80]	; (50f8 <log_backend_enable+0x88>)
    50a6:	4815      	ldr	r0, [pc, #84]	; (50fc <log_backend_enable+0x8c>)
    50a8:	f00a f8d9 	bl	f25e <assert_print>
    50ac:	4814      	ldr	r0, [pc, #80]	; (5100 <log_backend_enable+0x90>)
    50ae:	f00a f8d6 	bl	f25e <assert_print>
    50b2:	21bb      	movs	r1, #187	; 0xbb
    50b4:	4638      	mov	r0, r7
    50b6:	f00a f8cb 	bl	f250 <assert_post_action>
    50ba:	e7e3      	b.n	5084 <log_backend_enable+0x14>
	__ASSERT_NO_MSG(backend != NULL);
    50bc:	4f11      	ldr	r7, [pc, #68]	; (5104 <log_backend_enable+0x94>)
    50be:	23e6      	movs	r3, #230	; 0xe6
    50c0:	463a      	mov	r2, r7
    50c2:	4911      	ldr	r1, [pc, #68]	; (5108 <log_backend_enable+0x98>)
    50c4:	480d      	ldr	r0, [pc, #52]	; (50fc <log_backend_enable+0x8c>)
    50c6:	f00a f8ca 	bl	f25e <assert_print>
    50ca:	21e6      	movs	r1, #230	; 0xe6
    50cc:	4638      	mov	r0, r7
    50ce:	f00a f8bf 	bl	f250 <assert_post_action>
    50d2:	e7d9      	b.n	5088 <log_backend_enable+0x18>
	__ASSERT_NO_MSG(backend != NULL);
    50d4:	4d0b      	ldr	r5, [pc, #44]	; (5104 <log_backend_enable+0x94>)
    50d6:	f240 1317 	movw	r3, #279	; 0x117
    50da:	462a      	mov	r2, r5
    50dc:	490a      	ldr	r1, [pc, #40]	; (5108 <log_backend_enable+0x98>)
    50de:	4807      	ldr	r0, [pc, #28]	; (50fc <log_backend_enable+0x8c>)
    50e0:	f00a f8bd 	bl	f25e <assert_print>
    50e4:	f240 1117 	movw	r1, #279	; 0x117
    50e8:	4628      	mov	r0, r5
    50ea:	f00a f8b1 	bl	f250 <assert_post_action>
    50ee:	e7ce      	b.n	508e <log_backend_enable+0x1e>
    50f0:	00011060 	.word	0x00011060
    50f4:	00011af8 	.word	0x00011af8
    50f8:	00011b54 	.word	0x00011b54
    50fc:	0001160c 	.word	0x0001160c
    5100:	00011b6c 	.word	0x00011b6c
    5104:	00011a18 	.word	0x00011a18
    5108:	00011a50 	.word	0x00011a50

0000510c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    510c:	b40e      	push	{r1, r2, r3}
    510e:	b500      	push	{lr}
    5110:	b082      	sub	sp, #8
    5112:	4601      	mov	r1, r0
    5114:	ab03      	add	r3, sp, #12
    5116:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    511a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    511c:	4803      	ldr	r0, [pc, #12]	; (512c <print_formatted+0x20>)
    511e:	f7ff fb45 	bl	47ac <cbvprintf>
	va_end(args);

	return length;
}
    5122:	b002      	add	sp, #8
    5124:	f85d eb04 	ldr.w	lr, [sp], #4
    5128:	b003      	add	sp, #12
    512a:	4770      	bx	lr
    512c:	0000f2b9 	.word	0x0000f2b9

00005130 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    5130:	b530      	push	{r4, r5, lr}
    5132:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    5134:	f011 0f44 	tst.w	r1, #68	; 0x44
    5138:	d005      	beq.n	5146 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    513a:	4b1a      	ldr	r3, [pc, #104]	; (51a4 <timestamp_print+0x74>)
    513c:	681c      	ldr	r4, [r3, #0]
    513e:	b934      	cbnz	r4, 514e <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    5140:	2000      	movs	r0, #0
	}

	return length;
}
    5142:	b005      	add	sp, #20
    5144:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    5146:	4918      	ldr	r1, [pc, #96]	; (51a8 <timestamp_print+0x78>)
    5148:	f7ff ffe0 	bl	510c <print_formatted>
    514c:	e7f9      	b.n	5142 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    514e:	4b17      	ldr	r3, [pc, #92]	; (51ac <timestamp_print+0x7c>)
    5150:	6819      	ldr	r1, [r3, #0]
    5152:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    5156:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    515a:	4a15      	ldr	r2, [pc, #84]	; (51b0 <timestamp_print+0x80>)
    515c:	fba2 320c 	umull	r3, r2, r2, ip
    5160:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    5162:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    5166:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    516a:	4b12      	ldr	r3, [pc, #72]	; (51b4 <timestamp_print+0x84>)
    516c:	fba3 530e 	umull	r5, r3, r3, lr
    5170:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    5172:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    5176:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    517a:	fb0c f101 	mul.w	r1, ip, r1
    517e:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5182:	fb05 1114 	mls	r1, r5, r4, r1
    5186:	fb0c f101 	mul.w	r1, ip, r1
    518a:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    518e:	9102      	str	r1, [sp, #8]
    5190:	9501      	str	r5, [sp, #4]
    5192:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    5196:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    519a:	9100      	str	r1, [sp, #0]
    519c:	4906      	ldr	r1, [pc, #24]	; (51b8 <timestamp_print+0x88>)
    519e:	f7ff ffb5 	bl	510c <print_formatted>
    51a2:	e7ce      	b.n	5142 <timestamp_print+0x12>
    51a4:	2000c9b8 	.word	0x2000c9b8
    51a8:	00011b90 	.word	0x00011b90
    51ac:	2000c9bc 	.word	0x2000c9bc
    51b0:	91a2b3c5 	.word	0x91a2b3c5
    51b4:	88888889 	.word	0x88888889
    51b8:	00011b9c 	.word	0x00011b9c

000051bc <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    51bc:	b161      	cbz	r1, 51d8 <color_print+0x1c>
{
    51be:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    51c0:	b12a      	cbz	r2, 51ce <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    51c2:	4a06      	ldr	r2, [pc, #24]	; (51dc <color_print+0x20>)
    51c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    51c8:	b912      	cbnz	r2, 51d0 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    51ca:	4a05      	ldr	r2, [pc, #20]	; (51e0 <color_print+0x24>)
    51cc:	e000      	b.n	51d0 <color_print+0x14>
    51ce:	4a04      	ldr	r2, [pc, #16]	; (51e0 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    51d0:	4904      	ldr	r1, [pc, #16]	; (51e4 <color_print+0x28>)
    51d2:	f7ff ff9b 	bl	510c <print_formatted>
	}
}
    51d6:	bd08      	pop	{r3, pc}
    51d8:	4770      	bx	lr
    51da:	bf00      	nop
    51dc:	00011c5c 	.word	0x00011c5c
    51e0:	00011bb8 	.word	0x00011bb8
    51e4:	00011bc0 	.word	0x00011bc0

000051e8 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    51e8:	f011 0f10 	tst.w	r1, #16
    51ec:	d10b      	bne.n	5206 <newline_print+0x1e>
{
    51ee:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    51f0:	f011 0f20 	tst.w	r1, #32
    51f4:	d003      	beq.n	51fe <newline_print+0x16>
		print_formatted(ctx, "\n");
    51f6:	4904      	ldr	r1, [pc, #16]	; (5208 <newline_print+0x20>)
    51f8:	f7ff ff88 	bl	510c <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    51fc:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    51fe:	4903      	ldr	r1, [pc, #12]	; (520c <newline_print+0x24>)
    5200:	f7ff ff84 	bl	510c <print_formatted>
    5204:	e7fa      	b.n	51fc <newline_print+0x14>
    5206:	4770      	bx	lr
    5208:	000112c0 	.word	0x000112c0
    520c:	000133bc 	.word	0x000133bc

00005210 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    5210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5214:	4605      	mov	r5, r0
    5216:	460f      	mov	r7, r1
    5218:	4616      	mov	r6, r2
    521a:	4698      	mov	r8, r3
	newline_print(output, flags);
    521c:	9906      	ldr	r1, [sp, #24]
    521e:	f7ff ffe3 	bl	51e8 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    5222:	2400      	movs	r4, #0
    5224:	4544      	cmp	r4, r8
    5226:	da05      	bge.n	5234 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    5228:	4924      	ldr	r1, [pc, #144]	; (52bc <hexdump_line_print+0xac>)
    522a:	4628      	mov	r0, r5
    522c:	f7ff ff6e 	bl	510c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    5230:	3401      	adds	r4, #1
    5232:	e7f7      	b.n	5224 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5234:	2400      	movs	r4, #0
    5236:	e009      	b.n	524c <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    5238:	4920      	ldr	r1, [pc, #128]	; (52bc <hexdump_line_print+0xac>)
    523a:	4628      	mov	r0, r5
    523c:	f7ff ff66 	bl	510c <print_formatted>
    5240:	e00b      	b.n	525a <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    5242:	491f      	ldr	r1, [pc, #124]	; (52c0 <hexdump_line_print+0xb0>)
    5244:	4628      	mov	r0, r5
    5246:	f7ff ff61 	bl	510c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    524a:	3401      	adds	r4, #1
    524c:	2c0f      	cmp	r4, #15
    524e:	dc0c      	bgt.n	526a <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    5250:	2c00      	cmp	r4, #0
    5252:	dd02      	ble.n	525a <hexdump_line_print+0x4a>
    5254:	f014 0f07 	tst.w	r4, #7
    5258:	d0ee      	beq.n	5238 <hexdump_line_print+0x28>
		if (i < length) {
    525a:	42b4      	cmp	r4, r6
    525c:	d2f1      	bcs.n	5242 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    525e:	5d3a      	ldrb	r2, [r7, r4]
    5260:	4918      	ldr	r1, [pc, #96]	; (52c4 <hexdump_line_print+0xb4>)
    5262:	4628      	mov	r0, r5
    5264:	f7ff ff52 	bl	510c <print_formatted>
    5268:	e7ef      	b.n	524a <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    526a:	4917      	ldr	r1, [pc, #92]	; (52c8 <hexdump_line_print+0xb8>)
    526c:	4628      	mov	r0, r5
    526e:	f7ff ff4d 	bl	510c <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5272:	2400      	movs	r4, #0
    5274:	e009      	b.n	528a <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    5276:	4911      	ldr	r1, [pc, #68]	; (52bc <hexdump_line_print+0xac>)
    5278:	4628      	mov	r0, r5
    527a:	f7ff ff47 	bl	510c <print_formatted>
    527e:	e00b      	b.n	5298 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    5280:	4912      	ldr	r1, [pc, #72]	; (52cc <hexdump_line_print+0xbc>)
    5282:	4628      	mov	r0, r5
    5284:	f7ff ff42 	bl	510c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5288:	3401      	adds	r4, #1
    528a:	2c0f      	cmp	r4, #15
    528c:	dc13      	bgt.n	52b6 <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
    528e:	2c00      	cmp	r4, #0
    5290:	dd02      	ble.n	5298 <hexdump_line_print+0x88>
    5292:	f014 0f07 	tst.w	r4, #7
    5296:	d0ee      	beq.n	5276 <hexdump_line_print+0x66>
		if (i < length) {
    5298:	42b4      	cmp	r4, r6
    529a:	d207      	bcs.n	52ac <hexdump_line_print+0x9c>
			char c = (char)data[i];
    529c:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
    529e:	4b0c      	ldr	r3, [pc, #48]	; (52d0 <hexdump_line_print+0xc0>)
    52a0:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
    52a2:	f013 0f97 	tst.w	r3, #151	; 0x97
    52a6:	d1eb      	bne.n	5280 <hexdump_line_print+0x70>
    52a8:	222e      	movs	r2, #46	; 0x2e
    52aa:	e7e9      	b.n	5280 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
    52ac:	4903      	ldr	r1, [pc, #12]	; (52bc <hexdump_line_print+0xac>)
    52ae:	4628      	mov	r0, r5
    52b0:	f7ff ff2c 	bl	510c <print_formatted>
    52b4:	e7e8      	b.n	5288 <hexdump_line_print+0x78>
		}
	}
}
    52b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52ba:	bf00      	nop
    52bc:	00011be8 	.word	0x00011be8
    52c0:	00011bcc 	.word	0x00011bcc
    52c4:	00011bc4 	.word	0x00011bc4
    52c8:	00011bd0 	.word	0x00011bd0
    52cc:	00011bd4 	.word	0x00011bd4
    52d0:	000133e1 	.word	0x000133e1

000052d4 <ids_print>:
{
    52d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52d8:	4680      	mov	r8, r0
    52da:	4616      	mov	r6, r2
    52dc:	461d      	mov	r5, r3
    52de:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    52e2:	b959      	cbnz	r1, 52fc <ids_print+0x28>
	int total = 0;
    52e4:	2400      	movs	r4, #0
	if (source_id >= 0) {
    52e6:	2f00      	cmp	r7, #0
    52e8:	db1c      	blt.n	5324 <ids_print+0x50>
		total += print_formatted(output,
    52ea:	b186      	cbz	r6, 530e <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    52ec:	2301      	movs	r3, #1
    52ee:	9a07      	ldr	r2, [sp, #28]
    52f0:	4093      	lsls	r3, r2
				(func_on &&
    52f2:	f013 0f10 	tst.w	r3, #16
    52f6:	d118      	bne.n	532a <ids_print+0x56>
		total += print_formatted(output,
    52f8:	4e0d      	ldr	r6, [pc, #52]	; (5330 <ids_print+0x5c>)
    52fa:	e009      	b.n	5310 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    52fc:	4b0d      	ldr	r3, [pc, #52]	; (5334 <ids_print+0x60>)
    52fe:	9a07      	ldr	r2, [sp, #28]
    5300:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5304:	490c      	ldr	r1, [pc, #48]	; (5338 <ids_print+0x64>)
    5306:	f7ff ff01 	bl	510c <print_formatted>
    530a:	4604      	mov	r4, r0
    530c:	e7eb      	b.n	52e6 <ids_print+0x12>
		total += print_formatted(output,
    530e:	4e08      	ldr	r6, [pc, #32]	; (5330 <ids_print+0x5c>)
    5310:	4639      	mov	r1, r7
    5312:	4628      	mov	r0, r5
    5314:	f7ff fe9c 	bl	5050 <log_source_name_get>
    5318:	4602      	mov	r2, r0
    531a:	4631      	mov	r1, r6
    531c:	4640      	mov	r0, r8
    531e:	f7ff fef5 	bl	510c <print_formatted>
    5322:	4404      	add	r4, r0
}
    5324:	4620      	mov	r0, r4
    5326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    532a:	4e04      	ldr	r6, [pc, #16]	; (533c <ids_print+0x68>)
    532c:	e7f0      	b.n	5310 <ids_print+0x3c>
    532e:	bf00      	nop
    5330:	00011bd8 	.word	0x00011bd8
    5334:	00011c70 	.word	0x00011c70
    5338:	00011be4 	.word	0x00011be4
    533c:	00011be0 	.word	0x00011be0

00005340 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    5340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5344:	b085      	sub	sp, #20
    5346:	4605      	mov	r5, r0
    5348:	460c      	mov	r4, r1
    534a:	4616      	mov	r6, r2
    534c:	9303      	str	r3, [sp, #12]
    534e:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    5352:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    5356:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    535a:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    535e:	f009 ffa9 	bl	f2b4 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    5362:	b1e8      	cbz	r0, 53a0 <prefix_print+0x60>
    5364:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    5366:	4913      	ldr	r1, [pc, #76]	; (53b4 <prefix_print+0x74>)
    5368:	4628      	mov	r0, r5
    536a:	f7ff fecf 	bl	510c <print_formatted>
    536e:	4607      	mov	r7, r0
	}

	if (stamp) {
    5370:	f1bb 0f00 	cmp.w	fp, #0
    5374:	d116      	bne.n	53a4 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    5376:	4642      	mov	r2, r8
    5378:	4651      	mov	r1, sl
    537a:	4628      	mov	r0, r5
    537c:	f009 ffc6 	bl	f30c <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    5380:	f8cd 8004 	str.w	r8, [sp, #4]
    5384:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    5388:	9300      	str	r3, [sp, #0]
    538a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    538e:	4632      	mov	r2, r6
    5390:	4649      	mov	r1, r9
    5392:	4628      	mov	r0, r5
    5394:	f7ff ff9e 	bl	52d4 <ids_print>
			domain_id, source_id, level);


	return length;
}
    5398:	4438      	add	r0, r7
    539a:	b005      	add	sp, #20
    539c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    53a0:	2700      	movs	r7, #0
    53a2:	e7e5      	b.n	5370 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    53a4:	9a03      	ldr	r2, [sp, #12]
    53a6:	4621      	mov	r1, r4
    53a8:	4628      	mov	r0, r5
    53aa:	f7ff fec1 	bl	5130 <timestamp_print>
    53ae:	4407      	add	r7, r0
    53b0:	e7e1      	b.n	5376 <prefix_print+0x36>
    53b2:	bf00      	nop
    53b4:	00011bec 	.word	0x00011bec

000053b8 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    53b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    53bc:	b084      	sub	sp, #16
    53be:	4606      	mov	r6, r0
    53c0:	460c      	mov	r4, r1
    53c2:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    53c4:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
    53c6:	880a      	ldrh	r2, [r1, #0]
    53c8:	f3c2 1882 	ubfx	r8, r2, #6, #3
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    53cc:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
    53d0:	d037      	beq.n	5442 <log_output_msg2_process+0x8a>
	return msg->hdr.source;
    53d2:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
    53d4:	7809      	ldrb	r1, [r1, #0]
    53d6:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    53da:	b37a      	cbz	r2, 543c <log_output_msg2_process+0x84>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    53dc:	4829      	ldr	r0, [pc, #164]	; (5484 <log_output_msg2_process+0xcc>)
    53de:	1a12      	subs	r2, r2, r0
    53e0:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    53e4:	9202      	str	r2, [sp, #8]
    53e6:	9101      	str	r1, [sp, #4]
    53e8:	f8cd 8000 	str.w	r8, [sp]
    53ec:	2200      	movs	r2, #0
    53ee:	4639      	mov	r1, r7
    53f0:	4630      	mov	r0, r6
    53f2:	f7ff ffa5 	bl	5340 <prefix_print>
    53f6:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    53f8:	4625      	mov	r5, r4
    53fa:	f855 3b10 	ldr.w	r3, [r5], #16
    53fe:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    5402:	b153      	cbz	r3, 541a <log_output_msg2_process+0x62>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    5404:	f1b8 0f00 	cmp.w	r8, #0
    5408:	d11e      	bne.n	5448 <log_output_msg2_process+0x90>
    540a:	481f      	ldr	r0, [pc, #124]	; (5488 <log_output_msg2_process+0xd0>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    540c:	462b      	mov	r3, r5
    540e:	4632      	mov	r2, r6
    5410:	491e      	ldr	r1, [pc, #120]	; (548c <log_output_msg2_process+0xd4>)
    5412:	f009 fdcf 	bl	efb4 <cbpprintf_external>
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    5416:	2800      	cmp	r0, #0
    5418:	db18      	blt.n	544c <log_output_msg2_process+0x94>
	*len = msg->hdr.desc.data_len;
    541a:	8862      	ldrh	r2, [r4, #2]
    541c:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    5420:	6821      	ldr	r1, [r4, #0]
    5422:	f3c1 2149 	ubfx	r1, r1, #9, #10
    5426:	4429      	add	r1, r5
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    5428:	b9fa      	cbnz	r2, 546a <log_output_msg2_process+0xb2>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    542a:	f1b8 0f00 	cmp.w	r8, #0
    542e:	d122      	bne.n	5476 <log_output_msg2_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    5430:	4630      	mov	r0, r6
    5432:	f009 ff9e 	bl	f372 <log_output_flush>
}
    5436:	b004      	add	sp, #16
    5438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		int16_t source_id = source ?
    543c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5440:	e7d0      	b.n	53e4 <log_output_msg2_process+0x2c>
		prefix_offset = 0;
    5442:	f04f 0900 	mov.w	r9, #0
    5446:	e7d7      	b.n	53f8 <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    5448:	4811      	ldr	r0, [pc, #68]	; (5490 <log_output_msg2_process+0xd8>)
    544a:	e7df      	b.n	540c <log_output_msg2_process+0x54>
		__ASSERT_NO_MSG(err >= 0);
    544c:	f8df a044 	ldr.w	sl, [pc, #68]	; 5494 <log_output_msg2_process+0xdc>
    5450:	f240 23b7 	movw	r3, #695	; 0x2b7
    5454:	4652      	mov	r2, sl
    5456:	4910      	ldr	r1, [pc, #64]	; (5498 <log_output_msg2_process+0xe0>)
    5458:	4810      	ldr	r0, [pc, #64]	; (549c <log_output_msg2_process+0xe4>)
    545a:	f009 ff00 	bl	f25e <assert_print>
    545e:	f240 21b7 	movw	r1, #695	; 0x2b7
    5462:	4650      	mov	r0, sl
    5464:	f009 fef4 	bl	f250 <assert_post_action>
    5468:	e7d7      	b.n	541a <log_output_msg2_process+0x62>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
    546a:	9700      	str	r7, [sp, #0]
    546c:	464b      	mov	r3, r9
    546e:	4630      	mov	r0, r6
    5470:	f009 ff64 	bl	f33c <log_msg2_hexdump>
    5474:	e7d9      	b.n	542a <log_output_msg2_process+0x72>
		postfix_print(output, flags, level);
    5476:	4642      	mov	r2, r8
    5478:	4639      	mov	r1, r7
    547a:	4630      	mov	r0, r6
    547c:	f009 ff52 	bl	f324 <postfix_print>
    5480:	e7d6      	b.n	5430 <log_output_msg2_process+0x78>
    5482:	bf00      	nop
    5484:	00011018 	.word	0x00011018
    5488:	0000f2d7 	.word	0x0000f2d7
    548c:	000047ad 	.word	0x000047ad
    5490:	0000f2b9 	.word	0x0000f2b9
    5494:	00011bf0 	.word	0x00011bf0
    5498:	00011c30 	.word	0x00011c30
    549c:	0001160c 	.word	0x0001160c

000054a0 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    54a0:	4b07      	ldr	r3, [pc, #28]	; (54c0 <log_output_timestamp_freq_set+0x20>)
    54a2:	2201      	movs	r2, #1
    54a4:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    54a6:	e004      	b.n	54b2 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    54a8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    54aa:	4a05      	ldr	r2, [pc, #20]	; (54c0 <log_output_timestamp_freq_set+0x20>)
    54ac:	6813      	ldr	r3, [r2, #0]
    54ae:	005b      	lsls	r3, r3, #1
    54b0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    54b2:	4b04      	ldr	r3, [pc, #16]	; (54c4 <log_output_timestamp_freq_set+0x24>)
    54b4:	4298      	cmp	r0, r3
    54b6:	d8f7      	bhi.n	54a8 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    54b8:	4b03      	ldr	r3, [pc, #12]	; (54c8 <log_output_timestamp_freq_set+0x28>)
    54ba:	6018      	str	r0, [r3, #0]
}
    54bc:	4770      	bx	lr
    54be:	bf00      	nop
    54c0:	2000c9bc 	.word	0x2000c9bc
    54c4:	000f4240 	.word	0x000f4240
    54c8:	2000c9b8 	.word	0x2000c9b8

000054cc <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    54cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54d0:	b087      	sub	sp, #28
    54d2:	af02      	add	r7, sp, #8
    54d4:	4682      	mov	sl, r0
    54d6:	6079      	str	r1, [r7, #4]
    54d8:	4691      	mov	r9, r2
    54da:	4698      	mov	r8, r3
    54dc:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    54de:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
	int plen;

	if (fmt) {
    54e2:	f1bb 0f00 	cmp.w	fp, #0
    54e6:	d016      	beq.n	5516 <z_impl_z_log_msg2_runtime_vcreate+0x4a>
		va_list ap2;

		va_copy(ap2, ap);
    54e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    54ea:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    54ec:	9300      	str	r3, [sp, #0]
    54ee:	465b      	mov	r3, fp
    54f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    54f2:	2110      	movs	r1, #16
    54f4:	2000      	movs	r0, #0
    54f6:	f7fe f871 	bl	35dc <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    54fa:	1e05      	subs	r5, r0, #0
    54fc:	da0c      	bge.n	5518 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
    54fe:	4c26      	ldr	r4, [pc, #152]	; (5598 <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    5500:	2367      	movs	r3, #103	; 0x67
    5502:	4622      	mov	r2, r4
    5504:	4925      	ldr	r1, [pc, #148]	; (559c <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    5506:	4826      	ldr	r0, [pc, #152]	; (55a0 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    5508:	f009 fea9 	bl	f25e <assert_print>
    550c:	2167      	movs	r1, #103	; 0x67
    550e:	4620      	mov	r0, r4
    5510:	f009 fe9e 	bl	f250 <assert_post_action>
		va_end(ap2);
    5514:	e000      	b.n	5518 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
	} else {
		plen = 0;
    5516:	2500      	movs	r5, #0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    5518:	4629      	mov	r1, r5
    551a:	19ab      	adds	r3, r5, r6
    551c:	3317      	adds	r3, #23
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    551e:	2400      	movs	r4, #0
    5520:	f36f 0400 	bfc	r4, #0, #1
    5524:	f36f 0441 	bfc	r4, #1, #1
    5528:	f36f 0482 	bfc	r4, #2, #1
    552c:	f36a 04c5 	bfi	r4, sl, #3, #3
    5530:	f369 1488 	bfi	r4, r9, #6, #3
    5534:	f365 2452 	bfi	r4, r5, #9, #10
    5538:	f366 44de 	bfi	r4, r6, #19, #12
    553c:	f36f 74df 	bfc	r4, #31, #1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    5540:	f023 0307 	bic.w	r3, r3, #7
    5544:	ebad 0d03 	sub.w	sp, sp, r3
    5548:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    554a:	466b      	mov	r3, sp
    554c:	f113 0018 	adds.w	r0, r3, #24
    5550:	d00a      	beq.n	5568 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    5552:	f1bb 0f00 	cmp.w	fp, #0
    5556:	d007      	beq.n	5568 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    5558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    555a:	9300      	str	r3, [sp, #0]
    555c:	465b      	mov	r3, fp
    555e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    5560:	f7fe f83c 	bl	35dc <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    5564:	2800      	cmp	r0, #0
    5566:	db09      	blt.n	557c <z_impl_z_log_msg2_runtime_vcreate+0xb0>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    5568:	4643      	mov	r3, r8
    556a:	4622      	mov	r2, r4
    556c:	6879      	ldr	r1, [r7, #4]
    556e:	4628      	mov	r0, r5
    5570:	f009 ff0c 	bl	f38c <z_log_msg2_finalize>
	}
}
    5574:	3714      	adds	r7, #20
    5576:	46bd      	mov	sp, r7
    5578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(plen >= 0);
    557c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 5598 <z_impl_z_log_msg2_runtime_vcreate+0xcc>
    5580:	2381      	movs	r3, #129	; 0x81
    5582:	464a      	mov	r2, r9
    5584:	4905      	ldr	r1, [pc, #20]	; (559c <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    5586:	4806      	ldr	r0, [pc, #24]	; (55a0 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    5588:	f009 fe69 	bl	f25e <assert_print>
    558c:	2181      	movs	r1, #129	; 0x81
    558e:	4648      	mov	r0, r9
    5590:	f009 fe5e 	bl	f250 <assert_post_action>
    5594:	e7e8      	b.n	5568 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    5596:	bf00      	nop
    5598:	00011c84 	.word	0x00011c84
    559c:	00011cc0 	.word	0x00011cc0
    55a0:	0001160c 	.word	0x0001160c

000055a4 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    55a4:	b570      	push	{r4, r5, r6, lr}
    55a6:	4606      	mov	r6, r0
    55a8:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    55aa:	2400      	movs	r4, #0
    55ac:	e006      	b.n	55bc <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    55ae:	4b05      	ldr	r3, [pc, #20]	; (55c4 <char_out+0x20>)
    55b0:	6818      	ldr	r0, [r3, #0]
    55b2:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
    55b4:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    55b6:	69db      	ldr	r3, [r3, #28]
    55b8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    55ba:	3401      	adds	r4, #1
    55bc:	42ac      	cmp	r4, r5
    55be:	d3f6      	bcc.n	55ae <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    55c0:	4628      	mov	r0, r5
    55c2:	bd70      	pop	{r4, r5, r6, pc}
    55c4:	2000c9d8 	.word	0x2000c9d8

000055c8 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    55c8:	4b01      	ldr	r3, [pc, #4]	; (55d0 <format_set+0x8>)
    55ca:	6019      	str	r1, [r3, #0]
	return 0;
}
    55cc:	2000      	movs	r0, #0
    55ce:	4770      	bx	lr
    55d0:	2000c9c8 	.word	0x2000c9c8

000055d4 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
    55d4:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    55d6:	4809      	ldr	r0, [pc, #36]	; (55fc <log_backend_uart_init+0x28>)
    55d8:	4b09      	ldr	r3, [pc, #36]	; (5600 <log_backend_uart_init+0x2c>)
    55da:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    55dc:	f00a ff82 	bl	104e4 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    55e0:	b100      	cbz	r0, 55e4 <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    55e2:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    55e4:	4c07      	ldr	r4, [pc, #28]	; (5604 <log_backend_uart_init+0x30>)
    55e6:	2379      	movs	r3, #121	; 0x79
    55e8:	4622      	mov	r2, r4
    55ea:	4907      	ldr	r1, [pc, #28]	; (5608 <log_backend_uart_init+0x34>)
    55ec:	4807      	ldr	r0, [pc, #28]	; (560c <log_backend_uart_init+0x38>)
    55ee:	f009 fe36 	bl	f25e <assert_print>
    55f2:	2179      	movs	r1, #121	; 0x79
    55f4:	4620      	mov	r0, r4
    55f6:	f009 fe2b 	bl	f250 <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
    55fa:	e7f2      	b.n	55e2 <log_backend_uart_init+0xe>
    55fc:	00010e80 	.word	0x00010e80
    5600:	2000c9d8 	.word	0x2000c9d8
    5604:	00011ccc 	.word	0x00011ccc
    5608:	00011d04 	.word	0x00011d04
    560c:	0001160c 	.word	0x0001160c

00005610 <panic>:

static void panic(struct log_backend const *const backend)
{
    5610:	b508      	push	{r3, lr}
	in_panic = true;
    5612:	4b03      	ldr	r3, [pc, #12]	; (5620 <panic+0x10>)
    5614:	2201      	movs	r2, #1
    5616:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    5618:	4802      	ldr	r0, [pc, #8]	; (5624 <panic+0x14>)
    561a:	f009 feaa 	bl	f372 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    561e:	bd08      	pop	{r3, pc}
    5620:	2000d719 	.word	0x2000d719
    5624:	00011d60 	.word	0x00011d60

00005628 <process>:
{
    5628:	b510      	push	{r4, lr}
    562a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    562c:	4b04      	ldr	r3, [pc, #16]	; (5640 <process+0x18>)
    562e:	6818      	ldr	r0, [r3, #0]
    5630:	f7ff fc18 	bl	4e64 <log_format_func_t_get>
    5634:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    5636:	220f      	movs	r2, #15
    5638:	4621      	mov	r1, r4
    563a:	4802      	ldr	r0, [pc, #8]	; (5644 <process+0x1c>)
    563c:	4798      	blx	r3
}
    563e:	bd10      	pop	{r4, pc}
    5640:	2000c9c8 	.word	0x2000c9c8
    5644:	00011d60 	.word	0x00011d60

00005648 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    5648:	4b03      	ldr	r3, [pc, #12]	; (5658 <log_backend_rtt_init+0x10>)
    564a:	2201      	movs	r2, #1
    564c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    564e:	4b03      	ldr	r3, [pc, #12]	; (565c <log_backend_rtt_init+0x14>)
    5650:	4a03      	ldr	r2, [pc, #12]	; (5660 <log_backend_rtt_init+0x18>)
    5652:	601a      	str	r2, [r3, #0]
}
    5654:	4770      	bx	lr
    5656:	bf00      	nop
    5658:	2000d71a 	.word	0x2000d71a
    565c:	2000ca04 	.word	0x2000ca04
    5660:	2000c9ec 	.word	0x2000c9ec

00005664 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    5664:	4b01      	ldr	r3, [pc, #4]	; (566c <format_set+0x8>)
    5666:	6019      	str	r1, [r3, #0]
	return 0;
}
    5668:	2000      	movs	r0, #0
    566a:	4770      	bx	lr
    566c:	2000ca08 	.word	0x2000ca08

00005670 <on_failed_write>:
{
    5670:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    5672:	b918      	cbnz	r0, 567c <on_failed_write+0xc>
		host_present = false;
    5674:	4b04      	ldr	r3, [pc, #16]	; (5688 <on_failed_write+0x18>)
    5676:	2200      	movs	r2, #0
    5678:	701a      	strb	r2, [r3, #0]
}
    567a:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    567c:	f241 3088 	movw	r0, #5000	; 0x1388
    5680:	f00b f820 	bl	106c4 <z_impl_k_busy_wait>
    5684:	e7f9      	b.n	567a <on_failed_write+0xa>
    5686:	bf00      	nop
    5688:	2000d71a 	.word	0x2000d71a

0000568c <on_write>:
{
    568c:	b538      	push	{r3, r4, r5, lr}
    568e:	4604      	mov	r4, r0
	host_present = true;
    5690:	4b0a      	ldr	r3, [pc, #40]	; (56bc <on_write+0x30>)
    5692:	2201      	movs	r2, #1
    5694:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    5696:	4b0a      	ldr	r3, [pc, #40]	; (56c0 <on_write+0x34>)
    5698:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    569a:	b92b      	cbnz	r3, 56a8 <on_write+0x1c>
}
    569c:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    569e:	1e65      	subs	r5, r4, #1
    56a0:	4620      	mov	r0, r4
    56a2:	f7ff ffe5 	bl	5670 <on_failed_write>
    56a6:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    56a8:	2000      	movs	r0, #0
    56aa:	f004 fd5b 	bl	a164 <SEGGER_RTT_HasDataUp>
    56ae:	2800      	cmp	r0, #0
    56b0:	d0f4      	beq.n	569c <on_write+0x10>
    56b2:	4b02      	ldr	r3, [pc, #8]	; (56bc <on_write+0x30>)
    56b4:	781b      	ldrb	r3, [r3, #0]
    56b6:	2b00      	cmp	r3, #0
    56b8:	d1f1      	bne.n	569e <on_write+0x12>
    56ba:	e7ef      	b.n	569c <on_write+0x10>
    56bc:	2000d71a 	.word	0x2000d71a
    56c0:	2000d71b 	.word	0x2000d71b

000056c4 <data_out_block_mode>:
{
    56c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56c6:	4606      	mov	r6, r0
    56c8:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    56ca:	2704      	movs	r7, #4
    56cc:	e006      	b.n	56dc <data_out_block_mode+0x18>
			on_write(retry_cnt);
    56ce:	4638      	mov	r0, r7
    56d0:	f7ff ffdc 	bl	568c <on_write>
	} while ((ret == 0) && host_present);
    56d4:	b99c      	cbnz	r4, 56fe <data_out_block_mode+0x3a>
    56d6:	4b0d      	ldr	r3, [pc, #52]	; (570c <data_out_block_mode+0x48>)
    56d8:	781b      	ldrb	r3, [r3, #0]
    56da:	b183      	cbz	r3, 56fe <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    56dc:	462a      	mov	r2, r5
    56de:	4631      	mov	r1, r6
    56e0:	2000      	movs	r0, #0
    56e2:	f004 fcdb 	bl	a09c <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    56e6:	4604      	mov	r4, r0
    56e8:	2800      	cmp	r0, #0
    56ea:	d1f0      	bne.n	56ce <data_out_block_mode+0xa>
		} else if (host_present) {
    56ec:	4b07      	ldr	r3, [pc, #28]	; (570c <data_out_block_mode+0x48>)
    56ee:	781b      	ldrb	r3, [r3, #0]
    56f0:	2b00      	cmp	r3, #0
    56f2:	d0ef      	beq.n	56d4 <data_out_block_mode+0x10>
			retry_cnt--;
    56f4:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    56f6:	4638      	mov	r0, r7
    56f8:	f7ff ffba 	bl	5670 <on_failed_write>
    56fc:	e7ea      	b.n	56d4 <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
    56fe:	b914      	cbnz	r4, 5706 <data_out_block_mode+0x42>
    5700:	4b02      	ldr	r3, [pc, #8]	; (570c <data_out_block_mode+0x48>)
    5702:	781b      	ldrb	r3, [r3, #0]
    5704:	b903      	cbnz	r3, 5708 <data_out_block_mode+0x44>
    5706:	462c      	mov	r4, r5
}
    5708:	4620      	mov	r0, r4
    570a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    570c:	2000d71a 	.word	0x2000d71a

00005710 <panic>:
{
    5710:	b508      	push	{r3, lr}
	panic_mode = true;
    5712:	4b03      	ldr	r3, [pc, #12]	; (5720 <panic+0x10>)
    5714:	2201      	movs	r2, #1
    5716:	701a      	strb	r2, [r3, #0]
    5718:	4802      	ldr	r0, [pc, #8]	; (5724 <panic+0x14>)
    571a:	f009 fe2a 	bl	f372 <log_output_flush>
}
    571e:	bd08      	pop	{r3, pc}
    5720:	2000d71b 	.word	0x2000d71b
    5724:	00011da0 	.word	0x00011da0

00005728 <process>:
{
    5728:	b510      	push	{r4, lr}
    572a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    572c:	4b04      	ldr	r3, [pc, #16]	; (5740 <process+0x18>)
    572e:	6818      	ldr	r0, [r3, #0]
    5730:	f7ff fb98 	bl	4e64 <log_format_func_t_get>
    5734:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    5736:	220f      	movs	r2, #15
    5738:	4621      	mov	r1, r4
    573a:	4802      	ldr	r0, [pc, #8]	; (5744 <process+0x1c>)
    573c:	4798      	blx	r3
}
    573e:	bd10      	pop	{r4, pc}
    5740:	2000ca08 	.word	0x2000ca08
    5744:	00011da0 	.word	0x00011da0

00005748 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    5748:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    574a:	4b40      	ldr	r3, [pc, #256]	; (584c <pm_system_resume+0x104>)
    574c:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    574e:	f005 031f 	and.w	r3, r5, #31
    5752:	2201      	movs	r2, #1
    5754:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5756:	0969      	lsrs	r1, r5, #5
    5758:	4b3d      	ldr	r3, [pc, #244]	; (5850 <pm_system_resume+0x108>)
    575a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    575e:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5760:	f3bf 8f5b 	dmb	ish
    5764:	e853 1f00 	ldrex	r1, [r3]
    5768:	ea01 0400 	and.w	r4, r1, r0
    576c:	e843 4600 	strex	r6, r4, [r3]
    5770:	2e00      	cmp	r6, #0
    5772:	d1f7      	bne.n	5764 <pm_system_resume+0x1c>
    5774:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    5778:	420a      	tst	r2, r1
    577a:	d100      	bne.n	577e <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    577c:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    577e:	4a35      	ldr	r2, [pc, #212]	; (5854 <pm_system_resume+0x10c>)
    5780:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    5784:	0098      	lsls	r0, r3, #2
    5786:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    578a:	4933      	ldr	r1, [pc, #204]	; (5858 <pm_system_resume+0x110>)
    578c:	b1a9      	cbz	r1, 57ba <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    578e:	7859      	ldrb	r1, [r3, #1]
    5790:	5c10      	ldrb	r0, [r2, r0]
    5792:	f009 fefe 	bl	f592 <pm_state_exit_post_ops>
    5796:	f04f 0320 	mov.w	r3, #32
    579a:	f3ef 8611 	mrs	r6, BASEPRI
    579e:	f383 8812 	msr	BASEPRI_MAX, r3
    57a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    57a6:	482d      	ldr	r0, [pc, #180]	; (585c <pm_system_resume+0x114>)
    57a8:	f005 f808 	bl	a7bc <z_spin_lock_valid>
    57ac:	b158      	cbz	r0, 57c6 <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    57ae:	482b      	ldr	r0, [pc, #172]	; (585c <pm_system_resume+0x114>)
    57b0:	f005 f824 	bl	a7fc <z_spin_lock_set_owner>
	return list->head;
    57b4:	4b2a      	ldr	r3, [pc, #168]	; (5860 <pm_system_resume+0x118>)
    57b6:	681c      	ldr	r4, [r3, #0]
    57b8:	e020      	b.n	57fc <pm_system_resume+0xb4>
	__asm__ volatile(
    57ba:	2300      	movs	r3, #0
    57bc:	f383 8811 	msr	BASEPRI, r3
    57c0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    57c4:	e7e7      	b.n	5796 <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    57c6:	4c27      	ldr	r4, [pc, #156]	; (5864 <pm_system_resume+0x11c>)
    57c8:	238e      	movs	r3, #142	; 0x8e
    57ca:	4622      	mov	r2, r4
    57cc:	4926      	ldr	r1, [pc, #152]	; (5868 <pm_system_resume+0x120>)
    57ce:	4827      	ldr	r0, [pc, #156]	; (586c <pm_system_resume+0x124>)
    57d0:	f009 fd45 	bl	f25e <assert_print>
    57d4:	4921      	ldr	r1, [pc, #132]	; (585c <pm_system_resume+0x114>)
    57d6:	4826      	ldr	r0, [pc, #152]	; (5870 <pm_system_resume+0x128>)
    57d8:	f009 fd41 	bl	f25e <assert_print>
    57dc:	218e      	movs	r1, #142	; 0x8e
    57de:	4620      	mov	r0, r4
    57e0:	f009 fd36 	bl	f250 <assert_post_action>
    57e4:	e7e3      	b.n	57ae <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    57e6:	4b19      	ldr	r3, [pc, #100]	; (584c <pm_system_resume+0x104>)
    57e8:	7d1b      	ldrb	r3, [r3, #20]
    57ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    57ee:	4919      	ldr	r1, [pc, #100]	; (5854 <pm_system_resume+0x10c>)
    57f0:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    57f4:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    57f6:	b10c      	cbz	r4, 57fc <pm_system_resume+0xb4>
	return node->next;
    57f8:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    57fa:	b124      	cbz	r4, 5806 <pm_system_resume+0xbe>
    57fc:	b11c      	cbz	r4, 5806 <pm_system_resume+0xbe>
			callback = notifier->state_exit;
    57fe:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    5800:	2a00      	cmp	r2, #0
    5802:	d1f0      	bne.n	57e6 <pm_system_resume+0x9e>
    5804:	e7f7      	b.n	57f6 <pm_system_resume+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5806:	4815      	ldr	r0, [pc, #84]	; (585c <pm_system_resume+0x114>)
    5808:	f004 ffe8 	bl	a7dc <z_spin_unlock_valid>
    580c:	b170      	cbz	r0, 582c <pm_system_resume+0xe4>
	__asm__ volatile(
    580e:	f386 8811 	msr	BASEPRI, r6
    5812:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    5816:	4a0f      	ldr	r2, [pc, #60]	; (5854 <pm_system_resume+0x10c>)
    5818:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    581c:	00a9      	lsls	r1, r5, #2
    581e:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    5822:	2300      	movs	r3, #0
    5824:	5053      	str	r3, [r2, r1]
    5826:	606b      	str	r3, [r5, #4]
    5828:	60ab      	str	r3, [r5, #8]
}
    582a:	e7a7      	b.n	577c <pm_system_resume+0x34>
    582c:	4c0d      	ldr	r4, [pc, #52]	; (5864 <pm_system_resume+0x11c>)
    582e:	23b9      	movs	r3, #185	; 0xb9
    5830:	4622      	mov	r2, r4
    5832:	4910      	ldr	r1, [pc, #64]	; (5874 <pm_system_resume+0x12c>)
    5834:	480d      	ldr	r0, [pc, #52]	; (586c <pm_system_resume+0x124>)
    5836:	f009 fd12 	bl	f25e <assert_print>
    583a:	4908      	ldr	r1, [pc, #32]	; (585c <pm_system_resume+0x114>)
    583c:	480e      	ldr	r0, [pc, #56]	; (5878 <pm_system_resume+0x130>)
    583e:	f009 fd0e 	bl	f25e <assert_print>
    5842:	21b9      	movs	r1, #185	; 0xb9
    5844:	4620      	mov	r0, r4
    5846:	f009 fd03 	bl	f250 <assert_post_action>
    584a:	e7e0      	b.n	580e <pm_system_resume+0xc6>
    584c:	2000d4dc 	.word	0x2000d4dc
    5850:	2000ca34 	.word	0x2000ca34
    5854:	2000ca24 	.word	0x2000ca24
    5858:	0000f593 	.word	0x0000f593
    585c:	2000ca18 	.word	0x2000ca18
    5860:	2000ca1c 	.word	0x2000ca1c
    5864:	000117b8 	.word	0x000117b8
    5868:	00011818 	.word	0x00011818
    586c:	0001160c 	.word	0x0001160c
    5870:	00011830 	.word	0x00011830
    5874:	000117e8 	.word	0x000117e8
    5878:	00011800 	.word	0x00011800

0000587c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    587c:	b570      	push	{r4, r5, r6, lr}
    587e:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    5880:	4b6d      	ldr	r3, [pc, #436]	; (5a38 <pm_system_suspend+0x1bc>)
    5882:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5884:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5886:	f3bf 8f5b 	dmb	ish
    588a:	4b6c      	ldr	r3, [pc, #432]	; (5a3c <pm_system_suspend+0x1c0>)
    588c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5890:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    5894:	f005 021f 	and.w	r2, r5, #31
    5898:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    589a:	f013 0f01 	tst.w	r3, #1
    589e:	d01d      	beq.n	58dc <pm_system_suspend+0x60>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    58a0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    58a4:	4a66      	ldr	r2, [pc, #408]	; (5a40 <pm_system_suspend+0x1c4>)
    58a6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    58aa:	b333      	cbz	r3, 58fa <pm_system_suspend+0x7e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    58ac:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    58b0:	d139      	bne.n	5926 <pm_system_suspend+0xaa>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    58b2:	f005 fded 	bl	b490 <k_sched_lock>
	__asm__ volatile(
    58b6:	f04f 0320 	mov.w	r3, #32
    58ba:	f3ef 8611 	mrs	r6, BASEPRI
    58be:	f383 8812 	msr	BASEPRI_MAX, r3
    58c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    58c6:	485f      	ldr	r0, [pc, #380]	; (5a44 <pm_system_suspend+0x1c8>)
    58c8:	f004 ff78 	bl	a7bc <z_spin_lock_valid>
    58cc:	2800      	cmp	r0, #0
    58ce:	d040      	beq.n	5952 <pm_system_suspend+0xd6>
	z_spin_lock_set_owner(l);
    58d0:	485c      	ldr	r0, [pc, #368]	; (5a44 <pm_system_suspend+0x1c8>)
    58d2:	f004 ff93 	bl	a7fc <z_spin_lock_set_owner>
	return list->head;
    58d6:	4b5c      	ldr	r3, [pc, #368]	; (5a48 <pm_system_suspend+0x1cc>)
    58d8:	681c      	ldr	r4, [r3, #0]
    58da:	e055      	b.n	5988 <pm_system_suspend+0x10c>
		info = pm_policy_next_state(id, ticks);
    58dc:	4601      	mov	r1, r0
    58de:	4628      	mov	r0, r5
    58e0:	f000 f8d6 	bl	5a90 <pm_policy_next_state>
		if (info != NULL) {
    58e4:	2800      	cmp	r0, #0
    58e6:	d0db      	beq.n	58a0 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    58e8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    58ec:	4a54      	ldr	r2, [pc, #336]	; (5a40 <pm_system_suspend+0x1c4>)
    58ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    58f2:	c807      	ldmia	r0, {r0, r1, r2}
    58f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    58f8:	e7d2      	b.n	58a0 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    58fa:	f005 021f 	and.w	r2, r5, #31
    58fe:	2301      	movs	r3, #1
    5900:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5902:	096d      	lsrs	r5, r5, #5
    5904:	4a4d      	ldr	r2, [pc, #308]	; (5a3c <pm_system_suspend+0x1c0>)
    5906:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    590a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    590c:	f3bf 8f5b 	dmb	ish
    5910:	e855 2f00 	ldrex	r2, [r5]
    5914:	401a      	ands	r2, r3
    5916:	e845 2100 	strex	r1, r2, [r5]
    591a:	2900      	cmp	r1, #0
    591c:	d1f8      	bne.n	5910 <pm_system_suspend+0x94>
    591e:	f3bf 8f5b 	dmb	ish
		ret = false;
    5922:	2000      	movs	r0, #0
		goto end;
    5924:	e077      	b.n	5a16 <pm_system_suspend+0x19a>
		     k_us_to_ticks_ceil32(
    5926:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    592a:	4a45      	ldr	r2, [pc, #276]	; (5a40 <pm_system_suspend+0x1c4>)
    592c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5930:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    5932:	0c41      	lsrs	r1, r0, #17
    5934:	03c0      	lsls	r0, r0, #15
    5936:	4b45      	ldr	r3, [pc, #276]	; (5a4c <pm_system_suspend+0x1d0>)
    5938:	18c0      	adds	r0, r0, r3
    593a:	4a45      	ldr	r2, [pc, #276]	; (5a50 <pm_system_suspend+0x1d4>)
    593c:	f04f 0300 	mov.w	r3, #0
    5940:	f141 0100 	adc.w	r1, r1, #0
    5944:	f7fb f84a 	bl	9dc <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    5948:	2101      	movs	r1, #1
    594a:	1a20      	subs	r0, r4, r0
    594c:	f007 f930 	bl	cbb0 <z_set_timeout_expiry>
    5950:	e7af      	b.n	58b2 <pm_system_suspend+0x36>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5952:	4c40      	ldr	r4, [pc, #256]	; (5a54 <pm_system_suspend+0x1d8>)
    5954:	238e      	movs	r3, #142	; 0x8e
    5956:	4622      	mov	r2, r4
    5958:	493f      	ldr	r1, [pc, #252]	; (5a58 <pm_system_suspend+0x1dc>)
    595a:	4840      	ldr	r0, [pc, #256]	; (5a5c <pm_system_suspend+0x1e0>)
    595c:	f009 fc7f 	bl	f25e <assert_print>
    5960:	4938      	ldr	r1, [pc, #224]	; (5a44 <pm_system_suspend+0x1c8>)
    5962:	483f      	ldr	r0, [pc, #252]	; (5a60 <pm_system_suspend+0x1e4>)
    5964:	f009 fc7b 	bl	f25e <assert_print>
    5968:	218e      	movs	r1, #142	; 0x8e
    596a:	4620      	mov	r0, r4
    596c:	f009 fc70 	bl	f250 <assert_post_action>
    5970:	e7ae      	b.n	58d0 <pm_system_suspend+0x54>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    5972:	4b31      	ldr	r3, [pc, #196]	; (5a38 <pm_system_suspend+0x1bc>)
    5974:	7d1b      	ldrb	r3, [r3, #20]
    5976:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    597a:	4931      	ldr	r1, [pc, #196]	; (5a40 <pm_system_suspend+0x1c4>)
    597c:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    5980:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    5982:	b10c      	cbz	r4, 5988 <pm_system_suspend+0x10c>
	return node->next;
    5984:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    5986:	b124      	cbz	r4, 5992 <pm_system_suspend+0x116>
    5988:	b11c      	cbz	r4, 5992 <pm_system_suspend+0x116>
			callback = notifier->state_entry;
    598a:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    598c:	2a00      	cmp	r2, #0
    598e:	d1f0      	bne.n	5972 <pm_system_suspend+0xf6>
    5990:	e7f7      	b.n	5982 <pm_system_suspend+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5992:	482c      	ldr	r0, [pc, #176]	; (5a44 <pm_system_suspend+0x1c8>)
    5994:	f004 ff22 	bl	a7dc <z_spin_unlock_valid>
    5998:	2800      	cmp	r0, #0
    599a:	d03d      	beq.n	5a18 <pm_system_suspend+0x19c>
	__asm__ volatile(
    599c:	f386 8811 	msr	BASEPRI, r6
    59a0:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    59a4:	f005 031f 	and.w	r3, r5, #31
    59a8:	2101      	movs	r1, #1
    59aa:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    59ac:	096b      	lsrs	r3, r5, #5
    59ae:	4a2d      	ldr	r2, [pc, #180]	; (5a64 <pm_system_suspend+0x1e8>)
    59b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    59b4:	f3bf 8f5b 	dmb	ish
    59b8:	e853 2f00 	ldrex	r2, [r3]
    59bc:	430a      	orrs	r2, r1
    59be:	e843 2000 	strex	r0, r2, [r3]
    59c2:	2800      	cmp	r0, #0
    59c4:	d1f8      	bne.n	59b8 <pm_system_suspend+0x13c>
    59c6:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    59ca:	4b27      	ldr	r3, [pc, #156]	; (5a68 <pm_system_suspend+0x1ec>)
    59cc:	b14b      	cbz	r3, 59e2 <pm_system_suspend+0x166>
		pm_state_set(info->state, info->substate_id);
    59ce:	4b1c      	ldr	r3, [pc, #112]	; (5a40 <pm_system_suspend+0x1c4>)
    59d0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    59d4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    59d8:	7849      	ldrb	r1, [r1, #1]
    59da:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    59de:	f009 fdcc 	bl	f57a <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    59e2:	f7ff feb1 	bl	5748 <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    59e6:	f005 031f 	and.w	r3, r5, #31
    59ea:	2401      	movs	r4, #1
    59ec:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    59f0:	096d      	lsrs	r5, r5, #5
    59f2:	4a12      	ldr	r2, [pc, #72]	; (5a3c <pm_system_suspend+0x1c0>)
    59f4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    59f8:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    59fa:	f3bf 8f5b 	dmb	ish
    59fe:	e855 2f00 	ldrex	r2, [r5]
    5a02:	401a      	ands	r2, r3
    5a04:	e845 2100 	strex	r1, r2, [r5]
    5a08:	2900      	cmp	r1, #0
    5a0a:	d1f8      	bne.n	59fe <pm_system_suspend+0x182>
    5a0c:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    5a10:	f006 faca 	bl	bfa8 <k_sched_unlock>
	bool ret = true;
    5a14:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    5a16:	bd70      	pop	{r4, r5, r6, pc}
    5a18:	4c0e      	ldr	r4, [pc, #56]	; (5a54 <pm_system_suspend+0x1d8>)
    5a1a:	23b9      	movs	r3, #185	; 0xb9
    5a1c:	4622      	mov	r2, r4
    5a1e:	4913      	ldr	r1, [pc, #76]	; (5a6c <pm_system_suspend+0x1f0>)
    5a20:	480e      	ldr	r0, [pc, #56]	; (5a5c <pm_system_suspend+0x1e0>)
    5a22:	f009 fc1c 	bl	f25e <assert_print>
    5a26:	4907      	ldr	r1, [pc, #28]	; (5a44 <pm_system_suspend+0x1c8>)
    5a28:	4811      	ldr	r0, [pc, #68]	; (5a70 <pm_system_suspend+0x1f4>)
    5a2a:	f009 fc18 	bl	f25e <assert_print>
    5a2e:	21b9      	movs	r1, #185	; 0xb9
    5a30:	4620      	mov	r0, r4
    5a32:	f009 fc0d 	bl	f250 <assert_post_action>
    5a36:	e7b1      	b.n	599c <pm_system_suspend+0x120>
    5a38:	2000d4dc 	.word	0x2000d4dc
    5a3c:	2000ca30 	.word	0x2000ca30
    5a40:	2000ca24 	.word	0x2000ca24
    5a44:	2000ca18 	.word	0x2000ca18
    5a48:	2000ca1c 	.word	0x2000ca1c
    5a4c:	000f423f 	.word	0x000f423f
    5a50:	000f4240 	.word	0x000f4240
    5a54:	000117b8 	.word	0x000117b8
    5a58:	00011818 	.word	0x00011818
    5a5c:	0001160c 	.word	0x0001160c
    5a60:	00011830 	.word	0x00011830
    5a64:	2000ca34 	.word	0x2000ca34
    5a68:	0000f57b 	.word	0x0000f57b
    5a6c:	000117e8 	.word	0x000117e8
    5a70:	00011800 	.word	0x00011800

00005a74 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5a74:	f3bf 8f5b 	dmb	ish
    5a78:	4b04      	ldr	r3, [pc, #16]	; (5a8c <pm_policy_state_lock_is_active+0x18>)
    5a7a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5a7e:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    5a82:	3800      	subs	r0, #0
    5a84:	bf18      	it	ne
    5a86:	2001      	movne	r0, #1
    5a88:	4770      	bx	lr
    5a8a:	bf00      	nop
    5a8c:	2000ca38 	.word	0x2000ca38

00005a90 <pm_policy_next_state>:
{
    5a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a94:	b082      	sub	sp, #8
    5a96:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    5a98:	a901      	add	r1, sp, #4
    5a9a:	f000 f843 	bl	5b24 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    5a9e:	1e44      	subs	r4, r0, #1
    5aa0:	b224      	sxth	r4, r4
    5aa2:	e007      	b.n	5ab4 <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    5aa4:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    5aa8:	d032      	beq.n	5b10 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    5aaa:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    5aac:	42b0      	cmp	r0, r6
    5aae:	d92f      	bls.n	5b10 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    5ab0:	3c01      	subs	r4, #1
    5ab2:	b224      	sxth	r4, r4
    5ab4:	2c00      	cmp	r4, #0
    5ab6:	db2a      	blt.n	5b0e <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    5ab8:	9b01      	ldr	r3, [sp, #4]
    5aba:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    5abe:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    5ac2:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    5ac6:	f7ff ffd5 	bl	5a74 <pm_policy_state_lock_is_active>
    5aca:	2800      	cmp	r0, #0
    5acc:	d1f0      	bne.n	5ab0 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    5ace:	6868      	ldr	r0, [r5, #4]
    5ad0:	0c41      	lsrs	r1, r0, #17
    5ad2:	03c0      	lsls	r0, r0, #15
    5ad4:	4f10      	ldr	r7, [pc, #64]	; (5b18 <pm_policy_next_state+0x88>)
    5ad6:	19c0      	adds	r0, r0, r7
    5ad8:	4a10      	ldr	r2, [pc, #64]	; (5b1c <pm_policy_next_state+0x8c>)
    5ada:	f04f 0300 	mov.w	r3, #0
    5ade:	f141 0100 	adc.w	r1, r1, #0
    5ae2:	f7fa ff7b 	bl	9dc <__aeabi_uldivmod>
    5ae6:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    5ae8:	68ab      	ldr	r3, [r5, #8]
    5aea:	0c59      	lsrs	r1, r3, #17
    5aec:	03db      	lsls	r3, r3, #15
    5aee:	19d8      	adds	r0, r3, r7
    5af0:	4a0a      	ldr	r2, [pc, #40]	; (5b1c <pm_policy_next_state+0x8c>)
    5af2:	f04f 0300 	mov.w	r3, #0
    5af6:	f141 0100 	adc.w	r1, r1, #0
    5afa:	f7fa ff6f 	bl	9dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    5afe:	4b08      	ldr	r3, [pc, #32]	; (5b20 <pm_policy_next_state+0x90>)
    5b00:	681b      	ldr	r3, [r3, #0]
    5b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5b06:	d0cd      	beq.n	5aa4 <pm_policy_next_state+0x14>
    5b08:	4283      	cmp	r3, r0
    5b0a:	d8cb      	bhi.n	5aa4 <pm_policy_next_state+0x14>
    5b0c:	e7d0      	b.n	5ab0 <pm_policy_next_state+0x20>
	return NULL;
    5b0e:	2500      	movs	r5, #0
}
    5b10:	4628      	mov	r0, r5
    5b12:	b002      	add	sp, #8
    5b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b18:	000f423f 	.word	0x000f423f
    5b1c:	000f4240 	.word	0x000f4240
    5b20:	2000401c 	.word	0x2000401c

00005b24 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    5b24:	b908      	cbnz	r0, 5b2a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    5b26:	4b02      	ldr	r3, [pc, #8]	; (5b30 <pm_state_cpu_get_all+0xc>)
    5b28:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    5b2a:	2000      	movs	r0, #0
    5b2c:	4770      	bx	lr
    5b2e:	bf00      	nop
    5b30:	00011db4 	.word	0x00011db4

00005b34 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    5b34:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    5b36:	4802      	ldr	r0, [pc, #8]	; (5b40 <nrf_cc3xx_platform_abort_init+0xc>)
    5b38:	f008 ffb8 	bl	eaac <nrf_cc3xx_platform_set_abort>
}
    5b3c:	bd08      	pop	{r3, pc}
    5b3e:	bf00      	nop
    5b40:	00011db4 	.word	0x00011db4

00005b44 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    5b44:	b1d0      	cbz	r0, 5b7c <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5b46:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    5b48:	6842      	ldr	r2, [r0, #4]
    5b4a:	2a04      	cmp	r2, #4
    5b4c:	d005      	beq.n	5b5a <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5b4e:	b1d2      	cbz	r2, 5b86 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    5b50:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    5b52:	f005 f993 	bl	ae7c <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    5b56:	2000      	movs	r0, #0
    }
}
    5b58:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    5b5a:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5b5c:	2200      	movs	r2, #0
    5b5e:	f3bf 8f5b 	dmb	ish
    5b62:	e853 1f00 	ldrex	r1, [r3]
    5b66:	2901      	cmp	r1, #1
    5b68:	d103      	bne.n	5b72 <mutex_unlock_platform+0x2e>
    5b6a:	e843 2000 	strex	r0, r2, [r3]
    5b6e:	2800      	cmp	r0, #0
    5b70:	d1f7      	bne.n	5b62 <mutex_unlock_platform+0x1e>
    5b72:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5b76:	d104      	bne.n	5b82 <mutex_unlock_platform+0x3e>
    5b78:	4610      	mov	r0, r2
    5b7a:	e7ed      	b.n	5b58 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    5b7c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    5b80:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5b82:	4802      	ldr	r0, [pc, #8]	; (5b8c <mutex_unlock_platform+0x48>)
    5b84:	e7e8      	b.n	5b58 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    5b86:	4802      	ldr	r0, [pc, #8]	; (5b90 <mutex_unlock_platform+0x4c>)
    5b88:	e7e6      	b.n	5b58 <mutex_unlock_platform+0x14>
    5b8a:	bf00      	nop
    5b8c:	ffff8fe9 	.word	0xffff8fe9
    5b90:	ffff8fea 	.word	0xffff8fea

00005b94 <mutex_lock_platform>:
    if(mutex == NULL) {
    5b94:	b320      	cbz	r0, 5be0 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5b96:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    5b98:	6842      	ldr	r2, [r0, #4]
    5b9a:	2a04      	cmp	r2, #4
    5b9c:	d002      	beq.n	5ba4 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5b9e:	b992      	cbnz	r2, 5bc6 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    5ba0:	4811      	ldr	r0, [pc, #68]	; (5be8 <mutex_lock_platform+0x54>)
    5ba2:	e00f      	b.n	5bc4 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    5ba4:	6803      	ldr	r3, [r0, #0]
    5ba6:	2201      	movs	r2, #1
    5ba8:	f3bf 8f5b 	dmb	ish
    5bac:	e853 1f00 	ldrex	r1, [r3]
    5bb0:	2900      	cmp	r1, #0
    5bb2:	d103      	bne.n	5bbc <mutex_lock_platform+0x28>
    5bb4:	e843 2000 	strex	r0, r2, [r3]
    5bb8:	2800      	cmp	r0, #0
    5bba:	d1f7      	bne.n	5bac <mutex_lock_platform+0x18>
    5bbc:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5bc0:	d10c      	bne.n	5bdc <mutex_lock_platform+0x48>
    5bc2:	2000      	movs	r0, #0
}
    5bc4:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    5bc6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    5bc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5bd0:	f005 f834 	bl	ac3c <z_impl_k_mutex_lock>
        if (ret == 0) {
    5bd4:	2800      	cmp	r0, #0
    5bd6:	d0f5      	beq.n	5bc4 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    5bd8:	4804      	ldr	r0, [pc, #16]	; (5bec <mutex_lock_platform+0x58>)
    5bda:	e7f3      	b.n	5bc4 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5bdc:	4803      	ldr	r0, [pc, #12]	; (5bec <mutex_lock_platform+0x58>)
    5bde:	e7f1      	b.n	5bc4 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    5be0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    5be4:	4770      	bx	lr
    5be6:	bf00      	nop
    5be8:	ffff8fea 	.word	0xffff8fea
    5bec:	ffff8fe9 	.word	0xffff8fe9

00005bf0 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5bf0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    5bf2:	4604      	mov	r4, r0
    5bf4:	b190      	cbz	r0, 5c1c <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    5bf6:	6863      	ldr	r3, [r4, #4]
    5bf8:	2b04      	cmp	r3, #4
    5bfa:	d00e      	beq.n	5c1a <mutex_free_platform+0x2a>
    5bfc:	2b08      	cmp	r3, #8
    5bfe:	d00c      	beq.n	5c1a <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5c00:	b15b      	cbz	r3, 5c1a <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    5c02:	f013 0f02 	tst.w	r3, #2
    5c06:	d10e      	bne.n	5c26 <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    5c08:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    5c0a:	2200      	movs	r2, #0
    5c0c:	601a      	str	r2, [r3, #0]
    5c0e:	605a      	str	r2, [r3, #4]
    5c10:	609a      	str	r2, [r3, #8]
    5c12:	60da      	str	r2, [r3, #12]
    5c14:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    5c16:	2300      	movs	r3, #0
    5c18:	6063      	str	r3, [r4, #4]
}
    5c1a:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    5c1c:	4b05      	ldr	r3, [pc, #20]	; (5c34 <mutex_free_platform+0x44>)
    5c1e:	685b      	ldr	r3, [r3, #4]
    5c20:	4805      	ldr	r0, [pc, #20]	; (5c38 <mutex_free_platform+0x48>)
    5c22:	4798      	blx	r3
    5c24:	e7e7      	b.n	5bf6 <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    5c26:	4621      	mov	r1, r4
    5c28:	4804      	ldr	r0, [pc, #16]	; (5c3c <mutex_free_platform+0x4c>)
    5c2a:	f004 fd51 	bl	a6d0 <k_mem_slab_free>
        mutex->mutex = NULL;
    5c2e:	2300      	movs	r3, #0
    5c30:	6023      	str	r3, [r4, #0]
    5c32:	e7f0      	b.n	5c16 <mutex_free_platform+0x26>
    5c34:	20004168 	.word	0x20004168
    5c38:	00011dbc 	.word	0x00011dbc
    5c3c:	2000ca54 	.word	0x2000ca54

00005c40 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5c40:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    5c42:	4604      	mov	r4, r0
    5c44:	b178      	cbz	r0, 5c66 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    5c46:	6863      	ldr	r3, [r4, #4]
    5c48:	2b04      	cmp	r3, #4
    5c4a:	d00b      	beq.n	5c64 <mutex_init_platform+0x24>
    5c4c:	2b08      	cmp	r3, #8
    5c4e:	d009      	beq.n	5c64 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    5c50:	b90b      	cbnz	r3, 5c56 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    5c52:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    5c54:	b163      	cbz	r3, 5c70 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    5c56:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    5c58:	f00a fcd3 	bl	10602 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    5c5c:	6863      	ldr	r3, [r4, #4]
    5c5e:	f043 0301 	orr.w	r3, r3, #1
    5c62:	6063      	str	r3, [r4, #4]
}
    5c64:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    5c66:	4b10      	ldr	r3, [pc, #64]	; (5ca8 <mutex_init_platform+0x68>)
    5c68:	685b      	ldr	r3, [r3, #4]
    5c6a:	4810      	ldr	r0, [pc, #64]	; (5cac <mutex_init_platform+0x6c>)
    5c6c:	4798      	blx	r3
    5c6e:	e7ea      	b.n	5c46 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    5c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5c78:	4621      	mov	r1, r4
    5c7a:	480d      	ldr	r0, [pc, #52]	; (5cb0 <mutex_init_platform+0x70>)
    5c7c:	f004 fcb2 	bl	a5e4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    5c80:	b908      	cbnz	r0, 5c86 <mutex_init_platform+0x46>
    5c82:	6823      	ldr	r3, [r4, #0]
    5c84:	b91b      	cbnz	r3, 5c8e <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    5c86:	4b08      	ldr	r3, [pc, #32]	; (5ca8 <mutex_init_platform+0x68>)
    5c88:	685b      	ldr	r3, [r3, #4]
    5c8a:	480a      	ldr	r0, [pc, #40]	; (5cb4 <mutex_init_platform+0x74>)
    5c8c:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    5c8e:	6823      	ldr	r3, [r4, #0]
    5c90:	2200      	movs	r2, #0
    5c92:	601a      	str	r2, [r3, #0]
    5c94:	605a      	str	r2, [r3, #4]
    5c96:	609a      	str	r2, [r3, #8]
    5c98:	60da      	str	r2, [r3, #12]
    5c9a:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    5c9c:	6863      	ldr	r3, [r4, #4]
    5c9e:	f043 0302 	orr.w	r3, r3, #2
    5ca2:	6063      	str	r3, [r4, #4]
    5ca4:	e7d7      	b.n	5c56 <mutex_init_platform+0x16>
    5ca6:	bf00      	nop
    5ca8:	20004168 	.word	0x20004168
    5cac:	00011dbc 	.word	0x00011dbc
    5cb0:	2000ca54 	.word	0x2000ca54
    5cb4:	00011de4 	.word	0x00011de4

00005cb8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    5cb8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    5cba:	2340      	movs	r3, #64	; 0x40
    5cbc:	2214      	movs	r2, #20
    5cbe:	4904      	ldr	r1, [pc, #16]	; (5cd0 <nrf_cc3xx_platform_mutex_init+0x18>)
    5cc0:	4804      	ldr	r0, [pc, #16]	; (5cd4 <nrf_cc3xx_platform_mutex_init+0x1c>)
    5cc2:	f00a fc4a 	bl	1055a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    5cc6:	4904      	ldr	r1, [pc, #16]	; (5cd8 <nrf_cc3xx_platform_mutex_init+0x20>)
    5cc8:	4804      	ldr	r0, [pc, #16]	; (5cdc <nrf_cc3xx_platform_mutex_init+0x24>)
    5cca:	f008 ff4f 	bl	eb6c <nrf_cc3xx_platform_set_mutexes>
}
    5cce:	bd08      	pop	{r3, pc}
    5cd0:	2000ca74 	.word	0x2000ca74
    5cd4:	2000ca54 	.word	0x2000ca54
    5cd8:	00011e24 	.word	0x00011e24
    5cdc:	00011e14 	.word	0x00011e14

00005ce0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    5ce0:	4901      	ldr	r1, [pc, #4]	; (5ce8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    5ce2:	2210      	movs	r2, #16
	str	r2, [r1]
    5ce4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    5ce6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    5ce8:	e000ed10 	.word	0xe000ed10

00005cec <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    5cec:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    5cee:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    5cf0:	f380 8811 	msr	BASEPRI, r0
	isb
    5cf4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    5cf8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    5cfc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    5cfe:	b662      	cpsie	i
	isb
    5d00:	f3bf 8f6f 	isb	sy

	bx	lr
    5d04:	4770      	bx	lr
    5d06:	bf00      	nop

00005d08 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    5d08:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    5d0a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    5d0c:	f381 8811 	msr	BASEPRI, r1

	wfe
    5d10:	bf20      	wfe

	msr	BASEPRI, r0
    5d12:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    5d16:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    5d18:	4770      	bx	lr
    5d1a:	bf00      	nop

00005d1c <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    5d1c:	b570      	push	{r4, r5, r6, lr}
    5d1e:	b086      	sub	sp, #24
    5d20:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    5d22:	4e1e      	ldr	r6, [pc, #120]	; (5d9c <esf_dump+0x80>)
    5d24:	6883      	ldr	r3, [r0, #8]
    5d26:	9305      	str	r3, [sp, #20]
    5d28:	6843      	ldr	r3, [r0, #4]
    5d2a:	9304      	str	r3, [sp, #16]
    5d2c:	6803      	ldr	r3, [r0, #0]
    5d2e:	9303      	str	r3, [sp, #12]
    5d30:	4b1b      	ldr	r3, [pc, #108]	; (5da0 <esf_dump+0x84>)
    5d32:	9302      	str	r3, [sp, #8]
    5d34:	2400      	movs	r4, #0
    5d36:	9401      	str	r4, [sp, #4]
    5d38:	9400      	str	r4, [sp, #0]
    5d3a:	4623      	mov	r3, r4
    5d3c:	2201      	movs	r2, #1
    5d3e:	4631      	mov	r1, r6
    5d40:	4620      	mov	r0, r4
    5d42:	f009 fb40 	bl	f3c6 <z_log_msg2_runtime_create>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    5d46:	696b      	ldr	r3, [r5, #20]
    5d48:	9305      	str	r3, [sp, #20]
    5d4a:	692b      	ldr	r3, [r5, #16]
    5d4c:	9304      	str	r3, [sp, #16]
    5d4e:	68eb      	ldr	r3, [r5, #12]
    5d50:	9303      	str	r3, [sp, #12]
    5d52:	4b14      	ldr	r3, [pc, #80]	; (5da4 <esf_dump+0x88>)
    5d54:	9302      	str	r3, [sp, #8]
    5d56:	9401      	str	r4, [sp, #4]
    5d58:	9400      	str	r4, [sp, #0]
    5d5a:	4623      	mov	r3, r4
    5d5c:	2201      	movs	r2, #1
    5d5e:	4631      	mov	r1, r6
    5d60:	4620      	mov	r0, r4
    5d62:	f009 fb30 	bl	f3c6 <z_log_msg2_runtime_create>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    5d66:	69eb      	ldr	r3, [r5, #28]
    5d68:	9303      	str	r3, [sp, #12]
    5d6a:	4b0f      	ldr	r3, [pc, #60]	; (5da8 <esf_dump+0x8c>)
    5d6c:	9302      	str	r3, [sp, #8]
    5d6e:	9401      	str	r4, [sp, #4]
    5d70:	9400      	str	r4, [sp, #0]
    5d72:	4623      	mov	r3, r4
    5d74:	2201      	movs	r2, #1
    5d76:	4631      	mov	r1, r6
    5d78:	4620      	mov	r0, r4
    5d7a:	f009 fb24 	bl	f3c6 <z_log_msg2_runtime_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    5d7e:	69ab      	ldr	r3, [r5, #24]
    5d80:	9303      	str	r3, [sp, #12]
    5d82:	4b0a      	ldr	r3, [pc, #40]	; (5dac <esf_dump+0x90>)
    5d84:	9302      	str	r3, [sp, #8]
    5d86:	9401      	str	r4, [sp, #4]
    5d88:	9400      	str	r4, [sp, #0]
    5d8a:	4623      	mov	r3, r4
    5d8c:	2201      	movs	r2, #1
    5d8e:	4631      	mov	r1, r6
    5d90:	4620      	mov	r0, r4
    5d92:	f009 fb18 	bl	f3c6 <z_log_msg2_runtime_create>
		esf->basic.pc);
}
    5d96:	b006      	add	sp, #24
    5d98:	bd70      	pop	{r4, r5, r6, pc}
    5d9a:	bf00      	nop
    5d9c:	00011040 	.word	0x00011040
    5da0:	00011e38 	.word	0x00011e38
    5da4:	00011e68 	.word	0x00011e68
    5da8:	00011e98 	.word	0x00011e98
    5dac:	00011ea8 	.word	0x00011ea8

00005db0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    5db0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    5db2:	2800      	cmp	r0, #0
    5db4:	db07      	blt.n	5dc6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5db6:	f000 021f 	and.w	r2, r0, #31
    5dba:	0940      	lsrs	r0, r0, #5
    5dbc:	2301      	movs	r3, #1
    5dbe:	4093      	lsls	r3, r2
    5dc0:	4a01      	ldr	r2, [pc, #4]	; (5dc8 <arch_irq_enable+0x18>)
    5dc2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    5dc6:	4770      	bx	lr
    5dc8:	e000e100 	.word	0xe000e100

00005dcc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    5dcc:	0942      	lsrs	r2, r0, #5
    5dce:	4b05      	ldr	r3, [pc, #20]	; (5de4 <arch_irq_is_enabled+0x18>)
    5dd0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5dd4:	f000 001f 	and.w	r0, r0, #31
    5dd8:	2301      	movs	r3, #1
    5dda:	fa03 f000 	lsl.w	r0, r3, r0
}
    5dde:	4010      	ands	r0, r2
    5de0:	4770      	bx	lr
    5de2:	bf00      	nop
    5de4:	e000e100 	.word	0xe000e100

00005de8 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    5de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5dea:	4604      	mov	r4, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    5dec:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    5dee:	2d07      	cmp	r5, #7
    5df0:	d80b      	bhi.n	5e0a <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5df2:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    5df4:	2800      	cmp	r0, #0
    5df6:	db1b      	blt.n	5e30 <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5df8:	016d      	lsls	r5, r5, #5
    5dfa:	b2ed      	uxtb	r5, r5
    5dfc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    5e00:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    5e04:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    5e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e0a:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    5e0c:	4f0c      	ldr	r7, [pc, #48]	; (5e40 <z_arm_irq_priority_set+0x58>)
    5e0e:	2357      	movs	r3, #87	; 0x57
    5e10:	463a      	mov	r2, r7
    5e12:	490c      	ldr	r1, [pc, #48]	; (5e44 <z_arm_irq_priority_set+0x5c>)
    5e14:	480c      	ldr	r0, [pc, #48]	; (5e48 <z_arm_irq_priority_set+0x60>)
    5e16:	f009 fa22 	bl	f25e <assert_print>
    5e1a:	2307      	movs	r3, #7
    5e1c:	4622      	mov	r2, r4
    5e1e:	4631      	mov	r1, r6
    5e20:	480a      	ldr	r0, [pc, #40]	; (5e4c <z_arm_irq_priority_set+0x64>)
    5e22:	f009 fa1c 	bl	f25e <assert_print>
    5e26:	2157      	movs	r1, #87	; 0x57
    5e28:	4638      	mov	r0, r7
    5e2a:	f009 fa11 	bl	f250 <assert_post_action>
    5e2e:	e7e0      	b.n	5df2 <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5e30:	f000 000f 	and.w	r0, r0, #15
    5e34:	016d      	lsls	r5, r5, #5
    5e36:	b2ed      	uxtb	r5, r5
    5e38:	4b05      	ldr	r3, [pc, #20]	; (5e50 <z_arm_irq_priority_set+0x68>)
    5e3a:	541d      	strb	r5, [r3, r0]
}
    5e3c:	e7e4      	b.n	5e08 <z_arm_irq_priority_set+0x20>
    5e3e:	bf00      	nop
    5e40:	00011ed8 	.word	0x00011ed8
    5e44:	00011f10 	.word	0x00011f10
    5e48:	0001160c 	.word	0x0001160c
    5e4c:	00011f2c 	.word	0x00011f2c
    5e50:	e000ed14 	.word	0xe000ed14

00005e54 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    5e54:	bf30      	wfi
    b z_SysNmiOnReset
    5e56:	f7ff bffd 	b.w	5e54 <z_SysNmiOnReset>
    5e5a:	bf00      	nop

00005e5c <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    5e5c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5e5e:	4b0b      	ldr	r3, [pc, #44]	; (5e8c <z_arm_prep_c+0x30>)
    5e60:	4a0b      	ldr	r2, [pc, #44]	; (5e90 <z_arm_prep_c+0x34>)
    5e62:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    5e66:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5e68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5e6c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    5e70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    5e74:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    5e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    5e7c:	f004 fade 	bl	a43c <z_bss_zero>
	z_data_copy();
    5e80:	f006 fca4 	bl	c7cc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    5e84:	f000 fc72 	bl	676c <z_arm_interrupt_init>
	z_cstart();
    5e88:	f004 fb36 	bl	a4f8 <z_cstart>
    5e8c:	e000ed00 	.word	0xe000ed00
    5e90:	00000000 	.word	0x00000000

00005e94 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    5e94:	4a0a      	ldr	r2, [pc, #40]	; (5ec0 <arch_swap+0x2c>)
    5e96:	6893      	ldr	r3, [r2, #8]
    5e98:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    5e9c:	4909      	ldr	r1, [pc, #36]	; (5ec4 <arch_swap+0x30>)
    5e9e:	6809      	ldr	r1, [r1, #0]
    5ea0:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5ea4:	4908      	ldr	r1, [pc, #32]	; (5ec8 <arch_swap+0x34>)
    5ea6:	684b      	ldr	r3, [r1, #4]
    5ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    5eac:	604b      	str	r3, [r1, #4]
    5eae:	2300      	movs	r3, #0
    5eb0:	f383 8811 	msr	BASEPRI, r3
    5eb4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    5eb8:	6893      	ldr	r3, [r2, #8]
}
    5eba:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    5ebe:	4770      	bx	lr
    5ec0:	2000d4dc 	.word	0x2000d4dc
    5ec4:	00012c4c 	.word	0x00012c4c
    5ec8:	e000ed00 	.word	0xe000ed00

00005ecc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    5ecc:	4913      	ldr	r1, [pc, #76]	; (5f1c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    5ece:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    5ed0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    5ed4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    5ed6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    5eda:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5ede:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    5ee0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    5ee4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    5ee8:	4f0d      	ldr	r7, [pc, #52]	; (5f20 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    5eea:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    5eee:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    5ef0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    5ef2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    5ef4:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    5ef8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5efa:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    5efe:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    5f02:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    5f04:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    5f06:	f000 fcdb 	bl	68c0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    5f0a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    5f0e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    5f12:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    5f16:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    5f1a:	4770      	bx	lr
    ldr r1, =_kernel
    5f1c:	2000d4dc 	.word	0x2000d4dc
    ldr v4, =_SCS_ICSR
    5f20:	e000ed04 	.word	0xe000ed04

00005f24 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    5f24:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5f28:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    5f2a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    5f2e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    5f32:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5f34:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5f38:	2902      	cmp	r1, #2
    beq _oops
    5f3a:	d0ff      	beq.n	5f3c <_oops>

00005f3c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    5f3c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    5f3e:	f009 fa5d 	bl	f3fc <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    5f42:	bd01      	pop	{r0, pc}

00005f44 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    5f44:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    5f46:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    5f4a:	490e      	ldr	r1, [pc, #56]	; (5f84 <arch_new_thread+0x40>)
    5f4c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    5f50:	f021 0101 	bic.w	r1, r1, #1
    5f54:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    5f58:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    5f5c:	9b01      	ldr	r3, [sp, #4]
    5f5e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    5f62:	9b02      	ldr	r3, [sp, #8]
    5f64:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    5f68:	9b03      	ldr	r3, [sp, #12]
    5f6a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    5f6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    5f72:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    5f76:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    5f78:	2300      	movs	r3, #0
    5f7a:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    5f7e:	bc10      	pop	{r4}
    5f80:	4770      	bx	lr
    5f82:	bf00      	nop
    5f84:	0000f1a1 	.word	0x0000f1a1

00005f88 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    5f88:	4b12      	ldr	r3, [pc, #72]	; (5fd4 <z_check_thread_stack_fail+0x4c>)
    5f8a:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    5f8c:	b302      	cbz	r2, 5fd0 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    5f8e:	f110 0f16 	cmn.w	r0, #22
    5f92:	d011      	beq.n	5fb8 <z_check_thread_stack_fail+0x30>
    5f94:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    5f98:	f1a3 0c20 	sub.w	ip, r3, #32
    5f9c:	4584      	cmp	ip, r0
    5f9e:	d805      	bhi.n	5fac <z_check_thread_stack_fail+0x24>
    5fa0:	4283      	cmp	r3, r0
    5fa2:	d905      	bls.n	5fb0 <z_check_thread_stack_fail+0x28>
    5fa4:	428b      	cmp	r3, r1
    5fa6:	d805      	bhi.n	5fb4 <z_check_thread_stack_fail+0x2c>
    5fa8:	2100      	movs	r1, #0
    5faa:	e00b      	b.n	5fc4 <z_check_thread_stack_fail+0x3c>
    5fac:	2100      	movs	r1, #0
    5fae:	e009      	b.n	5fc4 <z_check_thread_stack_fail+0x3c>
    5fb0:	2100      	movs	r1, #0
    5fb2:	e007      	b.n	5fc4 <z_check_thread_stack_fail+0x3c>
    5fb4:	2101      	movs	r1, #1
    5fb6:	e005      	b.n	5fc4 <z_check_thread_stack_fail+0x3c>
    5fb8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    5fbc:	428b      	cmp	r3, r1
    5fbe:	bf94      	ite	ls
    5fc0:	2100      	movls	r1, #0
    5fc2:	2101      	movhi	r1, #1
    5fc4:	b909      	cbnz	r1, 5fca <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    5fc6:	2000      	movs	r0, #0
}
    5fc8:	4770      	bx	lr
		return thread->stack_info.start;
    5fca:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    5fce:	4770      	bx	lr
		return 0;
    5fd0:	2000      	movs	r0, #0
    5fd2:	4770      	bx	lr
    5fd4:	2000d4dc 	.word	0x2000d4dc

00005fd8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    5fd8:	b508      	push	{r3, lr}
    5fda:	460d      	mov	r5, r1
    5fdc:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    5fde:	4b08      	ldr	r3, [pc, #32]	; (6000 <arch_switch_to_main_thread+0x28>)
    5fe0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    5fe2:	f000 fc6d 	bl	68c0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    5fe6:	4620      	mov	r0, r4
    5fe8:	f385 8809 	msr	PSP, r5
    5fec:	2100      	movs	r1, #0
    5fee:	b663      	cpsie	if
    5ff0:	f381 8811 	msr	BASEPRI, r1
    5ff4:	f3bf 8f6f 	isb	sy
    5ff8:	2200      	movs	r2, #0
    5ffa:	2300      	movs	r3, #0
    5ffc:	f009 f8d0 	bl	f1a0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    6000:	2000d4dc 	.word	0x2000d4dc

00006004 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    6004:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    6006:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    6008:	4a0b      	ldr	r2, [pc, #44]	; (6038 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    600a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    600c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    600e:	bf1e      	ittt	ne
	movne	r1, #0
    6010:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    6012:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    6014:	f00a fad9 	blne	105ca <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    6018:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    601a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    601e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    6022:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    6026:	4905      	ldr	r1, [pc, #20]	; (603c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    6028:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    602a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    602c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    602e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    6032:	4903      	ldr	r1, [pc, #12]	; (6040 <_isr_wrapper+0x3c>)
	bx r1
    6034:	4708      	bx	r1
    6036:	0000      	.short	0x0000
	ldr r2, =_kernel
    6038:	2000d4dc 	.word	0x2000d4dc
	ldr r1, =_sw_isr_table
    603c:	00010e98 	.word	0x00010e98
	ldr r1, =z_arm_int_exit
    6040:	00006045 	.word	0x00006045

00006044 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    6044:	4b04      	ldr	r3, [pc, #16]	; (6058 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    6046:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    6048:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    604a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    604c:	d003      	beq.n	6056 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    604e:	4903      	ldr	r1, [pc, #12]	; (605c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    6050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    6054:	600a      	str	r2, [r1, #0]

00006056 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    6056:	4770      	bx	lr
	ldr r3, =_kernel
    6058:	2000d4dc 	.word	0x2000d4dc
	ldr r1, =_SCS_ICSR
    605c:	e000ed04 	.word	0xe000ed04

00006060 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    6060:	b570      	push	{r4, r5, r6, lr}
    6062:	b084      	sub	sp, #16
    6064:	4605      	mov	r5, r0
    6066:	460e      	mov	r6, r1
    6068:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    606a:	4b47      	ldr	r3, [pc, #284]	; (6188 <bus_fault+0x128>)
    606c:	9302      	str	r3, [sp, #8]
    606e:	2000      	movs	r0, #0
    6070:	9001      	str	r0, [sp, #4]
    6072:	9000      	str	r0, [sp, #0]
    6074:	4603      	mov	r3, r0
    6076:	2201      	movs	r2, #1
    6078:	4944      	ldr	r1, [pc, #272]	; (618c <bus_fault+0x12c>)
    607a:	f009 f9d3 	bl	f424 <z_log_msg2_runtime_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    607e:	4b44      	ldr	r3, [pc, #272]	; (6190 <bus_fault+0x130>)
    6080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6082:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    6086:	d125      	bne.n	60d4 <bus_fault+0x74>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    6088:	4b41      	ldr	r3, [pc, #260]	; (6190 <bus_fault+0x130>)
    608a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    608c:	f413 6f00 	tst.w	r3, #2048	; 0x800
    6090:	d12b      	bne.n	60ea <bus_fault+0x8a>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    6092:	4b3f      	ldr	r3, [pc, #252]	; (6190 <bus_fault+0x130>)
    6094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6096:	f413 7f00 	tst.w	r3, #512	; 0x200
    609a:	d131      	bne.n	6100 <bus_fault+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    609c:	4b3c      	ldr	r3, [pc, #240]	; (6190 <bus_fault+0x130>)
    609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    60a0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    60a4:	d14f      	bne.n	6146 <bus_fault+0xe6>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    60a6:	4b3a      	ldr	r3, [pc, #232]	; (6190 <bus_fault+0x130>)
    60a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    60aa:	f413 7f80 	tst.w	r3, #256	; 0x100
    60ae:	d155      	bne.n	615c <bus_fault+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    60b0:	4b37      	ldr	r3, [pc, #220]	; (6190 <bus_fault+0x130>)
    60b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    60b4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    60b8:	d15b      	bne.n	6172 <bus_fault+0x112>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    60ba:	4a35      	ldr	r2, [pc, #212]	; (6190 <bus_fault+0x130>)
    60bc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    60be:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    60c2:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    60c4:	2101      	movs	r1, #1
    60c6:	4628      	mov	r0, r5
    60c8:	f009 f9aa 	bl	f420 <memory_fault_recoverable>
    60cc:	7020      	strb	r0, [r4, #0]

	return reason;
}
    60ce:	2000      	movs	r0, #0
    60d0:	b004      	add	sp, #16
    60d2:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
    60d4:	4b2f      	ldr	r3, [pc, #188]	; (6194 <bus_fault+0x134>)
    60d6:	9302      	str	r3, [sp, #8]
    60d8:	2000      	movs	r0, #0
    60da:	9001      	str	r0, [sp, #4]
    60dc:	9000      	str	r0, [sp, #0]
    60de:	4603      	mov	r3, r0
    60e0:	2201      	movs	r2, #1
    60e2:	492a      	ldr	r1, [pc, #168]	; (618c <bus_fault+0x12c>)
    60e4:	f009 f99e 	bl	f424 <z_log_msg2_runtime_create>
    60e8:	e7ce      	b.n	6088 <bus_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    60ea:	4b2b      	ldr	r3, [pc, #172]	; (6198 <bus_fault+0x138>)
    60ec:	9302      	str	r3, [sp, #8]
    60ee:	2000      	movs	r0, #0
    60f0:	9001      	str	r0, [sp, #4]
    60f2:	9000      	str	r0, [sp, #0]
    60f4:	4603      	mov	r3, r0
    60f6:	2201      	movs	r2, #1
    60f8:	4924      	ldr	r1, [pc, #144]	; (618c <bus_fault+0x12c>)
    60fa:	f009 f993 	bl	f424 <z_log_msg2_runtime_create>
    60fe:	e7c8      	b.n	6092 <bus_fault+0x32>
		PR_FAULT_INFO("  Precise data bus error");
    6100:	4b26      	ldr	r3, [pc, #152]	; (619c <bus_fault+0x13c>)
    6102:	9302      	str	r3, [sp, #8]
    6104:	2000      	movs	r0, #0
    6106:	9001      	str	r0, [sp, #4]
    6108:	9000      	str	r0, [sp, #0]
    610a:	4603      	mov	r3, r0
    610c:	2201      	movs	r2, #1
    610e:	491f      	ldr	r1, [pc, #124]	; (618c <bus_fault+0x12c>)
    6110:	f009 f988 	bl	f424 <z_log_msg2_runtime_create>
		STORE_xFAR(bfar, SCB->BFAR);
    6114:	4b1e      	ldr	r3, [pc, #120]	; (6190 <bus_fault+0x130>)
    6116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    6118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    611a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    611e:	d0bd      	beq.n	609c <bus_fault+0x3c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    6120:	9203      	str	r2, [sp, #12]
    6122:	4b1f      	ldr	r3, [pc, #124]	; (61a0 <bus_fault+0x140>)
    6124:	9302      	str	r3, [sp, #8]
    6126:	2000      	movs	r0, #0
    6128:	9001      	str	r0, [sp, #4]
    612a:	9000      	str	r0, [sp, #0]
    612c:	4603      	mov	r3, r0
    612e:	2201      	movs	r2, #1
    6130:	4916      	ldr	r1, [pc, #88]	; (618c <bus_fault+0x12c>)
    6132:	f009 f977 	bl	f424 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    6136:	2e00      	cmp	r6, #0
    6138:	d0b0      	beq.n	609c <bus_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    613a:	4a15      	ldr	r2, [pc, #84]	; (6190 <bus_fault+0x130>)
    613c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    613e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6142:	6293      	str	r3, [r2, #40]	; 0x28
    6144:	e7aa      	b.n	609c <bus_fault+0x3c>
		PR_FAULT_INFO("  Imprecise data bus error");
    6146:	4b17      	ldr	r3, [pc, #92]	; (61a4 <bus_fault+0x144>)
    6148:	9302      	str	r3, [sp, #8]
    614a:	2000      	movs	r0, #0
    614c:	9001      	str	r0, [sp, #4]
    614e:	9000      	str	r0, [sp, #0]
    6150:	4603      	mov	r3, r0
    6152:	2201      	movs	r2, #1
    6154:	490d      	ldr	r1, [pc, #52]	; (618c <bus_fault+0x12c>)
    6156:	f009 f965 	bl	f424 <z_log_msg2_runtime_create>
    615a:	e7a4      	b.n	60a6 <bus_fault+0x46>
		PR_FAULT_INFO("  Instruction bus error");
    615c:	4b12      	ldr	r3, [pc, #72]	; (61a8 <bus_fault+0x148>)
    615e:	9302      	str	r3, [sp, #8]
    6160:	2000      	movs	r0, #0
    6162:	9001      	str	r0, [sp, #4]
    6164:	9000      	str	r0, [sp, #0]
    6166:	4603      	mov	r3, r0
    6168:	2201      	movs	r2, #1
    616a:	4908      	ldr	r1, [pc, #32]	; (618c <bus_fault+0x12c>)
    616c:	f009 f95a 	bl	f424 <z_log_msg2_runtime_create>
    6170:	e7a3      	b.n	60ba <bus_fault+0x5a>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6172:	4b0e      	ldr	r3, [pc, #56]	; (61ac <bus_fault+0x14c>)
    6174:	9302      	str	r3, [sp, #8]
    6176:	2000      	movs	r0, #0
    6178:	9001      	str	r0, [sp, #4]
    617a:	9000      	str	r0, [sp, #0]
    617c:	4603      	mov	r3, r0
    617e:	2201      	movs	r2, #1
    6180:	4902      	ldr	r1, [pc, #8]	; (618c <bus_fault+0x12c>)
    6182:	f009 f94f 	bl	f424 <z_log_msg2_runtime_create>
    6186:	e798      	b.n	60ba <bus_fault+0x5a>
    6188:	00011f6c 	.word	0x00011f6c
    618c:	00011040 	.word	0x00011040
    6190:	e000ed00 	.word	0xe000ed00
    6194:	00011f84 	.word	0x00011f84
    6198:	00011f98 	.word	0x00011f98
    619c:	00011fac 	.word	0x00011fac
    61a0:	00011fc8 	.word	0x00011fc8
    61a4:	00011fe0 	.word	0x00011fe0
    61a8:	00011ffc 	.word	0x00011ffc
    61ac:	00012014 	.word	0x00012014

000061b0 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    61b0:	b500      	push	{lr}
    61b2:	b085      	sub	sp, #20
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    61b4:	4b3a      	ldr	r3, [pc, #232]	; (62a0 <usage_fault+0xf0>)
    61b6:	9302      	str	r3, [sp, #8]
    61b8:	2000      	movs	r0, #0
    61ba:	9001      	str	r0, [sp, #4]
    61bc:	9000      	str	r0, [sp, #0]
    61be:	4603      	mov	r3, r0
    61c0:	2201      	movs	r2, #1
    61c2:	4938      	ldr	r1, [pc, #224]	; (62a4 <usage_fault+0xf4>)
    61c4:	f009 f92e 	bl	f424 <z_log_msg2_runtime_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    61c8:	4b37      	ldr	r3, [pc, #220]	; (62a8 <usage_fault+0xf8>)
    61ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    61cc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    61d0:	d123      	bne.n	621a <usage_fault+0x6a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    61d2:	4b35      	ldr	r3, [pc, #212]	; (62a8 <usage_fault+0xf8>)
    61d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    61d6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    61da:	d129      	bne.n	6230 <usage_fault+0x80>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    61dc:	4b32      	ldr	r3, [pc, #200]	; (62a8 <usage_fault+0xf8>)
    61de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    61e0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    61e4:	d12f      	bne.n	6246 <usage_fault+0x96>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    61e6:	4b30      	ldr	r3, [pc, #192]	; (62a8 <usage_fault+0xf8>)
    61e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    61ea:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    61ee:	d135      	bne.n	625c <usage_fault+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    61f0:	4b2d      	ldr	r3, [pc, #180]	; (62a8 <usage_fault+0xf8>)
    61f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    61f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    61f8:	d13b      	bne.n	6272 <usage_fault+0xc2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    61fa:	4b2b      	ldr	r3, [pc, #172]	; (62a8 <usage_fault+0xf8>)
    61fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    61fe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6202:	d141      	bne.n	6288 <usage_fault+0xd8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6204:	4a28      	ldr	r2, [pc, #160]	; (62a8 <usage_fault+0xf8>)
    6206:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6208:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    620c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    6210:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    6212:	2000      	movs	r0, #0
    6214:	b005      	add	sp, #20
    6216:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    621a:	4b24      	ldr	r3, [pc, #144]	; (62ac <usage_fault+0xfc>)
    621c:	9302      	str	r3, [sp, #8]
    621e:	2000      	movs	r0, #0
    6220:	9001      	str	r0, [sp, #4]
    6222:	9000      	str	r0, [sp, #0]
    6224:	4603      	mov	r3, r0
    6226:	2201      	movs	r2, #1
    6228:	491e      	ldr	r1, [pc, #120]	; (62a4 <usage_fault+0xf4>)
    622a:	f009 f8fb 	bl	f424 <z_log_msg2_runtime_create>
    622e:	e7d0      	b.n	61d2 <usage_fault+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    6230:	4b1f      	ldr	r3, [pc, #124]	; (62b0 <usage_fault+0x100>)
    6232:	9302      	str	r3, [sp, #8]
    6234:	2000      	movs	r0, #0
    6236:	9001      	str	r0, [sp, #4]
    6238:	9000      	str	r0, [sp, #0]
    623a:	4603      	mov	r3, r0
    623c:	2201      	movs	r2, #1
    623e:	4919      	ldr	r1, [pc, #100]	; (62a4 <usage_fault+0xf4>)
    6240:	f009 f8f0 	bl	f424 <z_log_msg2_runtime_create>
    6244:	e7ca      	b.n	61dc <usage_fault+0x2c>
		PR_FAULT_INFO("  No coprocessor instructions");
    6246:	4b1b      	ldr	r3, [pc, #108]	; (62b4 <usage_fault+0x104>)
    6248:	9302      	str	r3, [sp, #8]
    624a:	2000      	movs	r0, #0
    624c:	9001      	str	r0, [sp, #4]
    624e:	9000      	str	r0, [sp, #0]
    6250:	4603      	mov	r3, r0
    6252:	2201      	movs	r2, #1
    6254:	4913      	ldr	r1, [pc, #76]	; (62a4 <usage_fault+0xf4>)
    6256:	f009 f8e5 	bl	f424 <z_log_msg2_runtime_create>
    625a:	e7c4      	b.n	61e6 <usage_fault+0x36>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    625c:	4b16      	ldr	r3, [pc, #88]	; (62b8 <usage_fault+0x108>)
    625e:	9302      	str	r3, [sp, #8]
    6260:	2000      	movs	r0, #0
    6262:	9001      	str	r0, [sp, #4]
    6264:	9000      	str	r0, [sp, #0]
    6266:	4603      	mov	r3, r0
    6268:	2201      	movs	r2, #1
    626a:	490e      	ldr	r1, [pc, #56]	; (62a4 <usage_fault+0xf4>)
    626c:	f009 f8da 	bl	f424 <z_log_msg2_runtime_create>
    6270:	e7be      	b.n	61f0 <usage_fault+0x40>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    6272:	4b12      	ldr	r3, [pc, #72]	; (62bc <usage_fault+0x10c>)
    6274:	9302      	str	r3, [sp, #8]
    6276:	2000      	movs	r0, #0
    6278:	9001      	str	r0, [sp, #4]
    627a:	9000      	str	r0, [sp, #0]
    627c:	4603      	mov	r3, r0
    627e:	2201      	movs	r2, #1
    6280:	4908      	ldr	r1, [pc, #32]	; (62a4 <usage_fault+0xf4>)
    6282:	f009 f8cf 	bl	f424 <z_log_msg2_runtime_create>
    6286:	e7b8      	b.n	61fa <usage_fault+0x4a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    6288:	4b0d      	ldr	r3, [pc, #52]	; (62c0 <usage_fault+0x110>)
    628a:	9302      	str	r3, [sp, #8]
    628c:	2000      	movs	r0, #0
    628e:	9001      	str	r0, [sp, #4]
    6290:	9000      	str	r0, [sp, #0]
    6292:	4603      	mov	r3, r0
    6294:	2201      	movs	r2, #1
    6296:	4903      	ldr	r1, [pc, #12]	; (62a4 <usage_fault+0xf4>)
    6298:	f009 f8c4 	bl	f424 <z_log_msg2_runtime_create>
    629c:	e7b2      	b.n	6204 <usage_fault+0x54>
    629e:	bf00      	nop
    62a0:	00012044 	.word	0x00012044
    62a4:	00011040 	.word	0x00011040
    62a8:	e000ed00 	.word	0xe000ed00
    62ac:	0001205c 	.word	0x0001205c
    62b0:	00012070 	.word	0x00012070
    62b4:	0001208c 	.word	0x0001208c
    62b8:	000120ac 	.word	0x000120ac
    62bc:	000120d4 	.word	0x000120d4
    62c0:	000120f0 	.word	0x000120f0

000062c4 <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    62c4:	b500      	push	{lr}
    62c6:	b085      	sub	sp, #20
	*recoverable = false;
    62c8:	2000      	movs	r0, #0
    62ca:	7008      	strb	r0, [r1, #0]

	PR_FAULT_INFO(
    62cc:	4b05      	ldr	r3, [pc, #20]	; (62e4 <debug_monitor+0x20>)
    62ce:	9302      	str	r3, [sp, #8]
    62d0:	9001      	str	r0, [sp, #4]
    62d2:	9000      	str	r0, [sp, #0]
    62d4:	4603      	mov	r3, r0
    62d6:	2201      	movs	r2, #1
    62d8:	4903      	ldr	r1, [pc, #12]	; (62e8 <debug_monitor+0x24>)
    62da:	f009 f8a3 	bl	f424 <z_log_msg2_runtime_create>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    62de:	b005      	add	sp, #20
    62e0:	f85d fb04 	ldr.w	pc, [sp], #4
    62e4:	0001211c 	.word	0x0001211c
    62e8:	00011040 	.word	0x00011040

000062ec <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    62ec:	b500      	push	{lr}
    62ee:	b087      	sub	sp, #28
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    62f0:	290f      	cmp	r1, #15
    62f2:	dc10      	bgt.n	6316 <reserved_exception+0x2a>
    62f4:	4b09      	ldr	r3, [pc, #36]	; (631c <reserved_exception+0x30>)
    62f6:	3910      	subs	r1, #16
    62f8:	9104      	str	r1, [sp, #16]
    62fa:	9303      	str	r3, [sp, #12]
    62fc:	4b08      	ldr	r3, [pc, #32]	; (6320 <reserved_exception+0x34>)
    62fe:	9302      	str	r3, [sp, #8]
    6300:	2000      	movs	r0, #0
    6302:	9001      	str	r0, [sp, #4]
    6304:	9000      	str	r0, [sp, #0]
    6306:	4603      	mov	r3, r0
    6308:	2201      	movs	r2, #1
    630a:	4906      	ldr	r1, [pc, #24]	; (6324 <reserved_exception+0x38>)
    630c:	f009 f88a 	bl	f424 <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    6310:	b007      	add	sp, #28
    6312:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
    6316:	4b04      	ldr	r3, [pc, #16]	; (6328 <reserved_exception+0x3c>)
    6318:	e7ed      	b.n	62f6 <reserved_exception+0xa>
    631a:	bf00      	nop
    631c:	0001215c 	.word	0x0001215c
    6320:	00012174 	.word	0x00012174
    6324:	00011040 	.word	0x00011040
    6328:	00012140 	.word	0x00012140

0000632c <mem_manage_fault>:
{
    632c:	b5f0      	push	{r4, r5, r6, r7, lr}
    632e:	b085      	sub	sp, #20
    6330:	4605      	mov	r5, r0
    6332:	460c      	mov	r4, r1
    6334:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    6336:	4b5f      	ldr	r3, [pc, #380]	; (64b4 <mem_manage_fault+0x188>)
    6338:	9302      	str	r3, [sp, #8]
    633a:	2000      	movs	r0, #0
    633c:	9001      	str	r0, [sp, #4]
    633e:	9000      	str	r0, [sp, #0]
    6340:	4603      	mov	r3, r0
    6342:	2201      	movs	r2, #1
    6344:	495c      	ldr	r1, [pc, #368]	; (64b8 <mem_manage_fault+0x18c>)
    6346:	f009 f86d 	bl	f424 <z_log_msg2_runtime_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    634a:	4b5c      	ldr	r3, [pc, #368]	; (64bc <mem_manage_fault+0x190>)
    634c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    634e:	f013 0f10 	tst.w	r3, #16
    6352:	d13b      	bne.n	63cc <mem_manage_fault+0xa0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    6354:	4b59      	ldr	r3, [pc, #356]	; (64bc <mem_manage_fault+0x190>)
    6356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6358:	f013 0f08 	tst.w	r3, #8
    635c:	d141      	bne.n	63e2 <mem_manage_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    635e:	4b57      	ldr	r3, [pc, #348]	; (64bc <mem_manage_fault+0x190>)
    6360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6362:	f013 0f02 	tst.w	r3, #2
    6366:	d147      	bne.n	63f8 <mem_manage_fault+0xcc>
	uint32_t mmfar = -EINVAL;
    6368:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    636c:	4b53      	ldr	r3, [pc, #332]	; (64bc <mem_manage_fault+0x190>)
    636e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6370:	f013 0f01 	tst.w	r3, #1
    6374:	d166      	bne.n	6444 <mem_manage_fault+0x118>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    6376:	4b51      	ldr	r3, [pc, #324]	; (64bc <mem_manage_fault+0x190>)
    6378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    637a:	f013 0f20 	tst.w	r3, #32
    637e:	d16c      	bne.n	645a <mem_manage_fault+0x12e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    6380:	4b4e      	ldr	r3, [pc, #312]	; (64bc <mem_manage_fault+0x190>)
    6382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6384:	f013 0f10 	tst.w	r3, #16
    6388:	d104      	bne.n	6394 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    638a:	4b4c      	ldr	r3, [pc, #304]	; (64bc <mem_manage_fault+0x190>)
    638c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    638e:	f014 0402 	ands.w	r4, r4, #2
    6392:	d004      	beq.n	639e <mem_manage_fault+0x72>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    6394:	4b49      	ldr	r3, [pc, #292]	; (64bc <mem_manage_fault+0x190>)
    6396:	685c      	ldr	r4, [r3, #4]
    6398:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    639c:	d168      	bne.n	6470 <mem_manage_fault+0x144>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    639e:	4b47      	ldr	r3, [pc, #284]	; (64bc <mem_manage_fault+0x190>)
    63a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63a2:	f013 0f20 	tst.w	r3, #32
    63a6:	d004      	beq.n	63b2 <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    63a8:	4a44      	ldr	r2, [pc, #272]	; (64bc <mem_manage_fault+0x190>)
    63aa:	6a53      	ldr	r3, [r2, #36]	; 0x24
    63ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    63b0:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    63b2:	4a42      	ldr	r2, [pc, #264]	; (64bc <mem_manage_fault+0x190>)
    63b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    63b6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    63ba:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    63bc:	2101      	movs	r1, #1
    63be:	4628      	mov	r0, r5
    63c0:	f009 f82e 	bl	f420 <memory_fault_recoverable>
    63c4:	7030      	strb	r0, [r6, #0]
}
    63c6:	4620      	mov	r0, r4
    63c8:	b005      	add	sp, #20
    63ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    63cc:	4b3c      	ldr	r3, [pc, #240]	; (64c0 <mem_manage_fault+0x194>)
    63ce:	9302      	str	r3, [sp, #8]
    63d0:	2000      	movs	r0, #0
    63d2:	9001      	str	r0, [sp, #4]
    63d4:	9000      	str	r0, [sp, #0]
    63d6:	4603      	mov	r3, r0
    63d8:	2201      	movs	r2, #1
    63da:	4937      	ldr	r1, [pc, #220]	; (64b8 <mem_manage_fault+0x18c>)
    63dc:	f009 f822 	bl	f424 <z_log_msg2_runtime_create>
    63e0:	e7b8      	b.n	6354 <mem_manage_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    63e2:	4b38      	ldr	r3, [pc, #224]	; (64c4 <mem_manage_fault+0x198>)
    63e4:	9302      	str	r3, [sp, #8]
    63e6:	2000      	movs	r0, #0
    63e8:	9001      	str	r0, [sp, #4]
    63ea:	9000      	str	r0, [sp, #0]
    63ec:	4603      	mov	r3, r0
    63ee:	2201      	movs	r2, #1
    63f0:	4931      	ldr	r1, [pc, #196]	; (64b8 <mem_manage_fault+0x18c>)
    63f2:	f009 f817 	bl	f424 <z_log_msg2_runtime_create>
    63f6:	e7b2      	b.n	635e <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Data Access Violation");
    63f8:	4b33      	ldr	r3, [pc, #204]	; (64c8 <mem_manage_fault+0x19c>)
    63fa:	9302      	str	r3, [sp, #8]
    63fc:	2000      	movs	r0, #0
    63fe:	9001      	str	r0, [sp, #4]
    6400:	9000      	str	r0, [sp, #0]
    6402:	4603      	mov	r3, r0
    6404:	2201      	movs	r2, #1
    6406:	492c      	ldr	r1, [pc, #176]	; (64b8 <mem_manage_fault+0x18c>)
    6408:	f009 f80c 	bl	f424 <z_log_msg2_runtime_create>
		uint32_t temp = SCB->MMFAR;
    640c:	4b2b      	ldr	r3, [pc, #172]	; (64bc <mem_manage_fault+0x190>)
    640e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    6410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6412:	f013 0f80 	tst.w	r3, #128	; 0x80
    6416:	d102      	bne.n	641e <mem_manage_fault+0xf2>
	uint32_t mmfar = -EINVAL;
    6418:	f06f 0715 	mvn.w	r7, #21
    641c:	e7a6      	b.n	636c <mem_manage_fault+0x40>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    641e:	9703      	str	r7, [sp, #12]
    6420:	4b2a      	ldr	r3, [pc, #168]	; (64cc <mem_manage_fault+0x1a0>)
    6422:	9302      	str	r3, [sp, #8]
    6424:	2000      	movs	r0, #0
    6426:	9001      	str	r0, [sp, #4]
    6428:	9000      	str	r0, [sp, #0]
    642a:	4603      	mov	r3, r0
    642c:	2201      	movs	r2, #1
    642e:	4922      	ldr	r1, [pc, #136]	; (64b8 <mem_manage_fault+0x18c>)
    6430:	f008 fff8 	bl	f424 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    6434:	2c00      	cmp	r4, #0
    6436:	d099      	beq.n	636c <mem_manage_fault+0x40>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    6438:	4a20      	ldr	r2, [pc, #128]	; (64bc <mem_manage_fault+0x190>)
    643a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    643c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6440:	6293      	str	r3, [r2, #40]	; 0x28
    6442:	e793      	b.n	636c <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Instruction Access Violation");
    6444:	4b22      	ldr	r3, [pc, #136]	; (64d0 <mem_manage_fault+0x1a4>)
    6446:	9302      	str	r3, [sp, #8]
    6448:	2000      	movs	r0, #0
    644a:	9001      	str	r0, [sp, #4]
    644c:	9000      	str	r0, [sp, #0]
    644e:	4603      	mov	r3, r0
    6450:	2201      	movs	r2, #1
    6452:	4919      	ldr	r1, [pc, #100]	; (64b8 <mem_manage_fault+0x18c>)
    6454:	f008 ffe6 	bl	f424 <z_log_msg2_runtime_create>
    6458:	e78d      	b.n	6376 <mem_manage_fault+0x4a>
		PR_FAULT_INFO(
    645a:	4b1e      	ldr	r3, [pc, #120]	; (64d4 <mem_manage_fault+0x1a8>)
    645c:	9302      	str	r3, [sp, #8]
    645e:	2000      	movs	r0, #0
    6460:	9001      	str	r0, [sp, #4]
    6462:	9000      	str	r0, [sp, #0]
    6464:	4603      	mov	r3, r0
    6466:	2201      	movs	r2, #1
    6468:	4913      	ldr	r1, [pc, #76]	; (64b8 <mem_manage_fault+0x18c>)
    646a:	f008 ffdb 	bl	f424 <z_log_msg2_runtime_create>
    646e:	e787      	b.n	6380 <mem_manage_fault+0x54>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    6470:	4629      	mov	r1, r5
    6472:	4638      	mov	r0, r7
    6474:	f7ff fd88 	bl	5f88 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    6478:	4607      	mov	r7, r0
    647a:	b9b0      	cbnz	r0, 64aa <mem_manage_fault+0x17e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    647c:	4b0f      	ldr	r3, [pc, #60]	; (64bc <mem_manage_fault+0x190>)
    647e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    6480:	f014 0410 	ands.w	r4, r4, #16
    6484:	d08b      	beq.n	639e <mem_manage_fault+0x72>
    6486:	4c14      	ldr	r4, [pc, #80]	; (64d8 <mem_manage_fault+0x1ac>)
    6488:	f240 1349 	movw	r3, #329	; 0x149
    648c:	4622      	mov	r2, r4
    648e:	4913      	ldr	r1, [pc, #76]	; (64dc <mem_manage_fault+0x1b0>)
    6490:	4813      	ldr	r0, [pc, #76]	; (64e0 <mem_manage_fault+0x1b4>)
    6492:	f008 fee4 	bl	f25e <assert_print>
    6496:	4813      	ldr	r0, [pc, #76]	; (64e4 <mem_manage_fault+0x1b8>)
    6498:	f008 fee1 	bl	f25e <assert_print>
    649c:	f240 1149 	movw	r1, #329	; 0x149
    64a0:	4620      	mov	r0, r4
    64a2:	f008 fed5 	bl	f250 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    64a6:	463c      	mov	r4, r7
    64a8:	e779      	b.n	639e <mem_manage_fault+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    64aa:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    64ae:	2402      	movs	r4, #2
    64b0:	e775      	b.n	639e <mem_manage_fault+0x72>
    64b2:	bf00      	nop
    64b4:	00012188 	.word	0x00012188
    64b8:	00011040 	.word	0x00011040
    64bc:	e000ed00 	.word	0xe000ed00
    64c0:	000121a0 	.word	0x000121a0
    64c4:	00011f98 	.word	0x00011f98
    64c8:	000121d4 	.word	0x000121d4
    64cc:	000121ec 	.word	0x000121ec
    64d0:	00012204 	.word	0x00012204
    64d4:	00012014 	.word	0x00012014
    64d8:	00012224 	.word	0x00012224
    64dc:	00012260 	.word	0x00012260
    64e0:	0001160c 	.word	0x0001160c
    64e4:	000122ac 	.word	0x000122ac

000064e8 <hard_fault>:
{
    64e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    64ea:	b085      	sub	sp, #20
    64ec:	4607      	mov	r7, r0
    64ee:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    64f0:	4b4b      	ldr	r3, [pc, #300]	; (6620 <hard_fault+0x138>)
    64f2:	9302      	str	r3, [sp, #8]
    64f4:	2400      	movs	r4, #0
    64f6:	9401      	str	r4, [sp, #4]
    64f8:	9400      	str	r4, [sp, #0]
    64fa:	4623      	mov	r3, r4
    64fc:	2201      	movs	r2, #1
    64fe:	4949      	ldr	r1, [pc, #292]	; (6624 <hard_fault+0x13c>)
    6500:	4620      	mov	r0, r4
    6502:	f008 ff8f 	bl	f424 <z_log_msg2_runtime_create>
	*recoverable = false;
    6506:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6508:	4b47      	ldr	r3, [pc, #284]	; (6628 <hard_fault+0x140>)
    650a:	6add      	ldr	r5, [r3, #44]	; 0x2c
    650c:	f015 0502 	ands.w	r5, r5, #2
    6510:	d12d      	bne.n	656e <hard_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    6512:	4b45      	ldr	r3, [pc, #276]	; (6628 <hard_fault+0x140>)
    6514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6516:	2b00      	cmp	r3, #0
    6518:	db36      	blt.n	6588 <hard_fault+0xa0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    651a:	4b43      	ldr	r3, [pc, #268]	; (6628 <hard_fault+0x140>)
    651c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    651e:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    6522:	d06b      	beq.n	65fc <hard_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    6524:	4b41      	ldr	r3, [pc, #260]	; (662c <hard_fault+0x144>)
    6526:	9302      	str	r3, [sp, #8]
    6528:	2000      	movs	r0, #0
    652a:	9001      	str	r0, [sp, #4]
    652c:	9000      	str	r0, [sp, #0]
    652e:	4603      	mov	r3, r0
    6530:	2201      	movs	r2, #1
    6532:	493c      	ldr	r1, [pc, #240]	; (6624 <hard_fault+0x13c>)
    6534:	f008 ff76 	bl	f424 <z_log_msg2_runtime_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    6538:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    653a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    653e:	f64d 7302 	movw	r3, #57090	; 0xdf02
    6542:	429a      	cmp	r2, r3
    6544:	d02c      	beq.n	65a0 <hard_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
    6546:	4b38      	ldr	r3, [pc, #224]	; (6628 <hard_fault+0x140>)
    6548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    654c:	2b00      	cmp	r3, #0
    654e:	d135      	bne.n	65bc <hard_fault+0xd4>
		} else if (SCB_BFSR != 0) {
    6550:	4b35      	ldr	r3, [pc, #212]	; (6628 <hard_fault+0x140>)
    6552:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    6556:	2b00      	cmp	r3, #0
    6558:	d137      	bne.n	65ca <hard_fault+0xe2>
		} else if (SCB_UFSR != 0) {
    655a:	4b33      	ldr	r3, [pc, #204]	; (6628 <hard_fault+0x140>)
    655c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    655e:	b29b      	uxth	r3, r3
    6560:	2b00      	cmp	r3, #0
    6562:	d039      	beq.n	65d8 <hard_fault+0xf0>
			reason = usage_fault(esf);
    6564:	4638      	mov	r0, r7
    6566:	f7ff fe23 	bl	61b0 <usage_fault>
    656a:	4604      	mov	r4, r0
    656c:	e009      	b.n	6582 <hard_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    656e:	4b30      	ldr	r3, [pc, #192]	; (6630 <hard_fault+0x148>)
    6570:	9302      	str	r3, [sp, #8]
    6572:	9401      	str	r4, [sp, #4]
    6574:	9400      	str	r4, [sp, #0]
    6576:	4623      	mov	r3, r4
    6578:	2201      	movs	r2, #1
    657a:	492a      	ldr	r1, [pc, #168]	; (6624 <hard_fault+0x13c>)
    657c:	4620      	mov	r0, r4
    657e:	f008 ff51 	bl	f424 <z_log_msg2_runtime_create>
}
    6582:	4620      	mov	r0, r4
    6584:	b005      	add	sp, #20
    6586:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
    6588:	4b2a      	ldr	r3, [pc, #168]	; (6634 <hard_fault+0x14c>)
    658a:	9302      	str	r3, [sp, #8]
    658c:	2000      	movs	r0, #0
    658e:	9001      	str	r0, [sp, #4]
    6590:	9000      	str	r0, [sp, #0]
    6592:	4603      	mov	r3, r0
    6594:	2201      	movs	r2, #1
    6596:	4923      	ldr	r1, [pc, #140]	; (6624 <hard_fault+0x13c>)
    6598:	f008 ff44 	bl	f424 <z_log_msg2_runtime_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    659c:	462c      	mov	r4, r5
    659e:	e7f0      	b.n	6582 <hard_fault+0x9a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    65a0:	683b      	ldr	r3, [r7, #0]
    65a2:	9303      	str	r3, [sp, #12]
    65a4:	4b24      	ldr	r3, [pc, #144]	; (6638 <hard_fault+0x150>)
    65a6:	9302      	str	r3, [sp, #8]
    65a8:	2000      	movs	r0, #0
    65aa:	9001      	str	r0, [sp, #4]
    65ac:	9000      	str	r0, [sp, #0]
    65ae:	4603      	mov	r3, r0
    65b0:	2201      	movs	r2, #1
    65b2:	491c      	ldr	r1, [pc, #112]	; (6624 <hard_fault+0x13c>)
    65b4:	f008 ff36 	bl	f424 <z_log_msg2_runtime_create>
			reason = esf->basic.r0;
    65b8:	683c      	ldr	r4, [r7, #0]
    65ba:	e7e2      	b.n	6582 <hard_fault+0x9a>
			reason = mem_manage_fault(esf, 1, recoverable);
    65bc:	4632      	mov	r2, r6
    65be:	2101      	movs	r1, #1
    65c0:	4638      	mov	r0, r7
    65c2:	f7ff feb3 	bl	632c <mem_manage_fault>
    65c6:	4604      	mov	r4, r0
    65c8:	e7db      	b.n	6582 <hard_fault+0x9a>
			reason = bus_fault(esf, 1, recoverable);
    65ca:	4632      	mov	r2, r6
    65cc:	2101      	movs	r1, #1
    65ce:	4638      	mov	r0, r7
    65d0:	f7ff fd46 	bl	6060 <bus_fault>
    65d4:	4604      	mov	r4, r0
    65d6:	e7d4      	b.n	6582 <hard_fault+0x9a>
			__ASSERT(0,
    65d8:	4c18      	ldr	r4, [pc, #96]	; (663c <hard_fault+0x154>)
    65da:	f240 23cd 	movw	r3, #717	; 0x2cd
    65de:	4622      	mov	r2, r4
    65e0:	4917      	ldr	r1, [pc, #92]	; (6640 <hard_fault+0x158>)
    65e2:	4818      	ldr	r0, [pc, #96]	; (6644 <hard_fault+0x15c>)
    65e4:	f008 fe3b 	bl	f25e <assert_print>
    65e8:	4817      	ldr	r0, [pc, #92]	; (6648 <hard_fault+0x160>)
    65ea:	f008 fe38 	bl	f25e <assert_print>
    65ee:	f240 21cd 	movw	r1, #717	; 0x2cd
    65f2:	4620      	mov	r0, r4
    65f4:	f008 fe2c 	bl	f250 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    65f8:	462c      	mov	r4, r5
    65fa:	e7c2      	b.n	6582 <hard_fault+0x9a>
		__ASSERT(0,
    65fc:	4d0f      	ldr	r5, [pc, #60]	; (663c <hard_fault+0x154>)
    65fe:	f240 23d1 	movw	r3, #721	; 0x2d1
    6602:	462a      	mov	r2, r5
    6604:	490e      	ldr	r1, [pc, #56]	; (6640 <hard_fault+0x158>)
    6606:	480f      	ldr	r0, [pc, #60]	; (6644 <hard_fault+0x15c>)
    6608:	f008 fe29 	bl	f25e <assert_print>
    660c:	480f      	ldr	r0, [pc, #60]	; (664c <hard_fault+0x164>)
    660e:	f008 fe26 	bl	f25e <assert_print>
    6612:	f240 21d1 	movw	r1, #721	; 0x2d1
    6616:	4628      	mov	r0, r5
    6618:	f008 fe1a 	bl	f250 <assert_post_action>
	return reason;
    661c:	e7b1      	b.n	6582 <hard_fault+0x9a>
    661e:	bf00      	nop
    6620:	000122d0 	.word	0x000122d0
    6624:	00011040 	.word	0x00011040
    6628:	e000ed00 	.word	0xe000ed00
    662c:	0001231c 	.word	0x0001231c
    6630:	000122e8 	.word	0x000122e8
    6634:	0001230c 	.word	0x0001230c
    6638:	0001233c 	.word	0x0001233c
    663c:	00012224 	.word	0x00012224
    6640:	00011cc8 	.word	0x00011cc8
    6644:	0001160c 	.word	0x0001160c
    6648:	00012358 	.word	0x00012358
    664c:	0001237c 	.word	0x0001237c

00006650 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    6650:	b5f0      	push	{r4, r5, r6, r7, lr}
    6652:	b08f      	sub	sp, #60	; 0x3c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6654:	4b35      	ldr	r3, [pc, #212]	; (672c <z_arm_fault+0xdc>)
    6656:	685d      	ldr	r5, [r3, #4]
    6658:	f3c5 0508 	ubfx	r5, r5, #0, #9
    665c:	2300      	movs	r3, #0
    665e:	f383 8811 	msr	BASEPRI, r3
    6662:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    6666:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    666a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    666e:	d125      	bne.n	66bc <z_arm_fault+0x6c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    6670:	f002 030c 	and.w	r3, r2, #12
    6674:	2b08      	cmp	r3, #8
    6676:	d011      	beq.n	669c <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    6678:	f012 0f08 	tst.w	r2, #8
    667c:	d01b      	beq.n	66b6 <z_arm_fault+0x66>
			ptr_esf =  (z_arch_esf_t *)psp;
    667e:	460c      	mov	r4, r1
	*nested_exc = false;
    6680:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    6682:	b1f4      	cbz	r4, 66c2 <z_arm_fault+0x72>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    6684:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    6688:	4629      	mov	r1, r5
    668a:	4620      	mov	r0, r4
    668c:	f008 fed9 	bl	f442 <fault_handle>
    6690:	4605      	mov	r5, r0
	if (recoverable) {
    6692:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    6696:	b32b      	cbz	r3, 66e4 <z_arm_fault+0x94>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    6698:	b00f      	add	sp, #60	; 0x3c
    669a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    669c:	4b24      	ldr	r3, [pc, #144]	; (6730 <z_arm_fault+0xe0>)
    669e:	9302      	str	r3, [sp, #8]
    66a0:	2400      	movs	r4, #0
    66a2:	9401      	str	r4, [sp, #4]
    66a4:	9400      	str	r4, [sp, #0]
    66a6:	4623      	mov	r3, r4
    66a8:	2201      	movs	r2, #1
    66aa:	4922      	ldr	r1, [pc, #136]	; (6734 <z_arm_fault+0xe4>)
    66ac:	4620      	mov	r0, r4
    66ae:	f008 feb9 	bl	f424 <z_log_msg2_runtime_create>
	*nested_exc = false;
    66b2:	4626      	mov	r6, r4
		return NULL;
    66b4:	e7e5      	b.n	6682 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    66b6:	4604      	mov	r4, r0
			*nested_exc = true;
    66b8:	2601      	movs	r6, #1
    66ba:	e7e2      	b.n	6682 <z_arm_fault+0x32>
	*nested_exc = false;
    66bc:	2600      	movs	r6, #0
		return NULL;
    66be:	4634      	mov	r4, r6
    66c0:	e7df      	b.n	6682 <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
    66c2:	4f1d      	ldr	r7, [pc, #116]	; (6738 <z_arm_fault+0xe8>)
    66c4:	f240 33fb 	movw	r3, #1019	; 0x3fb
    66c8:	463a      	mov	r2, r7
    66ca:	491c      	ldr	r1, [pc, #112]	; (673c <z_arm_fault+0xec>)
    66cc:	481c      	ldr	r0, [pc, #112]	; (6740 <z_arm_fault+0xf0>)
    66ce:	f008 fdc6 	bl	f25e <assert_print>
    66d2:	481c      	ldr	r0, [pc, #112]	; (6744 <z_arm_fault+0xf4>)
    66d4:	f008 fdc3 	bl	f25e <assert_print>
    66d8:	f240 31fb 	movw	r1, #1019	; 0x3fb
    66dc:	4638      	mov	r0, r7
    66de:	f008 fdb7 	bl	f250 <assert_post_action>
    66e2:	e7cf      	b.n	6684 <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    66e4:	f10d 0c14 	add.w	ip, sp, #20
    66e8:	6820      	ldr	r0, [r4, #0]
    66ea:	6861      	ldr	r1, [r4, #4]
    66ec:	68a2      	ldr	r2, [r4, #8]
    66ee:	68e3      	ldr	r3, [r4, #12]
    66f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    66f4:	6920      	ldr	r0, [r4, #16]
    66f6:	6961      	ldr	r1, [r4, #20]
    66f8:	69a2      	ldr	r2, [r4, #24]
    66fa:	69e3      	ldr	r3, [r4, #28]
    66fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
    6700:	b146      	cbz	r6, 6714 <z_arm_fault+0xc4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    6702:	f3c3 0208 	ubfx	r2, r3, #0, #9
    6706:	b95a      	cbnz	r2, 6720 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    6708:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    670c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    6710:	930c      	str	r3, [sp, #48]	; 0x30
    6712:	e005      	b.n	6720 <z_arm_fault+0xd0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6714:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6716:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    671a:	f023 0301 	bic.w	r3, r3, #1
    671e:	930c      	str	r3, [sp, #48]	; 0x30
	z_arm_fatal_error(reason, &esf_copy);
    6720:	a905      	add	r1, sp, #20
    6722:	4628      	mov	r0, r5
    6724:	f008 fe5e 	bl	f3e4 <z_arm_fatal_error>
    6728:	e7b6      	b.n	6698 <z_arm_fault+0x48>
    672a:	bf00      	nop
    672c:	e000ed00 	.word	0xe000ed00
    6730:	000123ac 	.word	0x000123ac
    6734:	00011040 	.word	0x00011040
    6738:	00012224 	.word	0x00012224
    673c:	000123d8 	.word	0x000123d8
    6740:	0001160c 	.word	0x0001160c
    6744:	000123ec 	.word	0x000123ec

00006748 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    6748:	4a02      	ldr	r2, [pc, #8]	; (6754 <z_arm_fault_init+0xc>)
    674a:	6953      	ldr	r3, [r2, #20]
    674c:	f043 0310 	orr.w	r3, r3, #16
    6750:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    6752:	4770      	bx	lr
    6754:	e000ed00 	.word	0xe000ed00

00006758 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6758:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    675c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    6760:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    6762:	4672      	mov	r2, lr
	bl z_arm_fault
    6764:	f7ff ff74 	bl	6650 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    6768:	bd01      	pop	{r0, pc}
    676a:	bf00      	nop

0000676c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    676c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    676e:	e006      	b.n	677e <z_arm_interrupt_init+0x12>
    6770:	f002 010f 	and.w	r1, r2, #15
    6774:	4b09      	ldr	r3, [pc, #36]	; (679c <z_arm_interrupt_init+0x30>)
    6776:	440b      	add	r3, r1
    6778:	2120      	movs	r1, #32
    677a:	7619      	strb	r1, [r3, #24]
    677c:	3201      	adds	r2, #1
    677e:	2a2f      	cmp	r2, #47	; 0x2f
    6780:	dc0a      	bgt.n	6798 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    6782:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    6784:	2b00      	cmp	r3, #0
    6786:	dbf3      	blt.n	6770 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6788:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    678c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    6790:	2120      	movs	r1, #32
    6792:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    6796:	e7f1      	b.n	677c <z_arm_interrupt_init+0x10>
	}
}
    6798:	4770      	bx	lr
    679a:	bf00      	nop
    679c:	e000ecfc 	.word	0xe000ecfc

000067a0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    67a0:	2000      	movs	r0, #0
    msr CONTROL, r0
    67a2:	f380 8814 	msr	CONTROL, r0
    isb
    67a6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    67aa:	f00a faf7 	bl	10d9c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    67ae:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    67b0:	490d      	ldr	r1, [pc, #52]	; (67e8 <__start+0x48>)
    str r0, [r1]
    67b2:	6008      	str	r0, [r1, #0]
    dsb
    67b4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    67b8:	480c      	ldr	r0, [pc, #48]	; (67ec <__start+0x4c>)
    msr msp, r0
    67ba:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    67be:	f000 f82d 	bl	681c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    67c2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    67c4:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    67c8:	4809      	ldr	r0, [pc, #36]	; (67f0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    67ca:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    67ce:	1840      	adds	r0, r0, r1
    msr PSP, r0
    67d0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    67d4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    67d8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    67da:	4308      	orrs	r0, r1
    msr CONTROL, r0
    67dc:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    67e0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    67e4:	f7ff fb3a 	bl	5e5c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    67e8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    67ec:	2000efc0 	.word	0x2000efc0
    ldr r0, =z_interrupt_stacks
    67f0:	2000f140 	.word	0x2000f140

000067f4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    67f4:	4b08      	ldr	r3, [pc, #32]	; (6818 <z_arm_clear_arm_mpu_config+0x24>)
    67f6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    67fa:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    67fe:	2300      	movs	r3, #0
    6800:	e006      	b.n	6810 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    6802:	4a05      	ldr	r2, [pc, #20]	; (6818 <z_arm_clear_arm_mpu_config+0x24>)
    6804:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    6808:	2100      	movs	r1, #0
    680a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    680e:	3301      	adds	r3, #1
    6810:	4283      	cmp	r3, r0
    6812:	dbf6      	blt.n	6802 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    6814:	4770      	bx	lr
    6816:	bf00      	nop
    6818:	e000ed00 	.word	0xe000ed00

0000681c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    681c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    681e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    6820:	2400      	movs	r4, #0
    6822:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    6826:	f7ff ffe5 	bl	67f4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    682a:	4623      	mov	r3, r4
    682c:	e008      	b.n	6840 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    682e:	f103 0120 	add.w	r1, r3, #32
    6832:	4a0e      	ldr	r2, [pc, #56]	; (686c <z_arm_init_arch_hw_at_boot+0x50>)
    6834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6838:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    683c:	3301      	adds	r3, #1
    683e:	b2db      	uxtb	r3, r3
    6840:	2b07      	cmp	r3, #7
    6842:	d9f4      	bls.n	682e <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    6844:	2300      	movs	r3, #0
    6846:	e008      	b.n	685a <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    6848:	f103 0160 	add.w	r1, r3, #96	; 0x60
    684c:	4a07      	ldr	r2, [pc, #28]	; (686c <z_arm_init_arch_hw_at_boot+0x50>)
    684e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6852:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    6856:	3301      	adds	r3, #1
    6858:	b2db      	uxtb	r3, r3
    685a:	2b07      	cmp	r3, #7
    685c:	d9f4      	bls.n	6848 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    685e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    6860:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6864:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    6868:	bd10      	pop	{r4, pc}
    686a:	bf00      	nop
    686c:	e000e100 	.word	0xe000e100

00006870 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    6870:	b508      	push	{r3, lr}
	if (_current == thread) {
    6872:	4b0a      	ldr	r3, [pc, #40]	; (689c <z_impl_k_thread_abort+0x2c>)
    6874:	689b      	ldr	r3, [r3, #8]
    6876:	4283      	cmp	r3, r0
    6878:	d002      	beq.n	6880 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    687a:	f005 ff05 	bl	c688 <z_thread_abort>
}
    687e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6880:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    6884:	2b00      	cmp	r3, #0
    6886:	d0f8      	beq.n	687a <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6888:	4b05      	ldr	r3, [pc, #20]	; (68a0 <z_impl_k_thread_abort+0x30>)
    688a:	685a      	ldr	r2, [r3, #4]
    688c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    6890:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    6892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    6894:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    6898:	625a      	str	r2, [r3, #36]	; 0x24
    689a:	e7ee      	b.n	687a <z_impl_k_thread_abort+0xa>
    689c:	2000d4dc 	.word	0x2000d4dc
    68a0:	e000ed00 	.word	0xe000ed00

000068a4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    68a4:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    68a6:	4b03      	ldr	r3, [pc, #12]	; (68b4 <z_arm_configure_static_mpu_regions+0x10>)
    68a8:	4a03      	ldr	r2, [pc, #12]	; (68b8 <z_arm_configure_static_mpu_regions+0x14>)
    68aa:	2101      	movs	r1, #1
    68ac:	4803      	ldr	r0, [pc, #12]	; (68bc <z_arm_configure_static_mpu_regions+0x18>)
    68ae:	f000 f8bb 	bl	6a28 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    68b2:	bd08      	pop	{r3, pc}
    68b4:	20040000 	.word	0x20040000
    68b8:	20000000 	.word	0x20000000
    68bc:	00012430 	.word	0x00012430

000068c0 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    68c0:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    68c2:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    68c6:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    68c8:	4804      	ldr	r0, [pc, #16]	; (68dc <z_arm_configure_dynamic_mpu_regions+0x1c>)
    68ca:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    68cc:	2320      	movs	r3, #32
    68ce:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    68d0:	4b03      	ldr	r3, [pc, #12]	; (68e0 <z_arm_configure_dynamic_mpu_regions+0x20>)
    68d2:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    68d4:	2101      	movs	r1, #1
    68d6:	f000 f8c9 	bl	6a6c <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    68da:	bd08      	pop	{r3, pc}
    68dc:	2000cf74 	.word	0x2000cf74
    68e0:	150b0000 	.word	0x150b0000

000068e4 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    68e4:	4a08      	ldr	r2, [pc, #32]	; (6908 <region_init+0x24>)
    68e6:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    68ea:	680b      	ldr	r3, [r1, #0]
    68ec:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    68f0:	4303      	orrs	r3, r0
    68f2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    68f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    68fa:	688b      	ldr	r3, [r1, #8]
    68fc:	f043 0301 	orr.w	r3, r3, #1
    6900:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    6904:	4770      	bx	lr
    6906:	bf00      	nop
    6908:	e000ed00 	.word	0xe000ed00

0000690c <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    690c:	b510      	push	{r4, lr}
    690e:	b084      	sub	sp, #16
    6910:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    6912:	2807      	cmp	r0, #7
    6914:	d804      	bhi.n	6920 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    6916:	f7ff ffe5 	bl	68e4 <region_init>

	return index;
    691a:	4620      	mov	r0, r4
}
    691c:	b004      	add	sp, #16
    691e:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    6920:	9003      	str	r0, [sp, #12]
    6922:	4b06      	ldr	r3, [pc, #24]	; (693c <region_allocate_and_init+0x30>)
    6924:	9302      	str	r3, [sp, #8]
    6926:	2000      	movs	r0, #0
    6928:	9001      	str	r0, [sp, #4]
    692a:	9000      	str	r0, [sp, #0]
    692c:	4603      	mov	r3, r0
    692e:	2201      	movs	r2, #1
    6930:	4903      	ldr	r1, [pc, #12]	; (6940 <region_allocate_and_init+0x34>)
    6932:	f008 fdbc 	bl	f4ae <z_log_msg2_runtime_create>
		return -EINVAL;
    6936:	f06f 0015 	mvn.w	r0, #21
    693a:	e7ef      	b.n	691c <region_allocate_and_init+0x10>
    693c:	0001243c 	.word	0x0001243c
    6940:	00011038 	.word	0x00011038

00006944 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    6944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6948:	b085      	sub	sp, #20
    694a:	4680      	mov	r8, r0
    694c:	460f      	mov	r7, r1
    694e:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
    6950:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    6952:	2500      	movs	r5, #0
    6954:	e009      	b.n	696a <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    6956:	4621      	mov	r1, r4
    6958:	b2f0      	uxtb	r0, r6
    695a:	f008 fdb7 	bl	f4cc <mpu_configure_region>
    695e:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    6960:	f110 0f16 	cmn.w	r0, #22
    6964:	d01e      	beq.n	69a4 <mpu_configure_regions+0x60>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    6966:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    6968:	3501      	adds	r5, #1
    696a:	42bd      	cmp	r5, r7
    696c:	da1a      	bge.n	69a4 <mpu_configure_regions+0x60>
		if (regions[i].size == 0U) {
    696e:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    6972:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    6976:	6862      	ldr	r2, [r4, #4]
    6978:	2a00      	cmp	r2, #0
    697a:	d0f5      	beq.n	6968 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
    697c:	f1b9 0f00 	cmp.w	r9, #0
    6980:	d0e9      	beq.n	6956 <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
    6982:	4620      	mov	r0, r4
    6984:	f008 fd82 	bl	f48c <mpu_partition_is_valid>
		if (do_sanity_check &&
    6988:	2800      	cmp	r0, #0
    698a:	d1e4      	bne.n	6956 <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
    698c:	9503      	str	r5, [sp, #12]
    698e:	4b07      	ldr	r3, [pc, #28]	; (69ac <mpu_configure_regions+0x68>)
    6990:	9302      	str	r3, [sp, #8]
    6992:	9001      	str	r0, [sp, #4]
    6994:	9000      	str	r0, [sp, #0]
    6996:	4603      	mov	r3, r0
    6998:	2201      	movs	r2, #1
    699a:	4905      	ldr	r1, [pc, #20]	; (69b0 <mpu_configure_regions+0x6c>)
    699c:	f008 fd87 	bl	f4ae <z_log_msg2_runtime_create>
			return -EINVAL;
    69a0:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    69a4:	4630      	mov	r0, r6
    69a6:	b005      	add	sp, #20
    69a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    69ac:	00012464 	.word	0x00012464
    69b0:	00011038 	.word	0x00011038

000069b4 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    69b4:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    69b6:	4c03      	ldr	r4, [pc, #12]	; (69c4 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    69b8:	2301      	movs	r3, #1
    69ba:	7822      	ldrb	r2, [r4, #0]
    69bc:	f7ff ffc2 	bl	6944 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    69c0:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    69c2:	bd10      	pop	{r4, pc}
    69c4:	2000d71c 	.word	0x2000d71c

000069c8 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    69c8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    69ca:	2300      	movs	r3, #0
    69cc:	4a09      	ldr	r2, [pc, #36]	; (69f4 <mpu_configure_dynamic_mpu_regions+0x2c>)
    69ce:	7812      	ldrb	r2, [r2, #0]
    69d0:	f7ff ffb8 	bl	6944 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    69d4:	f110 0f16 	cmn.w	r0, #22
    69d8:	d00a      	beq.n	69f0 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    69da:	4603      	mov	r3, r0
    69dc:	e006      	b.n	69ec <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    69de:	4a06      	ldr	r2, [pc, #24]	; (69f8 <mpu_configure_dynamic_mpu_regions+0x30>)
    69e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    69e4:	2100      	movs	r1, #0
    69e6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    69ea:	3301      	adds	r3, #1
    69ec:	2b07      	cmp	r3, #7
    69ee:	ddf6      	ble.n	69de <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    69f0:	bd08      	pop	{r3, pc}
    69f2:	bf00      	nop
    69f4:	2000d71c 	.word	0x2000d71c
    69f8:	e000ed00 	.word	0xe000ed00

000069fc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    69fc:	4b04      	ldr	r3, [pc, #16]	; (6a10 <arm_core_mpu_enable+0x14>)
    69fe:	2205      	movs	r2, #5
    6a00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    6a04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6a08:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6a0c:	4770      	bx	lr
    6a0e:	bf00      	nop
    6a10:	e000ed00 	.word	0xe000ed00

00006a14 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    6a14:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6a18:	4b02      	ldr	r3, [pc, #8]	; (6a24 <arm_core_mpu_disable+0x10>)
    6a1a:	2200      	movs	r2, #0
    6a1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    6a20:	4770      	bx	lr
    6a22:	bf00      	nop
    6a24:	e000ed00 	.word	0xe000ed00

00006a28 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    6a28:	b538      	push	{r3, r4, r5, lr}
    6a2a:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    6a2c:	f7ff ffc2 	bl	69b4 <mpu_configure_static_mpu_regions>
    6a30:	f110 0f16 	cmn.w	r0, #22
    6a34:	d000      	beq.n	6a38 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    6a36:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    6a38:	4d08      	ldr	r5, [pc, #32]	; (6a5c <arm_core_mpu_configure_static_mpu_regions+0x34>)
    6a3a:	f240 1311 	movw	r3, #273	; 0x111
    6a3e:	462a      	mov	r2, r5
    6a40:	4907      	ldr	r1, [pc, #28]	; (6a60 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    6a42:	4808      	ldr	r0, [pc, #32]	; (6a64 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    6a44:	f008 fc0b 	bl	f25e <assert_print>
    6a48:	4621      	mov	r1, r4
    6a4a:	4807      	ldr	r0, [pc, #28]	; (6a68 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    6a4c:	f008 fc07 	bl	f25e <assert_print>
    6a50:	f240 1111 	movw	r1, #273	; 0x111
    6a54:	4628      	mov	r0, r5
    6a56:	f008 fbfb 	bl	f250 <assert_post_action>
}
    6a5a:	e7ec      	b.n	6a36 <arm_core_mpu_configure_static_mpu_regions+0xe>
    6a5c:	00012488 	.word	0x00012488
    6a60:	00011cc8 	.word	0x00011cc8
    6a64:	0001160c 	.word	0x0001160c
    6a68:	000124c0 	.word	0x000124c0

00006a6c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    6a6c:	b538      	push	{r3, r4, r5, lr}
    6a6e:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    6a70:	f7ff ffaa 	bl	69c8 <mpu_configure_dynamic_mpu_regions>
    6a74:	f110 0f16 	cmn.w	r0, #22
    6a78:	d000      	beq.n	6a7c <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    6a7a:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    6a7c:	4d08      	ldr	r5, [pc, #32]	; (6aa0 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    6a7e:	f44f 7398 	mov.w	r3, #304	; 0x130
    6a82:	462a      	mov	r2, r5
    6a84:	4907      	ldr	r1, [pc, #28]	; (6aa4 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    6a86:	4808      	ldr	r0, [pc, #32]	; (6aa8 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    6a88:	f008 fbe9 	bl	f25e <assert_print>
    6a8c:	4621      	mov	r1, r4
    6a8e:	4807      	ldr	r0, [pc, #28]	; (6aac <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    6a90:	f008 fbe5 	bl	f25e <assert_print>
    6a94:	f44f 7198 	mov.w	r1, #304	; 0x130
    6a98:	4628      	mov	r0, r5
    6a9a:	f008 fbd9 	bl	f250 <assert_post_action>
}
    6a9e:	e7ec      	b.n	6a7a <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    6aa0:	00012488 	.word	0x00012488
    6aa4:	00011cc8 	.word	0x00011cc8
    6aa8:	0001160c 	.word	0x0001160c
    6aac:	000124ec 	.word	0x000124ec

00006ab0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    6ab0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    6ab2:	4b24      	ldr	r3, [pc, #144]	; (6b44 <z_arm_mpu_init+0x94>)
    6ab4:	681d      	ldr	r5, [r3, #0]
    6ab6:	2d08      	cmp	r5, #8
    6ab8:	d803      	bhi.n	6ac2 <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    6aba:	f7ff ffab 	bl	6a14 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6abe:	2400      	movs	r4, #0
    6ac0:	e01e      	b.n	6b00 <z_arm_mpu_init+0x50>
		__ASSERT(0,
    6ac2:	4c21      	ldr	r4, [pc, #132]	; (6b48 <z_arm_mpu_init+0x98>)
    6ac4:	f44f 73a4 	mov.w	r3, #328	; 0x148
    6ac8:	4622      	mov	r2, r4
    6aca:	4920      	ldr	r1, [pc, #128]	; (6b4c <z_arm_mpu_init+0x9c>)
    6acc:	4820      	ldr	r0, [pc, #128]	; (6b50 <z_arm_mpu_init+0xa0>)
    6ace:	f008 fbc6 	bl	f25e <assert_print>
    6ad2:	2208      	movs	r2, #8
    6ad4:	4629      	mov	r1, r5
    6ad6:	481f      	ldr	r0, [pc, #124]	; (6b54 <z_arm_mpu_init+0xa4>)
    6ad8:	f008 fbc1 	bl	f25e <assert_print>
    6adc:	f44f 71a4 	mov.w	r1, #328	; 0x148
    6ae0:	4620      	mov	r0, r4
    6ae2:	f008 fbb5 	bl	f250 <assert_post_action>
		return -1;
    6ae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6aea:	e017      	b.n	6b1c <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    6aec:	4b15      	ldr	r3, [pc, #84]	; (6b44 <z_arm_mpu_init+0x94>)
    6aee:	6859      	ldr	r1, [r3, #4]
    6af0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    6af4:	0093      	lsls	r3, r2, #2
    6af6:	4419      	add	r1, r3
    6af8:	4620      	mov	r0, r4
    6afa:	f7ff fef3 	bl	68e4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6afe:	3401      	adds	r4, #1
    6b00:	42a5      	cmp	r5, r4
    6b02:	d8f3      	bhi.n	6aec <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    6b04:	4b14      	ldr	r3, [pc, #80]	; (6b58 <z_arm_mpu_init+0xa8>)
    6b06:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    6b08:	f7ff ff78 	bl	69fc <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    6b0c:	4b13      	ldr	r3, [pc, #76]	; (6b5c <z_arm_mpu_init+0xac>)
    6b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    6b12:	f3c3 2307 	ubfx	r3, r3, #8, #8
    6b16:	2b08      	cmp	r3, #8
    6b18:	d101      	bne.n	6b1e <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    6b1a:	2000      	movs	r0, #0
}
    6b1c:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    6b1e:	4c0a      	ldr	r4, [pc, #40]	; (6b48 <z_arm_mpu_init+0x98>)
    6b20:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    6b24:	4622      	mov	r2, r4
    6b26:	490e      	ldr	r1, [pc, #56]	; (6b60 <z_arm_mpu_init+0xb0>)
    6b28:	4809      	ldr	r0, [pc, #36]	; (6b50 <z_arm_mpu_init+0xa0>)
    6b2a:	f008 fb98 	bl	f25e <assert_print>
    6b2e:	480d      	ldr	r0, [pc, #52]	; (6b64 <z_arm_mpu_init+0xb4>)
    6b30:	f008 fb95 	bl	f25e <assert_print>
    6b34:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    6b38:	4620      	mov	r0, r4
    6b3a:	f008 fb89 	bl	f250 <assert_post_action>
	return 0;
    6b3e:	2000      	movs	r0, #0
    6b40:	e7ec      	b.n	6b1c <z_arm_mpu_init+0x6c>
    6b42:	bf00      	nop
    6b44:	00012754 	.word	0x00012754
    6b48:	00012488 	.word	0x00012488
    6b4c:	00011cc8 	.word	0x00011cc8
    6b50:	0001160c 	.word	0x0001160c
    6b54:	0001251c 	.word	0x0001251c
    6b58:	2000d71c 	.word	0x2000d71c
    6b5c:	e000ed00 	.word	0xe000ed00
    6b60:	00012550 	.word	0x00012550
    6b64:	000125a0 	.word	0x000125a0

00006b68 <malloc_prepare>:

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    6b68:	4b0d      	ldr	r3, [pc, #52]	; (6ba0 <malloc_prepare+0x38>)
    6b6a:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    6b6e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    6b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    6b76:	d301      	bcc.n	6b7c <malloc_prepare+0x14>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    6b78:	2000      	movs	r0, #0
    6b7a:	4770      	bx	lr
{
    6b7c:	b510      	push	{r4, lr}
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    6b7e:	4c09      	ldr	r4, [pc, #36]	; (6ba4 <malloc_prepare+0x3c>)
    6b80:	2381      	movs	r3, #129	; 0x81
    6b82:	4622      	mov	r2, r4
    6b84:	4908      	ldr	r1, [pc, #32]	; (6ba8 <malloc_prepare+0x40>)
    6b86:	4809      	ldr	r0, [pc, #36]	; (6bac <malloc_prepare+0x44>)
    6b88:	f008 fb69 	bl	f25e <assert_print>
    6b8c:	4808      	ldr	r0, [pc, #32]	; (6bb0 <malloc_prepare+0x48>)
    6b8e:	f008 fb66 	bl	f25e <assert_print>
    6b92:	2181      	movs	r1, #129	; 0x81
    6b94:	4620      	mov	r0, r4
    6b96:	f008 fb5b 	bl	f250 <assert_post_action>
}
    6b9a:	2000      	movs	r0, #0
    6b9c:	bd10      	pop	{r4, pc}
    6b9e:	bf00      	nop
    6ba0:	2000fa60 	.word	0x2000fa60
    6ba4:	000125c4 	.word	0x000125c4
    6ba8:	000125f4 	.word	0x000125f4
    6bac:	0001160c 	.word	0x0001160c
    6bb0:	0001263c 	.word	0x0001263c

00006bb4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    6bb4:	4b01      	ldr	r3, [pc, #4]	; (6bbc <__stdout_hook_install+0x8>)
    6bb6:	6018      	str	r0, [r3, #0]
}
    6bb8:	4770      	bx	lr
    6bba:	bf00      	nop
    6bbc:	20004044 	.word	0x20004044

00006bc0 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    6bc0:	b570      	push	{r4, r5, r6, lr}
    6bc2:	4606      	mov	r6, r0
    6bc4:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    6bc6:	2400      	movs	r4, #0
    6bc8:	e000      	b.n	6bcc <z_impl_zephyr_read_stdin+0xc>
    6bca:	3401      	adds	r4, #1
    6bcc:	42ac      	cmp	r4, r5
    6bce:	da08      	bge.n	6be2 <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
    6bd0:	4b05      	ldr	r3, [pc, #20]	; (6be8 <z_impl_zephyr_read_stdin+0x28>)
    6bd2:	681b      	ldr	r3, [r3, #0]
    6bd4:	4798      	blx	r3
    6bd6:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    6bd8:	280a      	cmp	r0, #10
    6bda:	d001      	beq.n	6be0 <z_impl_zephyr_read_stdin+0x20>
    6bdc:	280d      	cmp	r0, #13
    6bde:	d1f4      	bne.n	6bca <z_impl_zephyr_read_stdin+0xa>
			i++;
    6be0:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
    6be2:	4620      	mov	r0, r4
    6be4:	bd70      	pop	{r4, r5, r6, pc}
    6be6:	bf00      	nop
    6be8:	20004040 	.word	0x20004040

00006bec <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    6bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6bee:	4605      	mov	r5, r0
    6bf0:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    6bf2:	2400      	movs	r4, #0
    6bf4:	e004      	b.n	6c00 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
    6bf6:	4b09      	ldr	r3, [pc, #36]	; (6c1c <z_impl_zephyr_write_stdout+0x30>)
    6bf8:	681b      	ldr	r3, [r3, #0]
    6bfa:	7830      	ldrb	r0, [r6, #0]
    6bfc:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    6bfe:	3401      	adds	r4, #1
    6c00:	42bc      	cmp	r4, r7
    6c02:	da08      	bge.n	6c16 <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
    6c04:	192e      	adds	r6, r5, r4
    6c06:	5d2b      	ldrb	r3, [r5, r4]
    6c08:	2b0a      	cmp	r3, #10
    6c0a:	d1f4      	bne.n	6bf6 <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
    6c0c:	4b03      	ldr	r3, [pc, #12]	; (6c1c <z_impl_zephyr_write_stdout+0x30>)
    6c0e:	681b      	ldr	r3, [r3, #0]
    6c10:	200d      	movs	r0, #13
    6c12:	4798      	blx	r3
    6c14:	e7ef      	b.n	6bf6 <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
    6c16:	4638      	mov	r0, r7
    6c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c1a:	bf00      	nop
    6c1c:	20004044 	.word	0x20004044

00006c20 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    6c20:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
    6c22:	2205      	movs	r2, #5
    6c24:	4902      	ldr	r1, [pc, #8]	; (6c30 <_exit+0x10>)
    6c26:	2001      	movs	r0, #1
    6c28:	f008 fc7a 	bl	f520 <_write>
	while (1) {
    6c2c:	e7fe      	b.n	6c2c <_exit+0xc>
    6c2e:	bf00      	nop
    6c30:	000126c4 	.word	0x000126c4

00006c34 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    6c34:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    6c36:	4b08      	ldr	r3, [pc, #32]	; (6c58 <_sbrk+0x24>)
    6c38:	6819      	ldr	r1, [r3, #0]
    6c3a:	4b08      	ldr	r3, [pc, #32]	; (6c5c <_sbrk+0x28>)
    6c3c:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    6c3e:	440a      	add	r2, r1
    6c40:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    6c44:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    6c48:	429a      	cmp	r2, r3
    6c4a:	d202      	bcs.n	6c52 <_sbrk+0x1e>
		heap_sz += count;
    6c4c:	4b02      	ldr	r3, [pc, #8]	; (6c58 <_sbrk+0x24>)
    6c4e:	601a      	str	r2, [r3, #0]
		ret = ptr;
    6c50:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    6c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    6c56:	4770      	bx	lr
    6c58:	2000cf80 	.word	0x2000cf80
    6c5c:	2000fa60 	.word	0x2000fa60

00006c60 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
    6c60:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    6c62:	4604      	mov	r4, r0
    6c64:	b140      	cbz	r0, 6c78 <__retarget_lock_init_recursive+0x18>

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
    6c66:	2014      	movs	r0, #20
    6c68:	f006 fd10 	bl	d68c <malloc>
    6c6c:	6020      	str	r0, [r4, #0]
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
    6c6e:	b188      	cbz	r0, 6c94 <__retarget_lock_init_recursive+0x34>

	k_mutex_init((struct k_mutex *)*lock);
    6c70:	6820      	ldr	r0, [r4, #0]
    6c72:	f009 fcc6 	bl	10602 <z_impl_k_mutex_init>
}
    6c76:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    6c78:	4d0f      	ldr	r5, [pc, #60]	; (6cb8 <__retarget_lock_init_recursive+0x58>)
    6c7a:	f240 1377 	movw	r3, #375	; 0x177
    6c7e:	462a      	mov	r2, r5
    6c80:	490e      	ldr	r1, [pc, #56]	; (6cbc <__retarget_lock_init_recursive+0x5c>)
    6c82:	480f      	ldr	r0, [pc, #60]	; (6cc0 <__retarget_lock_init_recursive+0x60>)
    6c84:	f008 faeb 	bl	f25e <assert_print>
    6c88:	f240 1177 	movw	r1, #375	; 0x177
    6c8c:	4628      	mov	r0, r5
    6c8e:	f008 fadf 	bl	f250 <assert_post_action>
    6c92:	e7e8      	b.n	6c66 <__retarget_lock_init_recursive+0x6>
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
    6c94:	4d08      	ldr	r5, [pc, #32]	; (6cb8 <__retarget_lock_init_recursive+0x58>)
    6c96:	f240 137f 	movw	r3, #383	; 0x17f
    6c9a:	462a      	mov	r2, r5
    6c9c:	4909      	ldr	r1, [pc, #36]	; (6cc4 <__retarget_lock_init_recursive+0x64>)
    6c9e:	4808      	ldr	r0, [pc, #32]	; (6cc0 <__retarget_lock_init_recursive+0x60>)
    6ca0:	f008 fadd 	bl	f25e <assert_print>
    6ca4:	4808      	ldr	r0, [pc, #32]	; (6cc8 <__retarget_lock_init_recursive+0x68>)
    6ca6:	f008 fada 	bl	f25e <assert_print>
    6caa:	f240 117f 	movw	r1, #383	; 0x17f
    6cae:	4628      	mov	r0, r5
    6cb0:	f008 face 	bl	f250 <assert_post_action>
    6cb4:	e7dc      	b.n	6c70 <__retarget_lock_init_recursive+0x10>
    6cb6:	bf00      	nop
    6cb8:	000125c4 	.word	0x000125c4
    6cbc:	000126cc 	.word	0x000126cc
    6cc0:	0001160c 	.word	0x0001160c
    6cc4:	000126e0 	.word	0x000126e0
    6cc8:	00012720 	.word	0x00012720

00006ccc <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    6ccc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    6cce:	4604      	mov	r4, r0
    6cd0:	b138      	cbz	r0, 6ce2 <__retarget_lock_acquire_recursive+0x16>
	return z_impl_k_mutex_lock(mutex, timeout);
    6cd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6cda:	4620      	mov	r0, r4
    6cdc:	f003 ffae 	bl	ac3c <z_impl_k_mutex_lock>
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    6ce0:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    6ce2:	4d07      	ldr	r5, [pc, #28]	; (6d00 <__retarget_lock_acquire_recursive+0x34>)
    6ce4:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    6ce8:	462a      	mov	r2, r5
    6cea:	4906      	ldr	r1, [pc, #24]	; (6d04 <__retarget_lock_acquire_recursive+0x38>)
    6cec:	4806      	ldr	r0, [pc, #24]	; (6d08 <__retarget_lock_acquire_recursive+0x3c>)
    6cee:	f008 fab6 	bl	f25e <assert_print>
    6cf2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    6cf6:	4628      	mov	r0, r5
    6cf8:	f008 faaa 	bl	f250 <assert_post_action>
    6cfc:	e7e9      	b.n	6cd2 <__retarget_lock_acquire_recursive+0x6>
    6cfe:	bf00      	nop
    6d00:	000125c4 	.word	0x000125c4
    6d04:	000126cc 	.word	0x000126cc
    6d08:	0001160c 	.word	0x0001160c

00006d0c <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    6d0c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    6d0e:	4604      	mov	r4, r0
    6d10:	b118      	cbz	r0, 6d1a <__retarget_lock_release_recursive+0xe>
	return z_impl_k_mutex_unlock(mutex);
    6d12:	4620      	mov	r0, r4
    6d14:	f004 f8b2 	bl	ae7c <z_impl_k_mutex_unlock>
	k_mutex_unlock((struct k_mutex *)lock);
}
    6d18:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    6d1a:	4d07      	ldr	r5, [pc, #28]	; (6d38 <__retarget_lock_release_recursive+0x2c>)
    6d1c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    6d20:	462a      	mov	r2, r5
    6d22:	4906      	ldr	r1, [pc, #24]	; (6d3c <__retarget_lock_release_recursive+0x30>)
    6d24:	4806      	ldr	r0, [pc, #24]	; (6d40 <__retarget_lock_release_recursive+0x34>)
    6d26:	f008 fa9a 	bl	f25e <assert_print>
    6d2a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    6d2e:	4628      	mov	r0, r5
    6d30:	f008 fa8e 	bl	f250 <assert_post_action>
    6d34:	e7ed      	b.n	6d12 <__retarget_lock_release_recursive+0x6>
    6d36:	bf00      	nop
    6d38:	000125c4 	.word	0x000125c4
    6d3c:	000126cc 	.word	0x000126cc
    6d40:	0001160c 	.word	0x0001160c

00006d44 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    6d44:	b510      	push	{r4, lr}
	__asm__ volatile(
    6d46:	f04f 0320 	mov.w	r3, #32
    6d4a:	f3ef 8411 	mrs	r4, BASEPRI
    6d4e:	f383 8812 	msr	BASEPRI_MAX, r3
    6d52:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    6d56:	2301      	movs	r3, #1
    6d58:	4a0c      	ldr	r2, [pc, #48]	; (6d8c <nordicsemi_nrf52_init+0x48>)
    6d5a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6d5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6d62:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    6d66:	f008 fbf8 	bl	f55a <nrf52_errata_197>
    6d6a:	b120      	cbz	r0, 6d76 <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    6d6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d70:	2201      	movs	r2, #1
    6d72:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    6d76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d7a:	2201      	movs	r2, #1
    6d7c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    6d80:	f384 8811 	msr	BASEPRI, r4
    6d84:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    6d88:	2000      	movs	r0, #0
    6d8a:	bd10      	pop	{r4, pc}
    6d8c:	4001e000 	.word	0x4001e000

00006d90 <sys_arch_reboot>:
    *p_gpregret = val;
    6d90:	b2c0      	uxtb	r0, r0
    6d92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6d96:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    6d9a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6d9e:	4905      	ldr	r1, [pc, #20]	; (6db4 <sys_arch_reboot+0x24>)
    6da0:	68ca      	ldr	r2, [r1, #12]
    6da2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6da6:	4b04      	ldr	r3, [pc, #16]	; (6db8 <sys_arch_reboot+0x28>)
    6da8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6daa:	60cb      	str	r3, [r1, #12]
    6dac:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    6db0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6db2:	e7fd      	b.n	6db0 <sys_arch_reboot+0x20>
    6db4:	e000ed00 	.word	0xe000ed00
    6db8:	05fa0004 	.word	0x05fa0004

00006dbc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    6dbc:	b130      	cbz	r0, 6dcc <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    6dbe:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    6dc0:	0180      	lsls	r0, r0, #6
    6dc2:	4b03      	ldr	r3, [pc, #12]	; (6dd0 <arch_busy_wait+0x14>)
    6dc4:	f043 0301 	orr.w	r3, r3, #1
    6dc8:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    6dca:	bd08      	pop	{r3, pc}
    6dcc:	4770      	bx	lr
    6dce:	bf00      	nop
    6dd0:	000110f0 	.word	0x000110f0

00006dd4 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    6dd4:	4800      	ldr	r0, [pc, #0]	; (6dd8 <get_hf_flags+0x4>)
    6dd6:	4770      	bx	lr
    6dd8:	2000cfdc 	.word	0x2000cfdc

00006ddc <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    6ddc:	4b01      	ldr	r3, [pc, #4]	; (6de4 <get_subsys+0x8>)
    6dde:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    6de0:	1140      	asrs	r0, r0, #5
    6de2:	4770      	bx	lr
    6de4:	2000cf94 	.word	0x2000cf94

00006de8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6de8:	b530      	push	{r4, r5, lr}
    6dea:	b083      	sub	sp, #12
    6dec:	4605      	mov	r5, r0
    6dee:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6df0:	f7ff fff4 	bl	6ddc <get_subsys>
    6df4:	4601      	mov	r1, r0
    6df6:	2340      	movs	r3, #64	; 0x40
    6df8:	9300      	str	r3, [sp, #0]
    6dfa:	4623      	mov	r3, r4
    6dfc:	4a05      	ldr	r2, [pc, #20]	; (6e14 <onoff_start+0x2c>)
    6dfe:	4806      	ldr	r0, [pc, #24]	; (6e18 <onoff_start+0x30>)
    6e00:	f008 fc3a 	bl	f678 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    6e04:	1e01      	subs	r1, r0, #0
    6e06:	db01      	blt.n	6e0c <onoff_start+0x24>
		notify(mgr, err);
	}
}
    6e08:	b003      	add	sp, #12
    6e0a:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    6e0c:	4628      	mov	r0, r5
    6e0e:	47a0      	blx	r4
}
    6e10:	e7fa      	b.n	6e08 <onoff_start+0x20>
    6e12:	bf00      	nop
    6e14:	0000f6c1 	.word	0x0000f6c1
    6e18:	00010e20 	.word	0x00010e20

00006e1c <generic_hfclk_stop>:
{
    6e1c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6e1e:	4b0a      	ldr	r3, [pc, #40]	; (6e48 <generic_hfclk_stop+0x2c>)
    6e20:	f3bf 8f5b 	dmb	ish
    6e24:	e853 2f00 	ldrex	r2, [r3]
    6e28:	f022 0102 	bic.w	r1, r2, #2
    6e2c:	e843 1000 	strex	r0, r1, [r3]
    6e30:	2800      	cmp	r0, #0
    6e32:	d1f7      	bne.n	6e24 <generic_hfclk_stop+0x8>
    6e34:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    6e38:	f012 0f01 	tst.w	r2, #1
    6e3c:	d000      	beq.n	6e40 <generic_hfclk_stop+0x24>
}
    6e3e:	bd08      	pop	{r3, pc}
	hfclk_stop();
    6e40:	f008 fc50 	bl	f6e4 <hfclk_stop>
    6e44:	e7fb      	b.n	6e3e <generic_hfclk_stop+0x22>
    6e46:	bf00      	nop
    6e48:	2000cfec 	.word	0x2000cfec

00006e4c <get_status>:
{
    6e4c:	b570      	push	{r4, r5, r6, lr}
    6e4e:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    6e50:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6e52:	2c01      	cmp	r4, #1
    6e54:	d807      	bhi.n	6e66 <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6e56:	4621      	mov	r1, r4
    6e58:	4628      	mov	r0, r5
    6e5a:	f008 fba0 	bl	f59e <get_sub_data>
    6e5e:	6880      	ldr	r0, [r0, #8]
}
    6e60:	f000 0007 	and.w	r0, r0, #7
    6e64:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6e66:	4e06      	ldr	r6, [pc, #24]	; (6e80 <get_status+0x34>)
    6e68:	2379      	movs	r3, #121	; 0x79
    6e6a:	4632      	mov	r2, r6
    6e6c:	4905      	ldr	r1, [pc, #20]	; (6e84 <get_status+0x38>)
    6e6e:	4806      	ldr	r0, [pc, #24]	; (6e88 <get_status+0x3c>)
    6e70:	f008 f9f5 	bl	f25e <assert_print>
    6e74:	2179      	movs	r1, #121	; 0x79
    6e76:	4630      	mov	r0, r6
    6e78:	f008 f9ea 	bl	f250 <assert_post_action>
    6e7c:	e7eb      	b.n	6e56 <get_status+0xa>
    6e7e:	bf00      	nop
    6e80:	00012778 	.word	0x00012778
    6e84:	000127b8 	.word	0x000127b8
    6e88:	0001160c 	.word	0x0001160c

00006e8c <stop>:
{
    6e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e90:	4607      	mov	r7, r0
    6e92:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    6e94:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    6e96:	4621      	mov	r1, r4
    6e98:	f008 fb81 	bl	f59e <get_sub_data>
    6e9c:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6e9e:	2c01      	cmp	r4, #1
    6ea0:	d80f      	bhi.n	6ec2 <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    6ea2:	4631      	mov	r1, r6
    6ea4:	f105 0008 	add.w	r0, r5, #8
    6ea8:	f008 fb8a 	bl	f5c0 <set_off_state>
	if (err < 0) {
    6eac:	2800      	cmp	r0, #0
    6eae:	db06      	blt.n	6ebe <stop+0x32>
	get_sub_config(dev, type)->stop();
    6eb0:	4621      	mov	r1, r4
    6eb2:	4638      	mov	r0, r7
    6eb4:	f008 fb7a 	bl	f5ac <get_sub_config>
    6eb8:	6843      	ldr	r3, [r0, #4]
    6eba:	4798      	blx	r3
	return 0;
    6ebc:	2000      	movs	r0, #0
}
    6ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    6ec2:	f8df 801c 	ldr.w	r8, [pc, #28]	; 6ee0 <stop+0x54>
    6ec6:	f240 134d 	movw	r3, #333	; 0x14d
    6eca:	4642      	mov	r2, r8
    6ecc:	4905      	ldr	r1, [pc, #20]	; (6ee4 <stop+0x58>)
    6ece:	4806      	ldr	r0, [pc, #24]	; (6ee8 <stop+0x5c>)
    6ed0:	f008 f9c5 	bl	f25e <assert_print>
    6ed4:	f240 114d 	movw	r1, #333	; 0x14d
    6ed8:	4640      	mov	r0, r8
    6eda:	f008 f9b9 	bl	f250 <assert_post_action>
    6ede:	e7e0      	b.n	6ea2 <stop+0x16>
    6ee0:	00012778 	.word	0x00012778
    6ee4:	000127b8 	.word	0x000127b8
    6ee8:	0001160c 	.word	0x0001160c

00006eec <onoff_stop>:
{
    6eec:	b538      	push	{r3, r4, r5, lr}
    6eee:	4605      	mov	r5, r0
    6ef0:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6ef2:	f7ff ff73 	bl	6ddc <get_subsys>
    6ef6:	4601      	mov	r1, r0
    6ef8:	2240      	movs	r2, #64	; 0x40
    6efa:	4803      	ldr	r0, [pc, #12]	; (6f08 <onoff_stop+0x1c>)
    6efc:	f7ff ffc6 	bl	6e8c <stop>
    6f00:	4601      	mov	r1, r0
	notify(mgr, res);
    6f02:	4628      	mov	r0, r5
    6f04:	47a0      	blx	r4
}
    6f06:	bd38      	pop	{r3, r4, r5, pc}
    6f08:	00010e20 	.word	0x00010e20

00006f0c <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    6f0c:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    6f0e:	2801      	cmp	r0, #1
    6f10:	d01d      	beq.n	6f4e <clock_event_handler+0x42>
    6f12:	2803      	cmp	r0, #3
    6f14:	d020      	beq.n	6f58 <clock_event_handler+0x4c>
    6f16:	b168      	cbz	r0, 6f34 <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    6f18:	4c16      	ldr	r4, [pc, #88]	; (6f74 <clock_event_handler+0x68>)
    6f1a:	f240 2362 	movw	r3, #610	; 0x262
    6f1e:	4622      	mov	r2, r4
    6f20:	4915      	ldr	r1, [pc, #84]	; (6f78 <clock_event_handler+0x6c>)
    6f22:	4816      	ldr	r0, [pc, #88]	; (6f7c <clock_event_handler+0x70>)
    6f24:	f008 f99b 	bl	f25e <assert_print>
    6f28:	f240 2162 	movw	r1, #610	; 0x262
    6f2c:	4620      	mov	r0, r4
    6f2e:	f008 f98f 	bl	f250 <assert_post_action>
		break;
	}
}
    6f32:	e010      	b.n	6f56 <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    6f34:	2100      	movs	r1, #0
    6f36:	4812      	ldr	r0, [pc, #72]	; (6f80 <clock_event_handler+0x74>)
    6f38:	f008 fb31 	bl	f59e <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    6f3c:	6883      	ldr	r3, [r0, #8]
    6f3e:	f013 0f07 	tst.w	r3, #7
    6f42:	d108      	bne.n	6f56 <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    6f44:	2100      	movs	r1, #0
    6f46:	480e      	ldr	r0, [pc, #56]	; (6f80 <clock_event_handler+0x74>)
    6f48:	f008 fb84 	bl	f654 <clkstarted_handle>
    6f4c:	e003      	b.n	6f56 <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6f4e:	2101      	movs	r1, #1
    6f50:	480b      	ldr	r0, [pc, #44]	; (6f80 <clock_event_handler+0x74>)
    6f52:	f008 fb7f 	bl	f654 <clkstarted_handle>
}
    6f56:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    6f58:	4c06      	ldr	r4, [pc, #24]	; (6f74 <clock_event_handler+0x68>)
    6f5a:	f240 235e 	movw	r3, #606	; 0x25e
    6f5e:	4622      	mov	r2, r4
    6f60:	4905      	ldr	r1, [pc, #20]	; (6f78 <clock_event_handler+0x6c>)
    6f62:	4806      	ldr	r0, [pc, #24]	; (6f7c <clock_event_handler+0x70>)
    6f64:	f008 f97b 	bl	f25e <assert_print>
    6f68:	f240 215e 	movw	r1, #606	; 0x25e
    6f6c:	4620      	mov	r0, r4
    6f6e:	f008 f96f 	bl	f250 <assert_post_action>
		break;
    6f72:	e7f0      	b.n	6f56 <clock_event_handler+0x4a>
    6f74:	00012778 	.word	0x00012778
    6f78:	00011cc8 	.word	0x00011cc8
    6f7c:	0001160c 	.word	0x0001160c
    6f80:	00010e20 	.word	0x00010e20

00006f84 <api_blocking_start>:
{
    6f84:	b500      	push	{lr}
    6f86:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6f88:	f8cd d000 	str.w	sp, [sp]
    6f8c:	f8cd d004 	str.w	sp, [sp, #4]
    6f90:	2300      	movs	r3, #0
    6f92:	9302      	str	r3, [sp, #8]
    6f94:	2301      	movs	r3, #1
    6f96:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6f98:	466b      	mov	r3, sp
    6f9a:	4a07      	ldr	r2, [pc, #28]	; (6fb8 <api_blocking_start+0x34>)
    6f9c:	f008 fb88 	bl	f6b0 <api_start>
	if (err < 0) {
    6fa0:	2800      	cmp	r0, #0
    6fa2:	db05      	blt.n	6fb0 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    6fa4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6fa8:	2300      	movs	r3, #0
    6faa:	4668      	mov	r0, sp
    6fac:	f004 f87e 	bl	b0ac <z_impl_k_sem_take>
}
    6fb0:	b005      	add	sp, #20
    6fb2:	f85d fb04 	ldr.w	pc, [sp], #4
    6fb6:	bf00      	nop
    6fb8:	0000f703 	.word	0x0000f703

00006fbc <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    6fbc:	b570      	push	{r4, r5, r6, lr}
    6fbe:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6fc0:	2200      	movs	r2, #0
    6fc2:	2101      	movs	r1, #1
    6fc4:	4610      	mov	r0, r2
    6fc6:	f7fe ff0f 	bl	5de8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    6fca:	4811      	ldr	r0, [pc, #68]	; (7010 <clk_init+0x54>)
    6fcc:	f001 ff24 	bl	8e18 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    6fd0:	4b10      	ldr	r3, [pc, #64]	; (7014 <clk_init+0x58>)
    6fd2:	4298      	cmp	r0, r3
    6fd4:	d119      	bne.n	700a <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    6fd6:	f001 ff49 	bl	8e6c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    6fda:	2400      	movs	r4, #0
    6fdc:	2c01      	cmp	r4, #1
    6fde:	d812      	bhi.n	7006 <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    6fe0:	4621      	mov	r1, r4
    6fe2:	4630      	mov	r0, r6
    6fe4:	f008 fadb 	bl	f59e <get_sub_data>
    6fe8:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    6fea:	4621      	mov	r1, r4
    6fec:	4630      	mov	r0, r6
    6fee:	f008 fae3 	bl	f5b8 <get_onoff_manager>
    6ff2:	4909      	ldr	r1, [pc, #36]	; (7018 <clk_init+0x5c>)
    6ff4:	f008 f8b8 	bl	f168 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    6ff8:	2800      	cmp	r0, #0
    6ffa:	db05      	blt.n	7008 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6ffc:	2301      	movs	r3, #1
    6ffe:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    7000:	441c      	add	r4, r3
    7002:	b2e4      	uxtb	r4, r4
    7004:	e7ea      	b.n	6fdc <clk_init+0x20>
	}

	return 0;
    7006:	2000      	movs	r0, #0
}
    7008:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    700a:	f06f 0004 	mvn.w	r0, #4
    700e:	e7fb      	b.n	7008 <clk_init+0x4c>
    7010:	00006f0d 	.word	0x00006f0d
    7014:	0bad0000 	.word	0x0bad0000
    7018:	00012834 	.word	0x00012834

0000701c <lfclk_spinwait>:
{
    701c:	b570      	push	{r4, r5, r6, lr}
    701e:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    7020:	2801      	cmp	r0, #1
    7022:	d107      	bne.n	7034 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    7024:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7028:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    702c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    7030:	2b01      	cmp	r3, #1
    7032:	d05a      	beq.n	70ea <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7034:	f009 fab2 	bl	1059c <k_is_in_isr>
    7038:	b928      	cbnz	r0, 7046 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    703a:	4b2f      	ldr	r3, [pc, #188]	; (70f8 <lfclk_spinwait+0xdc>)
    703c:	781b      	ldrb	r3, [r3, #0]
    703e:	2b00      	cmp	r3, #0
    7040:	d043      	beq.n	70ca <lfclk_spinwait+0xae>
    7042:	2300      	movs	r3, #0
    7044:	e000      	b.n	7048 <lfclk_spinwait+0x2c>
    7046:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    7048:	461c      	mov	r4, r3
    704a:	2b00      	cmp	r3, #0
    704c:	d03f      	beq.n	70ce <lfclk_spinwait+0xb2>
	__asm__ volatile(
    704e:	f04f 0320 	mov.w	r3, #32
    7052:	f3ef 8611 	mrs	r6, BASEPRI
    7056:	f383 8812 	msr	BASEPRI_MAX, r3
    705a:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    705e:	b924      	cbnz	r4, 706a <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    7060:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7064:	2202      	movs	r2, #2
    7066:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    706a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    706e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7072:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7076:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    707a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    707e:	d12d      	bne.n	70dc <lfclk_spinwait+0xc0>
    return false;
    7080:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    7082:	b11a      	cbz	r2, 708c <lfclk_spinwait+0x70>
    7084:	2b01      	cmp	r3, #1
    7086:	d02b      	beq.n	70e0 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    7088:	2d01      	cmp	r5, #1
    708a:	d029      	beq.n	70e0 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    708c:	b30c      	cbz	r4, 70d2 <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    708e:	4630      	mov	r0, r6
    7090:	f7fe fe3a 	bl	5d08 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    7094:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7098:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    709c:	2b00      	cmp	r3, #0
    709e:	d1e4      	bne.n	706a <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    70a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    70a4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    70a8:	2b00      	cmp	r3, #0
    70aa:	d0de      	beq.n	706a <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    70ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    70b0:	2200      	movs	r2, #0
    70b2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    70b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    70ba:	2201      	movs	r2, #1
    70bc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    70c0:	490e      	ldr	r1, [pc, #56]	; (70fc <lfclk_spinwait+0xe0>)
    70c2:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    70c6:	609a      	str	r2, [r3, #8]
}
    70c8:	e7cf      	b.n	706a <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    70ca:	2301      	movs	r3, #1
    70cc:	e7bc      	b.n	7048 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    70ce:	2600      	movs	r6, #0
    70d0:	e7c5      	b.n	705e <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    70d2:	2021      	movs	r0, #33	; 0x21
    70d4:	2100      	movs	r1, #0
    70d6:	f005 fa85 	bl	c5e4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    70da:	e7db      	b.n	7094 <lfclk_spinwait+0x78>
                return true;
    70dc:	2201      	movs	r2, #1
    70de:	e7d0      	b.n	7082 <lfclk_spinwait+0x66>
	if (isr_mode) {
    70e0:	b124      	cbz	r4, 70ec <lfclk_spinwait+0xd0>
	__asm__ volatile(
    70e2:	f386 8811 	msr	BASEPRI, r6
    70e6:	f3bf 8f6f 	isb	sy
}
    70ea:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    70ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    70f0:	2202      	movs	r2, #2
    70f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    70f6:	e7f8      	b.n	70ea <lfclk_spinwait+0xce>
    70f8:	2000d71d 	.word	0x2000d71d
    70fc:	e000e100 	.word	0xe000e100

00007100 <generic_hfclk_start>:
{
    7100:	b510      	push	{r4, lr}
	__asm__ volatile(
    7102:	f04f 0320 	mov.w	r3, #32
    7106:	f3ef 8411 	mrs	r4, BASEPRI
    710a:	f383 8812 	msr	BASEPRI_MAX, r3
    710e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    7112:	4a13      	ldr	r2, [pc, #76]	; (7160 <generic_hfclk_start+0x60>)
    7114:	6813      	ldr	r3, [r2, #0]
    7116:	f043 0302 	orr.w	r3, r3, #2
    711a:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    711c:	f013 0f01 	tst.w	r3, #1
    7120:	d108      	bne.n	7134 <generic_hfclk_start+0x34>
	bool already_started = false;
    7122:	2300      	movs	r3, #0
	__asm__ volatile(
    7124:	f384 8811 	msr	BASEPRI, r4
    7128:	f3bf 8f6f 	isb	sy
	if (already_started) {
    712c:	b99b      	cbnz	r3, 7156 <generic_hfclk_start+0x56>
	hfclk_start();
    712e:	f008 facf 	bl	f6d0 <hfclk_start>
}
    7132:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7134:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7138:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    713c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    7140:	f012 0f01 	tst.w	r2, #1
    7144:	d101      	bne.n	714a <generic_hfclk_start+0x4a>
	bool already_started = false;
    7146:	2300      	movs	r3, #0
    7148:	e7ec      	b.n	7124 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    714a:	f7ff fe43 	bl	6dd4 <get_hf_flags>
    714e:	f008 fa6e 	bl	f62e <set_on_state>
			already_started = true;
    7152:	2301      	movs	r3, #1
    7154:	e7e6      	b.n	7124 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    7156:	2100      	movs	r1, #0
    7158:	4802      	ldr	r0, [pc, #8]	; (7164 <generic_hfclk_start+0x64>)
    715a:	f008 fa7b 	bl	f654 <clkstarted_handle>
		return;
    715e:	e7e8      	b.n	7132 <generic_hfclk_start+0x32>
    7160:	2000cfec 	.word	0x2000cfec
    7164:	00010e20 	.word	0x00010e20

00007168 <z_nrf_clock_control_lf_on>:
{
    7168:	b538      	push	{r3, r4, r5, lr}
    716a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    716c:	4b1f      	ldr	r3, [pc, #124]	; (71ec <z_nrf_clock_control_lf_on+0x84>)
    716e:	2101      	movs	r1, #1
    7170:	f3bf 8f5b 	dmb	ish
    7174:	e853 2f00 	ldrex	r2, [r3]
    7178:	e843 1000 	strex	r0, r1, [r3]
    717c:	2800      	cmp	r0, #0
    717e:	d1f9      	bne.n	7174 <z_nrf_clock_control_lf_on+0xc>
    7180:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    7184:	b142      	cbz	r2, 7198 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    7186:	b134      	cbz	r4, 7196 <z_nrf_clock_control_lf_on+0x2e>
    7188:	1e63      	subs	r3, r4, #1
    718a:	b2db      	uxtb	r3, r3
    718c:	2b01      	cmp	r3, #1
    718e:	d81f      	bhi.n	71d0 <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    7190:	4620      	mov	r0, r4
    7192:	f7ff ff43 	bl	701c <lfclk_spinwait>
}
    7196:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    7198:	4815      	ldr	r0, [pc, #84]	; (71f0 <z_nrf_clock_control_lf_on+0x88>)
    719a:	f008 fa0d 	bl	f5b8 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    719e:	4915      	ldr	r1, [pc, #84]	; (71f4 <z_nrf_clock_control_lf_on+0x8c>)
    71a0:	2300      	movs	r3, #0
    71a2:	604b      	str	r3, [r1, #4]
    71a4:	608b      	str	r3, [r1, #8]
    71a6:	60cb      	str	r3, [r1, #12]
    71a8:	2301      	movs	r3, #1
    71aa:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    71ac:	f7fc ff84 	bl	40b8 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    71b0:	2800      	cmp	r0, #0
    71b2:	dae8      	bge.n	7186 <z_nrf_clock_control_lf_on+0x1e>
    71b4:	4d10      	ldr	r5, [pc, #64]	; (71f8 <z_nrf_clock_control_lf_on+0x90>)
    71b6:	f44f 7308 	mov.w	r3, #544	; 0x220
    71ba:	462a      	mov	r2, r5
    71bc:	490f      	ldr	r1, [pc, #60]	; (71fc <z_nrf_clock_control_lf_on+0x94>)
    71be:	4810      	ldr	r0, [pc, #64]	; (7200 <z_nrf_clock_control_lf_on+0x98>)
    71c0:	f008 f84d 	bl	f25e <assert_print>
    71c4:	f44f 7108 	mov.w	r1, #544	; 0x220
    71c8:	4628      	mov	r0, r5
    71ca:	f008 f841 	bl	f250 <assert_post_action>
    71ce:	e7da      	b.n	7186 <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    71d0:	4c09      	ldr	r4, [pc, #36]	; (71f8 <z_nrf_clock_control_lf_on+0x90>)
    71d2:	f240 2332 	movw	r3, #562	; 0x232
    71d6:	4622      	mov	r2, r4
    71d8:	490a      	ldr	r1, [pc, #40]	; (7204 <z_nrf_clock_control_lf_on+0x9c>)
    71da:	4809      	ldr	r0, [pc, #36]	; (7200 <z_nrf_clock_control_lf_on+0x98>)
    71dc:	f008 f83f 	bl	f25e <assert_print>
    71e0:	f240 2132 	movw	r1, #562	; 0x232
    71e4:	4620      	mov	r0, r4
    71e6:	f008 f833 	bl	f250 <assert_post_action>
    71ea:	e7d4      	b.n	7196 <z_nrf_clock_control_lf_on+0x2e>
    71ec:	2000cff0 	.word	0x2000cff0
    71f0:	00010e20 	.word	0x00010e20
    71f4:	2000cf84 	.word	0x2000cf84
    71f8:	00012778 	.word	0x00012778
    71fc:	00011c30 	.word	0x00011c30
    7200:	0001160c 	.word	0x0001160c
    7204:	00011cc8 	.word	0x00011cc8

00007208 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    7208:	b510      	push	{r4, lr}
    720a:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    720c:	280a      	cmp	r0, #10
    720e:	d007      	beq.n	7220 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    7210:	4b07      	ldr	r3, [pc, #28]	; (7230 <console_out+0x28>)
    7212:	6818      	ldr	r0, [r3, #0]
    7214:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    7216:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    7218:	69db      	ldr	r3, [r3, #28]
    721a:	4798      	blx	r3

	return c;
}
    721c:	4620      	mov	r0, r4
    721e:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    7220:	4b03      	ldr	r3, [pc, #12]	; (7230 <console_out+0x28>)
    7222:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    7224:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    7226:	69db      	ldr	r3, [r3, #28]
    7228:	210d      	movs	r1, #13
    722a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    722c:	e7f0      	b.n	7210 <console_out+0x8>
    722e:	bf00      	nop
    7230:	2000cff4 	.word	0x2000cff4

00007234 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    7234:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    7236:	4c04      	ldr	r4, [pc, #16]	; (7248 <uart_console_hook_install+0x14>)
    7238:	4620      	mov	r0, r4
    723a:	f7ff fcbb 	bl	6bb4 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    723e:	4620      	mov	r0, r4
    7240:	f7fc fca0 	bl	3b84 <__printk_hook_install>
#endif
}
    7244:	bd10      	pop	{r4, pc}
    7246:	bf00      	nop
    7248:	00007209 	.word	0x00007209

0000724c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    724c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    724e:	4806      	ldr	r0, [pc, #24]	; (7268 <uart_console_init+0x1c>)
    7250:	4b06      	ldr	r3, [pc, #24]	; (726c <uart_console_init+0x20>)
    7252:	6018      	str	r0, [r3, #0]
    7254:	f009 f946 	bl	104e4 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    7258:	b118      	cbz	r0, 7262 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    725a:	f7ff ffeb 	bl	7234 <uart_console_hook_install>

	return 0;
    725e:	2000      	movs	r0, #0
}
    7260:	bd08      	pop	{r3, pc}
		return -ENODEV;
    7262:	f06f 0012 	mvn.w	r0, #18
    7266:	e7fb      	b.n	7260 <uart_console_init+0x14>
    7268:	00010e80 	.word	0x00010e80
    726c:	2000cff4 	.word	0x2000cff4

00007270 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    7270:	b128      	cbz	r0, 727e <get_dev+0xe>
    7272:	2801      	cmp	r0, #1
    7274:	d101      	bne.n	727a <get_dev+0xa>
    7276:	4803      	ldr	r0, [pc, #12]	; (7284 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    7278:	4770      	bx	lr
	const struct device *dev = NULL;
    727a:	2000      	movs	r0, #0
    727c:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    727e:	4802      	ldr	r0, [pc, #8]	; (7288 <get_dev+0x18>)
    7280:	4770      	bx	lr
    7282:	bf00      	nop
    7284:	00010e38 	.word	0x00010e38
    7288:	00010e50 	.word	0x00010e50

0000728c <gpio_nrfx_manage_callback>:
{
    728c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7290:	4616      	mov	r6, r2
	return port->data;
    7292:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    7294:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    7296:	460c      	mov	r4, r1
    7298:	b131      	cbz	r1, 72a8 <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
    729a:	6863      	ldr	r3, [r4, #4]
    729c:	b1a3      	cbz	r3, 72c8 <gpio_nrfx_manage_callback+0x3c>
	return list->head;
    729e:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    72a0:	2b00      	cmp	r3, #0
    72a2:	d03b      	beq.n	731c <gpio_nrfx_manage_callback+0x90>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    72a4:	2100      	movs	r1, #0
    72a6:	e02a      	b.n	72fe <gpio_nrfx_manage_callback+0x72>
	__ASSERT(callback, "No callback!");
    72a8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 7340 <gpio_nrfx_manage_callback+0xb4>
    72ac:	2324      	movs	r3, #36	; 0x24
    72ae:	4642      	mov	r2, r8
    72b0:	4924      	ldr	r1, [pc, #144]	; (7344 <gpio_nrfx_manage_callback+0xb8>)
    72b2:	4825      	ldr	r0, [pc, #148]	; (7348 <gpio_nrfx_manage_callback+0xbc>)
    72b4:	f007 ffd3 	bl	f25e <assert_print>
    72b8:	4824      	ldr	r0, [pc, #144]	; (734c <gpio_nrfx_manage_callback+0xc0>)
    72ba:	f007 ffd0 	bl	f25e <assert_print>
    72be:	2124      	movs	r1, #36	; 0x24
    72c0:	4640      	mov	r0, r8
    72c2:	f007 ffc5 	bl	f250 <assert_post_action>
    72c6:	e7e8      	b.n	729a <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    72c8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 7340 <gpio_nrfx_manage_callback+0xb4>
    72cc:	2325      	movs	r3, #37	; 0x25
    72ce:	4642      	mov	r2, r8
    72d0:	491f      	ldr	r1, [pc, #124]	; (7350 <gpio_nrfx_manage_callback+0xc4>)
    72d2:	481d      	ldr	r0, [pc, #116]	; (7348 <gpio_nrfx_manage_callback+0xbc>)
    72d4:	f007 ffc3 	bl	f25e <assert_print>
    72d8:	481e      	ldr	r0, [pc, #120]	; (7354 <gpio_nrfx_manage_callback+0xc8>)
    72da:	f007 ffc0 	bl	f25e <assert_print>
    72de:	2125      	movs	r1, #37	; 0x25
    72e0:	4640      	mov	r0, r8
    72e2:	f007 ffb5 	bl	f250 <assert_post_action>
    72e6:	e7da      	b.n	729e <gpio_nrfx_manage_callback+0x12>
	return node->next;
    72e8:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    72ea:	606b      	str	r3, [r5, #4]
	return list->tail;
    72ec:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    72ee:	4294      	cmp	r4, r2
    72f0:	d10f      	bne.n	7312 <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    72f2:	607b      	str	r3, [r7, #4]
}
    72f4:	e00d      	b.n	7312 <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    72f6:	6079      	str	r1, [r7, #4]
}
    72f8:	e00b      	b.n	7312 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    72fa:	4619      	mov	r1, r3
    72fc:	681b      	ldr	r3, [r3, #0]
    72fe:	b15b      	cbz	r3, 7318 <gpio_nrfx_manage_callback+0x8c>
    7300:	429c      	cmp	r4, r3
    7302:	d1fa      	bne.n	72fa <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_REMOVE(slist, snode)
    7304:	2900      	cmp	r1, #0
    7306:	d0ef      	beq.n	72e8 <gpio_nrfx_manage_callback+0x5c>
	return node->next;
    7308:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    730a:	600b      	str	r3, [r1, #0]
	return list->tail;
    730c:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    730e:	429c      	cmp	r4, r3
    7310:	d0f1      	beq.n	72f6 <gpio_nrfx_manage_callback+0x6a>
	parent->next = child;
    7312:	2300      	movs	r3, #0
    7314:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7316:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    7318:	b903      	cbnz	r3, 731c <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    731a:	b156      	cbz	r6, 7332 <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    731c:	b166      	cbz	r6, 7338 <gpio_nrfx_manage_callback+0xac>
	return list->head;
    731e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    7320:	6023      	str	r3, [r4, #0]
	list->head = node;
    7322:	606c      	str	r4, [r5, #4]
	return list->tail;
    7324:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    7326:	b10b      	cbz	r3, 732c <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    7328:	2000      	movs	r0, #0
    732a:	e006      	b.n	733a <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    732c:	607c      	str	r4, [r7, #4]
    732e:	2000      	movs	r0, #0
}
    7330:	e003      	b.n	733a <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    7332:	f06f 0015 	mvn.w	r0, #21
    7336:	e000      	b.n	733a <gpio_nrfx_manage_callback+0xae>
	return 0;
    7338:	2000      	movs	r0, #0
}
    733a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    733e:	bf00      	nop
    7340:	00012840 	.word	0x00012840
    7344:	00012870 	.word	0x00012870
    7348:	0001160c 	.word	0x0001160c
    734c:	0001287c 	.word	0x0001287c
    7350:	0001288c 	.word	0x0001288c
    7354:	000128a0 	.word	0x000128a0

00007358 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    7358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    735c:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    7360:	0940      	lsrs	r0, r0, #5
    7362:	f7ff ff85 	bl	7270 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    7366:	b380      	cbz	r0, 73ca <nrfx_gpio_handler+0x72>
    7368:	4607      	mov	r7, r0
	return port->data;
    736a:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    736c:	2601      	movs	r6, #1
    736e:	40a6      	lsls	r6, r4
	return list->head;
    7370:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7372:	b11c      	cbz	r4, 737c <nrfx_gpio_handler+0x24>
    7374:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    7376:	b17c      	cbz	r4, 7398 <nrfx_gpio_handler+0x40>
	return node->next;
    7378:	6825      	ldr	r5, [r4, #0]
    737a:	e00d      	b.n	7398 <nrfx_gpio_handler+0x40>
    737c:	4625      	mov	r5, r4
    737e:	e00b      	b.n	7398 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    7380:	6863      	ldr	r3, [r4, #4]
    7382:	68a2      	ldr	r2, [r4, #8]
    7384:	4032      	ands	r2, r6
    7386:	4621      	mov	r1, r4
    7388:	4638      	mov	r0, r7
    738a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    738c:	b1dd      	cbz	r5, 73c6 <nrfx_gpio_handler+0x6e>
    738e:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    7390:	b105      	cbz	r5, 7394 <nrfx_gpio_handler+0x3c>
	return node->next;
    7392:	682b      	ldr	r3, [r5, #0]
    7394:	462c      	mov	r4, r5
    7396:	461d      	mov	r5, r3
    7398:	b1bc      	cbz	r4, 73ca <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    739a:	68a3      	ldr	r3, [r4, #8]
    739c:	421e      	tst	r6, r3
    739e:	d0f5      	beq.n	738c <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    73a0:	6863      	ldr	r3, [r4, #4]
    73a2:	2b00      	cmp	r3, #0
    73a4:	d1ec      	bne.n	7380 <nrfx_gpio_handler+0x28>
    73a6:	f8df 8028 	ldr.w	r8, [pc, #40]	; 73d0 <nrfx_gpio_handler+0x78>
    73aa:	2345      	movs	r3, #69	; 0x45
    73ac:	4642      	mov	r2, r8
    73ae:	4909      	ldr	r1, [pc, #36]	; (73d4 <nrfx_gpio_handler+0x7c>)
    73b0:	4809      	ldr	r0, [pc, #36]	; (73d8 <nrfx_gpio_handler+0x80>)
    73b2:	f007 ff54 	bl	f25e <assert_print>
    73b6:	4809      	ldr	r0, [pc, #36]	; (73dc <nrfx_gpio_handler+0x84>)
    73b8:	f007 ff51 	bl	f25e <assert_print>
    73bc:	2145      	movs	r1, #69	; 0x45
    73be:	4640      	mov	r0, r8
    73c0:	f007 ff46 	bl	f250 <assert_post_action>
    73c4:	e7dc      	b.n	7380 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    73c6:	462b      	mov	r3, r5
    73c8:	e7e4      	b.n	7394 <nrfx_gpio_handler+0x3c>
}
    73ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73ce:	bf00      	nop
    73d0:	00012840 	.word	0x00012840
    73d4:	000128b8 	.word	0x000128b8
    73d8:	0001160c 	.word	0x0001160c
    73dc:	000128a0 	.word	0x000128a0

000073e0 <gpio_nrfx_pin_interrupt_configure>:
{
    73e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    73e2:	b085      	sub	sp, #20
    73e4:	460e      	mov	r6, r1
    73e6:	4619      	mov	r1, r3
	return port->config;
    73e8:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    73ea:	7b1b      	ldrb	r3, [r3, #12]
    73ec:	f006 041f 	and.w	r4, r6, #31
    73f0:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    73f4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    73f8:	d022      	beq.n	7440 <gpio_nrfx_pin_interrupt_configure+0x60>
    73fa:	4607      	mov	r7, r0
    73fc:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    73fe:	2300      	movs	r3, #0
    7400:	9302      	str	r3, [sp, #8]
    7402:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    7404:	4610      	mov	r0, r2
    7406:	f008 f9fa 	bl	f7fe <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    740a:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    740e:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    7410:	6899      	ldr	r1, [r3, #8]
    7412:	40f1      	lsrs	r1, r6
    7414:	f011 0101 	ands.w	r1, r1, #1
    7418:	d102      	bne.n	7420 <gpio_nrfx_pin_interrupt_configure+0x40>
    741a:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    741e:	d014      	beq.n	744a <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    7420:	2300      	movs	r3, #0
    7422:	aa02      	add	r2, sp, #8
    7424:	4619      	mov	r1, r3
    7426:	4620      	mov	r0, r4
    7428:	f002 f99a 	bl	9760 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    742c:	4b32      	ldr	r3, [pc, #200]	; (74f8 <gpio_nrfx_pin_interrupt_configure+0x118>)
    742e:	4298      	cmp	r0, r3
    7430:	d15f      	bne.n	74f2 <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    7432:	2101      	movs	r1, #1
    7434:	4620      	mov	r0, r4
    7436:	f002 fbf7 	bl	9c28 <nrfx_gpiote_trigger_enable>
	return 0;
    743a:	2000      	movs	r0, #0
}
    743c:	b005      	add	sp, #20
    743e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    7440:	4620      	mov	r0, r4
    7442:	f002 fcfd 	bl	9e40 <nrfx_gpiote_trigger_disable>
		return 0;
    7446:	2000      	movs	r0, #0
    7448:	e7f8      	b.n	743c <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    744a:	0963      	lsrs	r3, r4, #5
    744c:	d01f      	beq.n	748e <gpio_nrfx_pin_interrupt_configure+0xae>
    744e:	2b01      	cmp	r3, #1
    7450:	d101      	bne.n	7456 <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    7452:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    7456:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    745a:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    745c:	f011 0f01 	tst.w	r1, #1
    7460:	d018      	beq.n	7494 <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    7462:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7466:	0963      	lsrs	r3, r4, #5
    7468:	d022      	beq.n	74b0 <gpio_nrfx_pin_interrupt_configure+0xd0>
    746a:	2b01      	cmp	r3, #1
    746c:	d023      	beq.n	74b6 <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    746e:	4e23      	ldr	r6, [pc, #140]	; (74fc <gpio_nrfx_pin_interrupt_configure+0x11c>)
    7470:	f240 232e 	movw	r3, #558	; 0x22e
    7474:	4632      	mov	r2, r6
    7476:	4922      	ldr	r1, [pc, #136]	; (7500 <gpio_nrfx_pin_interrupt_configure+0x120>)
    7478:	4822      	ldr	r0, [pc, #136]	; (7504 <gpio_nrfx_pin_interrupt_configure+0x124>)
    747a:	f007 fef0 	bl	f25e <assert_print>
    747e:	f240 212e 	movw	r1, #558	; 0x22e
    7482:	4630      	mov	r0, r6
    7484:	f007 fee4 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    7488:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    748c:	e014      	b.n	74b8 <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    748e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7492:	e7e0      	b.n	7456 <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    7494:	4d19      	ldr	r5, [pc, #100]	; (74fc <gpio_nrfx_pin_interrupt_configure+0x11c>)
    7496:	f240 2329 	movw	r3, #553	; 0x229
    749a:	462a      	mov	r2, r5
    749c:	491a      	ldr	r1, [pc, #104]	; (7508 <gpio_nrfx_pin_interrupt_configure+0x128>)
    749e:	4819      	ldr	r0, [pc, #100]	; (7504 <gpio_nrfx_pin_interrupt_configure+0x124>)
    74a0:	f007 fedd 	bl	f25e <assert_print>
    74a4:	f240 2129 	movw	r1, #553	; 0x229
    74a8:	4628      	mov	r0, r5
    74aa:	f007 fed1 	bl	f250 <assert_post_action>
    74ae:	e7d8      	b.n	7462 <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    74b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    74b4:	e000      	b.n	74b8 <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    74b6:	4b15      	ldr	r3, [pc, #84]	; (750c <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    74b8:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    74bc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    74c0:	f013 0f01 	tst.w	r3, #1
    74c4:	d1ac      	bne.n	7420 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    74c6:	f10d 0107 	add.w	r1, sp, #7
    74ca:	4620      	mov	r0, r4
    74cc:	f002 fb3c 	bl	9b48 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    74d0:	4b0f      	ldr	r3, [pc, #60]	; (7510 <gpio_nrfx_pin_interrupt_configure+0x130>)
    74d2:	4298      	cmp	r0, r3
    74d4:	d003      	beq.n	74de <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    74d6:	f10d 0307 	add.w	r3, sp, #7
    74da:	9303      	str	r3, [sp, #12]
    74dc:	e7a0      	b.n	7420 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    74de:	f10d 0007 	add.w	r0, sp, #7
    74e2:	f002 fb99 	bl	9c18 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    74e6:	4b04      	ldr	r3, [pc, #16]	; (74f8 <gpio_nrfx_pin_interrupt_configure+0x118>)
    74e8:	4298      	cmp	r0, r3
    74ea:	d0f4      	beq.n	74d6 <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    74ec:	f06f 000b 	mvn.w	r0, #11
    74f0:	e7a4      	b.n	743c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    74f2:	f06f 0004 	mvn.w	r0, #4
    74f6:	e7a1      	b.n	743c <gpio_nrfx_pin_interrupt_configure+0x5c>
    74f8:	0bad0000 	.word	0x0bad0000
    74fc:	000128c4 	.word	0x000128c4
    7500:	00011cc8 	.word	0x00011cc8
    7504:	0001160c 	.word	0x0001160c
    7508:	000128f8 	.word	0x000128f8
    750c:	50000300 	.word	0x50000300
    7510:	0bad0004 	.word	0x0bad0004

00007514 <pin_uninit>:
{
    7514:	b530      	push	{r4, r5, lr}
    7516:	b083      	sub	sp, #12
    7518:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    751a:	f10d 0107 	add.w	r1, sp, #7
    751e:	f002 fb13 	bl	9b48 <nrfx_gpiote_channel_get>
    7522:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    7524:	4620      	mov	r0, r4
    7526:	f002 fcf3 	bl	9f10 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    752a:	4b0b      	ldr	r3, [pc, #44]	; (7558 <pin_uninit+0x44>)
    752c:	4298      	cmp	r0, r3
    752e:	d10f      	bne.n	7550 <pin_uninit+0x3c>
	if (free_ch) {
    7530:	429d      	cmp	r5, r3
    7532:	d005      	beq.n	7540 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    7534:	4b08      	ldr	r3, [pc, #32]	; (7558 <pin_uninit+0x44>)
    7536:	4298      	cmp	r0, r3
    7538:	d107      	bne.n	754a <pin_uninit+0x36>
    753a:	2000      	movs	r0, #0
}
    753c:	b003      	add	sp, #12
    753e:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    7540:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7544:	f002 fb60 	bl	9c08 <nrfx_gpiote_channel_free>
    7548:	e7f4      	b.n	7534 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    754a:	f06f 0004 	mvn.w	r0, #4
    754e:	e7f5      	b.n	753c <pin_uninit+0x28>
		return -EIO;
    7550:	f06f 0004 	mvn.w	r0, #4
    7554:	e7f2      	b.n	753c <pin_uninit+0x28>
    7556:	bf00      	nop
    7558:	0bad0000 	.word	0x0bad0000

0000755c <gpio_nrfx_pin_configure>:
{
    755c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7560:	b087      	sub	sp, #28
	return port->config;
    7562:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7566:	f898 300c 	ldrb.w	r3, [r8, #12]
    756a:	f001 051f 	and.w	r5, r1, #31
    756e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    7572:	2a00      	cmp	r2, #0
    7574:	d044      	beq.n	7600 <gpio_nrfx_pin_configure+0xa4>
    7576:	460c      	mov	r4, r1
    7578:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    757a:	2600      	movs	r6, #0
    757c:	9603      	str	r6, [sp, #12]
    757e:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    7580:	f10d 0117 	add.w	r1, sp, #23
    7584:	4620      	mov	r0, r4
    7586:	f002 fadf 	bl	9b48 <nrfx_gpiote_channel_get>
    758a:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    758c:	4633      	mov	r3, r6
    758e:	aa03      	add	r2, sp, #12
    7590:	4631      	mov	r1, r6
    7592:	4628      	mov	r0, r5
    7594:	f002 f8e4 	bl	9760 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    7598:	4b30      	ldr	r3, [pc, #192]	; (765c <gpio_nrfx_pin_configure+0x100>)
    759a:	4298      	cmp	r0, r3
    759c:	d15b      	bne.n	7656 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    759e:	4599      	cmp	r9, r3
    75a0:	d036      	beq.n	7610 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    75a2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    75a6:	d043      	beq.n	7630 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    75a8:	f10d 0103 	add.w	r1, sp, #3
    75ac:	4638      	mov	r0, r7
    75ae:	f008 f8ad 	bl	f70c <get_drive>
		if (rv != 0) {
    75b2:	4606      	mov	r6, r0
    75b4:	bb40      	cbnz	r0, 7608 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    75b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
    75ba:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    75be:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    75c2:	bf0c      	ite	eq
    75c4:	2301      	moveq	r3, #1
    75c6:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    75c8:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    75cc:	4638      	mov	r0, r7
    75ce:	f008 f8e3 	bl	f798 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    75d2:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    75d6:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    75da:	d01e      	beq.n	761a <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    75dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    75e0:	2101      	movs	r1, #1
    75e2:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    75e6:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    75ea:	2200      	movs	r2, #0
    75ec:	a901      	add	r1, sp, #4
    75ee:	4628      	mov	r0, r5
    75f0:	f002 f9aa 	bl	9948 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    75f4:	4b19      	ldr	r3, [pc, #100]	; (765c <gpio_nrfx_pin_configure+0x100>)
    75f6:	4298      	cmp	r0, r3
    75f8:	d006      	beq.n	7608 <gpio_nrfx_pin_configure+0xac>
    75fa:	f06f 0615 	mvn.w	r6, #21
    75fe:	e003      	b.n	7608 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    7600:	4628      	mov	r0, r5
    7602:	f7ff ff87 	bl	7514 <pin_uninit>
    7606:	4606      	mov	r6, r0
}
    7608:	4630      	mov	r0, r6
    760a:	b007      	add	sp, #28
    760c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    7610:	f89d 0017 	ldrb.w	r0, [sp, #23]
    7614:	f002 faf8 	bl	9c08 <nrfx_gpiote_channel_free>
    7618:	e7c3      	b.n	75a2 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    761a:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    761e:	d0e4      	beq.n	75ea <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    7620:	f8d8 2004 	ldr.w	r2, [r8, #4]
    7624:	2301      	movs	r3, #1
    7626:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    762a:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    762e:	e7dc      	b.n	75ea <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    7630:	4638      	mov	r0, r7
    7632:	f008 f8b1 	bl	f798 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    7636:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    763a:	2300      	movs	r3, #0
    763c:	461a      	mov	r2, r3
    763e:	a902      	add	r1, sp, #8
    7640:	4628      	mov	r0, r5
    7642:	f002 f88d 	bl	9760 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    7646:	4b05      	ldr	r3, [pc, #20]	; (765c <gpio_nrfx_pin_configure+0x100>)
    7648:	4298      	cmp	r0, r3
    764a:	d101      	bne.n	7650 <gpio_nrfx_pin_configure+0xf4>
    764c:	2600      	movs	r6, #0
    764e:	e7db      	b.n	7608 <gpio_nrfx_pin_configure+0xac>
    7650:	f06f 0615 	mvn.w	r6, #21
    7654:	e7d8      	b.n	7608 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    7656:	f06f 0615 	mvn.w	r6, #21
    765a:	e7d5      	b.n	7608 <gpio_nrfx_pin_configure+0xac>
    765c:	0bad0000 	.word	0x0bad0000

00007660 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    7660:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    7662:	f002 fac7 	bl	9bf4 <nrfx_gpiote_is_init>
    7666:	b108      	cbz	r0, 766c <gpio_nrfx_init+0xc>
		return 0;
    7668:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    766a:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    766c:	f002 fa98 	bl	9ba0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    7670:	4b08      	ldr	r3, [pc, #32]	; (7694 <gpio_nrfx_init+0x34>)
    7672:	4298      	cmp	r0, r3
    7674:	d10a      	bne.n	768c <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    7676:	2100      	movs	r1, #0
    7678:	4807      	ldr	r0, [pc, #28]	; (7698 <gpio_nrfx_init+0x38>)
    767a:	f002 fa5f 	bl	9b3c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    767e:	2200      	movs	r2, #0
    7680:	2105      	movs	r1, #5
    7682:	2006      	movs	r0, #6
    7684:	f7fe fbb0 	bl	5de8 <z_arm_irq_priority_set>
	return 0;
    7688:	2000      	movs	r0, #0
    768a:	e7ee      	b.n	766a <gpio_nrfx_init+0xa>
		return -EIO;
    768c:	f06f 0004 	mvn.w	r0, #4
    7690:	e7eb      	b.n	766a <gpio_nrfx_init+0xa>
    7692:	bf00      	nop
    7694:	0bad0000 	.word	0x0bad0000
    7698:	00007359 	.word	0x00007359

0000769c <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    769c:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    769e:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    76a0:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    76a4:	d06f      	beq.n	7786 <baudrate_set+0xea>
    76a6:	d83a      	bhi.n	771e <baudrate_set+0x82>
    76a8:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    76ac:	d06e      	beq.n	778c <baudrate_set+0xf0>
    76ae:	d90a      	bls.n	76c6 <baudrate_set+0x2a>
    76b0:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    76b4:	d075      	beq.n	77a2 <baudrate_set+0x106>
    76b6:	d924      	bls.n	7702 <baudrate_set+0x66>
    76b8:	f647 2312 	movw	r3, #31250	; 0x7a12
    76bc:	4299      	cmp	r1, r3
    76be:	d12b      	bne.n	7718 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    76c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    76c4:	e013      	b.n	76ee <baudrate_set+0x52>
	switch (baudrate) {
    76c6:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    76ca:	d061      	beq.n	7790 <baudrate_set+0xf4>
    76cc:	d907      	bls.n	76de <baudrate_set+0x42>
    76ce:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    76d2:	d063      	beq.n	779c <baudrate_set+0x100>
    76d4:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    76d8:	d110      	bne.n	76fc <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    76da:	4b3c      	ldr	r3, [pc, #240]	; (77cc <baudrate_set+0x130>)
    76dc:	e007      	b.n	76ee <baudrate_set+0x52>
	switch (baudrate) {
    76de:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    76e2:	d058      	beq.n	7796 <baudrate_set+0xfa>
    76e4:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    76e8:	d105      	bne.n	76f6 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    76ea:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    76ee:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    76f2:	2000      	movs	r0, #0
    76f4:	4770      	bx	lr
	switch (baudrate) {
    76f6:	f06f 0015 	mvn.w	r0, #21
    76fa:	4770      	bx	lr
    76fc:	f06f 0015 	mvn.w	r0, #21
    7700:	4770      	bx	lr
    7702:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    7706:	d04e      	beq.n	77a6 <baudrate_set+0x10a>
    7708:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    770c:	d101      	bne.n	7712 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    770e:	4b30      	ldr	r3, [pc, #192]	; (77d0 <baudrate_set+0x134>)
    7710:	e7ed      	b.n	76ee <baudrate_set+0x52>
	switch (baudrate) {
    7712:	f06f 0015 	mvn.w	r0, #21
    7716:	4770      	bx	lr
    7718:	f06f 0015 	mvn.w	r0, #21
    771c:	4770      	bx	lr
    771e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    7722:	d042      	beq.n	77aa <baudrate_set+0x10e>
    7724:	d909      	bls.n	773a <baudrate_set+0x9e>
    7726:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    772a:	d046      	beq.n	77ba <baudrate_set+0x11e>
    772c:	d91f      	bls.n	776e <baudrate_set+0xd2>
    772e:	4b29      	ldr	r3, [pc, #164]	; (77d4 <baudrate_set+0x138>)
    7730:	4299      	cmp	r1, r3
    7732:	d148      	bne.n	77c6 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    7734:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7738:	e7d9      	b.n	76ee <baudrate_set+0x52>
	switch (baudrate) {
    773a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    773e:	d037      	beq.n	77b0 <baudrate_set+0x114>
    7740:	d905      	bls.n	774e <baudrate_set+0xb2>
    7742:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    7746:	d10f      	bne.n	7768 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    7748:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    774c:	e7cf      	b.n	76ee <baudrate_set+0x52>
	switch (baudrate) {
    774e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    7752:	4299      	cmp	r1, r3
    7754:	d02e      	beq.n	77b4 <baudrate_set+0x118>
    7756:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    775a:	d102      	bne.n	7762 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    775c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    7760:	e7c5      	b.n	76ee <baudrate_set+0x52>
	switch (baudrate) {
    7762:	f06f 0015 	mvn.w	r0, #21
    7766:	4770      	bx	lr
    7768:	f06f 0015 	mvn.w	r0, #21
    776c:	4770      	bx	lr
    776e:	4b1a      	ldr	r3, [pc, #104]	; (77d8 <baudrate_set+0x13c>)
    7770:	4299      	cmp	r1, r3
    7772:	d025      	beq.n	77c0 <baudrate_set+0x124>
    7774:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    7778:	d102      	bne.n	7780 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    777a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    777e:	e7b6      	b.n	76ee <baudrate_set+0x52>
	switch (baudrate) {
    7780:	f06f 0015 	mvn.w	r0, #21
    7784:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    7786:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    778a:	e7b0      	b.n	76ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    778c:	4b13      	ldr	r3, [pc, #76]	; (77dc <baudrate_set+0x140>)
    778e:	e7ae      	b.n	76ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    7790:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    7794:	e7ab      	b.n	76ee <baudrate_set+0x52>
	switch (baudrate) {
    7796:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    779a:	e7a8      	b.n	76ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    779c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    77a0:	e7a5      	b.n	76ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    77a2:	4b0f      	ldr	r3, [pc, #60]	; (77e0 <baudrate_set+0x144>)
    77a4:	e7a3      	b.n	76ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    77a6:	4b0f      	ldr	r3, [pc, #60]	; (77e4 <baudrate_set+0x148>)
    77a8:	e7a1      	b.n	76ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    77aa:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    77ae:	e79e      	b.n	76ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    77b0:	4b0d      	ldr	r3, [pc, #52]	; (77e8 <baudrate_set+0x14c>)
    77b2:	e79c      	b.n	76ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    77b4:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    77b8:	e799      	b.n	76ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    77ba:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    77be:	e796      	b.n	76ee <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    77c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    77c4:	e793      	b.n	76ee <baudrate_set+0x52>
	switch (baudrate) {
    77c6:	f06f 0015 	mvn.w	r0, #21
}
    77ca:	4770      	bx	lr
    77cc:	0013b000 	.word	0x0013b000
    77d0:	004ea000 	.word	0x004ea000
    77d4:	000f4240 	.word	0x000f4240
    77d8:	0003d090 	.word	0x0003d090
    77dc:	00275000 	.word	0x00275000
    77e0:	0075c000 	.word	0x0075c000
    77e4:	003af000 	.word	0x003af000
    77e8:	013a9000 	.word	0x013a9000

000077ec <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    77ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77f0:	4605      	mov	r5, r0
    77f2:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
    77f4:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    77f6:	f008 fed1 	bl	1059c <k_is_in_isr>
    77fa:	b920      	cbnz	r0, 7806 <uarte_nrfx_poll_out+0x1a>
	return !z_sys_post_kernel;
    77fc:	4b1e      	ldr	r3, [pc, #120]	; (7878 <uarte_nrfx_poll_out+0x8c>)
    77fe:	781b      	ldrb	r3, [r3, #0]
    7800:	b1a3      	cbz	r3, 782c <uarte_nrfx_poll_out+0x40>
    7802:	2300      	movs	r3, #0
    7804:	e000      	b.n	7808 <uarte_nrfx_poll_out+0x1c>
    7806:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    7808:	b9b3      	cbnz	r3, 7838 <uarte_nrfx_poll_out+0x4c>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    780a:	4628      	mov	r0, r5
    780c:	f008 f988 	bl	fb20 <wait_tx_ready>
    7810:	4606      	mov	r6, r0
	}

	data->char_out = c;
    7812:	4639      	mov	r1, r7
    7814:	f801 8f14 	strb.w	r8, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    7818:	2201      	movs	r2, #1
    781a:	4628      	mov	r0, r5
    781c:	f008 f8a3 	bl	f966 <tx_start>
    7820:	f386 8811 	msr	BASEPRI, r6
    7824:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    7828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    782c:	2301      	movs	r3, #1
    782e:	e7eb      	b.n	7808 <uarte_nrfx_poll_out+0x1c>
    7830:	f384 8811 	msr	BASEPRI, r4
    7834:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    7838:	f04f 0320 	mov.w	r3, #32
    783c:	f3ef 8411 	mrs	r4, BASEPRI
    7840:	f383 8812 	msr	BASEPRI_MAX, r3
    7844:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    7848:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    784a:	4628      	mov	r0, r5
    784c:	f008 f869 	bl	f922 <is_tx_ready>
    7850:	2800      	cmp	r0, #0
    7852:	d0ed      	beq.n	7830 <uarte_nrfx_poll_out+0x44>
				if (data->async && data->async->tx_size &&
    7854:	68fb      	ldr	r3, [r7, #12]
    7856:	2b00      	cmp	r3, #0
    7858:	d0db      	beq.n	7812 <uarte_nrfx_poll_out+0x26>
    785a:	68da      	ldr	r2, [r3, #12]
    785c:	2a00      	cmp	r2, #0
    785e:	d0d8      	beq.n	7812 <uarte_nrfx_poll_out+0x26>
					data->async->tx_amount < 0) {
    7860:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    7864:	2a00      	cmp	r2, #0
    7866:	dad4      	bge.n	7812 <uarte_nrfx_poll_out+0x26>
	const struct uarte_nrfx_config *config = dev->config;
    7868:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    786a:	6812      	ldr	r2, [r2, #0]
    p_reg->TXD.MAXCNT = length;
}

NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
    786c:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    7870:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    7874:	e7cd      	b.n	7812 <uarte_nrfx_poll_out+0x26>
    7876:	bf00      	nop
    7878:	2000d71d 	.word	0x2000d71d

0000787c <uarte_nrfx_rx_enable>:
{
    787c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7880:	4616      	mov	r6, r2
	struct uarte_nrfx_data *data = dev->data;
    7882:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *cfg = dev->config;
    7884:	f8d0 9004 	ldr.w	r9, [r0, #4]
	return config->uarte_regs;
    7888:	f8d9 5000 	ldr.w	r5, [r9]
	if (cfg->disable_rx) {
    788c:	f899 2008 	ldrb.w	r2, [r9, #8]
    7890:	b992      	cbnz	r2, 78b8 <uarte_nrfx_rx_enable+0x3c>
    7892:	4680      	mov	r8, r0
    7894:	460f      	mov	r7, r1
	if (data->async->rx_enabled) {
    7896:	68e2      	ldr	r2, [r4, #12]
    7898:	f892 10d2 	ldrb.w	r1, [r2, #210]	; 0xd2
    789c:	2900      	cmp	r1, #0
    789e:	f040 8084 	bne.w	79aa <uarte_nrfx_rx_enable+0x12e>
	data->async->rx_timeout = timeout;
    78a2:	67d3      	str	r3, [r2, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    78a4:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
    78a8:	dd19      	ble.n	78de <uarte_nrfx_rx_enable+0x62>
    78aa:	4a41      	ldr	r2, [pc, #260]	; (79b0 <uarte_nrfx_rx_enable+0x134>)
    78ac:	fb82 1203 	smull	r1, r2, r2, r3
    78b0:	17db      	asrs	r3, r3, #31
    78b2:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    78b6:	e013      	b.n	78e0 <uarte_nrfx_rx_enable+0x64>
		__ASSERT(false, "TX only UARTE instance");
    78b8:	4c3e      	ldr	r4, [pc, #248]	; (79b4 <uarte_nrfx_rx_enable+0x138>)
    78ba:	f240 337f 	movw	r3, #895	; 0x37f
    78be:	4622      	mov	r2, r4
    78c0:	493d      	ldr	r1, [pc, #244]	; (79b8 <uarte_nrfx_rx_enable+0x13c>)
    78c2:	483e      	ldr	r0, [pc, #248]	; (79bc <uarte_nrfx_rx_enable+0x140>)
    78c4:	f007 fccb 	bl	f25e <assert_print>
    78c8:	483d      	ldr	r0, [pc, #244]	; (79c0 <uarte_nrfx_rx_enable+0x144>)
    78ca:	f007 fcc8 	bl	f25e <assert_print>
    78ce:	f240 317f 	movw	r1, #895	; 0x37f
    78d2:	4620      	mov	r0, r4
    78d4:	f007 fcbc 	bl	f250 <assert_post_action>
		return -ENOTSUP;
    78d8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    78dc:	e03d      	b.n	795a <uarte_nrfx_rx_enable+0xde>
		MAX(timeout / RX_TIMEOUT_DIV,
    78de:	235c      	movs	r3, #92	; 0x5c
	data->async->rx_timeout_slab =
    78e0:	68e2      	ldr	r2, [r4, #12]
    78e2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	data->async->rx_buf = buf;
    78e6:	68e3      	ldr	r3, [r4, #12]
    78e8:	661f      	str	r7, [r3, #96]	; 0x60
	data->async->rx_buf_len = len;
    78ea:	68e3      	ldr	r3, [r4, #12]
    78ec:	665e      	str	r6, [r3, #100]	; 0x64
	data->async->rx_offset = 0;
    78ee:	68e2      	ldr	r2, [r4, #12]
    78f0:	2300      	movs	r3, #0
    78f2:	6693      	str	r3, [r2, #104]	; 0x68
	data->async->rx_next_buf = NULL;
    78f4:	68e2      	ldr	r2, [r4, #12]
    78f6:	66d3      	str	r3, [r2, #108]	; 0x6c
	data->async->rx_next_buf_len = 0;
    78f8:	68e2      	ldr	r2, [r4, #12]
    78fa:	6713      	str	r3, [r2, #112]	; 0x70
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    78fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
    7900:	f013 0f10 	tst.w	r3, #16
    7904:	d010      	beq.n	7928 <uarte_nrfx_rx_enable+0xac>
		if (data->async->rx_flush_cnt) {
    7906:	68e1      	ldr	r1, [r4, #12]
    7908:	f891 30d1 	ldrb.w	r3, [r1, #209]	; 0xd1
    790c:	b163      	cbz	r3, 7928 <uarte_nrfx_rx_enable+0xac>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    790e:	42b3      	cmp	r3, r6
    7910:	bf28      	it	cs
    7912:	4633      	movcs	r3, r6
    7914:	469a      	mov	sl, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    7916:	461a      	mov	r2, r3
    7918:	31cc      	adds	r1, #204	; 0xcc
    791a:	4638      	mov	r0, r7
    791c:	f008 ff2a 	bl	10774 <memcpy>
			buf += cpy_len;
    7920:	4457      	add	r7, sl
			if (!len) {
    7922:	ebb6 060a 	subs.w	r6, r6, sl
    7926:	d01a      	beq.n	795e <uarte_nrfx_rx_enable+0xe2>

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    7928:	f8c5 7534 	str.w	r7, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    792c:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7930:	2300      	movs	r3, #0
    7932:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    7936:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    793a:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
    793e:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	data->async->rx_enabled = true;
    7942:	68e3      	ldr	r3, [r4, #12]
    7944:	2201      	movs	r2, #1
    7946:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    794a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    794e:	f013 0f10 	tst.w	r3, #16
    7952:	d119      	bne.n	7988 <uarte_nrfx_rx_enable+0x10c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7954:	2301      	movs	r3, #1
    7956:	602b      	str	r3, [r5, #0]
	return 0;
    7958:	2000      	movs	r0, #0
}
    795a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				data->async->rx_flush_cnt -= cpy_len;
    795e:	68e2      	ldr	r2, [r4, #12]
    7960:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    7964:	eba3 030a 	sub.w	r3, r3, sl
    7968:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    796c:	4651      	mov	r1, sl
    796e:	4640      	mov	r0, r8
    7970:	f008 f848 	bl	fa04 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    7974:	68e1      	ldr	r1, [r4, #12]
    7976:	3160      	adds	r1, #96	; 0x60
    7978:	4640      	mov	r0, r8
    797a:	f008 f85b 	bl	fa34 <rx_buf_release>
				notify_rx_disable(dev);
    797e:	4640      	mov	r0, r8
    7980:	f008 f86f 	bl	fa62 <notify_rx_disable>
				return 0;
    7984:	2000      	movs	r0, #0
    7986:	e7e8      	b.n	795a <uarte_nrfx_rx_enable+0xde>
    7988:	f04f 0320 	mov.w	r3, #32
    798c:	f3ef 8411 	mrs	r4, BASEPRI
    7990:	f383 8812 	msr	BASEPRI_MAX, r3
    7994:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
    7998:	2102      	movs	r1, #2
    799a:	4640      	mov	r0, r8
    799c:	f007 ffd5 	bl	f94a <uarte_enable>
	__asm__ volatile(
    79a0:	f384 8811 	msr	BASEPRI, r4
    79a4:	f3bf 8f6f 	isb	sy
}
    79a8:	e7d4      	b.n	7954 <uarte_nrfx_rx_enable+0xd8>
		return -EBUSY;
    79aa:	f06f 000f 	mvn.w	r0, #15
    79ae:	e7d4      	b.n	795a <uarte_nrfx_rx_enable+0xde>
    79b0:	66666667 	.word	0x66666667
    79b4:	00012970 	.word	0x00012970
    79b8:	00011cc8 	.word	0x00011cc8
    79bc:	0001160c 	.word	0x0001160c
    79c0:	000129a4 	.word	0x000129a4

000079c4 <uarte_nrfx_tx>:
{
    79c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    79c8:	b083      	sub	sp, #12
    79ca:	4605      	mov	r5, r0
    79cc:	4698      	mov	r8, r3
	struct uarte_nrfx_data *data = dev->data;
    79ce:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    79d0:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    79d2:	6833      	ldr	r3, [r6, #0]
	__asm__ volatile(
    79d4:	f04f 0020 	mov.w	r0, #32
    79d8:	f3ef 8911 	mrs	r9, BASEPRI
    79dc:	f380 8812 	msr	BASEPRI_MAX, r0
    79e0:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
    79e4:	68e6      	ldr	r6, [r4, #12]
    79e6:	68f7      	ldr	r7, [r6, #12]
    79e8:	b9f7      	cbnz	r7, 7a28 <uarte_nrfx_tx+0x64>
	data->async->tx_size = len;
    79ea:	60f2      	str	r2, [r6, #12]
	data->async->tx_buf = buf;
    79ec:	68e0      	ldr	r0, [r4, #12]
    79ee:	6081      	str	r1, [r0, #8]
    p_reg->INTENSET = mask;
    79f0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    79f4:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    79f8:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    79fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    7a00:	d119      	bne.n	7a36 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
    7a02:	68e3      	ldr	r3, [r4, #12]
    7a04:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
    7a06:	68e3      	ldr	r3, [r4, #12]
    7a08:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
    7a0a:	4621      	mov	r1, r4
    7a0c:	4628      	mov	r0, r5
    7a0e:	f007 ffd6 	bl	f9be <start_tx_locked>
	__asm__ volatile(
    7a12:	f389 8811 	msr	BASEPRI, r9
    7a16:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    7a1a:	7ae3      	ldrb	r3, [r4, #11]
    7a1c:	2b01      	cmp	r3, #1
    7a1e:	d011      	beq.n	7a44 <uarte_nrfx_tx+0x80>
	return 0;
    7a20:	2000      	movs	r0, #0
}
    7a22:	b003      	add	sp, #12
    7a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7a28:	f389 8811 	msr	BASEPRI, r9
    7a2c:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    7a30:	f06f 000f 	mvn.w	r0, #15
    7a34:	e7f5      	b.n	7a22 <uarte_nrfx_tx+0x5e>
		data->async->tx_cache_offset = 0;
    7a36:	68e3      	ldr	r3, [r4, #12]
    7a38:	2200      	movs	r2, #0
    7a3a:	621a      	str	r2, [r3, #32]
		(void)setup_tx_cache(data);
    7a3c:	4620      	mov	r0, r4
    7a3e:	f008 f9ae 	bl	fd9e <setup_tx_cache>
    7a42:	e7e2      	b.n	7a0a <uarte_nrfx_tx+0x46>
	    && timeout != SYS_FOREVER_US) {
    7a44:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    7a48:	d101      	bne.n	7a4e <uarte_nrfx_tx+0x8a>
	return 0;
    7a4a:	2000      	movs	r0, #0
    7a4c:	e7e9      	b.n	7a22 <uarte_nrfx_tx+0x5e>
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    7a4e:	68e4      	ldr	r4, [r4, #12]
    7a50:	3428      	adds	r4, #40	; 0x28
    7a52:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
    7a56:	17c1      	asrs	r1, r0, #31
			return ((t * to_hz + off) / from_hz);
    7a58:	03c9      	lsls	r1, r1, #15
    7a5a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    7a5e:	03c0      	lsls	r0, r0, #15
    7a60:	4b09      	ldr	r3, [pc, #36]	; (7a88 <uarte_nrfx_tx+0xc4>)
    7a62:	18c0      	adds	r0, r0, r3
    7a64:	4a09      	ldr	r2, [pc, #36]	; (7a8c <uarte_nrfx_tx+0xc8>)
    7a66:	f04f 0300 	mov.w	r3, #0
    7a6a:	f141 0100 	adc.w	r1, r1, #0
    7a6e:	f7f8 ffb5 	bl	9dc <__aeabi_uldivmod>
    7a72:	4602      	mov	r2, r0
    7a74:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    7a76:	2000      	movs	r0, #0
    7a78:	2100      	movs	r1, #0
    7a7a:	e9cd 0100 	strd	r0, r1, [sp]
    7a7e:	4620      	mov	r0, r4
    7a80:	f005 fae8 	bl	d054 <z_impl_k_timer_start>
	return 0;
    7a84:	2000      	movs	r0, #0
    7a86:	e7cc      	b.n	7a22 <uarte_nrfx_tx+0x5e>
    7a88:	000f423f 	.word	0x000f423f
    7a8c:	000f4240 	.word	0x000f4240

00007a90 <rxstarted_isr>:
{
    7a90:	b510      	push	{r4, lr}
    7a92:	b088      	sub	sp, #32
	struct uarte_nrfx_data *data = dev->data;
    7a94:	6904      	ldr	r4, [r0, #16]
	struct uart_event evt = {
    7a96:	2300      	movs	r3, #0
    7a98:	9303      	str	r3, [sp, #12]
    7a9a:	9304      	str	r3, [sp, #16]
    7a9c:	9305      	str	r3, [sp, #20]
    7a9e:	9306      	str	r3, [sp, #24]
    7aa0:	9307      	str	r3, [sp, #28]
    7aa2:	2303      	movs	r3, #3
    7aa4:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    7aa8:	a903      	add	r1, sp, #12
    7aaa:	f007 ffa3 	bl	f9f4 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    7aae:	68e3      	ldr	r3, [r4, #12]
    7ab0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    7ab2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    7ab6:	d101      	bne.n	7abc <rxstarted_isr+0x2c>
}
    7ab8:	b008      	add	sp, #32
    7aba:	bd10      	pop	{r4, pc}
		data->async->rx_timeout_left = data->async->rx_timeout;
    7abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		k_timer_start(&data->async->rx_timeout_timer,
    7ac0:	68e3      	ldr	r3, [r4, #12]
    7ac2:	f103 0488 	add.w	r4, r3, #136	; 0x88
			      K_USEC(data->async->rx_timeout_slab),
    7ac6:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    7aca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    7ace:	17c1      	asrs	r1, r0, #31
    7ad0:	03c9      	lsls	r1, r1, #15
    7ad2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    7ad6:	03c0      	lsls	r0, r0, #15
    7ad8:	4b08      	ldr	r3, [pc, #32]	; (7afc <rxstarted_isr+0x6c>)
    7ada:	18c0      	adds	r0, r0, r3
    7adc:	4a08      	ldr	r2, [pc, #32]	; (7b00 <rxstarted_isr+0x70>)
    7ade:	f04f 0300 	mov.w	r3, #0
    7ae2:	f141 0100 	adc.w	r1, r1, #0
    7ae6:	f7f8 ff79 	bl	9dc <__aeabi_uldivmod>
    7aea:	4602      	mov	r2, r0
    7aec:	460b      	mov	r3, r1
    7aee:	9000      	str	r0, [sp, #0]
    7af0:	9101      	str	r1, [sp, #4]
    7af2:	4620      	mov	r0, r4
    7af4:	f005 faae 	bl	d054 <z_impl_k_timer_start>
}
    7af8:	e7de      	b.n	7ab8 <rxstarted_isr+0x28>
    7afa:	bf00      	nop
    7afc:	000f423f 	.word	0x000f423f
    7b00:	000f4240 	.word	0x000f4240

00007b04 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    7b04:	b530      	push	{r4, r5, lr}
    7b06:	b085      	sub	sp, #20
    7b08:	4604      	mov	r4, r0
    7b0a:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    7b0c:	f101 0016 	add.w	r0, r1, #22
    7b10:	f002 fa8a 	bl	a028 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    7b14:	4b11      	ldr	r3, [pc, #68]	; (7b5c <endtx_stoptx_ppi_init+0x58>)
    7b16:	4298      	cmp	r0, r3
    7b18:	d112      	bne.n	7b40 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    7b1a:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    7b1c:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    7b20:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    7b22:	4a0f      	ldr	r2, [pc, #60]	; (7b60 <endtx_stoptx_ppi_init+0x5c>)
    7b24:	33a2      	adds	r3, #162	; 0xa2
    7b26:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    7b2a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7b2e:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    7b30:	7da9      	ldrb	r1, [r5, #22]
    7b32:	2301      	movs	r3, #1
    7b34:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    7b36:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    7b3a:	2000      	movs	r0, #0
}
    7b3c:	b005      	add	sp, #20
    7b3e:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    7b40:	4b08      	ldr	r3, [pc, #32]	; (7b64 <endtx_stoptx_ppi_init+0x60>)
    7b42:	9302      	str	r3, [sp, #8]
    7b44:	2000      	movs	r0, #0
    7b46:	9001      	str	r0, [sp, #4]
    7b48:	9000      	str	r0, [sp, #0]
    7b4a:	4603      	mov	r3, r0
    7b4c:	2201      	movs	r2, #1
    7b4e:	4906      	ldr	r1, [pc, #24]	; (7b68 <endtx_stoptx_ppi_init+0x64>)
    7b50:	f008 f93e 	bl	fdd0 <z_log_msg2_runtime_create>
		return -EIO;
    7b54:	f06f 0004 	mvn.w	r0, #4
    7b58:	e7f0      	b.n	7b3c <endtx_stoptx_ppi_init+0x38>
    7b5a:	bf00      	nop
    7b5c:	0bad0000 	.word	0x0bad0000
    7b60:	4001f000 	.word	0x4001f000
    7b64:	000129c0 	.word	0x000129c0
    7b68:	00011058 	.word	0x00011058

00007b6c <uarte_nrfx_init>:
{
    7b6c:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = dev->data;
    7b6e:	6905      	ldr	r5, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    7b70:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    7b72:	681c      	ldr	r4, [r3, #0]
	int ret = uarte_nrfx_rx_counting_init(dev);
    7b74:	f007 ff1c 	bl	f9b0 <uarte_nrfx_rx_counting_init>
	if (ret != 0) {
    7b78:	4606      	mov	r6, r0
    7b7a:	bb90      	cbnz	r0, 7be2 <uarte_nrfx_init+0x76>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    7b7c:	68eb      	ldr	r3, [r5, #12]
    7b7e:	2201      	movs	r2, #1
    7b80:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    p_reg->INTENSET = mask;
    7b84:	4b18      	ldr	r3, [pc, #96]	; (7be8 <uarte_nrfx_init+0x7c>)
    7b86:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    7b8a:	2308      	movs	r3, #8
    7b8c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7b90:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    7b94:	b1a3      	cbz	r3, 7bc0 <uarte_nrfx_init+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7b96:	6062      	str	r2, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7b98:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    7b9c:	b91b      	cbnz	r3, 7ba6 <uarte_nrfx_init+0x3a>
    7b9e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    7ba2:	2b00      	cmp	r3, #0
    7ba4:	d0f8      	beq.n	7b98 <uarte_nrfx_init+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7ba6:	2300      	movs	r3, #0
    7ba8:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    7bac:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
    7bb0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    7bb4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    7bb8:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    7bbc:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    7bc0:	68e8      	ldr	r0, [r5, #12]
    7bc2:	2200      	movs	r2, #0
    7bc4:	4909      	ldr	r1, [pc, #36]	; (7bec <uarte_nrfx_init+0x80>)
    7bc6:	3088      	adds	r0, #136	; 0x88
    7bc8:	f008 fd82 	bl	106d0 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    7bcc:	68eb      	ldr	r3, [r5, #12]
	timer->user_data = user_data;
    7bce:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    7bd2:	68e8      	ldr	r0, [r5, #12]
    7bd4:	2200      	movs	r2, #0
    7bd6:	4906      	ldr	r1, [pc, #24]	; (7bf0 <uarte_nrfx_init+0x84>)
    7bd8:	3028      	adds	r0, #40	; 0x28
    7bda:	f008 fd79 	bl	106d0 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    7bde:	68eb      	ldr	r3, [r5, #12]
    7be0:	65dd      	str	r5, [r3, #92]	; 0x5c
}
    7be2:	4630      	mov	r0, r6
    7be4:	bd70      	pop	{r4, r5, r6, pc}
    7be6:	bf00      	nop
    7be8:	000a0210 	.word	0x000a0210
    7bec:	0000fc45 	.word	0x0000fc45
    7bf0:	0000fc39 	.word	0x0000fc39

00007bf4 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    7bf4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    7bf8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    7bfc:	4b01      	ldr	r3, [pc, #4]	; (7c04 <set_comparator+0x10>)
    7bfe:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    7c02:	4770      	bx	lr
    7c04:	40011000 	.word	0x40011000

00007c08 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    7c08:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    7c0c:	4b01      	ldr	r3, [pc, #4]	; (7c14 <get_comparator+0xc>)
    7c0e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    7c12:	4770      	bx	lr
    7c14:	40011000 	.word	0x40011000

00007c18 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7c18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7c1c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    7c1e:	4a02      	ldr	r2, [pc, #8]	; (7c28 <event_enable+0x10>)
    7c20:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    7c24:	4770      	bx	lr
    7c26:	bf00      	nop
    7c28:	40011000 	.word	0x40011000

00007c2c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7c30:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    7c32:	4a02      	ldr	r2, [pc, #8]	; (7c3c <event_disable+0x10>)
    7c34:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    7c38:	4770      	bx	lr
    7c3a:	bf00      	nop
    7c3c:	40011000 	.word	0x40011000

00007c40 <counter>:
     return p_reg->COUNTER;
    7c40:	4b01      	ldr	r3, [pc, #4]	; (7c48 <counter+0x8>)
    7c42:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    7c46:	4770      	bx	lr
    7c48:	40011000 	.word	0x40011000

00007c4c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    7c4c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    7c4e:	2301      	movs	r3, #1
    7c50:	4083      	lsls	r3, r0
    7c52:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7c56:	4a10      	ldr	r2, [pc, #64]	; (7c98 <compare_int_lock+0x4c>)
    7c58:	f3bf 8f5b 	dmb	ish
    7c5c:	e852 1f00 	ldrex	r1, [r2]
    7c60:	ea01 0e0c 	and.w	lr, r1, ip
    7c64:	e842 e400 	strex	r4, lr, [r2]
    7c68:	2c00      	cmp	r4, #0
    7c6a:	d1f7      	bne.n	7c5c <compare_int_lock+0x10>
    7c6c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7c70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    7c74:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    7c78:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    7c7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    7c80:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    7c84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7c88:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    7c8c:	420b      	tst	r3, r1
}
    7c8e:	bf14      	ite	ne
    7c90:	2001      	movne	r0, #1
    7c92:	2000      	moveq	r0, #0
    7c94:	bd10      	pop	{r4, pc}
    7c96:	bf00      	nop
    7c98:	2000d014 	.word	0x2000d014

00007c9c <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    7c9c:	b570      	push	{r4, r5, r6, lr}
    7c9e:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    7ca0:	f008 fac4 	bl	1022c <full_int_lock>
    7ca4:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    7ca6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7caa:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    7cac:	4a17      	ldr	r2, [pc, #92]	; (7d0c <channel_processing_check_and_clear+0x70>)
    7cae:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    7cb2:	4213      	tst	r3, r2
    7cb4:	d105      	bne.n	7cc2 <channel_processing_check_and_clear+0x26>
	bool result = false;
    7cb6:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    7cb8:	4628      	mov	r0, r5
    7cba:	f008 fac0 	bl	1023e <full_int_unlock>

	return result;
}
    7cbe:	4630      	mov	r0, r6
    7cc0:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    7cc2:	2301      	movs	r3, #1
    7cc4:	40a3      	lsls	r3, r4
    7cc6:	43db      	mvns	r3, r3
    7cc8:	4a11      	ldr	r2, [pc, #68]	; (7d10 <channel_processing_check_and_clear+0x74>)
    7cca:	f3bf 8f5b 	dmb	ish
    7cce:	e852 1f00 	ldrex	r1, [r2]
    7cd2:	ea01 0003 	and.w	r0, r1, r3
    7cd6:	e842 0600 	strex	r6, r0, [r2]
    7cda:	2e00      	cmp	r6, #0
    7cdc:	d1f7      	bne.n	7cce <channel_processing_check_and_clear+0x32>
    7cde:	f3bf 8f5b 	dmb	ish
    7ce2:	b959      	cbnz	r1, 7cfc <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7ce4:	f104 0350 	add.w	r3, r4, #80	; 0x50
    7ce8:	009b      	lsls	r3, r3, #2
    7cea:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7cec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7cf0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    7cf4:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    7cf6:	b113      	cbz	r3, 7cfe <channel_processing_check_and_clear+0x62>
    7cf8:	2301      	movs	r3, #1
    7cfa:	e000      	b.n	7cfe <channel_processing_check_and_clear+0x62>
    7cfc:	2301      	movs	r3, #1
		if (result) {
    7cfe:	461e      	mov	r6, r3
    7d00:	2b00      	cmp	r3, #0
    7d02:	d0d9      	beq.n	7cb8 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    7d04:	4620      	mov	r0, r4
    7d06:	f008 fa82 	bl	1020e <event_clear>
    7d0a:	e7d5      	b.n	7cb8 <channel_processing_check_and_clear+0x1c>
    7d0c:	40011000 	.word	0x40011000
    7d10:	2000d010 	.word	0x2000d010

00007d14 <compare_int_unlock>:
	if (key) {
    7d14:	b901      	cbnz	r1, 7d18 <compare_int_unlock+0x4>
}
    7d16:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    7d18:	2301      	movs	r3, #1
    7d1a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7d1c:	4a11      	ldr	r2, [pc, #68]	; (7d64 <compare_int_unlock+0x50>)
    7d1e:	f3bf 8f5b 	dmb	ish
    7d22:	e852 1f00 	ldrex	r1, [r2]
    7d26:	4319      	orrs	r1, r3
    7d28:	e842 1c00 	strex	ip, r1, [r2]
    7d2c:	f1bc 0f00 	cmp.w	ip, #0
    7d30:	d1f7      	bne.n	7d22 <compare_int_unlock+0xe>
    7d32:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7d36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    7d3a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    7d3c:	4a0a      	ldr	r2, [pc, #40]	; (7d68 <compare_int_unlock+0x54>)
    7d3e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7d42:	f3bf 8f5b 	dmb	ish
    7d46:	4b09      	ldr	r3, [pc, #36]	; (7d6c <compare_int_unlock+0x58>)
    7d48:	681b      	ldr	r3, [r3, #0]
    7d4a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    7d4e:	fa23 f000 	lsr.w	r0, r3, r0
    7d52:	f010 0f01 	tst.w	r0, #1
    7d56:	d0de      	beq.n	7d16 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7d58:	4b05      	ldr	r3, [pc, #20]	; (7d70 <compare_int_unlock+0x5c>)
    7d5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7d5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    7d62:	e7d8      	b.n	7d16 <compare_int_unlock+0x2>
    7d64:	2000d014 	.word	0x2000d014
    7d68:	40011000 	.word	0x40011000
    7d6c:	2000d010 	.word	0x2000d010
    7d70:	e000e100 	.word	0xe000e100

00007d74 <sys_clock_timeout_handler>:
{
    7d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7d78:	4607      	mov	r7, r0
    7d7a:	4614      	mov	r4, r2
    7d7c:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    7d7e:	4610      	mov	r0, r2
    7d80:	4619      	mov	r1, r3
    7d82:	f008 fa50 	bl	10226 <absolute_time_to_cc>
    7d86:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    7d88:	4b15      	ldr	r3, [pc, #84]	; (7de0 <sys_clock_timeout_handler+0x6c>)
    7d8a:	681a      	ldr	r2, [r3, #0]
    7d8c:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    7d8e:	601c      	str	r4, [r3, #0]
    7d90:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    7d92:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    7d96:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    7d9a:	d309      	bcc.n	7db0 <sys_clock_timeout_handler+0x3c>
	return false;
    7d9c:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    7d9e:	f004 ff6d 	bl	cc7c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    7da2:	4638      	mov	r0, r7
    7da4:	f7ff ff30 	bl	7c08 <get_comparator>
    7da8:	42a8      	cmp	r0, r5
    7daa:	d00e      	beq.n	7dca <sys_clock_timeout_handler+0x56>
}
    7dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    7db0:	4b0c      	ldr	r3, [pc, #48]	; (7de4 <sys_clock_timeout_handler+0x70>)
    7db2:	681b      	ldr	r3, [r3, #0]
    7db4:	0a1a      	lsrs	r2, r3, #8
    7db6:	061b      	lsls	r3, r3, #24
    7db8:	eb15 0803 	adds.w	r8, r5, r3
    7dbc:	f142 0900 	adc.w	r9, r2, #0
    7dc0:	4b09      	ldr	r3, [pc, #36]	; (7de8 <sys_clock_timeout_handler+0x74>)
    7dc2:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    7dc6:	2401      	movs	r4, #1
    7dc8:	e7e9      	b.n	7d9e <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    7dca:	b11c      	cbz	r4, 7dd4 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    7dcc:	4638      	mov	r0, r7
    7dce:	f7ff ff23 	bl	7c18 <event_enable>
}
    7dd2:	e7eb      	b.n	7dac <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    7dd4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    7dd8:	4638      	mov	r0, r7
    7dda:	f7ff ff0b 	bl	7bf4 <set_comparator>
    7dde:	e7f5      	b.n	7dcc <sys_clock_timeout_handler+0x58>
    7de0:	200047c0 	.word	0x200047c0
    7de4:	2000d018 	.word	0x2000d018
    7de8:	200047a8 	.word	0x200047a8

00007dec <z_nrf_rtc_timer_read>:
{
    7dec:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    7dee:	4b0d      	ldr	r3, [pc, #52]	; (7e24 <z_nrf_rtc_timer_read+0x38>)
    7df0:	681c      	ldr	r4, [r3, #0]
    7df2:	0a25      	lsrs	r5, r4, #8
    7df4:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    7df6:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    7dfa:	f7ff ff21 	bl	7c40 <counter>
    7dfe:	4603      	mov	r3, r0
	val += cntr;
    7e00:	1900      	adds	r0, r0, r4
    7e02:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    7e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    7e0a:	d20a      	bcs.n	7e22 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    7e0c:	4b06      	ldr	r3, [pc, #24]	; (7e28 <z_nrf_rtc_timer_read+0x3c>)
    7e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7e12:	4290      	cmp	r0, r2
    7e14:	eb71 0303 	sbcs.w	r3, r1, r3
    7e18:	d203      	bcs.n	7e22 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    7e1a:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    7e1e:	f141 0100 	adc.w	r1, r1, #0
}
    7e22:	bd38      	pop	{r3, r4, r5, pc}
    7e24:	2000d018 	.word	0x2000d018
    7e28:	200047a8 	.word	0x200047a8

00007e2c <compare_set_nolocks>:
{
    7e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e2e:	4606      	mov	r6, r0
    7e30:	4614      	mov	r4, r2
    7e32:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    7e34:	4610      	mov	r0, r2
    7e36:	4619      	mov	r1, r3
    7e38:	f008 f9f5 	bl	10226 <absolute_time_to_cc>
    7e3c:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    7e3e:	f7ff ffd5 	bl	7dec <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    7e42:	42a0      	cmp	r0, r4
    7e44:	eb71 0305 	sbcs.w	r3, r1, r5
    7e48:	d21d      	bcs.n	7e86 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    7e4a:	1a23      	subs	r3, r4, r0
    7e4c:	eb65 0101 	sbc.w	r1, r5, r1
    7e50:	4a1b      	ldr	r2, [pc, #108]	; (7ec0 <compare_set_nolocks+0x94>)
    7e52:	4293      	cmp	r3, r2
    7e54:	f171 0300 	sbcs.w	r3, r1, #0
    7e58:	d22f      	bcs.n	7eba <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    7e5a:	4b1a      	ldr	r3, [pc, #104]	; (7ec4 <compare_set_nolocks+0x98>)
    7e5c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    7e60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    7e64:	42ab      	cmp	r3, r5
    7e66:	bf08      	it	eq
    7e68:	42a2      	cmpeq	r2, r4
    7e6a:	d01a      	beq.n	7ea2 <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    7e6c:	4639      	mov	r1, r7
    7e6e:	4630      	mov	r0, r6
    7e70:	f008 f9ea 	bl	10248 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    7e74:	4639      	mov	r1, r7
    7e76:	f008 f9c6 	bl	10206 <counter_sub>
    7e7a:	1900      	adds	r0, r0, r4
    7e7c:	f145 0300 	adc.w	r3, r5, #0
    7e80:	4604      	mov	r4, r0
    7e82:	461d      	mov	r5, r3
    7e84:	e00d      	b.n	7ea2 <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    7e86:	2301      	movs	r3, #1
    7e88:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7e8a:	4a0f      	ldr	r2, [pc, #60]	; (7ec8 <compare_set_nolocks+0x9c>)
    7e8c:	f3bf 8f5b 	dmb	ish
    7e90:	e852 1f00 	ldrex	r1, [r2]
    7e94:	4319      	orrs	r1, r3
    7e96:	e842 1000 	strex	r0, r1, [r2]
    7e9a:	2800      	cmp	r0, #0
    7e9c:	d1f8      	bne.n	7e90 <compare_set_nolocks+0x64>
    7e9e:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    7ea2:	4b08      	ldr	r3, [pc, #32]	; (7ec4 <compare_set_nolocks+0x98>)
    7ea4:	0132      	lsls	r2, r6, #4
    7ea6:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    7eaa:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    7eae:	9906      	ldr	r1, [sp, #24]
    7eb0:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    7eb2:	9b07      	ldr	r3, [sp, #28]
    7eb4:	6073      	str	r3, [r6, #4]
	return ret;
    7eb6:	2000      	movs	r0, #0
}
    7eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    7eba:	f06f 0015 	mvn.w	r0, #21
    7ebe:	e7fb      	b.n	7eb8 <compare_set_nolocks+0x8c>
    7ec0:	01000001 	.word	0x01000001
    7ec4:	200047b0 	.word	0x200047b0
    7ec8:	2000d010 	.word	0x2000d010

00007ecc <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    7ecc:	b530      	push	{r4, r5, lr}
    7ece:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    7ed0:	2300      	movs	r3, #0
    7ed2:	4a1d      	ldr	r2, [pc, #116]	; (7f48 <sys_clock_driver_init+0x7c>)
    7ed4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    7ed8:	2b00      	cmp	r3, #0
    7eda:	dd24      	ble.n	7f26 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    7edc:	4c1a      	ldr	r4, [pc, #104]	; (7f48 <sys_clock_driver_init+0x7c>)
    7ede:	2502      	movs	r5, #2
    7ee0:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7ee4:	4b19      	ldr	r3, [pc, #100]	; (7f4c <sys_clock_driver_init+0x80>)
    7ee6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7eea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    7eee:	2200      	movs	r2, #0
    7ef0:	2101      	movs	r1, #1
    7ef2:	2011      	movs	r0, #17
    7ef4:	f7fd ff78 	bl	5de8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    7ef8:	2011      	movs	r0, #17
    7efa:	f7fd ff59 	bl	5db0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    7efe:	2301      	movs	r3, #1
    7f00:	60a3      	str	r3, [r4, #8]
    7f02:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    7f04:	4a12      	ldr	r2, [pc, #72]	; (7f50 <sys_clock_driver_init+0x84>)
    7f06:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    7f08:	2400      	movs	r4, #0
    7f0a:	9401      	str	r4, [sp, #4]
    7f0c:	4b11      	ldr	r3, [pc, #68]	; (7f54 <sys_clock_driver_init+0x88>)
    7f0e:	9300      	str	r3, [sp, #0]
    7f10:	4a11      	ldr	r2, [pc, #68]	; (7f58 <sys_clock_driver_init+0x8c>)
    7f12:	2300      	movs	r3, #0
    7f14:	4620      	mov	r0, r4
    7f16:	f008 f9d2 	bl	102be <compare_set>

	z_nrf_clock_control_lf_on(mode);
    7f1a:	4628      	mov	r0, r5
    7f1c:	f7ff f924 	bl	7168 <z_nrf_clock_control_lf_on>

	return 0;
}
    7f20:	4620      	mov	r0, r4
    7f22:	b003      	add	sp, #12
    7f24:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    7f26:	4a0d      	ldr	r2, [pc, #52]	; (7f5c <sys_clock_driver_init+0x90>)
    7f28:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    7f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7f30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7f34:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7f38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    7f3c:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    7f3e:	4902      	ldr	r1, [pc, #8]	; (7f48 <sys_clock_driver_init+0x7c>)
    7f40:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    7f44:	3301      	adds	r3, #1
    7f46:	e7c7      	b.n	7ed8 <sys_clock_driver_init+0xc>
    7f48:	40011000 	.word	0x40011000
    7f4c:	e000e100 	.word	0xe000e100
    7f50:	2000d014 	.word	0x2000d014
    7f54:	00007d75 	.word	0x00007d75
    7f58:	007fffff 	.word	0x007fffff
    7f5c:	200047b0 	.word	0x200047b0

00007f60 <process_channel>:
{
    7f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f64:	b082      	sub	sp, #8
    7f66:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    7f68:	f7ff fe98 	bl	7c9c <channel_processing_check_and_clear>
    7f6c:	b910      	cbnz	r0, 7f74 <process_channel+0x14>
}
    7f6e:	b002      	add	sp, #8
    7f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    7f74:	f7ff ff3a 	bl	7dec <z_nrf_rtc_timer_read>
    7f78:	4682      	mov	sl, r0
    7f7a:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    7f7c:	f008 f956 	bl	1022c <full_int_lock>
    7f80:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    7f82:	4b13      	ldr	r3, [pc, #76]	; (7fd0 <process_channel+0x70>)
    7f84:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    7f88:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    7f8c:	45c2      	cmp	sl, r8
    7f8e:	eb76 0309 	sbcs.w	r3, r6, r9
    7f92:	d20b      	bcs.n	7fac <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    7f94:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    7f96:	4628      	mov	r0, r5
    7f98:	f008 f951 	bl	1023e <full_int_unlock>
		if (handler) {
    7f9c:	2e00      	cmp	r6, #0
    7f9e:	d0e6      	beq.n	7f6e <process_channel+0xe>
			handler(chan, expire_time, user_context);
    7fa0:	9700      	str	r7, [sp, #0]
    7fa2:	4642      	mov	r2, r8
    7fa4:	464b      	mov	r3, r9
    7fa6:	4620      	mov	r0, r4
    7fa8:	47b0      	blx	r6
}
    7faa:	e7e0      	b.n	7f6e <process_channel+0xe>
			handler = cc_data[chan].callback;
    7fac:	4a08      	ldr	r2, [pc, #32]	; (7fd0 <process_channel+0x70>)
    7fae:	0123      	lsls	r3, r4, #4
    7fb0:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    7fb4:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    7fb6:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    7fb8:	2000      	movs	r0, #0
    7fba:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    7fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7fc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    7fc8:	4620      	mov	r0, r4
    7fca:	f7ff fe2f 	bl	7c2c <event_disable>
    7fce:	e7e2      	b.n	7f96 <process_channel+0x36>
    7fd0:	200047b0 	.word	0x200047b0

00007fd4 <rtc_nrf_isr>:
{
    7fd4:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    7fd6:	4b0e      	ldr	r3, [pc, #56]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7fd8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    7fdc:	f013 0f02 	tst.w	r3, #2
    7fe0:	d00d      	beq.n	7ffe <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7fe2:	4b0b      	ldr	r3, [pc, #44]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7fe4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    7fe8:	b14b      	cbz	r3, 7ffe <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7fea:	4b09      	ldr	r3, [pc, #36]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7fec:	2200      	movs	r2, #0
    7fee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7ff2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    7ff6:	4a07      	ldr	r2, [pc, #28]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7ff8:	6813      	ldr	r3, [r2, #0]
    7ffa:	3301      	adds	r3, #1
    7ffc:	6013      	str	r3, [r2, #0]
{
    7ffe:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    8000:	2c00      	cmp	r4, #0
    8002:	dd00      	ble.n	8006 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6>
}
    8004:	bd10      	pop	{r4, pc}
		process_channel(chan);
    8006:	4620      	mov	r0, r4
    8008:	f7ff ffaa 	bl	7f60 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    800c:	3401      	adds	r4, #1
    800e:	e7f7      	b.n	8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>
    8010:	40011000 	.word	0x40011000
    8014:	2000d018 	.word	0x2000d018

00008018 <sys_clock_set_timeout>:
{
    8018:	b510      	push	{r4, lr}
    801a:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    801c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    8020:	d006      	beq.n	8030 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    8022:	2801      	cmp	r0, #1
    8024:	dd06      	ble.n	8034 <sys_clock_set_timeout+0x1c>
    8026:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    802a:	da05      	bge.n	8038 <sys_clock_set_timeout+0x20>
    802c:	1e44      	subs	r4, r0, #1
    802e:	e004      	b.n	803a <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    8030:	480f      	ldr	r0, [pc, #60]	; (8070 <sys_clock_set_timeout+0x58>)
    8032:	e7f8      	b.n	8026 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    8034:	2400      	movs	r4, #0
    8036:	e000      	b.n	803a <sys_clock_set_timeout+0x22>
    8038:	4c0d      	ldr	r4, [pc, #52]	; (8070 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    803a:	f7ff fed7 	bl	7dec <z_nrf_rtc_timer_read>
    803e:	4b0d      	ldr	r3, [pc, #52]	; (8074 <sys_clock_set_timeout+0x5c>)
    8040:	6819      	ldr	r1, [r3, #0]
    8042:	685b      	ldr	r3, [r3, #4]
    8044:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    8046:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    804a:	d300      	bcc.n	804e <sys_clock_set_timeout+0x36>
		ticks = 0;
    804c:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    804e:	4420      	add	r0, r4
    8050:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    8052:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    8056:	d300      	bcc.n	805a <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    8058:	4a05      	ldr	r2, [pc, #20]	; (8070 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    805a:	2000      	movs	r0, #0
    805c:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    805e:	9001      	str	r0, [sp, #4]
    8060:	4905      	ldr	r1, [pc, #20]	; (8078 <sys_clock_set_timeout+0x60>)
    8062:	9100      	str	r1, [sp, #0]
    8064:	f143 0300 	adc.w	r3, r3, #0
    8068:	f008 f929 	bl	102be <compare_set>
}
    806c:	b002      	add	sp, #8
    806e:	bd10      	pop	{r4, pc}
    8070:	007fffff 	.word	0x007fffff
    8074:	200047c0 	.word	0x200047c0
    8078:	00007d75 	.word	0x00007d75

0000807c <sys_clock_elapsed>:
{
    807c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    807e:	f7ff feb5 	bl	7dec <z_nrf_rtc_timer_read>
    8082:	4b02      	ldr	r3, [pc, #8]	; (808c <sys_clock_elapsed+0x10>)
    8084:	681b      	ldr	r3, [r3, #0]
}
    8086:	1ac0      	subs	r0, r0, r3
    8088:	bd08      	pop	{r3, pc}
    808a:	bf00      	nop
    808c:	200047c0 	.word	0x200047c0

00008090 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    8090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8094:	460c      	mov	r4, r1
    8096:	4691      	mov	r9, r2
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    8098:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    809c:	d002      	beq.n	80a4 <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    809e:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    80a2:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    80a4:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    80a8:	f3c0 1881 	ubfx	r8, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    80ac:	f3c0 2703 	ubfx	r7, r0, #8, #4
    uint32_t port = pin_number >> 5;
    80b0:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    80b4:	f010 0f20 	tst.w	r0, #32
    80b8:	d01d      	beq.n	80f6 <nrf_pin_configure+0x66>
    80ba:	b1fb      	cbz	r3, 80fc <nrf_pin_configure+0x6c>
            mask = P1_FEATURE_PINS_PRESENT;
    80bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    80c0:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    80c4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    80c6:	f013 0f01 	tst.w	r3, #1
    80ca:	d019      	beq.n	8100 <nrf_pin_configure+0x70>
    *p_pin = pin_number & 0x1F;
    80cc:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    80d0:	096d      	lsrs	r5, r5, #5
    80d2:	d023      	beq.n	811c <nrf_pin_configure+0x8c>
    80d4:	bb2d      	cbnz	r5, 8122 <nrf_pin_configure+0x92>
            NRFX_ASSERT(0);
    80d6:	4d19      	ldr	r5, [pc, #100]	; (813c <nrf_pin_configure+0xac>)
    80d8:	f240 232e 	movw	r3, #558	; 0x22e
    80dc:	462a      	mov	r2, r5
    80de:	4918      	ldr	r1, [pc, #96]	; (8140 <nrf_pin_configure+0xb0>)
    80e0:	4818      	ldr	r0, [pc, #96]	; (8144 <nrf_pin_configure+0xb4>)
    80e2:	f007 f8bc 	bl	f25e <assert_print>
    80e6:	f240 212e 	movw	r1, #558	; 0x22e
    80ea:	4628      	mov	r0, r5
    80ec:	f007 f8b0 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    80f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    80f4:	e016      	b.n	8124 <nrf_pin_configure+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    80f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    80fa:	e7e1      	b.n	80c0 <nrf_pin_configure+0x30>
    switch (port)
    80fc:	2300      	movs	r3, #0
    80fe:	e7df      	b.n	80c0 <nrf_pin_configure+0x30>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8100:	4e0e      	ldr	r6, [pc, #56]	; (813c <nrf_pin_configure+0xac>)
    8102:	f240 2329 	movw	r3, #553	; 0x229
    8106:	4632      	mov	r2, r6
    8108:	490f      	ldr	r1, [pc, #60]	; (8148 <nrf_pin_configure+0xb8>)
    810a:	480e      	ldr	r0, [pc, #56]	; (8144 <nrf_pin_configure+0xb4>)
    810c:	f007 f8a7 	bl	f25e <assert_print>
    8110:	f240 2129 	movw	r1, #553	; 0x229
    8114:	4630      	mov	r0, r6
    8116:	f007 f89b 	bl	f250 <assert_post_action>
    811a:	e7d7      	b.n	80cc <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
    811c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8120:	e000      	b.n	8124 <nrf_pin_configure+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8122:	4b0a      	ldr	r3, [pc, #40]	; (814c <nrf_pin_configure+0xbc>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    8124:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    8128:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    812c:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    8130:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    8134:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
}
    8138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    813c:	000128c4 	.word	0x000128c4
    8140:	00011cc8 	.word	0x00011cc8
    8144:	0001160c 	.word	0x0001160c
    8148:	000128f8 	.word	0x000128f8
    814c:	50000300 	.word	0x50000300

00008150 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    8150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8154:	4605      	mov	r5, r0
    8156:	460e      	mov	r6, r1
    8158:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    815a:	2400      	movs	r4, #0
    815c:	e04e      	b.n	81fc <pinctrl_configure_pins+0xac>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    815e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8162:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    8166:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    816a:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    816e:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    8172:	f013 0f20 	tst.w	r3, #32
    8176:	d01f      	beq.n	81b8 <pinctrl_configure_pins+0x68>
    8178:	b109      	cbz	r1, 817e <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    817a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    817e:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8182:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8184:	f012 0f01 	tst.w	r2, #1
    8188:	d019      	beq.n	81be <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    818a:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    818e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8192:	d023      	beq.n	81dc <pinctrl_configure_pins+0x8c>
    8194:	bb2b      	cbnz	r3, 81e2 <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    8196:	f8df 9344 	ldr.w	r9, [pc, #836]	; 84dc <pinctrl_configure_pins+0x38c>
    819a:	f240 232e 	movw	r3, #558	; 0x22e
    819e:	464a      	mov	r2, r9
    81a0:	49cf      	ldr	r1, [pc, #828]	; (84e0 <pinctrl_configure_pins+0x390>)
    81a2:	48d0      	ldr	r0, [pc, #832]	; (84e4 <pinctrl_configure_pins+0x394>)
    81a4:	f007 f85b 	bl	f25e <assert_print>
    81a8:	f240 212e 	movw	r1, #558	; 0x22e
    81ac:	4648      	mov	r0, r9
    81ae:	f007 f84f 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    81b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    81b6:	e015      	b.n	81e4 <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    81b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    81bc:	e7df      	b.n	817e <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    81be:	f8df a31c 	ldr.w	sl, [pc, #796]	; 84dc <pinctrl_configure_pins+0x38c>
    81c2:	f240 2329 	movw	r3, #553	; 0x229
    81c6:	4652      	mov	r2, sl
    81c8:	49c7      	ldr	r1, [pc, #796]	; (84e8 <pinctrl_configure_pins+0x398>)
    81ca:	48c6      	ldr	r0, [pc, #792]	; (84e4 <pinctrl_configure_pins+0x394>)
    81cc:	f007 f847 	bl	f25e <assert_print>
    81d0:	f240 2129 	movw	r1, #553	; 0x229
    81d4:	4650      	mov	r0, sl
    81d6:	f007 f83b 	bl	f250 <assert_post_action>
    81da:	e7d6      	b.n	818a <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    81dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    81e0:	e000      	b.n	81e4 <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    81e2:	4ac2      	ldr	r2, [pc, #776]	; (84ec <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    81e4:	2101      	movs	r1, #1
    81e6:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    81ea:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    81ee:	460a      	mov	r2, r1
    81f0:	f855 0008 	ldr.w	r0, [r5, r8]
    81f4:	f7ff ff4c 	bl	8090 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    81f8:	3401      	adds	r4, #1
    81fa:	b2e4      	uxtb	r4, r4
    81fc:	42b4      	cmp	r4, r6
    81fe:	f080 841e 	bcs.w	8a3e <pinctrl_configure_pins+0x8ee>
		switch (NRF_GET_FUN(pins[i])) {
    8202:	ea4f 0884 	mov.w	r8, r4, lsl #2
    8206:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    820a:	0c1a      	lsrs	r2, r3, #16
    820c:	2a22      	cmp	r2, #34	; 0x22
    820e:	f200 8418 	bhi.w	8a42 <pinctrl_configure_pins+0x8f2>
    8212:	a101      	add	r1, pc, #4	; (adr r1, 8218 <pinctrl_configure_pins+0xc8>)
    8214:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    8218:	0000815f 	.word	0x0000815f
    821c:	000082a5 	.word	0x000082a5
    8220:	000082bb 	.word	0x000082bb
    8224:	0000835b 	.word	0x0000835b
    8228:	00008371 	.word	0x00008371
    822c:	00008411 	.word	0x00008411
    8230:	000084b1 	.word	0x000084b1
    8234:	00008a43 	.word	0x00008a43
    8238:	00008a43 	.word	0x00008a43
    823c:	00008a43 	.word	0x00008a43
    8240:	00008a43 	.word	0x00008a43
    8244:	000084c7 	.word	0x000084c7
    8248:	000084f1 	.word	0x000084f1
    824c:	00008a43 	.word	0x00008a43
    8250:	00008a43 	.word	0x00008a43
    8254:	00008a43 	.word	0x00008a43
    8258:	00008a43 	.word	0x00008a43
    825c:	00008a43 	.word	0x00008a43
    8260:	00008a43 	.word	0x00008a43
    8264:	00008a43 	.word	0x00008a43
    8268:	00008a43 	.word	0x00008a43
    826c:	00008a43 	.word	0x00008a43
    8270:	00008507 	.word	0x00008507
    8274:	0000862d 	.word	0x0000862d
    8278:	00008753 	.word	0x00008753
    827c:	0000888f 	.word	0x0000888f
    8280:	00008a43 	.word	0x00008a43
    8284:	00008a43 	.word	0x00008a43
    8288:	00008a43 	.word	0x00008a43
    828c:	000089b5 	.word	0x000089b5
    8290:	000089cb 	.word	0x000089cb
    8294:	000089e1 	.word	0x000089e1
    8298:	000089f7 	.word	0x000089f7
    829c:	00008a0f 	.word	0x00008a0f
    82a0:	00008a27 	.word	0x00008a27
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    82a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    82a8:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    82ac:	2200      	movs	r2, #0
    82ae:	4611      	mov	r1, r2
    82b0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    82b4:	f7ff feec 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    82b8:	e79e      	b.n	81f8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    82ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    82be:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    82c2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    82c6:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    82ca:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    82ce:	f013 0f20 	tst.w	r3, #32
    82d2:	d01f      	beq.n	8314 <pinctrl_configure_pins+0x1c4>
    82d4:	b30a      	cbz	r2, 831a <pinctrl_configure_pins+0x1ca>
            mask = P1_FEATURE_PINS_PRESENT;
    82d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    82da:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    82de:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    82e0:	f013 0f01 	tst.w	r3, #1
    82e4:	d01b      	beq.n	831e <pinctrl_configure_pins+0x1ce>
    *p_pin = pin_number & 0x1F;
    82e6:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    82ea:	ea5f 1359 	movs.w	r3, r9, lsr #5
    82ee:	d025      	beq.n	833c <pinctrl_configure_pins+0x1ec>
    82f0:	bb3b      	cbnz	r3, 8342 <pinctrl_configure_pins+0x1f2>
            NRFX_ASSERT(0);
    82f2:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 84dc <pinctrl_configure_pins+0x38c>
    82f6:	f240 232e 	movw	r3, #558	; 0x22e
    82fa:	464a      	mov	r2, r9
    82fc:	4978      	ldr	r1, [pc, #480]	; (84e0 <pinctrl_configure_pins+0x390>)
    82fe:	4879      	ldr	r0, [pc, #484]	; (84e4 <pinctrl_configure_pins+0x394>)
    8300:	f006 ffad 	bl	f25e <assert_print>
    8304:	f240 212e 	movw	r1, #558	; 0x22e
    8308:	4648      	mov	r0, r9
    830a:	f006 ffa1 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    830e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8312:	e017      	b.n	8344 <pinctrl_configure_pins+0x1f4>
            mask = P0_FEATURE_PINS_PRESENT;
    8314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8318:	e7df      	b.n	82da <pinctrl_configure_pins+0x18a>
    switch (port)
    831a:	2300      	movs	r3, #0
    831c:	e7dd      	b.n	82da <pinctrl_configure_pins+0x18a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    831e:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 84dc <pinctrl_configure_pins+0x38c>
    8322:	f240 2329 	movw	r3, #553	; 0x229
    8326:	4652      	mov	r2, sl
    8328:	496f      	ldr	r1, [pc, #444]	; (84e8 <pinctrl_configure_pins+0x398>)
    832a:	486e      	ldr	r0, [pc, #440]	; (84e4 <pinctrl_configure_pins+0x394>)
    832c:	f006 ff97 	bl	f25e <assert_print>
    8330:	f240 2129 	movw	r1, #553	; 0x229
    8334:	4650      	mov	r0, sl
    8336:	f006 ff8b 	bl	f250 <assert_post_action>
    833a:	e7d4      	b.n	82e6 <pinctrl_configure_pins+0x196>
        case 0: return NRF_P0;
    833c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8340:	e000      	b.n	8344 <pinctrl_configure_pins+0x1f4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8342:	4a6a      	ldr	r2, [pc, #424]	; (84ec <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8344:	2101      	movs	r1, #1
    8346:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    834a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    834e:	460a      	mov	r2, r1
    8350:	f855 0008 	ldr.w	r0, [r5, r8]
    8354:	f7ff fe9c 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8358:	e74e      	b.n	81f8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    835a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    835e:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8362:	2200      	movs	r2, #0
    8364:	4611      	mov	r1, r2
    8366:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    836a:	f7ff fe91 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    836e:	e743      	b.n	81f8 <pinctrl_configure_pins+0xa8>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    8370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8374:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    8378:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    837c:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    8380:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    8384:	f013 0f20 	tst.w	r3, #32
    8388:	d01f      	beq.n	83ca <pinctrl_configure_pins+0x27a>
    838a:	b30a      	cbz	r2, 83d0 <pinctrl_configure_pins+0x280>
            mask = P1_FEATURE_PINS_PRESENT;
    838c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8390:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8394:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8396:	f013 0f01 	tst.w	r3, #1
    839a:	d01b      	beq.n	83d4 <pinctrl_configure_pins+0x284>
    *p_pin = pin_number & 0x1F;
    839c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    83a0:	ea5f 1359 	movs.w	r3, r9, lsr #5
    83a4:	d025      	beq.n	83f2 <pinctrl_configure_pins+0x2a2>
    83a6:	bb3b      	cbnz	r3, 83f8 <pinctrl_configure_pins+0x2a8>
            NRFX_ASSERT(0);
    83a8:	f8df 9130 	ldr.w	r9, [pc, #304]	; 84dc <pinctrl_configure_pins+0x38c>
    83ac:	f240 232e 	movw	r3, #558	; 0x22e
    83b0:	464a      	mov	r2, r9
    83b2:	494b      	ldr	r1, [pc, #300]	; (84e0 <pinctrl_configure_pins+0x390>)
    83b4:	484b      	ldr	r0, [pc, #300]	; (84e4 <pinctrl_configure_pins+0x394>)
    83b6:	f006 ff52 	bl	f25e <assert_print>
    83ba:	f240 212e 	movw	r1, #558	; 0x22e
    83be:	4648      	mov	r0, r9
    83c0:	f006 ff46 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    83c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    83c8:	e017      	b.n	83fa <pinctrl_configure_pins+0x2aa>
            mask = P0_FEATURE_PINS_PRESENT;
    83ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    83ce:	e7df      	b.n	8390 <pinctrl_configure_pins+0x240>
    switch (port)
    83d0:	2300      	movs	r3, #0
    83d2:	e7dd      	b.n	8390 <pinctrl_configure_pins+0x240>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    83d4:	f8df a104 	ldr.w	sl, [pc, #260]	; 84dc <pinctrl_configure_pins+0x38c>
    83d8:	f240 2329 	movw	r3, #553	; 0x229
    83dc:	4652      	mov	r2, sl
    83de:	4942      	ldr	r1, [pc, #264]	; (84e8 <pinctrl_configure_pins+0x398>)
    83e0:	4840      	ldr	r0, [pc, #256]	; (84e4 <pinctrl_configure_pins+0x394>)
    83e2:	f006 ff3c 	bl	f25e <assert_print>
    83e6:	f240 2129 	movw	r1, #553	; 0x229
    83ea:	4650      	mov	r0, sl
    83ec:	f006 ff30 	bl	f250 <assert_post_action>
    83f0:	e7d4      	b.n	839c <pinctrl_configure_pins+0x24c>
        case 0: return NRF_P0;
    83f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    83f6:	e000      	b.n	83fa <pinctrl_configure_pins+0x2aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    83f8:	4a3c      	ldr	r2, [pc, #240]	; (84ec <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    83fa:	2101      	movs	r1, #1
    83fc:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    8400:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8404:	2200      	movs	r2, #0
    8406:	f855 0008 	ldr.w	r0, [r5, r8]
    840a:	f7ff fe41 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    840e:	e6f3      	b.n	81f8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    8410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8414:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    8418:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    841c:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    8420:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    8424:	f013 0f20 	tst.w	r3, #32
    8428:	d01f      	beq.n	846a <pinctrl_configure_pins+0x31a>
    842a:	b30a      	cbz	r2, 8470 <pinctrl_configure_pins+0x320>
            mask = P1_FEATURE_PINS_PRESENT;
    842c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8430:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8434:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8436:	f013 0f01 	tst.w	r3, #1
    843a:	d01b      	beq.n	8474 <pinctrl_configure_pins+0x324>
    *p_pin = pin_number & 0x1F;
    843c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8440:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8444:	d025      	beq.n	8492 <pinctrl_configure_pins+0x342>
    8446:	bb3b      	cbnz	r3, 8498 <pinctrl_configure_pins+0x348>
            NRFX_ASSERT(0);
    8448:	f8df 9090 	ldr.w	r9, [pc, #144]	; 84dc <pinctrl_configure_pins+0x38c>
    844c:	f240 232e 	movw	r3, #558	; 0x22e
    8450:	464a      	mov	r2, r9
    8452:	4923      	ldr	r1, [pc, #140]	; (84e0 <pinctrl_configure_pins+0x390>)
    8454:	4823      	ldr	r0, [pc, #140]	; (84e4 <pinctrl_configure_pins+0x394>)
    8456:	f006 ff02 	bl	f25e <assert_print>
    845a:	f240 212e 	movw	r1, #558	; 0x22e
    845e:	4648      	mov	r0, r9
    8460:	f006 fef6 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    8464:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8468:	e017      	b.n	849a <pinctrl_configure_pins+0x34a>
            mask = P0_FEATURE_PINS_PRESENT;
    846a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    846e:	e7df      	b.n	8430 <pinctrl_configure_pins+0x2e0>
    switch (port)
    8470:	2300      	movs	r3, #0
    8472:	e7dd      	b.n	8430 <pinctrl_configure_pins+0x2e0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8474:	f8df a064 	ldr.w	sl, [pc, #100]	; 84dc <pinctrl_configure_pins+0x38c>
    8478:	f240 2329 	movw	r3, #553	; 0x229
    847c:	4652      	mov	r2, sl
    847e:	491a      	ldr	r1, [pc, #104]	; (84e8 <pinctrl_configure_pins+0x398>)
    8480:	4818      	ldr	r0, [pc, #96]	; (84e4 <pinctrl_configure_pins+0x394>)
    8482:	f006 feec 	bl	f25e <assert_print>
    8486:	f240 2129 	movw	r1, #553	; 0x229
    848a:	4650      	mov	r0, sl
    848c:	f006 fee0 	bl	f250 <assert_post_action>
    8490:	e7d4      	b.n	843c <pinctrl_configure_pins+0x2ec>
        case 0: return NRF_P0;
    8492:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8496:	e000      	b.n	849a <pinctrl_configure_pins+0x34a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8498:	4a14      	ldr	r2, [pc, #80]	; (84ec <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    849a:	2101      	movs	r1, #1
    849c:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    84a0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    84a4:	460a      	mov	r2, r1
    84a6:	f855 0008 	ldr.w	r0, [r5, r8]
    84aa:	f7ff fdf1 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    84ae:	e6a3      	b.n	81f8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    84b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    84b4:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    84b8:	2200      	movs	r2, #0
    84ba:	4611      	mov	r1, r2
    84bc:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    84c0:	f7ff fde6 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    84c4:	e698      	b.n	81f8 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    84c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    84ca:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    84ce:	2200      	movs	r2, #0
    84d0:	4611      	mov	r1, r2
    84d2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    84d6:	f7ff fddb 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    84da:	e68d      	b.n	81f8 <pinctrl_configure_pins+0xa8>
    84dc:	000128c4 	.word	0x000128c4
    84e0:	00011cc8 	.word	0x00011cc8
    84e4:	0001160c 	.word	0x0001160c
    84e8:	000128f8 	.word	0x000128f8
    84ec:	50000300 	.word	0x50000300
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    84f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    84f4:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    84f8:	2200      	movs	r2, #0
    84fa:	4611      	mov	r1, r2
    84fc:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8500:	f7ff fdc6 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    8504:	e678      	b.n	81f8 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    8506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    850a:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    850e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    8512:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    8516:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    851a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    851e:	d144      	bne.n	85aa <pinctrl_configure_pins+0x45a>
    switch (port)
    8520:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8524:	d01f      	beq.n	8566 <pinctrl_configure_pins+0x416>
    8526:	b10b      	cbz	r3, 852c <pinctrl_configure_pins+0x3dc>
            mask = P1_FEATURE_PINS_PRESENT;
    8528:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    852c:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8530:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8532:	f012 0f01 	tst.w	r2, #1
    8536:	d019      	beq.n	856c <pinctrl_configure_pins+0x41c>
    *p_pin = pin_number & 0x1F;
    8538:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    853c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8540:	d023      	beq.n	858a <pinctrl_configure_pins+0x43a>
    8542:	bb2b      	cbnz	r3, 8590 <pinctrl_configure_pins+0x440>
            NRFX_ASSERT(0);
    8544:	f8df 9300 	ldr.w	r9, [pc, #768]	; 8848 <pinctrl_configure_pins+0x6f8>
    8548:	f240 232e 	movw	r3, #558	; 0x22e
    854c:	464a      	mov	r2, r9
    854e:	49bf      	ldr	r1, [pc, #764]	; (884c <pinctrl_configure_pins+0x6fc>)
    8550:	48bf      	ldr	r0, [pc, #764]	; (8850 <pinctrl_configure_pins+0x700>)
    8552:	f006 fe84 	bl	f25e <assert_print>
    8556:	f240 212e 	movw	r1, #558	; 0x22e
    855a:	4648      	mov	r0, r9
    855c:	f006 fe78 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    8560:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8564:	e015      	b.n	8592 <pinctrl_configure_pins+0x442>
            mask = P0_FEATURE_PINS_PRESENT;
    8566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    856a:	e7df      	b.n	852c <pinctrl_configure_pins+0x3dc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    856c:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 8848 <pinctrl_configure_pins+0x6f8>
    8570:	f240 2329 	movw	r3, #553	; 0x229
    8574:	4652      	mov	r2, sl
    8576:	49b7      	ldr	r1, [pc, #732]	; (8854 <pinctrl_configure_pins+0x704>)
    8578:	48b5      	ldr	r0, [pc, #724]	; (8850 <pinctrl_configure_pins+0x700>)
    857a:	f006 fe70 	bl	f25e <assert_print>
    857e:	f240 2129 	movw	r1, #553	; 0x229
    8582:	4650      	mov	r0, sl
    8584:	f006 fe64 	bl	f250 <assert_post_action>
    8588:	e7d6      	b.n	8538 <pinctrl_configure_pins+0x3e8>
        case 0: return NRF_P0;
    858a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    858e:	e000      	b.n	8592 <pinctrl_configure_pins+0x442>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8590:	4ab1      	ldr	r2, [pc, #708]	; (8858 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    8592:	2301      	movs	r3, #1
    8594:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    8598:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    859c:	2201      	movs	r2, #1
    859e:	4611      	mov	r1, r2
    85a0:	f855 0008 	ldr.w	r0, [r5, r8]
    85a4:	f7ff fd74 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    85a8:	e626      	b.n	81f8 <pinctrl_configure_pins+0xa8>
    switch (port)
    85aa:	ea5f 1359 	movs.w	r3, r9, lsr #5
    85ae:	d01f      	beq.n	85f0 <pinctrl_configure_pins+0x4a0>
    85b0:	b30b      	cbz	r3, 85f6 <pinctrl_configure_pins+0x4a6>
            mask = P1_FEATURE_PINS_PRESENT;
    85b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    85b6:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    85ba:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    85bc:	f013 0f01 	tst.w	r3, #1
    85c0:	d01b      	beq.n	85fa <pinctrl_configure_pins+0x4aa>
    *p_pin = pin_number & 0x1F;
    85c2:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    85c6:	ea5f 1359 	movs.w	r3, r9, lsr #5
    85ca:	d025      	beq.n	8618 <pinctrl_configure_pins+0x4c8>
    85cc:	bb3b      	cbnz	r3, 861e <pinctrl_configure_pins+0x4ce>
            NRFX_ASSERT(0);
    85ce:	f8df 9278 	ldr.w	r9, [pc, #632]	; 8848 <pinctrl_configure_pins+0x6f8>
    85d2:	f240 232e 	movw	r3, #558	; 0x22e
    85d6:	464a      	mov	r2, r9
    85d8:	499c      	ldr	r1, [pc, #624]	; (884c <pinctrl_configure_pins+0x6fc>)
    85da:	489d      	ldr	r0, [pc, #628]	; (8850 <pinctrl_configure_pins+0x700>)
    85dc:	f006 fe3f 	bl	f25e <assert_print>
    85e0:	f240 212e 	movw	r1, #558	; 0x22e
    85e4:	4648      	mov	r0, r9
    85e6:	f006 fe33 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    85ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    85ee:	e017      	b.n	8620 <pinctrl_configure_pins+0x4d0>
            mask = P0_FEATURE_PINS_PRESENT;
    85f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    85f4:	e7df      	b.n	85b6 <pinctrl_configure_pins+0x466>
    switch (port)
    85f6:	2300      	movs	r3, #0
    85f8:	e7dd      	b.n	85b6 <pinctrl_configure_pins+0x466>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    85fa:	f8df a24c 	ldr.w	sl, [pc, #588]	; 8848 <pinctrl_configure_pins+0x6f8>
    85fe:	f240 2329 	movw	r3, #553	; 0x229
    8602:	4652      	mov	r2, sl
    8604:	4993      	ldr	r1, [pc, #588]	; (8854 <pinctrl_configure_pins+0x704>)
    8606:	4892      	ldr	r0, [pc, #584]	; (8850 <pinctrl_configure_pins+0x700>)
    8608:	f006 fe29 	bl	f25e <assert_print>
    860c:	f240 2129 	movw	r1, #553	; 0x229
    8610:	4650      	mov	r0, sl
    8612:	f006 fe1d 	bl	f250 <assert_post_action>
    8616:	e7d4      	b.n	85c2 <pinctrl_configure_pins+0x472>
        case 0: return NRF_P0;
    8618:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    861c:	e000      	b.n	8620 <pinctrl_configure_pins+0x4d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    861e:	4a8e      	ldr	r2, [pc, #568]	; (8858 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8620:	2301      	movs	r3, #1
    8622:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    8626:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    862a:	e7b7      	b.n	859c <pinctrl_configure_pins+0x44c>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    862c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8630:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    8634:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    8638:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    863c:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    8640:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    8644:	d144      	bne.n	86d0 <pinctrl_configure_pins+0x580>
    switch (port)
    8646:	ea5f 1359 	movs.w	r3, r9, lsr #5
    864a:	d01f      	beq.n	868c <pinctrl_configure_pins+0x53c>
    864c:	b10b      	cbz	r3, 8652 <pinctrl_configure_pins+0x502>
            mask = P1_FEATURE_PINS_PRESENT;
    864e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    8652:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8656:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8658:	f012 0f01 	tst.w	r2, #1
    865c:	d019      	beq.n	8692 <pinctrl_configure_pins+0x542>
    *p_pin = pin_number & 0x1F;
    865e:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8662:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8666:	d023      	beq.n	86b0 <pinctrl_configure_pins+0x560>
    8668:	bb2b      	cbnz	r3, 86b6 <pinctrl_configure_pins+0x566>
            NRFX_ASSERT(0);
    866a:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8848 <pinctrl_configure_pins+0x6f8>
    866e:	f240 232e 	movw	r3, #558	; 0x22e
    8672:	464a      	mov	r2, r9
    8674:	4975      	ldr	r1, [pc, #468]	; (884c <pinctrl_configure_pins+0x6fc>)
    8676:	4876      	ldr	r0, [pc, #472]	; (8850 <pinctrl_configure_pins+0x700>)
    8678:	f006 fdf1 	bl	f25e <assert_print>
    867c:	f240 212e 	movw	r1, #558	; 0x22e
    8680:	4648      	mov	r0, r9
    8682:	f006 fde5 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    8686:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    868a:	e015      	b.n	86b8 <pinctrl_configure_pins+0x568>
            mask = P0_FEATURE_PINS_PRESENT;
    868c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8690:	e7df      	b.n	8652 <pinctrl_configure_pins+0x502>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8692:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 8848 <pinctrl_configure_pins+0x6f8>
    8696:	f240 2329 	movw	r3, #553	; 0x229
    869a:	4652      	mov	r2, sl
    869c:	496d      	ldr	r1, [pc, #436]	; (8854 <pinctrl_configure_pins+0x704>)
    869e:	486c      	ldr	r0, [pc, #432]	; (8850 <pinctrl_configure_pins+0x700>)
    86a0:	f006 fddd 	bl	f25e <assert_print>
    86a4:	f240 2129 	movw	r1, #553	; 0x229
    86a8:	4650      	mov	r0, sl
    86aa:	f006 fdd1 	bl	f250 <assert_post_action>
    86ae:	e7d6      	b.n	865e <pinctrl_configure_pins+0x50e>
        case 0: return NRF_P0;
    86b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    86b4:	e000      	b.n	86b8 <pinctrl_configure_pins+0x568>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    86b6:	4a68      	ldr	r2, [pc, #416]	; (8858 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    86b8:	2301      	movs	r3, #1
    86ba:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    86be:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    86c2:	2201      	movs	r2, #1
    86c4:	4611      	mov	r1, r2
    86c6:	f855 0008 	ldr.w	r0, [r5, r8]
    86ca:	f7ff fce1 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    86ce:	e593      	b.n	81f8 <pinctrl_configure_pins+0xa8>
    switch (port)
    86d0:	ea5f 1359 	movs.w	r3, r9, lsr #5
    86d4:	d01f      	beq.n	8716 <pinctrl_configure_pins+0x5c6>
    86d6:	b30b      	cbz	r3, 871c <pinctrl_configure_pins+0x5cc>
            mask = P1_FEATURE_PINS_PRESENT;
    86d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    86dc:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    86e0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    86e2:	f013 0f01 	tst.w	r3, #1
    86e6:	d01b      	beq.n	8720 <pinctrl_configure_pins+0x5d0>
    *p_pin = pin_number & 0x1F;
    86e8:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    86ec:	ea5f 1359 	movs.w	r3, r9, lsr #5
    86f0:	d025      	beq.n	873e <pinctrl_configure_pins+0x5ee>
    86f2:	bb3b      	cbnz	r3, 8744 <pinctrl_configure_pins+0x5f4>
            NRFX_ASSERT(0);
    86f4:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8848 <pinctrl_configure_pins+0x6f8>
    86f8:	f240 232e 	movw	r3, #558	; 0x22e
    86fc:	464a      	mov	r2, r9
    86fe:	4953      	ldr	r1, [pc, #332]	; (884c <pinctrl_configure_pins+0x6fc>)
    8700:	4853      	ldr	r0, [pc, #332]	; (8850 <pinctrl_configure_pins+0x700>)
    8702:	f006 fdac 	bl	f25e <assert_print>
    8706:	f240 212e 	movw	r1, #558	; 0x22e
    870a:	4648      	mov	r0, r9
    870c:	f006 fda0 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    8710:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8714:	e017      	b.n	8746 <pinctrl_configure_pins+0x5f6>
            mask = P0_FEATURE_PINS_PRESENT;
    8716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    871a:	e7df      	b.n	86dc <pinctrl_configure_pins+0x58c>
    switch (port)
    871c:	2300      	movs	r3, #0
    871e:	e7dd      	b.n	86dc <pinctrl_configure_pins+0x58c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8720:	f8df a124 	ldr.w	sl, [pc, #292]	; 8848 <pinctrl_configure_pins+0x6f8>
    8724:	f240 2329 	movw	r3, #553	; 0x229
    8728:	4652      	mov	r2, sl
    872a:	494a      	ldr	r1, [pc, #296]	; (8854 <pinctrl_configure_pins+0x704>)
    872c:	4848      	ldr	r0, [pc, #288]	; (8850 <pinctrl_configure_pins+0x700>)
    872e:	f006 fd96 	bl	f25e <assert_print>
    8732:	f240 2129 	movw	r1, #553	; 0x229
    8736:	4650      	mov	r0, sl
    8738:	f006 fd8a 	bl	f250 <assert_post_action>
    873c:	e7d4      	b.n	86e8 <pinctrl_configure_pins+0x598>
        case 0: return NRF_P0;
    873e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8742:	e000      	b.n	8746 <pinctrl_configure_pins+0x5f6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8744:	4a44      	ldr	r2, [pc, #272]	; (8858 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8746:	2301      	movs	r3, #1
    8748:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    874c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    8750:	e7b7      	b.n	86c2 <pinctrl_configure_pins+0x572>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    8752:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8756:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    875a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    875e:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    8762:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    8766:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    876a:	d144      	bne.n	87f6 <pinctrl_configure_pins+0x6a6>
    switch (port)
    876c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8770:	d01f      	beq.n	87b2 <pinctrl_configure_pins+0x662>
    8772:	b10b      	cbz	r3, 8778 <pinctrl_configure_pins+0x628>
            mask = P1_FEATURE_PINS_PRESENT;
    8774:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    8778:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    877c:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    877e:	f012 0f01 	tst.w	r2, #1
    8782:	d019      	beq.n	87b8 <pinctrl_configure_pins+0x668>
    *p_pin = pin_number & 0x1F;
    8784:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8788:	ea5f 1359 	movs.w	r3, r9, lsr #5
    878c:	d023      	beq.n	87d6 <pinctrl_configure_pins+0x686>
    878e:	bb2b      	cbnz	r3, 87dc <pinctrl_configure_pins+0x68c>
            NRFX_ASSERT(0);
    8790:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8848 <pinctrl_configure_pins+0x6f8>
    8794:	f240 232e 	movw	r3, #558	; 0x22e
    8798:	464a      	mov	r2, r9
    879a:	492c      	ldr	r1, [pc, #176]	; (884c <pinctrl_configure_pins+0x6fc>)
    879c:	482c      	ldr	r0, [pc, #176]	; (8850 <pinctrl_configure_pins+0x700>)
    879e:	f006 fd5e 	bl	f25e <assert_print>
    87a2:	f240 212e 	movw	r1, #558	; 0x22e
    87a6:	4648      	mov	r0, r9
    87a8:	f006 fd52 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    87ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    87b0:	e015      	b.n	87de <pinctrl_configure_pins+0x68e>
            mask = P0_FEATURE_PINS_PRESENT;
    87b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    87b6:	e7df      	b.n	8778 <pinctrl_configure_pins+0x628>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    87b8:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8848 <pinctrl_configure_pins+0x6f8>
    87bc:	f240 2329 	movw	r3, #553	; 0x229
    87c0:	4652      	mov	r2, sl
    87c2:	4924      	ldr	r1, [pc, #144]	; (8854 <pinctrl_configure_pins+0x704>)
    87c4:	4822      	ldr	r0, [pc, #136]	; (8850 <pinctrl_configure_pins+0x700>)
    87c6:	f006 fd4a 	bl	f25e <assert_print>
    87ca:	f240 2129 	movw	r1, #553	; 0x229
    87ce:	4650      	mov	r0, sl
    87d0:	f006 fd3e 	bl	f250 <assert_post_action>
    87d4:	e7d6      	b.n	8784 <pinctrl_configure_pins+0x634>
        case 0: return NRF_P0;
    87d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    87da:	e000      	b.n	87de <pinctrl_configure_pins+0x68e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    87dc:	4a1e      	ldr	r2, [pc, #120]	; (8858 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    87de:	2301      	movs	r3, #1
    87e0:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    87e4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    87e8:	2201      	movs	r2, #1
    87ea:	4611      	mov	r1, r2
    87ec:	f855 0008 	ldr.w	r0, [r5, r8]
    87f0:	f7ff fc4e 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    87f4:	e500      	b.n	81f8 <pinctrl_configure_pins+0xa8>
    switch (port)
    87f6:	ea5f 1359 	movs.w	r3, r9, lsr #5
    87fa:	d01f      	beq.n	883c <pinctrl_configure_pins+0x6ec>
    87fc:	b30b      	cbz	r3, 8842 <pinctrl_configure_pins+0x6f2>
            mask = P1_FEATURE_PINS_PRESENT;
    87fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    8802:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8806:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8808:	f013 0f01 	tst.w	r3, #1
    880c:	d026      	beq.n	885c <pinctrl_configure_pins+0x70c>
    *p_pin = pin_number & 0x1F;
    880e:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8812:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8816:	d030      	beq.n	887a <pinctrl_configure_pins+0x72a>
    8818:	bb93      	cbnz	r3, 8880 <pinctrl_configure_pins+0x730>
            NRFX_ASSERT(0);
    881a:	f8df 902c 	ldr.w	r9, [pc, #44]	; 8848 <pinctrl_configure_pins+0x6f8>
    881e:	f240 232e 	movw	r3, #558	; 0x22e
    8822:	464a      	mov	r2, r9
    8824:	4909      	ldr	r1, [pc, #36]	; (884c <pinctrl_configure_pins+0x6fc>)
    8826:	480a      	ldr	r0, [pc, #40]	; (8850 <pinctrl_configure_pins+0x700>)
    8828:	f006 fd19 	bl	f25e <assert_print>
    882c:	f240 212e 	movw	r1, #558	; 0x22e
    8830:	4648      	mov	r0, r9
    8832:	f006 fd0d 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    8836:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    883a:	e022      	b.n	8882 <pinctrl_configure_pins+0x732>
            mask = P0_FEATURE_PINS_PRESENT;
    883c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8840:	e7df      	b.n	8802 <pinctrl_configure_pins+0x6b2>
    switch (port)
    8842:	2300      	movs	r3, #0
    8844:	e7dd      	b.n	8802 <pinctrl_configure_pins+0x6b2>
    8846:	bf00      	nop
    8848:	000128c4 	.word	0x000128c4
    884c:	00011cc8 	.word	0x00011cc8
    8850:	0001160c 	.word	0x0001160c
    8854:	000128f8 	.word	0x000128f8
    8858:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    885c:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8a4c <pinctrl_configure_pins+0x8fc>
    8860:	f240 2329 	movw	r3, #553	; 0x229
    8864:	4652      	mov	r2, sl
    8866:	497a      	ldr	r1, [pc, #488]	; (8a50 <pinctrl_configure_pins+0x900>)
    8868:	487a      	ldr	r0, [pc, #488]	; (8a54 <pinctrl_configure_pins+0x904>)
    886a:	f006 fcf8 	bl	f25e <assert_print>
    886e:	f240 2129 	movw	r1, #553	; 0x229
    8872:	4650      	mov	r0, sl
    8874:	f006 fcec 	bl	f250 <assert_post_action>
    8878:	e7c9      	b.n	880e <pinctrl_configure_pins+0x6be>
        case 0: return NRF_P0;
    887a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    887e:	e000      	b.n	8882 <pinctrl_configure_pins+0x732>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8880:	4a75      	ldr	r2, [pc, #468]	; (8a58 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8882:	2301      	movs	r3, #1
    8884:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    8888:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    888c:	e7ac      	b.n	87e8 <pinctrl_configure_pins+0x698>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    888e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8892:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    8896:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    889a:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    889e:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    88a2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    88a6:	d144      	bne.n	8932 <pinctrl_configure_pins+0x7e2>
    switch (port)
    88a8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    88ac:	d01f      	beq.n	88ee <pinctrl_configure_pins+0x79e>
    88ae:	b10b      	cbz	r3, 88b4 <pinctrl_configure_pins+0x764>
            mask = P1_FEATURE_PINS_PRESENT;
    88b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    88b4:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    88b8:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    88ba:	f012 0f01 	tst.w	r2, #1
    88be:	d019      	beq.n	88f4 <pinctrl_configure_pins+0x7a4>
    *p_pin = pin_number & 0x1F;
    88c0:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    88c4:	ea5f 1359 	movs.w	r3, r9, lsr #5
    88c8:	d023      	beq.n	8912 <pinctrl_configure_pins+0x7c2>
    88ca:	bb2b      	cbnz	r3, 8918 <pinctrl_configure_pins+0x7c8>
            NRFX_ASSERT(0);
    88cc:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8a4c <pinctrl_configure_pins+0x8fc>
    88d0:	f240 232e 	movw	r3, #558	; 0x22e
    88d4:	464a      	mov	r2, r9
    88d6:	4961      	ldr	r1, [pc, #388]	; (8a5c <pinctrl_configure_pins+0x90c>)
    88d8:	485e      	ldr	r0, [pc, #376]	; (8a54 <pinctrl_configure_pins+0x904>)
    88da:	f006 fcc0 	bl	f25e <assert_print>
    88de:	f240 212e 	movw	r1, #558	; 0x22e
    88e2:	4648      	mov	r0, r9
    88e4:	f006 fcb4 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    88e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    88ec:	e015      	b.n	891a <pinctrl_configure_pins+0x7ca>
            mask = P0_FEATURE_PINS_PRESENT;
    88ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    88f2:	e7df      	b.n	88b4 <pinctrl_configure_pins+0x764>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    88f4:	f8df a154 	ldr.w	sl, [pc, #340]	; 8a4c <pinctrl_configure_pins+0x8fc>
    88f8:	f240 2329 	movw	r3, #553	; 0x229
    88fc:	4652      	mov	r2, sl
    88fe:	4954      	ldr	r1, [pc, #336]	; (8a50 <pinctrl_configure_pins+0x900>)
    8900:	4854      	ldr	r0, [pc, #336]	; (8a54 <pinctrl_configure_pins+0x904>)
    8902:	f006 fcac 	bl	f25e <assert_print>
    8906:	f240 2129 	movw	r1, #553	; 0x229
    890a:	4650      	mov	r0, sl
    890c:	f006 fca0 	bl	f250 <assert_post_action>
    8910:	e7d6      	b.n	88c0 <pinctrl_configure_pins+0x770>
        case 0: return NRF_P0;
    8912:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8916:	e000      	b.n	891a <pinctrl_configure_pins+0x7ca>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8918:	4a4f      	ldr	r2, [pc, #316]	; (8a58 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    891a:	2301      	movs	r3, #1
    891c:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    8920:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    8924:	2201      	movs	r2, #1
    8926:	4611      	mov	r1, r2
    8928:	f855 0008 	ldr.w	r0, [r5, r8]
    892c:	f7ff fbb0 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8930:	e462      	b.n	81f8 <pinctrl_configure_pins+0xa8>
    switch (port)
    8932:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8936:	d01f      	beq.n	8978 <pinctrl_configure_pins+0x828>
    8938:	b30b      	cbz	r3, 897e <pinctrl_configure_pins+0x82e>
            mask = P1_FEATURE_PINS_PRESENT;
    893a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    893e:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    8942:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8944:	f013 0f01 	tst.w	r3, #1
    8948:	d01b      	beq.n	8982 <pinctrl_configure_pins+0x832>
    *p_pin = pin_number & 0x1F;
    894a:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    894e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    8952:	d025      	beq.n	89a0 <pinctrl_configure_pins+0x850>
    8954:	bb3b      	cbnz	r3, 89a6 <pinctrl_configure_pins+0x856>
            NRFX_ASSERT(0);
    8956:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8a4c <pinctrl_configure_pins+0x8fc>
    895a:	f240 232e 	movw	r3, #558	; 0x22e
    895e:	464a      	mov	r2, r9
    8960:	493e      	ldr	r1, [pc, #248]	; (8a5c <pinctrl_configure_pins+0x90c>)
    8962:	483c      	ldr	r0, [pc, #240]	; (8a54 <pinctrl_configure_pins+0x904>)
    8964:	f006 fc7b 	bl	f25e <assert_print>
    8968:	f240 212e 	movw	r1, #558	; 0x22e
    896c:	4648      	mov	r0, r9
    896e:	f006 fc6f 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    8972:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    8976:	e017      	b.n	89a8 <pinctrl_configure_pins+0x858>
            mask = P0_FEATURE_PINS_PRESENT;
    8978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    897c:	e7df      	b.n	893e <pinctrl_configure_pins+0x7ee>
    switch (port)
    897e:	2300      	movs	r3, #0
    8980:	e7dd      	b.n	893e <pinctrl_configure_pins+0x7ee>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8982:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8a4c <pinctrl_configure_pins+0x8fc>
    8986:	f240 2329 	movw	r3, #553	; 0x229
    898a:	4652      	mov	r2, sl
    898c:	4930      	ldr	r1, [pc, #192]	; (8a50 <pinctrl_configure_pins+0x900>)
    898e:	4831      	ldr	r0, [pc, #196]	; (8a54 <pinctrl_configure_pins+0x904>)
    8990:	f006 fc65 	bl	f25e <assert_print>
    8994:	f240 2129 	movw	r1, #553	; 0x229
    8998:	4650      	mov	r0, sl
    899a:	f006 fc59 	bl	f250 <assert_post_action>
    899e:	e7d4      	b.n	894a <pinctrl_configure_pins+0x7fa>
        case 0: return NRF_P0;
    89a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    89a4:	e000      	b.n	89a8 <pinctrl_configure_pins+0x858>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    89a6:	4a2c      	ldr	r2, [pc, #176]	; (8a58 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    89a8:	2301      	movs	r3, #1
    89aa:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    89ae:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    89b2:	e7b7      	b.n	8924 <pinctrl_configure_pins+0x7d4>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    89b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    89b8:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    89bc:	2201      	movs	r2, #1
    89be:	2100      	movs	r1, #0
    89c0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    89c4:	f7ff fb64 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    89c8:	e416      	b.n	81f8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    89ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    89ce:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    89d2:	2201      	movs	r2, #1
    89d4:	2100      	movs	r1, #0
    89d6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    89da:	f7ff fb59 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    89de:	e40b      	b.n	81f8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    89e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    89e4:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    89e8:	2201      	movs	r2, #1
    89ea:	2100      	movs	r1, #0
    89ec:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    89f0:	f7ff fb4e 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    89f4:	e400      	b.n	81f8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    89f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    89fa:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    89fe:	2201      	movs	r2, #1
    8a00:	2100      	movs	r1, #0
    8a02:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8a06:	f7ff fb43 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8a0a:	f7ff bbf5 	b.w	81f8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    8a0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8a12:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8a16:	2201      	movs	r2, #1
    8a18:	2100      	movs	r1, #0
    8a1a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8a1e:	f7ff fb37 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8a22:	f7ff bbe9 	b.w	81f8 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    8a26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8a2a:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    8a2e:	2201      	movs	r2, #1
    8a30:	2100      	movs	r1, #0
    8a32:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    8a36:	f7ff fb2b 	bl	8090 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    8a3a:	f7ff bbdd 	b.w	81f8 <pinctrl_configure_pins+0xa8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    8a3e:	2000      	movs	r0, #0
    8a40:	e001      	b.n	8a46 <pinctrl_configure_pins+0x8f6>
		switch (NRF_GET_FUN(pins[i])) {
    8a42:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    8a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8a4a:	bf00      	nop
    8a4c:	000128c4 	.word	0x000128c4
    8a50:	000128f8 	.word	0x000128f8
    8a54:	0001160c 	.word	0x0001160c
    8a58:	50000300 	.word	0x50000300
    8a5c:	00011cc8 	.word	0x00011cc8

00008a60 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    8a60:	b510      	push	{r4, lr}
    8a62:	b084      	sub	sp, #16
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    8a64:	f7fc fa72 	bl	4f4c <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    8a68:	4b06      	ldr	r3, [pc, #24]	; (8a84 <k_sys_fatal_error_handler+0x24>)
    8a6a:	9302      	str	r3, [sp, #8]
    8a6c:	2400      	movs	r4, #0
    8a6e:	9401      	str	r4, [sp, #4]
    8a70:	9400      	str	r4, [sp, #0]
    8a72:	4623      	mov	r3, r4
    8a74:	2201      	movs	r2, #1
    8a76:	4904      	ldr	r1, [pc, #16]	; (8a88 <k_sys_fatal_error_handler+0x28>)
    8a78:	4620      	mov	r0, r4
    8a7a:	f007 fc57 	bl	1032c <z_log_msg2_runtime_create>
		sys_arch_reboot(0);
    8a7e:	4620      	mov	r0, r4
    8a80:	f7fe f986 	bl	6d90 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    8a84:	00012a94 	.word	0x00012a94
    8a88:	00011020 	.word	0x00011020

00008a8c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8a8c:	4b02      	ldr	r3, [pc, #8]	; (8a98 <nvmc_wait+0xc>)
    8a8e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8a92:	2b00      	cmp	r3, #0
    8a94:	d0fa      	beq.n	8a8c <nvmc_wait>
}
    8a96:	4770      	bx	lr
    8a98:	4001e000 	.word	0x4001e000

00008a9c <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    8a9c:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    8a9e:	4b03      	ldr	r3, [pc, #12]	; (8aac <nvmc_config+0x10>)
    8aa0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    8aa4:	f7ff fff2 	bl	8a8c <nvmc_wait>
}
    8aa8:	bd08      	pop	{r3, pc}
    8aaa:	bf00      	nop
    8aac:	4001e000 	.word	0x4001e000

00008ab0 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    8ab0:	4b01      	ldr	r3, [pc, #4]	; (8ab8 <SystemCoreClockUpdate+0x8>)
    8ab2:	4a02      	ldr	r2, [pc, #8]	; (8abc <SystemCoreClockUpdate+0xc>)
    8ab4:	601a      	str	r2, [r3, #0]
}
    8ab6:	4770      	bx	lr
    8ab8:	20004078 	.word	0x20004078
    8abc:	03d09000 	.word	0x03d09000

00008ac0 <SystemInit>:

void SystemInit(void)
{
    8ac0:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    8ac2:	f007 fc50 	bl	10366 <nrf52_errata_36>
    8ac6:	b140      	cbz	r0, 8ada <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    8ac8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8acc:	2200      	movs	r2, #0
    8ace:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    8ad2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    8ad6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    8ada:	f007 fc4e 	bl	1037a <nrf52_errata_66>
    8ade:	2800      	cmp	r0, #0
    8ae0:	d046      	beq.n	8b70 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    8ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8ae6:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    8aea:	4b59      	ldr	r3, [pc, #356]	; (8c50 <SystemInit+0x190>)
    8aec:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    8af0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    8af4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    8af8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    8afc:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8b00:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    8b04:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    8b08:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    8b0c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8b10:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8b14:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    8b18:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    8b1c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8b20:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    8b24:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    8b28:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    8b2c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8b30:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    8b34:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    8b38:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8b3c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8b40:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8b44:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    8b48:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8b4c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8b50:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8b54:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    8b58:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8b5c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8b60:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8b64:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    8b68:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8b6c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    8b70:	f007 fc0d 	bl	1038e <nrf52_errata_98>
    8b74:	b118      	cbz	r0, 8b7e <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    8b76:	4b37      	ldr	r3, [pc, #220]	; (8c54 <SystemInit+0x194>)
    8b78:	4a37      	ldr	r2, [pc, #220]	; (8c58 <SystemInit+0x198>)
    8b7a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    8b7e:	f007 fc19 	bl	103b4 <nrf52_errata_103>
    8b82:	b118      	cbz	r0, 8b8c <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    8b84:	4b35      	ldr	r3, [pc, #212]	; (8c5c <SystemInit+0x19c>)
    8b86:	22fb      	movs	r2, #251	; 0xfb
    8b88:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    8b8c:	f007 fc25 	bl	103da <nrf52_errata_115>
    8b90:	b170      	cbz	r0, 8bb0 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    8b92:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    8b96:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    8b9a:	f023 030f 	bic.w	r3, r3, #15
    8b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8ba2:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    8ba6:	f002 020f 	and.w	r2, r2, #15
    8baa:	4313      	orrs	r3, r2
    8bac:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    8bb0:	f007 fc26 	bl	10400 <nrf52_errata_120>
    8bb4:	b120      	cbz	r0, 8bc0 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    8bb6:	4b2a      	ldr	r3, [pc, #168]	; (8c60 <SystemInit+0x1a0>)
    8bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
    8bbc:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    8bc0:	f007 fc31 	bl	10426 <nrf52_errata_136>
    8bc4:	b160      	cbz	r0, 8be0 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    8bc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8bca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8bce:	f013 0f01 	tst.w	r3, #1
    8bd2:	d005      	beq.n	8be0 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    8bd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8bd8:	f06f 0201 	mvn.w	r2, #1
    8bdc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    8be0:	f007 fc2b 	bl	1043a <nrf52_configuration_249>
    8be4:	b138      	cbz	r0, 8bf6 <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    8be6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8bea:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    8bee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8bf2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8bf6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8bfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    8bfe:	2b00      	cmp	r3, #0
    8c00:	db08      	blt.n	8c14 <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    8c02:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8c06:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8c0a:	2b00      	cmp	r3, #0
    8c0c:	db02      	blt.n	8c14 <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    8c0e:	f7ff ff4f 	bl	8ab0 <SystemCoreClockUpdate>
}
    8c12:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    8c14:	2001      	movs	r0, #1
    8c16:	f7ff ff41 	bl	8a9c <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    8c1a:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    8c1e:	2512      	movs	r5, #18
    8c20:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    8c24:	f7ff ff32 	bl	8a8c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    8c28:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    8c2c:	f7ff ff2e 	bl	8a8c <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    8c30:	2000      	movs	r0, #0
    8c32:	f7ff ff33 	bl	8a9c <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    8c36:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    8c3a:	490a      	ldr	r1, [pc, #40]	; (8c64 <SystemInit+0x1a4>)
    8c3c:	68ca      	ldr	r2, [r1, #12]
    8c3e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8c42:	4b09      	ldr	r3, [pc, #36]	; (8c68 <SystemInit+0x1a8>)
    8c44:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8c46:	60cb      	str	r3, [r1, #12]
    8c48:	f3bf 8f4f 	dsb	sy
    __NOP();
    8c4c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8c4e:	e7fd      	b.n	8c4c <SystemInit+0x18c>
    8c50:	4000c000 	.word	0x4000c000
    8c54:	40005000 	.word	0x40005000
    8c58:	00038148 	.word	0x00038148
    8c5c:	4000f000 	.word	0x4000f000
    8c60:	40029000 	.word	0x40029000
    8c64:	e000ed00 	.word	0xe000ed00
    8c68:	05fa0004 	.word	0x05fa0004

00008c6c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    8c6c:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    8c6e:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    8c70:	fab4 f384 	clz	r3, r4
    8c74:	f1c3 031f 	rsb	r3, r3, #31
    8c78:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    8c7c:	2b00      	cmp	r3, #0
    8c7e:	db16      	blt.n	8cae <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    8c80:	2201      	movs	r2, #1
    8c82:	fa02 f303 	lsl.w	r3, r2, r3
    8c86:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    8c8a:	f3bf 8f5b 	dmb	ish
    8c8e:	e850 2f00 	ldrex	r2, [r0]
    8c92:	42a2      	cmp	r2, r4
    8c94:	d104      	bne.n	8ca0 <nrfx_flag32_alloc+0x34>
    8c96:	e840 3e00 	strex	lr, r3, [r0]
    8c9a:	f1be 0f00 	cmp.w	lr, #0
    8c9e:	d1f6      	bne.n	8c8e <nrfx_flag32_alloc+0x22>
    8ca0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    8ca4:	d1e3      	bne.n	8c6e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    8ca6:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    8caa:	4802      	ldr	r0, [pc, #8]	; (8cb4 <nrfx_flag32_alloc+0x48>)
}
    8cac:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    8cae:	4802      	ldr	r0, [pc, #8]	; (8cb8 <nrfx_flag32_alloc+0x4c>)
    8cb0:	e7fc      	b.n	8cac <nrfx_flag32_alloc+0x40>
    8cb2:	bf00      	nop
    8cb4:	0bad0000 	.word	0x0bad0000
    8cb8:	0bad0002 	.word	0x0bad0002

00008cbc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    8cbc:	6803      	ldr	r3, [r0, #0]
    8cbe:	40cb      	lsrs	r3, r1
    8cc0:	f013 0f01 	tst.w	r3, #1
    8cc4:	d115      	bne.n	8cf2 <nrfx_flag32_free+0x36>
{
    8cc6:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    8cc8:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    8cca:	2301      	movs	r3, #1
    8ccc:	408b      	lsls	r3, r1
    8cce:	4313      	orrs	r3, r2
    8cd0:	f3bf 8f5b 	dmb	ish
    8cd4:	e850 cf00 	ldrex	ip, [r0]
    8cd8:	4594      	cmp	ip, r2
    8cda:	d104      	bne.n	8ce6 <nrfx_flag32_free+0x2a>
    8cdc:	e840 3e00 	strex	lr, r3, [r0]
    8ce0:	f1be 0f00 	cmp.w	lr, #0
    8ce4:	d1f6      	bne.n	8cd4 <nrfx_flag32_free+0x18>
    8ce6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    8cea:	d1ed      	bne.n	8cc8 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    8cec:	4802      	ldr	r0, [pc, #8]	; (8cf8 <nrfx_flag32_free+0x3c>)
}
    8cee:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    8cf2:	4802      	ldr	r0, [pc, #8]	; (8cfc <nrfx_flag32_free+0x40>)
}
    8cf4:	4770      	bx	lr
    8cf6:	bf00      	nop
    8cf8:	0bad0000 	.word	0x0bad0000
    8cfc:	0bad0004 	.word	0x0bad0004

00008d00 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    8d00:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d02:	b083      	sub	sp, #12
    switch (domain)
    8d04:	4605      	mov	r5, r0
    8d06:	b168      	cbz	r0, 8d24 <clock_stop+0x24>
    8d08:	2801      	cmp	r0, #1
    8d0a:	d020      	beq.n	8d4e <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    8d0c:	4c3d      	ldr	r4, [pc, #244]	; (8e04 <clock_stop+0x104>)
    8d0e:	23d8      	movs	r3, #216	; 0xd8
    8d10:	4622      	mov	r2, r4
    8d12:	493d      	ldr	r1, [pc, #244]	; (8e08 <clock_stop+0x108>)
    8d14:	483d      	ldr	r0, [pc, #244]	; (8e0c <clock_stop+0x10c>)
    8d16:	f006 faa2 	bl	f25e <assert_print>
    8d1a:	21d8      	movs	r1, #216	; 0xd8
    8d1c:	4620      	mov	r0, r4
    8d1e:	f006 fa97 	bl	f250 <assert_post_action>
            return;
    8d22:	e068      	b.n	8df6 <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    8d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8d28:	2202      	movs	r2, #2
    8d2a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8d2e:	2200      	movs	r2, #0
    8d30:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    8d34:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8d38:	2201      	movs	r2, #1
    8d3a:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    8d3c:	2301      	movs	r3, #1
    8d3e:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    8d42:	429d      	cmp	r5, r3
    8d44:	d00f      	beq.n	8d66 <clock_stop+0x66>
    8d46:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    8d48:	f242 7410 	movw	r4, #10000	; 0x2710
    8d4c:	e029      	b.n	8da2 <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    8d4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8d52:	2201      	movs	r2, #1
    8d54:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8d58:	2100      	movs	r1, #0
    8d5a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    8d5e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8d62:	605a      	str	r2, [r3, #4]
}
    8d64:	e7ea      	b.n	8d3c <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    8d66:	f10d 0607 	add.w	r6, sp, #7
    8d6a:	e7ed      	b.n	8d48 <clock_stop+0x48>
            if (p_clk_src != NULL)
    8d6c:	b136      	cbz	r6, 8d7c <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8d6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8d72:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    8d76:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    8d7a:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8d7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8d80:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    8d84:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8d88:	d12f      	bne.n	8dea <clock_stop+0xea>
    return false;
    8d8a:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    8d8c:	b38b      	cbz	r3, 8df2 <clock_stop+0xf2>
    8d8e:	b11e      	cbz	r6, 8d98 <clock_stop+0x98>
    8d90:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8d94:	2b01      	cmp	r3, #1
    8d96:	d12c      	bne.n	8df2 <clock_stop+0xf2>
    8d98:	2001      	movs	r0, #1
    8d9a:	f007 fb61 	bl	10460 <nrfx_busy_wait>
    8d9e:	3c01      	subs	r4, #1
    8da0:	d027      	beq.n	8df2 <clock_stop+0xf2>
    switch (domain)
    8da2:	2d00      	cmp	r5, #0
    8da4:	d0e2      	beq.n	8d6c <clock_stop+0x6c>
    8da6:	2d01      	cmp	r5, #1
    8da8:	d00e      	beq.n	8dc8 <clock_stop+0xc8>
            NRFX_ASSERT(0);
    8daa:	4f19      	ldr	r7, [pc, #100]	; (8e10 <clock_stop+0x110>)
    8dac:	f44f 734f 	mov.w	r3, #828	; 0x33c
    8db0:	463a      	mov	r2, r7
    8db2:	4915      	ldr	r1, [pc, #84]	; (8e08 <clock_stop+0x108>)
    8db4:	4815      	ldr	r0, [pc, #84]	; (8e0c <clock_stop+0x10c>)
    8db6:	f006 fa52 	bl	f25e <assert_print>
    8dba:	f44f 714f 	mov.w	r1, #828	; 0x33c
    8dbe:	4638      	mov	r0, r7
    8dc0:	f006 fa46 	bl	f250 <assert_post_action>
            return false;
    8dc4:	2300      	movs	r3, #0
    8dc6:	e7e1      	b.n	8d8c <clock_stop+0x8c>
            if (p_clk_src != NULL)
    8dc8:	b136      	cbz	r6, 8dd8 <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    8dca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8dce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    8dd2:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    8dd6:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8dd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8ddc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    8de0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8de4:	d103      	bne.n	8dee <clock_stop+0xee>
    return false;
    8de6:	2300      	movs	r3, #0
    8de8:	e7d0      	b.n	8d8c <clock_stop+0x8c>
                return true;
    8dea:	2301      	movs	r3, #1
    8dec:	e7ce      	b.n	8d8c <clock_stop+0x8c>
                return true;
    8dee:	2301      	movs	r3, #1
    8df0:	e7cc      	b.n	8d8c <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    8df2:	2d01      	cmp	r5, #1
    8df4:	d001      	beq.n	8dfa <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    8df6:	b003      	add	sp, #12
    8df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    8dfa:	4b06      	ldr	r3, [pc, #24]	; (8e14 <clock_stop+0x114>)
    8dfc:	2200      	movs	r2, #0
    8dfe:	715a      	strb	r2, [r3, #5]
    8e00:	e7f9      	b.n	8df6 <clock_stop+0xf6>
    8e02:	bf00      	nop
    8e04:	00012ab4 	.word	0x00012ab4
    8e08:	00011cc8 	.word	0x00011cc8
    8e0c:	0001160c 	.word	0x0001160c
    8e10:	00012af4 	.word	0x00012af4
    8e14:	2000d01c 	.word	0x2000d01c

00008e18 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    8e18:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    8e1a:	4604      	mov	r4, r0
    8e1c:	b150      	cbz	r0, 8e34 <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    8e1e:	4b0d      	ldr	r3, [pc, #52]	; (8e54 <nrfx_clock_init+0x3c>)
    8e20:	791b      	ldrb	r3, [r3, #4]
    8e22:	b9ab      	cbnz	r3, 8e50 <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    8e24:	4b0b      	ldr	r3, [pc, #44]	; (8e54 <nrfx_clock_init+0x3c>)
    8e26:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    8e28:	2201      	movs	r2, #1
    8e2a:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    8e2c:	2200      	movs	r2, #0
    8e2e:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    8e30:	4809      	ldr	r0, [pc, #36]	; (8e58 <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    8e32:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    8e34:	4d09      	ldr	r5, [pc, #36]	; (8e5c <nrfx_clock_init+0x44>)
    8e36:	f240 1315 	movw	r3, #277	; 0x115
    8e3a:	462a      	mov	r2, r5
    8e3c:	4908      	ldr	r1, [pc, #32]	; (8e60 <nrfx_clock_init+0x48>)
    8e3e:	4809      	ldr	r0, [pc, #36]	; (8e64 <nrfx_clock_init+0x4c>)
    8e40:	f006 fa0d 	bl	f25e <assert_print>
    8e44:	f240 1115 	movw	r1, #277	; 0x115
    8e48:	4628      	mov	r0, r5
    8e4a:	f006 fa01 	bl	f250 <assert_post_action>
    8e4e:	e7e6      	b.n	8e1e <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    8e50:	4805      	ldr	r0, [pc, #20]	; (8e68 <nrfx_clock_init+0x50>)
    return err_code;
    8e52:	e7ee      	b.n	8e32 <nrfx_clock_init+0x1a>
    8e54:	2000d01c 	.word	0x2000d01c
    8e58:	0bad0000 	.word	0x0bad0000
    8e5c:	00012ab4 	.word	0x00012ab4
    8e60:	00012b28 	.word	0x00012b28
    8e64:	0001160c 	.word	0x0001160c
    8e68:	0bad000c 	.word	0x0bad000c

00008e6c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    8e6c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8e6e:	4b0f      	ldr	r3, [pc, #60]	; (8eac <nrfx_clock_enable+0x40>)
    8e70:	791b      	ldrb	r3, [r3, #4]
    8e72:	b153      	cbz	r3, 8e8a <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8e74:	2000      	movs	r0, #0
    8e76:	f7fc ffa9 	bl	5dcc <arch_irq_is_enabled>
    8e7a:	b1a0      	cbz	r0, 8ea6 <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    8e7c:	f007 faf4 	bl	10468 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8e84:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    8e88:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8e8a:	4c09      	ldr	r4, [pc, #36]	; (8eb0 <nrfx_clock_enable+0x44>)
    8e8c:	f44f 7397 	mov.w	r3, #302	; 0x12e
    8e90:	4622      	mov	r2, r4
    8e92:	4908      	ldr	r1, [pc, #32]	; (8eb4 <nrfx_clock_enable+0x48>)
    8e94:	4808      	ldr	r0, [pc, #32]	; (8eb8 <nrfx_clock_enable+0x4c>)
    8e96:	f006 f9e2 	bl	f25e <assert_print>
    8e9a:	f44f 7197 	mov.w	r1, #302	; 0x12e
    8e9e:	4620      	mov	r0, r4
    8ea0:	f006 f9d6 	bl	f250 <assert_post_action>
    8ea4:	e7e6      	b.n	8e74 <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8ea6:	f7fc ff83 	bl	5db0 <arch_irq_enable>
    8eaa:	e7e7      	b.n	8e7c <nrfx_clock_enable+0x10>
    8eac:	2000d01c 	.word	0x2000d01c
    8eb0:	00012ab4 	.word	0x00012ab4
    8eb4:	00012b38 	.word	0x00012b38
    8eb8:	0001160c 	.word	0x0001160c

00008ebc <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    8ebc:	b530      	push	{r4, r5, lr}
    8ebe:	b083      	sub	sp, #12
    8ec0:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8ec2:	4b34      	ldr	r3, [pc, #208]	; (8f94 <nrfx_clock_start+0xd8>)
    8ec4:	791b      	ldrb	r3, [r3, #4]
    8ec6:	b183      	cbz	r3, 8eea <nrfx_clock_start+0x2e>
    switch (domain)
    8ec8:	b1ec      	cbz	r4, 8f06 <nrfx_clock_start+0x4a>
    8eca:	2c01      	cmp	r4, #1
    8ecc:	d055      	beq.n	8f7a <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    8ece:	4c32      	ldr	r4, [pc, #200]	; (8f98 <nrfx_clock_start+0xdc>)
    8ed0:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    8ed4:	4622      	mov	r2, r4
    8ed6:	4931      	ldr	r1, [pc, #196]	; (8f9c <nrfx_clock_start+0xe0>)
    8ed8:	4831      	ldr	r0, [pc, #196]	; (8fa0 <nrfx_clock_start+0xe4>)
    8eda:	f006 f9c0 	bl	f25e <assert_print>
    8ede:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    8ee2:	4620      	mov	r0, r4
    8ee4:	f006 f9b4 	bl	f250 <assert_post_action>
            break;
    }
}
    8ee8:	e052      	b.n	8f90 <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8eea:	4d2b      	ldr	r5, [pc, #172]	; (8f98 <nrfx_clock_start+0xdc>)
    8eec:	f44f 73b4 	mov.w	r3, #360	; 0x168
    8ef0:	462a      	mov	r2, r5
    8ef2:	492c      	ldr	r1, [pc, #176]	; (8fa4 <nrfx_clock_start+0xe8>)
    8ef4:	482a      	ldr	r0, [pc, #168]	; (8fa0 <nrfx_clock_start+0xe4>)
    8ef6:	f006 f9b2 	bl	f25e <assert_print>
    8efa:	f44f 71b4 	mov.w	r1, #360	; 0x168
    8efe:	4628      	mov	r0, r5
    8f00:	f006 f9a6 	bl	f250 <assert_post_action>
    8f04:	e7e0      	b.n	8ec8 <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8f06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8f0a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    8f0e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    8f12:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8f14:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    8f18:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8f1c:	d117      	bne.n	8f4e <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    8f1e:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    8f22:	f013 0f01 	tst.w	r3, #1
    8f26:	d116      	bne.n	8f56 <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    8f28:	f007 fa9e 	bl	10468 <clock_initial_lfclksrc_get>
    8f2c:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    8f2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f32:	9a01      	ldr	r2, [sp, #4]
    8f34:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8f38:	2200      	movs	r2, #0
    8f3a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    8f3e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    8f42:	2202      	movs	r2, #2
    8f44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8f48:	2201      	movs	r2, #1
    8f4a:	609a      	str	r2, [r3, #8]
}
    8f4c:	e020      	b.n	8f90 <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    8f4e:	a801      	add	r0, sp, #4
    8f50:	f007 fa8c 	bl	1046c <clock_lfclksrc_tweak>
    8f54:	e7eb      	b.n	8f2e <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    8f56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f5a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    8f5e:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    8f62:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    8f64:	a801      	add	r0, sp, #4
    8f66:	f007 fa81 	bl	1046c <clock_lfclksrc_tweak>
    8f6a:	2800      	cmp	r0, #0
    8f6c:	d0df      	beq.n	8f2e <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    8f6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f72:	2202      	movs	r2, #2
    8f74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    8f78:	e00a      	b.n	8f90 <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8f7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f7e:	2200      	movs	r2, #0
    8f80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8f84:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    8f88:	2201      	movs	r2, #1
    8f8a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8f8e:	601a      	str	r2, [r3, #0]
}
    8f90:	b003      	add	sp, #12
    8f92:	bd30      	pop	{r4, r5, pc}
    8f94:	2000d01c 	.word	0x2000d01c
    8f98:	00012ab4 	.word	0x00012ab4
    8f9c:	00011cc8 	.word	0x00011cc8
    8fa0:	0001160c 	.word	0x0001160c
    8fa4:	00012b38 	.word	0x00012b38

00008fa8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    8fa8:	b538      	push	{r3, r4, r5, lr}
    8faa:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8fac:	4b0a      	ldr	r3, [pc, #40]	; (8fd8 <nrfx_clock_stop+0x30>)
    8fae:	791b      	ldrb	r3, [r3, #4]
    8fb0:	b11b      	cbz	r3, 8fba <nrfx_clock_stop+0x12>
    clock_stop(domain);
    8fb2:	4620      	mov	r0, r4
    8fb4:	f7ff fea4 	bl	8d00 <clock_stop>
}
    8fb8:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    8fba:	4d08      	ldr	r5, [pc, #32]	; (8fdc <nrfx_clock_stop+0x34>)
    8fbc:	f240 13ad 	movw	r3, #429	; 0x1ad
    8fc0:	462a      	mov	r2, r5
    8fc2:	4907      	ldr	r1, [pc, #28]	; (8fe0 <nrfx_clock_stop+0x38>)
    8fc4:	4807      	ldr	r0, [pc, #28]	; (8fe4 <nrfx_clock_stop+0x3c>)
    8fc6:	f006 f94a 	bl	f25e <assert_print>
    8fca:	f240 11ad 	movw	r1, #429	; 0x1ad
    8fce:	4628      	mov	r0, r5
    8fd0:	f006 f93e 	bl	f250 <assert_post_action>
    8fd4:	e7ed      	b.n	8fb2 <nrfx_clock_stop+0xa>
    8fd6:	bf00      	nop
    8fd8:	2000d01c 	.word	0x2000d01c
    8fdc:	00012ab4 	.word	0x00012ab4
    8fe0:	00012b38 	.word	0x00012b38
    8fe4:	0001160c 	.word	0x0001160c

00008fe8 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    8fe8:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    8fea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8fee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    8ff2:	b18b      	cbz	r3, 9018 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8ff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8ff8:	2200      	movs	r2, #0
    8ffa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8ffe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    9002:	2201      	movs	r2, #1
    9004:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    9008:	4b15      	ldr	r3, [pc, #84]	; (9060 <nrfx_power_clock_irq_handler+0x78>)
    900a:	795b      	ldrb	r3, [r3, #5]
    900c:	b923      	cbnz	r3, 9018 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    900e:	4b14      	ldr	r3, [pc, #80]	; (9060 <nrfx_power_clock_irq_handler+0x78>)
    9010:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    9012:	681b      	ldr	r3, [r3, #0]
    9014:	2000      	movs	r0, #0
    9016:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9018:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    901c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    9020:	b19b      	cbz	r3, 904a <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9026:	2200      	movs	r2, #0
    9028:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    902c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9030:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9034:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    9038:	f012 0f03 	tst.w	r2, #3
    903c:	d106      	bne.n	904c <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    903e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9042:	2201      	movs	r2, #1
    9044:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9048:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    904a:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    904c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9050:	2202      	movs	r2, #2
    9052:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    9056:	4b02      	ldr	r3, [pc, #8]	; (9060 <nrfx_power_clock_irq_handler+0x78>)
    9058:	681b      	ldr	r3, [r3, #0]
    905a:	2001      	movs	r0, #1
    905c:	4798      	blx	r3
}
    905e:	e7f4      	b.n	904a <nrfx_power_clock_irq_handler+0x62>
    9060:	2000d01c 	.word	0x2000d01c

00009064 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    9064:	3008      	adds	r0, #8
    9066:	4b03      	ldr	r3, [pc, #12]	; (9074 <pin_in_use+0x10>)
    9068:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    906c:	f000 0001 	and.w	r0, r0, #1
    9070:	4770      	bx	lr
    9072:	bf00      	nop
    9074:	2000407c 	.word	0x2000407c

00009078 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    9078:	3008      	adds	r0, #8
    907a:	4b03      	ldr	r3, [pc, #12]	; (9088 <pin_in_use_by_te+0x10>)
    907c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    9080:	f3c0 1040 	ubfx	r0, r0, #5, #1
    9084:	4770      	bx	lr
    9086:	bf00      	nop
    9088:	2000407c 	.word	0x2000407c

0000908c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    908c:	3008      	adds	r0, #8
    908e:	4b04      	ldr	r3, [pc, #16]	; (90a0 <pin_has_trigger+0x14>)
    9090:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    9094:	f010 001c 	ands.w	r0, r0, #28
    9098:	bf18      	it	ne
    909a:	2001      	movne	r0, #1
    909c:	4770      	bx	lr
    909e:	bf00      	nop
    90a0:	2000407c 	.word	0x2000407c

000090a4 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    90a4:	3008      	adds	r0, #8
    90a6:	4b03      	ldr	r3, [pc, #12]	; (90b4 <pin_is_output+0x10>)
    90a8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    90ac:	f3c0 0040 	ubfx	r0, r0, #1, #1
    90b0:	4770      	bx	lr
    90b2:	bf00      	nop
    90b4:	2000407c 	.word	0x2000407c

000090b8 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    90b8:	3008      	adds	r0, #8
    90ba:	4b02      	ldr	r3, [pc, #8]	; (90c4 <pin_te_get+0xc>)
    90bc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    90c0:	0b40      	lsrs	r0, r0, #13
    90c2:	4770      	bx	lr
    90c4:	2000407c 	.word	0x2000407c

000090c8 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    90c8:	2200      	movs	r2, #0
    90ca:	e004      	b.n	90d6 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    90cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    90d0:	4283      	cmp	r3, r0
    90d2:	d00f      	beq.n	90f4 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    90d4:	3201      	adds	r2, #1
    90d6:	2a2f      	cmp	r2, #47	; 0x2f
    90d8:	d80a      	bhi.n	90f0 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    90da:	f102 0308 	add.w	r3, r2, #8
    90de:	4906      	ldr	r1, [pc, #24]	; (90f8 <handler_in_use+0x30>)
    90e0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    90e4:	f413 7f80 	tst.w	r3, #256	; 0x100
    90e8:	d0f0      	beq.n	90cc <handler_in_use+0x4>
    90ea:	f3c3 2343 	ubfx	r3, r3, #9, #4
    90ee:	e7ef      	b.n	90d0 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    90f0:	2000      	movs	r0, #0
    90f2:	4770      	bx	lr
            return true;
    90f4:	2001      	movs	r0, #1
}
    90f6:	4770      	bx	lr
    90f8:	2000407c 	.word	0x2000407c

000090fc <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    90fc:	2300      	movs	r3, #0
    90fe:	b113      	cbz	r3, 9106 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    9100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9104:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    9106:	4a07      	ldr	r2, [pc, #28]	; (9124 <find_handler+0x28>)
    9108:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    910c:	4282      	cmp	r2, r0
    910e:	d001      	beq.n	9114 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    9110:	3301      	adds	r3, #1
    9112:	e7f4      	b.n	90fe <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    9114:	4a03      	ldr	r2, [pc, #12]	; (9124 <find_handler+0x28>)
    9116:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    911a:	6852      	ldr	r2, [r2, #4]
    911c:	428a      	cmp	r2, r1
    911e:	d1f7      	bne.n	9110 <find_handler+0x14>
            return i;
    9120:	4618      	mov	r0, r3
    9122:	4770      	bx	lr
    9124:	2000407c 	.word	0x2000407c

00009128 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    9128:	3008      	adds	r0, #8
    912a:	4b06      	ldr	r3, [pc, #24]	; (9144 <channel_handler_get+0x1c>)
    912c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    9130:	f410 7f80 	tst.w	r0, #256	; 0x100
    9134:	d004      	beq.n	9140 <channel_handler_get+0x18>
    9136:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    913a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    913e:	4770      	bx	lr
        return NULL;
    9140:	2000      	movs	r0, #0
}
    9142:	4770      	bx	lr
    9144:	2000407c 	.word	0x2000407c

00009148 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    9148:	b570      	push	{r4, r5, r6, lr}
    914a:	4604      	mov	r4, r0
    914c:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    914e:	f7ff ffeb 	bl	9128 <channel_handler_get>

    if (handler)
    9152:	b120      	cbz	r0, 915e <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    9154:	6806      	ldr	r6, [r0, #0]
    9156:	6842      	ldr	r2, [r0, #4]
    9158:	4629      	mov	r1, r5
    915a:	4620      	mov	r0, r4
    915c:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    915e:	4b04      	ldr	r3, [pc, #16]	; (9170 <call_handler+0x28>)
    9160:	689b      	ldr	r3, [r3, #8]
    9162:	b123      	cbz	r3, 916e <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    9164:	4a02      	ldr	r2, [pc, #8]	; (9170 <call_handler+0x28>)
    9166:	68d2      	ldr	r2, [r2, #12]
    9168:	4629      	mov	r1, r5
    916a:	4620      	mov	r0, r4
    916c:	4798      	blx	r3
    }
}
    916e:	bd70      	pop	{r4, r5, r6, pc}
    9170:	2000407c 	.word	0x2000407c

00009174 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    9174:	f100 0208 	add.w	r2, r0, #8
    9178:	4b16      	ldr	r3, [pc, #88]	; (91d4 <release_handler+0x60>)
    917a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    917e:	f413 7f80 	tst.w	r3, #256	; 0x100
    9182:	d026      	beq.n	91d2 <release_handler+0x5e>
{
    9184:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    9186:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    918a:	4610      	mov	r0, r2
    918c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    9190:	4a10      	ldr	r2, [pc, #64]	; (91d4 <release_handler+0x60>)
    9192:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    9196:	4620      	mov	r0, r4
    9198:	f7ff ff96 	bl	90c8 <handler_in_use>
    919c:	b100      	cbz	r0, 91a0 <release_handler+0x2c>
}
    919e:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    91a0:	480c      	ldr	r0, [pc, #48]	; (91d4 <release_handler+0x60>)
    91a2:	2300      	movs	r3, #0
    91a4:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    91a8:	4621      	mov	r1, r4
    91aa:	3074      	adds	r0, #116	; 0x74
    91ac:	f7ff fd86 	bl	8cbc <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    91b0:	4b09      	ldr	r3, [pc, #36]	; (91d8 <release_handler+0x64>)
    91b2:	4298      	cmp	r0, r3
    91b4:	d0f3      	beq.n	919e <release_handler+0x2a>
    91b6:	4c09      	ldr	r4, [pc, #36]	; (91dc <release_handler+0x68>)
    91b8:	f44f 7399 	mov.w	r3, #306	; 0x132
    91bc:	4622      	mov	r2, r4
    91be:	4908      	ldr	r1, [pc, #32]	; (91e0 <release_handler+0x6c>)
    91c0:	4808      	ldr	r0, [pc, #32]	; (91e4 <release_handler+0x70>)
    91c2:	f006 f84c 	bl	f25e <assert_print>
    91c6:	f44f 7199 	mov.w	r1, #306	; 0x132
    91ca:	4620      	mov	r0, r4
    91cc:	f006 f840 	bl	f250 <assert_post_action>
    91d0:	e7e5      	b.n	919e <release_handler+0x2a>
    91d2:	4770      	bx	lr
    91d4:	2000407c 	.word	0x2000407c
    91d8:	0bad0000 	.word	0x0bad0000
    91dc:	00012b58 	.word	0x00012b58
    91e0:	00012b98 	.word	0x00012b98
    91e4:	0001160c 	.word	0x0001160c

000091e8 <pin_handler_trigger_uninit>:
{
    91e8:	b510      	push	{r4, lr}
    91ea:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    91ec:	f7ff ff44 	bl	9078 <pin_in_use_by_te>
    91f0:	b140      	cbz	r0, 9204 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    91f2:	4620      	mov	r0, r4
    91f4:	f7ff ff60 	bl	90b8 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    91f8:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    91fc:	4b06      	ldr	r3, [pc, #24]	; (9218 <pin_handler_trigger_uninit+0x30>)
    91fe:	2200      	movs	r2, #0
    9200:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    9204:	4620      	mov	r0, r4
    9206:	f7ff ffb5 	bl	9174 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    920a:	3408      	adds	r4, #8
    920c:	4b03      	ldr	r3, [pc, #12]	; (921c <pin_handler_trigger_uninit+0x34>)
    920e:	2200      	movs	r2, #0
    9210:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    9214:	bd10      	pop	{r4, pc}
    9216:	bf00      	nop
    9218:	40006000 	.word	0x40006000
    921c:	2000407c 	.word	0x2000407c

00009220 <pin_handler_set>:
{
    9220:	b570      	push	{r4, r5, r6, lr}
    9222:	b082      	sub	sp, #8
    9224:	4606      	mov	r6, r0
    9226:	460c      	mov	r4, r1
    9228:	4615      	mov	r5, r2
    release_handler(pin);
    922a:	f7ff ffa3 	bl	9174 <release_handler>
    if (!handler)
    922e:	b324      	cbz	r4, 927a <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    9230:	4629      	mov	r1, r5
    9232:	4620      	mov	r0, r4
    9234:	f7ff ff62 	bl	90fc <find_handler>
    if (handler_id < 0)
    9238:	1e03      	subs	r3, r0, #0
    923a:	db13      	blt.n	9264 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    923c:	4a10      	ldr	r2, [pc, #64]	; (9280 <pin_handler_set+0x60>)
    923e:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    9242:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    9246:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    9248:	025b      	lsls	r3, r3, #9
    924a:	b29b      	uxth	r3, r3
    924c:	f106 0008 	add.w	r0, r6, #8
    9250:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    9254:	430b      	orrs	r3, r1
    9256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    925a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    925e:	4809      	ldr	r0, [pc, #36]	; (9284 <pin_handler_set+0x64>)
}
    9260:	b002      	add	sp, #8
    9262:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    9264:	f10d 0107 	add.w	r1, sp, #7
    9268:	4807      	ldr	r0, [pc, #28]	; (9288 <pin_handler_set+0x68>)
    926a:	f7ff fcff 	bl	8c6c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    926e:	4b05      	ldr	r3, [pc, #20]	; (9284 <pin_handler_set+0x64>)
    9270:	4298      	cmp	r0, r3
    9272:	d1f5      	bne.n	9260 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    9274:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9278:	e7e0      	b.n	923c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    927a:	4802      	ldr	r0, [pc, #8]	; (9284 <pin_handler_set+0x64>)
    927c:	e7f0      	b.n	9260 <pin_handler_set+0x40>
    927e:	bf00      	nop
    9280:	2000407c 	.word	0x2000407c
    9284:	0bad0000 	.word	0x0bad0000
    9288:	200040f0 	.word	0x200040f0

0000928c <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    928c:	b538      	push	{r3, r4, r5, lr}
    928e:	4604      	mov	r4, r0
    while (mask)
    9290:	e018      	b.n	92c4 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    9292:	fa94 f3a4 	rbit	r3, r4
    9296:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    929a:	2201      	movs	r2, #1
    929c:	409a      	lsls	r2, r3
    929e:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    92a2:	4a0a      	ldr	r2, [pc, #40]	; (92cc <gpiote_evt_handle+0x40>)
    92a4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    92a8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    92ac:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    92b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    92b4:	f3c0 4001 	ubfx	r0, r0, #16, #2
    92b8:	f007 f904 	bl	104c4 <gpiote_polarity_to_trigger>
    92bc:	4601      	mov	r1, r0
    92be:	4628      	mov	r0, r5
    92c0:	f7ff ff42 	bl	9148 <call_handler>
    while (mask)
    92c4:	2c00      	cmp	r4, #0
    92c6:	d1e4      	bne.n	9292 <gpiote_evt_handle+0x6>
    }
}
    92c8:	bd38      	pop	{r3, r4, r5, pc}
    92ca:	bf00      	nop
    92cc:	40006000 	.word	0x40006000

000092d0 <latch_pending_read_and_check>:
{
    92d0:	b082      	sub	sp, #8
    92d2:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    92d4:	4b11      	ldr	r3, [pc, #68]	; (931c <latch_pending_read_and_check+0x4c>)
    92d6:	e893 0003 	ldmia.w	r3, {r0, r1}
    92da:	ab02      	add	r3, sp, #8
    92dc:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    92e0:	4660      	mov	r0, ip
    92e2:	2300      	movs	r3, #0
    92e4:	e00b      	b.n	92fe <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    92e6:	aa02      	add	r2, sp, #8
    92e8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    92ec:	f852 2c08 	ldr.w	r2, [r2, #-8]
    92f0:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    92f4:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    92f8:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    92fc:	3301      	adds	r3, #1
    92fe:	2b01      	cmp	r3, #1
    9300:	d9f1      	bls.n	92e6 <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    9302:	2300      	movs	r3, #0
    9304:	2b01      	cmp	r3, #1
    9306:	d804      	bhi.n	9312 <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    9308:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    930c:	b922      	cbnz	r2, 9318 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    930e:	3301      	adds	r3, #1
    9310:	e7f8      	b.n	9304 <latch_pending_read_and_check+0x34>
    return false;
    9312:	2000      	movs	r0, #0
}
    9314:	b002      	add	sp, #8
    9316:	4770      	bx	lr
            return true;
    9318:	2001      	movs	r0, #1
    931a:	e7fb      	b.n	9314 <latch_pending_read_and_check+0x44>
    931c:	000110e0 	.word	0x000110e0

00009320 <next_sense_cond_call_handler>:
{
    9320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9324:	4604      	mov	r4, r0
    9326:	460d      	mov	r5, r1
    9328:	4616      	mov	r6, r2
    if (is_level(trigger))
    932a:	4608      	mov	r0, r1
    932c:	f007 f8cc 	bl	104c8 <is_level>
    9330:	bb60      	cbnz	r0, 938c <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9332:	2e02      	cmp	r6, #2
    9334:	f000 80f5 	beq.w	9522 <next_sense_cond_call_handler+0x202>
    9338:	f04f 0802 	mov.w	r8, #2
    switch (port)
    933c:	0963      	lsrs	r3, r4, #5
    933e:	f000 80f3 	beq.w	9528 <next_sense_cond_call_handler+0x208>
    9342:	2b01      	cmp	r3, #1
    9344:	f040 80f3 	bne.w	952e <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    9348:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    934c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9350:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9352:	f013 0f01 	tst.w	r3, #1
    9356:	f000 80ec 	beq.w	9532 <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    935a:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    935e:	0963      	lsrs	r3, r4, #5
    9360:	f000 80f5 	beq.w	954e <next_sense_cond_call_handler+0x22e>
    9364:	2b01      	cmp	r3, #1
    9366:	f000 80f5 	beq.w	9554 <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    936a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 9590 <next_sense_cond_call_handler+0x270>
    936e:	f240 232e 	movw	r3, #558	; 0x22e
    9372:	464a      	mov	r2, r9
    9374:	4987      	ldr	r1, [pc, #540]	; (9594 <next_sense_cond_call_handler+0x274>)
    9376:	4888      	ldr	r0, [pc, #544]	; (9598 <next_sense_cond_call_handler+0x278>)
    9378:	f005 ff71 	bl	f25e <assert_print>
    937c:	f240 212e 	movw	r1, #558	; 0x22e
    9380:	4648      	mov	r0, r9
    9382:	f005 ff65 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    9386:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    938a:	e0e4      	b.n	9556 <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    938c:	4629      	mov	r1, r5
    938e:	4620      	mov	r0, r4
    9390:	f7ff feda 	bl	9148 <call_handler>
    switch (port)
    9394:	0963      	lsrs	r3, r4, #5
    9396:	d01f      	beq.n	93d8 <next_sense_cond_call_handler+0xb8>
    9398:	2b01      	cmp	r3, #1
    939a:	d120      	bne.n	93de <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    939c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    93a0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    93a4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    93a6:	f013 0f01 	tst.w	r3, #1
    93aa:	d01a      	beq.n	93e2 <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    93ac:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    93b0:	0963      	lsrs	r3, r4, #5
    93b2:	d024      	beq.n	93fe <next_sense_cond_call_handler+0xde>
    93b4:	2b01      	cmp	r3, #1
    93b6:	d025      	beq.n	9404 <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    93b8:	4f75      	ldr	r7, [pc, #468]	; (9590 <next_sense_cond_call_handler+0x270>)
    93ba:	f240 232e 	movw	r3, #558	; 0x22e
    93be:	463a      	mov	r2, r7
    93c0:	4974      	ldr	r1, [pc, #464]	; (9594 <next_sense_cond_call_handler+0x274>)
    93c2:	4875      	ldr	r0, [pc, #468]	; (9598 <next_sense_cond_call_handler+0x278>)
    93c4:	f005 ff4b 	bl	f25e <assert_print>
    93c8:	f240 212e 	movw	r1, #558	; 0x22e
    93cc:	4638      	mov	r0, r7
    93ce:	f005 ff3f 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    93d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    93d6:	e016      	b.n	9406 <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    93d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    93dc:	e7e0      	b.n	93a0 <next_sense_cond_call_handler+0x80>
    switch (port)
    93de:	2300      	movs	r3, #0
    93e0:	e7de      	b.n	93a0 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    93e2:	4d6b      	ldr	r5, [pc, #428]	; (9590 <next_sense_cond_call_handler+0x270>)
    93e4:	f240 2329 	movw	r3, #553	; 0x229
    93e8:	462a      	mov	r2, r5
    93ea:	496c      	ldr	r1, [pc, #432]	; (959c <next_sense_cond_call_handler+0x27c>)
    93ec:	486a      	ldr	r0, [pc, #424]	; (9598 <next_sense_cond_call_handler+0x278>)
    93ee:	f005 ff36 	bl	f25e <assert_print>
    93f2:	f240 2129 	movw	r1, #553	; 0x229
    93f6:	4628      	mov	r0, r5
    93f8:	f005 ff2a 	bl	f250 <assert_post_action>
    93fc:	e7d6      	b.n	93ac <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    93fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9402:	e000      	b.n	9406 <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9404:	4b66      	ldr	r3, [pc, #408]	; (95a0 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    9406:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    940a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    940e:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    9412:	429e      	cmp	r6, r3
    9414:	f040 80af 	bne.w	9576 <next_sense_cond_call_handler+0x256>
    switch (port)
    9418:	0963      	lsrs	r3, r4, #5
    941a:	d01f      	beq.n	945c <next_sense_cond_call_handler+0x13c>
    941c:	2b01      	cmp	r3, #1
    941e:	d120      	bne.n	9462 <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    9420:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9424:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9428:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    942a:	f013 0f01 	tst.w	r3, #1
    942e:	d01a      	beq.n	9466 <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    9430:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9434:	0963      	lsrs	r3, r4, #5
    9436:	d024      	beq.n	9482 <next_sense_cond_call_handler+0x162>
    9438:	2b01      	cmp	r3, #1
    943a:	d025      	beq.n	9488 <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    943c:	4f54      	ldr	r7, [pc, #336]	; (9590 <next_sense_cond_call_handler+0x270>)
    943e:	f240 232e 	movw	r3, #558	; 0x22e
    9442:	463a      	mov	r2, r7
    9444:	4953      	ldr	r1, [pc, #332]	; (9594 <next_sense_cond_call_handler+0x274>)
    9446:	4854      	ldr	r0, [pc, #336]	; (9598 <next_sense_cond_call_handler+0x278>)
    9448:	f005 ff09 	bl	f25e <assert_print>
    944c:	f240 212e 	movw	r1, #558	; 0x22e
    9450:	4638      	mov	r0, r7
    9452:	f005 fefd 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    9456:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    945a:	e016      	b.n	948a <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    945c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9460:	e7e0      	b.n	9424 <next_sense_cond_call_handler+0x104>
    switch (port)
    9462:	2300      	movs	r3, #0
    9464:	e7de      	b.n	9424 <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9466:	4d4a      	ldr	r5, [pc, #296]	; (9590 <next_sense_cond_call_handler+0x270>)
    9468:	f240 2329 	movw	r3, #553	; 0x229
    946c:	462a      	mov	r2, r5
    946e:	494b      	ldr	r1, [pc, #300]	; (959c <next_sense_cond_call_handler+0x27c>)
    9470:	4849      	ldr	r0, [pc, #292]	; (9598 <next_sense_cond_call_handler+0x278>)
    9472:	f005 fef4 	bl	f25e <assert_print>
    9476:	f240 2129 	movw	r1, #553	; 0x229
    947a:	4628      	mov	r0, r5
    947c:	f005 fee8 	bl	f250 <assert_post_action>
    9480:	e7d6      	b.n	9430 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    9482:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9486:	e000      	b.n	948a <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9488:	4945      	ldr	r1, [pc, #276]	; (95a0 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    948a:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    948e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    9492:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    9496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    949a:	0963      	lsrs	r3, r4, #5
    949c:	d01f      	beq.n	94de <next_sense_cond_call_handler+0x1be>
    949e:	2b01      	cmp	r3, #1
    94a0:	d120      	bne.n	94e4 <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    94a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    94a6:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    94aa:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    94ac:	f013 0f01 	tst.w	r3, #1
    94b0:	d01a      	beq.n	94e8 <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    94b2:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    94b6:	0964      	lsrs	r4, r4, #5
    94b8:	d024      	beq.n	9504 <next_sense_cond_call_handler+0x1e4>
    94ba:	2c01      	cmp	r4, #1
    94bc:	d025      	beq.n	950a <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    94be:	4c34      	ldr	r4, [pc, #208]	; (9590 <next_sense_cond_call_handler+0x270>)
    94c0:	f240 232e 	movw	r3, #558	; 0x22e
    94c4:	4622      	mov	r2, r4
    94c6:	4933      	ldr	r1, [pc, #204]	; (9594 <next_sense_cond_call_handler+0x274>)
    94c8:	4833      	ldr	r0, [pc, #204]	; (9598 <next_sense_cond_call_handler+0x278>)
    94ca:	f005 fec8 	bl	f25e <assert_print>
    94ce:	f240 212e 	movw	r1, #558	; 0x22e
    94d2:	4620      	mov	r0, r4
    94d4:	f005 febc 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    94d8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    94dc:	e016      	b.n	950c <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    94de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    94e2:	e7e0      	b.n	94a6 <next_sense_cond_call_handler+0x186>
    switch (port)
    94e4:	2300      	movs	r3, #0
    94e6:	e7de      	b.n	94a6 <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    94e8:	4d29      	ldr	r5, [pc, #164]	; (9590 <next_sense_cond_call_handler+0x270>)
    94ea:	f240 2329 	movw	r3, #553	; 0x229
    94ee:	462a      	mov	r2, r5
    94f0:	492a      	ldr	r1, [pc, #168]	; (959c <next_sense_cond_call_handler+0x27c>)
    94f2:	4829      	ldr	r0, [pc, #164]	; (9598 <next_sense_cond_call_handler+0x278>)
    94f4:	f005 feb3 	bl	f25e <assert_print>
    94f8:	f240 2129 	movw	r1, #553	; 0x229
    94fc:	4628      	mov	r0, r5
    94fe:	f005 fea7 	bl	f250 <assert_post_action>
    9502:	e7d6      	b.n	94b2 <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    9504:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9508:	e000      	b.n	950c <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    950a:	4925      	ldr	r1, [pc, #148]	; (95a0 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    950c:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    9510:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    9514:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9518:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    951c:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    9520:	e029      	b.n	9576 <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9522:	f04f 0803 	mov.w	r8, #3
    9526:	e709      	b.n	933c <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    9528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    952c:	e70e      	b.n	934c <next_sense_cond_call_handler+0x2c>
    switch (port)
    952e:	2300      	movs	r3, #0
    9530:	e70c      	b.n	934c <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9532:	4f17      	ldr	r7, [pc, #92]	; (9590 <next_sense_cond_call_handler+0x270>)
    9534:	f240 2329 	movw	r3, #553	; 0x229
    9538:	463a      	mov	r2, r7
    953a:	4918      	ldr	r1, [pc, #96]	; (959c <next_sense_cond_call_handler+0x27c>)
    953c:	4816      	ldr	r0, [pc, #88]	; (9598 <next_sense_cond_call_handler+0x278>)
    953e:	f005 fe8e 	bl	f25e <assert_print>
    9542:	f240 2129 	movw	r1, #553	; 0x229
    9546:	4638      	mov	r0, r7
    9548:	f005 fe82 	bl	f250 <assert_post_action>
    954c:	e705      	b.n	935a <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    954e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9552:	e000      	b.n	9556 <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9554:	4912      	ldr	r1, [pc, #72]	; (95a0 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9556:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    955a:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    955e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9562:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    9566:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    956a:	2d03      	cmp	r5, #3
    956c:	d007      	beq.n	957e <next_sense_cond_call_handler+0x25e>
    956e:	2e02      	cmp	r6, #2
    9570:	d003      	beq.n	957a <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    9572:	2e03      	cmp	r6, #3
    9574:	d008      	beq.n	9588 <next_sense_cond_call_handler+0x268>
}
    9576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    957a:	2d01      	cmp	r5, #1
    957c:	d1f9      	bne.n	9572 <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    957e:	4629      	mov	r1, r5
    9580:	4620      	mov	r0, r4
    9582:	f7ff fde1 	bl	9148 <call_handler>
}
    9586:	e7f6      	b.n	9576 <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    9588:	2d02      	cmp	r5, #2
    958a:	d1f4      	bne.n	9576 <next_sense_cond_call_handler+0x256>
    958c:	e7f7      	b.n	957e <next_sense_cond_call_handler+0x25e>
    958e:	bf00      	nop
    9590:	000128c4 	.word	0x000128c4
    9594:	00011cc8 	.word	0x00011cc8
    9598:	0001160c 	.word	0x0001160c
    959c:	000128f8 	.word	0x000128f8
    95a0:	50000300 	.word	0x50000300

000095a4 <port_event_handle>:
{
    95a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95a8:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    95aa:	4a65      	ldr	r2, [pc, #404]	; (9740 <port_event_handle+0x19c>)
    95ac:	466b      	mov	r3, sp
    95ae:	e892 0003 	ldmia.w	r2, {r0, r1}
    95b2:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    95b6:	2300      	movs	r3, #0
    95b8:	a802      	add	r0, sp, #8
    95ba:	e00b      	b.n	95d4 <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    95bc:	aa04      	add	r2, sp, #16
    95be:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    95c2:	f852 2c10 	ldr.w	r2, [r2, #-16]
    95c6:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    95ca:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    95ce:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    95d2:	3301      	adds	r3, #1
    95d4:	2b01      	cmp	r3, #1
    95d6:	d9f1      	bls.n	95bc <port_event_handle+0x18>
    95d8:	e0ad      	b.n	9736 <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    95da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    95de:	e07f      	b.n	96e0 <port_event_handle+0x13c>
    switch (port)
    95e0:	2300      	movs	r3, #0
    95e2:	e07d      	b.n	96e0 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    95e4:	4f57      	ldr	r7, [pc, #348]	; (9744 <port_event_handle+0x1a0>)
    95e6:	f240 2329 	movw	r3, #553	; 0x229
    95ea:	463a      	mov	r2, r7
    95ec:	4956      	ldr	r1, [pc, #344]	; (9748 <port_event_handle+0x1a4>)
    95ee:	4857      	ldr	r0, [pc, #348]	; (974c <port_event_handle+0x1a8>)
    95f0:	f005 fe35 	bl	f25e <assert_print>
    95f4:	f240 2129 	movw	r1, #553	; 0x229
    95f8:	4638      	mov	r0, r7
    95fa:	f005 fe29 	bl	f250 <assert_post_action>
    95fe:	e076      	b.n	96ee <port_event_handle+0x14a>
        case 0: return NRF_P0;
    9600:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9604:	e000      	b.n	9608 <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9606:	4b52      	ldr	r3, [pc, #328]	; (9750 <port_event_handle+0x1ac>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    9608:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    960c:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    9610:	f3c2 4201 	ubfx	r2, r2, #16, #2
    9614:	4631      	mov	r1, r6
    9616:	4620      	mov	r0, r4
    9618:	f7ff fe82 	bl	9320 <next_sense_cond_call_handler>
    switch (port)
    961c:	0963      	lsrs	r3, r4, #5
    961e:	d01f      	beq.n	9660 <port_event_handle+0xbc>
    9620:	2b01      	cmp	r3, #1
    9622:	d120      	bne.n	9666 <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    9624:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9628:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    962c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    962e:	f013 0f01 	tst.w	r3, #1
    9632:	d01a      	beq.n	966a <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    9634:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9638:	0964      	lsrs	r4, r4, #5
    963a:	d024      	beq.n	9686 <port_event_handle+0xe2>
    963c:	2c01      	cmp	r4, #1
    963e:	d025      	beq.n	968c <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    9640:	4c40      	ldr	r4, [pc, #256]	; (9744 <port_event_handle+0x1a0>)
    9642:	f240 232e 	movw	r3, #558	; 0x22e
    9646:	4622      	mov	r2, r4
    9648:	4942      	ldr	r1, [pc, #264]	; (9754 <port_event_handle+0x1b0>)
    964a:	4840      	ldr	r0, [pc, #256]	; (974c <port_event_handle+0x1a8>)
    964c:	f005 fe07 	bl	f25e <assert_print>
    9650:	f240 212e 	movw	r1, #558	; 0x22e
    9654:	4620      	mov	r0, r4
    9656:	f005 fdfb 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    965a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    965e:	e016      	b.n	968e <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    9660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9664:	e7e0      	b.n	9628 <port_event_handle+0x84>
    switch (port)
    9666:	2300      	movs	r3, #0
    9668:	e7de      	b.n	9628 <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    966a:	4e36      	ldr	r6, [pc, #216]	; (9744 <port_event_handle+0x1a0>)
    966c:	f240 2329 	movw	r3, #553	; 0x229
    9670:	4632      	mov	r2, r6
    9672:	4935      	ldr	r1, [pc, #212]	; (9748 <port_event_handle+0x1a4>)
    9674:	4835      	ldr	r0, [pc, #212]	; (974c <port_event_handle+0x1a8>)
    9676:	f005 fdf2 	bl	f25e <assert_print>
    967a:	f240 2129 	movw	r1, #553	; 0x229
    967e:	4630      	mov	r0, r6
    9680:	f005 fde6 	bl	f250 <assert_post_action>
    9684:	e7d6      	b.n	9634 <port_event_handle+0x90>
        case 0: return NRF_P0;
    9686:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    968a:	e000      	b.n	968e <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    968c:	4a30      	ldr	r2, [pc, #192]	; (9750 <port_event_handle+0x1ac>)
    reg->LATCH = (1 << pin_number);
    968e:	2301      	movs	r3, #1
    9690:	40b3      	lsls	r3, r6
    9692:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    9696:	ab04      	add	r3, sp, #16
    9698:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    969c:	f853 4c08 	ldr.w	r4, [r3, #-8]
    96a0:	2c00      	cmp	r4, #0
    96a2:	d03b      	beq.n	971c <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    96a4:	fa94 f4a4 	rbit	r4, r4
    96a8:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    96ac:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    96b0:	f104 0208 	add.w	r2, r4, #8
    96b4:	4b28      	ldr	r3, [pc, #160]	; (9758 <port_event_handle+0x1b4>)
    96b6:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    96ba:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    96be:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    96c0:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    96c4:	a802      	add	r0, sp, #8
    96c6:	2301      	movs	r3, #1
    96c8:	fa03 f202 	lsl.w	r2, r3, r2
    96cc:	5c43      	ldrb	r3, [r0, r1]
    96ce:	ea23 0302 	bic.w	r3, r3, r2
    96d2:	5443      	strb	r3, [r0, r1]
    switch (port)
    96d4:	0963      	lsrs	r3, r4, #5
    96d6:	d080      	beq.n	95da <port_event_handle+0x36>
    96d8:	2b01      	cmp	r3, #1
    96da:	d181      	bne.n	95e0 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    96dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    96e0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    96e4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    96e6:	f013 0f01 	tst.w	r3, #1
    96ea:	f43f af7b 	beq.w	95e4 <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    96ee:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    96f2:	0963      	lsrs	r3, r4, #5
    96f4:	d084      	beq.n	9600 <port_event_handle+0x5c>
    96f6:	2b01      	cmp	r3, #1
    96f8:	d085      	beq.n	9606 <port_event_handle+0x62>
            NRFX_ASSERT(0);
    96fa:	f8df 8048 	ldr.w	r8, [pc, #72]	; 9744 <port_event_handle+0x1a0>
    96fe:	f240 232e 	movw	r3, #558	; 0x22e
    9702:	4642      	mov	r2, r8
    9704:	4913      	ldr	r1, [pc, #76]	; (9754 <port_event_handle+0x1b0>)
    9706:	4811      	ldr	r0, [pc, #68]	; (974c <port_event_handle+0x1a8>)
    9708:	f005 fda9 	bl	f25e <assert_print>
    970c:	f240 212e 	movw	r1, #558	; 0x22e
    9710:	4640      	mov	r0, r8
    9712:	f005 fd9d 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    9716:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    971a:	e775      	b.n	9608 <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    971c:	3501      	adds	r5, #1
    971e:	2d01      	cmp	r5, #1
    9720:	d9b9      	bls.n	9696 <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9722:	4b0e      	ldr	r3, [pc, #56]	; (975c <port_event_handle+0x1b8>)
    9724:	2200      	movs	r2, #0
    9726:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    972a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    972e:	a802      	add	r0, sp, #8
    9730:	f7ff fdce 	bl	92d0 <latch_pending_read_and_check>
    9734:	b108      	cbz	r0, 973a <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    9736:	2500      	movs	r5, #0
    9738:	e7f1      	b.n	971e <port_event_handle+0x17a>
}
    973a:	b004      	add	sp, #16
    973c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9740:	000110e0 	.word	0x000110e0
    9744:	000128c4 	.word	0x000128c4
    9748:	000128f8 	.word	0x000128f8
    974c:	0001160c 	.word	0x0001160c
    9750:	50000300 	.word	0x50000300
    9754:	00011cc8 	.word	0x00011cc8
    9758:	2000407c 	.word	0x2000407c
    975c:	40006000 	.word	0x40006000

00009760 <nrfx_gpiote_input_configure>:
{
    9760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9764:	4604      	mov	r4, r0
    9766:	4615      	mov	r5, r2
    9768:	461e      	mov	r6, r3
    if (p_input_config)
    976a:	2900      	cmp	r1, #0
    976c:	d064      	beq.n	9838 <nrfx_gpiote_input_configure+0xd8>
    976e:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    9770:	f006 fe92 	bl	10498 <pin_is_task_output>
    9774:	2800      	cmp	r0, #0
    9776:	f040 80cd 	bne.w	9914 <nrfx_gpiote_input_configure+0x1b4>
    switch (port)
    977a:	0963      	lsrs	r3, r4, #5
    977c:	d020      	beq.n	97c0 <nrfx_gpiote_input_configure+0x60>
    977e:	2b01      	cmp	r3, #1
    9780:	d121      	bne.n	97c6 <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    9782:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9786:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    978a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    978c:	f013 0f01 	tst.w	r3, #1
    9790:	d01b      	beq.n	97ca <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    9792:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9796:	0963      	lsrs	r3, r4, #5
    9798:	d025      	beq.n	97e6 <nrfx_gpiote_input_configure+0x86>
    979a:	2b01      	cmp	r3, #1
    979c:	d026      	beq.n	97ec <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    979e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 9924 <nrfx_gpiote_input_configure+0x1c4>
    97a2:	f240 232e 	movw	r3, #558	; 0x22e
    97a6:	464a      	mov	r2, r9
    97a8:	495f      	ldr	r1, [pc, #380]	; (9928 <nrfx_gpiote_input_configure+0x1c8>)
    97aa:	4860      	ldr	r0, [pc, #384]	; (992c <nrfx_gpiote_input_configure+0x1cc>)
    97ac:	f005 fd57 	bl	f25e <assert_print>
    97b0:	f240 212e 	movw	r1, #558	; 0x22e
    97b4:	4648      	mov	r0, r9
    97b6:	f005 fd4b 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    97ba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    97be:	e016      	b.n	97ee <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    97c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    97c4:	e7df      	b.n	9786 <nrfx_gpiote_input_configure+0x26>
    switch (port)
    97c6:	2300      	movs	r3, #0
    97c8:	e7dd      	b.n	9786 <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    97ca:	4f56      	ldr	r7, [pc, #344]	; (9924 <nrfx_gpiote_input_configure+0x1c4>)
    97cc:	f240 2329 	movw	r3, #553	; 0x229
    97d0:	463a      	mov	r2, r7
    97d2:	4957      	ldr	r1, [pc, #348]	; (9930 <nrfx_gpiote_input_configure+0x1d0>)
    97d4:	4855      	ldr	r0, [pc, #340]	; (992c <nrfx_gpiote_input_configure+0x1cc>)
    97d6:	f005 fd42 	bl	f25e <assert_print>
    97da:	f240 2129 	movw	r1, #553	; 0x229
    97de:	4638      	mov	r0, r7
    97e0:	f005 fd36 	bl	f250 <assert_post_action>
    97e4:	e7d5      	b.n	9792 <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    97e6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    97ea:	e000      	b.n	97ee <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    97ec:	4951      	ldr	r1, [pc, #324]	; (9934 <nrfx_gpiote_input_configure+0x1d4>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    97ee:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    97f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    97f6:	f1b8 0f00 	cmp.w	r8, #0
    97fa:	d03f      	beq.n	987c <nrfx_gpiote_input_configure+0x11c>
    97fc:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    97fe:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    9802:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9806:	f1b8 0f00 	cmp.w	r8, #0
    980a:	d039      	beq.n	9880 <nrfx_gpiote_input_configure+0x120>
    980c:	f898 2000 	ldrb.w	r2, [r8]
    9810:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9812:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    9814:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    9818:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    981c:	4a46      	ldr	r2, [pc, #280]	; (9938 <nrfx_gpiote_input_configure+0x1d8>)
    981e:	f104 0108 	add.w	r1, r4, #8
    9822:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    9826:	f023 0302 	bic.w	r3, r3, #2
    982a:	b29b      	uxth	r3, r3
    982c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    9830:	f043 0301 	orr.w	r3, r3, #1
    9834:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    9838:	b1bd      	cbz	r5, 986a <nrfx_gpiote_input_configure+0x10a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    983a:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    983c:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    9840:	4620      	mov	r0, r4
    9842:	f7ff fc2f 	bl	90a4 <pin_is_output>
    9846:	b1e8      	cbz	r0, 9884 <nrfx_gpiote_input_configure+0x124>
            if (use_evt)
    9848:	f1b8 0f00 	cmp.w	r8, #0
    984c:	d164      	bne.n	9918 <nrfx_gpiote_input_configure+0x1b8>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    984e:	4a3a      	ldr	r2, [pc, #232]	; (9938 <nrfx_gpiote_input_configure+0x1d8>)
    9850:	f104 0108 	add.w	r1, r4, #8
    9854:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    9858:	f023 031c 	bic.w	r3, r3, #28
    985c:	b29b      	uxth	r3, r3
    985e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    9862:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    9866:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    986a:	2e00      	cmp	r6, #0
    986c:	d058      	beq.n	9920 <nrfx_gpiote_input_configure+0x1c0>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    986e:	6872      	ldr	r2, [r6, #4]
    9870:	6831      	ldr	r1, [r6, #0]
    9872:	4620      	mov	r0, r4
    9874:	f7ff fcd4 	bl	9220 <pin_handler_set>
}
    9878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    987c:	2200      	movs	r2, #0
    987e:	e7be      	b.n	97fe <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9880:	2200      	movs	r2, #0
    9882:	e7c6      	b.n	9812 <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    9884:	4a2c      	ldr	r2, [pc, #176]	; (9938 <nrfx_gpiote_input_configure+0x1d8>)
    9886:	f104 0108 	add.w	r1, r4, #8
    988a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    988e:	f023 0320 	bic.w	r3, r3, #32
    9892:	04db      	lsls	r3, r3, #19
    9894:	0cdb      	lsrs	r3, r3, #19
    9896:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    989a:	f1b8 0f00 	cmp.w	r8, #0
    989e:	d0d6      	beq.n	984e <nrfx_gpiote_input_configure+0xee>
                if (!edge)
    98a0:	2f03      	cmp	r7, #3
    98a2:	d83b      	bhi.n	991c <nrfx_gpiote_input_configure+0x1bc>
                uint8_t ch = *p_trigger_config->p_in_channel;
    98a4:	686b      	ldr	r3, [r5, #4]
    98a6:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    98a8:	b937      	cbnz	r7, 98b8 <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    98aa:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    98ae:	4b23      	ldr	r3, [pc, #140]	; (993c <nrfx_gpiote_input_configure+0x1dc>)
    98b0:	2200      	movs	r2, #0
    98b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    98b6:	e7ca      	b.n	984e <nrfx_gpiote_input_configure+0xee>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    98b8:	4638      	mov	r0, r7
    98ba:	f006 fe04 	bl	104c6 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    98be:	4b1f      	ldr	r3, [pc, #124]	; (993c <nrfx_gpiote_input_configure+0x1dc>)
    98c0:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    98c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    98c8:	f021 0103 	bic.w	r1, r1, #3
    98cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    98d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    98d4:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    98d8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    98dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    98e0:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    98e4:	0221      	lsls	r1, r4, #8
    98e6:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    98ea:	0400      	lsls	r0, r0, #16
    98ec:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    98f0:	4301      	orrs	r1, r0
    98f2:	ea4c 0101 	orr.w	r1, ip, r1
    98f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    98fa:	036b      	lsls	r3, r5, #13
    98fc:	b29b      	uxth	r3, r3
    98fe:	4a0e      	ldr	r2, [pc, #56]	; (9938 <nrfx_gpiote_input_configure+0x1d8>)
    9900:	f104 0108 	add.w	r1, r4, #8
    9904:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    9908:	4303      	orrs	r3, r0
    990a:	f043 0320 	orr.w	r3, r3, #32
    990e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    9912:	e79c      	b.n	984e <nrfx_gpiote_input_configure+0xee>
            return NRFX_ERROR_INVALID_PARAM;
    9914:	480a      	ldr	r0, [pc, #40]	; (9940 <nrfx_gpiote_input_configure+0x1e0>)
    9916:	e7af      	b.n	9878 <nrfx_gpiote_input_configure+0x118>
                return NRFX_ERROR_INVALID_PARAM;
    9918:	4809      	ldr	r0, [pc, #36]	; (9940 <nrfx_gpiote_input_configure+0x1e0>)
    991a:	e7ad      	b.n	9878 <nrfx_gpiote_input_configure+0x118>
                    return NRFX_ERROR_INVALID_PARAM;
    991c:	4808      	ldr	r0, [pc, #32]	; (9940 <nrfx_gpiote_input_configure+0x1e0>)
    991e:	e7ab      	b.n	9878 <nrfx_gpiote_input_configure+0x118>
        err = NRFX_SUCCESS;
    9920:	4808      	ldr	r0, [pc, #32]	; (9944 <nrfx_gpiote_input_configure+0x1e4>)
    9922:	e7a9      	b.n	9878 <nrfx_gpiote_input_configure+0x118>
    9924:	000128c4 	.word	0x000128c4
    9928:	00011cc8 	.word	0x00011cc8
    992c:	0001160c 	.word	0x0001160c
    9930:	000128f8 	.word	0x000128f8
    9934:	50000300 	.word	0x50000300
    9938:	2000407c 	.word	0x2000407c
    993c:	40006000 	.word	0x40006000
    9940:	0bad0004 	.word	0x0bad0004
    9944:	0bad0000 	.word	0x0bad0000

00009948 <nrfx_gpiote_output_configure>:
{
    9948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    994c:	4604      	mov	r4, r0
    994e:	4615      	mov	r5, r2
    if (p_config)
    9950:	2900      	cmp	r1, #0
    9952:	f000 8086 	beq.w	9a62 <nrfx_gpiote_output_configure+0x11a>
    9956:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    9958:	f006 fdad 	bl	104b6 <pin_is_input>
    995c:	b128      	cbz	r0, 996a <nrfx_gpiote_output_configure+0x22>
    995e:	4620      	mov	r0, r4
    9960:	f7ff fb8a 	bl	9078 <pin_in_use_by_te>
    9964:	2800      	cmp	r0, #0
    9966:	f040 80ce 	bne.w	9b06 <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    996a:	4620      	mov	r0, r4
    996c:	f7ff fb8e 	bl	908c <pin_has_trigger>
    9970:	b118      	cbz	r0, 997a <nrfx_gpiote_output_configure+0x32>
    9972:	787b      	ldrb	r3, [r7, #1]
    9974:	2b01      	cmp	r3, #1
    9976:	f000 80c8 	beq.w	9b0a <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    997a:	f107 0901 	add.w	r9, r7, #1
    997e:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    9982:	0963      	lsrs	r3, r4, #5
    9984:	d020      	beq.n	99c8 <nrfx_gpiote_output_configure+0x80>
    9986:	2b01      	cmp	r3, #1
    9988:	d121      	bne.n	99ce <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    998a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    998e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9992:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9994:	f013 0f01 	tst.w	r3, #1
    9998:	d01b      	beq.n	99d2 <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    999a:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    999e:	0963      	lsrs	r3, r4, #5
    99a0:	d025      	beq.n	99ee <nrfx_gpiote_output_configure+0xa6>
    99a2:	2b01      	cmp	r3, #1
    99a4:	d026      	beq.n	99f4 <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    99a6:	f8df a170 	ldr.w	sl, [pc, #368]	; 9b18 <nrfx_gpiote_output_configure+0x1d0>
    99aa:	f240 232e 	movw	r3, #558	; 0x22e
    99ae:	4652      	mov	r2, sl
    99b0:	495a      	ldr	r1, [pc, #360]	; (9b1c <nrfx_gpiote_output_configure+0x1d4>)
    99b2:	485b      	ldr	r0, [pc, #364]	; (9b20 <nrfx_gpiote_output_configure+0x1d8>)
    99b4:	f005 fc53 	bl	f25e <assert_print>
    99b8:	f240 212e 	movw	r1, #558	; 0x22e
    99bc:	4650      	mov	r0, sl
    99be:	f005 fc47 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    99c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    99c6:	e016      	b.n	99f6 <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    99c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    99cc:	e7df      	b.n	998e <nrfx_gpiote_output_configure+0x46>
    switch (port)
    99ce:	2300      	movs	r3, #0
    99d0:	e7dd      	b.n	998e <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    99d2:	4e51      	ldr	r6, [pc, #324]	; (9b18 <nrfx_gpiote_output_configure+0x1d0>)
    99d4:	f240 2329 	movw	r3, #553	; 0x229
    99d8:	4632      	mov	r2, r6
    99da:	4952      	ldr	r1, [pc, #328]	; (9b24 <nrfx_gpiote_output_configure+0x1dc>)
    99dc:	4850      	ldr	r0, [pc, #320]	; (9b20 <nrfx_gpiote_output_configure+0x1d8>)
    99de:	f005 fc3e 	bl	f25e <assert_print>
    99e2:	f240 2129 	movw	r1, #553	; 0x229
    99e6:	4630      	mov	r0, r6
    99e8:	f005 fc32 	bl	f250 <assert_post_action>
    99ec:	e7d5      	b.n	999a <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    99ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    99f2:	e000      	b.n	99f6 <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    99f4:	4a4c      	ldr	r2, [pc, #304]	; (9b28 <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    99f6:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    99fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    99fe:	f1b9 0f00 	cmp.w	r9, #0
    9a02:	d04b      	beq.n	9a9c <nrfx_gpiote_output_configure+0x154>
    9a04:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9a06:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9a0a:	f1b8 0f00 	cmp.w	r8, #0
    9a0e:	d047      	beq.n	9aa0 <nrfx_gpiote_output_configure+0x158>
    9a10:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9a12:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9a14:	2f00      	cmp	r7, #0
    9a16:	d045      	beq.n	9aa4 <nrfx_gpiote_output_configure+0x15c>
    9a18:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9a1c:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    9a1e:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9a22:	f1b9 0f00 	cmp.w	r9, #0
    9a26:	d03f      	beq.n	9aa8 <nrfx_gpiote_output_configure+0x160>
    9a28:	787b      	ldrb	r3, [r7, #1]
    9a2a:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9a2c:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9a30:	f1b8 0f00 	cmp.w	r8, #0
    9a34:	d03a      	beq.n	9aac <nrfx_gpiote_output_configure+0x164>
    9a36:	78b8      	ldrb	r0, [r7, #2]
    9a38:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9a3a:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    9a3c:	2f00      	cmp	r7, #0
    9a3e:	d037      	beq.n	9ab0 <nrfx_gpiote_output_configure+0x168>
    9a40:	7838      	ldrb	r0, [r7, #0]
    9a42:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9a44:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9a46:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    9a48:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    9a4c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    9a50:	4a36      	ldr	r2, [pc, #216]	; (9b2c <nrfx_gpiote_output_configure+0x1e4>)
    9a52:	f104 0108 	add.w	r1, r4, #8
    9a56:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    9a5a:	f043 0303 	orr.w	r3, r3, #3
    9a5e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    9a62:	2d00      	cmp	r5, #0
    9a64:	d053      	beq.n	9b0e <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    9a66:	4620      	mov	r0, r4
    9a68:	f006 fd25 	bl	104b6 <pin_is_input>
    9a6c:	2800      	cmp	r0, #0
    9a6e:	d150      	bne.n	9b12 <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    9a70:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    9a72:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    9a76:	4a2e      	ldr	r2, [pc, #184]	; (9b30 <nrfx_gpiote_output_configure+0x1e8>)
    9a78:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    9a7c:	492b      	ldr	r1, [pc, #172]	; (9b2c <nrfx_gpiote_output_configure+0x1e4>)
    9a7e:	f104 0008 	add.w	r0, r4, #8
    9a82:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    9a86:	f022 0220 	bic.w	r2, r2, #32
    9a8a:	04d2      	lsls	r2, r2, #19
    9a8c:	0cd2      	lsrs	r2, r2, #19
    9a8e:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    9a92:	786a      	ldrb	r2, [r5, #1]
    9a94:	b972      	cbnz	r2, 9ab4 <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    9a96:	4827      	ldr	r0, [pc, #156]	; (9b34 <nrfx_gpiote_output_configure+0x1ec>)
}
    9a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9a9c:	2300      	movs	r3, #0
    9a9e:	e7b2      	b.n	9a06 <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9aa0:	2000      	movs	r0, #0
    9aa2:	e7b6      	b.n	9a12 <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9aa4:	2000      	movs	r0, #0
    9aa6:	e7b9      	b.n	9a1c <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    9aa8:	2300      	movs	r3, #0
    9aaa:	e7bf      	b.n	9a2c <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9aac:	2000      	movs	r0, #0
    9aae:	e7c4      	b.n	9a3a <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    9ab0:	2000      	movs	r0, #0
    9ab2:	e7c7      	b.n	9a44 <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    9ab4:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    9ab6:	481e      	ldr	r0, [pc, #120]	; (9b30 <nrfx_gpiote_output_configure+0x1e8>)
    9ab8:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    9abc:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    9ac0:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    9ac4:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    9ac8:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9acc:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    9ad0:	0221      	lsls	r1, r4, #8
    9ad2:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    9ad6:	0412      	lsls	r2, r2, #16
    9ad8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9adc:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    9ade:	0539      	lsls	r1, r7, #20
    9ae0:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    9ae4:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9ae6:	4332      	orrs	r2, r6
    9ae8:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    9aec:	035b      	lsls	r3, r3, #13
    9aee:	b29b      	uxth	r3, r3
    9af0:	4a0e      	ldr	r2, [pc, #56]	; (9b2c <nrfx_gpiote_output_configure+0x1e4>)
    9af2:	3408      	adds	r4, #8
    9af4:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    9af8:	430b      	orrs	r3, r1
    9afa:	f043 0320 	orr.w	r3, r3, #32
    9afe:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    9b02:	480c      	ldr	r0, [pc, #48]	; (9b34 <nrfx_gpiote_output_configure+0x1ec>)
    9b04:	e7c8      	b.n	9a98 <nrfx_gpiote_output_configure+0x150>
    9b06:	480c      	ldr	r0, [pc, #48]	; (9b38 <nrfx_gpiote_output_configure+0x1f0>)
    9b08:	e7c6      	b.n	9a98 <nrfx_gpiote_output_configure+0x150>
    9b0a:	480b      	ldr	r0, [pc, #44]	; (9b38 <nrfx_gpiote_output_configure+0x1f0>)
    9b0c:	e7c4      	b.n	9a98 <nrfx_gpiote_output_configure+0x150>
    9b0e:	4809      	ldr	r0, [pc, #36]	; (9b34 <nrfx_gpiote_output_configure+0x1ec>)
    9b10:	e7c2      	b.n	9a98 <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    9b12:	4809      	ldr	r0, [pc, #36]	; (9b38 <nrfx_gpiote_output_configure+0x1f0>)
    9b14:	e7c0      	b.n	9a98 <nrfx_gpiote_output_configure+0x150>
    9b16:	bf00      	nop
    9b18:	000128c4 	.word	0x000128c4
    9b1c:	00011cc8 	.word	0x00011cc8
    9b20:	0001160c 	.word	0x0001160c
    9b24:	000128f8 	.word	0x000128f8
    9b28:	50000300 	.word	0x50000300
    9b2c:	2000407c 	.word	0x2000407c
    9b30:	40006000 	.word	0x40006000
    9b34:	0bad0000 	.word	0x0bad0000
    9b38:	0bad0004 	.word	0x0bad0004

00009b3c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    9b3c:	4b01      	ldr	r3, [pc, #4]	; (9b44 <nrfx_gpiote_global_callback_set+0x8>)
    9b3e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    9b40:	60d9      	str	r1, [r3, #12]
}
    9b42:	4770      	bx	lr
    9b44:	2000407c 	.word	0x2000407c

00009b48 <nrfx_gpiote_channel_get>:
{
    9b48:	b570      	push	{r4, r5, r6, lr}
    9b4a:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    9b4c:	460d      	mov	r5, r1
    9b4e:	b159      	cbz	r1, 9b68 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    9b50:	4620      	mov	r0, r4
    9b52:	f7ff fa91 	bl	9078 <pin_in_use_by_te>
    9b56:	b1a8      	cbz	r0, 9b84 <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    9b58:	3408      	adds	r4, #8
    9b5a:	4b0b      	ldr	r3, [pc, #44]	; (9b88 <nrfx_gpiote_channel_get+0x40>)
    9b5c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    9b60:	0b5b      	lsrs	r3, r3, #13
    9b62:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    9b64:	4809      	ldr	r0, [pc, #36]	; (9b8c <nrfx_gpiote_channel_get+0x44>)
}
    9b66:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    9b68:	4e09      	ldr	r6, [pc, #36]	; (9b90 <nrfx_gpiote_channel_get+0x48>)
    9b6a:	f240 2335 	movw	r3, #565	; 0x235
    9b6e:	4632      	mov	r2, r6
    9b70:	4908      	ldr	r1, [pc, #32]	; (9b94 <nrfx_gpiote_channel_get+0x4c>)
    9b72:	4809      	ldr	r0, [pc, #36]	; (9b98 <nrfx_gpiote_channel_get+0x50>)
    9b74:	f005 fb73 	bl	f25e <assert_print>
    9b78:	f240 2135 	movw	r1, #565	; 0x235
    9b7c:	4630      	mov	r0, r6
    9b7e:	f005 fb67 	bl	f250 <assert_post_action>
    9b82:	e7e5      	b.n	9b50 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    9b84:	4805      	ldr	r0, [pc, #20]	; (9b9c <nrfx_gpiote_channel_get+0x54>)
    9b86:	e7ee      	b.n	9b66 <nrfx_gpiote_channel_get+0x1e>
    9b88:	2000407c 	.word	0x2000407c
    9b8c:	0bad0000 	.word	0x0bad0000
    9b90:	00012b58 	.word	0x00012b58
    9b94:	00012bac 	.word	0x00012bac
    9b98:	0001160c 	.word	0x0001160c
    9b9c:	0bad0004 	.word	0x0bad0004

00009ba0 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    9ba0:	4b10      	ldr	r3, [pc, #64]	; (9be4 <nrfx_gpiote_init+0x44>)
    9ba2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    9ba6:	b10b      	cbz	r3, 9bac <nrfx_gpiote_init+0xc>
        return err_code;
    9ba8:	480f      	ldr	r0, [pc, #60]	; (9be8 <nrfx_gpiote_init+0x48>)
}
    9baa:	4770      	bx	lr
{
    9bac:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    9bae:	4c0d      	ldr	r4, [pc, #52]	; (9be4 <nrfx_gpiote_init+0x44>)
    9bb0:	2260      	movs	r2, #96	; 0x60
    9bb2:	2100      	movs	r1, #0
    9bb4:	f104 0010 	add.w	r0, r4, #16
    9bb8:	f006 fdea 	bl	10790 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    9bbc:	2006      	movs	r0, #6
    9bbe:	f7fc f8f7 	bl	5db0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9bc2:	4b0a      	ldr	r3, [pc, #40]	; (9bec <nrfx_gpiote_init+0x4c>)
    9bc4:	2200      	movs	r2, #0
    9bc6:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    9bca:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    9bce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    9bd2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    9bd6:	2301      	movs	r3, #1
    9bd8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    9bdc:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    9bde:	4804      	ldr	r0, [pc, #16]	; (9bf0 <nrfx_gpiote_init+0x50>)
}
    9be0:	bd10      	pop	{r4, pc}
    9be2:	bf00      	nop
    9be4:	2000407c 	.word	0x2000407c
    9be8:	0bad0005 	.word	0x0bad0005
    9bec:	40006000 	.word	0x40006000
    9bf0:	0bad0000 	.word	0x0bad0000

00009bf4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    9bf4:	4b03      	ldr	r3, [pc, #12]	; (9c04 <nrfx_gpiote_is_init+0x10>)
    9bf6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    9bfa:	3800      	subs	r0, #0
    9bfc:	bf18      	it	ne
    9bfe:	2001      	movne	r0, #1
    9c00:	4770      	bx	lr
    9c02:	bf00      	nop
    9c04:	2000407c 	.word	0x2000407c

00009c08 <nrfx_gpiote_channel_free>:
{
    9c08:	b508      	push	{r3, lr}
    9c0a:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    9c0c:	4801      	ldr	r0, [pc, #4]	; (9c14 <nrfx_gpiote_channel_free+0xc>)
    9c0e:	f7ff f855 	bl	8cbc <nrfx_flag32_free>
}
    9c12:	bd08      	pop	{r3, pc}
    9c14:	200040ec 	.word	0x200040ec

00009c18 <nrfx_gpiote_channel_alloc>:
{
    9c18:	b508      	push	{r3, lr}
    9c1a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    9c1c:	4801      	ldr	r0, [pc, #4]	; (9c24 <nrfx_gpiote_channel_alloc+0xc>)
    9c1e:	f7ff f825 	bl	8c6c <nrfx_flag32_alloc>
}
    9c22:	bd08      	pop	{r3, pc}
    9c24:	200040ec 	.word	0x200040ec

00009c28 <nrfx_gpiote_trigger_enable>:
{
    9c28:	b570      	push	{r4, r5, r6, lr}
    9c2a:	4604      	mov	r4, r0
    9c2c:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    9c2e:	f7ff fa2d 	bl	908c <pin_has_trigger>
    9c32:	b1b8      	cbz	r0, 9c64 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    9c34:	4620      	mov	r0, r4
    9c36:	f7ff fa1f 	bl	9078 <pin_in_use_by_te>
    9c3a:	b118      	cbz	r0, 9c44 <nrfx_gpiote_trigger_enable+0x1c>
    9c3c:	4620      	mov	r0, r4
    9c3e:	f006 fc3a 	bl	104b6 <pin_is_input>
    9c42:	b9e8      	cbnz	r0, 9c80 <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    9c44:	2d00      	cmp	r5, #0
    9c46:	d04c      	beq.n	9ce2 <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    9c48:	f104 0308 	add.w	r3, r4, #8
    9c4c:	4a70      	ldr	r2, [pc, #448]	; (9e10 <nrfx_gpiote_trigger_enable+0x1e8>)
    9c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    9c52:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    9c56:	2b04      	cmp	r3, #4
    9c58:	f000 8092 	beq.w	9d80 <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    9c5c:	2b05      	cmp	r3, #5
    9c5e:	d14e      	bne.n	9cfe <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    9c60:	2602      	movs	r6, #2
    9c62:	e08e      	b.n	9d82 <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    9c64:	4e6b      	ldr	r6, [pc, #428]	; (9e14 <nrfx_gpiote_trigger_enable+0x1ec>)
    9c66:	f240 33df 	movw	r3, #991	; 0x3df
    9c6a:	4632      	mov	r2, r6
    9c6c:	496a      	ldr	r1, [pc, #424]	; (9e18 <nrfx_gpiote_trigger_enable+0x1f0>)
    9c6e:	486b      	ldr	r0, [pc, #428]	; (9e1c <nrfx_gpiote_trigger_enable+0x1f4>)
    9c70:	f005 faf5 	bl	f25e <assert_print>
    9c74:	f240 31df 	movw	r1, #991	; 0x3df
    9c78:	4630      	mov	r0, r6
    9c7a:	f005 fae9 	bl	f250 <assert_post_action>
    9c7e:	e7d9      	b.n	9c34 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    9c80:	4620      	mov	r0, r4
    9c82:	f7ff fa19 	bl	90b8 <pin_te_get>
    9c86:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    9c88:	2807      	cmp	r0, #7
    9c8a:	d81c      	bhi.n	9cc6 <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    9c8c:	00a3      	lsls	r3, r4, #2
    9c8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    9c92:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    9c94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9c98:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9c9c:	2200      	movs	r2, #0
    9c9e:	601a      	str	r2, [r3, #0]
    9ca0:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    9ca2:	4a5f      	ldr	r2, [pc, #380]	; (9e20 <nrfx_gpiote_trigger_enable+0x1f8>)
    9ca4:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    9ca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    9cac:	f043 0301 	orr.w	r3, r3, #1
    9cb0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    9cb4:	2d00      	cmp	r5, #0
    9cb6:	f000 80a9 	beq.w	9e0c <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    9cba:	2001      	movs	r0, #1
    9cbc:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    9cc0:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    9cc4:	e0a2      	b.n	9e0c <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    9cc6:	4e57      	ldr	r6, [pc, #348]	; (9e24 <nrfx_gpiote_trigger_enable+0x1fc>)
    9cc8:	f44f 7323 	mov.w	r3, #652	; 0x28c
    9ccc:	4632      	mov	r2, r6
    9cce:	4956      	ldr	r1, [pc, #344]	; (9e28 <nrfx_gpiote_trigger_enable+0x200>)
    9cd0:	4852      	ldr	r0, [pc, #328]	; (9e1c <nrfx_gpiote_trigger_enable+0x1f4>)
    9cd2:	f005 fac4 	bl	f25e <assert_print>
    9cd6:	f44f 7123 	mov.w	r1, #652	; 0x28c
    9cda:	4630      	mov	r0, r6
    9cdc:	f005 fab8 	bl	f250 <assert_post_action>
    9ce0:	e7d4      	b.n	9c8c <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    9ce2:	4d4c      	ldr	r5, [pc, #304]	; (9e14 <nrfx_gpiote_trigger_enable+0x1ec>)
    9ce4:	f240 33ee 	movw	r3, #1006	; 0x3ee
    9ce8:	462a      	mov	r2, r5
    9cea:	4950      	ldr	r1, [pc, #320]	; (9e2c <nrfx_gpiote_trigger_enable+0x204>)
    9cec:	484b      	ldr	r0, [pc, #300]	; (9e1c <nrfx_gpiote_trigger_enable+0x1f4>)
    9cee:	f005 fab6 	bl	f25e <assert_print>
    9cf2:	f240 31ee 	movw	r1, #1006	; 0x3ee
    9cf6:	4628      	mov	r0, r5
    9cf8:	f005 faaa 	bl	f250 <assert_post_action>
    9cfc:	e7a4      	b.n	9c48 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    9cfe:	0963      	lsrs	r3, r4, #5
    9d00:	d01f      	beq.n	9d42 <nrfx_gpiote_trigger_enable+0x11a>
    9d02:	2b01      	cmp	r3, #1
    9d04:	d120      	bne.n	9d48 <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    9d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9d0a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9d0e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9d10:	f013 0f01 	tst.w	r3, #1
    9d14:	d01a      	beq.n	9d4c <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    9d16:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9d1a:	0963      	lsrs	r3, r4, #5
    9d1c:	d024      	beq.n	9d68 <nrfx_gpiote_trigger_enable+0x140>
    9d1e:	2b01      	cmp	r3, #1
    9d20:	d025      	beq.n	9d6e <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    9d22:	4e43      	ldr	r6, [pc, #268]	; (9e30 <nrfx_gpiote_trigger_enable+0x208>)
    9d24:	f240 232e 	movw	r3, #558	; 0x22e
    9d28:	4632      	mov	r2, r6
    9d2a:	4942      	ldr	r1, [pc, #264]	; (9e34 <nrfx_gpiote_trigger_enable+0x20c>)
    9d2c:	483b      	ldr	r0, [pc, #236]	; (9e1c <nrfx_gpiote_trigger_enable+0x1f4>)
    9d2e:	f005 fa96 	bl	f25e <assert_print>
    9d32:	f240 212e 	movw	r1, #558	; 0x22e
    9d36:	4630      	mov	r0, r6
    9d38:	f005 fa8a 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    9d3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9d40:	e016      	b.n	9d70 <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    9d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9d46:	e7e0      	b.n	9d0a <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    9d48:	2300      	movs	r3, #0
    9d4a:	e7de      	b.n	9d0a <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9d4c:	4d38      	ldr	r5, [pc, #224]	; (9e30 <nrfx_gpiote_trigger_enable+0x208>)
    9d4e:	f240 2329 	movw	r3, #553	; 0x229
    9d52:	462a      	mov	r2, r5
    9d54:	4938      	ldr	r1, [pc, #224]	; (9e38 <nrfx_gpiote_trigger_enable+0x210>)
    9d56:	4831      	ldr	r0, [pc, #196]	; (9e1c <nrfx_gpiote_trigger_enable+0x1f4>)
    9d58:	f005 fa81 	bl	f25e <assert_print>
    9d5c:	f240 2129 	movw	r1, #553	; 0x229
    9d60:	4628      	mov	r0, r5
    9d62:	f005 fa75 	bl	f250 <assert_post_action>
    9d66:	e7d6      	b.n	9d16 <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    9d68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9d6c:	e000      	b.n	9d70 <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9d6e:	4b33      	ldr	r3, [pc, #204]	; (9e3c <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    9d70:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    9d74:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9d76:	f013 0f01 	tst.w	r3, #1
    9d7a:	d024      	beq.n	9dc6 <nrfx_gpiote_trigger_enable+0x19e>
    9d7c:	2603      	movs	r6, #3
    9d7e:	e000      	b.n	9d82 <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    9d80:	2603      	movs	r6, #3
    switch (port)
    9d82:	0963      	lsrs	r3, r4, #5
    9d84:	d021      	beq.n	9dca <nrfx_gpiote_trigger_enable+0x1a2>
    9d86:	2b01      	cmp	r3, #1
    9d88:	d122      	bne.n	9dd0 <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    9d8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9d8e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9d92:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9d94:	f013 0f01 	tst.w	r3, #1
    9d98:	d01c      	beq.n	9dd4 <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    9d9a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9d9e:	0964      	lsrs	r4, r4, #5
    9da0:	d026      	beq.n	9df0 <nrfx_gpiote_trigger_enable+0x1c8>
    9da2:	2c01      	cmp	r4, #1
    9da4:	d027      	beq.n	9df6 <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    9da6:	4c22      	ldr	r4, [pc, #136]	; (9e30 <nrfx_gpiote_trigger_enable+0x208>)
    9da8:	f240 232e 	movw	r3, #558	; 0x22e
    9dac:	4622      	mov	r2, r4
    9dae:	4921      	ldr	r1, [pc, #132]	; (9e34 <nrfx_gpiote_trigger_enable+0x20c>)
    9db0:	481a      	ldr	r0, [pc, #104]	; (9e1c <nrfx_gpiote_trigger_enable+0x1f4>)
    9db2:	f005 fa54 	bl	f25e <assert_print>
    9db6:	f240 212e 	movw	r1, #558	; 0x22e
    9dba:	4620      	mov	r0, r4
    9dbc:	f005 fa48 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    9dc0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9dc4:	e018      	b.n	9df8 <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    9dc6:	2602      	movs	r6, #2
    9dc8:	e7db      	b.n	9d82 <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    9dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9dce:	e7de      	b.n	9d8e <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    9dd0:	2300      	movs	r3, #0
    9dd2:	e7dc      	b.n	9d8e <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9dd4:	4d16      	ldr	r5, [pc, #88]	; (9e30 <nrfx_gpiote_trigger_enable+0x208>)
    9dd6:	f240 2329 	movw	r3, #553	; 0x229
    9dda:	462a      	mov	r2, r5
    9ddc:	4916      	ldr	r1, [pc, #88]	; (9e38 <nrfx_gpiote_trigger_enable+0x210>)
    9dde:	480f      	ldr	r0, [pc, #60]	; (9e1c <nrfx_gpiote_trigger_enable+0x1f4>)
    9de0:	f005 fa3d 	bl	f25e <assert_print>
    9de4:	f240 2129 	movw	r1, #553	; 0x229
    9de8:	4628      	mov	r0, r5
    9dea:	f005 fa31 	bl	f250 <assert_post_action>
    9dee:	e7d4      	b.n	9d9a <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    9df0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9df4:	e000      	b.n	9df8 <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9df6:	4911      	ldr	r1, [pc, #68]	; (9e3c <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9df8:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    9dfc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    9e00:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9e04:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    9e08:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    9e0c:	bd70      	pop	{r4, r5, r6, pc}
    9e0e:	bf00      	nop
    9e10:	2000407c 	.word	0x2000407c
    9e14:	00012b58 	.word	0x00012b58
    9e18:	00012bfc 	.word	0x00012bfc
    9e1c:	0001160c 	.word	0x0001160c
    9e20:	40006000 	.word	0x40006000
    9e24:	00012bb8 	.word	0x00012bb8
    9e28:	00012bf0 	.word	0x00012bf0
    9e2c:	00012c14 	.word	0x00012c14
    9e30:	000128c4 	.word	0x000128c4
    9e34:	00011cc8 	.word	0x00011cc8
    9e38:	000128f8 	.word	0x000128f8
    9e3c:	50000300 	.word	0x50000300

00009e40 <nrfx_gpiote_trigger_disable>:
{
    9e40:	b538      	push	{r3, r4, r5, lr}
    9e42:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    9e44:	f7ff f918 	bl	9078 <pin_in_use_by_te>
    9e48:	b1a0      	cbz	r0, 9e74 <nrfx_gpiote_trigger_disable+0x34>
    9e4a:	4620      	mov	r0, r4
    9e4c:	f006 fb33 	bl	104b6 <pin_is_input>
    9e50:	b180      	cbz	r0, 9e74 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    9e52:	4620      	mov	r0, r4
    9e54:	f7ff f930 	bl	90b8 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    9e58:	2201      	movs	r2, #1
    9e5a:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    9e5c:	4b26      	ldr	r3, [pc, #152]	; (9ef8 <nrfx_gpiote_trigger_disable+0xb8>)
    9e5e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    9e62:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    9e66:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    9e6a:	f022 0203 	bic.w	r2, r2, #3
    9e6e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    9e72:	e040      	b.n	9ef6 <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    9e74:	0963      	lsrs	r3, r4, #5
    9e76:	d01f      	beq.n	9eb8 <nrfx_gpiote_trigger_disable+0x78>
    9e78:	2b01      	cmp	r3, #1
    9e7a:	d120      	bne.n	9ebe <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    9e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9e80:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9e84:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9e86:	f013 0f01 	tst.w	r3, #1
    9e8a:	d01a      	beq.n	9ec2 <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    9e8c:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9e90:	0964      	lsrs	r4, r4, #5
    9e92:	d024      	beq.n	9ede <nrfx_gpiote_trigger_disable+0x9e>
    9e94:	2c01      	cmp	r4, #1
    9e96:	d025      	beq.n	9ee4 <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    9e98:	4c18      	ldr	r4, [pc, #96]	; (9efc <nrfx_gpiote_trigger_disable+0xbc>)
    9e9a:	f240 232e 	movw	r3, #558	; 0x22e
    9e9e:	4622      	mov	r2, r4
    9ea0:	4917      	ldr	r1, [pc, #92]	; (9f00 <nrfx_gpiote_trigger_disable+0xc0>)
    9ea2:	4818      	ldr	r0, [pc, #96]	; (9f04 <nrfx_gpiote_trigger_disable+0xc4>)
    9ea4:	f005 f9db 	bl	f25e <assert_print>
    9ea8:	f240 212e 	movw	r1, #558	; 0x22e
    9eac:	4620      	mov	r0, r4
    9eae:	f005 f9cf 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    9eb2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9eb6:	e016      	b.n	9ee6 <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    9eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9ebc:	e7e0      	b.n	9e80 <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    9ebe:	2300      	movs	r3, #0
    9ec0:	e7de      	b.n	9e80 <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9ec2:	4d0e      	ldr	r5, [pc, #56]	; (9efc <nrfx_gpiote_trigger_disable+0xbc>)
    9ec4:	f240 2329 	movw	r3, #553	; 0x229
    9ec8:	462a      	mov	r2, r5
    9eca:	490f      	ldr	r1, [pc, #60]	; (9f08 <nrfx_gpiote_trigger_disable+0xc8>)
    9ecc:	480d      	ldr	r0, [pc, #52]	; (9f04 <nrfx_gpiote_trigger_disable+0xc4>)
    9ece:	f005 f9c6 	bl	f25e <assert_print>
    9ed2:	f240 2129 	movw	r1, #553	; 0x229
    9ed6:	4628      	mov	r0, r5
    9ed8:	f005 f9ba 	bl	f250 <assert_post_action>
    9edc:	e7d6      	b.n	9e8c <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    9ede:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9ee2:	e000      	b.n	9ee6 <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9ee4:	4909      	ldr	r1, [pc, #36]	; (9f0c <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9ee6:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    9eea:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    9eee:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    9ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9ef6:	bd38      	pop	{r3, r4, r5, pc}
    9ef8:	40006000 	.word	0x40006000
    9efc:	000128c4 	.word	0x000128c4
    9f00:	00011cc8 	.word	0x00011cc8
    9f04:	0001160c 	.word	0x0001160c
    9f08:	000128f8 	.word	0x000128f8
    9f0c:	50000300 	.word	0x50000300

00009f10 <nrfx_gpiote_pin_uninit>:
{
    9f10:	b538      	push	{r3, r4, r5, lr}
    9f12:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    9f14:	f7ff f8a6 	bl	9064 <pin_in_use>
    9f18:	b908      	cbnz	r0, 9f1e <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    9f1a:	4824      	ldr	r0, [pc, #144]	; (9fac <nrfx_gpiote_pin_uninit+0x9c>)
}
    9f1c:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    9f1e:	4620      	mov	r0, r4
    9f20:	f7ff ff8e 	bl	9e40 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    9f24:	4620      	mov	r0, r4
    9f26:	f7ff f95f 	bl	91e8 <pin_handler_trigger_uninit>
    switch (port)
    9f2a:	0963      	lsrs	r3, r4, #5
    9f2c:	d01f      	beq.n	9f6e <nrfx_gpiote_pin_uninit+0x5e>
    9f2e:	2b01      	cmp	r3, #1
    9f30:	d120      	bne.n	9f74 <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    9f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    9f36:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9f3a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9f3c:	f013 0f01 	tst.w	r3, #1
    9f40:	d01a      	beq.n	9f78 <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    9f42:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9f46:	0964      	lsrs	r4, r4, #5
    9f48:	d024      	beq.n	9f94 <nrfx_gpiote_pin_uninit+0x84>
    9f4a:	2c01      	cmp	r4, #1
    9f4c:	d025      	beq.n	9f9a <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    9f4e:	4c18      	ldr	r4, [pc, #96]	; (9fb0 <nrfx_gpiote_pin_uninit+0xa0>)
    9f50:	f240 232e 	movw	r3, #558	; 0x22e
    9f54:	4622      	mov	r2, r4
    9f56:	4917      	ldr	r1, [pc, #92]	; (9fb4 <nrfx_gpiote_pin_uninit+0xa4>)
    9f58:	4817      	ldr	r0, [pc, #92]	; (9fb8 <nrfx_gpiote_pin_uninit+0xa8>)
    9f5a:	f005 f980 	bl	f25e <assert_print>
    9f5e:	f240 212e 	movw	r1, #558	; 0x22e
    9f62:	4620      	mov	r0, r4
    9f64:	f005 f974 	bl	f250 <assert_post_action>
        case 0: return NRF_P0;
    9f68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9f6c:	e016      	b.n	9f9c <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    9f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9f72:	e7e0      	b.n	9f36 <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    9f74:	2300      	movs	r3, #0
    9f76:	e7de      	b.n	9f36 <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    9f78:	4d0d      	ldr	r5, [pc, #52]	; (9fb0 <nrfx_gpiote_pin_uninit+0xa0>)
    9f7a:	f240 2329 	movw	r3, #553	; 0x229
    9f7e:	462a      	mov	r2, r5
    9f80:	490e      	ldr	r1, [pc, #56]	; (9fbc <nrfx_gpiote_pin_uninit+0xac>)
    9f82:	480d      	ldr	r0, [pc, #52]	; (9fb8 <nrfx_gpiote_pin_uninit+0xa8>)
    9f84:	f005 f96b 	bl	f25e <assert_print>
    9f88:	f240 2129 	movw	r1, #553	; 0x229
    9f8c:	4628      	mov	r0, r5
    9f8e:	f005 f95f 	bl	f250 <assert_post_action>
    9f92:	e7d6      	b.n	9f42 <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    9f94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9f98:	e000      	b.n	9f9c <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9f9a:	4b09      	ldr	r3, [pc, #36]	; (9fc0 <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    9f9c:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    9fa0:	2202      	movs	r2, #2
    9fa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    9fa6:	4807      	ldr	r0, [pc, #28]	; (9fc4 <nrfx_gpiote_pin_uninit+0xb4>)
}
    9fa8:	e7b8      	b.n	9f1c <nrfx_gpiote_pin_uninit+0xc>
    9faa:	bf00      	nop
    9fac:	0bad0004 	.word	0x0bad0004
    9fb0:	000128c4 	.word	0x000128c4
    9fb4:	00011cc8 	.word	0x00011cc8
    9fb8:	0001160c 	.word	0x0001160c
    9fbc:	000128f8 	.word	0x000128f8
    9fc0:	50000300 	.word	0x50000300
    9fc4:	0bad0000 	.word	0x0bad0000

00009fc8 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    9fc8:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    9fca:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    9fcc:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9fd0:	2100      	movs	r1, #0
    uint32_t status = 0;
    9fd2:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9fd4:	e003      	b.n	9fde <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    9fd6:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    9fd8:	3304      	adds	r3, #4
    9fda:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9fdc:	3101      	adds	r1, #1
    9fde:	2907      	cmp	r1, #7
    9fe0:	d814      	bhi.n	a00c <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9fe2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    9fe6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    9fea:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    9fec:	2a00      	cmp	r2, #0
    9fee:	d0f2      	beq.n	9fd6 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    9ff0:	4a0c      	ldr	r2, [pc, #48]	; (a024 <nrfx_gpiote_irq_handler+0x5c>)
    9ff2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    9ff6:	4210      	tst	r0, r2
    9ff8:	d0ed      	beq.n	9fd6 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    9ffa:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    9ffe:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    a002:	2500      	movs	r5, #0
    a004:	6015      	str	r5, [r2, #0]
    a006:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    a008:	4304      	orrs	r4, r0
    a00a:	e7e4      	b.n	9fd6 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a00c:	4b05      	ldr	r3, [pc, #20]	; (a024 <nrfx_gpiote_irq_handler+0x5c>)
    a00e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    a012:	b91b      	cbnz	r3, a01c <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    a014:	4620      	mov	r0, r4
    a016:	f7ff f939 	bl	928c <gpiote_evt_handle>
}
    a01a:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    a01c:	f7ff fac2 	bl	95a4 <port_event_handle>
    a020:	e7f8      	b.n	a014 <nrfx_gpiote_irq_handler+0x4c>
    a022:	bf00      	nop
    a024:	40006000 	.word	0x40006000

0000a028 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    a028:	b508      	push	{r3, lr}
    a02a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    a02c:	4801      	ldr	r0, [pc, #4]	; (a034 <nrfx_ppi_channel_alloc+0xc>)
    a02e:	f7fe fe1d 	bl	8c6c <nrfx_flag32_alloc>
}
    a032:	bd08      	pop	{r3, pc}
    a034:	200040f8 	.word	0x200040f8

0000a038 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    a038:	4b12      	ldr	r3, [pc, #72]	; (a084 <_DoInit+0x4c>)
    a03a:	2203      	movs	r2, #3
    a03c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    a03e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    a040:	4911      	ldr	r1, [pc, #68]	; (a088 <_DoInit+0x50>)
    a042:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    a044:	4a11      	ldr	r2, [pc, #68]	; (a08c <_DoInit+0x54>)
    a046:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    a048:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a04c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    a04e:	2200      	movs	r2, #0
    a050:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    a052:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    a054:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    a056:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    a058:	490d      	ldr	r1, [pc, #52]	; (a090 <_DoInit+0x58>)
    a05a:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    a05c:	2110      	movs	r1, #16
    a05e:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    a060:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    a062:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    a064:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    a066:	4a0b      	ldr	r2, [pc, #44]	; (a094 <_DoInit+0x5c>)
    a068:	6810      	ldr	r0, [r2, #0]
    a06a:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    a06e:	4a0a      	ldr	r2, [pc, #40]	; (a098 <_DoInit+0x60>)
    a070:	e892 0003 	ldmia.w	r2, {r0, r1}
    a074:	6018      	str	r0, [r3, #0]
    a076:	8099      	strh	r1, [r3, #4]
    a078:	0c09      	lsrs	r1, r1, #16
    a07a:	7199      	strb	r1, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    a07c:	2220      	movs	r2, #32
    a07e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    a080:	4770      	bx	lr
    a082:	bf00      	nop
    a084:	2000d024 	.word	0x2000d024
    a088:	00012c20 	.word	0x00012c20
    a08c:	2000d0dc 	.word	0x2000d0dc
    a090:	2000d0cc 	.word	0x2000d0cc
    a094:	00012c2c 	.word	0x00012c2c
    a098:	00012c30 	.word	0x00012c30

0000a09c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    a09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a0a0:	4604      	mov	r4, r0
    a0a2:	460e      	mov	r6, r1
    a0a4:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    a0a6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    a0aa:	4a2d      	ldr	r2, [pc, #180]	; (a160 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a0ac:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    a0b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    a0b2:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    a0b4:	42bb      	cmp	r3, r7
    a0b6:	d84b      	bhi.n	a150 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    a0b8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    a0bc:	4928      	ldr	r1, [pc, #160]	; (a160 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a0be:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    a0c2:	f8d2 8020 	ldr.w	r8, [r2, #32]
    a0c6:	eba8 0907 	sub.w	r9, r8, r7
    a0ca:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    a0ce:	4295      	cmp	r5, r2
    a0d0:	d904      	bls.n	a0dc <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    a0d2:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    a0d4:	429d      	cmp	r5, r3
    a0d6:	d917      	bls.n	a108 <SEGGER_RTT_WriteSkipNoLock+0x6c>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    a0d8:	2000      	movs	r0, #0
    a0da:	e03e      	b.n	a15a <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a0dc:	f8df 8080 	ldr.w	r8, [pc, #128]	; a160 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    a0e0:	1c63      	adds	r3, r4, #1
    a0e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a0e6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    a0ea:	6858      	ldr	r0, [r3, #4]
    a0ec:	462a      	mov	r2, r5
    a0ee:	4631      	mov	r1, r6
    a0f0:	4438      	add	r0, r7
    a0f2:	f006 fb3f 	bl	10774 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    a0f6:	443d      	add	r5, r7
    a0f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a0fc:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
    a100:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
      return 1;
    a104:	2001      	movs	r0, #1
    a106:	e028      	b.n	a15a <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a108:	1c43      	adds	r3, r0, #1
    a10a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a10e:	4a14      	ldr	r2, [pc, #80]	; (a160 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a110:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    a114:	6858      	ldr	r0, [r3, #4]
    a116:	464a      	mov	r2, r9
    a118:	4631      	mov	r1, r6
    a11a:	4438      	add	r0, r7
    a11c:	f006 fb2a 	bl	10774 <memcpy>
      NumBytes -= Rem;
    a120:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    a124:	197f      	adds	r7, r7, r5
    a126:	d00b      	beq.n	a140 <SEGGER_RTT_WriteSkipNoLock+0xa4>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    a128:	1c63      	adds	r3, r4, #1
    a12a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a12e:	4a0c      	ldr	r2, [pc, #48]	; (a160 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a130:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    a134:	463a      	mov	r2, r7
    a136:	eb06 0109 	add.w	r1, r6, r9
    a13a:	6858      	ldr	r0, [r3, #4]
    a13c:	f006 fb1a 	bl	10774 <memcpy>
      pRing->WrOff = NumBytes;
    a140:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a144:	4b06      	ldr	r3, [pc, #24]	; (a160 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    a146:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    a14a:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    a14c:	2001      	movs	r0, #1
    a14e:	e004      	b.n	a15a <SEGGER_RTT_WriteSkipNoLock+0xbe>
    Avail = RdOff - WrOff - 1u;
    a150:	1bdb      	subs	r3, r3, r7
    a152:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    a154:	42ab      	cmp	r3, r5
    a156:	d2c1      	bcs.n	a0dc <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    a158:	2000      	movs	r0, #0
}
    a15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a15e:	bf00      	nop
    a160:	2000d024 	.word	0x2000d024

0000a164 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    a164:	4b06      	ldr	r3, [pc, #24]	; (a180 <SEGGER_RTT_HasDataUp+0x1c>)
    a166:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    a16a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    a16e:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    a170:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a174:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    a178:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    a17a:	1a80      	subs	r0, r0, r2
    a17c:	4770      	bx	lr
    a17e:	bf00      	nop
    a180:	2000d024 	.word	0x2000d024

0000a184 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    a184:	4b03      	ldr	r3, [pc, #12]	; (a194 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    a186:	e000      	b.n	a18a <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    a188:	3318      	adds	r3, #24
	while (dev < __device_end) {
    a18a:	4a03      	ldr	r2, [pc, #12]	; (a198 <z_device_state_init+0x14>)
    a18c:	4293      	cmp	r3, r2
    a18e:	d3fb      	bcc.n	a188 <z_device_state_init+0x4>
	}
}
    a190:	4770      	bx	lr
    a192:	bf00      	nop
    a194:	00010e20 	.word	0x00010e20
    a198:	00010e98 	.word	0x00010e98

0000a19c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    a19c:	b570      	push	{r4, r5, r6, lr}
    a19e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a1a0:	4b11      	ldr	r3, [pc, #68]	; (a1e8 <z_sys_init_run_level+0x4c>)
    a1a2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    a1a6:	e009      	b.n	a1bc <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    a1a8:	4240      	negs	r0, r0
    a1aa:	e017      	b.n	a1dc <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    a1ac:	68eb      	ldr	r3, [r5, #12]
    a1ae:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    a1b0:	68ea      	ldr	r2, [r5, #12]
    a1b2:	7853      	ldrb	r3, [r2, #1]
    a1b4:	f043 0301 	orr.w	r3, r3, #1
    a1b8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a1ba:	3408      	adds	r4, #8
    a1bc:	1c73      	adds	r3, r6, #1
    a1be:	4a0a      	ldr	r2, [pc, #40]	; (a1e8 <z_sys_init_run_level+0x4c>)
    a1c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1c4:	42a3      	cmp	r3, r4
    a1c6:	d90d      	bls.n	a1e4 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    a1c8:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    a1ca:	6823      	ldr	r3, [r4, #0]
    a1cc:	4628      	mov	r0, r5
    a1ce:	4798      	blx	r3
		if (dev != NULL) {
    a1d0:	2d00      	cmp	r5, #0
    a1d2:	d0f2      	beq.n	a1ba <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    a1d4:	2800      	cmp	r0, #0
    a1d6:	d0eb      	beq.n	a1b0 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    a1d8:	2800      	cmp	r0, #0
    a1da:	dbe5      	blt.n	a1a8 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    a1dc:	28ff      	cmp	r0, #255	; 0xff
    a1de:	dde5      	ble.n	a1ac <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    a1e0:	20ff      	movs	r0, #255	; 0xff
    a1e2:	e7e3      	b.n	a1ac <z_sys_init_run_level+0x10>
		}
	}
}
    a1e4:	bd70      	pop	{r4, r5, r6, pc}
    a1e6:	bf00      	nop
    a1e8:	00012c38 	.word	0x00012c38

0000a1ec <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    a1ec:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    a1ee:	4605      	mov	r5, r0
    a1f0:	b328      	cbz	r0, a23e <z_impl_device_get_binding+0x52>
    a1f2:	7803      	ldrb	r3, [r0, #0]
    a1f4:	b32b      	cbz	r3, a242 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    a1f6:	4c14      	ldr	r4, [pc, #80]	; (a248 <z_impl_device_get_binding+0x5c>)
    a1f8:	e000      	b.n	a1fc <z_impl_device_get_binding+0x10>
    a1fa:	3418      	adds	r4, #24
    a1fc:	4b13      	ldr	r3, [pc, #76]	; (a24c <z_impl_device_get_binding+0x60>)
    a1fe:	429c      	cmp	r4, r3
    a200:	d008      	beq.n	a214 <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    a202:	4620      	mov	r0, r4
    a204:	f006 f96e 	bl	104e4 <z_device_is_ready>
    a208:	2800      	cmp	r0, #0
    a20a:	d0f6      	beq.n	a1fa <z_impl_device_get_binding+0xe>
    a20c:	6823      	ldr	r3, [r4, #0]
    a20e:	42ab      	cmp	r3, r5
    a210:	d1f3      	bne.n	a1fa <z_impl_device_get_binding+0xe>
    a212:	e012      	b.n	a23a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    a214:	4c0c      	ldr	r4, [pc, #48]	; (a248 <z_impl_device_get_binding+0x5c>)
    a216:	e000      	b.n	a21a <z_impl_device_get_binding+0x2e>
    a218:	3418      	adds	r4, #24
    a21a:	4b0c      	ldr	r3, [pc, #48]	; (a24c <z_impl_device_get_binding+0x60>)
    a21c:	429c      	cmp	r4, r3
    a21e:	d00b      	beq.n	a238 <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    a220:	4620      	mov	r0, r4
    a222:	f006 f95f 	bl	104e4 <z_device_is_ready>
    a226:	2800      	cmp	r0, #0
    a228:	d0f6      	beq.n	a218 <z_impl_device_get_binding+0x2c>
    a22a:	6821      	ldr	r1, [r4, #0]
    a22c:	4628      	mov	r0, r5
    a22e:	f7f6 fe08 	bl	e42 <strcmp>
    a232:	2800      	cmp	r0, #0
    a234:	d1f0      	bne.n	a218 <z_impl_device_get_binding+0x2c>
    a236:	e000      	b.n	a23a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    a238:	2400      	movs	r4, #0
}
    a23a:	4620      	mov	r0, r4
    a23c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    a23e:	4604      	mov	r4, r0
    a240:	e7fb      	b.n	a23a <z_impl_device_get_binding+0x4e>
    a242:	2400      	movs	r4, #0
    a244:	e7f9      	b.n	a23a <z_impl_device_get_binding+0x4e>
    a246:	bf00      	nop
    a248:	00010e20 	.word	0x00010e20
    a24c:	00010e98 	.word	0x00010e98

0000a250 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    a250:	4b01      	ldr	r3, [pc, #4]	; (a258 <z_impl_z_errno+0x8>)
    a252:	6898      	ldr	r0, [r3, #8]
}
    a254:	3094      	adds	r0, #148	; 0x94
    a256:	4770      	bx	lr
    a258:	2000d4dc 	.word	0x2000d4dc

0000a25c <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    a25c:	2804      	cmp	r0, #4
    a25e:	d80c      	bhi.n	a27a <reason_to_str+0x1e>
    a260:	e8df f000 	tbb	[pc, r0]
    a264:	07050d03 	.word	0x07050d03
    a268:	09          	.byte	0x09
    a269:	00          	.byte	0x00
    a26a:	4806      	ldr	r0, [pc, #24]	; (a284 <reason_to_str+0x28>)
    a26c:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    a26e:	4806      	ldr	r0, [pc, #24]	; (a288 <reason_to_str+0x2c>)
    a270:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    a272:	4806      	ldr	r0, [pc, #24]	; (a28c <reason_to_str+0x30>)
    a274:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    a276:	4806      	ldr	r0, [pc, #24]	; (a290 <reason_to_str+0x34>)
    a278:	4770      	bx	lr
	default:
		return "Unknown error";
    a27a:	4806      	ldr	r0, [pc, #24]	; (a294 <reason_to_str+0x38>)
    a27c:	4770      	bx	lr
		return "Unhandled interrupt";
    a27e:	4806      	ldr	r0, [pc, #24]	; (a298 <reason_to_str+0x3c>)
	}
}
    a280:	4770      	bx	lr
    a282:	bf00      	nop
    a284:	00012ca0 	.word	0x00012ca0
    a288:	00012c74 	.word	0x00012c74
    a28c:	00012c84 	.word	0x00012c84
    a290:	00012c90 	.word	0x00012c90
    a294:	00012c50 	.word	0x00012c50
    a298:	00012c60 	.word	0x00012c60

0000a29c <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a29c:	b130      	cbz	r0, a2ac <thread_name_get+0x10>
{
    a29e:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a2a0:	f006 f982 	bl	105a8 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    a2a4:	b120      	cbz	r0, a2b0 <thread_name_get+0x14>
    a2a6:	7803      	ldrb	r3, [r0, #0]
    a2a8:	b123      	cbz	r3, a2b4 <thread_name_get+0x18>
}
    a2aa:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    a2ac:	4802      	ldr	r0, [pc, #8]	; (a2b8 <thread_name_get+0x1c>)
}
    a2ae:	4770      	bx	lr
		thread_name = "unknown";
    a2b0:	4801      	ldr	r0, [pc, #4]	; (a2b8 <thread_name_get+0x1c>)
    a2b2:	e7fa      	b.n	a2aa <thread_name_get+0xe>
    a2b4:	4800      	ldr	r0, [pc, #0]	; (a2b8 <thread_name_get+0x1c>)
	return thread_name;
    a2b6:	e7f8      	b.n	a2aa <thread_name_get+0xe>
    a2b8:	00012cb0 	.word	0x00012cb0

0000a2bc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2be:	b087      	sub	sp, #28
    a2c0:	4604      	mov	r4, r0
    a2c2:	460e      	mov	r6, r1
	__asm__ volatile(
    a2c4:	f04f 0320 	mov.w	r3, #32
    a2c8:	f3ef 8711 	mrs	r7, BASEPRI
    a2cc:	f383 8812 	msr	BASEPRI_MAX, r3
    a2d0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    a2d4:	f002 f9d2 	bl	c67c <z_impl_z_current_get>
    a2d8:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a2da:	4620      	mov	r0, r4
    a2dc:	f7ff ffbe 	bl	a25c <reason_to_str>
    a2e0:	2300      	movs	r3, #0
    a2e2:	9305      	str	r3, [sp, #20]
    a2e4:	9004      	str	r0, [sp, #16]
    a2e6:	9403      	str	r4, [sp, #12]
    a2e8:	4a22      	ldr	r2, [pc, #136]	; (a374 <z_fatal_error+0xb8>)
    a2ea:	9202      	str	r2, [sp, #8]
    a2ec:	9301      	str	r3, [sp, #4]
    a2ee:	9300      	str	r3, [sp, #0]
    a2f0:	2201      	movs	r2, #1
    a2f2:	4921      	ldr	r1, [pc, #132]	; (a378 <z_fatal_error+0xbc>)
    a2f4:	4618      	mov	r0, r3
    a2f6:	f006 f902 	bl	104fe <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    a2fa:	b11e      	cbz	r6, a304 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    a2fc:	69f3      	ldr	r3, [r6, #28]
    a2fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
    a302:	b9eb      	cbnz	r3, a340 <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    a304:	4628      	mov	r0, r5
    a306:	f7ff ffc9 	bl	a29c <thread_name_get>
    a30a:	9004      	str	r0, [sp, #16]
    a30c:	9503      	str	r5, [sp, #12]
    a30e:	4b1b      	ldr	r3, [pc, #108]	; (a37c <z_fatal_error+0xc0>)
    a310:	9302      	str	r3, [sp, #8]
    a312:	2000      	movs	r0, #0
    a314:	9001      	str	r0, [sp, #4]
    a316:	9000      	str	r0, [sp, #0]
    a318:	4603      	mov	r3, r0
    a31a:	2201      	movs	r2, #1
    a31c:	4916      	ldr	r1, [pc, #88]	; (a378 <z_fatal_error+0xbc>)
    a31e:	f006 f8ee 	bl	104fe <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    a322:	4631      	mov	r1, r6
    a324:	4620      	mov	r0, r4
    a326:	f7fe fb9b 	bl	8a60 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    a32a:	2c04      	cmp	r4, #4
    a32c:	d013      	beq.n	a356 <z_fatal_error+0x9a>
	__asm__ volatile(
    a32e:	f387 8811 	msr	BASEPRI, r7
    a332:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    a336:	4628      	mov	r0, r5
    a338:	f7fc fa9a 	bl	6870 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    a33c:	b007      	add	sp, #28
    a33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
    a340:	4b0f      	ldr	r3, [pc, #60]	; (a380 <z_fatal_error+0xc4>)
    a342:	9302      	str	r3, [sp, #8]
    a344:	2000      	movs	r0, #0
    a346:	9001      	str	r0, [sp, #4]
    a348:	9000      	str	r0, [sp, #0]
    a34a:	4603      	mov	r3, r0
    a34c:	2201      	movs	r2, #1
    a34e:	490a      	ldr	r1, [pc, #40]	; (a378 <z_fatal_error+0xbc>)
    a350:	f006 f8d5 	bl	104fe <z_log_msg2_runtime_create>
    a354:	e7d6      	b.n	a304 <z_fatal_error+0x48>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    a356:	4c0b      	ldr	r4, [pc, #44]	; (a384 <z_fatal_error+0xc8>)
    a358:	238f      	movs	r3, #143	; 0x8f
    a35a:	4622      	mov	r2, r4
    a35c:	490a      	ldr	r1, [pc, #40]	; (a388 <z_fatal_error+0xcc>)
    a35e:	480b      	ldr	r0, [pc, #44]	; (a38c <z_fatal_error+0xd0>)
    a360:	f004 ff7d 	bl	f25e <assert_print>
    a364:	480a      	ldr	r0, [pc, #40]	; (a390 <z_fatal_error+0xd4>)
    a366:	f004 ff7a 	bl	f25e <assert_print>
    a36a:	218f      	movs	r1, #143	; 0x8f
    a36c:	4620      	mov	r0, r4
    a36e:	f004 ff6f 	bl	f250 <assert_post_action>
    a372:	e7dc      	b.n	a32e <z_fatal_error+0x72>
    a374:	00012cb8 	.word	0x00012cb8
    a378:	00011040 	.word	0x00011040
    a37c:	00012d04 	.word	0x00012d04
    a380:	00012ce0 	.word	0x00012ce0
    a384:	00012d1c 	.word	0x00012d1c
    a388:	00012d40 	.word	0x00012d40
    a38c:	0001160c 	.word	0x0001160c
    a390:	00012d60 	.word	0x00012d60

0000a394 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    a394:	b510      	push	{r4, lr}
    a396:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    a398:	4c11      	ldr	r4, [pc, #68]	; (a3e0 <init_idle_thread+0x4c>)
    a39a:	23b0      	movs	r3, #176	; 0xb0
    a39c:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a3a0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    a3a4:	4b0f      	ldr	r3, [pc, #60]	; (a3e4 <init_idle_thread+0x50>)
    a3a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    a3aa:	4a0f      	ldr	r2, [pc, #60]	; (a3e8 <init_idle_thread+0x54>)
    a3ac:	9205      	str	r2, [sp, #20]
    a3ae:	2201      	movs	r2, #1
    a3b0:	9204      	str	r2, [sp, #16]
    a3b2:	220f      	movs	r2, #15
    a3b4:	9203      	str	r2, [sp, #12]
    a3b6:	2200      	movs	r2, #0
    a3b8:	9202      	str	r2, [sp, #8]
    a3ba:	9201      	str	r2, [sp, #4]
    a3bc:	9300      	str	r3, [sp, #0]
    a3be:	4b0b      	ldr	r3, [pc, #44]	; (a3ec <init_idle_thread+0x58>)
    a3c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
    a3c4:	490a      	ldr	r1, [pc, #40]	; (a3f0 <init_idle_thread+0x5c>)
    a3c6:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    a3ca:	fb0c 1100 	mla	r1, ip, r0, r1
    a3ce:	4620      	mov	r0, r4
    a3d0:	f000 fa76 	bl	a8c0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a3d4:	7b63      	ldrb	r3, [r4, #13]
    a3d6:	f023 0304 	bic.w	r3, r3, #4
    a3da:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    a3dc:	b006      	add	sp, #24
    a3de:	bd10      	pop	{r4, pc}
    a3e0:	200047c8 	.word	0x200047c8
    a3e4:	2000d4dc 	.word	0x2000d4dc
    a3e8:	00012d98 	.word	0x00012d98
    a3ec:	0000abd5 	.word	0x0000abd5
    a3f0:	2000efe0 	.word	0x2000efe0

0000a3f4 <bg_thread_main>:
{
    a3f4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    a3f6:	4b0a      	ldr	r3, [pc, #40]	; (a420 <bg_thread_main+0x2c>)
    a3f8:	2201      	movs	r2, #1
    a3fa:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    a3fc:	2002      	movs	r0, #2
    a3fe:	f7ff fecd 	bl	a19c <z_sys_init_run_level>
	boot_banner();
    a402:	f002 fe83 	bl	d10c <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    a406:	2003      	movs	r0, #3
    a408:	f7ff fec8 	bl	a19c <z_sys_init_run_level>
	z_init_static_threads();
    a40c:	f000 fb68 	bl	aae0 <z_init_static_threads>
	main();
    a410:	f7f8 fd3e 	bl	2e90 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    a414:	4a03      	ldr	r2, [pc, #12]	; (a424 <bg_thread_main+0x30>)
    a416:	7b13      	ldrb	r3, [r2, #12]
    a418:	f023 0301 	bic.w	r3, r3, #1
    a41c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    a41e:	bd08      	pop	{r3, pc}
    a420:	2000d71d 	.word	0x2000d71d
    a424:	20004878 	.word	0x20004878

0000a428 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    a428:	b508      	push	{r3, lr}
    a42a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a42c:	4a01      	ldr	r2, [pc, #4]	; (a434 <switch_to_main_thread+0xc>)
    a42e:	4802      	ldr	r0, [pc, #8]	; (a438 <switch_to_main_thread+0x10>)
    a430:	f7fb fdd2 	bl	5fd8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    a434:	0000a3f5 	.word	0x0000a3f5
    a438:	20004878 	.word	0x20004878

0000a43c <z_bss_zero>:
{
    a43c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    a43e:	4803      	ldr	r0, [pc, #12]	; (a44c <z_bss_zero+0x10>)
    a440:	4a03      	ldr	r2, [pc, #12]	; (a450 <z_bss_zero+0x14>)
    a442:	1a12      	subs	r2, r2, r0
    a444:	2100      	movs	r1, #0
    a446:	f006 f869 	bl	1051c <z_early_memset>
}
    a44a:	bd08      	pop	{r3, pc}
    a44c:	20004288 	.word	0x20004288
    a450:	2000d720 	.word	0x2000d720

0000a454 <z_init_cpu>:
{
    a454:	b510      	push	{r4, lr}
    a456:	4604      	mov	r4, r0
	init_idle_thread(id);
    a458:	f7ff ff9c 	bl	a394 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    a45c:	490b      	ldr	r1, [pc, #44]	; (a48c <z_init_cpu+0x38>)
    a45e:	23b0      	movs	r3, #176	; 0xb0
    a460:	fb03 1104 	mla	r1, r3, r4, r1
    a464:	4a0a      	ldr	r2, [pc, #40]	; (a490 <z_init_cpu+0x3c>)
    a466:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    a46a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    a46e:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    a470:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    a472:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    a476:	4b07      	ldr	r3, [pc, #28]	; (a494 <z_init_cpu+0x40>)
    a478:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    a47c:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    a480:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a484:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    a488:	6063      	str	r3, [r4, #4]
}
    a48a:	bd10      	pop	{r4, pc}
    a48c:	200047c8 	.word	0x200047c8
    a490:	2000d4dc 	.word	0x2000d4dc
    a494:	2000f140 	.word	0x2000f140

0000a498 <prepare_multithreading>:
{
    a498:	b570      	push	{r4, r5, r6, lr}
    a49a:	b086      	sub	sp, #24
	z_sched_init();
    a49c:	f001 ff2a 	bl	c2f4 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    a4a0:	4d10      	ldr	r5, [pc, #64]	; (a4e4 <prepare_multithreading+0x4c>)
    a4a2:	4b11      	ldr	r3, [pc, #68]	; (a4e8 <prepare_multithreading+0x50>)
    a4a4:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a4a6:	4b11      	ldr	r3, [pc, #68]	; (a4ec <prepare_multithreading+0x54>)
    a4a8:	9305      	str	r3, [sp, #20]
    a4aa:	2301      	movs	r3, #1
    a4ac:	9304      	str	r3, [sp, #16]
    a4ae:	2400      	movs	r4, #0
    a4b0:	9403      	str	r4, [sp, #12]
    a4b2:	9402      	str	r4, [sp, #8]
    a4b4:	9401      	str	r4, [sp, #4]
    a4b6:	9400      	str	r4, [sp, #0]
    a4b8:	4b0d      	ldr	r3, [pc, #52]	; (a4f0 <prepare_multithreading+0x58>)
    a4ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a4be:	490d      	ldr	r1, [pc, #52]	; (a4f4 <prepare_multithreading+0x5c>)
    a4c0:	4628      	mov	r0, r5
    a4c2:	f000 f9fd 	bl	a8c0 <z_setup_new_thread>
    a4c6:	4606      	mov	r6, r0
    a4c8:	7b6b      	ldrb	r3, [r5, #13]
    a4ca:	f023 0304 	bic.w	r3, r3, #4
    a4ce:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    a4d0:	4628      	mov	r0, r5
    a4d2:	f001 fa33 	bl	b93c <z_ready_thread>
	z_init_cpu(0);
    a4d6:	4620      	mov	r0, r4
    a4d8:	f7ff ffbc 	bl	a454 <z_init_cpu>
}
    a4dc:	4630      	mov	r0, r6
    a4de:	b006      	add	sp, #24
    a4e0:	bd70      	pop	{r4, r5, r6, pc}
    a4e2:	bf00      	nop
    a4e4:	20004878 	.word	0x20004878
    a4e8:	2000d4dc 	.word	0x2000d4dc
    a4ec:	00012da0 	.word	0x00012da0
    a4f0:	0000a3f5 	.word	0x0000a3f5
    a4f4:	2000ebc0 	.word	0x2000ebc0

0000a4f8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    a4f8:	b500      	push	{lr}
    a4fa:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    a4fc:	4b1f      	ldr	r3, [pc, #124]	; (a57c <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    a4fe:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    a502:	4c1f      	ldr	r4, [pc, #124]	; (a580 <z_cstart+0x88>)
    a504:	6963      	ldr	r3, [r4, #20]
    a506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a50a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a50c:	23e0      	movs	r3, #224	; 0xe0
    a50e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    a512:	2500      	movs	r5, #0
    a514:	77e5      	strb	r5, [r4, #31]
    a516:	7625      	strb	r5, [r4, #24]
    a518:	7665      	strb	r5, [r4, #25]
    a51a:	76a5      	strb	r5, [r4, #26]
    a51c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    a520:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a522:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    a526:	6263      	str	r3, [r4, #36]	; 0x24
    a528:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    a52c:	f7fc f90c 	bl	6748 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    a530:	f7fb fbd6 	bl	5ce0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    a534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a538:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    a53a:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    a53c:	f7fc fab8 	bl	6ab0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    a540:	f7fc f9b0 	bl	68a4 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    a544:	f7fa fcf0 	bl	4f28 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    a548:	2401      	movs	r4, #1
    a54a:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    a54e:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    a552:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    a554:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    a556:	4668      	mov	r0, sp
    a558:	f002 fdd2 	bl	d100 <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    a55c:	4b09      	ldr	r3, [pc, #36]	; (a584 <z_cstart+0x8c>)
    a55e:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    a562:	f7ff fe0f 	bl	a184 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    a566:	4628      	mov	r0, r5
    a568:	f7ff fe18 	bl	a19c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    a56c:	4620      	mov	r0, r4
    a56e:	f7ff fe15 	bl	a19c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    a572:	f7ff ff91 	bl	a498 <prepare_multithreading>
    a576:	f7ff ff57 	bl	a428 <switch_to_main_thread>
    a57a:	bf00      	nop
    a57c:	2000f960 	.word	0x2000f960
    a580:	e000ed00 	.word	0xe000ed00
    a584:	2000d4dc 	.word	0x2000d4dc

0000a588 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    a588:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a58a:	4c10      	ldr	r4, [pc, #64]	; (a5cc <init_mem_slab_module+0x44>)
	int rc = 0;
    a58c:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a58e:	e008      	b.n	a5a2 <init_mem_slab_module+0x1a>
    a590:	4b0f      	ldr	r3, [pc, #60]	; (a5d0 <init_mem_slab_module+0x48>)
    a592:	429c      	cmp	r4, r3
    a594:	d217      	bcs.n	a5c6 <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    a596:	4620      	mov	r0, r4
    a598:	f005 ffc8 	bl	1052c <create_free_list>
		if (rc < 0) {
    a59c:	1e05      	subs	r5, r0, #0
    a59e:	db12      	blt.n	a5c6 <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a5a0:	3420      	adds	r4, #32
    a5a2:	4b0b      	ldr	r3, [pc, #44]	; (a5d0 <init_mem_slab_module+0x48>)
    a5a4:	429c      	cmp	r4, r3
    a5a6:	d9f3      	bls.n	a590 <init_mem_slab_module+0x8>
    a5a8:	4e0a      	ldr	r6, [pc, #40]	; (a5d4 <init_mem_slab_module+0x4c>)
    a5aa:	233d      	movs	r3, #61	; 0x3d
    a5ac:	4632      	mov	r2, r6
    a5ae:	490a      	ldr	r1, [pc, #40]	; (a5d8 <init_mem_slab_module+0x50>)
    a5b0:	480a      	ldr	r0, [pc, #40]	; (a5dc <init_mem_slab_module+0x54>)
    a5b2:	f004 fe54 	bl	f25e <assert_print>
    a5b6:	480a      	ldr	r0, [pc, #40]	; (a5e0 <init_mem_slab_module+0x58>)
    a5b8:	f004 fe51 	bl	f25e <assert_print>
    a5bc:	213d      	movs	r1, #61	; 0x3d
    a5be:	4630      	mov	r0, r6
    a5c0:	f004 fe46 	bl	f250 <assert_post_action>
    a5c4:	e7e4      	b.n	a590 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    a5c6:	4628      	mov	r0, r5
    a5c8:	bd70      	pop	{r4, r5, r6, pc}
    a5ca:	bf00      	nop
    a5cc:	200041e0 	.word	0x200041e0
    a5d0:	200041e0 	.word	0x200041e0
    a5d4:	00012dac 	.word	0x00012dac
    a5d8:	00012dd4 	.word	0x00012dd4
    a5dc:	0001160c 	.word	0x0001160c
    a5e0:	00012df4 	.word	0x00012df4

0000a5e4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    a5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a5e8:	b082      	sub	sp, #8
    a5ea:	4604      	mov	r4, r0
    a5ec:	460e      	mov	r6, r1
    a5ee:	4690      	mov	r8, r2
    a5f0:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    a5f2:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    a5f6:	f04f 0320 	mov.w	r3, #32
    a5fa:	f3ef 8711 	mrs	r7, BASEPRI
    a5fe:	f383 8812 	msr	BASEPRI_MAX, r3
    a602:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a606:	4628      	mov	r0, r5
    a608:	f000 f8d8 	bl	a7bc <z_spin_lock_valid>
    a60c:	b1c0      	cbz	r0, a640 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    a60e:	4628      	mov	r0, r5
    a610:	f000 f8f4 	bl	a7fc <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    a614:	69a1      	ldr	r1, [r4, #24]
    a616:	b321      	cbz	r1, a662 <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    a618:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    a61a:	69a3      	ldr	r3, [r4, #24]
    a61c:	681b      	ldr	r3, [r3, #0]
    a61e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    a620:	69e3      	ldr	r3, [r4, #28]
    a622:	3301      	adds	r3, #1
    a624:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    a626:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a628:	4628      	mov	r0, r5
    a62a:	f000 f8d7 	bl	a7dc <z_spin_unlock_valid>
    a62e:	b388      	cbz	r0, a694 <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    a630:	f387 8811 	msr	BASEPRI, r7
    a634:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    a638:	4620      	mov	r0, r4
    a63a:	b002      	add	sp, #8
    a63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a640:	f8df a070 	ldr.w	sl, [pc, #112]	; a6b4 <k_mem_slab_alloc+0xd0>
    a644:	238e      	movs	r3, #142	; 0x8e
    a646:	4652      	mov	r2, sl
    a648:	491b      	ldr	r1, [pc, #108]	; (a6b8 <k_mem_slab_alloc+0xd4>)
    a64a:	481c      	ldr	r0, [pc, #112]	; (a6bc <k_mem_slab_alloc+0xd8>)
    a64c:	f004 fe07 	bl	f25e <assert_print>
    a650:	4629      	mov	r1, r5
    a652:	481b      	ldr	r0, [pc, #108]	; (a6c0 <k_mem_slab_alloc+0xdc>)
    a654:	f004 fe03 	bl	f25e <assert_print>
    a658:	218e      	movs	r1, #142	; 0x8e
    a65a:	4650      	mov	r0, sl
    a65c:	f004 fdf8 	bl	f250 <assert_post_action>
    a660:	e7d5      	b.n	a60e <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    a662:	ea59 0308 	orrs.w	r3, r9, r8
    a666:	d104      	bne.n	a672 <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    a668:	2300      	movs	r3, #0
    a66a:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    a66c:	f06f 040b 	mvn.w	r4, #11
    a670:	e7da      	b.n	a628 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    a672:	f8cd 8000 	str.w	r8, [sp]
    a676:	f8cd 9004 	str.w	r9, [sp, #4]
    a67a:	4622      	mov	r2, r4
    a67c:	4639      	mov	r1, r7
    a67e:	4628      	mov	r0, r5
    a680:	f001 fb38 	bl	bcf4 <z_pend_curr>
		if (result == 0) {
    a684:	4604      	mov	r4, r0
    a686:	2800      	cmp	r0, #0
    a688:	d1d6      	bne.n	a638 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    a68a:	4b0e      	ldr	r3, [pc, #56]	; (a6c4 <k_mem_slab_alloc+0xe0>)
    a68c:	689b      	ldr	r3, [r3, #8]
    a68e:	695b      	ldr	r3, [r3, #20]
    a690:	6033      	str	r3, [r6, #0]
		return result;
    a692:	e7d1      	b.n	a638 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a694:	4e07      	ldr	r6, [pc, #28]	; (a6b4 <k_mem_slab_alloc+0xd0>)
    a696:	23b9      	movs	r3, #185	; 0xb9
    a698:	4632      	mov	r2, r6
    a69a:	490b      	ldr	r1, [pc, #44]	; (a6c8 <k_mem_slab_alloc+0xe4>)
    a69c:	4807      	ldr	r0, [pc, #28]	; (a6bc <k_mem_slab_alloc+0xd8>)
    a69e:	f004 fdde 	bl	f25e <assert_print>
    a6a2:	4629      	mov	r1, r5
    a6a4:	4809      	ldr	r0, [pc, #36]	; (a6cc <k_mem_slab_alloc+0xe8>)
    a6a6:	f004 fdda 	bl	f25e <assert_print>
    a6aa:	21b9      	movs	r1, #185	; 0xb9
    a6ac:	4630      	mov	r0, r6
    a6ae:	f004 fdcf 	bl	f250 <assert_post_action>
    a6b2:	e7bd      	b.n	a630 <k_mem_slab_alloc+0x4c>
    a6b4:	000117b8 	.word	0x000117b8
    a6b8:	00011818 	.word	0x00011818
    a6bc:	0001160c 	.word	0x0001160c
    a6c0:	00011830 	.word	0x00011830
    a6c4:	2000d4dc 	.word	0x2000d4dc
    a6c8:	000117e8 	.word	0x000117e8
    a6cc:	00011800 	.word	0x00011800

0000a6d0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    a6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a6d4:	4604      	mov	r4, r0
    a6d6:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    a6d8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    a6dc:	f04f 0320 	mov.w	r3, #32
    a6e0:	f3ef 8711 	mrs	r7, BASEPRI
    a6e4:	f383 8812 	msr	BASEPRI_MAX, r3
    a6e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a6ec:	4630      	mov	r0, r6
    a6ee:	f000 f865 	bl	a7bc <z_spin_lock_valid>
    a6f2:	b1b0      	cbz	r0, a722 <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    a6f4:	4630      	mov	r0, r6
    a6f6:	f000 f881 	bl	a7fc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    a6fa:	69a3      	ldr	r3, [r4, #24]
    a6fc:	b313      	cbz	r3, a744 <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    a6fe:	682b      	ldr	r3, [r5, #0]
    a700:	69a2      	ldr	r2, [r4, #24]
    a702:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    a704:	682b      	ldr	r3, [r5, #0]
    a706:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    a708:	69e3      	ldr	r3, [r4, #28]
    a70a:	3b01      	subs	r3, #1
    a70c:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a70e:	4630      	mov	r0, r6
    a710:	f000 f864 	bl	a7dc <z_spin_unlock_valid>
    a714:	b338      	cbz	r0, a766 <k_mem_slab_free+0x96>
	__asm__ volatile(
    a716:	f387 8811 	msr	BASEPRI, r7
    a71a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    a71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a722:	f8df 8064 	ldr.w	r8, [pc, #100]	; a788 <k_mem_slab_free+0xb8>
    a726:	238e      	movs	r3, #142	; 0x8e
    a728:	4642      	mov	r2, r8
    a72a:	4918      	ldr	r1, [pc, #96]	; (a78c <k_mem_slab_free+0xbc>)
    a72c:	4818      	ldr	r0, [pc, #96]	; (a790 <k_mem_slab_free+0xc0>)
    a72e:	f004 fd96 	bl	f25e <assert_print>
    a732:	4631      	mov	r1, r6
    a734:	4817      	ldr	r0, [pc, #92]	; (a794 <k_mem_slab_free+0xc4>)
    a736:	f004 fd92 	bl	f25e <assert_print>
    a73a:	218e      	movs	r1, #142	; 0x8e
    a73c:	4640      	mov	r0, r8
    a73e:	f004 fd87 	bl	f250 <assert_post_action>
    a742:	e7d7      	b.n	a6f4 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    a744:	4620      	mov	r0, r4
    a746:	f001 fd71 	bl	c22c <z_unpend_first_thread>
		if (pending_thread != NULL) {
    a74a:	2800      	cmp	r0, #0
    a74c:	d0d7      	beq.n	a6fe <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    a74e:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    a750:	2100      	movs	r1, #0
    a752:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    a756:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    a758:	f001 f8f0 	bl	b93c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    a75c:	4639      	mov	r1, r7
    a75e:	4630      	mov	r0, r6
    a760:	f000 fe48 	bl	b3f4 <z_reschedule>
			return;
    a764:	e7db      	b.n	a71e <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a766:	4c08      	ldr	r4, [pc, #32]	; (a788 <k_mem_slab_free+0xb8>)
    a768:	23b9      	movs	r3, #185	; 0xb9
    a76a:	4622      	mov	r2, r4
    a76c:	490a      	ldr	r1, [pc, #40]	; (a798 <k_mem_slab_free+0xc8>)
    a76e:	4808      	ldr	r0, [pc, #32]	; (a790 <k_mem_slab_free+0xc0>)
    a770:	f004 fd75 	bl	f25e <assert_print>
    a774:	4631      	mov	r1, r6
    a776:	4809      	ldr	r0, [pc, #36]	; (a79c <k_mem_slab_free+0xcc>)
    a778:	f004 fd71 	bl	f25e <assert_print>
    a77c:	21b9      	movs	r1, #185	; 0xb9
    a77e:	4620      	mov	r0, r4
    a780:	f004 fd66 	bl	f250 <assert_post_action>
    a784:	e7c7      	b.n	a716 <k_mem_slab_free+0x46>
    a786:	bf00      	nop
    a788:	000117b8 	.word	0x000117b8
    a78c:	00011818 	.word	0x00011818
    a790:	0001160c 	.word	0x0001160c
    a794:	00011830 	.word	0x00011830
    a798:	000117e8 	.word	0x000117e8
    a79c:	00011800 	.word	0x00011800

0000a7a0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    a7a0:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a7a2:	ea53 0102 	orrs.w	r1, r3, r2
    a7a6:	d102      	bne.n	a7ae <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    a7a8:	f005 ff00 	bl	105ac <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    a7ac:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a7ae:	4902      	ldr	r1, [pc, #8]	; (a7b8 <schedule_new_thread+0x18>)
    a7b0:	3018      	adds	r0, #24
    a7b2:	f002 f86d 	bl	c890 <z_add_timeout>
    a7b6:	e7f9      	b.n	a7ac <schedule_new_thread+0xc>
    a7b8:	0000ba99 	.word	0x0000ba99

0000a7bc <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    a7bc:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    a7be:	b13b      	cbz	r3, a7d0 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    a7c0:	f003 0303 	and.w	r3, r3, #3
    a7c4:	4a04      	ldr	r2, [pc, #16]	; (a7d8 <z_spin_lock_valid+0x1c>)
    a7c6:	7d12      	ldrb	r2, [r2, #20]
    a7c8:	4293      	cmp	r3, r2
    a7ca:	d003      	beq.n	a7d4 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    a7cc:	2001      	movs	r0, #1
    a7ce:	4770      	bx	lr
    a7d0:	2001      	movs	r0, #1
    a7d2:	4770      	bx	lr
			return false;
    a7d4:	2000      	movs	r0, #0
}
    a7d6:	4770      	bx	lr
    a7d8:	2000d4dc 	.word	0x2000d4dc

0000a7dc <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    a7dc:	6801      	ldr	r1, [r0, #0]
    a7de:	4a06      	ldr	r2, [pc, #24]	; (a7f8 <z_spin_unlock_valid+0x1c>)
    a7e0:	7d13      	ldrb	r3, [r2, #20]
    a7e2:	6892      	ldr	r2, [r2, #8]
    a7e4:	4313      	orrs	r3, r2
    a7e6:	4299      	cmp	r1, r3
    a7e8:	d103      	bne.n	a7f2 <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    a7ea:	2300      	movs	r3, #0
    a7ec:	6003      	str	r3, [r0, #0]
	return true;
    a7ee:	2001      	movs	r0, #1
    a7f0:	4770      	bx	lr
		return false;
    a7f2:	2000      	movs	r0, #0
}
    a7f4:	4770      	bx	lr
    a7f6:	bf00      	nop
    a7f8:	2000d4dc 	.word	0x2000d4dc

0000a7fc <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    a7fc:	4a02      	ldr	r2, [pc, #8]	; (a808 <z_spin_lock_set_owner+0xc>)
    a7fe:	7d13      	ldrb	r3, [r2, #20]
    a800:	6892      	ldr	r2, [r2, #8]
    a802:	4313      	orrs	r3, r2
    a804:	6003      	str	r3, [r0, #0]
}
    a806:	4770      	bx	lr
    a808:	2000d4dc 	.word	0x2000d4dc

0000a80c <z_thread_monitor_exit>:
{
    a80c:	b570      	push	{r4, r5, r6, lr}
    a80e:	4604      	mov	r4, r0
	__asm__ volatile(
    a810:	f04f 0320 	mov.w	r3, #32
    a814:	f3ef 8511 	mrs	r5, BASEPRI
    a818:	f383 8812 	msr	BASEPRI_MAX, r3
    a81c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a820:	481f      	ldr	r0, [pc, #124]	; (a8a0 <z_thread_monitor_exit+0x94>)
    a822:	f7ff ffcb 	bl	a7bc <z_spin_lock_valid>
    a826:	b150      	cbz	r0, a83e <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    a828:	481d      	ldr	r0, [pc, #116]	; (a8a0 <z_thread_monitor_exit+0x94>)
    a82a:	f7ff ffe7 	bl	a7fc <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    a82e:	4b1d      	ldr	r3, [pc, #116]	; (a8a4 <z_thread_monitor_exit+0x98>)
    a830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a832:	42a3      	cmp	r3, r4
    a834:	d114      	bne.n	a860 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    a836:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    a838:	4b1a      	ldr	r3, [pc, #104]	; (a8a4 <z_thread_monitor_exit+0x98>)
    a83a:	629a      	str	r2, [r3, #40]	; 0x28
    a83c:	e017      	b.n	a86e <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a83e:	4e1a      	ldr	r6, [pc, #104]	; (a8a8 <z_thread_monitor_exit+0x9c>)
    a840:	238e      	movs	r3, #142	; 0x8e
    a842:	4632      	mov	r2, r6
    a844:	4919      	ldr	r1, [pc, #100]	; (a8ac <z_thread_monitor_exit+0xa0>)
    a846:	481a      	ldr	r0, [pc, #104]	; (a8b0 <z_thread_monitor_exit+0xa4>)
    a848:	f004 fd09 	bl	f25e <assert_print>
    a84c:	4914      	ldr	r1, [pc, #80]	; (a8a0 <z_thread_monitor_exit+0x94>)
    a84e:	4819      	ldr	r0, [pc, #100]	; (a8b4 <z_thread_monitor_exit+0xa8>)
    a850:	f004 fd05 	bl	f25e <assert_print>
    a854:	218e      	movs	r1, #142	; 0x8e
    a856:	4630      	mov	r0, r6
    a858:	f004 fcfa 	bl	f250 <assert_post_action>
    a85c:	e7e4      	b.n	a828 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    a85e:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    a860:	b113      	cbz	r3, a868 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    a862:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    a864:	42a2      	cmp	r2, r4
    a866:	d1fa      	bne.n	a85e <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    a868:	b10b      	cbz	r3, a86e <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    a86a:	6f22      	ldr	r2, [r4, #112]	; 0x70
    a86c:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a86e:	480c      	ldr	r0, [pc, #48]	; (a8a0 <z_thread_monitor_exit+0x94>)
    a870:	f7ff ffb4 	bl	a7dc <z_spin_unlock_valid>
    a874:	b120      	cbz	r0, a880 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    a876:	f385 8811 	msr	BASEPRI, r5
    a87a:	f3bf 8f6f 	isb	sy
}
    a87e:	bd70      	pop	{r4, r5, r6, pc}
    a880:	4c09      	ldr	r4, [pc, #36]	; (a8a8 <z_thread_monitor_exit+0x9c>)
    a882:	23b9      	movs	r3, #185	; 0xb9
    a884:	4622      	mov	r2, r4
    a886:	490c      	ldr	r1, [pc, #48]	; (a8b8 <z_thread_monitor_exit+0xac>)
    a888:	4809      	ldr	r0, [pc, #36]	; (a8b0 <z_thread_monitor_exit+0xa4>)
    a88a:	f004 fce8 	bl	f25e <assert_print>
    a88e:	4904      	ldr	r1, [pc, #16]	; (a8a0 <z_thread_monitor_exit+0x94>)
    a890:	480a      	ldr	r0, [pc, #40]	; (a8bc <z_thread_monitor_exit+0xb0>)
    a892:	f004 fce4 	bl	f25e <assert_print>
    a896:	21b9      	movs	r1, #185	; 0xb9
    a898:	4620      	mov	r0, r4
    a89a:	f004 fcd9 	bl	f250 <assert_post_action>
    a89e:	e7ea      	b.n	a876 <z_thread_monitor_exit+0x6a>
    a8a0:	2000d508 	.word	0x2000d508
    a8a4:	2000d4dc 	.word	0x2000d4dc
    a8a8:	000117b8 	.word	0x000117b8
    a8ac:	00011818 	.word	0x00011818
    a8b0:	0001160c 	.word	0x0001160c
    a8b4:	00011830 	.word	0x00011830
    a8b8:	000117e8 	.word	0x000117e8
    a8bc:	00011800 	.word	0x00011800

0000a8c0 <z_setup_new_thread>:
{
    a8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8c4:	b085      	sub	sp, #20
    a8c6:	4604      	mov	r4, r0
    a8c8:	460e      	mov	r6, r1
    a8ca:	4690      	mov	r8, r2
    a8cc:	461d      	mov	r5, r3
    a8ce:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    a8d2:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    a8d6:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    a8d8:	2f0f      	cmp	r7, #15
    a8da:	d05e      	beq.n	a99a <z_setup_new_thread+0xda>
    a8dc:	f107 0310 	add.w	r3, r7, #16
    a8e0:	2b1e      	cmp	r3, #30
    a8e2:	d85e      	bhi.n	a9a2 <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    a8e4:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    a8e8:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    a8ea:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    a8ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a8ee:	2204      	movs	r2, #4
    a8f0:	4639      	mov	r1, r7
    a8f2:	4620      	mov	r0, r4
    a8f4:	f005 fe5e 	bl	105b4 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    a8f8:	4642      	mov	r2, r8
    a8fa:	4631      	mov	r1, r6
    a8fc:	4620      	mov	r0, r4
    a8fe:	f005 fe3b 	bl	10578 <setup_thread_stack>
    a902:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a904:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a906:	9302      	str	r3, [sp, #8]
    a908:	f8cd a004 	str.w	sl, [sp, #4]
    a90c:	f8cd b000 	str.w	fp, [sp]
    a910:	462b      	mov	r3, r5
    a912:	4602      	mov	r2, r0
    a914:	4631      	mov	r1, r6
    a916:	4620      	mov	r0, r4
    a918:	f7fb fb14 	bl	5f44 <arch_new_thread>
	new_thread->init_data = NULL;
    a91c:	2300      	movs	r3, #0
    a91e:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    a920:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    a922:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    a926:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    a92a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a92c:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    a92e:	f04f 0320 	mov.w	r3, #32
    a932:	f3ef 8611 	mrs	r6, BASEPRI
    a936:	f383 8812 	msr	BASEPRI_MAX, r3
    a93a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a93e:	4837      	ldr	r0, [pc, #220]	; (aa1c <z_setup_new_thread+0x15c>)
    a940:	f7ff ff3c 	bl	a7bc <z_spin_lock_valid>
    a944:	2800      	cmp	r0, #0
    a946:	d042      	beq.n	a9ce <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    a948:	4d34      	ldr	r5, [pc, #208]	; (aa1c <z_setup_new_thread+0x15c>)
    a94a:	4628      	mov	r0, r5
    a94c:	f7ff ff56 	bl	a7fc <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    a950:	4b33      	ldr	r3, [pc, #204]	; (aa20 <z_setup_new_thread+0x160>)
    a952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a954:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    a956:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a958:	4628      	mov	r0, r5
    a95a:	f7ff ff3f 	bl	a7dc <z_spin_unlock_valid>
    a95e:	2800      	cmp	r0, #0
    a960:	d045      	beq.n	a9ee <z_setup_new_thread+0x12e>
	__asm__ volatile(
    a962:	f386 8811 	msr	BASEPRI, r6
    a966:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    a96a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a96c:	2b00      	cmp	r3, #0
    a96e:	d04e      	beq.n	aa0e <z_setup_new_thread+0x14e>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    a970:	221f      	movs	r2, #31
    a972:	4619      	mov	r1, r3
    a974:	f104 0074 	add.w	r0, r4, #116	; 0x74
    a978:	f005 ff20 	bl	107bc <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    a97c:	2300      	movs	r3, #0
    a97e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    a982:	4b27      	ldr	r3, [pc, #156]	; (aa20 <z_setup_new_thread+0x160>)
    a984:	689b      	ldr	r3, [r3, #8]
    a986:	2b00      	cmp	r3, #0
    a988:	d045      	beq.n	aa16 <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    a98a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    a98e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    a992:	4638      	mov	r0, r7
    a994:	b005      	add	sp, #20
    a996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    a99a:	4b22      	ldr	r3, [pc, #136]	; (aa24 <z_setup_new_thread+0x164>)
    a99c:	429d      	cmp	r5, r3
    a99e:	d19d      	bne.n	a8dc <z_setup_new_thread+0x1c>
    a9a0:	e7a0      	b.n	a8e4 <z_setup_new_thread+0x24>
    a9a2:	f8df 9084 	ldr.w	r9, [pc, #132]	; aa28 <z_setup_new_thread+0x168>
    a9a6:	f240 13ff 	movw	r3, #511	; 0x1ff
    a9aa:	464a      	mov	r2, r9
    a9ac:	491f      	ldr	r1, [pc, #124]	; (aa2c <z_setup_new_thread+0x16c>)
    a9ae:	4820      	ldr	r0, [pc, #128]	; (aa30 <z_setup_new_thread+0x170>)
    a9b0:	f004 fc55 	bl	f25e <assert_print>
    a9b4:	f06f 030f 	mvn.w	r3, #15
    a9b8:	220e      	movs	r2, #14
    a9ba:	4639      	mov	r1, r7
    a9bc:	481d      	ldr	r0, [pc, #116]	; (aa34 <z_setup_new_thread+0x174>)
    a9be:	f004 fc4e 	bl	f25e <assert_print>
    a9c2:	f240 11ff 	movw	r1, #511	; 0x1ff
    a9c6:	4648      	mov	r0, r9
    a9c8:	f004 fc42 	bl	f250 <assert_post_action>
    a9cc:	e78a      	b.n	a8e4 <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a9ce:	4d1a      	ldr	r5, [pc, #104]	; (aa38 <z_setup_new_thread+0x178>)
    a9d0:	238e      	movs	r3, #142	; 0x8e
    a9d2:	462a      	mov	r2, r5
    a9d4:	4919      	ldr	r1, [pc, #100]	; (aa3c <z_setup_new_thread+0x17c>)
    a9d6:	4816      	ldr	r0, [pc, #88]	; (aa30 <z_setup_new_thread+0x170>)
    a9d8:	f004 fc41 	bl	f25e <assert_print>
    a9dc:	490f      	ldr	r1, [pc, #60]	; (aa1c <z_setup_new_thread+0x15c>)
    a9de:	4818      	ldr	r0, [pc, #96]	; (aa40 <z_setup_new_thread+0x180>)
    a9e0:	f004 fc3d 	bl	f25e <assert_print>
    a9e4:	218e      	movs	r1, #142	; 0x8e
    a9e6:	4628      	mov	r0, r5
    a9e8:	f004 fc32 	bl	f250 <assert_post_action>
    a9ec:	e7ac      	b.n	a948 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a9ee:	4d12      	ldr	r5, [pc, #72]	; (aa38 <z_setup_new_thread+0x178>)
    a9f0:	23b9      	movs	r3, #185	; 0xb9
    a9f2:	462a      	mov	r2, r5
    a9f4:	4913      	ldr	r1, [pc, #76]	; (aa44 <z_setup_new_thread+0x184>)
    a9f6:	480e      	ldr	r0, [pc, #56]	; (aa30 <z_setup_new_thread+0x170>)
    a9f8:	f004 fc31 	bl	f25e <assert_print>
    a9fc:	4907      	ldr	r1, [pc, #28]	; (aa1c <z_setup_new_thread+0x15c>)
    a9fe:	4812      	ldr	r0, [pc, #72]	; (aa48 <z_setup_new_thread+0x188>)
    aa00:	f004 fc2d 	bl	f25e <assert_print>
    aa04:	21b9      	movs	r1, #185	; 0xb9
    aa06:	4628      	mov	r0, r5
    aa08:	f004 fc22 	bl	f250 <assert_post_action>
    aa0c:	e7a9      	b.n	a962 <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    aa0e:	2300      	movs	r3, #0
    aa10:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    aa14:	e7b5      	b.n	a982 <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    aa16:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    aa1a:	e7ba      	b.n	a992 <z_setup_new_thread+0xd2>
    aa1c:	2000d508 	.word	0x2000d508
    aa20:	2000d4dc 	.word	0x2000d4dc
    aa24:	0000abd5 	.word	0x0000abd5
    aa28:	00012e14 	.word	0x00012e14
    aa2c:	00012e6c 	.word	0x00012e6c
    aa30:	0001160c 	.word	0x0001160c
    aa34:	00012eec 	.word	0x00012eec
    aa38:	000117b8 	.word	0x000117b8
    aa3c:	00011818 	.word	0x00011818
    aa40:	00011830 	.word	0x00011830
    aa44:	000117e8 	.word	0x000117e8
    aa48:	00011800 	.word	0x00011800

0000aa4c <z_impl_k_thread_create>:
{
    aa4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    aa50:	b086      	sub	sp, #24
    aa52:	4604      	mov	r4, r0
    aa54:	460d      	mov	r5, r1
    aa56:	4616      	mov	r6, r2
    aa58:	461f      	mov	r7, r3
    aa5a:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    aa5e:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    aa62:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    aa66:	b9db      	cbnz	r3, aaa0 <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    aa68:	2300      	movs	r3, #0
    aa6a:	9305      	str	r3, [sp, #20]
    aa6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    aa6e:	9304      	str	r3, [sp, #16]
    aa70:	9b11      	ldr	r3, [sp, #68]	; 0x44
    aa72:	9303      	str	r3, [sp, #12]
    aa74:	9b10      	ldr	r3, [sp, #64]	; 0x40
    aa76:	9302      	str	r3, [sp, #8]
    aa78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aa7a:	9301      	str	r3, [sp, #4]
    aa7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aa7e:	9300      	str	r3, [sp, #0]
    aa80:	463b      	mov	r3, r7
    aa82:	4632      	mov	r2, r6
    aa84:	4629      	mov	r1, r5
    aa86:	4620      	mov	r0, r4
    aa88:	f7ff ff1a 	bl	a8c0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    aa8c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    aa90:	bf08      	it	eq
    aa92:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    aa96:	d115      	bne.n	aac4 <z_impl_k_thread_create+0x78>
}
    aa98:	4620      	mov	r0, r4
    aa9a:	b006      	add	sp, #24
    aa9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    aaa0:	f8df a02c 	ldr.w	sl, [pc, #44]	; aad0 <z_impl_k_thread_create+0x84>
    aaa4:	f240 236e 	movw	r3, #622	; 0x26e
    aaa8:	4652      	mov	r2, sl
    aaaa:	490a      	ldr	r1, [pc, #40]	; (aad4 <z_impl_k_thread_create+0x88>)
    aaac:	480a      	ldr	r0, [pc, #40]	; (aad8 <z_impl_k_thread_create+0x8c>)
    aaae:	f004 fbd6 	bl	f25e <assert_print>
    aab2:	480a      	ldr	r0, [pc, #40]	; (aadc <z_impl_k_thread_create+0x90>)
    aab4:	f004 fbd3 	bl	f25e <assert_print>
    aab8:	f240 216e 	movw	r1, #622	; 0x26e
    aabc:	4650      	mov	r0, sl
    aabe:	f004 fbc7 	bl	f250 <assert_post_action>
    aac2:	e7d1      	b.n	aa68 <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    aac4:	464a      	mov	r2, r9
    aac6:	4643      	mov	r3, r8
    aac8:	4620      	mov	r0, r4
    aaca:	f7ff fe69 	bl	a7a0 <schedule_new_thread>
    aace:	e7e3      	b.n	aa98 <z_impl_k_thread_create+0x4c>
    aad0:	00012e14 	.word	0x00012e14
    aad4:	00012f20 	.word	0x00012f20
    aad8:	0001160c 	.word	0x0001160c
    aadc:	00012f34 	.word	0x00012f34

0000aae0 <z_init_static_threads>:
{
    aae0:	b530      	push	{r4, r5, lr}
    aae2:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    aae4:	4c35      	ldr	r4, [pc, #212]	; (abbc <z_init_static_threads+0xdc>)
    aae6:	e017      	b.n	ab18 <z_init_static_threads+0x38>
    aae8:	4b35      	ldr	r3, [pc, #212]	; (abc0 <z_init_static_threads+0xe0>)
    aaea:	429c      	cmp	r4, r3
    aaec:	d228      	bcs.n	ab40 <z_init_static_threads+0x60>
		z_setup_new_thread(
    aaee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    aaf0:	9305      	str	r3, [sp, #20]
    aaf2:	6a23      	ldr	r3, [r4, #32]
    aaf4:	9304      	str	r3, [sp, #16]
    aaf6:	69e3      	ldr	r3, [r4, #28]
    aaf8:	9303      	str	r3, [sp, #12]
    aafa:	69a3      	ldr	r3, [r4, #24]
    aafc:	9302      	str	r3, [sp, #8]
    aafe:	6963      	ldr	r3, [r4, #20]
    ab00:	9301      	str	r3, [sp, #4]
    ab02:	6923      	ldr	r3, [r4, #16]
    ab04:	9300      	str	r3, [sp, #0]
    ab06:	68e3      	ldr	r3, [r4, #12]
    ab08:	68a2      	ldr	r2, [r4, #8]
    ab0a:	6861      	ldr	r1, [r4, #4]
    ab0c:	6820      	ldr	r0, [r4, #0]
    ab0e:	f7ff fed7 	bl	a8c0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    ab12:	6823      	ldr	r3, [r4, #0]
    ab14:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    ab16:	3430      	adds	r4, #48	; 0x30
    ab18:	4b29      	ldr	r3, [pc, #164]	; (abc0 <z_init_static_threads+0xe0>)
    ab1a:	429c      	cmp	r4, r3
    ab1c:	d9e4      	bls.n	aae8 <z_init_static_threads+0x8>
    ab1e:	4d29      	ldr	r5, [pc, #164]	; (abc4 <z_init_static_threads+0xe4>)
    ab20:	f240 23d5 	movw	r3, #725	; 0x2d5
    ab24:	462a      	mov	r2, r5
    ab26:	4928      	ldr	r1, [pc, #160]	; (abc8 <z_init_static_threads+0xe8>)
    ab28:	4828      	ldr	r0, [pc, #160]	; (abcc <z_init_static_threads+0xec>)
    ab2a:	f004 fb98 	bl	f25e <assert_print>
    ab2e:	4828      	ldr	r0, [pc, #160]	; (abd0 <z_init_static_threads+0xf0>)
    ab30:	f004 fb95 	bl	f25e <assert_print>
    ab34:	f240 21d5 	movw	r1, #725	; 0x2d5
    ab38:	4628      	mov	r0, r5
    ab3a:	f004 fb89 	bl	f250 <assert_post_action>
    ab3e:	e7d3      	b.n	aae8 <z_init_static_threads+0x8>
	k_sched_lock();
    ab40:	f000 fca6 	bl	b490 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    ab44:	4c1d      	ldr	r4, [pc, #116]	; (abbc <z_init_static_threads+0xdc>)
    ab46:	e000      	b.n	ab4a <z_init_static_threads+0x6a>
    ab48:	3430      	adds	r4, #48	; 0x30
    ab4a:	4b1d      	ldr	r3, [pc, #116]	; (abc0 <z_init_static_threads+0xe0>)
    ab4c:	429c      	cmp	r4, r3
    ab4e:	d81f      	bhi.n	ab90 <z_init_static_threads+0xb0>
    ab50:	4b1b      	ldr	r3, [pc, #108]	; (abc0 <z_init_static_threads+0xe0>)
    ab52:	429c      	cmp	r4, r3
    ab54:	d22d      	bcs.n	abb2 <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    ab56:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ab58:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ab5c:	d0f4      	beq.n	ab48 <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    ab5e:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    ab60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    ab64:	17c1      	asrs	r1, r0, #31
    ab66:	03c9      	lsls	r1, r1, #15
    ab68:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    ab6c:	03c0      	lsls	r0, r0, #15
    ab6e:	f240 33e7 	movw	r3, #999	; 0x3e7
    ab72:	18c0      	adds	r0, r0, r3
    ab74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ab78:	f04f 0300 	mov.w	r3, #0
    ab7c:	f141 0100 	adc.w	r1, r1, #0
    ab80:	f7f5 ff2c 	bl	9dc <__aeabi_uldivmod>
    ab84:	4602      	mov	r2, r0
    ab86:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    ab88:	4628      	mov	r0, r5
    ab8a:	f7ff fe09 	bl	a7a0 <schedule_new_thread>
    ab8e:	e7db      	b.n	ab48 <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    ab90:	4d0c      	ldr	r5, [pc, #48]	; (abc4 <z_init_static_threads+0xe4>)
    ab92:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    ab96:	462a      	mov	r2, r5
    ab98:	490b      	ldr	r1, [pc, #44]	; (abc8 <z_init_static_threads+0xe8>)
    ab9a:	480c      	ldr	r0, [pc, #48]	; (abcc <z_init_static_threads+0xec>)
    ab9c:	f004 fb5f 	bl	f25e <assert_print>
    aba0:	480b      	ldr	r0, [pc, #44]	; (abd0 <z_init_static_threads+0xf0>)
    aba2:	f004 fb5c 	bl	f25e <assert_print>
    aba6:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    abaa:	4628      	mov	r0, r5
    abac:	f004 fb50 	bl	f250 <assert_post_action>
    abb0:	e7ce      	b.n	ab50 <z_init_static_threads+0x70>
	k_sched_unlock();
    abb2:	f001 f9f9 	bl	bfa8 <k_sched_unlock>
}
    abb6:	b007      	add	sp, #28
    abb8:	bd30      	pop	{r4, r5, pc}
    abba:	bf00      	nop
    abbc:	200041e0 	.word	0x200041e0
    abc0:	200041e0 	.word	0x200041e0
    abc4:	00012e14 	.word	0x00012e14
    abc8:	00012f5c 	.word	0x00012f5c
    abcc:	0001160c 	.word	0x0001160c
    abd0:	00012df4 	.word	0x00012df4

0000abd4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    abd4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    abd6:	4b14      	ldr	r3, [pc, #80]	; (ac28 <idle+0x54>)
    abd8:	689b      	ldr	r3, [r3, #8]
    abda:	f993 300e 	ldrsb.w	r3, [r3, #14]
    abde:	2b00      	cmp	r3, #0
    abe0:	da0d      	bge.n	abfe <idle+0x2a>
    abe2:	4c12      	ldr	r4, [pc, #72]	; (ac2c <idle+0x58>)
    abe4:	2327      	movs	r3, #39	; 0x27
    abe6:	4622      	mov	r2, r4
    abe8:	4911      	ldr	r1, [pc, #68]	; (ac30 <idle+0x5c>)
    abea:	4812      	ldr	r0, [pc, #72]	; (ac34 <idle+0x60>)
    abec:	f004 fb37 	bl	f25e <assert_print>
    abf0:	2127      	movs	r1, #39	; 0x27
    abf2:	4620      	mov	r0, r4
    abf4:	f004 fb2c 	bl	f250 <assert_post_action>
    abf8:	e001      	b.n	abfe <idle+0x2a>
	arch_cpu_idle();
    abfa:	f7fb f877 	bl	5cec <arch_cpu_idle>
	__asm__ volatile(
    abfe:	f04f 0220 	mov.w	r2, #32
    ac02:	f3ef 8311 	mrs	r3, BASEPRI
    ac06:	f382 8812 	msr	BASEPRI_MAX, r2
    ac0a:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    ac0e:	f001 ff7d 	bl	cb0c <z_get_next_timeout_expiry>
    ac12:	4b05      	ldr	r3, [pc, #20]	; (ac28 <idle+0x54>)
    ac14:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    ac16:	4b08      	ldr	r3, [pc, #32]	; (ac38 <idle+0x64>)
    ac18:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    ac1a:	2b00      	cmp	r3, #0
    ac1c:	d0ed      	beq.n	abfa <idle+0x26>
    ac1e:	f7fa fe2d 	bl	587c <pm_system_suspend>
    ac22:	2800      	cmp	r0, #0
    ac24:	d1eb      	bne.n	abfe <idle+0x2a>
    ac26:	e7e8      	b.n	abfa <idle+0x26>
    ac28:	2000d4dc 	.word	0x2000d4dc
    ac2c:	00012f8c 	.word	0x00012f8c
    ac30:	00012fb0 	.word	0x00012fb0
    ac34:	0001160c 	.word	0x0001160c
    ac38:	2000d71d 	.word	0x2000d71d

0000ac3c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    ac3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ac40:	b083      	sub	sp, #12
    ac42:	4604      	mov	r4, r0
    ac44:	4616      	mov	r6, r2
    ac46:	461d      	mov	r5, r3
    ac48:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    ac4c:	2900      	cmp	r1, #0
    ac4e:	d12b      	bne.n	aca8 <z_impl_k_mutex_lock+0x6c>
    ac50:	f04f 0320 	mov.w	r3, #32
    ac54:	f3ef 8711 	mrs	r7, BASEPRI
    ac58:	f383 8812 	msr	BASEPRI_MAX, r3
    ac5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ac60:	487b      	ldr	r0, [pc, #492]	; (ae50 <z_impl_k_mutex_lock+0x214>)
    ac62:	f7ff fdab 	bl	a7bc <z_spin_lock_valid>
    ac66:	2800      	cmp	r0, #0
    ac68:	d02d      	beq.n	acc6 <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    ac6a:	4879      	ldr	r0, [pc, #484]	; (ae50 <z_impl_k_mutex_lock+0x214>)
    ac6c:	f7ff fdc6 	bl	a7fc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    ac70:	68e1      	ldr	r1, [r4, #12]
    ac72:	2900      	cmp	r1, #0
    ac74:	d138      	bne.n	ace8 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    ac76:	2900      	cmp	r1, #0
    ac78:	d17d      	bne.n	ad76 <z_impl_k_mutex_lock+0x13a>
    ac7a:	4b76      	ldr	r3, [pc, #472]	; (ae54 <z_impl_k_mutex_lock+0x218>)
    ac7c:	689b      	ldr	r3, [r3, #8]
    ac7e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    ac82:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    ac84:	3101      	adds	r1, #1
    ac86:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    ac88:	4b72      	ldr	r3, [pc, #456]	; (ae54 <z_impl_k_mutex_lock+0x218>)
    ac8a:	689b      	ldr	r3, [r3, #8]
    ac8c:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ac8e:	4870      	ldr	r0, [pc, #448]	; (ae50 <z_impl_k_mutex_lock+0x214>)
    ac90:	f7ff fda4 	bl	a7dc <z_spin_unlock_valid>
    ac94:	2800      	cmp	r0, #0
    ac96:	d070      	beq.n	ad7a <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    ac98:	f387 8811 	msr	BASEPRI, r7
    ac9c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    aca0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    aca2:	b003      	add	sp, #12
    aca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    aca8:	4f6b      	ldr	r7, [pc, #428]	; (ae58 <z_impl_k_mutex_lock+0x21c>)
    acaa:	2365      	movs	r3, #101	; 0x65
    acac:	463a      	mov	r2, r7
    acae:	496b      	ldr	r1, [pc, #428]	; (ae5c <z_impl_k_mutex_lock+0x220>)
    acb0:	486b      	ldr	r0, [pc, #428]	; (ae60 <z_impl_k_mutex_lock+0x224>)
    acb2:	f004 fad4 	bl	f25e <assert_print>
    acb6:	486b      	ldr	r0, [pc, #428]	; (ae64 <z_impl_k_mutex_lock+0x228>)
    acb8:	f004 fad1 	bl	f25e <assert_print>
    acbc:	2165      	movs	r1, #101	; 0x65
    acbe:	4638      	mov	r0, r7
    acc0:	f004 fac6 	bl	f250 <assert_post_action>
    acc4:	e7c4      	b.n	ac50 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    acc6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; ae68 <z_impl_k_mutex_lock+0x22c>
    acca:	238e      	movs	r3, #142	; 0x8e
    accc:	4642      	mov	r2, r8
    acce:	4967      	ldr	r1, [pc, #412]	; (ae6c <z_impl_k_mutex_lock+0x230>)
    acd0:	4863      	ldr	r0, [pc, #396]	; (ae60 <z_impl_k_mutex_lock+0x224>)
    acd2:	f004 fac4 	bl	f25e <assert_print>
    acd6:	495e      	ldr	r1, [pc, #376]	; (ae50 <z_impl_k_mutex_lock+0x214>)
    acd8:	4865      	ldr	r0, [pc, #404]	; (ae70 <z_impl_k_mutex_lock+0x234>)
    acda:	f004 fac0 	bl	f25e <assert_print>
    acde:	218e      	movs	r1, #142	; 0x8e
    ace0:	4640      	mov	r0, r8
    ace2:	f004 fab5 	bl	f250 <assert_post_action>
    ace6:	e7c0      	b.n	ac6a <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    ace8:	68a2      	ldr	r2, [r4, #8]
    acea:	4b5a      	ldr	r3, [pc, #360]	; (ae54 <z_impl_k_mutex_lock+0x218>)
    acec:	689b      	ldr	r3, [r3, #8]
    acee:	429a      	cmp	r2, r3
    acf0:	d0c1      	beq.n	ac76 <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    acf2:	ea55 0106 	orrs.w	r1, r5, r6
    acf6:	bf0c      	ite	eq
    acf8:	f04f 0801 	moveq.w	r8, #1
    acfc:	f04f 0800 	movne.w	r8, #0
    ad00:	d04b      	beq.n	ad9a <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    ad02:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    ad06:	4649      	mov	r1, r9
    ad08:	f993 000e 	ldrsb.w	r0, [r3, #14]
    ad0c:	f005 fc63 	bl	105d6 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    ad10:	4581      	cmp	r9, r0
    ad12:	dc5d      	bgt.n	add0 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    ad14:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    ad18:	9600      	str	r6, [sp, #0]
    ad1a:	9501      	str	r5, [sp, #4]
    ad1c:	4622      	mov	r2, r4
    ad1e:	4639      	mov	r1, r7
    ad20:	484b      	ldr	r0, [pc, #300]	; (ae50 <z_impl_k_mutex_lock+0x214>)
    ad22:	f000 ffe7 	bl	bcf4 <z_pend_curr>
	if (got_mutex == 0) {
    ad26:	2800      	cmp	r0, #0
    ad28:	d0bb      	beq.n	aca2 <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    ad2a:	f04f 0320 	mov.w	r3, #32
    ad2e:	f3ef 8511 	mrs	r5, BASEPRI
    ad32:	f383 8812 	msr	BASEPRI_MAX, r3
    ad36:	f3bf 8f6f 	isb	sy
    ad3a:	4845      	ldr	r0, [pc, #276]	; (ae50 <z_impl_k_mutex_lock+0x214>)
    ad3c:	f7ff fd3e 	bl	a7bc <z_spin_lock_valid>
    ad40:	2800      	cmp	r0, #0
    ad42:	d04b      	beq.n	addc <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    ad44:	4842      	ldr	r0, [pc, #264]	; (ae50 <z_impl_k_mutex_lock+0x214>)
    ad46:	f7ff fd59 	bl	a7fc <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    ad4a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ad4c:	42a3      	cmp	r3, r4
    ad4e:	d055      	beq.n	adfc <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    ad50:	2b00      	cmp	r3, #0
    ad52:	d053      	beq.n	adfc <z_impl_k_mutex_lock+0x1c0>
    ad54:	6921      	ldr	r1, [r4, #16]
    ad56:	f993 000e 	ldrsb.w	r0, [r3, #14]
    ad5a:	f005 fc3c 	bl	105d6 <new_prio_for_inheritance>
    ad5e:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    ad60:	4620      	mov	r0, r4
    ad62:	f005 fc43 	bl	105ec <adjust_owner_prio>
    ad66:	2800      	cmp	r0, #0
    ad68:	d14a      	bne.n	ae00 <z_impl_k_mutex_lock+0x1c4>
    ad6a:	f1b9 0f00 	cmp.w	r9, #0
    ad6e:	d049      	beq.n	ae04 <z_impl_k_mutex_lock+0x1c8>
    ad70:	f04f 0801 	mov.w	r8, #1
    ad74:	e046      	b.n	ae04 <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    ad76:	6923      	ldr	r3, [r4, #16]
    ad78:	e783      	b.n	ac82 <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ad7a:	4c3b      	ldr	r4, [pc, #236]	; (ae68 <z_impl_k_mutex_lock+0x22c>)
    ad7c:	23b9      	movs	r3, #185	; 0xb9
    ad7e:	4622      	mov	r2, r4
    ad80:	493c      	ldr	r1, [pc, #240]	; (ae74 <z_impl_k_mutex_lock+0x238>)
    ad82:	4837      	ldr	r0, [pc, #220]	; (ae60 <z_impl_k_mutex_lock+0x224>)
    ad84:	f004 fa6b 	bl	f25e <assert_print>
    ad88:	4931      	ldr	r1, [pc, #196]	; (ae50 <z_impl_k_mutex_lock+0x214>)
    ad8a:	483b      	ldr	r0, [pc, #236]	; (ae78 <z_impl_k_mutex_lock+0x23c>)
    ad8c:	f004 fa67 	bl	f25e <assert_print>
    ad90:	21b9      	movs	r1, #185	; 0xb9
    ad92:	4620      	mov	r0, r4
    ad94:	f004 fa5c 	bl	f250 <assert_post_action>
    ad98:	e77e      	b.n	ac98 <z_impl_k_mutex_lock+0x5c>
    ad9a:	482d      	ldr	r0, [pc, #180]	; (ae50 <z_impl_k_mutex_lock+0x214>)
    ad9c:	f7ff fd1e 	bl	a7dc <z_spin_unlock_valid>
    ada0:	b130      	cbz	r0, adb0 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    ada2:	f387 8811 	msr	BASEPRI, r7
    ada6:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    adaa:	f06f 000f 	mvn.w	r0, #15
    adae:	e778      	b.n	aca2 <z_impl_k_mutex_lock+0x66>
    adb0:	4c2d      	ldr	r4, [pc, #180]	; (ae68 <z_impl_k_mutex_lock+0x22c>)
    adb2:	23b9      	movs	r3, #185	; 0xb9
    adb4:	4622      	mov	r2, r4
    adb6:	492f      	ldr	r1, [pc, #188]	; (ae74 <z_impl_k_mutex_lock+0x238>)
    adb8:	4829      	ldr	r0, [pc, #164]	; (ae60 <z_impl_k_mutex_lock+0x224>)
    adba:	f004 fa50 	bl	f25e <assert_print>
    adbe:	4924      	ldr	r1, [pc, #144]	; (ae50 <z_impl_k_mutex_lock+0x214>)
    adc0:	482d      	ldr	r0, [pc, #180]	; (ae78 <z_impl_k_mutex_lock+0x23c>)
    adc2:	f004 fa4c 	bl	f25e <assert_print>
    adc6:	21b9      	movs	r1, #185	; 0xb9
    adc8:	4620      	mov	r0, r4
    adca:	f004 fa41 	bl	f250 <assert_post_action>
    adce:	e7e8      	b.n	ada2 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    add0:	4601      	mov	r1, r0
    add2:	4620      	mov	r0, r4
    add4:	f005 fc0a 	bl	105ec <adjust_owner_prio>
    add8:	4681      	mov	r9, r0
    adda:	e79d      	b.n	ad18 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    addc:	4e22      	ldr	r6, [pc, #136]	; (ae68 <z_impl_k_mutex_lock+0x22c>)
    adde:	238e      	movs	r3, #142	; 0x8e
    ade0:	4632      	mov	r2, r6
    ade2:	4922      	ldr	r1, [pc, #136]	; (ae6c <z_impl_k_mutex_lock+0x230>)
    ade4:	481e      	ldr	r0, [pc, #120]	; (ae60 <z_impl_k_mutex_lock+0x224>)
    ade6:	f004 fa3a 	bl	f25e <assert_print>
    adea:	4919      	ldr	r1, [pc, #100]	; (ae50 <z_impl_k_mutex_lock+0x214>)
    adec:	4820      	ldr	r0, [pc, #128]	; (ae70 <z_impl_k_mutex_lock+0x234>)
    adee:	f004 fa36 	bl	f25e <assert_print>
    adf2:	218e      	movs	r1, #142	; 0x8e
    adf4:	4630      	mov	r0, r6
    adf6:	f004 fa2b 	bl	f250 <assert_post_action>
    adfa:	e7a3      	b.n	ad44 <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    adfc:	6921      	ldr	r1, [r4, #16]
    adfe:	e7af      	b.n	ad60 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    ae00:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    ae04:	f1b8 0f00 	cmp.w	r8, #0
    ae08:	d006      	beq.n	ae18 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    ae0a:	4629      	mov	r1, r5
    ae0c:	4810      	ldr	r0, [pc, #64]	; (ae50 <z_impl_k_mutex_lock+0x214>)
    ae0e:	f000 faf1 	bl	b3f4 <z_reschedule>
	return -EAGAIN;
    ae12:	f06f 000a 	mvn.w	r0, #10
    ae16:	e744      	b.n	aca2 <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ae18:	480d      	ldr	r0, [pc, #52]	; (ae50 <z_impl_k_mutex_lock+0x214>)
    ae1a:	f7ff fcdf 	bl	a7dc <z_spin_unlock_valid>
    ae1e:	b130      	cbz	r0, ae2e <z_impl_k_mutex_lock+0x1f2>
    ae20:	f385 8811 	msr	BASEPRI, r5
    ae24:	f3bf 8f6f 	isb	sy
    ae28:	f06f 000a 	mvn.w	r0, #10
    ae2c:	e739      	b.n	aca2 <z_impl_k_mutex_lock+0x66>
    ae2e:	4c0e      	ldr	r4, [pc, #56]	; (ae68 <z_impl_k_mutex_lock+0x22c>)
    ae30:	23b9      	movs	r3, #185	; 0xb9
    ae32:	4622      	mov	r2, r4
    ae34:	490f      	ldr	r1, [pc, #60]	; (ae74 <z_impl_k_mutex_lock+0x238>)
    ae36:	480a      	ldr	r0, [pc, #40]	; (ae60 <z_impl_k_mutex_lock+0x224>)
    ae38:	f004 fa11 	bl	f25e <assert_print>
    ae3c:	4904      	ldr	r1, [pc, #16]	; (ae50 <z_impl_k_mutex_lock+0x214>)
    ae3e:	480e      	ldr	r0, [pc, #56]	; (ae78 <z_impl_k_mutex_lock+0x23c>)
    ae40:	f004 fa0d 	bl	f25e <assert_print>
    ae44:	21b9      	movs	r1, #185	; 0xb9
    ae46:	4620      	mov	r0, r4
    ae48:	f004 fa02 	bl	f250 <assert_post_action>
    ae4c:	e7e8      	b.n	ae20 <z_impl_k_mutex_lock+0x1e4>
    ae4e:	bf00      	nop
    ae50:	2000d50c 	.word	0x2000d50c
    ae54:	2000d4dc 	.word	0x2000d4dc
    ae58:	00012fd8 	.word	0x00012fd8
    ae5c:	00012f20 	.word	0x00012f20
    ae60:	0001160c 	.word	0x0001160c
    ae64:	00012ffc 	.word	0x00012ffc
    ae68:	000117b8 	.word	0x000117b8
    ae6c:	00011818 	.word	0x00011818
    ae70:	00011830 	.word	0x00011830
    ae74:	000117e8 	.word	0x000117e8
    ae78:	00011800 	.word	0x00011800

0000ae7c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    ae7c:	b570      	push	{r4, r5, r6, lr}
    ae7e:	4604      	mov	r4, r0
    ae80:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    ae84:	bb03      	cbnz	r3, aec8 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    ae86:	68a3      	ldr	r3, [r4, #8]
    ae88:	2b00      	cmp	r3, #0
    ae8a:	f000 80a6 	beq.w	afda <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    ae8e:	4a56      	ldr	r2, [pc, #344]	; (afe8 <z_impl_k_mutex_unlock+0x16c>)
    ae90:	6892      	ldr	r2, [r2, #8]
    ae92:	4293      	cmp	r3, r2
    ae94:	f040 80a4 	bne.w	afe0 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    ae98:	68e3      	ldr	r3, [r4, #12]
    ae9a:	b323      	cbz	r3, aee6 <z_impl_k_mutex_unlock+0x6a>
    ae9c:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    aea0:	bb6b      	cbnz	r3, aefe <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    aea2:	4b51      	ldr	r3, [pc, #324]	; (afe8 <z_impl_k_mutex_unlock+0x16c>)
    aea4:	689b      	ldr	r3, [r3, #8]
    aea6:	7bdb      	ldrb	r3, [r3, #15]
    aea8:	2b01      	cmp	r3, #1
    aeaa:	d037      	beq.n	af1c <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    aeac:	4b4e      	ldr	r3, [pc, #312]	; (afe8 <z_impl_k_mutex_unlock+0x16c>)
    aeae:	689a      	ldr	r2, [r3, #8]
    aeb0:	7bd3      	ldrb	r3, [r2, #15]
    aeb2:	3b01      	subs	r3, #1
    aeb4:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    aeb6:	68e3      	ldr	r3, [r4, #12]
    aeb8:	2b01      	cmp	r3, #1
    aeba:	d93e      	bls.n	af3a <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    aebc:	3b01      	subs	r3, #1
    aebe:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    aec0:	f001 f872 	bl	bfa8 <k_sched_unlock>

	return 0;
    aec4:	2000      	movs	r0, #0
}
    aec6:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    aec8:	4d48      	ldr	r5, [pc, #288]	; (afec <z_impl_k_mutex_unlock+0x170>)
    aeca:	23c7      	movs	r3, #199	; 0xc7
    aecc:	462a      	mov	r2, r5
    aece:	4948      	ldr	r1, [pc, #288]	; (aff0 <z_impl_k_mutex_unlock+0x174>)
    aed0:	4848      	ldr	r0, [pc, #288]	; (aff4 <z_impl_k_mutex_unlock+0x178>)
    aed2:	f004 f9c4 	bl	f25e <assert_print>
    aed6:	4848      	ldr	r0, [pc, #288]	; (aff8 <z_impl_k_mutex_unlock+0x17c>)
    aed8:	f004 f9c1 	bl	f25e <assert_print>
    aedc:	21c7      	movs	r1, #199	; 0xc7
    aede:	4628      	mov	r0, r5
    aee0:	f004 f9b6 	bl	f250 <assert_post_action>
    aee4:	e7cf      	b.n	ae86 <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    aee6:	4d41      	ldr	r5, [pc, #260]	; (afec <z_impl_k_mutex_unlock+0x170>)
    aee8:	23df      	movs	r3, #223	; 0xdf
    aeea:	462a      	mov	r2, r5
    aeec:	4943      	ldr	r1, [pc, #268]	; (affc <z_impl_k_mutex_unlock+0x180>)
    aeee:	4841      	ldr	r0, [pc, #260]	; (aff4 <z_impl_k_mutex_unlock+0x178>)
    aef0:	f004 f9b5 	bl	f25e <assert_print>
    aef4:	21df      	movs	r1, #223	; 0xdf
    aef6:	4628      	mov	r0, r5
    aef8:	f004 f9aa 	bl	f250 <assert_post_action>
    aefc:	e7ce      	b.n	ae9c <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    aefe:	4d40      	ldr	r5, [pc, #256]	; (b000 <z_impl_k_mutex_unlock+0x184>)
    af00:	23fd      	movs	r3, #253	; 0xfd
    af02:	462a      	mov	r2, r5
    af04:	493a      	ldr	r1, [pc, #232]	; (aff0 <z_impl_k_mutex_unlock+0x174>)
    af06:	483b      	ldr	r0, [pc, #236]	; (aff4 <z_impl_k_mutex_unlock+0x178>)
    af08:	f004 f9a9 	bl	f25e <assert_print>
    af0c:	483d      	ldr	r0, [pc, #244]	; (b004 <z_impl_k_mutex_unlock+0x188>)
    af0e:	f004 f9a6 	bl	f25e <assert_print>
    af12:	21fd      	movs	r1, #253	; 0xfd
    af14:	4628      	mov	r0, r5
    af16:	f004 f99b 	bl	f250 <assert_post_action>
    af1a:	e7c2      	b.n	aea2 <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    af1c:	4d38      	ldr	r5, [pc, #224]	; (b000 <z_impl_k_mutex_unlock+0x184>)
    af1e:	23fe      	movs	r3, #254	; 0xfe
    af20:	462a      	mov	r2, r5
    af22:	4939      	ldr	r1, [pc, #228]	; (b008 <z_impl_k_mutex_unlock+0x18c>)
    af24:	4833      	ldr	r0, [pc, #204]	; (aff4 <z_impl_k_mutex_unlock+0x178>)
    af26:	f004 f99a 	bl	f25e <assert_print>
    af2a:	4836      	ldr	r0, [pc, #216]	; (b004 <z_impl_k_mutex_unlock+0x188>)
    af2c:	f004 f997 	bl	f25e <assert_print>
    af30:	21fe      	movs	r1, #254	; 0xfe
    af32:	4628      	mov	r0, r5
    af34:	f004 f98c 	bl	f250 <assert_post_action>
    af38:	e7b8      	b.n	aeac <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    af3a:	f04f 0320 	mov.w	r3, #32
    af3e:	f3ef 8511 	mrs	r5, BASEPRI
    af42:	f383 8812 	msr	BASEPRI_MAX, r3
    af46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    af4a:	4830      	ldr	r0, [pc, #192]	; (b00c <z_impl_k_mutex_unlock+0x190>)
    af4c:	f7ff fc36 	bl	a7bc <z_spin_lock_valid>
    af50:	b1c0      	cbz	r0, af84 <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    af52:	482e      	ldr	r0, [pc, #184]	; (b00c <z_impl_k_mutex_unlock+0x190>)
    af54:	f7ff fc52 	bl	a7fc <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    af58:	6921      	ldr	r1, [r4, #16]
    af5a:	4620      	mov	r0, r4
    af5c:	f005 fb46 	bl	105ec <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    af60:	4620      	mov	r0, r4
    af62:	f001 f963 	bl	c22c <z_unpend_first_thread>
	mutex->owner = new_owner;
    af66:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    af68:	b1e0      	cbz	r0, afa4 <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    af6a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    af6e:	6123      	str	r3, [r4, #16]
    af70:	2300      	movs	r3, #0
    af72:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    af76:	f000 fce1 	bl	b93c <z_ready_thread>
		z_reschedule(&lock, key);
    af7a:	4629      	mov	r1, r5
    af7c:	4823      	ldr	r0, [pc, #140]	; (b00c <z_impl_k_mutex_unlock+0x190>)
    af7e:	f000 fa39 	bl	b3f4 <z_reschedule>
    af82:	e79d      	b.n	aec0 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    af84:	4e22      	ldr	r6, [pc, #136]	; (b010 <z_impl_k_mutex_unlock+0x194>)
    af86:	238e      	movs	r3, #142	; 0x8e
    af88:	4632      	mov	r2, r6
    af8a:	4922      	ldr	r1, [pc, #136]	; (b014 <z_impl_k_mutex_unlock+0x198>)
    af8c:	4819      	ldr	r0, [pc, #100]	; (aff4 <z_impl_k_mutex_unlock+0x178>)
    af8e:	f004 f966 	bl	f25e <assert_print>
    af92:	491e      	ldr	r1, [pc, #120]	; (b00c <z_impl_k_mutex_unlock+0x190>)
    af94:	4820      	ldr	r0, [pc, #128]	; (b018 <z_impl_k_mutex_unlock+0x19c>)
    af96:	f004 f962 	bl	f25e <assert_print>
    af9a:	218e      	movs	r1, #142	; 0x8e
    af9c:	4630      	mov	r0, r6
    af9e:	f004 f957 	bl	f250 <assert_post_action>
    afa2:	e7d6      	b.n	af52 <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    afa4:	2300      	movs	r3, #0
    afa6:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    afa8:	4818      	ldr	r0, [pc, #96]	; (b00c <z_impl_k_mutex_unlock+0x190>)
    afaa:	f7ff fc17 	bl	a7dc <z_spin_unlock_valid>
    afae:	b120      	cbz	r0, afba <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    afb0:	f385 8811 	msr	BASEPRI, r5
    afb4:	f3bf 8f6f 	isb	sy
    afb8:	e782      	b.n	aec0 <z_impl_k_mutex_unlock+0x44>
    afba:	4c15      	ldr	r4, [pc, #84]	; (b010 <z_impl_k_mutex_unlock+0x194>)
    afbc:	23b9      	movs	r3, #185	; 0xb9
    afbe:	4622      	mov	r2, r4
    afc0:	4916      	ldr	r1, [pc, #88]	; (b01c <z_impl_k_mutex_unlock+0x1a0>)
    afc2:	480c      	ldr	r0, [pc, #48]	; (aff4 <z_impl_k_mutex_unlock+0x178>)
    afc4:	f004 f94b 	bl	f25e <assert_print>
    afc8:	4910      	ldr	r1, [pc, #64]	; (b00c <z_impl_k_mutex_unlock+0x190>)
    afca:	4815      	ldr	r0, [pc, #84]	; (b020 <z_impl_k_mutex_unlock+0x1a4>)
    afcc:	f004 f947 	bl	f25e <assert_print>
    afd0:	21b9      	movs	r1, #185	; 0xb9
    afd2:	4620      	mov	r0, r4
    afd4:	f004 f93c 	bl	f250 <assert_post_action>
    afd8:	e7ea      	b.n	afb0 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    afda:	f06f 0015 	mvn.w	r0, #21
    afde:	e772      	b.n	aec6 <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    afe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    afe4:	e76f      	b.n	aec6 <z_impl_k_mutex_unlock+0x4a>
    afe6:	bf00      	nop
    afe8:	2000d4dc 	.word	0x2000d4dc
    afec:	00012fd8 	.word	0x00012fd8
    aff0:	00012f20 	.word	0x00012f20
    aff4:	0001160c 	.word	0x0001160c
    aff8:	00012ffc 	.word	0x00012ffc
    affc:	00013024 	.word	0x00013024
    b000:	0001303c 	.word	0x0001303c
    b004:	00013068 	.word	0x00013068
    b008:	0001306c 	.word	0x0001306c
    b00c:	2000d50c 	.word	0x2000d50c
    b010:	000117b8 	.word	0x000117b8
    b014:	00011818 	.word	0x00011818
    b018:	00011830 	.word	0x00011830
    b01c:	000117e8 	.word	0x000117e8
    b020:	00011800 	.word	0x00011800

0000b024 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    b024:	b570      	push	{r4, r5, r6, lr}
    b026:	4604      	mov	r4, r0
	__asm__ volatile(
    b028:	f04f 0320 	mov.w	r3, #32
    b02c:	f3ef 8511 	mrs	r5, BASEPRI
    b030:	f383 8812 	msr	BASEPRI_MAX, r3
    b034:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b038:	4817      	ldr	r0, [pc, #92]	; (b098 <z_impl_k_sem_give+0x74>)
    b03a:	f7ff fbbf 	bl	a7bc <z_spin_lock_valid>
    b03e:	b180      	cbz	r0, b062 <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    b040:	4815      	ldr	r0, [pc, #84]	; (b098 <z_impl_k_sem_give+0x74>)
    b042:	f7ff fbdb 	bl	a7fc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    b046:	4620      	mov	r0, r4
    b048:	f001 f8f0 	bl	c22c <z_unpend_first_thread>

	if (thread != NULL) {
    b04c:	b1c8      	cbz	r0, b082 <z_impl_k_sem_give+0x5e>
    b04e:	2200      	movs	r2, #0
    b050:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    b054:	f000 fc72 	bl	b93c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    b058:	4629      	mov	r1, r5
    b05a:	480f      	ldr	r0, [pc, #60]	; (b098 <z_impl_k_sem_give+0x74>)
    b05c:	f000 f9ca 	bl	b3f4 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    b060:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b062:	4e0e      	ldr	r6, [pc, #56]	; (b09c <z_impl_k_sem_give+0x78>)
    b064:	238e      	movs	r3, #142	; 0x8e
    b066:	4632      	mov	r2, r6
    b068:	490d      	ldr	r1, [pc, #52]	; (b0a0 <z_impl_k_sem_give+0x7c>)
    b06a:	480e      	ldr	r0, [pc, #56]	; (b0a4 <z_impl_k_sem_give+0x80>)
    b06c:	f004 f8f7 	bl	f25e <assert_print>
    b070:	4909      	ldr	r1, [pc, #36]	; (b098 <z_impl_k_sem_give+0x74>)
    b072:	480d      	ldr	r0, [pc, #52]	; (b0a8 <z_impl_k_sem_give+0x84>)
    b074:	f004 f8f3 	bl	f25e <assert_print>
    b078:	218e      	movs	r1, #142	; 0x8e
    b07a:	4630      	mov	r0, r6
    b07c:	f004 f8e8 	bl	f250 <assert_post_action>
    b080:	e7de      	b.n	b040 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    b082:	68a3      	ldr	r3, [r4, #8]
    b084:	68e2      	ldr	r2, [r4, #12]
    b086:	4293      	cmp	r3, r2
    b088:	d003      	beq.n	b092 <z_impl_k_sem_give+0x6e>
    b08a:	2201      	movs	r2, #1
    b08c:	4413      	add	r3, r2
    b08e:	60a3      	str	r3, [r4, #8]
}
    b090:	e7e2      	b.n	b058 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    b092:	2200      	movs	r2, #0
    b094:	e7fa      	b.n	b08c <z_impl_k_sem_give+0x68>
    b096:	bf00      	nop
    b098:	2000d510 	.word	0x2000d510
    b09c:	000117b8 	.word	0x000117b8
    b0a0:	00011818 	.word	0x00011818
    b0a4:	0001160c 	.word	0x0001160c
    b0a8:	00011830 	.word	0x00011830

0000b0ac <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    b0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0b0:	b082      	sub	sp, #8
    b0b2:	4604      	mov	r4, r0
    b0b4:	4617      	mov	r7, r2
    b0b6:	461d      	mov	r5, r3
    b0b8:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    b0bc:	b111      	cbz	r1, b0c4 <z_impl_k_sem_take+0x18>
    b0be:	ea55 0302 	orrs.w	r3, r5, r2
    b0c2:	d11f      	bne.n	b104 <z_impl_k_sem_take+0x58>
    b0c4:	f04f 0320 	mov.w	r3, #32
    b0c8:	f3ef 8611 	mrs	r6, BASEPRI
    b0cc:	f383 8812 	msr	BASEPRI_MAX, r3
    b0d0:	f3bf 8f6f 	isb	sy
    b0d4:	4836      	ldr	r0, [pc, #216]	; (b1b0 <z_impl_k_sem_take+0x104>)
    b0d6:	f7ff fb71 	bl	a7bc <z_spin_lock_valid>
    b0da:	b310      	cbz	r0, b122 <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    b0dc:	4834      	ldr	r0, [pc, #208]	; (b1b0 <z_impl_k_sem_take+0x104>)
    b0de:	f7ff fb8d 	bl	a7fc <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    b0e2:	68a1      	ldr	r1, [r4, #8]
    b0e4:	2900      	cmp	r1, #0
    b0e6:	d03d      	beq.n	b164 <z_impl_k_sem_take+0xb8>
		sem->count--;
    b0e8:	3901      	subs	r1, #1
    b0ea:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b0ec:	4830      	ldr	r0, [pc, #192]	; (b1b0 <z_impl_k_sem_take+0x104>)
    b0ee:	f7ff fb75 	bl	a7dc <z_spin_unlock_valid>
    b0f2:	b338      	cbz	r0, b144 <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    b0f4:	f386 8811 	msr	BASEPRI, r6
    b0f8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    b0fc:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    b0fe:	b002      	add	sp, #8
    b100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    b104:	4e2b      	ldr	r6, [pc, #172]	; (b1b4 <z_impl_k_sem_take+0x108>)
    b106:	2379      	movs	r3, #121	; 0x79
    b108:	4632      	mov	r2, r6
    b10a:	492b      	ldr	r1, [pc, #172]	; (b1b8 <z_impl_k_sem_take+0x10c>)
    b10c:	482b      	ldr	r0, [pc, #172]	; (b1bc <z_impl_k_sem_take+0x110>)
    b10e:	f004 f8a6 	bl	f25e <assert_print>
    b112:	482b      	ldr	r0, [pc, #172]	; (b1c0 <z_impl_k_sem_take+0x114>)
    b114:	f004 f8a3 	bl	f25e <assert_print>
    b118:	2179      	movs	r1, #121	; 0x79
    b11a:	4630      	mov	r0, r6
    b11c:	f004 f898 	bl	f250 <assert_post_action>
    b120:	e7d0      	b.n	b0c4 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b122:	f8df 80a0 	ldr.w	r8, [pc, #160]	; b1c4 <z_impl_k_sem_take+0x118>
    b126:	238e      	movs	r3, #142	; 0x8e
    b128:	4642      	mov	r2, r8
    b12a:	4927      	ldr	r1, [pc, #156]	; (b1c8 <z_impl_k_sem_take+0x11c>)
    b12c:	4823      	ldr	r0, [pc, #140]	; (b1bc <z_impl_k_sem_take+0x110>)
    b12e:	f004 f896 	bl	f25e <assert_print>
    b132:	491f      	ldr	r1, [pc, #124]	; (b1b0 <z_impl_k_sem_take+0x104>)
    b134:	4825      	ldr	r0, [pc, #148]	; (b1cc <z_impl_k_sem_take+0x120>)
    b136:	f004 f892 	bl	f25e <assert_print>
    b13a:	218e      	movs	r1, #142	; 0x8e
    b13c:	4640      	mov	r0, r8
    b13e:	f004 f887 	bl	f250 <assert_post_action>
    b142:	e7cb      	b.n	b0dc <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b144:	4c1f      	ldr	r4, [pc, #124]	; (b1c4 <z_impl_k_sem_take+0x118>)
    b146:	23b9      	movs	r3, #185	; 0xb9
    b148:	4622      	mov	r2, r4
    b14a:	4921      	ldr	r1, [pc, #132]	; (b1d0 <z_impl_k_sem_take+0x124>)
    b14c:	481b      	ldr	r0, [pc, #108]	; (b1bc <z_impl_k_sem_take+0x110>)
    b14e:	f004 f886 	bl	f25e <assert_print>
    b152:	4917      	ldr	r1, [pc, #92]	; (b1b0 <z_impl_k_sem_take+0x104>)
    b154:	481f      	ldr	r0, [pc, #124]	; (b1d4 <z_impl_k_sem_take+0x128>)
    b156:	f004 f882 	bl	f25e <assert_print>
    b15a:	21b9      	movs	r1, #185	; 0xb9
    b15c:	4620      	mov	r0, r4
    b15e:	f004 f877 	bl	f250 <assert_post_action>
    b162:	e7c7      	b.n	b0f4 <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b164:	ea55 0307 	orrs.w	r3, r5, r7
    b168:	d007      	beq.n	b17a <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    b16a:	9700      	str	r7, [sp, #0]
    b16c:	9501      	str	r5, [sp, #4]
    b16e:	4622      	mov	r2, r4
    b170:	4631      	mov	r1, r6
    b172:	480f      	ldr	r0, [pc, #60]	; (b1b0 <z_impl_k_sem_take+0x104>)
    b174:	f000 fdbe 	bl	bcf4 <z_pend_curr>
	return ret;
    b178:	e7c1      	b.n	b0fe <z_impl_k_sem_take+0x52>
    b17a:	480d      	ldr	r0, [pc, #52]	; (b1b0 <z_impl_k_sem_take+0x104>)
    b17c:	f7ff fb2e 	bl	a7dc <z_spin_unlock_valid>
    b180:	b130      	cbz	r0, b190 <z_impl_k_sem_take+0xe4>
    b182:	f386 8811 	msr	BASEPRI, r6
    b186:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    b18a:	f06f 000f 	mvn.w	r0, #15
    b18e:	e7b6      	b.n	b0fe <z_impl_k_sem_take+0x52>
    b190:	4c0c      	ldr	r4, [pc, #48]	; (b1c4 <z_impl_k_sem_take+0x118>)
    b192:	23b9      	movs	r3, #185	; 0xb9
    b194:	4622      	mov	r2, r4
    b196:	490e      	ldr	r1, [pc, #56]	; (b1d0 <z_impl_k_sem_take+0x124>)
    b198:	4808      	ldr	r0, [pc, #32]	; (b1bc <z_impl_k_sem_take+0x110>)
    b19a:	f004 f860 	bl	f25e <assert_print>
    b19e:	4904      	ldr	r1, [pc, #16]	; (b1b0 <z_impl_k_sem_take+0x104>)
    b1a0:	480c      	ldr	r0, [pc, #48]	; (b1d4 <z_impl_k_sem_take+0x128>)
    b1a2:	f004 f85c 	bl	f25e <assert_print>
    b1a6:	21b9      	movs	r1, #185	; 0xb9
    b1a8:	4620      	mov	r0, r4
    b1aa:	f004 f851 	bl	f250 <assert_post_action>
    b1ae:	e7e8      	b.n	b182 <z_impl_k_sem_take+0xd6>
    b1b0:	2000d510 	.word	0x2000d510
    b1b4:	000130a0 	.word	0x000130a0
    b1b8:	000130c0 	.word	0x000130c0
    b1bc:	0001160c 	.word	0x0001160c
    b1c0:	00013068 	.word	0x00013068
    b1c4:	000117b8 	.word	0x000117b8
    b1c8:	00011818 	.word	0x00011818
    b1cc:	00011830 	.word	0x00011830
    b1d0:	000117e8 	.word	0x000117e8
    b1d4:	00011800 	.word	0x00011800

0000b1d8 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    b1d8:	b538      	push	{r3, r4, r5, lr}
    b1da:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    b1dc:	6883      	ldr	r3, [r0, #8]
    b1de:	b10b      	cbz	r3, b1e4 <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    b1e0:	68a0      	ldr	r0, [r4, #8]
    b1e2:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    b1e4:	4d06      	ldr	r5, [pc, #24]	; (b200 <pended_on_thread+0x28>)
    b1e6:	f240 23b9 	movw	r3, #697	; 0x2b9
    b1ea:	462a      	mov	r2, r5
    b1ec:	4905      	ldr	r1, [pc, #20]	; (b204 <pended_on_thread+0x2c>)
    b1ee:	4806      	ldr	r0, [pc, #24]	; (b208 <pended_on_thread+0x30>)
    b1f0:	f004 f835 	bl	f25e <assert_print>
    b1f4:	f240 21b9 	movw	r1, #697	; 0x2b9
    b1f8:	4628      	mov	r0, r5
    b1fa:	f004 f829 	bl	f250 <assert_post_action>
    b1fe:	e7ef      	b.n	b1e0 <pended_on_thread+0x8>
    b200:	00013110 	.word	0x00013110
    b204:	00013134 	.word	0x00013134
    b208:	0001160c 	.word	0x0001160c

0000b20c <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b20c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b210:	bf08      	it	eq
    b212:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    b216:	d100      	bne.n	b21a <add_thread_timeout+0xe>
    b218:	4770      	bx	lr
{
    b21a:	b508      	push	{r3, lr}
    b21c:	4902      	ldr	r1, [pc, #8]	; (b228 <add_thread_timeout+0x1c>)
    b21e:	3018      	adds	r0, #24
    b220:	f001 fb36 	bl	c890 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    b224:	bd08      	pop	{r3, pc}
    b226:	bf00      	nop
    b228:	0000ba99 	.word	0x0000ba99

0000b22c <z_reset_time_slice>:
{
    b22c:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    b22e:	4b07      	ldr	r3, [pc, #28]	; (b24c <z_reset_time_slice+0x20>)
    b230:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    b232:	b904      	cbnz	r4, b236 <z_reset_time_slice+0xa>
}
    b234:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    b236:	f7fc ff21 	bl	807c <sys_clock_elapsed>
    b23a:	4404      	add	r4, r0
    b23c:	4b04      	ldr	r3, [pc, #16]	; (b250 <z_reset_time_slice+0x24>)
    b23e:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    b240:	2100      	movs	r1, #0
    b242:	4b02      	ldr	r3, [pc, #8]	; (b24c <z_reset_time_slice+0x20>)
    b244:	6818      	ldr	r0, [r3, #0]
    b246:	f001 fcb3 	bl	cbb0 <z_set_timeout_expiry>
}
    b24a:	e7f3      	b.n	b234 <z_reset_time_slice+0x8>
    b24c:	2000d520 	.word	0x2000d520
    b250:	2000d4dc 	.word	0x2000d4dc

0000b254 <k_sched_time_slice_set>:
{
    b254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b258:	4604      	mov	r4, r0
    b25a:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    b25c:	2700      	movs	r7, #0
	__asm__ volatile(
    b25e:	f04f 0320 	mov.w	r3, #32
    b262:	f3ef 8611 	mrs	r6, BASEPRI
    b266:	f383 8812 	msr	BASEPRI_MAX, r3
    b26a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b26e:	482a      	ldr	r0, [pc, #168]	; (b318 <k_sched_time_slice_set+0xc4>)
    b270:	f7ff faa4 	bl	a7bc <z_spin_lock_valid>
    b274:	b118      	cbz	r0, b27e <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    b276:	4828      	ldr	r0, [pc, #160]	; (b318 <k_sched_time_slice_set+0xc4>)
    b278:	f7ff fac0 	bl	a7fc <z_spin_lock_set_owner>
	return k;
    b27c:	e023      	b.n	b2c6 <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b27e:	f8df 809c 	ldr.w	r8, [pc, #156]	; b31c <k_sched_time_slice_set+0xc8>
    b282:	238e      	movs	r3, #142	; 0x8e
    b284:	4642      	mov	r2, r8
    b286:	4926      	ldr	r1, [pc, #152]	; (b320 <k_sched_time_slice_set+0xcc>)
    b288:	4826      	ldr	r0, [pc, #152]	; (b324 <k_sched_time_slice_set+0xd0>)
    b28a:	f003 ffe8 	bl	f25e <assert_print>
    b28e:	4922      	ldr	r1, [pc, #136]	; (b318 <k_sched_time_slice_set+0xc4>)
    b290:	4825      	ldr	r0, [pc, #148]	; (b328 <k_sched_time_slice_set+0xd4>)
    b292:	f003 ffe4 	bl	f25e <assert_print>
    b296:	218e      	movs	r1, #142	; 0x8e
    b298:	4640      	mov	r0, r8
    b29a:	f003 ffd9 	bl	f250 <assert_post_action>
    b29e:	e7ea      	b.n	b276 <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    b2a0:	2802      	cmp	r0, #2
    b2a2:	bfb8      	it	lt
    b2a4:	2002      	movlt	r0, #2
    b2a6:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    b2a8:	4b20      	ldr	r3, [pc, #128]	; (b32c <k_sched_time_slice_set+0xd8>)
    b2aa:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    b2ac:	4b20      	ldr	r3, [pc, #128]	; (b330 <k_sched_time_slice_set+0xdc>)
    b2ae:	6898      	ldr	r0, [r3, #8]
    b2b0:	f7ff ffbc 	bl	b22c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b2b4:	4818      	ldr	r0, [pc, #96]	; (b318 <k_sched_time_slice_set+0xc4>)
    b2b6:	f7ff fa91 	bl	a7dc <z_spin_unlock_valid>
    b2ba:	b1d0      	cbz	r0, b2f2 <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    b2bc:	f386 8811 	msr	BASEPRI, r6
    b2c0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b2c4:	2701      	movs	r7, #1
    b2c6:	bb27      	cbnz	r7, b312 <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    b2c8:	4b19      	ldr	r3, [pc, #100]	; (b330 <k_sched_time_slice_set+0xdc>)
    b2ca:	2200      	movs	r2, #0
    b2cc:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    b2ce:	0c61      	lsrs	r1, r4, #17
    b2d0:	03e3      	lsls	r3, r4, #15
    b2d2:	f240 30e7 	movw	r0, #999	; 0x3e7
    b2d6:	1818      	adds	r0, r3, r0
    b2d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b2dc:	f04f 0300 	mov.w	r3, #0
    b2e0:	f141 0100 	adc.w	r1, r1, #0
    b2e4:	f7f5 fb7a 	bl	9dc <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    b2e8:	4b12      	ldr	r3, [pc, #72]	; (b334 <k_sched_time_slice_set+0xe0>)
    b2ea:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    b2ec:	2c00      	cmp	r4, #0
    b2ee:	dcd7      	bgt.n	b2a0 <k_sched_time_slice_set+0x4c>
    b2f0:	e7da      	b.n	b2a8 <k_sched_time_slice_set+0x54>
    b2f2:	4f0a      	ldr	r7, [pc, #40]	; (b31c <k_sched_time_slice_set+0xc8>)
    b2f4:	23b9      	movs	r3, #185	; 0xb9
    b2f6:	463a      	mov	r2, r7
    b2f8:	490f      	ldr	r1, [pc, #60]	; (b338 <k_sched_time_slice_set+0xe4>)
    b2fa:	480a      	ldr	r0, [pc, #40]	; (b324 <k_sched_time_slice_set+0xd0>)
    b2fc:	f003 ffaf 	bl	f25e <assert_print>
    b300:	4905      	ldr	r1, [pc, #20]	; (b318 <k_sched_time_slice_set+0xc4>)
    b302:	480e      	ldr	r0, [pc, #56]	; (b33c <k_sched_time_slice_set+0xe8>)
    b304:	f003 ffab 	bl	f25e <assert_print>
    b308:	21b9      	movs	r1, #185	; 0xb9
    b30a:	4638      	mov	r0, r7
    b30c:	f003 ffa0 	bl	f250 <assert_post_action>
    b310:	e7d4      	b.n	b2bc <k_sched_time_slice_set+0x68>
}
    b312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b316:	bf00      	nop
    b318:	2000d518 	.word	0x2000d518
    b31c:	000117b8 	.word	0x000117b8
    b320:	00011818 	.word	0x00011818
    b324:	0001160c 	.word	0x0001160c
    b328:	00011830 	.word	0x00011830
    b32c:	2000d51c 	.word	0x2000d51c
    b330:	2000d4dc 	.word	0x2000d4dc
    b334:	2000d520 	.word	0x2000d520
    b338:	000117e8 	.word	0x000117e8
    b33c:	00011800 	.word	0x00011800

0000b340 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    b340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b342:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    b344:	2500      	movs	r5, #0
	__asm__ volatile(
    b346:	f04f 0320 	mov.w	r3, #32
    b34a:	f3ef 8611 	mrs	r6, BASEPRI
    b34e:	f383 8812 	msr	BASEPRI_MAX, r3
    b352:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b356:	4820      	ldr	r0, [pc, #128]	; (b3d8 <z_unpend_thread_no_timeout+0x98>)
    b358:	f7ff fa30 	bl	a7bc <z_spin_lock_valid>
    b35c:	b118      	cbz	r0, b366 <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
    b35e:	481e      	ldr	r0, [pc, #120]	; (b3d8 <z_unpend_thread_no_timeout+0x98>)
    b360:	f7ff fa4c 	bl	a7fc <z_spin_lock_set_owner>
	return k;
    b364:	e014      	b.n	b390 <z_unpend_thread_no_timeout+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b366:	4f1d      	ldr	r7, [pc, #116]	; (b3dc <z_unpend_thread_no_timeout+0x9c>)
    b368:	238e      	movs	r3, #142	; 0x8e
    b36a:	463a      	mov	r2, r7
    b36c:	491c      	ldr	r1, [pc, #112]	; (b3e0 <z_unpend_thread_no_timeout+0xa0>)
    b36e:	481d      	ldr	r0, [pc, #116]	; (b3e4 <z_unpend_thread_no_timeout+0xa4>)
    b370:	f003 ff75 	bl	f25e <assert_print>
    b374:	4918      	ldr	r1, [pc, #96]	; (b3d8 <z_unpend_thread_no_timeout+0x98>)
    b376:	481c      	ldr	r0, [pc, #112]	; (b3e8 <z_unpend_thread_no_timeout+0xa8>)
    b378:	f003 ff71 	bl	f25e <assert_print>
    b37c:	218e      	movs	r1, #142	; 0x8e
    b37e:	4638      	mov	r0, r7
    b380:	f003 ff66 	bl	f250 <assert_post_action>
    b384:	e7eb      	b.n	b35e <z_unpend_thread_no_timeout+0x1e>
	__asm__ volatile(
    b386:	f386 8811 	msr	BASEPRI, r6
    b38a:	f3bf 8f6f 	isb	sy
    b38e:	2501      	movs	r5, #1
    b390:	bb05      	cbnz	r5, b3d4 <z_unpend_thread_no_timeout+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    b392:	4620      	mov	r0, r4
    b394:	f7ff ff20 	bl	b1d8 <pended_on_thread>
    b398:	4621      	mov	r1, r4
    b39a:	f000 f8fb 	bl	b594 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    b39e:	7b63      	ldrb	r3, [r4, #13]
    b3a0:	f023 0302 	bic.w	r3, r3, #2
    b3a4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    b3a6:	2300      	movs	r3, #0
    b3a8:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b3aa:	480b      	ldr	r0, [pc, #44]	; (b3d8 <z_unpend_thread_no_timeout+0x98>)
    b3ac:	f7ff fa16 	bl	a7dc <z_spin_unlock_valid>
    b3b0:	2800      	cmp	r0, #0
    b3b2:	d1e8      	bne.n	b386 <z_unpend_thread_no_timeout+0x46>
    b3b4:	4d09      	ldr	r5, [pc, #36]	; (b3dc <z_unpend_thread_no_timeout+0x9c>)
    b3b6:	23b9      	movs	r3, #185	; 0xb9
    b3b8:	462a      	mov	r2, r5
    b3ba:	490c      	ldr	r1, [pc, #48]	; (b3ec <z_unpend_thread_no_timeout+0xac>)
    b3bc:	4809      	ldr	r0, [pc, #36]	; (b3e4 <z_unpend_thread_no_timeout+0xa4>)
    b3be:	f003 ff4e 	bl	f25e <assert_print>
    b3c2:	4905      	ldr	r1, [pc, #20]	; (b3d8 <z_unpend_thread_no_timeout+0x98>)
    b3c4:	480a      	ldr	r0, [pc, #40]	; (b3f0 <z_unpend_thread_no_timeout+0xb0>)
    b3c6:	f003 ff4a 	bl	f25e <assert_print>
    b3ca:	21b9      	movs	r1, #185	; 0xb9
    b3cc:	4628      	mov	r0, r5
    b3ce:	f003 ff3f 	bl	f250 <assert_post_action>
    b3d2:	e7d8      	b.n	b386 <z_unpend_thread_no_timeout+0x46>
		unpend_thread_no_timeout(thread);
	}
}
    b3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b3d6:	bf00      	nop
    b3d8:	2000d518 	.word	0x2000d518
    b3dc:	000117b8 	.word	0x000117b8
    b3e0:	00011818 	.word	0x00011818
    b3e4:	0001160c 	.word	0x0001160c
    b3e8:	00011830 	.word	0x00011830
    b3ec:	000117e8 	.word	0x000117e8
    b3f0:	00011800 	.word	0x00011800

0000b3f4 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    b3f4:	b570      	push	{r4, r5, r6, lr}
    b3f6:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    b3f8:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b3fa:	b921      	cbnz	r1, b406 <z_reschedule+0x12>
    b3fc:	f3ef 8305 	mrs	r3, IPSR
    b400:	b913      	cbnz	r3, b408 <z_reschedule+0x14>
    b402:	2101      	movs	r1, #1
    b404:	e000      	b.n	b408 <z_reschedule+0x14>
    b406:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    b408:	f011 0f01 	tst.w	r1, #1
    b40c:	d01c      	beq.n	b448 <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    b40e:	4b1b      	ldr	r3, [pc, #108]	; (b47c <z_reschedule+0x88>)
    b410:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    b412:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    b414:	429a      	cmp	r2, r3
    b416:	d017      	beq.n	b448 <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b418:	4620      	mov	r0, r4
    b41a:	f7ff f9df 	bl	a7dc <z_spin_unlock_valid>
    b41e:	b118      	cbz	r0, b428 <z_reschedule+0x34>
	ret = arch_swap(key);
    b420:	4628      	mov	r0, r5
    b422:	f7fa fd37 	bl	5e94 <arch_swap>
		z_swap(lock, key);
    b426:	e017      	b.n	b458 <z_reschedule+0x64>
    b428:	4e15      	ldr	r6, [pc, #84]	; (b480 <z_reschedule+0x8c>)
    b42a:	23d0      	movs	r3, #208	; 0xd0
    b42c:	4632      	mov	r2, r6
    b42e:	4915      	ldr	r1, [pc, #84]	; (b484 <z_reschedule+0x90>)
    b430:	4815      	ldr	r0, [pc, #84]	; (b488 <z_reschedule+0x94>)
    b432:	f003 ff14 	bl	f25e <assert_print>
    b436:	4621      	mov	r1, r4
    b438:	4814      	ldr	r0, [pc, #80]	; (b48c <z_reschedule+0x98>)
    b43a:	f003 ff10 	bl	f25e <assert_print>
    b43e:	21d0      	movs	r1, #208	; 0xd0
    b440:	4630      	mov	r0, r6
    b442:	f003 ff05 	bl	f250 <assert_post_action>
    b446:	e7eb      	b.n	b420 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b448:	4620      	mov	r0, r4
    b44a:	f7ff f9c7 	bl	a7dc <z_spin_unlock_valid>
    b44e:	b120      	cbz	r0, b45a <z_reschedule+0x66>
    b450:	f385 8811 	msr	BASEPRI, r5
    b454:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    b458:	bd70      	pop	{r4, r5, r6, pc}
    b45a:	4e09      	ldr	r6, [pc, #36]	; (b480 <z_reschedule+0x8c>)
    b45c:	23b9      	movs	r3, #185	; 0xb9
    b45e:	4632      	mov	r2, r6
    b460:	4908      	ldr	r1, [pc, #32]	; (b484 <z_reschedule+0x90>)
    b462:	4809      	ldr	r0, [pc, #36]	; (b488 <z_reschedule+0x94>)
    b464:	f003 fefb 	bl	f25e <assert_print>
    b468:	4621      	mov	r1, r4
    b46a:	4808      	ldr	r0, [pc, #32]	; (b48c <z_reschedule+0x98>)
    b46c:	f003 fef7 	bl	f25e <assert_print>
    b470:	21b9      	movs	r1, #185	; 0xb9
    b472:	4630      	mov	r0, r6
    b474:	f003 feec 	bl	f250 <assert_post_action>
    b478:	e7ea      	b.n	b450 <z_reschedule+0x5c>
    b47a:	bf00      	nop
    b47c:	2000d4dc 	.word	0x2000d4dc
    b480:	000117b8 	.word	0x000117b8
    b484:	000117e8 	.word	0x000117e8
    b488:	0001160c 	.word	0x0001160c
    b48c:	00011800 	.word	0x00011800

0000b490 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    b490:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    b492:	2400      	movs	r4, #0
	__asm__ volatile(
    b494:	f04f 0320 	mov.w	r3, #32
    b498:	f3ef 8511 	mrs	r5, BASEPRI
    b49c:	f383 8812 	msr	BASEPRI_MAX, r3
    b4a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b4a4:	482f      	ldr	r0, [pc, #188]	; (b564 <k_sched_lock+0xd4>)
    b4a6:	f7ff f989 	bl	a7bc <z_spin_lock_valid>
    b4aa:	b118      	cbz	r0, b4b4 <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    b4ac:	482d      	ldr	r0, [pc, #180]	; (b564 <k_sched_lock+0xd4>)
    b4ae:	f7ff f9a5 	bl	a7fc <z_spin_lock_set_owner>
	return k;
    b4b2:	e022      	b.n	b4fa <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b4b4:	4e2c      	ldr	r6, [pc, #176]	; (b568 <k_sched_lock+0xd8>)
    b4b6:	238e      	movs	r3, #142	; 0x8e
    b4b8:	4632      	mov	r2, r6
    b4ba:	492c      	ldr	r1, [pc, #176]	; (b56c <k_sched_lock+0xdc>)
    b4bc:	482c      	ldr	r0, [pc, #176]	; (b570 <k_sched_lock+0xe0>)
    b4be:	f003 fece 	bl	f25e <assert_print>
    b4c2:	4928      	ldr	r1, [pc, #160]	; (b564 <k_sched_lock+0xd4>)
    b4c4:	482b      	ldr	r0, [pc, #172]	; (b574 <k_sched_lock+0xe4>)
    b4c6:	f003 feca 	bl	f25e <assert_print>
    b4ca:	218e      	movs	r1, #142	; 0x8e
    b4cc:	4630      	mov	r0, r6
    b4ce:	f003 febf 	bl	f250 <assert_post_action>
    b4d2:	e7eb      	b.n	b4ac <k_sched_lock+0x1c>
	__ASSERT(_current->base.sched_locked != 1U, "");
    b4d4:	4b28      	ldr	r3, [pc, #160]	; (b578 <k_sched_lock+0xe8>)
    b4d6:	689b      	ldr	r3, [r3, #8]
    b4d8:	7bdb      	ldrb	r3, [r3, #15]
    b4da:	2b01      	cmp	r3, #1
    b4dc:	d022      	beq.n	b524 <k_sched_lock+0x94>
	--_current->base.sched_locked;
    b4de:	4b26      	ldr	r3, [pc, #152]	; (b578 <k_sched_lock+0xe8>)
    b4e0:	689a      	ldr	r2, [r3, #8]
    b4e2:	7bd3      	ldrb	r3, [r2, #15]
    b4e4:	3b01      	subs	r3, #1
    b4e6:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b4e8:	481e      	ldr	r0, [pc, #120]	; (b564 <k_sched_lock+0xd4>)
    b4ea:	f7ff f977 	bl	a7dc <z_spin_unlock_valid>
    b4ee:	b340      	cbz	r0, b542 <k_sched_lock+0xb2>
	__asm__ volatile(
    b4f0:	f385 8811 	msr	BASEPRI, r5
    b4f4:	f3bf 8f6f 	isb	sy
    b4f8:	2401      	movs	r4, #1
    b4fa:	2c00      	cmp	r4, #0
    b4fc:	d131      	bne.n	b562 <k_sched_lock+0xd2>
    b4fe:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    b502:	2b00      	cmp	r3, #0
    b504:	d0e6      	beq.n	b4d4 <k_sched_lock+0x44>
    b506:	4c1d      	ldr	r4, [pc, #116]	; (b57c <k_sched_lock+0xec>)
    b508:	23fd      	movs	r3, #253	; 0xfd
    b50a:	4622      	mov	r2, r4
    b50c:	491c      	ldr	r1, [pc, #112]	; (b580 <k_sched_lock+0xf0>)
    b50e:	4818      	ldr	r0, [pc, #96]	; (b570 <k_sched_lock+0xe0>)
    b510:	f003 fea5 	bl	f25e <assert_print>
    b514:	481b      	ldr	r0, [pc, #108]	; (b584 <k_sched_lock+0xf4>)
    b516:	f003 fea2 	bl	f25e <assert_print>
    b51a:	21fd      	movs	r1, #253	; 0xfd
    b51c:	4620      	mov	r0, r4
    b51e:	f003 fe97 	bl	f250 <assert_post_action>
    b522:	e7d7      	b.n	b4d4 <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    b524:	4c15      	ldr	r4, [pc, #84]	; (b57c <k_sched_lock+0xec>)
    b526:	23fe      	movs	r3, #254	; 0xfe
    b528:	4622      	mov	r2, r4
    b52a:	4917      	ldr	r1, [pc, #92]	; (b588 <k_sched_lock+0xf8>)
    b52c:	4810      	ldr	r0, [pc, #64]	; (b570 <k_sched_lock+0xe0>)
    b52e:	f003 fe96 	bl	f25e <assert_print>
    b532:	4814      	ldr	r0, [pc, #80]	; (b584 <k_sched_lock+0xf4>)
    b534:	f003 fe93 	bl	f25e <assert_print>
    b538:	21fe      	movs	r1, #254	; 0xfe
    b53a:	4620      	mov	r0, r4
    b53c:	f003 fe88 	bl	f250 <assert_post_action>
    b540:	e7cd      	b.n	b4de <k_sched_lock+0x4e>
    b542:	4c09      	ldr	r4, [pc, #36]	; (b568 <k_sched_lock+0xd8>)
    b544:	23b9      	movs	r3, #185	; 0xb9
    b546:	4622      	mov	r2, r4
    b548:	4910      	ldr	r1, [pc, #64]	; (b58c <k_sched_lock+0xfc>)
    b54a:	4809      	ldr	r0, [pc, #36]	; (b570 <k_sched_lock+0xe0>)
    b54c:	f003 fe87 	bl	f25e <assert_print>
    b550:	4904      	ldr	r1, [pc, #16]	; (b564 <k_sched_lock+0xd4>)
    b552:	480f      	ldr	r0, [pc, #60]	; (b590 <k_sched_lock+0x100>)
    b554:	f003 fe83 	bl	f25e <assert_print>
    b558:	21b9      	movs	r1, #185	; 0xb9
    b55a:	4620      	mov	r0, r4
    b55c:	f003 fe78 	bl	f250 <assert_post_action>
    b560:	e7c6      	b.n	b4f0 <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    b562:	bd70      	pop	{r4, r5, r6, pc}
    b564:	2000d518 	.word	0x2000d518
    b568:	000117b8 	.word	0x000117b8
    b56c:	00011818 	.word	0x00011818
    b570:	0001160c 	.word	0x0001160c
    b574:	00011830 	.word	0x00011830
    b578:	2000d4dc 	.word	0x2000d4dc
    b57c:	0001303c 	.word	0x0001303c
    b580:	00012f20 	.word	0x00012f20
    b584:	00013068 	.word	0x00013068
    b588:	0001306c 	.word	0x0001306c
    b58c:	000117e8 	.word	0x000117e8
    b590:	00011800 	.word	0x00011800

0000b594 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    b594:	b538      	push	{r3, r4, r5, lr}
    b596:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b598:	4b0c      	ldr	r3, [pc, #48]	; (b5cc <z_priq_dumb_remove+0x38>)
    b59a:	4299      	cmp	r1, r3
    b59c:	d007      	beq.n	b5ae <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    b59e:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    b5a0:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    b5a2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b5a4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b5a6:	2300      	movs	r3, #0
    b5a8:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    b5aa:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    b5ac:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b5ae:	4d08      	ldr	r5, [pc, #32]	; (b5d0 <z_priq_dumb_remove+0x3c>)
    b5b0:	f240 433d 	movw	r3, #1085	; 0x43d
    b5b4:	462a      	mov	r2, r5
    b5b6:	4907      	ldr	r1, [pc, #28]	; (b5d4 <z_priq_dumb_remove+0x40>)
    b5b8:	4807      	ldr	r0, [pc, #28]	; (b5d8 <z_priq_dumb_remove+0x44>)
    b5ba:	f003 fe50 	bl	f25e <assert_print>
    b5be:	f240 413d 	movw	r1, #1085	; 0x43d
    b5c2:	4628      	mov	r0, r5
    b5c4:	f003 fe44 	bl	f250 <assert_post_action>
    b5c8:	e7e9      	b.n	b59e <z_priq_dumb_remove+0xa>
    b5ca:	bf00      	nop
    b5cc:	200047c8 	.word	0x200047c8
    b5d0:	00013110 	.word	0x00013110
    b5d4:	0001314c 	.word	0x0001314c
    b5d8:	0001160c 	.word	0x0001160c

0000b5dc <update_cache>:
{
    b5dc:	b538      	push	{r3, r4, r5, lr}
    b5de:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    b5e0:	4819      	ldr	r0, [pc, #100]	; (b648 <update_cache+0x6c>)
    b5e2:	f005 f845 	bl	10670 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    b5e6:	4605      	mov	r5, r0
    b5e8:	b188      	cbz	r0, b60e <update_cache+0x32>
	if (preempt_ok != 0) {
    b5ea:	bb14      	cbnz	r4, b632 <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    b5ec:	4b17      	ldr	r3, [pc, #92]	; (b64c <update_cache+0x70>)
    b5ee:	689b      	ldr	r3, [r3, #8]
    b5f0:	b183      	cbz	r3, b614 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    b5f2:	4b16      	ldr	r3, [pc, #88]	; (b64c <update_cache+0x70>)
    b5f4:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    b5f6:	7b5a      	ldrb	r2, [r3, #13]
    b5f8:	f012 0f1f 	tst.w	r2, #31
    b5fc:	d119      	bne.n	b632 <update_cache+0x56>
	return node->next != NULL;
    b5fe:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    b600:	b9ba      	cbnz	r2, b632 <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    b602:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    b604:	2a7f      	cmp	r2, #127	; 0x7f
    b606:	d914      	bls.n	b632 <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    b608:	4a10      	ldr	r2, [pc, #64]	; (b64c <update_cache+0x70>)
    b60a:	61d3      	str	r3, [r2, #28]
    b60c:	e01a      	b.n	b644 <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    b60e:	4b0f      	ldr	r3, [pc, #60]	; (b64c <update_cache+0x70>)
    b610:	68dd      	ldr	r5, [r3, #12]
    b612:	e7ea      	b.n	b5ea <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    b614:	4c0e      	ldr	r4, [pc, #56]	; (b650 <update_cache+0x74>)
    b616:	2389      	movs	r3, #137	; 0x89
    b618:	4622      	mov	r2, r4
    b61a:	490e      	ldr	r1, [pc, #56]	; (b654 <update_cache+0x78>)
    b61c:	480e      	ldr	r0, [pc, #56]	; (b658 <update_cache+0x7c>)
    b61e:	f003 fe1e 	bl	f25e <assert_print>
    b622:	480e      	ldr	r0, [pc, #56]	; (b65c <update_cache+0x80>)
    b624:	f003 fe1b 	bl	f25e <assert_print>
    b628:	2189      	movs	r1, #137	; 0x89
    b62a:	4620      	mov	r0, r4
    b62c:	f003 fe10 	bl	f250 <assert_post_action>
    b630:	e7df      	b.n	b5f2 <update_cache+0x16>
		if (thread != _current) {
    b632:	4b06      	ldr	r3, [pc, #24]	; (b64c <update_cache+0x70>)
    b634:	689b      	ldr	r3, [r3, #8]
    b636:	42ab      	cmp	r3, r5
    b638:	d002      	beq.n	b640 <update_cache+0x64>
			z_reset_time_slice(thread);
    b63a:	4628      	mov	r0, r5
    b63c:	f7ff fdf6 	bl	b22c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    b640:	4b02      	ldr	r3, [pc, #8]	; (b64c <update_cache+0x70>)
    b642:	61dd      	str	r5, [r3, #28]
}
    b644:	bd38      	pop	{r3, r4, r5, pc}
    b646:	bf00      	nop
    b648:	2000d4fc 	.word	0x2000d4fc
    b64c:	2000d4dc 	.word	0x2000d4dc
    b650:	00013110 	.word	0x00013110
    b654:	00013170 	.word	0x00013170
    b658:	0001160c 	.word	0x0001160c
    b65c:	00013068 	.word	0x00013068

0000b660 <move_thread_to_end_of_prio_q>:
{
    b660:	b538      	push	{r3, r4, r5, lr}
    b662:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    b664:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    b666:	f990 300d 	ldrsb.w	r3, [r0, #13]
    b66a:	2b00      	cmp	r3, #0
    b66c:	db2b      	blt.n	b6c6 <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    b66e:	7b6b      	ldrb	r3, [r5, #13]
    b670:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b674:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b676:	4b22      	ldr	r3, [pc, #136]	; (b700 <move_thread_to_end_of_prio_q+0xa0>)
    b678:	429d      	cmp	r5, r3
    b67a:	d02c      	beq.n	b6d6 <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    b67c:	4b21      	ldr	r3, [pc, #132]	; (b704 <move_thread_to_end_of_prio_q+0xa4>)
    b67e:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b682:	429c      	cmp	r4, r3
    b684:	d039      	beq.n	b6fa <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b686:	b16c      	cbz	r4, b6a4 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b688:	4621      	mov	r1, r4
    b68a:	4628      	mov	r0, r5
    b68c:	f004 ffd1 	bl	10632 <z_sched_prio_cmp>
    b690:	2800      	cmp	r0, #0
    b692:	dc2c      	bgt.n	b6ee <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b694:	b134      	cbz	r4, b6a4 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    b696:	4b1b      	ldr	r3, [pc, #108]	; (b704 <move_thread_to_end_of_prio_q+0xa4>)
    b698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b69a:	429c      	cmp	r4, r3
    b69c:	d002      	beq.n	b6a4 <move_thread_to_end_of_prio_q+0x44>
    b69e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b6a0:	2c00      	cmp	r4, #0
    b6a2:	d1f0      	bne.n	b686 <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    b6a4:	4b17      	ldr	r3, [pc, #92]	; (b704 <move_thread_to_end_of_prio_q+0xa4>)
    b6a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    b6a8:	f103 0120 	add.w	r1, r3, #32
    b6ac:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    b6ae:	606a      	str	r2, [r5, #4]
	tail->next = node;
    b6b0:	6015      	str	r5, [r2, #0]
	list->tail = node;
    b6b2:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    b6b4:	4b13      	ldr	r3, [pc, #76]	; (b704 <move_thread_to_end_of_prio_q+0xa4>)
    b6b6:	6898      	ldr	r0, [r3, #8]
    b6b8:	42a8      	cmp	r0, r5
    b6ba:	bf14      	ite	ne
    b6bc:	2000      	movne	r0, #0
    b6be:	2001      	moveq	r0, #1
    b6c0:	f7ff ff8c 	bl	b5dc <update_cache>
}
    b6c4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b6c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    b6ca:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    b6cc:	4601      	mov	r1, r0
    b6ce:	480e      	ldr	r0, [pc, #56]	; (b708 <move_thread_to_end_of_prio_q+0xa8>)
    b6d0:	f7ff ff60 	bl	b594 <z_priq_dumb_remove>
}
    b6d4:	e7cb      	b.n	b66e <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b6d6:	4c0d      	ldr	r4, [pc, #52]	; (b70c <move_thread_to_end_of_prio_q+0xac>)
    b6d8:	23ba      	movs	r3, #186	; 0xba
    b6da:	4622      	mov	r2, r4
    b6dc:	490c      	ldr	r1, [pc, #48]	; (b710 <move_thread_to_end_of_prio_q+0xb0>)
    b6de:	480d      	ldr	r0, [pc, #52]	; (b714 <move_thread_to_end_of_prio_q+0xb4>)
    b6e0:	f003 fdbd 	bl	f25e <assert_print>
    b6e4:	21ba      	movs	r1, #186	; 0xba
    b6e6:	4620      	mov	r0, r4
    b6e8:	f003 fdb2 	bl	f250 <assert_post_action>
    b6ec:	e7c6      	b.n	b67c <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    b6ee:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    b6f0:	606b      	str	r3, [r5, #4]
	node->next = successor;
    b6f2:	602c      	str	r4, [r5, #0]
	prev->next = node;
    b6f4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    b6f6:	6065      	str	r5, [r4, #4]
}
    b6f8:	e7dc      	b.n	b6b4 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b6fa:	2400      	movs	r4, #0
    b6fc:	e7c3      	b.n	b686 <move_thread_to_end_of_prio_q+0x26>
    b6fe:	bf00      	nop
    b700:	200047c8 	.word	0x200047c8
    b704:	2000d4dc 	.word	0x2000d4dc
    b708:	2000d4fc 	.word	0x2000d4fc
    b70c:	00013110 	.word	0x00013110
    b710:	0001314c 	.word	0x0001314c
    b714:	0001160c 	.word	0x0001160c

0000b718 <slice_expired_locked>:
{
    b718:	b538      	push	{r3, r4, r5, lr}
    b71a:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    b71c:	4b07      	ldr	r3, [pc, #28]	; (b73c <slice_expired_locked+0x24>)
    b71e:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    b720:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    b722:	f013 0f1f 	tst.w	r3, #31
    b726:	d004      	beq.n	b732 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    b728:	4628      	mov	r0, r5
    b72a:	f7ff fd7f 	bl	b22c <z_reset_time_slice>
}
    b72e:	4620      	mov	r0, r4
    b730:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    b732:	4628      	mov	r0, r5
    b734:	f7ff ff94 	bl	b660 <move_thread_to_end_of_prio_q>
    b738:	e7f6      	b.n	b728 <slice_expired_locked+0x10>
    b73a:	bf00      	nop
    b73c:	2000d4dc 	.word	0x2000d4dc

0000b740 <z_time_slice>:
{
    b740:	b570      	push	{r4, r5, r6, lr}
    b742:	4604      	mov	r4, r0
	__asm__ volatile(
    b744:	f04f 0320 	mov.w	r3, #32
    b748:	f3ef 8511 	mrs	r5, BASEPRI
    b74c:	f383 8812 	msr	BASEPRI_MAX, r3
    b750:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b754:	4842      	ldr	r0, [pc, #264]	; (b860 <z_time_slice+0x120>)
    b756:	f7ff f831 	bl	a7bc <z_spin_lock_valid>
    b75a:	b310      	cbz	r0, b7a2 <z_time_slice+0x62>
	z_spin_lock_set_owner(l);
    b75c:	4840      	ldr	r0, [pc, #256]	; (b860 <z_time_slice+0x120>)
    b75e:	f7ff f84d 	bl	a7fc <z_spin_lock_set_owner>
	return k;
    b762:	462b      	mov	r3, r5
	if (pending_current == _current) {
    b764:	4a3f      	ldr	r2, [pc, #252]	; (b864 <z_time_slice+0x124>)
    b766:	6892      	ldr	r2, [r2, #8]
    b768:	493f      	ldr	r1, [pc, #252]	; (b868 <z_time_slice+0x128>)
    b76a:	6809      	ldr	r1, [r1, #0]
    b76c:	428a      	cmp	r2, r1
    b76e:	d028      	beq.n	b7c2 <z_time_slice+0x82>
	pending_current = NULL;
    b770:	493d      	ldr	r1, [pc, #244]	; (b868 <z_time_slice+0x128>)
    b772:	2000      	movs	r0, #0
    b774:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    b776:	493d      	ldr	r1, [pc, #244]	; (b86c <z_time_slice+0x12c>)
    b778:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    b77a:	2900      	cmp	r1, #0
    b77c:	d052      	beq.n	b824 <z_time_slice+0xe4>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    b77e:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    b780:	297f      	cmp	r1, #127	; 0x7f
    b782:	d83a      	bhi.n	b7fa <z_time_slice+0xba>
    b784:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    b786:	f011 0f1f 	tst.w	r1, #31
    b78a:	d140      	bne.n	b80e <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    b78c:	f992 000e 	ldrsb.w	r0, [r2, #14]
    b790:	4937      	ldr	r1, [pc, #220]	; (b870 <z_time_slice+0x130>)
    b792:	6809      	ldr	r1, [r1, #0]
    b794:	4288      	cmp	r0, r1
    b796:	db3c      	blt.n	b812 <z_time_slice+0xd2>
		&& !z_is_idle_thread_object(thread);
    b798:	4936      	ldr	r1, [pc, #216]	; (b874 <z_time_slice+0x134>)
    b79a:	428a      	cmp	r2, r1
    b79c:	d03b      	beq.n	b816 <z_time_slice+0xd6>
    b79e:	2201      	movs	r2, #1
    b7a0:	e02c      	b.n	b7fc <z_time_slice+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b7a2:	4e35      	ldr	r6, [pc, #212]	; (b878 <z_time_slice+0x138>)
    b7a4:	238e      	movs	r3, #142	; 0x8e
    b7a6:	4632      	mov	r2, r6
    b7a8:	4934      	ldr	r1, [pc, #208]	; (b87c <z_time_slice+0x13c>)
    b7aa:	4835      	ldr	r0, [pc, #212]	; (b880 <z_time_slice+0x140>)
    b7ac:	f003 fd57 	bl	f25e <assert_print>
    b7b0:	492b      	ldr	r1, [pc, #172]	; (b860 <z_time_slice+0x120>)
    b7b2:	4834      	ldr	r0, [pc, #208]	; (b884 <z_time_slice+0x144>)
    b7b4:	f003 fd53 	bl	f25e <assert_print>
    b7b8:	218e      	movs	r1, #142	; 0x8e
    b7ba:	4630      	mov	r0, r6
    b7bc:	f003 fd48 	bl	f250 <assert_post_action>
    b7c0:	e7cc      	b.n	b75c <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    b7c2:	4610      	mov	r0, r2
    b7c4:	f7ff fd32 	bl	b22c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b7c8:	4825      	ldr	r0, [pc, #148]	; (b860 <z_time_slice+0x120>)
    b7ca:	f7ff f807 	bl	a7dc <z_spin_unlock_valid>
    b7ce:	b120      	cbz	r0, b7da <z_time_slice+0x9a>
	__asm__ volatile(
    b7d0:	f385 8811 	msr	BASEPRI, r5
    b7d4:	f3bf 8f6f 	isb	sy
		return;
    b7d8:	e030      	b.n	b83c <z_time_slice+0xfc>
    b7da:	4c27      	ldr	r4, [pc, #156]	; (b878 <z_time_slice+0x138>)
    b7dc:	23b9      	movs	r3, #185	; 0xb9
    b7de:	4622      	mov	r2, r4
    b7e0:	4929      	ldr	r1, [pc, #164]	; (b888 <z_time_slice+0x148>)
    b7e2:	4827      	ldr	r0, [pc, #156]	; (b880 <z_time_slice+0x140>)
    b7e4:	f003 fd3b 	bl	f25e <assert_print>
    b7e8:	491d      	ldr	r1, [pc, #116]	; (b860 <z_time_slice+0x120>)
    b7ea:	4828      	ldr	r0, [pc, #160]	; (b88c <z_time_slice+0x14c>)
    b7ec:	f003 fd37 	bl	f25e <assert_print>
    b7f0:	21b9      	movs	r1, #185	; 0xb9
    b7f2:	4620      	mov	r0, r4
    b7f4:	f003 fd2c 	bl	f250 <assert_post_action>
    b7f8:	e7ea      	b.n	b7d0 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    b7fa:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    b7fc:	b192      	cbz	r2, b824 <z_time_slice+0xe4>
		if (ticks >= _current_cpu->slice_ticks) {
    b7fe:	4a19      	ldr	r2, [pc, #100]	; (b864 <z_time_slice+0x124>)
    b800:	6910      	ldr	r0, [r2, #16]
    b802:	42a0      	cmp	r0, r4
    b804:	dd09      	ble.n	b81a <z_time_slice+0xda>
			_current_cpu->slice_ticks -= ticks;
    b806:	1b00      	subs	r0, r0, r4
    b808:	4a16      	ldr	r2, [pc, #88]	; (b864 <z_time_slice+0x124>)
    b80a:	6110      	str	r0, [r2, #16]
    b80c:	e00d      	b.n	b82a <z_time_slice+0xea>
		&& !z_is_idle_thread_object(thread);
    b80e:	2200      	movs	r2, #0
    b810:	e7f4      	b.n	b7fc <z_time_slice+0xbc>
    b812:	2200      	movs	r2, #0
    b814:	e7f2      	b.n	b7fc <z_time_slice+0xbc>
    b816:	2200      	movs	r2, #0
    b818:	e7f0      	b.n	b7fc <z_time_slice+0xbc>
			key = slice_expired_locked(key);
    b81a:	4628      	mov	r0, r5
    b81c:	f7ff ff7c 	bl	b718 <slice_expired_locked>
    b820:	4603      	mov	r3, r0
    b822:	e002      	b.n	b82a <z_time_slice+0xea>
		_current_cpu->slice_ticks = 0;
    b824:	4a0f      	ldr	r2, [pc, #60]	; (b864 <z_time_slice+0x124>)
    b826:	2100      	movs	r1, #0
    b828:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    b82a:	461c      	mov	r4, r3
    b82c:	480c      	ldr	r0, [pc, #48]	; (b860 <z_time_slice+0x120>)
    b82e:	f7fe ffd5 	bl	a7dc <z_spin_unlock_valid>
    b832:	b120      	cbz	r0, b83e <z_time_slice+0xfe>
    b834:	f384 8811 	msr	BASEPRI, r4
    b838:	f3bf 8f6f 	isb	sy
}
    b83c:	bd70      	pop	{r4, r5, r6, pc}
    b83e:	4d0e      	ldr	r5, [pc, #56]	; (b878 <z_time_slice+0x138>)
    b840:	23b9      	movs	r3, #185	; 0xb9
    b842:	462a      	mov	r2, r5
    b844:	4910      	ldr	r1, [pc, #64]	; (b888 <z_time_slice+0x148>)
    b846:	480e      	ldr	r0, [pc, #56]	; (b880 <z_time_slice+0x140>)
    b848:	f003 fd09 	bl	f25e <assert_print>
    b84c:	4904      	ldr	r1, [pc, #16]	; (b860 <z_time_slice+0x120>)
    b84e:	480f      	ldr	r0, [pc, #60]	; (b88c <z_time_slice+0x14c>)
    b850:	f003 fd05 	bl	f25e <assert_print>
    b854:	21b9      	movs	r1, #185	; 0xb9
    b856:	4628      	mov	r0, r5
    b858:	f003 fcfa 	bl	f250 <assert_post_action>
    b85c:	e7ea      	b.n	b834 <z_time_slice+0xf4>
    b85e:	bf00      	nop
    b860:	2000d518 	.word	0x2000d518
    b864:	2000d4dc 	.word	0x2000d4dc
    b868:	2000d514 	.word	0x2000d514
    b86c:	2000d520 	.word	0x2000d520
    b870:	2000d51c 	.word	0x2000d51c
    b874:	200047c8 	.word	0x200047c8
    b878:	000117b8 	.word	0x000117b8
    b87c:	00011818 	.word	0x00011818
    b880:	0001160c 	.word	0x0001160c
    b884:	00011830 	.word	0x00011830
    b888:	000117e8 	.word	0x000117e8
    b88c:	00011800 	.word	0x00011800

0000b890 <ready_thread>:
{
    b890:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    b892:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    b894:	f990 200d 	ldrsb.w	r2, [r0, #13]
    b898:	2a00      	cmp	r2, #0
    b89a:	db30      	blt.n	b8fe <ready_thread+0x6e>
    b89c:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b89e:	f013 0f1f 	tst.w	r3, #31
    b8a2:	d105      	bne.n	b8b0 <ready_thread+0x20>
	return node->next != NULL;
    b8a4:	6982      	ldr	r2, [r0, #24]
    b8a6:	b10a      	cbz	r2, b8ac <ready_thread+0x1c>
    b8a8:	2200      	movs	r2, #0
    b8aa:	e002      	b.n	b8b2 <ready_thread+0x22>
    b8ac:	2201      	movs	r2, #1
    b8ae:	e000      	b.n	b8b2 <ready_thread+0x22>
    b8b0:	2200      	movs	r2, #0
    b8b2:	b322      	cbz	r2, b8fe <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    b8b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b8b8:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b8ba:	4b1b      	ldr	r3, [pc, #108]	; (b928 <ready_thread+0x98>)
    b8bc:	429c      	cmp	r4, r3
    b8be:	d01f      	beq.n	b900 <ready_thread+0x70>
	return list->head == list;
    b8c0:	4b1a      	ldr	r3, [pc, #104]	; (b92c <ready_thread+0x9c>)
    b8c2:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b8c6:	429d      	cmp	r5, r3
    b8c8:	d02c      	beq.n	b924 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b8ca:	b16d      	cbz	r5, b8e8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b8cc:	4629      	mov	r1, r5
    b8ce:	4620      	mov	r0, r4
    b8d0:	f004 feaf 	bl	10632 <z_sched_prio_cmp>
    b8d4:	2800      	cmp	r0, #0
    b8d6:	dc1f      	bgt.n	b918 <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b8d8:	b135      	cbz	r5, b8e8 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    b8da:	4b14      	ldr	r3, [pc, #80]	; (b92c <ready_thread+0x9c>)
    b8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b8de:	429d      	cmp	r5, r3
    b8e0:	d002      	beq.n	b8e8 <ready_thread+0x58>
    b8e2:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b8e4:	2d00      	cmp	r5, #0
    b8e6:	d1f0      	bne.n	b8ca <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    b8e8:	4b10      	ldr	r3, [pc, #64]	; (b92c <ready_thread+0x9c>)
    b8ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    b8ec:	f103 0120 	add.w	r1, r3, #32
    b8f0:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    b8f2:	6062      	str	r2, [r4, #4]
	tail->next = node;
    b8f4:	6014      	str	r4, [r2, #0]
	list->tail = node;
    b8f6:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    b8f8:	2000      	movs	r0, #0
    b8fa:	f7ff fe6f 	bl	b5dc <update_cache>
}
    b8fe:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    b900:	4d0b      	ldr	r5, [pc, #44]	; (b930 <ready_thread+0xa0>)
    b902:	23ba      	movs	r3, #186	; 0xba
    b904:	462a      	mov	r2, r5
    b906:	490b      	ldr	r1, [pc, #44]	; (b934 <ready_thread+0xa4>)
    b908:	480b      	ldr	r0, [pc, #44]	; (b938 <ready_thread+0xa8>)
    b90a:	f003 fca8 	bl	f25e <assert_print>
    b90e:	21ba      	movs	r1, #186	; 0xba
    b910:	4628      	mov	r0, r5
    b912:	f003 fc9d 	bl	f250 <assert_post_action>
    b916:	e7d3      	b.n	b8c0 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    b918:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    b91a:	6063      	str	r3, [r4, #4]
	node->next = successor;
    b91c:	6025      	str	r5, [r4, #0]
	prev->next = node;
    b91e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b920:	606c      	str	r4, [r5, #4]
}
    b922:	e7e9      	b.n	b8f8 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b924:	2500      	movs	r5, #0
    b926:	e7d0      	b.n	b8ca <ready_thread+0x3a>
    b928:	200047c8 	.word	0x200047c8
    b92c:	2000d4dc 	.word	0x2000d4dc
    b930:	00013110 	.word	0x00013110
    b934:	0001314c 	.word	0x0001314c
    b938:	0001160c 	.word	0x0001160c

0000b93c <z_ready_thread>:
{
    b93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b93e:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    b940:	2400      	movs	r4, #0
	__asm__ volatile(
    b942:	f04f 0320 	mov.w	r3, #32
    b946:	f3ef 8611 	mrs	r6, BASEPRI
    b94a:	f383 8812 	msr	BASEPRI_MAX, r3
    b94e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b952:	481e      	ldr	r0, [pc, #120]	; (b9cc <z_ready_thread+0x90>)
    b954:	f7fe ff32 	bl	a7bc <z_spin_lock_valid>
    b958:	b118      	cbz	r0, b962 <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    b95a:	481c      	ldr	r0, [pc, #112]	; (b9cc <z_ready_thread+0x90>)
    b95c:	f7fe ff4e 	bl	a7fc <z_spin_lock_set_owner>
	return k;
    b960:	e018      	b.n	b994 <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b962:	4f1b      	ldr	r7, [pc, #108]	; (b9d0 <z_ready_thread+0x94>)
    b964:	238e      	movs	r3, #142	; 0x8e
    b966:	463a      	mov	r2, r7
    b968:	491a      	ldr	r1, [pc, #104]	; (b9d4 <z_ready_thread+0x98>)
    b96a:	481b      	ldr	r0, [pc, #108]	; (b9d8 <z_ready_thread+0x9c>)
    b96c:	f003 fc77 	bl	f25e <assert_print>
    b970:	4916      	ldr	r1, [pc, #88]	; (b9cc <z_ready_thread+0x90>)
    b972:	481a      	ldr	r0, [pc, #104]	; (b9dc <z_ready_thread+0xa0>)
    b974:	f003 fc73 	bl	f25e <assert_print>
    b978:	218e      	movs	r1, #142	; 0x8e
    b97a:	4638      	mov	r0, r7
    b97c:	f003 fc68 	bl	f250 <assert_post_action>
    b980:	e7eb      	b.n	b95a <z_ready_thread+0x1e>
			ready_thread(thread);
    b982:	4628      	mov	r0, r5
    b984:	f7ff ff84 	bl	b890 <ready_thread>
    b988:	e00a      	b.n	b9a0 <z_ready_thread+0x64>
	__asm__ volatile(
    b98a:	f386 8811 	msr	BASEPRI, r6
    b98e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b992:	2401      	movs	r4, #1
    b994:	b9cc      	cbnz	r4, b9ca <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    b996:	4628      	mov	r0, r5
    b998:	f004 fe49 	bl	1062e <thread_active_elsewhere>
    b99c:	2800      	cmp	r0, #0
    b99e:	d0f0      	beq.n	b982 <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b9a0:	480a      	ldr	r0, [pc, #40]	; (b9cc <z_ready_thread+0x90>)
    b9a2:	f7fe ff1b 	bl	a7dc <z_spin_unlock_valid>
    b9a6:	2800      	cmp	r0, #0
    b9a8:	d1ef      	bne.n	b98a <z_ready_thread+0x4e>
    b9aa:	4c09      	ldr	r4, [pc, #36]	; (b9d0 <z_ready_thread+0x94>)
    b9ac:	23b9      	movs	r3, #185	; 0xb9
    b9ae:	4622      	mov	r2, r4
    b9b0:	490b      	ldr	r1, [pc, #44]	; (b9e0 <z_ready_thread+0xa4>)
    b9b2:	4809      	ldr	r0, [pc, #36]	; (b9d8 <z_ready_thread+0x9c>)
    b9b4:	f003 fc53 	bl	f25e <assert_print>
    b9b8:	4904      	ldr	r1, [pc, #16]	; (b9cc <z_ready_thread+0x90>)
    b9ba:	480a      	ldr	r0, [pc, #40]	; (b9e4 <z_ready_thread+0xa8>)
    b9bc:	f003 fc4f 	bl	f25e <assert_print>
    b9c0:	21b9      	movs	r1, #185	; 0xb9
    b9c2:	4620      	mov	r0, r4
    b9c4:	f003 fc44 	bl	f250 <assert_post_action>
    b9c8:	e7df      	b.n	b98a <z_ready_thread+0x4e>
}
    b9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b9cc:	2000d518 	.word	0x2000d518
    b9d0:	000117b8 	.word	0x000117b8
    b9d4:	00011818 	.word	0x00011818
    b9d8:	0001160c 	.word	0x0001160c
    b9dc:	00011830 	.word	0x00011830
    b9e0:	000117e8 	.word	0x000117e8
    b9e4:	00011800 	.word	0x00011800

0000b9e8 <z_sched_start>:
{
    b9e8:	b570      	push	{r4, r5, r6, lr}
    b9ea:	4604      	mov	r4, r0
	__asm__ volatile(
    b9ec:	f04f 0320 	mov.w	r3, #32
    b9f0:	f3ef 8511 	mrs	r5, BASEPRI
    b9f4:	f383 8812 	msr	BASEPRI_MAX, r3
    b9f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b9fc:	481f      	ldr	r0, [pc, #124]	; (ba7c <z_sched_start+0x94>)
    b9fe:	f7fe fedd 	bl	a7bc <z_spin_lock_valid>
    ba02:	b188      	cbz	r0, ba28 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    ba04:	481d      	ldr	r0, [pc, #116]	; (ba7c <z_sched_start+0x94>)
    ba06:	f7fe fef9 	bl	a7fc <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    ba0a:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    ba0c:	f013 0f04 	tst.w	r3, #4
    ba10:	d01a      	beq.n	ba48 <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ba12:	f023 0304 	bic.w	r3, r3, #4
    ba16:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    ba18:	4620      	mov	r0, r4
    ba1a:	f7ff ff39 	bl	b890 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    ba1e:	4629      	mov	r1, r5
    ba20:	4816      	ldr	r0, [pc, #88]	; (ba7c <z_sched_start+0x94>)
    ba22:	f7ff fce7 	bl	b3f4 <z_reschedule>
}
    ba26:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ba28:	4e15      	ldr	r6, [pc, #84]	; (ba80 <z_sched_start+0x98>)
    ba2a:	238e      	movs	r3, #142	; 0x8e
    ba2c:	4632      	mov	r2, r6
    ba2e:	4915      	ldr	r1, [pc, #84]	; (ba84 <z_sched_start+0x9c>)
    ba30:	4815      	ldr	r0, [pc, #84]	; (ba88 <z_sched_start+0xa0>)
    ba32:	f003 fc14 	bl	f25e <assert_print>
    ba36:	4911      	ldr	r1, [pc, #68]	; (ba7c <z_sched_start+0x94>)
    ba38:	4814      	ldr	r0, [pc, #80]	; (ba8c <z_sched_start+0xa4>)
    ba3a:	f003 fc10 	bl	f25e <assert_print>
    ba3e:	218e      	movs	r1, #142	; 0x8e
    ba40:	4630      	mov	r0, r6
    ba42:	f003 fc05 	bl	f250 <assert_post_action>
    ba46:	e7dd      	b.n	ba04 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ba48:	480c      	ldr	r0, [pc, #48]	; (ba7c <z_sched_start+0x94>)
    ba4a:	f7fe fec7 	bl	a7dc <z_spin_unlock_valid>
    ba4e:	b120      	cbz	r0, ba5a <z_sched_start+0x72>
	__asm__ volatile(
    ba50:	f385 8811 	msr	BASEPRI, r5
    ba54:	f3bf 8f6f 	isb	sy
		return;
    ba58:	e7e5      	b.n	ba26 <z_sched_start+0x3e>
    ba5a:	4c09      	ldr	r4, [pc, #36]	; (ba80 <z_sched_start+0x98>)
    ba5c:	23b9      	movs	r3, #185	; 0xb9
    ba5e:	4622      	mov	r2, r4
    ba60:	490b      	ldr	r1, [pc, #44]	; (ba90 <z_sched_start+0xa8>)
    ba62:	4809      	ldr	r0, [pc, #36]	; (ba88 <z_sched_start+0xa0>)
    ba64:	f003 fbfb 	bl	f25e <assert_print>
    ba68:	4904      	ldr	r1, [pc, #16]	; (ba7c <z_sched_start+0x94>)
    ba6a:	480a      	ldr	r0, [pc, #40]	; (ba94 <z_sched_start+0xac>)
    ba6c:	f003 fbf7 	bl	f25e <assert_print>
    ba70:	21b9      	movs	r1, #185	; 0xb9
    ba72:	4620      	mov	r0, r4
    ba74:	f003 fbec 	bl	f250 <assert_post_action>
    ba78:	e7ea      	b.n	ba50 <z_sched_start+0x68>
    ba7a:	bf00      	nop
    ba7c:	2000d518 	.word	0x2000d518
    ba80:	000117b8 	.word	0x000117b8
    ba84:	00011818 	.word	0x00011818
    ba88:	0001160c 	.word	0x0001160c
    ba8c:	00011830 	.word	0x00011830
    ba90:	000117e8 	.word	0x000117e8
    ba94:	00011800 	.word	0x00011800

0000ba98 <z_thread_timeout>:
{
    ba98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba9c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    ba9e:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    baa2:	2500      	movs	r5, #0
	__asm__ volatile(
    baa4:	f04f 0320 	mov.w	r3, #32
    baa8:	f3ef 8711 	mrs	r7, BASEPRI
    baac:	f383 8812 	msr	BASEPRI_MAX, r3
    bab0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bab4:	482b      	ldr	r0, [pc, #172]	; (bb64 <z_thread_timeout+0xcc>)
    bab6:	f7fe fe81 	bl	a7bc <z_spin_lock_valid>
    baba:	b118      	cbz	r0, bac4 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    babc:	4829      	ldr	r0, [pc, #164]	; (bb64 <z_thread_timeout+0xcc>)
    babe:	f7fe fe9d 	bl	a7fc <z_spin_lock_set_owner>
	return k;
    bac2:	e026      	b.n	bb12 <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bac4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; bb68 <z_thread_timeout+0xd0>
    bac8:	238e      	movs	r3, #142	; 0x8e
    baca:	4642      	mov	r2, r8
    bacc:	4927      	ldr	r1, [pc, #156]	; (bb6c <z_thread_timeout+0xd4>)
    bace:	4828      	ldr	r0, [pc, #160]	; (bb70 <z_thread_timeout+0xd8>)
    bad0:	f003 fbc5 	bl	f25e <assert_print>
    bad4:	4923      	ldr	r1, [pc, #140]	; (bb64 <z_thread_timeout+0xcc>)
    bad6:	4827      	ldr	r0, [pc, #156]	; (bb74 <z_thread_timeout+0xdc>)
    bad8:	f003 fbc1 	bl	f25e <assert_print>
    badc:	218e      	movs	r1, #142	; 0x8e
    bade:	4640      	mov	r0, r8
    bae0:	f003 fbb6 	bl	f250 <assert_post_action>
    bae4:	e7ea      	b.n	babc <z_thread_timeout+0x24>
    bae6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    baea:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    baee:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    baf2:	f023 0310 	bic.w	r3, r3, #16
    baf6:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    bafa:	4630      	mov	r0, r6
    bafc:	f7ff fec8 	bl	b890 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bb00:	4818      	ldr	r0, [pc, #96]	; (bb64 <z_thread_timeout+0xcc>)
    bb02:	f7fe fe6b 	bl	a7dc <z_spin_unlock_valid>
    bb06:	b1d8      	cbz	r0, bb40 <z_thread_timeout+0xa8>
	__asm__ volatile(
    bb08:	f387 8811 	msr	BASEPRI, r7
    bb0c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bb10:	2501      	movs	r5, #1
    bb12:	bb2d      	cbnz	r5, bb60 <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    bb14:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    bb18:	f013 0f28 	tst.w	r3, #40	; 0x28
    bb1c:	d1f0      	bne.n	bb00 <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    bb1e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    bb22:	2b00      	cmp	r3, #0
    bb24:	d0df      	beq.n	bae6 <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    bb26:	4630      	mov	r0, r6
    bb28:	f7ff fb56 	bl	b1d8 <pended_on_thread>
    bb2c:	4631      	mov	r1, r6
    bb2e:	f7ff fd31 	bl	b594 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    bb32:	7b73      	ldrb	r3, [r6, #13]
    bb34:	f023 0302 	bic.w	r3, r3, #2
    bb38:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    bb3a:	2300      	movs	r3, #0
    bb3c:	60b3      	str	r3, [r6, #8]
}
    bb3e:	e7d2      	b.n	bae6 <z_thread_timeout+0x4e>
    bb40:	4d09      	ldr	r5, [pc, #36]	; (bb68 <z_thread_timeout+0xd0>)
    bb42:	23b9      	movs	r3, #185	; 0xb9
    bb44:	462a      	mov	r2, r5
    bb46:	490c      	ldr	r1, [pc, #48]	; (bb78 <z_thread_timeout+0xe0>)
    bb48:	4809      	ldr	r0, [pc, #36]	; (bb70 <z_thread_timeout+0xd8>)
    bb4a:	f003 fb88 	bl	f25e <assert_print>
    bb4e:	4905      	ldr	r1, [pc, #20]	; (bb64 <z_thread_timeout+0xcc>)
    bb50:	480a      	ldr	r0, [pc, #40]	; (bb7c <z_thread_timeout+0xe4>)
    bb52:	f003 fb84 	bl	f25e <assert_print>
    bb56:	21b9      	movs	r1, #185	; 0xb9
    bb58:	4628      	mov	r0, r5
    bb5a:	f003 fb79 	bl	f250 <assert_post_action>
    bb5e:	e7d3      	b.n	bb08 <z_thread_timeout+0x70>
}
    bb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb64:	2000d518 	.word	0x2000d518
    bb68:	000117b8 	.word	0x000117b8
    bb6c:	00011818 	.word	0x00011818
    bb70:	0001160c 	.word	0x0001160c
    bb74:	00011830 	.word	0x00011830
    bb78:	000117e8 	.word	0x000117e8
    bb7c:	00011800 	.word	0x00011800

0000bb80 <unready_thread>:
{
    bb80:	b510      	push	{r4, lr}
    bb82:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    bb84:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    bb86:	f990 300d 	ldrsb.w	r3, [r0, #13]
    bb8a:	2b00      	cmp	r3, #0
    bb8c:	db08      	blt.n	bba0 <unready_thread+0x20>
	update_cache(thread == _current);
    bb8e:	4b08      	ldr	r3, [pc, #32]	; (bbb0 <unready_thread+0x30>)
    bb90:	6898      	ldr	r0, [r3, #8]
    bb92:	42a0      	cmp	r0, r4
    bb94:	bf14      	ite	ne
    bb96:	2000      	movne	r0, #0
    bb98:	2001      	moveq	r0, #1
    bb9a:	f7ff fd1f 	bl	b5dc <update_cache>
}
    bb9e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bba0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    bba4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    bba6:	4601      	mov	r1, r0
    bba8:	4802      	ldr	r0, [pc, #8]	; (bbb4 <unready_thread+0x34>)
    bbaa:	f7ff fcf3 	bl	b594 <z_priq_dumb_remove>
}
    bbae:	e7ee      	b.n	bb8e <unready_thread+0xe>
    bbb0:	2000d4dc 	.word	0x2000d4dc
    bbb4:	2000d4fc 	.word	0x2000d4fc

0000bbb8 <add_to_waitq_locked>:
{
    bbb8:	b570      	push	{r4, r5, r6, lr}
    bbba:	4605      	mov	r5, r0
    bbbc:	460e      	mov	r6, r1
	unready_thread(thread);
    bbbe:	f7ff ffdf 	bl	bb80 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    bbc2:	7b6b      	ldrb	r3, [r5, #13]
    bbc4:	f043 0302 	orr.w	r3, r3, #2
    bbc8:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    bbca:	b1ce      	cbz	r6, bc00 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    bbcc:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    bbce:	4b17      	ldr	r3, [pc, #92]	; (bc2c <add_to_waitq_locked+0x74>)
    bbd0:	429d      	cmp	r5, r3
    bbd2:	d016      	beq.n	bc02 <add_to_waitq_locked+0x4a>
	return list->head == list;
    bbd4:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bbd6:	42a6      	cmp	r6, r4
    bbd8:	d025      	beq.n	bc26 <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bbda:	b164      	cbz	r4, bbf6 <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bbdc:	4621      	mov	r1, r4
    bbde:	4628      	mov	r0, r5
    bbe0:	f004 fd27 	bl	10632 <z_sched_prio_cmp>
    bbe4:	2800      	cmp	r0, #0
    bbe6:	dc18      	bgt.n	bc1a <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    bbe8:	b12c      	cbz	r4, bbf6 <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    bbea:	6873      	ldr	r3, [r6, #4]
    bbec:	429c      	cmp	r4, r3
    bbee:	d002      	beq.n	bbf6 <add_to_waitq_locked+0x3e>
    bbf0:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bbf2:	2c00      	cmp	r4, #0
    bbf4:	d1f1      	bne.n	bbda <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    bbf6:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    bbf8:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    bbfa:	606b      	str	r3, [r5, #4]
	tail->next = node;
    bbfc:	601d      	str	r5, [r3, #0]
	list->tail = node;
    bbfe:	6075      	str	r5, [r6, #4]
}
    bc00:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    bc02:	4c0b      	ldr	r4, [pc, #44]	; (bc30 <add_to_waitq_locked+0x78>)
    bc04:	23ba      	movs	r3, #186	; 0xba
    bc06:	4622      	mov	r2, r4
    bc08:	490a      	ldr	r1, [pc, #40]	; (bc34 <add_to_waitq_locked+0x7c>)
    bc0a:	480b      	ldr	r0, [pc, #44]	; (bc38 <add_to_waitq_locked+0x80>)
    bc0c:	f003 fb27 	bl	f25e <assert_print>
    bc10:	21ba      	movs	r1, #186	; 0xba
    bc12:	4620      	mov	r0, r4
    bc14:	f003 fb1c 	bl	f250 <assert_post_action>
    bc18:	e7dc      	b.n	bbd4 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    bc1a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    bc1c:	606b      	str	r3, [r5, #4]
	node->next = successor;
    bc1e:	602c      	str	r4, [r5, #0]
	prev->next = node;
    bc20:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    bc22:	6065      	str	r5, [r4, #4]
}
    bc24:	e7ec      	b.n	bc00 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bc26:	2400      	movs	r4, #0
    bc28:	e7d7      	b.n	bbda <add_to_waitq_locked+0x22>
    bc2a:	bf00      	nop
    bc2c:	200047c8 	.word	0x200047c8
    bc30:	00013110 	.word	0x00013110
    bc34:	0001314c 	.word	0x0001314c
    bc38:	0001160c 	.word	0x0001160c

0000bc3c <pend>:
{
    bc3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc40:	4605      	mov	r5, r0
    bc42:	460e      	mov	r6, r1
    bc44:	4691      	mov	r9, r2
    bc46:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    bc48:	2400      	movs	r4, #0
	__asm__ volatile(
    bc4a:	f04f 0320 	mov.w	r3, #32
    bc4e:	f3ef 8711 	mrs	r7, BASEPRI
    bc52:	f383 8812 	msr	BASEPRI_MAX, r3
    bc56:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bc5a:	481f      	ldr	r0, [pc, #124]	; (bcd8 <pend+0x9c>)
    bc5c:	f7fe fdae 	bl	a7bc <z_spin_lock_valid>
    bc60:	b118      	cbz	r0, bc6a <pend+0x2e>
	z_spin_lock_set_owner(l);
    bc62:	481d      	ldr	r0, [pc, #116]	; (bcd8 <pend+0x9c>)
    bc64:	f7fe fdca 	bl	a7fc <z_spin_lock_set_owner>
	return k;
    bc68:	e015      	b.n	bc96 <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bc6a:	f8df a070 	ldr.w	sl, [pc, #112]	; bcdc <pend+0xa0>
    bc6e:	238e      	movs	r3, #142	; 0x8e
    bc70:	4652      	mov	r2, sl
    bc72:	491b      	ldr	r1, [pc, #108]	; (bce0 <pend+0xa4>)
    bc74:	481b      	ldr	r0, [pc, #108]	; (bce4 <pend+0xa8>)
    bc76:	f003 faf2 	bl	f25e <assert_print>
    bc7a:	4917      	ldr	r1, [pc, #92]	; (bcd8 <pend+0x9c>)
    bc7c:	481a      	ldr	r0, [pc, #104]	; (bce8 <pend+0xac>)
    bc7e:	f003 faee 	bl	f25e <assert_print>
    bc82:	218e      	movs	r1, #142	; 0x8e
    bc84:	4650      	mov	r0, sl
    bc86:	f003 fae3 	bl	f250 <assert_post_action>
    bc8a:	e7ea      	b.n	bc62 <pend+0x26>
	__asm__ volatile(
    bc8c:	f387 8811 	msr	BASEPRI, r7
    bc90:	f3bf 8f6f 	isb	sy
    bc94:	2401      	movs	r4, #1
    bc96:	b9c4      	cbnz	r4, bcca <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    bc98:	4631      	mov	r1, r6
    bc9a:	4628      	mov	r0, r5
    bc9c:	f7ff ff8c 	bl	bbb8 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bca0:	480d      	ldr	r0, [pc, #52]	; (bcd8 <pend+0x9c>)
    bca2:	f7fe fd9b 	bl	a7dc <z_spin_unlock_valid>
    bca6:	2800      	cmp	r0, #0
    bca8:	d1f0      	bne.n	bc8c <pend+0x50>
    bcaa:	4c0c      	ldr	r4, [pc, #48]	; (bcdc <pend+0xa0>)
    bcac:	23b9      	movs	r3, #185	; 0xb9
    bcae:	4622      	mov	r2, r4
    bcb0:	490e      	ldr	r1, [pc, #56]	; (bcec <pend+0xb0>)
    bcb2:	480c      	ldr	r0, [pc, #48]	; (bce4 <pend+0xa8>)
    bcb4:	f003 fad3 	bl	f25e <assert_print>
    bcb8:	4907      	ldr	r1, [pc, #28]	; (bcd8 <pend+0x9c>)
    bcba:	480d      	ldr	r0, [pc, #52]	; (bcf0 <pend+0xb4>)
    bcbc:	f003 facf 	bl	f25e <assert_print>
    bcc0:	21b9      	movs	r1, #185	; 0xb9
    bcc2:	4620      	mov	r0, r4
    bcc4:	f003 fac4 	bl	f250 <assert_post_action>
    bcc8:	e7e0      	b.n	bc8c <pend+0x50>
	add_thread_timeout(thread, timeout);
    bcca:	464a      	mov	r2, r9
    bccc:	4643      	mov	r3, r8
    bcce:	4628      	mov	r0, r5
    bcd0:	f7ff fa9c 	bl	b20c <add_thread_timeout>
}
    bcd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bcd8:	2000d518 	.word	0x2000d518
    bcdc:	000117b8 	.word	0x000117b8
    bce0:	00011818 	.word	0x00011818
    bce4:	0001160c 	.word	0x0001160c
    bce8:	00011830 	.word	0x00011830
    bcec:	000117e8 	.word	0x000117e8
    bcf0:	00011800 	.word	0x00011800

0000bcf4 <z_pend_curr>:
{
    bcf4:	b570      	push	{r4, r5, r6, lr}
    bcf6:	4604      	mov	r4, r0
    bcf8:	460d      	mov	r5, r1
    bcfa:	4611      	mov	r1, r2
	pending_current = _current;
    bcfc:	4b0f      	ldr	r3, [pc, #60]	; (bd3c <z_pend_curr+0x48>)
    bcfe:	6898      	ldr	r0, [r3, #8]
    bd00:	4b0f      	ldr	r3, [pc, #60]	; (bd40 <z_pend_curr+0x4c>)
    bd02:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    bd04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    bd08:	f7ff ff98 	bl	bc3c <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bd0c:	4620      	mov	r0, r4
    bd0e:	f7fe fd65 	bl	a7dc <z_spin_unlock_valid>
    bd12:	b118      	cbz	r0, bd1c <z_pend_curr+0x28>
    bd14:	4628      	mov	r0, r5
    bd16:	f7fa f8bd 	bl	5e94 <arch_swap>
}
    bd1a:	bd70      	pop	{r4, r5, r6, pc}
    bd1c:	4e09      	ldr	r6, [pc, #36]	; (bd44 <z_pend_curr+0x50>)
    bd1e:	23d0      	movs	r3, #208	; 0xd0
    bd20:	4632      	mov	r2, r6
    bd22:	4909      	ldr	r1, [pc, #36]	; (bd48 <z_pend_curr+0x54>)
    bd24:	4809      	ldr	r0, [pc, #36]	; (bd4c <z_pend_curr+0x58>)
    bd26:	f003 fa9a 	bl	f25e <assert_print>
    bd2a:	4621      	mov	r1, r4
    bd2c:	4808      	ldr	r0, [pc, #32]	; (bd50 <z_pend_curr+0x5c>)
    bd2e:	f003 fa96 	bl	f25e <assert_print>
    bd32:	21d0      	movs	r1, #208	; 0xd0
    bd34:	4630      	mov	r0, r6
    bd36:	f003 fa8b 	bl	f250 <assert_post_action>
    bd3a:	e7eb      	b.n	bd14 <z_pend_curr+0x20>
    bd3c:	2000d4dc 	.word	0x2000d4dc
    bd40:	2000d514 	.word	0x2000d514
    bd44:	000117b8 	.word	0x000117b8
    bd48:	000117e8 	.word	0x000117e8
    bd4c:	0001160c 	.word	0x0001160c
    bd50:	00011800 	.word	0x00011800

0000bd54 <z_set_prio>:
{
    bd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd58:	4604      	mov	r4, r0
    bd5a:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    bd5c:	2500      	movs	r5, #0
	__asm__ volatile(
    bd5e:	f04f 0320 	mov.w	r3, #32
    bd62:	f3ef 8811 	mrs	r8, BASEPRI
    bd66:	f383 8812 	msr	BASEPRI_MAX, r3
    bd6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bd6e:	4844      	ldr	r0, [pc, #272]	; (be80 <z_set_prio+0x12c>)
    bd70:	f7fe fd24 	bl	a7bc <z_spin_lock_valid>
    bd74:	b120      	cbz	r0, bd80 <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    bd76:	4842      	ldr	r0, [pc, #264]	; (be80 <z_set_prio+0x12c>)
    bd78:	f7fe fd40 	bl	a7fc <z_spin_lock_set_owner>
	bool need_sched = 0;
    bd7c:	2700      	movs	r7, #0
	return k;
    bd7e:	e01d      	b.n	bdbc <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bd80:	4f40      	ldr	r7, [pc, #256]	; (be84 <z_set_prio+0x130>)
    bd82:	238e      	movs	r3, #142	; 0x8e
    bd84:	463a      	mov	r2, r7
    bd86:	4940      	ldr	r1, [pc, #256]	; (be88 <z_set_prio+0x134>)
    bd88:	4840      	ldr	r0, [pc, #256]	; (be8c <z_set_prio+0x138>)
    bd8a:	f003 fa68 	bl	f25e <assert_print>
    bd8e:	493c      	ldr	r1, [pc, #240]	; (be80 <z_set_prio+0x12c>)
    bd90:	483f      	ldr	r0, [pc, #252]	; (be90 <z_set_prio+0x13c>)
    bd92:	f003 fa64 	bl	f25e <assert_print>
    bd96:	218e      	movs	r1, #142	; 0x8e
    bd98:	4638      	mov	r0, r7
    bd9a:	f003 fa59 	bl	f250 <assert_post_action>
    bd9e:	e7ea      	b.n	bd76 <z_set_prio+0x22>
		if (need_sched) {
    bda0:	f013 0701 	ands.w	r7, r3, #1
    bda4:	d116      	bne.n	bdd4 <z_set_prio+0x80>
			thread->base.prio = prio;
    bda6:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bda8:	4835      	ldr	r0, [pc, #212]	; (be80 <z_set_prio+0x12c>)
    bdaa:	f7fe fd17 	bl	a7dc <z_spin_unlock_valid>
    bdae:	2800      	cmp	r0, #0
    bdb0:	d053      	beq.n	be5a <z_set_prio+0x106>
	__asm__ volatile(
    bdb2:	f388 8811 	msr	BASEPRI, r8
    bdb6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bdba:	2501      	movs	r5, #1
    bdbc:	462b      	mov	r3, r5
    bdbe:	2d00      	cmp	r5, #0
    bdc0:	d15b      	bne.n	be7a <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    bdc2:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    bdc4:	f012 0f1f 	tst.w	r2, #31
    bdc8:	d1ea      	bne.n	bda0 <z_set_prio+0x4c>
	return node->next != NULL;
    bdca:	69a1      	ldr	r1, [r4, #24]
    bdcc:	2900      	cmp	r1, #0
    bdce:	d1e7      	bne.n	bda0 <z_set_prio+0x4c>
    bdd0:	2301      	movs	r3, #1
    bdd2:	e7e5      	b.n	bda0 <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bdd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    bdd8:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    bdda:	4621      	mov	r1, r4
    bddc:	482d      	ldr	r0, [pc, #180]	; (be94 <z_set_prio+0x140>)
    bdde:	f7ff fbd9 	bl	b594 <z_priq_dumb_remove>
				thread->base.prio = prio;
    bde2:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    bde4:	7b63      	ldrb	r3, [r4, #13]
    bde6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bdea:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    bdec:	4b2a      	ldr	r3, [pc, #168]	; (be98 <z_set_prio+0x144>)
    bdee:	429c      	cmp	r4, r3
    bdf0:	d01f      	beq.n	be32 <z_set_prio+0xde>
	return list->head == list;
    bdf2:	4b2a      	ldr	r3, [pc, #168]	; (be9c <z_set_prio+0x148>)
    bdf4:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bdf8:	429d      	cmp	r5, r3
    bdfa:	d02c      	beq.n	be56 <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bdfc:	b16d      	cbz	r5, be1a <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bdfe:	4629      	mov	r1, r5
    be00:	4620      	mov	r0, r4
    be02:	f004 fc16 	bl	10632 <z_sched_prio_cmp>
    be06:	2800      	cmp	r0, #0
    be08:	dc1f      	bgt.n	be4a <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    be0a:	b135      	cbz	r5, be1a <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    be0c:	4b23      	ldr	r3, [pc, #140]	; (be9c <z_set_prio+0x148>)
    be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    be10:	429d      	cmp	r5, r3
    be12:	d002      	beq.n	be1a <z_set_prio+0xc6>
    be14:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    be16:	2d00      	cmp	r5, #0
    be18:	d1f0      	bne.n	bdfc <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    be1a:	4b20      	ldr	r3, [pc, #128]	; (be9c <z_set_prio+0x148>)
    be1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    be1e:	f103 0120 	add.w	r1, r3, #32
    be22:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    be24:	6062      	str	r2, [r4, #4]
	tail->next = node;
    be26:	6014      	str	r4, [r2, #0]
	list->tail = node;
    be28:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    be2a:	2001      	movs	r0, #1
    be2c:	f7ff fbd6 	bl	b5dc <update_cache>
    be30:	e7ba      	b.n	bda8 <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    be32:	4d1b      	ldr	r5, [pc, #108]	; (bea0 <z_set_prio+0x14c>)
    be34:	23ba      	movs	r3, #186	; 0xba
    be36:	462a      	mov	r2, r5
    be38:	491a      	ldr	r1, [pc, #104]	; (bea4 <z_set_prio+0x150>)
    be3a:	4814      	ldr	r0, [pc, #80]	; (be8c <z_set_prio+0x138>)
    be3c:	f003 fa0f 	bl	f25e <assert_print>
    be40:	21ba      	movs	r1, #186	; 0xba
    be42:	4628      	mov	r0, r5
    be44:	f003 fa04 	bl	f250 <assert_post_action>
    be48:	e7d3      	b.n	bdf2 <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    be4a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    be4c:	6063      	str	r3, [r4, #4]
	node->next = successor;
    be4e:	6025      	str	r5, [r4, #0]
	prev->next = node;
    be50:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    be52:	606c      	str	r4, [r5, #4]
}
    be54:	e7e9      	b.n	be2a <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    be56:	2500      	movs	r5, #0
    be58:	e7d0      	b.n	bdfc <z_set_prio+0xa8>
    be5a:	4d0a      	ldr	r5, [pc, #40]	; (be84 <z_set_prio+0x130>)
    be5c:	23b9      	movs	r3, #185	; 0xb9
    be5e:	462a      	mov	r2, r5
    be60:	4911      	ldr	r1, [pc, #68]	; (bea8 <z_set_prio+0x154>)
    be62:	480a      	ldr	r0, [pc, #40]	; (be8c <z_set_prio+0x138>)
    be64:	f003 f9fb 	bl	f25e <assert_print>
    be68:	4905      	ldr	r1, [pc, #20]	; (be80 <z_set_prio+0x12c>)
    be6a:	4810      	ldr	r0, [pc, #64]	; (beac <z_set_prio+0x158>)
    be6c:	f003 f9f7 	bl	f25e <assert_print>
    be70:	21b9      	movs	r1, #185	; 0xb9
    be72:	4628      	mov	r0, r5
    be74:	f003 f9ec 	bl	f250 <assert_post_action>
    be78:	e79b      	b.n	bdb2 <z_set_prio+0x5e>
}
    be7a:	4638      	mov	r0, r7
    be7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be80:	2000d518 	.word	0x2000d518
    be84:	000117b8 	.word	0x000117b8
    be88:	00011818 	.word	0x00011818
    be8c:	0001160c 	.word	0x0001160c
    be90:	00011830 	.word	0x00011830
    be94:	2000d4fc 	.word	0x2000d4fc
    be98:	200047c8 	.word	0x200047c8
    be9c:	2000d4dc 	.word	0x2000d4dc
    bea0:	00013110 	.word	0x00013110
    bea4:	0001314c 	.word	0x0001314c
    bea8:	000117e8 	.word	0x000117e8
    beac:	00011800 	.word	0x00011800

0000beb0 <z_impl_k_thread_suspend>:
{
    beb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    beb2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    beb4:	3018      	adds	r0, #24
    beb6:	f000 fdcf 	bl	ca58 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    beba:	2500      	movs	r5, #0
	__asm__ volatile(
    bebc:	f04f 0320 	mov.w	r3, #32
    bec0:	f3ef 8611 	mrs	r6, BASEPRI
    bec4:	f383 8812 	msr	BASEPRI_MAX, r3
    bec8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    becc:	482d      	ldr	r0, [pc, #180]	; (bf84 <z_impl_k_thread_suspend+0xd4>)
    bece:	f7fe fc75 	bl	a7bc <z_spin_lock_valid>
    bed2:	b118      	cbz	r0, bedc <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    bed4:	482b      	ldr	r0, [pc, #172]	; (bf84 <z_impl_k_thread_suspend+0xd4>)
    bed6:	f7fe fc91 	bl	a7fc <z_spin_lock_set_owner>
	return k;
    beda:	e01c      	b.n	bf16 <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bedc:	4f2a      	ldr	r7, [pc, #168]	; (bf88 <z_impl_k_thread_suspend+0xd8>)
    bede:	238e      	movs	r3, #142	; 0x8e
    bee0:	463a      	mov	r2, r7
    bee2:	492a      	ldr	r1, [pc, #168]	; (bf8c <z_impl_k_thread_suspend+0xdc>)
    bee4:	482a      	ldr	r0, [pc, #168]	; (bf90 <z_impl_k_thread_suspend+0xe0>)
    bee6:	f003 f9ba 	bl	f25e <assert_print>
    beea:	4926      	ldr	r1, [pc, #152]	; (bf84 <z_impl_k_thread_suspend+0xd4>)
    beec:	4829      	ldr	r0, [pc, #164]	; (bf94 <z_impl_k_thread_suspend+0xe4>)
    beee:	f003 f9b6 	bl	f25e <assert_print>
    bef2:	218e      	movs	r1, #142	; 0x8e
    bef4:	4638      	mov	r0, r7
    bef6:	f003 f9ab 	bl	f250 <assert_post_action>
    befa:	e7eb      	b.n	bed4 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    befc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    bf00:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    bf02:	4621      	mov	r1, r4
    bf04:	4824      	ldr	r0, [pc, #144]	; (bf98 <z_impl_k_thread_suspend+0xe8>)
    bf06:	f7ff fb45 	bl	b594 <z_priq_dumb_remove>
}
    bf0a:	e00a      	b.n	bf22 <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    bf0c:	f386 8811 	msr	BASEPRI, r6
    bf10:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    bf14:	2501      	movs	r5, #1
    bf16:	bb2d      	cbnz	r5, bf64 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    bf18:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    bf1a:	f994 300d 	ldrsb.w	r3, [r4, #13]
    bf1e:	2b00      	cmp	r3, #0
    bf20:	dbec      	blt.n	befc <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    bf22:	7b63      	ldrb	r3, [r4, #13]
    bf24:	f043 0310 	orr.w	r3, r3, #16
    bf28:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    bf2a:	4b1c      	ldr	r3, [pc, #112]	; (bf9c <z_impl_k_thread_suspend+0xec>)
    bf2c:	6898      	ldr	r0, [r3, #8]
    bf2e:	42a0      	cmp	r0, r4
    bf30:	bf14      	ite	ne
    bf32:	2000      	movne	r0, #0
    bf34:	2001      	moveq	r0, #1
    bf36:	f7ff fb51 	bl	b5dc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bf3a:	4812      	ldr	r0, [pc, #72]	; (bf84 <z_impl_k_thread_suspend+0xd4>)
    bf3c:	f7fe fc4e 	bl	a7dc <z_spin_unlock_valid>
    bf40:	2800      	cmp	r0, #0
    bf42:	d1e3      	bne.n	bf0c <z_impl_k_thread_suspend+0x5c>
    bf44:	4d10      	ldr	r5, [pc, #64]	; (bf88 <z_impl_k_thread_suspend+0xd8>)
    bf46:	23b9      	movs	r3, #185	; 0xb9
    bf48:	462a      	mov	r2, r5
    bf4a:	4915      	ldr	r1, [pc, #84]	; (bfa0 <z_impl_k_thread_suspend+0xf0>)
    bf4c:	4810      	ldr	r0, [pc, #64]	; (bf90 <z_impl_k_thread_suspend+0xe0>)
    bf4e:	f003 f986 	bl	f25e <assert_print>
    bf52:	490c      	ldr	r1, [pc, #48]	; (bf84 <z_impl_k_thread_suspend+0xd4>)
    bf54:	4813      	ldr	r0, [pc, #76]	; (bfa4 <z_impl_k_thread_suspend+0xf4>)
    bf56:	f003 f982 	bl	f25e <assert_print>
    bf5a:	21b9      	movs	r1, #185	; 0xb9
    bf5c:	4628      	mov	r0, r5
    bf5e:	f003 f977 	bl	f250 <assert_post_action>
    bf62:	e7d3      	b.n	bf0c <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    bf64:	4b0d      	ldr	r3, [pc, #52]	; (bf9c <z_impl_k_thread_suspend+0xec>)
    bf66:	689b      	ldr	r3, [r3, #8]
    bf68:	42a3      	cmp	r3, r4
    bf6a:	d000      	beq.n	bf6e <z_impl_k_thread_suspend+0xbe>
}
    bf6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    bf6e:	f04f 0320 	mov.w	r3, #32
    bf72:	f3ef 8011 	mrs	r0, BASEPRI
    bf76:	f383 8812 	msr	BASEPRI_MAX, r3
    bf7a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    bf7e:	f004 fb62 	bl	10646 <z_reschedule_irqlock>
    bf82:	e7f3      	b.n	bf6c <z_impl_k_thread_suspend+0xbc>
    bf84:	2000d518 	.word	0x2000d518
    bf88:	000117b8 	.word	0x000117b8
    bf8c:	00011818 	.word	0x00011818
    bf90:	0001160c 	.word	0x0001160c
    bf94:	00011830 	.word	0x00011830
    bf98:	2000d4fc 	.word	0x2000d4fc
    bf9c:	2000d4dc 	.word	0x2000d4dc
    bfa0:	000117e8 	.word	0x000117e8
    bfa4:	00011800 	.word	0x00011800

0000bfa8 <k_sched_unlock>:
{
    bfa8:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    bfaa:	2400      	movs	r4, #0
    bfac:	f04f 0320 	mov.w	r3, #32
    bfb0:	f3ef 8511 	mrs	r5, BASEPRI
    bfb4:	f383 8812 	msr	BASEPRI_MAX, r3
    bfb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bfbc:	4838      	ldr	r0, [pc, #224]	; (c0a0 <k_sched_unlock+0xf8>)
    bfbe:	f7fe fbfd 	bl	a7bc <z_spin_lock_valid>
    bfc2:	b118      	cbz	r0, bfcc <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    bfc4:	4836      	ldr	r0, [pc, #216]	; (c0a0 <k_sched_unlock+0xf8>)
    bfc6:	f7fe fc19 	bl	a7fc <z_spin_lock_set_owner>
	return k;
    bfca:	e036      	b.n	c03a <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bfcc:	4e35      	ldr	r6, [pc, #212]	; (c0a4 <k_sched_unlock+0xfc>)
    bfce:	238e      	movs	r3, #142	; 0x8e
    bfd0:	4632      	mov	r2, r6
    bfd2:	4935      	ldr	r1, [pc, #212]	; (c0a8 <k_sched_unlock+0x100>)
    bfd4:	4835      	ldr	r0, [pc, #212]	; (c0ac <k_sched_unlock+0x104>)
    bfd6:	f003 f942 	bl	f25e <assert_print>
    bfda:	4931      	ldr	r1, [pc, #196]	; (c0a0 <k_sched_unlock+0xf8>)
    bfdc:	4834      	ldr	r0, [pc, #208]	; (c0b0 <k_sched_unlock+0x108>)
    bfde:	f003 f93e 	bl	f25e <assert_print>
    bfe2:	218e      	movs	r1, #142	; 0x8e
    bfe4:	4630      	mov	r0, r6
    bfe6:	f003 f933 	bl	f250 <assert_post_action>
    bfea:	e7eb      	b.n	bfc4 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    bfec:	4c31      	ldr	r4, [pc, #196]	; (c0b4 <k_sched_unlock+0x10c>)
    bfee:	f240 33bb 	movw	r3, #955	; 0x3bb
    bff2:	4622      	mov	r2, r4
    bff4:	4930      	ldr	r1, [pc, #192]	; (c0b8 <k_sched_unlock+0x110>)
    bff6:	482d      	ldr	r0, [pc, #180]	; (c0ac <k_sched_unlock+0x104>)
    bff8:	f003 f931 	bl	f25e <assert_print>
    bffc:	482f      	ldr	r0, [pc, #188]	; (c0bc <k_sched_unlock+0x114>)
    bffe:	f003 f92e 	bl	f25e <assert_print>
    c002:	f240 31bb 	movw	r1, #955	; 0x3bb
    c006:	4620      	mov	r0, r4
    c008:	f003 f922 	bl	f250 <assert_post_action>
    c00c:	e01b      	b.n	c046 <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    c00e:	4c29      	ldr	r4, [pc, #164]	; (c0b4 <k_sched_unlock+0x10c>)
    c010:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    c014:	4622      	mov	r2, r4
    c016:	492a      	ldr	r1, [pc, #168]	; (c0c0 <k_sched_unlock+0x118>)
    c018:	4824      	ldr	r0, [pc, #144]	; (c0ac <k_sched_unlock+0x104>)
    c01a:	f003 f920 	bl	f25e <assert_print>
    c01e:	4827      	ldr	r0, [pc, #156]	; (c0bc <k_sched_unlock+0x114>)
    c020:	f003 f91d 	bl	f25e <assert_print>
    c024:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    c028:	4620      	mov	r0, r4
    c02a:	f003 f911 	bl	f250 <assert_post_action>
    c02e:	e00e      	b.n	c04e <k_sched_unlock+0xa6>
	__asm__ volatile(
    c030:	f385 8811 	msr	BASEPRI, r5
    c034:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    c038:	2401      	movs	r4, #1
    c03a:	bb2c      	cbnz	r4, c088 <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    c03c:	4b21      	ldr	r3, [pc, #132]	; (c0c4 <k_sched_unlock+0x11c>)
    c03e:	689b      	ldr	r3, [r3, #8]
    c040:	7bdb      	ldrb	r3, [r3, #15]
    c042:	2b00      	cmp	r3, #0
    c044:	d0d2      	beq.n	bfec <k_sched_unlock+0x44>
    c046:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    c04a:	2b00      	cmp	r3, #0
    c04c:	d1df      	bne.n	c00e <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    c04e:	4b1d      	ldr	r3, [pc, #116]	; (c0c4 <k_sched_unlock+0x11c>)
    c050:	689a      	ldr	r2, [r3, #8]
    c052:	7bd3      	ldrb	r3, [r2, #15]
    c054:	3301      	adds	r3, #1
    c056:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    c058:	2000      	movs	r0, #0
    c05a:	f7ff fabf 	bl	b5dc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c05e:	4810      	ldr	r0, [pc, #64]	; (c0a0 <k_sched_unlock+0xf8>)
    c060:	f7fe fbbc 	bl	a7dc <z_spin_unlock_valid>
    c064:	2800      	cmp	r0, #0
    c066:	d1e3      	bne.n	c030 <k_sched_unlock+0x88>
    c068:	4c0e      	ldr	r4, [pc, #56]	; (c0a4 <k_sched_unlock+0xfc>)
    c06a:	23b9      	movs	r3, #185	; 0xb9
    c06c:	4622      	mov	r2, r4
    c06e:	4916      	ldr	r1, [pc, #88]	; (c0c8 <k_sched_unlock+0x120>)
    c070:	480e      	ldr	r0, [pc, #56]	; (c0ac <k_sched_unlock+0x104>)
    c072:	f003 f8f4 	bl	f25e <assert_print>
    c076:	490a      	ldr	r1, [pc, #40]	; (c0a0 <k_sched_unlock+0xf8>)
    c078:	4814      	ldr	r0, [pc, #80]	; (c0cc <k_sched_unlock+0x124>)
    c07a:	f003 f8f0 	bl	f25e <assert_print>
    c07e:	21b9      	movs	r1, #185	; 0xb9
    c080:	4620      	mov	r0, r4
    c082:	f003 f8e5 	bl	f250 <assert_post_action>
    c086:	e7d3      	b.n	c030 <k_sched_unlock+0x88>
	__asm__ volatile(
    c088:	f04f 0320 	mov.w	r3, #32
    c08c:	f3ef 8011 	mrs	r0, BASEPRI
    c090:	f383 8812 	msr	BASEPRI_MAX, r3
    c094:	f3bf 8f6f 	isb	sy
    c098:	f004 fad5 	bl	10646 <z_reschedule_irqlock>
}
    c09c:	bd70      	pop	{r4, r5, r6, pc}
    c09e:	bf00      	nop
    c0a0:	2000d518 	.word	0x2000d518
    c0a4:	000117b8 	.word	0x000117b8
    c0a8:	00011818 	.word	0x00011818
    c0ac:	0001160c 	.word	0x0001160c
    c0b0:	00011830 	.word	0x00011830
    c0b4:	00013110 	.word	0x00013110
    c0b8:	00013198 	.word	0x00013198
    c0bc:	00013068 	.word	0x00013068
    c0c0:	00012f20 	.word	0x00012f20
    c0c4:	2000d4dc 	.word	0x2000d4dc
    c0c8:	000117e8 	.word	0x000117e8
    c0cc:	00011800 	.word	0x00011800

0000c0d0 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    c0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    c0d2:	7b43      	ldrb	r3, [r0, #13]
    c0d4:	f013 0f08 	tst.w	r3, #8
    c0d8:	d145      	bne.n	c166 <end_thread+0x96>
    c0da:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    c0dc:	f043 0308 	orr.w	r3, r3, #8
    c0e0:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    c0e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    c0e6:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    c0e8:	f013 0f80 	tst.w	r3, #128	; 0x80
    c0ec:	d12d      	bne.n	c14a <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    c0ee:	68ab      	ldr	r3, [r5, #8]
    c0f0:	b15b      	cbz	r3, c10a <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    c0f2:	4628      	mov	r0, r5
    c0f4:	f7ff f870 	bl	b1d8 <pended_on_thread>
    c0f8:	4629      	mov	r1, r5
    c0fa:	f7ff fa4b 	bl	b594 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    c0fe:	7b6b      	ldrb	r3, [r5, #13]
    c100:	f023 0302 	bic.w	r3, r3, #2
    c104:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    c106:	2300      	movs	r3, #0
    c108:	60ab      	str	r3, [r5, #8]
    c10a:	f105 0018 	add.w	r0, r5, #24
    c10e:	f000 fca3 	bl	ca58 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    c112:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    c116:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c118:	42bc      	cmp	r4, r7
    c11a:	d01e      	beq.n	c15a <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    c11c:	b1ec      	cbz	r4, c15a <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    c11e:	4620      	mov	r0, r4
    c120:	f7ff f85a 	bl	b1d8 <pended_on_thread>
    c124:	4621      	mov	r1, r4
    c126:	f7ff fa35 	bl	b594 <z_priq_dumb_remove>
    c12a:	7b63      	ldrb	r3, [r4, #13]
    c12c:	f023 0302 	bic.w	r3, r3, #2
    c130:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    c132:	2600      	movs	r6, #0
    c134:	60a6      	str	r6, [r4, #8]
    c136:	f104 0018 	add.w	r0, r4, #24
    c13a:	f000 fc8d 	bl	ca58 <z_abort_timeout>
    c13e:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    c142:	4620      	mov	r0, r4
    c144:	f7ff fba4 	bl	b890 <ready_thread>
    c148:	e7e5      	b.n	c116 <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c14a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c14e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    c150:	4601      	mov	r1, r0
    c152:	4805      	ldr	r0, [pc, #20]	; (c168 <end_thread+0x98>)
    c154:	f7ff fa1e 	bl	b594 <z_priq_dumb_remove>
}
    c158:	e7c9      	b.n	c0ee <end_thread+0x1e>
		update_cache(1);
    c15a:	2001      	movs	r0, #1
    c15c:	f7ff fa3e 	bl	b5dc <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    c160:	4628      	mov	r0, r5
    c162:	f7fe fb53 	bl	a80c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    c166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c168:	2000d4fc 	.word	0x2000d4fc

0000c16c <z_unpend1_no_timeout>:
{
    c16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c16e:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    c170:	2500      	movs	r5, #0
    c172:	f04f 0320 	mov.w	r3, #32
    c176:	f3ef 8711 	mrs	r7, BASEPRI
    c17a:	f383 8812 	msr	BASEPRI_MAX, r3
    c17e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c182:	4823      	ldr	r0, [pc, #140]	; (c210 <z_unpend1_no_timeout+0xa4>)
    c184:	f7fe fb1a 	bl	a7bc <z_spin_lock_valid>
    c188:	b120      	cbz	r0, c194 <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
    c18a:	4821      	ldr	r0, [pc, #132]	; (c210 <z_unpend1_no_timeout+0xa4>)
    c18c:	f7fe fb36 	bl	a7fc <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    c190:	2400      	movs	r4, #0
	return k;
    c192:	e018      	b.n	c1c6 <z_unpend1_no_timeout+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c194:	4c1f      	ldr	r4, [pc, #124]	; (c214 <z_unpend1_no_timeout+0xa8>)
    c196:	238e      	movs	r3, #142	; 0x8e
    c198:	4622      	mov	r2, r4
    c19a:	491f      	ldr	r1, [pc, #124]	; (c218 <z_unpend1_no_timeout+0xac>)
    c19c:	481f      	ldr	r0, [pc, #124]	; (c21c <z_unpend1_no_timeout+0xb0>)
    c19e:	f003 f85e 	bl	f25e <assert_print>
    c1a2:	491b      	ldr	r1, [pc, #108]	; (c210 <z_unpend1_no_timeout+0xa4>)
    c1a4:	481e      	ldr	r0, [pc, #120]	; (c220 <z_unpend1_no_timeout+0xb4>)
    c1a6:	f003 f85a 	bl	f25e <assert_print>
    c1aa:	218e      	movs	r1, #142	; 0x8e
    c1ac:	4620      	mov	r0, r4
    c1ae:	f003 f84f 	bl	f250 <assert_post_action>
    c1b2:	e7ea      	b.n	c18a <z_unpend1_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c1b4:	4816      	ldr	r0, [pc, #88]	; (c210 <z_unpend1_no_timeout+0xa4>)
    c1b6:	f7fe fb11 	bl	a7dc <z_spin_unlock_valid>
    c1ba:	b1b8      	cbz	r0, c1ec <z_unpend1_no_timeout+0x80>
	__asm__ volatile(
    c1bc:	f387 8811 	msr	BASEPRI, r7
    c1c0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    c1c4:	2501      	movs	r5, #1
    c1c6:	bb0d      	cbnz	r5, c20c <z_unpend1_no_timeout+0xa0>
		thread = _priq_wait_best(&wait_q->waitq);
    c1c8:	4630      	mov	r0, r6
    c1ca:	f004 fa51 	bl	10670 <z_priq_dumb_best>
		if (thread != NULL) {
    c1ce:	4604      	mov	r4, r0
    c1d0:	2800      	cmp	r0, #0
    c1d2:	d0ef      	beq.n	c1b4 <z_unpend1_no_timeout+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    c1d4:	f7ff f800 	bl	b1d8 <pended_on_thread>
    c1d8:	4621      	mov	r1, r4
    c1da:	f7ff f9db 	bl	b594 <z_priq_dumb_remove>
    c1de:	7b63      	ldrb	r3, [r4, #13]
    c1e0:	f023 0302 	bic.w	r3, r3, #2
    c1e4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    c1e6:	2300      	movs	r3, #0
    c1e8:	60a3      	str	r3, [r4, #8]
}
    c1ea:	e7e3      	b.n	c1b4 <z_unpend1_no_timeout+0x48>
    c1ec:	4d09      	ldr	r5, [pc, #36]	; (c214 <z_unpend1_no_timeout+0xa8>)
    c1ee:	23b9      	movs	r3, #185	; 0xb9
    c1f0:	462a      	mov	r2, r5
    c1f2:	490c      	ldr	r1, [pc, #48]	; (c224 <z_unpend1_no_timeout+0xb8>)
    c1f4:	4809      	ldr	r0, [pc, #36]	; (c21c <z_unpend1_no_timeout+0xb0>)
    c1f6:	f003 f832 	bl	f25e <assert_print>
    c1fa:	4905      	ldr	r1, [pc, #20]	; (c210 <z_unpend1_no_timeout+0xa4>)
    c1fc:	480a      	ldr	r0, [pc, #40]	; (c228 <z_unpend1_no_timeout+0xbc>)
    c1fe:	f003 f82e 	bl	f25e <assert_print>
    c202:	21b9      	movs	r1, #185	; 0xb9
    c204:	4628      	mov	r0, r5
    c206:	f003 f823 	bl	f250 <assert_post_action>
    c20a:	e7d7      	b.n	c1bc <z_unpend1_no_timeout+0x50>
}
    c20c:	4620      	mov	r0, r4
    c20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c210:	2000d518 	.word	0x2000d518
    c214:	000117b8 	.word	0x000117b8
    c218:	00011818 	.word	0x00011818
    c21c:	0001160c 	.word	0x0001160c
    c220:	00011830 	.word	0x00011830
    c224:	000117e8 	.word	0x000117e8
    c228:	00011800 	.word	0x00011800

0000c22c <z_unpend_first_thread>:
{
    c22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c22e:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    c230:	2500      	movs	r5, #0
	__asm__ volatile(
    c232:	f04f 0320 	mov.w	r3, #32
    c236:	f3ef 8711 	mrs	r7, BASEPRI
    c23a:	f383 8812 	msr	BASEPRI_MAX, r3
    c23e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c242:	4825      	ldr	r0, [pc, #148]	; (c2d8 <z_unpend_first_thread+0xac>)
    c244:	f7fe faba 	bl	a7bc <z_spin_lock_valid>
    c248:	b120      	cbz	r0, c254 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    c24a:	4823      	ldr	r0, [pc, #140]	; (c2d8 <z_unpend_first_thread+0xac>)
    c24c:	f7fe fad6 	bl	a7fc <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    c250:	2400      	movs	r4, #0
	return k;
    c252:	e018      	b.n	c286 <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c254:	4c21      	ldr	r4, [pc, #132]	; (c2dc <z_unpend_first_thread+0xb0>)
    c256:	238e      	movs	r3, #142	; 0x8e
    c258:	4622      	mov	r2, r4
    c25a:	4921      	ldr	r1, [pc, #132]	; (c2e0 <z_unpend_first_thread+0xb4>)
    c25c:	4821      	ldr	r0, [pc, #132]	; (c2e4 <z_unpend_first_thread+0xb8>)
    c25e:	f002 fffe 	bl	f25e <assert_print>
    c262:	491d      	ldr	r1, [pc, #116]	; (c2d8 <z_unpend_first_thread+0xac>)
    c264:	4820      	ldr	r0, [pc, #128]	; (c2e8 <z_unpend_first_thread+0xbc>)
    c266:	f002 fffa 	bl	f25e <assert_print>
    c26a:	218e      	movs	r1, #142	; 0x8e
    c26c:	4620      	mov	r0, r4
    c26e:	f002 ffef 	bl	f250 <assert_post_action>
    c272:	e7ea      	b.n	c24a <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c274:	4818      	ldr	r0, [pc, #96]	; (c2d8 <z_unpend_first_thread+0xac>)
    c276:	f7fe fab1 	bl	a7dc <z_spin_unlock_valid>
    c27a:	b1d8      	cbz	r0, c2b4 <z_unpend_first_thread+0x88>
	__asm__ volatile(
    c27c:	f387 8811 	msr	BASEPRI, r7
    c280:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    c284:	2501      	movs	r5, #1
    c286:	bb2d      	cbnz	r5, c2d4 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    c288:	4630      	mov	r0, r6
    c28a:	f004 f9f1 	bl	10670 <z_priq_dumb_best>
		if (thread != NULL) {
    c28e:	4604      	mov	r4, r0
    c290:	2800      	cmp	r0, #0
    c292:	d0ef      	beq.n	c274 <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    c294:	f7fe ffa0 	bl	b1d8 <pended_on_thread>
    c298:	4621      	mov	r1, r4
    c29a:	f7ff f97b 	bl	b594 <z_priq_dumb_remove>
    c29e:	7b63      	ldrb	r3, [r4, #13]
    c2a0:	f023 0302 	bic.w	r3, r3, #2
    c2a4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    c2a6:	2300      	movs	r3, #0
    c2a8:	60a3      	str	r3, [r4, #8]
    c2aa:	f104 0018 	add.w	r0, r4, #24
    c2ae:	f000 fbd3 	bl	ca58 <z_abort_timeout>
    c2b2:	e7df      	b.n	c274 <z_unpend_first_thread+0x48>
    c2b4:	4d09      	ldr	r5, [pc, #36]	; (c2dc <z_unpend_first_thread+0xb0>)
    c2b6:	23b9      	movs	r3, #185	; 0xb9
    c2b8:	462a      	mov	r2, r5
    c2ba:	490c      	ldr	r1, [pc, #48]	; (c2ec <z_unpend_first_thread+0xc0>)
    c2bc:	4809      	ldr	r0, [pc, #36]	; (c2e4 <z_unpend_first_thread+0xb8>)
    c2be:	f002 ffce 	bl	f25e <assert_print>
    c2c2:	4905      	ldr	r1, [pc, #20]	; (c2d8 <z_unpend_first_thread+0xac>)
    c2c4:	480a      	ldr	r0, [pc, #40]	; (c2f0 <z_unpend_first_thread+0xc4>)
    c2c6:	f002 ffca 	bl	f25e <assert_print>
    c2ca:	21b9      	movs	r1, #185	; 0xb9
    c2cc:	4628      	mov	r0, r5
    c2ce:	f002 ffbf 	bl	f250 <assert_post_action>
    c2d2:	e7d3      	b.n	c27c <z_unpend_first_thread+0x50>
}
    c2d4:	4620      	mov	r0, r4
    c2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c2d8:	2000d518 	.word	0x2000d518
    c2dc:	000117b8 	.word	0x000117b8
    c2e0:	00011818 	.word	0x00011818
    c2e4:	0001160c 	.word	0x0001160c
    c2e8:	00011830 	.word	0x00011830
    c2ec:	000117e8 	.word	0x000117e8
    c2f0:	00011800 	.word	0x00011800

0000c2f4 <z_sched_init>:
{
    c2f4:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    c2f6:	4804      	ldr	r0, [pc, #16]	; (c308 <z_sched_init+0x14>)
    c2f8:	f004 f9c1 	bl	1067e <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    c2fc:	2100      	movs	r1, #0
    c2fe:	4608      	mov	r0, r1
    c300:	f7fe ffa8 	bl	b254 <k_sched_time_slice_set>
}
    c304:	bd08      	pop	{r3, pc}
    c306:	bf00      	nop
    c308:	2000d4f8 	.word	0x2000d4f8

0000c30c <z_impl_k_yield>:
{
    c30c:	b570      	push	{r4, r5, r6, lr}
    c30e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    c312:	2b00      	cmp	r3, #0
    c314:	d149      	bne.n	c3aa <z_impl_k_yield+0x9e>
	__asm__ volatile(
    c316:	f04f 0320 	mov.w	r3, #32
    c31a:	f3ef 8611 	mrs	r6, BASEPRI
    c31e:	f383 8812 	msr	BASEPRI_MAX, r3
    c322:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c326:	4843      	ldr	r0, [pc, #268]	; (c434 <z_impl_k_yield+0x128>)
    c328:	f7fe fa48 	bl	a7bc <z_spin_lock_valid>
    c32c:	2800      	cmp	r0, #0
    c32e:	d04d      	beq.n	c3cc <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    c330:	4840      	ldr	r0, [pc, #256]	; (c434 <z_impl_k_yield+0x128>)
    c332:	f7fe fa63 	bl	a7fc <z_spin_lock_set_owner>
		dequeue_thread(_current);
    c336:	4c40      	ldr	r4, [pc, #256]	; (c438 <z_impl_k_yield+0x12c>)
    c338:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c33a:	7b4b      	ldrb	r3, [r1, #13]
    c33c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    c340:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    c342:	f104 0020 	add.w	r0, r4, #32
    c346:	f7ff f925 	bl	b594 <z_priq_dumb_remove>
	queue_thread(_current);
    c34a:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    c34c:	7b6b      	ldrb	r3, [r5, #13]
    c34e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    c352:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    c354:	4b39      	ldr	r3, [pc, #228]	; (c43c <z_impl_k_yield+0x130>)
    c356:	429d      	cmp	r5, r3
    c358:	d048      	beq.n	c3ec <z_impl_k_yield+0xe0>
	return list->head == list;
    c35a:	4b37      	ldr	r3, [pc, #220]	; (c438 <z_impl_k_yield+0x12c>)
    c35c:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c360:	429c      	cmp	r4, r3
    c362:	d055      	beq.n	c410 <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c364:	b16c      	cbz	r4, c382 <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    c366:	4621      	mov	r1, r4
    c368:	4628      	mov	r0, r5
    c36a:	f004 f962 	bl	10632 <z_sched_prio_cmp>
    c36e:	2800      	cmp	r0, #0
    c370:	dc48      	bgt.n	c404 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    c372:	b134      	cbz	r4, c382 <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    c374:	4b30      	ldr	r3, [pc, #192]	; (c438 <z_impl_k_yield+0x12c>)
    c376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c378:	429c      	cmp	r4, r3
    c37a:	d002      	beq.n	c382 <z_impl_k_yield+0x76>
    c37c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c37e:	2c00      	cmp	r4, #0
    c380:	d1f0      	bne.n	c364 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    c382:	4b2d      	ldr	r3, [pc, #180]	; (c438 <z_impl_k_yield+0x12c>)
    c384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    c386:	f103 0120 	add.w	r1, r3, #32
    c38a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    c38c:	606a      	str	r2, [r5, #4]
	tail->next = node;
    c38e:	6015      	str	r5, [r2, #0]
	list->tail = node;
    c390:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    c392:	2001      	movs	r0, #1
    c394:	f7ff f922 	bl	b5dc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c398:	4826      	ldr	r0, [pc, #152]	; (c434 <z_impl_k_yield+0x128>)
    c39a:	f7fe fa1f 	bl	a7dc <z_spin_unlock_valid>
    c39e:	2800      	cmp	r0, #0
    c3a0:	d038      	beq.n	c414 <z_impl_k_yield+0x108>
    c3a2:	4630      	mov	r0, r6
    c3a4:	f7f9 fd76 	bl	5e94 <arch_swap>
}
    c3a8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    c3aa:	4c25      	ldr	r4, [pc, #148]	; (c440 <z_impl_k_yield+0x134>)
    c3ac:	f240 5332 	movw	r3, #1330	; 0x532
    c3b0:	4622      	mov	r2, r4
    c3b2:	4924      	ldr	r1, [pc, #144]	; (c444 <z_impl_k_yield+0x138>)
    c3b4:	4824      	ldr	r0, [pc, #144]	; (c448 <z_impl_k_yield+0x13c>)
    c3b6:	f002 ff52 	bl	f25e <assert_print>
    c3ba:	4824      	ldr	r0, [pc, #144]	; (c44c <z_impl_k_yield+0x140>)
    c3bc:	f002 ff4f 	bl	f25e <assert_print>
    c3c0:	f240 5132 	movw	r1, #1330	; 0x532
    c3c4:	4620      	mov	r0, r4
    c3c6:	f002 ff43 	bl	f250 <assert_post_action>
    c3ca:	e7a4      	b.n	c316 <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c3cc:	4c20      	ldr	r4, [pc, #128]	; (c450 <z_impl_k_yield+0x144>)
    c3ce:	238e      	movs	r3, #142	; 0x8e
    c3d0:	4622      	mov	r2, r4
    c3d2:	4920      	ldr	r1, [pc, #128]	; (c454 <z_impl_k_yield+0x148>)
    c3d4:	481c      	ldr	r0, [pc, #112]	; (c448 <z_impl_k_yield+0x13c>)
    c3d6:	f002 ff42 	bl	f25e <assert_print>
    c3da:	4916      	ldr	r1, [pc, #88]	; (c434 <z_impl_k_yield+0x128>)
    c3dc:	481e      	ldr	r0, [pc, #120]	; (c458 <z_impl_k_yield+0x14c>)
    c3de:	f002 ff3e 	bl	f25e <assert_print>
    c3e2:	218e      	movs	r1, #142	; 0x8e
    c3e4:	4620      	mov	r0, r4
    c3e6:	f002 ff33 	bl	f250 <assert_post_action>
    c3ea:	e7a1      	b.n	c330 <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    c3ec:	4c14      	ldr	r4, [pc, #80]	; (c440 <z_impl_k_yield+0x134>)
    c3ee:	23ba      	movs	r3, #186	; 0xba
    c3f0:	4622      	mov	r2, r4
    c3f2:	491a      	ldr	r1, [pc, #104]	; (c45c <z_impl_k_yield+0x150>)
    c3f4:	4814      	ldr	r0, [pc, #80]	; (c448 <z_impl_k_yield+0x13c>)
    c3f6:	f002 ff32 	bl	f25e <assert_print>
    c3fa:	21ba      	movs	r1, #186	; 0xba
    c3fc:	4620      	mov	r0, r4
    c3fe:	f002 ff27 	bl	f250 <assert_post_action>
    c402:	e7aa      	b.n	c35a <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    c404:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    c406:	606b      	str	r3, [r5, #4]
	node->next = successor;
    c408:	602c      	str	r4, [r5, #0]
	prev->next = node;
    c40a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    c40c:	6065      	str	r5, [r4, #4]
}
    c40e:	e7c0      	b.n	c392 <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    c410:	2400      	movs	r4, #0
    c412:	e7a7      	b.n	c364 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c414:	4c0e      	ldr	r4, [pc, #56]	; (c450 <z_impl_k_yield+0x144>)
    c416:	23d0      	movs	r3, #208	; 0xd0
    c418:	4622      	mov	r2, r4
    c41a:	4911      	ldr	r1, [pc, #68]	; (c460 <z_impl_k_yield+0x154>)
    c41c:	480a      	ldr	r0, [pc, #40]	; (c448 <z_impl_k_yield+0x13c>)
    c41e:	f002 ff1e 	bl	f25e <assert_print>
    c422:	4904      	ldr	r1, [pc, #16]	; (c434 <z_impl_k_yield+0x128>)
    c424:	480f      	ldr	r0, [pc, #60]	; (c464 <z_impl_k_yield+0x158>)
    c426:	f002 ff1a 	bl	f25e <assert_print>
    c42a:	21d0      	movs	r1, #208	; 0xd0
    c42c:	4620      	mov	r0, r4
    c42e:	f002 ff0f 	bl	f250 <assert_post_action>
    c432:	e7b6      	b.n	c3a2 <z_impl_k_yield+0x96>
    c434:	2000d518 	.word	0x2000d518
    c438:	2000d4dc 	.word	0x2000d4dc
    c43c:	200047c8 	.word	0x200047c8
    c440:	00013110 	.word	0x00013110
    c444:	00012f20 	.word	0x00012f20
    c448:	0001160c 	.word	0x0001160c
    c44c:	00013068 	.word	0x00013068
    c450:	000117b8 	.word	0x000117b8
    c454:	00011818 	.word	0x00011818
    c458:	00011830 	.word	0x00011830
    c45c:	0001314c 	.word	0x0001314c
    c460:	000117e8 	.word	0x000117e8
    c464:	00011800 	.word	0x00011800

0000c468 <z_tick_sleep>:
{
    c468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c46c:	4604      	mov	r4, r0
    c46e:	460e      	mov	r6, r1
    c470:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    c474:	2b00      	cmp	r3, #0
    c476:	d14e      	bne.n	c516 <z_tick_sleep+0xae>
	if (ticks == 0) {
    c478:	ea54 0306 	orrs.w	r3, r4, r6
    c47c:	d05c      	beq.n	c538 <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    c47e:	f06f 0301 	mvn.w	r3, #1
    c482:	1b1b      	subs	r3, r3, r4
    c484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c488:	eb62 0206 	sbc.w	r2, r2, r6
    c48c:	2b01      	cmp	r3, #1
    c48e:	f172 0300 	sbcs.w	r3, r2, #0
    c492:	db55      	blt.n	c540 <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    c494:	f06f 0501 	mvn.w	r5, #1
    c498:	1b2d      	subs	r5, r5, r4
    c49a:	f04f 0320 	mov.w	r3, #32
    c49e:	f3ef 8911 	mrs	r9, BASEPRI
    c4a2:	f383 8812 	msr	BASEPRI_MAX, r3
    c4a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c4aa:	4840      	ldr	r0, [pc, #256]	; (c5ac <z_tick_sleep+0x144>)
    c4ac:	f7fe f986 	bl	a7bc <z_spin_lock_valid>
    c4b0:	2800      	cmp	r0, #0
    c4b2:	d049      	beq.n	c548 <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    c4b4:	f8df 80f4 	ldr.w	r8, [pc, #244]	; c5ac <z_tick_sleep+0x144>
    c4b8:	4640      	mov	r0, r8
    c4ba:	f7fe f99f 	bl	a7fc <z_spin_lock_set_owner>
	pending_current = _current;
    c4be:	4f3c      	ldr	r7, [pc, #240]	; (c5b0 <z_tick_sleep+0x148>)
    c4c0:	68b8      	ldr	r0, [r7, #8]
    c4c2:	4b3c      	ldr	r3, [pc, #240]	; (c5b4 <z_tick_sleep+0x14c>)
    c4c4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    c4c6:	f7ff fb5b 	bl	bb80 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    c4ca:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    c4cc:	4622      	mov	r2, r4
    c4ce:	4633      	mov	r3, r6
    c4d0:	4939      	ldr	r1, [pc, #228]	; (c5b8 <z_tick_sleep+0x150>)
    c4d2:	3018      	adds	r0, #24
    c4d4:	f000 f9dc 	bl	c890 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    c4d8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    c4da:	7b53      	ldrb	r3, [r2, #13]
    c4dc:	f043 0310 	orr.w	r3, r3, #16
    c4e0:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c4e2:	4640      	mov	r0, r8
    c4e4:	f7fe f97a 	bl	a7dc <z_spin_unlock_valid>
    c4e8:	2800      	cmp	r0, #0
    c4ea:	d03d      	beq.n	c568 <z_tick_sleep+0x100>
    c4ec:	4648      	mov	r0, r9
    c4ee:	f7f9 fcd1 	bl	5e94 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    c4f2:	4b2f      	ldr	r3, [pc, #188]	; (c5b0 <z_tick_sleep+0x148>)
    c4f4:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    c4f6:	7b5b      	ldrb	r3, [r3, #13]
    c4f8:	f013 0f10 	tst.w	r3, #16
    c4fc:	d144      	bne.n	c588 <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    c4fe:	f004 f8d9 	bl	106b4 <sys_clock_tick_get_32>
    c502:	1a28      	subs	r0, r5, r0
    c504:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    c508:	2801      	cmp	r0, #1
    c50a:	f173 0300 	sbcs.w	r3, r3, #0
    c50e:	da00      	bge.n	c512 <z_tick_sleep+0xaa>
	return 0;
    c510:	2000      	movs	r0, #0
}
    c512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    c516:	4d29      	ldr	r5, [pc, #164]	; (c5bc <z_tick_sleep+0x154>)
    c518:	f240 534e 	movw	r3, #1358	; 0x54e
    c51c:	462a      	mov	r2, r5
    c51e:	4928      	ldr	r1, [pc, #160]	; (c5c0 <z_tick_sleep+0x158>)
    c520:	4828      	ldr	r0, [pc, #160]	; (c5c4 <z_tick_sleep+0x15c>)
    c522:	f002 fe9c 	bl	f25e <assert_print>
    c526:	4828      	ldr	r0, [pc, #160]	; (c5c8 <z_tick_sleep+0x160>)
    c528:	f002 fe99 	bl	f25e <assert_print>
    c52c:	f240 514e 	movw	r1, #1358	; 0x54e
    c530:	4628      	mov	r0, r5
    c532:	f002 fe8d 	bl	f250 <assert_post_action>
    c536:	e79f      	b.n	c478 <z_tick_sleep+0x10>
	z_impl_k_yield();
    c538:	f7ff fee8 	bl	c30c <z_impl_k_yield>
		return 0;
    c53c:	2000      	movs	r0, #0
    c53e:	e7e8      	b.n	c512 <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    c540:	f004 f8b8 	bl	106b4 <sys_clock_tick_get_32>
    c544:	1905      	adds	r5, r0, r4
    c546:	e7a8      	b.n	c49a <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c548:	4f20      	ldr	r7, [pc, #128]	; (c5cc <z_tick_sleep+0x164>)
    c54a:	238e      	movs	r3, #142	; 0x8e
    c54c:	463a      	mov	r2, r7
    c54e:	4920      	ldr	r1, [pc, #128]	; (c5d0 <z_tick_sleep+0x168>)
    c550:	481c      	ldr	r0, [pc, #112]	; (c5c4 <z_tick_sleep+0x15c>)
    c552:	f002 fe84 	bl	f25e <assert_print>
    c556:	4915      	ldr	r1, [pc, #84]	; (c5ac <z_tick_sleep+0x144>)
    c558:	481e      	ldr	r0, [pc, #120]	; (c5d4 <z_tick_sleep+0x16c>)
    c55a:	f002 fe80 	bl	f25e <assert_print>
    c55e:	218e      	movs	r1, #142	; 0x8e
    c560:	4638      	mov	r0, r7
    c562:	f002 fe75 	bl	f250 <assert_post_action>
    c566:	e7a5      	b.n	c4b4 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c568:	4c18      	ldr	r4, [pc, #96]	; (c5cc <z_tick_sleep+0x164>)
    c56a:	23d0      	movs	r3, #208	; 0xd0
    c56c:	4622      	mov	r2, r4
    c56e:	491a      	ldr	r1, [pc, #104]	; (c5d8 <z_tick_sleep+0x170>)
    c570:	4814      	ldr	r0, [pc, #80]	; (c5c4 <z_tick_sleep+0x15c>)
    c572:	f002 fe74 	bl	f25e <assert_print>
    c576:	4641      	mov	r1, r8
    c578:	4818      	ldr	r0, [pc, #96]	; (c5dc <z_tick_sleep+0x174>)
    c57a:	f002 fe70 	bl	f25e <assert_print>
    c57e:	21d0      	movs	r1, #208	; 0xd0
    c580:	4620      	mov	r0, r4
    c582:	f002 fe65 	bl	f250 <assert_post_action>
    c586:	e7b1      	b.n	c4ec <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    c588:	4c0c      	ldr	r4, [pc, #48]	; (c5bc <z_tick_sleep+0x154>)
    c58a:	f240 536f 	movw	r3, #1391	; 0x56f
    c58e:	4622      	mov	r2, r4
    c590:	4913      	ldr	r1, [pc, #76]	; (c5e0 <z_tick_sleep+0x178>)
    c592:	480c      	ldr	r0, [pc, #48]	; (c5c4 <z_tick_sleep+0x15c>)
    c594:	f002 fe63 	bl	f25e <assert_print>
    c598:	480b      	ldr	r0, [pc, #44]	; (c5c8 <z_tick_sleep+0x160>)
    c59a:	f002 fe60 	bl	f25e <assert_print>
    c59e:	f240 516f 	movw	r1, #1391	; 0x56f
    c5a2:	4620      	mov	r0, r4
    c5a4:	f002 fe54 	bl	f250 <assert_post_action>
    c5a8:	e7a9      	b.n	c4fe <z_tick_sleep+0x96>
    c5aa:	bf00      	nop
    c5ac:	2000d518 	.word	0x2000d518
    c5b0:	2000d4dc 	.word	0x2000d4dc
    c5b4:	2000d514 	.word	0x2000d514
    c5b8:	0000ba99 	.word	0x0000ba99
    c5bc:	00013110 	.word	0x00013110
    c5c0:	00012f20 	.word	0x00012f20
    c5c4:	0001160c 	.word	0x0001160c
    c5c8:	00013068 	.word	0x00013068
    c5cc:	000117b8 	.word	0x000117b8
    c5d0:	00011818 	.word	0x00011818
    c5d4:	00011830 	.word	0x00011830
    c5d8:	000117e8 	.word	0x000117e8
    c5dc:	00011800 	.word	0x00011800
    c5e0:	000131cc 	.word	0x000131cc

0000c5e4 <z_impl_k_sleep>:
{
    c5e4:	b570      	push	{r4, r5, r6, lr}
    c5e6:	4605      	mov	r5, r0
    c5e8:	460c      	mov	r4, r1
    c5ea:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    c5ee:	bb13      	cbnz	r3, c636 <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c5f0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    c5f4:	bf08      	it	eq
    c5f6:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    c5fa:	d02d      	beq.n	c658 <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    c5fc:	4628      	mov	r0, r5
    c5fe:	4621      	mov	r1, r4
    c600:	f7ff ff32 	bl	c468 <z_tick_sleep>
    c604:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    c606:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    c608:	0151      	lsls	r1, r2, #5
    c60a:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    c60e:	0143      	lsls	r3, r0, #5
    c610:	1a1b      	subs	r3, r3, r0
    c612:	eb61 0102 	sbc.w	r1, r1, r2
    c616:	0088      	lsls	r0, r1, #2
    c618:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    c61c:	009b      	lsls	r3, r3, #2
    c61e:	eb13 030c 	adds.w	r3, r3, ip
    c622:	eb42 0000 	adc.w	r0, r2, r0
    c626:	00c0      	lsls	r0, r0, #3
    c628:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    c62c:	f3c3 3310 	ubfx	r3, r3, #12, #17
    c630:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    c634:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    c636:	4e0c      	ldr	r6, [pc, #48]	; (c668 <z_impl_k_sleep+0x84>)
    c638:	f240 537e 	movw	r3, #1406	; 0x57e
    c63c:	4632      	mov	r2, r6
    c63e:	490b      	ldr	r1, [pc, #44]	; (c66c <z_impl_k_sleep+0x88>)
    c640:	480b      	ldr	r0, [pc, #44]	; (c670 <z_impl_k_sleep+0x8c>)
    c642:	f002 fe0c 	bl	f25e <assert_print>
    c646:	480b      	ldr	r0, [pc, #44]	; (c674 <z_impl_k_sleep+0x90>)
    c648:	f002 fe09 	bl	f25e <assert_print>
    c64c:	f240 517e 	movw	r1, #1406	; 0x57e
    c650:	4630      	mov	r0, r6
    c652:	f002 fdfd 	bl	f250 <assert_post_action>
    c656:	e7cb      	b.n	c5f0 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    c658:	4b07      	ldr	r3, [pc, #28]	; (c678 <z_impl_k_sleep+0x94>)
    c65a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    c65c:	f7ff fc28 	bl	beb0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    c660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c664:	e7e6      	b.n	c634 <z_impl_k_sleep+0x50>
    c666:	bf00      	nop
    c668:	00013110 	.word	0x00013110
    c66c:	00012f20 	.word	0x00012f20
    c670:	0001160c 	.word	0x0001160c
    c674:	00013068 	.word	0x00013068
    c678:	2000d4dc 	.word	0x2000d4dc

0000c67c <z_impl_z_current_get>:
}
    c67c:	4b01      	ldr	r3, [pc, #4]	; (c684 <z_impl_z_current_get+0x8>)
    c67e:	6898      	ldr	r0, [r3, #8]
    c680:	4770      	bx	lr
    c682:	bf00      	nop
    c684:	2000d4dc 	.word	0x2000d4dc

0000c688 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    c688:	b570      	push	{r4, r5, r6, lr}
    c68a:	4604      	mov	r4, r0
    c68c:	f04f 0320 	mov.w	r3, #32
    c690:	f3ef 8511 	mrs	r5, BASEPRI
    c694:	f383 8812 	msr	BASEPRI_MAX, r3
    c698:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c69c:	4840      	ldr	r0, [pc, #256]	; (c7a0 <z_thread_abort+0x118>)
    c69e:	f7fe f88d 	bl	a7bc <z_spin_lock_valid>
    c6a2:	b1b8      	cbz	r0, c6d4 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    c6a4:	483e      	ldr	r0, [pc, #248]	; (c7a0 <z_thread_abort+0x118>)
    c6a6:	f7fe f8a9 	bl	a7fc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    c6aa:	7b63      	ldrb	r3, [r4, #13]
    c6ac:	f013 0f08 	tst.w	r3, #8
    c6b0:	d120      	bne.n	c6f4 <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    c6b2:	4620      	mov	r0, r4
    c6b4:	f7ff fd0c 	bl	c0d0 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    c6b8:	4b3a      	ldr	r3, [pc, #232]	; (c7a4 <z_thread_abort+0x11c>)
    c6ba:	689b      	ldr	r3, [r3, #8]
    c6bc:	42a3      	cmp	r3, r4
    c6be:	d032      	beq.n	c726 <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c6c0:	4837      	ldr	r0, [pc, #220]	; (c7a0 <z_thread_abort+0x118>)
    c6c2:	f7fe f88b 	bl	a7dc <z_spin_unlock_valid>
    c6c6:	2800      	cmp	r0, #0
    c6c8:	d059      	beq.n	c77e <z_thread_abort+0xf6>
	__asm__ volatile(
    c6ca:	f385 8811 	msr	BASEPRI, r5
    c6ce:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    c6d2:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c6d4:	4e34      	ldr	r6, [pc, #208]	; (c7a8 <z_thread_abort+0x120>)
    c6d6:	238e      	movs	r3, #142	; 0x8e
    c6d8:	4632      	mov	r2, r6
    c6da:	4934      	ldr	r1, [pc, #208]	; (c7ac <z_thread_abort+0x124>)
    c6dc:	4834      	ldr	r0, [pc, #208]	; (c7b0 <z_thread_abort+0x128>)
    c6de:	f002 fdbe 	bl	f25e <assert_print>
    c6e2:	492f      	ldr	r1, [pc, #188]	; (c7a0 <z_thread_abort+0x118>)
    c6e4:	4833      	ldr	r0, [pc, #204]	; (c7b4 <z_thread_abort+0x12c>)
    c6e6:	f002 fdba 	bl	f25e <assert_print>
    c6ea:	218e      	movs	r1, #142	; 0x8e
    c6ec:	4630      	mov	r0, r6
    c6ee:	f002 fdaf 	bl	f250 <assert_post_action>
    c6f2:	e7d7      	b.n	c6a4 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c6f4:	482a      	ldr	r0, [pc, #168]	; (c7a0 <z_thread_abort+0x118>)
    c6f6:	f7fe f871 	bl	a7dc <z_spin_unlock_valid>
    c6fa:	b120      	cbz	r0, c706 <z_thread_abort+0x7e>
    c6fc:	f385 8811 	msr	BASEPRI, r5
    c700:	f3bf 8f6f 	isb	sy
		return;
    c704:	e7e5      	b.n	c6d2 <z_thread_abort+0x4a>
    c706:	4c28      	ldr	r4, [pc, #160]	; (c7a8 <z_thread_abort+0x120>)
    c708:	23b9      	movs	r3, #185	; 0xb9
    c70a:	4622      	mov	r2, r4
    c70c:	492a      	ldr	r1, [pc, #168]	; (c7b8 <z_thread_abort+0x130>)
    c70e:	4828      	ldr	r0, [pc, #160]	; (c7b0 <z_thread_abort+0x128>)
    c710:	f002 fda5 	bl	f25e <assert_print>
    c714:	4922      	ldr	r1, [pc, #136]	; (c7a0 <z_thread_abort+0x118>)
    c716:	4829      	ldr	r0, [pc, #164]	; (c7bc <z_thread_abort+0x134>)
    c718:	f002 fda1 	bl	f25e <assert_print>
    c71c:	21b9      	movs	r1, #185	; 0xb9
    c71e:	4620      	mov	r0, r4
    c720:	f002 fd96 	bl	f250 <assert_post_action>
    c724:	e7ea      	b.n	c6fc <z_thread_abort+0x74>
    c726:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    c72a:	2b00      	cmp	r3, #0
    c72c:	d1c8      	bne.n	c6c0 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c72e:	481c      	ldr	r0, [pc, #112]	; (c7a0 <z_thread_abort+0x118>)
    c730:	f7fe f854 	bl	a7dc <z_spin_unlock_valid>
    c734:	b198      	cbz	r0, c75e <z_thread_abort+0xd6>
    c736:	4628      	mov	r0, r5
    c738:	f7f9 fbac 	bl	5e94 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    c73c:	4c20      	ldr	r4, [pc, #128]	; (c7c0 <z_thread_abort+0x138>)
    c73e:	f240 63ac 	movw	r3, #1708	; 0x6ac
    c742:	4622      	mov	r2, r4
    c744:	491f      	ldr	r1, [pc, #124]	; (c7c4 <z_thread_abort+0x13c>)
    c746:	481a      	ldr	r0, [pc, #104]	; (c7b0 <z_thread_abort+0x128>)
    c748:	f002 fd89 	bl	f25e <assert_print>
    c74c:	481e      	ldr	r0, [pc, #120]	; (c7c8 <z_thread_abort+0x140>)
    c74e:	f002 fd86 	bl	f25e <assert_print>
    c752:	f240 61ac 	movw	r1, #1708	; 0x6ac
    c756:	4620      	mov	r0, r4
    c758:	f002 fd7a 	bl	f250 <assert_post_action>
    c75c:	e7b0      	b.n	c6c0 <z_thread_abort+0x38>
    c75e:	4c12      	ldr	r4, [pc, #72]	; (c7a8 <z_thread_abort+0x120>)
    c760:	23d0      	movs	r3, #208	; 0xd0
    c762:	4622      	mov	r2, r4
    c764:	4914      	ldr	r1, [pc, #80]	; (c7b8 <z_thread_abort+0x130>)
    c766:	4812      	ldr	r0, [pc, #72]	; (c7b0 <z_thread_abort+0x128>)
    c768:	f002 fd79 	bl	f25e <assert_print>
    c76c:	490c      	ldr	r1, [pc, #48]	; (c7a0 <z_thread_abort+0x118>)
    c76e:	4813      	ldr	r0, [pc, #76]	; (c7bc <z_thread_abort+0x134>)
    c770:	f002 fd75 	bl	f25e <assert_print>
    c774:	21d0      	movs	r1, #208	; 0xd0
    c776:	4620      	mov	r0, r4
    c778:	f002 fd6a 	bl	f250 <assert_post_action>
    c77c:	e7db      	b.n	c736 <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c77e:	4c0a      	ldr	r4, [pc, #40]	; (c7a8 <z_thread_abort+0x120>)
    c780:	23b9      	movs	r3, #185	; 0xb9
    c782:	4622      	mov	r2, r4
    c784:	490c      	ldr	r1, [pc, #48]	; (c7b8 <z_thread_abort+0x130>)
    c786:	480a      	ldr	r0, [pc, #40]	; (c7b0 <z_thread_abort+0x128>)
    c788:	f002 fd69 	bl	f25e <assert_print>
    c78c:	4904      	ldr	r1, [pc, #16]	; (c7a0 <z_thread_abort+0x118>)
    c78e:	480b      	ldr	r0, [pc, #44]	; (c7bc <z_thread_abort+0x134>)
    c790:	f002 fd65 	bl	f25e <assert_print>
    c794:	21b9      	movs	r1, #185	; 0xb9
    c796:	4620      	mov	r0, r4
    c798:	f002 fd5a 	bl	f250 <assert_post_action>
    c79c:	e795      	b.n	c6ca <z_thread_abort+0x42>
    c79e:	bf00      	nop
    c7a0:	2000d518 	.word	0x2000d518
    c7a4:	2000d4dc 	.word	0x2000d4dc
    c7a8:	000117b8 	.word	0x000117b8
    c7ac:	00011818 	.word	0x00011818
    c7b0:	0001160c 	.word	0x0001160c
    c7b4:	00011830 	.word	0x00011830
    c7b8:	000117e8 	.word	0x000117e8
    c7bc:	00011800 	.word	0x00011800
    c7c0:	00013110 	.word	0x00013110
    c7c4:	00011cc8 	.word	0x00011cc8
    c7c8:	0001320c 	.word	0x0001320c

0000c7cc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    c7cc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    c7ce:	4806      	ldr	r0, [pc, #24]	; (c7e8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    c7d0:	4a06      	ldr	r2, [pc, #24]	; (c7ec <z_data_copy+0x20>)
    c7d2:	1a12      	subs	r2, r2, r0
    c7d4:	4906      	ldr	r1, [pc, #24]	; (c7f0 <z_data_copy+0x24>)
    c7d6:	f003 fea5 	bl	10524 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    c7da:	4a06      	ldr	r2, [pc, #24]	; (c7f4 <z_data_copy+0x28>)
    c7dc:	4906      	ldr	r1, [pc, #24]	; (c7f8 <z_data_copy+0x2c>)
    c7de:	4807      	ldr	r0, [pc, #28]	; (c7fc <z_data_copy+0x30>)
    c7e0:	f003 fea0 	bl	10524 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    c7e4:	bd08      	pop	{r3, pc}
    c7e6:	bf00      	nop
    c7e8:	20000000 	.word	0x20000000
    c7ec:	20004284 	.word	0x20004284
    c7f0:	00013668 	.word	0x00013668
    c7f4:	00000000 	.word	0x00000000
    c7f8:	00013668 	.word	0x00013668
    c7fc:	20000000 	.word	0x20000000

0000c800 <first>:
	return list->head == list;
    c800:	4b03      	ldr	r3, [pc, #12]	; (c810 <first+0x10>)
    c802:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c804:	4298      	cmp	r0, r3
    c806:	d000      	beq.n	c80a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    c808:	4770      	bx	lr
    c80a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    c80c:	e7fc      	b.n	c808 <first+0x8>
    c80e:	bf00      	nop
    c810:	200040fc 	.word	0x200040fc

0000c814 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    c814:	b130      	cbz	r0, c824 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    c816:	4a04      	ldr	r2, [pc, #16]	; (c828 <next+0x14>)
    c818:	6852      	ldr	r2, [r2, #4]
    c81a:	4290      	cmp	r0, r2
    c81c:	d001      	beq.n	c822 <next+0xe>
    c81e:	6800      	ldr	r0, [r0, #0]
    c820:	4770      	bx	lr
    c822:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    c824:	4770      	bx	lr
    c826:	bf00      	nop
    c828:	200040fc 	.word	0x200040fc

0000c82c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    c82c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    c82e:	4b04      	ldr	r3, [pc, #16]	; (c840 <elapsed+0x14>)
    c830:	681b      	ldr	r3, [r3, #0]
    c832:	b10b      	cbz	r3, c838 <elapsed+0xc>
    c834:	2000      	movs	r0, #0
}
    c836:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    c838:	f7fb fc20 	bl	807c <sys_clock_elapsed>
    c83c:	e7fb      	b.n	c836 <elapsed+0xa>
    c83e:	bf00      	nop
    c840:	2000d524 	.word	0x2000d524

0000c844 <next_timeout>:

static int32_t next_timeout(void)
{
    c844:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    c846:	f7ff ffdb 	bl	c800 <first>
    c84a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    c84c:	f7ff ffee 	bl	c82c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    c850:	b17c      	cbz	r4, c872 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    c852:	6923      	ldr	r3, [r4, #16]
    c854:	6962      	ldr	r2, [r4, #20]
    c856:	1a1b      	subs	r3, r3, r0
    c858:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    c85c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    c860:	f170 0200 	sbcs.w	r2, r0, #0
    c864:	da08      	bge.n	c878 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    c866:	2800      	cmp	r0, #0
    c868:	db01      	blt.n	c86e <next_timeout+0x2a>
    c86a:	4618      	mov	r0, r3
    c86c:	e006      	b.n	c87c <next_timeout+0x38>
    c86e:	2300      	movs	r3, #0
    c870:	e7fb      	b.n	c86a <next_timeout+0x26>
		ret = MAX_WAIT;
    c872:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    c876:	e001      	b.n	c87c <next_timeout+0x38>
    c878:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    c87c:	4b03      	ldr	r3, [pc, #12]	; (c88c <next_timeout+0x48>)
    c87e:	691b      	ldr	r3, [r3, #16]
    c880:	b113      	cbz	r3, c888 <next_timeout+0x44>
    c882:	4283      	cmp	r3, r0
    c884:	da00      	bge.n	c888 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    c886:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    c888:	bd10      	pop	{r4, pc}
    c88a:	bf00      	nop
    c88c:	2000d4dc 	.word	0x2000d4dc

0000c890 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    c894:	bf08      	it	eq
    c896:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    c89a:	f000 80c1 	beq.w	ca20 <z_add_timeout+0x190>
{
    c89e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c8a2:	4604      	mov	r4, r0
    c8a4:	460f      	mov	r7, r1
    c8a6:	4692      	mov	sl, r2
    c8a8:	461d      	mov	r5, r3
	return node->next != NULL;
    c8aa:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    c8ac:	b173      	cbz	r3, c8cc <z_add_timeout+0x3c>
    c8ae:	f8df 8174 	ldr.w	r8, [pc, #372]	; ca24 <z_add_timeout+0x194>
    c8b2:	2363      	movs	r3, #99	; 0x63
    c8b4:	4642      	mov	r2, r8
    c8b6:	495c      	ldr	r1, [pc, #368]	; (ca28 <z_add_timeout+0x198>)
    c8b8:	485c      	ldr	r0, [pc, #368]	; (ca2c <z_add_timeout+0x19c>)
    c8ba:	f002 fcd0 	bl	f25e <assert_print>
    c8be:	485c      	ldr	r0, [pc, #368]	; (ca30 <z_add_timeout+0x1a0>)
    c8c0:	f002 fccd 	bl	f25e <assert_print>
    c8c4:	2163      	movs	r1, #99	; 0x63
    c8c6:	4640      	mov	r0, r8
    c8c8:	f002 fcc2 	bl	f250 <assert_post_action>
	to->fn = fn;
    c8cc:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    c8ce:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    c8d2:	f04f 0320 	mov.w	r3, #32
    c8d6:	f3ef 8711 	mrs	r7, BASEPRI
    c8da:	f383 8812 	msr	BASEPRI_MAX, r3
    c8de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c8e2:	4854      	ldr	r0, [pc, #336]	; (ca34 <z_add_timeout+0x1a4>)
    c8e4:	f7fd ff6a 	bl	a7bc <z_spin_lock_valid>
    c8e8:	b118      	cbz	r0, c8f2 <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    c8ea:	4852      	ldr	r0, [pc, #328]	; (ca34 <z_add_timeout+0x1a4>)
    c8ec:	f7fd ff86 	bl	a7fc <z_spin_lock_set_owner>
	return k;
    c8f0:	e038      	b.n	c964 <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c8f2:	f8df 9144 	ldr.w	r9, [pc, #324]	; ca38 <z_add_timeout+0x1a8>
    c8f6:	238e      	movs	r3, #142	; 0x8e
    c8f8:	464a      	mov	r2, r9
    c8fa:	4950      	ldr	r1, [pc, #320]	; (ca3c <z_add_timeout+0x1ac>)
    c8fc:	484b      	ldr	r0, [pc, #300]	; (ca2c <z_add_timeout+0x19c>)
    c8fe:	f002 fcae 	bl	f25e <assert_print>
    c902:	494c      	ldr	r1, [pc, #304]	; (ca34 <z_add_timeout+0x1a4>)
    c904:	484e      	ldr	r0, [pc, #312]	; (ca40 <z_add_timeout+0x1b0>)
    c906:	f002 fcaa 	bl	f25e <assert_print>
    c90a:	218e      	movs	r1, #142	; 0x8e
    c90c:	4648      	mov	r0, r9
    c90e:	f002 fc9f 	bl	f250 <assert_post_action>
    c912:	e7ea      	b.n	c8ea <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    c914:	f11a 0801 	adds.w	r8, sl, #1
    c918:	f145 0900 	adc.w	r9, r5, #0
    c91c:	f7ff ff86 	bl	c82c <elapsed>
    c920:	eb18 0300 	adds.w	r3, r8, r0
    c924:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    c928:	6123      	str	r3, [r4, #16]
    c92a:	6160      	str	r0, [r4, #20]
    c92c:	e03d      	b.n	c9aa <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    c92e:	1a51      	subs	r1, r2, r1
    c930:	eb66 0303 	sbc.w	r3, r6, r3
    c934:	6101      	str	r1, [r0, #16]
    c936:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    c938:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    c93a:	6063      	str	r3, [r4, #4]
	node->next = successor;
    c93c:	6020      	str	r0, [r4, #0]
	prev->next = node;
    c93e:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    c940:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    c942:	2800      	cmp	r0, #0
    c944:	d045      	beq.n	c9d2 <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    c946:	f7ff ff5b 	bl	c800 <first>
    c94a:	4284      	cmp	r4, r0
    c94c:	d048      	beq.n	c9e0 <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c94e:	4839      	ldr	r0, [pc, #228]	; (ca34 <z_add_timeout+0x1a4>)
    c950:	f7fd ff44 	bl	a7dc <z_spin_unlock_valid>
    c954:	2800      	cmp	r0, #0
    c956:	d050      	beq.n	c9fa <z_add_timeout+0x16a>
	__asm__ volatile(
    c958:	f387 8811 	msr	BASEPRI, r7
    c95c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    c960:	f04f 0801 	mov.w	r8, #1
    c964:	f1b8 0f00 	cmp.w	r8, #0
    c968:	d158      	bne.n	ca1c <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    c96a:	4653      	mov	r3, sl
    c96c:	f06f 0101 	mvn.w	r1, #1
    c970:	ebb1 010a 	subs.w	r1, r1, sl
    c974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c978:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    c97c:	2a00      	cmp	r2, #0
    c97e:	dbc9      	blt.n	c914 <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    c980:	4a30      	ldr	r2, [pc, #192]	; (ca44 <z_add_timeout+0x1b4>)
    c982:	6811      	ldr	r1, [r2, #0]
    c984:	6852      	ldr	r2, [r2, #4]
    c986:	185b      	adds	r3, r3, r1
    c988:	eb42 0205 	adc.w	r2, r2, r5
    c98c:	f06f 0101 	mvn.w	r1, #1
    c990:	1acb      	subs	r3, r1, r3
    c992:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    c996:	4618      	mov	r0, r3
    c998:	4611      	mov	r1, r2
    c99a:	2b01      	cmp	r3, #1
    c99c:	f172 0300 	sbcs.w	r3, r2, #0
    c9a0:	da01      	bge.n	c9a6 <z_add_timeout+0x116>
    c9a2:	2001      	movs	r0, #1
    c9a4:	2100      	movs	r1, #0
    c9a6:	6120      	str	r0, [r4, #16]
    c9a8:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    c9aa:	f7ff ff29 	bl	c800 <first>
    c9ae:	2800      	cmp	r0, #0
    c9b0:	d0c7      	beq.n	c942 <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    c9b2:	6902      	ldr	r2, [r0, #16]
    c9b4:	6946      	ldr	r6, [r0, #20]
    c9b6:	6921      	ldr	r1, [r4, #16]
    c9b8:	6963      	ldr	r3, [r4, #20]
    c9ba:	4291      	cmp	r1, r2
    c9bc:	eb73 0c06 	sbcs.w	ip, r3, r6
    c9c0:	dbb5      	blt.n	c92e <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    c9c2:	1a89      	subs	r1, r1, r2
    c9c4:	eb63 0306 	sbc.w	r3, r3, r6
    c9c8:	6121      	str	r1, [r4, #16]
    c9ca:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    c9cc:	f7ff ff22 	bl	c814 <next>
    c9d0:	e7ed      	b.n	c9ae <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    c9d2:	4b1d      	ldr	r3, [pc, #116]	; (ca48 <z_add_timeout+0x1b8>)
    c9d4:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    c9d6:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    c9d8:	6062      	str	r2, [r4, #4]
	tail->next = node;
    c9da:	6014      	str	r4, [r2, #0]
	list->tail = node;
    c9dc:	605c      	str	r4, [r3, #4]
}
    c9de:	e7b2      	b.n	c946 <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    c9e0:	f7ff ff30 	bl	c844 <next_timeout>

			if (next_time == 0 ||
    c9e4:	4603      	mov	r3, r0
    c9e6:	b118      	cbz	r0, c9f0 <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    c9e8:	4a18      	ldr	r2, [pc, #96]	; (ca4c <z_add_timeout+0x1bc>)
    c9ea:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    c9ec:	4282      	cmp	r2, r0
    c9ee:	d0ae      	beq.n	c94e <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    c9f0:	2100      	movs	r1, #0
    c9f2:	4618      	mov	r0, r3
    c9f4:	f7fb fb10 	bl	8018 <sys_clock_set_timeout>
    c9f8:	e7a9      	b.n	c94e <z_add_timeout+0xbe>
    c9fa:	f8df 803c 	ldr.w	r8, [pc, #60]	; ca38 <z_add_timeout+0x1a8>
    c9fe:	23b9      	movs	r3, #185	; 0xb9
    ca00:	4642      	mov	r2, r8
    ca02:	4913      	ldr	r1, [pc, #76]	; (ca50 <z_add_timeout+0x1c0>)
    ca04:	4809      	ldr	r0, [pc, #36]	; (ca2c <z_add_timeout+0x19c>)
    ca06:	f002 fc2a 	bl	f25e <assert_print>
    ca0a:	490a      	ldr	r1, [pc, #40]	; (ca34 <z_add_timeout+0x1a4>)
    ca0c:	4811      	ldr	r0, [pc, #68]	; (ca54 <z_add_timeout+0x1c4>)
    ca0e:	f002 fc26 	bl	f25e <assert_print>
    ca12:	21b9      	movs	r1, #185	; 0xb9
    ca14:	4640      	mov	r0, r8
    ca16:	f002 fc1b 	bl	f250 <assert_post_action>
    ca1a:	e79d      	b.n	c958 <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    ca1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ca20:	4770      	bx	lr
    ca22:	bf00      	nop
    ca24:	00013230 	.word	0x00013230
    ca28:	00013254 	.word	0x00013254
    ca2c:	0001160c 	.word	0x0001160c
    ca30:	00013068 	.word	0x00013068
    ca34:	2000d528 	.word	0x2000d528
    ca38:	000117b8 	.word	0x000117b8
    ca3c:	00011818 	.word	0x00011818
    ca40:	00011830 	.word	0x00011830
    ca44:	20004928 	.word	0x20004928
    ca48:	200040fc 	.word	0x200040fc
    ca4c:	2000d4dc 	.word	0x2000d4dc
    ca50:	000117e8 	.word	0x000117e8
    ca54:	00011800 	.word	0x00011800

0000ca58 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    ca58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca5c:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    ca5e:	2400      	movs	r4, #0
	__asm__ volatile(
    ca60:	f04f 0320 	mov.w	r3, #32
    ca64:	f3ef 8711 	mrs	r7, BASEPRI
    ca68:	f383 8812 	msr	BASEPRI_MAX, r3
    ca6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ca70:	481f      	ldr	r0, [pc, #124]	; (caf0 <z_abort_timeout+0x98>)
    ca72:	f7fd fea3 	bl	a7bc <z_spin_lock_valid>
    ca76:	b128      	cbz	r0, ca84 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    ca78:	481d      	ldr	r0, [pc, #116]	; (caf0 <z_abort_timeout+0x98>)
    ca7a:	f7fd febf 	bl	a7fc <z_spin_lock_set_owner>
	int ret = -EINVAL;
    ca7e:	f06f 0815 	mvn.w	r8, #21
	return k;
    ca82:	e018      	b.n	cab6 <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ca84:	4e1b      	ldr	r6, [pc, #108]	; (caf4 <z_abort_timeout+0x9c>)
    ca86:	238e      	movs	r3, #142	; 0x8e
    ca88:	4632      	mov	r2, r6
    ca8a:	491b      	ldr	r1, [pc, #108]	; (caf8 <z_abort_timeout+0xa0>)
    ca8c:	481b      	ldr	r0, [pc, #108]	; (cafc <z_abort_timeout+0xa4>)
    ca8e:	f002 fbe6 	bl	f25e <assert_print>
    ca92:	4917      	ldr	r1, [pc, #92]	; (caf0 <z_abort_timeout+0x98>)
    ca94:	481a      	ldr	r0, [pc, #104]	; (cb00 <z_abort_timeout+0xa8>)
    ca96:	f002 fbe2 	bl	f25e <assert_print>
    ca9a:	218e      	movs	r1, #142	; 0x8e
    ca9c:	4630      	mov	r0, r6
    ca9e:	f002 fbd7 	bl	f250 <assert_post_action>
    caa2:	e7e9      	b.n	ca78 <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    caa4:	4812      	ldr	r0, [pc, #72]	; (caf0 <z_abort_timeout+0x98>)
    caa6:	f7fd fe99 	bl	a7dc <z_spin_unlock_valid>
    caaa:	b170      	cbz	r0, caca <z_abort_timeout+0x72>
	__asm__ volatile(
    caac:	f387 8811 	msr	BASEPRI, r7
    cab0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    cab4:	2401      	movs	r4, #1
    cab6:	4626      	mov	r6, r4
    cab8:	b9bc      	cbnz	r4, caea <z_abort_timeout+0x92>
	return node->next != NULL;
    caba:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    cabc:	2b00      	cmp	r3, #0
    cabe:	d0f1      	beq.n	caa4 <z_abort_timeout+0x4c>
			remove_timeout(to);
    cac0:	4628      	mov	r0, r5
    cac2:	f003 fde0 	bl	10686 <remove_timeout>
			ret = 0;
    cac6:	46b0      	mov	r8, r6
    cac8:	e7ec      	b.n	caa4 <z_abort_timeout+0x4c>
    caca:	4c0a      	ldr	r4, [pc, #40]	; (caf4 <z_abort_timeout+0x9c>)
    cacc:	23b9      	movs	r3, #185	; 0xb9
    cace:	4622      	mov	r2, r4
    cad0:	490c      	ldr	r1, [pc, #48]	; (cb04 <z_abort_timeout+0xac>)
    cad2:	480a      	ldr	r0, [pc, #40]	; (cafc <z_abort_timeout+0xa4>)
    cad4:	f002 fbc3 	bl	f25e <assert_print>
    cad8:	4905      	ldr	r1, [pc, #20]	; (caf0 <z_abort_timeout+0x98>)
    cada:	480b      	ldr	r0, [pc, #44]	; (cb08 <z_abort_timeout+0xb0>)
    cadc:	f002 fbbf 	bl	f25e <assert_print>
    cae0:	21b9      	movs	r1, #185	; 0xb9
    cae2:	4620      	mov	r0, r4
    cae4:	f002 fbb4 	bl	f250 <assert_post_action>
    cae8:	e7e0      	b.n	caac <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    caea:	4640      	mov	r0, r8
    caec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    caf0:	2000d528 	.word	0x2000d528
    caf4:	000117b8 	.word	0x000117b8
    caf8:	00011818 	.word	0x00011818
    cafc:	0001160c 	.word	0x0001160c
    cb00:	00011830 	.word	0x00011830
    cb04:	000117e8 	.word	0x000117e8
    cb08:	00011800 	.word	0x00011800

0000cb0c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    cb0c:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    cb0e:	2500      	movs	r5, #0
	__asm__ volatile(
    cb10:	f04f 0320 	mov.w	r3, #32
    cb14:	f3ef 8611 	mrs	r6, BASEPRI
    cb18:	f383 8812 	msr	BASEPRI_MAX, r3
    cb1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cb20:	481c      	ldr	r0, [pc, #112]	; (cb94 <z_get_next_timeout_expiry+0x88>)
    cb22:	f7fd fe4b 	bl	a7bc <z_spin_lock_valid>
    cb26:	b128      	cbz	r0, cb34 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    cb28:	481a      	ldr	r0, [pc, #104]	; (cb94 <z_get_next_timeout_expiry+0x88>)
    cb2a:	f7fd fe67 	bl	a7fc <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    cb2e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    cb32:	e014      	b.n	cb5e <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cb34:	4c18      	ldr	r4, [pc, #96]	; (cb98 <z_get_next_timeout_expiry+0x8c>)
    cb36:	238e      	movs	r3, #142	; 0x8e
    cb38:	4622      	mov	r2, r4
    cb3a:	4918      	ldr	r1, [pc, #96]	; (cb9c <z_get_next_timeout_expiry+0x90>)
    cb3c:	4818      	ldr	r0, [pc, #96]	; (cba0 <z_get_next_timeout_expiry+0x94>)
    cb3e:	f002 fb8e 	bl	f25e <assert_print>
    cb42:	4914      	ldr	r1, [pc, #80]	; (cb94 <z_get_next_timeout_expiry+0x88>)
    cb44:	4817      	ldr	r0, [pc, #92]	; (cba4 <z_get_next_timeout_expiry+0x98>)
    cb46:	f002 fb8a 	bl	f25e <assert_print>
    cb4a:	218e      	movs	r1, #142	; 0x8e
    cb4c:	4620      	mov	r0, r4
    cb4e:	f002 fb7f 	bl	f250 <assert_post_action>
    cb52:	e7e9      	b.n	cb28 <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    cb54:	f386 8811 	msr	BASEPRI, r6
    cb58:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    cb5c:	2501      	movs	r5, #1
    cb5e:	b9bd      	cbnz	r5, cb90 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    cb60:	f7ff fe70 	bl	c844 <next_timeout>
    cb64:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cb66:	480b      	ldr	r0, [pc, #44]	; (cb94 <z_get_next_timeout_expiry+0x88>)
    cb68:	f7fd fe38 	bl	a7dc <z_spin_unlock_valid>
    cb6c:	2800      	cmp	r0, #0
    cb6e:	d1f1      	bne.n	cb54 <z_get_next_timeout_expiry+0x48>
    cb70:	4d09      	ldr	r5, [pc, #36]	; (cb98 <z_get_next_timeout_expiry+0x8c>)
    cb72:	23b9      	movs	r3, #185	; 0xb9
    cb74:	462a      	mov	r2, r5
    cb76:	490c      	ldr	r1, [pc, #48]	; (cba8 <z_get_next_timeout_expiry+0x9c>)
    cb78:	4809      	ldr	r0, [pc, #36]	; (cba0 <z_get_next_timeout_expiry+0x94>)
    cb7a:	f002 fb70 	bl	f25e <assert_print>
    cb7e:	4905      	ldr	r1, [pc, #20]	; (cb94 <z_get_next_timeout_expiry+0x88>)
    cb80:	480a      	ldr	r0, [pc, #40]	; (cbac <z_get_next_timeout_expiry+0xa0>)
    cb82:	f002 fb6c 	bl	f25e <assert_print>
    cb86:	21b9      	movs	r1, #185	; 0xb9
    cb88:	4628      	mov	r0, r5
    cb8a:	f002 fb61 	bl	f250 <assert_post_action>
    cb8e:	e7e1      	b.n	cb54 <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    cb90:	4620      	mov	r0, r4
    cb92:	bd70      	pop	{r4, r5, r6, pc}
    cb94:	2000d528 	.word	0x2000d528
    cb98:	000117b8 	.word	0x000117b8
    cb9c:	00011818 	.word	0x00011818
    cba0:	0001160c 	.word	0x0001160c
    cba4:	00011830 	.word	0x00011830
    cba8:	000117e8 	.word	0x000117e8
    cbac:	00011800 	.word	0x00011800

0000cbb0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    cbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbb4:	4606      	mov	r6, r0
    cbb6:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    cbb8:	2500      	movs	r5, #0
	__asm__ volatile(
    cbba:	f04f 0320 	mov.w	r3, #32
    cbbe:	f3ef 8711 	mrs	r7, BASEPRI
    cbc2:	f383 8812 	msr	BASEPRI_MAX, r3
    cbc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cbca:	4825      	ldr	r0, [pc, #148]	; (cc60 <z_set_timeout_expiry+0xb0>)
    cbcc:	f7fd fdf6 	bl	a7bc <z_spin_lock_valid>
    cbd0:	b118      	cbz	r0, cbda <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    cbd2:	4823      	ldr	r0, [pc, #140]	; (cc60 <z_set_timeout_expiry+0xb0>)
    cbd4:	f7fd fe12 	bl	a7fc <z_spin_lock_set_owner>
	return k;
    cbd8:	e01e      	b.n	cc18 <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cbda:	4c22      	ldr	r4, [pc, #136]	; (cc64 <z_set_timeout_expiry+0xb4>)
    cbdc:	238e      	movs	r3, #142	; 0x8e
    cbde:	4622      	mov	r2, r4
    cbe0:	4921      	ldr	r1, [pc, #132]	; (cc68 <z_set_timeout_expiry+0xb8>)
    cbe2:	4822      	ldr	r0, [pc, #136]	; (cc6c <z_set_timeout_expiry+0xbc>)
    cbe4:	f002 fb3b 	bl	f25e <assert_print>
    cbe8:	491d      	ldr	r1, [pc, #116]	; (cc60 <z_set_timeout_expiry+0xb0>)
    cbea:	4821      	ldr	r0, [pc, #132]	; (cc70 <z_set_timeout_expiry+0xc0>)
    cbec:	f002 fb37 	bl	f25e <assert_print>
    cbf0:	218e      	movs	r1, #142	; 0x8e
    cbf2:	4620      	mov	r0, r4
    cbf4:	f002 fb2c 	bl	f250 <assert_post_action>
    cbf8:	e7eb      	b.n	cbd2 <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    cbfa:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    cbfc:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    cc00:	2801      	cmp	r0, #1
    cc02:	dd00      	ble.n	cc06 <z_set_timeout_expiry+0x56>
    cc04:	b99c      	cbnz	r4, cc2e <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cc06:	4816      	ldr	r0, [pc, #88]	; (cc60 <z_set_timeout_expiry+0xb0>)
    cc08:	f7fd fde8 	bl	a7dc <z_spin_unlock_valid>
    cc0c:	b1b0      	cbz	r0, cc3c <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    cc0e:	f387 8811 	msr	BASEPRI, r7
    cc12:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    cc16:	2501      	movs	r5, #1
    cc18:	462c      	mov	r4, r5
    cc1a:	b9fd      	cbnz	r5, cc5c <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    cc1c:	f7ff fe12 	bl	c844 <next_timeout>
			      || (ticks <= next_to);
    cc20:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    cc24:	d0e9      	beq.n	cbfa <z_set_timeout_expiry+0x4a>
    cc26:	42b0      	cmp	r0, r6
    cc28:	dbe8      	blt.n	cbfc <z_set_timeout_expiry+0x4c>
    cc2a:	2401      	movs	r4, #1
    cc2c:	e7e6      	b.n	cbfc <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    cc2e:	4641      	mov	r1, r8
    cc30:	42b0      	cmp	r0, r6
    cc32:	bfa8      	it	ge
    cc34:	4630      	movge	r0, r6
    cc36:	f7fb f9ef 	bl	8018 <sys_clock_set_timeout>
    cc3a:	e7e4      	b.n	cc06 <z_set_timeout_expiry+0x56>
    cc3c:	4c09      	ldr	r4, [pc, #36]	; (cc64 <z_set_timeout_expiry+0xb4>)
    cc3e:	23b9      	movs	r3, #185	; 0xb9
    cc40:	4622      	mov	r2, r4
    cc42:	490c      	ldr	r1, [pc, #48]	; (cc74 <z_set_timeout_expiry+0xc4>)
    cc44:	4809      	ldr	r0, [pc, #36]	; (cc6c <z_set_timeout_expiry+0xbc>)
    cc46:	f002 fb0a 	bl	f25e <assert_print>
    cc4a:	4905      	ldr	r1, [pc, #20]	; (cc60 <z_set_timeout_expiry+0xb0>)
    cc4c:	480a      	ldr	r0, [pc, #40]	; (cc78 <z_set_timeout_expiry+0xc8>)
    cc4e:	f002 fb06 	bl	f25e <assert_print>
    cc52:	21b9      	movs	r1, #185	; 0xb9
    cc54:	4620      	mov	r0, r4
    cc56:	f002 fafb 	bl	f250 <assert_post_action>
    cc5a:	e7d8      	b.n	cc0e <z_set_timeout_expiry+0x5e>
		}
	}
}
    cc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc60:	2000d528 	.word	0x2000d528
    cc64:	000117b8 	.word	0x000117b8
    cc68:	00011818 	.word	0x00011818
    cc6c:	0001160c 	.word	0x0001160c
    cc70:	00011830 	.word	0x00011830
    cc74:	000117e8 	.word	0x000117e8
    cc78:	00011800 	.word	0x00011800

0000cc7c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    cc7c:	b570      	push	{r4, r5, r6, lr}
    cc7e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    cc80:	f7fe fd5e 	bl	b740 <z_time_slice>
	__asm__ volatile(
    cc84:	f04f 0320 	mov.w	r3, #32
    cc88:	f3ef 8511 	mrs	r5, BASEPRI
    cc8c:	f383 8812 	msr	BASEPRI_MAX, r3
    cc90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cc94:	4854      	ldr	r0, [pc, #336]	; (cde8 <sys_clock_announce+0x16c>)
    cc96:	f7fd fd91 	bl	a7bc <z_spin_lock_valid>
    cc9a:	b128      	cbz	r0, cca8 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    cc9c:	4852      	ldr	r0, [pc, #328]	; (cde8 <sys_clock_announce+0x16c>)
    cc9e:	f7fd fdad 	bl	a7fc <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    cca2:	4b52      	ldr	r3, [pc, #328]	; (cdec <sys_clock_announce+0x170>)
    cca4:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    cca6:	e022      	b.n	ccee <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cca8:	4e51      	ldr	r6, [pc, #324]	; (cdf0 <sys_clock_announce+0x174>)
    ccaa:	238e      	movs	r3, #142	; 0x8e
    ccac:	4632      	mov	r2, r6
    ccae:	4951      	ldr	r1, [pc, #324]	; (cdf4 <sys_clock_announce+0x178>)
    ccb0:	4851      	ldr	r0, [pc, #324]	; (cdf8 <sys_clock_announce+0x17c>)
    ccb2:	f002 fad4 	bl	f25e <assert_print>
    ccb6:	494c      	ldr	r1, [pc, #304]	; (cde8 <sys_clock_announce+0x16c>)
    ccb8:	4850      	ldr	r0, [pc, #320]	; (cdfc <sys_clock_announce+0x180>)
    ccba:	f002 fad0 	bl	f25e <assert_print>
    ccbe:	218e      	movs	r1, #142	; 0x8e
    ccc0:	4630      	mov	r0, r6
    ccc2:	f002 fac5 	bl	f250 <assert_post_action>
    ccc6:	e7e9      	b.n	cc9c <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ccc8:	4e49      	ldr	r6, [pc, #292]	; (cdf0 <sys_clock_announce+0x174>)
    ccca:	23b9      	movs	r3, #185	; 0xb9
    cccc:	4632      	mov	r2, r6
    ccce:	494c      	ldr	r1, [pc, #304]	; (ce00 <sys_clock_announce+0x184>)
    ccd0:	4849      	ldr	r0, [pc, #292]	; (cdf8 <sys_clock_announce+0x17c>)
    ccd2:	f002 fac4 	bl	f25e <assert_print>
    ccd6:	4944      	ldr	r1, [pc, #272]	; (cde8 <sys_clock_announce+0x16c>)
    ccd8:	484a      	ldr	r0, [pc, #296]	; (ce04 <sys_clock_announce+0x188>)
    ccda:	f002 fac0 	bl	f25e <assert_print>
    ccde:	21b9      	movs	r1, #185	; 0xb9
    cce0:	4630      	mov	r0, r6
    cce2:	f002 fab5 	bl	f250 <assert_post_action>
    cce6:	e027      	b.n	cd38 <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    cce8:	483f      	ldr	r0, [pc, #252]	; (cde8 <sys_clock_announce+0x16c>)
    ccea:	f7fd fd87 	bl	a7fc <z_spin_lock_set_owner>
    ccee:	f7ff fd87 	bl	c800 <first>
    ccf2:	4604      	mov	r4, r0
    ccf4:	2800      	cmp	r0, #0
    ccf6:	d043      	beq.n	cd80 <sys_clock_announce+0x104>
    ccf8:	6902      	ldr	r2, [r0, #16]
    ccfa:	6941      	ldr	r1, [r0, #20]
    ccfc:	4b3b      	ldr	r3, [pc, #236]	; (cdec <sys_clock_announce+0x170>)
    ccfe:	681b      	ldr	r3, [r3, #0]
    cd00:	17d8      	asrs	r0, r3, #31
    cd02:	4293      	cmp	r3, r2
    cd04:	eb70 0101 	sbcs.w	r1, r0, r1
    cd08:	db3a      	blt.n	cd80 <sys_clock_announce+0x104>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    cd0a:	483f      	ldr	r0, [pc, #252]	; (ce08 <sys_clock_announce+0x18c>)
    cd0c:	6801      	ldr	r1, [r0, #0]
    cd0e:	6846      	ldr	r6, [r0, #4]
    cd10:	1889      	adds	r1, r1, r2
    cd12:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    cd16:	6001      	str	r1, [r0, #0]
    cd18:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    cd1a:	1a9b      	subs	r3, r3, r2
    cd1c:	4a33      	ldr	r2, [pc, #204]	; (cdec <sys_clock_announce+0x170>)
    cd1e:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    cd20:	2200      	movs	r2, #0
    cd22:	2300      	movs	r3, #0
    cd24:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    cd28:	4620      	mov	r0, r4
    cd2a:	f003 fcac 	bl	10686 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cd2e:	482e      	ldr	r0, [pc, #184]	; (cde8 <sys_clock_announce+0x16c>)
    cd30:	f7fd fd54 	bl	a7dc <z_spin_unlock_valid>
    cd34:	2800      	cmp	r0, #0
    cd36:	d0c7      	beq.n	ccc8 <sys_clock_announce+0x4c>
	__asm__ volatile(
    cd38:	f385 8811 	msr	BASEPRI, r5
    cd3c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    cd40:	68a3      	ldr	r3, [r4, #8]
    cd42:	4620      	mov	r0, r4
    cd44:	4798      	blx	r3
	__asm__ volatile(
    cd46:	f04f 0320 	mov.w	r3, #32
    cd4a:	f3ef 8511 	mrs	r5, BASEPRI
    cd4e:	f383 8812 	msr	BASEPRI_MAX, r3
    cd52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cd56:	4824      	ldr	r0, [pc, #144]	; (cde8 <sys_clock_announce+0x16c>)
    cd58:	f7fd fd30 	bl	a7bc <z_spin_lock_valid>
    cd5c:	2800      	cmp	r0, #0
    cd5e:	d1c3      	bne.n	cce8 <sys_clock_announce+0x6c>
    cd60:	4c23      	ldr	r4, [pc, #140]	; (cdf0 <sys_clock_announce+0x174>)
    cd62:	238e      	movs	r3, #142	; 0x8e
    cd64:	4622      	mov	r2, r4
    cd66:	4923      	ldr	r1, [pc, #140]	; (cdf4 <sys_clock_announce+0x178>)
    cd68:	4823      	ldr	r0, [pc, #140]	; (cdf8 <sys_clock_announce+0x17c>)
    cd6a:	f002 fa78 	bl	f25e <assert_print>
    cd6e:	491e      	ldr	r1, [pc, #120]	; (cde8 <sys_clock_announce+0x16c>)
    cd70:	4822      	ldr	r0, [pc, #136]	; (cdfc <sys_clock_announce+0x180>)
    cd72:	f002 fa74 	bl	f25e <assert_print>
    cd76:	218e      	movs	r1, #142	; 0x8e
    cd78:	4620      	mov	r0, r4
    cd7a:	f002 fa69 	bl	f250 <assert_post_action>
    cd7e:	e7b3      	b.n	cce8 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    cd80:	b144      	cbz	r4, cd94 <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    cd82:	4b1a      	ldr	r3, [pc, #104]	; (cdec <sys_clock_announce+0x170>)
    cd84:	6819      	ldr	r1, [r3, #0]
    cd86:	6923      	ldr	r3, [r4, #16]
    cd88:	6962      	ldr	r2, [r4, #20]
    cd8a:	1a5b      	subs	r3, r3, r1
    cd8c:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    cd90:	6123      	str	r3, [r4, #16]
    cd92:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    cd94:	4a1c      	ldr	r2, [pc, #112]	; (ce08 <sys_clock_announce+0x18c>)
    cd96:	4e15      	ldr	r6, [pc, #84]	; (cdec <sys_clock_announce+0x170>)
    cd98:	6830      	ldr	r0, [r6, #0]
    cd9a:	6813      	ldr	r3, [r2, #0]
    cd9c:	6851      	ldr	r1, [r2, #4]
    cd9e:	181b      	adds	r3, r3, r0
    cda0:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    cda4:	6013      	str	r3, [r2, #0]
    cda6:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    cda8:	2400      	movs	r4, #0
    cdaa:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    cdac:	f7ff fd4a 	bl	c844 <next_timeout>
    cdb0:	4621      	mov	r1, r4
    cdb2:	f7fb f931 	bl	8018 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cdb6:	480c      	ldr	r0, [pc, #48]	; (cde8 <sys_clock_announce+0x16c>)
    cdb8:	f7fd fd10 	bl	a7dc <z_spin_unlock_valid>
    cdbc:	b120      	cbz	r0, cdc8 <sys_clock_announce+0x14c>
	__asm__ volatile(
    cdbe:	f385 8811 	msr	BASEPRI, r5
    cdc2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    cdc6:	bd70      	pop	{r4, r5, r6, pc}
    cdc8:	4c09      	ldr	r4, [pc, #36]	; (cdf0 <sys_clock_announce+0x174>)
    cdca:	23b9      	movs	r3, #185	; 0xb9
    cdcc:	4622      	mov	r2, r4
    cdce:	490c      	ldr	r1, [pc, #48]	; (ce00 <sys_clock_announce+0x184>)
    cdd0:	4809      	ldr	r0, [pc, #36]	; (cdf8 <sys_clock_announce+0x17c>)
    cdd2:	f002 fa44 	bl	f25e <assert_print>
    cdd6:	4904      	ldr	r1, [pc, #16]	; (cde8 <sys_clock_announce+0x16c>)
    cdd8:	480a      	ldr	r0, [pc, #40]	; (ce04 <sys_clock_announce+0x188>)
    cdda:	f002 fa40 	bl	f25e <assert_print>
    cdde:	21b9      	movs	r1, #185	; 0xb9
    cde0:	4620      	mov	r0, r4
    cde2:	f002 fa35 	bl	f250 <assert_post_action>
    cde6:	e7ea      	b.n	cdbe <sys_clock_announce+0x142>
    cde8:	2000d528 	.word	0x2000d528
    cdec:	2000d524 	.word	0x2000d524
    cdf0:	000117b8 	.word	0x000117b8
    cdf4:	00011818 	.word	0x00011818
    cdf8:	0001160c 	.word	0x0001160c
    cdfc:	00011830 	.word	0x00011830
    ce00:	000117e8 	.word	0x000117e8
    ce04:	00011800 	.word	0x00011800
    ce08:	20004928 	.word	0x20004928

0000ce0c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    ce0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    ce0e:	2600      	movs	r6, #0
	__asm__ volatile(
    ce10:	f04f 0320 	mov.w	r3, #32
    ce14:	f3ef 8711 	mrs	r7, BASEPRI
    ce18:	f383 8812 	msr	BASEPRI_MAX, r3
    ce1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ce20:	481f      	ldr	r0, [pc, #124]	; (cea0 <sys_clock_tick_get+0x94>)
    ce22:	f7fd fccb 	bl	a7bc <z_spin_lock_valid>
    ce26:	b128      	cbz	r0, ce34 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    ce28:	481d      	ldr	r0, [pc, #116]	; (cea0 <sys_clock_tick_get+0x94>)
    ce2a:	f7fd fce7 	bl	a7fc <z_spin_lock_set_owner>
	uint64_t t = 0U;
    ce2e:	2400      	movs	r4, #0
    ce30:	4625      	mov	r5, r4
	return k;
    ce32:	e014      	b.n	ce5e <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ce34:	4c1b      	ldr	r4, [pc, #108]	; (cea4 <sys_clock_tick_get+0x98>)
    ce36:	238e      	movs	r3, #142	; 0x8e
    ce38:	4622      	mov	r2, r4
    ce3a:	491b      	ldr	r1, [pc, #108]	; (cea8 <sys_clock_tick_get+0x9c>)
    ce3c:	481b      	ldr	r0, [pc, #108]	; (ceac <sys_clock_tick_get+0xa0>)
    ce3e:	f002 fa0e 	bl	f25e <assert_print>
    ce42:	4917      	ldr	r1, [pc, #92]	; (cea0 <sys_clock_tick_get+0x94>)
    ce44:	481a      	ldr	r0, [pc, #104]	; (ceb0 <sys_clock_tick_get+0xa4>)
    ce46:	f002 fa0a 	bl	f25e <assert_print>
    ce4a:	218e      	movs	r1, #142	; 0x8e
    ce4c:	4620      	mov	r0, r4
    ce4e:	f002 f9ff 	bl	f250 <assert_post_action>
    ce52:	e7e9      	b.n	ce28 <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    ce54:	f387 8811 	msr	BASEPRI, r7
    ce58:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ce5c:	2601      	movs	r6, #1
    ce5e:	b9e6      	cbnz	r6, ce9a <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    ce60:	f7fb f90c 	bl	807c <sys_clock_elapsed>
    ce64:	4b13      	ldr	r3, [pc, #76]	; (ceb4 <sys_clock_tick_get+0xa8>)
    ce66:	681c      	ldr	r4, [r3, #0]
    ce68:	685d      	ldr	r5, [r3, #4]
    ce6a:	1904      	adds	r4, r0, r4
    ce6c:	f145 0500 	adc.w	r5, r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ce70:	480b      	ldr	r0, [pc, #44]	; (cea0 <sys_clock_tick_get+0x94>)
    ce72:	f7fd fcb3 	bl	a7dc <z_spin_unlock_valid>
    ce76:	2800      	cmp	r0, #0
    ce78:	d1ec      	bne.n	ce54 <sys_clock_tick_get+0x48>
    ce7a:	4e0a      	ldr	r6, [pc, #40]	; (cea4 <sys_clock_tick_get+0x98>)
    ce7c:	23b9      	movs	r3, #185	; 0xb9
    ce7e:	4632      	mov	r2, r6
    ce80:	490d      	ldr	r1, [pc, #52]	; (ceb8 <sys_clock_tick_get+0xac>)
    ce82:	480a      	ldr	r0, [pc, #40]	; (ceac <sys_clock_tick_get+0xa0>)
    ce84:	f002 f9eb 	bl	f25e <assert_print>
    ce88:	4905      	ldr	r1, [pc, #20]	; (cea0 <sys_clock_tick_get+0x94>)
    ce8a:	480c      	ldr	r0, [pc, #48]	; (cebc <sys_clock_tick_get+0xb0>)
    ce8c:	f002 f9e7 	bl	f25e <assert_print>
    ce90:	21b9      	movs	r1, #185	; 0xb9
    ce92:	4630      	mov	r0, r6
    ce94:	f002 f9dc 	bl	f250 <assert_post_action>
    ce98:	e7dc      	b.n	ce54 <sys_clock_tick_get+0x48>
	}
	return t;
}
    ce9a:	4620      	mov	r0, r4
    ce9c:	4629      	mov	r1, r5
    ce9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cea0:	2000d528 	.word	0x2000d528
    cea4:	000117b8 	.word	0x000117b8
    cea8:	00011818 	.word	0x00011818
    ceac:	0001160c 	.word	0x0001160c
    ceb0:	00011830 	.word	0x00011830
    ceb4:	20004928 	.word	0x20004928
    ceb8:	000117e8 	.word	0x000117e8
    cebc:	00011800 	.word	0x00011800

0000cec0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    cec0:	b570      	push	{r4, r5, r6, lr}
    cec2:	4604      	mov	r4, r0
	__asm__ volatile(
    cec4:	f04f 0320 	mov.w	r3, #32
    cec8:	f3ef 8611 	mrs	r6, BASEPRI
    cecc:	f383 8812 	msr	BASEPRI_MAX, r3
    ced0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ced4:	4857      	ldr	r0, [pc, #348]	; (d034 <z_timer_expiration_handler+0x174>)
    ced6:	f7fd fc71 	bl	a7bc <z_spin_lock_valid>
    ceda:	2800      	cmp	r0, #0
    cedc:	d049      	beq.n	cf72 <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
    cede:	4855      	ldr	r0, [pc, #340]	; (d034 <z_timer_expiration_handler+0x174>)
    cee0:	f7fd fc8c 	bl	a7fc <z_spin_lock_set_owner>
	return k;
    cee4:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    cee6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    cee8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    ceea:	ea52 0103 	orrs.w	r1, r2, r3
    ceee:	d005      	beq.n	cefc <z_timer_expiration_handler+0x3c>
    cef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cef4:	bf08      	it	eq
    cef6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    cefa:	d14a      	bne.n	cf92 <z_timer_expiration_handler+0xd2>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    cefc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    cefe:	3301      	adds	r3, #1
    cf00:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    cf02:	6a23      	ldr	r3, [r4, #32]
    cf04:	b1db      	cbz	r3, cf3e <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cf06:	484b      	ldr	r0, [pc, #300]	; (d034 <z_timer_expiration_handler+0x174>)
    cf08:	f7fd fc68 	bl	a7dc <z_spin_unlock_valid>
    cf0c:	2800      	cmp	r0, #0
    cf0e:	d047      	beq.n	cfa0 <z_timer_expiration_handler+0xe0>
	__asm__ volatile(
    cf10:	f386 8811 	msr	BASEPRI, r6
    cf14:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    cf18:	6a23      	ldr	r3, [r4, #32]
    cf1a:	4620      	mov	r0, r4
    cf1c:	4798      	blx	r3
	__asm__ volatile(
    cf1e:	f04f 0320 	mov.w	r3, #32
    cf22:	f3ef 8511 	mrs	r5, BASEPRI
    cf26:	f383 8812 	msr	BASEPRI_MAX, r3
    cf2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cf2e:	4841      	ldr	r0, [pc, #260]	; (d034 <z_timer_expiration_handler+0x174>)
    cf30:	f7fd fc44 	bl	a7bc <z_spin_lock_valid>
    cf34:	2800      	cmp	r0, #0
    cf36:	d043      	beq.n	cfc0 <z_timer_expiration_handler+0x100>
	z_spin_lock_set_owner(l);
    cf38:	483e      	ldr	r0, [pc, #248]	; (d034 <z_timer_expiration_handler+0x174>)
    cf3a:	f7fd fc5f 	bl	a7fc <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    cf3e:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    cf42:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cf44:	42a3      	cmp	r3, r4
    cf46:	d04b      	beq.n	cfe0 <z_timer_expiration_handler+0x120>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    cf48:	2c00      	cmp	r4, #0
    cf4a:	d049      	beq.n	cfe0 <z_timer_expiration_handler+0x120>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    cf4c:	4620      	mov	r0, r4
    cf4e:	f7fe f9f7 	bl	b340 <z_unpend_thread_no_timeout>
    cf52:	2300      	movs	r3, #0
    cf54:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cf58:	4836      	ldr	r0, [pc, #216]	; (d034 <z_timer_expiration_handler+0x174>)
    cf5a:	f7fd fc3f 	bl	a7dc <z_spin_unlock_valid>
    cf5e:	2800      	cmp	r0, #0
    cf60:	d057      	beq.n	d012 <z_timer_expiration_handler+0x152>
	__asm__ volatile(
    cf62:	f385 8811 	msr	BASEPRI, r5
    cf66:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    cf6a:	4620      	mov	r0, r4
    cf6c:	f7fe fce6 	bl	b93c <z_ready_thread>
}
    cf70:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cf72:	4d31      	ldr	r5, [pc, #196]	; (d038 <z_timer_expiration_handler+0x178>)
    cf74:	238e      	movs	r3, #142	; 0x8e
    cf76:	462a      	mov	r2, r5
    cf78:	4930      	ldr	r1, [pc, #192]	; (d03c <z_timer_expiration_handler+0x17c>)
    cf7a:	4831      	ldr	r0, [pc, #196]	; (d040 <z_timer_expiration_handler+0x180>)
    cf7c:	f002 f96f 	bl	f25e <assert_print>
    cf80:	492c      	ldr	r1, [pc, #176]	; (d034 <z_timer_expiration_handler+0x174>)
    cf82:	4830      	ldr	r0, [pc, #192]	; (d044 <z_timer_expiration_handler+0x184>)
    cf84:	f002 f96b 	bl	f25e <assert_print>
    cf88:	218e      	movs	r1, #142	; 0x8e
    cf8a:	4628      	mov	r0, r5
    cf8c:	f002 f960 	bl	f250 <assert_post_action>
    cf90:	e7a5      	b.n	cede <z_timer_expiration_handler+0x1e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    cf92:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    cf96:	492c      	ldr	r1, [pc, #176]	; (d048 <z_timer_expiration_handler+0x188>)
    cf98:	4620      	mov	r0, r4
    cf9a:	f7ff fc79 	bl	c890 <z_add_timeout>
    cf9e:	e7ad      	b.n	cefc <z_timer_expiration_handler+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cfa0:	4d25      	ldr	r5, [pc, #148]	; (d038 <z_timer_expiration_handler+0x178>)
    cfa2:	23b9      	movs	r3, #185	; 0xb9
    cfa4:	462a      	mov	r2, r5
    cfa6:	4929      	ldr	r1, [pc, #164]	; (d04c <z_timer_expiration_handler+0x18c>)
    cfa8:	4825      	ldr	r0, [pc, #148]	; (d040 <z_timer_expiration_handler+0x180>)
    cfaa:	f002 f958 	bl	f25e <assert_print>
    cfae:	4921      	ldr	r1, [pc, #132]	; (d034 <z_timer_expiration_handler+0x174>)
    cfb0:	4827      	ldr	r0, [pc, #156]	; (d050 <z_timer_expiration_handler+0x190>)
    cfb2:	f002 f954 	bl	f25e <assert_print>
    cfb6:	21b9      	movs	r1, #185	; 0xb9
    cfb8:	4628      	mov	r0, r5
    cfba:	f002 f949 	bl	f250 <assert_post_action>
    cfbe:	e7a7      	b.n	cf10 <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cfc0:	4e1d      	ldr	r6, [pc, #116]	; (d038 <z_timer_expiration_handler+0x178>)
    cfc2:	238e      	movs	r3, #142	; 0x8e
    cfc4:	4632      	mov	r2, r6
    cfc6:	491d      	ldr	r1, [pc, #116]	; (d03c <z_timer_expiration_handler+0x17c>)
    cfc8:	481d      	ldr	r0, [pc, #116]	; (d040 <z_timer_expiration_handler+0x180>)
    cfca:	f002 f948 	bl	f25e <assert_print>
    cfce:	4919      	ldr	r1, [pc, #100]	; (d034 <z_timer_expiration_handler+0x174>)
    cfd0:	481c      	ldr	r0, [pc, #112]	; (d044 <z_timer_expiration_handler+0x184>)
    cfd2:	f002 f944 	bl	f25e <assert_print>
    cfd6:	218e      	movs	r1, #142	; 0x8e
    cfd8:	4630      	mov	r0, r6
    cfda:	f002 f939 	bl	f250 <assert_post_action>
    cfde:	e7ab      	b.n	cf38 <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cfe0:	4814      	ldr	r0, [pc, #80]	; (d034 <z_timer_expiration_handler+0x174>)
    cfe2:	f7fd fbfb 	bl	a7dc <z_spin_unlock_valid>
    cfe6:	b120      	cbz	r0, cff2 <z_timer_expiration_handler+0x132>
    cfe8:	f385 8811 	msr	BASEPRI, r5
    cfec:	f3bf 8f6f 	isb	sy
		return;
    cff0:	e7be      	b.n	cf70 <z_timer_expiration_handler+0xb0>
    cff2:	4c11      	ldr	r4, [pc, #68]	; (d038 <z_timer_expiration_handler+0x178>)
    cff4:	23b9      	movs	r3, #185	; 0xb9
    cff6:	4622      	mov	r2, r4
    cff8:	4914      	ldr	r1, [pc, #80]	; (d04c <z_timer_expiration_handler+0x18c>)
    cffa:	4811      	ldr	r0, [pc, #68]	; (d040 <z_timer_expiration_handler+0x180>)
    cffc:	f002 f92f 	bl	f25e <assert_print>
    d000:	490c      	ldr	r1, [pc, #48]	; (d034 <z_timer_expiration_handler+0x174>)
    d002:	4813      	ldr	r0, [pc, #76]	; (d050 <z_timer_expiration_handler+0x190>)
    d004:	f002 f92b 	bl	f25e <assert_print>
    d008:	21b9      	movs	r1, #185	; 0xb9
    d00a:	4620      	mov	r0, r4
    d00c:	f002 f920 	bl	f250 <assert_post_action>
    d010:	e7ea      	b.n	cfe8 <z_timer_expiration_handler+0x128>
    d012:	4e09      	ldr	r6, [pc, #36]	; (d038 <z_timer_expiration_handler+0x178>)
    d014:	23b9      	movs	r3, #185	; 0xb9
    d016:	4632      	mov	r2, r6
    d018:	490c      	ldr	r1, [pc, #48]	; (d04c <z_timer_expiration_handler+0x18c>)
    d01a:	4809      	ldr	r0, [pc, #36]	; (d040 <z_timer_expiration_handler+0x180>)
    d01c:	f002 f91f 	bl	f25e <assert_print>
    d020:	4904      	ldr	r1, [pc, #16]	; (d034 <z_timer_expiration_handler+0x174>)
    d022:	480b      	ldr	r0, [pc, #44]	; (d050 <z_timer_expiration_handler+0x190>)
    d024:	f002 f91b 	bl	f25e <assert_print>
    d028:	21b9      	movs	r1, #185	; 0xb9
    d02a:	4630      	mov	r0, r6
    d02c:	f002 f910 	bl	f250 <assert_post_action>
    d030:	e797      	b.n	cf62 <z_timer_expiration_handler+0xa2>
    d032:	bf00      	nop
    d034:	2000d52c 	.word	0x2000d52c
    d038:	000117b8 	.word	0x000117b8
    d03c:	00011818 	.word	0x00011818
    d040:	0001160c 	.word	0x0001160c
    d044:	00011830 	.word	0x00011830
    d048:	0000cec1 	.word	0x0000cec1
    d04c:	000117e8 	.word	0x000117e8
    d050:	00011800 	.word	0x00011800

0000d054 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    d054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d058:	9f06      	ldr	r7, [sp, #24]
    d05a:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    d05e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d062:	bf08      	it	eq
    d064:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    d068:	d02f      	beq.n	d0ca <z_impl_k_timer_start+0x76>
    d06a:	4605      	mov	r5, r0
    d06c:	4614      	mov	r4, r2
    d06e:	461e      	mov	r6, r3
    d070:	4611      	mov	r1, r2
    d072:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    d074:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    d078:	bf08      	it	eq
    d07a:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    d07e:	d00d      	beq.n	d09c <z_impl_k_timer_start+0x48>
    d080:	ea57 0c08 	orrs.w	ip, r7, r8
    d084:	d00a      	beq.n	d09c <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
    d086:	f06f 0c01 	mvn.w	ip, #1
    d08a:	ebbc 0c07 	subs.w	ip, ip, r7
    d08e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    d092:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    d096:	f1bc 0f00 	cmp.w	ip, #0
    d09a:	db18      	blt.n	d0ce <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    d09c:	f06f 0301 	mvn.w	r3, #1
    d0a0:	1a5b      	subs	r3, r3, r1
    d0a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d0a6:	eb63 0300 	sbc.w	r3, r3, r0
    d0aa:	2b00      	cmp	r3, #0
    d0ac:	db1a      	blt.n	d0e4 <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    d0ae:	4628      	mov	r0, r5
    d0b0:	f7ff fcd2 	bl	ca58 <z_abort_timeout>
	timer->period = period;
    d0b4:	62af      	str	r7, [r5, #40]	; 0x28
    d0b6:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    d0ba:	2300      	movs	r3, #0
    d0bc:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    d0be:	4622      	mov	r2, r4
    d0c0:	4633      	mov	r3, r6
    d0c2:	490e      	ldr	r1, [pc, #56]	; (d0fc <z_impl_k_timer_start+0xa8>)
    d0c4:	4628      	mov	r0, r5
    d0c6:	f7ff fbe3 	bl	c890 <z_add_timeout>
		     duration);
}
    d0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    d0ce:	2f02      	cmp	r7, #2
    d0d0:	f178 0300 	sbcs.w	r3, r8, #0
    d0d4:	da02      	bge.n	d0dc <z_impl_k_timer_start+0x88>
    d0d6:	2702      	movs	r7, #2
    d0d8:	f04f 0800 	mov.w	r8, #0
    d0dc:	3f01      	subs	r7, #1
    d0de:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
    d0e2:	e7db      	b.n	d09c <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
    d0e4:	460c      	mov	r4, r1
    d0e6:	4606      	mov	r6, r0
    d0e8:	2901      	cmp	r1, #1
    d0ea:	f170 0300 	sbcs.w	r3, r0, #0
    d0ee:	da01      	bge.n	d0f4 <z_impl_k_timer_start+0xa0>
    d0f0:	2401      	movs	r4, #1
    d0f2:	2600      	movs	r6, #0
    d0f4:	3c01      	subs	r4, #1
    d0f6:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    d0fa:	e7d8      	b.n	d0ae <z_impl_k_timer_start+0x5a>
    d0fc:	0000cec1 	.word	0x0000cec1

0000d100 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    d100:	4b01      	ldr	r3, [pc, #4]	; (d108 <k_thread_system_pool_assign+0x8>)
    d102:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    d106:	4770      	bx	lr
    d108:	200041e0 	.word	0x200041e0

0000d10c <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    d10c:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    d10e:	4a03      	ldr	r2, [pc, #12]	; (d11c <boot_banner+0x10>)
    d110:	4903      	ldr	r1, [pc, #12]	; (d120 <boot_banner+0x14>)
    d112:	4804      	ldr	r0, [pc, #16]	; (d124 <boot_banner+0x18>)
    d114:	f001 ff9a 	bl	f04c <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    d118:	bd08      	pop	{r3, pc}
    d11a:	bf00      	nop
    d11c:	00012518 	.word	0x00012518
    d120:	00013274 	.word	0x00013274
    d124:	00013284 	.word	0x00013284

0000d128 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    d128:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    d12a:	4c0f      	ldr	r4, [pc, #60]	; (d168 <statics_init+0x40>)
    d12c:	e008      	b.n	d140 <statics_init+0x18>
    d12e:	4b0f      	ldr	r3, [pc, #60]	; (d16c <statics_init+0x44>)
    d130:	429c      	cmp	r4, r3
    d132:	d217      	bcs.n	d164 <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    d134:	68a2      	ldr	r2, [r4, #8]
    d136:	6861      	ldr	r1, [r4, #4]
    d138:	4620      	mov	r0, r4
    d13a:	f003 faf0 	bl	1071e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    d13e:	3418      	adds	r4, #24
    d140:	4b0a      	ldr	r3, [pc, #40]	; (d16c <statics_init+0x44>)
    d142:	429c      	cmp	r4, r3
    d144:	d9f3      	bls.n	d12e <statics_init+0x6>
    d146:	4d0a      	ldr	r5, [pc, #40]	; (d170 <statics_init+0x48>)
    d148:	2318      	movs	r3, #24
    d14a:	462a      	mov	r2, r5
    d14c:	4909      	ldr	r1, [pc, #36]	; (d174 <statics_init+0x4c>)
    d14e:	480a      	ldr	r0, [pc, #40]	; (d178 <statics_init+0x50>)
    d150:	f002 f885 	bl	f25e <assert_print>
    d154:	4809      	ldr	r0, [pc, #36]	; (d17c <statics_init+0x54>)
    d156:	f002 f882 	bl	f25e <assert_print>
    d15a:	2118      	movs	r1, #24
    d15c:	4628      	mov	r0, r5
    d15e:	f002 f877 	bl	f250 <assert_post_action>
    d162:	e7e4      	b.n	d12e <statics_init+0x6>
		}
	}
	return 0;
}
    d164:	2000      	movs	r0, #0
    d166:	bd38      	pop	{r3, r4, r5, pc}
    d168:	200041e0 	.word	0x200041e0
    d16c:	200041f8 	.word	0x200041f8
    d170:	000132ac 	.word	0x000132ac
    d174:	000132d0 	.word	0x000132d0
    d178:	0001160c 	.word	0x0001160c
    d17c:	00012df4 	.word	0x00012df4

0000d180 <acos>:
    d180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d182:	4604      	mov	r4, r0
    d184:	460d      	mov	r5, r1
    d186:	f7f3 fe6f 	bl	e68 <__ieee754_acos>
    d18a:	4b11      	ldr	r3, [pc, #68]	; (d1d0 <acos+0x50>)
    d18c:	f993 3000 	ldrsb.w	r3, [r3]
    d190:	3301      	adds	r3, #1
    d192:	4606      	mov	r6, r0
    d194:	460f      	mov	r7, r1
    d196:	d018      	beq.n	d1ca <acos+0x4a>
    d198:	4622      	mov	r2, r4
    d19a:	462b      	mov	r3, r5
    d19c:	4620      	mov	r0, r4
    d19e:	4629      	mov	r1, r5
    d1a0:	f7f3 fcbe 	bl	b20 <__aeabi_dcmpun>
    d1a4:	b988      	cbnz	r0, d1ca <acos+0x4a>
    d1a6:	4620      	mov	r0, r4
    d1a8:	4629      	mov	r1, r5
    d1aa:	f003 fac0 	bl	1072e <fabs>
    d1ae:	4b09      	ldr	r3, [pc, #36]	; (d1d4 <acos+0x54>)
    d1b0:	2200      	movs	r2, #0
    d1b2:	f7f3 fcab 	bl	b0c <__aeabi_dcmpgt>
    d1b6:	b140      	cbz	r0, d1ca <acos+0x4a>
    d1b8:	f002 f9cb 	bl	f552 <__errno>
    d1bc:	2321      	movs	r3, #33	; 0x21
    d1be:	6003      	str	r3, [r0, #0]
    d1c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d1c4:	4804      	ldr	r0, [pc, #16]	; (d1d8 <acos+0x58>)
    d1c6:	f000 b98f 	b.w	d4e8 <nan>
    d1ca:	4630      	mov	r0, r6
    d1cc:	4639      	mov	r1, r7
    d1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1d0:	200041c8 	.word	0x200041c8
    d1d4:	3ff00000 	.word	0x3ff00000
    d1d8:	000135f9 	.word	0x000135f9

0000d1dc <pow>:
    d1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d1e0:	461f      	mov	r7, r3
    d1e2:	4680      	mov	r8, r0
    d1e4:	4689      	mov	r9, r1
    d1e6:	4616      	mov	r6, r2
    d1e8:	f7f4 f88a 	bl	1300 <__ieee754_pow>
    d1ec:	4b4d      	ldr	r3, [pc, #308]	; (d324 <pow+0x148>)
    d1ee:	f993 3000 	ldrsb.w	r3, [r3]
    d1f2:	3301      	adds	r3, #1
    d1f4:	4604      	mov	r4, r0
    d1f6:	460d      	mov	r5, r1
    d1f8:	d015      	beq.n	d226 <pow+0x4a>
    d1fa:	4632      	mov	r2, r6
    d1fc:	463b      	mov	r3, r7
    d1fe:	4630      	mov	r0, r6
    d200:	4639      	mov	r1, r7
    d202:	f7f3 fc8d 	bl	b20 <__aeabi_dcmpun>
    d206:	b970      	cbnz	r0, d226 <pow+0x4a>
    d208:	4642      	mov	r2, r8
    d20a:	464b      	mov	r3, r9
    d20c:	4640      	mov	r0, r8
    d20e:	4649      	mov	r1, r9
    d210:	f7f3 fc86 	bl	b20 <__aeabi_dcmpun>
    d214:	2200      	movs	r2, #0
    d216:	2300      	movs	r3, #0
    d218:	b148      	cbz	r0, d22e <pow+0x52>
    d21a:	4630      	mov	r0, r6
    d21c:	4639      	mov	r1, r7
    d21e:	f7f3 fc4d 	bl	abc <__aeabi_dcmpeq>
    d222:	2800      	cmp	r0, #0
    d224:	d17b      	bne.n	d31e <pow+0x142>
    d226:	4620      	mov	r0, r4
    d228:	4629      	mov	r1, r5
    d22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d22e:	4640      	mov	r0, r8
    d230:	4649      	mov	r1, r9
    d232:	f7f3 fc43 	bl	abc <__aeabi_dcmpeq>
    d236:	b1e0      	cbz	r0, d272 <pow+0x96>
    d238:	2200      	movs	r2, #0
    d23a:	2300      	movs	r3, #0
    d23c:	4630      	mov	r0, r6
    d23e:	4639      	mov	r1, r7
    d240:	f7f3 fc3c 	bl	abc <__aeabi_dcmpeq>
    d244:	2800      	cmp	r0, #0
    d246:	d16a      	bne.n	d31e <pow+0x142>
    d248:	4630      	mov	r0, r6
    d24a:	4639      	mov	r1, r7
    d24c:	f003 fa72 	bl	10734 <finite>
    d250:	2800      	cmp	r0, #0
    d252:	d0e8      	beq.n	d226 <pow+0x4a>
    d254:	2200      	movs	r2, #0
    d256:	2300      	movs	r3, #0
    d258:	4630      	mov	r0, r6
    d25a:	4639      	mov	r1, r7
    d25c:	f7f3 fc38 	bl	ad0 <__aeabi_dcmplt>
    d260:	2800      	cmp	r0, #0
    d262:	d0e0      	beq.n	d226 <pow+0x4a>
    d264:	f002 f975 	bl	f552 <__errno>
    d268:	2321      	movs	r3, #33	; 0x21
    d26a:	6003      	str	r3, [r0, #0]
    d26c:	2400      	movs	r4, #0
    d26e:	4d2e      	ldr	r5, [pc, #184]	; (d328 <pow+0x14c>)
    d270:	e7d9      	b.n	d226 <pow+0x4a>
    d272:	4620      	mov	r0, r4
    d274:	4629      	mov	r1, r5
    d276:	f003 fa5d 	bl	10734 <finite>
    d27a:	bba8      	cbnz	r0, d2e8 <pow+0x10c>
    d27c:	4640      	mov	r0, r8
    d27e:	4649      	mov	r1, r9
    d280:	f003 fa58 	bl	10734 <finite>
    d284:	b380      	cbz	r0, d2e8 <pow+0x10c>
    d286:	4630      	mov	r0, r6
    d288:	4639      	mov	r1, r7
    d28a:	f003 fa53 	bl	10734 <finite>
    d28e:	b358      	cbz	r0, d2e8 <pow+0x10c>
    d290:	4622      	mov	r2, r4
    d292:	462b      	mov	r3, r5
    d294:	4620      	mov	r0, r4
    d296:	4629      	mov	r1, r5
    d298:	f7f3 fc42 	bl	b20 <__aeabi_dcmpun>
    d29c:	b160      	cbz	r0, d2b8 <pow+0xdc>
    d29e:	f002 f958 	bl	f552 <__errno>
    d2a2:	2321      	movs	r3, #33	; 0x21
    d2a4:	6003      	str	r3, [r0, #0]
    d2a6:	2200      	movs	r2, #0
    d2a8:	2300      	movs	r3, #0
    d2aa:	4610      	mov	r0, r2
    d2ac:	4619      	mov	r1, r3
    d2ae:	f7f3 fa5d 	bl	76c <__aeabi_ddiv>
    d2b2:	4604      	mov	r4, r0
    d2b4:	460d      	mov	r5, r1
    d2b6:	e7b6      	b.n	d226 <pow+0x4a>
    d2b8:	f002 f94b 	bl	f552 <__errno>
    d2bc:	2322      	movs	r3, #34	; 0x22
    d2be:	6003      	str	r3, [r0, #0]
    d2c0:	2200      	movs	r2, #0
    d2c2:	2300      	movs	r3, #0
    d2c4:	4640      	mov	r0, r8
    d2c6:	4649      	mov	r1, r9
    d2c8:	f7f3 fc02 	bl	ad0 <__aeabi_dcmplt>
    d2cc:	2400      	movs	r4, #0
    d2ce:	b148      	cbz	r0, d2e4 <pow+0x108>
    d2d0:	4630      	mov	r0, r6
    d2d2:	4639      	mov	r1, r7
    d2d4:	f000 f90e 	bl	d4f4 <rint>
    d2d8:	4632      	mov	r2, r6
    d2da:	463b      	mov	r3, r7
    d2dc:	f7f3 fbee 	bl	abc <__aeabi_dcmpeq>
    d2e0:	2800      	cmp	r0, #0
    d2e2:	d0c4      	beq.n	d26e <pow+0x92>
    d2e4:	4d11      	ldr	r5, [pc, #68]	; (d32c <pow+0x150>)
    d2e6:	e79e      	b.n	d226 <pow+0x4a>
    d2e8:	2200      	movs	r2, #0
    d2ea:	2300      	movs	r3, #0
    d2ec:	4620      	mov	r0, r4
    d2ee:	4629      	mov	r1, r5
    d2f0:	f7f3 fbe4 	bl	abc <__aeabi_dcmpeq>
    d2f4:	2800      	cmp	r0, #0
    d2f6:	d096      	beq.n	d226 <pow+0x4a>
    d2f8:	4640      	mov	r0, r8
    d2fa:	4649      	mov	r1, r9
    d2fc:	f003 fa1a 	bl	10734 <finite>
    d300:	2800      	cmp	r0, #0
    d302:	d090      	beq.n	d226 <pow+0x4a>
    d304:	4630      	mov	r0, r6
    d306:	4639      	mov	r1, r7
    d308:	f003 fa14 	bl	10734 <finite>
    d30c:	2800      	cmp	r0, #0
    d30e:	d08a      	beq.n	d226 <pow+0x4a>
    d310:	f002 f91f 	bl	f552 <__errno>
    d314:	2322      	movs	r3, #34	; 0x22
    d316:	6003      	str	r3, [r0, #0]
    d318:	2400      	movs	r4, #0
    d31a:	2500      	movs	r5, #0
    d31c:	e783      	b.n	d226 <pow+0x4a>
    d31e:	4d04      	ldr	r5, [pc, #16]	; (d330 <pow+0x154>)
    d320:	2400      	movs	r4, #0
    d322:	e780      	b.n	d226 <pow+0x4a>
    d324:	200041c8 	.word	0x200041c8
    d328:	fff00000 	.word	0xfff00000
    d32c:	7ff00000 	.word	0x7ff00000
    d330:	3ff00000 	.word	0x3ff00000

0000d334 <sqrt>:
    d334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d336:	4606      	mov	r6, r0
    d338:	460f      	mov	r7, r1
    d33a:	f000 f827 	bl	d38c <__ieee754_sqrt>
    d33e:	4b12      	ldr	r3, [pc, #72]	; (d388 <sqrt+0x54>)
    d340:	f993 3000 	ldrsb.w	r3, [r3]
    d344:	3301      	adds	r3, #1
    d346:	4604      	mov	r4, r0
    d348:	460d      	mov	r5, r1
    d34a:	d019      	beq.n	d380 <sqrt+0x4c>
    d34c:	4632      	mov	r2, r6
    d34e:	463b      	mov	r3, r7
    d350:	4630      	mov	r0, r6
    d352:	4639      	mov	r1, r7
    d354:	f7f3 fbe4 	bl	b20 <__aeabi_dcmpun>
    d358:	b990      	cbnz	r0, d380 <sqrt+0x4c>
    d35a:	2200      	movs	r2, #0
    d35c:	2300      	movs	r3, #0
    d35e:	4630      	mov	r0, r6
    d360:	4639      	mov	r1, r7
    d362:	f7f3 fbb5 	bl	ad0 <__aeabi_dcmplt>
    d366:	b158      	cbz	r0, d380 <sqrt+0x4c>
    d368:	f002 f8f3 	bl	f552 <__errno>
    d36c:	2321      	movs	r3, #33	; 0x21
    d36e:	6003      	str	r3, [r0, #0]
    d370:	2200      	movs	r2, #0
    d372:	2300      	movs	r3, #0
    d374:	4610      	mov	r0, r2
    d376:	4619      	mov	r1, r3
    d378:	f7f3 f9f8 	bl	76c <__aeabi_ddiv>
    d37c:	4604      	mov	r4, r0
    d37e:	460d      	mov	r5, r1
    d380:	4620      	mov	r0, r4
    d382:	4629      	mov	r1, r5
    d384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d386:	bf00      	nop
    d388:	200041c8 	.word	0x200041c8

0000d38c <__ieee754_sqrt>:
    d38c:	f8df c154 	ldr.w	ip, [pc, #340]	; d4e4 <__ieee754_sqrt+0x158>
    d390:	ea3c 0c01 	bics.w	ip, ip, r1
    d394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d398:	460a      	mov	r2, r1
    d39a:	4606      	mov	r6, r0
    d39c:	460d      	mov	r5, r1
    d39e:	460c      	mov	r4, r1
    d3a0:	4607      	mov	r7, r0
    d3a2:	4603      	mov	r3, r0
    d3a4:	d10f      	bne.n	d3c6 <__ieee754_sqrt+0x3a>
    d3a6:	4602      	mov	r2, r0
    d3a8:	460b      	mov	r3, r1
    d3aa:	f7f3 f8b5 	bl	518 <__aeabi_dmul>
    d3ae:	4602      	mov	r2, r0
    d3b0:	460b      	mov	r3, r1
    d3b2:	4630      	mov	r0, r6
    d3b4:	4629      	mov	r1, r5
    d3b6:	f7f2 fef9 	bl	1ac <__adddf3>
    d3ba:	4606      	mov	r6, r0
    d3bc:	460d      	mov	r5, r1
    d3be:	4630      	mov	r0, r6
    d3c0:	4629      	mov	r1, r5
    d3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d3c6:	2900      	cmp	r1, #0
    d3c8:	dc0e      	bgt.n	d3e8 <__ieee754_sqrt+0x5c>
    d3ca:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
    d3ce:	ea5c 0707 	orrs.w	r7, ip, r7
    d3d2:	d0f4      	beq.n	d3be <__ieee754_sqrt+0x32>
    d3d4:	b141      	cbz	r1, d3e8 <__ieee754_sqrt+0x5c>
    d3d6:	4602      	mov	r2, r0
    d3d8:	460b      	mov	r3, r1
    d3da:	f7f2 fee5 	bl	1a8 <__aeabi_dsub>
    d3de:	4602      	mov	r2, r0
    d3e0:	460b      	mov	r3, r1
    d3e2:	f7f3 f9c3 	bl	76c <__aeabi_ddiv>
    d3e6:	e7e8      	b.n	d3ba <__ieee754_sqrt+0x2e>
    d3e8:	1521      	asrs	r1, r4, #20
    d3ea:	d074      	beq.n	d4d6 <__ieee754_sqrt+0x14a>
    d3ec:	07cc      	lsls	r4, r1, #31
    d3ee:	f3c2 0213 	ubfx	r2, r2, #0, #20
    d3f2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
    d3f6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    d3fa:	bf5e      	ittt	pl
    d3fc:	0fd9      	lsrpl	r1, r3, #31
    d3fe:	005b      	lslpl	r3, r3, #1
    d400:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
    d404:	2400      	movs	r4, #0
    d406:	0fd9      	lsrs	r1, r3, #31
    d408:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    d40c:	107f      	asrs	r7, r7, #1
    d40e:	005b      	lsls	r3, r3, #1
    d410:	2516      	movs	r5, #22
    d412:	4620      	mov	r0, r4
    d414:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    d418:	1846      	adds	r6, r0, r1
    d41a:	4296      	cmp	r6, r2
    d41c:	bfde      	ittt	le
    d41e:	1b92      	suble	r2, r2, r6
    d420:	1870      	addle	r0, r6, r1
    d422:	1864      	addle	r4, r4, r1
    d424:	0052      	lsls	r2, r2, #1
    d426:	3d01      	subs	r5, #1
    d428:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
    d42c:	ea4f 0151 	mov.w	r1, r1, lsr #1
    d430:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d434:	d1f0      	bne.n	d418 <__ieee754_sqrt+0x8c>
    d436:	4629      	mov	r1, r5
    d438:	f04f 0e20 	mov.w	lr, #32
    d43c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    d440:	4282      	cmp	r2, r0
    d442:	eb06 0c05 	add.w	ip, r6, r5
    d446:	dc02      	bgt.n	d44e <__ieee754_sqrt+0xc2>
    d448:	d113      	bne.n	d472 <__ieee754_sqrt+0xe6>
    d44a:	459c      	cmp	ip, r3
    d44c:	d811      	bhi.n	d472 <__ieee754_sqrt+0xe6>
    d44e:	f1bc 0f00 	cmp.w	ip, #0
    d452:	eb0c 0506 	add.w	r5, ip, r6
    d456:	da43      	bge.n	d4e0 <__ieee754_sqrt+0x154>
    d458:	2d00      	cmp	r5, #0
    d45a:	db41      	blt.n	d4e0 <__ieee754_sqrt+0x154>
    d45c:	f100 0801 	add.w	r8, r0, #1
    d460:	1a12      	subs	r2, r2, r0
    d462:	459c      	cmp	ip, r3
    d464:	bf88      	it	hi
    d466:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
    d46a:	eba3 030c 	sub.w	r3, r3, ip
    d46e:	4431      	add	r1, r6
    d470:	4640      	mov	r0, r8
    d472:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
    d476:	f1be 0e01 	subs.w	lr, lr, #1
    d47a:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
    d47e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d482:	ea4f 0656 	mov.w	r6, r6, lsr #1
    d486:	d1db      	bne.n	d440 <__ieee754_sqrt+0xb4>
    d488:	4313      	orrs	r3, r2
    d48a:	d006      	beq.n	d49a <__ieee754_sqrt+0x10e>
    d48c:	1c48      	adds	r0, r1, #1
    d48e:	bf13      	iteet	ne
    d490:	3101      	addne	r1, #1
    d492:	3401      	addeq	r4, #1
    d494:	4671      	moveq	r1, lr
    d496:	f021 0101 	bicne.w	r1, r1, #1
    d49a:	1063      	asrs	r3, r4, #1
    d49c:	0849      	lsrs	r1, r1, #1
    d49e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
    d4a2:	07e2      	lsls	r2, r4, #31
    d4a4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
    d4a8:	bf48      	it	mi
    d4aa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
    d4ae:	eb03 5507 	add.w	r5, r3, r7, lsl #20
    d4b2:	460e      	mov	r6, r1
    d4b4:	e783      	b.n	d3be <__ieee754_sqrt+0x32>
    d4b6:	0ada      	lsrs	r2, r3, #11
    d4b8:	3815      	subs	r0, #21
    d4ba:	055b      	lsls	r3, r3, #21
    d4bc:	2a00      	cmp	r2, #0
    d4be:	d0fa      	beq.n	d4b6 <__ieee754_sqrt+0x12a>
    d4c0:	02d5      	lsls	r5, r2, #11
    d4c2:	d50a      	bpl.n	d4da <__ieee754_sqrt+0x14e>
    d4c4:	f1c1 0420 	rsb	r4, r1, #32
    d4c8:	fa23 f404 	lsr.w	r4, r3, r4
    d4cc:	1e4d      	subs	r5, r1, #1
    d4ce:	408b      	lsls	r3, r1
    d4d0:	4322      	orrs	r2, r4
    d4d2:	1b41      	subs	r1, r0, r5
    d4d4:	e78a      	b.n	d3ec <__ieee754_sqrt+0x60>
    d4d6:	4608      	mov	r0, r1
    d4d8:	e7f0      	b.n	d4bc <__ieee754_sqrt+0x130>
    d4da:	0052      	lsls	r2, r2, #1
    d4dc:	3101      	adds	r1, #1
    d4de:	e7ef      	b.n	d4c0 <__ieee754_sqrt+0x134>
    d4e0:	4680      	mov	r8, r0
    d4e2:	e7bd      	b.n	d460 <__ieee754_sqrt+0xd4>
    d4e4:	7ff00000 	.word	0x7ff00000

0000d4e8 <nan>:
    d4e8:	4901      	ldr	r1, [pc, #4]	; (d4f0 <nan+0x8>)
    d4ea:	2000      	movs	r0, #0
    d4ec:	4770      	bx	lr
    d4ee:	bf00      	nop
    d4f0:	7ff80000 	.word	0x7ff80000

0000d4f4 <rint>:
    d4f4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
    d4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d4fa:	f2ac 36ff 	subw	r6, ip, #1023	; 0x3ff
    d4fe:	2e13      	cmp	r6, #19
    d500:	4602      	mov	r2, r0
    d502:	460b      	mov	r3, r1
    d504:	460c      	mov	r4, r1
    d506:	4605      	mov	r5, r0
    d508:	ea4f 77d1 	mov.w	r7, r1, lsr #31
    d50c:	dc5a      	bgt.n	d5c4 <rint+0xd0>
    d50e:	2e00      	cmp	r6, #0
    d510:	da2c      	bge.n	d56c <rint+0x78>
    d512:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d516:	4301      	orrs	r1, r0
    d518:	d024      	beq.n	d564 <rint+0x70>
    d51a:	f3c3 0113 	ubfx	r1, r3, #0, #20
    d51e:	4301      	orrs	r1, r0
    d520:	424d      	negs	r5, r1
    d522:	430d      	orrs	r5, r1
    d524:	0b2d      	lsrs	r5, r5, #12
    d526:	0c59      	lsrs	r1, r3, #17
    d528:	0449      	lsls	r1, r1, #17
    d52a:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
    d52e:	ea45 0301 	orr.w	r3, r5, r1
    d532:	4934      	ldr	r1, [pc, #208]	; (d604 <rint+0x110>)
    d534:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
    d538:	e9d7 6700 	ldrd	r6, r7, [r7]
    d53c:	4639      	mov	r1, r7
    d53e:	4630      	mov	r0, r6
    d540:	f7f2 fe34 	bl	1ac <__adddf3>
    d544:	e9cd 0100 	strd	r0, r1, [sp]
    d548:	463b      	mov	r3, r7
    d54a:	4632      	mov	r2, r6
    d54c:	e9dd 0100 	ldrd	r0, r1, [sp]
    d550:	f7f2 fe2a 	bl	1a8 <__aeabi_dsub>
    d554:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
    d558:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    d55c:	ea43 0704 	orr.w	r7, r3, r4
    d560:	4602      	mov	r2, r0
    d562:	463b      	mov	r3, r7
    d564:	4610      	mov	r0, r2
    d566:	4619      	mov	r1, r3
    d568:	b003      	add	sp, #12
    d56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d56c:	4926      	ldr	r1, [pc, #152]	; (d608 <rint+0x114>)
    d56e:	4131      	asrs	r1, r6
    d570:	ea03 0001 	and.w	r0, r3, r1
    d574:	4310      	orrs	r0, r2
    d576:	d0f5      	beq.n	d564 <rint+0x70>
    d578:	084b      	lsrs	r3, r1, #1
    d57a:	ea04 0151 	and.w	r1, r4, r1, lsr #1
    d57e:	430d      	orrs	r5, r1
    d580:	d00c      	beq.n	d59c <rint+0xa8>
    d582:	ea24 0303 	bic.w	r3, r4, r3
    d586:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    d58a:	2e13      	cmp	r6, #19
    d58c:	fa44 f606 	asr.w	r6, r4, r6
    d590:	bf0c      	ite	eq
    d592:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    d596:	2500      	movne	r5, #0
    d598:	ea43 0406 	orr.w	r4, r3, r6
    d59c:	4919      	ldr	r1, [pc, #100]	; (d604 <rint+0x110>)
    d59e:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
    d5a2:	4623      	mov	r3, r4
    d5a4:	462a      	mov	r2, r5
    d5a6:	e9d7 4500 	ldrd	r4, r5, [r7]
    d5aa:	4620      	mov	r0, r4
    d5ac:	4629      	mov	r1, r5
    d5ae:	f7f2 fdfd 	bl	1ac <__adddf3>
    d5b2:	e9cd 0100 	strd	r0, r1, [sp]
    d5b6:	e9dd 0100 	ldrd	r0, r1, [sp]
    d5ba:	4622      	mov	r2, r4
    d5bc:	462b      	mov	r3, r5
    d5be:	f7f2 fdf3 	bl	1a8 <__aeabi_dsub>
    d5c2:	e006      	b.n	d5d2 <rint+0xde>
    d5c4:	2e33      	cmp	r6, #51	; 0x33
    d5c6:	dd07      	ble.n	d5d8 <rint+0xe4>
    d5c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    d5cc:	d1ca      	bne.n	d564 <rint+0x70>
    d5ce:	f7f2 fded 	bl	1ac <__adddf3>
    d5d2:	4602      	mov	r2, r0
    d5d4:	460b      	mov	r3, r1
    d5d6:	e7c5      	b.n	d564 <rint+0x70>
    d5d8:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
    d5dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d5e0:	fa21 f10c 	lsr.w	r1, r1, ip
    d5e4:	4208      	tst	r0, r1
    d5e6:	d0bd      	beq.n	d564 <rint+0x70>
    d5e8:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
    d5ec:	ea4f 0351 	mov.w	r3, r1, lsr #1
    d5f0:	bf1f      	itttt	ne
    d5f2:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
    d5f6:	ea20 0303 	bicne.w	r3, r0, r3
    d5fa:	fa45 fc0c 	asrne.w	ip, r5, ip
    d5fe:	ea43 050c 	orrne.w	r5, r3, ip
    d602:	e7cb      	b.n	d59c <rint+0xa8>
    d604:	00011128 	.word	0x00011128
    d608:	000fffff 	.word	0x000fffff

0000d60c <calloc>:
    d60c:	4b02      	ldr	r3, [pc, #8]	; (d618 <calloc+0xc>)
    d60e:	460a      	mov	r2, r1
    d610:	4601      	mov	r1, r0
    d612:	6818      	ldr	r0, [r3, #0]
    d614:	f003 b8c4 	b.w	107a0 <_calloc_r>
    d618:	20004104 	.word	0x20004104

0000d61c <gcvt>:
    d61c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d61e:	461c      	mov	r4, r3
    d620:	b085      	sub	sp, #20
    d622:	2300      	movs	r3, #0
    d624:	4615      	mov	r5, r2
    d626:	2200      	movs	r2, #0
    d628:	4606      	mov	r6, r0
    d62a:	460f      	mov	r7, r1
    d62c:	f7f3 fa50 	bl	ad0 <__aeabi_dcmplt>
    d630:	4623      	mov	r3, r4
    d632:	b118      	cbz	r0, d63c <gcvt+0x20>
    d634:	222d      	movs	r2, #45	; 0x2d
    d636:	f803 2b01 	strb.w	r2, [r3], #1
    d63a:	3d01      	subs	r5, #1
    d63c:	2267      	movs	r2, #103	; 0x67
    d63e:	2100      	movs	r1, #0
    d640:	e9cd 2102 	strd	r2, r1, [sp, #8]
    d644:	e9cd 5300 	strd	r5, r3, [sp]
    d648:	4905      	ldr	r1, [pc, #20]	; (d660 <gcvt+0x44>)
    d64a:	4632      	mov	r2, r6
    d64c:	6808      	ldr	r0, [r1, #0]
    d64e:	463b      	mov	r3, r7
    d650:	f7f4 fbee 	bl	1e30 <_gcvt>
    d654:	2800      	cmp	r0, #0
    d656:	bf14      	ite	ne
    d658:	4620      	movne	r0, r4
    d65a:	2000      	moveq	r0, #0
    d65c:	b005      	add	sp, #20
    d65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d660:	20004104 	.word	0x20004104

0000d664 <exit>:
    d664:	b508      	push	{r3, lr}
    d666:	4b07      	ldr	r3, [pc, #28]	; (d684 <exit+0x20>)
    d668:	4604      	mov	r4, r0
    d66a:	b113      	cbz	r3, d672 <exit+0xe>
    d66c:	2100      	movs	r1, #0
    d66e:	f3af 8000 	nop.w
    d672:	4b05      	ldr	r3, [pc, #20]	; (d688 <exit+0x24>)
    d674:	6818      	ldr	r0, [r3, #0]
    d676:	6a83      	ldr	r3, [r0, #40]	; 0x28
    d678:	b103      	cbz	r3, d67c <exit+0x18>
    d67a:	4798      	blx	r3
    d67c:	4620      	mov	r0, r4
    d67e:	f7f9 facf 	bl	6c20 <_exit>
    d682:	bf00      	nop
    d684:	00000000 	.word	0x00000000
    d688:	000132e8 	.word	0x000132e8

0000d68c <malloc>:
    d68c:	4b02      	ldr	r3, [pc, #8]	; (d698 <malloc+0xc>)
    d68e:	4601      	mov	r1, r0
    d690:	6818      	ldr	r0, [r3, #0]
    d692:	f000 b855 	b.w	d740 <_malloc_r>
    d696:	bf00      	nop
    d698:	20004104 	.word	0x20004104

0000d69c <free>:
    d69c:	4b02      	ldr	r3, [pc, #8]	; (d6a8 <free+0xc>)
    d69e:	4601      	mov	r1, r0
    d6a0:	6818      	ldr	r0, [r3, #0]
    d6a2:	f000 b803 	b.w	d6ac <_free_r>
    d6a6:	bf00      	nop
    d6a8:	20004104 	.word	0x20004104

0000d6ac <_free_r>:
    d6ac:	b538      	push	{r3, r4, r5, lr}
    d6ae:	4605      	mov	r5, r0
    d6b0:	2900      	cmp	r1, #0
    d6b2:	d041      	beq.n	d738 <_free_r+0x8c>
    d6b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
    d6b8:	1f0c      	subs	r4, r1, #4
    d6ba:	2b00      	cmp	r3, #0
    d6bc:	bfb8      	it	lt
    d6be:	18e4      	addlt	r4, r4, r3
    d6c0:	f000 f9aa 	bl	da18 <__malloc_lock>
    d6c4:	4a1d      	ldr	r2, [pc, #116]	; (d73c <_free_r+0x90>)
    d6c6:	6813      	ldr	r3, [r2, #0]
    d6c8:	b933      	cbnz	r3, d6d8 <_free_r+0x2c>
    d6ca:	6063      	str	r3, [r4, #4]
    d6cc:	6014      	str	r4, [r2, #0]
    d6ce:	4628      	mov	r0, r5
    d6d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d6d4:	f000 b9a6 	b.w	da24 <__malloc_unlock>
    d6d8:	42a3      	cmp	r3, r4
    d6da:	d908      	bls.n	d6ee <_free_r+0x42>
    d6dc:	6820      	ldr	r0, [r4, #0]
    d6de:	1821      	adds	r1, r4, r0
    d6e0:	428b      	cmp	r3, r1
    d6e2:	bf01      	itttt	eq
    d6e4:	6819      	ldreq	r1, [r3, #0]
    d6e6:	685b      	ldreq	r3, [r3, #4]
    d6e8:	1809      	addeq	r1, r1, r0
    d6ea:	6021      	streq	r1, [r4, #0]
    d6ec:	e7ed      	b.n	d6ca <_free_r+0x1e>
    d6ee:	461a      	mov	r2, r3
    d6f0:	685b      	ldr	r3, [r3, #4]
    d6f2:	b10b      	cbz	r3, d6f8 <_free_r+0x4c>
    d6f4:	42a3      	cmp	r3, r4
    d6f6:	d9fa      	bls.n	d6ee <_free_r+0x42>
    d6f8:	6811      	ldr	r1, [r2, #0]
    d6fa:	1850      	adds	r0, r2, r1
    d6fc:	42a0      	cmp	r0, r4
    d6fe:	d10b      	bne.n	d718 <_free_r+0x6c>
    d700:	6820      	ldr	r0, [r4, #0]
    d702:	4401      	add	r1, r0
    d704:	1850      	adds	r0, r2, r1
    d706:	4283      	cmp	r3, r0
    d708:	6011      	str	r1, [r2, #0]
    d70a:	d1e0      	bne.n	d6ce <_free_r+0x22>
    d70c:	6818      	ldr	r0, [r3, #0]
    d70e:	685b      	ldr	r3, [r3, #4]
    d710:	6053      	str	r3, [r2, #4]
    d712:	4401      	add	r1, r0
    d714:	6011      	str	r1, [r2, #0]
    d716:	e7da      	b.n	d6ce <_free_r+0x22>
    d718:	d902      	bls.n	d720 <_free_r+0x74>
    d71a:	230c      	movs	r3, #12
    d71c:	602b      	str	r3, [r5, #0]
    d71e:	e7d6      	b.n	d6ce <_free_r+0x22>
    d720:	6820      	ldr	r0, [r4, #0]
    d722:	1821      	adds	r1, r4, r0
    d724:	428b      	cmp	r3, r1
    d726:	bf04      	itt	eq
    d728:	6819      	ldreq	r1, [r3, #0]
    d72a:	685b      	ldreq	r3, [r3, #4]
    d72c:	6063      	str	r3, [r4, #4]
    d72e:	bf04      	itt	eq
    d730:	1809      	addeq	r1, r1, r0
    d732:	6021      	streq	r1, [r4, #0]
    d734:	6054      	str	r4, [r2, #4]
    d736:	e7ca      	b.n	d6ce <_free_r+0x22>
    d738:	bd38      	pop	{r3, r4, r5, pc}
    d73a:	bf00      	nop
    d73c:	2000d530 	.word	0x2000d530

0000d740 <_malloc_r>:
    d740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d742:	1ccd      	adds	r5, r1, #3
    d744:	f025 0503 	bic.w	r5, r5, #3
    d748:	3508      	adds	r5, #8
    d74a:	2d0c      	cmp	r5, #12
    d74c:	bf38      	it	cc
    d74e:	250c      	movcc	r5, #12
    d750:	2d00      	cmp	r5, #0
    d752:	4606      	mov	r6, r0
    d754:	db01      	blt.n	d75a <_malloc_r+0x1a>
    d756:	42a9      	cmp	r1, r5
    d758:	d903      	bls.n	d762 <_malloc_r+0x22>
    d75a:	230c      	movs	r3, #12
    d75c:	6033      	str	r3, [r6, #0]
    d75e:	2000      	movs	r0, #0
    d760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d762:	f000 f959 	bl	da18 <__malloc_lock>
    d766:	4921      	ldr	r1, [pc, #132]	; (d7ec <_malloc_r+0xac>)
    d768:	680a      	ldr	r2, [r1, #0]
    d76a:	4614      	mov	r4, r2
    d76c:	b99c      	cbnz	r4, d796 <_malloc_r+0x56>
    d76e:	4f20      	ldr	r7, [pc, #128]	; (d7f0 <_malloc_r+0xb0>)
    d770:	683b      	ldr	r3, [r7, #0]
    d772:	b923      	cbnz	r3, d77e <_malloc_r+0x3e>
    d774:	4621      	mov	r1, r4
    d776:	4630      	mov	r0, r6
    d778:	f000 f83c 	bl	d7f4 <_sbrk_r>
    d77c:	6038      	str	r0, [r7, #0]
    d77e:	4629      	mov	r1, r5
    d780:	4630      	mov	r0, r6
    d782:	f000 f837 	bl	d7f4 <_sbrk_r>
    d786:	1c43      	adds	r3, r0, #1
    d788:	d123      	bne.n	d7d2 <_malloc_r+0x92>
    d78a:	230c      	movs	r3, #12
    d78c:	6033      	str	r3, [r6, #0]
    d78e:	4630      	mov	r0, r6
    d790:	f000 f948 	bl	da24 <__malloc_unlock>
    d794:	e7e3      	b.n	d75e <_malloc_r+0x1e>
    d796:	6823      	ldr	r3, [r4, #0]
    d798:	1b5b      	subs	r3, r3, r5
    d79a:	d417      	bmi.n	d7cc <_malloc_r+0x8c>
    d79c:	2b0b      	cmp	r3, #11
    d79e:	d903      	bls.n	d7a8 <_malloc_r+0x68>
    d7a0:	6023      	str	r3, [r4, #0]
    d7a2:	441c      	add	r4, r3
    d7a4:	6025      	str	r5, [r4, #0]
    d7a6:	e004      	b.n	d7b2 <_malloc_r+0x72>
    d7a8:	6863      	ldr	r3, [r4, #4]
    d7aa:	42a2      	cmp	r2, r4
    d7ac:	bf0c      	ite	eq
    d7ae:	600b      	streq	r3, [r1, #0]
    d7b0:	6053      	strne	r3, [r2, #4]
    d7b2:	4630      	mov	r0, r6
    d7b4:	f000 f936 	bl	da24 <__malloc_unlock>
    d7b8:	f104 000b 	add.w	r0, r4, #11
    d7bc:	1d23      	adds	r3, r4, #4
    d7be:	f020 0007 	bic.w	r0, r0, #7
    d7c2:	1ac2      	subs	r2, r0, r3
    d7c4:	d0cc      	beq.n	d760 <_malloc_r+0x20>
    d7c6:	1a1b      	subs	r3, r3, r0
    d7c8:	50a3      	str	r3, [r4, r2]
    d7ca:	e7c9      	b.n	d760 <_malloc_r+0x20>
    d7cc:	4622      	mov	r2, r4
    d7ce:	6864      	ldr	r4, [r4, #4]
    d7d0:	e7cc      	b.n	d76c <_malloc_r+0x2c>
    d7d2:	1cc4      	adds	r4, r0, #3
    d7d4:	f024 0403 	bic.w	r4, r4, #3
    d7d8:	42a0      	cmp	r0, r4
    d7da:	d0e3      	beq.n	d7a4 <_malloc_r+0x64>
    d7dc:	1a21      	subs	r1, r4, r0
    d7de:	4630      	mov	r0, r6
    d7e0:	f000 f808 	bl	d7f4 <_sbrk_r>
    d7e4:	3001      	adds	r0, #1
    d7e6:	d1dd      	bne.n	d7a4 <_malloc_r+0x64>
    d7e8:	e7cf      	b.n	d78a <_malloc_r+0x4a>
    d7ea:	bf00      	nop
    d7ec:	2000d530 	.word	0x2000d530
    d7f0:	2000d534 	.word	0x2000d534

0000d7f4 <_sbrk_r>:
    d7f4:	b538      	push	{r3, r4, r5, lr}
    d7f6:	4d06      	ldr	r5, [pc, #24]	; (d810 <_sbrk_r+0x1c>)
    d7f8:	2300      	movs	r3, #0
    d7fa:	4604      	mov	r4, r0
    d7fc:	4608      	mov	r0, r1
    d7fe:	602b      	str	r3, [r5, #0]
    d800:	f7f9 fa18 	bl	6c34 <_sbrk>
    d804:	1c43      	adds	r3, r0, #1
    d806:	d102      	bne.n	d80e <_sbrk_r+0x1a>
    d808:	682b      	ldr	r3, [r5, #0]
    d80a:	b103      	cbz	r3, d80e <_sbrk_r+0x1a>
    d80c:	6023      	str	r3, [r4, #0]
    d80e:	bd38      	pop	{r3, r4, r5, pc}
    d810:	2000d538 	.word	0x2000d538

0000d814 <__utoa>:
    d814:	b5f0      	push	{r4, r5, r6, r7, lr}
    d816:	4c1f      	ldr	r4, [pc, #124]	; (d894 <__utoa+0x80>)
    d818:	b08b      	sub	sp, #44	; 0x2c
    d81a:	4605      	mov	r5, r0
    d81c:	460b      	mov	r3, r1
    d81e:	466e      	mov	r6, sp
    d820:	f104 0c20 	add.w	ip, r4, #32
    d824:	6820      	ldr	r0, [r4, #0]
    d826:	6861      	ldr	r1, [r4, #4]
    d828:	4637      	mov	r7, r6
    d82a:	c703      	stmia	r7!, {r0, r1}
    d82c:	3408      	adds	r4, #8
    d82e:	4564      	cmp	r4, ip
    d830:	463e      	mov	r6, r7
    d832:	d1f7      	bne.n	d824 <__utoa+0x10>
    d834:	7921      	ldrb	r1, [r4, #4]
    d836:	7139      	strb	r1, [r7, #4]
    d838:	1e91      	subs	r1, r2, #2
    d83a:	6820      	ldr	r0, [r4, #0]
    d83c:	6038      	str	r0, [r7, #0]
    d83e:	2922      	cmp	r1, #34	; 0x22
    d840:	f04f 0100 	mov.w	r1, #0
    d844:	d904      	bls.n	d850 <__utoa+0x3c>
    d846:	7019      	strb	r1, [r3, #0]
    d848:	460b      	mov	r3, r1
    d84a:	4618      	mov	r0, r3
    d84c:	b00b      	add	sp, #44	; 0x2c
    d84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d850:	1e58      	subs	r0, r3, #1
    d852:	4684      	mov	ip, r0
    d854:	fbb5 f7f2 	udiv	r7, r5, r2
    d858:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
    d85c:	fb02 5617 	mls	r6, r2, r7, r5
    d860:	4476      	add	r6, lr
    d862:	460c      	mov	r4, r1
    d864:	f816 6c28 	ldrb.w	r6, [r6, #-40]
    d868:	f80c 6f01 	strb.w	r6, [ip, #1]!
    d86c:	462e      	mov	r6, r5
    d86e:	42b2      	cmp	r2, r6
    d870:	f101 0101 	add.w	r1, r1, #1
    d874:	463d      	mov	r5, r7
    d876:	d9ed      	bls.n	d854 <__utoa+0x40>
    d878:	2200      	movs	r2, #0
    d87a:	545a      	strb	r2, [r3, r1]
    d87c:	1919      	adds	r1, r3, r4
    d87e:	1aa5      	subs	r5, r4, r2
    d880:	42aa      	cmp	r2, r5
    d882:	dae2      	bge.n	d84a <__utoa+0x36>
    d884:	f810 5f01 	ldrb.w	r5, [r0, #1]!
    d888:	780e      	ldrb	r6, [r1, #0]
    d88a:	7006      	strb	r6, [r0, #0]
    d88c:	3201      	adds	r2, #1
    d88e:	f801 5901 	strb.w	r5, [r1], #-1
    d892:	e7f4      	b.n	d87e <__utoa+0x6a>
    d894:	000134e1 	.word	0x000134e1

0000d898 <std>:
    d898:	2300      	movs	r3, #0
    d89a:	b510      	push	{r4, lr}
    d89c:	4604      	mov	r4, r0
    d89e:	e9c0 3300 	strd	r3, r3, [r0]
    d8a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
    d8a6:	6083      	str	r3, [r0, #8]
    d8a8:	8181      	strh	r1, [r0, #12]
    d8aa:	6643      	str	r3, [r0, #100]	; 0x64
    d8ac:	81c2      	strh	r2, [r0, #14]
    d8ae:	6183      	str	r3, [r0, #24]
    d8b0:	4619      	mov	r1, r3
    d8b2:	2208      	movs	r2, #8
    d8b4:	305c      	adds	r0, #92	; 0x5c
    d8b6:	f002 ff6b 	bl	10790 <memset>
    d8ba:	4b05      	ldr	r3, [pc, #20]	; (d8d0 <std+0x38>)
    d8bc:	6263      	str	r3, [r4, #36]	; 0x24
    d8be:	4b05      	ldr	r3, [pc, #20]	; (d8d4 <std+0x3c>)
    d8c0:	62a3      	str	r3, [r4, #40]	; 0x28
    d8c2:	4b05      	ldr	r3, [pc, #20]	; (d8d8 <std+0x40>)
    d8c4:	62e3      	str	r3, [r4, #44]	; 0x2c
    d8c6:	4b05      	ldr	r3, [pc, #20]	; (d8dc <std+0x44>)
    d8c8:	6224      	str	r4, [r4, #32]
    d8ca:	6323      	str	r3, [r4, #48]	; 0x30
    d8cc:	bd10      	pop	{r4, pc}
    d8ce:	bf00      	nop
    d8d0:	00010b4d 	.word	0x00010b4d
    d8d4:	00010b6f 	.word	0x00010b6f
    d8d8:	00010ba7 	.word	0x00010ba7
    d8dc:	00010bcb 	.word	0x00010bcb

0000d8e0 <_cleanup_r>:
    d8e0:	4901      	ldr	r1, [pc, #4]	; (d8e8 <_cleanup_r+0x8>)
    d8e2:	f003 b818 	b.w	10916 <_fwalk_reent>
    d8e6:	bf00      	nop
    d8e8:	0000e841 	.word	0x0000e841

0000d8ec <__sfp_lock_acquire>:
    d8ec:	4801      	ldr	r0, [pc, #4]	; (d8f4 <__sfp_lock_acquire+0x8>)
    d8ee:	f7f9 b9ed 	b.w	6ccc <__retarget_lock_acquire_recursive>
    d8f2:	bf00      	nop
    d8f4:	2000420c 	.word	0x2000420c

0000d8f8 <__sfp_lock_release>:
    d8f8:	4801      	ldr	r0, [pc, #4]	; (d900 <__sfp_lock_release+0x8>)
    d8fa:	f7f9 ba07 	b.w	6d0c <__retarget_lock_release_recursive>
    d8fe:	bf00      	nop
    d900:	2000420c 	.word	0x2000420c

0000d904 <__sinit_lock_acquire>:
    d904:	4801      	ldr	r0, [pc, #4]	; (d90c <__sinit_lock_acquire+0x8>)
    d906:	f7f9 b9e1 	b.w	6ccc <__retarget_lock_acquire_recursive>
    d90a:	bf00      	nop
    d90c:	20004220 	.word	0x20004220

0000d910 <__sinit_lock_release>:
    d910:	4801      	ldr	r0, [pc, #4]	; (d918 <__sinit_lock_release+0x8>)
    d912:	f7f9 b9fb 	b.w	6d0c <__retarget_lock_release_recursive>
    d916:	bf00      	nop
    d918:	20004220 	.word	0x20004220

0000d91c <__sinit>:
    d91c:	b510      	push	{r4, lr}
    d91e:	4604      	mov	r4, r0
    d920:	f7ff fff0 	bl	d904 <__sinit_lock_acquire>
    d924:	69a3      	ldr	r3, [r4, #24]
    d926:	b11b      	cbz	r3, d930 <__sinit+0x14>
    d928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d92c:	f7ff bff0 	b.w	d910 <__sinit_lock_release>
    d930:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    d934:	6523      	str	r3, [r4, #80]	; 0x50
    d936:	4b13      	ldr	r3, [pc, #76]	; (d984 <__sinit+0x68>)
    d938:	4a13      	ldr	r2, [pc, #76]	; (d988 <__sinit+0x6c>)
    d93a:	681b      	ldr	r3, [r3, #0]
    d93c:	62a2      	str	r2, [r4, #40]	; 0x28
    d93e:	42a3      	cmp	r3, r4
    d940:	bf04      	itt	eq
    d942:	2301      	moveq	r3, #1
    d944:	61a3      	streq	r3, [r4, #24]
    d946:	4620      	mov	r0, r4
    d948:	f000 f820 	bl	d98c <__sfp>
    d94c:	6060      	str	r0, [r4, #4]
    d94e:	4620      	mov	r0, r4
    d950:	f000 f81c 	bl	d98c <__sfp>
    d954:	60a0      	str	r0, [r4, #8]
    d956:	4620      	mov	r0, r4
    d958:	f000 f818 	bl	d98c <__sfp>
    d95c:	2200      	movs	r2, #0
    d95e:	60e0      	str	r0, [r4, #12]
    d960:	2104      	movs	r1, #4
    d962:	6860      	ldr	r0, [r4, #4]
    d964:	f7ff ff98 	bl	d898 <std>
    d968:	68a0      	ldr	r0, [r4, #8]
    d96a:	2201      	movs	r2, #1
    d96c:	2109      	movs	r1, #9
    d96e:	f7ff ff93 	bl	d898 <std>
    d972:	68e0      	ldr	r0, [r4, #12]
    d974:	2202      	movs	r2, #2
    d976:	2112      	movs	r1, #18
    d978:	f7ff ff8e 	bl	d898 <std>
    d97c:	2301      	movs	r3, #1
    d97e:	61a3      	str	r3, [r4, #24]
    d980:	e7d2      	b.n	d928 <__sinit+0xc>
    d982:	bf00      	nop
    d984:	000132e8 	.word	0x000132e8
    d988:	0000d8e1 	.word	0x0000d8e1

0000d98c <__sfp>:
    d98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d98e:	4607      	mov	r7, r0
    d990:	f7ff ffac 	bl	d8ec <__sfp_lock_acquire>
    d994:	4b1e      	ldr	r3, [pc, #120]	; (da10 <__sfp+0x84>)
    d996:	681e      	ldr	r6, [r3, #0]
    d998:	69b3      	ldr	r3, [r6, #24]
    d99a:	b913      	cbnz	r3, d9a2 <__sfp+0x16>
    d99c:	4630      	mov	r0, r6
    d99e:	f7ff ffbd 	bl	d91c <__sinit>
    d9a2:	3648      	adds	r6, #72	; 0x48
    d9a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    d9a8:	3b01      	subs	r3, #1
    d9aa:	d503      	bpl.n	d9b4 <__sfp+0x28>
    d9ac:	6833      	ldr	r3, [r6, #0]
    d9ae:	b30b      	cbz	r3, d9f4 <__sfp+0x68>
    d9b0:	6836      	ldr	r6, [r6, #0]
    d9b2:	e7f7      	b.n	d9a4 <__sfp+0x18>
    d9b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    d9b8:	b9d5      	cbnz	r5, d9f0 <__sfp+0x64>
    d9ba:	4b16      	ldr	r3, [pc, #88]	; (da14 <__sfp+0x88>)
    d9bc:	60e3      	str	r3, [r4, #12]
    d9be:	f104 0058 	add.w	r0, r4, #88	; 0x58
    d9c2:	6665      	str	r5, [r4, #100]	; 0x64
    d9c4:	f7f9 f94c 	bl	6c60 <__retarget_lock_init_recursive>
    d9c8:	f7ff ff96 	bl	d8f8 <__sfp_lock_release>
    d9cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
    d9d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
    d9d4:	6025      	str	r5, [r4, #0]
    d9d6:	61a5      	str	r5, [r4, #24]
    d9d8:	2208      	movs	r2, #8
    d9da:	4629      	mov	r1, r5
    d9dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    d9e0:	f002 fed6 	bl	10790 <memset>
    d9e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    d9e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    d9ec:	4620      	mov	r0, r4
    d9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d9f0:	3468      	adds	r4, #104	; 0x68
    d9f2:	e7d9      	b.n	d9a8 <__sfp+0x1c>
    d9f4:	2104      	movs	r1, #4
    d9f6:	4638      	mov	r0, r7
    d9f8:	f002 ff77 	bl	108ea <__sfmoreglue>
    d9fc:	4604      	mov	r4, r0
    d9fe:	6030      	str	r0, [r6, #0]
    da00:	2800      	cmp	r0, #0
    da02:	d1d5      	bne.n	d9b0 <__sfp+0x24>
    da04:	f7ff ff78 	bl	d8f8 <__sfp_lock_release>
    da08:	230c      	movs	r3, #12
    da0a:	603b      	str	r3, [r7, #0]
    da0c:	e7ee      	b.n	d9ec <__sfp+0x60>
    da0e:	bf00      	nop
    da10:	000132e8 	.word	0x000132e8
    da14:	ffff0001 	.word	0xffff0001

0000da18 <__malloc_lock>:
    da18:	4801      	ldr	r0, [pc, #4]	; (da20 <__malloc_lock+0x8>)
    da1a:	f7f9 b957 	b.w	6ccc <__retarget_lock_acquire_recursive>
    da1e:	bf00      	nop
    da20:	200041f8 	.word	0x200041f8

0000da24 <__malloc_unlock>:
    da24:	4801      	ldr	r0, [pc, #4]	; (da2c <__malloc_unlock+0x8>)
    da26:	f7f9 b971 	b.w	6d0c <__retarget_lock_release_recursive>
    da2a:	bf00      	nop
    da2c:	200041f8 	.word	0x200041f8

0000da30 <_Balloc>:
    da30:	b570      	push	{r4, r5, r6, lr}
    da32:	6a46      	ldr	r6, [r0, #36]	; 0x24
    da34:	4604      	mov	r4, r0
    da36:	460d      	mov	r5, r1
    da38:	b976      	cbnz	r6, da58 <_Balloc+0x28>
    da3a:	2010      	movs	r0, #16
    da3c:	f7ff fe26 	bl	d68c <malloc>
    da40:	4602      	mov	r2, r0
    da42:	6260      	str	r0, [r4, #36]	; 0x24
    da44:	b920      	cbnz	r0, da50 <_Balloc+0x20>
    da46:	4b18      	ldr	r3, [pc, #96]	; (daa8 <_Balloc+0x78>)
    da48:	4818      	ldr	r0, [pc, #96]	; (daac <_Balloc+0x7c>)
    da4a:	2166      	movs	r1, #102	; 0x66
    da4c:	f000 fe48 	bl	e6e0 <__assert_func>
    da50:	e9c0 6601 	strd	r6, r6, [r0, #4]
    da54:	6006      	str	r6, [r0, #0]
    da56:	60c6      	str	r6, [r0, #12]
    da58:	6a66      	ldr	r6, [r4, #36]	; 0x24
    da5a:	68f3      	ldr	r3, [r6, #12]
    da5c:	b183      	cbz	r3, da80 <_Balloc+0x50>
    da5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    da60:	68db      	ldr	r3, [r3, #12]
    da62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    da66:	b9b8      	cbnz	r0, da98 <_Balloc+0x68>
    da68:	2101      	movs	r1, #1
    da6a:	fa01 f605 	lsl.w	r6, r1, r5
    da6e:	1d72      	adds	r2, r6, #5
    da70:	0092      	lsls	r2, r2, #2
    da72:	4620      	mov	r0, r4
    da74:	f002 fe94 	bl	107a0 <_calloc_r>
    da78:	b160      	cbz	r0, da94 <_Balloc+0x64>
    da7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
    da7e:	e00e      	b.n	da9e <_Balloc+0x6e>
    da80:	2221      	movs	r2, #33	; 0x21
    da82:	2104      	movs	r1, #4
    da84:	4620      	mov	r0, r4
    da86:	f002 fe8b 	bl	107a0 <_calloc_r>
    da8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    da8c:	60f0      	str	r0, [r6, #12]
    da8e:	68db      	ldr	r3, [r3, #12]
    da90:	2b00      	cmp	r3, #0
    da92:	d1e4      	bne.n	da5e <_Balloc+0x2e>
    da94:	2000      	movs	r0, #0
    da96:	bd70      	pop	{r4, r5, r6, pc}
    da98:	6802      	ldr	r2, [r0, #0]
    da9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    da9e:	2300      	movs	r3, #0
    daa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
    daa4:	e7f7      	b.n	da96 <_Balloc+0x66>
    daa6:	bf00      	nop
    daa8:	00013506 	.word	0x00013506
    daac:	0001351d 	.word	0x0001351d

0000dab0 <_Bfree>:
    dab0:	b570      	push	{r4, r5, r6, lr}
    dab2:	6a46      	ldr	r6, [r0, #36]	; 0x24
    dab4:	4605      	mov	r5, r0
    dab6:	460c      	mov	r4, r1
    dab8:	b976      	cbnz	r6, dad8 <_Bfree+0x28>
    daba:	2010      	movs	r0, #16
    dabc:	f7ff fde6 	bl	d68c <malloc>
    dac0:	4602      	mov	r2, r0
    dac2:	6268      	str	r0, [r5, #36]	; 0x24
    dac4:	b920      	cbnz	r0, dad0 <_Bfree+0x20>
    dac6:	4b09      	ldr	r3, [pc, #36]	; (daec <_Bfree+0x3c>)
    dac8:	4809      	ldr	r0, [pc, #36]	; (daf0 <_Bfree+0x40>)
    daca:	218a      	movs	r1, #138	; 0x8a
    dacc:	f000 fe08 	bl	e6e0 <__assert_func>
    dad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
    dad4:	6006      	str	r6, [r0, #0]
    dad6:	60c6      	str	r6, [r0, #12]
    dad8:	b13c      	cbz	r4, daea <_Bfree+0x3a>
    dada:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    dadc:	6862      	ldr	r2, [r4, #4]
    dade:	68db      	ldr	r3, [r3, #12]
    dae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    dae4:	6021      	str	r1, [r4, #0]
    dae6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    daea:	bd70      	pop	{r4, r5, r6, pc}
    daec:	00013506 	.word	0x00013506
    daf0:	0001351d 	.word	0x0001351d

0000daf4 <__multadd>:
    daf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    daf8:	690d      	ldr	r5, [r1, #16]
    dafa:	4607      	mov	r7, r0
    dafc:	460c      	mov	r4, r1
    dafe:	461e      	mov	r6, r3
    db00:	f101 0c14 	add.w	ip, r1, #20
    db04:	2000      	movs	r0, #0
    db06:	f8dc 3000 	ldr.w	r3, [ip]
    db0a:	b299      	uxth	r1, r3
    db0c:	fb02 6101 	mla	r1, r2, r1, r6
    db10:	0c1e      	lsrs	r6, r3, #16
    db12:	0c0b      	lsrs	r3, r1, #16
    db14:	fb02 3306 	mla	r3, r2, r6, r3
    db18:	b289      	uxth	r1, r1
    db1a:	3001      	adds	r0, #1
    db1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    db20:	4285      	cmp	r5, r0
    db22:	f84c 1b04 	str.w	r1, [ip], #4
    db26:	ea4f 4613 	mov.w	r6, r3, lsr #16
    db2a:	dcec      	bgt.n	db06 <__multadd+0x12>
    db2c:	b30e      	cbz	r6, db72 <__multadd+0x7e>
    db2e:	68a3      	ldr	r3, [r4, #8]
    db30:	42ab      	cmp	r3, r5
    db32:	dc19      	bgt.n	db68 <__multadd+0x74>
    db34:	6861      	ldr	r1, [r4, #4]
    db36:	4638      	mov	r0, r7
    db38:	3101      	adds	r1, #1
    db3a:	f7ff ff79 	bl	da30 <_Balloc>
    db3e:	4680      	mov	r8, r0
    db40:	b928      	cbnz	r0, db4e <__multadd+0x5a>
    db42:	4602      	mov	r2, r0
    db44:	4b0c      	ldr	r3, [pc, #48]	; (db78 <__multadd+0x84>)
    db46:	480d      	ldr	r0, [pc, #52]	; (db7c <__multadd+0x88>)
    db48:	21b5      	movs	r1, #181	; 0xb5
    db4a:	f000 fdc9 	bl	e6e0 <__assert_func>
    db4e:	6922      	ldr	r2, [r4, #16]
    db50:	3202      	adds	r2, #2
    db52:	f104 010c 	add.w	r1, r4, #12
    db56:	0092      	lsls	r2, r2, #2
    db58:	300c      	adds	r0, #12
    db5a:	f002 fe0b 	bl	10774 <memcpy>
    db5e:	4621      	mov	r1, r4
    db60:	4638      	mov	r0, r7
    db62:	f7ff ffa5 	bl	dab0 <_Bfree>
    db66:	4644      	mov	r4, r8
    db68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    db6c:	3501      	adds	r5, #1
    db6e:	615e      	str	r6, [r3, #20]
    db70:	6125      	str	r5, [r4, #16]
    db72:	4620      	mov	r0, r4
    db74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db78:	0001357a 	.word	0x0001357a
    db7c:	0001351d 	.word	0x0001351d

0000db80 <__i2b>:
    db80:	b510      	push	{r4, lr}
    db82:	460c      	mov	r4, r1
    db84:	2101      	movs	r1, #1
    db86:	f7ff ff53 	bl	da30 <_Balloc>
    db8a:	4602      	mov	r2, r0
    db8c:	b928      	cbnz	r0, db9a <__i2b+0x1a>
    db8e:	4b05      	ldr	r3, [pc, #20]	; (dba4 <__i2b+0x24>)
    db90:	4805      	ldr	r0, [pc, #20]	; (dba8 <__i2b+0x28>)
    db92:	f44f 71a0 	mov.w	r1, #320	; 0x140
    db96:	f000 fda3 	bl	e6e0 <__assert_func>
    db9a:	2301      	movs	r3, #1
    db9c:	6144      	str	r4, [r0, #20]
    db9e:	6103      	str	r3, [r0, #16]
    dba0:	bd10      	pop	{r4, pc}
    dba2:	bf00      	nop
    dba4:	0001357a 	.word	0x0001357a
    dba8:	0001351d 	.word	0x0001351d

0000dbac <__multiply>:
    dbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dbb0:	4691      	mov	r9, r2
    dbb2:	690a      	ldr	r2, [r1, #16]
    dbb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
    dbb8:	429a      	cmp	r2, r3
    dbba:	bfb8      	it	lt
    dbbc:	460b      	movlt	r3, r1
    dbbe:	460c      	mov	r4, r1
    dbc0:	bfbc      	itt	lt
    dbc2:	464c      	movlt	r4, r9
    dbc4:	4699      	movlt	r9, r3
    dbc6:	6927      	ldr	r7, [r4, #16]
    dbc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
    dbcc:	68a3      	ldr	r3, [r4, #8]
    dbce:	6861      	ldr	r1, [r4, #4]
    dbd0:	eb07 060a 	add.w	r6, r7, sl
    dbd4:	42b3      	cmp	r3, r6
    dbd6:	b085      	sub	sp, #20
    dbd8:	bfb8      	it	lt
    dbda:	3101      	addlt	r1, #1
    dbdc:	f7ff ff28 	bl	da30 <_Balloc>
    dbe0:	b930      	cbnz	r0, dbf0 <__multiply+0x44>
    dbe2:	4602      	mov	r2, r0
    dbe4:	4b43      	ldr	r3, [pc, #268]	; (dcf4 <__multiply+0x148>)
    dbe6:	4844      	ldr	r0, [pc, #272]	; (dcf8 <__multiply+0x14c>)
    dbe8:	f240 115d 	movw	r1, #349	; 0x15d
    dbec:	f000 fd78 	bl	e6e0 <__assert_func>
    dbf0:	f100 0514 	add.w	r5, r0, #20
    dbf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
    dbf8:	462b      	mov	r3, r5
    dbfa:	2200      	movs	r2, #0
    dbfc:	4543      	cmp	r3, r8
    dbfe:	d321      	bcc.n	dc44 <__multiply+0x98>
    dc00:	f104 0314 	add.w	r3, r4, #20
    dc04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    dc08:	f109 0314 	add.w	r3, r9, #20
    dc0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
    dc10:	9202      	str	r2, [sp, #8]
    dc12:	1b3a      	subs	r2, r7, r4
    dc14:	3a15      	subs	r2, #21
    dc16:	f022 0203 	bic.w	r2, r2, #3
    dc1a:	3204      	adds	r2, #4
    dc1c:	f104 0115 	add.w	r1, r4, #21
    dc20:	428f      	cmp	r7, r1
    dc22:	bf38      	it	cc
    dc24:	2204      	movcc	r2, #4
    dc26:	9201      	str	r2, [sp, #4]
    dc28:	9a02      	ldr	r2, [sp, #8]
    dc2a:	9303      	str	r3, [sp, #12]
    dc2c:	429a      	cmp	r2, r3
    dc2e:	d80c      	bhi.n	dc4a <__multiply+0x9e>
    dc30:	2e00      	cmp	r6, #0
    dc32:	dd03      	ble.n	dc3c <__multiply+0x90>
    dc34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
    dc38:	2b00      	cmp	r3, #0
    dc3a:	d059      	beq.n	dcf0 <__multiply+0x144>
    dc3c:	6106      	str	r6, [r0, #16]
    dc3e:	b005      	add	sp, #20
    dc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc44:	f843 2b04 	str.w	r2, [r3], #4
    dc48:	e7d8      	b.n	dbfc <__multiply+0x50>
    dc4a:	f8b3 a000 	ldrh.w	sl, [r3]
    dc4e:	f1ba 0f00 	cmp.w	sl, #0
    dc52:	d023      	beq.n	dc9c <__multiply+0xf0>
    dc54:	f104 0e14 	add.w	lr, r4, #20
    dc58:	46a9      	mov	r9, r5
    dc5a:	f04f 0c00 	mov.w	ip, #0
    dc5e:	f85e 2b04 	ldr.w	r2, [lr], #4
    dc62:	f8d9 1000 	ldr.w	r1, [r9]
    dc66:	fa1f fb82 	uxth.w	fp, r2
    dc6a:	b289      	uxth	r1, r1
    dc6c:	fb0a 110b 	mla	r1, sl, fp, r1
    dc70:	4461      	add	r1, ip
    dc72:	f8d9 c000 	ldr.w	ip, [r9]
    dc76:	0c12      	lsrs	r2, r2, #16
    dc78:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    dc7c:	fb0a c202 	mla	r2, sl, r2, ip
    dc80:	eb02 4211 	add.w	r2, r2, r1, lsr #16
    dc84:	b289      	uxth	r1, r1
    dc86:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
    dc8a:	4577      	cmp	r7, lr
    dc8c:	f849 1b04 	str.w	r1, [r9], #4
    dc90:	ea4f 4c12 	mov.w	ip, r2, lsr #16
    dc94:	d8e3      	bhi.n	dc5e <__multiply+0xb2>
    dc96:	9a01      	ldr	r2, [sp, #4]
    dc98:	f845 c002 	str.w	ip, [r5, r2]
    dc9c:	9a03      	ldr	r2, [sp, #12]
    dc9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
    dca2:	3304      	adds	r3, #4
    dca4:	f1b9 0f00 	cmp.w	r9, #0
    dca8:	d020      	beq.n	dcec <__multiply+0x140>
    dcaa:	6829      	ldr	r1, [r5, #0]
    dcac:	f104 0c14 	add.w	ip, r4, #20
    dcb0:	46ae      	mov	lr, r5
    dcb2:	f04f 0a00 	mov.w	sl, #0
    dcb6:	f8bc b000 	ldrh.w	fp, [ip]
    dcba:	f8be 2002 	ldrh.w	r2, [lr, #2]
    dcbe:	fb09 220b 	mla	r2, r9, fp, r2
    dcc2:	4492      	add	sl, r2
    dcc4:	b289      	uxth	r1, r1
    dcc6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    dcca:	f84e 1b04 	str.w	r1, [lr], #4
    dcce:	f85c 2b04 	ldr.w	r2, [ip], #4
    dcd2:	f8be 1000 	ldrh.w	r1, [lr]
    dcd6:	0c12      	lsrs	r2, r2, #16
    dcd8:	fb09 1102 	mla	r1, r9, r2, r1
    dcdc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
    dce0:	4567      	cmp	r7, ip
    dce2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
    dce6:	d8e6      	bhi.n	dcb6 <__multiply+0x10a>
    dce8:	9a01      	ldr	r2, [sp, #4]
    dcea:	50a9      	str	r1, [r5, r2]
    dcec:	3504      	adds	r5, #4
    dcee:	e79b      	b.n	dc28 <__multiply+0x7c>
    dcf0:	3e01      	subs	r6, #1
    dcf2:	e79d      	b.n	dc30 <__multiply+0x84>
    dcf4:	0001357a 	.word	0x0001357a
    dcf8:	0001351d 	.word	0x0001351d

0000dcfc <__pow5mult>:
    dcfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd00:	4615      	mov	r5, r2
    dd02:	f012 0203 	ands.w	r2, r2, #3
    dd06:	4606      	mov	r6, r0
    dd08:	460f      	mov	r7, r1
    dd0a:	d007      	beq.n	dd1c <__pow5mult+0x20>
    dd0c:	4c25      	ldr	r4, [pc, #148]	; (dda4 <__pow5mult+0xa8>)
    dd0e:	3a01      	subs	r2, #1
    dd10:	2300      	movs	r3, #0
    dd12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
    dd16:	f7ff feed 	bl	daf4 <__multadd>
    dd1a:	4607      	mov	r7, r0
    dd1c:	10ad      	asrs	r5, r5, #2
    dd1e:	d03d      	beq.n	dd9c <__pow5mult+0xa0>
    dd20:	6a74      	ldr	r4, [r6, #36]	; 0x24
    dd22:	b97c      	cbnz	r4, dd44 <__pow5mult+0x48>
    dd24:	2010      	movs	r0, #16
    dd26:	f7ff fcb1 	bl	d68c <malloc>
    dd2a:	4602      	mov	r2, r0
    dd2c:	6270      	str	r0, [r6, #36]	; 0x24
    dd2e:	b928      	cbnz	r0, dd3c <__pow5mult+0x40>
    dd30:	4b1d      	ldr	r3, [pc, #116]	; (dda8 <__pow5mult+0xac>)
    dd32:	481e      	ldr	r0, [pc, #120]	; (ddac <__pow5mult+0xb0>)
    dd34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    dd38:	f000 fcd2 	bl	e6e0 <__assert_func>
    dd3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
    dd40:	6004      	str	r4, [r0, #0]
    dd42:	60c4      	str	r4, [r0, #12]
    dd44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
    dd48:	f8d8 4008 	ldr.w	r4, [r8, #8]
    dd4c:	b94c      	cbnz	r4, dd62 <__pow5mult+0x66>
    dd4e:	f240 2171 	movw	r1, #625	; 0x271
    dd52:	4630      	mov	r0, r6
    dd54:	f7ff ff14 	bl	db80 <__i2b>
    dd58:	2300      	movs	r3, #0
    dd5a:	f8c8 0008 	str.w	r0, [r8, #8]
    dd5e:	4604      	mov	r4, r0
    dd60:	6003      	str	r3, [r0, #0]
    dd62:	f04f 0900 	mov.w	r9, #0
    dd66:	07eb      	lsls	r3, r5, #31
    dd68:	d50a      	bpl.n	dd80 <__pow5mult+0x84>
    dd6a:	4639      	mov	r1, r7
    dd6c:	4622      	mov	r2, r4
    dd6e:	4630      	mov	r0, r6
    dd70:	f7ff ff1c 	bl	dbac <__multiply>
    dd74:	4639      	mov	r1, r7
    dd76:	4680      	mov	r8, r0
    dd78:	4630      	mov	r0, r6
    dd7a:	f7ff fe99 	bl	dab0 <_Bfree>
    dd7e:	4647      	mov	r7, r8
    dd80:	106d      	asrs	r5, r5, #1
    dd82:	d00b      	beq.n	dd9c <__pow5mult+0xa0>
    dd84:	6820      	ldr	r0, [r4, #0]
    dd86:	b938      	cbnz	r0, dd98 <__pow5mult+0x9c>
    dd88:	4622      	mov	r2, r4
    dd8a:	4621      	mov	r1, r4
    dd8c:	4630      	mov	r0, r6
    dd8e:	f7ff ff0d 	bl	dbac <__multiply>
    dd92:	6020      	str	r0, [r4, #0]
    dd94:	f8c0 9000 	str.w	r9, [r0]
    dd98:	4604      	mov	r4, r0
    dd9a:	e7e4      	b.n	dd66 <__pow5mult+0x6a>
    dd9c:	4638      	mov	r0, r7
    dd9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dda2:	bf00      	nop
    dda4:	0001334c 	.word	0x0001334c
    dda8:	00013506 	.word	0x00013506
    ddac:	0001351d 	.word	0x0001351d

0000ddb0 <__lshift>:
    ddb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ddb4:	460c      	mov	r4, r1
    ddb6:	6849      	ldr	r1, [r1, #4]
    ddb8:	6923      	ldr	r3, [r4, #16]
    ddba:	eb03 1862 	add.w	r8, r3, r2, asr #5
    ddbe:	68a3      	ldr	r3, [r4, #8]
    ddc0:	4607      	mov	r7, r0
    ddc2:	4691      	mov	r9, r2
    ddc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
    ddc8:	f108 0601 	add.w	r6, r8, #1
    ddcc:	42b3      	cmp	r3, r6
    ddce:	db0b      	blt.n	dde8 <__lshift+0x38>
    ddd0:	4638      	mov	r0, r7
    ddd2:	f7ff fe2d 	bl	da30 <_Balloc>
    ddd6:	4605      	mov	r5, r0
    ddd8:	b948      	cbnz	r0, ddee <__lshift+0x3e>
    ddda:	4602      	mov	r2, r0
    dddc:	4b2a      	ldr	r3, [pc, #168]	; (de88 <__lshift+0xd8>)
    ddde:	482b      	ldr	r0, [pc, #172]	; (de8c <__lshift+0xdc>)
    dde0:	f240 11d9 	movw	r1, #473	; 0x1d9
    dde4:	f000 fc7c 	bl	e6e0 <__assert_func>
    dde8:	3101      	adds	r1, #1
    ddea:	005b      	lsls	r3, r3, #1
    ddec:	e7ee      	b.n	ddcc <__lshift+0x1c>
    ddee:	2300      	movs	r3, #0
    ddf0:	f100 0114 	add.w	r1, r0, #20
    ddf4:	f100 0210 	add.w	r2, r0, #16
    ddf8:	4618      	mov	r0, r3
    ddfa:	4553      	cmp	r3, sl
    ddfc:	db37      	blt.n	de6e <__lshift+0xbe>
    ddfe:	6920      	ldr	r0, [r4, #16]
    de00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
    de04:	f104 0314 	add.w	r3, r4, #20
    de08:	f019 091f 	ands.w	r9, r9, #31
    de0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
    de10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    de14:	d02f      	beq.n	de76 <__lshift+0xc6>
    de16:	f1c9 0e20 	rsb	lr, r9, #32
    de1a:	468a      	mov	sl, r1
    de1c:	f04f 0c00 	mov.w	ip, #0
    de20:	681a      	ldr	r2, [r3, #0]
    de22:	fa02 f209 	lsl.w	r2, r2, r9
    de26:	ea42 020c 	orr.w	r2, r2, ip
    de2a:	f84a 2b04 	str.w	r2, [sl], #4
    de2e:	f853 2b04 	ldr.w	r2, [r3], #4
    de32:	4298      	cmp	r0, r3
    de34:	fa22 fc0e 	lsr.w	ip, r2, lr
    de38:	d8f2      	bhi.n	de20 <__lshift+0x70>
    de3a:	1b03      	subs	r3, r0, r4
    de3c:	3b15      	subs	r3, #21
    de3e:	f023 0303 	bic.w	r3, r3, #3
    de42:	3304      	adds	r3, #4
    de44:	f104 0215 	add.w	r2, r4, #21
    de48:	4290      	cmp	r0, r2
    de4a:	bf38      	it	cc
    de4c:	2304      	movcc	r3, #4
    de4e:	f841 c003 	str.w	ip, [r1, r3]
    de52:	f1bc 0f00 	cmp.w	ip, #0
    de56:	d001      	beq.n	de5c <__lshift+0xac>
    de58:	f108 0602 	add.w	r6, r8, #2
    de5c:	3e01      	subs	r6, #1
    de5e:	4638      	mov	r0, r7
    de60:	612e      	str	r6, [r5, #16]
    de62:	4621      	mov	r1, r4
    de64:	f7ff fe24 	bl	dab0 <_Bfree>
    de68:	4628      	mov	r0, r5
    de6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    de6e:	f842 0f04 	str.w	r0, [r2, #4]!
    de72:	3301      	adds	r3, #1
    de74:	e7c1      	b.n	ddfa <__lshift+0x4a>
    de76:	3904      	subs	r1, #4
    de78:	f853 2b04 	ldr.w	r2, [r3], #4
    de7c:	f841 2f04 	str.w	r2, [r1, #4]!
    de80:	4298      	cmp	r0, r3
    de82:	d8f9      	bhi.n	de78 <__lshift+0xc8>
    de84:	e7ea      	b.n	de5c <__lshift+0xac>
    de86:	bf00      	nop
    de88:	0001357a 	.word	0x0001357a
    de8c:	0001351d 	.word	0x0001351d

0000de90 <__mdiff>:
    de90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de94:	460d      	mov	r5, r1
    de96:	4607      	mov	r7, r0
    de98:	4611      	mov	r1, r2
    de9a:	4628      	mov	r0, r5
    de9c:	4614      	mov	r4, r2
    de9e:	f002 fda6 	bl	109ee <__mcmp>
    dea2:	1e06      	subs	r6, r0, #0
    dea4:	d111      	bne.n	deca <__mdiff+0x3a>
    dea6:	4631      	mov	r1, r6
    dea8:	4638      	mov	r0, r7
    deaa:	f7ff fdc1 	bl	da30 <_Balloc>
    deae:	4602      	mov	r2, r0
    deb0:	b928      	cbnz	r0, debe <__mdiff+0x2e>
    deb2:	4b39      	ldr	r3, [pc, #228]	; (df98 <__mdiff+0x108>)
    deb4:	f240 2132 	movw	r1, #562	; 0x232
    deb8:	4838      	ldr	r0, [pc, #224]	; (df9c <__mdiff+0x10c>)
    deba:	f000 fc11 	bl	e6e0 <__assert_func>
    debe:	2301      	movs	r3, #1
    dec0:	e9c0 3604 	strd	r3, r6, [r0, #16]
    dec4:	4610      	mov	r0, r2
    dec6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    deca:	bfa4      	itt	ge
    decc:	4623      	movge	r3, r4
    dece:	462c      	movge	r4, r5
    ded0:	4638      	mov	r0, r7
    ded2:	6861      	ldr	r1, [r4, #4]
    ded4:	bfa6      	itte	ge
    ded6:	461d      	movge	r5, r3
    ded8:	2600      	movge	r6, #0
    deda:	2601      	movlt	r6, #1
    dedc:	f7ff fda8 	bl	da30 <_Balloc>
    dee0:	4602      	mov	r2, r0
    dee2:	b918      	cbnz	r0, deec <__mdiff+0x5c>
    dee4:	4b2c      	ldr	r3, [pc, #176]	; (df98 <__mdiff+0x108>)
    dee6:	f44f 7110 	mov.w	r1, #576	; 0x240
    deea:	e7e5      	b.n	deb8 <__mdiff+0x28>
    deec:	6927      	ldr	r7, [r4, #16]
    deee:	60c6      	str	r6, [r0, #12]
    def0:	692e      	ldr	r6, [r5, #16]
    def2:	f104 0014 	add.w	r0, r4, #20
    def6:	f105 0914 	add.w	r9, r5, #20
    defa:	f102 0e14 	add.w	lr, r2, #20
    defe:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
    df02:	eb09 0686 	add.w	r6, r9, r6, lsl #2
    df06:	3410      	adds	r4, #16
    df08:	46f2      	mov	sl, lr
    df0a:	2100      	movs	r1, #0
    df0c:	f859 3b04 	ldr.w	r3, [r9], #4
    df10:	f854 bf04 	ldr.w	fp, [r4, #4]!
    df14:	fa1f f883 	uxth.w	r8, r3
    df18:	fa11 f18b 	uxtah	r1, r1, fp
    df1c:	0c1b      	lsrs	r3, r3, #16
    df1e:	eba1 0808 	sub.w	r8, r1, r8
    df22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
    df26:	eb03 4328 	add.w	r3, r3, r8, asr #16
    df2a:	fa1f f888 	uxth.w	r8, r8
    df2e:	1419      	asrs	r1, r3, #16
    df30:	454e      	cmp	r6, r9
    df32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
    df36:	f84a 3b04 	str.w	r3, [sl], #4
    df3a:	d8e7      	bhi.n	df0c <__mdiff+0x7c>
    df3c:	1b73      	subs	r3, r6, r5
    df3e:	3b15      	subs	r3, #21
    df40:	f023 0303 	bic.w	r3, r3, #3
    df44:	3304      	adds	r3, #4
    df46:	3515      	adds	r5, #21
    df48:	42ae      	cmp	r6, r5
    df4a:	bf38      	it	cc
    df4c:	2304      	movcc	r3, #4
    df4e:	4418      	add	r0, r3
    df50:	4473      	add	r3, lr
    df52:	469e      	mov	lr, r3
    df54:	4606      	mov	r6, r0
    df56:	4566      	cmp	r6, ip
    df58:	d30e      	bcc.n	df78 <__mdiff+0xe8>
    df5a:	f10c 0103 	add.w	r1, ip, #3
    df5e:	1a09      	subs	r1, r1, r0
    df60:	f021 0103 	bic.w	r1, r1, #3
    df64:	3803      	subs	r0, #3
    df66:	4584      	cmp	ip, r0
    df68:	bf38      	it	cc
    df6a:	2100      	movcc	r1, #0
    df6c:	4419      	add	r1, r3
    df6e:	f851 3d04 	ldr.w	r3, [r1, #-4]!
    df72:	b17b      	cbz	r3, df94 <__mdiff+0x104>
    df74:	6117      	str	r7, [r2, #16]
    df76:	e7a5      	b.n	dec4 <__mdiff+0x34>
    df78:	f856 8b04 	ldr.w	r8, [r6], #4
    df7c:	fa11 f488 	uxtah	r4, r1, r8
    df80:	1425      	asrs	r5, r4, #16
    df82:	eb05 4518 	add.w	r5, r5, r8, lsr #16
    df86:	b2a4      	uxth	r4, r4
    df88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    df8c:	f84e 4b04 	str.w	r4, [lr], #4
    df90:	1429      	asrs	r1, r5, #16
    df92:	e7e0      	b.n	df56 <__mdiff+0xc6>
    df94:	3f01      	subs	r7, #1
    df96:	e7ea      	b.n	df6e <__mdiff+0xde>
    df98:	0001357a 	.word	0x0001357a
    df9c:	0001351d 	.word	0x0001351d

0000dfa0 <__d2b>:
    dfa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    dfa4:	2101      	movs	r1, #1
    dfa6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    dfaa:	4690      	mov	r8, r2
    dfac:	461d      	mov	r5, r3
    dfae:	f7ff fd3f 	bl	da30 <_Balloc>
    dfb2:	4604      	mov	r4, r0
    dfb4:	b930      	cbnz	r0, dfc4 <__d2b+0x24>
    dfb6:	4602      	mov	r2, r0
    dfb8:	4b25      	ldr	r3, [pc, #148]	; (e050 <__d2b+0xb0>)
    dfba:	4826      	ldr	r0, [pc, #152]	; (e054 <__d2b+0xb4>)
    dfbc:	f240 310a 	movw	r1, #778	; 0x30a
    dfc0:	f000 fb8e 	bl	e6e0 <__assert_func>
    dfc4:	f3c5 0313 	ubfx	r3, r5, #0, #20
    dfc8:	f3c5 550a 	ubfx	r5, r5, #20, #11
    dfcc:	bb2d      	cbnz	r5, e01a <__d2b+0x7a>
    dfce:	9301      	str	r3, [sp, #4]
    dfd0:	f1b8 0300 	subs.w	r3, r8, #0
    dfd4:	d026      	beq.n	e024 <__d2b+0x84>
    dfd6:	4668      	mov	r0, sp
    dfd8:	9300      	str	r3, [sp, #0]
    dfda:	f002 fcdb 	bl	10994 <__lo0bits>
    dfde:	9900      	ldr	r1, [sp, #0]
    dfe0:	b1f0      	cbz	r0, e020 <__d2b+0x80>
    dfe2:	9a01      	ldr	r2, [sp, #4]
    dfe4:	f1c0 0320 	rsb	r3, r0, #32
    dfe8:	fa02 f303 	lsl.w	r3, r2, r3
    dfec:	430b      	orrs	r3, r1
    dfee:	40c2      	lsrs	r2, r0
    dff0:	6163      	str	r3, [r4, #20]
    dff2:	9201      	str	r2, [sp, #4]
    dff4:	9b01      	ldr	r3, [sp, #4]
    dff6:	61a3      	str	r3, [r4, #24]
    dff8:	2b00      	cmp	r3, #0
    dffa:	bf14      	ite	ne
    dffc:	2102      	movne	r1, #2
    dffe:	2101      	moveq	r1, #1
    e000:	6121      	str	r1, [r4, #16]
    e002:	b1c5      	cbz	r5, e036 <__d2b+0x96>
    e004:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    e008:	4405      	add	r5, r0
    e00a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    e00e:	603d      	str	r5, [r7, #0]
    e010:	6030      	str	r0, [r6, #0]
    e012:	4620      	mov	r0, r4
    e014:	b002      	add	sp, #8
    e016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e01a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e01e:	e7d6      	b.n	dfce <__d2b+0x2e>
    e020:	6161      	str	r1, [r4, #20]
    e022:	e7e7      	b.n	dff4 <__d2b+0x54>
    e024:	a801      	add	r0, sp, #4
    e026:	f002 fcb5 	bl	10994 <__lo0bits>
    e02a:	9b01      	ldr	r3, [sp, #4]
    e02c:	6163      	str	r3, [r4, #20]
    e02e:	2101      	movs	r1, #1
    e030:	6121      	str	r1, [r4, #16]
    e032:	3020      	adds	r0, #32
    e034:	e7e5      	b.n	e002 <__d2b+0x62>
    e036:	eb04 0381 	add.w	r3, r4, r1, lsl #2
    e03a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    e03e:	6038      	str	r0, [r7, #0]
    e040:	6918      	ldr	r0, [r3, #16]
    e042:	f002 fc87 	bl	10954 <__hi0bits>
    e046:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
    e04a:	6031      	str	r1, [r6, #0]
    e04c:	e7e1      	b.n	e012 <__d2b+0x72>
    e04e:	bf00      	nop
    e050:	0001357a 	.word	0x0001357a
    e054:	0001351d 	.word	0x0001351d

0000e058 <_mprec_log10>:
    e058:	2817      	cmp	r0, #23
    e05a:	b5d0      	push	{r4, r6, r7, lr}
    e05c:	4604      	mov	r4, r0
    e05e:	dc05      	bgt.n	e06c <_mprec_log10+0x14>
    e060:	4808      	ldr	r0, [pc, #32]	; (e084 <_mprec_log10+0x2c>)
    e062:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
    e066:	e9d4 0100 	ldrd	r0, r1, [r4]
    e06a:	bdd0      	pop	{r4, r6, r7, pc}
    e06c:	4906      	ldr	r1, [pc, #24]	; (e088 <_mprec_log10+0x30>)
    e06e:	4f07      	ldr	r7, [pc, #28]	; (e08c <_mprec_log10+0x34>)
    e070:	2000      	movs	r0, #0
    e072:	2600      	movs	r6, #0
    e074:	4632      	mov	r2, r6
    e076:	463b      	mov	r3, r7
    e078:	f7f2 fa4e 	bl	518 <__aeabi_dmul>
    e07c:	3c01      	subs	r4, #1
    e07e:	d1f9      	bne.n	e074 <_mprec_log10+0x1c>
    e080:	e7f3      	b.n	e06a <_mprec_log10+0x12>
    e082:	bf00      	nop
    e084:	00011160 	.word	0x00011160
    e088:	3ff00000 	.word	0x3ff00000
    e08c:	40240000 	.word	0x40240000

0000e090 <_vfiprintf_r>:
    e090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e094:	460d      	mov	r5, r1
    e096:	b09d      	sub	sp, #116	; 0x74
    e098:	4614      	mov	r4, r2
    e09a:	4698      	mov	r8, r3
    e09c:	4606      	mov	r6, r0
    e09e:	b118      	cbz	r0, e0a8 <_vfiprintf_r+0x18>
    e0a0:	6983      	ldr	r3, [r0, #24]
    e0a2:	b90b      	cbnz	r3, e0a8 <_vfiprintf_r+0x18>
    e0a4:	f7ff fc3a 	bl	d91c <__sinit>
    e0a8:	4b89      	ldr	r3, [pc, #548]	; (e2d0 <_vfiprintf_r+0x240>)
    e0aa:	429d      	cmp	r5, r3
    e0ac:	d11b      	bne.n	e0e6 <_vfiprintf_r+0x56>
    e0ae:	6875      	ldr	r5, [r6, #4]
    e0b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    e0b2:	07d9      	lsls	r1, r3, #31
    e0b4:	d405      	bmi.n	e0c2 <_vfiprintf_r+0x32>
    e0b6:	89ab      	ldrh	r3, [r5, #12]
    e0b8:	059a      	lsls	r2, r3, #22
    e0ba:	d402      	bmi.n	e0c2 <_vfiprintf_r+0x32>
    e0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
    e0be:	f7f8 fe05 	bl	6ccc <__retarget_lock_acquire_recursive>
    e0c2:	89ab      	ldrh	r3, [r5, #12]
    e0c4:	071b      	lsls	r3, r3, #28
    e0c6:	d501      	bpl.n	e0cc <_vfiprintf_r+0x3c>
    e0c8:	692b      	ldr	r3, [r5, #16]
    e0ca:	b9eb      	cbnz	r3, e108 <_vfiprintf_r+0x78>
    e0cc:	4629      	mov	r1, r5
    e0ce:	4630      	mov	r0, r6
    e0d0:	f000 fa98 	bl	e604 <__swsetup_r>
    e0d4:	b1c0      	cbz	r0, e108 <_vfiprintf_r+0x78>
    e0d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    e0d8:	07dc      	lsls	r4, r3, #31
    e0da:	d50e      	bpl.n	e0fa <_vfiprintf_r+0x6a>
    e0dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e0e0:	b01d      	add	sp, #116	; 0x74
    e0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e0e6:	4b7b      	ldr	r3, [pc, #492]	; (e2d4 <_vfiprintf_r+0x244>)
    e0e8:	429d      	cmp	r5, r3
    e0ea:	d101      	bne.n	e0f0 <_vfiprintf_r+0x60>
    e0ec:	68b5      	ldr	r5, [r6, #8]
    e0ee:	e7df      	b.n	e0b0 <_vfiprintf_r+0x20>
    e0f0:	4b79      	ldr	r3, [pc, #484]	; (e2d8 <_vfiprintf_r+0x248>)
    e0f2:	429d      	cmp	r5, r3
    e0f4:	bf08      	it	eq
    e0f6:	68f5      	ldreq	r5, [r6, #12]
    e0f8:	e7da      	b.n	e0b0 <_vfiprintf_r+0x20>
    e0fa:	89ab      	ldrh	r3, [r5, #12]
    e0fc:	0598      	lsls	r0, r3, #22
    e0fe:	d4ed      	bmi.n	e0dc <_vfiprintf_r+0x4c>
    e100:	6da8      	ldr	r0, [r5, #88]	; 0x58
    e102:	f7f8 fe03 	bl	6d0c <__retarget_lock_release_recursive>
    e106:	e7e9      	b.n	e0dc <_vfiprintf_r+0x4c>
    e108:	2300      	movs	r3, #0
    e10a:	9309      	str	r3, [sp, #36]	; 0x24
    e10c:	2320      	movs	r3, #32
    e10e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    e112:	f8cd 800c 	str.w	r8, [sp, #12]
    e116:	2330      	movs	r3, #48	; 0x30
    e118:	f8df 81c0 	ldr.w	r8, [pc, #448]	; e2dc <_vfiprintf_r+0x24c>
    e11c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    e120:	f04f 0901 	mov.w	r9, #1
    e124:	4623      	mov	r3, r4
    e126:	469a      	mov	sl, r3
    e128:	f813 2b01 	ldrb.w	r2, [r3], #1
    e12c:	b10a      	cbz	r2, e132 <_vfiprintf_r+0xa2>
    e12e:	2a25      	cmp	r2, #37	; 0x25
    e130:	d1f9      	bne.n	e126 <_vfiprintf_r+0x96>
    e132:	ebba 0b04 	subs.w	fp, sl, r4
    e136:	d00b      	beq.n	e150 <_vfiprintf_r+0xc0>
    e138:	465b      	mov	r3, fp
    e13a:	4622      	mov	r2, r4
    e13c:	4629      	mov	r1, r5
    e13e:	4630      	mov	r0, r6
    e140:	f002 fc85 	bl	10a4e <__sfputs_r>
    e144:	3001      	adds	r0, #1
    e146:	f000 80aa 	beq.w	e29e <_vfiprintf_r+0x20e>
    e14a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e14c:	445a      	add	r2, fp
    e14e:	9209      	str	r2, [sp, #36]	; 0x24
    e150:	f89a 3000 	ldrb.w	r3, [sl]
    e154:	2b00      	cmp	r3, #0
    e156:	f000 80a2 	beq.w	e29e <_vfiprintf_r+0x20e>
    e15a:	2300      	movs	r3, #0
    e15c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e160:	e9cd 2305 	strd	r2, r3, [sp, #20]
    e164:	f10a 0a01 	add.w	sl, sl, #1
    e168:	9304      	str	r3, [sp, #16]
    e16a:	9307      	str	r3, [sp, #28]
    e16c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    e170:	931a      	str	r3, [sp, #104]	; 0x68
    e172:	4654      	mov	r4, sl
    e174:	2205      	movs	r2, #5
    e176:	f814 1b01 	ldrb.w	r1, [r4], #1
    e17a:	4858      	ldr	r0, [pc, #352]	; (e2dc <_vfiprintf_r+0x24c>)
    e17c:	f7f1 ffc0 	bl	100 <memchr>
    e180:	9a04      	ldr	r2, [sp, #16]
    e182:	b9d8      	cbnz	r0, e1bc <_vfiprintf_r+0x12c>
    e184:	06d1      	lsls	r1, r2, #27
    e186:	bf44      	itt	mi
    e188:	2320      	movmi	r3, #32
    e18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    e18e:	0713      	lsls	r3, r2, #28
    e190:	bf44      	itt	mi
    e192:	232b      	movmi	r3, #43	; 0x2b
    e194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
    e198:	f89a 3000 	ldrb.w	r3, [sl]
    e19c:	2b2a      	cmp	r3, #42	; 0x2a
    e19e:	d015      	beq.n	e1cc <_vfiprintf_r+0x13c>
    e1a0:	9a07      	ldr	r2, [sp, #28]
    e1a2:	4654      	mov	r4, sl
    e1a4:	2000      	movs	r0, #0
    e1a6:	f04f 0c0a 	mov.w	ip, #10
    e1aa:	4621      	mov	r1, r4
    e1ac:	f811 3b01 	ldrb.w	r3, [r1], #1
    e1b0:	3b30      	subs	r3, #48	; 0x30
    e1b2:	2b09      	cmp	r3, #9
    e1b4:	d94e      	bls.n	e254 <_vfiprintf_r+0x1c4>
    e1b6:	b1b0      	cbz	r0, e1e6 <_vfiprintf_r+0x156>
    e1b8:	9207      	str	r2, [sp, #28]
    e1ba:	e014      	b.n	e1e6 <_vfiprintf_r+0x156>
    e1bc:	eba0 0308 	sub.w	r3, r0, r8
    e1c0:	fa09 f303 	lsl.w	r3, r9, r3
    e1c4:	4313      	orrs	r3, r2
    e1c6:	9304      	str	r3, [sp, #16]
    e1c8:	46a2      	mov	sl, r4
    e1ca:	e7d2      	b.n	e172 <_vfiprintf_r+0xe2>
    e1cc:	9b03      	ldr	r3, [sp, #12]
    e1ce:	1d19      	adds	r1, r3, #4
    e1d0:	681b      	ldr	r3, [r3, #0]
    e1d2:	9103      	str	r1, [sp, #12]
    e1d4:	2b00      	cmp	r3, #0
    e1d6:	bfbb      	ittet	lt
    e1d8:	425b      	neglt	r3, r3
    e1da:	f042 0202 	orrlt.w	r2, r2, #2
    e1de:	9307      	strge	r3, [sp, #28]
    e1e0:	9307      	strlt	r3, [sp, #28]
    e1e2:	bfb8      	it	lt
    e1e4:	9204      	strlt	r2, [sp, #16]
    e1e6:	7823      	ldrb	r3, [r4, #0]
    e1e8:	2b2e      	cmp	r3, #46	; 0x2e
    e1ea:	d10c      	bne.n	e206 <_vfiprintf_r+0x176>
    e1ec:	7863      	ldrb	r3, [r4, #1]
    e1ee:	2b2a      	cmp	r3, #42	; 0x2a
    e1f0:	d135      	bne.n	e25e <_vfiprintf_r+0x1ce>
    e1f2:	9b03      	ldr	r3, [sp, #12]
    e1f4:	1d1a      	adds	r2, r3, #4
    e1f6:	681b      	ldr	r3, [r3, #0]
    e1f8:	9203      	str	r2, [sp, #12]
    e1fa:	2b00      	cmp	r3, #0
    e1fc:	bfb8      	it	lt
    e1fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
    e202:	3402      	adds	r4, #2
    e204:	9305      	str	r3, [sp, #20]
    e206:	f8df a0d8 	ldr.w	sl, [pc, #216]	; e2e0 <_vfiprintf_r+0x250>
    e20a:	7821      	ldrb	r1, [r4, #0]
    e20c:	2203      	movs	r2, #3
    e20e:	4650      	mov	r0, sl
    e210:	f7f1 ff76 	bl	100 <memchr>
    e214:	b140      	cbz	r0, e228 <_vfiprintf_r+0x198>
    e216:	2340      	movs	r3, #64	; 0x40
    e218:	eba0 000a 	sub.w	r0, r0, sl
    e21c:	fa03 f000 	lsl.w	r0, r3, r0
    e220:	9b04      	ldr	r3, [sp, #16]
    e222:	4303      	orrs	r3, r0
    e224:	3401      	adds	r4, #1
    e226:	9304      	str	r3, [sp, #16]
    e228:	f814 1b01 	ldrb.w	r1, [r4], #1
    e22c:	482d      	ldr	r0, [pc, #180]	; (e2e4 <_vfiprintf_r+0x254>)
    e22e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    e232:	2206      	movs	r2, #6
    e234:	f7f1 ff64 	bl	100 <memchr>
    e238:	2800      	cmp	r0, #0
    e23a:	d03f      	beq.n	e2bc <_vfiprintf_r+0x22c>
    e23c:	4b2a      	ldr	r3, [pc, #168]	; (e2e8 <_vfiprintf_r+0x258>)
    e23e:	bb1b      	cbnz	r3, e288 <_vfiprintf_r+0x1f8>
    e240:	9b03      	ldr	r3, [sp, #12]
    e242:	3307      	adds	r3, #7
    e244:	f023 0307 	bic.w	r3, r3, #7
    e248:	3308      	adds	r3, #8
    e24a:	9303      	str	r3, [sp, #12]
    e24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e24e:	443b      	add	r3, r7
    e250:	9309      	str	r3, [sp, #36]	; 0x24
    e252:	e767      	b.n	e124 <_vfiprintf_r+0x94>
    e254:	fb0c 3202 	mla	r2, ip, r2, r3
    e258:	460c      	mov	r4, r1
    e25a:	2001      	movs	r0, #1
    e25c:	e7a5      	b.n	e1aa <_vfiprintf_r+0x11a>
    e25e:	2300      	movs	r3, #0
    e260:	3401      	adds	r4, #1
    e262:	9305      	str	r3, [sp, #20]
    e264:	4619      	mov	r1, r3
    e266:	f04f 0c0a 	mov.w	ip, #10
    e26a:	4620      	mov	r0, r4
    e26c:	f810 2b01 	ldrb.w	r2, [r0], #1
    e270:	3a30      	subs	r2, #48	; 0x30
    e272:	2a09      	cmp	r2, #9
    e274:	d903      	bls.n	e27e <_vfiprintf_r+0x1ee>
    e276:	2b00      	cmp	r3, #0
    e278:	d0c5      	beq.n	e206 <_vfiprintf_r+0x176>
    e27a:	9105      	str	r1, [sp, #20]
    e27c:	e7c3      	b.n	e206 <_vfiprintf_r+0x176>
    e27e:	fb0c 2101 	mla	r1, ip, r1, r2
    e282:	4604      	mov	r4, r0
    e284:	2301      	movs	r3, #1
    e286:	e7f0      	b.n	e26a <_vfiprintf_r+0x1da>
    e288:	ab03      	add	r3, sp, #12
    e28a:	9300      	str	r3, [sp, #0]
    e28c:	462a      	mov	r2, r5
    e28e:	4b17      	ldr	r3, [pc, #92]	; (e2ec <_vfiprintf_r+0x25c>)
    e290:	a904      	add	r1, sp, #16
    e292:	4630      	mov	r0, r6
    e294:	f3af 8000 	nop.w
    e298:	4607      	mov	r7, r0
    e29a:	1c78      	adds	r0, r7, #1
    e29c:	d1d6      	bne.n	e24c <_vfiprintf_r+0x1bc>
    e29e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    e2a0:	07d9      	lsls	r1, r3, #31
    e2a2:	d405      	bmi.n	e2b0 <_vfiprintf_r+0x220>
    e2a4:	89ab      	ldrh	r3, [r5, #12]
    e2a6:	059a      	lsls	r2, r3, #22
    e2a8:	d402      	bmi.n	e2b0 <_vfiprintf_r+0x220>
    e2aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
    e2ac:	f7f8 fd2e 	bl	6d0c <__retarget_lock_release_recursive>
    e2b0:	89ab      	ldrh	r3, [r5, #12]
    e2b2:	065b      	lsls	r3, r3, #25
    e2b4:	f53f af12 	bmi.w	e0dc <_vfiprintf_r+0x4c>
    e2b8:	9809      	ldr	r0, [sp, #36]	; 0x24
    e2ba:	e711      	b.n	e0e0 <_vfiprintf_r+0x50>
    e2bc:	ab03      	add	r3, sp, #12
    e2be:	9300      	str	r3, [sp, #0]
    e2c0:	462a      	mov	r2, r5
    e2c2:	4b0a      	ldr	r3, [pc, #40]	; (e2ec <_vfiprintf_r+0x25c>)
    e2c4:	a904      	add	r1, sp, #16
    e2c6:	4630      	mov	r0, r6
    e2c8:	f000 f812 	bl	e2f0 <_printf_i>
    e2cc:	e7e4      	b.n	e298 <_vfiprintf_r+0x208>
    e2ce:	bf00      	nop
    e2d0:	0001330c 	.word	0x0001330c
    e2d4:	0001332c 	.word	0x0001332c
    e2d8:	000132ec 	.word	0x000132ec
    e2dc:	0001358b 	.word	0x0001358b
    e2e0:	00013591 	.word	0x00013591
    e2e4:	00013595 	.word	0x00013595
    e2e8:	00000000 	.word	0x00000000
    e2ec:	00010a4f 	.word	0x00010a4f

0000e2f0 <_printf_i>:
    e2f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    e2f4:	7e0f      	ldrb	r7, [r1, #24]
    e2f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    e2f8:	2f78      	cmp	r7, #120	; 0x78
    e2fa:	4691      	mov	r9, r2
    e2fc:	4680      	mov	r8, r0
    e2fe:	460c      	mov	r4, r1
    e300:	469a      	mov	sl, r3
    e302:	f101 0243 	add.w	r2, r1, #67	; 0x43
    e306:	d807      	bhi.n	e318 <_printf_i+0x28>
    e308:	2f62      	cmp	r7, #98	; 0x62
    e30a:	d80a      	bhi.n	e322 <_printf_i+0x32>
    e30c:	2f00      	cmp	r7, #0
    e30e:	f000 80d8 	beq.w	e4c2 <_printf_i+0x1d2>
    e312:	2f58      	cmp	r7, #88	; 0x58
    e314:	f000 80a3 	beq.w	e45e <_printf_i+0x16e>
    e318:	f104 0542 	add.w	r5, r4, #66	; 0x42
    e31c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
    e320:	e03a      	b.n	e398 <_printf_i+0xa8>
    e322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
    e326:	2b15      	cmp	r3, #21
    e328:	d8f6      	bhi.n	e318 <_printf_i+0x28>
    e32a:	a101      	add	r1, pc, #4	; (adr r1, e330 <_printf_i+0x40>)
    e32c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    e330:	0000e389 	.word	0x0000e389
    e334:	0000e39d 	.word	0x0000e39d
    e338:	0000e319 	.word	0x0000e319
    e33c:	0000e319 	.word	0x0000e319
    e340:	0000e319 	.word	0x0000e319
    e344:	0000e319 	.word	0x0000e319
    e348:	0000e39d 	.word	0x0000e39d
    e34c:	0000e319 	.word	0x0000e319
    e350:	0000e319 	.word	0x0000e319
    e354:	0000e319 	.word	0x0000e319
    e358:	0000e319 	.word	0x0000e319
    e35c:	0000e4a9 	.word	0x0000e4a9
    e360:	0000e3cd 	.word	0x0000e3cd
    e364:	0000e48b 	.word	0x0000e48b
    e368:	0000e319 	.word	0x0000e319
    e36c:	0000e319 	.word	0x0000e319
    e370:	0000e4cb 	.word	0x0000e4cb
    e374:	0000e319 	.word	0x0000e319
    e378:	0000e3cd 	.word	0x0000e3cd
    e37c:	0000e319 	.word	0x0000e319
    e380:	0000e319 	.word	0x0000e319
    e384:	0000e493 	.word	0x0000e493
    e388:	682b      	ldr	r3, [r5, #0]
    e38a:	1d1a      	adds	r2, r3, #4
    e38c:	681b      	ldr	r3, [r3, #0]
    e38e:	602a      	str	r2, [r5, #0]
    e390:	f104 0542 	add.w	r5, r4, #66	; 0x42
    e394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    e398:	2301      	movs	r3, #1
    e39a:	e0a3      	b.n	e4e4 <_printf_i+0x1f4>
    e39c:	6820      	ldr	r0, [r4, #0]
    e39e:	6829      	ldr	r1, [r5, #0]
    e3a0:	0606      	lsls	r6, r0, #24
    e3a2:	f101 0304 	add.w	r3, r1, #4
    e3a6:	d50a      	bpl.n	e3be <_printf_i+0xce>
    e3a8:	680e      	ldr	r6, [r1, #0]
    e3aa:	602b      	str	r3, [r5, #0]
    e3ac:	2e00      	cmp	r6, #0
    e3ae:	da03      	bge.n	e3b8 <_printf_i+0xc8>
    e3b0:	232d      	movs	r3, #45	; 0x2d
    e3b2:	4276      	negs	r6, r6
    e3b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    e3b8:	485e      	ldr	r0, [pc, #376]	; (e534 <_printf_i+0x244>)
    e3ba:	230a      	movs	r3, #10
    e3bc:	e019      	b.n	e3f2 <_printf_i+0x102>
    e3be:	680e      	ldr	r6, [r1, #0]
    e3c0:	602b      	str	r3, [r5, #0]
    e3c2:	f010 0f40 	tst.w	r0, #64	; 0x40
    e3c6:	bf18      	it	ne
    e3c8:	b236      	sxthne	r6, r6
    e3ca:	e7ef      	b.n	e3ac <_printf_i+0xbc>
    e3cc:	682b      	ldr	r3, [r5, #0]
    e3ce:	6820      	ldr	r0, [r4, #0]
    e3d0:	1d19      	adds	r1, r3, #4
    e3d2:	6029      	str	r1, [r5, #0]
    e3d4:	0601      	lsls	r1, r0, #24
    e3d6:	d501      	bpl.n	e3dc <_printf_i+0xec>
    e3d8:	681e      	ldr	r6, [r3, #0]
    e3da:	e002      	b.n	e3e2 <_printf_i+0xf2>
    e3dc:	0646      	lsls	r6, r0, #25
    e3de:	d5fb      	bpl.n	e3d8 <_printf_i+0xe8>
    e3e0:	881e      	ldrh	r6, [r3, #0]
    e3e2:	4854      	ldr	r0, [pc, #336]	; (e534 <_printf_i+0x244>)
    e3e4:	2f6f      	cmp	r7, #111	; 0x6f
    e3e6:	bf0c      	ite	eq
    e3e8:	2308      	moveq	r3, #8
    e3ea:	230a      	movne	r3, #10
    e3ec:	2100      	movs	r1, #0
    e3ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    e3f2:	6865      	ldr	r5, [r4, #4]
    e3f4:	60a5      	str	r5, [r4, #8]
    e3f6:	2d00      	cmp	r5, #0
    e3f8:	bfa2      	ittt	ge
    e3fa:	6821      	ldrge	r1, [r4, #0]
    e3fc:	f021 0104 	bicge.w	r1, r1, #4
    e400:	6021      	strge	r1, [r4, #0]
    e402:	b90e      	cbnz	r6, e408 <_printf_i+0x118>
    e404:	2d00      	cmp	r5, #0
    e406:	d04d      	beq.n	e4a4 <_printf_i+0x1b4>
    e408:	4615      	mov	r5, r2
    e40a:	fbb6 f1f3 	udiv	r1, r6, r3
    e40e:	fb03 6711 	mls	r7, r3, r1, r6
    e412:	5dc7      	ldrb	r7, [r0, r7]
    e414:	f805 7d01 	strb.w	r7, [r5, #-1]!
    e418:	4637      	mov	r7, r6
    e41a:	42bb      	cmp	r3, r7
    e41c:	460e      	mov	r6, r1
    e41e:	d9f4      	bls.n	e40a <_printf_i+0x11a>
    e420:	2b08      	cmp	r3, #8
    e422:	d10b      	bne.n	e43c <_printf_i+0x14c>
    e424:	6823      	ldr	r3, [r4, #0]
    e426:	07de      	lsls	r6, r3, #31
    e428:	d508      	bpl.n	e43c <_printf_i+0x14c>
    e42a:	6923      	ldr	r3, [r4, #16]
    e42c:	6861      	ldr	r1, [r4, #4]
    e42e:	4299      	cmp	r1, r3
    e430:	bfde      	ittt	le
    e432:	2330      	movle	r3, #48	; 0x30
    e434:	f805 3c01 	strble.w	r3, [r5, #-1]
    e438:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
    e43c:	1b52      	subs	r2, r2, r5
    e43e:	6122      	str	r2, [r4, #16]
    e440:	f8cd a000 	str.w	sl, [sp]
    e444:	464b      	mov	r3, r9
    e446:	aa03      	add	r2, sp, #12
    e448:	4621      	mov	r1, r4
    e44a:	4640      	mov	r0, r8
    e44c:	f002 fb11 	bl	10a72 <_printf_common>
    e450:	3001      	adds	r0, #1
    e452:	d14c      	bne.n	e4ee <_printf_i+0x1fe>
    e454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e458:	b004      	add	sp, #16
    e45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e45e:	4835      	ldr	r0, [pc, #212]	; (e534 <_printf_i+0x244>)
    e460:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
    e464:	6829      	ldr	r1, [r5, #0]
    e466:	6823      	ldr	r3, [r4, #0]
    e468:	f851 6b04 	ldr.w	r6, [r1], #4
    e46c:	6029      	str	r1, [r5, #0]
    e46e:	061d      	lsls	r5, r3, #24
    e470:	d514      	bpl.n	e49c <_printf_i+0x1ac>
    e472:	07df      	lsls	r7, r3, #31
    e474:	bf44      	itt	mi
    e476:	f043 0320 	orrmi.w	r3, r3, #32
    e47a:	6023      	strmi	r3, [r4, #0]
    e47c:	b91e      	cbnz	r6, e486 <_printf_i+0x196>
    e47e:	6823      	ldr	r3, [r4, #0]
    e480:	f023 0320 	bic.w	r3, r3, #32
    e484:	6023      	str	r3, [r4, #0]
    e486:	2310      	movs	r3, #16
    e488:	e7b0      	b.n	e3ec <_printf_i+0xfc>
    e48a:	6823      	ldr	r3, [r4, #0]
    e48c:	f043 0320 	orr.w	r3, r3, #32
    e490:	6023      	str	r3, [r4, #0]
    e492:	2378      	movs	r3, #120	; 0x78
    e494:	4828      	ldr	r0, [pc, #160]	; (e538 <_printf_i+0x248>)
    e496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    e49a:	e7e3      	b.n	e464 <_printf_i+0x174>
    e49c:	0659      	lsls	r1, r3, #25
    e49e:	bf48      	it	mi
    e4a0:	b2b6      	uxthmi	r6, r6
    e4a2:	e7e6      	b.n	e472 <_printf_i+0x182>
    e4a4:	4615      	mov	r5, r2
    e4a6:	e7bb      	b.n	e420 <_printf_i+0x130>
    e4a8:	682b      	ldr	r3, [r5, #0]
    e4aa:	6826      	ldr	r6, [r4, #0]
    e4ac:	6961      	ldr	r1, [r4, #20]
    e4ae:	1d18      	adds	r0, r3, #4
    e4b0:	6028      	str	r0, [r5, #0]
    e4b2:	0635      	lsls	r5, r6, #24
    e4b4:	681b      	ldr	r3, [r3, #0]
    e4b6:	d501      	bpl.n	e4bc <_printf_i+0x1cc>
    e4b8:	6019      	str	r1, [r3, #0]
    e4ba:	e002      	b.n	e4c2 <_printf_i+0x1d2>
    e4bc:	0670      	lsls	r0, r6, #25
    e4be:	d5fb      	bpl.n	e4b8 <_printf_i+0x1c8>
    e4c0:	8019      	strh	r1, [r3, #0]
    e4c2:	2300      	movs	r3, #0
    e4c4:	6123      	str	r3, [r4, #16]
    e4c6:	4615      	mov	r5, r2
    e4c8:	e7ba      	b.n	e440 <_printf_i+0x150>
    e4ca:	682b      	ldr	r3, [r5, #0]
    e4cc:	1d1a      	adds	r2, r3, #4
    e4ce:	602a      	str	r2, [r5, #0]
    e4d0:	681d      	ldr	r5, [r3, #0]
    e4d2:	6862      	ldr	r2, [r4, #4]
    e4d4:	2100      	movs	r1, #0
    e4d6:	4628      	mov	r0, r5
    e4d8:	f7f1 fe12 	bl	100 <memchr>
    e4dc:	b108      	cbz	r0, e4e2 <_printf_i+0x1f2>
    e4de:	1b40      	subs	r0, r0, r5
    e4e0:	6060      	str	r0, [r4, #4]
    e4e2:	6863      	ldr	r3, [r4, #4]
    e4e4:	6123      	str	r3, [r4, #16]
    e4e6:	2300      	movs	r3, #0
    e4e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    e4ec:	e7a8      	b.n	e440 <_printf_i+0x150>
    e4ee:	6923      	ldr	r3, [r4, #16]
    e4f0:	462a      	mov	r2, r5
    e4f2:	4649      	mov	r1, r9
    e4f4:	4640      	mov	r0, r8
    e4f6:	47d0      	blx	sl
    e4f8:	3001      	adds	r0, #1
    e4fa:	d0ab      	beq.n	e454 <_printf_i+0x164>
    e4fc:	6823      	ldr	r3, [r4, #0]
    e4fe:	079b      	lsls	r3, r3, #30
    e500:	d413      	bmi.n	e52a <_printf_i+0x23a>
    e502:	68e0      	ldr	r0, [r4, #12]
    e504:	9b03      	ldr	r3, [sp, #12]
    e506:	4298      	cmp	r0, r3
    e508:	bfb8      	it	lt
    e50a:	4618      	movlt	r0, r3
    e50c:	e7a4      	b.n	e458 <_printf_i+0x168>
    e50e:	2301      	movs	r3, #1
    e510:	4632      	mov	r2, r6
    e512:	4649      	mov	r1, r9
    e514:	4640      	mov	r0, r8
    e516:	47d0      	blx	sl
    e518:	3001      	adds	r0, #1
    e51a:	d09b      	beq.n	e454 <_printf_i+0x164>
    e51c:	3501      	adds	r5, #1
    e51e:	68e3      	ldr	r3, [r4, #12]
    e520:	9903      	ldr	r1, [sp, #12]
    e522:	1a5b      	subs	r3, r3, r1
    e524:	42ab      	cmp	r3, r5
    e526:	dcf2      	bgt.n	e50e <_printf_i+0x21e>
    e528:	e7eb      	b.n	e502 <_printf_i+0x212>
    e52a:	2500      	movs	r5, #0
    e52c:	f104 0619 	add.w	r6, r4, #25
    e530:	e7f5      	b.n	e51e <_printf_i+0x22e>
    e532:	bf00      	nop
    e534:	0001359c 	.word	0x0001359c
    e538:	000135ad 	.word	0x000135ad

0000e53c <__swbuf_r>:
    e53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e53e:	460e      	mov	r6, r1
    e540:	4614      	mov	r4, r2
    e542:	4605      	mov	r5, r0
    e544:	b118      	cbz	r0, e54e <__swbuf_r+0x12>
    e546:	6983      	ldr	r3, [r0, #24]
    e548:	b90b      	cbnz	r3, e54e <__swbuf_r+0x12>
    e54a:	f7ff f9e7 	bl	d91c <__sinit>
    e54e:	4b21      	ldr	r3, [pc, #132]	; (e5d4 <__swbuf_r+0x98>)
    e550:	429c      	cmp	r4, r3
    e552:	d12b      	bne.n	e5ac <__swbuf_r+0x70>
    e554:	686c      	ldr	r4, [r5, #4]
    e556:	69a3      	ldr	r3, [r4, #24]
    e558:	60a3      	str	r3, [r4, #8]
    e55a:	89a3      	ldrh	r3, [r4, #12]
    e55c:	071a      	lsls	r2, r3, #28
    e55e:	d52f      	bpl.n	e5c0 <__swbuf_r+0x84>
    e560:	6923      	ldr	r3, [r4, #16]
    e562:	b36b      	cbz	r3, e5c0 <__swbuf_r+0x84>
    e564:	6923      	ldr	r3, [r4, #16]
    e566:	6820      	ldr	r0, [r4, #0]
    e568:	1ac0      	subs	r0, r0, r3
    e56a:	6963      	ldr	r3, [r4, #20]
    e56c:	b2f6      	uxtb	r6, r6
    e56e:	4283      	cmp	r3, r0
    e570:	4637      	mov	r7, r6
    e572:	dc04      	bgt.n	e57e <__swbuf_r+0x42>
    e574:	4621      	mov	r1, r4
    e576:	4628      	mov	r0, r5
    e578:	f000 f962 	bl	e840 <_fflush_r>
    e57c:	bb30      	cbnz	r0, e5cc <__swbuf_r+0x90>
    e57e:	68a3      	ldr	r3, [r4, #8]
    e580:	3b01      	subs	r3, #1
    e582:	60a3      	str	r3, [r4, #8]
    e584:	6823      	ldr	r3, [r4, #0]
    e586:	1c5a      	adds	r2, r3, #1
    e588:	6022      	str	r2, [r4, #0]
    e58a:	701e      	strb	r6, [r3, #0]
    e58c:	6963      	ldr	r3, [r4, #20]
    e58e:	3001      	adds	r0, #1
    e590:	4283      	cmp	r3, r0
    e592:	d004      	beq.n	e59e <__swbuf_r+0x62>
    e594:	89a3      	ldrh	r3, [r4, #12]
    e596:	07db      	lsls	r3, r3, #31
    e598:	d506      	bpl.n	e5a8 <__swbuf_r+0x6c>
    e59a:	2e0a      	cmp	r6, #10
    e59c:	d104      	bne.n	e5a8 <__swbuf_r+0x6c>
    e59e:	4621      	mov	r1, r4
    e5a0:	4628      	mov	r0, r5
    e5a2:	f000 f94d 	bl	e840 <_fflush_r>
    e5a6:	b988      	cbnz	r0, e5cc <__swbuf_r+0x90>
    e5a8:	4638      	mov	r0, r7
    e5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e5ac:	4b0a      	ldr	r3, [pc, #40]	; (e5d8 <__swbuf_r+0x9c>)
    e5ae:	429c      	cmp	r4, r3
    e5b0:	d101      	bne.n	e5b6 <__swbuf_r+0x7a>
    e5b2:	68ac      	ldr	r4, [r5, #8]
    e5b4:	e7cf      	b.n	e556 <__swbuf_r+0x1a>
    e5b6:	4b09      	ldr	r3, [pc, #36]	; (e5dc <__swbuf_r+0xa0>)
    e5b8:	429c      	cmp	r4, r3
    e5ba:	bf08      	it	eq
    e5bc:	68ec      	ldreq	r4, [r5, #12]
    e5be:	e7ca      	b.n	e556 <__swbuf_r+0x1a>
    e5c0:	4621      	mov	r1, r4
    e5c2:	4628      	mov	r0, r5
    e5c4:	f000 f81e 	bl	e604 <__swsetup_r>
    e5c8:	2800      	cmp	r0, #0
    e5ca:	d0cb      	beq.n	e564 <__swbuf_r+0x28>
    e5cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    e5d0:	e7ea      	b.n	e5a8 <__swbuf_r+0x6c>
    e5d2:	bf00      	nop
    e5d4:	0001330c 	.word	0x0001330c
    e5d8:	0001332c 	.word	0x0001332c
    e5dc:	000132ec 	.word	0x000132ec

0000e5e0 <_write_r>:
    e5e0:	b538      	push	{r3, r4, r5, lr}
    e5e2:	4d07      	ldr	r5, [pc, #28]	; (e600 <_write_r+0x20>)
    e5e4:	4604      	mov	r4, r0
    e5e6:	4608      	mov	r0, r1
    e5e8:	4611      	mov	r1, r2
    e5ea:	2200      	movs	r2, #0
    e5ec:	602a      	str	r2, [r5, #0]
    e5ee:	461a      	mov	r2, r3
    e5f0:	f000 ff96 	bl	f520 <_write>
    e5f4:	1c43      	adds	r3, r0, #1
    e5f6:	d102      	bne.n	e5fe <_write_r+0x1e>
    e5f8:	682b      	ldr	r3, [r5, #0]
    e5fa:	b103      	cbz	r3, e5fe <_write_r+0x1e>
    e5fc:	6023      	str	r3, [r4, #0]
    e5fe:	bd38      	pop	{r3, r4, r5, pc}
    e600:	2000d538 	.word	0x2000d538

0000e604 <__swsetup_r>:
    e604:	4b32      	ldr	r3, [pc, #200]	; (e6d0 <__swsetup_r+0xcc>)
    e606:	b570      	push	{r4, r5, r6, lr}
    e608:	681d      	ldr	r5, [r3, #0]
    e60a:	4606      	mov	r6, r0
    e60c:	460c      	mov	r4, r1
    e60e:	b125      	cbz	r5, e61a <__swsetup_r+0x16>
    e610:	69ab      	ldr	r3, [r5, #24]
    e612:	b913      	cbnz	r3, e61a <__swsetup_r+0x16>
    e614:	4628      	mov	r0, r5
    e616:	f7ff f981 	bl	d91c <__sinit>
    e61a:	4b2e      	ldr	r3, [pc, #184]	; (e6d4 <__swsetup_r+0xd0>)
    e61c:	429c      	cmp	r4, r3
    e61e:	d10f      	bne.n	e640 <__swsetup_r+0x3c>
    e620:	686c      	ldr	r4, [r5, #4]
    e622:	89a3      	ldrh	r3, [r4, #12]
    e624:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    e628:	0719      	lsls	r1, r3, #28
    e62a:	d42c      	bmi.n	e686 <__swsetup_r+0x82>
    e62c:	06dd      	lsls	r5, r3, #27
    e62e:	d411      	bmi.n	e654 <__swsetup_r+0x50>
    e630:	2309      	movs	r3, #9
    e632:	6033      	str	r3, [r6, #0]
    e634:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    e638:	81a3      	strh	r3, [r4, #12]
    e63a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e63e:	e03e      	b.n	e6be <__swsetup_r+0xba>
    e640:	4b25      	ldr	r3, [pc, #148]	; (e6d8 <__swsetup_r+0xd4>)
    e642:	429c      	cmp	r4, r3
    e644:	d101      	bne.n	e64a <__swsetup_r+0x46>
    e646:	68ac      	ldr	r4, [r5, #8]
    e648:	e7eb      	b.n	e622 <__swsetup_r+0x1e>
    e64a:	4b24      	ldr	r3, [pc, #144]	; (e6dc <__swsetup_r+0xd8>)
    e64c:	429c      	cmp	r4, r3
    e64e:	bf08      	it	eq
    e650:	68ec      	ldreq	r4, [r5, #12]
    e652:	e7e6      	b.n	e622 <__swsetup_r+0x1e>
    e654:	0758      	lsls	r0, r3, #29
    e656:	d512      	bpl.n	e67e <__swsetup_r+0x7a>
    e658:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e65a:	b141      	cbz	r1, e66e <__swsetup_r+0x6a>
    e65c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    e660:	4299      	cmp	r1, r3
    e662:	d002      	beq.n	e66a <__swsetup_r+0x66>
    e664:	4630      	mov	r0, r6
    e666:	f7ff f821 	bl	d6ac <_free_r>
    e66a:	2300      	movs	r3, #0
    e66c:	6363      	str	r3, [r4, #52]	; 0x34
    e66e:	89a3      	ldrh	r3, [r4, #12]
    e670:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    e674:	81a3      	strh	r3, [r4, #12]
    e676:	2300      	movs	r3, #0
    e678:	6063      	str	r3, [r4, #4]
    e67a:	6923      	ldr	r3, [r4, #16]
    e67c:	6023      	str	r3, [r4, #0]
    e67e:	89a3      	ldrh	r3, [r4, #12]
    e680:	f043 0308 	orr.w	r3, r3, #8
    e684:	81a3      	strh	r3, [r4, #12]
    e686:	6923      	ldr	r3, [r4, #16]
    e688:	b94b      	cbnz	r3, e69e <__swsetup_r+0x9a>
    e68a:	89a3      	ldrh	r3, [r4, #12]
    e68c:	f403 7320 	and.w	r3, r3, #640	; 0x280
    e690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    e694:	d003      	beq.n	e69e <__swsetup_r+0x9a>
    e696:	4621      	mov	r1, r4
    e698:	4630      	mov	r0, r6
    e69a:	f000 f931 	bl	e900 <__smakebuf_r>
    e69e:	89a0      	ldrh	r0, [r4, #12]
    e6a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
    e6a4:	f010 0301 	ands.w	r3, r0, #1
    e6a8:	d00a      	beq.n	e6c0 <__swsetup_r+0xbc>
    e6aa:	2300      	movs	r3, #0
    e6ac:	60a3      	str	r3, [r4, #8]
    e6ae:	6963      	ldr	r3, [r4, #20]
    e6b0:	425b      	negs	r3, r3
    e6b2:	61a3      	str	r3, [r4, #24]
    e6b4:	6923      	ldr	r3, [r4, #16]
    e6b6:	b943      	cbnz	r3, e6ca <__swsetup_r+0xc6>
    e6b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
    e6bc:	d1ba      	bne.n	e634 <__swsetup_r+0x30>
    e6be:	bd70      	pop	{r4, r5, r6, pc}
    e6c0:	0781      	lsls	r1, r0, #30
    e6c2:	bf58      	it	pl
    e6c4:	6963      	ldrpl	r3, [r4, #20]
    e6c6:	60a3      	str	r3, [r4, #8]
    e6c8:	e7f4      	b.n	e6b4 <__swsetup_r+0xb0>
    e6ca:	2000      	movs	r0, #0
    e6cc:	e7f7      	b.n	e6be <__swsetup_r+0xba>
    e6ce:	bf00      	nop
    e6d0:	20004104 	.word	0x20004104
    e6d4:	0001330c 	.word	0x0001330c
    e6d8:	0001332c 	.word	0x0001332c
    e6dc:	000132ec 	.word	0x000132ec

0000e6e0 <__assert_func>:
    e6e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    e6e2:	4614      	mov	r4, r2
    e6e4:	461a      	mov	r2, r3
    e6e6:	4b09      	ldr	r3, [pc, #36]	; (e70c <__assert_func+0x2c>)
    e6e8:	681b      	ldr	r3, [r3, #0]
    e6ea:	4605      	mov	r5, r0
    e6ec:	68d8      	ldr	r0, [r3, #12]
    e6ee:	b14c      	cbz	r4, e704 <__assert_func+0x24>
    e6f0:	4b07      	ldr	r3, [pc, #28]	; (e710 <__assert_func+0x30>)
    e6f2:	9100      	str	r1, [sp, #0]
    e6f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
    e6f8:	4906      	ldr	r1, [pc, #24]	; (e714 <__assert_func+0x34>)
    e6fa:	462b      	mov	r3, r5
    e6fc:	f000 f8dc 	bl	e8b8 <fiprintf>
    e700:	f002 fb1b 	bl	10d3a <abort>
    e704:	4b04      	ldr	r3, [pc, #16]	; (e718 <__assert_func+0x38>)
    e706:	461c      	mov	r4, r3
    e708:	e7f3      	b.n	e6f2 <__assert_func+0x12>
    e70a:	bf00      	nop
    e70c:	20004104 	.word	0x20004104
    e710:	000135be 	.word	0x000135be
    e714:	000135cb 	.word	0x000135cb
    e718:	000135f9 	.word	0x000135f9

0000e71c <_close_r>:
    e71c:	b538      	push	{r3, r4, r5, lr}
    e71e:	4d06      	ldr	r5, [pc, #24]	; (e738 <_close_r+0x1c>)
    e720:	2300      	movs	r3, #0
    e722:	4604      	mov	r4, r0
    e724:	4608      	mov	r0, r1
    e726:	602b      	str	r3, [r5, #0]
    e728:	f000 ff00 	bl	f52c <_close>
    e72c:	1c43      	adds	r3, r0, #1
    e72e:	d102      	bne.n	e736 <_close_r+0x1a>
    e730:	682b      	ldr	r3, [r5, #0]
    e732:	b103      	cbz	r3, e736 <_close_r+0x1a>
    e734:	6023      	str	r3, [r4, #0]
    e736:	bd38      	pop	{r3, r4, r5, pc}
    e738:	2000d538 	.word	0x2000d538

0000e73c <__sflush_r>:
    e73c:	898a      	ldrh	r2, [r1, #12]
    e73e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e740:	4605      	mov	r5, r0
    e742:	0710      	lsls	r0, r2, #28
    e744:	460c      	mov	r4, r1
    e746:	d457      	bmi.n	e7f8 <__sflush_r+0xbc>
    e748:	684b      	ldr	r3, [r1, #4]
    e74a:	2b00      	cmp	r3, #0
    e74c:	dc04      	bgt.n	e758 <__sflush_r+0x1c>
    e74e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    e750:	2b00      	cmp	r3, #0
    e752:	dc01      	bgt.n	e758 <__sflush_r+0x1c>
    e754:	2000      	movs	r0, #0
    e756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    e75a:	2e00      	cmp	r6, #0
    e75c:	d0fa      	beq.n	e754 <__sflush_r+0x18>
    e75e:	2300      	movs	r3, #0
    e760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    e764:	682f      	ldr	r7, [r5, #0]
    e766:	602b      	str	r3, [r5, #0]
    e768:	d032      	beq.n	e7d0 <__sflush_r+0x94>
    e76a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    e76c:	89a3      	ldrh	r3, [r4, #12]
    e76e:	075a      	lsls	r2, r3, #29
    e770:	d505      	bpl.n	e77e <__sflush_r+0x42>
    e772:	6863      	ldr	r3, [r4, #4]
    e774:	1ac0      	subs	r0, r0, r3
    e776:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e778:	b10b      	cbz	r3, e77e <__sflush_r+0x42>
    e77a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    e77c:	1ac0      	subs	r0, r0, r3
    e77e:	2300      	movs	r3, #0
    e780:	4602      	mov	r2, r0
    e782:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    e784:	6a21      	ldr	r1, [r4, #32]
    e786:	4628      	mov	r0, r5
    e788:	47b0      	blx	r6
    e78a:	1c43      	adds	r3, r0, #1
    e78c:	89a3      	ldrh	r3, [r4, #12]
    e78e:	d106      	bne.n	e79e <__sflush_r+0x62>
    e790:	6829      	ldr	r1, [r5, #0]
    e792:	291d      	cmp	r1, #29
    e794:	d82c      	bhi.n	e7f0 <__sflush_r+0xb4>
    e796:	4a29      	ldr	r2, [pc, #164]	; (e83c <__sflush_r+0x100>)
    e798:	40ca      	lsrs	r2, r1
    e79a:	07d6      	lsls	r6, r2, #31
    e79c:	d528      	bpl.n	e7f0 <__sflush_r+0xb4>
    e79e:	2200      	movs	r2, #0
    e7a0:	6062      	str	r2, [r4, #4]
    e7a2:	04d9      	lsls	r1, r3, #19
    e7a4:	6922      	ldr	r2, [r4, #16]
    e7a6:	6022      	str	r2, [r4, #0]
    e7a8:	d504      	bpl.n	e7b4 <__sflush_r+0x78>
    e7aa:	1c42      	adds	r2, r0, #1
    e7ac:	d101      	bne.n	e7b2 <__sflush_r+0x76>
    e7ae:	682b      	ldr	r3, [r5, #0]
    e7b0:	b903      	cbnz	r3, e7b4 <__sflush_r+0x78>
    e7b2:	6560      	str	r0, [r4, #84]	; 0x54
    e7b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e7b6:	602f      	str	r7, [r5, #0]
    e7b8:	2900      	cmp	r1, #0
    e7ba:	d0cb      	beq.n	e754 <__sflush_r+0x18>
    e7bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
    e7c0:	4299      	cmp	r1, r3
    e7c2:	d002      	beq.n	e7ca <__sflush_r+0x8e>
    e7c4:	4628      	mov	r0, r5
    e7c6:	f7fe ff71 	bl	d6ac <_free_r>
    e7ca:	2000      	movs	r0, #0
    e7cc:	6360      	str	r0, [r4, #52]	; 0x34
    e7ce:	e7c2      	b.n	e756 <__sflush_r+0x1a>
    e7d0:	6a21      	ldr	r1, [r4, #32]
    e7d2:	2301      	movs	r3, #1
    e7d4:	4628      	mov	r0, r5
    e7d6:	47b0      	blx	r6
    e7d8:	1c41      	adds	r1, r0, #1
    e7da:	d1c7      	bne.n	e76c <__sflush_r+0x30>
    e7dc:	682b      	ldr	r3, [r5, #0]
    e7de:	2b00      	cmp	r3, #0
    e7e0:	d0c4      	beq.n	e76c <__sflush_r+0x30>
    e7e2:	2b1d      	cmp	r3, #29
    e7e4:	d001      	beq.n	e7ea <__sflush_r+0xae>
    e7e6:	2b16      	cmp	r3, #22
    e7e8:	d101      	bne.n	e7ee <__sflush_r+0xb2>
    e7ea:	602f      	str	r7, [r5, #0]
    e7ec:	e7b2      	b.n	e754 <__sflush_r+0x18>
    e7ee:	89a3      	ldrh	r3, [r4, #12]
    e7f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e7f4:	81a3      	strh	r3, [r4, #12]
    e7f6:	e7ae      	b.n	e756 <__sflush_r+0x1a>
    e7f8:	690f      	ldr	r7, [r1, #16]
    e7fa:	2f00      	cmp	r7, #0
    e7fc:	d0aa      	beq.n	e754 <__sflush_r+0x18>
    e7fe:	0793      	lsls	r3, r2, #30
    e800:	680e      	ldr	r6, [r1, #0]
    e802:	bf08      	it	eq
    e804:	694b      	ldreq	r3, [r1, #20]
    e806:	600f      	str	r7, [r1, #0]
    e808:	bf18      	it	ne
    e80a:	2300      	movne	r3, #0
    e80c:	1bf6      	subs	r6, r6, r7
    e80e:	608b      	str	r3, [r1, #8]
    e810:	2e00      	cmp	r6, #0
    e812:	dd9f      	ble.n	e754 <__sflush_r+0x18>
    e814:	6a21      	ldr	r1, [r4, #32]
    e816:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
    e81a:	4633      	mov	r3, r6
    e81c:	463a      	mov	r2, r7
    e81e:	4628      	mov	r0, r5
    e820:	47e0      	blx	ip
    e822:	2800      	cmp	r0, #0
    e824:	dc06      	bgt.n	e834 <__sflush_r+0xf8>
    e826:	89a3      	ldrh	r3, [r4, #12]
    e828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e82c:	81a3      	strh	r3, [r4, #12]
    e82e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e832:	e790      	b.n	e756 <__sflush_r+0x1a>
    e834:	4407      	add	r7, r0
    e836:	1a36      	subs	r6, r6, r0
    e838:	e7ea      	b.n	e810 <__sflush_r+0xd4>
    e83a:	bf00      	nop
    e83c:	20400001 	.word	0x20400001

0000e840 <_fflush_r>:
    e840:	b538      	push	{r3, r4, r5, lr}
    e842:	690b      	ldr	r3, [r1, #16]
    e844:	4605      	mov	r5, r0
    e846:	460c      	mov	r4, r1
    e848:	b913      	cbnz	r3, e850 <_fflush_r+0x10>
    e84a:	2500      	movs	r5, #0
    e84c:	4628      	mov	r0, r5
    e84e:	bd38      	pop	{r3, r4, r5, pc}
    e850:	b118      	cbz	r0, e85a <_fflush_r+0x1a>
    e852:	6983      	ldr	r3, [r0, #24]
    e854:	b90b      	cbnz	r3, e85a <_fflush_r+0x1a>
    e856:	f7ff f861 	bl	d91c <__sinit>
    e85a:	4b14      	ldr	r3, [pc, #80]	; (e8ac <_fflush_r+0x6c>)
    e85c:	429c      	cmp	r4, r3
    e85e:	d11b      	bne.n	e898 <_fflush_r+0x58>
    e860:	686c      	ldr	r4, [r5, #4]
    e862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e866:	2b00      	cmp	r3, #0
    e868:	d0ef      	beq.n	e84a <_fflush_r+0xa>
    e86a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e86c:	07d0      	lsls	r0, r2, #31
    e86e:	d404      	bmi.n	e87a <_fflush_r+0x3a>
    e870:	0599      	lsls	r1, r3, #22
    e872:	d402      	bmi.n	e87a <_fflush_r+0x3a>
    e874:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e876:	f7f8 fa29 	bl	6ccc <__retarget_lock_acquire_recursive>
    e87a:	4628      	mov	r0, r5
    e87c:	4621      	mov	r1, r4
    e87e:	f7ff ff5d 	bl	e73c <__sflush_r>
    e882:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e884:	07da      	lsls	r2, r3, #31
    e886:	4605      	mov	r5, r0
    e888:	d4e0      	bmi.n	e84c <_fflush_r+0xc>
    e88a:	89a3      	ldrh	r3, [r4, #12]
    e88c:	059b      	lsls	r3, r3, #22
    e88e:	d4dd      	bmi.n	e84c <_fflush_r+0xc>
    e890:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e892:	f7f8 fa3b 	bl	6d0c <__retarget_lock_release_recursive>
    e896:	e7d9      	b.n	e84c <_fflush_r+0xc>
    e898:	4b05      	ldr	r3, [pc, #20]	; (e8b0 <_fflush_r+0x70>)
    e89a:	429c      	cmp	r4, r3
    e89c:	d101      	bne.n	e8a2 <_fflush_r+0x62>
    e89e:	68ac      	ldr	r4, [r5, #8]
    e8a0:	e7df      	b.n	e862 <_fflush_r+0x22>
    e8a2:	4b04      	ldr	r3, [pc, #16]	; (e8b4 <_fflush_r+0x74>)
    e8a4:	429c      	cmp	r4, r3
    e8a6:	bf08      	it	eq
    e8a8:	68ec      	ldreq	r4, [r5, #12]
    e8aa:	e7da      	b.n	e862 <_fflush_r+0x22>
    e8ac:	0001330c 	.word	0x0001330c
    e8b0:	0001332c 	.word	0x0001332c
    e8b4:	000132ec 	.word	0x000132ec

0000e8b8 <fiprintf>:
    e8b8:	b40e      	push	{r1, r2, r3}
    e8ba:	b503      	push	{r0, r1, lr}
    e8bc:	4601      	mov	r1, r0
    e8be:	ab03      	add	r3, sp, #12
    e8c0:	4805      	ldr	r0, [pc, #20]	; (e8d8 <fiprintf+0x20>)
    e8c2:	f853 2b04 	ldr.w	r2, [r3], #4
    e8c6:	6800      	ldr	r0, [r0, #0]
    e8c8:	9301      	str	r3, [sp, #4]
    e8ca:	f7ff fbe1 	bl	e090 <_vfiprintf_r>
    e8ce:	b002      	add	sp, #8
    e8d0:	f85d eb04 	ldr.w	lr, [sp], #4
    e8d4:	b003      	add	sp, #12
    e8d6:	4770      	bx	lr
    e8d8:	20004104 	.word	0x20004104

0000e8dc <_lseek_r>:
    e8dc:	b538      	push	{r3, r4, r5, lr}
    e8de:	4d07      	ldr	r5, [pc, #28]	; (e8fc <_lseek_r+0x20>)
    e8e0:	4604      	mov	r4, r0
    e8e2:	4608      	mov	r0, r1
    e8e4:	4611      	mov	r1, r2
    e8e6:	2200      	movs	r2, #0
    e8e8:	602a      	str	r2, [r5, #0]
    e8ea:	461a      	mov	r2, r3
    e8ec:	f000 fe21 	bl	f532 <_lseek>
    e8f0:	1c43      	adds	r3, r0, #1
    e8f2:	d102      	bne.n	e8fa <_lseek_r+0x1e>
    e8f4:	682b      	ldr	r3, [r5, #0]
    e8f6:	b103      	cbz	r3, e8fa <_lseek_r+0x1e>
    e8f8:	6023      	str	r3, [r4, #0]
    e8fa:	bd38      	pop	{r3, r4, r5, pc}
    e8fc:	2000d538 	.word	0x2000d538

0000e900 <__smakebuf_r>:
    e900:	898b      	ldrh	r3, [r1, #12]
    e902:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e904:	079d      	lsls	r5, r3, #30
    e906:	4606      	mov	r6, r0
    e908:	460c      	mov	r4, r1
    e90a:	d507      	bpl.n	e91c <__smakebuf_r+0x1c>
    e90c:	f104 0347 	add.w	r3, r4, #71	; 0x47
    e910:	6023      	str	r3, [r4, #0]
    e912:	6123      	str	r3, [r4, #16]
    e914:	2301      	movs	r3, #1
    e916:	6163      	str	r3, [r4, #20]
    e918:	b002      	add	sp, #8
    e91a:	bd70      	pop	{r4, r5, r6, pc}
    e91c:	ab01      	add	r3, sp, #4
    e91e:	466a      	mov	r2, sp
    e920:	f002 f9e6 	bl	10cf0 <__swhatbuf_r>
    e924:	9900      	ldr	r1, [sp, #0]
    e926:	4605      	mov	r5, r0
    e928:	4630      	mov	r0, r6
    e92a:	f7fe ff09 	bl	d740 <_malloc_r>
    e92e:	b948      	cbnz	r0, e944 <__smakebuf_r+0x44>
    e930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    e934:	059a      	lsls	r2, r3, #22
    e936:	d4ef      	bmi.n	e918 <__smakebuf_r+0x18>
    e938:	f023 0303 	bic.w	r3, r3, #3
    e93c:	f043 0302 	orr.w	r3, r3, #2
    e940:	81a3      	strh	r3, [r4, #12]
    e942:	e7e3      	b.n	e90c <__smakebuf_r+0xc>
    e944:	4b0d      	ldr	r3, [pc, #52]	; (e97c <__smakebuf_r+0x7c>)
    e946:	62b3      	str	r3, [r6, #40]	; 0x28
    e948:	89a3      	ldrh	r3, [r4, #12]
    e94a:	6020      	str	r0, [r4, #0]
    e94c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e950:	81a3      	strh	r3, [r4, #12]
    e952:	9b00      	ldr	r3, [sp, #0]
    e954:	6163      	str	r3, [r4, #20]
    e956:	9b01      	ldr	r3, [sp, #4]
    e958:	6120      	str	r0, [r4, #16]
    e95a:	b15b      	cbz	r3, e974 <__smakebuf_r+0x74>
    e95c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    e960:	4630      	mov	r0, r6
    e962:	f000 f831 	bl	e9c8 <_isatty_r>
    e966:	b128      	cbz	r0, e974 <__smakebuf_r+0x74>
    e968:	89a3      	ldrh	r3, [r4, #12]
    e96a:	f023 0303 	bic.w	r3, r3, #3
    e96e:	f043 0301 	orr.w	r3, r3, #1
    e972:	81a3      	strh	r3, [r4, #12]
    e974:	89a0      	ldrh	r0, [r4, #12]
    e976:	4305      	orrs	r5, r0
    e978:	81a5      	strh	r5, [r4, #12]
    e97a:	e7cd      	b.n	e918 <__smakebuf_r+0x18>
    e97c:	0000d8e1 	.word	0x0000d8e1

0000e980 <_read_r>:
    e980:	b538      	push	{r3, r4, r5, lr}
    e982:	4d07      	ldr	r5, [pc, #28]	; (e9a0 <_read_r+0x20>)
    e984:	4604      	mov	r4, r0
    e986:	4608      	mov	r0, r1
    e988:	4611      	mov	r1, r2
    e98a:	2200      	movs	r2, #0
    e98c:	602a      	str	r2, [r5, #0]
    e98e:	461a      	mov	r2, r3
    e990:	f000 fdc0 	bl	f514 <_read>
    e994:	1c43      	adds	r3, r0, #1
    e996:	d102      	bne.n	e99e <_read_r+0x1e>
    e998:	682b      	ldr	r3, [r5, #0]
    e99a:	b103      	cbz	r3, e99e <_read_r+0x1e>
    e99c:	6023      	str	r3, [r4, #0]
    e99e:	bd38      	pop	{r3, r4, r5, pc}
    e9a0:	2000d538 	.word	0x2000d538

0000e9a4 <_fstat_r>:
    e9a4:	b538      	push	{r3, r4, r5, lr}
    e9a6:	4d07      	ldr	r5, [pc, #28]	; (e9c4 <_fstat_r+0x20>)
    e9a8:	2300      	movs	r3, #0
    e9aa:	4604      	mov	r4, r0
    e9ac:	4608      	mov	r0, r1
    e9ae:	4611      	mov	r1, r2
    e9b0:	602b      	str	r3, [r5, #0]
    e9b2:	f000 fdc9 	bl	f548 <_fstat>
    e9b6:	1c43      	adds	r3, r0, #1
    e9b8:	d102      	bne.n	e9c0 <_fstat_r+0x1c>
    e9ba:	682b      	ldr	r3, [r5, #0]
    e9bc:	b103      	cbz	r3, e9c0 <_fstat_r+0x1c>
    e9be:	6023      	str	r3, [r4, #0]
    e9c0:	bd38      	pop	{r3, r4, r5, pc}
    e9c2:	bf00      	nop
    e9c4:	2000d538 	.word	0x2000d538

0000e9c8 <_isatty_r>:
    e9c8:	b538      	push	{r3, r4, r5, lr}
    e9ca:	4d06      	ldr	r5, [pc, #24]	; (e9e4 <_isatty_r+0x1c>)
    e9cc:	2300      	movs	r3, #0
    e9ce:	4604      	mov	r4, r0
    e9d0:	4608      	mov	r0, r1
    e9d2:	602b      	str	r3, [r5, #0]
    e9d4:	f000 fdaf 	bl	f536 <_isatty>
    e9d8:	1c43      	adds	r3, r0, #1
    e9da:	d102      	bne.n	e9e2 <_isatty_r+0x1a>
    e9dc:	682b      	ldr	r3, [r5, #0]
    e9de:	b103      	cbz	r3, e9e2 <_isatty_r+0x1a>
    e9e0:	6023      	str	r3, [r4, #0]
    e9e2:	bd38      	pop	{r3, r4, r5, pc}
    e9e4:	2000d538 	.word	0x2000d538

0000e9e8 <raise>:
    e9e8:	4b02      	ldr	r3, [pc, #8]	; (e9f4 <raise+0xc>)
    e9ea:	4601      	mov	r1, r0
    e9ec:	6818      	ldr	r0, [r3, #0]
    e9ee:	f002 b9ab 	b.w	10d48 <_raise_r>
    e9f2:	bf00      	nop
    e9f4:	20004104 	.word	0x20004104

0000e9f8 <_kill_r>:
    e9f8:	b538      	push	{r3, r4, r5, lr}
    e9fa:	4d07      	ldr	r5, [pc, #28]	; (ea18 <_kill_r+0x20>)
    e9fc:	2300      	movs	r3, #0
    e9fe:	4604      	mov	r4, r0
    ea00:	4608      	mov	r0, r1
    ea02:	4611      	mov	r1, r2
    ea04:	602b      	str	r3, [r5, #0]
    ea06:	f000 fd9b 	bl	f540 <_kill>
    ea0a:	1c43      	adds	r3, r0, #1
    ea0c:	d102      	bne.n	ea14 <_kill_r+0x1c>
    ea0e:	682b      	ldr	r3, [r5, #0]
    ea10:	b103      	cbz	r3, ea14 <_kill_r+0x1c>
    ea12:	6023      	str	r3, [r4, #0]
    ea14:	bd38      	pop	{r3, r4, r5, pc}
    ea16:	bf00      	nop
    ea18:	2000d538 	.word	0x2000d538

0000ea1c <nrf_cc3xx_platform_init_no_rng>:
    ea1c:	b510      	push	{r4, lr}
    ea1e:	4c0a      	ldr	r4, [pc, #40]	; (ea48 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    ea20:	6823      	ldr	r3, [r4, #0]
    ea22:	b11b      	cbz	r3, ea2c <nrf_cc3xx_platform_init_no_rng+0x10>
    ea24:	2301      	movs	r3, #1
    ea26:	6023      	str	r3, [r4, #0]
    ea28:	2000      	movs	r0, #0
    ea2a:	bd10      	pop	{r4, pc}
    ea2c:	f000 f8ce 	bl	ebcc <CC_LibInitNoRng>
    ea30:	2800      	cmp	r0, #0
    ea32:	d0f7      	beq.n	ea24 <nrf_cc3xx_platform_init_no_rng+0x8>
    ea34:	3801      	subs	r0, #1
    ea36:	2806      	cmp	r0, #6
    ea38:	d803      	bhi.n	ea42 <nrf_cc3xx_platform_init_no_rng+0x26>
    ea3a:	4b04      	ldr	r3, [pc, #16]	; (ea4c <nrf_cc3xx_platform_init_no_rng+0x30>)
    ea3c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    ea40:	bd10      	pop	{r4, pc}
    ea42:	4803      	ldr	r0, [pc, #12]	; (ea50 <nrf_cc3xx_platform_init_no_rng+0x34>)
    ea44:	bd10      	pop	{r4, pc}
    ea46:	bf00      	nop
    ea48:	2000d53c 	.word	0x2000d53c
    ea4c:	00013358 	.word	0x00013358
    ea50:	ffff8ffe 	.word	0xffff8ffe

0000ea54 <nrf_cc3xx_platform_abort>:
    ea54:	f3bf 8f4f 	dsb	sy
    ea58:	4905      	ldr	r1, [pc, #20]	; (ea70 <nrf_cc3xx_platform_abort+0x1c>)
    ea5a:	4b06      	ldr	r3, [pc, #24]	; (ea74 <nrf_cc3xx_platform_abort+0x20>)
    ea5c:	68ca      	ldr	r2, [r1, #12]
    ea5e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    ea62:	4313      	orrs	r3, r2
    ea64:	60cb      	str	r3, [r1, #12]
    ea66:	f3bf 8f4f 	dsb	sy
    ea6a:	bf00      	nop
    ea6c:	e7fd      	b.n	ea6a <nrf_cc3xx_platform_abort+0x16>
    ea6e:	bf00      	nop
    ea70:	e000ed00 	.word	0xe000ed00
    ea74:	05fa0004 	.word	0x05fa0004

0000ea78 <CC_PalAbort>:
    ea78:	b410      	push	{r4}
    ea7a:	4b09      	ldr	r3, [pc, #36]	; (eaa0 <CC_PalAbort+0x28>)
    ea7c:	4909      	ldr	r1, [pc, #36]	; (eaa4 <CC_PalAbort+0x2c>)
    ea7e:	4c0a      	ldr	r4, [pc, #40]	; (eaa8 <CC_PalAbort+0x30>)
    ea80:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    ea84:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    ea88:	6849      	ldr	r1, [r1, #4]
    ea8a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    ea8e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    ea92:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    ea96:	2300      	movs	r3, #0
    ea98:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    ea9c:	bc10      	pop	{r4}
    ea9e:	4708      	bx	r1
    eaa0:	5002b000 	.word	0x5002b000
    eaa4:	20004168 	.word	0x20004168
    eaa8:	5002a000 	.word	0x5002a000

0000eaac <nrf_cc3xx_platform_set_abort>:
    eaac:	e9d0 1200 	ldrd	r1, r2, [r0]
    eab0:	4b01      	ldr	r3, [pc, #4]	; (eab8 <nrf_cc3xx_platform_set_abort+0xc>)
    eab2:	e9c3 1200 	strd	r1, r2, [r3]
    eab6:	4770      	bx	lr
    eab8:	20004168 	.word	0x20004168

0000eabc <mutex_free>:
    eabc:	b510      	push	{r4, lr}
    eabe:	4604      	mov	r4, r0
    eac0:	b130      	cbz	r0, ead0 <mutex_free+0x14>
    eac2:	6863      	ldr	r3, [r4, #4]
    eac4:	06db      	lsls	r3, r3, #27
    eac6:	d502      	bpl.n	eace <mutex_free+0x12>
    eac8:	2300      	movs	r3, #0
    eaca:	6023      	str	r3, [r4, #0]
    eacc:	6063      	str	r3, [r4, #4]
    eace:	bd10      	pop	{r4, pc}
    ead0:	4b02      	ldr	r3, [pc, #8]	; (eadc <mutex_free+0x20>)
    ead2:	4803      	ldr	r0, [pc, #12]	; (eae0 <mutex_free+0x24>)
    ead4:	685b      	ldr	r3, [r3, #4]
    ead6:	4798      	blx	r3
    ead8:	e7f3      	b.n	eac2 <mutex_free+0x6>
    eada:	bf00      	nop
    eadc:	20004168 	.word	0x20004168
    eae0:	00013374 	.word	0x00013374

0000eae4 <mutex_lock>:
    eae4:	b1b0      	cbz	r0, eb14 <mutex_lock+0x30>
    eae6:	6843      	ldr	r3, [r0, #4]
    eae8:	b193      	cbz	r3, eb10 <mutex_lock+0x2c>
    eaea:	06db      	lsls	r3, r3, #27
    eaec:	d50e      	bpl.n	eb0c <mutex_lock+0x28>
    eaee:	2301      	movs	r3, #1
    eaf0:	e850 2f00 	ldrex	r2, [r0]
    eaf4:	4619      	mov	r1, r3
    eaf6:	e840 1c00 	strex	ip, r1, [r0]
    eafa:	f09c 0f00 	teq	ip, #0
    eafe:	d1f7      	bne.n	eaf0 <mutex_lock+0xc>
    eb00:	2a01      	cmp	r2, #1
    eb02:	d0f5      	beq.n	eaf0 <mutex_lock+0xc>
    eb04:	f3bf 8f5f 	dmb	sy
    eb08:	2000      	movs	r0, #0
    eb0a:	4770      	bx	lr
    eb0c:	4803      	ldr	r0, [pc, #12]	; (eb1c <mutex_lock+0x38>)
    eb0e:	4770      	bx	lr
    eb10:	4803      	ldr	r0, [pc, #12]	; (eb20 <mutex_lock+0x3c>)
    eb12:	4770      	bx	lr
    eb14:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    eb18:	4770      	bx	lr
    eb1a:	bf00      	nop
    eb1c:	ffff8fe9 	.word	0xffff8fe9
    eb20:	ffff8fea 	.word	0xffff8fea

0000eb24 <mutex_unlock>:
    eb24:	b168      	cbz	r0, eb42 <mutex_unlock+0x1e>
    eb26:	6843      	ldr	r3, [r0, #4]
    eb28:	b13b      	cbz	r3, eb3a <mutex_unlock+0x16>
    eb2a:	06db      	lsls	r3, r3, #27
    eb2c:	d507      	bpl.n	eb3e <mutex_unlock+0x1a>
    eb2e:	f3bf 8f5f 	dmb	sy
    eb32:	2300      	movs	r3, #0
    eb34:	6003      	str	r3, [r0, #0]
    eb36:	4618      	mov	r0, r3
    eb38:	4770      	bx	lr
    eb3a:	4803      	ldr	r0, [pc, #12]	; (eb48 <mutex_unlock+0x24>)
    eb3c:	4770      	bx	lr
    eb3e:	4803      	ldr	r0, [pc, #12]	; (eb4c <mutex_unlock+0x28>)
    eb40:	4770      	bx	lr
    eb42:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    eb46:	4770      	bx	lr
    eb48:	ffff8fea 	.word	0xffff8fea
    eb4c:	ffff8fe9 	.word	0xffff8fe9

0000eb50 <mutex_init>:
    eb50:	b510      	push	{r4, lr}
    eb52:	4604      	mov	r4, r0
    eb54:	b120      	cbz	r0, eb60 <mutex_init+0x10>
    eb56:	2200      	movs	r2, #0
    eb58:	2311      	movs	r3, #17
    eb5a:	6022      	str	r2, [r4, #0]
    eb5c:	6063      	str	r3, [r4, #4]
    eb5e:	bd10      	pop	{r4, pc}
    eb60:	4801      	ldr	r0, [pc, #4]	; (eb68 <mutex_init+0x18>)
    eb62:	f7ff ff89 	bl	ea78 <CC_PalAbort>
    eb66:	e7f6      	b.n	eb56 <mutex_init+0x6>
    eb68:	0001339c 	.word	0x0001339c

0000eb6c <nrf_cc3xx_platform_set_mutexes>:
    eb6c:	b570      	push	{r4, r5, r6, lr}
    eb6e:	e9d0 2300 	ldrd	r2, r3, [r0]
    eb72:	4c13      	ldr	r4, [pc, #76]	; (ebc0 <nrf_cc3xx_platform_set_mutexes+0x54>)
    eb74:	4d13      	ldr	r5, [pc, #76]	; (ebc4 <nrf_cc3xx_platform_set_mutexes+0x58>)
    eb76:	6063      	str	r3, [r4, #4]
    eb78:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    eb7c:	e9c4 3002 	strd	r3, r0, [r4, #8]
    eb80:	6022      	str	r2, [r4, #0]
    eb82:	4b11      	ldr	r3, [pc, #68]	; (ebc8 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    eb84:	6808      	ldr	r0, [r1, #0]
    eb86:	6018      	str	r0, [r3, #0]
    eb88:	6848      	ldr	r0, [r1, #4]
    eb8a:	6058      	str	r0, [r3, #4]
    eb8c:	6888      	ldr	r0, [r1, #8]
    eb8e:	6098      	str	r0, [r3, #8]
    eb90:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    eb94:	60d8      	str	r0, [r3, #12]
    eb96:	6119      	str	r1, [r3, #16]
    eb98:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    eb9c:	06db      	lsls	r3, r3, #27
    eb9e:	d50d      	bpl.n	ebbc <nrf_cc3xx_platform_set_mutexes+0x50>
    eba0:	2300      	movs	r3, #0
    eba2:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    eba6:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    ebaa:	f505 708a 	add.w	r0, r5, #276	; 0x114
    ebae:	4790      	blx	r2
    ebb0:	6823      	ldr	r3, [r4, #0]
    ebb2:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    ebb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ebba:	4718      	bx	r3
    ebbc:	bd70      	pop	{r4, r5, r6, pc}
    ebbe:	bf00      	nop
    ebc0:	20004178 	.word	0x20004178
    ebc4:	2000d554 	.word	0x2000d554
    ebc8:	20004188 	.word	0x20004188

0000ebcc <CC_LibInitNoRng>:
    ebcc:	b538      	push	{r3, r4, r5, lr}
    ebce:	f000 f82f 	bl	ec30 <CC_HalInit>
    ebd2:	b120      	cbz	r0, ebde <CC_LibInitNoRng+0x12>
    ebd4:	2403      	movs	r4, #3
    ebd6:	f000 f863 	bl	eca0 <CC_PalTerminate>
    ebda:	4620      	mov	r0, r4
    ebdc:	bd38      	pop	{r3, r4, r5, pc}
    ebde:	f000 f831 	bl	ec44 <CC_PalInit>
    ebe2:	b998      	cbnz	r0, ec0c <CC_LibInitNoRng+0x40>
    ebe4:	f000 f8ac 	bl	ed40 <CC_PalPowerSaveModeSelect>
    ebe8:	b998      	cbnz	r0, ec12 <CC_LibInitNoRng+0x46>
    ebea:	4d0f      	ldr	r5, [pc, #60]	; (ec28 <CC_LibInitNoRng+0x5c>)
    ebec:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    ebf0:	0e1b      	lsrs	r3, r3, #24
    ebf2:	2bf0      	cmp	r3, #240	; 0xf0
    ebf4:	d108      	bne.n	ec08 <CC_LibInitNoRng+0x3c>
    ebf6:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    ebfa:	4b0c      	ldr	r3, [pc, #48]	; (ec2c <CC_LibInitNoRng+0x60>)
    ebfc:	429a      	cmp	r2, r3
    ebfe:	d00a      	beq.n	ec16 <CC_LibInitNoRng+0x4a>
    ec00:	2407      	movs	r4, #7
    ec02:	f000 f817 	bl	ec34 <CC_HalTerminate>
    ec06:	e7e6      	b.n	ebd6 <CC_LibInitNoRng+0xa>
    ec08:	2406      	movs	r4, #6
    ec0a:	e7fa      	b.n	ec02 <CC_LibInitNoRng+0x36>
    ec0c:	2404      	movs	r4, #4
    ec0e:	4620      	mov	r0, r4
    ec10:	bd38      	pop	{r3, r4, r5, pc}
    ec12:	2400      	movs	r4, #0
    ec14:	e7f5      	b.n	ec02 <CC_LibInitNoRng+0x36>
    ec16:	2001      	movs	r0, #1
    ec18:	f000 f892 	bl	ed40 <CC_PalPowerSaveModeSelect>
    ec1c:	4604      	mov	r4, r0
    ec1e:	2800      	cmp	r0, #0
    ec20:	d1f7      	bne.n	ec12 <CC_LibInitNoRng+0x46>
    ec22:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    ec26:	e7d8      	b.n	ebda <CC_LibInitNoRng+0xe>
    ec28:	5002b000 	.word	0x5002b000
    ec2c:	20e00000 	.word	0x20e00000

0000ec30 <CC_HalInit>:
    ec30:	2000      	movs	r0, #0
    ec32:	4770      	bx	lr

0000ec34 <CC_HalTerminate>:
    ec34:	2000      	movs	r0, #0
    ec36:	4770      	bx	lr

0000ec38 <CC_HalMaskInterrupt>:
    ec38:	4b01      	ldr	r3, [pc, #4]	; (ec40 <CC_HalMaskInterrupt+0x8>)
    ec3a:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    ec3e:	4770      	bx	lr
    ec40:	5002b000 	.word	0x5002b000

0000ec44 <CC_PalInit>:
    ec44:	b510      	push	{r4, lr}
    ec46:	4811      	ldr	r0, [pc, #68]	; (ec8c <CC_PalInit+0x48>)
    ec48:	f000 f848 	bl	ecdc <CC_PalMutexCreate>
    ec4c:	b100      	cbz	r0, ec50 <CC_PalInit+0xc>
    ec4e:	bd10      	pop	{r4, pc}
    ec50:	480f      	ldr	r0, [pc, #60]	; (ec90 <CC_PalInit+0x4c>)
    ec52:	f000 f843 	bl	ecdc <CC_PalMutexCreate>
    ec56:	2800      	cmp	r0, #0
    ec58:	d1f9      	bne.n	ec4e <CC_PalInit+0xa>
    ec5a:	4c0e      	ldr	r4, [pc, #56]	; (ec94 <CC_PalInit+0x50>)
    ec5c:	4620      	mov	r0, r4
    ec5e:	f000 f83d 	bl	ecdc <CC_PalMutexCreate>
    ec62:	2800      	cmp	r0, #0
    ec64:	d1f3      	bne.n	ec4e <CC_PalInit+0xa>
    ec66:	4b0c      	ldr	r3, [pc, #48]	; (ec98 <CC_PalInit+0x54>)
    ec68:	480c      	ldr	r0, [pc, #48]	; (ec9c <CC_PalInit+0x58>)
    ec6a:	601c      	str	r4, [r3, #0]
    ec6c:	f000 f836 	bl	ecdc <CC_PalMutexCreate>
    ec70:	4601      	mov	r1, r0
    ec72:	2800      	cmp	r0, #0
    ec74:	d1eb      	bne.n	ec4e <CC_PalInit+0xa>
    ec76:	f000 f82d 	bl	ecd4 <CC_PalDmaInit>
    ec7a:	4604      	mov	r4, r0
    ec7c:	b108      	cbz	r0, ec82 <CC_PalInit+0x3e>
    ec7e:	4620      	mov	r0, r4
    ec80:	bd10      	pop	{r4, pc}
    ec82:	f000 f83f 	bl	ed04 <CC_PalPowerSaveModeInit>
    ec86:	4620      	mov	r0, r4
    ec88:	e7fa      	b.n	ec80 <CC_PalInit+0x3c>
    ec8a:	bf00      	nop
    ec8c:	200041c0 	.word	0x200041c0
    ec90:	200041b4 	.word	0x200041b4
    ec94:	200041bc 	.word	0x200041bc
    ec98:	200041c4 	.word	0x200041c4
    ec9c:	200041b8 	.word	0x200041b8

0000eca0 <CC_PalTerminate>:
    eca0:	b508      	push	{r3, lr}
    eca2:	4808      	ldr	r0, [pc, #32]	; (ecc4 <CC_PalTerminate+0x24>)
    eca4:	f000 f824 	bl	ecf0 <CC_PalMutexDestroy>
    eca8:	4807      	ldr	r0, [pc, #28]	; (ecc8 <CC_PalTerminate+0x28>)
    ecaa:	f000 f821 	bl	ecf0 <CC_PalMutexDestroy>
    ecae:	4807      	ldr	r0, [pc, #28]	; (eccc <CC_PalTerminate+0x2c>)
    ecb0:	f000 f81e 	bl	ecf0 <CC_PalMutexDestroy>
    ecb4:	4806      	ldr	r0, [pc, #24]	; (ecd0 <CC_PalTerminate+0x30>)
    ecb6:	f000 f81b 	bl	ecf0 <CC_PalMutexDestroy>
    ecba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ecbe:	f000 b80b 	b.w	ecd8 <CC_PalDmaTerminate>
    ecc2:	bf00      	nop
    ecc4:	200041c0 	.word	0x200041c0
    ecc8:	200041b4 	.word	0x200041b4
    eccc:	200041bc 	.word	0x200041bc
    ecd0:	200041b8 	.word	0x200041b8

0000ecd4 <CC_PalDmaInit>:
    ecd4:	2000      	movs	r0, #0
    ecd6:	4770      	bx	lr

0000ecd8 <CC_PalDmaTerminate>:
    ecd8:	4770      	bx	lr
    ecda:	bf00      	nop

0000ecdc <CC_PalMutexCreate>:
    ecdc:	b508      	push	{r3, lr}
    ecde:	4b03      	ldr	r3, [pc, #12]	; (ecec <CC_PalMutexCreate+0x10>)
    ece0:	6802      	ldr	r2, [r0, #0]
    ece2:	681b      	ldr	r3, [r3, #0]
    ece4:	6810      	ldr	r0, [r2, #0]
    ece6:	4798      	blx	r3
    ece8:	2000      	movs	r0, #0
    ecea:	bd08      	pop	{r3, pc}
    ecec:	20004178 	.word	0x20004178

0000ecf0 <CC_PalMutexDestroy>:
    ecf0:	b508      	push	{r3, lr}
    ecf2:	4b03      	ldr	r3, [pc, #12]	; (ed00 <CC_PalMutexDestroy+0x10>)
    ecf4:	6802      	ldr	r2, [r0, #0]
    ecf6:	685b      	ldr	r3, [r3, #4]
    ecf8:	6810      	ldr	r0, [r2, #0]
    ecfa:	4798      	blx	r3
    ecfc:	2000      	movs	r0, #0
    ecfe:	bd08      	pop	{r3, pc}
    ed00:	20004178 	.word	0x20004178

0000ed04 <CC_PalPowerSaveModeInit>:
    ed04:	b570      	push	{r4, r5, r6, lr}
    ed06:	4c09      	ldr	r4, [pc, #36]	; (ed2c <CC_PalPowerSaveModeInit+0x28>)
    ed08:	4d09      	ldr	r5, [pc, #36]	; (ed30 <CC_PalPowerSaveModeInit+0x2c>)
    ed0a:	6920      	ldr	r0, [r4, #16]
    ed0c:	68ab      	ldr	r3, [r5, #8]
    ed0e:	4798      	blx	r3
    ed10:	b118      	cbz	r0, ed1a <CC_PalPowerSaveModeInit+0x16>
    ed12:	4b08      	ldr	r3, [pc, #32]	; (ed34 <CC_PalPowerSaveModeInit+0x30>)
    ed14:	4808      	ldr	r0, [pc, #32]	; (ed38 <CC_PalPowerSaveModeInit+0x34>)
    ed16:	685b      	ldr	r3, [r3, #4]
    ed18:	4798      	blx	r3
    ed1a:	4a08      	ldr	r2, [pc, #32]	; (ed3c <CC_PalPowerSaveModeInit+0x38>)
    ed1c:	68eb      	ldr	r3, [r5, #12]
    ed1e:	6920      	ldr	r0, [r4, #16]
    ed20:	2100      	movs	r1, #0
    ed22:	6011      	str	r1, [r2, #0]
    ed24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ed28:	4718      	bx	r3
    ed2a:	bf00      	nop
    ed2c:	20004188 	.word	0x20004188
    ed30:	20004178 	.word	0x20004178
    ed34:	20004168 	.word	0x20004168
    ed38:	000133c0 	.word	0x000133c0
    ed3c:	2000d550 	.word	0x2000d550

0000ed40 <CC_PalPowerSaveModeSelect>:
    ed40:	b570      	push	{r4, r5, r6, lr}
    ed42:	4d1b      	ldr	r5, [pc, #108]	; (edb0 <CC_PalPowerSaveModeSelect+0x70>)
    ed44:	4e1b      	ldr	r6, [pc, #108]	; (edb4 <CC_PalPowerSaveModeSelect+0x74>)
    ed46:	4604      	mov	r4, r0
    ed48:	68b2      	ldr	r2, [r6, #8]
    ed4a:	6928      	ldr	r0, [r5, #16]
    ed4c:	4790      	blx	r2
    ed4e:	b9f8      	cbnz	r0, ed90 <CC_PalPowerSaveModeSelect+0x50>
    ed50:	b15c      	cbz	r4, ed6a <CC_PalPowerSaveModeSelect+0x2a>
    ed52:	4c19      	ldr	r4, [pc, #100]	; (edb8 <CC_PalPowerSaveModeSelect+0x78>)
    ed54:	6823      	ldr	r3, [r4, #0]
    ed56:	b1b3      	cbz	r3, ed86 <CC_PalPowerSaveModeSelect+0x46>
    ed58:	2b01      	cmp	r3, #1
    ed5a:	d01b      	beq.n	ed94 <CC_PalPowerSaveModeSelect+0x54>
    ed5c:	3b01      	subs	r3, #1
    ed5e:	6023      	str	r3, [r4, #0]
    ed60:	6928      	ldr	r0, [r5, #16]
    ed62:	68f3      	ldr	r3, [r6, #12]
    ed64:	4798      	blx	r3
    ed66:	2000      	movs	r0, #0
    ed68:	bd70      	pop	{r4, r5, r6, pc}
    ed6a:	4c13      	ldr	r4, [pc, #76]	; (edb8 <CC_PalPowerSaveModeSelect+0x78>)
    ed6c:	6821      	ldr	r1, [r4, #0]
    ed6e:	b941      	cbnz	r1, ed82 <CC_PalPowerSaveModeSelect+0x42>
    ed70:	4b12      	ldr	r3, [pc, #72]	; (edbc <CC_PalPowerSaveModeSelect+0x7c>)
    ed72:	2201      	movs	r2, #1
    ed74:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    ed78:	4a11      	ldr	r2, [pc, #68]	; (edc0 <CC_PalPowerSaveModeSelect+0x80>)
    ed7a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    ed7e:	2b00      	cmp	r3, #0
    ed80:	d1fb      	bne.n	ed7a <CC_PalPowerSaveModeSelect+0x3a>
    ed82:	3101      	adds	r1, #1
    ed84:	6021      	str	r1, [r4, #0]
    ed86:	68f3      	ldr	r3, [r6, #12]
    ed88:	6928      	ldr	r0, [r5, #16]
    ed8a:	4798      	blx	r3
    ed8c:	2000      	movs	r0, #0
    ed8e:	bd70      	pop	{r4, r5, r6, pc}
    ed90:	480c      	ldr	r0, [pc, #48]	; (edc4 <CC_PalPowerSaveModeSelect+0x84>)
    ed92:	bd70      	pop	{r4, r5, r6, pc}
    ed94:	4a0a      	ldr	r2, [pc, #40]	; (edc0 <CC_PalPowerSaveModeSelect+0x80>)
    ed96:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    ed9a:	2b00      	cmp	r3, #0
    ed9c:	d1fb      	bne.n	ed96 <CC_PalPowerSaveModeSelect+0x56>
    ed9e:	4a07      	ldr	r2, [pc, #28]	; (edbc <CC_PalPowerSaveModeSelect+0x7c>)
    eda0:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    eda4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    eda8:	f7ff ff46 	bl	ec38 <CC_HalMaskInterrupt>
    edac:	6823      	ldr	r3, [r4, #0]
    edae:	e7d5      	b.n	ed5c <CC_PalPowerSaveModeSelect+0x1c>
    edb0:	20004188 	.word	0x20004188
    edb4:	20004178 	.word	0x20004178
    edb8:	2000d550 	.word	0x2000d550
    edbc:	5002a000 	.word	0x5002a000
    edc0:	5002b000 	.word	0x5002b000
    edc4:	ffff8fe9 	.word	0xffff8fe9

0000edc8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    edc8:	4770      	bx	lr

0000edca <castImage>:

uint8_t** castImage(uint8_t* img){
    edca:	b570      	push	{r4, r5, r6, lr}
    edcc:	4605      	mov	r5, r0
    uint8_t** image = (uint8_t**)malloc(IMGWIDTH * sizeof(uint8_t*));
    edce:	f44f 7000 	mov.w	r0, #512	; 0x200
    edd2:	f7fe fc5b 	bl	d68c <malloc>
    edd6:	4604      	mov	r4, r0
    for(int i = 0; i < IMGWIDTH; i++){
    edd8:	2600      	movs	r6, #0
    edda:	e005      	b.n	ede8 <castImage+0x1e>
        image[i] = (uint8_t*)malloc(IMGWIDTH * sizeof(uint8_t));
    eddc:	2080      	movs	r0, #128	; 0x80
    edde:	f7fe fc55 	bl	d68c <malloc>
    ede2:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
    for(int i = 0; i < IMGWIDTH; i++){
    ede6:	3601      	adds	r6, #1
    ede8:	2e7f      	cmp	r6, #127	; 0x7f
    edea:	ddf7      	ble.n	eddc <castImage+0x12>
    } 

    for(int i = 0; i < IMGWIDTH; i++){
    edec:	2200      	movs	r2, #0
    edee:	e009      	b.n	ee04 <castImage+0x3a>
        for(int j = 0; j < IMGWIDTH; j++){
            image[i][j] = img[i*IMGWIDTH + j];
    edf0:	eb03 10c2 	add.w	r0, r3, r2, lsl #7
    edf4:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
    edf8:	5c28      	ldrb	r0, [r5, r0]
    edfa:	54c8      	strb	r0, [r1, r3]
        for(int j = 0; j < IMGWIDTH; j++){
    edfc:	3301      	adds	r3, #1
    edfe:	2b7f      	cmp	r3, #127	; 0x7f
    ee00:	ddf6      	ble.n	edf0 <castImage+0x26>
    for(int i = 0; i < IMGWIDTH; i++){
    ee02:	3201      	adds	r2, #1
    ee04:	2a7f      	cmp	r2, #127	; 0x7f
    ee06:	dc01      	bgt.n	ee0c <castImage+0x42>
        for(int j = 0; j < IMGWIDTH; j++){
    ee08:	2300      	movs	r3, #0
    ee0a:	e7f8      	b.n	edfe <castImage+0x34>
        }
    }
    return image;
}
    ee0c:	4620      	mov	r0, r4
    ee0e:	bd70      	pop	{r4, r5, r6, pc}

0000ee10 <open_cab>:
    uint8_t *buffersTaken;
};

// creates a new cab
cab *open_cab(char *name, int num, size_t dim, void *first)
{
    ee10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ee14:	4604      	mov	r4, r0
    ee16:	460e      	mov	r6, r1
    ee18:	4690      	mov	r8, r2
    ee1a:	4699      	mov	r9, r3
    cab *new_cab = calloc(1, sizeof(cab));
    ee1c:	2118      	movs	r1, #24
    ee1e:	2001      	movs	r0, #1
    ee20:	f7fe fbf4 	bl	d60c <calloc>
    ee24:	4605      	mov	r5, r0
    new_cab->name = name;
    ee26:	6044      	str	r4, [r0, #4]
    new_cab->num = num;
    ee28:	6086      	str	r6, [r0, #8]
    new_cab->dim = dim;
    ee2a:	f8c0 800c 	str.w	r8, [r0, #12]
    new_cab->op_Sem = (struct k_sem*)calloc(1, sizeof(struct k_sem));
    ee2e:	2110      	movs	r1, #16
    ee30:	2001      	movs	r0, #1
    ee32:	f7fe fbeb 	bl	d60c <calloc>
    ee36:	6028      	str	r0, [r5, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
    ee38:	2201      	movs	r2, #1
    ee3a:	4611      	mov	r1, r2
    ee3c:	f001 fbe8 	bl	10610 <z_impl_k_sem_init>
    k_sem_init(new_cab->op_Sem, 1, 1);
    // allocate the buffersTaken array
    new_cab->buffersTaken = (uint8_t *)calloc(num, sizeof(uint8_t));
    ee40:	2101      	movs	r1, #1
    ee42:	4630      	mov	r0, r6
    ee44:	f7fe fbe2 	bl	d60c <calloc>
    ee48:	6168      	str	r0, [r5, #20]
    for (size_t i = 0; i < num; i++)
    ee4a:	2400      	movs	r4, #0
    ee4c:	e003      	b.n	ee56 <open_cab+0x46>
        new_cab->buffersTaken[i] = 0;
    ee4e:	696b      	ldr	r3, [r5, #20]
    ee50:	2200      	movs	r2, #0
    ee52:	551a      	strb	r2, [r3, r4]
    for (size_t i = 0; i < num; i++)
    ee54:	3401      	adds	r4, #1
    ee56:	42a6      	cmp	r6, r4
    ee58:	d8f9      	bhi.n	ee4e <open_cab+0x3e>

    // allocate all buffers
    new_cab->buffers = (void **)calloc(num, sizeof(void *));
    ee5a:	2104      	movs	r1, #4
    ee5c:	4630      	mov	r0, r6
    ee5e:	f7fe fbd5 	bl	d60c <calloc>
    ee62:	6128      	str	r0, [r5, #16]
    for (size_t i = 0; i < num; i++)
    ee64:	2400      	movs	r4, #0
    ee66:	e007      	b.n	ee78 <open_cab+0x68>
    {
        new_cab->buffers[i] = (void *)calloc(1, dim);
    ee68:	692f      	ldr	r7, [r5, #16]
    ee6a:	4641      	mov	r1, r8
    ee6c:	2001      	movs	r0, #1
    ee6e:	f7fe fbcd 	bl	d60c <calloc>
    ee72:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
    for (size_t i = 0; i < num; i++)
    ee76:	3401      	adds	r4, #1
    ee78:	42a6      	cmp	r6, r4
    ee7a:	d8f5      	bhi.n	ee68 <open_cab+0x58>
    }

    memcpy(new_cab->buffers[0], first, dim);
    ee7c:	692b      	ldr	r3, [r5, #16]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    ee7e:	4642      	mov	r2, r8
    ee80:	4649      	mov	r1, r9
    ee82:	6818      	ldr	r0, [r3, #0]
    ee84:	f001 fc76 	bl	10774 <memcpy>
    new_cab->buffersTaken[0] = 1; // The first will always be taken
    ee88:	696b      	ldr	r3, [r5, #20]
    ee8a:	2201      	movs	r2, #1
    ee8c:	701a      	strb	r2, [r3, #0]
    return new_cab;
}
    ee8e:	4628      	mov	r0, r5
    ee90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ee94 <reserve>:

// returns a new buffer
void *reserve(cab *cab_id)
{
    ee94:	b538      	push	{r3, r4, r5, lr}
    ee96:	4605      	mov	r5, r0
    k_sem_take(cab_id->op_Sem, K_FOREVER);
    ee98:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_sem_take(sem, timeout);
    ee9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ee9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eea2:	f7fc f903 	bl	b0ac <z_impl_k_sem_take>
    // find a free buffer
    for (size_t i = 0; i < cab_id->num; i++)
    eea6:	2400      	movs	r4, #0
    eea8:	e000      	b.n	eeac <reserve+0x18>
    eeaa:	3401      	adds	r4, #1
    eeac:	68ab      	ldr	r3, [r5, #8]
    eeae:	42a3      	cmp	r3, r4
    eeb0:	d90d      	bls.n	eece <reserve+0x3a>
    {
        if (cab_id->buffersTaken[i] == 0)
    eeb2:	696b      	ldr	r3, [r5, #20]
    eeb4:	191a      	adds	r2, r3, r4
    eeb6:	5d1b      	ldrb	r3, [r3, r4]
    eeb8:	2b00      	cmp	r3, #0
    eeba:	d1f6      	bne.n	eeaa <reserve+0x16>
        {
            cab_id->buffersTaken[i] = 1;
    eebc:	2301      	movs	r3, #1
    eebe:	7013      	strb	r3, [r2, #0]
            k_sem_give(cab_id->op_Sem);
    eec0:	6828      	ldr	r0, [r5, #0]
	z_impl_k_sem_give(sem);
    eec2:	f7fc f8af 	bl	b024 <z_impl_k_sem_give>
            return cab_id->buffers[i];
    eec6:	692b      	ldr	r3, [r5, #16]
    eec8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    eecc:	e003      	b.n	eed6 <reserve+0x42>
        }
    }
    k_sem_give(cab_id->op_Sem);
    eece:	6828      	ldr	r0, [r5, #0]
    eed0:	f7fc f8a8 	bl	b024 <z_impl_k_sem_give>
    return NULL;
    eed4:	2000      	movs	r0, #0
}
    eed6:	bd38      	pop	{r3, r4, r5, pc}

0000eed8 <put_mes>:

// puts a filled buffer inside the CAB
void put_mes(void *buf_pointer, cab *cab_id)
{
    eed8:	b570      	push	{r4, r5, r6, lr}
    eeda:	4606      	mov	r6, r0
    eedc:	460d      	mov	r5, r1
    k_sem_take(cab_id->op_Sem, K_FOREVER);
    eede:	6808      	ldr	r0, [r1, #0]
	return z_impl_k_sem_take(sem, timeout);
    eee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    eee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    eee8:	f7fc f8e0 	bl	b0ac <z_impl_k_sem_take>

    for (size_t i = 0; i < cab_id->num; i++)
    eeec:	2400      	movs	r4, #0
    eeee:	e000      	b.n	eef2 <put_mes+0x1a>
    eef0:	3401      	adds	r4, #1
    eef2:	68ab      	ldr	r3, [r5, #8]
    eef4:	42a3      	cmp	r3, r4
    eef6:	d90c      	bls.n	ef12 <put_mes+0x3a>
    {
        if (cab_id->buffers[i] == buf_pointer)
    eef8:	692b      	ldr	r3, [r5, #16]
    eefa:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    eefe:	42b1      	cmp	r1, r6
    ef00:	d1f6      	bne.n	eef0 <put_mes+0x18>
    ef02:	68ea      	ldr	r2, [r5, #12]
    ef04:	6818      	ldr	r0, [r3, #0]
    ef06:	f001 fc35 	bl	10774 <memcpy>
        {
            memcpy(cab_id->buffers[0], cab_id->buffers[i], cab_id->dim);
            cab_id->buffersTaken[i] = 0;
    ef0a:	696b      	ldr	r3, [r5, #20]
    ef0c:	2200      	movs	r2, #0
    ef0e:	551a      	strb	r2, [r3, r4]
    ef10:	e7ee      	b.n	eef0 <put_mes+0x18>
        }
    }
    k_sem_give(cab_id->op_Sem);
    ef12:	6828      	ldr	r0, [r5, #0]
	z_impl_k_sem_give(sem);
    ef14:	f7fc f886 	bl	b024 <z_impl_k_sem_give>
}
    ef18:	bd70      	pop	{r4, r5, r6, pc}

0000ef1a <get_mes>:

// get latest message
void *get_mes(cab *cab_id)
{
    ef1a:	b538      	push	{r3, r4, r5, lr}
    ef1c:	4605      	mov	r5, r0
    k_sem_take(cab_id->op_Sem, K_FOREVER);
    ef1e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_sem_take(sem, timeout);
    ef20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ef24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ef28:	f7fc f8c0 	bl	b0ac <z_impl_k_sem_take>
    // find a free buffer
    for (size_t i = 0; i < cab_id->num; i++)
    ef2c:	2400      	movs	r4, #0
    ef2e:	e000      	b.n	ef32 <get_mes+0x18>
    ef30:	3401      	adds	r4, #1
    ef32:	68ab      	ldr	r3, [r5, #8]
    ef34:	42a3      	cmp	r3, r4
    ef36:	d914      	bls.n	ef62 <get_mes+0x48>
    {
        if (cab_id->buffersTaken[i] == 0)
    ef38:	696b      	ldr	r3, [r5, #20]
    ef3a:	191a      	adds	r2, r3, r4
    ef3c:	5d1b      	ldrb	r3, [r3, r4]
    ef3e:	2b00      	cmp	r3, #0
    ef40:	d1f6      	bne.n	ef30 <get_mes+0x16>
        {
            cab_id->buffersTaken[i] = 1;
    ef42:	2301      	movs	r3, #1
    ef44:	7013      	strb	r3, [r2, #0]
            memcpy(cab_id->buffers[i], cab_id->buffers[0], cab_id->dim);
    ef46:	692b      	ldr	r3, [r5, #16]
    ef48:	68ea      	ldr	r2, [r5, #12]
    ef4a:	6819      	ldr	r1, [r3, #0]
    ef4c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    ef50:	f001 fc10 	bl	10774 <memcpy>
            k_sem_give(cab_id->op_Sem);
    ef54:	6828      	ldr	r0, [r5, #0]
	z_impl_k_sem_give(sem);
    ef56:	f7fc f865 	bl	b024 <z_impl_k_sem_give>
            return cab_id->buffers[i];
    ef5a:	692b      	ldr	r3, [r5, #16]
    ef5c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    ef60:	e003      	b.n	ef6a <get_mes+0x50>
        }
    }
    k_sem_give(cab_id->op_Sem);
    ef62:	6828      	ldr	r0, [r5, #0]
    ef64:	f7fc f85e 	bl	b024 <z_impl_k_sem_give>
    return NULL;
    ef68:	2000      	movs	r0, #0
}
    ef6a:	bd38      	pop	{r3, r4, r5, pc}

0000ef6c <unget>:

// release message to the CAB
void unget(void* mes_pointer, cab *cab_id)
{
    ef6c:	b538      	push	{r3, r4, r5, lr}
    ef6e:	4605      	mov	r5, r0
    ef70:	460c      	mov	r4, r1
    k_sem_take(cab_id->op_Sem, K_FOREVER);
    ef72:	6808      	ldr	r0, [r1, #0]
	return z_impl_k_sem_take(sem, timeout);
    ef74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ef78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ef7c:	f7fc f896 	bl	b0ac <z_impl_k_sem_take>
    for (size_t i = 0; i < cab_id->num; i++)
    ef80:	2300      	movs	r3, #0
    ef82:	e000      	b.n	ef86 <unget+0x1a>
    ef84:	3301      	adds	r3, #1
    ef86:	68a2      	ldr	r2, [r4, #8]
    ef88:	429a      	cmp	r2, r3
    ef8a:	d908      	bls.n	ef9e <unget+0x32>
    {
        if (cab_id->buffers[i] == mes_pointer)
    ef8c:	6922      	ldr	r2, [r4, #16]
    ef8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ef92:	42aa      	cmp	r2, r5
    ef94:	d1f6      	bne.n	ef84 <unget+0x18>
        {
            cab_id->buffersTaken[i] = 0;
    ef96:	6962      	ldr	r2, [r4, #20]
    ef98:	2100      	movs	r1, #0
    ef9a:	54d1      	strb	r1, [r2, r3]
    ef9c:	e7f2      	b.n	ef84 <unget+0x18>
        }
    }
    k_sem_give(cab_id->op_Sem);
    ef9e:	6820      	ldr	r0, [r4, #0]
	z_impl_k_sem_give(sem);
    efa0:	f7fc f840 	bl	b024 <z_impl_k_sem_give>
}
    efa4:	bd38      	pop	{r3, r4, r5, pc}

0000efa6 <cbprintf_via_va_list>:
{
    efa6:	b510      	push	{r4, lr}
    efa8:	460c      	mov	r4, r1
    efaa:	4611      	mov	r1, r2
    efac:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    efae:	9b02      	ldr	r3, [sp, #8]
    efb0:	47a0      	blx	r4
}
    efb2:	bd10      	pop	{r4, pc}

0000efb4 <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    efb4:	b353      	cbz	r3, f00c <cbpprintf_external+0x58>
{
    efb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    efba:	b082      	sub	sp, #8
    efbc:	4607      	mov	r7, r0
    efbe:	4688      	mov	r8, r1
    efc0:	4691      	mov	r9, r2
    efc2:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
    efc4:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = buf[1];
    efc6:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = buf[2];
    efc8:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = buf[3];
    efca:	78db      	ldrb	r3, [r3, #3]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    efcc:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    efd0:	441c      	add	r4, r3
    efd2:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    efd4:	f04f 0a00 	mov.w	sl, #0
    efd8:	e00a      	b.n	eff0 <cbpprintf_external+0x3c>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
    efda:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
    efde:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
    efe2:	4620      	mov	r0, r4
    efe4:	f7f1 ff37 	bl	e56 <strlen>
    efe8:	3001      	adds	r0, #1
    efea:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    efec:	f10a 0a01 	add.w	sl, sl, #1
    eff0:	45b2      	cmp	sl, r6
    eff2:	d3f2      	bcc.n	efda <cbpprintf_external+0x26>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
    eff4:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
    eff8:	9300      	str	r3, [sp, #0]
    effa:	686b      	ldr	r3, [r5, #4]
    effc:	464a      	mov	r2, r9
    effe:	4641      	mov	r1, r8
    f000:	4638      	mov	r0, r7
    f002:	f7ff ffd0 	bl	efa6 <cbprintf_via_va_list>
}
    f006:	b002      	add	sp, #8
    f008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    f00c:	f06f 0015 	mvn.w	r0, #21
}
    f010:	4770      	bx	lr

0000f012 <sys_notify_validate>:
	if (notify == NULL) {
    f012:	4602      	mov	r2, r0
    f014:	b158      	cbz	r0, f02e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    f016:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    f018:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    f01c:	2b01      	cmp	r3, #1
    f01e:	d003      	beq.n	f028 <sys_notify_validate+0x16>
    f020:	2b03      	cmp	r3, #3
    f022:	d107      	bne.n	f034 <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    f024:	6803      	ldr	r3, [r0, #0]
    f026:	b143      	cbz	r3, f03a <sys_notify_validate+0x28>
		notify->result = 0;
    f028:	2000      	movs	r0, #0
    f02a:	6090      	str	r0, [r2, #8]
    f02c:	4770      	bx	lr
		return -EINVAL;
    f02e:	f06f 0015 	mvn.w	r0, #21
    f032:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    f034:	f06f 0015 	mvn.w	r0, #21
    f038:	4770      	bx	lr
			rv = -EINVAL;
    f03a:	f06f 0015 	mvn.w	r0, #21
}
    f03e:	4770      	bx	lr

0000f040 <arch_printk_char_out>:
}
    f040:	2000      	movs	r0, #0
    f042:	4770      	bx	lr

0000f044 <vprintk>:
	ctx->count++;
	return _char_out(c);
}

void vprintk(const char *fmt, va_list ap)
{
    f044:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    f046:	f000 f921 	bl	f28c <z_log_vprintk>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    f04a:	bd08      	pop	{r3, pc}

0000f04c <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    f04c:	b40f      	push	{r0, r1, r2, r3}
    f04e:	b500      	push	{lr}
    f050:	b083      	sub	sp, #12
    f052:	a904      	add	r1, sp, #16
    f054:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    f058:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    f05a:	f7ff fff3 	bl	f044 <vprintk>

	va_end(ap);
}
    f05e:	b003      	add	sp, #12
    f060:	f85d eb04 	ldr.w	lr, [sp], #4
    f064:	b004      	add	sp, #16
    f066:	4770      	bx	lr

0000f068 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    f068:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f06c:	8b81      	ldrh	r1, [r0, #28]
    f06e:	f021 0107 	bic.w	r1, r1, #7
    f072:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    f074:	8381      	strh	r1, [r0, #28]
}
    f076:	4770      	bx	lr

0000f078 <notify_monitors>:
{
    f078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f07c:	4606      	mov	r6, r0
    f07e:	460f      	mov	r7, r1
    f080:	4690      	mov	r8, r2
	return list->head;
    f082:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    f084:	b119      	cbz	r1, f08e <notify_monitors+0x16>
    f086:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    f088:	b131      	cbz	r1, f098 <notify_monitors+0x20>
	return node->next;
    f08a:	680c      	ldr	r4, [r1, #0]
    f08c:	e004      	b.n	f098 <notify_monitors+0x20>
    f08e:	460c      	mov	r4, r1
    f090:	e002      	b.n	f098 <notify_monitors+0x20>
    f092:	4623      	mov	r3, r4
    f094:	4621      	mov	r1, r4
    f096:	461c      	mov	r4, r3
    f098:	b159      	cbz	r1, f0b2 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    f09a:	684d      	ldr	r5, [r1, #4]
    f09c:	4643      	mov	r3, r8
    f09e:	463a      	mov	r2, r7
    f0a0:	4630      	mov	r0, r6
    f0a2:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    f0a4:	2c00      	cmp	r4, #0
    f0a6:	d0f4      	beq.n	f092 <notify_monitors+0x1a>
    f0a8:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    f0aa:	2c00      	cmp	r4, #0
    f0ac:	d0f2      	beq.n	f094 <notify_monitors+0x1c>
	return node->next;
    f0ae:	6823      	ldr	r3, [r4, #0]
    f0b0:	e7f0      	b.n	f094 <notify_monitors+0x1c>
}
    f0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f0b6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f0b6:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    f0b8:	f013 0307 	ands.w	r3, r3, #7
    f0bc:	d103      	bne.n	f0c6 <process_recheck+0x10>
	return list->head;
    f0be:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    f0c0:	b10a      	cbz	r2, f0c6 <process_recheck+0x10>
		evt = EVT_START;
    f0c2:	2003      	movs	r0, #3
    f0c4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    f0c6:	2b02      	cmp	r3, #2
    f0c8:	d003      	beq.n	f0d2 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    f0ca:	2b01      	cmp	r3, #1
    f0cc:	d006      	beq.n	f0dc <process_recheck+0x26>
	int evt = EVT_NOP;
    f0ce:	2000      	movs	r0, #0
    f0d0:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    f0d2:	8bc2      	ldrh	r2, [r0, #30]
    f0d4:	2a00      	cmp	r2, #0
    f0d6:	d1f8      	bne.n	f0ca <process_recheck+0x14>
		evt = EVT_STOP;
    f0d8:	2004      	movs	r0, #4
    f0da:	4770      	bx	lr
    f0dc:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    f0de:	b10b      	cbz	r3, f0e4 <process_recheck+0x2e>
		evt = EVT_RESET;
    f0e0:	2005      	movs	r0, #5
}
    f0e2:	4770      	bx	lr
	int evt = EVT_NOP;
    f0e4:	2000      	movs	r0, #0
    f0e6:	4770      	bx	lr

0000f0e8 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    f0e8:	b158      	cbz	r0, f102 <validate_args+0x1a>
{
    f0ea:	b510      	push	{r4, lr}
    f0ec:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    f0ee:	b159      	cbz	r1, f108 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    f0f0:	1d08      	adds	r0, r1, #4
    f0f2:	f7ff ff8e 	bl	f012 <sys_notify_validate>
	if ((rv == 0)
    f0f6:	b918      	cbnz	r0, f100 <validate_args+0x18>
	    && ((cli->notify.flags
    f0f8:	68a3      	ldr	r3, [r4, #8]
    f0fa:	f033 0303 	bics.w	r3, r3, #3
    f0fe:	d106      	bne.n	f10e <validate_args+0x26>
}
    f100:	bd10      	pop	{r4, pc}
		return -EINVAL;
    f102:	f06f 0015 	mvn.w	r0, #21
}
    f106:	4770      	bx	lr
		return -EINVAL;
    f108:	f06f 0015 	mvn.w	r0, #21
    f10c:	e7f8      	b.n	f100 <validate_args+0x18>
		rv = -EINVAL;
    f10e:	f06f 0015 	mvn.w	r0, #21
    f112:	e7f5      	b.n	f100 <validate_args+0x18>

0000f114 <notify_one>:
{
    f114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f118:	4607      	mov	r7, r0
    f11a:	460c      	mov	r4, r1
    f11c:	4616      	mov	r6, r2
    f11e:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    f120:	4619      	mov	r1, r3
    f122:	1d20      	adds	r0, r4, #4
    f124:	f7f4 fd0a 	bl	3b3c <sys_notify_finalize>
	if (cb) {
    f128:	b128      	cbz	r0, f136 <notify_one+0x22>
    f12a:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    f12c:	462b      	mov	r3, r5
    f12e:	4632      	mov	r2, r6
    f130:	4621      	mov	r1, r4
    f132:	4638      	mov	r0, r7
    f134:	47c0      	blx	r8
}
    f136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f13a <notify_all>:
{
    f13a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f13e:	4680      	mov	r8, r0
    f140:	460c      	mov	r4, r1
    f142:	4617      	mov	r7, r2
    f144:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    f146:	e004      	b.n	f152 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    f148:	4633      	mov	r3, r6
    f14a:	463a      	mov	r2, r7
    f14c:	4640      	mov	r0, r8
    f14e:	f7ff ffe1 	bl	f114 <notify_one>
    f152:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    f154:	b131      	cbz	r1, f164 <notify_all+0x2a>
	return node->next;
    f156:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    f158:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f15a:	6863      	ldr	r3, [r4, #4]
    f15c:	428b      	cmp	r3, r1
    f15e:	d1f3      	bne.n	f148 <notify_all+0xe>
	list->tail = node;
    f160:	6065      	str	r5, [r4, #4]
}
    f162:	e7f1      	b.n	f148 <notify_all+0xe>
}
    f164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f168 <onoff_manager_init>:
	if ((mgr == NULL)
    f168:	b170      	cbz	r0, f188 <onoff_manager_init+0x20>
{
    f16a:	b538      	push	{r3, r4, r5, lr}
    f16c:	460c      	mov	r4, r1
    f16e:	4605      	mov	r5, r0
	    || (transitions == NULL)
    f170:	b169      	cbz	r1, f18e <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    f172:	680b      	ldr	r3, [r1, #0]
    f174:	b173      	cbz	r3, f194 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    f176:	684b      	ldr	r3, [r1, #4]
    f178:	b17b      	cbz	r3, f19a <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    f17a:	2220      	movs	r2, #32
    f17c:	2100      	movs	r1, #0
    f17e:	f001 fb07 	bl	10790 <memset>
    f182:	612c      	str	r4, [r5, #16]
	return 0;
    f184:	2000      	movs	r0, #0
}
    f186:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    f188:	f06f 0015 	mvn.w	r0, #21
}
    f18c:	4770      	bx	lr
		return -EINVAL;
    f18e:	f06f 0015 	mvn.w	r0, #21
    f192:	e7f8      	b.n	f186 <onoff_manager_init+0x1e>
    f194:	f06f 0015 	mvn.w	r0, #21
    f198:	e7f5      	b.n	f186 <onoff_manager_init+0x1e>
    f19a:	f06f 0015 	mvn.w	r0, #21
    f19e:	e7f2      	b.n	f186 <onoff_manager_init+0x1e>

0000f1a0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    f1a0:	b508      	push	{r3, lr}
    f1a2:	4604      	mov	r4, r0
    f1a4:	4608      	mov	r0, r1
    f1a6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    f1a8:	461a      	mov	r2, r3
    f1aa:	47a0      	blx	r4
	return z_impl_z_current_get();
    f1ac:	f7fd fa66 	bl	c67c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    f1b0:	f7f7 fb5e 	bl	6870 <z_impl_k_thread_abort>

0000f1b4 <free_list_add_bidx>:
{
    f1b4:	b510      	push	{r4, lr}
	if (b->next == 0U) {
    f1b6:	1d13      	adds	r3, r2, #4
    f1b8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    f1bc:	b97c      	cbnz	r4, f1de <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
    f1be:	2301      	movs	r3, #1
    f1c0:	fa03 f402 	lsl.w	r4, r3, r2
    f1c4:	68c3      	ldr	r3, [r0, #12]
    f1c6:	4323      	orrs	r3, r4
    f1c8:	60c3      	str	r3, [r0, #12]
		b->next = c;
    f1ca:	3204      	adds	r2, #4
    f1cc:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    f1d0:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    f1d2:	1d1a      	adds	r2, r3, #4
    f1d4:	b289      	uxth	r1, r1
    f1d6:	5281      	strh	r1, [r0, r2]
    f1d8:	3306      	adds	r3, #6
    f1da:	52c1      	strh	r1, [r0, r3]
}
    f1dc:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    f1de:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    f1e0:	3204      	adds	r2, #4
    f1e2:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    f1e4:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    f1e8:	f10c 0e04 	add.w	lr, ip, #4
    f1ec:	f820 300e 	strh.w	r3, [r0, lr]
    f1f0:	f10c 0c06 	add.w	ip, ip, #6
    f1f4:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    f1f8:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    f1fa:	3306      	adds	r3, #6
    f1fc:	b289      	uxth	r1, r1
    f1fe:	52c1      	strh	r1, [r0, r3]
    f200:	5281      	strh	r1, [r0, r2]
    f202:	e7eb      	b.n	f1dc <free_list_add_bidx+0x28>

0000f204 <free_list_add>:
{
    f204:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    f206:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    f20a:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    f20c:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    f20e:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    f212:	f1c2 021f 	rsb	r2, r2, #31
    f216:	f7ff ffcd 	bl	f1b4 <free_list_add_bidx>
}
    f21a:	bd08      	pop	{r3, pc}

0000f21c <outs>:
{
    f21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f220:	4607      	mov	r7, r0
    f222:	460e      	mov	r6, r1
    f224:	4614      	mov	r4, r2
    f226:	4698      	mov	r8, r3
	size_t count = 0;
    f228:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    f22a:	e006      	b.n	f23a <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    f22c:	4631      	mov	r1, r6
    f22e:	f814 0b01 	ldrb.w	r0, [r4], #1
    f232:	47b8      	blx	r7
		if (rc < 0) {
    f234:	2800      	cmp	r0, #0
    f236:	db09      	blt.n	f24c <outs+0x30>
		++count;
    f238:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    f23a:	4544      	cmp	r4, r8
    f23c:	d3f6      	bcc.n	f22c <outs+0x10>
    f23e:	f1b8 0f00 	cmp.w	r8, #0
    f242:	d102      	bne.n	f24a <outs+0x2e>
    f244:	7823      	ldrb	r3, [r4, #0]
    f246:	2b00      	cmp	r3, #0
    f248:	d1f0      	bne.n	f22c <outs+0x10>
	return (int)count;
    f24a:	4628      	mov	r0, r5
}
    f24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f250 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    f250:	4040      	eors	r0, r0
    f252:	f380 8811 	msr	BASEPRI, r0
    f256:	f04f 0004 	mov.w	r0, #4
    f25a:	df02      	svc	2
}
    f25c:	4770      	bx	lr

0000f25e <assert_print>:

void assert_print(const char *fmt, ...)
{
    f25e:	b40f      	push	{r0, r1, r2, r3}
    f260:	b500      	push	{lr}
    f262:	b083      	sub	sp, #12
    f264:	a904      	add	r1, sp, #16
    f266:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    f26a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    f26c:	f7ff feea 	bl	f044 <vprintk>

	va_end(ap);
}
    f270:	b003      	add	sp, #12
    f272:	f85d eb04 	ldr.w	lr, [sp], #4
    f276:	b004      	add	sp, #16
    f278:	4770      	bx	lr

0000f27a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    f27a:	4770      	bx	lr

0000f27c <dummy_timestamp>:
}
    f27c:	2000      	movs	r0, #0
    f27e:	4770      	bx	lr

0000f280 <msg_filter_check>:
}
    f280:	2001      	movs	r0, #1
    f282:	4770      	bx	lr

0000f284 <default_get_timestamp>:
{
    f284:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    f286:	f001 f833 	bl	102f0 <sys_clock_cycle_get_32>
}
    f28a:	bd08      	pop	{r3, pc}

0000f28c <z_log_vprintk>:
{
    f28c:	b500      	push	{lr}
    f28e:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    f290:	9103      	str	r1, [sp, #12]
    f292:	9002      	str	r0, [sp, #8]
    f294:	2000      	movs	r0, #0
    f296:	9001      	str	r0, [sp, #4]
    f298:	9000      	str	r0, [sp, #0]
    f29a:	4603      	mov	r3, r0
    f29c:	4602      	mov	r2, r0
    f29e:	4601      	mov	r1, r0
    f2a0:	f7f6 f914 	bl	54cc <z_impl_z_log_msg2_runtime_vcreate>
}
    f2a4:	b005      	add	sp, #20
    f2a6:	f85d fb04 	ldr.w	pc, [sp], #4

0000f2aa <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    f2aa:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    f2ac:	f7f5 fde0 	bl	4e70 <log_init>
	}

	return 0;
}
    f2b0:	2000      	movs	r0, #0
    f2b2:	bd08      	pop	{r3, pc}

0000f2b4 <z_log_get_tag>:
}
    f2b4:	2000      	movs	r0, #0
    f2b6:	4770      	bx	lr

0000f2b8 <out_func>:
{
    f2b8:	b500      	push	{lr}
    f2ba:	b083      	sub	sp, #12
		char x = (char)c;
    f2bc:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    f2c0:	680b      	ldr	r3, [r1, #0]
    f2c2:	684a      	ldr	r2, [r1, #4]
    f2c4:	6852      	ldr	r2, [r2, #4]
    f2c6:	2101      	movs	r1, #1
    f2c8:	f10d 0007 	add.w	r0, sp, #7
    f2cc:	4798      	blx	r3
}
    f2ce:	2000      	movs	r0, #0
    f2d0:	b003      	add	sp, #12
    f2d2:	f85d fb04 	ldr.w	pc, [sp], #4

0000f2d6 <cr_out_func>:
{
    f2d6:	b538      	push	{r3, r4, r5, lr}
    f2d8:	4604      	mov	r4, r0
    f2da:	460d      	mov	r5, r1
	out_func(c, ctx);
    f2dc:	f7ff ffec 	bl	f2b8 <out_func>
	if (c == '\n') {
    f2e0:	2c0a      	cmp	r4, #10
    f2e2:	d001      	beq.n	f2e8 <cr_out_func+0x12>
}
    f2e4:	2000      	movs	r0, #0
    f2e6:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    f2e8:	4629      	mov	r1, r5
    f2ea:	200d      	movs	r0, #13
    f2ec:	f7ff ffe4 	bl	f2b8 <out_func>
    f2f0:	e7f8      	b.n	f2e4 <cr_out_func+0xe>

0000f2f2 <buffer_write>:
{
    f2f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f2f4:	4607      	mov	r7, r0
    f2f6:	460d      	mov	r5, r1
    f2f8:	4614      	mov	r4, r2
    f2fa:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    f2fc:	4632      	mov	r2, r6
    f2fe:	4621      	mov	r1, r4
    f300:	4628      	mov	r0, r5
    f302:	47b8      	blx	r7
		buf += processed;
    f304:	4405      	add	r5, r0
	} while (len != 0);
    f306:	1a24      	subs	r4, r4, r0
    f308:	d1f8      	bne.n	f2fc <buffer_write+0xa>
}
    f30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f30c <color_prefix>:
{
    f30c:	b508      	push	{r3, lr}
    f30e:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    f310:	2201      	movs	r2, #1
    f312:	f7f5 ff53 	bl	51bc <color_print>
}
    f316:	bd08      	pop	{r3, pc}

0000f318 <color_postfix>:
{
    f318:	b508      	push	{r3, lr}
    f31a:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    f31c:	2200      	movs	r2, #0
    f31e:	f7f5 ff4d 	bl	51bc <color_print>
}
    f322:	bd08      	pop	{r3, pc}

0000f324 <postfix_print>:
{
    f324:	b538      	push	{r3, r4, r5, lr}
    f326:	4605      	mov	r5, r0
    f328:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    f32a:	f001 0101 	and.w	r1, r1, #1
    f32e:	f7ff fff3 	bl	f318 <color_postfix>
	newline_print(output, flags);
    f332:	4621      	mov	r1, r4
    f334:	4628      	mov	r0, r5
    f336:	f7f5 ff57 	bl	51e8 <newline_print>
}
    f33a:	bd38      	pop	{r3, r4, r5, pc}

0000f33c <log_msg2_hexdump>:
{
    f33c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f340:	b083      	sub	sp, #12
    f342:	4680      	mov	r8, r0
    f344:	460e      	mov	r6, r1
    f346:	4615      	mov	r5, r2
    f348:	461f      	mov	r7, r3
    f34a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    f34e:	462c      	mov	r4, r5
    f350:	2d10      	cmp	r5, #16
    f352:	bf28      	it	cs
    f354:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    f356:	f8cd 9000 	str.w	r9, [sp]
    f35a:	463b      	mov	r3, r7
    f35c:	4622      	mov	r2, r4
    f35e:	4631      	mov	r1, r6
    f360:	4640      	mov	r0, r8
    f362:	f7f5 ff55 	bl	5210 <hexdump_line_print>
		data += length;
    f366:	4426      	add	r6, r4
	} while (len);
    f368:	1b2d      	subs	r5, r5, r4
    f36a:	d1f0      	bne.n	f34e <log_msg2_hexdump+0x12>
}
    f36c:	b003      	add	sp, #12
    f36e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000f372 <log_output_flush>:
{
    f372:	b510      	push	{r4, lr}
    f374:	4604      	mov	r4, r0
		     output->control_block->offset,
    f376:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    f378:	6853      	ldr	r3, [r2, #4]
    f37a:	6812      	ldr	r2, [r2, #0]
    f37c:	6881      	ldr	r1, [r0, #8]
    f37e:	6800      	ldr	r0, [r0, #0]
    f380:	f7ff ffb7 	bl	f2f2 <buffer_write>
	output->control_block->offset = 0;
    f384:	6863      	ldr	r3, [r4, #4]
    f386:	2200      	movs	r2, #0
    f388:	601a      	str	r2, [r3, #0]
}
    f38a:	bd10      	pop	{r4, pc}

0000f38c <z_log_msg2_finalize>:
{
    f38c:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    f38e:	b198      	cbz	r0, f3b8 <z_log_msg2_finalize+0x2c>
    f390:	460e      	mov	r6, r1
    f392:	4614      	mov	r4, r2
    f394:	4619      	mov	r1, r3
    f396:	4605      	mov	r5, r0
	if (data) {
    f398:	b143      	cbz	r3, f3ac <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
    f39a:	f100 0310 	add.w	r3, r0, #16
    f39e:	f3c2 2049 	ubfx	r0, r2, #9, #10
    f3a2:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    f3a6:	4418      	add	r0, r3
    f3a8:	f001 f9e4 	bl	10774 <memcpy>
	msg->hdr.desc = desc;
    f3ac:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    f3ae:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
    f3b0:	4628      	mov	r0, r5
    f3b2:	f7f5 fe3f 	bl	5034 <z_log_msg2_commit>
}
    f3b6:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    f3b8:	f7f5 fe1c 	bl	4ff4 <z_log_dropped>
		return;
    f3bc:	e7fb      	b.n	f3b6 <z_log_msg2_finalize+0x2a>

0000f3be <abort_function>:
{
    f3be:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    f3c0:	2000      	movs	r0, #0
    f3c2:	f7f5 fcdb 	bl	4d7c <sys_reboot>

0000f3c6 <z_log_msg2_runtime_create>:
{
    f3c6:	b510      	push	{r4, lr}
    f3c8:	b086      	sub	sp, #24
	va_start(ap, fmt);
    f3ca:	ac0b      	add	r4, sp, #44	; 0x2c
    f3cc:	9405      	str	r4, [sp, #20]
    f3ce:	9403      	str	r4, [sp, #12]
    f3d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f3d2:	9402      	str	r4, [sp, #8]
    f3d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f3d6:	9401      	str	r4, [sp, #4]
    f3d8:	9c08      	ldr	r4, [sp, #32]
    f3da:	9400      	str	r4, [sp, #0]
    f3dc:	f7f6 f876 	bl	54cc <z_impl_z_log_msg2_runtime_vcreate>
}
    f3e0:	b006      	add	sp, #24
    f3e2:	bd10      	pop	{r4, pc}

0000f3e4 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f3e4:	b538      	push	{r3, r4, r5, lr}
    f3e6:	4604      	mov	r4, r0

	if (esf != NULL) {
    f3e8:	460d      	mov	r5, r1
    f3ea:	b111      	cbz	r1, f3f2 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    f3ec:	4608      	mov	r0, r1
    f3ee:	f7f6 fc95 	bl	5d1c <esf_dump>
	}
	z_fatal_error(reason, esf);
    f3f2:	4629      	mov	r1, r5
    f3f4:	4620      	mov	r0, r4
    f3f6:	f7fa ff61 	bl	a2bc <z_fatal_error>
}
    f3fa:	bd38      	pop	{r3, r4, r5, pc}

0000f3fc <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    f3fc:	b508      	push	{r3, lr}
    f3fe:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    f400:	6800      	ldr	r0, [r0, #0]
    f402:	f7ff ffef 	bl	f3e4 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    f406:	bd08      	pop	{r3, pc}

0000f408 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    f408:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    f40a:	2100      	movs	r1, #0
    f40c:	2001      	movs	r0, #1
    f40e:	f7ff ffe9 	bl	f3e4 <z_arm_fatal_error>
}
    f412:	bd08      	pop	{r3, pc}

0000f414 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    f414:	b508      	push	{r3, lr}
	handler();
    f416:	f7f6 fd1d 	bl	5e54 <z_SysNmiOnReset>
	z_arm_int_exit();
    f41a:	f7f6 fe13 	bl	6044 <z_arm_exc_exit>
}
    f41e:	bd08      	pop	{r3, pc}

0000f420 <memory_fault_recoverable>:
}
    f420:	2000      	movs	r0, #0
    f422:	4770      	bx	lr

0000f424 <z_log_msg2_runtime_create>:
{
    f424:	b510      	push	{r4, lr}
    f426:	b086      	sub	sp, #24
	va_start(ap, fmt);
    f428:	ac0b      	add	r4, sp, #44	; 0x2c
    f42a:	9405      	str	r4, [sp, #20]
    f42c:	9403      	str	r4, [sp, #12]
    f42e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f430:	9402      	str	r4, [sp, #8]
    f432:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f434:	9401      	str	r4, [sp, #4]
    f436:	9c08      	ldr	r4, [sp, #32]
    f438:	9400      	str	r4, [sp, #0]
    f43a:	f7f6 f847 	bl	54cc <z_impl_z_log_msg2_runtime_vcreate>
}
    f43e:	b006      	add	sp, #24
    f440:	bd10      	pop	{r4, pc}

0000f442 <fault_handle>:
{
    f442:	b508      	push	{r3, lr}
	*recoverable = false;
    f444:	2300      	movs	r3, #0
    f446:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    f448:	1ecb      	subs	r3, r1, #3
    f44a:	2b09      	cmp	r3, #9
    f44c:	d81a      	bhi.n	f484 <fault_handle+0x42>
    f44e:	e8df f003 	tbb	[pc, r3]
    f452:	0905      	.short	0x0905
    f454:	1919110d 	.word	0x1919110d
    f458:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    f45c:	4611      	mov	r1, r2
    f45e:	f7f7 f843 	bl	64e8 <hard_fault>
}
    f462:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    f464:	2100      	movs	r1, #0
    f466:	f7f6 ff61 	bl	632c <mem_manage_fault>
		break;
    f46a:	e7fa      	b.n	f462 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    f46c:	2100      	movs	r1, #0
    f46e:	f7f6 fdf7 	bl	6060 <bus_fault>
		break;
    f472:	e7f6      	b.n	f462 <fault_handle+0x20>
		reason = usage_fault(esf);
    f474:	f7f6 fe9c 	bl	61b0 <usage_fault>
		break;
    f478:	e7f3      	b.n	f462 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    f47a:	4611      	mov	r1, r2
    f47c:	f7f6 ff22 	bl	62c4 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f480:	2000      	movs	r0, #0
		break;
    f482:	e7ee      	b.n	f462 <fault_handle+0x20>
		reserved_exception(esf, fault);
    f484:	f7f6 ff32 	bl	62ec <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    f488:	2000      	movs	r0, #0
	return reason;
    f48a:	e7ea      	b.n	f462 <fault_handle+0x20>

0000f48c <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    f48c:	6843      	ldr	r3, [r0, #4]
    f48e:	1e5a      	subs	r2, r3, #1
		&&
    f490:	4213      	tst	r3, r2
    f492:	d106      	bne.n	f4a2 <mpu_partition_is_valid+0x16>
		&&
    f494:	2b1f      	cmp	r3, #31
    f496:	d906      	bls.n	f4a6 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    f498:	6803      	ldr	r3, [r0, #0]
		&&
    f49a:	421a      	tst	r2, r3
    f49c:	d005      	beq.n	f4aa <mpu_partition_is_valid+0x1e>
    f49e:	2000      	movs	r0, #0
    f4a0:	4770      	bx	lr
    f4a2:	2000      	movs	r0, #0
    f4a4:	4770      	bx	lr
    f4a6:	2000      	movs	r0, #0
    f4a8:	4770      	bx	lr
    f4aa:	2001      	movs	r0, #1
}
    f4ac:	4770      	bx	lr

0000f4ae <z_log_msg2_runtime_create>:
{
    f4ae:	b510      	push	{r4, lr}
    f4b0:	b086      	sub	sp, #24
	va_start(ap, fmt);
    f4b2:	ac0b      	add	r4, sp, #44	; 0x2c
    f4b4:	9405      	str	r4, [sp, #20]
    f4b6:	9403      	str	r4, [sp, #12]
    f4b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    f4ba:	9402      	str	r4, [sp, #8]
    f4bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f4be:	9401      	str	r4, [sp, #4]
    f4c0:	9c08      	ldr	r4, [sp, #32]
    f4c2:	9400      	str	r4, [sp, #0]
    f4c4:	f7f6 f802 	bl	54cc <z_impl_z_log_msg2_runtime_vcreate>
}
    f4c8:	b006      	add	sp, #24
    f4ca:	bd10      	pop	{r4, pc}

0000f4cc <mpu_configure_region>:
{
    f4cc:	b500      	push	{lr}
    f4ce:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    f4d0:	680b      	ldr	r3, [r1, #0]
    f4d2:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    f4d4:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    f4d6:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    f4d8:	2b20      	cmp	r3, #32
    f4da:	d912      	bls.n	f502 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    f4dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    f4e0:	d811      	bhi.n	f506 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    f4e2:	3b01      	subs	r3, #1
    f4e4:	fab3 f383 	clz	r3, r3
    f4e8:	f1c3 031f 	rsb	r3, r3, #31
    f4ec:	005b      	lsls	r3, r3, #1
    f4ee:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    f4f2:	4313      	orrs	r3, r2
    f4f4:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    f4f6:	a901      	add	r1, sp, #4
    f4f8:	f7f7 fa08 	bl	690c <region_allocate_and_init>
}
    f4fc:	b005      	add	sp, #20
    f4fe:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    f502:	2308      	movs	r3, #8
    f504:	e7f5      	b.n	f4f2 <mpu_configure_region+0x26>
		return REGION_4G;
    f506:	233e      	movs	r3, #62	; 0x3e
    f508:	e7f3      	b.n	f4f2 <mpu_configure_region+0x26>

0000f50a <_stdout_hook_default>:
}
    f50a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f50e:	4770      	bx	lr

0000f510 <_stdin_hook_default>:
}
    f510:	2000      	movs	r0, #0
    f512:	4770      	bx	lr

0000f514 <_read>:
{
    f514:	b508      	push	{r3, lr}
    f516:	4608      	mov	r0, r1
    f518:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
    f51a:	f7f7 fb51 	bl	6bc0 <z_impl_zephyr_read_stdin>
}
    f51e:	bd08      	pop	{r3, pc}

0000f520 <_write>:
{
    f520:	b508      	push	{r3, lr}
    f522:	4608      	mov	r0, r1
    f524:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    f526:	f7f7 fb61 	bl	6bec <z_impl_zephyr_write_stdout>
}
    f52a:	bd08      	pop	{r3, pc}

0000f52c <_close>:
}
    f52c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f530:	4770      	bx	lr

0000f532 <_lseek>:
}
    f532:	2000      	movs	r0, #0
    f534:	4770      	bx	lr

0000f536 <_isatty>:
}
    f536:	2802      	cmp	r0, #2
    f538:	bfcc      	ite	gt
    f53a:	2000      	movgt	r0, #0
    f53c:	2001      	movle	r0, #1
    f53e:	4770      	bx	lr

0000f540 <_kill>:
}
    f540:	2000      	movs	r0, #0
    f542:	4770      	bx	lr

0000f544 <_getpid>:
}
    f544:	2000      	movs	r0, #0
    f546:	4770      	bx	lr

0000f548 <_fstat>:
	st->st_mode = S_IFCHR;
    f548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    f54c:	604b      	str	r3, [r1, #4]
}
    f54e:	2000      	movs	r0, #0
    f550:	4770      	bx	lr

0000f552 <__errno>:
#endif /* CONFIG_MULTITHREADING */

__weak int *__errno(void)
{
    f552:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    f554:	f7fa fe7c 	bl	a250 <z_impl_z_errno>
	return z_errno();
}
    f558:	bd08      	pop	{r3, pc}

0000f55a <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    f55a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    f55e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    f562:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    f566:	2a08      	cmp	r2, #8
    f568:	d001      	beq.n	f56e <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    f56a:	2000      	movs	r0, #0
    f56c:	4770      	bx	lr
                switch(var2)
    f56e:	2b02      	cmp	r3, #2
    f570:	d001      	beq.n	f576 <nrf52_errata_197+0x1c>
                        return false;
    f572:	2000      	movs	r0, #0
    f574:	4770      	bx	lr
                        return true;
    f576:	2001      	movs	r0, #1
    #endif
}
    f578:	4770      	bx	lr

0000f57a <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    f57a:	2806      	cmp	r0, #6
    f57c:	d000      	beq.n	f580 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    f57e:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    f580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f584:	2201      	movs	r2, #1
    f586:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    f58a:	f3bf 8f4f 	dsb	sy
        __WFE();
    f58e:	bf20      	wfe
    while (true)
    f590:	e7fd      	b.n	f58e <pm_state_set+0x14>

0000f592 <pm_state_exit_post_ops>:
    f592:	2300      	movs	r3, #0
    f594:	f383 8811 	msr	BASEPRI, r3
    f598:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    f59c:	4770      	bx	lr

0000f59e <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    f59e:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    f5a0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    f5a4:	0089      	lsls	r1, r1, #2
    f5a6:	3140      	adds	r1, #64	; 0x40
}
    f5a8:	4408      	add	r0, r1
    f5aa:	4770      	bx	lr

0000f5ac <get_sub_config>:
	const struct nrf_clock_control_config *config =
    f5ac:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    f5ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    f5b2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    f5b6:	4770      	bx	lr

0000f5b8 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    f5b8:	6900      	ldr	r0, [r0, #16]
}
    f5ba:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    f5be:	4770      	bx	lr

0000f5c0 <set_off_state>:
	__asm__ volatile(
    f5c0:	f04f 0320 	mov.w	r3, #32
    f5c4:	f3ef 8211 	mrs	r2, BASEPRI
    f5c8:	f383 8812 	msr	BASEPRI_MAX, r3
    f5cc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    f5d0:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    f5d2:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    f5d6:	d001      	beq.n	f5dc <set_off_state+0x1c>
    f5d8:	428b      	cmp	r3, r1
    f5da:	d107      	bne.n	f5ec <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    f5dc:	2301      	movs	r3, #1
    f5de:	6003      	str	r3, [r0, #0]
	int err = 0;
    f5e0:	2000      	movs	r0, #0
	__asm__ volatile(
    f5e2:	f382 8811 	msr	BASEPRI, r2
    f5e6:	f3bf 8f6f 	isb	sy
}
    f5ea:	4770      	bx	lr
		err = -EPERM;
    f5ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f5f0:	e7f7      	b.n	f5e2 <set_off_state+0x22>

0000f5f2 <set_starting_state>:
	__asm__ volatile(
    f5f2:	f04f 0320 	mov.w	r3, #32
    f5f6:	f3ef 8211 	mrs	r2, BASEPRI
    f5fa:	f383 8812 	msr	BASEPRI_MAX, r3
    f5fe:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    f602:	6803      	ldr	r3, [r0, #0]
    f604:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    f608:	f003 0307 	and.w	r3, r3, #7
    f60c:	2b01      	cmp	r3, #1
    f60e:	d008      	beq.n	f622 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    f610:	458c      	cmp	ip, r1
    f612:	d009      	beq.n	f628 <set_starting_state+0x36>
		err = -EPERM;
    f614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    f618:	f382 8811 	msr	BASEPRI, r2
    f61c:	f3bf 8f6f 	isb	sy
}
    f620:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    f622:	6001      	str	r1, [r0, #0]
	int err = 0;
    f624:	2000      	movs	r0, #0
    f626:	e7f7      	b.n	f618 <set_starting_state+0x26>
		err = -EALREADY;
    f628:	f06f 0077 	mvn.w	r0, #119	; 0x77
    f62c:	e7f4      	b.n	f618 <set_starting_state+0x26>

0000f62e <set_on_state>:
	__asm__ volatile(
    f62e:	f04f 0320 	mov.w	r3, #32
    f632:	f3ef 8211 	mrs	r2, BASEPRI
    f636:	f383 8812 	msr	BASEPRI_MAX, r3
    f63a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    f63e:	6803      	ldr	r3, [r0, #0]
    f640:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f644:	f043 0302 	orr.w	r3, r3, #2
    f648:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    f64a:	f382 8811 	msr	BASEPRI, r2
    f64e:	f3bf 8f6f 	isb	sy
}
    f652:	4770      	bx	lr

0000f654 <clkstarted_handle>:
{
    f654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f656:	4606      	mov	r6, r0
    f658:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    f65a:	f7ff ffa0 	bl	f59e <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    f65e:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    f660:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    f662:	2300      	movs	r3, #0
    f664:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    f668:	f7ff ffe1 	bl	f62e <set_on_state>
	if (callback) {
    f66c:	b11d      	cbz	r5, f676 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    f66e:	463a      	mov	r2, r7
    f670:	4621      	mov	r1, r4
    f672:	4630      	mov	r0, r6
    f674:	47a8      	blx	r5
}
    f676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f678 <async_start>:
{
    f678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f67c:	4606      	mov	r6, r0
    f67e:	4690      	mov	r8, r2
    f680:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    f682:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    f684:	4629      	mov	r1, r5
    f686:	f7ff ff8a 	bl	f59e <get_sub_data>
    f68a:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    f68c:	9906      	ldr	r1, [sp, #24]
    f68e:	3008      	adds	r0, #8
    f690:	f7ff ffaf 	bl	f5f2 <set_starting_state>
	if (err < 0) {
    f694:	2800      	cmp	r0, #0
    f696:	db09      	blt.n	f6ac <async_start+0x34>
	subdata->cb = cb;
    f698:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    f69c:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    f69e:	4629      	mov	r1, r5
    f6a0:	4630      	mov	r0, r6
    f6a2:	f7ff ff83 	bl	f5ac <get_sub_config>
    f6a6:	6803      	ldr	r3, [r0, #0]
    f6a8:	4798      	blx	r3
	return 0;
    f6aa:	2000      	movs	r0, #0
}
    f6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f6b0 <api_start>:
{
    f6b0:	b510      	push	{r4, lr}
    f6b2:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    f6b4:	2480      	movs	r4, #128	; 0x80
    f6b6:	9400      	str	r4, [sp, #0]
    f6b8:	f7ff ffde 	bl	f678 <async_start>
}
    f6bc:	b002      	add	sp, #8
    f6be:	bd10      	pop	{r4, pc}

0000f6c0 <onoff_started_callback>:
{
    f6c0:	b510      	push	{r4, lr}
    f6c2:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    f6c4:	b2c9      	uxtb	r1, r1
    f6c6:	f7ff ff77 	bl	f5b8 <get_onoff_manager>
	notify(mgr, 0);
    f6ca:	2100      	movs	r1, #0
    f6cc:	47a0      	blx	r4
}
    f6ce:	bd10      	pop	{r4, pc}

0000f6d0 <hfclk_start>:
{
    f6d0:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    f6d2:	2001      	movs	r0, #1
    f6d4:	f7f9 fbf2 	bl	8ebc <nrfx_clock_start>
}
    f6d8:	bd08      	pop	{r3, pc}

0000f6da <lfclk_start>:
{
    f6da:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    f6dc:	2000      	movs	r0, #0
    f6de:	f7f9 fbed 	bl	8ebc <nrfx_clock_start>
}
    f6e2:	bd08      	pop	{r3, pc}

0000f6e4 <hfclk_stop>:
{
    f6e4:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    f6e6:	2001      	movs	r0, #1
    f6e8:	f7f9 fc5e 	bl	8fa8 <nrfx_clock_stop>
}
    f6ec:	bd08      	pop	{r3, pc}

0000f6ee <lfclk_stop>:
{
    f6ee:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    f6f0:	2000      	movs	r0, #0
    f6f2:	f7f9 fc59 	bl	8fa8 <nrfx_clock_stop>
}
    f6f6:	bd08      	pop	{r3, pc}

0000f6f8 <api_stop>:
{
    f6f8:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    f6fa:	2280      	movs	r2, #128	; 0x80
    f6fc:	f7f7 fbc6 	bl	6e8c <stop>
}
    f700:	bd08      	pop	{r3, pc}

0000f702 <blocking_start_callback>:
{
    f702:	b508      	push	{r3, lr}
    f704:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    f706:	f7fb fc8d 	bl	b024 <z_impl_k_sem_give>
}
    f70a:	bd08      	pop	{r3, pc}

0000f70c <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f70c:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    f710:	f020 0001 	bic.w	r0, r0, #1
    f714:	0540      	lsls	r0, r0, #21
    f716:	0d40      	lsrs	r0, r0, #21
    f718:	f240 2306 	movw	r3, #518	; 0x206
    f71c:	4298      	cmp	r0, r3
    f71e:	d033      	beq.n	f788 <get_drive+0x7c>
    f720:	d816      	bhi.n	f750 <get_drive+0x44>
    f722:	2806      	cmp	r0, #6
    f724:	d02c      	beq.n	f780 <get_drive+0x74>
    f726:	d906      	bls.n	f736 <get_drive+0x2a>
    f728:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    f72c:	d10d      	bne.n	f74a <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    f72e:	2301      	movs	r3, #1
    f730:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f732:	2000      	movs	r0, #0
		break;
    f734:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f736:	b300      	cbz	r0, f77a <get_drive+0x6e>
    f738:	2802      	cmp	r0, #2
    f73a:	d103      	bne.n	f744 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    f73c:	2304      	movs	r3, #4
    f73e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f740:	2000      	movs	r0, #0
		break;
    f742:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f744:	f06f 0015 	mvn.w	r0, #21
    f748:	4770      	bx	lr
    f74a:	f06f 0015 	mvn.w	r0, #21
    f74e:	4770      	bx	lr
    f750:	f240 4302 	movw	r3, #1026	; 0x402
    f754:	4298      	cmp	r0, r3
    f756:	d01b      	beq.n	f790 <get_drive+0x84>
    f758:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    f75c:	d103      	bne.n	f766 <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    f75e:	2303      	movs	r3, #3
    f760:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f762:	2000      	movs	r0, #0
		break;
    f764:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f766:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    f76a:	d103      	bne.n	f774 <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    f76c:	2302      	movs	r3, #2
    f76e:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f770:	2000      	movs	r0, #0
		break;
    f772:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    f774:	f06f 0015 	mvn.w	r0, #21
    f778:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    f77a:	2000      	movs	r0, #0
    f77c:	7008      	strb	r0, [r1, #0]
		break;
    f77e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    f780:	2306      	movs	r3, #6
    f782:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f784:	2000      	movs	r0, #0
		break;
    f786:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    f788:	2307      	movs	r3, #7
    f78a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f78c:	2000      	movs	r0, #0
		break;
    f78e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    f790:	2305      	movs	r3, #5
    f792:	700b      	strb	r3, [r1, #0]
	int err = 0;
    f794:	2000      	movs	r0, #0
}
    f796:	4770      	bx	lr

0000f798 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    f798:	f010 0f10 	tst.w	r0, #16
    f79c:	d104      	bne.n	f7a8 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    f79e:	f010 0f20 	tst.w	r0, #32
    f7a2:	d103      	bne.n	f7ac <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    f7a4:	2000      	movs	r0, #0
    f7a6:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    f7a8:	2003      	movs	r0, #3
    f7aa:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    f7ac:	2001      	movs	r0, #1
}
    f7ae:	4770      	bx	lr

0000f7b0 <gpio_nrfx_port_get_raw>:
	return port->config;
    f7b0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f7b2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    f7b4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    f7b8:	600b      	str	r3, [r1, #0]
}
    f7ba:	2000      	movs	r0, #0
    f7bc:	4770      	bx	lr

0000f7be <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    f7be:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f7c0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    f7c2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    f7c6:	4042      	eors	r2, r0
    f7c8:	400a      	ands	r2, r1
    f7ca:	4042      	eors	r2, r0
    p_reg->OUT = value;
    f7cc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    f7d0:	2000      	movs	r0, #0
    f7d2:	4770      	bx	lr

0000f7d4 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    f7d4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f7d6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    f7d8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    f7dc:	2000      	movs	r0, #0
    f7de:	4770      	bx	lr

0000f7e0 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    f7e0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f7e2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    f7e4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    f7e8:	2000      	movs	r0, #0
    f7ea:	4770      	bx	lr

0000f7ec <gpio_nrfx_port_toggle_bits>:
	return port->config;
    f7ec:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    f7ee:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    f7f0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    f7f4:	404b      	eors	r3, r1
    p_reg->OUT = value;
    f7f6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    f7fa:	2000      	movs	r0, #0
    f7fc:	4770      	bx	lr

0000f7fe <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    f7fe:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    f802:	d007      	beq.n	f814 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    f804:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    f808:	d00d      	beq.n	f826 <get_trigger+0x28>
    f80a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    f80e:	d008      	beq.n	f822 <get_trigger+0x24>
    f810:	2001      	movs	r0, #1
}
    f812:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    f814:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    f818:	d001      	beq.n	f81e <get_trigger+0x20>
    f81a:	2005      	movs	r0, #5
    f81c:	4770      	bx	lr
    f81e:	2004      	movs	r0, #4
    f820:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    f822:	2002      	movs	r0, #2
    f824:	4770      	bx	lr
    f826:	2003      	movs	r0, #3
    f828:	4770      	bx	lr

0000f82a <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    f82a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f82c:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    f82e:	f04f 0120 	mov.w	r1, #32
    f832:	f3ef 8211 	mrs	r2, BASEPRI
    f836:	f381 8812 	msr	BASEPRI_MAX, r1
    f83a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f83e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    f842:	b131      	cbz	r1, f852 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f844:	2100      	movs	r1, #0
    f846:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    f84a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f84e:	2101      	movs	r1, #1
    f850:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    f852:	f382 8811 	msr	BASEPRI, r2
    f856:	f3bf 8f6f 	isb	sy
}
    f85a:	4770      	bx	lr

0000f85c <uarte_nrfx_configure>:
{
    f85c:	b570      	push	{r4, r5, r6, lr}
    f85e:	b082      	sub	sp, #8
    f860:	4606      	mov	r6, r0
    f862:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    f864:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    f866:	794b      	ldrb	r3, [r1, #5]
    f868:	2b01      	cmp	r3, #1
    f86a:	d006      	beq.n	f87a <uarte_nrfx_configure+0x1e>
    f86c:	2b03      	cmp	r3, #3
    f86e:	d011      	beq.n	f894 <uarte_nrfx_configure+0x38>
    f870:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    f874:	4618      	mov	r0, r3
    f876:	b002      	add	sp, #8
    f878:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    f87a:	2300      	movs	r3, #0
    f87c:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    f880:	79a3      	ldrb	r3, [r4, #6]
    f882:	2b03      	cmp	r3, #3
    f884:	d137      	bne.n	f8f6 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    f886:	79e3      	ldrb	r3, [r4, #7]
    f888:	b143      	cbz	r3, f89c <uarte_nrfx_configure+0x40>
    f88a:	2b01      	cmp	r3, #1
    f88c:	d010      	beq.n	f8b0 <uarte_nrfx_configure+0x54>
    f88e:	f06f 0385 	mvn.w	r3, #133	; 0x85
    f892:	e7ef      	b.n	f874 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    f894:	2310      	movs	r3, #16
    f896:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    f89a:	e7f1      	b.n	f880 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    f89c:	2300      	movs	r3, #0
    f89e:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    f8a2:	7923      	ldrb	r3, [r4, #4]
    f8a4:	b143      	cbz	r3, f8b8 <uarte_nrfx_configure+0x5c>
    f8a6:	2b02      	cmp	r3, #2
    f8a8:	d021      	beq.n	f8ee <uarte_nrfx_configure+0x92>
    f8aa:	f06f 0385 	mvn.w	r3, #133	; 0x85
    f8ae:	e7e1      	b.n	f874 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    f8b0:	2301      	movs	r3, #1
    f8b2:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    f8b6:	e7f4      	b.n	f8a2 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    f8b8:	2300      	movs	r3, #0
    f8ba:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    f8be:	6821      	ldr	r1, [r4, #0]
    f8c0:	4630      	mov	r0, r6
    f8c2:	f7f7 feeb 	bl	769c <baudrate_set>
    f8c6:	4603      	mov	r3, r0
    f8c8:	b9c0      	cbnz	r0, f8fc <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    f8ca:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    f8cc:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    f8ce:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    f8d2:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    f8d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    f8da:	4331      	orrs	r1, r6
    f8dc:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    f8de:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    f8e2:	3504      	adds	r5, #4
    f8e4:	e894 0003 	ldmia.w	r4, {r0, r1}
    f8e8:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    f8ec:	e7c2      	b.n	f874 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    f8ee:	230e      	movs	r3, #14
    f8f0:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    f8f4:	e7e3      	b.n	f8be <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    f8f6:	f06f 0385 	mvn.w	r3, #133	; 0x85
    f8fa:	e7bb      	b.n	f874 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    f8fc:	f06f 0385 	mvn.w	r3, #133	; 0x85
    f900:	e7b8      	b.n	f874 <uarte_nrfx_configure+0x18>

0000f902 <uarte_nrfx_config_get>:
{
    f902:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    f904:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    f906:	3304      	adds	r3, #4
    f908:	e893 0003 	ldmia.w	r3, {r0, r1}
    f90c:	e882 0003 	stmia.w	r2, {r0, r1}
}
    f910:	2000      	movs	r0, #0
    f912:	4770      	bx	lr

0000f914 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    f914:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f916:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    f918:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    f91c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    f920:	4770      	bx	lr

0000f922 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    f922:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f924:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    f926:	685b      	ldr	r3, [r3, #4]
    f928:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    f92c:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    f930:	b929      	cbnz	r1, f93e <is_tx_ready+0x1c>
    f932:	b933      	cbnz	r3, f942 <is_tx_ready+0x20>
    f934:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    f938:	b92b      	cbnz	r3, f946 <is_tx_ready+0x24>
    f93a:	2000      	movs	r0, #0
    f93c:	4770      	bx	lr
    f93e:	2001      	movs	r0, #1
    f940:	4770      	bx	lr
    f942:	2000      	movs	r0, #0
    f944:	4770      	bx	lr
    f946:	2001      	movs	r0, #1
}
    f948:	4770      	bx	lr

0000f94a <uarte_enable>:
	struct uarte_nrfx_data *data = dev->data;
    f94a:	6903      	ldr	r3, [r0, #16]
	if (data->async) {
    f94c:	68db      	ldr	r3, [r3, #12]
    f94e:	b123      	cbz	r3, f95a <uarte_enable+0x10>
		bool disabled = data->async->low_power_mask == 0;
    f950:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
		data->async->low_power_mask |= mask;
    f954:	4311      	orrs	r1, r2
    f956:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
	const struct uarte_nrfx_config *config = dev->config;
    f95a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f95c:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    f95e:	2208      	movs	r2, #8
    f960:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    f964:	4770      	bx	lr

0000f966 <tx_start>:
{
    f966:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    f968:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f96a:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    f96c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    f970:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    f974:	2200      	movs	r2, #0
    f976:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    f97a:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    f97e:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    f982:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    f986:	685b      	ldr	r3, [r3, #4]
    f988:	f013 0f10 	tst.w	r3, #16
    f98c:	d102      	bne.n	f994 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    f98e:	2301      	movs	r3, #1
    f990:	60a3      	str	r3, [r4, #8]
}
    f992:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    f994:	2101      	movs	r1, #1
    f996:	f7ff ffd8 	bl	f94a <uarte_enable>
    p_reg->INTENSET = mask;
    f99a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    f99e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    f9a2:	e7f4      	b.n	f98e <tx_start+0x28>

0000f9a4 <uart_disable>:
	const struct uarte_nrfx_config *config = dev->config;
    f9a4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f9a6:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    f9a8:	2200      	movs	r2, #0
    f9aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    f9ae:	4770      	bx	lr

0000f9b0 <uarte_nrfx_rx_counting_init>:
	const struct uarte_nrfx_config *cfg = dev->config;
    f9b0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    f9b2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    f9b4:	2204      	movs	r2, #4
    f9b6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    f9ba:	2000      	movs	r0, #0
    f9bc:	4770      	bx	lr

0000f9be <start_tx_locked>:
{
    f9be:	b538      	push	{r3, r4, r5, lr}
    f9c0:	4605      	mov	r5, r0
    f9c2:	460c      	mov	r4, r1
	if (!is_tx_ready(dev)) {
    f9c4:	f7ff ffad 	bl	f922 <is_tx_ready>
    f9c8:	b920      	cbnz	r0, f9d4 <start_tx_locked+0x16>
		data->async->pending_tx = true;
    f9ca:	68e3      	ldr	r3, [r4, #12]
    f9cc:	2201      	movs	r2, #1
    f9ce:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    f9d2:	bd38      	pop	{r3, r4, r5, pc}
		data->async->pending_tx = false;
    f9d4:	68e3      	ldr	r3, [r4, #12]
    f9d6:	2200      	movs	r2, #0
    f9d8:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    f9dc:	68e3      	ldr	r3, [r4, #12]
    f9de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f9e2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    f9e6:	68e3      	ldr	r3, [r4, #12]
    f9e8:	695a      	ldr	r2, [r3, #20]
    f9ea:	6919      	ldr	r1, [r3, #16]
    f9ec:	4628      	mov	r0, r5
    f9ee:	f7ff ffba 	bl	f966 <tx_start>
}
    f9f2:	e7ee      	b.n	f9d2 <start_tx_locked+0x14>

0000f9f4 <user_callback>:
{
    f9f4:	b508      	push	{r3, lr}
	struct uarte_nrfx_data *data = dev->data;
    f9f6:	6903      	ldr	r3, [r0, #16]
	if (data->async->user_callback) {
    f9f8:	68da      	ldr	r2, [r3, #12]
    f9fa:	6813      	ldr	r3, [r2, #0]
    f9fc:	b10b      	cbz	r3, fa02 <user_callback+0xe>
		data->async->user_callback(dev, evt, data->async->user_data);
    f9fe:	6852      	ldr	r2, [r2, #4]
    fa00:	4798      	blx	r3
}
    fa02:	bd08      	pop	{r3, pc}

0000fa04 <notify_uart_rx_rdy>:
{
    fa04:	b500      	push	{lr}
    fa06:	b087      	sub	sp, #28
	struct uarte_nrfx_data *data = dev->data;
    fa08:	6902      	ldr	r2, [r0, #16]
	struct uart_event evt = {
    fa0a:	2300      	movs	r3, #0
    fa0c:	9301      	str	r3, [sp, #4]
    fa0e:	9302      	str	r3, [sp, #8]
    fa10:	9303      	str	r3, [sp, #12]
    fa12:	9304      	str	r3, [sp, #16]
    fa14:	9305      	str	r3, [sp, #20]
    fa16:	2302      	movs	r3, #2
    fa18:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    fa1c:	68d3      	ldr	r3, [r2, #12]
    fa1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
	struct uart_event evt = {
    fa20:	9202      	str	r2, [sp, #8]
		.data.rx.offset = data->async->rx_offset
    fa22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	struct uart_event evt = {
    fa24:	9303      	str	r3, [sp, #12]
    fa26:	9104      	str	r1, [sp, #16]
	user_callback(dev, &evt);
    fa28:	a901      	add	r1, sp, #4
    fa2a:	f7ff ffe3 	bl	f9f4 <user_callback>
}
    fa2e:	b007      	add	sp, #28
    fa30:	f85d fb04 	ldr.w	pc, [sp], #4

0000fa34 <rx_buf_release>:
	if (*buf) {
    fa34:	680b      	ldr	r3, [r1, #0]
    fa36:	b19b      	cbz	r3, fa60 <rx_buf_release+0x2c>
{
    fa38:	b530      	push	{r4, r5, lr}
    fa3a:	b087      	sub	sp, #28
    fa3c:	460c      	mov	r4, r1
		struct uart_event evt = {
    fa3e:	2500      	movs	r5, #0
    fa40:	9501      	str	r5, [sp, #4]
    fa42:	9502      	str	r5, [sp, #8]
    fa44:	9503      	str	r5, [sp, #12]
    fa46:	9504      	str	r5, [sp, #16]
    fa48:	9505      	str	r5, [sp, #20]
    fa4a:	2304      	movs	r3, #4
    fa4c:	f88d 3004 	strb.w	r3, [sp, #4]
			.data.rx_buf.buf = *buf,
    fa50:	680b      	ldr	r3, [r1, #0]
		struct uart_event evt = {
    fa52:	9302      	str	r3, [sp, #8]
		user_callback(dev, &evt);
    fa54:	a901      	add	r1, sp, #4
    fa56:	f7ff ffcd 	bl	f9f4 <user_callback>
		*buf = NULL;
    fa5a:	6025      	str	r5, [r4, #0]
}
    fa5c:	b007      	add	sp, #28
    fa5e:	bd30      	pop	{r4, r5, pc}
    fa60:	4770      	bx	lr

0000fa62 <notify_rx_disable>:
{
    fa62:	b500      	push	{lr}
    fa64:	b087      	sub	sp, #28
	struct uart_event evt = {
    fa66:	2300      	movs	r3, #0
    fa68:	9301      	str	r3, [sp, #4]
    fa6a:	9302      	str	r3, [sp, #8]
    fa6c:	9303      	str	r3, [sp, #12]
    fa6e:	9304      	str	r3, [sp, #16]
    fa70:	9305      	str	r3, [sp, #20]
    fa72:	2305      	movs	r3, #5
    fa74:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    fa78:	a901      	add	r1, sp, #4
    fa7a:	f7ff ffbb 	bl	f9f4 <user_callback>
}
    fa7e:	b007      	add	sp, #28
    fa80:	f85d fb04 	ldr.w	pc, [sp], #4

0000fa84 <uarte_nrfx_rx_buf_rsp>:
{
    fa84:	b430      	push	{r4, r5}
	struct uarte_nrfx_data *data = dev->data;
    fa86:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    fa88:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    fa8a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    fa8c:	f04f 0020 	mov.w	r0, #32
    fa90:	f3ef 8c11 	mrs	ip, BASEPRI
    fa94:	f380 8812 	msr	BASEPRI_MAX, r0
    fa98:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    fa9c:	68e0      	ldr	r0, [r4, #12]
    fa9e:	6e05      	ldr	r5, [r0, #96]	; 0x60
    faa0:	b1ad      	cbz	r5, face <uarte_nrfx_rx_buf_rsp+0x4a>
	} else if (data->async->rx_next_buf == NULL) {
    faa2:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    faa4:	b9b5      	cbnz	r5, fad4 <uarte_nrfx_rx_buf_rsp+0x50>
		data->async->rx_next_buf = buf;
    faa6:	66c1      	str	r1, [r0, #108]	; 0x6c
		data->async->rx_next_buf_len = len;
    faa8:	68e0      	ldr	r0, [r4, #12]
    faaa:	6702      	str	r2, [r0, #112]	; 0x70
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    faac:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    fab0:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    fab4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    fab8:	f042 0220 	orr.w	r2, r2, #32
    fabc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		err = 0;
    fac0:	2000      	movs	r0, #0
	__asm__ volatile(
    fac2:	f38c 8811 	msr	BASEPRI, ip
    fac6:	f3bf 8f6f 	isb	sy
}
    faca:	bc30      	pop	{r4, r5}
    facc:	4770      	bx	lr
		err = -EACCES;
    face:	f06f 000c 	mvn.w	r0, #12
    fad2:	e7f6      	b.n	fac2 <uarte_nrfx_rx_buf_rsp+0x3e>
		err = -EBUSY;
    fad4:	f06f 000f 	mvn.w	r0, #15
    fad8:	e7f3      	b.n	fac2 <uarte_nrfx_rx_buf_rsp+0x3e>

0000fada <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    fada:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
    fadc:	68d8      	ldr	r0, [r3, #12]
    fade:	b120      	cbz	r0, faea <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
    fae0:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
    fae2:	68db      	ldr	r3, [r3, #12]
    fae4:	605a      	str	r2, [r3, #4]
	return 0;
    fae6:	2000      	movs	r0, #0
    fae8:	4770      	bx	lr
		return -ENOTSUP;
    faea:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    faee:	4770      	bx	lr

0000faf0 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = dev->data;
    faf0:	6902      	ldr	r2, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    faf2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    faf4:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
    faf6:	68d0      	ldr	r0, [r2, #12]
    faf8:	b960      	cbnz	r0, fb14 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fafa:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    fafe:	b160      	cbz	r0, fb1a <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    fb00:	7d52      	ldrb	r2, [r2, #21]
    fb02:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fb04:	2000      	movs	r0, #0
    fb06:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    fb0a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fb0e:	2201      	movs	r2, #1
    fb10:	601a      	str	r2, [r3, #0]
	return 0;
    fb12:	4770      	bx	lr
		return -ENOTSUP;
    fb14:	f06f 0085 	mvn.w	r0, #133	; 0x85
    fb18:	4770      	bx	lr
		return -1;
    fb1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    fb1e:	4770      	bx	lr

0000fb20 <wait_tx_ready>:
{
    fb20:	b570      	push	{r4, r5, r6, lr}
    fb22:	4606      	mov	r6, r0
    fb24:	e014      	b.n	fb50 <wait_tx_ready+0x30>
		if (res) {
    fb26:	b17d      	cbz	r5, fb48 <wait_tx_ready+0x28>
	__asm__ volatile(
    fb28:	f04f 0320 	mov.w	r3, #32
    fb2c:	f3ef 8411 	mrs	r4, BASEPRI
    fb30:	f383 8812 	msr	BASEPRI_MAX, r3
    fb34:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    fb38:	4630      	mov	r0, r6
    fb3a:	f7ff fef2 	bl	f922 <is_tx_ready>
    fb3e:	b9a0      	cbnz	r0, fb6a <wait_tx_ready+0x4a>
	__asm__ volatile(
    fb40:	f384 8811 	msr	BASEPRI, r4
    fb44:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    fb48:	2021      	movs	r0, #33	; 0x21
    fb4a:	2100      	movs	r1, #0
    fb4c:	f7fc fd4a 	bl	c5e4 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    fb50:	2464      	movs	r4, #100	; 0x64
    fb52:	4630      	mov	r0, r6
    fb54:	f7ff fee5 	bl	f922 <is_tx_ready>
    fb58:	4605      	mov	r5, r0
    fb5a:	2800      	cmp	r0, #0
    fb5c:	d1e3      	bne.n	fb26 <wait_tx_ready+0x6>
    fb5e:	2001      	movs	r0, #1
    fb60:	f000 fc7e 	bl	10460 <nrfx_busy_wait>
    fb64:	3c01      	subs	r4, #1
    fb66:	d1f4      	bne.n	fb52 <wait_tx_ready+0x32>
    fb68:	e7dd      	b.n	fb26 <wait_tx_ready+0x6>
}
    fb6a:	4620      	mov	r0, r4
    fb6c:	bd70      	pop	{r4, r5, r6, pc}

0000fb6e <uarte_nrfx_rx_disable>:
{
    fb6e:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    fb70:	6905      	ldr	r5, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    fb72:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    fb74:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    fb76:	68eb      	ldr	r3, [r5, #12]
    fb78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    fb7a:	b1ba      	cbz	r2, fbac <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
    fb7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    fb7e:	b153      	cbz	r3, fb96 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    fb80:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    fb84:	f023 0320 	bic.w	r3, r3, #32
    fb88:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    fb8c:	2300      	movs	r3, #0
    fb8e:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    fb92:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
    fb96:	68e8      	ldr	r0, [r5, #12]
    fb98:	3088      	adds	r0, #136	; 0x88
	z_impl_k_timer_stop(timer);
    fb9a:	f000 fda5 	bl	106e8 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    fb9e:	68eb      	ldr	r3, [r5, #12]
    fba0:	2000      	movs	r0, #0
    fba2:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fba6:	2301      	movs	r3, #1
    fba8:	6063      	str	r3, [r4, #4]
}
    fbaa:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    fbac:	f06f 000d 	mvn.w	r0, #13
    fbb0:	e7fb      	b.n	fbaa <uarte_nrfx_rx_disable+0x3c>

0000fbb2 <error_isr>:
{
    fbb2:	b510      	push	{r4, lr}
    fbb4:	b086      	sub	sp, #24
    fbb6:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    fbb8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    fbba:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    fbbc:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    fbc0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
	struct uart_event evt = {
    fbc4:	2300      	movs	r3, #0
    fbc6:	9301      	str	r3, [sp, #4]
    fbc8:	9302      	str	r3, [sp, #8]
    fbca:	9303      	str	r3, [sp, #12]
    fbcc:	9304      	str	r3, [sp, #16]
    fbce:	9305      	str	r3, [sp, #20]
    fbd0:	2306      	movs	r3, #6
    fbd2:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    fbd6:	f012 0f01 	tst.w	r2, #1
    fbda:	d108      	bne.n	fbee <error_isr+0x3c>
    fbdc:	f012 0f02 	tst.w	r2, #2
    fbe0:	d111      	bne.n	fc06 <error_isr+0x54>
    fbe2:	f012 0f04 	tst.w	r2, #4
    fbe6:	d110      	bne.n	fc0a <error_isr+0x58>
    fbe8:	f002 0208 	and.w	r2, r2, #8
    fbec:	e000      	b.n	fbf0 <error_isr+0x3e>
    fbee:	2201      	movs	r2, #1
	struct uart_event evt = {
    fbf0:	f88d 2008 	strb.w	r2, [sp, #8]
	user_callback(dev, &evt);
    fbf4:	a901      	add	r1, sp, #4
    fbf6:	4620      	mov	r0, r4
    fbf8:	f7ff fefc 	bl	f9f4 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    fbfc:	4620      	mov	r0, r4
    fbfe:	f7ff ffb6 	bl	fb6e <uarte_nrfx_rx_disable>
}
    fc02:	b006      	add	sp, #24
    fc04:	bd10      	pop	{r4, pc}
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    fc06:	2202      	movs	r2, #2
    fc08:	e7f2      	b.n	fbf0 <error_isr+0x3e>
    fc0a:	2204      	movs	r2, #4
    fc0c:	e7f0      	b.n	fbf0 <error_isr+0x3e>

0000fc0e <uarte_nrfx_tx_abort>:
{
    fc0e:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    fc10:	6903      	ldr	r3, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    fc12:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    fc14:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
    fc16:	68da      	ldr	r2, [r3, #12]
    fc18:	6891      	ldr	r1, [r2, #8]
    fc1a:	b151      	cbz	r1, fc32 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
    fc1c:	2400      	movs	r4, #0
    fc1e:	f882 40d4 	strb.w	r4, [r2, #212]	; 0xd4
	k_timer_stop(&data->async->tx_timeout_timer);
    fc22:	68d8      	ldr	r0, [r3, #12]
    fc24:	3028      	adds	r0, #40	; 0x28
    fc26:	f000 fd5f 	bl	106e8 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fc2a:	2301      	movs	r3, #1
    fc2c:	60eb      	str	r3, [r5, #12]
	return 0;
    fc2e:	4620      	mov	r0, r4
}
    fc30:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    fc32:	f06f 000d 	mvn.w	r0, #13
    fc36:	e7fb      	b.n	fc30 <uarte_nrfx_tx_abort+0x22>

0000fc38 <tx_timeout>:
{
    fc38:	b508      	push	{r3, lr}
	return timer->user_data;
    fc3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
	(void) uarte_nrfx_tx_abort(data->dev);
    fc3c:	6818      	ldr	r0, [r3, #0]
    fc3e:	f7ff ffe6 	bl	fc0e <uarte_nrfx_tx_abort>
}
    fc42:	bd08      	pop	{r3, pc}

0000fc44 <rx_timeout>:
{
    fc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc46:	6b44      	ldr	r4, [r0, #52]	; 0x34
	const struct device *dev = data->dev;
    fc48:	6826      	ldr	r6, [r4, #0]
	const struct uarte_nrfx_config *cfg = dev->config;
    fc4a:	6872      	ldr	r2, [r6, #4]
	if (data->async->is_in_irq) {
    fc4c:	68e3      	ldr	r3, [r4, #12]
    fc4e:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
    fc52:	2b00      	cmp	r3, #0
    fc54:	d138      	bne.n	fcc8 <rx_timeout+0x84>
    fc56:	f003 07ff 	and.w	r7, r3, #255	; 0xff
	return config->uarte_regs;
    fc5a:	6813      	ldr	r3, [r2, #0]
    p_reg->INTENCLR = mask;
    fc5c:	2210      	movs	r2, #16
    fc5e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    fc62:	68e3      	ldr	r3, [r4, #12]
    fc64:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    fc68:	6f59      	ldr	r1, [r3, #116]	; 0x74
    fc6a:	4291      	cmp	r1, r2
    fc6c:	d004      	beq.n	fc78 <rx_timeout+0x34>
		data->async->rx_total_byte_cnt = read;
    fc6e:	675a      	str	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    fc70:	68e3      	ldr	r3, [r4, #12]
    fc72:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    fc74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	int32_t len = data->async->rx_total_byte_cnt
    fc78:	68e3      	ldr	r3, [r4, #12]
    fc7a:	6f5d      	ldr	r5, [r3, #116]	; 0x74
		    - data->async->rx_total_user_byte_cnt;
    fc7c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
	if (!HW_RX_COUNTING_ENABLED(data) &&
    fc7e:	1aad      	subs	r5, r5, r2
    fc80:	d423      	bmi.n	fcca <rx_timeout+0x86>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    fc82:	68e3      	ldr	r3, [r4, #12]
    fc84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    fc86:	18a8      	adds	r0, r5, r2
    fc88:	6e59      	ldr	r1, [r3, #100]	; 0x64
    fc8a:	4288      	cmp	r0, r1
    fc8c:	d901      	bls.n	fc92 <rx_timeout+0x4e>
		len = data->async->rx_buf_len - data->async->rx_offset;
    fc8e:	1a8d      	subs	r5, r1, r2
		clipped = true;
    fc90:	2701      	movs	r7, #1
	if (len > 0) {
    fc92:	2d00      	cmp	r5, #0
    fc94:	dd13      	ble.n	fcbe <rx_timeout+0x7a>
		if (clipped ||
    fc96:	b92f      	cbnz	r7, fca4 <rx_timeout+0x60>
			(data->async->rx_timeout_left
    fc98:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
				< data->async->rx_timeout_slab)) {
    fc9c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		if (clipped ||
    fca0:	428a      	cmp	r2, r1
    fca2:	da16      	bge.n	fcd2 <rx_timeout+0x8e>
			notify_uart_rx_rdy(dev, len);
    fca4:	4629      	mov	r1, r5
    fca6:	4630      	mov	r0, r6
    fca8:	f7ff feac 	bl	fa04 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    fcac:	68e2      	ldr	r2, [r4, #12]
    fcae:	6e93      	ldr	r3, [r2, #104]	; 0x68
    fcb0:	442b      	add	r3, r5
    fcb2:	6693      	str	r3, [r2, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    fcb4:	68e2      	ldr	r2, [r4, #12]
    fcb6:	6f93      	ldr	r3, [r2, #120]	; 0x78
    fcb8:	442b      	add	r3, r5
    fcba:	6793      	str	r3, [r2, #120]	; 0x78
		if (clipped) {
    fcbc:	b96f      	cbnz	r7, fcda <rx_timeout+0x96>
	const struct uarte_nrfx_config *config = dev->config;
    fcbe:	6873      	ldr	r3, [r6, #4]
	return config->uarte_regs;
    fcc0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    fcc2:	2210      	movs	r2, #16
    fcc4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    fcc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    fcca:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		len = 0;
    fcce:	2500      	movs	r5, #0
    fcd0:	e7d7      	b.n	fc82 <rx_timeout+0x3e>
			data->async->rx_timeout_left -=
    fcd2:	1a52      	subs	r2, r2, r1
    fcd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    fcd8:	e7f0      	b.n	fcbc <rx_timeout+0x78>
			k_timer_stop(&data->async->rx_timeout_timer);
    fcda:	68e0      	ldr	r0, [r4, #12]
    fcdc:	3088      	adds	r0, #136	; 0x88
    fcde:	f000 fd03 	bl	106e8 <z_impl_k_timer_stop>
}
    fce2:	e7ec      	b.n	fcbe <rx_timeout+0x7a>

0000fce4 <endrx_isr>:
{
    fce4:	b570      	push	{r4, r5, r6, lr}
    fce6:	4605      	mov	r5, r0
	struct uarte_nrfx_data *data = dev->data;
    fce8:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    fcea:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    fcec:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    fcee:	68e3      	ldr	r3, [r4, #12]
    fcf0:	2201      	movs	r2, #1
    fcf2:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	k_timer_stop(&data->async->rx_timeout_timer);
    fcf6:	68e0      	ldr	r0, [r4, #12]
    fcf8:	3088      	adds	r0, #136	; 0x88
	z_impl_k_timer_stop(timer);
    fcfa:	f000 fcf5 	bl	106e8 <z_impl_k_timer_stop>
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    fcfe:	f8d6 253c 	ldr.w	r2, [r6, #1340]	; 0x53c
				data->async->rx_flush_cnt;
    fd02:	68e3      	ldr	r3, [r4, #12]
    fd04:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
	const int rx_amount = nrf_uarte_rx_amount_get(uarte) +
    fd08:	4411      	add	r1, r2
	data->async->rx_flush_cnt = 0;
    fd0a:	2200      	movs	r2, #0
    fd0c:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    fd10:	68e3      	ldr	r3, [r4, #12]
    fd12:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	if (rx_len < 0) {
    fd14:	1a89      	subs	r1, r1, r2
    fd16:	d40b      	bmi.n	fd30 <endrx_isr+0x4c>
	data->async->rx_total_user_byte_cnt += rx_len;
    fd18:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    fd1a:	440a      	add	r2, r1
    fd1c:	679a      	str	r2, [r3, #120]	; 0x78
	if (rx_len > 0) {
    fd1e:	2900      	cmp	r1, #0
    fd20:	dc08      	bgt.n	fd34 <endrx_isr+0x50>
	if (!data->async->rx_enabled) {
    fd22:	68e1      	ldr	r1, [r4, #12]
    fd24:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    fd28:	b943      	cbnz	r3, fd3c <endrx_isr+0x58>
		data->async->is_in_irq = false;
    fd2a:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
}
    fd2e:	bd70      	pop	{r4, r5, r6, pc}
		rx_len = 0;
    fd30:	2100      	movs	r1, #0
    fd32:	e7f1      	b.n	fd18 <endrx_isr+0x34>
		notify_uart_rx_rdy(dev, rx_len);
    fd34:	4628      	mov	r0, r5
    fd36:	f7ff fe65 	bl	fa04 <notify_uart_rx_rdy>
    fd3a:	e7f2      	b.n	fd22 <endrx_isr+0x3e>
	rx_buf_release(dev, &data->async->rx_buf);
    fd3c:	3160      	adds	r1, #96	; 0x60
    fd3e:	4628      	mov	r0, r5
    fd40:	f7ff fe78 	bl	fa34 <rx_buf_release>
	__asm__ volatile(
    fd44:	f04f 0320 	mov.w	r3, #32
    fd48:	f3ef 8111 	mrs	r1, BASEPRI
    fd4c:	f383 8812 	msr	BASEPRI_MAX, r3
    fd50:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    fd54:	68e3      	ldr	r3, [r4, #12]
    fd56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    fd58:	b1f2      	cbz	r2, fd98 <endrx_isr+0xb4>
		data->async->rx_buf = data->async->rx_next_buf;
    fd5a:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    fd5c:	68e3      	ldr	r3, [r4, #12]
    fd5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    fd60:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    fd62:	68e2      	ldr	r2, [r4, #12]
    fd64:	2300      	movs	r3, #0
    fd66:	66d3      	str	r3, [r2, #108]	; 0x6c
		data->async->rx_next_buf_len = 0;
    fd68:	68e2      	ldr	r2, [r4, #12]
    fd6a:	6713      	str	r3, [r2, #112]	; 0x70
		data->async->rx_offset = 0;
    fd6c:	68e2      	ldr	r2, [r4, #12]
    fd6e:	6693      	str	r3, [r2, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    fd70:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    fd74:	b90b      	cbnz	r3, fd7a <endrx_isr+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd76:	2301      	movs	r3, #1
    fd78:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    fd7a:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    fd7e:	f023 0320 	bic.w	r3, r3, #32
    fd82:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    fd86:	f381 8811 	msr	BASEPRI, r1
    fd8a:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    fd8e:	68e3      	ldr	r3, [r4, #12]
    fd90:	2200      	movs	r2, #0
    fd92:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    fd96:	e7ca      	b.n	fd2e <endrx_isr+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fd98:	2301      	movs	r3, #1
    fd9a:	6073      	str	r3, [r6, #4]
}
    fd9c:	e7f3      	b.n	fd86 <endrx_isr+0xa2>

0000fd9e <setup_tx_cache>:
{
    fd9e:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    fda0:	68c3      	ldr	r3, [r0, #12]
    fda2:	68da      	ldr	r2, [r3, #12]
    fda4:	6a19      	ldr	r1, [r3, #32]
	if (!remaining) {
    fda6:	1a52      	subs	r2, r2, r1
    fda8:	d010      	beq.n	fdcc <setup_tx_cache+0x2e>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    fdaa:	2a08      	cmp	r2, #8
    fdac:	bf28      	it	cs
    fdae:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    fdb0:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
    fdb2:	68c3      	ldr	r3, [r0, #12]
    fdb4:	f103 0118 	add.w	r1, r3, #24
    fdb8:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    fdba:	68c0      	ldr	r0, [r0, #12]
    fdbc:	6881      	ldr	r1, [r0, #8]
    fdbe:	6a03      	ldr	r3, [r0, #32]
    fdc0:	4419      	add	r1, r3
    fdc2:	3018      	adds	r0, #24
    fdc4:	f000 fcd6 	bl	10774 <memcpy>
	return true;
    fdc8:	2001      	movs	r0, #1
}
    fdca:	bd08      	pop	{r3, pc}
		return false;
    fdcc:	2000      	movs	r0, #0
    fdce:	e7fc      	b.n	fdca <setup_tx_cache+0x2c>

0000fdd0 <z_log_msg2_runtime_create>:
{
    fdd0:	b510      	push	{r4, lr}
    fdd2:	b086      	sub	sp, #24
	va_start(ap, fmt);
    fdd4:	ac0b      	add	r4, sp, #44	; 0x2c
    fdd6:	9405      	str	r4, [sp, #20]
    fdd8:	9403      	str	r4, [sp, #12]
    fdda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    fddc:	9402      	str	r4, [sp, #8]
    fdde:	9c09      	ldr	r4, [sp, #36]	; 0x24
    fde0:	9401      	str	r4, [sp, #4]
    fde2:	9c08      	ldr	r4, [sp, #32]
    fde4:	9400      	str	r4, [sp, #0]
    fde6:	f7f5 fb71 	bl	54cc <z_impl_z_log_msg2_runtime_vcreate>
}
    fdea:	b006      	add	sp, #24
    fdec:	bd10      	pop	{r4, pc}

0000fdee <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    fdee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fdf2:	b083      	sub	sp, #12
    fdf4:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    fdf6:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    fdf8:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    fdfa:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    fdfe:	2100      	movs	r1, #0
    fe00:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    fe04:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    fe08:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    fe0c:	aa01      	add	r2, sp, #4
    fe0e:	4648      	mov	r0, r9
    fe10:	f000 fa72 	bl	102f8 <pinctrl_lookup_state>
	if (ret < 0) {
    fe14:	1e04      	subs	r4, r0, #0
    fe16:	db07      	blt.n	fe28 <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    fe18:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    fe1a:	f8d9 2000 	ldr.w	r2, [r9]
    fe1e:	7919      	ldrb	r1, [r3, #4]
    fe20:	6818      	ldr	r0, [r3, #0]
    fe22:	f7f8 f995 	bl	8150 <pinctrl_configure_pins>
    fe26:	4604      	mov	r4, r0
	if (err < 0) {
    fe28:	2c00      	cmp	r4, #0
    fe2a:	db2c      	blt.n	fe86 <uarte_instance_init+0x98>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    fe2c:	f108 0104 	add.w	r1, r8, #4
    fe30:	4628      	mov	r0, r5
    fe32:	f7ff fd13 	bl	f85c <uarte_nrfx_configure>
	if (err) {
    fe36:	4604      	mov	r4, r0
    fe38:	bb28      	cbnz	r0, fe86 <uarte_instance_init+0x98>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    fe3a:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    fe3c:	f013 0f02 	tst.w	r3, #2
    fe40:	d125      	bne.n	fe8e <uarte_instance_init+0xa0>
		}
	}


#ifdef UARTE_ANY_ASYNC
	if (data->async) {
    fe42:	f8d8 300c 	ldr.w	r3, [r8, #12]
    fe46:	b353      	cbz	r3, fe9e <uarte_instance_init+0xb0>
		err = uarte_nrfx_init(dev);
    fe48:	4628      	mov	r0, r5
    fe4a:	f7f7 fe8f 	bl	7b6c <uarte_nrfx_init>
		if (err < 0) {
    fe4e:	2800      	cmp	r0, #0
    fe50:	db38      	blt.n	fec4 <uarte_instance_init+0xd6>
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    fe52:	687b      	ldr	r3, [r7, #4]
    fe54:	f013 0f02 	tst.w	r3, #2
    fe58:	d103      	bne.n	fe62 <uarte_instance_init+0x74>
    p_reg->INTENSET = mask;
    fe5a:	f44f 7380 	mov.w	r3, #256	; 0x100
    fe5e:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    fe62:	687b      	ldr	r3, [r7, #4]
    fe64:	f013 0f10 	tst.w	r3, #16
    fe68:	d003      	beq.n	fe72 <uarte_instance_init+0x84>
    fe6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    fe6e:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    fe72:	f108 0314 	add.w	r3, r8, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    fe76:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    fe7a:	2300      	movs	r3, #0
    fe7c:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fe80:	2301      	movs	r3, #1
    fe82:	60b3      	str	r3, [r6, #8]
    fe84:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    fe86:	4620      	mov	r0, r4
    fe88:	b003      	add	sp, #12
    fe8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    fe8e:	4641      	mov	r1, r8
    fe90:	4630      	mov	r0, r6
    fe92:	f7f7 fe37 	bl	7b04 <endtx_stoptx_ppi_init>
		if (err < 0) {
    fe96:	2800      	cmp	r0, #0
    fe98:	dad3      	bge.n	fe42 <uarte_instance_init+0x54>
			return err;
    fe9a:	4604      	mov	r4, r0
    fe9c:	e7f3      	b.n	fe86 <uarte_instance_init+0x98>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    fe9e:	2308      	movs	r3, #8
    fea0:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
		if (!cfg->disable_rx) {
    fea4:	7a3b      	ldrb	r3, [r7, #8]
    fea6:	2b00      	cmp	r3, #0
    fea8:	d1d3      	bne.n	fe52 <uarte_instance_init+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    feaa:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    feae:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    feb2:	f108 0315 	add.w	r3, r8, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    feb6:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    feba:	2301      	movs	r3, #1
    febc:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fec0:	6033      	str	r3, [r6, #0]
}
    fec2:	e7c6      	b.n	fe52 <uarte_instance_init+0x64>
			return err;
    fec4:	4604      	mov	r4, r0
    fec6:	e7de      	b.n	fe86 <uarte_instance_init+0x98>

0000fec8 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    fec8:	b510      	push	{r4, lr}
    feca:	4604      	mov	r4, r0
    fecc:	2200      	movs	r2, #0
    fece:	2101      	movs	r1, #1
    fed0:	2002      	movs	r0, #2
    fed2:	f7f5 ff89 	bl	5de8 <z_arm_irq_priority_set>
    fed6:	2002      	movs	r0, #2
    fed8:	f7f5 ff6a 	bl	5db0 <arch_irq_enable>
    fedc:	2100      	movs	r1, #0
    fede:	4620      	mov	r0, r4
    fee0:	f7ff ff85 	bl	fdee <uarte_instance_init>
    fee4:	bd10      	pop	{r4, pc}

0000fee6 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    fee6:	b510      	push	{r4, lr}
    fee8:	4604      	mov	r4, r0
    feea:	2200      	movs	r2, #0
    feec:	2101      	movs	r1, #1
    feee:	2028      	movs	r0, #40	; 0x28
    fef0:	f7f5 ff7a 	bl	5de8 <z_arm_irq_priority_set>
    fef4:	2028      	movs	r0, #40	; 0x28
    fef6:	f7f5 ff5b 	bl	5db0 <arch_irq_enable>
    fefa:	2100      	movs	r1, #0
    fefc:	4620      	mov	r0, r4
    fefe:	f7ff ff76 	bl	fdee <uarte_instance_init>
    ff02:	bd10      	pop	{r4, pc}

0000ff04 <rx_flush>:
{
    ff04:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff06:	b083      	sub	sp, #12
	const struct uarte_nrfx_config *config = dev->config;
    ff08:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ff0a:	681c      	ldr	r4, [r3, #0]
    return p_reg->RXD.AMOUNT;
    ff0c:	f8d4 753c 	ldr.w	r7, [r4, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    ff10:	460d      	mov	r5, r1
    ff12:	b311      	cbz	r1, ff5a <rx_flush+0x56>
    ff14:	4616      	mov	r6, r2
	if (buf) {
    ff16:	b315      	cbz	r5, ff5e <rx_flush+0x5a>
__ssp_bos_icheck3(memset, void *, int)
    ff18:	2100      	movs	r1, #0
    ff1a:	4628      	mov	r0, r5
    ff1c:	f000 fc38 	bl	10790 <memset>
		flush_buf = buf;
    ff20:	462b      	mov	r3, r5
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    ff22:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    ff26:	f8c4 6538 	str.w	r6, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ff2a:	2300      	movs	r3, #0
    ff2c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    ff30:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ff34:	2301      	movs	r3, #1
    ff36:	62e3      	str	r3, [r4, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ff38:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    ff3c:	2b00      	cmp	r3, #0
    ff3e:	d0fb      	beq.n	ff38 <rx_flush+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ff40:	2300      	movs	r3, #0
    ff42:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    ff46:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (!buf) {
    ff4a:	b155      	cbz	r5, ff62 <rx_flush+0x5e>
    return p_reg->RXD.AMOUNT;
    ff4c:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
	if (rx_amount != prev_rx_amount) {
    ff50:	4287      	cmp	r7, r0
    ff52:	d00c      	beq.n	ff6e <rx_flush+0x6a>
		return rx_amount;
    ff54:	b2c0      	uxtb	r0, r0
}
    ff56:	b003      	add	sp, #12
    ff58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    ff5a:	2605      	movs	r6, #5
    ff5c:	e7db      	b.n	ff16 <rx_flush+0x12>
		flush_buf = tmp_buf;
    ff5e:	466b      	mov	r3, sp
    ff60:	e7df      	b.n	ff22 <rx_flush+0x1e>
    ff62:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
		return nrf_uarte_rx_amount_get(uarte);
    ff66:	b2c0      	uxtb	r0, r0
    ff68:	e7f5      	b.n	ff56 <rx_flush+0x52>
			return rx_amount;
    ff6a:	b2c0      	uxtb	r0, r0
    ff6c:	e7f3      	b.n	ff56 <rx_flush+0x52>
	for (int i = 0; i < flush_len; i++) {
    ff6e:	2300      	movs	r3, #0
    ff70:	42b3      	cmp	r3, r6
    ff72:	d204      	bcs.n	ff7e <rx_flush+0x7a>
		if (buf[i] != dirty) {
    ff74:	5cea      	ldrb	r2, [r5, r3]
    ff76:	2a00      	cmp	r2, #0
    ff78:	d1f7      	bne.n	ff6a <rx_flush+0x66>
	for (int i = 0; i < flush_len; i++) {
    ff7a:	3301      	adds	r3, #1
    ff7c:	e7f8      	b.n	ff70 <rx_flush+0x6c>
	return 0;
    ff7e:	2000      	movs	r0, #0
    ff80:	e7e9      	b.n	ff56 <rx_flush+0x52>

0000ff82 <async_uart_release>:
{
    ff82:	b570      	push	{r4, r5, r6, lr}
    ff84:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    ff86:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
    ff88:	f04f 0320 	mov.w	r3, #32
    ff8c:	f3ef 8611 	mrs	r6, BASEPRI
    ff90:	f383 8812 	msr	BASEPRI_MAX, r3
    ff94:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    ff98:	68d0      	ldr	r0, [r2, #12]
    ff9a:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
    ff9e:	ea23 0301 	bic.w	r3, r3, r1
    ffa2:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    ffa6:	68d5      	ldr	r5, [r2, #12]
    ffa8:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    ffac:	b923      	cbnz	r3, ffb8 <async_uart_release+0x36>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    ffae:	2902      	cmp	r1, #2
    ffb0:	d007      	beq.n	ffc2 <async_uart_release+0x40>
		uart_disable(dev);
    ffb2:	4620      	mov	r0, r4
    ffb4:	f7ff fcf6 	bl	f9a4 <uart_disable>
	__asm__ volatile(
    ffb8:	f386 8811 	msr	BASEPRI, r6
    ffbc:	f3bf 8f6f 	isb	sy
}
    ffc0:	bd70      	pop	{r4, r5, r6, pc}
				rx_flush(dev, data->async->rx_flush_buffer,
    ffc2:	2205      	movs	r2, #5
    ffc4:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    ffc8:	4620      	mov	r0, r4
    ffca:	f7ff ff9b 	bl	ff04 <rx_flush>
			data->async->rx_flush_cnt =
    ffce:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
    ffd2:	e7ee      	b.n	ffb2 <async_uart_release+0x30>

0000ffd4 <txstopped_isr>:
{
    ffd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ffd6:	b087      	sub	sp, #28
    ffd8:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    ffda:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    ffdc:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
    ffde:	681f      	ldr	r7, [r3, #0]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    ffe0:	685b      	ldr	r3, [r3, #4]
    ffe2:	f013 0f10 	tst.w	r3, #16
    ffe6:	d147      	bne.n	10078 <txstopped_isr+0xa4>
	if (!data->async->tx_buf) {
    ffe8:	68e3      	ldr	r3, [r4, #12]
    ffea:	689b      	ldr	r3, [r3, #8]
    ffec:	2b00      	cmp	r3, #0
    ffee:	d041      	beq.n	10074 <txstopped_isr+0xa0>
	__asm__ volatile(
    fff0:	f04f 0320 	mov.w	r3, #32
    fff4:	f3ef 8211 	mrs	r2, BASEPRI
    fff8:	f383 8812 	msr	BASEPRI_MAX, r3
    fffc:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   10000:	68e3      	ldr	r3, [r4, #12]
   10002:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   10006:	2900      	cmp	r1, #0
   10008:	db42      	blt.n	10090 <txstopped_isr+0xbc>
   1000a:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
	__asm__ volatile(
   1000e:	f382 8811 	msr	BASEPRI, r2
   10012:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   10016:	68e3      	ldr	r3, [r4, #12]
   10018:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
   1001c:	2a00      	cmp	r2, #0
   1001e:	d13a      	bne.n	10096 <txstopped_isr+0xc2>
	if (data->async->tx_buf != data->async->xfer_buf) {
   10020:	6899      	ldr	r1, [r3, #8]
   10022:	691a      	ldr	r2, [r3, #16]
   10024:	4291      	cmp	r1, r2
   10026:	d004      	beq.n	10032 <txstopped_isr+0x5e>
		if (amount == data->async->xfer_len) {
   10028:	695a      	ldr	r2, [r3, #20]
   1002a:	42b2      	cmp	r2, r6
   1002c:	d044      	beq.n	100b8 <txstopped_isr+0xe4>
			amount += data->async->tx_cache_offset;
   1002e:	6a1b      	ldr	r3, [r3, #32]
   10030:	441e      	add	r6, r3
	k_timer_stop(&data->async->tx_timeout_timer);
   10032:	68e0      	ldr	r0, [r4, #12]
   10034:	3028      	adds	r0, #40	; 0x28
   10036:	f000 fb57 	bl	106e8 <z_impl_k_timer_stop>
	struct uart_event evt = {
   1003a:	2300      	movs	r3, #0
   1003c:	9301      	str	r3, [sp, #4]
   1003e:	9302      	str	r3, [sp, #8]
   10040:	9303      	str	r3, [sp, #12]
   10042:	9304      	str	r3, [sp, #16]
   10044:	9305      	str	r3, [sp, #20]
		.data.tx.buf = data->async->tx_buf,
   10046:	68e3      	ldr	r3, [r4, #12]
   10048:	689a      	ldr	r2, [r3, #8]
	struct uart_event evt = {
   1004a:	9202      	str	r2, [sp, #8]
   1004c:	9603      	str	r6, [sp, #12]
	if (amount == data->async->tx_size) {
   1004e:	68db      	ldr	r3, [r3, #12]
   10050:	42b3      	cmp	r3, r6
   10052:	d002      	beq.n	1005a <txstopped_isr+0x86>
		evt.type = UART_TX_ABORTED;
   10054:	2301      	movs	r3, #1
   10056:	f88d 3004 	strb.w	r3, [sp, #4]
    p_reg->INTENCLR = mask;
   1005a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1005e:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   10062:	68e2      	ldr	r2, [r4, #12]
   10064:	2300      	movs	r3, #0
   10066:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   10068:	68e2      	ldr	r2, [r4, #12]
   1006a:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1006c:	a901      	add	r1, sp, #4
   1006e:	4628      	mov	r0, r5
   10070:	f7ff fcc0 	bl	f9f4 <user_callback>
}
   10074:	b007      	add	sp, #28
   10076:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10078:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1007c:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   10080:	2101      	movs	r1, #1
   10082:	f7ff ff7e 	bl	ff82 <async_uart_release>
		if (!data->async->tx_size) {
   10086:	68e3      	ldr	r3, [r4, #12]
   10088:	68db      	ldr	r3, [r3, #12]
   1008a:	2b00      	cmp	r3, #0
   1008c:	d1ac      	bne.n	ffe8 <txstopped_isr+0x14>
   1008e:	e7f1      	b.n	10074 <txstopped_isr+0xa0>
    return p_reg->TXD.AMOUNT;
   10090:	f8d7 654c 	ldr.w	r6, [r7, #1356]	; 0x54c
   10094:	e7bb      	b.n	1000e <txstopped_isr+0x3a>
	__asm__ volatile(
   10096:	f04f 0320 	mov.w	r3, #32
   1009a:	f3ef 8611 	mrs	r6, BASEPRI
   1009e:	f383 8812 	msr	BASEPRI_MAX, r3
   100a2:	f3bf 8f6f 	isb	sy
		start_tx_locked(dev, data);
   100a6:	4621      	mov	r1, r4
   100a8:	4628      	mov	r0, r5
   100aa:	f7ff fc88 	bl	f9be <start_tx_locked>
	__asm__ volatile(
   100ae:	f386 8811 	msr	BASEPRI, r6
   100b2:	f3bf 8f6f 	isb	sy
		return;
   100b6:	e7dd      	b.n	10074 <txstopped_isr+0xa0>
			data->async->tx_cache_offset += amount;
   100b8:	6a1a      	ldr	r2, [r3, #32]
   100ba:	4432      	add	r2, r6
   100bc:	621a      	str	r2, [r3, #32]
			if (setup_tx_cache(data)) {
   100be:	4620      	mov	r0, r4
   100c0:	f7ff fe6d 	bl	fd9e <setup_tx_cache>
   100c4:	b910      	cbnz	r0, 100cc <txstopped_isr+0xf8>
			amount = data->async->tx_cache_offset;
   100c6:	68e3      	ldr	r3, [r4, #12]
   100c8:	6a1e      	ldr	r6, [r3, #32]
   100ca:	e7b2      	b.n	10032 <txstopped_isr+0x5e>
	__asm__ volatile(
   100cc:	f04f 0320 	mov.w	r3, #32
   100d0:	f3ef 8611 	mrs	r6, BASEPRI
   100d4:	f383 8812 	msr	BASEPRI_MAX, r3
   100d8:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   100dc:	4621      	mov	r1, r4
   100de:	4628      	mov	r0, r5
   100e0:	f7ff fc6d 	bl	f9be <start_tx_locked>
	__asm__ volatile(
   100e4:	f386 8811 	msr	BASEPRI, r6
   100e8:	f3bf 8f6f 	isb	sy
				return;
   100ec:	e7c2      	b.n	10074 <txstopped_isr+0xa0>

000100ee <rxto_isr>:
{
   100ee:	b570      	push	{r4, r5, r6, lr}
   100f0:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   100f2:	6846      	ldr	r6, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   100f4:	6905      	ldr	r5, [r0, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   100f6:	68e9      	ldr	r1, [r5, #12]
   100f8:	3160      	adds	r1, #96	; 0x60
   100fa:	f7ff fc9b 	bl	fa34 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   100fe:	68e9      	ldr	r1, [r5, #12]
   10100:	316c      	adds	r1, #108	; 0x6c
   10102:	4620      	mov	r0, r4
   10104:	f7ff fc96 	bl	fa34 <rx_buf_release>
	if (data->async->rx_enabled) {
   10108:	68eb      	ldr	r3, [r5, #12]
   1010a:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
   1010e:	b152      	cbz	r2, 10126 <rxto_isr+0x38>
		data->async->rx_enabled = false;
   10110:	2200      	movs	r2, #0
   10112:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   10116:	6873      	ldr	r3, [r6, #4]
   10118:	f013 0f10 	tst.w	r3, #16
   1011c:	d109      	bne.n	10132 <rxto_isr+0x44>
	notify_rx_disable(dev);
   1011e:	4620      	mov	r0, r4
   10120:	f7ff fc9f 	bl	fa62 <notify_rx_disable>
}
   10124:	bd70      	pop	{r4, r5, r6, pc}
		(void)rx_flush(dev, NULL, 0);
   10126:	2200      	movs	r2, #0
   10128:	4611      	mov	r1, r2
   1012a:	4620      	mov	r0, r4
   1012c:	f7ff feea 	bl	ff04 <rx_flush>
   10130:	e7f1      	b.n	10116 <rxto_isr+0x28>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   10132:	2102      	movs	r1, #2
   10134:	4620      	mov	r0, r4
   10136:	f7ff ff24 	bl	ff82 <async_uart_release>
   1013a:	e7f0      	b.n	1011e <rxto_isr+0x30>

0001013c <uarte_nrfx_isr_async>:
{
   1013c:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1013e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   10140:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   10142:	6902      	ldr	r2, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10144:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
	if (!HW_RX_COUNTING_ENABLED(data)
   10148:	bb5b      	cbnz	r3, 101a2 <uarte_nrfx_isr_async+0x66>
   1014a:	4605      	mov	r5, r0
   1014c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   10150:	bb9b      	cbnz	r3, 101ba <uarte_nrfx_isr_async+0x7e>
   10152:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   10156:	b123      	cbz	r3, 10162 <uarte_nrfx_isr_async+0x26>
    return p_reg->INTENSET & mask;
   10158:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1015c:	f013 0f10 	tst.w	r3, #16
   10160:	d133      	bne.n	101ca <uarte_nrfx_isr_async+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   10162:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   10166:	b113      	cbz	r3, 1016e <uarte_nrfx_isr_async+0x32>
   10168:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1016c:	b3b3      	cbz	r3, 101dc <uarte_nrfx_isr_async+0xa0>
   1016e:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   10172:	b113      	cbz	r3, 1017a <uarte_nrfx_isr_async+0x3e>
   10174:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   10178:	b3c3      	cbz	r3, 101ec <uarte_nrfx_isr_async+0xb0>
   1017a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1017e:	b123      	cbz	r3, 1018a <uarte_nrfx_isr_async+0x4e>
    return p_reg->INTENSET & mask;
   10180:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   10184:	f413 7f80 	tst.w	r3, #256	; 0x100
   10188:	d138      	bne.n	101fc <uarte_nrfx_isr_async+0xc0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1018a:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1018e:	b19b      	cbz	r3, 101b8 <uarte_nrfx_isr_async+0x7c>
    return p_reg->INTENSET & mask;
   10190:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   10194:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   10198:	d00e      	beq.n	101b8 <uarte_nrfx_isr_async+0x7c>
		txstopped_isr(dev);
   1019a:	4628      	mov	r0, r5
   1019c:	f7ff ff1a 	bl	ffd4 <txstopped_isr>
   101a0:	e00a      	b.n	101b8 <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   101a2:	2300      	movs	r3, #0
   101a4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   101a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   101ac:	68d2      	ldr	r2, [r2, #12]
   101ae:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
   101b2:	3301      	adds	r3, #1
   101b4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
   101b8:	bd38      	pop	{r3, r4, r5, pc}
   101ba:	2300      	movs	r3, #0
   101bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   101c0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
		error_isr(dev);
   101c4:	f7ff fcf5 	bl	fbb2 <error_isr>
   101c8:	e7c3      	b.n	10152 <uarte_nrfx_isr_async+0x16>
   101ca:	2300      	movs	r3, #0
   101cc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   101d0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		endrx_isr(dev);
   101d4:	4628      	mov	r0, r5
   101d6:	f7ff fd85 	bl	fce4 <endrx_isr>
   101da:	e7c2      	b.n	10162 <uarte_nrfx_isr_async+0x26>
   101dc:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   101e0:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		rxstarted_isr(dev);
   101e4:	4628      	mov	r0, r5
   101e6:	f7f7 fc53 	bl	7a90 <rxstarted_isr>
   101ea:	e7c0      	b.n	1016e <uarte_nrfx_isr_async+0x32>
   101ec:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   101f0:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		rxto_isr(dev);
   101f4:	4628      	mov	r0, r5
   101f6:	f7ff ff7a 	bl	100ee <rxto_isr>
   101fa:	e7be      	b.n	1017a <uarte_nrfx_isr_async+0x3e>
		endtx_isr(dev);
   101fc:	4628      	mov	r0, r5
   101fe:	f7ff fb14 	bl	f82a <endtx_isr>
   10202:	e7c2      	b.n	1018a <uarte_nrfx_isr_async+0x4e>

00010204 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   10204:	4770      	bx	lr

00010206 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   10206:	1a40      	subs	r0, r0, r1
}
   10208:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1020c:	4770      	bx	lr

0001020e <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1020e:	f100 0350 	add.w	r3, r0, #80	; 0x50
   10212:	009b      	lsls	r3, r3, #2
   10214:	b29b      	uxth	r3, r3
   10216:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1021a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1021e:	2200      	movs	r2, #0
   10220:	601a      	str	r2, [r3, #0]
   10222:	681b      	ldr	r3, [r3, #0]
}
   10224:	4770      	bx	lr

00010226 <absolute_time_to_cc>:
}
   10226:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1022a:	4770      	bx	lr

0001022c <full_int_lock>:
	__asm__ volatile(
   1022c:	f04f 0320 	mov.w	r3, #32
   10230:	f3ef 8011 	mrs	r0, BASEPRI
   10234:	f383 8812 	msr	BASEPRI_MAX, r3
   10238:	f3bf 8f6f 	isb	sy
}
   1023c:	4770      	bx	lr

0001023e <full_int_unlock>:
	__asm__ volatile(
   1023e:	f380 8811 	msr	BASEPRI, r0
   10242:	f3bf 8f6f 	isb	sy
}
   10246:	4770      	bx	lr

00010248 <set_absolute_alarm>:
{
   10248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1024a:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1024c:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   10250:	f7f7 fcda 	bl	7c08 <get_comparator>
   10254:	4607      	mov	r7, r0
   10256:	e019      	b.n	1028c <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   10258:	2013      	movs	r0, #19
   1025a:	f000 fa33 	bl	106c4 <z_impl_k_busy_wait>
}
   1025e:	e022      	b.n	102a6 <set_absolute_alarm+0x5e>
		event_clear(chan);
   10260:	4630      	mov	r0, r6
   10262:	f7ff ffd4 	bl	1020e <event_clear>
		event_enable(chan);
   10266:	4630      	mov	r0, r6
   10268:	f7f7 fcd6 	bl	7c18 <event_enable>
		set_comparator(chan, cc_val);
   1026c:	4629      	mov	r1, r5
   1026e:	4630      	mov	r0, r6
   10270:	f7f7 fcc0 	bl	7bf4 <set_comparator>
		now2 = counter();
   10274:	f7f7 fce4 	bl	7c40 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   10278:	4284      	cmp	r4, r0
   1027a:	d01e      	beq.n	102ba <set_absolute_alarm+0x72>
   1027c:	1c81      	adds	r1, r0, #2
   1027e:	4628      	mov	r0, r5
   10280:	f7ff ffc1 	bl	10206 <counter_sub>
	} while ((now2 != now) &&
   10284:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   10288:	d917      	bls.n	102ba <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   1028a:	462f      	mov	r7, r5
		now = counter();
   1028c:	f7f7 fcd8 	bl	7c40 <counter>
   10290:	4604      	mov	r4, r0
		set_comparator(chan, now);
   10292:	4601      	mov	r1, r0
   10294:	4630      	mov	r0, r6
   10296:	f7f7 fcad 	bl	7bf4 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   1029a:	4621      	mov	r1, r4
   1029c:	4638      	mov	r0, r7
   1029e:	f7ff ffb2 	bl	10206 <counter_sub>
   102a2:	2801      	cmp	r0, #1
   102a4:	d0d8      	beq.n	10258 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   102a6:	1ca7      	adds	r7, r4, #2
   102a8:	4639      	mov	r1, r7
   102aa:	4628      	mov	r0, r5
   102ac:	f7ff ffab 	bl	10206 <counter_sub>
   102b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   102b4:	d9d4      	bls.n	10260 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   102b6:	463d      	mov	r5, r7
   102b8:	e7d2      	b.n	10260 <set_absolute_alarm+0x18>
}
   102ba:	4628      	mov	r0, r5
   102bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000102be <compare_set>:
{
   102be:	b5f0      	push	{r4, r5, r6, r7, lr}
   102c0:	b083      	sub	sp, #12
   102c2:	4604      	mov	r4, r0
   102c4:	4617      	mov	r7, r2
   102c6:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   102c8:	f7f7 fcc0 	bl	7c4c <compare_int_lock>
   102cc:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   102ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   102d0:	9301      	str	r3, [sp, #4]
   102d2:	9b08      	ldr	r3, [sp, #32]
   102d4:	9300      	str	r3, [sp, #0]
   102d6:	463a      	mov	r2, r7
   102d8:	462b      	mov	r3, r5
   102da:	4620      	mov	r0, r4
   102dc:	f7f7 fda6 	bl	7e2c <compare_set_nolocks>
   102e0:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   102e2:	4631      	mov	r1, r6
   102e4:	4620      	mov	r0, r4
   102e6:	f7f7 fd15 	bl	7d14 <compare_int_unlock>
}
   102ea:	4628      	mov	r0, r5
   102ec:	b003      	add	sp, #12
   102ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000102f0 <sys_clock_cycle_get_32>:
{
   102f0:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   102f2:	f7f7 fd7b 	bl	7dec <z_nrf_rtc_timer_read>
}
   102f6:	bd08      	pop	{r3, pc}

000102f8 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   102f8:	b410      	push	{r4}
	*state = &config->states[0];
   102fa:	6843      	ldr	r3, [r0, #4]
   102fc:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   102fe:	e001      	b.n	10304 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   10300:	3408      	adds	r4, #8
   10302:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   10304:	6814      	ldr	r4, [r2, #0]
   10306:	7a03      	ldrb	r3, [r0, #8]
   10308:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   1030c:	3b01      	subs	r3, #1
   1030e:	f8d0 c004 	ldr.w	ip, [r0, #4]
   10312:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   10316:	429c      	cmp	r4, r3
   10318:	d804      	bhi.n	10324 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
   1031a:	7963      	ldrb	r3, [r4, #5]
   1031c:	428b      	cmp	r3, r1
   1031e:	d1ef      	bne.n	10300 <pinctrl_lookup_state+0x8>
			return 0;
   10320:	2000      	movs	r0, #0
   10322:	e001      	b.n	10328 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
   10324:	f06f 0001 	mvn.w	r0, #1
}
   10328:	bc10      	pop	{r4}
   1032a:	4770      	bx	lr

0001032c <z_log_msg2_runtime_create>:
{
   1032c:	b510      	push	{r4, lr}
   1032e:	b086      	sub	sp, #24
	va_start(ap, fmt);
   10330:	ac0b      	add	r4, sp, #44	; 0x2c
   10332:	9405      	str	r4, [sp, #20]
   10334:	9403      	str	r4, [sp, #12]
   10336:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10338:	9402      	str	r4, [sp, #8]
   1033a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1033c:	9401      	str	r4, [sp, #4]
   1033e:	9c08      	ldr	r4, [sp, #32]
   10340:	9400      	str	r4, [sp, #0]
   10342:	f7f5 f8c3 	bl	54cc <z_impl_z_log_msg2_runtime_vcreate>
}
   10346:	b006      	add	sp, #24
   10348:	bd10      	pop	{r4, pc}

0001034a <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   1034a:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   1034c:	f7fe fb66 	bl	ea1c <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
   10350:	bd08      	pop	{r3, pc}

00010352 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   10352:	b510      	push	{r4, lr}
   10354:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   10356:	f7f5 fbed 	bl	5b34 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   1035a:	f7f5 fcad 	bl	5cb8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   1035e:	4620      	mov	r0, r4
   10360:	f7ff fff3 	bl	1034a <hw_cc3xx_init_internal>
	return res;
}
   10364:	bd10      	pop	{r4, pc}

00010366 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   10366:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1036a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   1036e:	2b08      	cmp	r3, #8
   10370:	d001      	beq.n	10376 <nrf52_errata_36+0x10>
        return false;
   10372:	2000      	movs	r0, #0
   10374:	4770      	bx	lr
                        return true;
   10376:	2001      	movs	r0, #1
}
   10378:	4770      	bx	lr

0001037a <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1037a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1037e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   10382:	2b08      	cmp	r3, #8
   10384:	d001      	beq.n	1038a <nrf52_errata_66+0x10>
        return false;
   10386:	2000      	movs	r0, #0
   10388:	4770      	bx	lr
                        return true;
   1038a:	2001      	movs	r0, #1
}
   1038c:	4770      	bx	lr

0001038e <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1038e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10392:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   10396:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   1039a:	2a08      	cmp	r2, #8
   1039c:	d001      	beq.n	103a2 <nrf52_errata_98+0x14>
        return false;
   1039e:	2000      	movs	r0, #0
   103a0:	4770      	bx	lr
                switch(var2)
   103a2:	2b00      	cmp	r3, #0
   103a4:	d804      	bhi.n	103b0 <nrf52_errata_98+0x22>
   103a6:	e8df f003 	tbb	[pc, r3]
   103aa:	01          	.byte	0x01
   103ab:	00          	.byte	0x00
   103ac:	2001      	movs	r0, #1
   103ae:	4770      	bx	lr
                        return false;
   103b0:	2000      	movs	r0, #0
}
   103b2:	4770      	bx	lr

000103b4 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   103b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   103b8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   103bc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   103c0:	2a08      	cmp	r2, #8
   103c2:	d001      	beq.n	103c8 <nrf52_errata_103+0x14>
        return false;
   103c4:	2000      	movs	r0, #0
   103c6:	4770      	bx	lr
                switch(var2)
   103c8:	2b00      	cmp	r3, #0
   103ca:	d804      	bhi.n	103d6 <nrf52_errata_103+0x22>
   103cc:	e8df f003 	tbb	[pc, r3]
   103d0:	01          	.byte	0x01
   103d1:	00          	.byte	0x00
   103d2:	2001      	movs	r0, #1
   103d4:	4770      	bx	lr
                        return false;
   103d6:	2000      	movs	r0, #0
}
   103d8:	4770      	bx	lr

000103da <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   103da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   103de:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   103e2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   103e6:	2a08      	cmp	r2, #8
   103e8:	d001      	beq.n	103ee <nrf52_errata_115+0x14>
        return false;
   103ea:	2000      	movs	r0, #0
   103ec:	4770      	bx	lr
                switch(var2)
   103ee:	2b00      	cmp	r3, #0
   103f0:	d804      	bhi.n	103fc <nrf52_errata_115+0x22>
   103f2:	e8df f003 	tbb	[pc, r3]
   103f6:	01          	.byte	0x01
   103f7:	00          	.byte	0x00
   103f8:	2001      	movs	r0, #1
   103fa:	4770      	bx	lr
                        return false;
   103fc:	2000      	movs	r0, #0
}
   103fe:	4770      	bx	lr

00010400 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   10400:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10404:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   10408:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
   1040c:	2a08      	cmp	r2, #8
   1040e:	d001      	beq.n	10414 <nrf52_errata_120+0x14>
        return false;
   10410:	2000      	movs	r0, #0
   10412:	4770      	bx	lr
                switch(var2)
   10414:	2b00      	cmp	r3, #0
   10416:	d804      	bhi.n	10422 <nrf52_errata_120+0x22>
   10418:	e8df f003 	tbb	[pc, r3]
   1041c:	01          	.byte	0x01
   1041d:	00          	.byte	0x00
   1041e:	2001      	movs	r0, #1
   10420:	4770      	bx	lr
                        return false;
   10422:	2000      	movs	r0, #0
}
   10424:	4770      	bx	lr

00010426 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   10426:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1042a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
   1042e:	2b08      	cmp	r3, #8
   10430:	d001      	beq.n	10436 <nrf52_errata_136+0x10>
        return false;
   10432:	2000      	movs	r0, #0
   10434:	4770      	bx	lr
                        return true;
   10436:	2001      	movs	r0, #1
}
   10438:	4770      	bx	lr

0001043a <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1043a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1043e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   10442:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   10446:	2a08      	cmp	r2, #8
   10448:	d001      	beq.n	1044e <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1044a:	2000      	movs	r0, #0
   1044c:	4770      	bx	lr
                switch(var2)
   1044e:	2b04      	cmp	r3, #4
   10450:	d801      	bhi.n	10456 <nrf52_configuration_249+0x1c>
   10452:	2000      	movs	r0, #0
   10454:	4770      	bx	lr
                        return true;
   10456:	2001      	movs	r0, #1
    #endif
}
   10458:	4770      	bx	lr

0001045a <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   1045a:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   1045c:	4780      	blx	r0
}
   1045e:	bd08      	pop	{r3, pc}

00010460 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   10460:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   10462:	f000 f92f 	bl	106c4 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   10466:	bd08      	pop	{r3, pc}

00010468 <clock_initial_lfclksrc_get>:
}
   10468:	2000      	movs	r0, #0
   1046a:	4770      	bx	lr

0001046c <clock_lfclksrc_tweak>:
{
   1046c:	b538      	push	{r3, r4, r5, lr}
   1046e:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
   10470:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   10472:	2b01      	cmp	r3, #1
   10474:	d002      	beq.n	1047c <clock_lfclksrc_tweak+0x10>
   10476:	b933      	cbnz	r3, 10486 <clock_lfclksrc_tweak+0x1a>
   10478:	2301      	movs	r3, #1
   1047a:	e000      	b.n	1047e <clock_lfclksrc_tweak+0x12>
   1047c:	2301      	movs	r3, #1
    if (!is_correct_clk)
   1047e:	461d      	mov	r5, r3
   10480:	b11b      	cbz	r3, 1048a <clock_lfclksrc_tweak+0x1e>
}
   10482:	4628      	mov	r0, r5
   10484:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   10486:	2300      	movs	r3, #0
   10488:	e7f9      	b.n	1047e <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1048a:	2000      	movs	r0, #0
   1048c:	f7f8 fc38 	bl	8d00 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   10490:	f7ff ffea 	bl	10468 <clock_initial_lfclksrc_get>
   10494:	6020      	str	r0, [r4, #0]
   10496:	e7f4      	b.n	10482 <clock_lfclksrc_tweak+0x16>

00010498 <pin_is_task_output>:
{
   10498:	b510      	push	{r4, lr}
   1049a:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1049c:	f7f8 fe02 	bl	90a4 <pin_is_output>
   104a0:	b128      	cbz	r0, 104ae <pin_is_task_output+0x16>
   104a2:	4620      	mov	r0, r4
   104a4:	f7f8 fde8 	bl	9078 <pin_in_use_by_te>
   104a8:	b118      	cbz	r0, 104b2 <pin_is_task_output+0x1a>
   104aa:	2001      	movs	r0, #1
   104ac:	e000      	b.n	104b0 <pin_is_task_output+0x18>
   104ae:	2000      	movs	r0, #0
}
   104b0:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   104b2:	2000      	movs	r0, #0
   104b4:	e7fc      	b.n	104b0 <pin_is_task_output+0x18>

000104b6 <pin_is_input>:
{
   104b6:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   104b8:	f7f8 fdf4 	bl	90a4 <pin_is_output>
   104bc:	f080 0001 	eor.w	r0, r0, #1
}
   104c0:	b2c0      	uxtb	r0, r0
   104c2:	bd08      	pop	{r3, pc}

000104c4 <gpiote_polarity_to_trigger>:
}
   104c4:	4770      	bx	lr

000104c6 <gpiote_trigger_to_polarity>:
}
   104c6:	4770      	bx	lr

000104c8 <is_level>:
}
   104c8:	2803      	cmp	r0, #3
   104ca:	bf94      	ite	ls
   104cc:	2000      	movls	r0, #0
   104ce:	2001      	movhi	r0, #1
   104d0:	4770      	bx	lr

000104d2 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   104d2:	b508      	push	{r3, lr}
  _DoInit();
   104d4:	f7f9 fdb0 	bl	a038 <_DoInit>
}
   104d8:	bd08      	pop	{r3, pc}

000104da <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   104da:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   104dc:	f7ff fff9 	bl	104d2 <SEGGER_RTT_Init>

	return 0;
}
   104e0:	2000      	movs	r0, #0
   104e2:	bd08      	pop	{r3, pc}

000104e4 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   104e4:	b148      	cbz	r0, 104fa <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   104e6:	68c3      	ldr	r3, [r0, #12]
   104e8:	8818      	ldrh	r0, [r3, #0]
   104ea:	f3c0 0008 	ubfx	r0, r0, #0, #9
   104ee:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   104f2:	bf14      	ite	ne
   104f4:	2000      	movne	r0, #0
   104f6:	2001      	moveq	r0, #1
   104f8:	4770      	bx	lr
		return false;
   104fa:	2000      	movs	r0, #0
}
   104fc:	4770      	bx	lr

000104fe <z_log_msg2_runtime_create>:
{
   104fe:	b510      	push	{r4, lr}
   10500:	b086      	sub	sp, #24
	va_start(ap, fmt);
   10502:	ac0b      	add	r4, sp, #44	; 0x2c
   10504:	9405      	str	r4, [sp, #20]
   10506:	9403      	str	r4, [sp, #12]
   10508:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1050a:	9402      	str	r4, [sp, #8]
   1050c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1050e:	9401      	str	r4, [sp, #4]
   10510:	9c08      	ldr	r4, [sp, #32]
   10512:	9400      	str	r4, [sp, #0]
   10514:	f7f4 ffda 	bl	54cc <z_impl_z_log_msg2_runtime_vcreate>
}
   10518:	b006      	add	sp, #24
   1051a:	bd10      	pop	{r4, pc}

0001051c <z_early_memset>:
{
   1051c:	b508      	push	{r3, lr}
   1051e:	f000 f937 	bl	10790 <memset>
}
   10522:	bd08      	pop	{r3, pc}

00010524 <z_early_memcpy>:
{
   10524:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   10526:	f000 f925 	bl	10774 <memcpy>
}
   1052a:	bd08      	pop	{r3, pc}

0001052c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1052c:	6902      	ldr	r2, [r0, #16]
   1052e:	6943      	ldr	r3, [r0, #20]
   10530:	431a      	orrs	r2, r3
   10532:	f012 0203 	ands.w	r2, r2, #3
   10536:	d10d      	bne.n	10554 <create_free_list+0x28>
	slab->free_list = NULL;
   10538:	2100      	movs	r1, #0
   1053a:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   1053c:	e005      	b.n	1054a <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   1053e:	6981      	ldr	r1, [r0, #24]
   10540:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   10542:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   10544:	6901      	ldr	r1, [r0, #16]
   10546:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   10548:	3201      	adds	r2, #1
   1054a:	68c1      	ldr	r1, [r0, #12]
   1054c:	4291      	cmp	r1, r2
   1054e:	d8f6      	bhi.n	1053e <create_free_list+0x12>
	return 0;
   10550:	2000      	movs	r0, #0
   10552:	4770      	bx	lr
		return -EINVAL;
   10554:	f06f 0015 	mvn.w	r0, #21
}
   10558:	4770      	bx	lr

0001055a <k_mem_slab_init>:
{
   1055a:	b510      	push	{r4, lr}
   1055c:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   1055e:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
   10560:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
   10562:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   10564:	2300      	movs	r3, #0
   10566:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   10568:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
   1056a:	f7ff ffdf 	bl	1052c <create_free_list>
	if (rc < 0) {
   1056e:	2800      	cmp	r0, #0
   10570:	db01      	blt.n	10576 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
   10572:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   10574:	6064      	str	r4, [r4, #4]
}
   10576:	bd10      	pop	{r4, pc}

00010578 <setup_thread_stack>:
{
   10578:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1057a:	3207      	adds	r2, #7
   1057c:	f022 0207 	bic.w	r2, r2, #7
   10580:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   10584:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   10588:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   1058c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   10590:	2200      	movs	r2, #0
   10592:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
   10596:	18c8      	adds	r0, r1, r3
   10598:	bc10      	pop	{r4}
   1059a:	4770      	bx	lr

0001059c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1059c:	f3ef 8005 	mrs	r0, IPSR
}
   105a0:	3800      	subs	r0, #0
   105a2:	bf18      	it	ne
   105a4:	2001      	movne	r0, #1
   105a6:	4770      	bx	lr

000105a8 <k_thread_name_get>:
}
   105a8:	3074      	adds	r0, #116	; 0x74
   105aa:	4770      	bx	lr

000105ac <z_impl_k_thread_start>:
{
   105ac:	b508      	push	{r3, lr}
	z_sched_start(thread);
   105ae:	f7fb fa1b 	bl	b9e8 <z_sched_start>
}
   105b2:	bd08      	pop	{r3, pc}

000105b4 <z_init_thread_base>:
{
   105b4:	b410      	push	{r4}
	thread_base->pended_on = NULL;
   105b6:	2400      	movs	r4, #0
   105b8:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   105ba:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   105bc:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   105be:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   105c0:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   105c2:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   105c4:	61c4      	str	r4, [r0, #28]
}
   105c6:	bc10      	pop	{r4}
   105c8:	4770      	bx	lr

000105ca <z_pm_save_idle_exit>:
{
   105ca:	b508      	push	{r3, lr}
	pm_system_resume();
   105cc:	f7f5 f8bc 	bl	5748 <pm_system_resume>
	sys_clock_idle_exit();
   105d0:	f7ff fe18 	bl	10204 <sys_clock_idle_exit>
}
   105d4:	bd08      	pop	{r3, pc}

000105d6 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   105d6:	4288      	cmp	r0, r1
   105d8:	da00      	bge.n	105dc <new_prio_for_inheritance+0x6>
   105da:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   105dc:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   105e0:	db01      	blt.n	105e6 <new_prio_for_inheritance+0x10>
   105e2:	4608      	mov	r0, r1
   105e4:	4770      	bx	lr
   105e6:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   105ea:	4770      	bx	lr

000105ec <adjust_owner_prio>:
{
   105ec:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   105ee:	6880      	ldr	r0, [r0, #8]
   105f0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   105f4:	428b      	cmp	r3, r1
   105f6:	d101      	bne.n	105fc <adjust_owner_prio+0x10>
	return false;
   105f8:	2000      	movs	r0, #0
}
   105fa:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   105fc:	f7fb fbaa 	bl	bd54 <z_set_prio>
   10600:	e7fb      	b.n	105fa <adjust_owner_prio+0xe>

00010602 <z_impl_k_mutex_init>:
{
   10602:	4603      	mov	r3, r0
	mutex->owner = NULL;
   10604:	2000      	movs	r0, #0
   10606:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   10608:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   1060a:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1060c:	605b      	str	r3, [r3, #4]
}
   1060e:	4770      	bx	lr

00010610 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   10610:	b13a      	cbz	r2, 10622 <z_impl_k_sem_init+0x12>
   10612:	428a      	cmp	r2, r1
   10614:	d308      	bcc.n	10628 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   10616:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   10618:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   1061a:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   1061c:	6040      	str	r0, [r0, #4]
	return 0;
   1061e:	2000      	movs	r0, #0
   10620:	4770      	bx	lr
		return -EINVAL;
   10622:	f06f 0015 	mvn.w	r0, #21
   10626:	4770      	bx	lr
   10628:	f06f 0015 	mvn.w	r0, #21
}
   1062c:	4770      	bx	lr

0001062e <thread_active_elsewhere>:
}
   1062e:	2000      	movs	r0, #0
   10630:	4770      	bx	lr

00010632 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   10632:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   10636:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1063a:	4283      	cmp	r3, r0
   1063c:	d001      	beq.n	10642 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   1063e:	1ac0      	subs	r0, r0, r3
   10640:	4770      	bx	lr
	return 0;
   10642:	2000      	movs	r0, #0
}
   10644:	4770      	bx	lr

00010646 <z_reschedule_irqlock>:
{
   10646:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   10648:	4603      	mov	r3, r0
   1064a:	b920      	cbnz	r0, 10656 <z_reschedule_irqlock+0x10>
   1064c:	f3ef 8205 	mrs	r2, IPSR
   10650:	b942      	cbnz	r2, 10664 <z_reschedule_irqlock+0x1e>
   10652:	2201      	movs	r2, #1
   10654:	e000      	b.n	10658 <z_reschedule_irqlock+0x12>
   10656:	2200      	movs	r2, #0
	if (resched(key)) {
   10658:	b932      	cbnz	r2, 10668 <z_reschedule_irqlock+0x22>
   1065a:	f383 8811 	msr	BASEPRI, r3
   1065e:	f3bf 8f6f 	isb	sy
}
   10662:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   10664:	2200      	movs	r2, #0
   10666:	e7f7      	b.n	10658 <z_reschedule_irqlock+0x12>
   10668:	4618      	mov	r0, r3
   1066a:	f7f5 fc13 	bl	5e94 <arch_swap>
	return ret;
   1066e:	e7f8      	b.n	10662 <z_reschedule_irqlock+0x1c>

00010670 <z_priq_dumb_best>:
{
   10670:	4603      	mov	r3, r0
	return list->head == list;
   10672:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10674:	4283      	cmp	r3, r0
   10676:	d000      	beq.n	1067a <z_priq_dumb_best+0xa>
}
   10678:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1067a:	2000      	movs	r0, #0
	return thread;
   1067c:	e7fc      	b.n	10678 <z_priq_dumb_best+0x8>

0001067e <init_ready_q>:
	sys_dlist_init(&rq->runq);
   1067e:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   10680:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   10682:	6083      	str	r3, [r0, #8]
}
   10684:	4770      	bx	lr

00010686 <remove_timeout>:
{
   10686:	b510      	push	{r4, lr}
   10688:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   1068a:	f7fc f8c3 	bl	c814 <next>
   1068e:	b148      	cbz	r0, 106a4 <remove_timeout+0x1e>
   10690:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   10692:	6920      	ldr	r0, [r4, #16]
   10694:	6961      	ldr	r1, [r4, #20]
   10696:	6913      	ldr	r3, [r2, #16]
   10698:	181b      	adds	r3, r3, r0
   1069a:	6950      	ldr	r0, [r2, #20]
   1069c:	eb41 0100 	adc.w	r1, r1, r0
   106a0:	6113      	str	r3, [r2, #16]
   106a2:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   106a4:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   106a6:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   106a8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   106aa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   106ac:	2300      	movs	r3, #0
   106ae:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   106b0:	6063      	str	r3, [r4, #4]
}
   106b2:	bd10      	pop	{r4, pc}

000106b4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   106b4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   106b6:	f7fc fba9 	bl	ce0c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   106ba:	bd08      	pop	{r3, pc}

000106bc <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   106bc:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   106be:	f7fc fba5 	bl	ce0c <sys_clock_tick_get>
}
   106c2:	bd08      	pop	{r3, pc}

000106c4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   106c4:	b900      	cbnz	r0, 106c8 <z_impl_k_busy_wait+0x4>
   106c6:	4770      	bx	lr
{
   106c8:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   106ca:	f7f6 fb77 	bl	6dbc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   106ce:	bd08      	pop	{r3, pc}

000106d0 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   106d0:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   106d2:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   106d4:	2300      	movs	r3, #0
   106d6:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
   106d8:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   106dc:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   106de:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   106e0:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   106e2:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   106e4:	6343      	str	r3, [r0, #52]	; 0x34
}
   106e6:	4770      	bx	lr

000106e8 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   106e8:	b510      	push	{r4, lr}
   106ea:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   106ec:	f7fc f9b4 	bl	ca58 <z_abort_timeout>

	if (inactive) {
   106f0:	b9a0      	cbnz	r0, 1071c <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   106f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   106f4:	b10b      	cbz	r3, 106fa <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   106f6:	4620      	mov	r0, r4
   106f8:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   106fa:	f104 0018 	add.w	r0, r4, #24
   106fe:	f7fb fd35 	bl	c16c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   10702:	b158      	cbz	r0, 1071c <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   10704:	f7fb f91a 	bl	b93c <z_ready_thread>
	__asm__ volatile(
   10708:	f04f 0320 	mov.w	r3, #32
   1070c:	f3ef 8011 	mrs	r0, BASEPRI
   10710:	f383 8812 	msr	BASEPRI_MAX, r3
   10714:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   10718:	f7ff ff95 	bl	10646 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   1071c:	bd10      	pop	{r4, pc}

0001071e <k_heap_init>:
{
   1071e:	b510      	push	{r4, lr}
   10720:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   10724:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   10726:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   10728:	f7f3 fd84 	bl	4234 <sys_heap_init>
}
   1072c:	bd10      	pop	{r4, pc}

0001072e <fabs>:
   1072e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10732:	4770      	bx	lr

00010734 <finite>:
   10734:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
   10738:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   1073c:	0fc0      	lsrs	r0, r0, #31
   1073e:	4770      	bx	lr

00010740 <__itoa>:
   10740:	1e93      	subs	r3, r2, #2
   10742:	2b22      	cmp	r3, #34	; 0x22
   10744:	b510      	push	{r4, lr}
   10746:	460c      	mov	r4, r1
   10748:	d904      	bls.n	10754 <__itoa+0x14>
   1074a:	2300      	movs	r3, #0
   1074c:	700b      	strb	r3, [r1, #0]
   1074e:	461c      	mov	r4, r3
   10750:	4620      	mov	r0, r4
   10752:	bd10      	pop	{r4, pc}
   10754:	2a0a      	cmp	r2, #10
   10756:	d109      	bne.n	1076c <__itoa+0x2c>
   10758:	2800      	cmp	r0, #0
   1075a:	da07      	bge.n	1076c <__itoa+0x2c>
   1075c:	232d      	movs	r3, #45	; 0x2d
   1075e:	700b      	strb	r3, [r1, #0]
   10760:	4240      	negs	r0, r0
   10762:	2101      	movs	r1, #1
   10764:	4421      	add	r1, r4
   10766:	f7fd f855 	bl	d814 <__utoa>
   1076a:	e7f1      	b.n	10750 <__itoa+0x10>
   1076c:	2100      	movs	r1, #0
   1076e:	e7f9      	b.n	10764 <__itoa+0x24>

00010770 <itoa>:
   10770:	f7ff bfe6 	b.w	10740 <__itoa>

00010774 <memcpy>:
   10774:	440a      	add	r2, r1
   10776:	4291      	cmp	r1, r2
   10778:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1077c:	d100      	bne.n	10780 <memcpy+0xc>
   1077e:	4770      	bx	lr
   10780:	b510      	push	{r4, lr}
   10782:	f811 4b01 	ldrb.w	r4, [r1], #1
   10786:	f803 4f01 	strb.w	r4, [r3, #1]!
   1078a:	4291      	cmp	r1, r2
   1078c:	d1f9      	bne.n	10782 <memcpy+0xe>
   1078e:	bd10      	pop	{r4, pc}

00010790 <memset>:
   10790:	4402      	add	r2, r0
   10792:	4603      	mov	r3, r0
   10794:	4293      	cmp	r3, r2
   10796:	d100      	bne.n	1079a <memset+0xa>
   10798:	4770      	bx	lr
   1079a:	f803 1b01 	strb.w	r1, [r3], #1
   1079e:	e7f9      	b.n	10794 <memset+0x4>

000107a0 <_calloc_r>:
   107a0:	b538      	push	{r3, r4, r5, lr}
   107a2:	fb02 f501 	mul.w	r5, r2, r1
   107a6:	4629      	mov	r1, r5
   107a8:	f7fc ffca 	bl	d740 <_malloc_r>
   107ac:	4604      	mov	r4, r0
   107ae:	b118      	cbz	r0, 107b8 <_calloc_r+0x18>
   107b0:	462a      	mov	r2, r5
   107b2:	2100      	movs	r1, #0
   107b4:	f7ff ffec 	bl	10790 <memset>
   107b8:	4620      	mov	r0, r4
   107ba:	bd38      	pop	{r3, r4, r5, pc}

000107bc <strncpy>:
   107bc:	b510      	push	{r4, lr}
   107be:	3901      	subs	r1, #1
   107c0:	4603      	mov	r3, r0
   107c2:	b132      	cbz	r2, 107d2 <strncpy+0x16>
   107c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   107c8:	f803 4b01 	strb.w	r4, [r3], #1
   107cc:	3a01      	subs	r2, #1
   107ce:	2c00      	cmp	r4, #0
   107d0:	d1f7      	bne.n	107c2 <strncpy+0x6>
   107d2:	441a      	add	r2, r3
   107d4:	2100      	movs	r1, #0
   107d6:	4293      	cmp	r3, r2
   107d8:	d100      	bne.n	107dc <strncpy+0x20>
   107da:	bd10      	pop	{r4, pc}
   107dc:	f803 1b01 	strb.w	r1, [r3], #1
   107e0:	e7f9      	b.n	107d6 <strncpy+0x1a>

000107e2 <strnlen>:
   107e2:	b510      	push	{r4, lr}
   107e4:	4602      	mov	r2, r0
   107e6:	4401      	add	r1, r0
   107e8:	428a      	cmp	r2, r1
   107ea:	4613      	mov	r3, r2
   107ec:	d003      	beq.n	107f6 <strnlen+0x14>
   107ee:	781c      	ldrb	r4, [r3, #0]
   107f0:	3201      	adds	r2, #1
   107f2:	2c00      	cmp	r4, #0
   107f4:	d1f8      	bne.n	107e8 <strnlen+0x6>
   107f6:	1a18      	subs	r0, r3, r0
   107f8:	bd10      	pop	{r4, pc}

000107fa <print_e>:
   107fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   107fc:	b08b      	sub	sp, #44	; 0x2c
   107fe:	460d      	mov	r5, r1
   10800:	a908      	add	r1, sp, #32
   10802:	9e10      	ldr	r6, [sp, #64]	; 0x40
   10804:	9104      	str	r1, [sp, #16]
   10806:	a907      	add	r1, sp, #28
   10808:	9103      	str	r1, [sp, #12]
   1080a:	a909      	add	r1, sp, #36	; 0x24
   1080c:	9102      	str	r1, [sp, #8]
   1080e:	1c71      	adds	r1, r6, #1
   10810:	9101      	str	r1, [sp, #4]
   10812:	2102      	movs	r1, #2
   10814:	9100      	str	r1, [sp, #0]
   10816:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
   1081a:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1081c:	f7f1 fbc8 	bl	1fb0 <_dtoa_r>
   10820:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10822:	f242 730f 	movw	r3, #9999	; 0x270f
   10826:	429a      	cmp	r2, r3
   10828:	4601      	mov	r1, r0
   1082a:	d104      	bne.n	10836 <print_e+0x3c>
   1082c:	4628      	mov	r0, r5
   1082e:	f000 f9d0 	bl	10bd2 <strcpy>
   10832:	b00b      	add	sp, #44	; 0x2c
   10834:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10836:	462b      	mov	r3, r5
   10838:	7800      	ldrb	r0, [r0, #0]
   1083a:	f803 0b01 	strb.w	r0, [r3], #1
   1083e:	2e00      	cmp	r6, #0
   10840:	bfc8      	it	gt
   10842:	2401      	movgt	r4, #1
   10844:	202e      	movs	r0, #46	; 0x2e
   10846:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1084a:	b10d      	cbz	r5, 10850 <print_e+0x56>
   1084c:	2e00      	cmp	r6, #0
   1084e:	dc37      	bgt.n	108c0 <print_e+0xc6>
   10850:	2f67      	cmp	r7, #103	; 0x67
   10852:	d046      	beq.n	108e2 <print_e+0xe8>
   10854:	2f47      	cmp	r7, #71	; 0x47
   10856:	d046      	beq.n	108e6 <print_e+0xec>
   10858:	212e      	movs	r1, #46	; 0x2e
   1085a:	2030      	movs	r0, #48	; 0x30
   1085c:	2e00      	cmp	r6, #0
   1085e:	dc38      	bgt.n	108d2 <print_e+0xd8>
   10860:	1e51      	subs	r1, r2, #1
   10862:	2900      	cmp	r1, #0
   10864:	bfb8      	it	lt
   10866:	f1c2 0201 	rsblt	r2, r2, #1
   1086a:	4618      	mov	r0, r3
   1086c:	9109      	str	r1, [sp, #36]	; 0x24
   1086e:	bfac      	ite	ge
   10870:	222b      	movge	r2, #43	; 0x2b
   10872:	9209      	strlt	r2, [sp, #36]	; 0x24
   10874:	f800 7b02 	strb.w	r7, [r0], #2
   10878:	bfa8      	it	ge
   1087a:	705a      	strbge	r2, [r3, #1]
   1087c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1087e:	bfbc      	itt	lt
   10880:	212d      	movlt	r1, #45	; 0x2d
   10882:	7059      	strblt	r1, [r3, #1]
   10884:	2a63      	cmp	r2, #99	; 0x63
   10886:	dd0b      	ble.n	108a0 <print_e+0xa6>
   10888:	2164      	movs	r1, #100	; 0x64
   1088a:	fb92 f1f1 	sdiv	r1, r2, r1
   1088e:	f101 0430 	add.w	r4, r1, #48	; 0x30
   10892:	1cd8      	adds	r0, r3, #3
   10894:	709c      	strb	r4, [r3, #2]
   10896:	f06f 0363 	mvn.w	r3, #99	; 0x63
   1089a:	fb03 2201 	mla	r2, r3, r1, r2
   1089e:	9209      	str	r2, [sp, #36]	; 0x24
   108a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   108a2:	220a      	movs	r2, #10
   108a4:	fb93 f2f2 	sdiv	r2, r3, r2
   108a8:	f102 0130 	add.w	r1, r2, #48	; 0x30
   108ac:	7001      	strb	r1, [r0, #0]
   108ae:	f06f 0109 	mvn.w	r1, #9
   108b2:	fb01 3302 	mla	r3, r1, r2, r3
   108b6:	3330      	adds	r3, #48	; 0x30
   108b8:	7043      	strb	r3, [r0, #1]
   108ba:	2300      	movs	r3, #0
   108bc:	7083      	strb	r3, [r0, #2]
   108be:	e7b8      	b.n	10832 <print_e+0x38>
   108c0:	b10c      	cbz	r4, 108c6 <print_e+0xcc>
   108c2:	f803 0b01 	strb.w	r0, [r3], #1
   108c6:	780c      	ldrb	r4, [r1, #0]
   108c8:	f803 4b01 	strb.w	r4, [r3], #1
   108cc:	3e01      	subs	r6, #1
   108ce:	2400      	movs	r4, #0
   108d0:	e7b9      	b.n	10846 <print_e+0x4c>
   108d2:	b10c      	cbz	r4, 108d8 <print_e+0xde>
   108d4:	f803 1b01 	strb.w	r1, [r3], #1
   108d8:	f803 0b01 	strb.w	r0, [r3], #1
   108dc:	3e01      	subs	r6, #1
   108de:	2400      	movs	r4, #0
   108e0:	e7bc      	b.n	1085c <print_e+0x62>
   108e2:	2765      	movs	r7, #101	; 0x65
   108e4:	e7bc      	b.n	10860 <print_e+0x66>
   108e6:	2745      	movs	r7, #69	; 0x45
   108e8:	e7ba      	b.n	10860 <print_e+0x66>

000108ea <__sfmoreglue>:
   108ea:	b570      	push	{r4, r5, r6, lr}
   108ec:	2268      	movs	r2, #104	; 0x68
   108ee:	1e4d      	subs	r5, r1, #1
   108f0:	4355      	muls	r5, r2
   108f2:	460e      	mov	r6, r1
   108f4:	f105 0174 	add.w	r1, r5, #116	; 0x74
   108f8:	f7fc ff22 	bl	d740 <_malloc_r>
   108fc:	4604      	mov	r4, r0
   108fe:	b140      	cbz	r0, 10912 <__sfmoreglue+0x28>
   10900:	2100      	movs	r1, #0
   10902:	e9c0 1600 	strd	r1, r6, [r0]
   10906:	300c      	adds	r0, #12
   10908:	60a0      	str	r0, [r4, #8]
   1090a:	f105 0268 	add.w	r2, r5, #104	; 0x68
   1090e:	f7ff ff3f 	bl	10790 <memset>
   10912:	4620      	mov	r0, r4
   10914:	bd70      	pop	{r4, r5, r6, pc}

00010916 <_fwalk_reent>:
   10916:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1091a:	4606      	mov	r6, r0
   1091c:	4688      	mov	r8, r1
   1091e:	f100 0448 	add.w	r4, r0, #72	; 0x48
   10922:	2700      	movs	r7, #0
   10924:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   10928:	f1b9 0901 	subs.w	r9, r9, #1
   1092c:	d505      	bpl.n	1093a <_fwalk_reent+0x24>
   1092e:	6824      	ldr	r4, [r4, #0]
   10930:	2c00      	cmp	r4, #0
   10932:	d1f7      	bne.n	10924 <_fwalk_reent+0xe>
   10934:	4638      	mov	r0, r7
   10936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1093a:	89ab      	ldrh	r3, [r5, #12]
   1093c:	2b01      	cmp	r3, #1
   1093e:	d907      	bls.n	10950 <_fwalk_reent+0x3a>
   10940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   10944:	3301      	adds	r3, #1
   10946:	d003      	beq.n	10950 <_fwalk_reent+0x3a>
   10948:	4629      	mov	r1, r5
   1094a:	4630      	mov	r0, r6
   1094c:	47c0      	blx	r8
   1094e:	4307      	orrs	r7, r0
   10950:	3568      	adds	r5, #104	; 0x68
   10952:	e7e9      	b.n	10928 <_fwalk_reent+0x12>

00010954 <__hi0bits>:
   10954:	0c02      	lsrs	r2, r0, #16
   10956:	0412      	lsls	r2, r2, #16
   10958:	4603      	mov	r3, r0
   1095a:	b9ca      	cbnz	r2, 10990 <__hi0bits+0x3c>
   1095c:	0403      	lsls	r3, r0, #16
   1095e:	2010      	movs	r0, #16
   10960:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   10964:	bf04      	itt	eq
   10966:	021b      	lsleq	r3, r3, #8
   10968:	3008      	addeq	r0, #8
   1096a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   1096e:	bf04      	itt	eq
   10970:	011b      	lsleq	r3, r3, #4
   10972:	3004      	addeq	r0, #4
   10974:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   10978:	bf04      	itt	eq
   1097a:	009b      	lsleq	r3, r3, #2
   1097c:	3002      	addeq	r0, #2
   1097e:	2b00      	cmp	r3, #0
   10980:	db05      	blt.n	1098e <__hi0bits+0x3a>
   10982:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   10986:	f100 0001 	add.w	r0, r0, #1
   1098a:	bf08      	it	eq
   1098c:	2020      	moveq	r0, #32
   1098e:	4770      	bx	lr
   10990:	2000      	movs	r0, #0
   10992:	e7e5      	b.n	10960 <__hi0bits+0xc>

00010994 <__lo0bits>:
   10994:	6803      	ldr	r3, [r0, #0]
   10996:	4602      	mov	r2, r0
   10998:	f013 0007 	ands.w	r0, r3, #7
   1099c:	d00b      	beq.n	109b6 <__lo0bits+0x22>
   1099e:	07d9      	lsls	r1, r3, #31
   109a0:	d421      	bmi.n	109e6 <__lo0bits+0x52>
   109a2:	0798      	lsls	r0, r3, #30
   109a4:	bf49      	itett	mi
   109a6:	085b      	lsrmi	r3, r3, #1
   109a8:	089b      	lsrpl	r3, r3, #2
   109aa:	2001      	movmi	r0, #1
   109ac:	6013      	strmi	r3, [r2, #0]
   109ae:	bf5c      	itt	pl
   109b0:	6013      	strpl	r3, [r2, #0]
   109b2:	2002      	movpl	r0, #2
   109b4:	4770      	bx	lr
   109b6:	b299      	uxth	r1, r3
   109b8:	b909      	cbnz	r1, 109be <__lo0bits+0x2a>
   109ba:	0c1b      	lsrs	r3, r3, #16
   109bc:	2010      	movs	r0, #16
   109be:	b2d9      	uxtb	r1, r3
   109c0:	b909      	cbnz	r1, 109c6 <__lo0bits+0x32>
   109c2:	3008      	adds	r0, #8
   109c4:	0a1b      	lsrs	r3, r3, #8
   109c6:	0719      	lsls	r1, r3, #28
   109c8:	bf04      	itt	eq
   109ca:	091b      	lsreq	r3, r3, #4
   109cc:	3004      	addeq	r0, #4
   109ce:	0799      	lsls	r1, r3, #30
   109d0:	bf04      	itt	eq
   109d2:	089b      	lsreq	r3, r3, #2
   109d4:	3002      	addeq	r0, #2
   109d6:	07d9      	lsls	r1, r3, #31
   109d8:	d403      	bmi.n	109e2 <__lo0bits+0x4e>
   109da:	085b      	lsrs	r3, r3, #1
   109dc:	f100 0001 	add.w	r0, r0, #1
   109e0:	d003      	beq.n	109ea <__lo0bits+0x56>
   109e2:	6013      	str	r3, [r2, #0]
   109e4:	4770      	bx	lr
   109e6:	2000      	movs	r0, #0
   109e8:	4770      	bx	lr
   109ea:	2020      	movs	r0, #32
   109ec:	4770      	bx	lr

000109ee <__mcmp>:
   109ee:	690a      	ldr	r2, [r1, #16]
   109f0:	4603      	mov	r3, r0
   109f2:	6900      	ldr	r0, [r0, #16]
   109f4:	1a80      	subs	r0, r0, r2
   109f6:	b530      	push	{r4, r5, lr}
   109f8:	d10d      	bne.n	10a16 <__mcmp+0x28>
   109fa:	3314      	adds	r3, #20
   109fc:	3114      	adds	r1, #20
   109fe:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   10a02:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   10a06:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   10a0a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   10a0e:	4295      	cmp	r5, r2
   10a10:	d002      	beq.n	10a18 <__mcmp+0x2a>
   10a12:	d304      	bcc.n	10a1e <__mcmp+0x30>
   10a14:	2001      	movs	r0, #1
   10a16:	bd30      	pop	{r4, r5, pc}
   10a18:	42a3      	cmp	r3, r4
   10a1a:	d3f4      	bcc.n	10a06 <__mcmp+0x18>
   10a1c:	e7fb      	b.n	10a16 <__mcmp+0x28>
   10a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10a22:	e7f8      	b.n	10a16 <__mcmp+0x28>

00010a24 <__sfputc_r>:
   10a24:	6893      	ldr	r3, [r2, #8]
   10a26:	3b01      	subs	r3, #1
   10a28:	2b00      	cmp	r3, #0
   10a2a:	b410      	push	{r4}
   10a2c:	6093      	str	r3, [r2, #8]
   10a2e:	da07      	bge.n	10a40 <__sfputc_r+0x1c>
   10a30:	6994      	ldr	r4, [r2, #24]
   10a32:	42a3      	cmp	r3, r4
   10a34:	db01      	blt.n	10a3a <__sfputc_r+0x16>
   10a36:	290a      	cmp	r1, #10
   10a38:	d102      	bne.n	10a40 <__sfputc_r+0x1c>
   10a3a:	bc10      	pop	{r4}
   10a3c:	f7fd bd7e 	b.w	e53c <__swbuf_r>
   10a40:	6813      	ldr	r3, [r2, #0]
   10a42:	1c58      	adds	r0, r3, #1
   10a44:	6010      	str	r0, [r2, #0]
   10a46:	7019      	strb	r1, [r3, #0]
   10a48:	4608      	mov	r0, r1
   10a4a:	bc10      	pop	{r4}
   10a4c:	4770      	bx	lr

00010a4e <__sfputs_r>:
   10a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a50:	4606      	mov	r6, r0
   10a52:	460f      	mov	r7, r1
   10a54:	4614      	mov	r4, r2
   10a56:	18d5      	adds	r5, r2, r3
   10a58:	42ac      	cmp	r4, r5
   10a5a:	d101      	bne.n	10a60 <__sfputs_r+0x12>
   10a5c:	2000      	movs	r0, #0
   10a5e:	e007      	b.n	10a70 <__sfputs_r+0x22>
   10a60:	f814 1b01 	ldrb.w	r1, [r4], #1
   10a64:	463a      	mov	r2, r7
   10a66:	4630      	mov	r0, r6
   10a68:	f7ff ffdc 	bl	10a24 <__sfputc_r>
   10a6c:	1c43      	adds	r3, r0, #1
   10a6e:	d1f3      	bne.n	10a58 <__sfputs_r+0xa>
   10a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010a72 <_printf_common>:
   10a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10a76:	4616      	mov	r6, r2
   10a78:	4699      	mov	r9, r3
   10a7a:	688a      	ldr	r2, [r1, #8]
   10a7c:	690b      	ldr	r3, [r1, #16]
   10a7e:	f8dd 8020 	ldr.w	r8, [sp, #32]
   10a82:	4293      	cmp	r3, r2
   10a84:	bfb8      	it	lt
   10a86:	4613      	movlt	r3, r2
   10a88:	6033      	str	r3, [r6, #0]
   10a8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   10a8e:	4607      	mov	r7, r0
   10a90:	460c      	mov	r4, r1
   10a92:	b10a      	cbz	r2, 10a98 <_printf_common+0x26>
   10a94:	3301      	adds	r3, #1
   10a96:	6033      	str	r3, [r6, #0]
   10a98:	6823      	ldr	r3, [r4, #0]
   10a9a:	0699      	lsls	r1, r3, #26
   10a9c:	bf42      	ittt	mi
   10a9e:	6833      	ldrmi	r3, [r6, #0]
   10aa0:	3302      	addmi	r3, #2
   10aa2:	6033      	strmi	r3, [r6, #0]
   10aa4:	6825      	ldr	r5, [r4, #0]
   10aa6:	f015 0506 	ands.w	r5, r5, #6
   10aaa:	d106      	bne.n	10aba <_printf_common+0x48>
   10aac:	f104 0a19 	add.w	sl, r4, #25
   10ab0:	68e3      	ldr	r3, [r4, #12]
   10ab2:	6832      	ldr	r2, [r6, #0]
   10ab4:	1a9b      	subs	r3, r3, r2
   10ab6:	42ab      	cmp	r3, r5
   10ab8:	dc26      	bgt.n	10b08 <_printf_common+0x96>
   10aba:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   10abe:	1e13      	subs	r3, r2, #0
   10ac0:	6822      	ldr	r2, [r4, #0]
   10ac2:	bf18      	it	ne
   10ac4:	2301      	movne	r3, #1
   10ac6:	0692      	lsls	r2, r2, #26
   10ac8:	d42b      	bmi.n	10b22 <_printf_common+0xb0>
   10aca:	f104 0243 	add.w	r2, r4, #67	; 0x43
   10ace:	4649      	mov	r1, r9
   10ad0:	4638      	mov	r0, r7
   10ad2:	47c0      	blx	r8
   10ad4:	3001      	adds	r0, #1
   10ad6:	d01e      	beq.n	10b16 <_printf_common+0xa4>
   10ad8:	6823      	ldr	r3, [r4, #0]
   10ada:	68e5      	ldr	r5, [r4, #12]
   10adc:	6832      	ldr	r2, [r6, #0]
   10ade:	f003 0306 	and.w	r3, r3, #6
   10ae2:	2b04      	cmp	r3, #4
   10ae4:	bf08      	it	eq
   10ae6:	1aad      	subeq	r5, r5, r2
   10ae8:	68a3      	ldr	r3, [r4, #8]
   10aea:	6922      	ldr	r2, [r4, #16]
   10aec:	bf0c      	ite	eq
   10aee:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   10af2:	2500      	movne	r5, #0
   10af4:	4293      	cmp	r3, r2
   10af6:	bfc4      	itt	gt
   10af8:	1a9b      	subgt	r3, r3, r2
   10afa:	18ed      	addgt	r5, r5, r3
   10afc:	2600      	movs	r6, #0
   10afe:	341a      	adds	r4, #26
   10b00:	42b5      	cmp	r5, r6
   10b02:	d11a      	bne.n	10b3a <_printf_common+0xc8>
   10b04:	2000      	movs	r0, #0
   10b06:	e008      	b.n	10b1a <_printf_common+0xa8>
   10b08:	2301      	movs	r3, #1
   10b0a:	4652      	mov	r2, sl
   10b0c:	4649      	mov	r1, r9
   10b0e:	4638      	mov	r0, r7
   10b10:	47c0      	blx	r8
   10b12:	3001      	adds	r0, #1
   10b14:	d103      	bne.n	10b1e <_printf_common+0xac>
   10b16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10b1e:	3501      	adds	r5, #1
   10b20:	e7c6      	b.n	10ab0 <_printf_common+0x3e>
   10b22:	18e1      	adds	r1, r4, r3
   10b24:	1c5a      	adds	r2, r3, #1
   10b26:	2030      	movs	r0, #48	; 0x30
   10b28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   10b2c:	4422      	add	r2, r4
   10b2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   10b32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   10b36:	3302      	adds	r3, #2
   10b38:	e7c7      	b.n	10aca <_printf_common+0x58>
   10b3a:	2301      	movs	r3, #1
   10b3c:	4622      	mov	r2, r4
   10b3e:	4649      	mov	r1, r9
   10b40:	4638      	mov	r0, r7
   10b42:	47c0      	blx	r8
   10b44:	3001      	adds	r0, #1
   10b46:	d0e6      	beq.n	10b16 <_printf_common+0xa4>
   10b48:	3601      	adds	r6, #1
   10b4a:	e7d9      	b.n	10b00 <_printf_common+0x8e>

00010b4c <__sread>:
   10b4c:	b510      	push	{r4, lr}
   10b4e:	460c      	mov	r4, r1
   10b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10b54:	f7fd ff14 	bl	e980 <_read_r>
   10b58:	2800      	cmp	r0, #0
   10b5a:	bfab      	itete	ge
   10b5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   10b5e:	89a3      	ldrhlt	r3, [r4, #12]
   10b60:	181b      	addge	r3, r3, r0
   10b62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   10b66:	bfac      	ite	ge
   10b68:	6563      	strge	r3, [r4, #84]	; 0x54
   10b6a:	81a3      	strhlt	r3, [r4, #12]
   10b6c:	bd10      	pop	{r4, pc}

00010b6e <__swrite>:
   10b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b72:	461f      	mov	r7, r3
   10b74:	898b      	ldrh	r3, [r1, #12]
   10b76:	05db      	lsls	r3, r3, #23
   10b78:	4605      	mov	r5, r0
   10b7a:	460c      	mov	r4, r1
   10b7c:	4616      	mov	r6, r2
   10b7e:	d505      	bpl.n	10b8c <__swrite+0x1e>
   10b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10b84:	2302      	movs	r3, #2
   10b86:	2200      	movs	r2, #0
   10b88:	f7fd fea8 	bl	e8dc <_lseek_r>
   10b8c:	89a3      	ldrh	r3, [r4, #12]
   10b8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   10b92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   10b96:	81a3      	strh	r3, [r4, #12]
   10b98:	4632      	mov	r2, r6
   10b9a:	463b      	mov	r3, r7
   10b9c:	4628      	mov	r0, r5
   10b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10ba2:	f7fd bd1d 	b.w	e5e0 <_write_r>

00010ba6 <__sseek>:
   10ba6:	b510      	push	{r4, lr}
   10ba8:	460c      	mov	r4, r1
   10baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10bae:	f7fd fe95 	bl	e8dc <_lseek_r>
   10bb2:	1c43      	adds	r3, r0, #1
   10bb4:	89a3      	ldrh	r3, [r4, #12]
   10bb6:	bf15      	itete	ne
   10bb8:	6560      	strne	r0, [r4, #84]	; 0x54
   10bba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   10bbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   10bc2:	81a3      	strheq	r3, [r4, #12]
   10bc4:	bf18      	it	ne
   10bc6:	81a3      	strhne	r3, [r4, #12]
   10bc8:	bd10      	pop	{r4, pc}

00010bca <__sclose>:
   10bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10bce:	f7fd bda5 	b.w	e71c <_close_r>

00010bd2 <strcpy>:
   10bd2:	4603      	mov	r3, r0
   10bd4:	f811 2b01 	ldrb.w	r2, [r1], #1
   10bd8:	f803 2b01 	strb.w	r2, [r3], #1
   10bdc:	2a00      	cmp	r2, #0
   10bde:	d1f9      	bne.n	10bd4 <strcpy+0x2>
   10be0:	4770      	bx	lr

00010be2 <quorem>:
   10be2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10be6:	6903      	ldr	r3, [r0, #16]
   10be8:	690c      	ldr	r4, [r1, #16]
   10bea:	42a3      	cmp	r3, r4
   10bec:	4607      	mov	r7, r0
   10bee:	db7d      	blt.n	10cec <quorem+0x10a>
   10bf0:	3c01      	subs	r4, #1
   10bf2:	f101 0814 	add.w	r8, r1, #20
   10bf6:	f100 0514 	add.w	r5, r0, #20
   10bfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   10bfe:	9301      	str	r3, [sp, #4]
   10c00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   10c04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   10c08:	3301      	adds	r3, #1
   10c0a:	429a      	cmp	r2, r3
   10c0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   10c10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   10c14:	fbb2 f6f3 	udiv	r6, r2, r3
   10c18:	d32e      	bcc.n	10c78 <quorem+0x96>
   10c1a:	f04f 0e00 	mov.w	lr, #0
   10c1e:	4640      	mov	r0, r8
   10c20:	46ac      	mov	ip, r5
   10c22:	46f2      	mov	sl, lr
   10c24:	f850 2b04 	ldr.w	r2, [r0], #4
   10c28:	b293      	uxth	r3, r2
   10c2a:	fb06 e303 	mla	r3, r6, r3, lr
   10c2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   10c32:	0c12      	lsrs	r2, r2, #16
   10c34:	b29b      	uxth	r3, r3
   10c36:	fb06 e202 	mla	r2, r6, r2, lr
   10c3a:	ebaa 0303 	sub.w	r3, sl, r3
   10c3e:	f8dc a000 	ldr.w	sl, [ip]
   10c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   10c46:	b292      	uxth	r2, r2
   10c48:	fa13 f38a 	uxtah	r3, r3, sl
   10c4c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
   10c50:	eb02 4223 	add.w	r2, r2, r3, asr #16
   10c54:	b29b      	uxth	r3, r3
   10c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10c5a:	4581      	cmp	r9, r0
   10c5c:	f84c 3b04 	str.w	r3, [ip], #4
   10c60:	ea4f 4a22 	mov.w	sl, r2, asr #16
   10c64:	d2de      	bcs.n	10c24 <quorem+0x42>
   10c66:	f855 300b 	ldr.w	r3, [r5, fp]
   10c6a:	b92b      	cbnz	r3, 10c78 <quorem+0x96>
   10c6c:	9b01      	ldr	r3, [sp, #4]
   10c6e:	3b04      	subs	r3, #4
   10c70:	429d      	cmp	r5, r3
   10c72:	461a      	mov	r2, r3
   10c74:	d32e      	bcc.n	10cd4 <quorem+0xf2>
   10c76:	613c      	str	r4, [r7, #16]
   10c78:	4638      	mov	r0, r7
   10c7a:	f7ff feb8 	bl	109ee <__mcmp>
   10c7e:	2800      	cmp	r0, #0
   10c80:	db24      	blt.n	10ccc <quorem+0xea>
   10c82:	3601      	adds	r6, #1
   10c84:	4628      	mov	r0, r5
   10c86:	f04f 0c00 	mov.w	ip, #0
   10c8a:	f858 2b04 	ldr.w	r2, [r8], #4
   10c8e:	f8d0 e000 	ldr.w	lr, [r0]
   10c92:	b293      	uxth	r3, r2
   10c94:	ebac 0303 	sub.w	r3, ip, r3
   10c98:	0c12      	lsrs	r2, r2, #16
   10c9a:	fa13 f38e 	uxtah	r3, r3, lr
   10c9e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   10ca2:	eb02 4223 	add.w	r2, r2, r3, asr #16
   10ca6:	b29b      	uxth	r3, r3
   10ca8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10cac:	45c1      	cmp	r9, r8
   10cae:	f840 3b04 	str.w	r3, [r0], #4
   10cb2:	ea4f 4c22 	mov.w	ip, r2, asr #16
   10cb6:	d2e8      	bcs.n	10c8a <quorem+0xa8>
   10cb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   10cbc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   10cc0:	b922      	cbnz	r2, 10ccc <quorem+0xea>
   10cc2:	3b04      	subs	r3, #4
   10cc4:	429d      	cmp	r5, r3
   10cc6:	461a      	mov	r2, r3
   10cc8:	d30a      	bcc.n	10ce0 <quorem+0xfe>
   10cca:	613c      	str	r4, [r7, #16]
   10ccc:	4630      	mov	r0, r6
   10cce:	b003      	add	sp, #12
   10cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10cd4:	6812      	ldr	r2, [r2, #0]
   10cd6:	3b04      	subs	r3, #4
   10cd8:	2a00      	cmp	r2, #0
   10cda:	d1cc      	bne.n	10c76 <quorem+0x94>
   10cdc:	3c01      	subs	r4, #1
   10cde:	e7c7      	b.n	10c70 <quorem+0x8e>
   10ce0:	6812      	ldr	r2, [r2, #0]
   10ce2:	3b04      	subs	r3, #4
   10ce4:	2a00      	cmp	r2, #0
   10ce6:	d1f0      	bne.n	10cca <quorem+0xe8>
   10ce8:	3c01      	subs	r4, #1
   10cea:	e7eb      	b.n	10cc4 <quorem+0xe2>
   10cec:	2000      	movs	r0, #0
   10cee:	e7ee      	b.n	10cce <quorem+0xec>

00010cf0 <__swhatbuf_r>:
   10cf0:	b570      	push	{r4, r5, r6, lr}
   10cf2:	460e      	mov	r6, r1
   10cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   10cf8:	2900      	cmp	r1, #0
   10cfa:	b096      	sub	sp, #88	; 0x58
   10cfc:	4614      	mov	r4, r2
   10cfe:	461d      	mov	r5, r3
   10d00:	da08      	bge.n	10d14 <__swhatbuf_r+0x24>
   10d02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   10d06:	2200      	movs	r2, #0
   10d08:	602a      	str	r2, [r5, #0]
   10d0a:	061a      	lsls	r2, r3, #24
   10d0c:	d410      	bmi.n	10d30 <__swhatbuf_r+0x40>
   10d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   10d12:	e00e      	b.n	10d32 <__swhatbuf_r+0x42>
   10d14:	466a      	mov	r2, sp
   10d16:	f7fd fe45 	bl	e9a4 <_fstat_r>
   10d1a:	2800      	cmp	r0, #0
   10d1c:	dbf1      	blt.n	10d02 <__swhatbuf_r+0x12>
   10d1e:	9a01      	ldr	r2, [sp, #4]
   10d20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   10d24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   10d28:	425a      	negs	r2, r3
   10d2a:	415a      	adcs	r2, r3
   10d2c:	602a      	str	r2, [r5, #0]
   10d2e:	e7ee      	b.n	10d0e <__swhatbuf_r+0x1e>
   10d30:	2340      	movs	r3, #64	; 0x40
   10d32:	2000      	movs	r0, #0
   10d34:	6023      	str	r3, [r4, #0]
   10d36:	b016      	add	sp, #88	; 0x58
   10d38:	bd70      	pop	{r4, r5, r6, pc}

00010d3a <abort>:
   10d3a:	b508      	push	{r3, lr}
   10d3c:	2006      	movs	r0, #6
   10d3e:	f7fd fe53 	bl	e9e8 <raise>
   10d42:	2001      	movs	r0, #1
   10d44:	f7f5 ff6c 	bl	6c20 <_exit>

00010d48 <_raise_r>:
   10d48:	291f      	cmp	r1, #31
   10d4a:	b538      	push	{r3, r4, r5, lr}
   10d4c:	4604      	mov	r4, r0
   10d4e:	460d      	mov	r5, r1
   10d50:	d904      	bls.n	10d5c <_raise_r+0x14>
   10d52:	2316      	movs	r3, #22
   10d54:	6003      	str	r3, [r0, #0]
   10d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10d5a:	bd38      	pop	{r3, r4, r5, pc}
   10d5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   10d5e:	b112      	cbz	r2, 10d66 <_raise_r+0x1e>
   10d60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   10d64:	b94b      	cbnz	r3, 10d7a <_raise_r+0x32>
   10d66:	4620      	mov	r0, r4
   10d68:	f000 f816 	bl	10d98 <_getpid_r>
   10d6c:	462a      	mov	r2, r5
   10d6e:	4601      	mov	r1, r0
   10d70:	4620      	mov	r0, r4
   10d72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10d76:	f7fd be3f 	b.w	e9f8 <_kill_r>
   10d7a:	2b01      	cmp	r3, #1
   10d7c:	d00a      	beq.n	10d94 <_raise_r+0x4c>
   10d7e:	1c59      	adds	r1, r3, #1
   10d80:	d103      	bne.n	10d8a <_raise_r+0x42>
   10d82:	2316      	movs	r3, #22
   10d84:	6003      	str	r3, [r0, #0]
   10d86:	2001      	movs	r0, #1
   10d88:	e7e7      	b.n	10d5a <_raise_r+0x12>
   10d8a:	2400      	movs	r4, #0
   10d8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   10d90:	4628      	mov	r0, r5
   10d92:	4798      	blx	r3
   10d94:	2000      	movs	r0, #0
   10d96:	e7e0      	b.n	10d5a <_raise_r+0x12>

00010d98 <_getpid_r>:
   10d98:	f7fe bbd4 	b.w	f544 <_getpid>

00010d9c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   10d9c:	f7f7 be90 	b.w	8ac0 <SystemInit>
