
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 59 00 20 5d 36 00 00 29 a0 00 00 15 36 00 00     .Y. ]6..)....6..
  10:	15 36 00 00 15 36 00 00 15 36 00 00 00 00 00 00     .6...6...6......
	...
  2c:	f1 2d 00 00 15 36 00 00 00 00 00 00 99 2d 00 00     .-...6.......-..
  3c:	15 36 00 00                                         .6..

00000040 <_irq_vector_table>:
  40:	d1 2e 00 00 d1 2e 00 00 d1 2e 00 00 d1 2e 00 00     ................
  50:	d1 2e 00 00 d1 2e 00 00 d1 2e 00 00 d1 2e 00 00     ................
  60:	d1 2e 00 00 d1 2e 00 00 d1 2e 00 00 d1 2e 00 00     ................
  70:	d1 2e 00 00 d1 2e 00 00 d1 2e 00 00 d1 2e 00 00     ................
  80:	d1 2e 00 00 d1 2e 00 00 d1 2e 00 00 d1 2e 00 00     ................
  90:	d1 2e 00 00 d1 2e 00 00 d1 2e 00 00 d1 2e 00 00     ................
  a0:	d1 2e 00 00 d1 2e 00 00 d1 2e 00 00 d1 2e 00 00     ................
  b0:	d1 2e 00 00 d1 2e 00 00 d1 2e 00 00 d1 2e 00 00     ................
  c0:	d1 2e 00 00 d1 2e 00 00 d1 2e 00 00 d1 2e 00 00     ................
  d0:	d1 2e 00 00 d1 2e 00 00 d1 2e 00 00 d1 2e 00 00     ................
  e0:	d1 2e 00 00 d1 2e 00 00 d1 2e 00 00 d1 2e 00 00     ................
  f0:	d1 2e 00 00 d1 2e 00 00 d1 2e 00 00 d1 2e 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16b>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdd>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x167>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17b>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1a3>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x189>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x193>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x261>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x265>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23b>
     3a2:	d106      	bne.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19b>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
	...

000003dc <thread_near_obstacle_code>:
    return;
}

/* Thread code implementation */
void thread_near_obstacle_code(void *argA, void *argB, void *argC)
{
     3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3e0:	b089      	sub	sp, #36	; 0x24
    int64_t release_time = 0, fin_time = 0, tno = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;

    printk("Thread near_obstacle init (periodic)\n");
     3e2:	485f      	ldr	r0, [pc, #380]	; (560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>)
     3e4:	f009 fbc0 	bl	9b68 <printk>
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
     3e8:	f00a fc7d 	bl	ace6 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
     3ec:	014a      	lsls	r2, r1, #5
     3ee:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
     3f2:	0143      	lsls	r3, r0, #5
     3f4:	1a1b      	subs	r3, r3, r0
     3f6:	eb62 0201 	sbc.w	r2, r2, r1
     3fa:	0092      	lsls	r2, r2, #2
     3fc:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     400:	009b      	lsls	r3, r3, #2
     402:	181d      	adds	r5, r3, r0
     404:	eb42 0301 	adc.w	r3, r2, r1
     408:	00db      	lsls	r3, r3, #3
     40a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
     40e:	f3c5 3510 	ubfx	r5, r5, #12, #17
     412:	ea45 4543 	orr.w	r5, r5, r3, lsl #17
     416:	0bdb      	lsrs	r3, r3, #15

    /* Compute next release instant */
    release_time = k_uptime_get() + SAMP_PERIOD_MS;
     418:	f515 757a 	adds.w	r5, r5, #1000	; 0x3e8
     41c:	f143 0600 	adc.w	r6, r3, #0
    int64_t release_time = 0, fin_time = 0, tno = 0, t_prev = 0, t_min = SAMP_PERIOD_MS, t_max = SAMP_PERIOD_MS;
     420:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
     424:	f04f 0800 	mov.w	r8, #0
     428:	46ca      	mov	sl, r9
     42a:	46c3      	mov	fp, r8
     42c:	f8cd 8014 	str.w	r8, [sp, #20]
     430:	f8cd 8018 	str.w	r8, [sp, #24]
     434:	e074      	b.n	520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>
            int inObs = 0;
            for (i = NOB_COL; i < NOB_COL * 3; i++)
            {
                if (vertical_guide_image_data[j][i] == OBSTACLE_COLOR)
                {
                    inObs++;
     436:	3101      	adds	r1, #1
                }
                else if (inObs > 1)
                {
                    inObs = 0;
                }
                if (inObs > 1)
     438:	2901      	cmp	r1, #1
     43a:	dd00      	ble.n	43e <CONFIG_FLASH_SIZE+0x3e>
                    res=1;
     43c:	2401      	movs	r4, #1
            for (i = NOB_COL; i < NOB_COL * 3; i++)
     43e:	3301      	adds	r3, #1
     440:	2b5f      	cmp	r3, #95	; 0x5f
     442:	dc09      	bgt.n	458 <CONFIG_FLASH_SIZE+0x58>
                if (vertical_guide_image_data[j][i] == OBSTACLE_COLOR)
     444:	4a47      	ldr	r2, [pc, #284]	; (564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>)
     446:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
     44a:	5cd2      	ldrb	r2, [r2, r3]
     44c:	2a80      	cmp	r2, #128	; 0x80
     44e:	d0f2      	beq.n	436 <CONFIG_FLASH_SIZE+0x36>
                else if (inObs > 1)
     450:	2901      	cmp	r1, #1
     452:	ddf1      	ble.n	438 <CONFIG_FLASH_SIZE+0x38>
                    inObs = 0;
     454:	2100      	movs	r1, #0
     456:	e7f2      	b.n	43e <CONFIG_FLASH_SIZE+0x3e>
        for (j = 0; j < NOB_ROW; j++)
     458:	3001      	adds	r0, #1
     45a:	283f      	cmp	r0, #63	; 0x3f
     45c:	dc02      	bgt.n	464 <CONFIG_FLASH_SIZE+0x64>
            int inObs = 0;
     45e:	2100      	movs	r1, #0
            for (i = NOB_COL; i < NOB_COL * 3; i++)
     460:	2320      	movs	r3, #32
     462:	e7ed      	b.n	440 <CONFIG_FLASH_SIZE+0x40>
            }
        }
        
        
        printk("Closeby obstacles detected: %s\n\r", res == 1 ? "Yes" : "No");
     464:	bb64      	cbnz	r4, 4c0 <CONFIG_FLASH_SIZE+0xc0>
     466:	4940      	ldr	r1, [pc, #256]	; (568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>)
     468:	4840      	ldr	r0, [pc, #256]	; (56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>)
     46a:	f009 fb7d 	bl	9b68 <printk>
     46e:	f00a fc3a 	bl	ace6 <z_impl_k_uptime_ticks>
     472:	014a      	lsls	r2, r1, #5
     474:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
     478:	0143      	lsls	r3, r0, #5
     47a:	1a1b      	subs	r3, r3, r0
     47c:	eb62 0201 	sbc.w	r2, r2, r1
     480:	0092      	lsls	r2, r2, #2
     482:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
     486:	009b      	lsls	r3, r3, #2
     488:	181b      	adds	r3, r3, r0
     48a:	eb42 0701 	adc.w	r7, r2, r1
     48e:	00ff      	lsls	r7, r7, #3
     490:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
     494:	f3c3 3410 	ubfx	r4, r3, #12, #17
     498:	ea44 4447 	orr.w	r4, r4, r7, lsl #17
     49c:	0bff      	lsrs	r7, r7, #15
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
     49e:	9407      	str	r4, [sp, #28]
        

        /* Wait for next release instant */
        fin_time = k_uptime_get();
        
        if (fin_time - t_prev < t_min)
     4a0:	9b05      	ldr	r3, [sp, #20]
     4a2:	1ae2      	subs	r2, r4, r3
     4a4:	9b06      	ldr	r3, [sp, #24]
     4a6:	eb67 0303 	sbc.w	r3, r7, r3
     4aa:	4552      	cmp	r2, sl
     4ac:	eb73 010b 	sbcs.w	r1, r3, fp
     4b0:	db08      	blt.n	4c4 <CONFIG_FLASH_SIZE+0xc4>
            t_min = fin_time - t_prev;
        else if (fin_time - t_prev > t_max)
     4b2:	4591      	cmp	r9, r2
     4b4:	eb78 0103 	sbcs.w	r1, r8, r3
     4b8:	da06      	bge.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
            t_max = fin_time - t_prev;
     4ba:	4691      	mov	r9, r2
     4bc:	4698      	mov	r8, r3
     4be:	e003      	b.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
        printk("Closeby obstacles detected: %s\n\r", res == 1 ? "Yes" : "No");
     4c0:	492b      	ldr	r1, [pc, #172]	; (570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>)
     4c2:	e7d1      	b.n	468 <CONFIG_FLASH_SIZE+0x68>
            t_min = fin_time - t_prev;
     4c4:	4692      	mov	sl, r2
     4c6:	469b      	mov	fp, r3
     4c8:	f00a fc0d 	bl	ace6 <z_impl_k_uptime_ticks>
     4cc:	014b      	lsls	r3, r1, #5
     4ce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
     4d2:	0142      	lsls	r2, r0, #5
     4d4:	1a12      	subs	r2, r2, r0
     4d6:	eb63 0301 	sbc.w	r3, r3, r1
     4da:	009b      	lsls	r3, r3, #2
     4dc:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
     4e0:	0092      	lsls	r2, r2, #2
     4e2:	1812      	adds	r2, r2, r0
     4e4:	eb43 0301 	adc.w	r3, r3, r1
     4e8:	00db      	lsls	r3, r3, #3
     4ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     4ee:	f3c2 3210 	ubfx	r2, r2, #12, #17
            
        t_prev = fin_time;

        printk("Task %s arrived at %lld inter-arrival time (us): min: %lld / max: %lld \n\r", "near obstacle", (long long)k_uptime_get(), t_min, t_max);
     4f2:	f8cd 9008 	str.w	r9, [sp, #8]
     4f6:	f8cd 800c 	str.w	r8, [sp, #12]
     4fa:	f8cd a000 	str.w	sl, [sp]
     4fe:	f8cd b004 	str.w	fp, [sp, #4]
     502:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
     506:	0bdb      	lsrs	r3, r3, #15
     508:	491a      	ldr	r1, [pc, #104]	; (574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>)
     50a:	481b      	ldr	r0, [pc, #108]	; (578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>)
     50c:	f009 fb2c 	bl	9b68 <printk>
        if (fin_time < release_time)
     510:	9b07      	ldr	r3, [sp, #28]
     512:	42ab      	cmp	r3, r5
     514:	eb77 0306 	sbcs.w	r3, r7, r6
     518:	db08      	blt.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
{
     51a:	9b07      	ldr	r3, [sp, #28]
     51c:	9305      	str	r3, [sp, #20]
     51e:	9706      	str	r7, [sp, #24]
        printk("Detecting closeby obstacles ...");
     520:	4816      	ldr	r0, [pc, #88]	; (57c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x94>)
     522:	f009 fb21 	bl	9b68 <printk>
        int res=0;
     526:	2400      	movs	r4, #0
        for (j = 0; j < NOB_ROW; j++)
     528:	4620      	mov	r0, r4
     52a:	e796      	b.n	45a <CONFIG_FLASH_SIZE+0x5a>
        {
            k_msleep(release_time - fin_time);
     52c:	1b2b      	subs	r3, r5, r4
	return k_sleep(Z_TIMEOUT_MS(ms));
     52e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
     532:	17d9      	asrs	r1, r3, #31
     534:	03c9      	lsls	r1, r1, #15
     536:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
     53a:	03db      	lsls	r3, r3, #15
     53c:	f240 30e7 	movw	r0, #999	; 0x3e7
     540:	1818      	adds	r0, r3, r0
     542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     546:	f04f 0300 	mov.w	r3, #0
     54a:	f141 0100 	adc.w	r1, r1, #0
     54e:	f7ff fdd7 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     552:	f008 fc31 	bl	8db8 <z_impl_k_sleep>
            release_time += SAMP_PERIOD_MS;
     556:	f515 757a 	adds.w	r5, r5, #1000	; 0x3e8
     55a:	f146 0600 	adc.w	r6, r6, #0
     55e:	e7dc      	b.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
     560:	0000b070 	.word	0x0000b070
     564:	20000000 	.word	0x20000000
     568:	0000b068 	.word	0x0000b068
     56c:	0000b0b8 	.word	0x0000b0b8
     570:	0000b06c 	.word	0x0000b06c
     574:	0000b0dc 	.word	0x0000b0dc
     578:	0000b0ec 	.word	0x0000b0ec
     57c:	0000b098 	.word	0x0000b098

00000580 <main>:
{
     580:	b500      	push	{lr}
     582:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     584:	2200      	movs	r2, #0
     586:	2300      	movs	r3, #0
     588:	e9cd 2306 	strd	r2, r3, [sp, #24]
     58c:	2300      	movs	r3, #0
     58e:	9304      	str	r3, [sp, #16]
     590:	2201      	movs	r2, #1
     592:	9203      	str	r2, [sp, #12]
     594:	9302      	str	r3, [sp, #8]
     596:	9301      	str	r3, [sp, #4]
     598:	9300      	str	r3, [sp, #0]
     59a:	4b06      	ldr	r3, [pc, #24]	; (5b4 <main+0x34>)
     59c:	f44f 6280 	mov.w	r2, #1024	; 0x400
     5a0:	4905      	ldr	r1, [pc, #20]	; (5b8 <main+0x38>)
     5a2:	4806      	ldr	r0, [pc, #24]	; (5bc <main+0x3c>)
     5a4:	f006 fef6 	bl	7394 <z_impl_k_thread_create>
    thread_near_obstacle_tid = k_thread_create(&thread_near_obstacle_data, thread_near_obstacle_stack,
     5a8:	4b05      	ldr	r3, [pc, #20]	; (5c0 <main+0x40>)
     5aa:	6018      	str	r0, [r3, #0]
}
     5ac:	b009      	add	sp, #36	; 0x24
     5ae:	f85d fb04 	ldr.w	pc, [sp], #4
     5b2:	bf00      	nop
     5b4:	000003dd 	.word	0x000003dd
     5b8:	20005160 	.word	0x20005160
     5bc:	200041c0 	.word	0x200041c0
     5c0:	200043f8 	.word	0x200043f8

000005c4 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5c8:	b08d      	sub	sp, #52	; 0x34
     5ca:	9205      	str	r2, [sp, #20]
     5cc:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     5ce:	4613      	mov	r3, r2
     5d0:	f002 0204 	and.w	r2, r2, #4
     5d4:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     5d6:	f3c3 02c2 	ubfx	r2, r3, #3, #3

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     5da:	f010 0303 	ands.w	r3, r0, #3
     5de:	9302      	str	r3, [sp, #8]
     5e0:	f040 8293 	bne.w	b0a <CONFIG_ISR_STACK_SIZE+0x30a>
     5e4:	4607      	mov	r7, r0
     5e6:	468a      	mov	sl, r1
     5e8:	3201      	adds	r2, #1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     5ea:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     5ec:	2800      	cmp	r0, #0
     5ee:	d041      	beq.n	674 <cbvprintf_package+0xb0>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     5f0:	b127      	cbz	r7, 5fc <cbvprintf_package+0x38>
     5f2:	1be3      	subs	r3, r4, r7
     5f4:	3304      	adds	r3, #4
     5f6:	4553      	cmp	r3, sl
     5f8:	f200 828a 	bhi.w	b10 <CONFIG_ISR_STACK_SIZE+0x310>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
     5fc:	9b03      	ldr	r3, [sp, #12]
     5fe:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     600:	f8dd b008 	ldr.w	fp, [sp, #8]
     604:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     608:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
     60c:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
     60e:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
     612:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     614:	b10f      	cbz	r7, 61a <cbvprintf_package+0x56>
				*(const char **)buf = s;
     616:	9b03      	ldr	r3, [sp, #12]
     618:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     61a:	1e53      	subs	r3, r2, #1
     61c:	9307      	str	r3, [sp, #28]
     61e:	2a00      	cmp	r2, #0
     620:	f340 80b7 	ble.w	792 <cbvprintf_package+0x1ce>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     624:	9b05      	ldr	r3, [sp, #20]
     626:	f013 0202 	ands.w	r2, r3, #2
     62a:	d021      	beq.n	670 <cbvprintf_package+0xac>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     62c:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     62e:	1be1      	subs	r1, r4, r7
     630:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     632:	b11a      	cbz	r2, 63c <cbvprintf_package+0x78>
     634:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     638:	f080 80bf 	bcs.w	7ba <cbvprintf_package+0x1f6>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     63c:	f1bb 0f0f 	cmp.w	fp, #15
     640:	f200 80ce 	bhi.w	7e0 <cbvprintf_package+0x21c>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
     644:	2f00      	cmp	r7, #0
     646:	f000 80e2 	beq.w	80e <CONFIG_ISR_STACK_SIZE+0xe>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
     64a:	b2db      	uxtb	r3, r3
     64c:	aa0c      	add	r2, sp, #48	; 0x30
     64e:	445a      	add	r2, fp
     650:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
     654:	2800      	cmp	r0, #0
     656:	f000 80d6 	beq.w	806 <CONFIG_ISR_STACK_SIZE+0x6>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     65a:	f063 037f 	orn	r3, r3, #127	; 0x7f
     65e:	aa0c      	add	r2, sp, #48	; 0x30
     660:	445a      	add	r2, fp
     662:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
     666:	9b04      	ldr	r3, [sp, #16]
     668:	3301      	adds	r3, #1
     66a:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
     66c:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
     670:	3404      	adds	r4, #4
     672:	e0f6      	b.n	862 <CONFIG_ISR_STACK_SIZE+0x62>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     674:	f001 0a07 	and.w	sl, r1, #7
     678:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     67a:	f1ca 0a08 	rsb	sl, sl, #8
     67e:	e7b7      	b.n	5f0 <cbvprintf_package+0x2c>
			if (*fmt == '%') {
     680:	2b25      	cmp	r3, #37	; 0x25
     682:	f040 80ed 	bne.w	860 <CONFIG_ISR_STACK_SIZE+0x60>
				parsing = true;
     686:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
     688:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
     68c:	46c1      	mov	r9, r8
			continue;
     68e:	e0e7      	b.n	860 <CONFIG_ISR_STACK_SIZE+0x60>
			align = VA_STACK_ALIGN(intmax_t);
     690:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
     694:	46c1      	mov	r9, r8
			continue;
     696:	e0e3      	b.n	860 <CONFIG_ISR_STACK_SIZE+0x60>
			align = VA_STACK_ALIGN(size_t);
     698:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
     69c:	46c1      	mov	r9, r8
			continue;
     69e:	e0df      	b.n	860 <CONFIG_ISR_STACK_SIZE+0x60>
			align = VA_STACK_ALIGN(ptrdiff_t);
     6a0:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
     6a4:	46c1      	mov	r9, r8
			continue;
     6a6:	e0db      	b.n	860 <CONFIG_ISR_STACK_SIZE+0x60>
			if (fmt[-1] == 'l') {
     6a8:	782a      	ldrb	r2, [r5, #0]
     6aa:	2a6c      	cmp	r2, #108	; 0x6c
     6ac:	d026      	beq.n	6fc <cbvprintf_package+0x138>
			parsing = false;
     6ae:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
     6b0:	eb04 0208 	add.w	r2, r4, r8
     6b4:	3a01      	subs	r2, #1
     6b6:	f1c8 0100 	rsb	r1, r8, #0
     6ba:	400a      	ands	r2, r1
     6bc:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     6be:	b127      	cbz	r7, 6ca <cbvprintf_package+0x106>
     6c0:	1bd1      	subs	r1, r2, r7
     6c2:	4449      	add	r1, r9
     6c4:	4551      	cmp	r1, sl
     6c6:	f200 8226 	bhi.w	b16 <CONFIG_ISR_STACK_SIZE+0x316>
		if (*fmt == 's') {
     6ca:	2b73      	cmp	r3, #115	; 0x73
     6cc:	d059      	beq.n	782 <cbvprintf_package+0x1be>
		} else if (size == sizeof(int)) {
     6ce:	f1b9 0f04 	cmp.w	r9, #4
     6d2:	f000 80a8 	beq.w	826 <CONFIG_ISR_STACK_SIZE+0x26>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     6d6:	f1b9 0f08 	cmp.w	r9, #8
     6da:	f040 80ac 	bne.w	836 <CONFIG_ISR_STACK_SIZE+0x36>
			long long v = va_arg(ap, long long);
     6de:	9b16      	ldr	r3, [sp, #88]	; 0x58
     6e0:	3307      	adds	r3, #7
     6e2:	f023 0307 	bic.w	r3, r3, #7
     6e6:	f103 0108 	add.w	r1, r3, #8
     6ea:	9116      	str	r1, [sp, #88]	; 0x58
     6ec:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
     6f0:	b10f      	cbz	r7, 6f6 <cbvprintf_package+0x132>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     6f2:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
     6f6:	f102 0408 	add.w	r4, r2, #8
     6fa:	e0b1      	b.n	860 <CONFIG_ISR_STACK_SIZE+0x60>
				if (fmt[-2] == 'l') {
     6fc:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
     700:	2a6c      	cmp	r2, #108	; 0x6c
     702:	d004      	beq.n	70e <cbvprintf_package+0x14a>
			parsing = false;
     704:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
     706:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
     70a:	46c1      	mov	r9, r8
     70c:	e7d0      	b.n	6b0 <cbvprintf_package+0xec>
			parsing = false;
     70e:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
     710:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
     714:	46c1      	mov	r9, r8
     716:	e7cb      	b.n	6b0 <cbvprintf_package+0xec>
			if (fmt[-1] == 'L') {
     718:	782b      	ldrb	r3, [r5, #0]
     71a:	2b4c      	cmp	r3, #76	; 0x4c
     71c:	d01c      	beq.n	758 <cbvprintf_package+0x194>
				v.d = va_arg(ap, double);
     71e:	9b16      	ldr	r3, [sp, #88]	; 0x58
     720:	3307      	adds	r3, #7
     722:	f023 0307 	bic.w	r3, r3, #7
     726:	f103 0208 	add.w	r2, r3, #8
     72a:	9216      	str	r2, [sp, #88]	; 0x58
     72c:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
     730:	1de2      	adds	r2, r4, #7
     732:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
     736:	b147      	cbz	r7, 74a <cbvprintf_package+0x186>
				if (BUF_OFFSET + size > len) {
     738:	1bd3      	subs	r3, r2, r7
     73a:	3308      	adds	r3, #8
     73c:	4553      	cmp	r3, sl
     73e:	d815      	bhi.n	76c <cbvprintf_package+0x1a8>
				} else if (fmt[-1] == 'L') {
     740:	782b      	ldrb	r3, [r5, #0]
     742:	2b4c      	cmp	r3, #76	; 0x4c
     744:	d015      	beq.n	772 <cbvprintf_package+0x1ae>
					*(double *)buf = v.d;
     746:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
     74a:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
     74e:	2600      	movs	r6, #0
			continue;
     750:	f04f 0808 	mov.w	r8, #8
     754:	46c1      	mov	r9, r8
     756:	e083      	b.n	860 <CONFIG_ISR_STACK_SIZE+0x60>
				v.ld = va_arg(ap, long double);
     758:	9b16      	ldr	r3, [sp, #88]	; 0x58
     75a:	3307      	adds	r3, #7
     75c:	f023 0307 	bic.w	r3, r3, #7
     760:	f103 0208 	add.w	r2, r3, #8
     764:	9216      	str	r2, [sp, #88]	; 0x58
     766:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
     76a:	e7e1      	b.n	730 <cbvprintf_package+0x16c>
					return -ENOSPC;
     76c:	f06f 001b 	mvn.w	r0, #27
     770:	e1c8      	b.n	b04 <CONFIG_ISR_STACK_SIZE+0x304>
					*(long double *)buf = v.ld;
     772:	e9c2 0100 	strd	r0, r1, [r2]
     776:	e7e8      	b.n	74a <cbvprintf_package+0x186>
			parsing = false;
     778:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
     77a:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
     77e:	46c1      	mov	r9, r8
     780:	e796      	b.n	6b0 <cbvprintf_package+0xec>
			s = va_arg(ap, char *);
     782:	9b16      	ldr	r3, [sp, #88]	; 0x58
     784:	1d1a      	adds	r2, r3, #4
     786:	9216      	str	r2, [sp, #88]	; 0x58
     788:	681b      	ldr	r3, [r3, #0]
     78a:	9303      	str	r3, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     78c:	9a07      	ldr	r2, [sp, #28]
	while (*++fmt != '\0') {
     78e:	4665      	mov	r5, ip
     790:	e740      	b.n	614 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     792:	4bbb      	ldr	r3, [pc, #748]	; (a80 <CONFIG_ISR_STACK_SIZE+0x280>)
     794:	9a03      	ldr	r2, [sp, #12]
     796:	429a      	cmp	r2, r3
     798:	d304      	bcc.n	7a4 <cbvprintf_package+0x1e0>
     79a:	4bba      	ldr	r3, [pc, #744]	; (a84 <CONFIG_ISR_STACK_SIZE+0x284>)
     79c:	429a      	cmp	r2, r3
     79e:	d30a      	bcc.n	7b6 <cbvprintf_package+0x1f2>
     7a0:	2300      	movs	r3, #0
     7a2:	e000      	b.n	7a6 <cbvprintf_package+0x1e2>
     7a4:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     7a6:	2b00      	cmp	r3, #0
     7a8:	f47f af3c 	bne.w	624 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     7ac:	9b05      	ldr	r3, [sp, #20]
     7ae:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     7b2:	2000      	movs	r0, #0
     7b4:	e73b      	b.n	62e <cbvprintf_package+0x6a>
     7b6:	2301      	movs	r3, #1
     7b8:	e7f5      	b.n	7a6 <cbvprintf_package+0x1e2>
					__ASSERT(false, "String with too many arguments");
     7ba:	4cb3      	ldr	r4, [pc, #716]	; (a88 <CONFIG_ISR_STACK_SIZE+0x288>)
     7bc:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
     7c0:	4622      	mov	r2, r4
     7c2:	49b2      	ldr	r1, [pc, #712]	; (a8c <CONFIG_ISR_STACK_SIZE+0x28c>)
     7c4:	48b2      	ldr	r0, [pc, #712]	; (a90 <CONFIG_ISR_STACK_SIZE+0x290>)
     7c6:	f009 fb54 	bl	9e72 <assert_print>
     7ca:	48b2      	ldr	r0, [pc, #712]	; (a94 <CONFIG_ISR_STACK_SIZE+0x294>)
     7cc:	f009 fb51 	bl	9e72 <assert_print>
     7d0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
     7d4:	4620      	mov	r0, r4
     7d6:	f009 fb45 	bl	9e64 <assert_post_action>
					return -EINVAL;
     7da:	f06f 0015 	mvn.w	r0, #21
     7de:	e191      	b.n	b04 <CONFIG_ISR_STACK_SIZE+0x304>
					__ASSERT(false, "str_ptr_pos[] too small");
     7e0:	4ca9      	ldr	r4, [pc, #676]	; (a88 <CONFIG_ISR_STACK_SIZE+0x288>)
     7e2:	f240 13f5 	movw	r3, #501	; 0x1f5
     7e6:	4622      	mov	r2, r4
     7e8:	49a8      	ldr	r1, [pc, #672]	; (a8c <CONFIG_ISR_STACK_SIZE+0x28c>)
     7ea:	48a9      	ldr	r0, [pc, #676]	; (a90 <CONFIG_ISR_STACK_SIZE+0x290>)
     7ec:	f009 fb41 	bl	9e72 <assert_print>
     7f0:	48a9      	ldr	r0, [pc, #676]	; (a98 <CONFIG_ISR_STACK_SIZE+0x298>)
     7f2:	f009 fb3e 	bl	9e72 <assert_print>
     7f6:	f240 11f5 	movw	r1, #501	; 0x1f5
     7fa:	4620      	mov	r0, r4
     7fc:	f009 fb32 	bl	9e64 <assert_post_action>
					return -EINVAL;
     800:	f06f 0015 	mvn.w	r0, #21
     804:	e17e      	b.n	b04 <CONFIG_ISR_STACK_SIZE+0x304>
						s_rw_cnt++;
     806:	9b06      	ldr	r3, [sp, #24]
     808:	3301      	adds	r3, #1
     80a:	9306      	str	r3, [sp, #24]
     80c:	e72e      	b.n	66c <cbvprintf_package+0xa8>
				} else if (is_ro || rws_pos_en) {
     80e:	b908      	cbnz	r0, 814 <CONFIG_ISR_STACK_SIZE+0x14>
     810:	9b01      	ldr	r3, [sp, #4]
     812:	b113      	cbz	r3, 81a <CONFIG_ISR_STACK_SIZE+0x1a>
					len += 1;
     814:	f10a 0a01 	add.w	sl, sl, #1
     818:	e728      	b.n	66c <cbvprintf_package+0xa8>
					len += strlen(s) + 1 + 1;
     81a:	9803      	ldr	r0, [sp, #12]
     81c:	f009 fca3 	bl	a166 <strlen>
     820:	1c83      	adds	r3, r0, #2
     822:	449a      	add	sl, r3
     824:	e722      	b.n	66c <cbvprintf_package+0xa8>
			int v = va_arg(ap, int);
     826:	9b16      	ldr	r3, [sp, #88]	; 0x58
     828:	1d19      	adds	r1, r3, #4
     82a:	9116      	str	r1, [sp, #88]	; 0x58
     82c:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
     82e:	b107      	cbz	r7, 832 <CONFIG_ISR_STACK_SIZE+0x32>
				*(int *)buf = v;
     830:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
     832:	1d14      	adds	r4, r2, #4
     834:	e014      	b.n	860 <CONFIG_ISR_STACK_SIZE+0x60>
		} else {
			__ASSERT(false, "unexpected size %u", size);
     836:	4c94      	ldr	r4, [pc, #592]	; (a88 <CONFIG_ISR_STACK_SIZE+0x288>)
     838:	f240 2331 	movw	r3, #561	; 0x231
     83c:	4622      	mov	r2, r4
     83e:	4993      	ldr	r1, [pc, #588]	; (a8c <CONFIG_ISR_STACK_SIZE+0x28c>)
     840:	4893      	ldr	r0, [pc, #588]	; (a90 <CONFIG_ISR_STACK_SIZE+0x290>)
     842:	f009 fb16 	bl	9e72 <assert_print>
     846:	4649      	mov	r1, r9
     848:	4894      	ldr	r0, [pc, #592]	; (a9c <CONFIG_ISR_STACK_SIZE+0x29c>)
     84a:	f009 fb12 	bl	9e72 <assert_print>
     84e:	f240 2131 	movw	r1, #561	; 0x231
     852:	4620      	mov	r0, r4
     854:	f009 fb06 	bl	9e64 <assert_post_action>
			return -EINVAL;
     858:	f06f 0015 	mvn.w	r0, #21
     85c:	e152      	b.n	b04 <CONFIG_ISR_STACK_SIZE+0x304>
		switch (*fmt) {
     85e:	2600      	movs	r6, #0
     860:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
     862:	f105 0c01 	add.w	ip, r5, #1
     866:	786b      	ldrb	r3, [r5, #1]
     868:	2b00      	cmp	r3, #0
     86a:	f000 80c1 	beq.w	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
		if (!parsing) {
     86e:	2e00      	cmp	r6, #0
     870:	f43f af06 	beq.w	680 <cbvprintf_package+0xbc>
		switch (*fmt) {
     874:	f1a3 0120 	sub.w	r1, r3, #32
     878:	295a      	cmp	r1, #90	; 0x5a
     87a:	d8f0      	bhi.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
     87c:	a201      	add	r2, pc, #4	; (adr r2, 884 <CONFIG_ISR_STACK_SIZE+0x84>)
     87e:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
     882:	bf00      	nop
     884:	00000861 	.word	0x00000861
     888:	0000085f 	.word	0x0000085f
     88c:	0000085f 	.word	0x0000085f
     890:	00000861 	.word	0x00000861
     894:	0000085f 	.word	0x0000085f
     898:	0000085f 	.word	0x0000085f
     89c:	0000085f 	.word	0x0000085f
     8a0:	0000085f 	.word	0x0000085f
     8a4:	0000085f 	.word	0x0000085f
     8a8:	0000085f 	.word	0x0000085f
     8ac:	000006b1 	.word	0x000006b1
     8b0:	00000861 	.word	0x00000861
     8b4:	0000085f 	.word	0x0000085f
     8b8:	00000861 	.word	0x00000861
     8bc:	00000861 	.word	0x00000861
     8c0:	0000085f 	.word	0x0000085f
     8c4:	00000861 	.word	0x00000861
     8c8:	00000861 	.word	0x00000861
     8cc:	00000861 	.word	0x00000861
     8d0:	00000861 	.word	0x00000861
     8d4:	00000861 	.word	0x00000861
     8d8:	00000861 	.word	0x00000861
     8dc:	00000861 	.word	0x00000861
     8e0:	00000861 	.word	0x00000861
     8e4:	00000861 	.word	0x00000861
     8e8:	00000861 	.word	0x00000861
     8ec:	0000085f 	.word	0x0000085f
     8f0:	0000085f 	.word	0x0000085f
     8f4:	0000085f 	.word	0x0000085f
     8f8:	0000085f 	.word	0x0000085f
     8fc:	0000085f 	.word	0x0000085f
     900:	0000085f 	.word	0x0000085f
     904:	0000085f 	.word	0x0000085f
     908:	00000719 	.word	0x00000719
     90c:	0000085f 	.word	0x0000085f
     910:	0000085f 	.word	0x0000085f
     914:	0000085f 	.word	0x0000085f
     918:	00000719 	.word	0x00000719
     91c:	00000719 	.word	0x00000719
     920:	00000719 	.word	0x00000719
     924:	0000085f 	.word	0x0000085f
     928:	0000085f 	.word	0x0000085f
     92c:	0000085f 	.word	0x0000085f
     930:	0000085f 	.word	0x0000085f
     934:	00000861 	.word	0x00000861
     938:	0000085f 	.word	0x0000085f
     93c:	0000085f 	.word	0x0000085f
     940:	0000085f 	.word	0x0000085f
     944:	0000085f 	.word	0x0000085f
     948:	0000085f 	.word	0x0000085f
     94c:	0000085f 	.word	0x0000085f
     950:	0000085f 	.word	0x0000085f
     954:	0000085f 	.word	0x0000085f
     958:	0000085f 	.word	0x0000085f
     95c:	0000085f 	.word	0x0000085f
     960:	0000085f 	.word	0x0000085f
     964:	000006a9 	.word	0x000006a9
     968:	0000085f 	.word	0x0000085f
     96c:	0000085f 	.word	0x0000085f
     970:	0000085f 	.word	0x0000085f
     974:	0000085f 	.word	0x0000085f
     978:	0000085f 	.word	0x0000085f
     97c:	0000085f 	.word	0x0000085f
     980:	0000085f 	.word	0x0000085f
     984:	0000085f 	.word	0x0000085f
     988:	00000719 	.word	0x00000719
     98c:	0000085f 	.word	0x0000085f
     990:	000006a9 	.word	0x000006a9
     994:	000006a9 	.word	0x000006a9
     998:	00000719 	.word	0x00000719
     99c:	00000719 	.word	0x00000719
     9a0:	00000719 	.word	0x00000719
     9a4:	00000861 	.word	0x00000861
     9a8:	000006a9 	.word	0x000006a9
     9ac:	00000691 	.word	0x00000691
     9b0:	0000085f 	.word	0x0000085f
     9b4:	00000861 	.word	0x00000861
     9b8:	0000085f 	.word	0x0000085f
     9bc:	00000779 	.word	0x00000779
     9c0:	000006a9 	.word	0x000006a9
     9c4:	00000779 	.word	0x00000779
     9c8:	0000085f 	.word	0x0000085f
     9cc:	0000085f 	.word	0x0000085f
     9d0:	00000779 	.word	0x00000779
     9d4:	000006a1 	.word	0x000006a1
     9d8:	000006a9 	.word	0x000006a9
     9dc:	0000085f 	.word	0x0000085f
     9e0:	0000085f 	.word	0x0000085f
     9e4:	000006a9 	.word	0x000006a9
     9e8:	0000085f 	.word	0x0000085f
     9ec:	00000699 	.word	0x00000699
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     9f0:	1be3      	subs	r3, r4, r7
     9f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     9f6:	d211      	bcs.n	a1c <CONFIG_ISR_STACK_SIZE+0x21c>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     9f8:	b31f      	cbz	r7, a42 <CONFIG_ISR_STACK_SIZE+0x242>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     9fa:	2200      	movs	r2, #0
     9fc:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	buf0[0] = BUF_OFFSET / sizeof(int);
     9fe:	089b      	lsrs	r3, r3, #2
     a00:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
     a02:	9b01      	ldr	r3, [sp, #4]
     a04:	b30b      	cbz	r3, a4a <CONFIG_ISR_STACK_SIZE+0x24a>
		/* Strings are appended, update location counter. */
		buf0[1] = 0;
		buf0[3] = s_rw_cnt;
     a06:	9b06      	ldr	r3, [sp, #24]
     a08:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		buf0[1] = s_rw_cnt;
		buf0[3] = 0;
	}

	buf0[2] = s_ro_cnt;
     a0a:	9b04      	ldr	r3, [sp, #16]
     a0c:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     a0e:	bbab      	cbnz	r3, a7c <CONFIG_ISR_STACK_SIZE+0x27c>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
     a10:	9d02      	ldr	r5, [sp, #8]
     a12:	f8dd 9010 	ldr.w	r9, [sp, #16]
     a16:	f8dd 800c 	ldr.w	r8, [sp, #12]
     a1a:	e058      	b.n	ace <CONFIG_ISR_STACK_SIZE+0x2ce>
		__ASSERT(false, "too many format args");
     a1c:	4c1a      	ldr	r4, [pc, #104]	; (a88 <CONFIG_ISR_STACK_SIZE+0x288>)
     a1e:	f240 233d 	movw	r3, #573	; 0x23d
     a22:	4622      	mov	r2, r4
     a24:	4919      	ldr	r1, [pc, #100]	; (a8c <CONFIG_ISR_STACK_SIZE+0x28c>)
     a26:	481a      	ldr	r0, [pc, #104]	; (a90 <CONFIG_ISR_STACK_SIZE+0x290>)
     a28:	f009 fa23 	bl	9e72 <assert_print>
     a2c:	481c      	ldr	r0, [pc, #112]	; (aa0 <CONFIG_ISR_STACK_SIZE+0x2a0>)
     a2e:	f009 fa20 	bl	9e72 <assert_print>
     a32:	f240 213d 	movw	r1, #573	; 0x23d
     a36:	4620      	mov	r0, r4
     a38:	f009 fa14 	bl	9e64 <assert_post_action>
		return -EINVAL;
     a3c:	f06f 0015 	mvn.w	r0, #21
     a40:	e060      	b.n	b04 <CONFIG_ISR_STACK_SIZE+0x304>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     a42:	4453      	add	r3, sl
     a44:	f1a3 0008 	sub.w	r0, r3, #8
     a48:	e05c      	b.n	b04 <CONFIG_ISR_STACK_SIZE+0x304>
		buf0[1] = s_rw_cnt;
     a4a:	9b06      	ldr	r3, [sp, #24]
     a4c:	707b      	strb	r3, [r7, #1]
		buf0[3] = 0;
     a4e:	e7dc      	b.n	a0a <CONFIG_ISR_STACK_SIZE+0x20a>
			*buf++ = pos;
     a50:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
     a54:	3301      	adds	r3, #1
     a56:	459b      	cmp	fp, r3
     a58:	d9da      	bls.n	a10 <CONFIG_ISR_STACK_SIZE+0x210>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     a5a:	aa0c      	add	r2, sp, #48	; 0x30
     a5c:	441a      	add	r2, r3
     a5e:	f812 1c10 	ldrb.w	r1, [r2, #-16]
     a62:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
     a66:	2a00      	cmp	r2, #0
     a68:	daf4      	bge.n	a54 <CONFIG_ISR_STACK_SIZE+0x254>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     a6a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     a6e:	1be2      	subs	r2, r4, r7
     a70:	3201      	adds	r2, #1
     a72:	4552      	cmp	r2, sl
     a74:	d9ec      	bls.n	a50 <CONFIG_ISR_STACK_SIZE+0x250>
				return -ENOSPC;
     a76:	f06f 001b 	mvn.w	r0, #27
     a7a:	e043      	b.n	b04 <CONFIG_ISR_STACK_SIZE+0x304>
		for (i = 0; i < s_idx; i++) {
     a7c:	9b02      	ldr	r3, [sp, #8]
     a7e:	e7ea      	b.n	a56 <CONFIG_ISR_STACK_SIZE+0x256>
     a80:	0000ad18 	.word	0x0000ad18
     a84:	0000ccf4 	.word	0x0000ccf4
     a88:	0000b138 	.word	0x0000b138
     a8c:	0000b83c 	.word	0x0000b83c
     a90:	0000b180 	.word	0x0000b180
     a94:	0000b1a0 	.word	0x0000b1a0
     a98:	0000b1c4 	.word	0x0000b1c4
     a9c:	0000b1e0 	.word	0x0000b1e0
     aa0:	0000b1f8 	.word	0x0000b1f8
		if (rws_pos_en) {
     aa4:	9b01      	ldr	r3, [sp, #4]
     aa6:	b1f3      	cbz	r3, ae6 <CONFIG_ISR_STACK_SIZE+0x2e6>
			size = 0;
     aa8:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     aaa:	1be3      	subs	r3, r4, r7
     aac:	4433      	add	r3, r6
     aae:	3301      	adds	r3, #1
     ab0:	4553      	cmp	r3, sl
     ab2:	d833      	bhi.n	b1c <CONFIG_ISR_STACK_SIZE+0x31c>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
     ab4:	ab0c      	add	r3, sp, #48	; 0x30
     ab6:	442b      	add	r3, r5
     ab8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     abc:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
     ac0:	4632      	mov	r2, r6
     ac2:	4641      	mov	r1, r8
     ac4:	4620      	mov	r0, r4
     ac6:	f009 fb61 	bl	a18c <memcpy>
		buf += size;
     aca:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
     acc:	3501      	adds	r5, #1
     ace:	45ab      	cmp	fp, r5
     ad0:	d917      	bls.n	b02 <CONFIG_ISR_STACK_SIZE+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     ad2:	f1b9 0f00 	cmp.w	r9, #0
     ad6:	d0e5      	beq.n	aa4 <CONFIG_ISR_STACK_SIZE+0x2a4>
     ad8:	ab0c      	add	r3, sp, #48	; 0x30
     ada:	442b      	add	r3, r5
     adc:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
     ae0:	2b00      	cmp	r3, #0
     ae2:	dadf      	bge.n	aa4 <CONFIG_ISR_STACK_SIZE+0x2a4>
     ae4:	e7f2      	b.n	acc <CONFIG_ISR_STACK_SIZE+0x2cc>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     ae6:	ab0c      	add	r3, sp, #48	; 0x30
     ae8:	442b      	add	r3, r5
     aea:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     aee:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     af2:	2200      	movs	r2, #0
     af4:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
     af8:	4640      	mov	r0, r8
     afa:	f009 fb34 	bl	a166 <strlen>
     afe:	1c46      	adds	r6, r0, #1
     b00:	e7d3      	b.n	aaa <CONFIG_ISR_STACK_SIZE+0x2aa>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     b02:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     b04:	b00d      	add	sp, #52	; 0x34
     b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
     b0a:	f06f 000d 	mvn.w	r0, #13
     b0e:	e7f9      	b.n	b04 <CONFIG_ISR_STACK_SIZE+0x304>
		return -ENOSPC;
     b10:	f06f 001b 	mvn.w	r0, #27
     b14:	e7f6      	b.n	b04 <CONFIG_ISR_STACK_SIZE+0x304>
			return -ENOSPC;
     b16:	f06f 001b 	mvn.w	r0, #27
     b1a:	e7f3      	b.n	b04 <CONFIG_ISR_STACK_SIZE+0x304>
			return -ENOSPC;
     b1c:	f06f 001b 	mvn.w	r0, #27
     b20:	e7f0      	b.n	b04 <CONFIG_ISR_STACK_SIZE+0x304>
     b22:	bf00      	nop

00000b24 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     b24:	b538      	push	{r3, r4, r5, lr}
     b26:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     b28:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
     b2a:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     b2e:	6081      	str	r1, [r0, #8]
	switch (method) {
     b30:	2b02      	cmp	r3, #2
     b32:	d903      	bls.n	b3c <sys_notify_finalize+0x18>
     b34:	2b03      	cmp	r3, #3
     b36:	d102      	bne.n	b3e <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     b38:	6800      	ldr	r0, [r0, #0]
		break;
     b3a:	e00e      	b.n	b5a <sys_notify_finalize+0x36>
	switch (method) {
     b3c:	b963      	cbnz	r3, b58 <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
     b3e:	4d08      	ldr	r5, [pc, #32]	; (b60 <sys_notify_finalize+0x3c>)
     b40:	2345      	movs	r3, #69	; 0x45
     b42:	462a      	mov	r2, r5
     b44:	4907      	ldr	r1, [pc, #28]	; (b64 <sys_notify_finalize+0x40>)
     b46:	4808      	ldr	r0, [pc, #32]	; (b68 <sys_notify_finalize+0x44>)
     b48:	f009 f993 	bl	9e72 <assert_print>
     b4c:	2145      	movs	r1, #69	; 0x45
     b4e:	4628      	mov	r0, r5
     b50:	f009 f988 	bl	9e64 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
     b54:	2000      	movs	r0, #0
     b56:	e000      	b.n	b5a <sys_notify_finalize+0x36>
	switch (method) {
     b58:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     b5a:	2300      	movs	r3, #0
     b5c:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     b5e:	bd38      	pop	{r3, r4, r5, pc}
     b60:	0000b210 	.word	0x0000b210
     b64:	0000b83c 	.word	0x0000b83c
     b68:	0000b180 	.word	0x0000b180

00000b6c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     b6c:	4b01      	ldr	r3, [pc, #4]	; (b74 <__printk_hook_install+0x8>)
     b6e:	6018      	str	r0, [r3, #0]
}
     b70:	4770      	bx	lr
     b72:	bf00      	nop
     b74:	20004000 	.word	0x20004000

00000b78 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
     b78:	b538      	push	{r3, r4, r5, lr}
     b7a:	4604      	mov	r4, r0
     b7c:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     b7e:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
     b80:	2a00      	cmp	r2, #0
     b82:	db14      	blt.n	bae <process_complete+0x36>
     b84:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
     b88:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     b8a:	2a01      	cmp	r2, #1
     b8c:	d91b      	bls.n	bc6 <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
     b8e:	2b04      	cmp	r3, #4
     b90:	d050      	beq.n	c34 <process_complete+0xbc>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
     b92:	4c2f      	ldr	r4, [pc, #188]	; (c50 <process_complete+0xd8>)
     b94:	f240 131b 	movw	r3, #283	; 0x11b
     b98:	4622      	mov	r2, r4
     b9a:	492e      	ldr	r1, [pc, #184]	; (c54 <process_complete+0xdc>)
     b9c:	482e      	ldr	r0, [pc, #184]	; (c58 <process_complete+0xe0>)
     b9e:	f009 f968 	bl	9e72 <assert_print>
     ba2:	f240 111b 	movw	r1, #283	; 0x11b
     ba6:	4620      	mov	r0, r4
     ba8:	f009 f95c 	bl	9e64 <assert_post_action>
	}
}
     bac:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
     bae:	e9d0 0100 	ldrd	r0, r1, [r0]
     bb2:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     bb6:	2300      	movs	r3, #0
     bb8:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
     bba:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
     bbc:	2101      	movs	r1, #1
     bbe:	4620      	mov	r0, r4
     bc0:	f008 ffe0 	bl	9b84 <set_state>
     bc4:	e7f2      	b.n	bac <process_complete+0x34>
		*clients = mgr->clients;
     bc6:	e9d0 0100 	ldrd	r0, r1, [r0]
     bca:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
     bce:	2200      	movs	r2, #0
     bd0:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
     bd2:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
     bd4:	2b06      	cmp	r3, #6
     bd6:	d00f      	beq.n	bf8 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     bd8:	2b05      	cmp	r3, #5
     bda:	d11d      	bne.n	c18 <process_complete+0xa0>
			set_state(mgr, ONOFF_STATE_OFF);
     bdc:	2100      	movs	r1, #0
     bde:	4620      	mov	r0, r4
     be0:	f008 ffd0 	bl	9b84 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     be4:	4620      	mov	r0, r4
     be6:	f008 fff4 	bl	9bd2 <process_recheck>
     bea:	2800      	cmp	r0, #0
     bec:	d0de      	beq.n	bac <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     bee:	8ba3      	ldrh	r3, [r4, #28]
     bf0:	f043 0320 	orr.w	r3, r3, #32
     bf4:	83a3      	strh	r3, [r4, #28]
     bf6:	e7d9      	b.n	bac <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     bf8:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     bfc:	b13b      	cbz	r3, c0e <process_complete+0x96>
				mgr->refs += 1U;
     bfe:	8be2      	ldrh	r2, [r4, #30]
     c00:	3201      	adds	r2, #1
     c02:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     c04:	2b00      	cmp	r3, #0
     c06:	d0f9      	beq.n	bfc <process_complete+0x84>
	return node->next;
     c08:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     c0a:	2b00      	cmp	r3, #0
     c0c:	d1f6      	bne.n	bfc <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
     c0e:	2102      	movs	r1, #2
     c10:	4620      	mov	r0, r4
     c12:	f008 ffb7 	bl	9b84 <set_state>
     c16:	e7e5      	b.n	be4 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     c18:	4d0d      	ldr	r5, [pc, #52]	; (c50 <process_complete+0xd8>)
     c1a:	f240 1309 	movw	r3, #265	; 0x109
     c1e:	462a      	mov	r2, r5
     c20:	490e      	ldr	r1, [pc, #56]	; (c5c <process_complete+0xe4>)
     c22:	480d      	ldr	r0, [pc, #52]	; (c58 <process_complete+0xe0>)
     c24:	f009 f925 	bl	9e72 <assert_print>
     c28:	f240 1109 	movw	r1, #265	; 0x109
     c2c:	4628      	mov	r0, r5
     c2e:	f009 f919 	bl	9e64 <assert_post_action>
     c32:	e7d3      	b.n	bdc <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
     c34:	2100      	movs	r1, #0
     c36:	f008 ffa5 	bl	9b84 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     c3a:	4620      	mov	r0, r4
     c3c:	f008 ffc9 	bl	9bd2 <process_recheck>
     c40:	2800      	cmp	r0, #0
     c42:	d0b3      	beq.n	bac <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     c44:	8ba3      	ldrh	r3, [r4, #28]
     c46:	f043 0320 	orr.w	r3, r3, #32
     c4a:	83a3      	strh	r3, [r4, #28]
     c4c:	e7ae      	b.n	bac <process_complete+0x34>
     c4e:	bf00      	nop
     c50:	0000b234 	.word	0x0000b234
     c54:	0000b83c 	.word	0x0000b83c
     c58:	0000b180 	.word	0x0000b180
     c5c:	0000b258 	.word	0x0000b258

00000c60 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c64:	b083      	sub	sp, #12
     c66:	4604      	mov	r4, r0
     c68:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c6a:	8b83      	ldrh	r3, [r0, #28]
     c6c:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
     c70:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
     c74:	460d      	mov	r5, r1
     c76:	b131      	cbz	r1, c86 <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     c78:	f1b8 0f00 	cmp.w	r8, #0
     c7c:	d112      	bne.n	ca4 <process_event+0x44>
	list->head = NULL;
     c7e:	2300      	movs	r3, #0
     c80:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     c82:	9301      	str	r3, [sp, #4]
}
     c84:	e0aa      	b.n	ddc <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
     c86:	f8df 92e0 	ldr.w	r9, [pc, #736]	; f68 <process_event+0x308>
     c8a:	f240 1333 	movw	r3, #307	; 0x133
     c8e:	464a      	mov	r2, r9
     c90:	49b6      	ldr	r1, [pc, #728]	; (f6c <process_event+0x30c>)
     c92:	48b7      	ldr	r0, [pc, #732]	; (f70 <process_event+0x310>)
     c94:	f009 f8ed 	bl	9e72 <assert_print>
     c98:	f240 1133 	movw	r1, #307	; 0x133
     c9c:	4648      	mov	r0, r9
     c9e:	f009 f8e1 	bl	9e64 <assert_post_action>
     ca2:	e7e9      	b.n	c78 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
     ca4:	2d01      	cmp	r5, #1
     ca6:	d013      	beq.n	cd0 <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     ca8:	2d02      	cmp	r5, #2
     caa:	d116      	bne.n	cda <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
     cac:	8ba3      	ldrh	r3, [r4, #28]
     cae:	f043 0320 	orr.w	r3, r3, #32
     cb2:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     cb4:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     cb6:	4620      	mov	r0, r4
     cb8:	f006 fa34 	bl	7124 <z_spin_unlock_valid>
     cbc:	2800      	cmp	r0, #0
     cbe:	f000 819c 	beq.w	ffa <process_event+0x39a>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     cc2:	f386 8811 	msr	BASEPRI, r6
     cc6:	f3bf 8f6f 	isb	sy
}
     cca:	b003      	add	sp, #12
     ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     cd0:	8ba3      	ldrh	r3, [r4, #28]
     cd2:	f043 0310 	orr.w	r3, r3, #16
     cd6:	83a3      	strh	r3, [r4, #28]
     cd8:	e7ec      	b.n	cb4 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     cda:	4da3      	ldr	r5, [pc, #652]	; (f68 <process_event+0x308>)
     cdc:	f44f 739e 	mov.w	r3, #316	; 0x13c
     ce0:	462a      	mov	r2, r5
     ce2:	49a4      	ldr	r1, [pc, #656]	; (f74 <process_event+0x314>)
     ce4:	48a2      	ldr	r0, [pc, #648]	; (f70 <process_event+0x310>)
     ce6:	f009 f8c4 	bl	9e72 <assert_print>
     cea:	f44f 719e 	mov.w	r1, #316	; 0x13c
     cee:	4628      	mov	r0, r5
     cf0:	f009 f8b8 	bl	9e64 <assert_post_action>
     cf4:	e7da      	b.n	cac <process_event+0x4c>
			evt = process_recheck(mgr);
     cf6:	4620      	mov	r0, r4
     cf8:	f008 ff6b 	bl	9bd2 <process_recheck>
     cfc:	4605      	mov	r5, r0
     cfe:	e06f      	b.n	de0 <process_event+0x180>
			res = mgr->last_res;
     d00:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
     d04:	464a      	mov	r2, r9
     d06:	4669      	mov	r1, sp
     d08:	4620      	mov	r0, r4
     d0a:	f7ff ff35 	bl	b78 <process_complete>
		onoff_transition_fn transit = NULL;
     d0e:	2500      	movs	r5, #0
     d10:	e011      	b.n	d36 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     d12:	2f00      	cmp	r7, #0
     d14:	f040 8081 	bne.w	e1a <process_event+0x1ba>
	return list->head;
     d18:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     d1a:	2b00      	cmp	r3, #0
     d1c:	f000 808b 	beq.w	e36 <process_event+0x1d6>
			transit = mgr->transitions->start;
     d20:	6923      	ldr	r3, [r4, #16]
     d22:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     d24:	2d00      	cmp	r5, #0
     d26:	f000 8094 	beq.w	e52 <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
     d2a:	2106      	movs	r1, #6
     d2c:	4620      	mov	r0, r4
     d2e:	f008 ff29 	bl	9b84 <set_state>
		res = 0;
     d32:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d36:	8ba3      	ldrh	r3, [r4, #28]
     d38:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     d3c:	45b8      	cmp	r8, r7
     d3e:	f000 810b 	beq.w	f58 <process_event+0x2f8>
     d42:	68a2      	ldr	r2, [r4, #8]
     d44:	2a00      	cmp	r2, #0
     d46:	f000 8109 	beq.w	f5c <process_event+0x2fc>
     d4a:	2201      	movs	r2, #1
		if (do_monitors
     d4c:	4617      	mov	r7, r2
     d4e:	b91a      	cbnz	r2, d58 <process_event+0xf8>
     d50:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     d52:	2a00      	cmp	r2, #0
     d54:	f000 8104 	beq.w	f60 <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     d58:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     d5c:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
     d5e:	f104 0a14 	add.w	sl, r4, #20
     d62:	4650      	mov	r0, sl
     d64:	f006 f9de 	bl	7124 <z_spin_unlock_valid>
     d68:	2800      	cmp	r0, #0
     d6a:	f000 8115 	beq.w	f98 <process_event+0x338>
     d6e:	f386 8811 	msr	BASEPRI, r6
     d72:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     d76:	2f00      	cmp	r7, #0
     d78:	f040 811f 	bne.w	fba <process_event+0x35a>
     d7c:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     d7e:	b12b      	cbz	r3, d8c <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
     d80:	464b      	mov	r3, r9
     d82:	4642      	mov	r2, r8
     d84:	4669      	mov	r1, sp
     d86:	4620      	mov	r0, r4
     d88:	f008 ff65 	bl	9c56 <notify_all>
			if (transit != NULL) {
     d8c:	b115      	cbz	r5, d94 <process_event+0x134>
				transit(mgr, transition_complete);
     d8e:	497a      	ldr	r1, [pc, #488]	; (f78 <process_event+0x318>)
     d90:	4620      	mov	r0, r4
     d92:	47a8      	blx	r5
	__asm__ volatile(
     d94:	f04f 0320 	mov.w	r3, #32
     d98:	f3ef 8611 	mrs	r6, BASEPRI
     d9c:	f383 8812 	msr	BASEPRI_MAX, r3
     da0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     da4:	4650      	mov	r0, sl
     da6:	f006 f9ad 	bl	7104 <z_spin_lock_valid>
     daa:	2800      	cmp	r0, #0
     dac:	f000 810b 	beq.w	fc6 <process_event+0x366>
	z_spin_lock_set_owner(l);
     db0:	4650      	mov	r0, sl
     db2:	f006 f9c7 	bl	7144 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     db6:	8ba3      	ldrh	r3, [r4, #28]
     db8:	f023 0308 	bic.w	r3, r3, #8
     dbc:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     dbe:	8ba3      	ldrh	r3, [r4, #28]
     dc0:	f013 0f10 	tst.w	r3, #16
     dc4:	f000 810f 	beq.w	fe6 <process_event+0x386>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     dc8:	f023 0310 	bic.w	r3, r3, #16
     dcc:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
     dce:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     dd0:	8ba7      	ldrh	r7, [r4, #28]
     dd2:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
     dd6:	2d00      	cmp	r5, #0
     dd8:	f43f af6c 	beq.w	cb4 <process_event+0x54>
		if (evt == EVT_RECHECK) {
     ddc:	2d02      	cmp	r5, #2
     dde:	d08a      	beq.n	cf6 <process_event+0x96>
		if (evt == EVT_NOP) {
     de0:	2d00      	cmp	r5, #0
     de2:	f43f af67 	beq.w	cb4 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
     de6:	2d01      	cmp	r5, #1
     de8:	d08a      	beq.n	d00 <process_event+0xa0>
		} else if (evt == EVT_START) {
     dea:	2d03      	cmp	r5, #3
     dec:	d091      	beq.n	d12 <process_event+0xb2>
		} else if (evt == EVT_STOP) {
     dee:	2d04      	cmp	r5, #4
     df0:	d03e      	beq.n	e70 <process_event+0x210>
		} else if (evt == EVT_RESET) {
     df2:	2d05      	cmp	r5, #5
     df4:	f040 80a0 	bne.w	f38 <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     df8:	2f01      	cmp	r7, #1
     dfa:	d172      	bne.n	ee2 <process_event+0x282>
     dfc:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     dfe:	2b00      	cmp	r3, #0
     e00:	d07d      	beq.n	efe <process_event+0x29e>
			transit = mgr->transitions->reset;
     e02:	6923      	ldr	r3, [r4, #16]
     e04:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     e06:	2d00      	cmp	r5, #0
     e08:	f000 8087 	beq.w	f1a <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
     e0c:	2105      	movs	r1, #5
     e0e:	4620      	mov	r0, r4
     e10:	f008 feb8 	bl	9b84 <set_state>
		res = 0;
     e14:	f04f 0900 	mov.w	r9, #0
     e18:	e78d      	b.n	d36 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     e1a:	4d53      	ldr	r5, [pc, #332]	; (f68 <process_event+0x308>)
     e1c:	f44f 73ab 	mov.w	r3, #342	; 0x156
     e20:	462a      	mov	r2, r5
     e22:	4956      	ldr	r1, [pc, #344]	; (f7c <process_event+0x31c>)
     e24:	4852      	ldr	r0, [pc, #328]	; (f70 <process_event+0x310>)
     e26:	f009 f824 	bl	9e72 <assert_print>
     e2a:	f44f 71ab 	mov.w	r1, #342	; 0x156
     e2e:	4628      	mov	r0, r5
     e30:	f009 f818 	bl	9e64 <assert_post_action>
     e34:	e770      	b.n	d18 <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     e36:	4d4c      	ldr	r5, [pc, #304]	; (f68 <process_event+0x308>)
     e38:	f240 1357 	movw	r3, #343	; 0x157
     e3c:	462a      	mov	r2, r5
     e3e:	4950      	ldr	r1, [pc, #320]	; (f80 <process_event+0x320>)
     e40:	484b      	ldr	r0, [pc, #300]	; (f70 <process_event+0x310>)
     e42:	f009 f816 	bl	9e72 <assert_print>
     e46:	f240 1157 	movw	r1, #343	; 0x157
     e4a:	4628      	mov	r0, r5
     e4c:	f009 f80a 	bl	9e64 <assert_post_action>
     e50:	e766      	b.n	d20 <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
     e52:	f8df 8114 	ldr.w	r8, [pc, #276]	; f68 <process_event+0x308>
     e56:	f44f 73ad 	mov.w	r3, #346	; 0x15a
     e5a:	4642      	mov	r2, r8
     e5c:	4949      	ldr	r1, [pc, #292]	; (f84 <process_event+0x324>)
     e5e:	4844      	ldr	r0, [pc, #272]	; (f70 <process_event+0x310>)
     e60:	f009 f807 	bl	9e72 <assert_print>
     e64:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     e68:	4640      	mov	r0, r8
     e6a:	f008 fffb 	bl	9e64 <assert_post_action>
     e6e:	e75c      	b.n	d2a <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     e70:	2f02      	cmp	r7, #2
     e72:	d10b      	bne.n	e8c <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
     e74:	8be3      	ldrh	r3, [r4, #30]
     e76:	b9bb      	cbnz	r3, ea8 <process_event+0x248>
			transit = mgr->transitions->stop;
     e78:	6923      	ldr	r3, [r4, #16]
     e7a:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     e7c:	b315      	cbz	r5, ec4 <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
     e7e:	2104      	movs	r1, #4
     e80:	4620      	mov	r0, r4
     e82:	f008 fe7f 	bl	9b84 <set_state>
		res = 0;
     e86:	f04f 0900 	mov.w	r9, #0
     e8a:	e754      	b.n	d36 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     e8c:	4d36      	ldr	r5, [pc, #216]	; (f68 <process_event+0x308>)
     e8e:	f240 135d 	movw	r3, #349	; 0x15d
     e92:	462a      	mov	r2, r5
     e94:	493c      	ldr	r1, [pc, #240]	; (f88 <process_event+0x328>)
     e96:	4836      	ldr	r0, [pc, #216]	; (f70 <process_event+0x310>)
     e98:	f008 ffeb 	bl	9e72 <assert_print>
     e9c:	f240 115d 	movw	r1, #349	; 0x15d
     ea0:	4628      	mov	r0, r5
     ea2:	f008 ffdf 	bl	9e64 <assert_post_action>
     ea6:	e7e5      	b.n	e74 <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
     ea8:	4d2f      	ldr	r5, [pc, #188]	; (f68 <process_event+0x308>)
     eaa:	f44f 73af 	mov.w	r3, #350	; 0x15e
     eae:	462a      	mov	r2, r5
     eb0:	4936      	ldr	r1, [pc, #216]	; (f8c <process_event+0x32c>)
     eb2:	482f      	ldr	r0, [pc, #188]	; (f70 <process_event+0x310>)
     eb4:	f008 ffdd 	bl	9e72 <assert_print>
     eb8:	f44f 71af 	mov.w	r1, #350	; 0x15e
     ebc:	4628      	mov	r0, r5
     ebe:	f008 ffd1 	bl	9e64 <assert_post_action>
     ec2:	e7d9      	b.n	e78 <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
     ec4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; f68 <process_event+0x308>
     ec8:	f240 1361 	movw	r3, #353	; 0x161
     ecc:	4642      	mov	r2, r8
     ece:	492d      	ldr	r1, [pc, #180]	; (f84 <process_event+0x324>)
     ed0:	4827      	ldr	r0, [pc, #156]	; (f70 <process_event+0x310>)
     ed2:	f008 ffce 	bl	9e72 <assert_print>
     ed6:	f240 1161 	movw	r1, #353	; 0x161
     eda:	4640      	mov	r0, r8
     edc:	f008 ffc2 	bl	9e64 <assert_post_action>
     ee0:	e7cd      	b.n	e7e <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     ee2:	4d21      	ldr	r5, [pc, #132]	; (f68 <process_event+0x308>)
     ee4:	f44f 73b2 	mov.w	r3, #356	; 0x164
     ee8:	462a      	mov	r2, r5
     eea:	4929      	ldr	r1, [pc, #164]	; (f90 <process_event+0x330>)
     eec:	4820      	ldr	r0, [pc, #128]	; (f70 <process_event+0x310>)
     eee:	f008 ffc0 	bl	9e72 <assert_print>
     ef2:	f44f 71b2 	mov.w	r1, #356	; 0x164
     ef6:	4628      	mov	r0, r5
     ef8:	f008 ffb4 	bl	9e64 <assert_post_action>
     efc:	e77e      	b.n	dfc <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     efe:	4d1a      	ldr	r5, [pc, #104]	; (f68 <process_event+0x308>)
     f00:	f240 1365 	movw	r3, #357	; 0x165
     f04:	462a      	mov	r2, r5
     f06:	491e      	ldr	r1, [pc, #120]	; (f80 <process_event+0x320>)
     f08:	4819      	ldr	r0, [pc, #100]	; (f70 <process_event+0x310>)
     f0a:	f008 ffb2 	bl	9e72 <assert_print>
     f0e:	f240 1165 	movw	r1, #357	; 0x165
     f12:	4628      	mov	r0, r5
     f14:	f008 ffa6 	bl	9e64 <assert_post_action>
     f18:	e773      	b.n	e02 <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
     f1a:	f8df 804c 	ldr.w	r8, [pc, #76]	; f68 <process_event+0x308>
     f1e:	f44f 73b4 	mov.w	r3, #360	; 0x168
     f22:	4642      	mov	r2, r8
     f24:	4917      	ldr	r1, [pc, #92]	; (f84 <process_event+0x324>)
     f26:	4812      	ldr	r0, [pc, #72]	; (f70 <process_event+0x310>)
     f28:	f008 ffa3 	bl	9e72 <assert_print>
     f2c:	f44f 71b4 	mov.w	r1, #360	; 0x168
     f30:	4640      	mov	r0, r8
     f32:	f008 ff97 	bl	9e64 <assert_post_action>
     f36:	e769      	b.n	e0c <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
     f38:	4d0b      	ldr	r5, [pc, #44]	; (f68 <process_event+0x308>)
     f3a:	f240 136b 	movw	r3, #363	; 0x16b
     f3e:	462a      	mov	r2, r5
     f40:	4914      	ldr	r1, [pc, #80]	; (f94 <process_event+0x334>)
     f42:	480b      	ldr	r0, [pc, #44]	; (f70 <process_event+0x310>)
     f44:	f008 ff95 	bl	9e72 <assert_print>
     f48:	f240 116b 	movw	r1, #363	; 0x16b
     f4c:	4628      	mov	r0, r5
     f4e:	f008 ff89 	bl	9e64 <assert_post_action>
		onoff_transition_fn transit = NULL;
     f52:	2500      	movs	r5, #0
		res = 0;
     f54:	46a9      	mov	r9, r5
     f56:	e6ee      	b.n	d36 <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
     f58:	2200      	movs	r2, #0
     f5a:	e6f7      	b.n	d4c <process_event+0xec>
     f5c:	2200      	movs	r2, #0
     f5e:	e6f5      	b.n	d4c <process_event+0xec>
		    || (transit != NULL)) {
     f60:	2d00      	cmp	r5, #0
     f62:	f47f aef9 	bne.w	d58 <process_event+0xf8>
     f66:	e72a      	b.n	dbe <process_event+0x15e>
     f68:	0000b234 	.word	0x0000b234
     f6c:	0000b280 	.word	0x0000b280
     f70:	0000b180 	.word	0x0000b180
     f74:	0000b290 	.word	0x0000b290
     f78:	00001035 	.word	0x00001035
     f7c:	0000b2a4 	.word	0x0000b2a4
     f80:	0000b2b0 	.word	0x0000b2b0
     f84:	0000b2d4 	.word	0x0000b2d4
     f88:	0000b2ec 	.word	0x0000b2ec
     f8c:	0000b304 	.word	0x0000b304
     f90:	0000b314 	.word	0x0000b314
     f94:	0000b83c 	.word	0x0000b83c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     f98:	f8df b080 	ldr.w	fp, [pc, #128]	; 101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
     f9c:	23b9      	movs	r3, #185	; 0xb9
     f9e:	465a      	mov	r2, fp
     fa0:	491f      	ldr	r1, [pc, #124]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
     fa2:	4820      	ldr	r0, [pc, #128]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
     fa4:	f008 ff65 	bl	9e72 <assert_print>
     fa8:	4651      	mov	r1, sl
     faa:	481f      	ldr	r0, [pc, #124]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
     fac:	f008 ff61 	bl	9e72 <assert_print>
     fb0:	21b9      	movs	r1, #185	; 0xb9
     fb2:	4658      	mov	r0, fp
     fb4:	f008 ff56 	bl	9e64 <assert_post_action>
     fb8:	e6d9      	b.n	d6e <process_event+0x10e>
				notify_monitors(mgr, state, res);
     fba:	464a      	mov	r2, r9
     fbc:	4641      	mov	r1, r8
     fbe:	4620      	mov	r0, r4
     fc0:	f008 fde8 	bl	9b94 <notify_monitors>
     fc4:	e6da      	b.n	d7c <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     fc6:	4d15      	ldr	r5, [pc, #84]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     fc8:	238e      	movs	r3, #142	; 0x8e
     fca:	462a      	mov	r2, r5
     fcc:	4917      	ldr	r1, [pc, #92]	; (102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
     fce:	4815      	ldr	r0, [pc, #84]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
     fd0:	f008 ff4f 	bl	9e72 <assert_print>
     fd4:	4651      	mov	r1, sl
     fd6:	4816      	ldr	r0, [pc, #88]	; (1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>)
     fd8:	f008 ff4b 	bl	9e72 <assert_print>
     fdc:	218e      	movs	r1, #142	; 0x8e
     fde:	4628      	mov	r0, r5
     fe0:	f008 ff40 	bl	9e64 <assert_post_action>
     fe4:	e6e4      	b.n	db0 <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     fe6:	f013 0f20 	tst.w	r3, #32
     fea:	d004      	beq.n	ff6 <process_event+0x396>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     fec:	f023 0320 	bic.w	r3, r3, #32
     ff0:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
     ff2:	2502      	movs	r5, #2
     ff4:	e6ec      	b.n	dd0 <process_event+0x170>
		evt = EVT_NOP;
     ff6:	2500      	movs	r5, #0
     ff8:	e6ea      	b.n	dd0 <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     ffa:	4d08      	ldr	r5, [pc, #32]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     ffc:	23b9      	movs	r3, #185	; 0xb9
     ffe:	462a      	mov	r2, r5
    1000:	4907      	ldr	r1, [pc, #28]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
    1002:	4808      	ldr	r0, [pc, #32]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
    1004:	f008 ff35 	bl	9e72 <assert_print>
    1008:	4621      	mov	r1, r4
    100a:	4807      	ldr	r0, [pc, #28]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
    100c:	f008 ff31 	bl	9e72 <assert_print>
    1010:	21b9      	movs	r1, #185	; 0xb9
    1012:	4628      	mov	r0, r5
    1014:	f008 ff26 	bl	9e64 <assert_post_action>
    1018:	e653      	b.n	cc2 <process_event+0x62>
    101a:	bf00      	nop
    101c:	0000b32c 	.word	0x0000b32c
    1020:	0000b35c 	.word	0x0000b35c
    1024:	0000b180 	.word	0x0000b180
    1028:	0000b374 	.word	0x0000b374
    102c:	0000b38c 	.word	0x0000b38c
    1030:	0000b3a4 	.word	0x0000b3a4

00001034 <transition_complete>:
{
    1034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1038:	4604      	mov	r4, r0
    103a:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    103c:	f100 0614 	add.w	r6, r0, #20
    1040:	f04f 0320 	mov.w	r3, #32
    1044:	f3ef 8711 	mrs	r7, BASEPRI
    1048:	f383 8812 	msr	BASEPRI_MAX, r3
    104c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1050:	4630      	mov	r0, r6
    1052:	f006 f857 	bl	7104 <z_spin_lock_valid>
    1056:	b150      	cbz	r0, 106e <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    1058:	4630      	mov	r0, r6
    105a:	f006 f873 	bl	7144 <z_spin_lock_set_owner>
	mgr->last_res = res;
    105e:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    1060:	463a      	mov	r2, r7
    1062:	2101      	movs	r1, #1
    1064:	4620      	mov	r0, r4
    1066:	f7ff fdfb 	bl	c60 <process_event>
}
    106a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    106e:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1090 <transition_complete+0x5c>
    1072:	238e      	movs	r3, #142	; 0x8e
    1074:	4642      	mov	r2, r8
    1076:	4907      	ldr	r1, [pc, #28]	; (1094 <transition_complete+0x60>)
    1078:	4807      	ldr	r0, [pc, #28]	; (1098 <transition_complete+0x64>)
    107a:	f008 fefa 	bl	9e72 <assert_print>
    107e:	4631      	mov	r1, r6
    1080:	4806      	ldr	r0, [pc, #24]	; (109c <transition_complete+0x68>)
    1082:	f008 fef6 	bl	9e72 <assert_print>
    1086:	218e      	movs	r1, #142	; 0x8e
    1088:	4640      	mov	r0, r8
    108a:	f008 feeb 	bl	9e64 <assert_post_action>
    108e:	e7e3      	b.n	1058 <transition_complete+0x24>
    1090:	0000b32c 	.word	0x0000b32c
    1094:	0000b38c 	.word	0x0000b38c
    1098:	0000b180 	.word	0x0000b180
    109c:	0000b3a4 	.word	0x0000b3a4

000010a0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    10a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10a4:	4604      	mov	r4, r0
    10a6:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    10a8:	f008 fdac 	bl	9c04 <validate_args>

	if (rv < 0) {
    10ac:	1e06      	subs	r6, r0, #0
    10ae:	db58      	blt.n	1162 <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    10b0:	f104 0714 	add.w	r7, r4, #20
    10b4:	f04f 0320 	mov.w	r3, #32
    10b8:	f3ef 8911 	mrs	r9, BASEPRI
    10bc:	f383 8812 	msr	BASEPRI_MAX, r3
    10c0:	f3bf 8f6f 	isb	sy
    10c4:	4638      	mov	r0, r7
    10c6:	f006 f81d 	bl	7104 <z_spin_lock_valid>
    10ca:	b1e8      	cbz	r0, 1108 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    10cc:	4638      	mov	r0, r7
    10ce:	f006 f839 	bl	7144 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    10d2:	8ba5      	ldrh	r5, [r4, #28]
    10d4:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    10d8:	8be3      	ldrh	r3, [r4, #30]
    10da:	f64f 72ff 	movw	r2, #65535	; 0xffff
    10de:	4293      	cmp	r3, r2
    10e0:	d056      	beq.n	1190 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    10e2:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    10e4:	2d02      	cmp	r5, #2
    10e6:	d01f      	beq.n	1128 <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    10e8:	b32d      	cbz	r5, 1136 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
    10ea:	2d04      	cmp	r5, #4
    10ec:	d023      	beq.n	1136 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
    10ee:	2d06      	cmp	r5, #6
    10f0:	d021      	beq.n	1136 <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    10f2:	2d05      	cmp	r5, #5
    10f4:	d053      	beq.n	119e <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    10f6:	2d01      	cmp	r5, #1
    10f8:	d136      	bne.n	1168 <onoff_request+0xc8>
		rv = -EIO;
    10fa:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    10fe:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1102:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1104:	4652      	mov	r2, sl
    1106:	e01c      	b.n	1142 <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1108:	4d3c      	ldr	r5, [pc, #240]	; (11fc <onoff_request+0x15c>)
    110a:	238e      	movs	r3, #142	; 0x8e
    110c:	462a      	mov	r2, r5
    110e:	493c      	ldr	r1, [pc, #240]	; (1200 <onoff_request+0x160>)
    1110:	483c      	ldr	r0, [pc, #240]	; (1204 <onoff_request+0x164>)
    1112:	f008 feae 	bl	9e72 <assert_print>
    1116:	4639      	mov	r1, r7
    1118:	483b      	ldr	r0, [pc, #236]	; (1208 <onoff_request+0x168>)
    111a:	f008 feaa 	bl	9e72 <assert_print>
    111e:	218e      	movs	r1, #142	; 0x8e
    1120:	4628      	mov	r0, r5
    1122:	f008 fe9f 	bl	9e64 <assert_post_action>
    1126:	e7d1      	b.n	10cc <onoff_request+0x2c>
		mgr->refs += 1U;
    1128:	3301      	adds	r3, #1
    112a:	83e3      	strh	r3, [r4, #30]
		notify = true;
    112c:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    1130:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    1132:	461a      	mov	r2, r3
    1134:	e005      	b.n	1142 <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
    1136:	fab5 f385 	clz	r3, r5
    113a:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    113c:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    1140:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    1142:	b142      	cbz	r2, 1156 <onoff_request+0xb6>
	parent->next = child;
    1144:	2200      	movs	r2, #0
    1146:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    114a:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    114c:	b372      	cbz	r2, 11ac <onoff_request+0x10c>
	parent->next = child;
    114e:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    1152:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    1156:	b373      	cbz	r3, 11b6 <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
    1158:	464a      	mov	r2, r9
    115a:	2102      	movs	r1, #2
    115c:	4620      	mov	r0, r4
    115e:	f7ff fd7f 	bl	c60 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    1162:	4630      	mov	r0, r6
    1164:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1168:	4e28      	ldr	r6, [pc, #160]	; (120c <onoff_request+0x16c>)
    116a:	f240 13c9 	movw	r3, #457	; 0x1c9
    116e:	4632      	mov	r2, r6
    1170:	4927      	ldr	r1, [pc, #156]	; (1210 <onoff_request+0x170>)
    1172:	4824      	ldr	r0, [pc, #144]	; (1204 <onoff_request+0x164>)
    1174:	f008 fe7d 	bl	9e72 <assert_print>
    1178:	f240 11c9 	movw	r1, #457	; 0x1c9
    117c:	4630      	mov	r0, r6
    117e:	f008 fe71 	bl	9e64 <assert_post_action>
		rv = -EIO;
    1182:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    1186:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    118a:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    118c:	4652      	mov	r2, sl
    118e:	e7d8      	b.n	1142 <onoff_request+0xa2>
		rv = -EAGAIN;
    1190:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    1194:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1198:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    119a:	4652      	mov	r2, sl
    119c:	e7d1      	b.n	1142 <onoff_request+0xa2>
		rv = -ENOTSUP;
    119e:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    11a2:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    11a6:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    11a8:	4652      	mov	r2, sl
    11aa:	e7ca      	b.n	1142 <onoff_request+0xa2>
    11ac:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    11b0:	f8c4 8000 	str.w	r8, [r4]
}
    11b4:	e7cf      	b.n	1156 <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    11b6:	4638      	mov	r0, r7
    11b8:	f005 ffb4 	bl	7124 <z_spin_unlock_valid>
    11bc:	b168      	cbz	r0, 11da <onoff_request+0x13a>
	__asm__ volatile(
    11be:	f389 8811 	msr	BASEPRI, r9
    11c2:	f3bf 8f6f 	isb	sy
		if (notify) {
    11c6:	f1ba 0f00 	cmp.w	sl, #0
    11ca:	d0ca      	beq.n	1162 <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
    11cc:	2300      	movs	r3, #0
    11ce:	462a      	mov	r2, r5
    11d0:	4641      	mov	r1, r8
    11d2:	4620      	mov	r0, r4
    11d4:	f008 fd2c 	bl	9c30 <notify_one>
    11d8:	e7c3      	b.n	1162 <onoff_request+0xc2>
    11da:	f8df b020 	ldr.w	fp, [pc, #32]	; 11fc <onoff_request+0x15c>
    11de:	23b9      	movs	r3, #185	; 0xb9
    11e0:	465a      	mov	r2, fp
    11e2:	490c      	ldr	r1, [pc, #48]	; (1214 <onoff_request+0x174>)
    11e4:	4807      	ldr	r0, [pc, #28]	; (1204 <onoff_request+0x164>)
    11e6:	f008 fe44 	bl	9e72 <assert_print>
    11ea:	4639      	mov	r1, r7
    11ec:	480a      	ldr	r0, [pc, #40]	; (1218 <onoff_request+0x178>)
    11ee:	f008 fe40 	bl	9e72 <assert_print>
    11f2:	21b9      	movs	r1, #185	; 0xb9
    11f4:	4658      	mov	r0, fp
    11f6:	f008 fe35 	bl	9e64 <assert_post_action>
    11fa:	e7e0      	b.n	11be <onoff_request+0x11e>
    11fc:	0000b32c 	.word	0x0000b32c
    1200:	0000b38c 	.word	0x0000b38c
    1204:	0000b180 	.word	0x0000b180
    1208:	0000b3a4 	.word	0x0000b3a4
    120c:	0000b234 	.word	0x0000b234
    1210:	0000b314 	.word	0x0000b314
    1214:	0000b35c 	.word	0x0000b35c
    1218:	0000b374 	.word	0x0000b374

0000121c <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    121c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1220:	4606      	mov	r6, r0
    1222:	460d      	mov	r5, r1
    1224:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    1226:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    122a:	d222      	bcs.n	1272 <sys_heap_init+0x56>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    122c:	2c04      	cmp	r4, #4
    122e:	d931      	bls.n	1294 <sys_heap_init+0x78>
	bytes -= heap_footer_bytes(bytes);
    1230:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1232:	1dec      	adds	r4, r5, #7
    1234:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1238:	4415      	add	r5, r2
    123a:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    123e:	1b2d      	subs	r5, r5, r4
    1240:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1244:	2d17      	cmp	r5, #23
    1246:	d936      	bls.n	12b6 <sys_heap_init+0x9a>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    1248:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
    124a:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
    124e:	2300      	movs	r3, #0
    1250:	60e3      	str	r3, [r4, #12]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    1252:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    1256:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    125a:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
    125e:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    1260:	3607      	adds	r6, #7
    1262:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    1266:	f109 0301 	add.w	r3, r9, #1
    126a:	4543      	cmp	r3, r8
    126c:	d834      	bhi.n	12d8 <sys_heap_init+0xbc>
{
    126e:	2300      	movs	r3, #0
    1270:	e049      	b.n	1306 <sys_heap_init+0xea>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    1272:	4f38      	ldr	r7, [pc, #224]	; (1354 <sys_heap_init+0x138>)
    1274:	f240 13e3 	movw	r3, #483	; 0x1e3
    1278:	463a      	mov	r2, r7
    127a:	4937      	ldr	r1, [pc, #220]	; (1358 <sys_heap_init+0x13c>)
    127c:	4837      	ldr	r0, [pc, #220]	; (135c <sys_heap_init+0x140>)
    127e:	f008 fdf8 	bl	9e72 <assert_print>
    1282:	4837      	ldr	r0, [pc, #220]	; (1360 <sys_heap_init+0x144>)
    1284:	f008 fdf5 	bl	9e72 <assert_print>
    1288:	f240 11e3 	movw	r1, #483	; 0x1e3
    128c:	4638      	mov	r0, r7
    128e:	f008 fde9 	bl	9e64 <assert_post_action>
    1292:	e7cb      	b.n	122c <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1294:	4f2f      	ldr	r7, [pc, #188]	; (1354 <sys_heap_init+0x138>)
    1296:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    129a:	463a      	mov	r2, r7
    129c:	4931      	ldr	r1, [pc, #196]	; (1364 <sys_heap_init+0x148>)
    129e:	482f      	ldr	r0, [pc, #188]	; (135c <sys_heap_init+0x140>)
    12a0:	f008 fde7 	bl	9e72 <assert_print>
    12a4:	4830      	ldr	r0, [pc, #192]	; (1368 <sys_heap_init+0x14c>)
    12a6:	f008 fde4 	bl	9e72 <assert_print>
    12aa:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    12ae:	4638      	mov	r0, r7
    12b0:	f008 fdd8 	bl	9e64 <assert_post_action>
    12b4:	e7bc      	b.n	1230 <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    12b6:	4f27      	ldr	r7, [pc, #156]	; (1354 <sys_heap_init+0x138>)
    12b8:	f240 13f3 	movw	r3, #499	; 0x1f3
    12bc:	463a      	mov	r2, r7
    12be:	492b      	ldr	r1, [pc, #172]	; (136c <sys_heap_init+0x150>)
    12c0:	4826      	ldr	r0, [pc, #152]	; (135c <sys_heap_init+0x140>)
    12c2:	f008 fdd6 	bl	9e72 <assert_print>
    12c6:	4828      	ldr	r0, [pc, #160]	; (1368 <sys_heap_init+0x14c>)
    12c8:	f008 fdd3 	bl	9e72 <assert_print>
    12cc:	f240 11f3 	movw	r1, #499	; 0x1f3
    12d0:	4638      	mov	r0, r7
    12d2:	f008 fdc7 	bl	9e64 <assert_post_action>
    12d6:	e7b7      	b.n	1248 <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    12d8:	f8df a078 	ldr.w	sl, [pc, #120]	; 1354 <sys_heap_init+0x138>
    12dc:	f44f 7301 	mov.w	r3, #516	; 0x204
    12e0:	4652      	mov	r2, sl
    12e2:	4923      	ldr	r1, [pc, #140]	; (1370 <sys_heap_init+0x154>)
    12e4:	481d      	ldr	r0, [pc, #116]	; (135c <sys_heap_init+0x140>)
    12e6:	f008 fdc4 	bl	9e72 <assert_print>
    12ea:	481f      	ldr	r0, [pc, #124]	; (1368 <sys_heap_init+0x14c>)
    12ec:	f008 fdc1 	bl	9e72 <assert_print>
    12f0:	f44f 7101 	mov.w	r1, #516	; 0x204
    12f4:	4650      	mov	r0, sl
    12f6:	f008 fdb5 	bl	9e64 <assert_post_action>
    12fa:	e7b8      	b.n	126e <sys_heap_init+0x52>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    12fc:	1d1a      	adds	r2, r3, #4
    12fe:	2100      	movs	r1, #0
    1300:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    1304:	3301      	adds	r3, #1
    1306:	42bb      	cmp	r3, r7
    1308:	dbf8      	blt.n	12fc <sys_heap_init+0xe0>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    130a:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
    130e:	b29b      	uxth	r3, r3
    1310:	8063      	strh	r3, [r4, #2]
    1312:	2200      	movs	r2, #0
    1314:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    1316:	f043 0301 	orr.w	r3, r3, #1
    131a:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    131c:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1320:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
    1324:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
    1328:	1cb3      	adds	r3, r6, #2
    132a:	52e1      	strh	r1, [r4, r3]
    132c:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
    1330:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
    1334:	1ca9      	adds	r1, r5, #2
    1336:	5262      	strh	r2, [r4, r1]
    1338:	4425      	add	r5, r4
    133a:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    133e:	886b      	ldrh	r3, [r5, #2]
    1340:	f043 0301 	orr.w	r3, r3, #1
    1344:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    1346:	4649      	mov	r1, r9
    1348:	4620      	mov	r0, r4
    134a:	f008 fce9 	bl	9d20 <free_list_add>
}
    134e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1352:	bf00      	nop
    1354:	0000b3bc 	.word	0x0000b3bc
    1358:	0000b490 	.word	0x0000b490
    135c:	0000b180 	.word	0x0000b180
    1360:	0000b4a8 	.word	0x0000b4a8
    1364:	0000b4c0 	.word	0x0000b4c0
    1368:	0000b4e4 	.word	0x0000b4e4
    136c:	0000b500 	.word	0x0000b500
    1370:	0000b52c 	.word	0x0000b52c

00001374 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    1374:	b570      	push	{r4, r5, r6, lr}
    1376:	b082      	sub	sp, #8
    1378:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    137a:	2300      	movs	r3, #0
    137c:	6003      	str	r3, [r0, #0]
    137e:	6043      	str	r3, [r0, #4]
    1380:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    1382:	784b      	ldrb	r3, [r1, #1]
    1384:	2b25      	cmp	r3, #37	; 0x25
    1386:	d002      	beq.n	138e <extract_conversion+0x1a>
    1388:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    138a:	2501      	movs	r5, #1
    138c:	e01f      	b.n	13ce <extract_conversion+0x5a>
		conv->specifier = *sp++;
    138e:	1c88      	adds	r0, r1, #2
    1390:	70e3      	strb	r3, [r4, #3]
		return sp;
    1392:	e145      	b.n	1620 <extract_conversion+0x2ac>
			conv->flag_dash = true;
    1394:	7823      	ldrb	r3, [r4, #0]
    1396:	f043 0304 	orr.w	r3, r3, #4
    139a:	7023      	strb	r3, [r4, #0]
		if (loop) {
    139c:	b1b5      	cbz	r5, 13cc <extract_conversion+0x58>
			++sp;
    139e:	3601      	adds	r6, #1
    13a0:	e014      	b.n	13cc <extract_conversion+0x58>
			conv->flag_plus = true;
    13a2:	7823      	ldrb	r3, [r4, #0]
    13a4:	f043 0308 	orr.w	r3, r3, #8
    13a8:	7023      	strb	r3, [r4, #0]
			break;
    13aa:	e7f7      	b.n	139c <extract_conversion+0x28>
			conv->flag_space = true;
    13ac:	7823      	ldrb	r3, [r4, #0]
    13ae:	f043 0310 	orr.w	r3, r3, #16
    13b2:	7023      	strb	r3, [r4, #0]
			break;
    13b4:	e7f2      	b.n	139c <extract_conversion+0x28>
			conv->flag_hash = true;
    13b6:	7823      	ldrb	r3, [r4, #0]
    13b8:	f043 0320 	orr.w	r3, r3, #32
    13bc:	7023      	strb	r3, [r4, #0]
			break;
    13be:	e7ed      	b.n	139c <extract_conversion+0x28>
			conv->flag_zero = true;
    13c0:	7823      	ldrb	r3, [r4, #0]
    13c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    13c6:	7023      	strb	r3, [r4, #0]
			break;
    13c8:	e7e8      	b.n	139c <extract_conversion+0x28>
		switch (*sp) {
    13ca:	2500      	movs	r5, #0
	} while (loop);
    13cc:	b345      	cbz	r5, 1420 <extract_conversion+0xac>
		switch (*sp) {
    13ce:	7833      	ldrb	r3, [r6, #0]
    13d0:	3b20      	subs	r3, #32
    13d2:	2b10      	cmp	r3, #16
    13d4:	d8f9      	bhi.n	13ca <extract_conversion+0x56>
    13d6:	a201      	add	r2, pc, #4	; (adr r2, 13dc <extract_conversion+0x68>)
    13d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    13dc:	000013ad 	.word	0x000013ad
    13e0:	000013cb 	.word	0x000013cb
    13e4:	000013cb 	.word	0x000013cb
    13e8:	000013b7 	.word	0x000013b7
    13ec:	000013cb 	.word	0x000013cb
    13f0:	000013cb 	.word	0x000013cb
    13f4:	000013cb 	.word	0x000013cb
    13f8:	000013cb 	.word	0x000013cb
    13fc:	000013cb 	.word	0x000013cb
    1400:	000013cb 	.word	0x000013cb
    1404:	000013cb 	.word	0x000013cb
    1408:	000013a3 	.word	0x000013a3
    140c:	000013cb 	.word	0x000013cb
    1410:	00001395 	.word	0x00001395
    1414:	000013cb 	.word	0x000013cb
    1418:	000013cb 	.word	0x000013cb
    141c:	000013c1 	.word	0x000013c1
	if (conv->flag_zero && conv->flag_dash) {
    1420:	7823      	ldrb	r3, [r4, #0]
    1422:	f003 0344 	and.w	r3, r3, #68	; 0x44
    1426:	2b44      	cmp	r3, #68	; 0x44
    1428:	d05f      	beq.n	14ea <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    142a:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    142c:	7823      	ldrb	r3, [r4, #0]
    142e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1432:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    1434:	7833      	ldrb	r3, [r6, #0]
    1436:	2b2a      	cmp	r3, #42	; 0x2a
    1438:	d05c      	beq.n	14f4 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    143a:	a801      	add	r0, sp, #4
    143c:	f008 fc7c 	bl	9d38 <extract_decimal>
	if (sp != wp) {
    1440:	9b01      	ldr	r3, [sp, #4]
    1442:	429e      	cmp	r6, r3
    1444:	d00f      	beq.n	1466 <extract_conversion+0xf2>
		conv->width_present = true;
    1446:	7823      	ldrb	r3, [r4, #0]
    1448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    144c:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    144e:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    1450:	b2db      	uxtb	r3, r3
    1452:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    1456:	2800      	cmp	r0, #0
    1458:	db54      	blt.n	1504 <extract_conversion+0x190>
    145a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    145c:	4313      	orrs	r3, r2
    145e:	7822      	ldrb	r2, [r4, #0]
    1460:	f363 0241 	bfi	r2, r3, #1, #1
    1464:	7022      	strb	r2, [r4, #0]
	return sp;
    1466:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    1468:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    146a:	781b      	ldrb	r3, [r3, #0]
    146c:	2b2e      	cmp	r3, #46	; 0x2e
    146e:	bf14      	ite	ne
    1470:	2300      	movne	r3, #0
    1472:	2301      	moveq	r3, #1
    1474:	7862      	ldrb	r2, [r4, #1]
    1476:	f363 0241 	bfi	r2, r3, #1, #1
    147a:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    147c:	2b00      	cmp	r3, #0
    147e:	d043      	beq.n	1508 <extract_conversion+0x194>
	++sp;
    1480:	9b01      	ldr	r3, [sp, #4]
    1482:	1c5a      	adds	r2, r3, #1
    1484:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    1486:	785b      	ldrb	r3, [r3, #1]
    1488:	2b2a      	cmp	r3, #42	; 0x2a
    148a:	d03f      	beq.n	150c <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    148c:	a801      	add	r0, sp, #4
    148e:	f008 fc53 	bl	9d38 <extract_decimal>
	conv->prec_value = prec;
    1492:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    1494:	7823      	ldrb	r3, [r4, #0]
    1496:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    149a:	2800      	cmp	r0, #0
    149c:	db3e      	blt.n	151c <extract_conversion+0x1a8>
    149e:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    14a0:	4313      	orrs	r3, r2
    14a2:	7822      	ldrb	r2, [r4, #0]
    14a4:	f363 0241 	bfi	r2, r3, #1, #1
    14a8:	7022      	strb	r2, [r4, #0]
	return sp;
    14aa:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    14ac:	7803      	ldrb	r3, [r0, #0]
    14ae:	3b4c      	subs	r3, #76	; 0x4c
    14b0:	2b2e      	cmp	r3, #46	; 0x2e
    14b2:	f200 809d 	bhi.w	15f0 <extract_conversion+0x27c>
    14b6:	e8df f003 	tbb	[pc, r3]
    14ba:	9b90      	.short	0x9b90
    14bc:	9b9b9b9b 	.word	0x9b9b9b9b
    14c0:	9b9b9b9b 	.word	0x9b9b9b9b
    14c4:	9b9b9b9b 	.word	0x9b9b9b9b
    14c8:	9b9b9b9b 	.word	0x9b9b9b9b
    14cc:	9b9b9b9b 	.word	0x9b9b9b9b
    14d0:	9b9b9b9b 	.word	0x9b9b9b9b
    14d4:	9b339b9b 	.word	0x9b339b9b
    14d8:	9b459b57 	.word	0x9b459b57
    14dc:	9b9b9b9b 	.word	0x9b9b9b9b
    14e0:	9b899b9b 	.word	0x9b899b9b
    14e4:	9b9b9b9b 	.word	0x9b9b9b9b
    14e8:	82          	.byte	0x82
    14e9:	00          	.byte	0x00
		conv->flag_zero = false;
    14ea:	7823      	ldrb	r3, [r4, #0]
    14ec:	f36f 1386 	bfc	r3, #6, #1
    14f0:	7023      	strb	r3, [r4, #0]
    14f2:	e79a      	b.n	142a <extract_conversion+0xb6>
		conv->width_star = true;
    14f4:	7863      	ldrb	r3, [r4, #1]
    14f6:	f043 0301 	orr.w	r3, r3, #1
    14fa:	7063      	strb	r3, [r4, #1]
		return ++sp;
    14fc:	4633      	mov	r3, r6
    14fe:	3301      	adds	r3, #1
    1500:	9301      	str	r3, [sp, #4]
    1502:	e7b1      	b.n	1468 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    1504:	2201      	movs	r2, #1
    1506:	e7a9      	b.n	145c <extract_conversion+0xe8>
		return sp;
    1508:	9801      	ldr	r0, [sp, #4]
    150a:	e7cf      	b.n	14ac <extract_conversion+0x138>
		conv->prec_star = true;
    150c:	7863      	ldrb	r3, [r4, #1]
    150e:	f043 0304 	orr.w	r3, r3, #4
    1512:	7063      	strb	r3, [r4, #1]
		return ++sp;
    1514:	4610      	mov	r0, r2
    1516:	3001      	adds	r0, #1
    1518:	9001      	str	r0, [sp, #4]
    151a:	e7c7      	b.n	14ac <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    151c:	2201      	movs	r2, #1
    151e:	e7bf      	b.n	14a0 <extract_conversion+0x12c>
		if (*++sp == 'h') {
    1520:	1c42      	adds	r2, r0, #1
    1522:	7843      	ldrb	r3, [r0, #1]
    1524:	2b68      	cmp	r3, #104	; 0x68
    1526:	d006      	beq.n	1536 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    1528:	7863      	ldrb	r3, [r4, #1]
    152a:	2102      	movs	r1, #2
    152c:	f361 03c6 	bfi	r3, r1, #3, #4
    1530:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    1532:	4610      	mov	r0, r2
    1534:	e01e      	b.n	1574 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    1536:	7863      	ldrb	r3, [r4, #1]
    1538:	2201      	movs	r2, #1
    153a:	f362 03c6 	bfi	r3, r2, #3, #4
    153e:	7063      	strb	r3, [r4, #1]
			++sp;
    1540:	3002      	adds	r0, #2
    1542:	e017      	b.n	1574 <extract_conversion+0x200>
		if (*++sp == 'l') {
    1544:	1c42      	adds	r2, r0, #1
    1546:	7843      	ldrb	r3, [r0, #1]
    1548:	2b6c      	cmp	r3, #108	; 0x6c
    154a:	d006      	beq.n	155a <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    154c:	7863      	ldrb	r3, [r4, #1]
    154e:	2103      	movs	r1, #3
    1550:	f361 03c6 	bfi	r3, r1, #3, #4
    1554:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    1556:	4610      	mov	r0, r2
    1558:	e00c      	b.n	1574 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    155a:	7863      	ldrb	r3, [r4, #1]
    155c:	2204      	movs	r2, #4
    155e:	f362 03c6 	bfi	r3, r2, #3, #4
    1562:	7063      	strb	r3, [r4, #1]
			++sp;
    1564:	3002      	adds	r0, #2
    1566:	e005      	b.n	1574 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    1568:	7863      	ldrb	r3, [r4, #1]
    156a:	2205      	movs	r2, #5
    156c:	f362 03c6 	bfi	r3, r2, #3, #4
    1570:	7063      	strb	r3, [r4, #1]
		++sp;
    1572:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    1574:	f810 3b01 	ldrb.w	r3, [r0], #1
    1578:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    157a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    157e:	2a37      	cmp	r2, #55	; 0x37
    1580:	d87d      	bhi.n	167e <extract_conversion+0x30a>
    1582:	e8df f002 	tbb	[pc, r2]
    1586:	7c5e      	.short	0x7c5e
    1588:	5e5e7c7c 	.word	0x5e5e7c7c
    158c:	7c7c7c5e 	.word	0x7c7c7c5e
    1590:	7c7c7c7c 	.word	0x7c7c7c7c
    1594:	7c7c7c7c 	.word	0x7c7c7c7c
    1598:	7c7c7c7c 	.word	0x7c7c7c7c
    159c:	7c7c4f7c 	.word	0x7c7c4f7c
    15a0:	7c7c7c7c 	.word	0x7c7c7c7c
    15a4:	7c5e7c7c 	.word	0x7c5e7c7c
    15a8:	5e5e3a4f 	.word	0x5e5e3a4f
    15ac:	7c3a7c5e 	.word	0x7c3a7c5e
    15b0:	657c7c7c 	.word	0x657c7c7c
    15b4:	7c7c714f 	.word	0x7c7c714f
    15b8:	7c4f7c71 	.word	0x7c4f7c71
    15bc:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    15be:	7863      	ldrb	r3, [r4, #1]
    15c0:	2206      	movs	r2, #6
    15c2:	f362 03c6 	bfi	r3, r2, #3, #4
    15c6:	7063      	strb	r3, [r4, #1]
		++sp;
    15c8:	3001      	adds	r0, #1
		break;
    15ca:	e7d3      	b.n	1574 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    15cc:	7863      	ldrb	r3, [r4, #1]
    15ce:	2207      	movs	r2, #7
    15d0:	f362 03c6 	bfi	r3, r2, #3, #4
    15d4:	7063      	strb	r3, [r4, #1]
		++sp;
    15d6:	3001      	adds	r0, #1
		break;
    15d8:	e7cc      	b.n	1574 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    15da:	7863      	ldrb	r3, [r4, #1]
    15dc:	2208      	movs	r2, #8
    15de:	f362 03c6 	bfi	r3, r2, #3, #4
    15e2:	7063      	strb	r3, [r4, #1]
		++sp;
    15e4:	3001      	adds	r0, #1
		conv->unsupported = true;
    15e6:	7823      	ldrb	r3, [r4, #0]
    15e8:	f043 0302 	orr.w	r3, r3, #2
    15ec:	7023      	strb	r3, [r4, #0]
		break;
    15ee:	e7c1      	b.n	1574 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    15f0:	7863      	ldrb	r3, [r4, #1]
    15f2:	f36f 03c6 	bfc	r3, #3, #4
    15f6:	7063      	strb	r3, [r4, #1]
		break;
    15f8:	e7bc      	b.n	1574 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    15fa:	78a2      	ldrb	r2, [r4, #2]
    15fc:	2101      	movs	r1, #1
    15fe:	f361 0202 	bfi	r2, r1, #0, #3
    1602:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    1604:	7862      	ldrb	r2, [r4, #1]
    1606:	f002 0278 	and.w	r2, r2, #120	; 0x78
    160a:	2a40      	cmp	r2, #64	; 0x40
    160c:	d010      	beq.n	1630 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    160e:	2b63      	cmp	r3, #99	; 0x63
    1610:	d013      	beq.n	163a <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    1612:	7823      	ldrb	r3, [r4, #0]
    1614:	f3c3 0240 	ubfx	r2, r3, #1, #1
    1618:	4315      	orrs	r5, r2
    161a:	f365 0341 	bfi	r3, r5, #1, #1
    161e:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    1620:	b002      	add	sp, #8
    1622:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    1624:	78a2      	ldrb	r2, [r4, #2]
    1626:	2102      	movs	r1, #2
    1628:	f361 0202 	bfi	r2, r1, #0, #3
    162c:	70a2      	strb	r2, [r4, #2]
    162e:	e7e9      	b.n	1604 <extract_conversion+0x290>
			conv->invalid = true;
    1630:	7821      	ldrb	r1, [r4, #0]
    1632:	f041 0101 	orr.w	r1, r1, #1
    1636:	7021      	strb	r1, [r4, #0]
    1638:	e7e9      	b.n	160e <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    163a:	1e15      	subs	r5, r2, #0
    163c:	bf18      	it	ne
    163e:	2501      	movne	r5, #1
    1640:	e7e7      	b.n	1612 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    1642:	78a3      	ldrb	r3, [r4, #2]
    1644:	2204      	movs	r2, #4
    1646:	f362 0302 	bfi	r3, r2, #0, #3
    164a:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    164c:	2501      	movs	r5, #1
			break;
    164e:	e7e0      	b.n	1612 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    1650:	78a3      	ldrb	r3, [r4, #2]
    1652:	2203      	movs	r2, #3
    1654:	f362 0302 	bfi	r3, r2, #0, #3
    1658:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    165a:	7863      	ldrb	r3, [r4, #1]
    165c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1660:	2b40      	cmp	r3, #64	; 0x40
    1662:	d1d6      	bne.n	1612 <extract_conversion+0x29e>
			unsupported = true;
    1664:	2501      	movs	r5, #1
    1666:	e7d4      	b.n	1612 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    1668:	78a3      	ldrb	r3, [r4, #2]
    166a:	2203      	movs	r2, #3
    166c:	f362 0302 	bfi	r3, r2, #0, #3
    1670:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    1672:	7863      	ldrb	r3, [r4, #1]
    1674:	f013 0f78 	tst.w	r3, #120	; 0x78
    1678:	d0cb      	beq.n	1612 <extract_conversion+0x29e>
			unsupported = true;
    167a:	2501      	movs	r5, #1
    167c:	e7c9      	b.n	1612 <extract_conversion+0x29e>
		conv->invalid = true;
    167e:	7823      	ldrb	r3, [r4, #0]
    1680:	f043 0301 	orr.w	r3, r3, #1
    1684:	7023      	strb	r3, [r4, #0]
		break;
    1686:	e7c4      	b.n	1612 <extract_conversion+0x29e>

00001688 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    168c:	b091      	sub	sp, #68	; 0x44
    168e:	4606      	mov	r6, r0
    1690:	460d      	mov	r5, r1
    1692:	4691      	mov	r9, r2
    1694:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1696:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1698:	f899 0000 	ldrb.w	r0, [r9]
    169c:	2800      	cmp	r0, #0
    169e:	f000 82d5 	beq.w	1c4c <cbvprintf+0x5c4>
		if (*fp != '%') {
    16a2:	2825      	cmp	r0, #37	; 0x25
    16a4:	d008      	beq.n	16b8 <cbvprintf+0x30>
			OUTC(*fp++);
    16a6:	f109 0901 	add.w	r9, r9, #1
    16aa:	4629      	mov	r1, r5
    16ac:	47b0      	blx	r6
    16ae:	2800      	cmp	r0, #0
    16b0:	f2c0 82cd 	blt.w	1c4e <cbvprintf+0x5c6>
    16b4:	3401      	adds	r4, #1
			continue;
    16b6:	e7ef      	b.n	1698 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    16b8:	2300      	movs	r3, #0
    16ba:	9304      	str	r3, [sp, #16]
    16bc:	9305      	str	r3, [sp, #20]
    16be:	9306      	str	r3, [sp, #24]
    16c0:	9307      	str	r3, [sp, #28]
    16c2:	9308      	str	r3, [sp, #32]
    16c4:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    16c6:	4649      	mov	r1, r9
    16c8:	a806      	add	r0, sp, #24
    16ca:	f7ff fe53 	bl	1374 <extract_conversion>
    16ce:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    16d0:	f89d 3019 	ldrb.w	r3, [sp, #25]
    16d4:	f013 0f01 	tst.w	r3, #1
    16d8:	f000 8097 	beq.w	180a <cbvprintf+0x182>
			width = va_arg(ap, int);
    16dc:	9b03      	ldr	r3, [sp, #12]
    16de:	1d1a      	adds	r2, r3, #4
    16e0:	9203      	str	r2, [sp, #12]
    16e2:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    16e4:	2f00      	cmp	r7, #0
    16e6:	f2c0 8088 	blt.w	17fa <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    16ea:	f89d 3019 	ldrb.w	r3, [sp, #25]
    16ee:	f013 0f04 	tst.w	r3, #4
    16f2:	f000 809c 	beq.w	182e <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    16f6:	9b03      	ldr	r3, [sp, #12]
    16f8:	1d1a      	adds	r2, r3, #4
    16fa:	9203      	str	r2, [sp, #12]
    16fc:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    1700:	f1ba 0f00 	cmp.w	sl, #0
    1704:	f2c0 808a 	blt.w	181c <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    1708:	2300      	movs	r3, #0
    170a:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    170c:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    170e:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1712:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    1716:	f89d 1019 	ldrb.w	r1, [sp, #25]
    171a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    171e:	2b01      	cmp	r3, #1
    1720:	f000 808e 	beq.w	1840 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    1724:	2b02      	cmp	r3, #2
    1726:	f000 80d3 	beq.w	18d0 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    172a:	2b04      	cmp	r3, #4
    172c:	f000 8124 	beq.w	1978 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    1730:	2b03      	cmp	r3, #3
    1732:	f000 813b 	beq.w	19ac <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    1736:	f89d 8018 	ldrb.w	r8, [sp, #24]
    173a:	f018 0b03 	ands.w	fp, r8, #3
    173e:	f040 813b 	bne.w	19b8 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    1742:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1746:	3b25      	subs	r3, #37	; 0x25
    1748:	2b53      	cmp	r3, #83	; 0x53
    174a:	f200 81e6 	bhi.w	1b1a <cbvprintf+0x492>
    174e:	e8df f013 	tbh	[pc, r3, lsl #1]
    1752:	0140      	.short	0x0140
    1754:	01e401e4 	.word	0x01e401e4
    1758:	01e401e4 	.word	0x01e401e4
    175c:	01e401e4 	.word	0x01e401e4
    1760:	01e401e4 	.word	0x01e401e4
    1764:	01e401e4 	.word	0x01e401e4
    1768:	01e401e4 	.word	0x01e401e4
    176c:	01e401e4 	.word	0x01e401e4
    1770:	01e401e4 	.word	0x01e401e4
    1774:	01e401e4 	.word	0x01e401e4
    1778:	01e401e4 	.word	0x01e401e4
    177c:	01e401e4 	.word	0x01e401e4
    1780:	01e401e4 	.word	0x01e401e4
    1784:	01e401e4 	.word	0x01e401e4
    1788:	01e401e4 	.word	0x01e401e4
    178c:	01e401e4 	.word	0x01e401e4
    1790:	01e401e4 	.word	0x01e401e4
    1794:	01e401e4 	.word	0x01e401e4
    1798:	01e401e4 	.word	0x01e401e4
    179c:	01e401e4 	.word	0x01e401e4
    17a0:	01e401e4 	.word	0x01e401e4
    17a4:	01e401e4 	.word	0x01e401e4
    17a8:	01e401e4 	.word	0x01e401e4
    17ac:	01e401e4 	.word	0x01e401e4
    17b0:	01e401e4 	.word	0x01e401e4
    17b4:	01e401e4 	.word	0x01e401e4
    17b8:	01e40181 	.word	0x01e40181
    17bc:	01e401e4 	.word	0x01e401e4
    17c0:	01e401e4 	.word	0x01e401e4
    17c4:	01e401e4 	.word	0x01e401e4
    17c8:	01e401e4 	.word	0x01e401e4
    17cc:	015e01e4 	.word	0x015e01e4
    17d0:	01e40167 	.word	0x01e40167
    17d4:	01e401e4 	.word	0x01e401e4
    17d8:	016701e4 	.word	0x016701e4
    17dc:	01e401e4 	.word	0x01e401e4
    17e0:	01e401e4 	.word	0x01e401e4
    17e4:	018101be 	.word	0x018101be
    17e8:	01e401a2 	.word	0x01e401a2
    17ec:	014d01e4 	.word	0x014d01e4
    17f0:	018101e4 	.word	0x018101e4
    17f4:	01e401e4 	.word	0x01e401e4
    17f8:	0181      	.short	0x0181
				conv->flag_dash = true;
    17fa:	f89d 3018 	ldrb.w	r3, [sp, #24]
    17fe:	f043 0304 	orr.w	r3, r3, #4
    1802:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    1806:	427f      	negs	r7, r7
    1808:	e76f      	b.n	16ea <cbvprintf+0x62>
		} else if (conv->width_present) {
    180a:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    180e:	2b00      	cmp	r3, #0
    1810:	db02      	blt.n	1818 <cbvprintf+0x190>
		int width = -1;
    1812:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1816:	e768      	b.n	16ea <cbvprintf+0x62>
			width = conv->width_value;
    1818:	9f07      	ldr	r7, [sp, #28]
    181a:	e766      	b.n	16ea <cbvprintf+0x62>
				conv->prec_present = false;
    181c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1820:	f36f 0341 	bfc	r3, #1, #1
    1824:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    1828:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    182c:	e76c      	b.n	1708 <cbvprintf+0x80>
		} else if (conv->prec_present) {
    182e:	f013 0f02 	tst.w	r3, #2
    1832:	d002      	beq.n	183a <cbvprintf+0x1b2>
			precision = conv->prec_value;
    1834:	f8dd a020 	ldr.w	sl, [sp, #32]
    1838:	e766      	b.n	1708 <cbvprintf+0x80>
		int precision = -1;
    183a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    183e:	e763      	b.n	1708 <cbvprintf+0x80>
			switch (length_mod) {
    1840:	1ecb      	subs	r3, r1, #3
    1842:	2b04      	cmp	r3, #4
    1844:	d804      	bhi.n	1850 <cbvprintf+0x1c8>
    1846:	e8df f003 	tbb	[pc, r3]
    184a:	1d0b      	.short	0x1d0b
    184c:	3529      	.short	0x3529
    184e:	35          	.byte	0x35
    184f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1850:	9b03      	ldr	r3, [sp, #12]
    1852:	1d1a      	adds	r2, r3, #4
    1854:	9203      	str	r2, [sp, #12]
    1856:	681b      	ldr	r3, [r3, #0]
    1858:	17da      	asrs	r2, r3, #31
    185a:	9304      	str	r3, [sp, #16]
    185c:	9205      	str	r2, [sp, #20]
				break;
    185e:	e006      	b.n	186e <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    1860:	9b03      	ldr	r3, [sp, #12]
    1862:	1d1a      	adds	r2, r3, #4
    1864:	9203      	str	r2, [sp, #12]
    1866:	681b      	ldr	r3, [r3, #0]
    1868:	17da      	asrs	r2, r3, #31
    186a:	9304      	str	r3, [sp, #16]
    186c:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    186e:	2901      	cmp	r1, #1
    1870:	d028      	beq.n	18c4 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    1872:	2902      	cmp	r1, #2
    1874:	f47f af5f 	bne.w	1736 <cbvprintf+0xae>
				value->sint = (short)value->sint;
    1878:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    187c:	17da      	asrs	r2, r3, #31
    187e:	9304      	str	r3, [sp, #16]
    1880:	9205      	str	r2, [sp, #20]
    1882:	e758      	b.n	1736 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    1884:	9b03      	ldr	r3, [sp, #12]
    1886:	3307      	adds	r3, #7
    1888:	f023 0307 	bic.w	r3, r3, #7
    188c:	f103 0208 	add.w	r2, r3, #8
    1890:	9203      	str	r2, [sp, #12]
    1892:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1896:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    189a:	e7e8      	b.n	186e <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    189c:	9b03      	ldr	r3, [sp, #12]
    189e:	3307      	adds	r3, #7
    18a0:	f023 0307 	bic.w	r3, r3, #7
    18a4:	f103 0208 	add.w	r2, r3, #8
    18a8:	9203      	str	r2, [sp, #12]
    18aa:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    18ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    18b2:	e7dc      	b.n	186e <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    18b4:	9b03      	ldr	r3, [sp, #12]
    18b6:	1d1a      	adds	r2, r3, #4
    18b8:	9203      	str	r2, [sp, #12]
    18ba:	681b      	ldr	r3, [r3, #0]
    18bc:	17da      	asrs	r2, r3, #31
				value->sint =
    18be:	9304      	str	r3, [sp, #16]
    18c0:	9205      	str	r2, [sp, #20]
				break;
    18c2:	e7d4      	b.n	186e <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    18c4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    18c8:	9304      	str	r3, [sp, #16]
    18ca:	2300      	movs	r3, #0
    18cc:	9305      	str	r3, [sp, #20]
    18ce:	e732      	b.n	1736 <cbvprintf+0xae>
			switch (length_mod) {
    18d0:	1ecb      	subs	r3, r1, #3
    18d2:	2b04      	cmp	r3, #4
    18d4:	d804      	bhi.n	18e0 <cbvprintf+0x258>
    18d6:	e8df f003 	tbb	[pc, r3]
    18da:	1f0b      	.short	0x1f0b
    18dc:	4135      	.short	0x4135
    18de:	41          	.byte	0x41
    18df:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    18e0:	9b03      	ldr	r3, [sp, #12]
    18e2:	1d1a      	adds	r2, r3, #4
    18e4:	9203      	str	r2, [sp, #12]
    18e6:	681b      	ldr	r3, [r3, #0]
    18e8:	9304      	str	r3, [sp, #16]
    18ea:	2300      	movs	r3, #0
    18ec:	9305      	str	r3, [sp, #20]
				break;
    18ee:	e01e      	b.n	192e <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    18f0:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    18f4:	2b63      	cmp	r3, #99	; 0x63
    18f6:	d007      	beq.n	1908 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    18f8:	9b03      	ldr	r3, [sp, #12]
    18fa:	1d1a      	adds	r2, r3, #4
    18fc:	9203      	str	r2, [sp, #12]
    18fe:	681b      	ldr	r3, [r3, #0]
    1900:	9304      	str	r3, [sp, #16]
    1902:	2300      	movs	r3, #0
    1904:	9305      	str	r3, [sp, #20]
    1906:	e012      	b.n	192e <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    1908:	9b03      	ldr	r3, [sp, #12]
    190a:	1d1a      	adds	r2, r3, #4
    190c:	9203      	str	r2, [sp, #12]
    190e:	681b      	ldr	r3, [r3, #0]
    1910:	9304      	str	r3, [sp, #16]
    1912:	2300      	movs	r3, #0
    1914:	9305      	str	r3, [sp, #20]
    1916:	e00a      	b.n	192e <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    1918:	9b03      	ldr	r3, [sp, #12]
    191a:	3307      	adds	r3, #7
    191c:	f023 0307 	bic.w	r3, r3, #7
    1920:	f103 0208 	add.w	r2, r3, #8
    1924:	9203      	str	r2, [sp, #12]
    1926:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    192a:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    192e:	2901      	cmp	r1, #1
    1930:	d01c      	beq.n	196c <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    1932:	2902      	cmp	r1, #2
    1934:	f47f aeff 	bne.w	1736 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    1938:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    193c:	9304      	str	r3, [sp, #16]
    193e:	2300      	movs	r3, #0
    1940:	9305      	str	r3, [sp, #20]
    1942:	e6f8      	b.n	1736 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    1944:	9b03      	ldr	r3, [sp, #12]
    1946:	3307      	adds	r3, #7
    1948:	f023 0307 	bic.w	r3, r3, #7
    194c:	f103 0208 	add.w	r2, r3, #8
    1950:	9203      	str	r2, [sp, #12]
    1952:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    1956:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    195a:	e7e8      	b.n	192e <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    195c:	9b03      	ldr	r3, [sp, #12]
    195e:	1d1a      	adds	r2, r3, #4
    1960:	9203      	str	r2, [sp, #12]
    1962:	681b      	ldr	r3, [r3, #0]
				value->uint =
    1964:	9304      	str	r3, [sp, #16]
    1966:	2300      	movs	r3, #0
    1968:	9305      	str	r3, [sp, #20]
				break;
    196a:	e7e0      	b.n	192e <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    196c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1970:	9304      	str	r3, [sp, #16]
    1972:	2300      	movs	r3, #0
    1974:	9305      	str	r3, [sp, #20]
    1976:	e6de      	b.n	1736 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    1978:	2908      	cmp	r1, #8
    197a:	d00b      	beq.n	1994 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    197c:	9b03      	ldr	r3, [sp, #12]
    197e:	3307      	adds	r3, #7
    1980:	f023 0307 	bic.w	r3, r3, #7
    1984:	f103 0208 	add.w	r2, r3, #8
    1988:	9203      	str	r2, [sp, #12]
    198a:	e9d3 2300 	ldrd	r2, r3, [r3]
    198e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1992:	e6d0      	b.n	1736 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    1994:	9b03      	ldr	r3, [sp, #12]
    1996:	3307      	adds	r3, #7
    1998:	f023 0307 	bic.w	r3, r3, #7
    199c:	f103 0208 	add.w	r2, r3, #8
    19a0:	9203      	str	r2, [sp, #12]
    19a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    19a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    19aa:	e6c4      	b.n	1736 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    19ac:	9b03      	ldr	r3, [sp, #12]
    19ae:	1d1a      	adds	r2, r3, #4
    19b0:	9203      	str	r2, [sp, #12]
    19b2:	681b      	ldr	r3, [r3, #0]
    19b4:	9304      	str	r3, [sp, #16]
    19b6:	e6be      	b.n	1736 <cbvprintf+0xae>
			OUTS(sp, fp);
    19b8:	9f02      	ldr	r7, [sp, #8]
    19ba:	463b      	mov	r3, r7
    19bc:	464a      	mov	r2, r9
    19be:	4629      	mov	r1, r5
    19c0:	4630      	mov	r0, r6
    19c2:	f008 fa35 	bl	9e30 <outs>
    19c6:	2800      	cmp	r0, #0
    19c8:	f2c0 8141 	blt.w	1c4e <cbvprintf+0x5c6>
    19cc:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    19ce:	46b9      	mov	r9, r7
			continue;
    19d0:	e662      	b.n	1698 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    19d2:	4629      	mov	r1, r5
    19d4:	2025      	movs	r0, #37	; 0x25
    19d6:	47b0      	blx	r6
    19d8:	2800      	cmp	r0, #0
    19da:	f2c0 8138 	blt.w	1c4e <cbvprintf+0x5c6>
    19de:	3401      	adds	r4, #1
		char sign = 0;
    19e0:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    19e2:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    19e6:	f04f 0900 	mov.w	r9, #0
			break;
    19ea:	e09b      	b.n	1b24 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    19ec:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    19f0:	f1ba 0f00 	cmp.w	sl, #0
    19f4:	db07      	blt.n	1a06 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    19f6:	4651      	mov	r1, sl
    19f8:	4648      	mov	r0, r9
    19fa:	f008 fbbd 	bl	a178 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    19fe:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    1a02:	46d8      	mov	r8, fp
			precision = -1;

			break;
    1a04:	e08e      	b.n	1b24 <cbvprintf+0x49c>
				len = strlen(bps);
    1a06:	4648      	mov	r0, r9
    1a08:	f008 fbad 	bl	a166 <strlen>
    1a0c:	e7f7      	b.n	19fe <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1a0e:	9b04      	ldr	r3, [sp, #16]
    1a10:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    1a14:	46d8      	mov	r8, fp
			bpe = buf + 1;
    1a16:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    1a1a:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    1a1e:	e081      	b.n	1b24 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    1a20:	f018 0f08 	tst.w	r8, #8
    1a24:	d105      	bne.n	1a32 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    1a26:	f018 0810 	ands.w	r8, r8, #16
    1a2a:	d004      	beq.n	1a36 <cbvprintf+0x3ae>
				sign = ' ';
    1a2c:	f04f 0820 	mov.w	r8, #32
    1a30:	e001      	b.n	1a36 <cbvprintf+0x3ae>
				sign = '+';
    1a32:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    1a36:	9a04      	ldr	r2, [sp, #16]
    1a38:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	db02      	blt.n	1a44 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    1a3e:	9204      	str	r2, [sp, #16]
    1a40:	9305      	str	r3, [sp, #20]
    1a42:	e008      	b.n	1a56 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    1a44:	4252      	negs	r2, r2
    1a46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1a4a:	9204      	str	r2, [sp, #16]
    1a4c:	9305      	str	r3, [sp, #20]
				sign = '-';
    1a4e:	f04f 082d 	mov.w	r8, #45	; 0x2d
    1a52:	e000      	b.n	1a56 <cbvprintf+0x3ce>
		switch (conv->specifier) {
    1a54:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    1a56:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1a5a:	9300      	str	r3, [sp, #0]
    1a5c:	ab0a      	add	r3, sp, #40	; 0x28
    1a5e:	aa06      	add	r2, sp, #24
    1a60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1a64:	f008 f97a 	bl	9d5c <encode_uint>
    1a68:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    1a6a:	f1ba 0f00 	cmp.w	sl, #0
    1a6e:	f2c0 8088 	blt.w	1b82 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    1a72:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1a76:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    1a7a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1a7e:	f36f 1286 	bfc	r2, #6, #1
    1a82:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    1a86:	459a      	cmp	sl, r3
    1a88:	d97e      	bls.n	1b88 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    1a8a:	ebaa 0303 	sub.w	r3, sl, r3
    1a8e:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    1a90:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1a94:	e046      	b.n	1b24 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    1a96:	9804      	ldr	r0, [sp, #16]
    1a98:	b928      	cbnz	r0, 1aa6 <cbvprintf+0x41e>
		char sign = 0;
    1a9a:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    1a9c:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 1c54 <cbvprintf+0x5cc>
			bps = "(nil)";
    1aa0:	f1aa 0905 	sub.w	r9, sl, #5
    1aa4:	e03e      	b.n	1b24 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1aa6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1aaa:	9300      	str	r3, [sp, #0]
    1aac:	ab0a      	add	r3, sp, #40	; 0x28
    1aae:	aa06      	add	r2, sp, #24
    1ab0:	2100      	movs	r1, #0
    1ab2:	f008 f953 	bl	9d5c <encode_uint>
    1ab6:	4681      	mov	r9, r0
				conv->altform_0c = true;
    1ab8:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1abc:	f043 0310 	orr.w	r3, r3, #16
    1ac0:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    1ac4:	2378      	movs	r3, #120	; 0x78
    1ac6:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    1aca:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    1acc:	e7cd      	b.n	1a6a <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    1ace:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    1ad0:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1ad4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    1ad8:	2b07      	cmp	r3, #7
    1ada:	d806      	bhi.n	1aea <cbvprintf+0x462>
    1adc:	e8df f003 	tbb	[pc, r3]
    1ae0:	0f0d0b04 	.word	0x0f0d0b04
    1ae4:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    1ae8:	6014      	str	r4, [r2, #0]
		char sign = 0;
    1aea:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    1aec:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1af0:	f04f 0900 	mov.w	r9, #0
}
    1af4:	e016      	b.n	1b24 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    1af6:	7014      	strb	r4, [r2, #0]
		break;
    1af8:	e7f7      	b.n	1aea <cbvprintf+0x462>
		*(short *)dp = (short)count;
    1afa:	8014      	strh	r4, [r2, #0]
		break;
    1afc:	e7f5      	b.n	1aea <cbvprintf+0x462>
		*(long *)dp = (long)count;
    1afe:	6014      	str	r4, [r2, #0]
		break;
    1b00:	e7f3      	b.n	1aea <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    1b02:	17e3      	asrs	r3, r4, #31
    1b04:	6014      	str	r4, [r2, #0]
    1b06:	6053      	str	r3, [r2, #4]
		break;
    1b08:	e7ef      	b.n	1aea <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    1b0a:	17e3      	asrs	r3, r4, #31
    1b0c:	6014      	str	r4, [r2, #0]
    1b0e:	6053      	str	r3, [r2, #4]
		break;
    1b10:	e7eb      	b.n	1aea <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    1b12:	6014      	str	r4, [r2, #0]
		break;
    1b14:	e7e9      	b.n	1aea <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1b16:	6014      	str	r4, [r2, #0]
		break;
    1b18:	e7e7      	b.n	1aea <cbvprintf+0x462>
		switch (conv->specifier) {
    1b1a:	46d8      	mov	r8, fp
    1b1c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1b20:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    1b24:	f1b9 0f00 	cmp.w	r9, #0
    1b28:	f000 808d 	beq.w	1c46 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    1b2c:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    1b30:	f1b8 0f00 	cmp.w	r8, #0
    1b34:	d000      	beq.n	1b38 <cbvprintf+0x4b0>
			nj_len += 1U;
    1b36:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    1b38:	f89d 201a 	ldrb.w	r2, [sp, #26]
    1b3c:	f012 0f10 	tst.w	r2, #16
    1b40:	d025      	beq.n	1b8e <cbvprintf+0x506>
			nj_len += 2U;
    1b42:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    1b44:	9907      	ldr	r1, [sp, #28]
    1b46:	440b      	add	r3, r1
		if (conv->pad_fp) {
    1b48:	f012 0f40 	tst.w	r2, #64	; 0x40
    1b4c:	d001      	beq.n	1b52 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    1b4e:	9a08      	ldr	r2, [sp, #32]
    1b50:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    1b52:	2f00      	cmp	r7, #0
    1b54:	dd31      	ble.n	1bba <cbvprintf+0x532>
			width -= (int)nj_len;
    1b56:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    1b58:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1b5c:	f013 0f04 	tst.w	r3, #4
    1b60:	d12b      	bne.n	1bba <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    1b62:	f013 0f40 	tst.w	r3, #64	; 0x40
    1b66:	d017      	beq.n	1b98 <cbvprintf+0x510>
					if (sign != 0) {
    1b68:	f1b8 0f00 	cmp.w	r8, #0
    1b6c:	d017      	beq.n	1b9e <cbvprintf+0x516>
						OUTC(sign);
    1b6e:	4629      	mov	r1, r5
    1b70:	4640      	mov	r0, r8
    1b72:	47b0      	blx	r6
    1b74:	2800      	cmp	r0, #0
    1b76:	db6a      	blt.n	1c4e <cbvprintf+0x5c6>
    1b78:	3401      	adds	r4, #1
						sign = 0;
    1b7a:	46d8      	mov	r8, fp
					}
					pad = '0';
    1b7c:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1b80:	e00f      	b.n	1ba2 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    1b82:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1b86:	e7cd      	b.n	1b24 <cbvprintf+0x49c>
    1b88:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1b8c:	e7ca      	b.n	1b24 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    1b8e:	f012 0f08 	tst.w	r2, #8
    1b92:	d0d7      	beq.n	1b44 <cbvprintf+0x4bc>
			nj_len += 1U;
    1b94:	3301      	adds	r3, #1
    1b96:	e7d5      	b.n	1b44 <cbvprintf+0x4bc>
				char pad = ' ';
    1b98:	f04f 0b20 	mov.w	fp, #32
    1b9c:	e001      	b.n	1ba2 <cbvprintf+0x51a>
					pad = '0';
    1b9e:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1ba2:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    1ba4:	1e5f      	subs	r7, r3, #1
    1ba6:	2b00      	cmp	r3, #0
    1ba8:	dd07      	ble.n	1bba <cbvprintf+0x532>
					OUTC(pad);
    1baa:	4629      	mov	r1, r5
    1bac:	4658      	mov	r0, fp
    1bae:	47b0      	blx	r6
    1bb0:	2800      	cmp	r0, #0
    1bb2:	db4c      	blt.n	1c4e <cbvprintf+0x5c6>
    1bb4:	3401      	adds	r4, #1
				while (width-- > 0) {
    1bb6:	463b      	mov	r3, r7
    1bb8:	e7f4      	b.n	1ba4 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1bba:	f1b8 0f00 	cmp.w	r8, #0
    1bbe:	d005      	beq.n	1bcc <cbvprintf+0x544>
			OUTC(sign);
    1bc0:	4629      	mov	r1, r5
    1bc2:	4640      	mov	r0, r8
    1bc4:	47b0      	blx	r6
    1bc6:	2800      	cmp	r0, #0
    1bc8:	db41      	blt.n	1c4e <cbvprintf+0x5c6>
    1bca:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    1bcc:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1bd0:	f3c3 1200 	ubfx	r2, r3, #4, #1
    1bd4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1bd8:	4313      	orrs	r3, r2
    1bda:	d005      	beq.n	1be8 <cbvprintf+0x560>
				OUTC('0');
    1bdc:	4629      	mov	r1, r5
    1bde:	2030      	movs	r0, #48	; 0x30
    1be0:	47b0      	blx	r6
    1be2:	2800      	cmp	r0, #0
    1be4:	db33      	blt.n	1c4e <cbvprintf+0x5c6>
    1be6:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    1be8:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1bec:	f013 0f10 	tst.w	r3, #16
    1bf0:	d006      	beq.n	1c00 <cbvprintf+0x578>
				OUTC(conv->specifier);
    1bf2:	4629      	mov	r1, r5
    1bf4:	f89d 001b 	ldrb.w	r0, [sp, #27]
    1bf8:	47b0      	blx	r6
    1bfa:	2800      	cmp	r0, #0
    1bfc:	db27      	blt.n	1c4e <cbvprintf+0x5c6>
    1bfe:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    1c00:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    1c02:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    1c06:	2b00      	cmp	r3, #0
    1c08:	dd07      	ble.n	1c1a <cbvprintf+0x592>
				OUTC('0');
    1c0a:	4629      	mov	r1, r5
    1c0c:	2030      	movs	r0, #48	; 0x30
    1c0e:	47b0      	blx	r6
    1c10:	2800      	cmp	r0, #0
    1c12:	db1c      	blt.n	1c4e <cbvprintf+0x5c6>
    1c14:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    1c16:	4643      	mov	r3, r8
    1c18:	e7f3      	b.n	1c02 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    1c1a:	4653      	mov	r3, sl
    1c1c:	464a      	mov	r2, r9
    1c1e:	4629      	mov	r1, r5
    1c20:	4630      	mov	r0, r6
    1c22:	f008 f905 	bl	9e30 <outs>
    1c26:	2800      	cmp	r0, #0
    1c28:	db11      	blt.n	1c4e <cbvprintf+0x5c6>
    1c2a:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    1c2c:	2f00      	cmp	r7, #0
    1c2e:	dd07      	ble.n	1c40 <cbvprintf+0x5b8>
			OUTC(' ');
    1c30:	4629      	mov	r1, r5
    1c32:	2020      	movs	r0, #32
    1c34:	47b0      	blx	r6
    1c36:	2800      	cmp	r0, #0
    1c38:	db09      	blt.n	1c4e <cbvprintf+0x5c6>
    1c3a:	3401      	adds	r4, #1
			--width;
    1c3c:	3f01      	subs	r7, #1
    1c3e:	e7f5      	b.n	1c2c <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    1c40:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1c44:	e528      	b.n	1698 <cbvprintf+0x10>
    1c46:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1c4a:	e525      	b.n	1698 <cbvprintf+0x10>
		}
	}

	return count;
    1c4c:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    1c4e:	b011      	add	sp, #68	; 0x44
    1c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c54:	0000b55d 	.word	0x0000b55d

00001c58 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1c58:	b508      	push	{r3, lr}
	__asm__ volatile(
    1c5a:	f04f 0220 	mov.w	r2, #32
    1c5e:	f3ef 8311 	mrs	r3, BASEPRI
    1c62:	f382 8812 	msr	BASEPRI_MAX, r2
    1c66:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1c6a:	f001 ff07 	bl	3a7c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1c6e:	4803      	ldr	r0, [pc, #12]	; (1c7c <sys_reboot+0x24>)
    1c70:	f007 ff7a 	bl	9b68 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1c74:	f000 ffa0 	bl	2bb8 <arch_cpu_idle>
    1c78:	e7fc      	b.n	1c74 <sys_reboot+0x1c>
    1c7a:	bf00      	nop
    1c7c:	0000b560 	.word	0x0000b560

00001c80 <msg_process>:

static void msg_process(union log_msgs msg, bool bypass)
{
	struct log_backend const *backend;

	if (!bypass) {
    1c80:	2900      	cmp	r1, #0
    1c82:	d150      	bne.n	1d26 <msg_process+0xa6>
{
    1c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1c88:	4607      	mov	r7, r0
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    1c8a:	2400      	movs	r4, #0
    1c8c:	e022      	b.n	1cd4 <msg_process+0x54>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
    1c8e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1d28 <msg_process+0xa8>
    1c92:	f44f 7399 	mov.w	r3, #306	; 0x132
    1c96:	464a      	mov	r2, r9
    1c98:	4924      	ldr	r1, [pc, #144]	; (1d2c <msg_process+0xac>)
    1c9a:	4825      	ldr	r0, [pc, #148]	; (1d30 <msg_process+0xb0>)
    1c9c:	f008 f8e9 	bl	9e72 <assert_print>
    1ca0:	f44f 7199 	mov.w	r1, #306	; 0x132
    1ca4:	4648      	mov	r0, r9
    1ca6:	f008 f8dd 	bl	9e64 <assert_post_action>
    1caa:	e01f      	b.n	1cec <msg_process+0x6c>
	__ASSERT_NO_MSG(backend != NULL);
    1cac:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1d28 <msg_process+0xa8>
    1cb0:	2385      	movs	r3, #133	; 0x85
    1cb2:	464a      	mov	r2, r9
    1cb4:	491d      	ldr	r1, [pc, #116]	; (1d2c <msg_process+0xac>)
    1cb6:	481e      	ldr	r0, [pc, #120]	; (1d30 <msg_process+0xb0>)
    1cb8:	f008 f8db 	bl	9e72 <assert_print>
    1cbc:	2185      	movs	r1, #133	; 0x85
    1cbe:	4648      	mov	r0, r9
    1cc0:	f008 f8d0 	bl	9e64 <assert_post_action>
    1cc4:	e01e      	b.n	1d04 <msg_process+0x84>
	backend->api->process(backend, msg);
    1cc6:	f858 3005 	ldr.w	r3, [r8, r5]
    1cca:	681b      	ldr	r3, [r3, #0]
    1ccc:	4639      	mov	r1, r7
    1cce:	4630      	mov	r0, r6
    1cd0:	4798      	blx	r3
    1cd2:	3401      	adds	r4, #1
    1cd4:	4b17      	ldr	r3, [pc, #92]	; (1d34 <msg_process+0xb4>)
    1cd6:	4a18      	ldr	r2, [pc, #96]	; (1d38 <msg_process+0xb8>)
    1cd8:	1a9b      	subs	r3, r3, r2
    1cda:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1cde:	da20      	bge.n	1d22 <msg_process+0xa2>
	return &__log_backends_start[idx];
    1ce0:	ea4f 1804 	mov.w	r8, r4, lsl #4
    1ce4:	4d14      	ldr	r5, [pc, #80]	; (1d38 <msg_process+0xb8>)
	__ASSERT_NO_MSG(backend != NULL);
    1ce6:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    1cea:	d0d0      	beq.n	1c8e <msg_process+0xe>
	return backend->cb->active;
    1cec:	6873      	ldr	r3, [r6, #4]
    1cee:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);
			if (log_backend_is_active(backend) &&
    1cf0:	2b00      	cmp	r3, #0
    1cf2:	d0ee      	beq.n	1cd2 <msg_process+0x52>
			    msg_filter_check(backend, msg)) {
    1cf4:	4639      	mov	r1, r7
    1cf6:	4630      	mov	r0, r6
    1cf8:	f008 f8cc 	bl	9e94 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    1cfc:	2800      	cmp	r0, #0
    1cfe:	d0e8      	beq.n	1cd2 <msg_process+0x52>
	__ASSERT_NO_MSG(backend != NULL);
    1d00:	2e00      	cmp	r6, #0
    1d02:	d0d3      	beq.n	1cac <msg_process+0x2c>
	__ASSERT_NO_MSG(msg != NULL);
    1d04:	2f00      	cmp	r7, #0
    1d06:	d1de      	bne.n	1cc6 <msg_process+0x46>
    1d08:	f8df 901c 	ldr.w	r9, [pc, #28]	; 1d28 <msg_process+0xa8>
    1d0c:	2386      	movs	r3, #134	; 0x86
    1d0e:	464a      	mov	r2, r9
    1d10:	490a      	ldr	r1, [pc, #40]	; (1d3c <msg_process+0xbc>)
    1d12:	4807      	ldr	r0, [pc, #28]	; (1d30 <msg_process+0xb0>)
    1d14:	f008 f8ad 	bl	9e72 <assert_print>
    1d18:	2186      	movs	r1, #134	; 0x86
    1d1a:	4648      	mov	r0, r9
    1d1c:	f008 f8a2 	bl	9e64 <assert_post_action>
    1d20:	e7d1      	b.n	1cc6 <msg_process+0x46>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    1d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1d26:	4770      	bx	lr
    1d28:	0000b58c 	.word	0x0000b58c
    1d2c:	0000b5c4 	.word	0x0000b5c4
    1d30:	0000b180 	.word	0x0000b180
    1d34:	0000afe8 	.word	0x0000afe8
    1d38:	0000afc8 	.word	0x0000afc8
    1d3c:	0000b5dc 	.word	0x0000b5dc

00001d40 <log_format_func_t_get>:
}
    1d40:	4b01      	ldr	r3, [pc, #4]	; (1d48 <log_format_func_t_get+0x8>)
    1d42:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1d46:	4770      	bx	lr
    1d48:	0000b660 	.word	0x0000b660

00001d4c <log_init>:
{
    1d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
    1d4e:	4b20      	ldr	r3, [pc, #128]	; (1dd0 <log_init+0x84>)
    1d50:	4a20      	ldr	r2, [pc, #128]	; (1dd4 <log_init+0x88>)
    1d52:	1a9b      	subs	r3, r3, r2
    1d54:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    1d56:	2b90      	cmp	r3, #144	; 0x90
    1d58:	d80e      	bhi.n	1d78 <log_init+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1d5a:	4b1f      	ldr	r3, [pc, #124]	; (1dd8 <log_init+0x8c>)
    1d5c:	f3bf 8f5b 	dmb	ish
    1d60:	e853 2f00 	ldrex	r2, [r3]
    1d64:	1c51      	adds	r1, r2, #1
    1d66:	e843 1000 	strex	r0, r1, [r3]
    1d6a:	2800      	cmp	r0, #0
    1d6c:	d1f8      	bne.n	1d60 <log_init+0x14>
    1d6e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    1d72:	bb5a      	cbnz	r2, 1dcc <log_init+0x80>
	for (i = 0; i < log_backend_count_get(); i++) {
    1d74:	2400      	movs	r4, #0
    1d76:	e017      	b.n	1da8 <log_init+0x5c>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    1d78:	4c18      	ldr	r4, [pc, #96]	; (1ddc <log_init+0x90>)
    1d7a:	f240 2373 	movw	r3, #627	; 0x273
    1d7e:	4622      	mov	r2, r4
    1d80:	4917      	ldr	r1, [pc, #92]	; (1de0 <log_init+0x94>)
    1d82:	4818      	ldr	r0, [pc, #96]	; (1de4 <log_init+0x98>)
    1d84:	f008 f875 	bl	9e72 <assert_print>
    1d88:	f240 2173 	movw	r1, #627	; 0x273
    1d8c:	4620      	mov	r0, r4
    1d8e:	f008 f869 	bl	9e64 <assert_post_action>
    1d92:	e7e2      	b.n	1d5a <log_init+0xe>
					   backend->cb->ctx,
    1d94:	4b0f      	ldr	r3, [pc, #60]	; (1dd4 <log_init+0x88>)
    1d96:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    1d9a:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    1d9c:	2204      	movs	r2, #4
    1d9e:	6819      	ldr	r1, [r3, #0]
    1da0:	4628      	mov	r0, r5
    1da2:	f000 f8d3 	bl	1f4c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1da6:	3401      	adds	r4, #1
    1da8:	42b4      	cmp	r4, r6
    1daa:	da0f      	bge.n	1dcc <log_init+0x80>
		const struct log_backend *backend = log_backend_get(i);
    1dac:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
    1dae:	4d09      	ldr	r5, [pc, #36]	; (1dd4 <log_init+0x88>)
    1db0:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    1db4:	7b2b      	ldrb	r3, [r5, #12]
    1db6:	2b00      	cmp	r3, #0
    1db8:	d0f5      	beq.n	1da6 <log_init+0x5a>
			if (backend->api->init != NULL) {
    1dba:	0123      	lsls	r3, r4, #4
    1dbc:	4a05      	ldr	r2, [pc, #20]	; (1dd4 <log_init+0x88>)
    1dbe:	58d3      	ldr	r3, [r2, r3]
    1dc0:	699b      	ldr	r3, [r3, #24]
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	d0e6      	beq.n	1d94 <log_init+0x48>
				backend->api->init(backend);
    1dc6:	4628      	mov	r0, r5
    1dc8:	4798      	blx	r3
    1dca:	e7e3      	b.n	1d94 <log_init+0x48>
}
    1dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dce:	bf00      	nop
    1dd0:	0000afe8 	.word	0x0000afe8
    1dd4:	0000afc8 	.word	0x0000afc8
    1dd8:	20004404 	.word	0x20004404
    1ddc:	0000b5f0 	.word	0x0000b5f0
    1de0:	0000b638 	.word	0x0000b638
    1de4:	0000b180 	.word	0x0000b180

00001de8 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    1de8:	b138      	cbz	r0, 1dfa <log_set_timestamp_func+0x12>
{
    1dea:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    1dec:	4a04      	ldr	r2, [pc, #16]	; (1e00 <log_set_timestamp_func+0x18>)
    1dee:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    1df0:	4608      	mov	r0, r1
    1df2:	f000 fabf 	bl	2374 <log_output_timestamp_freq_set>
	return 0;
    1df6:	2000      	movs	r0, #0
}
    1df8:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1dfa:	f06f 0015 	mvn.w	r0, #21
}
    1dfe:	4770      	bx	lr
    1e00:	20004004 	.word	0x20004004

00001e04 <log_core_init>:
{
    1e04:	b508      	push	{r3, lr}
	panic_mode = false;
    1e06:	2300      	movs	r3, #0
    1e08:	4a04      	ldr	r2, [pc, #16]	; (1e1c <log_core_init+0x18>)
    1e0a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1e0c:	4a04      	ldr	r2, [pc, #16]	; (1e20 <log_core_init+0x1c>)
    1e0e:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    1e10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1e14:	4803      	ldr	r0, [pc, #12]	; (1e24 <log_core_init+0x20>)
    1e16:	f7ff ffe7 	bl	1de8 <log_set_timestamp_func>
}
    1e1a:	bd08      	pop	{r3, pc}
    1e1c:	20005151 	.word	0x20005151
    1e20:	20004400 	.word	0x20004400
    1e24:	00009e99 	.word	0x00009e99

00001e28 <z_impl_log_panic>:
	if (panic_mode) {
    1e28:	4b20      	ldr	r3, [pc, #128]	; (1eac <z_impl_log_panic+0x84>)
    1e2a:	781b      	ldrb	r3, [r3, #0]
    1e2c:	b103      	cbz	r3, 1e30 <z_impl_log_panic+0x8>
    1e2e:	4770      	bx	lr
{
    1e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
    1e34:	f7ff ff8a 	bl	1d4c <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1e38:	2400      	movs	r4, #0
    1e3a:	e013      	b.n	1e64 <z_impl_log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
    1e3c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1eb0 <z_impl_log_panic+0x88>
    1e40:	f44f 7399 	mov.w	r3, #306	; 0x132
    1e44:	4642      	mov	r2, r8
    1e46:	491b      	ldr	r1, [pc, #108]	; (1eb4 <z_impl_log_panic+0x8c>)
    1e48:	481b      	ldr	r0, [pc, #108]	; (1eb8 <z_impl_log_panic+0x90>)
    1e4a:	f008 f812 	bl	9e72 <assert_print>
    1e4e:	f44f 7199 	mov.w	r1, #306	; 0x132
    1e52:	4640      	mov	r0, r8
    1e54:	f008 f806 	bl	9e64 <assert_post_action>
    1e58:	e00f      	b.n	1e7a <z_impl_log_panic+0x52>
	backend->api->panic(backend);
    1e5a:	597b      	ldr	r3, [r7, r5]
    1e5c:	695b      	ldr	r3, [r3, #20]
    1e5e:	4630      	mov	r0, r6
    1e60:	4798      	blx	r3
    1e62:	3401      	adds	r4, #1
    1e64:	4b15      	ldr	r3, [pc, #84]	; (1ebc <z_impl_log_panic+0x94>)
    1e66:	4a16      	ldr	r2, [pc, #88]	; (1ec0 <z_impl_log_panic+0x98>)
    1e68:	1a9b      	subs	r3, r3, r2
    1e6a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1e6e:	da17      	bge.n	1ea0 <z_impl_log_panic+0x78>
	return &__log_backends_start[idx];
    1e70:	0127      	lsls	r7, r4, #4
    1e72:	4d13      	ldr	r5, [pc, #76]	; (1ec0 <z_impl_log_panic+0x98>)
	__ASSERT_NO_MSG(backend != NULL);
    1e74:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    1e78:	d0e0      	beq.n	1e3c <z_impl_log_panic+0x14>
	return backend->cb->active;
    1e7a:	6873      	ldr	r3, [r6, #4]
    1e7c:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1e7e:	2b00      	cmp	r3, #0
    1e80:	d0ef      	beq.n	1e62 <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
    1e82:	2e00      	cmp	r6, #0
    1e84:	d1e9      	bne.n	1e5a <z_impl_log_panic+0x32>
    1e86:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1eb0 <z_impl_log_panic+0x88>
    1e8a:	23d7      	movs	r3, #215	; 0xd7
    1e8c:	4642      	mov	r2, r8
    1e8e:	4909      	ldr	r1, [pc, #36]	; (1eb4 <z_impl_log_panic+0x8c>)
    1e90:	4809      	ldr	r0, [pc, #36]	; (1eb8 <z_impl_log_panic+0x90>)
    1e92:	f007 ffee 	bl	9e72 <assert_print>
    1e96:	21d7      	movs	r1, #215	; 0xd7
    1e98:	4640      	mov	r0, r8
    1e9a:	f007 ffe3 	bl	9e64 <assert_post_action>
    1e9e:	e7dc      	b.n	1e5a <z_impl_log_panic+0x32>
	panic_mode = true;
    1ea0:	4b02      	ldr	r3, [pc, #8]	; (1eac <z_impl_log_panic+0x84>)
    1ea2:	2201      	movs	r2, #1
    1ea4:	701a      	strb	r2, [r3, #0]
}
    1ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1eaa:	bf00      	nop
    1eac:	20005151 	.word	0x20005151
    1eb0:	0000b58c 	.word	0x0000b58c
    1eb4:	0000b5c4 	.word	0x0000b5c4
    1eb8:	0000b180 	.word	0x0000b180
    1ebc:	0000afe8 	.word	0x0000afe8
    1ec0:	0000afc8 	.word	0x0000afc8

00001ec4 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    1ec4:	4b01      	ldr	r3, [pc, #4]	; (1ecc <z_log_notify_backend_enabled+0x8>)
    1ec6:	2201      	movs	r2, #1
    1ec8:	701a      	strb	r2, [r3, #0]
}
    1eca:	4770      	bx	lr
    1ecc:	20005150 	.word	0x20005150

00001ed0 <z_log_dropped>:
    1ed0:	4b0d      	ldr	r3, [pc, #52]	; (1f08 <z_log_dropped+0x38>)
    1ed2:	f3bf 8f5b 	dmb	ish
    1ed6:	e853 2f00 	ldrex	r2, [r3]
    1eda:	3201      	adds	r2, #1
    1edc:	e843 2100 	strex	r1, r2, [r3]
    1ee0:	2900      	cmp	r1, #0
    1ee2:	d1f8      	bne.n	1ed6 <z_log_dropped+0x6>
    1ee4:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    1ee8:	b900      	cbnz	r0, 1eec <z_log_dropped+0x1c>
		atomic_dec(&buffered_cnt);
	}
}
    1eea:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1eec:	4b07      	ldr	r3, [pc, #28]	; (1f0c <z_log_dropped+0x3c>)
    1eee:	f3bf 8f5b 	dmb	ish
    1ef2:	e853 2f00 	ldrex	r2, [r3]
    1ef6:	3a01      	subs	r2, #1
    1ef8:	e843 2100 	strex	r1, r2, [r3]
    1efc:	2900      	cmp	r1, #0
    1efe:	d1f8      	bne.n	1ef2 <z_log_dropped+0x22>
    1f00:	f3bf 8f5b 	dmb	ish
    1f04:	e7f1      	b.n	1eea <z_log_dropped+0x1a>
    1f06:	bf00      	nop
    1f08:	20004400 	.word	0x20004400
    1f0c:	200043fc 	.word	0x200043fc

00001f10 <z_log_msg2_commit>:
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
    1f10:	b510      	push	{r4, lr}
    1f12:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1f14:	4b04      	ldr	r3, [pc, #16]	; (1f28 <z_log_msg2_commit+0x18>)
    1f16:	681b      	ldr	r3, [r3, #0]
    1f18:	4798      	blx	r3
    1f1a:	60a0      	str	r0, [r4, #8]
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    1f1c:	2100      	movs	r1, #0
    1f1e:	4620      	mov	r0, r4
    1f20:	f7ff feae 	bl	1c80 <msg_process>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    1f24:	bd10      	pop	{r4, pc}
    1f26:	bf00      	nop
    1f28:	20004004 	.word	0x20004004

00001f2c <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1f2c:	4b05      	ldr	r3, [pc, #20]	; (1f44 <log_source_name_get+0x18>)
    1f2e:	4a06      	ldr	r2, [pc, #24]	; (1f48 <log_source_name_get+0x1c>)
    1f30:	1a9b      	subs	r3, r3, r2
    1f32:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    1f36:	d202      	bcs.n	1f3e <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    1f38:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    1f3c:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1f3e:	2000      	movs	r0, #0
}
    1f40:	4770      	bx	lr
    1f42:	bf00      	nop
    1f44:	0000afc8 	.word	0x0000afc8
    1f48:	0000af80 	.word	0x0000af80

00001f4c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    1f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f4e:	4604      	mov	r4, r0
    1f50:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1f52:	4d1e      	ldr	r5, [pc, #120]	; (1fcc <log_backend_enable+0x80>)
    1f54:	1b45      	subs	r5, r0, r5
    1f56:	112d      	asrs	r5, r5, #4
    1f58:	3501      	adds	r5, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    1f5a:	6803      	ldr	r3, [r0, #0]
    1f5c:	681b      	ldr	r3, [r3, #0]
    1f5e:	b163      	cbz	r3, 1f7a <log_backend_enable+0x2e>
	}

	log_backend_id_set(backend, id);
    1f60:	b2ed      	uxtb	r5, r5
	__ASSERT_NO_MSG(backend != NULL);
    1f62:	b1cc      	cbz	r4, 1f98 <log_backend_enable+0x4c>
	backend->cb->id = id;
    1f64:	6863      	ldr	r3, [r4, #4]
    1f66:	711d      	strb	r5, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    1f68:	b314      	cbz	r4, 1fb0 <log_backend_enable+0x64>
	backend->cb->ctx = ctx;
    1f6a:	6863      	ldr	r3, [r4, #4]
    1f6c:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    1f6e:	6863      	ldr	r3, [r4, #4]
    1f70:	2201      	movs	r2, #1
    1f72:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1f74:	f7ff ffa6 	bl	1ec4 <z_log_notify_backend_enabled>
}
    1f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    1f7a:	4f15      	ldr	r7, [pc, #84]	; (1fd0 <log_backend_enable+0x84>)
    1f7c:	23bb      	movs	r3, #187	; 0xbb
    1f7e:	463a      	mov	r2, r7
    1f80:	4914      	ldr	r1, [pc, #80]	; (1fd4 <log_backend_enable+0x88>)
    1f82:	4815      	ldr	r0, [pc, #84]	; (1fd8 <log_backend_enable+0x8c>)
    1f84:	f007 ff75 	bl	9e72 <assert_print>
    1f88:	4814      	ldr	r0, [pc, #80]	; (1fdc <log_backend_enable+0x90>)
    1f8a:	f007 ff72 	bl	9e72 <assert_print>
    1f8e:	21bb      	movs	r1, #187	; 0xbb
    1f90:	4638      	mov	r0, r7
    1f92:	f007 ff67 	bl	9e64 <assert_post_action>
    1f96:	e7e3      	b.n	1f60 <log_backend_enable+0x14>
	__ASSERT_NO_MSG(backend != NULL);
    1f98:	4f11      	ldr	r7, [pc, #68]	; (1fe0 <log_backend_enable+0x94>)
    1f9a:	23e6      	movs	r3, #230	; 0xe6
    1f9c:	463a      	mov	r2, r7
    1f9e:	4911      	ldr	r1, [pc, #68]	; (1fe4 <log_backend_enable+0x98>)
    1fa0:	480d      	ldr	r0, [pc, #52]	; (1fd8 <log_backend_enable+0x8c>)
    1fa2:	f007 ff66 	bl	9e72 <assert_print>
    1fa6:	21e6      	movs	r1, #230	; 0xe6
    1fa8:	4638      	mov	r0, r7
    1faa:	f007 ff5b 	bl	9e64 <assert_post_action>
    1fae:	e7d9      	b.n	1f64 <log_backend_enable+0x18>
	__ASSERT_NO_MSG(backend != NULL);
    1fb0:	4d0b      	ldr	r5, [pc, #44]	; (1fe0 <log_backend_enable+0x94>)
    1fb2:	f240 1317 	movw	r3, #279	; 0x117
    1fb6:	462a      	mov	r2, r5
    1fb8:	490a      	ldr	r1, [pc, #40]	; (1fe4 <log_backend_enable+0x98>)
    1fba:	4807      	ldr	r0, [pc, #28]	; (1fd8 <log_backend_enable+0x8c>)
    1fbc:	f007 ff59 	bl	9e72 <assert_print>
    1fc0:	f240 1117 	movw	r1, #279	; 0x117
    1fc4:	4628      	mov	r0, r5
    1fc6:	f007 ff4d 	bl	9e64 <assert_post_action>
    1fca:	e7ce      	b.n	1f6a <log_backend_enable+0x1e>
    1fcc:	0000afc8 	.word	0x0000afc8
    1fd0:	0000b66c 	.word	0x0000b66c
    1fd4:	0000b6c8 	.word	0x0000b6c8
    1fd8:	0000b180 	.word	0x0000b180
    1fdc:	0000b6e0 	.word	0x0000b6e0
    1fe0:	0000b58c 	.word	0x0000b58c
    1fe4:	0000b5c4 	.word	0x0000b5c4

00001fe8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1fe8:	b40e      	push	{r1, r2, r3}
    1fea:	b500      	push	{lr}
    1fec:	b082      	sub	sp, #8
    1fee:	4601      	mov	r1, r0
    1ff0:	ab03      	add	r3, sp, #12
    1ff2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    1ff6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1ff8:	4803      	ldr	r0, [pc, #12]	; (2008 <print_formatted+0x20>)
    1ffa:	f7ff fb45 	bl	1688 <cbvprintf>
	va_end(args);

	return length;
}
    1ffe:	b002      	add	sp, #8
    2000:	f85d eb04 	ldr.w	lr, [sp], #4
    2004:	b003      	add	sp, #12
    2006:	4770      	bx	lr
    2008:	00009ecd 	.word	0x00009ecd

0000200c <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    200c:	b530      	push	{r4, r5, lr}
    200e:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    2010:	f011 0f44 	tst.w	r1, #68	; 0x44
    2014:	d005      	beq.n	2022 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    2016:	4b1a      	ldr	r3, [pc, #104]	; (2080 <timestamp_print+0x74>)
    2018:	681c      	ldr	r4, [r3, #0]
    201a:	b934      	cbnz	r4, 202a <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    201c:	2000      	movs	r0, #0
	}

	return length;
}
    201e:	b005      	add	sp, #20
    2020:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    2022:	4918      	ldr	r1, [pc, #96]	; (2084 <timestamp_print+0x78>)
    2024:	f7ff ffe0 	bl	1fe8 <print_formatted>
    2028:	e7f9      	b.n	201e <timestamp_print+0x12>
		timestamp /= timestamp_div;
    202a:	4b17      	ldr	r3, [pc, #92]	; (2088 <timestamp_print+0x7c>)
    202c:	6819      	ldr	r1, [r3, #0]
    202e:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    2032:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    2036:	4a15      	ldr	r2, [pc, #84]	; (208c <timestamp_print+0x80>)
    2038:	fba2 320c 	umull	r3, r2, r2, ip
    203c:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    203e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    2042:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    2046:	4b12      	ldr	r3, [pc, #72]	; (2090 <timestamp_print+0x84>)
    2048:	fba3 530e 	umull	r5, r3, r3, lr
    204c:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    204e:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    2052:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    2056:	fb0c f101 	mul.w	r1, ip, r1
    205a:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    205e:	fb05 1114 	mls	r1, r5, r4, r1
    2062:	fb0c f101 	mul.w	r1, ip, r1
    2066:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    206a:	9102      	str	r1, [sp, #8]
    206c:	9501      	str	r5, [sp, #4]
    206e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    2072:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    2076:	9100      	str	r1, [sp, #0]
    2078:	4906      	ldr	r1, [pc, #24]	; (2094 <timestamp_print+0x88>)
    207a:	f7ff ffb5 	bl	1fe8 <print_formatted>
    207e:	e7ce      	b.n	201e <timestamp_print+0x12>
    2080:	20004408 	.word	0x20004408
    2084:	0000b704 	.word	0x0000b704
    2088:	2000440c 	.word	0x2000440c
    208c:	91a2b3c5 	.word	0x91a2b3c5
    2090:	88888889 	.word	0x88888889
    2094:	0000b710 	.word	0x0000b710

00002098 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    2098:	b161      	cbz	r1, 20b4 <color_print+0x1c>
{
    209a:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    209c:	b12a      	cbz	r2, 20aa <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    209e:	4a06      	ldr	r2, [pc, #24]	; (20b8 <color_print+0x20>)
    20a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    20a4:	b912      	cbnz	r2, 20ac <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    20a6:	4a05      	ldr	r2, [pc, #20]	; (20bc <color_print+0x24>)
    20a8:	e000      	b.n	20ac <color_print+0x14>
    20aa:	4a04      	ldr	r2, [pc, #16]	; (20bc <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    20ac:	4904      	ldr	r1, [pc, #16]	; (20c0 <color_print+0x28>)
    20ae:	f7ff ff9b 	bl	1fe8 <print_formatted>
	}
}
    20b2:	bd08      	pop	{r3, pc}
    20b4:	4770      	bx	lr
    20b6:	bf00      	nop
    20b8:	0000b7d0 	.word	0x0000b7d0
    20bc:	0000b72c 	.word	0x0000b72c
    20c0:	0000b734 	.word	0x0000b734

000020c4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    20c4:	f011 0f10 	tst.w	r1, #16
    20c8:	d10b      	bne.n	20e2 <newline_print+0x1e>
{
    20ca:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    20cc:	f011 0f20 	tst.w	r1, #32
    20d0:	d003      	beq.n	20da <newline_print+0x16>
		print_formatted(ctx, "\n");
    20d2:	4904      	ldr	r1, [pc, #16]	; (20e4 <newline_print+0x20>)
    20d4:	f7ff ff88 	bl	1fe8 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    20d8:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    20da:	4903      	ldr	r1, [pc, #12]	; (20e8 <newline_print+0x24>)
    20dc:	f7ff ff84 	bl	1fe8 <print_formatted>
    20e0:	e7fa      	b.n	20d8 <newline_print+0x14>
    20e2:	4770      	bx	lr
    20e4:	0000b094 	.word	0x0000b094
    20e8:	0000ccd0 	.word	0x0000ccd0

000020ec <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    20ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20f0:	4605      	mov	r5, r0
    20f2:	460f      	mov	r7, r1
    20f4:	4616      	mov	r6, r2
    20f6:	4698      	mov	r8, r3
	newline_print(output, flags);
    20f8:	9906      	ldr	r1, [sp, #24]
    20fa:	f7ff ffe3 	bl	20c4 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    20fe:	2400      	movs	r4, #0
    2100:	4544      	cmp	r4, r8
    2102:	da05      	bge.n	2110 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    2104:	4923      	ldr	r1, [pc, #140]	; (2194 <hexdump_line_print+0xa8>)
    2106:	4628      	mov	r0, r5
    2108:	f7ff ff6e 	bl	1fe8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    210c:	3401      	adds	r4, #1
    210e:	e7f7      	b.n	2100 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2110:	2400      	movs	r4, #0
    2112:	e009      	b.n	2128 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    2114:	491f      	ldr	r1, [pc, #124]	; (2194 <hexdump_line_print+0xa8>)
    2116:	4628      	mov	r0, r5
    2118:	f7ff ff66 	bl	1fe8 <print_formatted>
    211c:	e00b      	b.n	2136 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    211e:	491e      	ldr	r1, [pc, #120]	; (2198 <hexdump_line_print+0xac>)
    2120:	4628      	mov	r0, r5
    2122:	f7ff ff61 	bl	1fe8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2126:	3401      	adds	r4, #1
    2128:	2c0f      	cmp	r4, #15
    212a:	dc0c      	bgt.n	2146 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    212c:	2c00      	cmp	r4, #0
    212e:	dd02      	ble.n	2136 <hexdump_line_print+0x4a>
    2130:	f014 0f07 	tst.w	r4, #7
    2134:	d0ee      	beq.n	2114 <hexdump_line_print+0x28>
		if (i < length) {
    2136:	42b4      	cmp	r4, r6
    2138:	d2f1      	bcs.n	211e <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    213a:	5d3a      	ldrb	r2, [r7, r4]
    213c:	4917      	ldr	r1, [pc, #92]	; (219c <hexdump_line_print+0xb0>)
    213e:	4628      	mov	r0, r5
    2140:	f7ff ff52 	bl	1fe8 <print_formatted>
    2144:	e7ef      	b.n	2126 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    2146:	4916      	ldr	r1, [pc, #88]	; (21a0 <hexdump_line_print+0xb4>)
    2148:	4628      	mov	r0, r5
    214a:	f7ff ff4d 	bl	1fe8 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    214e:	2400      	movs	r4, #0
    2150:	e009      	b.n	2166 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    2152:	4910      	ldr	r1, [pc, #64]	; (2194 <hexdump_line_print+0xa8>)
    2154:	4628      	mov	r0, r5
    2156:	f7ff ff47 	bl	1fe8 <print_formatted>
    215a:	e00b      	b.n	2174 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    215c:	4911      	ldr	r1, [pc, #68]	; (21a4 <hexdump_line_print+0xb8>)
    215e:	4628      	mov	r0, r5
    2160:	f7ff ff42 	bl	1fe8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2164:	3401      	adds	r4, #1
    2166:	2c0f      	cmp	r4, #15
    2168:	dc12      	bgt.n	2190 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    216a:	2c00      	cmp	r4, #0
    216c:	dd02      	ble.n	2174 <hexdump_line_print+0x88>
    216e:	f014 0f07 	tst.w	r4, #7
    2172:	d0ee      	beq.n	2152 <hexdump_line_print+0x66>
		if (i < length) {
    2174:	42b4      	cmp	r4, r6
    2176:	d206      	bcs.n	2186 <hexdump_line_print+0x9a>
			char c = (char)data[i];
    2178:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    217a:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    217e:	2b5e      	cmp	r3, #94	; 0x5e
    2180:	d9ec      	bls.n	215c <hexdump_line_print+0x70>
    2182:	222e      	movs	r2, #46	; 0x2e
    2184:	e7ea      	b.n	215c <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    2186:	4903      	ldr	r1, [pc, #12]	; (2194 <hexdump_line_print+0xa8>)
    2188:	4628      	mov	r0, r5
    218a:	f7ff ff2d 	bl	1fe8 <print_formatted>
    218e:	e7e9      	b.n	2164 <hexdump_line_print+0x78>
		}
	}
}
    2190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2194:	0000b75c 	.word	0x0000b75c
    2198:	0000b740 	.word	0x0000b740
    219c:	0000b738 	.word	0x0000b738
    21a0:	0000b744 	.word	0x0000b744
    21a4:	0000b748 	.word	0x0000b748

000021a8 <ids_print>:
{
    21a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21ac:	4680      	mov	r8, r0
    21ae:	4616      	mov	r6, r2
    21b0:	461d      	mov	r5, r3
    21b2:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    21b6:	b959      	cbnz	r1, 21d0 <ids_print+0x28>
	int total = 0;
    21b8:	2400      	movs	r4, #0
	if (source_id >= 0) {
    21ba:	2f00      	cmp	r7, #0
    21bc:	db1c      	blt.n	21f8 <ids_print+0x50>
		total += print_formatted(output,
    21be:	b186      	cbz	r6, 21e2 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    21c0:	2301      	movs	r3, #1
    21c2:	9a07      	ldr	r2, [sp, #28]
    21c4:	4093      	lsls	r3, r2
				(func_on &&
    21c6:	f013 0f10 	tst.w	r3, #16
    21ca:	d118      	bne.n	21fe <ids_print+0x56>
		total += print_formatted(output,
    21cc:	4e0d      	ldr	r6, [pc, #52]	; (2204 <ids_print+0x5c>)
    21ce:	e009      	b.n	21e4 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    21d0:	4b0d      	ldr	r3, [pc, #52]	; (2208 <ids_print+0x60>)
    21d2:	9a07      	ldr	r2, [sp, #28]
    21d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    21d8:	490c      	ldr	r1, [pc, #48]	; (220c <ids_print+0x64>)
    21da:	f7ff ff05 	bl	1fe8 <print_formatted>
    21de:	4604      	mov	r4, r0
    21e0:	e7eb      	b.n	21ba <ids_print+0x12>
		total += print_formatted(output,
    21e2:	4e08      	ldr	r6, [pc, #32]	; (2204 <ids_print+0x5c>)
    21e4:	4639      	mov	r1, r7
    21e6:	4628      	mov	r0, r5
    21e8:	f7ff fea0 	bl	1f2c <log_source_name_get>
    21ec:	4602      	mov	r2, r0
    21ee:	4631      	mov	r1, r6
    21f0:	4640      	mov	r0, r8
    21f2:	f7ff fef9 	bl	1fe8 <print_formatted>
    21f6:	4404      	add	r4, r0
}
    21f8:	4620      	mov	r0, r4
    21fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    21fe:	4e04      	ldr	r6, [pc, #16]	; (2210 <ids_print+0x68>)
    2200:	e7f0      	b.n	21e4 <ids_print+0x3c>
    2202:	bf00      	nop
    2204:	0000b74c 	.word	0x0000b74c
    2208:	0000b7e4 	.word	0x0000b7e4
    220c:	0000b758 	.word	0x0000b758
    2210:	0000b754 	.word	0x0000b754

00002214 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    2214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2218:	b085      	sub	sp, #20
    221a:	4605      	mov	r5, r0
    221c:	460c      	mov	r4, r1
    221e:	4616      	mov	r6, r2
    2220:	9303      	str	r3, [sp, #12]
    2222:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    2226:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    222a:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    222e:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    2232:	f007 fe49 	bl	9ec8 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    2236:	b1e8      	cbz	r0, 2274 <prefix_print+0x60>
    2238:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    223a:	4913      	ldr	r1, [pc, #76]	; (2288 <prefix_print+0x74>)
    223c:	4628      	mov	r0, r5
    223e:	f7ff fed3 	bl	1fe8 <print_formatted>
    2242:	4607      	mov	r7, r0
	}

	if (stamp) {
    2244:	f1bb 0f00 	cmp.w	fp, #0
    2248:	d116      	bne.n	2278 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    224a:	4642      	mov	r2, r8
    224c:	4651      	mov	r1, sl
    224e:	4628      	mov	r0, r5
    2250:	f007 fe66 	bl	9f20 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    2254:	f8cd 8004 	str.w	r8, [sp, #4]
    2258:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    225c:	9300      	str	r3, [sp, #0]
    225e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    2262:	4632      	mov	r2, r6
    2264:	4649      	mov	r1, r9
    2266:	4628      	mov	r0, r5
    2268:	f7ff ff9e 	bl	21a8 <ids_print>
			domain_id, source_id, level);


	return length;
}
    226c:	4438      	add	r0, r7
    226e:	b005      	add	sp, #20
    2270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    2274:	2700      	movs	r7, #0
    2276:	e7e5      	b.n	2244 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    2278:	9a03      	ldr	r2, [sp, #12]
    227a:	4621      	mov	r1, r4
    227c:	4628      	mov	r0, r5
    227e:	f7ff fec5 	bl	200c <timestamp_print>
    2282:	4407      	add	r7, r0
    2284:	e7e1      	b.n	224a <prefix_print+0x36>
    2286:	bf00      	nop
    2288:	0000b760 	.word	0x0000b760

0000228c <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    228c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2290:	b084      	sub	sp, #16
    2292:	4606      	mov	r6, r0
    2294:	460c      	mov	r4, r1
    2296:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    2298:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
    229a:	880a      	ldrh	r2, [r1, #0]
    229c:	f3c2 1882 	ubfx	r8, r2, #6, #3
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    22a0:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
    22a4:	d037      	beq.n	2316 <log_output_msg2_process+0x8a>
	return msg->hdr.source;
    22a6:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
    22a8:	7809      	ldrb	r1, [r1, #0]
    22aa:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    22ae:	b37a      	cbz	r2, 2310 <log_output_msg2_process+0x84>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    22b0:	4829      	ldr	r0, [pc, #164]	; (2358 <log_output_msg2_process+0xcc>)
    22b2:	1a12      	subs	r2, r2, r0
    22b4:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    22b8:	9202      	str	r2, [sp, #8]
    22ba:	9101      	str	r1, [sp, #4]
    22bc:	f8cd 8000 	str.w	r8, [sp]
    22c0:	2200      	movs	r2, #0
    22c2:	4639      	mov	r1, r7
    22c4:	4630      	mov	r0, r6
    22c6:	f7ff ffa5 	bl	2214 <prefix_print>
    22ca:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    22cc:	4625      	mov	r5, r4
    22ce:	f855 3b10 	ldr.w	r3, [r5], #16
    22d2:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    22d6:	b153      	cbz	r3, 22ee <log_output_msg2_process+0x62>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    22d8:	f1b8 0f00 	cmp.w	r8, #0
    22dc:	d11e      	bne.n	231c <log_output_msg2_process+0x90>
    22de:	481f      	ldr	r0, [pc, #124]	; (235c <log_output_msg2_process+0xd0>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    22e0:	462b      	mov	r3, r5
    22e2:	4632      	mov	r2, r6
    22e4:	491e      	ldr	r1, [pc, #120]	; (2360 <log_output_msg2_process+0xd4>)
    22e6:	f007 fbf3 	bl	9ad0 <cbpprintf_external>
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    22ea:	2800      	cmp	r0, #0
    22ec:	db18      	blt.n	2320 <log_output_msg2_process+0x94>
	*len = msg->hdr.desc.data_len;
    22ee:	8862      	ldrh	r2, [r4, #2]
    22f0:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    22f4:	6821      	ldr	r1, [r4, #0]
    22f6:	f3c1 2149 	ubfx	r1, r1, #9, #10
    22fa:	4429      	add	r1, r5
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    22fc:	b9fa      	cbnz	r2, 233e <log_output_msg2_process+0xb2>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    22fe:	f1b8 0f00 	cmp.w	r8, #0
    2302:	d122      	bne.n	234a <log_output_msg2_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    2304:	4630      	mov	r0, r6
    2306:	f007 fe3e 	bl	9f86 <log_output_flush>
}
    230a:	b004      	add	sp, #16
    230c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		int16_t source_id = source ?
    2310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2314:	e7d0      	b.n	22b8 <log_output_msg2_process+0x2c>
		prefix_offset = 0;
    2316:	f04f 0900 	mov.w	r9, #0
    231a:	e7d7      	b.n	22cc <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    231c:	4811      	ldr	r0, [pc, #68]	; (2364 <log_output_msg2_process+0xd8>)
    231e:	e7df      	b.n	22e0 <log_output_msg2_process+0x54>
		__ASSERT_NO_MSG(err >= 0);
    2320:	f8df a044 	ldr.w	sl, [pc, #68]	; 2368 <log_output_msg2_process+0xdc>
    2324:	f240 23b7 	movw	r3, #695	; 0x2b7
    2328:	4652      	mov	r2, sl
    232a:	4910      	ldr	r1, [pc, #64]	; (236c <log_output_msg2_process+0xe0>)
    232c:	4810      	ldr	r0, [pc, #64]	; (2370 <log_output_msg2_process+0xe4>)
    232e:	f007 fda0 	bl	9e72 <assert_print>
    2332:	f240 21b7 	movw	r1, #695	; 0x2b7
    2336:	4650      	mov	r0, sl
    2338:	f007 fd94 	bl	9e64 <assert_post_action>
    233c:	e7d7      	b.n	22ee <log_output_msg2_process+0x62>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
    233e:	9700      	str	r7, [sp, #0]
    2340:	464b      	mov	r3, r9
    2342:	4630      	mov	r0, r6
    2344:	f007 fe04 	bl	9f50 <log_msg2_hexdump>
    2348:	e7d9      	b.n	22fe <log_output_msg2_process+0x72>
		postfix_print(output, flags, level);
    234a:	4642      	mov	r2, r8
    234c:	4639      	mov	r1, r7
    234e:	4630      	mov	r0, r6
    2350:	f007 fdf2 	bl	9f38 <postfix_print>
    2354:	e7d6      	b.n	2304 <log_output_msg2_process+0x78>
    2356:	bf00      	nop
    2358:	0000af80 	.word	0x0000af80
    235c:	00009eeb 	.word	0x00009eeb
    2360:	00001689 	.word	0x00001689
    2364:	00009ecd 	.word	0x00009ecd
    2368:	0000b764 	.word	0x0000b764
    236c:	0000b7a4 	.word	0x0000b7a4
    2370:	0000b180 	.word	0x0000b180

00002374 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2374:	4b07      	ldr	r3, [pc, #28]	; (2394 <log_output_timestamp_freq_set+0x20>)
    2376:	2201      	movs	r2, #1
    2378:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    237a:	e004      	b.n	2386 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    237c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    237e:	4a05      	ldr	r2, [pc, #20]	; (2394 <log_output_timestamp_freq_set+0x20>)
    2380:	6813      	ldr	r3, [r2, #0]
    2382:	005b      	lsls	r3, r3, #1
    2384:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2386:	4b04      	ldr	r3, [pc, #16]	; (2398 <log_output_timestamp_freq_set+0x24>)
    2388:	4298      	cmp	r0, r3
    238a:	d8f7      	bhi.n	237c <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    238c:	4b03      	ldr	r3, [pc, #12]	; (239c <log_output_timestamp_freq_set+0x28>)
    238e:	6018      	str	r0, [r3, #0]
}
    2390:	4770      	bx	lr
    2392:	bf00      	nop
    2394:	2000440c 	.word	0x2000440c
    2398:	000f4240 	.word	0x000f4240
    239c:	20004408 	.word	0x20004408

000023a0 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    23a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23a4:	b087      	sub	sp, #28
    23a6:	af02      	add	r7, sp, #8
    23a8:	4682      	mov	sl, r0
    23aa:	6079      	str	r1, [r7, #4]
    23ac:	4691      	mov	r9, r2
    23ae:	4698      	mov	r8, r3
    23b0:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    23b2:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
	int plen;

	if (fmt) {
    23b6:	f1bb 0f00 	cmp.w	fp, #0
    23ba:	d016      	beq.n	23ea <z_impl_z_log_msg2_runtime_vcreate+0x4a>
		va_list ap2;

		va_copy(ap2, ap);
    23bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    23be:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    23c0:	9300      	str	r3, [sp, #0]
    23c2:	465b      	mov	r3, fp
    23c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    23c6:	2110      	movs	r1, #16
    23c8:	2000      	movs	r0, #0
    23ca:	f7fe f8fb 	bl	5c4 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    23ce:	1e05      	subs	r5, r0, #0
    23d0:	da0c      	bge.n	23ec <z_impl_z_log_msg2_runtime_vcreate+0x4c>
    23d2:	4c26      	ldr	r4, [pc, #152]	; (246c <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    23d4:	2367      	movs	r3, #103	; 0x67
    23d6:	4622      	mov	r2, r4
    23d8:	4925      	ldr	r1, [pc, #148]	; (2470 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    23da:	4826      	ldr	r0, [pc, #152]	; (2474 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    23dc:	f007 fd49 	bl	9e72 <assert_print>
    23e0:	2167      	movs	r1, #103	; 0x67
    23e2:	4620      	mov	r0, r4
    23e4:	f007 fd3e 	bl	9e64 <assert_post_action>
		va_end(ap2);
    23e8:	e000      	b.n	23ec <z_impl_z_log_msg2_runtime_vcreate+0x4c>
	} else {
		plen = 0;
    23ea:	2500      	movs	r5, #0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    23ec:	4629      	mov	r1, r5
    23ee:	19ab      	adds	r3, r5, r6
    23f0:	3317      	adds	r3, #23
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    23f2:	2400      	movs	r4, #0
    23f4:	f36f 0400 	bfc	r4, #0, #1
    23f8:	f36f 0441 	bfc	r4, #1, #1
    23fc:	f36f 0482 	bfc	r4, #2, #1
    2400:	f36a 04c5 	bfi	r4, sl, #3, #3
    2404:	f369 1488 	bfi	r4, r9, #6, #3
    2408:	f365 2452 	bfi	r4, r5, #9, #10
    240c:	f366 44de 	bfi	r4, r6, #19, #12
    2410:	f36f 74df 	bfc	r4, #31, #1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    2414:	f023 0307 	bic.w	r3, r3, #7
    2418:	ebad 0d03 	sub.w	sp, sp, r3
    241c:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    241e:	466b      	mov	r3, sp
    2420:	f113 0018 	adds.w	r0, r3, #24
    2424:	d00a      	beq.n	243c <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    2426:	f1bb 0f00 	cmp.w	fp, #0
    242a:	d007      	beq.n	243c <z_impl_z_log_msg2_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    242c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    242e:	9300      	str	r3, [sp, #0]
    2430:	465b      	mov	r3, fp
    2432:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2434:	f7fe f8c6 	bl	5c4 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    2438:	2800      	cmp	r0, #0
    243a:	db09      	blt.n	2450 <z_impl_z_log_msg2_runtime_vcreate+0xb0>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    243c:	4643      	mov	r3, r8
    243e:	4622      	mov	r2, r4
    2440:	6879      	ldr	r1, [r7, #4]
    2442:	4628      	mov	r0, r5
    2444:	f007 fdac 	bl	9fa0 <z_log_msg2_finalize>
	}
}
    2448:	3714      	adds	r7, #20
    244a:	46bd      	mov	sp, r7
    244c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(plen >= 0);
    2450:	f8df 9018 	ldr.w	r9, [pc, #24]	; 246c <z_impl_z_log_msg2_runtime_vcreate+0xcc>
    2454:	2381      	movs	r3, #129	; 0x81
    2456:	464a      	mov	r2, r9
    2458:	4905      	ldr	r1, [pc, #20]	; (2470 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    245a:	4806      	ldr	r0, [pc, #24]	; (2474 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    245c:	f007 fd09 	bl	9e72 <assert_print>
    2460:	2181      	movs	r1, #129	; 0x81
    2462:	4648      	mov	r0, r9
    2464:	f007 fcfe 	bl	9e64 <assert_post_action>
    2468:	e7e8      	b.n	243c <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    246a:	bf00      	nop
    246c:	0000b7f8 	.word	0x0000b7f8
    2470:	0000b834 	.word	0x0000b834
    2474:	0000b180 	.word	0x0000b180

00002478 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    2478:	b570      	push	{r4, r5, r6, lr}
    247a:	4606      	mov	r6, r0
    247c:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    247e:	2400      	movs	r4, #0
    2480:	e006      	b.n	2490 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    2482:	4b05      	ldr	r3, [pc, #20]	; (2498 <char_out+0x20>)
    2484:	6818      	ldr	r0, [r3, #0]
    2486:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    2488:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    248a:	685b      	ldr	r3, [r3, #4]
    248c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    248e:	3401      	adds	r4, #1
    2490:	42ac      	cmp	r4, r5
    2492:	d3f6      	bcc.n	2482 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    2494:	4628      	mov	r0, r5
    2496:	bd70      	pop	{r4, r5, r6, pc}
    2498:	20004428 	.word	0x20004428

0000249c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    249c:	4b01      	ldr	r3, [pc, #4]	; (24a4 <format_set+0x8>)
    249e:	6019      	str	r1, [r3, #0]
	return 0;
}
    24a0:	2000      	movs	r0, #0
    24a2:	4770      	bx	lr
    24a4:	20004418 	.word	0x20004418

000024a8 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
    24a8:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    24aa:	4809      	ldr	r0, [pc, #36]	; (24d0 <log_backend_uart_init+0x28>)
    24ac:	4b09      	ldr	r3, [pc, #36]	; (24d4 <log_backend_uart_init+0x2c>)
    24ae:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    24b0:	f008 fb3c 	bl	ab2c <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    24b4:	b100      	cbz	r0, 24b8 <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    24b6:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    24b8:	4c07      	ldr	r4, [pc, #28]	; (24d8 <log_backend_uart_init+0x30>)
    24ba:	2379      	movs	r3, #121	; 0x79
    24bc:	4622      	mov	r2, r4
    24be:	4907      	ldr	r1, [pc, #28]	; (24dc <log_backend_uart_init+0x34>)
    24c0:	4807      	ldr	r0, [pc, #28]	; (24e0 <log_backend_uart_init+0x38>)
    24c2:	f007 fcd6 	bl	9e72 <assert_print>
    24c6:	2179      	movs	r1, #121	; 0x79
    24c8:	4620      	mov	r0, r4
    24ca:	f007 fccb 	bl	9e64 <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
    24ce:	e7f2      	b.n	24b6 <log_backend_uart_init+0xe>
    24d0:	0000ade8 	.word	0x0000ade8
    24d4:	20004428 	.word	0x20004428
    24d8:	0000b840 	.word	0x0000b840
    24dc:	0000b878 	.word	0x0000b878
    24e0:	0000b180 	.word	0x0000b180

000024e4 <panic>:

static void panic(struct log_backend const *const backend)
{
    24e4:	b508      	push	{r3, lr}
	in_panic = true;
    24e6:	4b03      	ldr	r3, [pc, #12]	; (24f4 <panic+0x10>)
    24e8:	2201      	movs	r2, #1
    24ea:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    24ec:	4802      	ldr	r0, [pc, #8]	; (24f8 <panic+0x14>)
    24ee:	f007 fd4a 	bl	9f86 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    24f2:	bd08      	pop	{r3, pc}
    24f4:	20005152 	.word	0x20005152
    24f8:	0000b8d4 	.word	0x0000b8d4

000024fc <process>:
{
    24fc:	b510      	push	{r4, lr}
    24fe:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2500:	4b04      	ldr	r3, [pc, #16]	; (2514 <process+0x18>)
    2502:	6818      	ldr	r0, [r3, #0]
    2504:	f7ff fc1c 	bl	1d40 <log_format_func_t_get>
    2508:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    250a:	220f      	movs	r2, #15
    250c:	4621      	mov	r1, r4
    250e:	4802      	ldr	r0, [pc, #8]	; (2518 <process+0x1c>)
    2510:	4798      	blx	r3
}
    2512:	bd10      	pop	{r4, pc}
    2514:	20004418 	.word	0x20004418
    2518:	0000b8d4 	.word	0x0000b8d4

0000251c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    251c:	4b03      	ldr	r3, [pc, #12]	; (252c <log_backend_rtt_init+0x10>)
    251e:	2201      	movs	r2, #1
    2520:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    2522:	4b03      	ldr	r3, [pc, #12]	; (2530 <log_backend_rtt_init+0x14>)
    2524:	4a03      	ldr	r2, [pc, #12]	; (2534 <log_backend_rtt_init+0x18>)
    2526:	601a      	str	r2, [r3, #0]
}
    2528:	4770      	bx	lr
    252a:	bf00      	nop
    252c:	20005153 	.word	0x20005153
    2530:	20004454 	.word	0x20004454
    2534:	2000443c 	.word	0x2000443c

00002538 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2538:	4b01      	ldr	r3, [pc, #4]	; (2540 <format_set+0x8>)
    253a:	6019      	str	r1, [r3, #0]
	return 0;
}
    253c:	2000      	movs	r0, #0
    253e:	4770      	bx	lr
    2540:	20004458 	.word	0x20004458

00002544 <on_failed_write>:
{
    2544:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    2546:	b918      	cbnz	r0, 2550 <on_failed_write+0xc>
		host_present = false;
    2548:	4b04      	ldr	r3, [pc, #16]	; (255c <on_failed_write+0x18>)
    254a:	2200      	movs	r2, #0
    254c:	701a      	strb	r2, [r3, #0]
}
    254e:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
    2550:	f241 3088 	movw	r0, #5000	; 0x1388
    2554:	f008 fbcb 	bl	acee <z_impl_k_busy_wait>
    2558:	e7f9      	b.n	254e <on_failed_write+0xa>
    255a:	bf00      	nop
    255c:	20005153 	.word	0x20005153

00002560 <on_write>:
{
    2560:	b538      	push	{r3, r4, r5, lr}
    2562:	4604      	mov	r4, r0
	host_present = true;
    2564:	4b0a      	ldr	r3, [pc, #40]	; (2590 <on_write+0x30>)
    2566:	2201      	movs	r2, #1
    2568:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    256a:	4b0a      	ldr	r3, [pc, #40]	; (2594 <on_write+0x34>)
    256c:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    256e:	b92b      	cbnz	r3, 257c <on_write+0x1c>
}
    2570:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    2572:	1e65      	subs	r5, r4, #1
    2574:	4620      	mov	r0, r4
    2576:	f7ff ffe5 	bl	2544 <on_failed_write>
    257a:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    257c:	2000      	movs	r0, #0
    257e:	f004 facd 	bl	6b1c <SEGGER_RTT_HasDataUp>
    2582:	2800      	cmp	r0, #0
    2584:	d0f4      	beq.n	2570 <on_write+0x10>
    2586:	4b02      	ldr	r3, [pc, #8]	; (2590 <on_write+0x30>)
    2588:	781b      	ldrb	r3, [r3, #0]
    258a:	2b00      	cmp	r3, #0
    258c:	d1f1      	bne.n	2572 <on_write+0x12>
    258e:	e7ef      	b.n	2570 <on_write+0x10>
    2590:	20005153 	.word	0x20005153
    2594:	20005154 	.word	0x20005154

00002598 <data_out_block_mode>:
{
    2598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    259a:	4606      	mov	r6, r0
    259c:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    259e:	2704      	movs	r7, #4
    25a0:	e006      	b.n	25b0 <data_out_block_mode+0x18>
			on_write(retry_cnt);
    25a2:	4638      	mov	r0, r7
    25a4:	f7ff ffdc 	bl	2560 <on_write>
	} while ((ret == 0) && host_present);
    25a8:	b99c      	cbnz	r4, 25d2 <data_out_block_mode+0x3a>
    25aa:	4b0d      	ldr	r3, [pc, #52]	; (25e0 <data_out_block_mode+0x48>)
    25ac:	781b      	ldrb	r3, [r3, #0]
    25ae:	b183      	cbz	r3, 25d2 <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    25b0:	462a      	mov	r2, r5
    25b2:	4631      	mov	r1, r6
    25b4:	2000      	movs	r0, #0
    25b6:	f004 fa4d 	bl	6a54 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    25ba:	4604      	mov	r4, r0
    25bc:	2800      	cmp	r0, #0
    25be:	d1f0      	bne.n	25a2 <data_out_block_mode+0xa>
		} else if (host_present) {
    25c0:	4b07      	ldr	r3, [pc, #28]	; (25e0 <data_out_block_mode+0x48>)
    25c2:	781b      	ldrb	r3, [r3, #0]
    25c4:	2b00      	cmp	r3, #0
    25c6:	d0ef      	beq.n	25a8 <data_out_block_mode+0x10>
			retry_cnt--;
    25c8:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    25ca:	4638      	mov	r0, r7
    25cc:	f7ff ffba 	bl	2544 <on_failed_write>
    25d0:	e7ea      	b.n	25a8 <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
    25d2:	b914      	cbnz	r4, 25da <data_out_block_mode+0x42>
    25d4:	4b02      	ldr	r3, [pc, #8]	; (25e0 <data_out_block_mode+0x48>)
    25d6:	781b      	ldrb	r3, [r3, #0]
    25d8:	b903      	cbnz	r3, 25dc <data_out_block_mode+0x44>
    25da:	462c      	mov	r4, r5
}
    25dc:	4620      	mov	r0, r4
    25de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    25e0:	20005153 	.word	0x20005153

000025e4 <panic>:
{
    25e4:	b508      	push	{r3, lr}
	panic_mode = true;
    25e6:	4b03      	ldr	r3, [pc, #12]	; (25f4 <panic+0x10>)
    25e8:	2201      	movs	r2, #1
    25ea:	701a      	strb	r2, [r3, #0]
    25ec:	4802      	ldr	r0, [pc, #8]	; (25f8 <panic+0x14>)
    25ee:	f007 fcca 	bl	9f86 <log_output_flush>
}
    25f2:	bd08      	pop	{r3, pc}
    25f4:	20005154 	.word	0x20005154
    25f8:	0000b914 	.word	0x0000b914

000025fc <process>:
{
    25fc:	b510      	push	{r4, lr}
    25fe:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2600:	4b04      	ldr	r3, [pc, #16]	; (2614 <process+0x18>)
    2602:	6818      	ldr	r0, [r3, #0]
    2604:	f7ff fb9c 	bl	1d40 <log_format_func_t_get>
    2608:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    260a:	220f      	movs	r2, #15
    260c:	4621      	mov	r1, r4
    260e:	4802      	ldr	r0, [pc, #8]	; (2618 <process+0x1c>)
    2610:	4798      	blx	r3
}
    2612:	bd10      	pop	{r4, pc}
    2614:	20004458 	.word	0x20004458
    2618:	0000b914 	.word	0x0000b914

0000261c <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    261c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    261e:	4b40      	ldr	r3, [pc, #256]	; (2720 <pm_system_resume+0x104>)
    2620:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2622:	f005 031f 	and.w	r3, r5, #31
    2626:	2201      	movs	r2, #1
    2628:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    262a:	0969      	lsrs	r1, r5, #5
    262c:	4b3d      	ldr	r3, [pc, #244]	; (2724 <pm_system_resume+0x108>)
    262e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2632:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2634:	f3bf 8f5b 	dmb	ish
    2638:	e853 1f00 	ldrex	r1, [r3]
    263c:	ea01 0400 	and.w	r4, r1, r0
    2640:	e843 4600 	strex	r6, r4, [r3]
    2644:	2e00      	cmp	r6, #0
    2646:	d1f7      	bne.n	2638 <pm_system_resume+0x1c>
    2648:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    264c:	420a      	tst	r2, r1
    264e:	d100      	bne.n	2652 <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    2650:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    2652:	4a35      	ldr	r2, [pc, #212]	; (2728 <pm_system_resume+0x10c>)
    2654:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    2658:	0098      	lsls	r0, r3, #2
    265a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    265e:	4933      	ldr	r1, [pc, #204]	; (272c <pm_system_resume+0x110>)
    2660:	b1a9      	cbz	r1, 268e <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2662:	7859      	ldrb	r1, [r3, #1]
    2664:	5c10      	ldrb	r0, [r2, r0]
    2666:	f007 fdfd 	bl	a264 <pm_state_exit_post_ops>
    266a:	f04f 0320 	mov.w	r3, #32
    266e:	f3ef 8611 	mrs	r6, BASEPRI
    2672:	f383 8812 	msr	BASEPRI_MAX, r3
    2676:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    267a:	482d      	ldr	r0, [pc, #180]	; (2730 <pm_system_resume+0x114>)
    267c:	f004 fd42 	bl	7104 <z_spin_lock_valid>
    2680:	b158      	cbz	r0, 269a <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    2682:	482b      	ldr	r0, [pc, #172]	; (2730 <pm_system_resume+0x114>)
    2684:	f004 fd5e 	bl	7144 <z_spin_lock_set_owner>
	return list->head;
    2688:	4b2a      	ldr	r3, [pc, #168]	; (2734 <pm_system_resume+0x118>)
    268a:	681c      	ldr	r4, [r3, #0]
    268c:	e020      	b.n	26d0 <pm_system_resume+0xb4>
	__asm__ volatile(
    268e:	2300      	movs	r3, #0
    2690:	f383 8811 	msr	BASEPRI, r3
    2694:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2698:	e7e7      	b.n	266a <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    269a:	4c27      	ldr	r4, [pc, #156]	; (2738 <pm_system_resume+0x11c>)
    269c:	238e      	movs	r3, #142	; 0x8e
    269e:	4622      	mov	r2, r4
    26a0:	4926      	ldr	r1, [pc, #152]	; (273c <pm_system_resume+0x120>)
    26a2:	4827      	ldr	r0, [pc, #156]	; (2740 <pm_system_resume+0x124>)
    26a4:	f007 fbe5 	bl	9e72 <assert_print>
    26a8:	4921      	ldr	r1, [pc, #132]	; (2730 <pm_system_resume+0x114>)
    26aa:	4826      	ldr	r0, [pc, #152]	; (2744 <pm_system_resume+0x128>)
    26ac:	f007 fbe1 	bl	9e72 <assert_print>
    26b0:	218e      	movs	r1, #142	; 0x8e
    26b2:	4620      	mov	r0, r4
    26b4:	f007 fbd6 	bl	9e64 <assert_post_action>
    26b8:	e7e3      	b.n	2682 <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    26ba:	4b19      	ldr	r3, [pc, #100]	; (2720 <pm_system_resume+0x104>)
    26bc:	7d1b      	ldrb	r3, [r3, #20]
    26be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    26c2:	4919      	ldr	r1, [pc, #100]	; (2728 <pm_system_resume+0x10c>)
    26c4:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    26c8:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    26ca:	b10c      	cbz	r4, 26d0 <pm_system_resume+0xb4>
	return node->next;
    26cc:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    26ce:	b124      	cbz	r4, 26da <pm_system_resume+0xbe>
    26d0:	b11c      	cbz	r4, 26da <pm_system_resume+0xbe>
			callback = notifier->state_exit;
    26d2:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    26d4:	2a00      	cmp	r2, #0
    26d6:	d1f0      	bne.n	26ba <pm_system_resume+0x9e>
    26d8:	e7f7      	b.n	26ca <pm_system_resume+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    26da:	4815      	ldr	r0, [pc, #84]	; (2730 <pm_system_resume+0x114>)
    26dc:	f004 fd22 	bl	7124 <z_spin_unlock_valid>
    26e0:	b170      	cbz	r0, 2700 <pm_system_resume+0xe4>
	__asm__ volatile(
    26e2:	f386 8811 	msr	BASEPRI, r6
    26e6:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    26ea:	4a0f      	ldr	r2, [pc, #60]	; (2728 <pm_system_resume+0x10c>)
    26ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    26f0:	00a9      	lsls	r1, r5, #2
    26f2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    26f6:	2300      	movs	r3, #0
    26f8:	5053      	str	r3, [r2, r1]
    26fa:	606b      	str	r3, [r5, #4]
    26fc:	60ab      	str	r3, [r5, #8]
}
    26fe:	e7a7      	b.n	2650 <pm_system_resume+0x34>
    2700:	4c0d      	ldr	r4, [pc, #52]	; (2738 <pm_system_resume+0x11c>)
    2702:	23b9      	movs	r3, #185	; 0xb9
    2704:	4622      	mov	r2, r4
    2706:	4910      	ldr	r1, [pc, #64]	; (2748 <pm_system_resume+0x12c>)
    2708:	480d      	ldr	r0, [pc, #52]	; (2740 <pm_system_resume+0x124>)
    270a:	f007 fbb2 	bl	9e72 <assert_print>
    270e:	4908      	ldr	r1, [pc, #32]	; (2730 <pm_system_resume+0x114>)
    2710:	480e      	ldr	r0, [pc, #56]	; (274c <pm_system_resume+0x130>)
    2712:	f007 fbae 	bl	9e72 <assert_print>
    2716:	21b9      	movs	r1, #185	; 0xb9
    2718:	4620      	mov	r0, r4
    271a:	f007 fba3 	bl	9e64 <assert_post_action>
    271e:	e7e0      	b.n	26e2 <pm_system_resume+0xc6>
    2720:	20004f28 	.word	0x20004f28
    2724:	20004484 	.word	0x20004484
    2728:	20004474 	.word	0x20004474
    272c:	0000a265 	.word	0x0000a265
    2730:	20004468 	.word	0x20004468
    2734:	2000446c 	.word	0x2000446c
    2738:	0000b32c 	.word	0x0000b32c
    273c:	0000b38c 	.word	0x0000b38c
    2740:	0000b180 	.word	0x0000b180
    2744:	0000b3a4 	.word	0x0000b3a4
    2748:	0000b35c 	.word	0x0000b35c
    274c:	0000b374 	.word	0x0000b374

00002750 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2750:	b570      	push	{r4, r5, r6, lr}
    2752:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2754:	4b6d      	ldr	r3, [pc, #436]	; (290c <pm_system_suspend+0x1bc>)
    2756:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2758:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    275a:	f3bf 8f5b 	dmb	ish
    275e:	4b6c      	ldr	r3, [pc, #432]	; (2910 <pm_system_suspend+0x1c0>)
    2760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2764:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    2768:	f005 021f 	and.w	r2, r5, #31
    276c:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    276e:	f013 0f01 	tst.w	r3, #1
    2772:	d01d      	beq.n	27b0 <pm_system_suspend+0x60>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2774:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    2778:	4a66      	ldr	r2, [pc, #408]	; (2914 <pm_system_suspend+0x1c4>)
    277a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    277e:	b333      	cbz	r3, 27ce <pm_system_suspend+0x7e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    2780:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    2784:	d139      	bne.n	27fa <pm_system_suspend+0xaa>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2786:	f005 facd 	bl	7d24 <k_sched_lock>
	__asm__ volatile(
    278a:	f04f 0320 	mov.w	r3, #32
    278e:	f3ef 8611 	mrs	r6, BASEPRI
    2792:	f383 8812 	msr	BASEPRI_MAX, r3
    2796:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    279a:	485f      	ldr	r0, [pc, #380]	; (2918 <pm_system_suspend+0x1c8>)
    279c:	f004 fcb2 	bl	7104 <z_spin_lock_valid>
    27a0:	2800      	cmp	r0, #0
    27a2:	d040      	beq.n	2826 <pm_system_suspend+0xd6>
	z_spin_lock_set_owner(l);
    27a4:	485c      	ldr	r0, [pc, #368]	; (2918 <pm_system_suspend+0x1c8>)
    27a6:	f004 fccd 	bl	7144 <z_spin_lock_set_owner>
	return list->head;
    27aa:	4b5c      	ldr	r3, [pc, #368]	; (291c <pm_system_suspend+0x1cc>)
    27ac:	681c      	ldr	r4, [r3, #0]
    27ae:	e055      	b.n	285c <pm_system_suspend+0x10c>
		info = pm_policy_next_state(id, ticks);
    27b0:	4601      	mov	r1, r0
    27b2:	4628      	mov	r0, r5
    27b4:	f000 f8d6 	bl	2964 <pm_policy_next_state>
		if (info != NULL) {
    27b8:	2800      	cmp	r0, #0
    27ba:	d0db      	beq.n	2774 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    27bc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    27c0:	4a54      	ldr	r2, [pc, #336]	; (2914 <pm_system_suspend+0x1c4>)
    27c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27c6:	c807      	ldmia	r0, {r0, r1, r2}
    27c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    27cc:	e7d2      	b.n	2774 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    27ce:	f005 021f 	and.w	r2, r5, #31
    27d2:	2301      	movs	r3, #1
    27d4:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    27d6:	096d      	lsrs	r5, r5, #5
    27d8:	4a4d      	ldr	r2, [pc, #308]	; (2910 <pm_system_suspend+0x1c0>)
    27da:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    27de:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    27e0:	f3bf 8f5b 	dmb	ish
    27e4:	e855 2f00 	ldrex	r2, [r5]
    27e8:	401a      	ands	r2, r3
    27ea:	e845 2100 	strex	r1, r2, [r5]
    27ee:	2900      	cmp	r1, #0
    27f0:	d1f8      	bne.n	27e4 <pm_system_suspend+0x94>
    27f2:	f3bf 8f5b 	dmb	ish
		ret = false;
    27f6:	2000      	movs	r0, #0
		goto end;
    27f8:	e077      	b.n	28ea <pm_system_suspend+0x19a>
		     k_us_to_ticks_ceil32(
    27fa:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    27fe:	4a45      	ldr	r2, [pc, #276]	; (2914 <pm_system_suspend+0x1c4>)
    2800:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2804:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    2806:	0c41      	lsrs	r1, r0, #17
    2808:	03c0      	lsls	r0, r0, #15
    280a:	4b45      	ldr	r3, [pc, #276]	; (2920 <pm_system_suspend+0x1d0>)
    280c:	18c0      	adds	r0, r0, r3
    280e:	4a45      	ldr	r2, [pc, #276]	; (2924 <pm_system_suspend+0x1d4>)
    2810:	f04f 0300 	mov.w	r3, #0
    2814:	f141 0100 	adc.w	r1, r1, #0
    2818:	f7fd fc72 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    281c:	2101      	movs	r1, #1
    281e:	1a20      	subs	r0, r4, r0
    2820:	f006 fdb0 	bl	9384 <z_set_timeout_expiry>
    2824:	e7af      	b.n	2786 <pm_system_suspend+0x36>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2826:	4c40      	ldr	r4, [pc, #256]	; (2928 <pm_system_suspend+0x1d8>)
    2828:	238e      	movs	r3, #142	; 0x8e
    282a:	4622      	mov	r2, r4
    282c:	493f      	ldr	r1, [pc, #252]	; (292c <pm_system_suspend+0x1dc>)
    282e:	4840      	ldr	r0, [pc, #256]	; (2930 <pm_system_suspend+0x1e0>)
    2830:	f007 fb1f 	bl	9e72 <assert_print>
    2834:	4938      	ldr	r1, [pc, #224]	; (2918 <pm_system_suspend+0x1c8>)
    2836:	483f      	ldr	r0, [pc, #252]	; (2934 <pm_system_suspend+0x1e4>)
    2838:	f007 fb1b 	bl	9e72 <assert_print>
    283c:	218e      	movs	r1, #142	; 0x8e
    283e:	4620      	mov	r0, r4
    2840:	f007 fb10 	bl	9e64 <assert_post_action>
    2844:	e7ae      	b.n	27a4 <pm_system_suspend+0x54>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2846:	4b31      	ldr	r3, [pc, #196]	; (290c <pm_system_suspend+0x1bc>)
    2848:	7d1b      	ldrb	r3, [r3, #20]
    284a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    284e:	4931      	ldr	r1, [pc, #196]	; (2914 <pm_system_suspend+0x1c4>)
    2850:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    2854:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    2856:	b10c      	cbz	r4, 285c <pm_system_suspend+0x10c>
	return node->next;
    2858:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    285a:	b124      	cbz	r4, 2866 <pm_system_suspend+0x116>
    285c:	b11c      	cbz	r4, 2866 <pm_system_suspend+0x116>
			callback = notifier->state_entry;
    285e:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    2860:	2a00      	cmp	r2, #0
    2862:	d1f0      	bne.n	2846 <pm_system_suspend+0xf6>
    2864:	e7f7      	b.n	2856 <pm_system_suspend+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2866:	482c      	ldr	r0, [pc, #176]	; (2918 <pm_system_suspend+0x1c8>)
    2868:	f004 fc5c 	bl	7124 <z_spin_unlock_valid>
    286c:	2800      	cmp	r0, #0
    286e:	d03d      	beq.n	28ec <pm_system_suspend+0x19c>
	__asm__ volatile(
    2870:	f386 8811 	msr	BASEPRI, r6
    2874:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2878:	f005 031f 	and.w	r3, r5, #31
    287c:	2101      	movs	r1, #1
    287e:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2880:	096b      	lsrs	r3, r5, #5
    2882:	4a2d      	ldr	r2, [pc, #180]	; (2938 <pm_system_suspend+0x1e8>)
    2884:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2888:	f3bf 8f5b 	dmb	ish
    288c:	e853 2f00 	ldrex	r2, [r3]
    2890:	430a      	orrs	r2, r1
    2892:	e843 2000 	strex	r0, r2, [r3]
    2896:	2800      	cmp	r0, #0
    2898:	d1f8      	bne.n	288c <pm_system_suspend+0x13c>
    289a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    289e:	4b27      	ldr	r3, [pc, #156]	; (293c <pm_system_suspend+0x1ec>)
    28a0:	b14b      	cbz	r3, 28b6 <pm_system_suspend+0x166>
		pm_state_set(info->state, info->substate_id);
    28a2:	4b1c      	ldr	r3, [pc, #112]	; (2914 <pm_system_suspend+0x1c4>)
    28a4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    28a8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    28ac:	7849      	ldrb	r1, [r1, #1]
    28ae:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    28b2:	f007 fccb 	bl	a24c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    28b6:	f7ff feb1 	bl	261c <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    28ba:	f005 031f 	and.w	r3, r5, #31
    28be:	2401      	movs	r4, #1
    28c0:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    28c4:	096d      	lsrs	r5, r5, #5
    28c6:	4a12      	ldr	r2, [pc, #72]	; (2910 <pm_system_suspend+0x1c0>)
    28c8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    28cc:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    28ce:	f3bf 8f5b 	dmb	ish
    28d2:	e855 2f00 	ldrex	r2, [r5]
    28d6:	401a      	ands	r2, r3
    28d8:	e845 2100 	strex	r1, r2, [r5]
    28dc:	2900      	cmp	r1, #0
    28de:	d1f8      	bne.n	28d2 <pm_system_suspend+0x182>
    28e0:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    28e4:	f005 ffaa 	bl	883c <k_sched_unlock>
	bool ret = true;
    28e8:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    28ea:	bd70      	pop	{r4, r5, r6, pc}
    28ec:	4c0e      	ldr	r4, [pc, #56]	; (2928 <pm_system_suspend+0x1d8>)
    28ee:	23b9      	movs	r3, #185	; 0xb9
    28f0:	4622      	mov	r2, r4
    28f2:	4913      	ldr	r1, [pc, #76]	; (2940 <pm_system_suspend+0x1f0>)
    28f4:	480e      	ldr	r0, [pc, #56]	; (2930 <pm_system_suspend+0x1e0>)
    28f6:	f007 fabc 	bl	9e72 <assert_print>
    28fa:	4907      	ldr	r1, [pc, #28]	; (2918 <pm_system_suspend+0x1c8>)
    28fc:	4811      	ldr	r0, [pc, #68]	; (2944 <pm_system_suspend+0x1f4>)
    28fe:	f007 fab8 	bl	9e72 <assert_print>
    2902:	21b9      	movs	r1, #185	; 0xb9
    2904:	4620      	mov	r0, r4
    2906:	f007 faad 	bl	9e64 <assert_post_action>
    290a:	e7b1      	b.n	2870 <pm_system_suspend+0x120>
    290c:	20004f28 	.word	0x20004f28
    2910:	20004480 	.word	0x20004480
    2914:	20004474 	.word	0x20004474
    2918:	20004468 	.word	0x20004468
    291c:	2000446c 	.word	0x2000446c
    2920:	000f423f 	.word	0x000f423f
    2924:	000f4240 	.word	0x000f4240
    2928:	0000b32c 	.word	0x0000b32c
    292c:	0000b38c 	.word	0x0000b38c
    2930:	0000b180 	.word	0x0000b180
    2934:	0000b3a4 	.word	0x0000b3a4
    2938:	20004484 	.word	0x20004484
    293c:	0000a24d 	.word	0x0000a24d
    2940:	0000b35c 	.word	0x0000b35c
    2944:	0000b374 	.word	0x0000b374

00002948 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2948:	f3bf 8f5b 	dmb	ish
    294c:	4b04      	ldr	r3, [pc, #16]	; (2960 <pm_policy_state_lock_is_active+0x18>)
    294e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2952:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    2956:	3800      	subs	r0, #0
    2958:	bf18      	it	ne
    295a:	2001      	movne	r0, #1
    295c:	4770      	bx	lr
    295e:	bf00      	nop
    2960:	20004488 	.word	0x20004488

00002964 <pm_policy_next_state>:
{
    2964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2968:	b082      	sub	sp, #8
    296a:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    296c:	a901      	add	r1, sp, #4
    296e:	f000 f843 	bl	29f8 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2972:	1e44      	subs	r4, r0, #1
    2974:	b224      	sxth	r4, r4
    2976:	e007      	b.n	2988 <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    2978:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    297c:	d032      	beq.n	29e4 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    297e:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    2980:	42b0      	cmp	r0, r6
    2982:	d92f      	bls.n	29e4 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2984:	3c01      	subs	r4, #1
    2986:	b224      	sxth	r4, r4
    2988:	2c00      	cmp	r4, #0
    298a:	db2a      	blt.n	29e2 <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    298c:	9b01      	ldr	r3, [sp, #4]
    298e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2992:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    2996:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    299a:	f7ff ffd5 	bl	2948 <pm_policy_state_lock_is_active>
    299e:	2800      	cmp	r0, #0
    29a0:	d1f0      	bne.n	2984 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    29a2:	6868      	ldr	r0, [r5, #4]
    29a4:	0c41      	lsrs	r1, r0, #17
    29a6:	03c0      	lsls	r0, r0, #15
    29a8:	4f10      	ldr	r7, [pc, #64]	; (29ec <pm_policy_next_state+0x88>)
    29aa:	19c0      	adds	r0, r0, r7
    29ac:	4a10      	ldr	r2, [pc, #64]	; (29f0 <pm_policy_next_state+0x8c>)
    29ae:	f04f 0300 	mov.w	r3, #0
    29b2:	f141 0100 	adc.w	r1, r1, #0
    29b6:	f7fd fba3 	bl	100 <__aeabi_uldivmod>
    29ba:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    29bc:	68ab      	ldr	r3, [r5, #8]
    29be:	0c59      	lsrs	r1, r3, #17
    29c0:	03db      	lsls	r3, r3, #15
    29c2:	19d8      	adds	r0, r3, r7
    29c4:	4a0a      	ldr	r2, [pc, #40]	; (29f0 <pm_policy_next_state+0x8c>)
    29c6:	f04f 0300 	mov.w	r3, #0
    29ca:	f141 0100 	adc.w	r1, r1, #0
    29ce:	f7fd fb97 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    29d2:	4b08      	ldr	r3, [pc, #32]	; (29f4 <pm_policy_next_state+0x90>)
    29d4:	681b      	ldr	r3, [r3, #0]
    29d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    29da:	d0cd      	beq.n	2978 <pm_policy_next_state+0x14>
    29dc:	4283      	cmp	r3, r0
    29de:	d8cb      	bhi.n	2978 <pm_policy_next_state+0x14>
    29e0:	e7d0      	b.n	2984 <pm_policy_next_state+0x20>
	return NULL;
    29e2:	2500      	movs	r5, #0
}
    29e4:	4628      	mov	r0, r5
    29e6:	b002      	add	sp, #8
    29e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29ec:	000f423f 	.word	0x000f423f
    29f0:	000f4240 	.word	0x000f4240
    29f4:	20004008 	.word	0x20004008

000029f8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    29f8:	b908      	cbnz	r0, 29fe <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    29fa:	4b02      	ldr	r3, [pc, #8]	; (2a04 <pm_state_cpu_get_all+0xc>)
    29fc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    29fe:	2000      	movs	r0, #0
    2a00:	4770      	bx	lr
    2a02:	bf00      	nop
    2a04:	0000b928 	.word	0x0000b928

00002a08 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    2a08:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    2a0a:	4802      	ldr	r0, [pc, #8]	; (2a14 <nrf_cc3xx_platform_abort_init+0xc>)
    2a0c:	f006 feca 	bl	97a4 <nrf_cc3xx_platform_set_abort>
}
    2a10:	bd08      	pop	{r3, pc}
    2a12:	bf00      	nop
    2a14:	0000b928 	.word	0x0000b928

00002a18 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2a18:	b1d0      	cbz	r0, 2a50 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2a1a:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2a1c:	6842      	ldr	r2, [r0, #4]
    2a1e:	2a04      	cmp	r2, #4
    2a20:	d005      	beq.n	2a2e <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2a22:	b1d2      	cbz	r2, 2a5a <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    2a24:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    2a26:	f004 fecd 	bl	77c4 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2a2a:	2000      	movs	r0, #0
    }
}
    2a2c:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    2a2e:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2a30:	2200      	movs	r2, #0
    2a32:	f3bf 8f5b 	dmb	ish
    2a36:	e853 1f00 	ldrex	r1, [r3]
    2a3a:	2901      	cmp	r1, #1
    2a3c:	d103      	bne.n	2a46 <mutex_unlock_platform+0x2e>
    2a3e:	e843 2000 	strex	r0, r2, [r3]
    2a42:	2800      	cmp	r0, #0
    2a44:	d1f7      	bne.n	2a36 <mutex_unlock_platform+0x1e>
    2a46:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2a4a:	d104      	bne.n	2a56 <mutex_unlock_platform+0x3e>
    2a4c:	4610      	mov	r0, r2
    2a4e:	e7ed      	b.n	2a2c <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2a50:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2a54:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2a56:	4802      	ldr	r0, [pc, #8]	; (2a60 <mutex_unlock_platform+0x48>)
    2a58:	e7e8      	b.n	2a2c <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2a5a:	4802      	ldr	r0, [pc, #8]	; (2a64 <mutex_unlock_platform+0x4c>)
    2a5c:	e7e6      	b.n	2a2c <mutex_unlock_platform+0x14>
    2a5e:	bf00      	nop
    2a60:	ffff8fe9 	.word	0xffff8fe9
    2a64:	ffff8fea 	.word	0xffff8fea

00002a68 <mutex_lock_platform>:
    if(mutex == NULL) {
    2a68:	b320      	cbz	r0, 2ab4 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2a6a:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    2a6c:	6842      	ldr	r2, [r0, #4]
    2a6e:	2a04      	cmp	r2, #4
    2a70:	d002      	beq.n	2a78 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2a72:	b992      	cbnz	r2, 2a9a <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2a74:	4811      	ldr	r0, [pc, #68]	; (2abc <mutex_lock_platform+0x54>)
    2a76:	e00f      	b.n	2a98 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    2a78:	6803      	ldr	r3, [r0, #0]
    2a7a:	2201      	movs	r2, #1
    2a7c:	f3bf 8f5b 	dmb	ish
    2a80:	e853 1f00 	ldrex	r1, [r3]
    2a84:	2900      	cmp	r1, #0
    2a86:	d103      	bne.n	2a90 <mutex_lock_platform+0x28>
    2a88:	e843 2000 	strex	r0, r2, [r3]
    2a8c:	2800      	cmp	r0, #0
    2a8e:	d1f7      	bne.n	2a80 <mutex_lock_platform+0x18>
    2a90:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2a94:	d10c      	bne.n	2ab0 <mutex_lock_platform+0x48>
    2a96:	2000      	movs	r0, #0
}
    2a98:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    2a9a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2aa4:	f004 fd6e 	bl	7584 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2aa8:	2800      	cmp	r0, #0
    2aaa:	d0f5      	beq.n	2a98 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    2aac:	4804      	ldr	r0, [pc, #16]	; (2ac0 <mutex_lock_platform+0x58>)
    2aae:	e7f3      	b.n	2a98 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2ab0:	4803      	ldr	r0, [pc, #12]	; (2ac0 <mutex_lock_platform+0x58>)
    2ab2:	e7f1      	b.n	2a98 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2ab4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2ab8:	4770      	bx	lr
    2aba:	bf00      	nop
    2abc:	ffff8fea 	.word	0xffff8fea
    2ac0:	ffff8fe9 	.word	0xffff8fe9

00002ac4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2ac4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2ac6:	4604      	mov	r4, r0
    2ac8:	b188      	cbz	r0, 2aee <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2aca:	6863      	ldr	r3, [r4, #4]
    2acc:	2b04      	cmp	r3, #4
    2ace:	d00d      	beq.n	2aec <mutex_free_platform+0x28>
    2ad0:	2b08      	cmp	r3, #8
    2ad2:	d00b      	beq.n	2aec <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2ad4:	b153      	cbz	r3, 2aec <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2ad6:	f013 0f02 	tst.w	r3, #2
    2ada:	d00d      	beq.n	2af8 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2adc:	4621      	mov	r1, r4
    2ade:	4809      	ldr	r0, [pc, #36]	; (2b04 <mutex_free_platform+0x40>)
    2ae0:	f004 fa9a 	bl	7018 <k_mem_slab_free>
        mutex->mutex = NULL;
    2ae4:	2300      	movs	r3, #0
    2ae6:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2ae8:	2300      	movs	r3, #0
    2aea:	6063      	str	r3, [r4, #4]
}
    2aec:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    2aee:	4b06      	ldr	r3, [pc, #24]	; (2b08 <mutex_free_platform+0x44>)
    2af0:	685b      	ldr	r3, [r3, #4]
    2af2:	4806      	ldr	r0, [pc, #24]	; (2b0c <mutex_free_platform+0x48>)
    2af4:	4798      	blx	r3
    2af6:	e7e8      	b.n	2aca <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2af8:	2214      	movs	r2, #20
    2afa:	2100      	movs	r1, #0
    2afc:	6820      	ldr	r0, [r4, #0]
    2afe:	f007 fb74 	bl	a1ea <memset>
    2b02:	e7f1      	b.n	2ae8 <mutex_free_platform+0x24>
    2b04:	200044a4 	.word	0x200044a4
    2b08:	200040e4 	.word	0x200040e4
    2b0c:	0000b930 	.word	0x0000b930

00002b10 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2b10:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2b12:	4604      	mov	r4, r0
    2b14:	b178      	cbz	r0, 2b36 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2b16:	6863      	ldr	r3, [r4, #4]
    2b18:	2b04      	cmp	r3, #4
    2b1a:	d00b      	beq.n	2b34 <mutex_init_platform+0x24>
    2b1c:	2b08      	cmp	r3, #8
    2b1e:	d009      	beq.n	2b34 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2b20:	b90b      	cbnz	r3, 2b26 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    2b22:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2b24:	b163      	cbz	r3, 2b40 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    2b26:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2b28:	f008 f88f 	bl	ac4a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2b2c:	6863      	ldr	r3, [r4, #4]
    2b2e:	f043 0301 	orr.w	r3, r3, #1
    2b32:	6063      	str	r3, [r4, #4]
}
    2b34:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    2b36:	4b0f      	ldr	r3, [pc, #60]	; (2b74 <mutex_init_platform+0x64>)
    2b38:	685b      	ldr	r3, [r3, #4]
    2b3a:	480f      	ldr	r0, [pc, #60]	; (2b78 <mutex_init_platform+0x68>)
    2b3c:	4798      	blx	r3
    2b3e:	e7ea      	b.n	2b16 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2b48:	4621      	mov	r1, r4
    2b4a:	480c      	ldr	r0, [pc, #48]	; (2b7c <mutex_init_platform+0x6c>)
    2b4c:	f004 f9ee 	bl	6f2c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2b50:	b908      	cbnz	r0, 2b56 <mutex_init_platform+0x46>
    2b52:	6823      	ldr	r3, [r4, #0]
    2b54:	b91b      	cbnz	r3, 2b5e <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    2b56:	4b07      	ldr	r3, [pc, #28]	; (2b74 <mutex_init_platform+0x64>)
    2b58:	685b      	ldr	r3, [r3, #4]
    2b5a:	4809      	ldr	r0, [pc, #36]	; (2b80 <mutex_init_platform+0x70>)
    2b5c:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2b5e:	2214      	movs	r2, #20
    2b60:	2100      	movs	r1, #0
    2b62:	6820      	ldr	r0, [r4, #0]
    2b64:	f007 fb41 	bl	a1ea <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2b68:	6863      	ldr	r3, [r4, #4]
    2b6a:	f043 0302 	orr.w	r3, r3, #2
    2b6e:	6063      	str	r3, [r4, #4]
    2b70:	e7d9      	b.n	2b26 <mutex_init_platform+0x16>
    2b72:	bf00      	nop
    2b74:	200040e4 	.word	0x200040e4
    2b78:	0000b930 	.word	0x0000b930
    2b7c:	200044a4 	.word	0x200044a4
    2b80:	0000b958 	.word	0x0000b958

00002b84 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2b84:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2b86:	2340      	movs	r3, #64	; 0x40
    2b88:	2214      	movs	r2, #20
    2b8a:	4904      	ldr	r1, [pc, #16]	; (2b9c <nrf_cc3xx_platform_mutex_init+0x18>)
    2b8c:	4804      	ldr	r0, [pc, #16]	; (2ba0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2b8e:	f008 f808 	bl	aba2 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2b92:	4904      	ldr	r1, [pc, #16]	; (2ba4 <nrf_cc3xx_platform_mutex_init+0x20>)
    2b94:	4804      	ldr	r0, [pc, #16]	; (2ba8 <nrf_cc3xx_platform_mutex_init+0x24>)
    2b96:	f006 fe65 	bl	9864 <nrf_cc3xx_platform_set_mutexes>
}
    2b9a:	bd08      	pop	{r3, pc}
    2b9c:	200044c4 	.word	0x200044c4
    2ba0:	200044a4 	.word	0x200044a4
    2ba4:	0000b998 	.word	0x0000b998
    2ba8:	0000b988 	.word	0x0000b988

00002bac <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2bac:	4901      	ldr	r1, [pc, #4]	; (2bb4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2bae:	2210      	movs	r2, #16
	str	r2, [r1]
    2bb0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2bb2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2bb4:	e000ed10 	.word	0xe000ed10

00002bb8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2bb8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2bba:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2bbc:	f380 8811 	msr	BASEPRI, r0
	isb
    2bc0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2bc4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2bc8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2bca:	b662      	cpsie	i
	isb
    2bcc:	f3bf 8f6f 	isb	sy

	bx	lr
    2bd0:	4770      	bx	lr
    2bd2:	bf00      	nop

00002bd4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2bd4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2bd6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2bd8:	f381 8811 	msr	BASEPRI, r1

	wfe
    2bdc:	bf20      	wfe

	msr	BASEPRI, r0
    2bde:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2be2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2be4:	4770      	bx	lr
    2be6:	bf00      	nop

00002be8 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    2be8:	b570      	push	{r4, r5, r6, lr}
    2bea:	b086      	sub	sp, #24
    2bec:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2bee:	4e1e      	ldr	r6, [pc, #120]	; (2c68 <esf_dump+0x80>)
    2bf0:	6883      	ldr	r3, [r0, #8]
    2bf2:	9305      	str	r3, [sp, #20]
    2bf4:	6843      	ldr	r3, [r0, #4]
    2bf6:	9304      	str	r3, [sp, #16]
    2bf8:	6803      	ldr	r3, [r0, #0]
    2bfa:	9303      	str	r3, [sp, #12]
    2bfc:	4b1b      	ldr	r3, [pc, #108]	; (2c6c <esf_dump+0x84>)
    2bfe:	9302      	str	r3, [sp, #8]
    2c00:	2400      	movs	r4, #0
    2c02:	9401      	str	r4, [sp, #4]
    2c04:	9400      	str	r4, [sp, #0]
    2c06:	4623      	mov	r3, r4
    2c08:	2201      	movs	r2, #1
    2c0a:	4631      	mov	r1, r6
    2c0c:	4620      	mov	r0, r4
    2c0e:	f007 f9e4 	bl	9fda <z_log_msg2_runtime_create>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2c12:	696b      	ldr	r3, [r5, #20]
    2c14:	9305      	str	r3, [sp, #20]
    2c16:	692b      	ldr	r3, [r5, #16]
    2c18:	9304      	str	r3, [sp, #16]
    2c1a:	68eb      	ldr	r3, [r5, #12]
    2c1c:	9303      	str	r3, [sp, #12]
    2c1e:	4b14      	ldr	r3, [pc, #80]	; (2c70 <esf_dump+0x88>)
    2c20:	9302      	str	r3, [sp, #8]
    2c22:	9401      	str	r4, [sp, #4]
    2c24:	9400      	str	r4, [sp, #0]
    2c26:	4623      	mov	r3, r4
    2c28:	2201      	movs	r2, #1
    2c2a:	4631      	mov	r1, r6
    2c2c:	4620      	mov	r0, r4
    2c2e:	f007 f9d4 	bl	9fda <z_log_msg2_runtime_create>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2c32:	69eb      	ldr	r3, [r5, #28]
    2c34:	9303      	str	r3, [sp, #12]
    2c36:	4b0f      	ldr	r3, [pc, #60]	; (2c74 <esf_dump+0x8c>)
    2c38:	9302      	str	r3, [sp, #8]
    2c3a:	9401      	str	r4, [sp, #4]
    2c3c:	9400      	str	r4, [sp, #0]
    2c3e:	4623      	mov	r3, r4
    2c40:	2201      	movs	r2, #1
    2c42:	4631      	mov	r1, r6
    2c44:	4620      	mov	r0, r4
    2c46:	f007 f9c8 	bl	9fda <z_log_msg2_runtime_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2c4a:	69ab      	ldr	r3, [r5, #24]
    2c4c:	9303      	str	r3, [sp, #12]
    2c4e:	4b0a      	ldr	r3, [pc, #40]	; (2c78 <esf_dump+0x90>)
    2c50:	9302      	str	r3, [sp, #8]
    2c52:	9401      	str	r4, [sp, #4]
    2c54:	9400      	str	r4, [sp, #0]
    2c56:	4623      	mov	r3, r4
    2c58:	2201      	movs	r2, #1
    2c5a:	4631      	mov	r1, r6
    2c5c:	4620      	mov	r0, r4
    2c5e:	f007 f9bc 	bl	9fda <z_log_msg2_runtime_create>
		esf->basic.pc);
}
    2c62:	b006      	add	sp, #24
    2c64:	bd70      	pop	{r4, r5, r6, pc}
    2c66:	bf00      	nop
    2c68:	0000afa8 	.word	0x0000afa8
    2c6c:	0000b9ac 	.word	0x0000b9ac
    2c70:	0000b9dc 	.word	0x0000b9dc
    2c74:	0000ba0c 	.word	0x0000ba0c
    2c78:	0000ba1c 	.word	0x0000ba1c

00002c7c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2c7c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2c7e:	2800      	cmp	r0, #0
    2c80:	db07      	blt.n	2c92 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2c82:	f000 021f 	and.w	r2, r0, #31
    2c86:	0940      	lsrs	r0, r0, #5
    2c88:	2301      	movs	r3, #1
    2c8a:	4093      	lsls	r3, r2
    2c8c:	4a01      	ldr	r2, [pc, #4]	; (2c94 <arch_irq_enable+0x18>)
    2c8e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    2c92:	4770      	bx	lr
    2c94:	e000e100 	.word	0xe000e100

00002c98 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2c98:	0942      	lsrs	r2, r0, #5
    2c9a:	4b05      	ldr	r3, [pc, #20]	; (2cb0 <arch_irq_is_enabled+0x18>)
    2c9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2ca0:	f000 001f 	and.w	r0, r0, #31
    2ca4:	2301      	movs	r3, #1
    2ca6:	fa03 f000 	lsl.w	r0, r3, r0
}
    2caa:	4010      	ands	r0, r2
    2cac:	4770      	bx	lr
    2cae:	bf00      	nop
    2cb0:	e000e100 	.word	0xe000e100

00002cb4 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    2cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cb6:	4604      	mov	r4, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2cb8:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2cba:	2d07      	cmp	r5, #7
    2cbc:	d80b      	bhi.n	2cd6 <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2cbe:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2cc0:	2800      	cmp	r0, #0
    2cc2:	db1b      	blt.n	2cfc <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2cc4:	016d      	lsls	r5, r5, #5
    2cc6:	b2ed      	uxtb	r5, r5
    2cc8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    2ccc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    2cd0:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    2cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cd6:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2cd8:	4f0c      	ldr	r7, [pc, #48]	; (2d0c <z_arm_irq_priority_set+0x58>)
    2cda:	2357      	movs	r3, #87	; 0x57
    2cdc:	463a      	mov	r2, r7
    2cde:	490c      	ldr	r1, [pc, #48]	; (2d10 <z_arm_irq_priority_set+0x5c>)
    2ce0:	480c      	ldr	r0, [pc, #48]	; (2d14 <z_arm_irq_priority_set+0x60>)
    2ce2:	f007 f8c6 	bl	9e72 <assert_print>
    2ce6:	2307      	movs	r3, #7
    2ce8:	4622      	mov	r2, r4
    2cea:	4631      	mov	r1, r6
    2cec:	480a      	ldr	r0, [pc, #40]	; (2d18 <z_arm_irq_priority_set+0x64>)
    2cee:	f007 f8c0 	bl	9e72 <assert_print>
    2cf2:	2157      	movs	r1, #87	; 0x57
    2cf4:	4638      	mov	r0, r7
    2cf6:	f007 f8b5 	bl	9e64 <assert_post_action>
    2cfa:	e7e0      	b.n	2cbe <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2cfc:	f000 000f 	and.w	r0, r0, #15
    2d00:	016d      	lsls	r5, r5, #5
    2d02:	b2ed      	uxtb	r5, r5
    2d04:	4b05      	ldr	r3, [pc, #20]	; (2d1c <z_arm_irq_priority_set+0x68>)
    2d06:	541d      	strb	r5, [r3, r0]
}
    2d08:	e7e4      	b.n	2cd4 <z_arm_irq_priority_set+0x20>
    2d0a:	bf00      	nop
    2d0c:	0000ba4c 	.word	0x0000ba4c
    2d10:	0000ba84 	.word	0x0000ba84
    2d14:	0000b180 	.word	0x0000b180
    2d18:	0000baa0 	.word	0x0000baa0
    2d1c:	e000ed14 	.word	0xe000ed14

00002d20 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2d20:	bf30      	wfi
    b z_SysNmiOnReset
    2d22:	f7ff bffd 	b.w	2d20 <z_SysNmiOnReset>
    2d26:	bf00      	nop

00002d28 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2d28:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2d2a:	4b0b      	ldr	r3, [pc, #44]	; (2d58 <z_arm_prep_c+0x30>)
    2d2c:	4a0b      	ldr	r2, [pc, #44]	; (2d5c <z_arm_prep_c+0x34>)
    2d2e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2d32:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2d34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d38:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2d3c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2d40:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2d48:	f004 f81c 	bl	6d84 <z_bss_zero>
	z_data_copy();
    2d4c:	f006 f928 	bl	8fa0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2d50:	f000 fc6a 	bl	3628 <z_arm_interrupt_init>
	z_cstart();
    2d54:	f004 f874 	bl	6e40 <z_cstart>
    2d58:	e000ed00 	.word	0xe000ed00
    2d5c:	00000000 	.word	0x00000000

00002d60 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2d60:	4a0a      	ldr	r2, [pc, #40]	; (2d8c <arch_swap+0x2c>)
    2d62:	6893      	ldr	r3, [r2, #8]
    2d64:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    2d68:	4909      	ldr	r1, [pc, #36]	; (2d90 <arch_swap+0x30>)
    2d6a:	6809      	ldr	r1, [r1, #0]
    2d6c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2d70:	4908      	ldr	r1, [pc, #32]	; (2d94 <arch_swap+0x34>)
    2d72:	684b      	ldr	r3, [r1, #4]
    2d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2d78:	604b      	str	r3, [r1, #4]
    2d7a:	2300      	movs	r3, #0
    2d7c:	f383 8811 	msr	BASEPRI, r3
    2d80:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2d84:	6893      	ldr	r3, [r2, #8]
}
    2d86:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    2d8a:	4770      	bx	lr
    2d8c:	20004f28 	.word	0x20004f28
    2d90:	0000c5d0 	.word	0x0000c5d0
    2d94:	e000ed00 	.word	0xe000ed00

00002d98 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2d98:	4913      	ldr	r1, [pc, #76]	; (2de8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2d9a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2d9c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2da0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2da2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2da6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2daa:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2dac:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2db0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2db4:	4f0d      	ldr	r7, [pc, #52]	; (2dec <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2db6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2dba:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2dbc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2dbe:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2dc0:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    2dc4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2dc6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2dca:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2dce:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2dd0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2dd2:	f000 fcd3 	bl	377c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2dd6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2dda:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2dde:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2de2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2de6:	4770      	bx	lr
    ldr r1, =_kernel
    2de8:	20004f28 	.word	0x20004f28
    ldr v4, =_SCS_ICSR
    2dec:	e000ed04 	.word	0xe000ed04

00002df0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2df0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2df4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2df6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2dfa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2dfe:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2e00:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2e04:	2902      	cmp	r1, #2
    beq _oops
    2e06:	d0ff      	beq.n	2e08 <_oops>

00002e08 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2e08:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2e0a:	f007 f901 	bl	a010 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2e0e:	bd01      	pop	{r0, pc}

00002e10 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    2e10:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2e12:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    2e16:	490e      	ldr	r1, [pc, #56]	; (2e50 <arch_new_thread+0x40>)
    2e18:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    2e1c:	f021 0101 	bic.w	r1, r1, #1
    2e20:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    2e24:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2e28:	9b01      	ldr	r3, [sp, #4]
    2e2a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2e2e:	9b02      	ldr	r3, [sp, #8]
    2e30:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2e34:	9b03      	ldr	r3, [sp, #12]
    2e36:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2e3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2e3e:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    2e42:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2e44:	2300      	movs	r3, #0
    2e46:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2e4a:	bc10      	pop	{r4}
    2e4c:	4770      	bx	lr
    2e4e:	bf00      	nop
    2e50:	00009cbd 	.word	0x00009cbd

00002e54 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2e54:	4b12      	ldr	r3, [pc, #72]	; (2ea0 <z_check_thread_stack_fail+0x4c>)
    2e56:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    2e58:	b302      	cbz	r2, 2e9c <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2e5a:	f110 0f16 	cmn.w	r0, #22
    2e5e:	d011      	beq.n	2e84 <z_check_thread_stack_fail+0x30>
    2e60:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    2e64:	f1a3 0c20 	sub.w	ip, r3, #32
    2e68:	4584      	cmp	ip, r0
    2e6a:	d805      	bhi.n	2e78 <z_check_thread_stack_fail+0x24>
    2e6c:	4283      	cmp	r3, r0
    2e6e:	d905      	bls.n	2e7c <z_check_thread_stack_fail+0x28>
    2e70:	428b      	cmp	r3, r1
    2e72:	d805      	bhi.n	2e80 <z_check_thread_stack_fail+0x2c>
    2e74:	2100      	movs	r1, #0
    2e76:	e00b      	b.n	2e90 <z_check_thread_stack_fail+0x3c>
    2e78:	2100      	movs	r1, #0
    2e7a:	e009      	b.n	2e90 <z_check_thread_stack_fail+0x3c>
    2e7c:	2100      	movs	r1, #0
    2e7e:	e007      	b.n	2e90 <z_check_thread_stack_fail+0x3c>
    2e80:	2101      	movs	r1, #1
    2e82:	e005      	b.n	2e90 <z_check_thread_stack_fail+0x3c>
    2e84:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    2e88:	428b      	cmp	r3, r1
    2e8a:	bf94      	ite	ls
    2e8c:	2100      	movls	r1, #0
    2e8e:	2101      	movhi	r1, #1
    2e90:	b909      	cbnz	r1, 2e96 <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2e92:	2000      	movs	r0, #0
}
    2e94:	4770      	bx	lr
		return thread->stack_info.start;
    2e96:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    2e9a:	4770      	bx	lr
		return 0;
    2e9c:	2000      	movs	r0, #0
    2e9e:	4770      	bx	lr
    2ea0:	20004f28 	.word	0x20004f28

00002ea4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2ea4:	b508      	push	{r3, lr}
    2ea6:	460d      	mov	r5, r1
    2ea8:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2eaa:	4b08      	ldr	r3, [pc, #32]	; (2ecc <arch_switch_to_main_thread+0x28>)
    2eac:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2eae:	f000 fc65 	bl	377c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2eb2:	4620      	mov	r0, r4
    2eb4:	f385 8809 	msr	PSP, r5
    2eb8:	2100      	movs	r1, #0
    2eba:	b663      	cpsie	if
    2ebc:	f381 8811 	msr	BASEPRI, r1
    2ec0:	f3bf 8f6f 	isb	sy
    2ec4:	2200      	movs	r2, #0
    2ec6:	2300      	movs	r3, #0
    2ec8:	f006 fef8 	bl	9cbc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2ecc:	20004f28 	.word	0x20004f28

00002ed0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2ed0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2ed2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2ed4:	4a0b      	ldr	r2, [pc, #44]	; (2f04 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2ed6:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2ed8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2eda:	bf1e      	ittt	ne
	movne	r1, #0
    2edc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2ede:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2ee0:	f007 fe97 	blne	ac12 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2ee4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2ee6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2eea:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2eee:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2ef2:	4905      	ldr	r1, [pc, #20]	; (2f08 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2ef4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2ef6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2ef8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2efa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2efe:	4903      	ldr	r1, [pc, #12]	; (2f0c <_isr_wrapper+0x3c>)
	bx r1
    2f00:	4708      	bx	r1
    2f02:	0000      	.short	0x0000
	ldr r2, =_kernel
    2f04:	20004f28 	.word	0x20004f28
	ldr r1, =_sw_isr_table
    2f08:	0000ae00 	.word	0x0000ae00
	ldr r1, =z_arm_int_exit
    2f0c:	00002f11 	.word	0x00002f11

00002f10 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2f10:	4b04      	ldr	r3, [pc, #16]	; (2f24 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2f12:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2f14:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2f16:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2f18:	d003      	beq.n	2f22 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2f1a:	4903      	ldr	r1, [pc, #12]	; (2f28 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2f20:	600a      	str	r2, [r1, #0]

00002f22 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2f22:	4770      	bx	lr
	ldr r3, =_kernel
    2f24:	20004f28 	.word	0x20004f28
	ldr r1, =_SCS_ICSR
    2f28:	e000ed04 	.word	0xe000ed04

00002f2c <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    2f2c:	b570      	push	{r4, r5, r6, lr}
    2f2e:	b084      	sub	sp, #16
    2f30:	4605      	mov	r5, r0
    2f32:	460e      	mov	r6, r1
    2f34:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2f36:	4b47      	ldr	r3, [pc, #284]	; (3054 <bus_fault+0x128>)
    2f38:	9302      	str	r3, [sp, #8]
    2f3a:	2000      	movs	r0, #0
    2f3c:	9001      	str	r0, [sp, #4]
    2f3e:	9000      	str	r0, [sp, #0]
    2f40:	4603      	mov	r3, r0
    2f42:	2201      	movs	r2, #1
    2f44:	4944      	ldr	r1, [pc, #272]	; (3058 <bus_fault+0x12c>)
    2f46:	f007 f877 	bl	a038 <z_log_msg2_runtime_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2f4a:	4b44      	ldr	r3, [pc, #272]	; (305c <bus_fault+0x130>)
    2f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f4e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    2f52:	d125      	bne.n	2fa0 <bus_fault+0x74>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2f54:	4b41      	ldr	r3, [pc, #260]	; (305c <bus_fault+0x130>)
    2f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f58:	f413 6f00 	tst.w	r3, #2048	; 0x800
    2f5c:	d12b      	bne.n	2fb6 <bus_fault+0x8a>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2f5e:	4b3f      	ldr	r3, [pc, #252]	; (305c <bus_fault+0x130>)
    2f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f62:	f413 7f00 	tst.w	r3, #512	; 0x200
    2f66:	d131      	bne.n	2fcc <bus_fault+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2f68:	4b3c      	ldr	r3, [pc, #240]	; (305c <bus_fault+0x130>)
    2f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f6c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    2f70:	d14f      	bne.n	3012 <bus_fault+0xe6>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2f72:	4b3a      	ldr	r3, [pc, #232]	; (305c <bus_fault+0x130>)
    2f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f76:	f413 7f80 	tst.w	r3, #256	; 0x100
    2f7a:	d155      	bne.n	3028 <bus_fault+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2f7c:	4b37      	ldr	r3, [pc, #220]	; (305c <bus_fault+0x130>)
    2f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f80:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2f84:	d15b      	bne.n	303e <bus_fault+0x112>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2f86:	4a35      	ldr	r2, [pc, #212]	; (305c <bus_fault+0x130>)
    2f88:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2f8a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2f8e:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2f90:	2101      	movs	r1, #1
    2f92:	4628      	mov	r0, r5
    2f94:	f007 f84e 	bl	a034 <memory_fault_recoverable>
    2f98:	7020      	strb	r0, [r4, #0]

	return reason;
}
    2f9a:	2000      	movs	r0, #0
    2f9c:	b004      	add	sp, #16
    2f9e:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
    2fa0:	4b2f      	ldr	r3, [pc, #188]	; (3060 <bus_fault+0x134>)
    2fa2:	9302      	str	r3, [sp, #8]
    2fa4:	2000      	movs	r0, #0
    2fa6:	9001      	str	r0, [sp, #4]
    2fa8:	9000      	str	r0, [sp, #0]
    2faa:	4603      	mov	r3, r0
    2fac:	2201      	movs	r2, #1
    2fae:	492a      	ldr	r1, [pc, #168]	; (3058 <bus_fault+0x12c>)
    2fb0:	f007 f842 	bl	a038 <z_log_msg2_runtime_create>
    2fb4:	e7ce      	b.n	2f54 <bus_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    2fb6:	4b2b      	ldr	r3, [pc, #172]	; (3064 <bus_fault+0x138>)
    2fb8:	9302      	str	r3, [sp, #8]
    2fba:	2000      	movs	r0, #0
    2fbc:	9001      	str	r0, [sp, #4]
    2fbe:	9000      	str	r0, [sp, #0]
    2fc0:	4603      	mov	r3, r0
    2fc2:	2201      	movs	r2, #1
    2fc4:	4924      	ldr	r1, [pc, #144]	; (3058 <bus_fault+0x12c>)
    2fc6:	f007 f837 	bl	a038 <z_log_msg2_runtime_create>
    2fca:	e7c8      	b.n	2f5e <bus_fault+0x32>
		PR_FAULT_INFO("  Precise data bus error");
    2fcc:	4b26      	ldr	r3, [pc, #152]	; (3068 <bus_fault+0x13c>)
    2fce:	9302      	str	r3, [sp, #8]
    2fd0:	2000      	movs	r0, #0
    2fd2:	9001      	str	r0, [sp, #4]
    2fd4:	9000      	str	r0, [sp, #0]
    2fd6:	4603      	mov	r3, r0
    2fd8:	2201      	movs	r2, #1
    2fda:	491f      	ldr	r1, [pc, #124]	; (3058 <bus_fault+0x12c>)
    2fdc:	f007 f82c 	bl	a038 <z_log_msg2_runtime_create>
		STORE_xFAR(bfar, SCB->BFAR);
    2fe0:	4b1e      	ldr	r3, [pc, #120]	; (305c <bus_fault+0x130>)
    2fe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2fe6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2fea:	d0bd      	beq.n	2f68 <bus_fault+0x3c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2fec:	9203      	str	r2, [sp, #12]
    2fee:	4b1f      	ldr	r3, [pc, #124]	; (306c <bus_fault+0x140>)
    2ff0:	9302      	str	r3, [sp, #8]
    2ff2:	2000      	movs	r0, #0
    2ff4:	9001      	str	r0, [sp, #4]
    2ff6:	9000      	str	r0, [sp, #0]
    2ff8:	4603      	mov	r3, r0
    2ffa:	2201      	movs	r2, #1
    2ffc:	4916      	ldr	r1, [pc, #88]	; (3058 <bus_fault+0x12c>)
    2ffe:	f007 f81b 	bl	a038 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    3002:	2e00      	cmp	r6, #0
    3004:	d0b0      	beq.n	2f68 <bus_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3006:	4a15      	ldr	r2, [pc, #84]	; (305c <bus_fault+0x130>)
    3008:	6a93      	ldr	r3, [r2, #40]	; 0x28
    300a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    300e:	6293      	str	r3, [r2, #40]	; 0x28
    3010:	e7aa      	b.n	2f68 <bus_fault+0x3c>
		PR_FAULT_INFO("  Imprecise data bus error");
    3012:	4b17      	ldr	r3, [pc, #92]	; (3070 <bus_fault+0x144>)
    3014:	9302      	str	r3, [sp, #8]
    3016:	2000      	movs	r0, #0
    3018:	9001      	str	r0, [sp, #4]
    301a:	9000      	str	r0, [sp, #0]
    301c:	4603      	mov	r3, r0
    301e:	2201      	movs	r2, #1
    3020:	490d      	ldr	r1, [pc, #52]	; (3058 <bus_fault+0x12c>)
    3022:	f007 f809 	bl	a038 <z_log_msg2_runtime_create>
    3026:	e7a4      	b.n	2f72 <bus_fault+0x46>
		PR_FAULT_INFO("  Instruction bus error");
    3028:	4b12      	ldr	r3, [pc, #72]	; (3074 <bus_fault+0x148>)
    302a:	9302      	str	r3, [sp, #8]
    302c:	2000      	movs	r0, #0
    302e:	9001      	str	r0, [sp, #4]
    3030:	9000      	str	r0, [sp, #0]
    3032:	4603      	mov	r3, r0
    3034:	2201      	movs	r2, #1
    3036:	4908      	ldr	r1, [pc, #32]	; (3058 <bus_fault+0x12c>)
    3038:	f006 fffe 	bl	a038 <z_log_msg2_runtime_create>
    303c:	e7a3      	b.n	2f86 <bus_fault+0x5a>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    303e:	4b0e      	ldr	r3, [pc, #56]	; (3078 <bus_fault+0x14c>)
    3040:	9302      	str	r3, [sp, #8]
    3042:	2000      	movs	r0, #0
    3044:	9001      	str	r0, [sp, #4]
    3046:	9000      	str	r0, [sp, #0]
    3048:	4603      	mov	r3, r0
    304a:	2201      	movs	r2, #1
    304c:	4902      	ldr	r1, [pc, #8]	; (3058 <bus_fault+0x12c>)
    304e:	f006 fff3 	bl	a038 <z_log_msg2_runtime_create>
    3052:	e798      	b.n	2f86 <bus_fault+0x5a>
    3054:	0000bae0 	.word	0x0000bae0
    3058:	0000afa8 	.word	0x0000afa8
    305c:	e000ed00 	.word	0xe000ed00
    3060:	0000baf8 	.word	0x0000baf8
    3064:	0000bb0c 	.word	0x0000bb0c
    3068:	0000bb20 	.word	0x0000bb20
    306c:	0000bb3c 	.word	0x0000bb3c
    3070:	0000bb54 	.word	0x0000bb54
    3074:	0000bb70 	.word	0x0000bb70
    3078:	0000bb88 	.word	0x0000bb88

0000307c <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    307c:	b500      	push	{lr}
    307e:	b085      	sub	sp, #20
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    3080:	4b3a      	ldr	r3, [pc, #232]	; (316c <usage_fault+0xf0>)
    3082:	9302      	str	r3, [sp, #8]
    3084:	2000      	movs	r0, #0
    3086:	9001      	str	r0, [sp, #4]
    3088:	9000      	str	r0, [sp, #0]
    308a:	4603      	mov	r3, r0
    308c:	2201      	movs	r2, #1
    308e:	4938      	ldr	r1, [pc, #224]	; (3170 <usage_fault+0xf4>)
    3090:	f006 ffd2 	bl	a038 <z_log_msg2_runtime_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3094:	4b37      	ldr	r3, [pc, #220]	; (3174 <usage_fault+0xf8>)
    3096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3098:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    309c:	d123      	bne.n	30e6 <usage_fault+0x6a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    309e:	4b35      	ldr	r3, [pc, #212]	; (3174 <usage_fault+0xf8>)
    30a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30a2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    30a6:	d129      	bne.n	30fc <usage_fault+0x80>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    30a8:	4b32      	ldr	r3, [pc, #200]	; (3174 <usage_fault+0xf8>)
    30aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30ac:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    30b0:	d12f      	bne.n	3112 <usage_fault+0x96>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    30b2:	4b30      	ldr	r3, [pc, #192]	; (3174 <usage_fault+0xf8>)
    30b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30b6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    30ba:	d135      	bne.n	3128 <usage_fault+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    30bc:	4b2d      	ldr	r3, [pc, #180]	; (3174 <usage_fault+0xf8>)
    30be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    30c4:	d13b      	bne.n	313e <usage_fault+0xc2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    30c6:	4b2b      	ldr	r3, [pc, #172]	; (3174 <usage_fault+0xf8>)
    30c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    30ce:	d141      	bne.n	3154 <usage_fault+0xd8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    30d0:	4a28      	ldr	r2, [pc, #160]	; (3174 <usage_fault+0xf8>)
    30d2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    30d4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    30d8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    30dc:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    30de:	2000      	movs	r0, #0
    30e0:	b005      	add	sp, #20
    30e2:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    30e6:	4b24      	ldr	r3, [pc, #144]	; (3178 <usage_fault+0xfc>)
    30e8:	9302      	str	r3, [sp, #8]
    30ea:	2000      	movs	r0, #0
    30ec:	9001      	str	r0, [sp, #4]
    30ee:	9000      	str	r0, [sp, #0]
    30f0:	4603      	mov	r3, r0
    30f2:	2201      	movs	r2, #1
    30f4:	491e      	ldr	r1, [pc, #120]	; (3170 <usage_fault+0xf4>)
    30f6:	f006 ff9f 	bl	a038 <z_log_msg2_runtime_create>
    30fa:	e7d0      	b.n	309e <usage_fault+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    30fc:	4b1f      	ldr	r3, [pc, #124]	; (317c <usage_fault+0x100>)
    30fe:	9302      	str	r3, [sp, #8]
    3100:	2000      	movs	r0, #0
    3102:	9001      	str	r0, [sp, #4]
    3104:	9000      	str	r0, [sp, #0]
    3106:	4603      	mov	r3, r0
    3108:	2201      	movs	r2, #1
    310a:	4919      	ldr	r1, [pc, #100]	; (3170 <usage_fault+0xf4>)
    310c:	f006 ff94 	bl	a038 <z_log_msg2_runtime_create>
    3110:	e7ca      	b.n	30a8 <usage_fault+0x2c>
		PR_FAULT_INFO("  No coprocessor instructions");
    3112:	4b1b      	ldr	r3, [pc, #108]	; (3180 <usage_fault+0x104>)
    3114:	9302      	str	r3, [sp, #8]
    3116:	2000      	movs	r0, #0
    3118:	9001      	str	r0, [sp, #4]
    311a:	9000      	str	r0, [sp, #0]
    311c:	4603      	mov	r3, r0
    311e:	2201      	movs	r2, #1
    3120:	4913      	ldr	r1, [pc, #76]	; (3170 <usage_fault+0xf4>)
    3122:	f006 ff89 	bl	a038 <z_log_msg2_runtime_create>
    3126:	e7c4      	b.n	30b2 <usage_fault+0x36>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3128:	4b16      	ldr	r3, [pc, #88]	; (3184 <usage_fault+0x108>)
    312a:	9302      	str	r3, [sp, #8]
    312c:	2000      	movs	r0, #0
    312e:	9001      	str	r0, [sp, #4]
    3130:	9000      	str	r0, [sp, #0]
    3132:	4603      	mov	r3, r0
    3134:	2201      	movs	r2, #1
    3136:	490e      	ldr	r1, [pc, #56]	; (3170 <usage_fault+0xf4>)
    3138:	f006 ff7e 	bl	a038 <z_log_msg2_runtime_create>
    313c:	e7be      	b.n	30bc <usage_fault+0x40>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    313e:	4b12      	ldr	r3, [pc, #72]	; (3188 <usage_fault+0x10c>)
    3140:	9302      	str	r3, [sp, #8]
    3142:	2000      	movs	r0, #0
    3144:	9001      	str	r0, [sp, #4]
    3146:	9000      	str	r0, [sp, #0]
    3148:	4603      	mov	r3, r0
    314a:	2201      	movs	r2, #1
    314c:	4908      	ldr	r1, [pc, #32]	; (3170 <usage_fault+0xf4>)
    314e:	f006 ff73 	bl	a038 <z_log_msg2_runtime_create>
    3152:	e7b8      	b.n	30c6 <usage_fault+0x4a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3154:	4b0d      	ldr	r3, [pc, #52]	; (318c <usage_fault+0x110>)
    3156:	9302      	str	r3, [sp, #8]
    3158:	2000      	movs	r0, #0
    315a:	9001      	str	r0, [sp, #4]
    315c:	9000      	str	r0, [sp, #0]
    315e:	4603      	mov	r3, r0
    3160:	2201      	movs	r2, #1
    3162:	4903      	ldr	r1, [pc, #12]	; (3170 <usage_fault+0xf4>)
    3164:	f006 ff68 	bl	a038 <z_log_msg2_runtime_create>
    3168:	e7b2      	b.n	30d0 <usage_fault+0x54>
    316a:	bf00      	nop
    316c:	0000bbb8 	.word	0x0000bbb8
    3170:	0000afa8 	.word	0x0000afa8
    3174:	e000ed00 	.word	0xe000ed00
    3178:	0000bbd0 	.word	0x0000bbd0
    317c:	0000bbe4 	.word	0x0000bbe4
    3180:	0000bc00 	.word	0x0000bc00
    3184:	0000bc20 	.word	0x0000bc20
    3188:	0000bc48 	.word	0x0000bc48
    318c:	0000bc64 	.word	0x0000bc64

00003190 <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    3190:	b500      	push	{lr}
    3192:	b085      	sub	sp, #20
	*recoverable = false;
    3194:	2000      	movs	r0, #0
    3196:	7008      	strb	r0, [r1, #0]

	PR_FAULT_INFO(
    3198:	4b05      	ldr	r3, [pc, #20]	; (31b0 <debug_monitor+0x20>)
    319a:	9302      	str	r3, [sp, #8]
    319c:	9001      	str	r0, [sp, #4]
    319e:	9000      	str	r0, [sp, #0]
    31a0:	4603      	mov	r3, r0
    31a2:	2201      	movs	r2, #1
    31a4:	4903      	ldr	r1, [pc, #12]	; (31b4 <debug_monitor+0x24>)
    31a6:	f006 ff47 	bl	a038 <z_log_msg2_runtime_create>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    31aa:	b005      	add	sp, #20
    31ac:	f85d fb04 	ldr.w	pc, [sp], #4
    31b0:	0000bc90 	.word	0x0000bc90
    31b4:	0000afa8 	.word	0x0000afa8

000031b8 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    31b8:	b500      	push	{lr}
    31ba:	b087      	sub	sp, #28
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    31bc:	290f      	cmp	r1, #15
    31be:	dc10      	bgt.n	31e2 <reserved_exception+0x2a>
    31c0:	4b09      	ldr	r3, [pc, #36]	; (31e8 <reserved_exception+0x30>)
    31c2:	3910      	subs	r1, #16
    31c4:	9104      	str	r1, [sp, #16]
    31c6:	9303      	str	r3, [sp, #12]
    31c8:	4b08      	ldr	r3, [pc, #32]	; (31ec <reserved_exception+0x34>)
    31ca:	9302      	str	r3, [sp, #8]
    31cc:	2000      	movs	r0, #0
    31ce:	9001      	str	r0, [sp, #4]
    31d0:	9000      	str	r0, [sp, #0]
    31d2:	4603      	mov	r3, r0
    31d4:	2201      	movs	r2, #1
    31d6:	4906      	ldr	r1, [pc, #24]	; (31f0 <reserved_exception+0x38>)
    31d8:	f006 ff2e 	bl	a038 <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    31dc:	b007      	add	sp, #28
    31de:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
    31e2:	4b04      	ldr	r3, [pc, #16]	; (31f4 <reserved_exception+0x3c>)
    31e4:	e7ed      	b.n	31c2 <reserved_exception+0xa>
    31e6:	bf00      	nop
    31e8:	0000bcd0 	.word	0x0000bcd0
    31ec:	0000bce8 	.word	0x0000bce8
    31f0:	0000afa8 	.word	0x0000afa8
    31f4:	0000bcb4 	.word	0x0000bcb4

000031f8 <mem_manage_fault>:
{
    31f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    31fa:	b085      	sub	sp, #20
    31fc:	4605      	mov	r5, r0
    31fe:	460c      	mov	r4, r1
    3200:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    3202:	4b5f      	ldr	r3, [pc, #380]	; (3380 <mem_manage_fault+0x188>)
    3204:	9302      	str	r3, [sp, #8]
    3206:	2000      	movs	r0, #0
    3208:	9001      	str	r0, [sp, #4]
    320a:	9000      	str	r0, [sp, #0]
    320c:	4603      	mov	r3, r0
    320e:	2201      	movs	r2, #1
    3210:	495c      	ldr	r1, [pc, #368]	; (3384 <mem_manage_fault+0x18c>)
    3212:	f006 ff11 	bl	a038 <z_log_msg2_runtime_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3216:	4b5c      	ldr	r3, [pc, #368]	; (3388 <mem_manage_fault+0x190>)
    3218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    321a:	f013 0f10 	tst.w	r3, #16
    321e:	d13b      	bne.n	3298 <mem_manage_fault+0xa0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3220:	4b59      	ldr	r3, [pc, #356]	; (3388 <mem_manage_fault+0x190>)
    3222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3224:	f013 0f08 	tst.w	r3, #8
    3228:	d141      	bne.n	32ae <mem_manage_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    322a:	4b57      	ldr	r3, [pc, #348]	; (3388 <mem_manage_fault+0x190>)
    322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    322e:	f013 0f02 	tst.w	r3, #2
    3232:	d147      	bne.n	32c4 <mem_manage_fault+0xcc>
	uint32_t mmfar = -EINVAL;
    3234:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3238:	4b53      	ldr	r3, [pc, #332]	; (3388 <mem_manage_fault+0x190>)
    323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    323c:	f013 0f01 	tst.w	r3, #1
    3240:	d166      	bne.n	3310 <mem_manage_fault+0x118>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3242:	4b51      	ldr	r3, [pc, #324]	; (3388 <mem_manage_fault+0x190>)
    3244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3246:	f013 0f20 	tst.w	r3, #32
    324a:	d16c      	bne.n	3326 <mem_manage_fault+0x12e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    324c:	4b4e      	ldr	r3, [pc, #312]	; (3388 <mem_manage_fault+0x190>)
    324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3250:	f013 0f10 	tst.w	r3, #16
    3254:	d104      	bne.n	3260 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3256:	4b4c      	ldr	r3, [pc, #304]	; (3388 <mem_manage_fault+0x190>)
    3258:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    325a:	f014 0402 	ands.w	r4, r4, #2
    325e:	d004      	beq.n	326a <mem_manage_fault+0x72>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3260:	4b49      	ldr	r3, [pc, #292]	; (3388 <mem_manage_fault+0x190>)
    3262:	685c      	ldr	r4, [r3, #4]
    3264:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    3268:	d168      	bne.n	333c <mem_manage_fault+0x144>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    326a:	4b47      	ldr	r3, [pc, #284]	; (3388 <mem_manage_fault+0x190>)
    326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    326e:	f013 0f20 	tst.w	r3, #32
    3272:	d004      	beq.n	327e <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3274:	4a44      	ldr	r2, [pc, #272]	; (3388 <mem_manage_fault+0x190>)
    3276:	6a53      	ldr	r3, [r2, #36]	; 0x24
    3278:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    327c:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    327e:	4a42      	ldr	r2, [pc, #264]	; (3388 <mem_manage_fault+0x190>)
    3280:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3282:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3286:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3288:	2101      	movs	r1, #1
    328a:	4628      	mov	r0, r5
    328c:	f006 fed2 	bl	a034 <memory_fault_recoverable>
    3290:	7030      	strb	r0, [r6, #0]
}
    3292:	4620      	mov	r0, r4
    3294:	b005      	add	sp, #20
    3296:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    3298:	4b3c      	ldr	r3, [pc, #240]	; (338c <mem_manage_fault+0x194>)
    329a:	9302      	str	r3, [sp, #8]
    329c:	2000      	movs	r0, #0
    329e:	9001      	str	r0, [sp, #4]
    32a0:	9000      	str	r0, [sp, #0]
    32a2:	4603      	mov	r3, r0
    32a4:	2201      	movs	r2, #1
    32a6:	4937      	ldr	r1, [pc, #220]	; (3384 <mem_manage_fault+0x18c>)
    32a8:	f006 fec6 	bl	a038 <z_log_msg2_runtime_create>
    32ac:	e7b8      	b.n	3220 <mem_manage_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    32ae:	4b38      	ldr	r3, [pc, #224]	; (3390 <mem_manage_fault+0x198>)
    32b0:	9302      	str	r3, [sp, #8]
    32b2:	2000      	movs	r0, #0
    32b4:	9001      	str	r0, [sp, #4]
    32b6:	9000      	str	r0, [sp, #0]
    32b8:	4603      	mov	r3, r0
    32ba:	2201      	movs	r2, #1
    32bc:	4931      	ldr	r1, [pc, #196]	; (3384 <mem_manage_fault+0x18c>)
    32be:	f006 febb 	bl	a038 <z_log_msg2_runtime_create>
    32c2:	e7b2      	b.n	322a <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Data Access Violation");
    32c4:	4b33      	ldr	r3, [pc, #204]	; (3394 <mem_manage_fault+0x19c>)
    32c6:	9302      	str	r3, [sp, #8]
    32c8:	2000      	movs	r0, #0
    32ca:	9001      	str	r0, [sp, #4]
    32cc:	9000      	str	r0, [sp, #0]
    32ce:	4603      	mov	r3, r0
    32d0:	2201      	movs	r2, #1
    32d2:	492c      	ldr	r1, [pc, #176]	; (3384 <mem_manage_fault+0x18c>)
    32d4:	f006 feb0 	bl	a038 <z_log_msg2_runtime_create>
		uint32_t temp = SCB->MMFAR;
    32d8:	4b2b      	ldr	r3, [pc, #172]	; (3388 <mem_manage_fault+0x190>)
    32da:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    32dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    32de:	f013 0f80 	tst.w	r3, #128	; 0x80
    32e2:	d102      	bne.n	32ea <mem_manage_fault+0xf2>
	uint32_t mmfar = -EINVAL;
    32e4:	f06f 0715 	mvn.w	r7, #21
    32e8:	e7a6      	b.n	3238 <mem_manage_fault+0x40>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    32ea:	9703      	str	r7, [sp, #12]
    32ec:	4b2a      	ldr	r3, [pc, #168]	; (3398 <mem_manage_fault+0x1a0>)
    32ee:	9302      	str	r3, [sp, #8]
    32f0:	2000      	movs	r0, #0
    32f2:	9001      	str	r0, [sp, #4]
    32f4:	9000      	str	r0, [sp, #0]
    32f6:	4603      	mov	r3, r0
    32f8:	2201      	movs	r2, #1
    32fa:	4922      	ldr	r1, [pc, #136]	; (3384 <mem_manage_fault+0x18c>)
    32fc:	f006 fe9c 	bl	a038 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    3300:	2c00      	cmp	r4, #0
    3302:	d099      	beq.n	3238 <mem_manage_fault+0x40>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3304:	4a20      	ldr	r2, [pc, #128]	; (3388 <mem_manage_fault+0x190>)
    3306:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    330c:	6293      	str	r3, [r2, #40]	; 0x28
    330e:	e793      	b.n	3238 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Instruction Access Violation");
    3310:	4b22      	ldr	r3, [pc, #136]	; (339c <mem_manage_fault+0x1a4>)
    3312:	9302      	str	r3, [sp, #8]
    3314:	2000      	movs	r0, #0
    3316:	9001      	str	r0, [sp, #4]
    3318:	9000      	str	r0, [sp, #0]
    331a:	4603      	mov	r3, r0
    331c:	2201      	movs	r2, #1
    331e:	4919      	ldr	r1, [pc, #100]	; (3384 <mem_manage_fault+0x18c>)
    3320:	f006 fe8a 	bl	a038 <z_log_msg2_runtime_create>
    3324:	e78d      	b.n	3242 <mem_manage_fault+0x4a>
		PR_FAULT_INFO(
    3326:	4b1e      	ldr	r3, [pc, #120]	; (33a0 <mem_manage_fault+0x1a8>)
    3328:	9302      	str	r3, [sp, #8]
    332a:	2000      	movs	r0, #0
    332c:	9001      	str	r0, [sp, #4]
    332e:	9000      	str	r0, [sp, #0]
    3330:	4603      	mov	r3, r0
    3332:	2201      	movs	r2, #1
    3334:	4913      	ldr	r1, [pc, #76]	; (3384 <mem_manage_fault+0x18c>)
    3336:	f006 fe7f 	bl	a038 <z_log_msg2_runtime_create>
    333a:	e787      	b.n	324c <mem_manage_fault+0x54>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    333c:	4629      	mov	r1, r5
    333e:	4638      	mov	r0, r7
    3340:	f7ff fd88 	bl	2e54 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    3344:	4607      	mov	r7, r0
    3346:	b9b0      	cbnz	r0, 3376 <mem_manage_fault+0x17e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    3348:	4b0f      	ldr	r3, [pc, #60]	; (3388 <mem_manage_fault+0x190>)
    334a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    334c:	f014 0410 	ands.w	r4, r4, #16
    3350:	d08b      	beq.n	326a <mem_manage_fault+0x72>
    3352:	4c14      	ldr	r4, [pc, #80]	; (33a4 <mem_manage_fault+0x1ac>)
    3354:	f240 1349 	movw	r3, #329	; 0x149
    3358:	4622      	mov	r2, r4
    335a:	4913      	ldr	r1, [pc, #76]	; (33a8 <mem_manage_fault+0x1b0>)
    335c:	4813      	ldr	r0, [pc, #76]	; (33ac <mem_manage_fault+0x1b4>)
    335e:	f006 fd88 	bl	9e72 <assert_print>
    3362:	4813      	ldr	r0, [pc, #76]	; (33b0 <mem_manage_fault+0x1b8>)
    3364:	f006 fd85 	bl	9e72 <assert_print>
    3368:	f240 1149 	movw	r1, #329	; 0x149
    336c:	4620      	mov	r0, r4
    336e:	f006 fd79 	bl	9e64 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3372:	463c      	mov	r4, r7
    3374:	e779      	b.n	326a <mem_manage_fault+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3376:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    337a:	2402      	movs	r4, #2
    337c:	e775      	b.n	326a <mem_manage_fault+0x72>
    337e:	bf00      	nop
    3380:	0000bcfc 	.word	0x0000bcfc
    3384:	0000afa8 	.word	0x0000afa8
    3388:	e000ed00 	.word	0xe000ed00
    338c:	0000bd14 	.word	0x0000bd14
    3390:	0000bb0c 	.word	0x0000bb0c
    3394:	0000bd48 	.word	0x0000bd48
    3398:	0000bd60 	.word	0x0000bd60
    339c:	0000bd78 	.word	0x0000bd78
    33a0:	0000bb88 	.word	0x0000bb88
    33a4:	0000bd98 	.word	0x0000bd98
    33a8:	0000bdd4 	.word	0x0000bdd4
    33ac:	0000b180 	.word	0x0000b180
    33b0:	0000be20 	.word	0x0000be20

000033b4 <hard_fault>:
{
    33b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    33b6:	b085      	sub	sp, #20
    33b8:	4607      	mov	r7, r0
    33ba:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    33bc:	4b4b      	ldr	r3, [pc, #300]	; (34ec <hard_fault+0x138>)
    33be:	9302      	str	r3, [sp, #8]
    33c0:	2400      	movs	r4, #0
    33c2:	9401      	str	r4, [sp, #4]
    33c4:	9400      	str	r4, [sp, #0]
    33c6:	4623      	mov	r3, r4
    33c8:	2201      	movs	r2, #1
    33ca:	4949      	ldr	r1, [pc, #292]	; (34f0 <hard_fault+0x13c>)
    33cc:	4620      	mov	r0, r4
    33ce:	f006 fe33 	bl	a038 <z_log_msg2_runtime_create>
	*recoverable = false;
    33d2:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    33d4:	4b47      	ldr	r3, [pc, #284]	; (34f4 <hard_fault+0x140>)
    33d6:	6add      	ldr	r5, [r3, #44]	; 0x2c
    33d8:	f015 0502 	ands.w	r5, r5, #2
    33dc:	d12d      	bne.n	343a <hard_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    33de:	4b45      	ldr	r3, [pc, #276]	; (34f4 <hard_fault+0x140>)
    33e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    33e2:	2b00      	cmp	r3, #0
    33e4:	db36      	blt.n	3454 <hard_fault+0xa0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    33e6:	4b43      	ldr	r3, [pc, #268]	; (34f4 <hard_fault+0x140>)
    33e8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    33ea:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    33ee:	d06b      	beq.n	34c8 <hard_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    33f0:	4b41      	ldr	r3, [pc, #260]	; (34f8 <hard_fault+0x144>)
    33f2:	9302      	str	r3, [sp, #8]
    33f4:	2000      	movs	r0, #0
    33f6:	9001      	str	r0, [sp, #4]
    33f8:	9000      	str	r0, [sp, #0]
    33fa:	4603      	mov	r3, r0
    33fc:	2201      	movs	r2, #1
    33fe:	493c      	ldr	r1, [pc, #240]	; (34f0 <hard_fault+0x13c>)
    3400:	f006 fe1a 	bl	a038 <z_log_msg2_runtime_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    3404:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    3406:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    340a:	f64d 7302 	movw	r3, #57090	; 0xdf02
    340e:	429a      	cmp	r2, r3
    3410:	d02c      	beq.n	346c <hard_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
    3412:	4b38      	ldr	r3, [pc, #224]	; (34f4 <hard_fault+0x140>)
    3414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    3418:	2b00      	cmp	r3, #0
    341a:	d135      	bne.n	3488 <hard_fault+0xd4>
		} else if (SCB_BFSR != 0) {
    341c:	4b35      	ldr	r3, [pc, #212]	; (34f4 <hard_fault+0x140>)
    341e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    3422:	2b00      	cmp	r3, #0
    3424:	d137      	bne.n	3496 <hard_fault+0xe2>
		} else if (SCB_UFSR != 0) {
    3426:	4b33      	ldr	r3, [pc, #204]	; (34f4 <hard_fault+0x140>)
    3428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    342a:	b29b      	uxth	r3, r3
    342c:	2b00      	cmp	r3, #0
    342e:	d039      	beq.n	34a4 <hard_fault+0xf0>
			reason = usage_fault(esf);
    3430:	4638      	mov	r0, r7
    3432:	f7ff fe23 	bl	307c <usage_fault>
    3436:	4604      	mov	r4, r0
    3438:	e009      	b.n	344e <hard_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    343a:	4b30      	ldr	r3, [pc, #192]	; (34fc <hard_fault+0x148>)
    343c:	9302      	str	r3, [sp, #8]
    343e:	9401      	str	r4, [sp, #4]
    3440:	9400      	str	r4, [sp, #0]
    3442:	4623      	mov	r3, r4
    3444:	2201      	movs	r2, #1
    3446:	492a      	ldr	r1, [pc, #168]	; (34f0 <hard_fault+0x13c>)
    3448:	4620      	mov	r0, r4
    344a:	f006 fdf5 	bl	a038 <z_log_msg2_runtime_create>
}
    344e:	4620      	mov	r0, r4
    3450:	b005      	add	sp, #20
    3452:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
    3454:	4b2a      	ldr	r3, [pc, #168]	; (3500 <hard_fault+0x14c>)
    3456:	9302      	str	r3, [sp, #8]
    3458:	2000      	movs	r0, #0
    345a:	9001      	str	r0, [sp, #4]
    345c:	9000      	str	r0, [sp, #0]
    345e:	4603      	mov	r3, r0
    3460:	2201      	movs	r2, #1
    3462:	4923      	ldr	r1, [pc, #140]	; (34f0 <hard_fault+0x13c>)
    3464:	f006 fde8 	bl	a038 <z_log_msg2_runtime_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3468:	462c      	mov	r4, r5
    346a:	e7f0      	b.n	344e <hard_fault+0x9a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    346c:	683b      	ldr	r3, [r7, #0]
    346e:	9303      	str	r3, [sp, #12]
    3470:	4b24      	ldr	r3, [pc, #144]	; (3504 <hard_fault+0x150>)
    3472:	9302      	str	r3, [sp, #8]
    3474:	2000      	movs	r0, #0
    3476:	9001      	str	r0, [sp, #4]
    3478:	9000      	str	r0, [sp, #0]
    347a:	4603      	mov	r3, r0
    347c:	2201      	movs	r2, #1
    347e:	491c      	ldr	r1, [pc, #112]	; (34f0 <hard_fault+0x13c>)
    3480:	f006 fdda 	bl	a038 <z_log_msg2_runtime_create>
			reason = esf->basic.r0;
    3484:	683c      	ldr	r4, [r7, #0]
    3486:	e7e2      	b.n	344e <hard_fault+0x9a>
			reason = mem_manage_fault(esf, 1, recoverable);
    3488:	4632      	mov	r2, r6
    348a:	2101      	movs	r1, #1
    348c:	4638      	mov	r0, r7
    348e:	f7ff feb3 	bl	31f8 <mem_manage_fault>
    3492:	4604      	mov	r4, r0
    3494:	e7db      	b.n	344e <hard_fault+0x9a>
			reason = bus_fault(esf, 1, recoverable);
    3496:	4632      	mov	r2, r6
    3498:	2101      	movs	r1, #1
    349a:	4638      	mov	r0, r7
    349c:	f7ff fd46 	bl	2f2c <bus_fault>
    34a0:	4604      	mov	r4, r0
    34a2:	e7d4      	b.n	344e <hard_fault+0x9a>
			__ASSERT(0,
    34a4:	4c18      	ldr	r4, [pc, #96]	; (3508 <hard_fault+0x154>)
    34a6:	f240 23cd 	movw	r3, #717	; 0x2cd
    34aa:	4622      	mov	r2, r4
    34ac:	4917      	ldr	r1, [pc, #92]	; (350c <hard_fault+0x158>)
    34ae:	4818      	ldr	r0, [pc, #96]	; (3510 <hard_fault+0x15c>)
    34b0:	f006 fcdf 	bl	9e72 <assert_print>
    34b4:	4817      	ldr	r0, [pc, #92]	; (3514 <hard_fault+0x160>)
    34b6:	f006 fcdc 	bl	9e72 <assert_print>
    34ba:	f240 21cd 	movw	r1, #717	; 0x2cd
    34be:	4620      	mov	r0, r4
    34c0:	f006 fcd0 	bl	9e64 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    34c4:	462c      	mov	r4, r5
    34c6:	e7c2      	b.n	344e <hard_fault+0x9a>
		__ASSERT(0,
    34c8:	4d0f      	ldr	r5, [pc, #60]	; (3508 <hard_fault+0x154>)
    34ca:	f240 23d1 	movw	r3, #721	; 0x2d1
    34ce:	462a      	mov	r2, r5
    34d0:	490e      	ldr	r1, [pc, #56]	; (350c <hard_fault+0x158>)
    34d2:	480f      	ldr	r0, [pc, #60]	; (3510 <hard_fault+0x15c>)
    34d4:	f006 fccd 	bl	9e72 <assert_print>
    34d8:	480f      	ldr	r0, [pc, #60]	; (3518 <hard_fault+0x164>)
    34da:	f006 fcca 	bl	9e72 <assert_print>
    34de:	f240 21d1 	movw	r1, #721	; 0x2d1
    34e2:	4628      	mov	r0, r5
    34e4:	f006 fcbe 	bl	9e64 <assert_post_action>
	return reason;
    34e8:	e7b1      	b.n	344e <hard_fault+0x9a>
    34ea:	bf00      	nop
    34ec:	0000be44 	.word	0x0000be44
    34f0:	0000afa8 	.word	0x0000afa8
    34f4:	e000ed00 	.word	0xe000ed00
    34f8:	0000be90 	.word	0x0000be90
    34fc:	0000be5c 	.word	0x0000be5c
    3500:	0000be80 	.word	0x0000be80
    3504:	0000beb0 	.word	0x0000beb0
    3508:	0000bd98 	.word	0x0000bd98
    350c:	0000b83c 	.word	0x0000b83c
    3510:	0000b180 	.word	0x0000b180
    3514:	0000becc 	.word	0x0000becc
    3518:	0000bef0 	.word	0x0000bef0

0000351c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    351c:	b5f0      	push	{r4, r5, r6, r7, lr}
    351e:	b08f      	sub	sp, #60	; 0x3c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3520:	4b31      	ldr	r3, [pc, #196]	; (35e8 <z_arm_fault+0xcc>)
    3522:	685d      	ldr	r5, [r3, #4]
    3524:	f3c5 0508 	ubfx	r5, r5, #0, #9
    3528:	2300      	movs	r3, #0
    352a:	f383 8811 	msr	BASEPRI, r3
    352e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3532:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3536:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    353a:	d125      	bne.n	3588 <z_arm_fault+0x6c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    353c:	f002 030c 	and.w	r3, r2, #12
    3540:	2b08      	cmp	r3, #8
    3542:	d011      	beq.n	3568 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3544:	f012 0f08 	tst.w	r2, #8
    3548:	d01b      	beq.n	3582 <z_arm_fault+0x66>
			ptr_esf =  (z_arch_esf_t *)psp;
    354a:	460c      	mov	r4, r1
	*nested_exc = false;
    354c:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    354e:	b1f4      	cbz	r4, 358e <z_arm_fault+0x72>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    3550:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    3554:	4629      	mov	r1, r5
    3556:	4620      	mov	r0, r4
    3558:	f006 fd7d 	bl	a056 <fault_handle>
    355c:	4605      	mov	r5, r0
	if (recoverable) {
    355e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    3562:	b32b      	cbz	r3, 35b0 <z_arm_fault+0x94>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    3564:	b00f      	add	sp, #60	; 0x3c
    3566:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3568:	4b20      	ldr	r3, [pc, #128]	; (35ec <z_arm_fault+0xd0>)
    356a:	9302      	str	r3, [sp, #8]
    356c:	2400      	movs	r4, #0
    356e:	9401      	str	r4, [sp, #4]
    3570:	9400      	str	r4, [sp, #0]
    3572:	4623      	mov	r3, r4
    3574:	2201      	movs	r2, #1
    3576:	491e      	ldr	r1, [pc, #120]	; (35f0 <z_arm_fault+0xd4>)
    3578:	4620      	mov	r0, r4
    357a:	f006 fd5d 	bl	a038 <z_log_msg2_runtime_create>
	*nested_exc = false;
    357e:	4626      	mov	r6, r4
		return NULL;
    3580:	e7e5      	b.n	354e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    3582:	4604      	mov	r4, r0
			*nested_exc = true;
    3584:	2601      	movs	r6, #1
    3586:	e7e2      	b.n	354e <z_arm_fault+0x32>
	*nested_exc = false;
    3588:	2600      	movs	r6, #0
		return NULL;
    358a:	4634      	mov	r4, r6
    358c:	e7df      	b.n	354e <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
    358e:	4f19      	ldr	r7, [pc, #100]	; (35f4 <z_arm_fault+0xd8>)
    3590:	f240 33fb 	movw	r3, #1019	; 0x3fb
    3594:	463a      	mov	r2, r7
    3596:	4918      	ldr	r1, [pc, #96]	; (35f8 <z_arm_fault+0xdc>)
    3598:	4818      	ldr	r0, [pc, #96]	; (35fc <z_arm_fault+0xe0>)
    359a:	f006 fc6a 	bl	9e72 <assert_print>
    359e:	4818      	ldr	r0, [pc, #96]	; (3600 <z_arm_fault+0xe4>)
    35a0:	f006 fc67 	bl	9e72 <assert_print>
    35a4:	f240 31fb 	movw	r1, #1019	; 0x3fb
    35a8:	4638      	mov	r0, r7
    35aa:	f006 fc5b 	bl	9e64 <assert_post_action>
    35ae:	e7cf      	b.n	3550 <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    35b0:	2220      	movs	r2, #32
    35b2:	4621      	mov	r1, r4
    35b4:	a805      	add	r0, sp, #20
    35b6:	f006 fde9 	bl	a18c <memcpy>
	if (nested_exc) {
    35ba:	b14e      	cbz	r6, 35d0 <z_arm_fault+0xb4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    35bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    35be:	f3c3 0208 	ubfx	r2, r3, #0, #9
    35c2:	b95a      	cbnz	r2, 35dc <z_arm_fault+0xc0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    35c4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    35c8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    35cc:	930c      	str	r3, [sp, #48]	; 0x30
    35ce:	e005      	b.n	35dc <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    35d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    35d2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    35d6:	f023 0301 	bic.w	r3, r3, #1
    35da:	930c      	str	r3, [sp, #48]	; 0x30
	z_arm_fatal_error(reason, &esf_copy);
    35dc:	a905      	add	r1, sp, #20
    35de:	4628      	mov	r0, r5
    35e0:	f006 fd0a 	bl	9ff8 <z_arm_fatal_error>
    35e4:	e7be      	b.n	3564 <z_arm_fault+0x48>
    35e6:	bf00      	nop
    35e8:	e000ed00 	.word	0xe000ed00
    35ec:	0000bf20 	.word	0x0000bf20
    35f0:	0000afa8 	.word	0x0000afa8
    35f4:	0000bd98 	.word	0x0000bd98
    35f8:	0000bf4c 	.word	0x0000bf4c
    35fc:	0000b180 	.word	0x0000b180
    3600:	0000bf60 	.word	0x0000bf60

00003604 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3604:	4a02      	ldr	r2, [pc, #8]	; (3610 <z_arm_fault_init+0xc>)
    3606:	6953      	ldr	r3, [r2, #20]
    3608:	f043 0310 	orr.w	r3, r3, #16
    360c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    360e:	4770      	bx	lr
    3610:	e000ed00 	.word	0xe000ed00

00003614 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3614:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3618:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    361c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    361e:	4672      	mov	r2, lr
	bl z_arm_fault
    3620:	f7ff ff7c 	bl	351c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3624:	bd01      	pop	{r0, pc}
    3626:	bf00      	nop

00003628 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3628:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    362a:	e006      	b.n	363a <z_arm_interrupt_init+0x12>
    362c:	f002 010f 	and.w	r1, r2, #15
    3630:	4b09      	ldr	r3, [pc, #36]	; (3658 <z_arm_interrupt_init+0x30>)
    3632:	440b      	add	r3, r1
    3634:	2120      	movs	r1, #32
    3636:	7619      	strb	r1, [r3, #24]
    3638:	3201      	adds	r2, #1
    363a:	2a2f      	cmp	r2, #47	; 0x2f
    363c:	dc0a      	bgt.n	3654 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    363e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    3640:	2b00      	cmp	r3, #0
    3642:	dbf3      	blt.n	362c <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3644:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3648:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    364c:	2120      	movs	r1, #32
    364e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    3652:	e7f1      	b.n	3638 <z_arm_interrupt_init+0x10>
	}
}
    3654:	4770      	bx	lr
    3656:	bf00      	nop
    3658:	e000ecfc 	.word	0xe000ecfc

0000365c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    365c:	2000      	movs	r0, #0
    msr CONTROL, r0
    365e:	f380 8814 	msr	CONTROL, r0
    isb
    3662:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3666:	f007 fb51 	bl	ad0c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    366a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    366c:	490d      	ldr	r1, [pc, #52]	; (36a4 <__start+0x48>)
    str r0, [r1]
    366e:	6008      	str	r0, [r1, #0]
    dsb
    3670:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3674:	480c      	ldr	r0, [pc, #48]	; (36a8 <__start+0x4c>)
    msr msp, r0
    3676:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    367a:	f000 f82d 	bl	36d8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    367e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3680:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3684:	4809      	ldr	r0, [pc, #36]	; (36ac <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3686:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    368a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    368c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3690:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3694:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3696:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3698:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    369c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    36a0:	f7ff fb42 	bl	2d28 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    36a4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    36a8:	20005980 	.word	0x20005980
    ldr r0, =z_interrupt_stacks
    36ac:	20005b00 	.word	0x20005b00

000036b0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    36b0:	4b08      	ldr	r3, [pc, #32]	; (36d4 <z_arm_clear_arm_mpu_config+0x24>)
    36b2:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    36b6:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    36ba:	2300      	movs	r3, #0
    36bc:	e006      	b.n	36cc <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    36be:	4a05      	ldr	r2, [pc, #20]	; (36d4 <z_arm_clear_arm_mpu_config+0x24>)
    36c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    36c4:	2100      	movs	r1, #0
    36c6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    36ca:	3301      	adds	r3, #1
    36cc:	4283      	cmp	r3, r0
    36ce:	dbf6      	blt.n	36be <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    36d0:	4770      	bx	lr
    36d2:	bf00      	nop
    36d4:	e000ed00 	.word	0xe000ed00

000036d8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    36d8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    36da:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    36dc:	2400      	movs	r4, #0
    36de:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    36e2:	f7ff ffe5 	bl	36b0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    36e6:	4623      	mov	r3, r4
    36e8:	e008      	b.n	36fc <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    36ea:	f103 0120 	add.w	r1, r3, #32
    36ee:	4a0e      	ldr	r2, [pc, #56]	; (3728 <z_arm_init_arch_hw_at_boot+0x50>)
    36f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    36f4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    36f8:	3301      	adds	r3, #1
    36fa:	b2db      	uxtb	r3, r3
    36fc:	2b07      	cmp	r3, #7
    36fe:	d9f4      	bls.n	36ea <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3700:	2300      	movs	r3, #0
    3702:	e008      	b.n	3716 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3704:	f103 0160 	add.w	r1, r3, #96	; 0x60
    3708:	4a07      	ldr	r2, [pc, #28]	; (3728 <z_arm_init_arch_hw_at_boot+0x50>)
    370a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    370e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3712:	3301      	adds	r3, #1
    3714:	b2db      	uxtb	r3, r3
    3716:	2b07      	cmp	r3, #7
    3718:	d9f4      	bls.n	3704 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    371a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    371c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3720:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3724:	bd10      	pop	{r4, pc}
    3726:	bf00      	nop
    3728:	e000e100 	.word	0xe000e100

0000372c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    372c:	b508      	push	{r3, lr}
	if (_current == thread) {
    372e:	4b0a      	ldr	r3, [pc, #40]	; (3758 <z_impl_k_thread_abort+0x2c>)
    3730:	689b      	ldr	r3, [r3, #8]
    3732:	4283      	cmp	r3, r0
    3734:	d002      	beq.n	373c <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    3736:	f005 fb91 	bl	8e5c <z_thread_abort>
}
    373a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    373c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3740:	2b00      	cmp	r3, #0
    3742:	d0f8      	beq.n	3736 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3744:	4b05      	ldr	r3, [pc, #20]	; (375c <z_impl_k_thread_abort+0x30>)
    3746:	685a      	ldr	r2, [r3, #4]
    3748:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    374c:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    374e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3750:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3754:	625a      	str	r2, [r3, #36]	; 0x24
    3756:	e7ee      	b.n	3736 <z_impl_k_thread_abort+0xa>
    3758:	20004f28 	.word	0x20004f28
    375c:	e000ed00 	.word	0xe000ed00

00003760 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    3760:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3762:	4b03      	ldr	r3, [pc, #12]	; (3770 <z_arm_configure_static_mpu_regions+0x10>)
    3764:	4a03      	ldr	r2, [pc, #12]	; (3774 <z_arm_configure_static_mpu_regions+0x14>)
    3766:	2101      	movs	r1, #1
    3768:	4803      	ldr	r0, [pc, #12]	; (3778 <z_arm_configure_static_mpu_regions+0x18>)
    376a:	f000 f8bb 	bl	38e4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    376e:	bd08      	pop	{r3, pc}
    3770:	20040000 	.word	0x20040000
    3774:	20000000 	.word	0x20000000
    3778:	0000bfa4 	.word	0x0000bfa4

0000377c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    377c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    377e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    3782:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3784:	4804      	ldr	r0, [pc, #16]	; (3798 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3786:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    3788:	2320      	movs	r3, #32
    378a:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    378c:	4b03      	ldr	r3, [pc, #12]	; (379c <z_arm_configure_dynamic_mpu_regions+0x20>)
    378e:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3790:	2101      	movs	r1, #1
    3792:	f000 f8c9 	bl	3928 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    3796:	bd08      	pop	{r3, pc}
    3798:	200049c4 	.word	0x200049c4
    379c:	150b0000 	.word	0x150b0000

000037a0 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    37a0:	4a08      	ldr	r2, [pc, #32]	; (37c4 <region_init+0x24>)
    37a2:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    37a6:	680b      	ldr	r3, [r1, #0]
    37a8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    37ac:	4303      	orrs	r3, r0
    37ae:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    37b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    37b6:	688b      	ldr	r3, [r1, #8]
    37b8:	f043 0301 	orr.w	r3, r3, #1
    37bc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    37c0:	4770      	bx	lr
    37c2:	bf00      	nop
    37c4:	e000ed00 	.word	0xe000ed00

000037c8 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    37c8:	b510      	push	{r4, lr}
    37ca:	b084      	sub	sp, #16
    37cc:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    37ce:	2807      	cmp	r0, #7
    37d0:	d804      	bhi.n	37dc <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    37d2:	f7ff ffe5 	bl	37a0 <region_init>

	return index;
    37d6:	4620      	mov	r0, r4
}
    37d8:	b004      	add	sp, #16
    37da:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    37dc:	9003      	str	r0, [sp, #12]
    37de:	4b06      	ldr	r3, [pc, #24]	; (37f8 <region_allocate_and_init+0x30>)
    37e0:	9302      	str	r3, [sp, #8]
    37e2:	2000      	movs	r0, #0
    37e4:	9001      	str	r0, [sp, #4]
    37e6:	9000      	str	r0, [sp, #0]
    37e8:	4603      	mov	r3, r0
    37ea:	2201      	movs	r2, #1
    37ec:	4903      	ldr	r1, [pc, #12]	; (37fc <region_allocate_and_init+0x34>)
    37ee:	f006 fc68 	bl	a0c2 <z_log_msg2_runtime_create>
		return -EINVAL;
    37f2:	f06f 0015 	mvn.w	r0, #21
    37f6:	e7ef      	b.n	37d8 <region_allocate_and_init+0x10>
    37f8:	0000bfb0 	.word	0x0000bfb0
    37fc:	0000afa0 	.word	0x0000afa0

00003800 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3804:	b085      	sub	sp, #20
    3806:	4680      	mov	r8, r0
    3808:	460f      	mov	r7, r1
    380a:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
    380c:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    380e:	2500      	movs	r5, #0
    3810:	e009      	b.n	3826 <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3812:	4621      	mov	r1, r4
    3814:	b2f0      	uxtb	r0, r6
    3816:	f006 fc63 	bl	a0e0 <mpu_configure_region>
    381a:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    381c:	f110 0f16 	cmn.w	r0, #22
    3820:	d01e      	beq.n	3860 <mpu_configure_regions+0x60>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    3822:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    3824:	3501      	adds	r5, #1
    3826:	42bd      	cmp	r5, r7
    3828:	da1a      	bge.n	3860 <mpu_configure_regions+0x60>
		if (regions[i].size == 0U) {
    382a:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    382e:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    3832:	6862      	ldr	r2, [r4, #4]
    3834:	2a00      	cmp	r2, #0
    3836:	d0f5      	beq.n	3824 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
    3838:	f1b9 0f00 	cmp.w	r9, #0
    383c:	d0e9      	beq.n	3812 <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
    383e:	4620      	mov	r0, r4
    3840:	f006 fc2e 	bl	a0a0 <mpu_partition_is_valid>
		if (do_sanity_check &&
    3844:	2800      	cmp	r0, #0
    3846:	d1e4      	bne.n	3812 <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
    3848:	9503      	str	r5, [sp, #12]
    384a:	4b07      	ldr	r3, [pc, #28]	; (3868 <mpu_configure_regions+0x68>)
    384c:	9302      	str	r3, [sp, #8]
    384e:	9001      	str	r0, [sp, #4]
    3850:	9000      	str	r0, [sp, #0]
    3852:	4603      	mov	r3, r0
    3854:	2201      	movs	r2, #1
    3856:	4905      	ldr	r1, [pc, #20]	; (386c <mpu_configure_regions+0x6c>)
    3858:	f006 fc33 	bl	a0c2 <z_log_msg2_runtime_create>
			return -EINVAL;
    385c:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    3860:	4630      	mov	r0, r6
    3862:	b005      	add	sp, #20
    3864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3868:	0000bfd8 	.word	0x0000bfd8
    386c:	0000afa0 	.word	0x0000afa0

00003870 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    3870:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    3872:	4c03      	ldr	r4, [pc, #12]	; (3880 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3874:	2301      	movs	r3, #1
    3876:	7822      	ldrb	r2, [r4, #0]
    3878:	f7ff ffc2 	bl	3800 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    387c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    387e:	bd10      	pop	{r4, pc}
    3880:	20005155 	.word	0x20005155

00003884 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3884:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3886:	2300      	movs	r3, #0
    3888:	4a09      	ldr	r2, [pc, #36]	; (38b0 <mpu_configure_dynamic_mpu_regions+0x2c>)
    388a:	7812      	ldrb	r2, [r2, #0]
    388c:	f7ff ffb8 	bl	3800 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3890:	f110 0f16 	cmn.w	r0, #22
    3894:	d00a      	beq.n	38ac <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3896:	4603      	mov	r3, r0
    3898:	e006      	b.n	38a8 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    389a:	4a06      	ldr	r2, [pc, #24]	; (38b4 <mpu_configure_dynamic_mpu_regions+0x30>)
    389c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    38a0:	2100      	movs	r1, #0
    38a2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    38a6:	3301      	adds	r3, #1
    38a8:	2b07      	cmp	r3, #7
    38aa:	ddf6      	ble.n	389a <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    38ac:	bd08      	pop	{r3, pc}
    38ae:	bf00      	nop
    38b0:	20005155 	.word	0x20005155
    38b4:	e000ed00 	.word	0xe000ed00

000038b8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    38b8:	4b04      	ldr	r3, [pc, #16]	; (38cc <arm_core_mpu_enable+0x14>)
    38ba:	2205      	movs	r2, #5
    38bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    38c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    38c4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    38c8:	4770      	bx	lr
    38ca:	bf00      	nop
    38cc:	e000ed00 	.word	0xe000ed00

000038d0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    38d0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    38d4:	4b02      	ldr	r3, [pc, #8]	; (38e0 <arm_core_mpu_disable+0x10>)
    38d6:	2200      	movs	r2, #0
    38d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    38dc:	4770      	bx	lr
    38de:	bf00      	nop
    38e0:	e000ed00 	.word	0xe000ed00

000038e4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    38e4:	b538      	push	{r3, r4, r5, lr}
    38e6:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    38e8:	f7ff ffc2 	bl	3870 <mpu_configure_static_mpu_regions>
    38ec:	f110 0f16 	cmn.w	r0, #22
    38f0:	d000      	beq.n	38f4 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    38f2:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    38f4:	4d08      	ldr	r5, [pc, #32]	; (3918 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    38f6:	f240 1311 	movw	r3, #273	; 0x111
    38fa:	462a      	mov	r2, r5
    38fc:	4907      	ldr	r1, [pc, #28]	; (391c <arm_core_mpu_configure_static_mpu_regions+0x38>)
    38fe:	4808      	ldr	r0, [pc, #32]	; (3920 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    3900:	f006 fab7 	bl	9e72 <assert_print>
    3904:	4621      	mov	r1, r4
    3906:	4807      	ldr	r0, [pc, #28]	; (3924 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    3908:	f006 fab3 	bl	9e72 <assert_print>
    390c:	f240 1111 	movw	r1, #273	; 0x111
    3910:	4628      	mov	r0, r5
    3912:	f006 faa7 	bl	9e64 <assert_post_action>
}
    3916:	e7ec      	b.n	38f2 <arm_core_mpu_configure_static_mpu_regions+0xe>
    3918:	0000bffc 	.word	0x0000bffc
    391c:	0000b83c 	.word	0x0000b83c
    3920:	0000b180 	.word	0x0000b180
    3924:	0000c034 	.word	0x0000c034

00003928 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3928:	b538      	push	{r3, r4, r5, lr}
    392a:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    392c:	f7ff ffaa 	bl	3884 <mpu_configure_dynamic_mpu_regions>
    3930:	f110 0f16 	cmn.w	r0, #22
    3934:	d000      	beq.n	3938 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3936:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    3938:	4d08      	ldr	r5, [pc, #32]	; (395c <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    393a:	f44f 7398 	mov.w	r3, #304	; 0x130
    393e:	462a      	mov	r2, r5
    3940:	4907      	ldr	r1, [pc, #28]	; (3960 <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    3942:	4808      	ldr	r0, [pc, #32]	; (3964 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    3944:	f006 fa95 	bl	9e72 <assert_print>
    3948:	4621      	mov	r1, r4
    394a:	4807      	ldr	r0, [pc, #28]	; (3968 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    394c:	f006 fa91 	bl	9e72 <assert_print>
    3950:	f44f 7198 	mov.w	r1, #304	; 0x130
    3954:	4628      	mov	r0, r5
    3956:	f006 fa85 	bl	9e64 <assert_post_action>
}
    395a:	e7ec      	b.n	3936 <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    395c:	0000bffc 	.word	0x0000bffc
    3960:	0000b83c 	.word	0x0000b83c
    3964:	0000b180 	.word	0x0000b180
    3968:	0000c060 	.word	0x0000c060

0000396c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    396c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    396e:	4b24      	ldr	r3, [pc, #144]	; (3a00 <z_arm_mpu_init+0x94>)
    3970:	681d      	ldr	r5, [r3, #0]
    3972:	2d08      	cmp	r5, #8
    3974:	d803      	bhi.n	397e <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3976:	f7ff ffab 	bl	38d0 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    397a:	2400      	movs	r4, #0
    397c:	e01e      	b.n	39bc <z_arm_mpu_init+0x50>
		__ASSERT(0,
    397e:	4c21      	ldr	r4, [pc, #132]	; (3a04 <z_arm_mpu_init+0x98>)
    3980:	f44f 73a4 	mov.w	r3, #328	; 0x148
    3984:	4622      	mov	r2, r4
    3986:	4920      	ldr	r1, [pc, #128]	; (3a08 <z_arm_mpu_init+0x9c>)
    3988:	4820      	ldr	r0, [pc, #128]	; (3a0c <z_arm_mpu_init+0xa0>)
    398a:	f006 fa72 	bl	9e72 <assert_print>
    398e:	2208      	movs	r2, #8
    3990:	4629      	mov	r1, r5
    3992:	481f      	ldr	r0, [pc, #124]	; (3a10 <z_arm_mpu_init+0xa4>)
    3994:	f006 fa6d 	bl	9e72 <assert_print>
    3998:	f44f 71a4 	mov.w	r1, #328	; 0x148
    399c:	4620      	mov	r0, r4
    399e:	f006 fa61 	bl	9e64 <assert_post_action>
		return -1;
    39a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    39a6:	e017      	b.n	39d8 <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    39a8:	4b15      	ldr	r3, [pc, #84]	; (3a00 <z_arm_mpu_init+0x94>)
    39aa:	6859      	ldr	r1, [r3, #4]
    39ac:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    39b0:	0093      	lsls	r3, r2, #2
    39b2:	4419      	add	r1, r3
    39b4:	4620      	mov	r0, r4
    39b6:	f7ff fef3 	bl	37a0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    39ba:	3401      	adds	r4, #1
    39bc:	42a5      	cmp	r5, r4
    39be:	d8f3      	bhi.n	39a8 <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    39c0:	4b14      	ldr	r3, [pc, #80]	; (3a14 <z_arm_mpu_init+0xa8>)
    39c2:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    39c4:	f7ff ff78 	bl	38b8 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    39c8:	4b13      	ldr	r3, [pc, #76]	; (3a18 <z_arm_mpu_init+0xac>)
    39ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    39ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
    39d2:	2b08      	cmp	r3, #8
    39d4:	d101      	bne.n	39da <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    39d6:	2000      	movs	r0, #0
}
    39d8:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    39da:	4c0a      	ldr	r4, [pc, #40]	; (3a04 <z_arm_mpu_init+0x98>)
    39dc:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    39e0:	4622      	mov	r2, r4
    39e2:	490e      	ldr	r1, [pc, #56]	; (3a1c <z_arm_mpu_init+0xb0>)
    39e4:	4809      	ldr	r0, [pc, #36]	; (3a0c <z_arm_mpu_init+0xa0>)
    39e6:	f006 fa44 	bl	9e72 <assert_print>
    39ea:	480d      	ldr	r0, [pc, #52]	; (3a20 <z_arm_mpu_init+0xb4>)
    39ec:	f006 fa41 	bl	9e72 <assert_print>
    39f0:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    39f4:	4620      	mov	r0, r4
    39f6:	f006 fa35 	bl	9e64 <assert_post_action>
	return 0;
    39fa:	2000      	movs	r0, #0
    39fc:	e7ec      	b.n	39d8 <z_arm_mpu_init+0x6c>
    39fe:	bf00      	nop
    3a00:	0000c148 	.word	0x0000c148
    3a04:	0000bffc 	.word	0x0000bffc
    3a08:	0000b83c 	.word	0x0000b83c
    3a0c:	0000b180 	.word	0x0000b180
    3a10:	0000c090 	.word	0x0000c090
    3a14:	20005155 	.word	0x20005155
    3a18:	e000ed00 	.word	0xe000ed00
    3a1c:	0000c0c4 	.word	0x0000c0c4
    3a20:	0000c114 	.word	0x0000c114

00003a24 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3a24:	4b01      	ldr	r3, [pc, #4]	; (3a2c <__stdout_hook_install+0x8>)
    3a26:	6018      	str	r0, [r3, #0]
}
    3a28:	4770      	bx	lr
    3a2a:	bf00      	nop
    3a2c:	2000402c 	.word	0x2000402c

00003a30 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    3a30:	b510      	push	{r4, lr}
	__asm__ volatile(
    3a32:	f04f 0320 	mov.w	r3, #32
    3a36:	f3ef 8411 	mrs	r4, BASEPRI
    3a3a:	f383 8812 	msr	BASEPRI_MAX, r3
    3a3e:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3a42:	2301      	movs	r3, #1
    3a44:	4a0c      	ldr	r2, [pc, #48]	; (3a78 <nordicsemi_nrf52_init+0x48>)
    3a46:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3a4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3a4e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    3a52:	f006 fbeb 	bl	a22c <nrf52_errata_197>
    3a56:	b120      	cbz	r0, 3a62 <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    3a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a5c:	2201      	movs	r2, #1
    3a5e:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    3a62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3a66:	2201      	movs	r2, #1
    3a68:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    3a6c:	f384 8811 	msr	BASEPRI, r4
    3a70:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3a74:	2000      	movs	r0, #0
    3a76:	bd10      	pop	{r4, pc}
    3a78:	4001e000 	.word	0x4001e000

00003a7c <sys_arch_reboot>:
    *p_gpregret = val;
    3a7c:	b2c0      	uxtb	r0, r0
    3a7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3a82:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3a86:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3a8a:	4905      	ldr	r1, [pc, #20]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a8c:	68ca      	ldr	r2, [r1, #12]
    3a8e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3a92:	4b04      	ldr	r3, [pc, #16]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a94:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3a96:	60cb      	str	r3, [r1, #12]
    3a98:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3a9c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3a9e:	e7fd      	b.n	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
    3aa0:	e000ed00 	.word	0xe000ed00
    3aa4:	05fa0004 	.word	0x05fa0004

00003aa8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3aa8:	b130      	cbz	r0, 3ab8 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    3aaa:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3aac:	0180      	lsls	r0, r0, #6
    3aae:	4b03      	ldr	r3, [pc, #12]	; (3abc <arch_busy_wait+0x14>)
    3ab0:	f043 0301 	orr.w	r3, r3, #1
    3ab4:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    3ab6:	bd08      	pop	{r3, pc}
    3ab8:	4770      	bx	lr
    3aba:	bf00      	nop
    3abc:	0000b060 	.word	0x0000b060

00003ac0 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    3ac0:	4800      	ldr	r0, [pc, #0]	; (3ac4 <get_hf_flags+0x4>)
    3ac2:	4770      	bx	lr
    3ac4:	20004a28 	.word	0x20004a28

00003ac8 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3ac8:	4b01      	ldr	r3, [pc, #4]	; (3ad0 <get_subsys+0x8>)
    3aca:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    3acc:	1140      	asrs	r0, r0, #5
    3ace:	4770      	bx	lr
    3ad0:	200049e0 	.word	0x200049e0

00003ad4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3ad4:	b530      	push	{r4, r5, lr}
    3ad6:	b083      	sub	sp, #12
    3ad8:	4605      	mov	r5, r0
    3ada:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3adc:	f7ff fff4 	bl	3ac8 <get_subsys>
    3ae0:	4601      	mov	r1, r0
    3ae2:	2340      	movs	r3, #64	; 0x40
    3ae4:	9300      	str	r3, [sp, #0]
    3ae6:	4623      	mov	r3, r4
    3ae8:	4a05      	ldr	r2, [pc, #20]	; (3b00 <onoff_start+0x2c>)
    3aea:	4806      	ldr	r0, [pc, #24]	; (3b04 <onoff_start+0x30>)
    3aec:	f006 fc2d 	bl	a34a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    3af0:	1e01      	subs	r1, r0, #0
    3af2:	db01      	blt.n	3af8 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    3af4:	b003      	add	sp, #12
    3af6:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    3af8:	4628      	mov	r0, r5
    3afa:	47a0      	blx	r4
}
    3afc:	e7fa      	b.n	3af4 <onoff_start+0x20>
    3afe:	bf00      	nop
    3b00:	0000a393 	.word	0x0000a393
    3b04:	0000ad88 	.word	0x0000ad88

00003b08 <generic_hfclk_stop>:
{
    3b08:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3b0a:	4b0a      	ldr	r3, [pc, #40]	; (3b34 <generic_hfclk_stop+0x2c>)
    3b0c:	f3bf 8f5b 	dmb	ish
    3b10:	e853 2f00 	ldrex	r2, [r3]
    3b14:	f022 0102 	bic.w	r1, r2, #2
    3b18:	e843 1000 	strex	r0, r1, [r3]
    3b1c:	2800      	cmp	r0, #0
    3b1e:	d1f7      	bne.n	3b10 <generic_hfclk_stop+0x8>
    3b20:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3b24:	f012 0f01 	tst.w	r2, #1
    3b28:	d000      	beq.n	3b2c <generic_hfclk_stop+0x24>
}
    3b2a:	bd08      	pop	{r3, pc}
	hfclk_stop();
    3b2c:	f006 fc43 	bl	a3b6 <hfclk_stop>
    3b30:	e7fb      	b.n	3b2a <generic_hfclk_stop+0x22>
    3b32:	bf00      	nop
    3b34:	20004a38 	.word	0x20004a38

00003b38 <get_status>:
{
    3b38:	b570      	push	{r4, r5, r6, lr}
    3b3a:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    3b3c:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3b3e:	2c01      	cmp	r4, #1
    3b40:	d807      	bhi.n	3b52 <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3b42:	4621      	mov	r1, r4
    3b44:	4628      	mov	r0, r5
    3b46:	f006 fb93 	bl	a270 <get_sub_data>
    3b4a:	6880      	ldr	r0, [r0, #8]
}
    3b4c:	f000 0007 	and.w	r0, r0, #7
    3b50:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3b52:	4e06      	ldr	r6, [pc, #24]	; (3b6c <get_status+0x34>)
    3b54:	2379      	movs	r3, #121	; 0x79
    3b56:	4632      	mov	r2, r6
    3b58:	4905      	ldr	r1, [pc, #20]	; (3b70 <get_status+0x38>)
    3b5a:	4806      	ldr	r0, [pc, #24]	; (3b74 <get_status+0x3c>)
    3b5c:	f006 f989 	bl	9e72 <assert_print>
    3b60:	2179      	movs	r1, #121	; 0x79
    3b62:	4630      	mov	r0, r6
    3b64:	f006 f97e 	bl	9e64 <assert_post_action>
    3b68:	e7eb      	b.n	3b42 <get_status+0xa>
    3b6a:	bf00      	nop
    3b6c:	0000c16c 	.word	0x0000c16c
    3b70:	0000c1ac 	.word	0x0000c1ac
    3b74:	0000b180 	.word	0x0000b180

00003b78 <stop>:
{
    3b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b7c:	4607      	mov	r7, r0
    3b7e:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    3b80:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    3b82:	4621      	mov	r1, r4
    3b84:	f006 fb74 	bl	a270 <get_sub_data>
    3b88:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3b8a:	2c01      	cmp	r4, #1
    3b8c:	d80f      	bhi.n	3bae <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    3b8e:	4631      	mov	r1, r6
    3b90:	f105 0008 	add.w	r0, r5, #8
    3b94:	f006 fb7d 	bl	a292 <set_off_state>
	if (err < 0) {
    3b98:	2800      	cmp	r0, #0
    3b9a:	db06      	blt.n	3baa <stop+0x32>
	get_sub_config(dev, type)->stop();
    3b9c:	4621      	mov	r1, r4
    3b9e:	4638      	mov	r0, r7
    3ba0:	f006 fb6d 	bl	a27e <get_sub_config>
    3ba4:	6843      	ldr	r3, [r0, #4]
    3ba6:	4798      	blx	r3
	return 0;
    3ba8:	2000      	movs	r0, #0
}
    3baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3bae:	f8df 801c 	ldr.w	r8, [pc, #28]	; 3bcc <stop+0x54>
    3bb2:	f240 134d 	movw	r3, #333	; 0x14d
    3bb6:	4642      	mov	r2, r8
    3bb8:	4905      	ldr	r1, [pc, #20]	; (3bd0 <stop+0x58>)
    3bba:	4806      	ldr	r0, [pc, #24]	; (3bd4 <stop+0x5c>)
    3bbc:	f006 f959 	bl	9e72 <assert_print>
    3bc0:	f240 114d 	movw	r1, #333	; 0x14d
    3bc4:	4640      	mov	r0, r8
    3bc6:	f006 f94d 	bl	9e64 <assert_post_action>
    3bca:	e7e0      	b.n	3b8e <stop+0x16>
    3bcc:	0000c16c 	.word	0x0000c16c
    3bd0:	0000c1ac 	.word	0x0000c1ac
    3bd4:	0000b180 	.word	0x0000b180

00003bd8 <onoff_stop>:
{
    3bd8:	b538      	push	{r3, r4, r5, lr}
    3bda:	4605      	mov	r5, r0
    3bdc:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3bde:	f7ff ff73 	bl	3ac8 <get_subsys>
    3be2:	4601      	mov	r1, r0
    3be4:	2240      	movs	r2, #64	; 0x40
    3be6:	4803      	ldr	r0, [pc, #12]	; (3bf4 <onoff_stop+0x1c>)
    3be8:	f7ff ffc6 	bl	3b78 <stop>
    3bec:	4601      	mov	r1, r0
	notify(mgr, res);
    3bee:	4628      	mov	r0, r5
    3bf0:	47a0      	blx	r4
}
    3bf2:	bd38      	pop	{r3, r4, r5, pc}
    3bf4:	0000ad88 	.word	0x0000ad88

00003bf8 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    3bf8:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    3bfa:	2801      	cmp	r0, #1
    3bfc:	d01d      	beq.n	3c3a <clock_event_handler+0x42>
    3bfe:	2803      	cmp	r0, #3
    3c00:	d020      	beq.n	3c44 <clock_event_handler+0x4c>
    3c02:	b168      	cbz	r0, 3c20 <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    3c04:	4c16      	ldr	r4, [pc, #88]	; (3c60 <clock_event_handler+0x68>)
    3c06:	f240 2362 	movw	r3, #610	; 0x262
    3c0a:	4622      	mov	r2, r4
    3c0c:	4915      	ldr	r1, [pc, #84]	; (3c64 <clock_event_handler+0x6c>)
    3c0e:	4816      	ldr	r0, [pc, #88]	; (3c68 <clock_event_handler+0x70>)
    3c10:	f006 f92f 	bl	9e72 <assert_print>
    3c14:	f240 2162 	movw	r1, #610	; 0x262
    3c18:	4620      	mov	r0, r4
    3c1a:	f006 f923 	bl	9e64 <assert_post_action>
		break;
	}
}
    3c1e:	e010      	b.n	3c42 <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3c20:	2100      	movs	r1, #0
    3c22:	4812      	ldr	r0, [pc, #72]	; (3c6c <clock_event_handler+0x74>)
    3c24:	f006 fb24 	bl	a270 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3c28:	6883      	ldr	r3, [r0, #8]
    3c2a:	f013 0f07 	tst.w	r3, #7
    3c2e:	d108      	bne.n	3c42 <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3c30:	2100      	movs	r1, #0
    3c32:	480e      	ldr	r0, [pc, #56]	; (3c6c <clock_event_handler+0x74>)
    3c34:	f006 fb77 	bl	a326 <clkstarted_handle>
    3c38:	e003      	b.n	3c42 <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3c3a:	2101      	movs	r1, #1
    3c3c:	480b      	ldr	r0, [pc, #44]	; (3c6c <clock_event_handler+0x74>)
    3c3e:	f006 fb72 	bl	a326 <clkstarted_handle>
}
    3c42:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    3c44:	4c06      	ldr	r4, [pc, #24]	; (3c60 <clock_event_handler+0x68>)
    3c46:	f240 235e 	movw	r3, #606	; 0x25e
    3c4a:	4622      	mov	r2, r4
    3c4c:	4905      	ldr	r1, [pc, #20]	; (3c64 <clock_event_handler+0x6c>)
    3c4e:	4806      	ldr	r0, [pc, #24]	; (3c68 <clock_event_handler+0x70>)
    3c50:	f006 f90f 	bl	9e72 <assert_print>
    3c54:	f240 215e 	movw	r1, #606	; 0x25e
    3c58:	4620      	mov	r0, r4
    3c5a:	f006 f903 	bl	9e64 <assert_post_action>
		break;
    3c5e:	e7f0      	b.n	3c42 <clock_event_handler+0x4a>
    3c60:	0000c16c 	.word	0x0000c16c
    3c64:	0000b83c 	.word	0x0000b83c
    3c68:	0000b180 	.word	0x0000b180
    3c6c:	0000ad88 	.word	0x0000ad88

00003c70 <api_blocking_start>:
{
    3c70:	b500      	push	{lr}
    3c72:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3c74:	f8cd d000 	str.w	sp, [sp]
    3c78:	f8cd d004 	str.w	sp, [sp, #4]
    3c7c:	2300      	movs	r3, #0
    3c7e:	9302      	str	r3, [sp, #8]
    3c80:	2301      	movs	r3, #1
    3c82:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3c84:	466b      	mov	r3, sp
    3c86:	4a07      	ldr	r2, [pc, #28]	; (3ca4 <api_blocking_start+0x34>)
    3c88:	f006 fb7b 	bl	a382 <api_start>
	if (err < 0) {
    3c8c:	2800      	cmp	r0, #0
    3c8e:	db05      	blt.n	3c9c <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    3c90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3c94:	2300      	movs	r3, #0
    3c96:	4668      	mov	r0, sp
    3c98:	f003 feac 	bl	79f4 <z_impl_k_sem_take>
}
    3c9c:	b005      	add	sp, #20
    3c9e:	f85d fb04 	ldr.w	pc, [sp], #4
    3ca2:	bf00      	nop
    3ca4:	0000a3d5 	.word	0x0000a3d5

00003ca8 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    3ca8:	b570      	push	{r4, r5, r6, lr}
    3caa:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3cac:	2200      	movs	r2, #0
    3cae:	2101      	movs	r1, #1
    3cb0:	4610      	mov	r0, r2
    3cb2:	f7fe ffff 	bl	2cb4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3cb6:	4811      	ldr	r0, [pc, #68]	; (3cfc <clk_init+0x54>)
    3cb8:	f001 fd8c 	bl	57d4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3cbc:	4b10      	ldr	r3, [pc, #64]	; (3d00 <clk_init+0x58>)
    3cbe:	4298      	cmp	r0, r3
    3cc0:	d119      	bne.n	3cf6 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3cc2:	f001 fdb1 	bl	5828 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    3cc6:	2400      	movs	r4, #0
    3cc8:	2c01      	cmp	r4, #1
    3cca:	d812      	bhi.n	3cf2 <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    3ccc:	4621      	mov	r1, r4
    3cce:	4630      	mov	r0, r6
    3cd0:	f006 face 	bl	a270 <get_sub_data>
    3cd4:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3cd6:	4621      	mov	r1, r4
    3cd8:	4630      	mov	r0, r6
    3cda:	f006 fad6 	bl	a28a <get_onoff_manager>
    3cde:	4909      	ldr	r1, [pc, #36]	; (3d04 <clk_init+0x5c>)
    3ce0:	f005 ffd0 	bl	9c84 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3ce4:	2800      	cmp	r0, #0
    3ce6:	db05      	blt.n	3cf4 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3ce8:	2301      	movs	r3, #1
    3cea:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    3cec:	441c      	add	r4, r3
    3cee:	b2e4      	uxtb	r4, r4
    3cf0:	e7ea      	b.n	3cc8 <clk_init+0x20>
	}

	return 0;
    3cf2:	2000      	movs	r0, #0
}
    3cf4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3cf6:	f06f 0004 	mvn.w	r0, #4
    3cfa:	e7fb      	b.n	3cf4 <clk_init+0x4c>
    3cfc:	00003bf9 	.word	0x00003bf9
    3d00:	0bad0000 	.word	0x0bad0000
    3d04:	0000c228 	.word	0x0000c228

00003d08 <lfclk_spinwait>:
{
    3d08:	b570      	push	{r4, r5, r6, lr}
    3d0a:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3d0c:	2801      	cmp	r0, #1
    3d0e:	d107      	bne.n	3d20 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3d10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d14:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3d18:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3d1c:	2b01      	cmp	r3, #1
    3d1e:	d05a      	beq.n	3dd6 <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3d20:	f006 ff60 	bl	abe4 <k_is_in_isr>
    3d24:	b928      	cbnz	r0, 3d32 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    3d26:	4b2f      	ldr	r3, [pc, #188]	; (3de4 <lfclk_spinwait+0xdc>)
    3d28:	781b      	ldrb	r3, [r3, #0]
    3d2a:	2b00      	cmp	r3, #0
    3d2c:	d043      	beq.n	3db6 <lfclk_spinwait+0xae>
    3d2e:	2300      	movs	r3, #0
    3d30:	e000      	b.n	3d34 <lfclk_spinwait+0x2c>
    3d32:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    3d34:	461c      	mov	r4, r3
    3d36:	2b00      	cmp	r3, #0
    3d38:	d03f      	beq.n	3dba <lfclk_spinwait+0xb2>
	__asm__ volatile(
    3d3a:	f04f 0320 	mov.w	r3, #32
    3d3e:	f3ef 8611 	mrs	r6, BASEPRI
    3d42:	f383 8812 	msr	BASEPRI_MAX, r3
    3d46:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    3d4a:	b924      	cbnz	r4, 3d56 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    3d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d50:	2202      	movs	r2, #2
    3d52:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3d56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3d5a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3d5e:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3d62:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3d66:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    3d6a:	d12d      	bne.n	3dc8 <lfclk_spinwait+0xc0>
    return false;
    3d6c:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3d6e:	b11a      	cbz	r2, 3d78 <lfclk_spinwait+0x70>
    3d70:	2b01      	cmp	r3, #1
    3d72:	d02b      	beq.n	3dcc <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3d74:	2d01      	cmp	r5, #1
    3d76:	d029      	beq.n	3dcc <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3d78:	b30c      	cbz	r4, 3dbe <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3d7a:	4630      	mov	r0, r6
    3d7c:	f7fe ff2a 	bl	2bd4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3d80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d84:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3d88:	2b00      	cmp	r3, #0
    3d8a:	d1e4      	bne.n	3d56 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d90:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    3d94:	2b00      	cmp	r3, #0
    3d96:	d0de      	beq.n	3d56 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d9c:	2200      	movs	r2, #0
    3d9e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3da2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3da6:	2201      	movs	r2, #1
    3da8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3dac:	490e      	ldr	r1, [pc, #56]	; (3de8 <lfclk_spinwait+0xe0>)
    3dae:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3db2:	609a      	str	r2, [r3, #8]
}
    3db4:	e7cf      	b.n	3d56 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3db6:	2301      	movs	r3, #1
    3db8:	e7bc      	b.n	3d34 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    3dba:	2600      	movs	r6, #0
    3dbc:	e7c5      	b.n	3d4a <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    3dbe:	2021      	movs	r0, #33	; 0x21
    3dc0:	2100      	movs	r1, #0
    3dc2:	f004 fff9 	bl	8db8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3dc6:	e7db      	b.n	3d80 <lfclk_spinwait+0x78>
                return true;
    3dc8:	2201      	movs	r2, #1
    3dca:	e7d0      	b.n	3d6e <lfclk_spinwait+0x66>
	if (isr_mode) {
    3dcc:	b124      	cbz	r4, 3dd8 <lfclk_spinwait+0xd0>
	__asm__ volatile(
    3dce:	f386 8811 	msr	BASEPRI, r6
    3dd2:	f3bf 8f6f 	isb	sy
}
    3dd6:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    3dd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ddc:	2202      	movs	r2, #2
    3dde:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3de2:	e7f8      	b.n	3dd6 <lfclk_spinwait+0xce>
    3de4:	20005156 	.word	0x20005156
    3de8:	e000e100 	.word	0xe000e100

00003dec <generic_hfclk_start>:
{
    3dec:	b510      	push	{r4, lr}
	__asm__ volatile(
    3dee:	f04f 0320 	mov.w	r3, #32
    3df2:	f3ef 8411 	mrs	r4, BASEPRI
    3df6:	f383 8812 	msr	BASEPRI_MAX, r3
    3dfa:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3dfe:	4a13      	ldr	r2, [pc, #76]	; (3e4c <generic_hfclk_start+0x60>)
    3e00:	6813      	ldr	r3, [r2, #0]
    3e02:	f043 0302 	orr.w	r3, r3, #2
    3e06:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3e08:	f013 0f01 	tst.w	r3, #1
    3e0c:	d108      	bne.n	3e20 <generic_hfclk_start+0x34>
	bool already_started = false;
    3e0e:	2300      	movs	r3, #0
	__asm__ volatile(
    3e10:	f384 8811 	msr	BASEPRI, r4
    3e14:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3e18:	b99b      	cbnz	r3, 3e42 <generic_hfclk_start+0x56>
	hfclk_start();
    3e1a:	f006 fac2 	bl	a3a2 <hfclk_start>
}
    3e1e:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3e20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3e24:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3e28:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3e2c:	f012 0f01 	tst.w	r2, #1
    3e30:	d101      	bne.n	3e36 <generic_hfclk_start+0x4a>
	bool already_started = false;
    3e32:	2300      	movs	r3, #0
    3e34:	e7ec      	b.n	3e10 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    3e36:	f7ff fe43 	bl	3ac0 <get_hf_flags>
    3e3a:	f006 fa61 	bl	a300 <set_on_state>
			already_started = true;
    3e3e:	2301      	movs	r3, #1
    3e40:	e7e6      	b.n	3e10 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    3e42:	2100      	movs	r1, #0
    3e44:	4802      	ldr	r0, [pc, #8]	; (3e50 <generic_hfclk_start+0x64>)
    3e46:	f006 fa6e 	bl	a326 <clkstarted_handle>
		return;
    3e4a:	e7e8      	b.n	3e1e <generic_hfclk_start+0x32>
    3e4c:	20004a38 	.word	0x20004a38
    3e50:	0000ad88 	.word	0x0000ad88

00003e54 <z_nrf_clock_control_lf_on>:
{
    3e54:	b538      	push	{r3, r4, r5, lr}
    3e56:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3e58:	4b1f      	ldr	r3, [pc, #124]	; (3ed8 <z_nrf_clock_control_lf_on+0x84>)
    3e5a:	2101      	movs	r1, #1
    3e5c:	f3bf 8f5b 	dmb	ish
    3e60:	e853 2f00 	ldrex	r2, [r3]
    3e64:	e843 1000 	strex	r0, r1, [r3]
    3e68:	2800      	cmp	r0, #0
    3e6a:	d1f9      	bne.n	3e60 <z_nrf_clock_control_lf_on+0xc>
    3e6c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    3e70:	b142      	cbz	r2, 3e84 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    3e72:	b134      	cbz	r4, 3e82 <z_nrf_clock_control_lf_on+0x2e>
    3e74:	1e63      	subs	r3, r4, #1
    3e76:	b2db      	uxtb	r3, r3
    3e78:	2b01      	cmp	r3, #1
    3e7a:	d81f      	bhi.n	3ebc <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    3e7c:	4620      	mov	r0, r4
    3e7e:	f7ff ff43 	bl	3d08 <lfclk_spinwait>
}
    3e82:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    3e84:	4815      	ldr	r0, [pc, #84]	; (3edc <z_nrf_clock_control_lf_on+0x88>)
    3e86:	f006 fa00 	bl	a28a <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3e8a:	4915      	ldr	r1, [pc, #84]	; (3ee0 <z_nrf_clock_control_lf_on+0x8c>)
    3e8c:	2300      	movs	r3, #0
    3e8e:	604b      	str	r3, [r1, #4]
    3e90:	608b      	str	r3, [r1, #8]
    3e92:	60cb      	str	r3, [r1, #12]
    3e94:	2301      	movs	r3, #1
    3e96:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    3e98:	f7fd f902 	bl	10a0 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    3e9c:	2800      	cmp	r0, #0
    3e9e:	dae8      	bge.n	3e72 <z_nrf_clock_control_lf_on+0x1e>
    3ea0:	4d10      	ldr	r5, [pc, #64]	; (3ee4 <z_nrf_clock_control_lf_on+0x90>)
    3ea2:	f44f 7308 	mov.w	r3, #544	; 0x220
    3ea6:	462a      	mov	r2, r5
    3ea8:	490f      	ldr	r1, [pc, #60]	; (3ee8 <z_nrf_clock_control_lf_on+0x94>)
    3eaa:	4810      	ldr	r0, [pc, #64]	; (3eec <z_nrf_clock_control_lf_on+0x98>)
    3eac:	f005 ffe1 	bl	9e72 <assert_print>
    3eb0:	f44f 7108 	mov.w	r1, #544	; 0x220
    3eb4:	4628      	mov	r0, r5
    3eb6:	f005 ffd5 	bl	9e64 <assert_post_action>
    3eba:	e7da      	b.n	3e72 <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    3ebc:	4c09      	ldr	r4, [pc, #36]	; (3ee4 <z_nrf_clock_control_lf_on+0x90>)
    3ebe:	f240 2332 	movw	r3, #562	; 0x232
    3ec2:	4622      	mov	r2, r4
    3ec4:	490a      	ldr	r1, [pc, #40]	; (3ef0 <z_nrf_clock_control_lf_on+0x9c>)
    3ec6:	4809      	ldr	r0, [pc, #36]	; (3eec <z_nrf_clock_control_lf_on+0x98>)
    3ec8:	f005 ffd3 	bl	9e72 <assert_print>
    3ecc:	f240 2132 	movw	r1, #562	; 0x232
    3ed0:	4620      	mov	r0, r4
    3ed2:	f005 ffc7 	bl	9e64 <assert_post_action>
    3ed6:	e7d4      	b.n	3e82 <z_nrf_clock_control_lf_on+0x2e>
    3ed8:	20004a3c 	.word	0x20004a3c
    3edc:	0000ad88 	.word	0x0000ad88
    3ee0:	200049d0 	.word	0x200049d0
    3ee4:	0000c16c 	.word	0x0000c16c
    3ee8:	0000b7a4 	.word	0x0000b7a4
    3eec:	0000b180 	.word	0x0000b180
    3ef0:	0000b83c 	.word	0x0000b83c

00003ef4 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    3ef4:	b510      	push	{r4, lr}
    3ef6:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    3ef8:	280a      	cmp	r0, #10
    3efa:	d007      	beq.n	3f0c <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    3efc:	4b07      	ldr	r3, [pc, #28]	; (3f1c <console_out+0x28>)
    3efe:	6818      	ldr	r0, [r3, #0]
    3f00:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    3f02:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    3f04:	685b      	ldr	r3, [r3, #4]
    3f06:	4798      	blx	r3

	return c;
}
    3f08:	4620      	mov	r0, r4
    3f0a:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    3f0c:	4b03      	ldr	r3, [pc, #12]	; (3f1c <console_out+0x28>)
    3f0e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    3f10:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    3f12:	685b      	ldr	r3, [r3, #4]
    3f14:	210d      	movs	r1, #13
    3f16:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    3f18:	e7f0      	b.n	3efc <console_out+0x8>
    3f1a:	bf00      	nop
    3f1c:	20004a40 	.word	0x20004a40

00003f20 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    3f20:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    3f22:	4c04      	ldr	r4, [pc, #16]	; (3f34 <uart_console_hook_install+0x14>)
    3f24:	4620      	mov	r0, r4
    3f26:	f7ff fd7d 	bl	3a24 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    3f2a:	4620      	mov	r0, r4
    3f2c:	f7fc fe1e 	bl	b6c <__printk_hook_install>
#endif
}
    3f30:	bd10      	pop	{r4, pc}
    3f32:	bf00      	nop
    3f34:	00003ef5 	.word	0x00003ef5

00003f38 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3f38:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3f3a:	4806      	ldr	r0, [pc, #24]	; (3f54 <uart_console_init+0x1c>)
    3f3c:	4b06      	ldr	r3, [pc, #24]	; (3f58 <uart_console_init+0x20>)
    3f3e:	6018      	str	r0, [r3, #0]
    3f40:	f006 fdf4 	bl	ab2c <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    3f44:	b118      	cbz	r0, 3f4e <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    3f46:	f7ff ffeb 	bl	3f20 <uart_console_hook_install>

	return 0;
    3f4a:	2000      	movs	r0, #0
}
    3f4c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3f4e:	f06f 0012 	mvn.w	r0, #18
    3f52:	e7fb      	b.n	3f4c <uart_console_init+0x14>
    3f54:	0000ade8 	.word	0x0000ade8
    3f58:	20004a40 	.word	0x20004a40

00003f5c <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3f5c:	b128      	cbz	r0, 3f6a <get_dev+0xe>
    3f5e:	2801      	cmp	r0, #1
    3f60:	d101      	bne.n	3f66 <get_dev+0xa>
    3f62:	4803      	ldr	r0, [pc, #12]	; (3f70 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    3f64:	4770      	bx	lr
	const struct device *dev = NULL;
    3f66:	2000      	movs	r0, #0
    3f68:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3f6a:	4802      	ldr	r0, [pc, #8]	; (3f74 <get_dev+0x18>)
    3f6c:	4770      	bx	lr
    3f6e:	bf00      	nop
    3f70:	0000ada0 	.word	0x0000ada0
    3f74:	0000adb8 	.word	0x0000adb8

00003f78 <gpio_nrfx_manage_callback>:
{
    3f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f7c:	4616      	mov	r6, r2
	return port->data;
    3f7e:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    3f80:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    3f82:	460c      	mov	r4, r1
    3f84:	b131      	cbz	r1, 3f94 <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
    3f86:	6863      	ldr	r3, [r4, #4]
    3f88:	b1a3      	cbz	r3, 3fb4 <gpio_nrfx_manage_callback+0x3c>
	return list->head;
    3f8a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    3f8c:	2b00      	cmp	r3, #0
    3f8e:	d03b      	beq.n	4008 <gpio_nrfx_manage_callback+0x90>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3f90:	2100      	movs	r1, #0
    3f92:	e02a      	b.n	3fea <gpio_nrfx_manage_callback+0x72>
	__ASSERT(callback, "No callback!");
    3f94:	f8df 8094 	ldr.w	r8, [pc, #148]	; 402c <gpio_nrfx_manage_callback+0xb4>
    3f98:	2324      	movs	r3, #36	; 0x24
    3f9a:	4642      	mov	r2, r8
    3f9c:	4924      	ldr	r1, [pc, #144]	; (4030 <gpio_nrfx_manage_callback+0xb8>)
    3f9e:	4825      	ldr	r0, [pc, #148]	; (4034 <gpio_nrfx_manage_callback+0xbc>)
    3fa0:	f005 ff67 	bl	9e72 <assert_print>
    3fa4:	4824      	ldr	r0, [pc, #144]	; (4038 <gpio_nrfx_manage_callback+0xc0>)
    3fa6:	f005 ff64 	bl	9e72 <assert_print>
    3faa:	2124      	movs	r1, #36	; 0x24
    3fac:	4640      	mov	r0, r8
    3fae:	f005 ff59 	bl	9e64 <assert_post_action>
    3fb2:	e7e8      	b.n	3f86 <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    3fb4:	f8df 8074 	ldr.w	r8, [pc, #116]	; 402c <gpio_nrfx_manage_callback+0xb4>
    3fb8:	2325      	movs	r3, #37	; 0x25
    3fba:	4642      	mov	r2, r8
    3fbc:	491f      	ldr	r1, [pc, #124]	; (403c <gpio_nrfx_manage_callback+0xc4>)
    3fbe:	481d      	ldr	r0, [pc, #116]	; (4034 <gpio_nrfx_manage_callback+0xbc>)
    3fc0:	f005 ff57 	bl	9e72 <assert_print>
    3fc4:	481e      	ldr	r0, [pc, #120]	; (4040 <gpio_nrfx_manage_callback+0xc8>)
    3fc6:	f005 ff54 	bl	9e72 <assert_print>
    3fca:	2125      	movs	r1, #37	; 0x25
    3fcc:	4640      	mov	r0, r8
    3fce:	f005 ff49 	bl	9e64 <assert_post_action>
    3fd2:	e7da      	b.n	3f8a <gpio_nrfx_manage_callback+0x12>
	return node->next;
    3fd4:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    3fd6:	606b      	str	r3, [r5, #4]
	return list->tail;
    3fd8:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    3fda:	4294      	cmp	r4, r2
    3fdc:	d10f      	bne.n	3ffe <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    3fde:	607b      	str	r3, [r7, #4]
}
    3fe0:	e00d      	b.n	3ffe <gpio_nrfx_manage_callback+0x86>
	list->tail = node;
    3fe2:	6079      	str	r1, [r7, #4]
}
    3fe4:	e00b      	b.n	3ffe <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3fe6:	4619      	mov	r1, r3
    3fe8:	681b      	ldr	r3, [r3, #0]
    3fea:	b15b      	cbz	r3, 4004 <gpio_nrfx_manage_callback+0x8c>
    3fec:	429c      	cmp	r4, r3
    3fee:	d1fa      	bne.n	3fe6 <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_REMOVE(slist, snode)
    3ff0:	2900      	cmp	r1, #0
    3ff2:	d0ef      	beq.n	3fd4 <gpio_nrfx_manage_callback+0x5c>
	return node->next;
    3ff4:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    3ff6:	600b      	str	r3, [r1, #0]
	return list->tail;
    3ff8:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    3ffa:	429c      	cmp	r4, r3
    3ffc:	d0f1      	beq.n	3fe2 <gpio_nrfx_manage_callback+0x6a>
	parent->next = child;
    3ffe:	2300      	movs	r3, #0
    4000:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4002:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    4004:	b903      	cbnz	r3, 4008 <gpio_nrfx_manage_callback+0x90>
			if (!set) {
    4006:	b156      	cbz	r6, 401e <gpio_nrfx_manage_callback+0xa6>
				return -EINVAL;
			}
		}
	}

	if (set) {
    4008:	b166      	cbz	r6, 4024 <gpio_nrfx_manage_callback+0xac>
	return list->head;
    400a:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    400c:	6023      	str	r3, [r4, #0]
	list->head = node;
    400e:	606c      	str	r4, [r5, #4]
	return list->tail;
    4010:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    4012:	b10b      	cbz	r3, 4018 <gpio_nrfx_manage_callback+0xa0>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    4014:	2000      	movs	r0, #0
    4016:	e006      	b.n	4026 <gpio_nrfx_manage_callback+0xae>
	list->tail = node;
    4018:	607c      	str	r4, [r7, #4]
    401a:	2000      	movs	r0, #0
}
    401c:	e003      	b.n	4026 <gpio_nrfx_manage_callback+0xae>
				return -EINVAL;
    401e:	f06f 0015 	mvn.w	r0, #21
    4022:	e000      	b.n	4026 <gpio_nrfx_manage_callback+0xae>
	return 0;
    4024:	2000      	movs	r0, #0
}
    4026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    402a:	bf00      	nop
    402c:	0000c234 	.word	0x0000c234
    4030:	0000c264 	.word	0x0000c264
    4034:	0000b180 	.word	0x0000b180
    4038:	0000c270 	.word	0x0000c270
    403c:	0000c280 	.word	0x0000c280
    4040:	0000c294 	.word	0x0000c294

00004044 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    4044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    4048:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    404c:	0940      	lsrs	r0, r0, #5
    404e:	f7ff ff85 	bl	3f5c <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    4052:	b380      	cbz	r0, 40b6 <nrfx_gpio_handler+0x72>
    4054:	4607      	mov	r7, r0
	return port->data;
    4056:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    4058:	2601      	movs	r6, #1
    405a:	40a6      	lsls	r6, r4
	return list->head;
    405c:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    405e:	b11c      	cbz	r4, 4068 <nrfx_gpio_handler+0x24>
    4060:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    4062:	b17c      	cbz	r4, 4084 <nrfx_gpio_handler+0x40>
	return node->next;
    4064:	6825      	ldr	r5, [r4, #0]
    4066:	e00d      	b.n	4084 <nrfx_gpio_handler+0x40>
    4068:	4625      	mov	r5, r4
    406a:	e00b      	b.n	4084 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    406c:	6863      	ldr	r3, [r4, #4]
    406e:	68a2      	ldr	r2, [r4, #8]
    4070:	4032      	ands	r2, r6
    4072:	4621      	mov	r1, r4
    4074:	4638      	mov	r0, r7
    4076:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4078:	b1dd      	cbz	r5, 40b2 <nrfx_gpio_handler+0x6e>
    407a:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    407c:	b105      	cbz	r5, 4080 <nrfx_gpio_handler+0x3c>
	return node->next;
    407e:	682b      	ldr	r3, [r5, #0]
    4080:	462c      	mov	r4, r5
    4082:	461d      	mov	r5, r3
    4084:	b1bc      	cbz	r4, 40b6 <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    4086:	68a3      	ldr	r3, [r4, #8]
    4088:	421e      	tst	r6, r3
    408a:	d0f5      	beq.n	4078 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    408c:	6863      	ldr	r3, [r4, #4]
    408e:	2b00      	cmp	r3, #0
    4090:	d1ec      	bne.n	406c <nrfx_gpio_handler+0x28>
    4092:	f8df 8028 	ldr.w	r8, [pc, #40]	; 40bc <nrfx_gpio_handler+0x78>
    4096:	2345      	movs	r3, #69	; 0x45
    4098:	4642      	mov	r2, r8
    409a:	4909      	ldr	r1, [pc, #36]	; (40c0 <nrfx_gpio_handler+0x7c>)
    409c:	4809      	ldr	r0, [pc, #36]	; (40c4 <nrfx_gpio_handler+0x80>)
    409e:	f005 fee8 	bl	9e72 <assert_print>
    40a2:	4809      	ldr	r0, [pc, #36]	; (40c8 <nrfx_gpio_handler+0x84>)
    40a4:	f005 fee5 	bl	9e72 <assert_print>
    40a8:	2145      	movs	r1, #69	; 0x45
    40aa:	4640      	mov	r0, r8
    40ac:	f005 feda 	bl	9e64 <assert_post_action>
    40b0:	e7dc      	b.n	406c <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    40b2:	462b      	mov	r3, r5
    40b4:	e7e4      	b.n	4080 <nrfx_gpio_handler+0x3c>
}
    40b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40ba:	bf00      	nop
    40bc:	0000c234 	.word	0x0000c234
    40c0:	0000c2ac 	.word	0x0000c2ac
    40c4:	0000b180 	.word	0x0000b180
    40c8:	0000c294 	.word	0x0000c294

000040cc <gpio_nrfx_pin_interrupt_configure>:
{
    40cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    40ce:	b085      	sub	sp, #20
    40d0:	460e      	mov	r6, r1
    40d2:	4619      	mov	r1, r3
	return port->config;
    40d4:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    40d6:	7b1b      	ldrb	r3, [r3, #12]
    40d8:	f006 041f 	and.w	r4, r6, #31
    40dc:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    40e0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    40e4:	d022      	beq.n	412c <gpio_nrfx_pin_interrupt_configure+0x60>
    40e6:	4607      	mov	r7, r0
    40e8:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    40ea:	2300      	movs	r3, #0
    40ec:	9302      	str	r3, [sp, #8]
    40ee:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    40f0:	4610      	mov	r0, r2
    40f2:	f006 f9ed 	bl	a4d0 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    40f6:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    40fa:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    40fc:	6899      	ldr	r1, [r3, #8]
    40fe:	40f1      	lsrs	r1, r6
    4100:	f011 0101 	ands.w	r1, r1, #1
    4104:	d102      	bne.n	410c <gpio_nrfx_pin_interrupt_configure+0x40>
    4106:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    410a:	d014      	beq.n	4136 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    410c:	2300      	movs	r3, #0
    410e:	aa02      	add	r2, sp, #8
    4110:	4619      	mov	r1, r3
    4112:	4620      	mov	r0, r4
    4114:	f002 f802 	bl	611c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4118:	4b32      	ldr	r3, [pc, #200]	; (41e4 <__data_size+0xa0>)
    411a:	4298      	cmp	r0, r3
    411c:	d15f      	bne.n	41de <__data_size+0x9a>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    411e:	2101      	movs	r1, #1
    4120:	4620      	mov	r0, r4
    4122:	f002 fa5f 	bl	65e4 <nrfx_gpiote_trigger_enable>
	return 0;
    4126:	2000      	movs	r0, #0
}
    4128:	b005      	add	sp, #20
    412a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    412c:	4620      	mov	r0, r4
    412e:	f002 fb65 	bl	67fc <nrfx_gpiote_trigger_disable>
		return 0;
    4132:	2000      	movs	r0, #0
    4134:	e7f8      	b.n	4128 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    4136:	0963      	lsrs	r3, r4, #5
    4138:	d01f      	beq.n	417a <__data_size+0x36>
    413a:	2b01      	cmp	r3, #1
    413c:	d101      	bne.n	4142 <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    413e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    4142:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4146:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4148:	f011 0f01 	tst.w	r1, #1
    414c:	d018      	beq.n	4180 <__data_size+0x3c>
    *p_pin = pin_number & 0x1F;
    414e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4152:	0963      	lsrs	r3, r4, #5
    4154:	d022      	beq.n	419c <__data_size+0x58>
    4156:	2b01      	cmp	r3, #1
    4158:	d023      	beq.n	41a2 <__data_size+0x5e>
            NRFX_ASSERT(0);
    415a:	4e23      	ldr	r6, [pc, #140]	; (41e8 <__data_size+0xa4>)
    415c:	f240 232e 	movw	r3, #558	; 0x22e
    4160:	4632      	mov	r2, r6
    4162:	4922      	ldr	r1, [pc, #136]	; (41ec <__data_size+0xa8>)
    4164:	4822      	ldr	r0, [pc, #136]	; (41f0 <__data_size+0xac>)
    4166:	f005 fe84 	bl	9e72 <assert_print>
    416a:	f240 212e 	movw	r1, #558	; 0x22e
    416e:	4630      	mov	r0, r6
    4170:	f005 fe78 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    4174:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4178:	e014      	b.n	41a4 <__data_size+0x60>
            mask = P0_FEATURE_PINS_PRESENT;
    417a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    417e:	e7e0      	b.n	4142 <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4180:	4d19      	ldr	r5, [pc, #100]	; (41e8 <__data_size+0xa4>)
    4182:	f240 2329 	movw	r3, #553	; 0x229
    4186:	462a      	mov	r2, r5
    4188:	491a      	ldr	r1, [pc, #104]	; (41f4 <__data_size+0xb0>)
    418a:	4819      	ldr	r0, [pc, #100]	; (41f0 <__data_size+0xac>)
    418c:	f005 fe71 	bl	9e72 <assert_print>
    4190:	f240 2129 	movw	r1, #553	; 0x229
    4194:	4628      	mov	r0, r5
    4196:	f005 fe65 	bl	9e64 <assert_post_action>
    419a:	e7d8      	b.n	414e <__data_size+0xa>
        case 0: return NRF_P0;
    419c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    41a0:	e000      	b.n	41a4 <__data_size+0x60>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    41a2:	4b15      	ldr	r3, [pc, #84]	; (41f8 <__data_size+0xb4>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    41a4:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    41a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    41ac:	f013 0f01 	tst.w	r3, #1
    41b0:	d1ac      	bne.n	410c <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    41b2:	f10d 0107 	add.w	r1, sp, #7
    41b6:	4620      	mov	r0, r4
    41b8:	f002 f9a4 	bl	6504 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    41bc:	4b0f      	ldr	r3, [pc, #60]	; (41fc <__data_size+0xb8>)
    41be:	4298      	cmp	r0, r3
    41c0:	d003      	beq.n	41ca <__data_size+0x86>
		trigger_config.p_in_channel = &ch;
    41c2:	f10d 0307 	add.w	r3, sp, #7
    41c6:	9303      	str	r3, [sp, #12]
    41c8:	e7a0      	b.n	410c <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    41ca:	f10d 0007 	add.w	r0, sp, #7
    41ce:	f002 fa01 	bl	65d4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    41d2:	4b04      	ldr	r3, [pc, #16]	; (41e4 <__data_size+0xa0>)
    41d4:	4298      	cmp	r0, r3
    41d6:	d0f4      	beq.n	41c2 <__data_size+0x7e>
				return -ENOMEM;
    41d8:	f06f 000b 	mvn.w	r0, #11
    41dc:	e7a4      	b.n	4128 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    41de:	f06f 0004 	mvn.w	r0, #4
    41e2:	e7a1      	b.n	4128 <gpio_nrfx_pin_interrupt_configure+0x5c>
    41e4:	0bad0000 	.word	0x0bad0000
    41e8:	0000c2b8 	.word	0x0000c2b8
    41ec:	0000b83c 	.word	0x0000b83c
    41f0:	0000b180 	.word	0x0000b180
    41f4:	0000c2ec 	.word	0x0000c2ec
    41f8:	50000300 	.word	0x50000300
    41fc:	0bad0004 	.word	0x0bad0004

00004200 <pin_uninit>:
{
    4200:	b530      	push	{r4, r5, lr}
    4202:	b083      	sub	sp, #12
    4204:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    4206:	f10d 0107 	add.w	r1, sp, #7
    420a:	f002 f97b 	bl	6504 <nrfx_gpiote_channel_get>
    420e:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    4210:	4620      	mov	r0, r4
    4212:	f002 fb5b 	bl	68cc <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    4216:	4b0b      	ldr	r3, [pc, #44]	; (4244 <pin_uninit+0x44>)
    4218:	4298      	cmp	r0, r3
    421a:	d10f      	bne.n	423c <pin_uninit+0x3c>
	if (free_ch) {
    421c:	429d      	cmp	r5, r3
    421e:	d005      	beq.n	422c <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4220:	4b08      	ldr	r3, [pc, #32]	; (4244 <pin_uninit+0x44>)
    4222:	4298      	cmp	r0, r3
    4224:	d107      	bne.n	4236 <pin_uninit+0x36>
    4226:	2000      	movs	r0, #0
}
    4228:	b003      	add	sp, #12
    422a:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    422c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4230:	f002 f9c8 	bl	65c4 <nrfx_gpiote_channel_free>
    4234:	e7f4      	b.n	4220 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4236:	f06f 0004 	mvn.w	r0, #4
    423a:	e7f5      	b.n	4228 <pin_uninit+0x28>
		return -EIO;
    423c:	f06f 0004 	mvn.w	r0, #4
    4240:	e7f2      	b.n	4228 <pin_uninit+0x28>
    4242:	bf00      	nop
    4244:	0bad0000 	.word	0x0bad0000

00004248 <gpio_nrfx_pin_configure>:
{
    4248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    424c:	b087      	sub	sp, #28
	return port->config;
    424e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4252:	f898 300c 	ldrb.w	r3, [r8, #12]
    4256:	f001 051f 	and.w	r5, r1, #31
    425a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    425e:	2a00      	cmp	r2, #0
    4260:	d044      	beq.n	42ec <gpio_nrfx_pin_configure+0xa4>
    4262:	460c      	mov	r4, r1
    4264:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4266:	2600      	movs	r6, #0
    4268:	9603      	str	r6, [sp, #12]
    426a:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    426c:	f10d 0117 	add.w	r1, sp, #23
    4270:	4620      	mov	r0, r4
    4272:	f002 f947 	bl	6504 <nrfx_gpiote_channel_get>
    4276:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4278:	4633      	mov	r3, r6
    427a:	aa03      	add	r2, sp, #12
    427c:	4631      	mov	r1, r6
    427e:	4628      	mov	r0, r5
    4280:	f001 ff4c 	bl	611c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4284:	4b30      	ldr	r3, [pc, #192]	; (4348 <gpio_nrfx_pin_configure+0x100>)
    4286:	4298      	cmp	r0, r3
    4288:	d15b      	bne.n	4342 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    428a:	4599      	cmp	r9, r3
    428c:	d036      	beq.n	42fc <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    428e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    4292:	d043      	beq.n	431c <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    4294:	f10d 0103 	add.w	r1, sp, #3
    4298:	4638      	mov	r0, r7
    429a:	f006 f8a0 	bl	a3de <get_drive>
		if (rv != 0) {
    429e:	4606      	mov	r6, r0
    42a0:	bb40      	cbnz	r0, 42f4 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    42a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    42a6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    42aa:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    42ae:	bf0c      	ite	eq
    42b0:	2301      	moveq	r3, #1
    42b2:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    42b4:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    42b8:	4638      	mov	r0, r7
    42ba:	f006 f8d6 	bl	a46a <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    42be:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    42c2:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    42c6:	d01e      	beq.n	4306 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    42c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    42cc:	2101      	movs	r1, #1
    42ce:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    42d2:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    42d6:	2200      	movs	r2, #0
    42d8:	a901      	add	r1, sp, #4
    42da:	4628      	mov	r0, r5
    42dc:	f002 f812 	bl	6304 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    42e0:	4b19      	ldr	r3, [pc, #100]	; (4348 <gpio_nrfx_pin_configure+0x100>)
    42e2:	4298      	cmp	r0, r3
    42e4:	d006      	beq.n	42f4 <gpio_nrfx_pin_configure+0xac>
    42e6:	f06f 0615 	mvn.w	r6, #21
    42ea:	e003      	b.n	42f4 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    42ec:	4628      	mov	r0, r5
    42ee:	f7ff ff87 	bl	4200 <pin_uninit>
    42f2:	4606      	mov	r6, r0
}
    42f4:	4630      	mov	r0, r6
    42f6:	b007      	add	sp, #28
    42f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    42fc:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4300:	f002 f960 	bl	65c4 <nrfx_gpiote_channel_free>
    4304:	e7c3      	b.n	428e <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4306:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    430a:	d0e4      	beq.n	42d6 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    430c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4310:	2301      	movs	r3, #1
    4312:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    4316:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    431a:	e7dc      	b.n	42d6 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    431c:	4638      	mov	r0, r7
    431e:	f006 f8a4 	bl	a46a <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    4322:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4326:	2300      	movs	r3, #0
    4328:	461a      	mov	r2, r3
    432a:	a902      	add	r1, sp, #8
    432c:	4628      	mov	r0, r5
    432e:	f001 fef5 	bl	611c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4332:	4b05      	ldr	r3, [pc, #20]	; (4348 <gpio_nrfx_pin_configure+0x100>)
    4334:	4298      	cmp	r0, r3
    4336:	d101      	bne.n	433c <gpio_nrfx_pin_configure+0xf4>
    4338:	2600      	movs	r6, #0
    433a:	e7db      	b.n	42f4 <gpio_nrfx_pin_configure+0xac>
    433c:	f06f 0615 	mvn.w	r6, #21
    4340:	e7d8      	b.n	42f4 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    4342:	f06f 0615 	mvn.w	r6, #21
    4346:	e7d5      	b.n	42f4 <gpio_nrfx_pin_configure+0xac>
    4348:	0bad0000 	.word	0x0bad0000

0000434c <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    434c:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    434e:	f002 f92f 	bl	65b0 <nrfx_gpiote_is_init>
    4352:	b108      	cbz	r0, 4358 <gpio_nrfx_init+0xc>
		return 0;
    4354:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4356:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    4358:	f002 f900 	bl	655c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    435c:	4b08      	ldr	r3, [pc, #32]	; (4380 <gpio_nrfx_init+0x34>)
    435e:	4298      	cmp	r0, r3
    4360:	d10a      	bne.n	4378 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4362:	2100      	movs	r1, #0
    4364:	4807      	ldr	r0, [pc, #28]	; (4384 <gpio_nrfx_init+0x38>)
    4366:	f002 f8c7 	bl	64f8 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    436a:	2200      	movs	r2, #0
    436c:	2105      	movs	r1, #5
    436e:	2006      	movs	r0, #6
    4370:	f7fe fca0 	bl	2cb4 <z_arm_irq_priority_set>
	return 0;
    4374:	2000      	movs	r0, #0
    4376:	e7ee      	b.n	4356 <gpio_nrfx_init+0xa>
		return -EIO;
    4378:	f06f 0004 	mvn.w	r0, #4
    437c:	e7eb      	b.n	4356 <gpio_nrfx_init+0xa>
    437e:	bf00      	nop
    4380:	0bad0000 	.word	0x0bad0000
    4384:	00004045 	.word	0x00004045

00004388 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    4388:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    438a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    438c:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    4390:	d06f      	beq.n	4472 <baudrate_set+0xea>
    4392:	d83a      	bhi.n	440a <baudrate_set+0x82>
    4394:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    4398:	d06e      	beq.n	4478 <baudrate_set+0xf0>
    439a:	d90a      	bls.n	43b2 <baudrate_set+0x2a>
    439c:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    43a0:	d075      	beq.n	448e <baudrate_set+0x106>
    43a2:	d924      	bls.n	43ee <baudrate_set+0x66>
    43a4:	f647 2312 	movw	r3, #31250	; 0x7a12
    43a8:	4299      	cmp	r1, r3
    43aa:	d12b      	bne.n	4404 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    43ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    43b0:	e013      	b.n	43da <baudrate_set+0x52>
	switch (baudrate) {
    43b2:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    43b6:	d061      	beq.n	447c <baudrate_set+0xf4>
    43b8:	d907      	bls.n	43ca <baudrate_set+0x42>
    43ba:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    43be:	d063      	beq.n	4488 <baudrate_set+0x100>
    43c0:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    43c4:	d110      	bne.n	43e8 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    43c6:	4b3c      	ldr	r3, [pc, #240]	; (44b8 <baudrate_set+0x130>)
    43c8:	e007      	b.n	43da <baudrate_set+0x52>
	switch (baudrate) {
    43ca:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    43ce:	d058      	beq.n	4482 <baudrate_set+0xfa>
    43d0:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    43d4:	d105      	bne.n	43e2 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    43d6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    43da:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    43de:	2000      	movs	r0, #0
    43e0:	4770      	bx	lr
	switch (baudrate) {
    43e2:	f06f 0015 	mvn.w	r0, #21
    43e6:	4770      	bx	lr
    43e8:	f06f 0015 	mvn.w	r0, #21
    43ec:	4770      	bx	lr
    43ee:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    43f2:	d04e      	beq.n	4492 <baudrate_set+0x10a>
    43f4:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    43f8:	d101      	bne.n	43fe <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    43fa:	4b30      	ldr	r3, [pc, #192]	; (44bc <baudrate_set+0x134>)
    43fc:	e7ed      	b.n	43da <baudrate_set+0x52>
	switch (baudrate) {
    43fe:	f06f 0015 	mvn.w	r0, #21
    4402:	4770      	bx	lr
    4404:	f06f 0015 	mvn.w	r0, #21
    4408:	4770      	bx	lr
    440a:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    440e:	d042      	beq.n	4496 <baudrate_set+0x10e>
    4410:	d909      	bls.n	4426 <baudrate_set+0x9e>
    4412:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    4416:	d046      	beq.n	44a6 <baudrate_set+0x11e>
    4418:	d91f      	bls.n	445a <baudrate_set+0xd2>
    441a:	4b29      	ldr	r3, [pc, #164]	; (44c0 <baudrate_set+0x138>)
    441c:	4299      	cmp	r1, r3
    441e:	d148      	bne.n	44b2 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    4420:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4424:	e7d9      	b.n	43da <baudrate_set+0x52>
	switch (baudrate) {
    4426:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    442a:	d037      	beq.n	449c <baudrate_set+0x114>
    442c:	d905      	bls.n	443a <baudrate_set+0xb2>
    442e:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    4432:	d10f      	bne.n	4454 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    4434:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    4438:	e7cf      	b.n	43da <baudrate_set+0x52>
	switch (baudrate) {
    443a:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    443e:	4299      	cmp	r1, r3
    4440:	d02e      	beq.n	44a0 <baudrate_set+0x118>
    4442:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    4446:	d102      	bne.n	444e <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    4448:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    444c:	e7c5      	b.n	43da <baudrate_set+0x52>
	switch (baudrate) {
    444e:	f06f 0015 	mvn.w	r0, #21
    4452:	4770      	bx	lr
    4454:	f06f 0015 	mvn.w	r0, #21
    4458:	4770      	bx	lr
    445a:	4b1a      	ldr	r3, [pc, #104]	; (44c4 <baudrate_set+0x13c>)
    445c:	4299      	cmp	r1, r3
    445e:	d025      	beq.n	44ac <baudrate_set+0x124>
    4460:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    4464:	d102      	bne.n	446c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    4466:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    446a:	e7b6      	b.n	43da <baudrate_set+0x52>
	switch (baudrate) {
    446c:	f06f 0015 	mvn.w	r0, #21
    4470:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    4472:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    4476:	e7b0      	b.n	43da <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4478:	4b13      	ldr	r3, [pc, #76]	; (44c8 <baudrate_set+0x140>)
    447a:	e7ae      	b.n	43da <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    447c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    4480:	e7ab      	b.n	43da <baudrate_set+0x52>
	switch (baudrate) {
    4482:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    4486:	e7a8      	b.n	43da <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4488:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    448c:	e7a5      	b.n	43da <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    448e:	4b0f      	ldr	r3, [pc, #60]	; (44cc <baudrate_set+0x144>)
    4490:	e7a3      	b.n	43da <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    4492:	4b0f      	ldr	r3, [pc, #60]	; (44d0 <baudrate_set+0x148>)
    4494:	e7a1      	b.n	43da <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4496:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    449a:	e79e      	b.n	43da <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    449c:	4b0d      	ldr	r3, [pc, #52]	; (44d4 <baudrate_set+0x14c>)
    449e:	e79c      	b.n	43da <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    44a0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    44a4:	e799      	b.n	43da <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    44a6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    44aa:	e796      	b.n	43da <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    44ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    44b0:	e793      	b.n	43da <baudrate_set+0x52>
	switch (baudrate) {
    44b2:	f06f 0015 	mvn.w	r0, #21
}
    44b6:	4770      	bx	lr
    44b8:	0013b000 	.word	0x0013b000
    44bc:	004ea000 	.word	0x004ea000
    44c0:	000f4240 	.word	0x000f4240
    44c4:	0003d090 	.word	0x0003d090
    44c8:	00275000 	.word	0x00275000
    44cc:	0075c000 	.word	0x0075c000
    44d0:	003af000 	.word	0x003af000
    44d4:	013a9000 	.word	0x013a9000

000044d8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    44d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44dc:	4605      	mov	r5, r0
    44de:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
    44e0:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    44e4:	f006 fb7e 	bl	abe4 <k_is_in_isr>
    44e8:	b920      	cbnz	r0, 44f4 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    44ea:	4b16      	ldr	r3, [pc, #88]	; (4544 <uarte_nrfx_poll_out+0x6c>)
    44ec:	781b      	ldrb	r3, [r3, #0]
    44ee:	b143      	cbz	r3, 4502 <uarte_nrfx_poll_out+0x2a>
    44f0:	2300      	movs	r3, #0
    44f2:	e000      	b.n	44f6 <uarte_nrfx_poll_out+0x1e>
    44f4:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    44f6:	b953      	cbnz	r3, 450e <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    44f8:	4628      	mov	r0, r5
    44fa:	f006 f8f2 	bl	a6e2 <wait_tx_ready>
    44fe:	4606      	mov	r6, r0
    4500:	e013      	b.n	452a <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4502:	2301      	movs	r3, #1
    4504:	e7f7      	b.n	44f6 <uarte_nrfx_poll_out+0x1e>
    4506:	f384 8811 	msr	BASEPRI, r4
    450a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    450e:	f04f 0320 	mov.w	r3, #32
    4512:	f3ef 8411 	mrs	r4, BASEPRI
    4516:	f383 8812 	msr	BASEPRI_MAX, r3
    451a:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    451e:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    4520:	4628      	mov	r0, r5
    4522:	f006 f890 	bl	a646 <is_tx_ready>
    4526:	2800      	cmp	r0, #0
    4528:	d0ed      	beq.n	4506 <uarte_nrfx_poll_out+0x2e>
	}

	data->char_out = c;
    452a:	4641      	mov	r1, r8
    452c:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
    4530:	2201      	movs	r2, #1
    4532:	4628      	mov	r0, r5
    4534:	f006 f8a1 	bl	a67a <tx_start>
	__asm__ volatile(
    4538:	f386 8811 	msr	BASEPRI, r6
    453c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    4540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4544:	20005156 	.word	0x20005156

00004548 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    4548:	b530      	push	{r4, r5, lr}
    454a:	b085      	sub	sp, #20
    454c:	4604      	mov	r4, r0
    454e:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4550:	f101 0012 	add.w	r0, r1, #18
    4554:	f002 fa46 	bl	69e4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4558:	4b11      	ldr	r3, [pc, #68]	; (45a0 <endtx_stoptx_ppi_init+0x58>)
    455a:	4298      	cmp	r0, r3
    455c:	d112      	bne.n	4584 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    455e:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4560:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    4564:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    4566:	4a0f      	ldr	r2, [pc, #60]	; (45a4 <endtx_stoptx_ppi_init+0x5c>)
    4568:	33a2      	adds	r3, #162	; 0xa2
    456a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    456e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4572:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4574:	7ca9      	ldrb	r1, [r5, #18]
    4576:	2301      	movs	r3, #1
    4578:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    457a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    457e:	2000      	movs	r0, #0
}
    4580:	b005      	add	sp, #20
    4582:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    4584:	4b08      	ldr	r3, [pc, #32]	; (45a8 <endtx_stoptx_ppi_init+0x60>)
    4586:	9302      	str	r3, [sp, #8]
    4588:	2000      	movs	r0, #0
    458a:	9001      	str	r0, [sp, #4]
    458c:	9000      	str	r0, [sp, #0]
    458e:	4603      	mov	r3, r0
    4590:	2201      	movs	r2, #1
    4592:	4906      	ldr	r1, [pc, #24]	; (45ac <endtx_stoptx_ppi_init+0x64>)
    4594:	f006 f8cc 	bl	a730 <z_log_msg2_runtime_create>
		return -EIO;
    4598:	f06f 0004 	mvn.w	r0, #4
    459c:	e7f0      	b.n	4580 <endtx_stoptx_ppi_init+0x38>
    459e:	bf00      	nop
    45a0:	0bad0000 	.word	0x0bad0000
    45a4:	4001f000 	.word	0x4001f000
    45a8:	0000c364 	.word	0x0000c364
    45ac:	0000afc0 	.word	0x0000afc0

000045b0 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    45b0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    45b4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    45b8:	4b01      	ldr	r3, [pc, #4]	; (45c0 <set_comparator+0x10>)
    45ba:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    45be:	4770      	bx	lr
    45c0:	40011000 	.word	0x40011000

000045c4 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    45c4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    45c8:	4b01      	ldr	r3, [pc, #4]	; (45d0 <get_comparator+0xc>)
    45ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    45ce:	4770      	bx	lr
    45d0:	40011000 	.word	0x40011000

000045d4 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    45d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    45d8:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    45da:	4a02      	ldr	r2, [pc, #8]	; (45e4 <event_enable+0x10>)
    45dc:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    45e0:	4770      	bx	lr
    45e2:	bf00      	nop
    45e4:	40011000 	.word	0x40011000

000045e8 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    45e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    45ec:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    45ee:	4a02      	ldr	r2, [pc, #8]	; (45f8 <event_disable+0x10>)
    45f0:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    45f4:	4770      	bx	lr
    45f6:	bf00      	nop
    45f8:	40011000 	.word	0x40011000

000045fc <counter>:
     return p_reg->COUNTER;
    45fc:	4b01      	ldr	r3, [pc, #4]	; (4604 <counter+0x8>)
    45fe:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    4602:	4770      	bx	lr
    4604:	40011000 	.word	0x40011000

00004608 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    4608:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    460a:	2301      	movs	r3, #1
    460c:	4083      	lsls	r3, r0
    460e:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4612:	4a10      	ldr	r2, [pc, #64]	; (4654 <compare_int_lock+0x4c>)
    4614:	f3bf 8f5b 	dmb	ish
    4618:	e852 1f00 	ldrex	r1, [r2]
    461c:	ea01 0e0c 	and.w	lr, r1, ip
    4620:	e842 e400 	strex	r4, lr, [r2]
    4624:	2c00      	cmp	r4, #0
    4626:	d1f7      	bne.n	4618 <compare_int_lock+0x10>
    4628:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    462c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4630:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    4634:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4638:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    463c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4640:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4644:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    4648:	420b      	tst	r3, r1
}
    464a:	bf14      	ite	ne
    464c:	2001      	movne	r0, #1
    464e:	2000      	moveq	r0, #0
    4650:	bd10      	pop	{r4, pc}
    4652:	bf00      	nop
    4654:	20004a60 	.word	0x20004a60

00004658 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    4658:	b570      	push	{r4, r5, r6, lr}
    465a:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    465c:	f006 f90a 	bl	a874 <full_int_lock>
    4660:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4662:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4666:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    4668:	4a17      	ldr	r2, [pc, #92]	; (46c8 <channel_processing_check_and_clear+0x70>)
    466a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    466e:	4213      	tst	r3, r2
    4670:	d105      	bne.n	467e <channel_processing_check_and_clear+0x26>
	bool result = false;
    4672:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    4674:	4628      	mov	r0, r5
    4676:	f006 f906 	bl	a886 <full_int_unlock>

	return result;
}
    467a:	4630      	mov	r0, r6
    467c:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    467e:	2301      	movs	r3, #1
    4680:	40a3      	lsls	r3, r4
    4682:	43db      	mvns	r3, r3
    4684:	4a11      	ldr	r2, [pc, #68]	; (46cc <channel_processing_check_and_clear+0x74>)
    4686:	f3bf 8f5b 	dmb	ish
    468a:	e852 1f00 	ldrex	r1, [r2]
    468e:	ea01 0003 	and.w	r0, r1, r3
    4692:	e842 0600 	strex	r6, r0, [r2]
    4696:	2e00      	cmp	r6, #0
    4698:	d1f7      	bne.n	468a <channel_processing_check_and_clear+0x32>
    469a:	f3bf 8f5b 	dmb	ish
    469e:	b959      	cbnz	r1, 46b8 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    46a0:	f104 0350 	add.w	r3, r4, #80	; 0x50
    46a4:	009b      	lsls	r3, r3, #2
    46a6:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    46a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    46ac:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    46b0:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    46b2:	b113      	cbz	r3, 46ba <channel_processing_check_and_clear+0x62>
    46b4:	2301      	movs	r3, #1
    46b6:	e000      	b.n	46ba <channel_processing_check_and_clear+0x62>
    46b8:	2301      	movs	r3, #1
		if (result) {
    46ba:	461e      	mov	r6, r3
    46bc:	2b00      	cmp	r3, #0
    46be:	d0d9      	beq.n	4674 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    46c0:	4620      	mov	r0, r4
    46c2:	f006 f8c8 	bl	a856 <event_clear>
    46c6:	e7d5      	b.n	4674 <channel_processing_check_and_clear+0x1c>
    46c8:	40011000 	.word	0x40011000
    46cc:	20004a5c 	.word	0x20004a5c

000046d0 <compare_int_unlock>:
	if (key) {
    46d0:	b901      	cbnz	r1, 46d4 <compare_int_unlock+0x4>
}
    46d2:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    46d4:	2301      	movs	r3, #1
    46d6:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    46d8:	4a11      	ldr	r2, [pc, #68]	; (4720 <compare_int_unlock+0x50>)
    46da:	f3bf 8f5b 	dmb	ish
    46de:	e852 1f00 	ldrex	r1, [r2]
    46e2:	4319      	orrs	r1, r3
    46e4:	e842 1c00 	strex	ip, r1, [r2]
    46e8:	f1bc 0f00 	cmp.w	ip, #0
    46ec:	d1f7      	bne.n	46de <compare_int_unlock+0xe>
    46ee:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    46f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    46f6:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    46f8:	4a0a      	ldr	r2, [pc, #40]	; (4724 <compare_int_unlock+0x54>)
    46fa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    46fe:	f3bf 8f5b 	dmb	ish
    4702:	4b09      	ldr	r3, [pc, #36]	; (4728 <compare_int_unlock+0x58>)
    4704:	681b      	ldr	r3, [r3, #0]
    4706:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    470a:	fa23 f000 	lsr.w	r0, r3, r0
    470e:	f010 0f01 	tst.w	r0, #1
    4712:	d0de      	beq.n	46d2 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4714:	4b05      	ldr	r3, [pc, #20]	; (472c <compare_int_unlock+0x5c>)
    4716:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    471a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    471e:	e7d8      	b.n	46d2 <compare_int_unlock+0x2>
    4720:	20004a60 	.word	0x20004a60
    4724:	40011000 	.word	0x40011000
    4728:	20004a5c 	.word	0x20004a5c
    472c:	e000e100 	.word	0xe000e100

00004730 <sys_clock_timeout_handler>:
{
    4730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4734:	4607      	mov	r7, r0
    4736:	4614      	mov	r4, r2
    4738:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    473a:	4610      	mov	r0, r2
    473c:	4619      	mov	r1, r3
    473e:	f006 f896 	bl	a86e <absolute_time_to_cc>
    4742:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4744:	4b15      	ldr	r3, [pc, #84]	; (479c <sys_clock_timeout_handler+0x6c>)
    4746:	681a      	ldr	r2, [r3, #0]
    4748:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    474a:	601c      	str	r4, [r3, #0]
    474c:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    474e:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    4752:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    4756:	d309      	bcc.n	476c <sys_clock_timeout_handler+0x3c>
	return false;
    4758:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    475a:	f004 fe79 	bl	9450 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    475e:	4638      	mov	r0, r7
    4760:	f7ff ff30 	bl	45c4 <get_comparator>
    4764:	42a8      	cmp	r0, r5
    4766:	d00e      	beq.n	4786 <sys_clock_timeout_handler+0x56>
}
    4768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    476c:	4b0c      	ldr	r3, [pc, #48]	; (47a0 <sys_clock_timeout_handler+0x70>)
    476e:	681b      	ldr	r3, [r3, #0]
    4770:	0a1a      	lsrs	r2, r3, #8
    4772:	061b      	lsls	r3, r3, #24
    4774:	eb15 0803 	adds.w	r8, r5, r3
    4778:	f142 0900 	adc.w	r9, r2, #0
    477c:	4b09      	ldr	r3, [pc, #36]	; (47a4 <sys_clock_timeout_handler+0x74>)
    477e:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    4782:	2401      	movs	r4, #1
    4784:	e7e9      	b.n	475a <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    4786:	b11c      	cbz	r4, 4790 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    4788:	4638      	mov	r0, r7
    478a:	f7ff ff23 	bl	45d4 <event_enable>
}
    478e:	e7eb      	b.n	4768 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    4790:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    4794:	4638      	mov	r0, r7
    4796:	f7ff ff0b 	bl	45b0 <set_comparator>
    479a:	e7f5      	b.n	4788 <sys_clock_timeout_handler+0x58>
    479c:	20004288 	.word	0x20004288
    47a0:	20004a64 	.word	0x20004a64
    47a4:	20004270 	.word	0x20004270

000047a8 <z_nrf_rtc_timer_read>:
{
    47a8:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    47aa:	4b0d      	ldr	r3, [pc, #52]	; (47e0 <z_nrf_rtc_timer_read+0x38>)
    47ac:	681c      	ldr	r4, [r3, #0]
    47ae:	0a25      	lsrs	r5, r4, #8
    47b0:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    47b2:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    47b6:	f7ff ff21 	bl	45fc <counter>
    47ba:	4603      	mov	r3, r0
	val += cntr;
    47bc:	1900      	adds	r0, r0, r4
    47be:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    47c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    47c6:	d20a      	bcs.n	47de <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    47c8:	4b06      	ldr	r3, [pc, #24]	; (47e4 <z_nrf_rtc_timer_read+0x3c>)
    47ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    47ce:	4290      	cmp	r0, r2
    47d0:	eb71 0303 	sbcs.w	r3, r1, r3
    47d4:	d203      	bcs.n	47de <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    47d6:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    47da:	f141 0100 	adc.w	r1, r1, #0
}
    47de:	bd38      	pop	{r3, r4, r5, pc}
    47e0:	20004a64 	.word	0x20004a64
    47e4:	20004270 	.word	0x20004270

000047e8 <compare_set_nolocks>:
{
    47e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47ea:	4606      	mov	r6, r0
    47ec:	4614      	mov	r4, r2
    47ee:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    47f0:	4610      	mov	r0, r2
    47f2:	4619      	mov	r1, r3
    47f4:	f006 f83b 	bl	a86e <absolute_time_to_cc>
    47f8:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    47fa:	f7ff ffd5 	bl	47a8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    47fe:	42a0      	cmp	r0, r4
    4800:	eb71 0305 	sbcs.w	r3, r1, r5
    4804:	d21d      	bcs.n	4842 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    4806:	1a23      	subs	r3, r4, r0
    4808:	eb65 0101 	sbc.w	r1, r5, r1
    480c:	4a1b      	ldr	r2, [pc, #108]	; (487c <compare_set_nolocks+0x94>)
    480e:	4293      	cmp	r3, r2
    4810:	f171 0300 	sbcs.w	r3, r1, #0
    4814:	d22f      	bcs.n	4876 <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    4816:	4b1a      	ldr	r3, [pc, #104]	; (4880 <compare_set_nolocks+0x98>)
    4818:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    481c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    4820:	42ab      	cmp	r3, r5
    4822:	bf08      	it	eq
    4824:	42a2      	cmpeq	r2, r4
    4826:	d01a      	beq.n	485e <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    4828:	4639      	mov	r1, r7
    482a:	4630      	mov	r0, r6
    482c:	f006 f830 	bl	a890 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    4830:	4639      	mov	r1, r7
    4832:	f006 f80c 	bl	a84e <counter_sub>
    4836:	1900      	adds	r0, r0, r4
    4838:	f145 0300 	adc.w	r3, r5, #0
    483c:	4604      	mov	r4, r0
    483e:	461d      	mov	r5, r3
    4840:	e00d      	b.n	485e <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    4842:	2301      	movs	r3, #1
    4844:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4846:	4a0f      	ldr	r2, [pc, #60]	; (4884 <compare_set_nolocks+0x9c>)
    4848:	f3bf 8f5b 	dmb	ish
    484c:	e852 1f00 	ldrex	r1, [r2]
    4850:	4319      	orrs	r1, r3
    4852:	e842 1000 	strex	r0, r1, [r2]
    4856:	2800      	cmp	r0, #0
    4858:	d1f8      	bne.n	484c <compare_set_nolocks+0x64>
    485a:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    485e:	4b08      	ldr	r3, [pc, #32]	; (4880 <compare_set_nolocks+0x98>)
    4860:	0132      	lsls	r2, r6, #4
    4862:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    4866:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    486a:	9906      	ldr	r1, [sp, #24]
    486c:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    486e:	9b07      	ldr	r3, [sp, #28]
    4870:	6073      	str	r3, [r6, #4]
	return ret;
    4872:	2000      	movs	r0, #0
}
    4874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    4876:	f06f 0015 	mvn.w	r0, #21
    487a:	e7fb      	b.n	4874 <compare_set_nolocks+0x8c>
    487c:	01000001 	.word	0x01000001
    4880:	20004278 	.word	0x20004278
    4884:	20004a5c 	.word	0x20004a5c

00004888 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    4888:	b530      	push	{r4, r5, lr}
    488a:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    488c:	2300      	movs	r3, #0
    488e:	4a1d      	ldr	r2, [pc, #116]	; (4904 <sys_clock_driver_init+0x7c>)
    4890:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4894:	2b00      	cmp	r3, #0
    4896:	dd24      	ble.n	48e2 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    4898:	4c1a      	ldr	r4, [pc, #104]	; (4904 <sys_clock_driver_init+0x7c>)
    489a:	2502      	movs	r5, #2
    489c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48a0:	4b19      	ldr	r3, [pc, #100]	; (4908 <sys_clock_driver_init+0x80>)
    48a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    48a6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    48aa:	2200      	movs	r2, #0
    48ac:	2101      	movs	r1, #1
    48ae:	2011      	movs	r0, #17
    48b0:	f7fe fa00 	bl	2cb4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    48b4:	2011      	movs	r0, #17
    48b6:	f7fe f9e1 	bl	2c7c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    48ba:	2301      	movs	r3, #1
    48bc:	60a3      	str	r3, [r4, #8]
    48be:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    48c0:	4a12      	ldr	r2, [pc, #72]	; (490c <sys_clock_driver_init+0x84>)
    48c2:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    48c4:	2400      	movs	r4, #0
    48c6:	9401      	str	r4, [sp, #4]
    48c8:	4b11      	ldr	r3, [pc, #68]	; (4910 <sys_clock_driver_init+0x88>)
    48ca:	9300      	str	r3, [sp, #0]
    48cc:	4a11      	ldr	r2, [pc, #68]	; (4914 <sys_clock_driver_init+0x8c>)
    48ce:	2300      	movs	r3, #0
    48d0:	4620      	mov	r0, r4
    48d2:	f006 f818 	bl	a906 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    48d6:	4628      	mov	r0, r5
    48d8:	f7ff fabc 	bl	3e54 <z_nrf_clock_control_lf_on>

	return 0;
}
    48dc:	4620      	mov	r0, r4
    48de:	b003      	add	sp, #12
    48e0:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    48e2:	4a0d      	ldr	r2, [pc, #52]	; (4918 <sys_clock_driver_init+0x90>)
    48e4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    48e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    48ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    48f0:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    48f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    48f8:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    48fa:	4902      	ldr	r1, [pc, #8]	; (4904 <sys_clock_driver_init+0x7c>)
    48fc:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4900:	3301      	adds	r3, #1
    4902:	e7c7      	b.n	4894 <sys_clock_driver_init+0xc>
    4904:	40011000 	.word	0x40011000
    4908:	e000e100 	.word	0xe000e100
    490c:	20004a60 	.word	0x20004a60
    4910:	00004731 	.word	0x00004731
    4914:	007fffff 	.word	0x007fffff
    4918:	20004278 	.word	0x20004278

0000491c <process_channel>:
{
    491c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4920:	b082      	sub	sp, #8
    4922:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    4924:	f7ff fe98 	bl	4658 <channel_processing_check_and_clear>
    4928:	b910      	cbnz	r0, 4930 <process_channel+0x14>
}
    492a:	b002      	add	sp, #8
    492c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    4930:	f7ff ff3a 	bl	47a8 <z_nrf_rtc_timer_read>
    4934:	4682      	mov	sl, r0
    4936:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    4938:	f005 ff9c 	bl	a874 <full_int_lock>
    493c:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    493e:	4b13      	ldr	r3, [pc, #76]	; (498c <process_channel+0x70>)
    4940:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4944:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    4948:	45c2      	cmp	sl, r8
    494a:	eb76 0309 	sbcs.w	r3, r6, r9
    494e:	d20b      	bcs.n	4968 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4950:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    4952:	4628      	mov	r0, r5
    4954:	f005 ff97 	bl	a886 <full_int_unlock>
		if (handler) {
    4958:	2e00      	cmp	r6, #0
    495a:	d0e6      	beq.n	492a <process_channel+0xe>
			handler(chan, expire_time, user_context);
    495c:	9700      	str	r7, [sp, #0]
    495e:	4642      	mov	r2, r8
    4960:	464b      	mov	r3, r9
    4962:	4620      	mov	r0, r4
    4964:	47b0      	blx	r6
}
    4966:	e7e0      	b.n	492a <process_channel+0xe>
			handler = cc_data[chan].callback;
    4968:	4a08      	ldr	r2, [pc, #32]	; (498c <process_channel+0x70>)
    496a:	0123      	lsls	r3, r4, #4
    496c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    4970:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    4972:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    4974:	2000      	movs	r0, #0
    4976:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    497c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4980:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    4984:	4620      	mov	r0, r4
    4986:	f7ff fe2f 	bl	45e8 <event_disable>
    498a:	e7e2      	b.n	4952 <process_channel+0x36>
    498c:	20004278 	.word	0x20004278

00004990 <rtc_nrf_isr>:
{
    4990:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    4992:	4b0e      	ldr	r3, [pc, #56]	; (49cc <rtc_nrf_isr+0x3c>)
    4994:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4998:	f013 0f02 	tst.w	r3, #2
    499c:	d00d      	beq.n	49ba <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    499e:	4b0b      	ldr	r3, [pc, #44]	; (49cc <rtc_nrf_isr+0x3c>)
    49a0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    49a4:	b14b      	cbz	r3, 49ba <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    49a6:	4b09      	ldr	r3, [pc, #36]	; (49cc <rtc_nrf_isr+0x3c>)
    49a8:	2200      	movs	r2, #0
    49aa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    49ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    49b2:	4a07      	ldr	r2, [pc, #28]	; (49d0 <rtc_nrf_isr+0x40>)
    49b4:	6813      	ldr	r3, [r2, #0]
    49b6:	3301      	adds	r3, #1
    49b8:	6013      	str	r3, [r2, #0]
{
    49ba:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    49bc:	2c00      	cmp	r4, #0
    49be:	dd00      	ble.n	49c2 <rtc_nrf_isr+0x32>
}
    49c0:	bd10      	pop	{r4, pc}
		process_channel(chan);
    49c2:	4620      	mov	r0, r4
    49c4:	f7ff ffaa 	bl	491c <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    49c8:	3401      	adds	r4, #1
    49ca:	e7f7      	b.n	49bc <rtc_nrf_isr+0x2c>
    49cc:	40011000 	.word	0x40011000
    49d0:	20004a64 	.word	0x20004a64

000049d4 <sys_clock_set_timeout>:
{
    49d4:	b510      	push	{r4, lr}
    49d6:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    49d8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    49dc:	d006      	beq.n	49ec <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    49de:	2801      	cmp	r0, #1
    49e0:	dd06      	ble.n	49f0 <sys_clock_set_timeout+0x1c>
    49e2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    49e6:	da05      	bge.n	49f4 <sys_clock_set_timeout+0x20>
    49e8:	1e44      	subs	r4, r0, #1
    49ea:	e004      	b.n	49f6 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    49ec:	480f      	ldr	r0, [pc, #60]	; (4a2c <sys_clock_set_timeout+0x58>)
    49ee:	e7f8      	b.n	49e2 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    49f0:	2400      	movs	r4, #0
    49f2:	e000      	b.n	49f6 <sys_clock_set_timeout+0x22>
    49f4:	4c0d      	ldr	r4, [pc, #52]	; (4a2c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    49f6:	f7ff fed7 	bl	47a8 <z_nrf_rtc_timer_read>
    49fa:	4b0d      	ldr	r3, [pc, #52]	; (4a30 <sys_clock_set_timeout+0x5c>)
    49fc:	6819      	ldr	r1, [r3, #0]
    49fe:	685b      	ldr	r3, [r3, #4]
    4a00:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    4a02:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4a06:	d300      	bcc.n	4a0a <sys_clock_set_timeout+0x36>
		ticks = 0;
    4a08:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4a0a:	4420      	add	r0, r4
    4a0c:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    4a0e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    4a12:	d300      	bcc.n	4a16 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    4a14:	4a05      	ldr	r2, [pc, #20]	; (4a2c <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    4a16:	2000      	movs	r0, #0
    4a18:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4a1a:	9001      	str	r0, [sp, #4]
    4a1c:	4905      	ldr	r1, [pc, #20]	; (4a34 <sys_clock_set_timeout+0x60>)
    4a1e:	9100      	str	r1, [sp, #0]
    4a20:	f143 0300 	adc.w	r3, r3, #0
    4a24:	f005 ff6f 	bl	a906 <compare_set>
}
    4a28:	b002      	add	sp, #8
    4a2a:	bd10      	pop	{r4, pc}
    4a2c:	007fffff 	.word	0x007fffff
    4a30:	20004288 	.word	0x20004288
    4a34:	00004731 	.word	0x00004731

00004a38 <sys_clock_elapsed>:
{
    4a38:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4a3a:	f7ff feb5 	bl	47a8 <z_nrf_rtc_timer_read>
    4a3e:	4b02      	ldr	r3, [pc, #8]	; (4a48 <sys_clock_elapsed+0x10>)
    4a40:	681b      	ldr	r3, [r3, #0]
}
    4a42:	1ac0      	subs	r0, r0, r3
    4a44:	bd08      	pop	{r3, pc}
    4a46:	bf00      	nop
    4a48:	20004288 	.word	0x20004288

00004a4c <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    4a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4a50:	460c      	mov	r4, r1
    4a52:	4691      	mov	r9, r2
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    4a54:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    4a58:	d002      	beq.n	4a60 <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4a5a:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    4a5e:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    4a60:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    4a64:	f3c0 1881 	ubfx	r8, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    4a68:	f3c0 2703 	ubfx	r7, r0, #8, #4
    uint32_t port = pin_number >> 5;
    4a6c:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    4a70:	f010 0f20 	tst.w	r0, #32
    4a74:	d01d      	beq.n	4ab2 <nrf_pin_configure+0x66>
    4a76:	b1fb      	cbz	r3, 4ab8 <nrf_pin_configure+0x6c>
            mask = P1_FEATURE_PINS_PRESENT;
    4a78:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4a7c:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4a80:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4a82:	f013 0f01 	tst.w	r3, #1
    4a86:	d019      	beq.n	4abc <nrf_pin_configure+0x70>
    *p_pin = pin_number & 0x1F;
    4a88:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4a8c:	096d      	lsrs	r5, r5, #5
    4a8e:	d023      	beq.n	4ad8 <nrf_pin_configure+0x8c>
    4a90:	bb2d      	cbnz	r5, 4ade <nrf_pin_configure+0x92>
            NRFX_ASSERT(0);
    4a92:	4d19      	ldr	r5, [pc, #100]	; (4af8 <nrf_pin_configure+0xac>)
    4a94:	f240 232e 	movw	r3, #558	; 0x22e
    4a98:	462a      	mov	r2, r5
    4a9a:	4918      	ldr	r1, [pc, #96]	; (4afc <nrf_pin_configure+0xb0>)
    4a9c:	4818      	ldr	r0, [pc, #96]	; (4b00 <nrf_pin_configure+0xb4>)
    4a9e:	f005 f9e8 	bl	9e72 <assert_print>
    4aa2:	f240 212e 	movw	r1, #558	; 0x22e
    4aa6:	4628      	mov	r0, r5
    4aa8:	f005 f9dc 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    4aac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4ab0:	e016      	b.n	4ae0 <nrf_pin_configure+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    4ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4ab6:	e7e1      	b.n	4a7c <nrf_pin_configure+0x30>
    switch (port)
    4ab8:	2300      	movs	r3, #0
    4aba:	e7df      	b.n	4a7c <nrf_pin_configure+0x30>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4abc:	4e0e      	ldr	r6, [pc, #56]	; (4af8 <nrf_pin_configure+0xac>)
    4abe:	f240 2329 	movw	r3, #553	; 0x229
    4ac2:	4632      	mov	r2, r6
    4ac4:	490f      	ldr	r1, [pc, #60]	; (4b04 <nrf_pin_configure+0xb8>)
    4ac6:	480e      	ldr	r0, [pc, #56]	; (4b00 <nrf_pin_configure+0xb4>)
    4ac8:	f005 f9d3 	bl	9e72 <assert_print>
    4acc:	f240 2129 	movw	r1, #553	; 0x229
    4ad0:	4630      	mov	r0, r6
    4ad2:	f005 f9c7 	bl	9e64 <assert_post_action>
    4ad6:	e7d7      	b.n	4a88 <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
    4ad8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4adc:	e000      	b.n	4ae0 <nrf_pin_configure+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4ade:	4b0a      	ldr	r3, [pc, #40]	; (4b08 <nrf_pin_configure+0xbc>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4ae0:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    4ae4:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4ae8:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    4aec:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    4af0:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
}
    4af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4af8:	0000c2b8 	.word	0x0000c2b8
    4afc:	0000b83c 	.word	0x0000b83c
    4b00:	0000b180 	.word	0x0000b180
    4b04:	0000c2ec 	.word	0x0000c2ec
    4b08:	50000300 	.word	0x50000300

00004b0c <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    4b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b10:	4605      	mov	r5, r0
    4b12:	460e      	mov	r6, r1
    4b14:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4b16:	2400      	movs	r4, #0
    4b18:	e04e      	b.n	4bb8 <pinctrl_configure_pins+0xac>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    4b1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4b1e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    4b22:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4b26:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    4b2a:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    4b2e:	f013 0f20 	tst.w	r3, #32
    4b32:	d01f      	beq.n	4b74 <pinctrl_configure_pins+0x68>
    4b34:	b109      	cbz	r1, 4b3a <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    4b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    4b3a:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4b3e:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4b40:	f012 0f01 	tst.w	r2, #1
    4b44:	d019      	beq.n	4b7a <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    4b46:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4b4a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4b4e:	d023      	beq.n	4b98 <pinctrl_configure_pins+0x8c>
    4b50:	bb2b      	cbnz	r3, 4b9e <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    4b52:	f8df 9344 	ldr.w	r9, [pc, #836]	; 4e98 <pinctrl_configure_pins+0x38c>
    4b56:	f240 232e 	movw	r3, #558	; 0x22e
    4b5a:	464a      	mov	r2, r9
    4b5c:	49cf      	ldr	r1, [pc, #828]	; (4e9c <pinctrl_configure_pins+0x390>)
    4b5e:	48d0      	ldr	r0, [pc, #832]	; (4ea0 <pinctrl_configure_pins+0x394>)
    4b60:	f005 f987 	bl	9e72 <assert_print>
    4b64:	f240 212e 	movw	r1, #558	; 0x22e
    4b68:	4648      	mov	r0, r9
    4b6a:	f005 f97b 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    4b6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4b72:	e015      	b.n	4ba0 <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    4b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4b78:	e7df      	b.n	4b3a <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4b7a:	f8df a31c 	ldr.w	sl, [pc, #796]	; 4e98 <pinctrl_configure_pins+0x38c>
    4b7e:	f240 2329 	movw	r3, #553	; 0x229
    4b82:	4652      	mov	r2, sl
    4b84:	49c7      	ldr	r1, [pc, #796]	; (4ea4 <pinctrl_configure_pins+0x398>)
    4b86:	48c6      	ldr	r0, [pc, #792]	; (4ea0 <pinctrl_configure_pins+0x394>)
    4b88:	f005 f973 	bl	9e72 <assert_print>
    4b8c:	f240 2129 	movw	r1, #553	; 0x229
    4b90:	4650      	mov	r0, sl
    4b92:	f005 f967 	bl	9e64 <assert_post_action>
    4b96:	e7d6      	b.n	4b46 <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    4b98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4b9c:	e000      	b.n	4ba0 <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4b9e:	4ac2      	ldr	r2, [pc, #776]	; (4ea8 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4ba0:	2101      	movs	r1, #1
    4ba2:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    4ba6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4baa:	460a      	mov	r2, r1
    4bac:	f855 0008 	ldr.w	r0, [r5, r8]
    4bb0:	f7ff ff4c 	bl	4a4c <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4bb4:	3401      	adds	r4, #1
    4bb6:	b2e4      	uxtb	r4, r4
    4bb8:	42b4      	cmp	r4, r6
    4bba:	f080 841e 	bcs.w	53fa <pinctrl_configure_pins+0x8ee>
		switch (NRF_GET_FUN(pins[i])) {
    4bbe:	ea4f 0884 	mov.w	r8, r4, lsl #2
    4bc2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4bc6:	0c1a      	lsrs	r2, r3, #16
    4bc8:	2a22      	cmp	r2, #34	; 0x22
    4bca:	f200 8418 	bhi.w	53fe <pinctrl_configure_pins+0x8f2>
    4bce:	a101      	add	r1, pc, #4	; (adr r1, 4bd4 <pinctrl_configure_pins+0xc8>)
    4bd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4bd4:	00004b1b 	.word	0x00004b1b
    4bd8:	00004c61 	.word	0x00004c61
    4bdc:	00004c77 	.word	0x00004c77
    4be0:	00004d17 	.word	0x00004d17
    4be4:	00004d2d 	.word	0x00004d2d
    4be8:	00004dcd 	.word	0x00004dcd
    4bec:	00004e6d 	.word	0x00004e6d
    4bf0:	000053ff 	.word	0x000053ff
    4bf4:	000053ff 	.word	0x000053ff
    4bf8:	000053ff 	.word	0x000053ff
    4bfc:	000053ff 	.word	0x000053ff
    4c00:	00004e83 	.word	0x00004e83
    4c04:	00004ead 	.word	0x00004ead
    4c08:	000053ff 	.word	0x000053ff
    4c0c:	000053ff 	.word	0x000053ff
    4c10:	000053ff 	.word	0x000053ff
    4c14:	000053ff 	.word	0x000053ff
    4c18:	000053ff 	.word	0x000053ff
    4c1c:	000053ff 	.word	0x000053ff
    4c20:	000053ff 	.word	0x000053ff
    4c24:	000053ff 	.word	0x000053ff
    4c28:	000053ff 	.word	0x000053ff
    4c2c:	00004ec3 	.word	0x00004ec3
    4c30:	00004fe9 	.word	0x00004fe9
    4c34:	0000510f 	.word	0x0000510f
    4c38:	0000524b 	.word	0x0000524b
    4c3c:	000053ff 	.word	0x000053ff
    4c40:	000053ff 	.word	0x000053ff
    4c44:	000053ff 	.word	0x000053ff
    4c48:	00005371 	.word	0x00005371
    4c4c:	00005387 	.word	0x00005387
    4c50:	0000539d 	.word	0x0000539d
    4c54:	000053b3 	.word	0x000053b3
    4c58:	000053cb 	.word	0x000053cb
    4c5c:	000053e3 	.word	0x000053e3
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    4c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4c64:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4c68:	2200      	movs	r2, #0
    4c6a:	4611      	mov	r1, r2
    4c6c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4c70:	f7ff feec 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4c74:	e79e      	b.n	4bb4 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    4c76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4c7a:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    4c7e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4c82:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    4c86:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    4c8a:	f013 0f20 	tst.w	r3, #32
    4c8e:	d01f      	beq.n	4cd0 <pinctrl_configure_pins+0x1c4>
    4c90:	b30a      	cbz	r2, 4cd6 <pinctrl_configure_pins+0x1ca>
            mask = P1_FEATURE_PINS_PRESENT;
    4c92:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4c96:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4c9a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4c9c:	f013 0f01 	tst.w	r3, #1
    4ca0:	d01b      	beq.n	4cda <pinctrl_configure_pins+0x1ce>
    *p_pin = pin_number & 0x1F;
    4ca2:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4ca6:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4caa:	d025      	beq.n	4cf8 <pinctrl_configure_pins+0x1ec>
    4cac:	bb3b      	cbnz	r3, 4cfe <pinctrl_configure_pins+0x1f2>
            NRFX_ASSERT(0);
    4cae:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 4e98 <pinctrl_configure_pins+0x38c>
    4cb2:	f240 232e 	movw	r3, #558	; 0x22e
    4cb6:	464a      	mov	r2, r9
    4cb8:	4978      	ldr	r1, [pc, #480]	; (4e9c <pinctrl_configure_pins+0x390>)
    4cba:	4879      	ldr	r0, [pc, #484]	; (4ea0 <pinctrl_configure_pins+0x394>)
    4cbc:	f005 f8d9 	bl	9e72 <assert_print>
    4cc0:	f240 212e 	movw	r1, #558	; 0x22e
    4cc4:	4648      	mov	r0, r9
    4cc6:	f005 f8cd 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    4cca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4cce:	e017      	b.n	4d00 <pinctrl_configure_pins+0x1f4>
            mask = P0_FEATURE_PINS_PRESENT;
    4cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4cd4:	e7df      	b.n	4c96 <pinctrl_configure_pins+0x18a>
    switch (port)
    4cd6:	2300      	movs	r3, #0
    4cd8:	e7dd      	b.n	4c96 <pinctrl_configure_pins+0x18a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4cda:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 4e98 <pinctrl_configure_pins+0x38c>
    4cde:	f240 2329 	movw	r3, #553	; 0x229
    4ce2:	4652      	mov	r2, sl
    4ce4:	496f      	ldr	r1, [pc, #444]	; (4ea4 <pinctrl_configure_pins+0x398>)
    4ce6:	486e      	ldr	r0, [pc, #440]	; (4ea0 <pinctrl_configure_pins+0x394>)
    4ce8:	f005 f8c3 	bl	9e72 <assert_print>
    4cec:	f240 2129 	movw	r1, #553	; 0x229
    4cf0:	4650      	mov	r0, sl
    4cf2:	f005 f8b7 	bl	9e64 <assert_post_action>
    4cf6:	e7d4      	b.n	4ca2 <pinctrl_configure_pins+0x196>
        case 0: return NRF_P0;
    4cf8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4cfc:	e000      	b.n	4d00 <pinctrl_configure_pins+0x1f4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4cfe:	4a6a      	ldr	r2, [pc, #424]	; (4ea8 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4d00:	2101      	movs	r1, #1
    4d02:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    4d06:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4d0a:	460a      	mov	r2, r1
    4d0c:	f855 0008 	ldr.w	r0, [r5, r8]
    4d10:	f7ff fe9c 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4d14:	e74e      	b.n	4bb4 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    4d16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4d1a:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4d1e:	2200      	movs	r2, #0
    4d20:	4611      	mov	r1, r2
    4d22:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4d26:	f7ff fe91 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4d2a:	e743      	b.n	4bb4 <pinctrl_configure_pins+0xa8>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    4d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4d30:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    4d34:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4d38:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    4d3c:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    4d40:	f013 0f20 	tst.w	r3, #32
    4d44:	d01f      	beq.n	4d86 <pinctrl_configure_pins+0x27a>
    4d46:	b30a      	cbz	r2, 4d8c <pinctrl_configure_pins+0x280>
            mask = P1_FEATURE_PINS_PRESENT;
    4d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4d4c:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4d50:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4d52:	f013 0f01 	tst.w	r3, #1
    4d56:	d01b      	beq.n	4d90 <pinctrl_configure_pins+0x284>
    *p_pin = pin_number & 0x1F;
    4d58:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d5c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4d60:	d025      	beq.n	4dae <pinctrl_configure_pins+0x2a2>
    4d62:	bb3b      	cbnz	r3, 4db4 <pinctrl_configure_pins+0x2a8>
            NRFX_ASSERT(0);
    4d64:	f8df 9130 	ldr.w	r9, [pc, #304]	; 4e98 <pinctrl_configure_pins+0x38c>
    4d68:	f240 232e 	movw	r3, #558	; 0x22e
    4d6c:	464a      	mov	r2, r9
    4d6e:	494b      	ldr	r1, [pc, #300]	; (4e9c <pinctrl_configure_pins+0x390>)
    4d70:	484b      	ldr	r0, [pc, #300]	; (4ea0 <pinctrl_configure_pins+0x394>)
    4d72:	f005 f87e 	bl	9e72 <assert_print>
    4d76:	f240 212e 	movw	r1, #558	; 0x22e
    4d7a:	4648      	mov	r0, r9
    4d7c:	f005 f872 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    4d80:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4d84:	e017      	b.n	4db6 <pinctrl_configure_pins+0x2aa>
            mask = P0_FEATURE_PINS_PRESENT;
    4d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4d8a:	e7df      	b.n	4d4c <pinctrl_configure_pins+0x240>
    switch (port)
    4d8c:	2300      	movs	r3, #0
    4d8e:	e7dd      	b.n	4d4c <pinctrl_configure_pins+0x240>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4d90:	f8df a104 	ldr.w	sl, [pc, #260]	; 4e98 <pinctrl_configure_pins+0x38c>
    4d94:	f240 2329 	movw	r3, #553	; 0x229
    4d98:	4652      	mov	r2, sl
    4d9a:	4942      	ldr	r1, [pc, #264]	; (4ea4 <pinctrl_configure_pins+0x398>)
    4d9c:	4840      	ldr	r0, [pc, #256]	; (4ea0 <pinctrl_configure_pins+0x394>)
    4d9e:	f005 f868 	bl	9e72 <assert_print>
    4da2:	f240 2129 	movw	r1, #553	; 0x229
    4da6:	4650      	mov	r0, sl
    4da8:	f005 f85c 	bl	9e64 <assert_post_action>
    4dac:	e7d4      	b.n	4d58 <pinctrl_configure_pins+0x24c>
        case 0: return NRF_P0;
    4dae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4db2:	e000      	b.n	4db6 <pinctrl_configure_pins+0x2aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4db4:	4a3c      	ldr	r2, [pc, #240]	; (4ea8 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4db6:	2101      	movs	r1, #1
    4db8:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    4dbc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4dc0:	2200      	movs	r2, #0
    4dc2:	f855 0008 	ldr.w	r0, [r5, r8]
    4dc6:	f7ff fe41 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4dca:	e6f3      	b.n	4bb4 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    4dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4dd0:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    4dd4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4dd8:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    4ddc:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    4de0:	f013 0f20 	tst.w	r3, #32
    4de4:	d01f      	beq.n	4e26 <pinctrl_configure_pins+0x31a>
    4de6:	b30a      	cbz	r2, 4e2c <pinctrl_configure_pins+0x320>
            mask = P1_FEATURE_PINS_PRESENT;
    4de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4dec:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4df0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4df2:	f013 0f01 	tst.w	r3, #1
    4df6:	d01b      	beq.n	4e30 <pinctrl_configure_pins+0x324>
    *p_pin = pin_number & 0x1F;
    4df8:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4dfc:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4e00:	d025      	beq.n	4e4e <pinctrl_configure_pins+0x342>
    4e02:	bb3b      	cbnz	r3, 4e54 <pinctrl_configure_pins+0x348>
            NRFX_ASSERT(0);
    4e04:	f8df 9090 	ldr.w	r9, [pc, #144]	; 4e98 <pinctrl_configure_pins+0x38c>
    4e08:	f240 232e 	movw	r3, #558	; 0x22e
    4e0c:	464a      	mov	r2, r9
    4e0e:	4923      	ldr	r1, [pc, #140]	; (4e9c <pinctrl_configure_pins+0x390>)
    4e10:	4823      	ldr	r0, [pc, #140]	; (4ea0 <pinctrl_configure_pins+0x394>)
    4e12:	f005 f82e 	bl	9e72 <assert_print>
    4e16:	f240 212e 	movw	r1, #558	; 0x22e
    4e1a:	4648      	mov	r0, r9
    4e1c:	f005 f822 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    4e20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4e24:	e017      	b.n	4e56 <pinctrl_configure_pins+0x34a>
            mask = P0_FEATURE_PINS_PRESENT;
    4e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4e2a:	e7df      	b.n	4dec <pinctrl_configure_pins+0x2e0>
    switch (port)
    4e2c:	2300      	movs	r3, #0
    4e2e:	e7dd      	b.n	4dec <pinctrl_configure_pins+0x2e0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4e30:	f8df a064 	ldr.w	sl, [pc, #100]	; 4e98 <pinctrl_configure_pins+0x38c>
    4e34:	f240 2329 	movw	r3, #553	; 0x229
    4e38:	4652      	mov	r2, sl
    4e3a:	491a      	ldr	r1, [pc, #104]	; (4ea4 <pinctrl_configure_pins+0x398>)
    4e3c:	4818      	ldr	r0, [pc, #96]	; (4ea0 <pinctrl_configure_pins+0x394>)
    4e3e:	f005 f818 	bl	9e72 <assert_print>
    4e42:	f240 2129 	movw	r1, #553	; 0x229
    4e46:	4650      	mov	r0, sl
    4e48:	f005 f80c 	bl	9e64 <assert_post_action>
    4e4c:	e7d4      	b.n	4df8 <pinctrl_configure_pins+0x2ec>
        case 0: return NRF_P0;
    4e4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4e52:	e000      	b.n	4e56 <pinctrl_configure_pins+0x34a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4e54:	4a14      	ldr	r2, [pc, #80]	; (4ea8 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4e56:	2101      	movs	r1, #1
    4e58:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    4e5c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4e60:	460a      	mov	r2, r1
    4e62:	f855 0008 	ldr.w	r0, [r5, r8]
    4e66:	f7ff fdf1 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4e6a:	e6a3      	b.n	4bb4 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    4e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e70:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4e74:	2200      	movs	r2, #0
    4e76:	4611      	mov	r1, r2
    4e78:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4e7c:	f7ff fde6 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4e80:	e698      	b.n	4bb4 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    4e82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4e86:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4e8a:	2200      	movs	r2, #0
    4e8c:	4611      	mov	r1, r2
    4e8e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4e92:	f7ff fddb 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4e96:	e68d      	b.n	4bb4 <pinctrl_configure_pins+0xa8>
    4e98:	0000c2b8 	.word	0x0000c2b8
    4e9c:	0000b83c 	.word	0x0000b83c
    4ea0:	0000b180 	.word	0x0000b180
    4ea4:	0000c2ec 	.word	0x0000c2ec
    4ea8:	50000300 	.word	0x50000300
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    4eac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4eb0:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4eb4:	2200      	movs	r2, #0
    4eb6:	4611      	mov	r1, r2
    4eb8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    4ebc:	f7ff fdc6 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    4ec0:	e678      	b.n	4bb4 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    4ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4ec6:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4eca:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4ece:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    4ed2:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    4ed6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    4eda:	d144      	bne.n	4f66 <pinctrl_configure_pins+0x45a>
    switch (port)
    4edc:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4ee0:	d01f      	beq.n	4f22 <pinctrl_configure_pins+0x416>
    4ee2:	b10b      	cbz	r3, 4ee8 <pinctrl_configure_pins+0x3dc>
            mask = P1_FEATURE_PINS_PRESENT;
    4ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    4ee8:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4eec:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4eee:	f012 0f01 	tst.w	r2, #1
    4ef2:	d019      	beq.n	4f28 <pinctrl_configure_pins+0x41c>
    *p_pin = pin_number & 0x1F;
    4ef4:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4ef8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4efc:	d023      	beq.n	4f46 <pinctrl_configure_pins+0x43a>
    4efe:	bb2b      	cbnz	r3, 4f4c <pinctrl_configure_pins+0x440>
            NRFX_ASSERT(0);
    4f00:	f8df 9300 	ldr.w	r9, [pc, #768]	; 5204 <pinctrl_configure_pins+0x6f8>
    4f04:	f240 232e 	movw	r3, #558	; 0x22e
    4f08:	464a      	mov	r2, r9
    4f0a:	49bf      	ldr	r1, [pc, #764]	; (5208 <pinctrl_configure_pins+0x6fc>)
    4f0c:	48bf      	ldr	r0, [pc, #764]	; (520c <pinctrl_configure_pins+0x700>)
    4f0e:	f004 ffb0 	bl	9e72 <assert_print>
    4f12:	f240 212e 	movw	r1, #558	; 0x22e
    4f16:	4648      	mov	r0, r9
    4f18:	f004 ffa4 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    4f1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4f20:	e015      	b.n	4f4e <pinctrl_configure_pins+0x442>
            mask = P0_FEATURE_PINS_PRESENT;
    4f22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4f26:	e7df      	b.n	4ee8 <pinctrl_configure_pins+0x3dc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4f28:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 5204 <pinctrl_configure_pins+0x6f8>
    4f2c:	f240 2329 	movw	r3, #553	; 0x229
    4f30:	4652      	mov	r2, sl
    4f32:	49b7      	ldr	r1, [pc, #732]	; (5210 <pinctrl_configure_pins+0x704>)
    4f34:	48b5      	ldr	r0, [pc, #724]	; (520c <pinctrl_configure_pins+0x700>)
    4f36:	f004 ff9c 	bl	9e72 <assert_print>
    4f3a:	f240 2129 	movw	r1, #553	; 0x229
    4f3e:	4650      	mov	r0, sl
    4f40:	f004 ff90 	bl	9e64 <assert_post_action>
    4f44:	e7d6      	b.n	4ef4 <pinctrl_configure_pins+0x3e8>
        case 0: return NRF_P0;
    4f46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4f4a:	e000      	b.n	4f4e <pinctrl_configure_pins+0x442>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f4c:	4ab1      	ldr	r2, [pc, #708]	; (5214 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4f4e:	2301      	movs	r3, #1
    4f50:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    4f54:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4f58:	2201      	movs	r2, #1
    4f5a:	4611      	mov	r1, r2
    4f5c:	f855 0008 	ldr.w	r0, [r5, r8]
    4f60:	f7ff fd74 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    4f64:	e626      	b.n	4bb4 <pinctrl_configure_pins+0xa8>
    switch (port)
    4f66:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4f6a:	d01f      	beq.n	4fac <pinctrl_configure_pins+0x4a0>
    4f6c:	b30b      	cbz	r3, 4fb2 <pinctrl_configure_pins+0x4a6>
            mask = P1_FEATURE_PINS_PRESENT;
    4f6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4f72:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4f76:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4f78:	f013 0f01 	tst.w	r3, #1
    4f7c:	d01b      	beq.n	4fb6 <pinctrl_configure_pins+0x4aa>
    *p_pin = pin_number & 0x1F;
    4f7e:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4f82:	ea5f 1359 	movs.w	r3, r9, lsr #5
    4f86:	d025      	beq.n	4fd4 <pinctrl_configure_pins+0x4c8>
    4f88:	bb3b      	cbnz	r3, 4fda <pinctrl_configure_pins+0x4ce>
            NRFX_ASSERT(0);
    4f8a:	f8df 9278 	ldr.w	r9, [pc, #632]	; 5204 <pinctrl_configure_pins+0x6f8>
    4f8e:	f240 232e 	movw	r3, #558	; 0x22e
    4f92:	464a      	mov	r2, r9
    4f94:	499c      	ldr	r1, [pc, #624]	; (5208 <pinctrl_configure_pins+0x6fc>)
    4f96:	489d      	ldr	r0, [pc, #628]	; (520c <pinctrl_configure_pins+0x700>)
    4f98:	f004 ff6b 	bl	9e72 <assert_print>
    4f9c:	f240 212e 	movw	r1, #558	; 0x22e
    4fa0:	4648      	mov	r0, r9
    4fa2:	f004 ff5f 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    4fa6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4faa:	e017      	b.n	4fdc <pinctrl_configure_pins+0x4d0>
            mask = P0_FEATURE_PINS_PRESENT;
    4fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4fb0:	e7df      	b.n	4f72 <pinctrl_configure_pins+0x466>
    switch (port)
    4fb2:	2300      	movs	r3, #0
    4fb4:	e7dd      	b.n	4f72 <pinctrl_configure_pins+0x466>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4fb6:	f8df a24c 	ldr.w	sl, [pc, #588]	; 5204 <pinctrl_configure_pins+0x6f8>
    4fba:	f240 2329 	movw	r3, #553	; 0x229
    4fbe:	4652      	mov	r2, sl
    4fc0:	4993      	ldr	r1, [pc, #588]	; (5210 <pinctrl_configure_pins+0x704>)
    4fc2:	4892      	ldr	r0, [pc, #584]	; (520c <pinctrl_configure_pins+0x700>)
    4fc4:	f004 ff55 	bl	9e72 <assert_print>
    4fc8:	f240 2129 	movw	r1, #553	; 0x229
    4fcc:	4650      	mov	r0, sl
    4fce:	f004 ff49 	bl	9e64 <assert_post_action>
    4fd2:	e7d4      	b.n	4f7e <pinctrl_configure_pins+0x472>
        case 0: return NRF_P0;
    4fd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4fd8:	e000      	b.n	4fdc <pinctrl_configure_pins+0x4d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4fda:	4a8e      	ldr	r2, [pc, #568]	; (5214 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4fdc:	2301      	movs	r3, #1
    4fde:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    4fe2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    4fe6:	e7b7      	b.n	4f58 <pinctrl_configure_pins+0x44c>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    4fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4fec:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4ff0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    4ff4:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    4ff8:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    4ffc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5000:	d144      	bne.n	508c <pinctrl_configure_pins+0x580>
    switch (port)
    5002:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5006:	d01f      	beq.n	5048 <pinctrl_configure_pins+0x53c>
    5008:	b10b      	cbz	r3, 500e <pinctrl_configure_pins+0x502>
            mask = P1_FEATURE_PINS_PRESENT;
    500a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    500e:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5012:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5014:	f012 0f01 	tst.w	r2, #1
    5018:	d019      	beq.n	504e <pinctrl_configure_pins+0x542>
    *p_pin = pin_number & 0x1F;
    501a:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    501e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5022:	d023      	beq.n	506c <pinctrl_configure_pins+0x560>
    5024:	bb2b      	cbnz	r3, 5072 <pinctrl_configure_pins+0x566>
            NRFX_ASSERT(0);
    5026:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 5204 <pinctrl_configure_pins+0x6f8>
    502a:	f240 232e 	movw	r3, #558	; 0x22e
    502e:	464a      	mov	r2, r9
    5030:	4975      	ldr	r1, [pc, #468]	; (5208 <pinctrl_configure_pins+0x6fc>)
    5032:	4876      	ldr	r0, [pc, #472]	; (520c <pinctrl_configure_pins+0x700>)
    5034:	f004 ff1d 	bl	9e72 <assert_print>
    5038:	f240 212e 	movw	r1, #558	; 0x22e
    503c:	4648      	mov	r0, r9
    503e:	f004 ff11 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    5042:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5046:	e015      	b.n	5074 <pinctrl_configure_pins+0x568>
            mask = P0_FEATURE_PINS_PRESENT;
    5048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    504c:	e7df      	b.n	500e <pinctrl_configure_pins+0x502>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    504e:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 5204 <pinctrl_configure_pins+0x6f8>
    5052:	f240 2329 	movw	r3, #553	; 0x229
    5056:	4652      	mov	r2, sl
    5058:	496d      	ldr	r1, [pc, #436]	; (5210 <pinctrl_configure_pins+0x704>)
    505a:	486c      	ldr	r0, [pc, #432]	; (520c <pinctrl_configure_pins+0x700>)
    505c:	f004 ff09 	bl	9e72 <assert_print>
    5060:	f240 2129 	movw	r1, #553	; 0x229
    5064:	4650      	mov	r0, sl
    5066:	f004 fefd 	bl	9e64 <assert_post_action>
    506a:	e7d6      	b.n	501a <pinctrl_configure_pins+0x50e>
        case 0: return NRF_P0;
    506c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5070:	e000      	b.n	5074 <pinctrl_configure_pins+0x568>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5072:	4a68      	ldr	r2, [pc, #416]	; (5214 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5074:	2301      	movs	r3, #1
    5076:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    507a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    507e:	2201      	movs	r2, #1
    5080:	4611      	mov	r1, r2
    5082:	f855 0008 	ldr.w	r0, [r5, r8]
    5086:	f7ff fce1 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    508a:	e593      	b.n	4bb4 <pinctrl_configure_pins+0xa8>
    switch (port)
    508c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5090:	d01f      	beq.n	50d2 <pinctrl_configure_pins+0x5c6>
    5092:	b30b      	cbz	r3, 50d8 <pinctrl_configure_pins+0x5cc>
            mask = P1_FEATURE_PINS_PRESENT;
    5094:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5098:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    509c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    509e:	f013 0f01 	tst.w	r3, #1
    50a2:	d01b      	beq.n	50dc <pinctrl_configure_pins+0x5d0>
    *p_pin = pin_number & 0x1F;
    50a4:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    50a8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    50ac:	d025      	beq.n	50fa <pinctrl_configure_pins+0x5ee>
    50ae:	bb3b      	cbnz	r3, 5100 <pinctrl_configure_pins+0x5f4>
            NRFX_ASSERT(0);
    50b0:	f8df 9150 	ldr.w	r9, [pc, #336]	; 5204 <pinctrl_configure_pins+0x6f8>
    50b4:	f240 232e 	movw	r3, #558	; 0x22e
    50b8:	464a      	mov	r2, r9
    50ba:	4953      	ldr	r1, [pc, #332]	; (5208 <pinctrl_configure_pins+0x6fc>)
    50bc:	4853      	ldr	r0, [pc, #332]	; (520c <pinctrl_configure_pins+0x700>)
    50be:	f004 fed8 	bl	9e72 <assert_print>
    50c2:	f240 212e 	movw	r1, #558	; 0x22e
    50c6:	4648      	mov	r0, r9
    50c8:	f004 fecc 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    50cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    50d0:	e017      	b.n	5102 <pinctrl_configure_pins+0x5f6>
            mask = P0_FEATURE_PINS_PRESENT;
    50d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    50d6:	e7df      	b.n	5098 <pinctrl_configure_pins+0x58c>
    switch (port)
    50d8:	2300      	movs	r3, #0
    50da:	e7dd      	b.n	5098 <pinctrl_configure_pins+0x58c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    50dc:	f8df a124 	ldr.w	sl, [pc, #292]	; 5204 <pinctrl_configure_pins+0x6f8>
    50e0:	f240 2329 	movw	r3, #553	; 0x229
    50e4:	4652      	mov	r2, sl
    50e6:	494a      	ldr	r1, [pc, #296]	; (5210 <pinctrl_configure_pins+0x704>)
    50e8:	4848      	ldr	r0, [pc, #288]	; (520c <pinctrl_configure_pins+0x700>)
    50ea:	f004 fec2 	bl	9e72 <assert_print>
    50ee:	f240 2129 	movw	r1, #553	; 0x229
    50f2:	4650      	mov	r0, sl
    50f4:	f004 feb6 	bl	9e64 <assert_post_action>
    50f8:	e7d4      	b.n	50a4 <pinctrl_configure_pins+0x598>
        case 0: return NRF_P0;
    50fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    50fe:	e000      	b.n	5102 <pinctrl_configure_pins+0x5f6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5100:	4a44      	ldr	r2, [pc, #272]	; (5214 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5102:	2301      	movs	r3, #1
    5104:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    5108:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    510c:	e7b7      	b.n	507e <pinctrl_configure_pins+0x572>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    510e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5112:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5116:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    511a:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    511e:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    5122:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5126:	d144      	bne.n	51b2 <pinctrl_configure_pins+0x6a6>
    switch (port)
    5128:	ea5f 1359 	movs.w	r3, r9, lsr #5
    512c:	d01f      	beq.n	516e <pinctrl_configure_pins+0x662>
    512e:	b10b      	cbz	r3, 5134 <pinctrl_configure_pins+0x628>
            mask = P1_FEATURE_PINS_PRESENT;
    5130:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5134:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5138:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    513a:	f012 0f01 	tst.w	r2, #1
    513e:	d019      	beq.n	5174 <pinctrl_configure_pins+0x668>
    *p_pin = pin_number & 0x1F;
    5140:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5144:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5148:	d023      	beq.n	5192 <pinctrl_configure_pins+0x686>
    514a:	bb2b      	cbnz	r3, 5198 <pinctrl_configure_pins+0x68c>
            NRFX_ASSERT(0);
    514c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 5204 <pinctrl_configure_pins+0x6f8>
    5150:	f240 232e 	movw	r3, #558	; 0x22e
    5154:	464a      	mov	r2, r9
    5156:	492c      	ldr	r1, [pc, #176]	; (5208 <pinctrl_configure_pins+0x6fc>)
    5158:	482c      	ldr	r0, [pc, #176]	; (520c <pinctrl_configure_pins+0x700>)
    515a:	f004 fe8a 	bl	9e72 <assert_print>
    515e:	f240 212e 	movw	r1, #558	; 0x22e
    5162:	4648      	mov	r0, r9
    5164:	f004 fe7e 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    5168:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    516c:	e015      	b.n	519a <pinctrl_configure_pins+0x68e>
            mask = P0_FEATURE_PINS_PRESENT;
    516e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5172:	e7df      	b.n	5134 <pinctrl_configure_pins+0x628>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5174:	f8df a08c 	ldr.w	sl, [pc, #140]	; 5204 <pinctrl_configure_pins+0x6f8>
    5178:	f240 2329 	movw	r3, #553	; 0x229
    517c:	4652      	mov	r2, sl
    517e:	4924      	ldr	r1, [pc, #144]	; (5210 <pinctrl_configure_pins+0x704>)
    5180:	4822      	ldr	r0, [pc, #136]	; (520c <pinctrl_configure_pins+0x700>)
    5182:	f004 fe76 	bl	9e72 <assert_print>
    5186:	f240 2129 	movw	r1, #553	; 0x229
    518a:	4650      	mov	r0, sl
    518c:	f004 fe6a 	bl	9e64 <assert_post_action>
    5190:	e7d6      	b.n	5140 <pinctrl_configure_pins+0x634>
        case 0: return NRF_P0;
    5192:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5196:	e000      	b.n	519a <pinctrl_configure_pins+0x68e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5198:	4a1e      	ldr	r2, [pc, #120]	; (5214 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    519a:	2301      	movs	r3, #1
    519c:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    51a0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    51a4:	2201      	movs	r2, #1
    51a6:	4611      	mov	r1, r2
    51a8:	f855 0008 	ldr.w	r0, [r5, r8]
    51ac:	f7ff fc4e 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    51b0:	e500      	b.n	4bb4 <pinctrl_configure_pins+0xa8>
    switch (port)
    51b2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    51b6:	d01f      	beq.n	51f8 <pinctrl_configure_pins+0x6ec>
    51b8:	b30b      	cbz	r3, 51fe <pinctrl_configure_pins+0x6f2>
            mask = P1_FEATURE_PINS_PRESENT;
    51ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    51be:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    51c2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    51c4:	f013 0f01 	tst.w	r3, #1
    51c8:	d026      	beq.n	5218 <pinctrl_configure_pins+0x70c>
    *p_pin = pin_number & 0x1F;
    51ca:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    51ce:	ea5f 1359 	movs.w	r3, r9, lsr #5
    51d2:	d030      	beq.n	5236 <pinctrl_configure_pins+0x72a>
    51d4:	bb93      	cbnz	r3, 523c <pinctrl_configure_pins+0x730>
            NRFX_ASSERT(0);
    51d6:	f8df 902c 	ldr.w	r9, [pc, #44]	; 5204 <pinctrl_configure_pins+0x6f8>
    51da:	f240 232e 	movw	r3, #558	; 0x22e
    51de:	464a      	mov	r2, r9
    51e0:	4909      	ldr	r1, [pc, #36]	; (5208 <pinctrl_configure_pins+0x6fc>)
    51e2:	480a      	ldr	r0, [pc, #40]	; (520c <pinctrl_configure_pins+0x700>)
    51e4:	f004 fe45 	bl	9e72 <assert_print>
    51e8:	f240 212e 	movw	r1, #558	; 0x22e
    51ec:	4648      	mov	r0, r9
    51ee:	f004 fe39 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    51f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    51f6:	e022      	b.n	523e <pinctrl_configure_pins+0x732>
            mask = P0_FEATURE_PINS_PRESENT;
    51f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    51fc:	e7df      	b.n	51be <pinctrl_configure_pins+0x6b2>
    switch (port)
    51fe:	2300      	movs	r3, #0
    5200:	e7dd      	b.n	51be <pinctrl_configure_pins+0x6b2>
    5202:	bf00      	nop
    5204:	0000c2b8 	.word	0x0000c2b8
    5208:	0000b83c 	.word	0x0000b83c
    520c:	0000b180 	.word	0x0000b180
    5210:	0000c2ec 	.word	0x0000c2ec
    5214:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5218:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 5408 <pinctrl_configure_pins+0x8fc>
    521c:	f240 2329 	movw	r3, #553	; 0x229
    5220:	4652      	mov	r2, sl
    5222:	497a      	ldr	r1, [pc, #488]	; (540c <pinctrl_configure_pins+0x900>)
    5224:	487a      	ldr	r0, [pc, #488]	; (5410 <pinctrl_configure_pins+0x904>)
    5226:	f004 fe24 	bl	9e72 <assert_print>
    522a:	f240 2129 	movw	r1, #553	; 0x229
    522e:	4650      	mov	r0, sl
    5230:	f004 fe18 	bl	9e64 <assert_post_action>
    5234:	e7c9      	b.n	51ca <pinctrl_configure_pins+0x6be>
        case 0: return NRF_P0;
    5236:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    523a:	e000      	b.n	523e <pinctrl_configure_pins+0x732>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    523c:	4a75      	ldr	r2, [pc, #468]	; (5414 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    523e:	2301      	movs	r3, #1
    5240:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    5244:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    5248:	e7ac      	b.n	51a4 <pinctrl_configure_pins+0x698>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    524a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    524e:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5252:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5256:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    525a:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    525e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5262:	d144      	bne.n	52ee <pinctrl_configure_pins+0x7e2>
    switch (port)
    5264:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5268:	d01f      	beq.n	52aa <pinctrl_configure_pins+0x79e>
    526a:	b10b      	cbz	r3, 5270 <pinctrl_configure_pins+0x764>
            mask = P1_FEATURE_PINS_PRESENT;
    526c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5270:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5274:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5276:	f012 0f01 	tst.w	r2, #1
    527a:	d019      	beq.n	52b0 <pinctrl_configure_pins+0x7a4>
    *p_pin = pin_number & 0x1F;
    527c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5280:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5284:	d023      	beq.n	52ce <pinctrl_configure_pins+0x7c2>
    5286:	bb2b      	cbnz	r3, 52d4 <pinctrl_configure_pins+0x7c8>
            NRFX_ASSERT(0);
    5288:	f8df 917c 	ldr.w	r9, [pc, #380]	; 5408 <pinctrl_configure_pins+0x8fc>
    528c:	f240 232e 	movw	r3, #558	; 0x22e
    5290:	464a      	mov	r2, r9
    5292:	4961      	ldr	r1, [pc, #388]	; (5418 <pinctrl_configure_pins+0x90c>)
    5294:	485e      	ldr	r0, [pc, #376]	; (5410 <pinctrl_configure_pins+0x904>)
    5296:	f004 fdec 	bl	9e72 <assert_print>
    529a:	f240 212e 	movw	r1, #558	; 0x22e
    529e:	4648      	mov	r0, r9
    52a0:	f004 fde0 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    52a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    52a8:	e015      	b.n	52d6 <pinctrl_configure_pins+0x7ca>
            mask = P0_FEATURE_PINS_PRESENT;
    52aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    52ae:	e7df      	b.n	5270 <pinctrl_configure_pins+0x764>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    52b0:	f8df a154 	ldr.w	sl, [pc, #340]	; 5408 <pinctrl_configure_pins+0x8fc>
    52b4:	f240 2329 	movw	r3, #553	; 0x229
    52b8:	4652      	mov	r2, sl
    52ba:	4954      	ldr	r1, [pc, #336]	; (540c <pinctrl_configure_pins+0x900>)
    52bc:	4854      	ldr	r0, [pc, #336]	; (5410 <pinctrl_configure_pins+0x904>)
    52be:	f004 fdd8 	bl	9e72 <assert_print>
    52c2:	f240 2129 	movw	r1, #553	; 0x229
    52c6:	4650      	mov	r0, sl
    52c8:	f004 fdcc 	bl	9e64 <assert_post_action>
    52cc:	e7d6      	b.n	527c <pinctrl_configure_pins+0x770>
        case 0: return NRF_P0;
    52ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    52d2:	e000      	b.n	52d6 <pinctrl_configure_pins+0x7ca>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    52d4:	4a4f      	ldr	r2, [pc, #316]	; (5414 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    52d6:	2301      	movs	r3, #1
    52d8:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    52dc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    52e0:	2201      	movs	r2, #1
    52e2:	4611      	mov	r1, r2
    52e4:	f855 0008 	ldr.w	r0, [r5, r8]
    52e8:	f7ff fbb0 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    52ec:	e462      	b.n	4bb4 <pinctrl_configure_pins+0xa8>
    switch (port)
    52ee:	ea5f 1359 	movs.w	r3, r9, lsr #5
    52f2:	d01f      	beq.n	5334 <pinctrl_configure_pins+0x828>
    52f4:	b30b      	cbz	r3, 533a <pinctrl_configure_pins+0x82e>
            mask = P1_FEATURE_PINS_PRESENT;
    52f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    52fa:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    52fe:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5300:	f013 0f01 	tst.w	r3, #1
    5304:	d01b      	beq.n	533e <pinctrl_configure_pins+0x832>
    *p_pin = pin_number & 0x1F;
    5306:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    530a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    530e:	d025      	beq.n	535c <pinctrl_configure_pins+0x850>
    5310:	bb3b      	cbnz	r3, 5362 <pinctrl_configure_pins+0x856>
            NRFX_ASSERT(0);
    5312:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 5408 <pinctrl_configure_pins+0x8fc>
    5316:	f240 232e 	movw	r3, #558	; 0x22e
    531a:	464a      	mov	r2, r9
    531c:	493e      	ldr	r1, [pc, #248]	; (5418 <pinctrl_configure_pins+0x90c>)
    531e:	483c      	ldr	r0, [pc, #240]	; (5410 <pinctrl_configure_pins+0x904>)
    5320:	f004 fda7 	bl	9e72 <assert_print>
    5324:	f240 212e 	movw	r1, #558	; 0x22e
    5328:	4648      	mov	r0, r9
    532a:	f004 fd9b 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    532e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5332:	e017      	b.n	5364 <pinctrl_configure_pins+0x858>
            mask = P0_FEATURE_PINS_PRESENT;
    5334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5338:	e7df      	b.n	52fa <pinctrl_configure_pins+0x7ee>
    switch (port)
    533a:	2300      	movs	r3, #0
    533c:	e7dd      	b.n	52fa <pinctrl_configure_pins+0x7ee>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    533e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 5408 <pinctrl_configure_pins+0x8fc>
    5342:	f240 2329 	movw	r3, #553	; 0x229
    5346:	4652      	mov	r2, sl
    5348:	4930      	ldr	r1, [pc, #192]	; (540c <pinctrl_configure_pins+0x900>)
    534a:	4831      	ldr	r0, [pc, #196]	; (5410 <pinctrl_configure_pins+0x904>)
    534c:	f004 fd91 	bl	9e72 <assert_print>
    5350:	f240 2129 	movw	r1, #553	; 0x229
    5354:	4650      	mov	r0, sl
    5356:	f004 fd85 	bl	9e64 <assert_post_action>
    535a:	e7d4      	b.n	5306 <pinctrl_configure_pins+0x7fa>
        case 0: return NRF_P0;
    535c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5360:	e000      	b.n	5364 <pinctrl_configure_pins+0x858>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5362:	4a2c      	ldr	r2, [pc, #176]	; (5414 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5364:	2301      	movs	r3, #1
    5366:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    536a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    536e:	e7b7      	b.n	52e0 <pinctrl_configure_pins+0x7d4>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    5370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5374:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5378:	2201      	movs	r2, #1
    537a:	2100      	movs	r1, #0
    537c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5380:	f7ff fb64 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5384:	e416      	b.n	4bb4 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    5386:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    538a:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    538e:	2201      	movs	r2, #1
    5390:	2100      	movs	r1, #0
    5392:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5396:	f7ff fb59 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    539a:	e40b      	b.n	4bb4 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    539c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53a0:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    53a4:	2201      	movs	r2, #1
    53a6:	2100      	movs	r1, #0
    53a8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    53ac:	f7ff fb4e 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    53b0:	e400      	b.n	4bb4 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    53b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53b6:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    53ba:	2201      	movs	r2, #1
    53bc:	2100      	movs	r1, #0
    53be:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    53c2:	f7ff fb43 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    53c6:	f7ff bbf5 	b.w	4bb4 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    53ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53ce:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    53d2:	2201      	movs	r2, #1
    53d4:	2100      	movs	r1, #0
    53d6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    53da:	f7ff fb37 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    53de:	f7ff bbe9 	b.w	4bb4 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    53e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53e6:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    53ea:	2201      	movs	r2, #1
    53ec:	2100      	movs	r1, #0
    53ee:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    53f2:	f7ff fb2b 	bl	4a4c <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    53f6:	f7ff bbdd 	b.w	4bb4 <pinctrl_configure_pins+0xa8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    53fa:	2000      	movs	r0, #0
    53fc:	e001      	b.n	5402 <pinctrl_configure_pins+0x8f6>
		switch (NRF_GET_FUN(pins[i])) {
    53fe:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    5402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5406:	bf00      	nop
    5408:	0000c2b8 	.word	0x0000c2b8
    540c:	0000c2ec 	.word	0x0000c2ec
    5410:	0000b180 	.word	0x0000b180
    5414:	50000300 	.word	0x50000300
    5418:	0000b83c 	.word	0x0000b83c

0000541c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    541c:	b510      	push	{r4, lr}
    541e:	b084      	sub	sp, #16
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    5420:	f7fc fd02 	bl	1e28 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    5424:	4b06      	ldr	r3, [pc, #24]	; (5440 <k_sys_fatal_error_handler+0x24>)
    5426:	9302      	str	r3, [sp, #8]
    5428:	2400      	movs	r4, #0
    542a:	9401      	str	r4, [sp, #4]
    542c:	9400      	str	r4, [sp, #0]
    542e:	4623      	mov	r3, r4
    5430:	2201      	movs	r2, #1
    5432:	4904      	ldr	r1, [pc, #16]	; (5444 <k_sys_fatal_error_handler+0x28>)
    5434:	4620      	mov	r0, r4
    5436:	f005 fa9d 	bl	a974 <z_log_msg2_runtime_create>
		sys_arch_reboot(0);
    543a:	4620      	mov	r0, r4
    543c:	f7fe fb1e 	bl	3a7c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    5440:	0000c418 	.word	0x0000c418
    5444:	0000af88 	.word	0x0000af88

00005448 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    5448:	4b02      	ldr	r3, [pc, #8]	; (5454 <nvmc_wait+0xc>)
    544a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    544e:	2b00      	cmp	r3, #0
    5450:	d0fa      	beq.n	5448 <nvmc_wait>
}
    5452:	4770      	bx	lr
    5454:	4001e000 	.word	0x4001e000

00005458 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    5458:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    545a:	4b03      	ldr	r3, [pc, #12]	; (5468 <nvmc_config+0x10>)
    545c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    5460:	f7ff fff2 	bl	5448 <nvmc_wait>
}
    5464:	bd08      	pop	{r3, pc}
    5466:	bf00      	nop
    5468:	4001e000 	.word	0x4001e000

0000546c <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    546c:	4b01      	ldr	r3, [pc, #4]	; (5474 <SystemCoreClockUpdate+0x8>)
    546e:	4a02      	ldr	r2, [pc, #8]	; (5478 <SystemCoreClockUpdate+0xc>)
    5470:	601a      	str	r2, [r3, #0]
}
    5472:	4770      	bx	lr
    5474:	20004058 	.word	0x20004058
    5478:	03d09000 	.word	0x03d09000

0000547c <SystemInit>:

void SystemInit(void)
{
    547c:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    547e:	f005 fa96 	bl	a9ae <nrf52_errata_36>
    5482:	b140      	cbz	r0, 5496 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    5484:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5488:	2200      	movs	r2, #0
    548a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    548e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    5492:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    5496:	f005 fa94 	bl	a9c2 <nrf52_errata_66>
    549a:	2800      	cmp	r0, #0
    549c:	d046      	beq.n	552c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    549e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    54a2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    54a6:	4b59      	ldr	r3, [pc, #356]	; (560c <SystemInit+0x190>)
    54a8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    54ac:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    54b0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    54b4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    54b8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    54bc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    54c0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    54c4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    54c8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    54cc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    54d0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    54d4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    54d8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    54dc:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    54e0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    54e4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    54e8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    54ec:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    54f0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    54f4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    54f8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    54fc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    5500:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5504:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    5508:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    550c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    5510:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5514:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    5518:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    551c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    5520:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5524:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    5528:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    552c:	f005 fa53 	bl	a9d6 <nrf52_errata_98>
    5530:	b118      	cbz	r0, 553a <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    5532:	4b37      	ldr	r3, [pc, #220]	; (5610 <SystemInit+0x194>)
    5534:	4a37      	ldr	r2, [pc, #220]	; (5614 <SystemInit+0x198>)
    5536:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    553a:	f005 fa5f 	bl	a9fc <nrf52_errata_103>
    553e:	b118      	cbz	r0, 5548 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5540:	4b35      	ldr	r3, [pc, #212]	; (5618 <SystemInit+0x19c>)
    5542:	22fb      	movs	r2, #251	; 0xfb
    5544:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5548:	f005 fa6b 	bl	aa22 <nrf52_errata_115>
    554c:	b170      	cbz	r0, 556c <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    554e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5552:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    5556:	f023 030f 	bic.w	r3, r3, #15
    555a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    555e:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    5562:	f002 020f 	and.w	r2, r2, #15
    5566:	4313      	orrs	r3, r2
    5568:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    556c:	f005 fa6c 	bl	aa48 <nrf52_errata_120>
    5570:	b120      	cbz	r0, 557c <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    5572:	4b2a      	ldr	r3, [pc, #168]	; (561c <SystemInit+0x1a0>)
    5574:	f44f 7200 	mov.w	r2, #512	; 0x200
    5578:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    557c:	f005 fa77 	bl	aa6e <nrf52_errata_136>
    5580:	b160      	cbz	r0, 559c <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5582:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5586:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    558a:	f013 0f01 	tst.w	r3, #1
    558e:	d005      	beq.n	559c <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5594:	f06f 0201 	mvn.w	r2, #1
    5598:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    559c:	f005 fa71 	bl	aa82 <nrf52_configuration_249>
    55a0:	b138      	cbz	r0, 55b2 <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    55a2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    55a6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    55aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    55ae:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    55b2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    55b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    55ba:	2b00      	cmp	r3, #0
    55bc:	db08      	blt.n	55d0 <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    55be:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    55c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    55c6:	2b00      	cmp	r3, #0
    55c8:	db02      	blt.n	55d0 <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    55ca:	f7ff ff4f 	bl	546c <SystemCoreClockUpdate>
}
    55ce:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    55d0:	2001      	movs	r0, #1
    55d2:	f7ff ff41 	bl	5458 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    55d6:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    55da:	2512      	movs	r5, #18
    55dc:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    55e0:	f7ff ff32 	bl	5448 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    55e4:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    55e8:	f7ff ff2e 	bl	5448 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    55ec:	2000      	movs	r0, #0
    55ee:	f7ff ff33 	bl	5458 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    55f2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    55f6:	490a      	ldr	r1, [pc, #40]	; (5620 <SystemInit+0x1a4>)
    55f8:	68ca      	ldr	r2, [r1, #12]
    55fa:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    55fe:	4b09      	ldr	r3, [pc, #36]	; (5624 <SystemInit+0x1a8>)
    5600:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5602:	60cb      	str	r3, [r1, #12]
    5604:	f3bf 8f4f 	dsb	sy
    __NOP();
    5608:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    560a:	e7fd      	b.n	5608 <SystemInit+0x18c>
    560c:	4000c000 	.word	0x4000c000
    5610:	40005000 	.word	0x40005000
    5614:	00038148 	.word	0x00038148
    5618:	4000f000 	.word	0x4000f000
    561c:	40029000 	.word	0x40029000
    5620:	e000ed00 	.word	0xe000ed00
    5624:	05fa0004 	.word	0x05fa0004

00005628 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    5628:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    562a:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    562c:	fab4 f384 	clz	r3, r4
    5630:	f1c3 031f 	rsb	r3, r3, #31
    5634:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    5638:	2b00      	cmp	r3, #0
    563a:	db16      	blt.n	566a <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    563c:	2201      	movs	r2, #1
    563e:	fa02 f303 	lsl.w	r3, r2, r3
    5642:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5646:	f3bf 8f5b 	dmb	ish
    564a:	e850 2f00 	ldrex	r2, [r0]
    564e:	42a2      	cmp	r2, r4
    5650:	d104      	bne.n	565c <nrfx_flag32_alloc+0x34>
    5652:	e840 3e00 	strex	lr, r3, [r0]
    5656:	f1be 0f00 	cmp.w	lr, #0
    565a:	d1f6      	bne.n	564a <nrfx_flag32_alloc+0x22>
    565c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5660:	d1e3      	bne.n	562a <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    5662:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    5666:	4802      	ldr	r0, [pc, #8]	; (5670 <nrfx_flag32_alloc+0x48>)
}
    5668:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    566a:	4802      	ldr	r0, [pc, #8]	; (5674 <nrfx_flag32_alloc+0x4c>)
    566c:	e7fc      	b.n	5668 <nrfx_flag32_alloc+0x40>
    566e:	bf00      	nop
    5670:	0bad0000 	.word	0x0bad0000
    5674:	0bad0002 	.word	0x0bad0002

00005678 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    5678:	6803      	ldr	r3, [r0, #0]
    567a:	40cb      	lsrs	r3, r1
    567c:	f013 0f01 	tst.w	r3, #1
    5680:	d115      	bne.n	56ae <nrfx_flag32_free+0x36>
{
    5682:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    5684:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    5686:	2301      	movs	r3, #1
    5688:	408b      	lsls	r3, r1
    568a:	4313      	orrs	r3, r2
    568c:	f3bf 8f5b 	dmb	ish
    5690:	e850 cf00 	ldrex	ip, [r0]
    5694:	4594      	cmp	ip, r2
    5696:	d104      	bne.n	56a2 <nrfx_flag32_free+0x2a>
    5698:	e840 3e00 	strex	lr, r3, [r0]
    569c:	f1be 0f00 	cmp.w	lr, #0
    56a0:	d1f6      	bne.n	5690 <nrfx_flag32_free+0x18>
    56a2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    56a6:	d1ed      	bne.n	5684 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    56a8:	4802      	ldr	r0, [pc, #8]	; (56b4 <nrfx_flag32_free+0x3c>)
}
    56aa:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    56ae:	4802      	ldr	r0, [pc, #8]	; (56b8 <nrfx_flag32_free+0x40>)
}
    56b0:	4770      	bx	lr
    56b2:	bf00      	nop
    56b4:	0bad0000 	.word	0x0bad0000
    56b8:	0bad0004 	.word	0x0bad0004

000056bc <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    56bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    56be:	b083      	sub	sp, #12
    switch (domain)
    56c0:	4605      	mov	r5, r0
    56c2:	b168      	cbz	r0, 56e0 <clock_stop+0x24>
    56c4:	2801      	cmp	r0, #1
    56c6:	d020      	beq.n	570a <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    56c8:	4c3d      	ldr	r4, [pc, #244]	; (57c0 <clock_stop+0x104>)
    56ca:	23d8      	movs	r3, #216	; 0xd8
    56cc:	4622      	mov	r2, r4
    56ce:	493d      	ldr	r1, [pc, #244]	; (57c4 <clock_stop+0x108>)
    56d0:	483d      	ldr	r0, [pc, #244]	; (57c8 <clock_stop+0x10c>)
    56d2:	f004 fbce 	bl	9e72 <assert_print>
    56d6:	21d8      	movs	r1, #216	; 0xd8
    56d8:	4620      	mov	r0, r4
    56da:	f004 fbc3 	bl	9e64 <assert_post_action>
            return;
    56de:	e068      	b.n	57b2 <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    56e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    56e4:	2202      	movs	r2, #2
    56e6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    56ea:	2200      	movs	r2, #0
    56ec:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    56f0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    56f4:	2201      	movs	r2, #1
    56f6:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    56f8:	2301      	movs	r3, #1
    56fa:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    56fe:	429d      	cmp	r5, r3
    5700:	d00f      	beq.n	5722 <clock_stop+0x66>
    5702:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5704:	f242 7410 	movw	r4, #10000	; 0x2710
    5708:	e029      	b.n	575e <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    570a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    570e:	2201      	movs	r2, #1
    5710:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5714:	2100      	movs	r1, #0
    5716:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    571a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    571e:	605a      	str	r2, [r3, #4]
}
    5720:	e7ea      	b.n	56f8 <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5722:	f10d 0607 	add.w	r6, sp, #7
    5726:	e7ed      	b.n	5704 <clock_stop+0x48>
            if (p_clk_src != NULL)
    5728:	b136      	cbz	r6, 5738 <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    572a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    572e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5732:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5736:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5738:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    573c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    5740:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5744:	d12f      	bne.n	57a6 <clock_stop+0xea>
    return false;
    5746:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5748:	b38b      	cbz	r3, 57ae <clock_stop+0xf2>
    574a:	b11e      	cbz	r6, 5754 <clock_stop+0x98>
    574c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5750:	2b01      	cmp	r3, #1
    5752:	d12c      	bne.n	57ae <clock_stop+0xf2>
    5754:	2001      	movs	r0, #1
    5756:	f005 f9a7 	bl	aaa8 <nrfx_busy_wait>
    575a:	3c01      	subs	r4, #1
    575c:	d027      	beq.n	57ae <clock_stop+0xf2>
    switch (domain)
    575e:	2d00      	cmp	r5, #0
    5760:	d0e2      	beq.n	5728 <clock_stop+0x6c>
    5762:	2d01      	cmp	r5, #1
    5764:	d00e      	beq.n	5784 <clock_stop+0xc8>
            NRFX_ASSERT(0);
    5766:	4f19      	ldr	r7, [pc, #100]	; (57cc <clock_stop+0x110>)
    5768:	f44f 734f 	mov.w	r3, #828	; 0x33c
    576c:	463a      	mov	r2, r7
    576e:	4915      	ldr	r1, [pc, #84]	; (57c4 <clock_stop+0x108>)
    5770:	4815      	ldr	r0, [pc, #84]	; (57c8 <clock_stop+0x10c>)
    5772:	f004 fb7e 	bl	9e72 <assert_print>
    5776:	f44f 714f 	mov.w	r1, #828	; 0x33c
    577a:	4638      	mov	r0, r7
    577c:	f004 fb72 	bl	9e64 <assert_post_action>
            return false;
    5780:	2300      	movs	r3, #0
    5782:	e7e1      	b.n	5748 <clock_stop+0x8c>
            if (p_clk_src != NULL)
    5784:	b136      	cbz	r6, 5794 <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    578a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    578e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5792:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5798:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    579c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    57a0:	d103      	bne.n	57aa <clock_stop+0xee>
    return false;
    57a2:	2300      	movs	r3, #0
    57a4:	e7d0      	b.n	5748 <clock_stop+0x8c>
                return true;
    57a6:	2301      	movs	r3, #1
    57a8:	e7ce      	b.n	5748 <clock_stop+0x8c>
                return true;
    57aa:	2301      	movs	r3, #1
    57ac:	e7cc      	b.n	5748 <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    57ae:	2d01      	cmp	r5, #1
    57b0:	d001      	beq.n	57b6 <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    57b2:	b003      	add	sp, #12
    57b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    57b6:	4b06      	ldr	r3, [pc, #24]	; (57d0 <clock_stop+0x114>)
    57b8:	2200      	movs	r2, #0
    57ba:	715a      	strb	r2, [r3, #5]
    57bc:	e7f9      	b.n	57b2 <clock_stop+0xf6>
    57be:	bf00      	nop
    57c0:	0000c438 	.word	0x0000c438
    57c4:	0000b83c 	.word	0x0000b83c
    57c8:	0000b180 	.word	0x0000b180
    57cc:	0000c478 	.word	0x0000c478
    57d0:	20004a68 	.word	0x20004a68

000057d4 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    57d4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    57d6:	4604      	mov	r4, r0
    57d8:	b150      	cbz	r0, 57f0 <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    57da:	4b0d      	ldr	r3, [pc, #52]	; (5810 <nrfx_clock_init+0x3c>)
    57dc:	791b      	ldrb	r3, [r3, #4]
    57de:	b9ab      	cbnz	r3, 580c <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    57e0:	4b0b      	ldr	r3, [pc, #44]	; (5810 <nrfx_clock_init+0x3c>)
    57e2:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    57e4:	2201      	movs	r2, #1
    57e6:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    57e8:	2200      	movs	r2, #0
    57ea:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    57ec:	4809      	ldr	r0, [pc, #36]	; (5814 <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    57ee:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    57f0:	4d09      	ldr	r5, [pc, #36]	; (5818 <nrfx_clock_init+0x44>)
    57f2:	f240 1315 	movw	r3, #277	; 0x115
    57f6:	462a      	mov	r2, r5
    57f8:	4908      	ldr	r1, [pc, #32]	; (581c <nrfx_clock_init+0x48>)
    57fa:	4809      	ldr	r0, [pc, #36]	; (5820 <nrfx_clock_init+0x4c>)
    57fc:	f004 fb39 	bl	9e72 <assert_print>
    5800:	f240 1115 	movw	r1, #277	; 0x115
    5804:	4628      	mov	r0, r5
    5806:	f004 fb2d 	bl	9e64 <assert_post_action>
    580a:	e7e6      	b.n	57da <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    580c:	4805      	ldr	r0, [pc, #20]	; (5824 <nrfx_clock_init+0x50>)
    return err_code;
    580e:	e7ee      	b.n	57ee <nrfx_clock_init+0x1a>
    5810:	20004a68 	.word	0x20004a68
    5814:	0bad0000 	.word	0x0bad0000
    5818:	0000c438 	.word	0x0000c438
    581c:	0000c4ac 	.word	0x0000c4ac
    5820:	0000b180 	.word	0x0000b180
    5824:	0bad000c 	.word	0x0bad000c

00005828 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    5828:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    582a:	4b0f      	ldr	r3, [pc, #60]	; (5868 <nrfx_clock_enable+0x40>)
    582c:	791b      	ldrb	r3, [r3, #4]
    582e:	b153      	cbz	r3, 5846 <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5830:	2000      	movs	r0, #0
    5832:	f7fd fa31 	bl	2c98 <arch_irq_is_enabled>
    5836:	b1a0      	cbz	r0, 5862 <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    5838:	f005 f93a 	bl	aab0 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    583c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5840:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    5844:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5846:	4c09      	ldr	r4, [pc, #36]	; (586c <nrfx_clock_enable+0x44>)
    5848:	f44f 7397 	mov.w	r3, #302	; 0x12e
    584c:	4622      	mov	r2, r4
    584e:	4908      	ldr	r1, [pc, #32]	; (5870 <nrfx_clock_enable+0x48>)
    5850:	4808      	ldr	r0, [pc, #32]	; (5874 <nrfx_clock_enable+0x4c>)
    5852:	f004 fb0e 	bl	9e72 <assert_print>
    5856:	f44f 7197 	mov.w	r1, #302	; 0x12e
    585a:	4620      	mov	r0, r4
    585c:	f004 fb02 	bl	9e64 <assert_post_action>
    5860:	e7e6      	b.n	5830 <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5862:	f7fd fa0b 	bl	2c7c <arch_irq_enable>
    5866:	e7e7      	b.n	5838 <nrfx_clock_enable+0x10>
    5868:	20004a68 	.word	0x20004a68
    586c:	0000c438 	.word	0x0000c438
    5870:	0000c4bc 	.word	0x0000c4bc
    5874:	0000b180 	.word	0x0000b180

00005878 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    5878:	b530      	push	{r4, r5, lr}
    587a:	b083      	sub	sp, #12
    587c:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    587e:	4b34      	ldr	r3, [pc, #208]	; (5950 <nrfx_clock_start+0xd8>)
    5880:	791b      	ldrb	r3, [r3, #4]
    5882:	b183      	cbz	r3, 58a6 <nrfx_clock_start+0x2e>
    switch (domain)
    5884:	b1ec      	cbz	r4, 58c2 <nrfx_clock_start+0x4a>
    5886:	2c01      	cmp	r4, #1
    5888:	d055      	beq.n	5936 <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    588a:	4c32      	ldr	r4, [pc, #200]	; (5954 <nrfx_clock_start+0xdc>)
    588c:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    5890:	4622      	mov	r2, r4
    5892:	4931      	ldr	r1, [pc, #196]	; (5958 <nrfx_clock_start+0xe0>)
    5894:	4831      	ldr	r0, [pc, #196]	; (595c <nrfx_clock_start+0xe4>)
    5896:	f004 faec 	bl	9e72 <assert_print>
    589a:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    589e:	4620      	mov	r0, r4
    58a0:	f004 fae0 	bl	9e64 <assert_post_action>
            break;
    }
}
    58a4:	e052      	b.n	594c <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    58a6:	4d2b      	ldr	r5, [pc, #172]	; (5954 <nrfx_clock_start+0xdc>)
    58a8:	f44f 73b4 	mov.w	r3, #360	; 0x168
    58ac:	462a      	mov	r2, r5
    58ae:	492c      	ldr	r1, [pc, #176]	; (5960 <nrfx_clock_start+0xe8>)
    58b0:	482a      	ldr	r0, [pc, #168]	; (595c <nrfx_clock_start+0xe4>)
    58b2:	f004 fade 	bl	9e72 <assert_print>
    58b6:	f44f 71b4 	mov.w	r1, #360	; 0x168
    58ba:	4628      	mov	r0, r5
    58bc:	f004 fad2 	bl	9e64 <assert_post_action>
    58c0:	e7e0      	b.n	5884 <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    58c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    58c6:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    58ca:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    58ce:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    58d0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    58d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    58d8:	d117      	bne.n	590a <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    58da:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    58de:	f013 0f01 	tst.w	r3, #1
    58e2:	d116      	bne.n	5912 <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    58e4:	f005 f8e4 	bl	aab0 <clock_initial_lfclksrc_get>
    58e8:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    58ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58ee:	9a01      	ldr	r2, [sp, #4]
    58f0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58f4:	2200      	movs	r2, #0
    58f6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    58fa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    58fe:	2202      	movs	r2, #2
    5900:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5904:	2201      	movs	r2, #1
    5906:	609a      	str	r2, [r3, #8]
}
    5908:	e020      	b.n	594c <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    590a:	a801      	add	r0, sp, #4
    590c:	f005 f8d2 	bl	aab4 <clock_lfclksrc_tweak>
    5910:	e7eb      	b.n	58ea <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5912:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5916:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    591a:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    591e:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    5920:	a801      	add	r0, sp, #4
    5922:	f005 f8c7 	bl	aab4 <clock_lfclksrc_tweak>
    5926:	2800      	cmp	r0, #0
    5928:	d0df      	beq.n	58ea <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    592a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    592e:	2202      	movs	r2, #2
    5930:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    5934:	e00a      	b.n	594c <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5936:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    593a:	2200      	movs	r2, #0
    593c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5940:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    5944:	2201      	movs	r2, #1
    5946:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    594a:	601a      	str	r2, [r3, #0]
}
    594c:	b003      	add	sp, #12
    594e:	bd30      	pop	{r4, r5, pc}
    5950:	20004a68 	.word	0x20004a68
    5954:	0000c438 	.word	0x0000c438
    5958:	0000b83c 	.word	0x0000b83c
    595c:	0000b180 	.word	0x0000b180
    5960:	0000c4bc 	.word	0x0000c4bc

00005964 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    5964:	b538      	push	{r3, r4, r5, lr}
    5966:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5968:	4b0a      	ldr	r3, [pc, #40]	; (5994 <nrfx_clock_stop+0x30>)
    596a:	791b      	ldrb	r3, [r3, #4]
    596c:	b11b      	cbz	r3, 5976 <nrfx_clock_stop+0x12>
    clock_stop(domain);
    596e:	4620      	mov	r0, r4
    5970:	f7ff fea4 	bl	56bc <clock_stop>
}
    5974:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5976:	4d08      	ldr	r5, [pc, #32]	; (5998 <nrfx_clock_stop+0x34>)
    5978:	f240 13ad 	movw	r3, #429	; 0x1ad
    597c:	462a      	mov	r2, r5
    597e:	4907      	ldr	r1, [pc, #28]	; (599c <nrfx_clock_stop+0x38>)
    5980:	4807      	ldr	r0, [pc, #28]	; (59a0 <nrfx_clock_stop+0x3c>)
    5982:	f004 fa76 	bl	9e72 <assert_print>
    5986:	f240 11ad 	movw	r1, #429	; 0x1ad
    598a:	4628      	mov	r0, r5
    598c:	f004 fa6a 	bl	9e64 <assert_post_action>
    5990:	e7ed      	b.n	596e <nrfx_clock_stop+0xa>
    5992:	bf00      	nop
    5994:	20004a68 	.word	0x20004a68
    5998:	0000c438 	.word	0x0000c438
    599c:	0000c4bc 	.word	0x0000c4bc
    59a0:	0000b180 	.word	0x0000b180

000059a4 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    59a4:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    59a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    59ae:	b18b      	cbz	r3, 59d4 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    59b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59b4:	2200      	movs	r2, #0
    59b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    59ba:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    59be:	2201      	movs	r2, #1
    59c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    59c4:	4b15      	ldr	r3, [pc, #84]	; (5a1c <nrfx_power_clock_irq_handler+0x78>)
    59c6:	795b      	ldrb	r3, [r3, #5]
    59c8:	b923      	cbnz	r3, 59d4 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    59ca:	4b14      	ldr	r3, [pc, #80]	; (5a1c <nrfx_power_clock_irq_handler+0x78>)
    59cc:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    59ce:	681b      	ldr	r3, [r3, #0]
    59d0:	2000      	movs	r0, #0
    59d2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    59d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59d8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    59dc:	b19b      	cbz	r3, 5a06 <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    59de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59e2:	2200      	movs	r2, #0
    59e4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    59e8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    59ec:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    59f0:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    59f4:	f012 0f03 	tst.w	r2, #3
    59f8:	d106      	bne.n	5a08 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    59fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59fe:	2201      	movs	r2, #1
    5a00:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5a04:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5a06:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    5a08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5a0c:	2202      	movs	r2, #2
    5a0e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5a12:	4b02      	ldr	r3, [pc, #8]	; (5a1c <nrfx_power_clock_irq_handler+0x78>)
    5a14:	681b      	ldr	r3, [r3, #0]
    5a16:	2001      	movs	r0, #1
    5a18:	4798      	blx	r3
}
    5a1a:	e7f4      	b.n	5a06 <nrfx_power_clock_irq_handler+0x62>
    5a1c:	20004a68 	.word	0x20004a68

00005a20 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5a20:	3008      	adds	r0, #8
    5a22:	4b03      	ldr	r3, [pc, #12]	; (5a30 <pin_in_use+0x10>)
    5a24:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5a28:	f000 0001 	and.w	r0, r0, #1
    5a2c:	4770      	bx	lr
    5a2e:	bf00      	nop
    5a30:	2000405c 	.word	0x2000405c

00005a34 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5a34:	3008      	adds	r0, #8
    5a36:	4b03      	ldr	r3, [pc, #12]	; (5a44 <pin_in_use_by_te+0x10>)
    5a38:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5a3c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    5a40:	4770      	bx	lr
    5a42:	bf00      	nop
    5a44:	2000405c 	.word	0x2000405c

00005a48 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    5a48:	3008      	adds	r0, #8
    5a4a:	4b04      	ldr	r3, [pc, #16]	; (5a5c <pin_has_trigger+0x14>)
    5a4c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5a50:	f010 001c 	ands.w	r0, r0, #28
    5a54:	bf18      	it	ne
    5a56:	2001      	movne	r0, #1
    5a58:	4770      	bx	lr
    5a5a:	bf00      	nop
    5a5c:	2000405c 	.word	0x2000405c

00005a60 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5a60:	3008      	adds	r0, #8
    5a62:	4b03      	ldr	r3, [pc, #12]	; (5a70 <pin_is_output+0x10>)
    5a64:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5a68:	f3c0 0040 	ubfx	r0, r0, #1, #1
    5a6c:	4770      	bx	lr
    5a6e:	bf00      	nop
    5a70:	2000405c 	.word	0x2000405c

00005a74 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5a74:	3008      	adds	r0, #8
    5a76:	4b02      	ldr	r3, [pc, #8]	; (5a80 <pin_te_get+0xc>)
    5a78:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5a7c:	0b40      	lsrs	r0, r0, #13
    5a7e:	4770      	bx	lr
    5a80:	2000405c 	.word	0x2000405c

00005a84 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5a84:	2200      	movs	r2, #0
    5a86:	e004      	b.n	5a92 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5a8c:	4283      	cmp	r3, r0
    5a8e:	d00f      	beq.n	5ab0 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5a90:	3201      	adds	r2, #1
    5a92:	2a2f      	cmp	r2, #47	; 0x2f
    5a94:	d80a      	bhi.n	5aac <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5a96:	f102 0308 	add.w	r3, r2, #8
    5a9a:	4906      	ldr	r1, [pc, #24]	; (5ab4 <handler_in_use+0x30>)
    5a9c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    5aa0:	f413 7f80 	tst.w	r3, #256	; 0x100
    5aa4:	d0f0      	beq.n	5a88 <handler_in_use+0x4>
    5aa6:	f3c3 2343 	ubfx	r3, r3, #9, #4
    5aaa:	e7ef      	b.n	5a8c <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    5aac:	2000      	movs	r0, #0
    5aae:	4770      	bx	lr
            return true;
    5ab0:	2001      	movs	r0, #1
}
    5ab2:	4770      	bx	lr
    5ab4:	2000405c 	.word	0x2000405c

00005ab8 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    5ab8:	2300      	movs	r3, #0
    5aba:	b113      	cbz	r3, 5ac2 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    5abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5ac0:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5ac2:	4a07      	ldr	r2, [pc, #28]	; (5ae0 <find_handler+0x28>)
    5ac4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    5ac8:	4282      	cmp	r2, r0
    5aca:	d001      	beq.n	5ad0 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    5acc:	3301      	adds	r3, #1
    5ace:	e7f4      	b.n	5aba <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5ad0:	4a03      	ldr	r2, [pc, #12]	; (5ae0 <find_handler+0x28>)
    5ad2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    5ad6:	6852      	ldr	r2, [r2, #4]
    5ad8:	428a      	cmp	r2, r1
    5ada:	d1f7      	bne.n	5acc <find_handler+0x14>
            return i;
    5adc:	4618      	mov	r0, r3
    5ade:	4770      	bx	lr
    5ae0:	2000405c 	.word	0x2000405c

00005ae4 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5ae4:	3008      	adds	r0, #8
    5ae6:	4b06      	ldr	r3, [pc, #24]	; (5b00 <channel_handler_get+0x1c>)
    5ae8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    5aec:	f410 7f80 	tst.w	r0, #256	; 0x100
    5af0:	d004      	beq.n	5afc <channel_handler_get+0x18>
    5af2:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    5af6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5afa:	4770      	bx	lr
        return NULL;
    5afc:	2000      	movs	r0, #0
}
    5afe:	4770      	bx	lr
    5b00:	2000405c 	.word	0x2000405c

00005b04 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    5b04:	b570      	push	{r4, r5, r6, lr}
    5b06:	4604      	mov	r4, r0
    5b08:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    5b0a:	f7ff ffeb 	bl	5ae4 <channel_handler_get>

    if (handler)
    5b0e:	b120      	cbz	r0, 5b1a <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    5b10:	6806      	ldr	r6, [r0, #0]
    5b12:	6842      	ldr	r2, [r0, #4]
    5b14:	4629      	mov	r1, r5
    5b16:	4620      	mov	r0, r4
    5b18:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    5b1a:	4b04      	ldr	r3, [pc, #16]	; (5b2c <call_handler+0x28>)
    5b1c:	689b      	ldr	r3, [r3, #8]
    5b1e:	b123      	cbz	r3, 5b2a <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5b20:	4a02      	ldr	r2, [pc, #8]	; (5b2c <call_handler+0x28>)
    5b22:	68d2      	ldr	r2, [r2, #12]
    5b24:	4629      	mov	r1, r5
    5b26:	4620      	mov	r0, r4
    5b28:	4798      	blx	r3
    }
}
    5b2a:	bd70      	pop	{r4, r5, r6, pc}
    5b2c:	2000405c 	.word	0x2000405c

00005b30 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5b30:	f100 0208 	add.w	r2, r0, #8
    5b34:	4b16      	ldr	r3, [pc, #88]	; (5b90 <release_handler+0x60>)
    5b36:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    5b3a:	f413 7f80 	tst.w	r3, #256	; 0x100
    5b3e:	d026      	beq.n	5b8e <release_handler+0x5e>
{
    5b40:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5b42:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    5b46:	4610      	mov	r0, r2
    5b48:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5b4c:	4a10      	ldr	r2, [pc, #64]	; (5b90 <release_handler+0x60>)
    5b4e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    5b52:	4620      	mov	r0, r4
    5b54:	f7ff ff96 	bl	5a84 <handler_in_use>
    5b58:	b100      	cbz	r0, 5b5c <release_handler+0x2c>
}
    5b5a:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    5b5c:	480c      	ldr	r0, [pc, #48]	; (5b90 <release_handler+0x60>)
    5b5e:	2300      	movs	r3, #0
    5b60:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5b64:	4621      	mov	r1, r4
    5b66:	3074      	adds	r0, #116	; 0x74
    5b68:	f7ff fd86 	bl	5678 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5b6c:	4b09      	ldr	r3, [pc, #36]	; (5b94 <release_handler+0x64>)
    5b6e:	4298      	cmp	r0, r3
    5b70:	d0f3      	beq.n	5b5a <release_handler+0x2a>
    5b72:	4c09      	ldr	r4, [pc, #36]	; (5b98 <release_handler+0x68>)
    5b74:	f44f 7399 	mov.w	r3, #306	; 0x132
    5b78:	4622      	mov	r2, r4
    5b7a:	4908      	ldr	r1, [pc, #32]	; (5b9c <release_handler+0x6c>)
    5b7c:	4808      	ldr	r0, [pc, #32]	; (5ba0 <release_handler+0x70>)
    5b7e:	f004 f978 	bl	9e72 <assert_print>
    5b82:	f44f 7199 	mov.w	r1, #306	; 0x132
    5b86:	4620      	mov	r0, r4
    5b88:	f004 f96c 	bl	9e64 <assert_post_action>
    5b8c:	e7e5      	b.n	5b5a <release_handler+0x2a>
    5b8e:	4770      	bx	lr
    5b90:	2000405c 	.word	0x2000405c
    5b94:	0bad0000 	.word	0x0bad0000
    5b98:	0000c4dc 	.word	0x0000c4dc
    5b9c:	0000c51c 	.word	0x0000c51c
    5ba0:	0000b180 	.word	0x0000b180

00005ba4 <pin_handler_trigger_uninit>:
{
    5ba4:	b510      	push	{r4, lr}
    5ba6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    5ba8:	f7ff ff44 	bl	5a34 <pin_in_use_by_te>
    5bac:	b140      	cbz	r0, 5bc0 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    5bae:	4620      	mov	r0, r4
    5bb0:	f7ff ff60 	bl	5a74 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    5bb4:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    5bb8:	4b06      	ldr	r3, [pc, #24]	; (5bd4 <pin_handler_trigger_uninit+0x30>)
    5bba:	2200      	movs	r2, #0
    5bbc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    5bc0:	4620      	mov	r0, r4
    5bc2:	f7ff ffb5 	bl	5b30 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    5bc6:	3408      	adds	r4, #8
    5bc8:	4b03      	ldr	r3, [pc, #12]	; (5bd8 <pin_handler_trigger_uninit+0x34>)
    5bca:	2200      	movs	r2, #0
    5bcc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    5bd0:	bd10      	pop	{r4, pc}
    5bd2:	bf00      	nop
    5bd4:	40006000 	.word	0x40006000
    5bd8:	2000405c 	.word	0x2000405c

00005bdc <pin_handler_set>:
{
    5bdc:	b570      	push	{r4, r5, r6, lr}
    5bde:	b082      	sub	sp, #8
    5be0:	4606      	mov	r6, r0
    5be2:	460c      	mov	r4, r1
    5be4:	4615      	mov	r5, r2
    release_handler(pin);
    5be6:	f7ff ffa3 	bl	5b30 <release_handler>
    if (!handler)
    5bea:	b324      	cbz	r4, 5c36 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    5bec:	4629      	mov	r1, r5
    5bee:	4620      	mov	r0, r4
    5bf0:	f7ff ff62 	bl	5ab8 <find_handler>
    if (handler_id < 0)
    5bf4:	1e03      	subs	r3, r0, #0
    5bf6:	db13      	blt.n	5c20 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    5bf8:	4a10      	ldr	r2, [pc, #64]	; (5c3c <pin_handler_set+0x60>)
    5bfa:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5bfe:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5c02:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5c04:	025b      	lsls	r3, r3, #9
    5c06:	b29b      	uxth	r3, r3
    5c08:	f106 0008 	add.w	r0, r6, #8
    5c0c:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    5c10:	430b      	orrs	r3, r1
    5c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5c16:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    5c1a:	4809      	ldr	r0, [pc, #36]	; (5c40 <pin_handler_set+0x64>)
}
    5c1c:	b002      	add	sp, #8
    5c1e:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    5c20:	f10d 0107 	add.w	r1, sp, #7
    5c24:	4807      	ldr	r0, [pc, #28]	; (5c44 <pin_handler_set+0x68>)
    5c26:	f7ff fcff 	bl	5628 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5c2a:	4b05      	ldr	r3, [pc, #20]	; (5c40 <pin_handler_set+0x64>)
    5c2c:	4298      	cmp	r0, r3
    5c2e:	d1f5      	bne.n	5c1c <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    5c30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5c34:	e7e0      	b.n	5bf8 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    5c36:	4802      	ldr	r0, [pc, #8]	; (5c40 <pin_handler_set+0x64>)
    5c38:	e7f0      	b.n	5c1c <pin_handler_set+0x40>
    5c3a:	bf00      	nop
    5c3c:	2000405c 	.word	0x2000405c
    5c40:	0bad0000 	.word	0x0bad0000
    5c44:	200040d0 	.word	0x200040d0

00005c48 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    5c48:	b538      	push	{r3, r4, r5, lr}
    5c4a:	4604      	mov	r4, r0
    while (mask)
    5c4c:	e018      	b.n	5c80 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    5c4e:	fa94 f3a4 	rbit	r3, r4
    5c52:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5c56:	2201      	movs	r2, #1
    5c58:	409a      	lsls	r2, r3
    5c5a:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5c5e:	4a0a      	ldr	r2, [pc, #40]	; (5c88 <gpiote_evt_handle+0x40>)
    5c60:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    5c64:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    5c68:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    5c6c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5c70:	f3c0 4001 	ubfx	r0, r0, #16, #2
    5c74:	f004 ff4a 	bl	ab0c <gpiote_polarity_to_trigger>
    5c78:	4601      	mov	r1, r0
    5c7a:	4628      	mov	r0, r5
    5c7c:	f7ff ff42 	bl	5b04 <call_handler>
    while (mask)
    5c80:	2c00      	cmp	r4, #0
    5c82:	d1e4      	bne.n	5c4e <gpiote_evt_handle+0x6>
    }
}
    5c84:	bd38      	pop	{r3, r4, r5, pc}
    5c86:	bf00      	nop
    5c88:	40006000 	.word	0x40006000

00005c8c <latch_pending_read_and_check>:
{
    5c8c:	b082      	sub	sp, #8
    5c8e:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    5c90:	4b11      	ldr	r3, [pc, #68]	; (5cd8 <latch_pending_read_and_check+0x4c>)
    5c92:	e893 0003 	ldmia.w	r3, {r0, r1}
    5c96:	ab02      	add	r3, sp, #8
    5c98:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    5c9c:	4660      	mov	r0, ip
    5c9e:	2300      	movs	r3, #0
    5ca0:	e00b      	b.n	5cba <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    5ca2:	aa02      	add	r2, sp, #8
    5ca4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    5ca8:	f852 2c08 	ldr.w	r2, [r2, #-8]
    5cac:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    5cb0:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    5cb4:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    5cb8:	3301      	adds	r3, #1
    5cba:	2b01      	cmp	r3, #1
    5cbc:	d9f1      	bls.n	5ca2 <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    5cbe:	2300      	movs	r3, #0
    5cc0:	2b01      	cmp	r3, #1
    5cc2:	d804      	bhi.n	5cce <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    5cc4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    5cc8:	b922      	cbnz	r2, 5cd4 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    5cca:	3301      	adds	r3, #1
    5ccc:	e7f8      	b.n	5cc0 <latch_pending_read_and_check+0x34>
    return false;
    5cce:	2000      	movs	r0, #0
}
    5cd0:	b002      	add	sp, #8
    5cd2:	4770      	bx	lr
            return true;
    5cd4:	2001      	movs	r0, #1
    5cd6:	e7fb      	b.n	5cd0 <latch_pending_read_and_check+0x44>
    5cd8:	0000b050 	.word	0x0000b050

00005cdc <next_sense_cond_call_handler>:
{
    5cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ce0:	4604      	mov	r4, r0
    5ce2:	460d      	mov	r5, r1
    5ce4:	4616      	mov	r6, r2
    if (is_level(trigger))
    5ce6:	4608      	mov	r0, r1
    5ce8:	f004 ff12 	bl	ab10 <is_level>
    5cec:	bb60      	cbnz	r0, 5d48 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5cee:	2e02      	cmp	r6, #2
    5cf0:	f000 80f5 	beq.w	5ede <next_sense_cond_call_handler+0x202>
    5cf4:	f04f 0802 	mov.w	r8, #2
    switch (port)
    5cf8:	0963      	lsrs	r3, r4, #5
    5cfa:	f000 80f3 	beq.w	5ee4 <next_sense_cond_call_handler+0x208>
    5cfe:	2b01      	cmp	r3, #1
    5d00:	f040 80f3 	bne.w	5eea <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    5d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5d08:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5d0c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5d0e:	f013 0f01 	tst.w	r3, #1
    5d12:	f000 80ec 	beq.w	5eee <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    5d16:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5d1a:	0963      	lsrs	r3, r4, #5
    5d1c:	f000 80f5 	beq.w	5f0a <next_sense_cond_call_handler+0x22e>
    5d20:	2b01      	cmp	r3, #1
    5d22:	f000 80f5 	beq.w	5f10 <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    5d26:	f8df 9224 	ldr.w	r9, [pc, #548]	; 5f4c <next_sense_cond_call_handler+0x270>
    5d2a:	f240 232e 	movw	r3, #558	; 0x22e
    5d2e:	464a      	mov	r2, r9
    5d30:	4987      	ldr	r1, [pc, #540]	; (5f50 <next_sense_cond_call_handler+0x274>)
    5d32:	4888      	ldr	r0, [pc, #544]	; (5f54 <next_sense_cond_call_handler+0x278>)
    5d34:	f004 f89d 	bl	9e72 <assert_print>
    5d38:	f240 212e 	movw	r1, #558	; 0x22e
    5d3c:	4648      	mov	r0, r9
    5d3e:	f004 f891 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    5d42:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    5d46:	e0e4      	b.n	5f12 <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    5d48:	4629      	mov	r1, r5
    5d4a:	4620      	mov	r0, r4
    5d4c:	f7ff feda 	bl	5b04 <call_handler>
    switch (port)
    5d50:	0963      	lsrs	r3, r4, #5
    5d52:	d01f      	beq.n	5d94 <next_sense_cond_call_handler+0xb8>
    5d54:	2b01      	cmp	r3, #1
    5d56:	d120      	bne.n	5d9a <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    5d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5d5c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5d60:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5d62:	f013 0f01 	tst.w	r3, #1
    5d66:	d01a      	beq.n	5d9e <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    5d68:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5d6c:	0963      	lsrs	r3, r4, #5
    5d6e:	d024      	beq.n	5dba <next_sense_cond_call_handler+0xde>
    5d70:	2b01      	cmp	r3, #1
    5d72:	d025      	beq.n	5dc0 <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    5d74:	4f75      	ldr	r7, [pc, #468]	; (5f4c <next_sense_cond_call_handler+0x270>)
    5d76:	f240 232e 	movw	r3, #558	; 0x22e
    5d7a:	463a      	mov	r2, r7
    5d7c:	4974      	ldr	r1, [pc, #464]	; (5f50 <next_sense_cond_call_handler+0x274>)
    5d7e:	4875      	ldr	r0, [pc, #468]	; (5f54 <next_sense_cond_call_handler+0x278>)
    5d80:	f004 f877 	bl	9e72 <assert_print>
    5d84:	f240 212e 	movw	r1, #558	; 0x22e
    5d88:	4638      	mov	r0, r7
    5d8a:	f004 f86b 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    5d8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5d92:	e016      	b.n	5dc2 <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    5d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5d98:	e7e0      	b.n	5d5c <next_sense_cond_call_handler+0x80>
    switch (port)
    5d9a:	2300      	movs	r3, #0
    5d9c:	e7de      	b.n	5d5c <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5d9e:	4d6b      	ldr	r5, [pc, #428]	; (5f4c <next_sense_cond_call_handler+0x270>)
    5da0:	f240 2329 	movw	r3, #553	; 0x229
    5da4:	462a      	mov	r2, r5
    5da6:	496c      	ldr	r1, [pc, #432]	; (5f58 <next_sense_cond_call_handler+0x27c>)
    5da8:	486a      	ldr	r0, [pc, #424]	; (5f54 <next_sense_cond_call_handler+0x278>)
    5daa:	f004 f862 	bl	9e72 <assert_print>
    5dae:	f240 2129 	movw	r1, #553	; 0x229
    5db2:	4628      	mov	r0, r5
    5db4:	f004 f856 	bl	9e64 <assert_post_action>
    5db8:	e7d6      	b.n	5d68 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    5dba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5dbe:	e000      	b.n	5dc2 <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5dc0:	4b66      	ldr	r3, [pc, #408]	; (5f5c <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5dc2:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    5dc6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    5dca:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5dce:	429e      	cmp	r6, r3
    5dd0:	f040 80af 	bne.w	5f32 <next_sense_cond_call_handler+0x256>
    switch (port)
    5dd4:	0963      	lsrs	r3, r4, #5
    5dd6:	d01f      	beq.n	5e18 <next_sense_cond_call_handler+0x13c>
    5dd8:	2b01      	cmp	r3, #1
    5dda:	d120      	bne.n	5e1e <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    5ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5de0:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5de4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5de6:	f013 0f01 	tst.w	r3, #1
    5dea:	d01a      	beq.n	5e22 <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    5dec:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5df0:	0963      	lsrs	r3, r4, #5
    5df2:	d024      	beq.n	5e3e <next_sense_cond_call_handler+0x162>
    5df4:	2b01      	cmp	r3, #1
    5df6:	d025      	beq.n	5e44 <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    5df8:	4f54      	ldr	r7, [pc, #336]	; (5f4c <next_sense_cond_call_handler+0x270>)
    5dfa:	f240 232e 	movw	r3, #558	; 0x22e
    5dfe:	463a      	mov	r2, r7
    5e00:	4953      	ldr	r1, [pc, #332]	; (5f50 <next_sense_cond_call_handler+0x274>)
    5e02:	4854      	ldr	r0, [pc, #336]	; (5f54 <next_sense_cond_call_handler+0x278>)
    5e04:	f004 f835 	bl	9e72 <assert_print>
    5e08:	f240 212e 	movw	r1, #558	; 0x22e
    5e0c:	4638      	mov	r0, r7
    5e0e:	f004 f829 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    5e12:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    5e16:	e016      	b.n	5e46 <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    5e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5e1c:	e7e0      	b.n	5de0 <next_sense_cond_call_handler+0x104>
    switch (port)
    5e1e:	2300      	movs	r3, #0
    5e20:	e7de      	b.n	5de0 <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5e22:	4d4a      	ldr	r5, [pc, #296]	; (5f4c <next_sense_cond_call_handler+0x270>)
    5e24:	f240 2329 	movw	r3, #553	; 0x229
    5e28:	462a      	mov	r2, r5
    5e2a:	494b      	ldr	r1, [pc, #300]	; (5f58 <next_sense_cond_call_handler+0x27c>)
    5e2c:	4849      	ldr	r0, [pc, #292]	; (5f54 <next_sense_cond_call_handler+0x278>)
    5e2e:	f004 f820 	bl	9e72 <assert_print>
    5e32:	f240 2129 	movw	r1, #553	; 0x229
    5e36:	4628      	mov	r0, r5
    5e38:	f004 f814 	bl	9e64 <assert_post_action>
    5e3c:	e7d6      	b.n	5dec <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    5e3e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    5e42:	e000      	b.n	5e46 <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5e44:	4945      	ldr	r1, [pc, #276]	; (5f5c <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5e46:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    5e4a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    5e4e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    5e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    5e56:	0963      	lsrs	r3, r4, #5
    5e58:	d01f      	beq.n	5e9a <next_sense_cond_call_handler+0x1be>
    5e5a:	2b01      	cmp	r3, #1
    5e5c:	d120      	bne.n	5ea0 <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    5e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5e62:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5e66:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5e68:	f013 0f01 	tst.w	r3, #1
    5e6c:	d01a      	beq.n	5ea4 <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    5e6e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5e72:	0964      	lsrs	r4, r4, #5
    5e74:	d024      	beq.n	5ec0 <next_sense_cond_call_handler+0x1e4>
    5e76:	2c01      	cmp	r4, #1
    5e78:	d025      	beq.n	5ec6 <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    5e7a:	4c34      	ldr	r4, [pc, #208]	; (5f4c <next_sense_cond_call_handler+0x270>)
    5e7c:	f240 232e 	movw	r3, #558	; 0x22e
    5e80:	4622      	mov	r2, r4
    5e82:	4933      	ldr	r1, [pc, #204]	; (5f50 <next_sense_cond_call_handler+0x274>)
    5e84:	4833      	ldr	r0, [pc, #204]	; (5f54 <next_sense_cond_call_handler+0x278>)
    5e86:	f003 fff4 	bl	9e72 <assert_print>
    5e8a:	f240 212e 	movw	r1, #558	; 0x22e
    5e8e:	4620      	mov	r0, r4
    5e90:	f003 ffe8 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    5e94:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    5e98:	e016      	b.n	5ec8 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    5e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5e9e:	e7e0      	b.n	5e62 <next_sense_cond_call_handler+0x186>
    switch (port)
    5ea0:	2300      	movs	r3, #0
    5ea2:	e7de      	b.n	5e62 <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5ea4:	4d29      	ldr	r5, [pc, #164]	; (5f4c <next_sense_cond_call_handler+0x270>)
    5ea6:	f240 2329 	movw	r3, #553	; 0x229
    5eaa:	462a      	mov	r2, r5
    5eac:	492a      	ldr	r1, [pc, #168]	; (5f58 <next_sense_cond_call_handler+0x27c>)
    5eae:	4829      	ldr	r0, [pc, #164]	; (5f54 <next_sense_cond_call_handler+0x278>)
    5eb0:	f003 ffdf 	bl	9e72 <assert_print>
    5eb4:	f240 2129 	movw	r1, #553	; 0x229
    5eb8:	4628      	mov	r0, r5
    5eba:	f003 ffd3 	bl	9e64 <assert_post_action>
    5ebe:	e7d6      	b.n	5e6e <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    5ec0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    5ec4:	e000      	b.n	5ec8 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5ec6:	4925      	ldr	r1, [pc, #148]	; (5f5c <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5ec8:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    5ecc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    5ed0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5ed4:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    5ed8:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    5edc:	e029      	b.n	5f32 <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5ede:	f04f 0803 	mov.w	r8, #3
    5ee2:	e709      	b.n	5cf8 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    5ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5ee8:	e70e      	b.n	5d08 <next_sense_cond_call_handler+0x2c>
    switch (port)
    5eea:	2300      	movs	r3, #0
    5eec:	e70c      	b.n	5d08 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5eee:	4f17      	ldr	r7, [pc, #92]	; (5f4c <next_sense_cond_call_handler+0x270>)
    5ef0:	f240 2329 	movw	r3, #553	; 0x229
    5ef4:	463a      	mov	r2, r7
    5ef6:	4918      	ldr	r1, [pc, #96]	; (5f58 <next_sense_cond_call_handler+0x27c>)
    5ef8:	4816      	ldr	r0, [pc, #88]	; (5f54 <next_sense_cond_call_handler+0x278>)
    5efa:	f003 ffba 	bl	9e72 <assert_print>
    5efe:	f240 2129 	movw	r1, #553	; 0x229
    5f02:	4638      	mov	r0, r7
    5f04:	f003 ffae 	bl	9e64 <assert_post_action>
    5f08:	e705      	b.n	5d16 <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    5f0a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    5f0e:	e000      	b.n	5f12 <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5f10:	4912      	ldr	r1, [pc, #72]	; (5f5c <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5f12:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    5f16:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    5f1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    5f22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5f26:	2d03      	cmp	r5, #3
    5f28:	d007      	beq.n	5f3a <next_sense_cond_call_handler+0x25e>
    5f2a:	2e02      	cmp	r6, #2
    5f2c:	d003      	beq.n	5f36 <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5f2e:	2e03      	cmp	r6, #3
    5f30:	d008      	beq.n	5f44 <next_sense_cond_call_handler+0x268>
}
    5f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5f36:	2d01      	cmp	r5, #1
    5f38:	d1f9      	bne.n	5f2e <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    5f3a:	4629      	mov	r1, r5
    5f3c:	4620      	mov	r0, r4
    5f3e:	f7ff fde1 	bl	5b04 <call_handler>
}
    5f42:	e7f6      	b.n	5f32 <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5f44:	2d02      	cmp	r5, #2
    5f46:	d1f4      	bne.n	5f32 <next_sense_cond_call_handler+0x256>
    5f48:	e7f7      	b.n	5f3a <next_sense_cond_call_handler+0x25e>
    5f4a:	bf00      	nop
    5f4c:	0000c2b8 	.word	0x0000c2b8
    5f50:	0000b83c 	.word	0x0000b83c
    5f54:	0000b180 	.word	0x0000b180
    5f58:	0000c2ec 	.word	0x0000c2ec
    5f5c:	50000300 	.word	0x50000300

00005f60 <port_event_handle>:
{
    5f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f64:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    5f66:	4a65      	ldr	r2, [pc, #404]	; (60fc <port_event_handle+0x19c>)
    5f68:	466b      	mov	r3, sp
    5f6a:	e892 0003 	ldmia.w	r2, {r0, r1}
    5f6e:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    5f72:	2300      	movs	r3, #0
    5f74:	a802      	add	r0, sp, #8
    5f76:	e00b      	b.n	5f90 <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    5f78:	aa04      	add	r2, sp, #16
    5f7a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    5f7e:	f852 2c10 	ldr.w	r2, [r2, #-16]
    5f82:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    5f86:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    5f8a:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    5f8e:	3301      	adds	r3, #1
    5f90:	2b01      	cmp	r3, #1
    5f92:	d9f1      	bls.n	5f78 <port_event_handle+0x18>
    5f94:	e0ad      	b.n	60f2 <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    5f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5f9a:	e07f      	b.n	609c <port_event_handle+0x13c>
    switch (port)
    5f9c:	2300      	movs	r3, #0
    5f9e:	e07d      	b.n	609c <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5fa0:	4f57      	ldr	r7, [pc, #348]	; (6100 <port_event_handle+0x1a0>)
    5fa2:	f240 2329 	movw	r3, #553	; 0x229
    5fa6:	463a      	mov	r2, r7
    5fa8:	4956      	ldr	r1, [pc, #344]	; (6104 <port_event_handle+0x1a4>)
    5faa:	4857      	ldr	r0, [pc, #348]	; (6108 <port_event_handle+0x1a8>)
    5fac:	f003 ff61 	bl	9e72 <assert_print>
    5fb0:	f240 2129 	movw	r1, #553	; 0x229
    5fb4:	4638      	mov	r0, r7
    5fb6:	f003 ff55 	bl	9e64 <assert_post_action>
    5fba:	e076      	b.n	60aa <port_event_handle+0x14a>
        case 0: return NRF_P0;
    5fbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5fc0:	e000      	b.n	5fc4 <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5fc2:	4b52      	ldr	r3, [pc, #328]	; (610c <port_event_handle+0x1ac>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5fc4:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    5fc8:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    5fcc:	f3c2 4201 	ubfx	r2, r2, #16, #2
    5fd0:	4631      	mov	r1, r6
    5fd2:	4620      	mov	r0, r4
    5fd4:	f7ff fe82 	bl	5cdc <next_sense_cond_call_handler>
    switch (port)
    5fd8:	0963      	lsrs	r3, r4, #5
    5fda:	d01f      	beq.n	601c <port_event_handle+0xbc>
    5fdc:	2b01      	cmp	r3, #1
    5fde:	d120      	bne.n	6022 <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    5fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5fe4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5fe8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5fea:	f013 0f01 	tst.w	r3, #1
    5fee:	d01a      	beq.n	6026 <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    5ff0:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5ff4:	0964      	lsrs	r4, r4, #5
    5ff6:	d024      	beq.n	6042 <port_event_handle+0xe2>
    5ff8:	2c01      	cmp	r4, #1
    5ffa:	d025      	beq.n	6048 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    5ffc:	4c40      	ldr	r4, [pc, #256]	; (6100 <port_event_handle+0x1a0>)
    5ffe:	f240 232e 	movw	r3, #558	; 0x22e
    6002:	4622      	mov	r2, r4
    6004:	4942      	ldr	r1, [pc, #264]	; (6110 <port_event_handle+0x1b0>)
    6006:	4840      	ldr	r0, [pc, #256]	; (6108 <port_event_handle+0x1a8>)
    6008:	f003 ff33 	bl	9e72 <assert_print>
    600c:	f240 212e 	movw	r1, #558	; 0x22e
    6010:	4620      	mov	r0, r4
    6012:	f003 ff27 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    6016:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    601a:	e016      	b.n	604a <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    601c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6020:	e7e0      	b.n	5fe4 <port_event_handle+0x84>
    switch (port)
    6022:	2300      	movs	r3, #0
    6024:	e7de      	b.n	5fe4 <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6026:	4e36      	ldr	r6, [pc, #216]	; (6100 <port_event_handle+0x1a0>)
    6028:	f240 2329 	movw	r3, #553	; 0x229
    602c:	4632      	mov	r2, r6
    602e:	4935      	ldr	r1, [pc, #212]	; (6104 <port_event_handle+0x1a4>)
    6030:	4835      	ldr	r0, [pc, #212]	; (6108 <port_event_handle+0x1a8>)
    6032:	f003 ff1e 	bl	9e72 <assert_print>
    6036:	f240 2129 	movw	r1, #553	; 0x229
    603a:	4630      	mov	r0, r6
    603c:	f003 ff12 	bl	9e64 <assert_post_action>
    6040:	e7d6      	b.n	5ff0 <port_event_handle+0x90>
        case 0: return NRF_P0;
    6042:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6046:	e000      	b.n	604a <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6048:	4a30      	ldr	r2, [pc, #192]	; (610c <port_event_handle+0x1ac>)
    reg->LATCH = (1 << pin_number);
    604a:	2301      	movs	r3, #1
    604c:	40b3      	lsls	r3, r6
    604e:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    6052:	ab04      	add	r3, sp, #16
    6054:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6058:	f853 4c08 	ldr.w	r4, [r3, #-8]
    605c:	2c00      	cmp	r4, #0
    605e:	d03b      	beq.n	60d8 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    6060:	fa94 f4a4 	rbit	r4, r4
    6064:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    6068:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    606c:	f104 0208 	add.w	r2, r4, #8
    6070:	4b28      	ldr	r3, [pc, #160]	; (6114 <port_event_handle+0x1b4>)
    6072:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    6076:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    607a:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    607c:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    6080:	a802      	add	r0, sp, #8
    6082:	2301      	movs	r3, #1
    6084:	fa03 f202 	lsl.w	r2, r3, r2
    6088:	5c43      	ldrb	r3, [r0, r1]
    608a:	ea23 0302 	bic.w	r3, r3, r2
    608e:	5443      	strb	r3, [r0, r1]
    switch (port)
    6090:	0963      	lsrs	r3, r4, #5
    6092:	d080      	beq.n	5f96 <port_event_handle+0x36>
    6094:	2b01      	cmp	r3, #1
    6096:	d181      	bne.n	5f9c <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    6098:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    609c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    60a0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    60a2:	f013 0f01 	tst.w	r3, #1
    60a6:	f43f af7b 	beq.w	5fa0 <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    60aa:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    60ae:	0963      	lsrs	r3, r4, #5
    60b0:	d084      	beq.n	5fbc <port_event_handle+0x5c>
    60b2:	2b01      	cmp	r3, #1
    60b4:	d085      	beq.n	5fc2 <port_event_handle+0x62>
            NRFX_ASSERT(0);
    60b6:	f8df 8048 	ldr.w	r8, [pc, #72]	; 6100 <port_event_handle+0x1a0>
    60ba:	f240 232e 	movw	r3, #558	; 0x22e
    60be:	4642      	mov	r2, r8
    60c0:	4913      	ldr	r1, [pc, #76]	; (6110 <port_event_handle+0x1b0>)
    60c2:	4811      	ldr	r0, [pc, #68]	; (6108 <port_event_handle+0x1a8>)
    60c4:	f003 fed5 	bl	9e72 <assert_print>
    60c8:	f240 212e 	movw	r1, #558	; 0x22e
    60cc:	4640      	mov	r0, r8
    60ce:	f003 fec9 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    60d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    60d6:	e775      	b.n	5fc4 <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    60d8:	3501      	adds	r5, #1
    60da:	2d01      	cmp	r5, #1
    60dc:	d9b9      	bls.n	6052 <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    60de:	4b0e      	ldr	r3, [pc, #56]	; (6118 <port_event_handle+0x1b8>)
    60e0:	2200      	movs	r2, #0
    60e2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    60e6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    60ea:	a802      	add	r0, sp, #8
    60ec:	f7ff fdce 	bl	5c8c <latch_pending_read_and_check>
    60f0:	b108      	cbz	r0, 60f6 <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    60f2:	2500      	movs	r5, #0
    60f4:	e7f1      	b.n	60da <port_event_handle+0x17a>
}
    60f6:	b004      	add	sp, #16
    60f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    60fc:	0000b050 	.word	0x0000b050
    6100:	0000c2b8 	.word	0x0000c2b8
    6104:	0000c2ec 	.word	0x0000c2ec
    6108:	0000b180 	.word	0x0000b180
    610c:	50000300 	.word	0x50000300
    6110:	0000b83c 	.word	0x0000b83c
    6114:	2000405c 	.word	0x2000405c
    6118:	40006000 	.word	0x40006000

0000611c <nrfx_gpiote_input_configure>:
{
    611c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6120:	4604      	mov	r4, r0
    6122:	4615      	mov	r5, r2
    6124:	461e      	mov	r6, r3
    if (p_input_config)
    6126:	2900      	cmp	r1, #0
    6128:	d064      	beq.n	61f4 <nrfx_gpiote_input_configure+0xd8>
    612a:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    612c:	f004 fcd8 	bl	aae0 <pin_is_task_output>
    6130:	2800      	cmp	r0, #0
    6132:	f040 80cd 	bne.w	62d0 <nrfx_gpiote_input_configure+0x1b4>
    switch (port)
    6136:	0963      	lsrs	r3, r4, #5
    6138:	d020      	beq.n	617c <nrfx_gpiote_input_configure+0x60>
    613a:	2b01      	cmp	r3, #1
    613c:	d121      	bne.n	6182 <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    613e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6142:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6146:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6148:	f013 0f01 	tst.w	r3, #1
    614c:	d01b      	beq.n	6186 <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    614e:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6152:	0963      	lsrs	r3, r4, #5
    6154:	d025      	beq.n	61a2 <nrfx_gpiote_input_configure+0x86>
    6156:	2b01      	cmp	r3, #1
    6158:	d026      	beq.n	61a8 <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    615a:	f8df 9184 	ldr.w	r9, [pc, #388]	; 62e0 <nrfx_gpiote_input_configure+0x1c4>
    615e:	f240 232e 	movw	r3, #558	; 0x22e
    6162:	464a      	mov	r2, r9
    6164:	495f      	ldr	r1, [pc, #380]	; (62e4 <nrfx_gpiote_input_configure+0x1c8>)
    6166:	4860      	ldr	r0, [pc, #384]	; (62e8 <nrfx_gpiote_input_configure+0x1cc>)
    6168:	f003 fe83 	bl	9e72 <assert_print>
    616c:	f240 212e 	movw	r1, #558	; 0x22e
    6170:	4648      	mov	r0, r9
    6172:	f003 fe77 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    6176:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    617a:	e016      	b.n	61aa <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    617c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6180:	e7df      	b.n	6142 <nrfx_gpiote_input_configure+0x26>
    switch (port)
    6182:	2300      	movs	r3, #0
    6184:	e7dd      	b.n	6142 <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6186:	4f56      	ldr	r7, [pc, #344]	; (62e0 <nrfx_gpiote_input_configure+0x1c4>)
    6188:	f240 2329 	movw	r3, #553	; 0x229
    618c:	463a      	mov	r2, r7
    618e:	4957      	ldr	r1, [pc, #348]	; (62ec <nrfx_gpiote_input_configure+0x1d0>)
    6190:	4855      	ldr	r0, [pc, #340]	; (62e8 <nrfx_gpiote_input_configure+0x1cc>)
    6192:	f003 fe6e 	bl	9e72 <assert_print>
    6196:	f240 2129 	movw	r1, #553	; 0x229
    619a:	4638      	mov	r0, r7
    619c:	f003 fe62 	bl	9e64 <assert_post_action>
    61a0:	e7d5      	b.n	614e <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    61a2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    61a6:	e000      	b.n	61aa <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    61a8:	4951      	ldr	r1, [pc, #324]	; (62f0 <nrfx_gpiote_input_configure+0x1d4>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    61aa:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    61ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    61b2:	f1b8 0f00 	cmp.w	r8, #0
    61b6:	d03f      	beq.n	6238 <nrfx_gpiote_input_configure+0x11c>
    61b8:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    61ba:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    61be:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    61c2:	f1b8 0f00 	cmp.w	r8, #0
    61c6:	d039      	beq.n	623c <nrfx_gpiote_input_configure+0x120>
    61c8:	f898 2000 	ldrb.w	r2, [r8]
    61cc:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    61ce:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    61d0:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    61d4:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    61d8:	4a46      	ldr	r2, [pc, #280]	; (62f4 <nrfx_gpiote_input_configure+0x1d8>)
    61da:	f104 0108 	add.w	r1, r4, #8
    61de:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    61e2:	f023 0302 	bic.w	r3, r3, #2
    61e6:	b29b      	uxth	r3, r3
    61e8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    61ec:	f043 0301 	orr.w	r3, r3, #1
    61f0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    61f4:	b1bd      	cbz	r5, 6226 <nrfx_gpiote_input_configure+0x10a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    61f6:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    61f8:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    61fc:	4620      	mov	r0, r4
    61fe:	f7ff fc2f 	bl	5a60 <pin_is_output>
    6202:	b1e8      	cbz	r0, 6240 <nrfx_gpiote_input_configure+0x124>
            if (use_evt)
    6204:	f1b8 0f00 	cmp.w	r8, #0
    6208:	d164      	bne.n	62d4 <nrfx_gpiote_input_configure+0x1b8>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    620a:	4a3a      	ldr	r2, [pc, #232]	; (62f4 <nrfx_gpiote_input_configure+0x1d8>)
    620c:	f104 0108 	add.w	r1, r4, #8
    6210:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6214:	f023 031c 	bic.w	r3, r3, #28
    6218:	b29b      	uxth	r3, r3
    621a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    621e:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    6222:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    6226:	2e00      	cmp	r6, #0
    6228:	d058      	beq.n	62dc <nrfx_gpiote_input_configure+0x1c0>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    622a:	6872      	ldr	r2, [r6, #4]
    622c:	6831      	ldr	r1, [r6, #0]
    622e:	4620      	mov	r0, r4
    6230:	f7ff fcd4 	bl	5bdc <pin_handler_set>
}
    6234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6238:	2200      	movs	r2, #0
    623a:	e7be      	b.n	61ba <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    623c:	2200      	movs	r2, #0
    623e:	e7c6      	b.n	61ce <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6240:	4a2c      	ldr	r2, [pc, #176]	; (62f4 <nrfx_gpiote_input_configure+0x1d8>)
    6242:	f104 0108 	add.w	r1, r4, #8
    6246:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    624a:	f023 0320 	bic.w	r3, r3, #32
    624e:	04db      	lsls	r3, r3, #19
    6250:	0cdb      	lsrs	r3, r3, #19
    6252:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    6256:	f1b8 0f00 	cmp.w	r8, #0
    625a:	d0d6      	beq.n	620a <nrfx_gpiote_input_configure+0xee>
                if (!edge)
    625c:	2f03      	cmp	r7, #3
    625e:	d83b      	bhi.n	62d8 <nrfx_gpiote_input_configure+0x1bc>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6260:	686b      	ldr	r3, [r5, #4]
    6262:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    6264:	b937      	cbnz	r7, 6274 <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    6266:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    626a:	4b23      	ldr	r3, [pc, #140]	; (62f8 <nrfx_gpiote_input_configure+0x1dc>)
    626c:	2200      	movs	r2, #0
    626e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    6272:	e7ca      	b.n	620a <nrfx_gpiote_input_configure+0xee>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    6274:	4638      	mov	r0, r7
    6276:	f004 fc4a 	bl	ab0e <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    627a:	4b1f      	ldr	r3, [pc, #124]	; (62f8 <nrfx_gpiote_input_configure+0x1dc>)
    627c:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    6280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    6284:	f021 0103 	bic.w	r1, r1, #3
    6288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    628c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    6290:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    6294:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    6298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    629c:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    62a0:	0221      	lsls	r1, r4, #8
    62a2:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    62a6:	0400      	lsls	r0, r0, #16
    62a8:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    62ac:	4301      	orrs	r1, r0
    62ae:	ea4c 0101 	orr.w	r1, ip, r1
    62b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    62b6:	036b      	lsls	r3, r5, #13
    62b8:	b29b      	uxth	r3, r3
    62ba:	4a0e      	ldr	r2, [pc, #56]	; (62f4 <nrfx_gpiote_input_configure+0x1d8>)
    62bc:	f104 0108 	add.w	r1, r4, #8
    62c0:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    62c4:	4303      	orrs	r3, r0
    62c6:	f043 0320 	orr.w	r3, r3, #32
    62ca:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    62ce:	e79c      	b.n	620a <nrfx_gpiote_input_configure+0xee>
            return NRFX_ERROR_INVALID_PARAM;
    62d0:	480a      	ldr	r0, [pc, #40]	; (62fc <nrfx_gpiote_input_configure+0x1e0>)
    62d2:	e7af      	b.n	6234 <nrfx_gpiote_input_configure+0x118>
                return NRFX_ERROR_INVALID_PARAM;
    62d4:	4809      	ldr	r0, [pc, #36]	; (62fc <nrfx_gpiote_input_configure+0x1e0>)
    62d6:	e7ad      	b.n	6234 <nrfx_gpiote_input_configure+0x118>
                    return NRFX_ERROR_INVALID_PARAM;
    62d8:	4808      	ldr	r0, [pc, #32]	; (62fc <nrfx_gpiote_input_configure+0x1e0>)
    62da:	e7ab      	b.n	6234 <nrfx_gpiote_input_configure+0x118>
        err = NRFX_SUCCESS;
    62dc:	4808      	ldr	r0, [pc, #32]	; (6300 <nrfx_gpiote_input_configure+0x1e4>)
    62de:	e7a9      	b.n	6234 <nrfx_gpiote_input_configure+0x118>
    62e0:	0000c2b8 	.word	0x0000c2b8
    62e4:	0000b83c 	.word	0x0000b83c
    62e8:	0000b180 	.word	0x0000b180
    62ec:	0000c2ec 	.word	0x0000c2ec
    62f0:	50000300 	.word	0x50000300
    62f4:	2000405c 	.word	0x2000405c
    62f8:	40006000 	.word	0x40006000
    62fc:	0bad0004 	.word	0x0bad0004
    6300:	0bad0000 	.word	0x0bad0000

00006304 <nrfx_gpiote_output_configure>:
{
    6304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6308:	4604      	mov	r4, r0
    630a:	4615      	mov	r5, r2
    if (p_config)
    630c:	2900      	cmp	r1, #0
    630e:	f000 8086 	beq.w	641e <nrfx_gpiote_output_configure+0x11a>
    6312:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6314:	f004 fbf3 	bl	aafe <pin_is_input>
    6318:	b128      	cbz	r0, 6326 <nrfx_gpiote_output_configure+0x22>
    631a:	4620      	mov	r0, r4
    631c:	f7ff fb8a 	bl	5a34 <pin_in_use_by_te>
    6320:	2800      	cmp	r0, #0
    6322:	f040 80ce 	bne.w	64c2 <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    6326:	4620      	mov	r0, r4
    6328:	f7ff fb8e 	bl	5a48 <pin_has_trigger>
    632c:	b118      	cbz	r0, 6336 <nrfx_gpiote_output_configure+0x32>
    632e:	787b      	ldrb	r3, [r7, #1]
    6330:	2b01      	cmp	r3, #1
    6332:	f000 80c8 	beq.w	64c6 <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    6336:	f107 0901 	add.w	r9, r7, #1
    633a:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    633e:	0963      	lsrs	r3, r4, #5
    6340:	d020      	beq.n	6384 <nrfx_gpiote_output_configure+0x80>
    6342:	2b01      	cmp	r3, #1
    6344:	d121      	bne.n	638a <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    6346:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    634a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    634e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6350:	f013 0f01 	tst.w	r3, #1
    6354:	d01b      	beq.n	638e <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    6356:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    635a:	0963      	lsrs	r3, r4, #5
    635c:	d025      	beq.n	63aa <nrfx_gpiote_output_configure+0xa6>
    635e:	2b01      	cmp	r3, #1
    6360:	d026      	beq.n	63b0 <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    6362:	f8df a170 	ldr.w	sl, [pc, #368]	; 64d4 <nrfx_gpiote_output_configure+0x1d0>
    6366:	f240 232e 	movw	r3, #558	; 0x22e
    636a:	4652      	mov	r2, sl
    636c:	495a      	ldr	r1, [pc, #360]	; (64d8 <nrfx_gpiote_output_configure+0x1d4>)
    636e:	485b      	ldr	r0, [pc, #364]	; (64dc <nrfx_gpiote_output_configure+0x1d8>)
    6370:	f003 fd7f 	bl	9e72 <assert_print>
    6374:	f240 212e 	movw	r1, #558	; 0x22e
    6378:	4650      	mov	r0, sl
    637a:	f003 fd73 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    637e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6382:	e016      	b.n	63b2 <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    6384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6388:	e7df      	b.n	634a <nrfx_gpiote_output_configure+0x46>
    switch (port)
    638a:	2300      	movs	r3, #0
    638c:	e7dd      	b.n	634a <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    638e:	4e51      	ldr	r6, [pc, #324]	; (64d4 <nrfx_gpiote_output_configure+0x1d0>)
    6390:	f240 2329 	movw	r3, #553	; 0x229
    6394:	4632      	mov	r2, r6
    6396:	4952      	ldr	r1, [pc, #328]	; (64e0 <nrfx_gpiote_output_configure+0x1dc>)
    6398:	4850      	ldr	r0, [pc, #320]	; (64dc <nrfx_gpiote_output_configure+0x1d8>)
    639a:	f003 fd6a 	bl	9e72 <assert_print>
    639e:	f240 2129 	movw	r1, #553	; 0x229
    63a2:	4630      	mov	r0, r6
    63a4:	f003 fd5e 	bl	9e64 <assert_post_action>
    63a8:	e7d5      	b.n	6356 <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    63aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    63ae:	e000      	b.n	63b2 <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    63b0:	4a4c      	ldr	r2, [pc, #304]	; (64e4 <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    63b2:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    63b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    63ba:	f1b9 0f00 	cmp.w	r9, #0
    63be:	d04b      	beq.n	6458 <nrfx_gpiote_output_configure+0x154>
    63c0:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    63c2:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    63c6:	f1b8 0f00 	cmp.w	r8, #0
    63ca:	d047      	beq.n	645c <nrfx_gpiote_output_configure+0x158>
    63cc:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    63ce:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    63d0:	2f00      	cmp	r7, #0
    63d2:	d045      	beq.n	6460 <nrfx_gpiote_output_configure+0x15c>
    63d4:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    63d8:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    63da:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    63de:	f1b9 0f00 	cmp.w	r9, #0
    63e2:	d03f      	beq.n	6464 <nrfx_gpiote_output_configure+0x160>
    63e4:	787b      	ldrb	r3, [r7, #1]
    63e6:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    63e8:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    63ec:	f1b8 0f00 	cmp.w	r8, #0
    63f0:	d03a      	beq.n	6468 <nrfx_gpiote_output_configure+0x164>
    63f2:	78b8      	ldrb	r0, [r7, #2]
    63f4:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    63f6:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    63f8:	2f00      	cmp	r7, #0
    63fa:	d037      	beq.n	646c <nrfx_gpiote_output_configure+0x168>
    63fc:	7838      	ldrb	r0, [r7, #0]
    63fe:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6400:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6402:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    6404:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    6408:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    640c:	4a36      	ldr	r2, [pc, #216]	; (64e8 <nrfx_gpiote_output_configure+0x1e4>)
    640e:	f104 0108 	add.w	r1, r4, #8
    6412:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6416:	f043 0303 	orr.w	r3, r3, #3
    641a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    641e:	2d00      	cmp	r5, #0
    6420:	d053      	beq.n	64ca <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    6422:	4620      	mov	r0, r4
    6424:	f004 fb6b 	bl	aafe <pin_is_input>
    6428:	2800      	cmp	r0, #0
    642a:	d150      	bne.n	64ce <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    642c:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    642e:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    6432:	4a2e      	ldr	r2, [pc, #184]	; (64ec <nrfx_gpiote_output_configure+0x1e8>)
    6434:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6438:	492b      	ldr	r1, [pc, #172]	; (64e8 <nrfx_gpiote_output_configure+0x1e4>)
    643a:	f104 0008 	add.w	r0, r4, #8
    643e:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    6442:	f022 0220 	bic.w	r2, r2, #32
    6446:	04d2      	lsls	r2, r2, #19
    6448:	0cd2      	lsrs	r2, r2, #19
    644a:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    644e:	786a      	ldrb	r2, [r5, #1]
    6450:	b972      	cbnz	r2, 6470 <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    6452:	4827      	ldr	r0, [pc, #156]	; (64f0 <nrfx_gpiote_output_configure+0x1ec>)
}
    6454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6458:	2300      	movs	r3, #0
    645a:	e7b2      	b.n	63c2 <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    645c:	2000      	movs	r0, #0
    645e:	e7b6      	b.n	63ce <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6460:	2000      	movs	r0, #0
    6462:	e7b9      	b.n	63d8 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6464:	2300      	movs	r3, #0
    6466:	e7bf      	b.n	63e8 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6468:	2000      	movs	r0, #0
    646a:	e7c4      	b.n	63f6 <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    646c:	2000      	movs	r0, #0
    646e:	e7c7      	b.n	6400 <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    6470:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6472:	481e      	ldr	r0, [pc, #120]	; (64ec <nrfx_gpiote_output_configure+0x1e8>)
    6474:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    6478:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    647c:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    6480:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    6484:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6488:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    648c:	0221      	lsls	r1, r4, #8
    648e:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6492:	0412      	lsls	r2, r2, #16
    6494:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6498:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    649a:	0539      	lsls	r1, r7, #20
    649c:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    64a0:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    64a2:	4332      	orrs	r2, r6
    64a4:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    64a8:	035b      	lsls	r3, r3, #13
    64aa:	b29b      	uxth	r3, r3
    64ac:	4a0e      	ldr	r2, [pc, #56]	; (64e8 <nrfx_gpiote_output_configure+0x1e4>)
    64ae:	3408      	adds	r4, #8
    64b0:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    64b4:	430b      	orrs	r3, r1
    64b6:	f043 0320 	orr.w	r3, r3, #32
    64ba:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    64be:	480c      	ldr	r0, [pc, #48]	; (64f0 <nrfx_gpiote_output_configure+0x1ec>)
    64c0:	e7c8      	b.n	6454 <nrfx_gpiote_output_configure+0x150>
    64c2:	480c      	ldr	r0, [pc, #48]	; (64f4 <nrfx_gpiote_output_configure+0x1f0>)
    64c4:	e7c6      	b.n	6454 <nrfx_gpiote_output_configure+0x150>
    64c6:	480b      	ldr	r0, [pc, #44]	; (64f4 <nrfx_gpiote_output_configure+0x1f0>)
    64c8:	e7c4      	b.n	6454 <nrfx_gpiote_output_configure+0x150>
    64ca:	4809      	ldr	r0, [pc, #36]	; (64f0 <nrfx_gpiote_output_configure+0x1ec>)
    64cc:	e7c2      	b.n	6454 <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    64ce:	4809      	ldr	r0, [pc, #36]	; (64f4 <nrfx_gpiote_output_configure+0x1f0>)
    64d0:	e7c0      	b.n	6454 <nrfx_gpiote_output_configure+0x150>
    64d2:	bf00      	nop
    64d4:	0000c2b8 	.word	0x0000c2b8
    64d8:	0000b83c 	.word	0x0000b83c
    64dc:	0000b180 	.word	0x0000b180
    64e0:	0000c2ec 	.word	0x0000c2ec
    64e4:	50000300 	.word	0x50000300
    64e8:	2000405c 	.word	0x2000405c
    64ec:	40006000 	.word	0x40006000
    64f0:	0bad0000 	.word	0x0bad0000
    64f4:	0bad0004 	.word	0x0bad0004

000064f8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    64f8:	4b01      	ldr	r3, [pc, #4]	; (6500 <nrfx_gpiote_global_callback_set+0x8>)
    64fa:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    64fc:	60d9      	str	r1, [r3, #12]
}
    64fe:	4770      	bx	lr
    6500:	2000405c 	.word	0x2000405c

00006504 <nrfx_gpiote_channel_get>:
{
    6504:	b570      	push	{r4, r5, r6, lr}
    6506:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    6508:	460d      	mov	r5, r1
    650a:	b159      	cbz	r1, 6524 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    650c:	4620      	mov	r0, r4
    650e:	f7ff fa91 	bl	5a34 <pin_in_use_by_te>
    6512:	b1a8      	cbz	r0, 6540 <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6514:	3408      	adds	r4, #8
    6516:	4b0b      	ldr	r3, [pc, #44]	; (6544 <nrfx_gpiote_channel_get+0x40>)
    6518:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    651c:	0b5b      	lsrs	r3, r3, #13
    651e:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    6520:	4809      	ldr	r0, [pc, #36]	; (6548 <nrfx_gpiote_channel_get+0x44>)
}
    6522:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    6524:	4e09      	ldr	r6, [pc, #36]	; (654c <nrfx_gpiote_channel_get+0x48>)
    6526:	f240 2335 	movw	r3, #565	; 0x235
    652a:	4632      	mov	r2, r6
    652c:	4908      	ldr	r1, [pc, #32]	; (6550 <nrfx_gpiote_channel_get+0x4c>)
    652e:	4809      	ldr	r0, [pc, #36]	; (6554 <nrfx_gpiote_channel_get+0x50>)
    6530:	f003 fc9f 	bl	9e72 <assert_print>
    6534:	f240 2135 	movw	r1, #565	; 0x235
    6538:	4630      	mov	r0, r6
    653a:	f003 fc93 	bl	9e64 <assert_post_action>
    653e:	e7e5      	b.n	650c <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    6540:	4805      	ldr	r0, [pc, #20]	; (6558 <nrfx_gpiote_channel_get+0x54>)
    6542:	e7ee      	b.n	6522 <nrfx_gpiote_channel_get+0x1e>
    6544:	2000405c 	.word	0x2000405c
    6548:	0bad0000 	.word	0x0bad0000
    654c:	0000c4dc 	.word	0x0000c4dc
    6550:	0000c530 	.word	0x0000c530
    6554:	0000b180 	.word	0x0000b180
    6558:	0bad0004 	.word	0x0bad0004

0000655c <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    655c:	4b10      	ldr	r3, [pc, #64]	; (65a0 <nrfx_gpiote_init+0x44>)
    655e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6562:	b10b      	cbz	r3, 6568 <nrfx_gpiote_init+0xc>
        return err_code;
    6564:	480f      	ldr	r0, [pc, #60]	; (65a4 <nrfx_gpiote_init+0x48>)
}
    6566:	4770      	bx	lr
{
    6568:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    656a:	4c0d      	ldr	r4, [pc, #52]	; (65a0 <nrfx_gpiote_init+0x44>)
    656c:	2260      	movs	r2, #96	; 0x60
    656e:	2100      	movs	r1, #0
    6570:	f104 0010 	add.w	r0, r4, #16
    6574:	f003 fe39 	bl	a1ea <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6578:	2006      	movs	r0, #6
    657a:	f7fc fb7f 	bl	2c7c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    657e:	4b0a      	ldr	r3, [pc, #40]	; (65a8 <nrfx_gpiote_init+0x4c>)
    6580:	2200      	movs	r2, #0
    6582:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    6586:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    658a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    658e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6592:	2301      	movs	r3, #1
    6594:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6598:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    659a:	4804      	ldr	r0, [pc, #16]	; (65ac <nrfx_gpiote_init+0x50>)
}
    659c:	bd10      	pop	{r4, pc}
    659e:	bf00      	nop
    65a0:	2000405c 	.word	0x2000405c
    65a4:	0bad0005 	.word	0x0bad0005
    65a8:	40006000 	.word	0x40006000
    65ac:	0bad0000 	.word	0x0bad0000

000065b0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    65b0:	4b03      	ldr	r3, [pc, #12]	; (65c0 <nrfx_gpiote_is_init+0x10>)
    65b2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    65b6:	3800      	subs	r0, #0
    65b8:	bf18      	it	ne
    65ba:	2001      	movne	r0, #1
    65bc:	4770      	bx	lr
    65be:	bf00      	nop
    65c0:	2000405c 	.word	0x2000405c

000065c4 <nrfx_gpiote_channel_free>:
{
    65c4:	b508      	push	{r3, lr}
    65c6:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    65c8:	4801      	ldr	r0, [pc, #4]	; (65d0 <nrfx_gpiote_channel_free+0xc>)
    65ca:	f7ff f855 	bl	5678 <nrfx_flag32_free>
}
    65ce:	bd08      	pop	{r3, pc}
    65d0:	200040cc 	.word	0x200040cc

000065d4 <nrfx_gpiote_channel_alloc>:
{
    65d4:	b508      	push	{r3, lr}
    65d6:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    65d8:	4801      	ldr	r0, [pc, #4]	; (65e0 <nrfx_gpiote_channel_alloc+0xc>)
    65da:	f7ff f825 	bl	5628 <nrfx_flag32_alloc>
}
    65de:	bd08      	pop	{r3, pc}
    65e0:	200040cc 	.word	0x200040cc

000065e4 <nrfx_gpiote_trigger_enable>:
{
    65e4:	b570      	push	{r4, r5, r6, lr}
    65e6:	4604      	mov	r4, r0
    65e8:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    65ea:	f7ff fa2d 	bl	5a48 <pin_has_trigger>
    65ee:	b1b8      	cbz	r0, 6620 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    65f0:	4620      	mov	r0, r4
    65f2:	f7ff fa1f 	bl	5a34 <pin_in_use_by_te>
    65f6:	b118      	cbz	r0, 6600 <nrfx_gpiote_trigger_enable+0x1c>
    65f8:	4620      	mov	r0, r4
    65fa:	f004 fa80 	bl	aafe <pin_is_input>
    65fe:	b9e8      	cbnz	r0, 663c <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    6600:	2d00      	cmp	r5, #0
    6602:	d04c      	beq.n	669e <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6604:	f104 0308 	add.w	r3, r4, #8
    6608:	4a70      	ldr	r2, [pc, #448]	; (67cc <nrfx_gpiote_trigger_enable+0x1e8>)
    660a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    660e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6612:	2b04      	cmp	r3, #4
    6614:	f000 8092 	beq.w	673c <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    6618:	2b05      	cmp	r3, #5
    661a:	d14e      	bne.n	66ba <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    661c:	2602      	movs	r6, #2
    661e:	e08e      	b.n	673e <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    6620:	4e6b      	ldr	r6, [pc, #428]	; (67d0 <nrfx_gpiote_trigger_enable+0x1ec>)
    6622:	f240 33df 	movw	r3, #991	; 0x3df
    6626:	4632      	mov	r2, r6
    6628:	496a      	ldr	r1, [pc, #424]	; (67d4 <nrfx_gpiote_trigger_enable+0x1f0>)
    662a:	486b      	ldr	r0, [pc, #428]	; (67d8 <nrfx_gpiote_trigger_enable+0x1f4>)
    662c:	f003 fc21 	bl	9e72 <assert_print>
    6630:	f240 31df 	movw	r1, #991	; 0x3df
    6634:	4630      	mov	r0, r6
    6636:	f003 fc15 	bl	9e64 <assert_post_action>
    663a:	e7d9      	b.n	65f0 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    663c:	4620      	mov	r0, r4
    663e:	f7ff fa19 	bl	5a74 <pin_te_get>
    6642:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    6644:	2807      	cmp	r0, #7
    6646:	d81c      	bhi.n	6682 <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6648:	00a3      	lsls	r3, r4, #2
    664a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    664e:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    6650:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6654:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6658:	2200      	movs	r2, #0
    665a:	601a      	str	r2, [r3, #0]
    665c:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    665e:	4a5f      	ldr	r2, [pc, #380]	; (67dc <nrfx_gpiote_trigger_enable+0x1f8>)
    6660:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    6664:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    6668:	f043 0301 	orr.w	r3, r3, #1
    666c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    6670:	2d00      	cmp	r5, #0
    6672:	f000 80a9 	beq.w	67c8 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    6676:	2001      	movs	r0, #1
    6678:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    667c:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    6680:	e0a2      	b.n	67c8 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    6682:	4e57      	ldr	r6, [pc, #348]	; (67e0 <nrfx_gpiote_trigger_enable+0x1fc>)
    6684:	f44f 7323 	mov.w	r3, #652	; 0x28c
    6688:	4632      	mov	r2, r6
    668a:	4956      	ldr	r1, [pc, #344]	; (67e4 <nrfx_gpiote_trigger_enable+0x200>)
    668c:	4852      	ldr	r0, [pc, #328]	; (67d8 <nrfx_gpiote_trigger_enable+0x1f4>)
    668e:	f003 fbf0 	bl	9e72 <assert_print>
    6692:	f44f 7123 	mov.w	r1, #652	; 0x28c
    6696:	4630      	mov	r0, r6
    6698:	f003 fbe4 	bl	9e64 <assert_post_action>
    669c:	e7d4      	b.n	6648 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    669e:	4d4c      	ldr	r5, [pc, #304]	; (67d0 <nrfx_gpiote_trigger_enable+0x1ec>)
    66a0:	f240 33ee 	movw	r3, #1006	; 0x3ee
    66a4:	462a      	mov	r2, r5
    66a6:	4950      	ldr	r1, [pc, #320]	; (67e8 <nrfx_gpiote_trigger_enable+0x204>)
    66a8:	484b      	ldr	r0, [pc, #300]	; (67d8 <nrfx_gpiote_trigger_enable+0x1f4>)
    66aa:	f003 fbe2 	bl	9e72 <assert_print>
    66ae:	f240 31ee 	movw	r1, #1006	; 0x3ee
    66b2:	4628      	mov	r0, r5
    66b4:	f003 fbd6 	bl	9e64 <assert_post_action>
    66b8:	e7a4      	b.n	6604 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    66ba:	0963      	lsrs	r3, r4, #5
    66bc:	d01f      	beq.n	66fe <nrfx_gpiote_trigger_enable+0x11a>
    66be:	2b01      	cmp	r3, #1
    66c0:	d120      	bne.n	6704 <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    66c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    66c6:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    66ca:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    66cc:	f013 0f01 	tst.w	r3, #1
    66d0:	d01a      	beq.n	6708 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    66d2:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    66d6:	0963      	lsrs	r3, r4, #5
    66d8:	d024      	beq.n	6724 <nrfx_gpiote_trigger_enable+0x140>
    66da:	2b01      	cmp	r3, #1
    66dc:	d025      	beq.n	672a <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    66de:	4e43      	ldr	r6, [pc, #268]	; (67ec <nrfx_gpiote_trigger_enable+0x208>)
    66e0:	f240 232e 	movw	r3, #558	; 0x22e
    66e4:	4632      	mov	r2, r6
    66e6:	4942      	ldr	r1, [pc, #264]	; (67f0 <nrfx_gpiote_trigger_enable+0x20c>)
    66e8:	483b      	ldr	r0, [pc, #236]	; (67d8 <nrfx_gpiote_trigger_enable+0x1f4>)
    66ea:	f003 fbc2 	bl	9e72 <assert_print>
    66ee:	f240 212e 	movw	r1, #558	; 0x22e
    66f2:	4630      	mov	r0, r6
    66f4:	f003 fbb6 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    66f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    66fc:	e016      	b.n	672c <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    66fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6702:	e7e0      	b.n	66c6 <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    6704:	2300      	movs	r3, #0
    6706:	e7de      	b.n	66c6 <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6708:	4d38      	ldr	r5, [pc, #224]	; (67ec <nrfx_gpiote_trigger_enable+0x208>)
    670a:	f240 2329 	movw	r3, #553	; 0x229
    670e:	462a      	mov	r2, r5
    6710:	4938      	ldr	r1, [pc, #224]	; (67f4 <nrfx_gpiote_trigger_enable+0x210>)
    6712:	4831      	ldr	r0, [pc, #196]	; (67d8 <nrfx_gpiote_trigger_enable+0x1f4>)
    6714:	f003 fbad 	bl	9e72 <assert_print>
    6718:	f240 2129 	movw	r1, #553	; 0x229
    671c:	4628      	mov	r0, r5
    671e:	f003 fba1 	bl	9e64 <assert_post_action>
    6722:	e7d6      	b.n	66d2 <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    6724:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6728:	e000      	b.n	672c <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    672a:	4b33      	ldr	r3, [pc, #204]	; (67f8 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    672c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6730:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6732:	f013 0f01 	tst.w	r3, #1
    6736:	d024      	beq.n	6782 <nrfx_gpiote_trigger_enable+0x19e>
    6738:	2603      	movs	r6, #3
    673a:	e000      	b.n	673e <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    673c:	2603      	movs	r6, #3
    switch (port)
    673e:	0963      	lsrs	r3, r4, #5
    6740:	d021      	beq.n	6786 <nrfx_gpiote_trigger_enable+0x1a2>
    6742:	2b01      	cmp	r3, #1
    6744:	d122      	bne.n	678c <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    6746:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    674a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    674e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6750:	f013 0f01 	tst.w	r3, #1
    6754:	d01c      	beq.n	6790 <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    6756:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    675a:	0964      	lsrs	r4, r4, #5
    675c:	d026      	beq.n	67ac <nrfx_gpiote_trigger_enable+0x1c8>
    675e:	2c01      	cmp	r4, #1
    6760:	d027      	beq.n	67b2 <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    6762:	4c22      	ldr	r4, [pc, #136]	; (67ec <nrfx_gpiote_trigger_enable+0x208>)
    6764:	f240 232e 	movw	r3, #558	; 0x22e
    6768:	4622      	mov	r2, r4
    676a:	4921      	ldr	r1, [pc, #132]	; (67f0 <nrfx_gpiote_trigger_enable+0x20c>)
    676c:	481a      	ldr	r0, [pc, #104]	; (67d8 <nrfx_gpiote_trigger_enable+0x1f4>)
    676e:	f003 fb80 	bl	9e72 <assert_print>
    6772:	f240 212e 	movw	r1, #558	; 0x22e
    6776:	4620      	mov	r0, r4
    6778:	f003 fb74 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    677c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6780:	e018      	b.n	67b4 <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6782:	2602      	movs	r6, #2
    6784:	e7db      	b.n	673e <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    6786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    678a:	e7de      	b.n	674a <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    678c:	2300      	movs	r3, #0
    678e:	e7dc      	b.n	674a <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6790:	4d16      	ldr	r5, [pc, #88]	; (67ec <nrfx_gpiote_trigger_enable+0x208>)
    6792:	f240 2329 	movw	r3, #553	; 0x229
    6796:	462a      	mov	r2, r5
    6798:	4916      	ldr	r1, [pc, #88]	; (67f4 <nrfx_gpiote_trigger_enable+0x210>)
    679a:	480f      	ldr	r0, [pc, #60]	; (67d8 <nrfx_gpiote_trigger_enable+0x1f4>)
    679c:	f003 fb69 	bl	9e72 <assert_print>
    67a0:	f240 2129 	movw	r1, #553	; 0x229
    67a4:	4628      	mov	r0, r5
    67a6:	f003 fb5d 	bl	9e64 <assert_post_action>
    67aa:	e7d4      	b.n	6756 <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    67ac:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    67b0:	e000      	b.n	67b4 <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    67b2:	4911      	ldr	r1, [pc, #68]	; (67f8 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    67b4:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    67b8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    67bc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    67c0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    67c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    67c8:	bd70      	pop	{r4, r5, r6, pc}
    67ca:	bf00      	nop
    67cc:	2000405c 	.word	0x2000405c
    67d0:	0000c4dc 	.word	0x0000c4dc
    67d4:	0000c580 	.word	0x0000c580
    67d8:	0000b180 	.word	0x0000b180
    67dc:	40006000 	.word	0x40006000
    67e0:	0000c53c 	.word	0x0000c53c
    67e4:	0000c574 	.word	0x0000c574
    67e8:	0000c598 	.word	0x0000c598
    67ec:	0000c2b8 	.word	0x0000c2b8
    67f0:	0000b83c 	.word	0x0000b83c
    67f4:	0000c2ec 	.word	0x0000c2ec
    67f8:	50000300 	.word	0x50000300

000067fc <nrfx_gpiote_trigger_disable>:
{
    67fc:	b538      	push	{r3, r4, r5, lr}
    67fe:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6800:	f7ff f918 	bl	5a34 <pin_in_use_by_te>
    6804:	b1a0      	cbz	r0, 6830 <nrfx_gpiote_trigger_disable+0x34>
    6806:	4620      	mov	r0, r4
    6808:	f004 f979 	bl	aafe <pin_is_input>
    680c:	b180      	cbz	r0, 6830 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    680e:	4620      	mov	r0, r4
    6810:	f7ff f930 	bl	5a74 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6814:	2201      	movs	r2, #1
    6816:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    6818:	4b26      	ldr	r3, [pc, #152]	; (68b4 <nrfx_gpiote_trigger_disable+0xb8>)
    681a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    681e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    6822:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    6826:	f022 0203 	bic.w	r2, r2, #3
    682a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    682e:	e040      	b.n	68b2 <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    6830:	0963      	lsrs	r3, r4, #5
    6832:	d01f      	beq.n	6874 <nrfx_gpiote_trigger_disable+0x78>
    6834:	2b01      	cmp	r3, #1
    6836:	d120      	bne.n	687a <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    6838:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    683c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6840:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6842:	f013 0f01 	tst.w	r3, #1
    6846:	d01a      	beq.n	687e <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    6848:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    684c:	0964      	lsrs	r4, r4, #5
    684e:	d024      	beq.n	689a <nrfx_gpiote_trigger_disable+0x9e>
    6850:	2c01      	cmp	r4, #1
    6852:	d025      	beq.n	68a0 <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    6854:	4c18      	ldr	r4, [pc, #96]	; (68b8 <nrfx_gpiote_trigger_disable+0xbc>)
    6856:	f240 232e 	movw	r3, #558	; 0x22e
    685a:	4622      	mov	r2, r4
    685c:	4917      	ldr	r1, [pc, #92]	; (68bc <nrfx_gpiote_trigger_disable+0xc0>)
    685e:	4818      	ldr	r0, [pc, #96]	; (68c0 <nrfx_gpiote_trigger_disable+0xc4>)
    6860:	f003 fb07 	bl	9e72 <assert_print>
    6864:	f240 212e 	movw	r1, #558	; 0x22e
    6868:	4620      	mov	r0, r4
    686a:	f003 fafb 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    686e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6872:	e016      	b.n	68a2 <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    6874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6878:	e7e0      	b.n	683c <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    687a:	2300      	movs	r3, #0
    687c:	e7de      	b.n	683c <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    687e:	4d0e      	ldr	r5, [pc, #56]	; (68b8 <nrfx_gpiote_trigger_disable+0xbc>)
    6880:	f240 2329 	movw	r3, #553	; 0x229
    6884:	462a      	mov	r2, r5
    6886:	490f      	ldr	r1, [pc, #60]	; (68c4 <nrfx_gpiote_trigger_disable+0xc8>)
    6888:	480d      	ldr	r0, [pc, #52]	; (68c0 <nrfx_gpiote_trigger_disable+0xc4>)
    688a:	f003 faf2 	bl	9e72 <assert_print>
    688e:	f240 2129 	movw	r1, #553	; 0x229
    6892:	4628      	mov	r0, r5
    6894:	f003 fae6 	bl	9e64 <assert_post_action>
    6898:	e7d6      	b.n	6848 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    689a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    689e:	e000      	b.n	68a2 <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    68a0:	4909      	ldr	r1, [pc, #36]	; (68c8 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    68a2:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    68a6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    68aa:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    68ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    68b2:	bd38      	pop	{r3, r4, r5, pc}
    68b4:	40006000 	.word	0x40006000
    68b8:	0000c2b8 	.word	0x0000c2b8
    68bc:	0000b83c 	.word	0x0000b83c
    68c0:	0000b180 	.word	0x0000b180
    68c4:	0000c2ec 	.word	0x0000c2ec
    68c8:	50000300 	.word	0x50000300

000068cc <nrfx_gpiote_pin_uninit>:
{
    68cc:	b538      	push	{r3, r4, r5, lr}
    68ce:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    68d0:	f7ff f8a6 	bl	5a20 <pin_in_use>
    68d4:	b908      	cbnz	r0, 68da <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    68d6:	4824      	ldr	r0, [pc, #144]	; (6968 <nrfx_gpiote_pin_uninit+0x9c>)
}
    68d8:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    68da:	4620      	mov	r0, r4
    68dc:	f7ff ff8e 	bl	67fc <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    68e0:	4620      	mov	r0, r4
    68e2:	f7ff f95f 	bl	5ba4 <pin_handler_trigger_uninit>
    switch (port)
    68e6:	0963      	lsrs	r3, r4, #5
    68e8:	d01f      	beq.n	692a <nrfx_gpiote_pin_uninit+0x5e>
    68ea:	2b01      	cmp	r3, #1
    68ec:	d120      	bne.n	6930 <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    68ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    68f2:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    68f6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    68f8:	f013 0f01 	tst.w	r3, #1
    68fc:	d01a      	beq.n	6934 <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    68fe:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6902:	0964      	lsrs	r4, r4, #5
    6904:	d024      	beq.n	6950 <nrfx_gpiote_pin_uninit+0x84>
    6906:	2c01      	cmp	r4, #1
    6908:	d025      	beq.n	6956 <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    690a:	4c18      	ldr	r4, [pc, #96]	; (696c <nrfx_gpiote_pin_uninit+0xa0>)
    690c:	f240 232e 	movw	r3, #558	; 0x22e
    6910:	4622      	mov	r2, r4
    6912:	4917      	ldr	r1, [pc, #92]	; (6970 <nrfx_gpiote_pin_uninit+0xa4>)
    6914:	4817      	ldr	r0, [pc, #92]	; (6974 <nrfx_gpiote_pin_uninit+0xa8>)
    6916:	f003 faac 	bl	9e72 <assert_print>
    691a:	f240 212e 	movw	r1, #558	; 0x22e
    691e:	4620      	mov	r0, r4
    6920:	f003 faa0 	bl	9e64 <assert_post_action>
        case 0: return NRF_P0;
    6924:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6928:	e016      	b.n	6958 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    692a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    692e:	e7e0      	b.n	68f2 <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    6930:	2300      	movs	r3, #0
    6932:	e7de      	b.n	68f2 <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6934:	4d0d      	ldr	r5, [pc, #52]	; (696c <nrfx_gpiote_pin_uninit+0xa0>)
    6936:	f240 2329 	movw	r3, #553	; 0x229
    693a:	462a      	mov	r2, r5
    693c:	490e      	ldr	r1, [pc, #56]	; (6978 <nrfx_gpiote_pin_uninit+0xac>)
    693e:	480d      	ldr	r0, [pc, #52]	; (6974 <nrfx_gpiote_pin_uninit+0xa8>)
    6940:	f003 fa97 	bl	9e72 <assert_print>
    6944:	f240 2129 	movw	r1, #553	; 0x229
    6948:	4628      	mov	r0, r5
    694a:	f003 fa8b 	bl	9e64 <assert_post_action>
    694e:	e7d6      	b.n	68fe <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    6950:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6954:	e000      	b.n	6958 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6956:	4b09      	ldr	r3, [pc, #36]	; (697c <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    6958:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    695c:	2202      	movs	r2, #2
    695e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    6962:	4807      	ldr	r0, [pc, #28]	; (6980 <nrfx_gpiote_pin_uninit+0xb4>)
}
    6964:	e7b8      	b.n	68d8 <nrfx_gpiote_pin_uninit+0xc>
    6966:	bf00      	nop
    6968:	0bad0004 	.word	0x0bad0004
    696c:	0000c2b8 	.word	0x0000c2b8
    6970:	0000b83c 	.word	0x0000b83c
    6974:	0000b180 	.word	0x0000b180
    6978:	0000c2ec 	.word	0x0000c2ec
    697c:	50000300 	.word	0x50000300
    6980:	0bad0000 	.word	0x0bad0000

00006984 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    6984:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    6986:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    6988:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    698c:	2100      	movs	r1, #0
    uint32_t status = 0;
    698e:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6990:	e003      	b.n	699a <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    6992:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    6994:	3304      	adds	r3, #4
    6996:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6998:	3101      	adds	r1, #1
    699a:	2907      	cmp	r1, #7
    699c:	d814      	bhi.n	69c8 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    699e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    69a2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    69a6:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    69a8:	2a00      	cmp	r2, #0
    69aa:	d0f2      	beq.n	6992 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    69ac:	4a0c      	ldr	r2, [pc, #48]	; (69e0 <nrfx_gpiote_irq_handler+0x5c>)
    69ae:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    69b2:	4210      	tst	r0, r2
    69b4:	d0ed      	beq.n	6992 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    69b6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    69ba:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    69be:	2500      	movs	r5, #0
    69c0:	6015      	str	r5, [r2, #0]
    69c2:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    69c4:	4304      	orrs	r4, r0
    69c6:	e7e4      	b.n	6992 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    69c8:	4b05      	ldr	r3, [pc, #20]	; (69e0 <nrfx_gpiote_irq_handler+0x5c>)
    69ca:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    69ce:	b91b      	cbnz	r3, 69d8 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    69d0:	4620      	mov	r0, r4
    69d2:	f7ff f939 	bl	5c48 <gpiote_evt_handle>
}
    69d6:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    69d8:	f7ff fac2 	bl	5f60 <port_event_handle>
    69dc:	e7f8      	b.n	69d0 <nrfx_gpiote_irq_handler+0x4c>
    69de:	bf00      	nop
    69e0:	40006000 	.word	0x40006000

000069e4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    69e4:	b508      	push	{r3, lr}
    69e6:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    69e8:	4801      	ldr	r0, [pc, #4]	; (69f0 <nrfx_ppi_channel_alloc+0xc>)
    69ea:	f7fe fe1d 	bl	5628 <nrfx_flag32_alloc>
}
    69ee:	bd08      	pop	{r3, pc}
    69f0:	200040d8 	.word	0x200040d8

000069f4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    69f4:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    69f6:	4c11      	ldr	r4, [pc, #68]	; (6a3c <_DoInit+0x48>)
    69f8:	2303      	movs	r3, #3
    69fa:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    69fc:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    69fe:	4a10      	ldr	r2, [pc, #64]	; (6a40 <_DoInit+0x4c>)
    6a00:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6a02:	4b10      	ldr	r3, [pc, #64]	; (6a44 <_DoInit+0x50>)
    6a04:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    6a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
    6a0a:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    6a0c:	2300      	movs	r3, #0
    6a0e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    6a10:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6a12:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    6a14:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    6a16:	4a0c      	ldr	r2, [pc, #48]	; (6a48 <_DoInit+0x54>)
    6a18:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    6a1a:	2210      	movs	r2, #16
    6a1c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    6a1e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    6a20:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6a22:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    6a24:	4909      	ldr	r1, [pc, #36]	; (6a4c <_DoInit+0x58>)
    6a26:	1de0      	adds	r0, r4, #7
    6a28:	f003 fb79 	bl	a11e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    6a2c:	4908      	ldr	r1, [pc, #32]	; (6a50 <_DoInit+0x5c>)
    6a2e:	4620      	mov	r0, r4
    6a30:	f003 fb75 	bl	a11e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    6a34:	2320      	movs	r3, #32
    6a36:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    6a38:	bd10      	pop	{r4, pc}
    6a3a:	bf00      	nop
    6a3c:	20004a70 	.word	0x20004a70
    6a40:	0000c5a4 	.word	0x0000c5a4
    6a44:	20004b28 	.word	0x20004b28
    6a48:	20004b18 	.word	0x20004b18
    6a4c:	0000c5b0 	.word	0x0000c5b0
    6a50:	0000c5b4 	.word	0x0000c5b4

00006a54 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6a58:	4604      	mov	r4, r0
    6a5a:	460e      	mov	r6, r1
    6a5c:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    6a5e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6a62:	4a2d      	ldr	r2, [pc, #180]	; (6b18 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    6a64:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    6a68:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    6a6a:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    6a6c:	42bb      	cmp	r3, r7
    6a6e:	d84b      	bhi.n	6b08 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    6a70:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    6a74:	4928      	ldr	r1, [pc, #160]	; (6b18 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    6a76:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    6a7a:	f8d2 8020 	ldr.w	r8, [r2, #32]
    6a7e:	eba8 0907 	sub.w	r9, r8, r7
    6a82:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    6a86:	4295      	cmp	r5, r2
    6a88:	d904      	bls.n	6a94 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    6a8a:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    6a8c:	429d      	cmp	r5, r3
    6a8e:	d916      	bls.n	6abe <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    6a90:	2000      	movs	r0, #0
    6a92:	e03e      	b.n	6b12 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6a94:	f8df 8080 	ldr.w	r8, [pc, #128]	; 6b18 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    6a98:	1c63      	adds	r3, r4, #1
    6a9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6a9e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    6aa2:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    6aa4:	462a      	mov	r2, r5
    6aa6:	4631      	mov	r1, r6
    6aa8:	4438      	add	r0, r7
    6aaa:	f003 fb6f 	bl	a18c <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    6aae:	443d      	add	r5, r7
    6ab0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6ab4:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    6ab8:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    6aba:	2001      	movs	r0, #1
    6abc:	e029      	b.n	6b12 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6abe:	1c43      	adds	r3, r0, #1
    6ac0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6ac4:	4a14      	ldr	r2, [pc, #80]	; (6b18 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    6ac6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6aca:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    6acc:	464a      	mov	r2, r9
    6ace:	4631      	mov	r1, r6
    6ad0:	4438      	add	r0, r7
    6ad2:	f003 fb5b 	bl	a18c <memcpy>
      NumBytes -= Rem;
    6ad6:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    6ada:	197f      	adds	r7, r7, r5
    6adc:	d107      	bne.n	6aee <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    6ade:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6ae2:	4b0d      	ldr	r3, [pc, #52]	; (6b18 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    6ae4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    6ae8:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    6aea:	2001      	movs	r0, #1
    6aec:	e011      	b.n	6b12 <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    6aee:	1c63      	adds	r3, r4, #1
    6af0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6af4:	4a08      	ldr	r2, [pc, #32]	; (6b18 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    6af6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    6afa:	463a      	mov	r2, r7
    6afc:	eb06 0109 	add.w	r1, r6, r9
    6b00:	6858      	ldr	r0, [r3, #4]
    6b02:	f003 fb43 	bl	a18c <memcpy>
    6b06:	e7ea      	b.n	6ade <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    6b08:	1bdb      	subs	r3, r3, r7
    6b0a:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    6b0c:	42ab      	cmp	r3, r5
    6b0e:	d2c1      	bcs.n	6a94 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    6b10:	2000      	movs	r0, #0
}
    6b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6b16:	bf00      	nop
    6b18:	20004a70 	.word	0x20004a70

00006b1c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    6b1c:	4b06      	ldr	r3, [pc, #24]	; (6b38 <SEGGER_RTT_HasDataUp+0x1c>)
    6b1e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    6b22:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    6b26:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    6b28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6b2c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6b30:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    6b32:	1a80      	subs	r0, r0, r2
    6b34:	4770      	bx	lr
    6b36:	bf00      	nop
    6b38:	20004a70 	.word	0x20004a70

00006b3c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    6b3c:	4b03      	ldr	r3, [pc, #12]	; (6b4c <z_device_state_init+0x10>)

	while (dev < __device_end) {
    6b3e:	e000      	b.n	6b42 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    6b40:	3318      	adds	r3, #24
	while (dev < __device_end) {
    6b42:	4a03      	ldr	r2, [pc, #12]	; (6b50 <z_device_state_init+0x14>)
    6b44:	4293      	cmp	r3, r2
    6b46:	d3fb      	bcc.n	6b40 <z_device_state_init+0x4>
	}
}
    6b48:	4770      	bx	lr
    6b4a:	bf00      	nop
    6b4c:	0000ad88 	.word	0x0000ad88
    6b50:	0000ae00 	.word	0x0000ae00

00006b54 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    6b54:	b570      	push	{r4, r5, r6, lr}
    6b56:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6b58:	4b11      	ldr	r3, [pc, #68]	; (6ba0 <z_sys_init_run_level+0x4c>)
    6b5a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    6b5e:	e009      	b.n	6b74 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    6b60:	4240      	negs	r0, r0
    6b62:	e017      	b.n	6b94 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    6b64:	68eb      	ldr	r3, [r5, #12]
    6b66:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    6b68:	68ea      	ldr	r2, [r5, #12]
    6b6a:	7853      	ldrb	r3, [r2, #1]
    6b6c:	f043 0301 	orr.w	r3, r3, #1
    6b70:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6b72:	3408      	adds	r4, #8
    6b74:	1c73      	adds	r3, r6, #1
    6b76:	4a0a      	ldr	r2, [pc, #40]	; (6ba0 <z_sys_init_run_level+0x4c>)
    6b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    6b7c:	42a3      	cmp	r3, r4
    6b7e:	d90d      	bls.n	6b9c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    6b80:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    6b82:	6823      	ldr	r3, [r4, #0]
    6b84:	4628      	mov	r0, r5
    6b86:	4798      	blx	r3
		if (dev != NULL) {
    6b88:	2d00      	cmp	r5, #0
    6b8a:	d0f2      	beq.n	6b72 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    6b8c:	2800      	cmp	r0, #0
    6b8e:	d0eb      	beq.n	6b68 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    6b90:	2800      	cmp	r0, #0
    6b92:	dbe5      	blt.n	6b60 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    6b94:	28ff      	cmp	r0, #255	; 0xff
    6b96:	dde5      	ble.n	6b64 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    6b98:	20ff      	movs	r0, #255	; 0xff
    6b9a:	e7e3      	b.n	6b64 <z_sys_init_run_level+0x10>
		}
	}
}
    6b9c:	bd70      	pop	{r4, r5, r6, pc}
    6b9e:	bf00      	nop
    6ba0:	0000c5bc 	.word	0x0000c5bc

00006ba4 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    6ba4:	2804      	cmp	r0, #4
    6ba6:	d80c      	bhi.n	6bc2 <reason_to_str+0x1e>
    6ba8:	e8df f000 	tbb	[pc, r0]
    6bac:	07050d03 	.word	0x07050d03
    6bb0:	09          	.byte	0x09
    6bb1:	00          	.byte	0x00
    6bb2:	4806      	ldr	r0, [pc, #24]	; (6bcc <reason_to_str+0x28>)
    6bb4:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    6bb6:	4806      	ldr	r0, [pc, #24]	; (6bd0 <reason_to_str+0x2c>)
    6bb8:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    6bba:	4806      	ldr	r0, [pc, #24]	; (6bd4 <reason_to_str+0x30>)
    6bbc:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    6bbe:	4806      	ldr	r0, [pc, #24]	; (6bd8 <reason_to_str+0x34>)
    6bc0:	4770      	bx	lr
	default:
		return "Unknown error";
    6bc2:	4806      	ldr	r0, [pc, #24]	; (6bdc <reason_to_str+0x38>)
    6bc4:	4770      	bx	lr
		return "Unhandled interrupt";
    6bc6:	4806      	ldr	r0, [pc, #24]	; (6be0 <reason_to_str+0x3c>)
	}
}
    6bc8:	4770      	bx	lr
    6bca:	bf00      	nop
    6bcc:	0000c624 	.word	0x0000c624
    6bd0:	0000c5f8 	.word	0x0000c5f8
    6bd4:	0000c608 	.word	0x0000c608
    6bd8:	0000c614 	.word	0x0000c614
    6bdc:	0000c5d4 	.word	0x0000c5d4
    6be0:	0000c5e4 	.word	0x0000c5e4

00006be4 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    6be4:	b130      	cbz	r0, 6bf4 <thread_name_get+0x10>
{
    6be6:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    6be8:	f004 f802 	bl	abf0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    6bec:	b120      	cbz	r0, 6bf8 <thread_name_get+0x14>
    6bee:	7803      	ldrb	r3, [r0, #0]
    6bf0:	b123      	cbz	r3, 6bfc <thread_name_get+0x18>
}
    6bf2:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    6bf4:	4802      	ldr	r0, [pc, #8]	; (6c00 <thread_name_get+0x1c>)
}
    6bf6:	4770      	bx	lr
		thread_name = "unknown";
    6bf8:	4801      	ldr	r0, [pc, #4]	; (6c00 <thread_name_get+0x1c>)
    6bfa:	e7fa      	b.n	6bf2 <thread_name_get+0xe>
    6bfc:	4800      	ldr	r0, [pc, #0]	; (6c00 <thread_name_get+0x1c>)
	return thread_name;
    6bfe:	e7f8      	b.n	6bf2 <thread_name_get+0xe>
    6c00:	0000c634 	.word	0x0000c634

00006c04 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    6c06:	b087      	sub	sp, #28
    6c08:	4604      	mov	r4, r0
    6c0a:	460e      	mov	r6, r1
	__asm__ volatile(
    6c0c:	f04f 0320 	mov.w	r3, #32
    6c10:	f3ef 8711 	mrs	r7, BASEPRI
    6c14:	f383 8812 	msr	BASEPRI_MAX, r3
    6c18:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    6c1c:	f002 f918 	bl	8e50 <z_impl_z_current_get>
    6c20:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    6c22:	4620      	mov	r0, r4
    6c24:	f7ff ffbe 	bl	6ba4 <reason_to_str>
    6c28:	2300      	movs	r3, #0
    6c2a:	9305      	str	r3, [sp, #20]
    6c2c:	9004      	str	r0, [sp, #16]
    6c2e:	9403      	str	r4, [sp, #12]
    6c30:	4a22      	ldr	r2, [pc, #136]	; (6cbc <z_fatal_error+0xb8>)
    6c32:	9202      	str	r2, [sp, #8]
    6c34:	9301      	str	r3, [sp, #4]
    6c36:	9300      	str	r3, [sp, #0]
    6c38:	2201      	movs	r2, #1
    6c3a:	4921      	ldr	r1, [pc, #132]	; (6cc0 <z_fatal_error+0xbc>)
    6c3c:	4618      	mov	r0, r3
    6c3e:	f003 ff82 	bl	ab46 <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    6c42:	b11e      	cbz	r6, 6c4c <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    6c44:	69f3      	ldr	r3, [r6, #28]
    6c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
    6c4a:	b9eb      	cbnz	r3, 6c88 <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    6c4c:	4628      	mov	r0, r5
    6c4e:	f7ff ffc9 	bl	6be4 <thread_name_get>
    6c52:	9004      	str	r0, [sp, #16]
    6c54:	9503      	str	r5, [sp, #12]
    6c56:	4b1b      	ldr	r3, [pc, #108]	; (6cc4 <z_fatal_error+0xc0>)
    6c58:	9302      	str	r3, [sp, #8]
    6c5a:	2000      	movs	r0, #0
    6c5c:	9001      	str	r0, [sp, #4]
    6c5e:	9000      	str	r0, [sp, #0]
    6c60:	4603      	mov	r3, r0
    6c62:	2201      	movs	r2, #1
    6c64:	4916      	ldr	r1, [pc, #88]	; (6cc0 <z_fatal_error+0xbc>)
    6c66:	f003 ff6e 	bl	ab46 <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    6c6a:	4631      	mov	r1, r6
    6c6c:	4620      	mov	r0, r4
    6c6e:	f7fe fbd5 	bl	541c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    6c72:	2c04      	cmp	r4, #4
    6c74:	d013      	beq.n	6c9e <z_fatal_error+0x9a>
	__asm__ volatile(
    6c76:	f387 8811 	msr	BASEPRI, r7
    6c7a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    6c7e:	4628      	mov	r0, r5
    6c80:	f7fc fd54 	bl	372c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6c84:	b007      	add	sp, #28
    6c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
    6c88:	4b0f      	ldr	r3, [pc, #60]	; (6cc8 <z_fatal_error+0xc4>)
    6c8a:	9302      	str	r3, [sp, #8]
    6c8c:	2000      	movs	r0, #0
    6c8e:	9001      	str	r0, [sp, #4]
    6c90:	9000      	str	r0, [sp, #0]
    6c92:	4603      	mov	r3, r0
    6c94:	2201      	movs	r2, #1
    6c96:	490a      	ldr	r1, [pc, #40]	; (6cc0 <z_fatal_error+0xbc>)
    6c98:	f003 ff55 	bl	ab46 <z_log_msg2_runtime_create>
    6c9c:	e7d6      	b.n	6c4c <z_fatal_error+0x48>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    6c9e:	4c0b      	ldr	r4, [pc, #44]	; (6ccc <z_fatal_error+0xc8>)
    6ca0:	238f      	movs	r3, #143	; 0x8f
    6ca2:	4622      	mov	r2, r4
    6ca4:	490a      	ldr	r1, [pc, #40]	; (6cd0 <z_fatal_error+0xcc>)
    6ca6:	480b      	ldr	r0, [pc, #44]	; (6cd4 <z_fatal_error+0xd0>)
    6ca8:	f003 f8e3 	bl	9e72 <assert_print>
    6cac:	480a      	ldr	r0, [pc, #40]	; (6cd8 <z_fatal_error+0xd4>)
    6cae:	f003 f8e0 	bl	9e72 <assert_print>
    6cb2:	218f      	movs	r1, #143	; 0x8f
    6cb4:	4620      	mov	r0, r4
    6cb6:	f003 f8d5 	bl	9e64 <assert_post_action>
    6cba:	e7dc      	b.n	6c76 <z_fatal_error+0x72>
    6cbc:	0000c63c 	.word	0x0000c63c
    6cc0:	0000afa8 	.word	0x0000afa8
    6cc4:	0000c688 	.word	0x0000c688
    6cc8:	0000c664 	.word	0x0000c664
    6ccc:	0000c6a0 	.word	0x0000c6a0
    6cd0:	0000c6c4 	.word	0x0000c6c4
    6cd4:	0000b180 	.word	0x0000b180
    6cd8:	0000c6e4 	.word	0x0000c6e4

00006cdc <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    6cdc:	b510      	push	{r4, lr}
    6cde:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    6ce0:	4c11      	ldr	r4, [pc, #68]	; (6d28 <init_idle_thread+0x4c>)
    6ce2:	23b0      	movs	r3, #176	; 0xb0
    6ce4:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6ce8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    6cec:	4b0f      	ldr	r3, [pc, #60]	; (6d2c <init_idle_thread+0x50>)
    6cee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    6cf2:	4a0f      	ldr	r2, [pc, #60]	; (6d30 <init_idle_thread+0x54>)
    6cf4:	9205      	str	r2, [sp, #20]
    6cf6:	2201      	movs	r2, #1
    6cf8:	9204      	str	r2, [sp, #16]
    6cfa:	220f      	movs	r2, #15
    6cfc:	9203      	str	r2, [sp, #12]
    6cfe:	2200      	movs	r2, #0
    6d00:	9202      	str	r2, [sp, #8]
    6d02:	9201      	str	r2, [sp, #4]
    6d04:	9300      	str	r3, [sp, #0]
    6d06:	4b0b      	ldr	r3, [pc, #44]	; (6d34 <init_idle_thread+0x58>)
    6d08:	f44f 72a0 	mov.w	r2, #320	; 0x140
    6d0c:	490a      	ldr	r1, [pc, #40]	; (6d38 <init_idle_thread+0x5c>)
    6d0e:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    6d12:	fb0c 1100 	mla	r1, ip, r0, r1
    6d16:	4620      	mov	r0, r4
    6d18:	f000 fa76 	bl	7208 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6d1c:	7b63      	ldrb	r3, [r4, #13]
    6d1e:	f023 0304 	bic.w	r3, r3, #4
    6d22:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    6d24:	b006      	add	sp, #24
    6d26:	bd10      	pop	{r4, pc}
    6d28:	20004290 	.word	0x20004290
    6d2c:	20004f28 	.word	0x20004f28
    6d30:	0000c71c 	.word	0x0000c71c
    6d34:	0000751d 	.word	0x0000751d
    6d38:	200059a0 	.word	0x200059a0

00006d3c <bg_thread_main>:
{
    6d3c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    6d3e:	4b0a      	ldr	r3, [pc, #40]	; (6d68 <bg_thread_main+0x2c>)
    6d40:	2201      	movs	r2, #1
    6d42:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6d44:	2002      	movs	r0, #2
    6d46:	f7ff ff05 	bl	6b54 <z_sys_init_run_level>
	boot_banner();
    6d4a:	f002 fca9 	bl	96a0 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    6d4e:	2003      	movs	r0, #3
    6d50:	f7ff ff00 	bl	6b54 <z_sys_init_run_level>
	z_init_static_threads();
    6d54:	f000 fb68 	bl	7428 <z_init_static_threads>
	main();
    6d58:	f7f9 fc12 	bl	580 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    6d5c:	4a03      	ldr	r2, [pc, #12]	; (6d6c <bg_thread_main+0x30>)
    6d5e:	7b13      	ldrb	r3, [r2, #12]
    6d60:	f023 0301 	bic.w	r3, r3, #1
    6d64:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    6d66:	bd08      	pop	{r3, pc}
    6d68:	20005156 	.word	0x20005156
    6d6c:	20004340 	.word	0x20004340

00006d70 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    6d70:	b508      	push	{r3, lr}
    6d72:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    6d74:	4a01      	ldr	r2, [pc, #4]	; (6d7c <switch_to_main_thread+0xc>)
    6d76:	4802      	ldr	r0, [pc, #8]	; (6d80 <switch_to_main_thread+0x10>)
    6d78:	f7fc f894 	bl	2ea4 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    6d7c:	00006d3d 	.word	0x00006d3d
    6d80:	20004340 	.word	0x20004340

00006d84 <z_bss_zero>:
{
    6d84:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    6d86:	4803      	ldr	r0, [pc, #12]	; (6d94 <z_bss_zero+0x10>)
    6d88:	4a03      	ldr	r2, [pc, #12]	; (6d98 <z_bss_zero+0x14>)
    6d8a:	1a12      	subs	r2, r2, r0
    6d8c:	2100      	movs	r1, #0
    6d8e:	f003 fee9 	bl	ab64 <z_early_memset>
}
    6d92:	bd08      	pop	{r3, pc}
    6d94:	200041c0 	.word	0x200041c0
    6d98:	20005158 	.word	0x20005158

00006d9c <z_init_cpu>:
{
    6d9c:	b510      	push	{r4, lr}
    6d9e:	4604      	mov	r4, r0
	init_idle_thread(id);
    6da0:	f7ff ff9c 	bl	6cdc <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    6da4:	490b      	ldr	r1, [pc, #44]	; (6dd4 <z_init_cpu+0x38>)
    6da6:	23b0      	movs	r3, #176	; 0xb0
    6da8:	fb03 1104 	mla	r1, r3, r4, r1
    6dac:	4a0a      	ldr	r2, [pc, #40]	; (6dd8 <z_init_cpu+0x3c>)
    6dae:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    6db2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6db6:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    6db8:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    6dba:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    6dbe:	4b07      	ldr	r3, [pc, #28]	; (6ddc <z_init_cpu+0x40>)
    6dc0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    6dc4:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    6dc8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6dcc:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    6dd0:	6063      	str	r3, [r4, #4]
}
    6dd2:	bd10      	pop	{r4, pc}
    6dd4:	20004290 	.word	0x20004290
    6dd8:	20004f28 	.word	0x20004f28
    6ddc:	20005b00 	.word	0x20005b00

00006de0 <prepare_multithreading>:
{
    6de0:	b570      	push	{r4, r5, r6, lr}
    6de2:	b086      	sub	sp, #24
	z_sched_init();
    6de4:	f001 fe70 	bl	8ac8 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    6de8:	4d10      	ldr	r5, [pc, #64]	; (6e2c <prepare_multithreading+0x4c>)
    6dea:	4b11      	ldr	r3, [pc, #68]	; (6e30 <prepare_multithreading+0x50>)
    6dec:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6dee:	4b11      	ldr	r3, [pc, #68]	; (6e34 <prepare_multithreading+0x54>)
    6df0:	9305      	str	r3, [sp, #20]
    6df2:	2301      	movs	r3, #1
    6df4:	9304      	str	r3, [sp, #16]
    6df6:	2400      	movs	r4, #0
    6df8:	9403      	str	r4, [sp, #12]
    6dfa:	9402      	str	r4, [sp, #8]
    6dfc:	9401      	str	r4, [sp, #4]
    6dfe:	9400      	str	r4, [sp, #0]
    6e00:	4b0d      	ldr	r3, [pc, #52]	; (6e38 <prepare_multithreading+0x58>)
    6e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6e06:	490d      	ldr	r1, [pc, #52]	; (6e3c <prepare_multithreading+0x5c>)
    6e08:	4628      	mov	r0, r5
    6e0a:	f000 f9fd 	bl	7208 <z_setup_new_thread>
    6e0e:	4606      	mov	r6, r0
    6e10:	7b6b      	ldrb	r3, [r5, #13]
    6e12:	f023 0304 	bic.w	r3, r3, #4
    6e16:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    6e18:	4628      	mov	r0, r5
    6e1a:	f001 f9d9 	bl	81d0 <z_ready_thread>
	z_init_cpu(0);
    6e1e:	4620      	mov	r0, r4
    6e20:	f7ff ffbc 	bl	6d9c <z_init_cpu>
}
    6e24:	4630      	mov	r0, r6
    6e26:	b006      	add	sp, #24
    6e28:	bd70      	pop	{r4, r5, r6, pc}
    6e2a:	bf00      	nop
    6e2c:	20004340 	.word	0x20004340
    6e30:	20004f28 	.word	0x20004f28
    6e34:	0000c724 	.word	0x0000c724
    6e38:	00006d3d 	.word	0x00006d3d
    6e3c:	20005580 	.word	0x20005580

00006e40 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    6e40:	b500      	push	{lr}
    6e42:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    6e44:	4b1f      	ldr	r3, [pc, #124]	; (6ec4 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    6e46:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    6e4a:	4c1f      	ldr	r4, [pc, #124]	; (6ec8 <z_cstart+0x88>)
    6e4c:	6963      	ldr	r3, [r4, #20]
    6e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    6e52:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6e54:	23e0      	movs	r3, #224	; 0xe0
    6e56:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    6e5a:	2500      	movs	r5, #0
    6e5c:	77e5      	strb	r5, [r4, #31]
    6e5e:	7625      	strb	r5, [r4, #24]
    6e60:	7665      	strb	r5, [r4, #25]
    6e62:	76a5      	strb	r5, [r4, #26]
    6e64:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    6e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6e6a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    6e6e:	6263      	str	r3, [r4, #36]	; 0x24
    6e70:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    6e74:	f7fc fbc6 	bl	3604 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    6e78:	f7fb fe98 	bl	2bac <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    6e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e80:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    6e82:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    6e84:	f7fc fd72 	bl	396c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    6e88:	f7fc fc6a 	bl	3760 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    6e8c:	f7fa ffba 	bl	1e04 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    6e90:	2401      	movs	r4, #1
    6e92:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    6e96:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    6e9a:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    6e9c:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    6e9e:	4668      	mov	r0, sp
    6ea0:	f002 fbf8 	bl	9694 <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    6ea4:	4b09      	ldr	r3, [pc, #36]	; (6ecc <z_cstart+0x8c>)
    6ea6:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    6eaa:	f7ff fe47 	bl	6b3c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    6eae:	4628      	mov	r0, r5
    6eb0:	f7ff fe50 	bl	6b54 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    6eb4:	4620      	mov	r0, r4
    6eb6:	f7ff fe4d 	bl	6b54 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    6eba:	f7ff ff91 	bl	6de0 <prepare_multithreading>
    6ebe:	f7ff ff57 	bl	6d70 <switch_to_main_thread>
    6ec2:	bf00      	nop
    6ec4:	20006320 	.word	0x20006320
    6ec8:	e000ed00 	.word	0xe000ed00
    6ecc:	20004f28 	.word	0x20004f28

00006ed0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    6ed0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    6ed2:	4c10      	ldr	r4, [pc, #64]	; (6f14 <init_mem_slab_module+0x44>)
	int rc = 0;
    6ed4:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    6ed6:	e008      	b.n	6eea <init_mem_slab_module+0x1a>
    6ed8:	4b0f      	ldr	r3, [pc, #60]	; (6f18 <init_mem_slab_module+0x48>)
    6eda:	429c      	cmp	r4, r3
    6edc:	d217      	bcs.n	6f0e <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    6ede:	4620      	mov	r0, r4
    6ee0:	f003 fe48 	bl	ab74 <create_free_list>
		if (rc < 0) {
    6ee4:	1e05      	subs	r5, r0, #0
    6ee6:	db12      	blt.n	6f0e <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    6ee8:	3420      	adds	r4, #32
    6eea:	4b0b      	ldr	r3, [pc, #44]	; (6f18 <init_mem_slab_module+0x48>)
    6eec:	429c      	cmp	r4, r3
    6eee:	d9f3      	bls.n	6ed8 <init_mem_slab_module+0x8>
    6ef0:	4e0a      	ldr	r6, [pc, #40]	; (6f1c <init_mem_slab_module+0x4c>)
    6ef2:	233d      	movs	r3, #61	; 0x3d
    6ef4:	4632      	mov	r2, r6
    6ef6:	490a      	ldr	r1, [pc, #40]	; (6f20 <init_mem_slab_module+0x50>)
    6ef8:	480a      	ldr	r0, [pc, #40]	; (6f24 <init_mem_slab_module+0x54>)
    6efa:	f002 ffba 	bl	9e72 <assert_print>
    6efe:	480a      	ldr	r0, [pc, #40]	; (6f28 <init_mem_slab_module+0x58>)
    6f00:	f002 ffb7 	bl	9e72 <assert_print>
    6f04:	213d      	movs	r1, #61	; 0x3d
    6f06:	4630      	mov	r0, r6
    6f08:	f002 ffac 	bl	9e64 <assert_post_action>
    6f0c:	e7e4      	b.n	6ed8 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    6f0e:	4628      	mov	r0, r5
    6f10:	bd70      	pop	{r4, r5, r6, pc}
    6f12:	bf00      	nop
    6f14:	20004158 	.word	0x20004158
    6f18:	20004158 	.word	0x20004158
    6f1c:	0000c730 	.word	0x0000c730
    6f20:	0000c758 	.word	0x0000c758
    6f24:	0000b180 	.word	0x0000b180
    6f28:	0000c778 	.word	0x0000c778

00006f2c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    6f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6f30:	b082      	sub	sp, #8
    6f32:	4604      	mov	r4, r0
    6f34:	460e      	mov	r6, r1
    6f36:	4690      	mov	r8, r2
    6f38:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    6f3a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    6f3e:	f04f 0320 	mov.w	r3, #32
    6f42:	f3ef 8711 	mrs	r7, BASEPRI
    6f46:	f383 8812 	msr	BASEPRI_MAX, r3
    6f4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f4e:	4628      	mov	r0, r5
    6f50:	f000 f8d8 	bl	7104 <z_spin_lock_valid>
    6f54:	b1c0      	cbz	r0, 6f88 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    6f56:	4628      	mov	r0, r5
    6f58:	f000 f8f4 	bl	7144 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    6f5c:	69a1      	ldr	r1, [r4, #24]
    6f5e:	b321      	cbz	r1, 6faa <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    6f60:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    6f62:	69a3      	ldr	r3, [r4, #24]
    6f64:	681b      	ldr	r3, [r3, #0]
    6f66:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    6f68:	69e3      	ldr	r3, [r4, #28]
    6f6a:	3301      	adds	r3, #1
    6f6c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    6f6e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6f70:	4628      	mov	r0, r5
    6f72:	f000 f8d7 	bl	7124 <z_spin_unlock_valid>
    6f76:	b388      	cbz	r0, 6fdc <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    6f78:	f387 8811 	msr	BASEPRI, r7
    6f7c:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    6f80:	4620      	mov	r0, r4
    6f82:	b002      	add	sp, #8
    6f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f88:	f8df a070 	ldr.w	sl, [pc, #112]	; 6ffc <k_mem_slab_alloc+0xd0>
    6f8c:	238e      	movs	r3, #142	; 0x8e
    6f8e:	4652      	mov	r2, sl
    6f90:	491b      	ldr	r1, [pc, #108]	; (7000 <k_mem_slab_alloc+0xd4>)
    6f92:	481c      	ldr	r0, [pc, #112]	; (7004 <k_mem_slab_alloc+0xd8>)
    6f94:	f002 ff6d 	bl	9e72 <assert_print>
    6f98:	4629      	mov	r1, r5
    6f9a:	481b      	ldr	r0, [pc, #108]	; (7008 <k_mem_slab_alloc+0xdc>)
    6f9c:	f002 ff69 	bl	9e72 <assert_print>
    6fa0:	218e      	movs	r1, #142	; 0x8e
    6fa2:	4650      	mov	r0, sl
    6fa4:	f002 ff5e 	bl	9e64 <assert_post_action>
    6fa8:	e7d5      	b.n	6f56 <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    6faa:	ea59 0308 	orrs.w	r3, r9, r8
    6fae:	d104      	bne.n	6fba <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    6fb0:	2300      	movs	r3, #0
    6fb2:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    6fb4:	f06f 040b 	mvn.w	r4, #11
    6fb8:	e7da      	b.n	6f70 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    6fba:	f8cd 8000 	str.w	r8, [sp]
    6fbe:	f8cd 9004 	str.w	r9, [sp, #4]
    6fc2:	4622      	mov	r2, r4
    6fc4:	4639      	mov	r1, r7
    6fc6:	4628      	mov	r0, r5
    6fc8:	f001 fade 	bl	8588 <z_pend_curr>
		if (result == 0) {
    6fcc:	4604      	mov	r4, r0
    6fce:	2800      	cmp	r0, #0
    6fd0:	d1d6      	bne.n	6f80 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    6fd2:	4b0e      	ldr	r3, [pc, #56]	; (700c <k_mem_slab_alloc+0xe0>)
    6fd4:	689b      	ldr	r3, [r3, #8]
    6fd6:	695b      	ldr	r3, [r3, #20]
    6fd8:	6033      	str	r3, [r6, #0]
		return result;
    6fda:	e7d1      	b.n	6f80 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6fdc:	4e07      	ldr	r6, [pc, #28]	; (6ffc <k_mem_slab_alloc+0xd0>)
    6fde:	23b9      	movs	r3, #185	; 0xb9
    6fe0:	4632      	mov	r2, r6
    6fe2:	490b      	ldr	r1, [pc, #44]	; (7010 <k_mem_slab_alloc+0xe4>)
    6fe4:	4807      	ldr	r0, [pc, #28]	; (7004 <k_mem_slab_alloc+0xd8>)
    6fe6:	f002 ff44 	bl	9e72 <assert_print>
    6fea:	4629      	mov	r1, r5
    6fec:	4809      	ldr	r0, [pc, #36]	; (7014 <k_mem_slab_alloc+0xe8>)
    6fee:	f002 ff40 	bl	9e72 <assert_print>
    6ff2:	21b9      	movs	r1, #185	; 0xb9
    6ff4:	4630      	mov	r0, r6
    6ff6:	f002 ff35 	bl	9e64 <assert_post_action>
    6ffa:	e7bd      	b.n	6f78 <k_mem_slab_alloc+0x4c>
    6ffc:	0000b32c 	.word	0x0000b32c
    7000:	0000b38c 	.word	0x0000b38c
    7004:	0000b180 	.word	0x0000b180
    7008:	0000b3a4 	.word	0x0000b3a4
    700c:	20004f28 	.word	0x20004f28
    7010:	0000b35c 	.word	0x0000b35c
    7014:	0000b374 	.word	0x0000b374

00007018 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    7018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    701c:	4604      	mov	r4, r0
    701e:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    7020:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    7024:	f04f 0320 	mov.w	r3, #32
    7028:	f3ef 8711 	mrs	r7, BASEPRI
    702c:	f383 8812 	msr	BASEPRI_MAX, r3
    7030:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7034:	4630      	mov	r0, r6
    7036:	f000 f865 	bl	7104 <z_spin_lock_valid>
    703a:	b1b0      	cbz	r0, 706a <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    703c:	4630      	mov	r0, r6
    703e:	f000 f881 	bl	7144 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    7042:	69a3      	ldr	r3, [r4, #24]
    7044:	b313      	cbz	r3, 708c <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    7046:	682b      	ldr	r3, [r5, #0]
    7048:	69a2      	ldr	r2, [r4, #24]
    704a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    704c:	682b      	ldr	r3, [r5, #0]
    704e:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    7050:	69e3      	ldr	r3, [r4, #28]
    7052:	3b01      	subs	r3, #1
    7054:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7056:	4630      	mov	r0, r6
    7058:	f000 f864 	bl	7124 <z_spin_unlock_valid>
    705c:	b338      	cbz	r0, 70ae <k_mem_slab_free+0x96>
	__asm__ volatile(
    705e:	f387 8811 	msr	BASEPRI, r7
    7062:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    7066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    706a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 70d0 <k_mem_slab_free+0xb8>
    706e:	238e      	movs	r3, #142	; 0x8e
    7070:	4642      	mov	r2, r8
    7072:	4918      	ldr	r1, [pc, #96]	; (70d4 <k_mem_slab_free+0xbc>)
    7074:	4818      	ldr	r0, [pc, #96]	; (70d8 <k_mem_slab_free+0xc0>)
    7076:	f002 fefc 	bl	9e72 <assert_print>
    707a:	4631      	mov	r1, r6
    707c:	4817      	ldr	r0, [pc, #92]	; (70dc <k_mem_slab_free+0xc4>)
    707e:	f002 fef8 	bl	9e72 <assert_print>
    7082:	218e      	movs	r1, #142	; 0x8e
    7084:	4640      	mov	r0, r8
    7086:	f002 feed 	bl	9e64 <assert_post_action>
    708a:	e7d7      	b.n	703c <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    708c:	4620      	mov	r0, r4
    708e:	f001 fcb7 	bl	8a00 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    7092:	2800      	cmp	r0, #0
    7094:	d0d7      	beq.n	7046 <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    7096:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    7098:	2100      	movs	r1, #0
    709a:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    709e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    70a0:	f001 f896 	bl	81d0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    70a4:	4639      	mov	r1, r7
    70a6:	4630      	mov	r0, r6
    70a8:	f000 fdee 	bl	7c88 <z_reschedule>
			return;
    70ac:	e7db      	b.n	7066 <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    70ae:	4c08      	ldr	r4, [pc, #32]	; (70d0 <k_mem_slab_free+0xb8>)
    70b0:	23b9      	movs	r3, #185	; 0xb9
    70b2:	4622      	mov	r2, r4
    70b4:	490a      	ldr	r1, [pc, #40]	; (70e0 <k_mem_slab_free+0xc8>)
    70b6:	4808      	ldr	r0, [pc, #32]	; (70d8 <k_mem_slab_free+0xc0>)
    70b8:	f002 fedb 	bl	9e72 <assert_print>
    70bc:	4631      	mov	r1, r6
    70be:	4809      	ldr	r0, [pc, #36]	; (70e4 <k_mem_slab_free+0xcc>)
    70c0:	f002 fed7 	bl	9e72 <assert_print>
    70c4:	21b9      	movs	r1, #185	; 0xb9
    70c6:	4620      	mov	r0, r4
    70c8:	f002 fecc 	bl	9e64 <assert_post_action>
    70cc:	e7c7      	b.n	705e <k_mem_slab_free+0x46>
    70ce:	bf00      	nop
    70d0:	0000b32c 	.word	0x0000b32c
    70d4:	0000b38c 	.word	0x0000b38c
    70d8:	0000b180 	.word	0x0000b180
    70dc:	0000b3a4 	.word	0x0000b3a4
    70e0:	0000b35c 	.word	0x0000b35c
    70e4:	0000b374 	.word	0x0000b374

000070e8 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    70e8:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    70ea:	ea53 0102 	orrs.w	r1, r3, r2
    70ee:	d102      	bne.n	70f6 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    70f0:	f003 fd80 	bl	abf4 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    70f4:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    70f6:	4902      	ldr	r1, [pc, #8]	; (7100 <schedule_new_thread+0x18>)
    70f8:	3018      	adds	r0, #24
    70fa:	f001 ffb3 	bl	9064 <z_add_timeout>
    70fe:	e7f9      	b.n	70f4 <schedule_new_thread+0xc>
    7100:	0000832d 	.word	0x0000832d

00007104 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    7104:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    7106:	b13b      	cbz	r3, 7118 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    7108:	f003 0303 	and.w	r3, r3, #3
    710c:	4a04      	ldr	r2, [pc, #16]	; (7120 <z_spin_lock_valid+0x1c>)
    710e:	7d12      	ldrb	r2, [r2, #20]
    7110:	4293      	cmp	r3, r2
    7112:	d003      	beq.n	711c <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    7114:	2001      	movs	r0, #1
    7116:	4770      	bx	lr
    7118:	2001      	movs	r0, #1
    711a:	4770      	bx	lr
			return false;
    711c:	2000      	movs	r0, #0
}
    711e:	4770      	bx	lr
    7120:	20004f28 	.word	0x20004f28

00007124 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7124:	6801      	ldr	r1, [r0, #0]
    7126:	4a06      	ldr	r2, [pc, #24]	; (7140 <z_spin_unlock_valid+0x1c>)
    7128:	7d13      	ldrb	r3, [r2, #20]
    712a:	6892      	ldr	r2, [r2, #8]
    712c:	4313      	orrs	r3, r2
    712e:	4299      	cmp	r1, r3
    7130:	d103      	bne.n	713a <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    7132:	2300      	movs	r3, #0
    7134:	6003      	str	r3, [r0, #0]
	return true;
    7136:	2001      	movs	r0, #1
    7138:	4770      	bx	lr
		return false;
    713a:	2000      	movs	r0, #0
}
    713c:	4770      	bx	lr
    713e:	bf00      	nop
    7140:	20004f28 	.word	0x20004f28

00007144 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    7144:	4a02      	ldr	r2, [pc, #8]	; (7150 <z_spin_lock_set_owner+0xc>)
    7146:	7d13      	ldrb	r3, [r2, #20]
    7148:	6892      	ldr	r2, [r2, #8]
    714a:	4313      	orrs	r3, r2
    714c:	6003      	str	r3, [r0, #0]
}
    714e:	4770      	bx	lr
    7150:	20004f28 	.word	0x20004f28

00007154 <z_thread_monitor_exit>:
{
    7154:	b570      	push	{r4, r5, r6, lr}
    7156:	4604      	mov	r4, r0
	__asm__ volatile(
    7158:	f04f 0320 	mov.w	r3, #32
    715c:	f3ef 8511 	mrs	r5, BASEPRI
    7160:	f383 8812 	msr	BASEPRI_MAX, r3
    7164:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7168:	481f      	ldr	r0, [pc, #124]	; (71e8 <z_thread_monitor_exit+0x94>)
    716a:	f7ff ffcb 	bl	7104 <z_spin_lock_valid>
    716e:	b150      	cbz	r0, 7186 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    7170:	481d      	ldr	r0, [pc, #116]	; (71e8 <z_thread_monitor_exit+0x94>)
    7172:	f7ff ffe7 	bl	7144 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    7176:	4b1d      	ldr	r3, [pc, #116]	; (71ec <z_thread_monitor_exit+0x98>)
    7178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    717a:	42a3      	cmp	r3, r4
    717c:	d114      	bne.n	71a8 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    717e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    7180:	4b1a      	ldr	r3, [pc, #104]	; (71ec <z_thread_monitor_exit+0x98>)
    7182:	629a      	str	r2, [r3, #40]	; 0x28
    7184:	e017      	b.n	71b6 <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7186:	4e1a      	ldr	r6, [pc, #104]	; (71f0 <z_thread_monitor_exit+0x9c>)
    7188:	238e      	movs	r3, #142	; 0x8e
    718a:	4632      	mov	r2, r6
    718c:	4919      	ldr	r1, [pc, #100]	; (71f4 <z_thread_monitor_exit+0xa0>)
    718e:	481a      	ldr	r0, [pc, #104]	; (71f8 <z_thread_monitor_exit+0xa4>)
    7190:	f002 fe6f 	bl	9e72 <assert_print>
    7194:	4914      	ldr	r1, [pc, #80]	; (71e8 <z_thread_monitor_exit+0x94>)
    7196:	4819      	ldr	r0, [pc, #100]	; (71fc <z_thread_monitor_exit+0xa8>)
    7198:	f002 fe6b 	bl	9e72 <assert_print>
    719c:	218e      	movs	r1, #142	; 0x8e
    719e:	4630      	mov	r0, r6
    71a0:	f002 fe60 	bl	9e64 <assert_post_action>
    71a4:	e7e4      	b.n	7170 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    71a6:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    71a8:	b113      	cbz	r3, 71b0 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    71aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    71ac:	42a2      	cmp	r2, r4
    71ae:	d1fa      	bne.n	71a6 <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    71b0:	b10b      	cbz	r3, 71b6 <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    71b2:	6f22      	ldr	r2, [r4, #112]	; 0x70
    71b4:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    71b6:	480c      	ldr	r0, [pc, #48]	; (71e8 <z_thread_monitor_exit+0x94>)
    71b8:	f7ff ffb4 	bl	7124 <z_spin_unlock_valid>
    71bc:	b120      	cbz	r0, 71c8 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    71be:	f385 8811 	msr	BASEPRI, r5
    71c2:	f3bf 8f6f 	isb	sy
}
    71c6:	bd70      	pop	{r4, r5, r6, pc}
    71c8:	4c09      	ldr	r4, [pc, #36]	; (71f0 <z_thread_monitor_exit+0x9c>)
    71ca:	23b9      	movs	r3, #185	; 0xb9
    71cc:	4622      	mov	r2, r4
    71ce:	490c      	ldr	r1, [pc, #48]	; (7200 <z_thread_monitor_exit+0xac>)
    71d0:	4809      	ldr	r0, [pc, #36]	; (71f8 <z_thread_monitor_exit+0xa4>)
    71d2:	f002 fe4e 	bl	9e72 <assert_print>
    71d6:	4904      	ldr	r1, [pc, #16]	; (71e8 <z_thread_monitor_exit+0x94>)
    71d8:	480a      	ldr	r0, [pc, #40]	; (7204 <z_thread_monitor_exit+0xb0>)
    71da:	f002 fe4a 	bl	9e72 <assert_print>
    71de:	21b9      	movs	r1, #185	; 0xb9
    71e0:	4620      	mov	r0, r4
    71e2:	f002 fe3f 	bl	9e64 <assert_post_action>
    71e6:	e7ea      	b.n	71be <z_thread_monitor_exit+0x6a>
    71e8:	20004f54 	.word	0x20004f54
    71ec:	20004f28 	.word	0x20004f28
    71f0:	0000b32c 	.word	0x0000b32c
    71f4:	0000b38c 	.word	0x0000b38c
    71f8:	0000b180 	.word	0x0000b180
    71fc:	0000b3a4 	.word	0x0000b3a4
    7200:	0000b35c 	.word	0x0000b35c
    7204:	0000b374 	.word	0x0000b374

00007208 <z_setup_new_thread>:
{
    7208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    720c:	b085      	sub	sp, #20
    720e:	4604      	mov	r4, r0
    7210:	460e      	mov	r6, r1
    7212:	4690      	mov	r8, r2
    7214:	461d      	mov	r5, r3
    7216:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    721a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    721e:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    7220:	2f0f      	cmp	r7, #15
    7222:	d05e      	beq.n	72e2 <z_setup_new_thread+0xda>
    7224:	f107 0310 	add.w	r3, r7, #16
    7228:	2b1e      	cmp	r3, #30
    722a:	d85e      	bhi.n	72ea <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    722c:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    7230:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    7232:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    7234:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7236:	2204      	movs	r2, #4
    7238:	4639      	mov	r1, r7
    723a:	4620      	mov	r0, r4
    723c:	f003 fcde 	bl	abfc <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    7240:	4642      	mov	r2, r8
    7242:	4631      	mov	r1, r6
    7244:	4620      	mov	r0, r4
    7246:	f003 fcbb 	bl	abc0 <setup_thread_stack>
    724a:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    724c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    724e:	9302      	str	r3, [sp, #8]
    7250:	f8cd a004 	str.w	sl, [sp, #4]
    7254:	f8cd b000 	str.w	fp, [sp]
    7258:	462b      	mov	r3, r5
    725a:	4602      	mov	r2, r0
    725c:	4631      	mov	r1, r6
    725e:	4620      	mov	r0, r4
    7260:	f7fb fdd6 	bl	2e10 <arch_new_thread>
	new_thread->init_data = NULL;
    7264:	2300      	movs	r3, #0
    7266:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    7268:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    726a:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    726e:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    7272:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7274:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    7276:	f04f 0320 	mov.w	r3, #32
    727a:	f3ef 8611 	mrs	r6, BASEPRI
    727e:	f383 8812 	msr	BASEPRI_MAX, r3
    7282:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7286:	4837      	ldr	r0, [pc, #220]	; (7364 <z_setup_new_thread+0x15c>)
    7288:	f7ff ff3c 	bl	7104 <z_spin_lock_valid>
    728c:	2800      	cmp	r0, #0
    728e:	d042      	beq.n	7316 <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    7290:	4d34      	ldr	r5, [pc, #208]	; (7364 <z_setup_new_thread+0x15c>)
    7292:	4628      	mov	r0, r5
    7294:	f7ff ff56 	bl	7144 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    7298:	4b33      	ldr	r3, [pc, #204]	; (7368 <z_setup_new_thread+0x160>)
    729a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    729c:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    729e:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    72a0:	4628      	mov	r0, r5
    72a2:	f7ff ff3f 	bl	7124 <z_spin_unlock_valid>
    72a6:	2800      	cmp	r0, #0
    72a8:	d045      	beq.n	7336 <z_setup_new_thread+0x12e>
	__asm__ volatile(
    72aa:	f386 8811 	msr	BASEPRI, r6
    72ae:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    72b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    72b4:	2b00      	cmp	r3, #0
    72b6:	d04e      	beq.n	7356 <z_setup_new_thread+0x14e>
		strncpy(new_thread->name, name,
    72b8:	221f      	movs	r2, #31
    72ba:	4619      	mov	r1, r3
    72bc:	f104 0074 	add.w	r0, r4, #116	; 0x74
    72c0:	f002 ff37 	bl	a132 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    72c4:	2300      	movs	r3, #0
    72c6:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    72ca:	4b27      	ldr	r3, [pc, #156]	; (7368 <z_setup_new_thread+0x160>)
    72cc:	689b      	ldr	r3, [r3, #8]
    72ce:	2b00      	cmp	r3, #0
    72d0:	d045      	beq.n	735e <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    72d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    72d6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    72da:	4638      	mov	r0, r7
    72dc:	b005      	add	sp, #20
    72de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    72e2:	4b22      	ldr	r3, [pc, #136]	; (736c <z_setup_new_thread+0x164>)
    72e4:	429d      	cmp	r5, r3
    72e6:	d19d      	bne.n	7224 <z_setup_new_thread+0x1c>
    72e8:	e7a0      	b.n	722c <z_setup_new_thread+0x24>
    72ea:	f8df 9084 	ldr.w	r9, [pc, #132]	; 7370 <z_setup_new_thread+0x168>
    72ee:	f240 13ff 	movw	r3, #511	; 0x1ff
    72f2:	464a      	mov	r2, r9
    72f4:	491f      	ldr	r1, [pc, #124]	; (7374 <z_setup_new_thread+0x16c>)
    72f6:	4820      	ldr	r0, [pc, #128]	; (7378 <z_setup_new_thread+0x170>)
    72f8:	f002 fdbb 	bl	9e72 <assert_print>
    72fc:	f06f 030f 	mvn.w	r3, #15
    7300:	220e      	movs	r2, #14
    7302:	4639      	mov	r1, r7
    7304:	481d      	ldr	r0, [pc, #116]	; (737c <z_setup_new_thread+0x174>)
    7306:	f002 fdb4 	bl	9e72 <assert_print>
    730a:	f240 11ff 	movw	r1, #511	; 0x1ff
    730e:	4648      	mov	r0, r9
    7310:	f002 fda8 	bl	9e64 <assert_post_action>
    7314:	e78a      	b.n	722c <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7316:	4d1a      	ldr	r5, [pc, #104]	; (7380 <z_setup_new_thread+0x178>)
    7318:	238e      	movs	r3, #142	; 0x8e
    731a:	462a      	mov	r2, r5
    731c:	4919      	ldr	r1, [pc, #100]	; (7384 <z_setup_new_thread+0x17c>)
    731e:	4816      	ldr	r0, [pc, #88]	; (7378 <z_setup_new_thread+0x170>)
    7320:	f002 fda7 	bl	9e72 <assert_print>
    7324:	490f      	ldr	r1, [pc, #60]	; (7364 <z_setup_new_thread+0x15c>)
    7326:	4818      	ldr	r0, [pc, #96]	; (7388 <z_setup_new_thread+0x180>)
    7328:	f002 fda3 	bl	9e72 <assert_print>
    732c:	218e      	movs	r1, #142	; 0x8e
    732e:	4628      	mov	r0, r5
    7330:	f002 fd98 	bl	9e64 <assert_post_action>
    7334:	e7ac      	b.n	7290 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7336:	4d12      	ldr	r5, [pc, #72]	; (7380 <z_setup_new_thread+0x178>)
    7338:	23b9      	movs	r3, #185	; 0xb9
    733a:	462a      	mov	r2, r5
    733c:	4913      	ldr	r1, [pc, #76]	; (738c <z_setup_new_thread+0x184>)
    733e:	480e      	ldr	r0, [pc, #56]	; (7378 <z_setup_new_thread+0x170>)
    7340:	f002 fd97 	bl	9e72 <assert_print>
    7344:	4907      	ldr	r1, [pc, #28]	; (7364 <z_setup_new_thread+0x15c>)
    7346:	4812      	ldr	r0, [pc, #72]	; (7390 <z_setup_new_thread+0x188>)
    7348:	f002 fd93 	bl	9e72 <assert_print>
    734c:	21b9      	movs	r1, #185	; 0xb9
    734e:	4628      	mov	r0, r5
    7350:	f002 fd88 	bl	9e64 <assert_post_action>
    7354:	e7a9      	b.n	72aa <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    7356:	2300      	movs	r3, #0
    7358:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    735c:	e7b5      	b.n	72ca <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    735e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    7362:	e7ba      	b.n	72da <z_setup_new_thread+0xd2>
    7364:	20004f54 	.word	0x20004f54
    7368:	20004f28 	.word	0x20004f28
    736c:	0000751d 	.word	0x0000751d
    7370:	0000c798 	.word	0x0000c798
    7374:	0000c7f0 	.word	0x0000c7f0
    7378:	0000b180 	.word	0x0000b180
    737c:	0000c870 	.word	0x0000c870
    7380:	0000b32c 	.word	0x0000b32c
    7384:	0000b38c 	.word	0x0000b38c
    7388:	0000b3a4 	.word	0x0000b3a4
    738c:	0000b35c 	.word	0x0000b35c
    7390:	0000b374 	.word	0x0000b374

00007394 <z_impl_k_thread_create>:
{
    7394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7398:	b086      	sub	sp, #24
    739a:	4604      	mov	r4, r0
    739c:	460d      	mov	r5, r1
    739e:	4616      	mov	r6, r2
    73a0:	461f      	mov	r7, r3
    73a2:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    73a6:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    73aa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    73ae:	b9db      	cbnz	r3, 73e8 <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    73b0:	2300      	movs	r3, #0
    73b2:	9305      	str	r3, [sp, #20]
    73b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    73b6:	9304      	str	r3, [sp, #16]
    73b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    73ba:	9303      	str	r3, [sp, #12]
    73bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    73be:	9302      	str	r3, [sp, #8]
    73c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    73c2:	9301      	str	r3, [sp, #4]
    73c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    73c6:	9300      	str	r3, [sp, #0]
    73c8:	463b      	mov	r3, r7
    73ca:	4632      	mov	r2, r6
    73cc:	4629      	mov	r1, r5
    73ce:	4620      	mov	r0, r4
    73d0:	f7ff ff1a 	bl	7208 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    73d4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    73d8:	bf08      	it	eq
    73da:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    73de:	d115      	bne.n	740c <z_impl_k_thread_create+0x78>
}
    73e0:	4620      	mov	r0, r4
    73e2:	b006      	add	sp, #24
    73e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    73e8:	f8df a02c 	ldr.w	sl, [pc, #44]	; 7418 <z_impl_k_thread_create+0x84>
    73ec:	f240 236e 	movw	r3, #622	; 0x26e
    73f0:	4652      	mov	r2, sl
    73f2:	490a      	ldr	r1, [pc, #40]	; (741c <z_impl_k_thread_create+0x88>)
    73f4:	480a      	ldr	r0, [pc, #40]	; (7420 <z_impl_k_thread_create+0x8c>)
    73f6:	f002 fd3c 	bl	9e72 <assert_print>
    73fa:	480a      	ldr	r0, [pc, #40]	; (7424 <z_impl_k_thread_create+0x90>)
    73fc:	f002 fd39 	bl	9e72 <assert_print>
    7400:	f240 216e 	movw	r1, #622	; 0x26e
    7404:	4650      	mov	r0, sl
    7406:	f002 fd2d 	bl	9e64 <assert_post_action>
    740a:	e7d1      	b.n	73b0 <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    740c:	464a      	mov	r2, r9
    740e:	4643      	mov	r3, r8
    7410:	4620      	mov	r0, r4
    7412:	f7ff fe69 	bl	70e8 <schedule_new_thread>
    7416:	e7e3      	b.n	73e0 <z_impl_k_thread_create+0x4c>
    7418:	0000c798 	.word	0x0000c798
    741c:	0000c8a4 	.word	0x0000c8a4
    7420:	0000b180 	.word	0x0000b180
    7424:	0000c8b8 	.word	0x0000c8b8

00007428 <z_init_static_threads>:
{
    7428:	b530      	push	{r4, r5, lr}
    742a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    742c:	4c35      	ldr	r4, [pc, #212]	; (7504 <z_init_static_threads+0xdc>)
    742e:	e017      	b.n	7460 <z_init_static_threads+0x38>
    7430:	4b35      	ldr	r3, [pc, #212]	; (7508 <z_init_static_threads+0xe0>)
    7432:	429c      	cmp	r4, r3
    7434:	d228      	bcs.n	7488 <z_init_static_threads+0x60>
		z_setup_new_thread(
    7436:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7438:	9305      	str	r3, [sp, #20]
    743a:	6a23      	ldr	r3, [r4, #32]
    743c:	9304      	str	r3, [sp, #16]
    743e:	69e3      	ldr	r3, [r4, #28]
    7440:	9303      	str	r3, [sp, #12]
    7442:	69a3      	ldr	r3, [r4, #24]
    7444:	9302      	str	r3, [sp, #8]
    7446:	6963      	ldr	r3, [r4, #20]
    7448:	9301      	str	r3, [sp, #4]
    744a:	6923      	ldr	r3, [r4, #16]
    744c:	9300      	str	r3, [sp, #0]
    744e:	68e3      	ldr	r3, [r4, #12]
    7450:	68a2      	ldr	r2, [r4, #8]
    7452:	6861      	ldr	r1, [r4, #4]
    7454:	6820      	ldr	r0, [r4, #0]
    7456:	f7ff fed7 	bl	7208 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    745a:	6823      	ldr	r3, [r4, #0]
    745c:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    745e:	3430      	adds	r4, #48	; 0x30
    7460:	4b29      	ldr	r3, [pc, #164]	; (7508 <z_init_static_threads+0xe0>)
    7462:	429c      	cmp	r4, r3
    7464:	d9e4      	bls.n	7430 <z_init_static_threads+0x8>
    7466:	4d29      	ldr	r5, [pc, #164]	; (750c <z_init_static_threads+0xe4>)
    7468:	f240 23d5 	movw	r3, #725	; 0x2d5
    746c:	462a      	mov	r2, r5
    746e:	4928      	ldr	r1, [pc, #160]	; (7510 <z_init_static_threads+0xe8>)
    7470:	4828      	ldr	r0, [pc, #160]	; (7514 <z_init_static_threads+0xec>)
    7472:	f002 fcfe 	bl	9e72 <assert_print>
    7476:	4828      	ldr	r0, [pc, #160]	; (7518 <z_init_static_threads+0xf0>)
    7478:	f002 fcfb 	bl	9e72 <assert_print>
    747c:	f240 21d5 	movw	r1, #725	; 0x2d5
    7480:	4628      	mov	r0, r5
    7482:	f002 fcef 	bl	9e64 <assert_post_action>
    7486:	e7d3      	b.n	7430 <z_init_static_threads+0x8>
	k_sched_lock();
    7488:	f000 fc4c 	bl	7d24 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    748c:	4c1d      	ldr	r4, [pc, #116]	; (7504 <z_init_static_threads+0xdc>)
    748e:	e000      	b.n	7492 <z_init_static_threads+0x6a>
    7490:	3430      	adds	r4, #48	; 0x30
    7492:	4b1d      	ldr	r3, [pc, #116]	; (7508 <z_init_static_threads+0xe0>)
    7494:	429c      	cmp	r4, r3
    7496:	d81f      	bhi.n	74d8 <z_init_static_threads+0xb0>
    7498:	4b1b      	ldr	r3, [pc, #108]	; (7508 <z_init_static_threads+0xe0>)
    749a:	429c      	cmp	r4, r3
    749c:	d22d      	bcs.n	74fa <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    749e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    74a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    74a4:	d0f4      	beq.n	7490 <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    74a6:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    74a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    74ac:	17c1      	asrs	r1, r0, #31
			return ((t * to_hz + off) / from_hz);
    74ae:	03c9      	lsls	r1, r1, #15
    74b0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    74b4:	03c0      	lsls	r0, r0, #15
    74b6:	f240 33e7 	movw	r3, #999	; 0x3e7
    74ba:	18c0      	adds	r0, r0, r3
    74bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    74c0:	f04f 0300 	mov.w	r3, #0
    74c4:	f141 0100 	adc.w	r1, r1, #0
    74c8:	f7f8 fe1a 	bl	100 <__aeabi_uldivmod>
    74cc:	4602      	mov	r2, r0
    74ce:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    74d0:	4628      	mov	r0, r5
    74d2:	f7ff fe09 	bl	70e8 <schedule_new_thread>
    74d6:	e7db      	b.n	7490 <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    74d8:	4d0c      	ldr	r5, [pc, #48]	; (750c <z_init_static_threads+0xe4>)
    74da:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    74de:	462a      	mov	r2, r5
    74e0:	490b      	ldr	r1, [pc, #44]	; (7510 <z_init_static_threads+0xe8>)
    74e2:	480c      	ldr	r0, [pc, #48]	; (7514 <z_init_static_threads+0xec>)
    74e4:	f002 fcc5 	bl	9e72 <assert_print>
    74e8:	480b      	ldr	r0, [pc, #44]	; (7518 <z_init_static_threads+0xf0>)
    74ea:	f002 fcc2 	bl	9e72 <assert_print>
    74ee:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    74f2:	4628      	mov	r0, r5
    74f4:	f002 fcb6 	bl	9e64 <assert_post_action>
    74f8:	e7ce      	b.n	7498 <z_init_static_threads+0x70>
	k_sched_unlock();
    74fa:	f001 f99f 	bl	883c <k_sched_unlock>
}
    74fe:	b007      	add	sp, #28
    7500:	bd30      	pop	{r4, r5, pc}
    7502:	bf00      	nop
    7504:	20004158 	.word	0x20004158
    7508:	20004158 	.word	0x20004158
    750c:	0000c798 	.word	0x0000c798
    7510:	0000c8e0 	.word	0x0000c8e0
    7514:	0000b180 	.word	0x0000b180
    7518:	0000c778 	.word	0x0000c778

0000751c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    751c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    751e:	4b14      	ldr	r3, [pc, #80]	; (7570 <idle+0x54>)
    7520:	689b      	ldr	r3, [r3, #8]
    7522:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7526:	2b00      	cmp	r3, #0
    7528:	da0d      	bge.n	7546 <idle+0x2a>
    752a:	4c12      	ldr	r4, [pc, #72]	; (7574 <idle+0x58>)
    752c:	2327      	movs	r3, #39	; 0x27
    752e:	4622      	mov	r2, r4
    7530:	4911      	ldr	r1, [pc, #68]	; (7578 <idle+0x5c>)
    7532:	4812      	ldr	r0, [pc, #72]	; (757c <idle+0x60>)
    7534:	f002 fc9d 	bl	9e72 <assert_print>
    7538:	2127      	movs	r1, #39	; 0x27
    753a:	4620      	mov	r0, r4
    753c:	f002 fc92 	bl	9e64 <assert_post_action>
    7540:	e001      	b.n	7546 <idle+0x2a>
	arch_cpu_idle();
    7542:	f7fb fb39 	bl	2bb8 <arch_cpu_idle>
	__asm__ volatile(
    7546:	f04f 0220 	mov.w	r2, #32
    754a:	f3ef 8311 	mrs	r3, BASEPRI
    754e:	f382 8812 	msr	BASEPRI_MAX, r2
    7552:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7556:	f001 fec3 	bl	92e0 <z_get_next_timeout_expiry>
    755a:	4b05      	ldr	r3, [pc, #20]	; (7570 <idle+0x54>)
    755c:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    755e:	4b08      	ldr	r3, [pc, #32]	; (7580 <idle+0x64>)
    7560:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7562:	2b00      	cmp	r3, #0
    7564:	d0ed      	beq.n	7542 <idle+0x26>
    7566:	f7fb f8f3 	bl	2750 <pm_system_suspend>
    756a:	2800      	cmp	r0, #0
    756c:	d1eb      	bne.n	7546 <idle+0x2a>
    756e:	e7e8      	b.n	7542 <idle+0x26>
    7570:	20004f28 	.word	0x20004f28
    7574:	0000c910 	.word	0x0000c910
    7578:	0000c934 	.word	0x0000c934
    757c:	0000b180 	.word	0x0000b180
    7580:	20005156 	.word	0x20005156

00007584 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    7584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7588:	b083      	sub	sp, #12
    758a:	4604      	mov	r4, r0
    758c:	4616      	mov	r6, r2
    758e:	461d      	mov	r5, r3
    7590:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7594:	2900      	cmp	r1, #0
    7596:	d12b      	bne.n	75f0 <z_impl_k_mutex_lock+0x6c>
    7598:	f04f 0320 	mov.w	r3, #32
    759c:	f3ef 8711 	mrs	r7, BASEPRI
    75a0:	f383 8812 	msr	BASEPRI_MAX, r3
    75a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    75a8:	487b      	ldr	r0, [pc, #492]	; (7798 <z_impl_k_mutex_lock+0x214>)
    75aa:	f7ff fdab 	bl	7104 <z_spin_lock_valid>
    75ae:	2800      	cmp	r0, #0
    75b0:	d02d      	beq.n	760e <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    75b2:	4879      	ldr	r0, [pc, #484]	; (7798 <z_impl_k_mutex_lock+0x214>)
    75b4:	f7ff fdc6 	bl	7144 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    75b8:	68e1      	ldr	r1, [r4, #12]
    75ba:	2900      	cmp	r1, #0
    75bc:	d138      	bne.n	7630 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    75be:	2900      	cmp	r1, #0
    75c0:	d17d      	bne.n	76be <z_impl_k_mutex_lock+0x13a>
    75c2:	4b76      	ldr	r3, [pc, #472]	; (779c <z_impl_k_mutex_lock+0x218>)
    75c4:	689b      	ldr	r3, [r3, #8]
    75c6:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    75ca:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    75cc:	3101      	adds	r1, #1
    75ce:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    75d0:	4b72      	ldr	r3, [pc, #456]	; (779c <z_impl_k_mutex_lock+0x218>)
    75d2:	689b      	ldr	r3, [r3, #8]
    75d4:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    75d6:	4870      	ldr	r0, [pc, #448]	; (7798 <z_impl_k_mutex_lock+0x214>)
    75d8:	f7ff fda4 	bl	7124 <z_spin_unlock_valid>
    75dc:	2800      	cmp	r0, #0
    75de:	d070      	beq.n	76c2 <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    75e0:	f387 8811 	msr	BASEPRI, r7
    75e4:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    75e8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    75ea:	b003      	add	sp, #12
    75ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    75f0:	4f6b      	ldr	r7, [pc, #428]	; (77a0 <z_impl_k_mutex_lock+0x21c>)
    75f2:	2365      	movs	r3, #101	; 0x65
    75f4:	463a      	mov	r2, r7
    75f6:	496b      	ldr	r1, [pc, #428]	; (77a4 <z_impl_k_mutex_lock+0x220>)
    75f8:	486b      	ldr	r0, [pc, #428]	; (77a8 <z_impl_k_mutex_lock+0x224>)
    75fa:	f002 fc3a 	bl	9e72 <assert_print>
    75fe:	486b      	ldr	r0, [pc, #428]	; (77ac <z_impl_k_mutex_lock+0x228>)
    7600:	f002 fc37 	bl	9e72 <assert_print>
    7604:	2165      	movs	r1, #101	; 0x65
    7606:	4638      	mov	r0, r7
    7608:	f002 fc2c 	bl	9e64 <assert_post_action>
    760c:	e7c4      	b.n	7598 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    760e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 77b0 <z_impl_k_mutex_lock+0x22c>
    7612:	238e      	movs	r3, #142	; 0x8e
    7614:	4642      	mov	r2, r8
    7616:	4967      	ldr	r1, [pc, #412]	; (77b4 <z_impl_k_mutex_lock+0x230>)
    7618:	4863      	ldr	r0, [pc, #396]	; (77a8 <z_impl_k_mutex_lock+0x224>)
    761a:	f002 fc2a 	bl	9e72 <assert_print>
    761e:	495e      	ldr	r1, [pc, #376]	; (7798 <z_impl_k_mutex_lock+0x214>)
    7620:	4865      	ldr	r0, [pc, #404]	; (77b8 <z_impl_k_mutex_lock+0x234>)
    7622:	f002 fc26 	bl	9e72 <assert_print>
    7626:	218e      	movs	r1, #142	; 0x8e
    7628:	4640      	mov	r0, r8
    762a:	f002 fc1b 	bl	9e64 <assert_post_action>
    762e:	e7c0      	b.n	75b2 <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7630:	68a2      	ldr	r2, [r4, #8]
    7632:	4b5a      	ldr	r3, [pc, #360]	; (779c <z_impl_k_mutex_lock+0x218>)
    7634:	689b      	ldr	r3, [r3, #8]
    7636:	429a      	cmp	r2, r3
    7638:	d0c1      	beq.n	75be <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    763a:	ea55 0106 	orrs.w	r1, r5, r6
    763e:	bf0c      	ite	eq
    7640:	f04f 0801 	moveq.w	r8, #1
    7644:	f04f 0800 	movne.w	r8, #0
    7648:	d04b      	beq.n	76e2 <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    764a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    764e:	4649      	mov	r1, r9
    7650:	f993 000e 	ldrsb.w	r0, [r3, #14]
    7654:	f003 fae3 	bl	ac1e <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7658:	4581      	cmp	r9, r0
    765a:	dc5d      	bgt.n	7718 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    765c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    7660:	9600      	str	r6, [sp, #0]
    7662:	9501      	str	r5, [sp, #4]
    7664:	4622      	mov	r2, r4
    7666:	4639      	mov	r1, r7
    7668:	484b      	ldr	r0, [pc, #300]	; (7798 <z_impl_k_mutex_lock+0x214>)
    766a:	f000 ff8d 	bl	8588 <z_pend_curr>
	if (got_mutex == 0) {
    766e:	2800      	cmp	r0, #0
    7670:	d0bb      	beq.n	75ea <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    7672:	f04f 0320 	mov.w	r3, #32
    7676:	f3ef 8511 	mrs	r5, BASEPRI
    767a:	f383 8812 	msr	BASEPRI_MAX, r3
    767e:	f3bf 8f6f 	isb	sy
    7682:	4845      	ldr	r0, [pc, #276]	; (7798 <z_impl_k_mutex_lock+0x214>)
    7684:	f7ff fd3e 	bl	7104 <z_spin_lock_valid>
    7688:	2800      	cmp	r0, #0
    768a:	d04b      	beq.n	7724 <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    768c:	4842      	ldr	r0, [pc, #264]	; (7798 <z_impl_k_mutex_lock+0x214>)
    768e:	f7ff fd59 	bl	7144 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7692:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7694:	42a3      	cmp	r3, r4
    7696:	d055      	beq.n	7744 <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7698:	2b00      	cmp	r3, #0
    769a:	d053      	beq.n	7744 <z_impl_k_mutex_lock+0x1c0>
    769c:	6921      	ldr	r1, [r4, #16]
    769e:	f993 000e 	ldrsb.w	r0, [r3, #14]
    76a2:	f003 fabc 	bl	ac1e <new_prio_for_inheritance>
    76a6:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    76a8:	4620      	mov	r0, r4
    76aa:	f003 fac3 	bl	ac34 <adjust_owner_prio>
    76ae:	2800      	cmp	r0, #0
    76b0:	d14a      	bne.n	7748 <z_impl_k_mutex_lock+0x1c4>
    76b2:	f1b9 0f00 	cmp.w	r9, #0
    76b6:	d049      	beq.n	774c <z_impl_k_mutex_lock+0x1c8>
    76b8:	f04f 0801 	mov.w	r8, #1
    76bc:	e046      	b.n	774c <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    76be:	6923      	ldr	r3, [r4, #16]
    76c0:	e783      	b.n	75ca <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    76c2:	4c3b      	ldr	r4, [pc, #236]	; (77b0 <z_impl_k_mutex_lock+0x22c>)
    76c4:	23b9      	movs	r3, #185	; 0xb9
    76c6:	4622      	mov	r2, r4
    76c8:	493c      	ldr	r1, [pc, #240]	; (77bc <z_impl_k_mutex_lock+0x238>)
    76ca:	4837      	ldr	r0, [pc, #220]	; (77a8 <z_impl_k_mutex_lock+0x224>)
    76cc:	f002 fbd1 	bl	9e72 <assert_print>
    76d0:	4931      	ldr	r1, [pc, #196]	; (7798 <z_impl_k_mutex_lock+0x214>)
    76d2:	483b      	ldr	r0, [pc, #236]	; (77c0 <z_impl_k_mutex_lock+0x23c>)
    76d4:	f002 fbcd 	bl	9e72 <assert_print>
    76d8:	21b9      	movs	r1, #185	; 0xb9
    76da:	4620      	mov	r0, r4
    76dc:	f002 fbc2 	bl	9e64 <assert_post_action>
    76e0:	e77e      	b.n	75e0 <z_impl_k_mutex_lock+0x5c>
    76e2:	482d      	ldr	r0, [pc, #180]	; (7798 <z_impl_k_mutex_lock+0x214>)
    76e4:	f7ff fd1e 	bl	7124 <z_spin_unlock_valid>
    76e8:	b130      	cbz	r0, 76f8 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    76ea:	f387 8811 	msr	BASEPRI, r7
    76ee:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    76f2:	f06f 000f 	mvn.w	r0, #15
    76f6:	e778      	b.n	75ea <z_impl_k_mutex_lock+0x66>
    76f8:	4c2d      	ldr	r4, [pc, #180]	; (77b0 <z_impl_k_mutex_lock+0x22c>)
    76fa:	23b9      	movs	r3, #185	; 0xb9
    76fc:	4622      	mov	r2, r4
    76fe:	492f      	ldr	r1, [pc, #188]	; (77bc <z_impl_k_mutex_lock+0x238>)
    7700:	4829      	ldr	r0, [pc, #164]	; (77a8 <z_impl_k_mutex_lock+0x224>)
    7702:	f002 fbb6 	bl	9e72 <assert_print>
    7706:	4924      	ldr	r1, [pc, #144]	; (7798 <z_impl_k_mutex_lock+0x214>)
    7708:	482d      	ldr	r0, [pc, #180]	; (77c0 <z_impl_k_mutex_lock+0x23c>)
    770a:	f002 fbb2 	bl	9e72 <assert_print>
    770e:	21b9      	movs	r1, #185	; 0xb9
    7710:	4620      	mov	r0, r4
    7712:	f002 fba7 	bl	9e64 <assert_post_action>
    7716:	e7e8      	b.n	76ea <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    7718:	4601      	mov	r1, r0
    771a:	4620      	mov	r0, r4
    771c:	f003 fa8a 	bl	ac34 <adjust_owner_prio>
    7720:	4681      	mov	r9, r0
    7722:	e79d      	b.n	7660 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7724:	4e22      	ldr	r6, [pc, #136]	; (77b0 <z_impl_k_mutex_lock+0x22c>)
    7726:	238e      	movs	r3, #142	; 0x8e
    7728:	4632      	mov	r2, r6
    772a:	4922      	ldr	r1, [pc, #136]	; (77b4 <z_impl_k_mutex_lock+0x230>)
    772c:	481e      	ldr	r0, [pc, #120]	; (77a8 <z_impl_k_mutex_lock+0x224>)
    772e:	f002 fba0 	bl	9e72 <assert_print>
    7732:	4919      	ldr	r1, [pc, #100]	; (7798 <z_impl_k_mutex_lock+0x214>)
    7734:	4820      	ldr	r0, [pc, #128]	; (77b8 <z_impl_k_mutex_lock+0x234>)
    7736:	f002 fb9c 	bl	9e72 <assert_print>
    773a:	218e      	movs	r1, #142	; 0x8e
    773c:	4630      	mov	r0, r6
    773e:	f002 fb91 	bl	9e64 <assert_post_action>
    7742:	e7a3      	b.n	768c <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7744:	6921      	ldr	r1, [r4, #16]
    7746:	e7af      	b.n	76a8 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    7748:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    774c:	f1b8 0f00 	cmp.w	r8, #0
    7750:	d006      	beq.n	7760 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    7752:	4629      	mov	r1, r5
    7754:	4810      	ldr	r0, [pc, #64]	; (7798 <z_impl_k_mutex_lock+0x214>)
    7756:	f000 fa97 	bl	7c88 <z_reschedule>
	return -EAGAIN;
    775a:	f06f 000a 	mvn.w	r0, #10
    775e:	e744      	b.n	75ea <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7760:	480d      	ldr	r0, [pc, #52]	; (7798 <z_impl_k_mutex_lock+0x214>)
    7762:	f7ff fcdf 	bl	7124 <z_spin_unlock_valid>
    7766:	b130      	cbz	r0, 7776 <z_impl_k_mutex_lock+0x1f2>
    7768:	f385 8811 	msr	BASEPRI, r5
    776c:	f3bf 8f6f 	isb	sy
    7770:	f06f 000a 	mvn.w	r0, #10
    7774:	e739      	b.n	75ea <z_impl_k_mutex_lock+0x66>
    7776:	4c0e      	ldr	r4, [pc, #56]	; (77b0 <z_impl_k_mutex_lock+0x22c>)
    7778:	23b9      	movs	r3, #185	; 0xb9
    777a:	4622      	mov	r2, r4
    777c:	490f      	ldr	r1, [pc, #60]	; (77bc <z_impl_k_mutex_lock+0x238>)
    777e:	480a      	ldr	r0, [pc, #40]	; (77a8 <z_impl_k_mutex_lock+0x224>)
    7780:	f002 fb77 	bl	9e72 <assert_print>
    7784:	4904      	ldr	r1, [pc, #16]	; (7798 <z_impl_k_mutex_lock+0x214>)
    7786:	480e      	ldr	r0, [pc, #56]	; (77c0 <z_impl_k_mutex_lock+0x23c>)
    7788:	f002 fb73 	bl	9e72 <assert_print>
    778c:	21b9      	movs	r1, #185	; 0xb9
    778e:	4620      	mov	r0, r4
    7790:	f002 fb68 	bl	9e64 <assert_post_action>
    7794:	e7e8      	b.n	7768 <z_impl_k_mutex_lock+0x1e4>
    7796:	bf00      	nop
    7798:	20004f58 	.word	0x20004f58
    779c:	20004f28 	.word	0x20004f28
    77a0:	0000c95c 	.word	0x0000c95c
    77a4:	0000c8a4 	.word	0x0000c8a4
    77a8:	0000b180 	.word	0x0000b180
    77ac:	0000c980 	.word	0x0000c980
    77b0:	0000b32c 	.word	0x0000b32c
    77b4:	0000b38c 	.word	0x0000b38c
    77b8:	0000b3a4 	.word	0x0000b3a4
    77bc:	0000b35c 	.word	0x0000b35c
    77c0:	0000b374 	.word	0x0000b374

000077c4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    77c4:	b570      	push	{r4, r5, r6, lr}
    77c6:	4604      	mov	r4, r0
    77c8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    77cc:	bb03      	cbnz	r3, 7810 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    77ce:	68a3      	ldr	r3, [r4, #8]
    77d0:	2b00      	cmp	r3, #0
    77d2:	f000 80a6 	beq.w	7922 <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    77d6:	4a56      	ldr	r2, [pc, #344]	; (7930 <z_impl_k_mutex_unlock+0x16c>)
    77d8:	6892      	ldr	r2, [r2, #8]
    77da:	4293      	cmp	r3, r2
    77dc:	f040 80a4 	bne.w	7928 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    77e0:	68e3      	ldr	r3, [r4, #12]
    77e2:	b323      	cbz	r3, 782e <z_impl_k_mutex_unlock+0x6a>
    77e4:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    77e8:	bb6b      	cbnz	r3, 7846 <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    77ea:	4b51      	ldr	r3, [pc, #324]	; (7930 <z_impl_k_mutex_unlock+0x16c>)
    77ec:	689b      	ldr	r3, [r3, #8]
    77ee:	7bdb      	ldrb	r3, [r3, #15]
    77f0:	2b01      	cmp	r3, #1
    77f2:	d037      	beq.n	7864 <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    77f4:	4b4e      	ldr	r3, [pc, #312]	; (7930 <z_impl_k_mutex_unlock+0x16c>)
    77f6:	689a      	ldr	r2, [r3, #8]
    77f8:	7bd3      	ldrb	r3, [r2, #15]
    77fa:	3b01      	subs	r3, #1
    77fc:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    77fe:	68e3      	ldr	r3, [r4, #12]
    7800:	2b01      	cmp	r3, #1
    7802:	d93e      	bls.n	7882 <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    7804:	3b01      	subs	r3, #1
    7806:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    7808:	f001 f818 	bl	883c <k_sched_unlock>

	return 0;
    780c:	2000      	movs	r0, #0
}
    780e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7810:	4d48      	ldr	r5, [pc, #288]	; (7934 <z_impl_k_mutex_unlock+0x170>)
    7812:	23c7      	movs	r3, #199	; 0xc7
    7814:	462a      	mov	r2, r5
    7816:	4948      	ldr	r1, [pc, #288]	; (7938 <z_impl_k_mutex_unlock+0x174>)
    7818:	4848      	ldr	r0, [pc, #288]	; (793c <z_impl_k_mutex_unlock+0x178>)
    781a:	f002 fb2a 	bl	9e72 <assert_print>
    781e:	4848      	ldr	r0, [pc, #288]	; (7940 <z_impl_k_mutex_unlock+0x17c>)
    7820:	f002 fb27 	bl	9e72 <assert_print>
    7824:	21c7      	movs	r1, #199	; 0xc7
    7826:	4628      	mov	r0, r5
    7828:	f002 fb1c 	bl	9e64 <assert_post_action>
    782c:	e7cf      	b.n	77ce <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    782e:	4d41      	ldr	r5, [pc, #260]	; (7934 <z_impl_k_mutex_unlock+0x170>)
    7830:	23df      	movs	r3, #223	; 0xdf
    7832:	462a      	mov	r2, r5
    7834:	4943      	ldr	r1, [pc, #268]	; (7944 <z_impl_k_mutex_unlock+0x180>)
    7836:	4841      	ldr	r0, [pc, #260]	; (793c <z_impl_k_mutex_unlock+0x178>)
    7838:	f002 fb1b 	bl	9e72 <assert_print>
    783c:	21df      	movs	r1, #223	; 0xdf
    783e:	4628      	mov	r0, r5
    7840:	f002 fb10 	bl	9e64 <assert_post_action>
    7844:	e7ce      	b.n	77e4 <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    7846:	4d40      	ldr	r5, [pc, #256]	; (7948 <z_impl_k_mutex_unlock+0x184>)
    7848:	23fd      	movs	r3, #253	; 0xfd
    784a:	462a      	mov	r2, r5
    784c:	493a      	ldr	r1, [pc, #232]	; (7938 <z_impl_k_mutex_unlock+0x174>)
    784e:	483b      	ldr	r0, [pc, #236]	; (793c <z_impl_k_mutex_unlock+0x178>)
    7850:	f002 fb0f 	bl	9e72 <assert_print>
    7854:	483d      	ldr	r0, [pc, #244]	; (794c <z_impl_k_mutex_unlock+0x188>)
    7856:	f002 fb0c 	bl	9e72 <assert_print>
    785a:	21fd      	movs	r1, #253	; 0xfd
    785c:	4628      	mov	r0, r5
    785e:	f002 fb01 	bl	9e64 <assert_post_action>
    7862:	e7c2      	b.n	77ea <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7864:	4d38      	ldr	r5, [pc, #224]	; (7948 <z_impl_k_mutex_unlock+0x184>)
    7866:	23fe      	movs	r3, #254	; 0xfe
    7868:	462a      	mov	r2, r5
    786a:	4939      	ldr	r1, [pc, #228]	; (7950 <z_impl_k_mutex_unlock+0x18c>)
    786c:	4833      	ldr	r0, [pc, #204]	; (793c <z_impl_k_mutex_unlock+0x178>)
    786e:	f002 fb00 	bl	9e72 <assert_print>
    7872:	4836      	ldr	r0, [pc, #216]	; (794c <z_impl_k_mutex_unlock+0x188>)
    7874:	f002 fafd 	bl	9e72 <assert_print>
    7878:	21fe      	movs	r1, #254	; 0xfe
    787a:	4628      	mov	r0, r5
    787c:	f002 faf2 	bl	9e64 <assert_post_action>
    7880:	e7b8      	b.n	77f4 <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    7882:	f04f 0320 	mov.w	r3, #32
    7886:	f3ef 8511 	mrs	r5, BASEPRI
    788a:	f383 8812 	msr	BASEPRI_MAX, r3
    788e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7892:	4830      	ldr	r0, [pc, #192]	; (7954 <z_impl_k_mutex_unlock+0x190>)
    7894:	f7ff fc36 	bl	7104 <z_spin_lock_valid>
    7898:	b1c0      	cbz	r0, 78cc <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    789a:	482e      	ldr	r0, [pc, #184]	; (7954 <z_impl_k_mutex_unlock+0x190>)
    789c:	f7ff fc52 	bl	7144 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    78a0:	6921      	ldr	r1, [r4, #16]
    78a2:	4620      	mov	r0, r4
    78a4:	f003 f9c6 	bl	ac34 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    78a8:	4620      	mov	r0, r4
    78aa:	f001 f8a9 	bl	8a00 <z_unpend_first_thread>
	mutex->owner = new_owner;
    78ae:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    78b0:	b1e0      	cbz	r0, 78ec <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    78b2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    78b6:	6123      	str	r3, [r4, #16]
    78b8:	2300      	movs	r3, #0
    78ba:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    78be:	f000 fc87 	bl	81d0 <z_ready_thread>
		z_reschedule(&lock, key);
    78c2:	4629      	mov	r1, r5
    78c4:	4823      	ldr	r0, [pc, #140]	; (7954 <z_impl_k_mutex_unlock+0x190>)
    78c6:	f000 f9df 	bl	7c88 <z_reschedule>
    78ca:	e79d      	b.n	7808 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    78cc:	4e22      	ldr	r6, [pc, #136]	; (7958 <z_impl_k_mutex_unlock+0x194>)
    78ce:	238e      	movs	r3, #142	; 0x8e
    78d0:	4632      	mov	r2, r6
    78d2:	4922      	ldr	r1, [pc, #136]	; (795c <z_impl_k_mutex_unlock+0x198>)
    78d4:	4819      	ldr	r0, [pc, #100]	; (793c <z_impl_k_mutex_unlock+0x178>)
    78d6:	f002 facc 	bl	9e72 <assert_print>
    78da:	491e      	ldr	r1, [pc, #120]	; (7954 <z_impl_k_mutex_unlock+0x190>)
    78dc:	4820      	ldr	r0, [pc, #128]	; (7960 <z_impl_k_mutex_unlock+0x19c>)
    78de:	f002 fac8 	bl	9e72 <assert_print>
    78e2:	218e      	movs	r1, #142	; 0x8e
    78e4:	4630      	mov	r0, r6
    78e6:	f002 fabd 	bl	9e64 <assert_post_action>
    78ea:	e7d6      	b.n	789a <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    78ec:	2300      	movs	r3, #0
    78ee:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    78f0:	4818      	ldr	r0, [pc, #96]	; (7954 <z_impl_k_mutex_unlock+0x190>)
    78f2:	f7ff fc17 	bl	7124 <z_spin_unlock_valid>
    78f6:	b120      	cbz	r0, 7902 <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    78f8:	f385 8811 	msr	BASEPRI, r5
    78fc:	f3bf 8f6f 	isb	sy
    7900:	e782      	b.n	7808 <z_impl_k_mutex_unlock+0x44>
    7902:	4c15      	ldr	r4, [pc, #84]	; (7958 <z_impl_k_mutex_unlock+0x194>)
    7904:	23b9      	movs	r3, #185	; 0xb9
    7906:	4622      	mov	r2, r4
    7908:	4916      	ldr	r1, [pc, #88]	; (7964 <z_impl_k_mutex_unlock+0x1a0>)
    790a:	480c      	ldr	r0, [pc, #48]	; (793c <z_impl_k_mutex_unlock+0x178>)
    790c:	f002 fab1 	bl	9e72 <assert_print>
    7910:	4910      	ldr	r1, [pc, #64]	; (7954 <z_impl_k_mutex_unlock+0x190>)
    7912:	4815      	ldr	r0, [pc, #84]	; (7968 <z_impl_k_mutex_unlock+0x1a4>)
    7914:	f002 faad 	bl	9e72 <assert_print>
    7918:	21b9      	movs	r1, #185	; 0xb9
    791a:	4620      	mov	r0, r4
    791c:	f002 faa2 	bl	9e64 <assert_post_action>
    7920:	e7ea      	b.n	78f8 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    7922:	f06f 0015 	mvn.w	r0, #21
    7926:	e772      	b.n	780e <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    7928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    792c:	e76f      	b.n	780e <z_impl_k_mutex_unlock+0x4a>
    792e:	bf00      	nop
    7930:	20004f28 	.word	0x20004f28
    7934:	0000c95c 	.word	0x0000c95c
    7938:	0000c8a4 	.word	0x0000c8a4
    793c:	0000b180 	.word	0x0000b180
    7940:	0000c980 	.word	0x0000c980
    7944:	0000c9a8 	.word	0x0000c9a8
    7948:	0000c9c0 	.word	0x0000c9c0
    794c:	0000c9ec 	.word	0x0000c9ec
    7950:	0000c9f0 	.word	0x0000c9f0
    7954:	20004f58 	.word	0x20004f58
    7958:	0000b32c 	.word	0x0000b32c
    795c:	0000b38c 	.word	0x0000b38c
    7960:	0000b3a4 	.word	0x0000b3a4
    7964:	0000b35c 	.word	0x0000b35c
    7968:	0000b374 	.word	0x0000b374

0000796c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    796c:	b570      	push	{r4, r5, r6, lr}
    796e:	4604      	mov	r4, r0
	__asm__ volatile(
    7970:	f04f 0320 	mov.w	r3, #32
    7974:	f3ef 8511 	mrs	r5, BASEPRI
    7978:	f383 8812 	msr	BASEPRI_MAX, r3
    797c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7980:	4817      	ldr	r0, [pc, #92]	; (79e0 <z_impl_k_sem_give+0x74>)
    7982:	f7ff fbbf 	bl	7104 <z_spin_lock_valid>
    7986:	b180      	cbz	r0, 79aa <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    7988:	4815      	ldr	r0, [pc, #84]	; (79e0 <z_impl_k_sem_give+0x74>)
    798a:	f7ff fbdb 	bl	7144 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    798e:	4620      	mov	r0, r4
    7990:	f001 f836 	bl	8a00 <z_unpend_first_thread>

	if (thread != NULL) {
    7994:	b1c8      	cbz	r0, 79ca <z_impl_k_sem_give+0x5e>
    7996:	2200      	movs	r2, #0
    7998:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    799c:	f000 fc18 	bl	81d0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    79a0:	4629      	mov	r1, r5
    79a2:	480f      	ldr	r0, [pc, #60]	; (79e0 <z_impl_k_sem_give+0x74>)
    79a4:	f000 f970 	bl	7c88 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    79a8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    79aa:	4e0e      	ldr	r6, [pc, #56]	; (79e4 <z_impl_k_sem_give+0x78>)
    79ac:	238e      	movs	r3, #142	; 0x8e
    79ae:	4632      	mov	r2, r6
    79b0:	490d      	ldr	r1, [pc, #52]	; (79e8 <z_impl_k_sem_give+0x7c>)
    79b2:	480e      	ldr	r0, [pc, #56]	; (79ec <z_impl_k_sem_give+0x80>)
    79b4:	f002 fa5d 	bl	9e72 <assert_print>
    79b8:	4909      	ldr	r1, [pc, #36]	; (79e0 <z_impl_k_sem_give+0x74>)
    79ba:	480d      	ldr	r0, [pc, #52]	; (79f0 <z_impl_k_sem_give+0x84>)
    79bc:	f002 fa59 	bl	9e72 <assert_print>
    79c0:	218e      	movs	r1, #142	; 0x8e
    79c2:	4630      	mov	r0, r6
    79c4:	f002 fa4e 	bl	9e64 <assert_post_action>
    79c8:	e7de      	b.n	7988 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    79ca:	68a3      	ldr	r3, [r4, #8]
    79cc:	68e2      	ldr	r2, [r4, #12]
    79ce:	4293      	cmp	r3, r2
    79d0:	d003      	beq.n	79da <z_impl_k_sem_give+0x6e>
    79d2:	2201      	movs	r2, #1
    79d4:	4413      	add	r3, r2
    79d6:	60a3      	str	r3, [r4, #8]
}
    79d8:	e7e2      	b.n	79a0 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    79da:	2200      	movs	r2, #0
    79dc:	e7fa      	b.n	79d4 <z_impl_k_sem_give+0x68>
    79de:	bf00      	nop
    79e0:	20004f5c 	.word	0x20004f5c
    79e4:	0000b32c 	.word	0x0000b32c
    79e8:	0000b38c 	.word	0x0000b38c
    79ec:	0000b180 	.word	0x0000b180
    79f0:	0000b3a4 	.word	0x0000b3a4

000079f4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    79f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79f8:	b082      	sub	sp, #8
    79fa:	4604      	mov	r4, r0
    79fc:	4617      	mov	r7, r2
    79fe:	461d      	mov	r5, r3
    7a00:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    7a04:	b111      	cbz	r1, 7a0c <z_impl_k_sem_take+0x18>
    7a06:	ea55 0302 	orrs.w	r3, r5, r2
    7a0a:	d11f      	bne.n	7a4c <z_impl_k_sem_take+0x58>
    7a0c:	f04f 0320 	mov.w	r3, #32
    7a10:	f3ef 8611 	mrs	r6, BASEPRI
    7a14:	f383 8812 	msr	BASEPRI_MAX, r3
    7a18:	f3bf 8f6f 	isb	sy
    7a1c:	4836      	ldr	r0, [pc, #216]	; (7af8 <z_impl_k_sem_take+0x104>)
    7a1e:	f7ff fb71 	bl	7104 <z_spin_lock_valid>
    7a22:	b310      	cbz	r0, 7a6a <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    7a24:	4834      	ldr	r0, [pc, #208]	; (7af8 <z_impl_k_sem_take+0x104>)
    7a26:	f7ff fb8d 	bl	7144 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7a2a:	68a1      	ldr	r1, [r4, #8]
    7a2c:	2900      	cmp	r1, #0
    7a2e:	d03d      	beq.n	7aac <z_impl_k_sem_take+0xb8>
		sem->count--;
    7a30:	3901      	subs	r1, #1
    7a32:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a34:	4830      	ldr	r0, [pc, #192]	; (7af8 <z_impl_k_sem_take+0x104>)
    7a36:	f7ff fb75 	bl	7124 <z_spin_unlock_valid>
    7a3a:	b338      	cbz	r0, 7a8c <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    7a3c:	f386 8811 	msr	BASEPRI, r6
    7a40:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7a44:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7a46:	b002      	add	sp, #8
    7a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    7a4c:	4e2b      	ldr	r6, [pc, #172]	; (7afc <z_impl_k_sem_take+0x108>)
    7a4e:	2379      	movs	r3, #121	; 0x79
    7a50:	4632      	mov	r2, r6
    7a52:	492b      	ldr	r1, [pc, #172]	; (7b00 <z_impl_k_sem_take+0x10c>)
    7a54:	482b      	ldr	r0, [pc, #172]	; (7b04 <z_impl_k_sem_take+0x110>)
    7a56:	f002 fa0c 	bl	9e72 <assert_print>
    7a5a:	482b      	ldr	r0, [pc, #172]	; (7b08 <z_impl_k_sem_take+0x114>)
    7a5c:	f002 fa09 	bl	9e72 <assert_print>
    7a60:	2179      	movs	r1, #121	; 0x79
    7a62:	4630      	mov	r0, r6
    7a64:	f002 f9fe 	bl	9e64 <assert_post_action>
    7a68:	e7d0      	b.n	7a0c <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7a6a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 7b0c <z_impl_k_sem_take+0x118>
    7a6e:	238e      	movs	r3, #142	; 0x8e
    7a70:	4642      	mov	r2, r8
    7a72:	4927      	ldr	r1, [pc, #156]	; (7b10 <z_impl_k_sem_take+0x11c>)
    7a74:	4823      	ldr	r0, [pc, #140]	; (7b04 <z_impl_k_sem_take+0x110>)
    7a76:	f002 f9fc 	bl	9e72 <assert_print>
    7a7a:	491f      	ldr	r1, [pc, #124]	; (7af8 <z_impl_k_sem_take+0x104>)
    7a7c:	4825      	ldr	r0, [pc, #148]	; (7b14 <z_impl_k_sem_take+0x120>)
    7a7e:	f002 f9f8 	bl	9e72 <assert_print>
    7a82:	218e      	movs	r1, #142	; 0x8e
    7a84:	4640      	mov	r0, r8
    7a86:	f002 f9ed 	bl	9e64 <assert_post_action>
    7a8a:	e7cb      	b.n	7a24 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a8c:	4c1f      	ldr	r4, [pc, #124]	; (7b0c <z_impl_k_sem_take+0x118>)
    7a8e:	23b9      	movs	r3, #185	; 0xb9
    7a90:	4622      	mov	r2, r4
    7a92:	4921      	ldr	r1, [pc, #132]	; (7b18 <z_impl_k_sem_take+0x124>)
    7a94:	481b      	ldr	r0, [pc, #108]	; (7b04 <z_impl_k_sem_take+0x110>)
    7a96:	f002 f9ec 	bl	9e72 <assert_print>
    7a9a:	4917      	ldr	r1, [pc, #92]	; (7af8 <z_impl_k_sem_take+0x104>)
    7a9c:	481f      	ldr	r0, [pc, #124]	; (7b1c <z_impl_k_sem_take+0x128>)
    7a9e:	f002 f9e8 	bl	9e72 <assert_print>
    7aa2:	21b9      	movs	r1, #185	; 0xb9
    7aa4:	4620      	mov	r0, r4
    7aa6:	f002 f9dd 	bl	9e64 <assert_post_action>
    7aaa:	e7c7      	b.n	7a3c <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7aac:	ea55 0307 	orrs.w	r3, r5, r7
    7ab0:	d007      	beq.n	7ac2 <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7ab2:	9700      	str	r7, [sp, #0]
    7ab4:	9501      	str	r5, [sp, #4]
    7ab6:	4622      	mov	r2, r4
    7ab8:	4631      	mov	r1, r6
    7aba:	480f      	ldr	r0, [pc, #60]	; (7af8 <z_impl_k_sem_take+0x104>)
    7abc:	f000 fd64 	bl	8588 <z_pend_curr>
	return ret;
    7ac0:	e7c1      	b.n	7a46 <z_impl_k_sem_take+0x52>
    7ac2:	480d      	ldr	r0, [pc, #52]	; (7af8 <z_impl_k_sem_take+0x104>)
    7ac4:	f7ff fb2e 	bl	7124 <z_spin_unlock_valid>
    7ac8:	b130      	cbz	r0, 7ad8 <z_impl_k_sem_take+0xe4>
    7aca:	f386 8811 	msr	BASEPRI, r6
    7ace:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    7ad2:	f06f 000f 	mvn.w	r0, #15
    7ad6:	e7b6      	b.n	7a46 <z_impl_k_sem_take+0x52>
    7ad8:	4c0c      	ldr	r4, [pc, #48]	; (7b0c <z_impl_k_sem_take+0x118>)
    7ada:	23b9      	movs	r3, #185	; 0xb9
    7adc:	4622      	mov	r2, r4
    7ade:	490e      	ldr	r1, [pc, #56]	; (7b18 <z_impl_k_sem_take+0x124>)
    7ae0:	4808      	ldr	r0, [pc, #32]	; (7b04 <z_impl_k_sem_take+0x110>)
    7ae2:	f002 f9c6 	bl	9e72 <assert_print>
    7ae6:	4904      	ldr	r1, [pc, #16]	; (7af8 <z_impl_k_sem_take+0x104>)
    7ae8:	480c      	ldr	r0, [pc, #48]	; (7b1c <z_impl_k_sem_take+0x128>)
    7aea:	f002 f9c2 	bl	9e72 <assert_print>
    7aee:	21b9      	movs	r1, #185	; 0xb9
    7af0:	4620      	mov	r0, r4
    7af2:	f002 f9b7 	bl	9e64 <assert_post_action>
    7af6:	e7e8      	b.n	7aca <z_impl_k_sem_take+0xd6>
    7af8:	20004f5c 	.word	0x20004f5c
    7afc:	0000ca24 	.word	0x0000ca24
    7b00:	0000ca44 	.word	0x0000ca44
    7b04:	0000b180 	.word	0x0000b180
    7b08:	0000c9ec 	.word	0x0000c9ec
    7b0c:	0000b32c 	.word	0x0000b32c
    7b10:	0000b38c 	.word	0x0000b38c
    7b14:	0000b3a4 	.word	0x0000b3a4
    7b18:	0000b35c 	.word	0x0000b35c
    7b1c:	0000b374 	.word	0x0000b374

00007b20 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    7b20:	b538      	push	{r3, r4, r5, lr}
    7b22:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    7b24:	6883      	ldr	r3, [r0, #8]
    7b26:	b10b      	cbz	r3, 7b2c <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    7b28:	68a0      	ldr	r0, [r4, #8]
    7b2a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    7b2c:	4d06      	ldr	r5, [pc, #24]	; (7b48 <pended_on_thread+0x28>)
    7b2e:	f240 23b9 	movw	r3, #697	; 0x2b9
    7b32:	462a      	mov	r2, r5
    7b34:	4905      	ldr	r1, [pc, #20]	; (7b4c <pended_on_thread+0x2c>)
    7b36:	4806      	ldr	r0, [pc, #24]	; (7b50 <pended_on_thread+0x30>)
    7b38:	f002 f99b 	bl	9e72 <assert_print>
    7b3c:	f240 21b9 	movw	r1, #697	; 0x2b9
    7b40:	4628      	mov	r0, r5
    7b42:	f002 f98f 	bl	9e64 <assert_post_action>
    7b46:	e7ef      	b.n	7b28 <pended_on_thread+0x8>
    7b48:	0000ca94 	.word	0x0000ca94
    7b4c:	0000cab8 	.word	0x0000cab8
    7b50:	0000b180 	.word	0x0000b180

00007b54 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7b58:	bf08      	it	eq
    7b5a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    7b5e:	d100      	bne.n	7b62 <add_thread_timeout+0xe>
    7b60:	4770      	bx	lr
{
    7b62:	b508      	push	{r3, lr}
    7b64:	4902      	ldr	r1, [pc, #8]	; (7b70 <add_thread_timeout+0x1c>)
    7b66:	3018      	adds	r0, #24
    7b68:	f001 fa7c 	bl	9064 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    7b6c:	bd08      	pop	{r3, pc}
    7b6e:	bf00      	nop
    7b70:	0000832d 	.word	0x0000832d

00007b74 <z_reset_time_slice>:
{
    7b74:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    7b76:	4b07      	ldr	r3, [pc, #28]	; (7b94 <z_reset_time_slice+0x20>)
    7b78:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    7b7a:	b904      	cbnz	r4, 7b7e <z_reset_time_slice+0xa>
}
    7b7c:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    7b7e:	f7fc ff5b 	bl	4a38 <sys_clock_elapsed>
    7b82:	4404      	add	r4, r0
    7b84:	4b04      	ldr	r3, [pc, #16]	; (7b98 <z_reset_time_slice+0x24>)
    7b86:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    7b88:	2100      	movs	r1, #0
    7b8a:	4b02      	ldr	r3, [pc, #8]	; (7b94 <z_reset_time_slice+0x20>)
    7b8c:	6818      	ldr	r0, [r3, #0]
    7b8e:	f001 fbf9 	bl	9384 <z_set_timeout_expiry>
}
    7b92:	e7f3      	b.n	7b7c <z_reset_time_slice+0x8>
    7b94:	20004f6c 	.word	0x20004f6c
    7b98:	20004f28 	.word	0x20004f28

00007b9c <k_sched_time_slice_set>:
{
    7b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ba0:	4604      	mov	r4, r0
    7ba2:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    7ba4:	2700      	movs	r7, #0
	__asm__ volatile(
    7ba6:	f04f 0320 	mov.w	r3, #32
    7baa:	f3ef 8611 	mrs	r6, BASEPRI
    7bae:	f383 8812 	msr	BASEPRI_MAX, r3
    7bb2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7bb6:	482a      	ldr	r0, [pc, #168]	; (7c60 <k_sched_time_slice_set+0xc4>)
    7bb8:	f7ff faa4 	bl	7104 <z_spin_lock_valid>
    7bbc:	b118      	cbz	r0, 7bc6 <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    7bbe:	4828      	ldr	r0, [pc, #160]	; (7c60 <k_sched_time_slice_set+0xc4>)
    7bc0:	f7ff fac0 	bl	7144 <z_spin_lock_set_owner>
	return k;
    7bc4:	e023      	b.n	7c0e <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7bc6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 7c64 <k_sched_time_slice_set+0xc8>
    7bca:	238e      	movs	r3, #142	; 0x8e
    7bcc:	4642      	mov	r2, r8
    7bce:	4926      	ldr	r1, [pc, #152]	; (7c68 <k_sched_time_slice_set+0xcc>)
    7bd0:	4826      	ldr	r0, [pc, #152]	; (7c6c <k_sched_time_slice_set+0xd0>)
    7bd2:	f002 f94e 	bl	9e72 <assert_print>
    7bd6:	4922      	ldr	r1, [pc, #136]	; (7c60 <k_sched_time_slice_set+0xc4>)
    7bd8:	4825      	ldr	r0, [pc, #148]	; (7c70 <k_sched_time_slice_set+0xd4>)
    7bda:	f002 f94a 	bl	9e72 <assert_print>
    7bde:	218e      	movs	r1, #142	; 0x8e
    7be0:	4640      	mov	r0, r8
    7be2:	f002 f93f 	bl	9e64 <assert_post_action>
    7be6:	e7ea      	b.n	7bbe <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    7be8:	2802      	cmp	r0, #2
    7bea:	bfb8      	it	lt
    7bec:	2002      	movlt	r0, #2
    7bee:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    7bf0:	4b20      	ldr	r3, [pc, #128]	; (7c74 <k_sched_time_slice_set+0xd8>)
    7bf2:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    7bf4:	4b20      	ldr	r3, [pc, #128]	; (7c78 <k_sched_time_slice_set+0xdc>)
    7bf6:	6898      	ldr	r0, [r3, #8]
    7bf8:	f7ff ffbc 	bl	7b74 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7bfc:	4818      	ldr	r0, [pc, #96]	; (7c60 <k_sched_time_slice_set+0xc4>)
    7bfe:	f7ff fa91 	bl	7124 <z_spin_unlock_valid>
    7c02:	b1d0      	cbz	r0, 7c3a <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    7c04:	f386 8811 	msr	BASEPRI, r6
    7c08:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7c0c:	2701      	movs	r7, #1
    7c0e:	bb27      	cbnz	r7, 7c5a <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    7c10:	4b19      	ldr	r3, [pc, #100]	; (7c78 <k_sched_time_slice_set+0xdc>)
    7c12:	2200      	movs	r2, #0
    7c14:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    7c16:	0c61      	lsrs	r1, r4, #17
    7c18:	03e3      	lsls	r3, r4, #15
    7c1a:	f240 30e7 	movw	r0, #999	; 0x3e7
    7c1e:	1818      	adds	r0, r3, r0
    7c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7c24:	f04f 0300 	mov.w	r3, #0
    7c28:	f141 0100 	adc.w	r1, r1, #0
    7c2c:	f7f8 fa68 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    7c30:	4b12      	ldr	r3, [pc, #72]	; (7c7c <k_sched_time_slice_set+0xe0>)
    7c32:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    7c34:	2c00      	cmp	r4, #0
    7c36:	dcd7      	bgt.n	7be8 <k_sched_time_slice_set+0x4c>
    7c38:	e7da      	b.n	7bf0 <k_sched_time_slice_set+0x54>
    7c3a:	4f0a      	ldr	r7, [pc, #40]	; (7c64 <k_sched_time_slice_set+0xc8>)
    7c3c:	23b9      	movs	r3, #185	; 0xb9
    7c3e:	463a      	mov	r2, r7
    7c40:	490f      	ldr	r1, [pc, #60]	; (7c80 <k_sched_time_slice_set+0xe4>)
    7c42:	480a      	ldr	r0, [pc, #40]	; (7c6c <k_sched_time_slice_set+0xd0>)
    7c44:	f002 f915 	bl	9e72 <assert_print>
    7c48:	4905      	ldr	r1, [pc, #20]	; (7c60 <k_sched_time_slice_set+0xc4>)
    7c4a:	480e      	ldr	r0, [pc, #56]	; (7c84 <k_sched_time_slice_set+0xe8>)
    7c4c:	f002 f911 	bl	9e72 <assert_print>
    7c50:	21b9      	movs	r1, #185	; 0xb9
    7c52:	4638      	mov	r0, r7
    7c54:	f002 f906 	bl	9e64 <assert_post_action>
    7c58:	e7d4      	b.n	7c04 <k_sched_time_slice_set+0x68>
}
    7c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c5e:	bf00      	nop
    7c60:	20004f64 	.word	0x20004f64
    7c64:	0000b32c 	.word	0x0000b32c
    7c68:	0000b38c 	.word	0x0000b38c
    7c6c:	0000b180 	.word	0x0000b180
    7c70:	0000b3a4 	.word	0x0000b3a4
    7c74:	20004f68 	.word	0x20004f68
    7c78:	20004f28 	.word	0x20004f28
    7c7c:	20004f6c 	.word	0x20004f6c
    7c80:	0000b35c 	.word	0x0000b35c
    7c84:	0000b374 	.word	0x0000b374

00007c88 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    7c88:	b570      	push	{r4, r5, r6, lr}
    7c8a:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    7c8c:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7c8e:	b921      	cbnz	r1, 7c9a <z_reschedule+0x12>
    7c90:	f3ef 8305 	mrs	r3, IPSR
    7c94:	b913      	cbnz	r3, 7c9c <z_reschedule+0x14>
    7c96:	2101      	movs	r1, #1
    7c98:	e000      	b.n	7c9c <z_reschedule+0x14>
    7c9a:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    7c9c:	f011 0f01 	tst.w	r1, #1
    7ca0:	d01c      	beq.n	7cdc <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    7ca2:	4b1b      	ldr	r3, [pc, #108]	; (7d10 <z_reschedule+0x88>)
    7ca4:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    7ca6:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    7ca8:	429a      	cmp	r2, r3
    7caa:	d017      	beq.n	7cdc <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7cac:	4620      	mov	r0, r4
    7cae:	f7ff fa39 	bl	7124 <z_spin_unlock_valid>
    7cb2:	b118      	cbz	r0, 7cbc <z_reschedule+0x34>
	ret = arch_swap(key);
    7cb4:	4628      	mov	r0, r5
    7cb6:	f7fb f853 	bl	2d60 <arch_swap>
		z_swap(lock, key);
    7cba:	e017      	b.n	7cec <z_reschedule+0x64>
    7cbc:	4e15      	ldr	r6, [pc, #84]	; (7d14 <z_reschedule+0x8c>)
    7cbe:	23d0      	movs	r3, #208	; 0xd0
    7cc0:	4632      	mov	r2, r6
    7cc2:	4915      	ldr	r1, [pc, #84]	; (7d18 <z_reschedule+0x90>)
    7cc4:	4815      	ldr	r0, [pc, #84]	; (7d1c <z_reschedule+0x94>)
    7cc6:	f002 f8d4 	bl	9e72 <assert_print>
    7cca:	4621      	mov	r1, r4
    7ccc:	4814      	ldr	r0, [pc, #80]	; (7d20 <z_reschedule+0x98>)
    7cce:	f002 f8d0 	bl	9e72 <assert_print>
    7cd2:	21d0      	movs	r1, #208	; 0xd0
    7cd4:	4630      	mov	r0, r6
    7cd6:	f002 f8c5 	bl	9e64 <assert_post_action>
    7cda:	e7eb      	b.n	7cb4 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7cdc:	4620      	mov	r0, r4
    7cde:	f7ff fa21 	bl	7124 <z_spin_unlock_valid>
    7ce2:	b120      	cbz	r0, 7cee <z_reschedule+0x66>
    7ce4:	f385 8811 	msr	BASEPRI, r5
    7ce8:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    7cec:	bd70      	pop	{r4, r5, r6, pc}
    7cee:	4e09      	ldr	r6, [pc, #36]	; (7d14 <z_reschedule+0x8c>)
    7cf0:	23b9      	movs	r3, #185	; 0xb9
    7cf2:	4632      	mov	r2, r6
    7cf4:	4908      	ldr	r1, [pc, #32]	; (7d18 <z_reschedule+0x90>)
    7cf6:	4809      	ldr	r0, [pc, #36]	; (7d1c <z_reschedule+0x94>)
    7cf8:	f002 f8bb 	bl	9e72 <assert_print>
    7cfc:	4621      	mov	r1, r4
    7cfe:	4808      	ldr	r0, [pc, #32]	; (7d20 <z_reschedule+0x98>)
    7d00:	f002 f8b7 	bl	9e72 <assert_print>
    7d04:	21b9      	movs	r1, #185	; 0xb9
    7d06:	4630      	mov	r0, r6
    7d08:	f002 f8ac 	bl	9e64 <assert_post_action>
    7d0c:	e7ea      	b.n	7ce4 <z_reschedule+0x5c>
    7d0e:	bf00      	nop
    7d10:	20004f28 	.word	0x20004f28
    7d14:	0000b32c 	.word	0x0000b32c
    7d18:	0000b35c 	.word	0x0000b35c
    7d1c:	0000b180 	.word	0x0000b180
    7d20:	0000b374 	.word	0x0000b374

00007d24 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    7d24:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    7d26:	2400      	movs	r4, #0
	__asm__ volatile(
    7d28:	f04f 0320 	mov.w	r3, #32
    7d2c:	f3ef 8511 	mrs	r5, BASEPRI
    7d30:	f383 8812 	msr	BASEPRI_MAX, r3
    7d34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d38:	482f      	ldr	r0, [pc, #188]	; (7df8 <k_sched_lock+0xd4>)
    7d3a:	f7ff f9e3 	bl	7104 <z_spin_lock_valid>
    7d3e:	b118      	cbz	r0, 7d48 <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    7d40:	482d      	ldr	r0, [pc, #180]	; (7df8 <k_sched_lock+0xd4>)
    7d42:	f7ff f9ff 	bl	7144 <z_spin_lock_set_owner>
	return k;
    7d46:	e022      	b.n	7d8e <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d48:	4e2c      	ldr	r6, [pc, #176]	; (7dfc <k_sched_lock+0xd8>)
    7d4a:	238e      	movs	r3, #142	; 0x8e
    7d4c:	4632      	mov	r2, r6
    7d4e:	492c      	ldr	r1, [pc, #176]	; (7e00 <k_sched_lock+0xdc>)
    7d50:	482c      	ldr	r0, [pc, #176]	; (7e04 <k_sched_lock+0xe0>)
    7d52:	f002 f88e 	bl	9e72 <assert_print>
    7d56:	4928      	ldr	r1, [pc, #160]	; (7df8 <k_sched_lock+0xd4>)
    7d58:	482b      	ldr	r0, [pc, #172]	; (7e08 <k_sched_lock+0xe4>)
    7d5a:	f002 f88a 	bl	9e72 <assert_print>
    7d5e:	218e      	movs	r1, #142	; 0x8e
    7d60:	4630      	mov	r0, r6
    7d62:	f002 f87f 	bl	9e64 <assert_post_action>
    7d66:	e7eb      	b.n	7d40 <k_sched_lock+0x1c>
    7d68:	4b28      	ldr	r3, [pc, #160]	; (7e0c <k_sched_lock+0xe8>)
    7d6a:	689b      	ldr	r3, [r3, #8]
    7d6c:	7bdb      	ldrb	r3, [r3, #15]
    7d6e:	2b01      	cmp	r3, #1
    7d70:	d022      	beq.n	7db8 <k_sched_lock+0x94>
	--_current->base.sched_locked;
    7d72:	4b26      	ldr	r3, [pc, #152]	; (7e0c <k_sched_lock+0xe8>)
    7d74:	689a      	ldr	r2, [r3, #8]
    7d76:	7bd3      	ldrb	r3, [r2, #15]
    7d78:	3b01      	subs	r3, #1
    7d7a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d7c:	481e      	ldr	r0, [pc, #120]	; (7df8 <k_sched_lock+0xd4>)
    7d7e:	f7ff f9d1 	bl	7124 <z_spin_unlock_valid>
    7d82:	b340      	cbz	r0, 7dd6 <k_sched_lock+0xb2>
	__asm__ volatile(
    7d84:	f385 8811 	msr	BASEPRI, r5
    7d88:	f3bf 8f6f 	isb	sy
    7d8c:	2401      	movs	r4, #1
    7d8e:	2c00      	cmp	r4, #0
    7d90:	d131      	bne.n	7df6 <k_sched_lock+0xd2>
    7d92:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7d96:	2b00      	cmp	r3, #0
    7d98:	d0e6      	beq.n	7d68 <k_sched_lock+0x44>
    7d9a:	4c1d      	ldr	r4, [pc, #116]	; (7e10 <k_sched_lock+0xec>)
    7d9c:	23fd      	movs	r3, #253	; 0xfd
    7d9e:	4622      	mov	r2, r4
    7da0:	491c      	ldr	r1, [pc, #112]	; (7e14 <k_sched_lock+0xf0>)
    7da2:	4818      	ldr	r0, [pc, #96]	; (7e04 <k_sched_lock+0xe0>)
    7da4:	f002 f865 	bl	9e72 <assert_print>
    7da8:	481b      	ldr	r0, [pc, #108]	; (7e18 <k_sched_lock+0xf4>)
    7daa:	f002 f862 	bl	9e72 <assert_print>
    7dae:	21fd      	movs	r1, #253	; 0xfd
    7db0:	4620      	mov	r0, r4
    7db2:	f002 f857 	bl	9e64 <assert_post_action>
    7db6:	e7d7      	b.n	7d68 <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7db8:	4c15      	ldr	r4, [pc, #84]	; (7e10 <k_sched_lock+0xec>)
    7dba:	23fe      	movs	r3, #254	; 0xfe
    7dbc:	4622      	mov	r2, r4
    7dbe:	4917      	ldr	r1, [pc, #92]	; (7e1c <k_sched_lock+0xf8>)
    7dc0:	4810      	ldr	r0, [pc, #64]	; (7e04 <k_sched_lock+0xe0>)
    7dc2:	f002 f856 	bl	9e72 <assert_print>
    7dc6:	4814      	ldr	r0, [pc, #80]	; (7e18 <k_sched_lock+0xf4>)
    7dc8:	f002 f853 	bl	9e72 <assert_print>
    7dcc:	21fe      	movs	r1, #254	; 0xfe
    7dce:	4620      	mov	r0, r4
    7dd0:	f002 f848 	bl	9e64 <assert_post_action>
    7dd4:	e7cd      	b.n	7d72 <k_sched_lock+0x4e>
    7dd6:	4c09      	ldr	r4, [pc, #36]	; (7dfc <k_sched_lock+0xd8>)
    7dd8:	23b9      	movs	r3, #185	; 0xb9
    7dda:	4622      	mov	r2, r4
    7ddc:	4910      	ldr	r1, [pc, #64]	; (7e20 <k_sched_lock+0xfc>)
    7dde:	4809      	ldr	r0, [pc, #36]	; (7e04 <k_sched_lock+0xe0>)
    7de0:	f002 f847 	bl	9e72 <assert_print>
    7de4:	4904      	ldr	r1, [pc, #16]	; (7df8 <k_sched_lock+0xd4>)
    7de6:	480f      	ldr	r0, [pc, #60]	; (7e24 <k_sched_lock+0x100>)
    7de8:	f002 f843 	bl	9e72 <assert_print>
    7dec:	21b9      	movs	r1, #185	; 0xb9
    7dee:	4620      	mov	r0, r4
    7df0:	f002 f838 	bl	9e64 <assert_post_action>
    7df4:	e7c6      	b.n	7d84 <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    7df6:	bd70      	pop	{r4, r5, r6, pc}
    7df8:	20004f64 	.word	0x20004f64
    7dfc:	0000b32c 	.word	0x0000b32c
    7e00:	0000b38c 	.word	0x0000b38c
    7e04:	0000b180 	.word	0x0000b180
    7e08:	0000b3a4 	.word	0x0000b3a4
    7e0c:	20004f28 	.word	0x20004f28
    7e10:	0000c9c0 	.word	0x0000c9c0
    7e14:	0000c8a4 	.word	0x0000c8a4
    7e18:	0000c9ec 	.word	0x0000c9ec
    7e1c:	0000c9f0 	.word	0x0000c9f0
    7e20:	0000b35c 	.word	0x0000b35c
    7e24:	0000b374 	.word	0x0000b374

00007e28 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    7e28:	b538      	push	{r3, r4, r5, lr}
    7e2a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7e2c:	4b0c      	ldr	r3, [pc, #48]	; (7e60 <z_priq_dumb_remove+0x38>)
    7e2e:	4299      	cmp	r1, r3
    7e30:	d007      	beq.n	7e42 <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    7e32:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    7e34:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    7e36:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7e38:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7e3a:	2300      	movs	r3, #0
    7e3c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    7e3e:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    7e40:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7e42:	4d08      	ldr	r5, [pc, #32]	; (7e64 <z_priq_dumb_remove+0x3c>)
    7e44:	f240 433d 	movw	r3, #1085	; 0x43d
    7e48:	462a      	mov	r2, r5
    7e4a:	4907      	ldr	r1, [pc, #28]	; (7e68 <z_priq_dumb_remove+0x40>)
    7e4c:	4807      	ldr	r0, [pc, #28]	; (7e6c <z_priq_dumb_remove+0x44>)
    7e4e:	f002 f810 	bl	9e72 <assert_print>
    7e52:	f240 413d 	movw	r1, #1085	; 0x43d
    7e56:	4628      	mov	r0, r5
    7e58:	f002 f804 	bl	9e64 <assert_post_action>
    7e5c:	e7e9      	b.n	7e32 <z_priq_dumb_remove+0xa>
    7e5e:	bf00      	nop
    7e60:	20004290 	.word	0x20004290
    7e64:	0000ca94 	.word	0x0000ca94
    7e68:	0000cad0 	.word	0x0000cad0
    7e6c:	0000b180 	.word	0x0000b180

00007e70 <update_cache>:
{
    7e70:	b538      	push	{r3, r4, r5, lr}
    7e72:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    7e74:	4819      	ldr	r0, [pc, #100]	; (7edc <update_cache+0x6c>)
    7e76:	f002 ff10 	bl	ac9a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7e7a:	4605      	mov	r5, r0
    7e7c:	b188      	cbz	r0, 7ea2 <update_cache+0x32>
	if (preempt_ok != 0) {
    7e7e:	bb14      	cbnz	r4, 7ec6 <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    7e80:	4b17      	ldr	r3, [pc, #92]	; (7ee0 <update_cache+0x70>)
    7e82:	689b      	ldr	r3, [r3, #8]
    7e84:	b183      	cbz	r3, 7ea8 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    7e86:	4b16      	ldr	r3, [pc, #88]	; (7ee0 <update_cache+0x70>)
    7e88:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    7e8a:	7b5a      	ldrb	r2, [r3, #13]
    7e8c:	f012 0f1f 	tst.w	r2, #31
    7e90:	d119      	bne.n	7ec6 <update_cache+0x56>
	return node->next != NULL;
    7e92:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    7e94:	b9ba      	cbnz	r2, 7ec6 <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    7e96:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    7e98:	2a7f      	cmp	r2, #127	; 0x7f
    7e9a:	d914      	bls.n	7ec6 <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    7e9c:	4a10      	ldr	r2, [pc, #64]	; (7ee0 <update_cache+0x70>)
    7e9e:	61d3      	str	r3, [r2, #28]
    7ea0:	e01a      	b.n	7ed8 <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7ea2:	4b0f      	ldr	r3, [pc, #60]	; (7ee0 <update_cache+0x70>)
    7ea4:	68dd      	ldr	r5, [r3, #12]
    7ea6:	e7ea      	b.n	7e7e <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    7ea8:	4c0e      	ldr	r4, [pc, #56]	; (7ee4 <update_cache+0x74>)
    7eaa:	2389      	movs	r3, #137	; 0x89
    7eac:	4622      	mov	r2, r4
    7eae:	490e      	ldr	r1, [pc, #56]	; (7ee8 <update_cache+0x78>)
    7eb0:	480e      	ldr	r0, [pc, #56]	; (7eec <update_cache+0x7c>)
    7eb2:	f001 ffde 	bl	9e72 <assert_print>
    7eb6:	480e      	ldr	r0, [pc, #56]	; (7ef0 <update_cache+0x80>)
    7eb8:	f001 ffdb 	bl	9e72 <assert_print>
    7ebc:	2189      	movs	r1, #137	; 0x89
    7ebe:	4620      	mov	r0, r4
    7ec0:	f001 ffd0 	bl	9e64 <assert_post_action>
    7ec4:	e7df      	b.n	7e86 <update_cache+0x16>
		if (thread != _current) {
    7ec6:	4b06      	ldr	r3, [pc, #24]	; (7ee0 <update_cache+0x70>)
    7ec8:	689b      	ldr	r3, [r3, #8]
    7eca:	42ab      	cmp	r3, r5
    7ecc:	d002      	beq.n	7ed4 <update_cache+0x64>
			z_reset_time_slice(thread);
    7ece:	4628      	mov	r0, r5
    7ed0:	f7ff fe50 	bl	7b74 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    7ed4:	4b02      	ldr	r3, [pc, #8]	; (7ee0 <update_cache+0x70>)
    7ed6:	61dd      	str	r5, [r3, #28]
}
    7ed8:	bd38      	pop	{r3, r4, r5, pc}
    7eda:	bf00      	nop
    7edc:	20004f48 	.word	0x20004f48
    7ee0:	20004f28 	.word	0x20004f28
    7ee4:	0000ca94 	.word	0x0000ca94
    7ee8:	0000caf4 	.word	0x0000caf4
    7eec:	0000b180 	.word	0x0000b180
    7ef0:	0000c9ec 	.word	0x0000c9ec

00007ef4 <move_thread_to_end_of_prio_q>:
{
    7ef4:	b538      	push	{r3, r4, r5, lr}
    7ef6:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    7ef8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    7efa:	f990 300d 	ldrsb.w	r3, [r0, #13]
    7efe:	2b00      	cmp	r3, #0
    7f00:	db2b      	blt.n	7f5a <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    7f02:	7b6b      	ldrb	r3, [r5, #13]
    7f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7f08:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7f0a:	4b22      	ldr	r3, [pc, #136]	; (7f94 <move_thread_to_end_of_prio_q+0xa0>)
    7f0c:	429d      	cmp	r5, r3
    7f0e:	d02c      	beq.n	7f6a <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    7f10:	4b21      	ldr	r3, [pc, #132]	; (7f98 <move_thread_to_end_of_prio_q+0xa4>)
    7f12:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7f16:	429c      	cmp	r4, r3
    7f18:	d039      	beq.n	7f8e <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7f1a:	b16c      	cbz	r4, 7f38 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7f1c:	4621      	mov	r1, r4
    7f1e:	4628      	mov	r0, r5
    7f20:	f002 fe9c 	bl	ac5c <z_sched_prio_cmp>
    7f24:	2800      	cmp	r0, #0
    7f26:	dc2c      	bgt.n	7f82 <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7f28:	b134      	cbz	r4, 7f38 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    7f2a:	4b1b      	ldr	r3, [pc, #108]	; (7f98 <move_thread_to_end_of_prio_q+0xa4>)
    7f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7f2e:	429c      	cmp	r4, r3
    7f30:	d002      	beq.n	7f38 <move_thread_to_end_of_prio_q+0x44>
    7f32:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7f34:	2c00      	cmp	r4, #0
    7f36:	d1f0      	bne.n	7f1a <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    7f38:	4b17      	ldr	r3, [pc, #92]	; (7f98 <move_thread_to_end_of_prio_q+0xa4>)
    7f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    7f3c:	f103 0120 	add.w	r1, r3, #32
    7f40:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    7f42:	606a      	str	r2, [r5, #4]
	tail->next = node;
    7f44:	6015      	str	r5, [r2, #0]
	list->tail = node;
    7f46:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    7f48:	4b13      	ldr	r3, [pc, #76]	; (7f98 <move_thread_to_end_of_prio_q+0xa4>)
    7f4a:	6898      	ldr	r0, [r3, #8]
    7f4c:	42a8      	cmp	r0, r5
    7f4e:	bf14      	ite	ne
    7f50:	2000      	movne	r0, #0
    7f52:	2001      	moveq	r0, #1
    7f54:	f7ff ff8c 	bl	7e70 <update_cache>
}
    7f58:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7f5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7f5e:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7f60:	4601      	mov	r1, r0
    7f62:	480e      	ldr	r0, [pc, #56]	; (7f9c <move_thread_to_end_of_prio_q+0xa8>)
    7f64:	f7ff ff60 	bl	7e28 <z_priq_dumb_remove>
}
    7f68:	e7cb      	b.n	7f02 <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7f6a:	4c0d      	ldr	r4, [pc, #52]	; (7fa0 <move_thread_to_end_of_prio_q+0xac>)
    7f6c:	23ba      	movs	r3, #186	; 0xba
    7f6e:	4622      	mov	r2, r4
    7f70:	490c      	ldr	r1, [pc, #48]	; (7fa4 <move_thread_to_end_of_prio_q+0xb0>)
    7f72:	480d      	ldr	r0, [pc, #52]	; (7fa8 <move_thread_to_end_of_prio_q+0xb4>)
    7f74:	f001 ff7d 	bl	9e72 <assert_print>
    7f78:	21ba      	movs	r1, #186	; 0xba
    7f7a:	4620      	mov	r0, r4
    7f7c:	f001 ff72 	bl	9e64 <assert_post_action>
    7f80:	e7c6      	b.n	7f10 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    7f82:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    7f84:	606b      	str	r3, [r5, #4]
	node->next = successor;
    7f86:	602c      	str	r4, [r5, #0]
	prev->next = node;
    7f88:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    7f8a:	6065      	str	r5, [r4, #4]
}
    7f8c:	e7dc      	b.n	7f48 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7f8e:	2400      	movs	r4, #0
    7f90:	e7c3      	b.n	7f1a <move_thread_to_end_of_prio_q+0x26>
    7f92:	bf00      	nop
    7f94:	20004290 	.word	0x20004290
    7f98:	20004f28 	.word	0x20004f28
    7f9c:	20004f48 	.word	0x20004f48
    7fa0:	0000ca94 	.word	0x0000ca94
    7fa4:	0000cad0 	.word	0x0000cad0
    7fa8:	0000b180 	.word	0x0000b180

00007fac <slice_expired_locked>:
{
    7fac:	b538      	push	{r3, r4, r5, lr}
    7fae:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    7fb0:	4b07      	ldr	r3, [pc, #28]	; (7fd0 <slice_expired_locked+0x24>)
    7fb2:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    7fb4:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    7fb6:	f013 0f1f 	tst.w	r3, #31
    7fba:	d004      	beq.n	7fc6 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    7fbc:	4628      	mov	r0, r5
    7fbe:	f7ff fdd9 	bl	7b74 <z_reset_time_slice>
}
    7fc2:	4620      	mov	r0, r4
    7fc4:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    7fc6:	4628      	mov	r0, r5
    7fc8:	f7ff ff94 	bl	7ef4 <move_thread_to_end_of_prio_q>
    7fcc:	e7f6      	b.n	7fbc <slice_expired_locked+0x10>
    7fce:	bf00      	nop
    7fd0:	20004f28 	.word	0x20004f28

00007fd4 <z_time_slice>:
{
    7fd4:	b570      	push	{r4, r5, r6, lr}
    7fd6:	4604      	mov	r4, r0
	__asm__ volatile(
    7fd8:	f04f 0320 	mov.w	r3, #32
    7fdc:	f3ef 8511 	mrs	r5, BASEPRI
    7fe0:	f383 8812 	msr	BASEPRI_MAX, r3
    7fe4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7fe8:	4842      	ldr	r0, [pc, #264]	; (80f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf4>)
    7fea:	f7ff f88b 	bl	7104 <z_spin_lock_valid>
    7fee:	b310      	cbz	r0, 8036 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36>
	z_spin_lock_set_owner(l);
    7ff0:	4840      	ldr	r0, [pc, #256]	; (80f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf4>)
    7ff2:	f7ff f8a7 	bl	7144 <z_spin_lock_set_owner>
	return k;
    7ff6:	462b      	mov	r3, r5
	if (pending_current == _current) {
    7ff8:	4a3f      	ldr	r2, [pc, #252]	; (80f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>)
    7ffa:	6892      	ldr	r2, [r2, #8]
    7ffc:	493f      	ldr	r1, [pc, #252]	; (80fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>)
    7ffe:	6809      	ldr	r1, [r1, #0]
    8000:	428a      	cmp	r2, r1
    8002:	d028      	beq.n	8056 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56>
	pending_current = NULL;
    8004:	493d      	ldr	r1, [pc, #244]	; (80fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>)
    8006:	2000      	movs	r0, #0
    8008:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    800a:	493d      	ldr	r1, [pc, #244]	; (8100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>)
    800c:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    800e:	2900      	cmp	r1, #0
    8010:	d052      	beq.n	80b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    8012:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    8014:	297f      	cmp	r1, #127	; 0x7f
    8016:	d83a      	bhi.n	808e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8e>
    8018:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    801a:	f011 0f1f 	tst.w	r1, #31
    801e:	d140      	bne.n	80a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8020:	f992 000e 	ldrsb.w	r0, [r2, #14]
    8024:	4937      	ldr	r1, [pc, #220]	; (8104 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x104>)
    8026:	6809      	ldr	r1, [r1, #0]
    8028:	4288      	cmp	r0, r1
    802a:	db3c      	blt.n	80a6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa6>
		&& !z_is_idle_thread_object(thread);
    802c:	4936      	ldr	r1, [pc, #216]	; (8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>)
    802e:	428a      	cmp	r2, r1
    8030:	d03b      	beq.n	80aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xaa>
    8032:	2201      	movs	r2, #1
    8034:	e02c      	b.n	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8036:	4e35      	ldr	r6, [pc, #212]	; (810c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>)
    8038:	238e      	movs	r3, #142	; 0x8e
    803a:	4632      	mov	r2, r6
    803c:	4934      	ldr	r1, [pc, #208]	; (8110 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x110>)
    803e:	4835      	ldr	r0, [pc, #212]	; (8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>)
    8040:	f001 ff17 	bl	9e72 <assert_print>
    8044:	492b      	ldr	r1, [pc, #172]	; (80f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf4>)
    8046:	4834      	ldr	r0, [pc, #208]	; (8118 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x118>)
    8048:	f001 ff13 	bl	9e72 <assert_print>
    804c:	218e      	movs	r1, #142	; 0x8e
    804e:	4630      	mov	r0, r6
    8050:	f001 ff08 	bl	9e64 <assert_post_action>
    8054:	e7cc      	b.n	7ff0 <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    8056:	4610      	mov	r0, r2
    8058:	f7ff fd8c 	bl	7b74 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    805c:	4825      	ldr	r0, [pc, #148]	; (80f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf4>)
    805e:	f7ff f861 	bl	7124 <z_spin_unlock_valid>
    8062:	b120      	cbz	r0, 806e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e>
	__asm__ volatile(
    8064:	f385 8811 	msr	BASEPRI, r5
    8068:	f3bf 8f6f 	isb	sy
		return;
    806c:	e030      	b.n	80d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd0>
    806e:	4c27      	ldr	r4, [pc, #156]	; (810c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>)
    8070:	23b9      	movs	r3, #185	; 0xb9
    8072:	4622      	mov	r2, r4
    8074:	4929      	ldr	r1, [pc, #164]	; (811c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c>)
    8076:	4827      	ldr	r0, [pc, #156]	; (8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>)
    8078:	f001 fefb 	bl	9e72 <assert_print>
    807c:	491d      	ldr	r1, [pc, #116]	; (80f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf4>)
    807e:	4828      	ldr	r0, [pc, #160]	; (8120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>)
    8080:	f001 fef7 	bl	9e72 <assert_print>
    8084:	21b9      	movs	r1, #185	; 0xb9
    8086:	4620      	mov	r0, r4
    8088:	f001 feec 	bl	9e64 <assert_post_action>
    808c:	e7ea      	b.n	8064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>
		&& !z_is_idle_thread_object(thread);
    808e:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    8090:	b192      	cbz	r2, 80b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    8092:	4a19      	ldr	r2, [pc, #100]	; (80f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>)
    8094:	6910      	ldr	r0, [r2, #16]
    8096:	42a0      	cmp	r0, r4
    8098:	dd09      	ble.n	80ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xae>
			_current_cpu->slice_ticks -= ticks;
    809a:	1b00      	subs	r0, r0, r4
    809c:	4a16      	ldr	r2, [pc, #88]	; (80f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>)
    809e:	6110      	str	r0, [r2, #16]
    80a0:	e00d      	b.n	80be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbe>
		&& !z_is_idle_thread_object(thread);
    80a2:	2200      	movs	r2, #0
    80a4:	e7f4      	b.n	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    80a6:	2200      	movs	r2, #0
    80a8:	e7f2      	b.n	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    80aa:	2200      	movs	r2, #0
    80ac:	e7f0      	b.n	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
			key = slice_expired_locked(key);
    80ae:	4628      	mov	r0, r5
    80b0:	f7ff ff7c 	bl	7fac <slice_expired_locked>
    80b4:	4603      	mov	r3, r0
    80b6:	e002      	b.n	80be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbe>
		_current_cpu->slice_ticks = 0;
    80b8:	4a0f      	ldr	r2, [pc, #60]	; (80f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf8>)
    80ba:	2100      	movs	r1, #0
    80bc:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    80be:	461c      	mov	r4, r3
    80c0:	480c      	ldr	r0, [pc, #48]	; (80f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf4>)
    80c2:	f7ff f82f 	bl	7124 <z_spin_unlock_valid>
    80c6:	b120      	cbz	r0, 80d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd2>
    80c8:	f384 8811 	msr	BASEPRI, r4
    80cc:	f3bf 8f6f 	isb	sy
}
    80d0:	bd70      	pop	{r4, r5, r6, pc}
    80d2:	4d0e      	ldr	r5, [pc, #56]	; (810c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>)
    80d4:	23b9      	movs	r3, #185	; 0xb9
    80d6:	462a      	mov	r2, r5
    80d8:	4910      	ldr	r1, [pc, #64]	; (811c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c>)
    80da:	480e      	ldr	r0, [pc, #56]	; (8114 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x114>)
    80dc:	f001 fec9 	bl	9e72 <assert_print>
    80e0:	4904      	ldr	r1, [pc, #16]	; (80f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf4>)
    80e2:	480f      	ldr	r0, [pc, #60]	; (8120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>)
    80e4:	f001 fec5 	bl	9e72 <assert_print>
    80e8:	21b9      	movs	r1, #185	; 0xb9
    80ea:	4628      	mov	r0, r5
    80ec:	f001 feba 	bl	9e64 <assert_post_action>
    80f0:	e7ea      	b.n	80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    80f2:	bf00      	nop
    80f4:	20004f64 	.word	0x20004f64
    80f8:	20004f28 	.word	0x20004f28
    80fc:	20004f60 	.word	0x20004f60
    8100:	20004f6c 	.word	0x20004f6c
    8104:	20004f68 	.word	0x20004f68
    8108:	20004290 	.word	0x20004290
    810c:	0000b32c 	.word	0x0000b32c
    8110:	0000b38c 	.word	0x0000b38c
    8114:	0000b180 	.word	0x0000b180
    8118:	0000b3a4 	.word	0x0000b3a4
    811c:	0000b35c 	.word	0x0000b35c
    8120:	0000b374 	.word	0x0000b374

00008124 <ready_thread>:
{
    8124:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    8126:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    8128:	f990 200d 	ldrsb.w	r2, [r0, #13]
    812c:	2a00      	cmp	r2, #0
    812e:	db30      	blt.n	8192 <ready_thread+0x6e>
    8130:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8132:	f013 0f1f 	tst.w	r3, #31
    8136:	d105      	bne.n	8144 <ready_thread+0x20>
	return node->next != NULL;
    8138:	6982      	ldr	r2, [r0, #24]
    813a:	b10a      	cbz	r2, 8140 <ready_thread+0x1c>
    813c:	2200      	movs	r2, #0
    813e:	e002      	b.n	8146 <ready_thread+0x22>
    8140:	2201      	movs	r2, #1
    8142:	e000      	b.n	8146 <ready_thread+0x22>
    8144:	2200      	movs	r2, #0
    8146:	b322      	cbz	r2, 8192 <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    8148:	f063 037f 	orn	r3, r3, #127	; 0x7f
    814c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    814e:	4b1b      	ldr	r3, [pc, #108]	; (81bc <ready_thread+0x98>)
    8150:	429c      	cmp	r4, r3
    8152:	d01f      	beq.n	8194 <ready_thread+0x70>
	return list->head == list;
    8154:	4b1a      	ldr	r3, [pc, #104]	; (81c0 <ready_thread+0x9c>)
    8156:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    815a:	429d      	cmp	r5, r3
    815c:	d02c      	beq.n	81b8 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    815e:	b16d      	cbz	r5, 817c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8160:	4629      	mov	r1, r5
    8162:	4620      	mov	r0, r4
    8164:	f002 fd7a 	bl	ac5c <z_sched_prio_cmp>
    8168:	2800      	cmp	r0, #0
    816a:	dc1f      	bgt.n	81ac <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    816c:	b135      	cbz	r5, 817c <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    816e:	4b14      	ldr	r3, [pc, #80]	; (81c0 <ready_thread+0x9c>)
    8170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8172:	429d      	cmp	r5, r3
    8174:	d002      	beq.n	817c <ready_thread+0x58>
    8176:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8178:	2d00      	cmp	r5, #0
    817a:	d1f0      	bne.n	815e <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    817c:	4b10      	ldr	r3, [pc, #64]	; (81c0 <ready_thread+0x9c>)
    817e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8180:	f103 0120 	add.w	r1, r3, #32
    8184:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    8186:	6062      	str	r2, [r4, #4]
	tail->next = node;
    8188:	6014      	str	r4, [r2, #0]
	list->tail = node;
    818a:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    818c:	2000      	movs	r0, #0
    818e:	f7ff fe6f 	bl	7e70 <update_cache>
}
    8192:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8194:	4d0b      	ldr	r5, [pc, #44]	; (81c4 <ready_thread+0xa0>)
    8196:	23ba      	movs	r3, #186	; 0xba
    8198:	462a      	mov	r2, r5
    819a:	490b      	ldr	r1, [pc, #44]	; (81c8 <ready_thread+0xa4>)
    819c:	480b      	ldr	r0, [pc, #44]	; (81cc <ready_thread+0xa8>)
    819e:	f001 fe68 	bl	9e72 <assert_print>
    81a2:	21ba      	movs	r1, #186	; 0xba
    81a4:	4628      	mov	r0, r5
    81a6:	f001 fe5d 	bl	9e64 <assert_post_action>
    81aa:	e7d3      	b.n	8154 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    81ac:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    81ae:	6063      	str	r3, [r4, #4]
	node->next = successor;
    81b0:	6025      	str	r5, [r4, #0]
	prev->next = node;
    81b2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    81b4:	606c      	str	r4, [r5, #4]
}
    81b6:	e7e9      	b.n	818c <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    81b8:	2500      	movs	r5, #0
    81ba:	e7d0      	b.n	815e <ready_thread+0x3a>
    81bc:	20004290 	.word	0x20004290
    81c0:	20004f28 	.word	0x20004f28
    81c4:	0000ca94 	.word	0x0000ca94
    81c8:	0000cad0 	.word	0x0000cad0
    81cc:	0000b180 	.word	0x0000b180

000081d0 <z_ready_thread>:
{
    81d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81d2:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    81d4:	2400      	movs	r4, #0
	__asm__ volatile(
    81d6:	f04f 0320 	mov.w	r3, #32
    81da:	f3ef 8611 	mrs	r6, BASEPRI
    81de:	f383 8812 	msr	BASEPRI_MAX, r3
    81e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    81e6:	481e      	ldr	r0, [pc, #120]	; (8260 <z_ready_thread+0x90>)
    81e8:	f7fe ff8c 	bl	7104 <z_spin_lock_valid>
    81ec:	b118      	cbz	r0, 81f6 <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    81ee:	481c      	ldr	r0, [pc, #112]	; (8260 <z_ready_thread+0x90>)
    81f0:	f7fe ffa8 	bl	7144 <z_spin_lock_set_owner>
	return k;
    81f4:	e018      	b.n	8228 <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    81f6:	4f1b      	ldr	r7, [pc, #108]	; (8264 <z_ready_thread+0x94>)
    81f8:	238e      	movs	r3, #142	; 0x8e
    81fa:	463a      	mov	r2, r7
    81fc:	491a      	ldr	r1, [pc, #104]	; (8268 <z_ready_thread+0x98>)
    81fe:	481b      	ldr	r0, [pc, #108]	; (826c <z_ready_thread+0x9c>)
    8200:	f001 fe37 	bl	9e72 <assert_print>
    8204:	4916      	ldr	r1, [pc, #88]	; (8260 <z_ready_thread+0x90>)
    8206:	481a      	ldr	r0, [pc, #104]	; (8270 <z_ready_thread+0xa0>)
    8208:	f001 fe33 	bl	9e72 <assert_print>
    820c:	218e      	movs	r1, #142	; 0x8e
    820e:	4638      	mov	r0, r7
    8210:	f001 fe28 	bl	9e64 <assert_post_action>
    8214:	e7eb      	b.n	81ee <z_ready_thread+0x1e>
			ready_thread(thread);
    8216:	4628      	mov	r0, r5
    8218:	f7ff ff84 	bl	8124 <ready_thread>
    821c:	e00a      	b.n	8234 <z_ready_thread+0x64>
	__asm__ volatile(
    821e:	f386 8811 	msr	BASEPRI, r6
    8222:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8226:	2401      	movs	r4, #1
    8228:	b9cc      	cbnz	r4, 825e <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    822a:	4628      	mov	r0, r5
    822c:	f002 fd14 	bl	ac58 <thread_active_elsewhere>
    8230:	2800      	cmp	r0, #0
    8232:	d0f0      	beq.n	8216 <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8234:	480a      	ldr	r0, [pc, #40]	; (8260 <z_ready_thread+0x90>)
    8236:	f7fe ff75 	bl	7124 <z_spin_unlock_valid>
    823a:	2800      	cmp	r0, #0
    823c:	d1ef      	bne.n	821e <z_ready_thread+0x4e>
    823e:	4c09      	ldr	r4, [pc, #36]	; (8264 <z_ready_thread+0x94>)
    8240:	23b9      	movs	r3, #185	; 0xb9
    8242:	4622      	mov	r2, r4
    8244:	490b      	ldr	r1, [pc, #44]	; (8274 <z_ready_thread+0xa4>)
    8246:	4809      	ldr	r0, [pc, #36]	; (826c <z_ready_thread+0x9c>)
    8248:	f001 fe13 	bl	9e72 <assert_print>
    824c:	4904      	ldr	r1, [pc, #16]	; (8260 <z_ready_thread+0x90>)
    824e:	480a      	ldr	r0, [pc, #40]	; (8278 <z_ready_thread+0xa8>)
    8250:	f001 fe0f 	bl	9e72 <assert_print>
    8254:	21b9      	movs	r1, #185	; 0xb9
    8256:	4620      	mov	r0, r4
    8258:	f001 fe04 	bl	9e64 <assert_post_action>
    825c:	e7df      	b.n	821e <z_ready_thread+0x4e>
}
    825e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8260:	20004f64 	.word	0x20004f64
    8264:	0000b32c 	.word	0x0000b32c
    8268:	0000b38c 	.word	0x0000b38c
    826c:	0000b180 	.word	0x0000b180
    8270:	0000b3a4 	.word	0x0000b3a4
    8274:	0000b35c 	.word	0x0000b35c
    8278:	0000b374 	.word	0x0000b374

0000827c <z_sched_start>:
{
    827c:	b570      	push	{r4, r5, r6, lr}
    827e:	4604      	mov	r4, r0
	__asm__ volatile(
    8280:	f04f 0320 	mov.w	r3, #32
    8284:	f3ef 8511 	mrs	r5, BASEPRI
    8288:	f383 8812 	msr	BASEPRI_MAX, r3
    828c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8290:	481f      	ldr	r0, [pc, #124]	; (8310 <z_sched_start+0x94>)
    8292:	f7fe ff37 	bl	7104 <z_spin_lock_valid>
    8296:	b188      	cbz	r0, 82bc <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    8298:	481d      	ldr	r0, [pc, #116]	; (8310 <z_sched_start+0x94>)
    829a:	f7fe ff53 	bl	7144 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    829e:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    82a0:	f013 0f04 	tst.w	r3, #4
    82a4:	d01a      	beq.n	82dc <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    82a6:	f023 0304 	bic.w	r3, r3, #4
    82aa:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    82ac:	4620      	mov	r0, r4
    82ae:	f7ff ff39 	bl	8124 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    82b2:	4629      	mov	r1, r5
    82b4:	4816      	ldr	r0, [pc, #88]	; (8310 <z_sched_start+0x94>)
    82b6:	f7ff fce7 	bl	7c88 <z_reschedule>
}
    82ba:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    82bc:	4e15      	ldr	r6, [pc, #84]	; (8314 <z_sched_start+0x98>)
    82be:	238e      	movs	r3, #142	; 0x8e
    82c0:	4632      	mov	r2, r6
    82c2:	4915      	ldr	r1, [pc, #84]	; (8318 <z_sched_start+0x9c>)
    82c4:	4815      	ldr	r0, [pc, #84]	; (831c <z_sched_start+0xa0>)
    82c6:	f001 fdd4 	bl	9e72 <assert_print>
    82ca:	4911      	ldr	r1, [pc, #68]	; (8310 <z_sched_start+0x94>)
    82cc:	4814      	ldr	r0, [pc, #80]	; (8320 <z_sched_start+0xa4>)
    82ce:	f001 fdd0 	bl	9e72 <assert_print>
    82d2:	218e      	movs	r1, #142	; 0x8e
    82d4:	4630      	mov	r0, r6
    82d6:	f001 fdc5 	bl	9e64 <assert_post_action>
    82da:	e7dd      	b.n	8298 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    82dc:	480c      	ldr	r0, [pc, #48]	; (8310 <z_sched_start+0x94>)
    82de:	f7fe ff21 	bl	7124 <z_spin_unlock_valid>
    82e2:	b120      	cbz	r0, 82ee <z_sched_start+0x72>
	__asm__ volatile(
    82e4:	f385 8811 	msr	BASEPRI, r5
    82e8:	f3bf 8f6f 	isb	sy
		return;
    82ec:	e7e5      	b.n	82ba <z_sched_start+0x3e>
    82ee:	4c09      	ldr	r4, [pc, #36]	; (8314 <z_sched_start+0x98>)
    82f0:	23b9      	movs	r3, #185	; 0xb9
    82f2:	4622      	mov	r2, r4
    82f4:	490b      	ldr	r1, [pc, #44]	; (8324 <z_sched_start+0xa8>)
    82f6:	4809      	ldr	r0, [pc, #36]	; (831c <z_sched_start+0xa0>)
    82f8:	f001 fdbb 	bl	9e72 <assert_print>
    82fc:	4904      	ldr	r1, [pc, #16]	; (8310 <z_sched_start+0x94>)
    82fe:	480a      	ldr	r0, [pc, #40]	; (8328 <z_sched_start+0xac>)
    8300:	f001 fdb7 	bl	9e72 <assert_print>
    8304:	21b9      	movs	r1, #185	; 0xb9
    8306:	4620      	mov	r0, r4
    8308:	f001 fdac 	bl	9e64 <assert_post_action>
    830c:	e7ea      	b.n	82e4 <z_sched_start+0x68>
    830e:	bf00      	nop
    8310:	20004f64 	.word	0x20004f64
    8314:	0000b32c 	.word	0x0000b32c
    8318:	0000b38c 	.word	0x0000b38c
    831c:	0000b180 	.word	0x0000b180
    8320:	0000b3a4 	.word	0x0000b3a4
    8324:	0000b35c 	.word	0x0000b35c
    8328:	0000b374 	.word	0x0000b374

0000832c <z_thread_timeout>:
{
    832c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8330:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    8332:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    8336:	2500      	movs	r5, #0
	__asm__ volatile(
    8338:	f04f 0320 	mov.w	r3, #32
    833c:	f3ef 8711 	mrs	r7, BASEPRI
    8340:	f383 8812 	msr	BASEPRI_MAX, r3
    8344:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8348:	482b      	ldr	r0, [pc, #172]	; (83f8 <z_thread_timeout+0xcc>)
    834a:	f7fe fedb 	bl	7104 <z_spin_lock_valid>
    834e:	b118      	cbz	r0, 8358 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    8350:	4829      	ldr	r0, [pc, #164]	; (83f8 <z_thread_timeout+0xcc>)
    8352:	f7fe fef7 	bl	7144 <z_spin_lock_set_owner>
	return k;
    8356:	e026      	b.n	83a6 <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8358:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 83fc <z_thread_timeout+0xd0>
    835c:	238e      	movs	r3, #142	; 0x8e
    835e:	4642      	mov	r2, r8
    8360:	4927      	ldr	r1, [pc, #156]	; (8400 <z_thread_timeout+0xd4>)
    8362:	4828      	ldr	r0, [pc, #160]	; (8404 <z_thread_timeout+0xd8>)
    8364:	f001 fd85 	bl	9e72 <assert_print>
    8368:	4923      	ldr	r1, [pc, #140]	; (83f8 <z_thread_timeout+0xcc>)
    836a:	4827      	ldr	r0, [pc, #156]	; (8408 <z_thread_timeout+0xdc>)
    836c:	f001 fd81 	bl	9e72 <assert_print>
    8370:	218e      	movs	r1, #142	; 0x8e
    8372:	4640      	mov	r0, r8
    8374:	f001 fd76 	bl	9e64 <assert_post_action>
    8378:	e7ea      	b.n	8350 <z_thread_timeout+0x24>
    837a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    837e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    8382:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8386:	f023 0310 	bic.w	r3, r3, #16
    838a:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    838e:	4630      	mov	r0, r6
    8390:	f7ff fec8 	bl	8124 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8394:	4818      	ldr	r0, [pc, #96]	; (83f8 <z_thread_timeout+0xcc>)
    8396:	f7fe fec5 	bl	7124 <z_spin_unlock_valid>
    839a:	b1d8      	cbz	r0, 83d4 <z_thread_timeout+0xa8>
	__asm__ volatile(
    839c:	f387 8811 	msr	BASEPRI, r7
    83a0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    83a4:	2501      	movs	r5, #1
    83a6:	bb2d      	cbnz	r5, 83f4 <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    83a8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    83ac:	f013 0f28 	tst.w	r3, #40	; 0x28
    83b0:	d1f0      	bne.n	8394 <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    83b2:	f854 3c10 	ldr.w	r3, [r4, #-16]
    83b6:	2b00      	cmp	r3, #0
    83b8:	d0df      	beq.n	837a <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    83ba:	4630      	mov	r0, r6
    83bc:	f7ff fbb0 	bl	7b20 <pended_on_thread>
    83c0:	4631      	mov	r1, r6
    83c2:	f7ff fd31 	bl	7e28 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    83c6:	7b73      	ldrb	r3, [r6, #13]
    83c8:	f023 0302 	bic.w	r3, r3, #2
    83cc:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    83ce:	2300      	movs	r3, #0
    83d0:	60b3      	str	r3, [r6, #8]
}
    83d2:	e7d2      	b.n	837a <z_thread_timeout+0x4e>
    83d4:	4d09      	ldr	r5, [pc, #36]	; (83fc <z_thread_timeout+0xd0>)
    83d6:	23b9      	movs	r3, #185	; 0xb9
    83d8:	462a      	mov	r2, r5
    83da:	490c      	ldr	r1, [pc, #48]	; (840c <z_thread_timeout+0xe0>)
    83dc:	4809      	ldr	r0, [pc, #36]	; (8404 <z_thread_timeout+0xd8>)
    83de:	f001 fd48 	bl	9e72 <assert_print>
    83e2:	4905      	ldr	r1, [pc, #20]	; (83f8 <z_thread_timeout+0xcc>)
    83e4:	480a      	ldr	r0, [pc, #40]	; (8410 <z_thread_timeout+0xe4>)
    83e6:	f001 fd44 	bl	9e72 <assert_print>
    83ea:	21b9      	movs	r1, #185	; 0xb9
    83ec:	4628      	mov	r0, r5
    83ee:	f001 fd39 	bl	9e64 <assert_post_action>
    83f2:	e7d3      	b.n	839c <z_thread_timeout+0x70>
}
    83f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83f8:	20004f64 	.word	0x20004f64
    83fc:	0000b32c 	.word	0x0000b32c
    8400:	0000b38c 	.word	0x0000b38c
    8404:	0000b180 	.word	0x0000b180
    8408:	0000b3a4 	.word	0x0000b3a4
    840c:	0000b35c 	.word	0x0000b35c
    8410:	0000b374 	.word	0x0000b374

00008414 <unready_thread>:
{
    8414:	b510      	push	{r4, lr}
    8416:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    8418:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    841a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    841e:	2b00      	cmp	r3, #0
    8420:	db08      	blt.n	8434 <unready_thread+0x20>
	update_cache(thread == _current);
    8422:	4b08      	ldr	r3, [pc, #32]	; (8444 <unready_thread+0x30>)
    8424:	6898      	ldr	r0, [r3, #8]
    8426:	42a0      	cmp	r0, r4
    8428:	bf14      	ite	ne
    842a:	2000      	movne	r0, #0
    842c:	2001      	moveq	r0, #1
    842e:	f7ff fd1f 	bl	7e70 <update_cache>
}
    8432:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8434:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8438:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    843a:	4601      	mov	r1, r0
    843c:	4802      	ldr	r0, [pc, #8]	; (8448 <unready_thread+0x34>)
    843e:	f7ff fcf3 	bl	7e28 <z_priq_dumb_remove>
}
    8442:	e7ee      	b.n	8422 <unready_thread+0xe>
    8444:	20004f28 	.word	0x20004f28
    8448:	20004f48 	.word	0x20004f48

0000844c <add_to_waitq_locked>:
{
    844c:	b570      	push	{r4, r5, r6, lr}
    844e:	4605      	mov	r5, r0
    8450:	460e      	mov	r6, r1
	unready_thread(thread);
    8452:	f7ff ffdf 	bl	8414 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    8456:	7b6b      	ldrb	r3, [r5, #13]
    8458:	f043 0302 	orr.w	r3, r3, #2
    845c:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    845e:	b1ce      	cbz	r6, 8494 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    8460:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8462:	4b17      	ldr	r3, [pc, #92]	; (84c0 <add_to_waitq_locked+0x74>)
    8464:	429d      	cmp	r5, r3
    8466:	d016      	beq.n	8496 <add_to_waitq_locked+0x4a>
	return list->head == list;
    8468:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    846a:	42a6      	cmp	r6, r4
    846c:	d025      	beq.n	84ba <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    846e:	b164      	cbz	r4, 848a <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8470:	4621      	mov	r1, r4
    8472:	4628      	mov	r0, r5
    8474:	f002 fbf2 	bl	ac5c <z_sched_prio_cmp>
    8478:	2800      	cmp	r0, #0
    847a:	dc18      	bgt.n	84ae <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    847c:	b12c      	cbz	r4, 848a <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    847e:	6873      	ldr	r3, [r6, #4]
    8480:	429c      	cmp	r4, r3
    8482:	d002      	beq.n	848a <add_to_waitq_locked+0x3e>
    8484:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8486:	2c00      	cmp	r4, #0
    8488:	d1f1      	bne.n	846e <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    848a:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    848c:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    848e:	606b      	str	r3, [r5, #4]
	tail->next = node;
    8490:	601d      	str	r5, [r3, #0]
	list->tail = node;
    8492:	6075      	str	r5, [r6, #4]
}
    8494:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8496:	4c0b      	ldr	r4, [pc, #44]	; (84c4 <add_to_waitq_locked+0x78>)
    8498:	23ba      	movs	r3, #186	; 0xba
    849a:	4622      	mov	r2, r4
    849c:	490a      	ldr	r1, [pc, #40]	; (84c8 <add_to_waitq_locked+0x7c>)
    849e:	480b      	ldr	r0, [pc, #44]	; (84cc <add_to_waitq_locked+0x80>)
    84a0:	f001 fce7 	bl	9e72 <assert_print>
    84a4:	21ba      	movs	r1, #186	; 0xba
    84a6:	4620      	mov	r0, r4
    84a8:	f001 fcdc 	bl	9e64 <assert_post_action>
    84ac:	e7dc      	b.n	8468 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    84ae:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    84b0:	606b      	str	r3, [r5, #4]
	node->next = successor;
    84b2:	602c      	str	r4, [r5, #0]
	prev->next = node;
    84b4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    84b6:	6065      	str	r5, [r4, #4]
}
    84b8:	e7ec      	b.n	8494 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    84ba:	2400      	movs	r4, #0
    84bc:	e7d7      	b.n	846e <add_to_waitq_locked+0x22>
    84be:	bf00      	nop
    84c0:	20004290 	.word	0x20004290
    84c4:	0000ca94 	.word	0x0000ca94
    84c8:	0000cad0 	.word	0x0000cad0
    84cc:	0000b180 	.word	0x0000b180

000084d0 <pend>:
{
    84d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    84d4:	4605      	mov	r5, r0
    84d6:	460e      	mov	r6, r1
    84d8:	4691      	mov	r9, r2
    84da:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    84dc:	2400      	movs	r4, #0
	__asm__ volatile(
    84de:	f04f 0320 	mov.w	r3, #32
    84e2:	f3ef 8711 	mrs	r7, BASEPRI
    84e6:	f383 8812 	msr	BASEPRI_MAX, r3
    84ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    84ee:	481f      	ldr	r0, [pc, #124]	; (856c <pend+0x9c>)
    84f0:	f7fe fe08 	bl	7104 <z_spin_lock_valid>
    84f4:	b118      	cbz	r0, 84fe <pend+0x2e>
	z_spin_lock_set_owner(l);
    84f6:	481d      	ldr	r0, [pc, #116]	; (856c <pend+0x9c>)
    84f8:	f7fe fe24 	bl	7144 <z_spin_lock_set_owner>
	return k;
    84fc:	e015      	b.n	852a <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    84fe:	f8df a070 	ldr.w	sl, [pc, #112]	; 8570 <pend+0xa0>
    8502:	238e      	movs	r3, #142	; 0x8e
    8504:	4652      	mov	r2, sl
    8506:	491b      	ldr	r1, [pc, #108]	; (8574 <pend+0xa4>)
    8508:	481b      	ldr	r0, [pc, #108]	; (8578 <pend+0xa8>)
    850a:	f001 fcb2 	bl	9e72 <assert_print>
    850e:	4917      	ldr	r1, [pc, #92]	; (856c <pend+0x9c>)
    8510:	481a      	ldr	r0, [pc, #104]	; (857c <pend+0xac>)
    8512:	f001 fcae 	bl	9e72 <assert_print>
    8516:	218e      	movs	r1, #142	; 0x8e
    8518:	4650      	mov	r0, sl
    851a:	f001 fca3 	bl	9e64 <assert_post_action>
    851e:	e7ea      	b.n	84f6 <pend+0x26>
	__asm__ volatile(
    8520:	f387 8811 	msr	BASEPRI, r7
    8524:	f3bf 8f6f 	isb	sy
    8528:	2401      	movs	r4, #1
    852a:	b9c4      	cbnz	r4, 855e <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    852c:	4631      	mov	r1, r6
    852e:	4628      	mov	r0, r5
    8530:	f7ff ff8c 	bl	844c <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8534:	480d      	ldr	r0, [pc, #52]	; (856c <pend+0x9c>)
    8536:	f7fe fdf5 	bl	7124 <z_spin_unlock_valid>
    853a:	2800      	cmp	r0, #0
    853c:	d1f0      	bne.n	8520 <pend+0x50>
    853e:	4c0c      	ldr	r4, [pc, #48]	; (8570 <pend+0xa0>)
    8540:	23b9      	movs	r3, #185	; 0xb9
    8542:	4622      	mov	r2, r4
    8544:	490e      	ldr	r1, [pc, #56]	; (8580 <pend+0xb0>)
    8546:	480c      	ldr	r0, [pc, #48]	; (8578 <pend+0xa8>)
    8548:	f001 fc93 	bl	9e72 <assert_print>
    854c:	4907      	ldr	r1, [pc, #28]	; (856c <pend+0x9c>)
    854e:	480d      	ldr	r0, [pc, #52]	; (8584 <pend+0xb4>)
    8550:	f001 fc8f 	bl	9e72 <assert_print>
    8554:	21b9      	movs	r1, #185	; 0xb9
    8556:	4620      	mov	r0, r4
    8558:	f001 fc84 	bl	9e64 <assert_post_action>
    855c:	e7e0      	b.n	8520 <pend+0x50>
	add_thread_timeout(thread, timeout);
    855e:	464a      	mov	r2, r9
    8560:	4643      	mov	r3, r8
    8562:	4628      	mov	r0, r5
    8564:	f7ff faf6 	bl	7b54 <add_thread_timeout>
}
    8568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    856c:	20004f64 	.word	0x20004f64
    8570:	0000b32c 	.word	0x0000b32c
    8574:	0000b38c 	.word	0x0000b38c
    8578:	0000b180 	.word	0x0000b180
    857c:	0000b3a4 	.word	0x0000b3a4
    8580:	0000b35c 	.word	0x0000b35c
    8584:	0000b374 	.word	0x0000b374

00008588 <z_pend_curr>:
{
    8588:	b570      	push	{r4, r5, r6, lr}
    858a:	4604      	mov	r4, r0
    858c:	460d      	mov	r5, r1
    858e:	4611      	mov	r1, r2
	pending_current = _current;
    8590:	4b0f      	ldr	r3, [pc, #60]	; (85d0 <z_pend_curr+0x48>)
    8592:	6898      	ldr	r0, [r3, #8]
    8594:	4b0f      	ldr	r3, [pc, #60]	; (85d4 <z_pend_curr+0x4c>)
    8596:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    8598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    859c:	f7ff ff98 	bl	84d0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    85a0:	4620      	mov	r0, r4
    85a2:	f7fe fdbf 	bl	7124 <z_spin_unlock_valid>
    85a6:	b118      	cbz	r0, 85b0 <z_pend_curr+0x28>
    85a8:	4628      	mov	r0, r5
    85aa:	f7fa fbd9 	bl	2d60 <arch_swap>
}
    85ae:	bd70      	pop	{r4, r5, r6, pc}
    85b0:	4e09      	ldr	r6, [pc, #36]	; (85d8 <z_pend_curr+0x50>)
    85b2:	23d0      	movs	r3, #208	; 0xd0
    85b4:	4632      	mov	r2, r6
    85b6:	4909      	ldr	r1, [pc, #36]	; (85dc <z_pend_curr+0x54>)
    85b8:	4809      	ldr	r0, [pc, #36]	; (85e0 <z_pend_curr+0x58>)
    85ba:	f001 fc5a 	bl	9e72 <assert_print>
    85be:	4621      	mov	r1, r4
    85c0:	4808      	ldr	r0, [pc, #32]	; (85e4 <z_pend_curr+0x5c>)
    85c2:	f001 fc56 	bl	9e72 <assert_print>
    85c6:	21d0      	movs	r1, #208	; 0xd0
    85c8:	4630      	mov	r0, r6
    85ca:	f001 fc4b 	bl	9e64 <assert_post_action>
    85ce:	e7eb      	b.n	85a8 <z_pend_curr+0x20>
    85d0:	20004f28 	.word	0x20004f28
    85d4:	20004f60 	.word	0x20004f60
    85d8:	0000b32c 	.word	0x0000b32c
    85dc:	0000b35c 	.word	0x0000b35c
    85e0:	0000b180 	.word	0x0000b180
    85e4:	0000b374 	.word	0x0000b374

000085e8 <z_set_prio>:
{
    85e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    85ec:	4604      	mov	r4, r0
    85ee:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    85f0:	2500      	movs	r5, #0
	__asm__ volatile(
    85f2:	f04f 0320 	mov.w	r3, #32
    85f6:	f3ef 8811 	mrs	r8, BASEPRI
    85fa:	f383 8812 	msr	BASEPRI_MAX, r3
    85fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8602:	4844      	ldr	r0, [pc, #272]	; (8714 <z_set_prio+0x12c>)
    8604:	f7fe fd7e 	bl	7104 <z_spin_lock_valid>
    8608:	b120      	cbz	r0, 8614 <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    860a:	4842      	ldr	r0, [pc, #264]	; (8714 <z_set_prio+0x12c>)
    860c:	f7fe fd9a 	bl	7144 <z_spin_lock_set_owner>
	bool need_sched = 0;
    8610:	2700      	movs	r7, #0
	return k;
    8612:	e01d      	b.n	8650 <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8614:	4f40      	ldr	r7, [pc, #256]	; (8718 <z_set_prio+0x130>)
    8616:	238e      	movs	r3, #142	; 0x8e
    8618:	463a      	mov	r2, r7
    861a:	4940      	ldr	r1, [pc, #256]	; (871c <z_set_prio+0x134>)
    861c:	4840      	ldr	r0, [pc, #256]	; (8720 <z_set_prio+0x138>)
    861e:	f001 fc28 	bl	9e72 <assert_print>
    8622:	493c      	ldr	r1, [pc, #240]	; (8714 <z_set_prio+0x12c>)
    8624:	483f      	ldr	r0, [pc, #252]	; (8724 <z_set_prio+0x13c>)
    8626:	f001 fc24 	bl	9e72 <assert_print>
    862a:	218e      	movs	r1, #142	; 0x8e
    862c:	4638      	mov	r0, r7
    862e:	f001 fc19 	bl	9e64 <assert_post_action>
    8632:	e7ea      	b.n	860a <z_set_prio+0x22>
		if (need_sched) {
    8634:	f013 0701 	ands.w	r7, r3, #1
    8638:	d116      	bne.n	8668 <z_set_prio+0x80>
			thread->base.prio = prio;
    863a:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    863c:	4835      	ldr	r0, [pc, #212]	; (8714 <z_set_prio+0x12c>)
    863e:	f7fe fd71 	bl	7124 <z_spin_unlock_valid>
    8642:	2800      	cmp	r0, #0
    8644:	d053      	beq.n	86ee <z_set_prio+0x106>
	__asm__ volatile(
    8646:	f388 8811 	msr	BASEPRI, r8
    864a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    864e:	2501      	movs	r5, #1
    8650:	462b      	mov	r3, r5
    8652:	2d00      	cmp	r5, #0
    8654:	d15b      	bne.n	870e <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    8656:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8658:	f012 0f1f 	tst.w	r2, #31
    865c:	d1ea      	bne.n	8634 <z_set_prio+0x4c>
	return node->next != NULL;
    865e:	69a1      	ldr	r1, [r4, #24]
    8660:	2900      	cmp	r1, #0
    8662:	d1e7      	bne.n	8634 <z_set_prio+0x4c>
    8664:	2301      	movs	r3, #1
    8666:	e7e5      	b.n	8634 <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8668:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    866c:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    866e:	4621      	mov	r1, r4
    8670:	482d      	ldr	r0, [pc, #180]	; (8728 <z_set_prio+0x140>)
    8672:	f7ff fbd9 	bl	7e28 <z_priq_dumb_remove>
				thread->base.prio = prio;
    8676:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    8678:	7b63      	ldrb	r3, [r4, #13]
    867a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    867e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8680:	4b2a      	ldr	r3, [pc, #168]	; (872c <z_set_prio+0x144>)
    8682:	429c      	cmp	r4, r3
    8684:	d01f      	beq.n	86c6 <z_set_prio+0xde>
	return list->head == list;
    8686:	4b2a      	ldr	r3, [pc, #168]	; (8730 <z_set_prio+0x148>)
    8688:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    868c:	429d      	cmp	r5, r3
    868e:	d02c      	beq.n	86ea <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8690:	b16d      	cbz	r5, 86ae <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8692:	4629      	mov	r1, r5
    8694:	4620      	mov	r0, r4
    8696:	f002 fae1 	bl	ac5c <z_sched_prio_cmp>
    869a:	2800      	cmp	r0, #0
    869c:	dc1f      	bgt.n	86de <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    869e:	b135      	cbz	r5, 86ae <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    86a0:	4b23      	ldr	r3, [pc, #140]	; (8730 <z_set_prio+0x148>)
    86a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    86a4:	429d      	cmp	r5, r3
    86a6:	d002      	beq.n	86ae <z_set_prio+0xc6>
    86a8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    86aa:	2d00      	cmp	r5, #0
    86ac:	d1f0      	bne.n	8690 <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    86ae:	4b20      	ldr	r3, [pc, #128]	; (8730 <z_set_prio+0x148>)
    86b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    86b2:	f103 0120 	add.w	r1, r3, #32
    86b6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    86b8:	6062      	str	r2, [r4, #4]
	tail->next = node;
    86ba:	6014      	str	r4, [r2, #0]
	list->tail = node;
    86bc:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    86be:	2001      	movs	r0, #1
    86c0:	f7ff fbd6 	bl	7e70 <update_cache>
    86c4:	e7ba      	b.n	863c <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    86c6:	4d1b      	ldr	r5, [pc, #108]	; (8734 <z_set_prio+0x14c>)
    86c8:	23ba      	movs	r3, #186	; 0xba
    86ca:	462a      	mov	r2, r5
    86cc:	491a      	ldr	r1, [pc, #104]	; (8738 <z_set_prio+0x150>)
    86ce:	4814      	ldr	r0, [pc, #80]	; (8720 <z_set_prio+0x138>)
    86d0:	f001 fbcf 	bl	9e72 <assert_print>
    86d4:	21ba      	movs	r1, #186	; 0xba
    86d6:	4628      	mov	r0, r5
    86d8:	f001 fbc4 	bl	9e64 <assert_post_action>
    86dc:	e7d3      	b.n	8686 <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    86de:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    86e0:	6063      	str	r3, [r4, #4]
	node->next = successor;
    86e2:	6025      	str	r5, [r4, #0]
	prev->next = node;
    86e4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    86e6:	606c      	str	r4, [r5, #4]
}
    86e8:	e7e9      	b.n	86be <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    86ea:	2500      	movs	r5, #0
    86ec:	e7d0      	b.n	8690 <z_set_prio+0xa8>
    86ee:	4d0a      	ldr	r5, [pc, #40]	; (8718 <z_set_prio+0x130>)
    86f0:	23b9      	movs	r3, #185	; 0xb9
    86f2:	462a      	mov	r2, r5
    86f4:	4911      	ldr	r1, [pc, #68]	; (873c <z_set_prio+0x154>)
    86f6:	480a      	ldr	r0, [pc, #40]	; (8720 <z_set_prio+0x138>)
    86f8:	f001 fbbb 	bl	9e72 <assert_print>
    86fc:	4905      	ldr	r1, [pc, #20]	; (8714 <z_set_prio+0x12c>)
    86fe:	4810      	ldr	r0, [pc, #64]	; (8740 <z_set_prio+0x158>)
    8700:	f001 fbb7 	bl	9e72 <assert_print>
    8704:	21b9      	movs	r1, #185	; 0xb9
    8706:	4628      	mov	r0, r5
    8708:	f001 fbac 	bl	9e64 <assert_post_action>
    870c:	e79b      	b.n	8646 <z_set_prio+0x5e>
}
    870e:	4638      	mov	r0, r7
    8710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8714:	20004f64 	.word	0x20004f64
    8718:	0000b32c 	.word	0x0000b32c
    871c:	0000b38c 	.word	0x0000b38c
    8720:	0000b180 	.word	0x0000b180
    8724:	0000b3a4 	.word	0x0000b3a4
    8728:	20004f48 	.word	0x20004f48
    872c:	20004290 	.word	0x20004290
    8730:	20004f28 	.word	0x20004f28
    8734:	0000ca94 	.word	0x0000ca94
    8738:	0000cad0 	.word	0x0000cad0
    873c:	0000b35c 	.word	0x0000b35c
    8740:	0000b374 	.word	0x0000b374

00008744 <z_impl_k_thread_suspend>:
{
    8744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8746:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    8748:	3018      	adds	r0, #24
    874a:	f000 fd6f 	bl	922c <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    874e:	2500      	movs	r5, #0
	__asm__ volatile(
    8750:	f04f 0320 	mov.w	r3, #32
    8754:	f3ef 8611 	mrs	r6, BASEPRI
    8758:	f383 8812 	msr	BASEPRI_MAX, r3
    875c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8760:	482d      	ldr	r0, [pc, #180]	; (8818 <z_impl_k_thread_suspend+0xd4>)
    8762:	f7fe fccf 	bl	7104 <z_spin_lock_valid>
    8766:	b118      	cbz	r0, 8770 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    8768:	482b      	ldr	r0, [pc, #172]	; (8818 <z_impl_k_thread_suspend+0xd4>)
    876a:	f7fe fceb 	bl	7144 <z_spin_lock_set_owner>
	return k;
    876e:	e01c      	b.n	87aa <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8770:	4f2a      	ldr	r7, [pc, #168]	; (881c <z_impl_k_thread_suspend+0xd8>)
    8772:	238e      	movs	r3, #142	; 0x8e
    8774:	463a      	mov	r2, r7
    8776:	492a      	ldr	r1, [pc, #168]	; (8820 <z_impl_k_thread_suspend+0xdc>)
    8778:	482a      	ldr	r0, [pc, #168]	; (8824 <z_impl_k_thread_suspend+0xe0>)
    877a:	f001 fb7a 	bl	9e72 <assert_print>
    877e:	4926      	ldr	r1, [pc, #152]	; (8818 <z_impl_k_thread_suspend+0xd4>)
    8780:	4829      	ldr	r0, [pc, #164]	; (8828 <z_impl_k_thread_suspend+0xe4>)
    8782:	f001 fb76 	bl	9e72 <assert_print>
    8786:	218e      	movs	r1, #142	; 0x8e
    8788:	4638      	mov	r0, r7
    878a:	f001 fb6b 	bl	9e64 <assert_post_action>
    878e:	e7eb      	b.n	8768 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8790:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8794:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8796:	4621      	mov	r1, r4
    8798:	4824      	ldr	r0, [pc, #144]	; (882c <z_impl_k_thread_suspend+0xe8>)
    879a:	f7ff fb45 	bl	7e28 <z_priq_dumb_remove>
}
    879e:	e00a      	b.n	87b6 <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    87a0:	f386 8811 	msr	BASEPRI, r6
    87a4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    87a8:	2501      	movs	r5, #1
    87aa:	bb2d      	cbnz	r5, 87f8 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    87ac:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    87ae:	f994 300d 	ldrsb.w	r3, [r4, #13]
    87b2:	2b00      	cmp	r3, #0
    87b4:	dbec      	blt.n	8790 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    87b6:	7b63      	ldrb	r3, [r4, #13]
    87b8:	f043 0310 	orr.w	r3, r3, #16
    87bc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    87be:	4b1c      	ldr	r3, [pc, #112]	; (8830 <z_impl_k_thread_suspend+0xec>)
    87c0:	6898      	ldr	r0, [r3, #8]
    87c2:	42a0      	cmp	r0, r4
    87c4:	bf14      	ite	ne
    87c6:	2000      	movne	r0, #0
    87c8:	2001      	moveq	r0, #1
    87ca:	f7ff fb51 	bl	7e70 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    87ce:	4812      	ldr	r0, [pc, #72]	; (8818 <z_impl_k_thread_suspend+0xd4>)
    87d0:	f7fe fca8 	bl	7124 <z_spin_unlock_valid>
    87d4:	2800      	cmp	r0, #0
    87d6:	d1e3      	bne.n	87a0 <z_impl_k_thread_suspend+0x5c>
    87d8:	4d10      	ldr	r5, [pc, #64]	; (881c <z_impl_k_thread_suspend+0xd8>)
    87da:	23b9      	movs	r3, #185	; 0xb9
    87dc:	462a      	mov	r2, r5
    87de:	4915      	ldr	r1, [pc, #84]	; (8834 <z_impl_k_thread_suspend+0xf0>)
    87e0:	4810      	ldr	r0, [pc, #64]	; (8824 <z_impl_k_thread_suspend+0xe0>)
    87e2:	f001 fb46 	bl	9e72 <assert_print>
    87e6:	490c      	ldr	r1, [pc, #48]	; (8818 <z_impl_k_thread_suspend+0xd4>)
    87e8:	4813      	ldr	r0, [pc, #76]	; (8838 <z_impl_k_thread_suspend+0xf4>)
    87ea:	f001 fb42 	bl	9e72 <assert_print>
    87ee:	21b9      	movs	r1, #185	; 0xb9
    87f0:	4628      	mov	r0, r5
    87f2:	f001 fb37 	bl	9e64 <assert_post_action>
    87f6:	e7d3      	b.n	87a0 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    87f8:	4b0d      	ldr	r3, [pc, #52]	; (8830 <z_impl_k_thread_suspend+0xec>)
    87fa:	689b      	ldr	r3, [r3, #8]
    87fc:	42a3      	cmp	r3, r4
    87fe:	d000      	beq.n	8802 <z_impl_k_thread_suspend+0xbe>
}
    8800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    8802:	f04f 0320 	mov.w	r3, #32
    8806:	f3ef 8011 	mrs	r0, BASEPRI
    880a:	f383 8812 	msr	BASEPRI_MAX, r3
    880e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8812:	f002 fa2d 	bl	ac70 <z_reschedule_irqlock>
    8816:	e7f3      	b.n	8800 <z_impl_k_thread_suspend+0xbc>
    8818:	20004f64 	.word	0x20004f64
    881c:	0000b32c 	.word	0x0000b32c
    8820:	0000b38c 	.word	0x0000b38c
    8824:	0000b180 	.word	0x0000b180
    8828:	0000b3a4 	.word	0x0000b3a4
    882c:	20004f48 	.word	0x20004f48
    8830:	20004f28 	.word	0x20004f28
    8834:	0000b35c 	.word	0x0000b35c
    8838:	0000b374 	.word	0x0000b374

0000883c <k_sched_unlock>:
{
    883c:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    883e:	2400      	movs	r4, #0
    8840:	f04f 0320 	mov.w	r3, #32
    8844:	f3ef 8511 	mrs	r5, BASEPRI
    8848:	f383 8812 	msr	BASEPRI_MAX, r3
    884c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8850:	4838      	ldr	r0, [pc, #224]	; (8934 <k_sched_unlock+0xf8>)
    8852:	f7fe fc57 	bl	7104 <z_spin_lock_valid>
    8856:	b118      	cbz	r0, 8860 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    8858:	4836      	ldr	r0, [pc, #216]	; (8934 <k_sched_unlock+0xf8>)
    885a:	f7fe fc73 	bl	7144 <z_spin_lock_set_owner>
	return k;
    885e:	e036      	b.n	88ce <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8860:	4e35      	ldr	r6, [pc, #212]	; (8938 <k_sched_unlock+0xfc>)
    8862:	238e      	movs	r3, #142	; 0x8e
    8864:	4632      	mov	r2, r6
    8866:	4935      	ldr	r1, [pc, #212]	; (893c <k_sched_unlock+0x100>)
    8868:	4835      	ldr	r0, [pc, #212]	; (8940 <k_sched_unlock+0x104>)
    886a:	f001 fb02 	bl	9e72 <assert_print>
    886e:	4931      	ldr	r1, [pc, #196]	; (8934 <k_sched_unlock+0xf8>)
    8870:	4834      	ldr	r0, [pc, #208]	; (8944 <k_sched_unlock+0x108>)
    8872:	f001 fafe 	bl	9e72 <assert_print>
    8876:	218e      	movs	r1, #142	; 0x8e
    8878:	4630      	mov	r0, r6
    887a:	f001 faf3 	bl	9e64 <assert_post_action>
    887e:	e7eb      	b.n	8858 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    8880:	4c31      	ldr	r4, [pc, #196]	; (8948 <k_sched_unlock+0x10c>)
    8882:	f240 33bb 	movw	r3, #955	; 0x3bb
    8886:	4622      	mov	r2, r4
    8888:	4930      	ldr	r1, [pc, #192]	; (894c <k_sched_unlock+0x110>)
    888a:	482d      	ldr	r0, [pc, #180]	; (8940 <k_sched_unlock+0x104>)
    888c:	f001 faf1 	bl	9e72 <assert_print>
    8890:	482f      	ldr	r0, [pc, #188]	; (8950 <k_sched_unlock+0x114>)
    8892:	f001 faee 	bl	9e72 <assert_print>
    8896:	f240 31bb 	movw	r1, #955	; 0x3bb
    889a:	4620      	mov	r0, r4
    889c:	f001 fae2 	bl	9e64 <assert_post_action>
    88a0:	e01b      	b.n	88da <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    88a2:	4c29      	ldr	r4, [pc, #164]	; (8948 <k_sched_unlock+0x10c>)
    88a4:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    88a8:	4622      	mov	r2, r4
    88aa:	492a      	ldr	r1, [pc, #168]	; (8954 <k_sched_unlock+0x118>)
    88ac:	4824      	ldr	r0, [pc, #144]	; (8940 <k_sched_unlock+0x104>)
    88ae:	f001 fae0 	bl	9e72 <assert_print>
    88b2:	4827      	ldr	r0, [pc, #156]	; (8950 <k_sched_unlock+0x114>)
    88b4:	f001 fadd 	bl	9e72 <assert_print>
    88b8:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    88bc:	4620      	mov	r0, r4
    88be:	f001 fad1 	bl	9e64 <assert_post_action>
    88c2:	e00e      	b.n	88e2 <k_sched_unlock+0xa6>
	__asm__ volatile(
    88c4:	f385 8811 	msr	BASEPRI, r5
    88c8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    88cc:	2401      	movs	r4, #1
    88ce:	bb2c      	cbnz	r4, 891c <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    88d0:	4b21      	ldr	r3, [pc, #132]	; (8958 <k_sched_unlock+0x11c>)
    88d2:	689b      	ldr	r3, [r3, #8]
    88d4:	7bdb      	ldrb	r3, [r3, #15]
    88d6:	2b00      	cmp	r3, #0
    88d8:	d0d2      	beq.n	8880 <k_sched_unlock+0x44>
    88da:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    88de:	2b00      	cmp	r3, #0
    88e0:	d1df      	bne.n	88a2 <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    88e2:	4b1d      	ldr	r3, [pc, #116]	; (8958 <k_sched_unlock+0x11c>)
    88e4:	689a      	ldr	r2, [r3, #8]
    88e6:	7bd3      	ldrb	r3, [r2, #15]
    88e8:	3301      	adds	r3, #1
    88ea:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    88ec:	2000      	movs	r0, #0
    88ee:	f7ff fabf 	bl	7e70 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    88f2:	4810      	ldr	r0, [pc, #64]	; (8934 <k_sched_unlock+0xf8>)
    88f4:	f7fe fc16 	bl	7124 <z_spin_unlock_valid>
    88f8:	2800      	cmp	r0, #0
    88fa:	d1e3      	bne.n	88c4 <k_sched_unlock+0x88>
    88fc:	4c0e      	ldr	r4, [pc, #56]	; (8938 <k_sched_unlock+0xfc>)
    88fe:	23b9      	movs	r3, #185	; 0xb9
    8900:	4622      	mov	r2, r4
    8902:	4916      	ldr	r1, [pc, #88]	; (895c <k_sched_unlock+0x120>)
    8904:	480e      	ldr	r0, [pc, #56]	; (8940 <k_sched_unlock+0x104>)
    8906:	f001 fab4 	bl	9e72 <assert_print>
    890a:	490a      	ldr	r1, [pc, #40]	; (8934 <k_sched_unlock+0xf8>)
    890c:	4814      	ldr	r0, [pc, #80]	; (8960 <k_sched_unlock+0x124>)
    890e:	f001 fab0 	bl	9e72 <assert_print>
    8912:	21b9      	movs	r1, #185	; 0xb9
    8914:	4620      	mov	r0, r4
    8916:	f001 faa5 	bl	9e64 <assert_post_action>
    891a:	e7d3      	b.n	88c4 <k_sched_unlock+0x88>
	__asm__ volatile(
    891c:	f04f 0320 	mov.w	r3, #32
    8920:	f3ef 8011 	mrs	r0, BASEPRI
    8924:	f383 8812 	msr	BASEPRI_MAX, r3
    8928:	f3bf 8f6f 	isb	sy
    892c:	f002 f9a0 	bl	ac70 <z_reschedule_irqlock>
}
    8930:	bd70      	pop	{r4, r5, r6, pc}
    8932:	bf00      	nop
    8934:	20004f64 	.word	0x20004f64
    8938:	0000b32c 	.word	0x0000b32c
    893c:	0000b38c 	.word	0x0000b38c
    8940:	0000b180 	.word	0x0000b180
    8944:	0000b3a4 	.word	0x0000b3a4
    8948:	0000ca94 	.word	0x0000ca94
    894c:	0000cb1c 	.word	0x0000cb1c
    8950:	0000c9ec 	.word	0x0000c9ec
    8954:	0000c8a4 	.word	0x0000c8a4
    8958:	20004f28 	.word	0x20004f28
    895c:	0000b35c 	.word	0x0000b35c
    8960:	0000b374 	.word	0x0000b374

00008964 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    8964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    8966:	7b43      	ldrb	r3, [r0, #13]
    8968:	f013 0f08 	tst.w	r3, #8
    896c:	d145      	bne.n	89fa <end_thread+0x96>
    896e:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    8970:	f043 0308 	orr.w	r3, r3, #8
    8974:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8976:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    897a:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    897c:	f013 0f80 	tst.w	r3, #128	; 0x80
    8980:	d12d      	bne.n	89de <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    8982:	68ab      	ldr	r3, [r5, #8]
    8984:	b15b      	cbz	r3, 899e <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8986:	4628      	mov	r0, r5
    8988:	f7ff f8ca 	bl	7b20 <pended_on_thread>
    898c:	4629      	mov	r1, r5
    898e:	f7ff fa4b 	bl	7e28 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8992:	7b6b      	ldrb	r3, [r5, #13]
    8994:	f023 0302 	bic.w	r3, r3, #2
    8998:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    899a:	2300      	movs	r3, #0
    899c:	60ab      	str	r3, [r5, #8]
    899e:	f105 0018 	add.w	r0, r5, #24
    89a2:	f000 fc43 	bl	922c <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    89a6:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    89aa:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    89ac:	42bc      	cmp	r4, r7
    89ae:	d01e      	beq.n	89ee <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    89b0:	b1ec      	cbz	r4, 89ee <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    89b2:	4620      	mov	r0, r4
    89b4:	f7ff f8b4 	bl	7b20 <pended_on_thread>
    89b8:	4621      	mov	r1, r4
    89ba:	f7ff fa35 	bl	7e28 <z_priq_dumb_remove>
    89be:	7b63      	ldrb	r3, [r4, #13]
    89c0:	f023 0302 	bic.w	r3, r3, #2
    89c4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    89c6:	2600      	movs	r6, #0
    89c8:	60a6      	str	r6, [r4, #8]
    89ca:	f104 0018 	add.w	r0, r4, #24
    89ce:	f000 fc2d 	bl	922c <z_abort_timeout>
    89d2:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    89d6:	4620      	mov	r0, r4
    89d8:	f7ff fba4 	bl	8124 <ready_thread>
    89dc:	e7e5      	b.n	89aa <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    89de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    89e2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    89e4:	4601      	mov	r1, r0
    89e6:	4805      	ldr	r0, [pc, #20]	; (89fc <end_thread+0x98>)
    89e8:	f7ff fa1e 	bl	7e28 <z_priq_dumb_remove>
}
    89ec:	e7c9      	b.n	8982 <end_thread+0x1e>
		update_cache(1);
    89ee:	2001      	movs	r0, #1
    89f0:	f7ff fa3e 	bl	7e70 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    89f4:	4628      	mov	r0, r5
    89f6:	f7fe fbad 	bl	7154 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    89fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    89fc:	20004f48 	.word	0x20004f48

00008a00 <z_unpend_first_thread>:
{
    8a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a02:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    8a04:	2500      	movs	r5, #0
    8a06:	f04f 0320 	mov.w	r3, #32
    8a0a:	f3ef 8711 	mrs	r7, BASEPRI
    8a0e:	f383 8812 	msr	BASEPRI_MAX, r3
    8a12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a16:	4825      	ldr	r0, [pc, #148]	; (8aac <z_unpend_first_thread+0xac>)
    8a18:	f7fe fb74 	bl	7104 <z_spin_lock_valid>
    8a1c:	b120      	cbz	r0, 8a28 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    8a1e:	4823      	ldr	r0, [pc, #140]	; (8aac <z_unpend_first_thread+0xac>)
    8a20:	f7fe fb90 	bl	7144 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    8a24:	2400      	movs	r4, #0
	return k;
    8a26:	e018      	b.n	8a5a <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8a28:	4c21      	ldr	r4, [pc, #132]	; (8ab0 <z_unpend_first_thread+0xb0>)
    8a2a:	238e      	movs	r3, #142	; 0x8e
    8a2c:	4622      	mov	r2, r4
    8a2e:	4921      	ldr	r1, [pc, #132]	; (8ab4 <z_unpend_first_thread+0xb4>)
    8a30:	4821      	ldr	r0, [pc, #132]	; (8ab8 <z_unpend_first_thread+0xb8>)
    8a32:	f001 fa1e 	bl	9e72 <assert_print>
    8a36:	491d      	ldr	r1, [pc, #116]	; (8aac <z_unpend_first_thread+0xac>)
    8a38:	4820      	ldr	r0, [pc, #128]	; (8abc <z_unpend_first_thread+0xbc>)
    8a3a:	f001 fa1a 	bl	9e72 <assert_print>
    8a3e:	218e      	movs	r1, #142	; 0x8e
    8a40:	4620      	mov	r0, r4
    8a42:	f001 fa0f 	bl	9e64 <assert_post_action>
    8a46:	e7ea      	b.n	8a1e <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8a48:	4818      	ldr	r0, [pc, #96]	; (8aac <z_unpend_first_thread+0xac>)
    8a4a:	f7fe fb6b 	bl	7124 <z_spin_unlock_valid>
    8a4e:	b1d8      	cbz	r0, 8a88 <z_unpend_first_thread+0x88>
	__asm__ volatile(
    8a50:	f387 8811 	msr	BASEPRI, r7
    8a54:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8a58:	2501      	movs	r5, #1
    8a5a:	bb2d      	cbnz	r5, 8aa8 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    8a5c:	4630      	mov	r0, r6
    8a5e:	f002 f91c 	bl	ac9a <z_priq_dumb_best>
		if (thread != NULL) {
    8a62:	4604      	mov	r4, r0
    8a64:	2800      	cmp	r0, #0
    8a66:	d0ef      	beq.n	8a48 <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8a68:	f7ff f85a 	bl	7b20 <pended_on_thread>
    8a6c:	4621      	mov	r1, r4
    8a6e:	f7ff f9db 	bl	7e28 <z_priq_dumb_remove>
    8a72:	7b63      	ldrb	r3, [r4, #13]
    8a74:	f023 0302 	bic.w	r3, r3, #2
    8a78:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8a7a:	2300      	movs	r3, #0
    8a7c:	60a3      	str	r3, [r4, #8]
    8a7e:	f104 0018 	add.w	r0, r4, #24
    8a82:	f000 fbd3 	bl	922c <z_abort_timeout>
    8a86:	e7df      	b.n	8a48 <z_unpend_first_thread+0x48>
    8a88:	4d09      	ldr	r5, [pc, #36]	; (8ab0 <z_unpend_first_thread+0xb0>)
    8a8a:	23b9      	movs	r3, #185	; 0xb9
    8a8c:	462a      	mov	r2, r5
    8a8e:	490c      	ldr	r1, [pc, #48]	; (8ac0 <z_unpend_first_thread+0xc0>)
    8a90:	4809      	ldr	r0, [pc, #36]	; (8ab8 <z_unpend_first_thread+0xb8>)
    8a92:	f001 f9ee 	bl	9e72 <assert_print>
    8a96:	4905      	ldr	r1, [pc, #20]	; (8aac <z_unpend_first_thread+0xac>)
    8a98:	480a      	ldr	r0, [pc, #40]	; (8ac4 <z_unpend_first_thread+0xc4>)
    8a9a:	f001 f9ea 	bl	9e72 <assert_print>
    8a9e:	21b9      	movs	r1, #185	; 0xb9
    8aa0:	4628      	mov	r0, r5
    8aa2:	f001 f9df 	bl	9e64 <assert_post_action>
    8aa6:	e7d3      	b.n	8a50 <z_unpend_first_thread+0x50>
}
    8aa8:	4620      	mov	r0, r4
    8aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8aac:	20004f64 	.word	0x20004f64
    8ab0:	0000b32c 	.word	0x0000b32c
    8ab4:	0000b38c 	.word	0x0000b38c
    8ab8:	0000b180 	.word	0x0000b180
    8abc:	0000b3a4 	.word	0x0000b3a4
    8ac0:	0000b35c 	.word	0x0000b35c
    8ac4:	0000b374 	.word	0x0000b374

00008ac8 <z_sched_init>:
{
    8ac8:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    8aca:	4804      	ldr	r0, [pc, #16]	; (8adc <z_sched_init+0x14>)
    8acc:	f002 f8ec 	bl	aca8 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    8ad0:	2100      	movs	r1, #0
    8ad2:	4608      	mov	r0, r1
    8ad4:	f7ff f862 	bl	7b9c <k_sched_time_slice_set>
}
    8ad8:	bd08      	pop	{r3, pc}
    8ada:	bf00      	nop
    8adc:	20004f44 	.word	0x20004f44

00008ae0 <z_impl_k_yield>:
{
    8ae0:	b570      	push	{r4, r5, r6, lr}
    8ae2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    8ae6:	2b00      	cmp	r3, #0
    8ae8:	d149      	bne.n	8b7e <z_impl_k_yield+0x9e>
	__asm__ volatile(
    8aea:	f04f 0320 	mov.w	r3, #32
    8aee:	f3ef 8611 	mrs	r6, BASEPRI
    8af2:	f383 8812 	msr	BASEPRI_MAX, r3
    8af6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8afa:	4843      	ldr	r0, [pc, #268]	; (8c08 <z_impl_k_yield+0x128>)
    8afc:	f7fe fb02 	bl	7104 <z_spin_lock_valid>
    8b00:	2800      	cmp	r0, #0
    8b02:	d04d      	beq.n	8ba0 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    8b04:	4840      	ldr	r0, [pc, #256]	; (8c08 <z_impl_k_yield+0x128>)
    8b06:	f7fe fb1d 	bl	7144 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    8b0a:	4c40      	ldr	r4, [pc, #256]	; (8c0c <z_impl_k_yield+0x12c>)
    8b0c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8b0e:	7b4b      	ldrb	r3, [r1, #13]
    8b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8b14:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8b16:	f104 0020 	add.w	r0, r4, #32
    8b1a:	f7ff f985 	bl	7e28 <z_priq_dumb_remove>
	queue_thread(_current);
    8b1e:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    8b20:	7b6b      	ldrb	r3, [r5, #13]
    8b22:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8b26:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8b28:	4b39      	ldr	r3, [pc, #228]	; (8c10 <z_impl_k_yield+0x130>)
    8b2a:	429d      	cmp	r5, r3
    8b2c:	d048      	beq.n	8bc0 <z_impl_k_yield+0xe0>
	return list->head == list;
    8b2e:	4b37      	ldr	r3, [pc, #220]	; (8c0c <z_impl_k_yield+0x12c>)
    8b30:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b34:	429c      	cmp	r4, r3
    8b36:	d055      	beq.n	8be4 <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8b38:	b16c      	cbz	r4, 8b56 <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8b3a:	4621      	mov	r1, r4
    8b3c:	4628      	mov	r0, r5
    8b3e:	f002 f88d 	bl	ac5c <z_sched_prio_cmp>
    8b42:	2800      	cmp	r0, #0
    8b44:	dc48      	bgt.n	8bd8 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8b46:	b134      	cbz	r4, 8b56 <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    8b48:	4b30      	ldr	r3, [pc, #192]	; (8c0c <z_impl_k_yield+0x12c>)
    8b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b4c:	429c      	cmp	r4, r3
    8b4e:	d002      	beq.n	8b56 <z_impl_k_yield+0x76>
    8b50:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8b52:	2c00      	cmp	r4, #0
    8b54:	d1f0      	bne.n	8b38 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    8b56:	4b2d      	ldr	r3, [pc, #180]	; (8c0c <z_impl_k_yield+0x12c>)
    8b58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8b5a:	f103 0120 	add.w	r1, r3, #32
    8b5e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    8b60:	606a      	str	r2, [r5, #4]
	tail->next = node;
    8b62:	6015      	str	r5, [r2, #0]
	list->tail = node;
    8b64:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    8b66:	2001      	movs	r0, #1
    8b68:	f7ff f982 	bl	7e70 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8b6c:	4826      	ldr	r0, [pc, #152]	; (8c08 <z_impl_k_yield+0x128>)
    8b6e:	f7fe fad9 	bl	7124 <z_spin_unlock_valid>
    8b72:	2800      	cmp	r0, #0
    8b74:	d038      	beq.n	8be8 <z_impl_k_yield+0x108>
    8b76:	4630      	mov	r0, r6
    8b78:	f7fa f8f2 	bl	2d60 <arch_swap>
}
    8b7c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    8b7e:	4c25      	ldr	r4, [pc, #148]	; (8c14 <z_impl_k_yield+0x134>)
    8b80:	f240 5332 	movw	r3, #1330	; 0x532
    8b84:	4622      	mov	r2, r4
    8b86:	4924      	ldr	r1, [pc, #144]	; (8c18 <z_impl_k_yield+0x138>)
    8b88:	4824      	ldr	r0, [pc, #144]	; (8c1c <z_impl_k_yield+0x13c>)
    8b8a:	f001 f972 	bl	9e72 <assert_print>
    8b8e:	4824      	ldr	r0, [pc, #144]	; (8c20 <z_impl_k_yield+0x140>)
    8b90:	f001 f96f 	bl	9e72 <assert_print>
    8b94:	f240 5132 	movw	r1, #1330	; 0x532
    8b98:	4620      	mov	r0, r4
    8b9a:	f001 f963 	bl	9e64 <assert_post_action>
    8b9e:	e7a4      	b.n	8aea <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ba0:	4c20      	ldr	r4, [pc, #128]	; (8c24 <z_impl_k_yield+0x144>)
    8ba2:	238e      	movs	r3, #142	; 0x8e
    8ba4:	4622      	mov	r2, r4
    8ba6:	4920      	ldr	r1, [pc, #128]	; (8c28 <z_impl_k_yield+0x148>)
    8ba8:	481c      	ldr	r0, [pc, #112]	; (8c1c <z_impl_k_yield+0x13c>)
    8baa:	f001 f962 	bl	9e72 <assert_print>
    8bae:	4916      	ldr	r1, [pc, #88]	; (8c08 <z_impl_k_yield+0x128>)
    8bb0:	481e      	ldr	r0, [pc, #120]	; (8c2c <z_impl_k_yield+0x14c>)
    8bb2:	f001 f95e 	bl	9e72 <assert_print>
    8bb6:	218e      	movs	r1, #142	; 0x8e
    8bb8:	4620      	mov	r0, r4
    8bba:	f001 f953 	bl	9e64 <assert_post_action>
    8bbe:	e7a1      	b.n	8b04 <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8bc0:	4c14      	ldr	r4, [pc, #80]	; (8c14 <z_impl_k_yield+0x134>)
    8bc2:	23ba      	movs	r3, #186	; 0xba
    8bc4:	4622      	mov	r2, r4
    8bc6:	491a      	ldr	r1, [pc, #104]	; (8c30 <z_impl_k_yield+0x150>)
    8bc8:	4814      	ldr	r0, [pc, #80]	; (8c1c <z_impl_k_yield+0x13c>)
    8bca:	f001 f952 	bl	9e72 <assert_print>
    8bce:	21ba      	movs	r1, #186	; 0xba
    8bd0:	4620      	mov	r0, r4
    8bd2:	f001 f947 	bl	9e64 <assert_post_action>
    8bd6:	e7aa      	b.n	8b2e <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    8bd8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    8bda:	606b      	str	r3, [r5, #4]
	node->next = successor;
    8bdc:	602c      	str	r4, [r5, #0]
	prev->next = node;
    8bde:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    8be0:	6065      	str	r5, [r4, #4]
}
    8be2:	e7c0      	b.n	8b66 <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8be4:	2400      	movs	r4, #0
    8be6:	e7a7      	b.n	8b38 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8be8:	4c0e      	ldr	r4, [pc, #56]	; (8c24 <z_impl_k_yield+0x144>)
    8bea:	23d0      	movs	r3, #208	; 0xd0
    8bec:	4622      	mov	r2, r4
    8bee:	4911      	ldr	r1, [pc, #68]	; (8c34 <z_impl_k_yield+0x154>)
    8bf0:	480a      	ldr	r0, [pc, #40]	; (8c1c <z_impl_k_yield+0x13c>)
    8bf2:	f001 f93e 	bl	9e72 <assert_print>
    8bf6:	4904      	ldr	r1, [pc, #16]	; (8c08 <z_impl_k_yield+0x128>)
    8bf8:	480f      	ldr	r0, [pc, #60]	; (8c38 <z_impl_k_yield+0x158>)
    8bfa:	f001 f93a 	bl	9e72 <assert_print>
    8bfe:	21d0      	movs	r1, #208	; 0xd0
    8c00:	4620      	mov	r0, r4
    8c02:	f001 f92f 	bl	9e64 <assert_post_action>
    8c06:	e7b6      	b.n	8b76 <z_impl_k_yield+0x96>
    8c08:	20004f64 	.word	0x20004f64
    8c0c:	20004f28 	.word	0x20004f28
    8c10:	20004290 	.word	0x20004290
    8c14:	0000ca94 	.word	0x0000ca94
    8c18:	0000c8a4 	.word	0x0000c8a4
    8c1c:	0000b180 	.word	0x0000b180
    8c20:	0000c9ec 	.word	0x0000c9ec
    8c24:	0000b32c 	.word	0x0000b32c
    8c28:	0000b38c 	.word	0x0000b38c
    8c2c:	0000b3a4 	.word	0x0000b3a4
    8c30:	0000cad0 	.word	0x0000cad0
    8c34:	0000b35c 	.word	0x0000b35c
    8c38:	0000b374 	.word	0x0000b374

00008c3c <z_tick_sleep>:
{
    8c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8c40:	4604      	mov	r4, r0
    8c42:	460e      	mov	r6, r1
    8c44:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    8c48:	2b00      	cmp	r3, #0
    8c4a:	d14e      	bne.n	8cea <z_tick_sleep+0xae>
	if (ticks == 0) {
    8c4c:	ea54 0306 	orrs.w	r3, r4, r6
    8c50:	d05c      	beq.n	8d0c <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    8c52:	f06f 0301 	mvn.w	r3, #1
    8c56:	1b1b      	subs	r3, r3, r4
    8c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8c5c:	eb62 0206 	sbc.w	r2, r2, r6
    8c60:	2b01      	cmp	r3, #1
    8c62:	f172 0300 	sbcs.w	r3, r2, #0
    8c66:	db55      	blt.n	8d14 <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    8c68:	f06f 0501 	mvn.w	r5, #1
    8c6c:	1b2d      	subs	r5, r5, r4
    8c6e:	f04f 0320 	mov.w	r3, #32
    8c72:	f3ef 8911 	mrs	r9, BASEPRI
    8c76:	f383 8812 	msr	BASEPRI_MAX, r3
    8c7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c7e:	4840      	ldr	r0, [pc, #256]	; (8d80 <z_tick_sleep+0x144>)
    8c80:	f7fe fa40 	bl	7104 <z_spin_lock_valid>
    8c84:	2800      	cmp	r0, #0
    8c86:	d049      	beq.n	8d1c <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    8c88:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8d80 <z_tick_sleep+0x144>
    8c8c:	4640      	mov	r0, r8
    8c8e:	f7fe fa59 	bl	7144 <z_spin_lock_set_owner>
	pending_current = _current;
    8c92:	4f3c      	ldr	r7, [pc, #240]	; (8d84 <z_tick_sleep+0x148>)
    8c94:	68b8      	ldr	r0, [r7, #8]
    8c96:	4b3c      	ldr	r3, [pc, #240]	; (8d88 <z_tick_sleep+0x14c>)
    8c98:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    8c9a:	f7ff fbbb 	bl	8414 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    8c9e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8ca0:	4622      	mov	r2, r4
    8ca2:	4633      	mov	r3, r6
    8ca4:	4939      	ldr	r1, [pc, #228]	; (8d8c <z_tick_sleep+0x150>)
    8ca6:	3018      	adds	r0, #24
    8ca8:	f000 f9dc 	bl	9064 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    8cac:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8cae:	7b53      	ldrb	r3, [r2, #13]
    8cb0:	f043 0310 	orr.w	r3, r3, #16
    8cb4:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8cb6:	4640      	mov	r0, r8
    8cb8:	f7fe fa34 	bl	7124 <z_spin_unlock_valid>
    8cbc:	2800      	cmp	r0, #0
    8cbe:	d03d      	beq.n	8d3c <z_tick_sleep+0x100>
    8cc0:	4648      	mov	r0, r9
    8cc2:	f7fa f84d 	bl	2d60 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    8cc6:	4b2f      	ldr	r3, [pc, #188]	; (8d84 <z_tick_sleep+0x148>)
    8cc8:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    8cca:	7b5b      	ldrb	r3, [r3, #13]
    8ccc:	f013 0f10 	tst.w	r3, #16
    8cd0:	d144      	bne.n	8d5c <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    8cd2:	f002 f804 	bl	acde <sys_clock_tick_get_32>
    8cd6:	1a28      	subs	r0, r5, r0
    8cd8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    8cdc:	2801      	cmp	r0, #1
    8cde:	f173 0300 	sbcs.w	r3, r3, #0
    8ce2:	da00      	bge.n	8ce6 <z_tick_sleep+0xaa>
	return 0;
    8ce4:	2000      	movs	r0, #0
}
    8ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    8cea:	4d29      	ldr	r5, [pc, #164]	; (8d90 <z_tick_sleep+0x154>)
    8cec:	f240 534e 	movw	r3, #1358	; 0x54e
    8cf0:	462a      	mov	r2, r5
    8cf2:	4928      	ldr	r1, [pc, #160]	; (8d94 <z_tick_sleep+0x158>)
    8cf4:	4828      	ldr	r0, [pc, #160]	; (8d98 <z_tick_sleep+0x15c>)
    8cf6:	f001 f8bc 	bl	9e72 <assert_print>
    8cfa:	4828      	ldr	r0, [pc, #160]	; (8d9c <z_tick_sleep+0x160>)
    8cfc:	f001 f8b9 	bl	9e72 <assert_print>
    8d00:	f240 514e 	movw	r1, #1358	; 0x54e
    8d04:	4628      	mov	r0, r5
    8d06:	f001 f8ad 	bl	9e64 <assert_post_action>
    8d0a:	e79f      	b.n	8c4c <z_tick_sleep+0x10>
	z_impl_k_yield();
    8d0c:	f7ff fee8 	bl	8ae0 <z_impl_k_yield>
		return 0;
    8d10:	2000      	movs	r0, #0
    8d12:	e7e8      	b.n	8ce6 <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    8d14:	f001 ffe3 	bl	acde <sys_clock_tick_get_32>
    8d18:	1905      	adds	r5, r0, r4
    8d1a:	e7a8      	b.n	8c6e <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d1c:	4f20      	ldr	r7, [pc, #128]	; (8da0 <z_tick_sleep+0x164>)
    8d1e:	238e      	movs	r3, #142	; 0x8e
    8d20:	463a      	mov	r2, r7
    8d22:	4920      	ldr	r1, [pc, #128]	; (8da4 <z_tick_sleep+0x168>)
    8d24:	481c      	ldr	r0, [pc, #112]	; (8d98 <z_tick_sleep+0x15c>)
    8d26:	f001 f8a4 	bl	9e72 <assert_print>
    8d2a:	4915      	ldr	r1, [pc, #84]	; (8d80 <z_tick_sleep+0x144>)
    8d2c:	481e      	ldr	r0, [pc, #120]	; (8da8 <z_tick_sleep+0x16c>)
    8d2e:	f001 f8a0 	bl	9e72 <assert_print>
    8d32:	218e      	movs	r1, #142	; 0x8e
    8d34:	4638      	mov	r0, r7
    8d36:	f001 f895 	bl	9e64 <assert_post_action>
    8d3a:	e7a5      	b.n	8c88 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8d3c:	4c18      	ldr	r4, [pc, #96]	; (8da0 <z_tick_sleep+0x164>)
    8d3e:	23d0      	movs	r3, #208	; 0xd0
    8d40:	4622      	mov	r2, r4
    8d42:	491a      	ldr	r1, [pc, #104]	; (8dac <z_tick_sleep+0x170>)
    8d44:	4814      	ldr	r0, [pc, #80]	; (8d98 <z_tick_sleep+0x15c>)
    8d46:	f001 f894 	bl	9e72 <assert_print>
    8d4a:	4641      	mov	r1, r8
    8d4c:	4818      	ldr	r0, [pc, #96]	; (8db0 <z_tick_sleep+0x174>)
    8d4e:	f001 f890 	bl	9e72 <assert_print>
    8d52:	21d0      	movs	r1, #208	; 0xd0
    8d54:	4620      	mov	r0, r4
    8d56:	f001 f885 	bl	9e64 <assert_post_action>
    8d5a:	e7b1      	b.n	8cc0 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    8d5c:	4c0c      	ldr	r4, [pc, #48]	; (8d90 <z_tick_sleep+0x154>)
    8d5e:	f240 536f 	movw	r3, #1391	; 0x56f
    8d62:	4622      	mov	r2, r4
    8d64:	4913      	ldr	r1, [pc, #76]	; (8db4 <z_tick_sleep+0x178>)
    8d66:	480c      	ldr	r0, [pc, #48]	; (8d98 <z_tick_sleep+0x15c>)
    8d68:	f001 f883 	bl	9e72 <assert_print>
    8d6c:	480b      	ldr	r0, [pc, #44]	; (8d9c <z_tick_sleep+0x160>)
    8d6e:	f001 f880 	bl	9e72 <assert_print>
    8d72:	f240 516f 	movw	r1, #1391	; 0x56f
    8d76:	4620      	mov	r0, r4
    8d78:	f001 f874 	bl	9e64 <assert_post_action>
    8d7c:	e7a9      	b.n	8cd2 <z_tick_sleep+0x96>
    8d7e:	bf00      	nop
    8d80:	20004f64 	.word	0x20004f64
    8d84:	20004f28 	.word	0x20004f28
    8d88:	20004f60 	.word	0x20004f60
    8d8c:	0000832d 	.word	0x0000832d
    8d90:	0000ca94 	.word	0x0000ca94
    8d94:	0000c8a4 	.word	0x0000c8a4
    8d98:	0000b180 	.word	0x0000b180
    8d9c:	0000c9ec 	.word	0x0000c9ec
    8da0:	0000b32c 	.word	0x0000b32c
    8da4:	0000b38c 	.word	0x0000b38c
    8da8:	0000b3a4 	.word	0x0000b3a4
    8dac:	0000b35c 	.word	0x0000b35c
    8db0:	0000b374 	.word	0x0000b374
    8db4:	0000cb50 	.word	0x0000cb50

00008db8 <z_impl_k_sleep>:
{
    8db8:	b570      	push	{r4, r5, r6, lr}
    8dba:	4605      	mov	r5, r0
    8dbc:	460c      	mov	r4, r1
    8dbe:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    8dc2:	bb13      	cbnz	r3, 8e0a <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8dc4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    8dc8:	bf08      	it	eq
    8dca:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    8dce:	d02d      	beq.n	8e2c <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    8dd0:	4628      	mov	r0, r5
    8dd2:	4621      	mov	r1, r4
    8dd4:	f7ff ff32 	bl	8c3c <z_tick_sleep>
    8dd8:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    8dda:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    8ddc:	0151      	lsls	r1, r2, #5
    8dde:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    8de2:	0143      	lsls	r3, r0, #5
    8de4:	1a1b      	subs	r3, r3, r0
    8de6:	eb61 0102 	sbc.w	r1, r1, r2
    8dea:	0088      	lsls	r0, r1, #2
    8dec:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    8df0:	009b      	lsls	r3, r3, #2
    8df2:	eb13 030c 	adds.w	r3, r3, ip
    8df6:	eb42 0000 	adc.w	r0, r2, r0
    8dfa:	00c0      	lsls	r0, r0, #3
    8dfc:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    8e00:	f3c3 3310 	ubfx	r3, r3, #12, #17
    8e04:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    8e08:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    8e0a:	4e0c      	ldr	r6, [pc, #48]	; (8e3c <z_impl_k_sleep+0x84>)
    8e0c:	f240 537e 	movw	r3, #1406	; 0x57e
    8e10:	4632      	mov	r2, r6
    8e12:	490b      	ldr	r1, [pc, #44]	; (8e40 <z_impl_k_sleep+0x88>)
    8e14:	480b      	ldr	r0, [pc, #44]	; (8e44 <z_impl_k_sleep+0x8c>)
    8e16:	f001 f82c 	bl	9e72 <assert_print>
    8e1a:	480b      	ldr	r0, [pc, #44]	; (8e48 <z_impl_k_sleep+0x90>)
    8e1c:	f001 f829 	bl	9e72 <assert_print>
    8e20:	f240 517e 	movw	r1, #1406	; 0x57e
    8e24:	4630      	mov	r0, r6
    8e26:	f001 f81d 	bl	9e64 <assert_post_action>
    8e2a:	e7cb      	b.n	8dc4 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    8e2c:	4b07      	ldr	r3, [pc, #28]	; (8e4c <z_impl_k_sleep+0x94>)
    8e2e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    8e30:	f7ff fc88 	bl	8744 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    8e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8e38:	e7e6      	b.n	8e08 <z_impl_k_sleep+0x50>
    8e3a:	bf00      	nop
    8e3c:	0000ca94 	.word	0x0000ca94
    8e40:	0000c8a4 	.word	0x0000c8a4
    8e44:	0000b180 	.word	0x0000b180
    8e48:	0000c9ec 	.word	0x0000c9ec
    8e4c:	20004f28 	.word	0x20004f28

00008e50 <z_impl_z_current_get>:
}
    8e50:	4b01      	ldr	r3, [pc, #4]	; (8e58 <z_impl_z_current_get+0x8>)
    8e52:	6898      	ldr	r0, [r3, #8]
    8e54:	4770      	bx	lr
    8e56:	bf00      	nop
    8e58:	20004f28 	.word	0x20004f28

00008e5c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    8e5c:	b570      	push	{r4, r5, r6, lr}
    8e5e:	4604      	mov	r4, r0
    8e60:	f04f 0320 	mov.w	r3, #32
    8e64:	f3ef 8511 	mrs	r5, BASEPRI
    8e68:	f383 8812 	msr	BASEPRI_MAX, r3
    8e6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8e70:	4840      	ldr	r0, [pc, #256]	; (8f74 <z_thread_abort+0x118>)
    8e72:	f7fe f947 	bl	7104 <z_spin_lock_valid>
    8e76:	b1b8      	cbz	r0, 8ea8 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    8e78:	483e      	ldr	r0, [pc, #248]	; (8f74 <z_thread_abort+0x118>)
    8e7a:	f7fe f963 	bl	7144 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8e7e:	7b63      	ldrb	r3, [r4, #13]
    8e80:	f013 0f08 	tst.w	r3, #8
    8e84:	d120      	bne.n	8ec8 <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    8e86:	4620      	mov	r0, r4
    8e88:	f7ff fd6c 	bl	8964 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    8e8c:	4b3a      	ldr	r3, [pc, #232]	; (8f78 <z_thread_abort+0x11c>)
    8e8e:	689b      	ldr	r3, [r3, #8]
    8e90:	42a3      	cmp	r3, r4
    8e92:	d032      	beq.n	8efa <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8e94:	4837      	ldr	r0, [pc, #220]	; (8f74 <z_thread_abort+0x118>)
    8e96:	f7fe f945 	bl	7124 <z_spin_unlock_valid>
    8e9a:	2800      	cmp	r0, #0
    8e9c:	d059      	beq.n	8f52 <z_thread_abort+0xf6>
	__asm__ volatile(
    8e9e:	f385 8811 	msr	BASEPRI, r5
    8ea2:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8ea6:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ea8:	4e34      	ldr	r6, [pc, #208]	; (8f7c <z_thread_abort+0x120>)
    8eaa:	238e      	movs	r3, #142	; 0x8e
    8eac:	4632      	mov	r2, r6
    8eae:	4934      	ldr	r1, [pc, #208]	; (8f80 <z_thread_abort+0x124>)
    8eb0:	4834      	ldr	r0, [pc, #208]	; (8f84 <z_thread_abort+0x128>)
    8eb2:	f000 ffde 	bl	9e72 <assert_print>
    8eb6:	492f      	ldr	r1, [pc, #188]	; (8f74 <z_thread_abort+0x118>)
    8eb8:	4833      	ldr	r0, [pc, #204]	; (8f88 <z_thread_abort+0x12c>)
    8eba:	f000 ffda 	bl	9e72 <assert_print>
    8ebe:	218e      	movs	r1, #142	; 0x8e
    8ec0:	4630      	mov	r0, r6
    8ec2:	f000 ffcf 	bl	9e64 <assert_post_action>
    8ec6:	e7d7      	b.n	8e78 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ec8:	482a      	ldr	r0, [pc, #168]	; (8f74 <z_thread_abort+0x118>)
    8eca:	f7fe f92b 	bl	7124 <z_spin_unlock_valid>
    8ece:	b120      	cbz	r0, 8eda <z_thread_abort+0x7e>
    8ed0:	f385 8811 	msr	BASEPRI, r5
    8ed4:	f3bf 8f6f 	isb	sy
		return;
    8ed8:	e7e5      	b.n	8ea6 <z_thread_abort+0x4a>
    8eda:	4c28      	ldr	r4, [pc, #160]	; (8f7c <z_thread_abort+0x120>)
    8edc:	23b9      	movs	r3, #185	; 0xb9
    8ede:	4622      	mov	r2, r4
    8ee0:	492a      	ldr	r1, [pc, #168]	; (8f8c <z_thread_abort+0x130>)
    8ee2:	4828      	ldr	r0, [pc, #160]	; (8f84 <z_thread_abort+0x128>)
    8ee4:	f000 ffc5 	bl	9e72 <assert_print>
    8ee8:	4922      	ldr	r1, [pc, #136]	; (8f74 <z_thread_abort+0x118>)
    8eea:	4829      	ldr	r0, [pc, #164]	; (8f90 <z_thread_abort+0x134>)
    8eec:	f000 ffc1 	bl	9e72 <assert_print>
    8ef0:	21b9      	movs	r1, #185	; 0xb9
    8ef2:	4620      	mov	r0, r4
    8ef4:	f000 ffb6 	bl	9e64 <assert_post_action>
    8ef8:	e7ea      	b.n	8ed0 <z_thread_abort+0x74>
    8efa:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    8efe:	2b00      	cmp	r3, #0
    8f00:	d1c8      	bne.n	8e94 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f02:	481c      	ldr	r0, [pc, #112]	; (8f74 <z_thread_abort+0x118>)
    8f04:	f7fe f90e 	bl	7124 <z_spin_unlock_valid>
    8f08:	b198      	cbz	r0, 8f32 <z_thread_abort+0xd6>
    8f0a:	4628      	mov	r0, r5
    8f0c:	f7f9 ff28 	bl	2d60 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    8f10:	4c20      	ldr	r4, [pc, #128]	; (8f94 <z_thread_abort+0x138>)
    8f12:	f240 63ac 	movw	r3, #1708	; 0x6ac
    8f16:	4622      	mov	r2, r4
    8f18:	491f      	ldr	r1, [pc, #124]	; (8f98 <z_thread_abort+0x13c>)
    8f1a:	481a      	ldr	r0, [pc, #104]	; (8f84 <z_thread_abort+0x128>)
    8f1c:	f000 ffa9 	bl	9e72 <assert_print>
    8f20:	481e      	ldr	r0, [pc, #120]	; (8f9c <z_thread_abort+0x140>)
    8f22:	f000 ffa6 	bl	9e72 <assert_print>
    8f26:	f240 61ac 	movw	r1, #1708	; 0x6ac
    8f2a:	4620      	mov	r0, r4
    8f2c:	f000 ff9a 	bl	9e64 <assert_post_action>
    8f30:	e7b0      	b.n	8e94 <z_thread_abort+0x38>
    8f32:	4c12      	ldr	r4, [pc, #72]	; (8f7c <z_thread_abort+0x120>)
    8f34:	23d0      	movs	r3, #208	; 0xd0
    8f36:	4622      	mov	r2, r4
    8f38:	4914      	ldr	r1, [pc, #80]	; (8f8c <z_thread_abort+0x130>)
    8f3a:	4812      	ldr	r0, [pc, #72]	; (8f84 <z_thread_abort+0x128>)
    8f3c:	f000 ff99 	bl	9e72 <assert_print>
    8f40:	490c      	ldr	r1, [pc, #48]	; (8f74 <z_thread_abort+0x118>)
    8f42:	4813      	ldr	r0, [pc, #76]	; (8f90 <z_thread_abort+0x134>)
    8f44:	f000 ff95 	bl	9e72 <assert_print>
    8f48:	21d0      	movs	r1, #208	; 0xd0
    8f4a:	4620      	mov	r0, r4
    8f4c:	f000 ff8a 	bl	9e64 <assert_post_action>
    8f50:	e7db      	b.n	8f0a <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f52:	4c0a      	ldr	r4, [pc, #40]	; (8f7c <z_thread_abort+0x120>)
    8f54:	23b9      	movs	r3, #185	; 0xb9
    8f56:	4622      	mov	r2, r4
    8f58:	490c      	ldr	r1, [pc, #48]	; (8f8c <z_thread_abort+0x130>)
    8f5a:	480a      	ldr	r0, [pc, #40]	; (8f84 <z_thread_abort+0x128>)
    8f5c:	f000 ff89 	bl	9e72 <assert_print>
    8f60:	4904      	ldr	r1, [pc, #16]	; (8f74 <z_thread_abort+0x118>)
    8f62:	480b      	ldr	r0, [pc, #44]	; (8f90 <z_thread_abort+0x134>)
    8f64:	f000 ff85 	bl	9e72 <assert_print>
    8f68:	21b9      	movs	r1, #185	; 0xb9
    8f6a:	4620      	mov	r0, r4
    8f6c:	f000 ff7a 	bl	9e64 <assert_post_action>
    8f70:	e795      	b.n	8e9e <z_thread_abort+0x42>
    8f72:	bf00      	nop
    8f74:	20004f64 	.word	0x20004f64
    8f78:	20004f28 	.word	0x20004f28
    8f7c:	0000b32c 	.word	0x0000b32c
    8f80:	0000b38c 	.word	0x0000b38c
    8f84:	0000b180 	.word	0x0000b180
    8f88:	0000b3a4 	.word	0x0000b3a4
    8f8c:	0000b35c 	.word	0x0000b35c
    8f90:	0000b374 	.word	0x0000b374
    8f94:	0000ca94 	.word	0x0000ca94
    8f98:	0000b83c 	.word	0x0000b83c
    8f9c:	0000cb90 	.word	0x0000cb90

00008fa0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    8fa0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    8fa2:	4806      	ldr	r0, [pc, #24]	; (8fbc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    8fa4:	4a06      	ldr	r2, [pc, #24]	; (8fc0 <z_data_copy+0x20>)
    8fa6:	1a12      	subs	r2, r2, r0
    8fa8:	4906      	ldr	r1, [pc, #24]	; (8fc4 <z_data_copy+0x24>)
    8faa:	f001 fddf 	bl	ab6c <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    8fae:	4a06      	ldr	r2, [pc, #24]	; (8fc8 <z_data_copy+0x28>)
    8fb0:	4906      	ldr	r1, [pc, #24]	; (8fcc <z_data_copy+0x2c>)
    8fb2:	4807      	ldr	r0, [pc, #28]	; (8fd0 <z_data_copy+0x30>)
    8fb4:	f001 fdda 	bl	ab6c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    8fb8:	bd08      	pop	{r3, pc}
    8fba:	bf00      	nop
    8fbc:	20000000 	.word	0x20000000
    8fc0:	200041c0 	.word	0x200041c0
    8fc4:	0000ccf4 	.word	0x0000ccf4
    8fc8:	00000000 	.word	0x00000000
    8fcc:	0000ccf4 	.word	0x0000ccf4
    8fd0:	20000000 	.word	0x20000000

00008fd4 <first>:
	return list->head == list;
    8fd4:	4b03      	ldr	r3, [pc, #12]	; (8fe4 <first+0x10>)
    8fd6:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8fd8:	4298      	cmp	r0, r3
    8fda:	d000      	beq.n	8fde <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    8fdc:	4770      	bx	lr
    8fde:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    8fe0:	e7fc      	b.n	8fdc <first+0x8>
    8fe2:	bf00      	nop
    8fe4:	200040dc 	.word	0x200040dc

00008fe8 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8fe8:	b130      	cbz	r0, 8ff8 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    8fea:	4a04      	ldr	r2, [pc, #16]	; (8ffc <next+0x14>)
    8fec:	6852      	ldr	r2, [r2, #4]
    8fee:	4290      	cmp	r0, r2
    8ff0:	d001      	beq.n	8ff6 <next+0xe>
    8ff2:	6800      	ldr	r0, [r0, #0]
    8ff4:	4770      	bx	lr
    8ff6:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    8ff8:	4770      	bx	lr
    8ffa:	bf00      	nop
    8ffc:	200040dc 	.word	0x200040dc

00009000 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    9000:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    9002:	4b04      	ldr	r3, [pc, #16]	; (9014 <elapsed+0x14>)
    9004:	681b      	ldr	r3, [r3, #0]
    9006:	b10b      	cbz	r3, 900c <elapsed+0xc>
    9008:	2000      	movs	r0, #0
}
    900a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    900c:	f7fb fd14 	bl	4a38 <sys_clock_elapsed>
    9010:	e7fb      	b.n	900a <elapsed+0xa>
    9012:	bf00      	nop
    9014:	20004f70 	.word	0x20004f70

00009018 <next_timeout>:

static int32_t next_timeout(void)
{
    9018:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    901a:	f7ff ffdb 	bl	8fd4 <first>
    901e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    9020:	f7ff ffee 	bl	9000 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    9024:	b17c      	cbz	r4, 9046 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    9026:	6923      	ldr	r3, [r4, #16]
    9028:	6962      	ldr	r2, [r4, #20]
    902a:	1a1b      	subs	r3, r3, r0
    902c:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    9030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    9034:	f170 0200 	sbcs.w	r2, r0, #0
    9038:	da08      	bge.n	904c <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    903a:	2800      	cmp	r0, #0
    903c:	db01      	blt.n	9042 <next_timeout+0x2a>
    903e:	4618      	mov	r0, r3
    9040:	e006      	b.n	9050 <next_timeout+0x38>
    9042:	2300      	movs	r3, #0
    9044:	e7fb      	b.n	903e <next_timeout+0x26>
		ret = MAX_WAIT;
    9046:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    904a:	e001      	b.n	9050 <next_timeout+0x38>
    904c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    9050:	4b03      	ldr	r3, [pc, #12]	; (9060 <next_timeout+0x48>)
    9052:	691b      	ldr	r3, [r3, #16]
    9054:	b113      	cbz	r3, 905c <next_timeout+0x44>
    9056:	4283      	cmp	r3, r0
    9058:	da00      	bge.n	905c <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    905a:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    905c:	bd10      	pop	{r4, pc}
    905e:	bf00      	nop
    9060:	20004f28 	.word	0x20004f28

00009064 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9068:	bf08      	it	eq
    906a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    906e:	f000 80c1 	beq.w	91f4 <z_add_timeout+0x190>
{
    9072:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9076:	4604      	mov	r4, r0
    9078:	460f      	mov	r7, r1
    907a:	4692      	mov	sl, r2
    907c:	461d      	mov	r5, r3
	return node->next != NULL;
    907e:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    9080:	b173      	cbz	r3, 90a0 <z_add_timeout+0x3c>
    9082:	f8df 8174 	ldr.w	r8, [pc, #372]	; 91f8 <z_add_timeout+0x194>
    9086:	2363      	movs	r3, #99	; 0x63
    9088:	4642      	mov	r2, r8
    908a:	495c      	ldr	r1, [pc, #368]	; (91fc <z_add_timeout+0x198>)
    908c:	485c      	ldr	r0, [pc, #368]	; (9200 <z_add_timeout+0x19c>)
    908e:	f000 fef0 	bl	9e72 <assert_print>
    9092:	485c      	ldr	r0, [pc, #368]	; (9204 <z_add_timeout+0x1a0>)
    9094:	f000 feed 	bl	9e72 <assert_print>
    9098:	2163      	movs	r1, #99	; 0x63
    909a:	4640      	mov	r0, r8
    909c:	f000 fee2 	bl	9e64 <assert_post_action>
	to->fn = fn;
    90a0:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    90a2:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    90a6:	f04f 0320 	mov.w	r3, #32
    90aa:	f3ef 8711 	mrs	r7, BASEPRI
    90ae:	f383 8812 	msr	BASEPRI_MAX, r3
    90b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    90b6:	4854      	ldr	r0, [pc, #336]	; (9208 <z_add_timeout+0x1a4>)
    90b8:	f7fe f824 	bl	7104 <z_spin_lock_valid>
    90bc:	b118      	cbz	r0, 90c6 <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    90be:	4852      	ldr	r0, [pc, #328]	; (9208 <z_add_timeout+0x1a4>)
    90c0:	f7fe f840 	bl	7144 <z_spin_lock_set_owner>
	return k;
    90c4:	e038      	b.n	9138 <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    90c6:	f8df 9144 	ldr.w	r9, [pc, #324]	; 920c <z_add_timeout+0x1a8>
    90ca:	238e      	movs	r3, #142	; 0x8e
    90cc:	464a      	mov	r2, r9
    90ce:	4950      	ldr	r1, [pc, #320]	; (9210 <z_add_timeout+0x1ac>)
    90d0:	484b      	ldr	r0, [pc, #300]	; (9200 <z_add_timeout+0x19c>)
    90d2:	f000 fece 	bl	9e72 <assert_print>
    90d6:	494c      	ldr	r1, [pc, #304]	; (9208 <z_add_timeout+0x1a4>)
    90d8:	484e      	ldr	r0, [pc, #312]	; (9214 <z_add_timeout+0x1b0>)
    90da:	f000 feca 	bl	9e72 <assert_print>
    90de:	218e      	movs	r1, #142	; 0x8e
    90e0:	4648      	mov	r0, r9
    90e2:	f000 febf 	bl	9e64 <assert_post_action>
    90e6:	e7ea      	b.n	90be <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    90e8:	f11a 0801 	adds.w	r8, sl, #1
    90ec:	f145 0900 	adc.w	r9, r5, #0
    90f0:	f7ff ff86 	bl	9000 <elapsed>
    90f4:	eb18 0300 	adds.w	r3, r8, r0
    90f8:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    90fc:	6123      	str	r3, [r4, #16]
    90fe:	6160      	str	r0, [r4, #20]
    9100:	e03d      	b.n	917e <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    9102:	1a51      	subs	r1, r2, r1
    9104:	eb66 0303 	sbc.w	r3, r6, r3
    9108:	6101      	str	r1, [r0, #16]
    910a:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    910c:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    910e:	6063      	str	r3, [r4, #4]
	node->next = successor;
    9110:	6020      	str	r0, [r4, #0]
	prev->next = node;
    9112:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    9114:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    9116:	2800      	cmp	r0, #0
    9118:	d045      	beq.n	91a6 <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    911a:	f7ff ff5b 	bl	8fd4 <first>
    911e:	4284      	cmp	r4, r0
    9120:	d048      	beq.n	91b4 <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9122:	4839      	ldr	r0, [pc, #228]	; (9208 <z_add_timeout+0x1a4>)
    9124:	f7fd fffe 	bl	7124 <z_spin_unlock_valid>
    9128:	2800      	cmp	r0, #0
    912a:	d050      	beq.n	91ce <z_add_timeout+0x16a>
	__asm__ volatile(
    912c:	f387 8811 	msr	BASEPRI, r7
    9130:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9134:	f04f 0801 	mov.w	r8, #1
    9138:	f1b8 0f00 	cmp.w	r8, #0
    913c:	d158      	bne.n	91f0 <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    913e:	4653      	mov	r3, sl
    9140:	f06f 0101 	mvn.w	r1, #1
    9144:	ebb1 010a 	subs.w	r1, r1, sl
    9148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    914c:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    9150:	2a00      	cmp	r2, #0
    9152:	dbc9      	blt.n	90e8 <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    9154:	4a30      	ldr	r2, [pc, #192]	; (9218 <z_add_timeout+0x1b4>)
    9156:	6811      	ldr	r1, [r2, #0]
    9158:	6852      	ldr	r2, [r2, #4]
    915a:	185b      	adds	r3, r3, r1
    915c:	eb42 0205 	adc.w	r2, r2, r5
    9160:	f06f 0101 	mvn.w	r1, #1
    9164:	1acb      	subs	r3, r1, r3
    9166:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    916a:	4618      	mov	r0, r3
    916c:	4611      	mov	r1, r2
    916e:	2b01      	cmp	r3, #1
    9170:	f172 0300 	sbcs.w	r3, r2, #0
    9174:	da01      	bge.n	917a <z_add_timeout+0x116>
    9176:	2001      	movs	r0, #1
    9178:	2100      	movs	r1, #0
    917a:	6120      	str	r0, [r4, #16]
    917c:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    917e:	f7ff ff29 	bl	8fd4 <first>
    9182:	2800      	cmp	r0, #0
    9184:	d0c7      	beq.n	9116 <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    9186:	6902      	ldr	r2, [r0, #16]
    9188:	6946      	ldr	r6, [r0, #20]
    918a:	6921      	ldr	r1, [r4, #16]
    918c:	6963      	ldr	r3, [r4, #20]
    918e:	4291      	cmp	r1, r2
    9190:	eb73 0c06 	sbcs.w	ip, r3, r6
    9194:	dbb5      	blt.n	9102 <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    9196:	1a89      	subs	r1, r1, r2
    9198:	eb63 0306 	sbc.w	r3, r3, r6
    919c:	6121      	str	r1, [r4, #16]
    919e:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    91a0:	f7ff ff22 	bl	8fe8 <next>
    91a4:	e7ed      	b.n	9182 <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    91a6:	4b1d      	ldr	r3, [pc, #116]	; (921c <z_add_timeout+0x1b8>)
    91a8:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    91aa:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    91ac:	6062      	str	r2, [r4, #4]
	tail->next = node;
    91ae:	6014      	str	r4, [r2, #0]
	list->tail = node;
    91b0:	605c      	str	r4, [r3, #4]
}
    91b2:	e7b2      	b.n	911a <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    91b4:	f7ff ff30 	bl	9018 <next_timeout>

			if (next_time == 0 ||
    91b8:	4603      	mov	r3, r0
    91ba:	b118      	cbz	r0, 91c4 <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    91bc:	4a18      	ldr	r2, [pc, #96]	; (9220 <z_add_timeout+0x1bc>)
    91be:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    91c0:	4282      	cmp	r2, r0
    91c2:	d0ae      	beq.n	9122 <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    91c4:	2100      	movs	r1, #0
    91c6:	4618      	mov	r0, r3
    91c8:	f7fb fc04 	bl	49d4 <sys_clock_set_timeout>
    91cc:	e7a9      	b.n	9122 <z_add_timeout+0xbe>
    91ce:	f8df 803c 	ldr.w	r8, [pc, #60]	; 920c <z_add_timeout+0x1a8>
    91d2:	23b9      	movs	r3, #185	; 0xb9
    91d4:	4642      	mov	r2, r8
    91d6:	4913      	ldr	r1, [pc, #76]	; (9224 <z_add_timeout+0x1c0>)
    91d8:	4809      	ldr	r0, [pc, #36]	; (9200 <z_add_timeout+0x19c>)
    91da:	f000 fe4a 	bl	9e72 <assert_print>
    91de:	490a      	ldr	r1, [pc, #40]	; (9208 <z_add_timeout+0x1a4>)
    91e0:	4811      	ldr	r0, [pc, #68]	; (9228 <z_add_timeout+0x1c4>)
    91e2:	f000 fe46 	bl	9e72 <assert_print>
    91e6:	21b9      	movs	r1, #185	; 0xb9
    91e8:	4640      	mov	r0, r8
    91ea:	f000 fe3b 	bl	9e64 <assert_post_action>
    91ee:	e79d      	b.n	912c <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    91f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    91f4:	4770      	bx	lr
    91f6:	bf00      	nop
    91f8:	0000cbb4 	.word	0x0000cbb4
    91fc:	0000cbd8 	.word	0x0000cbd8
    9200:	0000b180 	.word	0x0000b180
    9204:	0000c9ec 	.word	0x0000c9ec
    9208:	20004f74 	.word	0x20004f74
    920c:	0000b32c 	.word	0x0000b32c
    9210:	0000b38c 	.word	0x0000b38c
    9214:	0000b3a4 	.word	0x0000b3a4
    9218:	200043f0 	.word	0x200043f0
    921c:	200040dc 	.word	0x200040dc
    9220:	20004f28 	.word	0x20004f28
    9224:	0000b35c 	.word	0x0000b35c
    9228:	0000b374 	.word	0x0000b374

0000922c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    922c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9230:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    9232:	2400      	movs	r4, #0
	__asm__ volatile(
    9234:	f04f 0320 	mov.w	r3, #32
    9238:	f3ef 8711 	mrs	r7, BASEPRI
    923c:	f383 8812 	msr	BASEPRI_MAX, r3
    9240:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9244:	481f      	ldr	r0, [pc, #124]	; (92c4 <z_abort_timeout+0x98>)
    9246:	f7fd ff5d 	bl	7104 <z_spin_lock_valid>
    924a:	b128      	cbz	r0, 9258 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    924c:	481d      	ldr	r0, [pc, #116]	; (92c4 <z_abort_timeout+0x98>)
    924e:	f7fd ff79 	bl	7144 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    9252:	f06f 0815 	mvn.w	r8, #21
	return k;
    9256:	e018      	b.n	928a <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9258:	4e1b      	ldr	r6, [pc, #108]	; (92c8 <z_abort_timeout+0x9c>)
    925a:	238e      	movs	r3, #142	; 0x8e
    925c:	4632      	mov	r2, r6
    925e:	491b      	ldr	r1, [pc, #108]	; (92cc <z_abort_timeout+0xa0>)
    9260:	481b      	ldr	r0, [pc, #108]	; (92d0 <z_abort_timeout+0xa4>)
    9262:	f000 fe06 	bl	9e72 <assert_print>
    9266:	4917      	ldr	r1, [pc, #92]	; (92c4 <z_abort_timeout+0x98>)
    9268:	481a      	ldr	r0, [pc, #104]	; (92d4 <z_abort_timeout+0xa8>)
    926a:	f000 fe02 	bl	9e72 <assert_print>
    926e:	218e      	movs	r1, #142	; 0x8e
    9270:	4630      	mov	r0, r6
    9272:	f000 fdf7 	bl	9e64 <assert_post_action>
    9276:	e7e9      	b.n	924c <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9278:	4812      	ldr	r0, [pc, #72]	; (92c4 <z_abort_timeout+0x98>)
    927a:	f7fd ff53 	bl	7124 <z_spin_unlock_valid>
    927e:	b170      	cbz	r0, 929e <z_abort_timeout+0x72>
	__asm__ volatile(
    9280:	f387 8811 	msr	BASEPRI, r7
    9284:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9288:	2401      	movs	r4, #1
    928a:	4626      	mov	r6, r4
    928c:	b9bc      	cbnz	r4, 92be <z_abort_timeout+0x92>
	return node->next != NULL;
    928e:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    9290:	2b00      	cmp	r3, #0
    9292:	d0f1      	beq.n	9278 <z_abort_timeout+0x4c>
			remove_timeout(to);
    9294:	4628      	mov	r0, r5
    9296:	f001 fd0b 	bl	acb0 <remove_timeout>
			ret = 0;
    929a:	46b0      	mov	r8, r6
    929c:	e7ec      	b.n	9278 <z_abort_timeout+0x4c>
    929e:	4c0a      	ldr	r4, [pc, #40]	; (92c8 <z_abort_timeout+0x9c>)
    92a0:	23b9      	movs	r3, #185	; 0xb9
    92a2:	4622      	mov	r2, r4
    92a4:	490c      	ldr	r1, [pc, #48]	; (92d8 <z_abort_timeout+0xac>)
    92a6:	480a      	ldr	r0, [pc, #40]	; (92d0 <z_abort_timeout+0xa4>)
    92a8:	f000 fde3 	bl	9e72 <assert_print>
    92ac:	4905      	ldr	r1, [pc, #20]	; (92c4 <z_abort_timeout+0x98>)
    92ae:	480b      	ldr	r0, [pc, #44]	; (92dc <z_abort_timeout+0xb0>)
    92b0:	f000 fddf 	bl	9e72 <assert_print>
    92b4:	21b9      	movs	r1, #185	; 0xb9
    92b6:	4620      	mov	r0, r4
    92b8:	f000 fdd4 	bl	9e64 <assert_post_action>
    92bc:	e7e0      	b.n	9280 <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    92be:	4640      	mov	r0, r8
    92c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92c4:	20004f74 	.word	0x20004f74
    92c8:	0000b32c 	.word	0x0000b32c
    92cc:	0000b38c 	.word	0x0000b38c
    92d0:	0000b180 	.word	0x0000b180
    92d4:	0000b3a4 	.word	0x0000b3a4
    92d8:	0000b35c 	.word	0x0000b35c
    92dc:	0000b374 	.word	0x0000b374

000092e0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    92e0:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    92e2:	2500      	movs	r5, #0
	__asm__ volatile(
    92e4:	f04f 0320 	mov.w	r3, #32
    92e8:	f3ef 8611 	mrs	r6, BASEPRI
    92ec:	f383 8812 	msr	BASEPRI_MAX, r3
    92f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    92f4:	481c      	ldr	r0, [pc, #112]	; (9368 <z_get_next_timeout_expiry+0x88>)
    92f6:	f7fd ff05 	bl	7104 <z_spin_lock_valid>
    92fa:	b128      	cbz	r0, 9308 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    92fc:	481a      	ldr	r0, [pc, #104]	; (9368 <z_get_next_timeout_expiry+0x88>)
    92fe:	f7fd ff21 	bl	7144 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    9302:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    9306:	e014      	b.n	9332 <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9308:	4c18      	ldr	r4, [pc, #96]	; (936c <z_get_next_timeout_expiry+0x8c>)
    930a:	238e      	movs	r3, #142	; 0x8e
    930c:	4622      	mov	r2, r4
    930e:	4918      	ldr	r1, [pc, #96]	; (9370 <z_get_next_timeout_expiry+0x90>)
    9310:	4818      	ldr	r0, [pc, #96]	; (9374 <z_get_next_timeout_expiry+0x94>)
    9312:	f000 fdae 	bl	9e72 <assert_print>
    9316:	4914      	ldr	r1, [pc, #80]	; (9368 <z_get_next_timeout_expiry+0x88>)
    9318:	4817      	ldr	r0, [pc, #92]	; (9378 <z_get_next_timeout_expiry+0x98>)
    931a:	f000 fdaa 	bl	9e72 <assert_print>
    931e:	218e      	movs	r1, #142	; 0x8e
    9320:	4620      	mov	r0, r4
    9322:	f000 fd9f 	bl	9e64 <assert_post_action>
    9326:	e7e9      	b.n	92fc <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    9328:	f386 8811 	msr	BASEPRI, r6
    932c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9330:	2501      	movs	r5, #1
    9332:	b9bd      	cbnz	r5, 9364 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    9334:	f7ff fe70 	bl	9018 <next_timeout>
    9338:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    933a:	480b      	ldr	r0, [pc, #44]	; (9368 <z_get_next_timeout_expiry+0x88>)
    933c:	f7fd fef2 	bl	7124 <z_spin_unlock_valid>
    9340:	2800      	cmp	r0, #0
    9342:	d1f1      	bne.n	9328 <z_get_next_timeout_expiry+0x48>
    9344:	4d09      	ldr	r5, [pc, #36]	; (936c <z_get_next_timeout_expiry+0x8c>)
    9346:	23b9      	movs	r3, #185	; 0xb9
    9348:	462a      	mov	r2, r5
    934a:	490c      	ldr	r1, [pc, #48]	; (937c <z_get_next_timeout_expiry+0x9c>)
    934c:	4809      	ldr	r0, [pc, #36]	; (9374 <z_get_next_timeout_expiry+0x94>)
    934e:	f000 fd90 	bl	9e72 <assert_print>
    9352:	4905      	ldr	r1, [pc, #20]	; (9368 <z_get_next_timeout_expiry+0x88>)
    9354:	480a      	ldr	r0, [pc, #40]	; (9380 <z_get_next_timeout_expiry+0xa0>)
    9356:	f000 fd8c 	bl	9e72 <assert_print>
    935a:	21b9      	movs	r1, #185	; 0xb9
    935c:	4628      	mov	r0, r5
    935e:	f000 fd81 	bl	9e64 <assert_post_action>
    9362:	e7e1      	b.n	9328 <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    9364:	4620      	mov	r0, r4
    9366:	bd70      	pop	{r4, r5, r6, pc}
    9368:	20004f74 	.word	0x20004f74
    936c:	0000b32c 	.word	0x0000b32c
    9370:	0000b38c 	.word	0x0000b38c
    9374:	0000b180 	.word	0x0000b180
    9378:	0000b3a4 	.word	0x0000b3a4
    937c:	0000b35c 	.word	0x0000b35c
    9380:	0000b374 	.word	0x0000b374

00009384 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    9384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9388:	4606      	mov	r6, r0
    938a:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    938c:	2500      	movs	r5, #0
	__asm__ volatile(
    938e:	f04f 0320 	mov.w	r3, #32
    9392:	f3ef 8711 	mrs	r7, BASEPRI
    9396:	f383 8812 	msr	BASEPRI_MAX, r3
    939a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    939e:	4825      	ldr	r0, [pc, #148]	; (9434 <z_set_timeout_expiry+0xb0>)
    93a0:	f7fd feb0 	bl	7104 <z_spin_lock_valid>
    93a4:	b118      	cbz	r0, 93ae <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    93a6:	4823      	ldr	r0, [pc, #140]	; (9434 <z_set_timeout_expiry+0xb0>)
    93a8:	f7fd fecc 	bl	7144 <z_spin_lock_set_owner>
	return k;
    93ac:	e01e      	b.n	93ec <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    93ae:	4c22      	ldr	r4, [pc, #136]	; (9438 <z_set_timeout_expiry+0xb4>)
    93b0:	238e      	movs	r3, #142	; 0x8e
    93b2:	4622      	mov	r2, r4
    93b4:	4921      	ldr	r1, [pc, #132]	; (943c <z_set_timeout_expiry+0xb8>)
    93b6:	4822      	ldr	r0, [pc, #136]	; (9440 <z_set_timeout_expiry+0xbc>)
    93b8:	f000 fd5b 	bl	9e72 <assert_print>
    93bc:	491d      	ldr	r1, [pc, #116]	; (9434 <z_set_timeout_expiry+0xb0>)
    93be:	4821      	ldr	r0, [pc, #132]	; (9444 <z_set_timeout_expiry+0xc0>)
    93c0:	f000 fd57 	bl	9e72 <assert_print>
    93c4:	218e      	movs	r1, #142	; 0x8e
    93c6:	4620      	mov	r0, r4
    93c8:	f000 fd4c 	bl	9e64 <assert_post_action>
    93cc:	e7eb      	b.n	93a6 <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    93ce:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    93d0:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    93d4:	2801      	cmp	r0, #1
    93d6:	dd00      	ble.n	93da <z_set_timeout_expiry+0x56>
    93d8:	b99c      	cbnz	r4, 9402 <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    93da:	4816      	ldr	r0, [pc, #88]	; (9434 <z_set_timeout_expiry+0xb0>)
    93dc:	f7fd fea2 	bl	7124 <z_spin_unlock_valid>
    93e0:	b1b0      	cbz	r0, 9410 <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    93e2:	f387 8811 	msr	BASEPRI, r7
    93e6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    93ea:	2501      	movs	r5, #1
    93ec:	462c      	mov	r4, r5
    93ee:	b9fd      	cbnz	r5, 9430 <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    93f0:	f7ff fe12 	bl	9018 <next_timeout>
			      || (ticks <= next_to);
    93f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    93f8:	d0e9      	beq.n	93ce <z_set_timeout_expiry+0x4a>
    93fa:	42b0      	cmp	r0, r6
    93fc:	dbe8      	blt.n	93d0 <z_set_timeout_expiry+0x4c>
    93fe:	2401      	movs	r4, #1
    9400:	e7e6      	b.n	93d0 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    9402:	4641      	mov	r1, r8
    9404:	42b0      	cmp	r0, r6
    9406:	bfa8      	it	ge
    9408:	4630      	movge	r0, r6
    940a:	f7fb fae3 	bl	49d4 <sys_clock_set_timeout>
    940e:	e7e4      	b.n	93da <z_set_timeout_expiry+0x56>
    9410:	4c09      	ldr	r4, [pc, #36]	; (9438 <z_set_timeout_expiry+0xb4>)
    9412:	23b9      	movs	r3, #185	; 0xb9
    9414:	4622      	mov	r2, r4
    9416:	490c      	ldr	r1, [pc, #48]	; (9448 <z_set_timeout_expiry+0xc4>)
    9418:	4809      	ldr	r0, [pc, #36]	; (9440 <z_set_timeout_expiry+0xbc>)
    941a:	f000 fd2a 	bl	9e72 <assert_print>
    941e:	4905      	ldr	r1, [pc, #20]	; (9434 <z_set_timeout_expiry+0xb0>)
    9420:	480a      	ldr	r0, [pc, #40]	; (944c <z_set_timeout_expiry+0xc8>)
    9422:	f000 fd26 	bl	9e72 <assert_print>
    9426:	21b9      	movs	r1, #185	; 0xb9
    9428:	4620      	mov	r0, r4
    942a:	f000 fd1b 	bl	9e64 <assert_post_action>
    942e:	e7d8      	b.n	93e2 <z_set_timeout_expiry+0x5e>
		}
	}
}
    9430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9434:	20004f74 	.word	0x20004f74
    9438:	0000b32c 	.word	0x0000b32c
    943c:	0000b38c 	.word	0x0000b38c
    9440:	0000b180 	.word	0x0000b180
    9444:	0000b3a4 	.word	0x0000b3a4
    9448:	0000b35c 	.word	0x0000b35c
    944c:	0000b374 	.word	0x0000b374

00009450 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    9450:	b570      	push	{r4, r5, r6, lr}
    9452:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    9454:	f7fe fdbe 	bl	7fd4 <z_time_slice>
	__asm__ volatile(
    9458:	f04f 0320 	mov.w	r3, #32
    945c:	f3ef 8511 	mrs	r5, BASEPRI
    9460:	f383 8812 	msr	BASEPRI_MAX, r3
    9464:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9468:	4854      	ldr	r0, [pc, #336]	; (95bc <sys_clock_announce+0x16c>)
    946a:	f7fd fe4b 	bl	7104 <z_spin_lock_valid>
    946e:	b128      	cbz	r0, 947c <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    9470:	4852      	ldr	r0, [pc, #328]	; (95bc <sys_clock_announce+0x16c>)
    9472:	f7fd fe67 	bl	7144 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    9476:	4b52      	ldr	r3, [pc, #328]	; (95c0 <sys_clock_announce+0x170>)
    9478:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    947a:	e022      	b.n	94c2 <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    947c:	4e51      	ldr	r6, [pc, #324]	; (95c4 <sys_clock_announce+0x174>)
    947e:	238e      	movs	r3, #142	; 0x8e
    9480:	4632      	mov	r2, r6
    9482:	4951      	ldr	r1, [pc, #324]	; (95c8 <sys_clock_announce+0x178>)
    9484:	4851      	ldr	r0, [pc, #324]	; (95cc <sys_clock_announce+0x17c>)
    9486:	f000 fcf4 	bl	9e72 <assert_print>
    948a:	494c      	ldr	r1, [pc, #304]	; (95bc <sys_clock_announce+0x16c>)
    948c:	4850      	ldr	r0, [pc, #320]	; (95d0 <sys_clock_announce+0x180>)
    948e:	f000 fcf0 	bl	9e72 <assert_print>
    9492:	218e      	movs	r1, #142	; 0x8e
    9494:	4630      	mov	r0, r6
    9496:	f000 fce5 	bl	9e64 <assert_post_action>
    949a:	e7e9      	b.n	9470 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    949c:	4e49      	ldr	r6, [pc, #292]	; (95c4 <sys_clock_announce+0x174>)
    949e:	23b9      	movs	r3, #185	; 0xb9
    94a0:	4632      	mov	r2, r6
    94a2:	494c      	ldr	r1, [pc, #304]	; (95d4 <sys_clock_announce+0x184>)
    94a4:	4849      	ldr	r0, [pc, #292]	; (95cc <sys_clock_announce+0x17c>)
    94a6:	f000 fce4 	bl	9e72 <assert_print>
    94aa:	4944      	ldr	r1, [pc, #272]	; (95bc <sys_clock_announce+0x16c>)
    94ac:	484a      	ldr	r0, [pc, #296]	; (95d8 <sys_clock_announce+0x188>)
    94ae:	f000 fce0 	bl	9e72 <assert_print>
    94b2:	21b9      	movs	r1, #185	; 0xb9
    94b4:	4630      	mov	r0, r6
    94b6:	f000 fcd5 	bl	9e64 <assert_post_action>
    94ba:	e027      	b.n	950c <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    94bc:	483f      	ldr	r0, [pc, #252]	; (95bc <sys_clock_announce+0x16c>)
    94be:	f7fd fe41 	bl	7144 <z_spin_lock_set_owner>
    94c2:	f7ff fd87 	bl	8fd4 <first>
    94c6:	4604      	mov	r4, r0
    94c8:	2800      	cmp	r0, #0
    94ca:	d043      	beq.n	9554 <sys_clock_announce+0x104>
    94cc:	6902      	ldr	r2, [r0, #16]
    94ce:	6941      	ldr	r1, [r0, #20]
    94d0:	4b3b      	ldr	r3, [pc, #236]	; (95c0 <sys_clock_announce+0x170>)
    94d2:	681b      	ldr	r3, [r3, #0]
    94d4:	17d8      	asrs	r0, r3, #31
    94d6:	4293      	cmp	r3, r2
    94d8:	eb70 0101 	sbcs.w	r1, r0, r1
    94dc:	db3a      	blt.n	9554 <sys_clock_announce+0x104>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    94de:	483f      	ldr	r0, [pc, #252]	; (95dc <sys_clock_announce+0x18c>)
    94e0:	6801      	ldr	r1, [r0, #0]
    94e2:	6846      	ldr	r6, [r0, #4]
    94e4:	1889      	adds	r1, r1, r2
    94e6:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    94ea:	6001      	str	r1, [r0, #0]
    94ec:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    94ee:	1a9b      	subs	r3, r3, r2
    94f0:	4a33      	ldr	r2, [pc, #204]	; (95c0 <sys_clock_announce+0x170>)
    94f2:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    94f4:	2200      	movs	r2, #0
    94f6:	2300      	movs	r3, #0
    94f8:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    94fc:	4620      	mov	r0, r4
    94fe:	f001 fbd7 	bl	acb0 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9502:	482e      	ldr	r0, [pc, #184]	; (95bc <sys_clock_announce+0x16c>)
    9504:	f7fd fe0e 	bl	7124 <z_spin_unlock_valid>
    9508:	2800      	cmp	r0, #0
    950a:	d0c7      	beq.n	949c <sys_clock_announce+0x4c>
	__asm__ volatile(
    950c:	f385 8811 	msr	BASEPRI, r5
    9510:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    9514:	68a3      	ldr	r3, [r4, #8]
    9516:	4620      	mov	r0, r4
    9518:	4798      	blx	r3
	__asm__ volatile(
    951a:	f04f 0320 	mov.w	r3, #32
    951e:	f3ef 8511 	mrs	r5, BASEPRI
    9522:	f383 8812 	msr	BASEPRI_MAX, r3
    9526:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    952a:	4824      	ldr	r0, [pc, #144]	; (95bc <sys_clock_announce+0x16c>)
    952c:	f7fd fdea 	bl	7104 <z_spin_lock_valid>
    9530:	2800      	cmp	r0, #0
    9532:	d1c3      	bne.n	94bc <sys_clock_announce+0x6c>
    9534:	4c23      	ldr	r4, [pc, #140]	; (95c4 <sys_clock_announce+0x174>)
    9536:	238e      	movs	r3, #142	; 0x8e
    9538:	4622      	mov	r2, r4
    953a:	4923      	ldr	r1, [pc, #140]	; (95c8 <sys_clock_announce+0x178>)
    953c:	4823      	ldr	r0, [pc, #140]	; (95cc <sys_clock_announce+0x17c>)
    953e:	f000 fc98 	bl	9e72 <assert_print>
    9542:	491e      	ldr	r1, [pc, #120]	; (95bc <sys_clock_announce+0x16c>)
    9544:	4822      	ldr	r0, [pc, #136]	; (95d0 <sys_clock_announce+0x180>)
    9546:	f000 fc94 	bl	9e72 <assert_print>
    954a:	218e      	movs	r1, #142	; 0x8e
    954c:	4620      	mov	r0, r4
    954e:	f000 fc89 	bl	9e64 <assert_post_action>
    9552:	e7b3      	b.n	94bc <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    9554:	b144      	cbz	r4, 9568 <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    9556:	4b1a      	ldr	r3, [pc, #104]	; (95c0 <sys_clock_announce+0x170>)
    9558:	6819      	ldr	r1, [r3, #0]
    955a:	6923      	ldr	r3, [r4, #16]
    955c:	6962      	ldr	r2, [r4, #20]
    955e:	1a5b      	subs	r3, r3, r1
    9560:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    9564:	6123      	str	r3, [r4, #16]
    9566:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    9568:	4a1c      	ldr	r2, [pc, #112]	; (95dc <sys_clock_announce+0x18c>)
    956a:	4e15      	ldr	r6, [pc, #84]	; (95c0 <sys_clock_announce+0x170>)
    956c:	6830      	ldr	r0, [r6, #0]
    956e:	6813      	ldr	r3, [r2, #0]
    9570:	6851      	ldr	r1, [r2, #4]
    9572:	181b      	adds	r3, r3, r0
    9574:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    9578:	6013      	str	r3, [r2, #0]
    957a:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    957c:	2400      	movs	r4, #0
    957e:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    9580:	f7ff fd4a 	bl	9018 <next_timeout>
    9584:	4621      	mov	r1, r4
    9586:	f7fb fa25 	bl	49d4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    958a:	480c      	ldr	r0, [pc, #48]	; (95bc <sys_clock_announce+0x16c>)
    958c:	f7fd fdca 	bl	7124 <z_spin_unlock_valid>
    9590:	b120      	cbz	r0, 959c <sys_clock_announce+0x14c>
	__asm__ volatile(
    9592:	f385 8811 	msr	BASEPRI, r5
    9596:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    959a:	bd70      	pop	{r4, r5, r6, pc}
    959c:	4c09      	ldr	r4, [pc, #36]	; (95c4 <sys_clock_announce+0x174>)
    959e:	23b9      	movs	r3, #185	; 0xb9
    95a0:	4622      	mov	r2, r4
    95a2:	490c      	ldr	r1, [pc, #48]	; (95d4 <sys_clock_announce+0x184>)
    95a4:	4809      	ldr	r0, [pc, #36]	; (95cc <sys_clock_announce+0x17c>)
    95a6:	f000 fc64 	bl	9e72 <assert_print>
    95aa:	4904      	ldr	r1, [pc, #16]	; (95bc <sys_clock_announce+0x16c>)
    95ac:	480a      	ldr	r0, [pc, #40]	; (95d8 <sys_clock_announce+0x188>)
    95ae:	f000 fc60 	bl	9e72 <assert_print>
    95b2:	21b9      	movs	r1, #185	; 0xb9
    95b4:	4620      	mov	r0, r4
    95b6:	f000 fc55 	bl	9e64 <assert_post_action>
    95ba:	e7ea      	b.n	9592 <sys_clock_announce+0x142>
    95bc:	20004f74 	.word	0x20004f74
    95c0:	20004f70 	.word	0x20004f70
    95c4:	0000b32c 	.word	0x0000b32c
    95c8:	0000b38c 	.word	0x0000b38c
    95cc:	0000b180 	.word	0x0000b180
    95d0:	0000b3a4 	.word	0x0000b3a4
    95d4:	0000b35c 	.word	0x0000b35c
    95d8:	0000b374 	.word	0x0000b374
    95dc:	200043f0 	.word	0x200043f0

000095e0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    95e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    95e2:	2600      	movs	r6, #0
	__asm__ volatile(
    95e4:	f04f 0320 	mov.w	r3, #32
    95e8:	f3ef 8711 	mrs	r7, BASEPRI
    95ec:	f383 8812 	msr	BASEPRI_MAX, r3
    95f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    95f4:	481f      	ldr	r0, [pc, #124]	; (9674 <sys_clock_tick_get+0x94>)
    95f6:	f7fd fd85 	bl	7104 <z_spin_lock_valid>
    95fa:	b128      	cbz	r0, 9608 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    95fc:	481d      	ldr	r0, [pc, #116]	; (9674 <sys_clock_tick_get+0x94>)
    95fe:	f7fd fda1 	bl	7144 <z_spin_lock_set_owner>
	uint64_t t = 0U;
    9602:	2400      	movs	r4, #0
    9604:	4625      	mov	r5, r4
	return k;
    9606:	e014      	b.n	9632 <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9608:	4c1b      	ldr	r4, [pc, #108]	; (9678 <sys_clock_tick_get+0x98>)
    960a:	238e      	movs	r3, #142	; 0x8e
    960c:	4622      	mov	r2, r4
    960e:	491b      	ldr	r1, [pc, #108]	; (967c <sys_clock_tick_get+0x9c>)
    9610:	481b      	ldr	r0, [pc, #108]	; (9680 <sys_clock_tick_get+0xa0>)
    9612:	f000 fc2e 	bl	9e72 <assert_print>
    9616:	4917      	ldr	r1, [pc, #92]	; (9674 <sys_clock_tick_get+0x94>)
    9618:	481a      	ldr	r0, [pc, #104]	; (9684 <sys_clock_tick_get+0xa4>)
    961a:	f000 fc2a 	bl	9e72 <assert_print>
    961e:	218e      	movs	r1, #142	; 0x8e
    9620:	4620      	mov	r0, r4
    9622:	f000 fc1f 	bl	9e64 <assert_post_action>
    9626:	e7e9      	b.n	95fc <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    9628:	f387 8811 	msr	BASEPRI, r7
    962c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9630:	2601      	movs	r6, #1
    9632:	b9e6      	cbnz	r6, 966e <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    9634:	f7fb fa00 	bl	4a38 <sys_clock_elapsed>
    9638:	4b13      	ldr	r3, [pc, #76]	; (9688 <sys_clock_tick_get+0xa8>)
    963a:	681c      	ldr	r4, [r3, #0]
    963c:	685d      	ldr	r5, [r3, #4]
    963e:	1904      	adds	r4, r0, r4
    9640:	f145 0500 	adc.w	r5, r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9644:	480b      	ldr	r0, [pc, #44]	; (9674 <sys_clock_tick_get+0x94>)
    9646:	f7fd fd6d 	bl	7124 <z_spin_unlock_valid>
    964a:	2800      	cmp	r0, #0
    964c:	d1ec      	bne.n	9628 <sys_clock_tick_get+0x48>
    964e:	4e0a      	ldr	r6, [pc, #40]	; (9678 <sys_clock_tick_get+0x98>)
    9650:	23b9      	movs	r3, #185	; 0xb9
    9652:	4632      	mov	r2, r6
    9654:	490d      	ldr	r1, [pc, #52]	; (968c <sys_clock_tick_get+0xac>)
    9656:	480a      	ldr	r0, [pc, #40]	; (9680 <sys_clock_tick_get+0xa0>)
    9658:	f000 fc0b 	bl	9e72 <assert_print>
    965c:	4905      	ldr	r1, [pc, #20]	; (9674 <sys_clock_tick_get+0x94>)
    965e:	480c      	ldr	r0, [pc, #48]	; (9690 <sys_clock_tick_get+0xb0>)
    9660:	f000 fc07 	bl	9e72 <assert_print>
    9664:	21b9      	movs	r1, #185	; 0xb9
    9666:	4630      	mov	r0, r6
    9668:	f000 fbfc 	bl	9e64 <assert_post_action>
    966c:	e7dc      	b.n	9628 <sys_clock_tick_get+0x48>
	}
	return t;
}
    966e:	4620      	mov	r0, r4
    9670:	4629      	mov	r1, r5
    9672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9674:	20004f74 	.word	0x20004f74
    9678:	0000b32c 	.word	0x0000b32c
    967c:	0000b38c 	.word	0x0000b38c
    9680:	0000b180 	.word	0x0000b180
    9684:	0000b3a4 	.word	0x0000b3a4
    9688:	200043f0 	.word	0x200043f0
    968c:	0000b35c 	.word	0x0000b35c
    9690:	0000b374 	.word	0x0000b374

00009694 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    9694:	4b01      	ldr	r3, [pc, #4]	; (969c <k_thread_system_pool_assign+0x8>)
    9696:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    969a:	4770      	bx	lr
    969c:	20004158 	.word	0x20004158

000096a0 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    96a0:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    96a2:	4a03      	ldr	r2, [pc, #12]	; (96b0 <boot_banner+0x10>)
    96a4:	4903      	ldr	r1, [pc, #12]	; (96b4 <boot_banner+0x14>)
    96a6:	4804      	ldr	r0, [pc, #16]	; (96b8 <boot_banner+0x18>)
    96a8:	f000 fa5e 	bl	9b68 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    96ac:	bd08      	pop	{r3, pc}
    96ae:	bf00      	nop
    96b0:	0000c08c 	.word	0x0000c08c
    96b4:	0000cbf8 	.word	0x0000cbf8
    96b8:	0000cc08 	.word	0x0000cc08

000096bc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    96bc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    96be:	4c0f      	ldr	r4, [pc, #60]	; (96fc <statics_init+0x40>)
    96c0:	e008      	b.n	96d4 <statics_init+0x18>
    96c2:	4b0f      	ldr	r3, [pc, #60]	; (9700 <statics_init+0x44>)
    96c4:	429c      	cmp	r4, r3
    96c6:	d217      	bcs.n	96f8 <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    96c8:	68a2      	ldr	r2, [r4, #8]
    96ca:	6861      	ldr	r1, [r4, #4]
    96cc:	4620      	mov	r0, r4
    96ce:	f001 fb14 	bl	acfa <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    96d2:	3418      	adds	r4, #24
    96d4:	4b0a      	ldr	r3, [pc, #40]	; (9700 <statics_init+0x44>)
    96d6:	429c      	cmp	r4, r3
    96d8:	d9f3      	bls.n	96c2 <statics_init+0x6>
    96da:	4d0a      	ldr	r5, [pc, #40]	; (9704 <statics_init+0x48>)
    96dc:	2318      	movs	r3, #24
    96de:	462a      	mov	r2, r5
    96e0:	4909      	ldr	r1, [pc, #36]	; (9708 <statics_init+0x4c>)
    96e2:	480a      	ldr	r0, [pc, #40]	; (970c <statics_init+0x50>)
    96e4:	f000 fbc5 	bl	9e72 <assert_print>
    96e8:	4809      	ldr	r0, [pc, #36]	; (9710 <statics_init+0x54>)
    96ea:	f000 fbc2 	bl	9e72 <assert_print>
    96ee:	2118      	movs	r1, #24
    96f0:	4628      	mov	r0, r5
    96f2:	f000 fbb7 	bl	9e64 <assert_post_action>
    96f6:	e7e4      	b.n	96c2 <statics_init+0x6>
		}
	}
	return 0;
}
    96f8:	2000      	movs	r0, #0
    96fa:	bd38      	pop	{r3, r4, r5, pc}
    96fc:	20004158 	.word	0x20004158
    9700:	20004170 	.word	0x20004170
    9704:	0000cc30 	.word	0x0000cc30
    9708:	0000cc54 	.word	0x0000cc54
    970c:	0000b180 	.word	0x0000b180
    9710:	0000c778 	.word	0x0000c778

00009714 <nrf_cc3xx_platform_init_no_rng>:
    9714:	b510      	push	{r4, lr}
    9716:	4c0a      	ldr	r4, [pc, #40]	; (9740 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    9718:	6823      	ldr	r3, [r4, #0]
    971a:	b11b      	cbz	r3, 9724 <nrf_cc3xx_platform_init_no_rng+0x10>
    971c:	2301      	movs	r3, #1
    971e:	6023      	str	r3, [r4, #0]
    9720:	2000      	movs	r0, #0
    9722:	bd10      	pop	{r4, pc}
    9724:	f000 f8ce 	bl	98c4 <CC_LibInitNoRng>
    9728:	2800      	cmp	r0, #0
    972a:	d0f7      	beq.n	971c <nrf_cc3xx_platform_init_no_rng+0x8>
    972c:	3801      	subs	r0, #1
    972e:	2806      	cmp	r0, #6
    9730:	d803      	bhi.n	973a <nrf_cc3xx_platform_init_no_rng+0x26>
    9732:	4b04      	ldr	r3, [pc, #16]	; (9744 <nrf_cc3xx_platform_init_no_rng+0x30>)
    9734:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    9738:	bd10      	pop	{r4, pc}
    973a:	4803      	ldr	r0, [pc, #12]	; (9748 <nrf_cc3xx_platform_init_no_rng+0x34>)
    973c:	bd10      	pop	{r4, pc}
    973e:	bf00      	nop
    9740:	20004f78 	.word	0x20004f78
    9744:	0000cc6c 	.word	0x0000cc6c
    9748:	ffff8ffe 	.word	0xffff8ffe

0000974c <nrf_cc3xx_platform_abort>:
    974c:	f3bf 8f4f 	dsb	sy
    9750:	4905      	ldr	r1, [pc, #20]	; (9768 <nrf_cc3xx_platform_abort+0x1c>)
    9752:	4b06      	ldr	r3, [pc, #24]	; (976c <nrf_cc3xx_platform_abort+0x20>)
    9754:	68ca      	ldr	r2, [r1, #12]
    9756:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    975a:	4313      	orrs	r3, r2
    975c:	60cb      	str	r3, [r1, #12]
    975e:	f3bf 8f4f 	dsb	sy
    9762:	bf00      	nop
    9764:	e7fd      	b.n	9762 <nrf_cc3xx_platform_abort+0x16>
    9766:	bf00      	nop
    9768:	e000ed00 	.word	0xe000ed00
    976c:	05fa0004 	.word	0x05fa0004

00009770 <CC_PalAbort>:
    9770:	b410      	push	{r4}
    9772:	4b09      	ldr	r3, [pc, #36]	; (9798 <CC_PalAbort+0x28>)
    9774:	4909      	ldr	r1, [pc, #36]	; (979c <CC_PalAbort+0x2c>)
    9776:	4c0a      	ldr	r4, [pc, #40]	; (97a0 <CC_PalAbort+0x30>)
    9778:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    977c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    9780:	6849      	ldr	r1, [r1, #4]
    9782:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    9786:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    978a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    978e:	2300      	movs	r3, #0
    9790:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    9794:	bc10      	pop	{r4}
    9796:	4708      	bx	r1
    9798:	5002b000 	.word	0x5002b000
    979c:	200040e4 	.word	0x200040e4
    97a0:	5002a000 	.word	0x5002a000

000097a4 <nrf_cc3xx_platform_set_abort>:
    97a4:	e9d0 1200 	ldrd	r1, r2, [r0]
    97a8:	4b01      	ldr	r3, [pc, #4]	; (97b0 <nrf_cc3xx_platform_set_abort+0xc>)
    97aa:	e9c3 1200 	strd	r1, r2, [r3]
    97ae:	4770      	bx	lr
    97b0:	200040e4 	.word	0x200040e4

000097b4 <mutex_free>:
    97b4:	b510      	push	{r4, lr}
    97b6:	4604      	mov	r4, r0
    97b8:	b130      	cbz	r0, 97c8 <mutex_free+0x14>
    97ba:	6863      	ldr	r3, [r4, #4]
    97bc:	06db      	lsls	r3, r3, #27
    97be:	d502      	bpl.n	97c6 <mutex_free+0x12>
    97c0:	2300      	movs	r3, #0
    97c2:	6023      	str	r3, [r4, #0]
    97c4:	6063      	str	r3, [r4, #4]
    97c6:	bd10      	pop	{r4, pc}
    97c8:	4b02      	ldr	r3, [pc, #8]	; (97d4 <mutex_free+0x20>)
    97ca:	4803      	ldr	r0, [pc, #12]	; (97d8 <mutex_free+0x24>)
    97cc:	685b      	ldr	r3, [r3, #4]
    97ce:	4798      	blx	r3
    97d0:	e7f3      	b.n	97ba <mutex_free+0x6>
    97d2:	bf00      	nop
    97d4:	200040e4 	.word	0x200040e4
    97d8:	0000cc88 	.word	0x0000cc88

000097dc <mutex_lock>:
    97dc:	b1b0      	cbz	r0, 980c <mutex_lock+0x30>
    97de:	6843      	ldr	r3, [r0, #4]
    97e0:	b193      	cbz	r3, 9808 <mutex_lock+0x2c>
    97e2:	06db      	lsls	r3, r3, #27
    97e4:	d50e      	bpl.n	9804 <mutex_lock+0x28>
    97e6:	2301      	movs	r3, #1
    97e8:	e850 2f00 	ldrex	r2, [r0]
    97ec:	4619      	mov	r1, r3
    97ee:	e840 1c00 	strex	ip, r1, [r0]
    97f2:	f09c 0f00 	teq	ip, #0
    97f6:	d1f7      	bne.n	97e8 <mutex_lock+0xc>
    97f8:	2a01      	cmp	r2, #1
    97fa:	d0f5      	beq.n	97e8 <mutex_lock+0xc>
    97fc:	f3bf 8f5f 	dmb	sy
    9800:	2000      	movs	r0, #0
    9802:	4770      	bx	lr
    9804:	4803      	ldr	r0, [pc, #12]	; (9814 <mutex_lock+0x38>)
    9806:	4770      	bx	lr
    9808:	4803      	ldr	r0, [pc, #12]	; (9818 <mutex_lock+0x3c>)
    980a:	4770      	bx	lr
    980c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    9810:	4770      	bx	lr
    9812:	bf00      	nop
    9814:	ffff8fe9 	.word	0xffff8fe9
    9818:	ffff8fea 	.word	0xffff8fea

0000981c <mutex_unlock>:
    981c:	b168      	cbz	r0, 983a <mutex_unlock+0x1e>
    981e:	6843      	ldr	r3, [r0, #4]
    9820:	b13b      	cbz	r3, 9832 <mutex_unlock+0x16>
    9822:	06db      	lsls	r3, r3, #27
    9824:	d507      	bpl.n	9836 <mutex_unlock+0x1a>
    9826:	f3bf 8f5f 	dmb	sy
    982a:	2300      	movs	r3, #0
    982c:	6003      	str	r3, [r0, #0]
    982e:	4618      	mov	r0, r3
    9830:	4770      	bx	lr
    9832:	4803      	ldr	r0, [pc, #12]	; (9840 <mutex_unlock+0x24>)
    9834:	4770      	bx	lr
    9836:	4803      	ldr	r0, [pc, #12]	; (9844 <mutex_unlock+0x28>)
    9838:	4770      	bx	lr
    983a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    983e:	4770      	bx	lr
    9840:	ffff8fea 	.word	0xffff8fea
    9844:	ffff8fe9 	.word	0xffff8fe9

00009848 <mutex_init>:
    9848:	b510      	push	{r4, lr}
    984a:	4604      	mov	r4, r0
    984c:	b120      	cbz	r0, 9858 <mutex_init+0x10>
    984e:	2200      	movs	r2, #0
    9850:	2311      	movs	r3, #17
    9852:	6022      	str	r2, [r4, #0]
    9854:	6063      	str	r3, [r4, #4]
    9856:	bd10      	pop	{r4, pc}
    9858:	4801      	ldr	r0, [pc, #4]	; (9860 <mutex_init+0x18>)
    985a:	f7ff ff89 	bl	9770 <CC_PalAbort>
    985e:	e7f6      	b.n	984e <mutex_init+0x6>
    9860:	0000ccb0 	.word	0x0000ccb0

00009864 <nrf_cc3xx_platform_set_mutexes>:
    9864:	b570      	push	{r4, r5, r6, lr}
    9866:	e9d0 2300 	ldrd	r2, r3, [r0]
    986a:	4c13      	ldr	r4, [pc, #76]	; (98b8 <nrf_cc3xx_platform_set_mutexes+0x54>)
    986c:	4d13      	ldr	r5, [pc, #76]	; (98bc <nrf_cc3xx_platform_set_mutexes+0x58>)
    986e:	6063      	str	r3, [r4, #4]
    9870:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    9874:	e9c4 3002 	strd	r3, r0, [r4, #8]
    9878:	6022      	str	r2, [r4, #0]
    987a:	4b11      	ldr	r3, [pc, #68]	; (98c0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    987c:	6808      	ldr	r0, [r1, #0]
    987e:	6018      	str	r0, [r3, #0]
    9880:	6848      	ldr	r0, [r1, #4]
    9882:	6058      	str	r0, [r3, #4]
    9884:	6888      	ldr	r0, [r1, #8]
    9886:	6098      	str	r0, [r3, #8]
    9888:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    988c:	60d8      	str	r0, [r3, #12]
    988e:	6119      	str	r1, [r3, #16]
    9890:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    9894:	06db      	lsls	r3, r3, #27
    9896:	d50d      	bpl.n	98b4 <nrf_cc3xx_platform_set_mutexes+0x50>
    9898:	2300      	movs	r3, #0
    989a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    989e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    98a2:	f505 708a 	add.w	r0, r5, #276	; 0x114
    98a6:	4790      	blx	r2
    98a8:	6823      	ldr	r3, [r4, #0]
    98aa:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    98ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    98b2:	4718      	bx	r3
    98b4:	bd70      	pop	{r4, r5, r6, pc}
    98b6:	bf00      	nop
    98b8:	200040f4 	.word	0x200040f4
    98bc:	20004f90 	.word	0x20004f90
    98c0:	20004104 	.word	0x20004104

000098c4 <CC_LibInitNoRng>:
    98c4:	b538      	push	{r3, r4, r5, lr}
    98c6:	f000 f82f 	bl	9928 <CC_HalInit>
    98ca:	b120      	cbz	r0, 98d6 <CC_LibInitNoRng+0x12>
    98cc:	2403      	movs	r4, #3
    98ce:	f000 f863 	bl	9998 <CC_PalTerminate>
    98d2:	4620      	mov	r0, r4
    98d4:	bd38      	pop	{r3, r4, r5, pc}
    98d6:	f000 f831 	bl	993c <CC_PalInit>
    98da:	b998      	cbnz	r0, 9904 <CC_LibInitNoRng+0x40>
    98dc:	f000 f8ac 	bl	9a38 <CC_PalPowerSaveModeSelect>
    98e0:	b998      	cbnz	r0, 990a <CC_LibInitNoRng+0x46>
    98e2:	4d0f      	ldr	r5, [pc, #60]	; (9920 <CC_LibInitNoRng+0x5c>)
    98e4:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    98e8:	0e1b      	lsrs	r3, r3, #24
    98ea:	2bf0      	cmp	r3, #240	; 0xf0
    98ec:	d108      	bne.n	9900 <CC_LibInitNoRng+0x3c>
    98ee:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    98f2:	4b0c      	ldr	r3, [pc, #48]	; (9924 <CC_LibInitNoRng+0x60>)
    98f4:	429a      	cmp	r2, r3
    98f6:	d00a      	beq.n	990e <CC_LibInitNoRng+0x4a>
    98f8:	2407      	movs	r4, #7
    98fa:	f000 f817 	bl	992c <CC_HalTerminate>
    98fe:	e7e6      	b.n	98ce <CC_LibInitNoRng+0xa>
    9900:	2406      	movs	r4, #6
    9902:	e7fa      	b.n	98fa <CC_LibInitNoRng+0x36>
    9904:	2404      	movs	r4, #4
    9906:	4620      	mov	r0, r4
    9908:	bd38      	pop	{r3, r4, r5, pc}
    990a:	2400      	movs	r4, #0
    990c:	e7f5      	b.n	98fa <CC_LibInitNoRng+0x36>
    990e:	2001      	movs	r0, #1
    9910:	f000 f892 	bl	9a38 <CC_PalPowerSaveModeSelect>
    9914:	4604      	mov	r4, r0
    9916:	2800      	cmp	r0, #0
    9918:	d1f7      	bne.n	990a <CC_LibInitNoRng+0x46>
    991a:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    991e:	e7d8      	b.n	98d2 <CC_LibInitNoRng+0xe>
    9920:	5002b000 	.word	0x5002b000
    9924:	20e00000 	.word	0x20e00000

00009928 <CC_HalInit>:
    9928:	2000      	movs	r0, #0
    992a:	4770      	bx	lr

0000992c <CC_HalTerminate>:
    992c:	2000      	movs	r0, #0
    992e:	4770      	bx	lr

00009930 <CC_HalMaskInterrupt>:
    9930:	4b01      	ldr	r3, [pc, #4]	; (9938 <CC_HalMaskInterrupt+0x8>)
    9932:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    9936:	4770      	bx	lr
    9938:	5002b000 	.word	0x5002b000

0000993c <CC_PalInit>:
    993c:	b510      	push	{r4, lr}
    993e:	4811      	ldr	r0, [pc, #68]	; (9984 <CC_PalInit+0x48>)
    9940:	f000 f848 	bl	99d4 <CC_PalMutexCreate>
    9944:	b100      	cbz	r0, 9948 <CC_PalInit+0xc>
    9946:	bd10      	pop	{r4, pc}
    9948:	480f      	ldr	r0, [pc, #60]	; (9988 <CC_PalInit+0x4c>)
    994a:	f000 f843 	bl	99d4 <CC_PalMutexCreate>
    994e:	2800      	cmp	r0, #0
    9950:	d1f9      	bne.n	9946 <CC_PalInit+0xa>
    9952:	4c0e      	ldr	r4, [pc, #56]	; (998c <CC_PalInit+0x50>)
    9954:	4620      	mov	r0, r4
    9956:	f000 f83d 	bl	99d4 <CC_PalMutexCreate>
    995a:	2800      	cmp	r0, #0
    995c:	d1f3      	bne.n	9946 <CC_PalInit+0xa>
    995e:	4b0c      	ldr	r3, [pc, #48]	; (9990 <CC_PalInit+0x54>)
    9960:	480c      	ldr	r0, [pc, #48]	; (9994 <CC_PalInit+0x58>)
    9962:	601c      	str	r4, [r3, #0]
    9964:	f000 f836 	bl	99d4 <CC_PalMutexCreate>
    9968:	4601      	mov	r1, r0
    996a:	2800      	cmp	r0, #0
    996c:	d1eb      	bne.n	9946 <CC_PalInit+0xa>
    996e:	f000 f82d 	bl	99cc <CC_PalDmaInit>
    9972:	4604      	mov	r4, r0
    9974:	b108      	cbz	r0, 997a <CC_PalInit+0x3e>
    9976:	4620      	mov	r0, r4
    9978:	bd10      	pop	{r4, pc}
    997a:	f000 f83f 	bl	99fc <CC_PalPowerSaveModeInit>
    997e:	4620      	mov	r0, r4
    9980:	e7fa      	b.n	9978 <CC_PalInit+0x3c>
    9982:	bf00      	nop
    9984:	2000413c 	.word	0x2000413c
    9988:	20004130 	.word	0x20004130
    998c:	20004138 	.word	0x20004138
    9990:	20004140 	.word	0x20004140
    9994:	20004134 	.word	0x20004134

00009998 <CC_PalTerminate>:
    9998:	b508      	push	{r3, lr}
    999a:	4808      	ldr	r0, [pc, #32]	; (99bc <CC_PalTerminate+0x24>)
    999c:	f000 f824 	bl	99e8 <CC_PalMutexDestroy>
    99a0:	4807      	ldr	r0, [pc, #28]	; (99c0 <CC_PalTerminate+0x28>)
    99a2:	f000 f821 	bl	99e8 <CC_PalMutexDestroy>
    99a6:	4807      	ldr	r0, [pc, #28]	; (99c4 <CC_PalTerminate+0x2c>)
    99a8:	f000 f81e 	bl	99e8 <CC_PalMutexDestroy>
    99ac:	4806      	ldr	r0, [pc, #24]	; (99c8 <CC_PalTerminate+0x30>)
    99ae:	f000 f81b 	bl	99e8 <CC_PalMutexDestroy>
    99b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    99b6:	f000 b80b 	b.w	99d0 <CC_PalDmaTerminate>
    99ba:	bf00      	nop
    99bc:	2000413c 	.word	0x2000413c
    99c0:	20004130 	.word	0x20004130
    99c4:	20004138 	.word	0x20004138
    99c8:	20004134 	.word	0x20004134

000099cc <CC_PalDmaInit>:
    99cc:	2000      	movs	r0, #0
    99ce:	4770      	bx	lr

000099d0 <CC_PalDmaTerminate>:
    99d0:	4770      	bx	lr
    99d2:	bf00      	nop

000099d4 <CC_PalMutexCreate>:
    99d4:	b508      	push	{r3, lr}
    99d6:	4b03      	ldr	r3, [pc, #12]	; (99e4 <CC_PalMutexCreate+0x10>)
    99d8:	6802      	ldr	r2, [r0, #0]
    99da:	681b      	ldr	r3, [r3, #0]
    99dc:	6810      	ldr	r0, [r2, #0]
    99de:	4798      	blx	r3
    99e0:	2000      	movs	r0, #0
    99e2:	bd08      	pop	{r3, pc}
    99e4:	200040f4 	.word	0x200040f4

000099e8 <CC_PalMutexDestroy>:
    99e8:	b508      	push	{r3, lr}
    99ea:	4b03      	ldr	r3, [pc, #12]	; (99f8 <CC_PalMutexDestroy+0x10>)
    99ec:	6802      	ldr	r2, [r0, #0]
    99ee:	685b      	ldr	r3, [r3, #4]
    99f0:	6810      	ldr	r0, [r2, #0]
    99f2:	4798      	blx	r3
    99f4:	2000      	movs	r0, #0
    99f6:	bd08      	pop	{r3, pc}
    99f8:	200040f4 	.word	0x200040f4

000099fc <CC_PalPowerSaveModeInit>:
    99fc:	b570      	push	{r4, r5, r6, lr}
    99fe:	4c09      	ldr	r4, [pc, #36]	; (9a24 <CC_PalPowerSaveModeInit+0x28>)
    9a00:	4d09      	ldr	r5, [pc, #36]	; (9a28 <CC_PalPowerSaveModeInit+0x2c>)
    9a02:	6920      	ldr	r0, [r4, #16]
    9a04:	68ab      	ldr	r3, [r5, #8]
    9a06:	4798      	blx	r3
    9a08:	b118      	cbz	r0, 9a12 <CC_PalPowerSaveModeInit+0x16>
    9a0a:	4b08      	ldr	r3, [pc, #32]	; (9a2c <CC_PalPowerSaveModeInit+0x30>)
    9a0c:	4808      	ldr	r0, [pc, #32]	; (9a30 <CC_PalPowerSaveModeInit+0x34>)
    9a0e:	685b      	ldr	r3, [r3, #4]
    9a10:	4798      	blx	r3
    9a12:	4a08      	ldr	r2, [pc, #32]	; (9a34 <CC_PalPowerSaveModeInit+0x38>)
    9a14:	68eb      	ldr	r3, [r5, #12]
    9a16:	6920      	ldr	r0, [r4, #16]
    9a18:	2100      	movs	r1, #0
    9a1a:	6011      	str	r1, [r2, #0]
    9a1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9a20:	4718      	bx	r3
    9a22:	bf00      	nop
    9a24:	20004104 	.word	0x20004104
    9a28:	200040f4 	.word	0x200040f4
    9a2c:	200040e4 	.word	0x200040e4
    9a30:	0000ccd4 	.word	0x0000ccd4
    9a34:	20004f8c 	.word	0x20004f8c

00009a38 <CC_PalPowerSaveModeSelect>:
    9a38:	b570      	push	{r4, r5, r6, lr}
    9a3a:	4d1b      	ldr	r5, [pc, #108]	; (9aa8 <CC_PalPowerSaveModeSelect+0x70>)
    9a3c:	4e1b      	ldr	r6, [pc, #108]	; (9aac <CC_PalPowerSaveModeSelect+0x74>)
    9a3e:	4604      	mov	r4, r0
    9a40:	68b2      	ldr	r2, [r6, #8]
    9a42:	6928      	ldr	r0, [r5, #16]
    9a44:	4790      	blx	r2
    9a46:	b9f8      	cbnz	r0, 9a88 <CC_PalPowerSaveModeSelect+0x50>
    9a48:	b15c      	cbz	r4, 9a62 <CC_PalPowerSaveModeSelect+0x2a>
    9a4a:	4c19      	ldr	r4, [pc, #100]	; (9ab0 <CC_PalPowerSaveModeSelect+0x78>)
    9a4c:	6823      	ldr	r3, [r4, #0]
    9a4e:	b1b3      	cbz	r3, 9a7e <CC_PalPowerSaveModeSelect+0x46>
    9a50:	2b01      	cmp	r3, #1
    9a52:	d01b      	beq.n	9a8c <CC_PalPowerSaveModeSelect+0x54>
    9a54:	3b01      	subs	r3, #1
    9a56:	6023      	str	r3, [r4, #0]
    9a58:	6928      	ldr	r0, [r5, #16]
    9a5a:	68f3      	ldr	r3, [r6, #12]
    9a5c:	4798      	blx	r3
    9a5e:	2000      	movs	r0, #0
    9a60:	bd70      	pop	{r4, r5, r6, pc}
    9a62:	4c13      	ldr	r4, [pc, #76]	; (9ab0 <CC_PalPowerSaveModeSelect+0x78>)
    9a64:	6821      	ldr	r1, [r4, #0]
    9a66:	b941      	cbnz	r1, 9a7a <CC_PalPowerSaveModeSelect+0x42>
    9a68:	4b12      	ldr	r3, [pc, #72]	; (9ab4 <CC_PalPowerSaveModeSelect+0x7c>)
    9a6a:	2201      	movs	r2, #1
    9a6c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    9a70:	4a11      	ldr	r2, [pc, #68]	; (9ab8 <CC_PalPowerSaveModeSelect+0x80>)
    9a72:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    9a76:	2b00      	cmp	r3, #0
    9a78:	d1fb      	bne.n	9a72 <CC_PalPowerSaveModeSelect+0x3a>
    9a7a:	3101      	adds	r1, #1
    9a7c:	6021      	str	r1, [r4, #0]
    9a7e:	68f3      	ldr	r3, [r6, #12]
    9a80:	6928      	ldr	r0, [r5, #16]
    9a82:	4798      	blx	r3
    9a84:	2000      	movs	r0, #0
    9a86:	bd70      	pop	{r4, r5, r6, pc}
    9a88:	480c      	ldr	r0, [pc, #48]	; (9abc <CC_PalPowerSaveModeSelect+0x84>)
    9a8a:	bd70      	pop	{r4, r5, r6, pc}
    9a8c:	4a0a      	ldr	r2, [pc, #40]	; (9ab8 <CC_PalPowerSaveModeSelect+0x80>)
    9a8e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    9a92:	2b00      	cmp	r3, #0
    9a94:	d1fb      	bne.n	9a8e <CC_PalPowerSaveModeSelect+0x56>
    9a96:	4a07      	ldr	r2, [pc, #28]	; (9ab4 <CC_PalPowerSaveModeSelect+0x7c>)
    9a98:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    9a9c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    9aa0:	f7ff ff46 	bl	9930 <CC_HalMaskInterrupt>
    9aa4:	6823      	ldr	r3, [r4, #0]
    9aa6:	e7d5      	b.n	9a54 <CC_PalPowerSaveModeSelect+0x1c>
    9aa8:	20004104 	.word	0x20004104
    9aac:	200040f4 	.word	0x200040f4
    9ab0:	20004f8c 	.word	0x20004f8c
    9ab4:	5002a000 	.word	0x5002a000
    9ab8:	5002b000 	.word	0x5002b000
    9abc:	ffff8fe9 	.word	0xffff8fe9

00009ac0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    9ac0:	4770      	bx	lr

00009ac2 <cbprintf_via_va_list>:
{
    9ac2:	b510      	push	{r4, lr}
    9ac4:	460c      	mov	r4, r1
    9ac6:	4611      	mov	r1, r2
    9ac8:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    9aca:	9b02      	ldr	r3, [sp, #8]
    9acc:	47a0      	blx	r4
}
    9ace:	bd10      	pop	{r4, pc}

00009ad0 <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    9ad0:	b353      	cbz	r3, 9b28 <cbpprintf_external+0x58>
{
    9ad2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9ad6:	b082      	sub	sp, #8
    9ad8:	4607      	mov	r7, r0
    9ada:	4688      	mov	r8, r1
    9adc:	4691      	mov	r9, r2
    9ade:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
    9ae0:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = buf[1];
    9ae2:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = buf[2];
    9ae4:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = buf[3];
    9ae6:	78db      	ldrb	r3, [r3, #3]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    9ae8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    9aec:	441c      	add	r4, r3
    9aee:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    9af0:	f04f 0a00 	mov.w	sl, #0
    9af4:	e00a      	b.n	9b0c <cbpprintf_external+0x3c>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
    9af6:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
    9afa:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
    9afe:	4620      	mov	r0, r4
    9b00:	f000 fb31 	bl	a166 <strlen>
    9b04:	3001      	adds	r0, #1
    9b06:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    9b08:	f10a 0a01 	add.w	sl, sl, #1
    9b0c:	45b2      	cmp	sl, r6
    9b0e:	d3f2      	bcc.n	9af6 <cbpprintf_external+0x26>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
    9b10:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
    9b14:	9300      	str	r3, [sp, #0]
    9b16:	686b      	ldr	r3, [r5, #4]
    9b18:	464a      	mov	r2, r9
    9b1a:	4641      	mov	r1, r8
    9b1c:	4638      	mov	r0, r7
    9b1e:	f7ff ffd0 	bl	9ac2 <cbprintf_via_va_list>
}
    9b22:	b002      	add	sp, #8
    9b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    9b28:	f06f 0015 	mvn.w	r0, #21
}
    9b2c:	4770      	bx	lr

00009b2e <sys_notify_validate>:
	if (notify == NULL) {
    9b2e:	4602      	mov	r2, r0
    9b30:	b158      	cbz	r0, 9b4a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9b32:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    9b34:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    9b38:	2b01      	cmp	r3, #1
    9b3a:	d003      	beq.n	9b44 <sys_notify_validate+0x16>
    9b3c:	2b03      	cmp	r3, #3
    9b3e:	d107      	bne.n	9b50 <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    9b40:	6803      	ldr	r3, [r0, #0]
    9b42:	b143      	cbz	r3, 9b56 <sys_notify_validate+0x28>
		notify->result = 0;
    9b44:	2000      	movs	r0, #0
    9b46:	6090      	str	r0, [r2, #8]
    9b48:	4770      	bx	lr
		return -EINVAL;
    9b4a:	f06f 0015 	mvn.w	r0, #21
    9b4e:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    9b50:	f06f 0015 	mvn.w	r0, #21
    9b54:	4770      	bx	lr
			rv = -EINVAL;
    9b56:	f06f 0015 	mvn.w	r0, #21
}
    9b5a:	4770      	bx	lr

00009b5c <arch_printk_char_out>:
}
    9b5c:	2000      	movs	r0, #0
    9b5e:	4770      	bx	lr

00009b60 <vprintk>:
	ctx->count++;
	return _char_out(c);
}

void vprintk(const char *fmt, va_list ap)
{
    9b60:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    9b62:	f000 f99d 	bl	9ea0 <z_log_vprintk>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    9b66:	bd08      	pop	{r3, pc}

00009b68 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    9b68:	b40f      	push	{r0, r1, r2, r3}
    9b6a:	b500      	push	{lr}
    9b6c:	b083      	sub	sp, #12
    9b6e:	a904      	add	r1, sp, #16
    9b70:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    9b74:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    9b76:	f7ff fff3 	bl	9b60 <vprintk>

	va_end(ap);
}
    9b7a:	b003      	add	sp, #12
    9b7c:	f85d eb04 	ldr.w	lr, [sp], #4
    9b80:	b004      	add	sp, #16
    9b82:	4770      	bx	lr

00009b84 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    9b84:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9b88:	8b81      	ldrh	r1, [r0, #28]
    9b8a:	f021 0107 	bic.w	r1, r1, #7
    9b8e:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    9b90:	8381      	strh	r1, [r0, #28]
}
    9b92:	4770      	bx	lr

00009b94 <notify_monitors>:
{
    9b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b98:	4606      	mov	r6, r0
    9b9a:	460f      	mov	r7, r1
    9b9c:	4690      	mov	r8, r2
	return list->head;
    9b9e:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    9ba0:	b119      	cbz	r1, 9baa <notify_monitors+0x16>
    9ba2:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    9ba4:	b131      	cbz	r1, 9bb4 <notify_monitors+0x20>
	return node->next;
    9ba6:	680c      	ldr	r4, [r1, #0]
    9ba8:	e004      	b.n	9bb4 <notify_monitors+0x20>
    9baa:	460c      	mov	r4, r1
    9bac:	e002      	b.n	9bb4 <notify_monitors+0x20>
    9bae:	4623      	mov	r3, r4
    9bb0:	4621      	mov	r1, r4
    9bb2:	461c      	mov	r4, r3
    9bb4:	b159      	cbz	r1, 9bce <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    9bb6:	684d      	ldr	r5, [r1, #4]
    9bb8:	4643      	mov	r3, r8
    9bba:	463a      	mov	r2, r7
    9bbc:	4630      	mov	r0, r6
    9bbe:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    9bc0:	2c00      	cmp	r4, #0
    9bc2:	d0f4      	beq.n	9bae <notify_monitors+0x1a>
    9bc4:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    9bc6:	2c00      	cmp	r4, #0
    9bc8:	d0f2      	beq.n	9bb0 <notify_monitors+0x1c>
	return node->next;
    9bca:	6823      	ldr	r3, [r4, #0]
    9bcc:	e7f0      	b.n	9bb0 <notify_monitors+0x1c>
}
    9bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009bd2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9bd2:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    9bd4:	f013 0307 	ands.w	r3, r3, #7
    9bd8:	d103      	bne.n	9be2 <process_recheck+0x10>
	return list->head;
    9bda:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    9bdc:	b10a      	cbz	r2, 9be2 <process_recheck+0x10>
		evt = EVT_START;
    9bde:	2003      	movs	r0, #3
    9be0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    9be2:	2b02      	cmp	r3, #2
    9be4:	d003      	beq.n	9bee <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    9be6:	2b01      	cmp	r3, #1
    9be8:	d006      	beq.n	9bf8 <process_recheck+0x26>
	int evt = EVT_NOP;
    9bea:	2000      	movs	r0, #0
    9bec:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    9bee:	8bc2      	ldrh	r2, [r0, #30]
    9bf0:	2a00      	cmp	r2, #0
    9bf2:	d1f8      	bne.n	9be6 <process_recheck+0x14>
		evt = EVT_STOP;
    9bf4:	2004      	movs	r0, #4
    9bf6:	4770      	bx	lr
    9bf8:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    9bfa:	b10b      	cbz	r3, 9c00 <process_recheck+0x2e>
		evt = EVT_RESET;
    9bfc:	2005      	movs	r0, #5
}
    9bfe:	4770      	bx	lr
	int evt = EVT_NOP;
    9c00:	2000      	movs	r0, #0
    9c02:	4770      	bx	lr

00009c04 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    9c04:	b158      	cbz	r0, 9c1e <validate_args+0x1a>
{
    9c06:	b510      	push	{r4, lr}
    9c08:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    9c0a:	b159      	cbz	r1, 9c24 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    9c0c:	1d08      	adds	r0, r1, #4
    9c0e:	f7ff ff8e 	bl	9b2e <sys_notify_validate>
	if ((rv == 0)
    9c12:	b918      	cbnz	r0, 9c1c <validate_args+0x18>
	    && ((cli->notify.flags
    9c14:	68a3      	ldr	r3, [r4, #8]
    9c16:	f033 0303 	bics.w	r3, r3, #3
    9c1a:	d106      	bne.n	9c2a <validate_args+0x26>
}
    9c1c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    9c1e:	f06f 0015 	mvn.w	r0, #21
}
    9c22:	4770      	bx	lr
		return -EINVAL;
    9c24:	f06f 0015 	mvn.w	r0, #21
    9c28:	e7f8      	b.n	9c1c <validate_args+0x18>
		rv = -EINVAL;
    9c2a:	f06f 0015 	mvn.w	r0, #21
    9c2e:	e7f5      	b.n	9c1c <validate_args+0x18>

00009c30 <notify_one>:
{
    9c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c34:	4607      	mov	r7, r0
    9c36:	460c      	mov	r4, r1
    9c38:	4616      	mov	r6, r2
    9c3a:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9c3c:	4619      	mov	r1, r3
    9c3e:	1d20      	adds	r0, r4, #4
    9c40:	f7f6 ff70 	bl	b24 <sys_notify_finalize>
	if (cb) {
    9c44:	b128      	cbz	r0, 9c52 <notify_one+0x22>
    9c46:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    9c48:	462b      	mov	r3, r5
    9c4a:	4632      	mov	r2, r6
    9c4c:	4621      	mov	r1, r4
    9c4e:	4638      	mov	r0, r7
    9c50:	47c0      	blx	r8
}
    9c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009c56 <notify_all>:
{
    9c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c5a:	4680      	mov	r8, r0
    9c5c:	460c      	mov	r4, r1
    9c5e:	4617      	mov	r7, r2
    9c60:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    9c62:	e004      	b.n	9c6e <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    9c64:	4633      	mov	r3, r6
    9c66:	463a      	mov	r2, r7
    9c68:	4640      	mov	r0, r8
    9c6a:	f7ff ffe1 	bl	9c30 <notify_one>
    9c6e:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    9c70:	b131      	cbz	r1, 9c80 <notify_all+0x2a>
	return node->next;
    9c72:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    9c74:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9c76:	6863      	ldr	r3, [r4, #4]
    9c78:	428b      	cmp	r3, r1
    9c7a:	d1f3      	bne.n	9c64 <notify_all+0xe>
	list->tail = node;
    9c7c:	6065      	str	r5, [r4, #4]
}
    9c7e:	e7f1      	b.n	9c64 <notify_all+0xe>
}
    9c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009c84 <onoff_manager_init>:
	if ((mgr == NULL)
    9c84:	b170      	cbz	r0, 9ca4 <onoff_manager_init+0x20>
{
    9c86:	b538      	push	{r3, r4, r5, lr}
    9c88:	460c      	mov	r4, r1
    9c8a:	4605      	mov	r5, r0
	    || (transitions == NULL)
    9c8c:	b169      	cbz	r1, 9caa <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    9c8e:	680b      	ldr	r3, [r1, #0]
    9c90:	b173      	cbz	r3, 9cb0 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    9c92:	684b      	ldr	r3, [r1, #4]
    9c94:	b17b      	cbz	r3, 9cb6 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    9c96:	2220      	movs	r2, #32
    9c98:	2100      	movs	r1, #0
    9c9a:	f000 faa6 	bl	a1ea <memset>
    9c9e:	612c      	str	r4, [r5, #16]
	return 0;
    9ca0:	2000      	movs	r0, #0
}
    9ca2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9ca4:	f06f 0015 	mvn.w	r0, #21
}
    9ca8:	4770      	bx	lr
		return -EINVAL;
    9caa:	f06f 0015 	mvn.w	r0, #21
    9cae:	e7f8      	b.n	9ca2 <onoff_manager_init+0x1e>
    9cb0:	f06f 0015 	mvn.w	r0, #21
    9cb4:	e7f5      	b.n	9ca2 <onoff_manager_init+0x1e>
    9cb6:	f06f 0015 	mvn.w	r0, #21
    9cba:	e7f2      	b.n	9ca2 <onoff_manager_init+0x1e>

00009cbc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    9cbc:	b508      	push	{r3, lr}
    9cbe:	4604      	mov	r4, r0
    9cc0:	4608      	mov	r0, r1
    9cc2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    9cc4:	461a      	mov	r2, r3
    9cc6:	47a0      	blx	r4
	return z_impl_z_current_get();
    9cc8:	f7ff f8c2 	bl	8e50 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    9ccc:	f7f9 fd2e 	bl	372c <z_impl_k_thread_abort>

00009cd0 <free_list_add_bidx>:
{
    9cd0:	b510      	push	{r4, lr}
	if (b->next == 0U) {
    9cd2:	1d13      	adds	r3, r2, #4
    9cd4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    9cd8:	b97c      	cbnz	r4, 9cfa <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
    9cda:	2301      	movs	r3, #1
    9cdc:	fa03 f402 	lsl.w	r4, r3, r2
    9ce0:	68c3      	ldr	r3, [r0, #12]
    9ce2:	4323      	orrs	r3, r4
    9ce4:	60c3      	str	r3, [r0, #12]
		b->next = c;
    9ce6:	3204      	adds	r2, #4
    9ce8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    9cec:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    9cee:	1d1a      	adds	r2, r3, #4
    9cf0:	b289      	uxth	r1, r1
    9cf2:	5281      	strh	r1, [r0, r2]
    9cf4:	3306      	adds	r3, #6
    9cf6:	52c1      	strh	r1, [r0, r3]
}
    9cf8:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    9cfa:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    9cfc:	3204      	adds	r2, #4
    9cfe:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    9d00:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    9d04:	f10c 0e04 	add.w	lr, ip, #4
    9d08:	f820 300e 	strh.w	r3, [r0, lr]
    9d0c:	f10c 0c06 	add.w	ip, ip, #6
    9d10:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    9d14:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    9d16:	3306      	adds	r3, #6
    9d18:	b289      	uxth	r1, r1
    9d1a:	52c1      	strh	r1, [r0, r3]
    9d1c:	5281      	strh	r1, [r0, r2]
    9d1e:	e7eb      	b.n	9cf8 <free_list_add_bidx+0x28>

00009d20 <free_list_add>:
{
    9d20:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    9d22:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    9d26:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    9d28:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    9d2a:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    9d2e:	f1c2 021f 	rsb	r2, r2, #31
    9d32:	f7ff ffcd 	bl	9cd0 <free_list_add_bidx>
}
    9d36:	bd08      	pop	{r3, pc}

00009d38 <extract_decimal>:
{
    9d38:	4684      	mov	ip, r0
	const char *sp = *str;
    9d3a:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    9d3c:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    9d3e:	e005      	b.n	9d4c <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    9d40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    9d44:	3201      	adds	r2, #1
    9d46:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    9d4a:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    9d4c:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    9d4e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    9d52:	2909      	cmp	r1, #9
    9d54:	d9f4      	bls.n	9d40 <extract_decimal+0x8>
	*str = sp;
    9d56:	f8cc 2000 	str.w	r2, [ip]
}
    9d5a:	4770      	bx	lr

00009d5c <encode_uint>:
{
    9d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d60:	b083      	sub	sp, #12
    9d62:	4604      	mov	r4, r0
    9d64:	460d      	mov	r5, r1
    9d66:	9201      	str	r2, [sp, #4]
    9d68:	469a      	mov	sl, r3
    9d6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    9d6c:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    9d6e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    9d72:	2b6f      	cmp	r3, #111	; 0x6f
    9d74:	d00f      	beq.n	9d96 <encode_uint+0x3a>
    9d76:	d906      	bls.n	9d86 <encode_uint+0x2a>
    9d78:	2b70      	cmp	r3, #112	; 0x70
    9d7a:	d00f      	beq.n	9d9c <encode_uint+0x40>
    9d7c:	2b78      	cmp	r3, #120	; 0x78
    9d7e:	d110      	bne.n	9da2 <encode_uint+0x46>
		return 16;
    9d80:	f04f 0910 	mov.w	r9, #16
    9d84:	e026      	b.n	9dd4 <encode_uint+0x78>
	switch (specifier) {
    9d86:	2b58      	cmp	r3, #88	; 0x58
    9d88:	d002      	beq.n	9d90 <encode_uint+0x34>
    9d8a:	f04f 090a 	mov.w	r9, #10
    9d8e:	e021      	b.n	9dd4 <encode_uint+0x78>
		return 16;
    9d90:	f04f 0910 	mov.w	r9, #16
    9d94:	e01e      	b.n	9dd4 <encode_uint+0x78>
		return 8;
    9d96:	f04f 0908 	mov.w	r9, #8
    9d9a:	e01b      	b.n	9dd4 <encode_uint+0x78>
		return 16;
    9d9c:	f04f 0910 	mov.w	r9, #16
    9da0:	e018      	b.n	9dd4 <encode_uint+0x78>
	switch (specifier) {
    9da2:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    9da6:	e015      	b.n	9dd4 <encode_uint+0x78>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9da8:	f1bb 0f19 	cmp.w	fp, #25
    9dac:	d821      	bhi.n	9df2 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    9dae:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9db0:	3237      	adds	r2, #55	; 0x37
    9db2:	b2d2      	uxtb	r2, r2
    9db4:	f806 2d01 	strb.w	r2, [r6, #-1]!
		value /= radix;
    9db8:	463a      	mov	r2, r7
    9dba:	4643      	mov	r3, r8
    9dbc:	4620      	mov	r0, r4
    9dbe:	4629      	mov	r1, r5
    9dc0:	f7f6 f99e 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    9dc4:	42bc      	cmp	r4, r7
    9dc6:	f175 0300 	sbcs.w	r3, r5, #0
    9dca:	d316      	bcc.n	9dfa <encode_uint+0x9e>
    9dcc:	4556      	cmp	r6, sl
    9dce:	d914      	bls.n	9dfa <encode_uint+0x9e>
		value /= radix;
    9dd0:	4604      	mov	r4, r0
    9dd2:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    9dd4:	f04f 0800 	mov.w	r8, #0
    9dd8:	464f      	mov	r7, r9
    9dda:	464a      	mov	r2, r9
    9ddc:	4643      	mov	r3, r8
    9dde:	4620      	mov	r0, r4
    9de0:	4629      	mov	r1, r5
    9de2:	f7f6 f98d 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9de6:	2a09      	cmp	r2, #9
    9de8:	d8de      	bhi.n	9da8 <encode_uint+0x4c>
    9dea:	b2d2      	uxtb	r2, r2
    9dec:	3230      	adds	r2, #48	; 0x30
    9dee:	b2d2      	uxtb	r2, r2
    9df0:	e7e0      	b.n	9db4 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    9df2:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9df4:	3257      	adds	r2, #87	; 0x57
    9df6:	b2d2      	uxtb	r2, r2
    9df8:	e7dc      	b.n	9db4 <encode_uint+0x58>
	if (conv->flag_hash) {
    9dfa:	9b01      	ldr	r3, [sp, #4]
    9dfc:	781b      	ldrb	r3, [r3, #0]
    9dfe:	f013 0f20 	tst.w	r3, #32
    9e02:	d005      	beq.n	9e10 <encode_uint+0xb4>
		if (radix == 8) {
    9e04:	f1b9 0f08 	cmp.w	r9, #8
    9e08:	d006      	beq.n	9e18 <encode_uint+0xbc>
		} else if (radix == 16) {
    9e0a:	f1b9 0f10 	cmp.w	r9, #16
    9e0e:	d009      	beq.n	9e24 <encode_uint+0xc8>
}
    9e10:	4630      	mov	r0, r6
    9e12:	b003      	add	sp, #12
    9e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    9e18:	9a01      	ldr	r2, [sp, #4]
    9e1a:	7893      	ldrb	r3, [r2, #2]
    9e1c:	f043 0308 	orr.w	r3, r3, #8
    9e20:	7093      	strb	r3, [r2, #2]
    9e22:	e7f5      	b.n	9e10 <encode_uint+0xb4>
			conv->altform_0c = true;
    9e24:	9a01      	ldr	r2, [sp, #4]
    9e26:	7893      	ldrb	r3, [r2, #2]
    9e28:	f043 0310 	orr.w	r3, r3, #16
    9e2c:	7093      	strb	r3, [r2, #2]
    9e2e:	e7ef      	b.n	9e10 <encode_uint+0xb4>

00009e30 <outs>:
{
    9e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e34:	4607      	mov	r7, r0
    9e36:	460e      	mov	r6, r1
    9e38:	4614      	mov	r4, r2
    9e3a:	4698      	mov	r8, r3
	size_t count = 0;
    9e3c:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9e3e:	e006      	b.n	9e4e <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    9e40:	4631      	mov	r1, r6
    9e42:	f814 0b01 	ldrb.w	r0, [r4], #1
    9e46:	47b8      	blx	r7
		if (rc < 0) {
    9e48:	2800      	cmp	r0, #0
    9e4a:	db09      	blt.n	9e60 <outs+0x30>
		++count;
    9e4c:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9e4e:	4544      	cmp	r4, r8
    9e50:	d3f6      	bcc.n	9e40 <outs+0x10>
    9e52:	f1b8 0f00 	cmp.w	r8, #0
    9e56:	d102      	bne.n	9e5e <outs+0x2e>
    9e58:	7823      	ldrb	r3, [r4, #0]
    9e5a:	2b00      	cmp	r3, #0
    9e5c:	d1f0      	bne.n	9e40 <outs+0x10>
	return (int)count;
    9e5e:	4628      	mov	r0, r5
}
    9e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009e64 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    9e64:	4040      	eors	r0, r0
    9e66:	f380 8811 	msr	BASEPRI, r0
    9e6a:	f04f 0004 	mov.w	r0, #4
    9e6e:	df02      	svc	2
}
    9e70:	4770      	bx	lr

00009e72 <assert_print>:

void assert_print(const char *fmt, ...)
{
    9e72:	b40f      	push	{r0, r1, r2, r3}
    9e74:	b500      	push	{lr}
    9e76:	b083      	sub	sp, #12
    9e78:	a904      	add	r1, sp, #16
    9e7a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    9e7e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    9e80:	f7ff fe6e 	bl	9b60 <vprintk>

	va_end(ap);
}
    9e84:	b003      	add	sp, #12
    9e86:	f85d eb04 	ldr.w	lr, [sp], #4
    9e8a:	b004      	add	sp, #16
    9e8c:	4770      	bx	lr

00009e8e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    9e8e:	4770      	bx	lr

00009e90 <dummy_timestamp>:
}
    9e90:	2000      	movs	r0, #0
    9e92:	4770      	bx	lr

00009e94 <msg_filter_check>:
}
    9e94:	2001      	movs	r0, #1
    9e96:	4770      	bx	lr

00009e98 <default_get_timestamp>:
{
    9e98:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    9e9a:	f000 fd4d 	bl	a938 <sys_clock_cycle_get_32>
}
    9e9e:	bd08      	pop	{r3, pc}

00009ea0 <z_log_vprintk>:
{
    9ea0:	b500      	push	{lr}
    9ea2:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    9ea4:	9103      	str	r1, [sp, #12]
    9ea6:	9002      	str	r0, [sp, #8]
    9ea8:	2000      	movs	r0, #0
    9eaa:	9001      	str	r0, [sp, #4]
    9eac:	9000      	str	r0, [sp, #0]
    9eae:	4603      	mov	r3, r0
    9eb0:	4602      	mov	r2, r0
    9eb2:	4601      	mov	r1, r0
    9eb4:	f7f8 fa74 	bl	23a0 <z_impl_z_log_msg2_runtime_vcreate>
}
    9eb8:	b005      	add	sp, #20
    9eba:	f85d fb04 	ldr.w	pc, [sp], #4

00009ebe <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    9ebe:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    9ec0:	f7f7 ff44 	bl	1d4c <log_init>
	}

	return 0;
}
    9ec4:	2000      	movs	r0, #0
    9ec6:	bd08      	pop	{r3, pc}

00009ec8 <z_log_get_tag>:
}
    9ec8:	2000      	movs	r0, #0
    9eca:	4770      	bx	lr

00009ecc <out_func>:
{
    9ecc:	b500      	push	{lr}
    9ece:	b083      	sub	sp, #12
		char x = (char)c;
    9ed0:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    9ed4:	680b      	ldr	r3, [r1, #0]
    9ed6:	684a      	ldr	r2, [r1, #4]
    9ed8:	6852      	ldr	r2, [r2, #4]
    9eda:	2101      	movs	r1, #1
    9edc:	f10d 0007 	add.w	r0, sp, #7
    9ee0:	4798      	blx	r3
}
    9ee2:	2000      	movs	r0, #0
    9ee4:	b003      	add	sp, #12
    9ee6:	f85d fb04 	ldr.w	pc, [sp], #4

00009eea <cr_out_func>:
{
    9eea:	b538      	push	{r3, r4, r5, lr}
    9eec:	4604      	mov	r4, r0
    9eee:	460d      	mov	r5, r1
	out_func(c, ctx);
    9ef0:	f7ff ffec 	bl	9ecc <out_func>
	if (c == '\n') {
    9ef4:	2c0a      	cmp	r4, #10
    9ef6:	d001      	beq.n	9efc <cr_out_func+0x12>
}
    9ef8:	2000      	movs	r0, #0
    9efa:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    9efc:	4629      	mov	r1, r5
    9efe:	200d      	movs	r0, #13
    9f00:	f7ff ffe4 	bl	9ecc <out_func>
    9f04:	e7f8      	b.n	9ef8 <cr_out_func+0xe>

00009f06 <buffer_write>:
{
    9f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f08:	4607      	mov	r7, r0
    9f0a:	460d      	mov	r5, r1
    9f0c:	4614      	mov	r4, r2
    9f0e:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    9f10:	4632      	mov	r2, r6
    9f12:	4621      	mov	r1, r4
    9f14:	4628      	mov	r0, r5
    9f16:	47b8      	blx	r7
		buf += processed;
    9f18:	4405      	add	r5, r0
	} while (len != 0);
    9f1a:	1a24      	subs	r4, r4, r0
    9f1c:	d1f8      	bne.n	9f10 <buffer_write+0xa>
}
    9f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009f20 <color_prefix>:
{
    9f20:	b508      	push	{r3, lr}
    9f22:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    9f24:	2201      	movs	r2, #1
    9f26:	f7f8 f8b7 	bl	2098 <color_print>
}
    9f2a:	bd08      	pop	{r3, pc}

00009f2c <color_postfix>:
{
    9f2c:	b508      	push	{r3, lr}
    9f2e:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    9f30:	2200      	movs	r2, #0
    9f32:	f7f8 f8b1 	bl	2098 <color_print>
}
    9f36:	bd08      	pop	{r3, pc}

00009f38 <postfix_print>:
{
    9f38:	b538      	push	{r3, r4, r5, lr}
    9f3a:	4605      	mov	r5, r0
    9f3c:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    9f3e:	f001 0101 	and.w	r1, r1, #1
    9f42:	f7ff fff3 	bl	9f2c <color_postfix>
	newline_print(output, flags);
    9f46:	4621      	mov	r1, r4
    9f48:	4628      	mov	r0, r5
    9f4a:	f7f8 f8bb 	bl	20c4 <newline_print>
}
    9f4e:	bd38      	pop	{r3, r4, r5, pc}

00009f50 <log_msg2_hexdump>:
{
    9f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9f54:	b083      	sub	sp, #12
    9f56:	4680      	mov	r8, r0
    9f58:	460e      	mov	r6, r1
    9f5a:	4615      	mov	r5, r2
    9f5c:	461f      	mov	r7, r3
    9f5e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    9f62:	462c      	mov	r4, r5
    9f64:	2d10      	cmp	r5, #16
    9f66:	bf28      	it	cs
    9f68:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    9f6a:	f8cd 9000 	str.w	r9, [sp]
    9f6e:	463b      	mov	r3, r7
    9f70:	4622      	mov	r2, r4
    9f72:	4631      	mov	r1, r6
    9f74:	4640      	mov	r0, r8
    9f76:	f7f8 f8b9 	bl	20ec <hexdump_line_print>
		data += length;
    9f7a:	4426      	add	r6, r4
	} while (len);
    9f7c:	1b2d      	subs	r5, r5, r4
    9f7e:	d1f0      	bne.n	9f62 <log_msg2_hexdump+0x12>
}
    9f80:	b003      	add	sp, #12
    9f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00009f86 <log_output_flush>:
{
    9f86:	b510      	push	{r4, lr}
    9f88:	4604      	mov	r4, r0
		     output->control_block->offset,
    9f8a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    9f8c:	6853      	ldr	r3, [r2, #4]
    9f8e:	6812      	ldr	r2, [r2, #0]
    9f90:	6881      	ldr	r1, [r0, #8]
    9f92:	6800      	ldr	r0, [r0, #0]
    9f94:	f7ff ffb7 	bl	9f06 <buffer_write>
	output->control_block->offset = 0;
    9f98:	6863      	ldr	r3, [r4, #4]
    9f9a:	2200      	movs	r2, #0
    9f9c:	601a      	str	r2, [r3, #0]
}
    9f9e:	bd10      	pop	{r4, pc}

00009fa0 <z_log_msg2_finalize>:
{
    9fa0:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    9fa2:	b198      	cbz	r0, 9fcc <z_log_msg2_finalize+0x2c>
    9fa4:	460e      	mov	r6, r1
    9fa6:	4614      	mov	r4, r2
    9fa8:	4619      	mov	r1, r3
    9faa:	4605      	mov	r5, r0
	if (data) {
    9fac:	b143      	cbz	r3, 9fc0 <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
    9fae:	f100 0310 	add.w	r3, r0, #16
    9fb2:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    9fb6:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    9fba:	4418      	add	r0, r3
    9fbc:	f000 f8e6 	bl	a18c <memcpy>
	msg->hdr.desc = desc;
    9fc0:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    9fc2:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
    9fc4:	4628      	mov	r0, r5
    9fc6:	f7f7 ffa3 	bl	1f10 <z_log_msg2_commit>
}
    9fca:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    9fcc:	f7f7 ff80 	bl	1ed0 <z_log_dropped>
		return;
    9fd0:	e7fb      	b.n	9fca <z_log_msg2_finalize+0x2a>

00009fd2 <abort_function>:
{
    9fd2:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    9fd4:	2000      	movs	r0, #0
    9fd6:	f7f7 fe3f 	bl	1c58 <sys_reboot>

00009fda <z_log_msg2_runtime_create>:
{
    9fda:	b510      	push	{r4, lr}
    9fdc:	b086      	sub	sp, #24
	va_start(ap, fmt);
    9fde:	ac0b      	add	r4, sp, #44	; 0x2c
    9fe0:	9405      	str	r4, [sp, #20]
    9fe2:	9403      	str	r4, [sp, #12]
    9fe4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    9fe6:	9402      	str	r4, [sp, #8]
    9fe8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9fea:	9401      	str	r4, [sp, #4]
    9fec:	9c08      	ldr	r4, [sp, #32]
    9fee:	9400      	str	r4, [sp, #0]
    9ff0:	f7f8 f9d6 	bl	23a0 <z_impl_z_log_msg2_runtime_vcreate>
}
    9ff4:	b006      	add	sp, #24
    9ff6:	bd10      	pop	{r4, pc}

00009ff8 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    9ff8:	b538      	push	{r3, r4, r5, lr}
    9ffa:	4604      	mov	r4, r0

	if (esf != NULL) {
    9ffc:	460d      	mov	r5, r1
    9ffe:	b111      	cbz	r1, a006 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    a000:	4608      	mov	r0, r1
    a002:	f7f8 fdf1 	bl	2be8 <esf_dump>
	}
	z_fatal_error(reason, esf);
    a006:	4629      	mov	r1, r5
    a008:	4620      	mov	r0, r4
    a00a:	f7fc fdfb 	bl	6c04 <z_fatal_error>
}
    a00e:	bd38      	pop	{r3, r4, r5, pc}

0000a010 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    a010:	b508      	push	{r3, lr}
    a012:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    a014:	6800      	ldr	r0, [r0, #0]
    a016:	f7ff ffef 	bl	9ff8 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    a01a:	bd08      	pop	{r3, pc}

0000a01c <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    a01c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    a01e:	2100      	movs	r1, #0
    a020:	2001      	movs	r0, #1
    a022:	f7ff ffe9 	bl	9ff8 <z_arm_fatal_error>
}
    a026:	bd08      	pop	{r3, pc}

0000a028 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    a028:	b508      	push	{r3, lr}
	handler();
    a02a:	f7f8 fe79 	bl	2d20 <z_SysNmiOnReset>
	z_arm_int_exit();
    a02e:	f7f8 ff6f 	bl	2f10 <z_arm_exc_exit>
}
    a032:	bd08      	pop	{r3, pc}

0000a034 <memory_fault_recoverable>:
}
    a034:	2000      	movs	r0, #0
    a036:	4770      	bx	lr

0000a038 <z_log_msg2_runtime_create>:
{
    a038:	b510      	push	{r4, lr}
    a03a:	b086      	sub	sp, #24
	va_start(ap, fmt);
    a03c:	ac0b      	add	r4, sp, #44	; 0x2c
    a03e:	9405      	str	r4, [sp, #20]
    a040:	9403      	str	r4, [sp, #12]
    a042:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a044:	9402      	str	r4, [sp, #8]
    a046:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a048:	9401      	str	r4, [sp, #4]
    a04a:	9c08      	ldr	r4, [sp, #32]
    a04c:	9400      	str	r4, [sp, #0]
    a04e:	f7f8 f9a7 	bl	23a0 <z_impl_z_log_msg2_runtime_vcreate>
}
    a052:	b006      	add	sp, #24
    a054:	bd10      	pop	{r4, pc}

0000a056 <fault_handle>:
{
    a056:	b508      	push	{r3, lr}
	*recoverable = false;
    a058:	2300      	movs	r3, #0
    a05a:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    a05c:	1ecb      	subs	r3, r1, #3
    a05e:	2b09      	cmp	r3, #9
    a060:	d81a      	bhi.n	a098 <fault_handle+0x42>
    a062:	e8df f003 	tbb	[pc, r3]
    a066:	0905      	.short	0x0905
    a068:	1919110d 	.word	0x1919110d
    a06c:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    a070:	4611      	mov	r1, r2
    a072:	f7f9 f99f 	bl	33b4 <hard_fault>
}
    a076:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    a078:	2100      	movs	r1, #0
    a07a:	f7f9 f8bd 	bl	31f8 <mem_manage_fault>
		break;
    a07e:	e7fa      	b.n	a076 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    a080:	2100      	movs	r1, #0
    a082:	f7f8 ff53 	bl	2f2c <bus_fault>
		break;
    a086:	e7f6      	b.n	a076 <fault_handle+0x20>
		reason = usage_fault(esf);
    a088:	f7f8 fff8 	bl	307c <usage_fault>
		break;
    a08c:	e7f3      	b.n	a076 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    a08e:	4611      	mov	r1, r2
    a090:	f7f9 f87e 	bl	3190 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    a094:	2000      	movs	r0, #0
		break;
    a096:	e7ee      	b.n	a076 <fault_handle+0x20>
		reserved_exception(esf, fault);
    a098:	f7f9 f88e 	bl	31b8 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    a09c:	2000      	movs	r0, #0
	return reason;
    a09e:	e7ea      	b.n	a076 <fault_handle+0x20>

0000a0a0 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    a0a0:	6843      	ldr	r3, [r0, #4]
    a0a2:	1e5a      	subs	r2, r3, #1
		&&
    a0a4:	4213      	tst	r3, r2
    a0a6:	d106      	bne.n	a0b6 <mpu_partition_is_valid+0x16>
		&&
    a0a8:	2b1f      	cmp	r3, #31
    a0aa:	d906      	bls.n	a0ba <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    a0ac:	6803      	ldr	r3, [r0, #0]
		&&
    a0ae:	421a      	tst	r2, r3
    a0b0:	d005      	beq.n	a0be <mpu_partition_is_valid+0x1e>
    a0b2:	2000      	movs	r0, #0
    a0b4:	4770      	bx	lr
    a0b6:	2000      	movs	r0, #0
    a0b8:	4770      	bx	lr
    a0ba:	2000      	movs	r0, #0
    a0bc:	4770      	bx	lr
    a0be:	2001      	movs	r0, #1
}
    a0c0:	4770      	bx	lr

0000a0c2 <z_log_msg2_runtime_create>:
{
    a0c2:	b510      	push	{r4, lr}
    a0c4:	b086      	sub	sp, #24
	va_start(ap, fmt);
    a0c6:	ac0b      	add	r4, sp, #44	; 0x2c
    a0c8:	9405      	str	r4, [sp, #20]
    a0ca:	9403      	str	r4, [sp, #12]
    a0cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a0ce:	9402      	str	r4, [sp, #8]
    a0d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a0d2:	9401      	str	r4, [sp, #4]
    a0d4:	9c08      	ldr	r4, [sp, #32]
    a0d6:	9400      	str	r4, [sp, #0]
    a0d8:	f7f8 f962 	bl	23a0 <z_impl_z_log_msg2_runtime_vcreate>
}
    a0dc:	b006      	add	sp, #24
    a0de:	bd10      	pop	{r4, pc}

0000a0e0 <mpu_configure_region>:
{
    a0e0:	b500      	push	{lr}
    a0e2:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    a0e4:	680b      	ldr	r3, [r1, #0]
    a0e6:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    a0e8:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    a0ea:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    a0ec:	2b20      	cmp	r3, #32
    a0ee:	d912      	bls.n	a116 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    a0f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    a0f4:	d811      	bhi.n	a11a <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    a0f6:	3b01      	subs	r3, #1
    a0f8:	fab3 f383 	clz	r3, r3
    a0fc:	f1c3 031f 	rsb	r3, r3, #31
    a100:	005b      	lsls	r3, r3, #1
    a102:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    a106:	4313      	orrs	r3, r2
    a108:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    a10a:	a901      	add	r1, sp, #4
    a10c:	f7f9 fb5c 	bl	37c8 <region_allocate_and_init>
}
    a110:	b005      	add	sp, #20
    a112:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    a116:	2308      	movs	r3, #8
    a118:	e7f5      	b.n	a106 <mpu_configure_region+0x26>
		return REGION_4G;
    a11a:	233e      	movs	r3, #62	; 0x3e
    a11c:	e7f3      	b.n	a106 <mpu_configure_region+0x26>

0000a11e <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    a11e:	4602      	mov	r2, r0
    a120:	e002      	b.n	a128 <strcpy+0xa>
		*d = *s;
    a122:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    a126:	3101      	adds	r1, #1
	while (*s != '\0') {
    a128:	780b      	ldrb	r3, [r1, #0]
    a12a:	2b00      	cmp	r3, #0
    a12c:	d1f9      	bne.n	a122 <strcpy+0x4>
	}

	*d = '\0';
    a12e:	7013      	strb	r3, [r2, #0]

	return dest;
}
    a130:	4770      	bx	lr

0000a132 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    a132:	4603      	mov	r3, r0
    a134:	b1a2      	cbz	r2, a160 <strncpy+0x2e>
{
    a136:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    a138:	780c      	ldrb	r4, [r1, #0]
    a13a:	b12c      	cbz	r4, a148 <strncpy+0x16>
		*d = *s;
    a13c:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    a140:	3101      	adds	r1, #1
		d++;
		n--;
    a142:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    a144:	2a00      	cmp	r2, #0
    a146:	d1f7      	bne.n	a138 <strncpy+0x6>
	}

	while (n > 0) {
    a148:	b122      	cbz	r2, a154 <strncpy+0x22>
		*d = '\0';
    a14a:	2100      	movs	r1, #0
    a14c:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    a150:	3a01      	subs	r2, #1
    a152:	e7f9      	b.n	a148 <strncpy+0x16>
	}

	return dest;
}
    a154:	bc10      	pop	{r4}
    a156:	4770      	bx	lr
		*d = '\0';
    a158:	2100      	movs	r1, #0
    a15a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    a15e:	3a01      	subs	r2, #1
	while (n > 0) {
    a160:	2a00      	cmp	r2, #0
    a162:	d1f9      	bne.n	a158 <strncpy+0x26>
    a164:	4770      	bx	lr

0000a166 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    a166:	4603      	mov	r3, r0
	size_t n = 0;
    a168:	2000      	movs	r0, #0

	while (*s != '\0') {
    a16a:	e001      	b.n	a170 <strlen+0xa>
		s++;
    a16c:	3301      	adds	r3, #1
		n++;
    a16e:	3001      	adds	r0, #1
	while (*s != '\0') {
    a170:	781a      	ldrb	r2, [r3, #0]
    a172:	2a00      	cmp	r2, #0
    a174:	d1fa      	bne.n	a16c <strlen+0x6>
	}

	return n;
}
    a176:	4770      	bx	lr

0000a178 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    a178:	4603      	mov	r3, r0
	size_t n = 0;
    a17a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    a17c:	e001      	b.n	a182 <strnlen+0xa>
		s++;
    a17e:	3301      	adds	r3, #1
		n++;
    a180:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    a182:	781a      	ldrb	r2, [r3, #0]
    a184:	b10a      	cbz	r2, a18a <strnlen+0x12>
    a186:	4288      	cmp	r0, r1
    a188:	d3f9      	bcc.n	a17e <strnlen+0x6>
	}

	return n;
}
    a18a:	4770      	bx	lr

0000a18c <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    a18c:	ea80 0301 	eor.w	r3, r0, r1
    a190:	f013 0f03 	tst.w	r3, #3
    a194:	d001      	beq.n	a19a <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    a196:	4603      	mov	r3, r0
    a198:	e023      	b.n	a1e2 <memcpy+0x56>
    a19a:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    a19c:	f013 0f03 	tst.w	r3, #3
    a1a0:	d00f      	beq.n	a1c2 <memcpy+0x36>
			if (n == 0) {
    a1a2:	b30a      	cbz	r2, a1e8 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    a1a4:	f811 cb01 	ldrb.w	ip, [r1], #1
    a1a8:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    a1ac:	3a01      	subs	r2, #1
    a1ae:	e7f5      	b.n	a19c <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    a1b0:	f811 cb01 	ldrb.w	ip, [r1], #1
    a1b4:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    a1b8:	3a01      	subs	r2, #1
	while (n > 0) {
    a1ba:	2a00      	cmp	r2, #0
    a1bc:	d1f8      	bne.n	a1b0 <memcpy+0x24>
	}

	return d;
}
    a1be:	bc10      	pop	{r4}
    a1c0:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    a1c2:	2a03      	cmp	r2, #3
    a1c4:	d90d      	bls.n	a1e2 <memcpy+0x56>
{
    a1c6:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    a1c8:	f851 4b04 	ldr.w	r4, [r1], #4
    a1cc:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    a1d0:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    a1d2:	2a03      	cmp	r2, #3
    a1d4:	d8f8      	bhi.n	a1c8 <memcpy+0x3c>
    a1d6:	e7f0      	b.n	a1ba <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    a1d8:	f811 cb01 	ldrb.w	ip, [r1], #1
    a1dc:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    a1e0:	3a01      	subs	r2, #1
	while (n > 0) {
    a1e2:	2a00      	cmp	r2, #0
    a1e4:	d1f8      	bne.n	a1d8 <memcpy+0x4c>
    a1e6:	4770      	bx	lr
}
    a1e8:	4770      	bx	lr

0000a1ea <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    a1ea:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    a1ee:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    a1f0:	e002      	b.n	a1f8 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    a1f2:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    a1f6:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    a1f8:	f013 0f03 	tst.w	r3, #3
    a1fc:	d002      	beq.n	a204 <memset+0x1a>
		if (n == 0) {
    a1fe:	2a00      	cmp	r2, #0
    a200:	d1f7      	bne.n	a1f2 <memset+0x8>
    a202:	e00f      	b.n	a224 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    a204:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    a206:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    a20a:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    a20e:	2a03      	cmp	r2, #3
    a210:	d906      	bls.n	a220 <memset+0x36>
		*(d_word++) = c_word;
    a212:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    a216:	3a04      	subs	r2, #4
    a218:	e7f9      	b.n	a20e <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    a21a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    a21e:	3a01      	subs	r2, #1
	while (n > 0) {
    a220:	2a00      	cmp	r2, #0
    a222:	d1fa      	bne.n	a21a <memset+0x30>
	}

	return buf;
}
    a224:	4770      	bx	lr

0000a226 <_stdout_hook_default>:
}
    a226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a22a:	4770      	bx	lr

0000a22c <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a22c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    a230:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a234:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    a238:	2a08      	cmp	r2, #8
    a23a:	d001      	beq.n	a240 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    a23c:	2000      	movs	r0, #0
    a23e:	4770      	bx	lr
                switch(var2)
    a240:	2b02      	cmp	r3, #2
    a242:	d001      	beq.n	a248 <nrf52_errata_197+0x1c>
                        return false;
    a244:	2000      	movs	r0, #0
    a246:	4770      	bx	lr
                        return true;
    a248:	2001      	movs	r0, #1
    #endif
}
    a24a:	4770      	bx	lr

0000a24c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    a24c:	2806      	cmp	r0, #6
    a24e:	d000      	beq.n	a252 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    a250:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    a252:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a256:	2201      	movs	r2, #1
    a258:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    a25c:	f3bf 8f4f 	dsb	sy
        __WFE();
    a260:	bf20      	wfe
    while (true)
    a262:	e7fd      	b.n	a260 <pm_state_set+0x14>

0000a264 <pm_state_exit_post_ops>:
    a264:	2300      	movs	r3, #0
    a266:	f383 8811 	msr	BASEPRI, r3
    a26a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    a26e:	4770      	bx	lr

0000a270 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    a270:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    a272:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a276:	0089      	lsls	r1, r1, #2
    a278:	3140      	adds	r1, #64	; 0x40
}
    a27a:	4408      	add	r0, r1
    a27c:	4770      	bx	lr

0000a27e <get_sub_config>:
	const struct nrf_clock_control_config *config =
    a27e:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    a280:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    a284:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    a288:	4770      	bx	lr

0000a28a <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    a28a:	6900      	ldr	r0, [r0, #16]
}
    a28c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    a290:	4770      	bx	lr

0000a292 <set_off_state>:
	__asm__ volatile(
    a292:	f04f 0320 	mov.w	r3, #32
    a296:	f3ef 8211 	mrs	r2, BASEPRI
    a29a:	f383 8812 	msr	BASEPRI_MAX, r3
    a29e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a2a2:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    a2a4:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    a2a8:	d001      	beq.n	a2ae <set_off_state+0x1c>
    a2aa:	428b      	cmp	r3, r1
    a2ac:	d107      	bne.n	a2be <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    a2ae:	2301      	movs	r3, #1
    a2b0:	6003      	str	r3, [r0, #0]
	int err = 0;
    a2b2:	2000      	movs	r0, #0
	__asm__ volatile(
    a2b4:	f382 8811 	msr	BASEPRI, r2
    a2b8:	f3bf 8f6f 	isb	sy
}
    a2bc:	4770      	bx	lr
		err = -EPERM;
    a2be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a2c2:	e7f7      	b.n	a2b4 <set_off_state+0x22>

0000a2c4 <set_starting_state>:
	__asm__ volatile(
    a2c4:	f04f 0320 	mov.w	r3, #32
    a2c8:	f3ef 8211 	mrs	r2, BASEPRI
    a2cc:	f383 8812 	msr	BASEPRI_MAX, r3
    a2d0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a2d4:	6803      	ldr	r3, [r0, #0]
    a2d6:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    a2da:	f003 0307 	and.w	r3, r3, #7
    a2de:	2b01      	cmp	r3, #1
    a2e0:	d008      	beq.n	a2f4 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    a2e2:	458c      	cmp	ip, r1
    a2e4:	d009      	beq.n	a2fa <set_starting_state+0x36>
		err = -EPERM;
    a2e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    a2ea:	f382 8811 	msr	BASEPRI, r2
    a2ee:	f3bf 8f6f 	isb	sy
}
    a2f2:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    a2f4:	6001      	str	r1, [r0, #0]
	int err = 0;
    a2f6:	2000      	movs	r0, #0
    a2f8:	e7f7      	b.n	a2ea <set_starting_state+0x26>
		err = -EALREADY;
    a2fa:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a2fe:	e7f4      	b.n	a2ea <set_starting_state+0x26>

0000a300 <set_on_state>:
	__asm__ volatile(
    a300:	f04f 0320 	mov.w	r3, #32
    a304:	f3ef 8211 	mrs	r2, BASEPRI
    a308:	f383 8812 	msr	BASEPRI_MAX, r3
    a30c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    a310:	6803      	ldr	r3, [r0, #0]
    a312:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a316:	f043 0302 	orr.w	r3, r3, #2
    a31a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    a31c:	f382 8811 	msr	BASEPRI, r2
    a320:	f3bf 8f6f 	isb	sy
}
    a324:	4770      	bx	lr

0000a326 <clkstarted_handle>:
{
    a326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a328:	4606      	mov	r6, r0
    a32a:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    a32c:	f7ff ffa0 	bl	a270 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    a330:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    a332:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    a334:	2300      	movs	r3, #0
    a336:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    a33a:	f7ff ffe1 	bl	a300 <set_on_state>
	if (callback) {
    a33e:	b11d      	cbz	r5, a348 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    a340:	463a      	mov	r2, r7
    a342:	4621      	mov	r1, r4
    a344:	4630      	mov	r0, r6
    a346:	47a8      	blx	r5
}
    a348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a34a <async_start>:
{
    a34a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a34e:	4606      	mov	r6, r0
    a350:	4690      	mov	r8, r2
    a352:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    a354:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    a356:	4629      	mov	r1, r5
    a358:	f7ff ff8a 	bl	a270 <get_sub_data>
    a35c:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    a35e:	9906      	ldr	r1, [sp, #24]
    a360:	3008      	adds	r0, #8
    a362:	f7ff ffaf 	bl	a2c4 <set_starting_state>
	if (err < 0) {
    a366:	2800      	cmp	r0, #0
    a368:	db09      	blt.n	a37e <async_start+0x34>
	subdata->cb = cb;
    a36a:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    a36e:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    a370:	4629      	mov	r1, r5
    a372:	4630      	mov	r0, r6
    a374:	f7ff ff83 	bl	a27e <get_sub_config>
    a378:	6803      	ldr	r3, [r0, #0]
    a37a:	4798      	blx	r3
	return 0;
    a37c:	2000      	movs	r0, #0
}
    a37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a382 <api_start>:
{
    a382:	b510      	push	{r4, lr}
    a384:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    a386:	2480      	movs	r4, #128	; 0x80
    a388:	9400      	str	r4, [sp, #0]
    a38a:	f7ff ffde 	bl	a34a <async_start>
}
    a38e:	b002      	add	sp, #8
    a390:	bd10      	pop	{r4, pc}

0000a392 <onoff_started_callback>:
{
    a392:	b510      	push	{r4, lr}
    a394:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    a396:	b2c9      	uxtb	r1, r1
    a398:	f7ff ff77 	bl	a28a <get_onoff_manager>
	notify(mgr, 0);
    a39c:	2100      	movs	r1, #0
    a39e:	47a0      	blx	r4
}
    a3a0:	bd10      	pop	{r4, pc}

0000a3a2 <hfclk_start>:
{
    a3a2:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    a3a4:	2001      	movs	r0, #1
    a3a6:	f7fb fa67 	bl	5878 <nrfx_clock_start>
}
    a3aa:	bd08      	pop	{r3, pc}

0000a3ac <lfclk_start>:
{
    a3ac:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    a3ae:	2000      	movs	r0, #0
    a3b0:	f7fb fa62 	bl	5878 <nrfx_clock_start>
}
    a3b4:	bd08      	pop	{r3, pc}

0000a3b6 <hfclk_stop>:
{
    a3b6:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    a3b8:	2001      	movs	r0, #1
    a3ba:	f7fb fad3 	bl	5964 <nrfx_clock_stop>
}
    a3be:	bd08      	pop	{r3, pc}

0000a3c0 <lfclk_stop>:
{
    a3c0:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    a3c2:	2000      	movs	r0, #0
    a3c4:	f7fb face 	bl	5964 <nrfx_clock_stop>
}
    a3c8:	bd08      	pop	{r3, pc}

0000a3ca <api_stop>:
{
    a3ca:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    a3cc:	2280      	movs	r2, #128	; 0x80
    a3ce:	f7f9 fbd3 	bl	3b78 <stop>
}
    a3d2:	bd08      	pop	{r3, pc}

0000a3d4 <blocking_start_callback>:
{
    a3d4:	b508      	push	{r3, lr}
    a3d6:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    a3d8:	f7fd fac8 	bl	796c <z_impl_k_sem_give>
}
    a3dc:	bd08      	pop	{r3, pc}

0000a3de <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    a3de:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    a3e2:	f020 0001 	bic.w	r0, r0, #1
    a3e6:	0540      	lsls	r0, r0, #21
    a3e8:	0d40      	lsrs	r0, r0, #21
    a3ea:	f240 2306 	movw	r3, #518	; 0x206
    a3ee:	4298      	cmp	r0, r3
    a3f0:	d033      	beq.n	a45a <get_drive+0x7c>
    a3f2:	d816      	bhi.n	a422 <get_drive+0x44>
    a3f4:	2806      	cmp	r0, #6
    a3f6:	d02c      	beq.n	a452 <get_drive+0x74>
    a3f8:	d906      	bls.n	a408 <get_drive+0x2a>
    a3fa:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    a3fe:	d10d      	bne.n	a41c <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    a400:	2301      	movs	r3, #1
    a402:	700b      	strb	r3, [r1, #0]
	int err = 0;
    a404:	2000      	movs	r0, #0
		break;
    a406:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    a408:	b300      	cbz	r0, a44c <get_drive+0x6e>
    a40a:	2802      	cmp	r0, #2
    a40c:	d103      	bne.n	a416 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    a40e:	2304      	movs	r3, #4
    a410:	700b      	strb	r3, [r1, #0]
	int err = 0;
    a412:	2000      	movs	r0, #0
		break;
    a414:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    a416:	f06f 0015 	mvn.w	r0, #21
    a41a:	4770      	bx	lr
    a41c:	f06f 0015 	mvn.w	r0, #21
    a420:	4770      	bx	lr
    a422:	f240 4302 	movw	r3, #1026	; 0x402
    a426:	4298      	cmp	r0, r3
    a428:	d01b      	beq.n	a462 <get_drive+0x84>
    a42a:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    a42e:	d103      	bne.n	a438 <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    a430:	2303      	movs	r3, #3
    a432:	700b      	strb	r3, [r1, #0]
	int err = 0;
    a434:	2000      	movs	r0, #0
		break;
    a436:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    a438:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    a43c:	d103      	bne.n	a446 <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    a43e:	2302      	movs	r3, #2
    a440:	700b      	strb	r3, [r1, #0]
	int err = 0;
    a442:	2000      	movs	r0, #0
		break;
    a444:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    a446:	f06f 0015 	mvn.w	r0, #21
    a44a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    a44c:	2000      	movs	r0, #0
    a44e:	7008      	strb	r0, [r1, #0]
		break;
    a450:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    a452:	2306      	movs	r3, #6
    a454:	700b      	strb	r3, [r1, #0]
	int err = 0;
    a456:	2000      	movs	r0, #0
		break;
    a458:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    a45a:	2307      	movs	r3, #7
    a45c:	700b      	strb	r3, [r1, #0]
	int err = 0;
    a45e:	2000      	movs	r0, #0
		break;
    a460:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    a462:	2305      	movs	r3, #5
    a464:	700b      	strb	r3, [r1, #0]
	int err = 0;
    a466:	2000      	movs	r0, #0
}
    a468:	4770      	bx	lr

0000a46a <get_pull>:
	if (flags & GPIO_PULL_UP) {
    a46a:	f010 0f10 	tst.w	r0, #16
    a46e:	d104      	bne.n	a47a <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    a470:	f010 0f20 	tst.w	r0, #32
    a474:	d103      	bne.n	a47e <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    a476:	2000      	movs	r0, #0
    a478:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    a47a:	2003      	movs	r0, #3
    a47c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    a47e:	2001      	movs	r0, #1
}
    a480:	4770      	bx	lr

0000a482 <gpio_nrfx_port_get_raw>:
	return port->config;
    a482:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a484:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    a486:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    a48a:	600b      	str	r3, [r1, #0]
}
    a48c:	2000      	movs	r0, #0
    a48e:	4770      	bx	lr

0000a490 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    a490:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a492:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    a494:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    a498:	4042      	eors	r2, r0
    a49a:	400a      	ands	r2, r1
    a49c:	4042      	eors	r2, r0
    p_reg->OUT = value;
    a49e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    a4a2:	2000      	movs	r0, #0
    a4a4:	4770      	bx	lr

0000a4a6 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    a4a6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a4a8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    a4aa:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    a4ae:	2000      	movs	r0, #0
    a4b0:	4770      	bx	lr

0000a4b2 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    a4b2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a4b4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    a4b6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    a4ba:	2000      	movs	r0, #0
    a4bc:	4770      	bx	lr

0000a4be <gpio_nrfx_port_toggle_bits>:
	return port->config;
    a4be:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a4c0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    a4c2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    a4c6:	404b      	eors	r3, r1
    p_reg->OUT = value;
    a4c8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    a4cc:	2000      	movs	r0, #0
    a4ce:	4770      	bx	lr

0000a4d0 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    a4d0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    a4d4:	d007      	beq.n	a4e6 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    a4d6:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    a4da:	d00d      	beq.n	a4f8 <get_trigger+0x28>
    a4dc:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    a4e0:	d008      	beq.n	a4f4 <get_trigger+0x24>
    a4e2:	2001      	movs	r0, #1
}
    a4e4:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    a4e6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    a4ea:	d001      	beq.n	a4f0 <get_trigger+0x20>
    a4ec:	2005      	movs	r0, #5
    a4ee:	4770      	bx	lr
    a4f0:	2004      	movs	r0, #4
    a4f2:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    a4f4:	2002      	movs	r0, #2
    a4f6:	4770      	bx	lr
    a4f8:	2003      	movs	r0, #3
    a4fa:	4770      	bx	lr

0000a4fc <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    a4fc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    a4fe:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    a500:	f04f 0120 	mov.w	r1, #32
    a504:	f3ef 8211 	mrs	r2, BASEPRI
    a508:	f381 8812 	msr	BASEPRI_MAX, r1
    a50c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a510:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    a514:	b131      	cbz	r1, a524 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a516:	2100      	movs	r1, #0
    a518:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    a51c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a520:	2101      	movs	r1, #1
    a522:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    a524:	f382 8811 	msr	BASEPRI, r2
    a528:	f3bf 8f6f 	isb	sy
}
    a52c:	4770      	bx	lr

0000a52e <uarte_nrfx_isr_int>:
{
    a52e:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    a530:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    a532:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    a534:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    a538:	f413 7f80 	tst.w	r3, #256	; 0x100
    a53c:	d002      	beq.n	a544 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a53e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    a542:	b9d3      	cbnz	r3, a57a <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a544:	686b      	ldr	r3, [r5, #4]
    a546:	f013 0f10 	tst.w	r3, #16
    a54a:	d015      	beq.n	a578 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    a54c:	f04f 0220 	mov.w	r2, #32
    a550:	f3ef 8311 	mrs	r3, BASEPRI
    a554:	f382 8812 	msr	BASEPRI_MAX, r2
    a558:	f3bf 8f6f 	isb	sy
    a55c:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    a560:	b112      	cbz	r2, a568 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    a562:	2200      	movs	r2, #0
    a564:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    a568:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    a56c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    a570:	f383 8811 	msr	BASEPRI, r3
    a574:	f3bf 8f6f 	isb	sy
}
    a578:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    a57a:	f7ff ffbf 	bl	a4fc <endtx_isr>
    a57e:	e7e1      	b.n	a544 <uarte_nrfx_isr_int+0x16>

0000a580 <uarte_nrfx_configure>:
{
    a580:	b570      	push	{r4, r5, r6, lr}
    a582:	b082      	sub	sp, #8
    a584:	4606      	mov	r6, r0
    a586:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    a588:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    a58a:	794b      	ldrb	r3, [r1, #5]
    a58c:	2b01      	cmp	r3, #1
    a58e:	d006      	beq.n	a59e <uarte_nrfx_configure+0x1e>
    a590:	2b03      	cmp	r3, #3
    a592:	d011      	beq.n	a5b8 <uarte_nrfx_configure+0x38>
    a594:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    a598:	4618      	mov	r0, r3
    a59a:	b002      	add	sp, #8
    a59c:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    a59e:	2300      	movs	r3, #0
    a5a0:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    a5a4:	79a3      	ldrb	r3, [r4, #6]
    a5a6:	2b03      	cmp	r3, #3
    a5a8:	d137      	bne.n	a61a <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    a5aa:	79e3      	ldrb	r3, [r4, #7]
    a5ac:	b143      	cbz	r3, a5c0 <uarte_nrfx_configure+0x40>
    a5ae:	2b01      	cmp	r3, #1
    a5b0:	d010      	beq.n	a5d4 <uarte_nrfx_configure+0x54>
    a5b2:	f06f 0385 	mvn.w	r3, #133	; 0x85
    a5b6:	e7ef      	b.n	a598 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    a5b8:	2310      	movs	r3, #16
    a5ba:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    a5be:	e7f1      	b.n	a5a4 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    a5c0:	2300      	movs	r3, #0
    a5c2:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    a5c6:	7923      	ldrb	r3, [r4, #4]
    a5c8:	b143      	cbz	r3, a5dc <uarte_nrfx_configure+0x5c>
    a5ca:	2b02      	cmp	r3, #2
    a5cc:	d021      	beq.n	a612 <uarte_nrfx_configure+0x92>
    a5ce:	f06f 0385 	mvn.w	r3, #133	; 0x85
    a5d2:	e7e1      	b.n	a598 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    a5d4:	2301      	movs	r3, #1
    a5d6:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    a5da:	e7f4      	b.n	a5c6 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    a5dc:	2300      	movs	r3, #0
    a5de:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    a5e2:	6821      	ldr	r1, [r4, #0]
    a5e4:	4630      	mov	r0, r6
    a5e6:	f7f9 fecf 	bl	4388 <baudrate_set>
    a5ea:	4603      	mov	r3, r0
    a5ec:	b9c0      	cbnz	r0, a620 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    a5ee:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    a5f0:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    a5f2:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    a5f6:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    a5fa:	f89d 2004 	ldrb.w	r2, [sp, #4]
    a5fe:	4331      	orrs	r1, r6
    a600:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    a602:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    a606:	3504      	adds	r5, #4
    a608:	e894 0003 	ldmia.w	r4, {r0, r1}
    a60c:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    a610:	e7c2      	b.n	a598 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    a612:	230e      	movs	r3, #14
    a614:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    a618:	e7e3      	b.n	a5e2 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    a61a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    a61e:	e7bb      	b.n	a598 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    a620:	f06f 0385 	mvn.w	r3, #133	; 0x85
    a624:	e7b8      	b.n	a598 <uarte_nrfx_configure+0x18>

0000a626 <uarte_nrfx_config_get>:
{
    a626:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    a628:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    a62a:	3304      	adds	r3, #4
    a62c:	e893 0003 	ldmia.w	r3, {r0, r1}
    a630:	e882 0003 	stmia.w	r2, {r0, r1}
}
    a634:	2000      	movs	r0, #0
    a636:	4770      	bx	lr

0000a638 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    a638:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    a63a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    a63c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    a640:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    a644:	4770      	bx	lr

0000a646 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    a646:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    a648:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    a64a:	685b      	ldr	r3, [r3, #4]
    a64c:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a650:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    a654:	b929      	cbnz	r1, a662 <is_tx_ready+0x1c>
    a656:	b933      	cbnz	r3, a666 <is_tx_ready+0x20>
    a658:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    a65c:	b92b      	cbnz	r3, a66a <is_tx_ready+0x24>
    a65e:	2000      	movs	r0, #0
    a660:	4770      	bx	lr
    a662:	2001      	movs	r0, #1
    a664:	4770      	bx	lr
    a666:	2000      	movs	r0, #0
    a668:	4770      	bx	lr
    a66a:	2001      	movs	r0, #1
}
    a66c:	4770      	bx	lr

0000a66e <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    a66e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    a670:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a672:	2208      	movs	r2, #8
    a674:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    a678:	4770      	bx	lr

0000a67a <tx_start>:
{
    a67a:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    a67c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    a67e:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a680:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a684:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a688:	2200      	movs	r2, #0
    a68a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    a68e:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    a692:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    a696:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a69a:	685b      	ldr	r3, [r3, #4]
    a69c:	f013 0f10 	tst.w	r3, #16
    a6a0:	d102      	bne.n	a6a8 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a6a2:	2301      	movs	r3, #1
    a6a4:	60a3      	str	r3, [r4, #8]
}
    a6a6:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    a6a8:	2101      	movs	r1, #1
    a6aa:	f7ff ffe0 	bl	a66e <uarte_enable>
    p_reg->INTENSET = mask;
    a6ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    a6b2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    a6b6:	e7f4      	b.n	a6a2 <tx_start+0x28>

0000a6b8 <uarte_nrfx_poll_in>:
{
    a6b8:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    a6ba:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    a6bc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    a6be:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a6c0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    a6c4:	b152      	cbz	r2, a6dc <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    a6c6:	7c62      	ldrb	r2, [r4, #17]
    a6c8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a6ca:	2000      	movs	r0, #0
    a6cc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    a6d0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a6d4:	2201      	movs	r2, #1
    a6d6:	601a      	str	r2, [r3, #0]
}
    a6d8:	bc10      	pop	{r4}
    a6da:	4770      	bx	lr
		return -1;
    a6dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a6e0:	e7fa      	b.n	a6d8 <uarte_nrfx_poll_in+0x20>

0000a6e2 <wait_tx_ready>:
{
    a6e2:	b570      	push	{r4, r5, r6, lr}
    a6e4:	4606      	mov	r6, r0
    a6e6:	e014      	b.n	a712 <wait_tx_ready+0x30>
		if (res) {
    a6e8:	b17d      	cbz	r5, a70a <wait_tx_ready+0x28>
	__asm__ volatile(
    a6ea:	f04f 0320 	mov.w	r3, #32
    a6ee:	f3ef 8411 	mrs	r4, BASEPRI
    a6f2:	f383 8812 	msr	BASEPRI_MAX, r3
    a6f6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    a6fa:	4630      	mov	r0, r6
    a6fc:	f7ff ffa3 	bl	a646 <is_tx_ready>
    a700:	b9a0      	cbnz	r0, a72c <wait_tx_ready+0x4a>
	__asm__ volatile(
    a702:	f384 8811 	msr	BASEPRI, r4
    a706:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    a70a:	2021      	movs	r0, #33	; 0x21
    a70c:	2100      	movs	r1, #0
    a70e:	f7fe fb53 	bl	8db8 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    a712:	2464      	movs	r4, #100	; 0x64
    a714:	4630      	mov	r0, r6
    a716:	f7ff ff96 	bl	a646 <is_tx_ready>
    a71a:	4605      	mov	r5, r0
    a71c:	2800      	cmp	r0, #0
    a71e:	d1e3      	bne.n	a6e8 <wait_tx_ready+0x6>
    a720:	2001      	movs	r0, #1
    a722:	f000 f9c1 	bl	aaa8 <nrfx_busy_wait>
    a726:	3c01      	subs	r4, #1
    a728:	d1f4      	bne.n	a714 <wait_tx_ready+0x32>
    a72a:	e7dd      	b.n	a6e8 <wait_tx_ready+0x6>
}
    a72c:	4620      	mov	r0, r4
    a72e:	bd70      	pop	{r4, r5, r6, pc}

0000a730 <z_log_msg2_runtime_create>:
{
    a730:	b510      	push	{r4, lr}
    a732:	b086      	sub	sp, #24
	va_start(ap, fmt);
    a734:	ac0b      	add	r4, sp, #44	; 0x2c
    a736:	9405      	str	r4, [sp, #20]
    a738:	9403      	str	r4, [sp, #12]
    a73a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a73c:	9402      	str	r4, [sp, #8]
    a73e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a740:	9401      	str	r4, [sp, #4]
    a742:	9c08      	ldr	r4, [sp, #32]
    a744:	9400      	str	r4, [sp, #0]
    a746:	f7f7 fe2b 	bl	23a0 <z_impl_z_log_msg2_runtime_vcreate>
}
    a74a:	b006      	add	sp, #24
    a74c:	bd10      	pop	{r4, pc}

0000a74e <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    a74e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a752:	b083      	sub	sp, #12
    a754:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    a756:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    a758:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    a75a:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    a75e:	2100      	movs	r1, #0
    a760:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    a764:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    a768:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    a76c:	aa01      	add	r2, sp, #4
    a76e:	4648      	mov	r0, r9
    a770:	f000 f8e6 	bl	a940 <pinctrl_lookup_state>
	if (ret < 0) {
    a774:	1e04      	subs	r4, r0, #0
    a776:	db07      	blt.n	a788 <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    a778:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    a77a:	f8d9 2000 	ldr.w	r2, [r9]
    a77e:	7919      	ldrb	r1, [r3, #4]
    a780:	6818      	ldr	r0, [r3, #0]
    a782:	f7fa f9c3 	bl	4b0c <pinctrl_configure_pins>
    a786:	4604      	mov	r4, r0
	if (err < 0) {
    a788:	2c00      	cmp	r4, #0
    a78a:	db35      	blt.n	a7f8 <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    a78c:	f108 0104 	add.w	r1, r8, #4
    a790:	4628      	mov	r0, r5
    a792:	f7ff fef5 	bl	a580 <uarte_nrfx_configure>
	if (err) {
    a796:	4604      	mov	r4, r0
    a798:	bb70      	cbnz	r0, a7f8 <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    a79a:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    a79c:	f013 0f02 	tst.w	r3, #2
    a7a0:	d12e      	bne.n	a800 <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    a7a2:	2308      	movs	r3, #8
    a7a4:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    a7a8:	7a3b      	ldrb	r3, [r7, #8]
    a7aa:	b95b      	cbnz	r3, a7c4 <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a7ac:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    a7b0:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    a7b4:	f108 0311 	add.w	r3, r8, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    a7b8:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    a7bc:	2301      	movs	r3, #1
    a7be:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a7c2:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    a7c4:	687b      	ldr	r3, [r7, #4]
    a7c6:	f013 0f02 	tst.w	r3, #2
    a7ca:	d103      	bne.n	a7d4 <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
    a7cc:	f44f 7380 	mov.w	r3, #256	; 0x100
    a7d0:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    a7d4:	687b      	ldr	r3, [r7, #4]
    a7d6:	f013 0f10 	tst.w	r3, #16
    a7da:	d003      	beq.n	a7e4 <uarte_instance_init+0x96>
    a7dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    a7e0:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    a7e4:	f108 0310 	add.w	r3, r8, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    a7e8:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    a7ec:	2300      	movs	r3, #0
    a7ee:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a7f2:	2301      	movs	r3, #1
    a7f4:	60b3      	str	r3, [r6, #8]
    a7f6:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    a7f8:	4620      	mov	r0, r4
    a7fa:	b003      	add	sp, #12
    a7fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    a800:	4641      	mov	r1, r8
    a802:	4630      	mov	r0, r6
    a804:	f7f9 fea0 	bl	4548 <endtx_stoptx_ppi_init>
		if (err < 0) {
    a808:	2800      	cmp	r0, #0
    a80a:	daca      	bge.n	a7a2 <uarte_instance_init+0x54>
			return err;
    a80c:	4604      	mov	r4, r0
    a80e:	e7f3      	b.n	a7f8 <uarte_instance_init+0xaa>

0000a810 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    a810:	b510      	push	{r4, lr}
    a812:	4604      	mov	r4, r0
    a814:	2200      	movs	r2, #0
    a816:	2101      	movs	r1, #1
    a818:	2002      	movs	r0, #2
    a81a:	f7f8 fa4b 	bl	2cb4 <z_arm_irq_priority_set>
    a81e:	2002      	movs	r0, #2
    a820:	f7f8 fa2c 	bl	2c7c <arch_irq_enable>
    a824:	2100      	movs	r1, #0
    a826:	4620      	mov	r0, r4
    a828:	f7ff ff91 	bl	a74e <uarte_instance_init>
    a82c:	bd10      	pop	{r4, pc}

0000a82e <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    a82e:	b510      	push	{r4, lr}
    a830:	4604      	mov	r4, r0
    a832:	2200      	movs	r2, #0
    a834:	2101      	movs	r1, #1
    a836:	2028      	movs	r0, #40	; 0x28
    a838:	f7f8 fa3c 	bl	2cb4 <z_arm_irq_priority_set>
    a83c:	2028      	movs	r0, #40	; 0x28
    a83e:	f7f8 fa1d 	bl	2c7c <arch_irq_enable>
    a842:	2100      	movs	r1, #0
    a844:	4620      	mov	r0, r4
    a846:	f7ff ff82 	bl	a74e <uarte_instance_init>
    a84a:	bd10      	pop	{r4, pc}

0000a84c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    a84c:	4770      	bx	lr

0000a84e <counter_sub>:
	return (a - b) & COUNTER_MAX;
    a84e:	1a40      	subs	r0, r0, r1
}
    a850:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a854:	4770      	bx	lr

0000a856 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    a856:	f100 0350 	add.w	r3, r0, #80	; 0x50
    a85a:	009b      	lsls	r3, r3, #2
    a85c:	b29b      	uxth	r3, r3
    a85e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a862:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    a866:	2200      	movs	r2, #0
    a868:	601a      	str	r2, [r3, #0]
    a86a:	681b      	ldr	r3, [r3, #0]
}
    a86c:	4770      	bx	lr

0000a86e <absolute_time_to_cc>:
}
    a86e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a872:	4770      	bx	lr

0000a874 <full_int_lock>:
	__asm__ volatile(
    a874:	f04f 0320 	mov.w	r3, #32
    a878:	f3ef 8011 	mrs	r0, BASEPRI
    a87c:	f383 8812 	msr	BASEPRI_MAX, r3
    a880:	f3bf 8f6f 	isb	sy
}
    a884:	4770      	bx	lr

0000a886 <full_int_unlock>:
	__asm__ volatile(
    a886:	f380 8811 	msr	BASEPRI, r0
    a88a:	f3bf 8f6f 	isb	sy
}
    a88e:	4770      	bx	lr

0000a890 <set_absolute_alarm>:
{
    a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a892:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    a894:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    a898:	f7f9 fe94 	bl	45c4 <get_comparator>
    a89c:	4607      	mov	r7, r0
    a89e:	e019      	b.n	a8d4 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    a8a0:	2013      	movs	r0, #19
    a8a2:	f000 fa24 	bl	acee <z_impl_k_busy_wait>
}
    a8a6:	e022      	b.n	a8ee <set_absolute_alarm+0x5e>
		event_clear(chan);
    a8a8:	4630      	mov	r0, r6
    a8aa:	f7ff ffd4 	bl	a856 <event_clear>
		event_enable(chan);
    a8ae:	4630      	mov	r0, r6
    a8b0:	f7f9 fe90 	bl	45d4 <event_enable>
		set_comparator(chan, cc_val);
    a8b4:	4629      	mov	r1, r5
    a8b6:	4630      	mov	r0, r6
    a8b8:	f7f9 fe7a 	bl	45b0 <set_comparator>
		now2 = counter();
    a8bc:	f7f9 fe9e 	bl	45fc <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    a8c0:	4284      	cmp	r4, r0
    a8c2:	d01e      	beq.n	a902 <set_absolute_alarm+0x72>
    a8c4:	1c81      	adds	r1, r0, #2
    a8c6:	4628      	mov	r0, r5
    a8c8:	f7ff ffc1 	bl	a84e <counter_sub>
	} while ((now2 != now) &&
    a8cc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a8d0:	d917      	bls.n	a902 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    a8d2:	462f      	mov	r7, r5
		now = counter();
    a8d4:	f7f9 fe92 	bl	45fc <counter>
    a8d8:	4604      	mov	r4, r0
		set_comparator(chan, now);
    a8da:	4601      	mov	r1, r0
    a8dc:	4630      	mov	r0, r6
    a8de:	f7f9 fe67 	bl	45b0 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    a8e2:	4621      	mov	r1, r4
    a8e4:	4638      	mov	r0, r7
    a8e6:	f7ff ffb2 	bl	a84e <counter_sub>
    a8ea:	2801      	cmp	r0, #1
    a8ec:	d0d8      	beq.n	a8a0 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    a8ee:	1ca7      	adds	r7, r4, #2
    a8f0:	4639      	mov	r1, r7
    a8f2:	4628      	mov	r0, r5
    a8f4:	f7ff ffab 	bl	a84e <counter_sub>
    a8f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a8fc:	d9d4      	bls.n	a8a8 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    a8fe:	463d      	mov	r5, r7
    a900:	e7d2      	b.n	a8a8 <set_absolute_alarm+0x18>
}
    a902:	4628      	mov	r0, r5
    a904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a906 <compare_set>:
{
    a906:	b5f0      	push	{r4, r5, r6, r7, lr}
    a908:	b083      	sub	sp, #12
    a90a:	4604      	mov	r4, r0
    a90c:	4617      	mov	r7, r2
    a90e:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    a910:	f7f9 fe7a 	bl	4608 <compare_int_lock>
    a914:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    a916:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a918:	9301      	str	r3, [sp, #4]
    a91a:	9b08      	ldr	r3, [sp, #32]
    a91c:	9300      	str	r3, [sp, #0]
    a91e:	463a      	mov	r2, r7
    a920:	462b      	mov	r3, r5
    a922:	4620      	mov	r0, r4
    a924:	f7f9 ff60 	bl	47e8 <compare_set_nolocks>
    a928:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    a92a:	4631      	mov	r1, r6
    a92c:	4620      	mov	r0, r4
    a92e:	f7f9 fecf 	bl	46d0 <compare_int_unlock>
}
    a932:	4628      	mov	r0, r5
    a934:	b003      	add	sp, #12
    a936:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a938 <sys_clock_cycle_get_32>:
{
    a938:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    a93a:	f7f9 ff35 	bl	47a8 <z_nrf_rtc_timer_read>
}
    a93e:	bd08      	pop	{r3, pc}

0000a940 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    a940:	b410      	push	{r4}
	*state = &config->states[0];
    a942:	6843      	ldr	r3, [r0, #4]
    a944:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    a946:	e001      	b.n	a94c <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    a948:	3408      	adds	r4, #8
    a94a:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    a94c:	6814      	ldr	r4, [r2, #0]
    a94e:	7a03      	ldrb	r3, [r0, #8]
    a950:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    a954:	3b01      	subs	r3, #1
    a956:	f8d0 c004 	ldr.w	ip, [r0, #4]
    a95a:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    a95e:	429c      	cmp	r4, r3
    a960:	d804      	bhi.n	a96c <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    a962:	7963      	ldrb	r3, [r4, #5]
    a964:	428b      	cmp	r3, r1
    a966:	d1ef      	bne.n	a948 <pinctrl_lookup_state+0x8>
			return 0;
    a968:	2000      	movs	r0, #0
    a96a:	e001      	b.n	a970 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    a96c:	f06f 0001 	mvn.w	r0, #1
}
    a970:	bc10      	pop	{r4}
    a972:	4770      	bx	lr

0000a974 <z_log_msg2_runtime_create>:
{
    a974:	b510      	push	{r4, lr}
    a976:	b086      	sub	sp, #24
	va_start(ap, fmt);
    a978:	ac0b      	add	r4, sp, #44	; 0x2c
    a97a:	9405      	str	r4, [sp, #20]
    a97c:	9403      	str	r4, [sp, #12]
    a97e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    a980:	9402      	str	r4, [sp, #8]
    a982:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a984:	9401      	str	r4, [sp, #4]
    a986:	9c08      	ldr	r4, [sp, #32]
    a988:	9400      	str	r4, [sp, #0]
    a98a:	f7f7 fd09 	bl	23a0 <z_impl_z_log_msg2_runtime_vcreate>
}
    a98e:	b006      	add	sp, #24
    a990:	bd10      	pop	{r4, pc}

0000a992 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    a992:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    a994:	f7fe febe 	bl	9714 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    a998:	bd08      	pop	{r3, pc}

0000a99a <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    a99a:	b510      	push	{r4, lr}
    a99c:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    a99e:	f7f8 f833 	bl	2a08 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    a9a2:	f7f8 f8ef 	bl	2b84 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    a9a6:	4620      	mov	r0, r4
    a9a8:	f7ff fff3 	bl	a992 <hw_cc3xx_init_internal>
	return res;
}
    a9ac:	bd10      	pop	{r4, pc}

0000a9ae <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a9ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    a9b2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    a9b6:	2b08      	cmp	r3, #8
    a9b8:	d001      	beq.n	a9be <nrf52_errata_36+0x10>
        return false;
    a9ba:	2000      	movs	r0, #0
    a9bc:	4770      	bx	lr
                        return true;
    a9be:	2001      	movs	r0, #1
}
    a9c0:	4770      	bx	lr

0000a9c2 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a9c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    a9c6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    a9ca:	2b08      	cmp	r3, #8
    a9cc:	d001      	beq.n	a9d2 <nrf52_errata_66+0x10>
        return false;
    a9ce:	2000      	movs	r0, #0
    a9d0:	4770      	bx	lr
                        return true;
    a9d2:	2001      	movs	r0, #1
}
    a9d4:	4770      	bx	lr

0000a9d6 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a9d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    a9da:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a9de:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    a9e2:	2a08      	cmp	r2, #8
    a9e4:	d001      	beq.n	a9ea <nrf52_errata_98+0x14>
        return false;
    a9e6:	2000      	movs	r0, #0
    a9e8:	4770      	bx	lr
                switch(var2)
    a9ea:	2b00      	cmp	r3, #0
    a9ec:	d804      	bhi.n	a9f8 <nrf52_errata_98+0x22>
    a9ee:	e8df f003 	tbb	[pc, r3]
    a9f2:	01          	.byte	0x01
    a9f3:	00          	.byte	0x00
    a9f4:	2001      	movs	r0, #1
    a9f6:	4770      	bx	lr
                        return false;
    a9f8:	2000      	movs	r0, #0
}
    a9fa:	4770      	bx	lr

0000a9fc <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a9fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    aa00:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    aa04:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    aa08:	2a08      	cmp	r2, #8
    aa0a:	d001      	beq.n	aa10 <nrf52_errata_103+0x14>
        return false;
    aa0c:	2000      	movs	r0, #0
    aa0e:	4770      	bx	lr
                switch(var2)
    aa10:	2b00      	cmp	r3, #0
    aa12:	d804      	bhi.n	aa1e <nrf52_errata_103+0x22>
    aa14:	e8df f003 	tbb	[pc, r3]
    aa18:	01          	.byte	0x01
    aa19:	00          	.byte	0x00
    aa1a:	2001      	movs	r0, #1
    aa1c:	4770      	bx	lr
                        return false;
    aa1e:	2000      	movs	r0, #0
}
    aa20:	4770      	bx	lr

0000aa22 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    aa22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    aa26:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    aa2a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    aa2e:	2a08      	cmp	r2, #8
    aa30:	d001      	beq.n	aa36 <nrf52_errata_115+0x14>
        return false;
    aa32:	2000      	movs	r0, #0
    aa34:	4770      	bx	lr
                switch(var2)
    aa36:	2b00      	cmp	r3, #0
    aa38:	d804      	bhi.n	aa44 <nrf52_errata_115+0x22>
    aa3a:	e8df f003 	tbb	[pc, r3]
    aa3e:	01          	.byte	0x01
    aa3f:	00          	.byte	0x00
    aa40:	2001      	movs	r0, #1
    aa42:	4770      	bx	lr
                        return false;
    aa44:	2000      	movs	r0, #0
}
    aa46:	4770      	bx	lr

0000aa48 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    aa48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    aa4c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    aa50:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    aa54:	2a08      	cmp	r2, #8
    aa56:	d001      	beq.n	aa5c <nrf52_errata_120+0x14>
        return false;
    aa58:	2000      	movs	r0, #0
    aa5a:	4770      	bx	lr
                switch(var2)
    aa5c:	2b00      	cmp	r3, #0
    aa5e:	d804      	bhi.n	aa6a <nrf52_errata_120+0x22>
    aa60:	e8df f003 	tbb	[pc, r3]
    aa64:	01          	.byte	0x01
    aa65:	00          	.byte	0x00
    aa66:	2001      	movs	r0, #1
    aa68:	4770      	bx	lr
                        return false;
    aa6a:	2000      	movs	r0, #0
}
    aa6c:	4770      	bx	lr

0000aa6e <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    aa6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    aa72:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    aa76:	2b08      	cmp	r3, #8
    aa78:	d001      	beq.n	aa7e <nrf52_errata_136+0x10>
        return false;
    aa7a:	2000      	movs	r0, #0
    aa7c:	4770      	bx	lr
                        return true;
    aa7e:	2001      	movs	r0, #1
}
    aa80:	4770      	bx	lr

0000aa82 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    aa82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    aa86:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    aa8a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    aa8e:	2a08      	cmp	r2, #8
    aa90:	d001      	beq.n	aa96 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    aa92:	2000      	movs	r0, #0
    aa94:	4770      	bx	lr
                switch(var2)
    aa96:	2b04      	cmp	r3, #4
    aa98:	d801      	bhi.n	aa9e <nrf52_configuration_249+0x1c>
    aa9a:	2000      	movs	r0, #0
    aa9c:	4770      	bx	lr
                        return true;
    aa9e:	2001      	movs	r0, #1
    #endif
}
    aaa0:	4770      	bx	lr

0000aaa2 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    aaa2:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    aaa4:	4780      	blx	r0
}
    aaa6:	bd08      	pop	{r3, pc}

0000aaa8 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    aaa8:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    aaaa:	f000 f920 	bl	acee <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    aaae:	bd08      	pop	{r3, pc}

0000aab0 <clock_initial_lfclksrc_get>:
}
    aab0:	2000      	movs	r0, #0
    aab2:	4770      	bx	lr

0000aab4 <clock_lfclksrc_tweak>:
{
    aab4:	b538      	push	{r3, r4, r5, lr}
    aab6:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    aab8:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    aaba:	2b01      	cmp	r3, #1
    aabc:	d002      	beq.n	aac4 <clock_lfclksrc_tweak+0x10>
    aabe:	b933      	cbnz	r3, aace <clock_lfclksrc_tweak+0x1a>
    aac0:	2301      	movs	r3, #1
    aac2:	e000      	b.n	aac6 <clock_lfclksrc_tweak+0x12>
    aac4:	2301      	movs	r3, #1
    if (!is_correct_clk)
    aac6:	461d      	mov	r5, r3
    aac8:	b11b      	cbz	r3, aad2 <clock_lfclksrc_tweak+0x1e>
}
    aaca:	4628      	mov	r0, r5
    aacc:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    aace:	2300      	movs	r3, #0
    aad0:	e7f9      	b.n	aac6 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    aad2:	2000      	movs	r0, #0
    aad4:	f7fa fdf2 	bl	56bc <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    aad8:	f7ff ffea 	bl	aab0 <clock_initial_lfclksrc_get>
    aadc:	6020      	str	r0, [r4, #0]
    aade:	e7f4      	b.n	aaca <clock_lfclksrc_tweak+0x16>

0000aae0 <pin_is_task_output>:
{
    aae0:	b510      	push	{r4, lr}
    aae2:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    aae4:	f7fa ffbc 	bl	5a60 <pin_is_output>
    aae8:	b128      	cbz	r0, aaf6 <pin_is_task_output+0x16>
    aaea:	4620      	mov	r0, r4
    aaec:	f7fa ffa2 	bl	5a34 <pin_in_use_by_te>
    aaf0:	b118      	cbz	r0, aafa <pin_is_task_output+0x1a>
    aaf2:	2001      	movs	r0, #1
    aaf4:	e000      	b.n	aaf8 <pin_is_task_output+0x18>
    aaf6:	2000      	movs	r0, #0
}
    aaf8:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    aafa:	2000      	movs	r0, #0
    aafc:	e7fc      	b.n	aaf8 <pin_is_task_output+0x18>

0000aafe <pin_is_input>:
{
    aafe:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    ab00:	f7fa ffae 	bl	5a60 <pin_is_output>
    ab04:	f080 0001 	eor.w	r0, r0, #1
}
    ab08:	b2c0      	uxtb	r0, r0
    ab0a:	bd08      	pop	{r3, pc}

0000ab0c <gpiote_polarity_to_trigger>:
}
    ab0c:	4770      	bx	lr

0000ab0e <gpiote_trigger_to_polarity>:
}
    ab0e:	4770      	bx	lr

0000ab10 <is_level>:
}
    ab10:	2803      	cmp	r0, #3
    ab12:	bf94      	ite	ls
    ab14:	2000      	movls	r0, #0
    ab16:	2001      	movhi	r0, #1
    ab18:	4770      	bx	lr

0000ab1a <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    ab1a:	b508      	push	{r3, lr}
  _DoInit();
    ab1c:	f7fb ff6a 	bl	69f4 <_DoInit>
}
    ab20:	bd08      	pop	{r3, pc}

0000ab22 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    ab22:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    ab24:	f7ff fff9 	bl	ab1a <SEGGER_RTT_Init>

	return 0;
}
    ab28:	2000      	movs	r0, #0
    ab2a:	bd08      	pop	{r3, pc}

0000ab2c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    ab2c:	b148      	cbz	r0, ab42 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    ab2e:	68c3      	ldr	r3, [r0, #12]
    ab30:	8818      	ldrh	r0, [r3, #0]
    ab32:	f3c0 0008 	ubfx	r0, r0, #0, #9
    ab36:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    ab3a:	bf14      	ite	ne
    ab3c:	2000      	movne	r0, #0
    ab3e:	2001      	moveq	r0, #1
    ab40:	4770      	bx	lr
		return false;
    ab42:	2000      	movs	r0, #0
}
    ab44:	4770      	bx	lr

0000ab46 <z_log_msg2_runtime_create>:
{
    ab46:	b510      	push	{r4, lr}
    ab48:	b086      	sub	sp, #24
	va_start(ap, fmt);
    ab4a:	ac0b      	add	r4, sp, #44	; 0x2c
    ab4c:	9405      	str	r4, [sp, #20]
    ab4e:	9403      	str	r4, [sp, #12]
    ab50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ab52:	9402      	str	r4, [sp, #8]
    ab54:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ab56:	9401      	str	r4, [sp, #4]
    ab58:	9c08      	ldr	r4, [sp, #32]
    ab5a:	9400      	str	r4, [sp, #0]
    ab5c:	f7f7 fc20 	bl	23a0 <z_impl_z_log_msg2_runtime_vcreate>
}
    ab60:	b006      	add	sp, #24
    ab62:	bd10      	pop	{r4, pc}

0000ab64 <z_early_memset>:
{
    ab64:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    ab66:	f7ff fb40 	bl	a1ea <memset>
}
    ab6a:	bd08      	pop	{r3, pc}

0000ab6c <z_early_memcpy>:
{
    ab6c:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    ab6e:	f7ff fb0d 	bl	a18c <memcpy>
}
    ab72:	bd08      	pop	{r3, pc}

0000ab74 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    ab74:	6902      	ldr	r2, [r0, #16]
    ab76:	6943      	ldr	r3, [r0, #20]
    ab78:	431a      	orrs	r2, r3
    ab7a:	f012 0203 	ands.w	r2, r2, #3
    ab7e:	d10d      	bne.n	ab9c <create_free_list+0x28>
	slab->free_list = NULL;
    ab80:	2100      	movs	r1, #0
    ab82:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    ab84:	e005      	b.n	ab92 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    ab86:	6981      	ldr	r1, [r0, #24]
    ab88:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    ab8a:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    ab8c:	6901      	ldr	r1, [r0, #16]
    ab8e:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    ab90:	3201      	adds	r2, #1
    ab92:	68c1      	ldr	r1, [r0, #12]
    ab94:	4291      	cmp	r1, r2
    ab96:	d8f6      	bhi.n	ab86 <create_free_list+0x12>
	return 0;
    ab98:	2000      	movs	r0, #0
    ab9a:	4770      	bx	lr
		return -EINVAL;
    ab9c:	f06f 0015 	mvn.w	r0, #21
}
    aba0:	4770      	bx	lr

0000aba2 <k_mem_slab_init>:
{
    aba2:	b510      	push	{r4, lr}
    aba4:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    aba6:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    aba8:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    abaa:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    abac:	2300      	movs	r3, #0
    abae:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    abb0:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    abb2:	f7ff ffdf 	bl	ab74 <create_free_list>
	if (rc < 0) {
    abb6:	2800      	cmp	r0, #0
    abb8:	db01      	blt.n	abbe <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    abba:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    abbc:	6064      	str	r4, [r4, #4]
}
    abbe:	bd10      	pop	{r4, pc}

0000abc0 <setup_thread_stack>:
{
    abc0:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    abc2:	3207      	adds	r2, #7
    abc4:	f022 0207 	bic.w	r2, r2, #7
    abc8:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    abcc:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    abd0:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    abd4:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    abd8:	2200      	movs	r2, #0
    abda:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    abde:	18c8      	adds	r0, r1, r3
    abe0:	bc10      	pop	{r4}
    abe2:	4770      	bx	lr

0000abe4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    abe4:	f3ef 8005 	mrs	r0, IPSR
}
    abe8:	3800      	subs	r0, #0
    abea:	bf18      	it	ne
    abec:	2001      	movne	r0, #1
    abee:	4770      	bx	lr

0000abf0 <k_thread_name_get>:
}
    abf0:	3074      	adds	r0, #116	; 0x74
    abf2:	4770      	bx	lr

0000abf4 <z_impl_k_thread_start>:
{
    abf4:	b508      	push	{r3, lr}
	z_sched_start(thread);
    abf6:	f7fd fb41 	bl	827c <z_sched_start>
}
    abfa:	bd08      	pop	{r3, pc}

0000abfc <z_init_thread_base>:
{
    abfc:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    abfe:	2400      	movs	r4, #0
    ac00:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    ac02:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    ac04:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    ac06:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    ac08:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    ac0a:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    ac0c:	61c4      	str	r4, [r0, #28]
}
    ac0e:	bc10      	pop	{r4}
    ac10:	4770      	bx	lr

0000ac12 <z_pm_save_idle_exit>:
{
    ac12:	b508      	push	{r3, lr}
	pm_system_resume();
    ac14:	f7f7 fd02 	bl	261c <pm_system_resume>
	sys_clock_idle_exit();
    ac18:	f7ff fe18 	bl	a84c <sys_clock_idle_exit>
}
    ac1c:	bd08      	pop	{r3, pc}

0000ac1e <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    ac1e:	4288      	cmp	r0, r1
    ac20:	da00      	bge.n	ac24 <new_prio_for_inheritance+0x6>
    ac22:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    ac24:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    ac28:	db01      	blt.n	ac2e <new_prio_for_inheritance+0x10>
    ac2a:	4608      	mov	r0, r1
    ac2c:	4770      	bx	lr
    ac2e:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    ac32:	4770      	bx	lr

0000ac34 <adjust_owner_prio>:
{
    ac34:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    ac36:	6880      	ldr	r0, [r0, #8]
    ac38:	f990 300e 	ldrsb.w	r3, [r0, #14]
    ac3c:	428b      	cmp	r3, r1
    ac3e:	d101      	bne.n	ac44 <adjust_owner_prio+0x10>
	return false;
    ac40:	2000      	movs	r0, #0
}
    ac42:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    ac44:	f7fd fcd0 	bl	85e8 <z_set_prio>
    ac48:	e7fb      	b.n	ac42 <adjust_owner_prio+0xe>

0000ac4a <z_impl_k_mutex_init>:
{
    ac4a:	4603      	mov	r3, r0
	mutex->owner = NULL;
    ac4c:	2000      	movs	r0, #0
    ac4e:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    ac50:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    ac52:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    ac54:	605b      	str	r3, [r3, #4]
}
    ac56:	4770      	bx	lr

0000ac58 <thread_active_elsewhere>:
}
    ac58:	2000      	movs	r0, #0
    ac5a:	4770      	bx	lr

0000ac5c <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    ac5c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    ac60:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    ac64:	4283      	cmp	r3, r0
    ac66:	d001      	beq.n	ac6c <z_sched_prio_cmp+0x10>
		return b2 - b1;
    ac68:	1ac0      	subs	r0, r0, r3
    ac6a:	4770      	bx	lr
	return 0;
    ac6c:	2000      	movs	r0, #0
}
    ac6e:	4770      	bx	lr

0000ac70 <z_reschedule_irqlock>:
{
    ac70:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ac72:	4603      	mov	r3, r0
    ac74:	b920      	cbnz	r0, ac80 <z_reschedule_irqlock+0x10>
    ac76:	f3ef 8205 	mrs	r2, IPSR
    ac7a:	b942      	cbnz	r2, ac8e <z_reschedule_irqlock+0x1e>
    ac7c:	2201      	movs	r2, #1
    ac7e:	e000      	b.n	ac82 <z_reschedule_irqlock+0x12>
    ac80:	2200      	movs	r2, #0
	if (resched(key)) {
    ac82:	b932      	cbnz	r2, ac92 <z_reschedule_irqlock+0x22>
    ac84:	f383 8811 	msr	BASEPRI, r3
    ac88:	f3bf 8f6f 	isb	sy
}
    ac8c:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    ac8e:	2200      	movs	r2, #0
    ac90:	e7f7      	b.n	ac82 <z_reschedule_irqlock+0x12>
    ac92:	4618      	mov	r0, r3
    ac94:	f7f8 f864 	bl	2d60 <arch_swap>
	return ret;
    ac98:	e7f8      	b.n	ac8c <z_reschedule_irqlock+0x1c>

0000ac9a <z_priq_dumb_best>:
{
    ac9a:	4603      	mov	r3, r0
	return list->head == list;
    ac9c:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ac9e:	4283      	cmp	r3, r0
    aca0:	d000      	beq.n	aca4 <z_priq_dumb_best+0xa>
}
    aca2:	4770      	bx	lr
	struct k_thread *thread = NULL;
    aca4:	2000      	movs	r0, #0
	return thread;
    aca6:	e7fc      	b.n	aca2 <z_priq_dumb_best+0x8>

0000aca8 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    aca8:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    acaa:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    acac:	6083      	str	r3, [r0, #8]
}
    acae:	4770      	bx	lr

0000acb0 <remove_timeout>:
{
    acb0:	b510      	push	{r4, lr}
    acb2:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    acb4:	f7fe f998 	bl	8fe8 <next>
    acb8:	b148      	cbz	r0, acce <remove_timeout+0x1e>
    acba:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    acbc:	6920      	ldr	r0, [r4, #16]
    acbe:	6961      	ldr	r1, [r4, #20]
    acc0:	6913      	ldr	r3, [r2, #16]
    acc2:	181b      	adds	r3, r3, r0
    acc4:	6950      	ldr	r0, [r2, #20]
    acc6:	eb41 0100 	adc.w	r1, r1, r0
    acca:	6113      	str	r3, [r2, #16]
    accc:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    acce:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    acd0:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    acd2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    acd4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    acd6:	2300      	movs	r3, #0
    acd8:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    acda:	6063      	str	r3, [r4, #4]
}
    acdc:	bd10      	pop	{r4, pc}

0000acde <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    acde:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    ace0:	f7fe fc7e 	bl	95e0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    ace4:	bd08      	pop	{r3, pc}

0000ace6 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    ace6:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    ace8:	f7fe fc7a 	bl	95e0 <sys_clock_tick_get>
}
    acec:	bd08      	pop	{r3, pc}

0000acee <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    acee:	b900      	cbnz	r0, acf2 <z_impl_k_busy_wait+0x4>
    acf0:	4770      	bx	lr
{
    acf2:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    acf4:	f7f8 fed8 	bl	3aa8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    acf8:	bd08      	pop	{r3, pc}

0000acfa <k_heap_init>:
{
    acfa:	b510      	push	{r4, lr}
    acfc:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    ad00:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    ad02:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    ad04:	f7f6 fa8a 	bl	121c <sys_heap_init>
}
    ad08:	bd10      	pop	{r4, pc}
	...

0000ad0c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    ad0c:	f7fa bbb6 	b.w	547c <SystemInit>
