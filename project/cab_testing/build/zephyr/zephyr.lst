
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 5f 00 20 95 37 00 00 df aa 00 00 4d 37 00 00     @_. .7......M7..
  10:	4d 37 00 00 4d 37 00 00 4d 37 00 00 00 00 00 00     M7..M7..M7......
	...
  2c:	19 2f 00 00 4d 37 00 00 00 00 00 00 c1 2e 00 00     ./..M7..........
  3c:	4d 37 00 00                                         M7..

00000040 <_irq_vector_table>:
  40:	f9 2f 00 00 f9 2f 00 00 f9 2f 00 00 f9 2f 00 00     ./.../.../.../..
  50:	f9 2f 00 00 f9 2f 00 00 f9 2f 00 00 f9 2f 00 00     ./.../.../.../..
  60:	f9 2f 00 00 f9 2f 00 00 f9 2f 00 00 f9 2f 00 00     ./.../.../.../..
  70:	f9 2f 00 00 f9 2f 00 00 f9 2f 00 00 f9 2f 00 00     ./.../.../.../..
  80:	f9 2f 00 00 f9 2f 00 00 f9 2f 00 00 f9 2f 00 00     ./.../.../.../..
  90:	f9 2f 00 00 f9 2f 00 00 f9 2f 00 00 f9 2f 00 00     ./.../.../.../..
  a0:	f9 2f 00 00 f9 2f 00 00 f9 2f 00 00 f9 2f 00 00     ./.../.../.../..
  b0:	f9 2f 00 00 f9 2f 00 00 f9 2f 00 00 f9 2f 00 00     ./.../.../.../..
  c0:	f9 2f 00 00 f9 2f 00 00 f9 2f 00 00 f9 2f 00 00     ./.../.../.../..
  d0:	f9 2f 00 00 f9 2f 00 00 f9 2f 00 00 f9 2f 00 00     ./.../.../.../..
  e0:	f9 2f 00 00 f9 2f 00 00 f9 2f 00 00 f9 2f 00 00     ./.../.../.../..
  f0:	f9 2f 00 00 f9 2f 00 00 f9 2f 00 00 f9 2f 00 00     ./.../.../.../..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16b>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdd>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x167>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17b>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1a3>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x189>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x193>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x261>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x265>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23b>
     3a2:	d106      	bne.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19b>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>

000003da <strlen>:
     3da:	4603      	mov	r3, r0
     3dc:	f813 2b01 	ldrb.w	r2, [r3], #1
     3e0:	2a00      	cmp	r2, #0
     3e2:	d1fb      	bne.n	3dc <strlen+0x2>
     3e4:	1a18      	subs	r0, r3, r0
     3e6:	3801      	subs	r0, #1
     3e8:	4770      	bx	lr
	...

000003ec <consumers_code>:

}


void consumers_code(void *argA , void *argB, void *argC)
{
     3ec:	b538      	push	{r3, r4, r5, lr}
     3ee:	e01f      	b.n	430 <CONFIG_FLASH_SIZE+0x30>
    else{
        /* check if image and vertical image are the same*/
        for(int i = 0; i < IMGWIDTH; i++){
            for(int j = 0; j < IMGWIDTH; j++){
                if(img[i*IMGWIDTH+j] != vertical_guide_image_data[i][j]){
                    printk("Error\n");
     3f0:	4817      	ldr	r0, [pc, #92]	; (450 <CONFIG_FLASH_SIZE+0x50>)
     3f2:	f00a f990 	bl	a716 <printk>
        for(int i = 0; i < IMGWIDTH; i++){
     3f6:	3401      	adds	r4, #1
     3f8:	2c7f      	cmp	r4, #127	; 0x7f
     3fa:	dc0f      	bgt.n	41c <CONFIG_FLASH_SIZE+0x1c>
            for(int j = 0; j < IMGWIDTH; j++){
     3fc:	2300      	movs	r3, #0
     3fe:	2b7f      	cmp	r3, #127	; 0x7f
     400:	dcf9      	bgt.n	3f6 <consumers_code+0xa>
                if(img[i*IMGWIDTH+j] != vertical_guide_image_data[i][j]){
     402:	eb03 12c4 	add.w	r2, r3, r4, lsl #7
     406:	5ca9      	ldrb	r1, [r5, r2]
     408:	4a12      	ldr	r2, [pc, #72]	; (454 <CONFIG_FLASH_SIZE+0x54>)
     40a:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
     40e:	5cd2      	ldrb	r2, [r2, r3]
     410:	4291      	cmp	r1, r2
     412:	d1ed      	bne.n	3f0 <consumers_code+0x4>
            for(int j = 0; j < IMGWIDTH; j++){
     414:	3301      	adds	r3, #1
     416:	e7f2      	b.n	3fe <consumers_code+0x12>
        for(int i = 0; i < IMGWIDTH; i++){
     418:	2400      	movs	r4, #0
     41a:	e7ed      	b.n	3f8 <consumers_code+0xc>
        }

    }

    /* unget image from CAB*/
    unget((void*)img, image_cab);
     41c:	4b0e      	ldr	r3, [pc, #56]	; (458 <CONFIG_FLASH_SIZE+0x58>)
     41e:	6819      	ldr	r1, [r3, #0]
     420:	4628      	mov	r0, r5
     422:	f00a f908 	bl	a636 <unget>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     426:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     42a:	2100      	movs	r1, #0
     42c:	f009 f82c 	bl	9488 <z_impl_k_sleep>
    uint8_t *img = (uint8_t *)get_mes(image_cab);
     430:	4b09      	ldr	r3, [pc, #36]	; (458 <CONFIG_FLASH_SIZE+0x58>)
     432:	6818      	ldr	r0, [r3, #0]
     434:	f00a f8d6 	bl	a5e4 <get_mes>
     438:	4605      	mov	r5, r0
    if(img[126*IMGWIDTH+60] == 128){
     43a:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
     43e:	f893 3f3c 	ldrb.w	r3, [r3, #3900]	; 0xf3c
     442:	2b80      	cmp	r3, #128	; 0x80
     444:	d1e8      	bne.n	418 <CONFIG_FLASH_SIZE+0x18>
        printk("Task consumer obstacle detected \n");
     446:	4805      	ldr	r0, [pc, #20]	; (45c <CONFIG_FLASH_SIZE+0x5c>)
     448:	f00a f965 	bl	a716 <printk>
     44c:	e7e6      	b.n	41c <CONFIG_FLASH_SIZE+0x1c>
     44e:	bf00      	nop
     450:	0000c18c 	.word	0x0000c18c
     454:	20000000 	.word	0x20000000
     458:	20004578 	.word	0x20004578
     45c:	0000c168 	.word	0x0000c168

00000460 <producers_code>:
{
     460:	b538      	push	{r3, r4, r5, lr}
    printk("Thread producer init \n");
     462:	4811      	ldr	r0, [pc, #68]	; (4a8 <producers_code+0x48>)
     464:	f00a f957 	bl	a716 <printk>
        uint8_t *img = (uint8_t *)reserve(image_cab);
     468:	4d10      	ldr	r5, [pc, #64]	; (4ac <producers_code+0x4c>)
     46a:	6828      	ldr	r0, [r5, #0]
     46c:	f00a f877 	bl	a55e <reserve>
     470:	4604      	mov	r4, r0
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
     472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     476:	490e      	ldr	r1, [pc, #56]	; (4b0 <producers_code+0x50>)
     478:	f00b fc86 	bl	bd88 <memcpy>
        printk("Task producer insert obstacle \n");
     47c:	480d      	ldr	r0, [pc, #52]	; (4b4 <producers_code+0x54>)
     47e:	f00a f94a 	bl	a716 <printk>
        img[126*IMGWIDTH+60] = 128;
     482:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
     486:	2280      	movs	r2, #128	; 0x80
     488:	f883 2f3c 	strb.w	r2, [r3, #3900]	; 0xf3c
        put_mes((void*)img, image_cab);
     48c:	6829      	ldr	r1, [r5, #0]
     48e:	4620      	mov	r0, r4
     490:	f00a f887 	bl	a5a2 <put_mes>
        printk("Task producer put image to CAB \n");
     494:	4808      	ldr	r0, [pc, #32]	; (4b8 <producers_code+0x58>)
     496:	f00a f93e 	bl	a716 <printk>
     49a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     49e:	2100      	movs	r1, #0
     4a0:	f008 fff2 	bl	9488 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     4a4:	e7e0      	b.n	468 <producers_code+0x8>
     4a6:	bf00      	nop
     4a8:	0000c194 	.word	0x0000c194
     4ac:	20004578 	.word	0x20004578
     4b0:	20000000 	.word	0x20000000
     4b4:	0000c1ac 	.word	0x0000c1ac
     4b8:	0000c1cc 	.word	0x0000c1cc

000004bc <main>:
void main(void) {
     4bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     4c0:	b08f      	sub	sp, #60	; 0x3c
    uint8_t **img1 = (uint8_t **)malloc(IMGWIDTH * sizeof(uint8_t *));
     4c2:	f44f 7000 	mov.w	r0, #512	; 0x200
     4c6:	f009 fdb5 	bl	a034 <malloc>
     4ca:	4604      	mov	r4, r0
    for (uint8_t j = 0; j < IMGWIDTH; j++)
     4cc:	2500      	movs	r5, #0
     4ce:	e006      	b.n	4de <main+0x22>
        img1[j] = (uint8_t *)malloc(IMGWIDTH * sizeof(uint8_t));
     4d0:	2080      	movs	r0, #128	; 0x80
     4d2:	f009 fdaf 	bl	a034 <malloc>
     4d6:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    for (uint8_t j = 0; j < IMGWIDTH; j++)
     4da:	3501      	adds	r5, #1
     4dc:	b2ed      	uxtb	r5, r5
     4de:	f015 0f80 	tst.w	r5, #128	; 0x80
     4e2:	d0f5      	beq.n	4d0 <main+0x14>
    for (size_t i = 0; i < IMGWIDTH; i++)
     4e4:	2100      	movs	r1, #0
     4e6:	e00a      	b.n	4fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16>
            img1[i][j] = vertical_guide_image_data[i][j];
     4e8:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
     4ec:	4a2d      	ldr	r2, [pc, #180]	; (5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>)
     4ee:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
     4f2:	5cd2      	ldrb	r2, [r2, r3]
     4f4:	54c2      	strb	r2, [r0, r3]
        for (size_t j = 0; j < IMGWIDTH; j++)
     4f6:	3301      	adds	r3, #1
     4f8:	2b7f      	cmp	r3, #127	; 0x7f
     4fa:	d9f5      	bls.n	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
    for (size_t i = 0; i < IMGWIDTH; i++)
     4fc:	3101      	adds	r1, #1
     4fe:	297f      	cmp	r1, #127	; 0x7f
     500:	d801      	bhi.n	506 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e>
        for (size_t j = 0; j < IMGWIDTH; j++)
     502:	2300      	movs	r3, #0
     504:	e7f8      	b.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
    image_cab = open_cab("image cab", N_PRODUCERS+N_CONSUMERS+1, IMGWIDTH*IMGWIDTH, (void*)img1);
     506:	4623      	mov	r3, r4
     508:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     50c:	2107      	movs	r1, #7
     50e:	4826      	ldr	r0, [pc, #152]	; (5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>)
     510:	f009 ffe5 	bl	a4de <open_cab>
     514:	4b25      	ldr	r3, [pc, #148]	; (5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>)
     516:	6018      	str	r0, [r3, #0]
    printk("Cab initialized\n");
     518:	4825      	ldr	r0, [pc, #148]	; (5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>)
     51a:	f00a f8fc 	bl	a716 <printk>
    k_tid_t* producers = (k_tid_t*)malloc(sizeof(k_tid_t)*N_PRODUCERS);
     51e:	200c      	movs	r0, #12
     520:	f009 fd88 	bl	a034 <malloc>
     524:	4681      	mov	r9, r0
    k_tid_t* consumers = (k_tid_t*)malloc(sizeof(k_tid_t)*N_CONSUMERS);
     526:	200c      	movs	r0, #12
     528:	f009 fd84 	bl	a034 <malloc>
     52c:	4605      	mov	r5, r0
    k_thread_stack_t *producers_stacks = calloc(N_PRODUCERS, sizeof(k_thread_stack_t));
     52e:	2101      	movs	r1, #1
     530:	2003      	movs	r0, #3
     532:	f009 fd77 	bl	a024 <calloc>
    k_thread_stack_t *consumers_stacks = calloc(N_CONSUMERS, sizeof(k_thread_stack_t));
     536:	2101      	movs	r1, #1
     538:	2003      	movs	r0, #3
     53a:	f009 fd73 	bl	a024 <calloc>
    printk("stacks allocated\n");
     53e:	481d      	ldr	r0, [pc, #116]	; (5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>)
     540:	f00a f8e9 	bl	a716 <printk>
        producers[0] = k_thread_create(producer_threads[0], producer_stack,
     544:	980b      	ldr	r0, [sp, #44]	; 0x2c
        NULL, NULL, NULL, 1, 0, K_NO_WAIT);
     546:	2600      	movs	r6, #0
     548:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     54a:	e9cd 6706 	strd	r6, r7, [sp, #24]
     54e:	2400      	movs	r4, #0
     550:	9404      	str	r4, [sp, #16]
     552:	f04f 0801 	mov.w	r8, #1
     556:	f8cd 800c 	str.w	r8, [sp, #12]
     55a:	9402      	str	r4, [sp, #8]
     55c:	9401      	str	r4, [sp, #4]
     55e:	9400      	str	r4, [sp, #0]
     560:	4b15      	ldr	r3, [pc, #84]	; (5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>)
     562:	f44f 6280 	mov.w	r2, #1024	; 0x400
     566:	4915      	ldr	r1, [pc, #84]	; (5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>)
     568:	f007 f9c2 	bl	78f0 <z_impl_k_thread_create>
        producers[0] = k_thread_create(producer_threads[0], producer_stack,
     56c:	f8c9 0000 	str.w	r0, [r9]
    printk("producers created\n");
     570:	4813      	ldr	r0, [pc, #76]	; (5c0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd8>)
     572:	f00a f8d0 	bl	a716 <printk>
        consumers[0] = k_thread_create(consumer_threads[0], consumer_stack,
     576:	9808      	ldr	r0, [sp, #32]
     578:	e9cd 6706 	strd	r6, r7, [sp, #24]
     57c:	9404      	str	r4, [sp, #16]
     57e:	f8cd 800c 	str.w	r8, [sp, #12]
     582:	9402      	str	r4, [sp, #8]
     584:	9401      	str	r4, [sp, #4]
     586:	9400      	str	r4, [sp, #0]
     588:	4b0e      	ldr	r3, [pc, #56]	; (5c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xdc>)
     58a:	f44f 6280 	mov.w	r2, #1024	; 0x400
     58e:	490e      	ldr	r1, [pc, #56]	; (5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>)
     590:	f007 f9ae 	bl	78f0 <z_impl_k_thread_create>
     594:	6028      	str	r0, [r5, #0]
    printk("consumers created\n");
     596:	480d      	ldr	r0, [pc, #52]	; (5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>)
     598:	f00a f8bd 	bl	a716 <printk>
} 
     59c:	b00f      	add	sp, #60	; 0x3c
     59e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     5a2:	bf00      	nop
     5a4:	20000000 	.word	0x20000000
     5a8:	0000c1f0 	.word	0x0000c1f0
     5ac:	20004578 	.word	0x20004578
     5b0:	0000c1fc 	.word	0x0000c1fc
     5b4:	0000c210 	.word	0x0000c210
     5b8:	00000461 	.word	0x00000461
     5bc:	20005300 	.word	0x20005300
     5c0:	0000c224 	.word	0x0000c224
     5c4:	000003ed 	.word	0x000003ed
     5c8:	20005720 	.word	0x20005720
     5cc:	0000c238 	.word	0x0000c238

000005d0 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5d4:	b08d      	sub	sp, #52	; 0x34
     5d6:	9205      	str	r2, [sp, #20]
     5d8:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     5da:	4613      	mov	r3, r2
     5dc:	f002 0204 	and.w	r2, r2, #4
     5e0:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     5e2:	f3c3 02c2 	ubfx	r2, r3, #3, #3

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     5e6:	f010 0303 	ands.w	r3, r0, #3
     5ea:	9302      	str	r3, [sp, #8]
     5ec:	f040 8293 	bne.w	b16 <CONFIG_ISR_STACK_SIZE+0x316>
     5f0:	4607      	mov	r7, r0
     5f2:	468a      	mov	sl, r1
     5f4:	3201      	adds	r2, #1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     5f6:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     5f8:	2800      	cmp	r0, #0
     5fa:	d041      	beq.n	680 <cbvprintf_package+0xb0>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     5fc:	b127      	cbz	r7, 608 <cbvprintf_package+0x38>
     5fe:	1be3      	subs	r3, r4, r7
     600:	3304      	adds	r3, #4
     602:	4553      	cmp	r3, sl
     604:	f200 828a 	bhi.w	b1c <CONFIG_ISR_STACK_SIZE+0x31c>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
     608:	9b03      	ldr	r3, [sp, #12]
     60a:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     60c:	f8dd b008 	ldr.w	fp, [sp, #8]
     610:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     614:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
     618:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
     61a:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
     61e:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     620:	b10f      	cbz	r7, 626 <cbvprintf_package+0x56>
				*(const char **)buf = s;
     622:	9b03      	ldr	r3, [sp, #12]
     624:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     626:	1e53      	subs	r3, r2, #1
     628:	9307      	str	r3, [sp, #28]
     62a:	2a00      	cmp	r2, #0
     62c:	f340 80b7 	ble.w	79e <cbvprintf_package+0x1ce>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     630:	9b05      	ldr	r3, [sp, #20]
     632:	f013 0202 	ands.w	r2, r3, #2
     636:	d021      	beq.n	67c <cbvprintf_package+0xac>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     638:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     63a:	1be1      	subs	r1, r4, r7
     63c:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     63e:	b11a      	cbz	r2, 648 <cbvprintf_package+0x78>
     640:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     644:	f080 80bf 	bcs.w	7c6 <cbvprintf_package+0x1f6>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     648:	f1bb 0f0f 	cmp.w	fp, #15
     64c:	f200 80ce 	bhi.w	7ec <cbvprintf_package+0x21c>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
     650:	2f00      	cmp	r7, #0
     652:	f000 80e2 	beq.w	81a <CONFIG_ISR_STACK_SIZE+0x1a>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
     656:	b2db      	uxtb	r3, r3
     658:	aa0c      	add	r2, sp, #48	; 0x30
     65a:	445a      	add	r2, fp
     65c:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
     660:	2800      	cmp	r0, #0
     662:	f000 80d6 	beq.w	812 <CONFIG_ISR_STACK_SIZE+0x12>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     666:	f063 037f 	orn	r3, r3, #127	; 0x7f
     66a:	aa0c      	add	r2, sp, #48	; 0x30
     66c:	445a      	add	r2, fp
     66e:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
     672:	9b04      	ldr	r3, [sp, #16]
     674:	3301      	adds	r3, #1
     676:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
     678:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
     67c:	3404      	adds	r4, #4
     67e:	e0f6      	b.n	86e <CONFIG_ISR_STACK_SIZE+0x6e>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     680:	f001 0a07 	and.w	sl, r1, #7
     684:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     686:	f1ca 0a08 	rsb	sl, sl, #8
     68a:	e7b7      	b.n	5fc <cbvprintf_package+0x2c>
			if (*fmt == '%') {
     68c:	2b25      	cmp	r3, #37	; 0x25
     68e:	f040 80ed 	bne.w	86c <CONFIG_ISR_STACK_SIZE+0x6c>
				parsing = true;
     692:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
     694:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
     698:	46c1      	mov	r9, r8
			continue;
     69a:	e0e7      	b.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
			align = VA_STACK_ALIGN(intmax_t);
     69c:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
     6a0:	46c1      	mov	r9, r8
			continue;
     6a2:	e0e3      	b.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
			align = VA_STACK_ALIGN(size_t);
     6a4:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
     6a8:	46c1      	mov	r9, r8
			continue;
     6aa:	e0df      	b.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
			align = VA_STACK_ALIGN(ptrdiff_t);
     6ac:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
     6b0:	46c1      	mov	r9, r8
			continue;
     6b2:	e0db      	b.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
			if (fmt[-1] == 'l') {
     6b4:	782a      	ldrb	r2, [r5, #0]
     6b6:	2a6c      	cmp	r2, #108	; 0x6c
     6b8:	d026      	beq.n	708 <cbvprintf_package+0x138>
			parsing = false;
     6ba:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
     6bc:	eb04 0208 	add.w	r2, r4, r8
     6c0:	3a01      	subs	r2, #1
     6c2:	f1c8 0100 	rsb	r1, r8, #0
     6c6:	400a      	ands	r2, r1
     6c8:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     6ca:	b127      	cbz	r7, 6d6 <cbvprintf_package+0x106>
     6cc:	1bd1      	subs	r1, r2, r7
     6ce:	4449      	add	r1, r9
     6d0:	458a      	cmp	sl, r1
     6d2:	f0c0 8226 	bcc.w	b22 <CONFIG_ISR_STACK_SIZE+0x322>
		if (*fmt == 's') {
     6d6:	2b73      	cmp	r3, #115	; 0x73
     6d8:	d059      	beq.n	78e <cbvprintf_package+0x1be>
		} else if (size == sizeof(int)) {
     6da:	f1b9 0f04 	cmp.w	r9, #4
     6de:	f000 80a8 	beq.w	832 <CONFIG_ISR_STACK_SIZE+0x32>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     6e2:	f1b9 0f08 	cmp.w	r9, #8
     6e6:	f040 80ac 	bne.w	842 <CONFIG_ISR_STACK_SIZE+0x42>
			long long v = va_arg(ap, long long);
     6ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
     6ec:	3307      	adds	r3, #7
     6ee:	f023 0307 	bic.w	r3, r3, #7
     6f2:	f103 0108 	add.w	r1, r3, #8
     6f6:	9116      	str	r1, [sp, #88]	; 0x58
     6f8:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
     6fc:	b10f      	cbz	r7, 702 <cbvprintf_package+0x132>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     6fe:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
     702:	f102 0408 	add.w	r4, r2, #8
     706:	e0b1      	b.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
				if (fmt[-2] == 'l') {
     708:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
     70c:	2a6c      	cmp	r2, #108	; 0x6c
     70e:	d004      	beq.n	71a <cbvprintf_package+0x14a>
			parsing = false;
     710:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
     712:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
     716:	46c1      	mov	r9, r8
     718:	e7d0      	b.n	6bc <cbvprintf_package+0xec>
			parsing = false;
     71a:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
     71c:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
     720:	46c1      	mov	r9, r8
     722:	e7cb      	b.n	6bc <cbvprintf_package+0xec>
			if (fmt[-1] == 'L') {
     724:	782b      	ldrb	r3, [r5, #0]
     726:	2b4c      	cmp	r3, #76	; 0x4c
     728:	d01c      	beq.n	764 <cbvprintf_package+0x194>
				v.d = va_arg(ap, double);
     72a:	9b16      	ldr	r3, [sp, #88]	; 0x58
     72c:	3307      	adds	r3, #7
     72e:	f023 0307 	bic.w	r3, r3, #7
     732:	f103 0208 	add.w	r2, r3, #8
     736:	9216      	str	r2, [sp, #88]	; 0x58
     738:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
     73c:	1de2      	adds	r2, r4, #7
     73e:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
     742:	b147      	cbz	r7, 756 <cbvprintf_package+0x186>
				if (BUF_OFFSET + size > len) {
     744:	1bd3      	subs	r3, r2, r7
     746:	3308      	adds	r3, #8
     748:	4553      	cmp	r3, sl
     74a:	d815      	bhi.n	778 <cbvprintf_package+0x1a8>
				} else if (fmt[-1] == 'L') {
     74c:	782b      	ldrb	r3, [r5, #0]
     74e:	2b4c      	cmp	r3, #76	; 0x4c
     750:	d015      	beq.n	77e <cbvprintf_package+0x1ae>
					*(double *)buf = v.d;
     752:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
     756:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
     75a:	2600      	movs	r6, #0
			continue;
     75c:	f04f 0808 	mov.w	r8, #8
     760:	46c1      	mov	r9, r8
     762:	e083      	b.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
				v.ld = va_arg(ap, long double);
     764:	9b16      	ldr	r3, [sp, #88]	; 0x58
     766:	3307      	adds	r3, #7
     768:	f023 0307 	bic.w	r3, r3, #7
     76c:	f103 0208 	add.w	r2, r3, #8
     770:	9216      	str	r2, [sp, #88]	; 0x58
     772:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
     776:	e7e1      	b.n	73c <cbvprintf_package+0x16c>
					return -ENOSPC;
     778:	f06f 001b 	mvn.w	r0, #27
     77c:	e1c8      	b.n	b10 <CONFIG_ISR_STACK_SIZE+0x310>
					*(long double *)buf = v.ld;
     77e:	e9c2 0100 	strd	r0, r1, [r2]
     782:	e7e8      	b.n	756 <cbvprintf_package+0x186>
			parsing = false;
     784:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
     786:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
     78a:	46c1      	mov	r9, r8
     78c:	e796      	b.n	6bc <cbvprintf_package+0xec>
			s = va_arg(ap, char *);
     78e:	9b16      	ldr	r3, [sp, #88]	; 0x58
     790:	1d1a      	adds	r2, r3, #4
     792:	9216      	str	r2, [sp, #88]	; 0x58
     794:	681b      	ldr	r3, [r3, #0]
     796:	9303      	str	r3, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     798:	9a07      	ldr	r2, [sp, #28]
	while (*++fmt != '\0') {
     79a:	4665      	mov	r5, ip
     79c:	e740      	b.n	620 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     79e:	4bbb      	ldr	r3, [pc, #748]	; (a8c <CONFIG_ISR_STACK_SIZE+0x28c>)
     7a0:	9a03      	ldr	r2, [sp, #12]
     7a2:	429a      	cmp	r2, r3
     7a4:	d304      	bcc.n	7b0 <cbvprintf_package+0x1e0>
     7a6:	4bba      	ldr	r3, [pc, #744]	; (a90 <CONFIG_ISR_STACK_SIZE+0x290>)
     7a8:	429a      	cmp	r2, r3
     7aa:	d30a      	bcc.n	7c2 <cbvprintf_package+0x1f2>
     7ac:	2300      	movs	r3, #0
     7ae:	e000      	b.n	7b2 <cbvprintf_package+0x1e2>
     7b0:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     7b2:	2b00      	cmp	r3, #0
     7b4:	f47f af3c 	bne.w	630 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     7b8:	9b05      	ldr	r3, [sp, #20]
     7ba:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     7be:	2000      	movs	r0, #0
     7c0:	e73b      	b.n	63a <cbvprintf_package+0x6a>
     7c2:	2301      	movs	r3, #1
     7c4:	e7f5      	b.n	7b2 <cbvprintf_package+0x1e2>
					__ASSERT(false, "String with too many arguments");
     7c6:	4cb3      	ldr	r4, [pc, #716]	; (a94 <CONFIG_ISR_STACK_SIZE+0x294>)
     7c8:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
     7cc:	4622      	mov	r2, r4
     7ce:	49b2      	ldr	r1, [pc, #712]	; (a98 <CONFIG_ISR_STACK_SIZE+0x298>)
     7d0:	48b2      	ldr	r0, [pc, #712]	; (a9c <CONFIG_ISR_STACK_SIZE+0x29c>)
     7d2:	f00a f8a9 	bl	a928 <assert_print>
     7d6:	48b2      	ldr	r0, [pc, #712]	; (aa0 <CONFIG_ISR_STACK_SIZE+0x2a0>)
     7d8:	f00a f8a6 	bl	a928 <assert_print>
     7dc:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
     7e0:	4620      	mov	r0, r4
     7e2:	f00a f89a 	bl	a91a <assert_post_action>
					return -EINVAL;
     7e6:	f06f 0015 	mvn.w	r0, #21
     7ea:	e191      	b.n	b10 <CONFIG_ISR_STACK_SIZE+0x310>
					__ASSERT(false, "str_ptr_pos[] too small");
     7ec:	4ca9      	ldr	r4, [pc, #676]	; (a94 <CONFIG_ISR_STACK_SIZE+0x294>)
     7ee:	f240 13f5 	movw	r3, #501	; 0x1f5
     7f2:	4622      	mov	r2, r4
     7f4:	49a8      	ldr	r1, [pc, #672]	; (a98 <CONFIG_ISR_STACK_SIZE+0x298>)
     7f6:	48a9      	ldr	r0, [pc, #676]	; (a9c <CONFIG_ISR_STACK_SIZE+0x29c>)
     7f8:	f00a f896 	bl	a928 <assert_print>
     7fc:	48a9      	ldr	r0, [pc, #676]	; (aa4 <CONFIG_ISR_STACK_SIZE+0x2a4>)
     7fe:	f00a f893 	bl	a928 <assert_print>
     802:	f240 11f5 	movw	r1, #501	; 0x1f5
     806:	4620      	mov	r0, r4
     808:	f00a f887 	bl	a91a <assert_post_action>
					return -EINVAL;
     80c:	f06f 0015 	mvn.w	r0, #21
     810:	e17e      	b.n	b10 <CONFIG_ISR_STACK_SIZE+0x310>
						s_rw_cnt++;
     812:	9b06      	ldr	r3, [sp, #24]
     814:	3301      	adds	r3, #1
     816:	9306      	str	r3, [sp, #24]
     818:	e72e      	b.n	678 <cbvprintf_package+0xa8>
				} else if (is_ro || rws_pos_en) {
     81a:	b908      	cbnz	r0, 820 <CONFIG_ISR_STACK_SIZE+0x20>
     81c:	9b01      	ldr	r3, [sp, #4]
     81e:	b113      	cbz	r3, 826 <CONFIG_ISR_STACK_SIZE+0x26>
					len += 1;
     820:	f10a 0a01 	add.w	sl, sl, #1
     824:	e728      	b.n	678 <cbvprintf_package+0xa8>
					len += strlen(s) + 1 + 1;
     826:	9803      	ldr	r0, [sp, #12]
     828:	f7ff fdd7 	bl	3da <strlen>
     82c:	1c83      	adds	r3, r0, #2
     82e:	449a      	add	sl, r3
     830:	e722      	b.n	678 <cbvprintf_package+0xa8>
			int v = va_arg(ap, int);
     832:	9b16      	ldr	r3, [sp, #88]	; 0x58
     834:	1d19      	adds	r1, r3, #4
     836:	9116      	str	r1, [sp, #88]	; 0x58
     838:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
     83a:	b107      	cbz	r7, 83e <CONFIG_ISR_STACK_SIZE+0x3e>
				*(int *)buf = v;
     83c:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
     83e:	1d14      	adds	r4, r2, #4
     840:	e014      	b.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
		} else {
			__ASSERT(false, "unexpected size %u", size);
     842:	4c94      	ldr	r4, [pc, #592]	; (a94 <CONFIG_ISR_STACK_SIZE+0x294>)
     844:	f240 2331 	movw	r3, #561	; 0x231
     848:	4622      	mov	r2, r4
     84a:	4993      	ldr	r1, [pc, #588]	; (a98 <CONFIG_ISR_STACK_SIZE+0x298>)
     84c:	4893      	ldr	r0, [pc, #588]	; (a9c <CONFIG_ISR_STACK_SIZE+0x29c>)
     84e:	f00a f86b 	bl	a928 <assert_print>
     852:	4649      	mov	r1, r9
     854:	4894      	ldr	r0, [pc, #592]	; (aa8 <CONFIG_ISR_STACK_SIZE+0x2a8>)
     856:	f00a f867 	bl	a928 <assert_print>
     85a:	f240 2131 	movw	r1, #561	; 0x231
     85e:	4620      	mov	r0, r4
     860:	f00a f85b 	bl	a91a <assert_post_action>
			return -EINVAL;
     864:	f06f 0015 	mvn.w	r0, #21
     868:	e152      	b.n	b10 <CONFIG_ISR_STACK_SIZE+0x310>
		switch (*fmt) {
     86a:	2600      	movs	r6, #0
     86c:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
     86e:	f105 0c01 	add.w	ip, r5, #1
     872:	786b      	ldrb	r3, [r5, #1]
     874:	2b00      	cmp	r3, #0
     876:	f000 80c1 	beq.w	9fc <CONFIG_ISR_STACK_SIZE+0x1fc>
		if (!parsing) {
     87a:	2e00      	cmp	r6, #0
     87c:	f43f af06 	beq.w	68c <cbvprintf_package+0xbc>
		switch (*fmt) {
     880:	f1a3 0120 	sub.w	r1, r3, #32
     884:	295a      	cmp	r1, #90	; 0x5a
     886:	d8f0      	bhi.n	86a <CONFIG_ISR_STACK_SIZE+0x6a>
     888:	a201      	add	r2, pc, #4	; (adr r2, 890 <CONFIG_ISR_STACK_SIZE+0x90>)
     88a:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
     88e:	bf00      	nop
     890:	0000086d 	.word	0x0000086d
     894:	0000086b 	.word	0x0000086b
     898:	0000086b 	.word	0x0000086b
     89c:	0000086d 	.word	0x0000086d
     8a0:	0000086b 	.word	0x0000086b
     8a4:	0000086b 	.word	0x0000086b
     8a8:	0000086b 	.word	0x0000086b
     8ac:	0000086b 	.word	0x0000086b
     8b0:	0000086b 	.word	0x0000086b
     8b4:	0000086b 	.word	0x0000086b
     8b8:	000006bd 	.word	0x000006bd
     8bc:	0000086d 	.word	0x0000086d
     8c0:	0000086b 	.word	0x0000086b
     8c4:	0000086d 	.word	0x0000086d
     8c8:	0000086d 	.word	0x0000086d
     8cc:	0000086b 	.word	0x0000086b
     8d0:	0000086d 	.word	0x0000086d
     8d4:	0000086d 	.word	0x0000086d
     8d8:	0000086d 	.word	0x0000086d
     8dc:	0000086d 	.word	0x0000086d
     8e0:	0000086d 	.word	0x0000086d
     8e4:	0000086d 	.word	0x0000086d
     8e8:	0000086d 	.word	0x0000086d
     8ec:	0000086d 	.word	0x0000086d
     8f0:	0000086d 	.word	0x0000086d
     8f4:	0000086d 	.word	0x0000086d
     8f8:	0000086b 	.word	0x0000086b
     8fc:	0000086b 	.word	0x0000086b
     900:	0000086b 	.word	0x0000086b
     904:	0000086b 	.word	0x0000086b
     908:	0000086b 	.word	0x0000086b
     90c:	0000086b 	.word	0x0000086b
     910:	0000086b 	.word	0x0000086b
     914:	00000725 	.word	0x00000725
     918:	0000086b 	.word	0x0000086b
     91c:	0000086b 	.word	0x0000086b
     920:	0000086b 	.word	0x0000086b
     924:	00000725 	.word	0x00000725
     928:	00000725 	.word	0x00000725
     92c:	00000725 	.word	0x00000725
     930:	0000086b 	.word	0x0000086b
     934:	0000086b 	.word	0x0000086b
     938:	0000086b 	.word	0x0000086b
     93c:	0000086b 	.word	0x0000086b
     940:	0000086d 	.word	0x0000086d
     944:	0000086b 	.word	0x0000086b
     948:	0000086b 	.word	0x0000086b
     94c:	0000086b 	.word	0x0000086b
     950:	0000086b 	.word	0x0000086b
     954:	0000086b 	.word	0x0000086b
     958:	0000086b 	.word	0x0000086b
     95c:	0000086b 	.word	0x0000086b
     960:	0000086b 	.word	0x0000086b
     964:	0000086b 	.word	0x0000086b
     968:	0000086b 	.word	0x0000086b
     96c:	0000086b 	.word	0x0000086b
     970:	000006b5 	.word	0x000006b5
     974:	0000086b 	.word	0x0000086b
     978:	0000086b 	.word	0x0000086b
     97c:	0000086b 	.word	0x0000086b
     980:	0000086b 	.word	0x0000086b
     984:	0000086b 	.word	0x0000086b
     988:	0000086b 	.word	0x0000086b
     98c:	0000086b 	.word	0x0000086b
     990:	0000086b 	.word	0x0000086b
     994:	00000725 	.word	0x00000725
     998:	0000086b 	.word	0x0000086b
     99c:	000006b5 	.word	0x000006b5
     9a0:	000006b5 	.word	0x000006b5
     9a4:	00000725 	.word	0x00000725
     9a8:	00000725 	.word	0x00000725
     9ac:	00000725 	.word	0x00000725
     9b0:	0000086d 	.word	0x0000086d
     9b4:	000006b5 	.word	0x000006b5
     9b8:	0000069d 	.word	0x0000069d
     9bc:	0000086b 	.word	0x0000086b
     9c0:	0000086d 	.word	0x0000086d
     9c4:	0000086b 	.word	0x0000086b
     9c8:	00000785 	.word	0x00000785
     9cc:	000006b5 	.word	0x000006b5
     9d0:	00000785 	.word	0x00000785
     9d4:	0000086b 	.word	0x0000086b
     9d8:	0000086b 	.word	0x0000086b
     9dc:	00000785 	.word	0x00000785
     9e0:	000006ad 	.word	0x000006ad
     9e4:	000006b5 	.word	0x000006b5
     9e8:	0000086b 	.word	0x0000086b
     9ec:	0000086b 	.word	0x0000086b
     9f0:	000006b5 	.word	0x000006b5
     9f4:	0000086b 	.word	0x0000086b
     9f8:	000006a5 	.word	0x000006a5
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     9fc:	1be3      	subs	r3, r4, r7
     9fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     a02:	d211      	bcs.n	a28 <CONFIG_ISR_STACK_SIZE+0x228>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     a04:	b31f      	cbz	r7, a4e <CONFIG_ISR_STACK_SIZE+0x24e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     a06:	2200      	movs	r2, #0
     a08:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	buf0[0] = BUF_OFFSET / sizeof(int);
     a0a:	089b      	lsrs	r3, r3, #2
     a0c:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
     a0e:	9b01      	ldr	r3, [sp, #4]
     a10:	b30b      	cbz	r3, a56 <CONFIG_ISR_STACK_SIZE+0x256>
		/* Strings are appended, update location counter. */
		buf0[1] = 0;
		buf0[3] = s_rw_cnt;
     a12:	9b06      	ldr	r3, [sp, #24]
     a14:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		buf0[1] = s_rw_cnt;
		buf0[3] = 0;
	}

	buf0[2] = s_ro_cnt;
     a16:	9b04      	ldr	r3, [sp, #16]
     a18:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     a1a:	bbab      	cbnz	r3, a88 <CONFIG_ISR_STACK_SIZE+0x288>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
     a1c:	9d02      	ldr	r5, [sp, #8]
     a1e:	f8dd 9010 	ldr.w	r9, [sp, #16]
     a22:	f8dd 800c 	ldr.w	r8, [sp, #12]
     a26:	e058      	b.n	ada <CONFIG_ISR_STACK_SIZE+0x2da>
		__ASSERT(false, "too many format args");
     a28:	4c1a      	ldr	r4, [pc, #104]	; (a94 <CONFIG_ISR_STACK_SIZE+0x294>)
     a2a:	f240 233d 	movw	r3, #573	; 0x23d
     a2e:	4622      	mov	r2, r4
     a30:	4919      	ldr	r1, [pc, #100]	; (a98 <CONFIG_ISR_STACK_SIZE+0x298>)
     a32:	481a      	ldr	r0, [pc, #104]	; (a9c <CONFIG_ISR_STACK_SIZE+0x29c>)
     a34:	f009 ff78 	bl	a928 <assert_print>
     a38:	481c      	ldr	r0, [pc, #112]	; (aac <CONFIG_ISR_STACK_SIZE+0x2ac>)
     a3a:	f009 ff75 	bl	a928 <assert_print>
     a3e:	f240 213d 	movw	r1, #573	; 0x23d
     a42:	4620      	mov	r0, r4
     a44:	f009 ff69 	bl	a91a <assert_post_action>
		return -EINVAL;
     a48:	f06f 0015 	mvn.w	r0, #21
     a4c:	e060      	b.n	b10 <CONFIG_ISR_STACK_SIZE+0x310>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     a4e:	4453      	add	r3, sl
     a50:	f1a3 0008 	sub.w	r0, r3, #8
     a54:	e05c      	b.n	b10 <CONFIG_ISR_STACK_SIZE+0x310>
		buf0[1] = s_rw_cnt;
     a56:	9b06      	ldr	r3, [sp, #24]
     a58:	707b      	strb	r3, [r7, #1]
		buf0[3] = 0;
     a5a:	e7dc      	b.n	a16 <CONFIG_ISR_STACK_SIZE+0x216>
			*buf++ = pos;
     a5c:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
     a60:	3301      	adds	r3, #1
     a62:	459b      	cmp	fp, r3
     a64:	d9da      	bls.n	a1c <CONFIG_ISR_STACK_SIZE+0x21c>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     a66:	aa0c      	add	r2, sp, #48	; 0x30
     a68:	441a      	add	r2, r3
     a6a:	f812 1c10 	ldrb.w	r1, [r2, #-16]
     a6e:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
     a72:	2a00      	cmp	r2, #0
     a74:	daf4      	bge.n	a60 <CONFIG_ISR_STACK_SIZE+0x260>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     a76:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     a7a:	1be2      	subs	r2, r4, r7
     a7c:	3201      	adds	r2, #1
     a7e:	4592      	cmp	sl, r2
     a80:	d2ec      	bcs.n	a5c <CONFIG_ISR_STACK_SIZE+0x25c>
				return -ENOSPC;
     a82:	f06f 001b 	mvn.w	r0, #27
     a86:	e043      	b.n	b10 <CONFIG_ISR_STACK_SIZE+0x310>
		for (i = 0; i < s_idx; i++) {
     a88:	9b02      	ldr	r3, [sp, #8]
     a8a:	e7ea      	b.n	a62 <CONFIG_ISR_STACK_SIZE+0x262>
     a8c:	0000be1c 	.word	0x0000be1c
     a90:	0000e13c 	.word	0x0000e13c
     a94:	0000c24c 	.word	0x0000c24c
     a98:	0000c954 	.word	0x0000c954
     a9c:	0000c294 	.word	0x0000c294
     aa0:	0000c2b4 	.word	0x0000c2b4
     aa4:	0000c2d8 	.word	0x0000c2d8
     aa8:	0000c2f4 	.word	0x0000c2f4
     aac:	0000c30c 	.word	0x0000c30c
		if (rws_pos_en) {
     ab0:	9b01      	ldr	r3, [sp, #4]
     ab2:	b1f3      	cbz	r3, af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
			size = 0;
     ab4:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     ab6:	1be3      	subs	r3, r4, r7
     ab8:	4433      	add	r3, r6
     aba:	3301      	adds	r3, #1
     abc:	459a      	cmp	sl, r3
     abe:	d333      	bcc.n	b28 <CONFIG_ISR_STACK_SIZE+0x328>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
     ac0:	ab0c      	add	r3, sp, #48	; 0x30
     ac2:	442b      	add	r3, r5
     ac4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     ac8:	f804 3b01 	strb.w	r3, [r4], #1
     acc:	4632      	mov	r2, r6
     ace:	4641      	mov	r1, r8
     ad0:	4620      	mov	r0, r4
     ad2:	f00b f959 	bl	bd88 <memcpy>
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
     ad6:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
     ad8:	3501      	adds	r5, #1
     ada:	45ab      	cmp	fp, r5
     adc:	d917      	bls.n	b0e <CONFIG_ISR_STACK_SIZE+0x30e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     ade:	f1b9 0f00 	cmp.w	r9, #0
     ae2:	d0e5      	beq.n	ab0 <CONFIG_ISR_STACK_SIZE+0x2b0>
     ae4:	ab0c      	add	r3, sp, #48	; 0x30
     ae6:	442b      	add	r3, r5
     ae8:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
     aec:	2b00      	cmp	r3, #0
     aee:	dadf      	bge.n	ab0 <CONFIG_ISR_STACK_SIZE+0x2b0>
     af0:	e7f2      	b.n	ad8 <CONFIG_ISR_STACK_SIZE+0x2d8>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     af2:	ab0c      	add	r3, sp, #48	; 0x30
     af4:	442b      	add	r3, r5
     af6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     afa:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     afe:	2200      	movs	r2, #0
     b00:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
     b04:	4640      	mov	r0, r8
     b06:	f7ff fc68 	bl	3da <strlen>
     b0a:	1c46      	adds	r6, r0, #1
     b0c:	e7d3      	b.n	ab6 <CONFIG_ISR_STACK_SIZE+0x2b6>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     b0e:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     b10:	b00d      	add	sp, #52	; 0x34
     b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
     b16:	f06f 000d 	mvn.w	r0, #13
     b1a:	e7f9      	b.n	b10 <CONFIG_ISR_STACK_SIZE+0x310>
		return -ENOSPC;
     b1c:	f06f 001b 	mvn.w	r0, #27
     b20:	e7f6      	b.n	b10 <CONFIG_ISR_STACK_SIZE+0x310>
			return -ENOSPC;
     b22:	f06f 001b 	mvn.w	r0, #27
     b26:	e7f3      	b.n	b10 <CONFIG_ISR_STACK_SIZE+0x310>
			return -ENOSPC;
     b28:	f06f 001b 	mvn.w	r0, #27
     b2c:	e7f0      	b.n	b10 <CONFIG_ISR_STACK_SIZE+0x310>
     b2e:	bf00      	nop

00000b30 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     b30:	b538      	push	{r3, r4, r5, lr}
     b32:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     b34:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
     b36:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     b3a:	6081      	str	r1, [r0, #8]
	switch (method) {
     b3c:	2b02      	cmp	r3, #2
     b3e:	d903      	bls.n	b48 <sys_notify_finalize+0x18>
     b40:	2b03      	cmp	r3, #3
     b42:	d102      	bne.n	b4a <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     b44:	6800      	ldr	r0, [r0, #0]
		break;
     b46:	e00e      	b.n	b66 <sys_notify_finalize+0x36>
	switch (method) {
     b48:	b963      	cbnz	r3, b64 <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
     b4a:	4d08      	ldr	r5, [pc, #32]	; (b6c <sys_notify_finalize+0x3c>)
     b4c:	2345      	movs	r3, #69	; 0x45
     b4e:	462a      	mov	r2, r5
     b50:	4907      	ldr	r1, [pc, #28]	; (b70 <sys_notify_finalize+0x40>)
     b52:	4808      	ldr	r0, [pc, #32]	; (b74 <sys_notify_finalize+0x44>)
     b54:	f009 fee8 	bl	a928 <assert_print>
     b58:	2145      	movs	r1, #69	; 0x45
     b5a:	4628      	mov	r0, r5
     b5c:	f009 fedd 	bl	a91a <assert_post_action>
	sys_notify_generic_callback rv = NULL;
     b60:	2000      	movs	r0, #0
     b62:	e000      	b.n	b66 <sys_notify_finalize+0x36>
	switch (method) {
     b64:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     b66:	2300      	movs	r3, #0
     b68:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     b6a:	bd38      	pop	{r3, r4, r5, pc}
     b6c:	0000c324 	.word	0x0000c324
     b70:	0000c954 	.word	0x0000c954
     b74:	0000c294 	.word	0x0000c294

00000b78 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     b78:	4b01      	ldr	r3, [pc, #4]	; (b80 <__printk_hook_install+0x8>)
     b7a:	6018      	str	r0, [r3, #0]
}
     b7c:	4770      	bx	lr
     b7e:	bf00      	nop
     b80:	20004000 	.word	0x20004000

00000b84 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
     b84:	b538      	push	{r3, r4, r5, lr}
     b86:	4604      	mov	r4, r0
     b88:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     b8a:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
     b8c:	2a00      	cmp	r2, #0
     b8e:	db14      	blt.n	bba <process_complete+0x36>
     b90:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
     b94:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     b96:	2a01      	cmp	r2, #1
     b98:	d91b      	bls.n	bd2 <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
     b9a:	2b04      	cmp	r3, #4
     b9c:	d050      	beq.n	c40 <process_complete+0xbc>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
     b9e:	4c2f      	ldr	r4, [pc, #188]	; (c5c <process_complete+0xd8>)
     ba0:	f240 131b 	movw	r3, #283	; 0x11b
     ba4:	4622      	mov	r2, r4
     ba6:	492e      	ldr	r1, [pc, #184]	; (c60 <process_complete+0xdc>)
     ba8:	482e      	ldr	r0, [pc, #184]	; (c64 <process_complete+0xe0>)
     baa:	f009 febd 	bl	a928 <assert_print>
     bae:	f240 111b 	movw	r1, #283	; 0x11b
     bb2:	4620      	mov	r0, r4
     bb4:	f009 feb1 	bl	a91a <assert_post_action>
	}
}
     bb8:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
     bba:	e9d0 0100 	ldrd	r0, r1, [r0]
     bbe:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     bc2:	2300      	movs	r3, #0
     bc4:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
     bc6:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
     bc8:	2101      	movs	r1, #1
     bca:	4620      	mov	r0, r4
     bcc:	f009 fdb1 	bl	a732 <set_state>
     bd0:	e7f2      	b.n	bb8 <process_complete+0x34>
		*clients = mgr->clients;
     bd2:	e9d0 0100 	ldrd	r0, r1, [r0]
     bd6:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
     bda:	2200      	movs	r2, #0
     bdc:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
     bde:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
     be0:	2b06      	cmp	r3, #6
     be2:	d00f      	beq.n	c04 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     be4:	2b05      	cmp	r3, #5
     be6:	d11d      	bne.n	c24 <process_complete+0xa0>
			set_state(mgr, ONOFF_STATE_OFF);
     be8:	2100      	movs	r1, #0
     bea:	4620      	mov	r0, r4
     bec:	f009 fda1 	bl	a732 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     bf0:	4620      	mov	r0, r4
     bf2:	f009 fdc5 	bl	a780 <process_recheck>
     bf6:	2800      	cmp	r0, #0
     bf8:	d0de      	beq.n	bb8 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     bfa:	8ba3      	ldrh	r3, [r4, #28]
     bfc:	f043 0320 	orr.w	r3, r3, #32
     c00:	83a3      	strh	r3, [r4, #28]
     c02:	e7d9      	b.n	bb8 <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     c04:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     c08:	b13b      	cbz	r3, c1a <process_complete+0x96>
				mgr->refs += 1U;
     c0a:	8be2      	ldrh	r2, [r4, #30]
     c0c:	3201      	adds	r2, #1
     c0e:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     c10:	2b00      	cmp	r3, #0
     c12:	d0f9      	beq.n	c08 <process_complete+0x84>
	return node->next;
     c14:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     c16:	2b00      	cmp	r3, #0
     c18:	d1f6      	bne.n	c08 <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
     c1a:	2102      	movs	r1, #2
     c1c:	4620      	mov	r0, r4
     c1e:	f009 fd88 	bl	a732 <set_state>
     c22:	e7e5      	b.n	bf0 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     c24:	4d0d      	ldr	r5, [pc, #52]	; (c5c <process_complete+0xd8>)
     c26:	f240 1309 	movw	r3, #265	; 0x109
     c2a:	462a      	mov	r2, r5
     c2c:	490e      	ldr	r1, [pc, #56]	; (c68 <process_complete+0xe4>)
     c2e:	480d      	ldr	r0, [pc, #52]	; (c64 <process_complete+0xe0>)
     c30:	f009 fe7a 	bl	a928 <assert_print>
     c34:	f240 1109 	movw	r1, #265	; 0x109
     c38:	4628      	mov	r0, r5
     c3a:	f009 fe6e 	bl	a91a <assert_post_action>
     c3e:	e7d3      	b.n	be8 <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
     c40:	2100      	movs	r1, #0
     c42:	f009 fd76 	bl	a732 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     c46:	4620      	mov	r0, r4
     c48:	f009 fd9a 	bl	a780 <process_recheck>
     c4c:	2800      	cmp	r0, #0
     c4e:	d0b3      	beq.n	bb8 <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     c50:	8ba3      	ldrh	r3, [r4, #28]
     c52:	f043 0320 	orr.w	r3, r3, #32
     c56:	83a3      	strh	r3, [r4, #28]
     c58:	e7ae      	b.n	bb8 <process_complete+0x34>
     c5a:	bf00      	nop
     c5c:	0000c348 	.word	0x0000c348
     c60:	0000c954 	.word	0x0000c954
     c64:	0000c294 	.word	0x0000c294
     c68:	0000c36c 	.word	0x0000c36c

00000c6c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c70:	b083      	sub	sp, #12
     c72:	4604      	mov	r4, r0
     c74:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c76:	8b83      	ldrh	r3, [r0, #28]
     c78:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
     c7c:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
     c80:	460d      	mov	r5, r1
     c82:	b131      	cbz	r1, c92 <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     c84:	f1b8 0f00 	cmp.w	r8, #0
     c88:	d112      	bne.n	cb0 <process_event+0x44>
	list->head = NULL;
     c8a:	2300      	movs	r3, #0
     c8c:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     c8e:	9301      	str	r3, [sp, #4]
}
     c90:	e0aa      	b.n	de8 <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
     c92:	f8df 92e0 	ldr.w	r9, [pc, #736]	; f74 <process_event+0x308>
     c96:	f240 1333 	movw	r3, #307	; 0x133
     c9a:	464a      	mov	r2, r9
     c9c:	49b6      	ldr	r1, [pc, #728]	; (f78 <process_event+0x30c>)
     c9e:	48b7      	ldr	r0, [pc, #732]	; (f7c <process_event+0x310>)
     ca0:	f009 fe42 	bl	a928 <assert_print>
     ca4:	f240 1133 	movw	r1, #307	; 0x133
     ca8:	4648      	mov	r0, r9
     caa:	f009 fe36 	bl	a91a <assert_post_action>
     cae:	e7e9      	b.n	c84 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
     cb0:	2d01      	cmp	r5, #1
     cb2:	d013      	beq.n	cdc <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     cb4:	2d02      	cmp	r5, #2
     cb6:	d116      	bne.n	ce6 <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
     cb8:	8ba3      	ldrh	r3, [r4, #28]
     cba:	f043 0320 	orr.w	r3, r3, #32
     cbe:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     cc0:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     cc2:	4620      	mov	r0, r4
     cc4:	f006 fcdc 	bl	7680 <z_spin_unlock_valid>
     cc8:	2800      	cmp	r0, #0
     cca:	f000 819c 	beq.w	1006 <CONFIG_FPROTECT_BLOCK_SIZE+0x6>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     cce:	f386 8811 	msr	BASEPRI, r6
     cd2:	f3bf 8f6f 	isb	sy
}
     cd6:	b003      	add	sp, #12
     cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     cdc:	8ba3      	ldrh	r3, [r4, #28]
     cde:	f043 0310 	orr.w	r3, r3, #16
     ce2:	83a3      	strh	r3, [r4, #28]
     ce4:	e7ec      	b.n	cc0 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     ce6:	4da3      	ldr	r5, [pc, #652]	; (f74 <process_event+0x308>)
     ce8:	f44f 739e 	mov.w	r3, #316	; 0x13c
     cec:	462a      	mov	r2, r5
     cee:	49a4      	ldr	r1, [pc, #656]	; (f80 <process_event+0x314>)
     cf0:	48a2      	ldr	r0, [pc, #648]	; (f7c <process_event+0x310>)
     cf2:	f009 fe19 	bl	a928 <assert_print>
     cf6:	f44f 719e 	mov.w	r1, #316	; 0x13c
     cfa:	4628      	mov	r0, r5
     cfc:	f009 fe0d 	bl	a91a <assert_post_action>
     d00:	e7da      	b.n	cb8 <process_event+0x4c>
			evt = process_recheck(mgr);
     d02:	4620      	mov	r0, r4
     d04:	f009 fd3c 	bl	a780 <process_recheck>
     d08:	4605      	mov	r5, r0
     d0a:	e06f      	b.n	dec <process_event+0x180>
			res = mgr->last_res;
     d0c:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
     d10:	464a      	mov	r2, r9
     d12:	4669      	mov	r1, sp
     d14:	4620      	mov	r0, r4
     d16:	f7ff ff35 	bl	b84 <process_complete>
		onoff_transition_fn transit = NULL;
     d1a:	2500      	movs	r5, #0
     d1c:	e011      	b.n	d42 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     d1e:	2f00      	cmp	r7, #0
     d20:	f040 8081 	bne.w	e26 <process_event+0x1ba>
	return list->head;
     d24:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     d26:	2b00      	cmp	r3, #0
     d28:	f000 808b 	beq.w	e42 <process_event+0x1d6>
			transit = mgr->transitions->start;
     d2c:	6923      	ldr	r3, [r4, #16]
     d2e:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     d30:	2d00      	cmp	r5, #0
     d32:	f000 8094 	beq.w	e5e <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
     d36:	2106      	movs	r1, #6
     d38:	4620      	mov	r0, r4
     d3a:	f009 fcfa 	bl	a732 <set_state>
		res = 0;
     d3e:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d42:	8ba3      	ldrh	r3, [r4, #28]
     d44:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     d48:	45b8      	cmp	r8, r7
     d4a:	f000 810b 	beq.w	f64 <process_event+0x2f8>
     d4e:	68a2      	ldr	r2, [r4, #8]
     d50:	2a00      	cmp	r2, #0
     d52:	f000 8109 	beq.w	f68 <process_event+0x2fc>
     d56:	2201      	movs	r2, #1
		if (do_monitors
     d58:	4617      	mov	r7, r2
     d5a:	b91a      	cbnz	r2, d64 <process_event+0xf8>
     d5c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     d5e:	2a00      	cmp	r2, #0
     d60:	f000 8104 	beq.w	f6c <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     d64:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     d68:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
     d6a:	f104 0a14 	add.w	sl, r4, #20
     d6e:	4650      	mov	r0, sl
     d70:	f006 fc86 	bl	7680 <z_spin_unlock_valid>
     d74:	2800      	cmp	r0, #0
     d76:	f000 8115 	beq.w	fa4 <process_event+0x338>
     d7a:	f386 8811 	msr	BASEPRI, r6
     d7e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     d82:	2f00      	cmp	r7, #0
     d84:	f040 811f 	bne.w	fc6 <process_event+0x35a>
     d88:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     d8a:	b12b      	cbz	r3, d98 <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
     d8c:	464b      	mov	r3, r9
     d8e:	4642      	mov	r2, r8
     d90:	4669      	mov	r1, sp
     d92:	4620      	mov	r0, r4
     d94:	f009 fd36 	bl	a804 <notify_all>
			if (transit != NULL) {
     d98:	b115      	cbz	r5, da0 <process_event+0x134>
				transit(mgr, transition_complete);
     d9a:	497a      	ldr	r1, [pc, #488]	; (f84 <process_event+0x318>)
     d9c:	4620      	mov	r0, r4
     d9e:	47a8      	blx	r5
	__asm__ volatile(
     da0:	f04f 0320 	mov.w	r3, #32
     da4:	f3ef 8611 	mrs	r6, BASEPRI
     da8:	f383 8812 	msr	BASEPRI_MAX, r3
     dac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     db0:	4650      	mov	r0, sl
     db2:	f006 fc55 	bl	7660 <z_spin_lock_valid>
     db6:	2800      	cmp	r0, #0
     db8:	f000 810b 	beq.w	fd2 <process_event+0x366>
	z_spin_lock_set_owner(l);
     dbc:	4650      	mov	r0, sl
     dbe:	f006 fc6f 	bl	76a0 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     dc2:	8ba3      	ldrh	r3, [r4, #28]
     dc4:	f023 0308 	bic.w	r3, r3, #8
     dc8:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     dca:	8ba3      	ldrh	r3, [r4, #28]
     dcc:	f013 0f10 	tst.w	r3, #16
     dd0:	f000 810f 	beq.w	ff2 <process_event+0x386>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     dd4:	f023 0310 	bic.w	r3, r3, #16
     dd8:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
     dda:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     ddc:	8ba7      	ldrh	r7, [r4, #28]
     dde:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
     de2:	2d00      	cmp	r5, #0
     de4:	f43f af6c 	beq.w	cc0 <process_event+0x54>
		if (evt == EVT_RECHECK) {
     de8:	2d02      	cmp	r5, #2
     dea:	d08a      	beq.n	d02 <process_event+0x96>
		if (evt == EVT_NOP) {
     dec:	2d00      	cmp	r5, #0
     dee:	f43f af67 	beq.w	cc0 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
     df2:	2d01      	cmp	r5, #1
     df4:	d08a      	beq.n	d0c <process_event+0xa0>
		} else if (evt == EVT_START) {
     df6:	2d03      	cmp	r5, #3
     df8:	d091      	beq.n	d1e <process_event+0xb2>
		} else if (evt == EVT_STOP) {
     dfa:	2d04      	cmp	r5, #4
     dfc:	d03e      	beq.n	e7c <process_event+0x210>
		} else if (evt == EVT_RESET) {
     dfe:	2d05      	cmp	r5, #5
     e00:	f040 80a0 	bne.w	f44 <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     e04:	2f01      	cmp	r7, #1
     e06:	d172      	bne.n	eee <process_event+0x282>
     e08:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     e0a:	2b00      	cmp	r3, #0
     e0c:	d07d      	beq.n	f0a <process_event+0x29e>
			transit = mgr->transitions->reset;
     e0e:	6923      	ldr	r3, [r4, #16]
     e10:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     e12:	2d00      	cmp	r5, #0
     e14:	f000 8087 	beq.w	f26 <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
     e18:	2105      	movs	r1, #5
     e1a:	4620      	mov	r0, r4
     e1c:	f009 fc89 	bl	a732 <set_state>
		res = 0;
     e20:	f04f 0900 	mov.w	r9, #0
     e24:	e78d      	b.n	d42 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     e26:	4d53      	ldr	r5, [pc, #332]	; (f74 <process_event+0x308>)
     e28:	f44f 73ab 	mov.w	r3, #342	; 0x156
     e2c:	462a      	mov	r2, r5
     e2e:	4956      	ldr	r1, [pc, #344]	; (f88 <process_event+0x31c>)
     e30:	4852      	ldr	r0, [pc, #328]	; (f7c <process_event+0x310>)
     e32:	f009 fd79 	bl	a928 <assert_print>
     e36:	f44f 71ab 	mov.w	r1, #342	; 0x156
     e3a:	4628      	mov	r0, r5
     e3c:	f009 fd6d 	bl	a91a <assert_post_action>
     e40:	e770      	b.n	d24 <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     e42:	4d4c      	ldr	r5, [pc, #304]	; (f74 <process_event+0x308>)
     e44:	f240 1357 	movw	r3, #343	; 0x157
     e48:	462a      	mov	r2, r5
     e4a:	4950      	ldr	r1, [pc, #320]	; (f8c <process_event+0x320>)
     e4c:	484b      	ldr	r0, [pc, #300]	; (f7c <process_event+0x310>)
     e4e:	f009 fd6b 	bl	a928 <assert_print>
     e52:	f240 1157 	movw	r1, #343	; 0x157
     e56:	4628      	mov	r0, r5
     e58:	f009 fd5f 	bl	a91a <assert_post_action>
     e5c:	e766      	b.n	d2c <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
     e5e:	f8df 8114 	ldr.w	r8, [pc, #276]	; f74 <process_event+0x308>
     e62:	f44f 73ad 	mov.w	r3, #346	; 0x15a
     e66:	4642      	mov	r2, r8
     e68:	4949      	ldr	r1, [pc, #292]	; (f90 <process_event+0x324>)
     e6a:	4844      	ldr	r0, [pc, #272]	; (f7c <process_event+0x310>)
     e6c:	f009 fd5c 	bl	a928 <assert_print>
     e70:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     e74:	4640      	mov	r0, r8
     e76:	f009 fd50 	bl	a91a <assert_post_action>
     e7a:	e75c      	b.n	d36 <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     e7c:	2f02      	cmp	r7, #2
     e7e:	d10b      	bne.n	e98 <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
     e80:	8be3      	ldrh	r3, [r4, #30]
     e82:	b9bb      	cbnz	r3, eb4 <process_event+0x248>
			transit = mgr->transitions->stop;
     e84:	6923      	ldr	r3, [r4, #16]
     e86:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     e88:	b315      	cbz	r5, ed0 <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
     e8a:	2104      	movs	r1, #4
     e8c:	4620      	mov	r0, r4
     e8e:	f009 fc50 	bl	a732 <set_state>
		res = 0;
     e92:	f04f 0900 	mov.w	r9, #0
     e96:	e754      	b.n	d42 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     e98:	4d36      	ldr	r5, [pc, #216]	; (f74 <process_event+0x308>)
     e9a:	f240 135d 	movw	r3, #349	; 0x15d
     e9e:	462a      	mov	r2, r5
     ea0:	493c      	ldr	r1, [pc, #240]	; (f94 <process_event+0x328>)
     ea2:	4836      	ldr	r0, [pc, #216]	; (f7c <process_event+0x310>)
     ea4:	f009 fd40 	bl	a928 <assert_print>
     ea8:	f240 115d 	movw	r1, #349	; 0x15d
     eac:	4628      	mov	r0, r5
     eae:	f009 fd34 	bl	a91a <assert_post_action>
     eb2:	e7e5      	b.n	e80 <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
     eb4:	4d2f      	ldr	r5, [pc, #188]	; (f74 <process_event+0x308>)
     eb6:	f44f 73af 	mov.w	r3, #350	; 0x15e
     eba:	462a      	mov	r2, r5
     ebc:	4936      	ldr	r1, [pc, #216]	; (f98 <process_event+0x32c>)
     ebe:	482f      	ldr	r0, [pc, #188]	; (f7c <process_event+0x310>)
     ec0:	f009 fd32 	bl	a928 <assert_print>
     ec4:	f44f 71af 	mov.w	r1, #350	; 0x15e
     ec8:	4628      	mov	r0, r5
     eca:	f009 fd26 	bl	a91a <assert_post_action>
     ece:	e7d9      	b.n	e84 <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
     ed0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; f74 <process_event+0x308>
     ed4:	f240 1361 	movw	r3, #353	; 0x161
     ed8:	4642      	mov	r2, r8
     eda:	492d      	ldr	r1, [pc, #180]	; (f90 <process_event+0x324>)
     edc:	4827      	ldr	r0, [pc, #156]	; (f7c <process_event+0x310>)
     ede:	f009 fd23 	bl	a928 <assert_print>
     ee2:	f240 1161 	movw	r1, #353	; 0x161
     ee6:	4640      	mov	r0, r8
     ee8:	f009 fd17 	bl	a91a <assert_post_action>
     eec:	e7cd      	b.n	e8a <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     eee:	4d21      	ldr	r5, [pc, #132]	; (f74 <process_event+0x308>)
     ef0:	f44f 73b2 	mov.w	r3, #356	; 0x164
     ef4:	462a      	mov	r2, r5
     ef6:	4929      	ldr	r1, [pc, #164]	; (f9c <process_event+0x330>)
     ef8:	4820      	ldr	r0, [pc, #128]	; (f7c <process_event+0x310>)
     efa:	f009 fd15 	bl	a928 <assert_print>
     efe:	f44f 71b2 	mov.w	r1, #356	; 0x164
     f02:	4628      	mov	r0, r5
     f04:	f009 fd09 	bl	a91a <assert_post_action>
     f08:	e77e      	b.n	e08 <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     f0a:	4d1a      	ldr	r5, [pc, #104]	; (f74 <process_event+0x308>)
     f0c:	f240 1365 	movw	r3, #357	; 0x165
     f10:	462a      	mov	r2, r5
     f12:	491e      	ldr	r1, [pc, #120]	; (f8c <process_event+0x320>)
     f14:	4819      	ldr	r0, [pc, #100]	; (f7c <process_event+0x310>)
     f16:	f009 fd07 	bl	a928 <assert_print>
     f1a:	f240 1165 	movw	r1, #357	; 0x165
     f1e:	4628      	mov	r0, r5
     f20:	f009 fcfb 	bl	a91a <assert_post_action>
     f24:	e773      	b.n	e0e <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
     f26:	f8df 804c 	ldr.w	r8, [pc, #76]	; f74 <process_event+0x308>
     f2a:	f44f 73b4 	mov.w	r3, #360	; 0x168
     f2e:	4642      	mov	r2, r8
     f30:	4917      	ldr	r1, [pc, #92]	; (f90 <process_event+0x324>)
     f32:	4812      	ldr	r0, [pc, #72]	; (f7c <process_event+0x310>)
     f34:	f009 fcf8 	bl	a928 <assert_print>
     f38:	f44f 71b4 	mov.w	r1, #360	; 0x168
     f3c:	4640      	mov	r0, r8
     f3e:	f009 fcec 	bl	a91a <assert_post_action>
     f42:	e769      	b.n	e18 <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
     f44:	4d0b      	ldr	r5, [pc, #44]	; (f74 <process_event+0x308>)
     f46:	f240 136b 	movw	r3, #363	; 0x16b
     f4a:	462a      	mov	r2, r5
     f4c:	4914      	ldr	r1, [pc, #80]	; (fa0 <process_event+0x334>)
     f4e:	480b      	ldr	r0, [pc, #44]	; (f7c <process_event+0x310>)
     f50:	f009 fcea 	bl	a928 <assert_print>
     f54:	f240 116b 	movw	r1, #363	; 0x16b
     f58:	4628      	mov	r0, r5
     f5a:	f009 fcde 	bl	a91a <assert_post_action>
		onoff_transition_fn transit = NULL;
     f5e:	2500      	movs	r5, #0
		res = 0;
     f60:	46a9      	mov	r9, r5
     f62:	e6ee      	b.n	d42 <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
     f64:	2200      	movs	r2, #0
     f66:	e6f7      	b.n	d58 <process_event+0xec>
     f68:	2200      	movs	r2, #0
     f6a:	e6f5      	b.n	d58 <process_event+0xec>
		    || (transit != NULL)) {
     f6c:	2d00      	cmp	r5, #0
     f6e:	f47f aef9 	bne.w	d64 <process_event+0xf8>
     f72:	e72a      	b.n	dca <process_event+0x15e>
     f74:	0000c348 	.word	0x0000c348
     f78:	0000c394 	.word	0x0000c394
     f7c:	0000c294 	.word	0x0000c294
     f80:	0000c3a4 	.word	0x0000c3a4
     f84:	00001041 	.word	0x00001041
     f88:	0000c3b8 	.word	0x0000c3b8
     f8c:	0000c3c4 	.word	0x0000c3c4
     f90:	0000c3e8 	.word	0x0000c3e8
     f94:	0000c400 	.word	0x0000c400
     f98:	0000c418 	.word	0x0000c418
     f9c:	0000c428 	.word	0x0000c428
     fa0:	0000c954 	.word	0x0000c954
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     fa4:	f8df b080 	ldr.w	fp, [pc, #128]	; 1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
     fa8:	23b9      	movs	r3, #185	; 0xb9
     faa:	465a      	mov	r2, fp
     fac:	491f      	ldr	r1, [pc, #124]	; (102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
     fae:	4820      	ldr	r0, [pc, #128]	; (1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>)
     fb0:	f009 fcba 	bl	a928 <assert_print>
     fb4:	4651      	mov	r1, sl
     fb6:	481f      	ldr	r0, [pc, #124]	; (1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>)
     fb8:	f009 fcb6 	bl	a928 <assert_print>
     fbc:	21b9      	movs	r1, #185	; 0xb9
     fbe:	4658      	mov	r0, fp
     fc0:	f009 fcab 	bl	a91a <assert_post_action>
     fc4:	e6d9      	b.n	d7a <process_event+0x10e>
				notify_monitors(mgr, state, res);
     fc6:	464a      	mov	r2, r9
     fc8:	4641      	mov	r1, r8
     fca:	4620      	mov	r0, r4
     fcc:	f009 fbb9 	bl	a742 <notify_monitors>
     fd0:	e6da      	b.n	d88 <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     fd2:	4d15      	ldr	r5, [pc, #84]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
     fd4:	238e      	movs	r3, #142	; 0x8e
     fd6:	462a      	mov	r2, r5
     fd8:	4917      	ldr	r1, [pc, #92]	; (1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>)
     fda:	4815      	ldr	r0, [pc, #84]	; (1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>)
     fdc:	f009 fca4 	bl	a928 <assert_print>
     fe0:	4651      	mov	r1, sl
     fe2:	4816      	ldr	r0, [pc, #88]	; (103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>)
     fe4:	f009 fca0 	bl	a928 <assert_print>
     fe8:	218e      	movs	r1, #142	; 0x8e
     fea:	4628      	mov	r0, r5
     fec:	f009 fc95 	bl	a91a <assert_post_action>
     ff0:	e6e4      	b.n	dbc <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     ff2:	f013 0f20 	tst.w	r3, #32
     ff6:	d004      	beq.n	1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     ff8:	f023 0320 	bic.w	r3, r3, #32
     ffc:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
     ffe:	2502      	movs	r5, #2
    1000:	e6ec      	b.n	ddc <process_event+0x170>
		evt = EVT_NOP;
    1002:	2500      	movs	r5, #0
    1004:	e6ea      	b.n	ddc <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1006:	4d08      	ldr	r5, [pc, #32]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
    1008:	23b9      	movs	r3, #185	; 0xb9
    100a:	462a      	mov	r2, r5
    100c:	4907      	ldr	r1, [pc, #28]	; (102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
    100e:	4808      	ldr	r0, [pc, #32]	; (1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>)
    1010:	f009 fc8a 	bl	a928 <assert_print>
    1014:	4621      	mov	r1, r4
    1016:	4807      	ldr	r0, [pc, #28]	; (1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>)
    1018:	f009 fc86 	bl	a928 <assert_print>
    101c:	21b9      	movs	r1, #185	; 0xb9
    101e:	4628      	mov	r0, r5
    1020:	f009 fc7b 	bl	a91a <assert_post_action>
    1024:	e653      	b.n	cce <process_event+0x62>
    1026:	bf00      	nop
    1028:	0000c440 	.word	0x0000c440
    102c:	0000c470 	.word	0x0000c470
    1030:	0000c294 	.word	0x0000c294
    1034:	0000c488 	.word	0x0000c488
    1038:	0000c4a0 	.word	0x0000c4a0
    103c:	0000c4b8 	.word	0x0000c4b8

00001040 <transition_complete>:
{
    1040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1044:	4604      	mov	r4, r0
    1046:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1048:	f100 0614 	add.w	r6, r0, #20
    104c:	f04f 0320 	mov.w	r3, #32
    1050:	f3ef 8711 	mrs	r7, BASEPRI
    1054:	f383 8812 	msr	BASEPRI_MAX, r3
    1058:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    105c:	4630      	mov	r0, r6
    105e:	f006 faff 	bl	7660 <z_spin_lock_valid>
    1062:	b150      	cbz	r0, 107a <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    1064:	4630      	mov	r0, r6
    1066:	f006 fb1b 	bl	76a0 <z_spin_lock_set_owner>
	mgr->last_res = res;
    106a:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    106c:	463a      	mov	r2, r7
    106e:	2101      	movs	r1, #1
    1070:	4620      	mov	r0, r4
    1072:	f7ff fdfb 	bl	c6c <process_event>
}
    1076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    107a:	f8df 8020 	ldr.w	r8, [pc, #32]	; 109c <transition_complete+0x5c>
    107e:	238e      	movs	r3, #142	; 0x8e
    1080:	4642      	mov	r2, r8
    1082:	4907      	ldr	r1, [pc, #28]	; (10a0 <transition_complete+0x60>)
    1084:	4807      	ldr	r0, [pc, #28]	; (10a4 <transition_complete+0x64>)
    1086:	f009 fc4f 	bl	a928 <assert_print>
    108a:	4631      	mov	r1, r6
    108c:	4806      	ldr	r0, [pc, #24]	; (10a8 <transition_complete+0x68>)
    108e:	f009 fc4b 	bl	a928 <assert_print>
    1092:	218e      	movs	r1, #142	; 0x8e
    1094:	4640      	mov	r0, r8
    1096:	f009 fc40 	bl	a91a <assert_post_action>
    109a:	e7e3      	b.n	1064 <transition_complete+0x24>
    109c:	0000c440 	.word	0x0000c440
    10a0:	0000c4a0 	.word	0x0000c4a0
    10a4:	0000c294 	.word	0x0000c294
    10a8:	0000c4b8 	.word	0x0000c4b8

000010ac <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    10ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10b0:	4604      	mov	r4, r0
    10b2:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    10b4:	f009 fb7d 	bl	a7b2 <validate_args>

	if (rv < 0) {
    10b8:	1e06      	subs	r6, r0, #0
    10ba:	db58      	blt.n	116e <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    10bc:	f104 0714 	add.w	r7, r4, #20
    10c0:	f04f 0320 	mov.w	r3, #32
    10c4:	f3ef 8911 	mrs	r9, BASEPRI
    10c8:	f383 8812 	msr	BASEPRI_MAX, r3
    10cc:	f3bf 8f6f 	isb	sy
    10d0:	4638      	mov	r0, r7
    10d2:	f006 fac5 	bl	7660 <z_spin_lock_valid>
    10d6:	b1e8      	cbz	r0, 1114 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    10d8:	4638      	mov	r0, r7
    10da:	f006 fae1 	bl	76a0 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    10de:	8ba5      	ldrh	r5, [r4, #28]
    10e0:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    10e4:	8be3      	ldrh	r3, [r4, #30]
    10e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    10ea:	4293      	cmp	r3, r2
    10ec:	d056      	beq.n	119c <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    10ee:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    10f0:	2d02      	cmp	r5, #2
    10f2:	d01f      	beq.n	1134 <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    10f4:	b32d      	cbz	r5, 1142 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
    10f6:	2d04      	cmp	r5, #4
    10f8:	d023      	beq.n	1142 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
    10fa:	2d06      	cmp	r5, #6
    10fc:	d021      	beq.n	1142 <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    10fe:	2d05      	cmp	r5, #5
    1100:	d053      	beq.n	11aa <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1102:	2d01      	cmp	r5, #1
    1104:	d136      	bne.n	1174 <onoff_request+0xc8>
		rv = -EIO;
    1106:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    110a:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    110e:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1110:	4652      	mov	r2, sl
    1112:	e01c      	b.n	114e <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1114:	4d3c      	ldr	r5, [pc, #240]	; (1208 <onoff_request+0x15c>)
    1116:	238e      	movs	r3, #142	; 0x8e
    1118:	462a      	mov	r2, r5
    111a:	493c      	ldr	r1, [pc, #240]	; (120c <onoff_request+0x160>)
    111c:	483c      	ldr	r0, [pc, #240]	; (1210 <onoff_request+0x164>)
    111e:	f009 fc03 	bl	a928 <assert_print>
    1122:	4639      	mov	r1, r7
    1124:	483b      	ldr	r0, [pc, #236]	; (1214 <onoff_request+0x168>)
    1126:	f009 fbff 	bl	a928 <assert_print>
    112a:	218e      	movs	r1, #142	; 0x8e
    112c:	4628      	mov	r0, r5
    112e:	f009 fbf4 	bl	a91a <assert_post_action>
    1132:	e7d1      	b.n	10d8 <onoff_request+0x2c>
		mgr->refs += 1U;
    1134:	3301      	adds	r3, #1
    1136:	83e3      	strh	r3, [r4, #30]
		notify = true;
    1138:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    113c:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    113e:	461a      	mov	r2, r3
    1140:	e005      	b.n	114e <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
    1142:	fab5 f385 	clz	r3, r5
    1146:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    1148:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    114c:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    114e:	b142      	cbz	r2, 1162 <onoff_request+0xb6>
	parent->next = child;
    1150:	2200      	movs	r2, #0
    1152:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    1156:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    1158:	b372      	cbz	r2, 11b8 <onoff_request+0x10c>
	parent->next = child;
    115a:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    115e:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    1162:	b373      	cbz	r3, 11c2 <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
    1164:	464a      	mov	r2, r9
    1166:	2102      	movs	r1, #2
    1168:	4620      	mov	r0, r4
    116a:	f7ff fd7f 	bl	c6c <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    116e:	4630      	mov	r0, r6
    1170:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1174:	4e28      	ldr	r6, [pc, #160]	; (1218 <onoff_request+0x16c>)
    1176:	f240 13c9 	movw	r3, #457	; 0x1c9
    117a:	4632      	mov	r2, r6
    117c:	4927      	ldr	r1, [pc, #156]	; (121c <onoff_request+0x170>)
    117e:	4824      	ldr	r0, [pc, #144]	; (1210 <onoff_request+0x164>)
    1180:	f009 fbd2 	bl	a928 <assert_print>
    1184:	f240 11c9 	movw	r1, #457	; 0x1c9
    1188:	4630      	mov	r0, r6
    118a:	f009 fbc6 	bl	a91a <assert_post_action>
		rv = -EIO;
    118e:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    1192:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1196:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1198:	4652      	mov	r2, sl
    119a:	e7d8      	b.n	114e <onoff_request+0xa2>
		rv = -EAGAIN;
    119c:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    11a0:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    11a4:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    11a6:	4652      	mov	r2, sl
    11a8:	e7d1      	b.n	114e <onoff_request+0xa2>
		rv = -ENOTSUP;
    11aa:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    11ae:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    11b2:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    11b4:	4652      	mov	r2, sl
    11b6:	e7ca      	b.n	114e <onoff_request+0xa2>
    11b8:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    11bc:	f8c4 8000 	str.w	r8, [r4]
}
    11c0:	e7cf      	b.n	1162 <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    11c2:	4638      	mov	r0, r7
    11c4:	f006 fa5c 	bl	7680 <z_spin_unlock_valid>
    11c8:	b168      	cbz	r0, 11e6 <onoff_request+0x13a>
	__asm__ volatile(
    11ca:	f389 8811 	msr	BASEPRI, r9
    11ce:	f3bf 8f6f 	isb	sy
		if (notify) {
    11d2:	f1ba 0f00 	cmp.w	sl, #0
    11d6:	d0ca      	beq.n	116e <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
    11d8:	2300      	movs	r3, #0
    11da:	462a      	mov	r2, r5
    11dc:	4641      	mov	r1, r8
    11de:	4620      	mov	r0, r4
    11e0:	f009 fafd 	bl	a7de <notify_one>
    11e4:	e7c3      	b.n	116e <onoff_request+0xc2>
    11e6:	f8df b020 	ldr.w	fp, [pc, #32]	; 1208 <onoff_request+0x15c>
    11ea:	23b9      	movs	r3, #185	; 0xb9
    11ec:	465a      	mov	r2, fp
    11ee:	490c      	ldr	r1, [pc, #48]	; (1220 <onoff_request+0x174>)
    11f0:	4807      	ldr	r0, [pc, #28]	; (1210 <onoff_request+0x164>)
    11f2:	f009 fb99 	bl	a928 <assert_print>
    11f6:	4639      	mov	r1, r7
    11f8:	480a      	ldr	r0, [pc, #40]	; (1224 <onoff_request+0x178>)
    11fa:	f009 fb95 	bl	a928 <assert_print>
    11fe:	21b9      	movs	r1, #185	; 0xb9
    1200:	4658      	mov	r0, fp
    1202:	f009 fb8a 	bl	a91a <assert_post_action>
    1206:	e7e0      	b.n	11ca <onoff_request+0x11e>
    1208:	0000c440 	.word	0x0000c440
    120c:	0000c4a0 	.word	0x0000c4a0
    1210:	0000c294 	.word	0x0000c294
    1214:	0000c4b8 	.word	0x0000c4b8
    1218:	0000c348 	.word	0x0000c348
    121c:	0000c428 	.word	0x0000c428
    1220:	0000c470 	.word	0x0000c470
    1224:	0000c488 	.word	0x0000c488

00001228 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    1228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    122c:	4606      	mov	r6, r0
    122e:	460d      	mov	r5, r1
    1230:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    1232:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    1236:	d222      	bcs.n	127e <sys_heap_init+0x56>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1238:	2c04      	cmp	r4, #4
    123a:	d931      	bls.n	12a0 <sys_heap_init+0x78>
	bytes -= heap_footer_bytes(bytes);
    123c:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    123e:	1dec      	adds	r4, r5, #7
    1240:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1244:	4415      	add	r5, r2
    1246:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    124a:	1b2d      	subs	r5, r5, r4
    124c:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1250:	2d17      	cmp	r5, #23
    1252:	d936      	bls.n	12c2 <sys_heap_init+0x9a>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    1254:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
    1256:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
    125a:	2300      	movs	r3, #0
    125c:	60e3      	str	r3, [r4, #12]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    125e:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    1262:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    1266:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
    126a:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    126c:	3607      	adds	r6, #7
    126e:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    1272:	f109 0301 	add.w	r3, r9, #1
    1276:	4543      	cmp	r3, r8
    1278:	d834      	bhi.n	12e4 <sys_heap_init+0xbc>
{
    127a:	2300      	movs	r3, #0
    127c:	e049      	b.n	1312 <sys_heap_init+0xea>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    127e:	4f38      	ldr	r7, [pc, #224]	; (1360 <sys_heap_init+0x138>)
    1280:	f240 13e3 	movw	r3, #483	; 0x1e3
    1284:	463a      	mov	r2, r7
    1286:	4937      	ldr	r1, [pc, #220]	; (1364 <sys_heap_init+0x13c>)
    1288:	4837      	ldr	r0, [pc, #220]	; (1368 <sys_heap_init+0x140>)
    128a:	f009 fb4d 	bl	a928 <assert_print>
    128e:	4837      	ldr	r0, [pc, #220]	; (136c <sys_heap_init+0x144>)
    1290:	f009 fb4a 	bl	a928 <assert_print>
    1294:	f240 11e3 	movw	r1, #483	; 0x1e3
    1298:	4638      	mov	r0, r7
    129a:	f009 fb3e 	bl	a91a <assert_post_action>
    129e:	e7cb      	b.n	1238 <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    12a0:	4f2f      	ldr	r7, [pc, #188]	; (1360 <sys_heap_init+0x138>)
    12a2:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    12a6:	463a      	mov	r2, r7
    12a8:	4931      	ldr	r1, [pc, #196]	; (1370 <sys_heap_init+0x148>)
    12aa:	482f      	ldr	r0, [pc, #188]	; (1368 <sys_heap_init+0x140>)
    12ac:	f009 fb3c 	bl	a928 <assert_print>
    12b0:	4830      	ldr	r0, [pc, #192]	; (1374 <sys_heap_init+0x14c>)
    12b2:	f009 fb39 	bl	a928 <assert_print>
    12b6:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    12ba:	4638      	mov	r0, r7
    12bc:	f009 fb2d 	bl	a91a <assert_post_action>
    12c0:	e7bc      	b.n	123c <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    12c2:	4f27      	ldr	r7, [pc, #156]	; (1360 <sys_heap_init+0x138>)
    12c4:	f240 13f3 	movw	r3, #499	; 0x1f3
    12c8:	463a      	mov	r2, r7
    12ca:	492b      	ldr	r1, [pc, #172]	; (1378 <sys_heap_init+0x150>)
    12cc:	4826      	ldr	r0, [pc, #152]	; (1368 <sys_heap_init+0x140>)
    12ce:	f009 fb2b 	bl	a928 <assert_print>
    12d2:	4828      	ldr	r0, [pc, #160]	; (1374 <sys_heap_init+0x14c>)
    12d4:	f009 fb28 	bl	a928 <assert_print>
    12d8:	f240 11f3 	movw	r1, #499	; 0x1f3
    12dc:	4638      	mov	r0, r7
    12de:	f009 fb1c 	bl	a91a <assert_post_action>
    12e2:	e7b7      	b.n	1254 <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    12e4:	f8df a078 	ldr.w	sl, [pc, #120]	; 1360 <sys_heap_init+0x138>
    12e8:	f44f 7301 	mov.w	r3, #516	; 0x204
    12ec:	4652      	mov	r2, sl
    12ee:	4923      	ldr	r1, [pc, #140]	; (137c <sys_heap_init+0x154>)
    12f0:	481d      	ldr	r0, [pc, #116]	; (1368 <sys_heap_init+0x140>)
    12f2:	f009 fb19 	bl	a928 <assert_print>
    12f6:	481f      	ldr	r0, [pc, #124]	; (1374 <sys_heap_init+0x14c>)
    12f8:	f009 fb16 	bl	a928 <assert_print>
    12fc:	f44f 7101 	mov.w	r1, #516	; 0x204
    1300:	4650      	mov	r0, sl
    1302:	f009 fb0a 	bl	a91a <assert_post_action>
    1306:	e7b8      	b.n	127a <sys_heap_init+0x52>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    1308:	1d1a      	adds	r2, r3, #4
    130a:	2100      	movs	r1, #0
    130c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    1310:	3301      	adds	r3, #1
    1312:	42bb      	cmp	r3, r7
    1314:	dbf8      	blt.n	1308 <sys_heap_init+0xe0>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1316:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
    131a:	b29b      	uxth	r3, r3
    131c:	8063      	strh	r3, [r4, #2]
    131e:	2200      	movs	r2, #0
    1320:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    1322:	f043 0301 	orr.w	r3, r3, #1
    1326:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    1328:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    132c:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
    1330:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
    1334:	1cb3      	adds	r3, r6, #2
    1336:	52e1      	strh	r1, [r4, r3]
    1338:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
    133c:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
    1340:	1ca9      	adds	r1, r5, #2
    1342:	5262      	strh	r2, [r4, r1]
    1344:	4425      	add	r5, r4
    1346:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    134a:	886b      	ldrh	r3, [r5, #2]
    134c:	f043 0301 	orr.w	r3, r3, #1
    1350:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    1352:	4649      	mov	r1, r9
    1354:	4620      	mov	r0, r4
    1356:	f009 faba 	bl	a8ce <free_list_add>
}
    135a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    135e:	bf00      	nop
    1360:	0000c4d0 	.word	0x0000c4d0
    1364:	0000c5a4 	.word	0x0000c5a4
    1368:	0000c294 	.word	0x0000c294
    136c:	0000c5bc 	.word	0x0000c5bc
    1370:	0000c5d4 	.word	0x0000c5d4
    1374:	0000c5f8 	.word	0x0000c5f8
    1378:	0000c614 	.word	0x0000c614
    137c:	0000c640 	.word	0x0000c640

00001380 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    1380:	4684      	mov	ip, r0
	const char *sp = *str;
    1382:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    1384:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    1386:	e005      	b.n	1394 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    1388:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    138c:	3201      	adds	r2, #1
    138e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1392:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1394:	7813      	ldrb	r3, [r2, #0]
    1396:	4904      	ldr	r1, [pc, #16]	; (13a8 <extract_decimal+0x28>)
    1398:	5c59      	ldrb	r1, [r3, r1]
    139a:	f011 0f04 	tst.w	r1, #4
    139e:	d1f3      	bne.n	1388 <extract_decimal+0x8>
	}
	*str = sp;
    13a0:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop
    13a8:	0000e039 	.word	0x0000e039

000013ac <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    13ac:	b570      	push	{r4, r5, r6, lr}
    13ae:	b082      	sub	sp, #8
    13b0:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    13b2:	2300      	movs	r3, #0
    13b4:	6003      	str	r3, [r0, #0]
    13b6:	6043      	str	r3, [r0, #4]
    13b8:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    13ba:	784b      	ldrb	r3, [r1, #1]
    13bc:	2b25      	cmp	r3, #37	; 0x25
    13be:	d002      	beq.n	13c6 <extract_conversion+0x1a>
    13c0:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    13c2:	2501      	movs	r5, #1
    13c4:	e01f      	b.n	1406 <extract_conversion+0x5a>
		conv->specifier = *sp++;
    13c6:	1c88      	adds	r0, r1, #2
    13c8:	70e3      	strb	r3, [r4, #3]
		return sp;
    13ca:	e145      	b.n	1658 <extract_conversion+0x2ac>
			conv->flag_dash = true;
    13cc:	7823      	ldrb	r3, [r4, #0]
    13ce:	f043 0304 	orr.w	r3, r3, #4
    13d2:	7023      	strb	r3, [r4, #0]
		if (loop) {
    13d4:	b1b5      	cbz	r5, 1404 <extract_conversion+0x58>
			++sp;
    13d6:	3601      	adds	r6, #1
    13d8:	e014      	b.n	1404 <extract_conversion+0x58>
			conv->flag_plus = true;
    13da:	7823      	ldrb	r3, [r4, #0]
    13dc:	f043 0308 	orr.w	r3, r3, #8
    13e0:	7023      	strb	r3, [r4, #0]
			break;
    13e2:	e7f7      	b.n	13d4 <extract_conversion+0x28>
			conv->flag_space = true;
    13e4:	7823      	ldrb	r3, [r4, #0]
    13e6:	f043 0310 	orr.w	r3, r3, #16
    13ea:	7023      	strb	r3, [r4, #0]
			break;
    13ec:	e7f2      	b.n	13d4 <extract_conversion+0x28>
			conv->flag_hash = true;
    13ee:	7823      	ldrb	r3, [r4, #0]
    13f0:	f043 0320 	orr.w	r3, r3, #32
    13f4:	7023      	strb	r3, [r4, #0]
			break;
    13f6:	e7ed      	b.n	13d4 <extract_conversion+0x28>
			conv->flag_zero = true;
    13f8:	7823      	ldrb	r3, [r4, #0]
    13fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    13fe:	7023      	strb	r3, [r4, #0]
			break;
    1400:	e7e8      	b.n	13d4 <extract_conversion+0x28>
		switch (*sp) {
    1402:	2500      	movs	r5, #0
	} while (loop);
    1404:	b345      	cbz	r5, 1458 <extract_conversion+0xac>
		switch (*sp) {
    1406:	7833      	ldrb	r3, [r6, #0]
    1408:	3b20      	subs	r3, #32
    140a:	2b10      	cmp	r3, #16
    140c:	d8f9      	bhi.n	1402 <extract_conversion+0x56>
    140e:	a201      	add	r2, pc, #4	; (adr r2, 1414 <extract_conversion+0x68>)
    1410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1414:	000013e5 	.word	0x000013e5
    1418:	00001403 	.word	0x00001403
    141c:	00001403 	.word	0x00001403
    1420:	000013ef 	.word	0x000013ef
    1424:	00001403 	.word	0x00001403
    1428:	00001403 	.word	0x00001403
    142c:	00001403 	.word	0x00001403
    1430:	00001403 	.word	0x00001403
    1434:	00001403 	.word	0x00001403
    1438:	00001403 	.word	0x00001403
    143c:	00001403 	.word	0x00001403
    1440:	000013db 	.word	0x000013db
    1444:	00001403 	.word	0x00001403
    1448:	000013cd 	.word	0x000013cd
    144c:	00001403 	.word	0x00001403
    1450:	00001403 	.word	0x00001403
    1454:	000013f9 	.word	0x000013f9
	if (conv->flag_zero && conv->flag_dash) {
    1458:	7823      	ldrb	r3, [r4, #0]
    145a:	f003 0344 	and.w	r3, r3, #68	; 0x44
    145e:	2b44      	cmp	r3, #68	; 0x44
    1460:	d05f      	beq.n	1522 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    1462:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    1464:	7823      	ldrb	r3, [r4, #0]
    1466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    146a:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    146c:	7833      	ldrb	r3, [r6, #0]
    146e:	2b2a      	cmp	r3, #42	; 0x2a
    1470:	d05c      	beq.n	152c <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    1472:	a801      	add	r0, sp, #4
    1474:	f7ff ff84 	bl	1380 <extract_decimal>
	if (sp != wp) {
    1478:	9b01      	ldr	r3, [sp, #4]
    147a:	429e      	cmp	r6, r3
    147c:	d00f      	beq.n	149e <extract_conversion+0xf2>
		conv->width_present = true;
    147e:	7823      	ldrb	r3, [r4, #0]
    1480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1484:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    1486:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    1488:	b2db      	uxtb	r3, r3
    148a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    148e:	2800      	cmp	r0, #0
    1490:	db54      	blt.n	153c <extract_conversion+0x190>
    1492:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    1494:	4313      	orrs	r3, r2
    1496:	7822      	ldrb	r2, [r4, #0]
    1498:	f363 0241 	bfi	r2, r3, #1, #1
    149c:	7022      	strb	r2, [r4, #0]
	return sp;
    149e:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    14a0:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    14a2:	781b      	ldrb	r3, [r3, #0]
    14a4:	2b2e      	cmp	r3, #46	; 0x2e
    14a6:	bf14      	ite	ne
    14a8:	2300      	movne	r3, #0
    14aa:	2301      	moveq	r3, #1
    14ac:	7862      	ldrb	r2, [r4, #1]
    14ae:	f363 0241 	bfi	r2, r3, #1, #1
    14b2:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    14b4:	2b00      	cmp	r3, #0
    14b6:	d043      	beq.n	1540 <extract_conversion+0x194>
	++sp;
    14b8:	9b01      	ldr	r3, [sp, #4]
    14ba:	1c5a      	adds	r2, r3, #1
    14bc:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    14be:	785b      	ldrb	r3, [r3, #1]
    14c0:	2b2a      	cmp	r3, #42	; 0x2a
    14c2:	d03f      	beq.n	1544 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    14c4:	a801      	add	r0, sp, #4
    14c6:	f7ff ff5b 	bl	1380 <extract_decimal>
	conv->prec_value = prec;
    14ca:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    14cc:	7823      	ldrb	r3, [r4, #0]
    14ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    14d2:	2800      	cmp	r0, #0
    14d4:	db3e      	blt.n	1554 <extract_conversion+0x1a8>
    14d6:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    14d8:	4313      	orrs	r3, r2
    14da:	7822      	ldrb	r2, [r4, #0]
    14dc:	f363 0241 	bfi	r2, r3, #1, #1
    14e0:	7022      	strb	r2, [r4, #0]
	return sp;
    14e2:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    14e4:	7803      	ldrb	r3, [r0, #0]
    14e6:	3b4c      	subs	r3, #76	; 0x4c
    14e8:	2b2e      	cmp	r3, #46	; 0x2e
    14ea:	f200 809d 	bhi.w	1628 <extract_conversion+0x27c>
    14ee:	e8df f003 	tbb	[pc, r3]
    14f2:	9b90      	.short	0x9b90
    14f4:	9b9b9b9b 	.word	0x9b9b9b9b
    14f8:	9b9b9b9b 	.word	0x9b9b9b9b
    14fc:	9b9b9b9b 	.word	0x9b9b9b9b
    1500:	9b9b9b9b 	.word	0x9b9b9b9b
    1504:	9b9b9b9b 	.word	0x9b9b9b9b
    1508:	9b9b9b9b 	.word	0x9b9b9b9b
    150c:	9b339b9b 	.word	0x9b339b9b
    1510:	9b459b57 	.word	0x9b459b57
    1514:	9b9b9b9b 	.word	0x9b9b9b9b
    1518:	9b899b9b 	.word	0x9b899b9b
    151c:	9b9b9b9b 	.word	0x9b9b9b9b
    1520:	82          	.byte	0x82
    1521:	00          	.byte	0x00
		conv->flag_zero = false;
    1522:	7823      	ldrb	r3, [r4, #0]
    1524:	f36f 1386 	bfc	r3, #6, #1
    1528:	7023      	strb	r3, [r4, #0]
    152a:	e79a      	b.n	1462 <extract_conversion+0xb6>
		conv->width_star = true;
    152c:	7863      	ldrb	r3, [r4, #1]
    152e:	f043 0301 	orr.w	r3, r3, #1
    1532:	7063      	strb	r3, [r4, #1]
		return ++sp;
    1534:	4633      	mov	r3, r6
    1536:	3301      	adds	r3, #1
    1538:	9301      	str	r3, [sp, #4]
    153a:	e7b1      	b.n	14a0 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    153c:	2201      	movs	r2, #1
    153e:	e7a9      	b.n	1494 <extract_conversion+0xe8>
		return sp;
    1540:	9801      	ldr	r0, [sp, #4]
    1542:	e7cf      	b.n	14e4 <extract_conversion+0x138>
		conv->prec_star = true;
    1544:	7863      	ldrb	r3, [r4, #1]
    1546:	f043 0304 	orr.w	r3, r3, #4
    154a:	7063      	strb	r3, [r4, #1]
		return ++sp;
    154c:	4610      	mov	r0, r2
    154e:	3001      	adds	r0, #1
    1550:	9001      	str	r0, [sp, #4]
    1552:	e7c7      	b.n	14e4 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    1554:	2201      	movs	r2, #1
    1556:	e7bf      	b.n	14d8 <extract_conversion+0x12c>
		if (*++sp == 'h') {
    1558:	1c42      	adds	r2, r0, #1
    155a:	7843      	ldrb	r3, [r0, #1]
    155c:	2b68      	cmp	r3, #104	; 0x68
    155e:	d006      	beq.n	156e <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    1560:	7863      	ldrb	r3, [r4, #1]
    1562:	2102      	movs	r1, #2
    1564:	f361 03c6 	bfi	r3, r1, #3, #4
    1568:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    156a:	4610      	mov	r0, r2
    156c:	e01e      	b.n	15ac <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    156e:	7863      	ldrb	r3, [r4, #1]
    1570:	2201      	movs	r2, #1
    1572:	f362 03c6 	bfi	r3, r2, #3, #4
    1576:	7063      	strb	r3, [r4, #1]
			++sp;
    1578:	3002      	adds	r0, #2
    157a:	e017      	b.n	15ac <extract_conversion+0x200>
		if (*++sp == 'l') {
    157c:	1c42      	adds	r2, r0, #1
    157e:	7843      	ldrb	r3, [r0, #1]
    1580:	2b6c      	cmp	r3, #108	; 0x6c
    1582:	d006      	beq.n	1592 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    1584:	7863      	ldrb	r3, [r4, #1]
    1586:	2103      	movs	r1, #3
    1588:	f361 03c6 	bfi	r3, r1, #3, #4
    158c:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    158e:	4610      	mov	r0, r2
    1590:	e00c      	b.n	15ac <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    1592:	7863      	ldrb	r3, [r4, #1]
    1594:	2204      	movs	r2, #4
    1596:	f362 03c6 	bfi	r3, r2, #3, #4
    159a:	7063      	strb	r3, [r4, #1]
			++sp;
    159c:	3002      	adds	r0, #2
    159e:	e005      	b.n	15ac <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    15a0:	7863      	ldrb	r3, [r4, #1]
    15a2:	2205      	movs	r2, #5
    15a4:	f362 03c6 	bfi	r3, r2, #3, #4
    15a8:	7063      	strb	r3, [r4, #1]
		++sp;
    15aa:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    15ac:	f810 3b01 	ldrb.w	r3, [r0], #1
    15b0:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    15b2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    15b6:	2a37      	cmp	r2, #55	; 0x37
    15b8:	d87d      	bhi.n	16b6 <extract_conversion+0x30a>
    15ba:	e8df f002 	tbb	[pc, r2]
    15be:	7c5e      	.short	0x7c5e
    15c0:	5e5e7c7c 	.word	0x5e5e7c7c
    15c4:	7c7c7c5e 	.word	0x7c7c7c5e
    15c8:	7c7c7c7c 	.word	0x7c7c7c7c
    15cc:	7c7c7c7c 	.word	0x7c7c7c7c
    15d0:	7c7c7c7c 	.word	0x7c7c7c7c
    15d4:	7c7c4f7c 	.word	0x7c7c4f7c
    15d8:	7c7c7c7c 	.word	0x7c7c7c7c
    15dc:	7c5e7c7c 	.word	0x7c5e7c7c
    15e0:	5e5e3a4f 	.word	0x5e5e3a4f
    15e4:	7c3a7c5e 	.word	0x7c3a7c5e
    15e8:	657c7c7c 	.word	0x657c7c7c
    15ec:	7c7c714f 	.word	0x7c7c714f
    15f0:	7c4f7c71 	.word	0x7c4f7c71
    15f4:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    15f6:	7863      	ldrb	r3, [r4, #1]
    15f8:	2206      	movs	r2, #6
    15fa:	f362 03c6 	bfi	r3, r2, #3, #4
    15fe:	7063      	strb	r3, [r4, #1]
		++sp;
    1600:	3001      	adds	r0, #1
		break;
    1602:	e7d3      	b.n	15ac <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    1604:	7863      	ldrb	r3, [r4, #1]
    1606:	2207      	movs	r2, #7
    1608:	f362 03c6 	bfi	r3, r2, #3, #4
    160c:	7063      	strb	r3, [r4, #1]
		++sp;
    160e:	3001      	adds	r0, #1
		break;
    1610:	e7cc      	b.n	15ac <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    1612:	7863      	ldrb	r3, [r4, #1]
    1614:	2208      	movs	r2, #8
    1616:	f362 03c6 	bfi	r3, r2, #3, #4
    161a:	7063      	strb	r3, [r4, #1]
		++sp;
    161c:	3001      	adds	r0, #1
		conv->unsupported = true;
    161e:	7823      	ldrb	r3, [r4, #0]
    1620:	f043 0302 	orr.w	r3, r3, #2
    1624:	7023      	strb	r3, [r4, #0]
		break;
    1626:	e7c1      	b.n	15ac <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    1628:	7863      	ldrb	r3, [r4, #1]
    162a:	f36f 03c6 	bfc	r3, #3, #4
    162e:	7063      	strb	r3, [r4, #1]
		break;
    1630:	e7bc      	b.n	15ac <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    1632:	78a2      	ldrb	r2, [r4, #2]
    1634:	2101      	movs	r1, #1
    1636:	f361 0202 	bfi	r2, r1, #0, #3
    163a:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    163c:	7862      	ldrb	r2, [r4, #1]
    163e:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1642:	2a40      	cmp	r2, #64	; 0x40
    1644:	d010      	beq.n	1668 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    1646:	2b63      	cmp	r3, #99	; 0x63
    1648:	d013      	beq.n	1672 <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    164a:	7823      	ldrb	r3, [r4, #0]
    164c:	f3c3 0240 	ubfx	r2, r3, #1, #1
    1650:	4315      	orrs	r5, r2
    1652:	f365 0341 	bfi	r3, r5, #1, #1
    1656:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    1658:	b002      	add	sp, #8
    165a:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    165c:	78a2      	ldrb	r2, [r4, #2]
    165e:	2102      	movs	r1, #2
    1660:	f361 0202 	bfi	r2, r1, #0, #3
    1664:	70a2      	strb	r2, [r4, #2]
    1666:	e7e9      	b.n	163c <extract_conversion+0x290>
			conv->invalid = true;
    1668:	7821      	ldrb	r1, [r4, #0]
    166a:	f041 0101 	orr.w	r1, r1, #1
    166e:	7021      	strb	r1, [r4, #0]
    1670:	e7e9      	b.n	1646 <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1672:	1e15      	subs	r5, r2, #0
    1674:	bf18      	it	ne
    1676:	2501      	movne	r5, #1
    1678:	e7e7      	b.n	164a <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    167a:	78a3      	ldrb	r3, [r4, #2]
    167c:	2204      	movs	r2, #4
    167e:	f362 0302 	bfi	r3, r2, #0, #3
    1682:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    1684:	2501      	movs	r5, #1
			break;
    1686:	e7e0      	b.n	164a <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    1688:	78a3      	ldrb	r3, [r4, #2]
    168a:	2203      	movs	r2, #3
    168c:	f362 0302 	bfi	r3, r2, #0, #3
    1690:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    1692:	7863      	ldrb	r3, [r4, #1]
    1694:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1698:	2b40      	cmp	r3, #64	; 0x40
    169a:	d1d6      	bne.n	164a <extract_conversion+0x29e>
			unsupported = true;
    169c:	2501      	movs	r5, #1
    169e:	e7d4      	b.n	164a <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    16a0:	78a3      	ldrb	r3, [r4, #2]
    16a2:	2203      	movs	r2, #3
    16a4:	f362 0302 	bfi	r3, r2, #0, #3
    16a8:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    16aa:	7863      	ldrb	r3, [r4, #1]
    16ac:	f013 0f78 	tst.w	r3, #120	; 0x78
    16b0:	d0cb      	beq.n	164a <extract_conversion+0x29e>
			unsupported = true;
    16b2:	2501      	movs	r5, #1
    16b4:	e7c9      	b.n	164a <extract_conversion+0x29e>
		conv->invalid = true;
    16b6:	7823      	ldrb	r3, [r4, #0]
    16b8:	f043 0301 	orr.w	r3, r3, #1
    16bc:	7023      	strb	r3, [r4, #0]
		break;
    16be:	e7c4      	b.n	164a <extract_conversion+0x29e>

000016c0 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    16c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16c4:	b083      	sub	sp, #12
    16c6:	4604      	mov	r4, r0
    16c8:	460d      	mov	r5, r1
    16ca:	9201      	str	r2, [sp, #4]
    16cc:	469a      	mov	sl, r3
    16ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    16d0:	78d3      	ldrb	r3, [r2, #3]
    16d2:	4a32      	ldr	r2, [pc, #200]	; (179c <encode_uint+0xdc>)
    16d4:	f813 b002 	ldrb.w	fp, [r3, r2]
    16d8:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    16dc:	2b6f      	cmp	r3, #111	; 0x6f
    16de:	d00f      	beq.n	1700 <encode_uint+0x40>
    16e0:	d906      	bls.n	16f0 <encode_uint+0x30>
    16e2:	2b70      	cmp	r3, #112	; 0x70
    16e4:	d00f      	beq.n	1706 <encode_uint+0x46>
    16e6:	2b78      	cmp	r3, #120	; 0x78
    16e8:	d110      	bne.n	170c <encode_uint+0x4c>
		return 16;
    16ea:	f04f 0910 	mov.w	r9, #16
    16ee:	e023      	b.n	1738 <encode_uint+0x78>
	switch (specifier) {
    16f0:	2b58      	cmp	r3, #88	; 0x58
    16f2:	d002      	beq.n	16fa <encode_uint+0x3a>
    16f4:	f04f 090a 	mov.w	r9, #10
    16f8:	e01e      	b.n	1738 <encode_uint+0x78>
		return 16;
    16fa:	f04f 0910 	mov.w	r9, #16
    16fe:	e01b      	b.n	1738 <encode_uint+0x78>
		return 8;
    1700:	f04f 0908 	mov.w	r9, #8
    1704:	e018      	b.n	1738 <encode_uint+0x78>
		return 16;
    1706:	f04f 0910 	mov.w	r9, #16
    170a:	e015      	b.n	1738 <encode_uint+0x78>
	switch (specifier) {
    170c:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    1710:	e012      	b.n	1738 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    1712:	b2d2      	uxtb	r2, r2
    1714:	3230      	adds	r2, #48	; 0x30
    1716:	b2d2      	uxtb	r2, r2
    1718:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    171c:	463a      	mov	r2, r7
    171e:	4643      	mov	r3, r8
    1720:	4620      	mov	r0, r4
    1722:	4629      	mov	r1, r5
    1724:	f7fe fcec 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    1728:	42bc      	cmp	r4, r7
    172a:	f175 0300 	sbcs.w	r3, r5, #0
    172e:	d319      	bcc.n	1764 <encode_uint+0xa4>
    1730:	4556      	cmp	r6, sl
    1732:	d917      	bls.n	1764 <encode_uint+0xa4>
		value /= radix;
    1734:	4604      	mov	r4, r0
    1736:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    1738:	f04f 0800 	mov.w	r8, #0
    173c:	464f      	mov	r7, r9
    173e:	464a      	mov	r2, r9
    1740:	4643      	mov	r3, r8
    1742:	4620      	mov	r0, r4
    1744:	4629      	mov	r1, r5
    1746:	f7fe fcdb 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    174a:	2a09      	cmp	r2, #9
    174c:	d9e1      	bls.n	1712 <encode_uint+0x52>
    174e:	f1bb 0f01 	cmp.w	fp, #1
    1752:	d003      	beq.n	175c <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    1754:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    1756:	3257      	adds	r2, #87	; 0x57
    1758:	b2d2      	uxtb	r2, r2
    175a:	e7dd      	b.n	1718 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    175c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    175e:	3237      	adds	r2, #55	; 0x37
    1760:	b2d2      	uxtb	r2, r2
    1762:	e7d9      	b.n	1718 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    1764:	9b01      	ldr	r3, [sp, #4]
    1766:	781b      	ldrb	r3, [r3, #0]
    1768:	f013 0f20 	tst.w	r3, #32
    176c:	d005      	beq.n	177a <encode_uint+0xba>
		if (radix == 8) {
    176e:	f1b9 0f08 	cmp.w	r9, #8
    1772:	d006      	beq.n	1782 <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    1774:	f1b9 0f10 	cmp.w	r9, #16
    1778:	d009      	beq.n	178e <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    177a:	4630      	mov	r0, r6
    177c:	b003      	add	sp, #12
    177e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    1782:	9a01      	ldr	r2, [sp, #4]
    1784:	7893      	ldrb	r3, [r2, #2]
    1786:	f043 0308 	orr.w	r3, r3, #8
    178a:	7093      	strb	r3, [r2, #2]
    178c:	e7f5      	b.n	177a <encode_uint+0xba>
			conv->altform_0c = true;
    178e:	9a01      	ldr	r2, [sp, #4]
    1790:	7893      	ldrb	r3, [r2, #2]
    1792:	f043 0310 	orr.w	r3, r3, #16
    1796:	7093      	strb	r3, [r2, #2]
    1798:	e7ef      	b.n	177a <encode_uint+0xba>
    179a:	bf00      	nop
    179c:	0000e039 	.word	0x0000e039

000017a0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    17a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17a4:	b091      	sub	sp, #68	; 0x44
    17a6:	4606      	mov	r6, r0
    17a8:	460d      	mov	r5, r1
    17aa:	4691      	mov	r9, r2
    17ac:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    17ae:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    17b0:	f899 0000 	ldrb.w	r0, [r9]
    17b4:	2800      	cmp	r0, #0
    17b6:	f000 82d5 	beq.w	1d64 <cbvprintf+0x5c4>
		if (*fp != '%') {
    17ba:	2825      	cmp	r0, #37	; 0x25
    17bc:	d008      	beq.n	17d0 <cbvprintf+0x30>
			OUTC(*fp++);
    17be:	f109 0901 	add.w	r9, r9, #1
    17c2:	4629      	mov	r1, r5
    17c4:	47b0      	blx	r6
    17c6:	2800      	cmp	r0, #0
    17c8:	f2c0 82cd 	blt.w	1d66 <cbvprintf+0x5c6>
    17cc:	3401      	adds	r4, #1
			continue;
    17ce:	e7ef      	b.n	17b0 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    17d0:	2300      	movs	r3, #0
    17d2:	9304      	str	r3, [sp, #16]
    17d4:	9305      	str	r3, [sp, #20]
    17d6:	9306      	str	r3, [sp, #24]
    17d8:	9307      	str	r3, [sp, #28]
    17da:	9308      	str	r3, [sp, #32]
    17dc:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    17de:	4649      	mov	r1, r9
    17e0:	a806      	add	r0, sp, #24
    17e2:	f7ff fde3 	bl	13ac <extract_conversion>
    17e6:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    17e8:	f89d 3019 	ldrb.w	r3, [sp, #25]
    17ec:	f013 0f01 	tst.w	r3, #1
    17f0:	f000 8097 	beq.w	1922 <cbvprintf+0x182>
			width = va_arg(ap, int);
    17f4:	9b03      	ldr	r3, [sp, #12]
    17f6:	1d1a      	adds	r2, r3, #4
    17f8:	9203      	str	r2, [sp, #12]
    17fa:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    17fc:	2f00      	cmp	r7, #0
    17fe:	f2c0 8088 	blt.w	1912 <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    1802:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1806:	f013 0f04 	tst.w	r3, #4
    180a:	f000 809c 	beq.w	1946 <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    180e:	9b03      	ldr	r3, [sp, #12]
    1810:	1d1a      	adds	r2, r3, #4
    1812:	9203      	str	r2, [sp, #12]
    1814:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    1818:	f1ba 0f00 	cmp.w	sl, #0
    181c:	f2c0 808a 	blt.w	1934 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    1820:	2300      	movs	r3, #0
    1822:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    1824:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    1826:	f89d 301a 	ldrb.w	r3, [sp, #26]
    182a:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    182e:	f89d 1019 	ldrb.w	r1, [sp, #25]
    1832:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    1836:	2b01      	cmp	r3, #1
    1838:	f000 808e 	beq.w	1958 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    183c:	2b02      	cmp	r3, #2
    183e:	f000 80d3 	beq.w	19e8 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    1842:	2b04      	cmp	r3, #4
    1844:	f000 8124 	beq.w	1a90 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    1848:	2b03      	cmp	r3, #3
    184a:	f000 813b 	beq.w	1ac4 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    184e:	f89d 8018 	ldrb.w	r8, [sp, #24]
    1852:	f018 0b03 	ands.w	fp, r8, #3
    1856:	f040 813b 	bne.w	1ad0 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    185a:	f89d 301b 	ldrb.w	r3, [sp, #27]
    185e:	3b25      	subs	r3, #37	; 0x25
    1860:	2b53      	cmp	r3, #83	; 0x53
    1862:	f200 81e6 	bhi.w	1c32 <cbvprintf+0x492>
    1866:	e8df f013 	tbh	[pc, r3, lsl #1]
    186a:	0140      	.short	0x0140
    186c:	01e401e4 	.word	0x01e401e4
    1870:	01e401e4 	.word	0x01e401e4
    1874:	01e401e4 	.word	0x01e401e4
    1878:	01e401e4 	.word	0x01e401e4
    187c:	01e401e4 	.word	0x01e401e4
    1880:	01e401e4 	.word	0x01e401e4
    1884:	01e401e4 	.word	0x01e401e4
    1888:	01e401e4 	.word	0x01e401e4
    188c:	01e401e4 	.word	0x01e401e4
    1890:	01e401e4 	.word	0x01e401e4
    1894:	01e401e4 	.word	0x01e401e4
    1898:	01e401e4 	.word	0x01e401e4
    189c:	01e401e4 	.word	0x01e401e4
    18a0:	01e401e4 	.word	0x01e401e4
    18a4:	01e401e4 	.word	0x01e401e4
    18a8:	01e401e4 	.word	0x01e401e4
    18ac:	01e401e4 	.word	0x01e401e4
    18b0:	01e401e4 	.word	0x01e401e4
    18b4:	01e401e4 	.word	0x01e401e4
    18b8:	01e401e4 	.word	0x01e401e4
    18bc:	01e401e4 	.word	0x01e401e4
    18c0:	01e401e4 	.word	0x01e401e4
    18c4:	01e401e4 	.word	0x01e401e4
    18c8:	01e401e4 	.word	0x01e401e4
    18cc:	01e401e4 	.word	0x01e401e4
    18d0:	01e40181 	.word	0x01e40181
    18d4:	01e401e4 	.word	0x01e401e4
    18d8:	01e401e4 	.word	0x01e401e4
    18dc:	01e401e4 	.word	0x01e401e4
    18e0:	01e401e4 	.word	0x01e401e4
    18e4:	015e01e4 	.word	0x015e01e4
    18e8:	01e40167 	.word	0x01e40167
    18ec:	01e401e4 	.word	0x01e401e4
    18f0:	016701e4 	.word	0x016701e4
    18f4:	01e401e4 	.word	0x01e401e4
    18f8:	01e401e4 	.word	0x01e401e4
    18fc:	018101be 	.word	0x018101be
    1900:	01e401a2 	.word	0x01e401a2
    1904:	014d01e4 	.word	0x014d01e4
    1908:	018101e4 	.word	0x018101e4
    190c:	01e401e4 	.word	0x01e401e4
    1910:	0181      	.short	0x0181
				conv->flag_dash = true;
    1912:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1916:	f043 0304 	orr.w	r3, r3, #4
    191a:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    191e:	427f      	negs	r7, r7
    1920:	e76f      	b.n	1802 <cbvprintf+0x62>
		} else if (conv->width_present) {
    1922:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    1926:	2b00      	cmp	r3, #0
    1928:	db02      	blt.n	1930 <cbvprintf+0x190>
		int width = -1;
    192a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    192e:	e768      	b.n	1802 <cbvprintf+0x62>
			width = conv->width_value;
    1930:	9f07      	ldr	r7, [sp, #28]
    1932:	e766      	b.n	1802 <cbvprintf+0x62>
				conv->prec_present = false;
    1934:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1938:	f36f 0341 	bfc	r3, #1, #1
    193c:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    1940:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    1944:	e76c      	b.n	1820 <cbvprintf+0x80>
		} else if (conv->prec_present) {
    1946:	f013 0f02 	tst.w	r3, #2
    194a:	d002      	beq.n	1952 <cbvprintf+0x1b2>
			precision = conv->prec_value;
    194c:	f8dd a020 	ldr.w	sl, [sp, #32]
    1950:	e766      	b.n	1820 <cbvprintf+0x80>
		int precision = -1;
    1952:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    1956:	e763      	b.n	1820 <cbvprintf+0x80>
			switch (length_mod) {
    1958:	1ecb      	subs	r3, r1, #3
    195a:	2b04      	cmp	r3, #4
    195c:	d804      	bhi.n	1968 <cbvprintf+0x1c8>
    195e:	e8df f003 	tbb	[pc, r3]
    1962:	1d0b      	.short	0x1d0b
    1964:	3529      	.short	0x3529
    1966:	35          	.byte	0x35
    1967:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1968:	9b03      	ldr	r3, [sp, #12]
    196a:	1d1a      	adds	r2, r3, #4
    196c:	9203      	str	r2, [sp, #12]
    196e:	681b      	ldr	r3, [r3, #0]
    1970:	17da      	asrs	r2, r3, #31
    1972:	9304      	str	r3, [sp, #16]
    1974:	9205      	str	r2, [sp, #20]
				break;
    1976:	e006      	b.n	1986 <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    1978:	9b03      	ldr	r3, [sp, #12]
    197a:	1d1a      	adds	r2, r3, #4
    197c:	9203      	str	r2, [sp, #12]
    197e:	681b      	ldr	r3, [r3, #0]
    1980:	17da      	asrs	r2, r3, #31
    1982:	9304      	str	r3, [sp, #16]
    1984:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    1986:	2901      	cmp	r1, #1
    1988:	d028      	beq.n	19dc <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    198a:	2902      	cmp	r1, #2
    198c:	f47f af5f 	bne.w	184e <cbvprintf+0xae>
				value->sint = (short)value->sint;
    1990:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    1994:	17da      	asrs	r2, r3, #31
    1996:	9304      	str	r3, [sp, #16]
    1998:	9205      	str	r2, [sp, #20]
    199a:	e758      	b.n	184e <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    199c:	9b03      	ldr	r3, [sp, #12]
    199e:	3307      	adds	r3, #7
    19a0:	f023 0307 	bic.w	r3, r3, #7
    19a4:	f103 0208 	add.w	r2, r3, #8
    19a8:	9203      	str	r2, [sp, #12]
    19aa:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    19ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    19b2:	e7e8      	b.n	1986 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    19b4:	9b03      	ldr	r3, [sp, #12]
    19b6:	3307      	adds	r3, #7
    19b8:	f023 0307 	bic.w	r3, r3, #7
    19bc:	f103 0208 	add.w	r2, r3, #8
    19c0:	9203      	str	r2, [sp, #12]
    19c2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    19c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    19ca:	e7dc      	b.n	1986 <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    19cc:	9b03      	ldr	r3, [sp, #12]
    19ce:	1d1a      	adds	r2, r3, #4
    19d0:	9203      	str	r2, [sp, #12]
    19d2:	681b      	ldr	r3, [r3, #0]
    19d4:	17da      	asrs	r2, r3, #31
				value->sint =
    19d6:	9304      	str	r3, [sp, #16]
    19d8:	9205      	str	r2, [sp, #20]
				break;
    19da:	e7d4      	b.n	1986 <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    19dc:	f89d 3010 	ldrb.w	r3, [sp, #16]
    19e0:	9304      	str	r3, [sp, #16]
    19e2:	2300      	movs	r3, #0
    19e4:	9305      	str	r3, [sp, #20]
    19e6:	e732      	b.n	184e <cbvprintf+0xae>
			switch (length_mod) {
    19e8:	1ecb      	subs	r3, r1, #3
    19ea:	2b04      	cmp	r3, #4
    19ec:	d804      	bhi.n	19f8 <cbvprintf+0x258>
    19ee:	e8df f003 	tbb	[pc, r3]
    19f2:	1f0b      	.short	0x1f0b
    19f4:	4135      	.short	0x4135
    19f6:	41          	.byte	0x41
    19f7:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    19f8:	9b03      	ldr	r3, [sp, #12]
    19fa:	1d1a      	adds	r2, r3, #4
    19fc:	9203      	str	r2, [sp, #12]
    19fe:	681b      	ldr	r3, [r3, #0]
    1a00:	9304      	str	r3, [sp, #16]
    1a02:	2300      	movs	r3, #0
    1a04:	9305      	str	r3, [sp, #20]
				break;
    1a06:	e01e      	b.n	1a46 <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    1a08:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    1a0c:	2b63      	cmp	r3, #99	; 0x63
    1a0e:	d007      	beq.n	1a20 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    1a10:	9b03      	ldr	r3, [sp, #12]
    1a12:	1d1a      	adds	r2, r3, #4
    1a14:	9203      	str	r2, [sp, #12]
    1a16:	681b      	ldr	r3, [r3, #0]
    1a18:	9304      	str	r3, [sp, #16]
    1a1a:	2300      	movs	r3, #0
    1a1c:	9305      	str	r3, [sp, #20]
    1a1e:	e012      	b.n	1a46 <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    1a20:	9b03      	ldr	r3, [sp, #12]
    1a22:	1d1a      	adds	r2, r3, #4
    1a24:	9203      	str	r2, [sp, #12]
    1a26:	681b      	ldr	r3, [r3, #0]
    1a28:	9304      	str	r3, [sp, #16]
    1a2a:	2300      	movs	r3, #0
    1a2c:	9305      	str	r3, [sp, #20]
    1a2e:	e00a      	b.n	1a46 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    1a30:	9b03      	ldr	r3, [sp, #12]
    1a32:	3307      	adds	r3, #7
    1a34:	f023 0307 	bic.w	r3, r3, #7
    1a38:	f103 0208 	add.w	r2, r3, #8
    1a3c:	9203      	str	r2, [sp, #12]
    1a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    1a42:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    1a46:	2901      	cmp	r1, #1
    1a48:	d01c      	beq.n	1a84 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    1a4a:	2902      	cmp	r1, #2
    1a4c:	f47f aeff 	bne.w	184e <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    1a50:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    1a54:	9304      	str	r3, [sp, #16]
    1a56:	2300      	movs	r3, #0
    1a58:	9305      	str	r3, [sp, #20]
    1a5a:	e6f8      	b.n	184e <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    1a5c:	9b03      	ldr	r3, [sp, #12]
    1a5e:	3307      	adds	r3, #7
    1a60:	f023 0307 	bic.w	r3, r3, #7
    1a64:	f103 0208 	add.w	r2, r3, #8
    1a68:	9203      	str	r2, [sp, #12]
    1a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    1a6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    1a72:	e7e8      	b.n	1a46 <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    1a74:	9b03      	ldr	r3, [sp, #12]
    1a76:	1d1a      	adds	r2, r3, #4
    1a78:	9203      	str	r2, [sp, #12]
    1a7a:	681b      	ldr	r3, [r3, #0]
				value->uint =
    1a7c:	9304      	str	r3, [sp, #16]
    1a7e:	2300      	movs	r3, #0
    1a80:	9305      	str	r3, [sp, #20]
				break;
    1a82:	e7e0      	b.n	1a46 <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    1a84:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1a88:	9304      	str	r3, [sp, #16]
    1a8a:	2300      	movs	r3, #0
    1a8c:	9305      	str	r3, [sp, #20]
    1a8e:	e6de      	b.n	184e <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    1a90:	2908      	cmp	r1, #8
    1a92:	d00b      	beq.n	1aac <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    1a94:	9b03      	ldr	r3, [sp, #12]
    1a96:	3307      	adds	r3, #7
    1a98:	f023 0307 	bic.w	r3, r3, #7
    1a9c:	f103 0208 	add.w	r2, r3, #8
    1aa0:	9203      	str	r2, [sp, #12]
    1aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1aa6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1aaa:	e6d0      	b.n	184e <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    1aac:	9b03      	ldr	r3, [sp, #12]
    1aae:	3307      	adds	r3, #7
    1ab0:	f023 0307 	bic.w	r3, r3, #7
    1ab4:	f103 0208 	add.w	r2, r3, #8
    1ab8:	9203      	str	r2, [sp, #12]
    1aba:	e9d3 2300 	ldrd	r2, r3, [r3]
    1abe:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1ac2:	e6c4      	b.n	184e <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    1ac4:	9b03      	ldr	r3, [sp, #12]
    1ac6:	1d1a      	adds	r2, r3, #4
    1ac8:	9203      	str	r2, [sp, #12]
    1aca:	681b      	ldr	r3, [r3, #0]
    1acc:	9304      	str	r3, [sp, #16]
    1ace:	e6be      	b.n	184e <cbvprintf+0xae>
			OUTS(sp, fp);
    1ad0:	9f02      	ldr	r7, [sp, #8]
    1ad2:	463b      	mov	r3, r7
    1ad4:	464a      	mov	r2, r9
    1ad6:	4629      	mov	r1, r5
    1ad8:	4630      	mov	r0, r6
    1ada:	f008 ff04 	bl	a8e6 <outs>
    1ade:	2800      	cmp	r0, #0
    1ae0:	f2c0 8141 	blt.w	1d66 <cbvprintf+0x5c6>
    1ae4:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    1ae6:	46b9      	mov	r9, r7
			continue;
    1ae8:	e662      	b.n	17b0 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    1aea:	4629      	mov	r1, r5
    1aec:	2025      	movs	r0, #37	; 0x25
    1aee:	47b0      	blx	r6
    1af0:	2800      	cmp	r0, #0
    1af2:	f2c0 8138 	blt.w	1d66 <cbvprintf+0x5c6>
    1af6:	3401      	adds	r4, #1
		char sign = 0;
    1af8:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    1afa:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1afe:	f04f 0900 	mov.w	r9, #0
			break;
    1b02:	e09b      	b.n	1c3c <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    1b04:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    1b08:	f1ba 0f00 	cmp.w	sl, #0
    1b0c:	db07      	blt.n	1b1e <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    1b0e:	4651      	mov	r1, sl
    1b10:	4648      	mov	r0, r9
    1b12:	f00a f970 	bl	bdf6 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    1b16:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    1b1a:	46d8      	mov	r8, fp
			precision = -1;

			break;
    1b1c:	e08e      	b.n	1c3c <cbvprintf+0x49c>
				len = strlen(bps);
    1b1e:	4648      	mov	r0, r9
    1b20:	f7fe fc5b 	bl	3da <strlen>
    1b24:	e7f7      	b.n	1b16 <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1b26:	9b04      	ldr	r3, [sp, #16]
    1b28:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    1b2c:	46d8      	mov	r8, fp
			bpe = buf + 1;
    1b2e:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    1b32:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    1b36:	e081      	b.n	1c3c <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    1b38:	f018 0f08 	tst.w	r8, #8
    1b3c:	d105      	bne.n	1b4a <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    1b3e:	f018 0810 	ands.w	r8, r8, #16
    1b42:	d004      	beq.n	1b4e <cbvprintf+0x3ae>
				sign = ' ';
    1b44:	f04f 0820 	mov.w	r8, #32
    1b48:	e001      	b.n	1b4e <cbvprintf+0x3ae>
				sign = '+';
    1b4a:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    1b4e:	9a04      	ldr	r2, [sp, #16]
    1b50:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    1b52:	2b00      	cmp	r3, #0
    1b54:	db02      	blt.n	1b5c <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    1b56:	9204      	str	r2, [sp, #16]
    1b58:	9305      	str	r3, [sp, #20]
    1b5a:	e008      	b.n	1b6e <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    1b5c:	4252      	negs	r2, r2
    1b5e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1b62:	9204      	str	r2, [sp, #16]
    1b64:	9305      	str	r3, [sp, #20]
				sign = '-';
    1b66:	f04f 082d 	mov.w	r8, #45	; 0x2d
    1b6a:	e000      	b.n	1b6e <cbvprintf+0x3ce>
		switch (conv->specifier) {
    1b6c:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    1b6e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1b72:	9300      	str	r3, [sp, #0]
    1b74:	ab0a      	add	r3, sp, #40	; 0x28
    1b76:	aa06      	add	r2, sp, #24
    1b78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1b7c:	f7ff fda0 	bl	16c0 <encode_uint>
    1b80:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    1b82:	f1ba 0f00 	cmp.w	sl, #0
    1b86:	f2c0 8088 	blt.w	1c9a <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    1b8a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1b8e:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    1b92:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1b96:	f36f 1286 	bfc	r2, #6, #1
    1b9a:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    1b9e:	459a      	cmp	sl, r3
    1ba0:	d97e      	bls.n	1ca0 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    1ba2:	ebaa 0303 	sub.w	r3, sl, r3
    1ba6:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    1ba8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1bac:	e046      	b.n	1c3c <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    1bae:	9804      	ldr	r0, [sp, #16]
    1bb0:	b928      	cbnz	r0, 1bbe <cbvprintf+0x41e>
		char sign = 0;
    1bb2:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    1bb4:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 1d6c <cbvprintf+0x5cc>
			bps = "(nil)";
    1bb8:	f1aa 0905 	sub.w	r9, sl, #5
    1bbc:	e03e      	b.n	1c3c <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1bbe:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1bc2:	9300      	str	r3, [sp, #0]
    1bc4:	ab0a      	add	r3, sp, #40	; 0x28
    1bc6:	aa06      	add	r2, sp, #24
    1bc8:	2100      	movs	r1, #0
    1bca:	f7ff fd79 	bl	16c0 <encode_uint>
    1bce:	4681      	mov	r9, r0
				conv->altform_0c = true;
    1bd0:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1bd4:	f043 0310 	orr.w	r3, r3, #16
    1bd8:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    1bdc:	2378      	movs	r3, #120	; 0x78
    1bde:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    1be2:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    1be4:	e7cd      	b.n	1b82 <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    1be6:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    1be8:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1bec:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    1bf0:	2b07      	cmp	r3, #7
    1bf2:	d806      	bhi.n	1c02 <cbvprintf+0x462>
    1bf4:	e8df f003 	tbb	[pc, r3]
    1bf8:	0f0d0b04 	.word	0x0f0d0b04
    1bfc:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    1c00:	6014      	str	r4, [r2, #0]
		char sign = 0;
    1c02:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    1c04:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1c08:	f04f 0900 	mov.w	r9, #0
}
    1c0c:	e016      	b.n	1c3c <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    1c0e:	7014      	strb	r4, [r2, #0]
		break;
    1c10:	e7f7      	b.n	1c02 <cbvprintf+0x462>
		*(short *)dp = (short)count;
    1c12:	8014      	strh	r4, [r2, #0]
		break;
    1c14:	e7f5      	b.n	1c02 <cbvprintf+0x462>
		*(long *)dp = (long)count;
    1c16:	6014      	str	r4, [r2, #0]
		break;
    1c18:	e7f3      	b.n	1c02 <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    1c1a:	17e3      	asrs	r3, r4, #31
    1c1c:	6014      	str	r4, [r2, #0]
    1c1e:	6053      	str	r3, [r2, #4]
		break;
    1c20:	e7ef      	b.n	1c02 <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    1c22:	17e3      	asrs	r3, r4, #31
    1c24:	6014      	str	r4, [r2, #0]
    1c26:	6053      	str	r3, [r2, #4]
		break;
    1c28:	e7eb      	b.n	1c02 <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    1c2a:	6014      	str	r4, [r2, #0]
		break;
    1c2c:	e7e9      	b.n	1c02 <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1c2e:	6014      	str	r4, [r2, #0]
		break;
    1c30:	e7e7      	b.n	1c02 <cbvprintf+0x462>
		switch (conv->specifier) {
    1c32:	46d8      	mov	r8, fp
    1c34:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1c38:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    1c3c:	f1b9 0f00 	cmp.w	r9, #0
    1c40:	f000 808d 	beq.w	1d5e <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    1c44:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    1c48:	f1b8 0f00 	cmp.w	r8, #0
    1c4c:	d000      	beq.n	1c50 <cbvprintf+0x4b0>
			nj_len += 1U;
    1c4e:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    1c50:	f89d 101a 	ldrb.w	r1, [sp, #26]
    1c54:	f011 0f10 	tst.w	r1, #16
    1c58:	d025      	beq.n	1ca6 <cbvprintf+0x506>
			nj_len += 2U;
    1c5a:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    1c5c:	9b07      	ldr	r3, [sp, #28]
    1c5e:	4413      	add	r3, r2
		if (conv->pad_fp) {
    1c60:	f011 0f40 	tst.w	r1, #64	; 0x40
    1c64:	d001      	beq.n	1c6a <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    1c66:	9a08      	ldr	r2, [sp, #32]
    1c68:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    1c6a:	2f00      	cmp	r7, #0
    1c6c:	dd31      	ble.n	1cd2 <cbvprintf+0x532>
			width -= (int)nj_len;
    1c6e:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    1c70:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1c74:	f013 0f04 	tst.w	r3, #4
    1c78:	d12b      	bne.n	1cd2 <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    1c7a:	f013 0f40 	tst.w	r3, #64	; 0x40
    1c7e:	d017      	beq.n	1cb0 <cbvprintf+0x510>
					if (sign != 0) {
    1c80:	f1b8 0f00 	cmp.w	r8, #0
    1c84:	d017      	beq.n	1cb6 <cbvprintf+0x516>
						OUTC(sign);
    1c86:	4629      	mov	r1, r5
    1c88:	4640      	mov	r0, r8
    1c8a:	47b0      	blx	r6
    1c8c:	2800      	cmp	r0, #0
    1c8e:	db6a      	blt.n	1d66 <cbvprintf+0x5c6>
    1c90:	3401      	adds	r4, #1
						sign = 0;
    1c92:	46d8      	mov	r8, fp
					}
					pad = '0';
    1c94:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1c98:	e00f      	b.n	1cba <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    1c9a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1c9e:	e7cd      	b.n	1c3c <cbvprintf+0x49c>
    1ca0:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1ca4:	e7ca      	b.n	1c3c <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    1ca6:	f011 0f08 	tst.w	r1, #8
    1caa:	d0d7      	beq.n	1c5c <cbvprintf+0x4bc>
			nj_len += 1U;
    1cac:	3201      	adds	r2, #1
    1cae:	e7d5      	b.n	1c5c <cbvprintf+0x4bc>
				char pad = ' ';
    1cb0:	f04f 0b20 	mov.w	fp, #32
    1cb4:	e001      	b.n	1cba <cbvprintf+0x51a>
					pad = '0';
    1cb6:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1cba:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    1cbc:	1e5f      	subs	r7, r3, #1
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	dd07      	ble.n	1cd2 <cbvprintf+0x532>
					OUTC(pad);
    1cc2:	4629      	mov	r1, r5
    1cc4:	4658      	mov	r0, fp
    1cc6:	47b0      	blx	r6
    1cc8:	2800      	cmp	r0, #0
    1cca:	db4c      	blt.n	1d66 <cbvprintf+0x5c6>
    1ccc:	3401      	adds	r4, #1
				while (width-- > 0) {
    1cce:	463b      	mov	r3, r7
    1cd0:	e7f4      	b.n	1cbc <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1cd2:	f1b8 0f00 	cmp.w	r8, #0
    1cd6:	d005      	beq.n	1ce4 <cbvprintf+0x544>
			OUTC(sign);
    1cd8:	4629      	mov	r1, r5
    1cda:	4640      	mov	r0, r8
    1cdc:	47b0      	blx	r6
    1cde:	2800      	cmp	r0, #0
    1ce0:	db41      	blt.n	1d66 <cbvprintf+0x5c6>
    1ce2:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    1ce4:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1ce8:	f3c3 1200 	ubfx	r2, r3, #4, #1
    1cec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1cf0:	4313      	orrs	r3, r2
    1cf2:	d005      	beq.n	1d00 <cbvprintf+0x560>
				OUTC('0');
    1cf4:	4629      	mov	r1, r5
    1cf6:	2030      	movs	r0, #48	; 0x30
    1cf8:	47b0      	blx	r6
    1cfa:	2800      	cmp	r0, #0
    1cfc:	db33      	blt.n	1d66 <cbvprintf+0x5c6>
    1cfe:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    1d00:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1d04:	f013 0f10 	tst.w	r3, #16
    1d08:	d006      	beq.n	1d18 <cbvprintf+0x578>
				OUTC(conv->specifier);
    1d0a:	4629      	mov	r1, r5
    1d0c:	f89d 001b 	ldrb.w	r0, [sp, #27]
    1d10:	47b0      	blx	r6
    1d12:	2800      	cmp	r0, #0
    1d14:	db27      	blt.n	1d66 <cbvprintf+0x5c6>
    1d16:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    1d18:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    1d1a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    1d1e:	2b00      	cmp	r3, #0
    1d20:	dd07      	ble.n	1d32 <cbvprintf+0x592>
				OUTC('0');
    1d22:	4629      	mov	r1, r5
    1d24:	2030      	movs	r0, #48	; 0x30
    1d26:	47b0      	blx	r6
    1d28:	2800      	cmp	r0, #0
    1d2a:	db1c      	blt.n	1d66 <cbvprintf+0x5c6>
    1d2c:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    1d2e:	4643      	mov	r3, r8
    1d30:	e7f3      	b.n	1d1a <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    1d32:	4653      	mov	r3, sl
    1d34:	464a      	mov	r2, r9
    1d36:	4629      	mov	r1, r5
    1d38:	4630      	mov	r0, r6
    1d3a:	f008 fdd4 	bl	a8e6 <outs>
    1d3e:	2800      	cmp	r0, #0
    1d40:	db11      	blt.n	1d66 <cbvprintf+0x5c6>
    1d42:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    1d44:	2f00      	cmp	r7, #0
    1d46:	dd07      	ble.n	1d58 <cbvprintf+0x5b8>
			OUTC(' ');
    1d48:	4629      	mov	r1, r5
    1d4a:	2020      	movs	r0, #32
    1d4c:	47b0      	blx	r6
    1d4e:	2800      	cmp	r0, #0
    1d50:	db09      	blt.n	1d66 <cbvprintf+0x5c6>
    1d52:	3401      	adds	r4, #1
			--width;
    1d54:	3f01      	subs	r7, #1
    1d56:	e7f5      	b.n	1d44 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    1d58:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1d5c:	e528      	b.n	17b0 <cbvprintf+0x10>
    1d5e:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1d62:	e525      	b.n	17b0 <cbvprintf+0x10>
		}
	}

	return count;
    1d64:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    1d66:	b011      	add	sp, #68	; 0x44
    1d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d6c:	0000c671 	.word	0x0000c671

00001d70 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1d70:	b508      	push	{r3, lr}
	__asm__ volatile(
    1d72:	f04f 0220 	mov.w	r2, #32
    1d76:	f3ef 8311 	mrs	r3, BASEPRI
    1d7a:	f382 8812 	msr	BASEPRI_MAX, r2
    1d7e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1d82:	f001 ff8f 	bl	3ca4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1d86:	4803      	ldr	r0, [pc, #12]	; (1d94 <sys_reboot+0x24>)
    1d88:	f008 fcc5 	bl	a716 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1d8c:	f000 ffa8 	bl	2ce0 <arch_cpu_idle>
    1d90:	e7fc      	b.n	1d8c <sys_reboot+0x1c>
    1d92:	bf00      	nop
    1d94:	0000c674 	.word	0x0000c674

00001d98 <msg_process>:

static void msg_process(union log_msgs msg, bool bypass)
{
	struct log_backend const *backend;

	if (!bypass) {
    1d98:	2900      	cmp	r1, #0
    1d9a:	d150      	bne.n	1e3e <msg_process+0xa6>
{
    1d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1da0:	4607      	mov	r7, r0
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    1da2:	2400      	movs	r4, #0
    1da4:	e022      	b.n	1dec <msg_process+0x54>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
    1da6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1e40 <msg_process+0xa8>
    1daa:	f44f 7399 	mov.w	r3, #306	; 0x132
    1dae:	464a      	mov	r2, r9
    1db0:	4924      	ldr	r1, [pc, #144]	; (1e44 <msg_process+0xac>)
    1db2:	4825      	ldr	r0, [pc, #148]	; (1e48 <msg_process+0xb0>)
    1db4:	f008 fdb8 	bl	a928 <assert_print>
    1db8:	f44f 7199 	mov.w	r1, #306	; 0x132
    1dbc:	4648      	mov	r0, r9
    1dbe:	f008 fdac 	bl	a91a <assert_post_action>
    1dc2:	e01f      	b.n	1e04 <msg_process+0x6c>
	__ASSERT_NO_MSG(backend != NULL);
    1dc4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1e40 <msg_process+0xa8>
    1dc8:	2385      	movs	r3, #133	; 0x85
    1dca:	464a      	mov	r2, r9
    1dcc:	491d      	ldr	r1, [pc, #116]	; (1e44 <msg_process+0xac>)
    1dce:	481e      	ldr	r0, [pc, #120]	; (1e48 <msg_process+0xb0>)
    1dd0:	f008 fdaa 	bl	a928 <assert_print>
    1dd4:	2185      	movs	r1, #133	; 0x85
    1dd6:	4648      	mov	r0, r9
    1dd8:	f008 fd9f 	bl	a91a <assert_post_action>
    1ddc:	e01e      	b.n	1e1c <msg_process+0x84>
	backend->api->process(backend, msg);
    1dde:	f858 3005 	ldr.w	r3, [r8, r5]
    1de2:	681b      	ldr	r3, [r3, #0]
    1de4:	4639      	mov	r1, r7
    1de6:	4630      	mov	r0, r6
    1de8:	4798      	blx	r3
    1dea:	3401      	adds	r4, #1
    1dec:	4b17      	ldr	r3, [pc, #92]	; (1e4c <msg_process+0xb4>)
    1dee:	4a18      	ldr	r2, [pc, #96]	; (1e50 <msg_process+0xb8>)
    1df0:	1a9b      	subs	r3, r3, r2
    1df2:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1df6:	da20      	bge.n	1e3a <msg_process+0xa2>
	return &__log_backends_start[idx];
    1df8:	ea4f 1804 	mov.w	r8, r4, lsl #4
    1dfc:	4d14      	ldr	r5, [pc, #80]	; (1e50 <msg_process+0xb8>)
	__ASSERT_NO_MSG(backend != NULL);
    1dfe:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    1e02:	d0d0      	beq.n	1da6 <msg_process+0xe>
	return backend->cb->active;
    1e04:	6873      	ldr	r3, [r6, #4]
    1e06:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);
			if (log_backend_is_active(backend) &&
    1e08:	2b00      	cmp	r3, #0
    1e0a:	d0ee      	beq.n	1dea <msg_process+0x52>
			    msg_filter_check(backend, msg)) {
    1e0c:	4639      	mov	r1, r7
    1e0e:	4630      	mov	r0, r6
    1e10:	f008 fd9b 	bl	a94a <msg_filter_check>
			if (log_backend_is_active(backend) &&
    1e14:	2800      	cmp	r0, #0
    1e16:	d0e8      	beq.n	1dea <msg_process+0x52>
	__ASSERT_NO_MSG(backend != NULL);
    1e18:	2e00      	cmp	r6, #0
    1e1a:	d0d3      	beq.n	1dc4 <msg_process+0x2c>
	__ASSERT_NO_MSG(msg != NULL);
    1e1c:	2f00      	cmp	r7, #0
    1e1e:	d1de      	bne.n	1dde <msg_process+0x46>
    1e20:	f8df 901c 	ldr.w	r9, [pc, #28]	; 1e40 <msg_process+0xa8>
    1e24:	2386      	movs	r3, #134	; 0x86
    1e26:	464a      	mov	r2, r9
    1e28:	490a      	ldr	r1, [pc, #40]	; (1e54 <msg_process+0xbc>)
    1e2a:	4807      	ldr	r0, [pc, #28]	; (1e48 <msg_process+0xb0>)
    1e2c:	f008 fd7c 	bl	a928 <assert_print>
    1e30:	2186      	movs	r1, #134	; 0x86
    1e32:	4648      	mov	r0, r9
    1e34:	f008 fd71 	bl	a91a <assert_post_action>
    1e38:	e7d1      	b.n	1dde <msg_process+0x46>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    1e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1e3e:	4770      	bx	lr
    1e40:	0000c6a0 	.word	0x0000c6a0
    1e44:	0000c6d8 	.word	0x0000c6d8
    1e48:	0000c294 	.word	0x0000c294
    1e4c:	0000c0f4 	.word	0x0000c0f4
    1e50:	0000c0d4 	.word	0x0000c0d4
    1e54:	0000c6f0 	.word	0x0000c6f0

00001e58 <log_format_func_t_get>:
}
    1e58:	4b01      	ldr	r3, [pc, #4]	; (1e60 <log_format_func_t_get+0x8>)
    1e5a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1e5e:	4770      	bx	lr
    1e60:	0000c774 	.word	0x0000c774

00001e64 <log_init>:
{
    1e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
    1e66:	4b20      	ldr	r3, [pc, #128]	; (1ee8 <log_init+0x84>)
    1e68:	4a20      	ldr	r2, [pc, #128]	; (1eec <log_init+0x88>)
    1e6a:	1a9b      	subs	r3, r3, r2
    1e6c:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    1e6e:	2b90      	cmp	r3, #144	; 0x90
    1e70:	d80e      	bhi.n	1e90 <log_init+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1e72:	4b1f      	ldr	r3, [pc, #124]	; (1ef0 <log_init+0x8c>)
    1e74:	f3bf 8f5b 	dmb	ish
    1e78:	e853 2f00 	ldrex	r2, [r3]
    1e7c:	1c51      	adds	r1, r2, #1
    1e7e:	e843 1000 	strex	r0, r1, [r3]
    1e82:	2800      	cmp	r0, #0
    1e84:	d1f8      	bne.n	1e78 <log_init+0x14>
    1e86:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    1e8a:	bb5a      	cbnz	r2, 1ee4 <log_init+0x80>
	for (i = 0; i < log_backend_count_get(); i++) {
    1e8c:	2400      	movs	r4, #0
    1e8e:	e017      	b.n	1ec0 <log_init+0x5c>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    1e90:	4c18      	ldr	r4, [pc, #96]	; (1ef4 <log_init+0x90>)
    1e92:	f240 2373 	movw	r3, #627	; 0x273
    1e96:	4622      	mov	r2, r4
    1e98:	4917      	ldr	r1, [pc, #92]	; (1ef8 <log_init+0x94>)
    1e9a:	4818      	ldr	r0, [pc, #96]	; (1efc <log_init+0x98>)
    1e9c:	f008 fd44 	bl	a928 <assert_print>
    1ea0:	f240 2173 	movw	r1, #627	; 0x273
    1ea4:	4620      	mov	r0, r4
    1ea6:	f008 fd38 	bl	a91a <assert_post_action>
    1eaa:	e7e2      	b.n	1e72 <log_init+0xe>
					   backend->cb->ctx,
    1eac:	4b0f      	ldr	r3, [pc, #60]	; (1eec <log_init+0x88>)
    1eae:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    1eb2:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    1eb4:	2204      	movs	r2, #4
    1eb6:	6819      	ldr	r1, [r3, #0]
    1eb8:	4628      	mov	r0, r5
    1eba:	f000 f8d3 	bl	2064 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1ebe:	3401      	adds	r4, #1
    1ec0:	42b4      	cmp	r4, r6
    1ec2:	da0f      	bge.n	1ee4 <log_init+0x80>
		const struct log_backend *backend = log_backend_get(i);
    1ec4:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
    1ec6:	4d09      	ldr	r5, [pc, #36]	; (1eec <log_init+0x88>)
    1ec8:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    1ecc:	7b2b      	ldrb	r3, [r5, #12]
    1ece:	2b00      	cmp	r3, #0
    1ed0:	d0f5      	beq.n	1ebe <log_init+0x5a>
			if (backend->api->init != NULL) {
    1ed2:	0123      	lsls	r3, r4, #4
    1ed4:	4a05      	ldr	r2, [pc, #20]	; (1eec <log_init+0x88>)
    1ed6:	58d3      	ldr	r3, [r2, r3]
    1ed8:	699b      	ldr	r3, [r3, #24]
    1eda:	2b00      	cmp	r3, #0
    1edc:	d0e6      	beq.n	1eac <log_init+0x48>
				backend->api->init(backend);
    1ede:	4628      	mov	r0, r5
    1ee0:	4798      	blx	r3
    1ee2:	e7e3      	b.n	1eac <log_init+0x48>
}
    1ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ee6:	bf00      	nop
    1ee8:	0000c0f4 	.word	0x0000c0f4
    1eec:	0000c0d4 	.word	0x0000c0d4
    1ef0:	20004584 	.word	0x20004584
    1ef4:	0000c704 	.word	0x0000c704
    1ef8:	0000c74c 	.word	0x0000c74c
    1efc:	0000c294 	.word	0x0000c294

00001f00 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    1f00:	b138      	cbz	r0, 1f12 <log_set_timestamp_func+0x12>
{
    1f02:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    1f04:	4a04      	ldr	r2, [pc, #16]	; (1f18 <log_set_timestamp_func+0x18>)
    1f06:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    1f08:	4608      	mov	r0, r1
    1f0a:	f000 fac3 	bl	2494 <log_output_timestamp_freq_set>
	return 0;
    1f0e:	2000      	movs	r0, #0
}
    1f10:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1f12:	f06f 0015 	mvn.w	r0, #21
}
    1f16:	4770      	bx	lr
    1f18:	20004004 	.word	0x20004004

00001f1c <log_core_init>:
{
    1f1c:	b508      	push	{r3, lr}
	panic_mode = false;
    1f1e:	2300      	movs	r3, #0
    1f20:	4a04      	ldr	r2, [pc, #16]	; (1f34 <log_core_init+0x18>)
    1f22:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1f24:	4a04      	ldr	r2, [pc, #16]	; (1f38 <log_core_init+0x1c>)
    1f26:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    1f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1f2c:	4803      	ldr	r0, [pc, #12]	; (1f3c <log_core_init+0x20>)
    1f2e:	f7ff ffe7 	bl	1f00 <log_set_timestamp_func>
}
    1f32:	bd08      	pop	{r3, pc}
    1f34:	200052e5 	.word	0x200052e5
    1f38:	20004580 	.word	0x20004580
    1f3c:	0000a94f 	.word	0x0000a94f

00001f40 <z_impl_log_panic>:
	if (panic_mode) {
    1f40:	4b20      	ldr	r3, [pc, #128]	; (1fc4 <z_impl_log_panic+0x84>)
    1f42:	781b      	ldrb	r3, [r3, #0]
    1f44:	b103      	cbz	r3, 1f48 <z_impl_log_panic+0x8>
    1f46:	4770      	bx	lr
{
    1f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
    1f4c:	f7ff ff8a 	bl	1e64 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1f50:	2400      	movs	r4, #0
    1f52:	e013      	b.n	1f7c <z_impl_log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
    1f54:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1fc8 <z_impl_log_panic+0x88>
    1f58:	f44f 7399 	mov.w	r3, #306	; 0x132
    1f5c:	4642      	mov	r2, r8
    1f5e:	491b      	ldr	r1, [pc, #108]	; (1fcc <z_impl_log_panic+0x8c>)
    1f60:	481b      	ldr	r0, [pc, #108]	; (1fd0 <z_impl_log_panic+0x90>)
    1f62:	f008 fce1 	bl	a928 <assert_print>
    1f66:	f44f 7199 	mov.w	r1, #306	; 0x132
    1f6a:	4640      	mov	r0, r8
    1f6c:	f008 fcd5 	bl	a91a <assert_post_action>
    1f70:	e00f      	b.n	1f92 <z_impl_log_panic+0x52>
	backend->api->panic(backend);
    1f72:	597b      	ldr	r3, [r7, r5]
    1f74:	695b      	ldr	r3, [r3, #20]
    1f76:	4630      	mov	r0, r6
    1f78:	4798      	blx	r3
    1f7a:	3401      	adds	r4, #1
    1f7c:	4b15      	ldr	r3, [pc, #84]	; (1fd4 <z_impl_log_panic+0x94>)
    1f7e:	4a16      	ldr	r2, [pc, #88]	; (1fd8 <z_impl_log_panic+0x98>)
    1f80:	1a9b      	subs	r3, r3, r2
    1f82:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1f86:	da17      	bge.n	1fb8 <z_impl_log_panic+0x78>
	return &__log_backends_start[idx];
    1f88:	0127      	lsls	r7, r4, #4
    1f8a:	4d13      	ldr	r5, [pc, #76]	; (1fd8 <z_impl_log_panic+0x98>)
	__ASSERT_NO_MSG(backend != NULL);
    1f8c:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    1f90:	d0e0      	beq.n	1f54 <z_impl_log_panic+0x14>
	return backend->cb->active;
    1f92:	6873      	ldr	r3, [r6, #4]
    1f94:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1f96:	2b00      	cmp	r3, #0
    1f98:	d0ef      	beq.n	1f7a <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
    1f9a:	2e00      	cmp	r6, #0
    1f9c:	d1e9      	bne.n	1f72 <z_impl_log_panic+0x32>
    1f9e:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1fc8 <z_impl_log_panic+0x88>
    1fa2:	23d7      	movs	r3, #215	; 0xd7
    1fa4:	4642      	mov	r2, r8
    1fa6:	4909      	ldr	r1, [pc, #36]	; (1fcc <z_impl_log_panic+0x8c>)
    1fa8:	4809      	ldr	r0, [pc, #36]	; (1fd0 <z_impl_log_panic+0x90>)
    1faa:	f008 fcbd 	bl	a928 <assert_print>
    1fae:	21d7      	movs	r1, #215	; 0xd7
    1fb0:	4640      	mov	r0, r8
    1fb2:	f008 fcb2 	bl	a91a <assert_post_action>
    1fb6:	e7dc      	b.n	1f72 <z_impl_log_panic+0x32>
	panic_mode = true;
    1fb8:	4b02      	ldr	r3, [pc, #8]	; (1fc4 <z_impl_log_panic+0x84>)
    1fba:	2201      	movs	r2, #1
    1fbc:	701a      	strb	r2, [r3, #0]
}
    1fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fc2:	bf00      	nop
    1fc4:	200052e5 	.word	0x200052e5
    1fc8:	0000c6a0 	.word	0x0000c6a0
    1fcc:	0000c6d8 	.word	0x0000c6d8
    1fd0:	0000c294 	.word	0x0000c294
    1fd4:	0000c0f4 	.word	0x0000c0f4
    1fd8:	0000c0d4 	.word	0x0000c0d4

00001fdc <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    1fdc:	4b01      	ldr	r3, [pc, #4]	; (1fe4 <z_log_notify_backend_enabled+0x8>)
    1fde:	2201      	movs	r2, #1
    1fe0:	701a      	strb	r2, [r3, #0]
}
    1fe2:	4770      	bx	lr
    1fe4:	200052e4 	.word	0x200052e4

00001fe8 <z_log_dropped>:
    1fe8:	4b0d      	ldr	r3, [pc, #52]	; (2020 <z_log_dropped+0x38>)
    1fea:	f3bf 8f5b 	dmb	ish
    1fee:	e853 2f00 	ldrex	r2, [r3]
    1ff2:	3201      	adds	r2, #1
    1ff4:	e843 2100 	strex	r1, r2, [r3]
    1ff8:	2900      	cmp	r1, #0
    1ffa:	d1f8      	bne.n	1fee <z_log_dropped+0x6>
    1ffc:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    2000:	b900      	cbnz	r0, 2004 <z_log_dropped+0x1c>
		atomic_dec(&buffered_cnt);
	}
}
    2002:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2004:	4b07      	ldr	r3, [pc, #28]	; (2024 <z_log_dropped+0x3c>)
    2006:	f3bf 8f5b 	dmb	ish
    200a:	e853 2f00 	ldrex	r2, [r3]
    200e:	3a01      	subs	r2, #1
    2010:	e843 2100 	strex	r1, r2, [r3]
    2014:	2900      	cmp	r1, #0
    2016:	d1f8      	bne.n	200a <z_log_dropped+0x22>
    2018:	f3bf 8f5b 	dmb	ish
    201c:	e7f1      	b.n	2002 <z_log_dropped+0x1a>
    201e:	bf00      	nop
    2020:	20004580 	.word	0x20004580
    2024:	2000457c 	.word	0x2000457c

00002028 <z_log_msg2_commit>:
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
    2028:	b510      	push	{r4, lr}
    202a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    202c:	4b04      	ldr	r3, [pc, #16]	; (2040 <z_log_msg2_commit+0x18>)
    202e:	681b      	ldr	r3, [r3, #0]
    2030:	4798      	blx	r3
    2032:	60a0      	str	r0, [r4, #8]
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    2034:	2100      	movs	r1, #0
    2036:	4620      	mov	r0, r4
    2038:	f7ff feae 	bl	1d98 <msg_process>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    203c:	bd10      	pop	{r4, pc}
    203e:	bf00      	nop
    2040:	20004004 	.word	0x20004004

00002044 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    2044:	4b05      	ldr	r3, [pc, #20]	; (205c <log_source_name_get+0x18>)
    2046:	4a06      	ldr	r2, [pc, #24]	; (2060 <log_source_name_get+0x1c>)
    2048:	1a9b      	subs	r3, r3, r2
    204a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    204e:	d202      	bcs.n	2056 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    2050:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    2054:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    2056:	2000      	movs	r0, #0
}
    2058:	4770      	bx	lr
    205a:	bf00      	nop
    205c:	0000c0d4 	.word	0x0000c0d4
    2060:	0000c08c 	.word	0x0000c08c

00002064 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    2064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2066:	4604      	mov	r4, r0
    2068:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    206a:	4d1e      	ldr	r5, [pc, #120]	; (20e4 <log_backend_enable+0x80>)
    206c:	1b45      	subs	r5, r0, r5
    206e:	112d      	asrs	r5, r5, #4
    2070:	3501      	adds	r5, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    2072:	6803      	ldr	r3, [r0, #0]
    2074:	681b      	ldr	r3, [r3, #0]
    2076:	b163      	cbz	r3, 2092 <log_backend_enable+0x2e>
	}

	log_backend_id_set(backend, id);
    2078:	b2ed      	uxtb	r5, r5
	__ASSERT_NO_MSG(backend != NULL);
    207a:	b1cc      	cbz	r4, 20b0 <log_backend_enable+0x4c>
	backend->cb->id = id;
    207c:	6863      	ldr	r3, [r4, #4]
    207e:	711d      	strb	r5, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    2080:	b314      	cbz	r4, 20c8 <log_backend_enable+0x64>
	backend->cb->ctx = ctx;
    2082:	6863      	ldr	r3, [r4, #4]
    2084:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    2086:	6863      	ldr	r3, [r4, #4]
    2088:	2201      	movs	r2, #1
    208a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    208c:	f7ff ffa6 	bl	1fdc <z_log_notify_backend_enabled>
}
    2090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    2092:	4f15      	ldr	r7, [pc, #84]	; (20e8 <log_backend_enable+0x84>)
    2094:	23bb      	movs	r3, #187	; 0xbb
    2096:	463a      	mov	r2, r7
    2098:	4914      	ldr	r1, [pc, #80]	; (20ec <log_backend_enable+0x88>)
    209a:	4815      	ldr	r0, [pc, #84]	; (20f0 <log_backend_enable+0x8c>)
    209c:	f008 fc44 	bl	a928 <assert_print>
    20a0:	4814      	ldr	r0, [pc, #80]	; (20f4 <log_backend_enable+0x90>)
    20a2:	f008 fc41 	bl	a928 <assert_print>
    20a6:	21bb      	movs	r1, #187	; 0xbb
    20a8:	4638      	mov	r0, r7
    20aa:	f008 fc36 	bl	a91a <assert_post_action>
    20ae:	e7e3      	b.n	2078 <log_backend_enable+0x14>
	__ASSERT_NO_MSG(backend != NULL);
    20b0:	4f11      	ldr	r7, [pc, #68]	; (20f8 <log_backend_enable+0x94>)
    20b2:	23e6      	movs	r3, #230	; 0xe6
    20b4:	463a      	mov	r2, r7
    20b6:	4911      	ldr	r1, [pc, #68]	; (20fc <log_backend_enable+0x98>)
    20b8:	480d      	ldr	r0, [pc, #52]	; (20f0 <log_backend_enable+0x8c>)
    20ba:	f008 fc35 	bl	a928 <assert_print>
    20be:	21e6      	movs	r1, #230	; 0xe6
    20c0:	4638      	mov	r0, r7
    20c2:	f008 fc2a 	bl	a91a <assert_post_action>
    20c6:	e7d9      	b.n	207c <log_backend_enable+0x18>
	__ASSERT_NO_MSG(backend != NULL);
    20c8:	4d0b      	ldr	r5, [pc, #44]	; (20f8 <log_backend_enable+0x94>)
    20ca:	f240 1317 	movw	r3, #279	; 0x117
    20ce:	462a      	mov	r2, r5
    20d0:	490a      	ldr	r1, [pc, #40]	; (20fc <log_backend_enable+0x98>)
    20d2:	4807      	ldr	r0, [pc, #28]	; (20f0 <log_backend_enable+0x8c>)
    20d4:	f008 fc28 	bl	a928 <assert_print>
    20d8:	f240 1117 	movw	r1, #279	; 0x117
    20dc:	4628      	mov	r0, r5
    20de:	f008 fc1c 	bl	a91a <assert_post_action>
    20e2:	e7ce      	b.n	2082 <log_backend_enable+0x1e>
    20e4:	0000c0d4 	.word	0x0000c0d4
    20e8:	0000c780 	.word	0x0000c780
    20ec:	0000c7dc 	.word	0x0000c7dc
    20f0:	0000c294 	.word	0x0000c294
    20f4:	0000c7f4 	.word	0x0000c7f4
    20f8:	0000c6a0 	.word	0x0000c6a0
    20fc:	0000c6d8 	.word	0x0000c6d8

00002100 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    2100:	b40e      	push	{r1, r2, r3}
    2102:	b500      	push	{lr}
    2104:	b082      	sub	sp, #8
    2106:	4601      	mov	r1, r0
    2108:	ab03      	add	r3, sp, #12
    210a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    210e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2110:	4803      	ldr	r0, [pc, #12]	; (2120 <print_formatted+0x20>)
    2112:	f7ff fb45 	bl	17a0 <cbvprintf>
	va_end(args);

	return length;
}
    2116:	b002      	add	sp, #8
    2118:	f85d eb04 	ldr.w	lr, [sp], #4
    211c:	b003      	add	sp, #12
    211e:	4770      	bx	lr
    2120:	0000a983 	.word	0x0000a983

00002124 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    2124:	b530      	push	{r4, r5, lr}
    2126:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    2128:	f011 0f44 	tst.w	r1, #68	; 0x44
    212c:	d005      	beq.n	213a <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    212e:	4b1a      	ldr	r3, [pc, #104]	; (2198 <timestamp_print+0x74>)
    2130:	681c      	ldr	r4, [r3, #0]
    2132:	b934      	cbnz	r4, 2142 <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    2134:	2000      	movs	r0, #0
	}

	return length;
}
    2136:	b005      	add	sp, #20
    2138:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    213a:	4918      	ldr	r1, [pc, #96]	; (219c <timestamp_print+0x78>)
    213c:	f7ff ffe0 	bl	2100 <print_formatted>
    2140:	e7f9      	b.n	2136 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    2142:	4b17      	ldr	r3, [pc, #92]	; (21a0 <timestamp_print+0x7c>)
    2144:	6819      	ldr	r1, [r3, #0]
    2146:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    214a:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    214e:	4a15      	ldr	r2, [pc, #84]	; (21a4 <timestamp_print+0x80>)
    2150:	fba2 320c 	umull	r3, r2, r2, ip
    2154:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    2156:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    215a:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    215e:	4b12      	ldr	r3, [pc, #72]	; (21a8 <timestamp_print+0x84>)
    2160:	fba3 530e 	umull	r5, r3, r3, lr
    2164:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    2166:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    216a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    216e:	fb0c f101 	mul.w	r1, ip, r1
    2172:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2176:	fb05 1114 	mls	r1, r5, r4, r1
    217a:	fb0c f101 	mul.w	r1, ip, r1
    217e:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    2182:	9102      	str	r1, [sp, #8]
    2184:	9501      	str	r5, [sp, #4]
    2186:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    218a:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    218e:	9100      	str	r1, [sp, #0]
    2190:	4906      	ldr	r1, [pc, #24]	; (21ac <timestamp_print+0x88>)
    2192:	f7ff ffb5 	bl	2100 <print_formatted>
    2196:	e7ce      	b.n	2136 <timestamp_print+0x12>
    2198:	20004588 	.word	0x20004588
    219c:	0000c818 	.word	0x0000c818
    21a0:	2000458c 	.word	0x2000458c
    21a4:	91a2b3c5 	.word	0x91a2b3c5
    21a8:	88888889 	.word	0x88888889
    21ac:	0000c824 	.word	0x0000c824

000021b0 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    21b0:	b161      	cbz	r1, 21cc <color_print+0x1c>
{
    21b2:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    21b4:	b12a      	cbz	r2, 21c2 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    21b6:	4a06      	ldr	r2, [pc, #24]	; (21d0 <color_print+0x20>)
    21b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    21bc:	b912      	cbnz	r2, 21c4 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    21be:	4a05      	ldr	r2, [pc, #20]	; (21d4 <color_print+0x24>)
    21c0:	e000      	b.n	21c4 <color_print+0x14>
    21c2:	4a04      	ldr	r2, [pc, #16]	; (21d4 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    21c4:	4904      	ldr	r1, [pc, #16]	; (21d8 <color_print+0x28>)
    21c6:	f7ff ff9b 	bl	2100 <print_formatted>
	}
}
    21ca:	bd08      	pop	{r3, pc}
    21cc:	4770      	bx	lr
    21ce:	bf00      	nop
    21d0:	0000c8e8 	.word	0x0000c8e8
    21d4:	0000c840 	.word	0x0000c840
    21d8:	0000c848 	.word	0x0000c848

000021dc <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    21dc:	f011 0f10 	tst.w	r1, #16
    21e0:	d10b      	bne.n	21fa <newline_print+0x1e>
{
    21e2:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    21e4:	f011 0f20 	tst.w	r1, #32
    21e8:	d003      	beq.n	21f2 <newline_print+0x16>
		print_formatted(ctx, "\n");
    21ea:	4904      	ldr	r1, [pc, #16]	; (21fc <newline_print+0x20>)
    21ec:	f7ff ff88 	bl	2100 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    21f0:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    21f2:	4903      	ldr	r1, [pc, #12]	; (2200 <newline_print+0x24>)
    21f4:	f7ff ff84 	bl	2100 <print_formatted>
    21f8:	e7fa      	b.n	21f0 <newline_print+0x14>
    21fa:	4770      	bx	lr
    21fc:	0000c188 	.word	0x0000c188
    2200:	0000e014 	.word	0x0000e014

00002204 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    2204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2208:	4605      	mov	r5, r0
    220a:	460f      	mov	r7, r1
    220c:	4616      	mov	r6, r2
    220e:	4698      	mov	r8, r3
	newline_print(output, flags);
    2210:	9906      	ldr	r1, [sp, #24]
    2212:	f7ff ffe3 	bl	21dc <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    2216:	2400      	movs	r4, #0
    2218:	4544      	cmp	r4, r8
    221a:	da05      	bge.n	2228 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    221c:	4924      	ldr	r1, [pc, #144]	; (22b0 <hexdump_line_print+0xac>)
    221e:	4628      	mov	r0, r5
    2220:	f7ff ff6e 	bl	2100 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2224:	3401      	adds	r4, #1
    2226:	e7f7      	b.n	2218 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2228:	2400      	movs	r4, #0
    222a:	e009      	b.n	2240 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    222c:	4920      	ldr	r1, [pc, #128]	; (22b0 <hexdump_line_print+0xac>)
    222e:	4628      	mov	r0, r5
    2230:	f7ff ff66 	bl	2100 <print_formatted>
    2234:	e00b      	b.n	224e <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    2236:	491f      	ldr	r1, [pc, #124]	; (22b4 <hexdump_line_print+0xb0>)
    2238:	4628      	mov	r0, r5
    223a:	f7ff ff61 	bl	2100 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    223e:	3401      	adds	r4, #1
    2240:	2c0f      	cmp	r4, #15
    2242:	dc0c      	bgt.n	225e <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    2244:	2c00      	cmp	r4, #0
    2246:	dd02      	ble.n	224e <hexdump_line_print+0x4a>
    2248:	f014 0f07 	tst.w	r4, #7
    224c:	d0ee      	beq.n	222c <hexdump_line_print+0x28>
		if (i < length) {
    224e:	42b4      	cmp	r4, r6
    2250:	d2f1      	bcs.n	2236 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    2252:	5d3a      	ldrb	r2, [r7, r4]
    2254:	4918      	ldr	r1, [pc, #96]	; (22b8 <hexdump_line_print+0xb4>)
    2256:	4628      	mov	r0, r5
    2258:	f7ff ff52 	bl	2100 <print_formatted>
    225c:	e7ef      	b.n	223e <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    225e:	4917      	ldr	r1, [pc, #92]	; (22bc <hexdump_line_print+0xb8>)
    2260:	4628      	mov	r0, r5
    2262:	f7ff ff4d 	bl	2100 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2266:	2400      	movs	r4, #0
    2268:	e009      	b.n	227e <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    226a:	4911      	ldr	r1, [pc, #68]	; (22b0 <hexdump_line_print+0xac>)
    226c:	4628      	mov	r0, r5
    226e:	f7ff ff47 	bl	2100 <print_formatted>
    2272:	e00b      	b.n	228c <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    2274:	4912      	ldr	r1, [pc, #72]	; (22c0 <hexdump_line_print+0xbc>)
    2276:	4628      	mov	r0, r5
    2278:	f7ff ff42 	bl	2100 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    227c:	3401      	adds	r4, #1
    227e:	2c0f      	cmp	r4, #15
    2280:	dc13      	bgt.n	22aa <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
    2282:	2c00      	cmp	r4, #0
    2284:	dd02      	ble.n	228c <hexdump_line_print+0x88>
    2286:	f014 0f07 	tst.w	r4, #7
    228a:	d0ee      	beq.n	226a <hexdump_line_print+0x66>
		if (i < length) {
    228c:	42b4      	cmp	r4, r6
    228e:	d207      	bcs.n	22a0 <hexdump_line_print+0x9c>
			char c = (char)data[i];
    2290:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
    2292:	4b0c      	ldr	r3, [pc, #48]	; (22c4 <hexdump_line_print+0xc0>)
    2294:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
    2296:	f013 0f97 	tst.w	r3, #151	; 0x97
    229a:	d1eb      	bne.n	2274 <hexdump_line_print+0x70>
    229c:	222e      	movs	r2, #46	; 0x2e
    229e:	e7e9      	b.n	2274 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
    22a0:	4903      	ldr	r1, [pc, #12]	; (22b0 <hexdump_line_print+0xac>)
    22a2:	4628      	mov	r0, r5
    22a4:	f7ff ff2c 	bl	2100 <print_formatted>
    22a8:	e7e8      	b.n	227c <hexdump_line_print+0x78>
		}
	}
}
    22aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    22ae:	bf00      	nop
    22b0:	0000c870 	.word	0x0000c870
    22b4:	0000c854 	.word	0x0000c854
    22b8:	0000c84c 	.word	0x0000c84c
    22bc:	0000c858 	.word	0x0000c858
    22c0:	0000c85c 	.word	0x0000c85c
    22c4:	0000e039 	.word	0x0000e039

000022c8 <ids_print>:
{
    22c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22cc:	4680      	mov	r8, r0
    22ce:	4616      	mov	r6, r2
    22d0:	461d      	mov	r5, r3
    22d2:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    22d6:	b959      	cbnz	r1, 22f0 <ids_print+0x28>
	int total = 0;
    22d8:	2400      	movs	r4, #0
	if (source_id >= 0) {
    22da:	2f00      	cmp	r7, #0
    22dc:	db1c      	blt.n	2318 <ids_print+0x50>
		total += print_formatted(output,
    22de:	b186      	cbz	r6, 2302 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    22e0:	2301      	movs	r3, #1
    22e2:	9a07      	ldr	r2, [sp, #28]
    22e4:	4093      	lsls	r3, r2
				(func_on &&
    22e6:	f013 0f10 	tst.w	r3, #16
    22ea:	d118      	bne.n	231e <ids_print+0x56>
		total += print_formatted(output,
    22ec:	4e0d      	ldr	r6, [pc, #52]	; (2324 <ids_print+0x5c>)
    22ee:	e009      	b.n	2304 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    22f0:	4b0d      	ldr	r3, [pc, #52]	; (2328 <ids_print+0x60>)
    22f2:	9a07      	ldr	r2, [sp, #28]
    22f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    22f8:	490c      	ldr	r1, [pc, #48]	; (232c <ids_print+0x64>)
    22fa:	f7ff ff01 	bl	2100 <print_formatted>
    22fe:	4604      	mov	r4, r0
    2300:	e7eb      	b.n	22da <ids_print+0x12>
		total += print_formatted(output,
    2302:	4e08      	ldr	r6, [pc, #32]	; (2324 <ids_print+0x5c>)
    2304:	4639      	mov	r1, r7
    2306:	4628      	mov	r0, r5
    2308:	f7ff fe9c 	bl	2044 <log_source_name_get>
    230c:	4602      	mov	r2, r0
    230e:	4631      	mov	r1, r6
    2310:	4640      	mov	r0, r8
    2312:	f7ff fef5 	bl	2100 <print_formatted>
    2316:	4404      	add	r4, r0
}
    2318:	4620      	mov	r0, r4
    231a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    231e:	4e04      	ldr	r6, [pc, #16]	; (2330 <ids_print+0x68>)
    2320:	e7f0      	b.n	2304 <ids_print+0x3c>
    2322:	bf00      	nop
    2324:	0000c860 	.word	0x0000c860
    2328:	0000c8fc 	.word	0x0000c8fc
    232c:	0000c86c 	.word	0x0000c86c
    2330:	0000c868 	.word	0x0000c868

00002334 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    2334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2338:	b085      	sub	sp, #20
    233a:	4605      	mov	r5, r0
    233c:	460c      	mov	r4, r1
    233e:	4616      	mov	r6, r2
    2340:	9303      	str	r3, [sp, #12]
    2342:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    2346:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    234a:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    234e:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    2352:	f008 fb14 	bl	a97e <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    2356:	b1e8      	cbz	r0, 2394 <prefix_print+0x60>
    2358:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    235a:	4913      	ldr	r1, [pc, #76]	; (23a8 <prefix_print+0x74>)
    235c:	4628      	mov	r0, r5
    235e:	f7ff fecf 	bl	2100 <print_formatted>
    2362:	4607      	mov	r7, r0
	}

	if (stamp) {
    2364:	f1bb 0f00 	cmp.w	fp, #0
    2368:	d116      	bne.n	2398 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    236a:	4642      	mov	r2, r8
    236c:	4651      	mov	r1, sl
    236e:	4628      	mov	r0, r5
    2370:	f008 fb31 	bl	a9d6 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    2374:	f8cd 8004 	str.w	r8, [sp, #4]
    2378:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    237c:	9300      	str	r3, [sp, #0]
    237e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    2382:	4632      	mov	r2, r6
    2384:	4649      	mov	r1, r9
    2386:	4628      	mov	r0, r5
    2388:	f7ff ff9e 	bl	22c8 <ids_print>
			domain_id, source_id, level);


	return length;
}
    238c:	4438      	add	r0, r7
    238e:	b005      	add	sp, #20
    2390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    2394:	2700      	movs	r7, #0
    2396:	e7e5      	b.n	2364 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    2398:	9a03      	ldr	r2, [sp, #12]
    239a:	4621      	mov	r1, r4
    239c:	4628      	mov	r0, r5
    239e:	f7ff fec1 	bl	2124 <timestamp_print>
    23a2:	4407      	add	r7, r0
    23a4:	e7e1      	b.n	236a <prefix_print+0x36>
    23a6:	bf00      	nop
    23a8:	0000c874 	.word	0x0000c874

000023ac <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    23ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    23b0:	b084      	sub	sp, #16
    23b2:	4606      	mov	r6, r0
    23b4:	460c      	mov	r4, r1
    23b6:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    23b8:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
    23ba:	880a      	ldrh	r2, [r1, #0]
    23bc:	f3c2 1882 	ubfx	r8, r2, #6, #3
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    23c0:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
    23c4:	d037      	beq.n	2436 <log_output_msg2_process+0x8a>
	return msg->hdr.source;
    23c6:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
    23c8:	7809      	ldrb	r1, [r1, #0]
    23ca:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    23ce:	b37a      	cbz	r2, 2430 <log_output_msg2_process+0x84>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    23d0:	4829      	ldr	r0, [pc, #164]	; (2478 <log_output_msg2_process+0xcc>)
    23d2:	1a12      	subs	r2, r2, r0
    23d4:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    23d8:	9202      	str	r2, [sp, #8]
    23da:	9101      	str	r1, [sp, #4]
    23dc:	f8cd 8000 	str.w	r8, [sp]
    23e0:	2200      	movs	r2, #0
    23e2:	4639      	mov	r1, r7
    23e4:	4630      	mov	r0, r6
    23e6:	f7ff ffa5 	bl	2334 <prefix_print>
    23ea:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    23ec:	4625      	mov	r5, r4
    23ee:	f855 3b10 	ldr.w	r3, [r5], #16
    23f2:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    23f6:	b153      	cbz	r3, 240e <log_output_msg2_process+0x62>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    23f8:	f1b8 0f00 	cmp.w	r8, #0
    23fc:	d11e      	bne.n	243c <log_output_msg2_process+0x90>
    23fe:	481f      	ldr	r0, [pc, #124]	; (247c <log_output_msg2_process+0xd0>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    2400:	462b      	mov	r3, r5
    2402:	4632      	mov	r2, r6
    2404:	491e      	ldr	r1, [pc, #120]	; (2480 <log_output_msg2_process+0xd4>)
    2406:	f008 f93a 	bl	a67e <cbpprintf_external>
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    240a:	2800      	cmp	r0, #0
    240c:	db18      	blt.n	2440 <log_output_msg2_process+0x94>
	*len = msg->hdr.desc.data_len;
    240e:	8862      	ldrh	r2, [r4, #2]
    2410:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    2414:	6821      	ldr	r1, [r4, #0]
    2416:	f3c1 2149 	ubfx	r1, r1, #9, #10
    241a:	4429      	add	r1, r5
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    241c:	b9fa      	cbnz	r2, 245e <log_output_msg2_process+0xb2>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    241e:	f1b8 0f00 	cmp.w	r8, #0
    2422:	d122      	bne.n	246a <log_output_msg2_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    2424:	4630      	mov	r0, r6
    2426:	f008 fb09 	bl	aa3c <log_output_flush>
}
    242a:	b004      	add	sp, #16
    242c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		int16_t source_id = source ?
    2430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2434:	e7d0      	b.n	23d8 <log_output_msg2_process+0x2c>
		prefix_offset = 0;
    2436:	f04f 0900 	mov.w	r9, #0
    243a:	e7d7      	b.n	23ec <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    243c:	4811      	ldr	r0, [pc, #68]	; (2484 <log_output_msg2_process+0xd8>)
    243e:	e7df      	b.n	2400 <log_output_msg2_process+0x54>
		__ASSERT_NO_MSG(err >= 0);
    2440:	f8df a044 	ldr.w	sl, [pc, #68]	; 2488 <log_output_msg2_process+0xdc>
    2444:	f240 23b7 	movw	r3, #695	; 0x2b7
    2448:	4652      	mov	r2, sl
    244a:	4910      	ldr	r1, [pc, #64]	; (248c <log_output_msg2_process+0xe0>)
    244c:	4810      	ldr	r0, [pc, #64]	; (2490 <log_output_msg2_process+0xe4>)
    244e:	f008 fa6b 	bl	a928 <assert_print>
    2452:	f240 21b7 	movw	r1, #695	; 0x2b7
    2456:	4650      	mov	r0, sl
    2458:	f008 fa5f 	bl	a91a <assert_post_action>
    245c:	e7d7      	b.n	240e <log_output_msg2_process+0x62>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
    245e:	9700      	str	r7, [sp, #0]
    2460:	464b      	mov	r3, r9
    2462:	4630      	mov	r0, r6
    2464:	f008 facf 	bl	aa06 <log_msg2_hexdump>
    2468:	e7d9      	b.n	241e <log_output_msg2_process+0x72>
		postfix_print(output, flags, level);
    246a:	4642      	mov	r2, r8
    246c:	4639      	mov	r1, r7
    246e:	4630      	mov	r0, r6
    2470:	f008 fabd 	bl	a9ee <postfix_print>
    2474:	e7d6      	b.n	2424 <log_output_msg2_process+0x78>
    2476:	bf00      	nop
    2478:	0000c08c 	.word	0x0000c08c
    247c:	0000a9a1 	.word	0x0000a9a1
    2480:	000017a1 	.word	0x000017a1
    2484:	0000a983 	.word	0x0000a983
    2488:	0000c878 	.word	0x0000c878
    248c:	0000c8bc 	.word	0x0000c8bc
    2490:	0000c294 	.word	0x0000c294

00002494 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2494:	4b07      	ldr	r3, [pc, #28]	; (24b4 <log_output_timestamp_freq_set+0x20>)
    2496:	2201      	movs	r2, #1
    2498:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    249a:	e004      	b.n	24a6 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    249c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    249e:	4a05      	ldr	r2, [pc, #20]	; (24b4 <log_output_timestamp_freq_set+0x20>)
    24a0:	6813      	ldr	r3, [r2, #0]
    24a2:	005b      	lsls	r3, r3, #1
    24a4:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    24a6:	4b04      	ldr	r3, [pc, #16]	; (24b8 <log_output_timestamp_freq_set+0x24>)
    24a8:	4298      	cmp	r0, r3
    24aa:	d8f7      	bhi.n	249c <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    24ac:	4b03      	ldr	r3, [pc, #12]	; (24bc <log_output_timestamp_freq_set+0x28>)
    24ae:	6018      	str	r0, [r3, #0]
}
    24b0:	4770      	bx	lr
    24b2:	bf00      	nop
    24b4:	2000458c 	.word	0x2000458c
    24b8:	000f4240 	.word	0x000f4240
    24bc:	20004588 	.word	0x20004588

000024c0 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    24c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24c4:	b087      	sub	sp, #28
    24c6:	af02      	add	r7, sp, #8
    24c8:	4682      	mov	sl, r0
    24ca:	6079      	str	r1, [r7, #4]
    24cc:	4691      	mov	r9, r2
    24ce:	4698      	mov	r8, r3
    24d0:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    24d2:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
	int plen;

	if (fmt) {
    24d6:	f1bb 0f00 	cmp.w	fp, #0
    24da:	d016      	beq.n	250a <z_impl_z_log_msg2_runtime_vcreate+0x4a>
		va_list ap2;

		va_copy(ap2, ap);
    24dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    24de:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    24e0:	9300      	str	r3, [sp, #0]
    24e2:	465b      	mov	r3, fp
    24e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    24e6:	2110      	movs	r1, #16
    24e8:	2000      	movs	r0, #0
    24ea:	f7fe f871 	bl	5d0 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    24ee:	1e05      	subs	r5, r0, #0
    24f0:	da0c      	bge.n	250c <z_impl_z_log_msg2_runtime_vcreate+0x4c>
    24f2:	4c26      	ldr	r4, [pc, #152]	; (258c <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    24f4:	2367      	movs	r3, #103	; 0x67
    24f6:	4622      	mov	r2, r4
    24f8:	4925      	ldr	r1, [pc, #148]	; (2590 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    24fa:	4826      	ldr	r0, [pc, #152]	; (2594 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    24fc:	f008 fa14 	bl	a928 <assert_print>
    2500:	2167      	movs	r1, #103	; 0x67
    2502:	4620      	mov	r0, r4
    2504:	f008 fa09 	bl	a91a <assert_post_action>
		va_end(ap2);
    2508:	e000      	b.n	250c <z_impl_z_log_msg2_runtime_vcreate+0x4c>
	} else {
		plen = 0;
    250a:	2500      	movs	r5, #0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    250c:	4629      	mov	r1, r5
    250e:	19ab      	adds	r3, r5, r6
    2510:	3317      	adds	r3, #23
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    2512:	2400      	movs	r4, #0
    2514:	f36f 0400 	bfc	r4, #0, #1
    2518:	f36f 0441 	bfc	r4, #1, #1
    251c:	f36f 0482 	bfc	r4, #2, #1
    2520:	f36a 04c5 	bfi	r4, sl, #3, #3
    2524:	f369 1488 	bfi	r4, r9, #6, #3
    2528:	f365 2452 	bfi	r4, r5, #9, #10
    252c:	f366 44de 	bfi	r4, r6, #19, #12
    2530:	f36f 74df 	bfc	r4, #31, #1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    2534:	f023 0307 	bic.w	r3, r3, #7
    2538:	ebad 0d03 	sub.w	sp, sp, r3
    253c:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    253e:	466b      	mov	r3, sp
    2540:	f113 0018 	adds.w	r0, r3, #24
    2544:	d00a      	beq.n	255c <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    2546:	f1bb 0f00 	cmp.w	fp, #0
    254a:	d007      	beq.n	255c <z_impl_z_log_msg2_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    254c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    254e:	9300      	str	r3, [sp, #0]
    2550:	465b      	mov	r3, fp
    2552:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2554:	f7fe f83c 	bl	5d0 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    2558:	2800      	cmp	r0, #0
    255a:	db09      	blt.n	2570 <z_impl_z_log_msg2_runtime_vcreate+0xb0>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    255c:	4643      	mov	r3, r8
    255e:	4622      	mov	r2, r4
    2560:	6879      	ldr	r1, [r7, #4]
    2562:	4628      	mov	r0, r5
    2564:	f008 fa77 	bl	aa56 <z_log_msg2_finalize>
	}
}
    2568:	3714      	adds	r7, #20
    256a:	46bd      	mov	sp, r7
    256c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(plen >= 0);
    2570:	f8df 9018 	ldr.w	r9, [pc, #24]	; 258c <z_impl_z_log_msg2_runtime_vcreate+0xcc>
    2574:	2381      	movs	r3, #129	; 0x81
    2576:	464a      	mov	r2, r9
    2578:	4905      	ldr	r1, [pc, #20]	; (2590 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    257a:	4806      	ldr	r0, [pc, #24]	; (2594 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    257c:	f008 f9d4 	bl	a928 <assert_print>
    2580:	2181      	movs	r1, #129	; 0x81
    2582:	4648      	mov	r0, r9
    2584:	f008 f9c9 	bl	a91a <assert_post_action>
    2588:	e7e8      	b.n	255c <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    258a:	bf00      	nop
    258c:	0000c910 	.word	0x0000c910
    2590:	0000c94c 	.word	0x0000c94c
    2594:	0000c294 	.word	0x0000c294

00002598 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    2598:	b570      	push	{r4, r5, r6, lr}
    259a:	4606      	mov	r6, r0
    259c:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    259e:	2400      	movs	r4, #0
    25a0:	e006      	b.n	25b0 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    25a2:	4b05      	ldr	r3, [pc, #20]	; (25b8 <char_out+0x20>)
    25a4:	6818      	ldr	r0, [r3, #0]
    25a6:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    25a8:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    25aa:	69db      	ldr	r3, [r3, #28]
    25ac:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    25ae:	3401      	adds	r4, #1
    25b0:	42ac      	cmp	r4, r5
    25b2:	d3f6      	bcc.n	25a2 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    25b4:	4628      	mov	r0, r5
    25b6:	bd70      	pop	{r4, r5, r6, pc}
    25b8:	200045a8 	.word	0x200045a8

000025bc <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    25bc:	4b01      	ldr	r3, [pc, #4]	; (25c4 <format_set+0x8>)
    25be:	6019      	str	r1, [r3, #0]
	return 0;
}
    25c0:	2000      	movs	r0, #0
    25c2:	4770      	bx	lr
    25c4:	20004598 	.word	0x20004598

000025c8 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
    25c8:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    25ca:	4809      	ldr	r0, [pc, #36]	; (25f0 <log_backend_uart_init+0x28>)
    25cc:	4b09      	ldr	r3, [pc, #36]	; (25f4 <log_backend_uart_init+0x2c>)
    25ce:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    25d0:	f009 fac8 	bl	bb64 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    25d4:	b100      	cbz	r0, 25d8 <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    25d6:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    25d8:	4c07      	ldr	r4, [pc, #28]	; (25f8 <log_backend_uart_init+0x30>)
    25da:	2379      	movs	r3, #121	; 0x79
    25dc:	4622      	mov	r2, r4
    25de:	4907      	ldr	r1, [pc, #28]	; (25fc <log_backend_uart_init+0x34>)
    25e0:	4807      	ldr	r0, [pc, #28]	; (2600 <log_backend_uart_init+0x38>)
    25e2:	f008 f9a1 	bl	a928 <assert_print>
    25e6:	2179      	movs	r1, #121	; 0x79
    25e8:	4620      	mov	r0, r4
    25ea:	f008 f996 	bl	a91a <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
    25ee:	e7f2      	b.n	25d6 <log_backend_uart_init+0xe>
    25f0:	0000bef4 	.word	0x0000bef4
    25f4:	200045a8 	.word	0x200045a8
    25f8:	0000c958 	.word	0x0000c958
    25fc:	0000c990 	.word	0x0000c990
    2600:	0000c294 	.word	0x0000c294

00002604 <panic>:

static void panic(struct log_backend const *const backend)
{
    2604:	b508      	push	{r3, lr}
	in_panic = true;
    2606:	4b03      	ldr	r3, [pc, #12]	; (2614 <panic+0x10>)
    2608:	2201      	movs	r2, #1
    260a:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    260c:	4802      	ldr	r0, [pc, #8]	; (2618 <panic+0x14>)
    260e:	f008 fa15 	bl	aa3c <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    2612:	bd08      	pop	{r3, pc}
    2614:	200052e6 	.word	0x200052e6
    2618:	0000c9ec 	.word	0x0000c9ec

0000261c <process>:
{
    261c:	b510      	push	{r4, lr}
    261e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2620:	4b04      	ldr	r3, [pc, #16]	; (2634 <process+0x18>)
    2622:	6818      	ldr	r0, [r3, #0]
    2624:	f7ff fc18 	bl	1e58 <log_format_func_t_get>
    2628:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    262a:	220f      	movs	r2, #15
    262c:	4621      	mov	r1, r4
    262e:	4802      	ldr	r0, [pc, #8]	; (2638 <process+0x1c>)
    2630:	4798      	blx	r3
}
    2632:	bd10      	pop	{r4, pc}
    2634:	20004598 	.word	0x20004598
    2638:	0000c9ec 	.word	0x0000c9ec

0000263c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    263c:	4b03      	ldr	r3, [pc, #12]	; (264c <log_backend_rtt_init+0x10>)
    263e:	2201      	movs	r2, #1
    2640:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    2642:	4b03      	ldr	r3, [pc, #12]	; (2650 <log_backend_rtt_init+0x14>)
    2644:	4a03      	ldr	r2, [pc, #12]	; (2654 <log_backend_rtt_init+0x18>)
    2646:	601a      	str	r2, [r3, #0]
}
    2648:	4770      	bx	lr
    264a:	bf00      	nop
    264c:	200052e7 	.word	0x200052e7
    2650:	200045d4 	.word	0x200045d4
    2654:	200045bc 	.word	0x200045bc

00002658 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2658:	4b01      	ldr	r3, [pc, #4]	; (2660 <format_set+0x8>)
    265a:	6019      	str	r1, [r3, #0]
	return 0;
}
    265c:	2000      	movs	r0, #0
    265e:	4770      	bx	lr
    2660:	200045d8 	.word	0x200045d8

00002664 <on_failed_write>:
{
    2664:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    2666:	b918      	cbnz	r0, 2670 <on_failed_write+0xc>
		host_present = false;
    2668:	4b04      	ldr	r3, [pc, #16]	; (267c <on_failed_write+0x18>)
    266a:	2200      	movs	r2, #0
    266c:	701a      	strb	r2, [r3, #0]
}
    266e:	bd08      	pop	{r3, pc}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    2670:	f241 3088 	movw	r0, #5000	; 0x1388
    2674:	f009 fb53 	bl	bd1e <z_impl_k_busy_wait>
    2678:	e7f9      	b.n	266e <on_failed_write+0xa>
    267a:	bf00      	nop
    267c:	200052e7 	.word	0x200052e7

00002680 <on_write>:
{
    2680:	b538      	push	{r3, r4, r5, lr}
    2682:	4604      	mov	r4, r0
	host_present = true;
    2684:	4b0a      	ldr	r3, [pc, #40]	; (26b0 <on_write+0x30>)
    2686:	2201      	movs	r2, #1
    2688:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    268a:	4b0a      	ldr	r3, [pc, #40]	; (26b4 <on_write+0x34>)
    268c:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    268e:	b92b      	cbnz	r3, 269c <on_write+0x1c>
}
    2690:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    2692:	1e65      	subs	r5, r4, #1
    2694:	4620      	mov	r0, r4
    2696:	f7ff ffe5 	bl	2664 <on_failed_write>
    269a:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    269c:	2000      	movs	r0, #0
    269e:	f004 fceb 	bl	7078 <SEGGER_RTT_HasDataUp>
    26a2:	2800      	cmp	r0, #0
    26a4:	d0f4      	beq.n	2690 <on_write+0x10>
    26a6:	4b02      	ldr	r3, [pc, #8]	; (26b0 <on_write+0x30>)
    26a8:	781b      	ldrb	r3, [r3, #0]
    26aa:	2b00      	cmp	r3, #0
    26ac:	d1f1      	bne.n	2692 <on_write+0x12>
    26ae:	e7ef      	b.n	2690 <on_write+0x10>
    26b0:	200052e7 	.word	0x200052e7
    26b4:	200052e8 	.word	0x200052e8

000026b8 <data_out_block_mode>:
{
    26b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26ba:	4606      	mov	r6, r0
    26bc:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    26be:	2704      	movs	r7, #4
    26c0:	e006      	b.n	26d0 <data_out_block_mode+0x18>
			on_write(retry_cnt);
    26c2:	4638      	mov	r0, r7
    26c4:	f7ff ffdc 	bl	2680 <on_write>
	} while ((ret == 0) && host_present);
    26c8:	b99c      	cbnz	r4, 26f2 <data_out_block_mode+0x3a>
    26ca:	4b0d      	ldr	r3, [pc, #52]	; (2700 <data_out_block_mode+0x48>)
    26cc:	781b      	ldrb	r3, [r3, #0]
    26ce:	b183      	cbz	r3, 26f2 <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    26d0:	462a      	mov	r2, r5
    26d2:	4631      	mov	r1, r6
    26d4:	2000      	movs	r0, #0
    26d6:	f004 fc6b 	bl	6fb0 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    26da:	4604      	mov	r4, r0
    26dc:	2800      	cmp	r0, #0
    26de:	d1f0      	bne.n	26c2 <data_out_block_mode+0xa>
		} else if (host_present) {
    26e0:	4b07      	ldr	r3, [pc, #28]	; (2700 <data_out_block_mode+0x48>)
    26e2:	781b      	ldrb	r3, [r3, #0]
    26e4:	2b00      	cmp	r3, #0
    26e6:	d0ef      	beq.n	26c8 <data_out_block_mode+0x10>
			retry_cnt--;
    26e8:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    26ea:	4638      	mov	r0, r7
    26ec:	f7ff ffba 	bl	2664 <on_failed_write>
    26f0:	e7ea      	b.n	26c8 <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
    26f2:	b914      	cbnz	r4, 26fa <data_out_block_mode+0x42>
    26f4:	4b02      	ldr	r3, [pc, #8]	; (2700 <data_out_block_mode+0x48>)
    26f6:	781b      	ldrb	r3, [r3, #0]
    26f8:	b903      	cbnz	r3, 26fc <data_out_block_mode+0x44>
    26fa:	462c      	mov	r4, r5
}
    26fc:	4620      	mov	r0, r4
    26fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2700:	200052e7 	.word	0x200052e7

00002704 <panic>:
{
    2704:	b508      	push	{r3, lr}
	panic_mode = true;
    2706:	4b03      	ldr	r3, [pc, #12]	; (2714 <panic+0x10>)
    2708:	2201      	movs	r2, #1
    270a:	701a      	strb	r2, [r3, #0]
    270c:	4802      	ldr	r0, [pc, #8]	; (2718 <panic+0x14>)
    270e:	f008 f995 	bl	aa3c <log_output_flush>
}
    2712:	bd08      	pop	{r3, pc}
    2714:	200052e8 	.word	0x200052e8
    2718:	0000ca2c 	.word	0x0000ca2c

0000271c <process>:
{
    271c:	b510      	push	{r4, lr}
    271e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2720:	4b04      	ldr	r3, [pc, #16]	; (2734 <process+0x18>)
    2722:	6818      	ldr	r0, [r3, #0]
    2724:	f7ff fb98 	bl	1e58 <log_format_func_t_get>
    2728:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    272a:	220f      	movs	r2, #15
    272c:	4621      	mov	r1, r4
    272e:	4802      	ldr	r0, [pc, #8]	; (2738 <process+0x1c>)
    2730:	4798      	blx	r3
}
    2732:	bd10      	pop	{r4, pc}
    2734:	200045d8 	.word	0x200045d8
    2738:	0000ca2c 	.word	0x0000ca2c

0000273c <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    273c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    273e:	4b40      	ldr	r3, [pc, #256]	; (2840 <pm_system_resume+0x104>)
    2740:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2742:	f005 031f 	and.w	r3, r5, #31
    2746:	2201      	movs	r2, #1
    2748:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    274a:	0969      	lsrs	r1, r5, #5
    274c:	4b3d      	ldr	r3, [pc, #244]	; (2844 <pm_system_resume+0x108>)
    274e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2752:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2754:	f3bf 8f5b 	dmb	ish
    2758:	e853 1f00 	ldrex	r1, [r3]
    275c:	ea01 0400 	and.w	r4, r1, r0
    2760:	e843 4600 	strex	r6, r4, [r3]
    2764:	2e00      	cmp	r6, #0
    2766:	d1f7      	bne.n	2758 <pm_system_resume+0x1c>
    2768:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    276c:	420a      	tst	r2, r1
    276e:	d100      	bne.n	2772 <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    2770:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    2772:	4a35      	ldr	r2, [pc, #212]	; (2848 <pm_system_resume+0x10c>)
    2774:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    2778:	0098      	lsls	r0, r3, #2
    277a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    277e:	4933      	ldr	r1, [pc, #204]	; (284c <pm_system_resume+0x110>)
    2780:	b1a9      	cbz	r1, 27ae <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2782:	7859      	ldrb	r1, [r3, #1]
    2784:	5c10      	ldrb	r0, [r2, r0]
    2786:	f008 fa44 	bl	ac12 <pm_state_exit_post_ops>
    278a:	f04f 0320 	mov.w	r3, #32
    278e:	f3ef 8611 	mrs	r6, BASEPRI
    2792:	f383 8812 	msr	BASEPRI_MAX, r3
    2796:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    279a:	482d      	ldr	r0, [pc, #180]	; (2850 <pm_system_resume+0x114>)
    279c:	f004 ff60 	bl	7660 <z_spin_lock_valid>
    27a0:	b158      	cbz	r0, 27ba <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    27a2:	482b      	ldr	r0, [pc, #172]	; (2850 <pm_system_resume+0x114>)
    27a4:	f004 ff7c 	bl	76a0 <z_spin_lock_set_owner>
	return list->head;
    27a8:	4b2a      	ldr	r3, [pc, #168]	; (2854 <pm_system_resume+0x118>)
    27aa:	681c      	ldr	r4, [r3, #0]
    27ac:	e020      	b.n	27f0 <pm_system_resume+0xb4>
	__asm__ volatile(
    27ae:	2300      	movs	r3, #0
    27b0:	f383 8811 	msr	BASEPRI, r3
    27b4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    27b8:	e7e7      	b.n	278a <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    27ba:	4c27      	ldr	r4, [pc, #156]	; (2858 <pm_system_resume+0x11c>)
    27bc:	238e      	movs	r3, #142	; 0x8e
    27be:	4622      	mov	r2, r4
    27c0:	4926      	ldr	r1, [pc, #152]	; (285c <pm_system_resume+0x120>)
    27c2:	4827      	ldr	r0, [pc, #156]	; (2860 <pm_system_resume+0x124>)
    27c4:	f008 f8b0 	bl	a928 <assert_print>
    27c8:	4921      	ldr	r1, [pc, #132]	; (2850 <pm_system_resume+0x114>)
    27ca:	4826      	ldr	r0, [pc, #152]	; (2864 <pm_system_resume+0x128>)
    27cc:	f008 f8ac 	bl	a928 <assert_print>
    27d0:	218e      	movs	r1, #142	; 0x8e
    27d2:	4620      	mov	r0, r4
    27d4:	f008 f8a1 	bl	a91a <assert_post_action>
    27d8:	e7e3      	b.n	27a2 <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    27da:	4b19      	ldr	r3, [pc, #100]	; (2840 <pm_system_resume+0x104>)
    27dc:	7d1b      	ldrb	r3, [r3, #20]
    27de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    27e2:	4919      	ldr	r1, [pc, #100]	; (2848 <pm_system_resume+0x10c>)
    27e4:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    27e8:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    27ea:	b10c      	cbz	r4, 27f0 <pm_system_resume+0xb4>
	return node->next;
    27ec:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    27ee:	b124      	cbz	r4, 27fa <pm_system_resume+0xbe>
    27f0:	b11c      	cbz	r4, 27fa <pm_system_resume+0xbe>
			callback = notifier->state_exit;
    27f2:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    27f4:	2a00      	cmp	r2, #0
    27f6:	d1f0      	bne.n	27da <pm_system_resume+0x9e>
    27f8:	e7f7      	b.n	27ea <pm_system_resume+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    27fa:	4815      	ldr	r0, [pc, #84]	; (2850 <pm_system_resume+0x114>)
    27fc:	f004 ff40 	bl	7680 <z_spin_unlock_valid>
    2800:	b170      	cbz	r0, 2820 <pm_system_resume+0xe4>
	__asm__ volatile(
    2802:	f386 8811 	msr	BASEPRI, r6
    2806:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    280a:	4a0f      	ldr	r2, [pc, #60]	; (2848 <pm_system_resume+0x10c>)
    280c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    2810:	00a9      	lsls	r1, r5, #2
    2812:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2816:	2300      	movs	r3, #0
    2818:	5053      	str	r3, [r2, r1]
    281a:	606b      	str	r3, [r5, #4]
    281c:	60ab      	str	r3, [r5, #8]
}
    281e:	e7a7      	b.n	2770 <pm_system_resume+0x34>
    2820:	4c0d      	ldr	r4, [pc, #52]	; (2858 <pm_system_resume+0x11c>)
    2822:	23b9      	movs	r3, #185	; 0xb9
    2824:	4622      	mov	r2, r4
    2826:	4910      	ldr	r1, [pc, #64]	; (2868 <pm_system_resume+0x12c>)
    2828:	480d      	ldr	r0, [pc, #52]	; (2860 <pm_system_resume+0x124>)
    282a:	f008 f87d 	bl	a928 <assert_print>
    282e:	4908      	ldr	r1, [pc, #32]	; (2850 <pm_system_resume+0x114>)
    2830:	480e      	ldr	r0, [pc, #56]	; (286c <pm_system_resume+0x130>)
    2832:	f008 f879 	bl	a928 <assert_print>
    2836:	21b9      	movs	r1, #185	; 0xb9
    2838:	4620      	mov	r0, r4
    283a:	f008 f86e 	bl	a91a <assert_post_action>
    283e:	e7e0      	b.n	2802 <pm_system_resume+0xc6>
    2840:	200050ac 	.word	0x200050ac
    2844:	20004604 	.word	0x20004604
    2848:	200045f4 	.word	0x200045f4
    284c:	0000ac13 	.word	0x0000ac13
    2850:	200045e8 	.word	0x200045e8
    2854:	200045ec 	.word	0x200045ec
    2858:	0000c440 	.word	0x0000c440
    285c:	0000c4a0 	.word	0x0000c4a0
    2860:	0000c294 	.word	0x0000c294
    2864:	0000c4b8 	.word	0x0000c4b8
    2868:	0000c470 	.word	0x0000c470
    286c:	0000c488 	.word	0x0000c488

00002870 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2870:	b570      	push	{r4, r5, r6, lr}
    2872:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2874:	4b6d      	ldr	r3, [pc, #436]	; (2a2c <pm_system_suspend+0x1bc>)
    2876:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2878:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    287a:	f3bf 8f5b 	dmb	ish
    287e:	4b6c      	ldr	r3, [pc, #432]	; (2a30 <pm_system_suspend+0x1c0>)
    2880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2884:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    2888:	f005 021f 	and.w	r2, r5, #31
    288c:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    288e:	f013 0f01 	tst.w	r3, #1
    2892:	d01d      	beq.n	28d0 <pm_system_suspend+0x60>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2894:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    2898:	4a66      	ldr	r2, [pc, #408]	; (2a34 <pm_system_suspend+0x1c4>)
    289a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    289e:	b333      	cbz	r3, 28ee <pm_system_suspend+0x7e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    28a0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    28a4:	d139      	bne.n	291a <pm_system_suspend+0xaa>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    28a6:	f005 fd45 	bl	8334 <k_sched_lock>
	__asm__ volatile(
    28aa:	f04f 0320 	mov.w	r3, #32
    28ae:	f3ef 8611 	mrs	r6, BASEPRI
    28b2:	f383 8812 	msr	BASEPRI_MAX, r3
    28b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    28ba:	485f      	ldr	r0, [pc, #380]	; (2a38 <pm_system_suspend+0x1c8>)
    28bc:	f004 fed0 	bl	7660 <z_spin_lock_valid>
    28c0:	2800      	cmp	r0, #0
    28c2:	d040      	beq.n	2946 <pm_system_suspend+0xd6>
	z_spin_lock_set_owner(l);
    28c4:	485c      	ldr	r0, [pc, #368]	; (2a38 <pm_system_suspend+0x1c8>)
    28c6:	f004 feeb 	bl	76a0 <z_spin_lock_set_owner>
	return list->head;
    28ca:	4b5c      	ldr	r3, [pc, #368]	; (2a3c <pm_system_suspend+0x1cc>)
    28cc:	681c      	ldr	r4, [r3, #0]
    28ce:	e055      	b.n	297c <pm_system_suspend+0x10c>
		info = pm_policy_next_state(id, ticks);
    28d0:	4601      	mov	r1, r0
    28d2:	4628      	mov	r0, r5
    28d4:	f000 f8d6 	bl	2a84 <pm_policy_next_state>
		if (info != NULL) {
    28d8:	2800      	cmp	r0, #0
    28da:	d0db      	beq.n	2894 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    28dc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    28e0:	4a54      	ldr	r2, [pc, #336]	; (2a34 <pm_system_suspend+0x1c4>)
    28e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    28e6:	c807      	ldmia	r0, {r0, r1, r2}
    28e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    28ec:	e7d2      	b.n	2894 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    28ee:	f005 021f 	and.w	r2, r5, #31
    28f2:	2301      	movs	r3, #1
    28f4:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    28f6:	096d      	lsrs	r5, r5, #5
    28f8:	4a4d      	ldr	r2, [pc, #308]	; (2a30 <pm_system_suspend+0x1c0>)
    28fa:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    28fe:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2900:	f3bf 8f5b 	dmb	ish
    2904:	e855 2f00 	ldrex	r2, [r5]
    2908:	401a      	ands	r2, r3
    290a:	e845 2100 	strex	r1, r2, [r5]
    290e:	2900      	cmp	r1, #0
    2910:	d1f8      	bne.n	2904 <pm_system_suspend+0x94>
    2912:	f3bf 8f5b 	dmb	ish
		ret = false;
    2916:	2000      	movs	r0, #0
		goto end;
    2918:	e077      	b.n	2a0a <pm_system_suspend+0x19a>
		     k_us_to_ticks_ceil32(
    291a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    291e:	4a45      	ldr	r2, [pc, #276]	; (2a34 <pm_system_suspend+0x1c4>)
    2920:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2924:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2926:	0c41      	lsrs	r1, r0, #17
    2928:	03c0      	lsls	r0, r0, #15
    292a:	4b45      	ldr	r3, [pc, #276]	; (2a40 <pm_system_suspend+0x1d0>)
    292c:	18c0      	adds	r0, r0, r3
    292e:	4a45      	ldr	r2, [pc, #276]	; (2a44 <pm_system_suspend+0x1d4>)
    2930:	f04f 0300 	mov.w	r3, #0
    2934:	f141 0100 	adc.w	r1, r1, #0
    2938:	f7fd fbe2 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    293c:	2101      	movs	r1, #1
    293e:	1a20      	subs	r0, r4, r0
    2940:	f007 f888 	bl	9a54 <z_set_timeout_expiry>
    2944:	e7af      	b.n	28a6 <pm_system_suspend+0x36>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2946:	4c40      	ldr	r4, [pc, #256]	; (2a48 <pm_system_suspend+0x1d8>)
    2948:	238e      	movs	r3, #142	; 0x8e
    294a:	4622      	mov	r2, r4
    294c:	493f      	ldr	r1, [pc, #252]	; (2a4c <pm_system_suspend+0x1dc>)
    294e:	4840      	ldr	r0, [pc, #256]	; (2a50 <pm_system_suspend+0x1e0>)
    2950:	f007 ffea 	bl	a928 <assert_print>
    2954:	4938      	ldr	r1, [pc, #224]	; (2a38 <pm_system_suspend+0x1c8>)
    2956:	483f      	ldr	r0, [pc, #252]	; (2a54 <pm_system_suspend+0x1e4>)
    2958:	f007 ffe6 	bl	a928 <assert_print>
    295c:	218e      	movs	r1, #142	; 0x8e
    295e:	4620      	mov	r0, r4
    2960:	f007 ffdb 	bl	a91a <assert_post_action>
    2964:	e7ae      	b.n	28c4 <pm_system_suspend+0x54>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2966:	4b31      	ldr	r3, [pc, #196]	; (2a2c <pm_system_suspend+0x1bc>)
    2968:	7d1b      	ldrb	r3, [r3, #20]
    296a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    296e:	4931      	ldr	r1, [pc, #196]	; (2a34 <pm_system_suspend+0x1c4>)
    2970:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    2974:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    2976:	b10c      	cbz	r4, 297c <pm_system_suspend+0x10c>
	return node->next;
    2978:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    297a:	b124      	cbz	r4, 2986 <pm_system_suspend+0x116>
    297c:	b11c      	cbz	r4, 2986 <pm_system_suspend+0x116>
			callback = notifier->state_entry;
    297e:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    2980:	2a00      	cmp	r2, #0
    2982:	d1f0      	bne.n	2966 <pm_system_suspend+0xf6>
    2984:	e7f7      	b.n	2976 <pm_system_suspend+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2986:	482c      	ldr	r0, [pc, #176]	; (2a38 <pm_system_suspend+0x1c8>)
    2988:	f004 fe7a 	bl	7680 <z_spin_unlock_valid>
    298c:	2800      	cmp	r0, #0
    298e:	d03d      	beq.n	2a0c <pm_system_suspend+0x19c>
	__asm__ volatile(
    2990:	f386 8811 	msr	BASEPRI, r6
    2994:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2998:	f005 031f 	and.w	r3, r5, #31
    299c:	2101      	movs	r1, #1
    299e:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    29a0:	096b      	lsrs	r3, r5, #5
    29a2:	4a2d      	ldr	r2, [pc, #180]	; (2a58 <pm_system_suspend+0x1e8>)
    29a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    29a8:	f3bf 8f5b 	dmb	ish
    29ac:	e853 2f00 	ldrex	r2, [r3]
    29b0:	430a      	orrs	r2, r1
    29b2:	e843 2000 	strex	r0, r2, [r3]
    29b6:	2800      	cmp	r0, #0
    29b8:	d1f8      	bne.n	29ac <pm_system_suspend+0x13c>
    29ba:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    29be:	4b27      	ldr	r3, [pc, #156]	; (2a5c <pm_system_suspend+0x1ec>)
    29c0:	b14b      	cbz	r3, 29d6 <pm_system_suspend+0x166>
		pm_state_set(info->state, info->substate_id);
    29c2:	4b1c      	ldr	r3, [pc, #112]	; (2a34 <pm_system_suspend+0x1c4>)
    29c4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    29c8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    29cc:	7849      	ldrb	r1, [r1, #1]
    29ce:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    29d2:	f008 f912 	bl	abfa <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    29d6:	f7ff feb1 	bl	273c <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    29da:	f005 031f 	and.w	r3, r5, #31
    29de:	2401      	movs	r4, #1
    29e0:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    29e4:	096d      	lsrs	r5, r5, #5
    29e6:	4a12      	ldr	r2, [pc, #72]	; (2a30 <pm_system_suspend+0x1c0>)
    29e8:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    29ec:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    29ee:	f3bf 8f5b 	dmb	ish
    29f2:	e855 2f00 	ldrex	r2, [r5]
    29f6:	401a      	ands	r2, r3
    29f8:	e845 2100 	strex	r1, r2, [r5]
    29fc:	2900      	cmp	r1, #0
    29fe:	d1f8      	bne.n	29f2 <pm_system_suspend+0x182>
    2a00:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    2a04:	f006 fa22 	bl	8e4c <k_sched_unlock>
	bool ret = true;
    2a08:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    2a0a:	bd70      	pop	{r4, r5, r6, pc}
    2a0c:	4c0e      	ldr	r4, [pc, #56]	; (2a48 <pm_system_suspend+0x1d8>)
    2a0e:	23b9      	movs	r3, #185	; 0xb9
    2a10:	4622      	mov	r2, r4
    2a12:	4913      	ldr	r1, [pc, #76]	; (2a60 <pm_system_suspend+0x1f0>)
    2a14:	480e      	ldr	r0, [pc, #56]	; (2a50 <pm_system_suspend+0x1e0>)
    2a16:	f007 ff87 	bl	a928 <assert_print>
    2a1a:	4907      	ldr	r1, [pc, #28]	; (2a38 <pm_system_suspend+0x1c8>)
    2a1c:	4811      	ldr	r0, [pc, #68]	; (2a64 <pm_system_suspend+0x1f4>)
    2a1e:	f007 ff83 	bl	a928 <assert_print>
    2a22:	21b9      	movs	r1, #185	; 0xb9
    2a24:	4620      	mov	r0, r4
    2a26:	f007 ff78 	bl	a91a <assert_post_action>
    2a2a:	e7b1      	b.n	2990 <pm_system_suspend+0x120>
    2a2c:	200050ac 	.word	0x200050ac
    2a30:	20004600 	.word	0x20004600
    2a34:	200045f4 	.word	0x200045f4
    2a38:	200045e8 	.word	0x200045e8
    2a3c:	200045ec 	.word	0x200045ec
    2a40:	000f423f 	.word	0x000f423f
    2a44:	000f4240 	.word	0x000f4240
    2a48:	0000c440 	.word	0x0000c440
    2a4c:	0000c4a0 	.word	0x0000c4a0
    2a50:	0000c294 	.word	0x0000c294
    2a54:	0000c4b8 	.word	0x0000c4b8
    2a58:	20004604 	.word	0x20004604
    2a5c:	0000abfb 	.word	0x0000abfb
    2a60:	0000c470 	.word	0x0000c470
    2a64:	0000c488 	.word	0x0000c488

00002a68 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2a68:	f3bf 8f5b 	dmb	ish
    2a6c:	4b04      	ldr	r3, [pc, #16]	; (2a80 <pm_policy_state_lock_is_active+0x18>)
    2a6e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2a72:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    2a76:	3800      	subs	r0, #0
    2a78:	bf18      	it	ne
    2a7a:	2001      	movne	r0, #1
    2a7c:	4770      	bx	lr
    2a7e:	bf00      	nop
    2a80:	20004608 	.word	0x20004608

00002a84 <pm_policy_next_state>:
{
    2a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a88:	b082      	sub	sp, #8
    2a8a:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2a8c:	a901      	add	r1, sp, #4
    2a8e:	f000 f843 	bl	2b18 <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2a92:	1e44      	subs	r4, r0, #1
    2a94:	b224      	sxth	r4, r4
    2a96:	e007      	b.n	2aa8 <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    2a98:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    2a9c:	d032      	beq.n	2b04 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    2a9e:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    2aa0:	42b0      	cmp	r0, r6
    2aa2:	d92f      	bls.n	2b04 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2aa4:	3c01      	subs	r4, #1
    2aa6:	b224      	sxth	r4, r4
    2aa8:	2c00      	cmp	r4, #0
    2aaa:	db2a      	blt.n	2b02 <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    2aac:	9b01      	ldr	r3, [sp, #4]
    2aae:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2ab2:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    2ab6:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    2aba:	f7ff ffd5 	bl	2a68 <pm_policy_state_lock_is_active>
    2abe:	2800      	cmp	r0, #0
    2ac0:	d1f0      	bne.n	2aa4 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    2ac2:	6868      	ldr	r0, [r5, #4]
    2ac4:	0c41      	lsrs	r1, r0, #17
    2ac6:	03c0      	lsls	r0, r0, #15
    2ac8:	4f10      	ldr	r7, [pc, #64]	; (2b0c <pm_policy_next_state+0x88>)
    2aca:	19c0      	adds	r0, r0, r7
    2acc:	4a10      	ldr	r2, [pc, #64]	; (2b10 <pm_policy_next_state+0x8c>)
    2ace:	f04f 0300 	mov.w	r3, #0
    2ad2:	f141 0100 	adc.w	r1, r1, #0
    2ad6:	f7fd fb13 	bl	100 <__aeabi_uldivmod>
    2ada:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    2adc:	68ab      	ldr	r3, [r5, #8]
    2ade:	0c59      	lsrs	r1, r3, #17
    2ae0:	03db      	lsls	r3, r3, #15
    2ae2:	19d8      	adds	r0, r3, r7
    2ae4:	4a0a      	ldr	r2, [pc, #40]	; (2b10 <pm_policy_next_state+0x8c>)
    2ae6:	f04f 0300 	mov.w	r3, #0
    2aea:	f141 0100 	adc.w	r1, r1, #0
    2aee:	f7fd fb07 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2af2:	4b08      	ldr	r3, [pc, #32]	; (2b14 <pm_policy_next_state+0x90>)
    2af4:	681b      	ldr	r3, [r3, #0]
    2af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2afa:	d0cd      	beq.n	2a98 <pm_policy_next_state+0x14>
    2afc:	4283      	cmp	r3, r0
    2afe:	d8cb      	bhi.n	2a98 <pm_policy_next_state+0x14>
    2b00:	e7d0      	b.n	2aa4 <pm_policy_next_state+0x20>
	return NULL;
    2b02:	2500      	movs	r5, #0
}
    2b04:	4628      	mov	r0, r5
    2b06:	b002      	add	sp, #8
    2b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b0c:	000f423f 	.word	0x000f423f
    2b10:	000f4240 	.word	0x000f4240
    2b14:	20004008 	.word	0x20004008

00002b18 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2b18:	b908      	cbnz	r0, 2b1e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2b1a:	4b02      	ldr	r3, [pc, #8]	; (2b24 <pm_state_cpu_get_all+0xc>)
    2b1c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2b1e:	2000      	movs	r0, #0
    2b20:	4770      	bx	lr
    2b22:	bf00      	nop
    2b24:	0000ca40 	.word	0x0000ca40

00002b28 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    2b28:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    2b2a:	4802      	ldr	r0, [pc, #8]	; (2b34 <nrf_cc3xx_platform_abort_init+0xc>)
    2b2c:	f007 fb48 	bl	a1c0 <nrf_cc3xx_platform_set_abort>
}
    2b30:	bd08      	pop	{r3, pc}
    2b32:	bf00      	nop
    2b34:	0000ca40 	.word	0x0000ca40

00002b38 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2b38:	b1d0      	cbz	r0, 2b70 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2b3a:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2b3c:	6842      	ldr	r2, [r0, #4]
    2b3e:	2a04      	cmp	r2, #4
    2b40:	d005      	beq.n	2b4e <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2b42:	b1d2      	cbz	r2, 2b7a <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    2b44:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    2b46:	f005 f8eb 	bl	7d20 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2b4a:	2000      	movs	r0, #0
    }
}
    2b4c:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    2b4e:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2b50:	2200      	movs	r2, #0
    2b52:	f3bf 8f5b 	dmb	ish
    2b56:	e853 1f00 	ldrex	r1, [r3]
    2b5a:	2901      	cmp	r1, #1
    2b5c:	d103      	bne.n	2b66 <mutex_unlock_platform+0x2e>
    2b5e:	e843 2000 	strex	r0, r2, [r3]
    2b62:	2800      	cmp	r0, #0
    2b64:	d1f7      	bne.n	2b56 <mutex_unlock_platform+0x1e>
    2b66:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2b6a:	d104      	bne.n	2b76 <mutex_unlock_platform+0x3e>
    2b6c:	4610      	mov	r0, r2
    2b6e:	e7ed      	b.n	2b4c <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2b70:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2b74:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2b76:	4802      	ldr	r0, [pc, #8]	; (2b80 <mutex_unlock_platform+0x48>)
    2b78:	e7e8      	b.n	2b4c <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2b7a:	4802      	ldr	r0, [pc, #8]	; (2b84 <mutex_unlock_platform+0x4c>)
    2b7c:	e7e6      	b.n	2b4c <mutex_unlock_platform+0x14>
    2b7e:	bf00      	nop
    2b80:	ffff8fe9 	.word	0xffff8fe9
    2b84:	ffff8fea 	.word	0xffff8fea

00002b88 <mutex_lock_platform>:
    if(mutex == NULL) {
    2b88:	b320      	cbz	r0, 2bd4 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2b8a:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    2b8c:	6842      	ldr	r2, [r0, #4]
    2b8e:	2a04      	cmp	r2, #4
    2b90:	d002      	beq.n	2b98 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2b92:	b992      	cbnz	r2, 2bba <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2b94:	4811      	ldr	r0, [pc, #68]	; (2bdc <mutex_lock_platform+0x54>)
    2b96:	e00f      	b.n	2bb8 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    2b98:	6803      	ldr	r3, [r0, #0]
    2b9a:	2201      	movs	r2, #1
    2b9c:	f3bf 8f5b 	dmb	ish
    2ba0:	e853 1f00 	ldrex	r1, [r3]
    2ba4:	2900      	cmp	r1, #0
    2ba6:	d103      	bne.n	2bb0 <mutex_lock_platform+0x28>
    2ba8:	e843 2000 	strex	r0, r2, [r3]
    2bac:	2800      	cmp	r0, #0
    2bae:	d1f7      	bne.n	2ba0 <mutex_lock_platform+0x18>
    2bb0:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2bb4:	d10c      	bne.n	2bd0 <mutex_lock_platform+0x48>
    2bb6:	2000      	movs	r0, #0
}
    2bb8:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    2bba:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2bc4:	f004 ff8c 	bl	7ae0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2bc8:	2800      	cmp	r0, #0
    2bca:	d0f5      	beq.n	2bb8 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    2bcc:	4804      	ldr	r0, [pc, #16]	; (2be0 <mutex_lock_platform+0x58>)
    2bce:	e7f3      	b.n	2bb8 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2bd0:	4803      	ldr	r0, [pc, #12]	; (2be0 <mutex_lock_platform+0x58>)
    2bd2:	e7f1      	b.n	2bb8 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2bd4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2bd8:	4770      	bx	lr
    2bda:	bf00      	nop
    2bdc:	ffff8fea 	.word	0xffff8fea
    2be0:	ffff8fe9 	.word	0xffff8fe9

00002be4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2be4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2be6:	4604      	mov	r4, r0
    2be8:	b190      	cbz	r0, 2c10 <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2bea:	6863      	ldr	r3, [r4, #4]
    2bec:	2b04      	cmp	r3, #4
    2bee:	d00e      	beq.n	2c0e <mutex_free_platform+0x2a>
    2bf0:	2b08      	cmp	r3, #8
    2bf2:	d00c      	beq.n	2c0e <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2bf4:	b15b      	cbz	r3, 2c0e <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2bf6:	f013 0f02 	tst.w	r3, #2
    2bfa:	d10e      	bne.n	2c1a <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2bfc:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    2bfe:	2200      	movs	r2, #0
    2c00:	601a      	str	r2, [r3, #0]
    2c02:	605a      	str	r2, [r3, #4]
    2c04:	609a      	str	r2, [r3, #8]
    2c06:	60da      	str	r2, [r3, #12]
    2c08:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2c0a:	2300      	movs	r3, #0
    2c0c:	6063      	str	r3, [r4, #4]
}
    2c0e:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    2c10:	4b05      	ldr	r3, [pc, #20]	; (2c28 <mutex_free_platform+0x44>)
    2c12:	685b      	ldr	r3, [r3, #4]
    2c14:	4805      	ldr	r0, [pc, #20]	; (2c2c <mutex_free_platform+0x48>)
    2c16:	4798      	blx	r3
    2c18:	e7e7      	b.n	2bea <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2c1a:	4621      	mov	r1, r4
    2c1c:	4804      	ldr	r0, [pc, #16]	; (2c30 <mutex_free_platform+0x4c>)
    2c1e:	f004 fca9 	bl	7574 <k_mem_slab_free>
        mutex->mutex = NULL;
    2c22:	2300      	movs	r3, #0
    2c24:	6023      	str	r3, [r4, #0]
    2c26:	e7f0      	b.n	2c0a <mutex_free_platform+0x26>
    2c28:	20004150 	.word	0x20004150
    2c2c:	0000ca48 	.word	0x0000ca48
    2c30:	20004624 	.word	0x20004624

00002c34 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2c34:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2c36:	4604      	mov	r4, r0
    2c38:	b178      	cbz	r0, 2c5a <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2c3a:	6863      	ldr	r3, [r4, #4]
    2c3c:	2b04      	cmp	r3, #4
    2c3e:	d00b      	beq.n	2c58 <mutex_init_platform+0x24>
    2c40:	2b08      	cmp	r3, #8
    2c42:	d009      	beq.n	2c58 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2c44:	b90b      	cbnz	r3, 2c4a <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    2c46:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2c48:	b163      	cbz	r3, 2c64 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    2c4a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2c4c:	f009 f819 	bl	bc82 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2c50:	6863      	ldr	r3, [r4, #4]
    2c52:	f043 0301 	orr.w	r3, r3, #1
    2c56:	6063      	str	r3, [r4, #4]
}
    2c58:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    2c5a:	4b10      	ldr	r3, [pc, #64]	; (2c9c <mutex_init_platform+0x68>)
    2c5c:	685b      	ldr	r3, [r3, #4]
    2c5e:	4810      	ldr	r0, [pc, #64]	; (2ca0 <mutex_init_platform+0x6c>)
    2c60:	4798      	blx	r3
    2c62:	e7ea      	b.n	2c3a <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c6c:	4621      	mov	r1, r4
    2c6e:	480d      	ldr	r0, [pc, #52]	; (2ca4 <mutex_init_platform+0x70>)
    2c70:	f004 fc0a 	bl	7488 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2c74:	b908      	cbnz	r0, 2c7a <mutex_init_platform+0x46>
    2c76:	6823      	ldr	r3, [r4, #0]
    2c78:	b91b      	cbnz	r3, 2c82 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    2c7a:	4b08      	ldr	r3, [pc, #32]	; (2c9c <mutex_init_platform+0x68>)
    2c7c:	685b      	ldr	r3, [r3, #4]
    2c7e:	480a      	ldr	r0, [pc, #40]	; (2ca8 <mutex_init_platform+0x74>)
    2c80:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2c82:	6823      	ldr	r3, [r4, #0]
    2c84:	2200      	movs	r2, #0
    2c86:	601a      	str	r2, [r3, #0]
    2c88:	605a      	str	r2, [r3, #4]
    2c8a:	609a      	str	r2, [r3, #8]
    2c8c:	60da      	str	r2, [r3, #12]
    2c8e:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2c90:	6863      	ldr	r3, [r4, #4]
    2c92:	f043 0302 	orr.w	r3, r3, #2
    2c96:	6063      	str	r3, [r4, #4]
    2c98:	e7d7      	b.n	2c4a <mutex_init_platform+0x16>
    2c9a:	bf00      	nop
    2c9c:	20004150 	.word	0x20004150
    2ca0:	0000ca48 	.word	0x0000ca48
    2ca4:	20004624 	.word	0x20004624
    2ca8:	0000ca70 	.word	0x0000ca70

00002cac <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2cac:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2cae:	2340      	movs	r3, #64	; 0x40
    2cb0:	2214      	movs	r2, #20
    2cb2:	4904      	ldr	r1, [pc, #16]	; (2cc4 <nrf_cc3xx_platform_mutex_init+0x18>)
    2cb4:	4804      	ldr	r0, [pc, #16]	; (2cc8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    2cb6:	f008 ff90 	bl	bbda <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2cba:	4904      	ldr	r1, [pc, #16]	; (2ccc <nrf_cc3xx_platform_mutex_init+0x20>)
    2cbc:	4804      	ldr	r0, [pc, #16]	; (2cd0 <nrf_cc3xx_platform_mutex_init+0x24>)
    2cbe:	f007 fadf 	bl	a280 <nrf_cc3xx_platform_set_mutexes>
}
    2cc2:	bd08      	pop	{r3, pc}
    2cc4:	20004644 	.word	0x20004644
    2cc8:	20004624 	.word	0x20004624
    2ccc:	0000cab0 	.word	0x0000cab0
    2cd0:	0000caa0 	.word	0x0000caa0

00002cd4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2cd4:	4901      	ldr	r1, [pc, #4]	; (2cdc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2cd6:	2210      	movs	r2, #16
	str	r2, [r1]
    2cd8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2cda:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2cdc:	e000ed10 	.word	0xe000ed10

00002ce0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2ce0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2ce2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2ce4:	f380 8811 	msr	BASEPRI, r0
	isb
    2ce8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2cec:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2cf0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2cf2:	b662      	cpsie	i
	isb
    2cf4:	f3bf 8f6f 	isb	sy

	bx	lr
    2cf8:	4770      	bx	lr
    2cfa:	bf00      	nop

00002cfc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2cfc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2cfe:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2d00:	f381 8811 	msr	BASEPRI, r1

	wfe
    2d04:	bf20      	wfe

	msr	BASEPRI, r0
    2d06:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2d0a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2d0c:	4770      	bx	lr
    2d0e:	bf00      	nop

00002d10 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    2d10:	b570      	push	{r4, r5, r6, lr}
    2d12:	b086      	sub	sp, #24
    2d14:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2d16:	4e1e      	ldr	r6, [pc, #120]	; (2d90 <esf_dump+0x80>)
    2d18:	6883      	ldr	r3, [r0, #8]
    2d1a:	9305      	str	r3, [sp, #20]
    2d1c:	6843      	ldr	r3, [r0, #4]
    2d1e:	9304      	str	r3, [sp, #16]
    2d20:	6803      	ldr	r3, [r0, #0]
    2d22:	9303      	str	r3, [sp, #12]
    2d24:	4b1b      	ldr	r3, [pc, #108]	; (2d94 <esf_dump+0x84>)
    2d26:	9302      	str	r3, [sp, #8]
    2d28:	2400      	movs	r4, #0
    2d2a:	9401      	str	r4, [sp, #4]
    2d2c:	9400      	str	r4, [sp, #0]
    2d2e:	4623      	mov	r3, r4
    2d30:	2201      	movs	r2, #1
    2d32:	4631      	mov	r1, r6
    2d34:	4620      	mov	r0, r4
    2d36:	f007 feab 	bl	aa90 <z_log_msg2_runtime_create>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2d3a:	696b      	ldr	r3, [r5, #20]
    2d3c:	9305      	str	r3, [sp, #20]
    2d3e:	692b      	ldr	r3, [r5, #16]
    2d40:	9304      	str	r3, [sp, #16]
    2d42:	68eb      	ldr	r3, [r5, #12]
    2d44:	9303      	str	r3, [sp, #12]
    2d46:	4b14      	ldr	r3, [pc, #80]	; (2d98 <esf_dump+0x88>)
    2d48:	9302      	str	r3, [sp, #8]
    2d4a:	9401      	str	r4, [sp, #4]
    2d4c:	9400      	str	r4, [sp, #0]
    2d4e:	4623      	mov	r3, r4
    2d50:	2201      	movs	r2, #1
    2d52:	4631      	mov	r1, r6
    2d54:	4620      	mov	r0, r4
    2d56:	f007 fe9b 	bl	aa90 <z_log_msg2_runtime_create>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2d5a:	69eb      	ldr	r3, [r5, #28]
    2d5c:	9303      	str	r3, [sp, #12]
    2d5e:	4b0f      	ldr	r3, [pc, #60]	; (2d9c <esf_dump+0x8c>)
    2d60:	9302      	str	r3, [sp, #8]
    2d62:	9401      	str	r4, [sp, #4]
    2d64:	9400      	str	r4, [sp, #0]
    2d66:	4623      	mov	r3, r4
    2d68:	2201      	movs	r2, #1
    2d6a:	4631      	mov	r1, r6
    2d6c:	4620      	mov	r0, r4
    2d6e:	f007 fe8f 	bl	aa90 <z_log_msg2_runtime_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2d72:	69ab      	ldr	r3, [r5, #24]
    2d74:	9303      	str	r3, [sp, #12]
    2d76:	4b0a      	ldr	r3, [pc, #40]	; (2da0 <esf_dump+0x90>)
    2d78:	9302      	str	r3, [sp, #8]
    2d7a:	9401      	str	r4, [sp, #4]
    2d7c:	9400      	str	r4, [sp, #0]
    2d7e:	4623      	mov	r3, r4
    2d80:	2201      	movs	r2, #1
    2d82:	4631      	mov	r1, r6
    2d84:	4620      	mov	r0, r4
    2d86:	f007 fe83 	bl	aa90 <z_log_msg2_runtime_create>
		esf->basic.pc);
}
    2d8a:	b006      	add	sp, #24
    2d8c:	bd70      	pop	{r4, r5, r6, pc}
    2d8e:	bf00      	nop
    2d90:	0000c0b4 	.word	0x0000c0b4
    2d94:	0000cac4 	.word	0x0000cac4
    2d98:	0000caf4 	.word	0x0000caf4
    2d9c:	0000cb24 	.word	0x0000cb24
    2da0:	0000cb34 	.word	0x0000cb34

00002da4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2da4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2da6:	2800      	cmp	r0, #0
    2da8:	db07      	blt.n	2dba <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2daa:	f000 021f 	and.w	r2, r0, #31
    2dae:	0940      	lsrs	r0, r0, #5
    2db0:	2301      	movs	r3, #1
    2db2:	4093      	lsls	r3, r2
    2db4:	4a01      	ldr	r2, [pc, #4]	; (2dbc <arch_irq_enable+0x18>)
    2db6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    2dba:	4770      	bx	lr
    2dbc:	e000e100 	.word	0xe000e100

00002dc0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2dc0:	0942      	lsrs	r2, r0, #5
    2dc2:	4b05      	ldr	r3, [pc, #20]	; (2dd8 <arch_irq_is_enabled+0x18>)
    2dc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2dc8:	f000 001f 	and.w	r0, r0, #31
    2dcc:	2301      	movs	r3, #1
    2dce:	fa03 f000 	lsl.w	r0, r3, r0
}
    2dd2:	4010      	ands	r0, r2
    2dd4:	4770      	bx	lr
    2dd6:	bf00      	nop
    2dd8:	e000e100 	.word	0xe000e100

00002ddc <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    2ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dde:	4604      	mov	r4, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2de0:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2de2:	2d07      	cmp	r5, #7
    2de4:	d80b      	bhi.n	2dfe <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2de6:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2de8:	2800      	cmp	r0, #0
    2dea:	db1b      	blt.n	2e24 <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2dec:	016d      	lsls	r5, r5, #5
    2dee:	b2ed      	uxtb	r5, r5
    2df0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    2df4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    2df8:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    2dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dfe:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2e00:	4f0c      	ldr	r7, [pc, #48]	; (2e34 <z_arm_irq_priority_set+0x58>)
    2e02:	2357      	movs	r3, #87	; 0x57
    2e04:	463a      	mov	r2, r7
    2e06:	490c      	ldr	r1, [pc, #48]	; (2e38 <z_arm_irq_priority_set+0x5c>)
    2e08:	480c      	ldr	r0, [pc, #48]	; (2e3c <z_arm_irq_priority_set+0x60>)
    2e0a:	f007 fd8d 	bl	a928 <assert_print>
    2e0e:	2307      	movs	r3, #7
    2e10:	4622      	mov	r2, r4
    2e12:	4631      	mov	r1, r6
    2e14:	480a      	ldr	r0, [pc, #40]	; (2e40 <z_arm_irq_priority_set+0x64>)
    2e16:	f007 fd87 	bl	a928 <assert_print>
    2e1a:	2157      	movs	r1, #87	; 0x57
    2e1c:	4638      	mov	r0, r7
    2e1e:	f007 fd7c 	bl	a91a <assert_post_action>
    2e22:	e7e0      	b.n	2de6 <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e24:	f000 000f 	and.w	r0, r0, #15
    2e28:	016d      	lsls	r5, r5, #5
    2e2a:	b2ed      	uxtb	r5, r5
    2e2c:	4b05      	ldr	r3, [pc, #20]	; (2e44 <z_arm_irq_priority_set+0x68>)
    2e2e:	541d      	strb	r5, [r3, r0]
}
    2e30:	e7e4      	b.n	2dfc <z_arm_irq_priority_set+0x20>
    2e32:	bf00      	nop
    2e34:	0000cb64 	.word	0x0000cb64
    2e38:	0000cb9c 	.word	0x0000cb9c
    2e3c:	0000c294 	.word	0x0000c294
    2e40:	0000cbb8 	.word	0x0000cbb8
    2e44:	e000ed14 	.word	0xe000ed14

00002e48 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2e48:	bf30      	wfi
    b z_SysNmiOnReset
    2e4a:	f7ff bffd 	b.w	2e48 <z_SysNmiOnReset>
    2e4e:	bf00      	nop

00002e50 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2e50:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2e52:	4b0b      	ldr	r3, [pc, #44]	; (2e80 <z_arm_prep_c+0x30>)
    2e54:	4a0b      	ldr	r2, [pc, #44]	; (2e84 <z_arm_prep_c+0x34>)
    2e56:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2e5a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2e5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2e60:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2e64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2e68:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2e70:	f004 fa36 	bl	72e0 <z_bss_zero>
	z_data_copy();
    2e74:	f006 fbfc 	bl	9670 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2e78:	f000 fc72 	bl	3760 <z_arm_interrupt_init>
	z_cstart();
    2e7c:	f004 fa8e 	bl	739c <z_cstart>
    2e80:	e000ed00 	.word	0xe000ed00
    2e84:	00000000 	.word	0x00000000

00002e88 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2e88:	4a0a      	ldr	r2, [pc, #40]	; (2eb4 <arch_swap+0x2c>)
    2e8a:	6893      	ldr	r3, [r2, #8]
    2e8c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    2e90:	4909      	ldr	r1, [pc, #36]	; (2eb8 <arch_swap+0x30>)
    2e92:	6809      	ldr	r1, [r1, #0]
    2e94:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2e98:	4908      	ldr	r1, [pc, #32]	; (2ebc <arch_swap+0x34>)
    2e9a:	684b      	ldr	r3, [r1, #4]
    2e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2ea0:	604b      	str	r3, [r1, #4]
    2ea2:	2300      	movs	r3, #0
    2ea4:	f383 8811 	msr	BASEPRI, r3
    2ea8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2eac:	6893      	ldr	r3, [r2, #8]
}
    2eae:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    2eb2:	4770      	bx	lr
    2eb4:	200050ac 	.word	0x200050ac
    2eb8:	0000d8b4 	.word	0x0000d8b4
    2ebc:	e000ed00 	.word	0xe000ed00

00002ec0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2ec0:	4913      	ldr	r1, [pc, #76]	; (2f10 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2ec2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2ec4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2ec8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2eca:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2ece:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2ed2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2ed4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2ed8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2edc:	4f0d      	ldr	r7, [pc, #52]	; (2f14 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2ede:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2ee2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2ee4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2ee6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2ee8:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    2eec:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2eee:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2ef2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2ef6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2ef8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2efa:	f000 fcdb 	bl	38b4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2efe:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2f02:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2f06:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2f0a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2f0e:	4770      	bx	lr
    ldr r1, =_kernel
    2f10:	200050ac 	.word	0x200050ac
    ldr v4, =_SCS_ICSR
    2f14:	e000ed04 	.word	0xe000ed04

00002f18 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2f18:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2f1c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2f1e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2f22:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2f26:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2f28:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2f2c:	2902      	cmp	r1, #2
    beq _oops
    2f2e:	d0ff      	beq.n	2f30 <_oops>

00002f30 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2f30:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2f32:	f007 fdc8 	bl	aac6 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2f36:	bd01      	pop	{r0, pc}

00002f38 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    2f38:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2f3a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    2f3e:	490e      	ldr	r1, [pc, #56]	; (2f78 <arch_new_thread+0x40>)
    2f40:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    2f44:	f021 0101 	bic.w	r1, r1, #1
    2f48:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    2f4c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2f50:	9b01      	ldr	r3, [sp, #4]
    2f52:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2f56:	9b02      	ldr	r3, [sp, #8]
    2f58:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2f5c:	9b03      	ldr	r3, [sp, #12]
    2f5e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2f62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2f66:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    2f6a:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2f6c:	2300      	movs	r3, #0
    2f6e:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2f72:	bc10      	pop	{r4}
    2f74:	4770      	bx	lr
    2f76:	bf00      	nop
    2f78:	0000a86b 	.word	0x0000a86b

00002f7c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2f7c:	4b12      	ldr	r3, [pc, #72]	; (2fc8 <z_check_thread_stack_fail+0x4c>)
    2f7e:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    2f80:	b302      	cbz	r2, 2fc4 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2f82:	f110 0f16 	cmn.w	r0, #22
    2f86:	d011      	beq.n	2fac <z_check_thread_stack_fail+0x30>
    2f88:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    2f8c:	f1a3 0c20 	sub.w	ip, r3, #32
    2f90:	4584      	cmp	ip, r0
    2f92:	d805      	bhi.n	2fa0 <z_check_thread_stack_fail+0x24>
    2f94:	4283      	cmp	r3, r0
    2f96:	d905      	bls.n	2fa4 <z_check_thread_stack_fail+0x28>
    2f98:	428b      	cmp	r3, r1
    2f9a:	d805      	bhi.n	2fa8 <z_check_thread_stack_fail+0x2c>
    2f9c:	2100      	movs	r1, #0
    2f9e:	e00b      	b.n	2fb8 <z_check_thread_stack_fail+0x3c>
    2fa0:	2100      	movs	r1, #0
    2fa2:	e009      	b.n	2fb8 <z_check_thread_stack_fail+0x3c>
    2fa4:	2100      	movs	r1, #0
    2fa6:	e007      	b.n	2fb8 <z_check_thread_stack_fail+0x3c>
    2fa8:	2101      	movs	r1, #1
    2faa:	e005      	b.n	2fb8 <z_check_thread_stack_fail+0x3c>
    2fac:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    2fb0:	428b      	cmp	r3, r1
    2fb2:	bf94      	ite	ls
    2fb4:	2100      	movls	r1, #0
    2fb6:	2101      	movhi	r1, #1
    2fb8:	b909      	cbnz	r1, 2fbe <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2fba:	2000      	movs	r0, #0
}
    2fbc:	4770      	bx	lr
		return thread->stack_info.start;
    2fbe:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    2fc2:	4770      	bx	lr
		return 0;
    2fc4:	2000      	movs	r0, #0
    2fc6:	4770      	bx	lr
    2fc8:	200050ac 	.word	0x200050ac

00002fcc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2fcc:	b508      	push	{r3, lr}
    2fce:	460d      	mov	r5, r1
    2fd0:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2fd2:	4b08      	ldr	r3, [pc, #32]	; (2ff4 <arch_switch_to_main_thread+0x28>)
    2fd4:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2fd6:	f000 fc6d 	bl	38b4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2fda:	4620      	mov	r0, r4
    2fdc:	f385 8809 	msr	PSP, r5
    2fe0:	2100      	movs	r1, #0
    2fe2:	b663      	cpsie	if
    2fe4:	f381 8811 	msr	BASEPRI, r1
    2fe8:	f3bf 8f6f 	isb	sy
    2fec:	2200      	movs	r2, #0
    2fee:	2300      	movs	r3, #0
    2ff0:	f007 fc3b 	bl	a86a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2ff4:	200050ac 	.word	0x200050ac

00002ff8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2ff8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2ffa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2ffc:	4a0b      	ldr	r2, [pc, #44]	; (302c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2ffe:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3000:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3002:	bf1e      	ittt	ne
	movne	r1, #0
    3004:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3006:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3008:	f008 fe1f 	blne	bc4a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    300c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    300e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3012:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3016:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    301a:	4905      	ldr	r1, [pc, #20]	; (3030 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    301c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    301e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3020:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3022:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3026:	4903      	ldr	r1, [pc, #12]	; (3034 <_isr_wrapper+0x3c>)
	bx r1
    3028:	4708      	bx	r1
    302a:	0000      	.short	0x0000
	ldr r2, =_kernel
    302c:	200050ac 	.word	0x200050ac
	ldr r1, =_sw_isr_table
    3030:	0000bf0c 	.word	0x0000bf0c
	ldr r1, =z_arm_int_exit
    3034:	00003039 	.word	0x00003039

00003038 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3038:	4b04      	ldr	r3, [pc, #16]	; (304c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    303a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    303c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    303e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3040:	d003      	beq.n	304a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3042:	4903      	ldr	r1, [pc, #12]	; (3050 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3048:	600a      	str	r2, [r1, #0]

0000304a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    304a:	4770      	bx	lr
	ldr r3, =_kernel
    304c:	200050ac 	.word	0x200050ac
	ldr r1, =_SCS_ICSR
    3050:	e000ed04 	.word	0xe000ed04

00003054 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    3054:	b570      	push	{r4, r5, r6, lr}
    3056:	b084      	sub	sp, #16
    3058:	4605      	mov	r5, r0
    305a:	460e      	mov	r6, r1
    305c:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    305e:	4b47      	ldr	r3, [pc, #284]	; (317c <bus_fault+0x128>)
    3060:	9302      	str	r3, [sp, #8]
    3062:	2000      	movs	r0, #0
    3064:	9001      	str	r0, [sp, #4]
    3066:	9000      	str	r0, [sp, #0]
    3068:	4603      	mov	r3, r0
    306a:	2201      	movs	r2, #1
    306c:	4944      	ldr	r1, [pc, #272]	; (3180 <bus_fault+0x12c>)
    306e:	f007 fd3e 	bl	aaee <z_log_msg2_runtime_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3072:	4b44      	ldr	r3, [pc, #272]	; (3184 <bus_fault+0x130>)
    3074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3076:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    307a:	d125      	bne.n	30c8 <bus_fault+0x74>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    307c:	4b41      	ldr	r3, [pc, #260]	; (3184 <bus_fault+0x130>)
    307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3080:	f413 6f00 	tst.w	r3, #2048	; 0x800
    3084:	d12b      	bne.n	30de <bus_fault+0x8a>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3086:	4b3f      	ldr	r3, [pc, #252]	; (3184 <bus_fault+0x130>)
    3088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    308a:	f413 7f00 	tst.w	r3, #512	; 0x200
    308e:	d131      	bne.n	30f4 <bus_fault+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3090:	4b3c      	ldr	r3, [pc, #240]	; (3184 <bus_fault+0x130>)
    3092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3094:	f413 6f80 	tst.w	r3, #1024	; 0x400
    3098:	d14f      	bne.n	313a <bus_fault+0xe6>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    309a:	4b3a      	ldr	r3, [pc, #232]	; (3184 <bus_fault+0x130>)
    309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    309e:	f413 7f80 	tst.w	r3, #256	; 0x100
    30a2:	d155      	bne.n	3150 <bus_fault+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    30a4:	4b37      	ldr	r3, [pc, #220]	; (3184 <bus_fault+0x130>)
    30a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30a8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    30ac:	d15b      	bne.n	3166 <bus_fault+0x112>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    30ae:	4a35      	ldr	r2, [pc, #212]	; (3184 <bus_fault+0x130>)
    30b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    30b2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    30b6:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    30b8:	2101      	movs	r1, #1
    30ba:	4628      	mov	r0, r5
    30bc:	f007 fd15 	bl	aaea <memory_fault_recoverable>
    30c0:	7020      	strb	r0, [r4, #0]

	return reason;
}
    30c2:	2000      	movs	r0, #0
    30c4:	b004      	add	sp, #16
    30c6:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
    30c8:	4b2f      	ldr	r3, [pc, #188]	; (3188 <bus_fault+0x134>)
    30ca:	9302      	str	r3, [sp, #8]
    30cc:	2000      	movs	r0, #0
    30ce:	9001      	str	r0, [sp, #4]
    30d0:	9000      	str	r0, [sp, #0]
    30d2:	4603      	mov	r3, r0
    30d4:	2201      	movs	r2, #1
    30d6:	492a      	ldr	r1, [pc, #168]	; (3180 <bus_fault+0x12c>)
    30d8:	f007 fd09 	bl	aaee <z_log_msg2_runtime_create>
    30dc:	e7ce      	b.n	307c <bus_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    30de:	4b2b      	ldr	r3, [pc, #172]	; (318c <bus_fault+0x138>)
    30e0:	9302      	str	r3, [sp, #8]
    30e2:	2000      	movs	r0, #0
    30e4:	9001      	str	r0, [sp, #4]
    30e6:	9000      	str	r0, [sp, #0]
    30e8:	4603      	mov	r3, r0
    30ea:	2201      	movs	r2, #1
    30ec:	4924      	ldr	r1, [pc, #144]	; (3180 <bus_fault+0x12c>)
    30ee:	f007 fcfe 	bl	aaee <z_log_msg2_runtime_create>
    30f2:	e7c8      	b.n	3086 <bus_fault+0x32>
		PR_FAULT_INFO("  Precise data bus error");
    30f4:	4b26      	ldr	r3, [pc, #152]	; (3190 <bus_fault+0x13c>)
    30f6:	9302      	str	r3, [sp, #8]
    30f8:	2000      	movs	r0, #0
    30fa:	9001      	str	r0, [sp, #4]
    30fc:	9000      	str	r0, [sp, #0]
    30fe:	4603      	mov	r3, r0
    3100:	2201      	movs	r2, #1
    3102:	491f      	ldr	r1, [pc, #124]	; (3180 <bus_fault+0x12c>)
    3104:	f007 fcf3 	bl	aaee <z_log_msg2_runtime_create>
		STORE_xFAR(bfar, SCB->BFAR);
    3108:	4b1e      	ldr	r3, [pc, #120]	; (3184 <bus_fault+0x130>)
    310a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    310e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3112:	d0bd      	beq.n	3090 <bus_fault+0x3c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3114:	9203      	str	r2, [sp, #12]
    3116:	4b1f      	ldr	r3, [pc, #124]	; (3194 <bus_fault+0x140>)
    3118:	9302      	str	r3, [sp, #8]
    311a:	2000      	movs	r0, #0
    311c:	9001      	str	r0, [sp, #4]
    311e:	9000      	str	r0, [sp, #0]
    3120:	4603      	mov	r3, r0
    3122:	2201      	movs	r2, #1
    3124:	4916      	ldr	r1, [pc, #88]	; (3180 <bus_fault+0x12c>)
    3126:	f007 fce2 	bl	aaee <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    312a:	2e00      	cmp	r6, #0
    312c:	d0b0      	beq.n	3090 <bus_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    312e:	4a15      	ldr	r2, [pc, #84]	; (3184 <bus_fault+0x130>)
    3130:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3132:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3136:	6293      	str	r3, [r2, #40]	; 0x28
    3138:	e7aa      	b.n	3090 <bus_fault+0x3c>
		PR_FAULT_INFO("  Imprecise data bus error");
    313a:	4b17      	ldr	r3, [pc, #92]	; (3198 <bus_fault+0x144>)
    313c:	9302      	str	r3, [sp, #8]
    313e:	2000      	movs	r0, #0
    3140:	9001      	str	r0, [sp, #4]
    3142:	9000      	str	r0, [sp, #0]
    3144:	4603      	mov	r3, r0
    3146:	2201      	movs	r2, #1
    3148:	490d      	ldr	r1, [pc, #52]	; (3180 <bus_fault+0x12c>)
    314a:	f007 fcd0 	bl	aaee <z_log_msg2_runtime_create>
    314e:	e7a4      	b.n	309a <bus_fault+0x46>
		PR_FAULT_INFO("  Instruction bus error");
    3150:	4b12      	ldr	r3, [pc, #72]	; (319c <bus_fault+0x148>)
    3152:	9302      	str	r3, [sp, #8]
    3154:	2000      	movs	r0, #0
    3156:	9001      	str	r0, [sp, #4]
    3158:	9000      	str	r0, [sp, #0]
    315a:	4603      	mov	r3, r0
    315c:	2201      	movs	r2, #1
    315e:	4908      	ldr	r1, [pc, #32]	; (3180 <bus_fault+0x12c>)
    3160:	f007 fcc5 	bl	aaee <z_log_msg2_runtime_create>
    3164:	e7a3      	b.n	30ae <bus_fault+0x5a>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3166:	4b0e      	ldr	r3, [pc, #56]	; (31a0 <bus_fault+0x14c>)
    3168:	9302      	str	r3, [sp, #8]
    316a:	2000      	movs	r0, #0
    316c:	9001      	str	r0, [sp, #4]
    316e:	9000      	str	r0, [sp, #0]
    3170:	4603      	mov	r3, r0
    3172:	2201      	movs	r2, #1
    3174:	4902      	ldr	r1, [pc, #8]	; (3180 <bus_fault+0x12c>)
    3176:	f007 fcba 	bl	aaee <z_log_msg2_runtime_create>
    317a:	e798      	b.n	30ae <bus_fault+0x5a>
    317c:	0000cbf8 	.word	0x0000cbf8
    3180:	0000c0b4 	.word	0x0000c0b4
    3184:	e000ed00 	.word	0xe000ed00
    3188:	0000cc10 	.word	0x0000cc10
    318c:	0000cc24 	.word	0x0000cc24
    3190:	0000cc38 	.word	0x0000cc38
    3194:	0000cc54 	.word	0x0000cc54
    3198:	0000cc6c 	.word	0x0000cc6c
    319c:	0000cc88 	.word	0x0000cc88
    31a0:	0000cca0 	.word	0x0000cca0

000031a4 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    31a4:	b500      	push	{lr}
    31a6:	b085      	sub	sp, #20
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    31a8:	4b3a      	ldr	r3, [pc, #232]	; (3294 <usage_fault+0xf0>)
    31aa:	9302      	str	r3, [sp, #8]
    31ac:	2000      	movs	r0, #0
    31ae:	9001      	str	r0, [sp, #4]
    31b0:	9000      	str	r0, [sp, #0]
    31b2:	4603      	mov	r3, r0
    31b4:	2201      	movs	r2, #1
    31b6:	4938      	ldr	r1, [pc, #224]	; (3298 <usage_fault+0xf4>)
    31b8:	f007 fc99 	bl	aaee <z_log_msg2_runtime_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    31bc:	4b37      	ldr	r3, [pc, #220]	; (329c <usage_fault+0xf8>)
    31be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    31c4:	d123      	bne.n	320e <usage_fault+0x6a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    31c6:	4b35      	ldr	r3, [pc, #212]	; (329c <usage_fault+0xf8>)
    31c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31ca:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    31ce:	d129      	bne.n	3224 <usage_fault+0x80>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    31d0:	4b32      	ldr	r3, [pc, #200]	; (329c <usage_fault+0xf8>)
    31d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31d4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    31d8:	d12f      	bne.n	323a <usage_fault+0x96>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    31da:	4b30      	ldr	r3, [pc, #192]	; (329c <usage_fault+0xf8>)
    31dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31de:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    31e2:	d135      	bne.n	3250 <usage_fault+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    31e4:	4b2d      	ldr	r3, [pc, #180]	; (329c <usage_fault+0xf8>)
    31e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    31ec:	d13b      	bne.n	3266 <usage_fault+0xc2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    31ee:	4b2b      	ldr	r3, [pc, #172]	; (329c <usage_fault+0xf8>)
    31f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    31f6:	d141      	bne.n	327c <usage_fault+0xd8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    31f8:	4a28      	ldr	r2, [pc, #160]	; (329c <usage_fault+0xf8>)
    31fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    31fc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3200:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3204:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    3206:	2000      	movs	r0, #0
    3208:	b005      	add	sp, #20
    320a:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    320e:	4b24      	ldr	r3, [pc, #144]	; (32a0 <usage_fault+0xfc>)
    3210:	9302      	str	r3, [sp, #8]
    3212:	2000      	movs	r0, #0
    3214:	9001      	str	r0, [sp, #4]
    3216:	9000      	str	r0, [sp, #0]
    3218:	4603      	mov	r3, r0
    321a:	2201      	movs	r2, #1
    321c:	491e      	ldr	r1, [pc, #120]	; (3298 <usage_fault+0xf4>)
    321e:	f007 fc66 	bl	aaee <z_log_msg2_runtime_create>
    3222:	e7d0      	b.n	31c6 <usage_fault+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    3224:	4b1f      	ldr	r3, [pc, #124]	; (32a4 <usage_fault+0x100>)
    3226:	9302      	str	r3, [sp, #8]
    3228:	2000      	movs	r0, #0
    322a:	9001      	str	r0, [sp, #4]
    322c:	9000      	str	r0, [sp, #0]
    322e:	4603      	mov	r3, r0
    3230:	2201      	movs	r2, #1
    3232:	4919      	ldr	r1, [pc, #100]	; (3298 <usage_fault+0xf4>)
    3234:	f007 fc5b 	bl	aaee <z_log_msg2_runtime_create>
    3238:	e7ca      	b.n	31d0 <usage_fault+0x2c>
		PR_FAULT_INFO("  No coprocessor instructions");
    323a:	4b1b      	ldr	r3, [pc, #108]	; (32a8 <usage_fault+0x104>)
    323c:	9302      	str	r3, [sp, #8]
    323e:	2000      	movs	r0, #0
    3240:	9001      	str	r0, [sp, #4]
    3242:	9000      	str	r0, [sp, #0]
    3244:	4603      	mov	r3, r0
    3246:	2201      	movs	r2, #1
    3248:	4913      	ldr	r1, [pc, #76]	; (3298 <usage_fault+0xf4>)
    324a:	f007 fc50 	bl	aaee <z_log_msg2_runtime_create>
    324e:	e7c4      	b.n	31da <usage_fault+0x36>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3250:	4b16      	ldr	r3, [pc, #88]	; (32ac <usage_fault+0x108>)
    3252:	9302      	str	r3, [sp, #8]
    3254:	2000      	movs	r0, #0
    3256:	9001      	str	r0, [sp, #4]
    3258:	9000      	str	r0, [sp, #0]
    325a:	4603      	mov	r3, r0
    325c:	2201      	movs	r2, #1
    325e:	490e      	ldr	r1, [pc, #56]	; (3298 <usage_fault+0xf4>)
    3260:	f007 fc45 	bl	aaee <z_log_msg2_runtime_create>
    3264:	e7be      	b.n	31e4 <usage_fault+0x40>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3266:	4b12      	ldr	r3, [pc, #72]	; (32b0 <usage_fault+0x10c>)
    3268:	9302      	str	r3, [sp, #8]
    326a:	2000      	movs	r0, #0
    326c:	9001      	str	r0, [sp, #4]
    326e:	9000      	str	r0, [sp, #0]
    3270:	4603      	mov	r3, r0
    3272:	2201      	movs	r2, #1
    3274:	4908      	ldr	r1, [pc, #32]	; (3298 <usage_fault+0xf4>)
    3276:	f007 fc3a 	bl	aaee <z_log_msg2_runtime_create>
    327a:	e7b8      	b.n	31ee <usage_fault+0x4a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    327c:	4b0d      	ldr	r3, [pc, #52]	; (32b4 <usage_fault+0x110>)
    327e:	9302      	str	r3, [sp, #8]
    3280:	2000      	movs	r0, #0
    3282:	9001      	str	r0, [sp, #4]
    3284:	9000      	str	r0, [sp, #0]
    3286:	4603      	mov	r3, r0
    3288:	2201      	movs	r2, #1
    328a:	4903      	ldr	r1, [pc, #12]	; (3298 <usage_fault+0xf4>)
    328c:	f007 fc2f 	bl	aaee <z_log_msg2_runtime_create>
    3290:	e7b2      	b.n	31f8 <usage_fault+0x54>
    3292:	bf00      	nop
    3294:	0000ccd0 	.word	0x0000ccd0
    3298:	0000c0b4 	.word	0x0000c0b4
    329c:	e000ed00 	.word	0xe000ed00
    32a0:	0000cce8 	.word	0x0000cce8
    32a4:	0000ccfc 	.word	0x0000ccfc
    32a8:	0000cd18 	.word	0x0000cd18
    32ac:	0000cd38 	.word	0x0000cd38
    32b0:	0000cd60 	.word	0x0000cd60
    32b4:	0000cd7c 	.word	0x0000cd7c

000032b8 <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    32b8:	b500      	push	{lr}
    32ba:	b085      	sub	sp, #20
	*recoverable = false;
    32bc:	2000      	movs	r0, #0
    32be:	7008      	strb	r0, [r1, #0]

	PR_FAULT_INFO(
    32c0:	4b05      	ldr	r3, [pc, #20]	; (32d8 <debug_monitor+0x20>)
    32c2:	9302      	str	r3, [sp, #8]
    32c4:	9001      	str	r0, [sp, #4]
    32c6:	9000      	str	r0, [sp, #0]
    32c8:	4603      	mov	r3, r0
    32ca:	2201      	movs	r2, #1
    32cc:	4903      	ldr	r1, [pc, #12]	; (32dc <debug_monitor+0x24>)
    32ce:	f007 fc0e 	bl	aaee <z_log_msg2_runtime_create>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    32d2:	b005      	add	sp, #20
    32d4:	f85d fb04 	ldr.w	pc, [sp], #4
    32d8:	0000cda8 	.word	0x0000cda8
    32dc:	0000c0b4 	.word	0x0000c0b4

000032e0 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    32e0:	b500      	push	{lr}
    32e2:	b087      	sub	sp, #28
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    32e4:	290f      	cmp	r1, #15
    32e6:	dc10      	bgt.n	330a <reserved_exception+0x2a>
    32e8:	4b09      	ldr	r3, [pc, #36]	; (3310 <reserved_exception+0x30>)
    32ea:	3910      	subs	r1, #16
    32ec:	9104      	str	r1, [sp, #16]
    32ee:	9303      	str	r3, [sp, #12]
    32f0:	4b08      	ldr	r3, [pc, #32]	; (3314 <reserved_exception+0x34>)
    32f2:	9302      	str	r3, [sp, #8]
    32f4:	2000      	movs	r0, #0
    32f6:	9001      	str	r0, [sp, #4]
    32f8:	9000      	str	r0, [sp, #0]
    32fa:	4603      	mov	r3, r0
    32fc:	2201      	movs	r2, #1
    32fe:	4906      	ldr	r1, [pc, #24]	; (3318 <reserved_exception+0x38>)
    3300:	f007 fbf5 	bl	aaee <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    3304:	b007      	add	sp, #28
    3306:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
    330a:	4b04      	ldr	r3, [pc, #16]	; (331c <reserved_exception+0x3c>)
    330c:	e7ed      	b.n	32ea <reserved_exception+0xa>
    330e:	bf00      	nop
    3310:	0000cde8 	.word	0x0000cde8
    3314:	0000ce00 	.word	0x0000ce00
    3318:	0000c0b4 	.word	0x0000c0b4
    331c:	0000cdcc 	.word	0x0000cdcc

00003320 <mem_manage_fault>:
{
    3320:	b5f0      	push	{r4, r5, r6, r7, lr}
    3322:	b085      	sub	sp, #20
    3324:	4605      	mov	r5, r0
    3326:	460c      	mov	r4, r1
    3328:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    332a:	4b5f      	ldr	r3, [pc, #380]	; (34a8 <mem_manage_fault+0x188>)
    332c:	9302      	str	r3, [sp, #8]
    332e:	2000      	movs	r0, #0
    3330:	9001      	str	r0, [sp, #4]
    3332:	9000      	str	r0, [sp, #0]
    3334:	4603      	mov	r3, r0
    3336:	2201      	movs	r2, #1
    3338:	495c      	ldr	r1, [pc, #368]	; (34ac <mem_manage_fault+0x18c>)
    333a:	f007 fbd8 	bl	aaee <z_log_msg2_runtime_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    333e:	4b5c      	ldr	r3, [pc, #368]	; (34b0 <mem_manage_fault+0x190>)
    3340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3342:	f013 0f10 	tst.w	r3, #16
    3346:	d13b      	bne.n	33c0 <mem_manage_fault+0xa0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3348:	4b59      	ldr	r3, [pc, #356]	; (34b0 <mem_manage_fault+0x190>)
    334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    334c:	f013 0f08 	tst.w	r3, #8
    3350:	d141      	bne.n	33d6 <mem_manage_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3352:	4b57      	ldr	r3, [pc, #348]	; (34b0 <mem_manage_fault+0x190>)
    3354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3356:	f013 0f02 	tst.w	r3, #2
    335a:	d147      	bne.n	33ec <mem_manage_fault+0xcc>
	uint32_t mmfar = -EINVAL;
    335c:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3360:	4b53      	ldr	r3, [pc, #332]	; (34b0 <mem_manage_fault+0x190>)
    3362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3364:	f013 0f01 	tst.w	r3, #1
    3368:	d166      	bne.n	3438 <mem_manage_fault+0x118>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    336a:	4b51      	ldr	r3, [pc, #324]	; (34b0 <mem_manage_fault+0x190>)
    336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    336e:	f013 0f20 	tst.w	r3, #32
    3372:	d16c      	bne.n	344e <mem_manage_fault+0x12e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3374:	4b4e      	ldr	r3, [pc, #312]	; (34b0 <mem_manage_fault+0x190>)
    3376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3378:	f013 0f10 	tst.w	r3, #16
    337c:	d104      	bne.n	3388 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    337e:	4b4c      	ldr	r3, [pc, #304]	; (34b0 <mem_manage_fault+0x190>)
    3380:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3382:	f014 0402 	ands.w	r4, r4, #2
    3386:	d004      	beq.n	3392 <mem_manage_fault+0x72>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3388:	4b49      	ldr	r3, [pc, #292]	; (34b0 <mem_manage_fault+0x190>)
    338a:	685c      	ldr	r4, [r3, #4]
    338c:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    3390:	d168      	bne.n	3464 <mem_manage_fault+0x144>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3392:	4b47      	ldr	r3, [pc, #284]	; (34b0 <mem_manage_fault+0x190>)
    3394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3396:	f013 0f20 	tst.w	r3, #32
    339a:	d004      	beq.n	33a6 <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    339c:	4a44      	ldr	r2, [pc, #272]	; (34b0 <mem_manage_fault+0x190>)
    339e:	6a53      	ldr	r3, [r2, #36]	; 0x24
    33a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    33a4:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    33a6:	4a42      	ldr	r2, [pc, #264]	; (34b0 <mem_manage_fault+0x190>)
    33a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    33aa:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    33ae:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    33b0:	2101      	movs	r1, #1
    33b2:	4628      	mov	r0, r5
    33b4:	f007 fb99 	bl	aaea <memory_fault_recoverable>
    33b8:	7030      	strb	r0, [r6, #0]
}
    33ba:	4620      	mov	r0, r4
    33bc:	b005      	add	sp, #20
    33be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    33c0:	4b3c      	ldr	r3, [pc, #240]	; (34b4 <mem_manage_fault+0x194>)
    33c2:	9302      	str	r3, [sp, #8]
    33c4:	2000      	movs	r0, #0
    33c6:	9001      	str	r0, [sp, #4]
    33c8:	9000      	str	r0, [sp, #0]
    33ca:	4603      	mov	r3, r0
    33cc:	2201      	movs	r2, #1
    33ce:	4937      	ldr	r1, [pc, #220]	; (34ac <mem_manage_fault+0x18c>)
    33d0:	f007 fb8d 	bl	aaee <z_log_msg2_runtime_create>
    33d4:	e7b8      	b.n	3348 <mem_manage_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    33d6:	4b38      	ldr	r3, [pc, #224]	; (34b8 <mem_manage_fault+0x198>)
    33d8:	9302      	str	r3, [sp, #8]
    33da:	2000      	movs	r0, #0
    33dc:	9001      	str	r0, [sp, #4]
    33de:	9000      	str	r0, [sp, #0]
    33e0:	4603      	mov	r3, r0
    33e2:	2201      	movs	r2, #1
    33e4:	4931      	ldr	r1, [pc, #196]	; (34ac <mem_manage_fault+0x18c>)
    33e6:	f007 fb82 	bl	aaee <z_log_msg2_runtime_create>
    33ea:	e7b2      	b.n	3352 <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Data Access Violation");
    33ec:	4b33      	ldr	r3, [pc, #204]	; (34bc <mem_manage_fault+0x19c>)
    33ee:	9302      	str	r3, [sp, #8]
    33f0:	2000      	movs	r0, #0
    33f2:	9001      	str	r0, [sp, #4]
    33f4:	9000      	str	r0, [sp, #0]
    33f6:	4603      	mov	r3, r0
    33f8:	2201      	movs	r2, #1
    33fa:	492c      	ldr	r1, [pc, #176]	; (34ac <mem_manage_fault+0x18c>)
    33fc:	f007 fb77 	bl	aaee <z_log_msg2_runtime_create>
		uint32_t temp = SCB->MMFAR;
    3400:	4b2b      	ldr	r3, [pc, #172]	; (34b0 <mem_manage_fault+0x190>)
    3402:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3406:	f013 0f80 	tst.w	r3, #128	; 0x80
    340a:	d102      	bne.n	3412 <mem_manage_fault+0xf2>
	uint32_t mmfar = -EINVAL;
    340c:	f06f 0715 	mvn.w	r7, #21
    3410:	e7a6      	b.n	3360 <mem_manage_fault+0x40>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3412:	9703      	str	r7, [sp, #12]
    3414:	4b2a      	ldr	r3, [pc, #168]	; (34c0 <mem_manage_fault+0x1a0>)
    3416:	9302      	str	r3, [sp, #8]
    3418:	2000      	movs	r0, #0
    341a:	9001      	str	r0, [sp, #4]
    341c:	9000      	str	r0, [sp, #0]
    341e:	4603      	mov	r3, r0
    3420:	2201      	movs	r2, #1
    3422:	4922      	ldr	r1, [pc, #136]	; (34ac <mem_manage_fault+0x18c>)
    3424:	f007 fb63 	bl	aaee <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    3428:	2c00      	cmp	r4, #0
    342a:	d099      	beq.n	3360 <mem_manage_fault+0x40>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    342c:	4a20      	ldr	r2, [pc, #128]	; (34b0 <mem_manage_fault+0x190>)
    342e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3434:	6293      	str	r3, [r2, #40]	; 0x28
    3436:	e793      	b.n	3360 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Instruction Access Violation");
    3438:	4b22      	ldr	r3, [pc, #136]	; (34c4 <mem_manage_fault+0x1a4>)
    343a:	9302      	str	r3, [sp, #8]
    343c:	2000      	movs	r0, #0
    343e:	9001      	str	r0, [sp, #4]
    3440:	9000      	str	r0, [sp, #0]
    3442:	4603      	mov	r3, r0
    3444:	2201      	movs	r2, #1
    3446:	4919      	ldr	r1, [pc, #100]	; (34ac <mem_manage_fault+0x18c>)
    3448:	f007 fb51 	bl	aaee <z_log_msg2_runtime_create>
    344c:	e78d      	b.n	336a <mem_manage_fault+0x4a>
		PR_FAULT_INFO(
    344e:	4b1e      	ldr	r3, [pc, #120]	; (34c8 <mem_manage_fault+0x1a8>)
    3450:	9302      	str	r3, [sp, #8]
    3452:	2000      	movs	r0, #0
    3454:	9001      	str	r0, [sp, #4]
    3456:	9000      	str	r0, [sp, #0]
    3458:	4603      	mov	r3, r0
    345a:	2201      	movs	r2, #1
    345c:	4913      	ldr	r1, [pc, #76]	; (34ac <mem_manage_fault+0x18c>)
    345e:	f007 fb46 	bl	aaee <z_log_msg2_runtime_create>
    3462:	e787      	b.n	3374 <mem_manage_fault+0x54>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3464:	4629      	mov	r1, r5
    3466:	4638      	mov	r0, r7
    3468:	f7ff fd88 	bl	2f7c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    346c:	4607      	mov	r7, r0
    346e:	b9b0      	cbnz	r0, 349e <mem_manage_fault+0x17e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    3470:	4b0f      	ldr	r3, [pc, #60]	; (34b0 <mem_manage_fault+0x190>)
    3472:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    3474:	f014 0410 	ands.w	r4, r4, #16
    3478:	d08b      	beq.n	3392 <mem_manage_fault+0x72>
    347a:	4c14      	ldr	r4, [pc, #80]	; (34cc <mem_manage_fault+0x1ac>)
    347c:	f240 1349 	movw	r3, #329	; 0x149
    3480:	4622      	mov	r2, r4
    3482:	4913      	ldr	r1, [pc, #76]	; (34d0 <mem_manage_fault+0x1b0>)
    3484:	4813      	ldr	r0, [pc, #76]	; (34d4 <mem_manage_fault+0x1b4>)
    3486:	f007 fa4f 	bl	a928 <assert_print>
    348a:	4813      	ldr	r0, [pc, #76]	; (34d8 <mem_manage_fault+0x1b8>)
    348c:	f007 fa4c 	bl	a928 <assert_print>
    3490:	f240 1149 	movw	r1, #329	; 0x149
    3494:	4620      	mov	r0, r4
    3496:	f007 fa40 	bl	a91a <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    349a:	463c      	mov	r4, r7
    349c:	e779      	b.n	3392 <mem_manage_fault+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    349e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    34a2:	2402      	movs	r4, #2
    34a4:	e775      	b.n	3392 <mem_manage_fault+0x72>
    34a6:	bf00      	nop
    34a8:	0000ce14 	.word	0x0000ce14
    34ac:	0000c0b4 	.word	0x0000c0b4
    34b0:	e000ed00 	.word	0xe000ed00
    34b4:	0000ce2c 	.word	0x0000ce2c
    34b8:	0000cc24 	.word	0x0000cc24
    34bc:	0000ce60 	.word	0x0000ce60
    34c0:	0000ce78 	.word	0x0000ce78
    34c4:	0000ce90 	.word	0x0000ce90
    34c8:	0000cca0 	.word	0x0000cca0
    34cc:	0000ceb0 	.word	0x0000ceb0
    34d0:	0000ceec 	.word	0x0000ceec
    34d4:	0000c294 	.word	0x0000c294
    34d8:	0000cf38 	.word	0x0000cf38

000034dc <hard_fault>:
{
    34dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    34de:	b085      	sub	sp, #20
    34e0:	4607      	mov	r7, r0
    34e2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    34e4:	4b4b      	ldr	r3, [pc, #300]	; (3614 <hard_fault+0x138>)
    34e6:	9302      	str	r3, [sp, #8]
    34e8:	2400      	movs	r4, #0
    34ea:	9401      	str	r4, [sp, #4]
    34ec:	9400      	str	r4, [sp, #0]
    34ee:	4623      	mov	r3, r4
    34f0:	2201      	movs	r2, #1
    34f2:	4949      	ldr	r1, [pc, #292]	; (3618 <hard_fault+0x13c>)
    34f4:	4620      	mov	r0, r4
    34f6:	f007 fafa 	bl	aaee <z_log_msg2_runtime_create>
	*recoverable = false;
    34fa:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    34fc:	4b47      	ldr	r3, [pc, #284]	; (361c <hard_fault+0x140>)
    34fe:	6add      	ldr	r5, [r3, #44]	; 0x2c
    3500:	f015 0502 	ands.w	r5, r5, #2
    3504:	d12d      	bne.n	3562 <hard_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3506:	4b45      	ldr	r3, [pc, #276]	; (361c <hard_fault+0x140>)
    3508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    350a:	2b00      	cmp	r3, #0
    350c:	db36      	blt.n	357c <hard_fault+0xa0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    350e:	4b43      	ldr	r3, [pc, #268]	; (361c <hard_fault+0x140>)
    3510:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3512:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    3516:	d06b      	beq.n	35f0 <hard_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    3518:	4b41      	ldr	r3, [pc, #260]	; (3620 <hard_fault+0x144>)
    351a:	9302      	str	r3, [sp, #8]
    351c:	2000      	movs	r0, #0
    351e:	9001      	str	r0, [sp, #4]
    3520:	9000      	str	r0, [sp, #0]
    3522:	4603      	mov	r3, r0
    3524:	2201      	movs	r2, #1
    3526:	493c      	ldr	r1, [pc, #240]	; (3618 <hard_fault+0x13c>)
    3528:	f007 fae1 	bl	aaee <z_log_msg2_runtime_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    352c:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    352e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3532:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3536:	429a      	cmp	r2, r3
    3538:	d02c      	beq.n	3594 <hard_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
    353a:	4b38      	ldr	r3, [pc, #224]	; (361c <hard_fault+0x140>)
    353c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    3540:	2b00      	cmp	r3, #0
    3542:	d135      	bne.n	35b0 <hard_fault+0xd4>
		} else if (SCB_BFSR != 0) {
    3544:	4b35      	ldr	r3, [pc, #212]	; (361c <hard_fault+0x140>)
    3546:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    354a:	2b00      	cmp	r3, #0
    354c:	d137      	bne.n	35be <hard_fault+0xe2>
		} else if (SCB_UFSR != 0) {
    354e:	4b33      	ldr	r3, [pc, #204]	; (361c <hard_fault+0x140>)
    3550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    3552:	b29b      	uxth	r3, r3
    3554:	2b00      	cmp	r3, #0
    3556:	d039      	beq.n	35cc <hard_fault+0xf0>
			reason = usage_fault(esf);
    3558:	4638      	mov	r0, r7
    355a:	f7ff fe23 	bl	31a4 <usage_fault>
    355e:	4604      	mov	r4, r0
    3560:	e009      	b.n	3576 <hard_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    3562:	4b30      	ldr	r3, [pc, #192]	; (3624 <hard_fault+0x148>)
    3564:	9302      	str	r3, [sp, #8]
    3566:	9401      	str	r4, [sp, #4]
    3568:	9400      	str	r4, [sp, #0]
    356a:	4623      	mov	r3, r4
    356c:	2201      	movs	r2, #1
    356e:	492a      	ldr	r1, [pc, #168]	; (3618 <hard_fault+0x13c>)
    3570:	4620      	mov	r0, r4
    3572:	f007 fabc 	bl	aaee <z_log_msg2_runtime_create>
}
    3576:	4620      	mov	r0, r4
    3578:	b005      	add	sp, #20
    357a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
    357c:	4b2a      	ldr	r3, [pc, #168]	; (3628 <hard_fault+0x14c>)
    357e:	9302      	str	r3, [sp, #8]
    3580:	2000      	movs	r0, #0
    3582:	9001      	str	r0, [sp, #4]
    3584:	9000      	str	r0, [sp, #0]
    3586:	4603      	mov	r3, r0
    3588:	2201      	movs	r2, #1
    358a:	4923      	ldr	r1, [pc, #140]	; (3618 <hard_fault+0x13c>)
    358c:	f007 faaf 	bl	aaee <z_log_msg2_runtime_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3590:	462c      	mov	r4, r5
    3592:	e7f0      	b.n	3576 <hard_fault+0x9a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    3594:	683b      	ldr	r3, [r7, #0]
    3596:	9303      	str	r3, [sp, #12]
    3598:	4b24      	ldr	r3, [pc, #144]	; (362c <hard_fault+0x150>)
    359a:	9302      	str	r3, [sp, #8]
    359c:	2000      	movs	r0, #0
    359e:	9001      	str	r0, [sp, #4]
    35a0:	9000      	str	r0, [sp, #0]
    35a2:	4603      	mov	r3, r0
    35a4:	2201      	movs	r2, #1
    35a6:	491c      	ldr	r1, [pc, #112]	; (3618 <hard_fault+0x13c>)
    35a8:	f007 faa1 	bl	aaee <z_log_msg2_runtime_create>
			reason = esf->basic.r0;
    35ac:	683c      	ldr	r4, [r7, #0]
    35ae:	e7e2      	b.n	3576 <hard_fault+0x9a>
			reason = mem_manage_fault(esf, 1, recoverable);
    35b0:	4632      	mov	r2, r6
    35b2:	2101      	movs	r1, #1
    35b4:	4638      	mov	r0, r7
    35b6:	f7ff feb3 	bl	3320 <mem_manage_fault>
    35ba:	4604      	mov	r4, r0
    35bc:	e7db      	b.n	3576 <hard_fault+0x9a>
			reason = bus_fault(esf, 1, recoverable);
    35be:	4632      	mov	r2, r6
    35c0:	2101      	movs	r1, #1
    35c2:	4638      	mov	r0, r7
    35c4:	f7ff fd46 	bl	3054 <bus_fault>
    35c8:	4604      	mov	r4, r0
    35ca:	e7d4      	b.n	3576 <hard_fault+0x9a>
			__ASSERT(0,
    35cc:	4c18      	ldr	r4, [pc, #96]	; (3630 <hard_fault+0x154>)
    35ce:	f240 23cd 	movw	r3, #717	; 0x2cd
    35d2:	4622      	mov	r2, r4
    35d4:	4917      	ldr	r1, [pc, #92]	; (3634 <hard_fault+0x158>)
    35d6:	4818      	ldr	r0, [pc, #96]	; (3638 <hard_fault+0x15c>)
    35d8:	f007 f9a6 	bl	a928 <assert_print>
    35dc:	4817      	ldr	r0, [pc, #92]	; (363c <hard_fault+0x160>)
    35de:	f007 f9a3 	bl	a928 <assert_print>
    35e2:	f240 21cd 	movw	r1, #717	; 0x2cd
    35e6:	4620      	mov	r0, r4
    35e8:	f007 f997 	bl	a91a <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    35ec:	462c      	mov	r4, r5
    35ee:	e7c2      	b.n	3576 <hard_fault+0x9a>
		__ASSERT(0,
    35f0:	4d0f      	ldr	r5, [pc, #60]	; (3630 <hard_fault+0x154>)
    35f2:	f240 23d1 	movw	r3, #721	; 0x2d1
    35f6:	462a      	mov	r2, r5
    35f8:	490e      	ldr	r1, [pc, #56]	; (3634 <hard_fault+0x158>)
    35fa:	480f      	ldr	r0, [pc, #60]	; (3638 <hard_fault+0x15c>)
    35fc:	f007 f994 	bl	a928 <assert_print>
    3600:	480f      	ldr	r0, [pc, #60]	; (3640 <hard_fault+0x164>)
    3602:	f007 f991 	bl	a928 <assert_print>
    3606:	f240 21d1 	movw	r1, #721	; 0x2d1
    360a:	4628      	mov	r0, r5
    360c:	f007 f985 	bl	a91a <assert_post_action>
	return reason;
    3610:	e7b1      	b.n	3576 <hard_fault+0x9a>
    3612:	bf00      	nop
    3614:	0000cf5c 	.word	0x0000cf5c
    3618:	0000c0b4 	.word	0x0000c0b4
    361c:	e000ed00 	.word	0xe000ed00
    3620:	0000cfa8 	.word	0x0000cfa8
    3624:	0000cf74 	.word	0x0000cf74
    3628:	0000cf98 	.word	0x0000cf98
    362c:	0000cfc8 	.word	0x0000cfc8
    3630:	0000ceb0 	.word	0x0000ceb0
    3634:	0000c954 	.word	0x0000c954
    3638:	0000c294 	.word	0x0000c294
    363c:	0000cfe4 	.word	0x0000cfe4
    3640:	0000d008 	.word	0x0000d008

00003644 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3644:	b5f0      	push	{r4, r5, r6, r7, lr}
    3646:	b08f      	sub	sp, #60	; 0x3c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3648:	4b35      	ldr	r3, [pc, #212]	; (3720 <z_arm_fault+0xdc>)
    364a:	685d      	ldr	r5, [r3, #4]
    364c:	f3c5 0508 	ubfx	r5, r5, #0, #9
    3650:	2300      	movs	r3, #0
    3652:	f383 8811 	msr	BASEPRI, r3
    3656:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    365a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    365e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3662:	d125      	bne.n	36b0 <z_arm_fault+0x6c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3664:	f002 030c 	and.w	r3, r2, #12
    3668:	2b08      	cmp	r3, #8
    366a:	d011      	beq.n	3690 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    366c:	f012 0f08 	tst.w	r2, #8
    3670:	d01b      	beq.n	36aa <z_arm_fault+0x66>
			ptr_esf =  (z_arch_esf_t *)psp;
    3672:	460c      	mov	r4, r1
	*nested_exc = false;
    3674:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    3676:	b1f4      	cbz	r4, 36b6 <z_arm_fault+0x72>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    3678:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    367c:	4629      	mov	r1, r5
    367e:	4620      	mov	r0, r4
    3680:	f007 fa44 	bl	ab0c <fault_handle>
    3684:	4605      	mov	r5, r0
	if (recoverable) {
    3686:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    368a:	b32b      	cbz	r3, 36d8 <z_arm_fault+0x94>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    368c:	b00f      	add	sp, #60	; 0x3c
    368e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3690:	4b24      	ldr	r3, [pc, #144]	; (3724 <z_arm_fault+0xe0>)
    3692:	9302      	str	r3, [sp, #8]
    3694:	2400      	movs	r4, #0
    3696:	9401      	str	r4, [sp, #4]
    3698:	9400      	str	r4, [sp, #0]
    369a:	4623      	mov	r3, r4
    369c:	2201      	movs	r2, #1
    369e:	4922      	ldr	r1, [pc, #136]	; (3728 <z_arm_fault+0xe4>)
    36a0:	4620      	mov	r0, r4
    36a2:	f007 fa24 	bl	aaee <z_log_msg2_runtime_create>
	*nested_exc = false;
    36a6:	4626      	mov	r6, r4
		return NULL;
    36a8:	e7e5      	b.n	3676 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    36aa:	4604      	mov	r4, r0
			*nested_exc = true;
    36ac:	2601      	movs	r6, #1
    36ae:	e7e2      	b.n	3676 <z_arm_fault+0x32>
	*nested_exc = false;
    36b0:	2600      	movs	r6, #0
		return NULL;
    36b2:	4634      	mov	r4, r6
    36b4:	e7df      	b.n	3676 <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
    36b6:	4f1d      	ldr	r7, [pc, #116]	; (372c <z_arm_fault+0xe8>)
    36b8:	f240 33fb 	movw	r3, #1019	; 0x3fb
    36bc:	463a      	mov	r2, r7
    36be:	491c      	ldr	r1, [pc, #112]	; (3730 <z_arm_fault+0xec>)
    36c0:	481c      	ldr	r0, [pc, #112]	; (3734 <z_arm_fault+0xf0>)
    36c2:	f007 f931 	bl	a928 <assert_print>
    36c6:	481c      	ldr	r0, [pc, #112]	; (3738 <z_arm_fault+0xf4>)
    36c8:	f007 f92e 	bl	a928 <assert_print>
    36cc:	f240 31fb 	movw	r1, #1019	; 0x3fb
    36d0:	4638      	mov	r0, r7
    36d2:	f007 f922 	bl	a91a <assert_post_action>
    36d6:	e7cf      	b.n	3678 <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    36d8:	f10d 0c14 	add.w	ip, sp, #20
    36dc:	6820      	ldr	r0, [r4, #0]
    36de:	6861      	ldr	r1, [r4, #4]
    36e0:	68a2      	ldr	r2, [r4, #8]
    36e2:	68e3      	ldr	r3, [r4, #12]
    36e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    36e8:	6920      	ldr	r0, [r4, #16]
    36ea:	6961      	ldr	r1, [r4, #20]
    36ec:	69a2      	ldr	r2, [r4, #24]
    36ee:	69e3      	ldr	r3, [r4, #28]
    36f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
    36f4:	b146      	cbz	r6, 3708 <z_arm_fault+0xc4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    36f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
    36fa:	b95a      	cbnz	r2, 3714 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    36fc:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3700:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    3704:	930c      	str	r3, [sp, #48]	; 0x30
    3706:	e005      	b.n	3714 <z_arm_fault+0xd0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    370a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    370e:	f023 0301 	bic.w	r3, r3, #1
    3712:	930c      	str	r3, [sp, #48]	; 0x30
	z_arm_fatal_error(reason, &esf_copy);
    3714:	a905      	add	r1, sp, #20
    3716:	4628      	mov	r0, r5
    3718:	f007 f9c9 	bl	aaae <z_arm_fatal_error>
    371c:	e7b6      	b.n	368c <z_arm_fault+0x48>
    371e:	bf00      	nop
    3720:	e000ed00 	.word	0xe000ed00
    3724:	0000d038 	.word	0x0000d038
    3728:	0000c0b4 	.word	0x0000c0b4
    372c:	0000ceb0 	.word	0x0000ceb0
    3730:	0000d064 	.word	0x0000d064
    3734:	0000c294 	.word	0x0000c294
    3738:	0000d078 	.word	0x0000d078

0000373c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    373c:	4a02      	ldr	r2, [pc, #8]	; (3748 <z_arm_fault_init+0xc>)
    373e:	6953      	ldr	r3, [r2, #20]
    3740:	f043 0310 	orr.w	r3, r3, #16
    3744:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    3746:	4770      	bx	lr
    3748:	e000ed00 	.word	0xe000ed00

0000374c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    374c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3750:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3754:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3756:	4672      	mov	r2, lr
	bl z_arm_fault
    3758:	f7ff ff74 	bl	3644 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    375c:	bd01      	pop	{r0, pc}
    375e:	bf00      	nop

00003760 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3760:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3762:	e006      	b.n	3772 <z_arm_interrupt_init+0x12>
    3764:	f002 010f 	and.w	r1, r2, #15
    3768:	4b09      	ldr	r3, [pc, #36]	; (3790 <z_arm_interrupt_init+0x30>)
    376a:	440b      	add	r3, r1
    376c:	2120      	movs	r1, #32
    376e:	7619      	strb	r1, [r3, #24]
    3770:	3201      	adds	r2, #1
    3772:	2a2f      	cmp	r2, #47	; 0x2f
    3774:	dc0a      	bgt.n	378c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    3776:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    3778:	2b00      	cmp	r3, #0
    377a:	dbf3      	blt.n	3764 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    377c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3780:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3784:	2120      	movs	r1, #32
    3786:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    378a:	e7f1      	b.n	3770 <z_arm_interrupt_init+0x10>
	}
}
    378c:	4770      	bx	lr
    378e:	bf00      	nop
    3790:	e000ecfc 	.word	0xe000ecfc

00003794 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3794:	2000      	movs	r0, #0
    msr CONTROL, r0
    3796:	f380 8814 	msr	CONTROL, r0
    isb
    379a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    379e:	f008 fb37 	bl	be10 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    37a2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    37a4:	490d      	ldr	r1, [pc, #52]	; (37dc <__start+0x48>)
    str r0, [r1]
    37a6:	6008      	str	r0, [r1, #0]
    dsb
    37a8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    37ac:	480c      	ldr	r0, [pc, #48]	; (37e0 <__start+0x4c>)
    msr msp, r0
    37ae:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    37b2:	f000 f82d 	bl	3810 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    37b6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    37b8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    37bc:	4809      	ldr	r0, [pc, #36]	; (37e4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    37be:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    37c2:	1840      	adds	r0, r0, r1
    msr PSP, r0
    37c4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    37c8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    37cc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    37ce:	4308      	orrs	r0, r1
    msr CONTROL, r0
    37d0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    37d4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    37d8:	f7ff fb3a 	bl	2e50 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    37dc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    37e0:	20005f40 	.word	0x20005f40
    ldr r0, =z_interrupt_stacks
    37e4:	200060c0 	.word	0x200060c0

000037e8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    37e8:	4b08      	ldr	r3, [pc, #32]	; (380c <z_arm_clear_arm_mpu_config+0x24>)
    37ea:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    37ee:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    37f2:	2300      	movs	r3, #0
    37f4:	e006      	b.n	3804 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    37f6:	4a05      	ldr	r2, [pc, #20]	; (380c <z_arm_clear_arm_mpu_config+0x24>)
    37f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    37fc:	2100      	movs	r1, #0
    37fe:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    3802:	3301      	adds	r3, #1
    3804:	4283      	cmp	r3, r0
    3806:	dbf6      	blt.n	37f6 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    3808:	4770      	bx	lr
    380a:	bf00      	nop
    380c:	e000ed00 	.word	0xe000ed00

00003810 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3810:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3812:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3814:	2400      	movs	r4, #0
    3816:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    381a:	f7ff ffe5 	bl	37e8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    381e:	4623      	mov	r3, r4
    3820:	e008      	b.n	3834 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    3822:	f103 0120 	add.w	r1, r3, #32
    3826:	4a0e      	ldr	r2, [pc, #56]	; (3860 <z_arm_init_arch_hw_at_boot+0x50>)
    3828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    382c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3830:	3301      	adds	r3, #1
    3832:	b2db      	uxtb	r3, r3
    3834:	2b07      	cmp	r3, #7
    3836:	d9f4      	bls.n	3822 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3838:	2300      	movs	r3, #0
    383a:	e008      	b.n	384e <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    383c:	f103 0160 	add.w	r1, r3, #96	; 0x60
    3840:	4a07      	ldr	r2, [pc, #28]	; (3860 <z_arm_init_arch_hw_at_boot+0x50>)
    3842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3846:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    384a:	3301      	adds	r3, #1
    384c:	b2db      	uxtb	r3, r3
    384e:	2b07      	cmp	r3, #7
    3850:	d9f4      	bls.n	383c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    3852:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3854:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3858:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    385c:	bd10      	pop	{r4, pc}
    385e:	bf00      	nop
    3860:	e000e100 	.word	0xe000e100

00003864 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    3864:	b508      	push	{r3, lr}
	if (_current == thread) {
    3866:	4b0a      	ldr	r3, [pc, #40]	; (3890 <z_impl_k_thread_abort+0x2c>)
    3868:	689b      	ldr	r3, [r3, #8]
    386a:	4283      	cmp	r3, r0
    386c:	d002      	beq.n	3874 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    386e:	f005 fe5d 	bl	952c <z_thread_abort>
}
    3872:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3874:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3878:	2b00      	cmp	r3, #0
    387a:	d0f8      	beq.n	386e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    387c:	4b05      	ldr	r3, [pc, #20]	; (3894 <z_impl_k_thread_abort+0x30>)
    387e:	685a      	ldr	r2, [r3, #4]
    3880:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3884:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    3886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3888:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    388c:	625a      	str	r2, [r3, #36]	; 0x24
    388e:	e7ee      	b.n	386e <z_impl_k_thread_abort+0xa>
    3890:	200050ac 	.word	0x200050ac
    3894:	e000ed00 	.word	0xe000ed00

00003898 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    3898:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    389a:	4b03      	ldr	r3, [pc, #12]	; (38a8 <z_arm_configure_static_mpu_regions+0x10>)
    389c:	4a03      	ldr	r2, [pc, #12]	; (38ac <z_arm_configure_static_mpu_regions+0x14>)
    389e:	2101      	movs	r1, #1
    38a0:	4803      	ldr	r0, [pc, #12]	; (38b0 <z_arm_configure_static_mpu_regions+0x18>)
    38a2:	f000 f8bb 	bl	3a1c <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    38a6:	bd08      	pop	{r3, pc}
    38a8:	20040000 	.word	0x20040000
    38ac:	20000000 	.word	0x20000000
    38b0:	0000d0bc 	.word	0x0000d0bc

000038b4 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    38b4:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    38b6:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    38ba:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    38bc:	4804      	ldr	r0, [pc, #16]	; (38d0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    38be:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    38c0:	2320      	movs	r3, #32
    38c2:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    38c4:	4b03      	ldr	r3, [pc, #12]	; (38d4 <z_arm_configure_dynamic_mpu_regions+0x20>)
    38c6:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    38c8:	2101      	movs	r1, #1
    38ca:	f000 f8c9 	bl	3a60 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    38ce:	bd08      	pop	{r3, pc}
    38d0:	20004b44 	.word	0x20004b44
    38d4:	150b0000 	.word	0x150b0000

000038d8 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    38d8:	4a08      	ldr	r2, [pc, #32]	; (38fc <region_init+0x24>)
    38da:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    38de:	680b      	ldr	r3, [r1, #0]
    38e0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    38e4:	4303      	orrs	r3, r0
    38e6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    38ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    38ee:	688b      	ldr	r3, [r1, #8]
    38f0:	f043 0301 	orr.w	r3, r3, #1
    38f4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    38f8:	4770      	bx	lr
    38fa:	bf00      	nop
    38fc:	e000ed00 	.word	0xe000ed00

00003900 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    3900:	b510      	push	{r4, lr}
    3902:	b084      	sub	sp, #16
    3904:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    3906:	2807      	cmp	r0, #7
    3908:	d804      	bhi.n	3914 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    390a:	f7ff ffe5 	bl	38d8 <region_init>

	return index;
    390e:	4620      	mov	r0, r4
}
    3910:	b004      	add	sp, #16
    3912:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3914:	9003      	str	r0, [sp, #12]
    3916:	4b06      	ldr	r3, [pc, #24]	; (3930 <region_allocate_and_init+0x30>)
    3918:	9302      	str	r3, [sp, #8]
    391a:	2000      	movs	r0, #0
    391c:	9001      	str	r0, [sp, #4]
    391e:	9000      	str	r0, [sp, #0]
    3920:	4603      	mov	r3, r0
    3922:	2201      	movs	r2, #1
    3924:	4903      	ldr	r1, [pc, #12]	; (3934 <region_allocate_and_init+0x34>)
    3926:	f007 f927 	bl	ab78 <z_log_msg2_runtime_create>
		return -EINVAL;
    392a:	f06f 0015 	mvn.w	r0, #21
    392e:	e7ef      	b.n	3910 <region_allocate_and_init+0x10>
    3930:	0000d0c8 	.word	0x0000d0c8
    3934:	0000c0ac 	.word	0x0000c0ac

00003938 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    393c:	b085      	sub	sp, #20
    393e:	4680      	mov	r8, r0
    3940:	460f      	mov	r7, r1
    3942:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
    3944:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    3946:	2500      	movs	r5, #0
    3948:	e009      	b.n	395e <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    394a:	4621      	mov	r1, r4
    394c:	b2f0      	uxtb	r0, r6
    394e:	f007 f922 	bl	ab96 <mpu_configure_region>
    3952:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    3954:	f110 0f16 	cmn.w	r0, #22
    3958:	d01e      	beq.n	3998 <mpu_configure_regions+0x60>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    395a:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    395c:	3501      	adds	r5, #1
    395e:	42bd      	cmp	r5, r7
    3960:	da1a      	bge.n	3998 <mpu_configure_regions+0x60>
		if (regions[i].size == 0U) {
    3962:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    3966:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    396a:	6862      	ldr	r2, [r4, #4]
    396c:	2a00      	cmp	r2, #0
    396e:	d0f5      	beq.n	395c <mpu_configure_regions+0x24>
		if (do_sanity_check &&
    3970:	f1b9 0f00 	cmp.w	r9, #0
    3974:	d0e9      	beq.n	394a <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
    3976:	4620      	mov	r0, r4
    3978:	f007 f8ed 	bl	ab56 <mpu_partition_is_valid>
		if (do_sanity_check &&
    397c:	2800      	cmp	r0, #0
    397e:	d1e4      	bne.n	394a <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
    3980:	9503      	str	r5, [sp, #12]
    3982:	4b07      	ldr	r3, [pc, #28]	; (39a0 <mpu_configure_regions+0x68>)
    3984:	9302      	str	r3, [sp, #8]
    3986:	9001      	str	r0, [sp, #4]
    3988:	9000      	str	r0, [sp, #0]
    398a:	4603      	mov	r3, r0
    398c:	2201      	movs	r2, #1
    398e:	4905      	ldr	r1, [pc, #20]	; (39a4 <mpu_configure_regions+0x6c>)
    3990:	f007 f8f2 	bl	ab78 <z_log_msg2_runtime_create>
			return -EINVAL;
    3994:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    3998:	4630      	mov	r0, r6
    399a:	b005      	add	sp, #20
    399c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    39a0:	0000d0f0 	.word	0x0000d0f0
    39a4:	0000c0ac 	.word	0x0000c0ac

000039a8 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    39a8:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    39aa:	4c03      	ldr	r4, [pc, #12]	; (39b8 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    39ac:	2301      	movs	r3, #1
    39ae:	7822      	ldrb	r2, [r4, #0]
    39b0:	f7ff ffc2 	bl	3938 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    39b4:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    39b6:	bd10      	pop	{r4, pc}
    39b8:	200052e9 	.word	0x200052e9

000039bc <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    39bc:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    39be:	2300      	movs	r3, #0
    39c0:	4a09      	ldr	r2, [pc, #36]	; (39e8 <mpu_configure_dynamic_mpu_regions+0x2c>)
    39c2:	7812      	ldrb	r2, [r2, #0]
    39c4:	f7ff ffb8 	bl	3938 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    39c8:	f110 0f16 	cmn.w	r0, #22
    39cc:	d00a      	beq.n	39e4 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    39ce:	4603      	mov	r3, r0
    39d0:	e006      	b.n	39e0 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    39d2:	4a06      	ldr	r2, [pc, #24]	; (39ec <mpu_configure_dynamic_mpu_regions+0x30>)
    39d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    39d8:	2100      	movs	r1, #0
    39da:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    39de:	3301      	adds	r3, #1
    39e0:	2b07      	cmp	r3, #7
    39e2:	ddf6      	ble.n	39d2 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    39e4:	bd08      	pop	{r3, pc}
    39e6:	bf00      	nop
    39e8:	200052e9 	.word	0x200052e9
    39ec:	e000ed00 	.word	0xe000ed00

000039f0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    39f0:	4b04      	ldr	r3, [pc, #16]	; (3a04 <arm_core_mpu_enable+0x14>)
    39f2:	2205      	movs	r2, #5
    39f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    39f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    39fc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3a00:	4770      	bx	lr
    3a02:	bf00      	nop
    3a04:	e000ed00 	.word	0xe000ed00

00003a08 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3a08:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3a0c:	4b02      	ldr	r3, [pc, #8]	; (3a18 <arm_core_mpu_disable+0x10>)
    3a0e:	2200      	movs	r2, #0
    3a10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3a14:	4770      	bx	lr
    3a16:	bf00      	nop
    3a18:	e000ed00 	.word	0xe000ed00

00003a1c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3a1c:	b538      	push	{r3, r4, r5, lr}
    3a1e:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    3a20:	f7ff ffc2 	bl	39a8 <mpu_configure_static_mpu_regions>
    3a24:	f110 0f16 	cmn.w	r0, #22
    3a28:	d000      	beq.n	3a2c <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3a2a:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3a2c:	4d08      	ldr	r5, [pc, #32]	; (3a50 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    3a2e:	f240 1311 	movw	r3, #273	; 0x111
    3a32:	462a      	mov	r2, r5
    3a34:	4907      	ldr	r1, [pc, #28]	; (3a54 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    3a36:	4808      	ldr	r0, [pc, #32]	; (3a58 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    3a38:	f006 ff76 	bl	a928 <assert_print>
    3a3c:	4621      	mov	r1, r4
    3a3e:	4807      	ldr	r0, [pc, #28]	; (3a5c <arm_core_mpu_configure_static_mpu_regions+0x40>)
    3a40:	f006 ff72 	bl	a928 <assert_print>
    3a44:	f240 1111 	movw	r1, #273	; 0x111
    3a48:	4628      	mov	r0, r5
    3a4a:	f006 ff66 	bl	a91a <assert_post_action>
}
    3a4e:	e7ec      	b.n	3a2a <arm_core_mpu_configure_static_mpu_regions+0xe>
    3a50:	0000d114 	.word	0x0000d114
    3a54:	0000c954 	.word	0x0000c954
    3a58:	0000c294 	.word	0x0000c294
    3a5c:	0000d14c 	.word	0x0000d14c

00003a60 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3a60:	b538      	push	{r3, r4, r5, lr}
    3a62:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    3a64:	f7ff ffaa 	bl	39bc <mpu_configure_dynamic_mpu_regions>
    3a68:	f110 0f16 	cmn.w	r0, #22
    3a6c:	d000      	beq.n	3a70 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3a6e:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    3a70:	4d08      	ldr	r5, [pc, #32]	; (3a94 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    3a72:	f44f 7398 	mov.w	r3, #304	; 0x130
    3a76:	462a      	mov	r2, r5
    3a78:	4907      	ldr	r1, [pc, #28]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a7a:	4808      	ldr	r0, [pc, #32]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a7c:	f006 ff54 	bl	a928 <assert_print>
    3a80:	4621      	mov	r1, r4
    3a82:	4807      	ldr	r0, [pc, #28]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a84:	f006 ff50 	bl	a928 <assert_print>
    3a88:	f44f 7198 	mov.w	r1, #304	; 0x130
    3a8c:	4628      	mov	r0, r5
    3a8e:	f006 ff44 	bl	a91a <assert_post_action>
}
    3a92:	e7ec      	b.n	3a6e <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    3a94:	0000d114 	.word	0x0000d114
    3a98:	0000c954 	.word	0x0000c954
    3a9c:	0000c294 	.word	0x0000c294
    3aa0:	0000d178 	.word	0x0000d178

00003aa4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    3aa4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3aa6:	4b24      	ldr	r3, [pc, #144]	; (3b38 <z_arm_mpu_init+0x94>)
    3aa8:	681d      	ldr	r5, [r3, #0]
    3aaa:	2d08      	cmp	r5, #8
    3aac:	d803      	bhi.n	3ab6 <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3aae:	f7ff ffab 	bl	3a08 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3ab2:	2400      	movs	r4, #0
    3ab4:	e01e      	b.n	3af4 <z_arm_mpu_init+0x50>
		__ASSERT(0,
    3ab6:	4c21      	ldr	r4, [pc, #132]	; (3b3c <z_arm_mpu_init+0x98>)
    3ab8:	f44f 73a4 	mov.w	r3, #328	; 0x148
    3abc:	4622      	mov	r2, r4
    3abe:	4920      	ldr	r1, [pc, #128]	; (3b40 <z_arm_mpu_init+0x9c>)
    3ac0:	4820      	ldr	r0, [pc, #128]	; (3b44 <z_arm_mpu_init+0xa0>)
    3ac2:	f006 ff31 	bl	a928 <assert_print>
    3ac6:	2208      	movs	r2, #8
    3ac8:	4629      	mov	r1, r5
    3aca:	481f      	ldr	r0, [pc, #124]	; (3b48 <z_arm_mpu_init+0xa4>)
    3acc:	f006 ff2c 	bl	a928 <assert_print>
    3ad0:	f44f 71a4 	mov.w	r1, #328	; 0x148
    3ad4:	4620      	mov	r0, r4
    3ad6:	f006 ff20 	bl	a91a <assert_post_action>
		return -1;
    3ada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3ade:	e017      	b.n	3b10 <z_arm_mpu_init+0x6c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    3ae0:	4b15      	ldr	r3, [pc, #84]	; (3b38 <z_arm_mpu_init+0x94>)
    3ae2:	6859      	ldr	r1, [r3, #4]
    3ae4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    3ae8:	0093      	lsls	r3, r2, #2
    3aea:	4419      	add	r1, r3
    3aec:	4620      	mov	r0, r4
    3aee:	f7ff fef3 	bl	38d8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3af2:	3401      	adds	r4, #1
    3af4:	42a5      	cmp	r5, r4
    3af6:	d8f3      	bhi.n	3ae0 <z_arm_mpu_init+0x3c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3af8:	4b14      	ldr	r3, [pc, #80]	; (3b4c <z_arm_mpu_init+0xa8>)
    3afa:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    3afc:	f7ff ff78 	bl	39f0 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    3b00:	4b13      	ldr	r3, [pc, #76]	; (3b50 <z_arm_mpu_init+0xac>)
    3b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    3b06:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3b0a:	2b08      	cmp	r3, #8
    3b0c:	d101      	bne.n	3b12 <z_arm_mpu_init+0x6e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3b0e:	2000      	movs	r0, #0
}
    3b10:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    3b12:	4c0a      	ldr	r4, [pc, #40]	; (3b3c <z_arm_mpu_init+0x98>)
    3b14:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    3b18:	4622      	mov	r2, r4
    3b1a:	490e      	ldr	r1, [pc, #56]	; (3b54 <z_arm_mpu_init+0xb0>)
    3b1c:	4809      	ldr	r0, [pc, #36]	; (3b44 <z_arm_mpu_init+0xa0>)
    3b1e:	f006 ff03 	bl	a928 <assert_print>
    3b22:	480d      	ldr	r0, [pc, #52]	; (3b58 <z_arm_mpu_init+0xb4>)
    3b24:	f006 ff00 	bl	a928 <assert_print>
    3b28:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    3b2c:	4620      	mov	r0, r4
    3b2e:	f006 fef4 	bl	a91a <assert_post_action>
	return 0;
    3b32:	2000      	movs	r0, #0
    3b34:	e7ec      	b.n	3b10 <z_arm_mpu_init+0x6c>
    3b36:	bf00      	nop
    3b38:	0000d3b4 	.word	0x0000d3b4
    3b3c:	0000d114 	.word	0x0000d114
    3b40:	0000c954 	.word	0x0000c954
    3b44:	0000c294 	.word	0x0000c294
    3b48:	0000d1a8 	.word	0x0000d1a8
    3b4c:	200052e9 	.word	0x200052e9
    3b50:	e000ed00 	.word	0xe000ed00
    3b54:	0000d1dc 	.word	0x0000d1dc
    3b58:	0000d22c 	.word	0x0000d22c

00003b5c <malloc_prepare>:

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    3b5c:	4b0d      	ldr	r3, [pc, #52]	; (3b94 <malloc_prepare+0x38>)
    3b5e:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    3b62:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    3b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    3b6a:	d301      	bcc.n	3b70 <malloc_prepare+0x14>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    3b6c:	2000      	movs	r0, #0
    3b6e:	4770      	bx	lr
{
    3b70:	b510      	push	{r4, lr}
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    3b72:	4c09      	ldr	r4, [pc, #36]	; (3b98 <malloc_prepare+0x3c>)
    3b74:	2381      	movs	r3, #129	; 0x81
    3b76:	4622      	mov	r2, r4
    3b78:	4908      	ldr	r1, [pc, #32]	; (3b9c <malloc_prepare+0x40>)
    3b7a:	4809      	ldr	r0, [pc, #36]	; (3ba0 <malloc_prepare+0x44>)
    3b7c:	f006 fed4 	bl	a928 <assert_print>
    3b80:	4808      	ldr	r0, [pc, #32]	; (3ba4 <malloc_prepare+0x48>)
    3b82:	f006 fed1 	bl	a928 <assert_print>
    3b86:	2181      	movs	r1, #129	; 0x81
    3b88:	4620      	mov	r0, r4
    3b8a:	f006 fec6 	bl	a91a <assert_post_action>
}
    3b8e:	2000      	movs	r0, #0
    3b90:	bd10      	pop	{r4, pc}
    3b92:	bf00      	nop
    3b94:	200069e0 	.word	0x200069e0
    3b98:	0000d250 	.word	0x0000d250
    3b9c:	0000d280 	.word	0x0000d280
    3ba0:	0000c294 	.word	0x0000c294
    3ba4:	0000d2c8 	.word	0x0000d2c8

00003ba8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3ba8:	4b01      	ldr	r3, [pc, #4]	; (3bb0 <__stdout_hook_install+0x8>)
    3baa:	6018      	str	r0, [r3, #0]
}
    3bac:	4770      	bx	lr
    3bae:	bf00      	nop
    3bb0:	2000402c 	.word	0x2000402c

00003bb4 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    3bb4:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    3bb6:	4b08      	ldr	r3, [pc, #32]	; (3bd8 <_sbrk+0x24>)
    3bb8:	6819      	ldr	r1, [r3, #0]
    3bba:	4b08      	ldr	r3, [pc, #32]	; (3bdc <_sbrk+0x28>)
    3bbc:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    3bbe:	440a      	add	r2, r1
    3bc0:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    3bc4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    3bc8:	429a      	cmp	r2, r3
    3bca:	d202      	bcs.n	3bd2 <_sbrk+0x1e>
		heap_sz += count;
    3bcc:	4b02      	ldr	r3, [pc, #8]	; (3bd8 <_sbrk+0x24>)
    3bce:	601a      	str	r2, [r3, #0]
		ret = ptr;
    3bd0:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    3bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    3bd6:	4770      	bx	lr
    3bd8:	20004b50 	.word	0x20004b50
    3bdc:	200069e0 	.word	0x200069e0

00003be0 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    3be0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    3be2:	4604      	mov	r4, r0
    3be4:	b138      	cbz	r0, 3bf6 <__retarget_lock_acquire_recursive+0x16>
	return z_impl_k_mutex_lock(mutex, timeout);
    3be6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3bee:	4620      	mov	r0, r4
    3bf0:	f003 ff76 	bl	7ae0 <z_impl_k_mutex_lock>
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    3bf4:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    3bf6:	4d07      	ldr	r5, [pc, #28]	; (3c14 <__retarget_lock_acquire_recursive+0x34>)
    3bf8:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    3bfc:	462a      	mov	r2, r5
    3bfe:	4906      	ldr	r1, [pc, #24]	; (3c18 <__retarget_lock_acquire_recursive+0x38>)
    3c00:	4806      	ldr	r0, [pc, #24]	; (3c1c <__retarget_lock_acquire_recursive+0x3c>)
    3c02:	f006 fe91 	bl	a928 <assert_print>
    3c06:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    3c0a:	4628      	mov	r0, r5
    3c0c:	f006 fe85 	bl	a91a <assert_post_action>
    3c10:	e7e9      	b.n	3be6 <__retarget_lock_acquire_recursive+0x6>
    3c12:	bf00      	nop
    3c14:	0000d250 	.word	0x0000d250
    3c18:	0000d350 	.word	0x0000d350
    3c1c:	0000c294 	.word	0x0000c294

00003c20 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    3c20:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    3c22:	4604      	mov	r4, r0
    3c24:	b118      	cbz	r0, 3c2e <__retarget_lock_release_recursive+0xe>
	return z_impl_k_mutex_unlock(mutex);
    3c26:	4620      	mov	r0, r4
    3c28:	f004 f87a 	bl	7d20 <z_impl_k_mutex_unlock>
	k_mutex_unlock((struct k_mutex *)lock);
}
    3c2c:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    3c2e:	4d07      	ldr	r5, [pc, #28]	; (3c4c <__retarget_lock_release_recursive+0x2c>)
    3c30:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    3c34:	462a      	mov	r2, r5
    3c36:	4906      	ldr	r1, [pc, #24]	; (3c50 <__retarget_lock_release_recursive+0x30>)
    3c38:	4806      	ldr	r0, [pc, #24]	; (3c54 <__retarget_lock_release_recursive+0x34>)
    3c3a:	f006 fe75 	bl	a928 <assert_print>
    3c3e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    3c42:	4628      	mov	r0, r5
    3c44:	f006 fe69 	bl	a91a <assert_post_action>
    3c48:	e7ed      	b.n	3c26 <__retarget_lock_release_recursive+0x6>
    3c4a:	bf00      	nop
    3c4c:	0000d250 	.word	0x0000d250
    3c50:	0000d350 	.word	0x0000d350
    3c54:	0000c294 	.word	0x0000c294

00003c58 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    3c58:	b510      	push	{r4, lr}
	__asm__ volatile(
    3c5a:	f04f 0320 	mov.w	r3, #32
    3c5e:	f3ef 8411 	mrs	r4, BASEPRI
    3c62:	f383 8812 	msr	BASEPRI_MAX, r3
    3c66:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3c6a:	2301      	movs	r3, #1
    3c6c:	4a0c      	ldr	r2, [pc, #48]	; (3ca0 <nordicsemi_nrf52_init+0x48>)
    3c6e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3c72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3c76:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    3c7a:	f006 ffae 	bl	abda <nrf52_errata_197>
    3c7e:	b120      	cbz	r0, 3c8a <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    3c80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3c84:	2201      	movs	r2, #1
    3c86:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    3c8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3c8e:	2201      	movs	r2, #1
    3c90:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    3c94:	f384 8811 	msr	BASEPRI, r4
    3c98:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3c9c:	2000      	movs	r0, #0
    3c9e:	bd10      	pop	{r4, pc}
    3ca0:	4001e000 	.word	0x4001e000

00003ca4 <sys_arch_reboot>:
    *p_gpregret = val;
    3ca4:	b2c0      	uxtb	r0, r0
    3ca6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3caa:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3cae:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3cb2:	4905      	ldr	r1, [pc, #20]	; (3cc8 <sys_arch_reboot+0x24>)
    3cb4:	68ca      	ldr	r2, [r1, #12]
    3cb6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3cba:	4b04      	ldr	r3, [pc, #16]	; (3ccc <sys_arch_reboot+0x28>)
    3cbc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3cbe:	60cb      	str	r3, [r1, #12]
    3cc0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3cc4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3cc6:	e7fd      	b.n	3cc4 <sys_arch_reboot+0x20>
    3cc8:	e000ed00 	.word	0xe000ed00
    3ccc:	05fa0004 	.word	0x05fa0004

00003cd0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3cd0:	b130      	cbz	r0, 3ce0 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    3cd2:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3cd4:	0180      	lsls	r0, r0, #6
    3cd6:	4b03      	ldr	r3, [pc, #12]	; (3ce4 <arch_busy_wait+0x14>)
    3cd8:	f043 0301 	orr.w	r3, r3, #1
    3cdc:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    3cde:	bd08      	pop	{r3, pc}
    3ce0:	4770      	bx	lr
    3ce2:	bf00      	nop
    3ce4:	0000c160 	.word	0x0000c160

00003ce8 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    3ce8:	4800      	ldr	r0, [pc, #0]	; (3cec <get_hf_flags+0x4>)
    3cea:	4770      	bx	lr
    3cec:	20004bac 	.word	0x20004bac

00003cf0 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3cf0:	4b01      	ldr	r3, [pc, #4]	; (3cf8 <get_subsys+0x8>)
    3cf2:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    3cf4:	1140      	asrs	r0, r0, #5
    3cf6:	4770      	bx	lr
    3cf8:	20004b64 	.word	0x20004b64

00003cfc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3cfc:	b530      	push	{r4, r5, lr}
    3cfe:	b083      	sub	sp, #12
    3d00:	4605      	mov	r5, r0
    3d02:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3d04:	f7ff fff4 	bl	3cf0 <get_subsys>
    3d08:	4601      	mov	r1, r0
    3d0a:	2340      	movs	r3, #64	; 0x40
    3d0c:	9300      	str	r3, [sp, #0]
    3d0e:	4623      	mov	r3, r4
    3d10:	4a05      	ldr	r2, [pc, #20]	; (3d28 <onoff_start+0x2c>)
    3d12:	4806      	ldr	r0, [pc, #24]	; (3d2c <onoff_start+0x30>)
    3d14:	f006 fff0 	bl	acf8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    3d18:	1e01      	subs	r1, r0, #0
    3d1a:	db01      	blt.n	3d20 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    3d1c:	b003      	add	sp, #12
    3d1e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    3d20:	4628      	mov	r0, r5
    3d22:	47a0      	blx	r4
}
    3d24:	e7fa      	b.n	3d1c <onoff_start+0x20>
    3d26:	bf00      	nop
    3d28:	0000ad41 	.word	0x0000ad41
    3d2c:	0000be94 	.word	0x0000be94

00003d30 <generic_hfclk_stop>:
{
    3d30:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3d32:	4b0a      	ldr	r3, [pc, #40]	; (3d5c <generic_hfclk_stop+0x2c>)
    3d34:	f3bf 8f5b 	dmb	ish
    3d38:	e853 2f00 	ldrex	r2, [r3]
    3d3c:	f022 0102 	bic.w	r1, r2, #2
    3d40:	e843 1000 	strex	r0, r1, [r3]
    3d44:	2800      	cmp	r0, #0
    3d46:	d1f7      	bne.n	3d38 <generic_hfclk_stop+0x8>
    3d48:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3d4c:	f012 0f01 	tst.w	r2, #1
    3d50:	d000      	beq.n	3d54 <generic_hfclk_stop+0x24>
}
    3d52:	bd08      	pop	{r3, pc}
	hfclk_stop();
    3d54:	f007 f806 	bl	ad64 <hfclk_stop>
    3d58:	e7fb      	b.n	3d52 <generic_hfclk_stop+0x22>
    3d5a:	bf00      	nop
    3d5c:	20004bbc 	.word	0x20004bbc

00003d60 <get_status>:
{
    3d60:	b570      	push	{r4, r5, r6, lr}
    3d62:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    3d64:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3d66:	2c01      	cmp	r4, #1
    3d68:	d807      	bhi.n	3d7a <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3d6a:	4621      	mov	r1, r4
    3d6c:	4628      	mov	r0, r5
    3d6e:	f006 ff56 	bl	ac1e <get_sub_data>
    3d72:	6880      	ldr	r0, [r0, #8]
}
    3d74:	f000 0007 	and.w	r0, r0, #7
    3d78:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3d7a:	4e06      	ldr	r6, [pc, #24]	; (3d94 <get_status+0x34>)
    3d7c:	2379      	movs	r3, #121	; 0x79
    3d7e:	4632      	mov	r2, r6
    3d80:	4905      	ldr	r1, [pc, #20]	; (3d98 <get_status+0x38>)
    3d82:	4806      	ldr	r0, [pc, #24]	; (3d9c <get_status+0x3c>)
    3d84:	f006 fdd0 	bl	a928 <assert_print>
    3d88:	2179      	movs	r1, #121	; 0x79
    3d8a:	4630      	mov	r0, r6
    3d8c:	f006 fdc5 	bl	a91a <assert_post_action>
    3d90:	e7eb      	b.n	3d6a <get_status+0xa>
    3d92:	bf00      	nop
    3d94:	0000d3d8 	.word	0x0000d3d8
    3d98:	0000d418 	.word	0x0000d418
    3d9c:	0000c294 	.word	0x0000c294

00003da0 <stop>:
{
    3da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3da4:	4607      	mov	r7, r0
    3da6:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    3da8:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    3daa:	4621      	mov	r1, r4
    3dac:	f006 ff37 	bl	ac1e <get_sub_data>
    3db0:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3db2:	2c01      	cmp	r4, #1
    3db4:	d80f      	bhi.n	3dd6 <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    3db6:	4631      	mov	r1, r6
    3db8:	f105 0008 	add.w	r0, r5, #8
    3dbc:	f006 ff40 	bl	ac40 <set_off_state>
	if (err < 0) {
    3dc0:	2800      	cmp	r0, #0
    3dc2:	db06      	blt.n	3dd2 <stop+0x32>
	get_sub_config(dev, type)->stop();
    3dc4:	4621      	mov	r1, r4
    3dc6:	4638      	mov	r0, r7
    3dc8:	f006 ff30 	bl	ac2c <get_sub_config>
    3dcc:	6843      	ldr	r3, [r0, #4]
    3dce:	4798      	blx	r3
	return 0;
    3dd0:	2000      	movs	r0, #0
}
    3dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3dd6:	f8df 801c 	ldr.w	r8, [pc, #28]	; 3df4 <stop+0x54>
    3dda:	f240 134d 	movw	r3, #333	; 0x14d
    3dde:	4642      	mov	r2, r8
    3de0:	4905      	ldr	r1, [pc, #20]	; (3df8 <stop+0x58>)
    3de2:	4806      	ldr	r0, [pc, #24]	; (3dfc <stop+0x5c>)
    3de4:	f006 fda0 	bl	a928 <assert_print>
    3de8:	f240 114d 	movw	r1, #333	; 0x14d
    3dec:	4640      	mov	r0, r8
    3dee:	f006 fd94 	bl	a91a <assert_post_action>
    3df2:	e7e0      	b.n	3db6 <stop+0x16>
    3df4:	0000d3d8 	.word	0x0000d3d8
    3df8:	0000d418 	.word	0x0000d418
    3dfc:	0000c294 	.word	0x0000c294

00003e00 <onoff_stop>:
{
    3e00:	b538      	push	{r3, r4, r5, lr}
    3e02:	4605      	mov	r5, r0
    3e04:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3e06:	f7ff ff73 	bl	3cf0 <get_subsys>
    3e0a:	4601      	mov	r1, r0
    3e0c:	2240      	movs	r2, #64	; 0x40
    3e0e:	4803      	ldr	r0, [pc, #12]	; (3e1c <onoff_stop+0x1c>)
    3e10:	f7ff ffc6 	bl	3da0 <stop>
    3e14:	4601      	mov	r1, r0
	notify(mgr, res);
    3e16:	4628      	mov	r0, r5
    3e18:	47a0      	blx	r4
}
    3e1a:	bd38      	pop	{r3, r4, r5, pc}
    3e1c:	0000be94 	.word	0x0000be94

00003e20 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    3e20:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    3e22:	2801      	cmp	r0, #1
    3e24:	d01d      	beq.n	3e62 <clock_event_handler+0x42>
    3e26:	2803      	cmp	r0, #3
    3e28:	d020      	beq.n	3e6c <clock_event_handler+0x4c>
    3e2a:	b168      	cbz	r0, 3e48 <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    3e2c:	4c16      	ldr	r4, [pc, #88]	; (3e88 <clock_event_handler+0x68>)
    3e2e:	f240 2362 	movw	r3, #610	; 0x262
    3e32:	4622      	mov	r2, r4
    3e34:	4915      	ldr	r1, [pc, #84]	; (3e8c <clock_event_handler+0x6c>)
    3e36:	4816      	ldr	r0, [pc, #88]	; (3e90 <clock_event_handler+0x70>)
    3e38:	f006 fd76 	bl	a928 <assert_print>
    3e3c:	f240 2162 	movw	r1, #610	; 0x262
    3e40:	4620      	mov	r0, r4
    3e42:	f006 fd6a 	bl	a91a <assert_post_action>
		break;
	}
}
    3e46:	e010      	b.n	3e6a <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3e48:	2100      	movs	r1, #0
    3e4a:	4812      	ldr	r0, [pc, #72]	; (3e94 <clock_event_handler+0x74>)
    3e4c:	f006 fee7 	bl	ac1e <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3e50:	6883      	ldr	r3, [r0, #8]
    3e52:	f013 0f07 	tst.w	r3, #7
    3e56:	d108      	bne.n	3e6a <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3e58:	2100      	movs	r1, #0
    3e5a:	480e      	ldr	r0, [pc, #56]	; (3e94 <clock_event_handler+0x74>)
    3e5c:	f006 ff3a 	bl	acd4 <clkstarted_handle>
    3e60:	e003      	b.n	3e6a <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3e62:	2101      	movs	r1, #1
    3e64:	480b      	ldr	r0, [pc, #44]	; (3e94 <clock_event_handler+0x74>)
    3e66:	f006 ff35 	bl	acd4 <clkstarted_handle>
}
    3e6a:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    3e6c:	4c06      	ldr	r4, [pc, #24]	; (3e88 <clock_event_handler+0x68>)
    3e6e:	f240 235e 	movw	r3, #606	; 0x25e
    3e72:	4622      	mov	r2, r4
    3e74:	4905      	ldr	r1, [pc, #20]	; (3e8c <clock_event_handler+0x6c>)
    3e76:	4806      	ldr	r0, [pc, #24]	; (3e90 <clock_event_handler+0x70>)
    3e78:	f006 fd56 	bl	a928 <assert_print>
    3e7c:	f240 215e 	movw	r1, #606	; 0x25e
    3e80:	4620      	mov	r0, r4
    3e82:	f006 fd4a 	bl	a91a <assert_post_action>
		break;
    3e86:	e7f0      	b.n	3e6a <clock_event_handler+0x4a>
    3e88:	0000d3d8 	.word	0x0000d3d8
    3e8c:	0000c954 	.word	0x0000c954
    3e90:	0000c294 	.word	0x0000c294
    3e94:	0000be94 	.word	0x0000be94

00003e98 <api_blocking_start>:
{
    3e98:	b500      	push	{lr}
    3e9a:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3e9c:	f8cd d000 	str.w	sp, [sp]
    3ea0:	f8cd d004 	str.w	sp, [sp, #4]
    3ea4:	2300      	movs	r3, #0
    3ea6:	9302      	str	r3, [sp, #8]
    3ea8:	2301      	movs	r3, #1
    3eaa:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3eac:	466b      	mov	r3, sp
    3eae:	4a07      	ldr	r2, [pc, #28]	; (3ecc <api_blocking_start+0x34>)
    3eb0:	f006 ff3e 	bl	ad30 <api_start>
	if (err < 0) {
    3eb4:	2800      	cmp	r0, #0
    3eb6:	db05      	blt.n	3ec4 <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    3eb8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3ebc:	2300      	movs	r3, #0
    3ebe:	4668      	mov	r0, sp
    3ec0:	f004 f846 	bl	7f50 <z_impl_k_sem_take>
}
    3ec4:	b005      	add	sp, #20
    3ec6:	f85d fb04 	ldr.w	pc, [sp], #4
    3eca:	bf00      	nop
    3ecc:	0000ad83 	.word	0x0000ad83

00003ed0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    3ed0:	b570      	push	{r4, r5, r6, lr}
    3ed2:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3ed4:	2200      	movs	r2, #0
    3ed6:	2101      	movs	r1, #1
    3ed8:	4610      	mov	r0, r2
    3eda:	f7fe ff7f 	bl	2ddc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3ede:	4811      	ldr	r0, [pc, #68]	; (3f24 <clk_init+0x54>)
    3ee0:	f001 ff24 	bl	5d2c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3ee4:	4b10      	ldr	r3, [pc, #64]	; (3f28 <clk_init+0x58>)
    3ee6:	4298      	cmp	r0, r3
    3ee8:	d119      	bne.n	3f1e <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3eea:	f001 ff49 	bl	5d80 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    3eee:	2400      	movs	r4, #0
    3ef0:	2c01      	cmp	r4, #1
    3ef2:	d812      	bhi.n	3f1a <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    3ef4:	4621      	mov	r1, r4
    3ef6:	4630      	mov	r0, r6
    3ef8:	f006 fe91 	bl	ac1e <get_sub_data>
    3efc:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3efe:	4621      	mov	r1, r4
    3f00:	4630      	mov	r0, r6
    3f02:	f006 fe99 	bl	ac38 <get_onoff_manager>
    3f06:	4909      	ldr	r1, [pc, #36]	; (3f2c <clk_init+0x5c>)
    3f08:	f006 fc93 	bl	a832 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3f0c:	2800      	cmp	r0, #0
    3f0e:	db05      	blt.n	3f1c <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3f10:	2301      	movs	r3, #1
    3f12:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    3f14:	441c      	add	r4, r3
    3f16:	b2e4      	uxtb	r4, r4
    3f18:	e7ea      	b.n	3ef0 <clk_init+0x20>
	}

	return 0;
    3f1a:	2000      	movs	r0, #0
}
    3f1c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3f1e:	f06f 0004 	mvn.w	r0, #4
    3f22:	e7fb      	b.n	3f1c <clk_init+0x4c>
    3f24:	00003e21 	.word	0x00003e21
    3f28:	0bad0000 	.word	0x0bad0000
    3f2c:	0000d494 	.word	0x0000d494

00003f30 <lfclk_spinwait>:
{
    3f30:	b570      	push	{r4, r5, r6, lr}
    3f32:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3f34:	2801      	cmp	r0, #1
    3f36:	d107      	bne.n	3f48 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3f38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f3c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3f40:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3f44:	2b01      	cmp	r3, #1
    3f46:	d05a      	beq.n	3ffe <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3f48:	f007 fe68 	bl	bc1c <k_is_in_isr>
    3f4c:	b928      	cbnz	r0, 3f5a <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    3f4e:	4b2f      	ldr	r3, [pc, #188]	; (400c <lfclk_spinwait+0xdc>)
    3f50:	781b      	ldrb	r3, [r3, #0]
    3f52:	2b00      	cmp	r3, #0
    3f54:	d043      	beq.n	3fde <lfclk_spinwait+0xae>
    3f56:	2300      	movs	r3, #0
    3f58:	e000      	b.n	3f5c <lfclk_spinwait+0x2c>
    3f5a:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    3f5c:	461c      	mov	r4, r3
    3f5e:	2b00      	cmp	r3, #0
    3f60:	d03f      	beq.n	3fe2 <lfclk_spinwait+0xb2>
	__asm__ volatile(
    3f62:	f04f 0320 	mov.w	r3, #32
    3f66:	f3ef 8611 	mrs	r6, BASEPRI
    3f6a:	f383 8812 	msr	BASEPRI_MAX, r3
    3f6e:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    3f72:	b924      	cbnz	r4, 3f7e <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    3f74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f78:	2202      	movs	r2, #2
    3f7a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3f7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3f82:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3f86:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3f8a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3f8e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    3f92:	d12d      	bne.n	3ff0 <lfclk_spinwait+0xc0>
    return false;
    3f94:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3f96:	b11a      	cbz	r2, 3fa0 <lfclk_spinwait+0x70>
    3f98:	2b01      	cmp	r3, #1
    3f9a:	d02b      	beq.n	3ff4 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3f9c:	2d01      	cmp	r5, #1
    3f9e:	d029      	beq.n	3ff4 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3fa0:	b30c      	cbz	r4, 3fe6 <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3fa2:	4630      	mov	r0, r6
    3fa4:	f7fe feaa 	bl	2cfc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3fa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3fac:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3fb0:	2b00      	cmp	r3, #0
    3fb2:	d1e4      	bne.n	3f7e <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3fb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3fb8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    3fbc:	2b00      	cmp	r3, #0
    3fbe:	d0de      	beq.n	3f7e <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3fc4:	2200      	movs	r2, #0
    3fc6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3fca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3fce:	2201      	movs	r2, #1
    3fd0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3fd4:	490e      	ldr	r1, [pc, #56]	; (4010 <lfclk_spinwait+0xe0>)
    3fd6:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fda:	609a      	str	r2, [r3, #8]
}
    3fdc:	e7cf      	b.n	3f7e <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3fde:	2301      	movs	r3, #1
    3fe0:	e7bc      	b.n	3f5c <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    3fe2:	2600      	movs	r6, #0
    3fe4:	e7c5      	b.n	3f72 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    3fe6:	2021      	movs	r0, #33	; 0x21
    3fe8:	2100      	movs	r1, #0
    3fea:	f005 fa4d 	bl	9488 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3fee:	e7db      	b.n	3fa8 <lfclk_spinwait+0x78>
                return true;
    3ff0:	2201      	movs	r2, #1
    3ff2:	e7d0      	b.n	3f96 <lfclk_spinwait+0x66>
	if (isr_mode) {
    3ff4:	b124      	cbz	r4, 4000 <lfclk_spinwait+0xd0>
	__asm__ volatile(
    3ff6:	f386 8811 	msr	BASEPRI, r6
    3ffa:	f3bf 8f6f 	isb	sy
}
    3ffe:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    4000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4004:	2202      	movs	r2, #2
    4006:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    400a:	e7f8      	b.n	3ffe <lfclk_spinwait+0xce>
    400c:	200052ea 	.word	0x200052ea
    4010:	e000e100 	.word	0xe000e100

00004014 <generic_hfclk_start>:
{
    4014:	b510      	push	{r4, lr}
	__asm__ volatile(
    4016:	f04f 0320 	mov.w	r3, #32
    401a:	f3ef 8411 	mrs	r4, BASEPRI
    401e:	f383 8812 	msr	BASEPRI_MAX, r3
    4022:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4026:	4a13      	ldr	r2, [pc, #76]	; (4074 <generic_hfclk_start+0x60>)
    4028:	6813      	ldr	r3, [r2, #0]
    402a:	f043 0302 	orr.w	r3, r3, #2
    402e:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4030:	f013 0f01 	tst.w	r3, #1
    4034:	d108      	bne.n	4048 <generic_hfclk_start+0x34>
	bool already_started = false;
    4036:	2300      	movs	r3, #0
	__asm__ volatile(
    4038:	f384 8811 	msr	BASEPRI, r4
    403c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4040:	b99b      	cbnz	r3, 406a <generic_hfclk_start+0x56>
	hfclk_start();
    4042:	f006 fe85 	bl	ad50 <hfclk_start>
}
    4046:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4048:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    404c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4050:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4054:	f012 0f01 	tst.w	r2, #1
    4058:	d101      	bne.n	405e <generic_hfclk_start+0x4a>
	bool already_started = false;
    405a:	2300      	movs	r3, #0
    405c:	e7ec      	b.n	4038 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    405e:	f7ff fe43 	bl	3ce8 <get_hf_flags>
    4062:	f006 fe24 	bl	acae <set_on_state>
			already_started = true;
    4066:	2301      	movs	r3, #1
    4068:	e7e6      	b.n	4038 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    406a:	2100      	movs	r1, #0
    406c:	4802      	ldr	r0, [pc, #8]	; (4078 <generic_hfclk_start+0x64>)
    406e:	f006 fe31 	bl	acd4 <clkstarted_handle>
		return;
    4072:	e7e8      	b.n	4046 <generic_hfclk_start+0x32>
    4074:	20004bbc 	.word	0x20004bbc
    4078:	0000be94 	.word	0x0000be94

0000407c <z_nrf_clock_control_lf_on>:
{
    407c:	b538      	push	{r3, r4, r5, lr}
    407e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4080:	4b1f      	ldr	r3, [pc, #124]	; (4100 <z_nrf_clock_control_lf_on+0x84>)
    4082:	2101      	movs	r1, #1
    4084:	f3bf 8f5b 	dmb	ish
    4088:	e853 2f00 	ldrex	r2, [r3]
    408c:	e843 1000 	strex	r0, r1, [r3]
    4090:	2800      	cmp	r0, #0
    4092:	d1f9      	bne.n	4088 <z_nrf_clock_control_lf_on+0xc>
    4094:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4098:	b142      	cbz	r2, 40ac <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    409a:	b134      	cbz	r4, 40aa <z_nrf_clock_control_lf_on+0x2e>
    409c:	1e63      	subs	r3, r4, #1
    409e:	b2db      	uxtb	r3, r3
    40a0:	2b01      	cmp	r3, #1
    40a2:	d81f      	bhi.n	40e4 <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    40a4:	4620      	mov	r0, r4
    40a6:	f7ff ff43 	bl	3f30 <lfclk_spinwait>
}
    40aa:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    40ac:	4815      	ldr	r0, [pc, #84]	; (4104 <z_nrf_clock_control_lf_on+0x88>)
    40ae:	f006 fdc3 	bl	ac38 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    40b2:	4915      	ldr	r1, [pc, #84]	; (4108 <z_nrf_clock_control_lf_on+0x8c>)
    40b4:	2300      	movs	r3, #0
    40b6:	604b      	str	r3, [r1, #4]
    40b8:	608b      	str	r3, [r1, #8]
    40ba:	60cb      	str	r3, [r1, #12]
    40bc:	2301      	movs	r3, #1
    40be:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    40c0:	f7fc fff4 	bl	10ac <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    40c4:	2800      	cmp	r0, #0
    40c6:	dae8      	bge.n	409a <z_nrf_clock_control_lf_on+0x1e>
    40c8:	4d10      	ldr	r5, [pc, #64]	; (410c <z_nrf_clock_control_lf_on+0x90>)
    40ca:	f44f 7308 	mov.w	r3, #544	; 0x220
    40ce:	462a      	mov	r2, r5
    40d0:	490f      	ldr	r1, [pc, #60]	; (4110 <z_nrf_clock_control_lf_on+0x94>)
    40d2:	4810      	ldr	r0, [pc, #64]	; (4114 <z_nrf_clock_control_lf_on+0x98>)
    40d4:	f006 fc28 	bl	a928 <assert_print>
    40d8:	f44f 7108 	mov.w	r1, #544	; 0x220
    40dc:	4628      	mov	r0, r5
    40de:	f006 fc1c 	bl	a91a <assert_post_action>
    40e2:	e7da      	b.n	409a <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    40e4:	4c09      	ldr	r4, [pc, #36]	; (410c <z_nrf_clock_control_lf_on+0x90>)
    40e6:	f240 2332 	movw	r3, #562	; 0x232
    40ea:	4622      	mov	r2, r4
    40ec:	490a      	ldr	r1, [pc, #40]	; (4118 <z_nrf_clock_control_lf_on+0x9c>)
    40ee:	4809      	ldr	r0, [pc, #36]	; (4114 <z_nrf_clock_control_lf_on+0x98>)
    40f0:	f006 fc1a 	bl	a928 <assert_print>
    40f4:	f240 2132 	movw	r1, #562	; 0x232
    40f8:	4620      	mov	r0, r4
    40fa:	f006 fc0e 	bl	a91a <assert_post_action>
    40fe:	e7d4      	b.n	40aa <z_nrf_clock_control_lf_on+0x2e>
    4100:	20004bc0 	.word	0x20004bc0
    4104:	0000be94 	.word	0x0000be94
    4108:	20004b54 	.word	0x20004b54
    410c:	0000d3d8 	.word	0x0000d3d8
    4110:	0000c8bc 	.word	0x0000c8bc
    4114:	0000c294 	.word	0x0000c294
    4118:	0000c954 	.word	0x0000c954

0000411c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    411c:	b510      	push	{r4, lr}
    411e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    4120:	280a      	cmp	r0, #10
    4122:	d007      	beq.n	4134 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4124:	4b07      	ldr	r3, [pc, #28]	; (4144 <console_out+0x28>)
    4126:	6818      	ldr	r0, [r3, #0]
    4128:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    412a:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    412c:	69db      	ldr	r3, [r3, #28]
    412e:	4798      	blx	r3

	return c;
}
    4130:	4620      	mov	r0, r4
    4132:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    4134:	4b03      	ldr	r3, [pc, #12]	; (4144 <console_out+0x28>)
    4136:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    4138:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    413a:	69db      	ldr	r3, [r3, #28]
    413c:	210d      	movs	r1, #13
    413e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    4140:	e7f0      	b.n	4124 <console_out+0x8>
    4142:	bf00      	nop
    4144:	20004bc4 	.word	0x20004bc4

00004148 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    4148:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    414a:	4c04      	ldr	r4, [pc, #16]	; (415c <uart_console_hook_install+0x14>)
    414c:	4620      	mov	r0, r4
    414e:	f7ff fd2b 	bl	3ba8 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    4152:	4620      	mov	r0, r4
    4154:	f7fc fd10 	bl	b78 <__printk_hook_install>
#endif
}
    4158:	bd10      	pop	{r4, pc}
    415a:	bf00      	nop
    415c:	0000411d 	.word	0x0000411d

00004160 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4160:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4162:	4806      	ldr	r0, [pc, #24]	; (417c <uart_console_init+0x1c>)
    4164:	4b06      	ldr	r3, [pc, #24]	; (4180 <uart_console_init+0x20>)
    4166:	6018      	str	r0, [r3, #0]
    4168:	f007 fcfc 	bl	bb64 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    416c:	b118      	cbz	r0, 4176 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    416e:	f7ff ffeb 	bl	4148 <uart_console_hook_install>

	return 0;
    4172:	2000      	movs	r0, #0
}
    4174:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4176:	f06f 0012 	mvn.w	r0, #18
    417a:	e7fb      	b.n	4174 <uart_console_init+0x14>
    417c:	0000bef4 	.word	0x0000bef4
    4180:	20004bc4 	.word	0x20004bc4

00004184 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4184:	b128      	cbz	r0, 4192 <get_dev+0xe>
    4186:	2801      	cmp	r0, #1
    4188:	d101      	bne.n	418e <get_dev+0xa>
    418a:	4803      	ldr	r0, [pc, #12]	; (4198 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    418c:	4770      	bx	lr
	const struct device *dev = NULL;
    418e:	2000      	movs	r0, #0
    4190:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4192:	4802      	ldr	r0, [pc, #8]	; (419c <get_dev+0x18>)
    4194:	4770      	bx	lr
    4196:	bf00      	nop
    4198:	0000beac 	.word	0x0000beac
    419c:	0000bec4 	.word	0x0000bec4

000041a0 <gpio_nrfx_manage_callback>:
{
    41a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41a4:	4616      	mov	r6, r2
	return port->data;
    41a6:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    41a8:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    41aa:	460c      	mov	r4, r1
    41ac:	b131      	cbz	r1, 41bc <__data_size+0xc>
	__ASSERT(callback->handler, "No callback handler!");
    41ae:	6863      	ldr	r3, [r4, #4]
    41b0:	b1a3      	cbz	r3, 41dc <__data_size+0x2c>
	return list->head;
    41b2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    41b4:	2b00      	cmp	r3, #0
    41b6:	d03b      	beq.n	4230 <__data_size+0x80>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    41b8:	2100      	movs	r1, #0
    41ba:	e02a      	b.n	4212 <__data_size+0x62>
	__ASSERT(callback, "No callback!");
    41bc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4254 <__data_size+0xa4>
    41c0:	2324      	movs	r3, #36	; 0x24
    41c2:	4642      	mov	r2, r8
    41c4:	4924      	ldr	r1, [pc, #144]	; (4258 <__data_size+0xa8>)
    41c6:	4825      	ldr	r0, [pc, #148]	; (425c <__data_size+0xac>)
    41c8:	f006 fbae 	bl	a928 <assert_print>
    41cc:	4824      	ldr	r0, [pc, #144]	; (4260 <__data_size+0xb0>)
    41ce:	f006 fbab 	bl	a928 <assert_print>
    41d2:	2124      	movs	r1, #36	; 0x24
    41d4:	4640      	mov	r0, r8
    41d6:	f006 fba0 	bl	a91a <assert_post_action>
    41da:	e7e8      	b.n	41ae <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    41dc:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4254 <__data_size+0xa4>
    41e0:	2325      	movs	r3, #37	; 0x25
    41e2:	4642      	mov	r2, r8
    41e4:	491f      	ldr	r1, [pc, #124]	; (4264 <__data_size+0xb4>)
    41e6:	481d      	ldr	r0, [pc, #116]	; (425c <__data_size+0xac>)
    41e8:	f006 fb9e 	bl	a928 <assert_print>
    41ec:	481e      	ldr	r0, [pc, #120]	; (4268 <__data_size+0xb8>)
    41ee:	f006 fb9b 	bl	a928 <assert_print>
    41f2:	2125      	movs	r1, #37	; 0x25
    41f4:	4640      	mov	r0, r8
    41f6:	f006 fb90 	bl	a91a <assert_post_action>
    41fa:	e7da      	b.n	41b2 <__data_size+0x2>
	return node->next;
    41fc:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    41fe:	606b      	str	r3, [r5, #4]
	return list->tail;
    4200:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    4202:	4294      	cmp	r4, r2
    4204:	d10f      	bne.n	4226 <__data_size+0x76>
	list->tail = node;
    4206:	607b      	str	r3, [r7, #4]
}
    4208:	e00d      	b.n	4226 <__data_size+0x76>
	list->tail = node;
    420a:	6079      	str	r1, [r7, #4]
}
    420c:	e00b      	b.n	4226 <__data_size+0x76>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    420e:	4619      	mov	r1, r3
    4210:	681b      	ldr	r3, [r3, #0]
    4212:	b15b      	cbz	r3, 422c <__data_size+0x7c>
    4214:	429c      	cmp	r4, r3
    4216:	d1fa      	bne.n	420e <__data_size+0x5e>
Z_GENLIST_REMOVE(slist, snode)
    4218:	2900      	cmp	r1, #0
    421a:	d0ef      	beq.n	41fc <__data_size+0x4c>
	return node->next;
    421c:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    421e:	600b      	str	r3, [r1, #0]
	return list->tail;
    4220:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    4222:	429c      	cmp	r4, r3
    4224:	d0f1      	beq.n	420a <__data_size+0x5a>
	parent->next = child;
    4226:	2300      	movs	r3, #0
    4228:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    422a:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    422c:	b903      	cbnz	r3, 4230 <__data_size+0x80>
			if (!set) {
    422e:	b156      	cbz	r6, 4246 <__data_size+0x96>
				return -EINVAL;
			}
		}
	}

	if (set) {
    4230:	b166      	cbz	r6, 424c <__data_size+0x9c>
	return list->head;
    4232:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    4234:	6023      	str	r3, [r4, #0]
	list->head = node;
    4236:	606c      	str	r4, [r5, #4]
	return list->tail;
    4238:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    423a:	b10b      	cbz	r3, 4240 <__data_size+0x90>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    423c:	2000      	movs	r0, #0
    423e:	e006      	b.n	424e <__data_size+0x9e>
	list->tail = node;
    4240:	607c      	str	r4, [r7, #4]
    4242:	2000      	movs	r0, #0
}
    4244:	e003      	b.n	424e <__data_size+0x9e>
				return -EINVAL;
    4246:	f06f 0015 	mvn.w	r0, #21
    424a:	e000      	b.n	424e <__data_size+0x9e>
	return 0;
    424c:	2000      	movs	r0, #0
}
    424e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4252:	bf00      	nop
    4254:	0000d4a0 	.word	0x0000d4a0
    4258:	0000d4d0 	.word	0x0000d4d0
    425c:	0000c294 	.word	0x0000c294
    4260:	0000d4dc 	.word	0x0000d4dc
    4264:	0000d4ec 	.word	0x0000d4ec
    4268:	0000d500 	.word	0x0000d500

0000426c <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    426c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    4270:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    4274:	0940      	lsrs	r0, r0, #5
    4276:	f7ff ff85 	bl	4184 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    427a:	b380      	cbz	r0, 42de <nrfx_gpio_handler+0x72>
    427c:	4607      	mov	r7, r0
	return port->data;
    427e:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    4280:	2601      	movs	r6, #1
    4282:	40a6      	lsls	r6, r4
	return list->head;
    4284:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4286:	b11c      	cbz	r4, 4290 <nrfx_gpio_handler+0x24>
    4288:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    428a:	b17c      	cbz	r4, 42ac <nrfx_gpio_handler+0x40>
	return node->next;
    428c:	6825      	ldr	r5, [r4, #0]
    428e:	e00d      	b.n	42ac <nrfx_gpio_handler+0x40>
    4290:	4625      	mov	r5, r4
    4292:	e00b      	b.n	42ac <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    4294:	6863      	ldr	r3, [r4, #4]
    4296:	68a2      	ldr	r2, [r4, #8]
    4298:	4032      	ands	r2, r6
    429a:	4621      	mov	r1, r4
    429c:	4638      	mov	r0, r7
    429e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    42a0:	b1dd      	cbz	r5, 42da <nrfx_gpio_handler+0x6e>
    42a2:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    42a4:	b105      	cbz	r5, 42a8 <nrfx_gpio_handler+0x3c>
	return node->next;
    42a6:	682b      	ldr	r3, [r5, #0]
    42a8:	462c      	mov	r4, r5
    42aa:	461d      	mov	r5, r3
    42ac:	b1bc      	cbz	r4, 42de <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    42ae:	68a3      	ldr	r3, [r4, #8]
    42b0:	421e      	tst	r6, r3
    42b2:	d0f5      	beq.n	42a0 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    42b4:	6863      	ldr	r3, [r4, #4]
    42b6:	2b00      	cmp	r3, #0
    42b8:	d1ec      	bne.n	4294 <nrfx_gpio_handler+0x28>
    42ba:	f8df 8028 	ldr.w	r8, [pc, #40]	; 42e4 <nrfx_gpio_handler+0x78>
    42be:	2345      	movs	r3, #69	; 0x45
    42c0:	4642      	mov	r2, r8
    42c2:	4909      	ldr	r1, [pc, #36]	; (42e8 <nrfx_gpio_handler+0x7c>)
    42c4:	4809      	ldr	r0, [pc, #36]	; (42ec <nrfx_gpio_handler+0x80>)
    42c6:	f006 fb2f 	bl	a928 <assert_print>
    42ca:	4809      	ldr	r0, [pc, #36]	; (42f0 <nrfx_gpio_handler+0x84>)
    42cc:	f006 fb2c 	bl	a928 <assert_print>
    42d0:	2145      	movs	r1, #69	; 0x45
    42d2:	4640      	mov	r0, r8
    42d4:	f006 fb21 	bl	a91a <assert_post_action>
    42d8:	e7dc      	b.n	4294 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    42da:	462b      	mov	r3, r5
    42dc:	e7e4      	b.n	42a8 <nrfx_gpio_handler+0x3c>
}
    42de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42e2:	bf00      	nop
    42e4:	0000d4a0 	.word	0x0000d4a0
    42e8:	0000d518 	.word	0x0000d518
    42ec:	0000c294 	.word	0x0000c294
    42f0:	0000d500 	.word	0x0000d500

000042f4 <gpio_nrfx_pin_interrupt_configure>:
{
    42f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42f6:	b085      	sub	sp, #20
    42f8:	460e      	mov	r6, r1
    42fa:	4619      	mov	r1, r3
	return port->config;
    42fc:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    42fe:	7b1b      	ldrb	r3, [r3, #12]
    4300:	f006 041f 	and.w	r4, r6, #31
    4304:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4308:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    430c:	d022      	beq.n	4354 <gpio_nrfx_pin_interrupt_configure+0x60>
    430e:	4607      	mov	r7, r0
    4310:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4312:	2300      	movs	r3, #0
    4314:	9302      	str	r3, [sp, #8]
    4316:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    4318:	4610      	mov	r0, r2
    431a:	f006 fdb0 	bl	ae7e <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    431e:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    4322:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4324:	6899      	ldr	r1, [r3, #8]
    4326:	40f1      	lsrs	r1, r6
    4328:	f011 0101 	ands.w	r1, r1, #1
    432c:	d102      	bne.n	4334 <gpio_nrfx_pin_interrupt_configure+0x40>
    432e:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    4332:	d014      	beq.n	435e <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4334:	2300      	movs	r3, #0
    4336:	aa02      	add	r2, sp, #8
    4338:	4619      	mov	r1, r3
    433a:	4620      	mov	r0, r4
    433c:	f002 f99a 	bl	6674 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4340:	4b32      	ldr	r3, [pc, #200]	; (440c <gpio_nrfx_pin_interrupt_configure+0x118>)
    4342:	4298      	cmp	r0, r3
    4344:	d15f      	bne.n	4406 <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4346:	2101      	movs	r1, #1
    4348:	4620      	mov	r0, r4
    434a:	f002 fbf7 	bl	6b3c <nrfx_gpiote_trigger_enable>
	return 0;
    434e:	2000      	movs	r0, #0
}
    4350:	b005      	add	sp, #20
    4352:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    4354:	4620      	mov	r0, r4
    4356:	f002 fcfd 	bl	6d54 <nrfx_gpiote_trigger_disable>
		return 0;
    435a:	2000      	movs	r0, #0
    435c:	e7f8      	b.n	4350 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    435e:	0963      	lsrs	r3, r4, #5
    4360:	d01f      	beq.n	43a2 <gpio_nrfx_pin_interrupt_configure+0xae>
    4362:	2b01      	cmp	r3, #1
    4364:	d101      	bne.n	436a <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    4366:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    436a:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    436e:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4370:	f011 0f01 	tst.w	r1, #1
    4374:	d018      	beq.n	43a8 <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    4376:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    437a:	0963      	lsrs	r3, r4, #5
    437c:	d022      	beq.n	43c4 <gpio_nrfx_pin_interrupt_configure+0xd0>
    437e:	2b01      	cmp	r3, #1
    4380:	d023      	beq.n	43ca <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    4382:	4e23      	ldr	r6, [pc, #140]	; (4410 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    4384:	f240 232e 	movw	r3, #558	; 0x22e
    4388:	4632      	mov	r2, r6
    438a:	4922      	ldr	r1, [pc, #136]	; (4414 <gpio_nrfx_pin_interrupt_configure+0x120>)
    438c:	4822      	ldr	r0, [pc, #136]	; (4418 <gpio_nrfx_pin_interrupt_configure+0x124>)
    438e:	f006 facb 	bl	a928 <assert_print>
    4392:	f240 212e 	movw	r1, #558	; 0x22e
    4396:	4630      	mov	r0, r6
    4398:	f006 fabf 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    439c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    43a0:	e014      	b.n	43cc <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    43a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    43a6:	e7e0      	b.n	436a <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    43a8:	4d19      	ldr	r5, [pc, #100]	; (4410 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    43aa:	f240 2329 	movw	r3, #553	; 0x229
    43ae:	462a      	mov	r2, r5
    43b0:	491a      	ldr	r1, [pc, #104]	; (441c <gpio_nrfx_pin_interrupt_configure+0x128>)
    43b2:	4819      	ldr	r0, [pc, #100]	; (4418 <gpio_nrfx_pin_interrupt_configure+0x124>)
    43b4:	f006 fab8 	bl	a928 <assert_print>
    43b8:	f240 2129 	movw	r1, #553	; 0x229
    43bc:	4628      	mov	r0, r5
    43be:	f006 faac 	bl	a91a <assert_post_action>
    43c2:	e7d8      	b.n	4376 <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    43c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    43c8:	e000      	b.n	43cc <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    43ca:	4b15      	ldr	r3, [pc, #84]	; (4420 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    43cc:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    43d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    43d4:	f013 0f01 	tst.w	r3, #1
    43d8:	d1ac      	bne.n	4334 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    43da:	f10d 0107 	add.w	r1, sp, #7
    43de:	4620      	mov	r0, r4
    43e0:	f002 fb3c 	bl	6a5c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    43e4:	4b0f      	ldr	r3, [pc, #60]	; (4424 <gpio_nrfx_pin_interrupt_configure+0x130>)
    43e6:	4298      	cmp	r0, r3
    43e8:	d003      	beq.n	43f2 <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    43ea:	f10d 0307 	add.w	r3, sp, #7
    43ee:	9303      	str	r3, [sp, #12]
    43f0:	e7a0      	b.n	4334 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    43f2:	f10d 0007 	add.w	r0, sp, #7
    43f6:	f002 fb99 	bl	6b2c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    43fa:	4b04      	ldr	r3, [pc, #16]	; (440c <gpio_nrfx_pin_interrupt_configure+0x118>)
    43fc:	4298      	cmp	r0, r3
    43fe:	d0f4      	beq.n	43ea <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    4400:	f06f 000b 	mvn.w	r0, #11
    4404:	e7a4      	b.n	4350 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    4406:	f06f 0004 	mvn.w	r0, #4
    440a:	e7a1      	b.n	4350 <gpio_nrfx_pin_interrupt_configure+0x5c>
    440c:	0bad0000 	.word	0x0bad0000
    4410:	0000d524 	.word	0x0000d524
    4414:	0000c954 	.word	0x0000c954
    4418:	0000c294 	.word	0x0000c294
    441c:	0000d558 	.word	0x0000d558
    4420:	50000300 	.word	0x50000300
    4424:	0bad0004 	.word	0x0bad0004

00004428 <pin_uninit>:
{
    4428:	b530      	push	{r4, r5, lr}
    442a:	b083      	sub	sp, #12
    442c:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    442e:	f10d 0107 	add.w	r1, sp, #7
    4432:	f002 fb13 	bl	6a5c <nrfx_gpiote_channel_get>
    4436:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    4438:	4620      	mov	r0, r4
    443a:	f002 fcf3 	bl	6e24 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    443e:	4b0b      	ldr	r3, [pc, #44]	; (446c <pin_uninit+0x44>)
    4440:	4298      	cmp	r0, r3
    4442:	d10f      	bne.n	4464 <pin_uninit+0x3c>
	if (free_ch) {
    4444:	429d      	cmp	r5, r3
    4446:	d005      	beq.n	4454 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4448:	4b08      	ldr	r3, [pc, #32]	; (446c <pin_uninit+0x44>)
    444a:	4298      	cmp	r0, r3
    444c:	d107      	bne.n	445e <pin_uninit+0x36>
    444e:	2000      	movs	r0, #0
}
    4450:	b003      	add	sp, #12
    4452:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    4454:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4458:	f002 fb60 	bl	6b1c <nrfx_gpiote_channel_free>
    445c:	e7f4      	b.n	4448 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    445e:	f06f 0004 	mvn.w	r0, #4
    4462:	e7f5      	b.n	4450 <pin_uninit+0x28>
		return -EIO;
    4464:	f06f 0004 	mvn.w	r0, #4
    4468:	e7f2      	b.n	4450 <pin_uninit+0x28>
    446a:	bf00      	nop
    446c:	0bad0000 	.word	0x0bad0000

00004470 <gpio_nrfx_pin_configure>:
{
    4470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4474:	b087      	sub	sp, #28
	return port->config;
    4476:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    447a:	f898 300c 	ldrb.w	r3, [r8, #12]
    447e:	f001 051f 	and.w	r5, r1, #31
    4482:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    4486:	2a00      	cmp	r2, #0
    4488:	d044      	beq.n	4514 <gpio_nrfx_pin_configure+0xa4>
    448a:	460c      	mov	r4, r1
    448c:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    448e:	2600      	movs	r6, #0
    4490:	9603      	str	r6, [sp, #12]
    4492:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    4494:	f10d 0117 	add.w	r1, sp, #23
    4498:	4620      	mov	r0, r4
    449a:	f002 fadf 	bl	6a5c <nrfx_gpiote_channel_get>
    449e:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    44a0:	4633      	mov	r3, r6
    44a2:	aa03      	add	r2, sp, #12
    44a4:	4631      	mov	r1, r6
    44a6:	4628      	mov	r0, r5
    44a8:	f002 f8e4 	bl	6674 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    44ac:	4b30      	ldr	r3, [pc, #192]	; (4570 <gpio_nrfx_pin_configure+0x100>)
    44ae:	4298      	cmp	r0, r3
    44b0:	d15b      	bne.n	456a <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    44b2:	4599      	cmp	r9, r3
    44b4:	d036      	beq.n	4524 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    44b6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    44ba:	d043      	beq.n	4544 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    44bc:	f10d 0103 	add.w	r1, sp, #3
    44c0:	4638      	mov	r0, r7
    44c2:	f006 fc63 	bl	ad8c <get_drive>
		if (rv != 0) {
    44c6:	4606      	mov	r6, r0
    44c8:	bb40      	cbnz	r0, 451c <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    44ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
    44ce:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    44d2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    44d6:	bf0c      	ite	eq
    44d8:	2301      	moveq	r3, #1
    44da:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    44dc:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    44e0:	4638      	mov	r0, r7
    44e2:	f006 fc99 	bl	ae18 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    44e6:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    44ea:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    44ee:	d01e      	beq.n	452e <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    44f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    44f4:	2101      	movs	r1, #1
    44f6:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    44fa:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    44fe:	2200      	movs	r2, #0
    4500:	a901      	add	r1, sp, #4
    4502:	4628      	mov	r0, r5
    4504:	f002 f9aa 	bl	685c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4508:	4b19      	ldr	r3, [pc, #100]	; (4570 <gpio_nrfx_pin_configure+0x100>)
    450a:	4298      	cmp	r0, r3
    450c:	d006      	beq.n	451c <gpio_nrfx_pin_configure+0xac>
    450e:	f06f 0615 	mvn.w	r6, #21
    4512:	e003      	b.n	451c <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    4514:	4628      	mov	r0, r5
    4516:	f7ff ff87 	bl	4428 <pin_uninit>
    451a:	4606      	mov	r6, r0
}
    451c:	4630      	mov	r0, r6
    451e:	b007      	add	sp, #28
    4520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    4524:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4528:	f002 faf8 	bl	6b1c <nrfx_gpiote_channel_free>
    452c:	e7c3      	b.n	44b6 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    452e:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    4532:	d0e4      	beq.n	44fe <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4534:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4538:	2301      	movs	r3, #1
    453a:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    453e:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    4542:	e7dc      	b.n	44fe <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    4544:	4638      	mov	r0, r7
    4546:	f006 fc67 	bl	ae18 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    454a:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    454e:	2300      	movs	r3, #0
    4550:	461a      	mov	r2, r3
    4552:	a902      	add	r1, sp, #8
    4554:	4628      	mov	r0, r5
    4556:	f002 f88d 	bl	6674 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    455a:	4b05      	ldr	r3, [pc, #20]	; (4570 <gpio_nrfx_pin_configure+0x100>)
    455c:	4298      	cmp	r0, r3
    455e:	d101      	bne.n	4564 <gpio_nrfx_pin_configure+0xf4>
    4560:	2600      	movs	r6, #0
    4562:	e7db      	b.n	451c <gpio_nrfx_pin_configure+0xac>
    4564:	f06f 0615 	mvn.w	r6, #21
    4568:	e7d8      	b.n	451c <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    456a:	f06f 0615 	mvn.w	r6, #21
    456e:	e7d5      	b.n	451c <gpio_nrfx_pin_configure+0xac>
    4570:	0bad0000 	.word	0x0bad0000

00004574 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4574:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    4576:	f002 fac7 	bl	6b08 <nrfx_gpiote_is_init>
    457a:	b108      	cbz	r0, 4580 <gpio_nrfx_init+0xc>
		return 0;
    457c:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    457e:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    4580:	f002 fa98 	bl	6ab4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4584:	4b08      	ldr	r3, [pc, #32]	; (45a8 <gpio_nrfx_init+0x34>)
    4586:	4298      	cmp	r0, r3
    4588:	d10a      	bne.n	45a0 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    458a:	2100      	movs	r1, #0
    458c:	4807      	ldr	r0, [pc, #28]	; (45ac <gpio_nrfx_init+0x38>)
    458e:	f002 fa5f 	bl	6a50 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4592:	2200      	movs	r2, #0
    4594:	2105      	movs	r1, #5
    4596:	2006      	movs	r0, #6
    4598:	f7fe fc20 	bl	2ddc <z_arm_irq_priority_set>
	return 0;
    459c:	2000      	movs	r0, #0
    459e:	e7ee      	b.n	457e <gpio_nrfx_init+0xa>
		return -EIO;
    45a0:	f06f 0004 	mvn.w	r0, #4
    45a4:	e7eb      	b.n	457e <gpio_nrfx_init+0xa>
    45a6:	bf00      	nop
    45a8:	0bad0000 	.word	0x0bad0000
    45ac:	0000426d 	.word	0x0000426d

000045b0 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    45b0:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    45b2:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    45b4:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    45b8:	d06f      	beq.n	469a <baudrate_set+0xea>
    45ba:	d83a      	bhi.n	4632 <baudrate_set+0x82>
    45bc:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    45c0:	d06e      	beq.n	46a0 <baudrate_set+0xf0>
    45c2:	d90a      	bls.n	45da <baudrate_set+0x2a>
    45c4:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    45c8:	d075      	beq.n	46b6 <baudrate_set+0x106>
    45ca:	d924      	bls.n	4616 <baudrate_set+0x66>
    45cc:	f647 2312 	movw	r3, #31250	; 0x7a12
    45d0:	4299      	cmp	r1, r3
    45d2:	d12b      	bne.n	462c <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    45d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    45d8:	e013      	b.n	4602 <baudrate_set+0x52>
	switch (baudrate) {
    45da:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    45de:	d061      	beq.n	46a4 <baudrate_set+0xf4>
    45e0:	d907      	bls.n	45f2 <baudrate_set+0x42>
    45e2:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    45e6:	d063      	beq.n	46b0 <baudrate_set+0x100>
    45e8:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    45ec:	d110      	bne.n	4610 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    45ee:	4b3c      	ldr	r3, [pc, #240]	; (46e0 <baudrate_set+0x130>)
    45f0:	e007      	b.n	4602 <baudrate_set+0x52>
	switch (baudrate) {
    45f2:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    45f6:	d058      	beq.n	46aa <baudrate_set+0xfa>
    45f8:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    45fc:	d105      	bne.n	460a <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    45fe:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    4602:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    4606:	2000      	movs	r0, #0
    4608:	4770      	bx	lr
	switch (baudrate) {
    460a:	f06f 0015 	mvn.w	r0, #21
    460e:	4770      	bx	lr
    4610:	f06f 0015 	mvn.w	r0, #21
    4614:	4770      	bx	lr
    4616:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    461a:	d04e      	beq.n	46ba <baudrate_set+0x10a>
    461c:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    4620:	d101      	bne.n	4626 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    4622:	4b30      	ldr	r3, [pc, #192]	; (46e4 <baudrate_set+0x134>)
    4624:	e7ed      	b.n	4602 <baudrate_set+0x52>
	switch (baudrate) {
    4626:	f06f 0015 	mvn.w	r0, #21
    462a:	4770      	bx	lr
    462c:	f06f 0015 	mvn.w	r0, #21
    4630:	4770      	bx	lr
    4632:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    4636:	d042      	beq.n	46be <baudrate_set+0x10e>
    4638:	d909      	bls.n	464e <baudrate_set+0x9e>
    463a:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    463e:	d046      	beq.n	46ce <baudrate_set+0x11e>
    4640:	d91f      	bls.n	4682 <baudrate_set+0xd2>
    4642:	4b29      	ldr	r3, [pc, #164]	; (46e8 <baudrate_set+0x138>)
    4644:	4299      	cmp	r1, r3
    4646:	d148      	bne.n	46da <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    4648:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    464c:	e7d9      	b.n	4602 <baudrate_set+0x52>
	switch (baudrate) {
    464e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    4652:	d037      	beq.n	46c4 <baudrate_set+0x114>
    4654:	d905      	bls.n	4662 <baudrate_set+0xb2>
    4656:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    465a:	d10f      	bne.n	467c <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    465c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    4660:	e7cf      	b.n	4602 <baudrate_set+0x52>
	switch (baudrate) {
    4662:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    4666:	4299      	cmp	r1, r3
    4668:	d02e      	beq.n	46c8 <baudrate_set+0x118>
    466a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    466e:	d102      	bne.n	4676 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    4670:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    4674:	e7c5      	b.n	4602 <baudrate_set+0x52>
	switch (baudrate) {
    4676:	f06f 0015 	mvn.w	r0, #21
    467a:	4770      	bx	lr
    467c:	f06f 0015 	mvn.w	r0, #21
    4680:	4770      	bx	lr
    4682:	4b1a      	ldr	r3, [pc, #104]	; (46ec <baudrate_set+0x13c>)
    4684:	4299      	cmp	r1, r3
    4686:	d025      	beq.n	46d4 <baudrate_set+0x124>
    4688:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    468c:	d102      	bne.n	4694 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    468e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    4692:	e7b6      	b.n	4602 <baudrate_set+0x52>
	switch (baudrate) {
    4694:	f06f 0015 	mvn.w	r0, #21
    4698:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    469a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    469e:	e7b0      	b.n	4602 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    46a0:	4b13      	ldr	r3, [pc, #76]	; (46f0 <baudrate_set+0x140>)
    46a2:	e7ae      	b.n	4602 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    46a4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    46a8:	e7ab      	b.n	4602 <baudrate_set+0x52>
	switch (baudrate) {
    46aa:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    46ae:	e7a8      	b.n	4602 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    46b0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    46b4:	e7a5      	b.n	4602 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    46b6:	4b0f      	ldr	r3, [pc, #60]	; (46f4 <baudrate_set+0x144>)
    46b8:	e7a3      	b.n	4602 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    46ba:	4b0f      	ldr	r3, [pc, #60]	; (46f8 <baudrate_set+0x148>)
    46bc:	e7a1      	b.n	4602 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    46be:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    46c2:	e79e      	b.n	4602 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    46c4:	4b0d      	ldr	r3, [pc, #52]	; (46fc <baudrate_set+0x14c>)
    46c6:	e79c      	b.n	4602 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    46c8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    46cc:	e799      	b.n	4602 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    46ce:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    46d2:	e796      	b.n	4602 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    46d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    46d8:	e793      	b.n	4602 <baudrate_set+0x52>
	switch (baudrate) {
    46da:	f06f 0015 	mvn.w	r0, #21
}
    46de:	4770      	bx	lr
    46e0:	0013b000 	.word	0x0013b000
    46e4:	004ea000 	.word	0x004ea000
    46e8:	000f4240 	.word	0x000f4240
    46ec:	0003d090 	.word	0x0003d090
    46f0:	00275000 	.word	0x00275000
    46f4:	0075c000 	.word	0x0075c000
    46f8:	003af000 	.word	0x003af000
    46fc:	013a9000 	.word	0x013a9000

00004700 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    4700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4704:	4605      	mov	r5, r0
    4706:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
    4708:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    470a:	f007 fa87 	bl	bc1c <k_is_in_isr>
    470e:	b920      	cbnz	r0, 471a <uarte_nrfx_poll_out+0x1a>
	return !z_sys_post_kernel;
    4710:	4b1e      	ldr	r3, [pc, #120]	; (478c <uarte_nrfx_poll_out+0x8c>)
    4712:	781b      	ldrb	r3, [r3, #0]
    4714:	b1a3      	cbz	r3, 4740 <uarte_nrfx_poll_out+0x40>
    4716:	2300      	movs	r3, #0
    4718:	e000      	b.n	471c <uarte_nrfx_poll_out+0x1c>
    471a:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    471c:	b9b3      	cbnz	r3, 474c <uarte_nrfx_poll_out+0x4c>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    471e:	4628      	mov	r0, r5
    4720:	f006 fd3e 	bl	b1a0 <wait_tx_ready>
    4724:	4606      	mov	r6, r0
	}

	data->char_out = c;
    4726:	4639      	mov	r1, r7
    4728:	f801 8f14 	strb.w	r8, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    472c:	2201      	movs	r2, #1
    472e:	4628      	mov	r0, r5
    4730:	f006 fc59 	bl	afe6 <tx_start>
    4734:	f386 8811 	msr	BASEPRI, r6
    4738:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    473c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4740:	2301      	movs	r3, #1
    4742:	e7eb      	b.n	471c <uarte_nrfx_poll_out+0x1c>
    4744:	f384 8811 	msr	BASEPRI, r4
    4748:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    474c:	f04f 0320 	mov.w	r3, #32
    4750:	f3ef 8411 	mrs	r4, BASEPRI
    4754:	f383 8812 	msr	BASEPRI_MAX, r3
    4758:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    475c:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    475e:	4628      	mov	r0, r5
    4760:	f006 fc1f 	bl	afa2 <is_tx_ready>
    4764:	2800      	cmp	r0, #0
    4766:	d0ed      	beq.n	4744 <uarte_nrfx_poll_out+0x44>
				if (data->async && data->async->tx_size &&
    4768:	68fb      	ldr	r3, [r7, #12]
    476a:	2b00      	cmp	r3, #0
    476c:	d0db      	beq.n	4726 <uarte_nrfx_poll_out+0x26>
    476e:	68da      	ldr	r2, [r3, #12]
    4770:	2a00      	cmp	r2, #0
    4772:	d0d8      	beq.n	4726 <uarte_nrfx_poll_out+0x26>
					data->async->tx_amount < 0) {
    4774:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    4778:	2a00      	cmp	r2, #0
    477a:	dad4      	bge.n	4726 <uarte_nrfx_poll_out+0x26>
	const struct uarte_nrfx_config *config = dev->config;
    477c:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    477e:	6812      	ldr	r2, [r2, #0]
    p_reg->TXD.MAXCNT = length;
}

NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
    4780:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    4784:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    4788:	e7cd      	b.n	4726 <uarte_nrfx_poll_out+0x26>
    478a:	bf00      	nop
    478c:	200052ea 	.word	0x200052ea

00004790 <uarte_nrfx_rx_enable>:
{
    4790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4794:	4616      	mov	r6, r2
	struct uarte_nrfx_data *data = dev->data;
    4796:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *cfg = dev->config;
    4798:	f8d0 9004 	ldr.w	r9, [r0, #4]
	return config->uarte_regs;
    479c:	f8d9 5000 	ldr.w	r5, [r9]
	if (cfg->disable_rx) {
    47a0:	f899 2008 	ldrb.w	r2, [r9, #8]
    47a4:	b992      	cbnz	r2, 47cc <uarte_nrfx_rx_enable+0x3c>
    47a6:	4680      	mov	r8, r0
    47a8:	460f      	mov	r7, r1
	if (data->async->rx_enabled) {
    47aa:	68e2      	ldr	r2, [r4, #12]
    47ac:	f892 10d2 	ldrb.w	r1, [r2, #210]	; 0xd2
    47b0:	2900      	cmp	r1, #0
    47b2:	f040 8084 	bne.w	48be <uarte_nrfx_rx_enable+0x12e>
	data->async->rx_timeout = timeout;
    47b6:	67d3      	str	r3, [r2, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    47b8:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
    47bc:	dd19      	ble.n	47f2 <uarte_nrfx_rx_enable+0x62>
    47be:	4a41      	ldr	r2, [pc, #260]	; (48c4 <uarte_nrfx_rx_enable+0x134>)
    47c0:	fb82 1203 	smull	r1, r2, r2, r3
    47c4:	17db      	asrs	r3, r3, #31
    47c6:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    47ca:	e013      	b.n	47f4 <uarte_nrfx_rx_enable+0x64>
		__ASSERT(false, "TX only UARTE instance");
    47cc:	4c3e      	ldr	r4, [pc, #248]	; (48c8 <uarte_nrfx_rx_enable+0x138>)
    47ce:	f240 337f 	movw	r3, #895	; 0x37f
    47d2:	4622      	mov	r2, r4
    47d4:	493d      	ldr	r1, [pc, #244]	; (48cc <uarte_nrfx_rx_enable+0x13c>)
    47d6:	483e      	ldr	r0, [pc, #248]	; (48d0 <uarte_nrfx_rx_enable+0x140>)
    47d8:	f006 f8a6 	bl	a928 <assert_print>
    47dc:	483d      	ldr	r0, [pc, #244]	; (48d4 <uarte_nrfx_rx_enable+0x144>)
    47de:	f006 f8a3 	bl	a928 <assert_print>
    47e2:	f240 317f 	movw	r1, #895	; 0x37f
    47e6:	4620      	mov	r0, r4
    47e8:	f006 f897 	bl	a91a <assert_post_action>
		return -ENOTSUP;
    47ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
    47f0:	e03d      	b.n	486e <uarte_nrfx_rx_enable+0xde>
		MAX(timeout / RX_TIMEOUT_DIV,
    47f2:	235c      	movs	r3, #92	; 0x5c
	data->async->rx_timeout_slab =
    47f4:	68e2      	ldr	r2, [r4, #12]
    47f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	data->async->rx_buf = buf;
    47fa:	68e3      	ldr	r3, [r4, #12]
    47fc:	661f      	str	r7, [r3, #96]	; 0x60
	data->async->rx_buf_len = len;
    47fe:	68e3      	ldr	r3, [r4, #12]
    4800:	665e      	str	r6, [r3, #100]	; 0x64
	data->async->rx_offset = 0;
    4802:	68e2      	ldr	r2, [r4, #12]
    4804:	2300      	movs	r3, #0
    4806:	6693      	str	r3, [r2, #104]	; 0x68
	data->async->rx_next_buf = NULL;
    4808:	68e2      	ldr	r2, [r4, #12]
    480a:	66d3      	str	r3, [r2, #108]	; 0x6c
	data->async->rx_next_buf_len = 0;
    480c:	68e2      	ldr	r2, [r4, #12]
    480e:	6713      	str	r3, [r2, #112]	; 0x70
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4810:	f8d9 3004 	ldr.w	r3, [r9, #4]
    4814:	f013 0f10 	tst.w	r3, #16
    4818:	d010      	beq.n	483c <uarte_nrfx_rx_enable+0xac>
		if (data->async->rx_flush_cnt) {
    481a:	68e1      	ldr	r1, [r4, #12]
    481c:	f891 30d1 	ldrb.w	r3, [r1, #209]	; 0xd1
    4820:	b163      	cbz	r3, 483c <uarte_nrfx_rx_enable+0xac>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    4822:	42b3      	cmp	r3, r6
    4824:	bf28      	it	cs
    4826:	4633      	movcs	r3, r6
    4828:	469a      	mov	sl, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    482a:	461a      	mov	r2, r3
    482c:	31cc      	adds	r1, #204	; 0xcc
    482e:	4638      	mov	r0, r7
    4830:	f007 faaa 	bl	bd88 <memcpy>
			buf += cpy_len;
    4834:	4457      	add	r7, sl
			if (!len) {
    4836:	ebb6 060a 	subs.w	r6, r6, sl
    483a:	d01a      	beq.n	4872 <uarte_nrfx_rx_enable+0xe2>

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    483c:	f8c5 7534 	str.w	r7, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4840:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4844:	2300      	movs	r3, #0
    4846:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    484a:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    484e:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
    4852:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	data->async->rx_enabled = true;
    4856:	68e3      	ldr	r3, [r4, #12]
    4858:	2201      	movs	r2, #1
    485a:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    485e:	f8d9 3004 	ldr.w	r3, [r9, #4]
    4862:	f013 0f10 	tst.w	r3, #16
    4866:	d119      	bne.n	489c <uarte_nrfx_rx_enable+0x10c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4868:	2301      	movs	r3, #1
    486a:	602b      	str	r3, [r5, #0]
	return 0;
    486c:	2000      	movs	r0, #0
}
    486e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				data->async->rx_flush_cnt -= cpy_len;
    4872:	68e2      	ldr	r2, [r4, #12]
    4874:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    4878:	eba3 030a 	sub.w	r3, r3, sl
    487c:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    4880:	4651      	mov	r1, sl
    4882:	4640      	mov	r0, r8
    4884:	f006 fbfe 	bl	b084 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    4888:	68e1      	ldr	r1, [r4, #12]
    488a:	3160      	adds	r1, #96	; 0x60
    488c:	4640      	mov	r0, r8
    488e:	f006 fc11 	bl	b0b4 <rx_buf_release>
				notify_rx_disable(dev);
    4892:	4640      	mov	r0, r8
    4894:	f006 fc25 	bl	b0e2 <notify_rx_disable>
				return 0;
    4898:	2000      	movs	r0, #0
    489a:	e7e8      	b.n	486e <uarte_nrfx_rx_enable+0xde>
    489c:	f04f 0320 	mov.w	r3, #32
    48a0:	f3ef 8411 	mrs	r4, BASEPRI
    48a4:	f383 8812 	msr	BASEPRI_MAX, r3
    48a8:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
    48ac:	2102      	movs	r1, #2
    48ae:	4640      	mov	r0, r8
    48b0:	f006 fb8b 	bl	afca <uarte_enable>
	__asm__ volatile(
    48b4:	f384 8811 	msr	BASEPRI, r4
    48b8:	f3bf 8f6f 	isb	sy
}
    48bc:	e7d4      	b.n	4868 <uarte_nrfx_rx_enable+0xd8>
		return -EBUSY;
    48be:	f06f 000f 	mvn.w	r0, #15
    48c2:	e7d4      	b.n	486e <uarte_nrfx_rx_enable+0xde>
    48c4:	66666667 	.word	0x66666667
    48c8:	0000d5d0 	.word	0x0000d5d0
    48cc:	0000c954 	.word	0x0000c954
    48d0:	0000c294 	.word	0x0000c294
    48d4:	0000d604 	.word	0x0000d604

000048d8 <uarte_nrfx_tx>:
{
    48d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    48dc:	b083      	sub	sp, #12
    48de:	4605      	mov	r5, r0
    48e0:	4698      	mov	r8, r3
	struct uarte_nrfx_data *data = dev->data;
    48e2:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    48e4:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    48e6:	6833      	ldr	r3, [r6, #0]
	__asm__ volatile(
    48e8:	f04f 0020 	mov.w	r0, #32
    48ec:	f3ef 8911 	mrs	r9, BASEPRI
    48f0:	f380 8812 	msr	BASEPRI_MAX, r0
    48f4:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
    48f8:	68e6      	ldr	r6, [r4, #12]
    48fa:	68f7      	ldr	r7, [r6, #12]
    48fc:	b9f7      	cbnz	r7, 493c <uarte_nrfx_tx+0x64>
	data->async->tx_size = len;
    48fe:	60f2      	str	r2, [r6, #12]
	data->async->tx_buf = buf;
    4900:	68e0      	ldr	r0, [r4, #12]
    4902:	6081      	str	r1, [r0, #8]
    p_reg->INTENSET = mask;
    4904:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    4908:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    490c:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    4910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    4914:	d119      	bne.n	494a <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
    4916:	68e3      	ldr	r3, [r4, #12]
    4918:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
    491a:	68e3      	ldr	r3, [r4, #12]
    491c:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
    491e:	4621      	mov	r1, r4
    4920:	4628      	mov	r0, r5
    4922:	f006 fb8c 	bl	b03e <start_tx_locked>
	__asm__ volatile(
    4926:	f389 8811 	msr	BASEPRI, r9
    492a:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    492e:	7ae3      	ldrb	r3, [r4, #11]
    4930:	2b01      	cmp	r3, #1
    4932:	d011      	beq.n	4958 <uarte_nrfx_tx+0x80>
	return 0;
    4934:	2000      	movs	r0, #0
}
    4936:	b003      	add	sp, #12
    4938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    493c:	f389 8811 	msr	BASEPRI, r9
    4940:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    4944:	f06f 000f 	mvn.w	r0, #15
    4948:	e7f5      	b.n	4936 <uarte_nrfx_tx+0x5e>
		data->async->tx_cache_offset = 0;
    494a:	68e3      	ldr	r3, [r4, #12]
    494c:	2200      	movs	r2, #0
    494e:	621a      	str	r2, [r3, #32]
		(void)setup_tx_cache(data);
    4950:	4620      	mov	r0, r4
    4952:	f006 fd64 	bl	b41e <setup_tx_cache>
    4956:	e7e2      	b.n	491e <uarte_nrfx_tx+0x46>
	    && timeout != SYS_FOREVER_US) {
    4958:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    495c:	d101      	bne.n	4962 <uarte_nrfx_tx+0x8a>
	return 0;
    495e:	2000      	movs	r0, #0
    4960:	e7e9      	b.n	4936 <uarte_nrfx_tx+0x5e>
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    4962:	68e4      	ldr	r4, [r4, #12]
    4964:	3428      	adds	r4, #40	; 0x28
    4966:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
    496a:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    496c:	03c9      	lsls	r1, r1, #15
    496e:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    4972:	03c0      	lsls	r0, r0, #15
    4974:	4b09      	ldr	r3, [pc, #36]	; (499c <uarte_nrfx_tx+0xc4>)
    4976:	18c0      	adds	r0, r0, r3
    4978:	4a09      	ldr	r2, [pc, #36]	; (49a0 <uarte_nrfx_tx+0xc8>)
    497a:	f04f 0300 	mov.w	r3, #0
    497e:	f141 0100 	adc.w	r1, r1, #0
    4982:	f7fb fbbd 	bl	100 <__aeabi_uldivmod>
    4986:	4602      	mov	r2, r0
    4988:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    498a:	2000      	movs	r0, #0
    498c:	2100      	movs	r1, #0
    498e:	e9cd 0100 	strd	r0, r1, [sp]
    4992:	4620      	mov	r0, r4
    4994:	f005 fab0 	bl	9ef8 <z_impl_k_timer_start>
	return 0;
    4998:	2000      	movs	r0, #0
    499a:	e7cc      	b.n	4936 <uarte_nrfx_tx+0x5e>
    499c:	000f423f 	.word	0x000f423f
    49a0:	000f4240 	.word	0x000f4240

000049a4 <rxstarted_isr>:
{
    49a4:	b510      	push	{r4, lr}
    49a6:	b088      	sub	sp, #32
	struct uarte_nrfx_data *data = dev->data;
    49a8:	6904      	ldr	r4, [r0, #16]
	struct uart_event evt = {
    49aa:	2300      	movs	r3, #0
    49ac:	9303      	str	r3, [sp, #12]
    49ae:	9304      	str	r3, [sp, #16]
    49b0:	9305      	str	r3, [sp, #20]
    49b2:	9306      	str	r3, [sp, #24]
    49b4:	9307      	str	r3, [sp, #28]
    49b6:	2303      	movs	r3, #3
    49b8:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    49bc:	a903      	add	r1, sp, #12
    49be:	f006 fb59 	bl	b074 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    49c2:	68e3      	ldr	r3, [r4, #12]
    49c4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    49c6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    49ca:	d101      	bne.n	49d0 <rxstarted_isr+0x2c>
}
    49cc:	b008      	add	sp, #32
    49ce:	bd10      	pop	{r4, pc}
		data->async->rx_timeout_left = data->async->rx_timeout;
    49d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		k_timer_start(&data->async->rx_timeout_timer,
    49d4:	68e3      	ldr	r3, [r4, #12]
    49d6:	f103 0488 	add.w	r4, r3, #136	; 0x88
			      K_USEC(data->async->rx_timeout_slab),
    49da:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    49de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    49e2:	17c1      	asrs	r1, r0, #31
    49e4:	03c9      	lsls	r1, r1, #15
    49e6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    49ea:	03c0      	lsls	r0, r0, #15
    49ec:	4b08      	ldr	r3, [pc, #32]	; (4a10 <rxstarted_isr+0x6c>)
    49ee:	18c0      	adds	r0, r0, r3
    49f0:	4a08      	ldr	r2, [pc, #32]	; (4a14 <rxstarted_isr+0x70>)
    49f2:	f04f 0300 	mov.w	r3, #0
    49f6:	f141 0100 	adc.w	r1, r1, #0
    49fa:	f7fb fb81 	bl	100 <__aeabi_uldivmod>
    49fe:	4602      	mov	r2, r0
    4a00:	460b      	mov	r3, r1
    4a02:	9000      	str	r0, [sp, #0]
    4a04:	9101      	str	r1, [sp, #4]
    4a06:	4620      	mov	r0, r4
    4a08:	f005 fa76 	bl	9ef8 <z_impl_k_timer_start>
}
    4a0c:	e7de      	b.n	49cc <rxstarted_isr+0x28>
    4a0e:	bf00      	nop
    4a10:	000f423f 	.word	0x000f423f
    4a14:	000f4240 	.word	0x000f4240

00004a18 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    4a18:	b530      	push	{r4, r5, lr}
    4a1a:	b085      	sub	sp, #20
    4a1c:	4604      	mov	r4, r0
    4a1e:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4a20:	f101 0016 	add.w	r0, r1, #22
    4a24:	f002 fa8a 	bl	6f3c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4a28:	4b11      	ldr	r3, [pc, #68]	; (4a70 <endtx_stoptx_ppi_init+0x58>)
    4a2a:	4298      	cmp	r0, r3
    4a2c:	d112      	bne.n	4a54 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    4a2e:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4a30:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    4a34:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    4a36:	4a0f      	ldr	r2, [pc, #60]	; (4a74 <endtx_stoptx_ppi_init+0x5c>)
    4a38:	33a2      	adds	r3, #162	; 0xa2
    4a3a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    4a3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4a42:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4a44:	7da9      	ldrb	r1, [r5, #22]
    4a46:	2301      	movs	r3, #1
    4a48:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    4a4a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    4a4e:	2000      	movs	r0, #0
}
    4a50:	b005      	add	sp, #20
    4a52:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    4a54:	4b08      	ldr	r3, [pc, #32]	; (4a78 <endtx_stoptx_ppi_init+0x60>)
    4a56:	9302      	str	r3, [sp, #8]
    4a58:	2000      	movs	r0, #0
    4a5a:	9001      	str	r0, [sp, #4]
    4a5c:	9000      	str	r0, [sp, #0]
    4a5e:	4603      	mov	r3, r0
    4a60:	2201      	movs	r2, #1
    4a62:	4906      	ldr	r1, [pc, #24]	; (4a7c <endtx_stoptx_ppi_init+0x64>)
    4a64:	f006 fcf4 	bl	b450 <z_log_msg2_runtime_create>
		return -EIO;
    4a68:	f06f 0004 	mvn.w	r0, #4
    4a6c:	e7f0      	b.n	4a50 <endtx_stoptx_ppi_init+0x38>
    4a6e:	bf00      	nop
    4a70:	0bad0000 	.word	0x0bad0000
    4a74:	4001f000 	.word	0x4001f000
    4a78:	0000d620 	.word	0x0000d620
    4a7c:	0000c0cc 	.word	0x0000c0cc

00004a80 <uarte_nrfx_init>:
{
    4a80:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = dev->data;
    4a82:	6905      	ldr	r5, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    4a84:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    4a86:	681c      	ldr	r4, [r3, #0]
	int ret = uarte_nrfx_rx_counting_init(dev);
    4a88:	f006 fad2 	bl	b030 <uarte_nrfx_rx_counting_init>
	if (ret != 0) {
    4a8c:	4606      	mov	r6, r0
    4a8e:	bb90      	cbnz	r0, 4af6 <uarte_nrfx_init+0x76>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    4a90:	68eb      	ldr	r3, [r5, #12]
    4a92:	2201      	movs	r2, #1
    4a94:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    p_reg->INTENSET = mask;
    4a98:	4b18      	ldr	r3, [pc, #96]	; (4afc <uarte_nrfx_init+0x7c>)
    4a9a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4a9e:	2308      	movs	r3, #8
    4aa0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4aa4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    4aa8:	b1a3      	cbz	r3, 4ad4 <uarte_nrfx_init+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4aaa:	6062      	str	r2, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4aac:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    4ab0:	b91b      	cbnz	r3, 4aba <uarte_nrfx_init+0x3a>
    4ab2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    4ab6:	2b00      	cmp	r3, #0
    4ab8:	d0f8      	beq.n	4aac <uarte_nrfx_init+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4aba:	2300      	movs	r3, #0
    4abc:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    4ac0:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
    4ac4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    4ac8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    4acc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    4ad0:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    4ad4:	68e8      	ldr	r0, [r5, #12]
    4ad6:	2200      	movs	r2, #0
    4ad8:	4909      	ldr	r1, [pc, #36]	; (4b00 <uarte_nrfx_init+0x80>)
    4ada:	3088      	adds	r0, #136	; 0x88
    4adc:	f007 f925 	bl	bd2a <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    4ae0:	68eb      	ldr	r3, [r5, #12]
	timer->user_data = user_data;
    4ae2:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    4ae6:	68e8      	ldr	r0, [r5, #12]
    4ae8:	2200      	movs	r2, #0
    4aea:	4906      	ldr	r1, [pc, #24]	; (4b04 <uarte_nrfx_init+0x84>)
    4aec:	3028      	adds	r0, #40	; 0x28
    4aee:	f007 f91c 	bl	bd2a <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    4af2:	68eb      	ldr	r3, [r5, #12]
    4af4:	65dd      	str	r5, [r3, #92]	; 0x5c
}
    4af6:	4630      	mov	r0, r6
    4af8:	bd70      	pop	{r4, r5, r6, pc}
    4afa:	bf00      	nop
    4afc:	000a0210 	.word	0x000a0210
    4b00:	0000b2c5 	.word	0x0000b2c5
    4b04:	0000b2b9 	.word	0x0000b2b9

00004b08 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4b08:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    4b0c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    4b10:	4b01      	ldr	r3, [pc, #4]	; (4b18 <set_comparator+0x10>)
    4b12:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    4b16:	4770      	bx	lr
    4b18:	40011000 	.word	0x40011000

00004b1c <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    4b1c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    4b20:	4b01      	ldr	r3, [pc, #4]	; (4b28 <get_comparator+0xc>)
    4b22:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    4b26:	4770      	bx	lr
    4b28:	40011000 	.word	0x40011000

00004b2c <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4b30:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    4b32:	4a02      	ldr	r2, [pc, #8]	; (4b3c <event_enable+0x10>)
    4b34:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    4b38:	4770      	bx	lr
    4b3a:	bf00      	nop
    4b3c:	40011000 	.word	0x40011000

00004b40 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4b44:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4b46:	4a02      	ldr	r2, [pc, #8]	; (4b50 <event_disable+0x10>)
    4b48:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    4b4c:	4770      	bx	lr
    4b4e:	bf00      	nop
    4b50:	40011000 	.word	0x40011000

00004b54 <counter>:
     return p_reg->COUNTER;
    4b54:	4b01      	ldr	r3, [pc, #4]	; (4b5c <counter+0x8>)
    4b56:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    4b5a:	4770      	bx	lr
    4b5c:	40011000 	.word	0x40011000

00004b60 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    4b60:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    4b62:	2301      	movs	r3, #1
    4b64:	4083      	lsls	r3, r0
    4b66:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4b6a:	4a10      	ldr	r2, [pc, #64]	; (4bac <compare_int_lock+0x4c>)
    4b6c:	f3bf 8f5b 	dmb	ish
    4b70:	e852 1f00 	ldrex	r1, [r2]
    4b74:	ea01 0e0c 	and.w	lr, r1, ip
    4b78:	e842 e400 	strex	r4, lr, [r2]
    4b7c:	2c00      	cmp	r4, #0
    4b7e:	d1f7      	bne.n	4b70 <compare_int_lock+0x10>
    4b80:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4b88:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    4b8c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4b90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    4b94:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4b98:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4b9c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    4ba0:	420b      	tst	r3, r1
}
    4ba2:	bf14      	ite	ne
    4ba4:	2001      	movne	r0, #1
    4ba6:	2000      	moveq	r0, #0
    4ba8:	bd10      	pop	{r4, pc}
    4baa:	bf00      	nop
    4bac:	20004be4 	.word	0x20004be4

00004bb0 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    4bb0:	b570      	push	{r4, r5, r6, lr}
    4bb2:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    4bb4:	f006 fe7a 	bl	b8ac <full_int_lock>
    4bb8:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4bba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4bbe:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    4bc0:	4a17      	ldr	r2, [pc, #92]	; (4c20 <channel_processing_check_and_clear+0x70>)
    4bc2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    4bc6:	4213      	tst	r3, r2
    4bc8:	d105      	bne.n	4bd6 <channel_processing_check_and_clear+0x26>
	bool result = false;
    4bca:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    4bcc:	4628      	mov	r0, r5
    4bce:	f006 fe76 	bl	b8be <full_int_unlock>

	return result;
}
    4bd2:	4630      	mov	r0, r6
    4bd4:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4bd6:	2301      	movs	r3, #1
    4bd8:	40a3      	lsls	r3, r4
    4bda:	43db      	mvns	r3, r3
    4bdc:	4a11      	ldr	r2, [pc, #68]	; (4c24 <channel_processing_check_and_clear+0x74>)
    4bde:	f3bf 8f5b 	dmb	ish
    4be2:	e852 1f00 	ldrex	r1, [r2]
    4be6:	ea01 0003 	and.w	r0, r1, r3
    4bea:	e842 0600 	strex	r6, r0, [r2]
    4bee:	2e00      	cmp	r6, #0
    4bf0:	d1f7      	bne.n	4be2 <channel_processing_check_and_clear+0x32>
    4bf2:	f3bf 8f5b 	dmb	ish
    4bf6:	b959      	cbnz	r1, 4c10 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4bf8:	f104 0350 	add.w	r3, r4, #80	; 0x50
    4bfc:	009b      	lsls	r3, r3, #2
    4bfe:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4c04:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    4c08:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4c0a:	b113      	cbz	r3, 4c12 <channel_processing_check_and_clear+0x62>
    4c0c:	2301      	movs	r3, #1
    4c0e:	e000      	b.n	4c12 <channel_processing_check_and_clear+0x62>
    4c10:	2301      	movs	r3, #1
		if (result) {
    4c12:	461e      	mov	r6, r3
    4c14:	2b00      	cmp	r3, #0
    4c16:	d0d9      	beq.n	4bcc <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    4c18:	4620      	mov	r0, r4
    4c1a:	f006 fe38 	bl	b88e <event_clear>
    4c1e:	e7d5      	b.n	4bcc <channel_processing_check_and_clear+0x1c>
    4c20:	40011000 	.word	0x40011000
    4c24:	20004be0 	.word	0x20004be0

00004c28 <compare_int_unlock>:
	if (key) {
    4c28:	b901      	cbnz	r1, 4c2c <compare_int_unlock+0x4>
}
    4c2a:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    4c2c:	2301      	movs	r3, #1
    4c2e:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4c30:	4a11      	ldr	r2, [pc, #68]	; (4c78 <compare_int_unlock+0x50>)
    4c32:	f3bf 8f5b 	dmb	ish
    4c36:	e852 1f00 	ldrex	r1, [r2]
    4c3a:	4319      	orrs	r1, r3
    4c3c:	e842 1c00 	strex	ip, r1, [r2]
    4c40:	f1bc 0f00 	cmp.w	ip, #0
    4c44:	d1f7      	bne.n	4c36 <compare_int_unlock+0xe>
    4c46:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4c4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4c4e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    4c50:	4a0a      	ldr	r2, [pc, #40]	; (4c7c <compare_int_unlock+0x54>)
    4c52:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4c56:	f3bf 8f5b 	dmb	ish
    4c5a:	4b09      	ldr	r3, [pc, #36]	; (4c80 <compare_int_unlock+0x58>)
    4c5c:	681b      	ldr	r3, [r3, #0]
    4c5e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    4c62:	fa23 f000 	lsr.w	r0, r3, r0
    4c66:	f010 0f01 	tst.w	r0, #1
    4c6a:	d0de      	beq.n	4c2a <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c6c:	4b05      	ldr	r3, [pc, #20]	; (4c84 <compare_int_unlock+0x5c>)
    4c6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4c72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    4c76:	e7d8      	b.n	4c2a <compare_int_unlock+0x2>
    4c78:	20004be4 	.word	0x20004be4
    4c7c:	40011000 	.word	0x40011000
    4c80:	20004be0 	.word	0x20004be0
    4c84:	e000e100 	.word	0xe000e100

00004c88 <sys_clock_timeout_handler>:
{
    4c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c8c:	4607      	mov	r7, r0
    4c8e:	4614      	mov	r4, r2
    4c90:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    4c92:	4610      	mov	r0, r2
    4c94:	4619      	mov	r1, r3
    4c96:	f006 fe06 	bl	b8a6 <absolute_time_to_cc>
    4c9a:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4c9c:	4b15      	ldr	r3, [pc, #84]	; (4cf4 <sys_clock_timeout_handler+0x6c>)
    4c9e:	681a      	ldr	r2, [r3, #0]
    4ca0:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    4ca2:	601c      	str	r4, [r3, #0]
    4ca4:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4ca6:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    4caa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    4cae:	d309      	bcc.n	4cc4 <sys_clock_timeout_handler+0x3c>
	return false;
    4cb0:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4cb2:	f004 ff35 	bl	9b20 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    4cb6:	4638      	mov	r0, r7
    4cb8:	f7ff ff30 	bl	4b1c <get_comparator>
    4cbc:	42a8      	cmp	r0, r5
    4cbe:	d00e      	beq.n	4cde <sys_clock_timeout_handler+0x56>
}
    4cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4cc4:	4b0c      	ldr	r3, [pc, #48]	; (4cf8 <sys_clock_timeout_handler+0x70>)
    4cc6:	681b      	ldr	r3, [r3, #0]
    4cc8:	0a1a      	lsrs	r2, r3, #8
    4cca:	061b      	lsls	r3, r3, #24
    4ccc:	eb15 0803 	adds.w	r8, r5, r3
    4cd0:	f142 0900 	adc.w	r9, r2, #0
    4cd4:	4b09      	ldr	r3, [pc, #36]	; (4cfc <sys_clock_timeout_handler+0x74>)
    4cd6:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    4cda:	2401      	movs	r4, #1
    4cdc:	e7e9      	b.n	4cb2 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    4cde:	b11c      	cbz	r4, 4ce8 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    4ce0:	4638      	mov	r0, r7
    4ce2:	f7ff ff23 	bl	4b2c <event_enable>
}
    4ce6:	e7eb      	b.n	4cc0 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    4ce8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    4cec:	4638      	mov	r0, r7
    4cee:	f7ff ff0b 	bl	4b08 <set_comparator>
    4cf2:	e7f5      	b.n	4ce0 <sys_clock_timeout_handler+0x58>
    4cf4:	20004408 	.word	0x20004408
    4cf8:	20004be8 	.word	0x20004be8
    4cfc:	200043f0 	.word	0x200043f0

00004d00 <z_nrf_rtc_timer_read>:
{
    4d00:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4d02:	4b0d      	ldr	r3, [pc, #52]	; (4d38 <z_nrf_rtc_timer_read+0x38>)
    4d04:	681c      	ldr	r4, [r3, #0]
    4d06:	0a25      	lsrs	r5, r4, #8
    4d08:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4d0a:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    4d0e:	f7ff ff21 	bl	4b54 <counter>
    4d12:	4603      	mov	r3, r0
	val += cntr;
    4d14:	1900      	adds	r0, r0, r4
    4d16:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4d1e:	d20a      	bcs.n	4d36 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    4d20:	4b06      	ldr	r3, [pc, #24]	; (4d3c <z_nrf_rtc_timer_read+0x3c>)
    4d22:	e9d3 2300 	ldrd	r2, r3, [r3]
    4d26:	4290      	cmp	r0, r2
    4d28:	eb71 0303 	sbcs.w	r3, r1, r3
    4d2c:	d203      	bcs.n	4d36 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    4d2e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4d32:	f141 0100 	adc.w	r1, r1, #0
}
    4d36:	bd38      	pop	{r3, r4, r5, pc}
    4d38:	20004be8 	.word	0x20004be8
    4d3c:	200043f0 	.word	0x200043f0

00004d40 <compare_set_nolocks>:
{
    4d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d42:	4606      	mov	r6, r0
    4d44:	4614      	mov	r4, r2
    4d46:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    4d48:	4610      	mov	r0, r2
    4d4a:	4619      	mov	r1, r3
    4d4c:	f006 fdab 	bl	b8a6 <absolute_time_to_cc>
    4d50:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4d52:	f7ff ffd5 	bl	4d00 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4d56:	42a0      	cmp	r0, r4
    4d58:	eb71 0305 	sbcs.w	r3, r1, r5
    4d5c:	d21d      	bcs.n	4d9a <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    4d5e:	1a23      	subs	r3, r4, r0
    4d60:	eb65 0101 	sbc.w	r1, r5, r1
    4d64:	4a1b      	ldr	r2, [pc, #108]	; (4dd4 <compare_set_nolocks+0x94>)
    4d66:	4293      	cmp	r3, r2
    4d68:	f171 0300 	sbcs.w	r3, r1, #0
    4d6c:	d22f      	bcs.n	4dce <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    4d6e:	4b1a      	ldr	r3, [pc, #104]	; (4dd8 <compare_set_nolocks+0x98>)
    4d70:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    4d74:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    4d78:	42ab      	cmp	r3, r5
    4d7a:	bf08      	it	eq
    4d7c:	42a2      	cmpeq	r2, r4
    4d7e:	d01a      	beq.n	4db6 <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    4d80:	4639      	mov	r1, r7
    4d82:	4630      	mov	r0, r6
    4d84:	f006 fda0 	bl	b8c8 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    4d88:	4639      	mov	r1, r7
    4d8a:	f006 fd7c 	bl	b886 <counter_sub>
    4d8e:	1900      	adds	r0, r0, r4
    4d90:	f145 0300 	adc.w	r3, r5, #0
    4d94:	4604      	mov	r4, r0
    4d96:	461d      	mov	r5, r3
    4d98:	e00d      	b.n	4db6 <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    4d9a:	2301      	movs	r3, #1
    4d9c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4d9e:	4a0f      	ldr	r2, [pc, #60]	; (4ddc <compare_set_nolocks+0x9c>)
    4da0:	f3bf 8f5b 	dmb	ish
    4da4:	e852 1f00 	ldrex	r1, [r2]
    4da8:	4319      	orrs	r1, r3
    4daa:	e842 1000 	strex	r0, r1, [r2]
    4dae:	2800      	cmp	r0, #0
    4db0:	d1f8      	bne.n	4da4 <compare_set_nolocks+0x64>
    4db2:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    4db6:	4b08      	ldr	r3, [pc, #32]	; (4dd8 <compare_set_nolocks+0x98>)
    4db8:	0132      	lsls	r2, r6, #4
    4dba:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    4dbe:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    4dc2:	9906      	ldr	r1, [sp, #24]
    4dc4:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    4dc6:	9b07      	ldr	r3, [sp, #28]
    4dc8:	6073      	str	r3, [r6, #4]
	return ret;
    4dca:	2000      	movs	r0, #0
}
    4dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    4dce:	f06f 0015 	mvn.w	r0, #21
    4dd2:	e7fb      	b.n	4dcc <compare_set_nolocks+0x8c>
    4dd4:	01000001 	.word	0x01000001
    4dd8:	200043f8 	.word	0x200043f8
    4ddc:	20004be0 	.word	0x20004be0

00004de0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    4de0:	b530      	push	{r4, r5, lr}
    4de2:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    4de4:	2300      	movs	r3, #0
    4de6:	4a1d      	ldr	r2, [pc, #116]	; (4e5c <sys_clock_driver_init+0x7c>)
    4de8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4dec:	2b00      	cmp	r3, #0
    4dee:	dd24      	ble.n	4e3a <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    4df0:	4c1a      	ldr	r4, [pc, #104]	; (4e5c <sys_clock_driver_init+0x7c>)
    4df2:	2502      	movs	r5, #2
    4df4:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4df8:	4b19      	ldr	r3, [pc, #100]	; (4e60 <sys_clock_driver_init+0x80>)
    4dfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4dfe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4e02:	2200      	movs	r2, #0
    4e04:	2101      	movs	r1, #1
    4e06:	2011      	movs	r0, #17
    4e08:	f7fd ffe8 	bl	2ddc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4e0c:	2011      	movs	r0, #17
    4e0e:	f7fd ffc9 	bl	2da4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4e12:	2301      	movs	r3, #1
    4e14:	60a3      	str	r3, [r4, #8]
    4e16:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4e18:	4a12      	ldr	r2, [pc, #72]	; (4e64 <sys_clock_driver_init+0x84>)
    4e1a:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4e1c:	2400      	movs	r4, #0
    4e1e:	9401      	str	r4, [sp, #4]
    4e20:	4b11      	ldr	r3, [pc, #68]	; (4e68 <sys_clock_driver_init+0x88>)
    4e22:	9300      	str	r3, [sp, #0]
    4e24:	4a11      	ldr	r2, [pc, #68]	; (4e6c <sys_clock_driver_init+0x8c>)
    4e26:	2300      	movs	r3, #0
    4e28:	4620      	mov	r0, r4
    4e2a:	f006 fd88 	bl	b93e <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4e2e:	4628      	mov	r0, r5
    4e30:	f7ff f924 	bl	407c <z_nrf_clock_control_lf_on>

	return 0;
}
    4e34:	4620      	mov	r0, r4
    4e36:	b003      	add	sp, #12
    4e38:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4e3a:	4a0d      	ldr	r2, [pc, #52]	; (4e70 <sys_clock_driver_init+0x90>)
    4e3c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    4e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4e44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4e48:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4e4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4e50:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    4e52:	4902      	ldr	r1, [pc, #8]	; (4e5c <sys_clock_driver_init+0x7c>)
    4e54:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4e58:	3301      	adds	r3, #1
    4e5a:	e7c7      	b.n	4dec <sys_clock_driver_init+0xc>
    4e5c:	40011000 	.word	0x40011000
    4e60:	e000e100 	.word	0xe000e100
    4e64:	20004be4 	.word	0x20004be4
    4e68:	00004c89 	.word	0x00004c89
    4e6c:	007fffff 	.word	0x007fffff
    4e70:	200043f8 	.word	0x200043f8

00004e74 <process_channel>:
{
    4e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e78:	b082      	sub	sp, #8
    4e7a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    4e7c:	f7ff fe98 	bl	4bb0 <channel_processing_check_and_clear>
    4e80:	b910      	cbnz	r0, 4e88 <process_channel+0x14>
}
    4e82:	b002      	add	sp, #8
    4e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    4e88:	f7ff ff3a 	bl	4d00 <z_nrf_rtc_timer_read>
    4e8c:	4682      	mov	sl, r0
    4e8e:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    4e90:	f006 fd0c 	bl	b8ac <full_int_lock>
    4e94:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    4e96:	4b13      	ldr	r3, [pc, #76]	; (4ee4 <process_channel+0x70>)
    4e98:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4e9c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    4ea0:	45c2      	cmp	sl, r8
    4ea2:	eb76 0309 	sbcs.w	r3, r6, r9
    4ea6:	d20b      	bcs.n	4ec0 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4ea8:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    4eaa:	4628      	mov	r0, r5
    4eac:	f006 fd07 	bl	b8be <full_int_unlock>
		if (handler) {
    4eb0:	2e00      	cmp	r6, #0
    4eb2:	d0e6      	beq.n	4e82 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    4eb4:	9700      	str	r7, [sp, #0]
    4eb6:	4642      	mov	r2, r8
    4eb8:	464b      	mov	r3, r9
    4eba:	4620      	mov	r0, r4
    4ebc:	47b0      	blx	r6
}
    4ebe:	e7e0      	b.n	4e82 <process_channel+0xe>
			handler = cc_data[chan].callback;
    4ec0:	4a08      	ldr	r2, [pc, #32]	; (4ee4 <process_channel+0x70>)
    4ec2:	0123      	lsls	r3, r4, #4
    4ec4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    4ec8:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    4eca:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    4ecc:	2000      	movs	r0, #0
    4ece:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4ed8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    4edc:	4620      	mov	r0, r4
    4ede:	f7ff fe2f 	bl	4b40 <event_disable>
    4ee2:	e7e2      	b.n	4eaa <process_channel+0x36>
    4ee4:	200043f8 	.word	0x200043f8

00004ee8 <rtc_nrf_isr>:
{
    4ee8:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    4eea:	4b0e      	ldr	r3, [pc, #56]	; (4f24 <rtc_nrf_isr+0x3c>)
    4eec:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4ef0:	f013 0f02 	tst.w	r3, #2
    4ef4:	d00d      	beq.n	4f12 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4ef6:	4b0b      	ldr	r3, [pc, #44]	; (4f24 <rtc_nrf_isr+0x3c>)
    4ef8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    4efc:	b14b      	cbz	r3, 4f12 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4efe:	4b09      	ldr	r3, [pc, #36]	; (4f24 <rtc_nrf_isr+0x3c>)
    4f00:	2200      	movs	r2, #0
    4f02:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4f06:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    4f0a:	4a07      	ldr	r2, [pc, #28]	; (4f28 <rtc_nrf_isr+0x40>)
    4f0c:	6813      	ldr	r3, [r2, #0]
    4f0e:	3301      	adds	r3, #1
    4f10:	6013      	str	r3, [r2, #0]
{
    4f12:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4f14:	2c00      	cmp	r4, #0
    4f16:	dd00      	ble.n	4f1a <rtc_nrf_isr+0x32>
}
    4f18:	bd10      	pop	{r4, pc}
		process_channel(chan);
    4f1a:	4620      	mov	r0, r4
    4f1c:	f7ff ffaa 	bl	4e74 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4f20:	3401      	adds	r4, #1
    4f22:	e7f7      	b.n	4f14 <rtc_nrf_isr+0x2c>
    4f24:	40011000 	.word	0x40011000
    4f28:	20004be8 	.word	0x20004be8

00004f2c <sys_clock_set_timeout>:
{
    4f2c:	b510      	push	{r4, lr}
    4f2e:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4f30:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4f34:	d006      	beq.n	4f44 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4f36:	2801      	cmp	r0, #1
    4f38:	dd06      	ble.n	4f48 <sys_clock_set_timeout+0x1c>
    4f3a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4f3e:	da05      	bge.n	4f4c <sys_clock_set_timeout+0x20>
    4f40:	1e44      	subs	r4, r0, #1
    4f42:	e004      	b.n	4f4e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4f44:	480f      	ldr	r0, [pc, #60]	; (4f84 <sys_clock_set_timeout+0x58>)
    4f46:	e7f8      	b.n	4f3a <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4f48:	2400      	movs	r4, #0
    4f4a:	e000      	b.n	4f4e <sys_clock_set_timeout+0x22>
    4f4c:	4c0d      	ldr	r4, [pc, #52]	; (4f84 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4f4e:	f7ff fed7 	bl	4d00 <z_nrf_rtc_timer_read>
    4f52:	4b0d      	ldr	r3, [pc, #52]	; (4f88 <sys_clock_set_timeout+0x5c>)
    4f54:	6819      	ldr	r1, [r3, #0]
    4f56:	685b      	ldr	r3, [r3, #4]
    4f58:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    4f5a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4f5e:	d300      	bcc.n	4f62 <sys_clock_set_timeout+0x36>
		ticks = 0;
    4f60:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4f62:	4420      	add	r0, r4
    4f64:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    4f66:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    4f6a:	d300      	bcc.n	4f6e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    4f6c:	4a05      	ldr	r2, [pc, #20]	; (4f84 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    4f6e:	2000      	movs	r0, #0
    4f70:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4f72:	9001      	str	r0, [sp, #4]
    4f74:	4905      	ldr	r1, [pc, #20]	; (4f8c <sys_clock_set_timeout+0x60>)
    4f76:	9100      	str	r1, [sp, #0]
    4f78:	f143 0300 	adc.w	r3, r3, #0
    4f7c:	f006 fcdf 	bl	b93e <compare_set>
}
    4f80:	b002      	add	sp, #8
    4f82:	bd10      	pop	{r4, pc}
    4f84:	007fffff 	.word	0x007fffff
    4f88:	20004408 	.word	0x20004408
    4f8c:	00004c89 	.word	0x00004c89

00004f90 <sys_clock_elapsed>:
{
    4f90:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4f92:	f7ff feb5 	bl	4d00 <z_nrf_rtc_timer_read>
    4f96:	4b02      	ldr	r3, [pc, #8]	; (4fa0 <sys_clock_elapsed+0x10>)
    4f98:	681b      	ldr	r3, [r3, #0]
}
    4f9a:	1ac0      	subs	r0, r0, r3
    4f9c:	bd08      	pop	{r3, pc}
    4f9e:	bf00      	nop
    4fa0:	20004408 	.word	0x20004408

00004fa4 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    4fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4fa8:	460c      	mov	r4, r1
    4faa:	4691      	mov	r9, r2
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    4fac:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    4fb0:	d002      	beq.n	4fb8 <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4fb2:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    4fb6:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    4fb8:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    4fbc:	f3c0 1881 	ubfx	r8, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    4fc0:	f3c0 2703 	ubfx	r7, r0, #8, #4
    uint32_t port = pin_number >> 5;
    4fc4:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    4fc8:	f010 0f20 	tst.w	r0, #32
    4fcc:	d01d      	beq.n	500a <nrf_pin_configure+0x66>
    4fce:	b1fb      	cbz	r3, 5010 <nrf_pin_configure+0x6c>
            mask = P1_FEATURE_PINS_PRESENT;
    4fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4fd4:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4fd8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4fda:	f013 0f01 	tst.w	r3, #1
    4fde:	d019      	beq.n	5014 <nrf_pin_configure+0x70>
    *p_pin = pin_number & 0x1F;
    4fe0:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4fe4:	096d      	lsrs	r5, r5, #5
    4fe6:	d023      	beq.n	5030 <nrf_pin_configure+0x8c>
    4fe8:	bb2d      	cbnz	r5, 5036 <nrf_pin_configure+0x92>
            NRFX_ASSERT(0);
    4fea:	4d19      	ldr	r5, [pc, #100]	; (5050 <nrf_pin_configure+0xac>)
    4fec:	f240 232e 	movw	r3, #558	; 0x22e
    4ff0:	462a      	mov	r2, r5
    4ff2:	4918      	ldr	r1, [pc, #96]	; (5054 <nrf_pin_configure+0xb0>)
    4ff4:	4818      	ldr	r0, [pc, #96]	; (5058 <nrf_pin_configure+0xb4>)
    4ff6:	f005 fc97 	bl	a928 <assert_print>
    4ffa:	f240 212e 	movw	r1, #558	; 0x22e
    4ffe:	4628      	mov	r0, r5
    5000:	f005 fc8b 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    5004:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5008:	e016      	b.n	5038 <nrf_pin_configure+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    500a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    500e:	e7e1      	b.n	4fd4 <nrf_pin_configure+0x30>
    switch (port)
    5010:	2300      	movs	r3, #0
    5012:	e7df      	b.n	4fd4 <nrf_pin_configure+0x30>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5014:	4e0e      	ldr	r6, [pc, #56]	; (5050 <nrf_pin_configure+0xac>)
    5016:	f240 2329 	movw	r3, #553	; 0x229
    501a:	4632      	mov	r2, r6
    501c:	490f      	ldr	r1, [pc, #60]	; (505c <nrf_pin_configure+0xb8>)
    501e:	480e      	ldr	r0, [pc, #56]	; (5058 <nrf_pin_configure+0xb4>)
    5020:	f005 fc82 	bl	a928 <assert_print>
    5024:	f240 2129 	movw	r1, #553	; 0x229
    5028:	4630      	mov	r0, r6
    502a:	f005 fc76 	bl	a91a <assert_post_action>
    502e:	e7d7      	b.n	4fe0 <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
    5030:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5034:	e000      	b.n	5038 <nrf_pin_configure+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5036:	4b0a      	ldr	r3, [pc, #40]	; (5060 <nrf_pin_configure+0xbc>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5038:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    503c:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5040:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    5044:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    5048:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
}
    504c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5050:	0000d524 	.word	0x0000d524
    5054:	0000c954 	.word	0x0000c954
    5058:	0000c294 	.word	0x0000c294
    505c:	0000d558 	.word	0x0000d558
    5060:	50000300 	.word	0x50000300

00005064 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    5064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5068:	4605      	mov	r5, r0
    506a:	460e      	mov	r6, r1
    506c:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    506e:	2400      	movs	r4, #0
    5070:	e04e      	b.n	5110 <pinctrl_configure_pins+0xac>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    5072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5076:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    507a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    507e:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    5082:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    5086:	f013 0f20 	tst.w	r3, #32
    508a:	d01f      	beq.n	50cc <pinctrl_configure_pins+0x68>
    508c:	b109      	cbz	r1, 5092 <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    508e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5092:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5096:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5098:	f012 0f01 	tst.w	r2, #1
    509c:	d019      	beq.n	50d2 <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    509e:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    50a2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    50a6:	d023      	beq.n	50f0 <pinctrl_configure_pins+0x8c>
    50a8:	bb2b      	cbnz	r3, 50f6 <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    50aa:	f8df 9344 	ldr.w	r9, [pc, #836]	; 53f0 <pinctrl_configure_pins+0x38c>
    50ae:	f240 232e 	movw	r3, #558	; 0x22e
    50b2:	464a      	mov	r2, r9
    50b4:	49cf      	ldr	r1, [pc, #828]	; (53f4 <pinctrl_configure_pins+0x390>)
    50b6:	48d0      	ldr	r0, [pc, #832]	; (53f8 <pinctrl_configure_pins+0x394>)
    50b8:	f005 fc36 	bl	a928 <assert_print>
    50bc:	f240 212e 	movw	r1, #558	; 0x22e
    50c0:	4648      	mov	r0, r9
    50c2:	f005 fc2a 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    50c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    50ca:	e015      	b.n	50f8 <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    50cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    50d0:	e7df      	b.n	5092 <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    50d2:	f8df a31c 	ldr.w	sl, [pc, #796]	; 53f0 <pinctrl_configure_pins+0x38c>
    50d6:	f240 2329 	movw	r3, #553	; 0x229
    50da:	4652      	mov	r2, sl
    50dc:	49c7      	ldr	r1, [pc, #796]	; (53fc <pinctrl_configure_pins+0x398>)
    50de:	48c6      	ldr	r0, [pc, #792]	; (53f8 <pinctrl_configure_pins+0x394>)
    50e0:	f005 fc22 	bl	a928 <assert_print>
    50e4:	f240 2129 	movw	r1, #553	; 0x229
    50e8:	4650      	mov	r0, sl
    50ea:	f005 fc16 	bl	a91a <assert_post_action>
    50ee:	e7d6      	b.n	509e <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    50f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    50f4:	e000      	b.n	50f8 <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    50f6:	4ac2      	ldr	r2, [pc, #776]	; (5400 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    50f8:	2101      	movs	r1, #1
    50fa:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    50fe:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5102:	460a      	mov	r2, r1
    5104:	f855 0008 	ldr.w	r0, [r5, r8]
    5108:	f7ff ff4c 	bl	4fa4 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    510c:	3401      	adds	r4, #1
    510e:	b2e4      	uxtb	r4, r4
    5110:	42b4      	cmp	r4, r6
    5112:	f080 841e 	bcs.w	5952 <pinctrl_configure_pins+0x8ee>
		switch (NRF_GET_FUN(pins[i])) {
    5116:	ea4f 0884 	mov.w	r8, r4, lsl #2
    511a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    511e:	0c1a      	lsrs	r2, r3, #16
    5120:	2a22      	cmp	r2, #34	; 0x22
    5122:	f200 8418 	bhi.w	5956 <pinctrl_configure_pins+0x8f2>
    5126:	a101      	add	r1, pc, #4	; (adr r1, 512c <pinctrl_configure_pins+0xc8>)
    5128:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    512c:	00005073 	.word	0x00005073
    5130:	000051b9 	.word	0x000051b9
    5134:	000051cf 	.word	0x000051cf
    5138:	0000526f 	.word	0x0000526f
    513c:	00005285 	.word	0x00005285
    5140:	00005325 	.word	0x00005325
    5144:	000053c5 	.word	0x000053c5
    5148:	00005957 	.word	0x00005957
    514c:	00005957 	.word	0x00005957
    5150:	00005957 	.word	0x00005957
    5154:	00005957 	.word	0x00005957
    5158:	000053db 	.word	0x000053db
    515c:	00005405 	.word	0x00005405
    5160:	00005957 	.word	0x00005957
    5164:	00005957 	.word	0x00005957
    5168:	00005957 	.word	0x00005957
    516c:	00005957 	.word	0x00005957
    5170:	00005957 	.word	0x00005957
    5174:	00005957 	.word	0x00005957
    5178:	00005957 	.word	0x00005957
    517c:	00005957 	.word	0x00005957
    5180:	00005957 	.word	0x00005957
    5184:	0000541b 	.word	0x0000541b
    5188:	00005541 	.word	0x00005541
    518c:	00005667 	.word	0x00005667
    5190:	000057a3 	.word	0x000057a3
    5194:	00005957 	.word	0x00005957
    5198:	00005957 	.word	0x00005957
    519c:	00005957 	.word	0x00005957
    51a0:	000058c9 	.word	0x000058c9
    51a4:	000058df 	.word	0x000058df
    51a8:	000058f5 	.word	0x000058f5
    51ac:	0000590b 	.word	0x0000590b
    51b0:	00005923 	.word	0x00005923
    51b4:	0000593b 	.word	0x0000593b
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    51b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    51bc:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    51c0:	2200      	movs	r2, #0
    51c2:	4611      	mov	r1, r2
    51c4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    51c8:	f7ff feec 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    51cc:	e79e      	b.n	510c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    51ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    51d2:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    51d6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    51da:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    51de:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    51e2:	f013 0f20 	tst.w	r3, #32
    51e6:	d01f      	beq.n	5228 <pinctrl_configure_pins+0x1c4>
    51e8:	b30a      	cbz	r2, 522e <pinctrl_configure_pins+0x1ca>
            mask = P1_FEATURE_PINS_PRESENT;
    51ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    51ee:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    51f2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    51f4:	f013 0f01 	tst.w	r3, #1
    51f8:	d01b      	beq.n	5232 <pinctrl_configure_pins+0x1ce>
    *p_pin = pin_number & 0x1F;
    51fa:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    51fe:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5202:	d025      	beq.n	5250 <pinctrl_configure_pins+0x1ec>
    5204:	bb3b      	cbnz	r3, 5256 <pinctrl_configure_pins+0x1f2>
            NRFX_ASSERT(0);
    5206:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 53f0 <pinctrl_configure_pins+0x38c>
    520a:	f240 232e 	movw	r3, #558	; 0x22e
    520e:	464a      	mov	r2, r9
    5210:	4978      	ldr	r1, [pc, #480]	; (53f4 <pinctrl_configure_pins+0x390>)
    5212:	4879      	ldr	r0, [pc, #484]	; (53f8 <pinctrl_configure_pins+0x394>)
    5214:	f005 fb88 	bl	a928 <assert_print>
    5218:	f240 212e 	movw	r1, #558	; 0x22e
    521c:	4648      	mov	r0, r9
    521e:	f005 fb7c 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    5222:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5226:	e017      	b.n	5258 <pinctrl_configure_pins+0x1f4>
            mask = P0_FEATURE_PINS_PRESENT;
    5228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    522c:	e7df      	b.n	51ee <pinctrl_configure_pins+0x18a>
    switch (port)
    522e:	2300      	movs	r3, #0
    5230:	e7dd      	b.n	51ee <pinctrl_configure_pins+0x18a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5232:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 53f0 <pinctrl_configure_pins+0x38c>
    5236:	f240 2329 	movw	r3, #553	; 0x229
    523a:	4652      	mov	r2, sl
    523c:	496f      	ldr	r1, [pc, #444]	; (53fc <pinctrl_configure_pins+0x398>)
    523e:	486e      	ldr	r0, [pc, #440]	; (53f8 <pinctrl_configure_pins+0x394>)
    5240:	f005 fb72 	bl	a928 <assert_print>
    5244:	f240 2129 	movw	r1, #553	; 0x229
    5248:	4650      	mov	r0, sl
    524a:	f005 fb66 	bl	a91a <assert_post_action>
    524e:	e7d4      	b.n	51fa <pinctrl_configure_pins+0x196>
        case 0: return NRF_P0;
    5250:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5254:	e000      	b.n	5258 <pinctrl_configure_pins+0x1f4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5256:	4a6a      	ldr	r2, [pc, #424]	; (5400 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5258:	2101      	movs	r1, #1
    525a:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    525e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5262:	460a      	mov	r2, r1
    5264:	f855 0008 	ldr.w	r0, [r5, r8]
    5268:	f7ff fe9c 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    526c:	e74e      	b.n	510c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    526e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5272:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5276:	2200      	movs	r2, #0
    5278:	4611      	mov	r1, r2
    527a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    527e:	f7ff fe91 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    5282:	e743      	b.n	510c <pinctrl_configure_pins+0xa8>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    5284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5288:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    528c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5290:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    5294:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    5298:	f013 0f20 	tst.w	r3, #32
    529c:	d01f      	beq.n	52de <pinctrl_configure_pins+0x27a>
    529e:	b30a      	cbz	r2, 52e4 <pinctrl_configure_pins+0x280>
            mask = P1_FEATURE_PINS_PRESENT;
    52a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    52a4:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    52a8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    52aa:	f013 0f01 	tst.w	r3, #1
    52ae:	d01b      	beq.n	52e8 <pinctrl_configure_pins+0x284>
    *p_pin = pin_number & 0x1F;
    52b0:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    52b4:	ea5f 1359 	movs.w	r3, r9, lsr #5
    52b8:	d025      	beq.n	5306 <pinctrl_configure_pins+0x2a2>
    52ba:	bb3b      	cbnz	r3, 530c <pinctrl_configure_pins+0x2a8>
            NRFX_ASSERT(0);
    52bc:	f8df 9130 	ldr.w	r9, [pc, #304]	; 53f0 <pinctrl_configure_pins+0x38c>
    52c0:	f240 232e 	movw	r3, #558	; 0x22e
    52c4:	464a      	mov	r2, r9
    52c6:	494b      	ldr	r1, [pc, #300]	; (53f4 <pinctrl_configure_pins+0x390>)
    52c8:	484b      	ldr	r0, [pc, #300]	; (53f8 <pinctrl_configure_pins+0x394>)
    52ca:	f005 fb2d 	bl	a928 <assert_print>
    52ce:	f240 212e 	movw	r1, #558	; 0x22e
    52d2:	4648      	mov	r0, r9
    52d4:	f005 fb21 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    52d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    52dc:	e017      	b.n	530e <pinctrl_configure_pins+0x2aa>
            mask = P0_FEATURE_PINS_PRESENT;
    52de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    52e2:	e7df      	b.n	52a4 <pinctrl_configure_pins+0x240>
    switch (port)
    52e4:	2300      	movs	r3, #0
    52e6:	e7dd      	b.n	52a4 <pinctrl_configure_pins+0x240>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    52e8:	f8df a104 	ldr.w	sl, [pc, #260]	; 53f0 <pinctrl_configure_pins+0x38c>
    52ec:	f240 2329 	movw	r3, #553	; 0x229
    52f0:	4652      	mov	r2, sl
    52f2:	4942      	ldr	r1, [pc, #264]	; (53fc <pinctrl_configure_pins+0x398>)
    52f4:	4840      	ldr	r0, [pc, #256]	; (53f8 <pinctrl_configure_pins+0x394>)
    52f6:	f005 fb17 	bl	a928 <assert_print>
    52fa:	f240 2129 	movw	r1, #553	; 0x229
    52fe:	4650      	mov	r0, sl
    5300:	f005 fb0b 	bl	a91a <assert_post_action>
    5304:	e7d4      	b.n	52b0 <pinctrl_configure_pins+0x24c>
        case 0: return NRF_P0;
    5306:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    530a:	e000      	b.n	530e <pinctrl_configure_pins+0x2aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    530c:	4a3c      	ldr	r2, [pc, #240]	; (5400 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    530e:	2101      	movs	r1, #1
    5310:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    5314:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5318:	2200      	movs	r2, #0
    531a:	f855 0008 	ldr.w	r0, [r5, r8]
    531e:	f7ff fe41 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    5322:	e6f3      	b.n	510c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    5324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5328:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    532c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5330:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    5334:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    5338:	f013 0f20 	tst.w	r3, #32
    533c:	d01f      	beq.n	537e <pinctrl_configure_pins+0x31a>
    533e:	b30a      	cbz	r2, 5384 <pinctrl_configure_pins+0x320>
            mask = P1_FEATURE_PINS_PRESENT;
    5340:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5344:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5348:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    534a:	f013 0f01 	tst.w	r3, #1
    534e:	d01b      	beq.n	5388 <pinctrl_configure_pins+0x324>
    *p_pin = pin_number & 0x1F;
    5350:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5354:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5358:	d025      	beq.n	53a6 <pinctrl_configure_pins+0x342>
    535a:	bb3b      	cbnz	r3, 53ac <pinctrl_configure_pins+0x348>
            NRFX_ASSERT(0);
    535c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 53f0 <pinctrl_configure_pins+0x38c>
    5360:	f240 232e 	movw	r3, #558	; 0x22e
    5364:	464a      	mov	r2, r9
    5366:	4923      	ldr	r1, [pc, #140]	; (53f4 <pinctrl_configure_pins+0x390>)
    5368:	4823      	ldr	r0, [pc, #140]	; (53f8 <pinctrl_configure_pins+0x394>)
    536a:	f005 fadd 	bl	a928 <assert_print>
    536e:	f240 212e 	movw	r1, #558	; 0x22e
    5372:	4648      	mov	r0, r9
    5374:	f005 fad1 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    5378:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    537c:	e017      	b.n	53ae <pinctrl_configure_pins+0x34a>
            mask = P0_FEATURE_PINS_PRESENT;
    537e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5382:	e7df      	b.n	5344 <pinctrl_configure_pins+0x2e0>
    switch (port)
    5384:	2300      	movs	r3, #0
    5386:	e7dd      	b.n	5344 <pinctrl_configure_pins+0x2e0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5388:	f8df a064 	ldr.w	sl, [pc, #100]	; 53f0 <pinctrl_configure_pins+0x38c>
    538c:	f240 2329 	movw	r3, #553	; 0x229
    5390:	4652      	mov	r2, sl
    5392:	491a      	ldr	r1, [pc, #104]	; (53fc <pinctrl_configure_pins+0x398>)
    5394:	4818      	ldr	r0, [pc, #96]	; (53f8 <pinctrl_configure_pins+0x394>)
    5396:	f005 fac7 	bl	a928 <assert_print>
    539a:	f240 2129 	movw	r1, #553	; 0x229
    539e:	4650      	mov	r0, sl
    53a0:	f005 fabb 	bl	a91a <assert_post_action>
    53a4:	e7d4      	b.n	5350 <pinctrl_configure_pins+0x2ec>
        case 0: return NRF_P0;
    53a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    53aa:	e000      	b.n	53ae <pinctrl_configure_pins+0x34a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    53ac:	4a14      	ldr	r2, [pc, #80]	; (5400 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    53ae:	2101      	movs	r1, #1
    53b0:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    53b4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    53b8:	460a      	mov	r2, r1
    53ba:	f855 0008 	ldr.w	r0, [r5, r8]
    53be:	f7ff fdf1 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    53c2:	e6a3      	b.n	510c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    53c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53c8:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    53cc:	2200      	movs	r2, #0
    53ce:	4611      	mov	r1, r2
    53d0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    53d4:	f7ff fde6 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    53d8:	e698      	b.n	510c <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    53da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53de:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    53e2:	2200      	movs	r2, #0
    53e4:	4611      	mov	r1, r2
    53e6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    53ea:	f7ff fddb 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    53ee:	e68d      	b.n	510c <pinctrl_configure_pins+0xa8>
    53f0:	0000d524 	.word	0x0000d524
    53f4:	0000c954 	.word	0x0000c954
    53f8:	0000c294 	.word	0x0000c294
    53fc:	0000d558 	.word	0x0000d558
    5400:	50000300 	.word	0x50000300
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    5404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5408:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    540c:	2200      	movs	r2, #0
    540e:	4611      	mov	r1, r2
    5410:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5414:	f7ff fdc6 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    5418:	e678      	b.n	510c <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    541a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    541e:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5422:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5426:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    542a:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    542e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5432:	d144      	bne.n	54be <pinctrl_configure_pins+0x45a>
    switch (port)
    5434:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5438:	d01f      	beq.n	547a <pinctrl_configure_pins+0x416>
    543a:	b10b      	cbz	r3, 5440 <pinctrl_configure_pins+0x3dc>
            mask = P1_FEATURE_PINS_PRESENT;
    543c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5440:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5444:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5446:	f012 0f01 	tst.w	r2, #1
    544a:	d019      	beq.n	5480 <pinctrl_configure_pins+0x41c>
    *p_pin = pin_number & 0x1F;
    544c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5450:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5454:	d023      	beq.n	549e <pinctrl_configure_pins+0x43a>
    5456:	bb2b      	cbnz	r3, 54a4 <pinctrl_configure_pins+0x440>
            NRFX_ASSERT(0);
    5458:	f8df 9300 	ldr.w	r9, [pc, #768]	; 575c <pinctrl_configure_pins+0x6f8>
    545c:	f240 232e 	movw	r3, #558	; 0x22e
    5460:	464a      	mov	r2, r9
    5462:	49bf      	ldr	r1, [pc, #764]	; (5760 <pinctrl_configure_pins+0x6fc>)
    5464:	48bf      	ldr	r0, [pc, #764]	; (5764 <pinctrl_configure_pins+0x700>)
    5466:	f005 fa5f 	bl	a928 <assert_print>
    546a:	f240 212e 	movw	r1, #558	; 0x22e
    546e:	4648      	mov	r0, r9
    5470:	f005 fa53 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    5474:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5478:	e015      	b.n	54a6 <pinctrl_configure_pins+0x442>
            mask = P0_FEATURE_PINS_PRESENT;
    547a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    547e:	e7df      	b.n	5440 <pinctrl_configure_pins+0x3dc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5480:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 575c <pinctrl_configure_pins+0x6f8>
    5484:	f240 2329 	movw	r3, #553	; 0x229
    5488:	4652      	mov	r2, sl
    548a:	49b7      	ldr	r1, [pc, #732]	; (5768 <pinctrl_configure_pins+0x704>)
    548c:	48b5      	ldr	r0, [pc, #724]	; (5764 <pinctrl_configure_pins+0x700>)
    548e:	f005 fa4b 	bl	a928 <assert_print>
    5492:	f240 2129 	movw	r1, #553	; 0x229
    5496:	4650      	mov	r0, sl
    5498:	f005 fa3f 	bl	a91a <assert_post_action>
    549c:	e7d6      	b.n	544c <pinctrl_configure_pins+0x3e8>
        case 0: return NRF_P0;
    549e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    54a2:	e000      	b.n	54a6 <pinctrl_configure_pins+0x442>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    54a4:	4ab1      	ldr	r2, [pc, #708]	; (576c <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    54a6:	2301      	movs	r3, #1
    54a8:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    54ac:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    54b0:	2201      	movs	r2, #1
    54b2:	4611      	mov	r1, r2
    54b4:	f855 0008 	ldr.w	r0, [r5, r8]
    54b8:	f7ff fd74 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    54bc:	e626      	b.n	510c <pinctrl_configure_pins+0xa8>
    switch (port)
    54be:	ea5f 1359 	movs.w	r3, r9, lsr #5
    54c2:	d01f      	beq.n	5504 <pinctrl_configure_pins+0x4a0>
    54c4:	b30b      	cbz	r3, 550a <pinctrl_configure_pins+0x4a6>
            mask = P1_FEATURE_PINS_PRESENT;
    54c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    54ca:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    54ce:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    54d0:	f013 0f01 	tst.w	r3, #1
    54d4:	d01b      	beq.n	550e <pinctrl_configure_pins+0x4aa>
    *p_pin = pin_number & 0x1F;
    54d6:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    54da:	ea5f 1359 	movs.w	r3, r9, lsr #5
    54de:	d025      	beq.n	552c <pinctrl_configure_pins+0x4c8>
    54e0:	bb3b      	cbnz	r3, 5532 <pinctrl_configure_pins+0x4ce>
            NRFX_ASSERT(0);
    54e2:	f8df 9278 	ldr.w	r9, [pc, #632]	; 575c <pinctrl_configure_pins+0x6f8>
    54e6:	f240 232e 	movw	r3, #558	; 0x22e
    54ea:	464a      	mov	r2, r9
    54ec:	499c      	ldr	r1, [pc, #624]	; (5760 <pinctrl_configure_pins+0x6fc>)
    54ee:	489d      	ldr	r0, [pc, #628]	; (5764 <pinctrl_configure_pins+0x700>)
    54f0:	f005 fa1a 	bl	a928 <assert_print>
    54f4:	f240 212e 	movw	r1, #558	; 0x22e
    54f8:	4648      	mov	r0, r9
    54fa:	f005 fa0e 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    54fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5502:	e017      	b.n	5534 <pinctrl_configure_pins+0x4d0>
            mask = P0_FEATURE_PINS_PRESENT;
    5504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5508:	e7df      	b.n	54ca <pinctrl_configure_pins+0x466>
    switch (port)
    550a:	2300      	movs	r3, #0
    550c:	e7dd      	b.n	54ca <pinctrl_configure_pins+0x466>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    550e:	f8df a24c 	ldr.w	sl, [pc, #588]	; 575c <pinctrl_configure_pins+0x6f8>
    5512:	f240 2329 	movw	r3, #553	; 0x229
    5516:	4652      	mov	r2, sl
    5518:	4993      	ldr	r1, [pc, #588]	; (5768 <pinctrl_configure_pins+0x704>)
    551a:	4892      	ldr	r0, [pc, #584]	; (5764 <pinctrl_configure_pins+0x700>)
    551c:	f005 fa04 	bl	a928 <assert_print>
    5520:	f240 2129 	movw	r1, #553	; 0x229
    5524:	4650      	mov	r0, sl
    5526:	f005 f9f8 	bl	a91a <assert_post_action>
    552a:	e7d4      	b.n	54d6 <pinctrl_configure_pins+0x472>
        case 0: return NRF_P0;
    552c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5530:	e000      	b.n	5534 <pinctrl_configure_pins+0x4d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5532:	4a8e      	ldr	r2, [pc, #568]	; (576c <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5534:	2301      	movs	r3, #1
    5536:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    553a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    553e:	e7b7      	b.n	54b0 <pinctrl_configure_pins+0x44c>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    5540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5544:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5548:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    554c:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    5550:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    5554:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5558:	d144      	bne.n	55e4 <pinctrl_configure_pins+0x580>
    switch (port)
    555a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    555e:	d01f      	beq.n	55a0 <pinctrl_configure_pins+0x53c>
    5560:	b10b      	cbz	r3, 5566 <pinctrl_configure_pins+0x502>
            mask = P1_FEATURE_PINS_PRESENT;
    5562:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5566:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    556a:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    556c:	f012 0f01 	tst.w	r2, #1
    5570:	d019      	beq.n	55a6 <pinctrl_configure_pins+0x542>
    *p_pin = pin_number & 0x1F;
    5572:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5576:	ea5f 1359 	movs.w	r3, r9, lsr #5
    557a:	d023      	beq.n	55c4 <pinctrl_configure_pins+0x560>
    557c:	bb2b      	cbnz	r3, 55ca <pinctrl_configure_pins+0x566>
            NRFX_ASSERT(0);
    557e:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 575c <pinctrl_configure_pins+0x6f8>
    5582:	f240 232e 	movw	r3, #558	; 0x22e
    5586:	464a      	mov	r2, r9
    5588:	4975      	ldr	r1, [pc, #468]	; (5760 <pinctrl_configure_pins+0x6fc>)
    558a:	4876      	ldr	r0, [pc, #472]	; (5764 <pinctrl_configure_pins+0x700>)
    558c:	f005 f9cc 	bl	a928 <assert_print>
    5590:	f240 212e 	movw	r1, #558	; 0x22e
    5594:	4648      	mov	r0, r9
    5596:	f005 f9c0 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    559a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    559e:	e015      	b.n	55cc <pinctrl_configure_pins+0x568>
            mask = P0_FEATURE_PINS_PRESENT;
    55a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    55a4:	e7df      	b.n	5566 <pinctrl_configure_pins+0x502>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    55a6:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 575c <pinctrl_configure_pins+0x6f8>
    55aa:	f240 2329 	movw	r3, #553	; 0x229
    55ae:	4652      	mov	r2, sl
    55b0:	496d      	ldr	r1, [pc, #436]	; (5768 <pinctrl_configure_pins+0x704>)
    55b2:	486c      	ldr	r0, [pc, #432]	; (5764 <pinctrl_configure_pins+0x700>)
    55b4:	f005 f9b8 	bl	a928 <assert_print>
    55b8:	f240 2129 	movw	r1, #553	; 0x229
    55bc:	4650      	mov	r0, sl
    55be:	f005 f9ac 	bl	a91a <assert_post_action>
    55c2:	e7d6      	b.n	5572 <pinctrl_configure_pins+0x50e>
        case 0: return NRF_P0;
    55c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    55c8:	e000      	b.n	55cc <pinctrl_configure_pins+0x568>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    55ca:	4a68      	ldr	r2, [pc, #416]	; (576c <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    55cc:	2301      	movs	r3, #1
    55ce:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    55d2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    55d6:	2201      	movs	r2, #1
    55d8:	4611      	mov	r1, r2
    55da:	f855 0008 	ldr.w	r0, [r5, r8]
    55de:	f7ff fce1 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    55e2:	e593      	b.n	510c <pinctrl_configure_pins+0xa8>
    switch (port)
    55e4:	ea5f 1359 	movs.w	r3, r9, lsr #5
    55e8:	d01f      	beq.n	562a <pinctrl_configure_pins+0x5c6>
    55ea:	b30b      	cbz	r3, 5630 <pinctrl_configure_pins+0x5cc>
            mask = P1_FEATURE_PINS_PRESENT;
    55ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    55f0:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    55f4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    55f6:	f013 0f01 	tst.w	r3, #1
    55fa:	d01b      	beq.n	5634 <pinctrl_configure_pins+0x5d0>
    *p_pin = pin_number & 0x1F;
    55fc:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5600:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5604:	d025      	beq.n	5652 <pinctrl_configure_pins+0x5ee>
    5606:	bb3b      	cbnz	r3, 5658 <pinctrl_configure_pins+0x5f4>
            NRFX_ASSERT(0);
    5608:	f8df 9150 	ldr.w	r9, [pc, #336]	; 575c <pinctrl_configure_pins+0x6f8>
    560c:	f240 232e 	movw	r3, #558	; 0x22e
    5610:	464a      	mov	r2, r9
    5612:	4953      	ldr	r1, [pc, #332]	; (5760 <pinctrl_configure_pins+0x6fc>)
    5614:	4853      	ldr	r0, [pc, #332]	; (5764 <pinctrl_configure_pins+0x700>)
    5616:	f005 f987 	bl	a928 <assert_print>
    561a:	f240 212e 	movw	r1, #558	; 0x22e
    561e:	4648      	mov	r0, r9
    5620:	f005 f97b 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    5624:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5628:	e017      	b.n	565a <pinctrl_configure_pins+0x5f6>
            mask = P0_FEATURE_PINS_PRESENT;
    562a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    562e:	e7df      	b.n	55f0 <pinctrl_configure_pins+0x58c>
    switch (port)
    5630:	2300      	movs	r3, #0
    5632:	e7dd      	b.n	55f0 <pinctrl_configure_pins+0x58c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5634:	f8df a124 	ldr.w	sl, [pc, #292]	; 575c <pinctrl_configure_pins+0x6f8>
    5638:	f240 2329 	movw	r3, #553	; 0x229
    563c:	4652      	mov	r2, sl
    563e:	494a      	ldr	r1, [pc, #296]	; (5768 <pinctrl_configure_pins+0x704>)
    5640:	4848      	ldr	r0, [pc, #288]	; (5764 <pinctrl_configure_pins+0x700>)
    5642:	f005 f971 	bl	a928 <assert_print>
    5646:	f240 2129 	movw	r1, #553	; 0x229
    564a:	4650      	mov	r0, sl
    564c:	f005 f965 	bl	a91a <assert_post_action>
    5650:	e7d4      	b.n	55fc <pinctrl_configure_pins+0x598>
        case 0: return NRF_P0;
    5652:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5656:	e000      	b.n	565a <pinctrl_configure_pins+0x5f6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5658:	4a44      	ldr	r2, [pc, #272]	; (576c <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    565a:	2301      	movs	r3, #1
    565c:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    5660:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    5664:	e7b7      	b.n	55d6 <pinctrl_configure_pins+0x572>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    5666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    566a:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    566e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5672:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    5676:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    567a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    567e:	d144      	bne.n	570a <pinctrl_configure_pins+0x6a6>
    switch (port)
    5680:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5684:	d01f      	beq.n	56c6 <pinctrl_configure_pins+0x662>
    5686:	b10b      	cbz	r3, 568c <pinctrl_configure_pins+0x628>
            mask = P1_FEATURE_PINS_PRESENT;
    5688:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    568c:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5690:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5692:	f012 0f01 	tst.w	r2, #1
    5696:	d019      	beq.n	56cc <pinctrl_configure_pins+0x668>
    *p_pin = pin_number & 0x1F;
    5698:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    569c:	ea5f 1359 	movs.w	r3, r9, lsr #5
    56a0:	d023      	beq.n	56ea <pinctrl_configure_pins+0x686>
    56a2:	bb2b      	cbnz	r3, 56f0 <pinctrl_configure_pins+0x68c>
            NRFX_ASSERT(0);
    56a4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 575c <pinctrl_configure_pins+0x6f8>
    56a8:	f240 232e 	movw	r3, #558	; 0x22e
    56ac:	464a      	mov	r2, r9
    56ae:	492c      	ldr	r1, [pc, #176]	; (5760 <pinctrl_configure_pins+0x6fc>)
    56b0:	482c      	ldr	r0, [pc, #176]	; (5764 <pinctrl_configure_pins+0x700>)
    56b2:	f005 f939 	bl	a928 <assert_print>
    56b6:	f240 212e 	movw	r1, #558	; 0x22e
    56ba:	4648      	mov	r0, r9
    56bc:	f005 f92d 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    56c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    56c4:	e015      	b.n	56f2 <pinctrl_configure_pins+0x68e>
            mask = P0_FEATURE_PINS_PRESENT;
    56c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    56ca:	e7df      	b.n	568c <pinctrl_configure_pins+0x628>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    56cc:	f8df a08c 	ldr.w	sl, [pc, #140]	; 575c <pinctrl_configure_pins+0x6f8>
    56d0:	f240 2329 	movw	r3, #553	; 0x229
    56d4:	4652      	mov	r2, sl
    56d6:	4924      	ldr	r1, [pc, #144]	; (5768 <pinctrl_configure_pins+0x704>)
    56d8:	4822      	ldr	r0, [pc, #136]	; (5764 <pinctrl_configure_pins+0x700>)
    56da:	f005 f925 	bl	a928 <assert_print>
    56de:	f240 2129 	movw	r1, #553	; 0x229
    56e2:	4650      	mov	r0, sl
    56e4:	f005 f919 	bl	a91a <assert_post_action>
    56e8:	e7d6      	b.n	5698 <pinctrl_configure_pins+0x634>
        case 0: return NRF_P0;
    56ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    56ee:	e000      	b.n	56f2 <pinctrl_configure_pins+0x68e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    56f0:	4a1e      	ldr	r2, [pc, #120]	; (576c <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    56f2:	2301      	movs	r3, #1
    56f4:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    56f8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    56fc:	2201      	movs	r2, #1
    56fe:	4611      	mov	r1, r2
    5700:	f855 0008 	ldr.w	r0, [r5, r8]
    5704:	f7ff fc4e 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5708:	e500      	b.n	510c <pinctrl_configure_pins+0xa8>
    switch (port)
    570a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    570e:	d01f      	beq.n	5750 <pinctrl_configure_pins+0x6ec>
    5710:	b30b      	cbz	r3, 5756 <pinctrl_configure_pins+0x6f2>
            mask = P1_FEATURE_PINS_PRESENT;
    5712:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5716:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    571a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    571c:	f013 0f01 	tst.w	r3, #1
    5720:	d026      	beq.n	5770 <pinctrl_configure_pins+0x70c>
    *p_pin = pin_number & 0x1F;
    5722:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5726:	ea5f 1359 	movs.w	r3, r9, lsr #5
    572a:	d030      	beq.n	578e <pinctrl_configure_pins+0x72a>
    572c:	bb93      	cbnz	r3, 5794 <pinctrl_configure_pins+0x730>
            NRFX_ASSERT(0);
    572e:	f8df 902c 	ldr.w	r9, [pc, #44]	; 575c <pinctrl_configure_pins+0x6f8>
    5732:	f240 232e 	movw	r3, #558	; 0x22e
    5736:	464a      	mov	r2, r9
    5738:	4909      	ldr	r1, [pc, #36]	; (5760 <pinctrl_configure_pins+0x6fc>)
    573a:	480a      	ldr	r0, [pc, #40]	; (5764 <pinctrl_configure_pins+0x700>)
    573c:	f005 f8f4 	bl	a928 <assert_print>
    5740:	f240 212e 	movw	r1, #558	; 0x22e
    5744:	4648      	mov	r0, r9
    5746:	f005 f8e8 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    574a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    574e:	e022      	b.n	5796 <pinctrl_configure_pins+0x732>
            mask = P0_FEATURE_PINS_PRESENT;
    5750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5754:	e7df      	b.n	5716 <pinctrl_configure_pins+0x6b2>
    switch (port)
    5756:	2300      	movs	r3, #0
    5758:	e7dd      	b.n	5716 <pinctrl_configure_pins+0x6b2>
    575a:	bf00      	nop
    575c:	0000d524 	.word	0x0000d524
    5760:	0000c954 	.word	0x0000c954
    5764:	0000c294 	.word	0x0000c294
    5768:	0000d558 	.word	0x0000d558
    576c:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5770:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 5960 <pinctrl_configure_pins+0x8fc>
    5774:	f240 2329 	movw	r3, #553	; 0x229
    5778:	4652      	mov	r2, sl
    577a:	497a      	ldr	r1, [pc, #488]	; (5964 <pinctrl_configure_pins+0x900>)
    577c:	487a      	ldr	r0, [pc, #488]	; (5968 <pinctrl_configure_pins+0x904>)
    577e:	f005 f8d3 	bl	a928 <assert_print>
    5782:	f240 2129 	movw	r1, #553	; 0x229
    5786:	4650      	mov	r0, sl
    5788:	f005 f8c7 	bl	a91a <assert_post_action>
    578c:	e7c9      	b.n	5722 <pinctrl_configure_pins+0x6be>
        case 0: return NRF_P0;
    578e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5792:	e000      	b.n	5796 <pinctrl_configure_pins+0x732>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5794:	4a75      	ldr	r2, [pc, #468]	; (596c <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5796:	2301      	movs	r3, #1
    5798:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    579c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    57a0:	e7ac      	b.n	56fc <pinctrl_configure_pins+0x698>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    57a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    57a6:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    57aa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    57ae:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    57b2:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    57b6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    57ba:	d144      	bne.n	5846 <pinctrl_configure_pins+0x7e2>
    switch (port)
    57bc:	ea5f 1359 	movs.w	r3, r9, lsr #5
    57c0:	d01f      	beq.n	5802 <pinctrl_configure_pins+0x79e>
    57c2:	b10b      	cbz	r3, 57c8 <pinctrl_configure_pins+0x764>
            mask = P1_FEATURE_PINS_PRESENT;
    57c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    57c8:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    57cc:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    57ce:	f012 0f01 	tst.w	r2, #1
    57d2:	d019      	beq.n	5808 <pinctrl_configure_pins+0x7a4>
    *p_pin = pin_number & 0x1F;
    57d4:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    57d8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    57dc:	d023      	beq.n	5826 <pinctrl_configure_pins+0x7c2>
    57de:	bb2b      	cbnz	r3, 582c <pinctrl_configure_pins+0x7c8>
            NRFX_ASSERT(0);
    57e0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 5960 <pinctrl_configure_pins+0x8fc>
    57e4:	f240 232e 	movw	r3, #558	; 0x22e
    57e8:	464a      	mov	r2, r9
    57ea:	4961      	ldr	r1, [pc, #388]	; (5970 <pinctrl_configure_pins+0x90c>)
    57ec:	485e      	ldr	r0, [pc, #376]	; (5968 <pinctrl_configure_pins+0x904>)
    57ee:	f005 f89b 	bl	a928 <assert_print>
    57f2:	f240 212e 	movw	r1, #558	; 0x22e
    57f6:	4648      	mov	r0, r9
    57f8:	f005 f88f 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    57fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5800:	e015      	b.n	582e <pinctrl_configure_pins+0x7ca>
            mask = P0_FEATURE_PINS_PRESENT;
    5802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5806:	e7df      	b.n	57c8 <pinctrl_configure_pins+0x764>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5808:	f8df a154 	ldr.w	sl, [pc, #340]	; 5960 <pinctrl_configure_pins+0x8fc>
    580c:	f240 2329 	movw	r3, #553	; 0x229
    5810:	4652      	mov	r2, sl
    5812:	4954      	ldr	r1, [pc, #336]	; (5964 <pinctrl_configure_pins+0x900>)
    5814:	4854      	ldr	r0, [pc, #336]	; (5968 <pinctrl_configure_pins+0x904>)
    5816:	f005 f887 	bl	a928 <assert_print>
    581a:	f240 2129 	movw	r1, #553	; 0x229
    581e:	4650      	mov	r0, sl
    5820:	f005 f87b 	bl	a91a <assert_post_action>
    5824:	e7d6      	b.n	57d4 <pinctrl_configure_pins+0x770>
        case 0: return NRF_P0;
    5826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    582a:	e000      	b.n	582e <pinctrl_configure_pins+0x7ca>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    582c:	4a4f      	ldr	r2, [pc, #316]	; (596c <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    582e:	2301      	movs	r3, #1
    5830:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    5834:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5838:	2201      	movs	r2, #1
    583a:	4611      	mov	r1, r2
    583c:	f855 0008 	ldr.w	r0, [r5, r8]
    5840:	f7ff fbb0 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5844:	e462      	b.n	510c <pinctrl_configure_pins+0xa8>
    switch (port)
    5846:	ea5f 1359 	movs.w	r3, r9, lsr #5
    584a:	d01f      	beq.n	588c <pinctrl_configure_pins+0x828>
    584c:	b30b      	cbz	r3, 5892 <pinctrl_configure_pins+0x82e>
            mask = P1_FEATURE_PINS_PRESENT;
    584e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5852:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5856:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5858:	f013 0f01 	tst.w	r3, #1
    585c:	d01b      	beq.n	5896 <pinctrl_configure_pins+0x832>
    *p_pin = pin_number & 0x1F;
    585e:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5862:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5866:	d025      	beq.n	58b4 <pinctrl_configure_pins+0x850>
    5868:	bb3b      	cbnz	r3, 58ba <pinctrl_configure_pins+0x856>
            NRFX_ASSERT(0);
    586a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 5960 <pinctrl_configure_pins+0x8fc>
    586e:	f240 232e 	movw	r3, #558	; 0x22e
    5872:	464a      	mov	r2, r9
    5874:	493e      	ldr	r1, [pc, #248]	; (5970 <pinctrl_configure_pins+0x90c>)
    5876:	483c      	ldr	r0, [pc, #240]	; (5968 <pinctrl_configure_pins+0x904>)
    5878:	f005 f856 	bl	a928 <assert_print>
    587c:	f240 212e 	movw	r1, #558	; 0x22e
    5880:	4648      	mov	r0, r9
    5882:	f005 f84a 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    5886:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    588a:	e017      	b.n	58bc <pinctrl_configure_pins+0x858>
            mask = P0_FEATURE_PINS_PRESENT;
    588c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5890:	e7df      	b.n	5852 <pinctrl_configure_pins+0x7ee>
    switch (port)
    5892:	2300      	movs	r3, #0
    5894:	e7dd      	b.n	5852 <pinctrl_configure_pins+0x7ee>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5896:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 5960 <pinctrl_configure_pins+0x8fc>
    589a:	f240 2329 	movw	r3, #553	; 0x229
    589e:	4652      	mov	r2, sl
    58a0:	4930      	ldr	r1, [pc, #192]	; (5964 <pinctrl_configure_pins+0x900>)
    58a2:	4831      	ldr	r0, [pc, #196]	; (5968 <pinctrl_configure_pins+0x904>)
    58a4:	f005 f840 	bl	a928 <assert_print>
    58a8:	f240 2129 	movw	r1, #553	; 0x229
    58ac:	4650      	mov	r0, sl
    58ae:	f005 f834 	bl	a91a <assert_post_action>
    58b2:	e7d4      	b.n	585e <pinctrl_configure_pins+0x7fa>
        case 0: return NRF_P0;
    58b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    58b8:	e000      	b.n	58bc <pinctrl_configure_pins+0x858>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    58ba:	4a2c      	ldr	r2, [pc, #176]	; (596c <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    58bc:	2301      	movs	r3, #1
    58be:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    58c2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    58c6:	e7b7      	b.n	5838 <pinctrl_configure_pins+0x7d4>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    58c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    58cc:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    58d0:	2201      	movs	r2, #1
    58d2:	2100      	movs	r1, #0
    58d4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    58d8:	f7ff fb64 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    58dc:	e416      	b.n	510c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    58de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    58e2:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    58e6:	2201      	movs	r2, #1
    58e8:	2100      	movs	r1, #0
    58ea:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    58ee:	f7ff fb59 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    58f2:	e40b      	b.n	510c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    58f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    58f8:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    58fc:	2201      	movs	r2, #1
    58fe:	2100      	movs	r1, #0
    5900:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5904:	f7ff fb4e 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5908:	e400      	b.n	510c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    590a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    590e:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5912:	2201      	movs	r2, #1
    5914:	2100      	movs	r1, #0
    5916:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    591a:	f7ff fb43 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    591e:	f7ff bbf5 	b.w	510c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    5922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5926:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    592a:	2201      	movs	r2, #1
    592c:	2100      	movs	r1, #0
    592e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5932:	f7ff fb37 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5936:	f7ff bbe9 	b.w	510c <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    593a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    593e:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5942:	2201      	movs	r2, #1
    5944:	2100      	movs	r1, #0
    5946:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    594a:	f7ff fb2b 	bl	4fa4 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    594e:	f7ff bbdd 	b.w	510c <pinctrl_configure_pins+0xa8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    5952:	2000      	movs	r0, #0
    5954:	e001      	b.n	595a <pinctrl_configure_pins+0x8f6>
		switch (NRF_GET_FUN(pins[i])) {
    5956:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    595a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    595e:	bf00      	nop
    5960:	0000d524 	.word	0x0000d524
    5964:	0000d558 	.word	0x0000d558
    5968:	0000c294 	.word	0x0000c294
    596c:	50000300 	.word	0x50000300
    5970:	0000c954 	.word	0x0000c954

00005974 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5974:	b510      	push	{r4, lr}
    5976:	b084      	sub	sp, #16
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    5978:	f7fc fae2 	bl	1f40 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    597c:	4b06      	ldr	r3, [pc, #24]	; (5998 <k_sys_fatal_error_handler+0x24>)
    597e:	9302      	str	r3, [sp, #8]
    5980:	2400      	movs	r4, #0
    5982:	9401      	str	r4, [sp, #4]
    5984:	9400      	str	r4, [sp, #0]
    5986:	4623      	mov	r3, r4
    5988:	2201      	movs	r2, #1
    598a:	4904      	ldr	r1, [pc, #16]	; (599c <k_sys_fatal_error_handler+0x28>)
    598c:	4620      	mov	r0, r4
    598e:	f006 f80d 	bl	b9ac <z_log_msg2_runtime_create>
		sys_arch_reboot(0);
    5992:	4620      	mov	r0, r4
    5994:	f7fe f986 	bl	3ca4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    5998:	0000d6fc 	.word	0x0000d6fc
    599c:	0000c094 	.word	0x0000c094

000059a0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    59a0:	4b02      	ldr	r3, [pc, #8]	; (59ac <nvmc_wait+0xc>)
    59a2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    59a6:	2b00      	cmp	r3, #0
    59a8:	d0fa      	beq.n	59a0 <nvmc_wait>
}
    59aa:	4770      	bx	lr
    59ac:	4001e000 	.word	0x4001e000

000059b0 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    59b0:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    59b2:	4b03      	ldr	r3, [pc, #12]	; (59c0 <nvmc_config+0x10>)
    59b4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    59b8:	f7ff fff2 	bl	59a0 <nvmc_wait>
}
    59bc:	bd08      	pop	{r3, pc}
    59be:	bf00      	nop
    59c0:	4001e000 	.word	0x4001e000

000059c4 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    59c4:	4b01      	ldr	r3, [pc, #4]	; (59cc <SystemCoreClockUpdate+0x8>)
    59c6:	4a02      	ldr	r2, [pc, #8]	; (59d0 <SystemCoreClockUpdate+0xc>)
    59c8:	601a      	str	r2, [r3, #0]
}
    59ca:	4770      	bx	lr
    59cc:	20004060 	.word	0x20004060
    59d0:	03d09000 	.word	0x03d09000

000059d4 <SystemInit>:

void SystemInit(void)
{
    59d4:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    59d6:	f006 f806 	bl	b9e6 <nrf52_errata_36>
    59da:	b140      	cbz	r0, 59ee <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    59dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59e0:	2200      	movs	r2, #0
    59e2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    59e6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    59ea:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    59ee:	f006 f804 	bl	b9fa <nrf52_errata_66>
    59f2:	2800      	cmp	r0, #0
    59f4:	d046      	beq.n	5a84 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    59f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    59fa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    59fe:	4b59      	ldr	r3, [pc, #356]	; (5b64 <SystemInit+0x190>)
    5a00:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    5a04:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    5a08:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    5a0c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    5a10:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    5a14:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    5a18:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5a1c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    5a20:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    5a24:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5a28:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5a2c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    5a30:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    5a34:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    5a38:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    5a3c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    5a40:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    5a44:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    5a48:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5a4c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    5a50:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    5a54:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    5a58:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5a5c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    5a60:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    5a64:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    5a68:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5a6c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    5a70:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    5a74:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    5a78:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5a7c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    5a80:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    5a84:	f005 ffc3 	bl	ba0e <nrf52_errata_98>
    5a88:	b118      	cbz	r0, 5a92 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    5a8a:	4b37      	ldr	r3, [pc, #220]	; (5b68 <SystemInit+0x194>)
    5a8c:	4a37      	ldr	r2, [pc, #220]	; (5b6c <SystemInit+0x198>)
    5a8e:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5a92:	f005 ffcf 	bl	ba34 <nrf52_errata_103>
    5a96:	b118      	cbz	r0, 5aa0 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5a98:	4b35      	ldr	r3, [pc, #212]	; (5b70 <SystemInit+0x19c>)
    5a9a:	22fb      	movs	r2, #251	; 0xfb
    5a9c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5aa0:	f005 ffdb 	bl	ba5a <nrf52_errata_115>
    5aa4:	b170      	cbz	r0, 5ac4 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5aa6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5aaa:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    5aae:	f023 030f 	bic.w	r3, r3, #15
    5ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5ab6:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    5aba:	f002 020f 	and.w	r2, r2, #15
    5abe:	4313      	orrs	r3, r2
    5ac0:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5ac4:	f005 ffdc 	bl	ba80 <nrf52_errata_120>
    5ac8:	b120      	cbz	r0, 5ad4 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    5aca:	4b2a      	ldr	r3, [pc, #168]	; (5b74 <SystemInit+0x1a0>)
    5acc:	f44f 7200 	mov.w	r2, #512	; 0x200
    5ad0:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    5ad4:	f005 ffe7 	bl	baa6 <nrf52_errata_136>
    5ad8:	b160      	cbz	r0, 5af4 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ade:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5ae2:	f013 0f01 	tst.w	r3, #1
    5ae6:	d005      	beq.n	5af4 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5ae8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5aec:	f06f 0201 	mvn.w	r2, #1
    5af0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    5af4:	f005 ffe1 	bl	baba <nrf52_configuration_249>
    5af8:	b138      	cbz	r0, 5b0a <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    5afa:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5afe:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    5b02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b06:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5b0a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5b0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    5b12:	2b00      	cmp	r3, #0
    5b14:	db08      	blt.n	5b28 <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    5b16:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5b1a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5b1e:	2b00      	cmp	r3, #0
    5b20:	db02      	blt.n	5b28 <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    5b22:	f7ff ff4f 	bl	59c4 <SystemCoreClockUpdate>
}
    5b26:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    5b28:	2001      	movs	r0, #1
    5b2a:	f7ff ff41 	bl	59b0 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5b2e:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    5b32:	2512      	movs	r5, #18
    5b34:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    5b38:	f7ff ff32 	bl	59a0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    5b3c:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    5b40:	f7ff ff2e 	bl	59a0 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    5b44:	2000      	movs	r0, #0
    5b46:	f7ff ff33 	bl	59b0 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    5b4a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5b4e:	490a      	ldr	r1, [pc, #40]	; (5b78 <SystemInit+0x1a4>)
    5b50:	68ca      	ldr	r2, [r1, #12]
    5b52:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5b56:	4b09      	ldr	r3, [pc, #36]	; (5b7c <SystemInit+0x1a8>)
    5b58:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5b5a:	60cb      	str	r3, [r1, #12]
    5b5c:	f3bf 8f4f 	dsb	sy
    __NOP();
    5b60:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5b62:	e7fd      	b.n	5b60 <SystemInit+0x18c>
    5b64:	4000c000 	.word	0x4000c000
    5b68:	40005000 	.word	0x40005000
    5b6c:	00038148 	.word	0x00038148
    5b70:	4000f000 	.word	0x4000f000
    5b74:	40029000 	.word	0x40029000
    5b78:	e000ed00 	.word	0xe000ed00
    5b7c:	05fa0004 	.word	0x05fa0004

00005b80 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    5b80:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    5b82:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    5b84:	fab4 f384 	clz	r3, r4
    5b88:	f1c3 031f 	rsb	r3, r3, #31
    5b8c:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    5b90:	2b00      	cmp	r3, #0
    5b92:	db16      	blt.n	5bc2 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    5b94:	2201      	movs	r2, #1
    5b96:	fa02 f303 	lsl.w	r3, r2, r3
    5b9a:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5b9e:	f3bf 8f5b 	dmb	ish
    5ba2:	e850 2f00 	ldrex	r2, [r0]
    5ba6:	42a2      	cmp	r2, r4
    5ba8:	d104      	bne.n	5bb4 <nrfx_flag32_alloc+0x34>
    5baa:	e840 3e00 	strex	lr, r3, [r0]
    5bae:	f1be 0f00 	cmp.w	lr, #0
    5bb2:	d1f6      	bne.n	5ba2 <nrfx_flag32_alloc+0x22>
    5bb4:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5bb8:	d1e3      	bne.n	5b82 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    5bba:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    5bbe:	4802      	ldr	r0, [pc, #8]	; (5bc8 <nrfx_flag32_alloc+0x48>)
}
    5bc0:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    5bc2:	4802      	ldr	r0, [pc, #8]	; (5bcc <nrfx_flag32_alloc+0x4c>)
    5bc4:	e7fc      	b.n	5bc0 <nrfx_flag32_alloc+0x40>
    5bc6:	bf00      	nop
    5bc8:	0bad0000 	.word	0x0bad0000
    5bcc:	0bad0002 	.word	0x0bad0002

00005bd0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    5bd0:	6803      	ldr	r3, [r0, #0]
    5bd2:	40cb      	lsrs	r3, r1
    5bd4:	f013 0f01 	tst.w	r3, #1
    5bd8:	d115      	bne.n	5c06 <nrfx_flag32_free+0x36>
{
    5bda:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    5bdc:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    5bde:	2301      	movs	r3, #1
    5be0:	408b      	lsls	r3, r1
    5be2:	4313      	orrs	r3, r2
    5be4:	f3bf 8f5b 	dmb	ish
    5be8:	e850 cf00 	ldrex	ip, [r0]
    5bec:	4594      	cmp	ip, r2
    5bee:	d104      	bne.n	5bfa <nrfx_flag32_free+0x2a>
    5bf0:	e840 3e00 	strex	lr, r3, [r0]
    5bf4:	f1be 0f00 	cmp.w	lr, #0
    5bf8:	d1f6      	bne.n	5be8 <nrfx_flag32_free+0x18>
    5bfa:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5bfe:	d1ed      	bne.n	5bdc <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    5c00:	4802      	ldr	r0, [pc, #8]	; (5c0c <nrfx_flag32_free+0x3c>)
}
    5c02:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    5c06:	4802      	ldr	r0, [pc, #8]	; (5c10 <nrfx_flag32_free+0x40>)
}
    5c08:	4770      	bx	lr
    5c0a:	bf00      	nop
    5c0c:	0bad0000 	.word	0x0bad0000
    5c10:	0bad0004 	.word	0x0bad0004

00005c14 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    5c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c16:	b083      	sub	sp, #12
    switch (domain)
    5c18:	4605      	mov	r5, r0
    5c1a:	b168      	cbz	r0, 5c38 <clock_stop+0x24>
    5c1c:	2801      	cmp	r0, #1
    5c1e:	d020      	beq.n	5c62 <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5c20:	4c3d      	ldr	r4, [pc, #244]	; (5d18 <clock_stop+0x104>)
    5c22:	23d8      	movs	r3, #216	; 0xd8
    5c24:	4622      	mov	r2, r4
    5c26:	493d      	ldr	r1, [pc, #244]	; (5d1c <clock_stop+0x108>)
    5c28:	483d      	ldr	r0, [pc, #244]	; (5d20 <clock_stop+0x10c>)
    5c2a:	f004 fe7d 	bl	a928 <assert_print>
    5c2e:	21d8      	movs	r1, #216	; 0xd8
    5c30:	4620      	mov	r0, r4
    5c32:	f004 fe72 	bl	a91a <assert_post_action>
            return;
    5c36:	e068      	b.n	5d0a <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    5c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c3c:	2202      	movs	r2, #2
    5c3e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c42:	2200      	movs	r2, #0
    5c44:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5c48:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c4c:	2201      	movs	r2, #1
    5c4e:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    5c50:	2301      	movs	r3, #1
    5c52:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5c56:	429d      	cmp	r5, r3
    5c58:	d00f      	beq.n	5c7a <clock_stop+0x66>
    5c5a:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5c5c:	f242 7410 	movw	r4, #10000	; 0x2710
    5c60:	e029      	b.n	5cb6 <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    5c62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c66:	2201      	movs	r2, #1
    5c68:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c6c:	2100      	movs	r1, #0
    5c6e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    5c72:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c76:	605a      	str	r2, [r3, #4]
}
    5c78:	e7ea      	b.n	5c50 <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5c7a:	f10d 0607 	add.w	r6, sp, #7
    5c7e:	e7ed      	b.n	5c5c <clock_stop+0x48>
            if (p_clk_src != NULL)
    5c80:	b136      	cbz	r6, 5c90 <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5c82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c86:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5c8a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5c8e:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5c90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c94:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    5c98:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5c9c:	d12f      	bne.n	5cfe <clock_stop+0xea>
    return false;
    5c9e:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5ca0:	b38b      	cbz	r3, 5d06 <clock_stop+0xf2>
    5ca2:	b11e      	cbz	r6, 5cac <clock_stop+0x98>
    5ca4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5ca8:	2b01      	cmp	r3, #1
    5caa:	d12c      	bne.n	5d06 <clock_stop+0xf2>
    5cac:	2001      	movs	r0, #1
    5cae:	f005 ff17 	bl	bae0 <nrfx_busy_wait>
    5cb2:	3c01      	subs	r4, #1
    5cb4:	d027      	beq.n	5d06 <clock_stop+0xf2>
    switch (domain)
    5cb6:	2d00      	cmp	r5, #0
    5cb8:	d0e2      	beq.n	5c80 <clock_stop+0x6c>
    5cba:	2d01      	cmp	r5, #1
    5cbc:	d00e      	beq.n	5cdc <clock_stop+0xc8>
            NRFX_ASSERT(0);
    5cbe:	4f19      	ldr	r7, [pc, #100]	; (5d24 <clock_stop+0x110>)
    5cc0:	f44f 734f 	mov.w	r3, #828	; 0x33c
    5cc4:	463a      	mov	r2, r7
    5cc6:	4915      	ldr	r1, [pc, #84]	; (5d1c <clock_stop+0x108>)
    5cc8:	4815      	ldr	r0, [pc, #84]	; (5d20 <clock_stop+0x10c>)
    5cca:	f004 fe2d 	bl	a928 <assert_print>
    5cce:	f44f 714f 	mov.w	r1, #828	; 0x33c
    5cd2:	4638      	mov	r0, r7
    5cd4:	f004 fe21 	bl	a91a <assert_post_action>
            return false;
    5cd8:	2300      	movs	r3, #0
    5cda:	e7e1      	b.n	5ca0 <clock_stop+0x8c>
            if (p_clk_src != NULL)
    5cdc:	b136      	cbz	r6, 5cec <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5cde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ce2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    5ce6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5cea:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5cf0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    5cf4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5cf8:	d103      	bne.n	5d02 <clock_stop+0xee>
    return false;
    5cfa:	2300      	movs	r3, #0
    5cfc:	e7d0      	b.n	5ca0 <clock_stop+0x8c>
                return true;
    5cfe:	2301      	movs	r3, #1
    5d00:	e7ce      	b.n	5ca0 <clock_stop+0x8c>
                return true;
    5d02:	2301      	movs	r3, #1
    5d04:	e7cc      	b.n	5ca0 <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5d06:	2d01      	cmp	r5, #1
    5d08:	d001      	beq.n	5d0e <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    5d0a:	b003      	add	sp, #12
    5d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    5d0e:	4b06      	ldr	r3, [pc, #24]	; (5d28 <clock_stop+0x114>)
    5d10:	2200      	movs	r2, #0
    5d12:	715a      	strb	r2, [r3, #5]
    5d14:	e7f9      	b.n	5d0a <clock_stop+0xf6>
    5d16:	bf00      	nop
    5d18:	0000d71c 	.word	0x0000d71c
    5d1c:	0000c954 	.word	0x0000c954
    5d20:	0000c294 	.word	0x0000c294
    5d24:	0000d75c 	.word	0x0000d75c
    5d28:	20004bec 	.word	0x20004bec

00005d2c <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    5d2c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    5d2e:	4604      	mov	r4, r0
    5d30:	b150      	cbz	r0, 5d48 <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5d32:	4b0d      	ldr	r3, [pc, #52]	; (5d68 <nrfx_clock_init+0x3c>)
    5d34:	791b      	ldrb	r3, [r3, #4]
    5d36:	b9ab      	cbnz	r3, 5d64 <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    5d38:	4b0b      	ldr	r3, [pc, #44]	; (5d68 <nrfx_clock_init+0x3c>)
    5d3a:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    5d3c:	2201      	movs	r2, #1
    5d3e:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    5d40:	2200      	movs	r2, #0
    5d42:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5d44:	4809      	ldr	r0, [pc, #36]	; (5d6c <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5d46:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    5d48:	4d09      	ldr	r5, [pc, #36]	; (5d70 <nrfx_clock_init+0x44>)
    5d4a:	f240 1315 	movw	r3, #277	; 0x115
    5d4e:	462a      	mov	r2, r5
    5d50:	4908      	ldr	r1, [pc, #32]	; (5d74 <nrfx_clock_init+0x48>)
    5d52:	4809      	ldr	r0, [pc, #36]	; (5d78 <nrfx_clock_init+0x4c>)
    5d54:	f004 fde8 	bl	a928 <assert_print>
    5d58:	f240 1115 	movw	r1, #277	; 0x115
    5d5c:	4628      	mov	r0, r5
    5d5e:	f004 fddc 	bl	a91a <assert_post_action>
    5d62:	e7e6      	b.n	5d32 <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5d64:	4805      	ldr	r0, [pc, #20]	; (5d7c <nrfx_clock_init+0x50>)
    return err_code;
    5d66:	e7ee      	b.n	5d46 <nrfx_clock_init+0x1a>
    5d68:	20004bec 	.word	0x20004bec
    5d6c:	0bad0000 	.word	0x0bad0000
    5d70:	0000d71c 	.word	0x0000d71c
    5d74:	0000d790 	.word	0x0000d790
    5d78:	0000c294 	.word	0x0000c294
    5d7c:	0bad000c 	.word	0x0bad000c

00005d80 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    5d80:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5d82:	4b0f      	ldr	r3, [pc, #60]	; (5dc0 <nrfx_clock_enable+0x40>)
    5d84:	791b      	ldrb	r3, [r3, #4]
    5d86:	b153      	cbz	r3, 5d9e <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5d88:	2000      	movs	r0, #0
    5d8a:	f7fd f819 	bl	2dc0 <arch_irq_is_enabled>
    5d8e:	b1a0      	cbz	r0, 5dba <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    5d90:	f005 feaa 	bl	bae8 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d98:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    5d9c:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5d9e:	4c09      	ldr	r4, [pc, #36]	; (5dc4 <nrfx_clock_enable+0x44>)
    5da0:	f44f 7397 	mov.w	r3, #302	; 0x12e
    5da4:	4622      	mov	r2, r4
    5da6:	4908      	ldr	r1, [pc, #32]	; (5dc8 <nrfx_clock_enable+0x48>)
    5da8:	4808      	ldr	r0, [pc, #32]	; (5dcc <nrfx_clock_enable+0x4c>)
    5daa:	f004 fdbd 	bl	a928 <assert_print>
    5dae:	f44f 7197 	mov.w	r1, #302	; 0x12e
    5db2:	4620      	mov	r0, r4
    5db4:	f004 fdb1 	bl	a91a <assert_post_action>
    5db8:	e7e6      	b.n	5d88 <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5dba:	f7fc fff3 	bl	2da4 <arch_irq_enable>
    5dbe:	e7e7      	b.n	5d90 <nrfx_clock_enable+0x10>
    5dc0:	20004bec 	.word	0x20004bec
    5dc4:	0000d71c 	.word	0x0000d71c
    5dc8:	0000d7a0 	.word	0x0000d7a0
    5dcc:	0000c294 	.word	0x0000c294

00005dd0 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    5dd0:	b530      	push	{r4, r5, lr}
    5dd2:	b083      	sub	sp, #12
    5dd4:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5dd6:	4b34      	ldr	r3, [pc, #208]	; (5ea8 <nrfx_clock_start+0xd8>)
    5dd8:	791b      	ldrb	r3, [r3, #4]
    5dda:	b183      	cbz	r3, 5dfe <nrfx_clock_start+0x2e>
    switch (domain)
    5ddc:	b1ec      	cbz	r4, 5e1a <nrfx_clock_start+0x4a>
    5dde:	2c01      	cmp	r4, #1
    5de0:	d055      	beq.n	5e8e <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5de2:	4c32      	ldr	r4, [pc, #200]	; (5eac <nrfx_clock_start+0xdc>)
    5de4:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    5de8:	4622      	mov	r2, r4
    5dea:	4931      	ldr	r1, [pc, #196]	; (5eb0 <nrfx_clock_start+0xe0>)
    5dec:	4831      	ldr	r0, [pc, #196]	; (5eb4 <nrfx_clock_start+0xe4>)
    5dee:	f004 fd9b 	bl	a928 <assert_print>
    5df2:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    5df6:	4620      	mov	r0, r4
    5df8:	f004 fd8f 	bl	a91a <assert_post_action>
            break;
    }
}
    5dfc:	e052      	b.n	5ea4 <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5dfe:	4d2b      	ldr	r5, [pc, #172]	; (5eac <nrfx_clock_start+0xdc>)
    5e00:	f44f 73b4 	mov.w	r3, #360	; 0x168
    5e04:	462a      	mov	r2, r5
    5e06:	492c      	ldr	r1, [pc, #176]	; (5eb8 <nrfx_clock_start+0xe8>)
    5e08:	482a      	ldr	r0, [pc, #168]	; (5eb4 <nrfx_clock_start+0xe4>)
    5e0a:	f004 fd8d 	bl	a928 <assert_print>
    5e0e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    5e12:	4628      	mov	r0, r5
    5e14:	f004 fd81 	bl	a91a <assert_post_action>
    5e18:	e7e0      	b.n	5ddc <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5e1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5e1e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5e22:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5e26:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5e28:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5e2c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5e30:	d117      	bne.n	5e62 <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    5e32:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    5e36:	f013 0f01 	tst.w	r3, #1
    5e3a:	d116      	bne.n	5e6a <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    5e3c:	f005 fe54 	bl	bae8 <clock_initial_lfclksrc_get>
    5e40:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    5e42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e46:	9a01      	ldr	r2, [sp, #4]
    5e48:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e4c:	2200      	movs	r2, #0
    5e4e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5e52:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    5e56:	2202      	movs	r2, #2
    5e58:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e5c:	2201      	movs	r2, #1
    5e5e:	609a      	str	r2, [r3, #8]
}
    5e60:	e020      	b.n	5ea4 <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    5e62:	a801      	add	r0, sp, #4
    5e64:	f005 fe42 	bl	baec <clock_lfclksrc_tweak>
    5e68:	e7eb      	b.n	5e42 <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5e6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e6e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5e72:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    5e76:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    5e78:	a801      	add	r0, sp, #4
    5e7a:	f005 fe37 	bl	baec <clock_lfclksrc_tweak>
    5e7e:	2800      	cmp	r0, #0
    5e80:	d0df      	beq.n	5e42 <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    5e82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e86:	2202      	movs	r2, #2
    5e88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    5e8c:	e00a      	b.n	5ea4 <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e92:	2200      	movs	r2, #0
    5e94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5e98:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    5e9c:	2201      	movs	r2, #1
    5e9e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ea2:	601a      	str	r2, [r3, #0]
}
    5ea4:	b003      	add	sp, #12
    5ea6:	bd30      	pop	{r4, r5, pc}
    5ea8:	20004bec 	.word	0x20004bec
    5eac:	0000d71c 	.word	0x0000d71c
    5eb0:	0000c954 	.word	0x0000c954
    5eb4:	0000c294 	.word	0x0000c294
    5eb8:	0000d7a0 	.word	0x0000d7a0

00005ebc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    5ebc:	b538      	push	{r3, r4, r5, lr}
    5ebe:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5ec0:	4b0a      	ldr	r3, [pc, #40]	; (5eec <nrfx_clock_stop+0x30>)
    5ec2:	791b      	ldrb	r3, [r3, #4]
    5ec4:	b11b      	cbz	r3, 5ece <nrfx_clock_stop+0x12>
    clock_stop(domain);
    5ec6:	4620      	mov	r0, r4
    5ec8:	f7ff fea4 	bl	5c14 <clock_stop>
}
    5ecc:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5ece:	4d08      	ldr	r5, [pc, #32]	; (5ef0 <nrfx_clock_stop+0x34>)
    5ed0:	f240 13ad 	movw	r3, #429	; 0x1ad
    5ed4:	462a      	mov	r2, r5
    5ed6:	4907      	ldr	r1, [pc, #28]	; (5ef4 <nrfx_clock_stop+0x38>)
    5ed8:	4807      	ldr	r0, [pc, #28]	; (5ef8 <nrfx_clock_stop+0x3c>)
    5eda:	f004 fd25 	bl	a928 <assert_print>
    5ede:	f240 11ad 	movw	r1, #429	; 0x1ad
    5ee2:	4628      	mov	r0, r5
    5ee4:	f004 fd19 	bl	a91a <assert_post_action>
    5ee8:	e7ed      	b.n	5ec6 <nrfx_clock_stop+0xa>
    5eea:	bf00      	nop
    5eec:	20004bec 	.word	0x20004bec
    5ef0:	0000d71c 	.word	0x0000d71c
    5ef4:	0000d7a0 	.word	0x0000d7a0
    5ef8:	0000c294 	.word	0x0000c294

00005efc <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5efc:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5efe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f02:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5f06:	b18b      	cbz	r3, 5f2c <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f0c:	2200      	movs	r2, #0
    5f0e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5f12:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    5f16:	2201      	movs	r2, #1
    5f18:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    5f1c:	4b15      	ldr	r3, [pc, #84]	; (5f74 <nrfx_power_clock_irq_handler+0x78>)
    5f1e:	795b      	ldrb	r3, [r3, #5]
    5f20:	b923      	cbnz	r3, 5f2c <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    5f22:	4b14      	ldr	r3, [pc, #80]	; (5f74 <nrfx_power_clock_irq_handler+0x78>)
    5f24:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5f26:	681b      	ldr	r3, [r3, #0]
    5f28:	2000      	movs	r0, #0
    5f2a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5f2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f30:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5f34:	b19b      	cbz	r3, 5f5e <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f3a:	2200      	movs	r2, #0
    5f3c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5f40:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5f44:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5f48:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    5f4c:	f012 0f03 	tst.w	r2, #3
    5f50:	d106      	bne.n	5f60 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5f52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f56:	2201      	movs	r2, #1
    5f58:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f5c:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5f5e:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    5f60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f64:	2202      	movs	r2, #2
    5f66:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5f6a:	4b02      	ldr	r3, [pc, #8]	; (5f74 <nrfx_power_clock_irq_handler+0x78>)
    5f6c:	681b      	ldr	r3, [r3, #0]
    5f6e:	2001      	movs	r0, #1
    5f70:	4798      	blx	r3
}
    5f72:	e7f4      	b.n	5f5e <nrfx_power_clock_irq_handler+0x62>
    5f74:	20004bec 	.word	0x20004bec

00005f78 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5f78:	3008      	adds	r0, #8
    5f7a:	4b03      	ldr	r3, [pc, #12]	; (5f88 <pin_in_use+0x10>)
    5f7c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5f80:	f000 0001 	and.w	r0, r0, #1
    5f84:	4770      	bx	lr
    5f86:	bf00      	nop
    5f88:	20004064 	.word	0x20004064

00005f8c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5f8c:	3008      	adds	r0, #8
    5f8e:	4b03      	ldr	r3, [pc, #12]	; (5f9c <pin_in_use_by_te+0x10>)
    5f90:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5f94:	f3c0 1040 	ubfx	r0, r0, #5, #1
    5f98:	4770      	bx	lr
    5f9a:	bf00      	nop
    5f9c:	20004064 	.word	0x20004064

00005fa0 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    5fa0:	3008      	adds	r0, #8
    5fa2:	4b04      	ldr	r3, [pc, #16]	; (5fb4 <pin_has_trigger+0x14>)
    5fa4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5fa8:	f010 001c 	ands.w	r0, r0, #28
    5fac:	bf18      	it	ne
    5fae:	2001      	movne	r0, #1
    5fb0:	4770      	bx	lr
    5fb2:	bf00      	nop
    5fb4:	20004064 	.word	0x20004064

00005fb8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5fb8:	3008      	adds	r0, #8
    5fba:	4b03      	ldr	r3, [pc, #12]	; (5fc8 <pin_is_output+0x10>)
    5fbc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5fc0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    5fc4:	4770      	bx	lr
    5fc6:	bf00      	nop
    5fc8:	20004064 	.word	0x20004064

00005fcc <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5fcc:	3008      	adds	r0, #8
    5fce:	4b02      	ldr	r3, [pc, #8]	; (5fd8 <pin_te_get+0xc>)
    5fd0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5fd4:	0b40      	lsrs	r0, r0, #13
    5fd6:	4770      	bx	lr
    5fd8:	20004064 	.word	0x20004064

00005fdc <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5fdc:	2200      	movs	r2, #0
    5fde:	e004      	b.n	5fea <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5fe4:	4283      	cmp	r3, r0
    5fe6:	d00f      	beq.n	6008 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5fe8:	3201      	adds	r2, #1
    5fea:	2a2f      	cmp	r2, #47	; 0x2f
    5fec:	d80a      	bhi.n	6004 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5fee:	f102 0308 	add.w	r3, r2, #8
    5ff2:	4906      	ldr	r1, [pc, #24]	; (600c <handler_in_use+0x30>)
    5ff4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    5ff8:	f413 7f80 	tst.w	r3, #256	; 0x100
    5ffc:	d0f0      	beq.n	5fe0 <handler_in_use+0x4>
    5ffe:	f3c3 2343 	ubfx	r3, r3, #9, #4
    6002:	e7ef      	b.n	5fe4 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    6004:	2000      	movs	r0, #0
    6006:	4770      	bx	lr
            return true;
    6008:	2001      	movs	r0, #1
}
    600a:	4770      	bx	lr
    600c:	20004064 	.word	0x20004064

00006010 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    6010:	2300      	movs	r3, #0
    6012:	b113      	cbz	r3, 601a <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    6014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    6018:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    601a:	4a07      	ldr	r2, [pc, #28]	; (6038 <find_handler+0x28>)
    601c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    6020:	4282      	cmp	r2, r0
    6022:	d001      	beq.n	6028 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    6024:	3301      	adds	r3, #1
    6026:	e7f4      	b.n	6012 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6028:	4a03      	ldr	r2, [pc, #12]	; (6038 <find_handler+0x28>)
    602a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    602e:	6852      	ldr	r2, [r2, #4]
    6030:	428a      	cmp	r2, r1
    6032:	d1f7      	bne.n	6024 <find_handler+0x14>
            return i;
    6034:	4618      	mov	r0, r3
    6036:	4770      	bx	lr
    6038:	20004064 	.word	0x20004064

0000603c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    603c:	3008      	adds	r0, #8
    603e:	4b06      	ldr	r3, [pc, #24]	; (6058 <channel_handler_get+0x1c>)
    6040:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    6044:	f410 7f80 	tst.w	r0, #256	; 0x100
    6048:	d004      	beq.n	6054 <channel_handler_get+0x18>
    604a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    604e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6052:	4770      	bx	lr
        return NULL;
    6054:	2000      	movs	r0, #0
}
    6056:	4770      	bx	lr
    6058:	20004064 	.word	0x20004064

0000605c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    605c:	b570      	push	{r4, r5, r6, lr}
    605e:	4604      	mov	r4, r0
    6060:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    6062:	f7ff ffeb 	bl	603c <channel_handler_get>

    if (handler)
    6066:	b120      	cbz	r0, 6072 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    6068:	6806      	ldr	r6, [r0, #0]
    606a:	6842      	ldr	r2, [r0, #4]
    606c:	4629      	mov	r1, r5
    606e:	4620      	mov	r0, r4
    6070:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    6072:	4b04      	ldr	r3, [pc, #16]	; (6084 <call_handler+0x28>)
    6074:	689b      	ldr	r3, [r3, #8]
    6076:	b123      	cbz	r3, 6082 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6078:	4a02      	ldr	r2, [pc, #8]	; (6084 <call_handler+0x28>)
    607a:	68d2      	ldr	r2, [r2, #12]
    607c:	4629      	mov	r1, r5
    607e:	4620      	mov	r0, r4
    6080:	4798      	blx	r3
    }
}
    6082:	bd70      	pop	{r4, r5, r6, pc}
    6084:	20004064 	.word	0x20004064

00006088 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6088:	f100 0208 	add.w	r2, r0, #8
    608c:	4b16      	ldr	r3, [pc, #88]	; (60e8 <release_handler+0x60>)
    608e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6092:	f413 7f80 	tst.w	r3, #256	; 0x100
    6096:	d026      	beq.n	60e6 <release_handler+0x5e>
{
    6098:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    609a:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    609e:	4610      	mov	r0, r2
    60a0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    60a4:	4a10      	ldr	r2, [pc, #64]	; (60e8 <release_handler+0x60>)
    60a6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    60aa:	4620      	mov	r0, r4
    60ac:	f7ff ff96 	bl	5fdc <handler_in_use>
    60b0:	b100      	cbz	r0, 60b4 <release_handler+0x2c>
}
    60b2:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    60b4:	480c      	ldr	r0, [pc, #48]	; (60e8 <release_handler+0x60>)
    60b6:	2300      	movs	r3, #0
    60b8:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    60bc:	4621      	mov	r1, r4
    60be:	3074      	adds	r0, #116	; 0x74
    60c0:	f7ff fd86 	bl	5bd0 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    60c4:	4b09      	ldr	r3, [pc, #36]	; (60ec <release_handler+0x64>)
    60c6:	4298      	cmp	r0, r3
    60c8:	d0f3      	beq.n	60b2 <release_handler+0x2a>
    60ca:	4c09      	ldr	r4, [pc, #36]	; (60f0 <release_handler+0x68>)
    60cc:	f44f 7399 	mov.w	r3, #306	; 0x132
    60d0:	4622      	mov	r2, r4
    60d2:	4908      	ldr	r1, [pc, #32]	; (60f4 <release_handler+0x6c>)
    60d4:	4808      	ldr	r0, [pc, #32]	; (60f8 <release_handler+0x70>)
    60d6:	f004 fc27 	bl	a928 <assert_print>
    60da:	f44f 7199 	mov.w	r1, #306	; 0x132
    60de:	4620      	mov	r0, r4
    60e0:	f004 fc1b 	bl	a91a <assert_post_action>
    60e4:	e7e5      	b.n	60b2 <release_handler+0x2a>
    60e6:	4770      	bx	lr
    60e8:	20004064 	.word	0x20004064
    60ec:	0bad0000 	.word	0x0bad0000
    60f0:	0000d7c0 	.word	0x0000d7c0
    60f4:	0000d800 	.word	0x0000d800
    60f8:	0000c294 	.word	0x0000c294

000060fc <pin_handler_trigger_uninit>:
{
    60fc:	b510      	push	{r4, lr}
    60fe:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    6100:	f7ff ff44 	bl	5f8c <pin_in_use_by_te>
    6104:	b140      	cbz	r0, 6118 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    6106:	4620      	mov	r0, r4
    6108:	f7ff ff60 	bl	5fcc <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    610c:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    6110:	4b06      	ldr	r3, [pc, #24]	; (612c <pin_handler_trigger_uninit+0x30>)
    6112:	2200      	movs	r2, #0
    6114:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    6118:	4620      	mov	r0, r4
    611a:	f7ff ffb5 	bl	6088 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    611e:	3408      	adds	r4, #8
    6120:	4b03      	ldr	r3, [pc, #12]	; (6130 <pin_handler_trigger_uninit+0x34>)
    6122:	2200      	movs	r2, #0
    6124:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    6128:	bd10      	pop	{r4, pc}
    612a:	bf00      	nop
    612c:	40006000 	.word	0x40006000
    6130:	20004064 	.word	0x20004064

00006134 <pin_handler_set>:
{
    6134:	b570      	push	{r4, r5, r6, lr}
    6136:	b082      	sub	sp, #8
    6138:	4606      	mov	r6, r0
    613a:	460c      	mov	r4, r1
    613c:	4615      	mov	r5, r2
    release_handler(pin);
    613e:	f7ff ffa3 	bl	6088 <release_handler>
    if (!handler)
    6142:	b324      	cbz	r4, 618e <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    6144:	4629      	mov	r1, r5
    6146:	4620      	mov	r0, r4
    6148:	f7ff ff62 	bl	6010 <find_handler>
    if (handler_id < 0)
    614c:	1e03      	subs	r3, r0, #0
    614e:	db13      	blt.n	6178 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    6150:	4a10      	ldr	r2, [pc, #64]	; (6194 <pin_handler_set+0x60>)
    6152:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    6156:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    615a:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    615c:	025b      	lsls	r3, r3, #9
    615e:	b29b      	uxth	r3, r3
    6160:	f106 0008 	add.w	r0, r6, #8
    6164:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    6168:	430b      	orrs	r3, r1
    616a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    616e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    6172:	4809      	ldr	r0, [pc, #36]	; (6198 <pin_handler_set+0x64>)
}
    6174:	b002      	add	sp, #8
    6176:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    6178:	f10d 0107 	add.w	r1, sp, #7
    617c:	4807      	ldr	r0, [pc, #28]	; (619c <pin_handler_set+0x68>)
    617e:	f7ff fcff 	bl	5b80 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    6182:	4b05      	ldr	r3, [pc, #20]	; (6198 <pin_handler_set+0x64>)
    6184:	4298      	cmp	r0, r3
    6186:	d1f5      	bne.n	6174 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    6188:	f89d 3007 	ldrb.w	r3, [sp, #7]
    618c:	e7e0      	b.n	6150 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    618e:	4802      	ldr	r0, [pc, #8]	; (6198 <pin_handler_set+0x64>)
    6190:	e7f0      	b.n	6174 <pin_handler_set+0x40>
    6192:	bf00      	nop
    6194:	20004064 	.word	0x20004064
    6198:	0bad0000 	.word	0x0bad0000
    619c:	200040d8 	.word	0x200040d8

000061a0 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    61a0:	b538      	push	{r3, r4, r5, lr}
    61a2:	4604      	mov	r4, r0
    while (mask)
    61a4:	e018      	b.n	61d8 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    61a6:	fa94 f3a4 	rbit	r3, r4
    61aa:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    61ae:	2201      	movs	r2, #1
    61b0:	409a      	lsls	r2, r3
    61b2:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    61b6:	4a0a      	ldr	r2, [pc, #40]	; (61e0 <gpiote_evt_handle+0x40>)
    61b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    61bc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    61c0:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    61c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    61c8:	f3c0 4001 	ubfx	r0, r0, #16, #2
    61cc:	f005 fcba 	bl	bb44 <gpiote_polarity_to_trigger>
    61d0:	4601      	mov	r1, r0
    61d2:	4628      	mov	r0, r5
    61d4:	f7ff ff42 	bl	605c <call_handler>
    while (mask)
    61d8:	2c00      	cmp	r4, #0
    61da:	d1e4      	bne.n	61a6 <gpiote_evt_handle+0x6>
    }
}
    61dc:	bd38      	pop	{r3, r4, r5, pc}
    61de:	bf00      	nop
    61e0:	40006000 	.word	0x40006000

000061e4 <latch_pending_read_and_check>:
{
    61e4:	b082      	sub	sp, #8
    61e6:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    61e8:	4b11      	ldr	r3, [pc, #68]	; (6230 <latch_pending_read_and_check+0x4c>)
    61ea:	e893 0003 	ldmia.w	r3, {r0, r1}
    61ee:	ab02      	add	r3, sp, #8
    61f0:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    61f4:	4660      	mov	r0, ip
    61f6:	2300      	movs	r3, #0
    61f8:	e00b      	b.n	6212 <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    61fa:	aa02      	add	r2, sp, #8
    61fc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    6200:	f852 2c08 	ldr.w	r2, [r2, #-8]
    6204:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    6208:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    620c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    6210:	3301      	adds	r3, #1
    6212:	2b01      	cmp	r3, #1
    6214:	d9f1      	bls.n	61fa <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    6216:	2300      	movs	r3, #0
    6218:	2b01      	cmp	r3, #1
    621a:	d804      	bhi.n	6226 <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    621c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    6220:	b922      	cbnz	r2, 622c <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    6222:	3301      	adds	r3, #1
    6224:	e7f8      	b.n	6218 <latch_pending_read_and_check+0x34>
    return false;
    6226:	2000      	movs	r0, #0
}
    6228:	b002      	add	sp, #8
    622a:	4770      	bx	lr
            return true;
    622c:	2001      	movs	r0, #1
    622e:	e7fb      	b.n	6228 <latch_pending_read_and_check+0x44>
    6230:	0000c150 	.word	0x0000c150

00006234 <next_sense_cond_call_handler>:
{
    6234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6238:	4604      	mov	r4, r0
    623a:	460d      	mov	r5, r1
    623c:	4616      	mov	r6, r2
    if (is_level(trigger))
    623e:	4608      	mov	r0, r1
    6240:	f005 fc82 	bl	bb48 <is_level>
    6244:	bb60      	cbnz	r0, 62a0 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6246:	2e02      	cmp	r6, #2
    6248:	f000 80f5 	beq.w	6436 <next_sense_cond_call_handler+0x202>
    624c:	f04f 0802 	mov.w	r8, #2
    switch (port)
    6250:	0963      	lsrs	r3, r4, #5
    6252:	f000 80f3 	beq.w	643c <next_sense_cond_call_handler+0x208>
    6256:	2b01      	cmp	r3, #1
    6258:	f040 80f3 	bne.w	6442 <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    625c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6260:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6264:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6266:	f013 0f01 	tst.w	r3, #1
    626a:	f000 80ec 	beq.w	6446 <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    626e:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6272:	0963      	lsrs	r3, r4, #5
    6274:	f000 80f5 	beq.w	6462 <next_sense_cond_call_handler+0x22e>
    6278:	2b01      	cmp	r3, #1
    627a:	f000 80f5 	beq.w	6468 <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    627e:	f8df 9224 	ldr.w	r9, [pc, #548]	; 64a4 <next_sense_cond_call_handler+0x270>
    6282:	f240 232e 	movw	r3, #558	; 0x22e
    6286:	464a      	mov	r2, r9
    6288:	4987      	ldr	r1, [pc, #540]	; (64a8 <next_sense_cond_call_handler+0x274>)
    628a:	4888      	ldr	r0, [pc, #544]	; (64ac <next_sense_cond_call_handler+0x278>)
    628c:	f004 fb4c 	bl	a928 <assert_print>
    6290:	f240 212e 	movw	r1, #558	; 0x22e
    6294:	4648      	mov	r0, r9
    6296:	f004 fb40 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    629a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    629e:	e0e4      	b.n	646a <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    62a0:	4629      	mov	r1, r5
    62a2:	4620      	mov	r0, r4
    62a4:	f7ff feda 	bl	605c <call_handler>
    switch (port)
    62a8:	0963      	lsrs	r3, r4, #5
    62aa:	d01f      	beq.n	62ec <next_sense_cond_call_handler+0xb8>
    62ac:	2b01      	cmp	r3, #1
    62ae:	d120      	bne.n	62f2 <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    62b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    62b4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    62b8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    62ba:	f013 0f01 	tst.w	r3, #1
    62be:	d01a      	beq.n	62f6 <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    62c0:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    62c4:	0963      	lsrs	r3, r4, #5
    62c6:	d024      	beq.n	6312 <next_sense_cond_call_handler+0xde>
    62c8:	2b01      	cmp	r3, #1
    62ca:	d025      	beq.n	6318 <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    62cc:	4f75      	ldr	r7, [pc, #468]	; (64a4 <next_sense_cond_call_handler+0x270>)
    62ce:	f240 232e 	movw	r3, #558	; 0x22e
    62d2:	463a      	mov	r2, r7
    62d4:	4974      	ldr	r1, [pc, #464]	; (64a8 <next_sense_cond_call_handler+0x274>)
    62d6:	4875      	ldr	r0, [pc, #468]	; (64ac <next_sense_cond_call_handler+0x278>)
    62d8:	f004 fb26 	bl	a928 <assert_print>
    62dc:	f240 212e 	movw	r1, #558	; 0x22e
    62e0:	4638      	mov	r0, r7
    62e2:	f004 fb1a 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    62e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    62ea:	e016      	b.n	631a <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    62ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    62f0:	e7e0      	b.n	62b4 <next_sense_cond_call_handler+0x80>
    switch (port)
    62f2:	2300      	movs	r3, #0
    62f4:	e7de      	b.n	62b4 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    62f6:	4d6b      	ldr	r5, [pc, #428]	; (64a4 <next_sense_cond_call_handler+0x270>)
    62f8:	f240 2329 	movw	r3, #553	; 0x229
    62fc:	462a      	mov	r2, r5
    62fe:	496c      	ldr	r1, [pc, #432]	; (64b0 <next_sense_cond_call_handler+0x27c>)
    6300:	486a      	ldr	r0, [pc, #424]	; (64ac <next_sense_cond_call_handler+0x278>)
    6302:	f004 fb11 	bl	a928 <assert_print>
    6306:	f240 2129 	movw	r1, #553	; 0x229
    630a:	4628      	mov	r0, r5
    630c:	f004 fb05 	bl	a91a <assert_post_action>
    6310:	e7d6      	b.n	62c0 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    6312:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6316:	e000      	b.n	631a <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6318:	4b66      	ldr	r3, [pc, #408]	; (64b4 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    631a:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    631e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    6322:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    6326:	429e      	cmp	r6, r3
    6328:	f040 80af 	bne.w	648a <next_sense_cond_call_handler+0x256>
    switch (port)
    632c:	0963      	lsrs	r3, r4, #5
    632e:	d01f      	beq.n	6370 <next_sense_cond_call_handler+0x13c>
    6330:	2b01      	cmp	r3, #1
    6332:	d120      	bne.n	6376 <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    6334:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6338:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    633c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    633e:	f013 0f01 	tst.w	r3, #1
    6342:	d01a      	beq.n	637a <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    6344:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6348:	0963      	lsrs	r3, r4, #5
    634a:	d024      	beq.n	6396 <next_sense_cond_call_handler+0x162>
    634c:	2b01      	cmp	r3, #1
    634e:	d025      	beq.n	639c <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    6350:	4f54      	ldr	r7, [pc, #336]	; (64a4 <next_sense_cond_call_handler+0x270>)
    6352:	f240 232e 	movw	r3, #558	; 0x22e
    6356:	463a      	mov	r2, r7
    6358:	4953      	ldr	r1, [pc, #332]	; (64a8 <next_sense_cond_call_handler+0x274>)
    635a:	4854      	ldr	r0, [pc, #336]	; (64ac <next_sense_cond_call_handler+0x278>)
    635c:	f004 fae4 	bl	a928 <assert_print>
    6360:	f240 212e 	movw	r1, #558	; 0x22e
    6364:	4638      	mov	r0, r7
    6366:	f004 fad8 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    636a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    636e:	e016      	b.n	639e <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    6370:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6374:	e7e0      	b.n	6338 <next_sense_cond_call_handler+0x104>
    switch (port)
    6376:	2300      	movs	r3, #0
    6378:	e7de      	b.n	6338 <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    637a:	4d4a      	ldr	r5, [pc, #296]	; (64a4 <next_sense_cond_call_handler+0x270>)
    637c:	f240 2329 	movw	r3, #553	; 0x229
    6380:	462a      	mov	r2, r5
    6382:	494b      	ldr	r1, [pc, #300]	; (64b0 <next_sense_cond_call_handler+0x27c>)
    6384:	4849      	ldr	r0, [pc, #292]	; (64ac <next_sense_cond_call_handler+0x278>)
    6386:	f004 facf 	bl	a928 <assert_print>
    638a:	f240 2129 	movw	r1, #553	; 0x229
    638e:	4628      	mov	r0, r5
    6390:	f004 fac3 	bl	a91a <assert_post_action>
    6394:	e7d6      	b.n	6344 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    6396:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    639a:	e000      	b.n	639e <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    639c:	4945      	ldr	r1, [pc, #276]	; (64b4 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    639e:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    63a2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    63a6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    63aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    63ae:	0963      	lsrs	r3, r4, #5
    63b0:	d01f      	beq.n	63f2 <next_sense_cond_call_handler+0x1be>
    63b2:	2b01      	cmp	r3, #1
    63b4:	d120      	bne.n	63f8 <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    63b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    63ba:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    63be:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    63c0:	f013 0f01 	tst.w	r3, #1
    63c4:	d01a      	beq.n	63fc <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    63c6:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    63ca:	0964      	lsrs	r4, r4, #5
    63cc:	d024      	beq.n	6418 <next_sense_cond_call_handler+0x1e4>
    63ce:	2c01      	cmp	r4, #1
    63d0:	d025      	beq.n	641e <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    63d2:	4c34      	ldr	r4, [pc, #208]	; (64a4 <next_sense_cond_call_handler+0x270>)
    63d4:	f240 232e 	movw	r3, #558	; 0x22e
    63d8:	4622      	mov	r2, r4
    63da:	4933      	ldr	r1, [pc, #204]	; (64a8 <next_sense_cond_call_handler+0x274>)
    63dc:	4833      	ldr	r0, [pc, #204]	; (64ac <next_sense_cond_call_handler+0x278>)
    63de:	f004 faa3 	bl	a928 <assert_print>
    63e2:	f240 212e 	movw	r1, #558	; 0x22e
    63e6:	4620      	mov	r0, r4
    63e8:	f004 fa97 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    63ec:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    63f0:	e016      	b.n	6420 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    63f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    63f6:	e7e0      	b.n	63ba <next_sense_cond_call_handler+0x186>
    switch (port)
    63f8:	2300      	movs	r3, #0
    63fa:	e7de      	b.n	63ba <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    63fc:	4d29      	ldr	r5, [pc, #164]	; (64a4 <next_sense_cond_call_handler+0x270>)
    63fe:	f240 2329 	movw	r3, #553	; 0x229
    6402:	462a      	mov	r2, r5
    6404:	492a      	ldr	r1, [pc, #168]	; (64b0 <next_sense_cond_call_handler+0x27c>)
    6406:	4829      	ldr	r0, [pc, #164]	; (64ac <next_sense_cond_call_handler+0x278>)
    6408:	f004 fa8e 	bl	a928 <assert_print>
    640c:	f240 2129 	movw	r1, #553	; 0x229
    6410:	4628      	mov	r0, r5
    6412:	f004 fa82 	bl	a91a <assert_post_action>
    6416:	e7d6      	b.n	63c6 <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    6418:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    641c:	e000      	b.n	6420 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    641e:	4925      	ldr	r1, [pc, #148]	; (64b4 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6420:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    6424:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    6428:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    642c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    6430:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    6434:	e029      	b.n	648a <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6436:	f04f 0803 	mov.w	r8, #3
    643a:	e709      	b.n	6250 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    643c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6440:	e70e      	b.n	6260 <next_sense_cond_call_handler+0x2c>
    switch (port)
    6442:	2300      	movs	r3, #0
    6444:	e70c      	b.n	6260 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6446:	4f17      	ldr	r7, [pc, #92]	; (64a4 <next_sense_cond_call_handler+0x270>)
    6448:	f240 2329 	movw	r3, #553	; 0x229
    644c:	463a      	mov	r2, r7
    644e:	4918      	ldr	r1, [pc, #96]	; (64b0 <next_sense_cond_call_handler+0x27c>)
    6450:	4816      	ldr	r0, [pc, #88]	; (64ac <next_sense_cond_call_handler+0x278>)
    6452:	f004 fa69 	bl	a928 <assert_print>
    6456:	f240 2129 	movw	r1, #553	; 0x229
    645a:	4638      	mov	r0, r7
    645c:	f004 fa5d 	bl	a91a <assert_post_action>
    6460:	e705      	b.n	626e <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    6462:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6466:	e000      	b.n	646a <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6468:	4912      	ldr	r1, [pc, #72]	; (64b4 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    646a:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    646e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    6472:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6476:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    647a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    647e:	2d03      	cmp	r5, #3
    6480:	d007      	beq.n	6492 <next_sense_cond_call_handler+0x25e>
    6482:	2e02      	cmp	r6, #2
    6484:	d003      	beq.n	648e <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6486:	2e03      	cmp	r6, #3
    6488:	d008      	beq.n	649c <next_sense_cond_call_handler+0x268>
}
    648a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    648e:	2d01      	cmp	r5, #1
    6490:	d1f9      	bne.n	6486 <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    6492:	4629      	mov	r1, r5
    6494:	4620      	mov	r0, r4
    6496:	f7ff fde1 	bl	605c <call_handler>
}
    649a:	e7f6      	b.n	648a <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    649c:	2d02      	cmp	r5, #2
    649e:	d1f4      	bne.n	648a <next_sense_cond_call_handler+0x256>
    64a0:	e7f7      	b.n	6492 <next_sense_cond_call_handler+0x25e>
    64a2:	bf00      	nop
    64a4:	0000d524 	.word	0x0000d524
    64a8:	0000c954 	.word	0x0000c954
    64ac:	0000c294 	.word	0x0000c294
    64b0:	0000d558 	.word	0x0000d558
    64b4:	50000300 	.word	0x50000300

000064b8 <port_event_handle>:
{
    64b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64bc:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    64be:	4a65      	ldr	r2, [pc, #404]	; (6654 <port_event_handle+0x19c>)
    64c0:	466b      	mov	r3, sp
    64c2:	e892 0003 	ldmia.w	r2, {r0, r1}
    64c6:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    64ca:	2300      	movs	r3, #0
    64cc:	a802      	add	r0, sp, #8
    64ce:	e00b      	b.n	64e8 <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    64d0:	aa04      	add	r2, sp, #16
    64d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    64d6:	f852 2c10 	ldr.w	r2, [r2, #-16]
    64da:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    64de:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    64e2:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    64e6:	3301      	adds	r3, #1
    64e8:	2b01      	cmp	r3, #1
    64ea:	d9f1      	bls.n	64d0 <port_event_handle+0x18>
    64ec:	e0ad      	b.n	664a <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    64ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    64f2:	e07f      	b.n	65f4 <port_event_handle+0x13c>
    switch (port)
    64f4:	2300      	movs	r3, #0
    64f6:	e07d      	b.n	65f4 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    64f8:	4f57      	ldr	r7, [pc, #348]	; (6658 <port_event_handle+0x1a0>)
    64fa:	f240 2329 	movw	r3, #553	; 0x229
    64fe:	463a      	mov	r2, r7
    6500:	4956      	ldr	r1, [pc, #344]	; (665c <port_event_handle+0x1a4>)
    6502:	4857      	ldr	r0, [pc, #348]	; (6660 <port_event_handle+0x1a8>)
    6504:	f004 fa10 	bl	a928 <assert_print>
    6508:	f240 2129 	movw	r1, #553	; 0x229
    650c:	4638      	mov	r0, r7
    650e:	f004 fa04 	bl	a91a <assert_post_action>
    6512:	e076      	b.n	6602 <port_event_handle+0x14a>
        case 0: return NRF_P0;
    6514:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6518:	e000      	b.n	651c <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    651a:	4b52      	ldr	r3, [pc, #328]	; (6664 <port_event_handle+0x1ac>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    651c:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    6520:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    6524:	f3c2 4201 	ubfx	r2, r2, #16, #2
    6528:	4631      	mov	r1, r6
    652a:	4620      	mov	r0, r4
    652c:	f7ff fe82 	bl	6234 <next_sense_cond_call_handler>
    switch (port)
    6530:	0963      	lsrs	r3, r4, #5
    6532:	d01f      	beq.n	6574 <port_event_handle+0xbc>
    6534:	2b01      	cmp	r3, #1
    6536:	d120      	bne.n	657a <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    6538:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    653c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6540:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6542:	f013 0f01 	tst.w	r3, #1
    6546:	d01a      	beq.n	657e <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    6548:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    654c:	0964      	lsrs	r4, r4, #5
    654e:	d024      	beq.n	659a <port_event_handle+0xe2>
    6550:	2c01      	cmp	r4, #1
    6552:	d025      	beq.n	65a0 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    6554:	4c40      	ldr	r4, [pc, #256]	; (6658 <port_event_handle+0x1a0>)
    6556:	f240 232e 	movw	r3, #558	; 0x22e
    655a:	4622      	mov	r2, r4
    655c:	4942      	ldr	r1, [pc, #264]	; (6668 <port_event_handle+0x1b0>)
    655e:	4840      	ldr	r0, [pc, #256]	; (6660 <port_event_handle+0x1a8>)
    6560:	f004 f9e2 	bl	a928 <assert_print>
    6564:	f240 212e 	movw	r1, #558	; 0x22e
    6568:	4620      	mov	r0, r4
    656a:	f004 f9d6 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    656e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6572:	e016      	b.n	65a2 <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    6574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6578:	e7e0      	b.n	653c <port_event_handle+0x84>
    switch (port)
    657a:	2300      	movs	r3, #0
    657c:	e7de      	b.n	653c <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    657e:	4e36      	ldr	r6, [pc, #216]	; (6658 <port_event_handle+0x1a0>)
    6580:	f240 2329 	movw	r3, #553	; 0x229
    6584:	4632      	mov	r2, r6
    6586:	4935      	ldr	r1, [pc, #212]	; (665c <port_event_handle+0x1a4>)
    6588:	4835      	ldr	r0, [pc, #212]	; (6660 <port_event_handle+0x1a8>)
    658a:	f004 f9cd 	bl	a928 <assert_print>
    658e:	f240 2129 	movw	r1, #553	; 0x229
    6592:	4630      	mov	r0, r6
    6594:	f004 f9c1 	bl	a91a <assert_post_action>
    6598:	e7d6      	b.n	6548 <port_event_handle+0x90>
        case 0: return NRF_P0;
    659a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    659e:	e000      	b.n	65a2 <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    65a0:	4a30      	ldr	r2, [pc, #192]	; (6664 <port_event_handle+0x1ac>)
    reg->LATCH = (1 << pin_number);
    65a2:	2301      	movs	r3, #1
    65a4:	40b3      	lsls	r3, r6
    65a6:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    65aa:	ab04      	add	r3, sp, #16
    65ac:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    65b0:	f853 4c08 	ldr.w	r4, [r3, #-8]
    65b4:	2c00      	cmp	r4, #0
    65b6:	d03b      	beq.n	6630 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    65b8:	fa94 f4a4 	rbit	r4, r4
    65bc:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    65c0:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    65c4:	f104 0208 	add.w	r2, r4, #8
    65c8:	4b28      	ldr	r3, [pc, #160]	; (666c <port_event_handle+0x1b4>)
    65ca:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    65ce:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    65d2:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    65d4:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    65d8:	a802      	add	r0, sp, #8
    65da:	2301      	movs	r3, #1
    65dc:	fa03 f202 	lsl.w	r2, r3, r2
    65e0:	5c43      	ldrb	r3, [r0, r1]
    65e2:	ea23 0302 	bic.w	r3, r3, r2
    65e6:	5443      	strb	r3, [r0, r1]
    switch (port)
    65e8:	0963      	lsrs	r3, r4, #5
    65ea:	d080      	beq.n	64ee <port_event_handle+0x36>
    65ec:	2b01      	cmp	r3, #1
    65ee:	d181      	bne.n	64f4 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    65f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    65f4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    65f8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    65fa:	f013 0f01 	tst.w	r3, #1
    65fe:	f43f af7b 	beq.w	64f8 <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    6602:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6606:	0963      	lsrs	r3, r4, #5
    6608:	d084      	beq.n	6514 <port_event_handle+0x5c>
    660a:	2b01      	cmp	r3, #1
    660c:	d085      	beq.n	651a <port_event_handle+0x62>
            NRFX_ASSERT(0);
    660e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 6658 <port_event_handle+0x1a0>
    6612:	f240 232e 	movw	r3, #558	; 0x22e
    6616:	4642      	mov	r2, r8
    6618:	4913      	ldr	r1, [pc, #76]	; (6668 <port_event_handle+0x1b0>)
    661a:	4811      	ldr	r0, [pc, #68]	; (6660 <port_event_handle+0x1a8>)
    661c:	f004 f984 	bl	a928 <assert_print>
    6620:	f240 212e 	movw	r1, #558	; 0x22e
    6624:	4640      	mov	r0, r8
    6626:	f004 f978 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    662a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    662e:	e775      	b.n	651c <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6630:	3501      	adds	r5, #1
    6632:	2d01      	cmp	r5, #1
    6634:	d9b9      	bls.n	65aa <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6636:	4b0e      	ldr	r3, [pc, #56]	; (6670 <port_event_handle+0x1b8>)
    6638:	2200      	movs	r2, #0
    663a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    663e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    6642:	a802      	add	r0, sp, #8
    6644:	f7ff fdce 	bl	61e4 <latch_pending_read_and_check>
    6648:	b108      	cbz	r0, 664e <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    664a:	2500      	movs	r5, #0
    664c:	e7f1      	b.n	6632 <port_event_handle+0x17a>
}
    664e:	b004      	add	sp, #16
    6650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6654:	0000c150 	.word	0x0000c150
    6658:	0000d524 	.word	0x0000d524
    665c:	0000d558 	.word	0x0000d558
    6660:	0000c294 	.word	0x0000c294
    6664:	50000300 	.word	0x50000300
    6668:	0000c954 	.word	0x0000c954
    666c:	20004064 	.word	0x20004064
    6670:	40006000 	.word	0x40006000

00006674 <nrfx_gpiote_input_configure>:
{
    6674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6678:	4604      	mov	r4, r0
    667a:	4615      	mov	r5, r2
    667c:	461e      	mov	r6, r3
    if (p_input_config)
    667e:	2900      	cmp	r1, #0
    6680:	d064      	beq.n	674c <nrfx_gpiote_input_configure+0xd8>
    6682:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    6684:	f005 fa48 	bl	bb18 <pin_is_task_output>
    6688:	2800      	cmp	r0, #0
    668a:	f040 80cd 	bne.w	6828 <nrfx_gpiote_input_configure+0x1b4>
    switch (port)
    668e:	0963      	lsrs	r3, r4, #5
    6690:	d020      	beq.n	66d4 <nrfx_gpiote_input_configure+0x60>
    6692:	2b01      	cmp	r3, #1
    6694:	d121      	bne.n	66da <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    6696:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    669a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    669e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    66a0:	f013 0f01 	tst.w	r3, #1
    66a4:	d01b      	beq.n	66de <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    66a6:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    66aa:	0963      	lsrs	r3, r4, #5
    66ac:	d025      	beq.n	66fa <nrfx_gpiote_input_configure+0x86>
    66ae:	2b01      	cmp	r3, #1
    66b0:	d026      	beq.n	6700 <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    66b2:	f8df 9184 	ldr.w	r9, [pc, #388]	; 6838 <nrfx_gpiote_input_configure+0x1c4>
    66b6:	f240 232e 	movw	r3, #558	; 0x22e
    66ba:	464a      	mov	r2, r9
    66bc:	495f      	ldr	r1, [pc, #380]	; (683c <nrfx_gpiote_input_configure+0x1c8>)
    66be:	4860      	ldr	r0, [pc, #384]	; (6840 <nrfx_gpiote_input_configure+0x1cc>)
    66c0:	f004 f932 	bl	a928 <assert_print>
    66c4:	f240 212e 	movw	r1, #558	; 0x22e
    66c8:	4648      	mov	r0, r9
    66ca:	f004 f926 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    66ce:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    66d2:	e016      	b.n	6702 <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    66d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    66d8:	e7df      	b.n	669a <nrfx_gpiote_input_configure+0x26>
    switch (port)
    66da:	2300      	movs	r3, #0
    66dc:	e7dd      	b.n	669a <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    66de:	4f56      	ldr	r7, [pc, #344]	; (6838 <nrfx_gpiote_input_configure+0x1c4>)
    66e0:	f240 2329 	movw	r3, #553	; 0x229
    66e4:	463a      	mov	r2, r7
    66e6:	4957      	ldr	r1, [pc, #348]	; (6844 <nrfx_gpiote_input_configure+0x1d0>)
    66e8:	4855      	ldr	r0, [pc, #340]	; (6840 <nrfx_gpiote_input_configure+0x1cc>)
    66ea:	f004 f91d 	bl	a928 <assert_print>
    66ee:	f240 2129 	movw	r1, #553	; 0x229
    66f2:	4638      	mov	r0, r7
    66f4:	f004 f911 	bl	a91a <assert_post_action>
    66f8:	e7d5      	b.n	66a6 <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    66fa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    66fe:	e000      	b.n	6702 <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6700:	4951      	ldr	r1, [pc, #324]	; (6848 <nrfx_gpiote_input_configure+0x1d4>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6702:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    6706:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    670a:	f1b8 0f00 	cmp.w	r8, #0
    670e:	d03f      	beq.n	6790 <nrfx_gpiote_input_configure+0x11c>
    6710:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6712:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    6716:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    671a:	f1b8 0f00 	cmp.w	r8, #0
    671e:	d039      	beq.n	6794 <nrfx_gpiote_input_configure+0x120>
    6720:	f898 2000 	ldrb.w	r2, [r8]
    6724:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6726:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    6728:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    672c:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6730:	4a46      	ldr	r2, [pc, #280]	; (684c <nrfx_gpiote_input_configure+0x1d8>)
    6732:	f104 0108 	add.w	r1, r4, #8
    6736:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    673a:	f023 0302 	bic.w	r3, r3, #2
    673e:	b29b      	uxth	r3, r3
    6740:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6744:	f043 0301 	orr.w	r3, r3, #1
    6748:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    674c:	b1bd      	cbz	r5, 677e <nrfx_gpiote_input_configure+0x10a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    674e:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    6750:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    6754:	4620      	mov	r0, r4
    6756:	f7ff fc2f 	bl	5fb8 <pin_is_output>
    675a:	b1e8      	cbz	r0, 6798 <nrfx_gpiote_input_configure+0x124>
            if (use_evt)
    675c:	f1b8 0f00 	cmp.w	r8, #0
    6760:	d164      	bne.n	682c <nrfx_gpiote_input_configure+0x1b8>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    6762:	4a3a      	ldr	r2, [pc, #232]	; (684c <nrfx_gpiote_input_configure+0x1d8>)
    6764:	f104 0108 	add.w	r1, r4, #8
    6768:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    676c:	f023 031c 	bic.w	r3, r3, #28
    6770:	b29b      	uxth	r3, r3
    6772:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6776:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    677a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    677e:	2e00      	cmp	r6, #0
    6780:	d058      	beq.n	6834 <nrfx_gpiote_input_configure+0x1c0>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    6782:	6872      	ldr	r2, [r6, #4]
    6784:	6831      	ldr	r1, [r6, #0]
    6786:	4620      	mov	r0, r4
    6788:	f7ff fcd4 	bl	6134 <pin_handler_set>
}
    678c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6790:	2200      	movs	r2, #0
    6792:	e7be      	b.n	6712 <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6794:	2200      	movs	r2, #0
    6796:	e7c6      	b.n	6726 <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6798:	4a2c      	ldr	r2, [pc, #176]	; (684c <nrfx_gpiote_input_configure+0x1d8>)
    679a:	f104 0108 	add.w	r1, r4, #8
    679e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    67a2:	f023 0320 	bic.w	r3, r3, #32
    67a6:	04db      	lsls	r3, r3, #19
    67a8:	0cdb      	lsrs	r3, r3, #19
    67aa:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    67ae:	f1b8 0f00 	cmp.w	r8, #0
    67b2:	d0d6      	beq.n	6762 <nrfx_gpiote_input_configure+0xee>
                if (!edge)
    67b4:	2f03      	cmp	r7, #3
    67b6:	d83b      	bhi.n	6830 <nrfx_gpiote_input_configure+0x1bc>
                uint8_t ch = *p_trigger_config->p_in_channel;
    67b8:	686b      	ldr	r3, [r5, #4]
    67ba:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    67bc:	b937      	cbnz	r7, 67cc <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    67be:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    67c2:	4b23      	ldr	r3, [pc, #140]	; (6850 <nrfx_gpiote_input_configure+0x1dc>)
    67c4:	2200      	movs	r2, #0
    67c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    67ca:	e7ca      	b.n	6762 <nrfx_gpiote_input_configure+0xee>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    67cc:	4638      	mov	r0, r7
    67ce:	f005 f9ba 	bl	bb46 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    67d2:	4b1f      	ldr	r3, [pc, #124]	; (6850 <nrfx_gpiote_input_configure+0x1dc>)
    67d4:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    67d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    67dc:	f021 0103 	bic.w	r1, r1, #3
    67e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    67e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    67e8:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    67ec:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    67f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    67f4:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    67f8:	0221      	lsls	r1, r4, #8
    67fa:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    67fe:	0400      	lsls	r0, r0, #16
    6800:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6804:	4301      	orrs	r1, r0
    6806:	ea4c 0101 	orr.w	r1, ip, r1
    680a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    680e:	036b      	lsls	r3, r5, #13
    6810:	b29b      	uxth	r3, r3
    6812:	4a0e      	ldr	r2, [pc, #56]	; (684c <nrfx_gpiote_input_configure+0x1d8>)
    6814:	f104 0108 	add.w	r1, r4, #8
    6818:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    681c:	4303      	orrs	r3, r0
    681e:	f043 0320 	orr.w	r3, r3, #32
    6822:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    6826:	e79c      	b.n	6762 <nrfx_gpiote_input_configure+0xee>
            return NRFX_ERROR_INVALID_PARAM;
    6828:	480a      	ldr	r0, [pc, #40]	; (6854 <nrfx_gpiote_input_configure+0x1e0>)
    682a:	e7af      	b.n	678c <nrfx_gpiote_input_configure+0x118>
                return NRFX_ERROR_INVALID_PARAM;
    682c:	4809      	ldr	r0, [pc, #36]	; (6854 <nrfx_gpiote_input_configure+0x1e0>)
    682e:	e7ad      	b.n	678c <nrfx_gpiote_input_configure+0x118>
                    return NRFX_ERROR_INVALID_PARAM;
    6830:	4808      	ldr	r0, [pc, #32]	; (6854 <nrfx_gpiote_input_configure+0x1e0>)
    6832:	e7ab      	b.n	678c <nrfx_gpiote_input_configure+0x118>
        err = NRFX_SUCCESS;
    6834:	4808      	ldr	r0, [pc, #32]	; (6858 <nrfx_gpiote_input_configure+0x1e4>)
    6836:	e7a9      	b.n	678c <nrfx_gpiote_input_configure+0x118>
    6838:	0000d524 	.word	0x0000d524
    683c:	0000c954 	.word	0x0000c954
    6840:	0000c294 	.word	0x0000c294
    6844:	0000d558 	.word	0x0000d558
    6848:	50000300 	.word	0x50000300
    684c:	20004064 	.word	0x20004064
    6850:	40006000 	.word	0x40006000
    6854:	0bad0004 	.word	0x0bad0004
    6858:	0bad0000 	.word	0x0bad0000

0000685c <nrfx_gpiote_output_configure>:
{
    685c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6860:	4604      	mov	r4, r0
    6862:	4615      	mov	r5, r2
    if (p_config)
    6864:	2900      	cmp	r1, #0
    6866:	f000 8086 	beq.w	6976 <nrfx_gpiote_output_configure+0x11a>
    686a:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    686c:	f005 f963 	bl	bb36 <pin_is_input>
    6870:	b128      	cbz	r0, 687e <nrfx_gpiote_output_configure+0x22>
    6872:	4620      	mov	r0, r4
    6874:	f7ff fb8a 	bl	5f8c <pin_in_use_by_te>
    6878:	2800      	cmp	r0, #0
    687a:	f040 80ce 	bne.w	6a1a <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    687e:	4620      	mov	r0, r4
    6880:	f7ff fb8e 	bl	5fa0 <pin_has_trigger>
    6884:	b118      	cbz	r0, 688e <nrfx_gpiote_output_configure+0x32>
    6886:	787b      	ldrb	r3, [r7, #1]
    6888:	2b01      	cmp	r3, #1
    688a:	f000 80c8 	beq.w	6a1e <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    688e:	f107 0901 	add.w	r9, r7, #1
    6892:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    6896:	0963      	lsrs	r3, r4, #5
    6898:	d020      	beq.n	68dc <nrfx_gpiote_output_configure+0x80>
    689a:	2b01      	cmp	r3, #1
    689c:	d121      	bne.n	68e2 <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    689e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    68a2:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    68a6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    68a8:	f013 0f01 	tst.w	r3, #1
    68ac:	d01b      	beq.n	68e6 <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    68ae:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    68b2:	0963      	lsrs	r3, r4, #5
    68b4:	d025      	beq.n	6902 <nrfx_gpiote_output_configure+0xa6>
    68b6:	2b01      	cmp	r3, #1
    68b8:	d026      	beq.n	6908 <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    68ba:	f8df a170 	ldr.w	sl, [pc, #368]	; 6a2c <nrfx_gpiote_output_configure+0x1d0>
    68be:	f240 232e 	movw	r3, #558	; 0x22e
    68c2:	4652      	mov	r2, sl
    68c4:	495a      	ldr	r1, [pc, #360]	; (6a30 <nrfx_gpiote_output_configure+0x1d4>)
    68c6:	485b      	ldr	r0, [pc, #364]	; (6a34 <nrfx_gpiote_output_configure+0x1d8>)
    68c8:	f004 f82e 	bl	a928 <assert_print>
    68cc:	f240 212e 	movw	r1, #558	; 0x22e
    68d0:	4650      	mov	r0, sl
    68d2:	f004 f822 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    68d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    68da:	e016      	b.n	690a <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    68dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    68e0:	e7df      	b.n	68a2 <nrfx_gpiote_output_configure+0x46>
    switch (port)
    68e2:	2300      	movs	r3, #0
    68e4:	e7dd      	b.n	68a2 <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    68e6:	4e51      	ldr	r6, [pc, #324]	; (6a2c <nrfx_gpiote_output_configure+0x1d0>)
    68e8:	f240 2329 	movw	r3, #553	; 0x229
    68ec:	4632      	mov	r2, r6
    68ee:	4952      	ldr	r1, [pc, #328]	; (6a38 <nrfx_gpiote_output_configure+0x1dc>)
    68f0:	4850      	ldr	r0, [pc, #320]	; (6a34 <nrfx_gpiote_output_configure+0x1d8>)
    68f2:	f004 f819 	bl	a928 <assert_print>
    68f6:	f240 2129 	movw	r1, #553	; 0x229
    68fa:	4630      	mov	r0, r6
    68fc:	f004 f80d 	bl	a91a <assert_post_action>
    6900:	e7d5      	b.n	68ae <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    6902:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6906:	e000      	b.n	690a <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6908:	4a4c      	ldr	r2, [pc, #304]	; (6a3c <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    690a:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    690e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6912:	f1b9 0f00 	cmp.w	r9, #0
    6916:	d04b      	beq.n	69b0 <nrfx_gpiote_output_configure+0x154>
    6918:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    691a:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    691e:	f1b8 0f00 	cmp.w	r8, #0
    6922:	d047      	beq.n	69b4 <nrfx_gpiote_output_configure+0x158>
    6924:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6926:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    6928:	2f00      	cmp	r7, #0
    692a:	d045      	beq.n	69b8 <nrfx_gpiote_output_configure+0x15c>
    692c:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6930:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    6932:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6936:	f1b9 0f00 	cmp.w	r9, #0
    693a:	d03f      	beq.n	69bc <nrfx_gpiote_output_configure+0x160>
    693c:	787b      	ldrb	r3, [r7, #1]
    693e:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6940:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6944:	f1b8 0f00 	cmp.w	r8, #0
    6948:	d03a      	beq.n	69c0 <nrfx_gpiote_output_configure+0x164>
    694a:	78b8      	ldrb	r0, [r7, #2]
    694c:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    694e:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6950:	2f00      	cmp	r7, #0
    6952:	d037      	beq.n	69c4 <nrfx_gpiote_output_configure+0x168>
    6954:	7838      	ldrb	r0, [r7, #0]
    6956:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6958:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    695a:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    695c:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    6960:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    6964:	4a36      	ldr	r2, [pc, #216]	; (6a40 <nrfx_gpiote_output_configure+0x1e4>)
    6966:	f104 0108 	add.w	r1, r4, #8
    696a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    696e:	f043 0303 	orr.w	r3, r3, #3
    6972:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    6976:	2d00      	cmp	r5, #0
    6978:	d053      	beq.n	6a22 <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    697a:	4620      	mov	r0, r4
    697c:	f005 f8db 	bl	bb36 <pin_is_input>
    6980:	2800      	cmp	r0, #0
    6982:	d150      	bne.n	6a26 <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    6984:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    6986:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    698a:	4a2e      	ldr	r2, [pc, #184]	; (6a44 <nrfx_gpiote_output_configure+0x1e8>)
    698c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6990:	492b      	ldr	r1, [pc, #172]	; (6a40 <nrfx_gpiote_output_configure+0x1e4>)
    6992:	f104 0008 	add.w	r0, r4, #8
    6996:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    699a:	f022 0220 	bic.w	r2, r2, #32
    699e:	04d2      	lsls	r2, r2, #19
    69a0:	0cd2      	lsrs	r2, r2, #19
    69a2:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    69a6:	786a      	ldrb	r2, [r5, #1]
    69a8:	b972      	cbnz	r2, 69c8 <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    69aa:	4827      	ldr	r0, [pc, #156]	; (6a48 <nrfx_gpiote_output_configure+0x1ec>)
}
    69ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    69b0:	2300      	movs	r3, #0
    69b2:	e7b2      	b.n	691a <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    69b4:	2000      	movs	r0, #0
    69b6:	e7b6      	b.n	6926 <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    69b8:	2000      	movs	r0, #0
    69ba:	e7b9      	b.n	6930 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    69bc:	2300      	movs	r3, #0
    69be:	e7bf      	b.n	6940 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    69c0:	2000      	movs	r0, #0
    69c2:	e7c4      	b.n	694e <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    69c4:	2000      	movs	r0, #0
    69c6:	e7c7      	b.n	6958 <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    69c8:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    69ca:	481e      	ldr	r0, [pc, #120]	; (6a44 <nrfx_gpiote_output_configure+0x1e8>)
    69cc:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    69d0:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    69d4:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    69d8:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    69dc:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    69e0:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    69e4:	0221      	lsls	r1, r4, #8
    69e6:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    69ea:	0412      	lsls	r2, r2, #16
    69ec:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    69f0:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    69f2:	0539      	lsls	r1, r7, #20
    69f4:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    69f8:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    69fa:	4332      	orrs	r2, r6
    69fc:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6a00:	035b      	lsls	r3, r3, #13
    6a02:	b29b      	uxth	r3, r3
    6a04:	4a0e      	ldr	r2, [pc, #56]	; (6a40 <nrfx_gpiote_output_configure+0x1e4>)
    6a06:	3408      	adds	r4, #8
    6a08:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    6a0c:	430b      	orrs	r3, r1
    6a0e:	f043 0320 	orr.w	r3, r3, #32
    6a12:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    6a16:	480c      	ldr	r0, [pc, #48]	; (6a48 <nrfx_gpiote_output_configure+0x1ec>)
    6a18:	e7c8      	b.n	69ac <nrfx_gpiote_output_configure+0x150>
    6a1a:	480c      	ldr	r0, [pc, #48]	; (6a4c <nrfx_gpiote_output_configure+0x1f0>)
    6a1c:	e7c6      	b.n	69ac <nrfx_gpiote_output_configure+0x150>
    6a1e:	480b      	ldr	r0, [pc, #44]	; (6a4c <nrfx_gpiote_output_configure+0x1f0>)
    6a20:	e7c4      	b.n	69ac <nrfx_gpiote_output_configure+0x150>
    6a22:	4809      	ldr	r0, [pc, #36]	; (6a48 <nrfx_gpiote_output_configure+0x1ec>)
    6a24:	e7c2      	b.n	69ac <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    6a26:	4809      	ldr	r0, [pc, #36]	; (6a4c <nrfx_gpiote_output_configure+0x1f0>)
    6a28:	e7c0      	b.n	69ac <nrfx_gpiote_output_configure+0x150>
    6a2a:	bf00      	nop
    6a2c:	0000d524 	.word	0x0000d524
    6a30:	0000c954 	.word	0x0000c954
    6a34:	0000c294 	.word	0x0000c294
    6a38:	0000d558 	.word	0x0000d558
    6a3c:	50000300 	.word	0x50000300
    6a40:	20004064 	.word	0x20004064
    6a44:	40006000 	.word	0x40006000
    6a48:	0bad0000 	.word	0x0bad0000
    6a4c:	0bad0004 	.word	0x0bad0004

00006a50 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6a50:	4b01      	ldr	r3, [pc, #4]	; (6a58 <nrfx_gpiote_global_callback_set+0x8>)
    6a52:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    6a54:	60d9      	str	r1, [r3, #12]
}
    6a56:	4770      	bx	lr
    6a58:	20004064 	.word	0x20004064

00006a5c <nrfx_gpiote_channel_get>:
{
    6a5c:	b570      	push	{r4, r5, r6, lr}
    6a5e:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    6a60:	460d      	mov	r5, r1
    6a62:	b159      	cbz	r1, 6a7c <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    6a64:	4620      	mov	r0, r4
    6a66:	f7ff fa91 	bl	5f8c <pin_in_use_by_te>
    6a6a:	b1a8      	cbz	r0, 6a98 <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6a6c:	3408      	adds	r4, #8
    6a6e:	4b0b      	ldr	r3, [pc, #44]	; (6a9c <nrfx_gpiote_channel_get+0x40>)
    6a70:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    6a74:	0b5b      	lsrs	r3, r3, #13
    6a76:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    6a78:	4809      	ldr	r0, [pc, #36]	; (6aa0 <nrfx_gpiote_channel_get+0x44>)
}
    6a7a:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    6a7c:	4e09      	ldr	r6, [pc, #36]	; (6aa4 <nrfx_gpiote_channel_get+0x48>)
    6a7e:	f240 2335 	movw	r3, #565	; 0x235
    6a82:	4632      	mov	r2, r6
    6a84:	4908      	ldr	r1, [pc, #32]	; (6aa8 <nrfx_gpiote_channel_get+0x4c>)
    6a86:	4809      	ldr	r0, [pc, #36]	; (6aac <nrfx_gpiote_channel_get+0x50>)
    6a88:	f003 ff4e 	bl	a928 <assert_print>
    6a8c:	f240 2135 	movw	r1, #565	; 0x235
    6a90:	4630      	mov	r0, r6
    6a92:	f003 ff42 	bl	a91a <assert_post_action>
    6a96:	e7e5      	b.n	6a64 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    6a98:	4805      	ldr	r0, [pc, #20]	; (6ab0 <nrfx_gpiote_channel_get+0x54>)
    6a9a:	e7ee      	b.n	6a7a <nrfx_gpiote_channel_get+0x1e>
    6a9c:	20004064 	.word	0x20004064
    6aa0:	0bad0000 	.word	0x0bad0000
    6aa4:	0000d7c0 	.word	0x0000d7c0
    6aa8:	0000d814 	.word	0x0000d814
    6aac:	0000c294 	.word	0x0000c294
    6ab0:	0bad0004 	.word	0x0bad0004

00006ab4 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    6ab4:	4b10      	ldr	r3, [pc, #64]	; (6af8 <nrfx_gpiote_init+0x44>)
    6ab6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6aba:	b10b      	cbz	r3, 6ac0 <nrfx_gpiote_init+0xc>
        return err_code;
    6abc:	480f      	ldr	r0, [pc, #60]	; (6afc <nrfx_gpiote_init+0x48>)
}
    6abe:	4770      	bx	lr
{
    6ac0:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6ac2:	4c0d      	ldr	r4, [pc, #52]	; (6af8 <nrfx_gpiote_init+0x44>)
    6ac4:	2260      	movs	r2, #96	; 0x60
    6ac6:	2100      	movs	r1, #0
    6ac8:	f104 0010 	add.w	r0, r4, #16
    6acc:	f005 f96a 	bl	bda4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6ad0:	2006      	movs	r0, #6
    6ad2:	f7fc f967 	bl	2da4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6ad6:	4b0a      	ldr	r3, [pc, #40]	; (6b00 <nrfx_gpiote_init+0x4c>)
    6ad8:	2200      	movs	r2, #0
    6ada:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    6ade:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    6ae2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6ae6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6aea:	2301      	movs	r3, #1
    6aec:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6af0:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    6af2:	4804      	ldr	r0, [pc, #16]	; (6b04 <nrfx_gpiote_init+0x50>)
}
    6af4:	bd10      	pop	{r4, pc}
    6af6:	bf00      	nop
    6af8:	20004064 	.word	0x20004064
    6afc:	0bad0005 	.word	0x0bad0005
    6b00:	40006000 	.word	0x40006000
    6b04:	0bad0000 	.word	0x0bad0000

00006b08 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6b08:	4b03      	ldr	r3, [pc, #12]	; (6b18 <nrfx_gpiote_is_init+0x10>)
    6b0a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    6b0e:	3800      	subs	r0, #0
    6b10:	bf18      	it	ne
    6b12:	2001      	movne	r0, #1
    6b14:	4770      	bx	lr
    6b16:	bf00      	nop
    6b18:	20004064 	.word	0x20004064

00006b1c <nrfx_gpiote_channel_free>:
{
    6b1c:	b508      	push	{r3, lr}
    6b1e:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6b20:	4801      	ldr	r0, [pc, #4]	; (6b28 <nrfx_gpiote_channel_free+0xc>)
    6b22:	f7ff f855 	bl	5bd0 <nrfx_flag32_free>
}
    6b26:	bd08      	pop	{r3, pc}
    6b28:	200040d4 	.word	0x200040d4

00006b2c <nrfx_gpiote_channel_alloc>:
{
    6b2c:	b508      	push	{r3, lr}
    6b2e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    6b30:	4801      	ldr	r0, [pc, #4]	; (6b38 <nrfx_gpiote_channel_alloc+0xc>)
    6b32:	f7ff f825 	bl	5b80 <nrfx_flag32_alloc>
}
    6b36:	bd08      	pop	{r3, pc}
    6b38:	200040d4 	.word	0x200040d4

00006b3c <nrfx_gpiote_trigger_enable>:
{
    6b3c:	b570      	push	{r4, r5, r6, lr}
    6b3e:	4604      	mov	r4, r0
    6b40:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    6b42:	f7ff fa2d 	bl	5fa0 <pin_has_trigger>
    6b46:	b1b8      	cbz	r0, 6b78 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6b48:	4620      	mov	r0, r4
    6b4a:	f7ff fa1f 	bl	5f8c <pin_in_use_by_te>
    6b4e:	b118      	cbz	r0, 6b58 <nrfx_gpiote_trigger_enable+0x1c>
    6b50:	4620      	mov	r0, r4
    6b52:	f004 fff0 	bl	bb36 <pin_is_input>
    6b56:	b9e8      	cbnz	r0, 6b94 <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    6b58:	2d00      	cmp	r5, #0
    6b5a:	d04c      	beq.n	6bf6 <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6b5c:	f104 0308 	add.w	r3, r4, #8
    6b60:	4a70      	ldr	r2, [pc, #448]	; (6d24 <nrfx_gpiote_trigger_enable+0x1e8>)
    6b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    6b66:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6b6a:	2b04      	cmp	r3, #4
    6b6c:	f000 8092 	beq.w	6c94 <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    6b70:	2b05      	cmp	r3, #5
    6b72:	d14e      	bne.n	6c12 <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    6b74:	2602      	movs	r6, #2
    6b76:	e08e      	b.n	6c96 <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    6b78:	4e6b      	ldr	r6, [pc, #428]	; (6d28 <nrfx_gpiote_trigger_enable+0x1ec>)
    6b7a:	f240 33df 	movw	r3, #991	; 0x3df
    6b7e:	4632      	mov	r2, r6
    6b80:	496a      	ldr	r1, [pc, #424]	; (6d2c <nrfx_gpiote_trigger_enable+0x1f0>)
    6b82:	486b      	ldr	r0, [pc, #428]	; (6d30 <nrfx_gpiote_trigger_enable+0x1f4>)
    6b84:	f003 fed0 	bl	a928 <assert_print>
    6b88:	f240 31df 	movw	r1, #991	; 0x3df
    6b8c:	4630      	mov	r0, r6
    6b8e:	f003 fec4 	bl	a91a <assert_post_action>
    6b92:	e7d9      	b.n	6b48 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    6b94:	4620      	mov	r0, r4
    6b96:	f7ff fa19 	bl	5fcc <pin_te_get>
    6b9a:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    6b9c:	2807      	cmp	r0, #7
    6b9e:	d81c      	bhi.n	6bda <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6ba0:	00a3      	lsls	r3, r4, #2
    6ba2:	f503 7380 	add.w	r3, r3, #256	; 0x100
    6ba6:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    6ba8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6bac:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6bb0:	2200      	movs	r2, #0
    6bb2:	601a      	str	r2, [r3, #0]
    6bb4:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    6bb6:	4a5f      	ldr	r2, [pc, #380]	; (6d34 <nrfx_gpiote_trigger_enable+0x1f8>)
    6bb8:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    6bbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    6bc0:	f043 0301 	orr.w	r3, r3, #1
    6bc4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    6bc8:	2d00      	cmp	r5, #0
    6bca:	f000 80a9 	beq.w	6d20 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    6bce:	2001      	movs	r0, #1
    6bd0:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    6bd4:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    6bd8:	e0a2      	b.n	6d20 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    6bda:	4e57      	ldr	r6, [pc, #348]	; (6d38 <nrfx_gpiote_trigger_enable+0x1fc>)
    6bdc:	f44f 7323 	mov.w	r3, #652	; 0x28c
    6be0:	4632      	mov	r2, r6
    6be2:	4956      	ldr	r1, [pc, #344]	; (6d3c <nrfx_gpiote_trigger_enable+0x200>)
    6be4:	4852      	ldr	r0, [pc, #328]	; (6d30 <nrfx_gpiote_trigger_enable+0x1f4>)
    6be6:	f003 fe9f 	bl	a928 <assert_print>
    6bea:	f44f 7123 	mov.w	r1, #652	; 0x28c
    6bee:	4630      	mov	r0, r6
    6bf0:	f003 fe93 	bl	a91a <assert_post_action>
    6bf4:	e7d4      	b.n	6ba0 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    6bf6:	4d4c      	ldr	r5, [pc, #304]	; (6d28 <nrfx_gpiote_trigger_enable+0x1ec>)
    6bf8:	f240 33ee 	movw	r3, #1006	; 0x3ee
    6bfc:	462a      	mov	r2, r5
    6bfe:	4950      	ldr	r1, [pc, #320]	; (6d40 <nrfx_gpiote_trigger_enable+0x204>)
    6c00:	484b      	ldr	r0, [pc, #300]	; (6d30 <nrfx_gpiote_trigger_enable+0x1f4>)
    6c02:	f003 fe91 	bl	a928 <assert_print>
    6c06:	f240 31ee 	movw	r1, #1006	; 0x3ee
    6c0a:	4628      	mov	r0, r5
    6c0c:	f003 fe85 	bl	a91a <assert_post_action>
    6c10:	e7a4      	b.n	6b5c <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    6c12:	0963      	lsrs	r3, r4, #5
    6c14:	d01f      	beq.n	6c56 <nrfx_gpiote_trigger_enable+0x11a>
    6c16:	2b01      	cmp	r3, #1
    6c18:	d120      	bne.n	6c5c <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    6c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6c1e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6c22:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6c24:	f013 0f01 	tst.w	r3, #1
    6c28:	d01a      	beq.n	6c60 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    6c2a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c2e:	0963      	lsrs	r3, r4, #5
    6c30:	d024      	beq.n	6c7c <nrfx_gpiote_trigger_enable+0x140>
    6c32:	2b01      	cmp	r3, #1
    6c34:	d025      	beq.n	6c82 <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    6c36:	4e43      	ldr	r6, [pc, #268]	; (6d44 <nrfx_gpiote_trigger_enable+0x208>)
    6c38:	f240 232e 	movw	r3, #558	; 0x22e
    6c3c:	4632      	mov	r2, r6
    6c3e:	4942      	ldr	r1, [pc, #264]	; (6d48 <nrfx_gpiote_trigger_enable+0x20c>)
    6c40:	483b      	ldr	r0, [pc, #236]	; (6d30 <nrfx_gpiote_trigger_enable+0x1f4>)
    6c42:	f003 fe71 	bl	a928 <assert_print>
    6c46:	f240 212e 	movw	r1, #558	; 0x22e
    6c4a:	4630      	mov	r0, r6
    6c4c:	f003 fe65 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    6c50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6c54:	e016      	b.n	6c84 <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    6c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6c5a:	e7e0      	b.n	6c1e <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    6c5c:	2300      	movs	r3, #0
    6c5e:	e7de      	b.n	6c1e <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6c60:	4d38      	ldr	r5, [pc, #224]	; (6d44 <nrfx_gpiote_trigger_enable+0x208>)
    6c62:	f240 2329 	movw	r3, #553	; 0x229
    6c66:	462a      	mov	r2, r5
    6c68:	4938      	ldr	r1, [pc, #224]	; (6d4c <nrfx_gpiote_trigger_enable+0x210>)
    6c6a:	4831      	ldr	r0, [pc, #196]	; (6d30 <nrfx_gpiote_trigger_enable+0x1f4>)
    6c6c:	f003 fe5c 	bl	a928 <assert_print>
    6c70:	f240 2129 	movw	r1, #553	; 0x229
    6c74:	4628      	mov	r0, r5
    6c76:	f003 fe50 	bl	a91a <assert_post_action>
    6c7a:	e7d6      	b.n	6c2a <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    6c7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6c80:	e000      	b.n	6c84 <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c82:	4b33      	ldr	r3, [pc, #204]	; (6d50 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    6c84:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6c88:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6c8a:	f013 0f01 	tst.w	r3, #1
    6c8e:	d024      	beq.n	6cda <nrfx_gpiote_trigger_enable+0x19e>
    6c90:	2603      	movs	r6, #3
    6c92:	e000      	b.n	6c96 <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    6c94:	2603      	movs	r6, #3
    switch (port)
    6c96:	0963      	lsrs	r3, r4, #5
    6c98:	d021      	beq.n	6cde <nrfx_gpiote_trigger_enable+0x1a2>
    6c9a:	2b01      	cmp	r3, #1
    6c9c:	d122      	bne.n	6ce4 <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    6c9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6ca2:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6ca6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6ca8:	f013 0f01 	tst.w	r3, #1
    6cac:	d01c      	beq.n	6ce8 <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    6cae:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6cb2:	0964      	lsrs	r4, r4, #5
    6cb4:	d026      	beq.n	6d04 <nrfx_gpiote_trigger_enable+0x1c8>
    6cb6:	2c01      	cmp	r4, #1
    6cb8:	d027      	beq.n	6d0a <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    6cba:	4c22      	ldr	r4, [pc, #136]	; (6d44 <nrfx_gpiote_trigger_enable+0x208>)
    6cbc:	f240 232e 	movw	r3, #558	; 0x22e
    6cc0:	4622      	mov	r2, r4
    6cc2:	4921      	ldr	r1, [pc, #132]	; (6d48 <nrfx_gpiote_trigger_enable+0x20c>)
    6cc4:	481a      	ldr	r0, [pc, #104]	; (6d30 <nrfx_gpiote_trigger_enable+0x1f4>)
    6cc6:	f003 fe2f 	bl	a928 <assert_print>
    6cca:	f240 212e 	movw	r1, #558	; 0x22e
    6cce:	4620      	mov	r0, r4
    6cd0:	f003 fe23 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    6cd4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6cd8:	e018      	b.n	6d0c <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6cda:	2602      	movs	r6, #2
    6cdc:	e7db      	b.n	6c96 <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    6cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6ce2:	e7de      	b.n	6ca2 <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    6ce4:	2300      	movs	r3, #0
    6ce6:	e7dc      	b.n	6ca2 <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6ce8:	4d16      	ldr	r5, [pc, #88]	; (6d44 <nrfx_gpiote_trigger_enable+0x208>)
    6cea:	f240 2329 	movw	r3, #553	; 0x229
    6cee:	462a      	mov	r2, r5
    6cf0:	4916      	ldr	r1, [pc, #88]	; (6d4c <nrfx_gpiote_trigger_enable+0x210>)
    6cf2:	480f      	ldr	r0, [pc, #60]	; (6d30 <nrfx_gpiote_trigger_enable+0x1f4>)
    6cf4:	f003 fe18 	bl	a928 <assert_print>
    6cf8:	f240 2129 	movw	r1, #553	; 0x229
    6cfc:	4628      	mov	r0, r5
    6cfe:	f003 fe0c 	bl	a91a <assert_post_action>
    6d02:	e7d4      	b.n	6cae <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    6d04:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6d08:	e000      	b.n	6d0c <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6d0a:	4911      	ldr	r1, [pc, #68]	; (6d50 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6d0c:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    6d10:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    6d14:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6d18:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    6d1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    6d20:	bd70      	pop	{r4, r5, r6, pc}
    6d22:	bf00      	nop
    6d24:	20004064 	.word	0x20004064
    6d28:	0000d7c0 	.word	0x0000d7c0
    6d2c:	0000d864 	.word	0x0000d864
    6d30:	0000c294 	.word	0x0000c294
    6d34:	40006000 	.word	0x40006000
    6d38:	0000d820 	.word	0x0000d820
    6d3c:	0000d858 	.word	0x0000d858
    6d40:	0000d87c 	.word	0x0000d87c
    6d44:	0000d524 	.word	0x0000d524
    6d48:	0000c954 	.word	0x0000c954
    6d4c:	0000d558 	.word	0x0000d558
    6d50:	50000300 	.word	0x50000300

00006d54 <nrfx_gpiote_trigger_disable>:
{
    6d54:	b538      	push	{r3, r4, r5, lr}
    6d56:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6d58:	f7ff f918 	bl	5f8c <pin_in_use_by_te>
    6d5c:	b1a0      	cbz	r0, 6d88 <nrfx_gpiote_trigger_disable+0x34>
    6d5e:	4620      	mov	r0, r4
    6d60:	f004 fee9 	bl	bb36 <pin_is_input>
    6d64:	b180      	cbz	r0, 6d88 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    6d66:	4620      	mov	r0, r4
    6d68:	f7ff f930 	bl	5fcc <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6d6c:	2201      	movs	r2, #1
    6d6e:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    6d70:	4b26      	ldr	r3, [pc, #152]	; (6e0c <nrfx_gpiote_trigger_disable+0xb8>)
    6d72:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6d76:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    6d7a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    6d7e:	f022 0203 	bic.w	r2, r2, #3
    6d82:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    6d86:	e040      	b.n	6e0a <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    6d88:	0963      	lsrs	r3, r4, #5
    6d8a:	d01f      	beq.n	6dcc <nrfx_gpiote_trigger_disable+0x78>
    6d8c:	2b01      	cmp	r3, #1
    6d8e:	d120      	bne.n	6dd2 <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    6d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6d94:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6d98:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6d9a:	f013 0f01 	tst.w	r3, #1
    6d9e:	d01a      	beq.n	6dd6 <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    6da0:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6da4:	0964      	lsrs	r4, r4, #5
    6da6:	d024      	beq.n	6df2 <nrfx_gpiote_trigger_disable+0x9e>
    6da8:	2c01      	cmp	r4, #1
    6daa:	d025      	beq.n	6df8 <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    6dac:	4c18      	ldr	r4, [pc, #96]	; (6e10 <nrfx_gpiote_trigger_disable+0xbc>)
    6dae:	f240 232e 	movw	r3, #558	; 0x22e
    6db2:	4622      	mov	r2, r4
    6db4:	4917      	ldr	r1, [pc, #92]	; (6e14 <nrfx_gpiote_trigger_disable+0xc0>)
    6db6:	4818      	ldr	r0, [pc, #96]	; (6e18 <nrfx_gpiote_trigger_disable+0xc4>)
    6db8:	f003 fdb6 	bl	a928 <assert_print>
    6dbc:	f240 212e 	movw	r1, #558	; 0x22e
    6dc0:	4620      	mov	r0, r4
    6dc2:	f003 fdaa 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    6dc6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6dca:	e016      	b.n	6dfa <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    6dcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6dd0:	e7e0      	b.n	6d94 <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    6dd2:	2300      	movs	r3, #0
    6dd4:	e7de      	b.n	6d94 <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6dd6:	4d0e      	ldr	r5, [pc, #56]	; (6e10 <nrfx_gpiote_trigger_disable+0xbc>)
    6dd8:	f240 2329 	movw	r3, #553	; 0x229
    6ddc:	462a      	mov	r2, r5
    6dde:	490f      	ldr	r1, [pc, #60]	; (6e1c <nrfx_gpiote_trigger_disable+0xc8>)
    6de0:	480d      	ldr	r0, [pc, #52]	; (6e18 <nrfx_gpiote_trigger_disable+0xc4>)
    6de2:	f003 fda1 	bl	a928 <assert_print>
    6de6:	f240 2129 	movw	r1, #553	; 0x229
    6dea:	4628      	mov	r0, r5
    6dec:	f003 fd95 	bl	a91a <assert_post_action>
    6df0:	e7d6      	b.n	6da0 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    6df2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6df6:	e000      	b.n	6dfa <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6df8:	4909      	ldr	r1, [pc, #36]	; (6e20 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6dfa:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    6dfe:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    6e02:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    6e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6e0a:	bd38      	pop	{r3, r4, r5, pc}
    6e0c:	40006000 	.word	0x40006000
    6e10:	0000d524 	.word	0x0000d524
    6e14:	0000c954 	.word	0x0000c954
    6e18:	0000c294 	.word	0x0000c294
    6e1c:	0000d558 	.word	0x0000d558
    6e20:	50000300 	.word	0x50000300

00006e24 <nrfx_gpiote_pin_uninit>:
{
    6e24:	b538      	push	{r3, r4, r5, lr}
    6e26:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    6e28:	f7ff f8a6 	bl	5f78 <pin_in_use>
    6e2c:	b908      	cbnz	r0, 6e32 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    6e2e:	4824      	ldr	r0, [pc, #144]	; (6ec0 <nrfx_gpiote_pin_uninit+0x9c>)
}
    6e30:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    6e32:	4620      	mov	r0, r4
    6e34:	f7ff ff8e 	bl	6d54 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    6e38:	4620      	mov	r0, r4
    6e3a:	f7ff f95f 	bl	60fc <pin_handler_trigger_uninit>
    switch (port)
    6e3e:	0963      	lsrs	r3, r4, #5
    6e40:	d01f      	beq.n	6e82 <nrfx_gpiote_pin_uninit+0x5e>
    6e42:	2b01      	cmp	r3, #1
    6e44:	d120      	bne.n	6e88 <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    6e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6e4a:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6e4e:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6e50:	f013 0f01 	tst.w	r3, #1
    6e54:	d01a      	beq.n	6e8c <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    6e56:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6e5a:	0964      	lsrs	r4, r4, #5
    6e5c:	d024      	beq.n	6ea8 <nrfx_gpiote_pin_uninit+0x84>
    6e5e:	2c01      	cmp	r4, #1
    6e60:	d025      	beq.n	6eae <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    6e62:	4c18      	ldr	r4, [pc, #96]	; (6ec4 <nrfx_gpiote_pin_uninit+0xa0>)
    6e64:	f240 232e 	movw	r3, #558	; 0x22e
    6e68:	4622      	mov	r2, r4
    6e6a:	4917      	ldr	r1, [pc, #92]	; (6ec8 <nrfx_gpiote_pin_uninit+0xa4>)
    6e6c:	4817      	ldr	r0, [pc, #92]	; (6ecc <nrfx_gpiote_pin_uninit+0xa8>)
    6e6e:	f003 fd5b 	bl	a928 <assert_print>
    6e72:	f240 212e 	movw	r1, #558	; 0x22e
    6e76:	4620      	mov	r0, r4
    6e78:	f003 fd4f 	bl	a91a <assert_post_action>
        case 0: return NRF_P0;
    6e7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6e80:	e016      	b.n	6eb0 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    6e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e86:	e7e0      	b.n	6e4a <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    6e88:	2300      	movs	r3, #0
    6e8a:	e7de      	b.n	6e4a <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6e8c:	4d0d      	ldr	r5, [pc, #52]	; (6ec4 <nrfx_gpiote_pin_uninit+0xa0>)
    6e8e:	f240 2329 	movw	r3, #553	; 0x229
    6e92:	462a      	mov	r2, r5
    6e94:	490e      	ldr	r1, [pc, #56]	; (6ed0 <nrfx_gpiote_pin_uninit+0xac>)
    6e96:	480d      	ldr	r0, [pc, #52]	; (6ecc <nrfx_gpiote_pin_uninit+0xa8>)
    6e98:	f003 fd46 	bl	a928 <assert_print>
    6e9c:	f240 2129 	movw	r1, #553	; 0x229
    6ea0:	4628      	mov	r0, r5
    6ea2:	f003 fd3a 	bl	a91a <assert_post_action>
    6ea6:	e7d6      	b.n	6e56 <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    6ea8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6eac:	e000      	b.n	6eb0 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6eae:	4b09      	ldr	r3, [pc, #36]	; (6ed4 <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    6eb0:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    6eb4:	2202      	movs	r2, #2
    6eb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    6eba:	4807      	ldr	r0, [pc, #28]	; (6ed8 <nrfx_gpiote_pin_uninit+0xb4>)
}
    6ebc:	e7b8      	b.n	6e30 <nrfx_gpiote_pin_uninit+0xc>
    6ebe:	bf00      	nop
    6ec0:	0bad0004 	.word	0x0bad0004
    6ec4:	0000d524 	.word	0x0000d524
    6ec8:	0000c954 	.word	0x0000c954
    6ecc:	0000c294 	.word	0x0000c294
    6ed0:	0000d558 	.word	0x0000d558
    6ed4:	50000300 	.word	0x50000300
    6ed8:	0bad0000 	.word	0x0bad0000

00006edc <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    6edc:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    6ede:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    6ee0:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6ee4:	2100      	movs	r1, #0
    uint32_t status = 0;
    6ee6:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6ee8:	e003      	b.n	6ef2 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    6eea:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    6eec:	3304      	adds	r3, #4
    6eee:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6ef0:	3101      	adds	r1, #1
    6ef2:	2907      	cmp	r1, #7
    6ef4:	d814      	bhi.n	6f20 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ef6:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    6efa:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    6efe:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    6f00:	2a00      	cmp	r2, #0
    6f02:	d0f2      	beq.n	6eea <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    6f04:	4a0c      	ldr	r2, [pc, #48]	; (6f38 <nrfx_gpiote_irq_handler+0x5c>)
    6f06:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    6f0a:	4210      	tst	r0, r2
    6f0c:	d0ed      	beq.n	6eea <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    6f0e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    6f12:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6f16:	2500      	movs	r5, #0
    6f18:	6015      	str	r5, [r2, #0]
    6f1a:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    6f1c:	4304      	orrs	r4, r0
    6f1e:	e7e4      	b.n	6eea <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6f20:	4b05      	ldr	r3, [pc, #20]	; (6f38 <nrfx_gpiote_irq_handler+0x5c>)
    6f22:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    6f26:	b91b      	cbnz	r3, 6f30 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    6f28:	4620      	mov	r0, r4
    6f2a:	f7ff f939 	bl	61a0 <gpiote_evt_handle>
}
    6f2e:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    6f30:	f7ff fac2 	bl	64b8 <port_event_handle>
    6f34:	e7f8      	b.n	6f28 <nrfx_gpiote_irq_handler+0x4c>
    6f36:	bf00      	nop
    6f38:	40006000 	.word	0x40006000

00006f3c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    6f3c:	b508      	push	{r3, lr}
    6f3e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    6f40:	4801      	ldr	r0, [pc, #4]	; (6f48 <nrfx_ppi_channel_alloc+0xc>)
    6f42:	f7fe fe1d 	bl	5b80 <nrfx_flag32_alloc>
}
    6f46:	bd08      	pop	{r3, pc}
    6f48:	200040e0 	.word	0x200040e0

00006f4c <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6f4c:	4b12      	ldr	r3, [pc, #72]	; (6f98 <_DoInit+0x4c>)
    6f4e:	2203      	movs	r2, #3
    6f50:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    6f52:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    6f54:	4911      	ldr	r1, [pc, #68]	; (6f9c <_DoInit+0x50>)
    6f56:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6f58:	4a11      	ldr	r2, [pc, #68]	; (6fa0 <_DoInit+0x54>)
    6f5a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    6f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6f60:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    6f62:	2200      	movs	r2, #0
    6f64:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    6f66:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6f68:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    6f6a:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    6f6c:	490d      	ldr	r1, [pc, #52]	; (6fa4 <_DoInit+0x58>)
    6f6e:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    6f70:	2110      	movs	r1, #16
    6f72:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    6f74:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    6f76:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6f78:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    6f7a:	4a0b      	ldr	r2, [pc, #44]	; (6fa8 <_DoInit+0x5c>)
    6f7c:	6810      	ldr	r0, [r2, #0]
    6f7e:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    6f82:	4a0a      	ldr	r2, [pc, #40]	; (6fac <_DoInit+0x60>)
    6f84:	e892 0003 	ldmia.w	r2, {r0, r1}
    6f88:	6018      	str	r0, [r3, #0]
    6f8a:	8099      	strh	r1, [r3, #4]
    6f8c:	0c09      	lsrs	r1, r1, #16
    6f8e:	7199      	strb	r1, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    6f90:	2220      	movs	r2, #32
    6f92:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    6f94:	4770      	bx	lr
    6f96:	bf00      	nop
    6f98:	20004bf4 	.word	0x20004bf4
    6f9c:	0000d888 	.word	0x0000d888
    6fa0:	20004cac 	.word	0x20004cac
    6fa4:	20004c9c 	.word	0x20004c9c
    6fa8:	0000d894 	.word	0x0000d894
    6fac:	0000d898 	.word	0x0000d898

00006fb0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6fb4:	4604      	mov	r4, r0
    6fb6:	460e      	mov	r6, r1
    6fb8:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    6fba:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6fbe:	4a2d      	ldr	r2, [pc, #180]	; (7074 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    6fc0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    6fc4:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    6fc6:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    6fc8:	42bb      	cmp	r3, r7
    6fca:	d84b      	bhi.n	7064 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    6fcc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    6fd0:	4928      	ldr	r1, [pc, #160]	; (7074 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    6fd2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    6fd6:	f8d2 8020 	ldr.w	r8, [r2, #32]
    6fda:	eba8 0907 	sub.w	r9, r8, r7
    6fde:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    6fe2:	4295      	cmp	r5, r2
    6fe4:	d904      	bls.n	6ff0 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    6fe6:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    6fe8:	429d      	cmp	r5, r3
    6fea:	d917      	bls.n	701c <SEGGER_RTT_WriteSkipNoLock+0x6c>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    6fec:	2000      	movs	r0, #0
    6fee:	e03e      	b.n	706e <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6ff0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 7074 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    6ff4:	1c63      	adds	r3, r4, #1
    6ff6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6ffa:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    6ffe:	6858      	ldr	r0, [r3, #4]
    7000:	462a      	mov	r2, r5
    7002:	4631      	mov	r1, r6
    7004:	4438      	add	r0, r7
    7006:	f004 febf 	bl	bd88 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    700a:	443d      	add	r5, r7
    700c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7010:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
    7014:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
      return 1;
    7018:	2001      	movs	r0, #1
    701a:	e028      	b.n	706e <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    701c:	1c43      	adds	r3, r0, #1
    701e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7022:	4a14      	ldr	r2, [pc, #80]	; (7074 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7024:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7028:	6858      	ldr	r0, [r3, #4]
    702a:	464a      	mov	r2, r9
    702c:	4631      	mov	r1, r6
    702e:	4438      	add	r0, r7
    7030:	f004 feaa 	bl	bd88 <memcpy>
      NumBytes -= Rem;
    7034:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    7038:	197f      	adds	r7, r7, r5
    703a:	d00b      	beq.n	7054 <SEGGER_RTT_WriteSkipNoLock+0xa4>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    703c:	1c63      	adds	r3, r4, #1
    703e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7042:	4a0c      	ldr	r2, [pc, #48]	; (7074 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7044:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7048:	463a      	mov	r2, r7
    704a:	eb06 0109 	add.w	r1, r6, r9
    704e:	6858      	ldr	r0, [r3, #4]
    7050:	f004 fe9a 	bl	bd88 <memcpy>
      pRing->WrOff = NumBytes;
    7054:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7058:	4b06      	ldr	r3, [pc, #24]	; (7074 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    705a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    705e:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    7060:	2001      	movs	r0, #1
    7062:	e004      	b.n	706e <SEGGER_RTT_WriteSkipNoLock+0xbe>
    Avail = RdOff - WrOff - 1u;
    7064:	1bdb      	subs	r3, r3, r7
    7066:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    7068:	42ab      	cmp	r3, r5
    706a:	d2c1      	bcs.n	6ff0 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    706c:	2000      	movs	r0, #0
}
    706e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7072:	bf00      	nop
    7074:	20004bf4 	.word	0x20004bf4

00007078 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    7078:	4b06      	ldr	r3, [pc, #24]	; (7094 <SEGGER_RTT_HasDataUp+0x1c>)
    707a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    707e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    7082:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    7084:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7088:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    708c:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    708e:	1a80      	subs	r0, r0, r2
    7090:	4770      	bx	lr
    7092:	bf00      	nop
    7094:	20004bf4 	.word	0x20004bf4

00007098 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    7098:	4b03      	ldr	r3, [pc, #12]	; (70a8 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    709a:	e000      	b.n	709e <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    709c:	3318      	adds	r3, #24
	while (dev < __device_end) {
    709e:	4a03      	ldr	r2, [pc, #12]	; (70ac <z_device_state_init+0x14>)
    70a0:	4293      	cmp	r3, r2
    70a2:	d3fb      	bcc.n	709c <z_device_state_init+0x4>
	}
}
    70a4:	4770      	bx	lr
    70a6:	bf00      	nop
    70a8:	0000be94 	.word	0x0000be94
    70ac:	0000bf0c 	.word	0x0000bf0c

000070b0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    70b0:	b570      	push	{r4, r5, r6, lr}
    70b2:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    70b4:	4b11      	ldr	r3, [pc, #68]	; (70fc <z_sys_init_run_level+0x4c>)
    70b6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    70ba:	e009      	b.n	70d0 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    70bc:	4240      	negs	r0, r0
    70be:	e017      	b.n	70f0 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    70c0:	68eb      	ldr	r3, [r5, #12]
    70c2:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    70c4:	68ea      	ldr	r2, [r5, #12]
    70c6:	7853      	ldrb	r3, [r2, #1]
    70c8:	f043 0301 	orr.w	r3, r3, #1
    70cc:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    70ce:	3408      	adds	r4, #8
    70d0:	1c73      	adds	r3, r6, #1
    70d2:	4a0a      	ldr	r2, [pc, #40]	; (70fc <z_sys_init_run_level+0x4c>)
    70d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70d8:	42a3      	cmp	r3, r4
    70da:	d90d      	bls.n	70f8 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    70dc:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    70de:	6823      	ldr	r3, [r4, #0]
    70e0:	4628      	mov	r0, r5
    70e2:	4798      	blx	r3
		if (dev != NULL) {
    70e4:	2d00      	cmp	r5, #0
    70e6:	d0f2      	beq.n	70ce <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    70e8:	2800      	cmp	r0, #0
    70ea:	d0eb      	beq.n	70c4 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    70ec:	2800      	cmp	r0, #0
    70ee:	dbe5      	blt.n	70bc <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    70f0:	28ff      	cmp	r0, #255	; 0xff
    70f2:	dde5      	ble.n	70c0 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    70f4:	20ff      	movs	r0, #255	; 0xff
    70f6:	e7e3      	b.n	70c0 <z_sys_init_run_level+0x10>
		}
	}
}
    70f8:	bd70      	pop	{r4, r5, r6, pc}
    70fa:	bf00      	nop
    70fc:	0000d8a0 	.word	0x0000d8a0

00007100 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    7100:	2804      	cmp	r0, #4
    7102:	d80c      	bhi.n	711e <reason_to_str+0x1e>
    7104:	e8df f000 	tbb	[pc, r0]
    7108:	07050d03 	.word	0x07050d03
    710c:	09          	.byte	0x09
    710d:	00          	.byte	0x00
    710e:	4806      	ldr	r0, [pc, #24]	; (7128 <reason_to_str+0x28>)
    7110:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    7112:	4806      	ldr	r0, [pc, #24]	; (712c <reason_to_str+0x2c>)
    7114:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    7116:	4806      	ldr	r0, [pc, #24]	; (7130 <reason_to_str+0x30>)
    7118:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    711a:	4806      	ldr	r0, [pc, #24]	; (7134 <reason_to_str+0x34>)
    711c:	4770      	bx	lr
	default:
		return "Unknown error";
    711e:	4806      	ldr	r0, [pc, #24]	; (7138 <reason_to_str+0x38>)
    7120:	4770      	bx	lr
		return "Unhandled interrupt";
    7122:	4806      	ldr	r0, [pc, #24]	; (713c <reason_to_str+0x3c>)
	}
}
    7124:	4770      	bx	lr
    7126:	bf00      	nop
    7128:	0000d908 	.word	0x0000d908
    712c:	0000d8dc 	.word	0x0000d8dc
    7130:	0000d8ec 	.word	0x0000d8ec
    7134:	0000d8f8 	.word	0x0000d8f8
    7138:	0000d8b8 	.word	0x0000d8b8
    713c:	0000d8c8 	.word	0x0000d8c8

00007140 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    7140:	b130      	cbz	r0, 7150 <thread_name_get+0x10>
{
    7142:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    7144:	f004 fd70 	bl	bc28 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    7148:	b120      	cbz	r0, 7154 <thread_name_get+0x14>
    714a:	7803      	ldrb	r3, [r0, #0]
    714c:	b123      	cbz	r3, 7158 <thread_name_get+0x18>
}
    714e:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    7150:	4802      	ldr	r0, [pc, #8]	; (715c <thread_name_get+0x1c>)
}
    7152:	4770      	bx	lr
		thread_name = "unknown";
    7154:	4801      	ldr	r0, [pc, #4]	; (715c <thread_name_get+0x1c>)
    7156:	e7fa      	b.n	714e <thread_name_get+0xe>
    7158:	4800      	ldr	r0, [pc, #0]	; (715c <thread_name_get+0x1c>)
	return thread_name;
    715a:	e7f8      	b.n	714e <thread_name_get+0xe>
    715c:	0000d918 	.word	0x0000d918

00007160 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7160:	b5f0      	push	{r4, r5, r6, r7, lr}
    7162:	b087      	sub	sp, #28
    7164:	4604      	mov	r4, r0
    7166:	460e      	mov	r6, r1
	__asm__ volatile(
    7168:	f04f 0320 	mov.w	r3, #32
    716c:	f3ef 8711 	mrs	r7, BASEPRI
    7170:	f383 8812 	msr	BASEPRI_MAX, r3
    7174:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    7178:	f002 f9d2 	bl	9520 <z_impl_z_current_get>
    717c:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    717e:	4620      	mov	r0, r4
    7180:	f7ff ffbe 	bl	7100 <reason_to_str>
    7184:	2300      	movs	r3, #0
    7186:	9305      	str	r3, [sp, #20]
    7188:	9004      	str	r0, [sp, #16]
    718a:	9403      	str	r4, [sp, #12]
    718c:	4a22      	ldr	r2, [pc, #136]	; (7218 <z_fatal_error+0xb8>)
    718e:	9202      	str	r2, [sp, #8]
    7190:	9301      	str	r3, [sp, #4]
    7192:	9300      	str	r3, [sp, #0]
    7194:	2201      	movs	r2, #1
    7196:	4921      	ldr	r1, [pc, #132]	; (721c <z_fatal_error+0xbc>)
    7198:	4618      	mov	r0, r3
    719a:	f004 fcf0 	bl	bb7e <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    719e:	b11e      	cbz	r6, 71a8 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    71a0:	69f3      	ldr	r3, [r6, #28]
    71a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    71a6:	b9eb      	cbnz	r3, 71e4 <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    71a8:	4628      	mov	r0, r5
    71aa:	f7ff ffc9 	bl	7140 <thread_name_get>
    71ae:	9004      	str	r0, [sp, #16]
    71b0:	9503      	str	r5, [sp, #12]
    71b2:	4b1b      	ldr	r3, [pc, #108]	; (7220 <z_fatal_error+0xc0>)
    71b4:	9302      	str	r3, [sp, #8]
    71b6:	2000      	movs	r0, #0
    71b8:	9001      	str	r0, [sp, #4]
    71ba:	9000      	str	r0, [sp, #0]
    71bc:	4603      	mov	r3, r0
    71be:	2201      	movs	r2, #1
    71c0:	4916      	ldr	r1, [pc, #88]	; (721c <z_fatal_error+0xbc>)
    71c2:	f004 fcdc 	bl	bb7e <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    71c6:	4631      	mov	r1, r6
    71c8:	4620      	mov	r0, r4
    71ca:	f7fe fbd3 	bl	5974 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    71ce:	2c04      	cmp	r4, #4
    71d0:	d013      	beq.n	71fa <z_fatal_error+0x9a>
	__asm__ volatile(
    71d2:	f387 8811 	msr	BASEPRI, r7
    71d6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    71da:	4628      	mov	r0, r5
    71dc:	f7fc fb42 	bl	3864 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    71e0:	b007      	add	sp, #28
    71e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
    71e4:	4b0f      	ldr	r3, [pc, #60]	; (7224 <z_fatal_error+0xc4>)
    71e6:	9302      	str	r3, [sp, #8]
    71e8:	2000      	movs	r0, #0
    71ea:	9001      	str	r0, [sp, #4]
    71ec:	9000      	str	r0, [sp, #0]
    71ee:	4603      	mov	r3, r0
    71f0:	2201      	movs	r2, #1
    71f2:	490a      	ldr	r1, [pc, #40]	; (721c <z_fatal_error+0xbc>)
    71f4:	f004 fcc3 	bl	bb7e <z_log_msg2_runtime_create>
    71f8:	e7d6      	b.n	71a8 <z_fatal_error+0x48>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    71fa:	4c0b      	ldr	r4, [pc, #44]	; (7228 <z_fatal_error+0xc8>)
    71fc:	238f      	movs	r3, #143	; 0x8f
    71fe:	4622      	mov	r2, r4
    7200:	490a      	ldr	r1, [pc, #40]	; (722c <z_fatal_error+0xcc>)
    7202:	480b      	ldr	r0, [pc, #44]	; (7230 <z_fatal_error+0xd0>)
    7204:	f003 fb90 	bl	a928 <assert_print>
    7208:	480a      	ldr	r0, [pc, #40]	; (7234 <z_fatal_error+0xd4>)
    720a:	f003 fb8d 	bl	a928 <assert_print>
    720e:	218f      	movs	r1, #143	; 0x8f
    7210:	4620      	mov	r0, r4
    7212:	f003 fb82 	bl	a91a <assert_post_action>
    7216:	e7dc      	b.n	71d2 <z_fatal_error+0x72>
    7218:	0000d920 	.word	0x0000d920
    721c:	0000c0b4 	.word	0x0000c0b4
    7220:	0000d96c 	.word	0x0000d96c
    7224:	0000d948 	.word	0x0000d948
    7228:	0000d984 	.word	0x0000d984
    722c:	0000d9a8 	.word	0x0000d9a8
    7230:	0000c294 	.word	0x0000c294
    7234:	0000d9c8 	.word	0x0000d9c8

00007238 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    7238:	b510      	push	{r4, lr}
    723a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    723c:	4c11      	ldr	r4, [pc, #68]	; (7284 <init_idle_thread+0x4c>)
    723e:	23b0      	movs	r3, #176	; 0xb0
    7240:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7244:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    7248:	4b0f      	ldr	r3, [pc, #60]	; (7288 <init_idle_thread+0x50>)
    724a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    724e:	4a0f      	ldr	r2, [pc, #60]	; (728c <init_idle_thread+0x54>)
    7250:	9205      	str	r2, [sp, #20]
    7252:	2201      	movs	r2, #1
    7254:	9204      	str	r2, [sp, #16]
    7256:	220f      	movs	r2, #15
    7258:	9203      	str	r2, [sp, #12]
    725a:	2200      	movs	r2, #0
    725c:	9202      	str	r2, [sp, #8]
    725e:	9201      	str	r2, [sp, #4]
    7260:	9300      	str	r3, [sp, #0]
    7262:	4b0b      	ldr	r3, [pc, #44]	; (7290 <init_idle_thread+0x58>)
    7264:	f44f 72a0 	mov.w	r2, #320	; 0x140
    7268:	490a      	ldr	r1, [pc, #40]	; (7294 <init_idle_thread+0x5c>)
    726a:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    726e:	fb0c 1100 	mla	r1, ip, r0, r1
    7272:	4620      	mov	r0, r4
    7274:	f000 fa76 	bl	7764 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7278:	7b63      	ldrb	r3, [r4, #13]
    727a:	f023 0304 	bic.w	r3, r3, #4
    727e:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    7280:	b006      	add	sp, #24
    7282:	bd10      	pop	{r4, pc}
    7284:	20004410 	.word	0x20004410
    7288:	200050ac 	.word	0x200050ac
    728c:	0000da00 	.word	0x0000da00
    7290:	00007a79 	.word	0x00007a79
    7294:	20005f60 	.word	0x20005f60

00007298 <bg_thread_main>:
{
    7298:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    729a:	4b0a      	ldr	r3, [pc, #40]	; (72c4 <bg_thread_main+0x2c>)
    729c:	2201      	movs	r2, #1
    729e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    72a0:	2002      	movs	r0, #2
    72a2:	f7ff ff05 	bl	70b0 <z_sys_init_run_level>
	boot_banner();
    72a6:	f002 fe83 	bl	9fb0 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    72aa:	2003      	movs	r0, #3
    72ac:	f7ff ff00 	bl	70b0 <z_sys_init_run_level>
	z_init_static_threads();
    72b0:	f000 fb68 	bl	7984 <z_init_static_threads>
	main();
    72b4:	f7f9 f902 	bl	4bc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    72b8:	4a03      	ldr	r2, [pc, #12]	; (72c8 <bg_thread_main+0x30>)
    72ba:	7b13      	ldrb	r3, [r2, #12]
    72bc:	f023 0301 	bic.w	r3, r3, #1
    72c0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    72c2:	bd08      	pop	{r3, pc}
    72c4:	200052ea 	.word	0x200052ea
    72c8:	200044c0 	.word	0x200044c0

000072cc <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    72cc:	b508      	push	{r3, lr}
    72ce:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    72d0:	4a01      	ldr	r2, [pc, #4]	; (72d8 <switch_to_main_thread+0xc>)
    72d2:	4802      	ldr	r0, [pc, #8]	; (72dc <switch_to_main_thread+0x10>)
    72d4:	f7fb fe7a 	bl	2fcc <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    72d8:	00007299 	.word	0x00007299
    72dc:	200044c0 	.word	0x200044c0

000072e0 <z_bss_zero>:
{
    72e0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    72e2:	4803      	ldr	r0, [pc, #12]	; (72f0 <z_bss_zero+0x10>)
    72e4:	4a03      	ldr	r2, [pc, #12]	; (72f4 <z_bss_zero+0x14>)
    72e6:	1a12      	subs	r2, r2, r0
    72e8:	2100      	movs	r1, #0
    72ea:	f004 fc57 	bl	bb9c <z_early_memset>
}
    72ee:	bd08      	pop	{r3, pc}
    72f0:	20004240 	.word	0x20004240
    72f4:	200052ec 	.word	0x200052ec

000072f8 <z_init_cpu>:
{
    72f8:	b510      	push	{r4, lr}
    72fa:	4604      	mov	r4, r0
	init_idle_thread(id);
    72fc:	f7ff ff9c 	bl	7238 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    7300:	490b      	ldr	r1, [pc, #44]	; (7330 <z_init_cpu+0x38>)
    7302:	23b0      	movs	r3, #176	; 0xb0
    7304:	fb03 1104 	mla	r1, r3, r4, r1
    7308:	4a0a      	ldr	r2, [pc, #40]	; (7334 <z_init_cpu+0x3c>)
    730a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    730e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7312:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    7314:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    7316:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    731a:	4b07      	ldr	r3, [pc, #28]	; (7338 <z_init_cpu+0x40>)
    731c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    7320:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    7324:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    7328:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    732c:	6063      	str	r3, [r4, #4]
}
    732e:	bd10      	pop	{r4, pc}
    7330:	20004410 	.word	0x20004410
    7334:	200050ac 	.word	0x200050ac
    7338:	200060c0 	.word	0x200060c0

0000733c <prepare_multithreading>:
{
    733c:	b570      	push	{r4, r5, r6, lr}
    733e:	b086      	sub	sp, #24
	z_sched_init();
    7340:	f001 ff2a 	bl	9198 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    7344:	4d10      	ldr	r5, [pc, #64]	; (7388 <prepare_multithreading+0x4c>)
    7346:	4b11      	ldr	r3, [pc, #68]	; (738c <prepare_multithreading+0x50>)
    7348:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    734a:	4b11      	ldr	r3, [pc, #68]	; (7390 <prepare_multithreading+0x54>)
    734c:	9305      	str	r3, [sp, #20]
    734e:	2301      	movs	r3, #1
    7350:	9304      	str	r3, [sp, #16]
    7352:	2400      	movs	r4, #0
    7354:	9403      	str	r4, [sp, #12]
    7356:	9402      	str	r4, [sp, #8]
    7358:	9401      	str	r4, [sp, #4]
    735a:	9400      	str	r4, [sp, #0]
    735c:	4b0d      	ldr	r3, [pc, #52]	; (7394 <prepare_multithreading+0x58>)
    735e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7362:	490d      	ldr	r1, [pc, #52]	; (7398 <prepare_multithreading+0x5c>)
    7364:	4628      	mov	r0, r5
    7366:	f000 f9fd 	bl	7764 <z_setup_new_thread>
    736a:	4606      	mov	r6, r0
    736c:	7b6b      	ldrb	r3, [r5, #13]
    736e:	f023 0304 	bic.w	r3, r3, #4
    7372:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    7374:	4628      	mov	r0, r5
    7376:	f001 fa33 	bl	87e0 <z_ready_thread>
	z_init_cpu(0);
    737a:	4620      	mov	r0, r4
    737c:	f7ff ffbc 	bl	72f8 <z_init_cpu>
}
    7380:	4630      	mov	r0, r6
    7382:	b006      	add	sp, #24
    7384:	bd70      	pop	{r4, r5, r6, pc}
    7386:	bf00      	nop
    7388:	200044c0 	.word	0x200044c0
    738c:	200050ac 	.word	0x200050ac
    7390:	0000da08 	.word	0x0000da08
    7394:	00007299 	.word	0x00007299
    7398:	20005b40 	.word	0x20005b40

0000739c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    739c:	b500      	push	{lr}
    739e:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    73a0:	4b1f      	ldr	r3, [pc, #124]	; (7420 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    73a2:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    73a6:	4c1f      	ldr	r4, [pc, #124]	; (7424 <z_cstart+0x88>)
    73a8:	6963      	ldr	r3, [r4, #20]
    73aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    73ae:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    73b0:	23e0      	movs	r3, #224	; 0xe0
    73b2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    73b6:	2500      	movs	r5, #0
    73b8:	77e5      	strb	r5, [r4, #31]
    73ba:	7625      	strb	r5, [r4, #24]
    73bc:	7665      	strb	r5, [r4, #25]
    73be:	76a5      	strb	r5, [r4, #26]
    73c0:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    73c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    73c6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    73ca:	6263      	str	r3, [r4, #36]	; 0x24
    73cc:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    73d0:	f7fc f9b4 	bl	373c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    73d4:	f7fb fc7e 	bl	2cd4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    73d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    73dc:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    73de:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    73e0:	f7fc fb60 	bl	3aa4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    73e4:	f7fc fa58 	bl	3898 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    73e8:	f7fa fd98 	bl	1f1c <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    73ec:	2401      	movs	r4, #1
    73ee:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    73f2:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    73f6:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    73f8:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    73fa:	4668      	mov	r0, sp
    73fc:	f002 fdd2 	bl	9fa4 <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    7400:	4b09      	ldr	r3, [pc, #36]	; (7428 <z_cstart+0x8c>)
    7402:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7406:	f7ff fe47 	bl	7098 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    740a:	4628      	mov	r0, r5
    740c:	f7ff fe50 	bl	70b0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    7410:	4620      	mov	r0, r4
    7412:	f7ff fe4d 	bl	70b0 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    7416:	f7ff ff91 	bl	733c <prepare_multithreading>
    741a:	f7ff ff57 	bl	72cc <switch_to_main_thread>
    741e:	bf00      	nop
    7420:	200068e0 	.word	0x200068e0
    7424:	e000ed00 	.word	0xe000ed00
    7428:	200050ac 	.word	0x200050ac

0000742c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    742c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    742e:	4c10      	ldr	r4, [pc, #64]	; (7470 <init_mem_slab_module+0x44>)
	int rc = 0;
    7430:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7432:	e008      	b.n	7446 <init_mem_slab_module+0x1a>
    7434:	4b0f      	ldr	r3, [pc, #60]	; (7474 <init_mem_slab_module+0x48>)
    7436:	429c      	cmp	r4, r3
    7438:	d217      	bcs.n	746a <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    743a:	4620      	mov	r0, r4
    743c:	f004 fbb6 	bl	bbac <create_free_list>
		if (rc < 0) {
    7440:	1e05      	subs	r5, r0, #0
    7442:	db12      	blt.n	746a <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7444:	3420      	adds	r4, #32
    7446:	4b0b      	ldr	r3, [pc, #44]	; (7474 <init_mem_slab_module+0x48>)
    7448:	429c      	cmp	r4, r3
    744a:	d9f3      	bls.n	7434 <init_mem_slab_module+0x8>
    744c:	4e0a      	ldr	r6, [pc, #40]	; (7478 <init_mem_slab_module+0x4c>)
    744e:	233d      	movs	r3, #61	; 0x3d
    7450:	4632      	mov	r2, r6
    7452:	490a      	ldr	r1, [pc, #40]	; (747c <init_mem_slab_module+0x50>)
    7454:	480a      	ldr	r0, [pc, #40]	; (7480 <init_mem_slab_module+0x54>)
    7456:	f003 fa67 	bl	a928 <assert_print>
    745a:	480a      	ldr	r0, [pc, #40]	; (7484 <init_mem_slab_module+0x58>)
    745c:	f003 fa64 	bl	a928 <assert_print>
    7460:	213d      	movs	r1, #61	; 0x3d
    7462:	4630      	mov	r0, r6
    7464:	f003 fa59 	bl	a91a <assert_post_action>
    7468:	e7e4      	b.n	7434 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    746a:	4628      	mov	r0, r5
    746c:	bd70      	pop	{r4, r5, r6, pc}
    746e:	bf00      	nop
    7470:	200041c4 	.word	0x200041c4
    7474:	200041c4 	.word	0x200041c4
    7478:	0000da14 	.word	0x0000da14
    747c:	0000da3c 	.word	0x0000da3c
    7480:	0000c294 	.word	0x0000c294
    7484:	0000da5c 	.word	0x0000da5c

00007488 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    7488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    748c:	b082      	sub	sp, #8
    748e:	4604      	mov	r4, r0
    7490:	460e      	mov	r6, r1
    7492:	4690      	mov	r8, r2
    7494:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    7496:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    749a:	f04f 0320 	mov.w	r3, #32
    749e:	f3ef 8711 	mrs	r7, BASEPRI
    74a2:	f383 8812 	msr	BASEPRI_MAX, r3
    74a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    74aa:	4628      	mov	r0, r5
    74ac:	f000 f8d8 	bl	7660 <z_spin_lock_valid>
    74b0:	b1c0      	cbz	r0, 74e4 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    74b2:	4628      	mov	r0, r5
    74b4:	f000 f8f4 	bl	76a0 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    74b8:	69a1      	ldr	r1, [r4, #24]
    74ba:	b321      	cbz	r1, 7506 <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    74bc:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    74be:	69a3      	ldr	r3, [r4, #24]
    74c0:	681b      	ldr	r3, [r3, #0]
    74c2:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    74c4:	69e3      	ldr	r3, [r4, #28]
    74c6:	3301      	adds	r3, #1
    74c8:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    74ca:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    74cc:	4628      	mov	r0, r5
    74ce:	f000 f8d7 	bl	7680 <z_spin_unlock_valid>
    74d2:	b388      	cbz	r0, 7538 <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    74d4:	f387 8811 	msr	BASEPRI, r7
    74d8:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    74dc:	4620      	mov	r0, r4
    74de:	b002      	add	sp, #8
    74e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    74e4:	f8df a070 	ldr.w	sl, [pc, #112]	; 7558 <k_mem_slab_alloc+0xd0>
    74e8:	238e      	movs	r3, #142	; 0x8e
    74ea:	4652      	mov	r2, sl
    74ec:	491b      	ldr	r1, [pc, #108]	; (755c <k_mem_slab_alloc+0xd4>)
    74ee:	481c      	ldr	r0, [pc, #112]	; (7560 <k_mem_slab_alloc+0xd8>)
    74f0:	f003 fa1a 	bl	a928 <assert_print>
    74f4:	4629      	mov	r1, r5
    74f6:	481b      	ldr	r0, [pc, #108]	; (7564 <k_mem_slab_alloc+0xdc>)
    74f8:	f003 fa16 	bl	a928 <assert_print>
    74fc:	218e      	movs	r1, #142	; 0x8e
    74fe:	4650      	mov	r0, sl
    7500:	f003 fa0b 	bl	a91a <assert_post_action>
    7504:	e7d5      	b.n	74b2 <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    7506:	ea59 0308 	orrs.w	r3, r9, r8
    750a:	d104      	bne.n	7516 <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    750c:	2300      	movs	r3, #0
    750e:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    7510:	f06f 040b 	mvn.w	r4, #11
    7514:	e7da      	b.n	74cc <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    7516:	f8cd 8000 	str.w	r8, [sp]
    751a:	f8cd 9004 	str.w	r9, [sp, #4]
    751e:	4622      	mov	r2, r4
    7520:	4639      	mov	r1, r7
    7522:	4628      	mov	r0, r5
    7524:	f001 fb38 	bl	8b98 <z_pend_curr>
		if (result == 0) {
    7528:	4604      	mov	r4, r0
    752a:	2800      	cmp	r0, #0
    752c:	d1d6      	bne.n	74dc <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    752e:	4b0e      	ldr	r3, [pc, #56]	; (7568 <k_mem_slab_alloc+0xe0>)
    7530:	689b      	ldr	r3, [r3, #8]
    7532:	695b      	ldr	r3, [r3, #20]
    7534:	6033      	str	r3, [r6, #0]
		return result;
    7536:	e7d1      	b.n	74dc <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7538:	4e07      	ldr	r6, [pc, #28]	; (7558 <k_mem_slab_alloc+0xd0>)
    753a:	23b9      	movs	r3, #185	; 0xb9
    753c:	4632      	mov	r2, r6
    753e:	490b      	ldr	r1, [pc, #44]	; (756c <k_mem_slab_alloc+0xe4>)
    7540:	4807      	ldr	r0, [pc, #28]	; (7560 <k_mem_slab_alloc+0xd8>)
    7542:	f003 f9f1 	bl	a928 <assert_print>
    7546:	4629      	mov	r1, r5
    7548:	4809      	ldr	r0, [pc, #36]	; (7570 <k_mem_slab_alloc+0xe8>)
    754a:	f003 f9ed 	bl	a928 <assert_print>
    754e:	21b9      	movs	r1, #185	; 0xb9
    7550:	4630      	mov	r0, r6
    7552:	f003 f9e2 	bl	a91a <assert_post_action>
    7556:	e7bd      	b.n	74d4 <k_mem_slab_alloc+0x4c>
    7558:	0000c440 	.word	0x0000c440
    755c:	0000c4a0 	.word	0x0000c4a0
    7560:	0000c294 	.word	0x0000c294
    7564:	0000c4b8 	.word	0x0000c4b8
    7568:	200050ac 	.word	0x200050ac
    756c:	0000c470 	.word	0x0000c470
    7570:	0000c488 	.word	0x0000c488

00007574 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    7574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7578:	4604      	mov	r4, r0
    757a:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    757c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    7580:	f04f 0320 	mov.w	r3, #32
    7584:	f3ef 8711 	mrs	r7, BASEPRI
    7588:	f383 8812 	msr	BASEPRI_MAX, r3
    758c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7590:	4630      	mov	r0, r6
    7592:	f000 f865 	bl	7660 <z_spin_lock_valid>
    7596:	b1b0      	cbz	r0, 75c6 <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    7598:	4630      	mov	r0, r6
    759a:	f000 f881 	bl	76a0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    759e:	69a3      	ldr	r3, [r4, #24]
    75a0:	b313      	cbz	r3, 75e8 <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    75a2:	682b      	ldr	r3, [r5, #0]
    75a4:	69a2      	ldr	r2, [r4, #24]
    75a6:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    75a8:	682b      	ldr	r3, [r5, #0]
    75aa:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    75ac:	69e3      	ldr	r3, [r4, #28]
    75ae:	3b01      	subs	r3, #1
    75b0:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    75b2:	4630      	mov	r0, r6
    75b4:	f000 f864 	bl	7680 <z_spin_unlock_valid>
    75b8:	b338      	cbz	r0, 760a <k_mem_slab_free+0x96>
	__asm__ volatile(
    75ba:	f387 8811 	msr	BASEPRI, r7
    75be:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    75c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    75c6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 762c <k_mem_slab_free+0xb8>
    75ca:	238e      	movs	r3, #142	; 0x8e
    75cc:	4642      	mov	r2, r8
    75ce:	4918      	ldr	r1, [pc, #96]	; (7630 <k_mem_slab_free+0xbc>)
    75d0:	4818      	ldr	r0, [pc, #96]	; (7634 <k_mem_slab_free+0xc0>)
    75d2:	f003 f9a9 	bl	a928 <assert_print>
    75d6:	4631      	mov	r1, r6
    75d8:	4817      	ldr	r0, [pc, #92]	; (7638 <k_mem_slab_free+0xc4>)
    75da:	f003 f9a5 	bl	a928 <assert_print>
    75de:	218e      	movs	r1, #142	; 0x8e
    75e0:	4640      	mov	r0, r8
    75e2:	f003 f99a 	bl	a91a <assert_post_action>
    75e6:	e7d7      	b.n	7598 <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    75e8:	4620      	mov	r0, r4
    75ea:	f001 fd71 	bl	90d0 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    75ee:	2800      	cmp	r0, #0
    75f0:	d0d7      	beq.n	75a2 <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    75f2:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    75f4:	2100      	movs	r1, #0
    75f6:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    75fa:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    75fc:	f001 f8f0 	bl	87e0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    7600:	4639      	mov	r1, r7
    7602:	4630      	mov	r0, r6
    7604:	f000 fe48 	bl	8298 <z_reschedule>
			return;
    7608:	e7db      	b.n	75c2 <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    760a:	4c08      	ldr	r4, [pc, #32]	; (762c <k_mem_slab_free+0xb8>)
    760c:	23b9      	movs	r3, #185	; 0xb9
    760e:	4622      	mov	r2, r4
    7610:	490a      	ldr	r1, [pc, #40]	; (763c <k_mem_slab_free+0xc8>)
    7612:	4808      	ldr	r0, [pc, #32]	; (7634 <k_mem_slab_free+0xc0>)
    7614:	f003 f988 	bl	a928 <assert_print>
    7618:	4631      	mov	r1, r6
    761a:	4809      	ldr	r0, [pc, #36]	; (7640 <k_mem_slab_free+0xcc>)
    761c:	f003 f984 	bl	a928 <assert_print>
    7620:	21b9      	movs	r1, #185	; 0xb9
    7622:	4620      	mov	r0, r4
    7624:	f003 f979 	bl	a91a <assert_post_action>
    7628:	e7c7      	b.n	75ba <k_mem_slab_free+0x46>
    762a:	bf00      	nop
    762c:	0000c440 	.word	0x0000c440
    7630:	0000c4a0 	.word	0x0000c4a0
    7634:	0000c294 	.word	0x0000c294
    7638:	0000c4b8 	.word	0x0000c4b8
    763c:	0000c470 	.word	0x0000c470
    7640:	0000c488 	.word	0x0000c488

00007644 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    7644:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7646:	ea53 0102 	orrs.w	r1, r3, r2
    764a:	d102      	bne.n	7652 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    764c:	f004 faee 	bl	bc2c <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    7650:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7652:	4902      	ldr	r1, [pc, #8]	; (765c <schedule_new_thread+0x18>)
    7654:	3018      	adds	r0, #24
    7656:	f002 f86d 	bl	9734 <z_add_timeout>
    765a:	e7f9      	b.n	7650 <schedule_new_thread+0xc>
    765c:	0000893d 	.word	0x0000893d

00007660 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    7660:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    7662:	b13b      	cbz	r3, 7674 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    7664:	f003 0303 	and.w	r3, r3, #3
    7668:	4a04      	ldr	r2, [pc, #16]	; (767c <z_spin_lock_valid+0x1c>)
    766a:	7d12      	ldrb	r2, [r2, #20]
    766c:	4293      	cmp	r3, r2
    766e:	d003      	beq.n	7678 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    7670:	2001      	movs	r0, #1
    7672:	4770      	bx	lr
    7674:	2001      	movs	r0, #1
    7676:	4770      	bx	lr
			return false;
    7678:	2000      	movs	r0, #0
}
    767a:	4770      	bx	lr
    767c:	200050ac 	.word	0x200050ac

00007680 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7680:	6801      	ldr	r1, [r0, #0]
    7682:	4a06      	ldr	r2, [pc, #24]	; (769c <z_spin_unlock_valid+0x1c>)
    7684:	7d13      	ldrb	r3, [r2, #20]
    7686:	6892      	ldr	r2, [r2, #8]
    7688:	4313      	orrs	r3, r2
    768a:	4299      	cmp	r1, r3
    768c:	d103      	bne.n	7696 <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    768e:	2300      	movs	r3, #0
    7690:	6003      	str	r3, [r0, #0]
	return true;
    7692:	2001      	movs	r0, #1
    7694:	4770      	bx	lr
		return false;
    7696:	2000      	movs	r0, #0
}
    7698:	4770      	bx	lr
    769a:	bf00      	nop
    769c:	200050ac 	.word	0x200050ac

000076a0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    76a0:	4a02      	ldr	r2, [pc, #8]	; (76ac <z_spin_lock_set_owner+0xc>)
    76a2:	7d13      	ldrb	r3, [r2, #20]
    76a4:	6892      	ldr	r2, [r2, #8]
    76a6:	4313      	orrs	r3, r2
    76a8:	6003      	str	r3, [r0, #0]
}
    76aa:	4770      	bx	lr
    76ac:	200050ac 	.word	0x200050ac

000076b0 <z_thread_monitor_exit>:
{
    76b0:	b570      	push	{r4, r5, r6, lr}
    76b2:	4604      	mov	r4, r0
	__asm__ volatile(
    76b4:	f04f 0320 	mov.w	r3, #32
    76b8:	f3ef 8511 	mrs	r5, BASEPRI
    76bc:	f383 8812 	msr	BASEPRI_MAX, r3
    76c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    76c4:	481f      	ldr	r0, [pc, #124]	; (7744 <z_thread_monitor_exit+0x94>)
    76c6:	f7ff ffcb 	bl	7660 <z_spin_lock_valid>
    76ca:	b150      	cbz	r0, 76e2 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    76cc:	481d      	ldr	r0, [pc, #116]	; (7744 <z_thread_monitor_exit+0x94>)
    76ce:	f7ff ffe7 	bl	76a0 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    76d2:	4b1d      	ldr	r3, [pc, #116]	; (7748 <z_thread_monitor_exit+0x98>)
    76d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    76d6:	42a3      	cmp	r3, r4
    76d8:	d114      	bne.n	7704 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    76da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    76dc:	4b1a      	ldr	r3, [pc, #104]	; (7748 <z_thread_monitor_exit+0x98>)
    76de:	629a      	str	r2, [r3, #40]	; 0x28
    76e0:	e017      	b.n	7712 <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    76e2:	4e1a      	ldr	r6, [pc, #104]	; (774c <z_thread_monitor_exit+0x9c>)
    76e4:	238e      	movs	r3, #142	; 0x8e
    76e6:	4632      	mov	r2, r6
    76e8:	4919      	ldr	r1, [pc, #100]	; (7750 <z_thread_monitor_exit+0xa0>)
    76ea:	481a      	ldr	r0, [pc, #104]	; (7754 <z_thread_monitor_exit+0xa4>)
    76ec:	f003 f91c 	bl	a928 <assert_print>
    76f0:	4914      	ldr	r1, [pc, #80]	; (7744 <z_thread_monitor_exit+0x94>)
    76f2:	4819      	ldr	r0, [pc, #100]	; (7758 <z_thread_monitor_exit+0xa8>)
    76f4:	f003 f918 	bl	a928 <assert_print>
    76f8:	218e      	movs	r1, #142	; 0x8e
    76fa:	4630      	mov	r0, r6
    76fc:	f003 f90d 	bl	a91a <assert_post_action>
    7700:	e7e4      	b.n	76cc <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    7702:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    7704:	b113      	cbz	r3, 770c <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    7706:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    7708:	42a2      	cmp	r2, r4
    770a:	d1fa      	bne.n	7702 <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    770c:	b10b      	cbz	r3, 7712 <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    770e:	6f22      	ldr	r2, [r4, #112]	; 0x70
    7710:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7712:	480c      	ldr	r0, [pc, #48]	; (7744 <z_thread_monitor_exit+0x94>)
    7714:	f7ff ffb4 	bl	7680 <z_spin_unlock_valid>
    7718:	b120      	cbz	r0, 7724 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    771a:	f385 8811 	msr	BASEPRI, r5
    771e:	f3bf 8f6f 	isb	sy
}
    7722:	bd70      	pop	{r4, r5, r6, pc}
    7724:	4c09      	ldr	r4, [pc, #36]	; (774c <z_thread_monitor_exit+0x9c>)
    7726:	23b9      	movs	r3, #185	; 0xb9
    7728:	4622      	mov	r2, r4
    772a:	490c      	ldr	r1, [pc, #48]	; (775c <z_thread_monitor_exit+0xac>)
    772c:	4809      	ldr	r0, [pc, #36]	; (7754 <z_thread_monitor_exit+0xa4>)
    772e:	f003 f8fb 	bl	a928 <assert_print>
    7732:	4904      	ldr	r1, [pc, #16]	; (7744 <z_thread_monitor_exit+0x94>)
    7734:	480a      	ldr	r0, [pc, #40]	; (7760 <z_thread_monitor_exit+0xb0>)
    7736:	f003 f8f7 	bl	a928 <assert_print>
    773a:	21b9      	movs	r1, #185	; 0xb9
    773c:	4620      	mov	r0, r4
    773e:	f003 f8ec 	bl	a91a <assert_post_action>
    7742:	e7ea      	b.n	771a <z_thread_monitor_exit+0x6a>
    7744:	200050d8 	.word	0x200050d8
    7748:	200050ac 	.word	0x200050ac
    774c:	0000c440 	.word	0x0000c440
    7750:	0000c4a0 	.word	0x0000c4a0
    7754:	0000c294 	.word	0x0000c294
    7758:	0000c4b8 	.word	0x0000c4b8
    775c:	0000c470 	.word	0x0000c470
    7760:	0000c488 	.word	0x0000c488

00007764 <z_setup_new_thread>:
{
    7764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7768:	b085      	sub	sp, #20
    776a:	4604      	mov	r4, r0
    776c:	460e      	mov	r6, r1
    776e:	4690      	mov	r8, r2
    7770:	461d      	mov	r5, r3
    7772:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    7776:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    777a:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    777c:	2f0f      	cmp	r7, #15
    777e:	d05e      	beq.n	783e <z_setup_new_thread+0xda>
    7780:	f107 0310 	add.w	r3, r7, #16
    7784:	2b1e      	cmp	r3, #30
    7786:	d85e      	bhi.n	7846 <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    7788:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    778c:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    778e:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    7790:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7792:	2204      	movs	r2, #4
    7794:	4639      	mov	r1, r7
    7796:	4620      	mov	r0, r4
    7798:	f004 fa4c 	bl	bc34 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    779c:	4642      	mov	r2, r8
    779e:	4631      	mov	r1, r6
    77a0:	4620      	mov	r0, r4
    77a2:	f004 fa29 	bl	bbf8 <setup_thread_stack>
    77a6:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    77a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    77aa:	9302      	str	r3, [sp, #8]
    77ac:	f8cd a004 	str.w	sl, [sp, #4]
    77b0:	f8cd b000 	str.w	fp, [sp]
    77b4:	462b      	mov	r3, r5
    77b6:	4602      	mov	r2, r0
    77b8:	4631      	mov	r1, r6
    77ba:	4620      	mov	r0, r4
    77bc:	f7fb fbbc 	bl	2f38 <arch_new_thread>
	new_thread->init_data = NULL;
    77c0:	2300      	movs	r3, #0
    77c2:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    77c4:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    77c6:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    77ca:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    77ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    77d0:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    77d2:	f04f 0320 	mov.w	r3, #32
    77d6:	f3ef 8611 	mrs	r6, BASEPRI
    77da:	f383 8812 	msr	BASEPRI_MAX, r3
    77de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    77e2:	4837      	ldr	r0, [pc, #220]	; (78c0 <z_setup_new_thread+0x15c>)
    77e4:	f7ff ff3c 	bl	7660 <z_spin_lock_valid>
    77e8:	2800      	cmp	r0, #0
    77ea:	d042      	beq.n	7872 <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    77ec:	4d34      	ldr	r5, [pc, #208]	; (78c0 <z_setup_new_thread+0x15c>)
    77ee:	4628      	mov	r0, r5
    77f0:	f7ff ff56 	bl	76a0 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    77f4:	4b33      	ldr	r3, [pc, #204]	; (78c4 <z_setup_new_thread+0x160>)
    77f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    77f8:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    77fa:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    77fc:	4628      	mov	r0, r5
    77fe:	f7ff ff3f 	bl	7680 <z_spin_unlock_valid>
    7802:	2800      	cmp	r0, #0
    7804:	d045      	beq.n	7892 <z_setup_new_thread+0x12e>
	__asm__ volatile(
    7806:	f386 8811 	msr	BASEPRI, r6
    780a:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    780e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    7810:	2b00      	cmp	r3, #0
    7812:	d04e      	beq.n	78b2 <z_setup_new_thread+0x14e>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    7814:	221f      	movs	r2, #31
    7816:	4619      	mov	r1, r3
    7818:	f104 0074 	add.w	r0, r4, #116	; 0x74
    781c:	f004 fad8 	bl	bdd0 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    7820:	2300      	movs	r3, #0
    7822:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    7826:	4b27      	ldr	r3, [pc, #156]	; (78c4 <z_setup_new_thread+0x160>)
    7828:	689b      	ldr	r3, [r3, #8]
    782a:	2b00      	cmp	r3, #0
    782c:	d045      	beq.n	78ba <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    782e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    7832:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    7836:	4638      	mov	r0, r7
    7838:	b005      	add	sp, #20
    783a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    783e:	4b22      	ldr	r3, [pc, #136]	; (78c8 <z_setup_new_thread+0x164>)
    7840:	429d      	cmp	r5, r3
    7842:	d19d      	bne.n	7780 <z_setup_new_thread+0x1c>
    7844:	e7a0      	b.n	7788 <z_setup_new_thread+0x24>
    7846:	f8df 9084 	ldr.w	r9, [pc, #132]	; 78cc <z_setup_new_thread+0x168>
    784a:	f240 13ff 	movw	r3, #511	; 0x1ff
    784e:	464a      	mov	r2, r9
    7850:	491f      	ldr	r1, [pc, #124]	; (78d0 <z_setup_new_thread+0x16c>)
    7852:	4820      	ldr	r0, [pc, #128]	; (78d4 <z_setup_new_thread+0x170>)
    7854:	f003 f868 	bl	a928 <assert_print>
    7858:	f06f 030f 	mvn.w	r3, #15
    785c:	220e      	movs	r2, #14
    785e:	4639      	mov	r1, r7
    7860:	481d      	ldr	r0, [pc, #116]	; (78d8 <z_setup_new_thread+0x174>)
    7862:	f003 f861 	bl	a928 <assert_print>
    7866:	f240 11ff 	movw	r1, #511	; 0x1ff
    786a:	4648      	mov	r0, r9
    786c:	f003 f855 	bl	a91a <assert_post_action>
    7870:	e78a      	b.n	7788 <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7872:	4d1a      	ldr	r5, [pc, #104]	; (78dc <z_setup_new_thread+0x178>)
    7874:	238e      	movs	r3, #142	; 0x8e
    7876:	462a      	mov	r2, r5
    7878:	4919      	ldr	r1, [pc, #100]	; (78e0 <z_setup_new_thread+0x17c>)
    787a:	4816      	ldr	r0, [pc, #88]	; (78d4 <z_setup_new_thread+0x170>)
    787c:	f003 f854 	bl	a928 <assert_print>
    7880:	490f      	ldr	r1, [pc, #60]	; (78c0 <z_setup_new_thread+0x15c>)
    7882:	4818      	ldr	r0, [pc, #96]	; (78e4 <z_setup_new_thread+0x180>)
    7884:	f003 f850 	bl	a928 <assert_print>
    7888:	218e      	movs	r1, #142	; 0x8e
    788a:	4628      	mov	r0, r5
    788c:	f003 f845 	bl	a91a <assert_post_action>
    7890:	e7ac      	b.n	77ec <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7892:	4d12      	ldr	r5, [pc, #72]	; (78dc <z_setup_new_thread+0x178>)
    7894:	23b9      	movs	r3, #185	; 0xb9
    7896:	462a      	mov	r2, r5
    7898:	4913      	ldr	r1, [pc, #76]	; (78e8 <z_setup_new_thread+0x184>)
    789a:	480e      	ldr	r0, [pc, #56]	; (78d4 <z_setup_new_thread+0x170>)
    789c:	f003 f844 	bl	a928 <assert_print>
    78a0:	4907      	ldr	r1, [pc, #28]	; (78c0 <z_setup_new_thread+0x15c>)
    78a2:	4812      	ldr	r0, [pc, #72]	; (78ec <z_setup_new_thread+0x188>)
    78a4:	f003 f840 	bl	a928 <assert_print>
    78a8:	21b9      	movs	r1, #185	; 0xb9
    78aa:	4628      	mov	r0, r5
    78ac:	f003 f835 	bl	a91a <assert_post_action>
    78b0:	e7a9      	b.n	7806 <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    78b2:	2300      	movs	r3, #0
    78b4:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    78b8:	e7b5      	b.n	7826 <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    78ba:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    78be:	e7ba      	b.n	7836 <z_setup_new_thread+0xd2>
    78c0:	200050d8 	.word	0x200050d8
    78c4:	200050ac 	.word	0x200050ac
    78c8:	00007a79 	.word	0x00007a79
    78cc:	0000da7c 	.word	0x0000da7c
    78d0:	0000dad4 	.word	0x0000dad4
    78d4:	0000c294 	.word	0x0000c294
    78d8:	0000db54 	.word	0x0000db54
    78dc:	0000c440 	.word	0x0000c440
    78e0:	0000c4a0 	.word	0x0000c4a0
    78e4:	0000c4b8 	.word	0x0000c4b8
    78e8:	0000c470 	.word	0x0000c470
    78ec:	0000c488 	.word	0x0000c488

000078f0 <z_impl_k_thread_create>:
{
    78f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    78f4:	b086      	sub	sp, #24
    78f6:	4604      	mov	r4, r0
    78f8:	460d      	mov	r5, r1
    78fa:	4616      	mov	r6, r2
    78fc:	461f      	mov	r7, r3
    78fe:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    7902:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7906:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    790a:	b9db      	cbnz	r3, 7944 <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    790c:	2300      	movs	r3, #0
    790e:	9305      	str	r3, [sp, #20]
    7910:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7912:	9304      	str	r3, [sp, #16]
    7914:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7916:	9303      	str	r3, [sp, #12]
    7918:	9b10      	ldr	r3, [sp, #64]	; 0x40
    791a:	9302      	str	r3, [sp, #8]
    791c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    791e:	9301      	str	r3, [sp, #4]
    7920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7922:	9300      	str	r3, [sp, #0]
    7924:	463b      	mov	r3, r7
    7926:	4632      	mov	r2, r6
    7928:	4629      	mov	r1, r5
    792a:	4620      	mov	r0, r4
    792c:	f7ff ff1a 	bl	7764 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    7930:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    7934:	bf08      	it	eq
    7936:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    793a:	d115      	bne.n	7968 <z_impl_k_thread_create+0x78>
}
    793c:	4620      	mov	r0, r4
    793e:	b006      	add	sp, #24
    7940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    7944:	f8df a02c 	ldr.w	sl, [pc, #44]	; 7974 <z_impl_k_thread_create+0x84>
    7948:	f240 236e 	movw	r3, #622	; 0x26e
    794c:	4652      	mov	r2, sl
    794e:	490a      	ldr	r1, [pc, #40]	; (7978 <z_impl_k_thread_create+0x88>)
    7950:	480a      	ldr	r0, [pc, #40]	; (797c <z_impl_k_thread_create+0x8c>)
    7952:	f002 ffe9 	bl	a928 <assert_print>
    7956:	480a      	ldr	r0, [pc, #40]	; (7980 <z_impl_k_thread_create+0x90>)
    7958:	f002 ffe6 	bl	a928 <assert_print>
    795c:	f240 216e 	movw	r1, #622	; 0x26e
    7960:	4650      	mov	r0, sl
    7962:	f002 ffda 	bl	a91a <assert_post_action>
    7966:	e7d1      	b.n	790c <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    7968:	464a      	mov	r2, r9
    796a:	4643      	mov	r3, r8
    796c:	4620      	mov	r0, r4
    796e:	f7ff fe69 	bl	7644 <schedule_new_thread>
    7972:	e7e3      	b.n	793c <z_impl_k_thread_create+0x4c>
    7974:	0000da7c 	.word	0x0000da7c
    7978:	0000db88 	.word	0x0000db88
    797c:	0000c294 	.word	0x0000c294
    7980:	0000db9c 	.word	0x0000db9c

00007984 <z_init_static_threads>:
{
    7984:	b530      	push	{r4, r5, lr}
    7986:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    7988:	4c35      	ldr	r4, [pc, #212]	; (7a60 <z_init_static_threads+0xdc>)
    798a:	e017      	b.n	79bc <z_init_static_threads+0x38>
    798c:	4b35      	ldr	r3, [pc, #212]	; (7a64 <z_init_static_threads+0xe0>)
    798e:	429c      	cmp	r4, r3
    7990:	d228      	bcs.n	79e4 <z_init_static_threads+0x60>
		z_setup_new_thread(
    7992:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7994:	9305      	str	r3, [sp, #20]
    7996:	6a23      	ldr	r3, [r4, #32]
    7998:	9304      	str	r3, [sp, #16]
    799a:	69e3      	ldr	r3, [r4, #28]
    799c:	9303      	str	r3, [sp, #12]
    799e:	69a3      	ldr	r3, [r4, #24]
    79a0:	9302      	str	r3, [sp, #8]
    79a2:	6963      	ldr	r3, [r4, #20]
    79a4:	9301      	str	r3, [sp, #4]
    79a6:	6923      	ldr	r3, [r4, #16]
    79a8:	9300      	str	r3, [sp, #0]
    79aa:	68e3      	ldr	r3, [r4, #12]
    79ac:	68a2      	ldr	r2, [r4, #8]
    79ae:	6861      	ldr	r1, [r4, #4]
    79b0:	6820      	ldr	r0, [r4, #0]
    79b2:	f7ff fed7 	bl	7764 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    79b6:	6823      	ldr	r3, [r4, #0]
    79b8:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    79ba:	3430      	adds	r4, #48	; 0x30
    79bc:	4b29      	ldr	r3, [pc, #164]	; (7a64 <z_init_static_threads+0xe0>)
    79be:	429c      	cmp	r4, r3
    79c0:	d9e4      	bls.n	798c <z_init_static_threads+0x8>
    79c2:	4d29      	ldr	r5, [pc, #164]	; (7a68 <z_init_static_threads+0xe4>)
    79c4:	f240 23d5 	movw	r3, #725	; 0x2d5
    79c8:	462a      	mov	r2, r5
    79ca:	4928      	ldr	r1, [pc, #160]	; (7a6c <z_init_static_threads+0xe8>)
    79cc:	4828      	ldr	r0, [pc, #160]	; (7a70 <z_init_static_threads+0xec>)
    79ce:	f002 ffab 	bl	a928 <assert_print>
    79d2:	4828      	ldr	r0, [pc, #160]	; (7a74 <z_init_static_threads+0xf0>)
    79d4:	f002 ffa8 	bl	a928 <assert_print>
    79d8:	f240 21d5 	movw	r1, #725	; 0x2d5
    79dc:	4628      	mov	r0, r5
    79de:	f002 ff9c 	bl	a91a <assert_post_action>
    79e2:	e7d3      	b.n	798c <z_init_static_threads+0x8>
	k_sched_lock();
    79e4:	f000 fca6 	bl	8334 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    79e8:	4c1d      	ldr	r4, [pc, #116]	; (7a60 <z_init_static_threads+0xdc>)
    79ea:	e000      	b.n	79ee <z_init_static_threads+0x6a>
    79ec:	3430      	adds	r4, #48	; 0x30
    79ee:	4b1d      	ldr	r3, [pc, #116]	; (7a64 <z_init_static_threads+0xe0>)
    79f0:	429c      	cmp	r4, r3
    79f2:	d81f      	bhi.n	7a34 <z_init_static_threads+0xb0>
    79f4:	4b1b      	ldr	r3, [pc, #108]	; (7a64 <z_init_static_threads+0xe0>)
    79f6:	429c      	cmp	r4, r3
    79f8:	d22d      	bcs.n	7a56 <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    79fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    79fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    7a00:	d0f4      	beq.n	79ec <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    7a02:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    7a04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    7a08:	17c1      	asrs	r1, r0, #31
    7a0a:	03c9      	lsls	r1, r1, #15
    7a0c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    7a10:	03c0      	lsls	r0, r0, #15
    7a12:	f240 33e7 	movw	r3, #999	; 0x3e7
    7a16:	18c0      	adds	r0, r0, r3
    7a18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7a1c:	f04f 0300 	mov.w	r3, #0
    7a20:	f141 0100 	adc.w	r1, r1, #0
    7a24:	f7f8 fb6c 	bl	100 <__aeabi_uldivmod>
    7a28:	4602      	mov	r2, r0
    7a2a:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    7a2c:	4628      	mov	r0, r5
    7a2e:	f7ff fe09 	bl	7644 <schedule_new_thread>
    7a32:	e7db      	b.n	79ec <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    7a34:	4d0c      	ldr	r5, [pc, #48]	; (7a68 <z_init_static_threads+0xe4>)
    7a36:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    7a3a:	462a      	mov	r2, r5
    7a3c:	490b      	ldr	r1, [pc, #44]	; (7a6c <z_init_static_threads+0xe8>)
    7a3e:	480c      	ldr	r0, [pc, #48]	; (7a70 <z_init_static_threads+0xec>)
    7a40:	f002 ff72 	bl	a928 <assert_print>
    7a44:	480b      	ldr	r0, [pc, #44]	; (7a74 <z_init_static_threads+0xf0>)
    7a46:	f002 ff6f 	bl	a928 <assert_print>
    7a4a:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    7a4e:	4628      	mov	r0, r5
    7a50:	f002 ff63 	bl	a91a <assert_post_action>
    7a54:	e7ce      	b.n	79f4 <z_init_static_threads+0x70>
	k_sched_unlock();
    7a56:	f001 f9f9 	bl	8e4c <k_sched_unlock>
}
    7a5a:	b007      	add	sp, #28
    7a5c:	bd30      	pop	{r4, r5, pc}
    7a5e:	bf00      	nop
    7a60:	200041c4 	.word	0x200041c4
    7a64:	200041c4 	.word	0x200041c4
    7a68:	0000da7c 	.word	0x0000da7c
    7a6c:	0000dbc4 	.word	0x0000dbc4
    7a70:	0000c294 	.word	0x0000c294
    7a74:	0000da5c 	.word	0x0000da5c

00007a78 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    7a78:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    7a7a:	4b14      	ldr	r3, [pc, #80]	; (7acc <idle+0x54>)
    7a7c:	689b      	ldr	r3, [r3, #8]
    7a7e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7a82:	2b00      	cmp	r3, #0
    7a84:	da0d      	bge.n	7aa2 <idle+0x2a>
    7a86:	4c12      	ldr	r4, [pc, #72]	; (7ad0 <idle+0x58>)
    7a88:	2327      	movs	r3, #39	; 0x27
    7a8a:	4622      	mov	r2, r4
    7a8c:	4911      	ldr	r1, [pc, #68]	; (7ad4 <idle+0x5c>)
    7a8e:	4812      	ldr	r0, [pc, #72]	; (7ad8 <idle+0x60>)
    7a90:	f002 ff4a 	bl	a928 <assert_print>
    7a94:	2127      	movs	r1, #39	; 0x27
    7a96:	4620      	mov	r0, r4
    7a98:	f002 ff3f 	bl	a91a <assert_post_action>
    7a9c:	e001      	b.n	7aa2 <idle+0x2a>
	arch_cpu_idle();
    7a9e:	f7fb f91f 	bl	2ce0 <arch_cpu_idle>
	__asm__ volatile(
    7aa2:	f04f 0220 	mov.w	r2, #32
    7aa6:	f3ef 8311 	mrs	r3, BASEPRI
    7aaa:	f382 8812 	msr	BASEPRI_MAX, r2
    7aae:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7ab2:	f001 ff7d 	bl	99b0 <z_get_next_timeout_expiry>
    7ab6:	4b05      	ldr	r3, [pc, #20]	; (7acc <idle+0x54>)
    7ab8:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    7aba:	4b08      	ldr	r3, [pc, #32]	; (7adc <idle+0x64>)
    7abc:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7abe:	2b00      	cmp	r3, #0
    7ac0:	d0ed      	beq.n	7a9e <idle+0x26>
    7ac2:	f7fa fed5 	bl	2870 <pm_system_suspend>
    7ac6:	2800      	cmp	r0, #0
    7ac8:	d1eb      	bne.n	7aa2 <idle+0x2a>
    7aca:	e7e8      	b.n	7a9e <idle+0x26>
    7acc:	200050ac 	.word	0x200050ac
    7ad0:	0000dbf4 	.word	0x0000dbf4
    7ad4:	0000dc18 	.word	0x0000dc18
    7ad8:	0000c294 	.word	0x0000c294
    7adc:	200052ea 	.word	0x200052ea

00007ae0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    7ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7ae4:	b083      	sub	sp, #12
    7ae6:	4604      	mov	r4, r0
    7ae8:	4616      	mov	r6, r2
    7aea:	461d      	mov	r5, r3
    7aec:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7af0:	2900      	cmp	r1, #0
    7af2:	d12b      	bne.n	7b4c <z_impl_k_mutex_lock+0x6c>
    7af4:	f04f 0320 	mov.w	r3, #32
    7af8:	f3ef 8711 	mrs	r7, BASEPRI
    7afc:	f383 8812 	msr	BASEPRI_MAX, r3
    7b00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7b04:	487b      	ldr	r0, [pc, #492]	; (7cf4 <z_impl_k_mutex_lock+0x214>)
    7b06:	f7ff fdab 	bl	7660 <z_spin_lock_valid>
    7b0a:	2800      	cmp	r0, #0
    7b0c:	d02d      	beq.n	7b6a <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    7b0e:	4879      	ldr	r0, [pc, #484]	; (7cf4 <z_impl_k_mutex_lock+0x214>)
    7b10:	f7ff fdc6 	bl	76a0 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7b14:	68e1      	ldr	r1, [r4, #12]
    7b16:	2900      	cmp	r1, #0
    7b18:	d138      	bne.n	7b8c <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    7b1a:	2900      	cmp	r1, #0
    7b1c:	d17d      	bne.n	7c1a <z_impl_k_mutex_lock+0x13a>
    7b1e:	4b76      	ldr	r3, [pc, #472]	; (7cf8 <z_impl_k_mutex_lock+0x218>)
    7b20:	689b      	ldr	r3, [r3, #8]
    7b22:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    7b26:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    7b28:	3101      	adds	r1, #1
    7b2a:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    7b2c:	4b72      	ldr	r3, [pc, #456]	; (7cf8 <z_impl_k_mutex_lock+0x218>)
    7b2e:	689b      	ldr	r3, [r3, #8]
    7b30:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7b32:	4870      	ldr	r0, [pc, #448]	; (7cf4 <z_impl_k_mutex_lock+0x214>)
    7b34:	f7ff fda4 	bl	7680 <z_spin_unlock_valid>
    7b38:	2800      	cmp	r0, #0
    7b3a:	d070      	beq.n	7c1e <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    7b3c:	f387 8811 	msr	BASEPRI, r7
    7b40:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    7b44:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7b46:	b003      	add	sp, #12
    7b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7b4c:	4f6b      	ldr	r7, [pc, #428]	; (7cfc <z_impl_k_mutex_lock+0x21c>)
    7b4e:	2365      	movs	r3, #101	; 0x65
    7b50:	463a      	mov	r2, r7
    7b52:	496b      	ldr	r1, [pc, #428]	; (7d00 <z_impl_k_mutex_lock+0x220>)
    7b54:	486b      	ldr	r0, [pc, #428]	; (7d04 <z_impl_k_mutex_lock+0x224>)
    7b56:	f002 fee7 	bl	a928 <assert_print>
    7b5a:	486b      	ldr	r0, [pc, #428]	; (7d08 <z_impl_k_mutex_lock+0x228>)
    7b5c:	f002 fee4 	bl	a928 <assert_print>
    7b60:	2165      	movs	r1, #101	; 0x65
    7b62:	4638      	mov	r0, r7
    7b64:	f002 fed9 	bl	a91a <assert_post_action>
    7b68:	e7c4      	b.n	7af4 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7b6a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 7d0c <z_impl_k_mutex_lock+0x22c>
    7b6e:	238e      	movs	r3, #142	; 0x8e
    7b70:	4642      	mov	r2, r8
    7b72:	4967      	ldr	r1, [pc, #412]	; (7d10 <z_impl_k_mutex_lock+0x230>)
    7b74:	4863      	ldr	r0, [pc, #396]	; (7d04 <z_impl_k_mutex_lock+0x224>)
    7b76:	f002 fed7 	bl	a928 <assert_print>
    7b7a:	495e      	ldr	r1, [pc, #376]	; (7cf4 <z_impl_k_mutex_lock+0x214>)
    7b7c:	4865      	ldr	r0, [pc, #404]	; (7d14 <z_impl_k_mutex_lock+0x234>)
    7b7e:	f002 fed3 	bl	a928 <assert_print>
    7b82:	218e      	movs	r1, #142	; 0x8e
    7b84:	4640      	mov	r0, r8
    7b86:	f002 fec8 	bl	a91a <assert_post_action>
    7b8a:	e7c0      	b.n	7b0e <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7b8c:	68a2      	ldr	r2, [r4, #8]
    7b8e:	4b5a      	ldr	r3, [pc, #360]	; (7cf8 <z_impl_k_mutex_lock+0x218>)
    7b90:	689b      	ldr	r3, [r3, #8]
    7b92:	429a      	cmp	r2, r3
    7b94:	d0c1      	beq.n	7b1a <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7b96:	ea55 0106 	orrs.w	r1, r5, r6
    7b9a:	bf0c      	ite	eq
    7b9c:	f04f 0801 	moveq.w	r8, #1
    7ba0:	f04f 0800 	movne.w	r8, #0
    7ba4:	d04b      	beq.n	7c3e <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    7ba6:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    7baa:	4649      	mov	r1, r9
    7bac:	f993 000e 	ldrsb.w	r0, [r3, #14]
    7bb0:	f004 f851 	bl	bc56 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7bb4:	4581      	cmp	r9, r0
    7bb6:	dc5d      	bgt.n	7c74 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    7bb8:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    7bbc:	9600      	str	r6, [sp, #0]
    7bbe:	9501      	str	r5, [sp, #4]
    7bc0:	4622      	mov	r2, r4
    7bc2:	4639      	mov	r1, r7
    7bc4:	484b      	ldr	r0, [pc, #300]	; (7cf4 <z_impl_k_mutex_lock+0x214>)
    7bc6:	f000 ffe7 	bl	8b98 <z_pend_curr>
	if (got_mutex == 0) {
    7bca:	2800      	cmp	r0, #0
    7bcc:	d0bb      	beq.n	7b46 <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    7bce:	f04f 0320 	mov.w	r3, #32
    7bd2:	f3ef 8511 	mrs	r5, BASEPRI
    7bd6:	f383 8812 	msr	BASEPRI_MAX, r3
    7bda:	f3bf 8f6f 	isb	sy
    7bde:	4845      	ldr	r0, [pc, #276]	; (7cf4 <z_impl_k_mutex_lock+0x214>)
    7be0:	f7ff fd3e 	bl	7660 <z_spin_lock_valid>
    7be4:	2800      	cmp	r0, #0
    7be6:	d04b      	beq.n	7c80 <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    7be8:	4842      	ldr	r0, [pc, #264]	; (7cf4 <z_impl_k_mutex_lock+0x214>)
    7bea:	f7ff fd59 	bl	76a0 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7bee:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7bf0:	42a3      	cmp	r3, r4
    7bf2:	d055      	beq.n	7ca0 <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7bf4:	2b00      	cmp	r3, #0
    7bf6:	d053      	beq.n	7ca0 <z_impl_k_mutex_lock+0x1c0>
    7bf8:	6921      	ldr	r1, [r4, #16]
    7bfa:	f993 000e 	ldrsb.w	r0, [r3, #14]
    7bfe:	f004 f82a 	bl	bc56 <new_prio_for_inheritance>
    7c02:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    7c04:	4620      	mov	r0, r4
    7c06:	f004 f831 	bl	bc6c <adjust_owner_prio>
    7c0a:	2800      	cmp	r0, #0
    7c0c:	d14a      	bne.n	7ca4 <z_impl_k_mutex_lock+0x1c4>
    7c0e:	f1b9 0f00 	cmp.w	r9, #0
    7c12:	d049      	beq.n	7ca8 <z_impl_k_mutex_lock+0x1c8>
    7c14:	f04f 0801 	mov.w	r8, #1
    7c18:	e046      	b.n	7ca8 <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    7c1a:	6923      	ldr	r3, [r4, #16]
    7c1c:	e783      	b.n	7b26 <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c1e:	4c3b      	ldr	r4, [pc, #236]	; (7d0c <z_impl_k_mutex_lock+0x22c>)
    7c20:	23b9      	movs	r3, #185	; 0xb9
    7c22:	4622      	mov	r2, r4
    7c24:	493c      	ldr	r1, [pc, #240]	; (7d18 <z_impl_k_mutex_lock+0x238>)
    7c26:	4837      	ldr	r0, [pc, #220]	; (7d04 <z_impl_k_mutex_lock+0x224>)
    7c28:	f002 fe7e 	bl	a928 <assert_print>
    7c2c:	4931      	ldr	r1, [pc, #196]	; (7cf4 <z_impl_k_mutex_lock+0x214>)
    7c2e:	483b      	ldr	r0, [pc, #236]	; (7d1c <z_impl_k_mutex_lock+0x23c>)
    7c30:	f002 fe7a 	bl	a928 <assert_print>
    7c34:	21b9      	movs	r1, #185	; 0xb9
    7c36:	4620      	mov	r0, r4
    7c38:	f002 fe6f 	bl	a91a <assert_post_action>
    7c3c:	e77e      	b.n	7b3c <z_impl_k_mutex_lock+0x5c>
    7c3e:	482d      	ldr	r0, [pc, #180]	; (7cf4 <z_impl_k_mutex_lock+0x214>)
    7c40:	f7ff fd1e 	bl	7680 <z_spin_unlock_valid>
    7c44:	b130      	cbz	r0, 7c54 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    7c46:	f387 8811 	msr	BASEPRI, r7
    7c4a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    7c4e:	f06f 000f 	mvn.w	r0, #15
    7c52:	e778      	b.n	7b46 <z_impl_k_mutex_lock+0x66>
    7c54:	4c2d      	ldr	r4, [pc, #180]	; (7d0c <z_impl_k_mutex_lock+0x22c>)
    7c56:	23b9      	movs	r3, #185	; 0xb9
    7c58:	4622      	mov	r2, r4
    7c5a:	492f      	ldr	r1, [pc, #188]	; (7d18 <z_impl_k_mutex_lock+0x238>)
    7c5c:	4829      	ldr	r0, [pc, #164]	; (7d04 <z_impl_k_mutex_lock+0x224>)
    7c5e:	f002 fe63 	bl	a928 <assert_print>
    7c62:	4924      	ldr	r1, [pc, #144]	; (7cf4 <z_impl_k_mutex_lock+0x214>)
    7c64:	482d      	ldr	r0, [pc, #180]	; (7d1c <z_impl_k_mutex_lock+0x23c>)
    7c66:	f002 fe5f 	bl	a928 <assert_print>
    7c6a:	21b9      	movs	r1, #185	; 0xb9
    7c6c:	4620      	mov	r0, r4
    7c6e:	f002 fe54 	bl	a91a <assert_post_action>
    7c72:	e7e8      	b.n	7c46 <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    7c74:	4601      	mov	r1, r0
    7c76:	4620      	mov	r0, r4
    7c78:	f003 fff8 	bl	bc6c <adjust_owner_prio>
    7c7c:	4681      	mov	r9, r0
    7c7e:	e79d      	b.n	7bbc <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7c80:	4e22      	ldr	r6, [pc, #136]	; (7d0c <z_impl_k_mutex_lock+0x22c>)
    7c82:	238e      	movs	r3, #142	; 0x8e
    7c84:	4632      	mov	r2, r6
    7c86:	4922      	ldr	r1, [pc, #136]	; (7d10 <z_impl_k_mutex_lock+0x230>)
    7c88:	481e      	ldr	r0, [pc, #120]	; (7d04 <z_impl_k_mutex_lock+0x224>)
    7c8a:	f002 fe4d 	bl	a928 <assert_print>
    7c8e:	4919      	ldr	r1, [pc, #100]	; (7cf4 <z_impl_k_mutex_lock+0x214>)
    7c90:	4820      	ldr	r0, [pc, #128]	; (7d14 <z_impl_k_mutex_lock+0x234>)
    7c92:	f002 fe49 	bl	a928 <assert_print>
    7c96:	218e      	movs	r1, #142	; 0x8e
    7c98:	4630      	mov	r0, r6
    7c9a:	f002 fe3e 	bl	a91a <assert_post_action>
    7c9e:	e7a3      	b.n	7be8 <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7ca0:	6921      	ldr	r1, [r4, #16]
    7ca2:	e7af      	b.n	7c04 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    7ca4:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    7ca8:	f1b8 0f00 	cmp.w	r8, #0
    7cac:	d006      	beq.n	7cbc <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    7cae:	4629      	mov	r1, r5
    7cb0:	4810      	ldr	r0, [pc, #64]	; (7cf4 <z_impl_k_mutex_lock+0x214>)
    7cb2:	f000 faf1 	bl	8298 <z_reschedule>
	return -EAGAIN;
    7cb6:	f06f 000a 	mvn.w	r0, #10
    7cba:	e744      	b.n	7b46 <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7cbc:	480d      	ldr	r0, [pc, #52]	; (7cf4 <z_impl_k_mutex_lock+0x214>)
    7cbe:	f7ff fcdf 	bl	7680 <z_spin_unlock_valid>
    7cc2:	b130      	cbz	r0, 7cd2 <z_impl_k_mutex_lock+0x1f2>
    7cc4:	f385 8811 	msr	BASEPRI, r5
    7cc8:	f3bf 8f6f 	isb	sy
    7ccc:	f06f 000a 	mvn.w	r0, #10
    7cd0:	e739      	b.n	7b46 <z_impl_k_mutex_lock+0x66>
    7cd2:	4c0e      	ldr	r4, [pc, #56]	; (7d0c <z_impl_k_mutex_lock+0x22c>)
    7cd4:	23b9      	movs	r3, #185	; 0xb9
    7cd6:	4622      	mov	r2, r4
    7cd8:	490f      	ldr	r1, [pc, #60]	; (7d18 <z_impl_k_mutex_lock+0x238>)
    7cda:	480a      	ldr	r0, [pc, #40]	; (7d04 <z_impl_k_mutex_lock+0x224>)
    7cdc:	f002 fe24 	bl	a928 <assert_print>
    7ce0:	4904      	ldr	r1, [pc, #16]	; (7cf4 <z_impl_k_mutex_lock+0x214>)
    7ce2:	480e      	ldr	r0, [pc, #56]	; (7d1c <z_impl_k_mutex_lock+0x23c>)
    7ce4:	f002 fe20 	bl	a928 <assert_print>
    7ce8:	21b9      	movs	r1, #185	; 0xb9
    7cea:	4620      	mov	r0, r4
    7cec:	f002 fe15 	bl	a91a <assert_post_action>
    7cf0:	e7e8      	b.n	7cc4 <z_impl_k_mutex_lock+0x1e4>
    7cf2:	bf00      	nop
    7cf4:	200050dc 	.word	0x200050dc
    7cf8:	200050ac 	.word	0x200050ac
    7cfc:	0000dc40 	.word	0x0000dc40
    7d00:	0000db88 	.word	0x0000db88
    7d04:	0000c294 	.word	0x0000c294
    7d08:	0000dc64 	.word	0x0000dc64
    7d0c:	0000c440 	.word	0x0000c440
    7d10:	0000c4a0 	.word	0x0000c4a0
    7d14:	0000c4b8 	.word	0x0000c4b8
    7d18:	0000c470 	.word	0x0000c470
    7d1c:	0000c488 	.word	0x0000c488

00007d20 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    7d20:	b570      	push	{r4, r5, r6, lr}
    7d22:	4604      	mov	r4, r0
    7d24:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7d28:	bb03      	cbnz	r3, 7d6c <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    7d2a:	68a3      	ldr	r3, [r4, #8]
    7d2c:	2b00      	cmp	r3, #0
    7d2e:	f000 80a6 	beq.w	7e7e <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    7d32:	4a56      	ldr	r2, [pc, #344]	; (7e8c <z_impl_k_mutex_unlock+0x16c>)
    7d34:	6892      	ldr	r2, [r2, #8]
    7d36:	4293      	cmp	r3, r2
    7d38:	f040 80a4 	bne.w	7e84 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    7d3c:	68e3      	ldr	r3, [r4, #12]
    7d3e:	b323      	cbz	r3, 7d8a <z_impl_k_mutex_unlock+0x6a>
    7d40:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    7d44:	bb6b      	cbnz	r3, 7da2 <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7d46:	4b51      	ldr	r3, [pc, #324]	; (7e8c <z_impl_k_mutex_unlock+0x16c>)
    7d48:	689b      	ldr	r3, [r3, #8]
    7d4a:	7bdb      	ldrb	r3, [r3, #15]
    7d4c:	2b01      	cmp	r3, #1
    7d4e:	d037      	beq.n	7dc0 <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    7d50:	4b4e      	ldr	r3, [pc, #312]	; (7e8c <z_impl_k_mutex_unlock+0x16c>)
    7d52:	689a      	ldr	r2, [r3, #8]
    7d54:	7bd3      	ldrb	r3, [r2, #15]
    7d56:	3b01      	subs	r3, #1
    7d58:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7d5a:	68e3      	ldr	r3, [r4, #12]
    7d5c:	2b01      	cmp	r3, #1
    7d5e:	d93e      	bls.n	7dde <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    7d60:	3b01      	subs	r3, #1
    7d62:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    7d64:	f001 f872 	bl	8e4c <k_sched_unlock>

	return 0;
    7d68:	2000      	movs	r0, #0
}
    7d6a:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7d6c:	4d48      	ldr	r5, [pc, #288]	; (7e90 <z_impl_k_mutex_unlock+0x170>)
    7d6e:	23c7      	movs	r3, #199	; 0xc7
    7d70:	462a      	mov	r2, r5
    7d72:	4948      	ldr	r1, [pc, #288]	; (7e94 <z_impl_k_mutex_unlock+0x174>)
    7d74:	4848      	ldr	r0, [pc, #288]	; (7e98 <z_impl_k_mutex_unlock+0x178>)
    7d76:	f002 fdd7 	bl	a928 <assert_print>
    7d7a:	4848      	ldr	r0, [pc, #288]	; (7e9c <z_impl_k_mutex_unlock+0x17c>)
    7d7c:	f002 fdd4 	bl	a928 <assert_print>
    7d80:	21c7      	movs	r1, #199	; 0xc7
    7d82:	4628      	mov	r0, r5
    7d84:	f002 fdc9 	bl	a91a <assert_post_action>
    7d88:	e7cf      	b.n	7d2a <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    7d8a:	4d41      	ldr	r5, [pc, #260]	; (7e90 <z_impl_k_mutex_unlock+0x170>)
    7d8c:	23df      	movs	r3, #223	; 0xdf
    7d8e:	462a      	mov	r2, r5
    7d90:	4943      	ldr	r1, [pc, #268]	; (7ea0 <z_impl_k_mutex_unlock+0x180>)
    7d92:	4841      	ldr	r0, [pc, #260]	; (7e98 <z_impl_k_mutex_unlock+0x178>)
    7d94:	f002 fdc8 	bl	a928 <assert_print>
    7d98:	21df      	movs	r1, #223	; 0xdf
    7d9a:	4628      	mov	r0, r5
    7d9c:	f002 fdbd 	bl	a91a <assert_post_action>
    7da0:	e7ce      	b.n	7d40 <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    7da2:	4d40      	ldr	r5, [pc, #256]	; (7ea4 <z_impl_k_mutex_unlock+0x184>)
    7da4:	23fd      	movs	r3, #253	; 0xfd
    7da6:	462a      	mov	r2, r5
    7da8:	493a      	ldr	r1, [pc, #232]	; (7e94 <z_impl_k_mutex_unlock+0x174>)
    7daa:	483b      	ldr	r0, [pc, #236]	; (7e98 <z_impl_k_mutex_unlock+0x178>)
    7dac:	f002 fdbc 	bl	a928 <assert_print>
    7db0:	483d      	ldr	r0, [pc, #244]	; (7ea8 <z_impl_k_mutex_unlock+0x188>)
    7db2:	f002 fdb9 	bl	a928 <assert_print>
    7db6:	21fd      	movs	r1, #253	; 0xfd
    7db8:	4628      	mov	r0, r5
    7dba:	f002 fdae 	bl	a91a <assert_post_action>
    7dbe:	e7c2      	b.n	7d46 <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7dc0:	4d38      	ldr	r5, [pc, #224]	; (7ea4 <z_impl_k_mutex_unlock+0x184>)
    7dc2:	23fe      	movs	r3, #254	; 0xfe
    7dc4:	462a      	mov	r2, r5
    7dc6:	4939      	ldr	r1, [pc, #228]	; (7eac <z_impl_k_mutex_unlock+0x18c>)
    7dc8:	4833      	ldr	r0, [pc, #204]	; (7e98 <z_impl_k_mutex_unlock+0x178>)
    7dca:	f002 fdad 	bl	a928 <assert_print>
    7dce:	4836      	ldr	r0, [pc, #216]	; (7ea8 <z_impl_k_mutex_unlock+0x188>)
    7dd0:	f002 fdaa 	bl	a928 <assert_print>
    7dd4:	21fe      	movs	r1, #254	; 0xfe
    7dd6:	4628      	mov	r0, r5
    7dd8:	f002 fd9f 	bl	a91a <assert_post_action>
    7ddc:	e7b8      	b.n	7d50 <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    7dde:	f04f 0320 	mov.w	r3, #32
    7de2:	f3ef 8511 	mrs	r5, BASEPRI
    7de6:	f383 8812 	msr	BASEPRI_MAX, r3
    7dea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7dee:	4830      	ldr	r0, [pc, #192]	; (7eb0 <z_impl_k_mutex_unlock+0x190>)
    7df0:	f7ff fc36 	bl	7660 <z_spin_lock_valid>
    7df4:	b1c0      	cbz	r0, 7e28 <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    7df6:	482e      	ldr	r0, [pc, #184]	; (7eb0 <z_impl_k_mutex_unlock+0x190>)
    7df8:	f7ff fc52 	bl	76a0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7dfc:	6921      	ldr	r1, [r4, #16]
    7dfe:	4620      	mov	r0, r4
    7e00:	f003 ff34 	bl	bc6c <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    7e04:	4620      	mov	r0, r4
    7e06:	f001 f963 	bl	90d0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    7e0a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    7e0c:	b1e0      	cbz	r0, 7e48 <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    7e0e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    7e12:	6123      	str	r3, [r4, #16]
    7e14:	2300      	movs	r3, #0
    7e16:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    7e1a:	f000 fce1 	bl	87e0 <z_ready_thread>
		z_reschedule(&lock, key);
    7e1e:	4629      	mov	r1, r5
    7e20:	4823      	ldr	r0, [pc, #140]	; (7eb0 <z_impl_k_mutex_unlock+0x190>)
    7e22:	f000 fa39 	bl	8298 <z_reschedule>
    7e26:	e79d      	b.n	7d64 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e28:	4e22      	ldr	r6, [pc, #136]	; (7eb4 <z_impl_k_mutex_unlock+0x194>)
    7e2a:	238e      	movs	r3, #142	; 0x8e
    7e2c:	4632      	mov	r2, r6
    7e2e:	4922      	ldr	r1, [pc, #136]	; (7eb8 <z_impl_k_mutex_unlock+0x198>)
    7e30:	4819      	ldr	r0, [pc, #100]	; (7e98 <z_impl_k_mutex_unlock+0x178>)
    7e32:	f002 fd79 	bl	a928 <assert_print>
    7e36:	491e      	ldr	r1, [pc, #120]	; (7eb0 <z_impl_k_mutex_unlock+0x190>)
    7e38:	4820      	ldr	r0, [pc, #128]	; (7ebc <z_impl_k_mutex_unlock+0x19c>)
    7e3a:	f002 fd75 	bl	a928 <assert_print>
    7e3e:	218e      	movs	r1, #142	; 0x8e
    7e40:	4630      	mov	r0, r6
    7e42:	f002 fd6a 	bl	a91a <assert_post_action>
    7e46:	e7d6      	b.n	7df6 <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    7e48:	2300      	movs	r3, #0
    7e4a:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7e4c:	4818      	ldr	r0, [pc, #96]	; (7eb0 <z_impl_k_mutex_unlock+0x190>)
    7e4e:	f7ff fc17 	bl	7680 <z_spin_unlock_valid>
    7e52:	b120      	cbz	r0, 7e5e <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    7e54:	f385 8811 	msr	BASEPRI, r5
    7e58:	f3bf 8f6f 	isb	sy
    7e5c:	e782      	b.n	7d64 <z_impl_k_mutex_unlock+0x44>
    7e5e:	4c15      	ldr	r4, [pc, #84]	; (7eb4 <z_impl_k_mutex_unlock+0x194>)
    7e60:	23b9      	movs	r3, #185	; 0xb9
    7e62:	4622      	mov	r2, r4
    7e64:	4916      	ldr	r1, [pc, #88]	; (7ec0 <z_impl_k_mutex_unlock+0x1a0>)
    7e66:	480c      	ldr	r0, [pc, #48]	; (7e98 <z_impl_k_mutex_unlock+0x178>)
    7e68:	f002 fd5e 	bl	a928 <assert_print>
    7e6c:	4910      	ldr	r1, [pc, #64]	; (7eb0 <z_impl_k_mutex_unlock+0x190>)
    7e6e:	4815      	ldr	r0, [pc, #84]	; (7ec4 <z_impl_k_mutex_unlock+0x1a4>)
    7e70:	f002 fd5a 	bl	a928 <assert_print>
    7e74:	21b9      	movs	r1, #185	; 0xb9
    7e76:	4620      	mov	r0, r4
    7e78:	f002 fd4f 	bl	a91a <assert_post_action>
    7e7c:	e7ea      	b.n	7e54 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    7e7e:	f06f 0015 	mvn.w	r0, #21
    7e82:	e772      	b.n	7d6a <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    7e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7e88:	e76f      	b.n	7d6a <z_impl_k_mutex_unlock+0x4a>
    7e8a:	bf00      	nop
    7e8c:	200050ac 	.word	0x200050ac
    7e90:	0000dc40 	.word	0x0000dc40
    7e94:	0000db88 	.word	0x0000db88
    7e98:	0000c294 	.word	0x0000c294
    7e9c:	0000dc64 	.word	0x0000dc64
    7ea0:	0000dc8c 	.word	0x0000dc8c
    7ea4:	0000dca4 	.word	0x0000dca4
    7ea8:	0000dcd0 	.word	0x0000dcd0
    7eac:	0000dcd4 	.word	0x0000dcd4
    7eb0:	200050dc 	.word	0x200050dc
    7eb4:	0000c440 	.word	0x0000c440
    7eb8:	0000c4a0 	.word	0x0000c4a0
    7ebc:	0000c4b8 	.word	0x0000c4b8
    7ec0:	0000c470 	.word	0x0000c470
    7ec4:	0000c488 	.word	0x0000c488

00007ec8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7ec8:	b570      	push	{r4, r5, r6, lr}
    7eca:	4604      	mov	r4, r0
	__asm__ volatile(
    7ecc:	f04f 0320 	mov.w	r3, #32
    7ed0:	f3ef 8511 	mrs	r5, BASEPRI
    7ed4:	f383 8812 	msr	BASEPRI_MAX, r3
    7ed8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7edc:	4817      	ldr	r0, [pc, #92]	; (7f3c <z_impl_k_sem_give+0x74>)
    7ede:	f7ff fbbf 	bl	7660 <z_spin_lock_valid>
    7ee2:	b180      	cbz	r0, 7f06 <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    7ee4:	4815      	ldr	r0, [pc, #84]	; (7f3c <z_impl_k_sem_give+0x74>)
    7ee6:	f7ff fbdb 	bl	76a0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7eea:	4620      	mov	r0, r4
    7eec:	f001 f8f0 	bl	90d0 <z_unpend_first_thread>

	if (thread != NULL) {
    7ef0:	b1c8      	cbz	r0, 7f26 <z_impl_k_sem_give+0x5e>
    7ef2:	2200      	movs	r2, #0
    7ef4:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7ef8:	f000 fc72 	bl	87e0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    7efc:	4629      	mov	r1, r5
    7efe:	480f      	ldr	r0, [pc, #60]	; (7f3c <z_impl_k_sem_give+0x74>)
    7f00:	f000 f9ca 	bl	8298 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7f04:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f06:	4e0e      	ldr	r6, [pc, #56]	; (7f40 <z_impl_k_sem_give+0x78>)
    7f08:	238e      	movs	r3, #142	; 0x8e
    7f0a:	4632      	mov	r2, r6
    7f0c:	490d      	ldr	r1, [pc, #52]	; (7f44 <z_impl_k_sem_give+0x7c>)
    7f0e:	480e      	ldr	r0, [pc, #56]	; (7f48 <z_impl_k_sem_give+0x80>)
    7f10:	f002 fd0a 	bl	a928 <assert_print>
    7f14:	4909      	ldr	r1, [pc, #36]	; (7f3c <z_impl_k_sem_give+0x74>)
    7f16:	480d      	ldr	r0, [pc, #52]	; (7f4c <z_impl_k_sem_give+0x84>)
    7f18:	f002 fd06 	bl	a928 <assert_print>
    7f1c:	218e      	movs	r1, #142	; 0x8e
    7f1e:	4630      	mov	r0, r6
    7f20:	f002 fcfb 	bl	a91a <assert_post_action>
    7f24:	e7de      	b.n	7ee4 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7f26:	68a3      	ldr	r3, [r4, #8]
    7f28:	68e2      	ldr	r2, [r4, #12]
    7f2a:	4293      	cmp	r3, r2
    7f2c:	d003      	beq.n	7f36 <z_impl_k_sem_give+0x6e>
    7f2e:	2201      	movs	r2, #1
    7f30:	4413      	add	r3, r2
    7f32:	60a3      	str	r3, [r4, #8]
}
    7f34:	e7e2      	b.n	7efc <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7f36:	2200      	movs	r2, #0
    7f38:	e7fa      	b.n	7f30 <z_impl_k_sem_give+0x68>
    7f3a:	bf00      	nop
    7f3c:	200050e0 	.word	0x200050e0
    7f40:	0000c440 	.word	0x0000c440
    7f44:	0000c4a0 	.word	0x0000c4a0
    7f48:	0000c294 	.word	0x0000c294
    7f4c:	0000c4b8 	.word	0x0000c4b8

00007f50 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f54:	b082      	sub	sp, #8
    7f56:	4604      	mov	r4, r0
    7f58:	4617      	mov	r7, r2
    7f5a:	461d      	mov	r5, r3
    7f5c:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    7f60:	b111      	cbz	r1, 7f68 <z_impl_k_sem_take+0x18>
    7f62:	ea55 0302 	orrs.w	r3, r5, r2
    7f66:	d11f      	bne.n	7fa8 <z_impl_k_sem_take+0x58>
    7f68:	f04f 0320 	mov.w	r3, #32
    7f6c:	f3ef 8611 	mrs	r6, BASEPRI
    7f70:	f383 8812 	msr	BASEPRI_MAX, r3
    7f74:	f3bf 8f6f 	isb	sy
    7f78:	4836      	ldr	r0, [pc, #216]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    7f7a:	f7ff fb71 	bl	7660 <z_spin_lock_valid>
    7f7e:	b310      	cbz	r0, 7fc6 <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    7f80:	4834      	ldr	r0, [pc, #208]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    7f82:	f7ff fb8d 	bl	76a0 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7f86:	68a1      	ldr	r1, [r4, #8]
    7f88:	2900      	cmp	r1, #0
    7f8a:	d03d      	beq.n	8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
		sem->count--;
    7f8c:	3901      	subs	r1, #1
    7f8e:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f90:	4830      	ldr	r0, [pc, #192]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    7f92:	f7ff fb75 	bl	7680 <z_spin_unlock_valid>
    7f96:	b338      	cbz	r0, 7fe8 <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    7f98:	f386 8811 	msr	BASEPRI, r6
    7f9c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7fa0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7fa2:	b002      	add	sp, #8
    7fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    7fa8:	4e2b      	ldr	r6, [pc, #172]	; (8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>)
    7faa:	2379      	movs	r3, #121	; 0x79
    7fac:	4632      	mov	r2, r6
    7fae:	492b      	ldr	r1, [pc, #172]	; (805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>)
    7fb0:	482b      	ldr	r0, [pc, #172]	; (8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>)
    7fb2:	f002 fcb9 	bl	a928 <assert_print>
    7fb6:	482b      	ldr	r0, [pc, #172]	; (8064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>)
    7fb8:	f002 fcb6 	bl	a928 <assert_print>
    7fbc:	2179      	movs	r1, #121	; 0x79
    7fbe:	4630      	mov	r0, r6
    7fc0:	f002 fcab 	bl	a91a <assert_post_action>
    7fc4:	e7d0      	b.n	7f68 <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7fc6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>
    7fca:	238e      	movs	r3, #142	; 0x8e
    7fcc:	4642      	mov	r2, r8
    7fce:	4927      	ldr	r1, [pc, #156]	; (806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>)
    7fd0:	4823      	ldr	r0, [pc, #140]	; (8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>)
    7fd2:	f002 fca9 	bl	a928 <assert_print>
    7fd6:	491f      	ldr	r1, [pc, #124]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    7fd8:	4825      	ldr	r0, [pc, #148]	; (8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
    7fda:	f002 fca5 	bl	a928 <assert_print>
    7fde:	218e      	movs	r1, #142	; 0x8e
    7fe0:	4640      	mov	r0, r8
    7fe2:	f002 fc9a 	bl	a91a <assert_post_action>
    7fe6:	e7cb      	b.n	7f80 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7fe8:	4c1f      	ldr	r4, [pc, #124]	; (8068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>)
    7fea:	23b9      	movs	r3, #185	; 0xb9
    7fec:	4622      	mov	r2, r4
    7fee:	4921      	ldr	r1, [pc, #132]	; (8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>)
    7ff0:	481b      	ldr	r0, [pc, #108]	; (8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>)
    7ff2:	f002 fc99 	bl	a928 <assert_print>
    7ff6:	4917      	ldr	r1, [pc, #92]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    7ff8:	481f      	ldr	r0, [pc, #124]	; (8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    7ffa:	f002 fc95 	bl	a928 <assert_print>
    7ffe:	21b9      	movs	r1, #185	; 0xb9
    8000:	4620      	mov	r0, r4
    8002:	f002 fc8a 	bl	a91a <assert_post_action>
    8006:	e7c7      	b.n	7f98 <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8008:	ea55 0307 	orrs.w	r3, r5, r7
    800c:	d007      	beq.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    800e:	9700      	str	r7, [sp, #0]
    8010:	9501      	str	r5, [sp, #4]
    8012:	4622      	mov	r2, r4
    8014:	4631      	mov	r1, r6
    8016:	480f      	ldr	r0, [pc, #60]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    8018:	f000 fdbe 	bl	8b98 <z_pend_curr>
	return ret;
    801c:	e7c1      	b.n	7fa2 <z_impl_k_sem_take+0x52>
    801e:	480d      	ldr	r0, [pc, #52]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    8020:	f7ff fb2e 	bl	7680 <z_spin_unlock_valid>
    8024:	b130      	cbz	r0, 8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>
    8026:	f386 8811 	msr	BASEPRI, r6
    802a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    802e:	f06f 000f 	mvn.w	r0, #15
    8032:	e7b6      	b.n	7fa2 <z_impl_k_sem_take+0x52>
    8034:	4c0c      	ldr	r4, [pc, #48]	; (8068 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x68>)
    8036:	23b9      	movs	r3, #185	; 0xb9
    8038:	4622      	mov	r2, r4
    803a:	490e      	ldr	r1, [pc, #56]	; (8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>)
    803c:	4808      	ldr	r0, [pc, #32]	; (8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>)
    803e:	f002 fc73 	bl	a928 <assert_print>
    8042:	4904      	ldr	r1, [pc, #16]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    8044:	480c      	ldr	r0, [pc, #48]	; (8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    8046:	f002 fc6f 	bl	a928 <assert_print>
    804a:	21b9      	movs	r1, #185	; 0xb9
    804c:	4620      	mov	r0, r4
    804e:	f002 fc64 	bl	a91a <assert_post_action>
    8052:	e7e8      	b.n	8026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    8054:	200050e0 	.word	0x200050e0
    8058:	0000dd08 	.word	0x0000dd08
    805c:	0000dd28 	.word	0x0000dd28
    8060:	0000c294 	.word	0x0000c294
    8064:	0000dcd0 	.word	0x0000dcd0
    8068:	0000c440 	.word	0x0000c440
    806c:	0000c4a0 	.word	0x0000c4a0
    8070:	0000c4b8 	.word	0x0000c4b8
    8074:	0000c470 	.word	0x0000c470
    8078:	0000c488 	.word	0x0000c488

0000807c <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    807c:	b538      	push	{r3, r4, r5, lr}
    807e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    8080:	6883      	ldr	r3, [r0, #8]
    8082:	b10b      	cbz	r3, 8088 <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    8084:	68a0      	ldr	r0, [r4, #8]
    8086:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    8088:	4d06      	ldr	r5, [pc, #24]	; (80a4 <pended_on_thread+0x28>)
    808a:	f240 23b9 	movw	r3, #697	; 0x2b9
    808e:	462a      	mov	r2, r5
    8090:	4905      	ldr	r1, [pc, #20]	; (80a8 <pended_on_thread+0x2c>)
    8092:	4806      	ldr	r0, [pc, #24]	; (80ac <pended_on_thread+0x30>)
    8094:	f002 fc48 	bl	a928 <assert_print>
    8098:	f240 21b9 	movw	r1, #697	; 0x2b9
    809c:	4628      	mov	r0, r5
    809e:	f002 fc3c 	bl	a91a <assert_post_action>
    80a2:	e7ef      	b.n	8084 <pended_on_thread+0x8>
    80a4:	0000dd78 	.word	0x0000dd78
    80a8:	0000dd9c 	.word	0x0000dd9c
    80ac:	0000c294 	.word	0x0000c294

000080b0 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    80b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    80b4:	bf08      	it	eq
    80b6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    80ba:	d100      	bne.n	80be <add_thread_timeout+0xe>
    80bc:	4770      	bx	lr
{
    80be:	b508      	push	{r3, lr}
    80c0:	4902      	ldr	r1, [pc, #8]	; (80cc <add_thread_timeout+0x1c>)
    80c2:	3018      	adds	r0, #24
    80c4:	f001 fb36 	bl	9734 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    80c8:	bd08      	pop	{r3, pc}
    80ca:	bf00      	nop
    80cc:	0000893d 	.word	0x0000893d

000080d0 <z_reset_time_slice>:
{
    80d0:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    80d2:	4b07      	ldr	r3, [pc, #28]	; (80f0 <z_reset_time_slice+0x20>)
    80d4:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    80d6:	b904      	cbnz	r4, 80da <z_reset_time_slice+0xa>
}
    80d8:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    80da:	f7fc ff59 	bl	4f90 <sys_clock_elapsed>
    80de:	4404      	add	r4, r0
    80e0:	4b04      	ldr	r3, [pc, #16]	; (80f4 <z_reset_time_slice+0x24>)
    80e2:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    80e4:	2100      	movs	r1, #0
    80e6:	4b02      	ldr	r3, [pc, #8]	; (80f0 <z_reset_time_slice+0x20>)
    80e8:	6818      	ldr	r0, [r3, #0]
    80ea:	f001 fcb3 	bl	9a54 <z_set_timeout_expiry>
}
    80ee:	e7f3      	b.n	80d8 <z_reset_time_slice+0x8>
    80f0:	200050f0 	.word	0x200050f0
    80f4:	200050ac 	.word	0x200050ac

000080f8 <k_sched_time_slice_set>:
{
    80f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80fc:	4604      	mov	r4, r0
    80fe:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    8100:	2700      	movs	r7, #0
	__asm__ volatile(
    8102:	f04f 0320 	mov.w	r3, #32
    8106:	f3ef 8611 	mrs	r6, BASEPRI
    810a:	f383 8812 	msr	BASEPRI_MAX, r3
    810e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8112:	482a      	ldr	r0, [pc, #168]	; (81bc <k_sched_time_slice_set+0xc4>)
    8114:	f7ff faa4 	bl	7660 <z_spin_lock_valid>
    8118:	b118      	cbz	r0, 8122 <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    811a:	4828      	ldr	r0, [pc, #160]	; (81bc <k_sched_time_slice_set+0xc4>)
    811c:	f7ff fac0 	bl	76a0 <z_spin_lock_set_owner>
	return k;
    8120:	e023      	b.n	816a <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8122:	f8df 809c 	ldr.w	r8, [pc, #156]	; 81c0 <k_sched_time_slice_set+0xc8>
    8126:	238e      	movs	r3, #142	; 0x8e
    8128:	4642      	mov	r2, r8
    812a:	4926      	ldr	r1, [pc, #152]	; (81c4 <k_sched_time_slice_set+0xcc>)
    812c:	4826      	ldr	r0, [pc, #152]	; (81c8 <k_sched_time_slice_set+0xd0>)
    812e:	f002 fbfb 	bl	a928 <assert_print>
    8132:	4922      	ldr	r1, [pc, #136]	; (81bc <k_sched_time_slice_set+0xc4>)
    8134:	4825      	ldr	r0, [pc, #148]	; (81cc <k_sched_time_slice_set+0xd4>)
    8136:	f002 fbf7 	bl	a928 <assert_print>
    813a:	218e      	movs	r1, #142	; 0x8e
    813c:	4640      	mov	r0, r8
    813e:	f002 fbec 	bl	a91a <assert_post_action>
    8142:	e7ea      	b.n	811a <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    8144:	2802      	cmp	r0, #2
    8146:	bfb8      	it	lt
    8148:	2002      	movlt	r0, #2
    814a:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    814c:	4b20      	ldr	r3, [pc, #128]	; (81d0 <k_sched_time_slice_set+0xd8>)
    814e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    8150:	4b20      	ldr	r3, [pc, #128]	; (81d4 <k_sched_time_slice_set+0xdc>)
    8152:	6898      	ldr	r0, [r3, #8]
    8154:	f7ff ffbc 	bl	80d0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8158:	4818      	ldr	r0, [pc, #96]	; (81bc <k_sched_time_slice_set+0xc4>)
    815a:	f7ff fa91 	bl	7680 <z_spin_unlock_valid>
    815e:	b1d0      	cbz	r0, 8196 <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    8160:	f386 8811 	msr	BASEPRI, r6
    8164:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8168:	2701      	movs	r7, #1
    816a:	bb27      	cbnz	r7, 81b6 <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    816c:	4b19      	ldr	r3, [pc, #100]	; (81d4 <k_sched_time_slice_set+0xdc>)
    816e:	2200      	movs	r2, #0
    8170:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    8172:	0c61      	lsrs	r1, r4, #17
    8174:	03e3      	lsls	r3, r4, #15
    8176:	f240 30e7 	movw	r0, #999	; 0x3e7
    817a:	1818      	adds	r0, r3, r0
    817c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8180:	f04f 0300 	mov.w	r3, #0
    8184:	f141 0100 	adc.w	r1, r1, #0
    8188:	f7f7 ffba 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    818c:	4b12      	ldr	r3, [pc, #72]	; (81d8 <k_sched_time_slice_set+0xe0>)
    818e:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    8190:	2c00      	cmp	r4, #0
    8192:	dcd7      	bgt.n	8144 <k_sched_time_slice_set+0x4c>
    8194:	e7da      	b.n	814c <k_sched_time_slice_set+0x54>
    8196:	4f0a      	ldr	r7, [pc, #40]	; (81c0 <k_sched_time_slice_set+0xc8>)
    8198:	23b9      	movs	r3, #185	; 0xb9
    819a:	463a      	mov	r2, r7
    819c:	490f      	ldr	r1, [pc, #60]	; (81dc <k_sched_time_slice_set+0xe4>)
    819e:	480a      	ldr	r0, [pc, #40]	; (81c8 <k_sched_time_slice_set+0xd0>)
    81a0:	f002 fbc2 	bl	a928 <assert_print>
    81a4:	4905      	ldr	r1, [pc, #20]	; (81bc <k_sched_time_slice_set+0xc4>)
    81a6:	480e      	ldr	r0, [pc, #56]	; (81e0 <k_sched_time_slice_set+0xe8>)
    81a8:	f002 fbbe 	bl	a928 <assert_print>
    81ac:	21b9      	movs	r1, #185	; 0xb9
    81ae:	4638      	mov	r0, r7
    81b0:	f002 fbb3 	bl	a91a <assert_post_action>
    81b4:	e7d4      	b.n	8160 <k_sched_time_slice_set+0x68>
}
    81b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    81ba:	bf00      	nop
    81bc:	200050e8 	.word	0x200050e8
    81c0:	0000c440 	.word	0x0000c440
    81c4:	0000c4a0 	.word	0x0000c4a0
    81c8:	0000c294 	.word	0x0000c294
    81cc:	0000c4b8 	.word	0x0000c4b8
    81d0:	200050ec 	.word	0x200050ec
    81d4:	200050ac 	.word	0x200050ac
    81d8:	200050f0 	.word	0x200050f0
    81dc:	0000c470 	.word	0x0000c470
    81e0:	0000c488 	.word	0x0000c488

000081e4 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    81e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81e6:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    81e8:	2500      	movs	r5, #0
	__asm__ volatile(
    81ea:	f04f 0320 	mov.w	r3, #32
    81ee:	f3ef 8611 	mrs	r6, BASEPRI
    81f2:	f383 8812 	msr	BASEPRI_MAX, r3
    81f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    81fa:	4820      	ldr	r0, [pc, #128]	; (827c <z_unpend_thread_no_timeout+0x98>)
    81fc:	f7ff fa30 	bl	7660 <z_spin_lock_valid>
    8200:	b118      	cbz	r0, 820a <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
    8202:	481e      	ldr	r0, [pc, #120]	; (827c <z_unpend_thread_no_timeout+0x98>)
    8204:	f7ff fa4c 	bl	76a0 <z_spin_lock_set_owner>
	return k;
    8208:	e014      	b.n	8234 <z_unpend_thread_no_timeout+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    820a:	4f1d      	ldr	r7, [pc, #116]	; (8280 <z_unpend_thread_no_timeout+0x9c>)
    820c:	238e      	movs	r3, #142	; 0x8e
    820e:	463a      	mov	r2, r7
    8210:	491c      	ldr	r1, [pc, #112]	; (8284 <z_unpend_thread_no_timeout+0xa0>)
    8212:	481d      	ldr	r0, [pc, #116]	; (8288 <z_unpend_thread_no_timeout+0xa4>)
    8214:	f002 fb88 	bl	a928 <assert_print>
    8218:	4918      	ldr	r1, [pc, #96]	; (827c <z_unpend_thread_no_timeout+0x98>)
    821a:	481c      	ldr	r0, [pc, #112]	; (828c <z_unpend_thread_no_timeout+0xa8>)
    821c:	f002 fb84 	bl	a928 <assert_print>
    8220:	218e      	movs	r1, #142	; 0x8e
    8222:	4638      	mov	r0, r7
    8224:	f002 fb79 	bl	a91a <assert_post_action>
    8228:	e7eb      	b.n	8202 <z_unpend_thread_no_timeout+0x1e>
	__asm__ volatile(
    822a:	f386 8811 	msr	BASEPRI, r6
    822e:	f3bf 8f6f 	isb	sy
    8232:	2501      	movs	r5, #1
    8234:	bb05      	cbnz	r5, 8278 <z_unpend_thread_no_timeout+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8236:	4620      	mov	r0, r4
    8238:	f7ff ff20 	bl	807c <pended_on_thread>
    823c:	4621      	mov	r1, r4
    823e:	f000 f8fb 	bl	8438 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8242:	7b63      	ldrb	r3, [r4, #13]
    8244:	f023 0302 	bic.w	r3, r3, #2
    8248:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    824a:	2300      	movs	r3, #0
    824c:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    824e:	480b      	ldr	r0, [pc, #44]	; (827c <z_unpend_thread_no_timeout+0x98>)
    8250:	f7ff fa16 	bl	7680 <z_spin_unlock_valid>
    8254:	2800      	cmp	r0, #0
    8256:	d1e8      	bne.n	822a <z_unpend_thread_no_timeout+0x46>
    8258:	4d09      	ldr	r5, [pc, #36]	; (8280 <z_unpend_thread_no_timeout+0x9c>)
    825a:	23b9      	movs	r3, #185	; 0xb9
    825c:	462a      	mov	r2, r5
    825e:	490c      	ldr	r1, [pc, #48]	; (8290 <z_unpend_thread_no_timeout+0xac>)
    8260:	4809      	ldr	r0, [pc, #36]	; (8288 <z_unpend_thread_no_timeout+0xa4>)
    8262:	f002 fb61 	bl	a928 <assert_print>
    8266:	4905      	ldr	r1, [pc, #20]	; (827c <z_unpend_thread_no_timeout+0x98>)
    8268:	480a      	ldr	r0, [pc, #40]	; (8294 <z_unpend_thread_no_timeout+0xb0>)
    826a:	f002 fb5d 	bl	a928 <assert_print>
    826e:	21b9      	movs	r1, #185	; 0xb9
    8270:	4628      	mov	r0, r5
    8272:	f002 fb52 	bl	a91a <assert_post_action>
    8276:	e7d8      	b.n	822a <z_unpend_thread_no_timeout+0x46>
		unpend_thread_no_timeout(thread);
	}
}
    8278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    827a:	bf00      	nop
    827c:	200050e8 	.word	0x200050e8
    8280:	0000c440 	.word	0x0000c440
    8284:	0000c4a0 	.word	0x0000c4a0
    8288:	0000c294 	.word	0x0000c294
    828c:	0000c4b8 	.word	0x0000c4b8
    8290:	0000c470 	.word	0x0000c470
    8294:	0000c488 	.word	0x0000c488

00008298 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    8298:	b570      	push	{r4, r5, r6, lr}
    829a:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    829c:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    829e:	b921      	cbnz	r1, 82aa <z_reschedule+0x12>
    82a0:	f3ef 8305 	mrs	r3, IPSR
    82a4:	b913      	cbnz	r3, 82ac <z_reschedule+0x14>
    82a6:	2101      	movs	r1, #1
    82a8:	e000      	b.n	82ac <z_reschedule+0x14>
    82aa:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    82ac:	f011 0f01 	tst.w	r1, #1
    82b0:	d01c      	beq.n	82ec <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    82b2:	4b1b      	ldr	r3, [pc, #108]	; (8320 <z_reschedule+0x88>)
    82b4:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    82b6:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    82b8:	429a      	cmp	r2, r3
    82ba:	d017      	beq.n	82ec <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    82bc:	4620      	mov	r0, r4
    82be:	f7ff f9df 	bl	7680 <z_spin_unlock_valid>
    82c2:	b118      	cbz	r0, 82cc <z_reschedule+0x34>
	ret = arch_swap(key);
    82c4:	4628      	mov	r0, r5
    82c6:	f7fa fddf 	bl	2e88 <arch_swap>
		z_swap(lock, key);
    82ca:	e017      	b.n	82fc <z_reschedule+0x64>
    82cc:	4e15      	ldr	r6, [pc, #84]	; (8324 <z_reschedule+0x8c>)
    82ce:	23d0      	movs	r3, #208	; 0xd0
    82d0:	4632      	mov	r2, r6
    82d2:	4915      	ldr	r1, [pc, #84]	; (8328 <z_reschedule+0x90>)
    82d4:	4815      	ldr	r0, [pc, #84]	; (832c <z_reschedule+0x94>)
    82d6:	f002 fb27 	bl	a928 <assert_print>
    82da:	4621      	mov	r1, r4
    82dc:	4814      	ldr	r0, [pc, #80]	; (8330 <z_reschedule+0x98>)
    82de:	f002 fb23 	bl	a928 <assert_print>
    82e2:	21d0      	movs	r1, #208	; 0xd0
    82e4:	4630      	mov	r0, r6
    82e6:	f002 fb18 	bl	a91a <assert_post_action>
    82ea:	e7eb      	b.n	82c4 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    82ec:	4620      	mov	r0, r4
    82ee:	f7ff f9c7 	bl	7680 <z_spin_unlock_valid>
    82f2:	b120      	cbz	r0, 82fe <z_reschedule+0x66>
    82f4:	f385 8811 	msr	BASEPRI, r5
    82f8:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    82fc:	bd70      	pop	{r4, r5, r6, pc}
    82fe:	4e09      	ldr	r6, [pc, #36]	; (8324 <z_reschedule+0x8c>)
    8300:	23b9      	movs	r3, #185	; 0xb9
    8302:	4632      	mov	r2, r6
    8304:	4908      	ldr	r1, [pc, #32]	; (8328 <z_reschedule+0x90>)
    8306:	4809      	ldr	r0, [pc, #36]	; (832c <z_reschedule+0x94>)
    8308:	f002 fb0e 	bl	a928 <assert_print>
    830c:	4621      	mov	r1, r4
    830e:	4808      	ldr	r0, [pc, #32]	; (8330 <z_reschedule+0x98>)
    8310:	f002 fb0a 	bl	a928 <assert_print>
    8314:	21b9      	movs	r1, #185	; 0xb9
    8316:	4630      	mov	r0, r6
    8318:	f002 faff 	bl	a91a <assert_post_action>
    831c:	e7ea      	b.n	82f4 <z_reschedule+0x5c>
    831e:	bf00      	nop
    8320:	200050ac 	.word	0x200050ac
    8324:	0000c440 	.word	0x0000c440
    8328:	0000c470 	.word	0x0000c470
    832c:	0000c294 	.word	0x0000c294
    8330:	0000c488 	.word	0x0000c488

00008334 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    8334:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    8336:	2400      	movs	r4, #0
	__asm__ volatile(
    8338:	f04f 0320 	mov.w	r3, #32
    833c:	f3ef 8511 	mrs	r5, BASEPRI
    8340:	f383 8812 	msr	BASEPRI_MAX, r3
    8344:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8348:	482f      	ldr	r0, [pc, #188]	; (8408 <k_sched_lock+0xd4>)
    834a:	f7ff f989 	bl	7660 <z_spin_lock_valid>
    834e:	b118      	cbz	r0, 8358 <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    8350:	482d      	ldr	r0, [pc, #180]	; (8408 <k_sched_lock+0xd4>)
    8352:	f7ff f9a5 	bl	76a0 <z_spin_lock_set_owner>
	return k;
    8356:	e022      	b.n	839e <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8358:	4e2c      	ldr	r6, [pc, #176]	; (840c <k_sched_lock+0xd8>)
    835a:	238e      	movs	r3, #142	; 0x8e
    835c:	4632      	mov	r2, r6
    835e:	492c      	ldr	r1, [pc, #176]	; (8410 <k_sched_lock+0xdc>)
    8360:	482c      	ldr	r0, [pc, #176]	; (8414 <k_sched_lock+0xe0>)
    8362:	f002 fae1 	bl	a928 <assert_print>
    8366:	4928      	ldr	r1, [pc, #160]	; (8408 <k_sched_lock+0xd4>)
    8368:	482b      	ldr	r0, [pc, #172]	; (8418 <k_sched_lock+0xe4>)
    836a:	f002 fadd 	bl	a928 <assert_print>
    836e:	218e      	movs	r1, #142	; 0x8e
    8370:	4630      	mov	r0, r6
    8372:	f002 fad2 	bl	a91a <assert_post_action>
    8376:	e7eb      	b.n	8350 <k_sched_lock+0x1c>
	__ASSERT(_current->base.sched_locked != 1U, "");
    8378:	4b28      	ldr	r3, [pc, #160]	; (841c <k_sched_lock+0xe8>)
    837a:	689b      	ldr	r3, [r3, #8]
    837c:	7bdb      	ldrb	r3, [r3, #15]
    837e:	2b01      	cmp	r3, #1
    8380:	d022      	beq.n	83c8 <k_sched_lock+0x94>
	--_current->base.sched_locked;
    8382:	4b26      	ldr	r3, [pc, #152]	; (841c <k_sched_lock+0xe8>)
    8384:	689a      	ldr	r2, [r3, #8]
    8386:	7bd3      	ldrb	r3, [r2, #15]
    8388:	3b01      	subs	r3, #1
    838a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    838c:	481e      	ldr	r0, [pc, #120]	; (8408 <k_sched_lock+0xd4>)
    838e:	f7ff f977 	bl	7680 <z_spin_unlock_valid>
    8392:	b340      	cbz	r0, 83e6 <k_sched_lock+0xb2>
	__asm__ volatile(
    8394:	f385 8811 	msr	BASEPRI, r5
    8398:	f3bf 8f6f 	isb	sy
    839c:	2401      	movs	r4, #1
    839e:	2c00      	cmp	r4, #0
    83a0:	d131      	bne.n	8406 <k_sched_lock+0xd2>
    83a2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    83a6:	2b00      	cmp	r3, #0
    83a8:	d0e6      	beq.n	8378 <k_sched_lock+0x44>
    83aa:	4c1d      	ldr	r4, [pc, #116]	; (8420 <k_sched_lock+0xec>)
    83ac:	23fd      	movs	r3, #253	; 0xfd
    83ae:	4622      	mov	r2, r4
    83b0:	491c      	ldr	r1, [pc, #112]	; (8424 <k_sched_lock+0xf0>)
    83b2:	4818      	ldr	r0, [pc, #96]	; (8414 <k_sched_lock+0xe0>)
    83b4:	f002 fab8 	bl	a928 <assert_print>
    83b8:	481b      	ldr	r0, [pc, #108]	; (8428 <k_sched_lock+0xf4>)
    83ba:	f002 fab5 	bl	a928 <assert_print>
    83be:	21fd      	movs	r1, #253	; 0xfd
    83c0:	4620      	mov	r0, r4
    83c2:	f002 faaa 	bl	a91a <assert_post_action>
    83c6:	e7d7      	b.n	8378 <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    83c8:	4c15      	ldr	r4, [pc, #84]	; (8420 <k_sched_lock+0xec>)
    83ca:	23fe      	movs	r3, #254	; 0xfe
    83cc:	4622      	mov	r2, r4
    83ce:	4917      	ldr	r1, [pc, #92]	; (842c <k_sched_lock+0xf8>)
    83d0:	4810      	ldr	r0, [pc, #64]	; (8414 <k_sched_lock+0xe0>)
    83d2:	f002 faa9 	bl	a928 <assert_print>
    83d6:	4814      	ldr	r0, [pc, #80]	; (8428 <k_sched_lock+0xf4>)
    83d8:	f002 faa6 	bl	a928 <assert_print>
    83dc:	21fe      	movs	r1, #254	; 0xfe
    83de:	4620      	mov	r0, r4
    83e0:	f002 fa9b 	bl	a91a <assert_post_action>
    83e4:	e7cd      	b.n	8382 <k_sched_lock+0x4e>
    83e6:	4c09      	ldr	r4, [pc, #36]	; (840c <k_sched_lock+0xd8>)
    83e8:	23b9      	movs	r3, #185	; 0xb9
    83ea:	4622      	mov	r2, r4
    83ec:	4910      	ldr	r1, [pc, #64]	; (8430 <k_sched_lock+0xfc>)
    83ee:	4809      	ldr	r0, [pc, #36]	; (8414 <k_sched_lock+0xe0>)
    83f0:	f002 fa9a 	bl	a928 <assert_print>
    83f4:	4904      	ldr	r1, [pc, #16]	; (8408 <k_sched_lock+0xd4>)
    83f6:	480f      	ldr	r0, [pc, #60]	; (8434 <k_sched_lock+0x100>)
    83f8:	f002 fa96 	bl	a928 <assert_print>
    83fc:	21b9      	movs	r1, #185	; 0xb9
    83fe:	4620      	mov	r0, r4
    8400:	f002 fa8b 	bl	a91a <assert_post_action>
    8404:	e7c6      	b.n	8394 <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    8406:	bd70      	pop	{r4, r5, r6, pc}
    8408:	200050e8 	.word	0x200050e8
    840c:	0000c440 	.word	0x0000c440
    8410:	0000c4a0 	.word	0x0000c4a0
    8414:	0000c294 	.word	0x0000c294
    8418:	0000c4b8 	.word	0x0000c4b8
    841c:	200050ac 	.word	0x200050ac
    8420:	0000dca4 	.word	0x0000dca4
    8424:	0000db88 	.word	0x0000db88
    8428:	0000dcd0 	.word	0x0000dcd0
    842c:	0000dcd4 	.word	0x0000dcd4
    8430:	0000c470 	.word	0x0000c470
    8434:	0000c488 	.word	0x0000c488

00008438 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    8438:	b538      	push	{r3, r4, r5, lr}
    843a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    843c:	4b0c      	ldr	r3, [pc, #48]	; (8470 <z_priq_dumb_remove+0x38>)
    843e:	4299      	cmp	r1, r3
    8440:	d007      	beq.n	8452 <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    8442:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    8444:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    8446:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8448:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    844a:	2300      	movs	r3, #0
    844c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    844e:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    8450:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8452:	4d08      	ldr	r5, [pc, #32]	; (8474 <z_priq_dumb_remove+0x3c>)
    8454:	f240 433d 	movw	r3, #1085	; 0x43d
    8458:	462a      	mov	r2, r5
    845a:	4907      	ldr	r1, [pc, #28]	; (8478 <z_priq_dumb_remove+0x40>)
    845c:	4807      	ldr	r0, [pc, #28]	; (847c <z_priq_dumb_remove+0x44>)
    845e:	f002 fa63 	bl	a928 <assert_print>
    8462:	f240 413d 	movw	r1, #1085	; 0x43d
    8466:	4628      	mov	r0, r5
    8468:	f002 fa57 	bl	a91a <assert_post_action>
    846c:	e7e9      	b.n	8442 <z_priq_dumb_remove+0xa>
    846e:	bf00      	nop
    8470:	20004410 	.word	0x20004410
    8474:	0000dd78 	.word	0x0000dd78
    8478:	0000ddb4 	.word	0x0000ddb4
    847c:	0000c294 	.word	0x0000c294

00008480 <update_cache>:
{
    8480:	b538      	push	{r3, r4, r5, lr}
    8482:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    8484:	4819      	ldr	r0, [pc, #100]	; (84ec <update_cache+0x6c>)
    8486:	f003 fc24 	bl	bcd2 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    848a:	4605      	mov	r5, r0
    848c:	b188      	cbz	r0, 84b2 <update_cache+0x32>
	if (preempt_ok != 0) {
    848e:	bb14      	cbnz	r4, 84d6 <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    8490:	4b17      	ldr	r3, [pc, #92]	; (84f0 <update_cache+0x70>)
    8492:	689b      	ldr	r3, [r3, #8]
    8494:	b183      	cbz	r3, 84b8 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    8496:	4b16      	ldr	r3, [pc, #88]	; (84f0 <update_cache+0x70>)
    8498:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    849a:	7b5a      	ldrb	r2, [r3, #13]
    849c:	f012 0f1f 	tst.w	r2, #31
    84a0:	d119      	bne.n	84d6 <update_cache+0x56>
	return node->next != NULL;
    84a2:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    84a4:	b9ba      	cbnz	r2, 84d6 <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    84a6:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    84a8:	2a7f      	cmp	r2, #127	; 0x7f
    84aa:	d914      	bls.n	84d6 <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    84ac:	4a10      	ldr	r2, [pc, #64]	; (84f0 <update_cache+0x70>)
    84ae:	61d3      	str	r3, [r2, #28]
    84b0:	e01a      	b.n	84e8 <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    84b2:	4b0f      	ldr	r3, [pc, #60]	; (84f0 <update_cache+0x70>)
    84b4:	68dd      	ldr	r5, [r3, #12]
    84b6:	e7ea      	b.n	848e <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    84b8:	4c0e      	ldr	r4, [pc, #56]	; (84f4 <update_cache+0x74>)
    84ba:	2389      	movs	r3, #137	; 0x89
    84bc:	4622      	mov	r2, r4
    84be:	490e      	ldr	r1, [pc, #56]	; (84f8 <update_cache+0x78>)
    84c0:	480e      	ldr	r0, [pc, #56]	; (84fc <update_cache+0x7c>)
    84c2:	f002 fa31 	bl	a928 <assert_print>
    84c6:	480e      	ldr	r0, [pc, #56]	; (8500 <update_cache+0x80>)
    84c8:	f002 fa2e 	bl	a928 <assert_print>
    84cc:	2189      	movs	r1, #137	; 0x89
    84ce:	4620      	mov	r0, r4
    84d0:	f002 fa23 	bl	a91a <assert_post_action>
    84d4:	e7df      	b.n	8496 <update_cache+0x16>
		if (thread != _current) {
    84d6:	4b06      	ldr	r3, [pc, #24]	; (84f0 <update_cache+0x70>)
    84d8:	689b      	ldr	r3, [r3, #8]
    84da:	42ab      	cmp	r3, r5
    84dc:	d002      	beq.n	84e4 <update_cache+0x64>
			z_reset_time_slice(thread);
    84de:	4628      	mov	r0, r5
    84e0:	f7ff fdf6 	bl	80d0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    84e4:	4b02      	ldr	r3, [pc, #8]	; (84f0 <update_cache+0x70>)
    84e6:	61dd      	str	r5, [r3, #28]
}
    84e8:	bd38      	pop	{r3, r4, r5, pc}
    84ea:	bf00      	nop
    84ec:	200050cc 	.word	0x200050cc
    84f0:	200050ac 	.word	0x200050ac
    84f4:	0000dd78 	.word	0x0000dd78
    84f8:	0000ddd8 	.word	0x0000ddd8
    84fc:	0000c294 	.word	0x0000c294
    8500:	0000dcd0 	.word	0x0000dcd0

00008504 <move_thread_to_end_of_prio_q>:
{
    8504:	b538      	push	{r3, r4, r5, lr}
    8506:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    8508:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    850a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    850e:	2b00      	cmp	r3, #0
    8510:	db2b      	blt.n	856a <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    8512:	7b6b      	ldrb	r3, [r5, #13]
    8514:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8518:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    851a:	4b22      	ldr	r3, [pc, #136]	; (85a4 <move_thread_to_end_of_prio_q+0xa0>)
    851c:	429d      	cmp	r5, r3
    851e:	d02c      	beq.n	857a <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    8520:	4b21      	ldr	r3, [pc, #132]	; (85a8 <move_thread_to_end_of_prio_q+0xa4>)
    8522:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8526:	429c      	cmp	r4, r3
    8528:	d039      	beq.n	859e <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    852a:	b16c      	cbz	r4, 8548 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    852c:	4621      	mov	r1, r4
    852e:	4628      	mov	r0, r5
    8530:	f003 fbb0 	bl	bc94 <z_sched_prio_cmp>
    8534:	2800      	cmp	r0, #0
    8536:	dc2c      	bgt.n	8592 <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8538:	b134      	cbz	r4, 8548 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    853a:	4b1b      	ldr	r3, [pc, #108]	; (85a8 <move_thread_to_end_of_prio_q+0xa4>)
    853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    853e:	429c      	cmp	r4, r3
    8540:	d002      	beq.n	8548 <move_thread_to_end_of_prio_q+0x44>
    8542:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8544:	2c00      	cmp	r4, #0
    8546:	d1f0      	bne.n	852a <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    8548:	4b17      	ldr	r3, [pc, #92]	; (85a8 <move_thread_to_end_of_prio_q+0xa4>)
    854a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    854c:	f103 0120 	add.w	r1, r3, #32
    8550:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    8552:	606a      	str	r2, [r5, #4]
	tail->next = node;
    8554:	6015      	str	r5, [r2, #0]
	list->tail = node;
    8556:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    8558:	4b13      	ldr	r3, [pc, #76]	; (85a8 <move_thread_to_end_of_prio_q+0xa4>)
    855a:	6898      	ldr	r0, [r3, #8]
    855c:	42a8      	cmp	r0, r5
    855e:	bf14      	ite	ne
    8560:	2000      	movne	r0, #0
    8562:	2001      	moveq	r0, #1
    8564:	f7ff ff8c 	bl	8480 <update_cache>
}
    8568:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    856a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    856e:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8570:	4601      	mov	r1, r0
    8572:	480e      	ldr	r0, [pc, #56]	; (85ac <move_thread_to_end_of_prio_q+0xa8>)
    8574:	f7ff ff60 	bl	8438 <z_priq_dumb_remove>
}
    8578:	e7cb      	b.n	8512 <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    857a:	4c0d      	ldr	r4, [pc, #52]	; (85b0 <move_thread_to_end_of_prio_q+0xac>)
    857c:	23ba      	movs	r3, #186	; 0xba
    857e:	4622      	mov	r2, r4
    8580:	490c      	ldr	r1, [pc, #48]	; (85b4 <move_thread_to_end_of_prio_q+0xb0>)
    8582:	480d      	ldr	r0, [pc, #52]	; (85b8 <move_thread_to_end_of_prio_q+0xb4>)
    8584:	f002 f9d0 	bl	a928 <assert_print>
    8588:	21ba      	movs	r1, #186	; 0xba
    858a:	4620      	mov	r0, r4
    858c:	f002 f9c5 	bl	a91a <assert_post_action>
    8590:	e7c6      	b.n	8520 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    8592:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    8594:	606b      	str	r3, [r5, #4]
	node->next = successor;
    8596:	602c      	str	r4, [r5, #0]
	prev->next = node;
    8598:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    859a:	6065      	str	r5, [r4, #4]
}
    859c:	e7dc      	b.n	8558 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    859e:	2400      	movs	r4, #0
    85a0:	e7c3      	b.n	852a <move_thread_to_end_of_prio_q+0x26>
    85a2:	bf00      	nop
    85a4:	20004410 	.word	0x20004410
    85a8:	200050ac 	.word	0x200050ac
    85ac:	200050cc 	.word	0x200050cc
    85b0:	0000dd78 	.word	0x0000dd78
    85b4:	0000ddb4 	.word	0x0000ddb4
    85b8:	0000c294 	.word	0x0000c294

000085bc <slice_expired_locked>:
{
    85bc:	b538      	push	{r3, r4, r5, lr}
    85be:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    85c0:	4b07      	ldr	r3, [pc, #28]	; (85e0 <slice_expired_locked+0x24>)
    85c2:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    85c4:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    85c6:	f013 0f1f 	tst.w	r3, #31
    85ca:	d004      	beq.n	85d6 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    85cc:	4628      	mov	r0, r5
    85ce:	f7ff fd7f 	bl	80d0 <z_reset_time_slice>
}
    85d2:	4620      	mov	r0, r4
    85d4:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    85d6:	4628      	mov	r0, r5
    85d8:	f7ff ff94 	bl	8504 <move_thread_to_end_of_prio_q>
    85dc:	e7f6      	b.n	85cc <slice_expired_locked+0x10>
    85de:	bf00      	nop
    85e0:	200050ac 	.word	0x200050ac

000085e4 <z_time_slice>:
{
    85e4:	b570      	push	{r4, r5, r6, lr}
    85e6:	4604      	mov	r4, r0
	__asm__ volatile(
    85e8:	f04f 0320 	mov.w	r3, #32
    85ec:	f3ef 8511 	mrs	r5, BASEPRI
    85f0:	f383 8812 	msr	BASEPRI_MAX, r3
    85f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    85f8:	4842      	ldr	r0, [pc, #264]	; (8704 <z_time_slice+0x120>)
    85fa:	f7ff f831 	bl	7660 <z_spin_lock_valid>
    85fe:	b310      	cbz	r0, 8646 <z_time_slice+0x62>
	z_spin_lock_set_owner(l);
    8600:	4840      	ldr	r0, [pc, #256]	; (8704 <z_time_slice+0x120>)
    8602:	f7ff f84d 	bl	76a0 <z_spin_lock_set_owner>
	return k;
    8606:	462b      	mov	r3, r5
	if (pending_current == _current) {
    8608:	4a3f      	ldr	r2, [pc, #252]	; (8708 <z_time_slice+0x124>)
    860a:	6892      	ldr	r2, [r2, #8]
    860c:	493f      	ldr	r1, [pc, #252]	; (870c <z_time_slice+0x128>)
    860e:	6809      	ldr	r1, [r1, #0]
    8610:	428a      	cmp	r2, r1
    8612:	d028      	beq.n	8666 <z_time_slice+0x82>
	pending_current = NULL;
    8614:	493d      	ldr	r1, [pc, #244]	; (870c <z_time_slice+0x128>)
    8616:	2000      	movs	r0, #0
    8618:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    861a:	493d      	ldr	r1, [pc, #244]	; (8710 <z_time_slice+0x12c>)
    861c:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    861e:	2900      	cmp	r1, #0
    8620:	d052      	beq.n	86c8 <z_time_slice+0xe4>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    8622:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    8624:	297f      	cmp	r1, #127	; 0x7f
    8626:	d83a      	bhi.n	869e <z_time_slice+0xba>
    8628:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    862a:	f011 0f1f 	tst.w	r1, #31
    862e:	d140      	bne.n	86b2 <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8630:	f992 000e 	ldrsb.w	r0, [r2, #14]
    8634:	4937      	ldr	r1, [pc, #220]	; (8714 <z_time_slice+0x130>)
    8636:	6809      	ldr	r1, [r1, #0]
    8638:	4288      	cmp	r0, r1
    863a:	db3c      	blt.n	86b6 <z_time_slice+0xd2>
		&& !z_is_idle_thread_object(thread);
    863c:	4936      	ldr	r1, [pc, #216]	; (8718 <z_time_slice+0x134>)
    863e:	428a      	cmp	r2, r1
    8640:	d03b      	beq.n	86ba <z_time_slice+0xd6>
    8642:	2201      	movs	r2, #1
    8644:	e02c      	b.n	86a0 <z_time_slice+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8646:	4e35      	ldr	r6, [pc, #212]	; (871c <z_time_slice+0x138>)
    8648:	238e      	movs	r3, #142	; 0x8e
    864a:	4632      	mov	r2, r6
    864c:	4934      	ldr	r1, [pc, #208]	; (8720 <z_time_slice+0x13c>)
    864e:	4835      	ldr	r0, [pc, #212]	; (8724 <z_time_slice+0x140>)
    8650:	f002 f96a 	bl	a928 <assert_print>
    8654:	492b      	ldr	r1, [pc, #172]	; (8704 <z_time_slice+0x120>)
    8656:	4834      	ldr	r0, [pc, #208]	; (8728 <z_time_slice+0x144>)
    8658:	f002 f966 	bl	a928 <assert_print>
    865c:	218e      	movs	r1, #142	; 0x8e
    865e:	4630      	mov	r0, r6
    8660:	f002 f95b 	bl	a91a <assert_post_action>
    8664:	e7cc      	b.n	8600 <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    8666:	4610      	mov	r0, r2
    8668:	f7ff fd32 	bl	80d0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    866c:	4825      	ldr	r0, [pc, #148]	; (8704 <z_time_slice+0x120>)
    866e:	f7ff f807 	bl	7680 <z_spin_unlock_valid>
    8672:	b120      	cbz	r0, 867e <z_time_slice+0x9a>
	__asm__ volatile(
    8674:	f385 8811 	msr	BASEPRI, r5
    8678:	f3bf 8f6f 	isb	sy
		return;
    867c:	e030      	b.n	86e0 <z_time_slice+0xfc>
    867e:	4c27      	ldr	r4, [pc, #156]	; (871c <z_time_slice+0x138>)
    8680:	23b9      	movs	r3, #185	; 0xb9
    8682:	4622      	mov	r2, r4
    8684:	4929      	ldr	r1, [pc, #164]	; (872c <z_time_slice+0x148>)
    8686:	4827      	ldr	r0, [pc, #156]	; (8724 <z_time_slice+0x140>)
    8688:	f002 f94e 	bl	a928 <assert_print>
    868c:	491d      	ldr	r1, [pc, #116]	; (8704 <z_time_slice+0x120>)
    868e:	4828      	ldr	r0, [pc, #160]	; (8730 <z_time_slice+0x14c>)
    8690:	f002 f94a 	bl	a928 <assert_print>
    8694:	21b9      	movs	r1, #185	; 0xb9
    8696:	4620      	mov	r0, r4
    8698:	f002 f93f 	bl	a91a <assert_post_action>
    869c:	e7ea      	b.n	8674 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    869e:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    86a0:	b192      	cbz	r2, 86c8 <z_time_slice+0xe4>
		if (ticks >= _current_cpu->slice_ticks) {
    86a2:	4a19      	ldr	r2, [pc, #100]	; (8708 <z_time_slice+0x124>)
    86a4:	6910      	ldr	r0, [r2, #16]
    86a6:	42a0      	cmp	r0, r4
    86a8:	dd09      	ble.n	86be <z_time_slice+0xda>
			_current_cpu->slice_ticks -= ticks;
    86aa:	1b00      	subs	r0, r0, r4
    86ac:	4a16      	ldr	r2, [pc, #88]	; (8708 <z_time_slice+0x124>)
    86ae:	6110      	str	r0, [r2, #16]
    86b0:	e00d      	b.n	86ce <z_time_slice+0xea>
		&& !z_is_idle_thread_object(thread);
    86b2:	2200      	movs	r2, #0
    86b4:	e7f4      	b.n	86a0 <z_time_slice+0xbc>
    86b6:	2200      	movs	r2, #0
    86b8:	e7f2      	b.n	86a0 <z_time_slice+0xbc>
    86ba:	2200      	movs	r2, #0
    86bc:	e7f0      	b.n	86a0 <z_time_slice+0xbc>
			key = slice_expired_locked(key);
    86be:	4628      	mov	r0, r5
    86c0:	f7ff ff7c 	bl	85bc <slice_expired_locked>
    86c4:	4603      	mov	r3, r0
    86c6:	e002      	b.n	86ce <z_time_slice+0xea>
		_current_cpu->slice_ticks = 0;
    86c8:	4a0f      	ldr	r2, [pc, #60]	; (8708 <z_time_slice+0x124>)
    86ca:	2100      	movs	r1, #0
    86cc:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    86ce:	461c      	mov	r4, r3
    86d0:	480c      	ldr	r0, [pc, #48]	; (8704 <z_time_slice+0x120>)
    86d2:	f7fe ffd5 	bl	7680 <z_spin_unlock_valid>
    86d6:	b120      	cbz	r0, 86e2 <z_time_slice+0xfe>
    86d8:	f384 8811 	msr	BASEPRI, r4
    86dc:	f3bf 8f6f 	isb	sy
}
    86e0:	bd70      	pop	{r4, r5, r6, pc}
    86e2:	4d0e      	ldr	r5, [pc, #56]	; (871c <z_time_slice+0x138>)
    86e4:	23b9      	movs	r3, #185	; 0xb9
    86e6:	462a      	mov	r2, r5
    86e8:	4910      	ldr	r1, [pc, #64]	; (872c <z_time_slice+0x148>)
    86ea:	480e      	ldr	r0, [pc, #56]	; (8724 <z_time_slice+0x140>)
    86ec:	f002 f91c 	bl	a928 <assert_print>
    86f0:	4904      	ldr	r1, [pc, #16]	; (8704 <z_time_slice+0x120>)
    86f2:	480f      	ldr	r0, [pc, #60]	; (8730 <z_time_slice+0x14c>)
    86f4:	f002 f918 	bl	a928 <assert_print>
    86f8:	21b9      	movs	r1, #185	; 0xb9
    86fa:	4628      	mov	r0, r5
    86fc:	f002 f90d 	bl	a91a <assert_post_action>
    8700:	e7ea      	b.n	86d8 <z_time_slice+0xf4>
    8702:	bf00      	nop
    8704:	200050e8 	.word	0x200050e8
    8708:	200050ac 	.word	0x200050ac
    870c:	200050e4 	.word	0x200050e4
    8710:	200050f0 	.word	0x200050f0
    8714:	200050ec 	.word	0x200050ec
    8718:	20004410 	.word	0x20004410
    871c:	0000c440 	.word	0x0000c440
    8720:	0000c4a0 	.word	0x0000c4a0
    8724:	0000c294 	.word	0x0000c294
    8728:	0000c4b8 	.word	0x0000c4b8
    872c:	0000c470 	.word	0x0000c470
    8730:	0000c488 	.word	0x0000c488

00008734 <ready_thread>:
{
    8734:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    8736:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    8738:	f990 200d 	ldrsb.w	r2, [r0, #13]
    873c:	2a00      	cmp	r2, #0
    873e:	db30      	blt.n	87a2 <ready_thread+0x6e>
    8740:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8742:	f013 0f1f 	tst.w	r3, #31
    8746:	d105      	bne.n	8754 <ready_thread+0x20>
	return node->next != NULL;
    8748:	6982      	ldr	r2, [r0, #24]
    874a:	b10a      	cbz	r2, 8750 <ready_thread+0x1c>
    874c:	2200      	movs	r2, #0
    874e:	e002      	b.n	8756 <ready_thread+0x22>
    8750:	2201      	movs	r2, #1
    8752:	e000      	b.n	8756 <ready_thread+0x22>
    8754:	2200      	movs	r2, #0
    8756:	b322      	cbz	r2, 87a2 <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    8758:	f063 037f 	orn	r3, r3, #127	; 0x7f
    875c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    875e:	4b1b      	ldr	r3, [pc, #108]	; (87cc <ready_thread+0x98>)
    8760:	429c      	cmp	r4, r3
    8762:	d01f      	beq.n	87a4 <ready_thread+0x70>
	return list->head == list;
    8764:	4b1a      	ldr	r3, [pc, #104]	; (87d0 <ready_thread+0x9c>)
    8766:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    876a:	429d      	cmp	r5, r3
    876c:	d02c      	beq.n	87c8 <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    876e:	b16d      	cbz	r5, 878c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8770:	4629      	mov	r1, r5
    8772:	4620      	mov	r0, r4
    8774:	f003 fa8e 	bl	bc94 <z_sched_prio_cmp>
    8778:	2800      	cmp	r0, #0
    877a:	dc1f      	bgt.n	87bc <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    877c:	b135      	cbz	r5, 878c <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    877e:	4b14      	ldr	r3, [pc, #80]	; (87d0 <ready_thread+0x9c>)
    8780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8782:	429d      	cmp	r5, r3
    8784:	d002      	beq.n	878c <ready_thread+0x58>
    8786:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8788:	2d00      	cmp	r5, #0
    878a:	d1f0      	bne.n	876e <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    878c:	4b10      	ldr	r3, [pc, #64]	; (87d0 <ready_thread+0x9c>)
    878e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8790:	f103 0120 	add.w	r1, r3, #32
    8794:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    8796:	6062      	str	r2, [r4, #4]
	tail->next = node;
    8798:	6014      	str	r4, [r2, #0]
	list->tail = node;
    879a:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    879c:	2000      	movs	r0, #0
    879e:	f7ff fe6f 	bl	8480 <update_cache>
}
    87a2:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    87a4:	4d0b      	ldr	r5, [pc, #44]	; (87d4 <ready_thread+0xa0>)
    87a6:	23ba      	movs	r3, #186	; 0xba
    87a8:	462a      	mov	r2, r5
    87aa:	490b      	ldr	r1, [pc, #44]	; (87d8 <ready_thread+0xa4>)
    87ac:	480b      	ldr	r0, [pc, #44]	; (87dc <ready_thread+0xa8>)
    87ae:	f002 f8bb 	bl	a928 <assert_print>
    87b2:	21ba      	movs	r1, #186	; 0xba
    87b4:	4628      	mov	r0, r5
    87b6:	f002 f8b0 	bl	a91a <assert_post_action>
    87ba:	e7d3      	b.n	8764 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    87bc:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    87be:	6063      	str	r3, [r4, #4]
	node->next = successor;
    87c0:	6025      	str	r5, [r4, #0]
	prev->next = node;
    87c2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    87c4:	606c      	str	r4, [r5, #4]
}
    87c6:	e7e9      	b.n	879c <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    87c8:	2500      	movs	r5, #0
    87ca:	e7d0      	b.n	876e <ready_thread+0x3a>
    87cc:	20004410 	.word	0x20004410
    87d0:	200050ac 	.word	0x200050ac
    87d4:	0000dd78 	.word	0x0000dd78
    87d8:	0000ddb4 	.word	0x0000ddb4
    87dc:	0000c294 	.word	0x0000c294

000087e0 <z_ready_thread>:
{
    87e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87e2:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    87e4:	2400      	movs	r4, #0
	__asm__ volatile(
    87e6:	f04f 0320 	mov.w	r3, #32
    87ea:	f3ef 8611 	mrs	r6, BASEPRI
    87ee:	f383 8812 	msr	BASEPRI_MAX, r3
    87f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    87f6:	481e      	ldr	r0, [pc, #120]	; (8870 <z_ready_thread+0x90>)
    87f8:	f7fe ff32 	bl	7660 <z_spin_lock_valid>
    87fc:	b118      	cbz	r0, 8806 <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    87fe:	481c      	ldr	r0, [pc, #112]	; (8870 <z_ready_thread+0x90>)
    8800:	f7fe ff4e 	bl	76a0 <z_spin_lock_set_owner>
	return k;
    8804:	e018      	b.n	8838 <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8806:	4f1b      	ldr	r7, [pc, #108]	; (8874 <z_ready_thread+0x94>)
    8808:	238e      	movs	r3, #142	; 0x8e
    880a:	463a      	mov	r2, r7
    880c:	491a      	ldr	r1, [pc, #104]	; (8878 <z_ready_thread+0x98>)
    880e:	481b      	ldr	r0, [pc, #108]	; (887c <z_ready_thread+0x9c>)
    8810:	f002 f88a 	bl	a928 <assert_print>
    8814:	4916      	ldr	r1, [pc, #88]	; (8870 <z_ready_thread+0x90>)
    8816:	481a      	ldr	r0, [pc, #104]	; (8880 <z_ready_thread+0xa0>)
    8818:	f002 f886 	bl	a928 <assert_print>
    881c:	218e      	movs	r1, #142	; 0x8e
    881e:	4638      	mov	r0, r7
    8820:	f002 f87b 	bl	a91a <assert_post_action>
    8824:	e7eb      	b.n	87fe <z_ready_thread+0x1e>
			ready_thread(thread);
    8826:	4628      	mov	r0, r5
    8828:	f7ff ff84 	bl	8734 <ready_thread>
    882c:	e00a      	b.n	8844 <z_ready_thread+0x64>
	__asm__ volatile(
    882e:	f386 8811 	msr	BASEPRI, r6
    8832:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8836:	2401      	movs	r4, #1
    8838:	b9cc      	cbnz	r4, 886e <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    883a:	4628      	mov	r0, r5
    883c:	f003 fa28 	bl	bc90 <thread_active_elsewhere>
    8840:	2800      	cmp	r0, #0
    8842:	d0f0      	beq.n	8826 <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8844:	480a      	ldr	r0, [pc, #40]	; (8870 <z_ready_thread+0x90>)
    8846:	f7fe ff1b 	bl	7680 <z_spin_unlock_valid>
    884a:	2800      	cmp	r0, #0
    884c:	d1ef      	bne.n	882e <z_ready_thread+0x4e>
    884e:	4c09      	ldr	r4, [pc, #36]	; (8874 <z_ready_thread+0x94>)
    8850:	23b9      	movs	r3, #185	; 0xb9
    8852:	4622      	mov	r2, r4
    8854:	490b      	ldr	r1, [pc, #44]	; (8884 <z_ready_thread+0xa4>)
    8856:	4809      	ldr	r0, [pc, #36]	; (887c <z_ready_thread+0x9c>)
    8858:	f002 f866 	bl	a928 <assert_print>
    885c:	4904      	ldr	r1, [pc, #16]	; (8870 <z_ready_thread+0x90>)
    885e:	480a      	ldr	r0, [pc, #40]	; (8888 <z_ready_thread+0xa8>)
    8860:	f002 f862 	bl	a928 <assert_print>
    8864:	21b9      	movs	r1, #185	; 0xb9
    8866:	4620      	mov	r0, r4
    8868:	f002 f857 	bl	a91a <assert_post_action>
    886c:	e7df      	b.n	882e <z_ready_thread+0x4e>
}
    886e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8870:	200050e8 	.word	0x200050e8
    8874:	0000c440 	.word	0x0000c440
    8878:	0000c4a0 	.word	0x0000c4a0
    887c:	0000c294 	.word	0x0000c294
    8880:	0000c4b8 	.word	0x0000c4b8
    8884:	0000c470 	.word	0x0000c470
    8888:	0000c488 	.word	0x0000c488

0000888c <z_sched_start>:
{
    888c:	b570      	push	{r4, r5, r6, lr}
    888e:	4604      	mov	r4, r0
	__asm__ volatile(
    8890:	f04f 0320 	mov.w	r3, #32
    8894:	f3ef 8511 	mrs	r5, BASEPRI
    8898:	f383 8812 	msr	BASEPRI_MAX, r3
    889c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    88a0:	481f      	ldr	r0, [pc, #124]	; (8920 <z_sched_start+0x94>)
    88a2:	f7fe fedd 	bl	7660 <z_spin_lock_valid>
    88a6:	b188      	cbz	r0, 88cc <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    88a8:	481d      	ldr	r0, [pc, #116]	; (8920 <z_sched_start+0x94>)
    88aa:	f7fe fef9 	bl	76a0 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    88ae:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    88b0:	f013 0f04 	tst.w	r3, #4
    88b4:	d01a      	beq.n	88ec <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    88b6:	f023 0304 	bic.w	r3, r3, #4
    88ba:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    88bc:	4620      	mov	r0, r4
    88be:	f7ff ff39 	bl	8734 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    88c2:	4629      	mov	r1, r5
    88c4:	4816      	ldr	r0, [pc, #88]	; (8920 <z_sched_start+0x94>)
    88c6:	f7ff fce7 	bl	8298 <z_reschedule>
}
    88ca:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    88cc:	4e15      	ldr	r6, [pc, #84]	; (8924 <z_sched_start+0x98>)
    88ce:	238e      	movs	r3, #142	; 0x8e
    88d0:	4632      	mov	r2, r6
    88d2:	4915      	ldr	r1, [pc, #84]	; (8928 <z_sched_start+0x9c>)
    88d4:	4815      	ldr	r0, [pc, #84]	; (892c <z_sched_start+0xa0>)
    88d6:	f002 f827 	bl	a928 <assert_print>
    88da:	4911      	ldr	r1, [pc, #68]	; (8920 <z_sched_start+0x94>)
    88dc:	4814      	ldr	r0, [pc, #80]	; (8930 <z_sched_start+0xa4>)
    88de:	f002 f823 	bl	a928 <assert_print>
    88e2:	218e      	movs	r1, #142	; 0x8e
    88e4:	4630      	mov	r0, r6
    88e6:	f002 f818 	bl	a91a <assert_post_action>
    88ea:	e7dd      	b.n	88a8 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    88ec:	480c      	ldr	r0, [pc, #48]	; (8920 <z_sched_start+0x94>)
    88ee:	f7fe fec7 	bl	7680 <z_spin_unlock_valid>
    88f2:	b120      	cbz	r0, 88fe <z_sched_start+0x72>
	__asm__ volatile(
    88f4:	f385 8811 	msr	BASEPRI, r5
    88f8:	f3bf 8f6f 	isb	sy
		return;
    88fc:	e7e5      	b.n	88ca <z_sched_start+0x3e>
    88fe:	4c09      	ldr	r4, [pc, #36]	; (8924 <z_sched_start+0x98>)
    8900:	23b9      	movs	r3, #185	; 0xb9
    8902:	4622      	mov	r2, r4
    8904:	490b      	ldr	r1, [pc, #44]	; (8934 <z_sched_start+0xa8>)
    8906:	4809      	ldr	r0, [pc, #36]	; (892c <z_sched_start+0xa0>)
    8908:	f002 f80e 	bl	a928 <assert_print>
    890c:	4904      	ldr	r1, [pc, #16]	; (8920 <z_sched_start+0x94>)
    890e:	480a      	ldr	r0, [pc, #40]	; (8938 <z_sched_start+0xac>)
    8910:	f002 f80a 	bl	a928 <assert_print>
    8914:	21b9      	movs	r1, #185	; 0xb9
    8916:	4620      	mov	r0, r4
    8918:	f001 ffff 	bl	a91a <assert_post_action>
    891c:	e7ea      	b.n	88f4 <z_sched_start+0x68>
    891e:	bf00      	nop
    8920:	200050e8 	.word	0x200050e8
    8924:	0000c440 	.word	0x0000c440
    8928:	0000c4a0 	.word	0x0000c4a0
    892c:	0000c294 	.word	0x0000c294
    8930:	0000c4b8 	.word	0x0000c4b8
    8934:	0000c470 	.word	0x0000c470
    8938:	0000c488 	.word	0x0000c488

0000893c <z_thread_timeout>:
{
    893c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8940:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    8942:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    8946:	2500      	movs	r5, #0
	__asm__ volatile(
    8948:	f04f 0320 	mov.w	r3, #32
    894c:	f3ef 8711 	mrs	r7, BASEPRI
    8950:	f383 8812 	msr	BASEPRI_MAX, r3
    8954:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8958:	482b      	ldr	r0, [pc, #172]	; (8a08 <z_thread_timeout+0xcc>)
    895a:	f7fe fe81 	bl	7660 <z_spin_lock_valid>
    895e:	b118      	cbz	r0, 8968 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    8960:	4829      	ldr	r0, [pc, #164]	; (8a08 <z_thread_timeout+0xcc>)
    8962:	f7fe fe9d 	bl	76a0 <z_spin_lock_set_owner>
	return k;
    8966:	e026      	b.n	89b6 <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8968:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8a0c <z_thread_timeout+0xd0>
    896c:	238e      	movs	r3, #142	; 0x8e
    896e:	4642      	mov	r2, r8
    8970:	4927      	ldr	r1, [pc, #156]	; (8a10 <z_thread_timeout+0xd4>)
    8972:	4828      	ldr	r0, [pc, #160]	; (8a14 <z_thread_timeout+0xd8>)
    8974:	f001 ffd8 	bl	a928 <assert_print>
    8978:	4923      	ldr	r1, [pc, #140]	; (8a08 <z_thread_timeout+0xcc>)
    897a:	4827      	ldr	r0, [pc, #156]	; (8a18 <z_thread_timeout+0xdc>)
    897c:	f001 ffd4 	bl	a928 <assert_print>
    8980:	218e      	movs	r1, #142	; 0x8e
    8982:	4640      	mov	r0, r8
    8984:	f001 ffc9 	bl	a91a <assert_post_action>
    8988:	e7ea      	b.n	8960 <z_thread_timeout+0x24>
    898a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    898e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    8992:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8996:	f023 0310 	bic.w	r3, r3, #16
    899a:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    899e:	4630      	mov	r0, r6
    89a0:	f7ff fec8 	bl	8734 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    89a4:	4818      	ldr	r0, [pc, #96]	; (8a08 <z_thread_timeout+0xcc>)
    89a6:	f7fe fe6b 	bl	7680 <z_spin_unlock_valid>
    89aa:	b1d8      	cbz	r0, 89e4 <z_thread_timeout+0xa8>
	__asm__ volatile(
    89ac:	f387 8811 	msr	BASEPRI, r7
    89b0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    89b4:	2501      	movs	r5, #1
    89b6:	bb2d      	cbnz	r5, 8a04 <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    89b8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    89bc:	f013 0f28 	tst.w	r3, #40	; 0x28
    89c0:	d1f0      	bne.n	89a4 <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    89c2:	f854 3c10 	ldr.w	r3, [r4, #-16]
    89c6:	2b00      	cmp	r3, #0
    89c8:	d0df      	beq.n	898a <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    89ca:	4630      	mov	r0, r6
    89cc:	f7ff fb56 	bl	807c <pended_on_thread>
    89d0:	4631      	mov	r1, r6
    89d2:	f7ff fd31 	bl	8438 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    89d6:	7b73      	ldrb	r3, [r6, #13]
    89d8:	f023 0302 	bic.w	r3, r3, #2
    89dc:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    89de:	2300      	movs	r3, #0
    89e0:	60b3      	str	r3, [r6, #8]
}
    89e2:	e7d2      	b.n	898a <z_thread_timeout+0x4e>
    89e4:	4d09      	ldr	r5, [pc, #36]	; (8a0c <z_thread_timeout+0xd0>)
    89e6:	23b9      	movs	r3, #185	; 0xb9
    89e8:	462a      	mov	r2, r5
    89ea:	490c      	ldr	r1, [pc, #48]	; (8a1c <z_thread_timeout+0xe0>)
    89ec:	4809      	ldr	r0, [pc, #36]	; (8a14 <z_thread_timeout+0xd8>)
    89ee:	f001 ff9b 	bl	a928 <assert_print>
    89f2:	4905      	ldr	r1, [pc, #20]	; (8a08 <z_thread_timeout+0xcc>)
    89f4:	480a      	ldr	r0, [pc, #40]	; (8a20 <z_thread_timeout+0xe4>)
    89f6:	f001 ff97 	bl	a928 <assert_print>
    89fa:	21b9      	movs	r1, #185	; 0xb9
    89fc:	4628      	mov	r0, r5
    89fe:	f001 ff8c 	bl	a91a <assert_post_action>
    8a02:	e7d3      	b.n	89ac <z_thread_timeout+0x70>
}
    8a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a08:	200050e8 	.word	0x200050e8
    8a0c:	0000c440 	.word	0x0000c440
    8a10:	0000c4a0 	.word	0x0000c4a0
    8a14:	0000c294 	.word	0x0000c294
    8a18:	0000c4b8 	.word	0x0000c4b8
    8a1c:	0000c470 	.word	0x0000c470
    8a20:	0000c488 	.word	0x0000c488

00008a24 <unready_thread>:
{
    8a24:	b510      	push	{r4, lr}
    8a26:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    8a28:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    8a2a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    8a2e:	2b00      	cmp	r3, #0
    8a30:	db08      	blt.n	8a44 <unready_thread+0x20>
	update_cache(thread == _current);
    8a32:	4b08      	ldr	r3, [pc, #32]	; (8a54 <unready_thread+0x30>)
    8a34:	6898      	ldr	r0, [r3, #8]
    8a36:	42a0      	cmp	r0, r4
    8a38:	bf14      	ite	ne
    8a3a:	2000      	movne	r0, #0
    8a3c:	2001      	moveq	r0, #1
    8a3e:	f7ff fd1f 	bl	8480 <update_cache>
}
    8a42:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8a44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8a48:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8a4a:	4601      	mov	r1, r0
    8a4c:	4802      	ldr	r0, [pc, #8]	; (8a58 <unready_thread+0x34>)
    8a4e:	f7ff fcf3 	bl	8438 <z_priq_dumb_remove>
}
    8a52:	e7ee      	b.n	8a32 <unready_thread+0xe>
    8a54:	200050ac 	.word	0x200050ac
    8a58:	200050cc 	.word	0x200050cc

00008a5c <add_to_waitq_locked>:
{
    8a5c:	b570      	push	{r4, r5, r6, lr}
    8a5e:	4605      	mov	r5, r0
    8a60:	460e      	mov	r6, r1
	unready_thread(thread);
    8a62:	f7ff ffdf 	bl	8a24 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    8a66:	7b6b      	ldrb	r3, [r5, #13]
    8a68:	f043 0302 	orr.w	r3, r3, #2
    8a6c:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    8a6e:	b1ce      	cbz	r6, 8aa4 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    8a70:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8a72:	4b17      	ldr	r3, [pc, #92]	; (8ad0 <add_to_waitq_locked+0x74>)
    8a74:	429d      	cmp	r5, r3
    8a76:	d016      	beq.n	8aa6 <add_to_waitq_locked+0x4a>
	return list->head == list;
    8a78:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8a7a:	42a6      	cmp	r6, r4
    8a7c:	d025      	beq.n	8aca <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8a7e:	b164      	cbz	r4, 8a9a <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8a80:	4621      	mov	r1, r4
    8a82:	4628      	mov	r0, r5
    8a84:	f003 f906 	bl	bc94 <z_sched_prio_cmp>
    8a88:	2800      	cmp	r0, #0
    8a8a:	dc18      	bgt.n	8abe <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8a8c:	b12c      	cbz	r4, 8a9a <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    8a8e:	6873      	ldr	r3, [r6, #4]
    8a90:	429c      	cmp	r4, r3
    8a92:	d002      	beq.n	8a9a <add_to_waitq_locked+0x3e>
    8a94:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8a96:	2c00      	cmp	r4, #0
    8a98:	d1f1      	bne.n	8a7e <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    8a9a:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    8a9c:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    8a9e:	606b      	str	r3, [r5, #4]
	tail->next = node;
    8aa0:	601d      	str	r5, [r3, #0]
	list->tail = node;
    8aa2:	6075      	str	r5, [r6, #4]
}
    8aa4:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8aa6:	4c0b      	ldr	r4, [pc, #44]	; (8ad4 <add_to_waitq_locked+0x78>)
    8aa8:	23ba      	movs	r3, #186	; 0xba
    8aaa:	4622      	mov	r2, r4
    8aac:	490a      	ldr	r1, [pc, #40]	; (8ad8 <add_to_waitq_locked+0x7c>)
    8aae:	480b      	ldr	r0, [pc, #44]	; (8adc <add_to_waitq_locked+0x80>)
    8ab0:	f001 ff3a 	bl	a928 <assert_print>
    8ab4:	21ba      	movs	r1, #186	; 0xba
    8ab6:	4620      	mov	r0, r4
    8ab8:	f001 ff2f 	bl	a91a <assert_post_action>
    8abc:	e7dc      	b.n	8a78 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    8abe:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    8ac0:	606b      	str	r3, [r5, #4]
	node->next = successor;
    8ac2:	602c      	str	r4, [r5, #0]
	prev->next = node;
    8ac4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    8ac6:	6065      	str	r5, [r4, #4]
}
    8ac8:	e7ec      	b.n	8aa4 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8aca:	2400      	movs	r4, #0
    8acc:	e7d7      	b.n	8a7e <add_to_waitq_locked+0x22>
    8ace:	bf00      	nop
    8ad0:	20004410 	.word	0x20004410
    8ad4:	0000dd78 	.word	0x0000dd78
    8ad8:	0000ddb4 	.word	0x0000ddb4
    8adc:	0000c294 	.word	0x0000c294

00008ae0 <pend>:
{
    8ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8ae4:	4605      	mov	r5, r0
    8ae6:	460e      	mov	r6, r1
    8ae8:	4691      	mov	r9, r2
    8aea:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    8aec:	2400      	movs	r4, #0
	__asm__ volatile(
    8aee:	f04f 0320 	mov.w	r3, #32
    8af2:	f3ef 8711 	mrs	r7, BASEPRI
    8af6:	f383 8812 	msr	BASEPRI_MAX, r3
    8afa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8afe:	481f      	ldr	r0, [pc, #124]	; (8b7c <pend+0x9c>)
    8b00:	f7fe fdae 	bl	7660 <z_spin_lock_valid>
    8b04:	b118      	cbz	r0, 8b0e <pend+0x2e>
	z_spin_lock_set_owner(l);
    8b06:	481d      	ldr	r0, [pc, #116]	; (8b7c <pend+0x9c>)
    8b08:	f7fe fdca 	bl	76a0 <z_spin_lock_set_owner>
	return k;
    8b0c:	e015      	b.n	8b3a <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8b0e:	f8df a070 	ldr.w	sl, [pc, #112]	; 8b80 <pend+0xa0>
    8b12:	238e      	movs	r3, #142	; 0x8e
    8b14:	4652      	mov	r2, sl
    8b16:	491b      	ldr	r1, [pc, #108]	; (8b84 <pend+0xa4>)
    8b18:	481b      	ldr	r0, [pc, #108]	; (8b88 <pend+0xa8>)
    8b1a:	f001 ff05 	bl	a928 <assert_print>
    8b1e:	4917      	ldr	r1, [pc, #92]	; (8b7c <pend+0x9c>)
    8b20:	481a      	ldr	r0, [pc, #104]	; (8b8c <pend+0xac>)
    8b22:	f001 ff01 	bl	a928 <assert_print>
    8b26:	218e      	movs	r1, #142	; 0x8e
    8b28:	4650      	mov	r0, sl
    8b2a:	f001 fef6 	bl	a91a <assert_post_action>
    8b2e:	e7ea      	b.n	8b06 <pend+0x26>
	__asm__ volatile(
    8b30:	f387 8811 	msr	BASEPRI, r7
    8b34:	f3bf 8f6f 	isb	sy
    8b38:	2401      	movs	r4, #1
    8b3a:	b9c4      	cbnz	r4, 8b6e <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    8b3c:	4631      	mov	r1, r6
    8b3e:	4628      	mov	r0, r5
    8b40:	f7ff ff8c 	bl	8a5c <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8b44:	480d      	ldr	r0, [pc, #52]	; (8b7c <pend+0x9c>)
    8b46:	f7fe fd9b 	bl	7680 <z_spin_unlock_valid>
    8b4a:	2800      	cmp	r0, #0
    8b4c:	d1f0      	bne.n	8b30 <pend+0x50>
    8b4e:	4c0c      	ldr	r4, [pc, #48]	; (8b80 <pend+0xa0>)
    8b50:	23b9      	movs	r3, #185	; 0xb9
    8b52:	4622      	mov	r2, r4
    8b54:	490e      	ldr	r1, [pc, #56]	; (8b90 <pend+0xb0>)
    8b56:	480c      	ldr	r0, [pc, #48]	; (8b88 <pend+0xa8>)
    8b58:	f001 fee6 	bl	a928 <assert_print>
    8b5c:	4907      	ldr	r1, [pc, #28]	; (8b7c <pend+0x9c>)
    8b5e:	480d      	ldr	r0, [pc, #52]	; (8b94 <pend+0xb4>)
    8b60:	f001 fee2 	bl	a928 <assert_print>
    8b64:	21b9      	movs	r1, #185	; 0xb9
    8b66:	4620      	mov	r0, r4
    8b68:	f001 fed7 	bl	a91a <assert_post_action>
    8b6c:	e7e0      	b.n	8b30 <pend+0x50>
	add_thread_timeout(thread, timeout);
    8b6e:	464a      	mov	r2, r9
    8b70:	4643      	mov	r3, r8
    8b72:	4628      	mov	r0, r5
    8b74:	f7ff fa9c 	bl	80b0 <add_thread_timeout>
}
    8b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8b7c:	200050e8 	.word	0x200050e8
    8b80:	0000c440 	.word	0x0000c440
    8b84:	0000c4a0 	.word	0x0000c4a0
    8b88:	0000c294 	.word	0x0000c294
    8b8c:	0000c4b8 	.word	0x0000c4b8
    8b90:	0000c470 	.word	0x0000c470
    8b94:	0000c488 	.word	0x0000c488

00008b98 <z_pend_curr>:
{
    8b98:	b570      	push	{r4, r5, r6, lr}
    8b9a:	4604      	mov	r4, r0
    8b9c:	460d      	mov	r5, r1
    8b9e:	4611      	mov	r1, r2
	pending_current = _current;
    8ba0:	4b0f      	ldr	r3, [pc, #60]	; (8be0 <z_pend_curr+0x48>)
    8ba2:	6898      	ldr	r0, [r3, #8]
    8ba4:	4b0f      	ldr	r3, [pc, #60]	; (8be4 <z_pend_curr+0x4c>)
    8ba6:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    8ba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    8bac:	f7ff ff98 	bl	8ae0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8bb0:	4620      	mov	r0, r4
    8bb2:	f7fe fd65 	bl	7680 <z_spin_unlock_valid>
    8bb6:	b118      	cbz	r0, 8bc0 <z_pend_curr+0x28>
    8bb8:	4628      	mov	r0, r5
    8bba:	f7fa f965 	bl	2e88 <arch_swap>
}
    8bbe:	bd70      	pop	{r4, r5, r6, pc}
    8bc0:	4e09      	ldr	r6, [pc, #36]	; (8be8 <z_pend_curr+0x50>)
    8bc2:	23d0      	movs	r3, #208	; 0xd0
    8bc4:	4632      	mov	r2, r6
    8bc6:	4909      	ldr	r1, [pc, #36]	; (8bec <z_pend_curr+0x54>)
    8bc8:	4809      	ldr	r0, [pc, #36]	; (8bf0 <z_pend_curr+0x58>)
    8bca:	f001 fead 	bl	a928 <assert_print>
    8bce:	4621      	mov	r1, r4
    8bd0:	4808      	ldr	r0, [pc, #32]	; (8bf4 <z_pend_curr+0x5c>)
    8bd2:	f001 fea9 	bl	a928 <assert_print>
    8bd6:	21d0      	movs	r1, #208	; 0xd0
    8bd8:	4630      	mov	r0, r6
    8bda:	f001 fe9e 	bl	a91a <assert_post_action>
    8bde:	e7eb      	b.n	8bb8 <z_pend_curr+0x20>
    8be0:	200050ac 	.word	0x200050ac
    8be4:	200050e4 	.word	0x200050e4
    8be8:	0000c440 	.word	0x0000c440
    8bec:	0000c470 	.word	0x0000c470
    8bf0:	0000c294 	.word	0x0000c294
    8bf4:	0000c488 	.word	0x0000c488

00008bf8 <z_set_prio>:
{
    8bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8bfc:	4604      	mov	r4, r0
    8bfe:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    8c00:	2500      	movs	r5, #0
	__asm__ volatile(
    8c02:	f04f 0320 	mov.w	r3, #32
    8c06:	f3ef 8811 	mrs	r8, BASEPRI
    8c0a:	f383 8812 	msr	BASEPRI_MAX, r3
    8c0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c12:	4844      	ldr	r0, [pc, #272]	; (8d24 <z_set_prio+0x12c>)
    8c14:	f7fe fd24 	bl	7660 <z_spin_lock_valid>
    8c18:	b120      	cbz	r0, 8c24 <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    8c1a:	4842      	ldr	r0, [pc, #264]	; (8d24 <z_set_prio+0x12c>)
    8c1c:	f7fe fd40 	bl	76a0 <z_spin_lock_set_owner>
	bool need_sched = 0;
    8c20:	2700      	movs	r7, #0
	return k;
    8c22:	e01d      	b.n	8c60 <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8c24:	4f40      	ldr	r7, [pc, #256]	; (8d28 <z_set_prio+0x130>)
    8c26:	238e      	movs	r3, #142	; 0x8e
    8c28:	463a      	mov	r2, r7
    8c2a:	4940      	ldr	r1, [pc, #256]	; (8d2c <z_set_prio+0x134>)
    8c2c:	4840      	ldr	r0, [pc, #256]	; (8d30 <z_set_prio+0x138>)
    8c2e:	f001 fe7b 	bl	a928 <assert_print>
    8c32:	493c      	ldr	r1, [pc, #240]	; (8d24 <z_set_prio+0x12c>)
    8c34:	483f      	ldr	r0, [pc, #252]	; (8d34 <z_set_prio+0x13c>)
    8c36:	f001 fe77 	bl	a928 <assert_print>
    8c3a:	218e      	movs	r1, #142	; 0x8e
    8c3c:	4638      	mov	r0, r7
    8c3e:	f001 fe6c 	bl	a91a <assert_post_action>
    8c42:	e7ea      	b.n	8c1a <z_set_prio+0x22>
		if (need_sched) {
    8c44:	f013 0701 	ands.w	r7, r3, #1
    8c48:	d116      	bne.n	8c78 <z_set_prio+0x80>
			thread->base.prio = prio;
    8c4a:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8c4c:	4835      	ldr	r0, [pc, #212]	; (8d24 <z_set_prio+0x12c>)
    8c4e:	f7fe fd17 	bl	7680 <z_spin_unlock_valid>
    8c52:	2800      	cmp	r0, #0
    8c54:	d053      	beq.n	8cfe <z_set_prio+0x106>
	__asm__ volatile(
    8c56:	f388 8811 	msr	BASEPRI, r8
    8c5a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8c5e:	2501      	movs	r5, #1
    8c60:	462b      	mov	r3, r5
    8c62:	2d00      	cmp	r5, #0
    8c64:	d15b      	bne.n	8d1e <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    8c66:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8c68:	f012 0f1f 	tst.w	r2, #31
    8c6c:	d1ea      	bne.n	8c44 <z_set_prio+0x4c>
	return node->next != NULL;
    8c6e:	69a1      	ldr	r1, [r4, #24]
    8c70:	2900      	cmp	r1, #0
    8c72:	d1e7      	bne.n	8c44 <z_set_prio+0x4c>
    8c74:	2301      	movs	r3, #1
    8c76:	e7e5      	b.n	8c44 <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8c78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8c7c:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8c7e:	4621      	mov	r1, r4
    8c80:	482d      	ldr	r0, [pc, #180]	; (8d38 <z_set_prio+0x140>)
    8c82:	f7ff fbd9 	bl	8438 <z_priq_dumb_remove>
				thread->base.prio = prio;
    8c86:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    8c88:	7b63      	ldrb	r3, [r4, #13]
    8c8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8c8e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8c90:	4b2a      	ldr	r3, [pc, #168]	; (8d3c <z_set_prio+0x144>)
    8c92:	429c      	cmp	r4, r3
    8c94:	d01f      	beq.n	8cd6 <z_set_prio+0xde>
	return list->head == list;
    8c96:	4b2a      	ldr	r3, [pc, #168]	; (8d40 <z_set_prio+0x148>)
    8c98:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8c9c:	429d      	cmp	r5, r3
    8c9e:	d02c      	beq.n	8cfa <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8ca0:	b16d      	cbz	r5, 8cbe <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8ca2:	4629      	mov	r1, r5
    8ca4:	4620      	mov	r0, r4
    8ca6:	f002 fff5 	bl	bc94 <z_sched_prio_cmp>
    8caa:	2800      	cmp	r0, #0
    8cac:	dc1f      	bgt.n	8cee <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8cae:	b135      	cbz	r5, 8cbe <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    8cb0:	4b23      	ldr	r3, [pc, #140]	; (8d40 <z_set_prio+0x148>)
    8cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8cb4:	429d      	cmp	r5, r3
    8cb6:	d002      	beq.n	8cbe <z_set_prio+0xc6>
    8cb8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8cba:	2d00      	cmp	r5, #0
    8cbc:	d1f0      	bne.n	8ca0 <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    8cbe:	4b20      	ldr	r3, [pc, #128]	; (8d40 <z_set_prio+0x148>)
    8cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8cc2:	f103 0120 	add.w	r1, r3, #32
    8cc6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    8cc8:	6062      	str	r2, [r4, #4]
	tail->next = node;
    8cca:	6014      	str	r4, [r2, #0]
	list->tail = node;
    8ccc:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    8cce:	2001      	movs	r0, #1
    8cd0:	f7ff fbd6 	bl	8480 <update_cache>
    8cd4:	e7ba      	b.n	8c4c <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8cd6:	4d1b      	ldr	r5, [pc, #108]	; (8d44 <z_set_prio+0x14c>)
    8cd8:	23ba      	movs	r3, #186	; 0xba
    8cda:	462a      	mov	r2, r5
    8cdc:	491a      	ldr	r1, [pc, #104]	; (8d48 <z_set_prio+0x150>)
    8cde:	4814      	ldr	r0, [pc, #80]	; (8d30 <z_set_prio+0x138>)
    8ce0:	f001 fe22 	bl	a928 <assert_print>
    8ce4:	21ba      	movs	r1, #186	; 0xba
    8ce6:	4628      	mov	r0, r5
    8ce8:	f001 fe17 	bl	a91a <assert_post_action>
    8cec:	e7d3      	b.n	8c96 <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    8cee:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    8cf0:	6063      	str	r3, [r4, #4]
	node->next = successor;
    8cf2:	6025      	str	r5, [r4, #0]
	prev->next = node;
    8cf4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8cf6:	606c      	str	r4, [r5, #4]
}
    8cf8:	e7e9      	b.n	8cce <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8cfa:	2500      	movs	r5, #0
    8cfc:	e7d0      	b.n	8ca0 <z_set_prio+0xa8>
    8cfe:	4d0a      	ldr	r5, [pc, #40]	; (8d28 <z_set_prio+0x130>)
    8d00:	23b9      	movs	r3, #185	; 0xb9
    8d02:	462a      	mov	r2, r5
    8d04:	4911      	ldr	r1, [pc, #68]	; (8d4c <z_set_prio+0x154>)
    8d06:	480a      	ldr	r0, [pc, #40]	; (8d30 <z_set_prio+0x138>)
    8d08:	f001 fe0e 	bl	a928 <assert_print>
    8d0c:	4905      	ldr	r1, [pc, #20]	; (8d24 <z_set_prio+0x12c>)
    8d0e:	4810      	ldr	r0, [pc, #64]	; (8d50 <z_set_prio+0x158>)
    8d10:	f001 fe0a 	bl	a928 <assert_print>
    8d14:	21b9      	movs	r1, #185	; 0xb9
    8d16:	4628      	mov	r0, r5
    8d18:	f001 fdff 	bl	a91a <assert_post_action>
    8d1c:	e79b      	b.n	8c56 <z_set_prio+0x5e>
}
    8d1e:	4638      	mov	r0, r7
    8d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d24:	200050e8 	.word	0x200050e8
    8d28:	0000c440 	.word	0x0000c440
    8d2c:	0000c4a0 	.word	0x0000c4a0
    8d30:	0000c294 	.word	0x0000c294
    8d34:	0000c4b8 	.word	0x0000c4b8
    8d38:	200050cc 	.word	0x200050cc
    8d3c:	20004410 	.word	0x20004410
    8d40:	200050ac 	.word	0x200050ac
    8d44:	0000dd78 	.word	0x0000dd78
    8d48:	0000ddb4 	.word	0x0000ddb4
    8d4c:	0000c470 	.word	0x0000c470
    8d50:	0000c488 	.word	0x0000c488

00008d54 <z_impl_k_thread_suspend>:
{
    8d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d56:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    8d58:	3018      	adds	r0, #24
    8d5a:	f000 fdcf 	bl	98fc <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    8d5e:	2500      	movs	r5, #0
	__asm__ volatile(
    8d60:	f04f 0320 	mov.w	r3, #32
    8d64:	f3ef 8611 	mrs	r6, BASEPRI
    8d68:	f383 8812 	msr	BASEPRI_MAX, r3
    8d6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d70:	482d      	ldr	r0, [pc, #180]	; (8e28 <z_impl_k_thread_suspend+0xd4>)
    8d72:	f7fe fc75 	bl	7660 <z_spin_lock_valid>
    8d76:	b118      	cbz	r0, 8d80 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    8d78:	482b      	ldr	r0, [pc, #172]	; (8e28 <z_impl_k_thread_suspend+0xd4>)
    8d7a:	f7fe fc91 	bl	76a0 <z_spin_lock_set_owner>
	return k;
    8d7e:	e01c      	b.n	8dba <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d80:	4f2a      	ldr	r7, [pc, #168]	; (8e2c <z_impl_k_thread_suspend+0xd8>)
    8d82:	238e      	movs	r3, #142	; 0x8e
    8d84:	463a      	mov	r2, r7
    8d86:	492a      	ldr	r1, [pc, #168]	; (8e30 <z_impl_k_thread_suspend+0xdc>)
    8d88:	482a      	ldr	r0, [pc, #168]	; (8e34 <z_impl_k_thread_suspend+0xe0>)
    8d8a:	f001 fdcd 	bl	a928 <assert_print>
    8d8e:	4926      	ldr	r1, [pc, #152]	; (8e28 <z_impl_k_thread_suspend+0xd4>)
    8d90:	4829      	ldr	r0, [pc, #164]	; (8e38 <z_impl_k_thread_suspend+0xe4>)
    8d92:	f001 fdc9 	bl	a928 <assert_print>
    8d96:	218e      	movs	r1, #142	; 0x8e
    8d98:	4638      	mov	r0, r7
    8d9a:	f001 fdbe 	bl	a91a <assert_post_action>
    8d9e:	e7eb      	b.n	8d78 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8da0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8da4:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8da6:	4621      	mov	r1, r4
    8da8:	4824      	ldr	r0, [pc, #144]	; (8e3c <z_impl_k_thread_suspend+0xe8>)
    8daa:	f7ff fb45 	bl	8438 <z_priq_dumb_remove>
}
    8dae:	e00a      	b.n	8dc6 <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    8db0:	f386 8811 	msr	BASEPRI, r6
    8db4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8db8:	2501      	movs	r5, #1
    8dba:	bb2d      	cbnz	r5, 8e08 <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    8dbc:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    8dbe:	f994 300d 	ldrsb.w	r3, [r4, #13]
    8dc2:	2b00      	cmp	r3, #0
    8dc4:	dbec      	blt.n	8da0 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8dc6:	7b63      	ldrb	r3, [r4, #13]
    8dc8:	f043 0310 	orr.w	r3, r3, #16
    8dcc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    8dce:	4b1c      	ldr	r3, [pc, #112]	; (8e40 <z_impl_k_thread_suspend+0xec>)
    8dd0:	6898      	ldr	r0, [r3, #8]
    8dd2:	42a0      	cmp	r0, r4
    8dd4:	bf14      	ite	ne
    8dd6:	2000      	movne	r0, #0
    8dd8:	2001      	moveq	r0, #1
    8dda:	f7ff fb51 	bl	8480 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8dde:	4812      	ldr	r0, [pc, #72]	; (8e28 <z_impl_k_thread_suspend+0xd4>)
    8de0:	f7fe fc4e 	bl	7680 <z_spin_unlock_valid>
    8de4:	2800      	cmp	r0, #0
    8de6:	d1e3      	bne.n	8db0 <z_impl_k_thread_suspend+0x5c>
    8de8:	4d10      	ldr	r5, [pc, #64]	; (8e2c <z_impl_k_thread_suspend+0xd8>)
    8dea:	23b9      	movs	r3, #185	; 0xb9
    8dec:	462a      	mov	r2, r5
    8dee:	4915      	ldr	r1, [pc, #84]	; (8e44 <z_impl_k_thread_suspend+0xf0>)
    8df0:	4810      	ldr	r0, [pc, #64]	; (8e34 <z_impl_k_thread_suspend+0xe0>)
    8df2:	f001 fd99 	bl	a928 <assert_print>
    8df6:	490c      	ldr	r1, [pc, #48]	; (8e28 <z_impl_k_thread_suspend+0xd4>)
    8df8:	4813      	ldr	r0, [pc, #76]	; (8e48 <z_impl_k_thread_suspend+0xf4>)
    8dfa:	f001 fd95 	bl	a928 <assert_print>
    8dfe:	21b9      	movs	r1, #185	; 0xb9
    8e00:	4628      	mov	r0, r5
    8e02:	f001 fd8a 	bl	a91a <assert_post_action>
    8e06:	e7d3      	b.n	8db0 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    8e08:	4b0d      	ldr	r3, [pc, #52]	; (8e40 <z_impl_k_thread_suspend+0xec>)
    8e0a:	689b      	ldr	r3, [r3, #8]
    8e0c:	42a3      	cmp	r3, r4
    8e0e:	d000      	beq.n	8e12 <z_impl_k_thread_suspend+0xbe>
}
    8e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    8e12:	f04f 0320 	mov.w	r3, #32
    8e16:	f3ef 8011 	mrs	r0, BASEPRI
    8e1a:	f383 8812 	msr	BASEPRI_MAX, r3
    8e1e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8e22:	f002 ff41 	bl	bca8 <z_reschedule_irqlock>
    8e26:	e7f3      	b.n	8e10 <z_impl_k_thread_suspend+0xbc>
    8e28:	200050e8 	.word	0x200050e8
    8e2c:	0000c440 	.word	0x0000c440
    8e30:	0000c4a0 	.word	0x0000c4a0
    8e34:	0000c294 	.word	0x0000c294
    8e38:	0000c4b8 	.word	0x0000c4b8
    8e3c:	200050cc 	.word	0x200050cc
    8e40:	200050ac 	.word	0x200050ac
    8e44:	0000c470 	.word	0x0000c470
    8e48:	0000c488 	.word	0x0000c488

00008e4c <k_sched_unlock>:
{
    8e4c:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    8e4e:	2400      	movs	r4, #0
    8e50:	f04f 0320 	mov.w	r3, #32
    8e54:	f3ef 8511 	mrs	r5, BASEPRI
    8e58:	f383 8812 	msr	BASEPRI_MAX, r3
    8e5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8e60:	4838      	ldr	r0, [pc, #224]	; (8f44 <k_sched_unlock+0xf8>)
    8e62:	f7fe fbfd 	bl	7660 <z_spin_lock_valid>
    8e66:	b118      	cbz	r0, 8e70 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    8e68:	4836      	ldr	r0, [pc, #216]	; (8f44 <k_sched_unlock+0xf8>)
    8e6a:	f7fe fc19 	bl	76a0 <z_spin_lock_set_owner>
	return k;
    8e6e:	e036      	b.n	8ede <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8e70:	4e35      	ldr	r6, [pc, #212]	; (8f48 <k_sched_unlock+0xfc>)
    8e72:	238e      	movs	r3, #142	; 0x8e
    8e74:	4632      	mov	r2, r6
    8e76:	4935      	ldr	r1, [pc, #212]	; (8f4c <k_sched_unlock+0x100>)
    8e78:	4835      	ldr	r0, [pc, #212]	; (8f50 <k_sched_unlock+0x104>)
    8e7a:	f001 fd55 	bl	a928 <assert_print>
    8e7e:	4931      	ldr	r1, [pc, #196]	; (8f44 <k_sched_unlock+0xf8>)
    8e80:	4834      	ldr	r0, [pc, #208]	; (8f54 <k_sched_unlock+0x108>)
    8e82:	f001 fd51 	bl	a928 <assert_print>
    8e86:	218e      	movs	r1, #142	; 0x8e
    8e88:	4630      	mov	r0, r6
    8e8a:	f001 fd46 	bl	a91a <assert_post_action>
    8e8e:	e7eb      	b.n	8e68 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    8e90:	4c31      	ldr	r4, [pc, #196]	; (8f58 <k_sched_unlock+0x10c>)
    8e92:	f240 33bb 	movw	r3, #955	; 0x3bb
    8e96:	4622      	mov	r2, r4
    8e98:	4930      	ldr	r1, [pc, #192]	; (8f5c <k_sched_unlock+0x110>)
    8e9a:	482d      	ldr	r0, [pc, #180]	; (8f50 <k_sched_unlock+0x104>)
    8e9c:	f001 fd44 	bl	a928 <assert_print>
    8ea0:	482f      	ldr	r0, [pc, #188]	; (8f60 <k_sched_unlock+0x114>)
    8ea2:	f001 fd41 	bl	a928 <assert_print>
    8ea6:	f240 31bb 	movw	r1, #955	; 0x3bb
    8eaa:	4620      	mov	r0, r4
    8eac:	f001 fd35 	bl	a91a <assert_post_action>
    8eb0:	e01b      	b.n	8eea <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    8eb2:	4c29      	ldr	r4, [pc, #164]	; (8f58 <k_sched_unlock+0x10c>)
    8eb4:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    8eb8:	4622      	mov	r2, r4
    8eba:	492a      	ldr	r1, [pc, #168]	; (8f64 <k_sched_unlock+0x118>)
    8ebc:	4824      	ldr	r0, [pc, #144]	; (8f50 <k_sched_unlock+0x104>)
    8ebe:	f001 fd33 	bl	a928 <assert_print>
    8ec2:	4827      	ldr	r0, [pc, #156]	; (8f60 <k_sched_unlock+0x114>)
    8ec4:	f001 fd30 	bl	a928 <assert_print>
    8ec8:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    8ecc:	4620      	mov	r0, r4
    8ece:	f001 fd24 	bl	a91a <assert_post_action>
    8ed2:	e00e      	b.n	8ef2 <k_sched_unlock+0xa6>
	__asm__ volatile(
    8ed4:	f385 8811 	msr	BASEPRI, r5
    8ed8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8edc:	2401      	movs	r4, #1
    8ede:	bb2c      	cbnz	r4, 8f2c <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    8ee0:	4b21      	ldr	r3, [pc, #132]	; (8f68 <k_sched_unlock+0x11c>)
    8ee2:	689b      	ldr	r3, [r3, #8]
    8ee4:	7bdb      	ldrb	r3, [r3, #15]
    8ee6:	2b00      	cmp	r3, #0
    8ee8:	d0d2      	beq.n	8e90 <k_sched_unlock+0x44>
    8eea:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    8eee:	2b00      	cmp	r3, #0
    8ef0:	d1df      	bne.n	8eb2 <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    8ef2:	4b1d      	ldr	r3, [pc, #116]	; (8f68 <k_sched_unlock+0x11c>)
    8ef4:	689a      	ldr	r2, [r3, #8]
    8ef6:	7bd3      	ldrb	r3, [r2, #15]
    8ef8:	3301      	adds	r3, #1
    8efa:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    8efc:	2000      	movs	r0, #0
    8efe:	f7ff fabf 	bl	8480 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8f02:	4810      	ldr	r0, [pc, #64]	; (8f44 <k_sched_unlock+0xf8>)
    8f04:	f7fe fbbc 	bl	7680 <z_spin_unlock_valid>
    8f08:	2800      	cmp	r0, #0
    8f0a:	d1e3      	bne.n	8ed4 <k_sched_unlock+0x88>
    8f0c:	4c0e      	ldr	r4, [pc, #56]	; (8f48 <k_sched_unlock+0xfc>)
    8f0e:	23b9      	movs	r3, #185	; 0xb9
    8f10:	4622      	mov	r2, r4
    8f12:	4916      	ldr	r1, [pc, #88]	; (8f6c <k_sched_unlock+0x120>)
    8f14:	480e      	ldr	r0, [pc, #56]	; (8f50 <k_sched_unlock+0x104>)
    8f16:	f001 fd07 	bl	a928 <assert_print>
    8f1a:	490a      	ldr	r1, [pc, #40]	; (8f44 <k_sched_unlock+0xf8>)
    8f1c:	4814      	ldr	r0, [pc, #80]	; (8f70 <k_sched_unlock+0x124>)
    8f1e:	f001 fd03 	bl	a928 <assert_print>
    8f22:	21b9      	movs	r1, #185	; 0xb9
    8f24:	4620      	mov	r0, r4
    8f26:	f001 fcf8 	bl	a91a <assert_post_action>
    8f2a:	e7d3      	b.n	8ed4 <k_sched_unlock+0x88>
	__asm__ volatile(
    8f2c:	f04f 0320 	mov.w	r3, #32
    8f30:	f3ef 8011 	mrs	r0, BASEPRI
    8f34:	f383 8812 	msr	BASEPRI_MAX, r3
    8f38:	f3bf 8f6f 	isb	sy
    8f3c:	f002 feb4 	bl	bca8 <z_reschedule_irqlock>
}
    8f40:	bd70      	pop	{r4, r5, r6, pc}
    8f42:	bf00      	nop
    8f44:	200050e8 	.word	0x200050e8
    8f48:	0000c440 	.word	0x0000c440
    8f4c:	0000c4a0 	.word	0x0000c4a0
    8f50:	0000c294 	.word	0x0000c294
    8f54:	0000c4b8 	.word	0x0000c4b8
    8f58:	0000dd78 	.word	0x0000dd78
    8f5c:	0000de00 	.word	0x0000de00
    8f60:	0000dcd0 	.word	0x0000dcd0
    8f64:	0000db88 	.word	0x0000db88
    8f68:	200050ac 	.word	0x200050ac
    8f6c:	0000c470 	.word	0x0000c470
    8f70:	0000c488 	.word	0x0000c488

00008f74 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    8f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    8f76:	7b43      	ldrb	r3, [r0, #13]
    8f78:	f013 0f08 	tst.w	r3, #8
    8f7c:	d145      	bne.n	900a <end_thread+0x96>
    8f7e:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    8f80:	f043 0308 	orr.w	r3, r3, #8
    8f84:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8f86:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    8f8a:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    8f8c:	f013 0f80 	tst.w	r3, #128	; 0x80
    8f90:	d12d      	bne.n	8fee <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    8f92:	68ab      	ldr	r3, [r5, #8]
    8f94:	b15b      	cbz	r3, 8fae <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8f96:	4628      	mov	r0, r5
    8f98:	f7ff f870 	bl	807c <pended_on_thread>
    8f9c:	4629      	mov	r1, r5
    8f9e:	f7ff fa4b 	bl	8438 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8fa2:	7b6b      	ldrb	r3, [r5, #13]
    8fa4:	f023 0302 	bic.w	r3, r3, #2
    8fa8:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    8faa:	2300      	movs	r3, #0
    8fac:	60ab      	str	r3, [r5, #8]
    8fae:	f105 0018 	add.w	r0, r5, #24
    8fb2:	f000 fca3 	bl	98fc <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    8fb6:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    8fba:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8fbc:	42bc      	cmp	r4, r7
    8fbe:	d01e      	beq.n	8ffe <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8fc0:	b1ec      	cbz	r4, 8ffe <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8fc2:	4620      	mov	r0, r4
    8fc4:	f7ff f85a 	bl	807c <pended_on_thread>
    8fc8:	4621      	mov	r1, r4
    8fca:	f7ff fa35 	bl	8438 <z_priq_dumb_remove>
    8fce:	7b63      	ldrb	r3, [r4, #13]
    8fd0:	f023 0302 	bic.w	r3, r3, #2
    8fd4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8fd6:	2600      	movs	r6, #0
    8fd8:	60a6      	str	r6, [r4, #8]
    8fda:	f104 0018 	add.w	r0, r4, #24
    8fde:	f000 fc8d 	bl	98fc <z_abort_timeout>
    8fe2:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    8fe6:	4620      	mov	r0, r4
    8fe8:	f7ff fba4 	bl	8734 <ready_thread>
    8fec:	e7e5      	b.n	8fba <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8ff2:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8ff4:	4601      	mov	r1, r0
    8ff6:	4805      	ldr	r0, [pc, #20]	; (900c <end_thread+0x98>)
    8ff8:	f7ff fa1e 	bl	8438 <z_priq_dumb_remove>
}
    8ffc:	e7c9      	b.n	8f92 <end_thread+0x1e>
		update_cache(1);
    8ffe:	2001      	movs	r0, #1
    9000:	f7ff fa3e 	bl	8480 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    9004:	4628      	mov	r0, r5
    9006:	f7fe fb53 	bl	76b0 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    900a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    900c:	200050cc 	.word	0x200050cc

00009010 <z_unpend1_no_timeout>:
{
    9010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9012:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    9014:	2500      	movs	r5, #0
    9016:	f04f 0320 	mov.w	r3, #32
    901a:	f3ef 8711 	mrs	r7, BASEPRI
    901e:	f383 8812 	msr	BASEPRI_MAX, r3
    9022:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9026:	4823      	ldr	r0, [pc, #140]	; (90b4 <z_unpend1_no_timeout+0xa4>)
    9028:	f7fe fb1a 	bl	7660 <z_spin_lock_valid>
    902c:	b120      	cbz	r0, 9038 <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
    902e:	4821      	ldr	r0, [pc, #132]	; (90b4 <z_unpend1_no_timeout+0xa4>)
    9030:	f7fe fb36 	bl	76a0 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    9034:	2400      	movs	r4, #0
	return k;
    9036:	e018      	b.n	906a <z_unpend1_no_timeout+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9038:	4c1f      	ldr	r4, [pc, #124]	; (90b8 <z_unpend1_no_timeout+0xa8>)
    903a:	238e      	movs	r3, #142	; 0x8e
    903c:	4622      	mov	r2, r4
    903e:	491f      	ldr	r1, [pc, #124]	; (90bc <z_unpend1_no_timeout+0xac>)
    9040:	481f      	ldr	r0, [pc, #124]	; (90c0 <z_unpend1_no_timeout+0xb0>)
    9042:	f001 fc71 	bl	a928 <assert_print>
    9046:	491b      	ldr	r1, [pc, #108]	; (90b4 <z_unpend1_no_timeout+0xa4>)
    9048:	481e      	ldr	r0, [pc, #120]	; (90c4 <z_unpend1_no_timeout+0xb4>)
    904a:	f001 fc6d 	bl	a928 <assert_print>
    904e:	218e      	movs	r1, #142	; 0x8e
    9050:	4620      	mov	r0, r4
    9052:	f001 fc62 	bl	a91a <assert_post_action>
    9056:	e7ea      	b.n	902e <z_unpend1_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9058:	4816      	ldr	r0, [pc, #88]	; (90b4 <z_unpend1_no_timeout+0xa4>)
    905a:	f7fe fb11 	bl	7680 <z_spin_unlock_valid>
    905e:	b1b8      	cbz	r0, 9090 <z_unpend1_no_timeout+0x80>
	__asm__ volatile(
    9060:	f387 8811 	msr	BASEPRI, r7
    9064:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9068:	2501      	movs	r5, #1
    906a:	bb0d      	cbnz	r5, 90b0 <z_unpend1_no_timeout+0xa0>
		thread = _priq_wait_best(&wait_q->waitq);
    906c:	4630      	mov	r0, r6
    906e:	f002 fe30 	bl	bcd2 <z_priq_dumb_best>
		if (thread != NULL) {
    9072:	4604      	mov	r4, r0
    9074:	2800      	cmp	r0, #0
    9076:	d0ef      	beq.n	9058 <z_unpend1_no_timeout+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9078:	f7ff f800 	bl	807c <pended_on_thread>
    907c:	4621      	mov	r1, r4
    907e:	f7ff f9db 	bl	8438 <z_priq_dumb_remove>
    9082:	7b63      	ldrb	r3, [r4, #13]
    9084:	f023 0302 	bic.w	r3, r3, #2
    9088:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    908a:	2300      	movs	r3, #0
    908c:	60a3      	str	r3, [r4, #8]
}
    908e:	e7e3      	b.n	9058 <z_unpend1_no_timeout+0x48>
    9090:	4d09      	ldr	r5, [pc, #36]	; (90b8 <z_unpend1_no_timeout+0xa8>)
    9092:	23b9      	movs	r3, #185	; 0xb9
    9094:	462a      	mov	r2, r5
    9096:	490c      	ldr	r1, [pc, #48]	; (90c8 <z_unpend1_no_timeout+0xb8>)
    9098:	4809      	ldr	r0, [pc, #36]	; (90c0 <z_unpend1_no_timeout+0xb0>)
    909a:	f001 fc45 	bl	a928 <assert_print>
    909e:	4905      	ldr	r1, [pc, #20]	; (90b4 <z_unpend1_no_timeout+0xa4>)
    90a0:	480a      	ldr	r0, [pc, #40]	; (90cc <z_unpend1_no_timeout+0xbc>)
    90a2:	f001 fc41 	bl	a928 <assert_print>
    90a6:	21b9      	movs	r1, #185	; 0xb9
    90a8:	4628      	mov	r0, r5
    90aa:	f001 fc36 	bl	a91a <assert_post_action>
    90ae:	e7d7      	b.n	9060 <z_unpend1_no_timeout+0x50>
}
    90b0:	4620      	mov	r0, r4
    90b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    90b4:	200050e8 	.word	0x200050e8
    90b8:	0000c440 	.word	0x0000c440
    90bc:	0000c4a0 	.word	0x0000c4a0
    90c0:	0000c294 	.word	0x0000c294
    90c4:	0000c4b8 	.word	0x0000c4b8
    90c8:	0000c470 	.word	0x0000c470
    90cc:	0000c488 	.word	0x0000c488

000090d0 <z_unpend_first_thread>:
{
    90d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    90d2:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    90d4:	2500      	movs	r5, #0
	__asm__ volatile(
    90d6:	f04f 0320 	mov.w	r3, #32
    90da:	f3ef 8711 	mrs	r7, BASEPRI
    90de:	f383 8812 	msr	BASEPRI_MAX, r3
    90e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    90e6:	4825      	ldr	r0, [pc, #148]	; (917c <z_unpend_first_thread+0xac>)
    90e8:	f7fe faba 	bl	7660 <z_spin_lock_valid>
    90ec:	b120      	cbz	r0, 90f8 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    90ee:	4823      	ldr	r0, [pc, #140]	; (917c <z_unpend_first_thread+0xac>)
    90f0:	f7fe fad6 	bl	76a0 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    90f4:	2400      	movs	r4, #0
	return k;
    90f6:	e018      	b.n	912a <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    90f8:	4c21      	ldr	r4, [pc, #132]	; (9180 <z_unpend_first_thread+0xb0>)
    90fa:	238e      	movs	r3, #142	; 0x8e
    90fc:	4622      	mov	r2, r4
    90fe:	4921      	ldr	r1, [pc, #132]	; (9184 <z_unpend_first_thread+0xb4>)
    9100:	4821      	ldr	r0, [pc, #132]	; (9188 <z_unpend_first_thread+0xb8>)
    9102:	f001 fc11 	bl	a928 <assert_print>
    9106:	491d      	ldr	r1, [pc, #116]	; (917c <z_unpend_first_thread+0xac>)
    9108:	4820      	ldr	r0, [pc, #128]	; (918c <z_unpend_first_thread+0xbc>)
    910a:	f001 fc0d 	bl	a928 <assert_print>
    910e:	218e      	movs	r1, #142	; 0x8e
    9110:	4620      	mov	r0, r4
    9112:	f001 fc02 	bl	a91a <assert_post_action>
    9116:	e7ea      	b.n	90ee <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9118:	4818      	ldr	r0, [pc, #96]	; (917c <z_unpend_first_thread+0xac>)
    911a:	f7fe fab1 	bl	7680 <z_spin_unlock_valid>
    911e:	b1d8      	cbz	r0, 9158 <z_unpend_first_thread+0x88>
	__asm__ volatile(
    9120:	f387 8811 	msr	BASEPRI, r7
    9124:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9128:	2501      	movs	r5, #1
    912a:	bb2d      	cbnz	r5, 9178 <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    912c:	4630      	mov	r0, r6
    912e:	f002 fdd0 	bl	bcd2 <z_priq_dumb_best>
		if (thread != NULL) {
    9132:	4604      	mov	r4, r0
    9134:	2800      	cmp	r0, #0
    9136:	d0ef      	beq.n	9118 <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9138:	f7fe ffa0 	bl	807c <pended_on_thread>
    913c:	4621      	mov	r1, r4
    913e:	f7ff f97b 	bl	8438 <z_priq_dumb_remove>
    9142:	7b63      	ldrb	r3, [r4, #13]
    9144:	f023 0302 	bic.w	r3, r3, #2
    9148:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    914a:	2300      	movs	r3, #0
    914c:	60a3      	str	r3, [r4, #8]
    914e:	f104 0018 	add.w	r0, r4, #24
    9152:	f000 fbd3 	bl	98fc <z_abort_timeout>
    9156:	e7df      	b.n	9118 <z_unpend_first_thread+0x48>
    9158:	4d09      	ldr	r5, [pc, #36]	; (9180 <z_unpend_first_thread+0xb0>)
    915a:	23b9      	movs	r3, #185	; 0xb9
    915c:	462a      	mov	r2, r5
    915e:	490c      	ldr	r1, [pc, #48]	; (9190 <z_unpend_first_thread+0xc0>)
    9160:	4809      	ldr	r0, [pc, #36]	; (9188 <z_unpend_first_thread+0xb8>)
    9162:	f001 fbe1 	bl	a928 <assert_print>
    9166:	4905      	ldr	r1, [pc, #20]	; (917c <z_unpend_first_thread+0xac>)
    9168:	480a      	ldr	r0, [pc, #40]	; (9194 <z_unpend_first_thread+0xc4>)
    916a:	f001 fbdd 	bl	a928 <assert_print>
    916e:	21b9      	movs	r1, #185	; 0xb9
    9170:	4628      	mov	r0, r5
    9172:	f001 fbd2 	bl	a91a <assert_post_action>
    9176:	e7d3      	b.n	9120 <z_unpend_first_thread+0x50>
}
    9178:	4620      	mov	r0, r4
    917a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    917c:	200050e8 	.word	0x200050e8
    9180:	0000c440 	.word	0x0000c440
    9184:	0000c4a0 	.word	0x0000c4a0
    9188:	0000c294 	.word	0x0000c294
    918c:	0000c4b8 	.word	0x0000c4b8
    9190:	0000c470 	.word	0x0000c470
    9194:	0000c488 	.word	0x0000c488

00009198 <z_sched_init>:
{
    9198:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    919a:	4804      	ldr	r0, [pc, #16]	; (91ac <z_sched_init+0x14>)
    919c:	f002 fda0 	bl	bce0 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    91a0:	2100      	movs	r1, #0
    91a2:	4608      	mov	r0, r1
    91a4:	f7fe ffa8 	bl	80f8 <k_sched_time_slice_set>
}
    91a8:	bd08      	pop	{r3, pc}
    91aa:	bf00      	nop
    91ac:	200050c8 	.word	0x200050c8

000091b0 <z_impl_k_yield>:
{
    91b0:	b570      	push	{r4, r5, r6, lr}
    91b2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    91b6:	2b00      	cmp	r3, #0
    91b8:	d149      	bne.n	924e <z_impl_k_yield+0x9e>
	__asm__ volatile(
    91ba:	f04f 0320 	mov.w	r3, #32
    91be:	f3ef 8611 	mrs	r6, BASEPRI
    91c2:	f383 8812 	msr	BASEPRI_MAX, r3
    91c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    91ca:	4843      	ldr	r0, [pc, #268]	; (92d8 <z_impl_k_yield+0x128>)
    91cc:	f7fe fa48 	bl	7660 <z_spin_lock_valid>
    91d0:	2800      	cmp	r0, #0
    91d2:	d04d      	beq.n	9270 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    91d4:	4840      	ldr	r0, [pc, #256]	; (92d8 <z_impl_k_yield+0x128>)
    91d6:	f7fe fa63 	bl	76a0 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    91da:	4c40      	ldr	r4, [pc, #256]	; (92dc <z_impl_k_yield+0x12c>)
    91dc:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    91de:	7b4b      	ldrb	r3, [r1, #13]
    91e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    91e4:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    91e6:	f104 0020 	add.w	r0, r4, #32
    91ea:	f7ff f925 	bl	8438 <z_priq_dumb_remove>
	queue_thread(_current);
    91ee:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    91f0:	7b6b      	ldrb	r3, [r5, #13]
    91f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    91f6:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    91f8:	4b39      	ldr	r3, [pc, #228]	; (92e0 <z_impl_k_yield+0x130>)
    91fa:	429d      	cmp	r5, r3
    91fc:	d048      	beq.n	9290 <z_impl_k_yield+0xe0>
	return list->head == list;
    91fe:	4b37      	ldr	r3, [pc, #220]	; (92dc <z_impl_k_yield+0x12c>)
    9200:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9204:	429c      	cmp	r4, r3
    9206:	d055      	beq.n	92b4 <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9208:	b16c      	cbz	r4, 9226 <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    920a:	4621      	mov	r1, r4
    920c:	4628      	mov	r0, r5
    920e:	f002 fd41 	bl	bc94 <z_sched_prio_cmp>
    9212:	2800      	cmp	r0, #0
    9214:	dc48      	bgt.n	92a8 <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9216:	b134      	cbz	r4, 9226 <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    9218:	4b30      	ldr	r3, [pc, #192]	; (92dc <z_impl_k_yield+0x12c>)
    921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    921c:	429c      	cmp	r4, r3
    921e:	d002      	beq.n	9226 <z_impl_k_yield+0x76>
    9220:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9222:	2c00      	cmp	r4, #0
    9224:	d1f0      	bne.n	9208 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    9226:	4b2d      	ldr	r3, [pc, #180]	; (92dc <z_impl_k_yield+0x12c>)
    9228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    922a:	f103 0120 	add.w	r1, r3, #32
    922e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    9230:	606a      	str	r2, [r5, #4]
	tail->next = node;
    9232:	6015      	str	r5, [r2, #0]
	list->tail = node;
    9234:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    9236:	2001      	movs	r0, #1
    9238:	f7ff f922 	bl	8480 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    923c:	4826      	ldr	r0, [pc, #152]	; (92d8 <z_impl_k_yield+0x128>)
    923e:	f7fe fa1f 	bl	7680 <z_spin_unlock_valid>
    9242:	2800      	cmp	r0, #0
    9244:	d038      	beq.n	92b8 <z_impl_k_yield+0x108>
    9246:	4630      	mov	r0, r6
    9248:	f7f9 fe1e 	bl	2e88 <arch_swap>
}
    924c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    924e:	4c25      	ldr	r4, [pc, #148]	; (92e4 <z_impl_k_yield+0x134>)
    9250:	f240 5332 	movw	r3, #1330	; 0x532
    9254:	4622      	mov	r2, r4
    9256:	4924      	ldr	r1, [pc, #144]	; (92e8 <z_impl_k_yield+0x138>)
    9258:	4824      	ldr	r0, [pc, #144]	; (92ec <z_impl_k_yield+0x13c>)
    925a:	f001 fb65 	bl	a928 <assert_print>
    925e:	4824      	ldr	r0, [pc, #144]	; (92f0 <z_impl_k_yield+0x140>)
    9260:	f001 fb62 	bl	a928 <assert_print>
    9264:	f240 5132 	movw	r1, #1330	; 0x532
    9268:	4620      	mov	r0, r4
    926a:	f001 fb56 	bl	a91a <assert_post_action>
    926e:	e7a4      	b.n	91ba <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9270:	4c20      	ldr	r4, [pc, #128]	; (92f4 <z_impl_k_yield+0x144>)
    9272:	238e      	movs	r3, #142	; 0x8e
    9274:	4622      	mov	r2, r4
    9276:	4920      	ldr	r1, [pc, #128]	; (92f8 <z_impl_k_yield+0x148>)
    9278:	481c      	ldr	r0, [pc, #112]	; (92ec <z_impl_k_yield+0x13c>)
    927a:	f001 fb55 	bl	a928 <assert_print>
    927e:	4916      	ldr	r1, [pc, #88]	; (92d8 <z_impl_k_yield+0x128>)
    9280:	481e      	ldr	r0, [pc, #120]	; (92fc <z_impl_k_yield+0x14c>)
    9282:	f001 fb51 	bl	a928 <assert_print>
    9286:	218e      	movs	r1, #142	; 0x8e
    9288:	4620      	mov	r0, r4
    928a:	f001 fb46 	bl	a91a <assert_post_action>
    928e:	e7a1      	b.n	91d4 <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9290:	4c14      	ldr	r4, [pc, #80]	; (92e4 <z_impl_k_yield+0x134>)
    9292:	23ba      	movs	r3, #186	; 0xba
    9294:	4622      	mov	r2, r4
    9296:	491a      	ldr	r1, [pc, #104]	; (9300 <z_impl_k_yield+0x150>)
    9298:	4814      	ldr	r0, [pc, #80]	; (92ec <z_impl_k_yield+0x13c>)
    929a:	f001 fb45 	bl	a928 <assert_print>
    929e:	21ba      	movs	r1, #186	; 0xba
    92a0:	4620      	mov	r0, r4
    92a2:	f001 fb3a 	bl	a91a <assert_post_action>
    92a6:	e7aa      	b.n	91fe <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    92a8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    92aa:	606b      	str	r3, [r5, #4]
	node->next = successor;
    92ac:	602c      	str	r4, [r5, #0]
	prev->next = node;
    92ae:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    92b0:	6065      	str	r5, [r4, #4]
}
    92b2:	e7c0      	b.n	9236 <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    92b4:	2400      	movs	r4, #0
    92b6:	e7a7      	b.n	9208 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    92b8:	4c0e      	ldr	r4, [pc, #56]	; (92f4 <z_impl_k_yield+0x144>)
    92ba:	23d0      	movs	r3, #208	; 0xd0
    92bc:	4622      	mov	r2, r4
    92be:	4911      	ldr	r1, [pc, #68]	; (9304 <z_impl_k_yield+0x154>)
    92c0:	480a      	ldr	r0, [pc, #40]	; (92ec <z_impl_k_yield+0x13c>)
    92c2:	f001 fb31 	bl	a928 <assert_print>
    92c6:	4904      	ldr	r1, [pc, #16]	; (92d8 <z_impl_k_yield+0x128>)
    92c8:	480f      	ldr	r0, [pc, #60]	; (9308 <z_impl_k_yield+0x158>)
    92ca:	f001 fb2d 	bl	a928 <assert_print>
    92ce:	21d0      	movs	r1, #208	; 0xd0
    92d0:	4620      	mov	r0, r4
    92d2:	f001 fb22 	bl	a91a <assert_post_action>
    92d6:	e7b6      	b.n	9246 <z_impl_k_yield+0x96>
    92d8:	200050e8 	.word	0x200050e8
    92dc:	200050ac 	.word	0x200050ac
    92e0:	20004410 	.word	0x20004410
    92e4:	0000dd78 	.word	0x0000dd78
    92e8:	0000db88 	.word	0x0000db88
    92ec:	0000c294 	.word	0x0000c294
    92f0:	0000dcd0 	.word	0x0000dcd0
    92f4:	0000c440 	.word	0x0000c440
    92f8:	0000c4a0 	.word	0x0000c4a0
    92fc:	0000c4b8 	.word	0x0000c4b8
    9300:	0000ddb4 	.word	0x0000ddb4
    9304:	0000c470 	.word	0x0000c470
    9308:	0000c488 	.word	0x0000c488

0000930c <z_tick_sleep>:
{
    930c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9310:	4604      	mov	r4, r0
    9312:	460e      	mov	r6, r1
    9314:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    9318:	2b00      	cmp	r3, #0
    931a:	d14e      	bne.n	93ba <z_tick_sleep+0xae>
	if (ticks == 0) {
    931c:	ea54 0306 	orrs.w	r3, r4, r6
    9320:	d05c      	beq.n	93dc <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    9322:	f06f 0301 	mvn.w	r3, #1
    9326:	1b1b      	subs	r3, r3, r4
    9328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    932c:	eb62 0206 	sbc.w	r2, r2, r6
    9330:	2b01      	cmp	r3, #1
    9332:	f172 0300 	sbcs.w	r3, r2, #0
    9336:	db55      	blt.n	93e4 <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    9338:	f06f 0501 	mvn.w	r5, #1
    933c:	1b2d      	subs	r5, r5, r4
    933e:	f04f 0320 	mov.w	r3, #32
    9342:	f3ef 8911 	mrs	r9, BASEPRI
    9346:	f383 8812 	msr	BASEPRI_MAX, r3
    934a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    934e:	4840      	ldr	r0, [pc, #256]	; (9450 <z_tick_sleep+0x144>)
    9350:	f7fe f986 	bl	7660 <z_spin_lock_valid>
    9354:	2800      	cmp	r0, #0
    9356:	d049      	beq.n	93ec <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    9358:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 9450 <z_tick_sleep+0x144>
    935c:	4640      	mov	r0, r8
    935e:	f7fe f99f 	bl	76a0 <z_spin_lock_set_owner>
	pending_current = _current;
    9362:	4f3c      	ldr	r7, [pc, #240]	; (9454 <z_tick_sleep+0x148>)
    9364:	68b8      	ldr	r0, [r7, #8]
    9366:	4b3c      	ldr	r3, [pc, #240]	; (9458 <z_tick_sleep+0x14c>)
    9368:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    936a:	f7ff fb5b 	bl	8a24 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    936e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    9370:	4622      	mov	r2, r4
    9372:	4633      	mov	r3, r6
    9374:	4939      	ldr	r1, [pc, #228]	; (945c <z_tick_sleep+0x150>)
    9376:	3018      	adds	r0, #24
    9378:	f000 f9dc 	bl	9734 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    937c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    937e:	7b53      	ldrb	r3, [r2, #13]
    9380:	f043 0310 	orr.w	r3, r3, #16
    9384:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9386:	4640      	mov	r0, r8
    9388:	f7fe f97a 	bl	7680 <z_spin_unlock_valid>
    938c:	2800      	cmp	r0, #0
    938e:	d03d      	beq.n	940c <z_tick_sleep+0x100>
    9390:	4648      	mov	r0, r9
    9392:	f7f9 fd79 	bl	2e88 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    9396:	4b2f      	ldr	r3, [pc, #188]	; (9454 <z_tick_sleep+0x148>)
    9398:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    939a:	7b5b      	ldrb	r3, [r3, #13]
    939c:	f013 0f10 	tst.w	r3, #16
    93a0:	d144      	bne.n	942c <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    93a2:	f002 fcb8 	bl	bd16 <sys_clock_tick_get_32>
    93a6:	1a28      	subs	r0, r5, r0
    93a8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    93ac:	2801      	cmp	r0, #1
    93ae:	f173 0300 	sbcs.w	r3, r3, #0
    93b2:	da00      	bge.n	93b6 <z_tick_sleep+0xaa>
	return 0;
    93b4:	2000      	movs	r0, #0
}
    93b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    93ba:	4d29      	ldr	r5, [pc, #164]	; (9460 <z_tick_sleep+0x154>)
    93bc:	f240 534e 	movw	r3, #1358	; 0x54e
    93c0:	462a      	mov	r2, r5
    93c2:	4928      	ldr	r1, [pc, #160]	; (9464 <z_tick_sleep+0x158>)
    93c4:	4828      	ldr	r0, [pc, #160]	; (9468 <z_tick_sleep+0x15c>)
    93c6:	f001 faaf 	bl	a928 <assert_print>
    93ca:	4828      	ldr	r0, [pc, #160]	; (946c <z_tick_sleep+0x160>)
    93cc:	f001 faac 	bl	a928 <assert_print>
    93d0:	f240 514e 	movw	r1, #1358	; 0x54e
    93d4:	4628      	mov	r0, r5
    93d6:	f001 faa0 	bl	a91a <assert_post_action>
    93da:	e79f      	b.n	931c <z_tick_sleep+0x10>
	z_impl_k_yield();
    93dc:	f7ff fee8 	bl	91b0 <z_impl_k_yield>
		return 0;
    93e0:	2000      	movs	r0, #0
    93e2:	e7e8      	b.n	93b6 <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    93e4:	f002 fc97 	bl	bd16 <sys_clock_tick_get_32>
    93e8:	1905      	adds	r5, r0, r4
    93ea:	e7a8      	b.n	933e <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    93ec:	4f20      	ldr	r7, [pc, #128]	; (9470 <z_tick_sleep+0x164>)
    93ee:	238e      	movs	r3, #142	; 0x8e
    93f0:	463a      	mov	r2, r7
    93f2:	4920      	ldr	r1, [pc, #128]	; (9474 <z_tick_sleep+0x168>)
    93f4:	481c      	ldr	r0, [pc, #112]	; (9468 <z_tick_sleep+0x15c>)
    93f6:	f001 fa97 	bl	a928 <assert_print>
    93fa:	4915      	ldr	r1, [pc, #84]	; (9450 <z_tick_sleep+0x144>)
    93fc:	481e      	ldr	r0, [pc, #120]	; (9478 <z_tick_sleep+0x16c>)
    93fe:	f001 fa93 	bl	a928 <assert_print>
    9402:	218e      	movs	r1, #142	; 0x8e
    9404:	4638      	mov	r0, r7
    9406:	f001 fa88 	bl	a91a <assert_post_action>
    940a:	e7a5      	b.n	9358 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    940c:	4c18      	ldr	r4, [pc, #96]	; (9470 <z_tick_sleep+0x164>)
    940e:	23d0      	movs	r3, #208	; 0xd0
    9410:	4622      	mov	r2, r4
    9412:	491a      	ldr	r1, [pc, #104]	; (947c <z_tick_sleep+0x170>)
    9414:	4814      	ldr	r0, [pc, #80]	; (9468 <z_tick_sleep+0x15c>)
    9416:	f001 fa87 	bl	a928 <assert_print>
    941a:	4641      	mov	r1, r8
    941c:	4818      	ldr	r0, [pc, #96]	; (9480 <z_tick_sleep+0x174>)
    941e:	f001 fa83 	bl	a928 <assert_print>
    9422:	21d0      	movs	r1, #208	; 0xd0
    9424:	4620      	mov	r0, r4
    9426:	f001 fa78 	bl	a91a <assert_post_action>
    942a:	e7b1      	b.n	9390 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    942c:	4c0c      	ldr	r4, [pc, #48]	; (9460 <z_tick_sleep+0x154>)
    942e:	f240 536f 	movw	r3, #1391	; 0x56f
    9432:	4622      	mov	r2, r4
    9434:	4913      	ldr	r1, [pc, #76]	; (9484 <z_tick_sleep+0x178>)
    9436:	480c      	ldr	r0, [pc, #48]	; (9468 <z_tick_sleep+0x15c>)
    9438:	f001 fa76 	bl	a928 <assert_print>
    943c:	480b      	ldr	r0, [pc, #44]	; (946c <z_tick_sleep+0x160>)
    943e:	f001 fa73 	bl	a928 <assert_print>
    9442:	f240 516f 	movw	r1, #1391	; 0x56f
    9446:	4620      	mov	r0, r4
    9448:	f001 fa67 	bl	a91a <assert_post_action>
    944c:	e7a9      	b.n	93a2 <z_tick_sleep+0x96>
    944e:	bf00      	nop
    9450:	200050e8 	.word	0x200050e8
    9454:	200050ac 	.word	0x200050ac
    9458:	200050e4 	.word	0x200050e4
    945c:	0000893d 	.word	0x0000893d
    9460:	0000dd78 	.word	0x0000dd78
    9464:	0000db88 	.word	0x0000db88
    9468:	0000c294 	.word	0x0000c294
    946c:	0000dcd0 	.word	0x0000dcd0
    9470:	0000c440 	.word	0x0000c440
    9474:	0000c4a0 	.word	0x0000c4a0
    9478:	0000c4b8 	.word	0x0000c4b8
    947c:	0000c470 	.word	0x0000c470
    9480:	0000c488 	.word	0x0000c488
    9484:	0000de34 	.word	0x0000de34

00009488 <z_impl_k_sleep>:
{
    9488:	b570      	push	{r4, r5, r6, lr}
    948a:	4605      	mov	r5, r0
    948c:	460c      	mov	r4, r1
    948e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    9492:	bb13      	cbnz	r3, 94da <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9494:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    9498:	bf08      	it	eq
    949a:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    949e:	d02d      	beq.n	94fc <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    94a0:	4628      	mov	r0, r5
    94a2:	4621      	mov	r1, r4
    94a4:	f7ff ff32 	bl	930c <z_tick_sleep>
    94a8:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    94aa:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    94ac:	0151      	lsls	r1, r2, #5
    94ae:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    94b2:	0143      	lsls	r3, r0, #5
    94b4:	1a1b      	subs	r3, r3, r0
    94b6:	eb61 0102 	sbc.w	r1, r1, r2
    94ba:	0088      	lsls	r0, r1, #2
    94bc:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    94c0:	009b      	lsls	r3, r3, #2
    94c2:	eb13 030c 	adds.w	r3, r3, ip
    94c6:	eb42 0000 	adc.w	r0, r2, r0
    94ca:	00c0      	lsls	r0, r0, #3
    94cc:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    94d0:	f3c3 3310 	ubfx	r3, r3, #12, #17
    94d4:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    94d8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    94da:	4e0c      	ldr	r6, [pc, #48]	; (950c <z_impl_k_sleep+0x84>)
    94dc:	f240 537e 	movw	r3, #1406	; 0x57e
    94e0:	4632      	mov	r2, r6
    94e2:	490b      	ldr	r1, [pc, #44]	; (9510 <z_impl_k_sleep+0x88>)
    94e4:	480b      	ldr	r0, [pc, #44]	; (9514 <z_impl_k_sleep+0x8c>)
    94e6:	f001 fa1f 	bl	a928 <assert_print>
    94ea:	480b      	ldr	r0, [pc, #44]	; (9518 <z_impl_k_sleep+0x90>)
    94ec:	f001 fa1c 	bl	a928 <assert_print>
    94f0:	f240 517e 	movw	r1, #1406	; 0x57e
    94f4:	4630      	mov	r0, r6
    94f6:	f001 fa10 	bl	a91a <assert_post_action>
    94fa:	e7cb      	b.n	9494 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    94fc:	4b07      	ldr	r3, [pc, #28]	; (951c <z_impl_k_sleep+0x94>)
    94fe:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    9500:	f7ff fc28 	bl	8d54 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    9504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9508:	e7e6      	b.n	94d8 <z_impl_k_sleep+0x50>
    950a:	bf00      	nop
    950c:	0000dd78 	.word	0x0000dd78
    9510:	0000db88 	.word	0x0000db88
    9514:	0000c294 	.word	0x0000c294
    9518:	0000dcd0 	.word	0x0000dcd0
    951c:	200050ac 	.word	0x200050ac

00009520 <z_impl_z_current_get>:
}
    9520:	4b01      	ldr	r3, [pc, #4]	; (9528 <z_impl_z_current_get+0x8>)
    9522:	6898      	ldr	r0, [r3, #8]
    9524:	4770      	bx	lr
    9526:	bf00      	nop
    9528:	200050ac 	.word	0x200050ac

0000952c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    952c:	b570      	push	{r4, r5, r6, lr}
    952e:	4604      	mov	r4, r0
    9530:	f04f 0320 	mov.w	r3, #32
    9534:	f3ef 8511 	mrs	r5, BASEPRI
    9538:	f383 8812 	msr	BASEPRI_MAX, r3
    953c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9540:	4840      	ldr	r0, [pc, #256]	; (9644 <z_thread_abort+0x118>)
    9542:	f7fe f88d 	bl	7660 <z_spin_lock_valid>
    9546:	b1b8      	cbz	r0, 9578 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    9548:	483e      	ldr	r0, [pc, #248]	; (9644 <z_thread_abort+0x118>)
    954a:	f7fe f8a9 	bl	76a0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    954e:	7b63      	ldrb	r3, [r4, #13]
    9550:	f013 0f08 	tst.w	r3, #8
    9554:	d120      	bne.n	9598 <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    9556:	4620      	mov	r0, r4
    9558:	f7ff fd0c 	bl	8f74 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    955c:	4b3a      	ldr	r3, [pc, #232]	; (9648 <z_thread_abort+0x11c>)
    955e:	689b      	ldr	r3, [r3, #8]
    9560:	42a3      	cmp	r3, r4
    9562:	d032      	beq.n	95ca <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9564:	4837      	ldr	r0, [pc, #220]	; (9644 <z_thread_abort+0x118>)
    9566:	f7fe f88b 	bl	7680 <z_spin_unlock_valid>
    956a:	2800      	cmp	r0, #0
    956c:	d059      	beq.n	9622 <z_thread_abort+0xf6>
	__asm__ volatile(
    956e:	f385 8811 	msr	BASEPRI, r5
    9572:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    9576:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9578:	4e34      	ldr	r6, [pc, #208]	; (964c <z_thread_abort+0x120>)
    957a:	238e      	movs	r3, #142	; 0x8e
    957c:	4632      	mov	r2, r6
    957e:	4934      	ldr	r1, [pc, #208]	; (9650 <z_thread_abort+0x124>)
    9580:	4834      	ldr	r0, [pc, #208]	; (9654 <z_thread_abort+0x128>)
    9582:	f001 f9d1 	bl	a928 <assert_print>
    9586:	492f      	ldr	r1, [pc, #188]	; (9644 <z_thread_abort+0x118>)
    9588:	4833      	ldr	r0, [pc, #204]	; (9658 <z_thread_abort+0x12c>)
    958a:	f001 f9cd 	bl	a928 <assert_print>
    958e:	218e      	movs	r1, #142	; 0x8e
    9590:	4630      	mov	r0, r6
    9592:	f001 f9c2 	bl	a91a <assert_post_action>
    9596:	e7d7      	b.n	9548 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9598:	482a      	ldr	r0, [pc, #168]	; (9644 <z_thread_abort+0x118>)
    959a:	f7fe f871 	bl	7680 <z_spin_unlock_valid>
    959e:	b120      	cbz	r0, 95aa <z_thread_abort+0x7e>
    95a0:	f385 8811 	msr	BASEPRI, r5
    95a4:	f3bf 8f6f 	isb	sy
		return;
    95a8:	e7e5      	b.n	9576 <z_thread_abort+0x4a>
    95aa:	4c28      	ldr	r4, [pc, #160]	; (964c <z_thread_abort+0x120>)
    95ac:	23b9      	movs	r3, #185	; 0xb9
    95ae:	4622      	mov	r2, r4
    95b0:	492a      	ldr	r1, [pc, #168]	; (965c <z_thread_abort+0x130>)
    95b2:	4828      	ldr	r0, [pc, #160]	; (9654 <z_thread_abort+0x128>)
    95b4:	f001 f9b8 	bl	a928 <assert_print>
    95b8:	4922      	ldr	r1, [pc, #136]	; (9644 <z_thread_abort+0x118>)
    95ba:	4829      	ldr	r0, [pc, #164]	; (9660 <z_thread_abort+0x134>)
    95bc:	f001 f9b4 	bl	a928 <assert_print>
    95c0:	21b9      	movs	r1, #185	; 0xb9
    95c2:	4620      	mov	r0, r4
    95c4:	f001 f9a9 	bl	a91a <assert_post_action>
    95c8:	e7ea      	b.n	95a0 <z_thread_abort+0x74>
    95ca:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    95ce:	2b00      	cmp	r3, #0
    95d0:	d1c8      	bne.n	9564 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    95d2:	481c      	ldr	r0, [pc, #112]	; (9644 <z_thread_abort+0x118>)
    95d4:	f7fe f854 	bl	7680 <z_spin_unlock_valid>
    95d8:	b198      	cbz	r0, 9602 <z_thread_abort+0xd6>
    95da:	4628      	mov	r0, r5
    95dc:	f7f9 fc54 	bl	2e88 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    95e0:	4c20      	ldr	r4, [pc, #128]	; (9664 <z_thread_abort+0x138>)
    95e2:	f240 63ac 	movw	r3, #1708	; 0x6ac
    95e6:	4622      	mov	r2, r4
    95e8:	491f      	ldr	r1, [pc, #124]	; (9668 <z_thread_abort+0x13c>)
    95ea:	481a      	ldr	r0, [pc, #104]	; (9654 <z_thread_abort+0x128>)
    95ec:	f001 f99c 	bl	a928 <assert_print>
    95f0:	481e      	ldr	r0, [pc, #120]	; (966c <z_thread_abort+0x140>)
    95f2:	f001 f999 	bl	a928 <assert_print>
    95f6:	f240 61ac 	movw	r1, #1708	; 0x6ac
    95fa:	4620      	mov	r0, r4
    95fc:	f001 f98d 	bl	a91a <assert_post_action>
    9600:	e7b0      	b.n	9564 <z_thread_abort+0x38>
    9602:	4c12      	ldr	r4, [pc, #72]	; (964c <z_thread_abort+0x120>)
    9604:	23d0      	movs	r3, #208	; 0xd0
    9606:	4622      	mov	r2, r4
    9608:	4914      	ldr	r1, [pc, #80]	; (965c <z_thread_abort+0x130>)
    960a:	4812      	ldr	r0, [pc, #72]	; (9654 <z_thread_abort+0x128>)
    960c:	f001 f98c 	bl	a928 <assert_print>
    9610:	490c      	ldr	r1, [pc, #48]	; (9644 <z_thread_abort+0x118>)
    9612:	4813      	ldr	r0, [pc, #76]	; (9660 <z_thread_abort+0x134>)
    9614:	f001 f988 	bl	a928 <assert_print>
    9618:	21d0      	movs	r1, #208	; 0xd0
    961a:	4620      	mov	r0, r4
    961c:	f001 f97d 	bl	a91a <assert_post_action>
    9620:	e7db      	b.n	95da <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9622:	4c0a      	ldr	r4, [pc, #40]	; (964c <z_thread_abort+0x120>)
    9624:	23b9      	movs	r3, #185	; 0xb9
    9626:	4622      	mov	r2, r4
    9628:	490c      	ldr	r1, [pc, #48]	; (965c <z_thread_abort+0x130>)
    962a:	480a      	ldr	r0, [pc, #40]	; (9654 <z_thread_abort+0x128>)
    962c:	f001 f97c 	bl	a928 <assert_print>
    9630:	4904      	ldr	r1, [pc, #16]	; (9644 <z_thread_abort+0x118>)
    9632:	480b      	ldr	r0, [pc, #44]	; (9660 <z_thread_abort+0x134>)
    9634:	f001 f978 	bl	a928 <assert_print>
    9638:	21b9      	movs	r1, #185	; 0xb9
    963a:	4620      	mov	r0, r4
    963c:	f001 f96d 	bl	a91a <assert_post_action>
    9640:	e795      	b.n	956e <z_thread_abort+0x42>
    9642:	bf00      	nop
    9644:	200050e8 	.word	0x200050e8
    9648:	200050ac 	.word	0x200050ac
    964c:	0000c440 	.word	0x0000c440
    9650:	0000c4a0 	.word	0x0000c4a0
    9654:	0000c294 	.word	0x0000c294
    9658:	0000c4b8 	.word	0x0000c4b8
    965c:	0000c470 	.word	0x0000c470
    9660:	0000c488 	.word	0x0000c488
    9664:	0000dd78 	.word	0x0000dd78
    9668:	0000c954 	.word	0x0000c954
    966c:	0000de74 	.word	0x0000de74

00009670 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    9670:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    9672:	4806      	ldr	r0, [pc, #24]	; (968c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    9674:	4a06      	ldr	r2, [pc, #24]	; (9690 <z_data_copy+0x20>)
    9676:	1a12      	subs	r2, r2, r0
    9678:	4906      	ldr	r1, [pc, #24]	; (9694 <z_data_copy+0x24>)
    967a:	f002 fa93 	bl	bba4 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    967e:	4a06      	ldr	r2, [pc, #24]	; (9698 <z_data_copy+0x28>)
    9680:	4906      	ldr	r1, [pc, #24]	; (969c <z_data_copy+0x2c>)
    9682:	4807      	ldr	r0, [pc, #28]	; (96a0 <z_data_copy+0x30>)
    9684:	f002 fa8e 	bl	bba4 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    9688:	bd08      	pop	{r3, pc}
    968a:	bf00      	nop
    968c:	20000000 	.word	0x20000000
    9690:	20004240 	.word	0x20004240
    9694:	0000e13c 	.word	0x0000e13c
    9698:	00000000 	.word	0x00000000
    969c:	0000e13c 	.word	0x0000e13c
    96a0:	20000000 	.word	0x20000000

000096a4 <first>:
	return list->head == list;
    96a4:	4b03      	ldr	r3, [pc, #12]	; (96b4 <first+0x10>)
    96a6:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    96a8:	4298      	cmp	r0, r3
    96aa:	d000      	beq.n	96ae <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    96ac:	4770      	bx	lr
    96ae:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    96b0:	e7fc      	b.n	96ac <first+0x8>
    96b2:	bf00      	nop
    96b4:	200040e4 	.word	0x200040e4

000096b8 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    96b8:	b130      	cbz	r0, 96c8 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    96ba:	4a04      	ldr	r2, [pc, #16]	; (96cc <next+0x14>)
    96bc:	6852      	ldr	r2, [r2, #4]
    96be:	4290      	cmp	r0, r2
    96c0:	d001      	beq.n	96c6 <next+0xe>
    96c2:	6800      	ldr	r0, [r0, #0]
    96c4:	4770      	bx	lr
    96c6:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    96c8:	4770      	bx	lr
    96ca:	bf00      	nop
    96cc:	200040e4 	.word	0x200040e4

000096d0 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    96d0:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    96d2:	4b04      	ldr	r3, [pc, #16]	; (96e4 <elapsed+0x14>)
    96d4:	681b      	ldr	r3, [r3, #0]
    96d6:	b10b      	cbz	r3, 96dc <elapsed+0xc>
    96d8:	2000      	movs	r0, #0
}
    96da:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    96dc:	f7fb fc58 	bl	4f90 <sys_clock_elapsed>
    96e0:	e7fb      	b.n	96da <elapsed+0xa>
    96e2:	bf00      	nop
    96e4:	200050f4 	.word	0x200050f4

000096e8 <next_timeout>:

static int32_t next_timeout(void)
{
    96e8:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    96ea:	f7ff ffdb 	bl	96a4 <first>
    96ee:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    96f0:	f7ff ffee 	bl	96d0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    96f4:	b17c      	cbz	r4, 9716 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    96f6:	6923      	ldr	r3, [r4, #16]
    96f8:	6962      	ldr	r2, [r4, #20]
    96fa:	1a1b      	subs	r3, r3, r0
    96fc:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    9700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    9704:	f170 0200 	sbcs.w	r2, r0, #0
    9708:	da08      	bge.n	971c <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    970a:	2800      	cmp	r0, #0
    970c:	db01      	blt.n	9712 <next_timeout+0x2a>
    970e:	4618      	mov	r0, r3
    9710:	e006      	b.n	9720 <next_timeout+0x38>
    9712:	2300      	movs	r3, #0
    9714:	e7fb      	b.n	970e <next_timeout+0x26>
		ret = MAX_WAIT;
    9716:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    971a:	e001      	b.n	9720 <next_timeout+0x38>
    971c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    9720:	4b03      	ldr	r3, [pc, #12]	; (9730 <next_timeout+0x48>)
    9722:	691b      	ldr	r3, [r3, #16]
    9724:	b113      	cbz	r3, 972c <next_timeout+0x44>
    9726:	4283      	cmp	r3, r0
    9728:	da00      	bge.n	972c <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    972a:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    972c:	bd10      	pop	{r4, pc}
    972e:	bf00      	nop
    9730:	200050ac 	.word	0x200050ac

00009734 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9738:	bf08      	it	eq
    973a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    973e:	f000 80c1 	beq.w	98c4 <z_add_timeout+0x190>
{
    9742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9746:	4604      	mov	r4, r0
    9748:	460f      	mov	r7, r1
    974a:	4692      	mov	sl, r2
    974c:	461d      	mov	r5, r3
	return node->next != NULL;
    974e:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    9750:	b173      	cbz	r3, 9770 <z_add_timeout+0x3c>
    9752:	f8df 8174 	ldr.w	r8, [pc, #372]	; 98c8 <z_add_timeout+0x194>
    9756:	2363      	movs	r3, #99	; 0x63
    9758:	4642      	mov	r2, r8
    975a:	495c      	ldr	r1, [pc, #368]	; (98cc <z_add_timeout+0x198>)
    975c:	485c      	ldr	r0, [pc, #368]	; (98d0 <z_add_timeout+0x19c>)
    975e:	f001 f8e3 	bl	a928 <assert_print>
    9762:	485c      	ldr	r0, [pc, #368]	; (98d4 <z_add_timeout+0x1a0>)
    9764:	f001 f8e0 	bl	a928 <assert_print>
    9768:	2163      	movs	r1, #99	; 0x63
    976a:	4640      	mov	r0, r8
    976c:	f001 f8d5 	bl	a91a <assert_post_action>
	to->fn = fn;
    9770:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    9772:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    9776:	f04f 0320 	mov.w	r3, #32
    977a:	f3ef 8711 	mrs	r7, BASEPRI
    977e:	f383 8812 	msr	BASEPRI_MAX, r3
    9782:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9786:	4854      	ldr	r0, [pc, #336]	; (98d8 <z_add_timeout+0x1a4>)
    9788:	f7fd ff6a 	bl	7660 <z_spin_lock_valid>
    978c:	b118      	cbz	r0, 9796 <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    978e:	4852      	ldr	r0, [pc, #328]	; (98d8 <z_add_timeout+0x1a4>)
    9790:	f7fd ff86 	bl	76a0 <z_spin_lock_set_owner>
	return k;
    9794:	e038      	b.n	9808 <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9796:	f8df 9144 	ldr.w	r9, [pc, #324]	; 98dc <z_add_timeout+0x1a8>
    979a:	238e      	movs	r3, #142	; 0x8e
    979c:	464a      	mov	r2, r9
    979e:	4950      	ldr	r1, [pc, #320]	; (98e0 <z_add_timeout+0x1ac>)
    97a0:	484b      	ldr	r0, [pc, #300]	; (98d0 <z_add_timeout+0x19c>)
    97a2:	f001 f8c1 	bl	a928 <assert_print>
    97a6:	494c      	ldr	r1, [pc, #304]	; (98d8 <z_add_timeout+0x1a4>)
    97a8:	484e      	ldr	r0, [pc, #312]	; (98e4 <z_add_timeout+0x1b0>)
    97aa:	f001 f8bd 	bl	a928 <assert_print>
    97ae:	218e      	movs	r1, #142	; 0x8e
    97b0:	4648      	mov	r0, r9
    97b2:	f001 f8b2 	bl	a91a <assert_post_action>
    97b6:	e7ea      	b.n	978e <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    97b8:	f11a 0801 	adds.w	r8, sl, #1
    97bc:	f145 0900 	adc.w	r9, r5, #0
    97c0:	f7ff ff86 	bl	96d0 <elapsed>
    97c4:	eb18 0300 	adds.w	r3, r8, r0
    97c8:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    97cc:	6123      	str	r3, [r4, #16]
    97ce:	6160      	str	r0, [r4, #20]
    97d0:	e03d      	b.n	984e <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    97d2:	1a51      	subs	r1, r2, r1
    97d4:	eb66 0303 	sbc.w	r3, r6, r3
    97d8:	6101      	str	r1, [r0, #16]
    97da:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    97dc:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    97de:	6063      	str	r3, [r4, #4]
	node->next = successor;
    97e0:	6020      	str	r0, [r4, #0]
	prev->next = node;
    97e2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    97e4:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    97e6:	2800      	cmp	r0, #0
    97e8:	d045      	beq.n	9876 <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    97ea:	f7ff ff5b 	bl	96a4 <first>
    97ee:	4284      	cmp	r4, r0
    97f0:	d048      	beq.n	9884 <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    97f2:	4839      	ldr	r0, [pc, #228]	; (98d8 <z_add_timeout+0x1a4>)
    97f4:	f7fd ff44 	bl	7680 <z_spin_unlock_valid>
    97f8:	2800      	cmp	r0, #0
    97fa:	d050      	beq.n	989e <z_add_timeout+0x16a>
	__asm__ volatile(
    97fc:	f387 8811 	msr	BASEPRI, r7
    9800:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9804:	f04f 0801 	mov.w	r8, #1
    9808:	f1b8 0f00 	cmp.w	r8, #0
    980c:	d158      	bne.n	98c0 <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    980e:	4653      	mov	r3, sl
    9810:	f06f 0101 	mvn.w	r1, #1
    9814:	ebb1 010a 	subs.w	r1, r1, sl
    9818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    981c:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    9820:	2a00      	cmp	r2, #0
    9822:	dbc9      	blt.n	97b8 <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    9824:	4a30      	ldr	r2, [pc, #192]	; (98e8 <z_add_timeout+0x1b4>)
    9826:	6811      	ldr	r1, [r2, #0]
    9828:	6852      	ldr	r2, [r2, #4]
    982a:	185b      	adds	r3, r3, r1
    982c:	eb42 0205 	adc.w	r2, r2, r5
    9830:	f06f 0101 	mvn.w	r1, #1
    9834:	1acb      	subs	r3, r1, r3
    9836:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    983a:	4618      	mov	r0, r3
    983c:	4611      	mov	r1, r2
    983e:	2b01      	cmp	r3, #1
    9840:	f172 0300 	sbcs.w	r3, r2, #0
    9844:	da01      	bge.n	984a <z_add_timeout+0x116>
    9846:	2001      	movs	r0, #1
    9848:	2100      	movs	r1, #0
    984a:	6120      	str	r0, [r4, #16]
    984c:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    984e:	f7ff ff29 	bl	96a4 <first>
    9852:	2800      	cmp	r0, #0
    9854:	d0c7      	beq.n	97e6 <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    9856:	6902      	ldr	r2, [r0, #16]
    9858:	6946      	ldr	r6, [r0, #20]
    985a:	6921      	ldr	r1, [r4, #16]
    985c:	6963      	ldr	r3, [r4, #20]
    985e:	4291      	cmp	r1, r2
    9860:	eb73 0c06 	sbcs.w	ip, r3, r6
    9864:	dbb5      	blt.n	97d2 <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    9866:	1a89      	subs	r1, r1, r2
    9868:	eb63 0306 	sbc.w	r3, r3, r6
    986c:	6121      	str	r1, [r4, #16]
    986e:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    9870:	f7ff ff22 	bl	96b8 <next>
    9874:	e7ed      	b.n	9852 <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    9876:	4b1d      	ldr	r3, [pc, #116]	; (98ec <z_add_timeout+0x1b8>)
    9878:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    987a:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    987c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    987e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    9880:	605c      	str	r4, [r3, #4]
}
    9882:	e7b2      	b.n	97ea <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    9884:	f7ff ff30 	bl	96e8 <next_timeout>

			if (next_time == 0 ||
    9888:	4603      	mov	r3, r0
    988a:	b118      	cbz	r0, 9894 <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    988c:	4a18      	ldr	r2, [pc, #96]	; (98f0 <z_add_timeout+0x1bc>)
    988e:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    9890:	4282      	cmp	r2, r0
    9892:	d0ae      	beq.n	97f2 <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    9894:	2100      	movs	r1, #0
    9896:	4618      	mov	r0, r3
    9898:	f7fb fb48 	bl	4f2c <sys_clock_set_timeout>
    989c:	e7a9      	b.n	97f2 <z_add_timeout+0xbe>
    989e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 98dc <z_add_timeout+0x1a8>
    98a2:	23b9      	movs	r3, #185	; 0xb9
    98a4:	4642      	mov	r2, r8
    98a6:	4913      	ldr	r1, [pc, #76]	; (98f4 <z_add_timeout+0x1c0>)
    98a8:	4809      	ldr	r0, [pc, #36]	; (98d0 <z_add_timeout+0x19c>)
    98aa:	f001 f83d 	bl	a928 <assert_print>
    98ae:	490a      	ldr	r1, [pc, #40]	; (98d8 <z_add_timeout+0x1a4>)
    98b0:	4811      	ldr	r0, [pc, #68]	; (98f8 <z_add_timeout+0x1c4>)
    98b2:	f001 f839 	bl	a928 <assert_print>
    98b6:	21b9      	movs	r1, #185	; 0xb9
    98b8:	4640      	mov	r0, r8
    98ba:	f001 f82e 	bl	a91a <assert_post_action>
    98be:	e79d      	b.n	97fc <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    98c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    98c4:	4770      	bx	lr
    98c6:	bf00      	nop
    98c8:	0000de98 	.word	0x0000de98
    98cc:	0000debc 	.word	0x0000debc
    98d0:	0000c294 	.word	0x0000c294
    98d4:	0000dcd0 	.word	0x0000dcd0
    98d8:	200050f8 	.word	0x200050f8
    98dc:	0000c440 	.word	0x0000c440
    98e0:	0000c4a0 	.word	0x0000c4a0
    98e4:	0000c4b8 	.word	0x0000c4b8
    98e8:	20004570 	.word	0x20004570
    98ec:	200040e4 	.word	0x200040e4
    98f0:	200050ac 	.word	0x200050ac
    98f4:	0000c470 	.word	0x0000c470
    98f8:	0000c488 	.word	0x0000c488

000098fc <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    98fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9900:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    9902:	2400      	movs	r4, #0
	__asm__ volatile(
    9904:	f04f 0320 	mov.w	r3, #32
    9908:	f3ef 8711 	mrs	r7, BASEPRI
    990c:	f383 8812 	msr	BASEPRI_MAX, r3
    9910:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9914:	481f      	ldr	r0, [pc, #124]	; (9994 <z_abort_timeout+0x98>)
    9916:	f7fd fea3 	bl	7660 <z_spin_lock_valid>
    991a:	b128      	cbz	r0, 9928 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    991c:	481d      	ldr	r0, [pc, #116]	; (9994 <z_abort_timeout+0x98>)
    991e:	f7fd febf 	bl	76a0 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    9922:	f06f 0815 	mvn.w	r8, #21
	return k;
    9926:	e018      	b.n	995a <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9928:	4e1b      	ldr	r6, [pc, #108]	; (9998 <z_abort_timeout+0x9c>)
    992a:	238e      	movs	r3, #142	; 0x8e
    992c:	4632      	mov	r2, r6
    992e:	491b      	ldr	r1, [pc, #108]	; (999c <z_abort_timeout+0xa0>)
    9930:	481b      	ldr	r0, [pc, #108]	; (99a0 <z_abort_timeout+0xa4>)
    9932:	f000 fff9 	bl	a928 <assert_print>
    9936:	4917      	ldr	r1, [pc, #92]	; (9994 <z_abort_timeout+0x98>)
    9938:	481a      	ldr	r0, [pc, #104]	; (99a4 <z_abort_timeout+0xa8>)
    993a:	f000 fff5 	bl	a928 <assert_print>
    993e:	218e      	movs	r1, #142	; 0x8e
    9940:	4630      	mov	r0, r6
    9942:	f000 ffea 	bl	a91a <assert_post_action>
    9946:	e7e9      	b.n	991c <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9948:	4812      	ldr	r0, [pc, #72]	; (9994 <z_abort_timeout+0x98>)
    994a:	f7fd fe99 	bl	7680 <z_spin_unlock_valid>
    994e:	b170      	cbz	r0, 996e <z_abort_timeout+0x72>
	__asm__ volatile(
    9950:	f387 8811 	msr	BASEPRI, r7
    9954:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9958:	2401      	movs	r4, #1
    995a:	4626      	mov	r6, r4
    995c:	b9bc      	cbnz	r4, 998e <z_abort_timeout+0x92>
	return node->next != NULL;
    995e:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    9960:	2b00      	cmp	r3, #0
    9962:	d0f1      	beq.n	9948 <z_abort_timeout+0x4c>
			remove_timeout(to);
    9964:	4628      	mov	r0, r5
    9966:	f002 f9bf 	bl	bce8 <remove_timeout>
			ret = 0;
    996a:	46b0      	mov	r8, r6
    996c:	e7ec      	b.n	9948 <z_abort_timeout+0x4c>
    996e:	4c0a      	ldr	r4, [pc, #40]	; (9998 <z_abort_timeout+0x9c>)
    9970:	23b9      	movs	r3, #185	; 0xb9
    9972:	4622      	mov	r2, r4
    9974:	490c      	ldr	r1, [pc, #48]	; (99a8 <z_abort_timeout+0xac>)
    9976:	480a      	ldr	r0, [pc, #40]	; (99a0 <z_abort_timeout+0xa4>)
    9978:	f000 ffd6 	bl	a928 <assert_print>
    997c:	4905      	ldr	r1, [pc, #20]	; (9994 <z_abort_timeout+0x98>)
    997e:	480b      	ldr	r0, [pc, #44]	; (99ac <z_abort_timeout+0xb0>)
    9980:	f000 ffd2 	bl	a928 <assert_print>
    9984:	21b9      	movs	r1, #185	; 0xb9
    9986:	4620      	mov	r0, r4
    9988:	f000 ffc7 	bl	a91a <assert_post_action>
    998c:	e7e0      	b.n	9950 <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    998e:	4640      	mov	r0, r8
    9990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9994:	200050f8 	.word	0x200050f8
    9998:	0000c440 	.word	0x0000c440
    999c:	0000c4a0 	.word	0x0000c4a0
    99a0:	0000c294 	.word	0x0000c294
    99a4:	0000c4b8 	.word	0x0000c4b8
    99a8:	0000c470 	.word	0x0000c470
    99ac:	0000c488 	.word	0x0000c488

000099b0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    99b0:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    99b2:	2500      	movs	r5, #0
	__asm__ volatile(
    99b4:	f04f 0320 	mov.w	r3, #32
    99b8:	f3ef 8611 	mrs	r6, BASEPRI
    99bc:	f383 8812 	msr	BASEPRI_MAX, r3
    99c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    99c4:	481c      	ldr	r0, [pc, #112]	; (9a38 <z_get_next_timeout_expiry+0x88>)
    99c6:	f7fd fe4b 	bl	7660 <z_spin_lock_valid>
    99ca:	b128      	cbz	r0, 99d8 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    99cc:	481a      	ldr	r0, [pc, #104]	; (9a38 <z_get_next_timeout_expiry+0x88>)
    99ce:	f7fd fe67 	bl	76a0 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    99d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    99d6:	e014      	b.n	9a02 <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    99d8:	4c18      	ldr	r4, [pc, #96]	; (9a3c <z_get_next_timeout_expiry+0x8c>)
    99da:	238e      	movs	r3, #142	; 0x8e
    99dc:	4622      	mov	r2, r4
    99de:	4918      	ldr	r1, [pc, #96]	; (9a40 <z_get_next_timeout_expiry+0x90>)
    99e0:	4818      	ldr	r0, [pc, #96]	; (9a44 <z_get_next_timeout_expiry+0x94>)
    99e2:	f000 ffa1 	bl	a928 <assert_print>
    99e6:	4914      	ldr	r1, [pc, #80]	; (9a38 <z_get_next_timeout_expiry+0x88>)
    99e8:	4817      	ldr	r0, [pc, #92]	; (9a48 <z_get_next_timeout_expiry+0x98>)
    99ea:	f000 ff9d 	bl	a928 <assert_print>
    99ee:	218e      	movs	r1, #142	; 0x8e
    99f0:	4620      	mov	r0, r4
    99f2:	f000 ff92 	bl	a91a <assert_post_action>
    99f6:	e7e9      	b.n	99cc <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    99f8:	f386 8811 	msr	BASEPRI, r6
    99fc:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9a00:	2501      	movs	r5, #1
    9a02:	b9bd      	cbnz	r5, 9a34 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    9a04:	f7ff fe70 	bl	96e8 <next_timeout>
    9a08:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9a0a:	480b      	ldr	r0, [pc, #44]	; (9a38 <z_get_next_timeout_expiry+0x88>)
    9a0c:	f7fd fe38 	bl	7680 <z_spin_unlock_valid>
    9a10:	2800      	cmp	r0, #0
    9a12:	d1f1      	bne.n	99f8 <z_get_next_timeout_expiry+0x48>
    9a14:	4d09      	ldr	r5, [pc, #36]	; (9a3c <z_get_next_timeout_expiry+0x8c>)
    9a16:	23b9      	movs	r3, #185	; 0xb9
    9a18:	462a      	mov	r2, r5
    9a1a:	490c      	ldr	r1, [pc, #48]	; (9a4c <z_get_next_timeout_expiry+0x9c>)
    9a1c:	4809      	ldr	r0, [pc, #36]	; (9a44 <z_get_next_timeout_expiry+0x94>)
    9a1e:	f000 ff83 	bl	a928 <assert_print>
    9a22:	4905      	ldr	r1, [pc, #20]	; (9a38 <z_get_next_timeout_expiry+0x88>)
    9a24:	480a      	ldr	r0, [pc, #40]	; (9a50 <z_get_next_timeout_expiry+0xa0>)
    9a26:	f000 ff7f 	bl	a928 <assert_print>
    9a2a:	21b9      	movs	r1, #185	; 0xb9
    9a2c:	4628      	mov	r0, r5
    9a2e:	f000 ff74 	bl	a91a <assert_post_action>
    9a32:	e7e1      	b.n	99f8 <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    9a34:	4620      	mov	r0, r4
    9a36:	bd70      	pop	{r4, r5, r6, pc}
    9a38:	200050f8 	.word	0x200050f8
    9a3c:	0000c440 	.word	0x0000c440
    9a40:	0000c4a0 	.word	0x0000c4a0
    9a44:	0000c294 	.word	0x0000c294
    9a48:	0000c4b8 	.word	0x0000c4b8
    9a4c:	0000c470 	.word	0x0000c470
    9a50:	0000c488 	.word	0x0000c488

00009a54 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    9a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a58:	4606      	mov	r6, r0
    9a5a:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    9a5c:	2500      	movs	r5, #0
	__asm__ volatile(
    9a5e:	f04f 0320 	mov.w	r3, #32
    9a62:	f3ef 8711 	mrs	r7, BASEPRI
    9a66:	f383 8812 	msr	BASEPRI_MAX, r3
    9a6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9a6e:	4825      	ldr	r0, [pc, #148]	; (9b04 <z_set_timeout_expiry+0xb0>)
    9a70:	f7fd fdf6 	bl	7660 <z_spin_lock_valid>
    9a74:	b118      	cbz	r0, 9a7e <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    9a76:	4823      	ldr	r0, [pc, #140]	; (9b04 <z_set_timeout_expiry+0xb0>)
    9a78:	f7fd fe12 	bl	76a0 <z_spin_lock_set_owner>
	return k;
    9a7c:	e01e      	b.n	9abc <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9a7e:	4c22      	ldr	r4, [pc, #136]	; (9b08 <z_set_timeout_expiry+0xb4>)
    9a80:	238e      	movs	r3, #142	; 0x8e
    9a82:	4622      	mov	r2, r4
    9a84:	4921      	ldr	r1, [pc, #132]	; (9b0c <z_set_timeout_expiry+0xb8>)
    9a86:	4822      	ldr	r0, [pc, #136]	; (9b10 <z_set_timeout_expiry+0xbc>)
    9a88:	f000 ff4e 	bl	a928 <assert_print>
    9a8c:	491d      	ldr	r1, [pc, #116]	; (9b04 <z_set_timeout_expiry+0xb0>)
    9a8e:	4821      	ldr	r0, [pc, #132]	; (9b14 <z_set_timeout_expiry+0xc0>)
    9a90:	f000 ff4a 	bl	a928 <assert_print>
    9a94:	218e      	movs	r1, #142	; 0x8e
    9a96:	4620      	mov	r0, r4
    9a98:	f000 ff3f 	bl	a91a <assert_post_action>
    9a9c:	e7eb      	b.n	9a76 <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    9a9e:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    9aa0:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    9aa4:	2801      	cmp	r0, #1
    9aa6:	dd00      	ble.n	9aaa <z_set_timeout_expiry+0x56>
    9aa8:	b99c      	cbnz	r4, 9ad2 <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9aaa:	4816      	ldr	r0, [pc, #88]	; (9b04 <z_set_timeout_expiry+0xb0>)
    9aac:	f7fd fde8 	bl	7680 <z_spin_unlock_valid>
    9ab0:	b1b0      	cbz	r0, 9ae0 <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    9ab2:	f387 8811 	msr	BASEPRI, r7
    9ab6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9aba:	2501      	movs	r5, #1
    9abc:	462c      	mov	r4, r5
    9abe:	b9fd      	cbnz	r5, 9b00 <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    9ac0:	f7ff fe12 	bl	96e8 <next_timeout>
			      || (ticks <= next_to);
    9ac4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    9ac8:	d0e9      	beq.n	9a9e <z_set_timeout_expiry+0x4a>
    9aca:	42b0      	cmp	r0, r6
    9acc:	dbe8      	blt.n	9aa0 <z_set_timeout_expiry+0x4c>
    9ace:	2401      	movs	r4, #1
    9ad0:	e7e6      	b.n	9aa0 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    9ad2:	4641      	mov	r1, r8
    9ad4:	42b0      	cmp	r0, r6
    9ad6:	bfa8      	it	ge
    9ad8:	4630      	movge	r0, r6
    9ada:	f7fb fa27 	bl	4f2c <sys_clock_set_timeout>
    9ade:	e7e4      	b.n	9aaa <z_set_timeout_expiry+0x56>
    9ae0:	4c09      	ldr	r4, [pc, #36]	; (9b08 <z_set_timeout_expiry+0xb4>)
    9ae2:	23b9      	movs	r3, #185	; 0xb9
    9ae4:	4622      	mov	r2, r4
    9ae6:	490c      	ldr	r1, [pc, #48]	; (9b18 <z_set_timeout_expiry+0xc4>)
    9ae8:	4809      	ldr	r0, [pc, #36]	; (9b10 <z_set_timeout_expiry+0xbc>)
    9aea:	f000 ff1d 	bl	a928 <assert_print>
    9aee:	4905      	ldr	r1, [pc, #20]	; (9b04 <z_set_timeout_expiry+0xb0>)
    9af0:	480a      	ldr	r0, [pc, #40]	; (9b1c <z_set_timeout_expiry+0xc8>)
    9af2:	f000 ff19 	bl	a928 <assert_print>
    9af6:	21b9      	movs	r1, #185	; 0xb9
    9af8:	4620      	mov	r0, r4
    9afa:	f000 ff0e 	bl	a91a <assert_post_action>
    9afe:	e7d8      	b.n	9ab2 <z_set_timeout_expiry+0x5e>
		}
	}
}
    9b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b04:	200050f8 	.word	0x200050f8
    9b08:	0000c440 	.word	0x0000c440
    9b0c:	0000c4a0 	.word	0x0000c4a0
    9b10:	0000c294 	.word	0x0000c294
    9b14:	0000c4b8 	.word	0x0000c4b8
    9b18:	0000c470 	.word	0x0000c470
    9b1c:	0000c488 	.word	0x0000c488

00009b20 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    9b20:	b570      	push	{r4, r5, r6, lr}
    9b22:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    9b24:	f7fe fd5e 	bl	85e4 <z_time_slice>
	__asm__ volatile(
    9b28:	f04f 0320 	mov.w	r3, #32
    9b2c:	f3ef 8511 	mrs	r5, BASEPRI
    9b30:	f383 8812 	msr	BASEPRI_MAX, r3
    9b34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9b38:	4854      	ldr	r0, [pc, #336]	; (9c8c <sys_clock_announce+0x16c>)
    9b3a:	f7fd fd91 	bl	7660 <z_spin_lock_valid>
    9b3e:	b128      	cbz	r0, 9b4c <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    9b40:	4852      	ldr	r0, [pc, #328]	; (9c8c <sys_clock_announce+0x16c>)
    9b42:	f7fd fdad 	bl	76a0 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    9b46:	4b52      	ldr	r3, [pc, #328]	; (9c90 <sys_clock_announce+0x170>)
    9b48:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    9b4a:	e022      	b.n	9b92 <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9b4c:	4e51      	ldr	r6, [pc, #324]	; (9c94 <sys_clock_announce+0x174>)
    9b4e:	238e      	movs	r3, #142	; 0x8e
    9b50:	4632      	mov	r2, r6
    9b52:	4951      	ldr	r1, [pc, #324]	; (9c98 <sys_clock_announce+0x178>)
    9b54:	4851      	ldr	r0, [pc, #324]	; (9c9c <sys_clock_announce+0x17c>)
    9b56:	f000 fee7 	bl	a928 <assert_print>
    9b5a:	494c      	ldr	r1, [pc, #304]	; (9c8c <sys_clock_announce+0x16c>)
    9b5c:	4850      	ldr	r0, [pc, #320]	; (9ca0 <sys_clock_announce+0x180>)
    9b5e:	f000 fee3 	bl	a928 <assert_print>
    9b62:	218e      	movs	r1, #142	; 0x8e
    9b64:	4630      	mov	r0, r6
    9b66:	f000 fed8 	bl	a91a <assert_post_action>
    9b6a:	e7e9      	b.n	9b40 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9b6c:	4e49      	ldr	r6, [pc, #292]	; (9c94 <sys_clock_announce+0x174>)
    9b6e:	23b9      	movs	r3, #185	; 0xb9
    9b70:	4632      	mov	r2, r6
    9b72:	494c      	ldr	r1, [pc, #304]	; (9ca4 <sys_clock_announce+0x184>)
    9b74:	4849      	ldr	r0, [pc, #292]	; (9c9c <sys_clock_announce+0x17c>)
    9b76:	f000 fed7 	bl	a928 <assert_print>
    9b7a:	4944      	ldr	r1, [pc, #272]	; (9c8c <sys_clock_announce+0x16c>)
    9b7c:	484a      	ldr	r0, [pc, #296]	; (9ca8 <sys_clock_announce+0x188>)
    9b7e:	f000 fed3 	bl	a928 <assert_print>
    9b82:	21b9      	movs	r1, #185	; 0xb9
    9b84:	4630      	mov	r0, r6
    9b86:	f000 fec8 	bl	a91a <assert_post_action>
    9b8a:	e027      	b.n	9bdc <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    9b8c:	483f      	ldr	r0, [pc, #252]	; (9c8c <sys_clock_announce+0x16c>)
    9b8e:	f7fd fd87 	bl	76a0 <z_spin_lock_set_owner>
    9b92:	f7ff fd87 	bl	96a4 <first>
    9b96:	4604      	mov	r4, r0
    9b98:	2800      	cmp	r0, #0
    9b9a:	d043      	beq.n	9c24 <sys_clock_announce+0x104>
    9b9c:	6902      	ldr	r2, [r0, #16]
    9b9e:	6941      	ldr	r1, [r0, #20]
    9ba0:	4b3b      	ldr	r3, [pc, #236]	; (9c90 <sys_clock_announce+0x170>)
    9ba2:	681b      	ldr	r3, [r3, #0]
    9ba4:	17d8      	asrs	r0, r3, #31
    9ba6:	4293      	cmp	r3, r2
    9ba8:	eb70 0101 	sbcs.w	r1, r0, r1
    9bac:	db3a      	blt.n	9c24 <sys_clock_announce+0x104>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    9bae:	483f      	ldr	r0, [pc, #252]	; (9cac <sys_clock_announce+0x18c>)
    9bb0:	6801      	ldr	r1, [r0, #0]
    9bb2:	6846      	ldr	r6, [r0, #4]
    9bb4:	1889      	adds	r1, r1, r2
    9bb6:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    9bba:	6001      	str	r1, [r0, #0]
    9bbc:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    9bbe:	1a9b      	subs	r3, r3, r2
    9bc0:	4a33      	ldr	r2, [pc, #204]	; (9c90 <sys_clock_announce+0x170>)
    9bc2:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    9bc4:	2200      	movs	r2, #0
    9bc6:	2300      	movs	r3, #0
    9bc8:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    9bcc:	4620      	mov	r0, r4
    9bce:	f002 f88b 	bl	bce8 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9bd2:	482e      	ldr	r0, [pc, #184]	; (9c8c <sys_clock_announce+0x16c>)
    9bd4:	f7fd fd54 	bl	7680 <z_spin_unlock_valid>
    9bd8:	2800      	cmp	r0, #0
    9bda:	d0c7      	beq.n	9b6c <sys_clock_announce+0x4c>
	__asm__ volatile(
    9bdc:	f385 8811 	msr	BASEPRI, r5
    9be0:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    9be4:	68a3      	ldr	r3, [r4, #8]
    9be6:	4620      	mov	r0, r4
    9be8:	4798      	blx	r3
	__asm__ volatile(
    9bea:	f04f 0320 	mov.w	r3, #32
    9bee:	f3ef 8511 	mrs	r5, BASEPRI
    9bf2:	f383 8812 	msr	BASEPRI_MAX, r3
    9bf6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9bfa:	4824      	ldr	r0, [pc, #144]	; (9c8c <sys_clock_announce+0x16c>)
    9bfc:	f7fd fd30 	bl	7660 <z_spin_lock_valid>
    9c00:	2800      	cmp	r0, #0
    9c02:	d1c3      	bne.n	9b8c <sys_clock_announce+0x6c>
    9c04:	4c23      	ldr	r4, [pc, #140]	; (9c94 <sys_clock_announce+0x174>)
    9c06:	238e      	movs	r3, #142	; 0x8e
    9c08:	4622      	mov	r2, r4
    9c0a:	4923      	ldr	r1, [pc, #140]	; (9c98 <sys_clock_announce+0x178>)
    9c0c:	4823      	ldr	r0, [pc, #140]	; (9c9c <sys_clock_announce+0x17c>)
    9c0e:	f000 fe8b 	bl	a928 <assert_print>
    9c12:	491e      	ldr	r1, [pc, #120]	; (9c8c <sys_clock_announce+0x16c>)
    9c14:	4822      	ldr	r0, [pc, #136]	; (9ca0 <sys_clock_announce+0x180>)
    9c16:	f000 fe87 	bl	a928 <assert_print>
    9c1a:	218e      	movs	r1, #142	; 0x8e
    9c1c:	4620      	mov	r0, r4
    9c1e:	f000 fe7c 	bl	a91a <assert_post_action>
    9c22:	e7b3      	b.n	9b8c <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    9c24:	b144      	cbz	r4, 9c38 <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    9c26:	4b1a      	ldr	r3, [pc, #104]	; (9c90 <sys_clock_announce+0x170>)
    9c28:	6819      	ldr	r1, [r3, #0]
    9c2a:	6923      	ldr	r3, [r4, #16]
    9c2c:	6962      	ldr	r2, [r4, #20]
    9c2e:	1a5b      	subs	r3, r3, r1
    9c30:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    9c34:	6123      	str	r3, [r4, #16]
    9c36:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    9c38:	4a1c      	ldr	r2, [pc, #112]	; (9cac <sys_clock_announce+0x18c>)
    9c3a:	4e15      	ldr	r6, [pc, #84]	; (9c90 <sys_clock_announce+0x170>)
    9c3c:	6830      	ldr	r0, [r6, #0]
    9c3e:	6813      	ldr	r3, [r2, #0]
    9c40:	6851      	ldr	r1, [r2, #4]
    9c42:	181b      	adds	r3, r3, r0
    9c44:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    9c48:	6013      	str	r3, [r2, #0]
    9c4a:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    9c4c:	2400      	movs	r4, #0
    9c4e:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    9c50:	f7ff fd4a 	bl	96e8 <next_timeout>
    9c54:	4621      	mov	r1, r4
    9c56:	f7fb f969 	bl	4f2c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9c5a:	480c      	ldr	r0, [pc, #48]	; (9c8c <sys_clock_announce+0x16c>)
    9c5c:	f7fd fd10 	bl	7680 <z_spin_unlock_valid>
    9c60:	b120      	cbz	r0, 9c6c <sys_clock_announce+0x14c>
	__asm__ volatile(
    9c62:	f385 8811 	msr	BASEPRI, r5
    9c66:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    9c6a:	bd70      	pop	{r4, r5, r6, pc}
    9c6c:	4c09      	ldr	r4, [pc, #36]	; (9c94 <sys_clock_announce+0x174>)
    9c6e:	23b9      	movs	r3, #185	; 0xb9
    9c70:	4622      	mov	r2, r4
    9c72:	490c      	ldr	r1, [pc, #48]	; (9ca4 <sys_clock_announce+0x184>)
    9c74:	4809      	ldr	r0, [pc, #36]	; (9c9c <sys_clock_announce+0x17c>)
    9c76:	f000 fe57 	bl	a928 <assert_print>
    9c7a:	4904      	ldr	r1, [pc, #16]	; (9c8c <sys_clock_announce+0x16c>)
    9c7c:	480a      	ldr	r0, [pc, #40]	; (9ca8 <sys_clock_announce+0x188>)
    9c7e:	f000 fe53 	bl	a928 <assert_print>
    9c82:	21b9      	movs	r1, #185	; 0xb9
    9c84:	4620      	mov	r0, r4
    9c86:	f000 fe48 	bl	a91a <assert_post_action>
    9c8a:	e7ea      	b.n	9c62 <sys_clock_announce+0x142>
    9c8c:	200050f8 	.word	0x200050f8
    9c90:	200050f4 	.word	0x200050f4
    9c94:	0000c440 	.word	0x0000c440
    9c98:	0000c4a0 	.word	0x0000c4a0
    9c9c:	0000c294 	.word	0x0000c294
    9ca0:	0000c4b8 	.word	0x0000c4b8
    9ca4:	0000c470 	.word	0x0000c470
    9ca8:	0000c488 	.word	0x0000c488
    9cac:	20004570 	.word	0x20004570

00009cb0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    9cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    9cb2:	2600      	movs	r6, #0
	__asm__ volatile(
    9cb4:	f04f 0320 	mov.w	r3, #32
    9cb8:	f3ef 8711 	mrs	r7, BASEPRI
    9cbc:	f383 8812 	msr	BASEPRI_MAX, r3
    9cc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9cc4:	481f      	ldr	r0, [pc, #124]	; (9d44 <sys_clock_tick_get+0x94>)
    9cc6:	f7fd fccb 	bl	7660 <z_spin_lock_valid>
    9cca:	b128      	cbz	r0, 9cd8 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    9ccc:	481d      	ldr	r0, [pc, #116]	; (9d44 <sys_clock_tick_get+0x94>)
    9cce:	f7fd fce7 	bl	76a0 <z_spin_lock_set_owner>
	uint64_t t = 0U;
    9cd2:	2400      	movs	r4, #0
    9cd4:	4625      	mov	r5, r4
	return k;
    9cd6:	e014      	b.n	9d02 <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9cd8:	4c1b      	ldr	r4, [pc, #108]	; (9d48 <sys_clock_tick_get+0x98>)
    9cda:	238e      	movs	r3, #142	; 0x8e
    9cdc:	4622      	mov	r2, r4
    9cde:	491b      	ldr	r1, [pc, #108]	; (9d4c <sys_clock_tick_get+0x9c>)
    9ce0:	481b      	ldr	r0, [pc, #108]	; (9d50 <sys_clock_tick_get+0xa0>)
    9ce2:	f000 fe21 	bl	a928 <assert_print>
    9ce6:	4917      	ldr	r1, [pc, #92]	; (9d44 <sys_clock_tick_get+0x94>)
    9ce8:	481a      	ldr	r0, [pc, #104]	; (9d54 <sys_clock_tick_get+0xa4>)
    9cea:	f000 fe1d 	bl	a928 <assert_print>
    9cee:	218e      	movs	r1, #142	; 0x8e
    9cf0:	4620      	mov	r0, r4
    9cf2:	f000 fe12 	bl	a91a <assert_post_action>
    9cf6:	e7e9      	b.n	9ccc <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    9cf8:	f387 8811 	msr	BASEPRI, r7
    9cfc:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9d00:	2601      	movs	r6, #1
    9d02:	b9e6      	cbnz	r6, 9d3e <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    9d04:	f7fb f944 	bl	4f90 <sys_clock_elapsed>
    9d08:	4b13      	ldr	r3, [pc, #76]	; (9d58 <sys_clock_tick_get+0xa8>)
    9d0a:	681c      	ldr	r4, [r3, #0]
    9d0c:	685d      	ldr	r5, [r3, #4]
    9d0e:	1904      	adds	r4, r0, r4
    9d10:	f145 0500 	adc.w	r5, r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9d14:	480b      	ldr	r0, [pc, #44]	; (9d44 <sys_clock_tick_get+0x94>)
    9d16:	f7fd fcb3 	bl	7680 <z_spin_unlock_valid>
    9d1a:	2800      	cmp	r0, #0
    9d1c:	d1ec      	bne.n	9cf8 <sys_clock_tick_get+0x48>
    9d1e:	4e0a      	ldr	r6, [pc, #40]	; (9d48 <sys_clock_tick_get+0x98>)
    9d20:	23b9      	movs	r3, #185	; 0xb9
    9d22:	4632      	mov	r2, r6
    9d24:	490d      	ldr	r1, [pc, #52]	; (9d5c <sys_clock_tick_get+0xac>)
    9d26:	480a      	ldr	r0, [pc, #40]	; (9d50 <sys_clock_tick_get+0xa0>)
    9d28:	f000 fdfe 	bl	a928 <assert_print>
    9d2c:	4905      	ldr	r1, [pc, #20]	; (9d44 <sys_clock_tick_get+0x94>)
    9d2e:	480c      	ldr	r0, [pc, #48]	; (9d60 <sys_clock_tick_get+0xb0>)
    9d30:	f000 fdfa 	bl	a928 <assert_print>
    9d34:	21b9      	movs	r1, #185	; 0xb9
    9d36:	4630      	mov	r0, r6
    9d38:	f000 fdef 	bl	a91a <assert_post_action>
    9d3c:	e7dc      	b.n	9cf8 <sys_clock_tick_get+0x48>
	}
	return t;
}
    9d3e:	4620      	mov	r0, r4
    9d40:	4629      	mov	r1, r5
    9d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d44:	200050f8 	.word	0x200050f8
    9d48:	0000c440 	.word	0x0000c440
    9d4c:	0000c4a0 	.word	0x0000c4a0
    9d50:	0000c294 	.word	0x0000c294
    9d54:	0000c4b8 	.word	0x0000c4b8
    9d58:	20004570 	.word	0x20004570
    9d5c:	0000c470 	.word	0x0000c470
    9d60:	0000c488 	.word	0x0000c488

00009d64 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    9d64:	b570      	push	{r4, r5, r6, lr}
    9d66:	4604      	mov	r4, r0
	__asm__ volatile(
    9d68:	f04f 0320 	mov.w	r3, #32
    9d6c:	f3ef 8611 	mrs	r6, BASEPRI
    9d70:	f383 8812 	msr	BASEPRI_MAX, r3
    9d74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9d78:	4857      	ldr	r0, [pc, #348]	; (9ed8 <z_timer_expiration_handler+0x174>)
    9d7a:	f7fd fc71 	bl	7660 <z_spin_lock_valid>
    9d7e:	2800      	cmp	r0, #0
    9d80:	d049      	beq.n	9e16 <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
    9d82:	4855      	ldr	r0, [pc, #340]	; (9ed8 <z_timer_expiration_handler+0x174>)
    9d84:	f7fd fc8c 	bl	76a0 <z_spin_lock_set_owner>
	return k;
    9d88:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    9d8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9d8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9d8e:	ea52 0103 	orrs.w	r1, r2, r3
    9d92:	d005      	beq.n	9da0 <z_timer_expiration_handler+0x3c>
    9d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9d98:	bf08      	it	eq
    9d9a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    9d9e:	d14a      	bne.n	9e36 <z_timer_expiration_handler+0xd2>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    9da0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9da2:	3301      	adds	r3, #1
    9da4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    9da6:	6a23      	ldr	r3, [r4, #32]
    9da8:	b1db      	cbz	r3, 9de2 <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9daa:	484b      	ldr	r0, [pc, #300]	; (9ed8 <z_timer_expiration_handler+0x174>)
    9dac:	f7fd fc68 	bl	7680 <z_spin_unlock_valid>
    9db0:	2800      	cmp	r0, #0
    9db2:	d047      	beq.n	9e44 <z_timer_expiration_handler+0xe0>
	__asm__ volatile(
    9db4:	f386 8811 	msr	BASEPRI, r6
    9db8:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    9dbc:	6a23      	ldr	r3, [r4, #32]
    9dbe:	4620      	mov	r0, r4
    9dc0:	4798      	blx	r3
	__asm__ volatile(
    9dc2:	f04f 0320 	mov.w	r3, #32
    9dc6:	f3ef 8511 	mrs	r5, BASEPRI
    9dca:	f383 8812 	msr	BASEPRI_MAX, r3
    9dce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9dd2:	4841      	ldr	r0, [pc, #260]	; (9ed8 <z_timer_expiration_handler+0x174>)
    9dd4:	f7fd fc44 	bl	7660 <z_spin_lock_valid>
    9dd8:	2800      	cmp	r0, #0
    9dda:	d043      	beq.n	9e64 <z_timer_expiration_handler+0x100>
	z_spin_lock_set_owner(l);
    9ddc:	483e      	ldr	r0, [pc, #248]	; (9ed8 <z_timer_expiration_handler+0x174>)
    9dde:	f7fd fc5f 	bl	76a0 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    9de2:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    9de6:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9de8:	42a3      	cmp	r3, r4
    9dea:	d04b      	beq.n	9e84 <z_timer_expiration_handler+0x120>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    9dec:	2c00      	cmp	r4, #0
    9dee:	d049      	beq.n	9e84 <z_timer_expiration_handler+0x120>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    9df0:	4620      	mov	r0, r4
    9df2:	f7fe f9f7 	bl	81e4 <z_unpend_thread_no_timeout>
    9df6:	2300      	movs	r3, #0
    9df8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9dfc:	4836      	ldr	r0, [pc, #216]	; (9ed8 <z_timer_expiration_handler+0x174>)
    9dfe:	f7fd fc3f 	bl	7680 <z_spin_unlock_valid>
    9e02:	2800      	cmp	r0, #0
    9e04:	d057      	beq.n	9eb6 <z_timer_expiration_handler+0x152>
	__asm__ volatile(
    9e06:	f385 8811 	msr	BASEPRI, r5
    9e0a:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    9e0e:	4620      	mov	r0, r4
    9e10:	f7fe fce6 	bl	87e0 <z_ready_thread>
}
    9e14:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9e16:	4d31      	ldr	r5, [pc, #196]	; (9edc <z_timer_expiration_handler+0x178>)
    9e18:	238e      	movs	r3, #142	; 0x8e
    9e1a:	462a      	mov	r2, r5
    9e1c:	4930      	ldr	r1, [pc, #192]	; (9ee0 <z_timer_expiration_handler+0x17c>)
    9e1e:	4831      	ldr	r0, [pc, #196]	; (9ee4 <z_timer_expiration_handler+0x180>)
    9e20:	f000 fd82 	bl	a928 <assert_print>
    9e24:	492c      	ldr	r1, [pc, #176]	; (9ed8 <z_timer_expiration_handler+0x174>)
    9e26:	4830      	ldr	r0, [pc, #192]	; (9ee8 <z_timer_expiration_handler+0x184>)
    9e28:	f000 fd7e 	bl	a928 <assert_print>
    9e2c:	218e      	movs	r1, #142	; 0x8e
    9e2e:	4628      	mov	r0, r5
    9e30:	f000 fd73 	bl	a91a <assert_post_action>
    9e34:	e7a5      	b.n	9d82 <z_timer_expiration_handler+0x1e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9e36:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    9e3a:	492c      	ldr	r1, [pc, #176]	; (9eec <z_timer_expiration_handler+0x188>)
    9e3c:	4620      	mov	r0, r4
    9e3e:	f7ff fc79 	bl	9734 <z_add_timeout>
    9e42:	e7ad      	b.n	9da0 <z_timer_expiration_handler+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9e44:	4d25      	ldr	r5, [pc, #148]	; (9edc <z_timer_expiration_handler+0x178>)
    9e46:	23b9      	movs	r3, #185	; 0xb9
    9e48:	462a      	mov	r2, r5
    9e4a:	4929      	ldr	r1, [pc, #164]	; (9ef0 <z_timer_expiration_handler+0x18c>)
    9e4c:	4825      	ldr	r0, [pc, #148]	; (9ee4 <z_timer_expiration_handler+0x180>)
    9e4e:	f000 fd6b 	bl	a928 <assert_print>
    9e52:	4921      	ldr	r1, [pc, #132]	; (9ed8 <z_timer_expiration_handler+0x174>)
    9e54:	4827      	ldr	r0, [pc, #156]	; (9ef4 <z_timer_expiration_handler+0x190>)
    9e56:	f000 fd67 	bl	a928 <assert_print>
    9e5a:	21b9      	movs	r1, #185	; 0xb9
    9e5c:	4628      	mov	r0, r5
    9e5e:	f000 fd5c 	bl	a91a <assert_post_action>
    9e62:	e7a7      	b.n	9db4 <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9e64:	4e1d      	ldr	r6, [pc, #116]	; (9edc <z_timer_expiration_handler+0x178>)
    9e66:	238e      	movs	r3, #142	; 0x8e
    9e68:	4632      	mov	r2, r6
    9e6a:	491d      	ldr	r1, [pc, #116]	; (9ee0 <z_timer_expiration_handler+0x17c>)
    9e6c:	481d      	ldr	r0, [pc, #116]	; (9ee4 <z_timer_expiration_handler+0x180>)
    9e6e:	f000 fd5b 	bl	a928 <assert_print>
    9e72:	4919      	ldr	r1, [pc, #100]	; (9ed8 <z_timer_expiration_handler+0x174>)
    9e74:	481c      	ldr	r0, [pc, #112]	; (9ee8 <z_timer_expiration_handler+0x184>)
    9e76:	f000 fd57 	bl	a928 <assert_print>
    9e7a:	218e      	movs	r1, #142	; 0x8e
    9e7c:	4630      	mov	r0, r6
    9e7e:	f000 fd4c 	bl	a91a <assert_post_action>
    9e82:	e7ab      	b.n	9ddc <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9e84:	4814      	ldr	r0, [pc, #80]	; (9ed8 <z_timer_expiration_handler+0x174>)
    9e86:	f7fd fbfb 	bl	7680 <z_spin_unlock_valid>
    9e8a:	b120      	cbz	r0, 9e96 <z_timer_expiration_handler+0x132>
    9e8c:	f385 8811 	msr	BASEPRI, r5
    9e90:	f3bf 8f6f 	isb	sy
		return;
    9e94:	e7be      	b.n	9e14 <z_timer_expiration_handler+0xb0>
    9e96:	4c11      	ldr	r4, [pc, #68]	; (9edc <z_timer_expiration_handler+0x178>)
    9e98:	23b9      	movs	r3, #185	; 0xb9
    9e9a:	4622      	mov	r2, r4
    9e9c:	4914      	ldr	r1, [pc, #80]	; (9ef0 <z_timer_expiration_handler+0x18c>)
    9e9e:	4811      	ldr	r0, [pc, #68]	; (9ee4 <z_timer_expiration_handler+0x180>)
    9ea0:	f000 fd42 	bl	a928 <assert_print>
    9ea4:	490c      	ldr	r1, [pc, #48]	; (9ed8 <z_timer_expiration_handler+0x174>)
    9ea6:	4813      	ldr	r0, [pc, #76]	; (9ef4 <z_timer_expiration_handler+0x190>)
    9ea8:	f000 fd3e 	bl	a928 <assert_print>
    9eac:	21b9      	movs	r1, #185	; 0xb9
    9eae:	4620      	mov	r0, r4
    9eb0:	f000 fd33 	bl	a91a <assert_post_action>
    9eb4:	e7ea      	b.n	9e8c <z_timer_expiration_handler+0x128>
    9eb6:	4e09      	ldr	r6, [pc, #36]	; (9edc <z_timer_expiration_handler+0x178>)
    9eb8:	23b9      	movs	r3, #185	; 0xb9
    9eba:	4632      	mov	r2, r6
    9ebc:	490c      	ldr	r1, [pc, #48]	; (9ef0 <z_timer_expiration_handler+0x18c>)
    9ebe:	4809      	ldr	r0, [pc, #36]	; (9ee4 <z_timer_expiration_handler+0x180>)
    9ec0:	f000 fd32 	bl	a928 <assert_print>
    9ec4:	4904      	ldr	r1, [pc, #16]	; (9ed8 <z_timer_expiration_handler+0x174>)
    9ec6:	480b      	ldr	r0, [pc, #44]	; (9ef4 <z_timer_expiration_handler+0x190>)
    9ec8:	f000 fd2e 	bl	a928 <assert_print>
    9ecc:	21b9      	movs	r1, #185	; 0xb9
    9ece:	4630      	mov	r0, r6
    9ed0:	f000 fd23 	bl	a91a <assert_post_action>
    9ed4:	e797      	b.n	9e06 <z_timer_expiration_handler+0xa2>
    9ed6:	bf00      	nop
    9ed8:	200050fc 	.word	0x200050fc
    9edc:	0000c440 	.word	0x0000c440
    9ee0:	0000c4a0 	.word	0x0000c4a0
    9ee4:	0000c294 	.word	0x0000c294
    9ee8:	0000c4b8 	.word	0x0000c4b8
    9eec:	00009d65 	.word	0x00009d65
    9ef0:	0000c470 	.word	0x0000c470
    9ef4:	0000c488 	.word	0x0000c488

00009ef8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    9ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9efc:	9f06      	ldr	r7, [sp, #24]
    9efe:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9f02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9f06:	bf08      	it	eq
    9f08:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    9f0c:	d02f      	beq.n	9f6e <z_impl_k_timer_start+0x76>
    9f0e:	4605      	mov	r5, r0
    9f10:	4614      	mov	r4, r2
    9f12:	461e      	mov	r6, r3
    9f14:	4611      	mov	r1, r2
    9f16:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    9f18:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    9f1c:	bf08      	it	eq
    9f1e:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    9f22:	d00d      	beq.n	9f40 <z_impl_k_timer_start+0x48>
    9f24:	ea57 0c08 	orrs.w	ip, r7, r8
    9f28:	d00a      	beq.n	9f40 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
    9f2a:	f06f 0c01 	mvn.w	ip, #1
    9f2e:	ebbc 0c07 	subs.w	ip, ip, r7
    9f32:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    9f36:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    9f3a:	f1bc 0f00 	cmp.w	ip, #0
    9f3e:	db18      	blt.n	9f72 <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    9f40:	f06f 0301 	mvn.w	r3, #1
    9f44:	1a5b      	subs	r3, r3, r1
    9f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9f4a:	eb63 0300 	sbc.w	r3, r3, r0
    9f4e:	2b00      	cmp	r3, #0
    9f50:	db1a      	blt.n	9f88 <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    9f52:	4628      	mov	r0, r5
    9f54:	f7ff fcd2 	bl	98fc <z_abort_timeout>
	timer->period = period;
    9f58:	62af      	str	r7, [r5, #40]	; 0x28
    9f5a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    9f5e:	2300      	movs	r3, #0
    9f60:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9f62:	4622      	mov	r2, r4
    9f64:	4633      	mov	r3, r6
    9f66:	490e      	ldr	r1, [pc, #56]	; (9fa0 <z_impl_k_timer_start+0xa8>)
    9f68:	4628      	mov	r0, r5
    9f6a:	f7ff fbe3 	bl	9734 <z_add_timeout>
		     duration);
}
    9f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    9f72:	2f02      	cmp	r7, #2
    9f74:	f178 0300 	sbcs.w	r3, r8, #0
    9f78:	da02      	bge.n	9f80 <z_impl_k_timer_start+0x88>
    9f7a:	2702      	movs	r7, #2
    9f7c:	f04f 0800 	mov.w	r8, #0
    9f80:	3f01      	subs	r7, #1
    9f82:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
    9f86:	e7db      	b.n	9f40 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
    9f88:	460c      	mov	r4, r1
    9f8a:	4606      	mov	r6, r0
    9f8c:	2901      	cmp	r1, #1
    9f8e:	f170 0300 	sbcs.w	r3, r0, #0
    9f92:	da01      	bge.n	9f98 <z_impl_k_timer_start+0xa0>
    9f94:	2401      	movs	r4, #1
    9f96:	2600      	movs	r6, #0
    9f98:	3c01      	subs	r4, #1
    9f9a:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    9f9e:	e7d8      	b.n	9f52 <z_impl_k_timer_start+0x5a>
    9fa0:	00009d65 	.word	0x00009d65

00009fa4 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    9fa4:	4b01      	ldr	r3, [pc, #4]	; (9fac <k_thread_system_pool_assign+0x8>)
    9fa6:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    9faa:	4770      	bx	lr
    9fac:	200041c4 	.word	0x200041c4

00009fb0 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    9fb0:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    9fb2:	4a03      	ldr	r2, [pc, #12]	; (9fc0 <boot_banner+0x10>)
    9fb4:	4903      	ldr	r1, [pc, #12]	; (9fc4 <boot_banner+0x14>)
    9fb6:	4804      	ldr	r0, [pc, #16]	; (9fc8 <boot_banner+0x18>)
    9fb8:	f000 fbad 	bl	a716 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    9fbc:	bd08      	pop	{r3, pc}
    9fbe:	bf00      	nop
    9fc0:	0000d1a4 	.word	0x0000d1a4
    9fc4:	0000dedc 	.word	0x0000dedc
    9fc8:	0000deec 	.word	0x0000deec

00009fcc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    9fcc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    9fce:	4c0f      	ldr	r4, [pc, #60]	; (a00c <statics_init+0x40>)
    9fd0:	e008      	b.n	9fe4 <statics_init+0x18>
    9fd2:	4b0f      	ldr	r3, [pc, #60]	; (a010 <statics_init+0x44>)
    9fd4:	429c      	cmp	r4, r3
    9fd6:	d217      	bcs.n	a008 <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    9fd8:	68a2      	ldr	r2, [r4, #8]
    9fda:	6861      	ldr	r1, [r4, #4]
    9fdc:	4620      	mov	r0, r4
    9fde:	f001 fecb 	bl	bd78 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    9fe2:	3418      	adds	r4, #24
    9fe4:	4b0a      	ldr	r3, [pc, #40]	; (a010 <statics_init+0x44>)
    9fe6:	429c      	cmp	r4, r3
    9fe8:	d9f3      	bls.n	9fd2 <statics_init+0x6>
    9fea:	4d0a      	ldr	r5, [pc, #40]	; (a014 <statics_init+0x48>)
    9fec:	2318      	movs	r3, #24
    9fee:	462a      	mov	r2, r5
    9ff0:	4909      	ldr	r1, [pc, #36]	; (a018 <statics_init+0x4c>)
    9ff2:	480a      	ldr	r0, [pc, #40]	; (a01c <statics_init+0x50>)
    9ff4:	f000 fc98 	bl	a928 <assert_print>
    9ff8:	4809      	ldr	r0, [pc, #36]	; (a020 <statics_init+0x54>)
    9ffa:	f000 fc95 	bl	a928 <assert_print>
    9ffe:	2118      	movs	r1, #24
    a000:	4628      	mov	r0, r5
    a002:	f000 fc8a 	bl	a91a <assert_post_action>
    a006:	e7e4      	b.n	9fd2 <statics_init+0x6>
		}
	}
	return 0;
}
    a008:	2000      	movs	r0, #0
    a00a:	bd38      	pop	{r3, r4, r5, pc}
    a00c:	200041c4 	.word	0x200041c4
    a010:	200041dc 	.word	0x200041dc
    a014:	0000df14 	.word	0x0000df14
    a018:	0000df38 	.word	0x0000df38
    a01c:	0000c294 	.word	0x0000c294
    a020:	0000da5c 	.word	0x0000da5c

0000a024 <calloc>:
    a024:	4b02      	ldr	r3, [pc, #8]	; (a030 <calloc+0xc>)
    a026:	460a      	mov	r2, r1
    a028:	4601      	mov	r1, r0
    a02a:	6818      	ldr	r0, [r3, #0]
    a02c:	f001 bec2 	b.w	bdb4 <_calloc_r>
    a030:	200040ec 	.word	0x200040ec

0000a034 <malloc>:
    a034:	4b02      	ldr	r3, [pc, #8]	; (a040 <malloc+0xc>)
    a036:	4601      	mov	r1, r0
    a038:	6818      	ldr	r0, [r3, #0]
    a03a:	f000 b803 	b.w	a044 <_malloc_r>
    a03e:	bf00      	nop
    a040:	200040ec 	.word	0x200040ec

0000a044 <_malloc_r>:
    a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a046:	1ccd      	adds	r5, r1, #3
    a048:	f025 0503 	bic.w	r5, r5, #3
    a04c:	3508      	adds	r5, #8
    a04e:	2d0c      	cmp	r5, #12
    a050:	bf38      	it	cc
    a052:	250c      	movcc	r5, #12
    a054:	2d00      	cmp	r5, #0
    a056:	4606      	mov	r6, r0
    a058:	db01      	blt.n	a05e <_malloc_r+0x1a>
    a05a:	42a9      	cmp	r1, r5
    a05c:	d903      	bls.n	a066 <_malloc_r+0x22>
    a05e:	230c      	movs	r3, #12
    a060:	6033      	str	r3, [r6, #0]
    a062:	2000      	movs	r0, #0
    a064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a066:	f000 f857 	bl	a118 <__malloc_lock>
    a06a:	4921      	ldr	r1, [pc, #132]	; (a0f0 <_malloc_r+0xac>)
    a06c:	680a      	ldr	r2, [r1, #0]
    a06e:	4614      	mov	r4, r2
    a070:	b99c      	cbnz	r4, a09a <_malloc_r+0x56>
    a072:	4f20      	ldr	r7, [pc, #128]	; (a0f4 <_malloc_r+0xb0>)
    a074:	683b      	ldr	r3, [r7, #0]
    a076:	b923      	cbnz	r3, a082 <_malloc_r+0x3e>
    a078:	4621      	mov	r1, r4
    a07a:	4630      	mov	r0, r6
    a07c:	f000 f83c 	bl	a0f8 <_sbrk_r>
    a080:	6038      	str	r0, [r7, #0]
    a082:	4629      	mov	r1, r5
    a084:	4630      	mov	r0, r6
    a086:	f000 f837 	bl	a0f8 <_sbrk_r>
    a08a:	1c43      	adds	r3, r0, #1
    a08c:	d123      	bne.n	a0d6 <_malloc_r+0x92>
    a08e:	230c      	movs	r3, #12
    a090:	6033      	str	r3, [r6, #0]
    a092:	4630      	mov	r0, r6
    a094:	f000 f846 	bl	a124 <__malloc_unlock>
    a098:	e7e3      	b.n	a062 <_malloc_r+0x1e>
    a09a:	6823      	ldr	r3, [r4, #0]
    a09c:	1b5b      	subs	r3, r3, r5
    a09e:	d417      	bmi.n	a0d0 <_malloc_r+0x8c>
    a0a0:	2b0b      	cmp	r3, #11
    a0a2:	d903      	bls.n	a0ac <_malloc_r+0x68>
    a0a4:	6023      	str	r3, [r4, #0]
    a0a6:	441c      	add	r4, r3
    a0a8:	6025      	str	r5, [r4, #0]
    a0aa:	e004      	b.n	a0b6 <_malloc_r+0x72>
    a0ac:	6863      	ldr	r3, [r4, #4]
    a0ae:	42a2      	cmp	r2, r4
    a0b0:	bf0c      	ite	eq
    a0b2:	600b      	streq	r3, [r1, #0]
    a0b4:	6053      	strne	r3, [r2, #4]
    a0b6:	4630      	mov	r0, r6
    a0b8:	f000 f834 	bl	a124 <__malloc_unlock>
    a0bc:	f104 000b 	add.w	r0, r4, #11
    a0c0:	1d23      	adds	r3, r4, #4
    a0c2:	f020 0007 	bic.w	r0, r0, #7
    a0c6:	1ac2      	subs	r2, r0, r3
    a0c8:	d0cc      	beq.n	a064 <_malloc_r+0x20>
    a0ca:	1a1b      	subs	r3, r3, r0
    a0cc:	50a3      	str	r3, [r4, r2]
    a0ce:	e7c9      	b.n	a064 <_malloc_r+0x20>
    a0d0:	4622      	mov	r2, r4
    a0d2:	6864      	ldr	r4, [r4, #4]
    a0d4:	e7cc      	b.n	a070 <_malloc_r+0x2c>
    a0d6:	1cc4      	adds	r4, r0, #3
    a0d8:	f024 0403 	bic.w	r4, r4, #3
    a0dc:	42a0      	cmp	r0, r4
    a0de:	d0e3      	beq.n	a0a8 <_malloc_r+0x64>
    a0e0:	1a21      	subs	r1, r4, r0
    a0e2:	4630      	mov	r0, r6
    a0e4:	f000 f808 	bl	a0f8 <_sbrk_r>
    a0e8:	3001      	adds	r0, #1
    a0ea:	d1dd      	bne.n	a0a8 <_malloc_r+0x64>
    a0ec:	e7cf      	b.n	a08e <_malloc_r+0x4a>
    a0ee:	bf00      	nop
    a0f0:	20005100 	.word	0x20005100
    a0f4:	20005104 	.word	0x20005104

0000a0f8 <_sbrk_r>:
    a0f8:	b538      	push	{r3, r4, r5, lr}
    a0fa:	4d06      	ldr	r5, [pc, #24]	; (a114 <_sbrk_r+0x1c>)
    a0fc:	2300      	movs	r3, #0
    a0fe:	4604      	mov	r4, r0
    a100:	4608      	mov	r0, r1
    a102:	602b      	str	r3, [r5, #0]
    a104:	f7f9 fd56 	bl	3bb4 <_sbrk>
    a108:	1c43      	adds	r3, r0, #1
    a10a:	d102      	bne.n	a112 <_sbrk_r+0x1a>
    a10c:	682b      	ldr	r3, [r5, #0]
    a10e:	b103      	cbz	r3, a112 <_sbrk_r+0x1a>
    a110:	6023      	str	r3, [r4, #0]
    a112:	bd38      	pop	{r3, r4, r5, pc}
    a114:	20005108 	.word	0x20005108

0000a118 <__malloc_lock>:
    a118:	4801      	ldr	r0, [pc, #4]	; (a120 <__malloc_lock+0x8>)
    a11a:	f7f9 bd61 	b.w	3be0 <__retarget_lock_acquire_recursive>
    a11e:	bf00      	nop
    a120:	200041dc 	.word	0x200041dc

0000a124 <__malloc_unlock>:
    a124:	4801      	ldr	r0, [pc, #4]	; (a12c <__malloc_unlock+0x8>)
    a126:	f7f9 bd7b 	b.w	3c20 <__retarget_lock_release_recursive>
    a12a:	bf00      	nop
    a12c:	200041dc 	.word	0x200041dc

0000a130 <nrf_cc3xx_platform_init_no_rng>:
    a130:	b510      	push	{r4, lr}
    a132:	4c0a      	ldr	r4, [pc, #40]	; (a15c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    a134:	6823      	ldr	r3, [r4, #0]
    a136:	b11b      	cbz	r3, a140 <nrf_cc3xx_platform_init_no_rng+0x10>
    a138:	2301      	movs	r3, #1
    a13a:	6023      	str	r3, [r4, #0]
    a13c:	2000      	movs	r0, #0
    a13e:	bd10      	pop	{r4, pc}
    a140:	f000 f8ce 	bl	a2e0 <CC_LibInitNoRng>
    a144:	2800      	cmp	r0, #0
    a146:	d0f7      	beq.n	a138 <nrf_cc3xx_platform_init_no_rng+0x8>
    a148:	3801      	subs	r0, #1
    a14a:	2806      	cmp	r0, #6
    a14c:	d803      	bhi.n	a156 <nrf_cc3xx_platform_init_no_rng+0x26>
    a14e:	4b04      	ldr	r3, [pc, #16]	; (a160 <nrf_cc3xx_platform_init_no_rng+0x30>)
    a150:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    a154:	bd10      	pop	{r4, pc}
    a156:	4803      	ldr	r0, [pc, #12]	; (a164 <nrf_cc3xx_platform_init_no_rng+0x34>)
    a158:	bd10      	pop	{r4, pc}
    a15a:	bf00      	nop
    a15c:	2000510c 	.word	0x2000510c
    a160:	0000dfb0 	.word	0x0000dfb0
    a164:	ffff8ffe 	.word	0xffff8ffe

0000a168 <nrf_cc3xx_platform_abort>:
    a168:	f3bf 8f4f 	dsb	sy
    a16c:	4905      	ldr	r1, [pc, #20]	; (a184 <nrf_cc3xx_platform_abort+0x1c>)
    a16e:	4b06      	ldr	r3, [pc, #24]	; (a188 <nrf_cc3xx_platform_abort+0x20>)
    a170:	68ca      	ldr	r2, [r1, #12]
    a172:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    a176:	4313      	orrs	r3, r2
    a178:	60cb      	str	r3, [r1, #12]
    a17a:	f3bf 8f4f 	dsb	sy
    a17e:	bf00      	nop
    a180:	e7fd      	b.n	a17e <nrf_cc3xx_platform_abort+0x16>
    a182:	bf00      	nop
    a184:	e000ed00 	.word	0xe000ed00
    a188:	05fa0004 	.word	0x05fa0004

0000a18c <CC_PalAbort>:
    a18c:	b410      	push	{r4}
    a18e:	4b09      	ldr	r3, [pc, #36]	; (a1b4 <CC_PalAbort+0x28>)
    a190:	4909      	ldr	r1, [pc, #36]	; (a1b8 <CC_PalAbort+0x2c>)
    a192:	4c0a      	ldr	r4, [pc, #40]	; (a1bc <CC_PalAbort+0x30>)
    a194:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    a198:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    a19c:	6849      	ldr	r1, [r1, #4]
    a19e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    a1a2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    a1a6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    a1aa:	2300      	movs	r3, #0
    a1ac:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    a1b0:	bc10      	pop	{r4}
    a1b2:	4708      	bx	r1
    a1b4:	5002b000 	.word	0x5002b000
    a1b8:	20004150 	.word	0x20004150
    a1bc:	5002a000 	.word	0x5002a000

0000a1c0 <nrf_cc3xx_platform_set_abort>:
    a1c0:	e9d0 1200 	ldrd	r1, r2, [r0]
    a1c4:	4b01      	ldr	r3, [pc, #4]	; (a1cc <nrf_cc3xx_platform_set_abort+0xc>)
    a1c6:	e9c3 1200 	strd	r1, r2, [r3]
    a1ca:	4770      	bx	lr
    a1cc:	20004150 	.word	0x20004150

0000a1d0 <mutex_free>:
    a1d0:	b510      	push	{r4, lr}
    a1d2:	4604      	mov	r4, r0
    a1d4:	b130      	cbz	r0, a1e4 <mutex_free+0x14>
    a1d6:	6863      	ldr	r3, [r4, #4]
    a1d8:	06db      	lsls	r3, r3, #27
    a1da:	d502      	bpl.n	a1e2 <mutex_free+0x12>
    a1dc:	2300      	movs	r3, #0
    a1de:	6023      	str	r3, [r4, #0]
    a1e0:	6063      	str	r3, [r4, #4]
    a1e2:	bd10      	pop	{r4, pc}
    a1e4:	4b02      	ldr	r3, [pc, #8]	; (a1f0 <mutex_free+0x20>)
    a1e6:	4803      	ldr	r0, [pc, #12]	; (a1f4 <mutex_free+0x24>)
    a1e8:	685b      	ldr	r3, [r3, #4]
    a1ea:	4798      	blx	r3
    a1ec:	e7f3      	b.n	a1d6 <mutex_free+0x6>
    a1ee:	bf00      	nop
    a1f0:	20004150 	.word	0x20004150
    a1f4:	0000dfcc 	.word	0x0000dfcc

0000a1f8 <mutex_lock>:
    a1f8:	b1b0      	cbz	r0, a228 <mutex_lock+0x30>
    a1fa:	6843      	ldr	r3, [r0, #4]
    a1fc:	b193      	cbz	r3, a224 <mutex_lock+0x2c>
    a1fe:	06db      	lsls	r3, r3, #27
    a200:	d50e      	bpl.n	a220 <mutex_lock+0x28>
    a202:	2301      	movs	r3, #1
    a204:	e850 2f00 	ldrex	r2, [r0]
    a208:	4619      	mov	r1, r3
    a20a:	e840 1c00 	strex	ip, r1, [r0]
    a20e:	f09c 0f00 	teq	ip, #0
    a212:	d1f7      	bne.n	a204 <mutex_lock+0xc>
    a214:	2a01      	cmp	r2, #1
    a216:	d0f5      	beq.n	a204 <mutex_lock+0xc>
    a218:	f3bf 8f5f 	dmb	sy
    a21c:	2000      	movs	r0, #0
    a21e:	4770      	bx	lr
    a220:	4803      	ldr	r0, [pc, #12]	; (a230 <mutex_lock+0x38>)
    a222:	4770      	bx	lr
    a224:	4803      	ldr	r0, [pc, #12]	; (a234 <mutex_lock+0x3c>)
    a226:	4770      	bx	lr
    a228:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a22c:	4770      	bx	lr
    a22e:	bf00      	nop
    a230:	ffff8fe9 	.word	0xffff8fe9
    a234:	ffff8fea 	.word	0xffff8fea

0000a238 <mutex_unlock>:
    a238:	b168      	cbz	r0, a256 <mutex_unlock+0x1e>
    a23a:	6843      	ldr	r3, [r0, #4]
    a23c:	b13b      	cbz	r3, a24e <mutex_unlock+0x16>
    a23e:	06db      	lsls	r3, r3, #27
    a240:	d507      	bpl.n	a252 <mutex_unlock+0x1a>
    a242:	f3bf 8f5f 	dmb	sy
    a246:	2300      	movs	r3, #0
    a248:	6003      	str	r3, [r0, #0]
    a24a:	4618      	mov	r0, r3
    a24c:	4770      	bx	lr
    a24e:	4803      	ldr	r0, [pc, #12]	; (a25c <mutex_unlock+0x24>)
    a250:	4770      	bx	lr
    a252:	4803      	ldr	r0, [pc, #12]	; (a260 <mutex_unlock+0x28>)
    a254:	4770      	bx	lr
    a256:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a25a:	4770      	bx	lr
    a25c:	ffff8fea 	.word	0xffff8fea
    a260:	ffff8fe9 	.word	0xffff8fe9

0000a264 <mutex_init>:
    a264:	b510      	push	{r4, lr}
    a266:	4604      	mov	r4, r0
    a268:	b120      	cbz	r0, a274 <mutex_init+0x10>
    a26a:	2200      	movs	r2, #0
    a26c:	2311      	movs	r3, #17
    a26e:	6022      	str	r2, [r4, #0]
    a270:	6063      	str	r3, [r4, #4]
    a272:	bd10      	pop	{r4, pc}
    a274:	4801      	ldr	r0, [pc, #4]	; (a27c <mutex_init+0x18>)
    a276:	f7ff ff89 	bl	a18c <CC_PalAbort>
    a27a:	e7f6      	b.n	a26a <mutex_init+0x6>
    a27c:	0000dff4 	.word	0x0000dff4

0000a280 <nrf_cc3xx_platform_set_mutexes>:
    a280:	b570      	push	{r4, r5, r6, lr}
    a282:	e9d0 2300 	ldrd	r2, r3, [r0]
    a286:	4c13      	ldr	r4, [pc, #76]	; (a2d4 <nrf_cc3xx_platform_set_mutexes+0x54>)
    a288:	4d13      	ldr	r5, [pc, #76]	; (a2d8 <nrf_cc3xx_platform_set_mutexes+0x58>)
    a28a:	6063      	str	r3, [r4, #4]
    a28c:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    a290:	e9c4 3002 	strd	r3, r0, [r4, #8]
    a294:	6022      	str	r2, [r4, #0]
    a296:	4b11      	ldr	r3, [pc, #68]	; (a2dc <nrf_cc3xx_platform_set_mutexes+0x5c>)
    a298:	6808      	ldr	r0, [r1, #0]
    a29a:	6018      	str	r0, [r3, #0]
    a29c:	6848      	ldr	r0, [r1, #4]
    a29e:	6058      	str	r0, [r3, #4]
    a2a0:	6888      	ldr	r0, [r1, #8]
    a2a2:	6098      	str	r0, [r3, #8]
    a2a4:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    a2a8:	60d8      	str	r0, [r3, #12]
    a2aa:	6119      	str	r1, [r3, #16]
    a2ac:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    a2b0:	06db      	lsls	r3, r3, #27
    a2b2:	d50d      	bpl.n	a2d0 <nrf_cc3xx_platform_set_mutexes+0x50>
    a2b4:	2300      	movs	r3, #0
    a2b6:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    a2ba:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    a2be:	f505 708a 	add.w	r0, r5, #276	; 0x114
    a2c2:	4790      	blx	r2
    a2c4:	6823      	ldr	r3, [r4, #0]
    a2c6:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    a2ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a2ce:	4718      	bx	r3
    a2d0:	bd70      	pop	{r4, r5, r6, pc}
    a2d2:	bf00      	nop
    a2d4:	20004160 	.word	0x20004160
    a2d8:	20005124 	.word	0x20005124
    a2dc:	20004170 	.word	0x20004170

0000a2e0 <CC_LibInitNoRng>:
    a2e0:	b538      	push	{r3, r4, r5, lr}
    a2e2:	f000 f82f 	bl	a344 <CC_HalInit>
    a2e6:	b120      	cbz	r0, a2f2 <CC_LibInitNoRng+0x12>
    a2e8:	2403      	movs	r4, #3
    a2ea:	f000 f863 	bl	a3b4 <CC_PalTerminate>
    a2ee:	4620      	mov	r0, r4
    a2f0:	bd38      	pop	{r3, r4, r5, pc}
    a2f2:	f000 f831 	bl	a358 <CC_PalInit>
    a2f6:	b998      	cbnz	r0, a320 <CC_LibInitNoRng+0x40>
    a2f8:	f000 f8ac 	bl	a454 <CC_PalPowerSaveModeSelect>
    a2fc:	b998      	cbnz	r0, a326 <CC_LibInitNoRng+0x46>
    a2fe:	4d0f      	ldr	r5, [pc, #60]	; (a33c <CC_LibInitNoRng+0x5c>)
    a300:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    a304:	0e1b      	lsrs	r3, r3, #24
    a306:	2bf0      	cmp	r3, #240	; 0xf0
    a308:	d108      	bne.n	a31c <CC_LibInitNoRng+0x3c>
    a30a:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    a30e:	4b0c      	ldr	r3, [pc, #48]	; (a340 <CC_LibInitNoRng+0x60>)
    a310:	429a      	cmp	r2, r3
    a312:	d00a      	beq.n	a32a <CC_LibInitNoRng+0x4a>
    a314:	2407      	movs	r4, #7
    a316:	f000 f817 	bl	a348 <CC_HalTerminate>
    a31a:	e7e6      	b.n	a2ea <CC_LibInitNoRng+0xa>
    a31c:	2406      	movs	r4, #6
    a31e:	e7fa      	b.n	a316 <CC_LibInitNoRng+0x36>
    a320:	2404      	movs	r4, #4
    a322:	4620      	mov	r0, r4
    a324:	bd38      	pop	{r3, r4, r5, pc}
    a326:	2400      	movs	r4, #0
    a328:	e7f5      	b.n	a316 <CC_LibInitNoRng+0x36>
    a32a:	2001      	movs	r0, #1
    a32c:	f000 f892 	bl	a454 <CC_PalPowerSaveModeSelect>
    a330:	4604      	mov	r4, r0
    a332:	2800      	cmp	r0, #0
    a334:	d1f7      	bne.n	a326 <CC_LibInitNoRng+0x46>
    a336:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    a33a:	e7d8      	b.n	a2ee <CC_LibInitNoRng+0xe>
    a33c:	5002b000 	.word	0x5002b000
    a340:	20e00000 	.word	0x20e00000

0000a344 <CC_HalInit>:
    a344:	2000      	movs	r0, #0
    a346:	4770      	bx	lr

0000a348 <CC_HalTerminate>:
    a348:	2000      	movs	r0, #0
    a34a:	4770      	bx	lr

0000a34c <CC_HalMaskInterrupt>:
    a34c:	4b01      	ldr	r3, [pc, #4]	; (a354 <CC_HalMaskInterrupt+0x8>)
    a34e:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    a352:	4770      	bx	lr
    a354:	5002b000 	.word	0x5002b000

0000a358 <CC_PalInit>:
    a358:	b510      	push	{r4, lr}
    a35a:	4811      	ldr	r0, [pc, #68]	; (a3a0 <CC_PalInit+0x48>)
    a35c:	f000 f848 	bl	a3f0 <CC_PalMutexCreate>
    a360:	b100      	cbz	r0, a364 <CC_PalInit+0xc>
    a362:	bd10      	pop	{r4, pc}
    a364:	480f      	ldr	r0, [pc, #60]	; (a3a4 <CC_PalInit+0x4c>)
    a366:	f000 f843 	bl	a3f0 <CC_PalMutexCreate>
    a36a:	2800      	cmp	r0, #0
    a36c:	d1f9      	bne.n	a362 <CC_PalInit+0xa>
    a36e:	4c0e      	ldr	r4, [pc, #56]	; (a3a8 <CC_PalInit+0x50>)
    a370:	4620      	mov	r0, r4
    a372:	f000 f83d 	bl	a3f0 <CC_PalMutexCreate>
    a376:	2800      	cmp	r0, #0
    a378:	d1f3      	bne.n	a362 <CC_PalInit+0xa>
    a37a:	4b0c      	ldr	r3, [pc, #48]	; (a3ac <CC_PalInit+0x54>)
    a37c:	480c      	ldr	r0, [pc, #48]	; (a3b0 <CC_PalInit+0x58>)
    a37e:	601c      	str	r4, [r3, #0]
    a380:	f000 f836 	bl	a3f0 <CC_PalMutexCreate>
    a384:	4601      	mov	r1, r0
    a386:	2800      	cmp	r0, #0
    a388:	d1eb      	bne.n	a362 <CC_PalInit+0xa>
    a38a:	f000 f82d 	bl	a3e8 <CC_PalDmaInit>
    a38e:	4604      	mov	r4, r0
    a390:	b108      	cbz	r0, a396 <CC_PalInit+0x3e>
    a392:	4620      	mov	r0, r4
    a394:	bd10      	pop	{r4, pc}
    a396:	f000 f83f 	bl	a418 <CC_PalPowerSaveModeInit>
    a39a:	4620      	mov	r0, r4
    a39c:	e7fa      	b.n	a394 <CC_PalInit+0x3c>
    a39e:	bf00      	nop
    a3a0:	200041a8 	.word	0x200041a8
    a3a4:	2000419c 	.word	0x2000419c
    a3a8:	200041a4 	.word	0x200041a4
    a3ac:	200041ac 	.word	0x200041ac
    a3b0:	200041a0 	.word	0x200041a0

0000a3b4 <CC_PalTerminate>:
    a3b4:	b508      	push	{r3, lr}
    a3b6:	4808      	ldr	r0, [pc, #32]	; (a3d8 <CC_PalTerminate+0x24>)
    a3b8:	f000 f824 	bl	a404 <CC_PalMutexDestroy>
    a3bc:	4807      	ldr	r0, [pc, #28]	; (a3dc <CC_PalTerminate+0x28>)
    a3be:	f000 f821 	bl	a404 <CC_PalMutexDestroy>
    a3c2:	4807      	ldr	r0, [pc, #28]	; (a3e0 <CC_PalTerminate+0x2c>)
    a3c4:	f000 f81e 	bl	a404 <CC_PalMutexDestroy>
    a3c8:	4806      	ldr	r0, [pc, #24]	; (a3e4 <CC_PalTerminate+0x30>)
    a3ca:	f000 f81b 	bl	a404 <CC_PalMutexDestroy>
    a3ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    a3d2:	f000 b80b 	b.w	a3ec <CC_PalDmaTerminate>
    a3d6:	bf00      	nop
    a3d8:	200041a8 	.word	0x200041a8
    a3dc:	2000419c 	.word	0x2000419c
    a3e0:	200041a4 	.word	0x200041a4
    a3e4:	200041a0 	.word	0x200041a0

0000a3e8 <CC_PalDmaInit>:
    a3e8:	2000      	movs	r0, #0
    a3ea:	4770      	bx	lr

0000a3ec <CC_PalDmaTerminate>:
    a3ec:	4770      	bx	lr
    a3ee:	bf00      	nop

0000a3f0 <CC_PalMutexCreate>:
    a3f0:	b508      	push	{r3, lr}
    a3f2:	4b03      	ldr	r3, [pc, #12]	; (a400 <CC_PalMutexCreate+0x10>)
    a3f4:	6802      	ldr	r2, [r0, #0]
    a3f6:	681b      	ldr	r3, [r3, #0]
    a3f8:	6810      	ldr	r0, [r2, #0]
    a3fa:	4798      	blx	r3
    a3fc:	2000      	movs	r0, #0
    a3fe:	bd08      	pop	{r3, pc}
    a400:	20004160 	.word	0x20004160

0000a404 <CC_PalMutexDestroy>:
    a404:	b508      	push	{r3, lr}
    a406:	4b03      	ldr	r3, [pc, #12]	; (a414 <CC_PalMutexDestroy+0x10>)
    a408:	6802      	ldr	r2, [r0, #0]
    a40a:	685b      	ldr	r3, [r3, #4]
    a40c:	6810      	ldr	r0, [r2, #0]
    a40e:	4798      	blx	r3
    a410:	2000      	movs	r0, #0
    a412:	bd08      	pop	{r3, pc}
    a414:	20004160 	.word	0x20004160

0000a418 <CC_PalPowerSaveModeInit>:
    a418:	b570      	push	{r4, r5, r6, lr}
    a41a:	4c09      	ldr	r4, [pc, #36]	; (a440 <CC_PalPowerSaveModeInit+0x28>)
    a41c:	4d09      	ldr	r5, [pc, #36]	; (a444 <CC_PalPowerSaveModeInit+0x2c>)
    a41e:	6920      	ldr	r0, [r4, #16]
    a420:	68ab      	ldr	r3, [r5, #8]
    a422:	4798      	blx	r3
    a424:	b118      	cbz	r0, a42e <CC_PalPowerSaveModeInit+0x16>
    a426:	4b08      	ldr	r3, [pc, #32]	; (a448 <CC_PalPowerSaveModeInit+0x30>)
    a428:	4808      	ldr	r0, [pc, #32]	; (a44c <CC_PalPowerSaveModeInit+0x34>)
    a42a:	685b      	ldr	r3, [r3, #4]
    a42c:	4798      	blx	r3
    a42e:	4a08      	ldr	r2, [pc, #32]	; (a450 <CC_PalPowerSaveModeInit+0x38>)
    a430:	68eb      	ldr	r3, [r5, #12]
    a432:	6920      	ldr	r0, [r4, #16]
    a434:	2100      	movs	r1, #0
    a436:	6011      	str	r1, [r2, #0]
    a438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a43c:	4718      	bx	r3
    a43e:	bf00      	nop
    a440:	20004170 	.word	0x20004170
    a444:	20004160 	.word	0x20004160
    a448:	20004150 	.word	0x20004150
    a44c:	0000e018 	.word	0x0000e018
    a450:	20005120 	.word	0x20005120

0000a454 <CC_PalPowerSaveModeSelect>:
    a454:	b570      	push	{r4, r5, r6, lr}
    a456:	4d1b      	ldr	r5, [pc, #108]	; (a4c4 <CC_PalPowerSaveModeSelect+0x70>)
    a458:	4e1b      	ldr	r6, [pc, #108]	; (a4c8 <CC_PalPowerSaveModeSelect+0x74>)
    a45a:	4604      	mov	r4, r0
    a45c:	68b2      	ldr	r2, [r6, #8]
    a45e:	6928      	ldr	r0, [r5, #16]
    a460:	4790      	blx	r2
    a462:	b9f8      	cbnz	r0, a4a4 <CC_PalPowerSaveModeSelect+0x50>
    a464:	b15c      	cbz	r4, a47e <CC_PalPowerSaveModeSelect+0x2a>
    a466:	4c19      	ldr	r4, [pc, #100]	; (a4cc <CC_PalPowerSaveModeSelect+0x78>)
    a468:	6823      	ldr	r3, [r4, #0]
    a46a:	b1b3      	cbz	r3, a49a <CC_PalPowerSaveModeSelect+0x46>
    a46c:	2b01      	cmp	r3, #1
    a46e:	d01b      	beq.n	a4a8 <CC_PalPowerSaveModeSelect+0x54>
    a470:	3b01      	subs	r3, #1
    a472:	6023      	str	r3, [r4, #0]
    a474:	6928      	ldr	r0, [r5, #16]
    a476:	68f3      	ldr	r3, [r6, #12]
    a478:	4798      	blx	r3
    a47a:	2000      	movs	r0, #0
    a47c:	bd70      	pop	{r4, r5, r6, pc}
    a47e:	4c13      	ldr	r4, [pc, #76]	; (a4cc <CC_PalPowerSaveModeSelect+0x78>)
    a480:	6821      	ldr	r1, [r4, #0]
    a482:	b941      	cbnz	r1, a496 <CC_PalPowerSaveModeSelect+0x42>
    a484:	4b12      	ldr	r3, [pc, #72]	; (a4d0 <CC_PalPowerSaveModeSelect+0x7c>)
    a486:	2201      	movs	r2, #1
    a488:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    a48c:	4a11      	ldr	r2, [pc, #68]	; (a4d4 <CC_PalPowerSaveModeSelect+0x80>)
    a48e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    a492:	2b00      	cmp	r3, #0
    a494:	d1fb      	bne.n	a48e <CC_PalPowerSaveModeSelect+0x3a>
    a496:	3101      	adds	r1, #1
    a498:	6021      	str	r1, [r4, #0]
    a49a:	68f3      	ldr	r3, [r6, #12]
    a49c:	6928      	ldr	r0, [r5, #16]
    a49e:	4798      	blx	r3
    a4a0:	2000      	movs	r0, #0
    a4a2:	bd70      	pop	{r4, r5, r6, pc}
    a4a4:	480c      	ldr	r0, [pc, #48]	; (a4d8 <CC_PalPowerSaveModeSelect+0x84>)
    a4a6:	bd70      	pop	{r4, r5, r6, pc}
    a4a8:	4a0a      	ldr	r2, [pc, #40]	; (a4d4 <CC_PalPowerSaveModeSelect+0x80>)
    a4aa:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    a4ae:	2b00      	cmp	r3, #0
    a4b0:	d1fb      	bne.n	a4aa <CC_PalPowerSaveModeSelect+0x56>
    a4b2:	4a07      	ldr	r2, [pc, #28]	; (a4d0 <CC_PalPowerSaveModeSelect+0x7c>)
    a4b4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    a4b8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    a4bc:	f7ff ff46 	bl	a34c <CC_HalMaskInterrupt>
    a4c0:	6823      	ldr	r3, [r4, #0]
    a4c2:	e7d5      	b.n	a470 <CC_PalPowerSaveModeSelect+0x1c>
    a4c4:	20004170 	.word	0x20004170
    a4c8:	20004160 	.word	0x20004160
    a4cc:	20005120 	.word	0x20005120
    a4d0:	5002a000 	.word	0x5002a000
    a4d4:	5002b000 	.word	0x5002b000
    a4d8:	ffff8fe9 	.word	0xffff8fe9

0000a4dc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    a4dc:	4770      	bx	lr

0000a4de <open_cab>:
    uint8_t *buffersTaken;
};

// creates a new cab
cab *open_cab(char *name, int num, size_t dim, void *first)
{
    a4de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a4e2:	4604      	mov	r4, r0
    a4e4:	460e      	mov	r6, r1
    a4e6:	4690      	mov	r8, r2
    a4e8:	4699      	mov	r9, r3
    cab *new_cab = calloc(1, sizeof(cab));
    a4ea:	2118      	movs	r1, #24
    a4ec:	2001      	movs	r0, #1
    a4ee:	f7ff fd99 	bl	a024 <calloc>
    a4f2:	4605      	mov	r5, r0
    new_cab->name = name;
    a4f4:	6044      	str	r4, [r0, #4]
    new_cab->num = num;
    a4f6:	6086      	str	r6, [r0, #8]
    new_cab->dim = dim;
    a4f8:	f8c0 800c 	str.w	r8, [r0, #12]
    new_cab->op_Mutex = (struct k_mutex*)calloc(1, sizeof(struct k_mutex));
    a4fc:	2114      	movs	r1, #20
    a4fe:	2001      	movs	r0, #1
    a500:	f7ff fd90 	bl	a024 <calloc>
    a504:	6028      	str	r0, [r5, #0]
	return z_impl_k_mutex_init(mutex);
    a506:	f001 fbbc 	bl	bc82 <z_impl_k_mutex_init>
    k_mutex_init(new_cab->op_Mutex);
    // allocate the buffersTaken array
    new_cab->buffersTaken = (uint8_t *)calloc(num, sizeof(uint8_t));
    a50a:	2101      	movs	r1, #1
    a50c:	4630      	mov	r0, r6
    a50e:	f7ff fd89 	bl	a024 <calloc>
    a512:	6168      	str	r0, [r5, #20]
    for (size_t i = 0; i < num; i++)
    a514:	2400      	movs	r4, #0
    a516:	e003      	b.n	a520 <open_cab+0x42>
        new_cab->buffersTaken[i] = 0;
    a518:	696b      	ldr	r3, [r5, #20]
    a51a:	2200      	movs	r2, #0
    a51c:	551a      	strb	r2, [r3, r4]
    for (size_t i = 0; i < num; i++)
    a51e:	3401      	adds	r4, #1
    a520:	42a6      	cmp	r6, r4
    a522:	d8f9      	bhi.n	a518 <open_cab+0x3a>

    // allocate all buffers
    new_cab->buffers = (void **)calloc(num, sizeof(void *));
    a524:	2104      	movs	r1, #4
    a526:	4630      	mov	r0, r6
    a528:	f7ff fd7c 	bl	a024 <calloc>
    a52c:	6128      	str	r0, [r5, #16]
    for (size_t i = 0; i < num; i++)
    a52e:	2400      	movs	r4, #0
    a530:	e007      	b.n	a542 <open_cab+0x64>
    {
        new_cab->buffers[i] = (void *)calloc(1, dim);
    a532:	692f      	ldr	r7, [r5, #16]
    a534:	4641      	mov	r1, r8
    a536:	2001      	movs	r0, #1
    a538:	f7ff fd74 	bl	a024 <calloc>
    a53c:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
    for (size_t i = 0; i < num; i++)
    a540:	3401      	adds	r4, #1
    a542:	42a6      	cmp	r6, r4
    a544:	d8f5      	bhi.n	a532 <open_cab+0x54>
    }

    memcpy(new_cab->buffers[0], first, dim);
    a546:	692b      	ldr	r3, [r5, #16]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    a548:	4642      	mov	r2, r8
    a54a:	4649      	mov	r1, r9
    a54c:	6818      	ldr	r0, [r3, #0]
    a54e:	f001 fc1b 	bl	bd88 <memcpy>
    new_cab->buffersTaken[0] = 1; // The first will always be taken
    a552:	696b      	ldr	r3, [r5, #20]
    a554:	2201      	movs	r2, #1
    a556:	701a      	strb	r2, [r3, #0]
    return new_cab;
}
    a558:	4628      	mov	r0, r5
    a55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000a55e <reserve>:

// returns a new buffer
void *reserve(cab *cab_id)
{
    a55e:	b538      	push	{r3, r4, r5, lr}
    a560:	4605      	mov	r5, r0
    k_mutex_lock(cab_id->op_Mutex, K_FOREVER);
    a562:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    a564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a56c:	f7fd fab8 	bl	7ae0 <z_impl_k_mutex_lock>
    
    // find a free buffer
    for (size_t i = 0; i < cab_id->num; i++)
    a570:	2400      	movs	r4, #0
    a572:	e000      	b.n	a576 <reserve+0x18>
    a574:	3401      	adds	r4, #1
    a576:	68ab      	ldr	r3, [r5, #8]
    a578:	42a3      	cmp	r3, r4
    a57a:	d90d      	bls.n	a598 <reserve+0x3a>
    {
        if (cab_id->buffersTaken[i] == 0)
    a57c:	696b      	ldr	r3, [r5, #20]
    a57e:	191a      	adds	r2, r3, r4
    a580:	5d1b      	ldrb	r3, [r3, r4]
    a582:	2b00      	cmp	r3, #0
    a584:	d1f6      	bne.n	a574 <reserve+0x16>
        {
            cab_id->buffersTaken[i] = 1;
    a586:	2301      	movs	r3, #1
    a588:	7013      	strb	r3, [r2, #0]
            k_mutex_unlock(cab_id->op_Mutex);
    a58a:	6828      	ldr	r0, [r5, #0]
	return z_impl_k_mutex_unlock(mutex);
    a58c:	f7fd fbc8 	bl	7d20 <z_impl_k_mutex_unlock>
            return cab_id->buffers[i];
    a590:	692b      	ldr	r3, [r5, #16]
    a592:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    a596:	e003      	b.n	a5a0 <reserve+0x42>
        }
    }
            k_mutex_unlock(cab_id->op_Mutex);
    a598:	6828      	ldr	r0, [r5, #0]
    a59a:	f7fd fbc1 	bl	7d20 <z_impl_k_mutex_unlock>
    
    return NULL;
    a59e:	2000      	movs	r0, #0
}
    a5a0:	bd38      	pop	{r3, r4, r5, pc}

0000a5a2 <put_mes>:

// puts a filled buffer inside the CAB
void put_mes(void *buf_pointer, cab *cab_id)
{
    a5a2:	b570      	push	{r4, r5, r6, lr}
    a5a4:	4606      	mov	r6, r0
    a5a6:	460d      	mov	r5, r1
    k_mutex_lock(cab_id->op_Mutex, K_FOREVER);
    a5a8:	6808      	ldr	r0, [r1, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    a5aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a5ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a5b2:	f7fd fa95 	bl	7ae0 <z_impl_k_mutex_lock>
    

    for (size_t i = 0; i < cab_id->num; i++)
    a5b6:	2400      	movs	r4, #0
    a5b8:	e000      	b.n	a5bc <put_mes+0x1a>
    a5ba:	3401      	adds	r4, #1
    a5bc:	68ab      	ldr	r3, [r5, #8]
    a5be:	42a3      	cmp	r3, r4
    a5c0:	d90c      	bls.n	a5dc <put_mes+0x3a>
    {
        if (cab_id->buffers[i] == buf_pointer)
    a5c2:	692b      	ldr	r3, [r5, #16]
    a5c4:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    a5c8:	42b1      	cmp	r1, r6
    a5ca:	d1f6      	bne.n	a5ba <put_mes+0x18>
    a5cc:	68ea      	ldr	r2, [r5, #12]
    a5ce:	6818      	ldr	r0, [r3, #0]
    a5d0:	f001 fbda 	bl	bd88 <memcpy>
        {
            memcpy(cab_id->buffers[0], cab_id->buffers[i], cab_id->dim);
            cab_id->buffersTaken[i] = 0;
    a5d4:	696b      	ldr	r3, [r5, #20]
    a5d6:	2200      	movs	r2, #0
    a5d8:	551a      	strb	r2, [r3, r4]
    a5da:	e7ee      	b.n	a5ba <put_mes+0x18>
        }
    }
            k_mutex_unlock(cab_id->op_Mutex);
    a5dc:	6828      	ldr	r0, [r5, #0]
	return z_impl_k_mutex_unlock(mutex);
    a5de:	f7fd fb9f 	bl	7d20 <z_impl_k_mutex_unlock>
    
}
    a5e2:	bd70      	pop	{r4, r5, r6, pc}

0000a5e4 <get_mes>:

// get latest message
void *get_mes(cab *cab_id)
{
    a5e4:	b538      	push	{r3, r4, r5, lr}
    a5e6:	4605      	mov	r5, r0
    k_mutex_lock(cab_id->op_Mutex, K_FOREVER);
    a5e8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    a5ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a5ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a5f2:	f7fd fa75 	bl	7ae0 <z_impl_k_mutex_lock>
    
    // find a free buffer
    for (size_t i = 0; i < cab_id->num; i++)
    a5f6:	2400      	movs	r4, #0
    a5f8:	e000      	b.n	a5fc <get_mes+0x18>
    a5fa:	3401      	adds	r4, #1
    a5fc:	68ab      	ldr	r3, [r5, #8]
    a5fe:	42a3      	cmp	r3, r4
    a600:	d914      	bls.n	a62c <get_mes+0x48>
    {
        if (cab_id->buffersTaken[i] == 0)
    a602:	696b      	ldr	r3, [r5, #20]
    a604:	191a      	adds	r2, r3, r4
    a606:	5d1b      	ldrb	r3, [r3, r4]
    a608:	2b00      	cmp	r3, #0
    a60a:	d1f6      	bne.n	a5fa <get_mes+0x16>
        {
            cab_id->buffersTaken[i] = 1;
    a60c:	2301      	movs	r3, #1
    a60e:	7013      	strb	r3, [r2, #0]
            memcpy(cab_id->buffers[i], cab_id->buffers[0], cab_id->dim);
    a610:	692b      	ldr	r3, [r5, #16]
    a612:	68ea      	ldr	r2, [r5, #12]
    a614:	6819      	ldr	r1, [r3, #0]
    a616:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    a61a:	f001 fbb5 	bl	bd88 <memcpy>
            k_mutex_unlock(cab_id->op_Mutex);
    a61e:	6828      	ldr	r0, [r5, #0]
	return z_impl_k_mutex_unlock(mutex);
    a620:	f7fd fb7e 	bl	7d20 <z_impl_k_mutex_unlock>
            
            return cab_id->buffers[i];
    a624:	692b      	ldr	r3, [r5, #16]
    a626:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    a62a:	e003      	b.n	a634 <get_mes+0x50>
        }
    }
            k_mutex_unlock(cab_id->op_Mutex);
    a62c:	6828      	ldr	r0, [r5, #0]
    a62e:	f7fd fb77 	bl	7d20 <z_impl_k_mutex_unlock>
    
    return NULL;
    a632:	2000      	movs	r0, #0
}
    a634:	bd38      	pop	{r3, r4, r5, pc}

0000a636 <unget>:

// release message to the CAB
void unget(void* mes_pointer, cab *cab_id)
{
    a636:	b538      	push	{r3, r4, r5, lr}
    a638:	4605      	mov	r5, r0
    a63a:	460c      	mov	r4, r1
    k_mutex_lock(cab_id->op_Mutex, K_FOREVER);
    a63c:	6808      	ldr	r0, [r1, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    a63e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a646:	f7fd fa4b 	bl	7ae0 <z_impl_k_mutex_lock>
    
    for (size_t i = 0; i < cab_id->num; i++)
    a64a:	2300      	movs	r3, #0
    a64c:	e000      	b.n	a650 <unget+0x1a>
    a64e:	3301      	adds	r3, #1
    a650:	68a2      	ldr	r2, [r4, #8]
    a652:	429a      	cmp	r2, r3
    a654:	d908      	bls.n	a668 <unget+0x32>
    {
        if (cab_id->buffers[i] == mes_pointer)
    a656:	6922      	ldr	r2, [r4, #16]
    a658:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a65c:	42aa      	cmp	r2, r5
    a65e:	d1f6      	bne.n	a64e <unget+0x18>
        {
            cab_id->buffersTaken[i] = 0;
    a660:	6962      	ldr	r2, [r4, #20]
    a662:	2100      	movs	r1, #0
    a664:	54d1      	strb	r1, [r2, r3]
    a666:	e7f2      	b.n	a64e <unget+0x18>
        }
    }
            k_mutex_unlock(cab_id->op_Mutex);
    a668:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_unlock(mutex);
    a66a:	f7fd fb59 	bl	7d20 <z_impl_k_mutex_unlock>
    
}
    a66e:	bd38      	pop	{r3, r4, r5, pc}

0000a670 <cbprintf_via_va_list>:
{
    a670:	b510      	push	{r4, lr}
    a672:	460c      	mov	r4, r1
    a674:	4611      	mov	r1, r2
    a676:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    a678:	9b02      	ldr	r3, [sp, #8]
    a67a:	47a0      	blx	r4
}
    a67c:	bd10      	pop	{r4, pc}

0000a67e <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    a67e:	b353      	cbz	r3, a6d6 <cbpprintf_external+0x58>
{
    a680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a684:	b082      	sub	sp, #8
    a686:	4607      	mov	r7, r0
    a688:	4688      	mov	r8, r1
    a68a:	4691      	mov	r9, r2
    a68c:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
    a68e:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = buf[1];
    a690:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = buf[2];
    a692:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = buf[3];
    a694:	78db      	ldrb	r3, [r3, #3]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    a696:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    a69a:	441c      	add	r4, r3
    a69c:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    a69e:	f04f 0a00 	mov.w	sl, #0
    a6a2:	e00a      	b.n	a6ba <cbpprintf_external+0x3c>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
    a6a4:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
    a6a8:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
    a6ac:	4620      	mov	r0, r4
    a6ae:	f7f5 fe94 	bl	3da <strlen>
    a6b2:	3001      	adds	r0, #1
    a6b4:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    a6b6:	f10a 0a01 	add.w	sl, sl, #1
    a6ba:	45b2      	cmp	sl, r6
    a6bc:	d3f2      	bcc.n	a6a4 <cbpprintf_external+0x26>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
    a6be:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
    a6c2:	9300      	str	r3, [sp, #0]
    a6c4:	686b      	ldr	r3, [r5, #4]
    a6c6:	464a      	mov	r2, r9
    a6c8:	4641      	mov	r1, r8
    a6ca:	4638      	mov	r0, r7
    a6cc:	f7ff ffd0 	bl	a670 <cbprintf_via_va_list>
}
    a6d0:	b002      	add	sp, #8
    a6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    a6d6:	f06f 0015 	mvn.w	r0, #21
}
    a6da:	4770      	bx	lr

0000a6dc <sys_notify_validate>:
	if (notify == NULL) {
    a6dc:	4602      	mov	r2, r0
    a6de:	b158      	cbz	r0, a6f8 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a6e0:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    a6e2:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    a6e6:	2b01      	cmp	r3, #1
    a6e8:	d003      	beq.n	a6f2 <sys_notify_validate+0x16>
    a6ea:	2b03      	cmp	r3, #3
    a6ec:	d107      	bne.n	a6fe <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    a6ee:	6803      	ldr	r3, [r0, #0]
    a6f0:	b143      	cbz	r3, a704 <sys_notify_validate+0x28>
		notify->result = 0;
    a6f2:	2000      	movs	r0, #0
    a6f4:	6090      	str	r0, [r2, #8]
    a6f6:	4770      	bx	lr
		return -EINVAL;
    a6f8:	f06f 0015 	mvn.w	r0, #21
    a6fc:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    a6fe:	f06f 0015 	mvn.w	r0, #21
    a702:	4770      	bx	lr
			rv = -EINVAL;
    a704:	f06f 0015 	mvn.w	r0, #21
}
    a708:	4770      	bx	lr

0000a70a <arch_printk_char_out>:
}
    a70a:	2000      	movs	r0, #0
    a70c:	4770      	bx	lr

0000a70e <vprintk>:
	ctx->count++;
	return _char_out(c);
}

void vprintk(const char *fmt, va_list ap)
{
    a70e:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    a710:	f000 f921 	bl	a956 <z_log_vprintk>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    a714:	bd08      	pop	{r3, pc}

0000a716 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    a716:	b40f      	push	{r0, r1, r2, r3}
    a718:	b500      	push	{lr}
    a71a:	b083      	sub	sp, #12
    a71c:	a904      	add	r1, sp, #16
    a71e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    a722:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    a724:	f7ff fff3 	bl	a70e <vprintk>

	va_end(ap);
}
    a728:	b003      	add	sp, #12
    a72a:	f85d eb04 	ldr.w	lr, [sp], #4
    a72e:	b004      	add	sp, #16
    a730:	4770      	bx	lr

0000a732 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    a732:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a736:	8b81      	ldrh	r1, [r0, #28]
    a738:	f021 0107 	bic.w	r1, r1, #7
    a73c:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    a73e:	8381      	strh	r1, [r0, #28]
}
    a740:	4770      	bx	lr

0000a742 <notify_monitors>:
{
    a742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a746:	4606      	mov	r6, r0
    a748:	460f      	mov	r7, r1
    a74a:	4690      	mov	r8, r2
	return list->head;
    a74c:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a74e:	b119      	cbz	r1, a758 <notify_monitors+0x16>
    a750:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    a752:	b131      	cbz	r1, a762 <notify_monitors+0x20>
	return node->next;
    a754:	680c      	ldr	r4, [r1, #0]
    a756:	e004      	b.n	a762 <notify_monitors+0x20>
    a758:	460c      	mov	r4, r1
    a75a:	e002      	b.n	a762 <notify_monitors+0x20>
    a75c:	4623      	mov	r3, r4
    a75e:	4621      	mov	r1, r4
    a760:	461c      	mov	r4, r3
    a762:	b159      	cbz	r1, a77c <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    a764:	684d      	ldr	r5, [r1, #4]
    a766:	4643      	mov	r3, r8
    a768:	463a      	mov	r2, r7
    a76a:	4630      	mov	r0, r6
    a76c:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a76e:	2c00      	cmp	r4, #0
    a770:	d0f4      	beq.n	a75c <notify_monitors+0x1a>
    a772:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    a774:	2c00      	cmp	r4, #0
    a776:	d0f2      	beq.n	a75e <notify_monitors+0x1c>
	return node->next;
    a778:	6823      	ldr	r3, [r4, #0]
    a77a:	e7f0      	b.n	a75e <notify_monitors+0x1c>
}
    a77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a780 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a780:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    a782:	f013 0307 	ands.w	r3, r3, #7
    a786:	d103      	bne.n	a790 <process_recheck+0x10>
	return list->head;
    a788:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    a78a:	b10a      	cbz	r2, a790 <process_recheck+0x10>
		evt = EVT_START;
    a78c:	2003      	movs	r0, #3
    a78e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    a790:	2b02      	cmp	r3, #2
    a792:	d003      	beq.n	a79c <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    a794:	2b01      	cmp	r3, #1
    a796:	d006      	beq.n	a7a6 <process_recheck+0x26>
	int evt = EVT_NOP;
    a798:	2000      	movs	r0, #0
    a79a:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    a79c:	8bc2      	ldrh	r2, [r0, #30]
    a79e:	2a00      	cmp	r2, #0
    a7a0:	d1f8      	bne.n	a794 <process_recheck+0x14>
		evt = EVT_STOP;
    a7a2:	2004      	movs	r0, #4
    a7a4:	4770      	bx	lr
    a7a6:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    a7a8:	b10b      	cbz	r3, a7ae <process_recheck+0x2e>
		evt = EVT_RESET;
    a7aa:	2005      	movs	r0, #5
}
    a7ac:	4770      	bx	lr
	int evt = EVT_NOP;
    a7ae:	2000      	movs	r0, #0
    a7b0:	4770      	bx	lr

0000a7b2 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    a7b2:	b158      	cbz	r0, a7cc <validate_args+0x1a>
{
    a7b4:	b510      	push	{r4, lr}
    a7b6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    a7b8:	b159      	cbz	r1, a7d2 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    a7ba:	1d08      	adds	r0, r1, #4
    a7bc:	f7ff ff8e 	bl	a6dc <sys_notify_validate>
	if ((rv == 0)
    a7c0:	b918      	cbnz	r0, a7ca <validate_args+0x18>
	    && ((cli->notify.flags
    a7c2:	68a3      	ldr	r3, [r4, #8]
    a7c4:	f033 0303 	bics.w	r3, r3, #3
    a7c8:	d106      	bne.n	a7d8 <validate_args+0x26>
}
    a7ca:	bd10      	pop	{r4, pc}
		return -EINVAL;
    a7cc:	f06f 0015 	mvn.w	r0, #21
}
    a7d0:	4770      	bx	lr
		return -EINVAL;
    a7d2:	f06f 0015 	mvn.w	r0, #21
    a7d6:	e7f8      	b.n	a7ca <validate_args+0x18>
		rv = -EINVAL;
    a7d8:	f06f 0015 	mvn.w	r0, #21
    a7dc:	e7f5      	b.n	a7ca <validate_args+0x18>

0000a7de <notify_one>:
{
    a7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7e2:	4607      	mov	r7, r0
    a7e4:	460c      	mov	r4, r1
    a7e6:	4616      	mov	r6, r2
    a7e8:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    a7ea:	4619      	mov	r1, r3
    a7ec:	1d20      	adds	r0, r4, #4
    a7ee:	f7f6 f99f 	bl	b30 <sys_notify_finalize>
	if (cb) {
    a7f2:	b128      	cbz	r0, a800 <notify_one+0x22>
    a7f4:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    a7f6:	462b      	mov	r3, r5
    a7f8:	4632      	mov	r2, r6
    a7fa:	4621      	mov	r1, r4
    a7fc:	4638      	mov	r0, r7
    a7fe:	47c0      	blx	r8
}
    a800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a804 <notify_all>:
{
    a804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a808:	4680      	mov	r8, r0
    a80a:	460c      	mov	r4, r1
    a80c:	4617      	mov	r7, r2
    a80e:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    a810:	e004      	b.n	a81c <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    a812:	4633      	mov	r3, r6
    a814:	463a      	mov	r2, r7
    a816:	4640      	mov	r0, r8
    a818:	f7ff ffe1 	bl	a7de <notify_one>
    a81c:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    a81e:	b131      	cbz	r1, a82e <notify_all+0x2a>
	return node->next;
    a820:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    a822:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a824:	6863      	ldr	r3, [r4, #4]
    a826:	428b      	cmp	r3, r1
    a828:	d1f3      	bne.n	a812 <notify_all+0xe>
	list->tail = node;
    a82a:	6065      	str	r5, [r4, #4]
}
    a82c:	e7f1      	b.n	a812 <notify_all+0xe>
}
    a82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a832 <onoff_manager_init>:
	if ((mgr == NULL)
    a832:	b170      	cbz	r0, a852 <onoff_manager_init+0x20>
{
    a834:	b538      	push	{r3, r4, r5, lr}
    a836:	460c      	mov	r4, r1
    a838:	4605      	mov	r5, r0
	    || (transitions == NULL)
    a83a:	b169      	cbz	r1, a858 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    a83c:	680b      	ldr	r3, [r1, #0]
    a83e:	b173      	cbz	r3, a85e <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    a840:	684b      	ldr	r3, [r1, #4]
    a842:	b17b      	cbz	r3, a864 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    a844:	2220      	movs	r2, #32
    a846:	2100      	movs	r1, #0
    a848:	f001 faac 	bl	bda4 <memset>
    a84c:	612c      	str	r4, [r5, #16]
	return 0;
    a84e:	2000      	movs	r0, #0
}
    a850:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    a852:	f06f 0015 	mvn.w	r0, #21
}
    a856:	4770      	bx	lr
		return -EINVAL;
    a858:	f06f 0015 	mvn.w	r0, #21
    a85c:	e7f8      	b.n	a850 <onoff_manager_init+0x1e>
    a85e:	f06f 0015 	mvn.w	r0, #21
    a862:	e7f5      	b.n	a850 <onoff_manager_init+0x1e>
    a864:	f06f 0015 	mvn.w	r0, #21
    a868:	e7f2      	b.n	a850 <onoff_manager_init+0x1e>

0000a86a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    a86a:	b508      	push	{r3, lr}
    a86c:	4604      	mov	r4, r0
    a86e:	4608      	mov	r0, r1
    a870:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    a872:	461a      	mov	r2, r3
    a874:	47a0      	blx	r4
	return z_impl_z_current_get();
    a876:	f7fe fe53 	bl	9520 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    a87a:	f7f8 fff3 	bl	3864 <z_impl_k_thread_abort>

0000a87e <free_list_add_bidx>:
{
    a87e:	b510      	push	{r4, lr}
	if (b->next == 0U) {
    a880:	1d13      	adds	r3, r2, #4
    a882:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    a886:	b97c      	cbnz	r4, a8a8 <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
    a888:	2301      	movs	r3, #1
    a88a:	fa03 f402 	lsl.w	r4, r3, r2
    a88e:	68c3      	ldr	r3, [r0, #12]
    a890:	4323      	orrs	r3, r4
    a892:	60c3      	str	r3, [r0, #12]
		b->next = c;
    a894:	3204      	adds	r2, #4
    a896:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    a89a:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    a89c:	1d1a      	adds	r2, r3, #4
    a89e:	b289      	uxth	r1, r1
    a8a0:	5281      	strh	r1, [r0, r2]
    a8a2:	3306      	adds	r3, #6
    a8a4:	52c1      	strh	r1, [r0, r3]
}
    a8a6:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    a8a8:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    a8aa:	3204      	adds	r2, #4
    a8ac:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    a8ae:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    a8b2:	f10c 0e04 	add.w	lr, ip, #4
    a8b6:	f820 300e 	strh.w	r3, [r0, lr]
    a8ba:	f10c 0c06 	add.w	ip, ip, #6
    a8be:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    a8c2:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    a8c4:	3306      	adds	r3, #6
    a8c6:	b289      	uxth	r1, r1
    a8c8:	52c1      	strh	r1, [r0, r3]
    a8ca:	5281      	strh	r1, [r0, r2]
    a8cc:	e7eb      	b.n	a8a6 <free_list_add_bidx+0x28>

0000a8ce <free_list_add>:
{
    a8ce:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    a8d0:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    a8d4:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    a8d6:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    a8d8:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    a8dc:	f1c2 021f 	rsb	r2, r2, #31
    a8e0:	f7ff ffcd 	bl	a87e <free_list_add_bidx>
}
    a8e4:	bd08      	pop	{r3, pc}

0000a8e6 <outs>:
{
    a8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8ea:	4607      	mov	r7, r0
    a8ec:	460e      	mov	r6, r1
    a8ee:	4614      	mov	r4, r2
    a8f0:	4698      	mov	r8, r3
	size_t count = 0;
    a8f2:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    a8f4:	e006      	b.n	a904 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    a8f6:	4631      	mov	r1, r6
    a8f8:	f814 0b01 	ldrb.w	r0, [r4], #1
    a8fc:	47b8      	blx	r7
		if (rc < 0) {
    a8fe:	2800      	cmp	r0, #0
    a900:	db09      	blt.n	a916 <outs+0x30>
		++count;
    a902:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    a904:	4544      	cmp	r4, r8
    a906:	d3f6      	bcc.n	a8f6 <outs+0x10>
    a908:	f1b8 0f00 	cmp.w	r8, #0
    a90c:	d102      	bne.n	a914 <outs+0x2e>
    a90e:	7823      	ldrb	r3, [r4, #0]
    a910:	2b00      	cmp	r3, #0
    a912:	d1f0      	bne.n	a8f6 <outs+0x10>
	return (int)count;
    a914:	4628      	mov	r0, r5
}
    a916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a91a <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    a91a:	4040      	eors	r0, r0
    a91c:	f380 8811 	msr	BASEPRI, r0
    a920:	f04f 0004 	mov.w	r0, #4
    a924:	df02      	svc	2
}
    a926:	4770      	bx	lr

0000a928 <assert_print>:

void assert_print(const char *fmt, ...)
{
    a928:	b40f      	push	{r0, r1, r2, r3}
    a92a:	b500      	push	{lr}
    a92c:	b083      	sub	sp, #12
    a92e:	a904      	add	r1, sp, #16
    a930:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    a934:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    a936:	f7ff feea 	bl	a70e <vprintk>

	va_end(ap);
}
    a93a:	b003      	add	sp, #12
    a93c:	f85d eb04 	ldr.w	lr, [sp], #4
    a940:	b004      	add	sp, #16
    a942:	4770      	bx	lr

0000a944 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    a944:	4770      	bx	lr

0000a946 <dummy_timestamp>:
}
    a946:	2000      	movs	r0, #0
    a948:	4770      	bx	lr

0000a94a <msg_filter_check>:
}
    a94a:	2001      	movs	r0, #1
    a94c:	4770      	bx	lr

0000a94e <default_get_timestamp>:
{
    a94e:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    a950:	f001 f80e 	bl	b970 <sys_clock_cycle_get_32>
}
    a954:	bd08      	pop	{r3, pc}

0000a956 <z_log_vprintk>:
{
    a956:	b500      	push	{lr}
    a958:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    a95a:	9103      	str	r1, [sp, #12]
    a95c:	9002      	str	r0, [sp, #8]
    a95e:	2000      	movs	r0, #0
    a960:	9001      	str	r0, [sp, #4]
    a962:	9000      	str	r0, [sp, #0]
    a964:	4603      	mov	r3, r0
    a966:	4602      	mov	r2, r0
    a968:	4601      	mov	r1, r0
    a96a:	f7f7 fda9 	bl	24c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    a96e:	b005      	add	sp, #20
    a970:	f85d fb04 	ldr.w	pc, [sp], #4

0000a974 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    a974:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    a976:	f7f7 fa75 	bl	1e64 <log_init>
	}

	return 0;
}
    a97a:	2000      	movs	r0, #0
    a97c:	bd08      	pop	{r3, pc}

0000a97e <z_log_get_tag>:
}
    a97e:	2000      	movs	r0, #0
    a980:	4770      	bx	lr

0000a982 <out_func>:
{
    a982:	b500      	push	{lr}
    a984:	b083      	sub	sp, #12
		char x = (char)c;
    a986:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    a98a:	680b      	ldr	r3, [r1, #0]
    a98c:	684a      	ldr	r2, [r1, #4]
    a98e:	6852      	ldr	r2, [r2, #4]
    a990:	2101      	movs	r1, #1
    a992:	f10d 0007 	add.w	r0, sp, #7
    a996:	4798      	blx	r3
}
    a998:	2000      	movs	r0, #0
    a99a:	b003      	add	sp, #12
    a99c:	f85d fb04 	ldr.w	pc, [sp], #4

0000a9a0 <cr_out_func>:
{
    a9a0:	b538      	push	{r3, r4, r5, lr}
    a9a2:	4604      	mov	r4, r0
    a9a4:	460d      	mov	r5, r1
	out_func(c, ctx);
    a9a6:	f7ff ffec 	bl	a982 <out_func>
	if (c == '\n') {
    a9aa:	2c0a      	cmp	r4, #10
    a9ac:	d001      	beq.n	a9b2 <cr_out_func+0x12>
}
    a9ae:	2000      	movs	r0, #0
    a9b0:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    a9b2:	4629      	mov	r1, r5
    a9b4:	200d      	movs	r0, #13
    a9b6:	f7ff ffe4 	bl	a982 <out_func>
    a9ba:	e7f8      	b.n	a9ae <cr_out_func+0xe>

0000a9bc <buffer_write>:
{
    a9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9be:	4607      	mov	r7, r0
    a9c0:	460d      	mov	r5, r1
    a9c2:	4614      	mov	r4, r2
    a9c4:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    a9c6:	4632      	mov	r2, r6
    a9c8:	4621      	mov	r1, r4
    a9ca:	4628      	mov	r0, r5
    a9cc:	47b8      	blx	r7
		buf += processed;
    a9ce:	4405      	add	r5, r0
	} while (len != 0);
    a9d0:	1a24      	subs	r4, r4, r0
    a9d2:	d1f8      	bne.n	a9c6 <buffer_write+0xa>
}
    a9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a9d6 <color_prefix>:
{
    a9d6:	b508      	push	{r3, lr}
    a9d8:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    a9da:	2201      	movs	r2, #1
    a9dc:	f7f7 fbe8 	bl	21b0 <color_print>
}
    a9e0:	bd08      	pop	{r3, pc}

0000a9e2 <color_postfix>:
{
    a9e2:	b508      	push	{r3, lr}
    a9e4:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    a9e6:	2200      	movs	r2, #0
    a9e8:	f7f7 fbe2 	bl	21b0 <color_print>
}
    a9ec:	bd08      	pop	{r3, pc}

0000a9ee <postfix_print>:
{
    a9ee:	b538      	push	{r3, r4, r5, lr}
    a9f0:	4605      	mov	r5, r0
    a9f2:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    a9f4:	f001 0101 	and.w	r1, r1, #1
    a9f8:	f7ff fff3 	bl	a9e2 <color_postfix>
	newline_print(output, flags);
    a9fc:	4621      	mov	r1, r4
    a9fe:	4628      	mov	r0, r5
    aa00:	f7f7 fbec 	bl	21dc <newline_print>
}
    aa04:	bd38      	pop	{r3, r4, r5, pc}

0000aa06 <log_msg2_hexdump>:
{
    aa06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    aa0a:	b083      	sub	sp, #12
    aa0c:	4680      	mov	r8, r0
    aa0e:	460e      	mov	r6, r1
    aa10:	4615      	mov	r5, r2
    aa12:	461f      	mov	r7, r3
    aa14:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    aa18:	462c      	mov	r4, r5
    aa1a:	2d10      	cmp	r5, #16
    aa1c:	bf28      	it	cs
    aa1e:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    aa20:	f8cd 9000 	str.w	r9, [sp]
    aa24:	463b      	mov	r3, r7
    aa26:	4622      	mov	r2, r4
    aa28:	4631      	mov	r1, r6
    aa2a:	4640      	mov	r0, r8
    aa2c:	f7f7 fbea 	bl	2204 <hexdump_line_print>
		data += length;
    aa30:	4426      	add	r6, r4
	} while (len);
    aa32:	1b2d      	subs	r5, r5, r4
    aa34:	d1f0      	bne.n	aa18 <log_msg2_hexdump+0x12>
}
    aa36:	b003      	add	sp, #12
    aa38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000aa3c <log_output_flush>:
{
    aa3c:	b510      	push	{r4, lr}
    aa3e:	4604      	mov	r4, r0
		     output->control_block->offset,
    aa40:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    aa42:	6853      	ldr	r3, [r2, #4]
    aa44:	6812      	ldr	r2, [r2, #0]
    aa46:	6881      	ldr	r1, [r0, #8]
    aa48:	6800      	ldr	r0, [r0, #0]
    aa4a:	f7ff ffb7 	bl	a9bc <buffer_write>
	output->control_block->offset = 0;
    aa4e:	6863      	ldr	r3, [r4, #4]
    aa50:	2200      	movs	r2, #0
    aa52:	601a      	str	r2, [r3, #0]
}
    aa54:	bd10      	pop	{r4, pc}

0000aa56 <z_log_msg2_finalize>:
{
    aa56:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    aa58:	b198      	cbz	r0, aa82 <z_log_msg2_finalize+0x2c>
    aa5a:	460e      	mov	r6, r1
    aa5c:	4614      	mov	r4, r2
    aa5e:	4619      	mov	r1, r3
    aa60:	4605      	mov	r5, r0
	if (data) {
    aa62:	b143      	cbz	r3, aa76 <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
    aa64:	f100 0310 	add.w	r3, r0, #16
    aa68:	f3c2 2049 	ubfx	r0, r2, #9, #10
    aa6c:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    aa70:	4418      	add	r0, r3
    aa72:	f001 f989 	bl	bd88 <memcpy>
	msg->hdr.desc = desc;
    aa76:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    aa78:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
    aa7a:	4628      	mov	r0, r5
    aa7c:	f7f7 fad4 	bl	2028 <z_log_msg2_commit>
}
    aa80:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    aa82:	f7f7 fab1 	bl	1fe8 <z_log_dropped>
		return;
    aa86:	e7fb      	b.n	aa80 <z_log_msg2_finalize+0x2a>

0000aa88 <abort_function>:
{
    aa88:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    aa8a:	2000      	movs	r0, #0
    aa8c:	f7f7 f970 	bl	1d70 <sys_reboot>

0000aa90 <z_log_msg2_runtime_create>:
{
    aa90:	b510      	push	{r4, lr}
    aa92:	b086      	sub	sp, #24
	va_start(ap, fmt);
    aa94:	ac0b      	add	r4, sp, #44	; 0x2c
    aa96:	9405      	str	r4, [sp, #20]
    aa98:	9403      	str	r4, [sp, #12]
    aa9a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    aa9c:	9402      	str	r4, [sp, #8]
    aa9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    aaa0:	9401      	str	r4, [sp, #4]
    aaa2:	9c08      	ldr	r4, [sp, #32]
    aaa4:	9400      	str	r4, [sp, #0]
    aaa6:	f7f7 fd0b 	bl	24c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    aaaa:	b006      	add	sp, #24
    aaac:	bd10      	pop	{r4, pc}

0000aaae <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    aaae:	b538      	push	{r3, r4, r5, lr}
    aab0:	4604      	mov	r4, r0

	if (esf != NULL) {
    aab2:	460d      	mov	r5, r1
    aab4:	b111      	cbz	r1, aabc <z_arm_fatal_error+0xe>
		esf_dump(esf);
    aab6:	4608      	mov	r0, r1
    aab8:	f7f8 f92a 	bl	2d10 <esf_dump>
	}
	z_fatal_error(reason, esf);
    aabc:	4629      	mov	r1, r5
    aabe:	4620      	mov	r0, r4
    aac0:	f7fc fb4e 	bl	7160 <z_fatal_error>
}
    aac4:	bd38      	pop	{r3, r4, r5, pc}

0000aac6 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    aac6:	b508      	push	{r3, lr}
    aac8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    aaca:	6800      	ldr	r0, [r0, #0]
    aacc:	f7ff ffef 	bl	aaae <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    aad0:	bd08      	pop	{r3, pc}

0000aad2 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    aad2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    aad4:	2100      	movs	r1, #0
    aad6:	2001      	movs	r0, #1
    aad8:	f7ff ffe9 	bl	aaae <z_arm_fatal_error>
}
    aadc:	bd08      	pop	{r3, pc}

0000aade <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    aade:	b508      	push	{r3, lr}
	handler();
    aae0:	f7f8 f9b2 	bl	2e48 <z_SysNmiOnReset>
	z_arm_int_exit();
    aae4:	f7f8 faa8 	bl	3038 <z_arm_exc_exit>
}
    aae8:	bd08      	pop	{r3, pc}

0000aaea <memory_fault_recoverable>:
}
    aaea:	2000      	movs	r0, #0
    aaec:	4770      	bx	lr

0000aaee <z_log_msg2_runtime_create>:
{
    aaee:	b510      	push	{r4, lr}
    aaf0:	b086      	sub	sp, #24
	va_start(ap, fmt);
    aaf2:	ac0b      	add	r4, sp, #44	; 0x2c
    aaf4:	9405      	str	r4, [sp, #20]
    aaf6:	9403      	str	r4, [sp, #12]
    aaf8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    aafa:	9402      	str	r4, [sp, #8]
    aafc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    aafe:	9401      	str	r4, [sp, #4]
    ab00:	9c08      	ldr	r4, [sp, #32]
    ab02:	9400      	str	r4, [sp, #0]
    ab04:	f7f7 fcdc 	bl	24c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    ab08:	b006      	add	sp, #24
    ab0a:	bd10      	pop	{r4, pc}

0000ab0c <fault_handle>:
{
    ab0c:	b508      	push	{r3, lr}
	*recoverable = false;
    ab0e:	2300      	movs	r3, #0
    ab10:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    ab12:	1ecb      	subs	r3, r1, #3
    ab14:	2b09      	cmp	r3, #9
    ab16:	d81a      	bhi.n	ab4e <fault_handle+0x42>
    ab18:	e8df f003 	tbb	[pc, r3]
    ab1c:	110d0905 	.word	0x110d0905
    ab20:	19191919 	.word	0x19191919
    ab24:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    ab26:	4611      	mov	r1, r2
    ab28:	f7f8 fcd8 	bl	34dc <hard_fault>
}
    ab2c:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    ab2e:	2100      	movs	r1, #0
    ab30:	f7f8 fbf6 	bl	3320 <mem_manage_fault>
		break;
    ab34:	e7fa      	b.n	ab2c <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    ab36:	2100      	movs	r1, #0
    ab38:	f7f8 fa8c 	bl	3054 <bus_fault>
		break;
    ab3c:	e7f6      	b.n	ab2c <fault_handle+0x20>
		reason = usage_fault(esf);
    ab3e:	f7f8 fb31 	bl	31a4 <usage_fault>
		break;
    ab42:	e7f3      	b.n	ab2c <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    ab44:	4611      	mov	r1, r2
    ab46:	f7f8 fbb7 	bl	32b8 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    ab4a:	2000      	movs	r0, #0
		break;
    ab4c:	e7ee      	b.n	ab2c <fault_handle+0x20>
		reserved_exception(esf, fault);
    ab4e:	f7f8 fbc7 	bl	32e0 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    ab52:	2000      	movs	r0, #0
	return reason;
    ab54:	e7ea      	b.n	ab2c <fault_handle+0x20>

0000ab56 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    ab56:	6843      	ldr	r3, [r0, #4]
    ab58:	1e5a      	subs	r2, r3, #1
		&&
    ab5a:	4213      	tst	r3, r2
    ab5c:	d106      	bne.n	ab6c <mpu_partition_is_valid+0x16>
		&&
    ab5e:	2b1f      	cmp	r3, #31
    ab60:	d906      	bls.n	ab70 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    ab62:	6803      	ldr	r3, [r0, #0]
		&&
    ab64:	421a      	tst	r2, r3
    ab66:	d005      	beq.n	ab74 <mpu_partition_is_valid+0x1e>
    ab68:	2000      	movs	r0, #0
    ab6a:	4770      	bx	lr
    ab6c:	2000      	movs	r0, #0
    ab6e:	4770      	bx	lr
    ab70:	2000      	movs	r0, #0
    ab72:	4770      	bx	lr
    ab74:	2001      	movs	r0, #1
}
    ab76:	4770      	bx	lr

0000ab78 <z_log_msg2_runtime_create>:
{
    ab78:	b510      	push	{r4, lr}
    ab7a:	b086      	sub	sp, #24
	va_start(ap, fmt);
    ab7c:	ac0b      	add	r4, sp, #44	; 0x2c
    ab7e:	9405      	str	r4, [sp, #20]
    ab80:	9403      	str	r4, [sp, #12]
    ab82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ab84:	9402      	str	r4, [sp, #8]
    ab86:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ab88:	9401      	str	r4, [sp, #4]
    ab8a:	9c08      	ldr	r4, [sp, #32]
    ab8c:	9400      	str	r4, [sp, #0]
    ab8e:	f7f7 fc97 	bl	24c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    ab92:	b006      	add	sp, #24
    ab94:	bd10      	pop	{r4, pc}

0000ab96 <mpu_configure_region>:
{
    ab96:	b500      	push	{lr}
    ab98:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    ab9a:	680b      	ldr	r3, [r1, #0]
    ab9c:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    ab9e:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    aba0:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    aba2:	2b20      	cmp	r3, #32
    aba4:	d912      	bls.n	abcc <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    aba6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    abaa:	d811      	bhi.n	abd0 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    abac:	3b01      	subs	r3, #1
    abae:	fab3 f383 	clz	r3, r3
    abb2:	f1c3 031f 	rsb	r3, r3, #31
    abb6:	005b      	lsls	r3, r3, #1
    abb8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    abbc:	4313      	orrs	r3, r2
    abbe:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    abc0:	a901      	add	r1, sp, #4
    abc2:	f7f8 fe9d 	bl	3900 <region_allocate_and_init>
}
    abc6:	b005      	add	sp, #20
    abc8:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    abcc:	2308      	movs	r3, #8
    abce:	e7f5      	b.n	abbc <mpu_configure_region+0x26>
		return REGION_4G;
    abd0:	233e      	movs	r3, #62	; 0x3e
    abd2:	e7f3      	b.n	abbc <mpu_configure_region+0x26>

0000abd4 <_stdout_hook_default>:
}
    abd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    abd8:	4770      	bx	lr

0000abda <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    abda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    abde:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    abe2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    abe6:	2a08      	cmp	r2, #8
    abe8:	d001      	beq.n	abee <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    abea:	2000      	movs	r0, #0
    abec:	4770      	bx	lr
                switch(var2)
    abee:	2b02      	cmp	r3, #2
    abf0:	d001      	beq.n	abf6 <nrf52_errata_197+0x1c>
                        return false;
    abf2:	2000      	movs	r0, #0
    abf4:	4770      	bx	lr
                        return true;
    abf6:	2001      	movs	r0, #1
    #endif
}
    abf8:	4770      	bx	lr

0000abfa <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    abfa:	2806      	cmp	r0, #6
    abfc:	d000      	beq.n	ac00 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    abfe:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    ac00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ac04:	2201      	movs	r2, #1
    ac06:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    ac0a:	f3bf 8f4f 	dsb	sy
        __WFE();
    ac0e:	bf20      	wfe
    while (true)
    ac10:	e7fd      	b.n	ac0e <pm_state_set+0x14>

0000ac12 <pm_state_exit_post_ops>:
    ac12:	2300      	movs	r3, #0
    ac14:	f383 8811 	msr	BASEPRI, r3
    ac18:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    ac1c:	4770      	bx	lr

0000ac1e <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    ac1e:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    ac20:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    ac24:	0089      	lsls	r1, r1, #2
    ac26:	3140      	adds	r1, #64	; 0x40
}
    ac28:	4408      	add	r0, r1
    ac2a:	4770      	bx	lr

0000ac2c <get_sub_config>:
	const struct nrf_clock_control_config *config =
    ac2c:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    ac2e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    ac32:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    ac36:	4770      	bx	lr

0000ac38 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    ac38:	6900      	ldr	r0, [r0, #16]
}
    ac3a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    ac3e:	4770      	bx	lr

0000ac40 <set_off_state>:
	__asm__ volatile(
    ac40:	f04f 0320 	mov.w	r3, #32
    ac44:	f3ef 8211 	mrs	r2, BASEPRI
    ac48:	f383 8812 	msr	BASEPRI_MAX, r3
    ac4c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    ac50:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    ac52:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    ac56:	d001      	beq.n	ac5c <set_off_state+0x1c>
    ac58:	428b      	cmp	r3, r1
    ac5a:	d107      	bne.n	ac6c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    ac5c:	2301      	movs	r3, #1
    ac5e:	6003      	str	r3, [r0, #0]
	int err = 0;
    ac60:	2000      	movs	r0, #0
	__asm__ volatile(
    ac62:	f382 8811 	msr	BASEPRI, r2
    ac66:	f3bf 8f6f 	isb	sy
}
    ac6a:	4770      	bx	lr
		err = -EPERM;
    ac6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ac70:	e7f7      	b.n	ac62 <set_off_state+0x22>

0000ac72 <set_starting_state>:
	__asm__ volatile(
    ac72:	f04f 0320 	mov.w	r3, #32
    ac76:	f3ef 8211 	mrs	r2, BASEPRI
    ac7a:	f383 8812 	msr	BASEPRI_MAX, r3
    ac7e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    ac82:	6803      	ldr	r3, [r0, #0]
    ac84:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    ac88:	f003 0307 	and.w	r3, r3, #7
    ac8c:	2b01      	cmp	r3, #1
    ac8e:	d008      	beq.n	aca2 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    ac90:	458c      	cmp	ip, r1
    ac92:	d009      	beq.n	aca8 <set_starting_state+0x36>
		err = -EPERM;
    ac94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    ac98:	f382 8811 	msr	BASEPRI, r2
    ac9c:	f3bf 8f6f 	isb	sy
}
    aca0:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    aca2:	6001      	str	r1, [r0, #0]
	int err = 0;
    aca4:	2000      	movs	r0, #0
    aca6:	e7f7      	b.n	ac98 <set_starting_state+0x26>
		err = -EALREADY;
    aca8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    acac:	e7f4      	b.n	ac98 <set_starting_state+0x26>

0000acae <set_on_state>:
	__asm__ volatile(
    acae:	f04f 0320 	mov.w	r3, #32
    acb2:	f3ef 8211 	mrs	r2, BASEPRI
    acb6:	f383 8812 	msr	BASEPRI_MAX, r3
    acba:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    acbe:	6803      	ldr	r3, [r0, #0]
    acc0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    acc4:	f043 0302 	orr.w	r3, r3, #2
    acc8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    acca:	f382 8811 	msr	BASEPRI, r2
    acce:	f3bf 8f6f 	isb	sy
}
    acd2:	4770      	bx	lr

0000acd4 <clkstarted_handle>:
{
    acd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    acd6:	4606      	mov	r6, r0
    acd8:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    acda:	f7ff ffa0 	bl	ac1e <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    acde:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    ace0:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    ace2:	2300      	movs	r3, #0
    ace4:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    ace8:	f7ff ffe1 	bl	acae <set_on_state>
	if (callback) {
    acec:	b11d      	cbz	r5, acf6 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    acee:	463a      	mov	r2, r7
    acf0:	4621      	mov	r1, r4
    acf2:	4630      	mov	r0, r6
    acf4:	47a8      	blx	r5
}
    acf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000acf8 <async_start>:
{
    acf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    acfc:	4606      	mov	r6, r0
    acfe:	4690      	mov	r8, r2
    ad00:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    ad02:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    ad04:	4629      	mov	r1, r5
    ad06:	f7ff ff8a 	bl	ac1e <get_sub_data>
    ad0a:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    ad0c:	9906      	ldr	r1, [sp, #24]
    ad0e:	3008      	adds	r0, #8
    ad10:	f7ff ffaf 	bl	ac72 <set_starting_state>
	if (err < 0) {
    ad14:	2800      	cmp	r0, #0
    ad16:	db09      	blt.n	ad2c <async_start+0x34>
	subdata->cb = cb;
    ad18:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    ad1c:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    ad1e:	4629      	mov	r1, r5
    ad20:	4630      	mov	r0, r6
    ad22:	f7ff ff83 	bl	ac2c <get_sub_config>
    ad26:	6803      	ldr	r3, [r0, #0]
    ad28:	4798      	blx	r3
	return 0;
    ad2a:	2000      	movs	r0, #0
}
    ad2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ad30 <api_start>:
{
    ad30:	b510      	push	{r4, lr}
    ad32:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    ad34:	2480      	movs	r4, #128	; 0x80
    ad36:	9400      	str	r4, [sp, #0]
    ad38:	f7ff ffde 	bl	acf8 <async_start>
}
    ad3c:	b002      	add	sp, #8
    ad3e:	bd10      	pop	{r4, pc}

0000ad40 <onoff_started_callback>:
{
    ad40:	b510      	push	{r4, lr}
    ad42:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    ad44:	b2c9      	uxtb	r1, r1
    ad46:	f7ff ff77 	bl	ac38 <get_onoff_manager>
	notify(mgr, 0);
    ad4a:	2100      	movs	r1, #0
    ad4c:	47a0      	blx	r4
}
    ad4e:	bd10      	pop	{r4, pc}

0000ad50 <hfclk_start>:
{
    ad50:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    ad52:	2001      	movs	r0, #1
    ad54:	f7fb f83c 	bl	5dd0 <nrfx_clock_start>
}
    ad58:	bd08      	pop	{r3, pc}

0000ad5a <lfclk_start>:
{
    ad5a:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    ad5c:	2000      	movs	r0, #0
    ad5e:	f7fb f837 	bl	5dd0 <nrfx_clock_start>
}
    ad62:	bd08      	pop	{r3, pc}

0000ad64 <hfclk_stop>:
{
    ad64:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    ad66:	2001      	movs	r0, #1
    ad68:	f7fb f8a8 	bl	5ebc <nrfx_clock_stop>
}
    ad6c:	bd08      	pop	{r3, pc}

0000ad6e <lfclk_stop>:
{
    ad6e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    ad70:	2000      	movs	r0, #0
    ad72:	f7fb f8a3 	bl	5ebc <nrfx_clock_stop>
}
    ad76:	bd08      	pop	{r3, pc}

0000ad78 <api_stop>:
{
    ad78:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    ad7a:	2280      	movs	r2, #128	; 0x80
    ad7c:	f7f9 f810 	bl	3da0 <stop>
}
    ad80:	bd08      	pop	{r3, pc}

0000ad82 <blocking_start_callback>:
{
    ad82:	b508      	push	{r3, lr}
    ad84:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    ad86:	f7fd f89f 	bl	7ec8 <z_impl_k_sem_give>
}
    ad8a:	bd08      	pop	{r3, pc}

0000ad8c <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    ad8c:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    ad90:	f020 0001 	bic.w	r0, r0, #1
    ad94:	0540      	lsls	r0, r0, #21
    ad96:	0d40      	lsrs	r0, r0, #21
    ad98:	f240 2306 	movw	r3, #518	; 0x206
    ad9c:	4298      	cmp	r0, r3
    ad9e:	d033      	beq.n	ae08 <get_drive+0x7c>
    ada0:	d816      	bhi.n	add0 <get_drive+0x44>
    ada2:	2806      	cmp	r0, #6
    ada4:	d02c      	beq.n	ae00 <get_drive+0x74>
    ada6:	d906      	bls.n	adb6 <get_drive+0x2a>
    ada8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    adac:	d10d      	bne.n	adca <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    adae:	2301      	movs	r3, #1
    adb0:	700b      	strb	r3, [r1, #0]
	int err = 0;
    adb2:	2000      	movs	r0, #0
		break;
    adb4:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    adb6:	b300      	cbz	r0, adfa <get_drive+0x6e>
    adb8:	2802      	cmp	r0, #2
    adba:	d103      	bne.n	adc4 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    adbc:	2304      	movs	r3, #4
    adbe:	700b      	strb	r3, [r1, #0]
	int err = 0;
    adc0:	2000      	movs	r0, #0
		break;
    adc2:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    adc4:	f06f 0015 	mvn.w	r0, #21
    adc8:	4770      	bx	lr
    adca:	f06f 0015 	mvn.w	r0, #21
    adce:	4770      	bx	lr
    add0:	f240 4302 	movw	r3, #1026	; 0x402
    add4:	4298      	cmp	r0, r3
    add6:	d01b      	beq.n	ae10 <get_drive+0x84>
    add8:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    addc:	d103      	bne.n	ade6 <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    adde:	2303      	movs	r3, #3
    ade0:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ade2:	2000      	movs	r0, #0
		break;
    ade4:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    ade6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    adea:	d103      	bne.n	adf4 <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    adec:	2302      	movs	r3, #2
    adee:	700b      	strb	r3, [r1, #0]
	int err = 0;
    adf0:	2000      	movs	r0, #0
		break;
    adf2:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    adf4:	f06f 0015 	mvn.w	r0, #21
    adf8:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    adfa:	2000      	movs	r0, #0
    adfc:	7008      	strb	r0, [r1, #0]
		break;
    adfe:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    ae00:	2306      	movs	r3, #6
    ae02:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ae04:	2000      	movs	r0, #0
		break;
    ae06:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    ae08:	2307      	movs	r3, #7
    ae0a:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ae0c:	2000      	movs	r0, #0
		break;
    ae0e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    ae10:	2305      	movs	r3, #5
    ae12:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ae14:	2000      	movs	r0, #0
}
    ae16:	4770      	bx	lr

0000ae18 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    ae18:	f010 0f10 	tst.w	r0, #16
    ae1c:	d104      	bne.n	ae28 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    ae1e:	f010 0f20 	tst.w	r0, #32
    ae22:	d103      	bne.n	ae2c <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    ae24:	2000      	movs	r0, #0
    ae26:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    ae28:	2003      	movs	r0, #3
    ae2a:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    ae2c:	2001      	movs	r0, #1
}
    ae2e:	4770      	bx	lr

0000ae30 <gpio_nrfx_port_get_raw>:
	return port->config;
    ae30:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ae32:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    ae34:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    ae38:	600b      	str	r3, [r1, #0]
}
    ae3a:	2000      	movs	r0, #0
    ae3c:	4770      	bx	lr

0000ae3e <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    ae3e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ae40:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    ae42:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    ae46:	4042      	eors	r2, r0
    ae48:	400a      	ands	r2, r1
    ae4a:	4042      	eors	r2, r0
    p_reg->OUT = value;
    ae4c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    ae50:	2000      	movs	r0, #0
    ae52:	4770      	bx	lr

0000ae54 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    ae54:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ae56:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    ae58:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    ae5c:	2000      	movs	r0, #0
    ae5e:	4770      	bx	lr

0000ae60 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    ae60:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ae62:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    ae64:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    ae68:	2000      	movs	r0, #0
    ae6a:	4770      	bx	lr

0000ae6c <gpio_nrfx_port_toggle_bits>:
	return port->config;
    ae6c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ae6e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    ae70:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    ae74:	404b      	eors	r3, r1
    p_reg->OUT = value;
    ae76:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    ae7a:	2000      	movs	r0, #0
    ae7c:	4770      	bx	lr

0000ae7e <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    ae7e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    ae82:	d007      	beq.n	ae94 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    ae84:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    ae88:	d00d      	beq.n	aea6 <get_trigger+0x28>
    ae8a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    ae8e:	d008      	beq.n	aea2 <get_trigger+0x24>
    ae90:	2001      	movs	r0, #1
}
    ae92:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    ae94:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    ae98:	d001      	beq.n	ae9e <get_trigger+0x20>
    ae9a:	2005      	movs	r0, #5
    ae9c:	4770      	bx	lr
    ae9e:	2004      	movs	r0, #4
    aea0:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    aea2:	2002      	movs	r0, #2
    aea4:	4770      	bx	lr
    aea6:	2003      	movs	r0, #3
    aea8:	4770      	bx	lr

0000aeaa <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    aeaa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    aeac:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    aeae:	f04f 0120 	mov.w	r1, #32
    aeb2:	f3ef 8211 	mrs	r2, BASEPRI
    aeb6:	f381 8812 	msr	BASEPRI_MAX, r1
    aeba:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    aebe:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    aec2:	b131      	cbz	r1, aed2 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aec4:	2100      	movs	r1, #0
    aec6:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    aeca:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    aece:	2101      	movs	r1, #1
    aed0:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    aed2:	f382 8811 	msr	BASEPRI, r2
    aed6:	f3bf 8f6f 	isb	sy
}
    aeda:	4770      	bx	lr

0000aedc <uarte_nrfx_configure>:
{
    aedc:	b570      	push	{r4, r5, r6, lr}
    aede:	b082      	sub	sp, #8
    aee0:	4606      	mov	r6, r0
    aee2:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    aee4:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    aee6:	794b      	ldrb	r3, [r1, #5]
    aee8:	2b01      	cmp	r3, #1
    aeea:	d006      	beq.n	aefa <uarte_nrfx_configure+0x1e>
    aeec:	2b03      	cmp	r3, #3
    aeee:	d011      	beq.n	af14 <uarte_nrfx_configure+0x38>
    aef0:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    aef4:	4618      	mov	r0, r3
    aef6:	b002      	add	sp, #8
    aef8:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    aefa:	2300      	movs	r3, #0
    aefc:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    af00:	79a3      	ldrb	r3, [r4, #6]
    af02:	2b03      	cmp	r3, #3
    af04:	d137      	bne.n	af76 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    af06:	79e3      	ldrb	r3, [r4, #7]
    af08:	b143      	cbz	r3, af1c <uarte_nrfx_configure+0x40>
    af0a:	2b01      	cmp	r3, #1
    af0c:	d010      	beq.n	af30 <uarte_nrfx_configure+0x54>
    af0e:	f06f 0385 	mvn.w	r3, #133	; 0x85
    af12:	e7ef      	b.n	aef4 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    af14:	2310      	movs	r3, #16
    af16:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    af1a:	e7f1      	b.n	af00 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    af1c:	2300      	movs	r3, #0
    af1e:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    af22:	7923      	ldrb	r3, [r4, #4]
    af24:	b143      	cbz	r3, af38 <uarte_nrfx_configure+0x5c>
    af26:	2b02      	cmp	r3, #2
    af28:	d021      	beq.n	af6e <uarte_nrfx_configure+0x92>
    af2a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    af2e:	e7e1      	b.n	aef4 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    af30:	2301      	movs	r3, #1
    af32:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    af36:	e7f4      	b.n	af22 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    af38:	2300      	movs	r3, #0
    af3a:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    af3e:	6821      	ldr	r1, [r4, #0]
    af40:	4630      	mov	r0, r6
    af42:	f7f9 fb35 	bl	45b0 <baudrate_set>
    af46:	4603      	mov	r3, r0
    af48:	b9c0      	cbnz	r0, af7c <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    af4a:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    af4c:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    af4e:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    af52:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    af56:	f89d 2004 	ldrb.w	r2, [sp, #4]
    af5a:	4331      	orrs	r1, r6
    af5c:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    af5e:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    af62:	3504      	adds	r5, #4
    af64:	e894 0003 	ldmia.w	r4, {r0, r1}
    af68:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    af6c:	e7c2      	b.n	aef4 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    af6e:	230e      	movs	r3, #14
    af70:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    af74:	e7e3      	b.n	af3e <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    af76:	f06f 0385 	mvn.w	r3, #133	; 0x85
    af7a:	e7bb      	b.n	aef4 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    af7c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    af80:	e7b8      	b.n	aef4 <uarte_nrfx_configure+0x18>

0000af82 <uarte_nrfx_config_get>:
{
    af82:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    af84:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    af86:	3304      	adds	r3, #4
    af88:	e893 0003 	ldmia.w	r3, {r0, r1}
    af8c:	e882 0003 	stmia.w	r2, {r0, r1}
}
    af90:	2000      	movs	r0, #0
    af92:	4770      	bx	lr

0000af94 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    af94:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    af96:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    af98:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    af9c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    afa0:	4770      	bx	lr

0000afa2 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    afa2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    afa4:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    afa6:	685b      	ldr	r3, [r3, #4]
    afa8:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    afac:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    afb0:	b929      	cbnz	r1, afbe <is_tx_ready+0x1c>
    afb2:	b933      	cbnz	r3, afc2 <is_tx_ready+0x20>
    afb4:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    afb8:	b92b      	cbnz	r3, afc6 <is_tx_ready+0x24>
    afba:	2000      	movs	r0, #0
    afbc:	4770      	bx	lr
    afbe:	2001      	movs	r0, #1
    afc0:	4770      	bx	lr
    afc2:	2000      	movs	r0, #0
    afc4:	4770      	bx	lr
    afc6:	2001      	movs	r0, #1
}
    afc8:	4770      	bx	lr

0000afca <uarte_enable>:
	struct uarte_nrfx_data *data = dev->data;
    afca:	6903      	ldr	r3, [r0, #16]
	if (data->async) {
    afcc:	68db      	ldr	r3, [r3, #12]
    afce:	b123      	cbz	r3, afda <uarte_enable+0x10>
		bool disabled = data->async->low_power_mask == 0;
    afd0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
		data->async->low_power_mask |= mask;
    afd4:	4311      	orrs	r1, r2
    afd6:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
	const struct uarte_nrfx_config *config = dev->config;
    afda:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    afdc:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    afde:	2208      	movs	r2, #8
    afe0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    afe4:	4770      	bx	lr

0000afe6 <tx_start>:
{
    afe6:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    afe8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    afea:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    afec:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    aff0:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aff4:	2200      	movs	r2, #0
    aff6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    affa:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    affe:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    b002:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b006:	685b      	ldr	r3, [r3, #4]
    b008:	f013 0f10 	tst.w	r3, #16
    b00c:	d102      	bne.n	b014 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b00e:	2301      	movs	r3, #1
    b010:	60a3      	str	r3, [r4, #8]
}
    b012:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    b014:	2101      	movs	r1, #1
    b016:	f7ff ffd8 	bl	afca <uarte_enable>
    p_reg->INTENSET = mask;
    b01a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b01e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    b022:	e7f4      	b.n	b00e <tx_start+0x28>

0000b024 <uart_disable>:
	const struct uarte_nrfx_config *config = dev->config;
    b024:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b026:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b028:	2200      	movs	r2, #0
    b02a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    b02e:	4770      	bx	lr

0000b030 <uarte_nrfx_rx_counting_init>:
	const struct uarte_nrfx_config *cfg = dev->config;
    b030:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b032:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    b034:	2204      	movs	r2, #4
    b036:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b03a:	2000      	movs	r0, #0
    b03c:	4770      	bx	lr

0000b03e <start_tx_locked>:
{
    b03e:	b538      	push	{r3, r4, r5, lr}
    b040:	4605      	mov	r5, r0
    b042:	460c      	mov	r4, r1
	if (!is_tx_ready(dev)) {
    b044:	f7ff ffad 	bl	afa2 <is_tx_ready>
    b048:	b920      	cbnz	r0, b054 <start_tx_locked+0x16>
		data->async->pending_tx = true;
    b04a:	68e3      	ldr	r3, [r4, #12]
    b04c:	2201      	movs	r2, #1
    b04e:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    b052:	bd38      	pop	{r3, r4, r5, pc}
		data->async->pending_tx = false;
    b054:	68e3      	ldr	r3, [r4, #12]
    b056:	2200      	movs	r2, #0
    b058:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    b05c:	68e3      	ldr	r3, [r4, #12]
    b05e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b062:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    b066:	68e3      	ldr	r3, [r4, #12]
    b068:	695a      	ldr	r2, [r3, #20]
    b06a:	6919      	ldr	r1, [r3, #16]
    b06c:	4628      	mov	r0, r5
    b06e:	f7ff ffba 	bl	afe6 <tx_start>
}
    b072:	e7ee      	b.n	b052 <start_tx_locked+0x14>

0000b074 <user_callback>:
{
    b074:	b508      	push	{r3, lr}
	struct uarte_nrfx_data *data = dev->data;
    b076:	6903      	ldr	r3, [r0, #16]
	if (data->async->user_callback) {
    b078:	68da      	ldr	r2, [r3, #12]
    b07a:	6813      	ldr	r3, [r2, #0]
    b07c:	b10b      	cbz	r3, b082 <user_callback+0xe>
		data->async->user_callback(dev, evt, data->async->user_data);
    b07e:	6852      	ldr	r2, [r2, #4]
    b080:	4798      	blx	r3
}
    b082:	bd08      	pop	{r3, pc}

0000b084 <notify_uart_rx_rdy>:
{
    b084:	b500      	push	{lr}
    b086:	b087      	sub	sp, #28
	struct uarte_nrfx_data *data = dev->data;
    b088:	6902      	ldr	r2, [r0, #16]
	struct uart_event evt = {
    b08a:	2300      	movs	r3, #0
    b08c:	9301      	str	r3, [sp, #4]
    b08e:	9302      	str	r3, [sp, #8]
    b090:	9303      	str	r3, [sp, #12]
    b092:	9304      	str	r3, [sp, #16]
    b094:	9305      	str	r3, [sp, #20]
    b096:	2302      	movs	r3, #2
    b098:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    b09c:	68d3      	ldr	r3, [r2, #12]
    b09e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
	struct uart_event evt = {
    b0a0:	9202      	str	r2, [sp, #8]
		.data.rx.offset = data->async->rx_offset
    b0a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	struct uart_event evt = {
    b0a4:	9303      	str	r3, [sp, #12]
    b0a6:	9104      	str	r1, [sp, #16]
	user_callback(dev, &evt);
    b0a8:	a901      	add	r1, sp, #4
    b0aa:	f7ff ffe3 	bl	b074 <user_callback>
}
    b0ae:	b007      	add	sp, #28
    b0b0:	f85d fb04 	ldr.w	pc, [sp], #4

0000b0b4 <rx_buf_release>:
	if (*buf) {
    b0b4:	680b      	ldr	r3, [r1, #0]
    b0b6:	b19b      	cbz	r3, b0e0 <rx_buf_release+0x2c>
{
    b0b8:	b530      	push	{r4, r5, lr}
    b0ba:	b087      	sub	sp, #28
    b0bc:	460c      	mov	r4, r1
		struct uart_event evt = {
    b0be:	2500      	movs	r5, #0
    b0c0:	9501      	str	r5, [sp, #4]
    b0c2:	9502      	str	r5, [sp, #8]
    b0c4:	9503      	str	r5, [sp, #12]
    b0c6:	9504      	str	r5, [sp, #16]
    b0c8:	9505      	str	r5, [sp, #20]
    b0ca:	2304      	movs	r3, #4
    b0cc:	f88d 3004 	strb.w	r3, [sp, #4]
			.data.rx_buf.buf = *buf,
    b0d0:	680b      	ldr	r3, [r1, #0]
		struct uart_event evt = {
    b0d2:	9302      	str	r3, [sp, #8]
		user_callback(dev, &evt);
    b0d4:	a901      	add	r1, sp, #4
    b0d6:	f7ff ffcd 	bl	b074 <user_callback>
		*buf = NULL;
    b0da:	6025      	str	r5, [r4, #0]
}
    b0dc:	b007      	add	sp, #28
    b0de:	bd30      	pop	{r4, r5, pc}
    b0e0:	4770      	bx	lr

0000b0e2 <notify_rx_disable>:
{
    b0e2:	b500      	push	{lr}
    b0e4:	b087      	sub	sp, #28
	struct uart_event evt = {
    b0e6:	2300      	movs	r3, #0
    b0e8:	9301      	str	r3, [sp, #4]
    b0ea:	9302      	str	r3, [sp, #8]
    b0ec:	9303      	str	r3, [sp, #12]
    b0ee:	9304      	str	r3, [sp, #16]
    b0f0:	9305      	str	r3, [sp, #20]
    b0f2:	2305      	movs	r3, #5
    b0f4:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    b0f8:	a901      	add	r1, sp, #4
    b0fa:	f7ff ffbb 	bl	b074 <user_callback>
}
    b0fe:	b007      	add	sp, #28
    b100:	f85d fb04 	ldr.w	pc, [sp], #4

0000b104 <uarte_nrfx_rx_buf_rsp>:
{
    b104:	b430      	push	{r4, r5}
	struct uarte_nrfx_data *data = dev->data;
    b106:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    b108:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b10a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    b10c:	f04f 0020 	mov.w	r0, #32
    b110:	f3ef 8c11 	mrs	ip, BASEPRI
    b114:	f380 8812 	msr	BASEPRI_MAX, r0
    b118:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    b11c:	68e0      	ldr	r0, [r4, #12]
    b11e:	6e05      	ldr	r5, [r0, #96]	; 0x60
    b120:	b1ad      	cbz	r5, b14e <uarte_nrfx_rx_buf_rsp+0x4a>
	} else if (data->async->rx_next_buf == NULL) {
    b122:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    b124:	b9b5      	cbnz	r5, b154 <uarte_nrfx_rx_buf_rsp+0x50>
		data->async->rx_next_buf = buf;
    b126:	66c1      	str	r1, [r0, #108]	; 0x6c
		data->async->rx_next_buf_len = len;
    b128:	68e0      	ldr	r0, [r4, #12]
    b12a:	6702      	str	r2, [r0, #112]	; 0x70
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b12c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    b130:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    b134:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    b138:	f042 0220 	orr.w	r2, r2, #32
    b13c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		err = 0;
    b140:	2000      	movs	r0, #0
	__asm__ volatile(
    b142:	f38c 8811 	msr	BASEPRI, ip
    b146:	f3bf 8f6f 	isb	sy
}
    b14a:	bc30      	pop	{r4, r5}
    b14c:	4770      	bx	lr
		err = -EACCES;
    b14e:	f06f 000c 	mvn.w	r0, #12
    b152:	e7f6      	b.n	b142 <uarte_nrfx_rx_buf_rsp+0x3e>
		err = -EBUSY;
    b154:	f06f 000f 	mvn.w	r0, #15
    b158:	e7f3      	b.n	b142 <uarte_nrfx_rx_buf_rsp+0x3e>

0000b15a <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    b15a:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
    b15c:	68d8      	ldr	r0, [r3, #12]
    b15e:	b120      	cbz	r0, b16a <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
    b160:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
    b162:	68db      	ldr	r3, [r3, #12]
    b164:	605a      	str	r2, [r3, #4]
	return 0;
    b166:	2000      	movs	r0, #0
    b168:	4770      	bx	lr
		return -ENOTSUP;
    b16a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    b16e:	4770      	bx	lr

0000b170 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = dev->data;
    b170:	6902      	ldr	r2, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    b172:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b174:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
    b176:	68d0      	ldr	r0, [r2, #12]
    b178:	b960      	cbnz	r0, b194 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b17a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b17e:	b160      	cbz	r0, b19a <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    b180:	7d52      	ldrb	r2, [r2, #21]
    b182:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b184:	2000      	movs	r0, #0
    b186:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    b18a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b18e:	2201      	movs	r2, #1
    b190:	601a      	str	r2, [r3, #0]
	return 0;
    b192:	4770      	bx	lr
		return -ENOTSUP;
    b194:	f06f 0085 	mvn.w	r0, #133	; 0x85
    b198:	4770      	bx	lr
		return -1;
    b19a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    b19e:	4770      	bx	lr

0000b1a0 <wait_tx_ready>:
{
    b1a0:	b570      	push	{r4, r5, r6, lr}
    b1a2:	4606      	mov	r6, r0
    b1a4:	e014      	b.n	b1d0 <wait_tx_ready+0x30>
		if (res) {
    b1a6:	b17d      	cbz	r5, b1c8 <wait_tx_ready+0x28>
	__asm__ volatile(
    b1a8:	f04f 0320 	mov.w	r3, #32
    b1ac:	f3ef 8411 	mrs	r4, BASEPRI
    b1b0:	f383 8812 	msr	BASEPRI_MAX, r3
    b1b4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    b1b8:	4630      	mov	r0, r6
    b1ba:	f7ff fef2 	bl	afa2 <is_tx_ready>
    b1be:	b9a0      	cbnz	r0, b1ea <wait_tx_ready+0x4a>
	__asm__ volatile(
    b1c0:	f384 8811 	msr	BASEPRI, r4
    b1c4:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    b1c8:	2021      	movs	r0, #33	; 0x21
    b1ca:	2100      	movs	r1, #0
    b1cc:	f7fe f95c 	bl	9488 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    b1d0:	2464      	movs	r4, #100	; 0x64
    b1d2:	4630      	mov	r0, r6
    b1d4:	f7ff fee5 	bl	afa2 <is_tx_ready>
    b1d8:	4605      	mov	r5, r0
    b1da:	2800      	cmp	r0, #0
    b1dc:	d1e3      	bne.n	b1a6 <wait_tx_ready+0x6>
    b1de:	2001      	movs	r0, #1
    b1e0:	f000 fc7e 	bl	bae0 <nrfx_busy_wait>
    b1e4:	3c01      	subs	r4, #1
    b1e6:	d1f4      	bne.n	b1d2 <wait_tx_ready+0x32>
    b1e8:	e7dd      	b.n	b1a6 <wait_tx_ready+0x6>
}
    b1ea:	4620      	mov	r0, r4
    b1ec:	bd70      	pop	{r4, r5, r6, pc}

0000b1ee <uarte_nrfx_rx_disable>:
{
    b1ee:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    b1f0:	6905      	ldr	r5, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    b1f2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b1f4:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    b1f6:	68eb      	ldr	r3, [r5, #12]
    b1f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    b1fa:	b1ba      	cbz	r2, b22c <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
    b1fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    b1fe:	b153      	cbz	r3, b216 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    b200:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    b204:	f023 0320 	bic.w	r3, r3, #32
    b208:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b20c:	2300      	movs	r3, #0
    b20e:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    b212:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
    b216:	68e8      	ldr	r0, [r5, #12]
    b218:	3088      	adds	r0, #136	; 0x88
	z_impl_k_timer_stop(timer);
    b21a:	f000 fd92 	bl	bd42 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    b21e:	68eb      	ldr	r3, [r5, #12]
    b220:	2000      	movs	r0, #0
    b222:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b226:	2301      	movs	r3, #1
    b228:	6063      	str	r3, [r4, #4]
}
    b22a:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    b22c:	f06f 000d 	mvn.w	r0, #13
    b230:	e7fb      	b.n	b22a <uarte_nrfx_rx_disable+0x3c>

0000b232 <error_isr>:
{
    b232:	b510      	push	{r4, lr}
    b234:	b086      	sub	sp, #24
    b236:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    b238:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b23a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    b23c:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    b240:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
	struct uart_event evt = {
    b244:	2300      	movs	r3, #0
    b246:	9301      	str	r3, [sp, #4]
    b248:	9302      	str	r3, [sp, #8]
    b24a:	9303      	str	r3, [sp, #12]
    b24c:	9304      	str	r3, [sp, #16]
    b24e:	9305      	str	r3, [sp, #20]
    b250:	2306      	movs	r3, #6
    b252:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    b256:	f012 0f01 	tst.w	r2, #1
    b25a:	d108      	bne.n	b26e <error_isr+0x3c>
    b25c:	f012 0f02 	tst.w	r2, #2
    b260:	d111      	bne.n	b286 <error_isr+0x54>
    b262:	f012 0f04 	tst.w	r2, #4
    b266:	d110      	bne.n	b28a <error_isr+0x58>
    b268:	f002 0208 	and.w	r2, r2, #8
    b26c:	e000      	b.n	b270 <error_isr+0x3e>
    b26e:	2201      	movs	r2, #1
	struct uart_event evt = {
    b270:	f88d 2008 	strb.w	r2, [sp, #8]
	user_callback(dev, &evt);
    b274:	a901      	add	r1, sp, #4
    b276:	4620      	mov	r0, r4
    b278:	f7ff fefc 	bl	b074 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    b27c:	4620      	mov	r0, r4
    b27e:	f7ff ffb6 	bl	b1ee <uarte_nrfx_rx_disable>
}
    b282:	b006      	add	sp, #24
    b284:	bd10      	pop	{r4, pc}
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    b286:	2202      	movs	r2, #2
    b288:	e7f2      	b.n	b270 <error_isr+0x3e>
    b28a:	2204      	movs	r2, #4
    b28c:	e7f0      	b.n	b270 <error_isr+0x3e>

0000b28e <uarte_nrfx_tx_abort>:
{
    b28e:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    b290:	6903      	ldr	r3, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    b292:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    b294:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
    b296:	68da      	ldr	r2, [r3, #12]
    b298:	6891      	ldr	r1, [r2, #8]
    b29a:	b151      	cbz	r1, b2b2 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
    b29c:	2400      	movs	r4, #0
    b29e:	f882 40d4 	strb.w	r4, [r2, #212]	; 0xd4
	k_timer_stop(&data->async->tx_timeout_timer);
    b2a2:	68d8      	ldr	r0, [r3, #12]
    b2a4:	3028      	adds	r0, #40	; 0x28
    b2a6:	f000 fd4c 	bl	bd42 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b2aa:	2301      	movs	r3, #1
    b2ac:	60eb      	str	r3, [r5, #12]
	return 0;
    b2ae:	4620      	mov	r0, r4
}
    b2b0:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    b2b2:	f06f 000d 	mvn.w	r0, #13
    b2b6:	e7fb      	b.n	b2b0 <uarte_nrfx_tx_abort+0x22>

0000b2b8 <tx_timeout>:
{
    b2b8:	b508      	push	{r3, lr}
	return timer->user_data;
    b2ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
	(void) uarte_nrfx_tx_abort(data->dev);
    b2bc:	6818      	ldr	r0, [r3, #0]
    b2be:	f7ff ffe6 	bl	b28e <uarte_nrfx_tx_abort>
}
    b2c2:	bd08      	pop	{r3, pc}

0000b2c4 <rx_timeout>:
{
    b2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b2c6:	6b44      	ldr	r4, [r0, #52]	; 0x34
	const struct device *dev = data->dev;
    b2c8:	6826      	ldr	r6, [r4, #0]
	const struct uarte_nrfx_config *cfg = dev->config;
    b2ca:	6872      	ldr	r2, [r6, #4]
	if (data->async->is_in_irq) {
    b2cc:	68e3      	ldr	r3, [r4, #12]
    b2ce:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
    b2d2:	2b00      	cmp	r3, #0
    b2d4:	d138      	bne.n	b348 <rx_timeout+0x84>
    b2d6:	f003 07ff 	and.w	r7, r3, #255	; 0xff
	return config->uarte_regs;
    b2da:	6813      	ldr	r3, [r2, #0]
    p_reg->INTENCLR = mask;
    b2dc:	2210      	movs	r2, #16
    b2de:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    b2e2:	68e3      	ldr	r3, [r4, #12]
    b2e4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    b2e8:	6f59      	ldr	r1, [r3, #116]	; 0x74
    b2ea:	4291      	cmp	r1, r2
    b2ec:	d004      	beq.n	b2f8 <rx_timeout+0x34>
		data->async->rx_total_byte_cnt = read;
    b2ee:	675a      	str	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    b2f0:	68e3      	ldr	r3, [r4, #12]
    b2f2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    b2f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	int32_t len = data->async->rx_total_byte_cnt
    b2f8:	68e3      	ldr	r3, [r4, #12]
    b2fa:	6f5d      	ldr	r5, [r3, #116]	; 0x74
		    - data->async->rx_total_user_byte_cnt;
    b2fc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
	if (!HW_RX_COUNTING_ENABLED(data) &&
    b2fe:	1aad      	subs	r5, r5, r2
    b300:	d423      	bmi.n	b34a <rx_timeout+0x86>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    b302:	68e3      	ldr	r3, [r4, #12]
    b304:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    b306:	18a8      	adds	r0, r5, r2
    b308:	6e59      	ldr	r1, [r3, #100]	; 0x64
    b30a:	4288      	cmp	r0, r1
    b30c:	d901      	bls.n	b312 <rx_timeout+0x4e>
		len = data->async->rx_buf_len - data->async->rx_offset;
    b30e:	1a8d      	subs	r5, r1, r2
		clipped = true;
    b310:	2701      	movs	r7, #1
	if (len > 0) {
    b312:	2d00      	cmp	r5, #0
    b314:	dd13      	ble.n	b33e <rx_timeout+0x7a>
		if (clipped ||
    b316:	b92f      	cbnz	r7, b324 <rx_timeout+0x60>
			(data->async->rx_timeout_left
    b318:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
				< data->async->rx_timeout_slab)) {
    b31c:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		if (clipped ||
    b320:	428a      	cmp	r2, r1
    b322:	da16      	bge.n	b352 <rx_timeout+0x8e>
			notify_uart_rx_rdy(dev, len);
    b324:	4629      	mov	r1, r5
    b326:	4630      	mov	r0, r6
    b328:	f7ff feac 	bl	b084 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    b32c:	68e2      	ldr	r2, [r4, #12]
    b32e:	6e93      	ldr	r3, [r2, #104]	; 0x68
    b330:	442b      	add	r3, r5
    b332:	6693      	str	r3, [r2, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    b334:	68e2      	ldr	r2, [r4, #12]
    b336:	6f93      	ldr	r3, [r2, #120]	; 0x78
    b338:	442b      	add	r3, r5
    b33a:	6793      	str	r3, [r2, #120]	; 0x78
		if (clipped) {
    b33c:	b96f      	cbnz	r7, b35a <rx_timeout+0x96>
	const struct uarte_nrfx_config *config = dev->config;
    b33e:	6873      	ldr	r3, [r6, #4]
	return config->uarte_regs;
    b340:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    b342:	2210      	movs	r2, #16
    b344:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    b34a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		len = 0;
    b34e:	2500      	movs	r5, #0
    b350:	e7d7      	b.n	b302 <rx_timeout+0x3e>
			data->async->rx_timeout_left -=
    b352:	1a52      	subs	r2, r2, r1
    b354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    b358:	e7f0      	b.n	b33c <rx_timeout+0x78>
			k_timer_stop(&data->async->rx_timeout_timer);
    b35a:	68e0      	ldr	r0, [r4, #12]
    b35c:	3088      	adds	r0, #136	; 0x88
    b35e:	f000 fcf0 	bl	bd42 <z_impl_k_timer_stop>
}
    b362:	e7ec      	b.n	b33e <rx_timeout+0x7a>

0000b364 <endrx_isr>:
{
    b364:	b570      	push	{r4, r5, r6, lr}
    b366:	4605      	mov	r5, r0
	struct uarte_nrfx_data *data = dev->data;
    b368:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    b36a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b36c:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    b36e:	68e3      	ldr	r3, [r4, #12]
    b370:	2201      	movs	r2, #1
    b372:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	k_timer_stop(&data->async->rx_timeout_timer);
    b376:	68e0      	ldr	r0, [r4, #12]
    b378:	3088      	adds	r0, #136	; 0x88
	z_impl_k_timer_stop(timer);
    b37a:	f000 fce2 	bl	bd42 <z_impl_k_timer_stop>
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    b37e:	f8d6 253c 	ldr.w	r2, [r6, #1340]	; 0x53c
				data->async->rx_flush_cnt;
    b382:	68e3      	ldr	r3, [r4, #12]
    b384:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
	const int rx_amount = nrf_uarte_rx_amount_get(uarte) +
    b388:	4411      	add	r1, r2
	data->async->rx_flush_cnt = 0;
    b38a:	2200      	movs	r2, #0
    b38c:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    b390:	68e3      	ldr	r3, [r4, #12]
    b392:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	if (rx_len < 0) {
    b394:	1a89      	subs	r1, r1, r2
    b396:	d40b      	bmi.n	b3b0 <endrx_isr+0x4c>
	data->async->rx_total_user_byte_cnt += rx_len;
    b398:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    b39a:	440a      	add	r2, r1
    b39c:	679a      	str	r2, [r3, #120]	; 0x78
	if (rx_len > 0) {
    b39e:	2900      	cmp	r1, #0
    b3a0:	dc08      	bgt.n	b3b4 <endrx_isr+0x50>
	if (!data->async->rx_enabled) {
    b3a2:	68e1      	ldr	r1, [r4, #12]
    b3a4:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    b3a8:	b943      	cbnz	r3, b3bc <endrx_isr+0x58>
		data->async->is_in_irq = false;
    b3aa:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
}
    b3ae:	bd70      	pop	{r4, r5, r6, pc}
		rx_len = 0;
    b3b0:	2100      	movs	r1, #0
    b3b2:	e7f1      	b.n	b398 <endrx_isr+0x34>
		notify_uart_rx_rdy(dev, rx_len);
    b3b4:	4628      	mov	r0, r5
    b3b6:	f7ff fe65 	bl	b084 <notify_uart_rx_rdy>
    b3ba:	e7f2      	b.n	b3a2 <endrx_isr+0x3e>
	rx_buf_release(dev, &data->async->rx_buf);
    b3bc:	3160      	adds	r1, #96	; 0x60
    b3be:	4628      	mov	r0, r5
    b3c0:	f7ff fe78 	bl	b0b4 <rx_buf_release>
	__asm__ volatile(
    b3c4:	f04f 0320 	mov.w	r3, #32
    b3c8:	f3ef 8111 	mrs	r1, BASEPRI
    b3cc:	f383 8812 	msr	BASEPRI_MAX, r3
    b3d0:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    b3d4:	68e3      	ldr	r3, [r4, #12]
    b3d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    b3d8:	b1f2      	cbz	r2, b418 <endrx_isr+0xb4>
		data->async->rx_buf = data->async->rx_next_buf;
    b3da:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    b3dc:	68e3      	ldr	r3, [r4, #12]
    b3de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    b3e0:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    b3e2:	68e2      	ldr	r2, [r4, #12]
    b3e4:	2300      	movs	r3, #0
    b3e6:	66d3      	str	r3, [r2, #108]	; 0x6c
		data->async->rx_next_buf_len = 0;
    b3e8:	68e2      	ldr	r2, [r4, #12]
    b3ea:	6713      	str	r3, [r2, #112]	; 0x70
		data->async->rx_offset = 0;
    b3ec:	68e2      	ldr	r2, [r4, #12]
    b3ee:	6693      	str	r3, [r2, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b3f0:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    b3f4:	b90b      	cbnz	r3, b3fa <endrx_isr+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b3f6:	2301      	movs	r3, #1
    b3f8:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    b3fa:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    b3fe:	f023 0320 	bic.w	r3, r3, #32
    b402:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    b406:	f381 8811 	msr	BASEPRI, r1
    b40a:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    b40e:	68e3      	ldr	r3, [r4, #12]
    b410:	2200      	movs	r2, #0
    b412:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    b416:	e7ca      	b.n	b3ae <endrx_isr+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b418:	2301      	movs	r3, #1
    b41a:	6073      	str	r3, [r6, #4]
}
    b41c:	e7f3      	b.n	b406 <endrx_isr+0xa2>

0000b41e <setup_tx_cache>:
{
    b41e:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    b420:	68c3      	ldr	r3, [r0, #12]
    b422:	68da      	ldr	r2, [r3, #12]
    b424:	6a19      	ldr	r1, [r3, #32]
	if (!remaining) {
    b426:	1a52      	subs	r2, r2, r1
    b428:	d010      	beq.n	b44c <setup_tx_cache+0x2e>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    b42a:	2a08      	cmp	r2, #8
    b42c:	bf28      	it	cs
    b42e:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    b430:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
    b432:	68c3      	ldr	r3, [r0, #12]
    b434:	f103 0118 	add.w	r1, r3, #24
    b438:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    b43a:	68c0      	ldr	r0, [r0, #12]
    b43c:	6881      	ldr	r1, [r0, #8]
    b43e:	6a03      	ldr	r3, [r0, #32]
    b440:	4419      	add	r1, r3
    b442:	3018      	adds	r0, #24
    b444:	f000 fca0 	bl	bd88 <memcpy>
	return true;
    b448:	2001      	movs	r0, #1
}
    b44a:	bd08      	pop	{r3, pc}
		return false;
    b44c:	2000      	movs	r0, #0
    b44e:	e7fc      	b.n	b44a <setup_tx_cache+0x2c>

0000b450 <z_log_msg2_runtime_create>:
{
    b450:	b510      	push	{r4, lr}
    b452:	b086      	sub	sp, #24
	va_start(ap, fmt);
    b454:	ac0b      	add	r4, sp, #44	; 0x2c
    b456:	9405      	str	r4, [sp, #20]
    b458:	9403      	str	r4, [sp, #12]
    b45a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b45c:	9402      	str	r4, [sp, #8]
    b45e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b460:	9401      	str	r4, [sp, #4]
    b462:	9c08      	ldr	r4, [sp, #32]
    b464:	9400      	str	r4, [sp, #0]
    b466:	f7f7 f82b 	bl	24c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    b46a:	b006      	add	sp, #24
    b46c:	bd10      	pop	{r4, pc}

0000b46e <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    b46e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b472:	b083      	sub	sp, #12
    b474:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    b476:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    b478:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    b47a:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b47e:	2100      	movs	r1, #0
    b480:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    b484:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    b488:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    b48c:	aa01      	add	r2, sp, #4
    b48e:	4648      	mov	r0, r9
    b490:	f000 fa72 	bl	b978 <pinctrl_lookup_state>
	if (ret < 0) {
    b494:	1e04      	subs	r4, r0, #0
    b496:	db07      	blt.n	b4a8 <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    b498:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    b49a:	f8d9 2000 	ldr.w	r2, [r9]
    b49e:	7919      	ldrb	r1, [r3, #4]
    b4a0:	6818      	ldr	r0, [r3, #0]
    b4a2:	f7f9 fddf 	bl	5064 <pinctrl_configure_pins>
    b4a6:	4604      	mov	r4, r0
	if (err < 0) {
    b4a8:	2c00      	cmp	r4, #0
    b4aa:	db2c      	blt.n	b506 <uarte_instance_init+0x98>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    b4ac:	f108 0104 	add.w	r1, r8, #4
    b4b0:	4628      	mov	r0, r5
    b4b2:	f7ff fd13 	bl	aedc <uarte_nrfx_configure>
	if (err) {
    b4b6:	4604      	mov	r4, r0
    b4b8:	bb28      	cbnz	r0, b506 <uarte_instance_init+0x98>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    b4ba:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    b4bc:	f013 0f02 	tst.w	r3, #2
    b4c0:	d125      	bne.n	b50e <uarte_instance_init+0xa0>
		}
	}


#ifdef UARTE_ANY_ASYNC
	if (data->async) {
    b4c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
    b4c6:	b353      	cbz	r3, b51e <uarte_instance_init+0xb0>
		err = uarte_nrfx_init(dev);
    b4c8:	4628      	mov	r0, r5
    b4ca:	f7f9 fad9 	bl	4a80 <uarte_nrfx_init>
		if (err < 0) {
    b4ce:	2800      	cmp	r0, #0
    b4d0:	db38      	blt.n	b544 <uarte_instance_init+0xd6>
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    b4d2:	687b      	ldr	r3, [r7, #4]
    b4d4:	f013 0f02 	tst.w	r3, #2
    b4d8:	d103      	bne.n	b4e2 <uarte_instance_init+0x74>
    p_reg->INTENSET = mask;
    b4da:	f44f 7380 	mov.w	r3, #256	; 0x100
    b4de:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b4e2:	687b      	ldr	r3, [r7, #4]
    b4e4:	f013 0f10 	tst.w	r3, #16
    b4e8:	d003      	beq.n	b4f2 <uarte_instance_init+0x84>
    b4ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b4ee:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    b4f2:	f108 0314 	add.w	r3, r8, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b4f6:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b4fa:	2300      	movs	r3, #0
    b4fc:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b500:	2301      	movs	r3, #1
    b502:	60b3      	str	r3, [r6, #8]
    b504:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    b506:	4620      	mov	r0, r4
    b508:	b003      	add	sp, #12
    b50a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    b50e:	4641      	mov	r1, r8
    b510:	4630      	mov	r0, r6
    b512:	f7f9 fa81 	bl	4a18 <endtx_stoptx_ppi_init>
		if (err < 0) {
    b516:	2800      	cmp	r0, #0
    b518:	dad3      	bge.n	b4c2 <uarte_instance_init+0x54>
			return err;
    b51a:	4604      	mov	r4, r0
    b51c:	e7f3      	b.n	b506 <uarte_instance_init+0x98>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b51e:	2308      	movs	r3, #8
    b520:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
		if (!cfg->disable_rx) {
    b524:	7a3b      	ldrb	r3, [r7, #8]
    b526:	2b00      	cmp	r3, #0
    b528:	d1d3      	bne.n	b4d2 <uarte_instance_init+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b52a:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    b52e:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    b532:	f108 0315 	add.w	r3, r8, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b536:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    b53a:	2301      	movs	r3, #1
    b53c:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b540:	6033      	str	r3, [r6, #0]
}
    b542:	e7c6      	b.n	b4d2 <uarte_instance_init+0x64>
			return err;
    b544:	4604      	mov	r4, r0
    b546:	e7de      	b.n	b506 <uarte_instance_init+0x98>

0000b548 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    b548:	b510      	push	{r4, lr}
    b54a:	4604      	mov	r4, r0
    b54c:	2200      	movs	r2, #0
    b54e:	2101      	movs	r1, #1
    b550:	2002      	movs	r0, #2
    b552:	f7f7 fc43 	bl	2ddc <z_arm_irq_priority_set>
    b556:	2002      	movs	r0, #2
    b558:	f7f7 fc24 	bl	2da4 <arch_irq_enable>
    b55c:	2100      	movs	r1, #0
    b55e:	4620      	mov	r0, r4
    b560:	f7ff ff85 	bl	b46e <uarte_instance_init>
    b564:	bd10      	pop	{r4, pc}

0000b566 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    b566:	b510      	push	{r4, lr}
    b568:	4604      	mov	r4, r0
    b56a:	2200      	movs	r2, #0
    b56c:	2101      	movs	r1, #1
    b56e:	2028      	movs	r0, #40	; 0x28
    b570:	f7f7 fc34 	bl	2ddc <z_arm_irq_priority_set>
    b574:	2028      	movs	r0, #40	; 0x28
    b576:	f7f7 fc15 	bl	2da4 <arch_irq_enable>
    b57a:	2100      	movs	r1, #0
    b57c:	4620      	mov	r0, r4
    b57e:	f7ff ff76 	bl	b46e <uarte_instance_init>
    b582:	bd10      	pop	{r4, pc}

0000b584 <rx_flush>:
{
    b584:	b5f0      	push	{r4, r5, r6, r7, lr}
    b586:	b083      	sub	sp, #12
	const struct uarte_nrfx_config *config = dev->config;
    b588:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b58a:	681c      	ldr	r4, [r3, #0]
    return p_reg->RXD.AMOUNT;
    b58c:	f8d4 753c 	ldr.w	r7, [r4, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    b590:	460d      	mov	r5, r1
    b592:	b311      	cbz	r1, b5da <rx_flush+0x56>
    b594:	4616      	mov	r6, r2
	if (buf) {
    b596:	b315      	cbz	r5, b5de <rx_flush+0x5a>
__ssp_bos_icheck3(memset, void *, int)
    b598:	2100      	movs	r1, #0
    b59a:	4628      	mov	r0, r5
    b59c:	f000 fc02 	bl	bda4 <memset>
		flush_buf = buf;
    b5a0:	462b      	mov	r3, r5
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b5a2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    b5a6:	f8c4 6538 	str.w	r6, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b5aa:	2300      	movs	r3, #0
    b5ac:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    b5b0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b5b4:	2301      	movs	r3, #1
    b5b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b5b8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b5bc:	2b00      	cmp	r3, #0
    b5be:	d0fb      	beq.n	b5b8 <rx_flush+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b5c0:	2300      	movs	r3, #0
    b5c2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    b5c6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (!buf) {
    b5ca:	b155      	cbz	r5, b5e2 <rx_flush+0x5e>
    return p_reg->RXD.AMOUNT;
    b5cc:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
	if (rx_amount != prev_rx_amount) {
    b5d0:	4287      	cmp	r7, r0
    b5d2:	d00c      	beq.n	b5ee <rx_flush+0x6a>
		return rx_amount;
    b5d4:	b2c0      	uxtb	r0, r0
}
    b5d6:	b003      	add	sp, #12
    b5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    b5da:	2605      	movs	r6, #5
    b5dc:	e7db      	b.n	b596 <rx_flush+0x12>
		flush_buf = tmp_buf;
    b5de:	466b      	mov	r3, sp
    b5e0:	e7df      	b.n	b5a2 <rx_flush+0x1e>
    b5e2:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
		return nrf_uarte_rx_amount_get(uarte);
    b5e6:	b2c0      	uxtb	r0, r0
    b5e8:	e7f5      	b.n	b5d6 <rx_flush+0x52>
			return rx_amount;
    b5ea:	b2c0      	uxtb	r0, r0
    b5ec:	e7f3      	b.n	b5d6 <rx_flush+0x52>
	for (int i = 0; i < flush_len; i++) {
    b5ee:	2300      	movs	r3, #0
    b5f0:	42b3      	cmp	r3, r6
    b5f2:	d204      	bcs.n	b5fe <rx_flush+0x7a>
		if (buf[i] != dirty) {
    b5f4:	5cea      	ldrb	r2, [r5, r3]
    b5f6:	2a00      	cmp	r2, #0
    b5f8:	d1f7      	bne.n	b5ea <rx_flush+0x66>
	for (int i = 0; i < flush_len; i++) {
    b5fa:	3301      	adds	r3, #1
    b5fc:	e7f8      	b.n	b5f0 <rx_flush+0x6c>
	return 0;
    b5fe:	2000      	movs	r0, #0
    b600:	e7e9      	b.n	b5d6 <rx_flush+0x52>

0000b602 <async_uart_release>:
{
    b602:	b570      	push	{r4, r5, r6, lr}
    b604:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    b606:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
    b608:	f04f 0320 	mov.w	r3, #32
    b60c:	f3ef 8611 	mrs	r6, BASEPRI
    b610:	f383 8812 	msr	BASEPRI_MAX, r3
    b614:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    b618:	68d0      	ldr	r0, [r2, #12]
    b61a:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
    b61e:	ea23 0301 	bic.w	r3, r3, r1
    b622:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    b626:	68d5      	ldr	r5, [r2, #12]
    b628:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    b62c:	b923      	cbnz	r3, b638 <async_uart_release+0x36>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    b62e:	2902      	cmp	r1, #2
    b630:	d007      	beq.n	b642 <async_uart_release+0x40>
		uart_disable(dev);
    b632:	4620      	mov	r0, r4
    b634:	f7ff fcf6 	bl	b024 <uart_disable>
	__asm__ volatile(
    b638:	f386 8811 	msr	BASEPRI, r6
    b63c:	f3bf 8f6f 	isb	sy
}
    b640:	bd70      	pop	{r4, r5, r6, pc}
				rx_flush(dev, data->async->rx_flush_buffer,
    b642:	2205      	movs	r2, #5
    b644:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    b648:	4620      	mov	r0, r4
    b64a:	f7ff ff9b 	bl	b584 <rx_flush>
			data->async->rx_flush_cnt =
    b64e:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
    b652:	e7ee      	b.n	b632 <async_uart_release+0x30>

0000b654 <txstopped_isr>:
{
    b654:	b5f0      	push	{r4, r5, r6, r7, lr}
    b656:	b087      	sub	sp, #28
    b658:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    b65a:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    b65c:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
    b65e:	681f      	ldr	r7, [r3, #0]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b660:	685b      	ldr	r3, [r3, #4]
    b662:	f013 0f10 	tst.w	r3, #16
    b666:	d147      	bne.n	b6f8 <txstopped_isr+0xa4>
	if (!data->async->tx_buf) {
    b668:	68e3      	ldr	r3, [r4, #12]
    b66a:	689b      	ldr	r3, [r3, #8]
    b66c:	2b00      	cmp	r3, #0
    b66e:	d041      	beq.n	b6f4 <txstopped_isr+0xa0>
	__asm__ volatile(
    b670:	f04f 0320 	mov.w	r3, #32
    b674:	f3ef 8211 	mrs	r2, BASEPRI
    b678:	f383 8812 	msr	BASEPRI_MAX, r3
    b67c:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    b680:	68e3      	ldr	r3, [r4, #12]
    b682:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    b686:	2900      	cmp	r1, #0
    b688:	db42      	blt.n	b710 <txstopped_isr+0xbc>
    b68a:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
	__asm__ volatile(
    b68e:	f382 8811 	msr	BASEPRI, r2
    b692:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    b696:	68e3      	ldr	r3, [r4, #12]
    b698:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
    b69c:	2a00      	cmp	r2, #0
    b69e:	d13a      	bne.n	b716 <txstopped_isr+0xc2>
	if (data->async->tx_buf != data->async->xfer_buf) {
    b6a0:	6899      	ldr	r1, [r3, #8]
    b6a2:	691a      	ldr	r2, [r3, #16]
    b6a4:	4291      	cmp	r1, r2
    b6a6:	d004      	beq.n	b6b2 <txstopped_isr+0x5e>
		if (amount == data->async->xfer_len) {
    b6a8:	695a      	ldr	r2, [r3, #20]
    b6aa:	42b2      	cmp	r2, r6
    b6ac:	d044      	beq.n	b738 <txstopped_isr+0xe4>
			amount += data->async->tx_cache_offset;
    b6ae:	6a1b      	ldr	r3, [r3, #32]
    b6b0:	441e      	add	r6, r3
	k_timer_stop(&data->async->tx_timeout_timer);
    b6b2:	68e0      	ldr	r0, [r4, #12]
    b6b4:	3028      	adds	r0, #40	; 0x28
    b6b6:	f000 fb44 	bl	bd42 <z_impl_k_timer_stop>
	struct uart_event evt = {
    b6ba:	2300      	movs	r3, #0
    b6bc:	9301      	str	r3, [sp, #4]
    b6be:	9302      	str	r3, [sp, #8]
    b6c0:	9303      	str	r3, [sp, #12]
    b6c2:	9304      	str	r3, [sp, #16]
    b6c4:	9305      	str	r3, [sp, #20]
		.data.tx.buf = data->async->tx_buf,
    b6c6:	68e3      	ldr	r3, [r4, #12]
    b6c8:	689a      	ldr	r2, [r3, #8]
	struct uart_event evt = {
    b6ca:	9202      	str	r2, [sp, #8]
    b6cc:	9603      	str	r6, [sp, #12]
	if (amount == data->async->tx_size) {
    b6ce:	68db      	ldr	r3, [r3, #12]
    b6d0:	42b3      	cmp	r3, r6
    b6d2:	d002      	beq.n	b6da <txstopped_isr+0x86>
		evt.type = UART_TX_ABORTED;
    b6d4:	2301      	movs	r3, #1
    b6d6:	f88d 3004 	strb.w	r3, [sp, #4]
    p_reg->INTENCLR = mask;
    b6da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b6de:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    b6e2:	68e2      	ldr	r2, [r4, #12]
    b6e4:	2300      	movs	r3, #0
    b6e6:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
    b6e8:	68e2      	ldr	r2, [r4, #12]
    b6ea:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
    b6ec:	a901      	add	r1, sp, #4
    b6ee:	4628      	mov	r0, r5
    b6f0:	f7ff fcc0 	bl	b074 <user_callback>
}
    b6f4:	b007      	add	sp, #28
    b6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b6f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b6fc:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    b700:	2101      	movs	r1, #1
    b702:	f7ff ff7e 	bl	b602 <async_uart_release>
		if (!data->async->tx_size) {
    b706:	68e3      	ldr	r3, [r4, #12]
    b708:	68db      	ldr	r3, [r3, #12]
    b70a:	2b00      	cmp	r3, #0
    b70c:	d1ac      	bne.n	b668 <txstopped_isr+0x14>
    b70e:	e7f1      	b.n	b6f4 <txstopped_isr+0xa0>
    return p_reg->TXD.AMOUNT;
    b710:	f8d7 654c 	ldr.w	r6, [r7, #1356]	; 0x54c
    b714:	e7bb      	b.n	b68e <txstopped_isr+0x3a>
	__asm__ volatile(
    b716:	f04f 0320 	mov.w	r3, #32
    b71a:	f3ef 8611 	mrs	r6, BASEPRI
    b71e:	f383 8812 	msr	BASEPRI_MAX, r3
    b722:	f3bf 8f6f 	isb	sy
		start_tx_locked(dev, data);
    b726:	4621      	mov	r1, r4
    b728:	4628      	mov	r0, r5
    b72a:	f7ff fc88 	bl	b03e <start_tx_locked>
	__asm__ volatile(
    b72e:	f386 8811 	msr	BASEPRI, r6
    b732:	f3bf 8f6f 	isb	sy
		return;
    b736:	e7dd      	b.n	b6f4 <txstopped_isr+0xa0>
			data->async->tx_cache_offset += amount;
    b738:	6a1a      	ldr	r2, [r3, #32]
    b73a:	4432      	add	r2, r6
    b73c:	621a      	str	r2, [r3, #32]
			if (setup_tx_cache(data)) {
    b73e:	4620      	mov	r0, r4
    b740:	f7ff fe6d 	bl	b41e <setup_tx_cache>
    b744:	b910      	cbnz	r0, b74c <txstopped_isr+0xf8>
			amount = data->async->tx_cache_offset;
    b746:	68e3      	ldr	r3, [r4, #12]
    b748:	6a1e      	ldr	r6, [r3, #32]
    b74a:	e7b2      	b.n	b6b2 <txstopped_isr+0x5e>
	__asm__ volatile(
    b74c:	f04f 0320 	mov.w	r3, #32
    b750:	f3ef 8611 	mrs	r6, BASEPRI
    b754:	f383 8812 	msr	BASEPRI_MAX, r3
    b758:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    b75c:	4621      	mov	r1, r4
    b75e:	4628      	mov	r0, r5
    b760:	f7ff fc6d 	bl	b03e <start_tx_locked>
	__asm__ volatile(
    b764:	f386 8811 	msr	BASEPRI, r6
    b768:	f3bf 8f6f 	isb	sy
				return;
    b76c:	e7c2      	b.n	b6f4 <txstopped_isr+0xa0>

0000b76e <rxto_isr>:
{
    b76e:	b570      	push	{r4, r5, r6, lr}
    b770:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    b772:	6846      	ldr	r6, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    b774:	6905      	ldr	r5, [r0, #16]
	rx_buf_release(dev, &data->async->rx_buf);
    b776:	68e9      	ldr	r1, [r5, #12]
    b778:	3160      	adds	r1, #96	; 0x60
    b77a:	f7ff fc9b 	bl	b0b4 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
    b77e:	68e9      	ldr	r1, [r5, #12]
    b780:	316c      	adds	r1, #108	; 0x6c
    b782:	4620      	mov	r0, r4
    b784:	f7ff fc96 	bl	b0b4 <rx_buf_release>
	if (data->async->rx_enabled) {
    b788:	68eb      	ldr	r3, [r5, #12]
    b78a:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
    b78e:	b152      	cbz	r2, b7a6 <rxto_isr+0x38>
		data->async->rx_enabled = false;
    b790:	2200      	movs	r2, #0
    b792:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b796:	6873      	ldr	r3, [r6, #4]
    b798:	f013 0f10 	tst.w	r3, #16
    b79c:	d109      	bne.n	b7b2 <rxto_isr+0x44>
	notify_rx_disable(dev);
    b79e:	4620      	mov	r0, r4
    b7a0:	f7ff fc9f 	bl	b0e2 <notify_rx_disable>
}
    b7a4:	bd70      	pop	{r4, r5, r6, pc}
		(void)rx_flush(dev, NULL, 0);
    b7a6:	2200      	movs	r2, #0
    b7a8:	4611      	mov	r1, r2
    b7aa:	4620      	mov	r0, r4
    b7ac:	f7ff feea 	bl	b584 <rx_flush>
    b7b0:	e7f1      	b.n	b796 <rxto_isr+0x28>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    b7b2:	2102      	movs	r1, #2
    b7b4:	4620      	mov	r0, r4
    b7b6:	f7ff ff24 	bl	b602 <async_uart_release>
    b7ba:	e7f0      	b.n	b79e <rxto_isr+0x30>

0000b7bc <uarte_nrfx_isr_async>:
{
    b7bc:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    b7be:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b7c0:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    b7c2:	6902      	ldr	r2, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b7c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
	if (!HW_RX_COUNTING_ENABLED(data)
    b7c8:	bb5b      	cbnz	r3, b822 <uarte_nrfx_isr_async+0x66>
    b7ca:	4605      	mov	r5, r0
    b7cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    b7d0:	bb9b      	cbnz	r3, b83a <uarte_nrfx_isr_async+0x7e>
    b7d2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    b7d6:	b123      	cbz	r3, b7e2 <uarte_nrfx_isr_async+0x26>
    return p_reg->INTENSET & mask;
    b7d8:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    b7dc:	f013 0f10 	tst.w	r3, #16
    b7e0:	d133      	bne.n	b84a <uarte_nrfx_isr_async+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b7e2:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    b7e6:	b113      	cbz	r3, b7ee <uarte_nrfx_isr_async+0x32>
    b7e8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    b7ec:	b3b3      	cbz	r3, b85c <uarte_nrfx_isr_async+0xa0>
    b7ee:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    b7f2:	b113      	cbz	r3, b7fa <uarte_nrfx_isr_async+0x3e>
    b7f4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    b7f8:	b3c3      	cbz	r3, b86c <uarte_nrfx_isr_async+0xb0>
    b7fa:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    b7fe:	b123      	cbz	r3, b80a <uarte_nrfx_isr_async+0x4e>
    return p_reg->INTENSET & mask;
    b800:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    b804:	f413 7f80 	tst.w	r3, #256	; 0x100
    b808:	d138      	bne.n	b87c <uarte_nrfx_isr_async+0xc0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b80a:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    b80e:	b19b      	cbz	r3, b838 <uarte_nrfx_isr_async+0x7c>
    return p_reg->INTENSET & mask;
    b810:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    b814:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    b818:	d00e      	beq.n	b838 <uarte_nrfx_isr_async+0x7c>
		txstopped_isr(dev);
    b81a:	4628      	mov	r0, r5
    b81c:	f7ff ff1a 	bl	b654 <txstopped_isr>
    b820:	e00a      	b.n	b838 <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b822:	2300      	movs	r3, #0
    b824:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    b828:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    b82c:	68d2      	ldr	r2, [r2, #12]
    b82e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    b832:	3301      	adds	r3, #1
    b834:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
    b838:	bd38      	pop	{r3, r4, r5, pc}
    b83a:	2300      	movs	r3, #0
    b83c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    b840:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
		error_isr(dev);
    b844:	f7ff fcf5 	bl	b232 <error_isr>
    b848:	e7c3      	b.n	b7d2 <uarte_nrfx_isr_async+0x16>
    b84a:	2300      	movs	r3, #0
    b84c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    b850:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		endrx_isr(dev);
    b854:	4628      	mov	r0, r5
    b856:	f7ff fd85 	bl	b364 <endrx_isr>
    b85a:	e7c2      	b.n	b7e2 <uarte_nrfx_isr_async+0x26>
    b85c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    b860:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		rxstarted_isr(dev);
    b864:	4628      	mov	r0, r5
    b866:	f7f9 f89d 	bl	49a4 <rxstarted_isr>
    b86a:	e7c0      	b.n	b7ee <uarte_nrfx_isr_async+0x32>
    b86c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    b870:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		rxto_isr(dev);
    b874:	4628      	mov	r0, r5
    b876:	f7ff ff7a 	bl	b76e <rxto_isr>
    b87a:	e7be      	b.n	b7fa <uarte_nrfx_isr_async+0x3e>
		endtx_isr(dev);
    b87c:	4628      	mov	r0, r5
    b87e:	f7ff fb14 	bl	aeaa <endtx_isr>
    b882:	e7c2      	b.n	b80a <uarte_nrfx_isr_async+0x4e>

0000b884 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    b884:	4770      	bx	lr

0000b886 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    b886:	1a40      	subs	r0, r0, r1
}
    b888:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b88c:	4770      	bx	lr

0000b88e <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    b88e:	f100 0350 	add.w	r3, r0, #80	; 0x50
    b892:	009b      	lsls	r3, r3, #2
    b894:	b29b      	uxth	r3, r3
    b896:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b89a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    b89e:	2200      	movs	r2, #0
    b8a0:	601a      	str	r2, [r3, #0]
    b8a2:	681b      	ldr	r3, [r3, #0]
}
    b8a4:	4770      	bx	lr

0000b8a6 <absolute_time_to_cc>:
}
    b8a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b8aa:	4770      	bx	lr

0000b8ac <full_int_lock>:
	__asm__ volatile(
    b8ac:	f04f 0320 	mov.w	r3, #32
    b8b0:	f3ef 8011 	mrs	r0, BASEPRI
    b8b4:	f383 8812 	msr	BASEPRI_MAX, r3
    b8b8:	f3bf 8f6f 	isb	sy
}
    b8bc:	4770      	bx	lr

0000b8be <full_int_unlock>:
	__asm__ volatile(
    b8be:	f380 8811 	msr	BASEPRI, r0
    b8c2:	f3bf 8f6f 	isb	sy
}
    b8c6:	4770      	bx	lr

0000b8c8 <set_absolute_alarm>:
{
    b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b8ca:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    b8cc:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    b8d0:	f7f9 f924 	bl	4b1c <get_comparator>
    b8d4:	4607      	mov	r7, r0
    b8d6:	e019      	b.n	b90c <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    b8d8:	2013      	movs	r0, #19
    b8da:	f000 fa20 	bl	bd1e <z_impl_k_busy_wait>
}
    b8de:	e022      	b.n	b926 <set_absolute_alarm+0x5e>
		event_clear(chan);
    b8e0:	4630      	mov	r0, r6
    b8e2:	f7ff ffd4 	bl	b88e <event_clear>
		event_enable(chan);
    b8e6:	4630      	mov	r0, r6
    b8e8:	f7f9 f920 	bl	4b2c <event_enable>
		set_comparator(chan, cc_val);
    b8ec:	4629      	mov	r1, r5
    b8ee:	4630      	mov	r0, r6
    b8f0:	f7f9 f90a 	bl	4b08 <set_comparator>
		now2 = counter();
    b8f4:	f7f9 f92e 	bl	4b54 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    b8f8:	4284      	cmp	r4, r0
    b8fa:	d01e      	beq.n	b93a <set_absolute_alarm+0x72>
    b8fc:	1c81      	adds	r1, r0, #2
    b8fe:	4628      	mov	r0, r5
    b900:	f7ff ffc1 	bl	b886 <counter_sub>
	} while ((now2 != now) &&
    b904:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b908:	d917      	bls.n	b93a <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    b90a:	462f      	mov	r7, r5
		now = counter();
    b90c:	f7f9 f922 	bl	4b54 <counter>
    b910:	4604      	mov	r4, r0
		set_comparator(chan, now);
    b912:	4601      	mov	r1, r0
    b914:	4630      	mov	r0, r6
    b916:	f7f9 f8f7 	bl	4b08 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    b91a:	4621      	mov	r1, r4
    b91c:	4638      	mov	r0, r7
    b91e:	f7ff ffb2 	bl	b886 <counter_sub>
    b922:	2801      	cmp	r0, #1
    b924:	d0d8      	beq.n	b8d8 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    b926:	1ca7      	adds	r7, r4, #2
    b928:	4639      	mov	r1, r7
    b92a:	4628      	mov	r0, r5
    b92c:	f7ff ffab 	bl	b886 <counter_sub>
    b930:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b934:	d9d4      	bls.n	b8e0 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    b936:	463d      	mov	r5, r7
    b938:	e7d2      	b.n	b8e0 <set_absolute_alarm+0x18>
}
    b93a:	4628      	mov	r0, r5
    b93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b93e <compare_set>:
{
    b93e:	b5f0      	push	{r4, r5, r6, r7, lr}
    b940:	b083      	sub	sp, #12
    b942:	4604      	mov	r4, r0
    b944:	4617      	mov	r7, r2
    b946:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    b948:	f7f9 f90a 	bl	4b60 <compare_int_lock>
    b94c:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    b94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b950:	9301      	str	r3, [sp, #4]
    b952:	9b08      	ldr	r3, [sp, #32]
    b954:	9300      	str	r3, [sp, #0]
    b956:	463a      	mov	r2, r7
    b958:	462b      	mov	r3, r5
    b95a:	4620      	mov	r0, r4
    b95c:	f7f9 f9f0 	bl	4d40 <compare_set_nolocks>
    b960:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    b962:	4631      	mov	r1, r6
    b964:	4620      	mov	r0, r4
    b966:	f7f9 f95f 	bl	4c28 <compare_int_unlock>
}
    b96a:	4628      	mov	r0, r5
    b96c:	b003      	add	sp, #12
    b96e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b970 <sys_clock_cycle_get_32>:
{
    b970:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    b972:	f7f9 f9c5 	bl	4d00 <z_nrf_rtc_timer_read>
}
    b976:	bd08      	pop	{r3, pc}

0000b978 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    b978:	b410      	push	{r4}
	*state = &config->states[0];
    b97a:	6843      	ldr	r3, [r0, #4]
    b97c:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    b97e:	e001      	b.n	b984 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    b980:	3408      	adds	r4, #8
    b982:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    b984:	6814      	ldr	r4, [r2, #0]
    b986:	7a03      	ldrb	r3, [r0, #8]
    b988:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    b98c:	3b01      	subs	r3, #1
    b98e:	f8d0 c004 	ldr.w	ip, [r0, #4]
    b992:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    b996:	429c      	cmp	r4, r3
    b998:	d804      	bhi.n	b9a4 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    b99a:	7963      	ldrb	r3, [r4, #5]
    b99c:	428b      	cmp	r3, r1
    b99e:	d1ef      	bne.n	b980 <pinctrl_lookup_state+0x8>
			return 0;
    b9a0:	2000      	movs	r0, #0
    b9a2:	e001      	b.n	b9a8 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    b9a4:	f06f 0001 	mvn.w	r0, #1
}
    b9a8:	bc10      	pop	{r4}
    b9aa:	4770      	bx	lr

0000b9ac <z_log_msg2_runtime_create>:
{
    b9ac:	b510      	push	{r4, lr}
    b9ae:	b086      	sub	sp, #24
	va_start(ap, fmt);
    b9b0:	ac0b      	add	r4, sp, #44	; 0x2c
    b9b2:	9405      	str	r4, [sp, #20]
    b9b4:	9403      	str	r4, [sp, #12]
    b9b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b9b8:	9402      	str	r4, [sp, #8]
    b9ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b9bc:	9401      	str	r4, [sp, #4]
    b9be:	9c08      	ldr	r4, [sp, #32]
    b9c0:	9400      	str	r4, [sp, #0]
    b9c2:	f7f6 fd7d 	bl	24c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    b9c6:	b006      	add	sp, #24
    b9c8:	bd10      	pop	{r4, pc}

0000b9ca <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    b9ca:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    b9cc:	f7fe fbb0 	bl	a130 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    b9d0:	bd08      	pop	{r3, pc}

0000b9d2 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    b9d2:	b510      	push	{r4, lr}
    b9d4:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    b9d6:	f7f7 f8a7 	bl	2b28 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    b9da:	f7f7 f967 	bl	2cac <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    b9de:	4620      	mov	r0, r4
    b9e0:	f7ff fff3 	bl	b9ca <hw_cc3xx_init_internal>
	return res;
}
    b9e4:	bd10      	pop	{r4, pc}

0000b9e6 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    b9e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b9ea:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    b9ee:	2b08      	cmp	r3, #8
    b9f0:	d001      	beq.n	b9f6 <nrf52_errata_36+0x10>
        return false;
    b9f2:	2000      	movs	r0, #0
    b9f4:	4770      	bx	lr
                        return true;
    b9f6:	2001      	movs	r0, #1
}
    b9f8:	4770      	bx	lr

0000b9fa <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    b9fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b9fe:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    ba02:	2b08      	cmp	r3, #8
    ba04:	d001      	beq.n	ba0a <nrf52_errata_66+0x10>
        return false;
    ba06:	2000      	movs	r0, #0
    ba08:	4770      	bx	lr
                        return true;
    ba0a:	2001      	movs	r0, #1
}
    ba0c:	4770      	bx	lr

0000ba0e <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ba0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ba12:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ba16:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    ba1a:	2a08      	cmp	r2, #8
    ba1c:	d001      	beq.n	ba22 <nrf52_errata_98+0x14>
        return false;
    ba1e:	2000      	movs	r0, #0
    ba20:	4770      	bx	lr
                switch(var2)
    ba22:	2b00      	cmp	r3, #0
    ba24:	d804      	bhi.n	ba30 <nrf52_errata_98+0x22>
    ba26:	e8df f003 	tbb	[pc, r3]
    ba2a:	01          	.byte	0x01
    ba2b:	00          	.byte	0x00
    ba2c:	2001      	movs	r0, #1
    ba2e:	4770      	bx	lr
                        return false;
    ba30:	2000      	movs	r0, #0
}
    ba32:	4770      	bx	lr

0000ba34 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ba34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ba38:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ba3c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    ba40:	2a08      	cmp	r2, #8
    ba42:	d001      	beq.n	ba48 <nrf52_errata_103+0x14>
        return false;
    ba44:	2000      	movs	r0, #0
    ba46:	4770      	bx	lr
                switch(var2)
    ba48:	2b00      	cmp	r3, #0
    ba4a:	d804      	bhi.n	ba56 <nrf52_errata_103+0x22>
    ba4c:	e8df f003 	tbb	[pc, r3]
    ba50:	01          	.byte	0x01
    ba51:	00          	.byte	0x00
    ba52:	2001      	movs	r0, #1
    ba54:	4770      	bx	lr
                        return false;
    ba56:	2000      	movs	r0, #0
}
    ba58:	4770      	bx	lr

0000ba5a <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ba5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ba5e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ba62:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    ba66:	2a08      	cmp	r2, #8
    ba68:	d001      	beq.n	ba6e <nrf52_errata_115+0x14>
        return false;
    ba6a:	2000      	movs	r0, #0
    ba6c:	4770      	bx	lr
                switch(var2)
    ba6e:	2b00      	cmp	r3, #0
    ba70:	d804      	bhi.n	ba7c <nrf52_errata_115+0x22>
    ba72:	e8df f003 	tbb	[pc, r3]
    ba76:	01          	.byte	0x01
    ba77:	00          	.byte	0x00
    ba78:	2001      	movs	r0, #1
    ba7a:	4770      	bx	lr
                        return false;
    ba7c:	2000      	movs	r0, #0
}
    ba7e:	4770      	bx	lr

0000ba80 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ba80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ba84:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ba88:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    ba8c:	2a08      	cmp	r2, #8
    ba8e:	d001      	beq.n	ba94 <nrf52_errata_120+0x14>
        return false;
    ba90:	2000      	movs	r0, #0
    ba92:	4770      	bx	lr
                switch(var2)
    ba94:	2b00      	cmp	r3, #0
    ba96:	d804      	bhi.n	baa2 <nrf52_errata_120+0x22>
    ba98:	e8df f003 	tbb	[pc, r3]
    ba9c:	01          	.byte	0x01
    ba9d:	00          	.byte	0x00
    ba9e:	2001      	movs	r0, #1
    baa0:	4770      	bx	lr
                        return false;
    baa2:	2000      	movs	r0, #0
}
    baa4:	4770      	bx	lr

0000baa6 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    baa6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    baaa:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    baae:	2b08      	cmp	r3, #8
    bab0:	d001      	beq.n	bab6 <nrf52_errata_136+0x10>
        return false;
    bab2:	2000      	movs	r0, #0
    bab4:	4770      	bx	lr
                        return true;
    bab6:	2001      	movs	r0, #1
}
    bab8:	4770      	bx	lr

0000baba <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    baba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    babe:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    bac2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    bac6:	2a08      	cmp	r2, #8
    bac8:	d001      	beq.n	bace <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    baca:	2000      	movs	r0, #0
    bacc:	4770      	bx	lr
                switch(var2)
    bace:	2b04      	cmp	r3, #4
    bad0:	d801      	bhi.n	bad6 <nrf52_configuration_249+0x1c>
    bad2:	2000      	movs	r0, #0
    bad4:	4770      	bx	lr
                        return true;
    bad6:	2001      	movs	r0, #1
    #endif
}
    bad8:	4770      	bx	lr

0000bada <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    bada:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    badc:	4780      	blx	r0
}
    bade:	bd08      	pop	{r3, pc}

0000bae0 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    bae0:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    bae2:	f000 f91c 	bl	bd1e <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    bae6:	bd08      	pop	{r3, pc}

0000bae8 <clock_initial_lfclksrc_get>:
}
    bae8:	2000      	movs	r0, #0
    baea:	4770      	bx	lr

0000baec <clock_lfclksrc_tweak>:
{
    baec:	b538      	push	{r3, r4, r5, lr}
    baee:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    baf0:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    baf2:	2b01      	cmp	r3, #1
    baf4:	d002      	beq.n	bafc <clock_lfclksrc_tweak+0x10>
    baf6:	b933      	cbnz	r3, bb06 <clock_lfclksrc_tweak+0x1a>
    baf8:	2301      	movs	r3, #1
    bafa:	e000      	b.n	bafe <clock_lfclksrc_tweak+0x12>
    bafc:	2301      	movs	r3, #1
    if (!is_correct_clk)
    bafe:	461d      	mov	r5, r3
    bb00:	b11b      	cbz	r3, bb0a <clock_lfclksrc_tweak+0x1e>
}
    bb02:	4628      	mov	r0, r5
    bb04:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    bb06:	2300      	movs	r3, #0
    bb08:	e7f9      	b.n	bafe <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    bb0a:	2000      	movs	r0, #0
    bb0c:	f7fa f882 	bl	5c14 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    bb10:	f7ff ffea 	bl	bae8 <clock_initial_lfclksrc_get>
    bb14:	6020      	str	r0, [r4, #0]
    bb16:	e7f4      	b.n	bb02 <clock_lfclksrc_tweak+0x16>

0000bb18 <pin_is_task_output>:
{
    bb18:	b510      	push	{r4, lr}
    bb1a:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    bb1c:	f7fa fa4c 	bl	5fb8 <pin_is_output>
    bb20:	b128      	cbz	r0, bb2e <pin_is_task_output+0x16>
    bb22:	4620      	mov	r0, r4
    bb24:	f7fa fa32 	bl	5f8c <pin_in_use_by_te>
    bb28:	b118      	cbz	r0, bb32 <pin_is_task_output+0x1a>
    bb2a:	2001      	movs	r0, #1
    bb2c:	e000      	b.n	bb30 <pin_is_task_output+0x18>
    bb2e:	2000      	movs	r0, #0
}
    bb30:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    bb32:	2000      	movs	r0, #0
    bb34:	e7fc      	b.n	bb30 <pin_is_task_output+0x18>

0000bb36 <pin_is_input>:
{
    bb36:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    bb38:	f7fa fa3e 	bl	5fb8 <pin_is_output>
    bb3c:	f080 0001 	eor.w	r0, r0, #1
}
    bb40:	b2c0      	uxtb	r0, r0
    bb42:	bd08      	pop	{r3, pc}

0000bb44 <gpiote_polarity_to_trigger>:
}
    bb44:	4770      	bx	lr

0000bb46 <gpiote_trigger_to_polarity>:
}
    bb46:	4770      	bx	lr

0000bb48 <is_level>:
}
    bb48:	2803      	cmp	r0, #3
    bb4a:	bf94      	ite	ls
    bb4c:	2000      	movls	r0, #0
    bb4e:	2001      	movhi	r0, #1
    bb50:	4770      	bx	lr

0000bb52 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    bb52:	b508      	push	{r3, lr}
  _DoInit();
    bb54:	f7fb f9fa 	bl	6f4c <_DoInit>
}
    bb58:	bd08      	pop	{r3, pc}

0000bb5a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    bb5a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    bb5c:	f7ff fff9 	bl	bb52 <SEGGER_RTT_Init>

	return 0;
}
    bb60:	2000      	movs	r0, #0
    bb62:	bd08      	pop	{r3, pc}

0000bb64 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    bb64:	b148      	cbz	r0, bb7a <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    bb66:	68c3      	ldr	r3, [r0, #12]
    bb68:	8818      	ldrh	r0, [r3, #0]
    bb6a:	f3c0 0008 	ubfx	r0, r0, #0, #9
    bb6e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    bb72:	bf14      	ite	ne
    bb74:	2000      	movne	r0, #0
    bb76:	2001      	moveq	r0, #1
    bb78:	4770      	bx	lr
		return false;
    bb7a:	2000      	movs	r0, #0
}
    bb7c:	4770      	bx	lr

0000bb7e <z_log_msg2_runtime_create>:
{
    bb7e:	b510      	push	{r4, lr}
    bb80:	b086      	sub	sp, #24
	va_start(ap, fmt);
    bb82:	ac0b      	add	r4, sp, #44	; 0x2c
    bb84:	9405      	str	r4, [sp, #20]
    bb86:	9403      	str	r4, [sp, #12]
    bb88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    bb8a:	9402      	str	r4, [sp, #8]
    bb8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    bb8e:	9401      	str	r4, [sp, #4]
    bb90:	9c08      	ldr	r4, [sp, #32]
    bb92:	9400      	str	r4, [sp, #0]
    bb94:	f7f6 fc94 	bl	24c0 <z_impl_z_log_msg2_runtime_vcreate>
}
    bb98:	b006      	add	sp, #24
    bb9a:	bd10      	pop	{r4, pc}

0000bb9c <z_early_memset>:
{
    bb9c:	b508      	push	{r3, lr}
    bb9e:	f000 f901 	bl	bda4 <memset>
}
    bba2:	bd08      	pop	{r3, pc}

0000bba4 <z_early_memcpy>:
{
    bba4:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    bba6:	f000 f8ef 	bl	bd88 <memcpy>
}
    bbaa:	bd08      	pop	{r3, pc}

0000bbac <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    bbac:	6902      	ldr	r2, [r0, #16]
    bbae:	6943      	ldr	r3, [r0, #20]
    bbb0:	431a      	orrs	r2, r3
    bbb2:	f012 0203 	ands.w	r2, r2, #3
    bbb6:	d10d      	bne.n	bbd4 <create_free_list+0x28>
	slab->free_list = NULL;
    bbb8:	2100      	movs	r1, #0
    bbba:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    bbbc:	e005      	b.n	bbca <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    bbbe:	6981      	ldr	r1, [r0, #24]
    bbc0:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    bbc2:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    bbc4:	6901      	ldr	r1, [r0, #16]
    bbc6:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    bbc8:	3201      	adds	r2, #1
    bbca:	68c1      	ldr	r1, [r0, #12]
    bbcc:	4291      	cmp	r1, r2
    bbce:	d8f6      	bhi.n	bbbe <create_free_list+0x12>
	return 0;
    bbd0:	2000      	movs	r0, #0
    bbd2:	4770      	bx	lr
		return -EINVAL;
    bbd4:	f06f 0015 	mvn.w	r0, #21
}
    bbd8:	4770      	bx	lr

0000bbda <k_mem_slab_init>:
{
    bbda:	b510      	push	{r4, lr}
    bbdc:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    bbde:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    bbe0:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    bbe2:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    bbe4:	2300      	movs	r3, #0
    bbe6:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    bbe8:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    bbea:	f7ff ffdf 	bl	bbac <create_free_list>
	if (rc < 0) {
    bbee:	2800      	cmp	r0, #0
    bbf0:	db01      	blt.n	bbf6 <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    bbf2:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    bbf4:	6064      	str	r4, [r4, #4]
}
    bbf6:	bd10      	pop	{r4, pc}

0000bbf8 <setup_thread_stack>:
{
    bbf8:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    bbfa:	3207      	adds	r2, #7
    bbfc:	f022 0207 	bic.w	r2, r2, #7
    bc00:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    bc04:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    bc08:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    bc0c:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    bc10:	2200      	movs	r2, #0
    bc12:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    bc16:	18c8      	adds	r0, r1, r3
    bc18:	bc10      	pop	{r4}
    bc1a:	4770      	bx	lr

0000bc1c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bc1c:	f3ef 8005 	mrs	r0, IPSR
}
    bc20:	3800      	subs	r0, #0
    bc22:	bf18      	it	ne
    bc24:	2001      	movne	r0, #1
    bc26:	4770      	bx	lr

0000bc28 <k_thread_name_get>:
}
    bc28:	3074      	adds	r0, #116	; 0x74
    bc2a:	4770      	bx	lr

0000bc2c <z_impl_k_thread_start>:
{
    bc2c:	b508      	push	{r3, lr}
	z_sched_start(thread);
    bc2e:	f7fc fe2d 	bl	888c <z_sched_start>
}
    bc32:	bd08      	pop	{r3, pc}

0000bc34 <z_init_thread_base>:
{
    bc34:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    bc36:	2400      	movs	r4, #0
    bc38:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    bc3a:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    bc3c:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    bc3e:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    bc40:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    bc42:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    bc44:	61c4      	str	r4, [r0, #28]
}
    bc46:	bc10      	pop	{r4}
    bc48:	4770      	bx	lr

0000bc4a <z_pm_save_idle_exit>:
{
    bc4a:	b508      	push	{r3, lr}
	pm_system_resume();
    bc4c:	f7f6 fd76 	bl	273c <pm_system_resume>
	sys_clock_idle_exit();
    bc50:	f7ff fe18 	bl	b884 <sys_clock_idle_exit>
}
    bc54:	bd08      	pop	{r3, pc}

0000bc56 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    bc56:	4288      	cmp	r0, r1
    bc58:	da00      	bge.n	bc5c <new_prio_for_inheritance+0x6>
    bc5a:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    bc5c:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    bc60:	db01      	blt.n	bc66 <new_prio_for_inheritance+0x10>
    bc62:	4608      	mov	r0, r1
    bc64:	4770      	bx	lr
    bc66:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    bc6a:	4770      	bx	lr

0000bc6c <adjust_owner_prio>:
{
    bc6c:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    bc6e:	6880      	ldr	r0, [r0, #8]
    bc70:	f990 300e 	ldrsb.w	r3, [r0, #14]
    bc74:	428b      	cmp	r3, r1
    bc76:	d101      	bne.n	bc7c <adjust_owner_prio+0x10>
	return false;
    bc78:	2000      	movs	r0, #0
}
    bc7a:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    bc7c:	f7fc ffbc 	bl	8bf8 <z_set_prio>
    bc80:	e7fb      	b.n	bc7a <adjust_owner_prio+0xe>

0000bc82 <z_impl_k_mutex_init>:
{
    bc82:	4603      	mov	r3, r0
	mutex->owner = NULL;
    bc84:	2000      	movs	r0, #0
    bc86:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    bc88:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    bc8a:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    bc8c:	605b      	str	r3, [r3, #4]
}
    bc8e:	4770      	bx	lr

0000bc90 <thread_active_elsewhere>:
}
    bc90:	2000      	movs	r0, #0
    bc92:	4770      	bx	lr

0000bc94 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    bc94:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    bc98:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    bc9c:	4283      	cmp	r3, r0
    bc9e:	d001      	beq.n	bca4 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    bca0:	1ac0      	subs	r0, r0, r3
    bca2:	4770      	bx	lr
	return 0;
    bca4:	2000      	movs	r0, #0
}
    bca6:	4770      	bx	lr

0000bca8 <z_reschedule_irqlock>:
{
    bca8:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    bcaa:	4603      	mov	r3, r0
    bcac:	b920      	cbnz	r0, bcb8 <z_reschedule_irqlock+0x10>
    bcae:	f3ef 8205 	mrs	r2, IPSR
    bcb2:	b942      	cbnz	r2, bcc6 <z_reschedule_irqlock+0x1e>
    bcb4:	2201      	movs	r2, #1
    bcb6:	e000      	b.n	bcba <z_reschedule_irqlock+0x12>
    bcb8:	2200      	movs	r2, #0
	if (resched(key)) {
    bcba:	b932      	cbnz	r2, bcca <z_reschedule_irqlock+0x22>
    bcbc:	f383 8811 	msr	BASEPRI, r3
    bcc0:	f3bf 8f6f 	isb	sy
}
    bcc4:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    bcc6:	2200      	movs	r2, #0
    bcc8:	e7f7      	b.n	bcba <z_reschedule_irqlock+0x12>
    bcca:	4618      	mov	r0, r3
    bccc:	f7f7 f8dc 	bl	2e88 <arch_swap>
	return ret;
    bcd0:	e7f8      	b.n	bcc4 <z_reschedule_irqlock+0x1c>

0000bcd2 <z_priq_dumb_best>:
{
    bcd2:	4603      	mov	r3, r0
	return list->head == list;
    bcd4:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bcd6:	4283      	cmp	r3, r0
    bcd8:	d000      	beq.n	bcdc <z_priq_dumb_best+0xa>
}
    bcda:	4770      	bx	lr
	struct k_thread *thread = NULL;
    bcdc:	2000      	movs	r0, #0
	return thread;
    bcde:	e7fc      	b.n	bcda <z_priq_dumb_best+0x8>

0000bce0 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    bce0:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    bce2:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    bce4:	6083      	str	r3, [r0, #8]
}
    bce6:	4770      	bx	lr

0000bce8 <remove_timeout>:
{
    bce8:	b510      	push	{r4, lr}
    bcea:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    bcec:	f7fd fce4 	bl	96b8 <next>
    bcf0:	b148      	cbz	r0, bd06 <remove_timeout+0x1e>
    bcf2:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    bcf4:	6920      	ldr	r0, [r4, #16]
    bcf6:	6961      	ldr	r1, [r4, #20]
    bcf8:	6913      	ldr	r3, [r2, #16]
    bcfa:	181b      	adds	r3, r3, r0
    bcfc:	6950      	ldr	r0, [r2, #20]
    bcfe:	eb41 0100 	adc.w	r1, r1, r0
    bd02:	6113      	str	r3, [r2, #16]
    bd04:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    bd06:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    bd08:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    bd0a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    bd0c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    bd0e:	2300      	movs	r3, #0
    bd10:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    bd12:	6063      	str	r3, [r4, #4]
}
    bd14:	bd10      	pop	{r4, pc}

0000bd16 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    bd16:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    bd18:	f7fd ffca 	bl	9cb0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    bd1c:	bd08      	pop	{r3, pc}

0000bd1e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    bd1e:	b900      	cbnz	r0, bd22 <z_impl_k_busy_wait+0x4>
    bd20:	4770      	bx	lr
{
    bd22:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    bd24:	f7f7 ffd4 	bl	3cd0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    bd28:	bd08      	pop	{r3, pc}

0000bd2a <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    bd2a:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    bd2c:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    bd2e:	2300      	movs	r3, #0
    bd30:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    bd32:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    bd36:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    bd38:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    bd3a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    bd3c:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    bd3e:	6343      	str	r3, [r0, #52]	; 0x34
}
    bd40:	4770      	bx	lr

0000bd42 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    bd42:	b510      	push	{r4, lr}
    bd44:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    bd46:	f7fd fdd9 	bl	98fc <z_abort_timeout>

	if (inactive) {
    bd4a:	b9a0      	cbnz	r0, bd76 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    bd4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bd4e:	b10b      	cbz	r3, bd54 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    bd50:	4620      	mov	r0, r4
    bd52:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    bd54:	f104 0018 	add.w	r0, r4, #24
    bd58:	f7fd f95a 	bl	9010 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    bd5c:	b158      	cbz	r0, bd76 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    bd5e:	f7fc fd3f 	bl	87e0 <z_ready_thread>
	__asm__ volatile(
    bd62:	f04f 0320 	mov.w	r3, #32
    bd66:	f3ef 8011 	mrs	r0, BASEPRI
    bd6a:	f383 8812 	msr	BASEPRI_MAX, r3
    bd6e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    bd72:	f7ff ff99 	bl	bca8 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    bd76:	bd10      	pop	{r4, pc}

0000bd78 <k_heap_init>:
{
    bd78:	b510      	push	{r4, lr}
    bd7a:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    bd7e:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    bd80:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    bd82:	f7f5 fa51 	bl	1228 <sys_heap_init>
}
    bd86:	bd10      	pop	{r4, pc}

0000bd88 <memcpy>:
    bd88:	440a      	add	r2, r1
    bd8a:	4291      	cmp	r1, r2
    bd8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    bd90:	d100      	bne.n	bd94 <memcpy+0xc>
    bd92:	4770      	bx	lr
    bd94:	b510      	push	{r4, lr}
    bd96:	f811 4b01 	ldrb.w	r4, [r1], #1
    bd9a:	f803 4f01 	strb.w	r4, [r3, #1]!
    bd9e:	4291      	cmp	r1, r2
    bda0:	d1f9      	bne.n	bd96 <memcpy+0xe>
    bda2:	bd10      	pop	{r4, pc}

0000bda4 <memset>:
    bda4:	4402      	add	r2, r0
    bda6:	4603      	mov	r3, r0
    bda8:	4293      	cmp	r3, r2
    bdaa:	d100      	bne.n	bdae <memset+0xa>
    bdac:	4770      	bx	lr
    bdae:	f803 1b01 	strb.w	r1, [r3], #1
    bdb2:	e7f9      	b.n	bda8 <memset+0x4>

0000bdb4 <_calloc_r>:
    bdb4:	b538      	push	{r3, r4, r5, lr}
    bdb6:	fb02 f501 	mul.w	r5, r2, r1
    bdba:	4629      	mov	r1, r5
    bdbc:	f7fe f942 	bl	a044 <_malloc_r>
    bdc0:	4604      	mov	r4, r0
    bdc2:	b118      	cbz	r0, bdcc <_calloc_r+0x18>
    bdc4:	462a      	mov	r2, r5
    bdc6:	2100      	movs	r1, #0
    bdc8:	f7ff ffec 	bl	bda4 <memset>
    bdcc:	4620      	mov	r0, r4
    bdce:	bd38      	pop	{r3, r4, r5, pc}

0000bdd0 <strncpy>:
    bdd0:	b510      	push	{r4, lr}
    bdd2:	3901      	subs	r1, #1
    bdd4:	4603      	mov	r3, r0
    bdd6:	b132      	cbz	r2, bde6 <strncpy+0x16>
    bdd8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    bddc:	f803 4b01 	strb.w	r4, [r3], #1
    bde0:	3a01      	subs	r2, #1
    bde2:	2c00      	cmp	r4, #0
    bde4:	d1f7      	bne.n	bdd6 <strncpy+0x6>
    bde6:	441a      	add	r2, r3
    bde8:	2100      	movs	r1, #0
    bdea:	4293      	cmp	r3, r2
    bdec:	d100      	bne.n	bdf0 <strncpy+0x20>
    bdee:	bd10      	pop	{r4, pc}
    bdf0:	f803 1b01 	strb.w	r1, [r3], #1
    bdf4:	e7f9      	b.n	bdea <strncpy+0x1a>

0000bdf6 <strnlen>:
    bdf6:	b510      	push	{r4, lr}
    bdf8:	4602      	mov	r2, r0
    bdfa:	4401      	add	r1, r0
    bdfc:	428a      	cmp	r2, r1
    bdfe:	4613      	mov	r3, r2
    be00:	d003      	beq.n	be0a <strnlen+0x14>
    be02:	781c      	ldrb	r4, [r3, #0]
    be04:	3201      	adds	r2, #1
    be06:	2c00      	cmp	r4, #0
    be08:	d1f8      	bne.n	bdfc <strnlen+0x6>
    be0a:	1a18      	subs	r0, r3, r0
    be0c:	bd10      	pop	{r4, pc}
	...

0000be10 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    be10:	f7f9 bde0 	b.w	59d4 <SystemInit>
