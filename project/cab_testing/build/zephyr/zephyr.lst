
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	a0 60 00 20 69 37 00 00 b3 aa 00 00 21 37 00 00     .`. i7......!7..
  10:	21 37 00 00 21 37 00 00 21 37 00 00 00 00 00 00     !7..!7..!7......
	...
  2c:	ed 2e 00 00 21 37 00 00 00 00 00 00 95 2e 00 00     ....!7..........
  3c:	21 37 00 00                                         !7..

00000040 <_irq_vector_table>:
  40:	cd 2f 00 00 cd 2f 00 00 cd 2f 00 00 cd 2f 00 00     ./.../.../.../..
  50:	cd 2f 00 00 cd 2f 00 00 cd 2f 00 00 cd 2f 00 00     ./.../.../.../..
  60:	cd 2f 00 00 cd 2f 00 00 cd 2f 00 00 cd 2f 00 00     ./.../.../.../..
  70:	cd 2f 00 00 cd 2f 00 00 cd 2f 00 00 cd 2f 00 00     ./.../.../.../..
  80:	cd 2f 00 00 cd 2f 00 00 cd 2f 00 00 cd 2f 00 00     ./.../.../.../..
  90:	cd 2f 00 00 cd 2f 00 00 cd 2f 00 00 cd 2f 00 00     ./.../.../.../..
  a0:	cd 2f 00 00 cd 2f 00 00 cd 2f 00 00 cd 2f 00 00     ./.../.../.../..
  b0:	cd 2f 00 00 cd 2f 00 00 cd 2f 00 00 cd 2f 00 00     ./.../.../.../..
  c0:	cd 2f 00 00 cd 2f 00 00 cd 2f 00 00 cd 2f 00 00     ./.../.../.../..
  d0:	cd 2f 00 00 cd 2f 00 00 cd 2f 00 00 cd 2f 00 00     ./.../.../.../..
  e0:	cd 2f 00 00 cd 2f 00 00 cd 2f 00 00 cd 2f 00 00     ./.../.../.../..
  f0:	cd 2f 00 00 cd 2f 00 00 cd 2f 00 00 cd 2f 00 00     ./.../.../.../..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16b>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x75>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x71>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1ba:	d203      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e2:	b902      	cbnz	r2, 1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdd>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     20e:	d204      	bcs.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x167>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     23a:	d204      	bcs.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5b>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     286:	d204      	bcs.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2b2:	d204      	bcs.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x125>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x151>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xad>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd9>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17b>
     2dc:	b10e      	cbz	r6, 2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1a3>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x189>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x193>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x261>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     356:	d204      	bcs.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x265>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     382:	d204      	bcs.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23b>
     3a2:	d106      	bne.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x269>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19b>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1f5>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x221>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x69>

000003da <strlen>:
     3da:	4603      	mov	r3, r0
     3dc:	f813 2b01 	ldrb.w	r2, [r3], #1
     3e0:	2a00      	cmp	r2, #0
     3e2:	d1fb      	bne.n	3dc <strlen+0x2>
     3e4:	1a18      	subs	r0, r3, r0
     3e6:	3801      	subs	r0, #1
     3e8:	4770      	bx	lr
	...

000003ec <consumers_code>:

}


void consumers_code(void *argA , void *argB, void *argC)
{
     3ec:	b538      	push	{r3, r4, r5, lr}
     3ee:	e01f      	b.n	430 <CONFIG_FLASH_SIZE+0x30>
    else{
        /* check if image and vertical image are the same*/
        for(int i = 0; i < IMGWIDTH; i++){
            for(int j = 0; j < IMGWIDTH; j++){
                if(img[i*IMGWIDTH+j] != vertical_guide_image_data[i][j]){
                    printk("Error\n");
     3f0:	4817      	ldr	r0, [pc, #92]	; (450 <CONFIG_FLASH_SIZE+0x50>)
     3f2:	f00a f97a 	bl	a6ea <printk>
        for(int i = 0; i < IMGWIDTH; i++){
     3f6:	3401      	adds	r4, #1
     3f8:	2c7f      	cmp	r4, #127	; 0x7f
     3fa:	dc0f      	bgt.n	41c <CONFIG_FLASH_SIZE+0x1c>
            for(int j = 0; j < IMGWIDTH; j++){
     3fc:	2300      	movs	r3, #0
     3fe:	2b7f      	cmp	r3, #127	; 0x7f
     400:	dcf9      	bgt.n	3f6 <consumers_code+0xa>
                if(img[i*IMGWIDTH+j] != vertical_guide_image_data[i][j]){
     402:	eb03 12c4 	add.w	r2, r3, r4, lsl #7
     406:	5ca9      	ldrb	r1, [r5, r2]
     408:	4a12      	ldr	r2, [pc, #72]	; (454 <CONFIG_FLASH_SIZE+0x54>)
     40a:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
     40e:	5cd2      	ldrb	r2, [r2, r3]
     410:	4291      	cmp	r1, r2
     412:	d1ed      	bne.n	3f0 <consumers_code+0x4>
            for(int j = 0; j < IMGWIDTH; j++){
     414:	3301      	adds	r3, #1
     416:	e7f2      	b.n	3fe <consumers_code+0x12>
        for(int i = 0; i < IMGWIDTH; i++){
     418:	2400      	movs	r4, #0
     41a:	e7ed      	b.n	3f8 <consumers_code+0xc>
        }

    }

    /* unget image from CAB*/
    unget((void*)img, image_cab);
     41c:	4b0e      	ldr	r3, [pc, #56]	; (458 <CONFIG_FLASH_SIZE+0x58>)
     41e:	6819      	ldr	r1, [r3, #0]
     420:	4628      	mov	r0, r5
     422:	f00a f8f2 	bl	a60a <unget>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     426:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     42a:	2100      	movs	r1, #0
     42c:	f009 f816 	bl	945c <z_impl_k_sleep>
    uint8_t *img = (uint8_t *)get_mes(image_cab);
     430:	4b09      	ldr	r3, [pc, #36]	; (458 <CONFIG_FLASH_SIZE+0x58>)
     432:	6818      	ldr	r0, [r3, #0]
     434:	f00a f8c0 	bl	a5b8 <get_mes>
     438:	4605      	mov	r5, r0
    if(img[126*IMGWIDTH+60] == 128){
     43a:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
     43e:	f893 3f3c 	ldrb.w	r3, [r3, #3900]	; 0xf3c
     442:	2b80      	cmp	r3, #128	; 0x80
     444:	d1e8      	bne.n	418 <CONFIG_FLASH_SIZE+0x18>
        printk("Task consumer obstacle detected \n");
     446:	4805      	ldr	r0, [pc, #20]	; (45c <CONFIG_FLASH_SIZE+0x5c>)
     448:	f00a f94f 	bl	a6ea <printk>
     44c:	e7e6      	b.n	41c <CONFIG_FLASH_SIZE+0x1c>
     44e:	bf00      	nop
     450:	0000c16c 	.word	0x0000c16c
     454:	20000000 	.word	0x20000000
     458:	200046dc 	.word	0x200046dc
     45c:	0000c148 	.word	0x0000c148

00000460 <producers_code>:
{
     460:	b538      	push	{r3, r4, r5, lr}
    printk("Thread producer init \n");
     462:	4811      	ldr	r0, [pc, #68]	; (4a8 <producers_code+0x48>)
     464:	f00a f941 	bl	a6ea <printk>
        uint8_t *img = (uint8_t *)reserve(image_cab);
     468:	4d10      	ldr	r5, [pc, #64]	; (4ac <producers_code+0x4c>)
     46a:	6828      	ldr	r0, [r5, #0]
     46c:	f00a f861 	bl	a532 <reserve>
     470:	4604      	mov	r4, r0
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
     472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     476:	490e      	ldr	r1, [pc, #56]	; (4b0 <producers_code+0x50>)
     478:	f00b fc70 	bl	bd5c <memcpy>
        printk("Task producer insert obstacle \n");
     47c:	480d      	ldr	r0, [pc, #52]	; (4b4 <producers_code+0x54>)
     47e:	f00a f934 	bl	a6ea <printk>
        img[126*IMGWIDTH+60] = 128;
     482:	f504 5340 	add.w	r3, r4, #12288	; 0x3000
     486:	2280      	movs	r2, #128	; 0x80
     488:	f883 2f3c 	strb.w	r2, [r3, #3900]	; 0xf3c
        put_mes((void*)img, image_cab);
     48c:	6829      	ldr	r1, [r5, #0]
     48e:	4620      	mov	r0, r4
     490:	f00a f871 	bl	a576 <put_mes>
        printk("Task producer put image to CAB \n");
     494:	4808      	ldr	r0, [pc, #32]	; (4b8 <producers_code+0x58>)
     496:	f00a f928 	bl	a6ea <printk>
     49a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     49e:	2100      	movs	r1, #0
     4a0:	f008 ffdc 	bl	945c <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     4a4:	e7e0      	b.n	468 <producers_code+0x8>
     4a6:	bf00      	nop
     4a8:	0000c174 	.word	0x0000c174
     4ac:	200046dc 	.word	0x200046dc
     4b0:	20000000 	.word	0x20000000
     4b4:	0000c18c 	.word	0x0000c18c
     4b8:	0000c1ac 	.word	0x0000c1ac

000004bc <main>:
void main(void) {
     4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4be:	b089      	sub	sp, #36	; 0x24
    uint8_t **img1 = (uint8_t **)malloc(IMGWIDTH * sizeof(uint8_t *));
     4c0:	f44f 7000 	mov.w	r0, #512	; 0x200
     4c4:	f009 fda0 	bl	a008 <malloc>
     4c8:	4604      	mov	r4, r0
    for (uint8_t j = 0; j < IMGWIDTH; j++)
     4ca:	2500      	movs	r5, #0
     4cc:	e006      	b.n	4dc <main+0x20>
        img1[j] = (uint8_t *)malloc(IMGWIDTH * sizeof(uint8_t));
     4ce:	2080      	movs	r0, #128	; 0x80
     4d0:	f009 fd9a 	bl	a008 <malloc>
     4d4:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
    for (uint8_t j = 0; j < IMGWIDTH; j++)
     4d8:	3501      	adds	r5, #1
     4da:	b2ed      	uxtb	r5, r5
     4dc:	f015 0f80 	tst.w	r5, #128	; 0x80
     4e0:	d0f5      	beq.n	4ce <main+0x12>
    for (size_t i = 0; i < IMGWIDTH; i++)
     4e2:	2100      	movs	r1, #0
     4e4:	e00a      	b.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
            img1[i][j] = vertical_guide_image_data[i][j];
     4e6:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
     4ea:	4a21      	ldr	r2, [pc, #132]	; (570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>)
     4ec:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
     4f0:	5cd2      	ldrb	r2, [r2, r3]
     4f2:	54c2      	strb	r2, [r0, r3]
        for (size_t j = 0; j < IMGWIDTH; j++)
     4f4:	3301      	adds	r3, #1
     4f6:	2b7f      	cmp	r3, #127	; 0x7f
     4f8:	d9f5      	bls.n	4e6 <main+0x2a>
    for (size_t i = 0; i < IMGWIDTH; i++)
     4fa:	3101      	adds	r1, #1
     4fc:	297f      	cmp	r1, #127	; 0x7f
     4fe:	d801      	bhi.n	504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
        for (size_t j = 0; j < IMGWIDTH; j++)
     500:	2300      	movs	r3, #0
     502:	e7f8      	b.n	4f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe>
    image_cab = open_cab("image cab", N_PRODUCERS+N_CONSUMERS+1, IMGWIDTH*IMGWIDTH, (void*)img1);
     504:	4623      	mov	r3, r4
     506:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     50a:	2103      	movs	r1, #3
     50c:	4819      	ldr	r0, [pc, #100]	; (574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>)
     50e:	f009 ffd0 	bl	a4b2 <open_cab>
     512:	4b19      	ldr	r3, [pc, #100]	; (578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>)
     514:	6018      	str	r0, [r3, #0]
    printk("Cab initialized\n");
     516:	4819      	ldr	r0, [pc, #100]	; (57c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x94>)
     518:	f00a f8e7 	bl	a6ea <printk>
    p1_tid = k_thread_create(&p1_data, p1_stack, K_THREAD_STACK_SIZEOF(p1_stack), producers_code, NULL, NULL, NULL, 1, 0, K_NO_WAIT);
     51c:	2600      	movs	r6, #0
     51e:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     520:	e9cd 6706 	strd	r6, r7, [sp, #24]
     524:	2400      	movs	r4, #0
     526:	9404      	str	r4, [sp, #16]
     528:	2501      	movs	r5, #1
     52a:	9503      	str	r5, [sp, #12]
     52c:	9402      	str	r4, [sp, #8]
     52e:	9401      	str	r4, [sp, #4]
     530:	9400      	str	r4, [sp, #0]
     532:	4b13      	ldr	r3, [pc, #76]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
     534:	f44f 6280 	mov.w	r2, #1024	; 0x400
     538:	4912      	ldr	r1, [pc, #72]	; (584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>)
     53a:	4813      	ldr	r0, [pc, #76]	; (588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>)
     53c:	f007 f9c2 	bl	78c4 <z_impl_k_thread_create>
     540:	4b12      	ldr	r3, [pc, #72]	; (58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>)
     542:	6018      	str	r0, [r3, #0]
    printk("Thread producer created \n");
     544:	4812      	ldr	r0, [pc, #72]	; (590 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa8>)
     546:	f00a f8d0 	bl	a6ea <printk>
     54a:	e9cd 6706 	strd	r6, r7, [sp, #24]
     54e:	9404      	str	r4, [sp, #16]
     550:	9503      	str	r5, [sp, #12]
     552:	9402      	str	r4, [sp, #8]
     554:	9401      	str	r4, [sp, #4]
     556:	9400      	str	r4, [sp, #0]
     558:	4b0e      	ldr	r3, [pc, #56]	; (594 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xac>)
     55a:	f44f 6280 	mov.w	r2, #1024	; 0x400
     55e:	490e      	ldr	r1, [pc, #56]	; (598 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb0>)
     560:	480e      	ldr	r0, [pc, #56]	; (59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>)
     562:	f007 f9af 	bl	78c4 <z_impl_k_thread_create>
    c1_tid = k_thread_create(&c1_data, c1_stack, K_THREAD_STACK_SIZEOF(c1_stack), consumers_code, NULL, NULL, NULL, 1, 0, K_NO_WAIT);
     566:	4b0e      	ldr	r3, [pc, #56]	; (5a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb8>)
     568:	6018      	str	r0, [r3, #0]
} 
     56a:	b009      	add	sp, #36	; 0x24
     56c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     56e:	bf00      	nop
     570:	20000000 	.word	0x20000000
     574:	0000c1d0 	.word	0x0000c1d0
     578:	200046dc 	.word	0x200046dc
     57c:	0000c1dc 	.word	0x0000c1dc
     580:	00000461 	.word	0x00000461
     584:	20005460 	.word	0x20005460
     588:	200042f0 	.word	0x200042f0
     58c:	200046e0 	.word	0x200046e0
     590:	0000c1f0 	.word	0x0000c1f0
     594:	000003ed 	.word	0x000003ed
     598:	20005880 	.word	0x20005880
     59c:	20004240 	.word	0x20004240
     5a0:	200046d8 	.word	0x200046d8

000005a4 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5a8:	b08d      	sub	sp, #52	; 0x34
     5aa:	9205      	str	r2, [sp, #20]
     5ac:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     5ae:	4613      	mov	r3, r2
     5b0:	f002 0204 	and.w	r2, r2, #4
     5b4:	9201      	str	r2, [sp, #4]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     5b6:	f3c3 02c2 	ubfx	r2, r3, #3, #3

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     5ba:	f010 0303 	ands.w	r3, r0, #3
     5be:	9302      	str	r3, [sp, #8]
     5c0:	f040 8293 	bne.w	aea <CONFIG_ISR_STACK_SIZE+0x2ea>
     5c4:	4607      	mov	r7, r0
     5c6:	468a      	mov	sl, r1
     5c8:	3201      	adds	r2, #1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     5ca:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     5cc:	2800      	cmp	r0, #0
     5ce:	d041      	beq.n	654 <cbvprintf_package+0xb0>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     5d0:	b127      	cbz	r7, 5dc <cbvprintf_package+0x38>
     5d2:	1be3      	subs	r3, r4, r7
     5d4:	3304      	adds	r3, #4
     5d6:	4553      	cmp	r3, sl
     5d8:	f200 828a 	bhi.w	af0 <CONFIG_ISR_STACK_SIZE+0x2f0>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
     5dc:	9b03      	ldr	r3, [sp, #12]
     5de:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     5e0:	f8dd b008 	ldr.w	fp, [sp, #8]
     5e4:	f8cd b010 	str.w	fp, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     5e8:	f8cd b018 	str.w	fp, [sp, #24]
	bool parsing = false;
     5ec:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
     5ee:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
     5f2:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     5f4:	b10f      	cbz	r7, 5fa <cbvprintf_package+0x56>
				*(const char **)buf = s;
     5f6:	9b03      	ldr	r3, [sp, #12]
     5f8:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     5fa:	1e53      	subs	r3, r2, #1
     5fc:	9307      	str	r3, [sp, #28]
     5fe:	2a00      	cmp	r2, #0
     600:	f340 80b7 	ble.w	772 <cbvprintf_package+0x1ce>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     604:	9b05      	ldr	r3, [sp, #20]
     606:	f013 0202 	ands.w	r2, r3, #2
     60a:	d021      	beq.n	650 <cbvprintf_package+0xac>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     60c:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     60e:	1be1      	subs	r1, r4, r7
     610:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     612:	b11a      	cbz	r2, 61c <cbvprintf_package+0x78>
     614:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     618:	f080 80bf 	bcs.w	79a <cbvprintf_package+0x1f6>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     61c:	f1bb 0f0f 	cmp.w	fp, #15
     620:	f200 80ce 	bhi.w	7c0 <cbvprintf_package+0x21c>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
     624:	2f00      	cmp	r7, #0
     626:	f000 80e2 	beq.w	7ee <cbvprintf_package+0x24a>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
     62a:	b2db      	uxtb	r3, r3
     62c:	aa0c      	add	r2, sp, #48	; 0x30
     62e:	445a      	add	r2, fp
     630:	f802 3c10 	strb.w	r3, [r2, #-16]
					if (is_ro) {
     634:	2800      	cmp	r0, #0
     636:	f000 80d6 	beq.w	7e6 <cbvprintf_package+0x242>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     63a:	f063 037f 	orn	r3, r3, #127	; 0x7f
     63e:	aa0c      	add	r2, sp, #48	; 0x30
     640:	445a      	add	r2, fp
     642:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
     646:	9b04      	ldr	r3, [sp, #16]
     648:	3301      	adds	r3, #1
     64a:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
     64c:	f10b 0b01 	add.w	fp, fp, #1
			}
			buf += sizeof(char *);
     650:	3404      	adds	r4, #4
     652:	e0f6      	b.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     654:	f001 0a07 	and.w	sl, r1, #7
     658:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     65a:	f1ca 0a08 	rsb	sl, sl, #8
     65e:	e7b7      	b.n	5d0 <cbvprintf_package+0x2c>
			if (*fmt == '%') {
     660:	2b25      	cmp	r3, #37	; 0x25
     662:	f040 80ed 	bne.w	840 <CONFIG_ISR_STACK_SIZE+0x40>
				parsing = true;
     666:	2601      	movs	r6, #1
				align = VA_STACK_ALIGN(int);
     668:	f04f 0804 	mov.w	r8, #4
				size = sizeof(int);
     66c:	46c1      	mov	r9, r8
			continue;
     66e:	e0e7      	b.n	840 <CONFIG_ISR_STACK_SIZE+0x40>
			align = VA_STACK_ALIGN(intmax_t);
     670:	f04f 0808 	mov.w	r8, #8
			size = sizeof(intmax_t);
     674:	46c1      	mov	r9, r8
			continue;
     676:	e0e3      	b.n	840 <CONFIG_ISR_STACK_SIZE+0x40>
			align = VA_STACK_ALIGN(size_t);
     678:	f04f 0804 	mov.w	r8, #4
			size = sizeof(size_t);
     67c:	46c1      	mov	r9, r8
			continue;
     67e:	e0df      	b.n	840 <CONFIG_ISR_STACK_SIZE+0x40>
			align = VA_STACK_ALIGN(ptrdiff_t);
     680:	f04f 0804 	mov.w	r8, #4
			size = sizeof(ptrdiff_t);
     684:	46c1      	mov	r9, r8
			continue;
     686:	e0db      	b.n	840 <CONFIG_ISR_STACK_SIZE+0x40>
			if (fmt[-1] == 'l') {
     688:	782a      	ldrb	r2, [r5, #0]
     68a:	2a6c      	cmp	r2, #108	; 0x6c
     68c:	d026      	beq.n	6dc <cbvprintf_package+0x138>
			parsing = false;
     68e:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
     690:	eb04 0208 	add.w	r2, r4, r8
     694:	3a01      	subs	r2, #1
     696:	f1c8 0100 	rsb	r1, r8, #0
     69a:	400a      	ands	r2, r1
     69c:	4614      	mov	r4, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     69e:	b127      	cbz	r7, 6aa <cbvprintf_package+0x106>
     6a0:	1bd1      	subs	r1, r2, r7
     6a2:	4449      	add	r1, r9
     6a4:	458a      	cmp	sl, r1
     6a6:	f0c0 8226 	bcc.w	af6 <CONFIG_ISR_STACK_SIZE+0x2f6>
		if (*fmt == 's') {
     6aa:	2b73      	cmp	r3, #115	; 0x73
     6ac:	d059      	beq.n	762 <cbvprintf_package+0x1be>
		} else if (size == sizeof(int)) {
     6ae:	f1b9 0f04 	cmp.w	r9, #4
     6b2:	f000 80a8 	beq.w	806 <CONFIG_ISR_STACK_SIZE+0x6>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     6b6:	f1b9 0f08 	cmp.w	r9, #8
     6ba:	f040 80ac 	bne.w	816 <CONFIG_ISR_STACK_SIZE+0x16>
			long long v = va_arg(ap, long long);
     6be:	9b16      	ldr	r3, [sp, #88]	; 0x58
     6c0:	3307      	adds	r3, #7
     6c2:	f023 0307 	bic.w	r3, r3, #7
     6c6:	f103 0108 	add.w	r1, r3, #8
     6ca:	9116      	str	r1, [sp, #88]	; 0x58
     6cc:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
     6d0:	b10f      	cbz	r7, 6d6 <cbvprintf_package+0x132>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     6d2:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
     6d6:	f102 0408 	add.w	r4, r2, #8
     6da:	e0b1      	b.n	840 <CONFIG_ISR_STACK_SIZE+0x40>
				if (fmt[-2] == 'l') {
     6dc:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
     6e0:	2a6c      	cmp	r2, #108	; 0x6c
     6e2:	d004      	beq.n	6ee <cbvprintf_package+0x14a>
			parsing = false;
     6e4:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long);
     6e6:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long);
     6ea:	46c1      	mov	r9, r8
     6ec:	e7d0      	b.n	690 <cbvprintf_package+0xec>
			parsing = false;
     6ee:	2600      	movs	r6, #0
					align = VA_STACK_ALIGN(long long);
     6f0:	f04f 0808 	mov.w	r8, #8
					size = sizeof(long long);
     6f4:	46c1      	mov	r9, r8
     6f6:	e7cb      	b.n	690 <cbvprintf_package+0xec>
			if (fmt[-1] == 'L') {
     6f8:	782b      	ldrb	r3, [r5, #0]
     6fa:	2b4c      	cmp	r3, #76	; 0x4c
     6fc:	d01c      	beq.n	738 <cbvprintf_package+0x194>
				v.d = va_arg(ap, double);
     6fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
     700:	3307      	adds	r3, #7
     702:	f023 0307 	bic.w	r3, r3, #7
     706:	f103 0208 	add.w	r2, r3, #8
     70a:	9216      	str	r2, [sp, #88]	; 0x58
     70c:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
     710:	1de2      	adds	r2, r4, #7
     712:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
     716:	b147      	cbz	r7, 72a <cbvprintf_package+0x186>
				if (BUF_OFFSET + size > len) {
     718:	1bd3      	subs	r3, r2, r7
     71a:	3308      	adds	r3, #8
     71c:	4553      	cmp	r3, sl
     71e:	d815      	bhi.n	74c <cbvprintf_package+0x1a8>
				} else if (fmt[-1] == 'L') {
     720:	782b      	ldrb	r3, [r5, #0]
     722:	2b4c      	cmp	r3, #76	; 0x4c
     724:	d015      	beq.n	752 <cbvprintf_package+0x1ae>
					*(double *)buf = v.d;
     726:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
     72a:	f102 0408 	add.w	r4, r2, #8
			parsing = false;
     72e:	2600      	movs	r6, #0
			continue;
     730:	f04f 0808 	mov.w	r8, #8
     734:	46c1      	mov	r9, r8
     736:	e083      	b.n	840 <CONFIG_ISR_STACK_SIZE+0x40>
				v.ld = va_arg(ap, long double);
     738:	9b16      	ldr	r3, [sp, #88]	; 0x58
     73a:	3307      	adds	r3, #7
     73c:	f023 0307 	bic.w	r3, r3, #7
     740:	f103 0208 	add.w	r2, r3, #8
     744:	9216      	str	r2, [sp, #88]	; 0x58
     746:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
     74a:	e7e1      	b.n	710 <cbvprintf_package+0x16c>
					return -ENOSPC;
     74c:	f06f 001b 	mvn.w	r0, #27
     750:	e1c8      	b.n	ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>
					*(long double *)buf = v.ld;
     752:	e9c2 0100 	strd	r0, r1, [r2]
     756:	e7e8      	b.n	72a <cbvprintf_package+0x186>
			parsing = false;
     758:	2600      	movs	r6, #0
			align = VA_STACK_ALIGN(void *);
     75a:	f04f 0804 	mov.w	r8, #4
			size = sizeof(void *);
     75e:	46c1      	mov	r9, r8
     760:	e796      	b.n	690 <cbvprintf_package+0xec>
			s = va_arg(ap, char *);
     762:	9b16      	ldr	r3, [sp, #88]	; 0x58
     764:	1d1a      	adds	r2, r3, #4
     766:	9216      	str	r2, [sp, #88]	; 0x58
     768:	681b      	ldr	r3, [r3, #0]
     76a:	9303      	str	r3, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     76c:	9a07      	ldr	r2, [sp, #28]
	while (*++fmt != '\0') {
     76e:	4665      	mov	r5, ip
     770:	e740      	b.n	5f4 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     772:	4bbb      	ldr	r3, [pc, #748]	; (a60 <CONFIG_ISR_STACK_SIZE+0x260>)
     774:	9a03      	ldr	r2, [sp, #12]
     776:	429a      	cmp	r2, r3
     778:	d304      	bcc.n	784 <cbvprintf_package+0x1e0>
     77a:	4bba      	ldr	r3, [pc, #744]	; (a64 <CONFIG_ISR_STACK_SIZE+0x264>)
     77c:	429a      	cmp	r2, r3
     77e:	d30a      	bcc.n	796 <cbvprintf_package+0x1f2>
     780:	2300      	movs	r3, #0
     782:	e000      	b.n	786 <cbvprintf_package+0x1e2>
     784:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     786:	2b00      	cmp	r3, #0
     788:	f47f af3c 	bne.w	604 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     78c:	9b05      	ldr	r3, [sp, #20]
     78e:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     792:	2000      	movs	r0, #0
     794:	e73b      	b.n	60e <cbvprintf_package+0x6a>
     796:	2301      	movs	r3, #1
     798:	e7f5      	b.n	786 <cbvprintf_package+0x1e2>
					__ASSERT(false, "String with too many arguments");
     79a:	4cb3      	ldr	r4, [pc, #716]	; (a68 <CONFIG_ISR_STACK_SIZE+0x268>)
     79c:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
     7a0:	4622      	mov	r2, r4
     7a2:	49b2      	ldr	r1, [pc, #712]	; (a6c <CONFIG_ISR_STACK_SIZE+0x26c>)
     7a4:	48b2      	ldr	r0, [pc, #712]	; (a70 <CONFIG_ISR_STACK_SIZE+0x270>)
     7a6:	f00a f8a9 	bl	a8fc <assert_print>
     7aa:	48b2      	ldr	r0, [pc, #712]	; (a74 <CONFIG_ISR_STACK_SIZE+0x274>)
     7ac:	f00a f8a6 	bl	a8fc <assert_print>
     7b0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
     7b4:	4620      	mov	r0, r4
     7b6:	f00a f89a 	bl	a8ee <assert_post_action>
					return -EINVAL;
     7ba:	f06f 0015 	mvn.w	r0, #21
     7be:	e191      	b.n	ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>
					__ASSERT(false, "str_ptr_pos[] too small");
     7c0:	4ca9      	ldr	r4, [pc, #676]	; (a68 <CONFIG_ISR_STACK_SIZE+0x268>)
     7c2:	f240 13f5 	movw	r3, #501	; 0x1f5
     7c6:	4622      	mov	r2, r4
     7c8:	49a8      	ldr	r1, [pc, #672]	; (a6c <CONFIG_ISR_STACK_SIZE+0x26c>)
     7ca:	48a9      	ldr	r0, [pc, #676]	; (a70 <CONFIG_ISR_STACK_SIZE+0x270>)
     7cc:	f00a f896 	bl	a8fc <assert_print>
     7d0:	48a9      	ldr	r0, [pc, #676]	; (a78 <CONFIG_ISR_STACK_SIZE+0x278>)
     7d2:	f00a f893 	bl	a8fc <assert_print>
     7d6:	f240 11f5 	movw	r1, #501	; 0x1f5
     7da:	4620      	mov	r0, r4
     7dc:	f00a f887 	bl	a8ee <assert_post_action>
					return -EINVAL;
     7e0:	f06f 0015 	mvn.w	r0, #21
     7e4:	e17e      	b.n	ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>
						s_rw_cnt++;
     7e6:	9b06      	ldr	r3, [sp, #24]
     7e8:	3301      	adds	r3, #1
     7ea:	9306      	str	r3, [sp, #24]
     7ec:	e72e      	b.n	64c <cbvprintf_package+0xa8>
				} else if (is_ro || rws_pos_en) {
     7ee:	b908      	cbnz	r0, 7f4 <cbvprintf_package+0x250>
     7f0:	9b01      	ldr	r3, [sp, #4]
     7f2:	b113      	cbz	r3, 7fa <cbvprintf_package+0x256>
					len += 1;
     7f4:	f10a 0a01 	add.w	sl, sl, #1
     7f8:	e728      	b.n	64c <cbvprintf_package+0xa8>
					len += strlen(s) + 1 + 1;
     7fa:	9803      	ldr	r0, [sp, #12]
     7fc:	f7ff fded 	bl	3da <strlen>
     800:	1c83      	adds	r3, r0, #2
     802:	449a      	add	sl, r3
     804:	e722      	b.n	64c <cbvprintf_package+0xa8>
			int v = va_arg(ap, int);
     806:	9b16      	ldr	r3, [sp, #88]	; 0x58
     808:	1d19      	adds	r1, r3, #4
     80a:	9116      	str	r1, [sp, #88]	; 0x58
     80c:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
     80e:	b107      	cbz	r7, 812 <CONFIG_ISR_STACK_SIZE+0x12>
				*(int *)buf = v;
     810:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
     812:	1d14      	adds	r4, r2, #4
     814:	e014      	b.n	840 <CONFIG_ISR_STACK_SIZE+0x40>
		} else {
			__ASSERT(false, "unexpected size %u", size);
     816:	4c94      	ldr	r4, [pc, #592]	; (a68 <CONFIG_ISR_STACK_SIZE+0x268>)
     818:	f240 2331 	movw	r3, #561	; 0x231
     81c:	4622      	mov	r2, r4
     81e:	4993      	ldr	r1, [pc, #588]	; (a6c <CONFIG_ISR_STACK_SIZE+0x26c>)
     820:	4893      	ldr	r0, [pc, #588]	; (a70 <CONFIG_ISR_STACK_SIZE+0x270>)
     822:	f00a f86b 	bl	a8fc <assert_print>
     826:	4649      	mov	r1, r9
     828:	4894      	ldr	r0, [pc, #592]	; (a7c <CONFIG_ISR_STACK_SIZE+0x27c>)
     82a:	f00a f867 	bl	a8fc <assert_print>
     82e:	f240 2131 	movw	r1, #561	; 0x231
     832:	4620      	mov	r0, r4
     834:	f00a f85b 	bl	a8ee <assert_post_action>
			return -EINVAL;
     838:	f06f 0015 	mvn.w	r0, #21
     83c:	e152      	b.n	ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>
		switch (*fmt) {
     83e:	2600      	movs	r6, #0
     840:	4665      	mov	r5, ip
	while (*++fmt != '\0') {
     842:	f105 0c01 	add.w	ip, r5, #1
     846:	786b      	ldrb	r3, [r5, #1]
     848:	2b00      	cmp	r3, #0
     84a:	f000 80c1 	beq.w	9d0 <CONFIG_ISR_STACK_SIZE+0x1d0>
		if (!parsing) {
     84e:	2e00      	cmp	r6, #0
     850:	f43f af06 	beq.w	660 <cbvprintf_package+0xbc>
		switch (*fmt) {
     854:	f1a3 0120 	sub.w	r1, r3, #32
     858:	295a      	cmp	r1, #90	; 0x5a
     85a:	d8f0      	bhi.n	83e <CONFIG_ISR_STACK_SIZE+0x3e>
     85c:	a201      	add	r2, pc, #4	; (adr r2, 864 <CONFIG_ISR_STACK_SIZE+0x64>)
     85e:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
     862:	bf00      	nop
     864:	00000841 	.word	0x00000841
     868:	0000083f 	.word	0x0000083f
     86c:	0000083f 	.word	0x0000083f
     870:	00000841 	.word	0x00000841
     874:	0000083f 	.word	0x0000083f
     878:	0000083f 	.word	0x0000083f
     87c:	0000083f 	.word	0x0000083f
     880:	0000083f 	.word	0x0000083f
     884:	0000083f 	.word	0x0000083f
     888:	0000083f 	.word	0x0000083f
     88c:	00000691 	.word	0x00000691
     890:	00000841 	.word	0x00000841
     894:	0000083f 	.word	0x0000083f
     898:	00000841 	.word	0x00000841
     89c:	00000841 	.word	0x00000841
     8a0:	0000083f 	.word	0x0000083f
     8a4:	00000841 	.word	0x00000841
     8a8:	00000841 	.word	0x00000841
     8ac:	00000841 	.word	0x00000841
     8b0:	00000841 	.word	0x00000841
     8b4:	00000841 	.word	0x00000841
     8b8:	00000841 	.word	0x00000841
     8bc:	00000841 	.word	0x00000841
     8c0:	00000841 	.word	0x00000841
     8c4:	00000841 	.word	0x00000841
     8c8:	00000841 	.word	0x00000841
     8cc:	0000083f 	.word	0x0000083f
     8d0:	0000083f 	.word	0x0000083f
     8d4:	0000083f 	.word	0x0000083f
     8d8:	0000083f 	.word	0x0000083f
     8dc:	0000083f 	.word	0x0000083f
     8e0:	0000083f 	.word	0x0000083f
     8e4:	0000083f 	.word	0x0000083f
     8e8:	000006f9 	.word	0x000006f9
     8ec:	0000083f 	.word	0x0000083f
     8f0:	0000083f 	.word	0x0000083f
     8f4:	0000083f 	.word	0x0000083f
     8f8:	000006f9 	.word	0x000006f9
     8fc:	000006f9 	.word	0x000006f9
     900:	000006f9 	.word	0x000006f9
     904:	0000083f 	.word	0x0000083f
     908:	0000083f 	.word	0x0000083f
     90c:	0000083f 	.word	0x0000083f
     910:	0000083f 	.word	0x0000083f
     914:	00000841 	.word	0x00000841
     918:	0000083f 	.word	0x0000083f
     91c:	0000083f 	.word	0x0000083f
     920:	0000083f 	.word	0x0000083f
     924:	0000083f 	.word	0x0000083f
     928:	0000083f 	.word	0x0000083f
     92c:	0000083f 	.word	0x0000083f
     930:	0000083f 	.word	0x0000083f
     934:	0000083f 	.word	0x0000083f
     938:	0000083f 	.word	0x0000083f
     93c:	0000083f 	.word	0x0000083f
     940:	0000083f 	.word	0x0000083f
     944:	00000689 	.word	0x00000689
     948:	0000083f 	.word	0x0000083f
     94c:	0000083f 	.word	0x0000083f
     950:	0000083f 	.word	0x0000083f
     954:	0000083f 	.word	0x0000083f
     958:	0000083f 	.word	0x0000083f
     95c:	0000083f 	.word	0x0000083f
     960:	0000083f 	.word	0x0000083f
     964:	0000083f 	.word	0x0000083f
     968:	000006f9 	.word	0x000006f9
     96c:	0000083f 	.word	0x0000083f
     970:	00000689 	.word	0x00000689
     974:	00000689 	.word	0x00000689
     978:	000006f9 	.word	0x000006f9
     97c:	000006f9 	.word	0x000006f9
     980:	000006f9 	.word	0x000006f9
     984:	00000841 	.word	0x00000841
     988:	00000689 	.word	0x00000689
     98c:	00000671 	.word	0x00000671
     990:	0000083f 	.word	0x0000083f
     994:	00000841 	.word	0x00000841
     998:	0000083f 	.word	0x0000083f
     99c:	00000759 	.word	0x00000759
     9a0:	00000689 	.word	0x00000689
     9a4:	00000759 	.word	0x00000759
     9a8:	0000083f 	.word	0x0000083f
     9ac:	0000083f 	.word	0x0000083f
     9b0:	00000759 	.word	0x00000759
     9b4:	00000681 	.word	0x00000681
     9b8:	00000689 	.word	0x00000689
     9bc:	0000083f 	.word	0x0000083f
     9c0:	0000083f 	.word	0x0000083f
     9c4:	00000689 	.word	0x00000689
     9c8:	0000083f 	.word	0x0000083f
     9cc:	00000679 	.word	0x00000679
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     9d0:	1be3      	subs	r3, r4, r7
     9d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     9d6:	d211      	bcs.n	9fc <CONFIG_ISR_STACK_SIZE+0x1fc>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     9d8:	b31f      	cbz	r7, a22 <CONFIG_ISR_STACK_SIZE+0x222>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     9da:	2200      	movs	r2, #0
     9dc:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	buf0[0] = BUF_OFFSET / sizeof(int);
     9de:	089b      	lsrs	r3, r3, #2
     9e0:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
     9e2:	9b01      	ldr	r3, [sp, #4]
     9e4:	b30b      	cbz	r3, a2a <CONFIG_ISR_STACK_SIZE+0x22a>
		/* Strings are appended, update location counter. */
		buf0[1] = 0;
		buf0[3] = s_rw_cnt;
     9e6:	9b06      	ldr	r3, [sp, #24]
     9e8:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		buf0[1] = s_rw_cnt;
		buf0[3] = 0;
	}

	buf0[2] = s_ro_cnt;
     9ea:	9b04      	ldr	r3, [sp, #16]
     9ec:	70bb      	strb	r3, [r7, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     9ee:	bbab      	cbnz	r3, a5c <CONFIG_ISR_STACK_SIZE+0x25c>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		if (rws_pos_en) {
			size = 0;
     9f0:	9d02      	ldr	r5, [sp, #8]
     9f2:	f8dd 9010 	ldr.w	r9, [sp, #16]
     9f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
     9fa:	e058      	b.n	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
		__ASSERT(false, "too many format args");
     9fc:	4c1a      	ldr	r4, [pc, #104]	; (a68 <CONFIG_ISR_STACK_SIZE+0x268>)
     9fe:	f240 233d 	movw	r3, #573	; 0x23d
     a02:	4622      	mov	r2, r4
     a04:	4919      	ldr	r1, [pc, #100]	; (a6c <CONFIG_ISR_STACK_SIZE+0x26c>)
     a06:	481a      	ldr	r0, [pc, #104]	; (a70 <CONFIG_ISR_STACK_SIZE+0x270>)
     a08:	f009 ff78 	bl	a8fc <assert_print>
     a0c:	481c      	ldr	r0, [pc, #112]	; (a80 <CONFIG_ISR_STACK_SIZE+0x280>)
     a0e:	f009 ff75 	bl	a8fc <assert_print>
     a12:	f240 213d 	movw	r1, #573	; 0x23d
     a16:	4620      	mov	r0, r4
     a18:	f009 ff69 	bl	a8ee <assert_post_action>
		return -EINVAL;
     a1c:	f06f 0015 	mvn.w	r0, #21
     a20:	e060      	b.n	ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     a22:	4453      	add	r3, sl
     a24:	f1a3 0008 	sub.w	r0, r3, #8
     a28:	e05c      	b.n	ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>
		buf0[1] = s_rw_cnt;
     a2a:	9b06      	ldr	r3, [sp, #24]
     a2c:	707b      	strb	r3, [r7, #1]
		buf0[3] = 0;
     a2e:	e7dc      	b.n	9ea <CONFIG_ISR_STACK_SIZE+0x1ea>
			*buf++ = pos;
     a30:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
     a34:	3301      	adds	r3, #1
     a36:	459b      	cmp	fp, r3
     a38:	d9da      	bls.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     a3a:	aa0c      	add	r2, sp, #48	; 0x30
     a3c:	441a      	add	r2, r3
     a3e:	f812 1c10 	ldrb.w	r1, [r2, #-16]
     a42:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
     a46:	2a00      	cmp	r2, #0
     a48:	daf4      	bge.n	a34 <CONFIG_ISR_STACK_SIZE+0x234>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     a4a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     a4e:	1be2      	subs	r2, r4, r7
     a50:	3201      	adds	r2, #1
     a52:	4592      	cmp	sl, r2
     a54:	d2ec      	bcs.n	a30 <CONFIG_ISR_STACK_SIZE+0x230>
				return -ENOSPC;
     a56:	f06f 001b 	mvn.w	r0, #27
     a5a:	e043      	b.n	ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>
		for (i = 0; i < s_idx; i++) {
     a5c:	9b02      	ldr	r3, [sp, #8]
     a5e:	e7ea      	b.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
     a60:	0000bdf0 	.word	0x0000bdf0
     a64:	0000e0fc 	.word	0x0000e0fc
     a68:	0000c20c 	.word	0x0000c20c
     a6c:	0000c914 	.word	0x0000c914
     a70:	0000c254 	.word	0x0000c254
     a74:	0000c274 	.word	0x0000c274
     a78:	0000c298 	.word	0x0000c298
     a7c:	0000c2b4 	.word	0x0000c2b4
     a80:	0000c2cc 	.word	0x0000c2cc
		if (rws_pos_en) {
     a84:	9b01      	ldr	r3, [sp, #4]
     a86:	b1f3      	cbz	r3, ac6 <CONFIG_ISR_STACK_SIZE+0x2c6>
			size = 0;
     a88:	9e02      	ldr	r6, [sp, #8]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     a8a:	1be3      	subs	r3, r4, r7
     a8c:	4433      	add	r3, r6
     a8e:	3301      	adds	r3, #1
     a90:	459a      	cmp	sl, r3
     a92:	d333      	bcc.n	afc <CONFIG_ISR_STACK_SIZE+0x2fc>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
     a94:	ab0c      	add	r3, sp, #48	; 0x30
     a96:	442b      	add	r3, r5
     a98:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     a9c:	f804 3b01 	strb.w	r3, [r4], #1
     aa0:	4632      	mov	r2, r6
     aa2:	4641      	mov	r1, r8
     aa4:	4620      	mov	r0, r4
     aa6:	f00b f959 	bl	bd5c <memcpy>
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
     aaa:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
     aac:	3501      	adds	r5, #1
     aae:	45ab      	cmp	fp, r5
     ab0:	d917      	bls.n	ae2 <CONFIG_ISR_STACK_SIZE+0x2e2>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     ab2:	f1b9 0f00 	cmp.w	r9, #0
     ab6:	d0e5      	beq.n	a84 <CONFIG_ISR_STACK_SIZE+0x284>
     ab8:	ab0c      	add	r3, sp, #48	; 0x30
     aba:	442b      	add	r3, r5
     abc:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
     ac0:	2b00      	cmp	r3, #0
     ac2:	dadf      	bge.n	a84 <CONFIG_ISR_STACK_SIZE+0x284>
     ac4:	e7f2      	b.n	aac <CONFIG_ISR_STACK_SIZE+0x2ac>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     ac6:	ab0c      	add	r3, sp, #48	; 0x30
     ac8:	442b      	add	r3, r5
     aca:	f813 3c10 	ldrb.w	r3, [r3, #-16]
     ace:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     ad2:	2200      	movs	r2, #0
     ad4:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
     ad8:	4640      	mov	r0, r8
     ada:	f7ff fc7e 	bl	3da <strlen>
     ade:	1c46      	adds	r6, r0, #1
     ae0:	e7d3      	b.n	a8a <CONFIG_ISR_STACK_SIZE+0x28a>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     ae2:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     ae4:	b00d      	add	sp, #52	; 0x34
     ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
     aea:	f06f 000d 	mvn.w	r0, #13
     aee:	e7f9      	b.n	ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>
		return -ENOSPC;
     af0:	f06f 001b 	mvn.w	r0, #27
     af4:	e7f6      	b.n	ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>
			return -ENOSPC;
     af6:	f06f 001b 	mvn.w	r0, #27
     afa:	e7f3      	b.n	ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>
			return -ENOSPC;
     afc:	f06f 001b 	mvn.w	r0, #27
     b00:	e7f0      	b.n	ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>
     b02:	bf00      	nop

00000b04 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     b04:	b538      	push	{r3, r4, r5, lr}
     b06:	4604      	mov	r4, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     b08:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
     b0a:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     b0e:	6081      	str	r1, [r0, #8]
	switch (method) {
     b10:	2b02      	cmp	r3, #2
     b12:	d903      	bls.n	b1c <sys_notify_finalize+0x18>
     b14:	2b03      	cmp	r3, #3
     b16:	d102      	bne.n	b1e <sys_notify_finalize+0x1a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     b18:	6800      	ldr	r0, [r0, #0]
		break;
     b1a:	e00e      	b.n	b3a <sys_notify_finalize+0x36>
	switch (method) {
     b1c:	b963      	cbnz	r3, b38 <sys_notify_finalize+0x34>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
     b1e:	4d08      	ldr	r5, [pc, #32]	; (b40 <sys_notify_finalize+0x3c>)
     b20:	2345      	movs	r3, #69	; 0x45
     b22:	462a      	mov	r2, r5
     b24:	4907      	ldr	r1, [pc, #28]	; (b44 <sys_notify_finalize+0x40>)
     b26:	4808      	ldr	r0, [pc, #32]	; (b48 <sys_notify_finalize+0x44>)
     b28:	f009 fee8 	bl	a8fc <assert_print>
     b2c:	2145      	movs	r1, #69	; 0x45
     b2e:	4628      	mov	r0, r5
     b30:	f009 fedd 	bl	a8ee <assert_post_action>
	sys_notify_generic_callback rv = NULL;
     b34:	2000      	movs	r0, #0
     b36:	e000      	b.n	b3a <sys_notify_finalize+0x36>
	switch (method) {
     b38:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     b3a:	2300      	movs	r3, #0
     b3c:	6063      	str	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     b3e:	bd38      	pop	{r3, r4, r5, pc}
     b40:	0000c2e4 	.word	0x0000c2e4
     b44:	0000c914 	.word	0x0000c914
     b48:	0000c254 	.word	0x0000c254

00000b4c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     b4c:	4b01      	ldr	r3, [pc, #4]	; (b54 <__printk_hook_install+0x8>)
     b4e:	6018      	str	r0, [r3, #0]
}
     b50:	4770      	bx	lr
     b52:	bf00      	nop
     b54:	20004000 	.word	0x20004000

00000b58 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
     b58:	b538      	push	{r3, r4, r5, lr}
     b5a:	4604      	mov	r4, r0
     b5c:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     b5e:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
     b60:	2a00      	cmp	r2, #0
     b62:	db14      	blt.n	b8e <process_complete+0x36>
     b64:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
     b68:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     b6a:	2a01      	cmp	r2, #1
     b6c:	d91b      	bls.n	ba6 <process_complete+0x4e>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
     b6e:	2b04      	cmp	r3, #4
     b70:	d050      	beq.n	c14 <process_complete+0xbc>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
     b72:	4c2f      	ldr	r4, [pc, #188]	; (c30 <process_complete+0xd8>)
     b74:	f240 131b 	movw	r3, #283	; 0x11b
     b78:	4622      	mov	r2, r4
     b7a:	492e      	ldr	r1, [pc, #184]	; (c34 <process_complete+0xdc>)
     b7c:	482e      	ldr	r0, [pc, #184]	; (c38 <process_complete+0xe0>)
     b7e:	f009 febd 	bl	a8fc <assert_print>
     b82:	f240 111b 	movw	r1, #283	; 0x11b
     b86:	4620      	mov	r0, r4
     b88:	f009 feb1 	bl	a8ee <assert_post_action>
	}
}
     b8c:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
     b8e:	e9d0 0100 	ldrd	r0, r1, [r0]
     b92:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     b96:	2300      	movs	r3, #0
     b98:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
     b9a:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
     b9c:	2101      	movs	r1, #1
     b9e:	4620      	mov	r0, r4
     ba0:	f009 fdb1 	bl	a706 <set_state>
     ba4:	e7f2      	b.n	b8c <process_complete+0x34>
		*clients = mgr->clients;
     ba6:	e9d0 0100 	ldrd	r0, r1, [r0]
     baa:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
     bae:	2200      	movs	r2, #0
     bb0:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
     bb2:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
     bb4:	2b06      	cmp	r3, #6
     bb6:	d00f      	beq.n	bd8 <process_complete+0x80>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     bb8:	2b05      	cmp	r3, #5
     bba:	d11d      	bne.n	bf8 <process_complete+0xa0>
			set_state(mgr, ONOFF_STATE_OFF);
     bbc:	2100      	movs	r1, #0
     bbe:	4620      	mov	r0, r4
     bc0:	f009 fda1 	bl	a706 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     bc4:	4620      	mov	r0, r4
     bc6:	f009 fdc5 	bl	a754 <process_recheck>
     bca:	2800      	cmp	r0, #0
     bcc:	d0de      	beq.n	b8c <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     bce:	8ba3      	ldrh	r3, [r4, #28]
     bd0:	f043 0320 	orr.w	r3, r3, #32
     bd4:	83a3      	strh	r3, [r4, #28]
     bd6:	e7d9      	b.n	b8c <process_complete+0x34>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     bd8:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     bdc:	b13b      	cbz	r3, bee <process_complete+0x96>
				mgr->refs += 1U;
     bde:	8be2      	ldrh	r2, [r4, #30]
     be0:	3201      	adds	r2, #1
     be2:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     be4:	2b00      	cmp	r3, #0
     be6:	d0f9      	beq.n	bdc <process_complete+0x84>
	return node->next;
     be8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     bea:	2b00      	cmp	r3, #0
     bec:	d1f6      	bne.n	bdc <process_complete+0x84>
			set_state(mgr, ONOFF_STATE_ON);
     bee:	2102      	movs	r1, #2
     bf0:	4620      	mov	r0, r4
     bf2:	f009 fd88 	bl	a706 <set_state>
     bf6:	e7e5      	b.n	bc4 <process_complete+0x6c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     bf8:	4d0d      	ldr	r5, [pc, #52]	; (c30 <process_complete+0xd8>)
     bfa:	f240 1309 	movw	r3, #265	; 0x109
     bfe:	462a      	mov	r2, r5
     c00:	490e      	ldr	r1, [pc, #56]	; (c3c <process_complete+0xe4>)
     c02:	480d      	ldr	r0, [pc, #52]	; (c38 <process_complete+0xe0>)
     c04:	f009 fe7a 	bl	a8fc <assert_print>
     c08:	f240 1109 	movw	r1, #265	; 0x109
     c0c:	4628      	mov	r0, r5
     c0e:	f009 fe6e 	bl	a8ee <assert_post_action>
     c12:	e7d3      	b.n	bbc <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
     c14:	2100      	movs	r1, #0
     c16:	f009 fd76 	bl	a706 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     c1a:	4620      	mov	r0, r4
     c1c:	f009 fd9a 	bl	a754 <process_recheck>
     c20:	2800      	cmp	r0, #0
     c22:	d0b3      	beq.n	b8c <process_complete+0x34>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     c24:	8ba3      	ldrh	r3, [r4, #28]
     c26:	f043 0320 	orr.w	r3, r3, #32
     c2a:	83a3      	strh	r3, [r4, #28]
     c2c:	e7ae      	b.n	b8c <process_complete+0x34>
     c2e:	bf00      	nop
     c30:	0000c308 	.word	0x0000c308
     c34:	0000c914 	.word	0x0000c914
     c38:	0000c254 	.word	0x0000c254
     c3c:	0000c32c 	.word	0x0000c32c

00000c40 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c44:	b083      	sub	sp, #12
     c46:	4604      	mov	r4, r0
     c48:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c4a:	8b83      	ldrh	r3, [r0, #28]
     c4c:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
     c50:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
     c54:	460d      	mov	r5, r1
     c56:	b131      	cbz	r1, c66 <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     c58:	f1b8 0f00 	cmp.w	r8, #0
     c5c:	d112      	bne.n	c84 <process_event+0x44>
	list->head = NULL;
     c5e:	2300      	movs	r3, #0
     c60:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     c62:	9301      	str	r3, [sp, #4]
}
     c64:	e0aa      	b.n	dbc <process_event+0x17c>
	__ASSERT_NO_MSG(evt != EVT_NOP);
     c66:	f8df 92e0 	ldr.w	r9, [pc, #736]	; f48 <process_event+0x308>
     c6a:	f240 1333 	movw	r3, #307	; 0x133
     c6e:	464a      	mov	r2, r9
     c70:	49b6      	ldr	r1, [pc, #728]	; (f4c <process_event+0x30c>)
     c72:	48b7      	ldr	r0, [pc, #732]	; (f50 <process_event+0x310>)
     c74:	f009 fe42 	bl	a8fc <assert_print>
     c78:	f240 1133 	movw	r1, #307	; 0x133
     c7c:	4648      	mov	r0, r9
     c7e:	f009 fe36 	bl	a8ee <assert_post_action>
     c82:	e7e9      	b.n	c58 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
     c84:	2d01      	cmp	r5, #1
     c86:	d013      	beq.n	cb0 <process_event+0x70>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     c88:	2d02      	cmp	r5, #2
     c8a:	d116      	bne.n	cba <process_event+0x7a>

			mgr->flags |= ONOFF_FLAG_RECHECK;
     c8c:	8ba3      	ldrh	r3, [r4, #28]
     c8e:	f043 0320 	orr.w	r3, r3, #32
     c92:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     c94:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     c96:	4620      	mov	r0, r4
     c98:	f006 fcdc 	bl	7654 <z_spin_unlock_valid>
     c9c:	2800      	cmp	r0, #0
     c9e:	f000 819c 	beq.w	fda <process_event+0x39a>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     ca2:	f386 8811 	msr	BASEPRI, r6
     ca6:	f3bf 8f6f 	isb	sy
}
     caa:	b003      	add	sp, #12
     cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     cb0:	8ba3      	ldrh	r3, [r4, #28]
     cb2:	f043 0310 	orr.w	r3, r3, #16
     cb6:	83a3      	strh	r3, [r4, #28]
     cb8:	e7ec      	b.n	c94 <process_event+0x54>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     cba:	4da3      	ldr	r5, [pc, #652]	; (f48 <process_event+0x308>)
     cbc:	f44f 739e 	mov.w	r3, #316	; 0x13c
     cc0:	462a      	mov	r2, r5
     cc2:	49a4      	ldr	r1, [pc, #656]	; (f54 <process_event+0x314>)
     cc4:	48a2      	ldr	r0, [pc, #648]	; (f50 <process_event+0x310>)
     cc6:	f009 fe19 	bl	a8fc <assert_print>
     cca:	f44f 719e 	mov.w	r1, #316	; 0x13c
     cce:	4628      	mov	r0, r5
     cd0:	f009 fe0d 	bl	a8ee <assert_post_action>
     cd4:	e7da      	b.n	c8c <process_event+0x4c>
			evt = process_recheck(mgr);
     cd6:	4620      	mov	r0, r4
     cd8:	f009 fd3c 	bl	a754 <process_recheck>
     cdc:	4605      	mov	r5, r0
     cde:	e06f      	b.n	dc0 <process_event+0x180>
			res = mgr->last_res;
     ce0:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
     ce4:	464a      	mov	r2, r9
     ce6:	4669      	mov	r1, sp
     ce8:	4620      	mov	r0, r4
     cea:	f7ff ff35 	bl	b58 <process_complete>
		onoff_transition_fn transit = NULL;
     cee:	2500      	movs	r5, #0
     cf0:	e011      	b.n	d16 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     cf2:	2f00      	cmp	r7, #0
     cf4:	f040 8081 	bne.w	dfa <process_event+0x1ba>
	return list->head;
     cf8:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     cfa:	2b00      	cmp	r3, #0
     cfc:	f000 808b 	beq.w	e16 <process_event+0x1d6>
			transit = mgr->transitions->start;
     d00:	6923      	ldr	r3, [r4, #16]
     d02:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     d04:	2d00      	cmp	r5, #0
     d06:	f000 8094 	beq.w	e32 <process_event+0x1f2>
			set_state(mgr, ONOFF_STATE_TO_ON);
     d0a:	2106      	movs	r1, #6
     d0c:	4620      	mov	r0, r4
     d0e:	f009 fcfa 	bl	a706 <set_state>
		res = 0;
     d12:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d16:	8ba3      	ldrh	r3, [r4, #28]
     d18:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     d1c:	45b8      	cmp	r8, r7
     d1e:	f000 810b 	beq.w	f38 <process_event+0x2f8>
     d22:	68a2      	ldr	r2, [r4, #8]
     d24:	2a00      	cmp	r2, #0
     d26:	f000 8109 	beq.w	f3c <process_event+0x2fc>
     d2a:	2201      	movs	r2, #1
		if (do_monitors
     d2c:	4617      	mov	r7, r2
     d2e:	b91a      	cbnz	r2, d38 <process_event+0xf8>
     d30:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     d32:	2a00      	cmp	r2, #0
     d34:	f000 8104 	beq.w	f40 <process_event+0x300>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     d38:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     d3c:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
     d3e:	f104 0a14 	add.w	sl, r4, #20
     d42:	4650      	mov	r0, sl
     d44:	f006 fc86 	bl	7654 <z_spin_unlock_valid>
     d48:	2800      	cmp	r0, #0
     d4a:	f000 8115 	beq.w	f78 <process_event+0x338>
     d4e:	f386 8811 	msr	BASEPRI, r6
     d52:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     d56:	2f00      	cmp	r7, #0
     d58:	f040 811f 	bne.w	f9a <process_event+0x35a>
     d5c:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     d5e:	b12b      	cbz	r3, d6c <process_event+0x12c>
				notify_all(mgr, &clients, state, res);
     d60:	464b      	mov	r3, r9
     d62:	4642      	mov	r2, r8
     d64:	4669      	mov	r1, sp
     d66:	4620      	mov	r0, r4
     d68:	f009 fd36 	bl	a7d8 <notify_all>
			if (transit != NULL) {
     d6c:	b115      	cbz	r5, d74 <process_event+0x134>
				transit(mgr, transition_complete);
     d6e:	497a      	ldr	r1, [pc, #488]	; (f58 <process_event+0x318>)
     d70:	4620      	mov	r0, r4
     d72:	47a8      	blx	r5
	__asm__ volatile(
     d74:	f04f 0320 	mov.w	r3, #32
     d78:	f3ef 8611 	mrs	r6, BASEPRI
     d7c:	f383 8812 	msr	BASEPRI_MAX, r3
     d80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     d84:	4650      	mov	r0, sl
     d86:	f006 fc55 	bl	7634 <z_spin_lock_valid>
     d8a:	2800      	cmp	r0, #0
     d8c:	f000 810b 	beq.w	fa6 <process_event+0x366>
	z_spin_lock_set_owner(l);
     d90:	4650      	mov	r0, sl
     d92:	f006 fc6f 	bl	7674 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     d96:	8ba3      	ldrh	r3, [r4, #28]
     d98:	f023 0308 	bic.w	r3, r3, #8
     d9c:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     d9e:	8ba3      	ldrh	r3, [r4, #28]
     da0:	f013 0f10 	tst.w	r3, #16
     da4:	f000 810f 	beq.w	fc6 <process_event+0x386>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     da8:	f023 0310 	bic.w	r3, r3, #16
     dac:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
     dae:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     db0:	8ba7      	ldrh	r7, [r4, #28]
     db2:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
     db6:	2d00      	cmp	r5, #0
     db8:	f43f af6c 	beq.w	c94 <process_event+0x54>
		if (evt == EVT_RECHECK) {
     dbc:	2d02      	cmp	r5, #2
     dbe:	d08a      	beq.n	cd6 <process_event+0x96>
		if (evt == EVT_NOP) {
     dc0:	2d00      	cmp	r5, #0
     dc2:	f43f af67 	beq.w	c94 <process_event+0x54>
		if (evt == EVT_COMPLETE) {
     dc6:	2d01      	cmp	r5, #1
     dc8:	d08a      	beq.n	ce0 <process_event+0xa0>
		} else if (evt == EVT_START) {
     dca:	2d03      	cmp	r5, #3
     dcc:	d091      	beq.n	cf2 <process_event+0xb2>
		} else if (evt == EVT_STOP) {
     dce:	2d04      	cmp	r5, #4
     dd0:	d03e      	beq.n	e50 <process_event+0x210>
		} else if (evt == EVT_RESET) {
     dd2:	2d05      	cmp	r5, #5
     dd4:	f040 80a0 	bne.w	f18 <process_event+0x2d8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     dd8:	2f01      	cmp	r7, #1
     dda:	d172      	bne.n	ec2 <process_event+0x282>
     ddc:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     dde:	2b00      	cmp	r3, #0
     de0:	d07d      	beq.n	ede <process_event+0x29e>
			transit = mgr->transitions->reset;
     de2:	6923      	ldr	r3, [r4, #16]
     de4:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     de6:	2d00      	cmp	r5, #0
     de8:	f000 8087 	beq.w	efa <process_event+0x2ba>
			set_state(mgr, ONOFF_STATE_RESETTING);
     dec:	2105      	movs	r1, #5
     dee:	4620      	mov	r0, r4
     df0:	f009 fc89 	bl	a706 <set_state>
		res = 0;
     df4:	f04f 0900 	mov.w	r9, #0
     df8:	e78d      	b.n	d16 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     dfa:	4d53      	ldr	r5, [pc, #332]	; (f48 <process_event+0x308>)
     dfc:	f44f 73ab 	mov.w	r3, #342	; 0x156
     e00:	462a      	mov	r2, r5
     e02:	4956      	ldr	r1, [pc, #344]	; (f5c <process_event+0x31c>)
     e04:	4852      	ldr	r0, [pc, #328]	; (f50 <process_event+0x310>)
     e06:	f009 fd79 	bl	a8fc <assert_print>
     e0a:	f44f 71ab 	mov.w	r1, #342	; 0x156
     e0e:	4628      	mov	r0, r5
     e10:	f009 fd6d 	bl	a8ee <assert_post_action>
     e14:	e770      	b.n	cf8 <process_event+0xb8>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     e16:	4d4c      	ldr	r5, [pc, #304]	; (f48 <process_event+0x308>)
     e18:	f240 1357 	movw	r3, #343	; 0x157
     e1c:	462a      	mov	r2, r5
     e1e:	4950      	ldr	r1, [pc, #320]	; (f60 <process_event+0x320>)
     e20:	484b      	ldr	r0, [pc, #300]	; (f50 <process_event+0x310>)
     e22:	f009 fd6b 	bl	a8fc <assert_print>
     e26:	f240 1157 	movw	r1, #343	; 0x157
     e2a:	4628      	mov	r0, r5
     e2c:	f009 fd5f 	bl	a8ee <assert_post_action>
     e30:	e766      	b.n	d00 <process_event+0xc0>
			__ASSERT_NO_MSG(transit != NULL);
     e32:	f8df 8114 	ldr.w	r8, [pc, #276]	; f48 <process_event+0x308>
     e36:	f44f 73ad 	mov.w	r3, #346	; 0x15a
     e3a:	4642      	mov	r2, r8
     e3c:	4949      	ldr	r1, [pc, #292]	; (f64 <process_event+0x324>)
     e3e:	4844      	ldr	r0, [pc, #272]	; (f50 <process_event+0x310>)
     e40:	f009 fd5c 	bl	a8fc <assert_print>
     e44:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     e48:	4640      	mov	r0, r8
     e4a:	f009 fd50 	bl	a8ee <assert_post_action>
     e4e:	e75c      	b.n	d0a <process_event+0xca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     e50:	2f02      	cmp	r7, #2
     e52:	d10b      	bne.n	e6c <process_event+0x22c>
			__ASSERT_NO_MSG(mgr->refs == 0);
     e54:	8be3      	ldrh	r3, [r4, #30]
     e56:	b9bb      	cbnz	r3, e88 <process_event+0x248>
			transit = mgr->transitions->stop;
     e58:	6923      	ldr	r3, [r4, #16]
     e5a:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     e5c:	b315      	cbz	r5, ea4 <process_event+0x264>
			set_state(mgr, ONOFF_STATE_TO_OFF);
     e5e:	2104      	movs	r1, #4
     e60:	4620      	mov	r0, r4
     e62:	f009 fc50 	bl	a706 <set_state>
		res = 0;
     e66:	f04f 0900 	mov.w	r9, #0
     e6a:	e754      	b.n	d16 <process_event+0xd6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     e6c:	4d36      	ldr	r5, [pc, #216]	; (f48 <process_event+0x308>)
     e6e:	f240 135d 	movw	r3, #349	; 0x15d
     e72:	462a      	mov	r2, r5
     e74:	493c      	ldr	r1, [pc, #240]	; (f68 <process_event+0x328>)
     e76:	4836      	ldr	r0, [pc, #216]	; (f50 <process_event+0x310>)
     e78:	f009 fd40 	bl	a8fc <assert_print>
     e7c:	f240 115d 	movw	r1, #349	; 0x15d
     e80:	4628      	mov	r0, r5
     e82:	f009 fd34 	bl	a8ee <assert_post_action>
     e86:	e7e5      	b.n	e54 <process_event+0x214>
			__ASSERT_NO_MSG(mgr->refs == 0);
     e88:	4d2f      	ldr	r5, [pc, #188]	; (f48 <process_event+0x308>)
     e8a:	f44f 73af 	mov.w	r3, #350	; 0x15e
     e8e:	462a      	mov	r2, r5
     e90:	4936      	ldr	r1, [pc, #216]	; (f6c <process_event+0x32c>)
     e92:	482f      	ldr	r0, [pc, #188]	; (f50 <process_event+0x310>)
     e94:	f009 fd32 	bl	a8fc <assert_print>
     e98:	f44f 71af 	mov.w	r1, #350	; 0x15e
     e9c:	4628      	mov	r0, r5
     e9e:	f009 fd26 	bl	a8ee <assert_post_action>
     ea2:	e7d9      	b.n	e58 <process_event+0x218>
			__ASSERT_NO_MSG(transit != NULL);
     ea4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; f48 <process_event+0x308>
     ea8:	f240 1361 	movw	r3, #353	; 0x161
     eac:	4642      	mov	r2, r8
     eae:	492d      	ldr	r1, [pc, #180]	; (f64 <process_event+0x324>)
     eb0:	4827      	ldr	r0, [pc, #156]	; (f50 <process_event+0x310>)
     eb2:	f009 fd23 	bl	a8fc <assert_print>
     eb6:	f240 1161 	movw	r1, #353	; 0x161
     eba:	4640      	mov	r0, r8
     ebc:	f009 fd17 	bl	a8ee <assert_post_action>
     ec0:	e7cd      	b.n	e5e <process_event+0x21e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     ec2:	4d21      	ldr	r5, [pc, #132]	; (f48 <process_event+0x308>)
     ec4:	f44f 73b2 	mov.w	r3, #356	; 0x164
     ec8:	462a      	mov	r2, r5
     eca:	4929      	ldr	r1, [pc, #164]	; (f70 <process_event+0x330>)
     ecc:	4820      	ldr	r0, [pc, #128]	; (f50 <process_event+0x310>)
     ece:	f009 fd15 	bl	a8fc <assert_print>
     ed2:	f44f 71b2 	mov.w	r1, #356	; 0x164
     ed6:	4628      	mov	r0, r5
     ed8:	f009 fd09 	bl	a8ee <assert_post_action>
     edc:	e77e      	b.n	ddc <process_event+0x19c>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     ede:	4d1a      	ldr	r5, [pc, #104]	; (f48 <process_event+0x308>)
     ee0:	f240 1365 	movw	r3, #357	; 0x165
     ee4:	462a      	mov	r2, r5
     ee6:	491e      	ldr	r1, [pc, #120]	; (f60 <process_event+0x320>)
     ee8:	4819      	ldr	r0, [pc, #100]	; (f50 <process_event+0x310>)
     eea:	f009 fd07 	bl	a8fc <assert_print>
     eee:	f240 1165 	movw	r1, #357	; 0x165
     ef2:	4628      	mov	r0, r5
     ef4:	f009 fcfb 	bl	a8ee <assert_post_action>
     ef8:	e773      	b.n	de2 <process_event+0x1a2>
			__ASSERT_NO_MSG(transit != NULL);
     efa:	f8df 804c 	ldr.w	r8, [pc, #76]	; f48 <process_event+0x308>
     efe:	f44f 73b4 	mov.w	r3, #360	; 0x168
     f02:	4642      	mov	r2, r8
     f04:	4917      	ldr	r1, [pc, #92]	; (f64 <process_event+0x324>)
     f06:	4812      	ldr	r0, [pc, #72]	; (f50 <process_event+0x310>)
     f08:	f009 fcf8 	bl	a8fc <assert_print>
     f0c:	f44f 71b4 	mov.w	r1, #360	; 0x168
     f10:	4640      	mov	r0, r8
     f12:	f009 fcec 	bl	a8ee <assert_post_action>
     f16:	e769      	b.n	dec <process_event+0x1ac>
			__ASSERT_NO_MSG(false);
     f18:	4d0b      	ldr	r5, [pc, #44]	; (f48 <process_event+0x308>)
     f1a:	f240 136b 	movw	r3, #363	; 0x16b
     f1e:	462a      	mov	r2, r5
     f20:	4914      	ldr	r1, [pc, #80]	; (f74 <process_event+0x334>)
     f22:	480b      	ldr	r0, [pc, #44]	; (f50 <process_event+0x310>)
     f24:	f009 fcea 	bl	a8fc <assert_print>
     f28:	f240 116b 	movw	r1, #363	; 0x16b
     f2c:	4628      	mov	r0, r5
     f2e:	f009 fcde 	bl	a8ee <assert_post_action>
		onoff_transition_fn transit = NULL;
     f32:	2500      	movs	r5, #0
		res = 0;
     f34:	46a9      	mov	r9, r5
     f36:	e6ee      	b.n	d16 <process_event+0xd6>
				   && !sys_slist_is_empty(&mgr->monitors);
     f38:	2200      	movs	r2, #0
     f3a:	e6f7      	b.n	d2c <process_event+0xec>
     f3c:	2200      	movs	r2, #0
     f3e:	e6f5      	b.n	d2c <process_event+0xec>
		    || (transit != NULL)) {
     f40:	2d00      	cmp	r5, #0
     f42:	f47f aef9 	bne.w	d38 <process_event+0xf8>
     f46:	e72a      	b.n	d9e <process_event+0x15e>
     f48:	0000c308 	.word	0x0000c308
     f4c:	0000c354 	.word	0x0000c354
     f50:	0000c254 	.word	0x0000c254
     f54:	0000c364 	.word	0x0000c364
     f58:	00001015 	.word	0x00001015
     f5c:	0000c378 	.word	0x0000c378
     f60:	0000c384 	.word	0x0000c384
     f64:	0000c3a8 	.word	0x0000c3a8
     f68:	0000c3c0 	.word	0x0000c3c0
     f6c:	0000c3d8 	.word	0x0000c3d8
     f70:	0000c3e8 	.word	0x0000c3e8
     f74:	0000c914 	.word	0x0000c914
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     f78:	f8df b080 	ldr.w	fp, [pc, #128]	; ffc <process_event+0x3bc>
     f7c:	23b9      	movs	r3, #185	; 0xb9
     f7e:	465a      	mov	r2, fp
     f80:	491f      	ldr	r1, [pc, #124]	; (1000 <CONFIG_FPROTECT_BLOCK_SIZE>)
     f82:	4820      	ldr	r0, [pc, #128]	; (1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
     f84:	f009 fcba 	bl	a8fc <assert_print>
     f88:	4651      	mov	r1, sl
     f8a:	481f      	ldr	r0, [pc, #124]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     f8c:	f009 fcb6 	bl	a8fc <assert_print>
     f90:	21b9      	movs	r1, #185	; 0xb9
     f92:	4658      	mov	r0, fp
     f94:	f009 fcab 	bl	a8ee <assert_post_action>
     f98:	e6d9      	b.n	d4e <process_event+0x10e>
				notify_monitors(mgr, state, res);
     f9a:	464a      	mov	r2, r9
     f9c:	4641      	mov	r1, r8
     f9e:	4620      	mov	r0, r4
     fa0:	f009 fbb9 	bl	a716 <notify_monitors>
     fa4:	e6da      	b.n	d5c <process_event+0x11c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     fa6:	4d15      	ldr	r5, [pc, #84]	; (ffc <process_event+0x3bc>)
     fa8:	238e      	movs	r3, #142	; 0x8e
     faa:	462a      	mov	r2, r5
     fac:	4917      	ldr	r1, [pc, #92]	; (100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
     fae:	4815      	ldr	r0, [pc, #84]	; (1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
     fb0:	f009 fca4 	bl	a8fc <assert_print>
     fb4:	4651      	mov	r1, sl
     fb6:	4816      	ldr	r0, [pc, #88]	; (1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
     fb8:	f009 fca0 	bl	a8fc <assert_print>
     fbc:	218e      	movs	r1, #142	; 0x8e
     fbe:	4628      	mov	r0, r5
     fc0:	f009 fc95 	bl	a8ee <assert_post_action>
     fc4:	e6e4      	b.n	d90 <process_event+0x150>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     fc6:	f013 0f20 	tst.w	r3, #32
     fca:	d004      	beq.n	fd6 <process_event+0x396>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     fcc:	f023 0320 	bic.w	r3, r3, #32
     fd0:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
     fd2:	2502      	movs	r5, #2
     fd4:	e6ec      	b.n	db0 <process_event+0x170>
		evt = EVT_NOP;
     fd6:	2500      	movs	r5, #0
     fd8:	e6ea      	b.n	db0 <process_event+0x170>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     fda:	4d08      	ldr	r5, [pc, #32]	; (ffc <process_event+0x3bc>)
     fdc:	23b9      	movs	r3, #185	; 0xb9
     fde:	462a      	mov	r2, r5
     fe0:	4907      	ldr	r1, [pc, #28]	; (1000 <CONFIG_FPROTECT_BLOCK_SIZE>)
     fe2:	4808      	ldr	r0, [pc, #32]	; (1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
     fe4:	f009 fc8a 	bl	a8fc <assert_print>
     fe8:	4621      	mov	r1, r4
     fea:	4807      	ldr	r0, [pc, #28]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     fec:	f009 fc86 	bl	a8fc <assert_print>
     ff0:	21b9      	movs	r1, #185	; 0xb9
     ff2:	4628      	mov	r0, r5
     ff4:	f009 fc7b 	bl	a8ee <assert_post_action>
     ff8:	e653      	b.n	ca2 <process_event+0x62>
     ffa:	bf00      	nop
     ffc:	0000c400 	.word	0x0000c400
    1000:	0000c430 	.word	0x0000c430
    1004:	0000c254 	.word	0x0000c254
    1008:	0000c448 	.word	0x0000c448
    100c:	0000c460 	.word	0x0000c460
    1010:	0000c478 	.word	0x0000c478

00001014 <transition_complete>:
{
    1014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1018:	4604      	mov	r4, r0
    101a:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    101c:	f100 0614 	add.w	r6, r0, #20
    1020:	f04f 0320 	mov.w	r3, #32
    1024:	f3ef 8711 	mrs	r7, BASEPRI
    1028:	f383 8812 	msr	BASEPRI_MAX, r3
    102c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1030:	4630      	mov	r0, r6
    1032:	f006 faff 	bl	7634 <z_spin_lock_valid>
    1036:	b150      	cbz	r0, 104e <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
    1038:	4630      	mov	r0, r6
    103a:	f006 fb1b 	bl	7674 <z_spin_lock_set_owner>
	mgr->last_res = res;
    103e:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    1040:	463a      	mov	r2, r7
    1042:	2101      	movs	r1, #1
    1044:	4620      	mov	r0, r4
    1046:	f7ff fdfb 	bl	c40 <process_event>
}
    104a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    104e:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1070 <transition_complete+0x5c>
    1052:	238e      	movs	r3, #142	; 0x8e
    1054:	4642      	mov	r2, r8
    1056:	4907      	ldr	r1, [pc, #28]	; (1074 <transition_complete+0x60>)
    1058:	4807      	ldr	r0, [pc, #28]	; (1078 <transition_complete+0x64>)
    105a:	f009 fc4f 	bl	a8fc <assert_print>
    105e:	4631      	mov	r1, r6
    1060:	4806      	ldr	r0, [pc, #24]	; (107c <transition_complete+0x68>)
    1062:	f009 fc4b 	bl	a8fc <assert_print>
    1066:	218e      	movs	r1, #142	; 0x8e
    1068:	4640      	mov	r0, r8
    106a:	f009 fc40 	bl	a8ee <assert_post_action>
    106e:	e7e3      	b.n	1038 <transition_complete+0x24>
    1070:	0000c400 	.word	0x0000c400
    1074:	0000c460 	.word	0x0000c460
    1078:	0000c254 	.word	0x0000c254
    107c:	0000c478 	.word	0x0000c478

00001080 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1084:	4604      	mov	r4, r0
    1086:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1088:	f009 fb7d 	bl	a786 <validate_args>

	if (rv < 0) {
    108c:	1e06      	subs	r6, r0, #0
    108e:	db58      	blt.n	1142 <onoff_request+0xc2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1090:	f104 0714 	add.w	r7, r4, #20
    1094:	f04f 0320 	mov.w	r3, #32
    1098:	f3ef 8911 	mrs	r9, BASEPRI
    109c:	f383 8812 	msr	BASEPRI_MAX, r3
    10a0:	f3bf 8f6f 	isb	sy
    10a4:	4638      	mov	r0, r7
    10a6:	f006 fac5 	bl	7634 <z_spin_lock_valid>
    10aa:	b1e8      	cbz	r0, 10e8 <onoff_request+0x68>
	z_spin_lock_set_owner(l);
    10ac:	4638      	mov	r0, r7
    10ae:	f006 fae1 	bl	7674 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    10b2:	8ba5      	ldrh	r5, [r4, #28]
    10b4:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    10b8:	8be3      	ldrh	r3, [r4, #30]
    10ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
    10be:	4293      	cmp	r3, r2
    10c0:	d056      	beq.n	1170 <onoff_request+0xf0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    10c2:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    10c4:	2d02      	cmp	r5, #2
    10c6:	d01f      	beq.n	1108 <onoff_request+0x88>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    10c8:	b32d      	cbz	r5, 1116 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_OFF)
    10ca:	2d04      	cmp	r5, #4
    10cc:	d023      	beq.n	1116 <onoff_request+0x96>
		   || (state == ONOFF_STATE_TO_ON)) {
    10ce:	2d06      	cmp	r5, #6
    10d0:	d021      	beq.n	1116 <onoff_request+0x96>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    10d2:	2d05      	cmp	r5, #5
    10d4:	d053      	beq.n	117e <onoff_request+0xfe>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    10d6:	2d01      	cmp	r5, #1
    10d8:	d136      	bne.n	1148 <onoff_request+0xc8>
		rv = -EIO;
    10da:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    10de:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    10e2:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    10e4:	4652      	mov	r2, sl
    10e6:	e01c      	b.n	1122 <onoff_request+0xa2>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    10e8:	4d3c      	ldr	r5, [pc, #240]	; (11dc <onoff_request+0x15c>)
    10ea:	238e      	movs	r3, #142	; 0x8e
    10ec:	462a      	mov	r2, r5
    10ee:	493c      	ldr	r1, [pc, #240]	; (11e0 <onoff_request+0x160>)
    10f0:	483c      	ldr	r0, [pc, #240]	; (11e4 <onoff_request+0x164>)
    10f2:	f009 fc03 	bl	a8fc <assert_print>
    10f6:	4639      	mov	r1, r7
    10f8:	483b      	ldr	r0, [pc, #236]	; (11e8 <onoff_request+0x168>)
    10fa:	f009 fbff 	bl	a8fc <assert_print>
    10fe:	218e      	movs	r1, #142	; 0x8e
    1100:	4628      	mov	r0, r5
    1102:	f009 fbf4 	bl	a8ee <assert_post_action>
    1106:	e7d1      	b.n	10ac <onoff_request+0x2c>
		mgr->refs += 1U;
    1108:	3301      	adds	r3, #1
    110a:	83e3      	strh	r3, [r4, #30]
		notify = true;
    110c:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
    1110:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    1112:	461a      	mov	r2, r3
    1114:	e005      	b.n	1122 <onoff_request+0xa2>
		start = (state == ONOFF_STATE_OFF);
    1116:	fab5 f385 	clz	r3, r5
    111a:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    111c:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
    1120:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
    1122:	b142      	cbz	r2, 1136 <onoff_request+0xb6>
	parent->next = child;
    1124:	2200      	movs	r2, #0
    1126:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
    112a:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    112c:	b372      	cbz	r2, 118c <onoff_request+0x10c>
	parent->next = child;
    112e:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    1132:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    1136:	b373      	cbz	r3, 1196 <onoff_request+0x116>
		process_event(mgr, EVT_RECHECK, key);
    1138:	464a      	mov	r2, r9
    113a:	2102      	movs	r1, #2
    113c:	4620      	mov	r0, r4
    113e:	f7ff fd7f 	bl	c40 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    1142:	4630      	mov	r0, r6
    1144:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1148:	4e28      	ldr	r6, [pc, #160]	; (11ec <onoff_request+0x16c>)
    114a:	f240 13c9 	movw	r3, #457	; 0x1c9
    114e:	4632      	mov	r2, r6
    1150:	4927      	ldr	r1, [pc, #156]	; (11f0 <onoff_request+0x170>)
    1152:	4824      	ldr	r0, [pc, #144]	; (11e4 <onoff_request+0x164>)
    1154:	f009 fbd2 	bl	a8fc <assert_print>
    1158:	f240 11c9 	movw	r1, #457	; 0x1c9
    115c:	4630      	mov	r0, r6
    115e:	f009 fbc6 	bl	a8ee <assert_post_action>
		rv = -EIO;
    1162:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    1166:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    116a:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    116c:	4652      	mov	r2, sl
    116e:	e7d8      	b.n	1122 <onoff_request+0xa2>
		rv = -EAGAIN;
    1170:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    1174:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1178:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    117a:	4652      	mov	r2, sl
    117c:	e7d1      	b.n	1122 <onoff_request+0xa2>
		rv = -ENOTSUP;
    117e:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    1182:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
    1186:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
    1188:	4652      	mov	r2, sl
    118a:	e7ca      	b.n	1122 <onoff_request+0xa2>
    118c:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
    1190:	f8c4 8000 	str.w	r8, [r4]
}
    1194:	e7cf      	b.n	1136 <onoff_request+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1196:	4638      	mov	r0, r7
    1198:	f006 fa5c 	bl	7654 <z_spin_unlock_valid>
    119c:	b168      	cbz	r0, 11ba <onoff_request+0x13a>
	__asm__ volatile(
    119e:	f389 8811 	msr	BASEPRI, r9
    11a2:	f3bf 8f6f 	isb	sy
		if (notify) {
    11a6:	f1ba 0f00 	cmp.w	sl, #0
    11aa:	d0ca      	beq.n	1142 <onoff_request+0xc2>
			notify_one(mgr, cli, state, 0);
    11ac:	2300      	movs	r3, #0
    11ae:	462a      	mov	r2, r5
    11b0:	4641      	mov	r1, r8
    11b2:	4620      	mov	r0, r4
    11b4:	f009 fafd 	bl	a7b2 <notify_one>
    11b8:	e7c3      	b.n	1142 <onoff_request+0xc2>
    11ba:	f8df b020 	ldr.w	fp, [pc, #32]	; 11dc <onoff_request+0x15c>
    11be:	23b9      	movs	r3, #185	; 0xb9
    11c0:	465a      	mov	r2, fp
    11c2:	490c      	ldr	r1, [pc, #48]	; (11f4 <onoff_request+0x174>)
    11c4:	4807      	ldr	r0, [pc, #28]	; (11e4 <onoff_request+0x164>)
    11c6:	f009 fb99 	bl	a8fc <assert_print>
    11ca:	4639      	mov	r1, r7
    11cc:	480a      	ldr	r0, [pc, #40]	; (11f8 <onoff_request+0x178>)
    11ce:	f009 fb95 	bl	a8fc <assert_print>
    11d2:	21b9      	movs	r1, #185	; 0xb9
    11d4:	4658      	mov	r0, fp
    11d6:	f009 fb8a 	bl	a8ee <assert_post_action>
    11da:	e7e0      	b.n	119e <onoff_request+0x11e>
    11dc:	0000c400 	.word	0x0000c400
    11e0:	0000c460 	.word	0x0000c460
    11e4:	0000c254 	.word	0x0000c254
    11e8:	0000c478 	.word	0x0000c478
    11ec:	0000c308 	.word	0x0000c308
    11f0:	0000c3e8 	.word	0x0000c3e8
    11f4:	0000c430 	.word	0x0000c430
    11f8:	0000c448 	.word	0x0000c448

000011fc <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    11fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1200:	4606      	mov	r6, r0
    1202:	460d      	mov	r5, r1
    1204:	4614      	mov	r4, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    1206:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    120a:	d222      	bcs.n	1252 <sys_heap_init+0x56>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    120c:	2c04      	cmp	r4, #4
    120e:	d931      	bls.n	1274 <sys_heap_init+0x78>
	bytes -= heap_footer_bytes(bytes);
    1210:	1f22      	subs	r2, r4, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1212:	1dec      	adds	r4, r5, #7
    1214:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1218:	4415      	add	r5, r2
    121a:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    121e:	1b2d      	subs	r5, r5, r4
    1220:	ea4f 08d5 	mov.w	r8, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1224:	2d17      	cmp	r5, #23
    1226:	d936      	bls.n	1296 <sys_heap_init+0x9a>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    1228:	6034      	str	r4, [r6, #0]
	h->end_chunk = heap_sz;
    122a:	f8c4 8008 	str.w	r8, [r4, #8]
	h->avail_buckets = 0;
    122e:	2300      	movs	r3, #0
    1230:	60e3      	str	r3, [r4, #12]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    1232:	fab8 f688 	clz	r6, r8
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    1236:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    123a:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
    123e:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    1240:	3607      	adds	r6, #7
    1242:	ea4f 09d6 	mov.w	r9, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    1246:	f109 0301 	add.w	r3, r9, #1
    124a:	4543      	cmp	r3, r8
    124c:	d834      	bhi.n	12b8 <sys_heap_init+0xbc>
{
    124e:	2300      	movs	r3, #0
    1250:	e049      	b.n	12e6 <sys_heap_init+0xea>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    1252:	4f38      	ldr	r7, [pc, #224]	; (1334 <sys_heap_init+0x138>)
    1254:	f240 13e3 	movw	r3, #483	; 0x1e3
    1258:	463a      	mov	r2, r7
    125a:	4937      	ldr	r1, [pc, #220]	; (1338 <sys_heap_init+0x13c>)
    125c:	4837      	ldr	r0, [pc, #220]	; (133c <sys_heap_init+0x140>)
    125e:	f009 fb4d 	bl	a8fc <assert_print>
    1262:	4837      	ldr	r0, [pc, #220]	; (1340 <sys_heap_init+0x144>)
    1264:	f009 fb4a 	bl	a8fc <assert_print>
    1268:	f240 11e3 	movw	r1, #483	; 0x1e3
    126c:	4638      	mov	r0, r7
    126e:	f009 fb3e 	bl	a8ee <assert_post_action>
    1272:	e7cb      	b.n	120c <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1274:	4f2f      	ldr	r7, [pc, #188]	; (1334 <sys_heap_init+0x138>)
    1276:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    127a:	463a      	mov	r2, r7
    127c:	4931      	ldr	r1, [pc, #196]	; (1344 <sys_heap_init+0x148>)
    127e:	482f      	ldr	r0, [pc, #188]	; (133c <sys_heap_init+0x140>)
    1280:	f009 fb3c 	bl	a8fc <assert_print>
    1284:	4830      	ldr	r0, [pc, #192]	; (1348 <sys_heap_init+0x14c>)
    1286:	f009 fb39 	bl	a8fc <assert_print>
    128a:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    128e:	4638      	mov	r0, r7
    1290:	f009 fb2d 	bl	a8ee <assert_post_action>
    1294:	e7bc      	b.n	1210 <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1296:	4f27      	ldr	r7, [pc, #156]	; (1334 <sys_heap_init+0x138>)
    1298:	f240 13f3 	movw	r3, #499	; 0x1f3
    129c:	463a      	mov	r2, r7
    129e:	492b      	ldr	r1, [pc, #172]	; (134c <sys_heap_init+0x150>)
    12a0:	4826      	ldr	r0, [pc, #152]	; (133c <sys_heap_init+0x140>)
    12a2:	f009 fb2b 	bl	a8fc <assert_print>
    12a6:	4828      	ldr	r0, [pc, #160]	; (1348 <sys_heap_init+0x14c>)
    12a8:	f009 fb28 	bl	a8fc <assert_print>
    12ac:	f240 11f3 	movw	r1, #499	; 0x1f3
    12b0:	4638      	mov	r0, r7
    12b2:	f009 fb1c 	bl	a8ee <assert_post_action>
    12b6:	e7b7      	b.n	1228 <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    12b8:	f8df a078 	ldr.w	sl, [pc, #120]	; 1334 <sys_heap_init+0x138>
    12bc:	f44f 7301 	mov.w	r3, #516	; 0x204
    12c0:	4652      	mov	r2, sl
    12c2:	4923      	ldr	r1, [pc, #140]	; (1350 <sys_heap_init+0x154>)
    12c4:	481d      	ldr	r0, [pc, #116]	; (133c <sys_heap_init+0x140>)
    12c6:	f009 fb19 	bl	a8fc <assert_print>
    12ca:	481f      	ldr	r0, [pc, #124]	; (1348 <sys_heap_init+0x14c>)
    12cc:	f009 fb16 	bl	a8fc <assert_print>
    12d0:	f44f 7101 	mov.w	r1, #516	; 0x204
    12d4:	4650      	mov	r0, sl
    12d6:	f009 fb0a 	bl	a8ee <assert_post_action>
    12da:	e7b8      	b.n	124e <sys_heap_init+0x52>

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    12dc:	1d1a      	adds	r2, r3, #4
    12de:	2100      	movs	r1, #0
    12e0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    12e4:	3301      	adds	r3, #1
    12e6:	42bb      	cmp	r3, r7
    12e8:	dbf8      	blt.n	12dc <sys_heap_init+0xe0>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    12ea:	ea4f 0349 	mov.w	r3, r9, lsl #1
		((uint16_t *)cmem)[f] = val;
    12ee:	b29b      	uxth	r3, r3
    12f0:	8063      	strh	r3, [r4, #2]
    12f2:	2200      	movs	r2, #0
    12f4:	8022      	strh	r2, [r4, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    12f6:	f043 0301 	orr.w	r3, r3, #1
    12fa:	8063      	strh	r3, [r4, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    12fc:	eba8 0809 	sub.w	r8, r8, r9
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1300:	ea4f 0148 	mov.w	r1, r8, lsl #1
	void *cmem = &buf[c];
    1304:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
    1308:	1cb3      	adds	r3, r6, #2
    130a:	52e1      	strh	r1, [r4, r3]
    130c:	f824 9006 	strh.w	r9, [r4, r6]
	void *cmem = &buf[c];
    1310:	f025 0307 	bic.w	r3, r5, #7
		((uint16_t *)cmem)[f] = val;
    1314:	1ca9      	adds	r1, r5, #2
    1316:	5262      	strh	r2, [r4, r1]
    1318:	4425      	add	r5, r4
    131a:	f824 8003 	strh.w	r8, [r4, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    131e:	886b      	ldrh	r3, [r5, #2]
    1320:	f043 0301 	orr.w	r3, r3, #1
    1324:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    1326:	4649      	mov	r1, r9
    1328:	4620      	mov	r0, r4
    132a:	f009 faba 	bl	a8a2 <free_list_add>
}
    132e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1332:	bf00      	nop
    1334:	0000c490 	.word	0x0000c490
    1338:	0000c564 	.word	0x0000c564
    133c:	0000c254 	.word	0x0000c254
    1340:	0000c57c 	.word	0x0000c57c
    1344:	0000c594 	.word	0x0000c594
    1348:	0000c5b8 	.word	0x0000c5b8
    134c:	0000c5d4 	.word	0x0000c5d4
    1350:	0000c600 	.word	0x0000c600

00001354 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    1354:	4684      	mov	ip, r0
	const char *sp = *str;
    1356:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    1358:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    135a:	e005      	b.n	1368 <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    135c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1360:	3201      	adds	r2, #1
    1362:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1366:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1368:	7813      	ldrb	r3, [r2, #0]
    136a:	4904      	ldr	r1, [pc, #16]	; (137c <extract_decimal+0x28>)
    136c:	5c59      	ldrb	r1, [r3, r1]
    136e:	f011 0f04 	tst.w	r1, #4
    1372:	d1f3      	bne.n	135c <extract_decimal+0x8>
	}
	*str = sp;
    1374:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
    1378:	4770      	bx	lr
    137a:	bf00      	nop
    137c:	0000dff9 	.word	0x0000dff9

00001380 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    1380:	b570      	push	{r4, r5, r6, lr}
    1382:	b082      	sub	sp, #8
    1384:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    1386:	2300      	movs	r3, #0
    1388:	6003      	str	r3, [r0, #0]
    138a:	6043      	str	r3, [r0, #4]
    138c:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    138e:	784b      	ldrb	r3, [r1, #1]
    1390:	2b25      	cmp	r3, #37	; 0x25
    1392:	d002      	beq.n	139a <extract_conversion+0x1a>
    1394:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    1396:	2501      	movs	r5, #1
    1398:	e01f      	b.n	13da <extract_conversion+0x5a>
		conv->specifier = *sp++;
    139a:	1c88      	adds	r0, r1, #2
    139c:	70e3      	strb	r3, [r4, #3]
		return sp;
    139e:	e145      	b.n	162c <extract_conversion+0x2ac>
			conv->flag_dash = true;
    13a0:	7823      	ldrb	r3, [r4, #0]
    13a2:	f043 0304 	orr.w	r3, r3, #4
    13a6:	7023      	strb	r3, [r4, #0]
		if (loop) {
    13a8:	b1b5      	cbz	r5, 13d8 <extract_conversion+0x58>
			++sp;
    13aa:	3601      	adds	r6, #1
    13ac:	e014      	b.n	13d8 <extract_conversion+0x58>
			conv->flag_plus = true;
    13ae:	7823      	ldrb	r3, [r4, #0]
    13b0:	f043 0308 	orr.w	r3, r3, #8
    13b4:	7023      	strb	r3, [r4, #0]
			break;
    13b6:	e7f7      	b.n	13a8 <extract_conversion+0x28>
			conv->flag_space = true;
    13b8:	7823      	ldrb	r3, [r4, #0]
    13ba:	f043 0310 	orr.w	r3, r3, #16
    13be:	7023      	strb	r3, [r4, #0]
			break;
    13c0:	e7f2      	b.n	13a8 <extract_conversion+0x28>
			conv->flag_hash = true;
    13c2:	7823      	ldrb	r3, [r4, #0]
    13c4:	f043 0320 	orr.w	r3, r3, #32
    13c8:	7023      	strb	r3, [r4, #0]
			break;
    13ca:	e7ed      	b.n	13a8 <extract_conversion+0x28>
			conv->flag_zero = true;
    13cc:	7823      	ldrb	r3, [r4, #0]
    13ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    13d2:	7023      	strb	r3, [r4, #0]
			break;
    13d4:	e7e8      	b.n	13a8 <extract_conversion+0x28>
		switch (*sp) {
    13d6:	2500      	movs	r5, #0
	} while (loop);
    13d8:	b345      	cbz	r5, 142c <extract_conversion+0xac>
		switch (*sp) {
    13da:	7833      	ldrb	r3, [r6, #0]
    13dc:	3b20      	subs	r3, #32
    13de:	2b10      	cmp	r3, #16
    13e0:	d8f9      	bhi.n	13d6 <extract_conversion+0x56>
    13e2:	a201      	add	r2, pc, #4	; (adr r2, 13e8 <extract_conversion+0x68>)
    13e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    13e8:	000013b9 	.word	0x000013b9
    13ec:	000013d7 	.word	0x000013d7
    13f0:	000013d7 	.word	0x000013d7
    13f4:	000013c3 	.word	0x000013c3
    13f8:	000013d7 	.word	0x000013d7
    13fc:	000013d7 	.word	0x000013d7
    1400:	000013d7 	.word	0x000013d7
    1404:	000013d7 	.word	0x000013d7
    1408:	000013d7 	.word	0x000013d7
    140c:	000013d7 	.word	0x000013d7
    1410:	000013d7 	.word	0x000013d7
    1414:	000013af 	.word	0x000013af
    1418:	000013d7 	.word	0x000013d7
    141c:	000013a1 	.word	0x000013a1
    1420:	000013d7 	.word	0x000013d7
    1424:	000013d7 	.word	0x000013d7
    1428:	000013cd 	.word	0x000013cd
	if (conv->flag_zero && conv->flag_dash) {
    142c:	7823      	ldrb	r3, [r4, #0]
    142e:	f003 0344 	and.w	r3, r3, #68	; 0x44
    1432:	2b44      	cmp	r3, #68	; 0x44
    1434:	d05f      	beq.n	14f6 <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    1436:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    1438:	7823      	ldrb	r3, [r4, #0]
    143a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    143e:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    1440:	7833      	ldrb	r3, [r6, #0]
    1442:	2b2a      	cmp	r3, #42	; 0x2a
    1444:	d05c      	beq.n	1500 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    1446:	a801      	add	r0, sp, #4
    1448:	f7ff ff84 	bl	1354 <extract_decimal>
	if (sp != wp) {
    144c:	9b01      	ldr	r3, [sp, #4]
    144e:	429e      	cmp	r6, r3
    1450:	d00f      	beq.n	1472 <extract_conversion+0xf2>
		conv->width_present = true;
    1452:	7823      	ldrb	r3, [r4, #0]
    1454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1458:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    145a:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    145c:	b2db      	uxtb	r3, r3
    145e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    1462:	2800      	cmp	r0, #0
    1464:	db54      	blt.n	1510 <extract_conversion+0x190>
    1466:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    1468:	4313      	orrs	r3, r2
    146a:	7822      	ldrb	r2, [r4, #0]
    146c:	f363 0241 	bfi	r2, r3, #1, #1
    1470:	7022      	strb	r2, [r4, #0]
	return sp;
    1472:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    1474:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    1476:	781b      	ldrb	r3, [r3, #0]
    1478:	2b2e      	cmp	r3, #46	; 0x2e
    147a:	bf14      	ite	ne
    147c:	2300      	movne	r3, #0
    147e:	2301      	moveq	r3, #1
    1480:	7862      	ldrb	r2, [r4, #1]
    1482:	f363 0241 	bfi	r2, r3, #1, #1
    1486:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    1488:	2b00      	cmp	r3, #0
    148a:	d043      	beq.n	1514 <extract_conversion+0x194>
	++sp;
    148c:	9b01      	ldr	r3, [sp, #4]
    148e:	1c5a      	adds	r2, r3, #1
    1490:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    1492:	785b      	ldrb	r3, [r3, #1]
    1494:	2b2a      	cmp	r3, #42	; 0x2a
    1496:	d03f      	beq.n	1518 <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    1498:	a801      	add	r0, sp, #4
    149a:	f7ff ff5b 	bl	1354 <extract_decimal>
	conv->prec_value = prec;
    149e:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    14a0:	7823      	ldrb	r3, [r4, #0]
    14a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    14a6:	2800      	cmp	r0, #0
    14a8:	db3e      	blt.n	1528 <extract_conversion+0x1a8>
    14aa:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    14ac:	4313      	orrs	r3, r2
    14ae:	7822      	ldrb	r2, [r4, #0]
    14b0:	f363 0241 	bfi	r2, r3, #1, #1
    14b4:	7022      	strb	r2, [r4, #0]
	return sp;
    14b6:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    14b8:	7803      	ldrb	r3, [r0, #0]
    14ba:	3b4c      	subs	r3, #76	; 0x4c
    14bc:	2b2e      	cmp	r3, #46	; 0x2e
    14be:	f200 809d 	bhi.w	15fc <extract_conversion+0x27c>
    14c2:	e8df f003 	tbb	[pc, r3]
    14c6:	9b90      	.short	0x9b90
    14c8:	9b9b9b9b 	.word	0x9b9b9b9b
    14cc:	9b9b9b9b 	.word	0x9b9b9b9b
    14d0:	9b9b9b9b 	.word	0x9b9b9b9b
    14d4:	9b9b9b9b 	.word	0x9b9b9b9b
    14d8:	9b9b9b9b 	.word	0x9b9b9b9b
    14dc:	9b9b9b9b 	.word	0x9b9b9b9b
    14e0:	9b339b9b 	.word	0x9b339b9b
    14e4:	9b459b57 	.word	0x9b459b57
    14e8:	9b9b9b9b 	.word	0x9b9b9b9b
    14ec:	9b899b9b 	.word	0x9b899b9b
    14f0:	9b9b9b9b 	.word	0x9b9b9b9b
    14f4:	82          	.byte	0x82
    14f5:	00          	.byte	0x00
		conv->flag_zero = false;
    14f6:	7823      	ldrb	r3, [r4, #0]
    14f8:	f36f 1386 	bfc	r3, #6, #1
    14fc:	7023      	strb	r3, [r4, #0]
    14fe:	e79a      	b.n	1436 <extract_conversion+0xb6>
		conv->width_star = true;
    1500:	7863      	ldrb	r3, [r4, #1]
    1502:	f043 0301 	orr.w	r3, r3, #1
    1506:	7063      	strb	r3, [r4, #1]
		return ++sp;
    1508:	4633      	mov	r3, r6
    150a:	3301      	adds	r3, #1
    150c:	9301      	str	r3, [sp, #4]
    150e:	e7b1      	b.n	1474 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    1510:	2201      	movs	r2, #1
    1512:	e7a9      	b.n	1468 <extract_conversion+0xe8>
		return sp;
    1514:	9801      	ldr	r0, [sp, #4]
    1516:	e7cf      	b.n	14b8 <extract_conversion+0x138>
		conv->prec_star = true;
    1518:	7863      	ldrb	r3, [r4, #1]
    151a:	f043 0304 	orr.w	r3, r3, #4
    151e:	7063      	strb	r3, [r4, #1]
		return ++sp;
    1520:	4610      	mov	r0, r2
    1522:	3001      	adds	r0, #1
    1524:	9001      	str	r0, [sp, #4]
    1526:	e7c7      	b.n	14b8 <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    1528:	2201      	movs	r2, #1
    152a:	e7bf      	b.n	14ac <extract_conversion+0x12c>
		if (*++sp == 'h') {
    152c:	1c42      	adds	r2, r0, #1
    152e:	7843      	ldrb	r3, [r0, #1]
    1530:	2b68      	cmp	r3, #104	; 0x68
    1532:	d006      	beq.n	1542 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    1534:	7863      	ldrb	r3, [r4, #1]
    1536:	2102      	movs	r1, #2
    1538:	f361 03c6 	bfi	r3, r1, #3, #4
    153c:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    153e:	4610      	mov	r0, r2
    1540:	e01e      	b.n	1580 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    1542:	7863      	ldrb	r3, [r4, #1]
    1544:	2201      	movs	r2, #1
    1546:	f362 03c6 	bfi	r3, r2, #3, #4
    154a:	7063      	strb	r3, [r4, #1]
			++sp;
    154c:	3002      	adds	r0, #2
    154e:	e017      	b.n	1580 <extract_conversion+0x200>
		if (*++sp == 'l') {
    1550:	1c42      	adds	r2, r0, #1
    1552:	7843      	ldrb	r3, [r0, #1]
    1554:	2b6c      	cmp	r3, #108	; 0x6c
    1556:	d006      	beq.n	1566 <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    1558:	7863      	ldrb	r3, [r4, #1]
    155a:	2103      	movs	r1, #3
    155c:	f361 03c6 	bfi	r3, r1, #3, #4
    1560:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    1562:	4610      	mov	r0, r2
    1564:	e00c      	b.n	1580 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    1566:	7863      	ldrb	r3, [r4, #1]
    1568:	2204      	movs	r2, #4
    156a:	f362 03c6 	bfi	r3, r2, #3, #4
    156e:	7063      	strb	r3, [r4, #1]
			++sp;
    1570:	3002      	adds	r0, #2
    1572:	e005      	b.n	1580 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    1574:	7863      	ldrb	r3, [r4, #1]
    1576:	2205      	movs	r2, #5
    1578:	f362 03c6 	bfi	r3, r2, #3, #4
    157c:	7063      	strb	r3, [r4, #1]
		++sp;
    157e:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    1580:	f810 3b01 	ldrb.w	r3, [r0], #1
    1584:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    1586:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    158a:	2a37      	cmp	r2, #55	; 0x37
    158c:	d87d      	bhi.n	168a <extract_conversion+0x30a>
    158e:	e8df f002 	tbb	[pc, r2]
    1592:	7c5e      	.short	0x7c5e
    1594:	5e5e7c7c 	.word	0x5e5e7c7c
    1598:	7c7c7c5e 	.word	0x7c7c7c5e
    159c:	7c7c7c7c 	.word	0x7c7c7c7c
    15a0:	7c7c7c7c 	.word	0x7c7c7c7c
    15a4:	7c7c7c7c 	.word	0x7c7c7c7c
    15a8:	7c7c4f7c 	.word	0x7c7c4f7c
    15ac:	7c7c7c7c 	.word	0x7c7c7c7c
    15b0:	7c5e7c7c 	.word	0x7c5e7c7c
    15b4:	5e5e3a4f 	.word	0x5e5e3a4f
    15b8:	7c3a7c5e 	.word	0x7c3a7c5e
    15bc:	657c7c7c 	.word	0x657c7c7c
    15c0:	7c7c714f 	.word	0x7c7c714f
    15c4:	7c4f7c71 	.word	0x7c4f7c71
    15c8:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    15ca:	7863      	ldrb	r3, [r4, #1]
    15cc:	2206      	movs	r2, #6
    15ce:	f362 03c6 	bfi	r3, r2, #3, #4
    15d2:	7063      	strb	r3, [r4, #1]
		++sp;
    15d4:	3001      	adds	r0, #1
		break;
    15d6:	e7d3      	b.n	1580 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    15d8:	7863      	ldrb	r3, [r4, #1]
    15da:	2207      	movs	r2, #7
    15dc:	f362 03c6 	bfi	r3, r2, #3, #4
    15e0:	7063      	strb	r3, [r4, #1]
		++sp;
    15e2:	3001      	adds	r0, #1
		break;
    15e4:	e7cc      	b.n	1580 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    15e6:	7863      	ldrb	r3, [r4, #1]
    15e8:	2208      	movs	r2, #8
    15ea:	f362 03c6 	bfi	r3, r2, #3, #4
    15ee:	7063      	strb	r3, [r4, #1]
		++sp;
    15f0:	3001      	adds	r0, #1
		conv->unsupported = true;
    15f2:	7823      	ldrb	r3, [r4, #0]
    15f4:	f043 0302 	orr.w	r3, r3, #2
    15f8:	7023      	strb	r3, [r4, #0]
		break;
    15fa:	e7c1      	b.n	1580 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    15fc:	7863      	ldrb	r3, [r4, #1]
    15fe:	f36f 03c6 	bfc	r3, #3, #4
    1602:	7063      	strb	r3, [r4, #1]
		break;
    1604:	e7bc      	b.n	1580 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    1606:	78a2      	ldrb	r2, [r4, #2]
    1608:	2101      	movs	r1, #1
    160a:	f361 0202 	bfi	r2, r1, #0, #3
    160e:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    1610:	7862      	ldrb	r2, [r4, #1]
    1612:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1616:	2a40      	cmp	r2, #64	; 0x40
    1618:	d010      	beq.n	163c <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    161a:	2b63      	cmp	r3, #99	; 0x63
    161c:	d013      	beq.n	1646 <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    161e:	7823      	ldrb	r3, [r4, #0]
    1620:	f3c3 0240 	ubfx	r2, r3, #1, #1
    1624:	4315      	orrs	r5, r2
    1626:	f365 0341 	bfi	r3, r5, #1, #1
    162a:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    162c:	b002      	add	sp, #8
    162e:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    1630:	78a2      	ldrb	r2, [r4, #2]
    1632:	2102      	movs	r1, #2
    1634:	f361 0202 	bfi	r2, r1, #0, #3
    1638:	70a2      	strb	r2, [r4, #2]
    163a:	e7e9      	b.n	1610 <extract_conversion+0x290>
			conv->invalid = true;
    163c:	7821      	ldrb	r1, [r4, #0]
    163e:	f041 0101 	orr.w	r1, r1, #1
    1642:	7021      	strb	r1, [r4, #0]
    1644:	e7e9      	b.n	161a <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1646:	1e15      	subs	r5, r2, #0
    1648:	bf18      	it	ne
    164a:	2501      	movne	r5, #1
    164c:	e7e7      	b.n	161e <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    164e:	78a3      	ldrb	r3, [r4, #2]
    1650:	2204      	movs	r2, #4
    1652:	f362 0302 	bfi	r3, r2, #0, #3
    1656:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    1658:	2501      	movs	r5, #1
			break;
    165a:	e7e0      	b.n	161e <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    165c:	78a3      	ldrb	r3, [r4, #2]
    165e:	2203      	movs	r2, #3
    1660:	f362 0302 	bfi	r3, r2, #0, #3
    1664:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    1666:	7863      	ldrb	r3, [r4, #1]
    1668:	f003 0378 	and.w	r3, r3, #120	; 0x78
    166c:	2b40      	cmp	r3, #64	; 0x40
    166e:	d1d6      	bne.n	161e <extract_conversion+0x29e>
			unsupported = true;
    1670:	2501      	movs	r5, #1
    1672:	e7d4      	b.n	161e <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    1674:	78a3      	ldrb	r3, [r4, #2]
    1676:	2203      	movs	r2, #3
    1678:	f362 0302 	bfi	r3, r2, #0, #3
    167c:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    167e:	7863      	ldrb	r3, [r4, #1]
    1680:	f013 0f78 	tst.w	r3, #120	; 0x78
    1684:	d0cb      	beq.n	161e <extract_conversion+0x29e>
			unsupported = true;
    1686:	2501      	movs	r5, #1
    1688:	e7c9      	b.n	161e <extract_conversion+0x29e>
		conv->invalid = true;
    168a:	7823      	ldrb	r3, [r4, #0]
    168c:	f043 0301 	orr.w	r3, r3, #1
    1690:	7023      	strb	r3, [r4, #0]
		break;
    1692:	e7c4      	b.n	161e <extract_conversion+0x29e>

00001694 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    1694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1698:	b083      	sub	sp, #12
    169a:	4604      	mov	r4, r0
    169c:	460d      	mov	r5, r1
    169e:	9201      	str	r2, [sp, #4]
    16a0:	469a      	mov	sl, r3
    16a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    16a4:	78d3      	ldrb	r3, [r2, #3]
    16a6:	4a32      	ldr	r2, [pc, #200]	; (1770 <encode_uint+0xdc>)
    16a8:	f813 b002 	ldrb.w	fp, [r3, r2]
    16ac:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    16b0:	2b6f      	cmp	r3, #111	; 0x6f
    16b2:	d00f      	beq.n	16d4 <encode_uint+0x40>
    16b4:	d906      	bls.n	16c4 <encode_uint+0x30>
    16b6:	2b70      	cmp	r3, #112	; 0x70
    16b8:	d00f      	beq.n	16da <encode_uint+0x46>
    16ba:	2b78      	cmp	r3, #120	; 0x78
    16bc:	d110      	bne.n	16e0 <encode_uint+0x4c>
		return 16;
    16be:	f04f 0910 	mov.w	r9, #16
    16c2:	e023      	b.n	170c <encode_uint+0x78>
	switch (specifier) {
    16c4:	2b58      	cmp	r3, #88	; 0x58
    16c6:	d002      	beq.n	16ce <encode_uint+0x3a>
    16c8:	f04f 090a 	mov.w	r9, #10
    16cc:	e01e      	b.n	170c <encode_uint+0x78>
		return 16;
    16ce:	f04f 0910 	mov.w	r9, #16
    16d2:	e01b      	b.n	170c <encode_uint+0x78>
		return 8;
    16d4:	f04f 0908 	mov.w	r9, #8
    16d8:	e018      	b.n	170c <encode_uint+0x78>
		return 16;
    16da:	f04f 0910 	mov.w	r9, #16
    16de:	e015      	b.n	170c <encode_uint+0x78>
	switch (specifier) {
    16e0:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    16e4:	e012      	b.n	170c <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    16e6:	b2d2      	uxtb	r2, r2
    16e8:	3230      	adds	r2, #48	; 0x30
    16ea:	b2d2      	uxtb	r2, r2
    16ec:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    16f0:	463a      	mov	r2, r7
    16f2:	4643      	mov	r3, r8
    16f4:	4620      	mov	r0, r4
    16f6:	4629      	mov	r1, r5
    16f8:	f7fe fd02 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    16fc:	42bc      	cmp	r4, r7
    16fe:	f175 0300 	sbcs.w	r3, r5, #0
    1702:	d319      	bcc.n	1738 <encode_uint+0xa4>
    1704:	4556      	cmp	r6, sl
    1706:	d917      	bls.n	1738 <encode_uint+0xa4>
		value /= radix;
    1708:	4604      	mov	r4, r0
    170a:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    170c:	f04f 0800 	mov.w	r8, #0
    1710:	464f      	mov	r7, r9
    1712:	464a      	mov	r2, r9
    1714:	4643      	mov	r3, r8
    1716:	4620      	mov	r0, r4
    1718:	4629      	mov	r1, r5
    171a:	f7fe fcf1 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    171e:	2a09      	cmp	r2, #9
    1720:	d9e1      	bls.n	16e6 <encode_uint+0x52>
    1722:	f1bb 0f01 	cmp.w	fp, #1
    1726:	d003      	beq.n	1730 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    1728:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    172a:	3257      	adds	r2, #87	; 0x57
    172c:	b2d2      	uxtb	r2, r2
    172e:	e7dd      	b.n	16ec <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    1730:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    1732:	3237      	adds	r2, #55	; 0x37
    1734:	b2d2      	uxtb	r2, r2
    1736:	e7d9      	b.n	16ec <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    1738:	9b01      	ldr	r3, [sp, #4]
    173a:	781b      	ldrb	r3, [r3, #0]
    173c:	f013 0f20 	tst.w	r3, #32
    1740:	d005      	beq.n	174e <encode_uint+0xba>
		if (radix == 8) {
    1742:	f1b9 0f08 	cmp.w	r9, #8
    1746:	d006      	beq.n	1756 <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    1748:	f1b9 0f10 	cmp.w	r9, #16
    174c:	d009      	beq.n	1762 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    174e:	4630      	mov	r0, r6
    1750:	b003      	add	sp, #12
    1752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    1756:	9a01      	ldr	r2, [sp, #4]
    1758:	7893      	ldrb	r3, [r2, #2]
    175a:	f043 0308 	orr.w	r3, r3, #8
    175e:	7093      	strb	r3, [r2, #2]
    1760:	e7f5      	b.n	174e <encode_uint+0xba>
			conv->altform_0c = true;
    1762:	9a01      	ldr	r2, [sp, #4]
    1764:	7893      	ldrb	r3, [r2, #2]
    1766:	f043 0310 	orr.w	r3, r3, #16
    176a:	7093      	strb	r3, [r2, #2]
    176c:	e7ef      	b.n	174e <encode_uint+0xba>
    176e:	bf00      	nop
    1770:	0000dff9 	.word	0x0000dff9

00001774 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1778:	b091      	sub	sp, #68	; 0x44
    177a:	4606      	mov	r6, r0
    177c:	460d      	mov	r5, r1
    177e:	4691      	mov	r9, r2
    1780:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1782:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1784:	f899 0000 	ldrb.w	r0, [r9]
    1788:	2800      	cmp	r0, #0
    178a:	f000 82d5 	beq.w	1d38 <cbvprintf+0x5c4>
		if (*fp != '%') {
    178e:	2825      	cmp	r0, #37	; 0x25
    1790:	d008      	beq.n	17a4 <cbvprintf+0x30>
			OUTC(*fp++);
    1792:	f109 0901 	add.w	r9, r9, #1
    1796:	4629      	mov	r1, r5
    1798:	47b0      	blx	r6
    179a:	2800      	cmp	r0, #0
    179c:	f2c0 82cd 	blt.w	1d3a <cbvprintf+0x5c6>
    17a0:	3401      	adds	r4, #1
			continue;
    17a2:	e7ef      	b.n	1784 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    17a4:	2300      	movs	r3, #0
    17a6:	9304      	str	r3, [sp, #16]
    17a8:	9305      	str	r3, [sp, #20]
    17aa:	9306      	str	r3, [sp, #24]
    17ac:	9307      	str	r3, [sp, #28]
    17ae:	9308      	str	r3, [sp, #32]
    17b0:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    17b2:	4649      	mov	r1, r9
    17b4:	a806      	add	r0, sp, #24
    17b6:	f7ff fde3 	bl	1380 <extract_conversion>
    17ba:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    17bc:	f89d 3019 	ldrb.w	r3, [sp, #25]
    17c0:	f013 0f01 	tst.w	r3, #1
    17c4:	f000 8097 	beq.w	18f6 <cbvprintf+0x182>
			width = va_arg(ap, int);
    17c8:	9b03      	ldr	r3, [sp, #12]
    17ca:	1d1a      	adds	r2, r3, #4
    17cc:	9203      	str	r2, [sp, #12]
    17ce:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    17d0:	2f00      	cmp	r7, #0
    17d2:	f2c0 8088 	blt.w	18e6 <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    17d6:	f89d 3019 	ldrb.w	r3, [sp, #25]
    17da:	f013 0f04 	tst.w	r3, #4
    17de:	f000 809c 	beq.w	191a <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    17e2:	9b03      	ldr	r3, [sp, #12]
    17e4:	1d1a      	adds	r2, r3, #4
    17e6:	9203      	str	r2, [sp, #12]
    17e8:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    17ec:	f1ba 0f00 	cmp.w	sl, #0
    17f0:	f2c0 808a 	blt.w	1908 <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    17f4:	2300      	movs	r3, #0
    17f6:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    17f8:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    17fa:	f89d 301a 	ldrb.w	r3, [sp, #26]
    17fe:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    1802:	f89d 1019 	ldrb.w	r1, [sp, #25]
    1806:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    180a:	2b01      	cmp	r3, #1
    180c:	f000 808e 	beq.w	192c <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    1810:	2b02      	cmp	r3, #2
    1812:	f000 80d3 	beq.w	19bc <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    1816:	2b04      	cmp	r3, #4
    1818:	f000 8124 	beq.w	1a64 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    181c:	2b03      	cmp	r3, #3
    181e:	f000 813b 	beq.w	1a98 <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    1822:	f89d 8018 	ldrb.w	r8, [sp, #24]
    1826:	f018 0b03 	ands.w	fp, r8, #3
    182a:	f040 813b 	bne.w	1aa4 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    182e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1832:	3b25      	subs	r3, #37	; 0x25
    1834:	2b53      	cmp	r3, #83	; 0x53
    1836:	f200 81e6 	bhi.w	1c06 <cbvprintf+0x492>
    183a:	e8df f013 	tbh	[pc, r3, lsl #1]
    183e:	0140      	.short	0x0140
    1840:	01e401e4 	.word	0x01e401e4
    1844:	01e401e4 	.word	0x01e401e4
    1848:	01e401e4 	.word	0x01e401e4
    184c:	01e401e4 	.word	0x01e401e4
    1850:	01e401e4 	.word	0x01e401e4
    1854:	01e401e4 	.word	0x01e401e4
    1858:	01e401e4 	.word	0x01e401e4
    185c:	01e401e4 	.word	0x01e401e4
    1860:	01e401e4 	.word	0x01e401e4
    1864:	01e401e4 	.word	0x01e401e4
    1868:	01e401e4 	.word	0x01e401e4
    186c:	01e401e4 	.word	0x01e401e4
    1870:	01e401e4 	.word	0x01e401e4
    1874:	01e401e4 	.word	0x01e401e4
    1878:	01e401e4 	.word	0x01e401e4
    187c:	01e401e4 	.word	0x01e401e4
    1880:	01e401e4 	.word	0x01e401e4
    1884:	01e401e4 	.word	0x01e401e4
    1888:	01e401e4 	.word	0x01e401e4
    188c:	01e401e4 	.word	0x01e401e4
    1890:	01e401e4 	.word	0x01e401e4
    1894:	01e401e4 	.word	0x01e401e4
    1898:	01e401e4 	.word	0x01e401e4
    189c:	01e401e4 	.word	0x01e401e4
    18a0:	01e401e4 	.word	0x01e401e4
    18a4:	01e40181 	.word	0x01e40181
    18a8:	01e401e4 	.word	0x01e401e4
    18ac:	01e401e4 	.word	0x01e401e4
    18b0:	01e401e4 	.word	0x01e401e4
    18b4:	01e401e4 	.word	0x01e401e4
    18b8:	015e01e4 	.word	0x015e01e4
    18bc:	01e40167 	.word	0x01e40167
    18c0:	01e401e4 	.word	0x01e401e4
    18c4:	016701e4 	.word	0x016701e4
    18c8:	01e401e4 	.word	0x01e401e4
    18cc:	01e401e4 	.word	0x01e401e4
    18d0:	018101be 	.word	0x018101be
    18d4:	01e401a2 	.word	0x01e401a2
    18d8:	014d01e4 	.word	0x014d01e4
    18dc:	018101e4 	.word	0x018101e4
    18e0:	01e401e4 	.word	0x01e401e4
    18e4:	0181      	.short	0x0181
				conv->flag_dash = true;
    18e6:	f89d 3018 	ldrb.w	r3, [sp, #24]
    18ea:	f043 0304 	orr.w	r3, r3, #4
    18ee:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    18f2:	427f      	negs	r7, r7
    18f4:	e76f      	b.n	17d6 <cbvprintf+0x62>
		} else if (conv->width_present) {
    18f6:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    18fa:	2b00      	cmp	r3, #0
    18fc:	db02      	blt.n	1904 <cbvprintf+0x190>
		int width = -1;
    18fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1902:	e768      	b.n	17d6 <cbvprintf+0x62>
			width = conv->width_value;
    1904:	9f07      	ldr	r7, [sp, #28]
    1906:	e766      	b.n	17d6 <cbvprintf+0x62>
				conv->prec_present = false;
    1908:	f89d 3019 	ldrb.w	r3, [sp, #25]
    190c:	f36f 0341 	bfc	r3, #1, #1
    1910:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    1914:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    1918:	e76c      	b.n	17f4 <cbvprintf+0x80>
		} else if (conv->prec_present) {
    191a:	f013 0f02 	tst.w	r3, #2
    191e:	d002      	beq.n	1926 <cbvprintf+0x1b2>
			precision = conv->prec_value;
    1920:	f8dd a020 	ldr.w	sl, [sp, #32]
    1924:	e766      	b.n	17f4 <cbvprintf+0x80>
		int precision = -1;
    1926:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    192a:	e763      	b.n	17f4 <cbvprintf+0x80>
			switch (length_mod) {
    192c:	1ecb      	subs	r3, r1, #3
    192e:	2b04      	cmp	r3, #4
    1930:	d804      	bhi.n	193c <cbvprintf+0x1c8>
    1932:	e8df f003 	tbb	[pc, r3]
    1936:	1d0b      	.short	0x1d0b
    1938:	3529      	.short	0x3529
    193a:	35          	.byte	0x35
    193b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    193c:	9b03      	ldr	r3, [sp, #12]
    193e:	1d1a      	adds	r2, r3, #4
    1940:	9203      	str	r2, [sp, #12]
    1942:	681b      	ldr	r3, [r3, #0]
    1944:	17da      	asrs	r2, r3, #31
    1946:	9304      	str	r3, [sp, #16]
    1948:	9205      	str	r2, [sp, #20]
				break;
    194a:	e006      	b.n	195a <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    194c:	9b03      	ldr	r3, [sp, #12]
    194e:	1d1a      	adds	r2, r3, #4
    1950:	9203      	str	r2, [sp, #12]
    1952:	681b      	ldr	r3, [r3, #0]
    1954:	17da      	asrs	r2, r3, #31
    1956:	9304      	str	r3, [sp, #16]
    1958:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    195a:	2901      	cmp	r1, #1
    195c:	d028      	beq.n	19b0 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    195e:	2902      	cmp	r1, #2
    1960:	f47f af5f 	bne.w	1822 <cbvprintf+0xae>
				value->sint = (short)value->sint;
    1964:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    1968:	17da      	asrs	r2, r3, #31
    196a:	9304      	str	r3, [sp, #16]
    196c:	9205      	str	r2, [sp, #20]
    196e:	e758      	b.n	1822 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    1970:	9b03      	ldr	r3, [sp, #12]
    1972:	3307      	adds	r3, #7
    1974:	f023 0307 	bic.w	r3, r3, #7
    1978:	f103 0208 	add.w	r2, r3, #8
    197c:	9203      	str	r2, [sp, #12]
    197e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1982:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    1986:	e7e8      	b.n	195a <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    1988:	9b03      	ldr	r3, [sp, #12]
    198a:	3307      	adds	r3, #7
    198c:	f023 0307 	bic.w	r3, r3, #7
    1990:	f103 0208 	add.w	r2, r3, #8
    1994:	9203      	str	r2, [sp, #12]
    1996:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    199a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    199e:	e7dc      	b.n	195a <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    19a0:	9b03      	ldr	r3, [sp, #12]
    19a2:	1d1a      	adds	r2, r3, #4
    19a4:	9203      	str	r2, [sp, #12]
    19a6:	681b      	ldr	r3, [r3, #0]
    19a8:	17da      	asrs	r2, r3, #31
				value->sint =
    19aa:	9304      	str	r3, [sp, #16]
    19ac:	9205      	str	r2, [sp, #20]
				break;
    19ae:	e7d4      	b.n	195a <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    19b0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    19b4:	9304      	str	r3, [sp, #16]
    19b6:	2300      	movs	r3, #0
    19b8:	9305      	str	r3, [sp, #20]
    19ba:	e732      	b.n	1822 <cbvprintf+0xae>
			switch (length_mod) {
    19bc:	1ecb      	subs	r3, r1, #3
    19be:	2b04      	cmp	r3, #4
    19c0:	d804      	bhi.n	19cc <cbvprintf+0x258>
    19c2:	e8df f003 	tbb	[pc, r3]
    19c6:	1f0b      	.short	0x1f0b
    19c8:	4135      	.short	0x4135
    19ca:	41          	.byte	0x41
    19cb:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    19cc:	9b03      	ldr	r3, [sp, #12]
    19ce:	1d1a      	adds	r2, r3, #4
    19d0:	9203      	str	r2, [sp, #12]
    19d2:	681b      	ldr	r3, [r3, #0]
    19d4:	9304      	str	r3, [sp, #16]
    19d6:	2300      	movs	r3, #0
    19d8:	9305      	str	r3, [sp, #20]
				break;
    19da:	e01e      	b.n	1a1a <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    19dc:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    19e0:	2b63      	cmp	r3, #99	; 0x63
    19e2:	d007      	beq.n	19f4 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    19e4:	9b03      	ldr	r3, [sp, #12]
    19e6:	1d1a      	adds	r2, r3, #4
    19e8:	9203      	str	r2, [sp, #12]
    19ea:	681b      	ldr	r3, [r3, #0]
    19ec:	9304      	str	r3, [sp, #16]
    19ee:	2300      	movs	r3, #0
    19f0:	9305      	str	r3, [sp, #20]
    19f2:	e012      	b.n	1a1a <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    19f4:	9b03      	ldr	r3, [sp, #12]
    19f6:	1d1a      	adds	r2, r3, #4
    19f8:	9203      	str	r2, [sp, #12]
    19fa:	681b      	ldr	r3, [r3, #0]
    19fc:	9304      	str	r3, [sp, #16]
    19fe:	2300      	movs	r3, #0
    1a00:	9305      	str	r3, [sp, #20]
    1a02:	e00a      	b.n	1a1a <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    1a04:	9b03      	ldr	r3, [sp, #12]
    1a06:	3307      	adds	r3, #7
    1a08:	f023 0307 	bic.w	r3, r3, #7
    1a0c:	f103 0208 	add.w	r2, r3, #8
    1a10:	9203      	str	r2, [sp, #12]
    1a12:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    1a16:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    1a1a:	2901      	cmp	r1, #1
    1a1c:	d01c      	beq.n	1a58 <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    1a1e:	2902      	cmp	r1, #2
    1a20:	f47f aeff 	bne.w	1822 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    1a24:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    1a28:	9304      	str	r3, [sp, #16]
    1a2a:	2300      	movs	r3, #0
    1a2c:	9305      	str	r3, [sp, #20]
    1a2e:	e6f8      	b.n	1822 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    1a30:	9b03      	ldr	r3, [sp, #12]
    1a32:	3307      	adds	r3, #7
    1a34:	f023 0307 	bic.w	r3, r3, #7
    1a38:	f103 0208 	add.w	r2, r3, #8
    1a3c:	9203      	str	r2, [sp, #12]
    1a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    1a42:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    1a46:	e7e8      	b.n	1a1a <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    1a48:	9b03      	ldr	r3, [sp, #12]
    1a4a:	1d1a      	adds	r2, r3, #4
    1a4c:	9203      	str	r2, [sp, #12]
    1a4e:	681b      	ldr	r3, [r3, #0]
				value->uint =
    1a50:	9304      	str	r3, [sp, #16]
    1a52:	2300      	movs	r3, #0
    1a54:	9305      	str	r3, [sp, #20]
				break;
    1a56:	e7e0      	b.n	1a1a <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    1a58:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1a5c:	9304      	str	r3, [sp, #16]
    1a5e:	2300      	movs	r3, #0
    1a60:	9305      	str	r3, [sp, #20]
    1a62:	e6de      	b.n	1822 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    1a64:	2908      	cmp	r1, #8
    1a66:	d00b      	beq.n	1a80 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    1a68:	9b03      	ldr	r3, [sp, #12]
    1a6a:	3307      	adds	r3, #7
    1a6c:	f023 0307 	bic.w	r3, r3, #7
    1a70:	f103 0208 	add.w	r2, r3, #8
    1a74:	9203      	str	r2, [sp, #12]
    1a76:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1a7e:	e6d0      	b.n	1822 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    1a80:	9b03      	ldr	r3, [sp, #12]
    1a82:	3307      	adds	r3, #7
    1a84:	f023 0307 	bic.w	r3, r3, #7
    1a88:	f103 0208 	add.w	r2, r3, #8
    1a8c:	9203      	str	r2, [sp, #12]
    1a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a92:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1a96:	e6c4      	b.n	1822 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    1a98:	9b03      	ldr	r3, [sp, #12]
    1a9a:	1d1a      	adds	r2, r3, #4
    1a9c:	9203      	str	r2, [sp, #12]
    1a9e:	681b      	ldr	r3, [r3, #0]
    1aa0:	9304      	str	r3, [sp, #16]
    1aa2:	e6be      	b.n	1822 <cbvprintf+0xae>
			OUTS(sp, fp);
    1aa4:	9f02      	ldr	r7, [sp, #8]
    1aa6:	463b      	mov	r3, r7
    1aa8:	464a      	mov	r2, r9
    1aaa:	4629      	mov	r1, r5
    1aac:	4630      	mov	r0, r6
    1aae:	f008 ff04 	bl	a8ba <outs>
    1ab2:	2800      	cmp	r0, #0
    1ab4:	f2c0 8141 	blt.w	1d3a <cbvprintf+0x5c6>
    1ab8:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    1aba:	46b9      	mov	r9, r7
			continue;
    1abc:	e662      	b.n	1784 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    1abe:	4629      	mov	r1, r5
    1ac0:	2025      	movs	r0, #37	; 0x25
    1ac2:	47b0      	blx	r6
    1ac4:	2800      	cmp	r0, #0
    1ac6:	f2c0 8138 	blt.w	1d3a <cbvprintf+0x5c6>
    1aca:	3401      	adds	r4, #1
		char sign = 0;
    1acc:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    1ace:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1ad2:	f04f 0900 	mov.w	r9, #0
			break;
    1ad6:	e09b      	b.n	1c10 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    1ad8:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    1adc:	f1ba 0f00 	cmp.w	sl, #0
    1ae0:	db07      	blt.n	1af2 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    1ae2:	4651      	mov	r1, sl
    1ae4:	4648      	mov	r0, r9
    1ae6:	f00a f970 	bl	bdca <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    1aea:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    1aee:	46d8      	mov	r8, fp
			precision = -1;

			break;
    1af0:	e08e      	b.n	1c10 <cbvprintf+0x49c>
				len = strlen(bps);
    1af2:	4648      	mov	r0, r9
    1af4:	f7fe fc71 	bl	3da <strlen>
    1af8:	e7f7      	b.n	1aea <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1afa:	9b04      	ldr	r3, [sp, #16]
    1afc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    1b00:	46d8      	mov	r8, fp
			bpe = buf + 1;
    1b02:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    1b06:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    1b0a:	e081      	b.n	1c10 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    1b0c:	f018 0f08 	tst.w	r8, #8
    1b10:	d105      	bne.n	1b1e <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    1b12:	f018 0810 	ands.w	r8, r8, #16
    1b16:	d004      	beq.n	1b22 <cbvprintf+0x3ae>
				sign = ' ';
    1b18:	f04f 0820 	mov.w	r8, #32
    1b1c:	e001      	b.n	1b22 <cbvprintf+0x3ae>
				sign = '+';
    1b1e:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    1b22:	9a04      	ldr	r2, [sp, #16]
    1b24:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    1b26:	2b00      	cmp	r3, #0
    1b28:	db02      	blt.n	1b30 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    1b2a:	9204      	str	r2, [sp, #16]
    1b2c:	9305      	str	r3, [sp, #20]
    1b2e:	e008      	b.n	1b42 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    1b30:	4252      	negs	r2, r2
    1b32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1b36:	9204      	str	r2, [sp, #16]
    1b38:	9305      	str	r3, [sp, #20]
				sign = '-';
    1b3a:	f04f 082d 	mov.w	r8, #45	; 0x2d
    1b3e:	e000      	b.n	1b42 <cbvprintf+0x3ce>
		switch (conv->specifier) {
    1b40:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    1b42:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1b46:	9300      	str	r3, [sp, #0]
    1b48:	ab0a      	add	r3, sp, #40	; 0x28
    1b4a:	aa06      	add	r2, sp, #24
    1b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    1b50:	f7ff fda0 	bl	1694 <encode_uint>
    1b54:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    1b56:	f1ba 0f00 	cmp.w	sl, #0
    1b5a:	f2c0 8088 	blt.w	1c6e <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    1b5e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1b62:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    1b66:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1b6a:	f36f 1286 	bfc	r2, #6, #1
    1b6e:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    1b72:	459a      	cmp	sl, r3
    1b74:	d97e      	bls.n	1c74 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    1b76:	ebaa 0303 	sub.w	r3, sl, r3
    1b7a:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    1b7c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1b80:	e046      	b.n	1c10 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    1b82:	9804      	ldr	r0, [sp, #16]
    1b84:	b928      	cbnz	r0, 1b92 <cbvprintf+0x41e>
		char sign = 0;
    1b86:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    1b88:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 1d40 <cbvprintf+0x5cc>
			bps = "(nil)";
    1b8c:	f1aa 0905 	sub.w	r9, sl, #5
    1b90:	e03e      	b.n	1c10 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1b92:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    1b96:	9300      	str	r3, [sp, #0]
    1b98:	ab0a      	add	r3, sp, #40	; 0x28
    1b9a:	aa06      	add	r2, sp, #24
    1b9c:	2100      	movs	r1, #0
    1b9e:	f7ff fd79 	bl	1694 <encode_uint>
    1ba2:	4681      	mov	r9, r0
				conv->altform_0c = true;
    1ba4:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1ba8:	f043 0310 	orr.w	r3, r3, #16
    1bac:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    1bb0:	2378      	movs	r3, #120	; 0x78
    1bb2:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    1bb6:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    1bb8:	e7cd      	b.n	1b56 <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    1bba:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    1bbc:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1bc0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    1bc4:	2b07      	cmp	r3, #7
    1bc6:	d806      	bhi.n	1bd6 <cbvprintf+0x462>
    1bc8:	e8df f003 	tbb	[pc, r3]
    1bcc:	0f0d0b04 	.word	0x0f0d0b04
    1bd0:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    1bd4:	6014      	str	r4, [r2, #0]
		char sign = 0;
    1bd6:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    1bd8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1bdc:	f04f 0900 	mov.w	r9, #0
}
    1be0:	e016      	b.n	1c10 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    1be2:	7014      	strb	r4, [r2, #0]
		break;
    1be4:	e7f7      	b.n	1bd6 <cbvprintf+0x462>
		*(short *)dp = (short)count;
    1be6:	8014      	strh	r4, [r2, #0]
		break;
    1be8:	e7f5      	b.n	1bd6 <cbvprintf+0x462>
		*(long *)dp = (long)count;
    1bea:	6014      	str	r4, [r2, #0]
		break;
    1bec:	e7f3      	b.n	1bd6 <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    1bee:	17e3      	asrs	r3, r4, #31
    1bf0:	6014      	str	r4, [r2, #0]
    1bf2:	6053      	str	r3, [r2, #4]
		break;
    1bf4:	e7ef      	b.n	1bd6 <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    1bf6:	17e3      	asrs	r3, r4, #31
    1bf8:	6014      	str	r4, [r2, #0]
    1bfa:	6053      	str	r3, [r2, #4]
		break;
    1bfc:	e7eb      	b.n	1bd6 <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    1bfe:	6014      	str	r4, [r2, #0]
		break;
    1c00:	e7e9      	b.n	1bd6 <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1c02:	6014      	str	r4, [r2, #0]
		break;
    1c04:	e7e7      	b.n	1bd6 <cbvprintf+0x462>
		switch (conv->specifier) {
    1c06:	46d8      	mov	r8, fp
    1c08:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1c0c:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    1c10:	f1b9 0f00 	cmp.w	r9, #0
    1c14:	f000 808d 	beq.w	1d32 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    1c18:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    1c1c:	f1b8 0f00 	cmp.w	r8, #0
    1c20:	d000      	beq.n	1c24 <cbvprintf+0x4b0>
			nj_len += 1U;
    1c22:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    1c24:	f89d 101a 	ldrb.w	r1, [sp, #26]
    1c28:	f011 0f10 	tst.w	r1, #16
    1c2c:	d025      	beq.n	1c7a <cbvprintf+0x506>
			nj_len += 2U;
    1c2e:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    1c30:	9b07      	ldr	r3, [sp, #28]
    1c32:	4413      	add	r3, r2
		if (conv->pad_fp) {
    1c34:	f011 0f40 	tst.w	r1, #64	; 0x40
    1c38:	d001      	beq.n	1c3e <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    1c3a:	9a08      	ldr	r2, [sp, #32]
    1c3c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    1c3e:	2f00      	cmp	r7, #0
    1c40:	dd31      	ble.n	1ca6 <cbvprintf+0x532>
			width -= (int)nj_len;
    1c42:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    1c44:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1c48:	f013 0f04 	tst.w	r3, #4
    1c4c:	d12b      	bne.n	1ca6 <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    1c4e:	f013 0f40 	tst.w	r3, #64	; 0x40
    1c52:	d017      	beq.n	1c84 <cbvprintf+0x510>
					if (sign != 0) {
    1c54:	f1b8 0f00 	cmp.w	r8, #0
    1c58:	d017      	beq.n	1c8a <cbvprintf+0x516>
						OUTC(sign);
    1c5a:	4629      	mov	r1, r5
    1c5c:	4640      	mov	r0, r8
    1c5e:	47b0      	blx	r6
    1c60:	2800      	cmp	r0, #0
    1c62:	db6a      	blt.n	1d3a <cbvprintf+0x5c6>
    1c64:	3401      	adds	r4, #1
						sign = 0;
    1c66:	46d8      	mov	r8, fp
					}
					pad = '0';
    1c68:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1c6c:	e00f      	b.n	1c8e <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    1c6e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1c72:	e7cd      	b.n	1c10 <cbvprintf+0x49c>
    1c74:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1c78:	e7ca      	b.n	1c10 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    1c7a:	f011 0f08 	tst.w	r1, #8
    1c7e:	d0d7      	beq.n	1c30 <cbvprintf+0x4bc>
			nj_len += 1U;
    1c80:	3201      	adds	r2, #1
    1c82:	e7d5      	b.n	1c30 <cbvprintf+0x4bc>
				char pad = ' ';
    1c84:	f04f 0b20 	mov.w	fp, #32
    1c88:	e001      	b.n	1c8e <cbvprintf+0x51a>
					pad = '0';
    1c8a:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1c8e:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    1c90:	1e5f      	subs	r7, r3, #1
    1c92:	2b00      	cmp	r3, #0
    1c94:	dd07      	ble.n	1ca6 <cbvprintf+0x532>
					OUTC(pad);
    1c96:	4629      	mov	r1, r5
    1c98:	4658      	mov	r0, fp
    1c9a:	47b0      	blx	r6
    1c9c:	2800      	cmp	r0, #0
    1c9e:	db4c      	blt.n	1d3a <cbvprintf+0x5c6>
    1ca0:	3401      	adds	r4, #1
				while (width-- > 0) {
    1ca2:	463b      	mov	r3, r7
    1ca4:	e7f4      	b.n	1c90 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1ca6:	f1b8 0f00 	cmp.w	r8, #0
    1caa:	d005      	beq.n	1cb8 <cbvprintf+0x544>
			OUTC(sign);
    1cac:	4629      	mov	r1, r5
    1cae:	4640      	mov	r0, r8
    1cb0:	47b0      	blx	r6
    1cb2:	2800      	cmp	r0, #0
    1cb4:	db41      	blt.n	1d3a <cbvprintf+0x5c6>
    1cb6:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    1cb8:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1cbc:	f3c3 1200 	ubfx	r2, r3, #4, #1
    1cc0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1cc4:	4313      	orrs	r3, r2
    1cc6:	d005      	beq.n	1cd4 <cbvprintf+0x560>
				OUTC('0');
    1cc8:	4629      	mov	r1, r5
    1cca:	2030      	movs	r0, #48	; 0x30
    1ccc:	47b0      	blx	r6
    1cce:	2800      	cmp	r0, #0
    1cd0:	db33      	blt.n	1d3a <cbvprintf+0x5c6>
    1cd2:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    1cd4:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1cd8:	f013 0f10 	tst.w	r3, #16
    1cdc:	d006      	beq.n	1cec <cbvprintf+0x578>
				OUTC(conv->specifier);
    1cde:	4629      	mov	r1, r5
    1ce0:	f89d 001b 	ldrb.w	r0, [sp, #27]
    1ce4:	47b0      	blx	r6
    1ce6:	2800      	cmp	r0, #0
    1ce8:	db27      	blt.n	1d3a <cbvprintf+0x5c6>
    1cea:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    1cec:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    1cee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    1cf2:	2b00      	cmp	r3, #0
    1cf4:	dd07      	ble.n	1d06 <cbvprintf+0x592>
				OUTC('0');
    1cf6:	4629      	mov	r1, r5
    1cf8:	2030      	movs	r0, #48	; 0x30
    1cfa:	47b0      	blx	r6
    1cfc:	2800      	cmp	r0, #0
    1cfe:	db1c      	blt.n	1d3a <cbvprintf+0x5c6>
    1d00:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    1d02:	4643      	mov	r3, r8
    1d04:	e7f3      	b.n	1cee <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    1d06:	4653      	mov	r3, sl
    1d08:	464a      	mov	r2, r9
    1d0a:	4629      	mov	r1, r5
    1d0c:	4630      	mov	r0, r6
    1d0e:	f008 fdd4 	bl	a8ba <outs>
    1d12:	2800      	cmp	r0, #0
    1d14:	db11      	blt.n	1d3a <cbvprintf+0x5c6>
    1d16:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    1d18:	2f00      	cmp	r7, #0
    1d1a:	dd07      	ble.n	1d2c <cbvprintf+0x5b8>
			OUTC(' ');
    1d1c:	4629      	mov	r1, r5
    1d1e:	2020      	movs	r0, #32
    1d20:	47b0      	blx	r6
    1d22:	2800      	cmp	r0, #0
    1d24:	db09      	blt.n	1d3a <cbvprintf+0x5c6>
    1d26:	3401      	adds	r4, #1
			--width;
    1d28:	3f01      	subs	r7, #1
    1d2a:	e7f5      	b.n	1d18 <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    1d2c:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1d30:	e528      	b.n	1784 <cbvprintf+0x10>
    1d32:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1d36:	e525      	b.n	1784 <cbvprintf+0x10>
		}
	}

	return count;
    1d38:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    1d3a:	b011      	add	sp, #68	; 0x44
    1d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d40:	0000c631 	.word	0x0000c631

00001d44 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1d44:	b508      	push	{r3, lr}
	__asm__ volatile(
    1d46:	f04f 0220 	mov.w	r2, #32
    1d4a:	f3ef 8311 	mrs	r3, BASEPRI
    1d4e:	f382 8812 	msr	BASEPRI_MAX, r2
    1d52:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1d56:	f001 ff8f 	bl	3c78 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1d5a:	4803      	ldr	r0, [pc, #12]	; (1d68 <sys_reboot+0x24>)
    1d5c:	f008 fcc5 	bl	a6ea <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1d60:	f000 ffa8 	bl	2cb4 <arch_cpu_idle>
    1d64:	e7fc      	b.n	1d60 <sys_reboot+0x1c>
    1d66:	bf00      	nop
    1d68:	0000c634 	.word	0x0000c634

00001d6c <msg_process>:

static void msg_process(union log_msgs msg, bool bypass)
{
	struct log_backend const *backend;

	if (!bypass) {
    1d6c:	2900      	cmp	r1, #0
    1d6e:	d150      	bne.n	1e12 <msg_process+0xa6>
{
    1d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1d74:	4607      	mov	r7, r0
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    1d76:	2400      	movs	r4, #0
    1d78:	e022      	b.n	1dc0 <msg_process+0x54>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
    1d7a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1e14 <msg_process+0xa8>
    1d7e:	f44f 7399 	mov.w	r3, #306	; 0x132
    1d82:	464a      	mov	r2, r9
    1d84:	4924      	ldr	r1, [pc, #144]	; (1e18 <msg_process+0xac>)
    1d86:	4825      	ldr	r0, [pc, #148]	; (1e1c <msg_process+0xb0>)
    1d88:	f008 fdb8 	bl	a8fc <assert_print>
    1d8c:	f44f 7199 	mov.w	r1, #306	; 0x132
    1d90:	4648      	mov	r0, r9
    1d92:	f008 fdac 	bl	a8ee <assert_post_action>
    1d96:	e01f      	b.n	1dd8 <msg_process+0x6c>
	__ASSERT_NO_MSG(backend != NULL);
    1d98:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1e14 <msg_process+0xa8>
    1d9c:	2385      	movs	r3, #133	; 0x85
    1d9e:	464a      	mov	r2, r9
    1da0:	491d      	ldr	r1, [pc, #116]	; (1e18 <msg_process+0xac>)
    1da2:	481e      	ldr	r0, [pc, #120]	; (1e1c <msg_process+0xb0>)
    1da4:	f008 fdaa 	bl	a8fc <assert_print>
    1da8:	2185      	movs	r1, #133	; 0x85
    1daa:	4648      	mov	r0, r9
    1dac:	f008 fd9f 	bl	a8ee <assert_post_action>
    1db0:	e01e      	b.n	1df0 <msg_process+0x84>
	backend->api->process(backend, msg);
    1db2:	f858 3005 	ldr.w	r3, [r8, r5]
    1db6:	681b      	ldr	r3, [r3, #0]
    1db8:	4639      	mov	r1, r7
    1dba:	4630      	mov	r0, r6
    1dbc:	4798      	blx	r3
    1dbe:	3401      	adds	r4, #1
    1dc0:	4b17      	ldr	r3, [pc, #92]	; (1e20 <msg_process+0xb4>)
    1dc2:	4a18      	ldr	r2, [pc, #96]	; (1e24 <msg_process+0xb8>)
    1dc4:	1a9b      	subs	r3, r3, r2
    1dc6:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1dca:	da20      	bge.n	1e0e <msg_process+0xa2>
	return &__log_backends_start[idx];
    1dcc:	ea4f 1804 	mov.w	r8, r4, lsl #4
    1dd0:	4d14      	ldr	r5, [pc, #80]	; (1e24 <msg_process+0xb8>)
	__ASSERT_NO_MSG(backend != NULL);
    1dd2:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    1dd6:	d0d0      	beq.n	1d7a <msg_process+0xe>
	return backend->cb->active;
    1dd8:	6873      	ldr	r3, [r6, #4]
    1dda:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);
			if (log_backend_is_active(backend) &&
    1ddc:	2b00      	cmp	r3, #0
    1dde:	d0ee      	beq.n	1dbe <msg_process+0x52>
			    msg_filter_check(backend, msg)) {
    1de0:	4639      	mov	r1, r7
    1de2:	4630      	mov	r0, r6
    1de4:	f008 fd9b 	bl	a91e <msg_filter_check>
			if (log_backend_is_active(backend) &&
    1de8:	2800      	cmp	r0, #0
    1dea:	d0e8      	beq.n	1dbe <msg_process+0x52>
	__ASSERT_NO_MSG(backend != NULL);
    1dec:	2e00      	cmp	r6, #0
    1dee:	d0d3      	beq.n	1d98 <msg_process+0x2c>
	__ASSERT_NO_MSG(msg != NULL);
    1df0:	2f00      	cmp	r7, #0
    1df2:	d1de      	bne.n	1db2 <msg_process+0x46>
    1df4:	f8df 901c 	ldr.w	r9, [pc, #28]	; 1e14 <msg_process+0xa8>
    1df8:	2386      	movs	r3, #134	; 0x86
    1dfa:	464a      	mov	r2, r9
    1dfc:	490a      	ldr	r1, [pc, #40]	; (1e28 <msg_process+0xbc>)
    1dfe:	4807      	ldr	r0, [pc, #28]	; (1e1c <msg_process+0xb0>)
    1e00:	f008 fd7c 	bl	a8fc <assert_print>
    1e04:	2186      	movs	r1, #134	; 0x86
    1e06:	4648      	mov	r0, r9
    1e08:	f008 fd71 	bl	a8ee <assert_post_action>
    1e0c:	e7d1      	b.n	1db2 <msg_process+0x46>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    1e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1e12:	4770      	bx	lr
    1e14:	0000c660 	.word	0x0000c660
    1e18:	0000c698 	.word	0x0000c698
    1e1c:	0000c254 	.word	0x0000c254
    1e20:	0000c0c8 	.word	0x0000c0c8
    1e24:	0000c0a8 	.word	0x0000c0a8
    1e28:	0000c6b0 	.word	0x0000c6b0

00001e2c <log_format_func_t_get>:
}
    1e2c:	4b01      	ldr	r3, [pc, #4]	; (1e34 <log_format_func_t_get+0x8>)
    1e2e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1e32:	4770      	bx	lr
    1e34:	0000c734 	.word	0x0000c734

00001e38 <log_init>:
{
    1e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
    1e3a:	4b20      	ldr	r3, [pc, #128]	; (1ebc <log_init+0x84>)
    1e3c:	4a20      	ldr	r2, [pc, #128]	; (1ec0 <log_init+0x88>)
    1e3e:	1a9b      	subs	r3, r3, r2
    1e40:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    1e42:	2b90      	cmp	r3, #144	; 0x90
    1e44:	d80e      	bhi.n	1e64 <log_init+0x2c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1e46:	4b1f      	ldr	r3, [pc, #124]	; (1ec4 <log_init+0x8c>)
    1e48:	f3bf 8f5b 	dmb	ish
    1e4c:	e853 2f00 	ldrex	r2, [r3]
    1e50:	1c51      	adds	r1, r2, #1
    1e52:	e843 1000 	strex	r0, r1, [r3]
    1e56:	2800      	cmp	r0, #0
    1e58:	d1f8      	bne.n	1e4c <log_init+0x14>
    1e5a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    1e5e:	bb5a      	cbnz	r2, 1eb8 <log_init+0x80>
	for (i = 0; i < log_backend_count_get(); i++) {
    1e60:	2400      	movs	r4, #0
    1e62:	e017      	b.n	1e94 <log_init+0x5c>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    1e64:	4c18      	ldr	r4, [pc, #96]	; (1ec8 <log_init+0x90>)
    1e66:	f240 2373 	movw	r3, #627	; 0x273
    1e6a:	4622      	mov	r2, r4
    1e6c:	4917      	ldr	r1, [pc, #92]	; (1ecc <log_init+0x94>)
    1e6e:	4818      	ldr	r0, [pc, #96]	; (1ed0 <log_init+0x98>)
    1e70:	f008 fd44 	bl	a8fc <assert_print>
    1e74:	f240 2173 	movw	r1, #627	; 0x273
    1e78:	4620      	mov	r0, r4
    1e7a:	f008 fd38 	bl	a8ee <assert_post_action>
    1e7e:	e7e2      	b.n	1e46 <log_init+0xe>
					   backend->cb->ctx,
    1e80:	4b0f      	ldr	r3, [pc, #60]	; (1ec0 <log_init+0x88>)
    1e82:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    1e86:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    1e88:	2204      	movs	r2, #4
    1e8a:	6819      	ldr	r1, [r3, #0]
    1e8c:	4628      	mov	r0, r5
    1e8e:	f000 f8d3 	bl	2038 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1e92:	3401      	adds	r4, #1
    1e94:	42b4      	cmp	r4, r6
    1e96:	da0f      	bge.n	1eb8 <log_init+0x80>
		const struct log_backend *backend = log_backend_get(i);
    1e98:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
    1e9a:	4d09      	ldr	r5, [pc, #36]	; (1ec0 <log_init+0x88>)
    1e9c:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    1ea0:	7b2b      	ldrb	r3, [r5, #12]
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	d0f5      	beq.n	1e92 <log_init+0x5a>
			if (backend->api->init != NULL) {
    1ea6:	0123      	lsls	r3, r4, #4
    1ea8:	4a05      	ldr	r2, [pc, #20]	; (1ec0 <log_init+0x88>)
    1eaa:	58d3      	ldr	r3, [r2, r3]
    1eac:	699b      	ldr	r3, [r3, #24]
    1eae:	2b00      	cmp	r3, #0
    1eb0:	d0e6      	beq.n	1e80 <log_init+0x48>
				backend->api->init(backend);
    1eb2:	4628      	mov	r0, r5
    1eb4:	4798      	blx	r3
    1eb6:	e7e3      	b.n	1e80 <log_init+0x48>
}
    1eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1eba:	bf00      	nop
    1ebc:	0000c0c8 	.word	0x0000c0c8
    1ec0:	0000c0a8 	.word	0x0000c0a8
    1ec4:	200046ec 	.word	0x200046ec
    1ec8:	0000c6c4 	.word	0x0000c6c4
    1ecc:	0000c70c 	.word	0x0000c70c
    1ed0:	0000c254 	.word	0x0000c254

00001ed4 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    1ed4:	b138      	cbz	r0, 1ee6 <log_set_timestamp_func+0x12>
{
    1ed6:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    1ed8:	4a04      	ldr	r2, [pc, #16]	; (1eec <log_set_timestamp_func+0x18>)
    1eda:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    1edc:	4608      	mov	r0, r1
    1ede:	f000 fac3 	bl	2468 <log_output_timestamp_freq_set>
	return 0;
    1ee2:	2000      	movs	r0, #0
}
    1ee4:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1ee6:	f06f 0015 	mvn.w	r0, #21
}
    1eea:	4770      	bx	lr
    1eec:	20004004 	.word	0x20004004

00001ef0 <log_core_init>:
{
    1ef0:	b508      	push	{r3, lr}
	panic_mode = false;
    1ef2:	2300      	movs	r3, #0
    1ef4:	4a04      	ldr	r2, [pc, #16]	; (1f08 <log_core_init+0x18>)
    1ef6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1ef8:	4a04      	ldr	r2, [pc, #16]	; (1f0c <log_core_init+0x1c>)
    1efa:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    1efc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1f00:	4803      	ldr	r0, [pc, #12]	; (1f10 <log_core_init+0x20>)
    1f02:	f7ff ffe7 	bl	1ed4 <log_set_timestamp_func>
}
    1f06:	bd08      	pop	{r3, pc}
    1f08:	2000544d 	.word	0x2000544d
    1f0c:	200046e8 	.word	0x200046e8
    1f10:	0000a923 	.word	0x0000a923

00001f14 <z_impl_log_panic>:
	if (panic_mode) {
    1f14:	4b20      	ldr	r3, [pc, #128]	; (1f98 <z_impl_log_panic+0x84>)
    1f16:	781b      	ldrb	r3, [r3, #0]
    1f18:	b103      	cbz	r3, 1f1c <z_impl_log_panic+0x8>
    1f1a:	4770      	bx	lr
{
    1f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	log_init();
    1f20:	f7ff ff8a 	bl	1e38 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1f24:	2400      	movs	r4, #0
    1f26:	e013      	b.n	1f50 <z_impl_log_panic+0x3c>
	__ASSERT_NO_MSG(backend != NULL);
    1f28:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1f9c <z_impl_log_panic+0x88>
    1f2c:	f44f 7399 	mov.w	r3, #306	; 0x132
    1f30:	4642      	mov	r2, r8
    1f32:	491b      	ldr	r1, [pc, #108]	; (1fa0 <z_impl_log_panic+0x8c>)
    1f34:	481b      	ldr	r0, [pc, #108]	; (1fa4 <z_impl_log_panic+0x90>)
    1f36:	f008 fce1 	bl	a8fc <assert_print>
    1f3a:	f44f 7199 	mov.w	r1, #306	; 0x132
    1f3e:	4640      	mov	r0, r8
    1f40:	f008 fcd5 	bl	a8ee <assert_post_action>
    1f44:	e00f      	b.n	1f66 <z_impl_log_panic+0x52>
	backend->api->panic(backend);
    1f46:	597b      	ldr	r3, [r7, r5]
    1f48:	695b      	ldr	r3, [r3, #20]
    1f4a:	4630      	mov	r0, r6
    1f4c:	4798      	blx	r3
    1f4e:	3401      	adds	r4, #1
    1f50:	4b15      	ldr	r3, [pc, #84]	; (1fa8 <z_impl_log_panic+0x94>)
    1f52:	4a16      	ldr	r2, [pc, #88]	; (1fac <z_impl_log_panic+0x98>)
    1f54:	1a9b      	subs	r3, r3, r2
    1f56:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1f5a:	da17      	bge.n	1f8c <z_impl_log_panic+0x78>
	return &__log_backends_start[idx];
    1f5c:	0127      	lsls	r7, r4, #4
    1f5e:	4d13      	ldr	r5, [pc, #76]	; (1fac <z_impl_log_panic+0x98>)
	__ASSERT_NO_MSG(backend != NULL);
    1f60:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
    1f64:	d0e0      	beq.n	1f28 <z_impl_log_panic+0x14>
	return backend->cb->active;
    1f66:	6873      	ldr	r3, [r6, #4]
    1f68:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1f6a:	2b00      	cmp	r3, #0
    1f6c:	d0ef      	beq.n	1f4e <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
    1f6e:	2e00      	cmp	r6, #0
    1f70:	d1e9      	bne.n	1f46 <z_impl_log_panic+0x32>
    1f72:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1f9c <z_impl_log_panic+0x88>
    1f76:	23d7      	movs	r3, #215	; 0xd7
    1f78:	4642      	mov	r2, r8
    1f7a:	4909      	ldr	r1, [pc, #36]	; (1fa0 <z_impl_log_panic+0x8c>)
    1f7c:	4809      	ldr	r0, [pc, #36]	; (1fa4 <z_impl_log_panic+0x90>)
    1f7e:	f008 fcbd 	bl	a8fc <assert_print>
    1f82:	21d7      	movs	r1, #215	; 0xd7
    1f84:	4640      	mov	r0, r8
    1f86:	f008 fcb2 	bl	a8ee <assert_post_action>
    1f8a:	e7dc      	b.n	1f46 <z_impl_log_panic+0x32>
	panic_mode = true;
    1f8c:	4b02      	ldr	r3, [pc, #8]	; (1f98 <z_impl_log_panic+0x84>)
    1f8e:	2201      	movs	r2, #1
    1f90:	701a      	strb	r2, [r3, #0]
}
    1f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f96:	bf00      	nop
    1f98:	2000544d 	.word	0x2000544d
    1f9c:	0000c660 	.word	0x0000c660
    1fa0:	0000c698 	.word	0x0000c698
    1fa4:	0000c254 	.word	0x0000c254
    1fa8:	0000c0c8 	.word	0x0000c0c8
    1fac:	0000c0a8 	.word	0x0000c0a8

00001fb0 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    1fb0:	4b01      	ldr	r3, [pc, #4]	; (1fb8 <z_log_notify_backend_enabled+0x8>)
    1fb2:	2201      	movs	r2, #1
    1fb4:	701a      	strb	r2, [r3, #0]
}
    1fb6:	4770      	bx	lr
    1fb8:	2000544c 	.word	0x2000544c

00001fbc <z_log_dropped>:
    1fbc:	4b0d      	ldr	r3, [pc, #52]	; (1ff4 <z_log_dropped+0x38>)
    1fbe:	f3bf 8f5b 	dmb	ish
    1fc2:	e853 2f00 	ldrex	r2, [r3]
    1fc6:	3201      	adds	r2, #1
    1fc8:	e843 2100 	strex	r1, r2, [r3]
    1fcc:	2900      	cmp	r1, #0
    1fce:	d1f8      	bne.n	1fc2 <z_log_dropped+0x6>
    1fd0:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    1fd4:	b900      	cbnz	r0, 1fd8 <z_log_dropped+0x1c>
		atomic_dec(&buffered_cnt);
	}
}
    1fd6:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1fd8:	4b07      	ldr	r3, [pc, #28]	; (1ff8 <z_log_dropped+0x3c>)
    1fda:	f3bf 8f5b 	dmb	ish
    1fde:	e853 2f00 	ldrex	r2, [r3]
    1fe2:	3a01      	subs	r2, #1
    1fe4:	e843 2100 	strex	r1, r2, [r3]
    1fe8:	2900      	cmp	r1, #0
    1fea:	d1f8      	bne.n	1fde <z_log_dropped+0x22>
    1fec:	f3bf 8f5b 	dmb	ish
    1ff0:	e7f1      	b.n	1fd6 <z_log_dropped+0x1a>
    1ff2:	bf00      	nop
    1ff4:	200046e8 	.word	0x200046e8
    1ff8:	200046e4 	.word	0x200046e4

00001ffc <z_log_msg2_commit>:
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
    1ffc:	b510      	push	{r4, lr}
    1ffe:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    2000:	4b04      	ldr	r3, [pc, #16]	; (2014 <z_log_msg2_commit+0x18>)
    2002:	681b      	ldr	r3, [r3, #0]
    2004:	4798      	blx	r3
    2006:	60a0      	str	r0, [r4, #8]
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    2008:	2100      	movs	r1, #0
    200a:	4620      	mov	r0, r4
    200c:	f7ff feae 	bl	1d6c <msg_process>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    2010:	bd10      	pop	{r4, pc}
    2012:	bf00      	nop
    2014:	20004004 	.word	0x20004004

00002018 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    2018:	4b05      	ldr	r3, [pc, #20]	; (2030 <log_source_name_get+0x18>)
    201a:	4a06      	ldr	r2, [pc, #24]	; (2034 <log_source_name_get+0x1c>)
    201c:	1a9b      	subs	r3, r3, r2
    201e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    2022:	d202      	bcs.n	202a <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    2024:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    2028:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    202a:	2000      	movs	r0, #0
}
    202c:	4770      	bx	lr
    202e:	bf00      	nop
    2030:	0000c0a8 	.word	0x0000c0a8
    2034:	0000c060 	.word	0x0000c060

00002038 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    2038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    203a:	4604      	mov	r4, r0
    203c:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    203e:	4d1e      	ldr	r5, [pc, #120]	; (20b8 <log_backend_enable+0x80>)
    2040:	1b45      	subs	r5, r0, r5
    2042:	112d      	asrs	r5, r5, #4
    2044:	3501      	adds	r5, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    2046:	6803      	ldr	r3, [r0, #0]
    2048:	681b      	ldr	r3, [r3, #0]
    204a:	b163      	cbz	r3, 2066 <log_backend_enable+0x2e>
	}

	log_backend_id_set(backend, id);
    204c:	b2ed      	uxtb	r5, r5
	__ASSERT_NO_MSG(backend != NULL);
    204e:	b1cc      	cbz	r4, 2084 <log_backend_enable+0x4c>
	backend->cb->id = id;
    2050:	6863      	ldr	r3, [r4, #4]
    2052:	711d      	strb	r5, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
    2054:	b314      	cbz	r4, 209c <log_backend_enable+0x64>
	backend->cb->ctx = ctx;
    2056:	6863      	ldr	r3, [r4, #4]
    2058:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    205a:	6863      	ldr	r3, [r4, #4]
    205c:	2201      	movs	r2, #1
    205e:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    2060:	f7ff ffa6 	bl	1fb0 <z_log_notify_backend_enabled>
}
    2064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    2066:	4f15      	ldr	r7, [pc, #84]	; (20bc <log_backend_enable+0x84>)
    2068:	23bb      	movs	r3, #187	; 0xbb
    206a:	463a      	mov	r2, r7
    206c:	4914      	ldr	r1, [pc, #80]	; (20c0 <log_backend_enable+0x88>)
    206e:	4815      	ldr	r0, [pc, #84]	; (20c4 <log_backend_enable+0x8c>)
    2070:	f008 fc44 	bl	a8fc <assert_print>
    2074:	4814      	ldr	r0, [pc, #80]	; (20c8 <log_backend_enable+0x90>)
    2076:	f008 fc41 	bl	a8fc <assert_print>
    207a:	21bb      	movs	r1, #187	; 0xbb
    207c:	4638      	mov	r0, r7
    207e:	f008 fc36 	bl	a8ee <assert_post_action>
    2082:	e7e3      	b.n	204c <log_backend_enable+0x14>
	__ASSERT_NO_MSG(backend != NULL);
    2084:	4f11      	ldr	r7, [pc, #68]	; (20cc <log_backend_enable+0x94>)
    2086:	23e6      	movs	r3, #230	; 0xe6
    2088:	463a      	mov	r2, r7
    208a:	4911      	ldr	r1, [pc, #68]	; (20d0 <log_backend_enable+0x98>)
    208c:	480d      	ldr	r0, [pc, #52]	; (20c4 <log_backend_enable+0x8c>)
    208e:	f008 fc35 	bl	a8fc <assert_print>
    2092:	21e6      	movs	r1, #230	; 0xe6
    2094:	4638      	mov	r0, r7
    2096:	f008 fc2a 	bl	a8ee <assert_post_action>
    209a:	e7d9      	b.n	2050 <log_backend_enable+0x18>
	__ASSERT_NO_MSG(backend != NULL);
    209c:	4d0b      	ldr	r5, [pc, #44]	; (20cc <log_backend_enable+0x94>)
    209e:	f240 1317 	movw	r3, #279	; 0x117
    20a2:	462a      	mov	r2, r5
    20a4:	490a      	ldr	r1, [pc, #40]	; (20d0 <log_backend_enable+0x98>)
    20a6:	4807      	ldr	r0, [pc, #28]	; (20c4 <log_backend_enable+0x8c>)
    20a8:	f008 fc28 	bl	a8fc <assert_print>
    20ac:	f240 1117 	movw	r1, #279	; 0x117
    20b0:	4628      	mov	r0, r5
    20b2:	f008 fc1c 	bl	a8ee <assert_post_action>
    20b6:	e7ce      	b.n	2056 <log_backend_enable+0x1e>
    20b8:	0000c0a8 	.word	0x0000c0a8
    20bc:	0000c740 	.word	0x0000c740
    20c0:	0000c79c 	.word	0x0000c79c
    20c4:	0000c254 	.word	0x0000c254
    20c8:	0000c7b4 	.word	0x0000c7b4
    20cc:	0000c660 	.word	0x0000c660
    20d0:	0000c698 	.word	0x0000c698

000020d4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    20d4:	b40e      	push	{r1, r2, r3}
    20d6:	b500      	push	{lr}
    20d8:	b082      	sub	sp, #8
    20da:	4601      	mov	r1, r0
    20dc:	ab03      	add	r3, sp, #12
    20de:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    20e2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    20e4:	4803      	ldr	r0, [pc, #12]	; (20f4 <print_formatted+0x20>)
    20e6:	f7ff fb45 	bl	1774 <cbvprintf>
	va_end(args);

	return length;
}
    20ea:	b002      	add	sp, #8
    20ec:	f85d eb04 	ldr.w	lr, [sp], #4
    20f0:	b003      	add	sp, #12
    20f2:	4770      	bx	lr
    20f4:	0000a957 	.word	0x0000a957

000020f8 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    20f8:	b530      	push	{r4, r5, lr}
    20fa:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    20fc:	f011 0f44 	tst.w	r1, #68	; 0x44
    2100:	d005      	beq.n	210e <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    2102:	4b1a      	ldr	r3, [pc, #104]	; (216c <timestamp_print+0x74>)
    2104:	681c      	ldr	r4, [r3, #0]
    2106:	b934      	cbnz	r4, 2116 <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    2108:	2000      	movs	r0, #0
	}

	return length;
}
    210a:	b005      	add	sp, #20
    210c:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    210e:	4918      	ldr	r1, [pc, #96]	; (2170 <timestamp_print+0x78>)
    2110:	f7ff ffe0 	bl	20d4 <print_formatted>
    2114:	e7f9      	b.n	210a <timestamp_print+0x12>
		timestamp /= timestamp_div;
    2116:	4b17      	ldr	r3, [pc, #92]	; (2174 <timestamp_print+0x7c>)
    2118:	6819      	ldr	r1, [r3, #0]
    211a:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    211e:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    2122:	4a15      	ldr	r2, [pc, #84]	; (2178 <timestamp_print+0x80>)
    2124:	fba2 320c 	umull	r3, r2, r2, ip
    2128:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    212a:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    212e:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    2132:	4b12      	ldr	r3, [pc, #72]	; (217c <timestamp_print+0x84>)
    2134:	fba3 530e 	umull	r5, r3, r3, lr
    2138:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    213a:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    213e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    2142:	fb0c f101 	mul.w	r1, ip, r1
    2146:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    214a:	fb05 1114 	mls	r1, r5, r4, r1
    214e:	fb0c f101 	mul.w	r1, ip, r1
    2152:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    2156:	9102      	str	r1, [sp, #8]
    2158:	9501      	str	r5, [sp, #4]
    215a:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    215e:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    2162:	9100      	str	r1, [sp, #0]
    2164:	4906      	ldr	r1, [pc, #24]	; (2180 <timestamp_print+0x88>)
    2166:	f7ff ffb5 	bl	20d4 <print_formatted>
    216a:	e7ce      	b.n	210a <timestamp_print+0x12>
    216c:	200046f0 	.word	0x200046f0
    2170:	0000c7d8 	.word	0x0000c7d8
    2174:	200046f4 	.word	0x200046f4
    2178:	91a2b3c5 	.word	0x91a2b3c5
    217c:	88888889 	.word	0x88888889
    2180:	0000c7e4 	.word	0x0000c7e4

00002184 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    2184:	b161      	cbz	r1, 21a0 <color_print+0x1c>
{
    2186:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    2188:	b12a      	cbz	r2, 2196 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    218a:	4a06      	ldr	r2, [pc, #24]	; (21a4 <color_print+0x20>)
    218c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2190:	b912      	cbnz	r2, 2198 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    2192:	4a05      	ldr	r2, [pc, #20]	; (21a8 <color_print+0x24>)
    2194:	e000      	b.n	2198 <color_print+0x14>
    2196:	4a04      	ldr	r2, [pc, #16]	; (21a8 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    2198:	4904      	ldr	r1, [pc, #16]	; (21ac <color_print+0x28>)
    219a:	f7ff ff9b 	bl	20d4 <print_formatted>
	}
}
    219e:	bd08      	pop	{r3, pc}
    21a0:	4770      	bx	lr
    21a2:	bf00      	nop
    21a4:	0000c8a8 	.word	0x0000c8a8
    21a8:	0000c800 	.word	0x0000c800
    21ac:	0000c808 	.word	0x0000c808

000021b0 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    21b0:	f011 0f10 	tst.w	r1, #16
    21b4:	d10b      	bne.n	21ce <newline_print+0x1e>
{
    21b6:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    21b8:	f011 0f20 	tst.w	r1, #32
    21bc:	d003      	beq.n	21c6 <newline_print+0x16>
		print_formatted(ctx, "\n");
    21be:	4904      	ldr	r1, [pc, #16]	; (21d0 <newline_print+0x20>)
    21c0:	f7ff ff88 	bl	20d4 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    21c4:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    21c6:	4903      	ldr	r1, [pc, #12]	; (21d4 <newline_print+0x24>)
    21c8:	f7ff ff84 	bl	20d4 <print_formatted>
    21cc:	e7fa      	b.n	21c4 <newline_print+0x14>
    21ce:	4770      	bx	lr
    21d0:	0000c208 	.word	0x0000c208
    21d4:	0000dfd4 	.word	0x0000dfd4

000021d8 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    21d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21dc:	4605      	mov	r5, r0
    21de:	460f      	mov	r7, r1
    21e0:	4616      	mov	r6, r2
    21e2:	4698      	mov	r8, r3
	newline_print(output, flags);
    21e4:	9906      	ldr	r1, [sp, #24]
    21e6:	f7ff ffe3 	bl	21b0 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    21ea:	2400      	movs	r4, #0
    21ec:	4544      	cmp	r4, r8
    21ee:	da05      	bge.n	21fc <hexdump_line_print+0x24>
		print_formatted(output, " ");
    21f0:	4924      	ldr	r1, [pc, #144]	; (2284 <hexdump_line_print+0xac>)
    21f2:	4628      	mov	r0, r5
    21f4:	f7ff ff6e 	bl	20d4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    21f8:	3401      	adds	r4, #1
    21fa:	e7f7      	b.n	21ec <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    21fc:	2400      	movs	r4, #0
    21fe:	e009      	b.n	2214 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    2200:	4920      	ldr	r1, [pc, #128]	; (2284 <hexdump_line_print+0xac>)
    2202:	4628      	mov	r0, r5
    2204:	f7ff ff66 	bl	20d4 <print_formatted>
    2208:	e00b      	b.n	2222 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    220a:	491f      	ldr	r1, [pc, #124]	; (2288 <hexdump_line_print+0xb0>)
    220c:	4628      	mov	r0, r5
    220e:	f7ff ff61 	bl	20d4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2212:	3401      	adds	r4, #1
    2214:	2c0f      	cmp	r4, #15
    2216:	dc0c      	bgt.n	2232 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    2218:	2c00      	cmp	r4, #0
    221a:	dd02      	ble.n	2222 <hexdump_line_print+0x4a>
    221c:	f014 0f07 	tst.w	r4, #7
    2220:	d0ee      	beq.n	2200 <hexdump_line_print+0x28>
		if (i < length) {
    2222:	42b4      	cmp	r4, r6
    2224:	d2f1      	bcs.n	220a <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    2226:	5d3a      	ldrb	r2, [r7, r4]
    2228:	4918      	ldr	r1, [pc, #96]	; (228c <hexdump_line_print+0xb4>)
    222a:	4628      	mov	r0, r5
    222c:	f7ff ff52 	bl	20d4 <print_formatted>
    2230:	e7ef      	b.n	2212 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    2232:	4917      	ldr	r1, [pc, #92]	; (2290 <hexdump_line_print+0xb8>)
    2234:	4628      	mov	r0, r5
    2236:	f7ff ff4d 	bl	20d4 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    223a:	2400      	movs	r4, #0
    223c:	e009      	b.n	2252 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    223e:	4911      	ldr	r1, [pc, #68]	; (2284 <hexdump_line_print+0xac>)
    2240:	4628      	mov	r0, r5
    2242:	f7ff ff47 	bl	20d4 <print_formatted>
    2246:	e00b      	b.n	2260 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    2248:	4912      	ldr	r1, [pc, #72]	; (2294 <hexdump_line_print+0xbc>)
    224a:	4628      	mov	r0, r5
    224c:	f7ff ff42 	bl	20d4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2250:	3401      	adds	r4, #1
    2252:	2c0f      	cmp	r4, #15
    2254:	dc13      	bgt.n	227e <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
    2256:	2c00      	cmp	r4, #0
    2258:	dd02      	ble.n	2260 <hexdump_line_print+0x88>
    225a:	f014 0f07 	tst.w	r4, #7
    225e:	d0ee      	beq.n	223e <hexdump_line_print+0x66>
		if (i < length) {
    2260:	42b4      	cmp	r4, r6
    2262:	d207      	bcs.n	2274 <hexdump_line_print+0x9c>
			char c = (char)data[i];
    2264:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
    2266:	4b0c      	ldr	r3, [pc, #48]	; (2298 <hexdump_line_print+0xc0>)
    2268:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
    226a:	f013 0f97 	tst.w	r3, #151	; 0x97
    226e:	d1eb      	bne.n	2248 <hexdump_line_print+0x70>
    2270:	222e      	movs	r2, #46	; 0x2e
    2272:	e7e9      	b.n	2248 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
    2274:	4903      	ldr	r1, [pc, #12]	; (2284 <hexdump_line_print+0xac>)
    2276:	4628      	mov	r0, r5
    2278:	f7ff ff2c 	bl	20d4 <print_formatted>
    227c:	e7e8      	b.n	2250 <hexdump_line_print+0x78>
		}
	}
}
    227e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2282:	bf00      	nop
    2284:	0000c830 	.word	0x0000c830
    2288:	0000c814 	.word	0x0000c814
    228c:	0000c80c 	.word	0x0000c80c
    2290:	0000c818 	.word	0x0000c818
    2294:	0000c81c 	.word	0x0000c81c
    2298:	0000dff9 	.word	0x0000dff9

0000229c <ids_print>:
{
    229c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    22a0:	4680      	mov	r8, r0
    22a2:	4616      	mov	r6, r2
    22a4:	461d      	mov	r5, r3
    22a6:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    22aa:	b959      	cbnz	r1, 22c4 <ids_print+0x28>
	int total = 0;
    22ac:	2400      	movs	r4, #0
	if (source_id >= 0) {
    22ae:	2f00      	cmp	r7, #0
    22b0:	db1c      	blt.n	22ec <ids_print+0x50>
		total += print_formatted(output,
    22b2:	b186      	cbz	r6, 22d6 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    22b4:	2301      	movs	r3, #1
    22b6:	9a07      	ldr	r2, [sp, #28]
    22b8:	4093      	lsls	r3, r2
				(func_on &&
    22ba:	f013 0f10 	tst.w	r3, #16
    22be:	d118      	bne.n	22f2 <ids_print+0x56>
		total += print_formatted(output,
    22c0:	4e0d      	ldr	r6, [pc, #52]	; (22f8 <ids_print+0x5c>)
    22c2:	e009      	b.n	22d8 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    22c4:	4b0d      	ldr	r3, [pc, #52]	; (22fc <ids_print+0x60>)
    22c6:	9a07      	ldr	r2, [sp, #28]
    22c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    22cc:	490c      	ldr	r1, [pc, #48]	; (2300 <ids_print+0x64>)
    22ce:	f7ff ff01 	bl	20d4 <print_formatted>
    22d2:	4604      	mov	r4, r0
    22d4:	e7eb      	b.n	22ae <ids_print+0x12>
		total += print_formatted(output,
    22d6:	4e08      	ldr	r6, [pc, #32]	; (22f8 <ids_print+0x5c>)
    22d8:	4639      	mov	r1, r7
    22da:	4628      	mov	r0, r5
    22dc:	f7ff fe9c 	bl	2018 <log_source_name_get>
    22e0:	4602      	mov	r2, r0
    22e2:	4631      	mov	r1, r6
    22e4:	4640      	mov	r0, r8
    22e6:	f7ff fef5 	bl	20d4 <print_formatted>
    22ea:	4404      	add	r4, r0
}
    22ec:	4620      	mov	r0, r4
    22ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    22f2:	4e04      	ldr	r6, [pc, #16]	; (2304 <ids_print+0x68>)
    22f4:	e7f0      	b.n	22d8 <ids_print+0x3c>
    22f6:	bf00      	nop
    22f8:	0000c820 	.word	0x0000c820
    22fc:	0000c8bc 	.word	0x0000c8bc
    2300:	0000c82c 	.word	0x0000c82c
    2304:	0000c828 	.word	0x0000c828

00002308 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    2308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    230c:	b085      	sub	sp, #20
    230e:	4605      	mov	r5, r0
    2310:	460c      	mov	r4, r1
    2312:	4616      	mov	r6, r2
    2314:	9303      	str	r3, [sp, #12]
    2316:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    231a:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    231e:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2322:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    2326:	f008 fb14 	bl	a952 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    232a:	b1e8      	cbz	r0, 2368 <prefix_print+0x60>
    232c:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    232e:	4913      	ldr	r1, [pc, #76]	; (237c <prefix_print+0x74>)
    2330:	4628      	mov	r0, r5
    2332:	f7ff fecf 	bl	20d4 <print_formatted>
    2336:	4607      	mov	r7, r0
	}

	if (stamp) {
    2338:	f1bb 0f00 	cmp.w	fp, #0
    233c:	d116      	bne.n	236c <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    233e:	4642      	mov	r2, r8
    2340:	4651      	mov	r1, sl
    2342:	4628      	mov	r0, r5
    2344:	f008 fb31 	bl	a9aa <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    2348:	f8cd 8004 	str.w	r8, [sp, #4]
    234c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    2350:	9300      	str	r3, [sp, #0]
    2352:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    2356:	4632      	mov	r2, r6
    2358:	4649      	mov	r1, r9
    235a:	4628      	mov	r0, r5
    235c:	f7ff ff9e 	bl	229c <ids_print>
			domain_id, source_id, level);


	return length;
}
    2360:	4438      	add	r0, r7
    2362:	b005      	add	sp, #20
    2364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    2368:	2700      	movs	r7, #0
    236a:	e7e5      	b.n	2338 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    236c:	9a03      	ldr	r2, [sp, #12]
    236e:	4621      	mov	r1, r4
    2370:	4628      	mov	r0, r5
    2372:	f7ff fec1 	bl	20f8 <timestamp_print>
    2376:	4407      	add	r7, r0
    2378:	e7e1      	b.n	233e <prefix_print+0x36>
    237a:	bf00      	nop
    237c:	0000c834 	.word	0x0000c834

00002380 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    2380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2384:	b084      	sub	sp, #16
    2386:	4606      	mov	r6, r0
    2388:	460c      	mov	r4, r1
    238a:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
    238c:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
    238e:	880a      	ldrh	r2, [r1, #0]
    2390:	f3c2 1882 	ubfx	r8, r2, #6, #3
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    2394:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
    2398:	d037      	beq.n	240a <log_output_msg2_process+0x8a>
	return msg->hdr.source;
    239a:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
    239c:	7809      	ldrb	r1, [r1, #0]
    239e:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    23a2:	b37a      	cbz	r2, 2404 <log_output_msg2_process+0x84>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    23a4:	4829      	ldr	r0, [pc, #164]	; (244c <log_output_msg2_process+0xcc>)
    23a6:	1a12      	subs	r2, r2, r0
    23a8:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    23ac:	9202      	str	r2, [sp, #8]
    23ae:	9101      	str	r1, [sp, #4]
    23b0:	f8cd 8000 	str.w	r8, [sp]
    23b4:	2200      	movs	r2, #0
    23b6:	4639      	mov	r1, r7
    23b8:	4630      	mov	r0, r6
    23ba:	f7ff ffa5 	bl	2308 <prefix_print>
    23be:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    23c0:	4625      	mov	r5, r4
    23c2:	f855 3b10 	ldr.w	r3, [r5], #16
    23c6:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    23ca:	b153      	cbz	r3, 23e2 <log_output_msg2_process+0x62>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    23cc:	f1b8 0f00 	cmp.w	r8, #0
    23d0:	d11e      	bne.n	2410 <log_output_msg2_process+0x90>
    23d2:	481f      	ldr	r0, [pc, #124]	; (2450 <log_output_msg2_process+0xd0>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    23d4:	462b      	mov	r3, r5
    23d6:	4632      	mov	r2, r6
    23d8:	491e      	ldr	r1, [pc, #120]	; (2454 <log_output_msg2_process+0xd4>)
    23da:	f008 f93a 	bl	a652 <cbpprintf_external>
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    23de:	2800      	cmp	r0, #0
    23e0:	db18      	blt.n	2414 <log_output_msg2_process+0x94>
	*len = msg->hdr.desc.data_len;
    23e2:	8862      	ldrh	r2, [r4, #2]
    23e4:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    23e8:	6821      	ldr	r1, [r4, #0]
    23ea:	f3c1 2149 	ubfx	r1, r1, #9, #10
    23ee:	4429      	add	r1, r5
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    23f0:	b9fa      	cbnz	r2, 2432 <log_output_msg2_process+0xb2>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    23f2:	f1b8 0f00 	cmp.w	r8, #0
    23f6:	d122      	bne.n	243e <log_output_msg2_process+0xbe>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    23f8:	4630      	mov	r0, r6
    23fa:	f008 fb09 	bl	aa10 <log_output_flush>
}
    23fe:	b004      	add	sp, #16
    2400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		int16_t source_id = source ?
    2404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2408:	e7d0      	b.n	23ac <log_output_msg2_process+0x2c>
		prefix_offset = 0;
    240a:	f04f 0900 	mov.w	r9, #0
    240e:	e7d7      	b.n	23c0 <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    2410:	4811      	ldr	r0, [pc, #68]	; (2458 <log_output_msg2_process+0xd8>)
    2412:	e7df      	b.n	23d4 <log_output_msg2_process+0x54>
		__ASSERT_NO_MSG(err >= 0);
    2414:	f8df a044 	ldr.w	sl, [pc, #68]	; 245c <log_output_msg2_process+0xdc>
    2418:	f240 23b7 	movw	r3, #695	; 0x2b7
    241c:	4652      	mov	r2, sl
    241e:	4910      	ldr	r1, [pc, #64]	; (2460 <log_output_msg2_process+0xe0>)
    2420:	4810      	ldr	r0, [pc, #64]	; (2464 <log_output_msg2_process+0xe4>)
    2422:	f008 fa6b 	bl	a8fc <assert_print>
    2426:	f240 21b7 	movw	r1, #695	; 0x2b7
    242a:	4650      	mov	r0, sl
    242c:	f008 fa5f 	bl	a8ee <assert_post_action>
    2430:	e7d7      	b.n	23e2 <log_output_msg2_process+0x62>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
    2432:	9700      	str	r7, [sp, #0]
    2434:	464b      	mov	r3, r9
    2436:	4630      	mov	r0, r6
    2438:	f008 facf 	bl	a9da <log_msg2_hexdump>
    243c:	e7d9      	b.n	23f2 <log_output_msg2_process+0x72>
		postfix_print(output, flags, level);
    243e:	4642      	mov	r2, r8
    2440:	4639      	mov	r1, r7
    2442:	4630      	mov	r0, r6
    2444:	f008 fabd 	bl	a9c2 <postfix_print>
    2448:	e7d6      	b.n	23f8 <log_output_msg2_process+0x78>
    244a:	bf00      	nop
    244c:	0000c060 	.word	0x0000c060
    2450:	0000a975 	.word	0x0000a975
    2454:	00001775 	.word	0x00001775
    2458:	0000a957 	.word	0x0000a957
    245c:	0000c838 	.word	0x0000c838
    2460:	0000c87c 	.word	0x0000c87c
    2464:	0000c254 	.word	0x0000c254

00002468 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2468:	4b07      	ldr	r3, [pc, #28]	; (2488 <log_output_timestamp_freq_set+0x20>)
    246a:	2201      	movs	r2, #1
    246c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    246e:	e004      	b.n	247a <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    2470:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2472:	4a05      	ldr	r2, [pc, #20]	; (2488 <log_output_timestamp_freq_set+0x20>)
    2474:	6813      	ldr	r3, [r2, #0]
    2476:	005b      	lsls	r3, r3, #1
    2478:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    247a:	4b04      	ldr	r3, [pc, #16]	; (248c <log_output_timestamp_freq_set+0x24>)
    247c:	4298      	cmp	r0, r3
    247e:	d8f7      	bhi.n	2470 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    2480:	4b03      	ldr	r3, [pc, #12]	; (2490 <log_output_timestamp_freq_set+0x28>)
    2482:	6018      	str	r0, [r3, #0]
}
    2484:	4770      	bx	lr
    2486:	bf00      	nop
    2488:	200046f4 	.word	0x200046f4
    248c:	000f4240 	.word	0x000f4240
    2490:	200046f0 	.word	0x200046f0

00002494 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    2494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2498:	b087      	sub	sp, #28
    249a:	af02      	add	r7, sp, #8
    249c:	4682      	mov	sl, r0
    249e:	6079      	str	r1, [r7, #4]
    24a0:	4691      	mov	r9, r2
    24a2:	4698      	mov	r8, r3
    24a4:	6bbe      	ldr	r6, [r7, #56]	; 0x38
    24a6:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
	int plen;

	if (fmt) {
    24aa:	f1bb 0f00 	cmp.w	fp, #0
    24ae:	d016      	beq.n	24de <z_impl_z_log_msg2_runtime_vcreate+0x4a>
		va_list ap2;

		va_copy(ap2, ap);
    24b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    24b2:	60fb      	str	r3, [r7, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    24b4:	9300      	str	r3, [sp, #0]
    24b6:	465b      	mov	r3, fp
    24b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    24ba:	2110      	movs	r1, #16
    24bc:	2000      	movs	r0, #0
    24be:	f7fe f871 	bl	5a4 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    24c2:	1e05      	subs	r5, r0, #0
    24c4:	da0c      	bge.n	24e0 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
    24c6:	4c26      	ldr	r4, [pc, #152]	; (2560 <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    24c8:	2367      	movs	r3, #103	; 0x67
    24ca:	4622      	mov	r2, r4
    24cc:	4925      	ldr	r1, [pc, #148]	; (2564 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    24ce:	4826      	ldr	r0, [pc, #152]	; (2568 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    24d0:	f008 fa14 	bl	a8fc <assert_print>
    24d4:	2167      	movs	r1, #103	; 0x67
    24d6:	4620      	mov	r0, r4
    24d8:	f008 fa09 	bl	a8ee <assert_post_action>
		va_end(ap2);
    24dc:	e000      	b.n	24e0 <z_impl_z_log_msg2_runtime_vcreate+0x4c>
	} else {
		plen = 0;
    24de:	2500      	movs	r5, #0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    24e0:	4629      	mov	r1, r5
    24e2:	19ab      	adds	r3, r5, r6
    24e4:	3317      	adds	r3, #23
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    24e6:	2400      	movs	r4, #0
    24e8:	f36f 0400 	bfc	r4, #0, #1
    24ec:	f36f 0441 	bfc	r4, #1, #1
    24f0:	f36f 0482 	bfc	r4, #2, #1
    24f4:	f36a 04c5 	bfi	r4, sl, #3, #3
    24f8:	f369 1488 	bfi	r4, r9, #6, #3
    24fc:	f365 2452 	bfi	r4, r5, #9, #10
    2500:	f366 44de 	bfi	r4, r6, #19, #12
    2504:	f36f 74df 	bfc	r4, #31, #1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    2508:	f023 0307 	bic.w	r3, r3, #7
    250c:	ebad 0d03 	sub.w	sp, sp, r3
    2510:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    2512:	466b      	mov	r3, sp
    2514:	f113 0018 	adds.w	r0, r3, #24
    2518:	d00a      	beq.n	2530 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    251a:	f1bb 0f00 	cmp.w	fp, #0
    251e:	d007      	beq.n	2530 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    2520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2522:	9300      	str	r3, [sp, #0]
    2524:	465b      	mov	r3, fp
    2526:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    2528:	f7fe f83c 	bl	5a4 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    252c:	2800      	cmp	r0, #0
    252e:	db09      	blt.n	2544 <z_impl_z_log_msg2_runtime_vcreate+0xb0>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    2530:	4643      	mov	r3, r8
    2532:	4622      	mov	r2, r4
    2534:	6879      	ldr	r1, [r7, #4]
    2536:	4628      	mov	r0, r5
    2538:	f008 fa77 	bl	aa2a <z_log_msg2_finalize>
	}
}
    253c:	3714      	adds	r7, #20
    253e:	46bd      	mov	sp, r7
    2540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(plen >= 0);
    2544:	f8df 9018 	ldr.w	r9, [pc, #24]	; 2560 <z_impl_z_log_msg2_runtime_vcreate+0xcc>
    2548:	2381      	movs	r3, #129	; 0x81
    254a:	464a      	mov	r2, r9
    254c:	4905      	ldr	r1, [pc, #20]	; (2564 <z_impl_z_log_msg2_runtime_vcreate+0xd0>)
    254e:	4806      	ldr	r0, [pc, #24]	; (2568 <z_impl_z_log_msg2_runtime_vcreate+0xd4>)
    2550:	f008 f9d4 	bl	a8fc <assert_print>
    2554:	2181      	movs	r1, #129	; 0x81
    2556:	4648      	mov	r0, r9
    2558:	f008 f9c9 	bl	a8ee <assert_post_action>
    255c:	e7e8      	b.n	2530 <z_impl_z_log_msg2_runtime_vcreate+0x9c>
    255e:	bf00      	nop
    2560:	0000c8d0 	.word	0x0000c8d0
    2564:	0000c90c 	.word	0x0000c90c
    2568:	0000c254 	.word	0x0000c254

0000256c <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    256c:	b570      	push	{r4, r5, r6, lr}
    256e:	4606      	mov	r6, r0
    2570:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    2572:	2400      	movs	r4, #0
    2574:	e006      	b.n	2584 <char_out+0x18>
			uart_poll_out(uart_dev, data[i]);
    2576:	4b05      	ldr	r3, [pc, #20]	; (258c <char_out+0x20>)
    2578:	6818      	ldr	r0, [r3, #0]
    257a:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    257c:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    257e:	69db      	ldr	r3, [r3, #28]
    2580:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    2582:	3401      	adds	r4, #1
    2584:	42ac      	cmp	r4, r5
    2586:	d3f6      	bcc.n	2576 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    2588:	4628      	mov	r0, r5
    258a:	bd70      	pop	{r4, r5, r6, pc}
    258c:	20004710 	.word	0x20004710

00002590 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2590:	4b01      	ldr	r3, [pc, #4]	; (2598 <format_set+0x8>)
    2592:	6019      	str	r1, [r3, #0]
	return 0;
}
    2594:	2000      	movs	r0, #0
    2596:	4770      	bx	lr
    2598:	20004700 	.word	0x20004700

0000259c <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
    259c:	b510      	push	{r4, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    259e:	4809      	ldr	r0, [pc, #36]	; (25c4 <log_backend_uart_init+0x28>)
    25a0:	4b09      	ldr	r3, [pc, #36]	; (25c8 <log_backend_uart_init+0x2c>)
    25a2:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    25a4:	f009 fac8 	bl	bb38 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    25a8:	b100      	cbz	r0, 25ac <log_backend_uart_init+0x10>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    25aa:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    25ac:	4c07      	ldr	r4, [pc, #28]	; (25cc <log_backend_uart_init+0x30>)
    25ae:	2379      	movs	r3, #121	; 0x79
    25b0:	4622      	mov	r2, r4
    25b2:	4907      	ldr	r1, [pc, #28]	; (25d0 <log_backend_uart_init+0x34>)
    25b4:	4807      	ldr	r0, [pc, #28]	; (25d4 <log_backend_uart_init+0x38>)
    25b6:	f008 f9a1 	bl	a8fc <assert_print>
    25ba:	2179      	movs	r1, #121	; 0x79
    25bc:	4620      	mov	r0, r4
    25be:	f008 f996 	bl	a8ee <assert_post_action>
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
    25c2:	e7f2      	b.n	25aa <log_backend_uart_init+0xe>
    25c4:	0000bec8 	.word	0x0000bec8
    25c8:	20004710 	.word	0x20004710
    25cc:	0000c918 	.word	0x0000c918
    25d0:	0000c950 	.word	0x0000c950
    25d4:	0000c254 	.word	0x0000c254

000025d8 <panic>:

static void panic(struct log_backend const *const backend)
{
    25d8:	b508      	push	{r3, lr}
	in_panic = true;
    25da:	4b03      	ldr	r3, [pc, #12]	; (25e8 <panic+0x10>)
    25dc:	2201      	movs	r2, #1
    25de:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    25e0:	4802      	ldr	r0, [pc, #8]	; (25ec <panic+0x14>)
    25e2:	f008 fa15 	bl	aa10 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    25e6:	bd08      	pop	{r3, pc}
    25e8:	2000544e 	.word	0x2000544e
    25ec:	0000c9ac 	.word	0x0000c9ac

000025f0 <process>:
{
    25f0:	b510      	push	{r4, lr}
    25f2:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    25f4:	4b04      	ldr	r3, [pc, #16]	; (2608 <process+0x18>)
    25f6:	6818      	ldr	r0, [r3, #0]
    25f8:	f7ff fc18 	bl	1e2c <log_format_func_t_get>
    25fc:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    25fe:	220f      	movs	r2, #15
    2600:	4621      	mov	r1, r4
    2602:	4802      	ldr	r0, [pc, #8]	; (260c <process+0x1c>)
    2604:	4798      	blx	r3
}
    2606:	bd10      	pop	{r4, pc}
    2608:	20004700 	.word	0x20004700
    260c:	0000c9ac 	.word	0x0000c9ac

00002610 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2610:	4b03      	ldr	r3, [pc, #12]	; (2620 <log_backend_rtt_init+0x10>)
    2612:	2201      	movs	r2, #1
    2614:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
    2616:	4b03      	ldr	r3, [pc, #12]	; (2624 <log_backend_rtt_init+0x14>)
    2618:	4a03      	ldr	r2, [pc, #12]	; (2628 <log_backend_rtt_init+0x18>)
    261a:	601a      	str	r2, [r3, #0]
}
    261c:	4770      	bx	lr
    261e:	bf00      	nop
    2620:	2000544f 	.word	0x2000544f
    2624:	2000473c 	.word	0x2000473c
    2628:	20004724 	.word	0x20004724

0000262c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    262c:	4b01      	ldr	r3, [pc, #4]	; (2634 <format_set+0x8>)
    262e:	6019      	str	r1, [r3, #0]
	return 0;
}
    2630:	2000      	movs	r0, #0
    2632:	4770      	bx	lr
    2634:	20004740 	.word	0x20004740

00002638 <on_failed_write>:
{
    2638:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    263a:	b918      	cbnz	r0, 2644 <on_failed_write+0xc>
		host_present = false;
    263c:	4b04      	ldr	r3, [pc, #16]	; (2650 <on_failed_write+0x18>)
    263e:	2200      	movs	r2, #0
    2640:	701a      	strb	r2, [r3, #0]
}
    2642:	bd08      	pop	{r3, pc}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    2644:	f241 3088 	movw	r0, #5000	; 0x1388
    2648:	f009 fb53 	bl	bcf2 <z_impl_k_busy_wait>
    264c:	e7f9      	b.n	2642 <on_failed_write+0xa>
    264e:	bf00      	nop
    2650:	2000544f 	.word	0x2000544f

00002654 <on_write>:
{
    2654:	b538      	push	{r3, r4, r5, lr}
    2656:	4604      	mov	r4, r0
	host_present = true;
    2658:	4b0a      	ldr	r3, [pc, #40]	; (2684 <on_write+0x30>)
    265a:	2201      	movs	r2, #1
    265c:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    265e:	4b0a      	ldr	r3, [pc, #40]	; (2688 <on_write+0x34>)
    2660:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    2662:	b92b      	cbnz	r3, 2670 <on_write+0x1c>
}
    2664:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
    2666:	1e65      	subs	r5, r4, #1
    2668:	4620      	mov	r0, r4
    266a:	f7ff ffe5 	bl	2638 <on_failed_write>
    266e:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2670:	2000      	movs	r0, #0
    2672:	f004 fceb 	bl	704c <SEGGER_RTT_HasDataUp>
    2676:	2800      	cmp	r0, #0
    2678:	d0f4      	beq.n	2664 <on_write+0x10>
    267a:	4b02      	ldr	r3, [pc, #8]	; (2684 <on_write+0x30>)
    267c:	781b      	ldrb	r3, [r3, #0]
    267e:	2b00      	cmp	r3, #0
    2680:	d1f1      	bne.n	2666 <on_write+0x12>
    2682:	e7ef      	b.n	2664 <on_write+0x10>
    2684:	2000544f 	.word	0x2000544f
    2688:	20005450 	.word	0x20005450

0000268c <data_out_block_mode>:
{
    268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    268e:	4606      	mov	r6, r0
    2690:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2692:	2704      	movs	r7, #4
    2694:	e006      	b.n	26a4 <data_out_block_mode+0x18>
			on_write(retry_cnt);
    2696:	4638      	mov	r0, r7
    2698:	f7ff ffdc 	bl	2654 <on_write>
	} while ((ret == 0) && host_present);
    269c:	b99c      	cbnz	r4, 26c6 <data_out_block_mode+0x3a>
    269e:	4b0d      	ldr	r3, [pc, #52]	; (26d4 <data_out_block_mode+0x48>)
    26a0:	781b      	ldrb	r3, [r3, #0]
    26a2:	b183      	cbz	r3, 26c6 <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    26a4:	462a      	mov	r2, r5
    26a6:	4631      	mov	r1, r6
    26a8:	2000      	movs	r0, #0
    26aa:	f004 fc6b 	bl	6f84 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    26ae:	4604      	mov	r4, r0
    26b0:	2800      	cmp	r0, #0
    26b2:	d1f0      	bne.n	2696 <data_out_block_mode+0xa>
		} else if (host_present) {
    26b4:	4b07      	ldr	r3, [pc, #28]	; (26d4 <data_out_block_mode+0x48>)
    26b6:	781b      	ldrb	r3, [r3, #0]
    26b8:	2b00      	cmp	r3, #0
    26ba:	d0ef      	beq.n	269c <data_out_block_mode+0x10>
			retry_cnt--;
    26bc:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    26be:	4638      	mov	r0, r7
    26c0:	f7ff ffba 	bl	2638 <on_failed_write>
    26c4:	e7ea      	b.n	269c <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
    26c6:	b914      	cbnz	r4, 26ce <data_out_block_mode+0x42>
    26c8:	4b02      	ldr	r3, [pc, #8]	; (26d4 <data_out_block_mode+0x48>)
    26ca:	781b      	ldrb	r3, [r3, #0]
    26cc:	b903      	cbnz	r3, 26d0 <data_out_block_mode+0x44>
    26ce:	462c      	mov	r4, r5
}
    26d0:	4620      	mov	r0, r4
    26d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26d4:	2000544f 	.word	0x2000544f

000026d8 <panic>:
{
    26d8:	b508      	push	{r3, lr}
	panic_mode = true;
    26da:	4b03      	ldr	r3, [pc, #12]	; (26e8 <panic+0x10>)
    26dc:	2201      	movs	r2, #1
    26de:	701a      	strb	r2, [r3, #0]
    26e0:	4802      	ldr	r0, [pc, #8]	; (26ec <panic+0x14>)
    26e2:	f008 f995 	bl	aa10 <log_output_flush>
}
    26e6:	bd08      	pop	{r3, pc}
    26e8:	20005450 	.word	0x20005450
    26ec:	0000c9ec 	.word	0x0000c9ec

000026f0 <process>:
{
    26f0:	b510      	push	{r4, lr}
    26f2:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    26f4:	4b04      	ldr	r3, [pc, #16]	; (2708 <process+0x18>)
    26f6:	6818      	ldr	r0, [r3, #0]
    26f8:	f7ff fb98 	bl	1e2c <log_format_func_t_get>
    26fc:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
    26fe:	220f      	movs	r2, #15
    2700:	4621      	mov	r1, r4
    2702:	4802      	ldr	r0, [pc, #8]	; (270c <process+0x1c>)
    2704:	4798      	blx	r3
}
    2706:	bd10      	pop	{r4, pc}
    2708:	20004740 	.word	0x20004740
    270c:	0000c9ec 	.word	0x0000c9ec

00002710 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    2710:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    2712:	4b40      	ldr	r3, [pc, #256]	; (2814 <pm_system_resume+0x104>)
    2714:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2716:	f005 031f 	and.w	r3, r5, #31
    271a:	2201      	movs	r2, #1
    271c:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    271e:	0969      	lsrs	r1, r5, #5
    2720:	4b3d      	ldr	r3, [pc, #244]	; (2818 <pm_system_resume+0x108>)
    2722:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2726:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2728:	f3bf 8f5b 	dmb	ish
    272c:	e853 1f00 	ldrex	r1, [r3]
    2730:	ea01 0400 	and.w	r4, r1, r0
    2734:	e843 4600 	strex	r6, r4, [r3]
    2738:	2e00      	cmp	r6, #0
    273a:	d1f7      	bne.n	272c <pm_system_resume+0x1c>
    273c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2740:	420a      	tst	r2, r1
    2742:	d100      	bne.n	2746 <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    2744:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    2746:	4a35      	ldr	r2, [pc, #212]	; (281c <pm_system_resume+0x10c>)
    2748:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    274c:	0098      	lsls	r0, r3, #2
    274e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	if (pm_state_exit_post_ops != NULL) {
    2752:	4933      	ldr	r1, [pc, #204]	; (2820 <pm_system_resume+0x110>)
    2754:	b1a9      	cbz	r1, 2782 <pm_system_resume+0x72>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2756:	7859      	ldrb	r1, [r3, #1]
    2758:	5c10      	ldrb	r0, [r2, r0]
    275a:	f008 fa44 	bl	abe6 <pm_state_exit_post_ops>
    275e:	f04f 0320 	mov.w	r3, #32
    2762:	f3ef 8611 	mrs	r6, BASEPRI
    2766:	f383 8812 	msr	BASEPRI_MAX, r3
    276a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    276e:	482d      	ldr	r0, [pc, #180]	; (2824 <pm_system_resume+0x114>)
    2770:	f004 ff60 	bl	7634 <z_spin_lock_valid>
    2774:	b158      	cbz	r0, 278e <pm_system_resume+0x7e>
	z_spin_lock_set_owner(l);
    2776:	482b      	ldr	r0, [pc, #172]	; (2824 <pm_system_resume+0x114>)
    2778:	f004 ff7c 	bl	7674 <z_spin_lock_set_owner>
	return list->head;
    277c:	4b2a      	ldr	r3, [pc, #168]	; (2828 <pm_system_resume+0x118>)
    277e:	681c      	ldr	r4, [r3, #0]
    2780:	e020      	b.n	27c4 <pm_system_resume+0xb4>
	__asm__ volatile(
    2782:	2300      	movs	r3, #0
    2784:	f383 8811 	msr	BASEPRI, r3
    2788:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    278c:	e7e7      	b.n	275e <pm_system_resume+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    278e:	4c27      	ldr	r4, [pc, #156]	; (282c <pm_system_resume+0x11c>)
    2790:	238e      	movs	r3, #142	; 0x8e
    2792:	4622      	mov	r2, r4
    2794:	4926      	ldr	r1, [pc, #152]	; (2830 <pm_system_resume+0x120>)
    2796:	4827      	ldr	r0, [pc, #156]	; (2834 <pm_system_resume+0x124>)
    2798:	f008 f8b0 	bl	a8fc <assert_print>
    279c:	4921      	ldr	r1, [pc, #132]	; (2824 <pm_system_resume+0x114>)
    279e:	4826      	ldr	r0, [pc, #152]	; (2838 <pm_system_resume+0x128>)
    27a0:	f008 f8ac 	bl	a8fc <assert_print>
    27a4:	218e      	movs	r1, #142	; 0x8e
    27a6:	4620      	mov	r0, r4
    27a8:	f008 f8a1 	bl	a8ee <assert_post_action>
    27ac:	e7e3      	b.n	2776 <pm_system_resume+0x66>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    27ae:	4b19      	ldr	r3, [pc, #100]	; (2814 <pm_system_resume+0x104>)
    27b0:	7d1b      	ldrb	r3, [r3, #20]
    27b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    27b6:	4919      	ldr	r1, [pc, #100]	; (281c <pm_system_resume+0x10c>)
    27b8:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    27bc:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    27be:	b10c      	cbz	r4, 27c4 <pm_system_resume+0xb4>
	return node->next;
    27c0:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    27c2:	b124      	cbz	r4, 27ce <pm_system_resume+0xbe>
    27c4:	b11c      	cbz	r4, 27ce <pm_system_resume+0xbe>
			callback = notifier->state_exit;
    27c6:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    27c8:	2a00      	cmp	r2, #0
    27ca:	d1f0      	bne.n	27ae <pm_system_resume+0x9e>
    27cc:	e7f7      	b.n	27be <pm_system_resume+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    27ce:	4815      	ldr	r0, [pc, #84]	; (2824 <pm_system_resume+0x114>)
    27d0:	f004 ff40 	bl	7654 <z_spin_unlock_valid>
    27d4:	b170      	cbz	r0, 27f4 <pm_system_resume+0xe4>
	__asm__ volatile(
    27d6:	f386 8811 	msr	BASEPRI, r6
    27da:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    27de:	4a0f      	ldr	r2, [pc, #60]	; (281c <pm_system_resume+0x10c>)
    27e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    27e4:	00a9      	lsls	r1, r5, #2
    27e6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    27ea:	2300      	movs	r3, #0
    27ec:	5053      	str	r3, [r2, r1]
    27ee:	606b      	str	r3, [r5, #4]
    27f0:	60ab      	str	r3, [r5, #8]
}
    27f2:	e7a7      	b.n	2744 <pm_system_resume+0x34>
    27f4:	4c0d      	ldr	r4, [pc, #52]	; (282c <pm_system_resume+0x11c>)
    27f6:	23b9      	movs	r3, #185	; 0xb9
    27f8:	4622      	mov	r2, r4
    27fa:	4910      	ldr	r1, [pc, #64]	; (283c <pm_system_resume+0x12c>)
    27fc:	480d      	ldr	r0, [pc, #52]	; (2834 <pm_system_resume+0x124>)
    27fe:	f008 f87d 	bl	a8fc <assert_print>
    2802:	4908      	ldr	r1, [pc, #32]	; (2824 <pm_system_resume+0x114>)
    2804:	480e      	ldr	r0, [pc, #56]	; (2840 <pm_system_resume+0x130>)
    2806:	f008 f879 	bl	a8fc <assert_print>
    280a:	21b9      	movs	r1, #185	; 0xb9
    280c:	4620      	mov	r0, r4
    280e:	f008 f86e 	bl	a8ee <assert_post_action>
    2812:	e7e0      	b.n	27d6 <pm_system_resume+0xc6>
    2814:	20005214 	.word	0x20005214
    2818:	2000476c 	.word	0x2000476c
    281c:	2000475c 	.word	0x2000475c
    2820:	0000abe7 	.word	0x0000abe7
    2824:	20004750 	.word	0x20004750
    2828:	20004754 	.word	0x20004754
    282c:	0000c400 	.word	0x0000c400
    2830:	0000c460 	.word	0x0000c460
    2834:	0000c254 	.word	0x0000c254
    2838:	0000c478 	.word	0x0000c478
    283c:	0000c430 	.word	0x0000c430
    2840:	0000c448 	.word	0x0000c448

00002844 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2844:	b570      	push	{r4, r5, r6, lr}
    2846:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2848:	4b6d      	ldr	r3, [pc, #436]	; (2a00 <pm_system_suspend+0x1bc>)
    284a:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    284c:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    284e:	f3bf 8f5b 	dmb	ish
    2852:	4b6c      	ldr	r3, [pc, #432]	; (2a04 <pm_system_suspend+0x1c0>)
    2854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    2858:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    285c:	f005 021f 	and.w	r2, r5, #31
    2860:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2862:	f013 0f01 	tst.w	r3, #1
    2866:	d01d      	beq.n	28a4 <pm_system_suspend+0x60>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2868:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    286c:	4a66      	ldr	r2, [pc, #408]	; (2a08 <pm_system_suspend+0x1c4>)
    286e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    2872:	b333      	cbz	r3, 28c2 <pm_system_suspend+0x7e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    2874:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    2878:	d139      	bne.n	28ee <pm_system_suspend+0xaa>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    287a:	f005 fd45 	bl	8308 <k_sched_lock>
	__asm__ volatile(
    287e:	f04f 0320 	mov.w	r3, #32
    2882:	f3ef 8611 	mrs	r6, BASEPRI
    2886:	f383 8812 	msr	BASEPRI_MAX, r3
    288a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    288e:	485f      	ldr	r0, [pc, #380]	; (2a0c <pm_system_suspend+0x1c8>)
    2890:	f004 fed0 	bl	7634 <z_spin_lock_valid>
    2894:	2800      	cmp	r0, #0
    2896:	d040      	beq.n	291a <pm_system_suspend+0xd6>
	z_spin_lock_set_owner(l);
    2898:	485c      	ldr	r0, [pc, #368]	; (2a0c <pm_system_suspend+0x1c8>)
    289a:	f004 feeb 	bl	7674 <z_spin_lock_set_owner>
	return list->head;
    289e:	4b5c      	ldr	r3, [pc, #368]	; (2a10 <pm_system_suspend+0x1cc>)
    28a0:	681c      	ldr	r4, [r3, #0]
    28a2:	e055      	b.n	2950 <pm_system_suspend+0x10c>
		info = pm_policy_next_state(id, ticks);
    28a4:	4601      	mov	r1, r0
    28a6:	4628      	mov	r0, r5
    28a8:	f000 f8d6 	bl	2a58 <pm_policy_next_state>
		if (info != NULL) {
    28ac:	2800      	cmp	r0, #0
    28ae:	d0db      	beq.n	2868 <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    28b0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    28b4:	4a54      	ldr	r2, [pc, #336]	; (2a08 <pm_system_suspend+0x1c4>)
    28b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    28ba:	c807      	ldmia	r0, {r0, r1, r2}
    28bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    28c0:	e7d2      	b.n	2868 <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    28c2:	f005 021f 	and.w	r2, r5, #31
    28c6:	2301      	movs	r3, #1
    28c8:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    28ca:	096d      	lsrs	r5, r5, #5
    28cc:	4a4d      	ldr	r2, [pc, #308]	; (2a04 <pm_system_suspend+0x1c0>)
    28ce:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    28d2:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    28d4:	f3bf 8f5b 	dmb	ish
    28d8:	e855 2f00 	ldrex	r2, [r5]
    28dc:	401a      	ands	r2, r3
    28de:	e845 2100 	strex	r1, r2, [r5]
    28e2:	2900      	cmp	r1, #0
    28e4:	d1f8      	bne.n	28d8 <pm_system_suspend+0x94>
    28e6:	f3bf 8f5b 	dmb	ish
		ret = false;
    28ea:	2000      	movs	r0, #0
		goto end;
    28ec:	e077      	b.n	29de <pm_system_suspend+0x19a>
		     k_us_to_ticks_ceil32(
    28ee:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    28f2:	4a45      	ldr	r2, [pc, #276]	; (2a08 <pm_system_suspend+0x1c4>)
    28f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    28f8:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    28fa:	0c41      	lsrs	r1, r0, #17
    28fc:	03c0      	lsls	r0, r0, #15
    28fe:	4b45      	ldr	r3, [pc, #276]	; (2a14 <pm_system_suspend+0x1d0>)
    2900:	18c0      	adds	r0, r0, r3
    2902:	4a45      	ldr	r2, [pc, #276]	; (2a18 <pm_system_suspend+0x1d4>)
    2904:	f04f 0300 	mov.w	r3, #0
    2908:	f141 0100 	adc.w	r1, r1, #0
    290c:	f7fd fbf8 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    2910:	2101      	movs	r1, #1
    2912:	1a20      	subs	r0, r4, r0
    2914:	f007 f888 	bl	9a28 <z_set_timeout_expiry>
    2918:	e7af      	b.n	287a <pm_system_suspend+0x36>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    291a:	4c40      	ldr	r4, [pc, #256]	; (2a1c <pm_system_suspend+0x1d8>)
    291c:	238e      	movs	r3, #142	; 0x8e
    291e:	4622      	mov	r2, r4
    2920:	493f      	ldr	r1, [pc, #252]	; (2a20 <pm_system_suspend+0x1dc>)
    2922:	4840      	ldr	r0, [pc, #256]	; (2a24 <pm_system_suspend+0x1e0>)
    2924:	f007 ffea 	bl	a8fc <assert_print>
    2928:	4938      	ldr	r1, [pc, #224]	; (2a0c <pm_system_suspend+0x1c8>)
    292a:	483f      	ldr	r0, [pc, #252]	; (2a28 <pm_system_suspend+0x1e4>)
    292c:	f007 ffe6 	bl	a8fc <assert_print>
    2930:	218e      	movs	r1, #142	; 0x8e
    2932:	4620      	mov	r0, r4
    2934:	f007 ffdb 	bl	a8ee <assert_post_action>
    2938:	e7ae      	b.n	2898 <pm_system_suspend+0x54>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    293a:	4b31      	ldr	r3, [pc, #196]	; (2a00 <pm_system_suspend+0x1bc>)
    293c:	7d1b      	ldrb	r3, [r3, #20]
    293e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2942:	4931      	ldr	r1, [pc, #196]	; (2a08 <pm_system_suspend+0x1c4>)
    2944:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    2948:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    294a:	b10c      	cbz	r4, 2950 <pm_system_suspend+0x10c>
	return node->next;
    294c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    294e:	b124      	cbz	r4, 295a <pm_system_suspend+0x116>
    2950:	b11c      	cbz	r4, 295a <pm_system_suspend+0x116>
			callback = notifier->state_entry;
    2952:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    2954:	2a00      	cmp	r2, #0
    2956:	d1f0      	bne.n	293a <pm_system_suspend+0xf6>
    2958:	e7f7      	b.n	294a <pm_system_suspend+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    295a:	482c      	ldr	r0, [pc, #176]	; (2a0c <pm_system_suspend+0x1c8>)
    295c:	f004 fe7a 	bl	7654 <z_spin_unlock_valid>
    2960:	2800      	cmp	r0, #0
    2962:	d03d      	beq.n	29e0 <pm_system_suspend+0x19c>
	__asm__ volatile(
    2964:	f386 8811 	msr	BASEPRI, r6
    2968:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    296c:	f005 031f 	and.w	r3, r5, #31
    2970:	2101      	movs	r1, #1
    2972:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2974:	096b      	lsrs	r3, r5, #5
    2976:	4a2d      	ldr	r2, [pc, #180]	; (2a2c <pm_system_suspend+0x1e8>)
    2978:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    297c:	f3bf 8f5b 	dmb	ish
    2980:	e853 2f00 	ldrex	r2, [r3]
    2984:	430a      	orrs	r2, r1
    2986:	e843 2000 	strex	r0, r2, [r3]
    298a:	2800      	cmp	r0, #0
    298c:	d1f8      	bne.n	2980 <pm_system_suspend+0x13c>
    298e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2992:	4b27      	ldr	r3, [pc, #156]	; (2a30 <pm_system_suspend+0x1ec>)
    2994:	b14b      	cbz	r3, 29aa <pm_system_suspend+0x166>
		pm_state_set(info->state, info->substate_id);
    2996:	4b1c      	ldr	r3, [pc, #112]	; (2a08 <pm_system_suspend+0x1c4>)
    2998:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    299c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    29a0:	7849      	ldrb	r1, [r1, #1]
    29a2:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    29a6:	f008 f912 	bl	abce <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    29aa:	f7ff feb1 	bl	2710 <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    29ae:	f005 031f 	and.w	r3, r5, #31
    29b2:	2401      	movs	r4, #1
    29b4:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    29b8:	096d      	lsrs	r5, r5, #5
    29ba:	4a12      	ldr	r2, [pc, #72]	; (2a04 <pm_system_suspend+0x1c0>)
    29bc:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    29c0:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    29c2:	f3bf 8f5b 	dmb	ish
    29c6:	e855 2f00 	ldrex	r2, [r5]
    29ca:	401a      	ands	r2, r3
    29cc:	e845 2100 	strex	r1, r2, [r5]
    29d0:	2900      	cmp	r1, #0
    29d2:	d1f8      	bne.n	29c6 <pm_system_suspend+0x182>
    29d4:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    29d8:	f006 fa22 	bl	8e20 <k_sched_unlock>
	bool ret = true;
    29dc:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    29de:	bd70      	pop	{r4, r5, r6, pc}
    29e0:	4c0e      	ldr	r4, [pc, #56]	; (2a1c <pm_system_suspend+0x1d8>)
    29e2:	23b9      	movs	r3, #185	; 0xb9
    29e4:	4622      	mov	r2, r4
    29e6:	4913      	ldr	r1, [pc, #76]	; (2a34 <pm_system_suspend+0x1f0>)
    29e8:	480e      	ldr	r0, [pc, #56]	; (2a24 <pm_system_suspend+0x1e0>)
    29ea:	f007 ff87 	bl	a8fc <assert_print>
    29ee:	4907      	ldr	r1, [pc, #28]	; (2a0c <pm_system_suspend+0x1c8>)
    29f0:	4811      	ldr	r0, [pc, #68]	; (2a38 <pm_system_suspend+0x1f4>)
    29f2:	f007 ff83 	bl	a8fc <assert_print>
    29f6:	21b9      	movs	r1, #185	; 0xb9
    29f8:	4620      	mov	r0, r4
    29fa:	f007 ff78 	bl	a8ee <assert_post_action>
    29fe:	e7b1      	b.n	2964 <pm_system_suspend+0x120>
    2a00:	20005214 	.word	0x20005214
    2a04:	20004768 	.word	0x20004768
    2a08:	2000475c 	.word	0x2000475c
    2a0c:	20004750 	.word	0x20004750
    2a10:	20004754 	.word	0x20004754
    2a14:	000f423f 	.word	0x000f423f
    2a18:	000f4240 	.word	0x000f4240
    2a1c:	0000c400 	.word	0x0000c400
    2a20:	0000c460 	.word	0x0000c460
    2a24:	0000c254 	.word	0x0000c254
    2a28:	0000c478 	.word	0x0000c478
    2a2c:	2000476c 	.word	0x2000476c
    2a30:	0000abcf 	.word	0x0000abcf
    2a34:	0000c430 	.word	0x0000c430
    2a38:	0000c448 	.word	0x0000c448

00002a3c <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2a3c:	f3bf 8f5b 	dmb	ish
    2a40:	4b04      	ldr	r3, [pc, #16]	; (2a54 <pm_policy_state_lock_is_active+0x18>)
    2a42:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2a46:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    2a4a:	3800      	subs	r0, #0
    2a4c:	bf18      	it	ne
    2a4e:	2001      	movne	r0, #1
    2a50:	4770      	bx	lr
    2a52:	bf00      	nop
    2a54:	20004770 	.word	0x20004770

00002a58 <pm_policy_next_state>:
{
    2a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a5c:	b082      	sub	sp, #8
    2a5e:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2a60:	a901      	add	r1, sp, #4
    2a62:	f000 f843 	bl	2aec <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2a66:	1e44      	subs	r4, r0, #1
    2a68:	b224      	sxth	r4, r4
    2a6a:	e007      	b.n	2a7c <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    2a6c:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    2a70:	d032      	beq.n	2ad8 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    2a72:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    2a74:	42b0      	cmp	r0, r6
    2a76:	d92f      	bls.n	2ad8 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2a78:	3c01      	subs	r4, #1
    2a7a:	b224      	sxth	r4, r4
    2a7c:	2c00      	cmp	r4, #0
    2a7e:	db2a      	blt.n	2ad6 <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    2a80:	9b01      	ldr	r3, [sp, #4]
    2a82:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2a86:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    2a8a:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    2a8e:	f7ff ffd5 	bl	2a3c <pm_policy_state_lock_is_active>
    2a92:	2800      	cmp	r0, #0
    2a94:	d1f0      	bne.n	2a78 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    2a96:	6868      	ldr	r0, [r5, #4]
    2a98:	0c41      	lsrs	r1, r0, #17
    2a9a:	03c0      	lsls	r0, r0, #15
    2a9c:	4f10      	ldr	r7, [pc, #64]	; (2ae0 <pm_policy_next_state+0x88>)
    2a9e:	19c0      	adds	r0, r0, r7
    2aa0:	4a10      	ldr	r2, [pc, #64]	; (2ae4 <pm_policy_next_state+0x8c>)
    2aa2:	f04f 0300 	mov.w	r3, #0
    2aa6:	f141 0100 	adc.w	r1, r1, #0
    2aaa:	f7fd fb29 	bl	100 <__aeabi_uldivmod>
    2aae:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    2ab0:	68ab      	ldr	r3, [r5, #8]
    2ab2:	0c59      	lsrs	r1, r3, #17
    2ab4:	03db      	lsls	r3, r3, #15
    2ab6:	19d8      	adds	r0, r3, r7
    2ab8:	4a0a      	ldr	r2, [pc, #40]	; (2ae4 <pm_policy_next_state+0x8c>)
    2aba:	f04f 0300 	mov.w	r3, #0
    2abe:	f141 0100 	adc.w	r1, r1, #0
    2ac2:	f7fd fb1d 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2ac6:	4b08      	ldr	r3, [pc, #32]	; (2ae8 <pm_policy_next_state+0x90>)
    2ac8:	681b      	ldr	r3, [r3, #0]
    2aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2ace:	d0cd      	beq.n	2a6c <pm_policy_next_state+0x14>
    2ad0:	4283      	cmp	r3, r0
    2ad2:	d8cb      	bhi.n	2a6c <pm_policy_next_state+0x14>
    2ad4:	e7d0      	b.n	2a78 <pm_policy_next_state+0x20>
	return NULL;
    2ad6:	2500      	movs	r5, #0
}
    2ad8:	4628      	mov	r0, r5
    2ada:	b002      	add	sp, #8
    2adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ae0:	000f423f 	.word	0x000f423f
    2ae4:	000f4240 	.word	0x000f4240
    2ae8:	20004008 	.word	0x20004008

00002aec <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2aec:	b908      	cbnz	r0, 2af2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2aee:	4b02      	ldr	r3, [pc, #8]	; (2af8 <pm_state_cpu_get_all+0xc>)
    2af0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2af2:	2000      	movs	r0, #0
    2af4:	4770      	bx	lr
    2af6:	bf00      	nop
    2af8:	0000ca00 	.word	0x0000ca00

00002afc <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    2afc:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    2afe:	4802      	ldr	r0, [pc, #8]	; (2b08 <nrf_cc3xx_platform_abort_init+0xc>)
    2b00:	f007 fb48 	bl	a194 <nrf_cc3xx_platform_set_abort>
}
    2b04:	bd08      	pop	{r3, pc}
    2b06:	bf00      	nop
    2b08:	0000ca00 	.word	0x0000ca00

00002b0c <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2b0c:	b1d0      	cbz	r0, 2b44 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2b0e:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2b10:	6842      	ldr	r2, [r0, #4]
    2b12:	2a04      	cmp	r2, #4
    2b14:	d005      	beq.n	2b22 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2b16:	b1d2      	cbz	r2, 2b4e <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    2b18:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    2b1a:	f005 f8eb 	bl	7cf4 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2b1e:	2000      	movs	r0, #0
    }
}
    2b20:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    2b22:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2b24:	2200      	movs	r2, #0
    2b26:	f3bf 8f5b 	dmb	ish
    2b2a:	e853 1f00 	ldrex	r1, [r3]
    2b2e:	2901      	cmp	r1, #1
    2b30:	d103      	bne.n	2b3a <mutex_unlock_platform+0x2e>
    2b32:	e843 2000 	strex	r0, r2, [r3]
    2b36:	2800      	cmp	r0, #0
    2b38:	d1f7      	bne.n	2b2a <mutex_unlock_platform+0x1e>
    2b3a:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2b3e:	d104      	bne.n	2b4a <mutex_unlock_platform+0x3e>
    2b40:	4610      	mov	r0, r2
    2b42:	e7ed      	b.n	2b20 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2b44:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2b48:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2b4a:	4802      	ldr	r0, [pc, #8]	; (2b54 <mutex_unlock_platform+0x48>)
    2b4c:	e7e8      	b.n	2b20 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2b4e:	4802      	ldr	r0, [pc, #8]	; (2b58 <mutex_unlock_platform+0x4c>)
    2b50:	e7e6      	b.n	2b20 <mutex_unlock_platform+0x14>
    2b52:	bf00      	nop
    2b54:	ffff8fe9 	.word	0xffff8fe9
    2b58:	ffff8fea 	.word	0xffff8fea

00002b5c <mutex_lock_platform>:
    if(mutex == NULL) {
    2b5c:	b320      	cbz	r0, 2ba8 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2b5e:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    2b60:	6842      	ldr	r2, [r0, #4]
    2b62:	2a04      	cmp	r2, #4
    2b64:	d002      	beq.n	2b6c <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2b66:	b992      	cbnz	r2, 2b8e <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2b68:	4811      	ldr	r0, [pc, #68]	; (2bb0 <mutex_lock_platform+0x54>)
    2b6a:	e00f      	b.n	2b8c <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    2b6c:	6803      	ldr	r3, [r0, #0]
    2b6e:	2201      	movs	r2, #1
    2b70:	f3bf 8f5b 	dmb	ish
    2b74:	e853 1f00 	ldrex	r1, [r3]
    2b78:	2900      	cmp	r1, #0
    2b7a:	d103      	bne.n	2b84 <mutex_lock_platform+0x28>
    2b7c:	e843 2000 	strex	r0, r2, [r3]
    2b80:	2800      	cmp	r0, #0
    2b82:	d1f7      	bne.n	2b74 <mutex_lock_platform+0x18>
    2b84:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2b88:	d10c      	bne.n	2ba4 <mutex_lock_platform+0x48>
    2b8a:	2000      	movs	r0, #0
}
    2b8c:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    2b8e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2b98:	f004 ff8c 	bl	7ab4 <z_impl_k_mutex_lock>
        if (ret == 0) {
    2b9c:	2800      	cmp	r0, #0
    2b9e:	d0f5      	beq.n	2b8c <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    2ba0:	4804      	ldr	r0, [pc, #16]	; (2bb4 <mutex_lock_platform+0x58>)
    2ba2:	e7f3      	b.n	2b8c <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2ba4:	4803      	ldr	r0, [pc, #12]	; (2bb4 <mutex_lock_platform+0x58>)
    2ba6:	e7f1      	b.n	2b8c <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2ba8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    2bac:	4770      	bx	lr
    2bae:	bf00      	nop
    2bb0:	ffff8fea 	.word	0xffff8fea
    2bb4:	ffff8fe9 	.word	0xffff8fe9

00002bb8 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2bb8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2bba:	4604      	mov	r4, r0
    2bbc:	b190      	cbz	r0, 2be4 <mutex_free_platform+0x2c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2bbe:	6863      	ldr	r3, [r4, #4]
    2bc0:	2b04      	cmp	r3, #4
    2bc2:	d00e      	beq.n	2be2 <mutex_free_platform+0x2a>
    2bc4:	2b08      	cmp	r3, #8
    2bc6:	d00c      	beq.n	2be2 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2bc8:	b15b      	cbz	r3, 2be2 <mutex_free_platform+0x2a>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2bca:	f013 0f02 	tst.w	r3, #2
    2bce:	d10e      	bne.n	2bee <mutex_free_platform+0x36>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2bd0:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    2bd2:	2200      	movs	r2, #0
    2bd4:	601a      	str	r2, [r3, #0]
    2bd6:	605a      	str	r2, [r3, #4]
    2bd8:	609a      	str	r2, [r3, #8]
    2bda:	60da      	str	r2, [r3, #12]
    2bdc:	611a      	str	r2, [r3, #16]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2bde:	2300      	movs	r3, #0
    2be0:	6063      	str	r3, [r4, #4]
}
    2be2:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    2be4:	4b05      	ldr	r3, [pc, #20]	; (2bfc <mutex_free_platform+0x44>)
    2be6:	685b      	ldr	r3, [r3, #4]
    2be8:	4805      	ldr	r0, [pc, #20]	; (2c00 <mutex_free_platform+0x48>)
    2bea:	4798      	blx	r3
    2bec:	e7e7      	b.n	2bbe <mutex_free_platform+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2bee:	4621      	mov	r1, r4
    2bf0:	4804      	ldr	r0, [pc, #16]	; (2c04 <mutex_free_platform+0x4c>)
    2bf2:	f004 fca9 	bl	7548 <k_mem_slab_free>
        mutex->mutex = NULL;
    2bf6:	2300      	movs	r3, #0
    2bf8:	6023      	str	r3, [r4, #0]
    2bfa:	e7f0      	b.n	2bde <mutex_free_platform+0x26>
    2bfc:	20004150 	.word	0x20004150
    2c00:	0000ca08 	.word	0x0000ca08
    2c04:	2000478c 	.word	0x2000478c

00002c08 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2c08:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2c0a:	4604      	mov	r4, r0
    2c0c:	b178      	cbz	r0, 2c2e <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2c0e:	6863      	ldr	r3, [r4, #4]
    2c10:	2b04      	cmp	r3, #4
    2c12:	d00b      	beq.n	2c2c <mutex_init_platform+0x24>
    2c14:	2b08      	cmp	r3, #8
    2c16:	d009      	beq.n	2c2c <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2c18:	b90b      	cbnz	r3, 2c1e <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    2c1a:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2c1c:	b163      	cbz	r3, 2c38 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    2c1e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2c20:	f009 f819 	bl	bc56 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2c24:	6863      	ldr	r3, [r4, #4]
    2c26:	f043 0301 	orr.w	r3, r3, #1
    2c2a:	6063      	str	r3, [r4, #4]
}
    2c2c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    2c2e:	4b10      	ldr	r3, [pc, #64]	; (2c70 <mutex_init_platform+0x68>)
    2c30:	685b      	ldr	r3, [r3, #4]
    2c32:	4810      	ldr	r0, [pc, #64]	; (2c74 <mutex_init_platform+0x6c>)
    2c34:	4798      	blx	r3
    2c36:	e7ea      	b.n	2c0e <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2c38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2c3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c40:	4621      	mov	r1, r4
    2c42:	480d      	ldr	r0, [pc, #52]	; (2c78 <mutex_init_platform+0x70>)
    2c44:	f004 fc0a 	bl	745c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2c48:	b908      	cbnz	r0, 2c4e <mutex_init_platform+0x46>
    2c4a:	6823      	ldr	r3, [r4, #0]
    2c4c:	b91b      	cbnz	r3, 2c56 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    2c4e:	4b08      	ldr	r3, [pc, #32]	; (2c70 <mutex_init_platform+0x68>)
    2c50:	685b      	ldr	r3, [r3, #4]
    2c52:	480a      	ldr	r0, [pc, #40]	; (2c7c <mutex_init_platform+0x74>)
    2c54:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2c56:	6823      	ldr	r3, [r4, #0]
    2c58:	2200      	movs	r2, #0
    2c5a:	601a      	str	r2, [r3, #0]
    2c5c:	605a      	str	r2, [r3, #4]
    2c5e:	609a      	str	r2, [r3, #8]
    2c60:	60da      	str	r2, [r3, #12]
    2c62:	611a      	str	r2, [r3, #16]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2c64:	6863      	ldr	r3, [r4, #4]
    2c66:	f043 0302 	orr.w	r3, r3, #2
    2c6a:	6063      	str	r3, [r4, #4]
    2c6c:	e7d7      	b.n	2c1e <mutex_init_platform+0x16>
    2c6e:	bf00      	nop
    2c70:	20004150 	.word	0x20004150
    2c74:	0000ca08 	.word	0x0000ca08
    2c78:	2000478c 	.word	0x2000478c
    2c7c:	0000ca30 	.word	0x0000ca30

00002c80 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2c80:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2c82:	2340      	movs	r3, #64	; 0x40
    2c84:	2214      	movs	r2, #20
    2c86:	4904      	ldr	r1, [pc, #16]	; (2c98 <nrf_cc3xx_platform_mutex_init+0x18>)
    2c88:	4804      	ldr	r0, [pc, #16]	; (2c9c <nrf_cc3xx_platform_mutex_init+0x1c>)
    2c8a:	f008 ff90 	bl	bbae <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2c8e:	4904      	ldr	r1, [pc, #16]	; (2ca0 <nrf_cc3xx_platform_mutex_init+0x20>)
    2c90:	4804      	ldr	r0, [pc, #16]	; (2ca4 <nrf_cc3xx_platform_mutex_init+0x24>)
    2c92:	f007 fadf 	bl	a254 <nrf_cc3xx_platform_set_mutexes>
}
    2c96:	bd08      	pop	{r3, pc}
    2c98:	200047ac 	.word	0x200047ac
    2c9c:	2000478c 	.word	0x2000478c
    2ca0:	0000ca70 	.word	0x0000ca70
    2ca4:	0000ca60 	.word	0x0000ca60

00002ca8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2ca8:	4901      	ldr	r1, [pc, #4]	; (2cb0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2caa:	2210      	movs	r2, #16
	str	r2, [r1]
    2cac:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2cae:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2cb0:	e000ed10 	.word	0xe000ed10

00002cb4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2cb4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2cb6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2cb8:	f380 8811 	msr	BASEPRI, r0
	isb
    2cbc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2cc0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2cc4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2cc6:	b662      	cpsie	i
	isb
    2cc8:	f3bf 8f6f 	isb	sy

	bx	lr
    2ccc:	4770      	bx	lr
    2cce:	bf00      	nop

00002cd0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2cd0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2cd2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2cd4:	f381 8811 	msr	BASEPRI, r1

	wfe
    2cd8:	bf20      	wfe

	msr	BASEPRI, r0
    2cda:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2cde:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2ce0:	4770      	bx	lr
    2ce2:	bf00      	nop

00002ce4 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    2ce4:	b570      	push	{r4, r5, r6, lr}
    2ce6:	b086      	sub	sp, #24
    2ce8:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2cea:	4e1e      	ldr	r6, [pc, #120]	; (2d64 <esf_dump+0x80>)
    2cec:	6883      	ldr	r3, [r0, #8]
    2cee:	9305      	str	r3, [sp, #20]
    2cf0:	6843      	ldr	r3, [r0, #4]
    2cf2:	9304      	str	r3, [sp, #16]
    2cf4:	6803      	ldr	r3, [r0, #0]
    2cf6:	9303      	str	r3, [sp, #12]
    2cf8:	4b1b      	ldr	r3, [pc, #108]	; (2d68 <esf_dump+0x84>)
    2cfa:	9302      	str	r3, [sp, #8]
    2cfc:	2400      	movs	r4, #0
    2cfe:	9401      	str	r4, [sp, #4]
    2d00:	9400      	str	r4, [sp, #0]
    2d02:	4623      	mov	r3, r4
    2d04:	2201      	movs	r2, #1
    2d06:	4631      	mov	r1, r6
    2d08:	4620      	mov	r0, r4
    2d0a:	f007 feab 	bl	aa64 <z_log_msg2_runtime_create>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2d0e:	696b      	ldr	r3, [r5, #20]
    2d10:	9305      	str	r3, [sp, #20]
    2d12:	692b      	ldr	r3, [r5, #16]
    2d14:	9304      	str	r3, [sp, #16]
    2d16:	68eb      	ldr	r3, [r5, #12]
    2d18:	9303      	str	r3, [sp, #12]
    2d1a:	4b14      	ldr	r3, [pc, #80]	; (2d6c <esf_dump+0x88>)
    2d1c:	9302      	str	r3, [sp, #8]
    2d1e:	9401      	str	r4, [sp, #4]
    2d20:	9400      	str	r4, [sp, #0]
    2d22:	4623      	mov	r3, r4
    2d24:	2201      	movs	r2, #1
    2d26:	4631      	mov	r1, r6
    2d28:	4620      	mov	r0, r4
    2d2a:	f007 fe9b 	bl	aa64 <z_log_msg2_runtime_create>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2d2e:	69eb      	ldr	r3, [r5, #28]
    2d30:	9303      	str	r3, [sp, #12]
    2d32:	4b0f      	ldr	r3, [pc, #60]	; (2d70 <esf_dump+0x8c>)
    2d34:	9302      	str	r3, [sp, #8]
    2d36:	9401      	str	r4, [sp, #4]
    2d38:	9400      	str	r4, [sp, #0]
    2d3a:	4623      	mov	r3, r4
    2d3c:	2201      	movs	r2, #1
    2d3e:	4631      	mov	r1, r6
    2d40:	4620      	mov	r0, r4
    2d42:	f007 fe8f 	bl	aa64 <z_log_msg2_runtime_create>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2d46:	69ab      	ldr	r3, [r5, #24]
    2d48:	9303      	str	r3, [sp, #12]
    2d4a:	4b0a      	ldr	r3, [pc, #40]	; (2d74 <esf_dump+0x90>)
    2d4c:	9302      	str	r3, [sp, #8]
    2d4e:	9401      	str	r4, [sp, #4]
    2d50:	9400      	str	r4, [sp, #0]
    2d52:	4623      	mov	r3, r4
    2d54:	2201      	movs	r2, #1
    2d56:	4631      	mov	r1, r6
    2d58:	4620      	mov	r0, r4
    2d5a:	f007 fe83 	bl	aa64 <z_log_msg2_runtime_create>
		esf->basic.pc);
}
    2d5e:	b006      	add	sp, #24
    2d60:	bd70      	pop	{r4, r5, r6, pc}
    2d62:	bf00      	nop
    2d64:	0000c088 	.word	0x0000c088
    2d68:	0000ca84 	.word	0x0000ca84
    2d6c:	0000cab4 	.word	0x0000cab4
    2d70:	0000cae4 	.word	0x0000cae4
    2d74:	0000caf4 	.word	0x0000caf4

00002d78 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2d78:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2d7a:	2800      	cmp	r0, #0
    2d7c:	db07      	blt.n	2d8e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2d7e:	f000 021f 	and.w	r2, r0, #31
    2d82:	0940      	lsrs	r0, r0, #5
    2d84:	2301      	movs	r3, #1
    2d86:	4093      	lsls	r3, r2
    2d88:	4a01      	ldr	r2, [pc, #4]	; (2d90 <arch_irq_enable+0x18>)
    2d8a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    2d8e:	4770      	bx	lr
    2d90:	e000e100 	.word	0xe000e100

00002d94 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2d94:	0942      	lsrs	r2, r0, #5
    2d96:	4b05      	ldr	r3, [pc, #20]	; (2dac <arch_irq_is_enabled+0x18>)
    2d98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2d9c:	f000 001f 	and.w	r0, r0, #31
    2da0:	2301      	movs	r3, #1
    2da2:	fa03 f000 	lsl.w	r0, r3, r0
}
    2da6:	4010      	ands	r0, r2
    2da8:	4770      	bx	lr
    2daa:	bf00      	nop
    2dac:	e000e100 	.word	0xe000e100

00002db0 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    2db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2db2:	4604      	mov	r4, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    2db4:	1c4d      	adds	r5, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2db6:	2d07      	cmp	r5, #7
    2db8:	d80b      	bhi.n	2dd2 <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2dba:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2dbc:	2800      	cmp	r0, #0
    2dbe:	db1b      	blt.n	2df8 <z_arm_irq_priority_set+0x48>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2dc0:	016d      	lsls	r5, r5, #5
    2dc2:	b2ed      	uxtb	r5, r5
    2dc4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    2dc8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    2dcc:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
}
    2dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dd2:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2dd4:	4f0c      	ldr	r7, [pc, #48]	; (2e08 <z_arm_irq_priority_set+0x58>)
    2dd6:	2357      	movs	r3, #87	; 0x57
    2dd8:	463a      	mov	r2, r7
    2dda:	490c      	ldr	r1, [pc, #48]	; (2e0c <z_arm_irq_priority_set+0x5c>)
    2ddc:	480c      	ldr	r0, [pc, #48]	; (2e10 <z_arm_irq_priority_set+0x60>)
    2dde:	f007 fd8d 	bl	a8fc <assert_print>
    2de2:	2307      	movs	r3, #7
    2de4:	4622      	mov	r2, r4
    2de6:	4631      	mov	r1, r6
    2de8:	480a      	ldr	r0, [pc, #40]	; (2e14 <z_arm_irq_priority_set+0x64>)
    2dea:	f007 fd87 	bl	a8fc <assert_print>
    2dee:	2157      	movs	r1, #87	; 0x57
    2df0:	4638      	mov	r0, r7
    2df2:	f007 fd7c 	bl	a8ee <assert_post_action>
    2df6:	e7e0      	b.n	2dba <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2df8:	f000 000f 	and.w	r0, r0, #15
    2dfc:	016d      	lsls	r5, r5, #5
    2dfe:	b2ed      	uxtb	r5, r5
    2e00:	4b05      	ldr	r3, [pc, #20]	; (2e18 <z_arm_irq_priority_set+0x68>)
    2e02:	541d      	strb	r5, [r3, r0]
}
    2e04:	e7e4      	b.n	2dd0 <z_arm_irq_priority_set+0x20>
    2e06:	bf00      	nop
    2e08:	0000cb24 	.word	0x0000cb24
    2e0c:	0000cb5c 	.word	0x0000cb5c
    2e10:	0000c254 	.word	0x0000c254
    2e14:	0000cb78 	.word	0x0000cb78
    2e18:	e000ed14 	.word	0xe000ed14

00002e1c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2e1c:	bf30      	wfi
    b z_SysNmiOnReset
    2e1e:	f7ff bffd 	b.w	2e1c <z_SysNmiOnReset>
    2e22:	bf00      	nop

00002e24 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2e24:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2e26:	4b0b      	ldr	r3, [pc, #44]	; (2e54 <z_arm_prep_c+0x30>)
    2e28:	4a0b      	ldr	r2, [pc, #44]	; (2e58 <z_arm_prep_c+0x34>)
    2e2a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2e2e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2e30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2e34:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2e38:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2e3c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2e40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2e44:	f004 fa36 	bl	72b4 <z_bss_zero>
	z_data_copy();
    2e48:	f006 fbfc 	bl	9644 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2e4c:	f000 fc72 	bl	3734 <z_arm_interrupt_init>
	z_cstart();
    2e50:	f004 fa8e 	bl	7370 <z_cstart>
    2e54:	e000ed00 	.word	0xe000ed00
    2e58:	00000000 	.word	0x00000000

00002e5c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2e5c:	4a0a      	ldr	r2, [pc, #40]	; (2e88 <arch_swap+0x2c>)
    2e5e:	6893      	ldr	r3, [r2, #8]
    2e60:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    2e64:	4909      	ldr	r1, [pc, #36]	; (2e8c <arch_swap+0x30>)
    2e66:	6809      	ldr	r1, [r1, #0]
    2e68:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2e6c:	4908      	ldr	r1, [pc, #32]	; (2e90 <arch_swap+0x34>)
    2e6e:	684b      	ldr	r3, [r1, #4]
    2e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2e74:	604b      	str	r3, [r1, #4]
    2e76:	2300      	movs	r3, #0
    2e78:	f383 8811 	msr	BASEPRI, r3
    2e7c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2e80:	6893      	ldr	r3, [r2, #8]
}
    2e82:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    2e86:	4770      	bx	lr
    2e88:	20005214 	.word	0x20005214
    2e8c:	0000d874 	.word	0x0000d874
    2e90:	e000ed00 	.word	0xe000ed00

00002e94 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2e94:	4913      	ldr	r1, [pc, #76]	; (2ee4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2e96:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2e98:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2e9c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2e9e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2ea2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2ea6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2ea8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2eac:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2eb0:	4f0d      	ldr	r7, [pc, #52]	; (2ee8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2eb2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2eb6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2eb8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2eba:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2ebc:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    2ec0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2ec2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2ec6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2eca:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2ecc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2ece:	f000 fcdb 	bl	3888 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2ed2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2ed6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2eda:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2ede:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2ee2:	4770      	bx	lr
    ldr r1, =_kernel
    2ee4:	20005214 	.word	0x20005214
    ldr v4, =_SCS_ICSR
    2ee8:	e000ed04 	.word	0xe000ed04

00002eec <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2eec:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2ef0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2ef2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2ef6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2efa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2efc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2f00:	2902      	cmp	r1, #2
    beq _oops
    2f02:	d0ff      	beq.n	2f04 <_oops>

00002f04 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2f04:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2f06:	f007 fdc8 	bl	aa9a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2f0a:	bd01      	pop	{r0, pc}

00002f0c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    2f0c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2f0e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    2f12:	490e      	ldr	r1, [pc, #56]	; (2f4c <arch_new_thread+0x40>)
    2f14:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    2f18:	f021 0101 	bic.w	r1, r1, #1
    2f1c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    2f20:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2f24:	9b01      	ldr	r3, [sp, #4]
    2f26:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2f2a:	9b02      	ldr	r3, [sp, #8]
    2f2c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2f30:	9b03      	ldr	r3, [sp, #12]
    2f32:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2f36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2f3a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    2f3e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2f40:	2300      	movs	r3, #0
    2f42:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2f46:	bc10      	pop	{r4}
    2f48:	4770      	bx	lr
    2f4a:	bf00      	nop
    2f4c:	0000a83f 	.word	0x0000a83f

00002f50 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2f50:	4b12      	ldr	r3, [pc, #72]	; (2f9c <z_check_thread_stack_fail+0x4c>)
    2f52:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    2f54:	b302      	cbz	r2, 2f98 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2f56:	f110 0f16 	cmn.w	r0, #22
    2f5a:	d011      	beq.n	2f80 <z_check_thread_stack_fail+0x30>
    2f5c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    2f60:	f1a3 0c20 	sub.w	ip, r3, #32
    2f64:	4584      	cmp	ip, r0
    2f66:	d805      	bhi.n	2f74 <z_check_thread_stack_fail+0x24>
    2f68:	4283      	cmp	r3, r0
    2f6a:	d905      	bls.n	2f78 <z_check_thread_stack_fail+0x28>
    2f6c:	428b      	cmp	r3, r1
    2f6e:	d805      	bhi.n	2f7c <z_check_thread_stack_fail+0x2c>
    2f70:	2100      	movs	r1, #0
    2f72:	e00b      	b.n	2f8c <z_check_thread_stack_fail+0x3c>
    2f74:	2100      	movs	r1, #0
    2f76:	e009      	b.n	2f8c <z_check_thread_stack_fail+0x3c>
    2f78:	2100      	movs	r1, #0
    2f7a:	e007      	b.n	2f8c <z_check_thread_stack_fail+0x3c>
    2f7c:	2101      	movs	r1, #1
    2f7e:	e005      	b.n	2f8c <z_check_thread_stack_fail+0x3c>
    2f80:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    2f84:	428b      	cmp	r3, r1
    2f86:	bf94      	ite	ls
    2f88:	2100      	movls	r1, #0
    2f8a:	2101      	movhi	r1, #1
    2f8c:	b909      	cbnz	r1, 2f92 <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2f8e:	2000      	movs	r0, #0
}
    2f90:	4770      	bx	lr
		return thread->stack_info.start;
    2f92:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    2f96:	4770      	bx	lr
		return 0;
    2f98:	2000      	movs	r0, #0
    2f9a:	4770      	bx	lr
    2f9c:	20005214 	.word	0x20005214

00002fa0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2fa0:	b508      	push	{r3, lr}
    2fa2:	460d      	mov	r5, r1
    2fa4:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2fa6:	4b08      	ldr	r3, [pc, #32]	; (2fc8 <arch_switch_to_main_thread+0x28>)
    2fa8:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2faa:	f000 fc6d 	bl	3888 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2fae:	4620      	mov	r0, r4
    2fb0:	f385 8809 	msr	PSP, r5
    2fb4:	2100      	movs	r1, #0
    2fb6:	b663      	cpsie	if
    2fb8:	f381 8811 	msr	BASEPRI, r1
    2fbc:	f3bf 8f6f 	isb	sy
    2fc0:	2200      	movs	r2, #0
    2fc2:	2300      	movs	r3, #0
    2fc4:	f007 fc3b 	bl	a83e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2fc8:	20005214 	.word	0x20005214

00002fcc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2fcc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2fce:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2fd0:	4a0b      	ldr	r2, [pc, #44]	; (3000 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2fd2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2fd4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2fd6:	bf1e      	ittt	ne
	movne	r1, #0
    2fd8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2fda:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2fdc:	f008 fe1f 	blne	bc1e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2fe0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2fe2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2fe6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2fea:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2fee:	4905      	ldr	r1, [pc, #20]	; (3004 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2ff0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2ff2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2ff4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2ff6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2ffa:	4903      	ldr	r1, [pc, #12]	; (3008 <_isr_wrapper+0x3c>)
	bx r1
    2ffc:	4708      	bx	r1
    2ffe:	0000      	.short	0x0000
	ldr r2, =_kernel
    3000:	20005214 	.word	0x20005214
	ldr r1, =_sw_isr_table
    3004:	0000bee0 	.word	0x0000bee0
	ldr r1, =z_arm_int_exit
    3008:	0000300d 	.word	0x0000300d

0000300c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    300c:	4b04      	ldr	r3, [pc, #16]	; (3020 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    300e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3010:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    3012:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3014:	d003      	beq.n	301e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3016:	4903      	ldr	r1, [pc, #12]	; (3024 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    301c:	600a      	str	r2, [r1, #0]

0000301e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    301e:	4770      	bx	lr
	ldr r3, =_kernel
    3020:	20005214 	.word	0x20005214
	ldr r1, =_SCS_ICSR
    3024:	e000ed04 	.word	0xe000ed04

00003028 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    3028:	b570      	push	{r4, r5, r6, lr}
    302a:	b084      	sub	sp, #16
    302c:	4605      	mov	r5, r0
    302e:	460e      	mov	r6, r1
    3030:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    3032:	4b47      	ldr	r3, [pc, #284]	; (3150 <bus_fault+0x128>)
    3034:	9302      	str	r3, [sp, #8]
    3036:	2000      	movs	r0, #0
    3038:	9001      	str	r0, [sp, #4]
    303a:	9000      	str	r0, [sp, #0]
    303c:	4603      	mov	r3, r0
    303e:	2201      	movs	r2, #1
    3040:	4944      	ldr	r1, [pc, #272]	; (3154 <bus_fault+0x12c>)
    3042:	f007 fd3e 	bl	aac2 <z_log_msg2_runtime_create>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3046:	4b44      	ldr	r3, [pc, #272]	; (3158 <bus_fault+0x130>)
    3048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    304a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    304e:	d125      	bne.n	309c <bus_fault+0x74>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3050:	4b41      	ldr	r3, [pc, #260]	; (3158 <bus_fault+0x130>)
    3052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3054:	f413 6f00 	tst.w	r3, #2048	; 0x800
    3058:	d12b      	bne.n	30b2 <bus_fault+0x8a>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    305a:	4b3f      	ldr	r3, [pc, #252]	; (3158 <bus_fault+0x130>)
    305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    305e:	f413 7f00 	tst.w	r3, #512	; 0x200
    3062:	d131      	bne.n	30c8 <bus_fault+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3064:	4b3c      	ldr	r3, [pc, #240]	; (3158 <bus_fault+0x130>)
    3066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3068:	f413 6f80 	tst.w	r3, #1024	; 0x400
    306c:	d14f      	bne.n	310e <bus_fault+0xe6>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    306e:	4b3a      	ldr	r3, [pc, #232]	; (3158 <bus_fault+0x130>)
    3070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3072:	f413 7f80 	tst.w	r3, #256	; 0x100
    3076:	d155      	bne.n	3124 <bus_fault+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3078:	4b37      	ldr	r3, [pc, #220]	; (3158 <bus_fault+0x130>)
    307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    307c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    3080:	d15b      	bne.n	313a <bus_fault+0x112>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3082:	4a35      	ldr	r2, [pc, #212]	; (3158 <bus_fault+0x130>)
    3084:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3086:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    308a:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    308c:	2101      	movs	r1, #1
    308e:	4628      	mov	r0, r5
    3090:	f007 fd15 	bl	aabe <memory_fault_recoverable>
    3094:	7020      	strb	r0, [r4, #0]

	return reason;
}
    3096:	2000      	movs	r0, #0
    3098:	b004      	add	sp, #16
    309a:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
    309c:	4b2f      	ldr	r3, [pc, #188]	; (315c <bus_fault+0x134>)
    309e:	9302      	str	r3, [sp, #8]
    30a0:	2000      	movs	r0, #0
    30a2:	9001      	str	r0, [sp, #4]
    30a4:	9000      	str	r0, [sp, #0]
    30a6:	4603      	mov	r3, r0
    30a8:	2201      	movs	r2, #1
    30aa:	492a      	ldr	r1, [pc, #168]	; (3154 <bus_fault+0x12c>)
    30ac:	f007 fd09 	bl	aac2 <z_log_msg2_runtime_create>
    30b0:	e7ce      	b.n	3050 <bus_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    30b2:	4b2b      	ldr	r3, [pc, #172]	; (3160 <bus_fault+0x138>)
    30b4:	9302      	str	r3, [sp, #8]
    30b6:	2000      	movs	r0, #0
    30b8:	9001      	str	r0, [sp, #4]
    30ba:	9000      	str	r0, [sp, #0]
    30bc:	4603      	mov	r3, r0
    30be:	2201      	movs	r2, #1
    30c0:	4924      	ldr	r1, [pc, #144]	; (3154 <bus_fault+0x12c>)
    30c2:	f007 fcfe 	bl	aac2 <z_log_msg2_runtime_create>
    30c6:	e7c8      	b.n	305a <bus_fault+0x32>
		PR_FAULT_INFO("  Precise data bus error");
    30c8:	4b26      	ldr	r3, [pc, #152]	; (3164 <bus_fault+0x13c>)
    30ca:	9302      	str	r3, [sp, #8]
    30cc:	2000      	movs	r0, #0
    30ce:	9001      	str	r0, [sp, #4]
    30d0:	9000      	str	r0, [sp, #0]
    30d2:	4603      	mov	r3, r0
    30d4:	2201      	movs	r2, #1
    30d6:	491f      	ldr	r1, [pc, #124]	; (3154 <bus_fault+0x12c>)
    30d8:	f007 fcf3 	bl	aac2 <z_log_msg2_runtime_create>
		STORE_xFAR(bfar, SCB->BFAR);
    30dc:	4b1e      	ldr	r3, [pc, #120]	; (3158 <bus_fault+0x130>)
    30de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    30e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30e2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    30e6:	d0bd      	beq.n	3064 <bus_fault+0x3c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    30e8:	9203      	str	r2, [sp, #12]
    30ea:	4b1f      	ldr	r3, [pc, #124]	; (3168 <bus_fault+0x140>)
    30ec:	9302      	str	r3, [sp, #8]
    30ee:	2000      	movs	r0, #0
    30f0:	9001      	str	r0, [sp, #4]
    30f2:	9000      	str	r0, [sp, #0]
    30f4:	4603      	mov	r3, r0
    30f6:	2201      	movs	r2, #1
    30f8:	4916      	ldr	r1, [pc, #88]	; (3154 <bus_fault+0x12c>)
    30fa:	f007 fce2 	bl	aac2 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    30fe:	2e00      	cmp	r6, #0
    3100:	d0b0      	beq.n	3064 <bus_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3102:	4a15      	ldr	r2, [pc, #84]	; (3158 <bus_fault+0x130>)
    3104:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3106:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    310a:	6293      	str	r3, [r2, #40]	; 0x28
    310c:	e7aa      	b.n	3064 <bus_fault+0x3c>
		PR_FAULT_INFO("  Imprecise data bus error");
    310e:	4b17      	ldr	r3, [pc, #92]	; (316c <bus_fault+0x144>)
    3110:	9302      	str	r3, [sp, #8]
    3112:	2000      	movs	r0, #0
    3114:	9001      	str	r0, [sp, #4]
    3116:	9000      	str	r0, [sp, #0]
    3118:	4603      	mov	r3, r0
    311a:	2201      	movs	r2, #1
    311c:	490d      	ldr	r1, [pc, #52]	; (3154 <bus_fault+0x12c>)
    311e:	f007 fcd0 	bl	aac2 <z_log_msg2_runtime_create>
    3122:	e7a4      	b.n	306e <bus_fault+0x46>
		PR_FAULT_INFO("  Instruction bus error");
    3124:	4b12      	ldr	r3, [pc, #72]	; (3170 <bus_fault+0x148>)
    3126:	9302      	str	r3, [sp, #8]
    3128:	2000      	movs	r0, #0
    312a:	9001      	str	r0, [sp, #4]
    312c:	9000      	str	r0, [sp, #0]
    312e:	4603      	mov	r3, r0
    3130:	2201      	movs	r2, #1
    3132:	4908      	ldr	r1, [pc, #32]	; (3154 <bus_fault+0x12c>)
    3134:	f007 fcc5 	bl	aac2 <z_log_msg2_runtime_create>
    3138:	e7a3      	b.n	3082 <bus_fault+0x5a>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    313a:	4b0e      	ldr	r3, [pc, #56]	; (3174 <bus_fault+0x14c>)
    313c:	9302      	str	r3, [sp, #8]
    313e:	2000      	movs	r0, #0
    3140:	9001      	str	r0, [sp, #4]
    3142:	9000      	str	r0, [sp, #0]
    3144:	4603      	mov	r3, r0
    3146:	2201      	movs	r2, #1
    3148:	4902      	ldr	r1, [pc, #8]	; (3154 <bus_fault+0x12c>)
    314a:	f007 fcba 	bl	aac2 <z_log_msg2_runtime_create>
    314e:	e798      	b.n	3082 <bus_fault+0x5a>
    3150:	0000cbb8 	.word	0x0000cbb8
    3154:	0000c088 	.word	0x0000c088
    3158:	e000ed00 	.word	0xe000ed00
    315c:	0000cbd0 	.word	0x0000cbd0
    3160:	0000cbe4 	.word	0x0000cbe4
    3164:	0000cbf8 	.word	0x0000cbf8
    3168:	0000cc14 	.word	0x0000cc14
    316c:	0000cc2c 	.word	0x0000cc2c
    3170:	0000cc48 	.word	0x0000cc48
    3174:	0000cc60 	.word	0x0000cc60

00003178 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    3178:	b500      	push	{lr}
    317a:	b085      	sub	sp, #20
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    317c:	4b3a      	ldr	r3, [pc, #232]	; (3268 <usage_fault+0xf0>)
    317e:	9302      	str	r3, [sp, #8]
    3180:	2000      	movs	r0, #0
    3182:	9001      	str	r0, [sp, #4]
    3184:	9000      	str	r0, [sp, #0]
    3186:	4603      	mov	r3, r0
    3188:	2201      	movs	r2, #1
    318a:	4938      	ldr	r1, [pc, #224]	; (326c <usage_fault+0xf4>)
    318c:	f007 fc99 	bl	aac2 <z_log_msg2_runtime_create>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3190:	4b37      	ldr	r3, [pc, #220]	; (3270 <usage_fault+0xf8>)
    3192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3194:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    3198:	d123      	bne.n	31e2 <usage_fault+0x6a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    319a:	4b35      	ldr	r3, [pc, #212]	; (3270 <usage_fault+0xf8>)
    319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    319e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    31a2:	d129      	bne.n	31f8 <usage_fault+0x80>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    31a4:	4b32      	ldr	r3, [pc, #200]	; (3270 <usage_fault+0xf8>)
    31a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31a8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    31ac:	d12f      	bne.n	320e <usage_fault+0x96>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    31ae:	4b30      	ldr	r3, [pc, #192]	; (3270 <usage_fault+0xf8>)
    31b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31b2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    31b6:	d135      	bne.n	3224 <usage_fault+0xac>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    31b8:	4b2d      	ldr	r3, [pc, #180]	; (3270 <usage_fault+0xf8>)
    31ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31bc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    31c0:	d13b      	bne.n	323a <usage_fault+0xc2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    31c2:	4b2b      	ldr	r3, [pc, #172]	; (3270 <usage_fault+0xf8>)
    31c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31c6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    31ca:	d141      	bne.n	3250 <usage_fault+0xd8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    31cc:	4a28      	ldr	r2, [pc, #160]	; (3270 <usage_fault+0xf8>)
    31ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
    31d0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    31d4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    31d8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    31da:	2000      	movs	r0, #0
    31dc:	b005      	add	sp, #20
    31de:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
    31e2:	4b24      	ldr	r3, [pc, #144]	; (3274 <usage_fault+0xfc>)
    31e4:	9302      	str	r3, [sp, #8]
    31e6:	2000      	movs	r0, #0
    31e8:	9001      	str	r0, [sp, #4]
    31ea:	9000      	str	r0, [sp, #0]
    31ec:	4603      	mov	r3, r0
    31ee:	2201      	movs	r2, #1
    31f0:	491e      	ldr	r1, [pc, #120]	; (326c <usage_fault+0xf4>)
    31f2:	f007 fc66 	bl	aac2 <z_log_msg2_runtime_create>
    31f6:	e7d0      	b.n	319a <usage_fault+0x22>
		PR_FAULT_INFO("  Unaligned memory access");
    31f8:	4b1f      	ldr	r3, [pc, #124]	; (3278 <usage_fault+0x100>)
    31fa:	9302      	str	r3, [sp, #8]
    31fc:	2000      	movs	r0, #0
    31fe:	9001      	str	r0, [sp, #4]
    3200:	9000      	str	r0, [sp, #0]
    3202:	4603      	mov	r3, r0
    3204:	2201      	movs	r2, #1
    3206:	4919      	ldr	r1, [pc, #100]	; (326c <usage_fault+0xf4>)
    3208:	f007 fc5b 	bl	aac2 <z_log_msg2_runtime_create>
    320c:	e7ca      	b.n	31a4 <usage_fault+0x2c>
		PR_FAULT_INFO("  No coprocessor instructions");
    320e:	4b1b      	ldr	r3, [pc, #108]	; (327c <usage_fault+0x104>)
    3210:	9302      	str	r3, [sp, #8]
    3212:	2000      	movs	r0, #0
    3214:	9001      	str	r0, [sp, #4]
    3216:	9000      	str	r0, [sp, #0]
    3218:	4603      	mov	r3, r0
    321a:	2201      	movs	r2, #1
    321c:	4913      	ldr	r1, [pc, #76]	; (326c <usage_fault+0xf4>)
    321e:	f007 fc50 	bl	aac2 <z_log_msg2_runtime_create>
    3222:	e7c4      	b.n	31ae <usage_fault+0x36>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3224:	4b16      	ldr	r3, [pc, #88]	; (3280 <usage_fault+0x108>)
    3226:	9302      	str	r3, [sp, #8]
    3228:	2000      	movs	r0, #0
    322a:	9001      	str	r0, [sp, #4]
    322c:	9000      	str	r0, [sp, #0]
    322e:	4603      	mov	r3, r0
    3230:	2201      	movs	r2, #1
    3232:	490e      	ldr	r1, [pc, #56]	; (326c <usage_fault+0xf4>)
    3234:	f007 fc45 	bl	aac2 <z_log_msg2_runtime_create>
    3238:	e7be      	b.n	31b8 <usage_fault+0x40>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    323a:	4b12      	ldr	r3, [pc, #72]	; (3284 <usage_fault+0x10c>)
    323c:	9302      	str	r3, [sp, #8]
    323e:	2000      	movs	r0, #0
    3240:	9001      	str	r0, [sp, #4]
    3242:	9000      	str	r0, [sp, #0]
    3244:	4603      	mov	r3, r0
    3246:	2201      	movs	r2, #1
    3248:	4908      	ldr	r1, [pc, #32]	; (326c <usage_fault+0xf4>)
    324a:	f007 fc3a 	bl	aac2 <z_log_msg2_runtime_create>
    324e:	e7b8      	b.n	31c2 <usage_fault+0x4a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3250:	4b0d      	ldr	r3, [pc, #52]	; (3288 <usage_fault+0x110>)
    3252:	9302      	str	r3, [sp, #8]
    3254:	2000      	movs	r0, #0
    3256:	9001      	str	r0, [sp, #4]
    3258:	9000      	str	r0, [sp, #0]
    325a:	4603      	mov	r3, r0
    325c:	2201      	movs	r2, #1
    325e:	4903      	ldr	r1, [pc, #12]	; (326c <usage_fault+0xf4>)
    3260:	f007 fc2f 	bl	aac2 <z_log_msg2_runtime_create>
    3264:	e7b2      	b.n	31cc <usage_fault+0x54>
    3266:	bf00      	nop
    3268:	0000cc90 	.word	0x0000cc90
    326c:	0000c088 	.word	0x0000c088
    3270:	e000ed00 	.word	0xe000ed00
    3274:	0000cca8 	.word	0x0000cca8
    3278:	0000ccbc 	.word	0x0000ccbc
    327c:	0000ccd8 	.word	0x0000ccd8
    3280:	0000ccf8 	.word	0x0000ccf8
    3284:	0000cd20 	.word	0x0000cd20
    3288:	0000cd3c 	.word	0x0000cd3c

0000328c <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    328c:	b500      	push	{lr}
    328e:	b085      	sub	sp, #20
	*recoverable = false;
    3290:	2000      	movs	r0, #0
    3292:	7008      	strb	r0, [r1, #0]

	PR_FAULT_INFO(
    3294:	4b05      	ldr	r3, [pc, #20]	; (32ac <debug_monitor+0x20>)
    3296:	9302      	str	r3, [sp, #8]
    3298:	9001      	str	r0, [sp, #4]
    329a:	9000      	str	r0, [sp, #0]
    329c:	4603      	mov	r3, r0
    329e:	2201      	movs	r2, #1
    32a0:	4903      	ldr	r1, [pc, #12]	; (32b0 <debug_monitor+0x24>)
    32a2:	f007 fc0e 	bl	aac2 <z_log_msg2_runtime_create>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    32a6:	b005      	add	sp, #20
    32a8:	f85d fb04 	ldr.w	pc, [sp], #4
    32ac:	0000cd68 	.word	0x0000cd68
    32b0:	0000c088 	.word	0x0000c088

000032b4 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    32b4:	b500      	push	{lr}
    32b6:	b087      	sub	sp, #28
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    32b8:	290f      	cmp	r1, #15
    32ba:	dc10      	bgt.n	32de <reserved_exception+0x2a>
    32bc:	4b09      	ldr	r3, [pc, #36]	; (32e4 <reserved_exception+0x30>)
    32be:	3910      	subs	r1, #16
    32c0:	9104      	str	r1, [sp, #16]
    32c2:	9303      	str	r3, [sp, #12]
    32c4:	4b08      	ldr	r3, [pc, #32]	; (32e8 <reserved_exception+0x34>)
    32c6:	9302      	str	r3, [sp, #8]
    32c8:	2000      	movs	r0, #0
    32ca:	9001      	str	r0, [sp, #4]
    32cc:	9000      	str	r0, [sp, #0]
    32ce:	4603      	mov	r3, r0
    32d0:	2201      	movs	r2, #1
    32d2:	4906      	ldr	r1, [pc, #24]	; (32ec <reserved_exception+0x38>)
    32d4:	f007 fbf5 	bl	aac2 <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    32d8:	b007      	add	sp, #28
    32da:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
    32de:	4b04      	ldr	r3, [pc, #16]	; (32f0 <reserved_exception+0x3c>)
    32e0:	e7ed      	b.n	32be <reserved_exception+0xa>
    32e2:	bf00      	nop
    32e4:	0000cda8 	.word	0x0000cda8
    32e8:	0000cdc0 	.word	0x0000cdc0
    32ec:	0000c088 	.word	0x0000c088
    32f0:	0000cd8c 	.word	0x0000cd8c

000032f4 <mem_manage_fault>:
{
    32f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    32f6:	b085      	sub	sp, #20
    32f8:	4605      	mov	r5, r0
    32fa:	460c      	mov	r4, r1
    32fc:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    32fe:	4b5f      	ldr	r3, [pc, #380]	; (347c <mem_manage_fault+0x188>)
    3300:	9302      	str	r3, [sp, #8]
    3302:	2000      	movs	r0, #0
    3304:	9001      	str	r0, [sp, #4]
    3306:	9000      	str	r0, [sp, #0]
    3308:	4603      	mov	r3, r0
    330a:	2201      	movs	r2, #1
    330c:	495c      	ldr	r1, [pc, #368]	; (3480 <mem_manage_fault+0x18c>)
    330e:	f007 fbd8 	bl	aac2 <z_log_msg2_runtime_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3312:	4b5c      	ldr	r3, [pc, #368]	; (3484 <mem_manage_fault+0x190>)
    3314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3316:	f013 0f10 	tst.w	r3, #16
    331a:	d13b      	bne.n	3394 <mem_manage_fault+0xa0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    331c:	4b59      	ldr	r3, [pc, #356]	; (3484 <mem_manage_fault+0x190>)
    331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3320:	f013 0f08 	tst.w	r3, #8
    3324:	d141      	bne.n	33aa <mem_manage_fault+0xb6>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3326:	4b57      	ldr	r3, [pc, #348]	; (3484 <mem_manage_fault+0x190>)
    3328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    332a:	f013 0f02 	tst.w	r3, #2
    332e:	d147      	bne.n	33c0 <mem_manage_fault+0xcc>
	uint32_t mmfar = -EINVAL;
    3330:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3334:	4b53      	ldr	r3, [pc, #332]	; (3484 <mem_manage_fault+0x190>)
    3336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3338:	f013 0f01 	tst.w	r3, #1
    333c:	d166      	bne.n	340c <mem_manage_fault+0x118>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    333e:	4b51      	ldr	r3, [pc, #324]	; (3484 <mem_manage_fault+0x190>)
    3340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3342:	f013 0f20 	tst.w	r3, #32
    3346:	d16c      	bne.n	3422 <mem_manage_fault+0x12e>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3348:	4b4e      	ldr	r3, [pc, #312]	; (3484 <mem_manage_fault+0x190>)
    334a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    334c:	f013 0f10 	tst.w	r3, #16
    3350:	d104      	bne.n	335c <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3352:	4b4c      	ldr	r3, [pc, #304]	; (3484 <mem_manage_fault+0x190>)
    3354:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3356:	f014 0402 	ands.w	r4, r4, #2
    335a:	d004      	beq.n	3366 <mem_manage_fault+0x72>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    335c:	4b49      	ldr	r3, [pc, #292]	; (3484 <mem_manage_fault+0x190>)
    335e:	685c      	ldr	r4, [r3, #4]
    3360:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    3364:	d168      	bne.n	3438 <mem_manage_fault+0x144>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3366:	4b47      	ldr	r3, [pc, #284]	; (3484 <mem_manage_fault+0x190>)
    3368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    336a:	f013 0f20 	tst.w	r3, #32
    336e:	d004      	beq.n	337a <mem_manage_fault+0x86>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3370:	4a44      	ldr	r2, [pc, #272]	; (3484 <mem_manage_fault+0x190>)
    3372:	6a53      	ldr	r3, [r2, #36]	; 0x24
    3374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    3378:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    337a:	4a42      	ldr	r2, [pc, #264]	; (3484 <mem_manage_fault+0x190>)
    337c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    337e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3382:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3384:	2101      	movs	r1, #1
    3386:	4628      	mov	r0, r5
    3388:	f007 fb99 	bl	aabe <memory_fault_recoverable>
    338c:	7030      	strb	r0, [r6, #0]
}
    338e:	4620      	mov	r0, r4
    3390:	b005      	add	sp, #20
    3392:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    3394:	4b3c      	ldr	r3, [pc, #240]	; (3488 <mem_manage_fault+0x194>)
    3396:	9302      	str	r3, [sp, #8]
    3398:	2000      	movs	r0, #0
    339a:	9001      	str	r0, [sp, #4]
    339c:	9000      	str	r0, [sp, #0]
    339e:	4603      	mov	r3, r0
    33a0:	2201      	movs	r2, #1
    33a2:	4937      	ldr	r1, [pc, #220]	; (3480 <mem_manage_fault+0x18c>)
    33a4:	f007 fb8d 	bl	aac2 <z_log_msg2_runtime_create>
    33a8:	e7b8      	b.n	331c <mem_manage_fault+0x28>
		PR_FAULT_INFO("  Unstacking error");
    33aa:	4b38      	ldr	r3, [pc, #224]	; (348c <mem_manage_fault+0x198>)
    33ac:	9302      	str	r3, [sp, #8]
    33ae:	2000      	movs	r0, #0
    33b0:	9001      	str	r0, [sp, #4]
    33b2:	9000      	str	r0, [sp, #0]
    33b4:	4603      	mov	r3, r0
    33b6:	2201      	movs	r2, #1
    33b8:	4931      	ldr	r1, [pc, #196]	; (3480 <mem_manage_fault+0x18c>)
    33ba:	f007 fb82 	bl	aac2 <z_log_msg2_runtime_create>
    33be:	e7b2      	b.n	3326 <mem_manage_fault+0x32>
		PR_FAULT_INFO("  Data Access Violation");
    33c0:	4b33      	ldr	r3, [pc, #204]	; (3490 <mem_manage_fault+0x19c>)
    33c2:	9302      	str	r3, [sp, #8]
    33c4:	2000      	movs	r0, #0
    33c6:	9001      	str	r0, [sp, #4]
    33c8:	9000      	str	r0, [sp, #0]
    33ca:	4603      	mov	r3, r0
    33cc:	2201      	movs	r2, #1
    33ce:	492c      	ldr	r1, [pc, #176]	; (3480 <mem_manage_fault+0x18c>)
    33d0:	f007 fb77 	bl	aac2 <z_log_msg2_runtime_create>
		uint32_t temp = SCB->MMFAR;
    33d4:	4b2b      	ldr	r3, [pc, #172]	; (3484 <mem_manage_fault+0x190>)
    33d6:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    33d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33da:	f013 0f80 	tst.w	r3, #128	; 0x80
    33de:	d102      	bne.n	33e6 <mem_manage_fault+0xf2>
	uint32_t mmfar = -EINVAL;
    33e0:	f06f 0715 	mvn.w	r7, #21
    33e4:	e7a6      	b.n	3334 <mem_manage_fault+0x40>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    33e6:	9703      	str	r7, [sp, #12]
    33e8:	4b2a      	ldr	r3, [pc, #168]	; (3494 <mem_manage_fault+0x1a0>)
    33ea:	9302      	str	r3, [sp, #8]
    33ec:	2000      	movs	r0, #0
    33ee:	9001      	str	r0, [sp, #4]
    33f0:	9000      	str	r0, [sp, #0]
    33f2:	4603      	mov	r3, r0
    33f4:	2201      	movs	r2, #1
    33f6:	4922      	ldr	r1, [pc, #136]	; (3480 <mem_manage_fault+0x18c>)
    33f8:	f007 fb63 	bl	aac2 <z_log_msg2_runtime_create>
			if (from_hard_fault != 0) {
    33fc:	2c00      	cmp	r4, #0
    33fe:	d099      	beq.n	3334 <mem_manage_fault+0x40>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3400:	4a20      	ldr	r2, [pc, #128]	; (3484 <mem_manage_fault+0x190>)
    3402:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3408:	6293      	str	r3, [r2, #40]	; 0x28
    340a:	e793      	b.n	3334 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Instruction Access Violation");
    340c:	4b22      	ldr	r3, [pc, #136]	; (3498 <mem_manage_fault+0x1a4>)
    340e:	9302      	str	r3, [sp, #8]
    3410:	2000      	movs	r0, #0
    3412:	9001      	str	r0, [sp, #4]
    3414:	9000      	str	r0, [sp, #0]
    3416:	4603      	mov	r3, r0
    3418:	2201      	movs	r2, #1
    341a:	4919      	ldr	r1, [pc, #100]	; (3480 <mem_manage_fault+0x18c>)
    341c:	f007 fb51 	bl	aac2 <z_log_msg2_runtime_create>
    3420:	e78d      	b.n	333e <mem_manage_fault+0x4a>
		PR_FAULT_INFO(
    3422:	4b1e      	ldr	r3, [pc, #120]	; (349c <mem_manage_fault+0x1a8>)
    3424:	9302      	str	r3, [sp, #8]
    3426:	2000      	movs	r0, #0
    3428:	9001      	str	r0, [sp, #4]
    342a:	9000      	str	r0, [sp, #0]
    342c:	4603      	mov	r3, r0
    342e:	2201      	movs	r2, #1
    3430:	4913      	ldr	r1, [pc, #76]	; (3480 <mem_manage_fault+0x18c>)
    3432:	f007 fb46 	bl	aac2 <z_log_msg2_runtime_create>
    3436:	e787      	b.n	3348 <mem_manage_fault+0x54>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3438:	4629      	mov	r1, r5
    343a:	4638      	mov	r0, r7
    343c:	f7ff fd88 	bl	2f50 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    3440:	4607      	mov	r7, r0
    3442:	b9b0      	cbnz	r0, 3472 <mem_manage_fault+0x17e>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    3444:	4b0f      	ldr	r3, [pc, #60]	; (3484 <mem_manage_fault+0x190>)
    3446:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    3448:	f014 0410 	ands.w	r4, r4, #16
    344c:	d08b      	beq.n	3366 <mem_manage_fault+0x72>
    344e:	4c14      	ldr	r4, [pc, #80]	; (34a0 <mem_manage_fault+0x1ac>)
    3450:	f240 1349 	movw	r3, #329	; 0x149
    3454:	4622      	mov	r2, r4
    3456:	4913      	ldr	r1, [pc, #76]	; (34a4 <mem_manage_fault+0x1b0>)
    3458:	4813      	ldr	r0, [pc, #76]	; (34a8 <mem_manage_fault+0x1b4>)
    345a:	f007 fa4f 	bl	a8fc <assert_print>
    345e:	4813      	ldr	r0, [pc, #76]	; (34ac <mem_manage_fault+0x1b8>)
    3460:	f007 fa4c 	bl	a8fc <assert_print>
    3464:	f240 1149 	movw	r1, #329	; 0x149
    3468:	4620      	mov	r0, r4
    346a:	f007 fa40 	bl	a8ee <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    346e:	463c      	mov	r4, r7
    3470:	e779      	b.n	3366 <mem_manage_fault+0x72>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3472:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    3476:	2402      	movs	r4, #2
    3478:	e775      	b.n	3366 <mem_manage_fault+0x72>
    347a:	bf00      	nop
    347c:	0000cdd4 	.word	0x0000cdd4
    3480:	0000c088 	.word	0x0000c088
    3484:	e000ed00 	.word	0xe000ed00
    3488:	0000cdec 	.word	0x0000cdec
    348c:	0000cbe4 	.word	0x0000cbe4
    3490:	0000ce20 	.word	0x0000ce20
    3494:	0000ce38 	.word	0x0000ce38
    3498:	0000ce50 	.word	0x0000ce50
    349c:	0000cc60 	.word	0x0000cc60
    34a0:	0000ce70 	.word	0x0000ce70
    34a4:	0000ceac 	.word	0x0000ceac
    34a8:	0000c254 	.word	0x0000c254
    34ac:	0000cef8 	.word	0x0000cef8

000034b0 <hard_fault>:
{
    34b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    34b2:	b085      	sub	sp, #20
    34b4:	4607      	mov	r7, r0
    34b6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    34b8:	4b4b      	ldr	r3, [pc, #300]	; (35e8 <hard_fault+0x138>)
    34ba:	9302      	str	r3, [sp, #8]
    34bc:	2400      	movs	r4, #0
    34be:	9401      	str	r4, [sp, #4]
    34c0:	9400      	str	r4, [sp, #0]
    34c2:	4623      	mov	r3, r4
    34c4:	2201      	movs	r2, #1
    34c6:	4949      	ldr	r1, [pc, #292]	; (35ec <hard_fault+0x13c>)
    34c8:	4620      	mov	r0, r4
    34ca:	f007 fafa 	bl	aac2 <z_log_msg2_runtime_create>
	*recoverable = false;
    34ce:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    34d0:	4b47      	ldr	r3, [pc, #284]	; (35f0 <hard_fault+0x140>)
    34d2:	6add      	ldr	r5, [r3, #44]	; 0x2c
    34d4:	f015 0502 	ands.w	r5, r5, #2
    34d8:	d12d      	bne.n	3536 <hard_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    34da:	4b45      	ldr	r3, [pc, #276]	; (35f0 <hard_fault+0x140>)
    34dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    34de:	2b00      	cmp	r3, #0
    34e0:	db36      	blt.n	3550 <hard_fault+0xa0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    34e2:	4b43      	ldr	r3, [pc, #268]	; (35f0 <hard_fault+0x140>)
    34e4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    34e6:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    34ea:	d06b      	beq.n	35c4 <hard_fault+0x114>
		PR_EXC("  Fault escalation (see below)");
    34ec:	4b41      	ldr	r3, [pc, #260]	; (35f4 <hard_fault+0x144>)
    34ee:	9302      	str	r3, [sp, #8]
    34f0:	2000      	movs	r0, #0
    34f2:	9001      	str	r0, [sp, #4]
    34f4:	9000      	str	r0, [sp, #0]
    34f6:	4603      	mov	r3, r0
    34f8:	2201      	movs	r2, #1
    34fa:	493c      	ldr	r1, [pc, #240]	; (35ec <hard_fault+0x13c>)
    34fc:	f007 fae1 	bl	aac2 <z_log_msg2_runtime_create>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    3500:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    3502:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3506:	f64d 7302 	movw	r3, #57090	; 0xdf02
    350a:	429a      	cmp	r2, r3
    350c:	d02c      	beq.n	3568 <hard_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
    350e:	4b38      	ldr	r3, [pc, #224]	; (35f0 <hard_fault+0x140>)
    3510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    3514:	2b00      	cmp	r3, #0
    3516:	d135      	bne.n	3584 <hard_fault+0xd4>
		} else if (SCB_BFSR != 0) {
    3518:	4b35      	ldr	r3, [pc, #212]	; (35f0 <hard_fault+0x140>)
    351a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    351e:	2b00      	cmp	r3, #0
    3520:	d137      	bne.n	3592 <hard_fault+0xe2>
		} else if (SCB_UFSR != 0) {
    3522:	4b33      	ldr	r3, [pc, #204]	; (35f0 <hard_fault+0x140>)
    3524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    3526:	b29b      	uxth	r3, r3
    3528:	2b00      	cmp	r3, #0
    352a:	d039      	beq.n	35a0 <hard_fault+0xf0>
			reason = usage_fault(esf);
    352c:	4638      	mov	r0, r7
    352e:	f7ff fe23 	bl	3178 <usage_fault>
    3532:	4604      	mov	r4, r0
    3534:	e009      	b.n	354a <hard_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    3536:	4b30      	ldr	r3, [pc, #192]	; (35f8 <hard_fault+0x148>)
    3538:	9302      	str	r3, [sp, #8]
    353a:	9401      	str	r4, [sp, #4]
    353c:	9400      	str	r4, [sp, #0]
    353e:	4623      	mov	r3, r4
    3540:	2201      	movs	r2, #1
    3542:	492a      	ldr	r1, [pc, #168]	; (35ec <hard_fault+0x13c>)
    3544:	4620      	mov	r0, r4
    3546:	f007 fabc 	bl	aac2 <z_log_msg2_runtime_create>
}
    354a:	4620      	mov	r0, r4
    354c:	b005      	add	sp, #20
    354e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
    3550:	4b2a      	ldr	r3, [pc, #168]	; (35fc <hard_fault+0x14c>)
    3552:	9302      	str	r3, [sp, #8]
    3554:	2000      	movs	r0, #0
    3556:	9001      	str	r0, [sp, #4]
    3558:	9000      	str	r0, [sp, #0]
    355a:	4603      	mov	r3, r0
    355c:	2201      	movs	r2, #1
    355e:	4923      	ldr	r1, [pc, #140]	; (35ec <hard_fault+0x13c>)
    3560:	f007 faaf 	bl	aac2 <z_log_msg2_runtime_create>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3564:	462c      	mov	r4, r5
    3566:	e7f0      	b.n	354a <hard_fault+0x9a>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    3568:	683b      	ldr	r3, [r7, #0]
    356a:	9303      	str	r3, [sp, #12]
    356c:	4b24      	ldr	r3, [pc, #144]	; (3600 <hard_fault+0x150>)
    356e:	9302      	str	r3, [sp, #8]
    3570:	2000      	movs	r0, #0
    3572:	9001      	str	r0, [sp, #4]
    3574:	9000      	str	r0, [sp, #0]
    3576:	4603      	mov	r3, r0
    3578:	2201      	movs	r2, #1
    357a:	491c      	ldr	r1, [pc, #112]	; (35ec <hard_fault+0x13c>)
    357c:	f007 faa1 	bl	aac2 <z_log_msg2_runtime_create>
			reason = esf->basic.r0;
    3580:	683c      	ldr	r4, [r7, #0]
    3582:	e7e2      	b.n	354a <hard_fault+0x9a>
			reason = mem_manage_fault(esf, 1, recoverable);
    3584:	4632      	mov	r2, r6
    3586:	2101      	movs	r1, #1
    3588:	4638      	mov	r0, r7
    358a:	f7ff feb3 	bl	32f4 <mem_manage_fault>
    358e:	4604      	mov	r4, r0
    3590:	e7db      	b.n	354a <hard_fault+0x9a>
			reason = bus_fault(esf, 1, recoverable);
    3592:	4632      	mov	r2, r6
    3594:	2101      	movs	r1, #1
    3596:	4638      	mov	r0, r7
    3598:	f7ff fd46 	bl	3028 <bus_fault>
    359c:	4604      	mov	r4, r0
    359e:	e7d4      	b.n	354a <hard_fault+0x9a>
			__ASSERT(0,
    35a0:	4c18      	ldr	r4, [pc, #96]	; (3604 <hard_fault+0x154>)
    35a2:	f240 23cd 	movw	r3, #717	; 0x2cd
    35a6:	4622      	mov	r2, r4
    35a8:	4917      	ldr	r1, [pc, #92]	; (3608 <hard_fault+0x158>)
    35aa:	4818      	ldr	r0, [pc, #96]	; (360c <hard_fault+0x15c>)
    35ac:	f007 f9a6 	bl	a8fc <assert_print>
    35b0:	4817      	ldr	r0, [pc, #92]	; (3610 <hard_fault+0x160>)
    35b2:	f007 f9a3 	bl	a8fc <assert_print>
    35b6:	f240 21cd 	movw	r1, #717	; 0x2cd
    35ba:	4620      	mov	r0, r4
    35bc:	f007 f997 	bl	a8ee <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    35c0:	462c      	mov	r4, r5
    35c2:	e7c2      	b.n	354a <hard_fault+0x9a>
		__ASSERT(0,
    35c4:	4d0f      	ldr	r5, [pc, #60]	; (3604 <hard_fault+0x154>)
    35c6:	f240 23d1 	movw	r3, #721	; 0x2d1
    35ca:	462a      	mov	r2, r5
    35cc:	490e      	ldr	r1, [pc, #56]	; (3608 <hard_fault+0x158>)
    35ce:	480f      	ldr	r0, [pc, #60]	; (360c <hard_fault+0x15c>)
    35d0:	f007 f994 	bl	a8fc <assert_print>
    35d4:	480f      	ldr	r0, [pc, #60]	; (3614 <hard_fault+0x164>)
    35d6:	f007 f991 	bl	a8fc <assert_print>
    35da:	f240 21d1 	movw	r1, #721	; 0x2d1
    35de:	4628      	mov	r0, r5
    35e0:	f007 f985 	bl	a8ee <assert_post_action>
	return reason;
    35e4:	e7b1      	b.n	354a <hard_fault+0x9a>
    35e6:	bf00      	nop
    35e8:	0000cf1c 	.word	0x0000cf1c
    35ec:	0000c088 	.word	0x0000c088
    35f0:	e000ed00 	.word	0xe000ed00
    35f4:	0000cf68 	.word	0x0000cf68
    35f8:	0000cf34 	.word	0x0000cf34
    35fc:	0000cf58 	.word	0x0000cf58
    3600:	0000cf88 	.word	0x0000cf88
    3604:	0000ce70 	.word	0x0000ce70
    3608:	0000c914 	.word	0x0000c914
    360c:	0000c254 	.word	0x0000c254
    3610:	0000cfa4 	.word	0x0000cfa4
    3614:	0000cfc8 	.word	0x0000cfc8

00003618 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3618:	b5f0      	push	{r4, r5, r6, r7, lr}
    361a:	b08f      	sub	sp, #60	; 0x3c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    361c:	4b35      	ldr	r3, [pc, #212]	; (36f4 <z_arm_fault+0xdc>)
    361e:	685d      	ldr	r5, [r3, #4]
    3620:	f3c5 0508 	ubfx	r5, r5, #0, #9
    3624:	2300      	movs	r3, #0
    3626:	f383 8811 	msr	BASEPRI, r3
    362a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    362e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3632:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3636:	d125      	bne.n	3684 <z_arm_fault+0x6c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3638:	f002 030c 	and.w	r3, r2, #12
    363c:	2b08      	cmp	r3, #8
    363e:	d011      	beq.n	3664 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3640:	f012 0f08 	tst.w	r2, #8
    3644:	d01b      	beq.n	367e <z_arm_fault+0x66>
			ptr_esf =  (z_arch_esf_t *)psp;
    3646:	460c      	mov	r4, r1
	*nested_exc = false;
    3648:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    364a:	b1f4      	cbz	r4, 368a <z_arm_fault+0x72>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    364c:	f10d 0237 	add.w	r2, sp, #55	; 0x37
    3650:	4629      	mov	r1, r5
    3652:	4620      	mov	r0, r4
    3654:	f007 fa44 	bl	aae0 <fault_handle>
    3658:	4605      	mov	r5, r0
	if (recoverable) {
    365a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    365e:	b32b      	cbz	r3, 36ac <z_arm_fault+0x94>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    3660:	b00f      	add	sp, #60	; 0x3c
    3662:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3664:	4b24      	ldr	r3, [pc, #144]	; (36f8 <z_arm_fault+0xe0>)
    3666:	9302      	str	r3, [sp, #8]
    3668:	2400      	movs	r4, #0
    366a:	9401      	str	r4, [sp, #4]
    366c:	9400      	str	r4, [sp, #0]
    366e:	4623      	mov	r3, r4
    3670:	2201      	movs	r2, #1
    3672:	4922      	ldr	r1, [pc, #136]	; (36fc <z_arm_fault+0xe4>)
    3674:	4620      	mov	r0, r4
    3676:	f007 fa24 	bl	aac2 <z_log_msg2_runtime_create>
	*nested_exc = false;
    367a:	4626      	mov	r6, r4
		return NULL;
    367c:	e7e5      	b.n	364a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    367e:	4604      	mov	r4, r0
			*nested_exc = true;
    3680:	2601      	movs	r6, #1
    3682:	e7e2      	b.n	364a <z_arm_fault+0x32>
	*nested_exc = false;
    3684:	2600      	movs	r6, #0
		return NULL;
    3686:	4634      	mov	r4, r6
    3688:	e7df      	b.n	364a <z_arm_fault+0x32>
	__ASSERT(esf != NULL,
    368a:	4f1d      	ldr	r7, [pc, #116]	; (3700 <z_arm_fault+0xe8>)
    368c:	f240 33fb 	movw	r3, #1019	; 0x3fb
    3690:	463a      	mov	r2, r7
    3692:	491c      	ldr	r1, [pc, #112]	; (3704 <z_arm_fault+0xec>)
    3694:	481c      	ldr	r0, [pc, #112]	; (3708 <z_arm_fault+0xf0>)
    3696:	f007 f931 	bl	a8fc <assert_print>
    369a:	481c      	ldr	r0, [pc, #112]	; (370c <z_arm_fault+0xf4>)
    369c:	f007 f92e 	bl	a8fc <assert_print>
    36a0:	f240 31fb 	movw	r1, #1019	; 0x3fb
    36a4:	4638      	mov	r0, r7
    36a6:	f007 f922 	bl	a8ee <assert_post_action>
    36aa:	e7cf      	b.n	364c <z_arm_fault+0x34>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    36ac:	f10d 0c14 	add.w	ip, sp, #20
    36b0:	6820      	ldr	r0, [r4, #0]
    36b2:	6861      	ldr	r1, [r4, #4]
    36b4:	68a2      	ldr	r2, [r4, #8]
    36b6:	68e3      	ldr	r3, [r4, #12]
    36b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    36bc:	6920      	ldr	r0, [r4, #16]
    36be:	6961      	ldr	r1, [r4, #20]
    36c0:	69a2      	ldr	r2, [r4, #24]
    36c2:	69e3      	ldr	r3, [r4, #28]
    36c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
    36c8:	b146      	cbz	r6, 36dc <z_arm_fault+0xc4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    36ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
    36ce:	b95a      	cbnz	r2, 36e8 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    36d0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    36d4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    36d8:	930c      	str	r3, [sp, #48]	; 0x30
    36da:	e005      	b.n	36e8 <z_arm_fault+0xd0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    36dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    36de:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    36e2:	f023 0301 	bic.w	r3, r3, #1
    36e6:	930c      	str	r3, [sp, #48]	; 0x30
	z_arm_fatal_error(reason, &esf_copy);
    36e8:	a905      	add	r1, sp, #20
    36ea:	4628      	mov	r0, r5
    36ec:	f007 f9c9 	bl	aa82 <z_arm_fatal_error>
    36f0:	e7b6      	b.n	3660 <z_arm_fault+0x48>
    36f2:	bf00      	nop
    36f4:	e000ed00 	.word	0xe000ed00
    36f8:	0000cff8 	.word	0x0000cff8
    36fc:	0000c088 	.word	0x0000c088
    3700:	0000ce70 	.word	0x0000ce70
    3704:	0000d024 	.word	0x0000d024
    3708:	0000c254 	.word	0x0000c254
    370c:	0000d038 	.word	0x0000d038

00003710 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3710:	4a02      	ldr	r2, [pc, #8]	; (371c <z_arm_fault_init+0xc>)
    3712:	6953      	ldr	r3, [r2, #20]
    3714:	f043 0310 	orr.w	r3, r3, #16
    3718:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    371a:	4770      	bx	lr
    371c:	e000ed00 	.word	0xe000ed00

00003720 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3720:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3724:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3728:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    372a:	4672      	mov	r2, lr
	bl z_arm_fault
    372c:	f7ff ff74 	bl	3618 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3730:	bd01      	pop	{r0, pc}
    3732:	bf00      	nop

00003734 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3734:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3736:	e006      	b.n	3746 <z_arm_interrupt_init+0x12>
    3738:	f002 010f 	and.w	r1, r2, #15
    373c:	4b09      	ldr	r3, [pc, #36]	; (3764 <z_arm_interrupt_init+0x30>)
    373e:	440b      	add	r3, r1
    3740:	2120      	movs	r1, #32
    3742:	7619      	strb	r1, [r3, #24]
    3744:	3201      	adds	r2, #1
    3746:	2a2f      	cmp	r2, #47	; 0x2f
    3748:	dc0a      	bgt.n	3760 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    374a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    374c:	2b00      	cmp	r3, #0
    374e:	dbf3      	blt.n	3738 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3750:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3754:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3758:	2120      	movs	r1, #32
    375a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    375e:	e7f1      	b.n	3744 <z_arm_interrupt_init+0x10>
	}
}
    3760:	4770      	bx	lr
    3762:	bf00      	nop
    3764:	e000ecfc 	.word	0xe000ecfc

00003768 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3768:	2000      	movs	r0, #0
    msr CONTROL, r0
    376a:	f380 8814 	msr	CONTROL, r0
    isb
    376e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3772:	f008 fb37 	bl	bde4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3776:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3778:	490d      	ldr	r1, [pc, #52]	; (37b0 <__start+0x48>)
    str r0, [r1]
    377a:	6008      	str	r0, [r1, #0]
    dsb
    377c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3780:	480c      	ldr	r0, [pc, #48]	; (37b4 <__start+0x4c>)
    msr msp, r0
    3782:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3786:	f000 f82d 	bl	37e4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    378a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    378c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3790:	4809      	ldr	r0, [pc, #36]	; (37b8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3792:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    3796:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3798:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    379c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    37a0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    37a2:	4308      	orrs	r0, r1
    msr CONTROL, r0
    37a4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    37a8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    37ac:	f7ff fb3a 	bl	2e24 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    37b0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    37b4:	200060a0 	.word	0x200060a0
    ldr r0, =z_interrupt_stacks
    37b8:	20006220 	.word	0x20006220

000037bc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    37bc:	4b08      	ldr	r3, [pc, #32]	; (37e0 <z_arm_clear_arm_mpu_config+0x24>)
    37be:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    37c2:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    37c6:	2300      	movs	r3, #0
    37c8:	e006      	b.n	37d8 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    37ca:	4a05      	ldr	r2, [pc, #20]	; (37e0 <z_arm_clear_arm_mpu_config+0x24>)
    37cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    37d0:	2100      	movs	r1, #0
    37d2:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    37d6:	3301      	adds	r3, #1
    37d8:	4283      	cmp	r3, r0
    37da:	dbf6      	blt.n	37ca <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    37dc:	4770      	bx	lr
    37de:	bf00      	nop
    37e0:	e000ed00 	.word	0xe000ed00

000037e4 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    37e4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    37e6:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    37e8:	2400      	movs	r4, #0
    37ea:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    37ee:	f7ff ffe5 	bl	37bc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    37f2:	4623      	mov	r3, r4
    37f4:	e008      	b.n	3808 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    37f6:	f103 0120 	add.w	r1, r3, #32
    37fa:	4a0e      	ldr	r2, [pc, #56]	; (3834 <z_arm_init_arch_hw_at_boot+0x50>)
    37fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3800:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3804:	3301      	adds	r3, #1
    3806:	b2db      	uxtb	r3, r3
    3808:	2b07      	cmp	r3, #7
    380a:	d9f4      	bls.n	37f6 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    380c:	2300      	movs	r3, #0
    380e:	e008      	b.n	3822 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3810:	f103 0160 	add.w	r1, r3, #96	; 0x60
    3814:	4a07      	ldr	r2, [pc, #28]	; (3834 <z_arm_init_arch_hw_at_boot+0x50>)
    3816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    381a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    381e:	3301      	adds	r3, #1
    3820:	b2db      	uxtb	r3, r3
    3822:	2b07      	cmp	r3, #7
    3824:	d9f4      	bls.n	3810 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    3826:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3828:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    382c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3830:	bd10      	pop	{r4, pc}
    3832:	bf00      	nop
    3834:	e000e100 	.word	0xe000e100

00003838 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    3838:	b508      	push	{r3, lr}
	if (_current == thread) {
    383a:	4b0a      	ldr	r3, [pc, #40]	; (3864 <z_impl_k_thread_abort+0x2c>)
    383c:	689b      	ldr	r3, [r3, #8]
    383e:	4283      	cmp	r3, r0
    3840:	d002      	beq.n	3848 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    3842:	f005 fe5d 	bl	9500 <z_thread_abort>
}
    3846:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3848:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    384c:	2b00      	cmp	r3, #0
    384e:	d0f8      	beq.n	3842 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3850:	4b05      	ldr	r3, [pc, #20]	; (3868 <z_impl_k_thread_abort+0x30>)
    3852:	685a      	ldr	r2, [r3, #4]
    3854:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3858:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    385a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    385c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3860:	625a      	str	r2, [r3, #36]	; 0x24
    3862:	e7ee      	b.n	3842 <z_impl_k_thread_abort+0xa>
    3864:	20005214 	.word	0x20005214
    3868:	e000ed00 	.word	0xe000ed00

0000386c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    386c:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    386e:	4b03      	ldr	r3, [pc, #12]	; (387c <z_arm_configure_static_mpu_regions+0x10>)
    3870:	4a03      	ldr	r2, [pc, #12]	; (3880 <z_arm_configure_static_mpu_regions+0x14>)
    3872:	2101      	movs	r1, #1
    3874:	4803      	ldr	r0, [pc, #12]	; (3884 <z_arm_configure_static_mpu_regions+0x18>)
    3876:	f000 f8bb 	bl	39f0 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    387a:	bd08      	pop	{r3, pc}
    387c:	20040000 	.word	0x20040000
    3880:	20000000 	.word	0x20000000
    3884:	0000d07c 	.word	0x0000d07c

00003888 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    3888:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    388a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    388e:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3890:	4804      	ldr	r0, [pc, #16]	; (38a4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3892:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    3894:	2320      	movs	r3, #32
    3896:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3898:	4b03      	ldr	r3, [pc, #12]	; (38a8 <z_arm_configure_dynamic_mpu_regions+0x20>)
    389a:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    389c:	2101      	movs	r1, #1
    389e:	f000 f8c9 	bl	3a34 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    38a2:	bd08      	pop	{r3, pc}
    38a4:	20004cac 	.word	0x20004cac
    38a8:	150b0000 	.word	0x150b0000

000038ac <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    38ac:	4a08      	ldr	r2, [pc, #32]	; (38d0 <region_init+0x24>)
    38ae:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    38b2:	680b      	ldr	r3, [r1, #0]
    38b4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    38b8:	4303      	orrs	r3, r0
    38ba:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    38be:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    38c2:	688b      	ldr	r3, [r1, #8]
    38c4:	f043 0301 	orr.w	r3, r3, #1
    38c8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    38cc:	4770      	bx	lr
    38ce:	bf00      	nop
    38d0:	e000ed00 	.word	0xe000ed00

000038d4 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    38d4:	b510      	push	{r4, lr}
    38d6:	b084      	sub	sp, #16
    38d8:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    38da:	2807      	cmp	r0, #7
    38dc:	d804      	bhi.n	38e8 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    38de:	f7ff ffe5 	bl	38ac <region_init>

	return index;
    38e2:	4620      	mov	r0, r4
}
    38e4:	b004      	add	sp, #16
    38e6:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    38e8:	9003      	str	r0, [sp, #12]
    38ea:	4b06      	ldr	r3, [pc, #24]	; (3904 <region_allocate_and_init+0x30>)
    38ec:	9302      	str	r3, [sp, #8]
    38ee:	2000      	movs	r0, #0
    38f0:	9001      	str	r0, [sp, #4]
    38f2:	9000      	str	r0, [sp, #0]
    38f4:	4603      	mov	r3, r0
    38f6:	2201      	movs	r2, #1
    38f8:	4903      	ldr	r1, [pc, #12]	; (3908 <region_allocate_and_init+0x34>)
    38fa:	f007 f927 	bl	ab4c <z_log_msg2_runtime_create>
		return -EINVAL;
    38fe:	f06f 0015 	mvn.w	r0, #21
    3902:	e7ef      	b.n	38e4 <region_allocate_and_init+0x10>
    3904:	0000d088 	.word	0x0000d088
    3908:	0000c080 	.word	0x0000c080

0000390c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    390c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3910:	b085      	sub	sp, #20
    3912:	4680      	mov	r8, r0
    3914:	460f      	mov	r7, r1
    3916:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
    3918:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    391a:	2500      	movs	r5, #0
    391c:	e009      	b.n	3932 <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    391e:	4621      	mov	r1, r4
    3920:	b2f0      	uxtb	r0, r6
    3922:	f007 f922 	bl	ab6a <mpu_configure_region>
    3926:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    3928:	f110 0f16 	cmn.w	r0, #22
    392c:	d01e      	beq.n	396c <mpu_configure_regions+0x60>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    392e:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    3930:	3501      	adds	r5, #1
    3932:	42bd      	cmp	r5, r7
    3934:	da1a      	bge.n	396c <mpu_configure_regions+0x60>
		if (regions[i].size == 0U) {
    3936:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    393a:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    393e:	6862      	ldr	r2, [r4, #4]
    3940:	2a00      	cmp	r2, #0
    3942:	d0f5      	beq.n	3930 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
    3944:	f1b9 0f00 	cmp.w	r9, #0
    3948:	d0e9      	beq.n	391e <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
    394a:	4620      	mov	r0, r4
    394c:	f007 f8ed 	bl	ab2a <mpu_partition_is_valid>
		if (do_sanity_check &&
    3950:	2800      	cmp	r0, #0
    3952:	d1e4      	bne.n	391e <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
    3954:	9503      	str	r5, [sp, #12]
    3956:	4b07      	ldr	r3, [pc, #28]	; (3974 <mpu_configure_regions+0x68>)
    3958:	9302      	str	r3, [sp, #8]
    395a:	9001      	str	r0, [sp, #4]
    395c:	9000      	str	r0, [sp, #0]
    395e:	4603      	mov	r3, r0
    3960:	2201      	movs	r2, #1
    3962:	4905      	ldr	r1, [pc, #20]	; (3978 <mpu_configure_regions+0x6c>)
    3964:	f007 f8f2 	bl	ab4c <z_log_msg2_runtime_create>
			return -EINVAL;
    3968:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    396c:	4630      	mov	r0, r6
    396e:	b005      	add	sp, #20
    3970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3974:	0000d0b0 	.word	0x0000d0b0
    3978:	0000c080 	.word	0x0000c080

0000397c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    397c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    397e:	4c03      	ldr	r4, [pc, #12]	; (398c <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3980:	2301      	movs	r3, #1
    3982:	7822      	ldrb	r2, [r4, #0]
    3984:	f7ff ffc2 	bl	390c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3988:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    398a:	bd10      	pop	{r4, pc}
    398c:	20005451 	.word	0x20005451

00003990 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3990:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3992:	2300      	movs	r3, #0
    3994:	4a09      	ldr	r2, [pc, #36]	; (39bc <mpu_configure_dynamic_mpu_regions+0x2c>)
    3996:	7812      	ldrb	r2, [r2, #0]
    3998:	f7ff ffb8 	bl	390c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    399c:	f110 0f16 	cmn.w	r0, #22
    39a0:	d00a      	beq.n	39b8 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    39a2:	4603      	mov	r3, r0
    39a4:	e006      	b.n	39b4 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    39a6:	4a06      	ldr	r2, [pc, #24]	; (39c0 <mpu_configure_dynamic_mpu_regions+0x30>)
    39a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    39ac:	2100      	movs	r1, #0
    39ae:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    39b2:	3301      	adds	r3, #1
    39b4:	2b07      	cmp	r3, #7
    39b6:	ddf6      	ble.n	39a6 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    39b8:	bd08      	pop	{r3, pc}
    39ba:	bf00      	nop
    39bc:	20005451 	.word	0x20005451
    39c0:	e000ed00 	.word	0xe000ed00

000039c4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    39c4:	4b04      	ldr	r3, [pc, #16]	; (39d8 <arm_core_mpu_enable+0x14>)
    39c6:	2205      	movs	r2, #5
    39c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    39cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    39d0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    39d4:	4770      	bx	lr
    39d6:	bf00      	nop
    39d8:	e000ed00 	.word	0xe000ed00

000039dc <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    39dc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    39e0:	4b02      	ldr	r3, [pc, #8]	; (39ec <arm_core_mpu_disable+0x10>)
    39e2:	2200      	movs	r2, #0
    39e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    39e8:	4770      	bx	lr
    39ea:	bf00      	nop
    39ec:	e000ed00 	.word	0xe000ed00

000039f0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    39f0:	b538      	push	{r3, r4, r5, lr}
    39f2:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    39f4:	f7ff ffc2 	bl	397c <mpu_configure_static_mpu_regions>
    39f8:	f110 0f16 	cmn.w	r0, #22
    39fc:	d000      	beq.n	3a00 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    39fe:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3a00:	4d08      	ldr	r5, [pc, #32]	; (3a24 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    3a02:	f240 1311 	movw	r3, #273	; 0x111
    3a06:	462a      	mov	r2, r5
    3a08:	4907      	ldr	r1, [pc, #28]	; (3a28 <arm_core_mpu_configure_static_mpu_regions+0x38>)
    3a0a:	4808      	ldr	r0, [pc, #32]	; (3a2c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    3a0c:	f006 ff76 	bl	a8fc <assert_print>
    3a10:	4621      	mov	r1, r4
    3a12:	4807      	ldr	r0, [pc, #28]	; (3a30 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    3a14:	f006 ff72 	bl	a8fc <assert_print>
    3a18:	f240 1111 	movw	r1, #273	; 0x111
    3a1c:	4628      	mov	r0, r5
    3a1e:	f006 ff66 	bl	a8ee <assert_post_action>
}
    3a22:	e7ec      	b.n	39fe <arm_core_mpu_configure_static_mpu_regions+0xe>
    3a24:	0000d0d4 	.word	0x0000d0d4
    3a28:	0000c914 	.word	0x0000c914
    3a2c:	0000c254 	.word	0x0000c254
    3a30:	0000d10c 	.word	0x0000d10c

00003a34 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3a34:	b538      	push	{r3, r4, r5, lr}
    3a36:	460c      	mov	r4, r1
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    3a38:	f7ff ffaa 	bl	3990 <mpu_configure_dynamic_mpu_regions>
    3a3c:	f110 0f16 	cmn.w	r0, #22
    3a40:	d000      	beq.n	3a44 <arm_core_mpu_configure_dynamic_mpu_regions+0x10>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3a42:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    3a44:	4d08      	ldr	r5, [pc, #32]	; (3a68 <arm_core_mpu_configure_dynamic_mpu_regions+0x34>)
    3a46:	f44f 7398 	mov.w	r3, #304	; 0x130
    3a4a:	462a      	mov	r2, r5
    3a4c:	4907      	ldr	r1, [pc, #28]	; (3a6c <arm_core_mpu_configure_dynamic_mpu_regions+0x38>)
    3a4e:	4808      	ldr	r0, [pc, #32]	; (3a70 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>)
    3a50:	f006 ff54 	bl	a8fc <assert_print>
    3a54:	4621      	mov	r1, r4
    3a56:	4807      	ldr	r0, [pc, #28]	; (3a74 <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
    3a58:	f006 ff50 	bl	a8fc <assert_print>
    3a5c:	f44f 7198 	mov.w	r1, #304	; 0x130
    3a60:	4628      	mov	r0, r5
    3a62:	f006 ff44 	bl	a8ee <assert_post_action>
}
    3a66:	e7ec      	b.n	3a42 <arm_core_mpu_configure_dynamic_mpu_regions+0xe>
    3a68:	0000d0d4 	.word	0x0000d0d4
    3a6c:	0000c914 	.word	0x0000c914
    3a70:	0000c254 	.word	0x0000c254
    3a74:	0000d138 	.word	0x0000d138

00003a78 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    3a78:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3a7a:	4b24      	ldr	r3, [pc, #144]	; (3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>)
    3a7c:	681d      	ldr	r5, [r3, #0]
    3a7e:	2d08      	cmp	r5, #8
    3a80:	d803      	bhi.n	3a8a <z_arm_mpu_init+0x12>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3a82:	f7ff ffab 	bl	39dc <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3a86:	2400      	movs	r4, #0
    3a88:	e01e      	b.n	3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>
		__ASSERT(0,
    3a8a:	4c21      	ldr	r4, [pc, #132]	; (3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>)
    3a8c:	f44f 73a4 	mov.w	r3, #328	; 0x148
    3a90:	4622      	mov	r2, r4
    3a92:	4920      	ldr	r1, [pc, #128]	; (3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>)
    3a94:	4820      	ldr	r0, [pc, #128]	; (3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>)
    3a96:	f006 ff31 	bl	a8fc <assert_print>
    3a9a:	2208      	movs	r2, #8
    3a9c:	4629      	mov	r1, r5
    3a9e:	481f      	ldr	r0, [pc, #124]	; (3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>)
    3aa0:	f006 ff2c 	bl	a8fc <assert_print>
    3aa4:	f44f 71a4 	mov.w	r1, #328	; 0x148
    3aa8:	4620      	mov	r0, r4
    3aaa:	f006 ff20 	bl	a8ee <assert_post_action>
		return -1;
    3aae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3ab2:	e017      	b.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    3ab4:	4b15      	ldr	r3, [pc, #84]	; (3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>)
    3ab6:	6859      	ldr	r1, [r3, #4]
    3ab8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    3abc:	0093      	lsls	r3, r2, #2
    3abe:	4419      	add	r1, r3
    3ac0:	4620      	mov	r0, r4
    3ac2:	f7ff fef3 	bl	38ac <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3ac6:	3401      	adds	r4, #1
    3ac8:	42a5      	cmp	r5, r4
    3aca:	d8f3      	bhi.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3acc:	4b14      	ldr	r3, [pc, #80]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    3ace:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    3ad0:	f7ff ff78 	bl	39c4 <arm_core_mpu_enable>

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    3ad4:	4b13      	ldr	r3, [pc, #76]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    3ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    3ada:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3ade:	2b08      	cmp	r3, #8
    3ae0:	d101      	bne.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3ae2:	2000      	movs	r0, #0
}
    3ae4:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
    3ae6:	4c0a      	ldr	r4, [pc, #40]	; (3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>)
    3ae8:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    3aec:	4622      	mov	r2, r4
    3aee:	490e      	ldr	r1, [pc, #56]	; (3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>)
    3af0:	4809      	ldr	r0, [pc, #36]	; (3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>)
    3af2:	f006 ff03 	bl	a8fc <assert_print>
    3af6:	480d      	ldr	r0, [pc, #52]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
    3af8:	f006 ff00 	bl	a8fc <assert_print>
    3afc:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    3b00:	4620      	mov	r0, r4
    3b02:	f006 fef4 	bl	a8ee <assert_post_action>
	return 0;
    3b06:	2000      	movs	r0, #0
    3b08:	e7ec      	b.n	3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
    3b0a:	bf00      	nop
    3b0c:	0000d374 	.word	0x0000d374
    3b10:	0000d0d4 	.word	0x0000d0d4
    3b14:	0000c914 	.word	0x0000c914
    3b18:	0000c254 	.word	0x0000c254
    3b1c:	0000d168 	.word	0x0000d168
    3b20:	20005451 	.word	0x20005451
    3b24:	e000ed00 	.word	0xe000ed00
    3b28:	0000d19c 	.word	0x0000d19c
    3b2c:	0000d1ec 	.word	0x0000d1ec

00003b30 <malloc_prepare>:

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    3b30:	4b0d      	ldr	r3, [pc, #52]	; (3b68 <malloc_prepare+0x38>)
    3b32:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    3b36:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    3b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    3b3e:	d301      	bcc.n	3b44 <malloc_prepare+0x14>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
    3b40:	2000      	movs	r0, #0
    3b42:	4770      	bx	lr
{
    3b44:	b510      	push	{r4, lr}
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
    3b46:	4c09      	ldr	r4, [pc, #36]	; (3b6c <malloc_prepare+0x3c>)
    3b48:	2381      	movs	r3, #129	; 0x81
    3b4a:	4622      	mov	r2, r4
    3b4c:	4908      	ldr	r1, [pc, #32]	; (3b70 <malloc_prepare+0x40>)
    3b4e:	4809      	ldr	r0, [pc, #36]	; (3b74 <malloc_prepare+0x44>)
    3b50:	f006 fed4 	bl	a8fc <assert_print>
    3b54:	4808      	ldr	r0, [pc, #32]	; (3b78 <malloc_prepare+0x48>)
    3b56:	f006 fed1 	bl	a8fc <assert_print>
    3b5a:	2181      	movs	r1, #129	; 0x81
    3b5c:	4620      	mov	r0, r4
    3b5e:	f006 fec6 	bl	a8ee <assert_post_action>
}
    3b62:	2000      	movs	r0, #0
    3b64:	bd10      	pop	{r4, pc}
    3b66:	bf00      	nop
    3b68:	20006b40 	.word	0x20006b40
    3b6c:	0000d210 	.word	0x0000d210
    3b70:	0000d240 	.word	0x0000d240
    3b74:	0000c254 	.word	0x0000c254
    3b78:	0000d288 	.word	0x0000d288

00003b7c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3b7c:	4b01      	ldr	r3, [pc, #4]	; (3b84 <__stdout_hook_install+0x8>)
    3b7e:	6018      	str	r0, [r3, #0]
}
    3b80:	4770      	bx	lr
    3b82:	bf00      	nop
    3b84:	2000402c 	.word	0x2000402c

00003b88 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    3b88:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    3b8a:	4b08      	ldr	r3, [pc, #32]	; (3bac <_sbrk+0x24>)
    3b8c:	6819      	ldr	r1, [r3, #0]
    3b8e:	4b08      	ldr	r3, [pc, #32]	; (3bb0 <_sbrk+0x28>)
    3b90:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    3b92:	440a      	add	r2, r1
    3b94:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    3b98:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    3b9c:	429a      	cmp	r2, r3
    3b9e:	d202      	bcs.n	3ba6 <_sbrk+0x1e>
		heap_sz += count;
    3ba0:	4b02      	ldr	r3, [pc, #8]	; (3bac <_sbrk+0x24>)
    3ba2:	601a      	str	r2, [r3, #0]
		ret = ptr;
    3ba4:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    3ba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    3baa:	4770      	bx	lr
    3bac:	20004cb8 	.word	0x20004cb8
    3bb0:	20006b40 	.word	0x20006b40

00003bb4 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
    3bb4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    3bb6:	4604      	mov	r4, r0
    3bb8:	b138      	cbz	r0, 3bca <__retarget_lock_acquire_recursive+0x16>
	return z_impl_k_mutex_lock(mutex, timeout);
    3bba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3bc2:	4620      	mov	r0, r4
    3bc4:	f003 ff76 	bl	7ab4 <z_impl_k_mutex_lock>
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
    3bc8:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    3bca:	4d07      	ldr	r5, [pc, #28]	; (3be8 <__retarget_lock_acquire_recursive+0x34>)
    3bcc:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    3bd0:	462a      	mov	r2, r5
    3bd2:	4906      	ldr	r1, [pc, #24]	; (3bec <__retarget_lock_acquire_recursive+0x38>)
    3bd4:	4806      	ldr	r0, [pc, #24]	; (3bf0 <__retarget_lock_acquire_recursive+0x3c>)
    3bd6:	f006 fe91 	bl	a8fc <assert_print>
    3bda:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    3bde:	4628      	mov	r0, r5
    3be0:	f006 fe85 	bl	a8ee <assert_post_action>
    3be4:	e7e9      	b.n	3bba <__retarget_lock_acquire_recursive+0x6>
    3be6:	bf00      	nop
    3be8:	0000d210 	.word	0x0000d210
    3bec:	0000d310 	.word	0x0000d310
    3bf0:	0000c254 	.word	0x0000c254

00003bf4 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
    3bf4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
    3bf6:	4604      	mov	r4, r0
    3bf8:	b118      	cbz	r0, 3c02 <__retarget_lock_release_recursive+0xe>
	return z_impl_k_mutex_unlock(mutex);
    3bfa:	4620      	mov	r0, r4
    3bfc:	f004 f87a 	bl	7cf4 <z_impl_k_mutex_unlock>
	k_mutex_unlock((struct k_mutex *)lock);
}
    3c00:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
    3c02:	4d07      	ldr	r5, [pc, #28]	; (3c20 <__retarget_lock_release_recursive+0x2c>)
    3c04:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    3c08:	462a      	mov	r2, r5
    3c0a:	4906      	ldr	r1, [pc, #24]	; (3c24 <__retarget_lock_release_recursive+0x30>)
    3c0c:	4806      	ldr	r0, [pc, #24]	; (3c28 <__retarget_lock_release_recursive+0x34>)
    3c0e:	f006 fe75 	bl	a8fc <assert_print>
    3c12:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    3c16:	4628      	mov	r0, r5
    3c18:	f006 fe69 	bl	a8ee <assert_post_action>
    3c1c:	e7ed      	b.n	3bfa <__retarget_lock_release_recursive+0x6>
    3c1e:	bf00      	nop
    3c20:	0000d210 	.word	0x0000d210
    3c24:	0000d310 	.word	0x0000d310
    3c28:	0000c254 	.word	0x0000c254

00003c2c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    3c2c:	b510      	push	{r4, lr}
	__asm__ volatile(
    3c2e:	f04f 0320 	mov.w	r3, #32
    3c32:	f3ef 8411 	mrs	r4, BASEPRI
    3c36:	f383 8812 	msr	BASEPRI_MAX, r3
    3c3a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3c3e:	2301      	movs	r3, #1
    3c40:	4a0c      	ldr	r2, [pc, #48]	; (3c74 <nordicsemi_nrf52_init+0x48>)
    3c42:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3c46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3c4a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    3c4e:	f006 ffae 	bl	abae <nrf52_errata_197>
    3c52:	b120      	cbz	r0, 3c5e <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    3c54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3c58:	2201      	movs	r2, #1
    3c5a:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    3c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3c62:	2201      	movs	r2, #1
    3c64:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    3c68:	f384 8811 	msr	BASEPRI, r4
    3c6c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3c70:	2000      	movs	r0, #0
    3c72:	bd10      	pop	{r4, pc}
    3c74:	4001e000 	.word	0x4001e000

00003c78 <sys_arch_reboot>:
    *p_gpregret = val;
    3c78:	b2c0      	uxtb	r0, r0
    3c7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3c7e:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3c82:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3c86:	4905      	ldr	r1, [pc, #20]	; (3c9c <sys_arch_reboot+0x24>)
    3c88:	68ca      	ldr	r2, [r1, #12]
    3c8a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3c8e:	4b04      	ldr	r3, [pc, #16]	; (3ca0 <sys_arch_reboot+0x28>)
    3c90:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3c92:	60cb      	str	r3, [r1, #12]
    3c94:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3c98:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3c9a:	e7fd      	b.n	3c98 <sys_arch_reboot+0x20>
    3c9c:	e000ed00 	.word	0xe000ed00
    3ca0:	05fa0004 	.word	0x05fa0004

00003ca4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3ca4:	b130      	cbz	r0, 3cb4 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    3ca6:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3ca8:	0180      	lsls	r0, r0, #6
    3caa:	4b03      	ldr	r3, [pc, #12]	; (3cb8 <arch_busy_wait+0x14>)
    3cac:	f043 0301 	orr.w	r3, r3, #1
    3cb0:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    3cb2:	bd08      	pop	{r3, pc}
    3cb4:	4770      	bx	lr
    3cb6:	bf00      	nop
    3cb8:	0000c140 	.word	0x0000c140

00003cbc <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    3cbc:	4800      	ldr	r0, [pc, #0]	; (3cc0 <get_hf_flags+0x4>)
    3cbe:	4770      	bx	lr
    3cc0:	20004d14 	.word	0x20004d14

00003cc4 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3cc4:	4b01      	ldr	r3, [pc, #4]	; (3ccc <get_subsys+0x8>)
    3cc6:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
    3cc8:	1140      	asrs	r0, r0, #5
    3cca:	4770      	bx	lr
    3ccc:	20004ccc 	.word	0x20004ccc

00003cd0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3cd0:	b530      	push	{r4, r5, lr}
    3cd2:	b083      	sub	sp, #12
    3cd4:	4605      	mov	r5, r0
    3cd6:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3cd8:	f7ff fff4 	bl	3cc4 <get_subsys>
    3cdc:	4601      	mov	r1, r0
    3cde:	2340      	movs	r3, #64	; 0x40
    3ce0:	9300      	str	r3, [sp, #0]
    3ce2:	4623      	mov	r3, r4
    3ce4:	4a05      	ldr	r2, [pc, #20]	; (3cfc <onoff_start+0x2c>)
    3ce6:	4806      	ldr	r0, [pc, #24]	; (3d00 <onoff_start+0x30>)
    3ce8:	f006 fff0 	bl	accc <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    3cec:	1e01      	subs	r1, r0, #0
    3cee:	db01      	blt.n	3cf4 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    3cf0:	b003      	add	sp, #12
    3cf2:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    3cf4:	4628      	mov	r0, r5
    3cf6:	47a0      	blx	r4
}
    3cf8:	e7fa      	b.n	3cf0 <onoff_start+0x20>
    3cfa:	bf00      	nop
    3cfc:	0000ad15 	.word	0x0000ad15
    3d00:	0000be68 	.word	0x0000be68

00003d04 <generic_hfclk_stop>:
{
    3d04:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3d06:	4b0a      	ldr	r3, [pc, #40]	; (3d30 <generic_hfclk_stop+0x2c>)
    3d08:	f3bf 8f5b 	dmb	ish
    3d0c:	e853 2f00 	ldrex	r2, [r3]
    3d10:	f022 0102 	bic.w	r1, r2, #2
    3d14:	e843 1000 	strex	r0, r1, [r3]
    3d18:	2800      	cmp	r0, #0
    3d1a:	d1f7      	bne.n	3d0c <generic_hfclk_stop+0x8>
    3d1c:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3d20:	f012 0f01 	tst.w	r2, #1
    3d24:	d000      	beq.n	3d28 <generic_hfclk_stop+0x24>
}
    3d26:	bd08      	pop	{r3, pc}
	hfclk_stop();
    3d28:	f007 f806 	bl	ad38 <hfclk_stop>
    3d2c:	e7fb      	b.n	3d26 <generic_hfclk_stop+0x22>
    3d2e:	bf00      	nop
    3d30:	20004d24 	.word	0x20004d24

00003d34 <get_status>:
{
    3d34:	b570      	push	{r4, r5, r6, lr}
    3d36:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    3d38:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3d3a:	2c01      	cmp	r4, #1
    3d3c:	d807      	bhi.n	3d4e <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3d3e:	4621      	mov	r1, r4
    3d40:	4628      	mov	r0, r5
    3d42:	f006 ff56 	bl	abf2 <get_sub_data>
    3d46:	6880      	ldr	r0, [r0, #8]
}
    3d48:	f000 0007 	and.w	r0, r0, #7
    3d4c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3d4e:	4e06      	ldr	r6, [pc, #24]	; (3d68 <get_status+0x34>)
    3d50:	2379      	movs	r3, #121	; 0x79
    3d52:	4632      	mov	r2, r6
    3d54:	4905      	ldr	r1, [pc, #20]	; (3d6c <get_status+0x38>)
    3d56:	4806      	ldr	r0, [pc, #24]	; (3d70 <get_status+0x3c>)
    3d58:	f006 fdd0 	bl	a8fc <assert_print>
    3d5c:	2179      	movs	r1, #121	; 0x79
    3d5e:	4630      	mov	r0, r6
    3d60:	f006 fdc5 	bl	a8ee <assert_post_action>
    3d64:	e7eb      	b.n	3d3e <get_status+0xa>
    3d66:	bf00      	nop
    3d68:	0000d398 	.word	0x0000d398
    3d6c:	0000d3d8 	.word	0x0000d3d8
    3d70:	0000c254 	.word	0x0000c254

00003d74 <stop>:
{
    3d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d78:	4607      	mov	r7, r0
    3d7a:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    3d7c:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    3d7e:	4621      	mov	r1, r4
    3d80:	f006 ff37 	bl	abf2 <get_sub_data>
    3d84:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3d86:	2c01      	cmp	r4, #1
    3d88:	d80f      	bhi.n	3daa <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
    3d8a:	4631      	mov	r1, r6
    3d8c:	f105 0008 	add.w	r0, r5, #8
    3d90:	f006 ff40 	bl	ac14 <set_off_state>
	if (err < 0) {
    3d94:	2800      	cmp	r0, #0
    3d96:	db06      	blt.n	3da6 <stop+0x32>
	get_sub_config(dev, type)->stop();
    3d98:	4621      	mov	r1, r4
    3d9a:	4638      	mov	r0, r7
    3d9c:	f006 ff30 	bl	ac00 <get_sub_config>
    3da0:	6843      	ldr	r3, [r0, #4]
    3da2:	4798      	blx	r3
	return 0;
    3da4:	2000      	movs	r0, #0
}
    3da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3daa:	f8df 801c 	ldr.w	r8, [pc, #28]	; 3dc8 <stop+0x54>
    3dae:	f240 134d 	movw	r3, #333	; 0x14d
    3db2:	4642      	mov	r2, r8
    3db4:	4905      	ldr	r1, [pc, #20]	; (3dcc <stop+0x58>)
    3db6:	4806      	ldr	r0, [pc, #24]	; (3dd0 <stop+0x5c>)
    3db8:	f006 fda0 	bl	a8fc <assert_print>
    3dbc:	f240 114d 	movw	r1, #333	; 0x14d
    3dc0:	4640      	mov	r0, r8
    3dc2:	f006 fd94 	bl	a8ee <assert_post_action>
    3dc6:	e7e0      	b.n	3d8a <stop+0x16>
    3dc8:	0000d398 	.word	0x0000d398
    3dcc:	0000d3d8 	.word	0x0000d3d8
    3dd0:	0000c254 	.word	0x0000c254

00003dd4 <onoff_stop>:
{
    3dd4:	b538      	push	{r3, r4, r5, lr}
    3dd6:	4605      	mov	r5, r0
    3dd8:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3dda:	f7ff ff73 	bl	3cc4 <get_subsys>
    3dde:	4601      	mov	r1, r0
    3de0:	2240      	movs	r2, #64	; 0x40
    3de2:	4803      	ldr	r0, [pc, #12]	; (3df0 <onoff_stop+0x1c>)
    3de4:	f7ff ffc6 	bl	3d74 <stop>
    3de8:	4601      	mov	r1, r0
	notify(mgr, res);
    3dea:	4628      	mov	r0, r5
    3dec:	47a0      	blx	r4
}
    3dee:	bd38      	pop	{r3, r4, r5, pc}
    3df0:	0000be68 	.word	0x0000be68

00003df4 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    3df4:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    3df6:	2801      	cmp	r0, #1
    3df8:	d01d      	beq.n	3e36 <clock_event_handler+0x42>
    3dfa:	2803      	cmp	r0, #3
    3dfc:	d020      	beq.n	3e40 <clock_event_handler+0x4c>
    3dfe:	b168      	cbz	r0, 3e1c <clock_event_handler+0x28>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
    3e00:	4c16      	ldr	r4, [pc, #88]	; (3e5c <clock_event_handler+0x68>)
    3e02:	f240 2362 	movw	r3, #610	; 0x262
    3e06:	4622      	mov	r2, r4
    3e08:	4915      	ldr	r1, [pc, #84]	; (3e60 <clock_event_handler+0x6c>)
    3e0a:	4816      	ldr	r0, [pc, #88]	; (3e64 <clock_event_handler+0x70>)
    3e0c:	f006 fd76 	bl	a8fc <assert_print>
    3e10:	f240 2162 	movw	r1, #610	; 0x262
    3e14:	4620      	mov	r0, r4
    3e16:	f006 fd6a 	bl	a8ee <assert_post_action>
		break;
	}
}
    3e1a:	e010      	b.n	3e3e <clock_event_handler+0x4a>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3e1c:	2100      	movs	r1, #0
    3e1e:	4812      	ldr	r0, [pc, #72]	; (3e68 <clock_event_handler+0x74>)
    3e20:	f006 fee7 	bl	abf2 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3e24:	6883      	ldr	r3, [r0, #8]
    3e26:	f013 0f07 	tst.w	r3, #7
    3e2a:	d108      	bne.n	3e3e <clock_event_handler+0x4a>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    3e2c:	2100      	movs	r1, #0
    3e2e:	480e      	ldr	r0, [pc, #56]	; (3e68 <clock_event_handler+0x74>)
    3e30:	f006 ff3a 	bl	aca8 <clkstarted_handle>
    3e34:	e003      	b.n	3e3e <clock_event_handler+0x4a>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3e36:	2101      	movs	r1, #1
    3e38:	480b      	ldr	r0, [pc, #44]	; (3e68 <clock_event_handler+0x74>)
    3e3a:	f006 ff35 	bl	aca8 <clkstarted_handle>
}
    3e3e:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
    3e40:	4c06      	ldr	r4, [pc, #24]	; (3e5c <clock_event_handler+0x68>)
    3e42:	f240 235e 	movw	r3, #606	; 0x25e
    3e46:	4622      	mov	r2, r4
    3e48:	4905      	ldr	r1, [pc, #20]	; (3e60 <clock_event_handler+0x6c>)
    3e4a:	4806      	ldr	r0, [pc, #24]	; (3e64 <clock_event_handler+0x70>)
    3e4c:	f006 fd56 	bl	a8fc <assert_print>
    3e50:	f240 215e 	movw	r1, #606	; 0x25e
    3e54:	4620      	mov	r0, r4
    3e56:	f006 fd4a 	bl	a8ee <assert_post_action>
		break;
    3e5a:	e7f0      	b.n	3e3e <clock_event_handler+0x4a>
    3e5c:	0000d398 	.word	0x0000d398
    3e60:	0000c914 	.word	0x0000c914
    3e64:	0000c254 	.word	0x0000c254
    3e68:	0000be68 	.word	0x0000be68

00003e6c <api_blocking_start>:
{
    3e6c:	b500      	push	{lr}
    3e6e:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3e70:	f8cd d000 	str.w	sp, [sp]
    3e74:	f8cd d004 	str.w	sp, [sp, #4]
    3e78:	2300      	movs	r3, #0
    3e7a:	9302      	str	r3, [sp, #8]
    3e7c:	2301      	movs	r3, #1
    3e7e:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3e80:	466b      	mov	r3, sp
    3e82:	4a07      	ldr	r2, [pc, #28]	; (3ea0 <api_blocking_start+0x34>)
    3e84:	f006 ff3e 	bl	ad04 <api_start>
	if (err < 0) {
    3e88:	2800      	cmp	r0, #0
    3e8a:	db05      	blt.n	3e98 <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    3e8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3e90:	2300      	movs	r3, #0
    3e92:	4668      	mov	r0, sp
    3e94:	f004 f846 	bl	7f24 <z_impl_k_sem_take>
}
    3e98:	b005      	add	sp, #20
    3e9a:	f85d fb04 	ldr.w	pc, [sp], #4
    3e9e:	bf00      	nop
    3ea0:	0000ad57 	.word	0x0000ad57

00003ea4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    3ea4:	b570      	push	{r4, r5, r6, lr}
    3ea6:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3ea8:	2200      	movs	r2, #0
    3eaa:	2101      	movs	r1, #1
    3eac:	4610      	mov	r0, r2
    3eae:	f7fe ff7f 	bl	2db0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3eb2:	4811      	ldr	r0, [pc, #68]	; (3ef8 <clk_init+0x54>)
    3eb4:	f001 ff24 	bl	5d00 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3eb8:	4b10      	ldr	r3, [pc, #64]	; (3efc <clk_init+0x58>)
    3eba:	4298      	cmp	r0, r3
    3ebc:	d119      	bne.n	3ef2 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3ebe:	f001 ff49 	bl	5d54 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    3ec2:	2400      	movs	r4, #0
    3ec4:	2c01      	cmp	r4, #1
    3ec6:	d812      	bhi.n	3eee <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    3ec8:	4621      	mov	r1, r4
    3eca:	4630      	mov	r0, r6
    3ecc:	f006 fe91 	bl	abf2 <get_sub_data>
    3ed0:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3ed2:	4621      	mov	r1, r4
    3ed4:	4630      	mov	r0, r6
    3ed6:	f006 fe99 	bl	ac0c <get_onoff_manager>
    3eda:	4909      	ldr	r1, [pc, #36]	; (3f00 <clk_init+0x5c>)
    3edc:	f006 fc93 	bl	a806 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3ee0:	2800      	cmp	r0, #0
    3ee2:	db05      	blt.n	3ef0 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3ee4:	2301      	movs	r3, #1
    3ee6:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    3ee8:	441c      	add	r4, r3
    3eea:	b2e4      	uxtb	r4, r4
    3eec:	e7ea      	b.n	3ec4 <clk_init+0x20>
	}

	return 0;
    3eee:	2000      	movs	r0, #0
}
    3ef0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3ef2:	f06f 0004 	mvn.w	r0, #4
    3ef6:	e7fb      	b.n	3ef0 <clk_init+0x4c>
    3ef8:	00003df5 	.word	0x00003df5
    3efc:	0bad0000 	.word	0x0bad0000
    3f00:	0000d454 	.word	0x0000d454

00003f04 <lfclk_spinwait>:
{
    3f04:	b570      	push	{r4, r5, r6, lr}
    3f06:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3f08:	2801      	cmp	r0, #1
    3f0a:	d107      	bne.n	3f1c <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3f0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f10:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3f14:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3f18:	2b01      	cmp	r3, #1
    3f1a:	d05a      	beq.n	3fd2 <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3f1c:	f007 fe68 	bl	bbf0 <k_is_in_isr>
    3f20:	b928      	cbnz	r0, 3f2e <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    3f22:	4b2f      	ldr	r3, [pc, #188]	; (3fe0 <lfclk_spinwait+0xdc>)
    3f24:	781b      	ldrb	r3, [r3, #0]
    3f26:	2b00      	cmp	r3, #0
    3f28:	d043      	beq.n	3fb2 <lfclk_spinwait+0xae>
    3f2a:	2300      	movs	r3, #0
    3f2c:	e000      	b.n	3f30 <lfclk_spinwait+0x2c>
    3f2e:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    3f30:	461c      	mov	r4, r3
    3f32:	2b00      	cmp	r3, #0
    3f34:	d03f      	beq.n	3fb6 <lfclk_spinwait+0xb2>
	__asm__ volatile(
    3f36:	f04f 0320 	mov.w	r3, #32
    3f3a:	f3ef 8611 	mrs	r6, BASEPRI
    3f3e:	f383 8812 	msr	BASEPRI_MAX, r3
    3f42:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    3f46:	b924      	cbnz	r4, 3f52 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    3f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f4c:	2202      	movs	r2, #2
    3f4e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3f52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3f56:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3f5a:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3f5e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3f62:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    3f66:	d12d      	bne.n	3fc4 <lfclk_spinwait+0xc0>
    return false;
    3f68:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3f6a:	b11a      	cbz	r2, 3f74 <lfclk_spinwait+0x70>
    3f6c:	2b01      	cmp	r3, #1
    3f6e:	d02b      	beq.n	3fc8 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3f70:	2d01      	cmp	r5, #1
    3f72:	d029      	beq.n	3fc8 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3f74:	b30c      	cbz	r4, 3fba <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3f76:	4630      	mov	r0, r6
    3f78:	f7fe feaa 	bl	2cd0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3f7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f80:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3f84:	2b00      	cmp	r3, #0
    3f86:	d1e4      	bne.n	3f52 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3f88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f8c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    3f90:	2b00      	cmp	r3, #0
    3f92:	d0de      	beq.n	3f52 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3f98:	2200      	movs	r2, #0
    3f9a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3f9e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3fa2:	2201      	movs	r2, #1
    3fa4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3fa8:	490e      	ldr	r1, [pc, #56]	; (3fe4 <lfclk_spinwait+0xe0>)
    3faa:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fae:	609a      	str	r2, [r3, #8]
}
    3fb0:	e7cf      	b.n	3f52 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3fb2:	2301      	movs	r3, #1
    3fb4:	e7bc      	b.n	3f30 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    3fb6:	2600      	movs	r6, #0
    3fb8:	e7c5      	b.n	3f46 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    3fba:	2021      	movs	r0, #33	; 0x21
    3fbc:	2100      	movs	r1, #0
    3fbe:	f005 fa4d 	bl	945c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3fc2:	e7db      	b.n	3f7c <lfclk_spinwait+0x78>
                return true;
    3fc4:	2201      	movs	r2, #1
    3fc6:	e7d0      	b.n	3f6a <lfclk_spinwait+0x66>
	if (isr_mode) {
    3fc8:	b124      	cbz	r4, 3fd4 <lfclk_spinwait+0xd0>
	__asm__ volatile(
    3fca:	f386 8811 	msr	BASEPRI, r6
    3fce:	f3bf 8f6f 	isb	sy
}
    3fd2:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    3fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3fd8:	2202      	movs	r2, #2
    3fda:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3fde:	e7f8      	b.n	3fd2 <lfclk_spinwait+0xce>
    3fe0:	20005452 	.word	0x20005452
    3fe4:	e000e100 	.word	0xe000e100

00003fe8 <generic_hfclk_start>:
{
    3fe8:	b510      	push	{r4, lr}
	__asm__ volatile(
    3fea:	f04f 0320 	mov.w	r3, #32
    3fee:	f3ef 8411 	mrs	r4, BASEPRI
    3ff2:	f383 8812 	msr	BASEPRI_MAX, r3
    3ff6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3ffa:	4a13      	ldr	r2, [pc, #76]	; (4048 <generic_hfclk_start+0x60>)
    3ffc:	6813      	ldr	r3, [r2, #0]
    3ffe:	f043 0302 	orr.w	r3, r3, #2
    4002:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4004:	f013 0f01 	tst.w	r3, #1
    4008:	d108      	bne.n	401c <generic_hfclk_start+0x34>
	bool already_started = false;
    400a:	2300      	movs	r3, #0
	__asm__ volatile(
    400c:	f384 8811 	msr	BASEPRI, r4
    4010:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4014:	b99b      	cbnz	r3, 403e <generic_hfclk_start+0x56>
	hfclk_start();
    4016:	f006 fe85 	bl	ad24 <hfclk_start>
}
    401a:	bd10      	pop	{r4, pc}
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    401c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4020:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4024:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4028:	f012 0f01 	tst.w	r2, #1
    402c:	d101      	bne.n	4032 <generic_hfclk_start+0x4a>
	bool already_started = false;
    402e:	2300      	movs	r3, #0
    4030:	e7ec      	b.n	400c <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    4032:	f7ff fe43 	bl	3cbc <get_hf_flags>
    4036:	f006 fe24 	bl	ac82 <set_on_state>
			already_started = true;
    403a:	2301      	movs	r3, #1
    403c:	e7e6      	b.n	400c <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    403e:	2100      	movs	r1, #0
    4040:	4802      	ldr	r0, [pc, #8]	; (404c <generic_hfclk_start+0x64>)
    4042:	f006 fe31 	bl	aca8 <clkstarted_handle>
		return;
    4046:	e7e8      	b.n	401a <generic_hfclk_start+0x32>
    4048:	20004d24 	.word	0x20004d24
    404c:	0000be68 	.word	0x0000be68

00004050 <z_nrf_clock_control_lf_on>:
{
    4050:	b538      	push	{r3, r4, r5, lr}
    4052:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4054:	4b1f      	ldr	r3, [pc, #124]	; (40d4 <z_nrf_clock_control_lf_on+0x84>)
    4056:	2101      	movs	r1, #1
    4058:	f3bf 8f5b 	dmb	ish
    405c:	e853 2f00 	ldrex	r2, [r3]
    4060:	e843 1000 	strex	r0, r1, [r3]
    4064:	2800      	cmp	r0, #0
    4066:	d1f9      	bne.n	405c <z_nrf_clock_control_lf_on+0xc>
    4068:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    406c:	b142      	cbz	r2, 4080 <z_nrf_clock_control_lf_on+0x30>
	switch (start_mode) {
    406e:	b134      	cbz	r4, 407e <z_nrf_clock_control_lf_on+0x2e>
    4070:	1e63      	subs	r3, r4, #1
    4072:	b2db      	uxtb	r3, r3
    4074:	2b01      	cmp	r3, #1
    4076:	d81f      	bhi.n	40b8 <z_nrf_clock_control_lf_on+0x68>
		lfclk_spinwait(start_mode);
    4078:	4620      	mov	r0, r4
    407a:	f7ff ff43 	bl	3f04 <lfclk_spinwait>
}
    407e:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
    4080:	4815      	ldr	r0, [pc, #84]	; (40d8 <z_nrf_clock_control_lf_on+0x88>)
    4082:	f006 fdc3 	bl	ac0c <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4086:	4915      	ldr	r1, [pc, #84]	; (40dc <z_nrf_clock_control_lf_on+0x8c>)
    4088:	2300      	movs	r3, #0
    408a:	604b      	str	r3, [r1, #4]
    408c:	608b      	str	r3, [r1, #8]
    408e:	60cb      	str	r3, [r1, #12]
    4090:	2301      	movs	r3, #1
    4092:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    4094:	f7fc fff4 	bl	1080 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    4098:	2800      	cmp	r0, #0
    409a:	dae8      	bge.n	406e <z_nrf_clock_control_lf_on+0x1e>
    409c:	4d10      	ldr	r5, [pc, #64]	; (40e0 <z_nrf_clock_control_lf_on+0x90>)
    409e:	f44f 7308 	mov.w	r3, #544	; 0x220
    40a2:	462a      	mov	r2, r5
    40a4:	490f      	ldr	r1, [pc, #60]	; (40e4 <z_nrf_clock_control_lf_on+0x94>)
    40a6:	4810      	ldr	r0, [pc, #64]	; (40e8 <z_nrf_clock_control_lf_on+0x98>)
    40a8:	f006 fc28 	bl	a8fc <assert_print>
    40ac:	f44f 7108 	mov.w	r1, #544	; 0x220
    40b0:	4628      	mov	r0, r5
    40b2:	f006 fc1c 	bl	a8ee <assert_post_action>
    40b6:	e7da      	b.n	406e <z_nrf_clock_control_lf_on+0x1e>
		__ASSERT_NO_MSG(false);
    40b8:	4c09      	ldr	r4, [pc, #36]	; (40e0 <z_nrf_clock_control_lf_on+0x90>)
    40ba:	f240 2332 	movw	r3, #562	; 0x232
    40be:	4622      	mov	r2, r4
    40c0:	490a      	ldr	r1, [pc, #40]	; (40ec <z_nrf_clock_control_lf_on+0x9c>)
    40c2:	4809      	ldr	r0, [pc, #36]	; (40e8 <z_nrf_clock_control_lf_on+0x98>)
    40c4:	f006 fc1a 	bl	a8fc <assert_print>
    40c8:	f240 2132 	movw	r1, #562	; 0x232
    40cc:	4620      	mov	r0, r4
    40ce:	f006 fc0e 	bl	a8ee <assert_post_action>
    40d2:	e7d4      	b.n	407e <z_nrf_clock_control_lf_on+0x2e>
    40d4:	20004d28 	.word	0x20004d28
    40d8:	0000be68 	.word	0x0000be68
    40dc:	20004cbc 	.word	0x20004cbc
    40e0:	0000d398 	.word	0x0000d398
    40e4:	0000c87c 	.word	0x0000c87c
    40e8:	0000c254 	.word	0x0000c254
    40ec:	0000c914 	.word	0x0000c914

000040f0 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    40f0:	b510      	push	{r4, lr}
    40f2:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    40f4:	280a      	cmp	r0, #10
    40f6:	d007      	beq.n	4108 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    40f8:	4b07      	ldr	r3, [pc, #28]	; (4118 <console_out+0x28>)
    40fa:	6818      	ldr	r0, [r3, #0]
    40fc:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    40fe:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4100:	69db      	ldr	r3, [r3, #28]
    4102:	4798      	blx	r3

	return c;
}
    4104:	4620      	mov	r0, r4
    4106:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    4108:	4b03      	ldr	r3, [pc, #12]	; (4118 <console_out+0x28>)
    410a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    410c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    410e:	69db      	ldr	r3, [r3, #28]
    4110:	210d      	movs	r1, #13
    4112:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    4114:	e7f0      	b.n	40f8 <console_out+0x8>
    4116:	bf00      	nop
    4118:	20004d2c 	.word	0x20004d2c

0000411c <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    411c:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    411e:	4c04      	ldr	r4, [pc, #16]	; (4130 <uart_console_hook_install+0x14>)
    4120:	4620      	mov	r0, r4
    4122:	f7ff fd2b 	bl	3b7c <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    4126:	4620      	mov	r0, r4
    4128:	f7fc fd10 	bl	b4c <__printk_hook_install>
#endif
}
    412c:	bd10      	pop	{r4, pc}
    412e:	bf00      	nop
    4130:	000040f1 	.word	0x000040f1

00004134 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4134:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4136:	4806      	ldr	r0, [pc, #24]	; (4150 <uart_console_init+0x1c>)
    4138:	4b06      	ldr	r3, [pc, #24]	; (4154 <uart_console_init+0x20>)
    413a:	6018      	str	r0, [r3, #0]
    413c:	f007 fcfc 	bl	bb38 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    4140:	b118      	cbz	r0, 414a <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
    4142:	f7ff ffeb 	bl	411c <uart_console_hook_install>

	return 0;
    4146:	2000      	movs	r0, #0
}
    4148:	bd08      	pop	{r3, pc}
		return -ENODEV;
    414a:	f06f 0012 	mvn.w	r0, #18
    414e:	e7fb      	b.n	4148 <uart_console_init+0x14>
    4150:	0000bec8 	.word	0x0000bec8
    4154:	20004d2c 	.word	0x20004d2c

00004158 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4158:	b128      	cbz	r0, 4166 <get_dev+0xe>
    415a:	2801      	cmp	r0, #1
    415c:	d101      	bne.n	4162 <get_dev+0xa>
    415e:	4803      	ldr	r0, [pc, #12]	; (416c <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    4160:	4770      	bx	lr
	const struct device *dev = NULL;
    4162:	2000      	movs	r0, #0
    4164:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4166:	4802      	ldr	r0, [pc, #8]	; (4170 <get_dev+0x18>)
    4168:	4770      	bx	lr
    416a:	bf00      	nop
    416c:	0000be80 	.word	0x0000be80
    4170:	0000be98 	.word	0x0000be98

00004174 <gpio_nrfx_manage_callback>:
{
    4174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4178:	4616      	mov	r6, r2
	return port->data;
    417a:	6905      	ldr	r5, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    417c:	1d2f      	adds	r7, r5, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    417e:	460c      	mov	r4, r1
    4180:	b131      	cbz	r1, 4190 <gpio_nrfx_manage_callback+0x1c>
	__ASSERT(callback->handler, "No callback handler!");
    4182:	6863      	ldr	r3, [r4, #4]
    4184:	b1a3      	cbz	r3, 41b0 <__data_size>
	return list->head;
    4186:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    4188:	2b00      	cmp	r3, #0
    418a:	d03b      	beq.n	4204 <__data_size+0x54>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    418c:	2100      	movs	r1, #0
    418e:	e02a      	b.n	41e6 <__data_size+0x36>
	__ASSERT(callback, "No callback!");
    4190:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4228 <__data_size+0x78>
    4194:	2324      	movs	r3, #36	; 0x24
    4196:	4642      	mov	r2, r8
    4198:	4924      	ldr	r1, [pc, #144]	; (422c <__data_size+0x7c>)
    419a:	4825      	ldr	r0, [pc, #148]	; (4230 <__data_size+0x80>)
    419c:	f006 fbae 	bl	a8fc <assert_print>
    41a0:	4824      	ldr	r0, [pc, #144]	; (4234 <__data_size+0x84>)
    41a2:	f006 fbab 	bl	a8fc <assert_print>
    41a6:	2124      	movs	r1, #36	; 0x24
    41a8:	4640      	mov	r0, r8
    41aa:	f006 fba0 	bl	a8ee <assert_post_action>
    41ae:	e7e8      	b.n	4182 <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
    41b0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 4228 <__data_size+0x78>
    41b4:	2325      	movs	r3, #37	; 0x25
    41b6:	4642      	mov	r2, r8
    41b8:	491f      	ldr	r1, [pc, #124]	; (4238 <__data_size+0x88>)
    41ba:	481d      	ldr	r0, [pc, #116]	; (4230 <__data_size+0x80>)
    41bc:	f006 fb9e 	bl	a8fc <assert_print>
    41c0:	481e      	ldr	r0, [pc, #120]	; (423c <__data_size+0x8c>)
    41c2:	f006 fb9b 	bl	a8fc <assert_print>
    41c6:	2125      	movs	r1, #37	; 0x25
    41c8:	4640      	mov	r0, r8
    41ca:	f006 fb90 	bl	a8ee <assert_post_action>
    41ce:	e7da      	b.n	4186 <gpio_nrfx_manage_callback+0x12>
	return node->next;
    41d0:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    41d2:	606b      	str	r3, [r5, #4]
	return list->tail;
    41d4:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    41d6:	4294      	cmp	r4, r2
    41d8:	d10f      	bne.n	41fa <__data_size+0x4a>
	list->tail = node;
    41da:	607b      	str	r3, [r7, #4]
}
    41dc:	e00d      	b.n	41fa <__data_size+0x4a>
	list->tail = node;
    41de:	6079      	str	r1, [r7, #4]
}
    41e0:	e00b      	b.n	41fa <__data_size+0x4a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    41e2:	4619      	mov	r1, r3
    41e4:	681b      	ldr	r3, [r3, #0]
    41e6:	b15b      	cbz	r3, 4200 <__data_size+0x50>
    41e8:	429c      	cmp	r4, r3
    41ea:	d1fa      	bne.n	41e2 <__data_size+0x32>
Z_GENLIST_REMOVE(slist, snode)
    41ec:	2900      	cmp	r1, #0
    41ee:	d0ef      	beq.n	41d0 <__data_size+0x20>
	return node->next;
    41f0:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    41f2:	600b      	str	r3, [r1, #0]
	return list->tail;
    41f4:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
    41f6:	429c      	cmp	r4, r3
    41f8:	d0f1      	beq.n	41de <__data_size+0x2e>
	parent->next = child;
    41fa:	2300      	movs	r3, #0
    41fc:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    41fe:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    4200:	b903      	cbnz	r3, 4204 <__data_size+0x54>
			if (!set) {
    4202:	b156      	cbz	r6, 421a <__data_size+0x6a>
				return -EINVAL;
			}
		}
	}

	if (set) {
    4204:	b166      	cbz	r6, 4220 <__data_size+0x70>
	return list->head;
    4206:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    4208:	6023      	str	r3, [r4, #0]
	list->head = node;
    420a:	606c      	str	r4, [r5, #4]
	return list->tail;
    420c:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
    420e:	b10b      	cbz	r3, 4214 <__data_size+0x64>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    4210:	2000      	movs	r0, #0
    4212:	e006      	b.n	4222 <__data_size+0x72>
	list->tail = node;
    4214:	607c      	str	r4, [r7, #4]
    4216:	2000      	movs	r0, #0
}
    4218:	e003      	b.n	4222 <__data_size+0x72>
				return -EINVAL;
    421a:	f06f 0015 	mvn.w	r0, #21
    421e:	e000      	b.n	4222 <__data_size+0x72>
	return 0;
    4220:	2000      	movs	r0, #0
}
    4222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4226:	bf00      	nop
    4228:	0000d460 	.word	0x0000d460
    422c:	0000d490 	.word	0x0000d490
    4230:	0000c254 	.word	0x0000c254
    4234:	0000d49c 	.word	0x0000d49c
    4238:	0000d4ac 	.word	0x0000d4ac
    423c:	0000d4c0 	.word	0x0000d4c0

00004240 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    4240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    4244:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
    4248:	0940      	lsrs	r0, r0, #5
    424a:	f7ff ff85 	bl	4158 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
    424e:	b380      	cbz	r0, 42b2 <nrfx_gpio_handler+0x72>
    4250:	4607      	mov	r7, r0
	return port->data;
    4252:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
    4254:	2601      	movs	r6, #1
    4256:	40a6      	lsls	r6, r4
	return list->head;
    4258:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    425a:	b11c      	cbz	r4, 4264 <nrfx_gpio_handler+0x24>
    425c:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    425e:	b17c      	cbz	r4, 4280 <nrfx_gpio_handler+0x40>
	return node->next;
    4260:	6825      	ldr	r5, [r4, #0]
    4262:	e00d      	b.n	4280 <nrfx_gpio_handler+0x40>
    4264:	4625      	mov	r5, r4
    4266:	e00b      	b.n	4280 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    4268:	6863      	ldr	r3, [r4, #4]
    426a:	68a2      	ldr	r2, [r4, #8]
    426c:	4032      	ands	r2, r6
    426e:	4621      	mov	r1, r4
    4270:	4638      	mov	r0, r7
    4272:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4274:	b1dd      	cbz	r5, 42ae <nrfx_gpio_handler+0x6e>
    4276:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    4278:	b105      	cbz	r5, 427c <nrfx_gpio_handler+0x3c>
	return node->next;
    427a:	682b      	ldr	r3, [r5, #0]
    427c:	462c      	mov	r4, r5
    427e:	461d      	mov	r5, r3
    4280:	b1bc      	cbz	r4, 42b2 <nrfx_gpio_handler+0x72>
		if (cb->pin_mask & pins) {
    4282:	68a3      	ldr	r3, [r4, #8]
    4284:	421e      	tst	r6, r3
    4286:	d0f5      	beq.n	4274 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
    4288:	6863      	ldr	r3, [r4, #4]
    428a:	2b00      	cmp	r3, #0
    428c:	d1ec      	bne.n	4268 <nrfx_gpio_handler+0x28>
    428e:	f8df 8028 	ldr.w	r8, [pc, #40]	; 42b8 <nrfx_gpio_handler+0x78>
    4292:	2345      	movs	r3, #69	; 0x45
    4294:	4642      	mov	r2, r8
    4296:	4909      	ldr	r1, [pc, #36]	; (42bc <nrfx_gpio_handler+0x7c>)
    4298:	4809      	ldr	r0, [pc, #36]	; (42c0 <nrfx_gpio_handler+0x80>)
    429a:	f006 fb2f 	bl	a8fc <assert_print>
    429e:	4809      	ldr	r0, [pc, #36]	; (42c4 <nrfx_gpio_handler+0x84>)
    42a0:	f006 fb2c 	bl	a8fc <assert_print>
    42a4:	2145      	movs	r1, #69	; 0x45
    42a6:	4640      	mov	r0, r8
    42a8:	f006 fb21 	bl	a8ee <assert_post_action>
    42ac:	e7dc      	b.n	4268 <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    42ae:	462b      	mov	r3, r5
    42b0:	e7e4      	b.n	427c <nrfx_gpio_handler+0x3c>
}
    42b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42b6:	bf00      	nop
    42b8:	0000d460 	.word	0x0000d460
    42bc:	0000d4d8 	.word	0x0000d4d8
    42c0:	0000c254 	.word	0x0000c254
    42c4:	0000d4c0 	.word	0x0000d4c0

000042c8 <gpio_nrfx_pin_interrupt_configure>:
{
    42c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    42ca:	b085      	sub	sp, #20
    42cc:	460e      	mov	r6, r1
    42ce:	4619      	mov	r1, r3
	return port->config;
    42d0:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    42d2:	7b1b      	ldrb	r3, [r3, #12]
    42d4:	f006 041f 	and.w	r4, r6, #31
    42d8:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    42dc:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    42e0:	d022      	beq.n	4328 <gpio_nrfx_pin_interrupt_configure+0x60>
    42e2:	4607      	mov	r7, r0
    42e4:	4615      	mov	r5, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    42e6:	2300      	movs	r3, #0
    42e8:	9302      	str	r3, [sp, #8]
    42ea:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    42ec:	4610      	mov	r0, r2
    42ee:	f006 fdb0 	bl	ae52 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    42f2:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    42f6:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    42f8:	6899      	ldr	r1, [r3, #8]
    42fa:	40f1      	lsrs	r1, r6
    42fc:	f011 0101 	ands.w	r1, r1, #1
    4300:	d102      	bne.n	4308 <gpio_nrfx_pin_interrupt_configure+0x40>
    4302:	f1b5 7fa0 	cmp.w	r5, #20971520	; 0x1400000
    4306:	d014      	beq.n	4332 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4308:	2300      	movs	r3, #0
    430a:	aa02      	add	r2, sp, #8
    430c:	4619      	mov	r1, r3
    430e:	4620      	mov	r0, r4
    4310:	f002 f99a 	bl	6648 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4314:	4b32      	ldr	r3, [pc, #200]	; (43e0 <gpio_nrfx_pin_interrupt_configure+0x118>)
    4316:	4298      	cmp	r0, r3
    4318:	d15f      	bne.n	43da <gpio_nrfx_pin_interrupt_configure+0x112>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    431a:	2101      	movs	r1, #1
    431c:	4620      	mov	r0, r4
    431e:	f002 fbf7 	bl	6b10 <nrfx_gpiote_trigger_enable>
	return 0;
    4322:	2000      	movs	r0, #0
}
    4324:	b005      	add	sp, #20
    4326:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    4328:	4620      	mov	r0, r4
    432a:	f002 fcfd 	bl	6d28 <nrfx_gpiote_trigger_disable>
		return 0;
    432e:	2000      	movs	r0, #0
    4330:	e7f8      	b.n	4324 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
    4332:	0963      	lsrs	r3, r4, #5
    4334:	d01f      	beq.n	4376 <gpio_nrfx_pin_interrupt_configure+0xae>
    4336:	2b01      	cmp	r3, #1
    4338:	d101      	bne.n	433e <gpio_nrfx_pin_interrupt_configure+0x76>
            mask = P1_FEATURE_PINS_PRESENT;
    433a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    pin_number &= 0x1F;
    433e:	f004 031f 	and.w	r3, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4342:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4344:	f011 0f01 	tst.w	r1, #1
    4348:	d018      	beq.n	437c <gpio_nrfx_pin_interrupt_configure+0xb4>
    *p_pin = pin_number & 0x1F;
    434a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    434e:	0963      	lsrs	r3, r4, #5
    4350:	d022      	beq.n	4398 <gpio_nrfx_pin_interrupt_configure+0xd0>
    4352:	2b01      	cmp	r3, #1
    4354:	d023      	beq.n	439e <gpio_nrfx_pin_interrupt_configure+0xd6>
            NRFX_ASSERT(0);
    4356:	4e23      	ldr	r6, [pc, #140]	; (43e4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    4358:	f240 232e 	movw	r3, #558	; 0x22e
    435c:	4632      	mov	r2, r6
    435e:	4922      	ldr	r1, [pc, #136]	; (43e8 <gpio_nrfx_pin_interrupt_configure+0x120>)
    4360:	4822      	ldr	r0, [pc, #136]	; (43ec <gpio_nrfx_pin_interrupt_configure+0x124>)
    4362:	f006 facb 	bl	a8fc <assert_print>
    4366:	f240 212e 	movw	r1, #558	; 0x22e
    436a:	4630      	mov	r0, r6
    436c:	f006 fabf 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    4370:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4374:	e014      	b.n	43a0 <gpio_nrfx_pin_interrupt_configure+0xd8>
            mask = P0_FEATURE_PINS_PRESENT;
    4376:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    437a:	e7e0      	b.n	433e <gpio_nrfx_pin_interrupt_configure+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    437c:	4d19      	ldr	r5, [pc, #100]	; (43e4 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    437e:	f240 2329 	movw	r3, #553	; 0x229
    4382:	462a      	mov	r2, r5
    4384:	491a      	ldr	r1, [pc, #104]	; (43f0 <gpio_nrfx_pin_interrupt_configure+0x128>)
    4386:	4819      	ldr	r0, [pc, #100]	; (43ec <gpio_nrfx_pin_interrupt_configure+0x124>)
    4388:	f006 fab8 	bl	a8fc <assert_print>
    438c:	f240 2129 	movw	r1, #553	; 0x229
    4390:	4628      	mov	r0, r5
    4392:	f006 faac 	bl	a8ee <assert_post_action>
    4396:	e7d8      	b.n	434a <gpio_nrfx_pin_interrupt_configure+0x82>
        case 0: return NRF_P0;
    4398:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    439c:	e000      	b.n	43a0 <gpio_nrfx_pin_interrupt_configure+0xd8>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    439e:	4b15      	ldr	r3, [pc, #84]	; (43f4 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    43a0:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    43a4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    43a8:	f013 0f01 	tst.w	r3, #1
    43ac:	d1ac      	bne.n	4308 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    43ae:	f10d 0107 	add.w	r1, sp, #7
    43b2:	4620      	mov	r0, r4
    43b4:	f002 fb3c 	bl	6a30 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    43b8:	4b0f      	ldr	r3, [pc, #60]	; (43f8 <gpio_nrfx_pin_interrupt_configure+0x130>)
    43ba:	4298      	cmp	r0, r3
    43bc:	d003      	beq.n	43c6 <gpio_nrfx_pin_interrupt_configure+0xfe>
		trigger_config.p_in_channel = &ch;
    43be:	f10d 0307 	add.w	r3, sp, #7
    43c2:	9303      	str	r3, [sp, #12]
    43c4:	e7a0      	b.n	4308 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
    43c6:	f10d 0007 	add.w	r0, sp, #7
    43ca:	f002 fb99 	bl	6b00 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    43ce:	4b04      	ldr	r3, [pc, #16]	; (43e0 <gpio_nrfx_pin_interrupt_configure+0x118>)
    43d0:	4298      	cmp	r0, r3
    43d2:	d0f4      	beq.n	43be <gpio_nrfx_pin_interrupt_configure+0xf6>
				return -ENOMEM;
    43d4:	f06f 000b 	mvn.w	r0, #11
    43d8:	e7a4      	b.n	4324 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    43da:	f06f 0004 	mvn.w	r0, #4
    43de:	e7a1      	b.n	4324 <gpio_nrfx_pin_interrupt_configure+0x5c>
    43e0:	0bad0000 	.word	0x0bad0000
    43e4:	0000d4e4 	.word	0x0000d4e4
    43e8:	0000c914 	.word	0x0000c914
    43ec:	0000c254 	.word	0x0000c254
    43f0:	0000d518 	.word	0x0000d518
    43f4:	50000300 	.word	0x50000300
    43f8:	0bad0004 	.word	0x0bad0004

000043fc <pin_uninit>:
{
    43fc:	b530      	push	{r4, r5, lr}
    43fe:	b083      	sub	sp, #12
    4400:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    4402:	f10d 0107 	add.w	r1, sp, #7
    4406:	f002 fb13 	bl	6a30 <nrfx_gpiote_channel_get>
    440a:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    440c:	4620      	mov	r0, r4
    440e:	f002 fcf3 	bl	6df8 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    4412:	4b0b      	ldr	r3, [pc, #44]	; (4440 <pin_uninit+0x44>)
    4414:	4298      	cmp	r0, r3
    4416:	d10f      	bne.n	4438 <pin_uninit+0x3c>
	if (free_ch) {
    4418:	429d      	cmp	r5, r3
    441a:	d005      	beq.n	4428 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    441c:	4b08      	ldr	r3, [pc, #32]	; (4440 <pin_uninit+0x44>)
    441e:	4298      	cmp	r0, r3
    4420:	d107      	bne.n	4432 <pin_uninit+0x36>
    4422:	2000      	movs	r0, #0
}
    4424:	b003      	add	sp, #12
    4426:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    4428:	f89d 0007 	ldrb.w	r0, [sp, #7]
    442c:	f002 fb60 	bl	6af0 <nrfx_gpiote_channel_free>
    4430:	e7f4      	b.n	441c <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4432:	f06f 0004 	mvn.w	r0, #4
    4436:	e7f5      	b.n	4424 <pin_uninit+0x28>
		return -EIO;
    4438:	f06f 0004 	mvn.w	r0, #4
    443c:	e7f2      	b.n	4424 <pin_uninit+0x28>
    443e:	bf00      	nop
    4440:	0bad0000 	.word	0x0bad0000

00004444 <gpio_nrfx_pin_configure>:
{
    4444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4448:	b087      	sub	sp, #28
	return port->config;
    444a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    444e:	f898 300c 	ldrb.w	r3, [r8, #12]
    4452:	f001 051f 	and.w	r5, r1, #31
    4456:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    445a:	2a00      	cmp	r2, #0
    445c:	d044      	beq.n	44e8 <gpio_nrfx_pin_configure+0xa4>
    445e:	460c      	mov	r4, r1
    4460:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4462:	2600      	movs	r6, #0
    4464:	9603      	str	r6, [sp, #12]
    4466:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    4468:	f10d 0117 	add.w	r1, sp, #23
    446c:	4620      	mov	r0, r4
    446e:	f002 fadf 	bl	6a30 <nrfx_gpiote_channel_get>
    4472:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4474:	4633      	mov	r3, r6
    4476:	aa03      	add	r2, sp, #12
    4478:	4631      	mov	r1, r6
    447a:	4628      	mov	r0, r5
    447c:	f002 f8e4 	bl	6648 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4480:	4b30      	ldr	r3, [pc, #192]	; (4544 <gpio_nrfx_pin_configure+0x100>)
    4482:	4298      	cmp	r0, r3
    4484:	d15b      	bne.n	453e <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    4486:	4599      	cmp	r9, r3
    4488:	d036      	beq.n	44f8 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    448a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
    448e:	d043      	beq.n	4518 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    4490:	f10d 0103 	add.w	r1, sp, #3
    4494:	4638      	mov	r0, r7
    4496:	f006 fc63 	bl	ad60 <get_drive>
		if (rv != 0) {
    449a:	4606      	mov	r6, r0
    449c:	bb40      	cbnz	r0, 44f0 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    449e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    44a2:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    44a6:	f417 3f80 	tst.w	r7, #65536	; 0x10000
    44aa:	bf0c      	ite	eq
    44ac:	2301      	moveq	r3, #1
    44ae:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    44b0:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    44b4:	4638      	mov	r0, r7
    44b6:	f006 fc99 	bl	adec <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    44ba:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    44be:	f417 2f00 	tst.w	r7, #524288	; 0x80000
    44c2:	d01e      	beq.n	4502 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    44c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    44c8:	2101      	movs	r1, #1
    44ca:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    44ce:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    44d2:	2200      	movs	r2, #0
    44d4:	a901      	add	r1, sp, #4
    44d6:	4628      	mov	r0, r5
    44d8:	f002 f9aa 	bl	6830 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    44dc:	4b19      	ldr	r3, [pc, #100]	; (4544 <gpio_nrfx_pin_configure+0x100>)
    44de:	4298      	cmp	r0, r3
    44e0:	d006      	beq.n	44f0 <gpio_nrfx_pin_configure+0xac>
    44e2:	f06f 0615 	mvn.w	r6, #21
    44e6:	e003      	b.n	44f0 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    44e8:	4628      	mov	r0, r5
    44ea:	f7ff ff87 	bl	43fc <pin_uninit>
    44ee:	4606      	mov	r6, r0
}
    44f0:	4630      	mov	r0, r6
    44f2:	b007      	add	sp, #28
    44f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    44f8:	f89d 0017 	ldrb.w	r0, [sp, #23]
    44fc:	f002 faf8 	bl	6af0 <nrfx_gpiote_channel_free>
    4500:	e7c3      	b.n	448a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4502:	f417 2f80 	tst.w	r7, #262144	; 0x40000
    4506:	d0e4      	beq.n	44d2 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4508:	f8d8 2004 	ldr.w	r2, [r8, #4]
    450c:	2301      	movs	r3, #1
    450e:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    4512:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    4516:	e7dc      	b.n	44d2 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    4518:	4638      	mov	r0, r7
    451a:	f006 fc67 	bl	adec <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    451e:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4522:	2300      	movs	r3, #0
    4524:	461a      	mov	r2, r3
    4526:	a902      	add	r1, sp, #8
    4528:	4628      	mov	r0, r5
    452a:	f002 f88d 	bl	6648 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    452e:	4b05      	ldr	r3, [pc, #20]	; (4544 <gpio_nrfx_pin_configure+0x100>)
    4530:	4298      	cmp	r0, r3
    4532:	d101      	bne.n	4538 <gpio_nrfx_pin_configure+0xf4>
    4534:	2600      	movs	r6, #0
    4536:	e7db      	b.n	44f0 <gpio_nrfx_pin_configure+0xac>
    4538:	f06f 0615 	mvn.w	r6, #21
    453c:	e7d8      	b.n	44f0 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    453e:	f06f 0615 	mvn.w	r6, #21
    4542:	e7d5      	b.n	44f0 <gpio_nrfx_pin_configure+0xac>
    4544:	0bad0000 	.word	0x0bad0000

00004548 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4548:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    454a:	f002 fac7 	bl	6adc <nrfx_gpiote_is_init>
    454e:	b108      	cbz	r0, 4554 <gpio_nrfx_init+0xc>
		return 0;
    4550:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4552:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    4554:	f002 fa98 	bl	6a88 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4558:	4b08      	ldr	r3, [pc, #32]	; (457c <gpio_nrfx_init+0x34>)
    455a:	4298      	cmp	r0, r3
    455c:	d10a      	bne.n	4574 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    455e:	2100      	movs	r1, #0
    4560:	4807      	ldr	r0, [pc, #28]	; (4580 <gpio_nrfx_init+0x38>)
    4562:	f002 fa5f 	bl	6a24 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4566:	2200      	movs	r2, #0
    4568:	2105      	movs	r1, #5
    456a:	2006      	movs	r0, #6
    456c:	f7fe fc20 	bl	2db0 <z_arm_irq_priority_set>
	return 0;
    4570:	2000      	movs	r0, #0
    4572:	e7ee      	b.n	4552 <gpio_nrfx_init+0xa>
		return -EIO;
    4574:	f06f 0004 	mvn.w	r0, #4
    4578:	e7eb      	b.n	4552 <gpio_nrfx_init+0xa>
    457a:	bf00      	nop
    457c:	0bad0000 	.word	0x0bad0000
    4580:	00004241 	.word	0x00004241

00004584 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    4584:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    4586:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    4588:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    458c:	d06f      	beq.n	466e <baudrate_set+0xea>
    458e:	d83a      	bhi.n	4606 <baudrate_set+0x82>
    4590:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    4594:	d06e      	beq.n	4674 <baudrate_set+0xf0>
    4596:	d90a      	bls.n	45ae <baudrate_set+0x2a>
    4598:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    459c:	d075      	beq.n	468a <baudrate_set+0x106>
    459e:	d924      	bls.n	45ea <baudrate_set+0x66>
    45a0:	f647 2312 	movw	r3, #31250	; 0x7a12
    45a4:	4299      	cmp	r1, r3
    45a6:	d12b      	bne.n	4600 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    45a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    45ac:	e013      	b.n	45d6 <baudrate_set+0x52>
	switch (baudrate) {
    45ae:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    45b2:	d061      	beq.n	4678 <baudrate_set+0xf4>
    45b4:	d907      	bls.n	45c6 <baudrate_set+0x42>
    45b6:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    45ba:	d063      	beq.n	4684 <baudrate_set+0x100>
    45bc:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    45c0:	d110      	bne.n	45e4 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    45c2:	4b3c      	ldr	r3, [pc, #240]	; (46b4 <baudrate_set+0x130>)
    45c4:	e007      	b.n	45d6 <baudrate_set+0x52>
	switch (baudrate) {
    45c6:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    45ca:	d058      	beq.n	467e <baudrate_set+0xfa>
    45cc:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    45d0:	d105      	bne.n	45de <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    45d2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    45d6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    45da:	2000      	movs	r0, #0
    45dc:	4770      	bx	lr
	switch (baudrate) {
    45de:	f06f 0015 	mvn.w	r0, #21
    45e2:	4770      	bx	lr
    45e4:	f06f 0015 	mvn.w	r0, #21
    45e8:	4770      	bx	lr
    45ea:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    45ee:	d04e      	beq.n	468e <baudrate_set+0x10a>
    45f0:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    45f4:	d101      	bne.n	45fa <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    45f6:	4b30      	ldr	r3, [pc, #192]	; (46b8 <baudrate_set+0x134>)
    45f8:	e7ed      	b.n	45d6 <baudrate_set+0x52>
	switch (baudrate) {
    45fa:	f06f 0015 	mvn.w	r0, #21
    45fe:	4770      	bx	lr
    4600:	f06f 0015 	mvn.w	r0, #21
    4604:	4770      	bx	lr
    4606:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    460a:	d042      	beq.n	4692 <baudrate_set+0x10e>
    460c:	d909      	bls.n	4622 <baudrate_set+0x9e>
    460e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    4612:	d046      	beq.n	46a2 <baudrate_set+0x11e>
    4614:	d91f      	bls.n	4656 <baudrate_set+0xd2>
    4616:	4b29      	ldr	r3, [pc, #164]	; (46bc <baudrate_set+0x138>)
    4618:	4299      	cmp	r1, r3
    461a:	d148      	bne.n	46ae <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    461c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4620:	e7d9      	b.n	45d6 <baudrate_set+0x52>
	switch (baudrate) {
    4622:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    4626:	d037      	beq.n	4698 <baudrate_set+0x114>
    4628:	d905      	bls.n	4636 <baudrate_set+0xb2>
    462a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    462e:	d10f      	bne.n	4650 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    4630:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    4634:	e7cf      	b.n	45d6 <baudrate_set+0x52>
	switch (baudrate) {
    4636:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    463a:	4299      	cmp	r1, r3
    463c:	d02e      	beq.n	469c <baudrate_set+0x118>
    463e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    4642:	d102      	bne.n	464a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    4644:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    4648:	e7c5      	b.n	45d6 <baudrate_set+0x52>
	switch (baudrate) {
    464a:	f06f 0015 	mvn.w	r0, #21
    464e:	4770      	bx	lr
    4650:	f06f 0015 	mvn.w	r0, #21
    4654:	4770      	bx	lr
    4656:	4b1a      	ldr	r3, [pc, #104]	; (46c0 <baudrate_set+0x13c>)
    4658:	4299      	cmp	r1, r3
    465a:	d025      	beq.n	46a8 <baudrate_set+0x124>
    465c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    4660:	d102      	bne.n	4668 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    4662:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    4666:	e7b6      	b.n	45d6 <baudrate_set+0x52>
	switch (baudrate) {
    4668:	f06f 0015 	mvn.w	r0, #21
    466c:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    466e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    4672:	e7b0      	b.n	45d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4674:	4b13      	ldr	r3, [pc, #76]	; (46c4 <baudrate_set+0x140>)
    4676:	e7ae      	b.n	45d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4678:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    467c:	e7ab      	b.n	45d6 <baudrate_set+0x52>
	switch (baudrate) {
    467e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    4682:	e7a8      	b.n	45d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4684:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    4688:	e7a5      	b.n	45d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    468a:	4b0f      	ldr	r3, [pc, #60]	; (46c8 <baudrate_set+0x144>)
    468c:	e7a3      	b.n	45d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    468e:	4b0f      	ldr	r3, [pc, #60]	; (46cc <baudrate_set+0x148>)
    4690:	e7a1      	b.n	45d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4692:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4696:	e79e      	b.n	45d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4698:	4b0d      	ldr	r3, [pc, #52]	; (46d0 <baudrate_set+0x14c>)
    469a:	e79c      	b.n	45d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    469c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    46a0:	e799      	b.n	45d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    46a2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    46a6:	e796      	b.n	45d6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    46a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    46ac:	e793      	b.n	45d6 <baudrate_set+0x52>
	switch (baudrate) {
    46ae:	f06f 0015 	mvn.w	r0, #21
}
    46b2:	4770      	bx	lr
    46b4:	0013b000 	.word	0x0013b000
    46b8:	004ea000 	.word	0x004ea000
    46bc:	000f4240 	.word	0x000f4240
    46c0:	0003d090 	.word	0x0003d090
    46c4:	00275000 	.word	0x00275000
    46c8:	0075c000 	.word	0x0075c000
    46cc:	003af000 	.word	0x003af000
    46d0:	013a9000 	.word	0x013a9000

000046d4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    46d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    46d8:	4605      	mov	r5, r0
    46da:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = dev->data;
    46dc:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    46de:	f007 fa87 	bl	bbf0 <k_is_in_isr>
    46e2:	b920      	cbnz	r0, 46ee <uarte_nrfx_poll_out+0x1a>
	return !z_sys_post_kernel;
    46e4:	4b1e      	ldr	r3, [pc, #120]	; (4760 <uarte_nrfx_poll_out+0x8c>)
    46e6:	781b      	ldrb	r3, [r3, #0]
    46e8:	b1a3      	cbz	r3, 4714 <uarte_nrfx_poll_out+0x40>
    46ea:	2300      	movs	r3, #0
    46ec:	e000      	b.n	46f0 <uarte_nrfx_poll_out+0x1c>
    46ee:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    46f0:	b9b3      	cbnz	r3, 4720 <uarte_nrfx_poll_out+0x4c>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    46f2:	4628      	mov	r0, r5
    46f4:	f006 fd3e 	bl	b174 <wait_tx_ready>
    46f8:	4606      	mov	r6, r0
	}

	data->char_out = c;
    46fa:	4639      	mov	r1, r7
    46fc:	f801 8f14 	strb.w	r8, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    4700:	2201      	movs	r2, #1
    4702:	4628      	mov	r0, r5
    4704:	f006 fc59 	bl	afba <tx_start>
    4708:	f386 8811 	msr	BASEPRI, r6
    470c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    4710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4714:	2301      	movs	r3, #1
    4716:	e7eb      	b.n	46f0 <uarte_nrfx_poll_out+0x1c>
    4718:	f384 8811 	msr	BASEPRI, r4
    471c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    4720:	f04f 0320 	mov.w	r3, #32
    4724:	f3ef 8411 	mrs	r4, BASEPRI
    4728:	f383 8812 	msr	BASEPRI_MAX, r3
    472c:	f3bf 8f6f 	isb	sy
			key = irq_lock();
    4730:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    4732:	4628      	mov	r0, r5
    4734:	f006 fc1f 	bl	af76 <is_tx_ready>
    4738:	2800      	cmp	r0, #0
    473a:	d0ed      	beq.n	4718 <uarte_nrfx_poll_out+0x44>
				if (data->async && data->async->tx_size &&
    473c:	68fb      	ldr	r3, [r7, #12]
    473e:	2b00      	cmp	r3, #0
    4740:	d0db      	beq.n	46fa <uarte_nrfx_poll_out+0x26>
    4742:	68da      	ldr	r2, [r3, #12]
    4744:	2a00      	cmp	r2, #0
    4746:	d0d8      	beq.n	46fa <uarte_nrfx_poll_out+0x26>
					data->async->tx_amount < 0) {
    4748:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    474c:	2a00      	cmp	r2, #0
    474e:	dad4      	bge.n	46fa <uarte_nrfx_poll_out+0x26>
	const struct uarte_nrfx_config *config = dev->config;
    4750:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    4752:	6812      	ldr	r2, [r2, #0]
    p_reg->TXD.MAXCNT = length;
}

NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
    4754:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    4758:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    475c:	e7cd      	b.n	46fa <uarte_nrfx_poll_out+0x26>
    475e:	bf00      	nop
    4760:	20005452 	.word	0x20005452

00004764 <uarte_nrfx_rx_enable>:
{
    4764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4768:	4616      	mov	r6, r2
	struct uarte_nrfx_data *data = dev->data;
    476a:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *cfg = dev->config;
    476c:	f8d0 9004 	ldr.w	r9, [r0, #4]
	return config->uarte_regs;
    4770:	f8d9 5000 	ldr.w	r5, [r9]
	if (cfg->disable_rx) {
    4774:	f899 2008 	ldrb.w	r2, [r9, #8]
    4778:	b992      	cbnz	r2, 47a0 <uarte_nrfx_rx_enable+0x3c>
    477a:	4680      	mov	r8, r0
    477c:	460f      	mov	r7, r1
	if (data->async->rx_enabled) {
    477e:	68e2      	ldr	r2, [r4, #12]
    4780:	f892 10d2 	ldrb.w	r1, [r2, #210]	; 0xd2
    4784:	2900      	cmp	r1, #0
    4786:	f040 8084 	bne.w	4892 <uarte_nrfx_rx_enable+0x12e>
	data->async->rx_timeout = timeout;
    478a:	67d3      	str	r3, [r2, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    478c:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
    4790:	dd19      	ble.n	47c6 <uarte_nrfx_rx_enable+0x62>
    4792:	4a41      	ldr	r2, [pc, #260]	; (4898 <uarte_nrfx_rx_enable+0x134>)
    4794:	fb82 1203 	smull	r1, r2, r2, r3
    4798:	17db      	asrs	r3, r3, #31
    479a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    479e:	e013      	b.n	47c8 <uarte_nrfx_rx_enable+0x64>
		__ASSERT(false, "TX only UARTE instance");
    47a0:	4c3e      	ldr	r4, [pc, #248]	; (489c <uarte_nrfx_rx_enable+0x138>)
    47a2:	f240 337f 	movw	r3, #895	; 0x37f
    47a6:	4622      	mov	r2, r4
    47a8:	493d      	ldr	r1, [pc, #244]	; (48a0 <uarte_nrfx_rx_enable+0x13c>)
    47aa:	483e      	ldr	r0, [pc, #248]	; (48a4 <uarte_nrfx_rx_enable+0x140>)
    47ac:	f006 f8a6 	bl	a8fc <assert_print>
    47b0:	483d      	ldr	r0, [pc, #244]	; (48a8 <uarte_nrfx_rx_enable+0x144>)
    47b2:	f006 f8a3 	bl	a8fc <assert_print>
    47b6:	f240 317f 	movw	r1, #895	; 0x37f
    47ba:	4620      	mov	r0, r4
    47bc:	f006 f897 	bl	a8ee <assert_post_action>
		return -ENOTSUP;
    47c0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    47c4:	e03d      	b.n	4842 <uarte_nrfx_rx_enable+0xde>
		MAX(timeout / RX_TIMEOUT_DIV,
    47c6:	235c      	movs	r3, #92	; 0x5c
	data->async->rx_timeout_slab =
    47c8:	68e2      	ldr	r2, [r4, #12]
    47ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	data->async->rx_buf = buf;
    47ce:	68e3      	ldr	r3, [r4, #12]
    47d0:	661f      	str	r7, [r3, #96]	; 0x60
	data->async->rx_buf_len = len;
    47d2:	68e3      	ldr	r3, [r4, #12]
    47d4:	665e      	str	r6, [r3, #100]	; 0x64
	data->async->rx_offset = 0;
    47d6:	68e2      	ldr	r2, [r4, #12]
    47d8:	2300      	movs	r3, #0
    47da:	6693      	str	r3, [r2, #104]	; 0x68
	data->async->rx_next_buf = NULL;
    47dc:	68e2      	ldr	r2, [r4, #12]
    47de:	66d3      	str	r3, [r2, #108]	; 0x6c
	data->async->rx_next_buf_len = 0;
    47e0:	68e2      	ldr	r2, [r4, #12]
    47e2:	6713      	str	r3, [r2, #112]	; 0x70
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    47e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
    47e8:	f013 0f10 	tst.w	r3, #16
    47ec:	d010      	beq.n	4810 <uarte_nrfx_rx_enable+0xac>
		if (data->async->rx_flush_cnt) {
    47ee:	68e1      	ldr	r1, [r4, #12]
    47f0:	f891 30d1 	ldrb.w	r3, [r1, #209]	; 0xd1
    47f4:	b163      	cbz	r3, 4810 <uarte_nrfx_rx_enable+0xac>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    47f6:	42b3      	cmp	r3, r6
    47f8:	bf28      	it	cs
    47fa:	4633      	movcs	r3, r6
    47fc:	469a      	mov	sl, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    47fe:	461a      	mov	r2, r3
    4800:	31cc      	adds	r1, #204	; 0xcc
    4802:	4638      	mov	r0, r7
    4804:	f007 faaa 	bl	bd5c <memcpy>
			buf += cpy_len;
    4808:	4457      	add	r7, sl
			if (!len) {
    480a:	ebb6 060a 	subs.w	r6, r6, sl
    480e:	d01a      	beq.n	4846 <uarte_nrfx_rx_enable+0xe2>

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4810:	f8c5 7534 	str.w	r7, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4814:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4818:	2300      	movs	r3, #0
    481a:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    481e:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    4822:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
    4826:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	data->async->rx_enabled = true;
    482a:	68e3      	ldr	r3, [r4, #12]
    482c:	2201      	movs	r2, #1
    482e:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4832:	f8d9 3004 	ldr.w	r3, [r9, #4]
    4836:	f013 0f10 	tst.w	r3, #16
    483a:	d119      	bne.n	4870 <uarte_nrfx_rx_enable+0x10c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    483c:	2301      	movs	r3, #1
    483e:	602b      	str	r3, [r5, #0]
	return 0;
    4840:	2000      	movs	r0, #0
}
    4842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				data->async->rx_flush_cnt -= cpy_len;
    4846:	68e2      	ldr	r2, [r4, #12]
    4848:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    484c:	eba3 030a 	sub.w	r3, r3, sl
    4850:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    4854:	4651      	mov	r1, sl
    4856:	4640      	mov	r0, r8
    4858:	f006 fbfe 	bl	b058 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    485c:	68e1      	ldr	r1, [r4, #12]
    485e:	3160      	adds	r1, #96	; 0x60
    4860:	4640      	mov	r0, r8
    4862:	f006 fc11 	bl	b088 <rx_buf_release>
				notify_rx_disable(dev);
    4866:	4640      	mov	r0, r8
    4868:	f006 fc25 	bl	b0b6 <notify_rx_disable>
				return 0;
    486c:	2000      	movs	r0, #0
    486e:	e7e8      	b.n	4842 <uarte_nrfx_rx_enable+0xde>
    4870:	f04f 0320 	mov.w	r3, #32
    4874:	f3ef 8411 	mrs	r4, BASEPRI
    4878:	f383 8812 	msr	BASEPRI_MAX, r3
    487c:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
    4880:	2102      	movs	r1, #2
    4882:	4640      	mov	r0, r8
    4884:	f006 fb8b 	bl	af9e <uarte_enable>
	__asm__ volatile(
    4888:	f384 8811 	msr	BASEPRI, r4
    488c:	f3bf 8f6f 	isb	sy
}
    4890:	e7d4      	b.n	483c <uarte_nrfx_rx_enable+0xd8>
		return -EBUSY;
    4892:	f06f 000f 	mvn.w	r0, #15
    4896:	e7d4      	b.n	4842 <uarte_nrfx_rx_enable+0xde>
    4898:	66666667 	.word	0x66666667
    489c:	0000d590 	.word	0x0000d590
    48a0:	0000c914 	.word	0x0000c914
    48a4:	0000c254 	.word	0x0000c254
    48a8:	0000d5c4 	.word	0x0000d5c4

000048ac <uarte_nrfx_tx>:
{
    48ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    48b0:	b083      	sub	sp, #12
    48b2:	4605      	mov	r5, r0
    48b4:	4698      	mov	r8, r3
	struct uarte_nrfx_data *data = dev->data;
    48b6:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    48b8:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    48ba:	6833      	ldr	r3, [r6, #0]
	__asm__ volatile(
    48bc:	f04f 0020 	mov.w	r0, #32
    48c0:	f3ef 8911 	mrs	r9, BASEPRI
    48c4:	f380 8812 	msr	BASEPRI_MAX, r0
    48c8:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
    48cc:	68e6      	ldr	r6, [r4, #12]
    48ce:	68f7      	ldr	r7, [r6, #12]
    48d0:	b9f7      	cbnz	r7, 4910 <uarte_nrfx_tx+0x64>
	data->async->tx_size = len;
    48d2:	60f2      	str	r2, [r6, #12]
	data->async->tx_buf = buf;
    48d4:	68e0      	ldr	r0, [r4, #12]
    48d6:	6081      	str	r1, [r0, #8]
    p_reg->INTENSET = mask;
    48d8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    48dc:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    48e0:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    48e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    48e8:	d119      	bne.n	491e <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
    48ea:	68e3      	ldr	r3, [r4, #12]
    48ec:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
    48ee:	68e3      	ldr	r3, [r4, #12]
    48f0:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
    48f2:	4621      	mov	r1, r4
    48f4:	4628      	mov	r0, r5
    48f6:	f006 fb8c 	bl	b012 <start_tx_locked>
	__asm__ volatile(
    48fa:	f389 8811 	msr	BASEPRI, r9
    48fe:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    4902:	7ae3      	ldrb	r3, [r4, #11]
    4904:	2b01      	cmp	r3, #1
    4906:	d011      	beq.n	492c <uarte_nrfx_tx+0x80>
	return 0;
    4908:	2000      	movs	r0, #0
}
    490a:	b003      	add	sp, #12
    490c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4910:	f389 8811 	msr	BASEPRI, r9
    4914:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    4918:	f06f 000f 	mvn.w	r0, #15
    491c:	e7f5      	b.n	490a <uarte_nrfx_tx+0x5e>
		data->async->tx_cache_offset = 0;
    491e:	68e3      	ldr	r3, [r4, #12]
    4920:	2200      	movs	r2, #0
    4922:	621a      	str	r2, [r3, #32]
		(void)setup_tx_cache(data);
    4924:	4620      	mov	r0, r4
    4926:	f006 fd64 	bl	b3f2 <setup_tx_cache>
    492a:	e7e2      	b.n	48f2 <uarte_nrfx_tx+0x46>
	    && timeout != SYS_FOREVER_US) {
    492c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    4930:	d101      	bne.n	4936 <uarte_nrfx_tx+0x8a>
	return 0;
    4932:	2000      	movs	r0, #0
    4934:	e7e9      	b.n	490a <uarte_nrfx_tx+0x5e>
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    4936:	68e4      	ldr	r4, [r4, #12]
    4938:	3428      	adds	r4, #40	; 0x28
    493a:	ea28 70e8 	bic.w	r0, r8, r8, asr #31
    493e:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    4940:	03c9      	lsls	r1, r1, #15
    4942:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    4946:	03c0      	lsls	r0, r0, #15
    4948:	4b09      	ldr	r3, [pc, #36]	; (4970 <uarte_nrfx_tx+0xc4>)
    494a:	18c0      	adds	r0, r0, r3
    494c:	4a09      	ldr	r2, [pc, #36]	; (4974 <uarte_nrfx_tx+0xc8>)
    494e:	f04f 0300 	mov.w	r3, #0
    4952:	f141 0100 	adc.w	r1, r1, #0
    4956:	f7fb fbd3 	bl	100 <__aeabi_uldivmod>
    495a:	4602      	mov	r2, r0
    495c:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    495e:	2000      	movs	r0, #0
    4960:	2100      	movs	r1, #0
    4962:	e9cd 0100 	strd	r0, r1, [sp]
    4966:	4620      	mov	r0, r4
    4968:	f005 fab0 	bl	9ecc <z_impl_k_timer_start>
	return 0;
    496c:	2000      	movs	r0, #0
    496e:	e7cc      	b.n	490a <uarte_nrfx_tx+0x5e>
    4970:	000f423f 	.word	0x000f423f
    4974:	000f4240 	.word	0x000f4240

00004978 <rxstarted_isr>:
{
    4978:	b510      	push	{r4, lr}
    497a:	b088      	sub	sp, #32
	struct uarte_nrfx_data *data = dev->data;
    497c:	6904      	ldr	r4, [r0, #16]
	struct uart_event evt = {
    497e:	2300      	movs	r3, #0
    4980:	9303      	str	r3, [sp, #12]
    4982:	9304      	str	r3, [sp, #16]
    4984:	9305      	str	r3, [sp, #20]
    4986:	9306      	str	r3, [sp, #24]
    4988:	9307      	str	r3, [sp, #28]
    498a:	2303      	movs	r3, #3
    498c:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    4990:	a903      	add	r1, sp, #12
    4992:	f006 fb59 	bl	b048 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    4996:	68e3      	ldr	r3, [r4, #12]
    4998:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    499a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    499e:	d101      	bne.n	49a4 <rxstarted_isr+0x2c>
}
    49a0:	b008      	add	sp, #32
    49a2:	bd10      	pop	{r4, pc}
		data->async->rx_timeout_left = data->async->rx_timeout;
    49a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		k_timer_start(&data->async->rx_timeout_timer,
    49a8:	68e3      	ldr	r3, [r4, #12]
    49aa:	f103 0488 	add.w	r4, r3, #136	; 0x88
			      K_USEC(data->async->rx_timeout_slab),
    49ae:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    49b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    49b6:	17c1      	asrs	r1, r0, #31
    49b8:	03c9      	lsls	r1, r1, #15
    49ba:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    49be:	03c0      	lsls	r0, r0, #15
    49c0:	4b08      	ldr	r3, [pc, #32]	; (49e4 <rxstarted_isr+0x6c>)
    49c2:	18c0      	adds	r0, r0, r3
    49c4:	4a08      	ldr	r2, [pc, #32]	; (49e8 <rxstarted_isr+0x70>)
    49c6:	f04f 0300 	mov.w	r3, #0
    49ca:	f141 0100 	adc.w	r1, r1, #0
    49ce:	f7fb fb97 	bl	100 <__aeabi_uldivmod>
    49d2:	4602      	mov	r2, r0
    49d4:	460b      	mov	r3, r1
    49d6:	9000      	str	r0, [sp, #0]
    49d8:	9101      	str	r1, [sp, #4]
    49da:	4620      	mov	r0, r4
    49dc:	f005 fa76 	bl	9ecc <z_impl_k_timer_start>
}
    49e0:	e7de      	b.n	49a0 <rxstarted_isr+0x28>
    49e2:	bf00      	nop
    49e4:	000f423f 	.word	0x000f423f
    49e8:	000f4240 	.word	0x000f4240

000049ec <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    49ec:	b530      	push	{r4, r5, lr}
    49ee:	b085      	sub	sp, #20
    49f0:	4604      	mov	r4, r0
    49f2:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    49f4:	f101 0016 	add.w	r0, r1, #22
    49f8:	f002 fa8a 	bl	6f10 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    49fc:	4b11      	ldr	r3, [pc, #68]	; (4a44 <endtx_stoptx_ppi_init+0x58>)
    49fe:	4298      	cmp	r0, r3
    4a00:	d112      	bne.n	4a28 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    4a02:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4a04:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    4a08:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    4a0a:	4a0f      	ldr	r2, [pc, #60]	; (4a48 <endtx_stoptx_ppi_init+0x5c>)
    4a0c:	33a2      	adds	r3, #162	; 0xa2
    4a0e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    4a12:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4a16:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4a18:	7da9      	ldrb	r1, [r5, #22]
    4a1a:	2301      	movs	r3, #1
    4a1c:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    4a1e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    4a22:	2000      	movs	r0, #0
}
    4a24:	b005      	add	sp, #20
    4a26:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    4a28:	4b08      	ldr	r3, [pc, #32]	; (4a4c <endtx_stoptx_ppi_init+0x60>)
    4a2a:	9302      	str	r3, [sp, #8]
    4a2c:	2000      	movs	r0, #0
    4a2e:	9001      	str	r0, [sp, #4]
    4a30:	9000      	str	r0, [sp, #0]
    4a32:	4603      	mov	r3, r0
    4a34:	2201      	movs	r2, #1
    4a36:	4906      	ldr	r1, [pc, #24]	; (4a50 <endtx_stoptx_ppi_init+0x64>)
    4a38:	f006 fcf4 	bl	b424 <z_log_msg2_runtime_create>
		return -EIO;
    4a3c:	f06f 0004 	mvn.w	r0, #4
    4a40:	e7f0      	b.n	4a24 <endtx_stoptx_ppi_init+0x38>
    4a42:	bf00      	nop
    4a44:	0bad0000 	.word	0x0bad0000
    4a48:	4001f000 	.word	0x4001f000
    4a4c:	0000d5e0 	.word	0x0000d5e0
    4a50:	0000c0a0 	.word	0x0000c0a0

00004a54 <uarte_nrfx_init>:
{
    4a54:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = dev->data;
    4a56:	6905      	ldr	r5, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    4a58:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    4a5a:	681c      	ldr	r4, [r3, #0]
	int ret = uarte_nrfx_rx_counting_init(dev);
    4a5c:	f006 fad2 	bl	b004 <uarte_nrfx_rx_counting_init>
	if (ret != 0) {
    4a60:	4606      	mov	r6, r0
    4a62:	bb90      	cbnz	r0, 4aca <uarte_nrfx_init+0x76>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    4a64:	68eb      	ldr	r3, [r5, #12]
    4a66:	2201      	movs	r2, #1
    4a68:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    p_reg->INTENSET = mask;
    4a6c:	4b18      	ldr	r3, [pc, #96]	; (4ad0 <uarte_nrfx_init+0x7c>)
    4a6e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4a72:	2308      	movs	r3, #8
    4a74:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4a78:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    4a7c:	b1a3      	cbz	r3, 4aa8 <uarte_nrfx_init+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a7e:	6062      	str	r2, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4a80:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    4a84:	b91b      	cbnz	r3, 4a8e <uarte_nrfx_init+0x3a>
    4a86:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    4a8a:	2b00      	cmp	r3, #0
    4a8c:	d0f8      	beq.n	4a80 <uarte_nrfx_init+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a8e:	2300      	movs	r3, #0
    4a90:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    4a94:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
    4a98:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    4a9c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    4aa0:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    4aa4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    4aa8:	68e8      	ldr	r0, [r5, #12]
    4aaa:	2200      	movs	r2, #0
    4aac:	4909      	ldr	r1, [pc, #36]	; (4ad4 <uarte_nrfx_init+0x80>)
    4aae:	3088      	adds	r0, #136	; 0x88
    4ab0:	f007 f925 	bl	bcfe <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    4ab4:	68eb      	ldr	r3, [r5, #12]
	timer->user_data = user_data;
    4ab6:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    4aba:	68e8      	ldr	r0, [r5, #12]
    4abc:	2200      	movs	r2, #0
    4abe:	4906      	ldr	r1, [pc, #24]	; (4ad8 <uarte_nrfx_init+0x84>)
    4ac0:	3028      	adds	r0, #40	; 0x28
    4ac2:	f007 f91c 	bl	bcfe <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    4ac6:	68eb      	ldr	r3, [r5, #12]
    4ac8:	65dd      	str	r5, [r3, #92]	; 0x5c
}
    4aca:	4630      	mov	r0, r6
    4acc:	bd70      	pop	{r4, r5, r6, pc}
    4ace:	bf00      	nop
    4ad0:	000a0210 	.word	0x000a0210
    4ad4:	0000b299 	.word	0x0000b299
    4ad8:	0000b28d 	.word	0x0000b28d

00004adc <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4adc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    4ae0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    4ae4:	4b01      	ldr	r3, [pc, #4]	; (4aec <set_comparator+0x10>)
    4ae6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    4aea:	4770      	bx	lr
    4aec:	40011000 	.word	0x40011000

00004af0 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    4af0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    4af4:	4b01      	ldr	r3, [pc, #4]	; (4afc <get_comparator+0xc>)
    4af6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    4afa:	4770      	bx	lr
    4afc:	40011000 	.word	0x40011000

00004b00 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4b04:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    4b06:	4a02      	ldr	r2, [pc, #8]	; (4b10 <event_enable+0x10>)
    4b08:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    4b0c:	4770      	bx	lr
    4b0e:	bf00      	nop
    4b10:	40011000 	.word	0x40011000

00004b14 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4b18:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4b1a:	4a02      	ldr	r2, [pc, #8]	; (4b24 <event_disable+0x10>)
    4b1c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    4b20:	4770      	bx	lr
    4b22:	bf00      	nop
    4b24:	40011000 	.word	0x40011000

00004b28 <counter>:
     return p_reg->COUNTER;
    4b28:	4b01      	ldr	r3, [pc, #4]	; (4b30 <counter+0x8>)
    4b2a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    4b2e:	4770      	bx	lr
    4b30:	40011000 	.word	0x40011000

00004b34 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    4b34:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    4b36:	2301      	movs	r3, #1
    4b38:	4083      	lsls	r3, r0
    4b3a:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4b3e:	4a10      	ldr	r2, [pc, #64]	; (4b80 <compare_int_lock+0x4c>)
    4b40:	f3bf 8f5b 	dmb	ish
    4b44:	e852 1f00 	ldrex	r1, [r2]
    4b48:	ea01 0e0c 	and.w	lr, r1, ip
    4b4c:	e842 e400 	strex	r4, lr, [r2]
    4b50:	2c00      	cmp	r4, #0
    4b52:	d1f7      	bne.n	4b44 <compare_int_lock+0x10>
    4b54:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4b5c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    4b60:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4b64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    4b68:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4b6c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4b70:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    4b74:	420b      	tst	r3, r1
}
    4b76:	bf14      	ite	ne
    4b78:	2001      	movne	r0, #1
    4b7a:	2000      	moveq	r0, #0
    4b7c:	bd10      	pop	{r4, pc}
    4b7e:	bf00      	nop
    4b80:	20004d4c 	.word	0x20004d4c

00004b84 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    4b84:	b570      	push	{r4, r5, r6, lr}
    4b86:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    4b88:	f006 fe7a 	bl	b880 <full_int_lock>
    4b8c:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4b8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4b92:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    4b94:	4a17      	ldr	r2, [pc, #92]	; (4bf4 <channel_processing_check_and_clear+0x70>)
    4b96:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    4b9a:	4213      	tst	r3, r2
    4b9c:	d105      	bne.n	4baa <channel_processing_check_and_clear+0x26>
	bool result = false;
    4b9e:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    4ba0:	4628      	mov	r0, r5
    4ba2:	f006 fe76 	bl	b892 <full_int_unlock>

	return result;
}
    4ba6:	4630      	mov	r0, r6
    4ba8:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4baa:	2301      	movs	r3, #1
    4bac:	40a3      	lsls	r3, r4
    4bae:	43db      	mvns	r3, r3
    4bb0:	4a11      	ldr	r2, [pc, #68]	; (4bf8 <channel_processing_check_and_clear+0x74>)
    4bb2:	f3bf 8f5b 	dmb	ish
    4bb6:	e852 1f00 	ldrex	r1, [r2]
    4bba:	ea01 0003 	and.w	r0, r1, r3
    4bbe:	e842 0600 	strex	r6, r0, [r2]
    4bc2:	2e00      	cmp	r6, #0
    4bc4:	d1f7      	bne.n	4bb6 <channel_processing_check_and_clear+0x32>
    4bc6:	f3bf 8f5b 	dmb	ish
    4bca:	b959      	cbnz	r1, 4be4 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4bcc:	f104 0350 	add.w	r3, r4, #80	; 0x50
    4bd0:	009b      	lsls	r3, r3, #2
    4bd2:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4bd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4bd8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    4bdc:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4bde:	b113      	cbz	r3, 4be6 <channel_processing_check_and_clear+0x62>
    4be0:	2301      	movs	r3, #1
    4be2:	e000      	b.n	4be6 <channel_processing_check_and_clear+0x62>
    4be4:	2301      	movs	r3, #1
		if (result) {
    4be6:	461e      	mov	r6, r3
    4be8:	2b00      	cmp	r3, #0
    4bea:	d0d9      	beq.n	4ba0 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    4bec:	4620      	mov	r0, r4
    4bee:	f006 fe38 	bl	b862 <event_clear>
    4bf2:	e7d5      	b.n	4ba0 <channel_processing_check_and_clear+0x1c>
    4bf4:	40011000 	.word	0x40011000
    4bf8:	20004d48 	.word	0x20004d48

00004bfc <compare_int_unlock>:
	if (key) {
    4bfc:	b901      	cbnz	r1, 4c00 <compare_int_unlock+0x4>
}
    4bfe:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    4c00:	2301      	movs	r3, #1
    4c02:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4c04:	4a11      	ldr	r2, [pc, #68]	; (4c4c <compare_int_unlock+0x50>)
    4c06:	f3bf 8f5b 	dmb	ish
    4c0a:	e852 1f00 	ldrex	r1, [r2]
    4c0e:	4319      	orrs	r1, r3
    4c10:	e842 1c00 	strex	ip, r1, [r2]
    4c14:	f1bc 0f00 	cmp.w	ip, #0
    4c18:	d1f7      	bne.n	4c0a <compare_int_unlock+0xe>
    4c1a:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4c22:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    4c24:	4a0a      	ldr	r2, [pc, #40]	; (4c50 <compare_int_unlock+0x54>)
    4c26:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4c2a:	f3bf 8f5b 	dmb	ish
    4c2e:	4b09      	ldr	r3, [pc, #36]	; (4c54 <compare_int_unlock+0x58>)
    4c30:	681b      	ldr	r3, [r3, #0]
    4c32:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    4c36:	fa23 f000 	lsr.w	r0, r3, r0
    4c3a:	f010 0f01 	tst.w	r0, #1
    4c3e:	d0de      	beq.n	4bfe <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c40:	4b05      	ldr	r3, [pc, #20]	; (4c58 <compare_int_unlock+0x5c>)
    4c42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4c46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    4c4a:	e7d8      	b.n	4bfe <compare_int_unlock+0x2>
    4c4c:	20004d4c 	.word	0x20004d4c
    4c50:	40011000 	.word	0x40011000
    4c54:	20004d48 	.word	0x20004d48
    4c58:	e000e100 	.word	0xe000e100

00004c5c <sys_clock_timeout_handler>:
{
    4c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c60:	4607      	mov	r7, r0
    4c62:	4614      	mov	r4, r2
    4c64:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    4c66:	4610      	mov	r0, r2
    4c68:	4619      	mov	r1, r3
    4c6a:	f006 fe06 	bl	b87a <absolute_time_to_cc>
    4c6e:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4c70:	4b15      	ldr	r3, [pc, #84]	; (4cc8 <sys_clock_timeout_handler+0x6c>)
    4c72:	681a      	ldr	r2, [r3, #0]
    4c74:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    4c76:	601c      	str	r4, [r3, #0]
    4c78:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4c7a:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    4c7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    4c82:	d309      	bcc.n	4c98 <sys_clock_timeout_handler+0x3c>
	return false;
    4c84:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4c86:	f004 ff35 	bl	9af4 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    4c8a:	4638      	mov	r0, r7
    4c8c:	f7ff ff30 	bl	4af0 <get_comparator>
    4c90:	42a8      	cmp	r0, r5
    4c92:	d00e      	beq.n	4cb2 <sys_clock_timeout_handler+0x56>
}
    4c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4c98:	4b0c      	ldr	r3, [pc, #48]	; (4ccc <sys_clock_timeout_handler+0x70>)
    4c9a:	681b      	ldr	r3, [r3, #0]
    4c9c:	0a1a      	lsrs	r2, r3, #8
    4c9e:	061b      	lsls	r3, r3, #24
    4ca0:	eb15 0803 	adds.w	r8, r5, r3
    4ca4:	f142 0900 	adc.w	r9, r2, #0
    4ca8:	4b09      	ldr	r3, [pc, #36]	; (4cd0 <sys_clock_timeout_handler+0x74>)
    4caa:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    4cae:	2401      	movs	r4, #1
    4cb0:	e7e9      	b.n	4c86 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    4cb2:	b11c      	cbz	r4, 4cbc <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    4cb4:	4638      	mov	r0, r7
    4cb6:	f7ff ff23 	bl	4b00 <event_enable>
}
    4cba:	e7eb      	b.n	4c94 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    4cbc:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    4cc0:	4638      	mov	r0, r7
    4cc2:	f7ff ff0b 	bl	4adc <set_comparator>
    4cc6:	e7f5      	b.n	4cb4 <sys_clock_timeout_handler+0x58>
    4cc8:	20004568 	.word	0x20004568
    4ccc:	20004d50 	.word	0x20004d50
    4cd0:	20004550 	.word	0x20004550

00004cd4 <z_nrf_rtc_timer_read>:
{
    4cd4:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4cd6:	4b0d      	ldr	r3, [pc, #52]	; (4d0c <z_nrf_rtc_timer_read+0x38>)
    4cd8:	681c      	ldr	r4, [r3, #0]
    4cda:	0a25      	lsrs	r5, r4, #8
    4cdc:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4cde:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    4ce2:	f7ff ff21 	bl	4b28 <counter>
    4ce6:	4603      	mov	r3, r0
	val += cntr;
    4ce8:	1900      	adds	r0, r0, r4
    4cea:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4cee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4cf2:	d20a      	bcs.n	4d0a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    4cf4:	4b06      	ldr	r3, [pc, #24]	; (4d10 <z_nrf_rtc_timer_read+0x3c>)
    4cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
    4cfa:	4290      	cmp	r0, r2
    4cfc:	eb71 0303 	sbcs.w	r3, r1, r3
    4d00:	d203      	bcs.n	4d0a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    4d02:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4d06:	f141 0100 	adc.w	r1, r1, #0
}
    4d0a:	bd38      	pop	{r3, r4, r5, pc}
    4d0c:	20004d50 	.word	0x20004d50
    4d10:	20004550 	.word	0x20004550

00004d14 <compare_set_nolocks>:
{
    4d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d16:	4606      	mov	r6, r0
    4d18:	4614      	mov	r4, r2
    4d1a:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    4d1c:	4610      	mov	r0, r2
    4d1e:	4619      	mov	r1, r3
    4d20:	f006 fdab 	bl	b87a <absolute_time_to_cc>
    4d24:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4d26:	f7ff ffd5 	bl	4cd4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4d2a:	42a0      	cmp	r0, r4
    4d2c:	eb71 0305 	sbcs.w	r3, r1, r5
    4d30:	d21d      	bcs.n	4d6e <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    4d32:	1a23      	subs	r3, r4, r0
    4d34:	eb65 0101 	sbc.w	r1, r5, r1
    4d38:	4a1b      	ldr	r2, [pc, #108]	; (4da8 <compare_set_nolocks+0x94>)
    4d3a:	4293      	cmp	r3, r2
    4d3c:	f171 0300 	sbcs.w	r3, r1, #0
    4d40:	d22f      	bcs.n	4da2 <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    4d42:	4b1a      	ldr	r3, [pc, #104]	; (4dac <compare_set_nolocks+0x98>)
    4d44:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    4d48:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    4d4c:	42ab      	cmp	r3, r5
    4d4e:	bf08      	it	eq
    4d50:	42a2      	cmpeq	r2, r4
    4d52:	d01a      	beq.n	4d8a <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    4d54:	4639      	mov	r1, r7
    4d56:	4630      	mov	r0, r6
    4d58:	f006 fda0 	bl	b89c <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    4d5c:	4639      	mov	r1, r7
    4d5e:	f006 fd7c 	bl	b85a <counter_sub>
    4d62:	1900      	adds	r0, r0, r4
    4d64:	f145 0300 	adc.w	r3, r5, #0
    4d68:	4604      	mov	r4, r0
    4d6a:	461d      	mov	r5, r3
    4d6c:	e00d      	b.n	4d8a <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    4d6e:	2301      	movs	r3, #1
    4d70:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4d72:	4a0f      	ldr	r2, [pc, #60]	; (4db0 <compare_set_nolocks+0x9c>)
    4d74:	f3bf 8f5b 	dmb	ish
    4d78:	e852 1f00 	ldrex	r1, [r2]
    4d7c:	4319      	orrs	r1, r3
    4d7e:	e842 1000 	strex	r0, r1, [r2]
    4d82:	2800      	cmp	r0, #0
    4d84:	d1f8      	bne.n	4d78 <compare_set_nolocks+0x64>
    4d86:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    4d8a:	4b08      	ldr	r3, [pc, #32]	; (4dac <compare_set_nolocks+0x98>)
    4d8c:	0132      	lsls	r2, r6, #4
    4d8e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    4d92:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    4d96:	9906      	ldr	r1, [sp, #24]
    4d98:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    4d9a:	9b07      	ldr	r3, [sp, #28]
    4d9c:	6073      	str	r3, [r6, #4]
	return ret;
    4d9e:	2000      	movs	r0, #0
}
    4da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    4da2:	f06f 0015 	mvn.w	r0, #21
    4da6:	e7fb      	b.n	4da0 <compare_set_nolocks+0x8c>
    4da8:	01000001 	.word	0x01000001
    4dac:	20004558 	.word	0x20004558
    4db0:	20004d48 	.word	0x20004d48

00004db4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    4db4:	b530      	push	{r4, r5, lr}
    4db6:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    4db8:	2300      	movs	r3, #0
    4dba:	4a1d      	ldr	r2, [pc, #116]	; (4e30 <sys_clock_driver_init+0x7c>)
    4dbc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4dc0:	2b00      	cmp	r3, #0
    4dc2:	dd24      	ble.n	4e0e <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    4dc4:	4c1a      	ldr	r4, [pc, #104]	; (4e30 <sys_clock_driver_init+0x7c>)
    4dc6:	2502      	movs	r5, #2
    4dc8:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4dcc:	4b19      	ldr	r3, [pc, #100]	; (4e34 <sys_clock_driver_init+0x80>)
    4dce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4dd2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4dd6:	2200      	movs	r2, #0
    4dd8:	2101      	movs	r1, #1
    4dda:	2011      	movs	r0, #17
    4ddc:	f7fd ffe8 	bl	2db0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4de0:	2011      	movs	r0, #17
    4de2:	f7fd ffc9 	bl	2d78 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4de6:	2301      	movs	r3, #1
    4de8:	60a3      	str	r3, [r4, #8]
    4dea:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4dec:	4a12      	ldr	r2, [pc, #72]	; (4e38 <sys_clock_driver_init+0x84>)
    4dee:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4df0:	2400      	movs	r4, #0
    4df2:	9401      	str	r4, [sp, #4]
    4df4:	4b11      	ldr	r3, [pc, #68]	; (4e3c <sys_clock_driver_init+0x88>)
    4df6:	9300      	str	r3, [sp, #0]
    4df8:	4a11      	ldr	r2, [pc, #68]	; (4e40 <sys_clock_driver_init+0x8c>)
    4dfa:	2300      	movs	r3, #0
    4dfc:	4620      	mov	r0, r4
    4dfe:	f006 fd88 	bl	b912 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4e02:	4628      	mov	r0, r5
    4e04:	f7ff f924 	bl	4050 <z_nrf_clock_control_lf_on>

	return 0;
}
    4e08:	4620      	mov	r0, r4
    4e0a:	b003      	add	sp, #12
    4e0c:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4e0e:	4a0d      	ldr	r2, [pc, #52]	; (4e44 <sys_clock_driver_init+0x90>)
    4e10:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    4e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4e18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4e1c:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4e20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4e24:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    4e26:	4902      	ldr	r1, [pc, #8]	; (4e30 <sys_clock_driver_init+0x7c>)
    4e28:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4e2c:	3301      	adds	r3, #1
    4e2e:	e7c7      	b.n	4dc0 <sys_clock_driver_init+0xc>
    4e30:	40011000 	.word	0x40011000
    4e34:	e000e100 	.word	0xe000e100
    4e38:	20004d4c 	.word	0x20004d4c
    4e3c:	00004c5d 	.word	0x00004c5d
    4e40:	007fffff 	.word	0x007fffff
    4e44:	20004558 	.word	0x20004558

00004e48 <process_channel>:
{
    4e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e4c:	b082      	sub	sp, #8
    4e4e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    4e50:	f7ff fe98 	bl	4b84 <channel_processing_check_and_clear>
    4e54:	b910      	cbnz	r0, 4e5c <process_channel+0x14>
}
    4e56:	b002      	add	sp, #8
    4e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    4e5c:	f7ff ff3a 	bl	4cd4 <z_nrf_rtc_timer_read>
    4e60:	4682      	mov	sl, r0
    4e62:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
    4e64:	f006 fd0c 	bl	b880 <full_int_lock>
    4e68:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
    4e6a:	4b13      	ldr	r3, [pc, #76]	; (4eb8 <process_channel+0x70>)
    4e6c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4e70:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    4e74:	45c2      	cmp	sl, r8
    4e76:	eb76 0309 	sbcs.w	r3, r6, r9
    4e7a:	d20b      	bcs.n	4e94 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4e7c:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    4e7e:	4628      	mov	r0, r5
    4e80:	f006 fd07 	bl	b892 <full_int_unlock>
		if (handler) {
    4e84:	2e00      	cmp	r6, #0
    4e86:	d0e6      	beq.n	4e56 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    4e88:	9700      	str	r7, [sp, #0]
    4e8a:	4642      	mov	r2, r8
    4e8c:	464b      	mov	r3, r9
    4e8e:	4620      	mov	r0, r4
    4e90:	47b0      	blx	r6
}
    4e92:	e7e0      	b.n	4e56 <process_channel+0xe>
			handler = cc_data[chan].callback;
    4e94:	4a08      	ldr	r2, [pc, #32]	; (4eb8 <process_channel+0x70>)
    4e96:	0123      	lsls	r3, r4, #4
    4e98:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    4e9c:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    4e9e:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    4ea0:	2000      	movs	r0, #0
    4ea2:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4eac:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    4eb0:	4620      	mov	r0, r4
    4eb2:	f7ff fe2f 	bl	4b14 <event_disable>
    4eb6:	e7e2      	b.n	4e7e <process_channel+0x36>
    4eb8:	20004558 	.word	0x20004558

00004ebc <rtc_nrf_isr>:
{
    4ebc:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    4ebe:	4b0e      	ldr	r3, [pc, #56]	; (4ef8 <rtc_nrf_isr+0x3c>)
    4ec0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4ec4:	f013 0f02 	tst.w	r3, #2
    4ec8:	d00d      	beq.n	4ee6 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4eca:	4b0b      	ldr	r3, [pc, #44]	; (4ef8 <rtc_nrf_isr+0x3c>)
    4ecc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    4ed0:	b14b      	cbz	r3, 4ee6 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4ed2:	4b09      	ldr	r3, [pc, #36]	; (4ef8 <rtc_nrf_isr+0x3c>)
    4ed4:	2200      	movs	r2, #0
    4ed6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4eda:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    4ede:	4a07      	ldr	r2, [pc, #28]	; (4efc <rtc_nrf_isr+0x40>)
    4ee0:	6813      	ldr	r3, [r2, #0]
    4ee2:	3301      	adds	r3, #1
    4ee4:	6013      	str	r3, [r2, #0]
{
    4ee6:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4ee8:	2c00      	cmp	r4, #0
    4eea:	dd00      	ble.n	4eee <rtc_nrf_isr+0x32>
}
    4eec:	bd10      	pop	{r4, pc}
		process_channel(chan);
    4eee:	4620      	mov	r0, r4
    4ef0:	f7ff ffaa 	bl	4e48 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4ef4:	3401      	adds	r4, #1
    4ef6:	e7f7      	b.n	4ee8 <rtc_nrf_isr+0x2c>
    4ef8:	40011000 	.word	0x40011000
    4efc:	20004d50 	.word	0x20004d50

00004f00 <sys_clock_set_timeout>:
{
    4f00:	b510      	push	{r4, lr}
    4f02:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4f04:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4f08:	d006      	beq.n	4f18 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4f0a:	2801      	cmp	r0, #1
    4f0c:	dd06      	ble.n	4f1c <sys_clock_set_timeout+0x1c>
    4f0e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4f12:	da05      	bge.n	4f20 <sys_clock_set_timeout+0x20>
    4f14:	1e44      	subs	r4, r0, #1
    4f16:	e004      	b.n	4f22 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4f18:	480f      	ldr	r0, [pc, #60]	; (4f58 <sys_clock_set_timeout+0x58>)
    4f1a:	e7f8      	b.n	4f0e <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4f1c:	2400      	movs	r4, #0
    4f1e:	e000      	b.n	4f22 <sys_clock_set_timeout+0x22>
    4f20:	4c0d      	ldr	r4, [pc, #52]	; (4f58 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4f22:	f7ff fed7 	bl	4cd4 <z_nrf_rtc_timer_read>
    4f26:	4b0d      	ldr	r3, [pc, #52]	; (4f5c <sys_clock_set_timeout+0x5c>)
    4f28:	6819      	ldr	r1, [r3, #0]
    4f2a:	685b      	ldr	r3, [r3, #4]
    4f2c:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
    4f2e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4f32:	d300      	bcc.n	4f36 <sys_clock_set_timeout+0x36>
		ticks = 0;
    4f34:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4f36:	4420      	add	r0, r4
    4f38:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
    4f3a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    4f3e:	d300      	bcc.n	4f42 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    4f40:	4a05      	ldr	r2, [pc, #20]	; (4f58 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    4f42:	2000      	movs	r0, #0
    4f44:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4f46:	9001      	str	r0, [sp, #4]
    4f48:	4905      	ldr	r1, [pc, #20]	; (4f60 <sys_clock_set_timeout+0x60>)
    4f4a:	9100      	str	r1, [sp, #0]
    4f4c:	f143 0300 	adc.w	r3, r3, #0
    4f50:	f006 fcdf 	bl	b912 <compare_set>
}
    4f54:	b002      	add	sp, #8
    4f56:	bd10      	pop	{r4, pc}
    4f58:	007fffff 	.word	0x007fffff
    4f5c:	20004568 	.word	0x20004568
    4f60:	00004c5d 	.word	0x00004c5d

00004f64 <sys_clock_elapsed>:
{
    4f64:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4f66:	f7ff feb5 	bl	4cd4 <z_nrf_rtc_timer_read>
    4f6a:	4b02      	ldr	r3, [pc, #8]	; (4f74 <sys_clock_elapsed+0x10>)
    4f6c:	681b      	ldr	r3, [r3, #0]
}
    4f6e:	1ac0      	subs	r0, r0, r3
    4f70:	bd08      	pop	{r3, pc}
    4f72:	bf00      	nop
    4f74:	20004568 	.word	0x20004568

00004f78 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    4f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4f7c:	460c      	mov	r4, r1
    4f7e:	4691      	mov	r9, r2
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    4f80:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    4f84:	d002      	beq.n	4f8c <nrf_pin_configure+0x14>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4f86:	f04f 0901 	mov.w	r9, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
    4f8a:	2400      	movs	r4, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    4f8c:	f000 053f 	and.w	r5, r0, #63	; 0x3f
    4f90:	f3c0 1881 	ubfx	r8, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
    4f94:	f3c0 2703 	ubfx	r7, r0, #8, #4
    uint32_t port = pin_number >> 5;
    4f98:	f3c0 1340 	ubfx	r3, r0, #5, #1
    switch (port)
    4f9c:	f010 0f20 	tst.w	r0, #32
    4fa0:	d01d      	beq.n	4fde <nrf_pin_configure+0x66>
    4fa2:	b1fb      	cbz	r3, 4fe4 <nrf_pin_configure+0x6c>
            mask = P1_FEATURE_PINS_PRESENT;
    4fa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    4fa8:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4fac:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4fae:	f013 0f01 	tst.w	r3, #1
    4fb2:	d019      	beq.n	4fe8 <nrf_pin_configure+0x70>
    *p_pin = pin_number & 0x1F;
    4fb4:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4fb8:	096d      	lsrs	r5, r5, #5
    4fba:	d023      	beq.n	5004 <nrf_pin_configure+0x8c>
    4fbc:	bb2d      	cbnz	r5, 500a <nrf_pin_configure+0x92>
            NRFX_ASSERT(0);
    4fbe:	4d19      	ldr	r5, [pc, #100]	; (5024 <nrf_pin_configure+0xac>)
    4fc0:	f240 232e 	movw	r3, #558	; 0x22e
    4fc4:	462a      	mov	r2, r5
    4fc6:	4918      	ldr	r1, [pc, #96]	; (5028 <nrf_pin_configure+0xb0>)
    4fc8:	4818      	ldr	r0, [pc, #96]	; (502c <nrf_pin_configure+0xb4>)
    4fca:	f005 fc97 	bl	a8fc <assert_print>
    4fce:	f240 212e 	movw	r1, #558	; 0x22e
    4fd2:	4628      	mov	r0, r5
    4fd4:	f005 fc8b 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    4fd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4fdc:	e016      	b.n	500c <nrf_pin_configure+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    4fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4fe2:	e7e1      	b.n	4fa8 <nrf_pin_configure+0x30>
    switch (port)
    4fe4:	2300      	movs	r3, #0
    4fe6:	e7df      	b.n	4fa8 <nrf_pin_configure+0x30>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4fe8:	4e0e      	ldr	r6, [pc, #56]	; (5024 <nrf_pin_configure+0xac>)
    4fea:	f240 2329 	movw	r3, #553	; 0x229
    4fee:	4632      	mov	r2, r6
    4ff0:	490f      	ldr	r1, [pc, #60]	; (5030 <nrf_pin_configure+0xb8>)
    4ff2:	480e      	ldr	r0, [pc, #56]	; (502c <nrf_pin_configure+0xb4>)
    4ff4:	f005 fc82 	bl	a8fc <assert_print>
    4ff8:	f240 2129 	movw	r1, #553	; 0x229
    4ffc:	4630      	mov	r0, r6
    4ffe:	f005 fc76 	bl	a8ee <assert_post_action>
    5002:	e7d7      	b.n	4fb4 <nrf_pin_configure+0x3c>
        case 0: return NRF_P0;
    5004:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5008:	e000      	b.n	500c <nrf_pin_configure+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    500a:	4b0a      	ldr	r3, [pc, #40]	; (5034 <nrf_pin_configure+0xbc>)
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    500c:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    5010:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5014:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    5018:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    501c:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
}
    5020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5024:	0000d4e4 	.word	0x0000d4e4
    5028:	0000c914 	.word	0x0000c914
    502c:	0000c254 	.word	0x0000c254
    5030:	0000d518 	.word	0x0000d518
    5034:	50000300 	.word	0x50000300

00005038 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    5038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    503c:	4605      	mov	r5, r0
    503e:	460e      	mov	r6, r1
    5040:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    5042:	2400      	movs	r4, #0
    5044:	e04e      	b.n	50e4 <pinctrl_configure_pins+0xac>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    5046:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    504a:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    504e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5052:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    5056:	f3c3 1140 	ubfx	r1, r3, #5, #1
    switch (port)
    505a:	f013 0f20 	tst.w	r3, #32
    505e:	d01f      	beq.n	50a0 <pinctrl_configure_pins+0x68>
    5060:	b109      	cbz	r1, 5066 <pinctrl_configure_pins+0x2e>
            mask = P1_FEATURE_PINS_PRESENT;
    5062:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5066:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    506a:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    506c:	f012 0f01 	tst.w	r2, #1
    5070:	d019      	beq.n	50a6 <pinctrl_configure_pins+0x6e>
    *p_pin = pin_number & 0x1F;
    5072:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5076:	ea5f 1359 	movs.w	r3, r9, lsr #5
    507a:	d023      	beq.n	50c4 <pinctrl_configure_pins+0x8c>
    507c:	bb2b      	cbnz	r3, 50ca <pinctrl_configure_pins+0x92>
            NRFX_ASSERT(0);
    507e:	f8df 9344 	ldr.w	r9, [pc, #836]	; 53c4 <pinctrl_configure_pins+0x38c>
    5082:	f240 232e 	movw	r3, #558	; 0x22e
    5086:	464a      	mov	r2, r9
    5088:	49cf      	ldr	r1, [pc, #828]	; (53c8 <pinctrl_configure_pins+0x390>)
    508a:	48d0      	ldr	r0, [pc, #832]	; (53cc <pinctrl_configure_pins+0x394>)
    508c:	f005 fc36 	bl	a8fc <assert_print>
    5090:	f240 212e 	movw	r1, #558	; 0x22e
    5094:	4648      	mov	r0, r9
    5096:	f005 fc2a 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    509a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    509e:	e015      	b.n	50cc <pinctrl_configure_pins+0x94>
            mask = P0_FEATURE_PINS_PRESENT;
    50a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    50a4:	e7df      	b.n	5066 <pinctrl_configure_pins+0x2e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    50a6:	f8df a31c 	ldr.w	sl, [pc, #796]	; 53c4 <pinctrl_configure_pins+0x38c>
    50aa:	f240 2329 	movw	r3, #553	; 0x229
    50ae:	4652      	mov	r2, sl
    50b0:	49c7      	ldr	r1, [pc, #796]	; (53d0 <pinctrl_configure_pins+0x398>)
    50b2:	48c6      	ldr	r0, [pc, #792]	; (53cc <pinctrl_configure_pins+0x394>)
    50b4:	f005 fc22 	bl	a8fc <assert_print>
    50b8:	f240 2129 	movw	r1, #553	; 0x229
    50bc:	4650      	mov	r0, sl
    50be:	f005 fc16 	bl	a8ee <assert_post_action>
    50c2:	e7d6      	b.n	5072 <pinctrl_configure_pins+0x3a>
        case 0: return NRF_P0;
    50c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    50c8:	e000      	b.n	50cc <pinctrl_configure_pins+0x94>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    50ca:	4ac2      	ldr	r2, [pc, #776]	; (53d4 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    50cc:	2101      	movs	r1, #1
    50ce:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    50d2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    50d6:	460a      	mov	r2, r1
    50d8:	f855 0008 	ldr.w	r0, [r5, r8]
    50dc:	f7ff ff4c 	bl	4f78 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    50e0:	3401      	adds	r4, #1
    50e2:	b2e4      	uxtb	r4, r4
    50e4:	42b4      	cmp	r4, r6
    50e6:	f080 841e 	bcs.w	5926 <pinctrl_configure_pins+0x8ee>
		switch (NRF_GET_FUN(pins[i])) {
    50ea:	ea4f 0884 	mov.w	r8, r4, lsl #2
    50ee:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    50f2:	0c1a      	lsrs	r2, r3, #16
    50f4:	2a22      	cmp	r2, #34	; 0x22
    50f6:	f200 8418 	bhi.w	592a <pinctrl_configure_pins+0x8f2>
    50fa:	a101      	add	r1, pc, #4	; (adr r1, 5100 <pinctrl_configure_pins+0xc8>)
    50fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    5100:	00005047 	.word	0x00005047
    5104:	0000518d 	.word	0x0000518d
    5108:	000051a3 	.word	0x000051a3
    510c:	00005243 	.word	0x00005243
    5110:	00005259 	.word	0x00005259
    5114:	000052f9 	.word	0x000052f9
    5118:	00005399 	.word	0x00005399
    511c:	0000592b 	.word	0x0000592b
    5120:	0000592b 	.word	0x0000592b
    5124:	0000592b 	.word	0x0000592b
    5128:	0000592b 	.word	0x0000592b
    512c:	000053af 	.word	0x000053af
    5130:	000053d9 	.word	0x000053d9
    5134:	0000592b 	.word	0x0000592b
    5138:	0000592b 	.word	0x0000592b
    513c:	0000592b 	.word	0x0000592b
    5140:	0000592b 	.word	0x0000592b
    5144:	0000592b 	.word	0x0000592b
    5148:	0000592b 	.word	0x0000592b
    514c:	0000592b 	.word	0x0000592b
    5150:	0000592b 	.word	0x0000592b
    5154:	0000592b 	.word	0x0000592b
    5158:	000053ef 	.word	0x000053ef
    515c:	00005515 	.word	0x00005515
    5160:	0000563b 	.word	0x0000563b
    5164:	00005777 	.word	0x00005777
    5168:	0000592b 	.word	0x0000592b
    516c:	0000592b 	.word	0x0000592b
    5170:	0000592b 	.word	0x0000592b
    5174:	0000589d 	.word	0x0000589d
    5178:	000058b3 	.word	0x000058b3
    517c:	000058c9 	.word	0x000058c9
    5180:	000058df 	.word	0x000058df
    5184:	000058f7 	.word	0x000058f7
    5188:	0000590f 	.word	0x0000590f
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    518c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5190:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5194:	2200      	movs	r2, #0
    5196:	4611      	mov	r1, r2
    5198:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    519c:	f7ff feec 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    51a0:	e79e      	b.n	50e0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    51a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    51a6:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    51aa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    51ae:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    51b2:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    51b6:	f013 0f20 	tst.w	r3, #32
    51ba:	d01f      	beq.n	51fc <pinctrl_configure_pins+0x1c4>
    51bc:	b30a      	cbz	r2, 5202 <pinctrl_configure_pins+0x1ca>
            mask = P1_FEATURE_PINS_PRESENT;
    51be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    51c2:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    51c6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    51c8:	f013 0f01 	tst.w	r3, #1
    51cc:	d01b      	beq.n	5206 <pinctrl_configure_pins+0x1ce>
    *p_pin = pin_number & 0x1F;
    51ce:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    51d2:	ea5f 1359 	movs.w	r3, r9, lsr #5
    51d6:	d025      	beq.n	5224 <pinctrl_configure_pins+0x1ec>
    51d8:	bb3b      	cbnz	r3, 522a <pinctrl_configure_pins+0x1f2>
            NRFX_ASSERT(0);
    51da:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 53c4 <pinctrl_configure_pins+0x38c>
    51de:	f240 232e 	movw	r3, #558	; 0x22e
    51e2:	464a      	mov	r2, r9
    51e4:	4978      	ldr	r1, [pc, #480]	; (53c8 <pinctrl_configure_pins+0x390>)
    51e6:	4879      	ldr	r0, [pc, #484]	; (53cc <pinctrl_configure_pins+0x394>)
    51e8:	f005 fb88 	bl	a8fc <assert_print>
    51ec:	f240 212e 	movw	r1, #558	; 0x22e
    51f0:	4648      	mov	r0, r9
    51f2:	f005 fb7c 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    51f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    51fa:	e017      	b.n	522c <pinctrl_configure_pins+0x1f4>
            mask = P0_FEATURE_PINS_PRESENT;
    51fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5200:	e7df      	b.n	51c2 <pinctrl_configure_pins+0x18a>
    switch (port)
    5202:	2300      	movs	r3, #0
    5204:	e7dd      	b.n	51c2 <pinctrl_configure_pins+0x18a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5206:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 53c4 <pinctrl_configure_pins+0x38c>
    520a:	f240 2329 	movw	r3, #553	; 0x229
    520e:	4652      	mov	r2, sl
    5210:	496f      	ldr	r1, [pc, #444]	; (53d0 <pinctrl_configure_pins+0x398>)
    5212:	486e      	ldr	r0, [pc, #440]	; (53cc <pinctrl_configure_pins+0x394>)
    5214:	f005 fb72 	bl	a8fc <assert_print>
    5218:	f240 2129 	movw	r1, #553	; 0x229
    521c:	4650      	mov	r0, sl
    521e:	f005 fb66 	bl	a8ee <assert_post_action>
    5222:	e7d4      	b.n	51ce <pinctrl_configure_pins+0x196>
        case 0: return NRF_P0;
    5224:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5228:	e000      	b.n	522c <pinctrl_configure_pins+0x1f4>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    522a:	4a6a      	ldr	r2, [pc, #424]	; (53d4 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    522c:	2101      	movs	r1, #1
    522e:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTSET = set_mask;
    5232:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5236:	460a      	mov	r2, r1
    5238:	f855 0008 	ldr.w	r0, [r5, r8]
    523c:	f7ff fe9c 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5240:	e74e      	b.n	50e0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    5242:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5246:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    524a:	2200      	movs	r2, #0
    524c:	4611      	mov	r1, r2
    524e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5252:	f7ff fe91 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    5256:	e743      	b.n	50e0 <pinctrl_configure_pins+0xa8>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    5258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    525c:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    5260:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5264:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    5268:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    526c:	f013 0f20 	tst.w	r3, #32
    5270:	d01f      	beq.n	52b2 <pinctrl_configure_pins+0x27a>
    5272:	b30a      	cbz	r2, 52b8 <pinctrl_configure_pins+0x280>
            mask = P1_FEATURE_PINS_PRESENT;
    5274:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5278:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    527c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    527e:	f013 0f01 	tst.w	r3, #1
    5282:	d01b      	beq.n	52bc <pinctrl_configure_pins+0x284>
    *p_pin = pin_number & 0x1F;
    5284:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5288:	ea5f 1359 	movs.w	r3, r9, lsr #5
    528c:	d025      	beq.n	52da <pinctrl_configure_pins+0x2a2>
    528e:	bb3b      	cbnz	r3, 52e0 <pinctrl_configure_pins+0x2a8>
            NRFX_ASSERT(0);
    5290:	f8df 9130 	ldr.w	r9, [pc, #304]	; 53c4 <pinctrl_configure_pins+0x38c>
    5294:	f240 232e 	movw	r3, #558	; 0x22e
    5298:	464a      	mov	r2, r9
    529a:	494b      	ldr	r1, [pc, #300]	; (53c8 <pinctrl_configure_pins+0x390>)
    529c:	484b      	ldr	r0, [pc, #300]	; (53cc <pinctrl_configure_pins+0x394>)
    529e:	f005 fb2d 	bl	a8fc <assert_print>
    52a2:	f240 212e 	movw	r1, #558	; 0x22e
    52a6:	4648      	mov	r0, r9
    52a8:	f005 fb21 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    52ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    52b0:	e017      	b.n	52e2 <pinctrl_configure_pins+0x2aa>
            mask = P0_FEATURE_PINS_PRESENT;
    52b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    52b6:	e7df      	b.n	5278 <pinctrl_configure_pins+0x240>
    switch (port)
    52b8:	2300      	movs	r3, #0
    52ba:	e7dd      	b.n	5278 <pinctrl_configure_pins+0x240>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    52bc:	f8df a104 	ldr.w	sl, [pc, #260]	; 53c4 <pinctrl_configure_pins+0x38c>
    52c0:	f240 2329 	movw	r3, #553	; 0x229
    52c4:	4652      	mov	r2, sl
    52c6:	4942      	ldr	r1, [pc, #264]	; (53d0 <pinctrl_configure_pins+0x398>)
    52c8:	4840      	ldr	r0, [pc, #256]	; (53cc <pinctrl_configure_pins+0x394>)
    52ca:	f005 fb17 	bl	a8fc <assert_print>
    52ce:	f240 2129 	movw	r1, #553	; 0x229
    52d2:	4650      	mov	r0, sl
    52d4:	f005 fb0b 	bl	a8ee <assert_post_action>
    52d8:	e7d4      	b.n	5284 <pinctrl_configure_pins+0x24c>
        case 0: return NRF_P0;
    52da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    52de:	e000      	b.n	52e2 <pinctrl_configure_pins+0x2aa>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    52e0:	4a3c      	ldr	r2, [pc, #240]	; (53d4 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    52e2:	2101      	movs	r1, #1
    52e4:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    52e8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    52ec:	2200      	movs	r2, #0
    52ee:	f855 0008 	ldr.w	r0, [r5, r8]
    52f2:	f7ff fe41 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    52f6:	e6f3      	b.n	50e0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    52f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    52fc:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    5300:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5304:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    uint32_t port = pin_number >> 5;
    5308:	f3c3 1240 	ubfx	r2, r3, #5, #1
    switch (port)
    530c:	f013 0f20 	tst.w	r3, #32
    5310:	d01f      	beq.n	5352 <pinctrl_configure_pins+0x31a>
    5312:	b30a      	cbz	r2, 5358 <pinctrl_configure_pins+0x320>
            mask = P1_FEATURE_PINS_PRESENT;
    5314:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5318:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    531c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    531e:	f013 0f01 	tst.w	r3, #1
    5322:	d01b      	beq.n	535c <pinctrl_configure_pins+0x324>
    *p_pin = pin_number & 0x1F;
    5324:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5328:	ea5f 1359 	movs.w	r3, r9, lsr #5
    532c:	d025      	beq.n	537a <pinctrl_configure_pins+0x342>
    532e:	bb3b      	cbnz	r3, 5380 <pinctrl_configure_pins+0x348>
            NRFX_ASSERT(0);
    5330:	f8df 9090 	ldr.w	r9, [pc, #144]	; 53c4 <pinctrl_configure_pins+0x38c>
    5334:	f240 232e 	movw	r3, #558	; 0x22e
    5338:	464a      	mov	r2, r9
    533a:	4923      	ldr	r1, [pc, #140]	; (53c8 <pinctrl_configure_pins+0x390>)
    533c:	4823      	ldr	r0, [pc, #140]	; (53cc <pinctrl_configure_pins+0x394>)
    533e:	f005 fadd 	bl	a8fc <assert_print>
    5342:	f240 212e 	movw	r1, #558	; 0x22e
    5346:	4648      	mov	r0, r9
    5348:	f005 fad1 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    534c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5350:	e017      	b.n	5382 <pinctrl_configure_pins+0x34a>
            mask = P0_FEATURE_PINS_PRESENT;
    5352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5356:	e7df      	b.n	5318 <pinctrl_configure_pins+0x2e0>
    switch (port)
    5358:	2300      	movs	r3, #0
    535a:	e7dd      	b.n	5318 <pinctrl_configure_pins+0x2e0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    535c:	f8df a064 	ldr.w	sl, [pc, #100]	; 53c4 <pinctrl_configure_pins+0x38c>
    5360:	f240 2329 	movw	r3, #553	; 0x229
    5364:	4652      	mov	r2, sl
    5366:	491a      	ldr	r1, [pc, #104]	; (53d0 <pinctrl_configure_pins+0x398>)
    5368:	4818      	ldr	r0, [pc, #96]	; (53cc <pinctrl_configure_pins+0x394>)
    536a:	f005 fac7 	bl	a8fc <assert_print>
    536e:	f240 2129 	movw	r1, #553	; 0x229
    5372:	4650      	mov	r0, sl
    5374:	f005 fabb 	bl	a8ee <assert_post_action>
    5378:	e7d4      	b.n	5324 <pinctrl_configure_pins+0x2ec>
        case 0: return NRF_P0;
    537a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    537e:	e000      	b.n	5382 <pinctrl_configure_pins+0x34a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5380:	4a14      	ldr	r2, [pc, #80]	; (53d4 <pinctrl_configure_pins+0x39c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5382:	2101      	movs	r1, #1
    5384:	fa01 f30a 	lsl.w	r3, r1, sl
    p_reg->OUTCLR = clr_mask;
    5388:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    538c:	460a      	mov	r2, r1
    538e:	f855 0008 	ldr.w	r0, [r5, r8]
    5392:	f7ff fdf1 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5396:	e6a3      	b.n	50e0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    5398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    539c:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    53a0:	2200      	movs	r2, #0
    53a2:	4611      	mov	r1, r2
    53a4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    53a8:	f7ff fde6 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    53ac:	e698      	b.n	50e0 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    53ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53b2:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    53b6:	2200      	movs	r2, #0
    53b8:	4611      	mov	r1, r2
    53ba:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    53be:	f7ff fddb 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    53c2:	e68d      	b.n	50e0 <pinctrl_configure_pins+0xa8>
    53c4:	0000d4e4 	.word	0x0000d4e4
    53c8:	0000c914 	.word	0x0000c914
    53cc:	0000c254 	.word	0x0000c254
    53d0:	0000d518 	.word	0x0000d518
    53d4:	50000300 	.word	0x50000300
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    53d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53dc:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    53e0:	2200      	movs	r2, #0
    53e2:	4611      	mov	r1, r2
    53e4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    53e8:	f7ff fdc6 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
    53ec:	e678      	b.n	50e0 <pinctrl_configure_pins+0xa8>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    53ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53f2:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    53f6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    53fa:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    53fe:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    5402:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5406:	d144      	bne.n	5492 <pinctrl_configure_pins+0x45a>
    switch (port)
    5408:	ea5f 1359 	movs.w	r3, r9, lsr #5
    540c:	d01f      	beq.n	544e <pinctrl_configure_pins+0x416>
    540e:	b10b      	cbz	r3, 5414 <pinctrl_configure_pins+0x3dc>
            mask = P1_FEATURE_PINS_PRESENT;
    5410:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5414:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5418:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    541a:	f012 0f01 	tst.w	r2, #1
    541e:	d019      	beq.n	5454 <pinctrl_configure_pins+0x41c>
    *p_pin = pin_number & 0x1F;
    5420:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5424:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5428:	d023      	beq.n	5472 <pinctrl_configure_pins+0x43a>
    542a:	bb2b      	cbnz	r3, 5478 <pinctrl_configure_pins+0x440>
            NRFX_ASSERT(0);
    542c:	f8df 9300 	ldr.w	r9, [pc, #768]	; 5730 <pinctrl_configure_pins+0x6f8>
    5430:	f240 232e 	movw	r3, #558	; 0x22e
    5434:	464a      	mov	r2, r9
    5436:	49bf      	ldr	r1, [pc, #764]	; (5734 <pinctrl_configure_pins+0x6fc>)
    5438:	48bf      	ldr	r0, [pc, #764]	; (5738 <pinctrl_configure_pins+0x700>)
    543a:	f005 fa5f 	bl	a8fc <assert_print>
    543e:	f240 212e 	movw	r1, #558	; 0x22e
    5442:	4648      	mov	r0, r9
    5444:	f005 fa53 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    5448:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    544c:	e015      	b.n	547a <pinctrl_configure_pins+0x442>
            mask = P0_FEATURE_PINS_PRESENT;
    544e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5452:	e7df      	b.n	5414 <pinctrl_configure_pins+0x3dc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5454:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 5730 <pinctrl_configure_pins+0x6f8>
    5458:	f240 2329 	movw	r3, #553	; 0x229
    545c:	4652      	mov	r2, sl
    545e:	49b7      	ldr	r1, [pc, #732]	; (573c <pinctrl_configure_pins+0x704>)
    5460:	48b5      	ldr	r0, [pc, #724]	; (5738 <pinctrl_configure_pins+0x700>)
    5462:	f005 fa4b 	bl	a8fc <assert_print>
    5466:	f240 2129 	movw	r1, #553	; 0x229
    546a:	4650      	mov	r0, sl
    546c:	f005 fa3f 	bl	a8ee <assert_post_action>
    5470:	e7d6      	b.n	5420 <pinctrl_configure_pins+0x3e8>
        case 0: return NRF_P0;
    5472:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5476:	e000      	b.n	547a <pinctrl_configure_pins+0x442>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5478:	4ab1      	ldr	r2, [pc, #708]	; (5740 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    547a:	2301      	movs	r3, #1
    547c:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    5480:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    5484:	2201      	movs	r2, #1
    5486:	4611      	mov	r1, r2
    5488:	f855 0008 	ldr.w	r0, [r5, r8]
    548c:	f7ff fd74 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5490:	e626      	b.n	50e0 <pinctrl_configure_pins+0xa8>
    switch (port)
    5492:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5496:	d01f      	beq.n	54d8 <pinctrl_configure_pins+0x4a0>
    5498:	b30b      	cbz	r3, 54de <pinctrl_configure_pins+0x4a6>
            mask = P1_FEATURE_PINS_PRESENT;
    549a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    549e:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    54a2:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    54a4:	f013 0f01 	tst.w	r3, #1
    54a8:	d01b      	beq.n	54e2 <pinctrl_configure_pins+0x4aa>
    *p_pin = pin_number & 0x1F;
    54aa:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    54ae:	ea5f 1359 	movs.w	r3, r9, lsr #5
    54b2:	d025      	beq.n	5500 <pinctrl_configure_pins+0x4c8>
    54b4:	bb3b      	cbnz	r3, 5506 <pinctrl_configure_pins+0x4ce>
            NRFX_ASSERT(0);
    54b6:	f8df 9278 	ldr.w	r9, [pc, #632]	; 5730 <pinctrl_configure_pins+0x6f8>
    54ba:	f240 232e 	movw	r3, #558	; 0x22e
    54be:	464a      	mov	r2, r9
    54c0:	499c      	ldr	r1, [pc, #624]	; (5734 <pinctrl_configure_pins+0x6fc>)
    54c2:	489d      	ldr	r0, [pc, #628]	; (5738 <pinctrl_configure_pins+0x700>)
    54c4:	f005 fa1a 	bl	a8fc <assert_print>
    54c8:	f240 212e 	movw	r1, #558	; 0x22e
    54cc:	4648      	mov	r0, r9
    54ce:	f005 fa0e 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    54d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    54d6:	e017      	b.n	5508 <pinctrl_configure_pins+0x4d0>
            mask = P0_FEATURE_PINS_PRESENT;
    54d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    54dc:	e7df      	b.n	549e <pinctrl_configure_pins+0x466>
    switch (port)
    54de:	2300      	movs	r3, #0
    54e0:	e7dd      	b.n	549e <pinctrl_configure_pins+0x466>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    54e2:	f8df a24c 	ldr.w	sl, [pc, #588]	; 5730 <pinctrl_configure_pins+0x6f8>
    54e6:	f240 2329 	movw	r3, #553	; 0x229
    54ea:	4652      	mov	r2, sl
    54ec:	4993      	ldr	r1, [pc, #588]	; (573c <pinctrl_configure_pins+0x704>)
    54ee:	4892      	ldr	r0, [pc, #584]	; (5738 <pinctrl_configure_pins+0x700>)
    54f0:	f005 fa04 	bl	a8fc <assert_print>
    54f4:	f240 2129 	movw	r1, #553	; 0x229
    54f8:	4650      	mov	r0, sl
    54fa:	f005 f9f8 	bl	a8ee <assert_post_action>
    54fe:	e7d4      	b.n	54aa <pinctrl_configure_pins+0x472>
        case 0: return NRF_P0;
    5500:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5504:	e000      	b.n	5508 <pinctrl_configure_pins+0x4d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5506:	4a8e      	ldr	r2, [pc, #568]	; (5740 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5508:	2301      	movs	r3, #1
    550a:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    550e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    5512:	e7b7      	b.n	5484 <pinctrl_configure_pins+0x44c>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    5514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5518:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    551c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5520:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    5524:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    5528:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    552c:	d144      	bne.n	55b8 <pinctrl_configure_pins+0x580>
    switch (port)
    552e:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5532:	d01f      	beq.n	5574 <pinctrl_configure_pins+0x53c>
    5534:	b10b      	cbz	r3, 553a <pinctrl_configure_pins+0x502>
            mask = P1_FEATURE_PINS_PRESENT;
    5536:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    553a:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    553e:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5540:	f012 0f01 	tst.w	r2, #1
    5544:	d019      	beq.n	557a <pinctrl_configure_pins+0x542>
    *p_pin = pin_number & 0x1F;
    5546:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    554a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    554e:	d023      	beq.n	5598 <pinctrl_configure_pins+0x560>
    5550:	bb2b      	cbnz	r3, 559e <pinctrl_configure_pins+0x566>
            NRFX_ASSERT(0);
    5552:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 5730 <pinctrl_configure_pins+0x6f8>
    5556:	f240 232e 	movw	r3, #558	; 0x22e
    555a:	464a      	mov	r2, r9
    555c:	4975      	ldr	r1, [pc, #468]	; (5734 <pinctrl_configure_pins+0x6fc>)
    555e:	4876      	ldr	r0, [pc, #472]	; (5738 <pinctrl_configure_pins+0x700>)
    5560:	f005 f9cc 	bl	a8fc <assert_print>
    5564:	f240 212e 	movw	r1, #558	; 0x22e
    5568:	4648      	mov	r0, r9
    556a:	f005 f9c0 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    556e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5572:	e015      	b.n	55a0 <pinctrl_configure_pins+0x568>
            mask = P0_FEATURE_PINS_PRESENT;
    5574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5578:	e7df      	b.n	553a <pinctrl_configure_pins+0x502>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    557a:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 5730 <pinctrl_configure_pins+0x6f8>
    557e:	f240 2329 	movw	r3, #553	; 0x229
    5582:	4652      	mov	r2, sl
    5584:	496d      	ldr	r1, [pc, #436]	; (573c <pinctrl_configure_pins+0x704>)
    5586:	486c      	ldr	r0, [pc, #432]	; (5738 <pinctrl_configure_pins+0x700>)
    5588:	f005 f9b8 	bl	a8fc <assert_print>
    558c:	f240 2129 	movw	r1, #553	; 0x229
    5590:	4650      	mov	r0, sl
    5592:	f005 f9ac 	bl	a8ee <assert_post_action>
    5596:	e7d6      	b.n	5546 <pinctrl_configure_pins+0x50e>
        case 0: return NRF_P0;
    5598:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    559c:	e000      	b.n	55a0 <pinctrl_configure_pins+0x568>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    559e:	4a68      	ldr	r2, [pc, #416]	; (5740 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    55a0:	2301      	movs	r3, #1
    55a2:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    55a6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    55aa:	2201      	movs	r2, #1
    55ac:	4611      	mov	r1, r2
    55ae:	f855 0008 	ldr.w	r0, [r5, r8]
    55b2:	f7ff fce1 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    55b6:	e593      	b.n	50e0 <pinctrl_configure_pins+0xa8>
    switch (port)
    55b8:	ea5f 1359 	movs.w	r3, r9, lsr #5
    55bc:	d01f      	beq.n	55fe <pinctrl_configure_pins+0x5c6>
    55be:	b30b      	cbz	r3, 5604 <pinctrl_configure_pins+0x5cc>
            mask = P1_FEATURE_PINS_PRESENT;
    55c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    55c4:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    55c8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    55ca:	f013 0f01 	tst.w	r3, #1
    55ce:	d01b      	beq.n	5608 <pinctrl_configure_pins+0x5d0>
    *p_pin = pin_number & 0x1F;
    55d0:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    55d4:	ea5f 1359 	movs.w	r3, r9, lsr #5
    55d8:	d025      	beq.n	5626 <pinctrl_configure_pins+0x5ee>
    55da:	bb3b      	cbnz	r3, 562c <pinctrl_configure_pins+0x5f4>
            NRFX_ASSERT(0);
    55dc:	f8df 9150 	ldr.w	r9, [pc, #336]	; 5730 <pinctrl_configure_pins+0x6f8>
    55e0:	f240 232e 	movw	r3, #558	; 0x22e
    55e4:	464a      	mov	r2, r9
    55e6:	4953      	ldr	r1, [pc, #332]	; (5734 <pinctrl_configure_pins+0x6fc>)
    55e8:	4853      	ldr	r0, [pc, #332]	; (5738 <pinctrl_configure_pins+0x700>)
    55ea:	f005 f987 	bl	a8fc <assert_print>
    55ee:	f240 212e 	movw	r1, #558	; 0x22e
    55f2:	4648      	mov	r0, r9
    55f4:	f005 f97b 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    55f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    55fc:	e017      	b.n	562e <pinctrl_configure_pins+0x5f6>
            mask = P0_FEATURE_PINS_PRESENT;
    55fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5602:	e7df      	b.n	55c4 <pinctrl_configure_pins+0x58c>
    switch (port)
    5604:	2300      	movs	r3, #0
    5606:	e7dd      	b.n	55c4 <pinctrl_configure_pins+0x58c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5608:	f8df a124 	ldr.w	sl, [pc, #292]	; 5730 <pinctrl_configure_pins+0x6f8>
    560c:	f240 2329 	movw	r3, #553	; 0x229
    5610:	4652      	mov	r2, sl
    5612:	494a      	ldr	r1, [pc, #296]	; (573c <pinctrl_configure_pins+0x704>)
    5614:	4848      	ldr	r0, [pc, #288]	; (5738 <pinctrl_configure_pins+0x700>)
    5616:	f005 f971 	bl	a8fc <assert_print>
    561a:	f240 2129 	movw	r1, #553	; 0x229
    561e:	4650      	mov	r0, sl
    5620:	f005 f965 	bl	a8ee <assert_post_action>
    5624:	e7d4      	b.n	55d0 <pinctrl_configure_pins+0x598>
        case 0: return NRF_P0;
    5626:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    562a:	e000      	b.n	562e <pinctrl_configure_pins+0x5f6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    562c:	4a44      	ldr	r2, [pc, #272]	; (5740 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    562e:	2301      	movs	r3, #1
    5630:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    5634:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    5638:	e7b7      	b.n	55aa <pinctrl_configure_pins+0x572>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    563a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    563e:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    5642:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5646:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    564a:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    564e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5652:	d144      	bne.n	56de <pinctrl_configure_pins+0x6a6>
    switch (port)
    5654:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5658:	d01f      	beq.n	569a <pinctrl_configure_pins+0x662>
    565a:	b10b      	cbz	r3, 5660 <pinctrl_configure_pins+0x628>
            mask = P1_FEATURE_PINS_PRESENT;
    565c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    5660:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    5664:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5666:	f012 0f01 	tst.w	r2, #1
    566a:	d019      	beq.n	56a0 <pinctrl_configure_pins+0x668>
    *p_pin = pin_number & 0x1F;
    566c:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5670:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5674:	d023      	beq.n	56be <pinctrl_configure_pins+0x686>
    5676:	bb2b      	cbnz	r3, 56c4 <pinctrl_configure_pins+0x68c>
            NRFX_ASSERT(0);
    5678:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 5730 <pinctrl_configure_pins+0x6f8>
    567c:	f240 232e 	movw	r3, #558	; 0x22e
    5680:	464a      	mov	r2, r9
    5682:	492c      	ldr	r1, [pc, #176]	; (5734 <pinctrl_configure_pins+0x6fc>)
    5684:	482c      	ldr	r0, [pc, #176]	; (5738 <pinctrl_configure_pins+0x700>)
    5686:	f005 f939 	bl	a8fc <assert_print>
    568a:	f240 212e 	movw	r1, #558	; 0x22e
    568e:	4648      	mov	r0, r9
    5690:	f005 f92d 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    5694:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5698:	e015      	b.n	56c6 <pinctrl_configure_pins+0x68e>
            mask = P0_FEATURE_PINS_PRESENT;
    569a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    569e:	e7df      	b.n	5660 <pinctrl_configure_pins+0x628>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    56a0:	f8df a08c 	ldr.w	sl, [pc, #140]	; 5730 <pinctrl_configure_pins+0x6f8>
    56a4:	f240 2329 	movw	r3, #553	; 0x229
    56a8:	4652      	mov	r2, sl
    56aa:	4924      	ldr	r1, [pc, #144]	; (573c <pinctrl_configure_pins+0x704>)
    56ac:	4822      	ldr	r0, [pc, #136]	; (5738 <pinctrl_configure_pins+0x700>)
    56ae:	f005 f925 	bl	a8fc <assert_print>
    56b2:	f240 2129 	movw	r1, #553	; 0x229
    56b6:	4650      	mov	r0, sl
    56b8:	f005 f919 	bl	a8ee <assert_post_action>
    56bc:	e7d6      	b.n	566c <pinctrl_configure_pins+0x634>
        case 0: return NRF_P0;
    56be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    56c2:	e000      	b.n	56c6 <pinctrl_configure_pins+0x68e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    56c4:	4a1e      	ldr	r2, [pc, #120]	; (5740 <pinctrl_configure_pins+0x708>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    56c6:	2301      	movs	r3, #1
    56c8:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    56cc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    56d0:	2201      	movs	r2, #1
    56d2:	4611      	mov	r1, r2
    56d4:	f855 0008 	ldr.w	r0, [r5, r8]
    56d8:	f7ff fc4e 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    56dc:	e500      	b.n	50e0 <pinctrl_configure_pins+0xa8>
    switch (port)
    56de:	ea5f 1359 	movs.w	r3, r9, lsr #5
    56e2:	d01f      	beq.n	5724 <pinctrl_configure_pins+0x6ec>
    56e4:	b30b      	cbz	r3, 572a <pinctrl_configure_pins+0x6f2>
            mask = P1_FEATURE_PINS_PRESENT;
    56e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    56ea:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    56ee:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    56f0:	f013 0f01 	tst.w	r3, #1
    56f4:	d026      	beq.n	5744 <pinctrl_configure_pins+0x70c>
    *p_pin = pin_number & 0x1F;
    56f6:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    56fa:	ea5f 1359 	movs.w	r3, r9, lsr #5
    56fe:	d030      	beq.n	5762 <pinctrl_configure_pins+0x72a>
    5700:	bb93      	cbnz	r3, 5768 <pinctrl_configure_pins+0x730>
            NRFX_ASSERT(0);
    5702:	f8df 902c 	ldr.w	r9, [pc, #44]	; 5730 <pinctrl_configure_pins+0x6f8>
    5706:	f240 232e 	movw	r3, #558	; 0x22e
    570a:	464a      	mov	r2, r9
    570c:	4909      	ldr	r1, [pc, #36]	; (5734 <pinctrl_configure_pins+0x6fc>)
    570e:	480a      	ldr	r0, [pc, #40]	; (5738 <pinctrl_configure_pins+0x700>)
    5710:	f005 f8f4 	bl	a8fc <assert_print>
    5714:	f240 212e 	movw	r1, #558	; 0x22e
    5718:	4648      	mov	r0, r9
    571a:	f005 f8e8 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    571e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5722:	e022      	b.n	576a <pinctrl_configure_pins+0x732>
            mask = P0_FEATURE_PINS_PRESENT;
    5724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5728:	e7df      	b.n	56ea <pinctrl_configure_pins+0x6b2>
    switch (port)
    572a:	2300      	movs	r3, #0
    572c:	e7dd      	b.n	56ea <pinctrl_configure_pins+0x6b2>
    572e:	bf00      	nop
    5730:	0000d4e4 	.word	0x0000d4e4
    5734:	0000c914 	.word	0x0000c914
    5738:	0000c254 	.word	0x0000c254
    573c:	0000d518 	.word	0x0000d518
    5740:	50000300 	.word	0x50000300
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5744:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 5934 <pinctrl_configure_pins+0x8fc>
    5748:	f240 2329 	movw	r3, #553	; 0x229
    574c:	4652      	mov	r2, sl
    574e:	497a      	ldr	r1, [pc, #488]	; (5938 <pinctrl_configure_pins+0x900>)
    5750:	487a      	ldr	r0, [pc, #488]	; (593c <pinctrl_configure_pins+0x904>)
    5752:	f005 f8d3 	bl	a8fc <assert_print>
    5756:	f240 2129 	movw	r1, #553	; 0x229
    575a:	4650      	mov	r0, sl
    575c:	f005 f8c7 	bl	a8ee <assert_post_action>
    5760:	e7c9      	b.n	56f6 <pinctrl_configure_pins+0x6be>
        case 0: return NRF_P0;
    5762:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5766:	e000      	b.n	576a <pinctrl_configure_pins+0x732>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5768:	4a75      	ldr	r2, [pc, #468]	; (5940 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    576a:	2301      	movs	r3, #1
    576c:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    5770:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    5774:	e7ac      	b.n	56d0 <pinctrl_configure_pins+0x698>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    5776:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    577a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    577e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5782:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    5786:	f3c3 3240 	ubfx	r2, r3, #13, #1
    if (value == 0)
    578a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    578e:	d144      	bne.n	581a <pinctrl_configure_pins+0x7e2>
    switch (port)
    5790:	ea5f 1359 	movs.w	r3, r9, lsr #5
    5794:	d01f      	beq.n	57d6 <pinctrl_configure_pins+0x79e>
    5796:	b10b      	cbz	r3, 579c <pinctrl_configure_pins+0x764>
            mask = P1_FEATURE_PINS_PRESENT;
    5798:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pin_number &= 0x1F;
    579c:	f009 031f 	and.w	r3, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    57a0:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    57a2:	f012 0f01 	tst.w	r2, #1
    57a6:	d019      	beq.n	57dc <pinctrl_configure_pins+0x7a4>
    *p_pin = pin_number & 0x1F;
    57a8:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    57ac:	ea5f 1359 	movs.w	r3, r9, lsr #5
    57b0:	d023      	beq.n	57fa <pinctrl_configure_pins+0x7c2>
    57b2:	bb2b      	cbnz	r3, 5800 <pinctrl_configure_pins+0x7c8>
            NRFX_ASSERT(0);
    57b4:	f8df 917c 	ldr.w	r9, [pc, #380]	; 5934 <pinctrl_configure_pins+0x8fc>
    57b8:	f240 232e 	movw	r3, #558	; 0x22e
    57bc:	464a      	mov	r2, r9
    57be:	4961      	ldr	r1, [pc, #388]	; (5944 <pinctrl_configure_pins+0x90c>)
    57c0:	485e      	ldr	r0, [pc, #376]	; (593c <pinctrl_configure_pins+0x904>)
    57c2:	f005 f89b 	bl	a8fc <assert_print>
    57c6:	f240 212e 	movw	r1, #558	; 0x22e
    57ca:	4648      	mov	r0, r9
    57cc:	f005 f88f 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    57d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    57d4:	e015      	b.n	5802 <pinctrl_configure_pins+0x7ca>
            mask = P0_FEATURE_PINS_PRESENT;
    57d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    57da:	e7df      	b.n	579c <pinctrl_configure_pins+0x764>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    57dc:	f8df a154 	ldr.w	sl, [pc, #340]	; 5934 <pinctrl_configure_pins+0x8fc>
    57e0:	f240 2329 	movw	r3, #553	; 0x229
    57e4:	4652      	mov	r2, sl
    57e6:	4954      	ldr	r1, [pc, #336]	; (5938 <pinctrl_configure_pins+0x900>)
    57e8:	4854      	ldr	r0, [pc, #336]	; (593c <pinctrl_configure_pins+0x904>)
    57ea:	f005 f887 	bl	a8fc <assert_print>
    57ee:	f240 2129 	movw	r1, #553	; 0x229
    57f2:	4650      	mov	r0, sl
    57f4:	f005 f87b 	bl	a8ee <assert_post_action>
    57f8:	e7d6      	b.n	57a8 <pinctrl_configure_pins+0x770>
        case 0: return NRF_P0;
    57fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    57fe:	e000      	b.n	5802 <pinctrl_configure_pins+0x7ca>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5800:	4a4f      	ldr	r2, [pc, #316]	; (5940 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5802:	2301      	movs	r3, #1
    5804:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTCLR = clr_mask;
    5808:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    580c:	2201      	movs	r2, #1
    580e:	4611      	mov	r1, r2
    5810:	f855 0008 	ldr.w	r0, [r5, r8]
    5814:	f7ff fbb0 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5818:	e462      	b.n	50e0 <pinctrl_configure_pins+0xa8>
    switch (port)
    581a:	ea5f 1359 	movs.w	r3, r9, lsr #5
    581e:	d01f      	beq.n	5860 <pinctrl_configure_pins+0x828>
    5820:	b30b      	cbz	r3, 5866 <pinctrl_configure_pins+0x82e>
            mask = P1_FEATURE_PINS_PRESENT;
    5822:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    5826:	f009 021f 	and.w	r2, r9, #31
    return (mask & (1UL << pin_number)) ? true : false;
    582a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    582c:	f013 0f01 	tst.w	r3, #1
    5830:	d01b      	beq.n	586a <pinctrl_configure_pins+0x832>
    *p_pin = pin_number & 0x1F;
    5832:	f009 0a1f 	and.w	sl, r9, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5836:	ea5f 1359 	movs.w	r3, r9, lsr #5
    583a:	d025      	beq.n	5888 <pinctrl_configure_pins+0x850>
    583c:	bb3b      	cbnz	r3, 588e <pinctrl_configure_pins+0x856>
            NRFX_ASSERT(0);
    583e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 5934 <pinctrl_configure_pins+0x8fc>
    5842:	f240 232e 	movw	r3, #558	; 0x22e
    5846:	464a      	mov	r2, r9
    5848:	493e      	ldr	r1, [pc, #248]	; (5944 <pinctrl_configure_pins+0x90c>)
    584a:	483c      	ldr	r0, [pc, #240]	; (593c <pinctrl_configure_pins+0x904>)
    584c:	f005 f856 	bl	a8fc <assert_print>
    5850:	f240 212e 	movw	r1, #558	; 0x22e
    5854:	4648      	mov	r0, r9
    5856:	f005 f84a 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    585a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    585e:	e017      	b.n	5890 <pinctrl_configure_pins+0x858>
            mask = P0_FEATURE_PINS_PRESENT;
    5860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5864:	e7df      	b.n	5826 <pinctrl_configure_pins+0x7ee>
    switch (port)
    5866:	2300      	movs	r3, #0
    5868:	e7dd      	b.n	5826 <pinctrl_configure_pins+0x7ee>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    586a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 5934 <pinctrl_configure_pins+0x8fc>
    586e:	f240 2329 	movw	r3, #553	; 0x229
    5872:	4652      	mov	r2, sl
    5874:	4930      	ldr	r1, [pc, #192]	; (5938 <pinctrl_configure_pins+0x900>)
    5876:	4831      	ldr	r0, [pc, #196]	; (593c <pinctrl_configure_pins+0x904>)
    5878:	f005 f840 	bl	a8fc <assert_print>
    587c:	f240 2129 	movw	r1, #553	; 0x229
    5880:	4650      	mov	r0, sl
    5882:	f005 f834 	bl	a8ee <assert_post_action>
    5886:	e7d4      	b.n	5832 <pinctrl_configure_pins+0x7fa>
        case 0: return NRF_P0;
    5888:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    588c:	e000      	b.n	5890 <pinctrl_configure_pins+0x858>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    588e:	4a2c      	ldr	r2, [pc, #176]	; (5940 <pinctrl_configure_pins+0x908>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5890:	2301      	movs	r3, #1
    5892:	fa03 f30a 	lsl.w	r3, r3, sl
    p_reg->OUTSET = set_mask;
    5896:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    589a:	e7b7      	b.n	580c <pinctrl_configure_pins+0x7d4>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_QDEC) */
#if defined(NRF_PSEL_QSPI)
		case NRF_FUN_QSPI_SCK:
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    589c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    58a0:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    58a4:	2201      	movs	r2, #1
    58a6:	2100      	movs	r1, #0
    58a8:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    58ac:	f7ff fb64 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    58b0:	e416      	b.n	50e0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_CSN:
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    58b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    58b6:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    58ba:	2201      	movs	r2, #1
    58bc:	2100      	movs	r1, #0
    58be:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    58c2:	f7ff fb59 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    58c6:	e40b      	b.n	50e0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO0:
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    58c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    58cc:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    58d0:	2201      	movs	r2, #1
    58d2:	2100      	movs	r1, #0
    58d4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    58d8:	f7ff fb4e 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    58dc:	e400      	b.n	50e0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO1:
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    58de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    58e2:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    58e6:	2201      	movs	r2, #1
    58e8:	2100      	movs	r1, #0
    58ea:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    58ee:	f7ff fb43 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    58f2:	f7ff bbf5 	b.w	50e0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO2:
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    58f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    58fa:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    58fe:	2201      	movs	r2, #1
    5900:	2100      	movs	r1, #0
    5902:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    5906:	f7ff fb37 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    590a:	f7ff bbe9 	b.w	50e0 <pinctrl_configure_pins+0xa8>
		case NRF_FUN_QSPI_IO3:
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    590e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5912:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    5916:	2201      	movs	r2, #1
    5918:	2100      	movs	r1, #0
    591a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    591e:	f7ff fb2b 	bl	4f78 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
    5922:	f7ff bbdd 	b.w	50e0 <pinctrl_configure_pins+0xa8>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    5926:	2000      	movs	r0, #0
    5928:	e001      	b.n	592e <pinctrl_configure_pins+0x8f6>
		switch (NRF_GET_FUN(pins[i])) {
    592a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    592e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5932:	bf00      	nop
    5934:	0000d4e4 	.word	0x0000d4e4
    5938:	0000d518 	.word	0x0000d518
    593c:	0000c254 	.word	0x0000c254
    5940:	50000300 	.word	0x50000300
    5944:	0000c914 	.word	0x0000c914

00005948 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5948:	b510      	push	{r4, lr}
    594a:	b084      	sub	sp, #16
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    594c:	f7fc fae2 	bl	1f14 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    5950:	4b06      	ldr	r3, [pc, #24]	; (596c <k_sys_fatal_error_handler+0x24>)
    5952:	9302      	str	r3, [sp, #8]
    5954:	2400      	movs	r4, #0
    5956:	9401      	str	r4, [sp, #4]
    5958:	9400      	str	r4, [sp, #0]
    595a:	4623      	mov	r3, r4
    595c:	2201      	movs	r2, #1
    595e:	4904      	ldr	r1, [pc, #16]	; (5970 <k_sys_fatal_error_handler+0x28>)
    5960:	4620      	mov	r0, r4
    5962:	f006 f80d 	bl	b980 <z_log_msg2_runtime_create>
		sys_arch_reboot(0);
    5966:	4620      	mov	r0, r4
    5968:	f7fe f986 	bl	3c78 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    596c:	0000d6bc 	.word	0x0000d6bc
    5970:	0000c068 	.word	0x0000c068

00005974 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    5974:	4b02      	ldr	r3, [pc, #8]	; (5980 <nvmc_wait+0xc>)
    5976:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    597a:	2b00      	cmp	r3, #0
    597c:	d0fa      	beq.n	5974 <nvmc_wait>
}
    597e:	4770      	bx	lr
    5980:	4001e000 	.word	0x4001e000

00005984 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    5984:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5986:	4b03      	ldr	r3, [pc, #12]	; (5994 <nvmc_config+0x10>)
    5988:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    598c:	f7ff fff2 	bl	5974 <nvmc_wait>
}
    5990:	bd08      	pop	{r3, pc}
    5992:	bf00      	nop
    5994:	4001e000 	.word	0x4001e000

00005998 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    5998:	4b01      	ldr	r3, [pc, #4]	; (59a0 <SystemCoreClockUpdate+0x8>)
    599a:	4a02      	ldr	r2, [pc, #8]	; (59a4 <SystemCoreClockUpdate+0xc>)
    599c:	601a      	str	r2, [r3, #0]
}
    599e:	4770      	bx	lr
    59a0:	20004060 	.word	0x20004060
    59a4:	03d09000 	.word	0x03d09000

000059a8 <SystemInit>:

void SystemInit(void)
{
    59a8:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    59aa:	f006 f806 	bl	b9ba <nrf52_errata_36>
    59ae:	b140      	cbz	r0, 59c2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    59b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    59b4:	2200      	movs	r2, #0
    59b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    59ba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    59be:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    59c2:	f006 f804 	bl	b9ce <nrf52_errata_66>
    59c6:	2800      	cmp	r0, #0
    59c8:	d046      	beq.n	5a58 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    59ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    59ce:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    59d2:	4b59      	ldr	r3, [pc, #356]	; (5b38 <SystemInit+0x190>)
    59d4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    59d8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    59dc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    59e0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    59e4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    59e8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    59ec:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    59f0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    59f4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    59f8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    59fc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5a00:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    5a04:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    5a08:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    5a0c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    5a10:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    5a14:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    5a18:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    5a1c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5a20:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    5a24:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    5a28:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    5a2c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5a30:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    5a34:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    5a38:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    5a3c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5a40:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    5a44:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    5a48:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    5a4c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5a50:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    5a54:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    5a58:	f005 ffc3 	bl	b9e2 <nrf52_errata_98>
    5a5c:	b118      	cbz	r0, 5a66 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    5a5e:	4b37      	ldr	r3, [pc, #220]	; (5b3c <SystemInit+0x194>)
    5a60:	4a37      	ldr	r2, [pc, #220]	; (5b40 <SystemInit+0x198>)
    5a62:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5a66:	f005 ffcf 	bl	ba08 <nrf52_errata_103>
    5a6a:	b118      	cbz	r0, 5a74 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5a6c:	4b35      	ldr	r3, [pc, #212]	; (5b44 <SystemInit+0x19c>)
    5a6e:	22fb      	movs	r2, #251	; 0xfb
    5a70:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5a74:	f005 ffdb 	bl	ba2e <nrf52_errata_115>
    5a78:	b170      	cbz	r0, 5a98 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    5a7a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5a7e:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    5a82:	f023 030f 	bic.w	r3, r3, #15
    5a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5a8a:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    5a8e:	f002 020f 	and.w	r2, r2, #15
    5a92:	4313      	orrs	r3, r2
    5a94:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    5a98:	f005 ffdc 	bl	ba54 <nrf52_errata_120>
    5a9c:	b120      	cbz	r0, 5aa8 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    5a9e:	4b2a      	ldr	r3, [pc, #168]	; (5b48 <SystemInit+0x1a0>)
    5aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
    5aa4:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    5aa8:	f005 ffe7 	bl	ba7a <nrf52_errata_136>
    5aac:	b160      	cbz	r0, 5ac8 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5aae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ab2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5ab6:	f013 0f01 	tst.w	r3, #1
    5aba:	d005      	beq.n	5ac8 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5abc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ac0:	f06f 0201 	mvn.w	r2, #1
    5ac4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    5ac8:	f005 ffe1 	bl	ba8e <nrf52_configuration_249>
    5acc:	b138      	cbz	r0, 5ade <SystemInit+0x136>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    5ace:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5ad2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    5ad6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ada:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5ade:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5ae2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    5ae6:	2b00      	cmp	r3, #0
    5ae8:	db08      	blt.n	5afc <SystemInit+0x154>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    5aea:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5aee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    5af2:	2b00      	cmp	r3, #0
    5af4:	db02      	blt.n	5afc <SystemInit+0x154>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    5af6:	f7ff ff4f 	bl	5998 <SystemCoreClockUpdate>
}
    5afa:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    5afc:	2001      	movs	r0, #1
    5afe:	f7ff ff41 	bl	5984 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    5b02:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    5b06:	2512      	movs	r5, #18
    5b08:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    5b0c:	f7ff ff32 	bl	5974 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    5b10:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    5b14:	f7ff ff2e 	bl	5974 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    5b18:	2000      	movs	r0, #0
    5b1a:	f7ff ff33 	bl	5984 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    5b1e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5b22:	490a      	ldr	r1, [pc, #40]	; (5b4c <SystemInit+0x1a4>)
    5b24:	68ca      	ldr	r2, [r1, #12]
    5b26:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5b2a:	4b09      	ldr	r3, [pc, #36]	; (5b50 <SystemInit+0x1a8>)
    5b2c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5b2e:	60cb      	str	r3, [r1, #12]
    5b30:	f3bf 8f4f 	dsb	sy
    __NOP();
    5b34:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5b36:	e7fd      	b.n	5b34 <SystemInit+0x18c>
    5b38:	4000c000 	.word	0x4000c000
    5b3c:	40005000 	.word	0x40005000
    5b40:	00038148 	.word	0x00038148
    5b44:	4000f000 	.word	0x4000f000
    5b48:	40029000 	.word	0x40029000
    5b4c:	e000ed00 	.word	0xe000ed00
    5b50:	05fa0004 	.word	0x05fa0004

00005b54 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    5b54:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    5b56:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    5b58:	fab4 f384 	clz	r3, r4
    5b5c:	f1c3 031f 	rsb	r3, r3, #31
    5b60:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    5b64:	2b00      	cmp	r3, #0
    5b66:	db16      	blt.n	5b96 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    5b68:	2201      	movs	r2, #1
    5b6a:	fa02 f303 	lsl.w	r3, r2, r3
    5b6e:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5b72:	f3bf 8f5b 	dmb	ish
    5b76:	e850 2f00 	ldrex	r2, [r0]
    5b7a:	42a2      	cmp	r2, r4
    5b7c:	d104      	bne.n	5b88 <nrfx_flag32_alloc+0x34>
    5b7e:	e840 3e00 	strex	lr, r3, [r0]
    5b82:	f1be 0f00 	cmp.w	lr, #0
    5b86:	d1f6      	bne.n	5b76 <nrfx_flag32_alloc+0x22>
    5b88:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5b8c:	d1e3      	bne.n	5b56 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    5b8e:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    5b92:	4802      	ldr	r0, [pc, #8]	; (5b9c <nrfx_flag32_alloc+0x48>)
}
    5b94:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    5b96:	4802      	ldr	r0, [pc, #8]	; (5ba0 <nrfx_flag32_alloc+0x4c>)
    5b98:	e7fc      	b.n	5b94 <nrfx_flag32_alloc+0x40>
    5b9a:	bf00      	nop
    5b9c:	0bad0000 	.word	0x0bad0000
    5ba0:	0bad0002 	.word	0x0bad0002

00005ba4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    5ba4:	6803      	ldr	r3, [r0, #0]
    5ba6:	40cb      	lsrs	r3, r1
    5ba8:	f013 0f01 	tst.w	r3, #1
    5bac:	d115      	bne.n	5bda <nrfx_flag32_free+0x36>
{
    5bae:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    5bb0:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    5bb2:	2301      	movs	r3, #1
    5bb4:	408b      	lsls	r3, r1
    5bb6:	4313      	orrs	r3, r2
    5bb8:	f3bf 8f5b 	dmb	ish
    5bbc:	e850 cf00 	ldrex	ip, [r0]
    5bc0:	4594      	cmp	ip, r2
    5bc2:	d104      	bne.n	5bce <nrfx_flag32_free+0x2a>
    5bc4:	e840 3e00 	strex	lr, r3, [r0]
    5bc8:	f1be 0f00 	cmp.w	lr, #0
    5bcc:	d1f6      	bne.n	5bbc <nrfx_flag32_free+0x18>
    5bce:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5bd2:	d1ed      	bne.n	5bb0 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    5bd4:	4802      	ldr	r0, [pc, #8]	; (5be0 <nrfx_flag32_free+0x3c>)
}
    5bd6:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    5bda:	4802      	ldr	r0, [pc, #8]	; (5be4 <nrfx_flag32_free+0x40>)
}
    5bdc:	4770      	bx	lr
    5bde:	bf00      	nop
    5be0:	0bad0000 	.word	0x0bad0000
    5be4:	0bad0004 	.word	0x0bad0004

00005be8 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    5be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bea:	b083      	sub	sp, #12
    switch (domain)
    5bec:	4605      	mov	r5, r0
    5bee:	b168      	cbz	r0, 5c0c <clock_stop+0x24>
    5bf0:	2801      	cmp	r0, #1
    5bf2:	d020      	beq.n	5c36 <clock_stop+0x4e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5bf4:	4c3d      	ldr	r4, [pc, #244]	; (5cec <clock_stop+0x104>)
    5bf6:	23d8      	movs	r3, #216	; 0xd8
    5bf8:	4622      	mov	r2, r4
    5bfa:	493d      	ldr	r1, [pc, #244]	; (5cf0 <clock_stop+0x108>)
    5bfc:	483d      	ldr	r0, [pc, #244]	; (5cf4 <clock_stop+0x10c>)
    5bfe:	f004 fe7d 	bl	a8fc <assert_print>
    5c02:	21d8      	movs	r1, #216	; 0xd8
    5c04:	4620      	mov	r0, r4
    5c06:	f004 fe72 	bl	a8ee <assert_post_action>
            return;
    5c0a:	e068      	b.n	5cde <clock_stop+0xf6>
    p_reg->INTENCLR = mask;
    5c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c10:	2202      	movs	r2, #2
    5c12:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c16:	2200      	movs	r2, #0
    5c18:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5c1c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c20:	2201      	movs	r2, #1
    5c22:	60da      	str	r2, [r3, #12]
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    5c24:	2301      	movs	r3, #1
    5c26:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5c2a:	429d      	cmp	r5, r3
    5c2c:	d00f      	beq.n	5c4e <clock_stop+0x66>
    5c2e:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5c30:	f242 7410 	movw	r4, #10000	; 0x2710
    5c34:	e029      	b.n	5c8a <clock_stop+0xa2>
    p_reg->INTENCLR = mask;
    5c36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c3a:	2201      	movs	r2, #1
    5c3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c40:	2100      	movs	r1, #0
    5c42:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    5c46:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c4a:	605a      	str	r2, [r3, #4]
}
    5c4c:	e7ea      	b.n	5c24 <clock_stop+0x3c>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5c4e:	f10d 0607 	add.w	r6, sp, #7
    5c52:	e7ed      	b.n	5c30 <clock_stop+0x48>
            if (p_clk_src != NULL)
    5c54:	b136      	cbz	r6, 5c64 <clock_stop+0x7c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5c56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c5a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5c5e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5c62:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5c64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5c68:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    5c6c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5c70:	d12f      	bne.n	5cd2 <clock_stop+0xea>
    return false;
    5c72:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5c74:	b38b      	cbz	r3, 5cda <clock_stop+0xf2>
    5c76:	b11e      	cbz	r6, 5c80 <clock_stop+0x98>
    5c78:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5c7c:	2b01      	cmp	r3, #1
    5c7e:	d12c      	bne.n	5cda <clock_stop+0xf2>
    5c80:	2001      	movs	r0, #1
    5c82:	f005 ff17 	bl	bab4 <nrfx_busy_wait>
    5c86:	3c01      	subs	r4, #1
    5c88:	d027      	beq.n	5cda <clock_stop+0xf2>
    switch (domain)
    5c8a:	2d00      	cmp	r5, #0
    5c8c:	d0e2      	beq.n	5c54 <clock_stop+0x6c>
    5c8e:	2d01      	cmp	r5, #1
    5c90:	d00e      	beq.n	5cb0 <clock_stop+0xc8>
            NRFX_ASSERT(0);
    5c92:	4f19      	ldr	r7, [pc, #100]	; (5cf8 <clock_stop+0x110>)
    5c94:	f44f 734f 	mov.w	r3, #828	; 0x33c
    5c98:	463a      	mov	r2, r7
    5c9a:	4915      	ldr	r1, [pc, #84]	; (5cf0 <clock_stop+0x108>)
    5c9c:	4815      	ldr	r0, [pc, #84]	; (5cf4 <clock_stop+0x10c>)
    5c9e:	f004 fe2d 	bl	a8fc <assert_print>
    5ca2:	f44f 714f 	mov.w	r1, #828	; 0x33c
    5ca6:	4638      	mov	r0, r7
    5ca8:	f004 fe21 	bl	a8ee <assert_post_action>
            return false;
    5cac:	2300      	movs	r3, #0
    5cae:	e7e1      	b.n	5c74 <clock_stop+0x8c>
            if (p_clk_src != NULL)
    5cb0:	b136      	cbz	r6, 5cc0 <clock_stop+0xd8>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5cb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5cb6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    5cba:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5cbe:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5cc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5cc4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    5cc8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5ccc:	d103      	bne.n	5cd6 <clock_stop+0xee>
    return false;
    5cce:	2300      	movs	r3, #0
    5cd0:	e7d0      	b.n	5c74 <clock_stop+0x8c>
                return true;
    5cd2:	2301      	movs	r3, #1
    5cd4:	e7ce      	b.n	5c74 <clock_stop+0x8c>
                return true;
    5cd6:	2301      	movs	r3, #1
    5cd8:	e7cc      	b.n	5c74 <clock_stop+0x8c>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    5cda:	2d01      	cmp	r5, #1
    5cdc:	d001      	beq.n	5ce2 <clock_stop+0xfa>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    5cde:	b003      	add	sp, #12
    5ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_clock_cb.hfclk_started = false;
    5ce2:	4b06      	ldr	r3, [pc, #24]	; (5cfc <clock_stop+0x114>)
    5ce4:	2200      	movs	r2, #0
    5ce6:	715a      	strb	r2, [r3, #5]
    5ce8:	e7f9      	b.n	5cde <clock_stop+0xf6>
    5cea:	bf00      	nop
    5cec:	0000d6dc 	.word	0x0000d6dc
    5cf0:	0000c914 	.word	0x0000c914
    5cf4:	0000c254 	.word	0x0000c254
    5cf8:	0000d71c 	.word	0x0000d71c
    5cfc:	20004d54 	.word	0x20004d54

00005d00 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    5d00:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
    5d02:	4604      	mov	r4, r0
    5d04:	b150      	cbz	r0, 5d1c <nrfx_clock_init+0x1c>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5d06:	4b0d      	ldr	r3, [pc, #52]	; (5d3c <nrfx_clock_init+0x3c>)
    5d08:	791b      	ldrb	r3, [r3, #4]
    5d0a:	b9ab      	cbnz	r3, 5d38 <nrfx_clock_init+0x38>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    5d0c:	4b0b      	ldr	r3, [pc, #44]	; (5d3c <nrfx_clock_init+0x3c>)
    5d0e:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    5d10:	2201      	movs	r2, #1
    5d12:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    5d14:	2200      	movs	r2, #0
    5d16:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5d18:	4809      	ldr	r0, [pc, #36]	; (5d40 <nrfx_clock_init+0x40>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5d1a:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
    5d1c:	4d09      	ldr	r5, [pc, #36]	; (5d44 <nrfx_clock_init+0x44>)
    5d1e:	f240 1315 	movw	r3, #277	; 0x115
    5d22:	462a      	mov	r2, r5
    5d24:	4908      	ldr	r1, [pc, #32]	; (5d48 <nrfx_clock_init+0x48>)
    5d26:	4809      	ldr	r0, [pc, #36]	; (5d4c <nrfx_clock_init+0x4c>)
    5d28:	f004 fde8 	bl	a8fc <assert_print>
    5d2c:	f240 1115 	movw	r1, #277	; 0x115
    5d30:	4628      	mov	r0, r5
    5d32:	f004 fddc 	bl	a8ee <assert_post_action>
    5d36:	e7e6      	b.n	5d06 <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5d38:	4805      	ldr	r0, [pc, #20]	; (5d50 <nrfx_clock_init+0x50>)
    return err_code;
    5d3a:	e7ee      	b.n	5d1a <nrfx_clock_init+0x1a>
    5d3c:	20004d54 	.word	0x20004d54
    5d40:	0bad0000 	.word	0x0bad0000
    5d44:	0000d6dc 	.word	0x0000d6dc
    5d48:	0000d750 	.word	0x0000d750
    5d4c:	0000c254 	.word	0x0000c254
    5d50:	0bad000c 	.word	0x0bad000c

00005d54 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    5d54:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5d56:	4b0f      	ldr	r3, [pc, #60]	; (5d94 <nrfx_clock_enable+0x40>)
    5d58:	791b      	ldrb	r3, [r3, #4]
    5d5a:	b153      	cbz	r3, 5d72 <nrfx_clock_enable+0x1e>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5d5c:	2000      	movs	r0, #0
    5d5e:	f7fd f819 	bl	2d94 <arch_irq_is_enabled>
    5d62:	b1a0      	cbz	r0, 5d8e <nrfx_clock_enable+0x3a>
    nrfx_power_clock_irq_init();
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    5d64:	f005 feaa 	bl	babc <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5d68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d6c:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    5d70:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5d72:	4c09      	ldr	r4, [pc, #36]	; (5d98 <nrfx_clock_enable+0x44>)
    5d74:	f44f 7397 	mov.w	r3, #302	; 0x12e
    5d78:	4622      	mov	r2, r4
    5d7a:	4908      	ldr	r1, [pc, #32]	; (5d9c <nrfx_clock_enable+0x48>)
    5d7c:	4808      	ldr	r0, [pc, #32]	; (5da0 <nrfx_clock_enable+0x4c>)
    5d7e:	f004 fdbd 	bl	a8fc <assert_print>
    5d82:	f44f 7197 	mov.w	r1, #302	; 0x12e
    5d86:	4620      	mov	r0, r4
    5d88:	f004 fdb1 	bl	a8ee <assert_post_action>
    5d8c:	e7e6      	b.n	5d5c <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5d8e:	f7fc fff3 	bl	2d78 <arch_irq_enable>
    5d92:	e7e7      	b.n	5d64 <nrfx_clock_enable+0x10>
    5d94:	20004d54 	.word	0x20004d54
    5d98:	0000d6dc 	.word	0x0000d6dc
    5d9c:	0000d760 	.word	0x0000d760
    5da0:	0000c254 	.word	0x0000c254

00005da4 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    5da4:	b530      	push	{r4, r5, lr}
    5da6:	b083      	sub	sp, #12
    5da8:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5daa:	4b34      	ldr	r3, [pc, #208]	; (5e7c <nrfx_clock_start+0xd8>)
    5dac:	791b      	ldrb	r3, [r3, #4]
    5dae:	b183      	cbz	r3, 5dd2 <nrfx_clock_start+0x2e>
    switch (domain)
    5db0:	b1ec      	cbz	r4, 5dee <nrfx_clock_start+0x4a>
    5db2:	2c01      	cmp	r4, #1
    5db4:	d055      	beq.n	5e62 <nrfx_clock_start+0xbe>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5db6:	4c32      	ldr	r4, [pc, #200]	; (5e80 <nrfx_clock_start+0xdc>)
    5db8:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    5dbc:	4622      	mov	r2, r4
    5dbe:	4931      	ldr	r1, [pc, #196]	; (5e84 <nrfx_clock_start+0xe0>)
    5dc0:	4831      	ldr	r0, [pc, #196]	; (5e88 <nrfx_clock_start+0xe4>)
    5dc2:	f004 fd9b 	bl	a8fc <assert_print>
    5dc6:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    5dca:	4620      	mov	r0, r4
    5dcc:	f004 fd8f 	bl	a8ee <assert_post_action>
            break;
    }
}
    5dd0:	e052      	b.n	5e78 <nrfx_clock_start+0xd4>
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5dd2:	4d2b      	ldr	r5, [pc, #172]	; (5e80 <nrfx_clock_start+0xdc>)
    5dd4:	f44f 73b4 	mov.w	r3, #360	; 0x168
    5dd8:	462a      	mov	r2, r5
    5dda:	492c      	ldr	r1, [pc, #176]	; (5e8c <nrfx_clock_start+0xe8>)
    5ddc:	482a      	ldr	r0, [pc, #168]	; (5e88 <nrfx_clock_start+0xe4>)
    5dde:	f004 fd8d 	bl	a8fc <assert_print>
    5de2:	f44f 71b4 	mov.w	r1, #360	; 0x168
    5de6:	4628      	mov	r0, r5
    5de8:	f004 fd81 	bl	a8ee <assert_post_action>
    5dec:	e7e0      	b.n	5db0 <nrfx_clock_start+0xc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5dee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5df2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5df6:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5dfa:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5dfc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    5e00:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5e04:	d117      	bne.n	5e36 <nrfx_clock_start+0x92>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    5e06:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    5e0a:	f013 0f01 	tst.w	r3, #1
    5e0e:	d116      	bne.n	5e3e <nrfx_clock_start+0x9a>
                    lfclksrc = clock_initial_lfclksrc_get();
    5e10:	f005 fe54 	bl	babc <clock_initial_lfclksrc_get>
    5e14:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    5e16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e1a:	9a01      	ldr	r2, [sp, #4]
    5e1c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e20:	2200      	movs	r2, #0
    5e22:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5e26:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    5e2a:	2202      	movs	r2, #2
    5e2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e30:	2201      	movs	r2, #1
    5e32:	609a      	str	r2, [r3, #8]
}
    5e34:	e020      	b.n	5e78 <nrfx_clock_start+0xd4>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    5e36:	a801      	add	r0, sp, #4
    5e38:	f005 fe42 	bl	bac0 <clock_lfclksrc_tweak>
    5e3c:	e7eb      	b.n	5e16 <nrfx_clock_start+0x72>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5e3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e42:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5e46:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    5e4a:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    5e4c:	a801      	add	r0, sp, #4
    5e4e:	f005 fe37 	bl	bac0 <clock_lfclksrc_tweak>
    5e52:	2800      	cmp	r0, #0
    5e54:	d0df      	beq.n	5e16 <nrfx_clock_start+0x72>
    p_reg->INTENSET = mask;
    5e56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e5a:	2202      	movs	r2, #2
    5e5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    5e60:	e00a      	b.n	5e78 <nrfx_clock_start+0xd4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e66:	2200      	movs	r2, #0
    5e68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5e6c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    5e70:	2201      	movs	r2, #1
    5e72:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e76:	601a      	str	r2, [r3, #0]
}
    5e78:	b003      	add	sp, #12
    5e7a:	bd30      	pop	{r4, r5, pc}
    5e7c:	20004d54 	.word	0x20004d54
    5e80:	0000d6dc 	.word	0x0000d6dc
    5e84:	0000c914 	.word	0x0000c914
    5e88:	0000c254 	.word	0x0000c254
    5e8c:	0000d760 	.word	0x0000d760

00005e90 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    5e90:	b538      	push	{r3, r4, r5, lr}
    5e92:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5e94:	4b0a      	ldr	r3, [pc, #40]	; (5ec0 <nrfx_clock_stop+0x30>)
    5e96:	791b      	ldrb	r3, [r3, #4]
    5e98:	b11b      	cbz	r3, 5ea2 <nrfx_clock_stop+0x12>
    clock_stop(domain);
    5e9a:	4620      	mov	r0, r4
    5e9c:	f7ff fea4 	bl	5be8 <clock_stop>
}
    5ea0:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5ea2:	4d08      	ldr	r5, [pc, #32]	; (5ec4 <nrfx_clock_stop+0x34>)
    5ea4:	f240 13ad 	movw	r3, #429	; 0x1ad
    5ea8:	462a      	mov	r2, r5
    5eaa:	4907      	ldr	r1, [pc, #28]	; (5ec8 <nrfx_clock_stop+0x38>)
    5eac:	4807      	ldr	r0, [pc, #28]	; (5ecc <nrfx_clock_stop+0x3c>)
    5eae:	f004 fd25 	bl	a8fc <assert_print>
    5eb2:	f240 11ad 	movw	r1, #429	; 0x1ad
    5eb6:	4628      	mov	r0, r5
    5eb8:	f004 fd19 	bl	a8ee <assert_post_action>
    5ebc:	e7ed      	b.n	5e9a <nrfx_clock_stop+0xa>
    5ebe:	bf00      	nop
    5ec0:	20004d54 	.word	0x20004d54
    5ec4:	0000d6dc 	.word	0x0000d6dc
    5ec8:	0000d760 	.word	0x0000d760
    5ecc:	0000c254 	.word	0x0000c254

00005ed0 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5ed0:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5ed2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ed6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5eda:	b18b      	cbz	r3, 5f00 <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5edc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5ee0:	2200      	movs	r2, #0
    5ee2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5ee6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    5eea:	2201      	movs	r2, #1
    5eec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    5ef0:	4b15      	ldr	r3, [pc, #84]	; (5f48 <nrfx_power_clock_irq_handler+0x78>)
    5ef2:	795b      	ldrb	r3, [r3, #5]
    5ef4:	b923      	cbnz	r3, 5f00 <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    5ef6:	4b14      	ldr	r3, [pc, #80]	; (5f48 <nrfx_power_clock_irq_handler+0x78>)
    5ef8:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5efa:	681b      	ldr	r3, [r3, #0]
    5efc:	2000      	movs	r0, #0
    5efe:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5f00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f04:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5f08:	b19b      	cbz	r3, 5f32 <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5f0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f0e:	2200      	movs	r2, #0
    5f10:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5f14:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5f18:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5f1c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    5f20:	f012 0f03 	tst.w	r2, #3
    5f24:	d106      	bne.n	5f34 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5f26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f2a:	2201      	movs	r2, #1
    5f2c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5f30:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5f32:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    5f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f38:	2202      	movs	r2, #2
    5f3a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5f3e:	4b02      	ldr	r3, [pc, #8]	; (5f48 <nrfx_power_clock_irq_handler+0x78>)
    5f40:	681b      	ldr	r3, [r3, #0]
    5f42:	2001      	movs	r0, #1
    5f44:	4798      	blx	r3
}
    5f46:	e7f4      	b.n	5f32 <nrfx_power_clock_irq_handler+0x62>
    5f48:	20004d54 	.word	0x20004d54

00005f4c <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5f4c:	3008      	adds	r0, #8
    5f4e:	4b03      	ldr	r3, [pc, #12]	; (5f5c <pin_in_use+0x10>)
    5f50:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5f54:	f000 0001 	and.w	r0, r0, #1
    5f58:	4770      	bx	lr
    5f5a:	bf00      	nop
    5f5c:	20004064 	.word	0x20004064

00005f60 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5f60:	3008      	adds	r0, #8
    5f62:	4b03      	ldr	r3, [pc, #12]	; (5f70 <pin_in_use_by_te+0x10>)
    5f64:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5f68:	f3c0 1040 	ubfx	r0, r0, #5, #1
    5f6c:	4770      	bx	lr
    5f6e:	bf00      	nop
    5f70:	20004064 	.word	0x20004064

00005f74 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    5f74:	3008      	adds	r0, #8
    5f76:	4b04      	ldr	r3, [pc, #16]	; (5f88 <pin_has_trigger+0x14>)
    5f78:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5f7c:	f010 001c 	ands.w	r0, r0, #28
    5f80:	bf18      	it	ne
    5f82:	2001      	movne	r0, #1
    5f84:	4770      	bx	lr
    5f86:	bf00      	nop
    5f88:	20004064 	.word	0x20004064

00005f8c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5f8c:	3008      	adds	r0, #8
    5f8e:	4b03      	ldr	r3, [pc, #12]	; (5f9c <pin_is_output+0x10>)
    5f90:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5f94:	f3c0 0040 	ubfx	r0, r0, #1, #1
    5f98:	4770      	bx	lr
    5f9a:	bf00      	nop
    5f9c:	20004064 	.word	0x20004064

00005fa0 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5fa0:	3008      	adds	r0, #8
    5fa2:	4b02      	ldr	r3, [pc, #8]	; (5fac <pin_te_get+0xc>)
    5fa4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5fa8:	0b40      	lsrs	r0, r0, #13
    5faa:	4770      	bx	lr
    5fac:	20004064 	.word	0x20004064

00005fb0 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5fb0:	2200      	movs	r2, #0
    5fb2:	e004      	b.n	5fbe <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5fb8:	4283      	cmp	r3, r0
    5fba:	d00f      	beq.n	5fdc <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5fbc:	3201      	adds	r2, #1
    5fbe:	2a2f      	cmp	r2, #47	; 0x2f
    5fc0:	d80a      	bhi.n	5fd8 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5fc2:	f102 0308 	add.w	r3, r2, #8
    5fc6:	4906      	ldr	r1, [pc, #24]	; (5fe0 <handler_in_use+0x30>)
    5fc8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    5fcc:	f413 7f80 	tst.w	r3, #256	; 0x100
    5fd0:	d0f0      	beq.n	5fb4 <handler_in_use+0x4>
    5fd2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    5fd6:	e7ef      	b.n	5fb8 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    5fd8:	2000      	movs	r0, #0
    5fda:	4770      	bx	lr
            return true;
    5fdc:	2001      	movs	r0, #1
}
    5fde:	4770      	bx	lr
    5fe0:	20004064 	.word	0x20004064

00005fe4 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    5fe4:	2300      	movs	r3, #0
    5fe6:	b113      	cbz	r3, 5fee <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    5fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5fec:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5fee:	4a07      	ldr	r2, [pc, #28]	; (600c <find_handler+0x28>)
    5ff0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    5ff4:	4282      	cmp	r2, r0
    5ff6:	d001      	beq.n	5ffc <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    5ff8:	3301      	adds	r3, #1
    5ffa:	e7f4      	b.n	5fe6 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5ffc:	4a03      	ldr	r2, [pc, #12]	; (600c <find_handler+0x28>)
    5ffe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    6002:	6852      	ldr	r2, [r2, #4]
    6004:	428a      	cmp	r2, r1
    6006:	d1f7      	bne.n	5ff8 <find_handler+0x14>
            return i;
    6008:	4618      	mov	r0, r3
    600a:	4770      	bx	lr
    600c:	20004064 	.word	0x20004064

00006010 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6010:	3008      	adds	r0, #8
    6012:	4b06      	ldr	r3, [pc, #24]	; (602c <channel_handler_get+0x1c>)
    6014:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    6018:	f410 7f80 	tst.w	r0, #256	; 0x100
    601c:	d004      	beq.n	6028 <channel_handler_get+0x18>
    601e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    6022:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6026:	4770      	bx	lr
        return NULL;
    6028:	2000      	movs	r0, #0
}
    602a:	4770      	bx	lr
    602c:	20004064 	.word	0x20004064

00006030 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    6030:	b570      	push	{r4, r5, r6, lr}
    6032:	4604      	mov	r4, r0
    6034:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    6036:	f7ff ffeb 	bl	6010 <channel_handler_get>

    if (handler)
    603a:	b120      	cbz	r0, 6046 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    603c:	6806      	ldr	r6, [r0, #0]
    603e:	6842      	ldr	r2, [r0, #4]
    6040:	4629      	mov	r1, r5
    6042:	4620      	mov	r0, r4
    6044:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    6046:	4b04      	ldr	r3, [pc, #16]	; (6058 <call_handler+0x28>)
    6048:	689b      	ldr	r3, [r3, #8]
    604a:	b123      	cbz	r3, 6056 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    604c:	4a02      	ldr	r2, [pc, #8]	; (6058 <call_handler+0x28>)
    604e:	68d2      	ldr	r2, [r2, #12]
    6050:	4629      	mov	r1, r5
    6052:	4620      	mov	r0, r4
    6054:	4798      	blx	r3
    }
}
    6056:	bd70      	pop	{r4, r5, r6, pc}
    6058:	20004064 	.word	0x20004064

0000605c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    605c:	f100 0208 	add.w	r2, r0, #8
    6060:	4b16      	ldr	r3, [pc, #88]	; (60bc <release_handler+0x60>)
    6062:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6066:	f413 7f80 	tst.w	r3, #256	; 0x100
    606a:	d026      	beq.n	60ba <release_handler+0x5e>
{
    606c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    606e:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    6072:	4610      	mov	r0, r2
    6074:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6078:	4a10      	ldr	r2, [pc, #64]	; (60bc <release_handler+0x60>)
    607a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    607e:	4620      	mov	r0, r4
    6080:	f7ff ff96 	bl	5fb0 <handler_in_use>
    6084:	b100      	cbz	r0, 6088 <release_handler+0x2c>
}
    6086:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    6088:	480c      	ldr	r0, [pc, #48]	; (60bc <release_handler+0x60>)
    608a:	2300      	movs	r3, #0
    608c:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6090:	4621      	mov	r1, r4
    6092:	3074      	adds	r0, #116	; 0x74
    6094:	f7ff fd86 	bl	5ba4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    6098:	4b09      	ldr	r3, [pc, #36]	; (60c0 <release_handler+0x64>)
    609a:	4298      	cmp	r0, r3
    609c:	d0f3      	beq.n	6086 <release_handler+0x2a>
    609e:	4c09      	ldr	r4, [pc, #36]	; (60c4 <release_handler+0x68>)
    60a0:	f44f 7399 	mov.w	r3, #306	; 0x132
    60a4:	4622      	mov	r2, r4
    60a6:	4908      	ldr	r1, [pc, #32]	; (60c8 <release_handler+0x6c>)
    60a8:	4808      	ldr	r0, [pc, #32]	; (60cc <release_handler+0x70>)
    60aa:	f004 fc27 	bl	a8fc <assert_print>
    60ae:	f44f 7199 	mov.w	r1, #306	; 0x132
    60b2:	4620      	mov	r0, r4
    60b4:	f004 fc1b 	bl	a8ee <assert_post_action>
    60b8:	e7e5      	b.n	6086 <release_handler+0x2a>
    60ba:	4770      	bx	lr
    60bc:	20004064 	.word	0x20004064
    60c0:	0bad0000 	.word	0x0bad0000
    60c4:	0000d780 	.word	0x0000d780
    60c8:	0000d7c0 	.word	0x0000d7c0
    60cc:	0000c254 	.word	0x0000c254

000060d0 <pin_handler_trigger_uninit>:
{
    60d0:	b510      	push	{r4, lr}
    60d2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    60d4:	f7ff ff44 	bl	5f60 <pin_in_use_by_te>
    60d8:	b140      	cbz	r0, 60ec <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    60da:	4620      	mov	r0, r4
    60dc:	f7ff ff60 	bl	5fa0 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    60e0:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    60e4:	4b06      	ldr	r3, [pc, #24]	; (6100 <pin_handler_trigger_uninit+0x30>)
    60e6:	2200      	movs	r2, #0
    60e8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    60ec:	4620      	mov	r0, r4
    60ee:	f7ff ffb5 	bl	605c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    60f2:	3408      	adds	r4, #8
    60f4:	4b03      	ldr	r3, [pc, #12]	; (6104 <pin_handler_trigger_uninit+0x34>)
    60f6:	2200      	movs	r2, #0
    60f8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    60fc:	bd10      	pop	{r4, pc}
    60fe:	bf00      	nop
    6100:	40006000 	.word	0x40006000
    6104:	20004064 	.word	0x20004064

00006108 <pin_handler_set>:
{
    6108:	b570      	push	{r4, r5, r6, lr}
    610a:	b082      	sub	sp, #8
    610c:	4606      	mov	r6, r0
    610e:	460c      	mov	r4, r1
    6110:	4615      	mov	r5, r2
    release_handler(pin);
    6112:	f7ff ffa3 	bl	605c <release_handler>
    if (!handler)
    6116:	b324      	cbz	r4, 6162 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    6118:	4629      	mov	r1, r5
    611a:	4620      	mov	r0, r4
    611c:	f7ff ff62 	bl	5fe4 <find_handler>
    if (handler_id < 0)
    6120:	1e03      	subs	r3, r0, #0
    6122:	db13      	blt.n	614c <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    6124:	4a10      	ldr	r2, [pc, #64]	; (6168 <pin_handler_set+0x60>)
    6126:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    612a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    612e:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6130:	025b      	lsls	r3, r3, #9
    6132:	b29b      	uxth	r3, r3
    6134:	f106 0008 	add.w	r0, r6, #8
    6138:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    613c:	430b      	orrs	r3, r1
    613e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6142:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    6146:	4809      	ldr	r0, [pc, #36]	; (616c <pin_handler_set+0x64>)
}
    6148:	b002      	add	sp, #8
    614a:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    614c:	f10d 0107 	add.w	r1, sp, #7
    6150:	4807      	ldr	r0, [pc, #28]	; (6170 <pin_handler_set+0x68>)
    6152:	f7ff fcff 	bl	5b54 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    6156:	4b05      	ldr	r3, [pc, #20]	; (616c <pin_handler_set+0x64>)
    6158:	4298      	cmp	r0, r3
    615a:	d1f5      	bne.n	6148 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    615c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6160:	e7e0      	b.n	6124 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    6162:	4802      	ldr	r0, [pc, #8]	; (616c <pin_handler_set+0x64>)
    6164:	e7f0      	b.n	6148 <pin_handler_set+0x40>
    6166:	bf00      	nop
    6168:	20004064 	.word	0x20004064
    616c:	0bad0000 	.word	0x0bad0000
    6170:	200040d8 	.word	0x200040d8

00006174 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    6174:	b538      	push	{r3, r4, r5, lr}
    6176:	4604      	mov	r4, r0
    while (mask)
    6178:	e018      	b.n	61ac <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    617a:	fa94 f3a4 	rbit	r3, r4
    617e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    6182:	2201      	movs	r2, #1
    6184:	409a      	lsls	r2, r3
    6186:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    618a:	4a0a      	ldr	r2, [pc, #40]	; (61b4 <gpiote_evt_handle+0x40>)
    618c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6190:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    6194:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    6198:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    619c:	f3c0 4001 	ubfx	r0, r0, #16, #2
    61a0:	f005 fcba 	bl	bb18 <gpiote_polarity_to_trigger>
    61a4:	4601      	mov	r1, r0
    61a6:	4628      	mov	r0, r5
    61a8:	f7ff ff42 	bl	6030 <call_handler>
    while (mask)
    61ac:	2c00      	cmp	r4, #0
    61ae:	d1e4      	bne.n	617a <gpiote_evt_handle+0x6>
    }
}
    61b0:	bd38      	pop	{r3, r4, r5, pc}
    61b2:	bf00      	nop
    61b4:	40006000 	.word	0x40006000

000061b8 <latch_pending_read_and_check>:
{
    61b8:	b082      	sub	sp, #8
    61ba:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    61bc:	4b11      	ldr	r3, [pc, #68]	; (6204 <latch_pending_read_and_check+0x4c>)
    61be:	e893 0003 	ldmia.w	r3, {r0, r1}
    61c2:	ab02      	add	r3, sp, #8
    61c4:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    61c8:	4660      	mov	r0, ip
    61ca:	2300      	movs	r3, #0
    61cc:	e00b      	b.n	61e6 <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    61ce:	aa02      	add	r2, sp, #8
    61d0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    61d4:	f852 2c08 	ldr.w	r2, [r2, #-8]
    61d8:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    61dc:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    61e0:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    61e4:	3301      	adds	r3, #1
    61e6:	2b01      	cmp	r3, #1
    61e8:	d9f1      	bls.n	61ce <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    61ea:	2300      	movs	r3, #0
    61ec:	2b01      	cmp	r3, #1
    61ee:	d804      	bhi.n	61fa <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
    61f0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
    61f4:	b922      	cbnz	r2, 6200 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    61f6:	3301      	adds	r3, #1
    61f8:	e7f8      	b.n	61ec <latch_pending_read_and_check+0x34>
    return false;
    61fa:	2000      	movs	r0, #0
}
    61fc:	b002      	add	sp, #8
    61fe:	4770      	bx	lr
            return true;
    6200:	2001      	movs	r0, #1
    6202:	e7fb      	b.n	61fc <latch_pending_read_and_check+0x44>
    6204:	0000c130 	.word	0x0000c130

00006208 <next_sense_cond_call_handler>:
{
    6208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    620c:	4604      	mov	r4, r0
    620e:	460d      	mov	r5, r1
    6210:	4616      	mov	r6, r2
    if (is_level(trigger))
    6212:	4608      	mov	r0, r1
    6214:	f005 fc82 	bl	bb1c <is_level>
    6218:	bb60      	cbnz	r0, 6274 <next_sense_cond_call_handler+0x6c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    621a:	2e02      	cmp	r6, #2
    621c:	f000 80f5 	beq.w	640a <next_sense_cond_call_handler+0x202>
    6220:	f04f 0802 	mov.w	r8, #2
    switch (port)
    6224:	0963      	lsrs	r3, r4, #5
    6226:	f000 80f3 	beq.w	6410 <next_sense_cond_call_handler+0x208>
    622a:	2b01      	cmp	r3, #1
    622c:	f040 80f3 	bne.w	6416 <next_sense_cond_call_handler+0x20e>
            mask = P1_FEATURE_PINS_PRESENT;
    6230:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6234:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6238:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    623a:	f013 0f01 	tst.w	r3, #1
    623e:	f000 80ec 	beq.w	641a <next_sense_cond_call_handler+0x212>
    *p_pin = pin_number & 0x1F;
    6242:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6246:	0963      	lsrs	r3, r4, #5
    6248:	f000 80f5 	beq.w	6436 <next_sense_cond_call_handler+0x22e>
    624c:	2b01      	cmp	r3, #1
    624e:	f000 80f5 	beq.w	643c <next_sense_cond_call_handler+0x234>
            NRFX_ASSERT(0);
    6252:	f8df 9224 	ldr.w	r9, [pc, #548]	; 6478 <next_sense_cond_call_handler+0x270>
    6256:	f240 232e 	movw	r3, #558	; 0x22e
    625a:	464a      	mov	r2, r9
    625c:	4987      	ldr	r1, [pc, #540]	; (647c <next_sense_cond_call_handler+0x274>)
    625e:	4888      	ldr	r0, [pc, #544]	; (6480 <next_sense_cond_call_handler+0x278>)
    6260:	f004 fb4c 	bl	a8fc <assert_print>
    6264:	f240 212e 	movw	r1, #558	; 0x22e
    6268:	4648      	mov	r0, r9
    626a:	f004 fb40 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    626e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6272:	e0e4      	b.n	643e <next_sense_cond_call_handler+0x236>
        call_handler(pin, trigger);
    6274:	4629      	mov	r1, r5
    6276:	4620      	mov	r0, r4
    6278:	f7ff feda 	bl	6030 <call_handler>
    switch (port)
    627c:	0963      	lsrs	r3, r4, #5
    627e:	d01f      	beq.n	62c0 <next_sense_cond_call_handler+0xb8>
    6280:	2b01      	cmp	r3, #1
    6282:	d120      	bne.n	62c6 <next_sense_cond_call_handler+0xbe>
            mask = P1_FEATURE_PINS_PRESENT;
    6284:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6288:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    628c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    628e:	f013 0f01 	tst.w	r3, #1
    6292:	d01a      	beq.n	62ca <next_sense_cond_call_handler+0xc2>
    *p_pin = pin_number & 0x1F;
    6294:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6298:	0963      	lsrs	r3, r4, #5
    629a:	d024      	beq.n	62e6 <next_sense_cond_call_handler+0xde>
    629c:	2b01      	cmp	r3, #1
    629e:	d025      	beq.n	62ec <next_sense_cond_call_handler+0xe4>
            NRFX_ASSERT(0);
    62a0:	4f75      	ldr	r7, [pc, #468]	; (6478 <next_sense_cond_call_handler+0x270>)
    62a2:	f240 232e 	movw	r3, #558	; 0x22e
    62a6:	463a      	mov	r2, r7
    62a8:	4974      	ldr	r1, [pc, #464]	; (647c <next_sense_cond_call_handler+0x274>)
    62aa:	4875      	ldr	r0, [pc, #468]	; (6480 <next_sense_cond_call_handler+0x278>)
    62ac:	f004 fb26 	bl	a8fc <assert_print>
    62b0:	f240 212e 	movw	r1, #558	; 0x22e
    62b4:	4638      	mov	r0, r7
    62b6:	f004 fb1a 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    62ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    62be:	e016      	b.n	62ee <next_sense_cond_call_handler+0xe6>
            mask = P0_FEATURE_PINS_PRESENT;
    62c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    62c4:	e7e0      	b.n	6288 <next_sense_cond_call_handler+0x80>
    switch (port)
    62c6:	2300      	movs	r3, #0
    62c8:	e7de      	b.n	6288 <next_sense_cond_call_handler+0x80>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    62ca:	4d6b      	ldr	r5, [pc, #428]	; (6478 <next_sense_cond_call_handler+0x270>)
    62cc:	f240 2329 	movw	r3, #553	; 0x229
    62d0:	462a      	mov	r2, r5
    62d2:	496c      	ldr	r1, [pc, #432]	; (6484 <next_sense_cond_call_handler+0x27c>)
    62d4:	486a      	ldr	r0, [pc, #424]	; (6480 <next_sense_cond_call_handler+0x278>)
    62d6:	f004 fb11 	bl	a8fc <assert_print>
    62da:	f240 2129 	movw	r1, #553	; 0x229
    62de:	4628      	mov	r0, r5
    62e0:	f004 fb05 	bl	a8ee <assert_post_action>
    62e4:	e7d6      	b.n	6294 <next_sense_cond_call_handler+0x8c>
        case 0: return NRF_P0;
    62e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    62ea:	e000      	b.n	62ee <next_sense_cond_call_handler+0xe6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    62ec:	4b66      	ldr	r3, [pc, #408]	; (6488 <next_sense_cond_call_handler+0x280>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    62ee:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    62f2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    62f6:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    62fa:	429e      	cmp	r6, r3
    62fc:	f040 80af 	bne.w	645e <next_sense_cond_call_handler+0x256>
    switch (port)
    6300:	0963      	lsrs	r3, r4, #5
    6302:	d01f      	beq.n	6344 <next_sense_cond_call_handler+0x13c>
    6304:	2b01      	cmp	r3, #1
    6306:	d120      	bne.n	634a <next_sense_cond_call_handler+0x142>
            mask = P1_FEATURE_PINS_PRESENT;
    6308:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    630c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6310:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6312:	f013 0f01 	tst.w	r3, #1
    6316:	d01a      	beq.n	634e <next_sense_cond_call_handler+0x146>
    *p_pin = pin_number & 0x1F;
    6318:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    631c:	0963      	lsrs	r3, r4, #5
    631e:	d024      	beq.n	636a <next_sense_cond_call_handler+0x162>
    6320:	2b01      	cmp	r3, #1
    6322:	d025      	beq.n	6370 <next_sense_cond_call_handler+0x168>
            NRFX_ASSERT(0);
    6324:	4f54      	ldr	r7, [pc, #336]	; (6478 <next_sense_cond_call_handler+0x270>)
    6326:	f240 232e 	movw	r3, #558	; 0x22e
    632a:	463a      	mov	r2, r7
    632c:	4953      	ldr	r1, [pc, #332]	; (647c <next_sense_cond_call_handler+0x274>)
    632e:	4854      	ldr	r0, [pc, #336]	; (6480 <next_sense_cond_call_handler+0x278>)
    6330:	f004 fae4 	bl	a8fc <assert_print>
    6334:	f240 212e 	movw	r1, #558	; 0x22e
    6338:	4638      	mov	r0, r7
    633a:	f004 fad8 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    633e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6342:	e016      	b.n	6372 <next_sense_cond_call_handler+0x16a>
            mask = P0_FEATURE_PINS_PRESENT;
    6344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6348:	e7e0      	b.n	630c <next_sense_cond_call_handler+0x104>
    switch (port)
    634a:	2300      	movs	r3, #0
    634c:	e7de      	b.n	630c <next_sense_cond_call_handler+0x104>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    634e:	4d4a      	ldr	r5, [pc, #296]	; (6478 <next_sense_cond_call_handler+0x270>)
    6350:	f240 2329 	movw	r3, #553	; 0x229
    6354:	462a      	mov	r2, r5
    6356:	494b      	ldr	r1, [pc, #300]	; (6484 <next_sense_cond_call_handler+0x27c>)
    6358:	4849      	ldr	r0, [pc, #292]	; (6480 <next_sense_cond_call_handler+0x278>)
    635a:	f004 facf 	bl	a8fc <assert_print>
    635e:	f240 2129 	movw	r1, #553	; 0x229
    6362:	4628      	mov	r0, r5
    6364:	f004 fac3 	bl	a8ee <assert_post_action>
    6368:	e7d6      	b.n	6318 <next_sense_cond_call_handler+0x110>
        case 0: return NRF_P0;
    636a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    636e:	e000      	b.n	6372 <next_sense_cond_call_handler+0x16a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6370:	4945      	ldr	r1, [pc, #276]	; (6488 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6372:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    6376:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    637a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    637e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
    6382:	0963      	lsrs	r3, r4, #5
    6384:	d01f      	beq.n	63c6 <next_sense_cond_call_handler+0x1be>
    6386:	2b01      	cmp	r3, #1
    6388:	d120      	bne.n	63cc <next_sense_cond_call_handler+0x1c4>
            mask = P1_FEATURE_PINS_PRESENT;
    638a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    638e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6392:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6394:	f013 0f01 	tst.w	r3, #1
    6398:	d01a      	beq.n	63d0 <next_sense_cond_call_handler+0x1c8>
    *p_pin = pin_number & 0x1F;
    639a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    639e:	0964      	lsrs	r4, r4, #5
    63a0:	d024      	beq.n	63ec <next_sense_cond_call_handler+0x1e4>
    63a2:	2c01      	cmp	r4, #1
    63a4:	d025      	beq.n	63f2 <next_sense_cond_call_handler+0x1ea>
            NRFX_ASSERT(0);
    63a6:	4c34      	ldr	r4, [pc, #208]	; (6478 <next_sense_cond_call_handler+0x270>)
    63a8:	f240 232e 	movw	r3, #558	; 0x22e
    63ac:	4622      	mov	r2, r4
    63ae:	4933      	ldr	r1, [pc, #204]	; (647c <next_sense_cond_call_handler+0x274>)
    63b0:	4833      	ldr	r0, [pc, #204]	; (6480 <next_sense_cond_call_handler+0x278>)
    63b2:	f004 faa3 	bl	a8fc <assert_print>
    63b6:	f240 212e 	movw	r1, #558	; 0x22e
    63ba:	4620      	mov	r0, r4
    63bc:	f004 fa97 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    63c0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    63c4:	e016      	b.n	63f4 <next_sense_cond_call_handler+0x1ec>
            mask = P0_FEATURE_PINS_PRESENT;
    63c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    63ca:	e7e0      	b.n	638e <next_sense_cond_call_handler+0x186>
    switch (port)
    63cc:	2300      	movs	r3, #0
    63ce:	e7de      	b.n	638e <next_sense_cond_call_handler+0x186>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    63d0:	4d29      	ldr	r5, [pc, #164]	; (6478 <next_sense_cond_call_handler+0x270>)
    63d2:	f240 2329 	movw	r3, #553	; 0x229
    63d6:	462a      	mov	r2, r5
    63d8:	492a      	ldr	r1, [pc, #168]	; (6484 <next_sense_cond_call_handler+0x27c>)
    63da:	4829      	ldr	r0, [pc, #164]	; (6480 <next_sense_cond_call_handler+0x278>)
    63dc:	f004 fa8e 	bl	a8fc <assert_print>
    63e0:	f240 2129 	movw	r1, #553	; 0x229
    63e4:	4628      	mov	r0, r5
    63e6:	f004 fa82 	bl	a8ee <assert_post_action>
    63ea:	e7d6      	b.n	639a <next_sense_cond_call_handler+0x192>
        case 0: return NRF_P0;
    63ec:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    63f0:	e000      	b.n	63f4 <next_sense_cond_call_handler+0x1ec>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    63f2:	4925      	ldr	r1, [pc, #148]	; (6488 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    63f4:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    63f8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    63fc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6400:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    6404:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    6408:	e029      	b.n	645e <next_sense_cond_call_handler+0x256>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    640a:	f04f 0803 	mov.w	r8, #3
    640e:	e709      	b.n	6224 <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
    6410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6414:	e70e      	b.n	6234 <next_sense_cond_call_handler+0x2c>
    switch (port)
    6416:	2300      	movs	r3, #0
    6418:	e70c      	b.n	6234 <next_sense_cond_call_handler+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    641a:	4f17      	ldr	r7, [pc, #92]	; (6478 <next_sense_cond_call_handler+0x270>)
    641c:	f240 2329 	movw	r3, #553	; 0x229
    6420:	463a      	mov	r2, r7
    6422:	4918      	ldr	r1, [pc, #96]	; (6484 <next_sense_cond_call_handler+0x27c>)
    6424:	4816      	ldr	r0, [pc, #88]	; (6480 <next_sense_cond_call_handler+0x278>)
    6426:	f004 fa69 	bl	a8fc <assert_print>
    642a:	f240 2129 	movw	r1, #553	; 0x229
    642e:	4638      	mov	r0, r7
    6430:	f004 fa5d 	bl	a8ee <assert_post_action>
    6434:	e705      	b.n	6242 <next_sense_cond_call_handler+0x3a>
        case 0: return NRF_P0;
    6436:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    643a:	e000      	b.n	643e <next_sense_cond_call_handler+0x236>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    643c:	4912      	ldr	r1, [pc, #72]	; (6488 <next_sense_cond_call_handler+0x280>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    643e:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
    6442:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    6446:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    644a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    644e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6452:	2d03      	cmp	r5, #3
    6454:	d007      	beq.n	6466 <next_sense_cond_call_handler+0x25e>
    6456:	2e02      	cmp	r6, #2
    6458:	d003      	beq.n	6462 <next_sense_cond_call_handler+0x25a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    645a:	2e03      	cmp	r6, #3
    645c:	d008      	beq.n	6470 <next_sense_cond_call_handler+0x268>
}
    645e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6462:	2d01      	cmp	r5, #1
    6464:	d1f9      	bne.n	645a <next_sense_cond_call_handler+0x252>
            call_handler(pin, trigger);
    6466:	4629      	mov	r1, r5
    6468:	4620      	mov	r0, r4
    646a:	f7ff fde1 	bl	6030 <call_handler>
}
    646e:	e7f6      	b.n	645e <next_sense_cond_call_handler+0x256>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6470:	2d02      	cmp	r5, #2
    6472:	d1f4      	bne.n	645e <next_sense_cond_call_handler+0x256>
    6474:	e7f7      	b.n	6466 <next_sense_cond_call_handler+0x25e>
    6476:	bf00      	nop
    6478:	0000d4e4 	.word	0x0000d4e4
    647c:	0000c914 	.word	0x0000c914
    6480:	0000c254 	.word	0x0000c254
    6484:	0000d518 	.word	0x0000d518
    6488:	50000300 	.word	0x50000300

0000648c <port_event_handle>:
{
    648c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6490:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    6492:	4a65      	ldr	r2, [pc, #404]	; (6628 <port_event_handle+0x19c>)
    6494:	466b      	mov	r3, sp
    6496:	e892 0003 	ldmia.w	r2, {r0, r1}
    649a:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    649e:	2300      	movs	r3, #0
    64a0:	a802      	add	r0, sp, #8
    64a2:	e00b      	b.n	64bc <port_event_handle+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    64a4:	aa04      	add	r2, sp, #16
    64a6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    64aa:	f852 2c10 	ldr.w	r2, [r2, #-16]
    64ae:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    64b2:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    64b6:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    64ba:	3301      	adds	r3, #1
    64bc:	2b01      	cmp	r3, #1
    64be:	d9f1      	bls.n	64a4 <port_event_handle+0x18>
    64c0:	e0ad      	b.n	661e <port_event_handle+0x192>
            mask = P0_FEATURE_PINS_PRESENT;
    64c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    64c6:	e07f      	b.n	65c8 <port_event_handle+0x13c>
    switch (port)
    64c8:	2300      	movs	r3, #0
    64ca:	e07d      	b.n	65c8 <port_event_handle+0x13c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    64cc:	4f57      	ldr	r7, [pc, #348]	; (662c <port_event_handle+0x1a0>)
    64ce:	f240 2329 	movw	r3, #553	; 0x229
    64d2:	463a      	mov	r2, r7
    64d4:	4956      	ldr	r1, [pc, #344]	; (6630 <port_event_handle+0x1a4>)
    64d6:	4857      	ldr	r0, [pc, #348]	; (6634 <port_event_handle+0x1a8>)
    64d8:	f004 fa10 	bl	a8fc <assert_print>
    64dc:	f240 2129 	movw	r1, #553	; 0x229
    64e0:	4638      	mov	r0, r7
    64e2:	f004 fa04 	bl	a8ee <assert_post_action>
    64e6:	e076      	b.n	65d6 <port_event_handle+0x14a>
        case 0: return NRF_P0;
    64e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    64ec:	e000      	b.n	64f0 <port_event_handle+0x64>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    64ee:	4b52      	ldr	r3, [pc, #328]	; (6638 <port_event_handle+0x1ac>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    64f0:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    64f4:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
    64f8:	f3c2 4201 	ubfx	r2, r2, #16, #2
    64fc:	4631      	mov	r1, r6
    64fe:	4620      	mov	r0, r4
    6500:	f7ff fe82 	bl	6208 <next_sense_cond_call_handler>
    switch (port)
    6504:	0963      	lsrs	r3, r4, #5
    6506:	d01f      	beq.n	6548 <port_event_handle+0xbc>
    6508:	2b01      	cmp	r3, #1
    650a:	d120      	bne.n	654e <port_event_handle+0xc2>
            mask = P1_FEATURE_PINS_PRESENT;
    650c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6510:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6514:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6516:	f013 0f01 	tst.w	r3, #1
    651a:	d01a      	beq.n	6552 <port_event_handle+0xc6>
    *p_pin = pin_number & 0x1F;
    651c:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6520:	0964      	lsrs	r4, r4, #5
    6522:	d024      	beq.n	656e <port_event_handle+0xe2>
    6524:	2c01      	cmp	r4, #1
    6526:	d025      	beq.n	6574 <port_event_handle+0xe8>
            NRFX_ASSERT(0);
    6528:	4c40      	ldr	r4, [pc, #256]	; (662c <port_event_handle+0x1a0>)
    652a:	f240 232e 	movw	r3, #558	; 0x22e
    652e:	4622      	mov	r2, r4
    6530:	4942      	ldr	r1, [pc, #264]	; (663c <port_event_handle+0x1b0>)
    6532:	4840      	ldr	r0, [pc, #256]	; (6634 <port_event_handle+0x1a8>)
    6534:	f004 f9e2 	bl	a8fc <assert_print>
    6538:	f240 212e 	movw	r1, #558	; 0x22e
    653c:	4620      	mov	r0, r4
    653e:	f004 f9d6 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    6542:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6546:	e016      	b.n	6576 <port_event_handle+0xea>
            mask = P0_FEATURE_PINS_PRESENT;
    6548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    654c:	e7e0      	b.n	6510 <port_event_handle+0x84>
    switch (port)
    654e:	2300      	movs	r3, #0
    6550:	e7de      	b.n	6510 <port_event_handle+0x84>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6552:	4e36      	ldr	r6, [pc, #216]	; (662c <port_event_handle+0x1a0>)
    6554:	f240 2329 	movw	r3, #553	; 0x229
    6558:	4632      	mov	r2, r6
    655a:	4935      	ldr	r1, [pc, #212]	; (6630 <port_event_handle+0x1a4>)
    655c:	4835      	ldr	r0, [pc, #212]	; (6634 <port_event_handle+0x1a8>)
    655e:	f004 f9cd 	bl	a8fc <assert_print>
    6562:	f240 2129 	movw	r1, #553	; 0x229
    6566:	4630      	mov	r0, r6
    6568:	f004 f9c1 	bl	a8ee <assert_post_action>
    656c:	e7d6      	b.n	651c <port_event_handle+0x90>
        case 0: return NRF_P0;
    656e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6572:	e000      	b.n	6576 <port_event_handle+0xea>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6574:	4a30      	ldr	r2, [pc, #192]	; (6638 <port_event_handle+0x1ac>)
    reg->LATCH = (1 << pin_number);
    6576:	2301      	movs	r3, #1
    6578:	40b3      	lsls	r3, r6
    657a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
            while (latch[i])
    657e:	ab04      	add	r3, sp, #16
    6580:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6584:	f853 4c08 	ldr.w	r4, [r3, #-8]
    6588:	2c00      	cmp	r4, #0
    658a:	d03b      	beq.n	6604 <port_event_handle+0x178>
                uint32_t pin = NRF_CTZ(latch[i]);
    658c:	fa94 f4a4 	rbit	r4, r4
    6590:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    6594:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6598:	f104 0208 	add.w	r2, r4, #8
    659c:	4b28      	ldr	r3, [pc, #160]	; (6640 <port_event_handle+0x1b4>)
    659e:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
    65a2:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    65a6:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    65a8:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    65ac:	a802      	add	r0, sp, #8
    65ae:	2301      	movs	r3, #1
    65b0:	fa03 f202 	lsl.w	r2, r3, r2
    65b4:	5c43      	ldrb	r3, [r0, r1]
    65b6:	ea23 0302 	bic.w	r3, r3, r2
    65ba:	5443      	strb	r3, [r0, r1]
    switch (port)
    65bc:	0963      	lsrs	r3, r4, #5
    65be:	d080      	beq.n	64c2 <port_event_handle+0x36>
    65c0:	2b01      	cmp	r3, #1
    65c2:	d181      	bne.n	64c8 <port_event_handle+0x3c>
            mask = P1_FEATURE_PINS_PRESENT;
    65c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    65c8:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    65cc:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    65ce:	f013 0f01 	tst.w	r3, #1
    65d2:	f43f af7b 	beq.w	64cc <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
    65d6:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    65da:	0963      	lsrs	r3, r4, #5
    65dc:	d084      	beq.n	64e8 <port_event_handle+0x5c>
    65de:	2b01      	cmp	r3, #1
    65e0:	d085      	beq.n	64ee <port_event_handle+0x62>
            NRFX_ASSERT(0);
    65e2:	f8df 8048 	ldr.w	r8, [pc, #72]	; 662c <port_event_handle+0x1a0>
    65e6:	f240 232e 	movw	r3, #558	; 0x22e
    65ea:	4642      	mov	r2, r8
    65ec:	4913      	ldr	r1, [pc, #76]	; (663c <port_event_handle+0x1b0>)
    65ee:	4811      	ldr	r0, [pc, #68]	; (6634 <port_event_handle+0x1a8>)
    65f0:	f004 f984 	bl	a8fc <assert_print>
    65f4:	f240 212e 	movw	r1, #558	; 0x22e
    65f8:	4640      	mov	r0, r8
    65fa:	f004 f978 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    65fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6602:	e775      	b.n	64f0 <port_event_handle+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6604:	3501      	adds	r5, #1
    6606:	2d01      	cmp	r5, #1
    6608:	d9b9      	bls.n	657e <port_event_handle+0xf2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    660a:	4b0e      	ldr	r3, [pc, #56]	; (6644 <port_event_handle+0x1b8>)
    660c:	2200      	movs	r2, #0
    660e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    6612:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
    6616:	a802      	add	r0, sp, #8
    6618:	f7ff fdce 	bl	61b8 <latch_pending_read_and_check>
    661c:	b108      	cbz	r0, 6622 <port_event_handle+0x196>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    661e:	2500      	movs	r5, #0
    6620:	e7f1      	b.n	6606 <port_event_handle+0x17a>
}
    6622:	b004      	add	sp, #16
    6624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6628:	0000c130 	.word	0x0000c130
    662c:	0000d4e4 	.word	0x0000d4e4
    6630:	0000d518 	.word	0x0000d518
    6634:	0000c254 	.word	0x0000c254
    6638:	50000300 	.word	0x50000300
    663c:	0000c914 	.word	0x0000c914
    6640:	20004064 	.word	0x20004064
    6644:	40006000 	.word	0x40006000

00006648 <nrfx_gpiote_input_configure>:
{
    6648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    664c:	4604      	mov	r4, r0
    664e:	4615      	mov	r5, r2
    6650:	461e      	mov	r6, r3
    if (p_input_config)
    6652:	2900      	cmp	r1, #0
    6654:	d064      	beq.n	6720 <nrfx_gpiote_input_configure+0xd8>
    6656:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
    6658:	f005 fa48 	bl	baec <pin_is_task_output>
    665c:	2800      	cmp	r0, #0
    665e:	f040 80cd 	bne.w	67fc <nrfx_gpiote_input_configure+0x1b4>
    switch (port)
    6662:	0963      	lsrs	r3, r4, #5
    6664:	d020      	beq.n	66a8 <nrfx_gpiote_input_configure+0x60>
    6666:	2b01      	cmp	r3, #1
    6668:	d121      	bne.n	66ae <nrfx_gpiote_input_configure+0x66>
            mask = P1_FEATURE_PINS_PRESENT;
    666a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    666e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6672:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6674:	f013 0f01 	tst.w	r3, #1
    6678:	d01b      	beq.n	66b2 <nrfx_gpiote_input_configure+0x6a>
    *p_pin = pin_number & 0x1F;
    667a:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    667e:	0963      	lsrs	r3, r4, #5
    6680:	d025      	beq.n	66ce <nrfx_gpiote_input_configure+0x86>
    6682:	2b01      	cmp	r3, #1
    6684:	d026      	beq.n	66d4 <nrfx_gpiote_input_configure+0x8c>
            NRFX_ASSERT(0);
    6686:	f8df 9184 	ldr.w	r9, [pc, #388]	; 680c <nrfx_gpiote_input_configure+0x1c4>
    668a:	f240 232e 	movw	r3, #558	; 0x22e
    668e:	464a      	mov	r2, r9
    6690:	495f      	ldr	r1, [pc, #380]	; (6810 <nrfx_gpiote_input_configure+0x1c8>)
    6692:	4860      	ldr	r0, [pc, #384]	; (6814 <nrfx_gpiote_input_configure+0x1cc>)
    6694:	f004 f932 	bl	a8fc <assert_print>
    6698:	f240 212e 	movw	r1, #558	; 0x22e
    669c:	4648      	mov	r0, r9
    669e:	f004 f926 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    66a2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    66a6:	e016      	b.n	66d6 <nrfx_gpiote_input_configure+0x8e>
            mask = P0_FEATURE_PINS_PRESENT;
    66a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    66ac:	e7df      	b.n	666e <nrfx_gpiote_input_configure+0x26>
    switch (port)
    66ae:	2300      	movs	r3, #0
    66b0:	e7dd      	b.n	666e <nrfx_gpiote_input_configure+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    66b2:	4f56      	ldr	r7, [pc, #344]	; (680c <nrfx_gpiote_input_configure+0x1c4>)
    66b4:	f240 2329 	movw	r3, #553	; 0x229
    66b8:	463a      	mov	r2, r7
    66ba:	4957      	ldr	r1, [pc, #348]	; (6818 <nrfx_gpiote_input_configure+0x1d0>)
    66bc:	4855      	ldr	r0, [pc, #340]	; (6814 <nrfx_gpiote_input_configure+0x1cc>)
    66be:	f004 f91d 	bl	a8fc <assert_print>
    66c2:	f240 2129 	movw	r1, #553	; 0x229
    66c6:	4638      	mov	r0, r7
    66c8:	f004 f911 	bl	a8ee <assert_post_action>
    66cc:	e7d5      	b.n	667a <nrfx_gpiote_input_configure+0x32>
        case 0: return NRF_P0;
    66ce:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    66d2:	e000      	b.n	66d6 <nrfx_gpiote_input_configure+0x8e>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    66d4:	4951      	ldr	r1, [pc, #324]	; (681c <nrfx_gpiote_input_configure+0x1d4>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    66d6:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
    66da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    66de:	f1b8 0f00 	cmp.w	r8, #0
    66e2:	d03f      	beq.n	6764 <nrfx_gpiote_input_configure+0x11c>
    66e4:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    66e6:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
    66ea:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    66ee:	f1b8 0f00 	cmp.w	r8, #0
    66f2:	d039      	beq.n	6768 <nrfx_gpiote_input_configure+0x120>
    66f4:	f898 2000 	ldrb.w	r2, [r8]
    66f8:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    66fa:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
    66fc:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
    6700:	f841 3027 	str.w	r3, [r1, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6704:	4a46      	ldr	r2, [pc, #280]	; (6820 <nrfx_gpiote_input_configure+0x1d8>)
    6706:	f104 0108 	add.w	r1, r4, #8
    670a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    670e:	f023 0302 	bic.w	r3, r3, #2
    6712:	b29b      	uxth	r3, r3
    6714:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6718:	f043 0301 	orr.w	r3, r3, #1
    671c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    6720:	b1bd      	cbz	r5, 6752 <nrfx_gpiote_input_configure+0x10a>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    6722:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    6724:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    6728:	4620      	mov	r0, r4
    672a:	f7ff fc2f 	bl	5f8c <pin_is_output>
    672e:	b1e8      	cbz	r0, 676c <nrfx_gpiote_input_configure+0x124>
            if (use_evt)
    6730:	f1b8 0f00 	cmp.w	r8, #0
    6734:	d164      	bne.n	6800 <nrfx_gpiote_input_configure+0x1b8>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    6736:	4a3a      	ldr	r2, [pc, #232]	; (6820 <nrfx_gpiote_input_configure+0x1d8>)
    6738:	f104 0108 	add.w	r1, r4, #8
    673c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6740:	f023 031c 	bic.w	r3, r3, #28
    6744:	b29b      	uxth	r3, r3
    6746:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    674a:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    674e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    6752:	2e00      	cmp	r6, #0
    6754:	d058      	beq.n	6808 <nrfx_gpiote_input_configure+0x1c0>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    6756:	6872      	ldr	r2, [r6, #4]
    6758:	6831      	ldr	r1, [r6, #0]
    675a:	4620      	mov	r0, r4
    675c:	f7ff fcd4 	bl	6108 <pin_handler_set>
}
    6760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6764:	2200      	movs	r2, #0
    6766:	e7be      	b.n	66e6 <nrfx_gpiote_input_configure+0x9e>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6768:	2200      	movs	r2, #0
    676a:	e7c6      	b.n	66fa <nrfx_gpiote_input_configure+0xb2>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    676c:	4a2c      	ldr	r2, [pc, #176]	; (6820 <nrfx_gpiote_input_configure+0x1d8>)
    676e:	f104 0108 	add.w	r1, r4, #8
    6772:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6776:	f023 0320 	bic.w	r3, r3, #32
    677a:	04db      	lsls	r3, r3, #19
    677c:	0cdb      	lsrs	r3, r3, #19
    677e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    6782:	f1b8 0f00 	cmp.w	r8, #0
    6786:	d0d6      	beq.n	6736 <nrfx_gpiote_input_configure+0xee>
                if (!edge)
    6788:	2f03      	cmp	r7, #3
    678a:	d83b      	bhi.n	6804 <nrfx_gpiote_input_configure+0x1bc>
                uint8_t ch = *p_trigger_config->p_in_channel;
    678c:	686b      	ldr	r3, [r5, #4]
    678e:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    6790:	b937      	cbnz	r7, 67a0 <nrfx_gpiote_input_configure+0x158>
    p_reg->CONFIG[idx] = 0;
    6792:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    6796:	4b23      	ldr	r3, [pc, #140]	; (6824 <nrfx_gpiote_input_configure+0x1dc>)
    6798:	2200      	movs	r2, #0
    679a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    679e:	e7ca      	b.n	6736 <nrfx_gpiote_input_configure+0xee>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    67a0:	4638      	mov	r0, r7
    67a2:	f005 f9ba 	bl	bb1a <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    67a6:	4b1f      	ldr	r3, [pc, #124]	; (6824 <nrfx_gpiote_input_configure+0x1dc>)
    67a8:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    67ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    67b0:	f021 0103 	bic.w	r1, r1, #3
    67b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    67b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    67bc:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    67c0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    67c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    67c8:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    67cc:	0221      	lsls	r1, r4, #8
    67ce:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    67d2:	0400      	lsls	r0, r0, #16
    67d4:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    67d8:	4301      	orrs	r1, r0
    67da:	ea4c 0101 	orr.w	r1, ip, r1
    67de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    67e2:	036b      	lsls	r3, r5, #13
    67e4:	b29b      	uxth	r3, r3
    67e6:	4a0e      	ldr	r2, [pc, #56]	; (6820 <nrfx_gpiote_input_configure+0x1d8>)
    67e8:	f104 0108 	add.w	r1, r4, #8
    67ec:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
    67f0:	4303      	orrs	r3, r0
    67f2:	f043 0320 	orr.w	r3, r3, #32
    67f6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    67fa:	e79c      	b.n	6736 <nrfx_gpiote_input_configure+0xee>
            return NRFX_ERROR_INVALID_PARAM;
    67fc:	480a      	ldr	r0, [pc, #40]	; (6828 <nrfx_gpiote_input_configure+0x1e0>)
    67fe:	e7af      	b.n	6760 <nrfx_gpiote_input_configure+0x118>
                return NRFX_ERROR_INVALID_PARAM;
    6800:	4809      	ldr	r0, [pc, #36]	; (6828 <nrfx_gpiote_input_configure+0x1e0>)
    6802:	e7ad      	b.n	6760 <nrfx_gpiote_input_configure+0x118>
                    return NRFX_ERROR_INVALID_PARAM;
    6804:	4808      	ldr	r0, [pc, #32]	; (6828 <nrfx_gpiote_input_configure+0x1e0>)
    6806:	e7ab      	b.n	6760 <nrfx_gpiote_input_configure+0x118>
        err = NRFX_SUCCESS;
    6808:	4808      	ldr	r0, [pc, #32]	; (682c <nrfx_gpiote_input_configure+0x1e4>)
    680a:	e7a9      	b.n	6760 <nrfx_gpiote_input_configure+0x118>
    680c:	0000d4e4 	.word	0x0000d4e4
    6810:	0000c914 	.word	0x0000c914
    6814:	0000c254 	.word	0x0000c254
    6818:	0000d518 	.word	0x0000d518
    681c:	50000300 	.word	0x50000300
    6820:	20004064 	.word	0x20004064
    6824:	40006000 	.word	0x40006000
    6828:	0bad0004 	.word	0x0bad0004
    682c:	0bad0000 	.word	0x0bad0000

00006830 <nrfx_gpiote_output_configure>:
{
    6830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6834:	4604      	mov	r4, r0
    6836:	4615      	mov	r5, r2
    if (p_config)
    6838:	2900      	cmp	r1, #0
    683a:	f000 8086 	beq.w	694a <nrfx_gpiote_output_configure+0x11a>
    683e:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6840:	f005 f963 	bl	bb0a <pin_is_input>
    6844:	b128      	cbz	r0, 6852 <nrfx_gpiote_output_configure+0x22>
    6846:	4620      	mov	r0, r4
    6848:	f7ff fb8a 	bl	5f60 <pin_in_use_by_te>
    684c:	2800      	cmp	r0, #0
    684e:	f040 80ce 	bne.w	69ee <nrfx_gpiote_output_configure+0x1be>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    6852:	4620      	mov	r0, r4
    6854:	f7ff fb8e 	bl	5f74 <pin_has_trigger>
    6858:	b118      	cbz	r0, 6862 <nrfx_gpiote_output_configure+0x32>
    685a:	787b      	ldrb	r3, [r7, #1]
    685c:	2b01      	cmp	r3, #1
    685e:	f000 80c8 	beq.w	69f2 <nrfx_gpiote_output_configure+0x1c2>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    6862:	f107 0901 	add.w	r9, r7, #1
    6866:	f107 0802 	add.w	r8, r7, #2
    switch (port)
    686a:	0963      	lsrs	r3, r4, #5
    686c:	d020      	beq.n	68b0 <nrfx_gpiote_output_configure+0x80>
    686e:	2b01      	cmp	r3, #1
    6870:	d121      	bne.n	68b6 <nrfx_gpiote_output_configure+0x86>
            mask = P1_FEATURE_PINS_PRESENT;
    6872:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6876:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    687a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    687c:	f013 0f01 	tst.w	r3, #1
    6880:	d01b      	beq.n	68ba <nrfx_gpiote_output_configure+0x8a>
    *p_pin = pin_number & 0x1F;
    6882:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6886:	0963      	lsrs	r3, r4, #5
    6888:	d025      	beq.n	68d6 <nrfx_gpiote_output_configure+0xa6>
    688a:	2b01      	cmp	r3, #1
    688c:	d026      	beq.n	68dc <nrfx_gpiote_output_configure+0xac>
            NRFX_ASSERT(0);
    688e:	f8df a170 	ldr.w	sl, [pc, #368]	; 6a00 <nrfx_gpiote_output_configure+0x1d0>
    6892:	f240 232e 	movw	r3, #558	; 0x22e
    6896:	4652      	mov	r2, sl
    6898:	495a      	ldr	r1, [pc, #360]	; (6a04 <nrfx_gpiote_output_configure+0x1d4>)
    689a:	485b      	ldr	r0, [pc, #364]	; (6a08 <nrfx_gpiote_output_configure+0x1d8>)
    689c:	f004 f82e 	bl	a8fc <assert_print>
    68a0:	f240 212e 	movw	r1, #558	; 0x22e
    68a4:	4650      	mov	r0, sl
    68a6:	f004 f822 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    68aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    68ae:	e016      	b.n	68de <nrfx_gpiote_output_configure+0xae>
            mask = P0_FEATURE_PINS_PRESENT;
    68b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    68b4:	e7df      	b.n	6876 <nrfx_gpiote_output_configure+0x46>
    switch (port)
    68b6:	2300      	movs	r3, #0
    68b8:	e7dd      	b.n	6876 <nrfx_gpiote_output_configure+0x46>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    68ba:	4e51      	ldr	r6, [pc, #324]	; (6a00 <nrfx_gpiote_output_configure+0x1d0>)
    68bc:	f240 2329 	movw	r3, #553	; 0x229
    68c0:	4632      	mov	r2, r6
    68c2:	4952      	ldr	r1, [pc, #328]	; (6a0c <nrfx_gpiote_output_configure+0x1dc>)
    68c4:	4850      	ldr	r0, [pc, #320]	; (6a08 <nrfx_gpiote_output_configure+0x1d8>)
    68c6:	f004 f819 	bl	a8fc <assert_print>
    68ca:	f240 2129 	movw	r1, #553	; 0x229
    68ce:	4630      	mov	r0, r6
    68d0:	f004 f80d 	bl	a8ee <assert_post_action>
    68d4:	e7d5      	b.n	6882 <nrfx_gpiote_output_configure+0x52>
        case 0: return NRF_P0;
    68d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    68da:	e000      	b.n	68de <nrfx_gpiote_output_configure+0xae>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    68dc:	4a4c      	ldr	r2, [pc, #304]	; (6a10 <nrfx_gpiote_output_configure+0x1e0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    68de:	f506 73e0 	add.w	r3, r6, #448	; 0x1c0
    68e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    68e6:	f1b9 0f00 	cmp.w	r9, #0
    68ea:	d04b      	beq.n	6984 <nrfx_gpiote_output_configure+0x154>
    68ec:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    68ee:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    68f2:	f1b8 0f00 	cmp.w	r8, #0
    68f6:	d047      	beq.n	6988 <nrfx_gpiote_output_configure+0x158>
    68f8:	200c      	movs	r0, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    68fa:	4303      	orrs	r3, r0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    68fc:	2f00      	cmp	r7, #0
    68fe:	d045      	beq.n	698c <nrfx_gpiote_output_configure+0x15c>
    6900:	f44f 60e0 	mov.w	r0, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6904:	4303      	orrs	r3, r0
    cnf &= ~to_update;
    6906:	ea21 0103 	bic.w	r1, r1, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    690a:	f1b9 0f00 	cmp.w	r9, #0
    690e:	d03f      	beq.n	6990 <nrfx_gpiote_output_configure+0x160>
    6910:	787b      	ldrb	r3, [r7, #1]
    6912:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6914:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6918:	f1b8 0f00 	cmp.w	r8, #0
    691c:	d03a      	beq.n	6994 <nrfx_gpiote_output_configure+0x164>
    691e:	78b8      	ldrb	r0, [r7, #2]
    6920:	0080      	lsls	r0, r0, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6922:	4303      	orrs	r3, r0
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6924:	2f00      	cmp	r7, #0
    6926:	d037      	beq.n	6998 <nrfx_gpiote_output_configure+0x168>
    6928:	7838      	ldrb	r0, [r7, #0]
    692a:	0200      	lsls	r0, r0, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    692c:	4303      	orrs	r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    692e:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    6930:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    6934:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    6938:	4a36      	ldr	r2, [pc, #216]	; (6a14 <nrfx_gpiote_output_configure+0x1e4>)
    693a:	f104 0108 	add.w	r1, r4, #8
    693e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    6942:	f043 0303 	orr.w	r3, r3, #3
    6946:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    694a:	2d00      	cmp	r5, #0
    694c:	d053      	beq.n	69f6 <nrfx_gpiote_output_configure+0x1c6>
        if (pin_is_input(pin))
    694e:	4620      	mov	r0, r4
    6950:	f005 f8db 	bl	bb0a <pin_is_input>
    6954:	2800      	cmp	r0, #0
    6956:	d150      	bne.n	69fa <nrfx_gpiote_output_configure+0x1ca>
        uint32_t ch = p_task_config->task_ch;
    6958:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    695a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    695e:	4a2e      	ldr	r2, [pc, #184]	; (6a18 <nrfx_gpiote_output_configure+0x1e8>)
    6960:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6964:	492b      	ldr	r1, [pc, #172]	; (6a14 <nrfx_gpiote_output_configure+0x1e4>)
    6966:	f104 0008 	add.w	r0, r4, #8
    696a:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    696e:	f022 0220 	bic.w	r2, r2, #32
    6972:	04d2      	lsls	r2, r2, #19
    6974:	0cd2      	lsrs	r2, r2, #19
    6976:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    697a:	786a      	ldrb	r2, [r5, #1]
    697c:	b972      	cbnz	r2, 699c <nrfx_gpiote_output_configure+0x16c>
    return NRFX_SUCCESS;
    697e:	4827      	ldr	r0, [pc, #156]	; (6a1c <nrfx_gpiote_output_configure+0x1ec>)
}
    6980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    6984:	2300      	movs	r3, #0
    6986:	e7b2      	b.n	68ee <nrfx_gpiote_output_configure+0xbe>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    6988:	2000      	movs	r0, #0
    698a:	e7b6      	b.n	68fa <nrfx_gpiote_output_configure+0xca>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    698c:	2000      	movs	r0, #0
    698e:	e7b9      	b.n	6904 <nrfx_gpiote_output_configure+0xd4>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6990:	2300      	movs	r3, #0
    6992:	e7bf      	b.n	6914 <nrfx_gpiote_output_configure+0xe4>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6994:	2000      	movs	r0, #0
    6996:	e7c4      	b.n	6922 <nrfx_gpiote_output_configure+0xf2>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6998:	2000      	movs	r0, #0
    699a:	e7c7      	b.n	692c <nrfx_gpiote_output_configure+0xfc>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    699c:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    699e:	481e      	ldr	r0, [pc, #120]	; (6a18 <nrfx_gpiote_output_configure+0x1e8>)
    69a0:	f503 75a2 	add.w	r5, r3, #324	; 0x144
    69a4:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    69a8:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
    69ac:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
    69b0:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    69b4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
    69b8:	0221      	lsls	r1, r4, #8
    69ba:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    69be:	0412      	lsls	r2, r2, #16
    69c0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    69c4:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    69c6:	0539      	lsls	r1, r7, #20
    69c8:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    69cc:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    69ce:	4332      	orrs	r2, r6
    69d0:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    69d4:	035b      	lsls	r3, r3, #13
    69d6:	b29b      	uxth	r3, r3
    69d8:	4a0e      	ldr	r2, [pc, #56]	; (6a14 <nrfx_gpiote_output_configure+0x1e4>)
    69da:	3408      	adds	r4, #8
    69dc:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    69e0:	430b      	orrs	r3, r1
    69e2:	f043 0320 	orr.w	r3, r3, #32
    69e6:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    69ea:	480c      	ldr	r0, [pc, #48]	; (6a1c <nrfx_gpiote_output_configure+0x1ec>)
    69ec:	e7c8      	b.n	6980 <nrfx_gpiote_output_configure+0x150>
    69ee:	480c      	ldr	r0, [pc, #48]	; (6a20 <nrfx_gpiote_output_configure+0x1f0>)
    69f0:	e7c6      	b.n	6980 <nrfx_gpiote_output_configure+0x150>
    69f2:	480b      	ldr	r0, [pc, #44]	; (6a20 <nrfx_gpiote_output_configure+0x1f0>)
    69f4:	e7c4      	b.n	6980 <nrfx_gpiote_output_configure+0x150>
    69f6:	4809      	ldr	r0, [pc, #36]	; (6a1c <nrfx_gpiote_output_configure+0x1ec>)
    69f8:	e7c2      	b.n	6980 <nrfx_gpiote_output_configure+0x150>
            return NRFX_ERROR_INVALID_PARAM;
    69fa:	4809      	ldr	r0, [pc, #36]	; (6a20 <nrfx_gpiote_output_configure+0x1f0>)
    69fc:	e7c0      	b.n	6980 <nrfx_gpiote_output_configure+0x150>
    69fe:	bf00      	nop
    6a00:	0000d4e4 	.word	0x0000d4e4
    6a04:	0000c914 	.word	0x0000c914
    6a08:	0000c254 	.word	0x0000c254
    6a0c:	0000d518 	.word	0x0000d518
    6a10:	50000300 	.word	0x50000300
    6a14:	20004064 	.word	0x20004064
    6a18:	40006000 	.word	0x40006000
    6a1c:	0bad0000 	.word	0x0bad0000
    6a20:	0bad0004 	.word	0x0bad0004

00006a24 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6a24:	4b01      	ldr	r3, [pc, #4]	; (6a2c <nrfx_gpiote_global_callback_set+0x8>)
    6a26:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    6a28:	60d9      	str	r1, [r3, #12]
}
    6a2a:	4770      	bx	lr
    6a2c:	20004064 	.word	0x20004064

00006a30 <nrfx_gpiote_channel_get>:
{
    6a30:	b570      	push	{r4, r5, r6, lr}
    6a32:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    6a34:	460d      	mov	r5, r1
    6a36:	b159      	cbz	r1, 6a50 <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
    6a38:	4620      	mov	r0, r4
    6a3a:	f7ff fa91 	bl	5f60 <pin_in_use_by_te>
    6a3e:	b1a8      	cbz	r0, 6a6c <nrfx_gpiote_channel_get+0x3c>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6a40:	3408      	adds	r4, #8
    6a42:	4b0b      	ldr	r3, [pc, #44]	; (6a70 <nrfx_gpiote_channel_get+0x40>)
    6a44:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    6a48:	0b5b      	lsrs	r3, r3, #13
    6a4a:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    6a4c:	4809      	ldr	r0, [pc, #36]	; (6a74 <nrfx_gpiote_channel_get+0x44>)
}
    6a4e:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
    6a50:	4e09      	ldr	r6, [pc, #36]	; (6a78 <nrfx_gpiote_channel_get+0x48>)
    6a52:	f240 2335 	movw	r3, #565	; 0x235
    6a56:	4632      	mov	r2, r6
    6a58:	4908      	ldr	r1, [pc, #32]	; (6a7c <nrfx_gpiote_channel_get+0x4c>)
    6a5a:	4809      	ldr	r0, [pc, #36]	; (6a80 <nrfx_gpiote_channel_get+0x50>)
    6a5c:	f003 ff4e 	bl	a8fc <assert_print>
    6a60:	f240 2135 	movw	r1, #565	; 0x235
    6a64:	4630      	mov	r0, r6
    6a66:	f003 ff42 	bl	a8ee <assert_post_action>
    6a6a:	e7e5      	b.n	6a38 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
    6a6c:	4805      	ldr	r0, [pc, #20]	; (6a84 <nrfx_gpiote_channel_get+0x54>)
    6a6e:	e7ee      	b.n	6a4e <nrfx_gpiote_channel_get+0x1e>
    6a70:	20004064 	.word	0x20004064
    6a74:	0bad0000 	.word	0x0bad0000
    6a78:	0000d780 	.word	0x0000d780
    6a7c:	0000d7d4 	.word	0x0000d7d4
    6a80:	0000c254 	.word	0x0000c254
    6a84:	0bad0004 	.word	0x0bad0004

00006a88 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    6a88:	4b10      	ldr	r3, [pc, #64]	; (6acc <nrfx_gpiote_init+0x44>)
    6a8a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6a8e:	b10b      	cbz	r3, 6a94 <nrfx_gpiote_init+0xc>
        return err_code;
    6a90:	480f      	ldr	r0, [pc, #60]	; (6ad0 <nrfx_gpiote_init+0x48>)
}
    6a92:	4770      	bx	lr
{
    6a94:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6a96:	4c0d      	ldr	r4, [pc, #52]	; (6acc <nrfx_gpiote_init+0x44>)
    6a98:	2260      	movs	r2, #96	; 0x60
    6a9a:	2100      	movs	r1, #0
    6a9c:	f104 0010 	add.w	r0, r4, #16
    6aa0:	f005 f96a 	bl	bd78 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6aa4:	2006      	movs	r0, #6
    6aa6:	f7fc f967 	bl	2d78 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6aaa:	4b0a      	ldr	r3, [pc, #40]	; (6ad4 <nrfx_gpiote_init+0x4c>)
    6aac:	2200      	movs	r2, #0
    6aae:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    6ab2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    6ab6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6aba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6abe:	2301      	movs	r3, #1
    6ac0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6ac4:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    6ac6:	4804      	ldr	r0, [pc, #16]	; (6ad8 <nrfx_gpiote_init+0x50>)
}
    6ac8:	bd10      	pop	{r4, pc}
    6aca:	bf00      	nop
    6acc:	20004064 	.word	0x20004064
    6ad0:	0bad0005 	.word	0x0bad0005
    6ad4:	40006000 	.word	0x40006000
    6ad8:	0bad0000 	.word	0x0bad0000

00006adc <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6adc:	4b03      	ldr	r3, [pc, #12]	; (6aec <nrfx_gpiote_is_init+0x10>)
    6ade:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    6ae2:	3800      	subs	r0, #0
    6ae4:	bf18      	it	ne
    6ae6:	2001      	movne	r0, #1
    6ae8:	4770      	bx	lr
    6aea:	bf00      	nop
    6aec:	20004064 	.word	0x20004064

00006af0 <nrfx_gpiote_channel_free>:
{
    6af0:	b508      	push	{r3, lr}
    6af2:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6af4:	4801      	ldr	r0, [pc, #4]	; (6afc <nrfx_gpiote_channel_free+0xc>)
    6af6:	f7ff f855 	bl	5ba4 <nrfx_flag32_free>
}
    6afa:	bd08      	pop	{r3, pc}
    6afc:	200040d4 	.word	0x200040d4

00006b00 <nrfx_gpiote_channel_alloc>:
{
    6b00:	b508      	push	{r3, lr}
    6b02:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    6b04:	4801      	ldr	r0, [pc, #4]	; (6b0c <nrfx_gpiote_channel_alloc+0xc>)
    6b06:	f7ff f825 	bl	5b54 <nrfx_flag32_alloc>
}
    6b0a:	bd08      	pop	{r3, pc}
    6b0c:	200040d4 	.word	0x200040d4

00006b10 <nrfx_gpiote_trigger_enable>:
{
    6b10:	b570      	push	{r4, r5, r6, lr}
    6b12:	4604      	mov	r4, r0
    6b14:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    6b16:	f7ff fa2d 	bl	5f74 <pin_has_trigger>
    6b1a:	b1b8      	cbz	r0, 6b4c <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6b1c:	4620      	mov	r0, r4
    6b1e:	f7ff fa1f 	bl	5f60 <pin_in_use_by_te>
    6b22:	b118      	cbz	r0, 6b2c <nrfx_gpiote_trigger_enable+0x1c>
    6b24:	4620      	mov	r0, r4
    6b26:	f004 fff0 	bl	bb0a <pin_is_input>
    6b2a:	b9e8      	cbnz	r0, 6b68 <nrfx_gpiote_trigger_enable+0x58>
        NRFX_ASSERT(int_enable);
    6b2c:	2d00      	cmp	r5, #0
    6b2e:	d04c      	beq.n	6bca <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6b30:	f104 0308 	add.w	r3, r4, #8
    6b34:	4a70      	ldr	r2, [pc, #448]	; (6cf8 <nrfx_gpiote_trigger_enable+0x1e8>)
    6b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    6b3a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6b3e:	2b04      	cmp	r3, #4
    6b40:	f000 8092 	beq.w	6c68 <nrfx_gpiote_trigger_enable+0x158>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    6b44:	2b05      	cmp	r3, #5
    6b46:	d14e      	bne.n	6be6 <nrfx_gpiote_trigger_enable+0xd6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    6b48:	2602      	movs	r6, #2
    6b4a:	e08e      	b.n	6c6a <nrfx_gpiote_trigger_enable+0x15a>
    NRFX_ASSERT(pin_has_trigger(pin));
    6b4c:	4e6b      	ldr	r6, [pc, #428]	; (6cfc <nrfx_gpiote_trigger_enable+0x1ec>)
    6b4e:	f240 33df 	movw	r3, #991	; 0x3df
    6b52:	4632      	mov	r2, r6
    6b54:	496a      	ldr	r1, [pc, #424]	; (6d00 <nrfx_gpiote_trigger_enable+0x1f0>)
    6b56:	486b      	ldr	r0, [pc, #428]	; (6d04 <nrfx_gpiote_trigger_enable+0x1f4>)
    6b58:	f003 fed0 	bl	a8fc <assert_print>
    6b5c:	f240 31df 	movw	r1, #991	; 0x3df
    6b60:	4630      	mov	r0, r6
    6b62:	f003 fec4 	bl	a8ee <assert_post_action>
    6b66:	e7d9      	b.n	6b1c <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
    6b68:	4620      	mov	r0, r4
    6b6a:	f7ff fa19 	bl	5fa0 <pin_te_get>
    6b6e:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    6b70:	2807      	cmp	r0, #7
    6b72:	d81c      	bhi.n	6bae <nrfx_gpiote_trigger_enable+0x9e>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6b74:	00a3      	lsls	r3, r4, #2
    6b76:	f503 7380 	add.w	r3, r3, #256	; 0x100
    6b7a:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
    6b7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6b80:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6b84:	2200      	movs	r2, #0
    6b86:	601a      	str	r2, [r3, #0]
    6b88:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    6b8a:	4a5f      	ldr	r2, [pc, #380]	; (6d08 <nrfx_gpiote_trigger_enable+0x1f8>)
    6b8c:	f504 71a2 	add.w	r1, r4, #324	; 0x144
    6b90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    6b94:	f043 0301 	orr.w	r3, r3, #1
    6b98:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    6b9c:	2d00      	cmp	r5, #0
    6b9e:	f000 80a9 	beq.w	6cf4 <nrfx_gpiote_trigger_enable+0x1e4>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    6ba2:	2001      	movs	r0, #1
    6ba4:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
    6ba8:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
    6bac:	e0a2      	b.n	6cf4 <nrfx_gpiote_trigger_enable+0x1e4>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    6bae:	4e57      	ldr	r6, [pc, #348]	; (6d0c <nrfx_gpiote_trigger_enable+0x1fc>)
    6bb0:	f44f 7323 	mov.w	r3, #652	; 0x28c
    6bb4:	4632      	mov	r2, r6
    6bb6:	4956      	ldr	r1, [pc, #344]	; (6d10 <nrfx_gpiote_trigger_enable+0x200>)
    6bb8:	4852      	ldr	r0, [pc, #328]	; (6d04 <nrfx_gpiote_trigger_enable+0x1f4>)
    6bba:	f003 fe9f 	bl	a8fc <assert_print>
    6bbe:	f44f 7123 	mov.w	r1, #652	; 0x28c
    6bc2:	4630      	mov	r0, r6
    6bc4:	f003 fe93 	bl	a8ee <assert_post_action>
    6bc8:	e7d4      	b.n	6b74 <nrfx_gpiote_trigger_enable+0x64>
        NRFX_ASSERT(int_enable);
    6bca:	4d4c      	ldr	r5, [pc, #304]	; (6cfc <nrfx_gpiote_trigger_enable+0x1ec>)
    6bcc:	f240 33ee 	movw	r3, #1006	; 0x3ee
    6bd0:	462a      	mov	r2, r5
    6bd2:	4950      	ldr	r1, [pc, #320]	; (6d14 <nrfx_gpiote_trigger_enable+0x204>)
    6bd4:	484b      	ldr	r0, [pc, #300]	; (6d04 <nrfx_gpiote_trigger_enable+0x1f4>)
    6bd6:	f003 fe91 	bl	a8fc <assert_print>
    6bda:	f240 31ee 	movw	r1, #1006	; 0x3ee
    6bde:	4628      	mov	r0, r5
    6be0:	f003 fe85 	bl	a8ee <assert_post_action>
    6be4:	e7a4      	b.n	6b30 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
    6be6:	0963      	lsrs	r3, r4, #5
    6be8:	d01f      	beq.n	6c2a <nrfx_gpiote_trigger_enable+0x11a>
    6bea:	2b01      	cmp	r3, #1
    6bec:	d120      	bne.n	6c30 <nrfx_gpiote_trigger_enable+0x120>
            mask = P1_FEATURE_PINS_PRESENT;
    6bee:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6bf2:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6bf6:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6bf8:	f013 0f01 	tst.w	r3, #1
    6bfc:	d01a      	beq.n	6c34 <nrfx_gpiote_trigger_enable+0x124>
    *p_pin = pin_number & 0x1F;
    6bfe:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c02:	0963      	lsrs	r3, r4, #5
    6c04:	d024      	beq.n	6c50 <nrfx_gpiote_trigger_enable+0x140>
    6c06:	2b01      	cmp	r3, #1
    6c08:	d025      	beq.n	6c56 <nrfx_gpiote_trigger_enable+0x146>
            NRFX_ASSERT(0);
    6c0a:	4e43      	ldr	r6, [pc, #268]	; (6d18 <nrfx_gpiote_trigger_enable+0x208>)
    6c0c:	f240 232e 	movw	r3, #558	; 0x22e
    6c10:	4632      	mov	r2, r6
    6c12:	4942      	ldr	r1, [pc, #264]	; (6d1c <nrfx_gpiote_trigger_enable+0x20c>)
    6c14:	483b      	ldr	r0, [pc, #236]	; (6d04 <nrfx_gpiote_trigger_enable+0x1f4>)
    6c16:	f003 fe71 	bl	a8fc <assert_print>
    6c1a:	f240 212e 	movw	r1, #558	; 0x22e
    6c1e:	4630      	mov	r0, r6
    6c20:	f003 fe65 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    6c24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6c28:	e016      	b.n	6c58 <nrfx_gpiote_trigger_enable+0x148>
            mask = P0_FEATURE_PINS_PRESENT;
    6c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6c2e:	e7e0      	b.n	6bf2 <nrfx_gpiote_trigger_enable+0xe2>
    switch (port)
    6c30:	2300      	movs	r3, #0
    6c32:	e7de      	b.n	6bf2 <nrfx_gpiote_trigger_enable+0xe2>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6c34:	4d38      	ldr	r5, [pc, #224]	; (6d18 <nrfx_gpiote_trigger_enable+0x208>)
    6c36:	f240 2329 	movw	r3, #553	; 0x229
    6c3a:	462a      	mov	r2, r5
    6c3c:	4938      	ldr	r1, [pc, #224]	; (6d20 <nrfx_gpiote_trigger_enable+0x210>)
    6c3e:	4831      	ldr	r0, [pc, #196]	; (6d04 <nrfx_gpiote_trigger_enable+0x1f4>)
    6c40:	f003 fe5c 	bl	a8fc <assert_print>
    6c44:	f240 2129 	movw	r1, #553	; 0x229
    6c48:	4628      	mov	r0, r5
    6c4a:	f003 fe50 	bl	a8ee <assert_post_action>
    6c4e:	e7d6      	b.n	6bfe <nrfx_gpiote_trigger_enable+0xee>
        case 0: return NRF_P0;
    6c50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6c54:	e000      	b.n	6c58 <nrfx_gpiote_trigger_enable+0x148>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c56:	4b33      	ldr	r3, [pc, #204]	; (6d24 <nrfx_gpiote_trigger_enable+0x214>)
    return p_reg->IN;
    6c58:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6c5c:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6c5e:	f013 0f01 	tst.w	r3, #1
    6c62:	d024      	beq.n	6cae <nrfx_gpiote_trigger_enable+0x19e>
    6c64:	2603      	movs	r6, #3
    6c66:	e000      	b.n	6c6a <nrfx_gpiote_trigger_enable+0x15a>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    6c68:	2603      	movs	r6, #3
    switch (port)
    6c6a:	0963      	lsrs	r3, r4, #5
    6c6c:	d021      	beq.n	6cb2 <nrfx_gpiote_trigger_enable+0x1a2>
    6c6e:	2b01      	cmp	r3, #1
    6c70:	d122      	bne.n	6cb8 <nrfx_gpiote_trigger_enable+0x1a8>
            mask = P1_FEATURE_PINS_PRESENT;
    6c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6c76:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6c7a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6c7c:	f013 0f01 	tst.w	r3, #1
    6c80:	d01c      	beq.n	6cbc <nrfx_gpiote_trigger_enable+0x1ac>
    *p_pin = pin_number & 0x1F;
    6c82:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c86:	0964      	lsrs	r4, r4, #5
    6c88:	d026      	beq.n	6cd8 <nrfx_gpiote_trigger_enable+0x1c8>
    6c8a:	2c01      	cmp	r4, #1
    6c8c:	d027      	beq.n	6cde <nrfx_gpiote_trigger_enable+0x1ce>
            NRFX_ASSERT(0);
    6c8e:	4c22      	ldr	r4, [pc, #136]	; (6d18 <nrfx_gpiote_trigger_enable+0x208>)
    6c90:	f240 232e 	movw	r3, #558	; 0x22e
    6c94:	4622      	mov	r2, r4
    6c96:	4921      	ldr	r1, [pc, #132]	; (6d1c <nrfx_gpiote_trigger_enable+0x20c>)
    6c98:	481a      	ldr	r0, [pc, #104]	; (6d04 <nrfx_gpiote_trigger_enable+0x1f4>)
    6c9a:	f003 fe2f 	bl	a8fc <assert_print>
    6c9e:	f240 212e 	movw	r1, #558	; 0x22e
    6ca2:	4620      	mov	r0, r4
    6ca4:	f003 fe23 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    6ca8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6cac:	e018      	b.n	6ce0 <nrfx_gpiote_trigger_enable+0x1d0>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6cae:	2602      	movs	r6, #2
    6cb0:	e7db      	b.n	6c6a <nrfx_gpiote_trigger_enable+0x15a>
            mask = P0_FEATURE_PINS_PRESENT;
    6cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6cb6:	e7de      	b.n	6c76 <nrfx_gpiote_trigger_enable+0x166>
    switch (port)
    6cb8:	2300      	movs	r3, #0
    6cba:	e7dc      	b.n	6c76 <nrfx_gpiote_trigger_enable+0x166>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6cbc:	4d16      	ldr	r5, [pc, #88]	; (6d18 <nrfx_gpiote_trigger_enable+0x208>)
    6cbe:	f240 2329 	movw	r3, #553	; 0x229
    6cc2:	462a      	mov	r2, r5
    6cc4:	4916      	ldr	r1, [pc, #88]	; (6d20 <nrfx_gpiote_trigger_enable+0x210>)
    6cc6:	480f      	ldr	r0, [pc, #60]	; (6d04 <nrfx_gpiote_trigger_enable+0x1f4>)
    6cc8:	f003 fe18 	bl	a8fc <assert_print>
    6ccc:	f240 2129 	movw	r1, #553	; 0x229
    6cd0:	4628      	mov	r0, r5
    6cd2:	f003 fe0c 	bl	a8ee <assert_post_action>
    6cd6:	e7d4      	b.n	6c82 <nrfx_gpiote_trigger_enable+0x172>
        case 0: return NRF_P0;
    6cd8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6cdc:	e000      	b.n	6ce0 <nrfx_gpiote_trigger_enable+0x1d0>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6cde:	4911      	ldr	r1, [pc, #68]	; (6d24 <nrfx_gpiote_trigger_enable+0x214>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6ce0:	f505 72e0 	add.w	r2, r5, #448	; 0x1c0
    6ce4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    6ce8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6cec:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    6cf0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    6cf4:	bd70      	pop	{r4, r5, r6, pc}
    6cf6:	bf00      	nop
    6cf8:	20004064 	.word	0x20004064
    6cfc:	0000d780 	.word	0x0000d780
    6d00:	0000d824 	.word	0x0000d824
    6d04:	0000c254 	.word	0x0000c254
    6d08:	40006000 	.word	0x40006000
    6d0c:	0000d7e0 	.word	0x0000d7e0
    6d10:	0000d818 	.word	0x0000d818
    6d14:	0000d83c 	.word	0x0000d83c
    6d18:	0000d4e4 	.word	0x0000d4e4
    6d1c:	0000c914 	.word	0x0000c914
    6d20:	0000d518 	.word	0x0000d518
    6d24:	50000300 	.word	0x50000300

00006d28 <nrfx_gpiote_trigger_disable>:
{
    6d28:	b538      	push	{r3, r4, r5, lr}
    6d2a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6d2c:	f7ff f918 	bl	5f60 <pin_in_use_by_te>
    6d30:	b1a0      	cbz	r0, 6d5c <nrfx_gpiote_trigger_disable+0x34>
    6d32:	4620      	mov	r0, r4
    6d34:	f004 fee9 	bl	bb0a <pin_is_input>
    6d38:	b180      	cbz	r0, 6d5c <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    6d3a:	4620      	mov	r0, r4
    6d3c:	f7ff f930 	bl	5fa0 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6d40:	2201      	movs	r2, #1
    6d42:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    6d44:	4b26      	ldr	r3, [pc, #152]	; (6de0 <nrfx_gpiote_trigger_disable+0xb8>)
    6d46:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6d4a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    6d4e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    6d52:	f022 0203 	bic.w	r2, r2, #3
    6d56:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    6d5a:	e040      	b.n	6dde <nrfx_gpiote_trigger_disable+0xb6>
    switch (port)
    6d5c:	0963      	lsrs	r3, r4, #5
    6d5e:	d01f      	beq.n	6da0 <nrfx_gpiote_trigger_disable+0x78>
    6d60:	2b01      	cmp	r3, #1
    6d62:	d120      	bne.n	6da6 <nrfx_gpiote_trigger_disable+0x7e>
            mask = P1_FEATURE_PINS_PRESENT;
    6d64:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6d68:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6d6c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6d6e:	f013 0f01 	tst.w	r3, #1
    6d72:	d01a      	beq.n	6daa <nrfx_gpiote_trigger_disable+0x82>
    *p_pin = pin_number & 0x1F;
    6d74:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6d78:	0964      	lsrs	r4, r4, #5
    6d7a:	d024      	beq.n	6dc6 <nrfx_gpiote_trigger_disable+0x9e>
    6d7c:	2c01      	cmp	r4, #1
    6d7e:	d025      	beq.n	6dcc <nrfx_gpiote_trigger_disable+0xa4>
            NRFX_ASSERT(0);
    6d80:	4c18      	ldr	r4, [pc, #96]	; (6de4 <nrfx_gpiote_trigger_disable+0xbc>)
    6d82:	f240 232e 	movw	r3, #558	; 0x22e
    6d86:	4622      	mov	r2, r4
    6d88:	4917      	ldr	r1, [pc, #92]	; (6de8 <nrfx_gpiote_trigger_disable+0xc0>)
    6d8a:	4818      	ldr	r0, [pc, #96]	; (6dec <nrfx_gpiote_trigger_disable+0xc4>)
    6d8c:	f003 fdb6 	bl	a8fc <assert_print>
    6d90:	f240 212e 	movw	r1, #558	; 0x22e
    6d94:	4620      	mov	r0, r4
    6d96:	f003 fdaa 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    6d9a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6d9e:	e016      	b.n	6dce <nrfx_gpiote_trigger_disable+0xa6>
            mask = P0_FEATURE_PINS_PRESENT;
    6da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6da4:	e7e0      	b.n	6d68 <nrfx_gpiote_trigger_disable+0x40>
    switch (port)
    6da6:	2300      	movs	r3, #0
    6da8:	e7de      	b.n	6d68 <nrfx_gpiote_trigger_disable+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6daa:	4d0e      	ldr	r5, [pc, #56]	; (6de4 <nrfx_gpiote_trigger_disable+0xbc>)
    6dac:	f240 2329 	movw	r3, #553	; 0x229
    6db0:	462a      	mov	r2, r5
    6db2:	490f      	ldr	r1, [pc, #60]	; (6df0 <nrfx_gpiote_trigger_disable+0xc8>)
    6db4:	480d      	ldr	r0, [pc, #52]	; (6dec <nrfx_gpiote_trigger_disable+0xc4>)
    6db6:	f003 fda1 	bl	a8fc <assert_print>
    6dba:	f240 2129 	movw	r1, #553	; 0x229
    6dbe:	4628      	mov	r0, r5
    6dc0:	f003 fd95 	bl	a8ee <assert_post_action>
    6dc4:	e7d6      	b.n	6d74 <nrfx_gpiote_trigger_disable+0x4c>
        case 0: return NRF_P0;
    6dc6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    6dca:	e000      	b.n	6dce <nrfx_gpiote_trigger_disable+0xa6>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6dcc:	4909      	ldr	r1, [pc, #36]	; (6df4 <nrfx_gpiote_trigger_disable+0xcc>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6dce:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    6dd2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    6dd6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    6dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    6dde:	bd38      	pop	{r3, r4, r5, pc}
    6de0:	40006000 	.word	0x40006000
    6de4:	0000d4e4 	.word	0x0000d4e4
    6de8:	0000c914 	.word	0x0000c914
    6dec:	0000c254 	.word	0x0000c254
    6df0:	0000d518 	.word	0x0000d518
    6df4:	50000300 	.word	0x50000300

00006df8 <nrfx_gpiote_pin_uninit>:
{
    6df8:	b538      	push	{r3, r4, r5, lr}
    6dfa:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    6dfc:	f7ff f8a6 	bl	5f4c <pin_in_use>
    6e00:	b908      	cbnz	r0, 6e06 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    6e02:	4824      	ldr	r0, [pc, #144]	; (6e94 <nrfx_gpiote_pin_uninit+0x9c>)
}
    6e04:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
    6e06:	4620      	mov	r0, r4
    6e08:	f7ff ff8e 	bl	6d28 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    6e0c:	4620      	mov	r0, r4
    6e0e:	f7ff f95f 	bl	60d0 <pin_handler_trigger_uninit>
    switch (port)
    6e12:	0963      	lsrs	r3, r4, #5
    6e14:	d01f      	beq.n	6e56 <nrfx_gpiote_pin_uninit+0x5e>
    6e16:	2b01      	cmp	r3, #1
    6e18:	d120      	bne.n	6e5c <nrfx_gpiote_pin_uninit+0x64>
            mask = P1_FEATURE_PINS_PRESENT;
    6e1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
    6e1e:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    6e22:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6e24:	f013 0f01 	tst.w	r3, #1
    6e28:	d01a      	beq.n	6e60 <nrfx_gpiote_pin_uninit+0x68>
    *p_pin = pin_number & 0x1F;
    6e2a:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6e2e:	0964      	lsrs	r4, r4, #5
    6e30:	d024      	beq.n	6e7c <nrfx_gpiote_pin_uninit+0x84>
    6e32:	2c01      	cmp	r4, #1
    6e34:	d025      	beq.n	6e82 <nrfx_gpiote_pin_uninit+0x8a>
            NRFX_ASSERT(0);
    6e36:	4c18      	ldr	r4, [pc, #96]	; (6e98 <nrfx_gpiote_pin_uninit+0xa0>)
    6e38:	f240 232e 	movw	r3, #558	; 0x22e
    6e3c:	4622      	mov	r2, r4
    6e3e:	4917      	ldr	r1, [pc, #92]	; (6e9c <nrfx_gpiote_pin_uninit+0xa4>)
    6e40:	4817      	ldr	r0, [pc, #92]	; (6ea0 <nrfx_gpiote_pin_uninit+0xa8>)
    6e42:	f003 fd5b 	bl	a8fc <assert_print>
    6e46:	f240 212e 	movw	r1, #558	; 0x22e
    6e4a:	4620      	mov	r0, r4
    6e4c:	f003 fd4f 	bl	a8ee <assert_post_action>
        case 0: return NRF_P0;
    6e50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6e54:	e016      	b.n	6e84 <nrfx_gpiote_pin_uninit+0x8c>
            mask = P0_FEATURE_PINS_PRESENT;
    6e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e5a:	e7e0      	b.n	6e1e <nrfx_gpiote_pin_uninit+0x26>
    switch (port)
    6e5c:	2300      	movs	r3, #0
    6e5e:	e7de      	b.n	6e1e <nrfx_gpiote_pin_uninit+0x26>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    6e60:	4d0d      	ldr	r5, [pc, #52]	; (6e98 <nrfx_gpiote_pin_uninit+0xa0>)
    6e62:	f240 2329 	movw	r3, #553	; 0x229
    6e66:	462a      	mov	r2, r5
    6e68:	490e      	ldr	r1, [pc, #56]	; (6ea4 <nrfx_gpiote_pin_uninit+0xac>)
    6e6a:	480d      	ldr	r0, [pc, #52]	; (6ea0 <nrfx_gpiote_pin_uninit+0xa8>)
    6e6c:	f003 fd46 	bl	a8fc <assert_print>
    6e70:	f240 2129 	movw	r1, #553	; 0x229
    6e74:	4628      	mov	r0, r5
    6e76:	f003 fd3a 	bl	a8ee <assert_post_action>
    6e7a:	e7d6      	b.n	6e2a <nrfx_gpiote_pin_uninit+0x32>
        case 0: return NRF_P0;
    6e7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6e80:	e000      	b.n	6e84 <nrfx_gpiote_pin_uninit+0x8c>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6e82:	4b09      	ldr	r3, [pc, #36]	; (6ea8 <nrfx_gpiote_pin_uninit+0xb0>)
    reg->PIN_CNF[pin_number] = cnf;
    6e84:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    6e88:	2202      	movs	r2, #2
    6e8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
    6e8e:	4807      	ldr	r0, [pc, #28]	; (6eac <nrfx_gpiote_pin_uninit+0xb4>)
}
    6e90:	e7b8      	b.n	6e04 <nrfx_gpiote_pin_uninit+0xc>
    6e92:	bf00      	nop
    6e94:	0bad0004 	.word	0x0bad0004
    6e98:	0000d4e4 	.word	0x0000d4e4
    6e9c:	0000c914 	.word	0x0000c914
    6ea0:	0000c254 	.word	0x0000c254
    6ea4:	0000d518 	.word	0x0000d518
    6ea8:	50000300 	.word	0x50000300
    6eac:	0bad0000 	.word	0x0bad0000

00006eb0 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    6eb0:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    6eb2:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    6eb4:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6eb8:	2100      	movs	r1, #0
    uint32_t status = 0;
    6eba:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6ebc:	e003      	b.n	6ec6 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    6ebe:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    6ec0:	3304      	adds	r3, #4
    6ec2:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6ec4:	3101      	adds	r1, #1
    6ec6:	2907      	cmp	r1, #7
    6ec8:	d814      	bhi.n	6ef4 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6eca:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    6ece:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    6ed2:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    6ed4:	2a00      	cmp	r2, #0
    6ed6:	d0f2      	beq.n	6ebe <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    6ed8:	4a0c      	ldr	r2, [pc, #48]	; (6f0c <nrfx_gpiote_irq_handler+0x5c>)
    6eda:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    6ede:	4210      	tst	r0, r2
    6ee0:	d0ed      	beq.n	6ebe <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    6ee2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    6ee6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6eea:	2500      	movs	r5, #0
    6eec:	6015      	str	r5, [r2, #0]
    6eee:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    6ef0:	4304      	orrs	r4, r0
    6ef2:	e7e4      	b.n	6ebe <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ef4:	4b05      	ldr	r3, [pc, #20]	; (6f0c <nrfx_gpiote_irq_handler+0x5c>)
    6ef6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    6efa:	b91b      	cbnz	r3, 6f04 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    6efc:	4620      	mov	r0, r4
    6efe:	f7ff f939 	bl	6174 <gpiote_evt_handle>
}
    6f02:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    6f04:	f7ff fac2 	bl	648c <port_event_handle>
    6f08:	e7f8      	b.n	6efc <nrfx_gpiote_irq_handler+0x4c>
    6f0a:	bf00      	nop
    6f0c:	40006000 	.word	0x40006000

00006f10 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    6f10:	b508      	push	{r3, lr}
    6f12:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    6f14:	4801      	ldr	r0, [pc, #4]	; (6f1c <nrfx_ppi_channel_alloc+0xc>)
    6f16:	f7fe fe1d 	bl	5b54 <nrfx_flag32_alloc>
}
    6f1a:	bd08      	pop	{r3, pc}
    6f1c:	200040e0 	.word	0x200040e0

00006f20 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    6f20:	4b12      	ldr	r3, [pc, #72]	; (6f6c <_DoInit+0x4c>)
    6f22:	2203      	movs	r2, #3
    6f24:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    6f26:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    6f28:	4911      	ldr	r1, [pc, #68]	; (6f70 <_DoInit+0x50>)
    6f2a:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    6f2c:	4a11      	ldr	r2, [pc, #68]	; (6f74 <_DoInit+0x54>)
    6f2e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    6f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6f34:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    6f36:	2200      	movs	r2, #0
    6f38:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    6f3a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    6f3e:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    6f40:	490d      	ldr	r1, [pc, #52]	; (6f78 <_DoInit+0x58>)
    6f42:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    6f44:	2110      	movs	r1, #16
    6f46:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    6f48:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    6f4a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6f4c:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    6f4e:	4a0b      	ldr	r2, [pc, #44]	; (6f7c <_DoInit+0x5c>)
    6f50:	6810      	ldr	r0, [r2, #0]
    6f52:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    6f56:	4a0a      	ldr	r2, [pc, #40]	; (6f80 <_DoInit+0x60>)
    6f58:	e892 0003 	ldmia.w	r2, {r0, r1}
    6f5c:	6018      	str	r0, [r3, #0]
    6f5e:	8099      	strh	r1, [r3, #4]
    6f60:	0c09      	lsrs	r1, r1, #16
    6f62:	7199      	strb	r1, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    6f64:	2220      	movs	r2, #32
    6f66:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    6f68:	4770      	bx	lr
    6f6a:	bf00      	nop
    6f6c:	20004d5c 	.word	0x20004d5c
    6f70:	0000d848 	.word	0x0000d848
    6f74:	20004e14 	.word	0x20004e14
    6f78:	20004e04 	.word	0x20004e04
    6f7c:	0000d854 	.word	0x0000d854
    6f80:	0000d858 	.word	0x0000d858

00006f84 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6f88:	4604      	mov	r4, r0
    6f8a:	460e      	mov	r6, r1
    6f8c:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    6f8e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    6f92:	4a2d      	ldr	r2, [pc, #180]	; (7048 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    6f94:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    6f98:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    6f9a:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    6f9c:	42bb      	cmp	r3, r7
    6f9e:	d84b      	bhi.n	7038 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    6fa0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    6fa4:	4928      	ldr	r1, [pc, #160]	; (7048 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    6fa6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    6faa:	f8d2 8020 	ldr.w	r8, [r2, #32]
    6fae:	eba8 0907 	sub.w	r9, r8, r7
    6fb2:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    6fb6:	4295      	cmp	r5, r2
    6fb8:	d904      	bls.n	6fc4 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    6fba:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    6fbc:	429d      	cmp	r5, r3
    6fbe:	d917      	bls.n	6ff0 <SEGGER_RTT_WriteSkipNoLock+0x6c>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    6fc0:	2000      	movs	r0, #0
    6fc2:	e03e      	b.n	7042 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6fc4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 7048 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    6fc8:	1c63      	adds	r3, r4, #1
    6fca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6fce:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    6fd2:	6858      	ldr	r0, [r3, #4]
    6fd4:	462a      	mov	r2, r5
    6fd6:	4631      	mov	r1, r6
    6fd8:	4438      	add	r0, r7
    6fda:	f004 febf 	bl	bd5c <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    6fde:	443d      	add	r5, r7
    6fe0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6fe4:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
    6fe8:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
      return 1;
    6fec:	2001      	movs	r0, #1
    6fee:	e028      	b.n	7042 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6ff0:	1c43      	adds	r3, r0, #1
    6ff2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6ff6:	4a14      	ldr	r2, [pc, #80]	; (7048 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    6ff8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6ffc:	6858      	ldr	r0, [r3, #4]
    6ffe:	464a      	mov	r2, r9
    7000:	4631      	mov	r1, r6
    7002:	4438      	add	r0, r7
    7004:	f004 feaa 	bl	bd5c <memcpy>
      NumBytes -= Rem;
    7008:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    700c:	197f      	adds	r7, r7, r5
    700e:	d00b      	beq.n	7028 <SEGGER_RTT_WriteSkipNoLock+0xa4>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    7010:	1c63      	adds	r3, r4, #1
    7012:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7016:	4a0c      	ldr	r2, [pc, #48]	; (7048 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    7018:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    701c:	463a      	mov	r2, r7
    701e:	eb06 0109 	add.w	r1, r6, r9
    7022:	6858      	ldr	r0, [r3, #4]
    7024:	f004 fe9a 	bl	bd5c <memcpy>
      pRing->WrOff = NumBytes;
    7028:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    702c:	4b06      	ldr	r3, [pc, #24]	; (7048 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    702e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    7032:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    7034:	2001      	movs	r0, #1
    7036:	e004      	b.n	7042 <SEGGER_RTT_WriteSkipNoLock+0xbe>
    Avail = RdOff - WrOff - 1u;
    7038:	1bdb      	subs	r3, r3, r7
    703a:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    703c:	42ab      	cmp	r3, r5
    703e:	d2c1      	bcs.n	6fc4 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    7040:	2000      	movs	r0, #0
}
    7042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7046:	bf00      	nop
    7048:	20004d5c 	.word	0x20004d5c

0000704c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    704c:	4b06      	ldr	r3, [pc, #24]	; (7068 <SEGGER_RTT_HasDataUp+0x1c>)
    704e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    7052:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    7056:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    7058:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    705c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    7060:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    7062:	1a80      	subs	r0, r0, r2
    7064:	4770      	bx	lr
    7066:	bf00      	nop
    7068:	20004d5c 	.word	0x20004d5c

0000706c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    706c:	4b03      	ldr	r3, [pc, #12]	; (707c <z_device_state_init+0x10>)

	while (dev < __device_end) {
    706e:	e000      	b.n	7072 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    7070:	3318      	adds	r3, #24
	while (dev < __device_end) {
    7072:	4a03      	ldr	r2, [pc, #12]	; (7080 <z_device_state_init+0x14>)
    7074:	4293      	cmp	r3, r2
    7076:	d3fb      	bcc.n	7070 <z_device_state_init+0x4>
	}
}
    7078:	4770      	bx	lr
    707a:	bf00      	nop
    707c:	0000be68 	.word	0x0000be68
    7080:	0000bee0 	.word	0x0000bee0

00007084 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    7084:	b570      	push	{r4, r5, r6, lr}
    7086:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7088:	4b11      	ldr	r3, [pc, #68]	; (70d0 <z_sys_init_run_level+0x4c>)
    708a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    708e:	e009      	b.n	70a4 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    7090:	4240      	negs	r0, r0
    7092:	e017      	b.n	70c4 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    7094:	68eb      	ldr	r3, [r5, #12]
    7096:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    7098:	68ea      	ldr	r2, [r5, #12]
    709a:	7853      	ldrb	r3, [r2, #1]
    709c:	f043 0301 	orr.w	r3, r3, #1
    70a0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    70a2:	3408      	adds	r4, #8
    70a4:	1c73      	adds	r3, r6, #1
    70a6:	4a0a      	ldr	r2, [pc, #40]	; (70d0 <z_sys_init_run_level+0x4c>)
    70a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    70ac:	42a3      	cmp	r3, r4
    70ae:	d90d      	bls.n	70cc <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    70b0:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    70b2:	6823      	ldr	r3, [r4, #0]
    70b4:	4628      	mov	r0, r5
    70b6:	4798      	blx	r3
		if (dev != NULL) {
    70b8:	2d00      	cmp	r5, #0
    70ba:	d0f2      	beq.n	70a2 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    70bc:	2800      	cmp	r0, #0
    70be:	d0eb      	beq.n	7098 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    70c0:	2800      	cmp	r0, #0
    70c2:	dbe5      	blt.n	7090 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    70c4:	28ff      	cmp	r0, #255	; 0xff
    70c6:	dde5      	ble.n	7094 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    70c8:	20ff      	movs	r0, #255	; 0xff
    70ca:	e7e3      	b.n	7094 <z_sys_init_run_level+0x10>
		}
	}
}
    70cc:	bd70      	pop	{r4, r5, r6, pc}
    70ce:	bf00      	nop
    70d0:	0000d860 	.word	0x0000d860

000070d4 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    70d4:	2804      	cmp	r0, #4
    70d6:	d80c      	bhi.n	70f2 <reason_to_str+0x1e>
    70d8:	e8df f000 	tbb	[pc, r0]
    70dc:	07050d03 	.word	0x07050d03
    70e0:	09          	.byte	0x09
    70e1:	00          	.byte	0x00
    70e2:	4806      	ldr	r0, [pc, #24]	; (70fc <reason_to_str+0x28>)
    70e4:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    70e6:	4806      	ldr	r0, [pc, #24]	; (7100 <reason_to_str+0x2c>)
    70e8:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    70ea:	4806      	ldr	r0, [pc, #24]	; (7104 <reason_to_str+0x30>)
    70ec:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    70ee:	4806      	ldr	r0, [pc, #24]	; (7108 <reason_to_str+0x34>)
    70f0:	4770      	bx	lr
	default:
		return "Unknown error";
    70f2:	4806      	ldr	r0, [pc, #24]	; (710c <reason_to_str+0x38>)
    70f4:	4770      	bx	lr
		return "Unhandled interrupt";
    70f6:	4806      	ldr	r0, [pc, #24]	; (7110 <reason_to_str+0x3c>)
	}
}
    70f8:	4770      	bx	lr
    70fa:	bf00      	nop
    70fc:	0000d8c8 	.word	0x0000d8c8
    7100:	0000d89c 	.word	0x0000d89c
    7104:	0000d8ac 	.word	0x0000d8ac
    7108:	0000d8b8 	.word	0x0000d8b8
    710c:	0000d878 	.word	0x0000d878
    7110:	0000d888 	.word	0x0000d888

00007114 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    7114:	b130      	cbz	r0, 7124 <thread_name_get+0x10>
{
    7116:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    7118:	f004 fd70 	bl	bbfc <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    711c:	b120      	cbz	r0, 7128 <thread_name_get+0x14>
    711e:	7803      	ldrb	r3, [r0, #0]
    7120:	b123      	cbz	r3, 712c <thread_name_get+0x18>
}
    7122:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    7124:	4802      	ldr	r0, [pc, #8]	; (7130 <thread_name_get+0x1c>)
}
    7126:	4770      	bx	lr
		thread_name = "unknown";
    7128:	4801      	ldr	r0, [pc, #4]	; (7130 <thread_name_get+0x1c>)
    712a:	e7fa      	b.n	7122 <thread_name_get+0xe>
    712c:	4800      	ldr	r0, [pc, #0]	; (7130 <thread_name_get+0x1c>)
	return thread_name;
    712e:	e7f8      	b.n	7122 <thread_name_get+0xe>
    7130:	0000d8d8 	.word	0x0000d8d8

00007134 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7134:	b5f0      	push	{r4, r5, r6, r7, lr}
    7136:	b087      	sub	sp, #28
    7138:	4604      	mov	r4, r0
    713a:	460e      	mov	r6, r1
	__asm__ volatile(
    713c:	f04f 0320 	mov.w	r3, #32
    7140:	f3ef 8711 	mrs	r7, BASEPRI
    7144:	f383 8812 	msr	BASEPRI_MAX, r3
    7148:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    714c:	f002 f9d2 	bl	94f4 <z_impl_z_current_get>
    7150:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    7152:	4620      	mov	r0, r4
    7154:	f7ff ffbe 	bl	70d4 <reason_to_str>
    7158:	2300      	movs	r3, #0
    715a:	9305      	str	r3, [sp, #20]
    715c:	9004      	str	r0, [sp, #16]
    715e:	9403      	str	r4, [sp, #12]
    7160:	4a22      	ldr	r2, [pc, #136]	; (71ec <z_fatal_error+0xb8>)
    7162:	9202      	str	r2, [sp, #8]
    7164:	9301      	str	r3, [sp, #4]
    7166:	9300      	str	r3, [sp, #0]
    7168:	2201      	movs	r2, #1
    716a:	4921      	ldr	r1, [pc, #132]	; (71f0 <z_fatal_error+0xbc>)
    716c:	4618      	mov	r0, r3
    716e:	f004 fcf0 	bl	bb52 <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    7172:	b11e      	cbz	r6, 717c <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    7174:	69f3      	ldr	r3, [r6, #28]
    7176:	f3c3 0308 	ubfx	r3, r3, #0, #9
    717a:	b9eb      	cbnz	r3, 71b8 <z_fatal_error+0x84>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    717c:	4628      	mov	r0, r5
    717e:	f7ff ffc9 	bl	7114 <thread_name_get>
    7182:	9004      	str	r0, [sp, #16]
    7184:	9503      	str	r5, [sp, #12]
    7186:	4b1b      	ldr	r3, [pc, #108]	; (71f4 <z_fatal_error+0xc0>)
    7188:	9302      	str	r3, [sp, #8]
    718a:	2000      	movs	r0, #0
    718c:	9001      	str	r0, [sp, #4]
    718e:	9000      	str	r0, [sp, #0]
    7190:	4603      	mov	r3, r0
    7192:	2201      	movs	r2, #1
    7194:	4916      	ldr	r1, [pc, #88]	; (71f0 <z_fatal_error+0xbc>)
    7196:	f004 fcdc 	bl	bb52 <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    719a:	4631      	mov	r1, r6
    719c:	4620      	mov	r0, r4
    719e:	f7fe fbd3 	bl	5948 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    71a2:	2c04      	cmp	r4, #4
    71a4:	d013      	beq.n	71ce <z_fatal_error+0x9a>
	__asm__ volatile(
    71a6:	f387 8811 	msr	BASEPRI, r7
    71aa:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    71ae:	4628      	mov	r0, r5
    71b0:	f7fc fb42 	bl	3838 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    71b4:	b007      	add	sp, #28
    71b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
    71b8:	4b0f      	ldr	r3, [pc, #60]	; (71f8 <z_fatal_error+0xc4>)
    71ba:	9302      	str	r3, [sp, #8]
    71bc:	2000      	movs	r0, #0
    71be:	9001      	str	r0, [sp, #4]
    71c0:	9000      	str	r0, [sp, #0]
    71c2:	4603      	mov	r3, r0
    71c4:	2201      	movs	r2, #1
    71c6:	490a      	ldr	r1, [pc, #40]	; (71f0 <z_fatal_error+0xbc>)
    71c8:	f004 fcc3 	bl	bb52 <z_log_msg2_runtime_create>
    71cc:	e7d6      	b.n	717c <z_fatal_error+0x48>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    71ce:	4c0b      	ldr	r4, [pc, #44]	; (71fc <z_fatal_error+0xc8>)
    71d0:	238f      	movs	r3, #143	; 0x8f
    71d2:	4622      	mov	r2, r4
    71d4:	490a      	ldr	r1, [pc, #40]	; (7200 <z_fatal_error+0xcc>)
    71d6:	480b      	ldr	r0, [pc, #44]	; (7204 <z_fatal_error+0xd0>)
    71d8:	f003 fb90 	bl	a8fc <assert_print>
    71dc:	480a      	ldr	r0, [pc, #40]	; (7208 <z_fatal_error+0xd4>)
    71de:	f003 fb8d 	bl	a8fc <assert_print>
    71e2:	218f      	movs	r1, #143	; 0x8f
    71e4:	4620      	mov	r0, r4
    71e6:	f003 fb82 	bl	a8ee <assert_post_action>
    71ea:	e7dc      	b.n	71a6 <z_fatal_error+0x72>
    71ec:	0000d8e0 	.word	0x0000d8e0
    71f0:	0000c088 	.word	0x0000c088
    71f4:	0000d92c 	.word	0x0000d92c
    71f8:	0000d908 	.word	0x0000d908
    71fc:	0000d944 	.word	0x0000d944
    7200:	0000d968 	.word	0x0000d968
    7204:	0000c254 	.word	0x0000c254
    7208:	0000d988 	.word	0x0000d988

0000720c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    720c:	b510      	push	{r4, lr}
    720e:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    7210:	4c11      	ldr	r4, [pc, #68]	; (7258 <init_idle_thread+0x4c>)
    7212:	23b0      	movs	r3, #176	; 0xb0
    7214:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7218:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    721c:	4b0f      	ldr	r3, [pc, #60]	; (725c <init_idle_thread+0x50>)
    721e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
    7222:	4a0f      	ldr	r2, [pc, #60]	; (7260 <init_idle_thread+0x54>)
    7224:	9205      	str	r2, [sp, #20]
    7226:	2201      	movs	r2, #1
    7228:	9204      	str	r2, [sp, #16]
    722a:	220f      	movs	r2, #15
    722c:	9203      	str	r2, [sp, #12]
    722e:	2200      	movs	r2, #0
    7230:	9202      	str	r2, [sp, #8]
    7232:	9201      	str	r2, [sp, #4]
    7234:	9300      	str	r3, [sp, #0]
    7236:	4b0b      	ldr	r3, [pc, #44]	; (7264 <init_idle_thread+0x58>)
    7238:	f44f 72a0 	mov.w	r2, #320	; 0x140
    723c:	490a      	ldr	r1, [pc, #40]	; (7268 <init_idle_thread+0x5c>)
    723e:	f44f 7cb0 	mov.w	ip, #352	; 0x160
    7242:	fb0c 1100 	mla	r1, ip, r0, r1
    7246:	4620      	mov	r0, r4
    7248:	f000 fa76 	bl	7738 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    724c:	7b63      	ldrb	r3, [r4, #13]
    724e:	f023 0304 	bic.w	r3, r3, #4
    7252:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    7254:	b006      	add	sp, #24
    7256:	bd10      	pop	{r4, pc}
    7258:	20004570 	.word	0x20004570
    725c:	20005214 	.word	0x20005214
    7260:	0000d9c0 	.word	0x0000d9c0
    7264:	00007a4d 	.word	0x00007a4d
    7268:	200060c0 	.word	0x200060c0

0000726c <bg_thread_main>:
{
    726c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    726e:	4b0a      	ldr	r3, [pc, #40]	; (7298 <bg_thread_main+0x2c>)
    7270:	2201      	movs	r2, #1
    7272:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7274:	2002      	movs	r0, #2
    7276:	f7ff ff05 	bl	7084 <z_sys_init_run_level>
	boot_banner();
    727a:	f002 fe83 	bl	9f84 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    727e:	2003      	movs	r0, #3
    7280:	f7ff ff00 	bl	7084 <z_sys_init_run_level>
	z_init_static_threads();
    7284:	f000 fb68 	bl	7958 <z_init_static_threads>
	main();
    7288:	f7f9 f918 	bl	4bc <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    728c:	4a03      	ldr	r2, [pc, #12]	; (729c <bg_thread_main+0x30>)
    728e:	7b13      	ldrb	r3, [r2, #12]
    7290:	f023 0301 	bic.w	r3, r3, #1
    7294:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7296:	bd08      	pop	{r3, pc}
    7298:	20005452 	.word	0x20005452
    729c:	20004620 	.word	0x20004620

000072a0 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    72a0:	b508      	push	{r3, lr}
    72a2:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    72a4:	4a01      	ldr	r2, [pc, #4]	; (72ac <switch_to_main_thread+0xc>)
    72a6:	4802      	ldr	r0, [pc, #8]	; (72b0 <switch_to_main_thread+0x10>)
    72a8:	f7fb fe7a 	bl	2fa0 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    72ac:	0000726d 	.word	0x0000726d
    72b0:	20004620 	.word	0x20004620

000072b4 <z_bss_zero>:
{
    72b4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    72b6:	4803      	ldr	r0, [pc, #12]	; (72c4 <z_bss_zero+0x10>)
    72b8:	4a03      	ldr	r2, [pc, #12]	; (72c8 <z_bss_zero+0x14>)
    72ba:	1a12      	subs	r2, r2, r0
    72bc:	2100      	movs	r1, #0
    72be:	f004 fc57 	bl	bb70 <z_early_memset>
}
    72c2:	bd08      	pop	{r3, pc}
    72c4:	20004240 	.word	0x20004240
    72c8:	20005454 	.word	0x20005454

000072cc <z_init_cpu>:
{
    72cc:	b510      	push	{r4, lr}
    72ce:	4604      	mov	r4, r0
	init_idle_thread(id);
    72d0:	f7ff ff9c 	bl	720c <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    72d4:	490b      	ldr	r1, [pc, #44]	; (7304 <z_init_cpu+0x38>)
    72d6:	23b0      	movs	r3, #176	; 0xb0
    72d8:	fb03 1104 	mla	r1, r3, r4, r1
    72dc:	4a0a      	ldr	r2, [pc, #40]	; (7308 <z_init_cpu+0x3c>)
    72de:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    72e2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    72e6:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    72e8:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    72ea:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    72ee:	4b07      	ldr	r3, [pc, #28]	; (730c <z_init_cpu+0x40>)
    72f0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    72f4:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
    72f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    72fc:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    7300:	6063      	str	r3, [r4, #4]
}
    7302:	bd10      	pop	{r4, pc}
    7304:	20004570 	.word	0x20004570
    7308:	20005214 	.word	0x20005214
    730c:	20006220 	.word	0x20006220

00007310 <prepare_multithreading>:
{
    7310:	b570      	push	{r4, r5, r6, lr}
    7312:	b086      	sub	sp, #24
	z_sched_init();
    7314:	f001 ff2a 	bl	916c <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    7318:	4d10      	ldr	r5, [pc, #64]	; (735c <prepare_multithreading+0x4c>)
    731a:	4b11      	ldr	r3, [pc, #68]	; (7360 <prepare_multithreading+0x50>)
    731c:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    731e:	4b11      	ldr	r3, [pc, #68]	; (7364 <prepare_multithreading+0x54>)
    7320:	9305      	str	r3, [sp, #20]
    7322:	2301      	movs	r3, #1
    7324:	9304      	str	r3, [sp, #16]
    7326:	2400      	movs	r4, #0
    7328:	9403      	str	r4, [sp, #12]
    732a:	9402      	str	r4, [sp, #8]
    732c:	9401      	str	r4, [sp, #4]
    732e:	9400      	str	r4, [sp, #0]
    7330:	4b0d      	ldr	r3, [pc, #52]	; (7368 <prepare_multithreading+0x58>)
    7332:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7336:	490d      	ldr	r1, [pc, #52]	; (736c <prepare_multithreading+0x5c>)
    7338:	4628      	mov	r0, r5
    733a:	f000 f9fd 	bl	7738 <z_setup_new_thread>
    733e:	4606      	mov	r6, r0
    7340:	7b6b      	ldrb	r3, [r5, #13]
    7342:	f023 0304 	bic.w	r3, r3, #4
    7346:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    7348:	4628      	mov	r0, r5
    734a:	f001 fa33 	bl	87b4 <z_ready_thread>
	z_init_cpu(0);
    734e:	4620      	mov	r0, r4
    7350:	f7ff ffbc 	bl	72cc <z_init_cpu>
}
    7354:	4630      	mov	r0, r6
    7356:	b006      	add	sp, #24
    7358:	bd70      	pop	{r4, r5, r6, pc}
    735a:	bf00      	nop
    735c:	20004620 	.word	0x20004620
    7360:	20005214 	.word	0x20005214
    7364:	0000d9c8 	.word	0x0000d9c8
    7368:	0000726d 	.word	0x0000726d
    736c:	20005ca0 	.word	0x20005ca0

00007370 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    7370:	b500      	push	{lr}
    7372:	b0ad      	sub	sp, #180	; 0xb4
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    7374:	4b1f      	ldr	r3, [pc, #124]	; (73f4 <z_cstart+0x84>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    7376:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    737a:	4c1f      	ldr	r4, [pc, #124]	; (73f8 <z_cstart+0x88>)
    737c:	6963      	ldr	r3, [r4, #20]
    737e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    7382:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7384:	23e0      	movs	r3, #224	; 0xe0
    7386:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    738a:	2500      	movs	r5, #0
    738c:	77e5      	strb	r5, [r4, #31]
    738e:	7625      	strb	r5, [r4, #24]
    7390:	7665      	strb	r5, [r4, #25]
    7392:	76a5      	strb	r5, [r4, #26]
    7394:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    7398:	6a63      	ldr	r3, [r4, #36]	; 0x24
    739a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    739e:	6263      	str	r3, [r4, #36]	; 0x24
    73a0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    73a4:	f7fc f9b4 	bl	3710 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    73a8:	f7fb fc7e 	bl	2ca8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    73ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    73b0:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    73b2:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    73b4:	f7fc fb60 	bl	3a78 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    73b8:	f7fc fa58 	bl	386c <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    73bc:	f7fa fd98 	bl	1ef0 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    73c0:	2401      	movs	r4, #1
    73c2:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    73c6:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    73ca:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    73cc:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
    73ce:	4668      	mov	r0, sp
    73d0:	f002 fdd2 	bl	9f78 <k_thread_system_pool_assign>
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    73d4:	4b09      	ldr	r3, [pc, #36]	; (73fc <z_cstart+0x8c>)
    73d6:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    73da:	f7ff fe47 	bl	706c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    73de:	4628      	mov	r0, r5
    73e0:	f7ff fe50 	bl	7084 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    73e4:	4620      	mov	r0, r4
    73e6:	f7ff fe4d 	bl	7084 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    73ea:	f7ff ff91 	bl	7310 <prepare_multithreading>
    73ee:	f7ff ff57 	bl	72a0 <switch_to_main_thread>
    73f2:	bf00      	nop
    73f4:	20006a40 	.word	0x20006a40
    73f8:	e000ed00 	.word	0xe000ed00
    73fc:	20005214 	.word	0x20005214

00007400 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    7400:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7402:	4c10      	ldr	r4, [pc, #64]	; (7444 <init_mem_slab_module+0x44>)
	int rc = 0;
    7404:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7406:	e008      	b.n	741a <init_mem_slab_module+0x1a>
    7408:	4b0f      	ldr	r3, [pc, #60]	; (7448 <init_mem_slab_module+0x48>)
    740a:	429c      	cmp	r4, r3
    740c:	d217      	bcs.n	743e <init_mem_slab_module+0x3e>
		rc = create_free_list(slab);
    740e:	4620      	mov	r0, r4
    7410:	f004 fbb6 	bl	bb80 <create_free_list>
		if (rc < 0) {
    7414:	1e05      	subs	r5, r0, #0
    7416:	db12      	blt.n	743e <init_mem_slab_module+0x3e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    7418:	3420      	adds	r4, #32
    741a:	4b0b      	ldr	r3, [pc, #44]	; (7448 <init_mem_slab_module+0x48>)
    741c:	429c      	cmp	r4, r3
    741e:	d9f3      	bls.n	7408 <init_mem_slab_module+0x8>
    7420:	4e0a      	ldr	r6, [pc, #40]	; (744c <init_mem_slab_module+0x4c>)
    7422:	233d      	movs	r3, #61	; 0x3d
    7424:	4632      	mov	r2, r6
    7426:	490a      	ldr	r1, [pc, #40]	; (7450 <init_mem_slab_module+0x50>)
    7428:	480a      	ldr	r0, [pc, #40]	; (7454 <init_mem_slab_module+0x54>)
    742a:	f003 fa67 	bl	a8fc <assert_print>
    742e:	480a      	ldr	r0, [pc, #40]	; (7458 <init_mem_slab_module+0x58>)
    7430:	f003 fa64 	bl	a8fc <assert_print>
    7434:	213d      	movs	r1, #61	; 0x3d
    7436:	4630      	mov	r0, r6
    7438:	f003 fa59 	bl	a8ee <assert_post_action>
    743c:	e7e4      	b.n	7408 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    743e:	4628      	mov	r0, r5
    7440:	bd70      	pop	{r4, r5, r6, pc}
    7442:	bf00      	nop
    7444:	200041c4 	.word	0x200041c4
    7448:	200041c4 	.word	0x200041c4
    744c:	0000d9d4 	.word	0x0000d9d4
    7450:	0000d9fc 	.word	0x0000d9fc
    7454:	0000c254 	.word	0x0000c254
    7458:	0000da1c 	.word	0x0000da1c

0000745c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    745c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7460:	b082      	sub	sp, #8
    7462:	4604      	mov	r4, r0
    7464:	460e      	mov	r6, r1
    7466:	4690      	mov	r8, r2
    7468:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    746a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    746e:	f04f 0320 	mov.w	r3, #32
    7472:	f3ef 8711 	mrs	r7, BASEPRI
    7476:	f383 8812 	msr	BASEPRI_MAX, r3
    747a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    747e:	4628      	mov	r0, r5
    7480:	f000 f8d8 	bl	7634 <z_spin_lock_valid>
    7484:	b1c0      	cbz	r0, 74b8 <k_mem_slab_alloc+0x5c>
	z_spin_lock_set_owner(l);
    7486:	4628      	mov	r0, r5
    7488:	f000 f8f4 	bl	7674 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    748c:	69a1      	ldr	r1, [r4, #24]
    748e:	b321      	cbz	r1, 74da <k_mem_slab_alloc+0x7e>
		/* take a free block */
		*mem = slab->free_list;
    7490:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    7492:	69a3      	ldr	r3, [r4, #24]
    7494:	681b      	ldr	r3, [r3, #0]
    7496:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    7498:	69e3      	ldr	r3, [r4, #28]
    749a:	3301      	adds	r3, #1
    749c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    749e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    74a0:	4628      	mov	r0, r5
    74a2:	f000 f8d7 	bl	7654 <z_spin_unlock_valid>
    74a6:	b388      	cbz	r0, 750c <k_mem_slab_alloc+0xb0>
	__asm__ volatile(
    74a8:	f387 8811 	msr	BASEPRI, r7
    74ac:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    74b0:	4620      	mov	r0, r4
    74b2:	b002      	add	sp, #8
    74b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    74b8:	f8df a070 	ldr.w	sl, [pc, #112]	; 752c <k_mem_slab_alloc+0xd0>
    74bc:	238e      	movs	r3, #142	; 0x8e
    74be:	4652      	mov	r2, sl
    74c0:	491b      	ldr	r1, [pc, #108]	; (7530 <k_mem_slab_alloc+0xd4>)
    74c2:	481c      	ldr	r0, [pc, #112]	; (7534 <k_mem_slab_alloc+0xd8>)
    74c4:	f003 fa1a 	bl	a8fc <assert_print>
    74c8:	4629      	mov	r1, r5
    74ca:	481b      	ldr	r0, [pc, #108]	; (7538 <k_mem_slab_alloc+0xdc>)
    74cc:	f003 fa16 	bl	a8fc <assert_print>
    74d0:	218e      	movs	r1, #142	; 0x8e
    74d2:	4650      	mov	r0, sl
    74d4:	f003 fa0b 	bl	a8ee <assert_post_action>
    74d8:	e7d5      	b.n	7486 <k_mem_slab_alloc+0x2a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    74da:	ea59 0308 	orrs.w	r3, r9, r8
    74de:	d104      	bne.n	74ea <k_mem_slab_alloc+0x8e>
		*mem = NULL;
    74e0:	2300      	movs	r3, #0
    74e2:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    74e4:	f06f 040b 	mvn.w	r4, #11
    74e8:	e7da      	b.n	74a0 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    74ea:	f8cd 8000 	str.w	r8, [sp]
    74ee:	f8cd 9004 	str.w	r9, [sp, #4]
    74f2:	4622      	mov	r2, r4
    74f4:	4639      	mov	r1, r7
    74f6:	4628      	mov	r0, r5
    74f8:	f001 fb38 	bl	8b6c <z_pend_curr>
		if (result == 0) {
    74fc:	4604      	mov	r4, r0
    74fe:	2800      	cmp	r0, #0
    7500:	d1d6      	bne.n	74b0 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    7502:	4b0e      	ldr	r3, [pc, #56]	; (753c <k_mem_slab_alloc+0xe0>)
    7504:	689b      	ldr	r3, [r3, #8]
    7506:	695b      	ldr	r3, [r3, #20]
    7508:	6033      	str	r3, [r6, #0]
		return result;
    750a:	e7d1      	b.n	74b0 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    750c:	4e07      	ldr	r6, [pc, #28]	; (752c <k_mem_slab_alloc+0xd0>)
    750e:	23b9      	movs	r3, #185	; 0xb9
    7510:	4632      	mov	r2, r6
    7512:	490b      	ldr	r1, [pc, #44]	; (7540 <k_mem_slab_alloc+0xe4>)
    7514:	4807      	ldr	r0, [pc, #28]	; (7534 <k_mem_slab_alloc+0xd8>)
    7516:	f003 f9f1 	bl	a8fc <assert_print>
    751a:	4629      	mov	r1, r5
    751c:	4809      	ldr	r0, [pc, #36]	; (7544 <k_mem_slab_alloc+0xe8>)
    751e:	f003 f9ed 	bl	a8fc <assert_print>
    7522:	21b9      	movs	r1, #185	; 0xb9
    7524:	4630      	mov	r0, r6
    7526:	f003 f9e2 	bl	a8ee <assert_post_action>
    752a:	e7bd      	b.n	74a8 <k_mem_slab_alloc+0x4c>
    752c:	0000c400 	.word	0x0000c400
    7530:	0000c460 	.word	0x0000c460
    7534:	0000c254 	.word	0x0000c254
    7538:	0000c478 	.word	0x0000c478
    753c:	20005214 	.word	0x20005214
    7540:	0000c430 	.word	0x0000c430
    7544:	0000c448 	.word	0x0000c448

00007548 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    7548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    754c:	4604      	mov	r4, r0
    754e:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    7550:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    7554:	f04f 0320 	mov.w	r3, #32
    7558:	f3ef 8711 	mrs	r7, BASEPRI
    755c:	f383 8812 	msr	BASEPRI_MAX, r3
    7560:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7564:	4630      	mov	r0, r6
    7566:	f000 f865 	bl	7634 <z_spin_lock_valid>
    756a:	b1b0      	cbz	r0, 759a <k_mem_slab_free+0x52>
	z_spin_lock_set_owner(l);
    756c:	4630      	mov	r0, r6
    756e:	f000 f881 	bl	7674 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    7572:	69a3      	ldr	r3, [r4, #24]
    7574:	b313      	cbz	r3, 75bc <k_mem_slab_free+0x74>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    7576:	682b      	ldr	r3, [r5, #0]
    7578:	69a2      	ldr	r2, [r4, #24]
    757a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    757c:	682b      	ldr	r3, [r5, #0]
    757e:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    7580:	69e3      	ldr	r3, [r4, #28]
    7582:	3b01      	subs	r3, #1
    7584:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7586:	4630      	mov	r0, r6
    7588:	f000 f864 	bl	7654 <z_spin_unlock_valid>
    758c:	b338      	cbz	r0, 75de <k_mem_slab_free+0x96>
	__asm__ volatile(
    758e:	f387 8811 	msr	BASEPRI, r7
    7592:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    7596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    759a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 7600 <k_mem_slab_free+0xb8>
    759e:	238e      	movs	r3, #142	; 0x8e
    75a0:	4642      	mov	r2, r8
    75a2:	4918      	ldr	r1, [pc, #96]	; (7604 <k_mem_slab_free+0xbc>)
    75a4:	4818      	ldr	r0, [pc, #96]	; (7608 <k_mem_slab_free+0xc0>)
    75a6:	f003 f9a9 	bl	a8fc <assert_print>
    75aa:	4631      	mov	r1, r6
    75ac:	4817      	ldr	r0, [pc, #92]	; (760c <k_mem_slab_free+0xc4>)
    75ae:	f003 f9a5 	bl	a8fc <assert_print>
    75b2:	218e      	movs	r1, #142	; 0x8e
    75b4:	4640      	mov	r0, r8
    75b6:	f003 f99a 	bl	a8ee <assert_post_action>
    75ba:	e7d7      	b.n	756c <k_mem_slab_free+0x24>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    75bc:	4620      	mov	r0, r4
    75be:	f001 fd71 	bl	90a4 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    75c2:	2800      	cmp	r0, #0
    75c4:	d0d7      	beq.n	7576 <k_mem_slab_free+0x2e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    75c6:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    75c8:	2100      	movs	r1, #0
    75ca:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    75ce:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    75d0:	f001 f8f0 	bl	87b4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    75d4:	4639      	mov	r1, r7
    75d6:	4630      	mov	r0, r6
    75d8:	f000 fe48 	bl	826c <z_reschedule>
			return;
    75dc:	e7db      	b.n	7596 <k_mem_slab_free+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    75de:	4c08      	ldr	r4, [pc, #32]	; (7600 <k_mem_slab_free+0xb8>)
    75e0:	23b9      	movs	r3, #185	; 0xb9
    75e2:	4622      	mov	r2, r4
    75e4:	490a      	ldr	r1, [pc, #40]	; (7610 <k_mem_slab_free+0xc8>)
    75e6:	4808      	ldr	r0, [pc, #32]	; (7608 <k_mem_slab_free+0xc0>)
    75e8:	f003 f988 	bl	a8fc <assert_print>
    75ec:	4631      	mov	r1, r6
    75ee:	4809      	ldr	r0, [pc, #36]	; (7614 <k_mem_slab_free+0xcc>)
    75f0:	f003 f984 	bl	a8fc <assert_print>
    75f4:	21b9      	movs	r1, #185	; 0xb9
    75f6:	4620      	mov	r0, r4
    75f8:	f003 f979 	bl	a8ee <assert_post_action>
    75fc:	e7c7      	b.n	758e <k_mem_slab_free+0x46>
    75fe:	bf00      	nop
    7600:	0000c400 	.word	0x0000c400
    7604:	0000c460 	.word	0x0000c460
    7608:	0000c254 	.word	0x0000c254
    760c:	0000c478 	.word	0x0000c478
    7610:	0000c430 	.word	0x0000c430
    7614:	0000c448 	.word	0x0000c448

00007618 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    7618:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    761a:	ea53 0102 	orrs.w	r1, r3, r2
    761e:	d102      	bne.n	7626 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    7620:	f004 faee 	bl	bc00 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    7624:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7626:	4902      	ldr	r1, [pc, #8]	; (7630 <schedule_new_thread+0x18>)
    7628:	3018      	adds	r0, #24
    762a:	f002 f86d 	bl	9708 <z_add_timeout>
    762e:	e7f9      	b.n	7624 <schedule_new_thread+0xc>
    7630:	00008911 	.word	0x00008911

00007634 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    7634:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
    7636:	b13b      	cbz	r3, 7648 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    7638:	f003 0303 	and.w	r3, r3, #3
    763c:	4a04      	ldr	r2, [pc, #16]	; (7650 <z_spin_lock_valid+0x1c>)
    763e:	7d12      	ldrb	r2, [r2, #20]
    7640:	4293      	cmp	r3, r2
    7642:	d003      	beq.n	764c <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
    7644:	2001      	movs	r0, #1
    7646:	4770      	bx	lr
    7648:	2001      	movs	r0, #1
    764a:	4770      	bx	lr
			return false;
    764c:	2000      	movs	r0, #0
}
    764e:	4770      	bx	lr
    7650:	20005214 	.word	0x20005214

00007654 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7654:	6801      	ldr	r1, [r0, #0]
    7656:	4a06      	ldr	r2, [pc, #24]	; (7670 <z_spin_unlock_valid+0x1c>)
    7658:	7d13      	ldrb	r3, [r2, #20]
    765a:	6892      	ldr	r2, [r2, #8]
    765c:	4313      	orrs	r3, r2
    765e:	4299      	cmp	r1, r3
    7660:	d103      	bne.n	766a <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
    7662:	2300      	movs	r3, #0
    7664:	6003      	str	r3, [r0, #0]
	return true;
    7666:	2001      	movs	r0, #1
    7668:	4770      	bx	lr
		return false;
    766a:	2000      	movs	r0, #0
}
    766c:	4770      	bx	lr
    766e:	bf00      	nop
    7670:	20005214 	.word	0x20005214

00007674 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    7674:	4a02      	ldr	r2, [pc, #8]	; (7680 <z_spin_lock_set_owner+0xc>)
    7676:	7d13      	ldrb	r3, [r2, #20]
    7678:	6892      	ldr	r2, [r2, #8]
    767a:	4313      	orrs	r3, r2
    767c:	6003      	str	r3, [r0, #0]
}
    767e:	4770      	bx	lr
    7680:	20005214 	.word	0x20005214

00007684 <z_thread_monitor_exit>:
{
    7684:	b570      	push	{r4, r5, r6, lr}
    7686:	4604      	mov	r4, r0
	__asm__ volatile(
    7688:	f04f 0320 	mov.w	r3, #32
    768c:	f3ef 8511 	mrs	r5, BASEPRI
    7690:	f383 8812 	msr	BASEPRI_MAX, r3
    7694:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7698:	481f      	ldr	r0, [pc, #124]	; (7718 <z_thread_monitor_exit+0x94>)
    769a:	f7ff ffcb 	bl	7634 <z_spin_lock_valid>
    769e:	b150      	cbz	r0, 76b6 <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
    76a0:	481d      	ldr	r0, [pc, #116]	; (7718 <z_thread_monitor_exit+0x94>)
    76a2:	f7ff ffe7 	bl	7674 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
    76a6:	4b1d      	ldr	r3, [pc, #116]	; (771c <z_thread_monitor_exit+0x98>)
    76a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    76aa:	42a3      	cmp	r3, r4
    76ac:	d114      	bne.n	76d8 <z_thread_monitor_exit+0x54>
		_kernel.threads = _kernel.threads->next_thread;
    76ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    76b0:	4b1a      	ldr	r3, [pc, #104]	; (771c <z_thread_monitor_exit+0x98>)
    76b2:	629a      	str	r2, [r3, #40]	; 0x28
    76b4:	e017      	b.n	76e6 <z_thread_monitor_exit+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    76b6:	4e1a      	ldr	r6, [pc, #104]	; (7720 <z_thread_monitor_exit+0x9c>)
    76b8:	238e      	movs	r3, #142	; 0x8e
    76ba:	4632      	mov	r2, r6
    76bc:	4919      	ldr	r1, [pc, #100]	; (7724 <z_thread_monitor_exit+0xa0>)
    76be:	481a      	ldr	r0, [pc, #104]	; (7728 <z_thread_monitor_exit+0xa4>)
    76c0:	f003 f91c 	bl	a8fc <assert_print>
    76c4:	4914      	ldr	r1, [pc, #80]	; (7718 <z_thread_monitor_exit+0x94>)
    76c6:	4819      	ldr	r0, [pc, #100]	; (772c <z_thread_monitor_exit+0xa8>)
    76c8:	f003 f918 	bl	a8fc <assert_print>
    76cc:	218e      	movs	r1, #142	; 0x8e
    76ce:	4630      	mov	r0, r6
    76d0:	f003 f90d 	bl	a8ee <assert_post_action>
    76d4:	e7e4      	b.n	76a0 <z_thread_monitor_exit+0x1c>
			prev_thread = prev_thread->next_thread;
    76d6:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    76d8:	b113      	cbz	r3, 76e0 <z_thread_monitor_exit+0x5c>
			(thread != prev_thread->next_thread)) {
    76da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    76dc:	42a2      	cmp	r2, r4
    76de:	d1fa      	bne.n	76d6 <z_thread_monitor_exit+0x52>
		if (prev_thread != NULL) {
    76e0:	b10b      	cbz	r3, 76e6 <z_thread_monitor_exit+0x62>
			prev_thread->next_thread = thread->next_thread;
    76e2:	6f22      	ldr	r2, [r4, #112]	; 0x70
    76e4:	671a      	str	r2, [r3, #112]	; 0x70
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    76e6:	480c      	ldr	r0, [pc, #48]	; (7718 <z_thread_monitor_exit+0x94>)
    76e8:	f7ff ffb4 	bl	7654 <z_spin_unlock_valid>
    76ec:	b120      	cbz	r0, 76f8 <z_thread_monitor_exit+0x74>
	__asm__ volatile(
    76ee:	f385 8811 	msr	BASEPRI, r5
    76f2:	f3bf 8f6f 	isb	sy
}
    76f6:	bd70      	pop	{r4, r5, r6, pc}
    76f8:	4c09      	ldr	r4, [pc, #36]	; (7720 <z_thread_monitor_exit+0x9c>)
    76fa:	23b9      	movs	r3, #185	; 0xb9
    76fc:	4622      	mov	r2, r4
    76fe:	490c      	ldr	r1, [pc, #48]	; (7730 <z_thread_monitor_exit+0xac>)
    7700:	4809      	ldr	r0, [pc, #36]	; (7728 <z_thread_monitor_exit+0xa4>)
    7702:	f003 f8fb 	bl	a8fc <assert_print>
    7706:	4904      	ldr	r1, [pc, #16]	; (7718 <z_thread_monitor_exit+0x94>)
    7708:	480a      	ldr	r0, [pc, #40]	; (7734 <z_thread_monitor_exit+0xb0>)
    770a:	f003 f8f7 	bl	a8fc <assert_print>
    770e:	21b9      	movs	r1, #185	; 0xb9
    7710:	4620      	mov	r0, r4
    7712:	f003 f8ec 	bl	a8ee <assert_post_action>
    7716:	e7ea      	b.n	76ee <z_thread_monitor_exit+0x6a>
    7718:	20005240 	.word	0x20005240
    771c:	20005214 	.word	0x20005214
    7720:	0000c400 	.word	0x0000c400
    7724:	0000c460 	.word	0x0000c460
    7728:	0000c254 	.word	0x0000c254
    772c:	0000c478 	.word	0x0000c478
    7730:	0000c430 	.word	0x0000c430
    7734:	0000c448 	.word	0x0000c448

00007738 <z_setup_new_thread>:
{
    7738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    773c:	b085      	sub	sp, #20
    773e:	4604      	mov	r4, r0
    7740:	460e      	mov	r6, r1
    7742:	4690      	mov	r8, r2
    7744:	461d      	mov	r5, r3
    7746:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    774a:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    774e:	9f11      	ldr	r7, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
    7750:	2f0f      	cmp	r7, #15
    7752:	d05e      	beq.n	7812 <z_setup_new_thread+0xda>
    7754:	f107 0310 	add.w	r3, r7, #16
    7758:	2b1e      	cmp	r3, #30
    775a:	d85e      	bhi.n	781a <z_setup_new_thread+0xe2>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    775c:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    7760:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    7762:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    7764:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7766:	2204      	movs	r2, #4
    7768:	4639      	mov	r1, r7
    776a:	4620      	mov	r0, r4
    776c:	f004 fa4c 	bl	bc08 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    7770:	4642      	mov	r2, r8
    7772:	4631      	mov	r1, r6
    7774:	4620      	mov	r0, r4
    7776:	f004 fa29 	bl	bbcc <setup_thread_stack>
    777a:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    777c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    777e:	9302      	str	r3, [sp, #8]
    7780:	f8cd a004 	str.w	sl, [sp, #4]
    7784:	f8cd b000 	str.w	fp, [sp]
    7788:	462b      	mov	r3, r5
    778a:	4602      	mov	r2, r0
    778c:	4631      	mov	r1, r6
    778e:	4620      	mov	r0, r4
    7790:	f7fb fbbc 	bl	2f0c <arch_new_thread>
	new_thread->init_data = NULL;
    7794:	2300      	movs	r3, #0
    7796:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
    7798:	6625      	str	r5, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    779a:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    779e:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    77a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    77a4:	66e3      	str	r3, [r4, #108]	; 0x6c
	__asm__ volatile(
    77a6:	f04f 0320 	mov.w	r3, #32
    77aa:	f3ef 8611 	mrs	r6, BASEPRI
    77ae:	f383 8812 	msr	BASEPRI_MAX, r3
    77b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    77b6:	4837      	ldr	r0, [pc, #220]	; (7894 <z_setup_new_thread+0x15c>)
    77b8:	f7ff ff3c 	bl	7634 <z_spin_lock_valid>
    77bc:	2800      	cmp	r0, #0
    77be:	d042      	beq.n	7846 <z_setup_new_thread+0x10e>
	z_spin_lock_set_owner(l);
    77c0:	4d34      	ldr	r5, [pc, #208]	; (7894 <z_setup_new_thread+0x15c>)
    77c2:	4628      	mov	r0, r5
    77c4:	f7ff ff56 	bl	7674 <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
    77c8:	4b33      	ldr	r3, [pc, #204]	; (7898 <z_setup_new_thread+0x160>)
    77ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    77cc:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    77ce:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    77d0:	4628      	mov	r0, r5
    77d2:	f7ff ff3f 	bl	7654 <z_spin_unlock_valid>
    77d6:	2800      	cmp	r0, #0
    77d8:	d045      	beq.n	7866 <z_setup_new_thread+0x12e>
	__asm__ volatile(
    77da:	f386 8811 	msr	BASEPRI, r6
    77de:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    77e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    77e4:	2b00      	cmp	r3, #0
    77e6:	d04e      	beq.n	7886 <z_setup_new_thread+0x14e>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    77e8:	221f      	movs	r2, #31
    77ea:	4619      	mov	r1, r3
    77ec:	f104 0074 	add.w	r0, r4, #116	; 0x74
    77f0:	f004 fad8 	bl	bda4 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    77f4:	2300      	movs	r3, #0
    77f6:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
	if (!_current) {
    77fa:	4b27      	ldr	r3, [pc, #156]	; (7898 <z_setup_new_thread+0x160>)
    77fc:	689b      	ldr	r3, [r3, #8]
    77fe:	2b00      	cmp	r3, #0
    7800:	d045      	beq.n	788e <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
    7802:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    7806:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    780a:	4638      	mov	r0, r7
    780c:	b005      	add	sp, #20
    780e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    7812:	4b22      	ldr	r3, [pc, #136]	; (789c <z_setup_new_thread+0x164>)
    7814:	429d      	cmp	r5, r3
    7816:	d19d      	bne.n	7754 <z_setup_new_thread+0x1c>
    7818:	e7a0      	b.n	775c <z_setup_new_thread+0x24>
    781a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 78a0 <z_setup_new_thread+0x168>
    781e:	f240 13ff 	movw	r3, #511	; 0x1ff
    7822:	464a      	mov	r2, r9
    7824:	491f      	ldr	r1, [pc, #124]	; (78a4 <z_setup_new_thread+0x16c>)
    7826:	4820      	ldr	r0, [pc, #128]	; (78a8 <z_setup_new_thread+0x170>)
    7828:	f003 f868 	bl	a8fc <assert_print>
    782c:	f06f 030f 	mvn.w	r3, #15
    7830:	220e      	movs	r2, #14
    7832:	4639      	mov	r1, r7
    7834:	481d      	ldr	r0, [pc, #116]	; (78ac <z_setup_new_thread+0x174>)
    7836:	f003 f861 	bl	a8fc <assert_print>
    783a:	f240 11ff 	movw	r1, #511	; 0x1ff
    783e:	4648      	mov	r0, r9
    7840:	f003 f855 	bl	a8ee <assert_post_action>
    7844:	e78a      	b.n	775c <z_setup_new_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7846:	4d1a      	ldr	r5, [pc, #104]	; (78b0 <z_setup_new_thread+0x178>)
    7848:	238e      	movs	r3, #142	; 0x8e
    784a:	462a      	mov	r2, r5
    784c:	4919      	ldr	r1, [pc, #100]	; (78b4 <z_setup_new_thread+0x17c>)
    784e:	4816      	ldr	r0, [pc, #88]	; (78a8 <z_setup_new_thread+0x170>)
    7850:	f003 f854 	bl	a8fc <assert_print>
    7854:	490f      	ldr	r1, [pc, #60]	; (7894 <z_setup_new_thread+0x15c>)
    7856:	4818      	ldr	r0, [pc, #96]	; (78b8 <z_setup_new_thread+0x180>)
    7858:	f003 f850 	bl	a8fc <assert_print>
    785c:	218e      	movs	r1, #142	; 0x8e
    785e:	4628      	mov	r0, r5
    7860:	f003 f845 	bl	a8ee <assert_post_action>
    7864:	e7ac      	b.n	77c0 <z_setup_new_thread+0x88>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7866:	4d12      	ldr	r5, [pc, #72]	; (78b0 <z_setup_new_thread+0x178>)
    7868:	23b9      	movs	r3, #185	; 0xb9
    786a:	462a      	mov	r2, r5
    786c:	4913      	ldr	r1, [pc, #76]	; (78bc <z_setup_new_thread+0x184>)
    786e:	480e      	ldr	r0, [pc, #56]	; (78a8 <z_setup_new_thread+0x170>)
    7870:	f003 f844 	bl	a8fc <assert_print>
    7874:	4907      	ldr	r1, [pc, #28]	; (7894 <z_setup_new_thread+0x15c>)
    7876:	4812      	ldr	r0, [pc, #72]	; (78c0 <z_setup_new_thread+0x188>)
    7878:	f003 f840 	bl	a8fc <assert_print>
    787c:	21b9      	movs	r1, #185	; 0xb9
    787e:	4628      	mov	r0, r5
    7880:	f003 f835 	bl	a8ee <assert_post_action>
    7884:	e7a9      	b.n	77da <z_setup_new_thread+0xa2>
		new_thread->name[0] = '\0';
    7886:	2300      	movs	r3, #0
    7888:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    788c:	e7b5      	b.n	77fa <z_setup_new_thread+0xc2>
		new_thread->resource_pool = NULL;
    788e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    7892:	e7ba      	b.n	780a <z_setup_new_thread+0xd2>
    7894:	20005240 	.word	0x20005240
    7898:	20005214 	.word	0x20005214
    789c:	00007a4d 	.word	0x00007a4d
    78a0:	0000da3c 	.word	0x0000da3c
    78a4:	0000da94 	.word	0x0000da94
    78a8:	0000c254 	.word	0x0000c254
    78ac:	0000db14 	.word	0x0000db14
    78b0:	0000c400 	.word	0x0000c400
    78b4:	0000c460 	.word	0x0000c460
    78b8:	0000c478 	.word	0x0000c478
    78bc:	0000c430 	.word	0x0000c430
    78c0:	0000c448 	.word	0x0000c448

000078c4 <z_impl_k_thread_create>:
{
    78c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    78c8:	b086      	sub	sp, #24
    78ca:	4604      	mov	r4, r0
    78cc:	460d      	mov	r5, r1
    78ce:	4616      	mov	r6, r2
    78d0:	461f      	mov	r7, r3
    78d2:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
    78d6:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    78da:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    78de:	b9db      	cbnz	r3, 7918 <z_impl_k_thread_create+0x54>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    78e0:	2300      	movs	r3, #0
    78e2:	9305      	str	r3, [sp, #20]
    78e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    78e6:	9304      	str	r3, [sp, #16]
    78e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    78ea:	9303      	str	r3, [sp, #12]
    78ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    78ee:	9302      	str	r3, [sp, #8]
    78f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    78f2:	9301      	str	r3, [sp, #4]
    78f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    78f6:	9300      	str	r3, [sp, #0]
    78f8:	463b      	mov	r3, r7
    78fa:	4632      	mov	r2, r6
    78fc:	4629      	mov	r1, r5
    78fe:	4620      	mov	r0, r4
    7900:	f7ff ff1a 	bl	7738 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    7904:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    7908:	bf08      	it	eq
    790a:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
    790e:	d115      	bne.n	793c <z_impl_k_thread_create+0x78>
}
    7910:	4620      	mov	r0, r4
    7912:	b006      	add	sp, #24
    7914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    7918:	f8df a02c 	ldr.w	sl, [pc, #44]	; 7948 <z_impl_k_thread_create+0x84>
    791c:	f240 236e 	movw	r3, #622	; 0x26e
    7920:	4652      	mov	r2, sl
    7922:	490a      	ldr	r1, [pc, #40]	; (794c <z_impl_k_thread_create+0x88>)
    7924:	480a      	ldr	r0, [pc, #40]	; (7950 <z_impl_k_thread_create+0x8c>)
    7926:	f002 ffe9 	bl	a8fc <assert_print>
    792a:	480a      	ldr	r0, [pc, #40]	; (7954 <z_impl_k_thread_create+0x90>)
    792c:	f002 ffe6 	bl	a8fc <assert_print>
    7930:	f240 216e 	movw	r1, #622	; 0x26e
    7934:	4650      	mov	r0, sl
    7936:	f002 ffda 	bl	a8ee <assert_post_action>
    793a:	e7d1      	b.n	78e0 <z_impl_k_thread_create+0x1c>
		schedule_new_thread(new_thread, delay);
    793c:	464a      	mov	r2, r9
    793e:	4643      	mov	r3, r8
    7940:	4620      	mov	r0, r4
    7942:	f7ff fe69 	bl	7618 <schedule_new_thread>
    7946:	e7e3      	b.n	7910 <z_impl_k_thread_create+0x4c>
    7948:	0000da3c 	.word	0x0000da3c
    794c:	0000db48 	.word	0x0000db48
    7950:	0000c254 	.word	0x0000c254
    7954:	0000db5c 	.word	0x0000db5c

00007958 <z_init_static_threads>:
{
    7958:	b530      	push	{r4, r5, lr}
    795a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    795c:	4c35      	ldr	r4, [pc, #212]	; (7a34 <z_init_static_threads+0xdc>)
    795e:	e017      	b.n	7990 <z_init_static_threads+0x38>
    7960:	4b35      	ldr	r3, [pc, #212]	; (7a38 <z_init_static_threads+0xe0>)
    7962:	429c      	cmp	r4, r3
    7964:	d228      	bcs.n	79b8 <z_init_static_threads+0x60>
		z_setup_new_thread(
    7966:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7968:	9305      	str	r3, [sp, #20]
    796a:	6a23      	ldr	r3, [r4, #32]
    796c:	9304      	str	r3, [sp, #16]
    796e:	69e3      	ldr	r3, [r4, #28]
    7970:	9303      	str	r3, [sp, #12]
    7972:	69a3      	ldr	r3, [r4, #24]
    7974:	9302      	str	r3, [sp, #8]
    7976:	6963      	ldr	r3, [r4, #20]
    7978:	9301      	str	r3, [sp, #4]
    797a:	6923      	ldr	r3, [r4, #16]
    797c:	9300      	str	r3, [sp, #0]
    797e:	68e3      	ldr	r3, [r4, #12]
    7980:	68a2      	ldr	r2, [r4, #8]
    7982:	6861      	ldr	r1, [r4, #4]
    7984:	6820      	ldr	r0, [r4, #0]
    7986:	f7ff fed7 	bl	7738 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    798a:	6823      	ldr	r3, [r4, #0]
    798c:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    798e:	3430      	adds	r4, #48	; 0x30
    7990:	4b29      	ldr	r3, [pc, #164]	; (7a38 <z_init_static_threads+0xe0>)
    7992:	429c      	cmp	r4, r3
    7994:	d9e4      	bls.n	7960 <z_init_static_threads+0x8>
    7996:	4d29      	ldr	r5, [pc, #164]	; (7a3c <z_init_static_threads+0xe4>)
    7998:	f240 23d5 	movw	r3, #725	; 0x2d5
    799c:	462a      	mov	r2, r5
    799e:	4928      	ldr	r1, [pc, #160]	; (7a40 <z_init_static_threads+0xe8>)
    79a0:	4828      	ldr	r0, [pc, #160]	; (7a44 <z_init_static_threads+0xec>)
    79a2:	f002 ffab 	bl	a8fc <assert_print>
    79a6:	4828      	ldr	r0, [pc, #160]	; (7a48 <z_init_static_threads+0xf0>)
    79a8:	f002 ffa8 	bl	a8fc <assert_print>
    79ac:	f240 21d5 	movw	r1, #725	; 0x2d5
    79b0:	4628      	mov	r0, r5
    79b2:	f002 ff9c 	bl	a8ee <assert_post_action>
    79b6:	e7d3      	b.n	7960 <z_init_static_threads+0x8>
	k_sched_lock();
    79b8:	f000 fca6 	bl	8308 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    79bc:	4c1d      	ldr	r4, [pc, #116]	; (7a34 <z_init_static_threads+0xdc>)
    79be:	e000      	b.n	79c2 <z_init_static_threads+0x6a>
    79c0:	3430      	adds	r4, #48	; 0x30
    79c2:	4b1d      	ldr	r3, [pc, #116]	; (7a38 <z_init_static_threads+0xe0>)
    79c4:	429c      	cmp	r4, r3
    79c6:	d81f      	bhi.n	7a08 <z_init_static_threads+0xb0>
    79c8:	4b1b      	ldr	r3, [pc, #108]	; (7a38 <z_init_static_threads+0xe0>)
    79ca:	429c      	cmp	r4, r3
    79cc:	d22d      	bcs.n	7a2a <z_init_static_threads+0xd2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    79ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
    79d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    79d4:	d0f4      	beq.n	79c0 <z_init_static_threads+0x68>
			schedule_new_thread(thread_data->init_thread,
    79d6:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    79d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    79dc:	17c1      	asrs	r1, r0, #31
    79de:	03c9      	lsls	r1, r1, #15
    79e0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    79e4:	03c0      	lsls	r0, r0, #15
    79e6:	f240 33e7 	movw	r3, #999	; 0x3e7
    79ea:	18c0      	adds	r0, r0, r3
    79ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    79f0:	f04f 0300 	mov.w	r3, #0
    79f4:	f141 0100 	adc.w	r1, r1, #0
    79f8:	f7f8 fb82 	bl	100 <__aeabi_uldivmod>
    79fc:	4602      	mov	r2, r0
    79fe:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    7a00:	4628      	mov	r0, r5
    7a02:	f7ff fe09 	bl	7618 <schedule_new_thread>
    7a06:	e7db      	b.n	79c0 <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
    7a08:	4d0c      	ldr	r5, [pc, #48]	; (7a3c <z_init_static_threads+0xe4>)
    7a0a:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    7a0e:	462a      	mov	r2, r5
    7a10:	490b      	ldr	r1, [pc, #44]	; (7a40 <z_init_static_threads+0xe8>)
    7a12:	480c      	ldr	r0, [pc, #48]	; (7a44 <z_init_static_threads+0xec>)
    7a14:	f002 ff72 	bl	a8fc <assert_print>
    7a18:	480b      	ldr	r0, [pc, #44]	; (7a48 <z_init_static_threads+0xf0>)
    7a1a:	f002 ff6f 	bl	a8fc <assert_print>
    7a1e:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    7a22:	4628      	mov	r0, r5
    7a24:	f002 ff63 	bl	a8ee <assert_post_action>
    7a28:	e7ce      	b.n	79c8 <z_init_static_threads+0x70>
	k_sched_unlock();
    7a2a:	f001 f9f9 	bl	8e20 <k_sched_unlock>
}
    7a2e:	b007      	add	sp, #28
    7a30:	bd30      	pop	{r4, r5, pc}
    7a32:	bf00      	nop
    7a34:	200041c4 	.word	0x200041c4
    7a38:	200041c4 	.word	0x200041c4
    7a3c:	0000da3c 	.word	0x0000da3c
    7a40:	0000db84 	.word	0x0000db84
    7a44:	0000c254 	.word	0x0000c254
    7a48:	0000da1c 	.word	0x0000da1c

00007a4c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    7a4c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    7a4e:	4b14      	ldr	r3, [pc, #80]	; (7aa0 <idle+0x54>)
    7a50:	689b      	ldr	r3, [r3, #8]
    7a52:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7a56:	2b00      	cmp	r3, #0
    7a58:	da0d      	bge.n	7a76 <idle+0x2a>
    7a5a:	4c12      	ldr	r4, [pc, #72]	; (7aa4 <idle+0x58>)
    7a5c:	2327      	movs	r3, #39	; 0x27
    7a5e:	4622      	mov	r2, r4
    7a60:	4911      	ldr	r1, [pc, #68]	; (7aa8 <idle+0x5c>)
    7a62:	4812      	ldr	r0, [pc, #72]	; (7aac <idle+0x60>)
    7a64:	f002 ff4a 	bl	a8fc <assert_print>
    7a68:	2127      	movs	r1, #39	; 0x27
    7a6a:	4620      	mov	r0, r4
    7a6c:	f002 ff3f 	bl	a8ee <assert_post_action>
    7a70:	e001      	b.n	7a76 <idle+0x2a>
	arch_cpu_idle();
    7a72:	f7fb f91f 	bl	2cb4 <arch_cpu_idle>
	__asm__ volatile(
    7a76:	f04f 0220 	mov.w	r2, #32
    7a7a:	f3ef 8311 	mrs	r3, BASEPRI
    7a7e:	f382 8812 	msr	BASEPRI_MAX, r2
    7a82:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7a86:	f001 ff7d 	bl	9984 <z_get_next_timeout_expiry>
    7a8a:	4b05      	ldr	r3, [pc, #20]	; (7aa0 <idle+0x54>)
    7a8c:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    7a8e:	4b08      	ldr	r3, [pc, #32]	; (7ab0 <idle+0x64>)
    7a90:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7a92:	2b00      	cmp	r3, #0
    7a94:	d0ed      	beq.n	7a72 <idle+0x26>
    7a96:	f7fa fed5 	bl	2844 <pm_system_suspend>
    7a9a:	2800      	cmp	r0, #0
    7a9c:	d1eb      	bne.n	7a76 <idle+0x2a>
    7a9e:	e7e8      	b.n	7a72 <idle+0x26>
    7aa0:	20005214 	.word	0x20005214
    7aa4:	0000dbb4 	.word	0x0000dbb4
    7aa8:	0000dbd8 	.word	0x0000dbd8
    7aac:	0000c254 	.word	0x0000c254
    7ab0:	20005452 	.word	0x20005452

00007ab4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    7ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7ab8:	b083      	sub	sp, #12
    7aba:	4604      	mov	r4, r0
    7abc:	4616      	mov	r6, r2
    7abe:	461d      	mov	r5, r3
    7ac0:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7ac4:	2900      	cmp	r1, #0
    7ac6:	d12b      	bne.n	7b20 <z_impl_k_mutex_lock+0x6c>
    7ac8:	f04f 0320 	mov.w	r3, #32
    7acc:	f3ef 8711 	mrs	r7, BASEPRI
    7ad0:	f383 8812 	msr	BASEPRI_MAX, r3
    7ad4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7ad8:	487b      	ldr	r0, [pc, #492]	; (7cc8 <z_impl_k_mutex_lock+0x214>)
    7ada:	f7ff fdab 	bl	7634 <z_spin_lock_valid>
    7ade:	2800      	cmp	r0, #0
    7ae0:	d02d      	beq.n	7b3e <z_impl_k_mutex_lock+0x8a>
	z_spin_lock_set_owner(l);
    7ae2:	4879      	ldr	r0, [pc, #484]	; (7cc8 <z_impl_k_mutex_lock+0x214>)
    7ae4:	f7ff fdc6 	bl	7674 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7ae8:	68e1      	ldr	r1, [r4, #12]
    7aea:	2900      	cmp	r1, #0
    7aec:	d138      	bne.n	7b60 <z_impl_k_mutex_lock+0xac>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    7aee:	2900      	cmp	r1, #0
    7af0:	d17d      	bne.n	7bee <z_impl_k_mutex_lock+0x13a>
    7af2:	4b76      	ldr	r3, [pc, #472]	; (7ccc <z_impl_k_mutex_lock+0x218>)
    7af4:	689b      	ldr	r3, [r3, #8]
    7af6:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    7afa:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    7afc:	3101      	adds	r1, #1
    7afe:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    7b00:	4b72      	ldr	r3, [pc, #456]	; (7ccc <z_impl_k_mutex_lock+0x218>)
    7b02:	689b      	ldr	r3, [r3, #8]
    7b04:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7b06:	4870      	ldr	r0, [pc, #448]	; (7cc8 <z_impl_k_mutex_lock+0x214>)
    7b08:	f7ff fda4 	bl	7654 <z_spin_unlock_valid>
    7b0c:	2800      	cmp	r0, #0
    7b0e:	d070      	beq.n	7bf2 <z_impl_k_mutex_lock+0x13e>
	__asm__ volatile(
    7b10:	f387 8811 	msr	BASEPRI, r7
    7b14:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    7b18:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7b1a:	b003      	add	sp, #12
    7b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7b20:	4f6b      	ldr	r7, [pc, #428]	; (7cd0 <z_impl_k_mutex_lock+0x21c>)
    7b22:	2365      	movs	r3, #101	; 0x65
    7b24:	463a      	mov	r2, r7
    7b26:	496b      	ldr	r1, [pc, #428]	; (7cd4 <z_impl_k_mutex_lock+0x220>)
    7b28:	486b      	ldr	r0, [pc, #428]	; (7cd8 <z_impl_k_mutex_lock+0x224>)
    7b2a:	f002 fee7 	bl	a8fc <assert_print>
    7b2e:	486b      	ldr	r0, [pc, #428]	; (7cdc <z_impl_k_mutex_lock+0x228>)
    7b30:	f002 fee4 	bl	a8fc <assert_print>
    7b34:	2165      	movs	r1, #101	; 0x65
    7b36:	4638      	mov	r0, r7
    7b38:	f002 fed9 	bl	a8ee <assert_post_action>
    7b3c:	e7c4      	b.n	7ac8 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7b3e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 7ce0 <z_impl_k_mutex_lock+0x22c>
    7b42:	238e      	movs	r3, #142	; 0x8e
    7b44:	4642      	mov	r2, r8
    7b46:	4967      	ldr	r1, [pc, #412]	; (7ce4 <z_impl_k_mutex_lock+0x230>)
    7b48:	4863      	ldr	r0, [pc, #396]	; (7cd8 <z_impl_k_mutex_lock+0x224>)
    7b4a:	f002 fed7 	bl	a8fc <assert_print>
    7b4e:	495e      	ldr	r1, [pc, #376]	; (7cc8 <z_impl_k_mutex_lock+0x214>)
    7b50:	4865      	ldr	r0, [pc, #404]	; (7ce8 <z_impl_k_mutex_lock+0x234>)
    7b52:	f002 fed3 	bl	a8fc <assert_print>
    7b56:	218e      	movs	r1, #142	; 0x8e
    7b58:	4640      	mov	r0, r8
    7b5a:	f002 fec8 	bl	a8ee <assert_post_action>
    7b5e:	e7c0      	b.n	7ae2 <z_impl_k_mutex_lock+0x2e>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7b60:	68a2      	ldr	r2, [r4, #8]
    7b62:	4b5a      	ldr	r3, [pc, #360]	; (7ccc <z_impl_k_mutex_lock+0x218>)
    7b64:	689b      	ldr	r3, [r3, #8]
    7b66:	429a      	cmp	r2, r3
    7b68:	d0c1      	beq.n	7aee <z_impl_k_mutex_lock+0x3a>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7b6a:	ea55 0106 	orrs.w	r1, r5, r6
    7b6e:	bf0c      	ite	eq
    7b70:	f04f 0801 	moveq.w	r8, #1
    7b74:	f04f 0800 	movne.w	r8, #0
    7b78:	d04b      	beq.n	7c12 <z_impl_k_mutex_lock+0x15e>
					    mutex->owner->base.prio);
    7b7a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    7b7e:	4649      	mov	r1, r9
    7b80:	f993 000e 	ldrsb.w	r0, [r3, #14]
    7b84:	f004 f851 	bl	bc2a <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7b88:	4581      	cmp	r9, r0
    7b8a:	dc5d      	bgt.n	7c48 <z_impl_k_mutex_lock+0x194>
	bool resched = false;
    7b8c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    7b90:	9600      	str	r6, [sp, #0]
    7b92:	9501      	str	r5, [sp, #4]
    7b94:	4622      	mov	r2, r4
    7b96:	4639      	mov	r1, r7
    7b98:	484b      	ldr	r0, [pc, #300]	; (7cc8 <z_impl_k_mutex_lock+0x214>)
    7b9a:	f000 ffe7 	bl	8b6c <z_pend_curr>
	if (got_mutex == 0) {
    7b9e:	2800      	cmp	r0, #0
    7ba0:	d0bb      	beq.n	7b1a <z_impl_k_mutex_lock+0x66>
	__asm__ volatile(
    7ba2:	f04f 0320 	mov.w	r3, #32
    7ba6:	f3ef 8511 	mrs	r5, BASEPRI
    7baa:	f383 8812 	msr	BASEPRI_MAX, r3
    7bae:	f3bf 8f6f 	isb	sy
    7bb2:	4845      	ldr	r0, [pc, #276]	; (7cc8 <z_impl_k_mutex_lock+0x214>)
    7bb4:	f7ff fd3e 	bl	7634 <z_spin_lock_valid>
    7bb8:	2800      	cmp	r0, #0
    7bba:	d04b      	beq.n	7c54 <z_impl_k_mutex_lock+0x1a0>
	z_spin_lock_set_owner(l);
    7bbc:	4842      	ldr	r0, [pc, #264]	; (7cc8 <z_impl_k_mutex_lock+0x214>)
    7bbe:	f7ff fd59 	bl	7674 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7bc2:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7bc4:	42a3      	cmp	r3, r4
    7bc6:	d055      	beq.n	7c74 <z_impl_k_mutex_lock+0x1c0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7bc8:	2b00      	cmp	r3, #0
    7bca:	d053      	beq.n	7c74 <z_impl_k_mutex_lock+0x1c0>
    7bcc:	6921      	ldr	r1, [r4, #16]
    7bce:	f993 000e 	ldrsb.w	r0, [r3, #14]
    7bd2:	f004 f82a 	bl	bc2a <new_prio_for_inheritance>
    7bd6:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    7bd8:	4620      	mov	r0, r4
    7bda:	f004 f831 	bl	bc40 <adjust_owner_prio>
    7bde:	2800      	cmp	r0, #0
    7be0:	d14a      	bne.n	7c78 <z_impl_k_mutex_lock+0x1c4>
    7be2:	f1b9 0f00 	cmp.w	r9, #0
    7be6:	d049      	beq.n	7c7c <z_impl_k_mutex_lock+0x1c8>
    7be8:	f04f 0801 	mov.w	r8, #1
    7bec:	e046      	b.n	7c7c <z_impl_k_mutex_lock+0x1c8>
					_current->base.prio :
    7bee:	6923      	ldr	r3, [r4, #16]
    7bf0:	e783      	b.n	7afa <z_impl_k_mutex_lock+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7bf2:	4c3b      	ldr	r4, [pc, #236]	; (7ce0 <z_impl_k_mutex_lock+0x22c>)
    7bf4:	23b9      	movs	r3, #185	; 0xb9
    7bf6:	4622      	mov	r2, r4
    7bf8:	493c      	ldr	r1, [pc, #240]	; (7cec <z_impl_k_mutex_lock+0x238>)
    7bfa:	4837      	ldr	r0, [pc, #220]	; (7cd8 <z_impl_k_mutex_lock+0x224>)
    7bfc:	f002 fe7e 	bl	a8fc <assert_print>
    7c00:	4931      	ldr	r1, [pc, #196]	; (7cc8 <z_impl_k_mutex_lock+0x214>)
    7c02:	483b      	ldr	r0, [pc, #236]	; (7cf0 <z_impl_k_mutex_lock+0x23c>)
    7c04:	f002 fe7a 	bl	a8fc <assert_print>
    7c08:	21b9      	movs	r1, #185	; 0xb9
    7c0a:	4620      	mov	r0, r4
    7c0c:	f002 fe6f 	bl	a8ee <assert_post_action>
    7c10:	e77e      	b.n	7b10 <z_impl_k_mutex_lock+0x5c>
    7c12:	482d      	ldr	r0, [pc, #180]	; (7cc8 <z_impl_k_mutex_lock+0x214>)
    7c14:	f7ff fd1e 	bl	7654 <z_spin_unlock_valid>
    7c18:	b130      	cbz	r0, 7c28 <z_impl_k_mutex_lock+0x174>
	__asm__ volatile(
    7c1a:	f387 8811 	msr	BASEPRI, r7
    7c1e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    7c22:	f06f 000f 	mvn.w	r0, #15
    7c26:	e778      	b.n	7b1a <z_impl_k_mutex_lock+0x66>
    7c28:	4c2d      	ldr	r4, [pc, #180]	; (7ce0 <z_impl_k_mutex_lock+0x22c>)
    7c2a:	23b9      	movs	r3, #185	; 0xb9
    7c2c:	4622      	mov	r2, r4
    7c2e:	492f      	ldr	r1, [pc, #188]	; (7cec <z_impl_k_mutex_lock+0x238>)
    7c30:	4829      	ldr	r0, [pc, #164]	; (7cd8 <z_impl_k_mutex_lock+0x224>)
    7c32:	f002 fe63 	bl	a8fc <assert_print>
    7c36:	4924      	ldr	r1, [pc, #144]	; (7cc8 <z_impl_k_mutex_lock+0x214>)
    7c38:	482d      	ldr	r0, [pc, #180]	; (7cf0 <z_impl_k_mutex_lock+0x23c>)
    7c3a:	f002 fe5f 	bl	a8fc <assert_print>
    7c3e:	21b9      	movs	r1, #185	; 0xb9
    7c40:	4620      	mov	r0, r4
    7c42:	f002 fe54 	bl	a8ee <assert_post_action>
    7c46:	e7e8      	b.n	7c1a <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
    7c48:	4601      	mov	r1, r0
    7c4a:	4620      	mov	r0, r4
    7c4c:	f003 fff8 	bl	bc40 <adjust_owner_prio>
    7c50:	4681      	mov	r9, r0
    7c52:	e79d      	b.n	7b90 <z_impl_k_mutex_lock+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7c54:	4e22      	ldr	r6, [pc, #136]	; (7ce0 <z_impl_k_mutex_lock+0x22c>)
    7c56:	238e      	movs	r3, #142	; 0x8e
    7c58:	4632      	mov	r2, r6
    7c5a:	4922      	ldr	r1, [pc, #136]	; (7ce4 <z_impl_k_mutex_lock+0x230>)
    7c5c:	481e      	ldr	r0, [pc, #120]	; (7cd8 <z_impl_k_mutex_lock+0x224>)
    7c5e:	f002 fe4d 	bl	a8fc <assert_print>
    7c62:	4919      	ldr	r1, [pc, #100]	; (7cc8 <z_impl_k_mutex_lock+0x214>)
    7c64:	4820      	ldr	r0, [pc, #128]	; (7ce8 <z_impl_k_mutex_lock+0x234>)
    7c66:	f002 fe49 	bl	a8fc <assert_print>
    7c6a:	218e      	movs	r1, #142	; 0x8e
    7c6c:	4630      	mov	r0, r6
    7c6e:	f002 fe3e 	bl	a8ee <assert_post_action>
    7c72:	e7a3      	b.n	7bbc <z_impl_k_mutex_lock+0x108>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7c74:	6921      	ldr	r1, [r4, #16]
    7c76:	e7af      	b.n	7bd8 <z_impl_k_mutex_lock+0x124>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    7c78:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    7c7c:	f1b8 0f00 	cmp.w	r8, #0
    7c80:	d006      	beq.n	7c90 <z_impl_k_mutex_lock+0x1dc>
		z_reschedule(&lock, key);
    7c82:	4629      	mov	r1, r5
    7c84:	4810      	ldr	r0, [pc, #64]	; (7cc8 <z_impl_k_mutex_lock+0x214>)
    7c86:	f000 faf1 	bl	826c <z_reschedule>
	return -EAGAIN;
    7c8a:	f06f 000a 	mvn.w	r0, #10
    7c8e:	e744      	b.n	7b1a <z_impl_k_mutex_lock+0x66>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c90:	480d      	ldr	r0, [pc, #52]	; (7cc8 <z_impl_k_mutex_lock+0x214>)
    7c92:	f7ff fcdf 	bl	7654 <z_spin_unlock_valid>
    7c96:	b130      	cbz	r0, 7ca6 <z_impl_k_mutex_lock+0x1f2>
    7c98:	f385 8811 	msr	BASEPRI, r5
    7c9c:	f3bf 8f6f 	isb	sy
    7ca0:	f06f 000a 	mvn.w	r0, #10
    7ca4:	e739      	b.n	7b1a <z_impl_k_mutex_lock+0x66>
    7ca6:	4c0e      	ldr	r4, [pc, #56]	; (7ce0 <z_impl_k_mutex_lock+0x22c>)
    7ca8:	23b9      	movs	r3, #185	; 0xb9
    7caa:	4622      	mov	r2, r4
    7cac:	490f      	ldr	r1, [pc, #60]	; (7cec <z_impl_k_mutex_lock+0x238>)
    7cae:	480a      	ldr	r0, [pc, #40]	; (7cd8 <z_impl_k_mutex_lock+0x224>)
    7cb0:	f002 fe24 	bl	a8fc <assert_print>
    7cb4:	4904      	ldr	r1, [pc, #16]	; (7cc8 <z_impl_k_mutex_lock+0x214>)
    7cb6:	480e      	ldr	r0, [pc, #56]	; (7cf0 <z_impl_k_mutex_lock+0x23c>)
    7cb8:	f002 fe20 	bl	a8fc <assert_print>
    7cbc:	21b9      	movs	r1, #185	; 0xb9
    7cbe:	4620      	mov	r0, r4
    7cc0:	f002 fe15 	bl	a8ee <assert_post_action>
    7cc4:	e7e8      	b.n	7c98 <z_impl_k_mutex_lock+0x1e4>
    7cc6:	bf00      	nop
    7cc8:	20005244 	.word	0x20005244
    7ccc:	20005214 	.word	0x20005214
    7cd0:	0000dc00 	.word	0x0000dc00
    7cd4:	0000db48 	.word	0x0000db48
    7cd8:	0000c254 	.word	0x0000c254
    7cdc:	0000dc24 	.word	0x0000dc24
    7ce0:	0000c400 	.word	0x0000c400
    7ce4:	0000c460 	.word	0x0000c460
    7ce8:	0000c478 	.word	0x0000c478
    7cec:	0000c430 	.word	0x0000c430
    7cf0:	0000c448 	.word	0x0000c448

00007cf4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    7cf4:	b570      	push	{r4, r5, r6, lr}
    7cf6:	4604      	mov	r4, r0
    7cf8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7cfc:	bb03      	cbnz	r3, 7d40 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    7cfe:	68a3      	ldr	r3, [r4, #8]
    7d00:	2b00      	cmp	r3, #0
    7d02:	f000 80a6 	beq.w	7e52 <z_impl_k_mutex_unlock+0x15e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    7d06:	4a56      	ldr	r2, [pc, #344]	; (7e60 <z_impl_k_mutex_unlock+0x16c>)
    7d08:	6892      	ldr	r2, [r2, #8]
    7d0a:	4293      	cmp	r3, r2
    7d0c:	f040 80a4 	bne.w	7e58 <z_impl_k_mutex_unlock+0x164>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    7d10:	68e3      	ldr	r3, [r4, #12]
    7d12:	b323      	cbz	r3, 7d5e <z_impl_k_mutex_unlock+0x6a>
    7d14:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    7d18:	bb6b      	cbnz	r3, 7d76 <z_impl_k_mutex_unlock+0x82>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7d1a:	4b51      	ldr	r3, [pc, #324]	; (7e60 <z_impl_k_mutex_unlock+0x16c>)
    7d1c:	689b      	ldr	r3, [r3, #8]
    7d1e:	7bdb      	ldrb	r3, [r3, #15]
    7d20:	2b01      	cmp	r3, #1
    7d22:	d037      	beq.n	7d94 <z_impl_k_mutex_unlock+0xa0>

	--_current->base.sched_locked;
    7d24:	4b4e      	ldr	r3, [pc, #312]	; (7e60 <z_impl_k_mutex_unlock+0x16c>)
    7d26:	689a      	ldr	r2, [r3, #8]
    7d28:	7bd3      	ldrb	r3, [r2, #15]
    7d2a:	3b01      	subs	r3, #1
    7d2c:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7d2e:	68e3      	ldr	r3, [r4, #12]
    7d30:	2b01      	cmp	r3, #1
    7d32:	d93e      	bls.n	7db2 <z_impl_k_mutex_unlock+0xbe>
		mutex->lock_count--;
    7d34:	3b01      	subs	r3, #1
    7d36:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    7d38:	f001 f872 	bl	8e20 <k_sched_unlock>

	return 0;
    7d3c:	2000      	movs	r0, #0
}
    7d3e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    7d40:	4d48      	ldr	r5, [pc, #288]	; (7e64 <z_impl_k_mutex_unlock+0x170>)
    7d42:	23c7      	movs	r3, #199	; 0xc7
    7d44:	462a      	mov	r2, r5
    7d46:	4948      	ldr	r1, [pc, #288]	; (7e68 <z_impl_k_mutex_unlock+0x174>)
    7d48:	4848      	ldr	r0, [pc, #288]	; (7e6c <z_impl_k_mutex_unlock+0x178>)
    7d4a:	f002 fdd7 	bl	a8fc <assert_print>
    7d4e:	4848      	ldr	r0, [pc, #288]	; (7e70 <z_impl_k_mutex_unlock+0x17c>)
    7d50:	f002 fdd4 	bl	a8fc <assert_print>
    7d54:	21c7      	movs	r1, #199	; 0xc7
    7d56:	4628      	mov	r0, r5
    7d58:	f002 fdc9 	bl	a8ee <assert_post_action>
    7d5c:	e7cf      	b.n	7cfe <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    7d5e:	4d41      	ldr	r5, [pc, #260]	; (7e64 <z_impl_k_mutex_unlock+0x170>)
    7d60:	23df      	movs	r3, #223	; 0xdf
    7d62:	462a      	mov	r2, r5
    7d64:	4943      	ldr	r1, [pc, #268]	; (7e74 <z_impl_k_mutex_unlock+0x180>)
    7d66:	4841      	ldr	r0, [pc, #260]	; (7e6c <z_impl_k_mutex_unlock+0x178>)
    7d68:	f002 fdc8 	bl	a8fc <assert_print>
    7d6c:	21df      	movs	r1, #223	; 0xdf
    7d6e:	4628      	mov	r0, r5
    7d70:	f002 fdbd 	bl	a8ee <assert_post_action>
    7d74:	e7ce      	b.n	7d14 <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
    7d76:	4d40      	ldr	r5, [pc, #256]	; (7e78 <z_impl_k_mutex_unlock+0x184>)
    7d78:	23fd      	movs	r3, #253	; 0xfd
    7d7a:	462a      	mov	r2, r5
    7d7c:	493a      	ldr	r1, [pc, #232]	; (7e68 <z_impl_k_mutex_unlock+0x174>)
    7d7e:	483b      	ldr	r0, [pc, #236]	; (7e6c <z_impl_k_mutex_unlock+0x178>)
    7d80:	f002 fdbc 	bl	a8fc <assert_print>
    7d84:	483d      	ldr	r0, [pc, #244]	; (7e7c <z_impl_k_mutex_unlock+0x188>)
    7d86:	f002 fdb9 	bl	a8fc <assert_print>
    7d8a:	21fd      	movs	r1, #253	; 0xfd
    7d8c:	4628      	mov	r0, r5
    7d8e:	f002 fdae 	bl	a8ee <assert_post_action>
    7d92:	e7c2      	b.n	7d1a <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
    7d94:	4d38      	ldr	r5, [pc, #224]	; (7e78 <z_impl_k_mutex_unlock+0x184>)
    7d96:	23fe      	movs	r3, #254	; 0xfe
    7d98:	462a      	mov	r2, r5
    7d9a:	4939      	ldr	r1, [pc, #228]	; (7e80 <z_impl_k_mutex_unlock+0x18c>)
    7d9c:	4833      	ldr	r0, [pc, #204]	; (7e6c <z_impl_k_mutex_unlock+0x178>)
    7d9e:	f002 fdad 	bl	a8fc <assert_print>
    7da2:	4836      	ldr	r0, [pc, #216]	; (7e7c <z_impl_k_mutex_unlock+0x188>)
    7da4:	f002 fdaa 	bl	a8fc <assert_print>
    7da8:	21fe      	movs	r1, #254	; 0xfe
    7daa:	4628      	mov	r0, r5
    7dac:	f002 fd9f 	bl	a8ee <assert_post_action>
    7db0:	e7b8      	b.n	7d24 <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
    7db2:	f04f 0320 	mov.w	r3, #32
    7db6:	f3ef 8511 	mrs	r5, BASEPRI
    7dba:	f383 8812 	msr	BASEPRI_MAX, r3
    7dbe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7dc2:	4830      	ldr	r0, [pc, #192]	; (7e84 <z_impl_k_mutex_unlock+0x190>)
    7dc4:	f7ff fc36 	bl	7634 <z_spin_lock_valid>
    7dc8:	b1c0      	cbz	r0, 7dfc <z_impl_k_mutex_unlock+0x108>
	z_spin_lock_set_owner(l);
    7dca:	482e      	ldr	r0, [pc, #184]	; (7e84 <z_impl_k_mutex_unlock+0x190>)
    7dcc:	f7ff fc52 	bl	7674 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7dd0:	6921      	ldr	r1, [r4, #16]
    7dd2:	4620      	mov	r0, r4
    7dd4:	f003 ff34 	bl	bc40 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    7dd8:	4620      	mov	r0, r4
    7dda:	f001 f963 	bl	90a4 <z_unpend_first_thread>
	mutex->owner = new_owner;
    7dde:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    7de0:	b1e0      	cbz	r0, 7e1c <z_impl_k_mutex_unlock+0x128>
		mutex->owner_orig_prio = new_owner->base.prio;
    7de2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    7de6:	6123      	str	r3, [r4, #16]
    7de8:	2300      	movs	r3, #0
    7dea:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    7dee:	f000 fce1 	bl	87b4 <z_ready_thread>
		z_reschedule(&lock, key);
    7df2:	4629      	mov	r1, r5
    7df4:	4823      	ldr	r0, [pc, #140]	; (7e84 <z_impl_k_mutex_unlock+0x190>)
    7df6:	f000 fa39 	bl	826c <z_reschedule>
    7dfa:	e79d      	b.n	7d38 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7dfc:	4e22      	ldr	r6, [pc, #136]	; (7e88 <z_impl_k_mutex_unlock+0x194>)
    7dfe:	238e      	movs	r3, #142	; 0x8e
    7e00:	4632      	mov	r2, r6
    7e02:	4922      	ldr	r1, [pc, #136]	; (7e8c <z_impl_k_mutex_unlock+0x198>)
    7e04:	4819      	ldr	r0, [pc, #100]	; (7e6c <z_impl_k_mutex_unlock+0x178>)
    7e06:	f002 fd79 	bl	a8fc <assert_print>
    7e0a:	491e      	ldr	r1, [pc, #120]	; (7e84 <z_impl_k_mutex_unlock+0x190>)
    7e0c:	4820      	ldr	r0, [pc, #128]	; (7e90 <z_impl_k_mutex_unlock+0x19c>)
    7e0e:	f002 fd75 	bl	a8fc <assert_print>
    7e12:	218e      	movs	r1, #142	; 0x8e
    7e14:	4630      	mov	r0, r6
    7e16:	f002 fd6a 	bl	a8ee <assert_post_action>
    7e1a:	e7d6      	b.n	7dca <z_impl_k_mutex_unlock+0xd6>
		mutex->lock_count = 0U;
    7e1c:	2300      	movs	r3, #0
    7e1e:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7e20:	4818      	ldr	r0, [pc, #96]	; (7e84 <z_impl_k_mutex_unlock+0x190>)
    7e22:	f7ff fc17 	bl	7654 <z_spin_unlock_valid>
    7e26:	b120      	cbz	r0, 7e32 <z_impl_k_mutex_unlock+0x13e>
	__asm__ volatile(
    7e28:	f385 8811 	msr	BASEPRI, r5
    7e2c:	f3bf 8f6f 	isb	sy
    7e30:	e782      	b.n	7d38 <z_impl_k_mutex_unlock+0x44>
    7e32:	4c15      	ldr	r4, [pc, #84]	; (7e88 <z_impl_k_mutex_unlock+0x194>)
    7e34:	23b9      	movs	r3, #185	; 0xb9
    7e36:	4622      	mov	r2, r4
    7e38:	4916      	ldr	r1, [pc, #88]	; (7e94 <z_impl_k_mutex_unlock+0x1a0>)
    7e3a:	480c      	ldr	r0, [pc, #48]	; (7e6c <z_impl_k_mutex_unlock+0x178>)
    7e3c:	f002 fd5e 	bl	a8fc <assert_print>
    7e40:	4910      	ldr	r1, [pc, #64]	; (7e84 <z_impl_k_mutex_unlock+0x190>)
    7e42:	4815      	ldr	r0, [pc, #84]	; (7e98 <z_impl_k_mutex_unlock+0x1a4>)
    7e44:	f002 fd5a 	bl	a8fc <assert_print>
    7e48:	21b9      	movs	r1, #185	; 0xb9
    7e4a:	4620      	mov	r0, r4
    7e4c:	f002 fd4f 	bl	a8ee <assert_post_action>
    7e50:	e7ea      	b.n	7e28 <z_impl_k_mutex_unlock+0x134>
		return -EINVAL;
    7e52:	f06f 0015 	mvn.w	r0, #21
    7e56:	e772      	b.n	7d3e <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
    7e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7e5c:	e76f      	b.n	7d3e <z_impl_k_mutex_unlock+0x4a>
    7e5e:	bf00      	nop
    7e60:	20005214 	.word	0x20005214
    7e64:	0000dc00 	.word	0x0000dc00
    7e68:	0000db48 	.word	0x0000db48
    7e6c:	0000c254 	.word	0x0000c254
    7e70:	0000dc24 	.word	0x0000dc24
    7e74:	0000dc4c 	.word	0x0000dc4c
    7e78:	0000dc64 	.word	0x0000dc64
    7e7c:	0000dc90 	.word	0x0000dc90
    7e80:	0000dc94 	.word	0x0000dc94
    7e84:	20005244 	.word	0x20005244
    7e88:	0000c400 	.word	0x0000c400
    7e8c:	0000c460 	.word	0x0000c460
    7e90:	0000c478 	.word	0x0000c478
    7e94:	0000c430 	.word	0x0000c430
    7e98:	0000c448 	.word	0x0000c448

00007e9c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7e9c:	b570      	push	{r4, r5, r6, lr}
    7e9e:	4604      	mov	r4, r0
	__asm__ volatile(
    7ea0:	f04f 0320 	mov.w	r3, #32
    7ea4:	f3ef 8511 	mrs	r5, BASEPRI
    7ea8:	f383 8812 	msr	BASEPRI_MAX, r3
    7eac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7eb0:	4817      	ldr	r0, [pc, #92]	; (7f10 <z_impl_k_sem_give+0x74>)
    7eb2:	f7ff fbbf 	bl	7634 <z_spin_lock_valid>
    7eb6:	b180      	cbz	r0, 7eda <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
    7eb8:	4815      	ldr	r0, [pc, #84]	; (7f10 <z_impl_k_sem_give+0x74>)
    7eba:	f7ff fbdb 	bl	7674 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7ebe:	4620      	mov	r0, r4
    7ec0:	f001 f8f0 	bl	90a4 <z_unpend_first_thread>

	if (thread != NULL) {
    7ec4:	b1c8      	cbz	r0, 7efa <z_impl_k_sem_give+0x5e>
    7ec6:	2200      	movs	r2, #0
    7ec8:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7ecc:	f000 fc72 	bl	87b4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    7ed0:	4629      	mov	r1, r5
    7ed2:	480f      	ldr	r0, [pc, #60]	; (7f10 <z_impl_k_sem_give+0x74>)
    7ed4:	f000 f9ca 	bl	826c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7ed8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7eda:	4e0e      	ldr	r6, [pc, #56]	; (7f14 <z_impl_k_sem_give+0x78>)
    7edc:	238e      	movs	r3, #142	; 0x8e
    7ede:	4632      	mov	r2, r6
    7ee0:	490d      	ldr	r1, [pc, #52]	; (7f18 <z_impl_k_sem_give+0x7c>)
    7ee2:	480e      	ldr	r0, [pc, #56]	; (7f1c <z_impl_k_sem_give+0x80>)
    7ee4:	f002 fd0a 	bl	a8fc <assert_print>
    7ee8:	4909      	ldr	r1, [pc, #36]	; (7f10 <z_impl_k_sem_give+0x74>)
    7eea:	480d      	ldr	r0, [pc, #52]	; (7f20 <z_impl_k_sem_give+0x84>)
    7eec:	f002 fd06 	bl	a8fc <assert_print>
    7ef0:	218e      	movs	r1, #142	; 0x8e
    7ef2:	4630      	mov	r0, r6
    7ef4:	f002 fcfb 	bl	a8ee <assert_post_action>
    7ef8:	e7de      	b.n	7eb8 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7efa:	68a3      	ldr	r3, [r4, #8]
    7efc:	68e2      	ldr	r2, [r4, #12]
    7efe:	4293      	cmp	r3, r2
    7f00:	d003      	beq.n	7f0a <z_impl_k_sem_give+0x6e>
    7f02:	2201      	movs	r2, #1
    7f04:	4413      	add	r3, r2
    7f06:	60a3      	str	r3, [r4, #8]
}
    7f08:	e7e2      	b.n	7ed0 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7f0a:	2200      	movs	r2, #0
    7f0c:	e7fa      	b.n	7f04 <z_impl_k_sem_give+0x68>
    7f0e:	bf00      	nop
    7f10:	20005248 	.word	0x20005248
    7f14:	0000c400 	.word	0x0000c400
    7f18:	0000c460 	.word	0x0000c460
    7f1c:	0000c254 	.word	0x0000c254
    7f20:	0000c478 	.word	0x0000c478

00007f24 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f28:	b082      	sub	sp, #8
    7f2a:	4604      	mov	r4, r0
    7f2c:	4617      	mov	r7, r2
    7f2e:	461d      	mov	r5, r3
    7f30:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    7f34:	b111      	cbz	r1, 7f3c <z_impl_k_sem_take+0x18>
    7f36:	ea55 0302 	orrs.w	r3, r5, r2
    7f3a:	d11f      	bne.n	7f7c <z_impl_k_sem_take+0x58>
    7f3c:	f04f 0320 	mov.w	r3, #32
    7f40:	f3ef 8611 	mrs	r6, BASEPRI
    7f44:	f383 8812 	msr	BASEPRI_MAX, r3
    7f48:	f3bf 8f6f 	isb	sy
    7f4c:	4836      	ldr	r0, [pc, #216]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7f4e:	f7ff fb71 	bl	7634 <z_spin_lock_valid>
    7f52:	b310      	cbz	r0, 7f9a <z_impl_k_sem_take+0x76>
	z_spin_lock_set_owner(l);
    7f54:	4834      	ldr	r0, [pc, #208]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7f56:	f7ff fb8d 	bl	7674 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7f5a:	68a1      	ldr	r1, [r4, #8]
    7f5c:	2900      	cmp	r1, #0
    7f5e:	d03d      	beq.n	7fdc <z_impl_k_sem_take+0xb8>
		sem->count--;
    7f60:	3901      	subs	r1, #1
    7f62:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f64:	4830      	ldr	r0, [pc, #192]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7f66:	f7ff fb75 	bl	7654 <z_spin_unlock_valid>
    7f6a:	b338      	cbz	r0, 7fbc <z_impl_k_sem_take+0x98>
	__asm__ volatile(
    7f6c:	f386 8811 	msr	BASEPRI, r6
    7f70:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7f74:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7f76:	b002      	add	sp, #8
    7f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
    7f7c:	4e2b      	ldr	r6, [pc, #172]	; (802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    7f7e:	2379      	movs	r3, #121	; 0x79
    7f80:	4632      	mov	r2, r6
    7f82:	492b      	ldr	r1, [pc, #172]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    7f84:	482b      	ldr	r0, [pc, #172]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    7f86:	f002 fcb9 	bl	a8fc <assert_print>
    7f8a:	482b      	ldr	r0, [pc, #172]	; (8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    7f8c:	f002 fcb6 	bl	a8fc <assert_print>
    7f90:	2179      	movs	r1, #121	; 0x79
    7f92:	4630      	mov	r0, r6
    7f94:	f002 fcab 	bl	a8ee <assert_post_action>
    7f98:	e7d0      	b.n	7f3c <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f9a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>
    7f9e:	238e      	movs	r3, #142	; 0x8e
    7fa0:	4642      	mov	r2, r8
    7fa2:	4927      	ldr	r1, [pc, #156]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    7fa4:	4823      	ldr	r0, [pc, #140]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    7fa6:	f002 fca9 	bl	a8fc <assert_print>
    7faa:	491f      	ldr	r1, [pc, #124]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7fac:	4825      	ldr	r0, [pc, #148]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    7fae:	f002 fca5 	bl	a8fc <assert_print>
    7fb2:	218e      	movs	r1, #142	; 0x8e
    7fb4:	4640      	mov	r0, r8
    7fb6:	f002 fc9a 	bl	a8ee <assert_post_action>
    7fba:	e7cb      	b.n	7f54 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7fbc:	4c1f      	ldr	r4, [pc, #124]	; (803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    7fbe:	23b9      	movs	r3, #185	; 0xb9
    7fc0:	4622      	mov	r2, r4
    7fc2:	4921      	ldr	r1, [pc, #132]	; (8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>)
    7fc4:	481b      	ldr	r0, [pc, #108]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    7fc6:	f002 fc99 	bl	a8fc <assert_print>
    7fca:	4917      	ldr	r1, [pc, #92]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7fcc:	481f      	ldr	r0, [pc, #124]	; (804c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>)
    7fce:	f002 fc95 	bl	a8fc <assert_print>
    7fd2:	21b9      	movs	r1, #185	; 0xb9
    7fd4:	4620      	mov	r0, r4
    7fd6:	f002 fc8a 	bl	a8ee <assert_post_action>
    7fda:	e7c7      	b.n	7f6c <z_impl_k_sem_take+0x48>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7fdc:	ea55 0307 	orrs.w	r3, r5, r7
    7fe0:	d007      	beq.n	7ff2 <z_impl_k_sem_take+0xce>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7fe2:	9700      	str	r7, [sp, #0]
    7fe4:	9501      	str	r5, [sp, #4]
    7fe6:	4622      	mov	r2, r4
    7fe8:	4631      	mov	r1, r6
    7fea:	480f      	ldr	r0, [pc, #60]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7fec:	f000 fdbe 	bl	8b6c <z_pend_curr>
	return ret;
    7ff0:	e7c1      	b.n	7f76 <z_impl_k_sem_take+0x52>
    7ff2:	480d      	ldr	r0, [pc, #52]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7ff4:	f7ff fb2e 	bl	7654 <z_spin_unlock_valid>
    7ff8:	b130      	cbz	r0, 8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
    7ffa:	f386 8811 	msr	BASEPRI, r6
    7ffe:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    8002:	f06f 000f 	mvn.w	r0, #15
    8006:	e7b6      	b.n	7f76 <z_impl_k_sem_take+0x52>
    8008:	4c0c      	ldr	r4, [pc, #48]	; (803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    800a:	23b9      	movs	r3, #185	; 0xb9
    800c:	4622      	mov	r2, r4
    800e:	490e      	ldr	r1, [pc, #56]	; (8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>)
    8010:	4808      	ldr	r0, [pc, #32]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    8012:	f002 fc73 	bl	a8fc <assert_print>
    8016:	4904      	ldr	r1, [pc, #16]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    8018:	480c      	ldr	r0, [pc, #48]	; (804c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>)
    801a:	f002 fc6f 	bl	a8fc <assert_print>
    801e:	21b9      	movs	r1, #185	; 0xb9
    8020:	4620      	mov	r0, r4
    8022:	f002 fc64 	bl	a8ee <assert_post_action>
    8026:	e7e8      	b.n	7ffa <z_impl_k_sem_take+0xd6>
    8028:	20005248 	.word	0x20005248
    802c:	0000dcc8 	.word	0x0000dcc8
    8030:	0000dce8 	.word	0x0000dce8
    8034:	0000c254 	.word	0x0000c254
    8038:	0000dc90 	.word	0x0000dc90
    803c:	0000c400 	.word	0x0000c400
    8040:	0000c460 	.word	0x0000c460
    8044:	0000c478 	.word	0x0000c478
    8048:	0000c430 	.word	0x0000c430
    804c:	0000c448 	.word	0x0000c448

00008050 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
    8050:	b538      	push	{r3, r4, r5, lr}
    8052:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    8054:	6883      	ldr	r3, [r0, #8]
    8056:	b10b      	cbz	r3, 805c <pended_on_thread+0xc>

	return thread->base.pended_on;
}
    8058:	68a0      	ldr	r0, [r4, #8]
    805a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
    805c:	4d06      	ldr	r5, [pc, #24]	; (8078 <pended_on_thread+0x28>)
    805e:	f240 23b9 	movw	r3, #697	; 0x2b9
    8062:	462a      	mov	r2, r5
    8064:	4905      	ldr	r1, [pc, #20]	; (807c <pended_on_thread+0x2c>)
    8066:	4806      	ldr	r0, [pc, #24]	; (8080 <pended_on_thread+0x30>)
    8068:	f002 fc48 	bl	a8fc <assert_print>
    806c:	f240 21b9 	movw	r1, #697	; 0x2b9
    8070:	4628      	mov	r0, r5
    8072:	f002 fc3c 	bl	a8ee <assert_post_action>
    8076:	e7ef      	b.n	8058 <pended_on_thread+0x8>
    8078:	0000dd38 	.word	0x0000dd38
    807c:	0000dd5c 	.word	0x0000dd5c
    8080:	0000c254 	.word	0x0000c254

00008084 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8088:	bf08      	it	eq
    808a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    808e:	d100      	bne.n	8092 <add_thread_timeout+0xe>
    8090:	4770      	bx	lr
{
    8092:	b508      	push	{r3, lr}
    8094:	4902      	ldr	r1, [pc, #8]	; (80a0 <add_thread_timeout+0x1c>)
    8096:	3018      	adds	r0, #24
    8098:	f001 fb36 	bl	9708 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    809c:	bd08      	pop	{r3, pc}
    809e:	bf00      	nop
    80a0:	00008911 	.word	0x00008911

000080a4 <z_reset_time_slice>:
{
    80a4:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    80a6:	4b07      	ldr	r3, [pc, #28]	; (80c4 <z_reset_time_slice+0x20>)
    80a8:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    80aa:	b904      	cbnz	r4, 80ae <z_reset_time_slice+0xa>
}
    80ac:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    80ae:	f7fc ff59 	bl	4f64 <sys_clock_elapsed>
    80b2:	4404      	add	r4, r0
    80b4:	4b04      	ldr	r3, [pc, #16]	; (80c8 <z_reset_time_slice+0x24>)
    80b6:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    80b8:	2100      	movs	r1, #0
    80ba:	4b02      	ldr	r3, [pc, #8]	; (80c4 <z_reset_time_slice+0x20>)
    80bc:	6818      	ldr	r0, [r3, #0]
    80be:	f001 fcb3 	bl	9a28 <z_set_timeout_expiry>
}
    80c2:	e7f3      	b.n	80ac <z_reset_time_slice+0x8>
    80c4:	20005258 	.word	0x20005258
    80c8:	20005214 	.word	0x20005214

000080cc <k_sched_time_slice_set>:
{
    80cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80d0:	4604      	mov	r4, r0
    80d2:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
    80d4:	2700      	movs	r7, #0
	__asm__ volatile(
    80d6:	f04f 0320 	mov.w	r3, #32
    80da:	f3ef 8611 	mrs	r6, BASEPRI
    80de:	f383 8812 	msr	BASEPRI_MAX, r3
    80e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    80e6:	482a      	ldr	r0, [pc, #168]	; (8190 <k_sched_time_slice_set+0xc4>)
    80e8:	f7ff faa4 	bl	7634 <z_spin_lock_valid>
    80ec:	b118      	cbz	r0, 80f6 <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
    80ee:	4828      	ldr	r0, [pc, #160]	; (8190 <k_sched_time_slice_set+0xc4>)
    80f0:	f7ff fac0 	bl	7674 <z_spin_lock_set_owner>
	return k;
    80f4:	e023      	b.n	813e <k_sched_time_slice_set+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    80f6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8194 <k_sched_time_slice_set+0xc8>
    80fa:	238e      	movs	r3, #142	; 0x8e
    80fc:	4642      	mov	r2, r8
    80fe:	4926      	ldr	r1, [pc, #152]	; (8198 <k_sched_time_slice_set+0xcc>)
    8100:	4826      	ldr	r0, [pc, #152]	; (819c <k_sched_time_slice_set+0xd0>)
    8102:	f002 fbfb 	bl	a8fc <assert_print>
    8106:	4922      	ldr	r1, [pc, #136]	; (8190 <k_sched_time_slice_set+0xc4>)
    8108:	4825      	ldr	r0, [pc, #148]	; (81a0 <k_sched_time_slice_set+0xd4>)
    810a:	f002 fbf7 	bl	a8fc <assert_print>
    810e:	218e      	movs	r1, #142	; 0x8e
    8110:	4640      	mov	r0, r8
    8112:	f002 fbec 	bl	a8ee <assert_post_action>
    8116:	e7ea      	b.n	80ee <k_sched_time_slice_set+0x22>
			slice_ticks = MAX(2, slice_ticks);
    8118:	2802      	cmp	r0, #2
    811a:	bfb8      	it	lt
    811c:	2002      	movlt	r0, #2
    811e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    8120:	4b20      	ldr	r3, [pc, #128]	; (81a4 <k_sched_time_slice_set+0xd8>)
    8122:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    8124:	4b20      	ldr	r3, [pc, #128]	; (81a8 <k_sched_time_slice_set+0xdc>)
    8126:	6898      	ldr	r0, [r3, #8]
    8128:	f7ff ffbc 	bl	80a4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    812c:	4818      	ldr	r0, [pc, #96]	; (8190 <k_sched_time_slice_set+0xc4>)
    812e:	f7ff fa91 	bl	7654 <z_spin_unlock_valid>
    8132:	b1d0      	cbz	r0, 816a <k_sched_time_slice_set+0x9e>
	__asm__ volatile(
    8134:	f386 8811 	msr	BASEPRI, r6
    8138:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    813c:	2701      	movs	r7, #1
    813e:	bb27      	cbnz	r7, 818a <k_sched_time_slice_set+0xbe>
		_current_cpu->slice_ticks = 0;
    8140:	4b19      	ldr	r3, [pc, #100]	; (81a8 <k_sched_time_slice_set+0xdc>)
    8142:	2200      	movs	r2, #0
    8144:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    8146:	0c61      	lsrs	r1, r4, #17
    8148:	03e3      	lsls	r3, r4, #15
    814a:	f240 30e7 	movw	r0, #999	; 0x3e7
    814e:	1818      	adds	r0, r3, r0
    8150:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8154:	f04f 0300 	mov.w	r3, #0
    8158:	f141 0100 	adc.w	r1, r1, #0
    815c:	f7f7 ffd0 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    8160:	4b12      	ldr	r3, [pc, #72]	; (81ac <k_sched_time_slice_set+0xe0>)
    8162:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    8164:	2c00      	cmp	r4, #0
    8166:	dcd7      	bgt.n	8118 <k_sched_time_slice_set+0x4c>
    8168:	e7da      	b.n	8120 <k_sched_time_slice_set+0x54>
    816a:	4f0a      	ldr	r7, [pc, #40]	; (8194 <k_sched_time_slice_set+0xc8>)
    816c:	23b9      	movs	r3, #185	; 0xb9
    816e:	463a      	mov	r2, r7
    8170:	490f      	ldr	r1, [pc, #60]	; (81b0 <k_sched_time_slice_set+0xe4>)
    8172:	480a      	ldr	r0, [pc, #40]	; (819c <k_sched_time_slice_set+0xd0>)
    8174:	f002 fbc2 	bl	a8fc <assert_print>
    8178:	4905      	ldr	r1, [pc, #20]	; (8190 <k_sched_time_slice_set+0xc4>)
    817a:	480e      	ldr	r0, [pc, #56]	; (81b4 <k_sched_time_slice_set+0xe8>)
    817c:	f002 fbbe 	bl	a8fc <assert_print>
    8180:	21b9      	movs	r1, #185	; 0xb9
    8182:	4638      	mov	r0, r7
    8184:	f002 fbb3 	bl	a8ee <assert_post_action>
    8188:	e7d4      	b.n	8134 <k_sched_time_slice_set+0x68>
}
    818a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    818e:	bf00      	nop
    8190:	20005250 	.word	0x20005250
    8194:	0000c400 	.word	0x0000c400
    8198:	0000c460 	.word	0x0000c460
    819c:	0000c254 	.word	0x0000c254
    81a0:	0000c478 	.word	0x0000c478
    81a4:	20005254 	.word	0x20005254
    81a8:	20005214 	.word	0x20005214
    81ac:	20005258 	.word	0x20005258
    81b0:	0000c430 	.word	0x0000c430
    81b4:	0000c448 	.word	0x0000c448

000081b8 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    81b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81ba:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    81bc:	2500      	movs	r5, #0
	__asm__ volatile(
    81be:	f04f 0320 	mov.w	r3, #32
    81c2:	f3ef 8611 	mrs	r6, BASEPRI
    81c6:	f383 8812 	msr	BASEPRI_MAX, r3
    81ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    81ce:	4820      	ldr	r0, [pc, #128]	; (8250 <z_unpend_thread_no_timeout+0x98>)
    81d0:	f7ff fa30 	bl	7634 <z_spin_lock_valid>
    81d4:	b118      	cbz	r0, 81de <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
    81d6:	481e      	ldr	r0, [pc, #120]	; (8250 <z_unpend_thread_no_timeout+0x98>)
    81d8:	f7ff fa4c 	bl	7674 <z_spin_lock_set_owner>
	return k;
    81dc:	e014      	b.n	8208 <z_unpend_thread_no_timeout+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    81de:	4f1d      	ldr	r7, [pc, #116]	; (8254 <z_unpend_thread_no_timeout+0x9c>)
    81e0:	238e      	movs	r3, #142	; 0x8e
    81e2:	463a      	mov	r2, r7
    81e4:	491c      	ldr	r1, [pc, #112]	; (8258 <z_unpend_thread_no_timeout+0xa0>)
    81e6:	481d      	ldr	r0, [pc, #116]	; (825c <z_unpend_thread_no_timeout+0xa4>)
    81e8:	f002 fb88 	bl	a8fc <assert_print>
    81ec:	4918      	ldr	r1, [pc, #96]	; (8250 <z_unpend_thread_no_timeout+0x98>)
    81ee:	481c      	ldr	r0, [pc, #112]	; (8260 <z_unpend_thread_no_timeout+0xa8>)
    81f0:	f002 fb84 	bl	a8fc <assert_print>
    81f4:	218e      	movs	r1, #142	; 0x8e
    81f6:	4638      	mov	r0, r7
    81f8:	f002 fb79 	bl	a8ee <assert_post_action>
    81fc:	e7eb      	b.n	81d6 <z_unpend_thread_no_timeout+0x1e>
	__asm__ volatile(
    81fe:	f386 8811 	msr	BASEPRI, r6
    8202:	f3bf 8f6f 	isb	sy
    8206:	2501      	movs	r5, #1
    8208:	bb05      	cbnz	r5, 824c <z_unpend_thread_no_timeout+0x94>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    820a:	4620      	mov	r0, r4
    820c:	f7ff ff20 	bl	8050 <pended_on_thread>
    8210:	4621      	mov	r1, r4
    8212:	f000 f8fb 	bl	840c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8216:	7b63      	ldrb	r3, [r4, #13]
    8218:	f023 0302 	bic.w	r3, r3, #2
    821c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    821e:	2300      	movs	r3, #0
    8220:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8222:	480b      	ldr	r0, [pc, #44]	; (8250 <z_unpend_thread_no_timeout+0x98>)
    8224:	f7ff fa16 	bl	7654 <z_spin_unlock_valid>
    8228:	2800      	cmp	r0, #0
    822a:	d1e8      	bne.n	81fe <z_unpend_thread_no_timeout+0x46>
    822c:	4d09      	ldr	r5, [pc, #36]	; (8254 <z_unpend_thread_no_timeout+0x9c>)
    822e:	23b9      	movs	r3, #185	; 0xb9
    8230:	462a      	mov	r2, r5
    8232:	490c      	ldr	r1, [pc, #48]	; (8264 <z_unpend_thread_no_timeout+0xac>)
    8234:	4809      	ldr	r0, [pc, #36]	; (825c <z_unpend_thread_no_timeout+0xa4>)
    8236:	f002 fb61 	bl	a8fc <assert_print>
    823a:	4905      	ldr	r1, [pc, #20]	; (8250 <z_unpend_thread_no_timeout+0x98>)
    823c:	480a      	ldr	r0, [pc, #40]	; (8268 <z_unpend_thread_no_timeout+0xb0>)
    823e:	f002 fb5d 	bl	a8fc <assert_print>
    8242:	21b9      	movs	r1, #185	; 0xb9
    8244:	4628      	mov	r0, r5
    8246:	f002 fb52 	bl	a8ee <assert_post_action>
    824a:	e7d8      	b.n	81fe <z_unpend_thread_no_timeout+0x46>
		unpend_thread_no_timeout(thread);
	}
}
    824c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    824e:	bf00      	nop
    8250:	20005250 	.word	0x20005250
    8254:	0000c400 	.word	0x0000c400
    8258:	0000c460 	.word	0x0000c460
    825c:	0000c254 	.word	0x0000c254
    8260:	0000c478 	.word	0x0000c478
    8264:	0000c430 	.word	0x0000c430
    8268:	0000c448 	.word	0x0000c448

0000826c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    826c:	b570      	push	{r4, r5, r6, lr}
    826e:	4604      	mov	r4, r0
	if (resched(key.key) && need_swap()) {
    8270:	460d      	mov	r5, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8272:	b921      	cbnz	r1, 827e <z_reschedule+0x12>
    8274:	f3ef 8305 	mrs	r3, IPSR
    8278:	b913      	cbnz	r3, 8280 <z_reschedule+0x14>
    827a:	2101      	movs	r1, #1
    827c:	e000      	b.n	8280 <z_reschedule+0x14>
    827e:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    8280:	f011 0f01 	tst.w	r1, #1
    8284:	d01c      	beq.n	82c0 <z_reschedule+0x54>
	new_thread = _kernel.ready_q.cache;
    8286:	4b1b      	ldr	r3, [pc, #108]	; (82f4 <z_reschedule+0x88>)
    8288:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    828a:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    828c:	429a      	cmp	r2, r3
    828e:	d017      	beq.n	82c0 <z_reschedule+0x54>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8290:	4620      	mov	r0, r4
    8292:	f7ff f9df 	bl	7654 <z_spin_unlock_valid>
    8296:	b118      	cbz	r0, 82a0 <z_reschedule+0x34>
	ret = arch_swap(key);
    8298:	4628      	mov	r0, r5
    829a:	f7fa fddf 	bl	2e5c <arch_swap>
		z_swap(lock, key);
    829e:	e017      	b.n	82d0 <z_reschedule+0x64>
    82a0:	4e15      	ldr	r6, [pc, #84]	; (82f8 <z_reschedule+0x8c>)
    82a2:	23d0      	movs	r3, #208	; 0xd0
    82a4:	4632      	mov	r2, r6
    82a6:	4915      	ldr	r1, [pc, #84]	; (82fc <z_reschedule+0x90>)
    82a8:	4815      	ldr	r0, [pc, #84]	; (8300 <z_reschedule+0x94>)
    82aa:	f002 fb27 	bl	a8fc <assert_print>
    82ae:	4621      	mov	r1, r4
    82b0:	4814      	ldr	r0, [pc, #80]	; (8304 <z_reschedule+0x98>)
    82b2:	f002 fb23 	bl	a8fc <assert_print>
    82b6:	21d0      	movs	r1, #208	; 0xd0
    82b8:	4630      	mov	r0, r6
    82ba:	f002 fb18 	bl	a8ee <assert_post_action>
    82be:	e7eb      	b.n	8298 <z_reschedule+0x2c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    82c0:	4620      	mov	r0, r4
    82c2:	f7ff f9c7 	bl	7654 <z_spin_unlock_valid>
    82c6:	b120      	cbz	r0, 82d2 <z_reschedule+0x66>
    82c8:	f385 8811 	msr	BASEPRI, r5
    82cc:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    82d0:	bd70      	pop	{r4, r5, r6, pc}
    82d2:	4e09      	ldr	r6, [pc, #36]	; (82f8 <z_reschedule+0x8c>)
    82d4:	23b9      	movs	r3, #185	; 0xb9
    82d6:	4632      	mov	r2, r6
    82d8:	4908      	ldr	r1, [pc, #32]	; (82fc <z_reschedule+0x90>)
    82da:	4809      	ldr	r0, [pc, #36]	; (8300 <z_reschedule+0x94>)
    82dc:	f002 fb0e 	bl	a8fc <assert_print>
    82e0:	4621      	mov	r1, r4
    82e2:	4808      	ldr	r0, [pc, #32]	; (8304 <z_reschedule+0x98>)
    82e4:	f002 fb0a 	bl	a8fc <assert_print>
    82e8:	21b9      	movs	r1, #185	; 0xb9
    82ea:	4630      	mov	r0, r6
    82ec:	f002 faff 	bl	a8ee <assert_post_action>
    82f0:	e7ea      	b.n	82c8 <z_reschedule+0x5c>
    82f2:	bf00      	nop
    82f4:	20005214 	.word	0x20005214
    82f8:	0000c400 	.word	0x0000c400
    82fc:	0000c430 	.word	0x0000c430
    8300:	0000c254 	.word	0x0000c254
    8304:	0000c448 	.word	0x0000c448

00008308 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    8308:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    830a:	2400      	movs	r4, #0
	__asm__ volatile(
    830c:	f04f 0320 	mov.w	r3, #32
    8310:	f3ef 8511 	mrs	r5, BASEPRI
    8314:	f383 8812 	msr	BASEPRI_MAX, r3
    8318:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    831c:	482f      	ldr	r0, [pc, #188]	; (83dc <k_sched_lock+0xd4>)
    831e:	f7ff f989 	bl	7634 <z_spin_lock_valid>
    8322:	b118      	cbz	r0, 832c <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
    8324:	482d      	ldr	r0, [pc, #180]	; (83dc <k_sched_lock+0xd4>)
    8326:	f7ff f9a5 	bl	7674 <z_spin_lock_set_owner>
	return k;
    832a:	e022      	b.n	8372 <k_sched_lock+0x6a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    832c:	4e2c      	ldr	r6, [pc, #176]	; (83e0 <k_sched_lock+0xd8>)
    832e:	238e      	movs	r3, #142	; 0x8e
    8330:	4632      	mov	r2, r6
    8332:	492c      	ldr	r1, [pc, #176]	; (83e4 <k_sched_lock+0xdc>)
    8334:	482c      	ldr	r0, [pc, #176]	; (83e8 <k_sched_lock+0xe0>)
    8336:	f002 fae1 	bl	a8fc <assert_print>
    833a:	4928      	ldr	r1, [pc, #160]	; (83dc <k_sched_lock+0xd4>)
    833c:	482b      	ldr	r0, [pc, #172]	; (83ec <k_sched_lock+0xe4>)
    833e:	f002 fadd 	bl	a8fc <assert_print>
    8342:	218e      	movs	r1, #142	; 0x8e
    8344:	4630      	mov	r0, r6
    8346:	f002 fad2 	bl	a8ee <assert_post_action>
    834a:	e7eb      	b.n	8324 <k_sched_lock+0x1c>
	__ASSERT(_current->base.sched_locked != 1U, "");
    834c:	4b28      	ldr	r3, [pc, #160]	; (83f0 <k_sched_lock+0xe8>)
    834e:	689b      	ldr	r3, [r3, #8]
    8350:	7bdb      	ldrb	r3, [r3, #15]
    8352:	2b01      	cmp	r3, #1
    8354:	d022      	beq.n	839c <k_sched_lock+0x94>
	--_current->base.sched_locked;
    8356:	4b26      	ldr	r3, [pc, #152]	; (83f0 <k_sched_lock+0xe8>)
    8358:	689a      	ldr	r2, [r3, #8]
    835a:	7bd3      	ldrb	r3, [r2, #15]
    835c:	3b01      	subs	r3, #1
    835e:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8360:	481e      	ldr	r0, [pc, #120]	; (83dc <k_sched_lock+0xd4>)
    8362:	f7ff f977 	bl	7654 <z_spin_unlock_valid>
    8366:	b340      	cbz	r0, 83ba <k_sched_lock+0xb2>
	__asm__ volatile(
    8368:	f385 8811 	msr	BASEPRI, r5
    836c:	f3bf 8f6f 	isb	sy
    8370:	2401      	movs	r4, #1
    8372:	2c00      	cmp	r4, #0
    8374:	d131      	bne.n	83da <k_sched_lock+0xd2>
    8376:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    837a:	2b00      	cmp	r3, #0
    837c:	d0e6      	beq.n	834c <k_sched_lock+0x44>
    837e:	4c1d      	ldr	r4, [pc, #116]	; (83f4 <k_sched_lock+0xec>)
    8380:	23fd      	movs	r3, #253	; 0xfd
    8382:	4622      	mov	r2, r4
    8384:	491c      	ldr	r1, [pc, #112]	; (83f8 <k_sched_lock+0xf0>)
    8386:	4818      	ldr	r0, [pc, #96]	; (83e8 <k_sched_lock+0xe0>)
    8388:	f002 fab8 	bl	a8fc <assert_print>
    838c:	481b      	ldr	r0, [pc, #108]	; (83fc <k_sched_lock+0xf4>)
    838e:	f002 fab5 	bl	a8fc <assert_print>
    8392:	21fd      	movs	r1, #253	; 0xfd
    8394:	4620      	mov	r0, r4
    8396:	f002 faaa 	bl	a8ee <assert_post_action>
    839a:	e7d7      	b.n	834c <k_sched_lock+0x44>
	__ASSERT(_current->base.sched_locked != 1U, "");
    839c:	4c15      	ldr	r4, [pc, #84]	; (83f4 <k_sched_lock+0xec>)
    839e:	23fe      	movs	r3, #254	; 0xfe
    83a0:	4622      	mov	r2, r4
    83a2:	4917      	ldr	r1, [pc, #92]	; (8400 <k_sched_lock+0xf8>)
    83a4:	4810      	ldr	r0, [pc, #64]	; (83e8 <k_sched_lock+0xe0>)
    83a6:	f002 faa9 	bl	a8fc <assert_print>
    83aa:	4814      	ldr	r0, [pc, #80]	; (83fc <k_sched_lock+0xf4>)
    83ac:	f002 faa6 	bl	a8fc <assert_print>
    83b0:	21fe      	movs	r1, #254	; 0xfe
    83b2:	4620      	mov	r0, r4
    83b4:	f002 fa9b 	bl	a8ee <assert_post_action>
    83b8:	e7cd      	b.n	8356 <k_sched_lock+0x4e>
    83ba:	4c09      	ldr	r4, [pc, #36]	; (83e0 <k_sched_lock+0xd8>)
    83bc:	23b9      	movs	r3, #185	; 0xb9
    83be:	4622      	mov	r2, r4
    83c0:	4910      	ldr	r1, [pc, #64]	; (8404 <k_sched_lock+0xfc>)
    83c2:	4809      	ldr	r0, [pc, #36]	; (83e8 <k_sched_lock+0xe0>)
    83c4:	f002 fa9a 	bl	a8fc <assert_print>
    83c8:	4904      	ldr	r1, [pc, #16]	; (83dc <k_sched_lock+0xd4>)
    83ca:	480f      	ldr	r0, [pc, #60]	; (8408 <k_sched_lock+0x100>)
    83cc:	f002 fa96 	bl	a8fc <assert_print>
    83d0:	21b9      	movs	r1, #185	; 0xb9
    83d2:	4620      	mov	r0, r4
    83d4:	f002 fa8b 	bl	a8ee <assert_post_action>
    83d8:	e7c6      	b.n	8368 <k_sched_lock+0x60>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    83da:	bd70      	pop	{r4, r5, r6, pc}
    83dc:	20005250 	.word	0x20005250
    83e0:	0000c400 	.word	0x0000c400
    83e4:	0000c460 	.word	0x0000c460
    83e8:	0000c254 	.word	0x0000c254
    83ec:	0000c478 	.word	0x0000c478
    83f0:	20005214 	.word	0x20005214
    83f4:	0000dc64 	.word	0x0000dc64
    83f8:	0000db48 	.word	0x0000db48
    83fc:	0000dc90 	.word	0x0000dc90
    8400:	0000dc94 	.word	0x0000dc94
    8404:	0000c430 	.word	0x0000c430
    8408:	0000c448 	.word	0x0000c448

0000840c <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    840c:	b538      	push	{r3, r4, r5, lr}
    840e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8410:	4b0c      	ldr	r3, [pc, #48]	; (8444 <z_priq_dumb_remove+0x38>)
    8412:	4299      	cmp	r1, r3
    8414:	d007      	beq.n	8426 <z_priq_dumb_remove+0x1a>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    8416:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    8418:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
    841a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    841c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    841e:	2300      	movs	r3, #0
    8420:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    8422:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    8424:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8426:	4d08      	ldr	r5, [pc, #32]	; (8448 <z_priq_dumb_remove+0x3c>)
    8428:	f240 433d 	movw	r3, #1085	; 0x43d
    842c:	462a      	mov	r2, r5
    842e:	4907      	ldr	r1, [pc, #28]	; (844c <z_priq_dumb_remove+0x40>)
    8430:	4807      	ldr	r0, [pc, #28]	; (8450 <z_priq_dumb_remove+0x44>)
    8432:	f002 fa63 	bl	a8fc <assert_print>
    8436:	f240 413d 	movw	r1, #1085	; 0x43d
    843a:	4628      	mov	r0, r5
    843c:	f002 fa57 	bl	a8ee <assert_post_action>
    8440:	e7e9      	b.n	8416 <z_priq_dumb_remove+0xa>
    8442:	bf00      	nop
    8444:	20004570 	.word	0x20004570
    8448:	0000dd38 	.word	0x0000dd38
    844c:	0000dd74 	.word	0x0000dd74
    8450:	0000c254 	.word	0x0000c254

00008454 <update_cache>:
{
    8454:	b538      	push	{r3, r4, r5, lr}
    8456:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    8458:	4819      	ldr	r0, [pc, #100]	; (84c0 <update_cache+0x6c>)
    845a:	f003 fc24 	bl	bca6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    845e:	4605      	mov	r5, r0
    8460:	b188      	cbz	r0, 8486 <update_cache+0x32>
	if (preempt_ok != 0) {
    8462:	bb14      	cbnz	r4, 84aa <update_cache+0x56>
	__ASSERT(_current != NULL, "");
    8464:	4b17      	ldr	r3, [pc, #92]	; (84c4 <update_cache+0x70>)
    8466:	689b      	ldr	r3, [r3, #8]
    8468:	b183      	cbz	r3, 848c <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    846a:	4b16      	ldr	r3, [pc, #88]	; (84c4 <update_cache+0x70>)
    846c:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    846e:	7b5a      	ldrb	r2, [r3, #13]
    8470:	f012 0f1f 	tst.w	r2, #31
    8474:	d119      	bne.n	84aa <update_cache+0x56>
	return node->next != NULL;
    8476:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    8478:	b9ba      	cbnz	r2, 84aa <update_cache+0x56>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    847a:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    847c:	2a7f      	cmp	r2, #127	; 0x7f
    847e:	d914      	bls.n	84aa <update_cache+0x56>
		_kernel.ready_q.cache = _current;
    8480:	4a10      	ldr	r2, [pc, #64]	; (84c4 <update_cache+0x70>)
    8482:	61d3      	str	r3, [r2, #28]
    8484:	e01a      	b.n	84bc <update_cache+0x68>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    8486:	4b0f      	ldr	r3, [pc, #60]	; (84c4 <update_cache+0x70>)
    8488:	68dd      	ldr	r5, [r3, #12]
    848a:	e7ea      	b.n	8462 <update_cache+0xe>
	__ASSERT(_current != NULL, "");
    848c:	4c0e      	ldr	r4, [pc, #56]	; (84c8 <update_cache+0x74>)
    848e:	2389      	movs	r3, #137	; 0x89
    8490:	4622      	mov	r2, r4
    8492:	490e      	ldr	r1, [pc, #56]	; (84cc <update_cache+0x78>)
    8494:	480e      	ldr	r0, [pc, #56]	; (84d0 <update_cache+0x7c>)
    8496:	f002 fa31 	bl	a8fc <assert_print>
    849a:	480e      	ldr	r0, [pc, #56]	; (84d4 <update_cache+0x80>)
    849c:	f002 fa2e 	bl	a8fc <assert_print>
    84a0:	2189      	movs	r1, #137	; 0x89
    84a2:	4620      	mov	r0, r4
    84a4:	f002 fa23 	bl	a8ee <assert_post_action>
    84a8:	e7df      	b.n	846a <update_cache+0x16>
		if (thread != _current) {
    84aa:	4b06      	ldr	r3, [pc, #24]	; (84c4 <update_cache+0x70>)
    84ac:	689b      	ldr	r3, [r3, #8]
    84ae:	42ab      	cmp	r3, r5
    84b0:	d002      	beq.n	84b8 <update_cache+0x64>
			z_reset_time_slice(thread);
    84b2:	4628      	mov	r0, r5
    84b4:	f7ff fdf6 	bl	80a4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    84b8:	4b02      	ldr	r3, [pc, #8]	; (84c4 <update_cache+0x70>)
    84ba:	61dd      	str	r5, [r3, #28]
}
    84bc:	bd38      	pop	{r3, r4, r5, pc}
    84be:	bf00      	nop
    84c0:	20005234 	.word	0x20005234
    84c4:	20005214 	.word	0x20005214
    84c8:	0000dd38 	.word	0x0000dd38
    84cc:	0000dd98 	.word	0x0000dd98
    84d0:	0000c254 	.word	0x0000c254
    84d4:	0000dc90 	.word	0x0000dc90

000084d8 <move_thread_to_end_of_prio_q>:
{
    84d8:	b538      	push	{r3, r4, r5, lr}
    84da:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    84dc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    84de:	f990 300d 	ldrsb.w	r3, [r0, #13]
    84e2:	2b00      	cmp	r3, #0
    84e4:	db2b      	blt.n	853e <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
    84e6:	7b6b      	ldrb	r3, [r5, #13]
    84e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    84ec:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    84ee:	4b22      	ldr	r3, [pc, #136]	; (8578 <move_thread_to_end_of_prio_q+0xa0>)
    84f0:	429d      	cmp	r5, r3
    84f2:	d02c      	beq.n	854e <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
    84f4:	4b21      	ldr	r3, [pc, #132]	; (857c <move_thread_to_end_of_prio_q+0xa4>)
    84f6:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    84fa:	429c      	cmp	r4, r3
    84fc:	d039      	beq.n	8572 <move_thread_to_end_of_prio_q+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    84fe:	b16c      	cbz	r4, 851c <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8500:	4621      	mov	r1, r4
    8502:	4628      	mov	r0, r5
    8504:	f003 fbb0 	bl	bc68 <z_sched_prio_cmp>
    8508:	2800      	cmp	r0, #0
    850a:	dc2c      	bgt.n	8566 <move_thread_to_end_of_prio_q+0x8e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    850c:	b134      	cbz	r4, 851c <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
    850e:	4b1b      	ldr	r3, [pc, #108]	; (857c <move_thread_to_end_of_prio_q+0xa4>)
    8510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8512:	429c      	cmp	r4, r3
    8514:	d002      	beq.n	851c <move_thread_to_end_of_prio_q+0x44>
    8516:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8518:	2c00      	cmp	r4, #0
    851a:	d1f0      	bne.n	84fe <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
    851c:	4b17      	ldr	r3, [pc, #92]	; (857c <move_thread_to_end_of_prio_q+0xa4>)
    851e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8520:	f103 0120 	add.w	r1, r3, #32
    8524:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    8526:	606a      	str	r2, [r5, #4]
	tail->next = node;
    8528:	6015      	str	r5, [r2, #0]
	list->tail = node;
    852a:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    852c:	4b13      	ldr	r3, [pc, #76]	; (857c <move_thread_to_end_of_prio_q+0xa4>)
    852e:	6898      	ldr	r0, [r3, #8]
    8530:	42a8      	cmp	r0, r5
    8532:	bf14      	ite	ne
    8534:	2000      	movne	r0, #0
    8536:	2001      	moveq	r0, #1
    8538:	f7ff ff8c 	bl	8454 <update_cache>
}
    853c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    853e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8542:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8544:	4601      	mov	r1, r0
    8546:	480e      	ldr	r0, [pc, #56]	; (8580 <move_thread_to_end_of_prio_q+0xa8>)
    8548:	f7ff ff60 	bl	840c <z_priq_dumb_remove>
}
    854c:	e7cb      	b.n	84e6 <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    854e:	4c0d      	ldr	r4, [pc, #52]	; (8584 <move_thread_to_end_of_prio_q+0xac>)
    8550:	23ba      	movs	r3, #186	; 0xba
    8552:	4622      	mov	r2, r4
    8554:	490c      	ldr	r1, [pc, #48]	; (8588 <move_thread_to_end_of_prio_q+0xb0>)
    8556:	480d      	ldr	r0, [pc, #52]	; (858c <move_thread_to_end_of_prio_q+0xb4>)
    8558:	f002 f9d0 	bl	a8fc <assert_print>
    855c:	21ba      	movs	r1, #186	; 0xba
    855e:	4620      	mov	r0, r4
    8560:	f002 f9c5 	bl	a8ee <assert_post_action>
    8564:	e7c6      	b.n	84f4 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
    8566:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    8568:	606b      	str	r3, [r5, #4]
	node->next = successor;
    856a:	602c      	str	r4, [r5, #0]
	prev->next = node;
    856c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    856e:	6065      	str	r5, [r4, #4]
}
    8570:	e7dc      	b.n	852c <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8572:	2400      	movs	r4, #0
    8574:	e7c3      	b.n	84fe <move_thread_to_end_of_prio_q+0x26>
    8576:	bf00      	nop
    8578:	20004570 	.word	0x20004570
    857c:	20005214 	.word	0x20005214
    8580:	20005234 	.word	0x20005234
    8584:	0000dd38 	.word	0x0000dd38
    8588:	0000dd74 	.word	0x0000dd74
    858c:	0000c254 	.word	0x0000c254

00008590 <slice_expired_locked>:
{
    8590:	b538      	push	{r3, r4, r5, lr}
    8592:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    8594:	4b07      	ldr	r3, [pc, #28]	; (85b4 <slice_expired_locked+0x24>)
    8596:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    8598:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    859a:	f013 0f1f 	tst.w	r3, #31
    859e:	d004      	beq.n	85aa <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    85a0:	4628      	mov	r0, r5
    85a2:	f7ff fd7f 	bl	80a4 <z_reset_time_slice>
}
    85a6:	4620      	mov	r0, r4
    85a8:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    85aa:	4628      	mov	r0, r5
    85ac:	f7ff ff94 	bl	84d8 <move_thread_to_end_of_prio_q>
    85b0:	e7f6      	b.n	85a0 <slice_expired_locked+0x10>
    85b2:	bf00      	nop
    85b4:	20005214 	.word	0x20005214

000085b8 <z_time_slice>:
{
    85b8:	b570      	push	{r4, r5, r6, lr}
    85ba:	4604      	mov	r4, r0
	__asm__ volatile(
    85bc:	f04f 0320 	mov.w	r3, #32
    85c0:	f3ef 8511 	mrs	r5, BASEPRI
    85c4:	f383 8812 	msr	BASEPRI_MAX, r3
    85c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    85cc:	4842      	ldr	r0, [pc, #264]	; (86d8 <z_time_slice+0x120>)
    85ce:	f7ff f831 	bl	7634 <z_spin_lock_valid>
    85d2:	b310      	cbz	r0, 861a <z_time_slice+0x62>
	z_spin_lock_set_owner(l);
    85d4:	4840      	ldr	r0, [pc, #256]	; (86d8 <z_time_slice+0x120>)
    85d6:	f7ff f84d 	bl	7674 <z_spin_lock_set_owner>
	return k;
    85da:	462b      	mov	r3, r5
	if (pending_current == _current) {
    85dc:	4a3f      	ldr	r2, [pc, #252]	; (86dc <z_time_slice+0x124>)
    85de:	6892      	ldr	r2, [r2, #8]
    85e0:	493f      	ldr	r1, [pc, #252]	; (86e0 <z_time_slice+0x128>)
    85e2:	6809      	ldr	r1, [r1, #0]
    85e4:	428a      	cmp	r2, r1
    85e6:	d028      	beq.n	863a <z_time_slice+0x82>
	pending_current = NULL;
    85e8:	493d      	ldr	r1, [pc, #244]	; (86e0 <z_time_slice+0x128>)
    85ea:	2000      	movs	r0, #0
    85ec:	6008      	str	r0, [r1, #0]
	int ret = slice_ticks;
    85ee:	493d      	ldr	r1, [pc, #244]	; (86e4 <z_time_slice+0x12c>)
    85f0:	6809      	ldr	r1, [r1, #0]
	if (slice_time(_current) && sliceable(_current)) {
    85f2:	2900      	cmp	r1, #0
    85f4:	d052      	beq.n	869c <z_time_slice+0xe4>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    85f6:	89d1      	ldrh	r1, [r2, #14]
		&& !z_is_idle_thread_object(thread);
    85f8:	297f      	cmp	r1, #127	; 0x7f
    85fa:	d83a      	bhi.n	8672 <z_time_slice+0xba>
    85fc:	7b51      	ldrb	r1, [r2, #13]
		&& !z_is_thread_prevented_from_running(thread)
    85fe:	f011 0f1f 	tst.w	r1, #31
    8602:	d140      	bne.n	8686 <z_time_slice+0xce>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8604:	f992 000e 	ldrsb.w	r0, [r2, #14]
    8608:	4937      	ldr	r1, [pc, #220]	; (86e8 <z_time_slice+0x130>)
    860a:	6809      	ldr	r1, [r1, #0]
    860c:	4288      	cmp	r0, r1
    860e:	db3c      	blt.n	868a <z_time_slice+0xd2>
		&& !z_is_idle_thread_object(thread);
    8610:	4936      	ldr	r1, [pc, #216]	; (86ec <z_time_slice+0x134>)
    8612:	428a      	cmp	r2, r1
    8614:	d03b      	beq.n	868e <z_time_slice+0xd6>
    8616:	2201      	movs	r2, #1
    8618:	e02c      	b.n	8674 <z_time_slice+0xbc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    861a:	4e35      	ldr	r6, [pc, #212]	; (86f0 <z_time_slice+0x138>)
    861c:	238e      	movs	r3, #142	; 0x8e
    861e:	4632      	mov	r2, r6
    8620:	4934      	ldr	r1, [pc, #208]	; (86f4 <z_time_slice+0x13c>)
    8622:	4835      	ldr	r0, [pc, #212]	; (86f8 <z_time_slice+0x140>)
    8624:	f002 f96a 	bl	a8fc <assert_print>
    8628:	492b      	ldr	r1, [pc, #172]	; (86d8 <z_time_slice+0x120>)
    862a:	4834      	ldr	r0, [pc, #208]	; (86fc <z_time_slice+0x144>)
    862c:	f002 f966 	bl	a8fc <assert_print>
    8630:	218e      	movs	r1, #142	; 0x8e
    8632:	4630      	mov	r0, r6
    8634:	f002 f95b 	bl	a8ee <assert_post_action>
    8638:	e7cc      	b.n	85d4 <z_time_slice+0x1c>
		z_reset_time_slice(_current);
    863a:	4610      	mov	r0, r2
    863c:	f7ff fd32 	bl	80a4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8640:	4825      	ldr	r0, [pc, #148]	; (86d8 <z_time_slice+0x120>)
    8642:	f7ff f807 	bl	7654 <z_spin_unlock_valid>
    8646:	b120      	cbz	r0, 8652 <z_time_slice+0x9a>
	__asm__ volatile(
    8648:	f385 8811 	msr	BASEPRI, r5
    864c:	f3bf 8f6f 	isb	sy
		return;
    8650:	e030      	b.n	86b4 <z_time_slice+0xfc>
    8652:	4c27      	ldr	r4, [pc, #156]	; (86f0 <z_time_slice+0x138>)
    8654:	23b9      	movs	r3, #185	; 0xb9
    8656:	4622      	mov	r2, r4
    8658:	4929      	ldr	r1, [pc, #164]	; (8700 <z_time_slice+0x148>)
    865a:	4827      	ldr	r0, [pc, #156]	; (86f8 <z_time_slice+0x140>)
    865c:	f002 f94e 	bl	a8fc <assert_print>
    8660:	491d      	ldr	r1, [pc, #116]	; (86d8 <z_time_slice+0x120>)
    8662:	4828      	ldr	r0, [pc, #160]	; (8704 <z_time_slice+0x14c>)
    8664:	f002 f94a 	bl	a8fc <assert_print>
    8668:	21b9      	movs	r1, #185	; 0xb9
    866a:	4620      	mov	r0, r4
    866c:	f002 f93f 	bl	a8ee <assert_post_action>
    8670:	e7ea      	b.n	8648 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
    8672:	2200      	movs	r2, #0
	if (slice_time(_current) && sliceable(_current)) {
    8674:	b192      	cbz	r2, 869c <z_time_slice+0xe4>
		if (ticks >= _current_cpu->slice_ticks) {
    8676:	4a19      	ldr	r2, [pc, #100]	; (86dc <z_time_slice+0x124>)
    8678:	6910      	ldr	r0, [r2, #16]
    867a:	42a0      	cmp	r0, r4
    867c:	dd09      	ble.n	8692 <z_time_slice+0xda>
			_current_cpu->slice_ticks -= ticks;
    867e:	1b00      	subs	r0, r0, r4
    8680:	4a16      	ldr	r2, [pc, #88]	; (86dc <z_time_slice+0x124>)
    8682:	6110      	str	r0, [r2, #16]
    8684:	e00d      	b.n	86a2 <z_time_slice+0xea>
		&& !z_is_idle_thread_object(thread);
    8686:	2200      	movs	r2, #0
    8688:	e7f4      	b.n	8674 <z_time_slice+0xbc>
    868a:	2200      	movs	r2, #0
    868c:	e7f2      	b.n	8674 <z_time_slice+0xbc>
    868e:	2200      	movs	r2, #0
    8690:	e7f0      	b.n	8674 <z_time_slice+0xbc>
			key = slice_expired_locked(key);
    8692:	4628      	mov	r0, r5
    8694:	f7ff ff7c 	bl	8590 <slice_expired_locked>
    8698:	4603      	mov	r3, r0
    869a:	e002      	b.n	86a2 <z_time_slice+0xea>
		_current_cpu->slice_ticks = 0;
    869c:	4a0f      	ldr	r2, [pc, #60]	; (86dc <z_time_slice+0x124>)
    869e:	2100      	movs	r1, #0
    86a0:	6111      	str	r1, [r2, #16]
	k_spin_unlock(&sched_spinlock, key);
    86a2:	461c      	mov	r4, r3
    86a4:	480c      	ldr	r0, [pc, #48]	; (86d8 <z_time_slice+0x120>)
    86a6:	f7fe ffd5 	bl	7654 <z_spin_unlock_valid>
    86aa:	b120      	cbz	r0, 86b6 <z_time_slice+0xfe>
    86ac:	f384 8811 	msr	BASEPRI, r4
    86b0:	f3bf 8f6f 	isb	sy
}
    86b4:	bd70      	pop	{r4, r5, r6, pc}
    86b6:	4d0e      	ldr	r5, [pc, #56]	; (86f0 <z_time_slice+0x138>)
    86b8:	23b9      	movs	r3, #185	; 0xb9
    86ba:	462a      	mov	r2, r5
    86bc:	4910      	ldr	r1, [pc, #64]	; (8700 <z_time_slice+0x148>)
    86be:	480e      	ldr	r0, [pc, #56]	; (86f8 <z_time_slice+0x140>)
    86c0:	f002 f91c 	bl	a8fc <assert_print>
    86c4:	4904      	ldr	r1, [pc, #16]	; (86d8 <z_time_slice+0x120>)
    86c6:	480f      	ldr	r0, [pc, #60]	; (8704 <z_time_slice+0x14c>)
    86c8:	f002 f918 	bl	a8fc <assert_print>
    86cc:	21b9      	movs	r1, #185	; 0xb9
    86ce:	4628      	mov	r0, r5
    86d0:	f002 f90d 	bl	a8ee <assert_post_action>
    86d4:	e7ea      	b.n	86ac <z_time_slice+0xf4>
    86d6:	bf00      	nop
    86d8:	20005250 	.word	0x20005250
    86dc:	20005214 	.word	0x20005214
    86e0:	2000524c 	.word	0x2000524c
    86e4:	20005258 	.word	0x20005258
    86e8:	20005254 	.word	0x20005254
    86ec:	20004570 	.word	0x20004570
    86f0:	0000c400 	.word	0x0000c400
    86f4:	0000c460 	.word	0x0000c460
    86f8:	0000c254 	.word	0x0000c254
    86fc:	0000c478 	.word	0x0000c478
    8700:	0000c430 	.word	0x0000c430
    8704:	0000c448 	.word	0x0000c448

00008708 <ready_thread>:
{
    8708:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    870a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    870c:	f990 200d 	ldrsb.w	r2, [r0, #13]
    8710:	2a00      	cmp	r2, #0
    8712:	db30      	blt.n	8776 <ready_thread+0x6e>
    8714:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8716:	f013 0f1f 	tst.w	r3, #31
    871a:	d105      	bne.n	8728 <ready_thread+0x20>
	return node->next != NULL;
    871c:	6982      	ldr	r2, [r0, #24]
    871e:	b10a      	cbz	r2, 8724 <ready_thread+0x1c>
    8720:	2200      	movs	r2, #0
    8722:	e002      	b.n	872a <ready_thread+0x22>
    8724:	2201      	movs	r2, #1
    8726:	e000      	b.n	872a <ready_thread+0x22>
    8728:	2200      	movs	r2, #0
    872a:	b322      	cbz	r2, 8776 <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
    872c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8730:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8732:	4b1b      	ldr	r3, [pc, #108]	; (87a0 <ready_thread+0x98>)
    8734:	429c      	cmp	r4, r3
    8736:	d01f      	beq.n	8778 <ready_thread+0x70>
	return list->head == list;
    8738:	4b1a      	ldr	r3, [pc, #104]	; (87a4 <ready_thread+0x9c>)
    873a:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    873e:	429d      	cmp	r5, r3
    8740:	d02c      	beq.n	879c <ready_thread+0x94>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8742:	b16d      	cbz	r5, 8760 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8744:	4629      	mov	r1, r5
    8746:	4620      	mov	r0, r4
    8748:	f003 fa8e 	bl	bc68 <z_sched_prio_cmp>
    874c:	2800      	cmp	r0, #0
    874e:	dc1f      	bgt.n	8790 <ready_thread+0x88>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8750:	b135      	cbz	r5, 8760 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
    8752:	4b14      	ldr	r3, [pc, #80]	; (87a4 <ready_thread+0x9c>)
    8754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8756:	429d      	cmp	r5, r3
    8758:	d002      	beq.n	8760 <ready_thread+0x58>
    875a:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    875c:	2d00      	cmp	r5, #0
    875e:	d1f0      	bne.n	8742 <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
    8760:	4b10      	ldr	r3, [pc, #64]	; (87a4 <ready_thread+0x9c>)
    8762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8764:	f103 0120 	add.w	r1, r3, #32
    8768:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    876a:	6062      	str	r2, [r4, #4]
	tail->next = node;
    876c:	6014      	str	r4, [r2, #0]
	list->tail = node;
    876e:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    8770:	2000      	movs	r0, #0
    8772:	f7ff fe6f 	bl	8454 <update_cache>
}
    8776:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8778:	4d0b      	ldr	r5, [pc, #44]	; (87a8 <ready_thread+0xa0>)
    877a:	23ba      	movs	r3, #186	; 0xba
    877c:	462a      	mov	r2, r5
    877e:	490b      	ldr	r1, [pc, #44]	; (87ac <ready_thread+0xa4>)
    8780:	480b      	ldr	r0, [pc, #44]	; (87b0 <ready_thread+0xa8>)
    8782:	f002 f8bb 	bl	a8fc <assert_print>
    8786:	21ba      	movs	r1, #186	; 0xba
    8788:	4628      	mov	r0, r5
    878a:	f002 f8b0 	bl	a8ee <assert_post_action>
    878e:	e7d3      	b.n	8738 <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
    8790:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    8792:	6063      	str	r3, [r4, #4]
	node->next = successor;
    8794:	6025      	str	r5, [r4, #0]
	prev->next = node;
    8796:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8798:	606c      	str	r4, [r5, #4]
}
    879a:	e7e9      	b.n	8770 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    879c:	2500      	movs	r5, #0
    879e:	e7d0      	b.n	8742 <ready_thread+0x3a>
    87a0:	20004570 	.word	0x20004570
    87a4:	20005214 	.word	0x20005214
    87a8:	0000dd38 	.word	0x0000dd38
    87ac:	0000dd74 	.word	0x0000dd74
    87b0:	0000c254 	.word	0x0000c254

000087b4 <z_ready_thread>:
{
    87b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    87b6:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    87b8:	2400      	movs	r4, #0
	__asm__ volatile(
    87ba:	f04f 0320 	mov.w	r3, #32
    87be:	f3ef 8611 	mrs	r6, BASEPRI
    87c2:	f383 8812 	msr	BASEPRI_MAX, r3
    87c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    87ca:	481e      	ldr	r0, [pc, #120]	; (8844 <z_ready_thread+0x90>)
    87cc:	f7fe ff32 	bl	7634 <z_spin_lock_valid>
    87d0:	b118      	cbz	r0, 87da <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
    87d2:	481c      	ldr	r0, [pc, #112]	; (8844 <z_ready_thread+0x90>)
    87d4:	f7fe ff4e 	bl	7674 <z_spin_lock_set_owner>
	return k;
    87d8:	e018      	b.n	880c <z_ready_thread+0x58>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    87da:	4f1b      	ldr	r7, [pc, #108]	; (8848 <z_ready_thread+0x94>)
    87dc:	238e      	movs	r3, #142	; 0x8e
    87de:	463a      	mov	r2, r7
    87e0:	491a      	ldr	r1, [pc, #104]	; (884c <z_ready_thread+0x98>)
    87e2:	481b      	ldr	r0, [pc, #108]	; (8850 <z_ready_thread+0x9c>)
    87e4:	f002 f88a 	bl	a8fc <assert_print>
    87e8:	4916      	ldr	r1, [pc, #88]	; (8844 <z_ready_thread+0x90>)
    87ea:	481a      	ldr	r0, [pc, #104]	; (8854 <z_ready_thread+0xa0>)
    87ec:	f002 f886 	bl	a8fc <assert_print>
    87f0:	218e      	movs	r1, #142	; 0x8e
    87f2:	4638      	mov	r0, r7
    87f4:	f002 f87b 	bl	a8ee <assert_post_action>
    87f8:	e7eb      	b.n	87d2 <z_ready_thread+0x1e>
			ready_thread(thread);
    87fa:	4628      	mov	r0, r5
    87fc:	f7ff ff84 	bl	8708 <ready_thread>
    8800:	e00a      	b.n	8818 <z_ready_thread+0x64>
	__asm__ volatile(
    8802:	f386 8811 	msr	BASEPRI, r6
    8806:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    880a:	2401      	movs	r4, #1
    880c:	b9cc      	cbnz	r4, 8842 <z_ready_thread+0x8e>
		if (!thread_active_elsewhere(thread)) {
    880e:	4628      	mov	r0, r5
    8810:	f003 fa28 	bl	bc64 <thread_active_elsewhere>
    8814:	2800      	cmp	r0, #0
    8816:	d0f0      	beq.n	87fa <z_ready_thread+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8818:	480a      	ldr	r0, [pc, #40]	; (8844 <z_ready_thread+0x90>)
    881a:	f7fe ff1b 	bl	7654 <z_spin_unlock_valid>
    881e:	2800      	cmp	r0, #0
    8820:	d1ef      	bne.n	8802 <z_ready_thread+0x4e>
    8822:	4c09      	ldr	r4, [pc, #36]	; (8848 <z_ready_thread+0x94>)
    8824:	23b9      	movs	r3, #185	; 0xb9
    8826:	4622      	mov	r2, r4
    8828:	490b      	ldr	r1, [pc, #44]	; (8858 <z_ready_thread+0xa4>)
    882a:	4809      	ldr	r0, [pc, #36]	; (8850 <z_ready_thread+0x9c>)
    882c:	f002 f866 	bl	a8fc <assert_print>
    8830:	4904      	ldr	r1, [pc, #16]	; (8844 <z_ready_thread+0x90>)
    8832:	480a      	ldr	r0, [pc, #40]	; (885c <z_ready_thread+0xa8>)
    8834:	f002 f862 	bl	a8fc <assert_print>
    8838:	21b9      	movs	r1, #185	; 0xb9
    883a:	4620      	mov	r0, r4
    883c:	f002 f857 	bl	a8ee <assert_post_action>
    8840:	e7df      	b.n	8802 <z_ready_thread+0x4e>
}
    8842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8844:	20005250 	.word	0x20005250
    8848:	0000c400 	.word	0x0000c400
    884c:	0000c460 	.word	0x0000c460
    8850:	0000c254 	.word	0x0000c254
    8854:	0000c478 	.word	0x0000c478
    8858:	0000c430 	.word	0x0000c430
    885c:	0000c448 	.word	0x0000c448

00008860 <z_sched_start>:
{
    8860:	b570      	push	{r4, r5, r6, lr}
    8862:	4604      	mov	r4, r0
	__asm__ volatile(
    8864:	f04f 0320 	mov.w	r3, #32
    8868:	f3ef 8511 	mrs	r5, BASEPRI
    886c:	f383 8812 	msr	BASEPRI_MAX, r3
    8870:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8874:	481f      	ldr	r0, [pc, #124]	; (88f4 <z_sched_start+0x94>)
    8876:	f7fe fedd 	bl	7634 <z_spin_lock_valid>
    887a:	b188      	cbz	r0, 88a0 <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
    887c:	481d      	ldr	r0, [pc, #116]	; (88f4 <z_sched_start+0x94>)
    887e:	f7fe fef9 	bl	7674 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    8882:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    8884:	f013 0f04 	tst.w	r3, #4
    8888:	d01a      	beq.n	88c0 <z_sched_start+0x60>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    888a:	f023 0304 	bic.w	r3, r3, #4
    888e:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
    8890:	4620      	mov	r0, r4
    8892:	f7ff ff39 	bl	8708 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    8896:	4629      	mov	r1, r5
    8898:	4816      	ldr	r0, [pc, #88]	; (88f4 <z_sched_start+0x94>)
    889a:	f7ff fce7 	bl	826c <z_reschedule>
}
    889e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    88a0:	4e15      	ldr	r6, [pc, #84]	; (88f8 <z_sched_start+0x98>)
    88a2:	238e      	movs	r3, #142	; 0x8e
    88a4:	4632      	mov	r2, r6
    88a6:	4915      	ldr	r1, [pc, #84]	; (88fc <z_sched_start+0x9c>)
    88a8:	4815      	ldr	r0, [pc, #84]	; (8900 <z_sched_start+0xa0>)
    88aa:	f002 f827 	bl	a8fc <assert_print>
    88ae:	4911      	ldr	r1, [pc, #68]	; (88f4 <z_sched_start+0x94>)
    88b0:	4814      	ldr	r0, [pc, #80]	; (8904 <z_sched_start+0xa4>)
    88b2:	f002 f823 	bl	a8fc <assert_print>
    88b6:	218e      	movs	r1, #142	; 0x8e
    88b8:	4630      	mov	r0, r6
    88ba:	f002 f818 	bl	a8ee <assert_post_action>
    88be:	e7dd      	b.n	887c <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    88c0:	480c      	ldr	r0, [pc, #48]	; (88f4 <z_sched_start+0x94>)
    88c2:	f7fe fec7 	bl	7654 <z_spin_unlock_valid>
    88c6:	b120      	cbz	r0, 88d2 <z_sched_start+0x72>
	__asm__ volatile(
    88c8:	f385 8811 	msr	BASEPRI, r5
    88cc:	f3bf 8f6f 	isb	sy
		return;
    88d0:	e7e5      	b.n	889e <z_sched_start+0x3e>
    88d2:	4c09      	ldr	r4, [pc, #36]	; (88f8 <z_sched_start+0x98>)
    88d4:	23b9      	movs	r3, #185	; 0xb9
    88d6:	4622      	mov	r2, r4
    88d8:	490b      	ldr	r1, [pc, #44]	; (8908 <z_sched_start+0xa8>)
    88da:	4809      	ldr	r0, [pc, #36]	; (8900 <z_sched_start+0xa0>)
    88dc:	f002 f80e 	bl	a8fc <assert_print>
    88e0:	4904      	ldr	r1, [pc, #16]	; (88f4 <z_sched_start+0x94>)
    88e2:	480a      	ldr	r0, [pc, #40]	; (890c <z_sched_start+0xac>)
    88e4:	f002 f80a 	bl	a8fc <assert_print>
    88e8:	21b9      	movs	r1, #185	; 0xb9
    88ea:	4620      	mov	r0, r4
    88ec:	f001 ffff 	bl	a8ee <assert_post_action>
    88f0:	e7ea      	b.n	88c8 <z_sched_start+0x68>
    88f2:	bf00      	nop
    88f4:	20005250 	.word	0x20005250
    88f8:	0000c400 	.word	0x0000c400
    88fc:	0000c460 	.word	0x0000c460
    8900:	0000c254 	.word	0x0000c254
    8904:	0000c478 	.word	0x0000c478
    8908:	0000c430 	.word	0x0000c430
    890c:	0000c448 	.word	0x0000c448

00008910 <z_thread_timeout>:
{
    8910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8914:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    8916:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    891a:	2500      	movs	r5, #0
	__asm__ volatile(
    891c:	f04f 0320 	mov.w	r3, #32
    8920:	f3ef 8711 	mrs	r7, BASEPRI
    8924:	f383 8812 	msr	BASEPRI_MAX, r3
    8928:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    892c:	482b      	ldr	r0, [pc, #172]	; (89dc <z_thread_timeout+0xcc>)
    892e:	f7fe fe81 	bl	7634 <z_spin_lock_valid>
    8932:	b118      	cbz	r0, 893c <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
    8934:	4829      	ldr	r0, [pc, #164]	; (89dc <z_thread_timeout+0xcc>)
    8936:	f7fe fe9d 	bl	7674 <z_spin_lock_set_owner>
	return k;
    893a:	e026      	b.n	898a <z_thread_timeout+0x7a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    893c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 89e0 <z_thread_timeout+0xd0>
    8940:	238e      	movs	r3, #142	; 0x8e
    8942:	4642      	mov	r2, r8
    8944:	4927      	ldr	r1, [pc, #156]	; (89e4 <z_thread_timeout+0xd4>)
    8946:	4828      	ldr	r0, [pc, #160]	; (89e8 <z_thread_timeout+0xd8>)
    8948:	f001 ffd8 	bl	a8fc <assert_print>
    894c:	4923      	ldr	r1, [pc, #140]	; (89dc <z_thread_timeout+0xcc>)
    894e:	4827      	ldr	r0, [pc, #156]	; (89ec <z_thread_timeout+0xdc>)
    8950:	f001 ffd4 	bl	a8fc <assert_print>
    8954:	218e      	movs	r1, #142	; 0x8e
    8956:	4640      	mov	r0, r8
    8958:	f001 ffc9 	bl	a8ee <assert_post_action>
    895c:	e7ea      	b.n	8934 <z_thread_timeout+0x24>
    895e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    8962:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    8966:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    896a:	f023 0310 	bic.w	r3, r3, #16
    896e:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    8972:	4630      	mov	r0, r6
    8974:	f7ff fec8 	bl	8708 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8978:	4818      	ldr	r0, [pc, #96]	; (89dc <z_thread_timeout+0xcc>)
    897a:	f7fe fe6b 	bl	7654 <z_spin_unlock_valid>
    897e:	b1d8      	cbz	r0, 89b8 <z_thread_timeout+0xa8>
	__asm__ volatile(
    8980:	f387 8811 	msr	BASEPRI, r7
    8984:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8988:	2501      	movs	r5, #1
    898a:	bb2d      	cbnz	r5, 89d8 <z_thread_timeout+0xc8>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    898c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    8990:	f013 0f28 	tst.w	r3, #40	; 0x28
    8994:	d1f0      	bne.n	8978 <z_thread_timeout+0x68>
			if (thread->base.pended_on != NULL) {
    8996:	f854 3c10 	ldr.w	r3, [r4, #-16]
    899a:	2b00      	cmp	r3, #0
    899c:	d0df      	beq.n	895e <z_thread_timeout+0x4e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    899e:	4630      	mov	r0, r6
    89a0:	f7ff fb56 	bl	8050 <pended_on_thread>
    89a4:	4631      	mov	r1, r6
    89a6:	f7ff fd31 	bl	840c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    89aa:	7b73      	ldrb	r3, [r6, #13]
    89ac:	f023 0302 	bic.w	r3, r3, #2
    89b0:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
    89b2:	2300      	movs	r3, #0
    89b4:	60b3      	str	r3, [r6, #8]
}
    89b6:	e7d2      	b.n	895e <z_thread_timeout+0x4e>
    89b8:	4d09      	ldr	r5, [pc, #36]	; (89e0 <z_thread_timeout+0xd0>)
    89ba:	23b9      	movs	r3, #185	; 0xb9
    89bc:	462a      	mov	r2, r5
    89be:	490c      	ldr	r1, [pc, #48]	; (89f0 <z_thread_timeout+0xe0>)
    89c0:	4809      	ldr	r0, [pc, #36]	; (89e8 <z_thread_timeout+0xd8>)
    89c2:	f001 ff9b 	bl	a8fc <assert_print>
    89c6:	4905      	ldr	r1, [pc, #20]	; (89dc <z_thread_timeout+0xcc>)
    89c8:	480a      	ldr	r0, [pc, #40]	; (89f4 <z_thread_timeout+0xe4>)
    89ca:	f001 ff97 	bl	a8fc <assert_print>
    89ce:	21b9      	movs	r1, #185	; 0xb9
    89d0:	4628      	mov	r0, r5
    89d2:	f001 ff8c 	bl	a8ee <assert_post_action>
    89d6:	e7d3      	b.n	8980 <z_thread_timeout+0x70>
}
    89d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    89dc:	20005250 	.word	0x20005250
    89e0:	0000c400 	.word	0x0000c400
    89e4:	0000c460 	.word	0x0000c460
    89e8:	0000c254 	.word	0x0000c254
    89ec:	0000c478 	.word	0x0000c478
    89f0:	0000c430 	.word	0x0000c430
    89f4:	0000c448 	.word	0x0000c448

000089f8 <unready_thread>:
{
    89f8:	b510      	push	{r4, lr}
    89fa:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    89fc:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    89fe:	f990 300d 	ldrsb.w	r3, [r0, #13]
    8a02:	2b00      	cmp	r3, #0
    8a04:	db08      	blt.n	8a18 <unready_thread+0x20>
	update_cache(thread == _current);
    8a06:	4b08      	ldr	r3, [pc, #32]	; (8a28 <unready_thread+0x30>)
    8a08:	6898      	ldr	r0, [r3, #8]
    8a0a:	42a0      	cmp	r0, r4
    8a0c:	bf14      	ite	ne
    8a0e:	2000      	movne	r0, #0
    8a10:	2001      	moveq	r0, #1
    8a12:	f7ff fd1f 	bl	8454 <update_cache>
}
    8a16:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8a18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8a1c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8a1e:	4601      	mov	r1, r0
    8a20:	4802      	ldr	r0, [pc, #8]	; (8a2c <unready_thread+0x34>)
    8a22:	f7ff fcf3 	bl	840c <z_priq_dumb_remove>
}
    8a26:	e7ee      	b.n	8a06 <unready_thread+0xe>
    8a28:	20005214 	.word	0x20005214
    8a2c:	20005234 	.word	0x20005234

00008a30 <add_to_waitq_locked>:
{
    8a30:	b570      	push	{r4, r5, r6, lr}
    8a32:	4605      	mov	r5, r0
    8a34:	460e      	mov	r6, r1
	unready_thread(thread);
    8a36:	f7ff ffdf 	bl	89f8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    8a3a:	7b6b      	ldrb	r3, [r5, #13]
    8a3c:	f043 0302 	orr.w	r3, r3, #2
    8a40:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    8a42:	b1ce      	cbz	r6, 8a78 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
    8a44:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8a46:	4b17      	ldr	r3, [pc, #92]	; (8aa4 <add_to_waitq_locked+0x74>)
    8a48:	429d      	cmp	r5, r3
    8a4a:	d016      	beq.n	8a7a <add_to_waitq_locked+0x4a>
	return list->head == list;
    8a4c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8a4e:	42a6      	cmp	r6, r4
    8a50:	d025      	beq.n	8a9e <add_to_waitq_locked+0x6e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8a52:	b164      	cbz	r4, 8a6e <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8a54:	4621      	mov	r1, r4
    8a56:	4628      	mov	r0, r5
    8a58:	f003 f906 	bl	bc68 <z_sched_prio_cmp>
    8a5c:	2800      	cmp	r0, #0
    8a5e:	dc18      	bgt.n	8a92 <add_to_waitq_locked+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8a60:	b12c      	cbz	r4, 8a6e <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
    8a62:	6873      	ldr	r3, [r6, #4]
    8a64:	429c      	cmp	r4, r3
    8a66:	d002      	beq.n	8a6e <add_to_waitq_locked+0x3e>
    8a68:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8a6a:	2c00      	cmp	r4, #0
    8a6c:	d1f1      	bne.n	8a52 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    8a6e:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    8a70:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    8a72:	606b      	str	r3, [r5, #4]
	tail->next = node;
    8a74:	601d      	str	r5, [r3, #0]
	list->tail = node;
    8a76:	6075      	str	r5, [r6, #4]
}
    8a78:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8a7a:	4c0b      	ldr	r4, [pc, #44]	; (8aa8 <add_to_waitq_locked+0x78>)
    8a7c:	23ba      	movs	r3, #186	; 0xba
    8a7e:	4622      	mov	r2, r4
    8a80:	490a      	ldr	r1, [pc, #40]	; (8aac <add_to_waitq_locked+0x7c>)
    8a82:	480b      	ldr	r0, [pc, #44]	; (8ab0 <add_to_waitq_locked+0x80>)
    8a84:	f001 ff3a 	bl	a8fc <assert_print>
    8a88:	21ba      	movs	r1, #186	; 0xba
    8a8a:	4620      	mov	r0, r4
    8a8c:	f001 ff2f 	bl	a8ee <assert_post_action>
    8a90:	e7dc      	b.n	8a4c <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
    8a92:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    8a94:	606b      	str	r3, [r5, #4]
	node->next = successor;
    8a96:	602c      	str	r4, [r5, #0]
	prev->next = node;
    8a98:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    8a9a:	6065      	str	r5, [r4, #4]
}
    8a9c:	e7ec      	b.n	8a78 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8a9e:	2400      	movs	r4, #0
    8aa0:	e7d7      	b.n	8a52 <add_to_waitq_locked+0x22>
    8aa2:	bf00      	nop
    8aa4:	20004570 	.word	0x20004570
    8aa8:	0000dd38 	.word	0x0000dd38
    8aac:	0000dd74 	.word	0x0000dd74
    8ab0:	0000c254 	.word	0x0000c254

00008ab4 <pend>:
{
    8ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8ab8:	4605      	mov	r5, r0
    8aba:	460e      	mov	r6, r1
    8abc:	4691      	mov	r9, r2
    8abe:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    8ac0:	2400      	movs	r4, #0
	__asm__ volatile(
    8ac2:	f04f 0320 	mov.w	r3, #32
    8ac6:	f3ef 8711 	mrs	r7, BASEPRI
    8aca:	f383 8812 	msr	BASEPRI_MAX, r3
    8ace:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ad2:	481f      	ldr	r0, [pc, #124]	; (8b50 <pend+0x9c>)
    8ad4:	f7fe fdae 	bl	7634 <z_spin_lock_valid>
    8ad8:	b118      	cbz	r0, 8ae2 <pend+0x2e>
	z_spin_lock_set_owner(l);
    8ada:	481d      	ldr	r0, [pc, #116]	; (8b50 <pend+0x9c>)
    8adc:	f7fe fdca 	bl	7674 <z_spin_lock_set_owner>
	return k;
    8ae0:	e015      	b.n	8b0e <pend+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ae2:	f8df a070 	ldr.w	sl, [pc, #112]	; 8b54 <pend+0xa0>
    8ae6:	238e      	movs	r3, #142	; 0x8e
    8ae8:	4652      	mov	r2, sl
    8aea:	491b      	ldr	r1, [pc, #108]	; (8b58 <pend+0xa4>)
    8aec:	481b      	ldr	r0, [pc, #108]	; (8b5c <pend+0xa8>)
    8aee:	f001 ff05 	bl	a8fc <assert_print>
    8af2:	4917      	ldr	r1, [pc, #92]	; (8b50 <pend+0x9c>)
    8af4:	481a      	ldr	r0, [pc, #104]	; (8b60 <pend+0xac>)
    8af6:	f001 ff01 	bl	a8fc <assert_print>
    8afa:	218e      	movs	r1, #142	; 0x8e
    8afc:	4650      	mov	r0, sl
    8afe:	f001 fef6 	bl	a8ee <assert_post_action>
    8b02:	e7ea      	b.n	8ada <pend+0x26>
	__asm__ volatile(
    8b04:	f387 8811 	msr	BASEPRI, r7
    8b08:	f3bf 8f6f 	isb	sy
    8b0c:	2401      	movs	r4, #1
    8b0e:	b9c4      	cbnz	r4, 8b42 <pend+0x8e>
		add_to_waitq_locked(thread, wait_q);
    8b10:	4631      	mov	r1, r6
    8b12:	4628      	mov	r0, r5
    8b14:	f7ff ff8c 	bl	8a30 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8b18:	480d      	ldr	r0, [pc, #52]	; (8b50 <pend+0x9c>)
    8b1a:	f7fe fd9b 	bl	7654 <z_spin_unlock_valid>
    8b1e:	2800      	cmp	r0, #0
    8b20:	d1f0      	bne.n	8b04 <pend+0x50>
    8b22:	4c0c      	ldr	r4, [pc, #48]	; (8b54 <pend+0xa0>)
    8b24:	23b9      	movs	r3, #185	; 0xb9
    8b26:	4622      	mov	r2, r4
    8b28:	490e      	ldr	r1, [pc, #56]	; (8b64 <pend+0xb0>)
    8b2a:	480c      	ldr	r0, [pc, #48]	; (8b5c <pend+0xa8>)
    8b2c:	f001 fee6 	bl	a8fc <assert_print>
    8b30:	4907      	ldr	r1, [pc, #28]	; (8b50 <pend+0x9c>)
    8b32:	480d      	ldr	r0, [pc, #52]	; (8b68 <pend+0xb4>)
    8b34:	f001 fee2 	bl	a8fc <assert_print>
    8b38:	21b9      	movs	r1, #185	; 0xb9
    8b3a:	4620      	mov	r0, r4
    8b3c:	f001 fed7 	bl	a8ee <assert_post_action>
    8b40:	e7e0      	b.n	8b04 <pend+0x50>
	add_thread_timeout(thread, timeout);
    8b42:	464a      	mov	r2, r9
    8b44:	4643      	mov	r3, r8
    8b46:	4628      	mov	r0, r5
    8b48:	f7ff fa9c 	bl	8084 <add_thread_timeout>
}
    8b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8b50:	20005250 	.word	0x20005250
    8b54:	0000c400 	.word	0x0000c400
    8b58:	0000c460 	.word	0x0000c460
    8b5c:	0000c254 	.word	0x0000c254
    8b60:	0000c478 	.word	0x0000c478
    8b64:	0000c430 	.word	0x0000c430
    8b68:	0000c448 	.word	0x0000c448

00008b6c <z_pend_curr>:
{
    8b6c:	b570      	push	{r4, r5, r6, lr}
    8b6e:	4604      	mov	r4, r0
    8b70:	460d      	mov	r5, r1
    8b72:	4611      	mov	r1, r2
	pending_current = _current;
    8b74:	4b0f      	ldr	r3, [pc, #60]	; (8bb4 <z_pend_curr+0x48>)
    8b76:	6898      	ldr	r0, [r3, #8]
    8b78:	4b0f      	ldr	r3, [pc, #60]	; (8bb8 <z_pend_curr+0x4c>)
    8b7a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    8b7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    8b80:	f7ff ff98 	bl	8ab4 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8b84:	4620      	mov	r0, r4
    8b86:	f7fe fd65 	bl	7654 <z_spin_unlock_valid>
    8b8a:	b118      	cbz	r0, 8b94 <z_pend_curr+0x28>
    8b8c:	4628      	mov	r0, r5
    8b8e:	f7fa f965 	bl	2e5c <arch_swap>
}
    8b92:	bd70      	pop	{r4, r5, r6, pc}
    8b94:	4e09      	ldr	r6, [pc, #36]	; (8bbc <z_pend_curr+0x50>)
    8b96:	23d0      	movs	r3, #208	; 0xd0
    8b98:	4632      	mov	r2, r6
    8b9a:	4909      	ldr	r1, [pc, #36]	; (8bc0 <z_pend_curr+0x54>)
    8b9c:	4809      	ldr	r0, [pc, #36]	; (8bc4 <z_pend_curr+0x58>)
    8b9e:	f001 fead 	bl	a8fc <assert_print>
    8ba2:	4621      	mov	r1, r4
    8ba4:	4808      	ldr	r0, [pc, #32]	; (8bc8 <z_pend_curr+0x5c>)
    8ba6:	f001 fea9 	bl	a8fc <assert_print>
    8baa:	21d0      	movs	r1, #208	; 0xd0
    8bac:	4630      	mov	r0, r6
    8bae:	f001 fe9e 	bl	a8ee <assert_post_action>
    8bb2:	e7eb      	b.n	8b8c <z_pend_curr+0x20>
    8bb4:	20005214 	.word	0x20005214
    8bb8:	2000524c 	.word	0x2000524c
    8bbc:	0000c400 	.word	0x0000c400
    8bc0:	0000c430 	.word	0x0000c430
    8bc4:	0000c254 	.word	0x0000c254
    8bc8:	0000c448 	.word	0x0000c448

00008bcc <z_set_prio>:
{
    8bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8bd0:	4604      	mov	r4, r0
    8bd2:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    8bd4:	2500      	movs	r5, #0
	__asm__ volatile(
    8bd6:	f04f 0320 	mov.w	r3, #32
    8bda:	f3ef 8811 	mrs	r8, BASEPRI
    8bde:	f383 8812 	msr	BASEPRI_MAX, r3
    8be2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8be6:	4844      	ldr	r0, [pc, #272]	; (8cf8 <z_set_prio+0x12c>)
    8be8:	f7fe fd24 	bl	7634 <z_spin_lock_valid>
    8bec:	b120      	cbz	r0, 8bf8 <z_set_prio+0x2c>
	z_spin_lock_set_owner(l);
    8bee:	4842      	ldr	r0, [pc, #264]	; (8cf8 <z_set_prio+0x12c>)
    8bf0:	f7fe fd40 	bl	7674 <z_spin_lock_set_owner>
	bool need_sched = 0;
    8bf4:	2700      	movs	r7, #0
	return k;
    8bf6:	e01d      	b.n	8c34 <z_set_prio+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8bf8:	4f40      	ldr	r7, [pc, #256]	; (8cfc <z_set_prio+0x130>)
    8bfa:	238e      	movs	r3, #142	; 0x8e
    8bfc:	463a      	mov	r2, r7
    8bfe:	4940      	ldr	r1, [pc, #256]	; (8d00 <z_set_prio+0x134>)
    8c00:	4840      	ldr	r0, [pc, #256]	; (8d04 <z_set_prio+0x138>)
    8c02:	f001 fe7b 	bl	a8fc <assert_print>
    8c06:	493c      	ldr	r1, [pc, #240]	; (8cf8 <z_set_prio+0x12c>)
    8c08:	483f      	ldr	r0, [pc, #252]	; (8d08 <z_set_prio+0x13c>)
    8c0a:	f001 fe77 	bl	a8fc <assert_print>
    8c0e:	218e      	movs	r1, #142	; 0x8e
    8c10:	4638      	mov	r0, r7
    8c12:	f001 fe6c 	bl	a8ee <assert_post_action>
    8c16:	e7ea      	b.n	8bee <z_set_prio+0x22>
		if (need_sched) {
    8c18:	f013 0701 	ands.w	r7, r3, #1
    8c1c:	d116      	bne.n	8c4c <z_set_prio+0x80>
			thread->base.prio = prio;
    8c1e:	73a6      	strb	r6, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8c20:	4835      	ldr	r0, [pc, #212]	; (8cf8 <z_set_prio+0x12c>)
    8c22:	f7fe fd17 	bl	7654 <z_spin_unlock_valid>
    8c26:	2800      	cmp	r0, #0
    8c28:	d053      	beq.n	8cd2 <z_set_prio+0x106>
	__asm__ volatile(
    8c2a:	f388 8811 	msr	BASEPRI, r8
    8c2e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8c32:	2501      	movs	r5, #1
    8c34:	462b      	mov	r3, r5
    8c36:	2d00      	cmp	r5, #0
    8c38:	d15b      	bne.n	8cf2 <z_set_prio+0x126>
	uint8_t state = thread->base.thread_state;
    8c3a:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8c3c:	f012 0f1f 	tst.w	r2, #31
    8c40:	d1ea      	bne.n	8c18 <z_set_prio+0x4c>
	return node->next != NULL;
    8c42:	69a1      	ldr	r1, [r4, #24]
    8c44:	2900      	cmp	r1, #0
    8c46:	d1e7      	bne.n	8c18 <z_set_prio+0x4c>
    8c48:	2301      	movs	r3, #1
    8c4a:	e7e5      	b.n	8c18 <z_set_prio+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8c4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8c50:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8c52:	4621      	mov	r1, r4
    8c54:	482d      	ldr	r0, [pc, #180]	; (8d0c <z_set_prio+0x140>)
    8c56:	f7ff fbd9 	bl	840c <z_priq_dumb_remove>
				thread->base.prio = prio;
    8c5a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    8c5c:	7b63      	ldrb	r3, [r4, #13]
    8c5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8c62:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8c64:	4b2a      	ldr	r3, [pc, #168]	; (8d10 <z_set_prio+0x144>)
    8c66:	429c      	cmp	r4, r3
    8c68:	d01f      	beq.n	8caa <z_set_prio+0xde>
	return list->head == list;
    8c6a:	4b2a      	ldr	r3, [pc, #168]	; (8d14 <z_set_prio+0x148>)
    8c6c:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8c70:	429d      	cmp	r5, r3
    8c72:	d02c      	beq.n	8cce <z_set_prio+0x102>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8c74:	b16d      	cbz	r5, 8c92 <z_set_prio+0xc6>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8c76:	4629      	mov	r1, r5
    8c78:	4620      	mov	r0, r4
    8c7a:	f002 fff5 	bl	bc68 <z_sched_prio_cmp>
    8c7e:	2800      	cmp	r0, #0
    8c80:	dc1f      	bgt.n	8cc2 <z_set_prio+0xf6>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8c82:	b135      	cbz	r5, 8c92 <z_set_prio+0xc6>
	return (node == list->tail) ? NULL : node->next;
    8c84:	4b23      	ldr	r3, [pc, #140]	; (8d14 <z_set_prio+0x148>)
    8c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c88:	429d      	cmp	r5, r3
    8c8a:	d002      	beq.n	8c92 <z_set_prio+0xc6>
    8c8c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8c8e:	2d00      	cmp	r5, #0
    8c90:	d1f0      	bne.n	8c74 <z_set_prio+0xa8>
	sys_dnode_t *const tail = list->tail;
    8c92:	4b20      	ldr	r3, [pc, #128]	; (8d14 <z_set_prio+0x148>)
    8c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    8c96:	f103 0120 	add.w	r1, r3, #32
    8c9a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    8c9c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    8c9e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    8ca0:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    8ca2:	2001      	movs	r0, #1
    8ca4:	f7ff fbd6 	bl	8454 <update_cache>
    8ca8:	e7ba      	b.n	8c20 <z_set_prio+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    8caa:	4d1b      	ldr	r5, [pc, #108]	; (8d18 <z_set_prio+0x14c>)
    8cac:	23ba      	movs	r3, #186	; 0xba
    8cae:	462a      	mov	r2, r5
    8cb0:	491a      	ldr	r1, [pc, #104]	; (8d1c <z_set_prio+0x150>)
    8cb2:	4814      	ldr	r0, [pc, #80]	; (8d04 <z_set_prio+0x138>)
    8cb4:	f001 fe22 	bl	a8fc <assert_print>
    8cb8:	21ba      	movs	r1, #186	; 0xba
    8cba:	4628      	mov	r0, r5
    8cbc:	f001 fe17 	bl	a8ee <assert_post_action>
    8cc0:	e7d3      	b.n	8c6a <z_set_prio+0x9e>
	sys_dnode_t *const prev = successor->prev;
    8cc2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    8cc4:	6063      	str	r3, [r4, #4]
	node->next = successor;
    8cc6:	6025      	str	r5, [r4, #0]
	prev->next = node;
    8cc8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8cca:	606c      	str	r4, [r5, #4]
}
    8ccc:	e7e9      	b.n	8ca2 <z_set_prio+0xd6>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8cce:	2500      	movs	r5, #0
    8cd0:	e7d0      	b.n	8c74 <z_set_prio+0xa8>
    8cd2:	4d0a      	ldr	r5, [pc, #40]	; (8cfc <z_set_prio+0x130>)
    8cd4:	23b9      	movs	r3, #185	; 0xb9
    8cd6:	462a      	mov	r2, r5
    8cd8:	4911      	ldr	r1, [pc, #68]	; (8d20 <z_set_prio+0x154>)
    8cda:	480a      	ldr	r0, [pc, #40]	; (8d04 <z_set_prio+0x138>)
    8cdc:	f001 fe0e 	bl	a8fc <assert_print>
    8ce0:	4905      	ldr	r1, [pc, #20]	; (8cf8 <z_set_prio+0x12c>)
    8ce2:	4810      	ldr	r0, [pc, #64]	; (8d24 <z_set_prio+0x158>)
    8ce4:	f001 fe0a 	bl	a8fc <assert_print>
    8ce8:	21b9      	movs	r1, #185	; 0xb9
    8cea:	4628      	mov	r0, r5
    8cec:	f001 fdff 	bl	a8ee <assert_post_action>
    8cf0:	e79b      	b.n	8c2a <z_set_prio+0x5e>
}
    8cf2:	4638      	mov	r0, r7
    8cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8cf8:	20005250 	.word	0x20005250
    8cfc:	0000c400 	.word	0x0000c400
    8d00:	0000c460 	.word	0x0000c460
    8d04:	0000c254 	.word	0x0000c254
    8d08:	0000c478 	.word	0x0000c478
    8d0c:	20005234 	.word	0x20005234
    8d10:	20004570 	.word	0x20004570
    8d14:	20005214 	.word	0x20005214
    8d18:	0000dd38 	.word	0x0000dd38
    8d1c:	0000dd74 	.word	0x0000dd74
    8d20:	0000c430 	.word	0x0000c430
    8d24:	0000c448 	.word	0x0000c448

00008d28 <z_impl_k_thread_suspend>:
{
    8d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d2a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    8d2c:	3018      	adds	r0, #24
    8d2e:	f000 fdcf 	bl	98d0 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    8d32:	2500      	movs	r5, #0
	__asm__ volatile(
    8d34:	f04f 0320 	mov.w	r3, #32
    8d38:	f3ef 8611 	mrs	r6, BASEPRI
    8d3c:	f383 8812 	msr	BASEPRI_MAX, r3
    8d40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d44:	482d      	ldr	r0, [pc, #180]	; (8dfc <z_impl_k_thread_suspend+0xd4>)
    8d46:	f7fe fc75 	bl	7634 <z_spin_lock_valid>
    8d4a:	b118      	cbz	r0, 8d54 <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
    8d4c:	482b      	ldr	r0, [pc, #172]	; (8dfc <z_impl_k_thread_suspend+0xd4>)
    8d4e:	f7fe fc91 	bl	7674 <z_spin_lock_set_owner>
	return k;
    8d52:	e01c      	b.n	8d8e <z_impl_k_thread_suspend+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8d54:	4f2a      	ldr	r7, [pc, #168]	; (8e00 <z_impl_k_thread_suspend+0xd8>)
    8d56:	238e      	movs	r3, #142	; 0x8e
    8d58:	463a      	mov	r2, r7
    8d5a:	492a      	ldr	r1, [pc, #168]	; (8e04 <z_impl_k_thread_suspend+0xdc>)
    8d5c:	482a      	ldr	r0, [pc, #168]	; (8e08 <z_impl_k_thread_suspend+0xe0>)
    8d5e:	f001 fdcd 	bl	a8fc <assert_print>
    8d62:	4926      	ldr	r1, [pc, #152]	; (8dfc <z_impl_k_thread_suspend+0xd4>)
    8d64:	4829      	ldr	r0, [pc, #164]	; (8e0c <z_impl_k_thread_suspend+0xe4>)
    8d66:	f001 fdc9 	bl	a8fc <assert_print>
    8d6a:	218e      	movs	r1, #142	; 0x8e
    8d6c:	4638      	mov	r0, r7
    8d6e:	f001 fdbe 	bl	a8ee <assert_post_action>
    8d72:	e7eb      	b.n	8d4c <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8d74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8d78:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8d7a:	4621      	mov	r1, r4
    8d7c:	4824      	ldr	r0, [pc, #144]	; (8e10 <z_impl_k_thread_suspend+0xe8>)
    8d7e:	f7ff fb45 	bl	840c <z_priq_dumb_remove>
}
    8d82:	e00a      	b.n	8d9a <z_impl_k_thread_suspend+0x72>
	__asm__ volatile(
    8d84:	f386 8811 	msr	BASEPRI, r6
    8d88:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8d8c:	2501      	movs	r5, #1
    8d8e:	bb2d      	cbnz	r5, 8ddc <z_impl_k_thread_suspend+0xb4>
	return (thread->base.thread_state & state) != 0U;
    8d90:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    8d92:	f994 300d 	ldrsb.w	r3, [r4, #13]
    8d96:	2b00      	cmp	r3, #0
    8d98:	dbec      	blt.n	8d74 <z_impl_k_thread_suspend+0x4c>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8d9a:	7b63      	ldrb	r3, [r4, #13]
    8d9c:	f043 0310 	orr.w	r3, r3, #16
    8da0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    8da2:	4b1c      	ldr	r3, [pc, #112]	; (8e14 <z_impl_k_thread_suspend+0xec>)
    8da4:	6898      	ldr	r0, [r3, #8]
    8da6:	42a0      	cmp	r0, r4
    8da8:	bf14      	ite	ne
    8daa:	2000      	movne	r0, #0
    8dac:	2001      	moveq	r0, #1
    8dae:	f7ff fb51 	bl	8454 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8db2:	4812      	ldr	r0, [pc, #72]	; (8dfc <z_impl_k_thread_suspend+0xd4>)
    8db4:	f7fe fc4e 	bl	7654 <z_spin_unlock_valid>
    8db8:	2800      	cmp	r0, #0
    8dba:	d1e3      	bne.n	8d84 <z_impl_k_thread_suspend+0x5c>
    8dbc:	4d10      	ldr	r5, [pc, #64]	; (8e00 <z_impl_k_thread_suspend+0xd8>)
    8dbe:	23b9      	movs	r3, #185	; 0xb9
    8dc0:	462a      	mov	r2, r5
    8dc2:	4915      	ldr	r1, [pc, #84]	; (8e18 <z_impl_k_thread_suspend+0xf0>)
    8dc4:	4810      	ldr	r0, [pc, #64]	; (8e08 <z_impl_k_thread_suspend+0xe0>)
    8dc6:	f001 fd99 	bl	a8fc <assert_print>
    8dca:	490c      	ldr	r1, [pc, #48]	; (8dfc <z_impl_k_thread_suspend+0xd4>)
    8dcc:	4813      	ldr	r0, [pc, #76]	; (8e1c <z_impl_k_thread_suspend+0xf4>)
    8dce:	f001 fd95 	bl	a8fc <assert_print>
    8dd2:	21b9      	movs	r1, #185	; 0xb9
    8dd4:	4628      	mov	r0, r5
    8dd6:	f001 fd8a 	bl	a8ee <assert_post_action>
    8dda:	e7d3      	b.n	8d84 <z_impl_k_thread_suspend+0x5c>
	if (thread == _current) {
    8ddc:	4b0d      	ldr	r3, [pc, #52]	; (8e14 <z_impl_k_thread_suspend+0xec>)
    8dde:	689b      	ldr	r3, [r3, #8]
    8de0:	42a3      	cmp	r3, r4
    8de2:	d000      	beq.n	8de6 <z_impl_k_thread_suspend+0xbe>
}
    8de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    8de6:	f04f 0320 	mov.w	r3, #32
    8dea:	f3ef 8011 	mrs	r0, BASEPRI
    8dee:	f383 8812 	msr	BASEPRI_MAX, r3
    8df2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8df6:	f002 ff41 	bl	bc7c <z_reschedule_irqlock>
    8dfa:	e7f3      	b.n	8de4 <z_impl_k_thread_suspend+0xbc>
    8dfc:	20005250 	.word	0x20005250
    8e00:	0000c400 	.word	0x0000c400
    8e04:	0000c460 	.word	0x0000c460
    8e08:	0000c254 	.word	0x0000c254
    8e0c:	0000c478 	.word	0x0000c478
    8e10:	20005234 	.word	0x20005234
    8e14:	20005214 	.word	0x20005214
    8e18:	0000c430 	.word	0x0000c430
    8e1c:	0000c448 	.word	0x0000c448

00008e20 <k_sched_unlock>:
{
    8e20:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
    8e22:	2400      	movs	r4, #0
    8e24:	f04f 0320 	mov.w	r3, #32
    8e28:	f3ef 8511 	mrs	r5, BASEPRI
    8e2c:	f383 8812 	msr	BASEPRI_MAX, r3
    8e30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8e34:	4838      	ldr	r0, [pc, #224]	; (8f18 <k_sched_unlock+0xf8>)
    8e36:	f7fe fbfd 	bl	7634 <z_spin_lock_valid>
    8e3a:	b118      	cbz	r0, 8e44 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
    8e3c:	4836      	ldr	r0, [pc, #216]	; (8f18 <k_sched_unlock+0xf8>)
    8e3e:	f7fe fc19 	bl	7674 <z_spin_lock_set_owner>
	return k;
    8e42:	e036      	b.n	8eb2 <k_sched_unlock+0x92>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8e44:	4e35      	ldr	r6, [pc, #212]	; (8f1c <k_sched_unlock+0xfc>)
    8e46:	238e      	movs	r3, #142	; 0x8e
    8e48:	4632      	mov	r2, r6
    8e4a:	4935      	ldr	r1, [pc, #212]	; (8f20 <k_sched_unlock+0x100>)
    8e4c:	4835      	ldr	r0, [pc, #212]	; (8f24 <k_sched_unlock+0x104>)
    8e4e:	f001 fd55 	bl	a8fc <assert_print>
    8e52:	4931      	ldr	r1, [pc, #196]	; (8f18 <k_sched_unlock+0xf8>)
    8e54:	4834      	ldr	r0, [pc, #208]	; (8f28 <k_sched_unlock+0x108>)
    8e56:	f001 fd51 	bl	a8fc <assert_print>
    8e5a:	218e      	movs	r1, #142	; 0x8e
    8e5c:	4630      	mov	r0, r6
    8e5e:	f001 fd46 	bl	a8ee <assert_post_action>
    8e62:	e7eb      	b.n	8e3c <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
    8e64:	4c31      	ldr	r4, [pc, #196]	; (8f2c <k_sched_unlock+0x10c>)
    8e66:	f240 33bb 	movw	r3, #955	; 0x3bb
    8e6a:	4622      	mov	r2, r4
    8e6c:	4930      	ldr	r1, [pc, #192]	; (8f30 <k_sched_unlock+0x110>)
    8e6e:	482d      	ldr	r0, [pc, #180]	; (8f24 <k_sched_unlock+0x104>)
    8e70:	f001 fd44 	bl	a8fc <assert_print>
    8e74:	482f      	ldr	r0, [pc, #188]	; (8f34 <k_sched_unlock+0x114>)
    8e76:	f001 fd41 	bl	a8fc <assert_print>
    8e7a:	f240 31bb 	movw	r1, #955	; 0x3bb
    8e7e:	4620      	mov	r0, r4
    8e80:	f001 fd35 	bl	a8ee <assert_post_action>
    8e84:	e01b      	b.n	8ebe <k_sched_unlock+0x9e>
		__ASSERT(!arch_is_in_isr(), "");
    8e86:	4c29      	ldr	r4, [pc, #164]	; (8f2c <k_sched_unlock+0x10c>)
    8e88:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    8e8c:	4622      	mov	r2, r4
    8e8e:	492a      	ldr	r1, [pc, #168]	; (8f38 <k_sched_unlock+0x118>)
    8e90:	4824      	ldr	r0, [pc, #144]	; (8f24 <k_sched_unlock+0x104>)
    8e92:	f001 fd33 	bl	a8fc <assert_print>
    8e96:	4827      	ldr	r0, [pc, #156]	; (8f34 <k_sched_unlock+0x114>)
    8e98:	f001 fd30 	bl	a8fc <assert_print>
    8e9c:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    8ea0:	4620      	mov	r0, r4
    8ea2:	f001 fd24 	bl	a8ee <assert_post_action>
    8ea6:	e00e      	b.n	8ec6 <k_sched_unlock+0xa6>
	__asm__ volatile(
    8ea8:	f385 8811 	msr	BASEPRI, r5
    8eac:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    8eb0:	2401      	movs	r4, #1
    8eb2:	bb2c      	cbnz	r4, 8f00 <k_sched_unlock+0xe0>
		__ASSERT(_current->base.sched_locked != 0U, "");
    8eb4:	4b21      	ldr	r3, [pc, #132]	; (8f3c <k_sched_unlock+0x11c>)
    8eb6:	689b      	ldr	r3, [r3, #8]
    8eb8:	7bdb      	ldrb	r3, [r3, #15]
    8eba:	2b00      	cmp	r3, #0
    8ebc:	d0d2      	beq.n	8e64 <k_sched_unlock+0x44>
    8ebe:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    8ec2:	2b00      	cmp	r3, #0
    8ec4:	d1df      	bne.n	8e86 <k_sched_unlock+0x66>
		++_current->base.sched_locked;
    8ec6:	4b1d      	ldr	r3, [pc, #116]	; (8f3c <k_sched_unlock+0x11c>)
    8ec8:	689a      	ldr	r2, [r3, #8]
    8eca:	7bd3      	ldrb	r3, [r2, #15]
    8ecc:	3301      	adds	r3, #1
    8ece:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    8ed0:	2000      	movs	r0, #0
    8ed2:	f7ff fabf 	bl	8454 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8ed6:	4810      	ldr	r0, [pc, #64]	; (8f18 <k_sched_unlock+0xf8>)
    8ed8:	f7fe fbbc 	bl	7654 <z_spin_unlock_valid>
    8edc:	2800      	cmp	r0, #0
    8ede:	d1e3      	bne.n	8ea8 <k_sched_unlock+0x88>
    8ee0:	4c0e      	ldr	r4, [pc, #56]	; (8f1c <k_sched_unlock+0xfc>)
    8ee2:	23b9      	movs	r3, #185	; 0xb9
    8ee4:	4622      	mov	r2, r4
    8ee6:	4916      	ldr	r1, [pc, #88]	; (8f40 <k_sched_unlock+0x120>)
    8ee8:	480e      	ldr	r0, [pc, #56]	; (8f24 <k_sched_unlock+0x104>)
    8eea:	f001 fd07 	bl	a8fc <assert_print>
    8eee:	490a      	ldr	r1, [pc, #40]	; (8f18 <k_sched_unlock+0xf8>)
    8ef0:	4814      	ldr	r0, [pc, #80]	; (8f44 <k_sched_unlock+0x124>)
    8ef2:	f001 fd03 	bl	a8fc <assert_print>
    8ef6:	21b9      	movs	r1, #185	; 0xb9
    8ef8:	4620      	mov	r0, r4
    8efa:	f001 fcf8 	bl	a8ee <assert_post_action>
    8efe:	e7d3      	b.n	8ea8 <k_sched_unlock+0x88>
	__asm__ volatile(
    8f00:	f04f 0320 	mov.w	r3, #32
    8f04:	f3ef 8011 	mrs	r0, BASEPRI
    8f08:	f383 8812 	msr	BASEPRI_MAX, r3
    8f0c:	f3bf 8f6f 	isb	sy
    8f10:	f002 feb4 	bl	bc7c <z_reschedule_irqlock>
}
    8f14:	bd70      	pop	{r4, r5, r6, pc}
    8f16:	bf00      	nop
    8f18:	20005250 	.word	0x20005250
    8f1c:	0000c400 	.word	0x0000c400
    8f20:	0000c460 	.word	0x0000c460
    8f24:	0000c254 	.word	0x0000c254
    8f28:	0000c478 	.word	0x0000c478
    8f2c:	0000dd38 	.word	0x0000dd38
    8f30:	0000ddc0 	.word	0x0000ddc0
    8f34:	0000dc90 	.word	0x0000dc90
    8f38:	0000db48 	.word	0x0000db48
    8f3c:	20005214 	.word	0x20005214
    8f40:	0000c430 	.word	0x0000c430
    8f44:	0000c448 	.word	0x0000c448

00008f48 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    8f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    8f4a:	7b43      	ldrb	r3, [r0, #13]
    8f4c:	f013 0f08 	tst.w	r3, #8
    8f50:	d145      	bne.n	8fde <end_thread+0x96>
    8f52:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    8f54:	f043 0308 	orr.w	r3, r3, #8
    8f58:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8f5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    8f5e:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    8f60:	f013 0f80 	tst.w	r3, #128	; 0x80
    8f64:	d12d      	bne.n	8fc2 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    8f66:	68ab      	ldr	r3, [r5, #8]
    8f68:	b15b      	cbz	r3, 8f82 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8f6a:	4628      	mov	r0, r5
    8f6c:	f7ff f870 	bl	8050 <pended_on_thread>
    8f70:	4629      	mov	r1, r5
    8f72:	f7ff fa4b 	bl	840c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8f76:	7b6b      	ldrb	r3, [r5, #13]
    8f78:	f023 0302 	bic.w	r3, r3, #2
    8f7c:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    8f7e:	2300      	movs	r3, #0
    8f80:	60ab      	str	r3, [r5, #8]
    8f82:	f105 0018 	add.w	r0, r5, #24
    8f86:	f000 fca3 	bl	98d0 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    8f8a:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
    8f8e:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8f90:	42bc      	cmp	r4, r7
    8f92:	d01e      	beq.n	8fd2 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8f94:	b1ec      	cbz	r4, 8fd2 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    8f96:	4620      	mov	r0, r4
    8f98:	f7ff f85a 	bl	8050 <pended_on_thread>
    8f9c:	4621      	mov	r1, r4
    8f9e:	f7ff fa35 	bl	840c <z_priq_dumb_remove>
    8fa2:	7b63      	ldrb	r3, [r4, #13]
    8fa4:	f023 0302 	bic.w	r3, r3, #2
    8fa8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    8faa:	2600      	movs	r6, #0
    8fac:	60a6      	str	r6, [r4, #8]
    8fae:	f104 0018 	add.w	r0, r4, #24
    8fb2:	f000 fc8d 	bl	98d0 <z_abort_timeout>
    8fb6:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    8fba:	4620      	mov	r0, r4
    8fbc:	f7ff fba4 	bl	8708 <ready_thread>
    8fc0:	e7e5      	b.n	8f8e <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8fc6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    8fc8:	4601      	mov	r1, r0
    8fca:	4805      	ldr	r0, [pc, #20]	; (8fe0 <end_thread+0x98>)
    8fcc:	f7ff fa1e 	bl	840c <z_priq_dumb_remove>
}
    8fd0:	e7c9      	b.n	8f66 <end_thread+0x1e>
		update_cache(1);
    8fd2:	2001      	movs	r0, #1
    8fd4:	f7ff fa3e 	bl	8454 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    8fd8:	4628      	mov	r0, r5
    8fda:	f7fe fb53 	bl	7684 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    8fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8fe0:	20005234 	.word	0x20005234

00008fe4 <z_unpend1_no_timeout>:
{
    8fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fe6:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    8fe8:	2500      	movs	r5, #0
    8fea:	f04f 0320 	mov.w	r3, #32
    8fee:	f3ef 8711 	mrs	r7, BASEPRI
    8ff2:	f383 8812 	msr	BASEPRI_MAX, r3
    8ff6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8ffa:	4823      	ldr	r0, [pc, #140]	; (9088 <z_unpend1_no_timeout+0xa4>)
    8ffc:	f7fe fb1a 	bl	7634 <z_spin_lock_valid>
    9000:	b120      	cbz	r0, 900c <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
    9002:	4821      	ldr	r0, [pc, #132]	; (9088 <z_unpend1_no_timeout+0xa4>)
    9004:	f7fe fb36 	bl	7674 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    9008:	2400      	movs	r4, #0
	return k;
    900a:	e018      	b.n	903e <z_unpend1_no_timeout+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    900c:	4c1f      	ldr	r4, [pc, #124]	; (908c <z_unpend1_no_timeout+0xa8>)
    900e:	238e      	movs	r3, #142	; 0x8e
    9010:	4622      	mov	r2, r4
    9012:	491f      	ldr	r1, [pc, #124]	; (9090 <z_unpend1_no_timeout+0xac>)
    9014:	481f      	ldr	r0, [pc, #124]	; (9094 <z_unpend1_no_timeout+0xb0>)
    9016:	f001 fc71 	bl	a8fc <assert_print>
    901a:	491b      	ldr	r1, [pc, #108]	; (9088 <z_unpend1_no_timeout+0xa4>)
    901c:	481e      	ldr	r0, [pc, #120]	; (9098 <z_unpend1_no_timeout+0xb4>)
    901e:	f001 fc6d 	bl	a8fc <assert_print>
    9022:	218e      	movs	r1, #142	; 0x8e
    9024:	4620      	mov	r0, r4
    9026:	f001 fc62 	bl	a8ee <assert_post_action>
    902a:	e7ea      	b.n	9002 <z_unpend1_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    902c:	4816      	ldr	r0, [pc, #88]	; (9088 <z_unpend1_no_timeout+0xa4>)
    902e:	f7fe fb11 	bl	7654 <z_spin_unlock_valid>
    9032:	b1b8      	cbz	r0, 9064 <z_unpend1_no_timeout+0x80>
	__asm__ volatile(
    9034:	f387 8811 	msr	BASEPRI, r7
    9038:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    903c:	2501      	movs	r5, #1
    903e:	bb0d      	cbnz	r5, 9084 <z_unpend1_no_timeout+0xa0>
		thread = _priq_wait_best(&wait_q->waitq);
    9040:	4630      	mov	r0, r6
    9042:	f002 fe30 	bl	bca6 <z_priq_dumb_best>
		if (thread != NULL) {
    9046:	4604      	mov	r4, r0
    9048:	2800      	cmp	r0, #0
    904a:	d0ef      	beq.n	902c <z_unpend1_no_timeout+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    904c:	f7ff f800 	bl	8050 <pended_on_thread>
    9050:	4621      	mov	r1, r4
    9052:	f7ff f9db 	bl	840c <z_priq_dumb_remove>
    9056:	7b63      	ldrb	r3, [r4, #13]
    9058:	f023 0302 	bic.w	r3, r3, #2
    905c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    905e:	2300      	movs	r3, #0
    9060:	60a3      	str	r3, [r4, #8]
}
    9062:	e7e3      	b.n	902c <z_unpend1_no_timeout+0x48>
    9064:	4d09      	ldr	r5, [pc, #36]	; (908c <z_unpend1_no_timeout+0xa8>)
    9066:	23b9      	movs	r3, #185	; 0xb9
    9068:	462a      	mov	r2, r5
    906a:	490c      	ldr	r1, [pc, #48]	; (909c <z_unpend1_no_timeout+0xb8>)
    906c:	4809      	ldr	r0, [pc, #36]	; (9094 <z_unpend1_no_timeout+0xb0>)
    906e:	f001 fc45 	bl	a8fc <assert_print>
    9072:	4905      	ldr	r1, [pc, #20]	; (9088 <z_unpend1_no_timeout+0xa4>)
    9074:	480a      	ldr	r0, [pc, #40]	; (90a0 <z_unpend1_no_timeout+0xbc>)
    9076:	f001 fc41 	bl	a8fc <assert_print>
    907a:	21b9      	movs	r1, #185	; 0xb9
    907c:	4628      	mov	r0, r5
    907e:	f001 fc36 	bl	a8ee <assert_post_action>
    9082:	e7d7      	b.n	9034 <z_unpend1_no_timeout+0x50>
}
    9084:	4620      	mov	r0, r4
    9086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9088:	20005250 	.word	0x20005250
    908c:	0000c400 	.word	0x0000c400
    9090:	0000c460 	.word	0x0000c460
    9094:	0000c254 	.word	0x0000c254
    9098:	0000c478 	.word	0x0000c478
    909c:	0000c430 	.word	0x0000c430
    90a0:	0000c448 	.word	0x0000c448

000090a4 <z_unpend_first_thread>:
{
    90a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    90a6:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    90a8:	2500      	movs	r5, #0
	__asm__ volatile(
    90aa:	f04f 0320 	mov.w	r3, #32
    90ae:	f3ef 8711 	mrs	r7, BASEPRI
    90b2:	f383 8812 	msr	BASEPRI_MAX, r3
    90b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    90ba:	4825      	ldr	r0, [pc, #148]	; (9150 <z_unpend_first_thread+0xac>)
    90bc:	f7fe faba 	bl	7634 <z_spin_lock_valid>
    90c0:	b120      	cbz	r0, 90cc <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
    90c2:	4823      	ldr	r0, [pc, #140]	; (9150 <z_unpend_first_thread+0xac>)
    90c4:	f7fe fad6 	bl	7674 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
    90c8:	2400      	movs	r4, #0
	return k;
    90ca:	e018      	b.n	90fe <z_unpend_first_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    90cc:	4c21      	ldr	r4, [pc, #132]	; (9154 <z_unpend_first_thread+0xb0>)
    90ce:	238e      	movs	r3, #142	; 0x8e
    90d0:	4622      	mov	r2, r4
    90d2:	4921      	ldr	r1, [pc, #132]	; (9158 <z_unpend_first_thread+0xb4>)
    90d4:	4821      	ldr	r0, [pc, #132]	; (915c <z_unpend_first_thread+0xb8>)
    90d6:	f001 fc11 	bl	a8fc <assert_print>
    90da:	491d      	ldr	r1, [pc, #116]	; (9150 <z_unpend_first_thread+0xac>)
    90dc:	4820      	ldr	r0, [pc, #128]	; (9160 <z_unpend_first_thread+0xbc>)
    90de:	f001 fc0d 	bl	a8fc <assert_print>
    90e2:	218e      	movs	r1, #142	; 0x8e
    90e4:	4620      	mov	r0, r4
    90e6:	f001 fc02 	bl	a8ee <assert_post_action>
    90ea:	e7ea      	b.n	90c2 <z_unpend_first_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    90ec:	4818      	ldr	r0, [pc, #96]	; (9150 <z_unpend_first_thread+0xac>)
    90ee:	f7fe fab1 	bl	7654 <z_spin_unlock_valid>
    90f2:	b1d8      	cbz	r0, 912c <z_unpend_first_thread+0x88>
	__asm__ volatile(
    90f4:	f387 8811 	msr	BASEPRI, r7
    90f8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    90fc:	2501      	movs	r5, #1
    90fe:	bb2d      	cbnz	r5, 914c <z_unpend_first_thread+0xa8>
		thread = _priq_wait_best(&wait_q->waitq);
    9100:	4630      	mov	r0, r6
    9102:	f002 fdd0 	bl	bca6 <z_priq_dumb_best>
		if (thread != NULL) {
    9106:	4604      	mov	r4, r0
    9108:	2800      	cmp	r0, #0
    910a:	d0ef      	beq.n	90ec <z_unpend_first_thread+0x48>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    910c:	f7fe ffa0 	bl	8050 <pended_on_thread>
    9110:	4621      	mov	r1, r4
    9112:	f7ff f97b 	bl	840c <z_priq_dumb_remove>
    9116:	7b63      	ldrb	r3, [r4, #13]
    9118:	f023 0302 	bic.w	r3, r3, #2
    911c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    911e:	2300      	movs	r3, #0
    9120:	60a3      	str	r3, [r4, #8]
    9122:	f104 0018 	add.w	r0, r4, #24
    9126:	f000 fbd3 	bl	98d0 <z_abort_timeout>
    912a:	e7df      	b.n	90ec <z_unpend_first_thread+0x48>
    912c:	4d09      	ldr	r5, [pc, #36]	; (9154 <z_unpend_first_thread+0xb0>)
    912e:	23b9      	movs	r3, #185	; 0xb9
    9130:	462a      	mov	r2, r5
    9132:	490c      	ldr	r1, [pc, #48]	; (9164 <z_unpend_first_thread+0xc0>)
    9134:	4809      	ldr	r0, [pc, #36]	; (915c <z_unpend_first_thread+0xb8>)
    9136:	f001 fbe1 	bl	a8fc <assert_print>
    913a:	4905      	ldr	r1, [pc, #20]	; (9150 <z_unpend_first_thread+0xac>)
    913c:	480a      	ldr	r0, [pc, #40]	; (9168 <z_unpend_first_thread+0xc4>)
    913e:	f001 fbdd 	bl	a8fc <assert_print>
    9142:	21b9      	movs	r1, #185	; 0xb9
    9144:	4628      	mov	r0, r5
    9146:	f001 fbd2 	bl	a8ee <assert_post_action>
    914a:	e7d3      	b.n	90f4 <z_unpend_first_thread+0x50>
}
    914c:	4620      	mov	r0, r4
    914e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9150:	20005250 	.word	0x20005250
    9154:	0000c400 	.word	0x0000c400
    9158:	0000c460 	.word	0x0000c460
    915c:	0000c254 	.word	0x0000c254
    9160:	0000c478 	.word	0x0000c478
    9164:	0000c430 	.word	0x0000c430
    9168:	0000c448 	.word	0x0000c448

0000916c <z_sched_init>:
{
    916c:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    916e:	4804      	ldr	r0, [pc, #16]	; (9180 <z_sched_init+0x14>)
    9170:	f002 fda0 	bl	bcb4 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    9174:	2100      	movs	r1, #0
    9176:	4608      	mov	r0, r1
    9178:	f7fe ffa8 	bl	80cc <k_sched_time_slice_set>
}
    917c:	bd08      	pop	{r3, pc}
    917e:	bf00      	nop
    9180:	20005230 	.word	0x20005230

00009184 <z_impl_k_yield>:
{
    9184:	b570      	push	{r4, r5, r6, lr}
    9186:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    918a:	2b00      	cmp	r3, #0
    918c:	d149      	bne.n	9222 <z_impl_k_yield+0x9e>
	__asm__ volatile(
    918e:	f04f 0320 	mov.w	r3, #32
    9192:	f3ef 8611 	mrs	r6, BASEPRI
    9196:	f383 8812 	msr	BASEPRI_MAX, r3
    919a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    919e:	4843      	ldr	r0, [pc, #268]	; (92ac <z_impl_k_yield+0x128>)
    91a0:	f7fe fa48 	bl	7634 <z_spin_lock_valid>
    91a4:	2800      	cmp	r0, #0
    91a6:	d04d      	beq.n	9244 <z_impl_k_yield+0xc0>
	z_spin_lock_set_owner(l);
    91a8:	4840      	ldr	r0, [pc, #256]	; (92ac <z_impl_k_yield+0x128>)
    91aa:	f7fe fa63 	bl	7674 <z_spin_lock_set_owner>
		dequeue_thread(_current);
    91ae:	4c40      	ldr	r4, [pc, #256]	; (92b0 <z_impl_k_yield+0x12c>)
    91b0:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    91b2:	7b4b      	ldrb	r3, [r1, #13]
    91b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    91b8:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    91ba:	f104 0020 	add.w	r0, r4, #32
    91be:	f7ff f925 	bl	840c <z_priq_dumb_remove>
	queue_thread(_current);
    91c2:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    91c4:	7b6b      	ldrb	r3, [r5, #13]
    91c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    91ca:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    91cc:	4b39      	ldr	r3, [pc, #228]	; (92b4 <z_impl_k_yield+0x130>)
    91ce:	429d      	cmp	r5, r3
    91d0:	d048      	beq.n	9264 <z_impl_k_yield+0xe0>
	return list->head == list;
    91d2:	4b37      	ldr	r3, [pc, #220]	; (92b0 <z_impl_k_yield+0x12c>)
    91d4:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    91d8:	429c      	cmp	r4, r3
    91da:	d055      	beq.n	9288 <z_impl_k_yield+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    91dc:	b16c      	cbz	r4, 91fa <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    91de:	4621      	mov	r1, r4
    91e0:	4628      	mov	r0, r5
    91e2:	f002 fd41 	bl	bc68 <z_sched_prio_cmp>
    91e6:	2800      	cmp	r0, #0
    91e8:	dc48      	bgt.n	927c <z_impl_k_yield+0xf8>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    91ea:	b134      	cbz	r4, 91fa <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
    91ec:	4b30      	ldr	r3, [pc, #192]	; (92b0 <z_impl_k_yield+0x12c>)
    91ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    91f0:	429c      	cmp	r4, r3
    91f2:	d002      	beq.n	91fa <z_impl_k_yield+0x76>
    91f4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    91f6:	2c00      	cmp	r4, #0
    91f8:	d1f0      	bne.n	91dc <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
    91fa:	4b2d      	ldr	r3, [pc, #180]	; (92b0 <z_impl_k_yield+0x12c>)
    91fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    91fe:	f103 0120 	add.w	r1, r3, #32
    9202:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    9204:	606a      	str	r2, [r5, #4]
	tail->next = node;
    9206:	6015      	str	r5, [r2, #0]
	list->tail = node;
    9208:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    920a:	2001      	movs	r0, #1
    920c:	f7ff f922 	bl	8454 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9210:	4826      	ldr	r0, [pc, #152]	; (92ac <z_impl_k_yield+0x128>)
    9212:	f7fe fa1f 	bl	7654 <z_spin_unlock_valid>
    9216:	2800      	cmp	r0, #0
    9218:	d038      	beq.n	928c <z_impl_k_yield+0x108>
    921a:	4630      	mov	r0, r6
    921c:	f7f9 fe1e 	bl	2e5c <arch_swap>
}
    9220:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    9222:	4c25      	ldr	r4, [pc, #148]	; (92b8 <z_impl_k_yield+0x134>)
    9224:	f240 5332 	movw	r3, #1330	; 0x532
    9228:	4622      	mov	r2, r4
    922a:	4924      	ldr	r1, [pc, #144]	; (92bc <z_impl_k_yield+0x138>)
    922c:	4824      	ldr	r0, [pc, #144]	; (92c0 <z_impl_k_yield+0x13c>)
    922e:	f001 fb65 	bl	a8fc <assert_print>
    9232:	4824      	ldr	r0, [pc, #144]	; (92c4 <z_impl_k_yield+0x140>)
    9234:	f001 fb62 	bl	a8fc <assert_print>
    9238:	f240 5132 	movw	r1, #1330	; 0x532
    923c:	4620      	mov	r0, r4
    923e:	f001 fb56 	bl	a8ee <assert_post_action>
    9242:	e7a4      	b.n	918e <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9244:	4c20      	ldr	r4, [pc, #128]	; (92c8 <z_impl_k_yield+0x144>)
    9246:	238e      	movs	r3, #142	; 0x8e
    9248:	4622      	mov	r2, r4
    924a:	4920      	ldr	r1, [pc, #128]	; (92cc <z_impl_k_yield+0x148>)
    924c:	481c      	ldr	r0, [pc, #112]	; (92c0 <z_impl_k_yield+0x13c>)
    924e:	f001 fb55 	bl	a8fc <assert_print>
    9252:	4916      	ldr	r1, [pc, #88]	; (92ac <z_impl_k_yield+0x128>)
    9254:	481e      	ldr	r0, [pc, #120]	; (92d0 <z_impl_k_yield+0x14c>)
    9256:	f001 fb51 	bl	a8fc <assert_print>
    925a:	218e      	movs	r1, #142	; 0x8e
    925c:	4620      	mov	r0, r4
    925e:	f001 fb46 	bl	a8ee <assert_post_action>
    9262:	e7a1      	b.n	91a8 <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    9264:	4c14      	ldr	r4, [pc, #80]	; (92b8 <z_impl_k_yield+0x134>)
    9266:	23ba      	movs	r3, #186	; 0xba
    9268:	4622      	mov	r2, r4
    926a:	491a      	ldr	r1, [pc, #104]	; (92d4 <z_impl_k_yield+0x150>)
    926c:	4814      	ldr	r0, [pc, #80]	; (92c0 <z_impl_k_yield+0x13c>)
    926e:	f001 fb45 	bl	a8fc <assert_print>
    9272:	21ba      	movs	r1, #186	; 0xba
    9274:	4620      	mov	r0, r4
    9276:	f001 fb3a 	bl	a8ee <assert_post_action>
    927a:	e7aa      	b.n	91d2 <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
    927c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    927e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    9280:	602c      	str	r4, [r5, #0]
	prev->next = node;
    9282:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    9284:	6065      	str	r5, [r4, #4]
}
    9286:	e7c0      	b.n	920a <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9288:	2400      	movs	r4, #0
    928a:	e7a7      	b.n	91dc <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    928c:	4c0e      	ldr	r4, [pc, #56]	; (92c8 <z_impl_k_yield+0x144>)
    928e:	23d0      	movs	r3, #208	; 0xd0
    9290:	4622      	mov	r2, r4
    9292:	4911      	ldr	r1, [pc, #68]	; (92d8 <z_impl_k_yield+0x154>)
    9294:	480a      	ldr	r0, [pc, #40]	; (92c0 <z_impl_k_yield+0x13c>)
    9296:	f001 fb31 	bl	a8fc <assert_print>
    929a:	4904      	ldr	r1, [pc, #16]	; (92ac <z_impl_k_yield+0x128>)
    929c:	480f      	ldr	r0, [pc, #60]	; (92dc <z_impl_k_yield+0x158>)
    929e:	f001 fb2d 	bl	a8fc <assert_print>
    92a2:	21d0      	movs	r1, #208	; 0xd0
    92a4:	4620      	mov	r0, r4
    92a6:	f001 fb22 	bl	a8ee <assert_post_action>
    92aa:	e7b6      	b.n	921a <z_impl_k_yield+0x96>
    92ac:	20005250 	.word	0x20005250
    92b0:	20005214 	.word	0x20005214
    92b4:	20004570 	.word	0x20004570
    92b8:	0000dd38 	.word	0x0000dd38
    92bc:	0000db48 	.word	0x0000db48
    92c0:	0000c254 	.word	0x0000c254
    92c4:	0000dc90 	.word	0x0000dc90
    92c8:	0000c400 	.word	0x0000c400
    92cc:	0000c460 	.word	0x0000c460
    92d0:	0000c478 	.word	0x0000c478
    92d4:	0000dd74 	.word	0x0000dd74
    92d8:	0000c430 	.word	0x0000c430
    92dc:	0000c448 	.word	0x0000c448

000092e0 <z_tick_sleep>:
{
    92e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    92e4:	4604      	mov	r4, r0
    92e6:	460e      	mov	r6, r1
    92e8:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    92ec:	2b00      	cmp	r3, #0
    92ee:	d14e      	bne.n	938e <z_tick_sleep+0xae>
	if (ticks == 0) {
    92f0:	ea54 0306 	orrs.w	r3, r4, r6
    92f4:	d05c      	beq.n	93b0 <z_tick_sleep+0xd0>
	if (Z_TICK_ABS(ticks) <= 0) {
    92f6:	f06f 0301 	mvn.w	r3, #1
    92fa:	1b1b      	subs	r3, r3, r4
    92fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9300:	eb62 0206 	sbc.w	r2, r2, r6
    9304:	2b01      	cmp	r3, #1
    9306:	f172 0300 	sbcs.w	r3, r2, #0
    930a:	db55      	blt.n	93b8 <z_tick_sleep+0xd8>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    930c:	f06f 0501 	mvn.w	r5, #1
    9310:	1b2d      	subs	r5, r5, r4
    9312:	f04f 0320 	mov.w	r3, #32
    9316:	f3ef 8911 	mrs	r9, BASEPRI
    931a:	f383 8812 	msr	BASEPRI_MAX, r3
    931e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9322:	4840      	ldr	r0, [pc, #256]	; (9424 <z_tick_sleep+0x144>)
    9324:	f7fe f986 	bl	7634 <z_spin_lock_valid>
    9328:	2800      	cmp	r0, #0
    932a:	d049      	beq.n	93c0 <z_tick_sleep+0xe0>
	z_spin_lock_set_owner(l);
    932c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 9424 <z_tick_sleep+0x144>
    9330:	4640      	mov	r0, r8
    9332:	f7fe f99f 	bl	7674 <z_spin_lock_set_owner>
	pending_current = _current;
    9336:	4f3c      	ldr	r7, [pc, #240]	; (9428 <z_tick_sleep+0x148>)
    9338:	68b8      	ldr	r0, [r7, #8]
    933a:	4b3c      	ldr	r3, [pc, #240]	; (942c <z_tick_sleep+0x14c>)
    933c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    933e:	f7ff fb5b 	bl	89f8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    9342:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    9344:	4622      	mov	r2, r4
    9346:	4633      	mov	r3, r6
    9348:	4939      	ldr	r1, [pc, #228]	; (9430 <z_tick_sleep+0x150>)
    934a:	3018      	adds	r0, #24
    934c:	f000 f9dc 	bl	9708 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    9350:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    9352:	7b53      	ldrb	r3, [r2, #13]
    9354:	f043 0310 	orr.w	r3, r3, #16
    9358:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    935a:	4640      	mov	r0, r8
    935c:	f7fe f97a 	bl	7654 <z_spin_unlock_valid>
    9360:	2800      	cmp	r0, #0
    9362:	d03d      	beq.n	93e0 <z_tick_sleep+0x100>
    9364:	4648      	mov	r0, r9
    9366:	f7f9 fd79 	bl	2e5c <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    936a:	4b2f      	ldr	r3, [pc, #188]	; (9428 <z_tick_sleep+0x148>)
    936c:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
    936e:	7b5b      	ldrb	r3, [r3, #13]
    9370:	f013 0f10 	tst.w	r3, #16
    9374:	d144      	bne.n	9400 <z_tick_sleep+0x120>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    9376:	f002 fcb8 	bl	bcea <sys_clock_tick_get_32>
    937a:	1a28      	subs	r0, r5, r0
    937c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    9380:	2801      	cmp	r0, #1
    9382:	f173 0300 	sbcs.w	r3, r3, #0
    9386:	da00      	bge.n	938a <z_tick_sleep+0xaa>
	return 0;
    9388:	2000      	movs	r0, #0
}
    938a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
    938e:	4d29      	ldr	r5, [pc, #164]	; (9434 <z_tick_sleep+0x154>)
    9390:	f240 534e 	movw	r3, #1358	; 0x54e
    9394:	462a      	mov	r2, r5
    9396:	4928      	ldr	r1, [pc, #160]	; (9438 <z_tick_sleep+0x158>)
    9398:	4828      	ldr	r0, [pc, #160]	; (943c <z_tick_sleep+0x15c>)
    939a:	f001 faaf 	bl	a8fc <assert_print>
    939e:	4828      	ldr	r0, [pc, #160]	; (9440 <z_tick_sleep+0x160>)
    93a0:	f001 faac 	bl	a8fc <assert_print>
    93a4:	f240 514e 	movw	r1, #1358	; 0x54e
    93a8:	4628      	mov	r0, r5
    93aa:	f001 faa0 	bl	a8ee <assert_post_action>
    93ae:	e79f      	b.n	92f0 <z_tick_sleep+0x10>
	z_impl_k_yield();
    93b0:	f7ff fee8 	bl	9184 <z_impl_k_yield>
		return 0;
    93b4:	2000      	movs	r0, #0
    93b6:	e7e8      	b.n	938a <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    93b8:	f002 fc97 	bl	bcea <sys_clock_tick_get_32>
    93bc:	1905      	adds	r5, r0, r4
    93be:	e7a8      	b.n	9312 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    93c0:	4f20      	ldr	r7, [pc, #128]	; (9444 <z_tick_sleep+0x164>)
    93c2:	238e      	movs	r3, #142	; 0x8e
    93c4:	463a      	mov	r2, r7
    93c6:	4920      	ldr	r1, [pc, #128]	; (9448 <z_tick_sleep+0x168>)
    93c8:	481c      	ldr	r0, [pc, #112]	; (943c <z_tick_sleep+0x15c>)
    93ca:	f001 fa97 	bl	a8fc <assert_print>
    93ce:	4915      	ldr	r1, [pc, #84]	; (9424 <z_tick_sleep+0x144>)
    93d0:	481e      	ldr	r0, [pc, #120]	; (944c <z_tick_sleep+0x16c>)
    93d2:	f001 fa93 	bl	a8fc <assert_print>
    93d6:	218e      	movs	r1, #142	; 0x8e
    93d8:	4638      	mov	r0, r7
    93da:	f001 fa88 	bl	a8ee <assert_post_action>
    93de:	e7a5      	b.n	932c <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    93e0:	4c18      	ldr	r4, [pc, #96]	; (9444 <z_tick_sleep+0x164>)
    93e2:	23d0      	movs	r3, #208	; 0xd0
    93e4:	4622      	mov	r2, r4
    93e6:	491a      	ldr	r1, [pc, #104]	; (9450 <z_tick_sleep+0x170>)
    93e8:	4814      	ldr	r0, [pc, #80]	; (943c <z_tick_sleep+0x15c>)
    93ea:	f001 fa87 	bl	a8fc <assert_print>
    93ee:	4641      	mov	r1, r8
    93f0:	4818      	ldr	r0, [pc, #96]	; (9454 <z_tick_sleep+0x174>)
    93f2:	f001 fa83 	bl	a8fc <assert_print>
    93f6:	21d0      	movs	r1, #208	; 0xd0
    93f8:	4620      	mov	r0, r4
    93fa:	f001 fa78 	bl	a8ee <assert_post_action>
    93fe:	e7b1      	b.n	9364 <z_tick_sleep+0x84>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    9400:	4c0c      	ldr	r4, [pc, #48]	; (9434 <z_tick_sleep+0x154>)
    9402:	f240 536f 	movw	r3, #1391	; 0x56f
    9406:	4622      	mov	r2, r4
    9408:	4913      	ldr	r1, [pc, #76]	; (9458 <z_tick_sleep+0x178>)
    940a:	480c      	ldr	r0, [pc, #48]	; (943c <z_tick_sleep+0x15c>)
    940c:	f001 fa76 	bl	a8fc <assert_print>
    9410:	480b      	ldr	r0, [pc, #44]	; (9440 <z_tick_sleep+0x160>)
    9412:	f001 fa73 	bl	a8fc <assert_print>
    9416:	f240 516f 	movw	r1, #1391	; 0x56f
    941a:	4620      	mov	r0, r4
    941c:	f001 fa67 	bl	a8ee <assert_post_action>
    9420:	e7a9      	b.n	9376 <z_tick_sleep+0x96>
    9422:	bf00      	nop
    9424:	20005250 	.word	0x20005250
    9428:	20005214 	.word	0x20005214
    942c:	2000524c 	.word	0x2000524c
    9430:	00008911 	.word	0x00008911
    9434:	0000dd38 	.word	0x0000dd38
    9438:	0000db48 	.word	0x0000db48
    943c:	0000c254 	.word	0x0000c254
    9440:	0000dc90 	.word	0x0000dc90
    9444:	0000c400 	.word	0x0000c400
    9448:	0000c460 	.word	0x0000c460
    944c:	0000c478 	.word	0x0000c478
    9450:	0000c430 	.word	0x0000c430
    9454:	0000c448 	.word	0x0000c448
    9458:	0000ddf4 	.word	0x0000ddf4

0000945c <z_impl_k_sleep>:
{
    945c:	b570      	push	{r4, r5, r6, lr}
    945e:	4605      	mov	r5, r0
    9460:	460c      	mov	r4, r1
    9462:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    9466:	bb13      	cbnz	r3, 94ae <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9468:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    946c:	bf08      	it	eq
    946e:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    9472:	d02d      	beq.n	94d0 <z_impl_k_sleep+0x74>
	ticks = z_tick_sleep(ticks);
    9474:	4628      	mov	r0, r5
    9476:	4621      	mov	r1, r4
    9478:	f7ff ff32 	bl	92e0 <z_tick_sleep>
    947c:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    947e:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    9480:	0151      	lsls	r1, r2, #5
    9482:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    9486:	0143      	lsls	r3, r0, #5
    9488:	1a1b      	subs	r3, r3, r0
    948a:	eb61 0102 	sbc.w	r1, r1, r2
    948e:	0088      	lsls	r0, r1, #2
    9490:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
    9494:	009b      	lsls	r3, r3, #2
    9496:	eb13 030c 	adds.w	r3, r3, ip
    949a:	eb42 0000 	adc.w	r0, r2, r0
    949e:	00c0      	lsls	r0, r0, #3
    94a0:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
    94a4:	f3c3 3310 	ubfx	r3, r3, #12, #17
    94a8:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
    94ac:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
    94ae:	4e0c      	ldr	r6, [pc, #48]	; (94e0 <z_impl_k_sleep+0x84>)
    94b0:	f240 537e 	movw	r3, #1406	; 0x57e
    94b4:	4632      	mov	r2, r6
    94b6:	490b      	ldr	r1, [pc, #44]	; (94e4 <z_impl_k_sleep+0x88>)
    94b8:	480b      	ldr	r0, [pc, #44]	; (94e8 <z_impl_k_sleep+0x8c>)
    94ba:	f001 fa1f 	bl	a8fc <assert_print>
    94be:	480b      	ldr	r0, [pc, #44]	; (94ec <z_impl_k_sleep+0x90>)
    94c0:	f001 fa1c 	bl	a8fc <assert_print>
    94c4:	f240 517e 	movw	r1, #1406	; 0x57e
    94c8:	4630      	mov	r0, r6
    94ca:	f001 fa10 	bl	a8ee <assert_post_action>
    94ce:	e7cb      	b.n	9468 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
    94d0:	4b07      	ldr	r3, [pc, #28]	; (94f0 <z_impl_k_sleep+0x94>)
    94d2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    94d4:	f7ff fc28 	bl	8d28 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    94d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    94dc:	e7e6      	b.n	94ac <z_impl_k_sleep+0x50>
    94de:	bf00      	nop
    94e0:	0000dd38 	.word	0x0000dd38
    94e4:	0000db48 	.word	0x0000db48
    94e8:	0000c254 	.word	0x0000c254
    94ec:	0000dc90 	.word	0x0000dc90
    94f0:	20005214 	.word	0x20005214

000094f4 <z_impl_z_current_get>:
}
    94f4:	4b01      	ldr	r3, [pc, #4]	; (94fc <z_impl_z_current_get+0x8>)
    94f6:	6898      	ldr	r0, [r3, #8]
    94f8:	4770      	bx	lr
    94fa:	bf00      	nop
    94fc:	20005214 	.word	0x20005214

00009500 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    9500:	b570      	push	{r4, r5, r6, lr}
    9502:	4604      	mov	r4, r0
    9504:	f04f 0320 	mov.w	r3, #32
    9508:	f3ef 8511 	mrs	r5, BASEPRI
    950c:	f383 8812 	msr	BASEPRI_MAX, r3
    9510:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9514:	4840      	ldr	r0, [pc, #256]	; (9618 <z_thread_abort+0x118>)
    9516:	f7fe f88d 	bl	7634 <z_spin_lock_valid>
    951a:	b1b8      	cbz	r0, 954c <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
    951c:	483e      	ldr	r0, [pc, #248]	; (9618 <z_thread_abort+0x118>)
    951e:	f7fe f8a9 	bl	7674 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    9522:	7b63      	ldrb	r3, [r4, #13]
    9524:	f013 0f08 	tst.w	r3, #8
    9528:	d120      	bne.n	956c <z_thread_abort+0x6c>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    952a:	4620      	mov	r0, r4
    952c:	f7ff fd0c 	bl	8f48 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    9530:	4b3a      	ldr	r3, [pc, #232]	; (961c <z_thread_abort+0x11c>)
    9532:	689b      	ldr	r3, [r3, #8]
    9534:	42a3      	cmp	r3, r4
    9536:	d032      	beq.n	959e <z_thread_abort+0x9e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9538:	4837      	ldr	r0, [pc, #220]	; (9618 <z_thread_abort+0x118>)
    953a:	f7fe f88b 	bl	7654 <z_spin_unlock_valid>
    953e:	2800      	cmp	r0, #0
    9540:	d059      	beq.n	95f6 <z_thread_abort+0xf6>
	__asm__ volatile(
    9542:	f385 8811 	msr	BASEPRI, r5
    9546:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    954a:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    954c:	4e34      	ldr	r6, [pc, #208]	; (9620 <z_thread_abort+0x120>)
    954e:	238e      	movs	r3, #142	; 0x8e
    9550:	4632      	mov	r2, r6
    9552:	4934      	ldr	r1, [pc, #208]	; (9624 <z_thread_abort+0x124>)
    9554:	4834      	ldr	r0, [pc, #208]	; (9628 <z_thread_abort+0x128>)
    9556:	f001 f9d1 	bl	a8fc <assert_print>
    955a:	492f      	ldr	r1, [pc, #188]	; (9618 <z_thread_abort+0x118>)
    955c:	4833      	ldr	r0, [pc, #204]	; (962c <z_thread_abort+0x12c>)
    955e:	f001 f9cd 	bl	a8fc <assert_print>
    9562:	218e      	movs	r1, #142	; 0x8e
    9564:	4630      	mov	r0, r6
    9566:	f001 f9c2 	bl	a8ee <assert_post_action>
    956a:	e7d7      	b.n	951c <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    956c:	482a      	ldr	r0, [pc, #168]	; (9618 <z_thread_abort+0x118>)
    956e:	f7fe f871 	bl	7654 <z_spin_unlock_valid>
    9572:	b120      	cbz	r0, 957e <z_thread_abort+0x7e>
    9574:	f385 8811 	msr	BASEPRI, r5
    9578:	f3bf 8f6f 	isb	sy
		return;
    957c:	e7e5      	b.n	954a <z_thread_abort+0x4a>
    957e:	4c28      	ldr	r4, [pc, #160]	; (9620 <z_thread_abort+0x120>)
    9580:	23b9      	movs	r3, #185	; 0xb9
    9582:	4622      	mov	r2, r4
    9584:	492a      	ldr	r1, [pc, #168]	; (9630 <z_thread_abort+0x130>)
    9586:	4828      	ldr	r0, [pc, #160]	; (9628 <z_thread_abort+0x128>)
    9588:	f001 f9b8 	bl	a8fc <assert_print>
    958c:	4922      	ldr	r1, [pc, #136]	; (9618 <z_thread_abort+0x118>)
    958e:	4829      	ldr	r0, [pc, #164]	; (9634 <z_thread_abort+0x134>)
    9590:	f001 f9b4 	bl	a8fc <assert_print>
    9594:	21b9      	movs	r1, #185	; 0xb9
    9596:	4620      	mov	r0, r4
    9598:	f001 f9a9 	bl	a8ee <assert_post_action>
    959c:	e7ea      	b.n	9574 <z_thread_abort+0x74>
    959e:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
    95a2:	2b00      	cmp	r3, #0
    95a4:	d1c8      	bne.n	9538 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    95a6:	481c      	ldr	r0, [pc, #112]	; (9618 <z_thread_abort+0x118>)
    95a8:	f7fe f854 	bl	7654 <z_spin_unlock_valid>
    95ac:	b198      	cbz	r0, 95d6 <z_thread_abort+0xd6>
    95ae:	4628      	mov	r0, r5
    95b0:	f7f9 fc54 	bl	2e5c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    95b4:	4c20      	ldr	r4, [pc, #128]	; (9638 <z_thread_abort+0x138>)
    95b6:	f240 63ac 	movw	r3, #1708	; 0x6ac
    95ba:	4622      	mov	r2, r4
    95bc:	491f      	ldr	r1, [pc, #124]	; (963c <z_thread_abort+0x13c>)
    95be:	481a      	ldr	r0, [pc, #104]	; (9628 <z_thread_abort+0x128>)
    95c0:	f001 f99c 	bl	a8fc <assert_print>
    95c4:	481e      	ldr	r0, [pc, #120]	; (9640 <z_thread_abort+0x140>)
    95c6:	f001 f999 	bl	a8fc <assert_print>
    95ca:	f240 61ac 	movw	r1, #1708	; 0x6ac
    95ce:	4620      	mov	r0, r4
    95d0:	f001 f98d 	bl	a8ee <assert_post_action>
    95d4:	e7b0      	b.n	9538 <z_thread_abort+0x38>
    95d6:	4c12      	ldr	r4, [pc, #72]	; (9620 <z_thread_abort+0x120>)
    95d8:	23d0      	movs	r3, #208	; 0xd0
    95da:	4622      	mov	r2, r4
    95dc:	4914      	ldr	r1, [pc, #80]	; (9630 <z_thread_abort+0x130>)
    95de:	4812      	ldr	r0, [pc, #72]	; (9628 <z_thread_abort+0x128>)
    95e0:	f001 f98c 	bl	a8fc <assert_print>
    95e4:	490c      	ldr	r1, [pc, #48]	; (9618 <z_thread_abort+0x118>)
    95e6:	4813      	ldr	r0, [pc, #76]	; (9634 <z_thread_abort+0x134>)
    95e8:	f001 f988 	bl	a8fc <assert_print>
    95ec:	21d0      	movs	r1, #208	; 0xd0
    95ee:	4620      	mov	r0, r4
    95f0:	f001 f97d 	bl	a8ee <assert_post_action>
    95f4:	e7db      	b.n	95ae <z_thread_abort+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    95f6:	4c0a      	ldr	r4, [pc, #40]	; (9620 <z_thread_abort+0x120>)
    95f8:	23b9      	movs	r3, #185	; 0xb9
    95fa:	4622      	mov	r2, r4
    95fc:	490c      	ldr	r1, [pc, #48]	; (9630 <z_thread_abort+0x130>)
    95fe:	480a      	ldr	r0, [pc, #40]	; (9628 <z_thread_abort+0x128>)
    9600:	f001 f97c 	bl	a8fc <assert_print>
    9604:	4904      	ldr	r1, [pc, #16]	; (9618 <z_thread_abort+0x118>)
    9606:	480b      	ldr	r0, [pc, #44]	; (9634 <z_thread_abort+0x134>)
    9608:	f001 f978 	bl	a8fc <assert_print>
    960c:	21b9      	movs	r1, #185	; 0xb9
    960e:	4620      	mov	r0, r4
    9610:	f001 f96d 	bl	a8ee <assert_post_action>
    9614:	e795      	b.n	9542 <z_thread_abort+0x42>
    9616:	bf00      	nop
    9618:	20005250 	.word	0x20005250
    961c:	20005214 	.word	0x20005214
    9620:	0000c400 	.word	0x0000c400
    9624:	0000c460 	.word	0x0000c460
    9628:	0000c254 	.word	0x0000c254
    962c:	0000c478 	.word	0x0000c478
    9630:	0000c430 	.word	0x0000c430
    9634:	0000c448 	.word	0x0000c448
    9638:	0000dd38 	.word	0x0000dd38
    963c:	0000c914 	.word	0x0000c914
    9640:	0000de34 	.word	0x0000de34

00009644 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    9644:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    9646:	4806      	ldr	r0, [pc, #24]	; (9660 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    9648:	4a06      	ldr	r2, [pc, #24]	; (9664 <z_data_copy+0x20>)
    964a:	1a12      	subs	r2, r2, r0
    964c:	4906      	ldr	r1, [pc, #24]	; (9668 <z_data_copy+0x24>)
    964e:	f002 fa93 	bl	bb78 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    9652:	4a06      	ldr	r2, [pc, #24]	; (966c <z_data_copy+0x28>)
    9654:	4906      	ldr	r1, [pc, #24]	; (9670 <z_data_copy+0x2c>)
    9656:	4807      	ldr	r0, [pc, #28]	; (9674 <z_data_copy+0x30>)
    9658:	f002 fa8e 	bl	bb78 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    965c:	bd08      	pop	{r3, pc}
    965e:	bf00      	nop
    9660:	20000000 	.word	0x20000000
    9664:	20004240 	.word	0x20004240
    9668:	0000e0fc 	.word	0x0000e0fc
    966c:	00000000 	.word	0x00000000
    9670:	0000e0fc 	.word	0x0000e0fc
    9674:	20000000 	.word	0x20000000

00009678 <first>:
	return list->head == list;
    9678:	4b03      	ldr	r3, [pc, #12]	; (9688 <first+0x10>)
    967a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    967c:	4298      	cmp	r0, r3
    967e:	d000      	beq.n	9682 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    9680:	4770      	bx	lr
    9682:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    9684:	e7fc      	b.n	9680 <first+0x8>
    9686:	bf00      	nop
    9688:	200040e4 	.word	0x200040e4

0000968c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    968c:	b130      	cbz	r0, 969c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    968e:	4a04      	ldr	r2, [pc, #16]	; (96a0 <next+0x14>)
    9690:	6852      	ldr	r2, [r2, #4]
    9692:	4290      	cmp	r0, r2
    9694:	d001      	beq.n	969a <next+0xe>
    9696:	6800      	ldr	r0, [r0, #0]
    9698:	4770      	bx	lr
    969a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    969c:	4770      	bx	lr
    969e:	bf00      	nop
    96a0:	200040e4 	.word	0x200040e4

000096a4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    96a4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    96a6:	4b04      	ldr	r3, [pc, #16]	; (96b8 <elapsed+0x14>)
    96a8:	681b      	ldr	r3, [r3, #0]
    96aa:	b10b      	cbz	r3, 96b0 <elapsed+0xc>
    96ac:	2000      	movs	r0, #0
}
    96ae:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    96b0:	f7fb fc58 	bl	4f64 <sys_clock_elapsed>
    96b4:	e7fb      	b.n	96ae <elapsed+0xa>
    96b6:	bf00      	nop
    96b8:	2000525c 	.word	0x2000525c

000096bc <next_timeout>:

static int32_t next_timeout(void)
{
    96bc:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    96be:	f7ff ffdb 	bl	9678 <first>
    96c2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    96c4:	f7ff ffee 	bl	96a4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    96c8:	b17c      	cbz	r4, 96ea <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    96ca:	6923      	ldr	r3, [r4, #16]
    96cc:	6962      	ldr	r2, [r4, #20]
    96ce:	1a1b      	subs	r3, r3, r0
    96d0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    96d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    96d8:	f170 0200 	sbcs.w	r2, r0, #0
    96dc:	da08      	bge.n	96f0 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    96de:	2800      	cmp	r0, #0
    96e0:	db01      	blt.n	96e6 <next_timeout+0x2a>
    96e2:	4618      	mov	r0, r3
    96e4:	e006      	b.n	96f4 <next_timeout+0x38>
    96e6:	2300      	movs	r3, #0
    96e8:	e7fb      	b.n	96e2 <next_timeout+0x26>
		ret = MAX_WAIT;
    96ea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    96ee:	e001      	b.n	96f4 <next_timeout+0x38>
    96f0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    96f4:	4b03      	ldr	r3, [pc, #12]	; (9704 <next_timeout+0x48>)
    96f6:	691b      	ldr	r3, [r3, #16]
    96f8:	b113      	cbz	r3, 9700 <next_timeout+0x44>
    96fa:	4283      	cmp	r3, r0
    96fc:	da00      	bge.n	9700 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    96fe:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    9700:	bd10      	pop	{r4, pc}
    9702:	bf00      	nop
    9704:	20005214 	.word	0x20005214

00009708 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    970c:	bf08      	it	eq
    970e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    9712:	f000 80c1 	beq.w	9898 <z_add_timeout+0x190>
{
    9716:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    971a:	4604      	mov	r4, r0
    971c:	460f      	mov	r7, r1
    971e:	4692      	mov	sl, r2
    9720:	461d      	mov	r5, r3
	return node->next != NULL;
    9722:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    9724:	b173      	cbz	r3, 9744 <z_add_timeout+0x3c>
    9726:	f8df 8174 	ldr.w	r8, [pc, #372]	; 989c <z_add_timeout+0x194>
    972a:	2363      	movs	r3, #99	; 0x63
    972c:	4642      	mov	r2, r8
    972e:	495c      	ldr	r1, [pc, #368]	; (98a0 <z_add_timeout+0x198>)
    9730:	485c      	ldr	r0, [pc, #368]	; (98a4 <z_add_timeout+0x19c>)
    9732:	f001 f8e3 	bl	a8fc <assert_print>
    9736:	485c      	ldr	r0, [pc, #368]	; (98a8 <z_add_timeout+0x1a0>)
    9738:	f001 f8e0 	bl	a8fc <assert_print>
    973c:	2163      	movs	r1, #99	; 0x63
    973e:	4640      	mov	r0, r8
    9740:	f001 f8d5 	bl	a8ee <assert_post_action>
	to->fn = fn;
    9744:	60a7      	str	r7, [r4, #8]

	LOCKED(&timeout_lock) {
    9746:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
    974a:	f04f 0320 	mov.w	r3, #32
    974e:	f3ef 8711 	mrs	r7, BASEPRI
    9752:	f383 8812 	msr	BASEPRI_MAX, r3
    9756:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    975a:	4854      	ldr	r0, [pc, #336]	; (98ac <z_add_timeout+0x1a4>)
    975c:	f7fd ff6a 	bl	7634 <z_spin_lock_valid>
    9760:	b118      	cbz	r0, 976a <z_add_timeout+0x62>
	z_spin_lock_set_owner(l);
    9762:	4852      	ldr	r0, [pc, #328]	; (98ac <z_add_timeout+0x1a4>)
    9764:	f7fd ff86 	bl	7674 <z_spin_lock_set_owner>
	return k;
    9768:	e038      	b.n	97dc <z_add_timeout+0xd4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    976a:	f8df 9144 	ldr.w	r9, [pc, #324]	; 98b0 <z_add_timeout+0x1a8>
    976e:	238e      	movs	r3, #142	; 0x8e
    9770:	464a      	mov	r2, r9
    9772:	4950      	ldr	r1, [pc, #320]	; (98b4 <z_add_timeout+0x1ac>)
    9774:	484b      	ldr	r0, [pc, #300]	; (98a4 <z_add_timeout+0x19c>)
    9776:	f001 f8c1 	bl	a8fc <assert_print>
    977a:	494c      	ldr	r1, [pc, #304]	; (98ac <z_add_timeout+0x1a4>)
    977c:	484e      	ldr	r0, [pc, #312]	; (98b8 <z_add_timeout+0x1b0>)
    977e:	f001 f8bd 	bl	a8fc <assert_print>
    9782:	218e      	movs	r1, #142	; 0x8e
    9784:	4648      	mov	r0, r9
    9786:	f001 f8b2 	bl	a8ee <assert_post_action>
    978a:	e7ea      	b.n	9762 <z_add_timeout+0x5a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    978c:	f11a 0801 	adds.w	r8, sl, #1
    9790:	f145 0900 	adc.w	r9, r5, #0
    9794:	f7ff ff86 	bl	96a4 <elapsed>
    9798:	eb18 0300 	adds.w	r3, r8, r0
    979c:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    97a0:	6123      	str	r3, [r4, #16]
    97a2:	6160      	str	r0, [r4, #20]
    97a4:	e03d      	b.n	9822 <z_add_timeout+0x11a>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    97a6:	1a51      	subs	r1, r2, r1
    97a8:	eb66 0303 	sbc.w	r3, r6, r3
    97ac:	6101      	str	r1, [r0, #16]
    97ae:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    97b0:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    97b2:	6063      	str	r3, [r4, #4]
	node->next = successor;
    97b4:	6020      	str	r0, [r4, #0]
	prev->next = node;
    97b6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    97b8:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    97ba:	2800      	cmp	r0, #0
    97bc:	d045      	beq.n	984a <z_add_timeout+0x142>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    97be:	f7ff ff5b 	bl	9678 <first>
    97c2:	4284      	cmp	r4, r0
    97c4:	d048      	beq.n	9858 <z_add_timeout+0x150>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    97c6:	4839      	ldr	r0, [pc, #228]	; (98ac <z_add_timeout+0x1a4>)
    97c8:	f7fd ff44 	bl	7654 <z_spin_unlock_valid>
    97cc:	2800      	cmp	r0, #0
    97ce:	d050      	beq.n	9872 <z_add_timeout+0x16a>
	__asm__ volatile(
    97d0:	f387 8811 	msr	BASEPRI, r7
    97d4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    97d8:	f04f 0801 	mov.w	r8, #1
    97dc:	f1b8 0f00 	cmp.w	r8, #0
    97e0:	d158      	bne.n	9894 <z_add_timeout+0x18c>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    97e2:	4653      	mov	r3, sl
    97e4:	f06f 0101 	mvn.w	r1, #1
    97e8:	ebb1 010a 	subs.w	r1, r1, sl
    97ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    97f0:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    97f4:	2a00      	cmp	r2, #0
    97f6:	dbc9      	blt.n	978c <z_add_timeout+0x84>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    97f8:	4a30      	ldr	r2, [pc, #192]	; (98bc <z_add_timeout+0x1b4>)
    97fa:	6811      	ldr	r1, [r2, #0]
    97fc:	6852      	ldr	r2, [r2, #4]
    97fe:	185b      	adds	r3, r3, r1
    9800:	eb42 0205 	adc.w	r2, r2, r5
    9804:	f06f 0101 	mvn.w	r1, #1
    9808:	1acb      	subs	r3, r1, r3
    980a:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
    980e:	4618      	mov	r0, r3
    9810:	4611      	mov	r1, r2
    9812:	2b01      	cmp	r3, #1
    9814:	f172 0300 	sbcs.w	r3, r2, #0
    9818:	da01      	bge.n	981e <z_add_timeout+0x116>
    981a:	2001      	movs	r0, #1
    981c:	2100      	movs	r1, #0
    981e:	6120      	str	r0, [r4, #16]
    9820:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    9822:	f7ff ff29 	bl	9678 <first>
    9826:	2800      	cmp	r0, #0
    9828:	d0c7      	beq.n	97ba <z_add_timeout+0xb2>
			if (t->dticks > to->dticks) {
    982a:	6902      	ldr	r2, [r0, #16]
    982c:	6946      	ldr	r6, [r0, #20]
    982e:	6921      	ldr	r1, [r4, #16]
    9830:	6963      	ldr	r3, [r4, #20]
    9832:	4291      	cmp	r1, r2
    9834:	eb73 0c06 	sbcs.w	ip, r3, r6
    9838:	dbb5      	blt.n	97a6 <z_add_timeout+0x9e>
			to->dticks -= t->dticks;
    983a:	1a89      	subs	r1, r1, r2
    983c:	eb63 0306 	sbc.w	r3, r3, r6
    9840:	6121      	str	r1, [r4, #16]
    9842:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    9844:	f7ff ff22 	bl	968c <next>
    9848:	e7ed      	b.n	9826 <z_add_timeout+0x11e>
	sys_dnode_t *const tail = list->tail;
    984a:	4b1d      	ldr	r3, [pc, #116]	; (98c0 <z_add_timeout+0x1b8>)
    984c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    984e:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    9850:	6062      	str	r2, [r4, #4]
	tail->next = node;
    9852:	6014      	str	r4, [r2, #0]
	list->tail = node;
    9854:	605c      	str	r4, [r3, #4]
}
    9856:	e7b2      	b.n	97be <z_add_timeout+0xb6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    9858:	f7ff ff30 	bl	96bc <next_timeout>

			if (next_time == 0 ||
    985c:	4603      	mov	r3, r0
    985e:	b118      	cbz	r0, 9868 <z_add_timeout+0x160>
			    _current_cpu->slice_ticks != next_time) {
    9860:	4a18      	ldr	r2, [pc, #96]	; (98c4 <z_add_timeout+0x1bc>)
    9862:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    9864:	4282      	cmp	r2, r0
    9866:	d0ae      	beq.n	97c6 <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
    9868:	2100      	movs	r1, #0
    986a:	4618      	mov	r0, r3
    986c:	f7fb fb48 	bl	4f00 <sys_clock_set_timeout>
    9870:	e7a9      	b.n	97c6 <z_add_timeout+0xbe>
    9872:	f8df 803c 	ldr.w	r8, [pc, #60]	; 98b0 <z_add_timeout+0x1a8>
    9876:	23b9      	movs	r3, #185	; 0xb9
    9878:	4642      	mov	r2, r8
    987a:	4913      	ldr	r1, [pc, #76]	; (98c8 <z_add_timeout+0x1c0>)
    987c:	4809      	ldr	r0, [pc, #36]	; (98a4 <z_add_timeout+0x19c>)
    987e:	f001 f83d 	bl	a8fc <assert_print>
    9882:	490a      	ldr	r1, [pc, #40]	; (98ac <z_add_timeout+0x1a4>)
    9884:	4811      	ldr	r0, [pc, #68]	; (98cc <z_add_timeout+0x1c4>)
    9886:	f001 f839 	bl	a8fc <assert_print>
    988a:	21b9      	movs	r1, #185	; 0xb9
    988c:	4640      	mov	r0, r8
    988e:	f001 f82e 	bl	a8ee <assert_post_action>
    9892:	e79d      	b.n	97d0 <z_add_timeout+0xc8>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    9894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9898:	4770      	bx	lr
    989a:	bf00      	nop
    989c:	0000de58 	.word	0x0000de58
    98a0:	0000de7c 	.word	0x0000de7c
    98a4:	0000c254 	.word	0x0000c254
    98a8:	0000dc90 	.word	0x0000dc90
    98ac:	20005260 	.word	0x20005260
    98b0:	0000c400 	.word	0x0000c400
    98b4:	0000c460 	.word	0x0000c460
    98b8:	0000c478 	.word	0x0000c478
    98bc:	200046d0 	.word	0x200046d0
    98c0:	200040e4 	.word	0x200040e4
    98c4:	20005214 	.word	0x20005214
    98c8:	0000c430 	.word	0x0000c430
    98cc:	0000c448 	.word	0x0000c448

000098d0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    98d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98d4:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
    98d6:	2400      	movs	r4, #0
	__asm__ volatile(
    98d8:	f04f 0320 	mov.w	r3, #32
    98dc:	f3ef 8711 	mrs	r7, BASEPRI
    98e0:	f383 8812 	msr	BASEPRI_MAX, r3
    98e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    98e8:	481f      	ldr	r0, [pc, #124]	; (9968 <z_abort_timeout+0x98>)
    98ea:	f7fd fea3 	bl	7634 <z_spin_lock_valid>
    98ee:	b128      	cbz	r0, 98fc <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
    98f0:	481d      	ldr	r0, [pc, #116]	; (9968 <z_abort_timeout+0x98>)
    98f2:	f7fd febf 	bl	7674 <z_spin_lock_set_owner>
	int ret = -EINVAL;
    98f6:	f06f 0815 	mvn.w	r8, #21
	return k;
    98fa:	e018      	b.n	992e <z_abort_timeout+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    98fc:	4e1b      	ldr	r6, [pc, #108]	; (996c <z_abort_timeout+0x9c>)
    98fe:	238e      	movs	r3, #142	; 0x8e
    9900:	4632      	mov	r2, r6
    9902:	491b      	ldr	r1, [pc, #108]	; (9970 <z_abort_timeout+0xa0>)
    9904:	481b      	ldr	r0, [pc, #108]	; (9974 <z_abort_timeout+0xa4>)
    9906:	f000 fff9 	bl	a8fc <assert_print>
    990a:	4917      	ldr	r1, [pc, #92]	; (9968 <z_abort_timeout+0x98>)
    990c:	481a      	ldr	r0, [pc, #104]	; (9978 <z_abort_timeout+0xa8>)
    990e:	f000 fff5 	bl	a8fc <assert_print>
    9912:	218e      	movs	r1, #142	; 0x8e
    9914:	4630      	mov	r0, r6
    9916:	f000 ffea 	bl	a8ee <assert_post_action>
    991a:	e7e9      	b.n	98f0 <z_abort_timeout+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    991c:	4812      	ldr	r0, [pc, #72]	; (9968 <z_abort_timeout+0x98>)
    991e:	f7fd fe99 	bl	7654 <z_spin_unlock_valid>
    9922:	b170      	cbz	r0, 9942 <z_abort_timeout+0x72>
	__asm__ volatile(
    9924:	f387 8811 	msr	BASEPRI, r7
    9928:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    992c:	2401      	movs	r4, #1
    992e:	4626      	mov	r6, r4
    9930:	b9bc      	cbnz	r4, 9962 <z_abort_timeout+0x92>
	return node->next != NULL;
    9932:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
    9934:	2b00      	cmp	r3, #0
    9936:	d0f1      	beq.n	991c <z_abort_timeout+0x4c>
			remove_timeout(to);
    9938:	4628      	mov	r0, r5
    993a:	f002 f9bf 	bl	bcbc <remove_timeout>
			ret = 0;
    993e:	46b0      	mov	r8, r6
    9940:	e7ec      	b.n	991c <z_abort_timeout+0x4c>
    9942:	4c0a      	ldr	r4, [pc, #40]	; (996c <z_abort_timeout+0x9c>)
    9944:	23b9      	movs	r3, #185	; 0xb9
    9946:	4622      	mov	r2, r4
    9948:	490c      	ldr	r1, [pc, #48]	; (997c <z_abort_timeout+0xac>)
    994a:	480a      	ldr	r0, [pc, #40]	; (9974 <z_abort_timeout+0xa4>)
    994c:	f000 ffd6 	bl	a8fc <assert_print>
    9950:	4905      	ldr	r1, [pc, #20]	; (9968 <z_abort_timeout+0x98>)
    9952:	480b      	ldr	r0, [pc, #44]	; (9980 <z_abort_timeout+0xb0>)
    9954:	f000 ffd2 	bl	a8fc <assert_print>
    9958:	21b9      	movs	r1, #185	; 0xb9
    995a:	4620      	mov	r0, r4
    995c:	f000 ffc7 	bl	a8ee <assert_post_action>
    9960:	e7e0      	b.n	9924 <z_abort_timeout+0x54>
		}
	}

	return ret;
}
    9962:	4640      	mov	r0, r8
    9964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9968:	20005260 	.word	0x20005260
    996c:	0000c400 	.word	0x0000c400
    9970:	0000c460 	.word	0x0000c460
    9974:	0000c254 	.word	0x0000c254
    9978:	0000c478 	.word	0x0000c478
    997c:	0000c430 	.word	0x0000c430
    9980:	0000c448 	.word	0x0000c448

00009984 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    9984:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
    9986:	2500      	movs	r5, #0
	__asm__ volatile(
    9988:	f04f 0320 	mov.w	r3, #32
    998c:	f3ef 8611 	mrs	r6, BASEPRI
    9990:	f383 8812 	msr	BASEPRI_MAX, r3
    9994:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9998:	481c      	ldr	r0, [pc, #112]	; (9a0c <z_get_next_timeout_expiry+0x88>)
    999a:	f7fd fe4b 	bl	7634 <z_spin_lock_valid>
    999e:	b128      	cbz	r0, 99ac <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
    99a0:	481a      	ldr	r0, [pc, #104]	; (9a0c <z_get_next_timeout_expiry+0x88>)
    99a2:	f7fd fe67 	bl	7674 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    99a6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	return k;
    99aa:	e014      	b.n	99d6 <z_get_next_timeout_expiry+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    99ac:	4c18      	ldr	r4, [pc, #96]	; (9a10 <z_get_next_timeout_expiry+0x8c>)
    99ae:	238e      	movs	r3, #142	; 0x8e
    99b0:	4622      	mov	r2, r4
    99b2:	4918      	ldr	r1, [pc, #96]	; (9a14 <z_get_next_timeout_expiry+0x90>)
    99b4:	4818      	ldr	r0, [pc, #96]	; (9a18 <z_get_next_timeout_expiry+0x94>)
    99b6:	f000 ffa1 	bl	a8fc <assert_print>
    99ba:	4914      	ldr	r1, [pc, #80]	; (9a0c <z_get_next_timeout_expiry+0x88>)
    99bc:	4817      	ldr	r0, [pc, #92]	; (9a1c <z_get_next_timeout_expiry+0x98>)
    99be:	f000 ff9d 	bl	a8fc <assert_print>
    99c2:	218e      	movs	r1, #142	; 0x8e
    99c4:	4620      	mov	r0, r4
    99c6:	f000 ff92 	bl	a8ee <assert_post_action>
    99ca:	e7e9      	b.n	99a0 <z_get_next_timeout_expiry+0x1c>
	__asm__ volatile(
    99cc:	f386 8811 	msr	BASEPRI, r6
    99d0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    99d4:	2501      	movs	r5, #1
    99d6:	b9bd      	cbnz	r5, 9a08 <z_get_next_timeout_expiry+0x84>
		ret = next_timeout();
    99d8:	f7ff fe70 	bl	96bc <next_timeout>
    99dc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    99de:	480b      	ldr	r0, [pc, #44]	; (9a0c <z_get_next_timeout_expiry+0x88>)
    99e0:	f7fd fe38 	bl	7654 <z_spin_unlock_valid>
    99e4:	2800      	cmp	r0, #0
    99e6:	d1f1      	bne.n	99cc <z_get_next_timeout_expiry+0x48>
    99e8:	4d09      	ldr	r5, [pc, #36]	; (9a10 <z_get_next_timeout_expiry+0x8c>)
    99ea:	23b9      	movs	r3, #185	; 0xb9
    99ec:	462a      	mov	r2, r5
    99ee:	490c      	ldr	r1, [pc, #48]	; (9a20 <z_get_next_timeout_expiry+0x9c>)
    99f0:	4809      	ldr	r0, [pc, #36]	; (9a18 <z_get_next_timeout_expiry+0x94>)
    99f2:	f000 ff83 	bl	a8fc <assert_print>
    99f6:	4905      	ldr	r1, [pc, #20]	; (9a0c <z_get_next_timeout_expiry+0x88>)
    99f8:	480a      	ldr	r0, [pc, #40]	; (9a24 <z_get_next_timeout_expiry+0xa0>)
    99fa:	f000 ff7f 	bl	a8fc <assert_print>
    99fe:	21b9      	movs	r1, #185	; 0xb9
    9a00:	4628      	mov	r0, r5
    9a02:	f000 ff74 	bl	a8ee <assert_post_action>
    9a06:	e7e1      	b.n	99cc <z_get_next_timeout_expiry+0x48>
	}
	return ret;
}
    9a08:	4620      	mov	r0, r4
    9a0a:	bd70      	pop	{r4, r5, r6, pc}
    9a0c:	20005260 	.word	0x20005260
    9a10:	0000c400 	.word	0x0000c400
    9a14:	0000c460 	.word	0x0000c460
    9a18:	0000c254 	.word	0x0000c254
    9a1c:	0000c478 	.word	0x0000c478
    9a20:	0000c430 	.word	0x0000c430
    9a24:	0000c448 	.word	0x0000c448

00009a28 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    9a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a2c:	4606      	mov	r6, r0
    9a2e:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
    9a30:	2500      	movs	r5, #0
	__asm__ volatile(
    9a32:	f04f 0320 	mov.w	r3, #32
    9a36:	f3ef 8711 	mrs	r7, BASEPRI
    9a3a:	f383 8812 	msr	BASEPRI_MAX, r3
    9a3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9a42:	4825      	ldr	r0, [pc, #148]	; (9ad8 <z_set_timeout_expiry+0xb0>)
    9a44:	f7fd fdf6 	bl	7634 <z_spin_lock_valid>
    9a48:	b118      	cbz	r0, 9a52 <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
    9a4a:	4823      	ldr	r0, [pc, #140]	; (9ad8 <z_set_timeout_expiry+0xb0>)
    9a4c:	f7fd fe12 	bl	7674 <z_spin_lock_set_owner>
	return k;
    9a50:	e01e      	b.n	9a90 <z_set_timeout_expiry+0x68>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9a52:	4c22      	ldr	r4, [pc, #136]	; (9adc <z_set_timeout_expiry+0xb4>)
    9a54:	238e      	movs	r3, #142	; 0x8e
    9a56:	4622      	mov	r2, r4
    9a58:	4921      	ldr	r1, [pc, #132]	; (9ae0 <z_set_timeout_expiry+0xb8>)
    9a5a:	4822      	ldr	r0, [pc, #136]	; (9ae4 <z_set_timeout_expiry+0xbc>)
    9a5c:	f000 ff4e 	bl	a8fc <assert_print>
    9a60:	491d      	ldr	r1, [pc, #116]	; (9ad8 <z_set_timeout_expiry+0xb0>)
    9a62:	4821      	ldr	r0, [pc, #132]	; (9ae8 <z_set_timeout_expiry+0xc0>)
    9a64:	f000 ff4a 	bl	a8fc <assert_print>
    9a68:	218e      	movs	r1, #142	; 0x8e
    9a6a:	4620      	mov	r0, r4
    9a6c:	f000 ff3f 	bl	a8ee <assert_post_action>
    9a70:	e7eb      	b.n	9a4a <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    9a72:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    9a74:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    9a78:	2801      	cmp	r0, #1
    9a7a:	dd00      	ble.n	9a7e <z_set_timeout_expiry+0x56>
    9a7c:	b99c      	cbnz	r4, 9aa6 <z_set_timeout_expiry+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9a7e:	4816      	ldr	r0, [pc, #88]	; (9ad8 <z_set_timeout_expiry+0xb0>)
    9a80:	f7fd fde8 	bl	7654 <z_spin_unlock_valid>
    9a84:	b1b0      	cbz	r0, 9ab4 <z_set_timeout_expiry+0x8c>
	__asm__ volatile(
    9a86:	f387 8811 	msr	BASEPRI, r7
    9a8a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9a8e:	2501      	movs	r5, #1
    9a90:	462c      	mov	r4, r5
    9a92:	b9fd      	cbnz	r5, 9ad4 <z_set_timeout_expiry+0xac>
		int next_to = next_timeout();
    9a94:	f7ff fe12 	bl	96bc <next_timeout>
			      || (ticks <= next_to);
    9a98:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    9a9c:	d0e9      	beq.n	9a72 <z_set_timeout_expiry+0x4a>
    9a9e:	42b0      	cmp	r0, r6
    9aa0:	dbe8      	blt.n	9a74 <z_set_timeout_expiry+0x4c>
    9aa2:	2401      	movs	r4, #1
    9aa4:	e7e6      	b.n	9a74 <z_set_timeout_expiry+0x4c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    9aa6:	4641      	mov	r1, r8
    9aa8:	42b0      	cmp	r0, r6
    9aaa:	bfa8      	it	ge
    9aac:	4630      	movge	r0, r6
    9aae:	f7fb fa27 	bl	4f00 <sys_clock_set_timeout>
    9ab2:	e7e4      	b.n	9a7e <z_set_timeout_expiry+0x56>
    9ab4:	4c09      	ldr	r4, [pc, #36]	; (9adc <z_set_timeout_expiry+0xb4>)
    9ab6:	23b9      	movs	r3, #185	; 0xb9
    9ab8:	4622      	mov	r2, r4
    9aba:	490c      	ldr	r1, [pc, #48]	; (9aec <z_set_timeout_expiry+0xc4>)
    9abc:	4809      	ldr	r0, [pc, #36]	; (9ae4 <z_set_timeout_expiry+0xbc>)
    9abe:	f000 ff1d 	bl	a8fc <assert_print>
    9ac2:	4905      	ldr	r1, [pc, #20]	; (9ad8 <z_set_timeout_expiry+0xb0>)
    9ac4:	480a      	ldr	r0, [pc, #40]	; (9af0 <z_set_timeout_expiry+0xc8>)
    9ac6:	f000 ff19 	bl	a8fc <assert_print>
    9aca:	21b9      	movs	r1, #185	; 0xb9
    9acc:	4620      	mov	r0, r4
    9ace:	f000 ff0e 	bl	a8ee <assert_post_action>
    9ad2:	e7d8      	b.n	9a86 <z_set_timeout_expiry+0x5e>
		}
	}
}
    9ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ad8:	20005260 	.word	0x20005260
    9adc:	0000c400 	.word	0x0000c400
    9ae0:	0000c460 	.word	0x0000c460
    9ae4:	0000c254 	.word	0x0000c254
    9ae8:	0000c478 	.word	0x0000c478
    9aec:	0000c430 	.word	0x0000c430
    9af0:	0000c448 	.word	0x0000c448

00009af4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    9af4:	b570      	push	{r4, r5, r6, lr}
    9af6:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    9af8:	f7fe fd5e 	bl	85b8 <z_time_slice>
	__asm__ volatile(
    9afc:	f04f 0320 	mov.w	r3, #32
    9b00:	f3ef 8511 	mrs	r5, BASEPRI
    9b04:	f383 8812 	msr	BASEPRI_MAX, r3
    9b08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9b0c:	4854      	ldr	r0, [pc, #336]	; (9c60 <sys_clock_announce+0x16c>)
    9b0e:	f7fd fd91 	bl	7634 <z_spin_lock_valid>
    9b12:	b128      	cbz	r0, 9b20 <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
    9b14:	4852      	ldr	r0, [pc, #328]	; (9c60 <sys_clock_announce+0x16c>)
    9b16:	f7fd fdad 	bl	7674 <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    9b1a:	4b52      	ldr	r3, [pc, #328]	; (9c64 <sys_clock_announce+0x170>)
    9b1c:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    9b1e:	e022      	b.n	9b66 <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9b20:	4e51      	ldr	r6, [pc, #324]	; (9c68 <sys_clock_announce+0x174>)
    9b22:	238e      	movs	r3, #142	; 0x8e
    9b24:	4632      	mov	r2, r6
    9b26:	4951      	ldr	r1, [pc, #324]	; (9c6c <sys_clock_announce+0x178>)
    9b28:	4851      	ldr	r0, [pc, #324]	; (9c70 <sys_clock_announce+0x17c>)
    9b2a:	f000 fee7 	bl	a8fc <assert_print>
    9b2e:	494c      	ldr	r1, [pc, #304]	; (9c60 <sys_clock_announce+0x16c>)
    9b30:	4850      	ldr	r0, [pc, #320]	; (9c74 <sys_clock_announce+0x180>)
    9b32:	f000 fee3 	bl	a8fc <assert_print>
    9b36:	218e      	movs	r1, #142	; 0x8e
    9b38:	4630      	mov	r0, r6
    9b3a:	f000 fed8 	bl	a8ee <assert_post_action>
    9b3e:	e7e9      	b.n	9b14 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9b40:	4e49      	ldr	r6, [pc, #292]	; (9c68 <sys_clock_announce+0x174>)
    9b42:	23b9      	movs	r3, #185	; 0xb9
    9b44:	4632      	mov	r2, r6
    9b46:	494c      	ldr	r1, [pc, #304]	; (9c78 <sys_clock_announce+0x184>)
    9b48:	4849      	ldr	r0, [pc, #292]	; (9c70 <sys_clock_announce+0x17c>)
    9b4a:	f000 fed7 	bl	a8fc <assert_print>
    9b4e:	4944      	ldr	r1, [pc, #272]	; (9c60 <sys_clock_announce+0x16c>)
    9b50:	484a      	ldr	r0, [pc, #296]	; (9c7c <sys_clock_announce+0x188>)
    9b52:	f000 fed3 	bl	a8fc <assert_print>
    9b56:	21b9      	movs	r1, #185	; 0xb9
    9b58:	4630      	mov	r0, r6
    9b5a:	f000 fec8 	bl	a8ee <assert_post_action>
    9b5e:	e027      	b.n	9bb0 <sys_clock_announce+0xbc>
	z_spin_lock_set_owner(l);
    9b60:	483f      	ldr	r0, [pc, #252]	; (9c60 <sys_clock_announce+0x16c>)
    9b62:	f7fd fd87 	bl	7674 <z_spin_lock_set_owner>
    9b66:	f7ff fd87 	bl	9678 <first>
    9b6a:	4604      	mov	r4, r0
    9b6c:	2800      	cmp	r0, #0
    9b6e:	d043      	beq.n	9bf8 <sys_clock_announce+0x104>
    9b70:	6902      	ldr	r2, [r0, #16]
    9b72:	6941      	ldr	r1, [r0, #20]
    9b74:	4b3b      	ldr	r3, [pc, #236]	; (9c64 <sys_clock_announce+0x170>)
    9b76:	681b      	ldr	r3, [r3, #0]
    9b78:	17d8      	asrs	r0, r3, #31
    9b7a:	4293      	cmp	r3, r2
    9b7c:	eb70 0101 	sbcs.w	r1, r0, r1
    9b80:	db3a      	blt.n	9bf8 <sys_clock_announce+0x104>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    9b82:	483f      	ldr	r0, [pc, #252]	; (9c80 <sys_clock_announce+0x18c>)
    9b84:	6801      	ldr	r1, [r0, #0]
    9b86:	6846      	ldr	r6, [r0, #4]
    9b88:	1889      	adds	r1, r1, r2
    9b8a:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
    9b8e:	6001      	str	r1, [r0, #0]
    9b90:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
    9b92:	1a9b      	subs	r3, r3, r2
    9b94:	4a33      	ldr	r2, [pc, #204]	; (9c64 <sys_clock_announce+0x170>)
    9b96:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    9b98:	2200      	movs	r2, #0
    9b9a:	2300      	movs	r3, #0
    9b9c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    9ba0:	4620      	mov	r0, r4
    9ba2:	f002 f88b 	bl	bcbc <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9ba6:	482e      	ldr	r0, [pc, #184]	; (9c60 <sys_clock_announce+0x16c>)
    9ba8:	f7fd fd54 	bl	7654 <z_spin_unlock_valid>
    9bac:	2800      	cmp	r0, #0
    9bae:	d0c7      	beq.n	9b40 <sys_clock_announce+0x4c>
	__asm__ volatile(
    9bb0:	f385 8811 	msr	BASEPRI, r5
    9bb4:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    9bb8:	68a3      	ldr	r3, [r4, #8]
    9bba:	4620      	mov	r0, r4
    9bbc:	4798      	blx	r3
	__asm__ volatile(
    9bbe:	f04f 0320 	mov.w	r3, #32
    9bc2:	f3ef 8511 	mrs	r5, BASEPRI
    9bc6:	f383 8812 	msr	BASEPRI_MAX, r3
    9bca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9bce:	4824      	ldr	r0, [pc, #144]	; (9c60 <sys_clock_announce+0x16c>)
    9bd0:	f7fd fd30 	bl	7634 <z_spin_lock_valid>
    9bd4:	2800      	cmp	r0, #0
    9bd6:	d1c3      	bne.n	9b60 <sys_clock_announce+0x6c>
    9bd8:	4c23      	ldr	r4, [pc, #140]	; (9c68 <sys_clock_announce+0x174>)
    9bda:	238e      	movs	r3, #142	; 0x8e
    9bdc:	4622      	mov	r2, r4
    9bde:	4923      	ldr	r1, [pc, #140]	; (9c6c <sys_clock_announce+0x178>)
    9be0:	4823      	ldr	r0, [pc, #140]	; (9c70 <sys_clock_announce+0x17c>)
    9be2:	f000 fe8b 	bl	a8fc <assert_print>
    9be6:	491e      	ldr	r1, [pc, #120]	; (9c60 <sys_clock_announce+0x16c>)
    9be8:	4822      	ldr	r0, [pc, #136]	; (9c74 <sys_clock_announce+0x180>)
    9bea:	f000 fe87 	bl	a8fc <assert_print>
    9bee:	218e      	movs	r1, #142	; 0x8e
    9bf0:	4620      	mov	r0, r4
    9bf2:	f000 fe7c 	bl	a8ee <assert_post_action>
    9bf6:	e7b3      	b.n	9b60 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    9bf8:	b144      	cbz	r4, 9c0c <sys_clock_announce+0x118>
		first()->dticks -= announce_remaining;
    9bfa:	4b1a      	ldr	r3, [pc, #104]	; (9c64 <sys_clock_announce+0x170>)
    9bfc:	6819      	ldr	r1, [r3, #0]
    9bfe:	6923      	ldr	r3, [r4, #16]
    9c00:	6962      	ldr	r2, [r4, #20]
    9c02:	1a5b      	subs	r3, r3, r1
    9c04:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    9c08:	6123      	str	r3, [r4, #16]
    9c0a:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    9c0c:	4a1c      	ldr	r2, [pc, #112]	; (9c80 <sys_clock_announce+0x18c>)
    9c0e:	4e15      	ldr	r6, [pc, #84]	; (9c64 <sys_clock_announce+0x170>)
    9c10:	6830      	ldr	r0, [r6, #0]
    9c12:	6813      	ldr	r3, [r2, #0]
    9c14:	6851      	ldr	r1, [r2, #4]
    9c16:	181b      	adds	r3, r3, r0
    9c18:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    9c1c:	6013      	str	r3, [r2, #0]
    9c1e:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    9c20:	2400      	movs	r4, #0
    9c22:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    9c24:	f7ff fd4a 	bl	96bc <next_timeout>
    9c28:	4621      	mov	r1, r4
    9c2a:	f7fb f969 	bl	4f00 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9c2e:	480c      	ldr	r0, [pc, #48]	; (9c60 <sys_clock_announce+0x16c>)
    9c30:	f7fd fd10 	bl	7654 <z_spin_unlock_valid>
    9c34:	b120      	cbz	r0, 9c40 <sys_clock_announce+0x14c>
	__asm__ volatile(
    9c36:	f385 8811 	msr	BASEPRI, r5
    9c3a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    9c3e:	bd70      	pop	{r4, r5, r6, pc}
    9c40:	4c09      	ldr	r4, [pc, #36]	; (9c68 <sys_clock_announce+0x174>)
    9c42:	23b9      	movs	r3, #185	; 0xb9
    9c44:	4622      	mov	r2, r4
    9c46:	490c      	ldr	r1, [pc, #48]	; (9c78 <sys_clock_announce+0x184>)
    9c48:	4809      	ldr	r0, [pc, #36]	; (9c70 <sys_clock_announce+0x17c>)
    9c4a:	f000 fe57 	bl	a8fc <assert_print>
    9c4e:	4904      	ldr	r1, [pc, #16]	; (9c60 <sys_clock_announce+0x16c>)
    9c50:	480a      	ldr	r0, [pc, #40]	; (9c7c <sys_clock_announce+0x188>)
    9c52:	f000 fe53 	bl	a8fc <assert_print>
    9c56:	21b9      	movs	r1, #185	; 0xb9
    9c58:	4620      	mov	r0, r4
    9c5a:	f000 fe48 	bl	a8ee <assert_post_action>
    9c5e:	e7ea      	b.n	9c36 <sys_clock_announce+0x142>
    9c60:	20005260 	.word	0x20005260
    9c64:	2000525c 	.word	0x2000525c
    9c68:	0000c400 	.word	0x0000c400
    9c6c:	0000c460 	.word	0x0000c460
    9c70:	0000c254 	.word	0x0000c254
    9c74:	0000c478 	.word	0x0000c478
    9c78:	0000c430 	.word	0x0000c430
    9c7c:	0000c448 	.word	0x0000c448
    9c80:	200046d0 	.word	0x200046d0

00009c84 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    9c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    9c86:	2600      	movs	r6, #0
	__asm__ volatile(
    9c88:	f04f 0320 	mov.w	r3, #32
    9c8c:	f3ef 8711 	mrs	r7, BASEPRI
    9c90:	f383 8812 	msr	BASEPRI_MAX, r3
    9c94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9c98:	481f      	ldr	r0, [pc, #124]	; (9d18 <sys_clock_tick_get+0x94>)
    9c9a:	f7fd fccb 	bl	7634 <z_spin_lock_valid>
    9c9e:	b128      	cbz	r0, 9cac <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
    9ca0:	481d      	ldr	r0, [pc, #116]	; (9d18 <sys_clock_tick_get+0x94>)
    9ca2:	f7fd fce7 	bl	7674 <z_spin_lock_set_owner>
	uint64_t t = 0U;
    9ca6:	2400      	movs	r4, #0
    9ca8:	4625      	mov	r5, r4
	return k;
    9caa:	e014      	b.n	9cd6 <sys_clock_tick_get+0x52>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9cac:	4c1b      	ldr	r4, [pc, #108]	; (9d1c <sys_clock_tick_get+0x98>)
    9cae:	238e      	movs	r3, #142	; 0x8e
    9cb0:	4622      	mov	r2, r4
    9cb2:	491b      	ldr	r1, [pc, #108]	; (9d20 <sys_clock_tick_get+0x9c>)
    9cb4:	481b      	ldr	r0, [pc, #108]	; (9d24 <sys_clock_tick_get+0xa0>)
    9cb6:	f000 fe21 	bl	a8fc <assert_print>
    9cba:	4917      	ldr	r1, [pc, #92]	; (9d18 <sys_clock_tick_get+0x94>)
    9cbc:	481a      	ldr	r0, [pc, #104]	; (9d28 <sys_clock_tick_get+0xa4>)
    9cbe:	f000 fe1d 	bl	a8fc <assert_print>
    9cc2:	218e      	movs	r1, #142	; 0x8e
    9cc4:	4620      	mov	r0, r4
    9cc6:	f000 fe12 	bl	a8ee <assert_post_action>
    9cca:	e7e9      	b.n	9ca0 <sys_clock_tick_get+0x1c>
	__asm__ volatile(
    9ccc:	f387 8811 	msr	BASEPRI, r7
    9cd0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    9cd4:	2601      	movs	r6, #1
    9cd6:	b9e6      	cbnz	r6, 9d12 <sys_clock_tick_get+0x8e>
		t = curr_tick + sys_clock_elapsed();
    9cd8:	f7fb f944 	bl	4f64 <sys_clock_elapsed>
    9cdc:	4b13      	ldr	r3, [pc, #76]	; (9d2c <sys_clock_tick_get+0xa8>)
    9cde:	681c      	ldr	r4, [r3, #0]
    9ce0:	685d      	ldr	r5, [r3, #4]
    9ce2:	1904      	adds	r4, r0, r4
    9ce4:	f145 0500 	adc.w	r5, r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9ce8:	480b      	ldr	r0, [pc, #44]	; (9d18 <sys_clock_tick_get+0x94>)
    9cea:	f7fd fcb3 	bl	7654 <z_spin_unlock_valid>
    9cee:	2800      	cmp	r0, #0
    9cf0:	d1ec      	bne.n	9ccc <sys_clock_tick_get+0x48>
    9cf2:	4e0a      	ldr	r6, [pc, #40]	; (9d1c <sys_clock_tick_get+0x98>)
    9cf4:	23b9      	movs	r3, #185	; 0xb9
    9cf6:	4632      	mov	r2, r6
    9cf8:	490d      	ldr	r1, [pc, #52]	; (9d30 <sys_clock_tick_get+0xac>)
    9cfa:	480a      	ldr	r0, [pc, #40]	; (9d24 <sys_clock_tick_get+0xa0>)
    9cfc:	f000 fdfe 	bl	a8fc <assert_print>
    9d00:	4905      	ldr	r1, [pc, #20]	; (9d18 <sys_clock_tick_get+0x94>)
    9d02:	480c      	ldr	r0, [pc, #48]	; (9d34 <sys_clock_tick_get+0xb0>)
    9d04:	f000 fdfa 	bl	a8fc <assert_print>
    9d08:	21b9      	movs	r1, #185	; 0xb9
    9d0a:	4630      	mov	r0, r6
    9d0c:	f000 fdef 	bl	a8ee <assert_post_action>
    9d10:	e7dc      	b.n	9ccc <sys_clock_tick_get+0x48>
	}
	return t;
}
    9d12:	4620      	mov	r0, r4
    9d14:	4629      	mov	r1, r5
    9d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d18:	20005260 	.word	0x20005260
    9d1c:	0000c400 	.word	0x0000c400
    9d20:	0000c460 	.word	0x0000c460
    9d24:	0000c254 	.word	0x0000c254
    9d28:	0000c478 	.word	0x0000c478
    9d2c:	200046d0 	.word	0x200046d0
    9d30:	0000c430 	.word	0x0000c430
    9d34:	0000c448 	.word	0x0000c448

00009d38 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    9d38:	b570      	push	{r4, r5, r6, lr}
    9d3a:	4604      	mov	r4, r0
	__asm__ volatile(
    9d3c:	f04f 0320 	mov.w	r3, #32
    9d40:	f3ef 8611 	mrs	r6, BASEPRI
    9d44:	f383 8812 	msr	BASEPRI_MAX, r3
    9d48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9d4c:	4857      	ldr	r0, [pc, #348]	; (9eac <z_timer_expiration_handler+0x174>)
    9d4e:	f7fd fc71 	bl	7634 <z_spin_lock_valid>
    9d52:	2800      	cmp	r0, #0
    9d54:	d049      	beq.n	9dea <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
    9d56:	4855      	ldr	r0, [pc, #340]	; (9eac <z_timer_expiration_handler+0x174>)
    9d58:	f7fd fc8c 	bl	7674 <z_spin_lock_set_owner>
	return k;
    9d5c:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    9d5e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9d60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9d62:	ea52 0103 	orrs.w	r1, r2, r3
    9d66:	d005      	beq.n	9d74 <z_timer_expiration_handler+0x3c>
    9d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9d6c:	bf08      	it	eq
    9d6e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    9d72:	d14a      	bne.n	9e0a <z_timer_expiration_handler+0xd2>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    9d74:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9d76:	3301      	adds	r3, #1
    9d78:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    9d7a:	6a23      	ldr	r3, [r4, #32]
    9d7c:	b1db      	cbz	r3, 9db6 <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9d7e:	484b      	ldr	r0, [pc, #300]	; (9eac <z_timer_expiration_handler+0x174>)
    9d80:	f7fd fc68 	bl	7654 <z_spin_unlock_valid>
    9d84:	2800      	cmp	r0, #0
    9d86:	d047      	beq.n	9e18 <z_timer_expiration_handler+0xe0>
	__asm__ volatile(
    9d88:	f386 8811 	msr	BASEPRI, r6
    9d8c:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    9d90:	6a23      	ldr	r3, [r4, #32]
    9d92:	4620      	mov	r0, r4
    9d94:	4798      	blx	r3
	__asm__ volatile(
    9d96:	f04f 0320 	mov.w	r3, #32
    9d9a:	f3ef 8511 	mrs	r5, BASEPRI
    9d9e:	f383 8812 	msr	BASEPRI_MAX, r3
    9da2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9da6:	4841      	ldr	r0, [pc, #260]	; (9eac <z_timer_expiration_handler+0x174>)
    9da8:	f7fd fc44 	bl	7634 <z_spin_lock_valid>
    9dac:	2800      	cmp	r0, #0
    9dae:	d043      	beq.n	9e38 <z_timer_expiration_handler+0x100>
	z_spin_lock_set_owner(l);
    9db0:	483e      	ldr	r0, [pc, #248]	; (9eac <z_timer_expiration_handler+0x174>)
    9db2:	f7fd fc5f 	bl	7674 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    9db6:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    9dba:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9dbc:	42a3      	cmp	r3, r4
    9dbe:	d04b      	beq.n	9e58 <z_timer_expiration_handler+0x120>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    9dc0:	2c00      	cmp	r4, #0
    9dc2:	d049      	beq.n	9e58 <z_timer_expiration_handler+0x120>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    9dc4:	4620      	mov	r0, r4
    9dc6:	f7fe f9f7 	bl	81b8 <z_unpend_thread_no_timeout>
    9dca:	2300      	movs	r3, #0
    9dcc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9dd0:	4836      	ldr	r0, [pc, #216]	; (9eac <z_timer_expiration_handler+0x174>)
    9dd2:	f7fd fc3f 	bl	7654 <z_spin_unlock_valid>
    9dd6:	2800      	cmp	r0, #0
    9dd8:	d057      	beq.n	9e8a <z_timer_expiration_handler+0x152>
	__asm__ volatile(
    9dda:	f385 8811 	msr	BASEPRI, r5
    9dde:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    9de2:	4620      	mov	r0, r4
    9de4:	f7fe fce6 	bl	87b4 <z_ready_thread>
}
    9de8:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9dea:	4d31      	ldr	r5, [pc, #196]	; (9eb0 <z_timer_expiration_handler+0x178>)
    9dec:	238e      	movs	r3, #142	; 0x8e
    9dee:	462a      	mov	r2, r5
    9df0:	4930      	ldr	r1, [pc, #192]	; (9eb4 <z_timer_expiration_handler+0x17c>)
    9df2:	4831      	ldr	r0, [pc, #196]	; (9eb8 <z_timer_expiration_handler+0x180>)
    9df4:	f000 fd82 	bl	a8fc <assert_print>
    9df8:	492c      	ldr	r1, [pc, #176]	; (9eac <z_timer_expiration_handler+0x174>)
    9dfa:	4830      	ldr	r0, [pc, #192]	; (9ebc <z_timer_expiration_handler+0x184>)
    9dfc:	f000 fd7e 	bl	a8fc <assert_print>
    9e00:	218e      	movs	r1, #142	; 0x8e
    9e02:	4628      	mov	r0, r5
    9e04:	f000 fd73 	bl	a8ee <assert_post_action>
    9e08:	e7a5      	b.n	9d56 <z_timer_expiration_handler+0x1e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9e0a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    9e0e:	492c      	ldr	r1, [pc, #176]	; (9ec0 <z_timer_expiration_handler+0x188>)
    9e10:	4620      	mov	r0, r4
    9e12:	f7ff fc79 	bl	9708 <z_add_timeout>
    9e16:	e7ad      	b.n	9d74 <z_timer_expiration_handler+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9e18:	4d25      	ldr	r5, [pc, #148]	; (9eb0 <z_timer_expiration_handler+0x178>)
    9e1a:	23b9      	movs	r3, #185	; 0xb9
    9e1c:	462a      	mov	r2, r5
    9e1e:	4929      	ldr	r1, [pc, #164]	; (9ec4 <z_timer_expiration_handler+0x18c>)
    9e20:	4825      	ldr	r0, [pc, #148]	; (9eb8 <z_timer_expiration_handler+0x180>)
    9e22:	f000 fd6b 	bl	a8fc <assert_print>
    9e26:	4921      	ldr	r1, [pc, #132]	; (9eac <z_timer_expiration_handler+0x174>)
    9e28:	4827      	ldr	r0, [pc, #156]	; (9ec8 <z_timer_expiration_handler+0x190>)
    9e2a:	f000 fd67 	bl	a8fc <assert_print>
    9e2e:	21b9      	movs	r1, #185	; 0xb9
    9e30:	4628      	mov	r0, r5
    9e32:	f000 fd5c 	bl	a8ee <assert_post_action>
    9e36:	e7a7      	b.n	9d88 <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    9e38:	4e1d      	ldr	r6, [pc, #116]	; (9eb0 <z_timer_expiration_handler+0x178>)
    9e3a:	238e      	movs	r3, #142	; 0x8e
    9e3c:	4632      	mov	r2, r6
    9e3e:	491d      	ldr	r1, [pc, #116]	; (9eb4 <z_timer_expiration_handler+0x17c>)
    9e40:	481d      	ldr	r0, [pc, #116]	; (9eb8 <z_timer_expiration_handler+0x180>)
    9e42:	f000 fd5b 	bl	a8fc <assert_print>
    9e46:	4919      	ldr	r1, [pc, #100]	; (9eac <z_timer_expiration_handler+0x174>)
    9e48:	481c      	ldr	r0, [pc, #112]	; (9ebc <z_timer_expiration_handler+0x184>)
    9e4a:	f000 fd57 	bl	a8fc <assert_print>
    9e4e:	218e      	movs	r1, #142	; 0x8e
    9e50:	4630      	mov	r0, r6
    9e52:	f000 fd4c 	bl	a8ee <assert_post_action>
    9e56:	e7ab      	b.n	9db0 <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9e58:	4814      	ldr	r0, [pc, #80]	; (9eac <z_timer_expiration_handler+0x174>)
    9e5a:	f7fd fbfb 	bl	7654 <z_spin_unlock_valid>
    9e5e:	b120      	cbz	r0, 9e6a <z_timer_expiration_handler+0x132>
    9e60:	f385 8811 	msr	BASEPRI, r5
    9e64:	f3bf 8f6f 	isb	sy
		return;
    9e68:	e7be      	b.n	9de8 <z_timer_expiration_handler+0xb0>
    9e6a:	4c11      	ldr	r4, [pc, #68]	; (9eb0 <z_timer_expiration_handler+0x178>)
    9e6c:	23b9      	movs	r3, #185	; 0xb9
    9e6e:	4622      	mov	r2, r4
    9e70:	4914      	ldr	r1, [pc, #80]	; (9ec4 <z_timer_expiration_handler+0x18c>)
    9e72:	4811      	ldr	r0, [pc, #68]	; (9eb8 <z_timer_expiration_handler+0x180>)
    9e74:	f000 fd42 	bl	a8fc <assert_print>
    9e78:	490c      	ldr	r1, [pc, #48]	; (9eac <z_timer_expiration_handler+0x174>)
    9e7a:	4813      	ldr	r0, [pc, #76]	; (9ec8 <z_timer_expiration_handler+0x190>)
    9e7c:	f000 fd3e 	bl	a8fc <assert_print>
    9e80:	21b9      	movs	r1, #185	; 0xb9
    9e82:	4620      	mov	r0, r4
    9e84:	f000 fd33 	bl	a8ee <assert_post_action>
    9e88:	e7ea      	b.n	9e60 <z_timer_expiration_handler+0x128>
    9e8a:	4e09      	ldr	r6, [pc, #36]	; (9eb0 <z_timer_expiration_handler+0x178>)
    9e8c:	23b9      	movs	r3, #185	; 0xb9
    9e8e:	4632      	mov	r2, r6
    9e90:	490c      	ldr	r1, [pc, #48]	; (9ec4 <z_timer_expiration_handler+0x18c>)
    9e92:	4809      	ldr	r0, [pc, #36]	; (9eb8 <z_timer_expiration_handler+0x180>)
    9e94:	f000 fd32 	bl	a8fc <assert_print>
    9e98:	4904      	ldr	r1, [pc, #16]	; (9eac <z_timer_expiration_handler+0x174>)
    9e9a:	480b      	ldr	r0, [pc, #44]	; (9ec8 <z_timer_expiration_handler+0x190>)
    9e9c:	f000 fd2e 	bl	a8fc <assert_print>
    9ea0:	21b9      	movs	r1, #185	; 0xb9
    9ea2:	4630      	mov	r0, r6
    9ea4:	f000 fd23 	bl	a8ee <assert_post_action>
    9ea8:	e797      	b.n	9dda <z_timer_expiration_handler+0xa2>
    9eaa:	bf00      	nop
    9eac:	20005264 	.word	0x20005264
    9eb0:	0000c400 	.word	0x0000c400
    9eb4:	0000c460 	.word	0x0000c460
    9eb8:	0000c254 	.word	0x0000c254
    9ebc:	0000c478 	.word	0x0000c478
    9ec0:	00009d39 	.word	0x00009d39
    9ec4:	0000c430 	.word	0x0000c430
    9ec8:	0000c448 	.word	0x0000c448

00009ecc <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    9ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ed0:	9f06      	ldr	r7, [sp, #24]
    9ed2:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9eda:	bf08      	it	eq
    9edc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    9ee0:	d02f      	beq.n	9f42 <z_impl_k_timer_start+0x76>
    9ee2:	4605      	mov	r5, r0
    9ee4:	4614      	mov	r4, r2
    9ee6:	461e      	mov	r6, r3
    9ee8:	4611      	mov	r1, r2
    9eea:	4618      	mov	r0, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    9eec:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    9ef0:	bf08      	it	eq
    9ef2:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    9ef6:	d00d      	beq.n	9f14 <z_impl_k_timer_start+0x48>
    9ef8:	ea57 0c08 	orrs.w	ip, r7, r8
    9efc:	d00a      	beq.n	9f14 <z_impl_k_timer_start+0x48>
	    Z_TICK_ABS(period.ticks) < 0) {
    9efe:	f06f 0c01 	mvn.w	ip, #1
    9f02:	ebbc 0c07 	subs.w	ip, ip, r7
    9f06:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    9f0a:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    9f0e:	f1bc 0f00 	cmp.w	ip, #0
    9f12:	db18      	blt.n	9f46 <z_impl_k_timer_start+0x7a>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    9f14:	f06f 0301 	mvn.w	r3, #1
    9f18:	1a5b      	subs	r3, r3, r1
    9f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9f1e:	eb63 0300 	sbc.w	r3, r3, r0
    9f22:	2b00      	cmp	r3, #0
    9f24:	db1a      	blt.n	9f5c <z_impl_k_timer_start+0x90>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    9f26:	4628      	mov	r0, r5
    9f28:	f7ff fcd2 	bl	98d0 <z_abort_timeout>
	timer->period = period;
    9f2c:	62af      	str	r7, [r5, #40]	; 0x28
    9f2e:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    9f32:	2300      	movs	r3, #0
    9f34:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9f36:	4622      	mov	r2, r4
    9f38:	4633      	mov	r3, r6
    9f3a:	490e      	ldr	r1, [pc, #56]	; (9f74 <z_impl_k_timer_start+0xa8>)
    9f3c:	4628      	mov	r0, r5
    9f3e:	f7ff fbe3 	bl	9708 <z_add_timeout>
		     duration);
}
    9f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    9f46:	2f02      	cmp	r7, #2
    9f48:	f178 0300 	sbcs.w	r3, r8, #0
    9f4c:	da02      	bge.n	9f54 <z_impl_k_timer_start+0x88>
    9f4e:	2702      	movs	r7, #2
    9f50:	f04f 0800 	mov.w	r8, #0
    9f54:	3f01      	subs	r7, #1
    9f56:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
    9f5a:	e7db      	b.n	9f14 <z_impl_k_timer_start+0x48>
		duration.ticks = MAX(duration.ticks - 1, 0);
    9f5c:	460c      	mov	r4, r1
    9f5e:	4606      	mov	r6, r0
    9f60:	2901      	cmp	r1, #1
    9f62:	f170 0300 	sbcs.w	r3, r0, #0
    9f66:	da01      	bge.n	9f6c <z_impl_k_timer_start+0xa0>
    9f68:	2401      	movs	r4, #1
    9f6a:	2600      	movs	r6, #0
    9f6c:	3c01      	subs	r4, #1
    9f6e:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    9f72:	e7d8      	b.n	9f26 <z_impl_k_timer_start+0x5a>
    9f74:	00009d39 	.word	0x00009d39

00009f78 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    9f78:	4b01      	ldr	r3, [pc, #4]	; (9f80 <k_thread_system_pool_assign+0x8>)
    9f7a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
    9f7e:	4770      	bx	lr
    9f80:	200041c4 	.word	0x200041c4

00009f84 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    9f84:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    9f86:	4a03      	ldr	r2, [pc, #12]	; (9f94 <boot_banner+0x10>)
    9f88:	4903      	ldr	r1, [pc, #12]	; (9f98 <boot_banner+0x14>)
    9f8a:	4804      	ldr	r0, [pc, #16]	; (9f9c <boot_banner+0x18>)
    9f8c:	f000 fbad 	bl	a6ea <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    9f90:	bd08      	pop	{r3, pc}
    9f92:	bf00      	nop
    9f94:	0000d164 	.word	0x0000d164
    9f98:	0000de9c 	.word	0x0000de9c
    9f9c:	0000deac 	.word	0x0000deac

00009fa0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    9fa0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    9fa2:	4c0f      	ldr	r4, [pc, #60]	; (9fe0 <statics_init+0x40>)
    9fa4:	e008      	b.n	9fb8 <statics_init+0x18>
    9fa6:	4b0f      	ldr	r3, [pc, #60]	; (9fe4 <statics_init+0x44>)
    9fa8:	429c      	cmp	r4, r3
    9faa:	d217      	bcs.n	9fdc <statics_init+0x3c>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    9fac:	68a2      	ldr	r2, [r4, #8]
    9fae:	6861      	ldr	r1, [r4, #4]
    9fb0:	4620      	mov	r0, r4
    9fb2:	f001 fecb 	bl	bd4c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    9fb6:	3418      	adds	r4, #24
    9fb8:	4b0a      	ldr	r3, [pc, #40]	; (9fe4 <statics_init+0x44>)
    9fba:	429c      	cmp	r4, r3
    9fbc:	d9f3      	bls.n	9fa6 <statics_init+0x6>
    9fbe:	4d0a      	ldr	r5, [pc, #40]	; (9fe8 <statics_init+0x48>)
    9fc0:	2318      	movs	r3, #24
    9fc2:	462a      	mov	r2, r5
    9fc4:	4909      	ldr	r1, [pc, #36]	; (9fec <statics_init+0x4c>)
    9fc6:	480a      	ldr	r0, [pc, #40]	; (9ff0 <statics_init+0x50>)
    9fc8:	f000 fc98 	bl	a8fc <assert_print>
    9fcc:	4809      	ldr	r0, [pc, #36]	; (9ff4 <statics_init+0x54>)
    9fce:	f000 fc95 	bl	a8fc <assert_print>
    9fd2:	2118      	movs	r1, #24
    9fd4:	4628      	mov	r0, r5
    9fd6:	f000 fc8a 	bl	a8ee <assert_post_action>
    9fda:	e7e4      	b.n	9fa6 <statics_init+0x6>
		}
	}
	return 0;
}
    9fdc:	2000      	movs	r0, #0
    9fde:	bd38      	pop	{r3, r4, r5, pc}
    9fe0:	200041c4 	.word	0x200041c4
    9fe4:	200041dc 	.word	0x200041dc
    9fe8:	0000ded4 	.word	0x0000ded4
    9fec:	0000def8 	.word	0x0000def8
    9ff0:	0000c254 	.word	0x0000c254
    9ff4:	0000da1c 	.word	0x0000da1c

00009ff8 <calloc>:
    9ff8:	4b02      	ldr	r3, [pc, #8]	; (a004 <calloc+0xc>)
    9ffa:	460a      	mov	r2, r1
    9ffc:	4601      	mov	r1, r0
    9ffe:	6818      	ldr	r0, [r3, #0]
    a000:	f001 bec2 	b.w	bd88 <_calloc_r>
    a004:	200040ec 	.word	0x200040ec

0000a008 <malloc>:
    a008:	4b02      	ldr	r3, [pc, #8]	; (a014 <malloc+0xc>)
    a00a:	4601      	mov	r1, r0
    a00c:	6818      	ldr	r0, [r3, #0]
    a00e:	f000 b803 	b.w	a018 <_malloc_r>
    a012:	bf00      	nop
    a014:	200040ec 	.word	0x200040ec

0000a018 <_malloc_r>:
    a018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a01a:	1ccd      	adds	r5, r1, #3
    a01c:	f025 0503 	bic.w	r5, r5, #3
    a020:	3508      	adds	r5, #8
    a022:	2d0c      	cmp	r5, #12
    a024:	bf38      	it	cc
    a026:	250c      	movcc	r5, #12
    a028:	2d00      	cmp	r5, #0
    a02a:	4606      	mov	r6, r0
    a02c:	db01      	blt.n	a032 <_malloc_r+0x1a>
    a02e:	42a9      	cmp	r1, r5
    a030:	d903      	bls.n	a03a <_malloc_r+0x22>
    a032:	230c      	movs	r3, #12
    a034:	6033      	str	r3, [r6, #0]
    a036:	2000      	movs	r0, #0
    a038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a03a:	f000 f857 	bl	a0ec <__malloc_lock>
    a03e:	4921      	ldr	r1, [pc, #132]	; (a0c4 <_malloc_r+0xac>)
    a040:	680a      	ldr	r2, [r1, #0]
    a042:	4614      	mov	r4, r2
    a044:	b99c      	cbnz	r4, a06e <_malloc_r+0x56>
    a046:	4f20      	ldr	r7, [pc, #128]	; (a0c8 <_malloc_r+0xb0>)
    a048:	683b      	ldr	r3, [r7, #0]
    a04a:	b923      	cbnz	r3, a056 <_malloc_r+0x3e>
    a04c:	4621      	mov	r1, r4
    a04e:	4630      	mov	r0, r6
    a050:	f000 f83c 	bl	a0cc <_sbrk_r>
    a054:	6038      	str	r0, [r7, #0]
    a056:	4629      	mov	r1, r5
    a058:	4630      	mov	r0, r6
    a05a:	f000 f837 	bl	a0cc <_sbrk_r>
    a05e:	1c43      	adds	r3, r0, #1
    a060:	d123      	bne.n	a0aa <_malloc_r+0x92>
    a062:	230c      	movs	r3, #12
    a064:	6033      	str	r3, [r6, #0]
    a066:	4630      	mov	r0, r6
    a068:	f000 f846 	bl	a0f8 <__malloc_unlock>
    a06c:	e7e3      	b.n	a036 <_malloc_r+0x1e>
    a06e:	6823      	ldr	r3, [r4, #0]
    a070:	1b5b      	subs	r3, r3, r5
    a072:	d417      	bmi.n	a0a4 <_malloc_r+0x8c>
    a074:	2b0b      	cmp	r3, #11
    a076:	d903      	bls.n	a080 <_malloc_r+0x68>
    a078:	6023      	str	r3, [r4, #0]
    a07a:	441c      	add	r4, r3
    a07c:	6025      	str	r5, [r4, #0]
    a07e:	e004      	b.n	a08a <_malloc_r+0x72>
    a080:	6863      	ldr	r3, [r4, #4]
    a082:	42a2      	cmp	r2, r4
    a084:	bf0c      	ite	eq
    a086:	600b      	streq	r3, [r1, #0]
    a088:	6053      	strne	r3, [r2, #4]
    a08a:	4630      	mov	r0, r6
    a08c:	f000 f834 	bl	a0f8 <__malloc_unlock>
    a090:	f104 000b 	add.w	r0, r4, #11
    a094:	1d23      	adds	r3, r4, #4
    a096:	f020 0007 	bic.w	r0, r0, #7
    a09a:	1ac2      	subs	r2, r0, r3
    a09c:	d0cc      	beq.n	a038 <_malloc_r+0x20>
    a09e:	1a1b      	subs	r3, r3, r0
    a0a0:	50a3      	str	r3, [r4, r2]
    a0a2:	e7c9      	b.n	a038 <_malloc_r+0x20>
    a0a4:	4622      	mov	r2, r4
    a0a6:	6864      	ldr	r4, [r4, #4]
    a0a8:	e7cc      	b.n	a044 <_malloc_r+0x2c>
    a0aa:	1cc4      	adds	r4, r0, #3
    a0ac:	f024 0403 	bic.w	r4, r4, #3
    a0b0:	42a0      	cmp	r0, r4
    a0b2:	d0e3      	beq.n	a07c <_malloc_r+0x64>
    a0b4:	1a21      	subs	r1, r4, r0
    a0b6:	4630      	mov	r0, r6
    a0b8:	f000 f808 	bl	a0cc <_sbrk_r>
    a0bc:	3001      	adds	r0, #1
    a0be:	d1dd      	bne.n	a07c <_malloc_r+0x64>
    a0c0:	e7cf      	b.n	a062 <_malloc_r+0x4a>
    a0c2:	bf00      	nop
    a0c4:	20005268 	.word	0x20005268
    a0c8:	2000526c 	.word	0x2000526c

0000a0cc <_sbrk_r>:
    a0cc:	b538      	push	{r3, r4, r5, lr}
    a0ce:	4d06      	ldr	r5, [pc, #24]	; (a0e8 <_sbrk_r+0x1c>)
    a0d0:	2300      	movs	r3, #0
    a0d2:	4604      	mov	r4, r0
    a0d4:	4608      	mov	r0, r1
    a0d6:	602b      	str	r3, [r5, #0]
    a0d8:	f7f9 fd56 	bl	3b88 <_sbrk>
    a0dc:	1c43      	adds	r3, r0, #1
    a0de:	d102      	bne.n	a0e6 <_sbrk_r+0x1a>
    a0e0:	682b      	ldr	r3, [r5, #0]
    a0e2:	b103      	cbz	r3, a0e6 <_sbrk_r+0x1a>
    a0e4:	6023      	str	r3, [r4, #0]
    a0e6:	bd38      	pop	{r3, r4, r5, pc}
    a0e8:	20005270 	.word	0x20005270

0000a0ec <__malloc_lock>:
    a0ec:	4801      	ldr	r0, [pc, #4]	; (a0f4 <__malloc_lock+0x8>)
    a0ee:	f7f9 bd61 	b.w	3bb4 <__retarget_lock_acquire_recursive>
    a0f2:	bf00      	nop
    a0f4:	200041dc 	.word	0x200041dc

0000a0f8 <__malloc_unlock>:
    a0f8:	4801      	ldr	r0, [pc, #4]	; (a100 <__malloc_unlock+0x8>)
    a0fa:	f7f9 bd7b 	b.w	3bf4 <__retarget_lock_release_recursive>
    a0fe:	bf00      	nop
    a100:	200041dc 	.word	0x200041dc

0000a104 <nrf_cc3xx_platform_init_no_rng>:
    a104:	b510      	push	{r4, lr}
    a106:	4c0a      	ldr	r4, [pc, #40]	; (a130 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    a108:	6823      	ldr	r3, [r4, #0]
    a10a:	b11b      	cbz	r3, a114 <nrf_cc3xx_platform_init_no_rng+0x10>
    a10c:	2301      	movs	r3, #1
    a10e:	6023      	str	r3, [r4, #0]
    a110:	2000      	movs	r0, #0
    a112:	bd10      	pop	{r4, pc}
    a114:	f000 f8ce 	bl	a2b4 <CC_LibInitNoRng>
    a118:	2800      	cmp	r0, #0
    a11a:	d0f7      	beq.n	a10c <nrf_cc3xx_platform_init_no_rng+0x8>
    a11c:	3801      	subs	r0, #1
    a11e:	2806      	cmp	r0, #6
    a120:	d803      	bhi.n	a12a <nrf_cc3xx_platform_init_no_rng+0x26>
    a122:	4b04      	ldr	r3, [pc, #16]	; (a134 <nrf_cc3xx_platform_init_no_rng+0x30>)
    a124:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    a128:	bd10      	pop	{r4, pc}
    a12a:	4803      	ldr	r0, [pc, #12]	; (a138 <nrf_cc3xx_platform_init_no_rng+0x34>)
    a12c:	bd10      	pop	{r4, pc}
    a12e:	bf00      	nop
    a130:	20005274 	.word	0x20005274
    a134:	0000df70 	.word	0x0000df70
    a138:	ffff8ffe 	.word	0xffff8ffe

0000a13c <nrf_cc3xx_platform_abort>:
    a13c:	f3bf 8f4f 	dsb	sy
    a140:	4905      	ldr	r1, [pc, #20]	; (a158 <nrf_cc3xx_platform_abort+0x1c>)
    a142:	4b06      	ldr	r3, [pc, #24]	; (a15c <nrf_cc3xx_platform_abort+0x20>)
    a144:	68ca      	ldr	r2, [r1, #12]
    a146:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    a14a:	4313      	orrs	r3, r2
    a14c:	60cb      	str	r3, [r1, #12]
    a14e:	f3bf 8f4f 	dsb	sy
    a152:	bf00      	nop
    a154:	e7fd      	b.n	a152 <nrf_cc3xx_platform_abort+0x16>
    a156:	bf00      	nop
    a158:	e000ed00 	.word	0xe000ed00
    a15c:	05fa0004 	.word	0x05fa0004

0000a160 <CC_PalAbort>:
    a160:	b410      	push	{r4}
    a162:	4b09      	ldr	r3, [pc, #36]	; (a188 <CC_PalAbort+0x28>)
    a164:	4909      	ldr	r1, [pc, #36]	; (a18c <CC_PalAbort+0x2c>)
    a166:	4c0a      	ldr	r4, [pc, #40]	; (a190 <CC_PalAbort+0x30>)
    a168:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    a16c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    a170:	6849      	ldr	r1, [r1, #4]
    a172:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    a176:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    a17a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    a17e:	2300      	movs	r3, #0
    a180:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    a184:	bc10      	pop	{r4}
    a186:	4708      	bx	r1
    a188:	5002b000 	.word	0x5002b000
    a18c:	20004150 	.word	0x20004150
    a190:	5002a000 	.word	0x5002a000

0000a194 <nrf_cc3xx_platform_set_abort>:
    a194:	e9d0 1200 	ldrd	r1, r2, [r0]
    a198:	4b01      	ldr	r3, [pc, #4]	; (a1a0 <nrf_cc3xx_platform_set_abort+0xc>)
    a19a:	e9c3 1200 	strd	r1, r2, [r3]
    a19e:	4770      	bx	lr
    a1a0:	20004150 	.word	0x20004150

0000a1a4 <mutex_free>:
    a1a4:	b510      	push	{r4, lr}
    a1a6:	4604      	mov	r4, r0
    a1a8:	b130      	cbz	r0, a1b8 <mutex_free+0x14>
    a1aa:	6863      	ldr	r3, [r4, #4]
    a1ac:	06db      	lsls	r3, r3, #27
    a1ae:	d502      	bpl.n	a1b6 <mutex_free+0x12>
    a1b0:	2300      	movs	r3, #0
    a1b2:	6023      	str	r3, [r4, #0]
    a1b4:	6063      	str	r3, [r4, #4]
    a1b6:	bd10      	pop	{r4, pc}
    a1b8:	4b02      	ldr	r3, [pc, #8]	; (a1c4 <mutex_free+0x20>)
    a1ba:	4803      	ldr	r0, [pc, #12]	; (a1c8 <mutex_free+0x24>)
    a1bc:	685b      	ldr	r3, [r3, #4]
    a1be:	4798      	blx	r3
    a1c0:	e7f3      	b.n	a1aa <mutex_free+0x6>
    a1c2:	bf00      	nop
    a1c4:	20004150 	.word	0x20004150
    a1c8:	0000df8c 	.word	0x0000df8c

0000a1cc <mutex_lock>:
    a1cc:	b1b0      	cbz	r0, a1fc <mutex_lock+0x30>
    a1ce:	6843      	ldr	r3, [r0, #4]
    a1d0:	b193      	cbz	r3, a1f8 <mutex_lock+0x2c>
    a1d2:	06db      	lsls	r3, r3, #27
    a1d4:	d50e      	bpl.n	a1f4 <mutex_lock+0x28>
    a1d6:	2301      	movs	r3, #1
    a1d8:	e850 2f00 	ldrex	r2, [r0]
    a1dc:	4619      	mov	r1, r3
    a1de:	e840 1c00 	strex	ip, r1, [r0]
    a1e2:	f09c 0f00 	teq	ip, #0
    a1e6:	d1f7      	bne.n	a1d8 <mutex_lock+0xc>
    a1e8:	2a01      	cmp	r2, #1
    a1ea:	d0f5      	beq.n	a1d8 <mutex_lock+0xc>
    a1ec:	f3bf 8f5f 	dmb	sy
    a1f0:	2000      	movs	r0, #0
    a1f2:	4770      	bx	lr
    a1f4:	4803      	ldr	r0, [pc, #12]	; (a204 <mutex_lock+0x38>)
    a1f6:	4770      	bx	lr
    a1f8:	4803      	ldr	r0, [pc, #12]	; (a208 <mutex_lock+0x3c>)
    a1fa:	4770      	bx	lr
    a1fc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a200:	4770      	bx	lr
    a202:	bf00      	nop
    a204:	ffff8fe9 	.word	0xffff8fe9
    a208:	ffff8fea 	.word	0xffff8fea

0000a20c <mutex_unlock>:
    a20c:	b168      	cbz	r0, a22a <mutex_unlock+0x1e>
    a20e:	6843      	ldr	r3, [r0, #4]
    a210:	b13b      	cbz	r3, a222 <mutex_unlock+0x16>
    a212:	06db      	lsls	r3, r3, #27
    a214:	d507      	bpl.n	a226 <mutex_unlock+0x1a>
    a216:	f3bf 8f5f 	dmb	sy
    a21a:	2300      	movs	r3, #0
    a21c:	6003      	str	r3, [r0, #0]
    a21e:	4618      	mov	r0, r3
    a220:	4770      	bx	lr
    a222:	4803      	ldr	r0, [pc, #12]	; (a230 <mutex_unlock+0x24>)
    a224:	4770      	bx	lr
    a226:	4803      	ldr	r0, [pc, #12]	; (a234 <mutex_unlock+0x28>)
    a228:	4770      	bx	lr
    a22a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    a22e:	4770      	bx	lr
    a230:	ffff8fea 	.word	0xffff8fea
    a234:	ffff8fe9 	.word	0xffff8fe9

0000a238 <mutex_init>:
    a238:	b510      	push	{r4, lr}
    a23a:	4604      	mov	r4, r0
    a23c:	b120      	cbz	r0, a248 <mutex_init+0x10>
    a23e:	2200      	movs	r2, #0
    a240:	2311      	movs	r3, #17
    a242:	6022      	str	r2, [r4, #0]
    a244:	6063      	str	r3, [r4, #4]
    a246:	bd10      	pop	{r4, pc}
    a248:	4801      	ldr	r0, [pc, #4]	; (a250 <mutex_init+0x18>)
    a24a:	f7ff ff89 	bl	a160 <CC_PalAbort>
    a24e:	e7f6      	b.n	a23e <mutex_init+0x6>
    a250:	0000dfb4 	.word	0x0000dfb4

0000a254 <nrf_cc3xx_platform_set_mutexes>:
    a254:	b570      	push	{r4, r5, r6, lr}
    a256:	e9d0 2300 	ldrd	r2, r3, [r0]
    a25a:	4c13      	ldr	r4, [pc, #76]	; (a2a8 <nrf_cc3xx_platform_set_mutexes+0x54>)
    a25c:	4d13      	ldr	r5, [pc, #76]	; (a2ac <nrf_cc3xx_platform_set_mutexes+0x58>)
    a25e:	6063      	str	r3, [r4, #4]
    a260:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    a264:	e9c4 3002 	strd	r3, r0, [r4, #8]
    a268:	6022      	str	r2, [r4, #0]
    a26a:	4b11      	ldr	r3, [pc, #68]	; (a2b0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    a26c:	6808      	ldr	r0, [r1, #0]
    a26e:	6018      	str	r0, [r3, #0]
    a270:	6848      	ldr	r0, [r1, #4]
    a272:	6058      	str	r0, [r3, #4]
    a274:	6888      	ldr	r0, [r1, #8]
    a276:	6098      	str	r0, [r3, #8]
    a278:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    a27c:	60d8      	str	r0, [r3, #12]
    a27e:	6119      	str	r1, [r3, #16]
    a280:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    a284:	06db      	lsls	r3, r3, #27
    a286:	d50d      	bpl.n	a2a4 <nrf_cc3xx_platform_set_mutexes+0x50>
    a288:	2300      	movs	r3, #0
    a28a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    a28e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    a292:	f505 708a 	add.w	r0, r5, #276	; 0x114
    a296:	4790      	blx	r2
    a298:	6823      	ldr	r3, [r4, #0]
    a29a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    a29e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a2a2:	4718      	bx	r3
    a2a4:	bd70      	pop	{r4, r5, r6, pc}
    a2a6:	bf00      	nop
    a2a8:	20004160 	.word	0x20004160
    a2ac:	2000528c 	.word	0x2000528c
    a2b0:	20004170 	.word	0x20004170

0000a2b4 <CC_LibInitNoRng>:
    a2b4:	b538      	push	{r3, r4, r5, lr}
    a2b6:	f000 f82f 	bl	a318 <CC_HalInit>
    a2ba:	b120      	cbz	r0, a2c6 <CC_LibInitNoRng+0x12>
    a2bc:	2403      	movs	r4, #3
    a2be:	f000 f863 	bl	a388 <CC_PalTerminate>
    a2c2:	4620      	mov	r0, r4
    a2c4:	bd38      	pop	{r3, r4, r5, pc}
    a2c6:	f000 f831 	bl	a32c <CC_PalInit>
    a2ca:	b998      	cbnz	r0, a2f4 <CC_LibInitNoRng+0x40>
    a2cc:	f000 f8ac 	bl	a428 <CC_PalPowerSaveModeSelect>
    a2d0:	b998      	cbnz	r0, a2fa <CC_LibInitNoRng+0x46>
    a2d2:	4d0f      	ldr	r5, [pc, #60]	; (a310 <CC_LibInitNoRng+0x5c>)
    a2d4:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    a2d8:	0e1b      	lsrs	r3, r3, #24
    a2da:	2bf0      	cmp	r3, #240	; 0xf0
    a2dc:	d108      	bne.n	a2f0 <CC_LibInitNoRng+0x3c>
    a2de:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    a2e2:	4b0c      	ldr	r3, [pc, #48]	; (a314 <CC_LibInitNoRng+0x60>)
    a2e4:	429a      	cmp	r2, r3
    a2e6:	d00a      	beq.n	a2fe <CC_LibInitNoRng+0x4a>
    a2e8:	2407      	movs	r4, #7
    a2ea:	f000 f817 	bl	a31c <CC_HalTerminate>
    a2ee:	e7e6      	b.n	a2be <CC_LibInitNoRng+0xa>
    a2f0:	2406      	movs	r4, #6
    a2f2:	e7fa      	b.n	a2ea <CC_LibInitNoRng+0x36>
    a2f4:	2404      	movs	r4, #4
    a2f6:	4620      	mov	r0, r4
    a2f8:	bd38      	pop	{r3, r4, r5, pc}
    a2fa:	2400      	movs	r4, #0
    a2fc:	e7f5      	b.n	a2ea <CC_LibInitNoRng+0x36>
    a2fe:	2001      	movs	r0, #1
    a300:	f000 f892 	bl	a428 <CC_PalPowerSaveModeSelect>
    a304:	4604      	mov	r4, r0
    a306:	2800      	cmp	r0, #0
    a308:	d1f7      	bne.n	a2fa <CC_LibInitNoRng+0x46>
    a30a:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    a30e:	e7d8      	b.n	a2c2 <CC_LibInitNoRng+0xe>
    a310:	5002b000 	.word	0x5002b000
    a314:	20e00000 	.word	0x20e00000

0000a318 <CC_HalInit>:
    a318:	2000      	movs	r0, #0
    a31a:	4770      	bx	lr

0000a31c <CC_HalTerminate>:
    a31c:	2000      	movs	r0, #0
    a31e:	4770      	bx	lr

0000a320 <CC_HalMaskInterrupt>:
    a320:	4b01      	ldr	r3, [pc, #4]	; (a328 <CC_HalMaskInterrupt+0x8>)
    a322:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    a326:	4770      	bx	lr
    a328:	5002b000 	.word	0x5002b000

0000a32c <CC_PalInit>:
    a32c:	b510      	push	{r4, lr}
    a32e:	4811      	ldr	r0, [pc, #68]	; (a374 <CC_PalInit+0x48>)
    a330:	f000 f848 	bl	a3c4 <CC_PalMutexCreate>
    a334:	b100      	cbz	r0, a338 <CC_PalInit+0xc>
    a336:	bd10      	pop	{r4, pc}
    a338:	480f      	ldr	r0, [pc, #60]	; (a378 <CC_PalInit+0x4c>)
    a33a:	f000 f843 	bl	a3c4 <CC_PalMutexCreate>
    a33e:	2800      	cmp	r0, #0
    a340:	d1f9      	bne.n	a336 <CC_PalInit+0xa>
    a342:	4c0e      	ldr	r4, [pc, #56]	; (a37c <CC_PalInit+0x50>)
    a344:	4620      	mov	r0, r4
    a346:	f000 f83d 	bl	a3c4 <CC_PalMutexCreate>
    a34a:	2800      	cmp	r0, #0
    a34c:	d1f3      	bne.n	a336 <CC_PalInit+0xa>
    a34e:	4b0c      	ldr	r3, [pc, #48]	; (a380 <CC_PalInit+0x54>)
    a350:	480c      	ldr	r0, [pc, #48]	; (a384 <CC_PalInit+0x58>)
    a352:	601c      	str	r4, [r3, #0]
    a354:	f000 f836 	bl	a3c4 <CC_PalMutexCreate>
    a358:	4601      	mov	r1, r0
    a35a:	2800      	cmp	r0, #0
    a35c:	d1eb      	bne.n	a336 <CC_PalInit+0xa>
    a35e:	f000 f82d 	bl	a3bc <CC_PalDmaInit>
    a362:	4604      	mov	r4, r0
    a364:	b108      	cbz	r0, a36a <CC_PalInit+0x3e>
    a366:	4620      	mov	r0, r4
    a368:	bd10      	pop	{r4, pc}
    a36a:	f000 f83f 	bl	a3ec <CC_PalPowerSaveModeInit>
    a36e:	4620      	mov	r0, r4
    a370:	e7fa      	b.n	a368 <CC_PalInit+0x3c>
    a372:	bf00      	nop
    a374:	200041a8 	.word	0x200041a8
    a378:	2000419c 	.word	0x2000419c
    a37c:	200041a4 	.word	0x200041a4
    a380:	200041ac 	.word	0x200041ac
    a384:	200041a0 	.word	0x200041a0

0000a388 <CC_PalTerminate>:
    a388:	b508      	push	{r3, lr}
    a38a:	4808      	ldr	r0, [pc, #32]	; (a3ac <CC_PalTerminate+0x24>)
    a38c:	f000 f824 	bl	a3d8 <CC_PalMutexDestroy>
    a390:	4807      	ldr	r0, [pc, #28]	; (a3b0 <CC_PalTerminate+0x28>)
    a392:	f000 f821 	bl	a3d8 <CC_PalMutexDestroy>
    a396:	4807      	ldr	r0, [pc, #28]	; (a3b4 <CC_PalTerminate+0x2c>)
    a398:	f000 f81e 	bl	a3d8 <CC_PalMutexDestroy>
    a39c:	4806      	ldr	r0, [pc, #24]	; (a3b8 <CC_PalTerminate+0x30>)
    a39e:	f000 f81b 	bl	a3d8 <CC_PalMutexDestroy>
    a3a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    a3a6:	f000 b80b 	b.w	a3c0 <CC_PalDmaTerminate>
    a3aa:	bf00      	nop
    a3ac:	200041a8 	.word	0x200041a8
    a3b0:	2000419c 	.word	0x2000419c
    a3b4:	200041a4 	.word	0x200041a4
    a3b8:	200041a0 	.word	0x200041a0

0000a3bc <CC_PalDmaInit>:
    a3bc:	2000      	movs	r0, #0
    a3be:	4770      	bx	lr

0000a3c0 <CC_PalDmaTerminate>:
    a3c0:	4770      	bx	lr
    a3c2:	bf00      	nop

0000a3c4 <CC_PalMutexCreate>:
    a3c4:	b508      	push	{r3, lr}
    a3c6:	4b03      	ldr	r3, [pc, #12]	; (a3d4 <CC_PalMutexCreate+0x10>)
    a3c8:	6802      	ldr	r2, [r0, #0]
    a3ca:	681b      	ldr	r3, [r3, #0]
    a3cc:	6810      	ldr	r0, [r2, #0]
    a3ce:	4798      	blx	r3
    a3d0:	2000      	movs	r0, #0
    a3d2:	bd08      	pop	{r3, pc}
    a3d4:	20004160 	.word	0x20004160

0000a3d8 <CC_PalMutexDestroy>:
    a3d8:	b508      	push	{r3, lr}
    a3da:	4b03      	ldr	r3, [pc, #12]	; (a3e8 <CC_PalMutexDestroy+0x10>)
    a3dc:	6802      	ldr	r2, [r0, #0]
    a3de:	685b      	ldr	r3, [r3, #4]
    a3e0:	6810      	ldr	r0, [r2, #0]
    a3e2:	4798      	blx	r3
    a3e4:	2000      	movs	r0, #0
    a3e6:	bd08      	pop	{r3, pc}
    a3e8:	20004160 	.word	0x20004160

0000a3ec <CC_PalPowerSaveModeInit>:
    a3ec:	b570      	push	{r4, r5, r6, lr}
    a3ee:	4c09      	ldr	r4, [pc, #36]	; (a414 <CC_PalPowerSaveModeInit+0x28>)
    a3f0:	4d09      	ldr	r5, [pc, #36]	; (a418 <CC_PalPowerSaveModeInit+0x2c>)
    a3f2:	6920      	ldr	r0, [r4, #16]
    a3f4:	68ab      	ldr	r3, [r5, #8]
    a3f6:	4798      	blx	r3
    a3f8:	b118      	cbz	r0, a402 <CC_PalPowerSaveModeInit+0x16>
    a3fa:	4b08      	ldr	r3, [pc, #32]	; (a41c <CC_PalPowerSaveModeInit+0x30>)
    a3fc:	4808      	ldr	r0, [pc, #32]	; (a420 <CC_PalPowerSaveModeInit+0x34>)
    a3fe:	685b      	ldr	r3, [r3, #4]
    a400:	4798      	blx	r3
    a402:	4a08      	ldr	r2, [pc, #32]	; (a424 <CC_PalPowerSaveModeInit+0x38>)
    a404:	68eb      	ldr	r3, [r5, #12]
    a406:	6920      	ldr	r0, [r4, #16]
    a408:	2100      	movs	r1, #0
    a40a:	6011      	str	r1, [r2, #0]
    a40c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a410:	4718      	bx	r3
    a412:	bf00      	nop
    a414:	20004170 	.word	0x20004170
    a418:	20004160 	.word	0x20004160
    a41c:	20004150 	.word	0x20004150
    a420:	0000dfd8 	.word	0x0000dfd8
    a424:	20005288 	.word	0x20005288

0000a428 <CC_PalPowerSaveModeSelect>:
    a428:	b570      	push	{r4, r5, r6, lr}
    a42a:	4d1b      	ldr	r5, [pc, #108]	; (a498 <CC_PalPowerSaveModeSelect+0x70>)
    a42c:	4e1b      	ldr	r6, [pc, #108]	; (a49c <CC_PalPowerSaveModeSelect+0x74>)
    a42e:	4604      	mov	r4, r0
    a430:	68b2      	ldr	r2, [r6, #8]
    a432:	6928      	ldr	r0, [r5, #16]
    a434:	4790      	blx	r2
    a436:	b9f8      	cbnz	r0, a478 <CC_PalPowerSaveModeSelect+0x50>
    a438:	b15c      	cbz	r4, a452 <CC_PalPowerSaveModeSelect+0x2a>
    a43a:	4c19      	ldr	r4, [pc, #100]	; (a4a0 <CC_PalPowerSaveModeSelect+0x78>)
    a43c:	6823      	ldr	r3, [r4, #0]
    a43e:	b1b3      	cbz	r3, a46e <CC_PalPowerSaveModeSelect+0x46>
    a440:	2b01      	cmp	r3, #1
    a442:	d01b      	beq.n	a47c <CC_PalPowerSaveModeSelect+0x54>
    a444:	3b01      	subs	r3, #1
    a446:	6023      	str	r3, [r4, #0]
    a448:	6928      	ldr	r0, [r5, #16]
    a44a:	68f3      	ldr	r3, [r6, #12]
    a44c:	4798      	blx	r3
    a44e:	2000      	movs	r0, #0
    a450:	bd70      	pop	{r4, r5, r6, pc}
    a452:	4c13      	ldr	r4, [pc, #76]	; (a4a0 <CC_PalPowerSaveModeSelect+0x78>)
    a454:	6821      	ldr	r1, [r4, #0]
    a456:	b941      	cbnz	r1, a46a <CC_PalPowerSaveModeSelect+0x42>
    a458:	4b12      	ldr	r3, [pc, #72]	; (a4a4 <CC_PalPowerSaveModeSelect+0x7c>)
    a45a:	2201      	movs	r2, #1
    a45c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    a460:	4a11      	ldr	r2, [pc, #68]	; (a4a8 <CC_PalPowerSaveModeSelect+0x80>)
    a462:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    a466:	2b00      	cmp	r3, #0
    a468:	d1fb      	bne.n	a462 <CC_PalPowerSaveModeSelect+0x3a>
    a46a:	3101      	adds	r1, #1
    a46c:	6021      	str	r1, [r4, #0]
    a46e:	68f3      	ldr	r3, [r6, #12]
    a470:	6928      	ldr	r0, [r5, #16]
    a472:	4798      	blx	r3
    a474:	2000      	movs	r0, #0
    a476:	bd70      	pop	{r4, r5, r6, pc}
    a478:	480c      	ldr	r0, [pc, #48]	; (a4ac <CC_PalPowerSaveModeSelect+0x84>)
    a47a:	bd70      	pop	{r4, r5, r6, pc}
    a47c:	4a0a      	ldr	r2, [pc, #40]	; (a4a8 <CC_PalPowerSaveModeSelect+0x80>)
    a47e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    a482:	2b00      	cmp	r3, #0
    a484:	d1fb      	bne.n	a47e <CC_PalPowerSaveModeSelect+0x56>
    a486:	4a07      	ldr	r2, [pc, #28]	; (a4a4 <CC_PalPowerSaveModeSelect+0x7c>)
    a488:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    a48c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    a490:	f7ff ff46 	bl	a320 <CC_HalMaskInterrupt>
    a494:	6823      	ldr	r3, [r4, #0]
    a496:	e7d5      	b.n	a444 <CC_PalPowerSaveModeSelect+0x1c>
    a498:	20004170 	.word	0x20004170
    a49c:	20004160 	.word	0x20004160
    a4a0:	20005288 	.word	0x20005288
    a4a4:	5002a000 	.word	0x5002a000
    a4a8:	5002b000 	.word	0x5002b000
    a4ac:	ffff8fe9 	.word	0xffff8fe9

0000a4b0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    a4b0:	4770      	bx	lr

0000a4b2 <open_cab>:
    uint8_t *buffersTaken;
};

// creates a new cab
cab *open_cab(char *name, int num, size_t dim, void *first)
{
    a4b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a4b6:	4604      	mov	r4, r0
    a4b8:	460e      	mov	r6, r1
    a4ba:	4690      	mov	r8, r2
    a4bc:	4699      	mov	r9, r3
    cab *new_cab = calloc(1, sizeof(cab));
    a4be:	2118      	movs	r1, #24
    a4c0:	2001      	movs	r0, #1
    a4c2:	f7ff fd99 	bl	9ff8 <calloc>
    a4c6:	4605      	mov	r5, r0
    new_cab->name = name;
    a4c8:	6044      	str	r4, [r0, #4]
    new_cab->num = num;
    a4ca:	6086      	str	r6, [r0, #8]
    new_cab->dim = dim;
    a4cc:	f8c0 800c 	str.w	r8, [r0, #12]
    new_cab->op_Mutex = (struct k_mutex*)calloc(1, sizeof(struct k_mutex));
    a4d0:	2114      	movs	r1, #20
    a4d2:	2001      	movs	r0, #1
    a4d4:	f7ff fd90 	bl	9ff8 <calloc>
    a4d8:	6028      	str	r0, [r5, #0]
	return z_impl_k_mutex_init(mutex);
    a4da:	f001 fbbc 	bl	bc56 <z_impl_k_mutex_init>
    k_mutex_init(new_cab->op_Mutex);
    // allocate the buffersTaken array
    new_cab->buffersTaken = (uint8_t *)calloc(num, sizeof(uint8_t));
    a4de:	2101      	movs	r1, #1
    a4e0:	4630      	mov	r0, r6
    a4e2:	f7ff fd89 	bl	9ff8 <calloc>
    a4e6:	6168      	str	r0, [r5, #20]
    for (size_t i = 0; i < num; i++)
    a4e8:	2400      	movs	r4, #0
    a4ea:	e003      	b.n	a4f4 <open_cab+0x42>
        new_cab->buffersTaken[i] = 0;
    a4ec:	696b      	ldr	r3, [r5, #20]
    a4ee:	2200      	movs	r2, #0
    a4f0:	551a      	strb	r2, [r3, r4]
    for (size_t i = 0; i < num; i++)
    a4f2:	3401      	adds	r4, #1
    a4f4:	42a6      	cmp	r6, r4
    a4f6:	d8f9      	bhi.n	a4ec <open_cab+0x3a>

    // allocate all buffers
    new_cab->buffers = (void **)calloc(num, sizeof(void *));
    a4f8:	2104      	movs	r1, #4
    a4fa:	4630      	mov	r0, r6
    a4fc:	f7ff fd7c 	bl	9ff8 <calloc>
    a500:	6128      	str	r0, [r5, #16]
    for (size_t i = 0; i < num; i++)
    a502:	2400      	movs	r4, #0
    a504:	e007      	b.n	a516 <open_cab+0x64>
    {
        new_cab->buffers[i] = (void *)calloc(1, dim);
    a506:	692f      	ldr	r7, [r5, #16]
    a508:	4641      	mov	r1, r8
    a50a:	2001      	movs	r0, #1
    a50c:	f7ff fd74 	bl	9ff8 <calloc>
    a510:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
    for (size_t i = 0; i < num; i++)
    a514:	3401      	adds	r4, #1
    a516:	42a6      	cmp	r6, r4
    a518:	d8f5      	bhi.n	a506 <open_cab+0x54>
    }

    memcpy(new_cab->buffers[0], first, dim);
    a51a:	692b      	ldr	r3, [r5, #16]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    a51c:	4642      	mov	r2, r8
    a51e:	4649      	mov	r1, r9
    a520:	6818      	ldr	r0, [r3, #0]
    a522:	f001 fc1b 	bl	bd5c <memcpy>
    new_cab->buffersTaken[0] = 1; // The first will always be taken
    a526:	696b      	ldr	r3, [r5, #20]
    a528:	2201      	movs	r2, #1
    a52a:	701a      	strb	r2, [r3, #0]
    return new_cab;
}
    a52c:	4628      	mov	r0, r5
    a52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000a532 <reserve>:

// returns a new buffer
void *reserve(cab *cab_id)
{
    a532:	b538      	push	{r3, r4, r5, lr}
    a534:	4605      	mov	r5, r0
    k_mutex_lock(cab_id->op_Mutex, K_FOREVER);
    a536:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    a538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a53c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a540:	f7fd fab8 	bl	7ab4 <z_impl_k_mutex_lock>
    
    // find a free buffer
    for (size_t i = 0; i < cab_id->num; i++)
    a544:	2400      	movs	r4, #0
    a546:	e000      	b.n	a54a <reserve+0x18>
    a548:	3401      	adds	r4, #1
    a54a:	68ab      	ldr	r3, [r5, #8]
    a54c:	42a3      	cmp	r3, r4
    a54e:	d90d      	bls.n	a56c <reserve+0x3a>
    {
        if (cab_id->buffersTaken[i] == 0)
    a550:	696b      	ldr	r3, [r5, #20]
    a552:	191a      	adds	r2, r3, r4
    a554:	5d1b      	ldrb	r3, [r3, r4]
    a556:	2b00      	cmp	r3, #0
    a558:	d1f6      	bne.n	a548 <reserve+0x16>
        {
            cab_id->buffersTaken[i] = 1;
    a55a:	2301      	movs	r3, #1
    a55c:	7013      	strb	r3, [r2, #0]
            k_mutex_unlock(cab_id->op_Mutex);
    a55e:	6828      	ldr	r0, [r5, #0]
	return z_impl_k_mutex_unlock(mutex);
    a560:	f7fd fbc8 	bl	7cf4 <z_impl_k_mutex_unlock>
            return cab_id->buffers[i];
    a564:	692b      	ldr	r3, [r5, #16]
    a566:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    a56a:	e003      	b.n	a574 <reserve+0x42>
        }
    }
            k_mutex_unlock(cab_id->op_Mutex);
    a56c:	6828      	ldr	r0, [r5, #0]
    a56e:	f7fd fbc1 	bl	7cf4 <z_impl_k_mutex_unlock>
    
    return NULL;
    a572:	2000      	movs	r0, #0
}
    a574:	bd38      	pop	{r3, r4, r5, pc}

0000a576 <put_mes>:

// puts a filled buffer inside the CAB
void put_mes(void *buf_pointer, cab *cab_id)
{
    a576:	b570      	push	{r4, r5, r6, lr}
    a578:	4606      	mov	r6, r0
    a57a:	460d      	mov	r5, r1
    k_mutex_lock(cab_id->op_Mutex, K_FOREVER);
    a57c:	6808      	ldr	r0, [r1, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    a57e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a586:	f7fd fa95 	bl	7ab4 <z_impl_k_mutex_lock>
    

    for (size_t i = 0; i < cab_id->num; i++)
    a58a:	2400      	movs	r4, #0
    a58c:	e000      	b.n	a590 <put_mes+0x1a>
    a58e:	3401      	adds	r4, #1
    a590:	68ab      	ldr	r3, [r5, #8]
    a592:	42a3      	cmp	r3, r4
    a594:	d90c      	bls.n	a5b0 <put_mes+0x3a>
    {
        if (cab_id->buffers[i] == buf_pointer)
    a596:	692b      	ldr	r3, [r5, #16]
    a598:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
    a59c:	42b1      	cmp	r1, r6
    a59e:	d1f6      	bne.n	a58e <put_mes+0x18>
    a5a0:	68ea      	ldr	r2, [r5, #12]
    a5a2:	6818      	ldr	r0, [r3, #0]
    a5a4:	f001 fbda 	bl	bd5c <memcpy>
        {
            memcpy(cab_id->buffers[0], cab_id->buffers[i], cab_id->dim);
            cab_id->buffersTaken[i] = 0;
    a5a8:	696b      	ldr	r3, [r5, #20]
    a5aa:	2200      	movs	r2, #0
    a5ac:	551a      	strb	r2, [r3, r4]
    a5ae:	e7ee      	b.n	a58e <put_mes+0x18>
        }
    }
            k_mutex_unlock(cab_id->op_Mutex);
    a5b0:	6828      	ldr	r0, [r5, #0]
	return z_impl_k_mutex_unlock(mutex);
    a5b2:	f7fd fb9f 	bl	7cf4 <z_impl_k_mutex_unlock>
    
}
    a5b6:	bd70      	pop	{r4, r5, r6, pc}

0000a5b8 <get_mes>:

// get latest message
void *get_mes(cab *cab_id)
{
    a5b8:	b538      	push	{r3, r4, r5, lr}
    a5ba:	4605      	mov	r5, r0
    k_mutex_lock(cab_id->op_Mutex, K_FOREVER);
    a5bc:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    a5be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a5c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a5c6:	f7fd fa75 	bl	7ab4 <z_impl_k_mutex_lock>
    
    // find a free buffer
    for (size_t i = 0; i < cab_id->num; i++)
    a5ca:	2400      	movs	r4, #0
    a5cc:	e000      	b.n	a5d0 <get_mes+0x18>
    a5ce:	3401      	adds	r4, #1
    a5d0:	68ab      	ldr	r3, [r5, #8]
    a5d2:	42a3      	cmp	r3, r4
    a5d4:	d914      	bls.n	a600 <get_mes+0x48>
    {
        if (cab_id->buffersTaken[i] == 0)
    a5d6:	696b      	ldr	r3, [r5, #20]
    a5d8:	191a      	adds	r2, r3, r4
    a5da:	5d1b      	ldrb	r3, [r3, r4]
    a5dc:	2b00      	cmp	r3, #0
    a5de:	d1f6      	bne.n	a5ce <get_mes+0x16>
        {
            cab_id->buffersTaken[i] = 1;
    a5e0:	2301      	movs	r3, #1
    a5e2:	7013      	strb	r3, [r2, #0]
            memcpy(cab_id->buffers[i], cab_id->buffers[0], cab_id->dim);
    a5e4:	692b      	ldr	r3, [r5, #16]
    a5e6:	68ea      	ldr	r2, [r5, #12]
    a5e8:	6819      	ldr	r1, [r3, #0]
    a5ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    a5ee:	f001 fbb5 	bl	bd5c <memcpy>
            k_mutex_unlock(cab_id->op_Mutex);
    a5f2:	6828      	ldr	r0, [r5, #0]
	return z_impl_k_mutex_unlock(mutex);
    a5f4:	f7fd fb7e 	bl	7cf4 <z_impl_k_mutex_unlock>
            
            return cab_id->buffers[i];
    a5f8:	692b      	ldr	r3, [r5, #16]
    a5fa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    a5fe:	e003      	b.n	a608 <get_mes+0x50>
        }
    }
            k_mutex_unlock(cab_id->op_Mutex);
    a600:	6828      	ldr	r0, [r5, #0]
    a602:	f7fd fb77 	bl	7cf4 <z_impl_k_mutex_unlock>
    
    return NULL;
    a606:	2000      	movs	r0, #0
}
    a608:	bd38      	pop	{r3, r4, r5, pc}

0000a60a <unget>:

// release message to the CAB
void unget(void* mes_pointer, cab *cab_id)
{
    a60a:	b538      	push	{r3, r4, r5, lr}
    a60c:	4605      	mov	r5, r0
    a60e:	460c      	mov	r4, r1
    k_mutex_lock(cab_id->op_Mutex, K_FOREVER);
    a610:	6808      	ldr	r0, [r1, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    a612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a61a:	f7fd fa4b 	bl	7ab4 <z_impl_k_mutex_lock>
    
    for (size_t i = 0; i < cab_id->num; i++)
    a61e:	2300      	movs	r3, #0
    a620:	e000      	b.n	a624 <unget+0x1a>
    a622:	3301      	adds	r3, #1
    a624:	68a2      	ldr	r2, [r4, #8]
    a626:	429a      	cmp	r2, r3
    a628:	d908      	bls.n	a63c <unget+0x32>
    {
        if (cab_id->buffers[i] == mes_pointer)
    a62a:	6922      	ldr	r2, [r4, #16]
    a62c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    a630:	42aa      	cmp	r2, r5
    a632:	d1f6      	bne.n	a622 <unget+0x18>
        {
            cab_id->buffersTaken[i] = 0;
    a634:	6962      	ldr	r2, [r4, #20]
    a636:	2100      	movs	r1, #0
    a638:	54d1      	strb	r1, [r2, r3]
    a63a:	e7f2      	b.n	a622 <unget+0x18>
        }
    }
            k_mutex_unlock(cab_id->op_Mutex);
    a63c:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_unlock(mutex);
    a63e:	f7fd fb59 	bl	7cf4 <z_impl_k_mutex_unlock>
    
}
    a642:	bd38      	pop	{r3, r4, r5, pc}

0000a644 <cbprintf_via_va_list>:
{
    a644:	b510      	push	{r4, lr}
    a646:	460c      	mov	r4, r1
    a648:	4611      	mov	r1, r2
    a64a:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    a64c:	9b02      	ldr	r3, [sp, #8]
    a64e:	47a0      	blx	r4
}
    a650:	bd10      	pop	{r4, pc}

0000a652 <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    a652:	b353      	cbz	r3, a6aa <cbpprintf_external+0x58>
{
    a654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a658:	b082      	sub	sp, #8
    a65a:	4607      	mov	r7, r0
    a65c:	4688      	mov	r8, r1
    a65e:	4691      	mov	r9, r2
    a660:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
    a662:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = buf[1];
    a664:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = buf[2];
    a666:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = buf[3];
    a668:	78db      	ldrb	r3, [r3, #3]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    a66a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    a66e:	441c      	add	r4, r3
    a670:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    a672:	f04f 0a00 	mov.w	sl, #0
    a676:	e00a      	b.n	a68e <cbpprintf_external+0x3c>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
    a678:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
    a67c:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
    a680:	4620      	mov	r0, r4
    a682:	f7f5 feaa 	bl	3da <strlen>
    a686:	3001      	adds	r0, #1
    a688:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    a68a:	f10a 0a01 	add.w	sl, sl, #1
    a68e:	45b2      	cmp	sl, r6
    a690:	d3f2      	bcc.n	a678 <cbpprintf_external+0x26>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
    a692:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
    a696:	9300      	str	r3, [sp, #0]
    a698:	686b      	ldr	r3, [r5, #4]
    a69a:	464a      	mov	r2, r9
    a69c:	4641      	mov	r1, r8
    a69e:	4638      	mov	r0, r7
    a6a0:	f7ff ffd0 	bl	a644 <cbprintf_via_va_list>
}
    a6a4:	b002      	add	sp, #8
    a6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    a6aa:	f06f 0015 	mvn.w	r0, #21
}
    a6ae:	4770      	bx	lr

0000a6b0 <sys_notify_validate>:
	if (notify == NULL) {
    a6b0:	4602      	mov	r2, r0
    a6b2:	b158      	cbz	r0, a6cc <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a6b4:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    a6b6:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
    a6ba:	2b01      	cmp	r3, #1
    a6bc:	d003      	beq.n	a6c6 <sys_notify_validate+0x16>
    a6be:	2b03      	cmp	r3, #3
    a6c0:	d107      	bne.n	a6d2 <sys_notify_validate+0x22>
		if (notify->method.callback == NULL) {
    a6c2:	6803      	ldr	r3, [r0, #0]
    a6c4:	b143      	cbz	r3, a6d8 <sys_notify_validate+0x28>
		notify->result = 0;
    a6c6:	2000      	movs	r0, #0
    a6c8:	6090      	str	r0, [r2, #8]
    a6ca:	4770      	bx	lr
		return -EINVAL;
    a6cc:	f06f 0015 	mvn.w	r0, #21
    a6d0:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    a6d2:	f06f 0015 	mvn.w	r0, #21
    a6d6:	4770      	bx	lr
			rv = -EINVAL;
    a6d8:	f06f 0015 	mvn.w	r0, #21
}
    a6dc:	4770      	bx	lr

0000a6de <arch_printk_char_out>:
}
    a6de:	2000      	movs	r0, #0
    a6e0:	4770      	bx	lr

0000a6e2 <vprintk>:
	ctx->count++;
	return _char_out(c);
}

void vprintk(const char *fmt, va_list ap)
{
    a6e2:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    a6e4:	f000 f921 	bl	a92a <z_log_vprintk>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    a6e8:	bd08      	pop	{r3, pc}

0000a6ea <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    a6ea:	b40f      	push	{r0, r1, r2, r3}
    a6ec:	b500      	push	{lr}
    a6ee:	b083      	sub	sp, #12
    a6f0:	a904      	add	r1, sp, #16
    a6f2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    a6f6:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    a6f8:	f7ff fff3 	bl	a6e2 <vprintk>

	va_end(ap);
}
    a6fc:	b003      	add	sp, #12
    a6fe:	f85d eb04 	ldr.w	lr, [sp], #4
    a702:	b004      	add	sp, #16
    a704:	4770      	bx	lr

0000a706 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    a706:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a70a:	8b81      	ldrh	r1, [r0, #28]
    a70c:	f021 0107 	bic.w	r1, r1, #7
    a710:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    a712:	8381      	strh	r1, [r0, #28]
}
    a714:	4770      	bx	lr

0000a716 <notify_monitors>:
{
    a716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a71a:	4606      	mov	r6, r0
    a71c:	460f      	mov	r7, r1
    a71e:	4690      	mov	r8, r2
	return list->head;
    a720:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a722:	b119      	cbz	r1, a72c <notify_monitors+0x16>
    a724:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    a726:	b131      	cbz	r1, a736 <notify_monitors+0x20>
	return node->next;
    a728:	680c      	ldr	r4, [r1, #0]
    a72a:	e004      	b.n	a736 <notify_monitors+0x20>
    a72c:	460c      	mov	r4, r1
    a72e:	e002      	b.n	a736 <notify_monitors+0x20>
    a730:	4623      	mov	r3, r4
    a732:	4621      	mov	r1, r4
    a734:	461c      	mov	r4, r3
    a736:	b159      	cbz	r1, a750 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    a738:	684d      	ldr	r5, [r1, #4]
    a73a:	4643      	mov	r3, r8
    a73c:	463a      	mov	r2, r7
    a73e:	4630      	mov	r0, r6
    a740:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a742:	2c00      	cmp	r4, #0
    a744:	d0f4      	beq.n	a730 <notify_monitors+0x1a>
    a746:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    a748:	2c00      	cmp	r4, #0
    a74a:	d0f2      	beq.n	a732 <notify_monitors+0x1c>
	return node->next;
    a74c:	6823      	ldr	r3, [r4, #0]
    a74e:	e7f0      	b.n	a732 <notify_monitors+0x1c>
}
    a750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a754 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a754:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    a756:	f013 0307 	ands.w	r3, r3, #7
    a75a:	d103      	bne.n	a764 <process_recheck+0x10>
	return list->head;
    a75c:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    a75e:	b10a      	cbz	r2, a764 <process_recheck+0x10>
		evt = EVT_START;
    a760:	2003      	movs	r0, #3
    a762:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    a764:	2b02      	cmp	r3, #2
    a766:	d003      	beq.n	a770 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    a768:	2b01      	cmp	r3, #1
    a76a:	d006      	beq.n	a77a <process_recheck+0x26>
	int evt = EVT_NOP;
    a76c:	2000      	movs	r0, #0
    a76e:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    a770:	8bc2      	ldrh	r2, [r0, #30]
    a772:	2a00      	cmp	r2, #0
    a774:	d1f8      	bne.n	a768 <process_recheck+0x14>
		evt = EVT_STOP;
    a776:	2004      	movs	r0, #4
    a778:	4770      	bx	lr
    a77a:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    a77c:	b10b      	cbz	r3, a782 <process_recheck+0x2e>
		evt = EVT_RESET;
    a77e:	2005      	movs	r0, #5
}
    a780:	4770      	bx	lr
	int evt = EVT_NOP;
    a782:	2000      	movs	r0, #0
    a784:	4770      	bx	lr

0000a786 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    a786:	b158      	cbz	r0, a7a0 <validate_args+0x1a>
{
    a788:	b510      	push	{r4, lr}
    a78a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    a78c:	b159      	cbz	r1, a7a6 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    a78e:	1d08      	adds	r0, r1, #4
    a790:	f7ff ff8e 	bl	a6b0 <sys_notify_validate>
	if ((rv == 0)
    a794:	b918      	cbnz	r0, a79e <validate_args+0x18>
	    && ((cli->notify.flags
    a796:	68a3      	ldr	r3, [r4, #8]
    a798:	f033 0303 	bics.w	r3, r3, #3
    a79c:	d106      	bne.n	a7ac <validate_args+0x26>
}
    a79e:	bd10      	pop	{r4, pc}
		return -EINVAL;
    a7a0:	f06f 0015 	mvn.w	r0, #21
}
    a7a4:	4770      	bx	lr
		return -EINVAL;
    a7a6:	f06f 0015 	mvn.w	r0, #21
    a7aa:	e7f8      	b.n	a79e <validate_args+0x18>
		rv = -EINVAL;
    a7ac:	f06f 0015 	mvn.w	r0, #21
    a7b0:	e7f5      	b.n	a79e <validate_args+0x18>

0000a7b2 <notify_one>:
{
    a7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7b6:	4607      	mov	r7, r0
    a7b8:	460c      	mov	r4, r1
    a7ba:	4616      	mov	r6, r2
    a7bc:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    a7be:	4619      	mov	r1, r3
    a7c0:	1d20      	adds	r0, r4, #4
    a7c2:	f7f6 f99f 	bl	b04 <sys_notify_finalize>
	if (cb) {
    a7c6:	b128      	cbz	r0, a7d4 <notify_one+0x22>
    a7c8:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    a7ca:	462b      	mov	r3, r5
    a7cc:	4632      	mov	r2, r6
    a7ce:	4621      	mov	r1, r4
    a7d0:	4638      	mov	r0, r7
    a7d2:	47c0      	blx	r8
}
    a7d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a7d8 <notify_all>:
{
    a7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7dc:	4680      	mov	r8, r0
    a7de:	460c      	mov	r4, r1
    a7e0:	4617      	mov	r7, r2
    a7e2:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    a7e4:	e004      	b.n	a7f0 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    a7e6:	4633      	mov	r3, r6
    a7e8:	463a      	mov	r2, r7
    a7ea:	4640      	mov	r0, r8
    a7ec:	f7ff ffe1 	bl	a7b2 <notify_one>
    a7f0:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    a7f2:	b131      	cbz	r1, a802 <notify_all+0x2a>
	return node->next;
    a7f4:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    a7f6:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a7f8:	6863      	ldr	r3, [r4, #4]
    a7fa:	428b      	cmp	r3, r1
    a7fc:	d1f3      	bne.n	a7e6 <notify_all+0xe>
	list->tail = node;
    a7fe:	6065      	str	r5, [r4, #4]
}
    a800:	e7f1      	b.n	a7e6 <notify_all+0xe>
}
    a802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a806 <onoff_manager_init>:
	if ((mgr == NULL)
    a806:	b170      	cbz	r0, a826 <onoff_manager_init+0x20>
{
    a808:	b538      	push	{r3, r4, r5, lr}
    a80a:	460c      	mov	r4, r1
    a80c:	4605      	mov	r5, r0
	    || (transitions == NULL)
    a80e:	b169      	cbz	r1, a82c <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    a810:	680b      	ldr	r3, [r1, #0]
    a812:	b173      	cbz	r3, a832 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    a814:	684b      	ldr	r3, [r1, #4]
    a816:	b17b      	cbz	r3, a838 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    a818:	2220      	movs	r2, #32
    a81a:	2100      	movs	r1, #0
    a81c:	f001 faac 	bl	bd78 <memset>
    a820:	612c      	str	r4, [r5, #16]
	return 0;
    a822:	2000      	movs	r0, #0
}
    a824:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    a826:	f06f 0015 	mvn.w	r0, #21
}
    a82a:	4770      	bx	lr
		return -EINVAL;
    a82c:	f06f 0015 	mvn.w	r0, #21
    a830:	e7f8      	b.n	a824 <onoff_manager_init+0x1e>
    a832:	f06f 0015 	mvn.w	r0, #21
    a836:	e7f5      	b.n	a824 <onoff_manager_init+0x1e>
    a838:	f06f 0015 	mvn.w	r0, #21
    a83c:	e7f2      	b.n	a824 <onoff_manager_init+0x1e>

0000a83e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    a83e:	b508      	push	{r3, lr}
    a840:	4604      	mov	r4, r0
    a842:	4608      	mov	r0, r1
    a844:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    a846:	461a      	mov	r2, r3
    a848:	47a0      	blx	r4
	return z_impl_z_current_get();
    a84a:	f7fe fe53 	bl	94f4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    a84e:	f7f8 fff3 	bl	3838 <z_impl_k_thread_abort>

0000a852 <free_list_add_bidx>:
{
    a852:	b510      	push	{r4, lr}
	if (b->next == 0U) {
    a854:	1d13      	adds	r3, r2, #4
    a856:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    a85a:	b97c      	cbnz	r4, a87c <free_list_add_bidx+0x2a>
		h->avail_buckets |= BIT(bidx);
    a85c:	2301      	movs	r3, #1
    a85e:	fa03 f402 	lsl.w	r4, r3, r2
    a862:	68c3      	ldr	r3, [r0, #12]
    a864:	4323      	orrs	r3, r4
    a866:	60c3      	str	r3, [r0, #12]
		b->next = c;
    a868:	3204      	adds	r2, #4
    a86a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    a86e:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    a870:	1d1a      	adds	r2, r3, #4
    a872:	b289      	uxth	r1, r1
    a874:	5281      	strh	r1, [r0, r2]
    a876:	3306      	adds	r3, #6
    a878:	52c1      	strh	r1, [r0, r3]
}
    a87a:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
    a87c:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    a87e:	3204      	adds	r2, #4
    a880:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    a882:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
    a886:	f10c 0e04 	add.w	lr, ip, #4
    a88a:	f820 300e 	strh.w	r3, [r0, lr]
    a88e:	f10c 0c06 	add.w	ip, ip, #6
    a892:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
    a896:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    a898:	3306      	adds	r3, #6
    a89a:	b289      	uxth	r1, r1
    a89c:	52c1      	strh	r1, [r0, r3]
    a89e:	5281      	strh	r1, [r0, r2]
    a8a0:	e7eb      	b.n	a87a <free_list_add_bidx+0x28>

0000a8a2 <free_list_add>:
{
    a8a2:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    a8a4:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    a8a8:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    a8aa:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    a8ac:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    a8b0:	f1c2 021f 	rsb	r2, r2, #31
    a8b4:	f7ff ffcd 	bl	a852 <free_list_add_bidx>
}
    a8b8:	bd08      	pop	{r3, pc}

0000a8ba <outs>:
{
    a8ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8be:	4607      	mov	r7, r0
    a8c0:	460e      	mov	r6, r1
    a8c2:	4614      	mov	r4, r2
    a8c4:	4698      	mov	r8, r3
	size_t count = 0;
    a8c6:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    a8c8:	e006      	b.n	a8d8 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    a8ca:	4631      	mov	r1, r6
    a8cc:	f814 0b01 	ldrb.w	r0, [r4], #1
    a8d0:	47b8      	blx	r7
		if (rc < 0) {
    a8d2:	2800      	cmp	r0, #0
    a8d4:	db09      	blt.n	a8ea <outs+0x30>
		++count;
    a8d6:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    a8d8:	4544      	cmp	r4, r8
    a8da:	d3f6      	bcc.n	a8ca <outs+0x10>
    a8dc:	f1b8 0f00 	cmp.w	r8, #0
    a8e0:	d102      	bne.n	a8e8 <outs+0x2e>
    a8e2:	7823      	ldrb	r3, [r4, #0]
    a8e4:	2b00      	cmp	r3, #0
    a8e6:	d1f0      	bne.n	a8ca <outs+0x10>
	return (int)count;
    a8e8:	4628      	mov	r0, r5
}
    a8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a8ee <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    a8ee:	4040      	eors	r0, r0
    a8f0:	f380 8811 	msr	BASEPRI, r0
    a8f4:	f04f 0004 	mov.w	r0, #4
    a8f8:	df02      	svc	2
}
    a8fa:	4770      	bx	lr

0000a8fc <assert_print>:

void assert_print(const char *fmt, ...)
{
    a8fc:	b40f      	push	{r0, r1, r2, r3}
    a8fe:	b500      	push	{lr}
    a900:	b083      	sub	sp, #12
    a902:	a904      	add	r1, sp, #16
    a904:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    a908:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    a90a:	f7ff feea 	bl	a6e2 <vprintk>

	va_end(ap);
}
    a90e:	b003      	add	sp, #12
    a910:	f85d eb04 	ldr.w	lr, [sp], #4
    a914:	b004      	add	sp, #16
    a916:	4770      	bx	lr

0000a918 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    a918:	4770      	bx	lr

0000a91a <dummy_timestamp>:
}
    a91a:	2000      	movs	r0, #0
    a91c:	4770      	bx	lr

0000a91e <msg_filter_check>:
}
    a91e:	2001      	movs	r0, #1
    a920:	4770      	bx	lr

0000a922 <default_get_timestamp>:
{
    a922:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    a924:	f001 f80e 	bl	b944 <sys_clock_cycle_get_32>
}
    a928:	bd08      	pop	{r3, pc}

0000a92a <z_log_vprintk>:
{
    a92a:	b500      	push	{lr}
    a92c:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    a92e:	9103      	str	r1, [sp, #12]
    a930:	9002      	str	r0, [sp, #8]
    a932:	2000      	movs	r0, #0
    a934:	9001      	str	r0, [sp, #4]
    a936:	9000      	str	r0, [sp, #0]
    a938:	4603      	mov	r3, r0
    a93a:	4602      	mov	r2, r0
    a93c:	4601      	mov	r1, r0
    a93e:	f7f7 fda9 	bl	2494 <z_impl_z_log_msg2_runtime_vcreate>
}
    a942:	b005      	add	sp, #20
    a944:	f85d fb04 	ldr.w	pc, [sp], #4

0000a948 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    a948:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    a94a:	f7f7 fa75 	bl	1e38 <log_init>
	}

	return 0;
}
    a94e:	2000      	movs	r0, #0
    a950:	bd08      	pop	{r3, pc}

0000a952 <z_log_get_tag>:
}
    a952:	2000      	movs	r0, #0
    a954:	4770      	bx	lr

0000a956 <out_func>:
{
    a956:	b500      	push	{lr}
    a958:	b083      	sub	sp, #12
		char x = (char)c;
    a95a:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    a95e:	680b      	ldr	r3, [r1, #0]
    a960:	684a      	ldr	r2, [r1, #4]
    a962:	6852      	ldr	r2, [r2, #4]
    a964:	2101      	movs	r1, #1
    a966:	f10d 0007 	add.w	r0, sp, #7
    a96a:	4798      	blx	r3
}
    a96c:	2000      	movs	r0, #0
    a96e:	b003      	add	sp, #12
    a970:	f85d fb04 	ldr.w	pc, [sp], #4

0000a974 <cr_out_func>:
{
    a974:	b538      	push	{r3, r4, r5, lr}
    a976:	4604      	mov	r4, r0
    a978:	460d      	mov	r5, r1
	out_func(c, ctx);
    a97a:	f7ff ffec 	bl	a956 <out_func>
	if (c == '\n') {
    a97e:	2c0a      	cmp	r4, #10
    a980:	d001      	beq.n	a986 <cr_out_func+0x12>
}
    a982:	2000      	movs	r0, #0
    a984:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    a986:	4629      	mov	r1, r5
    a988:	200d      	movs	r0, #13
    a98a:	f7ff ffe4 	bl	a956 <out_func>
    a98e:	e7f8      	b.n	a982 <cr_out_func+0xe>

0000a990 <buffer_write>:
{
    a990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a992:	4607      	mov	r7, r0
    a994:	460d      	mov	r5, r1
    a996:	4614      	mov	r4, r2
    a998:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    a99a:	4632      	mov	r2, r6
    a99c:	4621      	mov	r1, r4
    a99e:	4628      	mov	r0, r5
    a9a0:	47b8      	blx	r7
		buf += processed;
    a9a2:	4405      	add	r5, r0
	} while (len != 0);
    a9a4:	1a24      	subs	r4, r4, r0
    a9a6:	d1f8      	bne.n	a99a <buffer_write+0xa>
}
    a9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a9aa <color_prefix>:
{
    a9aa:	b508      	push	{r3, lr}
    a9ac:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    a9ae:	2201      	movs	r2, #1
    a9b0:	f7f7 fbe8 	bl	2184 <color_print>
}
    a9b4:	bd08      	pop	{r3, pc}

0000a9b6 <color_postfix>:
{
    a9b6:	b508      	push	{r3, lr}
    a9b8:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    a9ba:	2200      	movs	r2, #0
    a9bc:	f7f7 fbe2 	bl	2184 <color_print>
}
    a9c0:	bd08      	pop	{r3, pc}

0000a9c2 <postfix_print>:
{
    a9c2:	b538      	push	{r3, r4, r5, lr}
    a9c4:	4605      	mov	r5, r0
    a9c6:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    a9c8:	f001 0101 	and.w	r1, r1, #1
    a9cc:	f7ff fff3 	bl	a9b6 <color_postfix>
	newline_print(output, flags);
    a9d0:	4621      	mov	r1, r4
    a9d2:	4628      	mov	r0, r5
    a9d4:	f7f7 fbec 	bl	21b0 <newline_print>
}
    a9d8:	bd38      	pop	{r3, r4, r5, pc}

0000a9da <log_msg2_hexdump>:
{
    a9da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a9de:	b083      	sub	sp, #12
    a9e0:	4680      	mov	r8, r0
    a9e2:	460e      	mov	r6, r1
    a9e4:	4615      	mov	r5, r2
    a9e6:	461f      	mov	r7, r3
    a9e8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    a9ec:	462c      	mov	r4, r5
    a9ee:	2d10      	cmp	r5, #16
    a9f0:	bf28      	it	cs
    a9f2:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    a9f4:	f8cd 9000 	str.w	r9, [sp]
    a9f8:	463b      	mov	r3, r7
    a9fa:	4622      	mov	r2, r4
    a9fc:	4631      	mov	r1, r6
    a9fe:	4640      	mov	r0, r8
    aa00:	f7f7 fbea 	bl	21d8 <hexdump_line_print>
		data += length;
    aa04:	4426      	add	r6, r4
	} while (len);
    aa06:	1b2d      	subs	r5, r5, r4
    aa08:	d1f0      	bne.n	a9ec <log_msg2_hexdump+0x12>
}
    aa0a:	b003      	add	sp, #12
    aa0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000aa10 <log_output_flush>:
{
    aa10:	b510      	push	{r4, lr}
    aa12:	4604      	mov	r4, r0
		     output->control_block->offset,
    aa14:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    aa16:	6853      	ldr	r3, [r2, #4]
    aa18:	6812      	ldr	r2, [r2, #0]
    aa1a:	6881      	ldr	r1, [r0, #8]
    aa1c:	6800      	ldr	r0, [r0, #0]
    aa1e:	f7ff ffb7 	bl	a990 <buffer_write>
	output->control_block->offset = 0;
    aa22:	6863      	ldr	r3, [r4, #4]
    aa24:	2200      	movs	r2, #0
    aa26:	601a      	str	r2, [r3, #0]
}
    aa28:	bd10      	pop	{r4, pc}

0000aa2a <z_log_msg2_finalize>:
{
    aa2a:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    aa2c:	b198      	cbz	r0, aa56 <z_log_msg2_finalize+0x2c>
    aa2e:	460e      	mov	r6, r1
    aa30:	4614      	mov	r4, r2
    aa32:	4619      	mov	r1, r3
    aa34:	4605      	mov	r5, r0
	if (data) {
    aa36:	b143      	cbz	r3, aa4a <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
    aa38:	f100 0310 	add.w	r3, r0, #16
    aa3c:	f3c2 2049 	ubfx	r0, r2, #9, #10
    aa40:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    aa44:	4418      	add	r0, r3
    aa46:	f001 f989 	bl	bd5c <memcpy>
	msg->hdr.desc = desc;
    aa4a:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    aa4c:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
    aa4e:	4628      	mov	r0, r5
    aa50:	f7f7 fad4 	bl	1ffc <z_log_msg2_commit>
}
    aa54:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    aa56:	f7f7 fab1 	bl	1fbc <z_log_dropped>
		return;
    aa5a:	e7fb      	b.n	aa54 <z_log_msg2_finalize+0x2a>

0000aa5c <abort_function>:
{
    aa5c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    aa5e:	2000      	movs	r0, #0
    aa60:	f7f7 f970 	bl	1d44 <sys_reboot>

0000aa64 <z_log_msg2_runtime_create>:
{
    aa64:	b510      	push	{r4, lr}
    aa66:	b086      	sub	sp, #24
	va_start(ap, fmt);
    aa68:	ac0b      	add	r4, sp, #44	; 0x2c
    aa6a:	9405      	str	r4, [sp, #20]
    aa6c:	9403      	str	r4, [sp, #12]
    aa6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    aa70:	9402      	str	r4, [sp, #8]
    aa72:	9c09      	ldr	r4, [sp, #36]	; 0x24
    aa74:	9401      	str	r4, [sp, #4]
    aa76:	9c08      	ldr	r4, [sp, #32]
    aa78:	9400      	str	r4, [sp, #0]
    aa7a:	f7f7 fd0b 	bl	2494 <z_impl_z_log_msg2_runtime_vcreate>
}
    aa7e:	b006      	add	sp, #24
    aa80:	bd10      	pop	{r4, pc}

0000aa82 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    aa82:	b538      	push	{r3, r4, r5, lr}
    aa84:	4604      	mov	r4, r0

	if (esf != NULL) {
    aa86:	460d      	mov	r5, r1
    aa88:	b111      	cbz	r1, aa90 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    aa8a:	4608      	mov	r0, r1
    aa8c:	f7f8 f92a 	bl	2ce4 <esf_dump>
	}
	z_fatal_error(reason, esf);
    aa90:	4629      	mov	r1, r5
    aa92:	4620      	mov	r0, r4
    aa94:	f7fc fb4e 	bl	7134 <z_fatal_error>
}
    aa98:	bd38      	pop	{r3, r4, r5, pc}

0000aa9a <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    aa9a:	b508      	push	{r3, lr}
    aa9c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    aa9e:	6800      	ldr	r0, [r0, #0]
    aaa0:	f7ff ffef 	bl	aa82 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    aaa4:	bd08      	pop	{r3, pc}

0000aaa6 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    aaa6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    aaa8:	2100      	movs	r1, #0
    aaaa:	2001      	movs	r0, #1
    aaac:	f7ff ffe9 	bl	aa82 <z_arm_fatal_error>
}
    aab0:	bd08      	pop	{r3, pc}

0000aab2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    aab2:	b508      	push	{r3, lr}
	handler();
    aab4:	f7f8 f9b2 	bl	2e1c <z_SysNmiOnReset>
	z_arm_int_exit();
    aab8:	f7f8 faa8 	bl	300c <z_arm_exc_exit>
}
    aabc:	bd08      	pop	{r3, pc}

0000aabe <memory_fault_recoverable>:
}
    aabe:	2000      	movs	r0, #0
    aac0:	4770      	bx	lr

0000aac2 <z_log_msg2_runtime_create>:
{
    aac2:	b510      	push	{r4, lr}
    aac4:	b086      	sub	sp, #24
	va_start(ap, fmt);
    aac6:	ac0b      	add	r4, sp, #44	; 0x2c
    aac8:	9405      	str	r4, [sp, #20]
    aaca:	9403      	str	r4, [sp, #12]
    aacc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    aace:	9402      	str	r4, [sp, #8]
    aad0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    aad2:	9401      	str	r4, [sp, #4]
    aad4:	9c08      	ldr	r4, [sp, #32]
    aad6:	9400      	str	r4, [sp, #0]
    aad8:	f7f7 fcdc 	bl	2494 <z_impl_z_log_msg2_runtime_vcreate>
}
    aadc:	b006      	add	sp, #24
    aade:	bd10      	pop	{r4, pc}

0000aae0 <fault_handle>:
{
    aae0:	b508      	push	{r3, lr}
	*recoverable = false;
    aae2:	2300      	movs	r3, #0
    aae4:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    aae6:	1ecb      	subs	r3, r1, #3
    aae8:	2b09      	cmp	r3, #9
    aaea:	d81a      	bhi.n	ab22 <fault_handle+0x42>
    aaec:	e8df f003 	tbb	[pc, r3]
    aaf0:	110d0905 	.word	0x110d0905
    aaf4:	19191919 	.word	0x19191919
    aaf8:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    aafa:	4611      	mov	r1, r2
    aafc:	f7f8 fcd8 	bl	34b0 <hard_fault>
}
    ab00:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    ab02:	2100      	movs	r1, #0
    ab04:	f7f8 fbf6 	bl	32f4 <mem_manage_fault>
		break;
    ab08:	e7fa      	b.n	ab00 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    ab0a:	2100      	movs	r1, #0
    ab0c:	f7f8 fa8c 	bl	3028 <bus_fault>
		break;
    ab10:	e7f6      	b.n	ab00 <fault_handle+0x20>
		reason = usage_fault(esf);
    ab12:	f7f8 fb31 	bl	3178 <usage_fault>
		break;
    ab16:	e7f3      	b.n	ab00 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    ab18:	4611      	mov	r1, r2
    ab1a:	f7f8 fbb7 	bl	328c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    ab1e:	2000      	movs	r0, #0
		break;
    ab20:	e7ee      	b.n	ab00 <fault_handle+0x20>
		reserved_exception(esf, fault);
    ab22:	f7f8 fbc7 	bl	32b4 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    ab26:	2000      	movs	r0, #0
	return reason;
    ab28:	e7ea      	b.n	ab00 <fault_handle+0x20>

0000ab2a <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    ab2a:	6843      	ldr	r3, [r0, #4]
    ab2c:	1e5a      	subs	r2, r3, #1
		&&
    ab2e:	4213      	tst	r3, r2
    ab30:	d106      	bne.n	ab40 <mpu_partition_is_valid+0x16>
		&&
    ab32:	2b1f      	cmp	r3, #31
    ab34:	d906      	bls.n	ab44 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    ab36:	6803      	ldr	r3, [r0, #0]
		&&
    ab38:	421a      	tst	r2, r3
    ab3a:	d005      	beq.n	ab48 <mpu_partition_is_valid+0x1e>
    ab3c:	2000      	movs	r0, #0
    ab3e:	4770      	bx	lr
    ab40:	2000      	movs	r0, #0
    ab42:	4770      	bx	lr
    ab44:	2000      	movs	r0, #0
    ab46:	4770      	bx	lr
    ab48:	2001      	movs	r0, #1
}
    ab4a:	4770      	bx	lr

0000ab4c <z_log_msg2_runtime_create>:
{
    ab4c:	b510      	push	{r4, lr}
    ab4e:	b086      	sub	sp, #24
	va_start(ap, fmt);
    ab50:	ac0b      	add	r4, sp, #44	; 0x2c
    ab52:	9405      	str	r4, [sp, #20]
    ab54:	9403      	str	r4, [sp, #12]
    ab56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ab58:	9402      	str	r4, [sp, #8]
    ab5a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ab5c:	9401      	str	r4, [sp, #4]
    ab5e:	9c08      	ldr	r4, [sp, #32]
    ab60:	9400      	str	r4, [sp, #0]
    ab62:	f7f7 fc97 	bl	2494 <z_impl_z_log_msg2_runtime_vcreate>
}
    ab66:	b006      	add	sp, #24
    ab68:	bd10      	pop	{r4, pc}

0000ab6a <mpu_configure_region>:
{
    ab6a:	b500      	push	{lr}
    ab6c:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    ab6e:	680b      	ldr	r3, [r1, #0]
    ab70:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    ab72:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    ab74:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    ab76:	2b20      	cmp	r3, #32
    ab78:	d912      	bls.n	aba0 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    ab7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    ab7e:	d811      	bhi.n	aba4 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    ab80:	3b01      	subs	r3, #1
    ab82:	fab3 f383 	clz	r3, r3
    ab86:	f1c3 031f 	rsb	r3, r3, #31
    ab8a:	005b      	lsls	r3, r3, #1
    ab8c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    ab90:	4313      	orrs	r3, r2
    ab92:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    ab94:	a901      	add	r1, sp, #4
    ab96:	f7f8 fe9d 	bl	38d4 <region_allocate_and_init>
}
    ab9a:	b005      	add	sp, #20
    ab9c:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    aba0:	2308      	movs	r3, #8
    aba2:	e7f5      	b.n	ab90 <mpu_configure_region+0x26>
		return REGION_4G;
    aba4:	233e      	movs	r3, #62	; 0x3e
    aba6:	e7f3      	b.n	ab90 <mpu_configure_region+0x26>

0000aba8 <_stdout_hook_default>:
}
    aba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    abac:	4770      	bx	lr

0000abae <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    abae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    abb2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    abb6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    abba:	2a08      	cmp	r2, #8
    abbc:	d001      	beq.n	abc2 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    abbe:	2000      	movs	r0, #0
    abc0:	4770      	bx	lr
                switch(var2)
    abc2:	2b02      	cmp	r3, #2
    abc4:	d001      	beq.n	abca <nrf52_errata_197+0x1c>
                        return false;
    abc6:	2000      	movs	r0, #0
    abc8:	4770      	bx	lr
                        return true;
    abca:	2001      	movs	r0, #1
    #endif
}
    abcc:	4770      	bx	lr

0000abce <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    abce:	2806      	cmp	r0, #6
    abd0:	d000      	beq.n	abd4 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    abd2:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    abd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    abd8:	2201      	movs	r2, #1
    abda:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    abde:	f3bf 8f4f 	dsb	sy
        __WFE();
    abe2:	bf20      	wfe
    while (true)
    abe4:	e7fd      	b.n	abe2 <pm_state_set+0x14>

0000abe6 <pm_state_exit_post_ops>:
    abe6:	2300      	movs	r3, #0
    abe8:	f383 8811 	msr	BASEPRI, r3
    abec:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    abf0:	4770      	bx	lr

0000abf2 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    abf2:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    abf4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    abf8:	0089      	lsls	r1, r1, #2
    abfa:	3140      	adds	r1, #64	; 0x40
}
    abfc:	4408      	add	r0, r1
    abfe:	4770      	bx	lr

0000ac00 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    ac00:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    ac02:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    ac06:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    ac0a:	4770      	bx	lr

0000ac0c <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    ac0c:	6900      	ldr	r0, [r0, #16]
}
    ac0e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    ac12:	4770      	bx	lr

0000ac14 <set_off_state>:
	__asm__ volatile(
    ac14:	f04f 0320 	mov.w	r3, #32
    ac18:	f3ef 8211 	mrs	r2, BASEPRI
    ac1c:	f383 8812 	msr	BASEPRI_MAX, r3
    ac20:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    ac24:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    ac26:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    ac2a:	d001      	beq.n	ac30 <set_off_state+0x1c>
    ac2c:	428b      	cmp	r3, r1
    ac2e:	d107      	bne.n	ac40 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    ac30:	2301      	movs	r3, #1
    ac32:	6003      	str	r3, [r0, #0]
	int err = 0;
    ac34:	2000      	movs	r0, #0
	__asm__ volatile(
    ac36:	f382 8811 	msr	BASEPRI, r2
    ac3a:	f3bf 8f6f 	isb	sy
}
    ac3e:	4770      	bx	lr
		err = -EPERM;
    ac40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ac44:	e7f7      	b.n	ac36 <set_off_state+0x22>

0000ac46 <set_starting_state>:
	__asm__ volatile(
    ac46:	f04f 0320 	mov.w	r3, #32
    ac4a:	f3ef 8211 	mrs	r2, BASEPRI
    ac4e:	f383 8812 	msr	BASEPRI_MAX, r3
    ac52:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    ac56:	6803      	ldr	r3, [r0, #0]
    ac58:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    ac5c:	f003 0307 	and.w	r3, r3, #7
    ac60:	2b01      	cmp	r3, #1
    ac62:	d008      	beq.n	ac76 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    ac64:	458c      	cmp	ip, r1
    ac66:	d009      	beq.n	ac7c <set_starting_state+0x36>
		err = -EPERM;
    ac68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    ac6c:	f382 8811 	msr	BASEPRI, r2
    ac70:	f3bf 8f6f 	isb	sy
}
    ac74:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    ac76:	6001      	str	r1, [r0, #0]
	int err = 0;
    ac78:	2000      	movs	r0, #0
    ac7a:	e7f7      	b.n	ac6c <set_starting_state+0x26>
		err = -EALREADY;
    ac7c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    ac80:	e7f4      	b.n	ac6c <set_starting_state+0x26>

0000ac82 <set_on_state>:
	__asm__ volatile(
    ac82:	f04f 0320 	mov.w	r3, #32
    ac86:	f3ef 8211 	mrs	r2, BASEPRI
    ac8a:	f383 8812 	msr	BASEPRI_MAX, r3
    ac8e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    ac92:	6803      	ldr	r3, [r0, #0]
    ac94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ac98:	f043 0302 	orr.w	r3, r3, #2
    ac9c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    ac9e:	f382 8811 	msr	BASEPRI, r2
    aca2:	f3bf 8f6f 	isb	sy
}
    aca6:	4770      	bx	lr

0000aca8 <clkstarted_handle>:
{
    aca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    acaa:	4606      	mov	r6, r0
    acac:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    acae:	f7ff ffa0 	bl	abf2 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    acb2:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    acb4:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    acb6:	2300      	movs	r3, #0
    acb8:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    acbc:	f7ff ffe1 	bl	ac82 <set_on_state>
	if (callback) {
    acc0:	b11d      	cbz	r5, acca <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    acc2:	463a      	mov	r2, r7
    acc4:	4621      	mov	r1, r4
    acc6:	4630      	mov	r0, r6
    acc8:	47a8      	blx	r5
}
    acca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000accc <async_start>:
{
    accc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    acd0:	4606      	mov	r6, r0
    acd2:	4690      	mov	r8, r2
    acd4:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    acd6:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    acd8:	4629      	mov	r1, r5
    acda:	f7ff ff8a 	bl	abf2 <get_sub_data>
    acde:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    ace0:	9906      	ldr	r1, [sp, #24]
    ace2:	3008      	adds	r0, #8
    ace4:	f7ff ffaf 	bl	ac46 <set_starting_state>
	if (err < 0) {
    ace8:	2800      	cmp	r0, #0
    acea:	db09      	blt.n	ad00 <async_start+0x34>
	subdata->cb = cb;
    acec:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    acf0:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    acf2:	4629      	mov	r1, r5
    acf4:	4630      	mov	r0, r6
    acf6:	f7ff ff83 	bl	ac00 <get_sub_config>
    acfa:	6803      	ldr	r3, [r0, #0]
    acfc:	4798      	blx	r3
	return 0;
    acfe:	2000      	movs	r0, #0
}
    ad00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ad04 <api_start>:
{
    ad04:	b510      	push	{r4, lr}
    ad06:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    ad08:	2480      	movs	r4, #128	; 0x80
    ad0a:	9400      	str	r4, [sp, #0]
    ad0c:	f7ff ffde 	bl	accc <async_start>
}
    ad10:	b002      	add	sp, #8
    ad12:	bd10      	pop	{r4, pc}

0000ad14 <onoff_started_callback>:
{
    ad14:	b510      	push	{r4, lr}
    ad16:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    ad18:	b2c9      	uxtb	r1, r1
    ad1a:	f7ff ff77 	bl	ac0c <get_onoff_manager>
	notify(mgr, 0);
    ad1e:	2100      	movs	r1, #0
    ad20:	47a0      	blx	r4
}
    ad22:	bd10      	pop	{r4, pc}

0000ad24 <hfclk_start>:
{
    ad24:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    ad26:	2001      	movs	r0, #1
    ad28:	f7fb f83c 	bl	5da4 <nrfx_clock_start>
}
    ad2c:	bd08      	pop	{r3, pc}

0000ad2e <lfclk_start>:
{
    ad2e:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    ad30:	2000      	movs	r0, #0
    ad32:	f7fb f837 	bl	5da4 <nrfx_clock_start>
}
    ad36:	bd08      	pop	{r3, pc}

0000ad38 <hfclk_stop>:
{
    ad38:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    ad3a:	2001      	movs	r0, #1
    ad3c:	f7fb f8a8 	bl	5e90 <nrfx_clock_stop>
}
    ad40:	bd08      	pop	{r3, pc}

0000ad42 <lfclk_stop>:
{
    ad42:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    ad44:	2000      	movs	r0, #0
    ad46:	f7fb f8a3 	bl	5e90 <nrfx_clock_stop>
}
    ad4a:	bd08      	pop	{r3, pc}

0000ad4c <api_stop>:
{
    ad4c:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    ad4e:	2280      	movs	r2, #128	; 0x80
    ad50:	f7f9 f810 	bl	3d74 <stop>
}
    ad54:	bd08      	pop	{r3, pc}

0000ad56 <blocking_start_callback>:
{
    ad56:	b508      	push	{r3, lr}
    ad58:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    ad5a:	f7fd f89f 	bl	7e9c <z_impl_k_sem_give>
}
    ad5e:	bd08      	pop	{r3, pc}

0000ad60 <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    ad60:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
    ad64:	f020 0001 	bic.w	r0, r0, #1
    ad68:	0540      	lsls	r0, r0, #21
    ad6a:	0d40      	lsrs	r0, r0, #21
    ad6c:	f240 2306 	movw	r3, #518	; 0x206
    ad70:	4298      	cmp	r0, r3
    ad72:	d033      	beq.n	addc <get_drive+0x7c>
    ad74:	d816      	bhi.n	ada4 <get_drive+0x44>
    ad76:	2806      	cmp	r0, #6
    ad78:	d02c      	beq.n	add4 <get_drive+0x74>
    ad7a:	d906      	bls.n	ad8a <get_drive+0x2a>
    ad7c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    ad80:	d10d      	bne.n	ad9e <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
    ad82:	2301      	movs	r3, #1
    ad84:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ad86:	2000      	movs	r0, #0
		break;
    ad88:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    ad8a:	b300      	cbz	r0, adce <get_drive+0x6e>
    ad8c:	2802      	cmp	r0, #2
    ad8e:	d103      	bne.n	ad98 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
    ad90:	2304      	movs	r3, #4
    ad92:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ad94:	2000      	movs	r0, #0
		break;
    ad96:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    ad98:	f06f 0015 	mvn.w	r0, #21
    ad9c:	4770      	bx	lr
    ad9e:	f06f 0015 	mvn.w	r0, #21
    ada2:	4770      	bx	lr
    ada4:	f240 4302 	movw	r3, #1026	; 0x402
    ada8:	4298      	cmp	r0, r3
    adaa:	d01b      	beq.n	ade4 <get_drive+0x84>
    adac:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
    adb0:	d103      	bne.n	adba <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
    adb2:	2303      	movs	r3, #3
    adb4:	700b      	strb	r3, [r1, #0]
	int err = 0;
    adb6:	2000      	movs	r0, #0
		break;
    adb8:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    adba:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    adbe:	d103      	bne.n	adc8 <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
    adc0:	2302      	movs	r3, #2
    adc2:	700b      	strb	r3, [r1, #0]
	int err = 0;
    adc4:	2000      	movs	r0, #0
		break;
    adc6:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    adc8:	f06f 0015 	mvn.w	r0, #21
    adcc:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    adce:	2000      	movs	r0, #0
    add0:	7008      	strb	r0, [r1, #0]
		break;
    add2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    add4:	2306      	movs	r3, #6
    add6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    add8:	2000      	movs	r0, #0
		break;
    adda:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    addc:	2307      	movs	r3, #7
    adde:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ade0:	2000      	movs	r0, #0
		break;
    ade2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    ade4:	2305      	movs	r3, #5
    ade6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    ade8:	2000      	movs	r0, #0
}
    adea:	4770      	bx	lr

0000adec <get_pull>:
	if (flags & GPIO_PULL_UP) {
    adec:	f010 0f10 	tst.w	r0, #16
    adf0:	d104      	bne.n	adfc <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    adf2:	f010 0f20 	tst.w	r0, #32
    adf6:	d103      	bne.n	ae00 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    adf8:	2000      	movs	r0, #0
    adfa:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    adfc:	2003      	movs	r0, #3
    adfe:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    ae00:	2001      	movs	r0, #1
}
    ae02:	4770      	bx	lr

0000ae04 <gpio_nrfx_port_get_raw>:
	return port->config;
    ae04:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ae06:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    ae08:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    ae0c:	600b      	str	r3, [r1, #0]
}
    ae0e:	2000      	movs	r0, #0
    ae10:	4770      	bx	lr

0000ae12 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    ae12:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ae14:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    ae16:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    ae1a:	4042      	eors	r2, r0
    ae1c:	400a      	ands	r2, r1
    ae1e:	4042      	eors	r2, r0
    p_reg->OUT = value;
    ae20:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    ae24:	2000      	movs	r0, #0
    ae26:	4770      	bx	lr

0000ae28 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    ae28:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ae2a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    ae2c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    ae30:	2000      	movs	r0, #0
    ae32:	4770      	bx	lr

0000ae34 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    ae34:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ae36:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    ae38:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    ae3c:	2000      	movs	r0, #0
    ae3e:	4770      	bx	lr

0000ae40 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    ae40:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ae42:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    ae44:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    ae48:	404b      	eors	r3, r1
    p_reg->OUT = value;
    ae4a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    ae4e:	2000      	movs	r0, #0
    ae50:	4770      	bx	lr

0000ae52 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    ae52:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    ae56:	d007      	beq.n	ae68 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    ae58:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    ae5c:	d00d      	beq.n	ae7a <get_trigger+0x28>
    ae5e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    ae62:	d008      	beq.n	ae76 <get_trigger+0x24>
    ae64:	2001      	movs	r0, #1
}
    ae66:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    ae68:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    ae6c:	d001      	beq.n	ae72 <get_trigger+0x20>
    ae6e:	2005      	movs	r0, #5
    ae70:	4770      	bx	lr
    ae72:	2004      	movs	r0, #4
    ae74:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    ae76:	2002      	movs	r0, #2
    ae78:	4770      	bx	lr
    ae7a:	2003      	movs	r0, #3
    ae7c:	4770      	bx	lr

0000ae7e <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    ae7e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    ae80:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    ae82:	f04f 0120 	mov.w	r1, #32
    ae86:	f3ef 8211 	mrs	r2, BASEPRI
    ae8a:	f381 8812 	msr	BASEPRI_MAX, r1
    ae8e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    ae92:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    ae96:	b131      	cbz	r1, aea6 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ae98:	2100      	movs	r1, #0
    ae9a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    ae9e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    aea2:	2101      	movs	r1, #1
    aea4:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    aea6:	f382 8811 	msr	BASEPRI, r2
    aeaa:	f3bf 8f6f 	isb	sy
}
    aeae:	4770      	bx	lr

0000aeb0 <uarte_nrfx_configure>:
{
    aeb0:	b570      	push	{r4, r5, r6, lr}
    aeb2:	b082      	sub	sp, #8
    aeb4:	4606      	mov	r6, r0
    aeb6:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    aeb8:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    aeba:	794b      	ldrb	r3, [r1, #5]
    aebc:	2b01      	cmp	r3, #1
    aebe:	d006      	beq.n	aece <uarte_nrfx_configure+0x1e>
    aec0:	2b03      	cmp	r3, #3
    aec2:	d011      	beq.n	aee8 <uarte_nrfx_configure+0x38>
    aec4:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    aec8:	4618      	mov	r0, r3
    aeca:	b002      	add	sp, #8
    aecc:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    aece:	2300      	movs	r3, #0
    aed0:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    aed4:	79a3      	ldrb	r3, [r4, #6]
    aed6:	2b03      	cmp	r3, #3
    aed8:	d137      	bne.n	af4a <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    aeda:	79e3      	ldrb	r3, [r4, #7]
    aedc:	b143      	cbz	r3, aef0 <uarte_nrfx_configure+0x40>
    aede:	2b01      	cmp	r3, #1
    aee0:	d010      	beq.n	af04 <uarte_nrfx_configure+0x54>
    aee2:	f06f 0385 	mvn.w	r3, #133	; 0x85
    aee6:	e7ef      	b.n	aec8 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    aee8:	2310      	movs	r3, #16
    aeea:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    aeee:	e7f1      	b.n	aed4 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    aef0:	2300      	movs	r3, #0
    aef2:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    aef6:	7923      	ldrb	r3, [r4, #4]
    aef8:	b143      	cbz	r3, af0c <uarte_nrfx_configure+0x5c>
    aefa:	2b02      	cmp	r3, #2
    aefc:	d021      	beq.n	af42 <uarte_nrfx_configure+0x92>
    aefe:	f06f 0385 	mvn.w	r3, #133	; 0x85
    af02:	e7e1      	b.n	aec8 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    af04:	2301      	movs	r3, #1
    af06:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    af0a:	e7f4      	b.n	aef6 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    af0c:	2300      	movs	r3, #0
    af0e:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    af12:	6821      	ldr	r1, [r4, #0]
    af14:	4630      	mov	r0, r6
    af16:	f7f9 fb35 	bl	4584 <baudrate_set>
    af1a:	4603      	mov	r3, r0
    af1c:	b9c0      	cbnz	r0, af50 <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    af1e:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    af20:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    af22:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    af26:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    af2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
    af2e:	4331      	orrs	r1, r6
    af30:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    af32:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    af36:	3504      	adds	r5, #4
    af38:	e894 0003 	ldmia.w	r4, {r0, r1}
    af3c:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    af40:	e7c2      	b.n	aec8 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    af42:	230e      	movs	r3, #14
    af44:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    af48:	e7e3      	b.n	af12 <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    af4a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    af4e:	e7bb      	b.n	aec8 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    af50:	f06f 0385 	mvn.w	r3, #133	; 0x85
    af54:	e7b8      	b.n	aec8 <uarte_nrfx_configure+0x18>

0000af56 <uarte_nrfx_config_get>:
{
    af56:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    af58:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    af5a:	3304      	adds	r3, #4
    af5c:	e893 0003 	ldmia.w	r3, {r0, r1}
    af60:	e882 0003 	stmia.w	r2, {r0, r1}
}
    af64:	2000      	movs	r0, #0
    af66:	4770      	bx	lr

0000af68 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    af68:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    af6a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    af6c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    af70:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    af74:	4770      	bx	lr

0000af76 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    af76:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    af78:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    af7a:	685b      	ldr	r3, [r3, #4]
    af7c:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    af80:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    af84:	b929      	cbnz	r1, af92 <is_tx_ready+0x1c>
    af86:	b933      	cbnz	r3, af96 <is_tx_ready+0x20>
    af88:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    af8c:	b92b      	cbnz	r3, af9a <is_tx_ready+0x24>
    af8e:	2000      	movs	r0, #0
    af90:	4770      	bx	lr
    af92:	2001      	movs	r0, #1
    af94:	4770      	bx	lr
    af96:	2000      	movs	r0, #0
    af98:	4770      	bx	lr
    af9a:	2001      	movs	r0, #1
}
    af9c:	4770      	bx	lr

0000af9e <uarte_enable>:
	struct uarte_nrfx_data *data = dev->data;
    af9e:	6903      	ldr	r3, [r0, #16]
	if (data->async) {
    afa0:	68db      	ldr	r3, [r3, #12]
    afa2:	b123      	cbz	r3, afae <uarte_enable+0x10>
		bool disabled = data->async->low_power_mask == 0;
    afa4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
		data->async->low_power_mask |= mask;
    afa8:	4311      	orrs	r1, r2
    afaa:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
	const struct uarte_nrfx_config *config = dev->config;
    afae:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    afb0:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    afb2:	2208      	movs	r2, #8
    afb4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    afb8:	4770      	bx	lr

0000afba <tx_start>:
{
    afba:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    afbc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    afbe:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    afc0:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    afc4:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    afc8:	2200      	movs	r2, #0
    afca:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    afce:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    afd2:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    afd6:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    afda:	685b      	ldr	r3, [r3, #4]
    afdc:	f013 0f10 	tst.w	r3, #16
    afe0:	d102      	bne.n	afe8 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    afe2:	2301      	movs	r3, #1
    afe4:	60a3      	str	r3, [r4, #8]
}
    afe6:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    afe8:	2101      	movs	r1, #1
    afea:	f7ff ffd8 	bl	af9e <uarte_enable>
    p_reg->INTENSET = mask;
    afee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    aff2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    aff6:	e7f4      	b.n	afe2 <tx_start+0x28>

0000aff8 <uart_disable>:
	const struct uarte_nrfx_config *config = dev->config;
    aff8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    affa:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    affc:	2200      	movs	r2, #0
    affe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    b002:	4770      	bx	lr

0000b004 <uarte_nrfx_rx_counting_init>:
	const struct uarte_nrfx_config *cfg = dev->config;
    b004:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b006:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    b008:	2204      	movs	r2, #4
    b00a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b00e:	2000      	movs	r0, #0
    b010:	4770      	bx	lr

0000b012 <start_tx_locked>:
{
    b012:	b538      	push	{r3, r4, r5, lr}
    b014:	4605      	mov	r5, r0
    b016:	460c      	mov	r4, r1
	if (!is_tx_ready(dev)) {
    b018:	f7ff ffad 	bl	af76 <is_tx_ready>
    b01c:	b920      	cbnz	r0, b028 <start_tx_locked+0x16>
		data->async->pending_tx = true;
    b01e:	68e3      	ldr	r3, [r4, #12]
    b020:	2201      	movs	r2, #1
    b022:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    b026:	bd38      	pop	{r3, r4, r5, pc}
		data->async->pending_tx = false;
    b028:	68e3      	ldr	r3, [r4, #12]
    b02a:	2200      	movs	r2, #0
    b02c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    b030:	68e3      	ldr	r3, [r4, #12]
    b032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b036:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    b03a:	68e3      	ldr	r3, [r4, #12]
    b03c:	695a      	ldr	r2, [r3, #20]
    b03e:	6919      	ldr	r1, [r3, #16]
    b040:	4628      	mov	r0, r5
    b042:	f7ff ffba 	bl	afba <tx_start>
}
    b046:	e7ee      	b.n	b026 <start_tx_locked+0x14>

0000b048 <user_callback>:
{
    b048:	b508      	push	{r3, lr}
	struct uarte_nrfx_data *data = dev->data;
    b04a:	6903      	ldr	r3, [r0, #16]
	if (data->async->user_callback) {
    b04c:	68da      	ldr	r2, [r3, #12]
    b04e:	6813      	ldr	r3, [r2, #0]
    b050:	b10b      	cbz	r3, b056 <user_callback+0xe>
		data->async->user_callback(dev, evt, data->async->user_data);
    b052:	6852      	ldr	r2, [r2, #4]
    b054:	4798      	blx	r3
}
    b056:	bd08      	pop	{r3, pc}

0000b058 <notify_uart_rx_rdy>:
{
    b058:	b500      	push	{lr}
    b05a:	b087      	sub	sp, #28
	struct uarte_nrfx_data *data = dev->data;
    b05c:	6902      	ldr	r2, [r0, #16]
	struct uart_event evt = {
    b05e:	2300      	movs	r3, #0
    b060:	9301      	str	r3, [sp, #4]
    b062:	9302      	str	r3, [sp, #8]
    b064:	9303      	str	r3, [sp, #12]
    b066:	9304      	str	r3, [sp, #16]
    b068:	9305      	str	r3, [sp, #20]
    b06a:	2302      	movs	r3, #2
    b06c:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    b070:	68d3      	ldr	r3, [r2, #12]
    b072:	6e1a      	ldr	r2, [r3, #96]	; 0x60
	struct uart_event evt = {
    b074:	9202      	str	r2, [sp, #8]
		.data.rx.offset = data->async->rx_offset
    b076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	struct uart_event evt = {
    b078:	9303      	str	r3, [sp, #12]
    b07a:	9104      	str	r1, [sp, #16]
	user_callback(dev, &evt);
    b07c:	a901      	add	r1, sp, #4
    b07e:	f7ff ffe3 	bl	b048 <user_callback>
}
    b082:	b007      	add	sp, #28
    b084:	f85d fb04 	ldr.w	pc, [sp], #4

0000b088 <rx_buf_release>:
	if (*buf) {
    b088:	680b      	ldr	r3, [r1, #0]
    b08a:	b19b      	cbz	r3, b0b4 <rx_buf_release+0x2c>
{
    b08c:	b530      	push	{r4, r5, lr}
    b08e:	b087      	sub	sp, #28
    b090:	460c      	mov	r4, r1
		struct uart_event evt = {
    b092:	2500      	movs	r5, #0
    b094:	9501      	str	r5, [sp, #4]
    b096:	9502      	str	r5, [sp, #8]
    b098:	9503      	str	r5, [sp, #12]
    b09a:	9504      	str	r5, [sp, #16]
    b09c:	9505      	str	r5, [sp, #20]
    b09e:	2304      	movs	r3, #4
    b0a0:	f88d 3004 	strb.w	r3, [sp, #4]
			.data.rx_buf.buf = *buf,
    b0a4:	680b      	ldr	r3, [r1, #0]
		struct uart_event evt = {
    b0a6:	9302      	str	r3, [sp, #8]
		user_callback(dev, &evt);
    b0a8:	a901      	add	r1, sp, #4
    b0aa:	f7ff ffcd 	bl	b048 <user_callback>
		*buf = NULL;
    b0ae:	6025      	str	r5, [r4, #0]
}
    b0b0:	b007      	add	sp, #28
    b0b2:	bd30      	pop	{r4, r5, pc}
    b0b4:	4770      	bx	lr

0000b0b6 <notify_rx_disable>:
{
    b0b6:	b500      	push	{lr}
    b0b8:	b087      	sub	sp, #28
	struct uart_event evt = {
    b0ba:	2300      	movs	r3, #0
    b0bc:	9301      	str	r3, [sp, #4]
    b0be:	9302      	str	r3, [sp, #8]
    b0c0:	9303      	str	r3, [sp, #12]
    b0c2:	9304      	str	r3, [sp, #16]
    b0c4:	9305      	str	r3, [sp, #20]
    b0c6:	2305      	movs	r3, #5
    b0c8:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    b0cc:	a901      	add	r1, sp, #4
    b0ce:	f7ff ffbb 	bl	b048 <user_callback>
}
    b0d2:	b007      	add	sp, #28
    b0d4:	f85d fb04 	ldr.w	pc, [sp], #4

0000b0d8 <uarte_nrfx_rx_buf_rsp>:
{
    b0d8:	b430      	push	{r4, r5}
	struct uarte_nrfx_data *data = dev->data;
    b0da:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    b0dc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b0de:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    b0e0:	f04f 0020 	mov.w	r0, #32
    b0e4:	f3ef 8c11 	mrs	ip, BASEPRI
    b0e8:	f380 8812 	msr	BASEPRI_MAX, r0
    b0ec:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    b0f0:	68e0      	ldr	r0, [r4, #12]
    b0f2:	6e05      	ldr	r5, [r0, #96]	; 0x60
    b0f4:	b1ad      	cbz	r5, b122 <uarte_nrfx_rx_buf_rsp+0x4a>
	} else if (data->async->rx_next_buf == NULL) {
    b0f6:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    b0f8:	b9b5      	cbnz	r5, b128 <uarte_nrfx_rx_buf_rsp+0x50>
		data->async->rx_next_buf = buf;
    b0fa:	66c1      	str	r1, [r0, #108]	; 0x6c
		data->async->rx_next_buf_len = len;
    b0fc:	68e0      	ldr	r0, [r4, #12]
    b0fe:	6702      	str	r2, [r0, #112]	; 0x70
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b100:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    b104:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    b108:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    b10c:	f042 0220 	orr.w	r2, r2, #32
    b110:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		err = 0;
    b114:	2000      	movs	r0, #0
	__asm__ volatile(
    b116:	f38c 8811 	msr	BASEPRI, ip
    b11a:	f3bf 8f6f 	isb	sy
}
    b11e:	bc30      	pop	{r4, r5}
    b120:	4770      	bx	lr
		err = -EACCES;
    b122:	f06f 000c 	mvn.w	r0, #12
    b126:	e7f6      	b.n	b116 <uarte_nrfx_rx_buf_rsp+0x3e>
		err = -EBUSY;
    b128:	f06f 000f 	mvn.w	r0, #15
    b12c:	e7f3      	b.n	b116 <uarte_nrfx_rx_buf_rsp+0x3e>

0000b12e <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    b12e:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
    b130:	68d8      	ldr	r0, [r3, #12]
    b132:	b120      	cbz	r0, b13e <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
    b134:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
    b136:	68db      	ldr	r3, [r3, #12]
    b138:	605a      	str	r2, [r3, #4]
	return 0;
    b13a:	2000      	movs	r0, #0
    b13c:	4770      	bx	lr
		return -ENOTSUP;
    b13e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    b142:	4770      	bx	lr

0000b144 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = dev->data;
    b144:	6902      	ldr	r2, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    b146:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b148:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
    b14a:	68d0      	ldr	r0, [r2, #12]
    b14c:	b960      	cbnz	r0, b168 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b14e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b152:	b160      	cbz	r0, b16e <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    b154:	7d52      	ldrb	r2, [r2, #21]
    b156:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b158:	2000      	movs	r0, #0
    b15a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    b15e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b162:	2201      	movs	r2, #1
    b164:	601a      	str	r2, [r3, #0]
	return 0;
    b166:	4770      	bx	lr
		return -ENOTSUP;
    b168:	f06f 0085 	mvn.w	r0, #133	; 0x85
    b16c:	4770      	bx	lr
		return -1;
    b16e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    b172:	4770      	bx	lr

0000b174 <wait_tx_ready>:
{
    b174:	b570      	push	{r4, r5, r6, lr}
    b176:	4606      	mov	r6, r0
    b178:	e014      	b.n	b1a4 <wait_tx_ready+0x30>
		if (res) {
    b17a:	b17d      	cbz	r5, b19c <wait_tx_ready+0x28>
	__asm__ volatile(
    b17c:	f04f 0320 	mov.w	r3, #32
    b180:	f3ef 8411 	mrs	r4, BASEPRI
    b184:	f383 8812 	msr	BASEPRI_MAX, r3
    b188:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    b18c:	4630      	mov	r0, r6
    b18e:	f7ff fef2 	bl	af76 <is_tx_ready>
    b192:	b9a0      	cbnz	r0, b1be <wait_tx_ready+0x4a>
	__asm__ volatile(
    b194:	f384 8811 	msr	BASEPRI, r4
    b198:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    b19c:	2021      	movs	r0, #33	; 0x21
    b19e:	2100      	movs	r1, #0
    b1a0:	f7fe f95c 	bl	945c <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    b1a4:	2464      	movs	r4, #100	; 0x64
    b1a6:	4630      	mov	r0, r6
    b1a8:	f7ff fee5 	bl	af76 <is_tx_ready>
    b1ac:	4605      	mov	r5, r0
    b1ae:	2800      	cmp	r0, #0
    b1b0:	d1e3      	bne.n	b17a <wait_tx_ready+0x6>
    b1b2:	2001      	movs	r0, #1
    b1b4:	f000 fc7e 	bl	bab4 <nrfx_busy_wait>
    b1b8:	3c01      	subs	r4, #1
    b1ba:	d1f4      	bne.n	b1a6 <wait_tx_ready+0x32>
    b1bc:	e7dd      	b.n	b17a <wait_tx_ready+0x6>
}
    b1be:	4620      	mov	r0, r4
    b1c0:	bd70      	pop	{r4, r5, r6, pc}

0000b1c2 <uarte_nrfx_rx_disable>:
{
    b1c2:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    b1c4:	6905      	ldr	r5, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    b1c6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b1c8:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    b1ca:	68eb      	ldr	r3, [r5, #12]
    b1cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    b1ce:	b1ba      	cbz	r2, b200 <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
    b1d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    b1d2:	b153      	cbz	r3, b1ea <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    b1d4:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    b1d8:	f023 0320 	bic.w	r3, r3, #32
    b1dc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b1e0:	2300      	movs	r3, #0
    b1e2:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    b1e6:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
    b1ea:	68e8      	ldr	r0, [r5, #12]
    b1ec:	3088      	adds	r0, #136	; 0x88
	z_impl_k_timer_stop(timer);
    b1ee:	f000 fd92 	bl	bd16 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    b1f2:	68eb      	ldr	r3, [r5, #12]
    b1f4:	2000      	movs	r0, #0
    b1f6:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b1fa:	2301      	movs	r3, #1
    b1fc:	6063      	str	r3, [r4, #4]
}
    b1fe:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    b200:	f06f 000d 	mvn.w	r0, #13
    b204:	e7fb      	b.n	b1fe <uarte_nrfx_rx_disable+0x3c>

0000b206 <error_isr>:
{
    b206:	b510      	push	{r4, lr}
    b208:	b086      	sub	sp, #24
    b20a:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    b20c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b20e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    b210:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    b214:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
	struct uart_event evt = {
    b218:	2300      	movs	r3, #0
    b21a:	9301      	str	r3, [sp, #4]
    b21c:	9302      	str	r3, [sp, #8]
    b21e:	9303      	str	r3, [sp, #12]
    b220:	9304      	str	r3, [sp, #16]
    b222:	9305      	str	r3, [sp, #20]
    b224:	2306      	movs	r3, #6
    b226:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    b22a:	f012 0f01 	tst.w	r2, #1
    b22e:	d108      	bne.n	b242 <error_isr+0x3c>
    b230:	f012 0f02 	tst.w	r2, #2
    b234:	d111      	bne.n	b25a <error_isr+0x54>
    b236:	f012 0f04 	tst.w	r2, #4
    b23a:	d110      	bne.n	b25e <error_isr+0x58>
    b23c:	f002 0208 	and.w	r2, r2, #8
    b240:	e000      	b.n	b244 <error_isr+0x3e>
    b242:	2201      	movs	r2, #1
	struct uart_event evt = {
    b244:	f88d 2008 	strb.w	r2, [sp, #8]
	user_callback(dev, &evt);
    b248:	a901      	add	r1, sp, #4
    b24a:	4620      	mov	r0, r4
    b24c:	f7ff fefc 	bl	b048 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    b250:	4620      	mov	r0, r4
    b252:	f7ff ffb6 	bl	b1c2 <uarte_nrfx_rx_disable>
}
    b256:	b006      	add	sp, #24
    b258:	bd10      	pop	{r4, pc}
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    b25a:	2202      	movs	r2, #2
    b25c:	e7f2      	b.n	b244 <error_isr+0x3e>
    b25e:	2204      	movs	r2, #4
    b260:	e7f0      	b.n	b244 <error_isr+0x3e>

0000b262 <uarte_nrfx_tx_abort>:
{
    b262:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    b264:	6903      	ldr	r3, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    b266:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    b268:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
    b26a:	68da      	ldr	r2, [r3, #12]
    b26c:	6891      	ldr	r1, [r2, #8]
    b26e:	b151      	cbz	r1, b286 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
    b270:	2400      	movs	r4, #0
    b272:	f882 40d4 	strb.w	r4, [r2, #212]	; 0xd4
	k_timer_stop(&data->async->tx_timeout_timer);
    b276:	68d8      	ldr	r0, [r3, #12]
    b278:	3028      	adds	r0, #40	; 0x28
    b27a:	f000 fd4c 	bl	bd16 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b27e:	2301      	movs	r3, #1
    b280:	60eb      	str	r3, [r5, #12]
	return 0;
    b282:	4620      	mov	r0, r4
}
    b284:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    b286:	f06f 000d 	mvn.w	r0, #13
    b28a:	e7fb      	b.n	b284 <uarte_nrfx_tx_abort+0x22>

0000b28c <tx_timeout>:
{
    b28c:	b508      	push	{r3, lr}
	return timer->user_data;
    b28e:	6b43      	ldr	r3, [r0, #52]	; 0x34
	(void) uarte_nrfx_tx_abort(data->dev);
    b290:	6818      	ldr	r0, [r3, #0]
    b292:	f7ff ffe6 	bl	b262 <uarte_nrfx_tx_abort>
}
    b296:	bd08      	pop	{r3, pc}

0000b298 <rx_timeout>:
{
    b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b29a:	6b44      	ldr	r4, [r0, #52]	; 0x34
	const struct device *dev = data->dev;
    b29c:	6826      	ldr	r6, [r4, #0]
	const struct uarte_nrfx_config *cfg = dev->config;
    b29e:	6872      	ldr	r2, [r6, #4]
	if (data->async->is_in_irq) {
    b2a0:	68e3      	ldr	r3, [r4, #12]
    b2a2:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
    b2a6:	2b00      	cmp	r3, #0
    b2a8:	d138      	bne.n	b31c <rx_timeout+0x84>
    b2aa:	f003 07ff 	and.w	r7, r3, #255	; 0xff
	return config->uarte_regs;
    b2ae:	6813      	ldr	r3, [r2, #0]
    p_reg->INTENCLR = mask;
    b2b0:	2210      	movs	r2, #16
    b2b2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    b2b6:	68e3      	ldr	r3, [r4, #12]
    b2b8:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    b2bc:	6f59      	ldr	r1, [r3, #116]	; 0x74
    b2be:	4291      	cmp	r1, r2
    b2c0:	d004      	beq.n	b2cc <rx_timeout+0x34>
		data->async->rx_total_byte_cnt = read;
    b2c2:	675a      	str	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    b2c4:	68e3      	ldr	r3, [r4, #12]
    b2c6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    b2c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	int32_t len = data->async->rx_total_byte_cnt
    b2cc:	68e3      	ldr	r3, [r4, #12]
    b2ce:	6f5d      	ldr	r5, [r3, #116]	; 0x74
		    - data->async->rx_total_user_byte_cnt;
    b2d0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
	if (!HW_RX_COUNTING_ENABLED(data) &&
    b2d2:	1aad      	subs	r5, r5, r2
    b2d4:	d423      	bmi.n	b31e <rx_timeout+0x86>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    b2d6:	68e3      	ldr	r3, [r4, #12]
    b2d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    b2da:	18a8      	adds	r0, r5, r2
    b2dc:	6e59      	ldr	r1, [r3, #100]	; 0x64
    b2de:	4288      	cmp	r0, r1
    b2e0:	d901      	bls.n	b2e6 <rx_timeout+0x4e>
		len = data->async->rx_buf_len - data->async->rx_offset;
    b2e2:	1a8d      	subs	r5, r1, r2
		clipped = true;
    b2e4:	2701      	movs	r7, #1
	if (len > 0) {
    b2e6:	2d00      	cmp	r5, #0
    b2e8:	dd13      	ble.n	b312 <rx_timeout+0x7a>
		if (clipped ||
    b2ea:	b92f      	cbnz	r7, b2f8 <rx_timeout+0x60>
			(data->async->rx_timeout_left
    b2ec:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
				< data->async->rx_timeout_slab)) {
    b2f0:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		if (clipped ||
    b2f4:	428a      	cmp	r2, r1
    b2f6:	da16      	bge.n	b326 <rx_timeout+0x8e>
			notify_uart_rx_rdy(dev, len);
    b2f8:	4629      	mov	r1, r5
    b2fa:	4630      	mov	r0, r6
    b2fc:	f7ff feac 	bl	b058 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    b300:	68e2      	ldr	r2, [r4, #12]
    b302:	6e93      	ldr	r3, [r2, #104]	; 0x68
    b304:	442b      	add	r3, r5
    b306:	6693      	str	r3, [r2, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    b308:	68e2      	ldr	r2, [r4, #12]
    b30a:	6f93      	ldr	r3, [r2, #120]	; 0x78
    b30c:	442b      	add	r3, r5
    b30e:	6793      	str	r3, [r2, #120]	; 0x78
		if (clipped) {
    b310:	b96f      	cbnz	r7, b32e <rx_timeout+0x96>
	const struct uarte_nrfx_config *config = dev->config;
    b312:	6873      	ldr	r3, [r6, #4]
	return config->uarte_regs;
    b314:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    b316:	2210      	movs	r2, #16
    b318:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b31c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    b31e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		len = 0;
    b322:	2500      	movs	r5, #0
    b324:	e7d7      	b.n	b2d6 <rx_timeout+0x3e>
			data->async->rx_timeout_left -=
    b326:	1a52      	subs	r2, r2, r1
    b328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    b32c:	e7f0      	b.n	b310 <rx_timeout+0x78>
			k_timer_stop(&data->async->rx_timeout_timer);
    b32e:	68e0      	ldr	r0, [r4, #12]
    b330:	3088      	adds	r0, #136	; 0x88
    b332:	f000 fcf0 	bl	bd16 <z_impl_k_timer_stop>
}
    b336:	e7ec      	b.n	b312 <rx_timeout+0x7a>

0000b338 <endrx_isr>:
{
    b338:	b570      	push	{r4, r5, r6, lr}
    b33a:	4605      	mov	r5, r0
	struct uarte_nrfx_data *data = dev->data;
    b33c:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    b33e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b340:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    b342:	68e3      	ldr	r3, [r4, #12]
    b344:	2201      	movs	r2, #1
    b346:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	k_timer_stop(&data->async->rx_timeout_timer);
    b34a:	68e0      	ldr	r0, [r4, #12]
    b34c:	3088      	adds	r0, #136	; 0x88
	z_impl_k_timer_stop(timer);
    b34e:	f000 fce2 	bl	bd16 <z_impl_k_timer_stop>
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    b352:	f8d6 253c 	ldr.w	r2, [r6, #1340]	; 0x53c
				data->async->rx_flush_cnt;
    b356:	68e3      	ldr	r3, [r4, #12]
    b358:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
	const int rx_amount = nrf_uarte_rx_amount_get(uarte) +
    b35c:	4411      	add	r1, r2
	data->async->rx_flush_cnt = 0;
    b35e:	2200      	movs	r2, #0
    b360:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    b364:	68e3      	ldr	r3, [r4, #12]
    b366:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	if (rx_len < 0) {
    b368:	1a89      	subs	r1, r1, r2
    b36a:	d40b      	bmi.n	b384 <endrx_isr+0x4c>
	data->async->rx_total_user_byte_cnt += rx_len;
    b36c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
    b36e:	440a      	add	r2, r1
    b370:	679a      	str	r2, [r3, #120]	; 0x78
	if (rx_len > 0) {
    b372:	2900      	cmp	r1, #0
    b374:	dc08      	bgt.n	b388 <endrx_isr+0x50>
	if (!data->async->rx_enabled) {
    b376:	68e1      	ldr	r1, [r4, #12]
    b378:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    b37c:	b943      	cbnz	r3, b390 <endrx_isr+0x58>
		data->async->is_in_irq = false;
    b37e:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
}
    b382:	bd70      	pop	{r4, r5, r6, pc}
		rx_len = 0;
    b384:	2100      	movs	r1, #0
    b386:	e7f1      	b.n	b36c <endrx_isr+0x34>
		notify_uart_rx_rdy(dev, rx_len);
    b388:	4628      	mov	r0, r5
    b38a:	f7ff fe65 	bl	b058 <notify_uart_rx_rdy>
    b38e:	e7f2      	b.n	b376 <endrx_isr+0x3e>
	rx_buf_release(dev, &data->async->rx_buf);
    b390:	3160      	adds	r1, #96	; 0x60
    b392:	4628      	mov	r0, r5
    b394:	f7ff fe78 	bl	b088 <rx_buf_release>
	__asm__ volatile(
    b398:	f04f 0320 	mov.w	r3, #32
    b39c:	f3ef 8111 	mrs	r1, BASEPRI
    b3a0:	f383 8812 	msr	BASEPRI_MAX, r3
    b3a4:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    b3a8:	68e3      	ldr	r3, [r4, #12]
    b3aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    b3ac:	b1f2      	cbz	r2, b3ec <endrx_isr+0xb4>
		data->async->rx_buf = data->async->rx_next_buf;
    b3ae:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    b3b0:	68e3      	ldr	r3, [r4, #12]
    b3b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    b3b4:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    b3b6:	68e2      	ldr	r2, [r4, #12]
    b3b8:	2300      	movs	r3, #0
    b3ba:	66d3      	str	r3, [r2, #108]	; 0x6c
		data->async->rx_next_buf_len = 0;
    b3bc:	68e2      	ldr	r2, [r4, #12]
    b3be:	6713      	str	r3, [r2, #112]	; 0x70
		data->async->rx_offset = 0;
    b3c0:	68e2      	ldr	r2, [r4, #12]
    b3c2:	6693      	str	r3, [r2, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b3c4:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    b3c8:	b90b      	cbnz	r3, b3ce <endrx_isr+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b3ca:	2301      	movs	r3, #1
    b3cc:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    b3ce:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    b3d2:	f023 0320 	bic.w	r3, r3, #32
    b3d6:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    b3da:	f381 8811 	msr	BASEPRI, r1
    b3de:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    b3e2:	68e3      	ldr	r3, [r4, #12]
    b3e4:	2200      	movs	r2, #0
    b3e6:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    b3ea:	e7ca      	b.n	b382 <endrx_isr+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b3ec:	2301      	movs	r3, #1
    b3ee:	6073      	str	r3, [r6, #4]
}
    b3f0:	e7f3      	b.n	b3da <endrx_isr+0xa2>

0000b3f2 <setup_tx_cache>:
{
    b3f2:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    b3f4:	68c3      	ldr	r3, [r0, #12]
    b3f6:	68da      	ldr	r2, [r3, #12]
    b3f8:	6a19      	ldr	r1, [r3, #32]
	if (!remaining) {
    b3fa:	1a52      	subs	r2, r2, r1
    b3fc:	d010      	beq.n	b420 <setup_tx_cache+0x2e>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    b3fe:	2a08      	cmp	r2, #8
    b400:	bf28      	it	cs
    b402:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    b404:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
    b406:	68c3      	ldr	r3, [r0, #12]
    b408:	f103 0118 	add.w	r1, r3, #24
    b40c:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    b40e:	68c0      	ldr	r0, [r0, #12]
    b410:	6881      	ldr	r1, [r0, #8]
    b412:	6a03      	ldr	r3, [r0, #32]
    b414:	4419      	add	r1, r3
    b416:	3018      	adds	r0, #24
    b418:	f000 fca0 	bl	bd5c <memcpy>
	return true;
    b41c:	2001      	movs	r0, #1
}
    b41e:	bd08      	pop	{r3, pc}
		return false;
    b420:	2000      	movs	r0, #0
    b422:	e7fc      	b.n	b41e <setup_tx_cache+0x2c>

0000b424 <z_log_msg2_runtime_create>:
{
    b424:	b510      	push	{r4, lr}
    b426:	b086      	sub	sp, #24
	va_start(ap, fmt);
    b428:	ac0b      	add	r4, sp, #44	; 0x2c
    b42a:	9405      	str	r4, [sp, #20]
    b42c:	9403      	str	r4, [sp, #12]
    b42e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b430:	9402      	str	r4, [sp, #8]
    b432:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b434:	9401      	str	r4, [sp, #4]
    b436:	9c08      	ldr	r4, [sp, #32]
    b438:	9400      	str	r4, [sp, #0]
    b43a:	f7f7 f82b 	bl	2494 <z_impl_z_log_msg2_runtime_vcreate>
}
    b43e:	b006      	add	sp, #24
    b440:	bd10      	pop	{r4, pc}

0000b442 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    b442:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b446:	b083      	sub	sp, #12
    b448:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    b44a:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    b44c:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    b44e:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    b452:	2100      	movs	r1, #0
    b454:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    b458:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    b45c:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    b460:	aa01      	add	r2, sp, #4
    b462:	4648      	mov	r0, r9
    b464:	f000 fa72 	bl	b94c <pinctrl_lookup_state>
	if (ret < 0) {
    b468:	1e04      	subs	r4, r0, #0
    b46a:	db07      	blt.n	b47c <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    b46c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    b46e:	f8d9 2000 	ldr.w	r2, [r9]
    b472:	7919      	ldrb	r1, [r3, #4]
    b474:	6818      	ldr	r0, [r3, #0]
    b476:	f7f9 fddf 	bl	5038 <pinctrl_configure_pins>
    b47a:	4604      	mov	r4, r0
	if (err < 0) {
    b47c:	2c00      	cmp	r4, #0
    b47e:	db2c      	blt.n	b4da <uarte_instance_init+0x98>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    b480:	f108 0104 	add.w	r1, r8, #4
    b484:	4628      	mov	r0, r5
    b486:	f7ff fd13 	bl	aeb0 <uarte_nrfx_configure>
	if (err) {
    b48a:	4604      	mov	r4, r0
    b48c:	bb28      	cbnz	r0, b4da <uarte_instance_init+0x98>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    b48e:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    b490:	f013 0f02 	tst.w	r3, #2
    b494:	d125      	bne.n	b4e2 <uarte_instance_init+0xa0>
		}
	}


#ifdef UARTE_ANY_ASYNC
	if (data->async) {
    b496:	f8d8 300c 	ldr.w	r3, [r8, #12]
    b49a:	b353      	cbz	r3, b4f2 <uarte_instance_init+0xb0>
		err = uarte_nrfx_init(dev);
    b49c:	4628      	mov	r0, r5
    b49e:	f7f9 fad9 	bl	4a54 <uarte_nrfx_init>
		if (err < 0) {
    b4a2:	2800      	cmp	r0, #0
    b4a4:	db38      	blt.n	b518 <uarte_instance_init+0xd6>
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    b4a6:	687b      	ldr	r3, [r7, #4]
    b4a8:	f013 0f02 	tst.w	r3, #2
    b4ac:	d103      	bne.n	b4b6 <uarte_instance_init+0x74>
    p_reg->INTENSET = mask;
    b4ae:	f44f 7380 	mov.w	r3, #256	; 0x100
    b4b2:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b4b6:	687b      	ldr	r3, [r7, #4]
    b4b8:	f013 0f10 	tst.w	r3, #16
    b4bc:	d003      	beq.n	b4c6 <uarte_instance_init+0x84>
    b4be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b4c2:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    b4c6:	f108 0314 	add.w	r3, r8, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    b4ca:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    b4ce:	2300      	movs	r3, #0
    b4d0:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b4d4:	2301      	movs	r3, #1
    b4d6:	60b3      	str	r3, [r6, #8]
    b4d8:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    b4da:	4620      	mov	r0, r4
    b4dc:	b003      	add	sp, #12
    b4de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    b4e2:	4641      	mov	r1, r8
    b4e4:	4630      	mov	r0, r6
    b4e6:	f7f9 fa81 	bl	49ec <endtx_stoptx_ppi_init>
		if (err < 0) {
    b4ea:	2800      	cmp	r0, #0
    b4ec:	dad3      	bge.n	b496 <uarte_instance_init+0x54>
			return err;
    b4ee:	4604      	mov	r4, r0
    b4f0:	e7f3      	b.n	b4da <uarte_instance_init+0x98>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    b4f2:	2308      	movs	r3, #8
    b4f4:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
		if (!cfg->disable_rx) {
    b4f8:	7a3b      	ldrb	r3, [r7, #8]
    b4fa:	2b00      	cmp	r3, #0
    b4fc:	d1d3      	bne.n	b4a6 <uarte_instance_init+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b4fe:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    b502:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    b506:	f108 0315 	add.w	r3, r8, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b50a:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    b50e:	2301      	movs	r3, #1
    b510:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b514:	6033      	str	r3, [r6, #0]
}
    b516:	e7c6      	b.n	b4a6 <uarte_instance_init+0x64>
			return err;
    b518:	4604      	mov	r4, r0
    b51a:	e7de      	b.n	b4da <uarte_instance_init+0x98>

0000b51c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    b51c:	b510      	push	{r4, lr}
    b51e:	4604      	mov	r4, r0
    b520:	2200      	movs	r2, #0
    b522:	2101      	movs	r1, #1
    b524:	2002      	movs	r0, #2
    b526:	f7f7 fc43 	bl	2db0 <z_arm_irq_priority_set>
    b52a:	2002      	movs	r0, #2
    b52c:	f7f7 fc24 	bl	2d78 <arch_irq_enable>
    b530:	2100      	movs	r1, #0
    b532:	4620      	mov	r0, r4
    b534:	f7ff ff85 	bl	b442 <uarte_instance_init>
    b538:	bd10      	pop	{r4, pc}

0000b53a <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    b53a:	b510      	push	{r4, lr}
    b53c:	4604      	mov	r4, r0
    b53e:	2200      	movs	r2, #0
    b540:	2101      	movs	r1, #1
    b542:	2028      	movs	r0, #40	; 0x28
    b544:	f7f7 fc34 	bl	2db0 <z_arm_irq_priority_set>
    b548:	2028      	movs	r0, #40	; 0x28
    b54a:	f7f7 fc15 	bl	2d78 <arch_irq_enable>
    b54e:	2100      	movs	r1, #0
    b550:	4620      	mov	r0, r4
    b552:	f7ff ff76 	bl	b442 <uarte_instance_init>
    b556:	bd10      	pop	{r4, pc}

0000b558 <rx_flush>:
{
    b558:	b5f0      	push	{r4, r5, r6, r7, lr}
    b55a:	b083      	sub	sp, #12
	const struct uarte_nrfx_config *config = dev->config;
    b55c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b55e:	681c      	ldr	r4, [r3, #0]
    return p_reg->RXD.AMOUNT;
    b560:	f8d4 753c 	ldr.w	r7, [r4, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    b564:	460d      	mov	r5, r1
    b566:	b311      	cbz	r1, b5ae <rx_flush+0x56>
    b568:	4616      	mov	r6, r2
	if (buf) {
    b56a:	b315      	cbz	r5, b5b2 <rx_flush+0x5a>
__ssp_bos_icheck3(memset, void *, int)
    b56c:	2100      	movs	r1, #0
    b56e:	4628      	mov	r0, r5
    b570:	f000 fc02 	bl	bd78 <memset>
		flush_buf = buf;
    b574:	462b      	mov	r3, r5
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    b576:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    b57a:	f8c4 6538 	str.w	r6, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b57e:	2300      	movs	r3, #0
    b580:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    b584:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b588:	2301      	movs	r3, #1
    b58a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b58c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    b590:	2b00      	cmp	r3, #0
    b592:	d0fb      	beq.n	b58c <rx_flush+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b594:	2300      	movs	r3, #0
    b596:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    b59a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (!buf) {
    b59e:	b155      	cbz	r5, b5b6 <rx_flush+0x5e>
    return p_reg->RXD.AMOUNT;
    b5a0:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
	if (rx_amount != prev_rx_amount) {
    b5a4:	4287      	cmp	r7, r0
    b5a6:	d00c      	beq.n	b5c2 <rx_flush+0x6a>
		return rx_amount;
    b5a8:	b2c0      	uxtb	r0, r0
}
    b5aa:	b003      	add	sp, #12
    b5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    b5ae:	2605      	movs	r6, #5
    b5b0:	e7db      	b.n	b56a <rx_flush+0x12>
		flush_buf = tmp_buf;
    b5b2:	466b      	mov	r3, sp
    b5b4:	e7df      	b.n	b576 <rx_flush+0x1e>
    b5b6:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
		return nrf_uarte_rx_amount_get(uarte);
    b5ba:	b2c0      	uxtb	r0, r0
    b5bc:	e7f5      	b.n	b5aa <rx_flush+0x52>
			return rx_amount;
    b5be:	b2c0      	uxtb	r0, r0
    b5c0:	e7f3      	b.n	b5aa <rx_flush+0x52>
	for (int i = 0; i < flush_len; i++) {
    b5c2:	2300      	movs	r3, #0
    b5c4:	42b3      	cmp	r3, r6
    b5c6:	d204      	bcs.n	b5d2 <rx_flush+0x7a>
		if (buf[i] != dirty) {
    b5c8:	5cea      	ldrb	r2, [r5, r3]
    b5ca:	2a00      	cmp	r2, #0
    b5cc:	d1f7      	bne.n	b5be <rx_flush+0x66>
	for (int i = 0; i < flush_len; i++) {
    b5ce:	3301      	adds	r3, #1
    b5d0:	e7f8      	b.n	b5c4 <rx_flush+0x6c>
	return 0;
    b5d2:	2000      	movs	r0, #0
    b5d4:	e7e9      	b.n	b5aa <rx_flush+0x52>

0000b5d6 <async_uart_release>:
{
    b5d6:	b570      	push	{r4, r5, r6, lr}
    b5d8:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    b5da:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
    b5dc:	f04f 0320 	mov.w	r3, #32
    b5e0:	f3ef 8611 	mrs	r6, BASEPRI
    b5e4:	f383 8812 	msr	BASEPRI_MAX, r3
    b5e8:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    b5ec:	68d0      	ldr	r0, [r2, #12]
    b5ee:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
    b5f2:	ea23 0301 	bic.w	r3, r3, r1
    b5f6:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    b5fa:	68d5      	ldr	r5, [r2, #12]
    b5fc:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    b600:	b923      	cbnz	r3, b60c <async_uart_release+0x36>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    b602:	2902      	cmp	r1, #2
    b604:	d007      	beq.n	b616 <async_uart_release+0x40>
		uart_disable(dev);
    b606:	4620      	mov	r0, r4
    b608:	f7ff fcf6 	bl	aff8 <uart_disable>
	__asm__ volatile(
    b60c:	f386 8811 	msr	BASEPRI, r6
    b610:	f3bf 8f6f 	isb	sy
}
    b614:	bd70      	pop	{r4, r5, r6, pc}
				rx_flush(dev, data->async->rx_flush_buffer,
    b616:	2205      	movs	r2, #5
    b618:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    b61c:	4620      	mov	r0, r4
    b61e:	f7ff ff9b 	bl	b558 <rx_flush>
			data->async->rx_flush_cnt =
    b622:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
    b626:	e7ee      	b.n	b606 <async_uart_release+0x30>

0000b628 <txstopped_isr>:
{
    b628:	b5f0      	push	{r4, r5, r6, r7, lr}
    b62a:	b087      	sub	sp, #28
    b62c:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    b62e:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    b630:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
    b632:	681f      	ldr	r7, [r3, #0]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b634:	685b      	ldr	r3, [r3, #4]
    b636:	f013 0f10 	tst.w	r3, #16
    b63a:	d147      	bne.n	b6cc <txstopped_isr+0xa4>
	if (!data->async->tx_buf) {
    b63c:	68e3      	ldr	r3, [r4, #12]
    b63e:	689b      	ldr	r3, [r3, #8]
    b640:	2b00      	cmp	r3, #0
    b642:	d041      	beq.n	b6c8 <txstopped_isr+0xa0>
	__asm__ volatile(
    b644:	f04f 0320 	mov.w	r3, #32
    b648:	f3ef 8211 	mrs	r2, BASEPRI
    b64c:	f383 8812 	msr	BASEPRI_MAX, r3
    b650:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    b654:	68e3      	ldr	r3, [r4, #12]
    b656:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    b65a:	2900      	cmp	r1, #0
    b65c:	db42      	blt.n	b6e4 <txstopped_isr+0xbc>
    b65e:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
	__asm__ volatile(
    b662:	f382 8811 	msr	BASEPRI, r2
    b666:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    b66a:	68e3      	ldr	r3, [r4, #12]
    b66c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
    b670:	2a00      	cmp	r2, #0
    b672:	d13a      	bne.n	b6ea <txstopped_isr+0xc2>
	if (data->async->tx_buf != data->async->xfer_buf) {
    b674:	6899      	ldr	r1, [r3, #8]
    b676:	691a      	ldr	r2, [r3, #16]
    b678:	4291      	cmp	r1, r2
    b67a:	d004      	beq.n	b686 <txstopped_isr+0x5e>
		if (amount == data->async->xfer_len) {
    b67c:	695a      	ldr	r2, [r3, #20]
    b67e:	42b2      	cmp	r2, r6
    b680:	d044      	beq.n	b70c <txstopped_isr+0xe4>
			amount += data->async->tx_cache_offset;
    b682:	6a1b      	ldr	r3, [r3, #32]
    b684:	441e      	add	r6, r3
	k_timer_stop(&data->async->tx_timeout_timer);
    b686:	68e0      	ldr	r0, [r4, #12]
    b688:	3028      	adds	r0, #40	; 0x28
    b68a:	f000 fb44 	bl	bd16 <z_impl_k_timer_stop>
	struct uart_event evt = {
    b68e:	2300      	movs	r3, #0
    b690:	9301      	str	r3, [sp, #4]
    b692:	9302      	str	r3, [sp, #8]
    b694:	9303      	str	r3, [sp, #12]
    b696:	9304      	str	r3, [sp, #16]
    b698:	9305      	str	r3, [sp, #20]
		.data.tx.buf = data->async->tx_buf,
    b69a:	68e3      	ldr	r3, [r4, #12]
    b69c:	689a      	ldr	r2, [r3, #8]
	struct uart_event evt = {
    b69e:	9202      	str	r2, [sp, #8]
    b6a0:	9603      	str	r6, [sp, #12]
	if (amount == data->async->tx_size) {
    b6a2:	68db      	ldr	r3, [r3, #12]
    b6a4:	42b3      	cmp	r3, r6
    b6a6:	d002      	beq.n	b6ae <txstopped_isr+0x86>
		evt.type = UART_TX_ABORTED;
    b6a8:	2301      	movs	r3, #1
    b6aa:	f88d 3004 	strb.w	r3, [sp, #4]
    p_reg->INTENCLR = mask;
    b6ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b6b2:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    b6b6:	68e2      	ldr	r2, [r4, #12]
    b6b8:	2300      	movs	r3, #0
    b6ba:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
    b6bc:	68e2      	ldr	r2, [r4, #12]
    b6be:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
    b6c0:	a901      	add	r1, sp, #4
    b6c2:	4628      	mov	r0, r5
    b6c4:	f7ff fcc0 	bl	b048 <user_callback>
}
    b6c8:	b007      	add	sp, #28
    b6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b6cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    b6d0:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    b6d4:	2101      	movs	r1, #1
    b6d6:	f7ff ff7e 	bl	b5d6 <async_uart_release>
		if (!data->async->tx_size) {
    b6da:	68e3      	ldr	r3, [r4, #12]
    b6dc:	68db      	ldr	r3, [r3, #12]
    b6de:	2b00      	cmp	r3, #0
    b6e0:	d1ac      	bne.n	b63c <txstopped_isr+0x14>
    b6e2:	e7f1      	b.n	b6c8 <txstopped_isr+0xa0>
    return p_reg->TXD.AMOUNT;
    b6e4:	f8d7 654c 	ldr.w	r6, [r7, #1356]	; 0x54c
    b6e8:	e7bb      	b.n	b662 <txstopped_isr+0x3a>
	__asm__ volatile(
    b6ea:	f04f 0320 	mov.w	r3, #32
    b6ee:	f3ef 8611 	mrs	r6, BASEPRI
    b6f2:	f383 8812 	msr	BASEPRI_MAX, r3
    b6f6:	f3bf 8f6f 	isb	sy
		start_tx_locked(dev, data);
    b6fa:	4621      	mov	r1, r4
    b6fc:	4628      	mov	r0, r5
    b6fe:	f7ff fc88 	bl	b012 <start_tx_locked>
	__asm__ volatile(
    b702:	f386 8811 	msr	BASEPRI, r6
    b706:	f3bf 8f6f 	isb	sy
		return;
    b70a:	e7dd      	b.n	b6c8 <txstopped_isr+0xa0>
			data->async->tx_cache_offset += amount;
    b70c:	6a1a      	ldr	r2, [r3, #32]
    b70e:	4432      	add	r2, r6
    b710:	621a      	str	r2, [r3, #32]
			if (setup_tx_cache(data)) {
    b712:	4620      	mov	r0, r4
    b714:	f7ff fe6d 	bl	b3f2 <setup_tx_cache>
    b718:	b910      	cbnz	r0, b720 <txstopped_isr+0xf8>
			amount = data->async->tx_cache_offset;
    b71a:	68e3      	ldr	r3, [r4, #12]
    b71c:	6a1e      	ldr	r6, [r3, #32]
    b71e:	e7b2      	b.n	b686 <txstopped_isr+0x5e>
	__asm__ volatile(
    b720:	f04f 0320 	mov.w	r3, #32
    b724:	f3ef 8611 	mrs	r6, BASEPRI
    b728:	f383 8812 	msr	BASEPRI_MAX, r3
    b72c:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    b730:	4621      	mov	r1, r4
    b732:	4628      	mov	r0, r5
    b734:	f7ff fc6d 	bl	b012 <start_tx_locked>
	__asm__ volatile(
    b738:	f386 8811 	msr	BASEPRI, r6
    b73c:	f3bf 8f6f 	isb	sy
				return;
    b740:	e7c2      	b.n	b6c8 <txstopped_isr+0xa0>

0000b742 <rxto_isr>:
{
    b742:	b570      	push	{r4, r5, r6, lr}
    b744:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    b746:	6846      	ldr	r6, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    b748:	6905      	ldr	r5, [r0, #16]
	rx_buf_release(dev, &data->async->rx_buf);
    b74a:	68e9      	ldr	r1, [r5, #12]
    b74c:	3160      	adds	r1, #96	; 0x60
    b74e:	f7ff fc9b 	bl	b088 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
    b752:	68e9      	ldr	r1, [r5, #12]
    b754:	316c      	adds	r1, #108	; 0x6c
    b756:	4620      	mov	r0, r4
    b758:	f7ff fc96 	bl	b088 <rx_buf_release>
	if (data->async->rx_enabled) {
    b75c:	68eb      	ldr	r3, [r5, #12]
    b75e:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
    b762:	b152      	cbz	r2, b77a <rxto_isr+0x38>
		data->async->rx_enabled = false;
    b764:	2200      	movs	r2, #0
    b766:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    b76a:	6873      	ldr	r3, [r6, #4]
    b76c:	f013 0f10 	tst.w	r3, #16
    b770:	d109      	bne.n	b786 <rxto_isr+0x44>
	notify_rx_disable(dev);
    b772:	4620      	mov	r0, r4
    b774:	f7ff fc9f 	bl	b0b6 <notify_rx_disable>
}
    b778:	bd70      	pop	{r4, r5, r6, pc}
		(void)rx_flush(dev, NULL, 0);
    b77a:	2200      	movs	r2, #0
    b77c:	4611      	mov	r1, r2
    b77e:	4620      	mov	r0, r4
    b780:	f7ff feea 	bl	b558 <rx_flush>
    b784:	e7f1      	b.n	b76a <rxto_isr+0x28>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    b786:	2102      	movs	r1, #2
    b788:	4620      	mov	r0, r4
    b78a:	f7ff ff24 	bl	b5d6 <async_uart_release>
    b78e:	e7f0      	b.n	b772 <rxto_isr+0x30>

0000b790 <uarte_nrfx_isr_async>:
{
    b790:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    b792:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    b794:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    b796:	6902      	ldr	r2, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b798:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
	if (!HW_RX_COUNTING_ENABLED(data)
    b79c:	bb5b      	cbnz	r3, b7f6 <uarte_nrfx_isr_async+0x66>
    b79e:	4605      	mov	r5, r0
    b7a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    b7a4:	bb9b      	cbnz	r3, b80e <uarte_nrfx_isr_async+0x7e>
    b7a6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    b7aa:	b123      	cbz	r3, b7b6 <uarte_nrfx_isr_async+0x26>
    return p_reg->INTENSET & mask;
    b7ac:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    b7b0:	f013 0f10 	tst.w	r3, #16
    b7b4:	d133      	bne.n	b81e <uarte_nrfx_isr_async+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b7b6:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    b7ba:	b113      	cbz	r3, b7c2 <uarte_nrfx_isr_async+0x32>
    b7bc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    b7c0:	b3b3      	cbz	r3, b830 <uarte_nrfx_isr_async+0xa0>
    b7c2:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    b7c6:	b113      	cbz	r3, b7ce <uarte_nrfx_isr_async+0x3e>
    b7c8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    b7cc:	b3c3      	cbz	r3, b840 <uarte_nrfx_isr_async+0xb0>
    b7ce:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    b7d2:	b123      	cbz	r3, b7de <uarte_nrfx_isr_async+0x4e>
    return p_reg->INTENSET & mask;
    b7d4:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    b7d8:	f413 7f80 	tst.w	r3, #256	; 0x100
    b7dc:	d138      	bne.n	b850 <uarte_nrfx_isr_async+0xc0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b7de:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    b7e2:	b19b      	cbz	r3, b80c <uarte_nrfx_isr_async+0x7c>
    return p_reg->INTENSET & mask;
    b7e4:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    b7e8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    b7ec:	d00e      	beq.n	b80c <uarte_nrfx_isr_async+0x7c>
		txstopped_isr(dev);
    b7ee:	4628      	mov	r0, r5
    b7f0:	f7ff ff1a 	bl	b628 <txstopped_isr>
    b7f4:	e00a      	b.n	b80c <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b7f6:	2300      	movs	r3, #0
    b7f8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    b7fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    b800:	68d2      	ldr	r2, [r2, #12]
    b802:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    b806:	3301      	adds	r3, #1
    b808:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
    b80c:	bd38      	pop	{r3, r4, r5, pc}
    b80e:	2300      	movs	r3, #0
    b810:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    b814:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
		error_isr(dev);
    b818:	f7ff fcf5 	bl	b206 <error_isr>
    b81c:	e7c3      	b.n	b7a6 <uarte_nrfx_isr_async+0x16>
    b81e:	2300      	movs	r3, #0
    b820:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    b824:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		endrx_isr(dev);
    b828:	4628      	mov	r0, r5
    b82a:	f7ff fd85 	bl	b338 <endrx_isr>
    b82e:	e7c2      	b.n	b7b6 <uarte_nrfx_isr_async+0x26>
    b830:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    b834:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		rxstarted_isr(dev);
    b838:	4628      	mov	r0, r5
    b83a:	f7f9 f89d 	bl	4978 <rxstarted_isr>
    b83e:	e7c0      	b.n	b7c2 <uarte_nrfx_isr_async+0x32>
    b840:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    b844:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		rxto_isr(dev);
    b848:	4628      	mov	r0, r5
    b84a:	f7ff ff7a 	bl	b742 <rxto_isr>
    b84e:	e7be      	b.n	b7ce <uarte_nrfx_isr_async+0x3e>
		endtx_isr(dev);
    b850:	4628      	mov	r0, r5
    b852:	f7ff fb14 	bl	ae7e <endtx_isr>
    b856:	e7c2      	b.n	b7de <uarte_nrfx_isr_async+0x4e>

0000b858 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    b858:	4770      	bx	lr

0000b85a <counter_sub>:
	return (a - b) & COUNTER_MAX;
    b85a:	1a40      	subs	r0, r0, r1
}
    b85c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b860:	4770      	bx	lr

0000b862 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    b862:	f100 0350 	add.w	r3, r0, #80	; 0x50
    b866:	009b      	lsls	r3, r3, #2
    b868:	b29b      	uxth	r3, r3
    b86a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b86e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    b872:	2200      	movs	r2, #0
    b874:	601a      	str	r2, [r3, #0]
    b876:	681b      	ldr	r3, [r3, #0]
}
    b878:	4770      	bx	lr

0000b87a <absolute_time_to_cc>:
}
    b87a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b87e:	4770      	bx	lr

0000b880 <full_int_lock>:
	__asm__ volatile(
    b880:	f04f 0320 	mov.w	r3, #32
    b884:	f3ef 8011 	mrs	r0, BASEPRI
    b888:	f383 8812 	msr	BASEPRI_MAX, r3
    b88c:	f3bf 8f6f 	isb	sy
}
    b890:	4770      	bx	lr

0000b892 <full_int_unlock>:
	__asm__ volatile(
    b892:	f380 8811 	msr	BASEPRI, r0
    b896:	f3bf 8f6f 	isb	sy
}
    b89a:	4770      	bx	lr

0000b89c <set_absolute_alarm>:
{
    b89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b89e:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    b8a0:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    b8a4:	f7f9 f924 	bl	4af0 <get_comparator>
    b8a8:	4607      	mov	r7, r0
    b8aa:	e019      	b.n	b8e0 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    b8ac:	2013      	movs	r0, #19
    b8ae:	f000 fa20 	bl	bcf2 <z_impl_k_busy_wait>
}
    b8b2:	e022      	b.n	b8fa <set_absolute_alarm+0x5e>
		event_clear(chan);
    b8b4:	4630      	mov	r0, r6
    b8b6:	f7ff ffd4 	bl	b862 <event_clear>
		event_enable(chan);
    b8ba:	4630      	mov	r0, r6
    b8bc:	f7f9 f920 	bl	4b00 <event_enable>
		set_comparator(chan, cc_val);
    b8c0:	4629      	mov	r1, r5
    b8c2:	4630      	mov	r0, r6
    b8c4:	f7f9 f90a 	bl	4adc <set_comparator>
		now2 = counter();
    b8c8:	f7f9 f92e 	bl	4b28 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    b8cc:	4284      	cmp	r4, r0
    b8ce:	d01e      	beq.n	b90e <set_absolute_alarm+0x72>
    b8d0:	1c81      	adds	r1, r0, #2
    b8d2:	4628      	mov	r0, r5
    b8d4:	f7ff ffc1 	bl	b85a <counter_sub>
	} while ((now2 != now) &&
    b8d8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b8dc:	d917      	bls.n	b90e <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    b8de:	462f      	mov	r7, r5
		now = counter();
    b8e0:	f7f9 f922 	bl	4b28 <counter>
    b8e4:	4604      	mov	r4, r0
		set_comparator(chan, now);
    b8e6:	4601      	mov	r1, r0
    b8e8:	4630      	mov	r0, r6
    b8ea:	f7f9 f8f7 	bl	4adc <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    b8ee:	4621      	mov	r1, r4
    b8f0:	4638      	mov	r0, r7
    b8f2:	f7ff ffb2 	bl	b85a <counter_sub>
    b8f6:	2801      	cmp	r0, #1
    b8f8:	d0d8      	beq.n	b8ac <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    b8fa:	1ca7      	adds	r7, r4, #2
    b8fc:	4639      	mov	r1, r7
    b8fe:	4628      	mov	r0, r5
    b900:	f7ff ffab 	bl	b85a <counter_sub>
    b904:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b908:	d9d4      	bls.n	b8b4 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    b90a:	463d      	mov	r5, r7
    b90c:	e7d2      	b.n	b8b4 <set_absolute_alarm+0x18>
}
    b90e:	4628      	mov	r0, r5
    b910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b912 <compare_set>:
{
    b912:	b5f0      	push	{r4, r5, r6, r7, lr}
    b914:	b083      	sub	sp, #12
    b916:	4604      	mov	r4, r0
    b918:	4617      	mov	r7, r2
    b91a:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    b91c:	f7f9 f90a 	bl	4b34 <compare_int_lock>
    b920:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    b922:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b924:	9301      	str	r3, [sp, #4]
    b926:	9b08      	ldr	r3, [sp, #32]
    b928:	9300      	str	r3, [sp, #0]
    b92a:	463a      	mov	r2, r7
    b92c:	462b      	mov	r3, r5
    b92e:	4620      	mov	r0, r4
    b930:	f7f9 f9f0 	bl	4d14 <compare_set_nolocks>
    b934:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    b936:	4631      	mov	r1, r6
    b938:	4620      	mov	r0, r4
    b93a:	f7f9 f95f 	bl	4bfc <compare_int_unlock>
}
    b93e:	4628      	mov	r0, r5
    b940:	b003      	add	sp, #12
    b942:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b944 <sys_clock_cycle_get_32>:
{
    b944:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    b946:	f7f9 f9c5 	bl	4cd4 <z_nrf_rtc_timer_read>
}
    b94a:	bd08      	pop	{r3, pc}

0000b94c <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    b94c:	b410      	push	{r4}
	*state = &config->states[0];
    b94e:	6843      	ldr	r3, [r0, #4]
    b950:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    b952:	e001      	b.n	b958 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    b954:	3408      	adds	r4, #8
    b956:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    b958:	6814      	ldr	r4, [r2, #0]
    b95a:	7a03      	ldrb	r3, [r0, #8]
    b95c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    b960:	3b01      	subs	r3, #1
    b962:	f8d0 c004 	ldr.w	ip, [r0, #4]
    b966:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    b96a:	429c      	cmp	r4, r3
    b96c:	d804      	bhi.n	b978 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    b96e:	7963      	ldrb	r3, [r4, #5]
    b970:	428b      	cmp	r3, r1
    b972:	d1ef      	bne.n	b954 <pinctrl_lookup_state+0x8>
			return 0;
    b974:	2000      	movs	r0, #0
    b976:	e001      	b.n	b97c <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    b978:	f06f 0001 	mvn.w	r0, #1
}
    b97c:	bc10      	pop	{r4}
    b97e:	4770      	bx	lr

0000b980 <z_log_msg2_runtime_create>:
{
    b980:	b510      	push	{r4, lr}
    b982:	b086      	sub	sp, #24
	va_start(ap, fmt);
    b984:	ac0b      	add	r4, sp, #44	; 0x2c
    b986:	9405      	str	r4, [sp, #20]
    b988:	9403      	str	r4, [sp, #12]
    b98a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b98c:	9402      	str	r4, [sp, #8]
    b98e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b990:	9401      	str	r4, [sp, #4]
    b992:	9c08      	ldr	r4, [sp, #32]
    b994:	9400      	str	r4, [sp, #0]
    b996:	f7f6 fd7d 	bl	2494 <z_impl_z_log_msg2_runtime_vcreate>
}
    b99a:	b006      	add	sp, #24
    b99c:	bd10      	pop	{r4, pc}

0000b99e <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    b99e:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    b9a0:	f7fe fbb0 	bl	a104 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    b9a4:	bd08      	pop	{r3, pc}

0000b9a6 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    b9a6:	b510      	push	{r4, lr}
    b9a8:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    b9aa:	f7f7 f8a7 	bl	2afc <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    b9ae:	f7f7 f967 	bl	2c80 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    b9b2:	4620      	mov	r0, r4
    b9b4:	f7ff fff3 	bl	b99e <hw_cc3xx_init_internal>
	return res;
}
    b9b8:	bd10      	pop	{r4, pc}

0000b9ba <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    b9ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b9be:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    b9c2:	2b08      	cmp	r3, #8
    b9c4:	d001      	beq.n	b9ca <nrf52_errata_36+0x10>
        return false;
    b9c6:	2000      	movs	r0, #0
    b9c8:	4770      	bx	lr
                        return true;
    b9ca:	2001      	movs	r0, #1
}
    b9cc:	4770      	bx	lr

0000b9ce <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    b9ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b9d2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    b9d6:	2b08      	cmp	r3, #8
    b9d8:	d001      	beq.n	b9de <nrf52_errata_66+0x10>
        return false;
    b9da:	2000      	movs	r0, #0
    b9dc:	4770      	bx	lr
                        return true;
    b9de:	2001      	movs	r0, #1
}
    b9e0:	4770      	bx	lr

0000b9e2 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    b9e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    b9e6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    b9ea:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    b9ee:	2a08      	cmp	r2, #8
    b9f0:	d001      	beq.n	b9f6 <nrf52_errata_98+0x14>
        return false;
    b9f2:	2000      	movs	r0, #0
    b9f4:	4770      	bx	lr
                switch(var2)
    b9f6:	2b00      	cmp	r3, #0
    b9f8:	d804      	bhi.n	ba04 <nrf52_errata_98+0x22>
    b9fa:	e8df f003 	tbb	[pc, r3]
    b9fe:	01          	.byte	0x01
    b9ff:	00          	.byte	0x00
    ba00:	2001      	movs	r0, #1
    ba02:	4770      	bx	lr
                        return false;
    ba04:	2000      	movs	r0, #0
}
    ba06:	4770      	bx	lr

0000ba08 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ba08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ba0c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ba10:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    ba14:	2a08      	cmp	r2, #8
    ba16:	d001      	beq.n	ba1c <nrf52_errata_103+0x14>
        return false;
    ba18:	2000      	movs	r0, #0
    ba1a:	4770      	bx	lr
                switch(var2)
    ba1c:	2b00      	cmp	r3, #0
    ba1e:	d804      	bhi.n	ba2a <nrf52_errata_103+0x22>
    ba20:	e8df f003 	tbb	[pc, r3]
    ba24:	01          	.byte	0x01
    ba25:	00          	.byte	0x00
    ba26:	2001      	movs	r0, #1
    ba28:	4770      	bx	lr
                        return false;
    ba2a:	2000      	movs	r0, #0
}
    ba2c:	4770      	bx	lr

0000ba2e <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ba2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ba32:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ba36:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    ba3a:	2a08      	cmp	r2, #8
    ba3c:	d001      	beq.n	ba42 <nrf52_errata_115+0x14>
        return false;
    ba3e:	2000      	movs	r0, #0
    ba40:	4770      	bx	lr
                switch(var2)
    ba42:	2b00      	cmp	r3, #0
    ba44:	d804      	bhi.n	ba50 <nrf52_errata_115+0x22>
    ba46:	e8df f003 	tbb	[pc, r3]
    ba4a:	01          	.byte	0x01
    ba4b:	00          	.byte	0x00
    ba4c:	2001      	movs	r0, #1
    ba4e:	4770      	bx	lr
                        return false;
    ba50:	2000      	movs	r0, #0
}
    ba52:	4770      	bx	lr

0000ba54 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ba54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ba58:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ba5c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    ba60:	2a08      	cmp	r2, #8
    ba62:	d001      	beq.n	ba68 <nrf52_errata_120+0x14>
        return false;
    ba64:	2000      	movs	r0, #0
    ba66:	4770      	bx	lr
                switch(var2)
    ba68:	2b00      	cmp	r3, #0
    ba6a:	d804      	bhi.n	ba76 <nrf52_errata_120+0x22>
    ba6c:	e8df f003 	tbb	[pc, r3]
    ba70:	01          	.byte	0x01
    ba71:	00          	.byte	0x00
    ba72:	2001      	movs	r0, #1
    ba74:	4770      	bx	lr
                        return false;
    ba76:	2000      	movs	r0, #0
}
    ba78:	4770      	bx	lr

0000ba7a <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ba7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ba7e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    ba82:	2b08      	cmp	r3, #8
    ba84:	d001      	beq.n	ba8a <nrf52_errata_136+0x10>
        return false;
    ba86:	2000      	movs	r0, #0
    ba88:	4770      	bx	lr
                        return true;
    ba8a:	2001      	movs	r0, #1
}
    ba8c:	4770      	bx	lr

0000ba8e <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ba8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    ba92:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ba96:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    ba9a:	2a08      	cmp	r2, #8
    ba9c:	d001      	beq.n	baa2 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    ba9e:	2000      	movs	r0, #0
    baa0:	4770      	bx	lr
                switch(var2)
    baa2:	2b04      	cmp	r3, #4
    baa4:	d801      	bhi.n	baaa <nrf52_configuration_249+0x1c>
    baa6:	2000      	movs	r0, #0
    baa8:	4770      	bx	lr
                        return true;
    baaa:	2001      	movs	r0, #1
    #endif
}
    baac:	4770      	bx	lr

0000baae <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    baae:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    bab0:	4780      	blx	r0
}
    bab2:	bd08      	pop	{r3, pc}

0000bab4 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    bab4:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    bab6:	f000 f91c 	bl	bcf2 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    baba:	bd08      	pop	{r3, pc}

0000babc <clock_initial_lfclksrc_get>:
}
    babc:	2000      	movs	r0, #0
    babe:	4770      	bx	lr

0000bac0 <clock_lfclksrc_tweak>:
{
    bac0:	b538      	push	{r3, r4, r5, lr}
    bac2:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    bac4:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    bac6:	2b01      	cmp	r3, #1
    bac8:	d002      	beq.n	bad0 <clock_lfclksrc_tweak+0x10>
    baca:	b933      	cbnz	r3, bada <clock_lfclksrc_tweak+0x1a>
    bacc:	2301      	movs	r3, #1
    bace:	e000      	b.n	bad2 <clock_lfclksrc_tweak+0x12>
    bad0:	2301      	movs	r3, #1
    if (!is_correct_clk)
    bad2:	461d      	mov	r5, r3
    bad4:	b11b      	cbz	r3, bade <clock_lfclksrc_tweak+0x1e>
}
    bad6:	4628      	mov	r0, r5
    bad8:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    bada:	2300      	movs	r3, #0
    badc:	e7f9      	b.n	bad2 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    bade:	2000      	movs	r0, #0
    bae0:	f7fa f882 	bl	5be8 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    bae4:	f7ff ffea 	bl	babc <clock_initial_lfclksrc_get>
    bae8:	6020      	str	r0, [r4, #0]
    baea:	e7f4      	b.n	bad6 <clock_lfclksrc_tweak+0x16>

0000baec <pin_is_task_output>:
{
    baec:	b510      	push	{r4, lr}
    baee:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    baf0:	f7fa fa4c 	bl	5f8c <pin_is_output>
    baf4:	b128      	cbz	r0, bb02 <pin_is_task_output+0x16>
    baf6:	4620      	mov	r0, r4
    baf8:	f7fa fa32 	bl	5f60 <pin_in_use_by_te>
    bafc:	b118      	cbz	r0, bb06 <pin_is_task_output+0x1a>
    bafe:	2001      	movs	r0, #1
    bb00:	e000      	b.n	bb04 <pin_is_task_output+0x18>
    bb02:	2000      	movs	r0, #0
}
    bb04:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    bb06:	2000      	movs	r0, #0
    bb08:	e7fc      	b.n	bb04 <pin_is_task_output+0x18>

0000bb0a <pin_is_input>:
{
    bb0a:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    bb0c:	f7fa fa3e 	bl	5f8c <pin_is_output>
    bb10:	f080 0001 	eor.w	r0, r0, #1
}
    bb14:	b2c0      	uxtb	r0, r0
    bb16:	bd08      	pop	{r3, pc}

0000bb18 <gpiote_polarity_to_trigger>:
}
    bb18:	4770      	bx	lr

0000bb1a <gpiote_trigger_to_polarity>:
}
    bb1a:	4770      	bx	lr

0000bb1c <is_level>:
}
    bb1c:	2803      	cmp	r0, #3
    bb1e:	bf94      	ite	ls
    bb20:	2000      	movls	r0, #0
    bb22:	2001      	movhi	r0, #1
    bb24:	4770      	bx	lr

0000bb26 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    bb26:	b508      	push	{r3, lr}
  _DoInit();
    bb28:	f7fb f9fa 	bl	6f20 <_DoInit>
}
    bb2c:	bd08      	pop	{r3, pc}

0000bb2e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    bb2e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    bb30:	f7ff fff9 	bl	bb26 <SEGGER_RTT_Init>

	return 0;
}
    bb34:	2000      	movs	r0, #0
    bb36:	bd08      	pop	{r3, pc}

0000bb38 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    bb38:	b148      	cbz	r0, bb4e <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    bb3a:	68c3      	ldr	r3, [r0, #12]
    bb3c:	8818      	ldrh	r0, [r3, #0]
    bb3e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    bb42:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    bb46:	bf14      	ite	ne
    bb48:	2000      	movne	r0, #0
    bb4a:	2001      	moveq	r0, #1
    bb4c:	4770      	bx	lr
		return false;
    bb4e:	2000      	movs	r0, #0
}
    bb50:	4770      	bx	lr

0000bb52 <z_log_msg2_runtime_create>:
{
    bb52:	b510      	push	{r4, lr}
    bb54:	b086      	sub	sp, #24
	va_start(ap, fmt);
    bb56:	ac0b      	add	r4, sp, #44	; 0x2c
    bb58:	9405      	str	r4, [sp, #20]
    bb5a:	9403      	str	r4, [sp, #12]
    bb5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    bb5e:	9402      	str	r4, [sp, #8]
    bb60:	9c09      	ldr	r4, [sp, #36]	; 0x24
    bb62:	9401      	str	r4, [sp, #4]
    bb64:	9c08      	ldr	r4, [sp, #32]
    bb66:	9400      	str	r4, [sp, #0]
    bb68:	f7f6 fc94 	bl	2494 <z_impl_z_log_msg2_runtime_vcreate>
}
    bb6c:	b006      	add	sp, #24
    bb6e:	bd10      	pop	{r4, pc}

0000bb70 <z_early_memset>:
{
    bb70:	b508      	push	{r3, lr}
    bb72:	f000 f901 	bl	bd78 <memset>
}
    bb76:	bd08      	pop	{r3, pc}

0000bb78 <z_early_memcpy>:
{
    bb78:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    bb7a:	f000 f8ef 	bl	bd5c <memcpy>
}
    bb7e:	bd08      	pop	{r3, pc}

0000bb80 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    bb80:	6902      	ldr	r2, [r0, #16]
    bb82:	6943      	ldr	r3, [r0, #20]
    bb84:	431a      	orrs	r2, r3
    bb86:	f012 0203 	ands.w	r2, r2, #3
    bb8a:	d10d      	bne.n	bba8 <create_free_list+0x28>
	slab->free_list = NULL;
    bb8c:	2100      	movs	r1, #0
    bb8e:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    bb90:	e005      	b.n	bb9e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    bb92:	6981      	ldr	r1, [r0, #24]
    bb94:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    bb96:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
    bb98:	6901      	ldr	r1, [r0, #16]
    bb9a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    bb9c:	3201      	adds	r2, #1
    bb9e:	68c1      	ldr	r1, [r0, #12]
    bba0:	4291      	cmp	r1, r2
    bba2:	d8f6      	bhi.n	bb92 <create_free_list+0x12>
	return 0;
    bba4:	2000      	movs	r0, #0
    bba6:	4770      	bx	lr
		return -EINVAL;
    bba8:	f06f 0015 	mvn.w	r0, #21
}
    bbac:	4770      	bx	lr

0000bbae <k_mem_slab_init>:
{
    bbae:	b510      	push	{r4, lr}
    bbb0:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    bbb2:	60c3      	str	r3, [r0, #12]
	slab->block_size = block_size;
    bbb4:	6102      	str	r2, [r0, #16]
	slab->buffer = buffer;
    bbb6:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    bbb8:	2300      	movs	r3, #0
    bbba:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    bbbc:	6083      	str	r3, [r0, #8]
	rc = create_free_list(slab);
    bbbe:	f7ff ffdf 	bl	bb80 <create_free_list>
	if (rc < 0) {
    bbc2:	2800      	cmp	r0, #0
    bbc4:	db01      	blt.n	bbca <k_mem_slab_init+0x1c>
	list->head = (sys_dnode_t *)list;
    bbc6:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    bbc8:	6064      	str	r4, [r4, #4]
}
    bbca:	bd10      	pop	{r4, pc}

0000bbcc <setup_thread_stack>:
{
    bbcc:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    bbce:	3207      	adds	r2, #7
    bbd0:	f022 0207 	bic.w	r2, r2, #7
    bbd4:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    bbd8:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    bbdc:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    bbe0:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    bbe4:	2200      	movs	r2, #0
    bbe6:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    bbea:	18c8      	adds	r0, r1, r3
    bbec:	bc10      	pop	{r4}
    bbee:	4770      	bx	lr

0000bbf0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bbf0:	f3ef 8005 	mrs	r0, IPSR
}
    bbf4:	3800      	subs	r0, #0
    bbf6:	bf18      	it	ne
    bbf8:	2001      	movne	r0, #1
    bbfa:	4770      	bx	lr

0000bbfc <k_thread_name_get>:
}
    bbfc:	3074      	adds	r0, #116	; 0x74
    bbfe:	4770      	bx	lr

0000bc00 <z_impl_k_thread_start>:
{
    bc00:	b508      	push	{r3, lr}
	z_sched_start(thread);
    bc02:	f7fc fe2d 	bl	8860 <z_sched_start>
}
    bc06:	bd08      	pop	{r3, pc}

0000bc08 <z_init_thread_base>:
{
    bc08:	b410      	push	{r4}
	thread_base->pended_on = NULL;
    bc0a:	2400      	movs	r4, #0
    bc0c:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    bc0e:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    bc10:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
    bc12:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
    bc14:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    bc16:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    bc18:	61c4      	str	r4, [r0, #28]
}
    bc1a:	bc10      	pop	{r4}
    bc1c:	4770      	bx	lr

0000bc1e <z_pm_save_idle_exit>:
{
    bc1e:	b508      	push	{r3, lr}
	pm_system_resume();
    bc20:	f7f6 fd76 	bl	2710 <pm_system_resume>
	sys_clock_idle_exit();
    bc24:	f7ff fe18 	bl	b858 <sys_clock_idle_exit>
}
    bc28:	bd08      	pop	{r3, pc}

0000bc2a <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    bc2a:	4288      	cmp	r0, r1
    bc2c:	da00      	bge.n	bc30 <new_prio_for_inheritance+0x6>
    bc2e:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    bc30:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    bc34:	db01      	blt.n	bc3a <new_prio_for_inheritance+0x10>
    bc36:	4608      	mov	r0, r1
    bc38:	4770      	bx	lr
    bc3a:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    bc3e:	4770      	bx	lr

0000bc40 <adjust_owner_prio>:
{
    bc40:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    bc42:	6880      	ldr	r0, [r0, #8]
    bc44:	f990 300e 	ldrsb.w	r3, [r0, #14]
    bc48:	428b      	cmp	r3, r1
    bc4a:	d101      	bne.n	bc50 <adjust_owner_prio+0x10>
	return false;
    bc4c:	2000      	movs	r0, #0
}
    bc4e:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    bc50:	f7fc ffbc 	bl	8bcc <z_set_prio>
    bc54:	e7fb      	b.n	bc4e <adjust_owner_prio+0xe>

0000bc56 <z_impl_k_mutex_init>:
{
    bc56:	4603      	mov	r3, r0
	mutex->owner = NULL;
    bc58:	2000      	movs	r0, #0
    bc5a:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    bc5c:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    bc5e:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    bc60:	605b      	str	r3, [r3, #4]
}
    bc62:	4770      	bx	lr

0000bc64 <thread_active_elsewhere>:
}
    bc64:	2000      	movs	r0, #0
    bc66:	4770      	bx	lr

0000bc68 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    bc68:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    bc6c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    bc70:	4283      	cmp	r3, r0
    bc72:	d001      	beq.n	bc78 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    bc74:	1ac0      	subs	r0, r0, r3
    bc76:	4770      	bx	lr
	return 0;
    bc78:	2000      	movs	r0, #0
}
    bc7a:	4770      	bx	lr

0000bc7c <z_reschedule_irqlock>:
{
    bc7c:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    bc7e:	4603      	mov	r3, r0
    bc80:	b920      	cbnz	r0, bc8c <z_reschedule_irqlock+0x10>
    bc82:	f3ef 8205 	mrs	r2, IPSR
    bc86:	b942      	cbnz	r2, bc9a <z_reschedule_irqlock+0x1e>
    bc88:	2201      	movs	r2, #1
    bc8a:	e000      	b.n	bc8e <z_reschedule_irqlock+0x12>
    bc8c:	2200      	movs	r2, #0
	if (resched(key)) {
    bc8e:	b932      	cbnz	r2, bc9e <z_reschedule_irqlock+0x22>
    bc90:	f383 8811 	msr	BASEPRI, r3
    bc94:	f3bf 8f6f 	isb	sy
}
    bc98:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    bc9a:	2200      	movs	r2, #0
    bc9c:	e7f7      	b.n	bc8e <z_reschedule_irqlock+0x12>
    bc9e:	4618      	mov	r0, r3
    bca0:	f7f7 f8dc 	bl	2e5c <arch_swap>
	return ret;
    bca4:	e7f8      	b.n	bc98 <z_reschedule_irqlock+0x1c>

0000bca6 <z_priq_dumb_best>:
{
    bca6:	4603      	mov	r3, r0
	return list->head == list;
    bca8:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bcaa:	4283      	cmp	r3, r0
    bcac:	d000      	beq.n	bcb0 <z_priq_dumb_best+0xa>
}
    bcae:	4770      	bx	lr
	struct k_thread *thread = NULL;
    bcb0:	2000      	movs	r0, #0
	return thread;
    bcb2:	e7fc      	b.n	bcae <z_priq_dumb_best+0x8>

0000bcb4 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    bcb4:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    bcb6:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    bcb8:	6083      	str	r3, [r0, #8]
}
    bcba:	4770      	bx	lr

0000bcbc <remove_timeout>:
{
    bcbc:	b510      	push	{r4, lr}
    bcbe:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    bcc0:	f7fd fce4 	bl	968c <next>
    bcc4:	b148      	cbz	r0, bcda <remove_timeout+0x1e>
    bcc6:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    bcc8:	6920      	ldr	r0, [r4, #16]
    bcca:	6961      	ldr	r1, [r4, #20]
    bccc:	6913      	ldr	r3, [r2, #16]
    bcce:	181b      	adds	r3, r3, r0
    bcd0:	6950      	ldr	r0, [r2, #20]
    bcd2:	eb41 0100 	adc.w	r1, r1, r0
    bcd6:	6113      	str	r3, [r2, #16]
    bcd8:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    bcda:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    bcdc:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    bcde:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    bce0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    bce2:	2300      	movs	r3, #0
    bce4:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    bce6:	6063      	str	r3, [r4, #4]
}
    bce8:	bd10      	pop	{r4, pc}

0000bcea <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    bcea:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    bcec:	f7fd ffca 	bl	9c84 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    bcf0:	bd08      	pop	{r3, pc}

0000bcf2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    bcf2:	b900      	cbnz	r0, bcf6 <z_impl_k_busy_wait+0x4>
    bcf4:	4770      	bx	lr
{
    bcf6:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    bcf8:	f7f7 ffd4 	bl	3ca4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    bcfc:	bd08      	pop	{r3, pc}

0000bcfe <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    bcfe:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    bd00:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    bd02:	2300      	movs	r3, #0
    bd04:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    bd06:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    bd0a:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    bd0c:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    bd0e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    bd10:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    bd12:	6343      	str	r3, [r0, #52]	; 0x34
}
    bd14:	4770      	bx	lr

0000bd16 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    bd16:	b510      	push	{r4, lr}
    bd18:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    bd1a:	f7fd fdd9 	bl	98d0 <z_abort_timeout>

	if (inactive) {
    bd1e:	b9a0      	cbnz	r0, bd4a <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    bd20:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bd22:	b10b      	cbz	r3, bd28 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    bd24:	4620      	mov	r0, r4
    bd26:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    bd28:	f104 0018 	add.w	r0, r4, #24
    bd2c:	f7fd f95a 	bl	8fe4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    bd30:	b158      	cbz	r0, bd4a <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    bd32:	f7fc fd3f 	bl	87b4 <z_ready_thread>
	__asm__ volatile(
    bd36:	f04f 0320 	mov.w	r3, #32
    bd3a:	f3ef 8011 	mrs	r0, BASEPRI
    bd3e:	f383 8812 	msr	BASEPRI_MAX, r3
    bd42:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    bd46:	f7ff ff99 	bl	bc7c <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    bd4a:	bd10      	pop	{r4, pc}

0000bd4c <k_heap_init>:
{
    bd4c:	b510      	push	{r4, lr}
    bd4e:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    bd52:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    bd54:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    bd56:	f7f5 fa51 	bl	11fc <sys_heap_init>
}
    bd5a:	bd10      	pop	{r4, pc}

0000bd5c <memcpy>:
    bd5c:	440a      	add	r2, r1
    bd5e:	4291      	cmp	r1, r2
    bd60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    bd64:	d100      	bne.n	bd68 <memcpy+0xc>
    bd66:	4770      	bx	lr
    bd68:	b510      	push	{r4, lr}
    bd6a:	f811 4b01 	ldrb.w	r4, [r1], #1
    bd6e:	f803 4f01 	strb.w	r4, [r3, #1]!
    bd72:	4291      	cmp	r1, r2
    bd74:	d1f9      	bne.n	bd6a <memcpy+0xe>
    bd76:	bd10      	pop	{r4, pc}

0000bd78 <memset>:
    bd78:	4402      	add	r2, r0
    bd7a:	4603      	mov	r3, r0
    bd7c:	4293      	cmp	r3, r2
    bd7e:	d100      	bne.n	bd82 <memset+0xa>
    bd80:	4770      	bx	lr
    bd82:	f803 1b01 	strb.w	r1, [r3], #1
    bd86:	e7f9      	b.n	bd7c <memset+0x4>

0000bd88 <_calloc_r>:
    bd88:	b538      	push	{r3, r4, r5, lr}
    bd8a:	fb02 f501 	mul.w	r5, r2, r1
    bd8e:	4629      	mov	r1, r5
    bd90:	f7fe f942 	bl	a018 <_malloc_r>
    bd94:	4604      	mov	r4, r0
    bd96:	b118      	cbz	r0, bda0 <_calloc_r+0x18>
    bd98:	462a      	mov	r2, r5
    bd9a:	2100      	movs	r1, #0
    bd9c:	f7ff ffec 	bl	bd78 <memset>
    bda0:	4620      	mov	r0, r4
    bda2:	bd38      	pop	{r3, r4, r5, pc}

0000bda4 <strncpy>:
    bda4:	b510      	push	{r4, lr}
    bda6:	3901      	subs	r1, #1
    bda8:	4603      	mov	r3, r0
    bdaa:	b132      	cbz	r2, bdba <strncpy+0x16>
    bdac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    bdb0:	f803 4b01 	strb.w	r4, [r3], #1
    bdb4:	3a01      	subs	r2, #1
    bdb6:	2c00      	cmp	r4, #0
    bdb8:	d1f7      	bne.n	bdaa <strncpy+0x6>
    bdba:	441a      	add	r2, r3
    bdbc:	2100      	movs	r1, #0
    bdbe:	4293      	cmp	r3, r2
    bdc0:	d100      	bne.n	bdc4 <strncpy+0x20>
    bdc2:	bd10      	pop	{r4, pc}
    bdc4:	f803 1b01 	strb.w	r1, [r3], #1
    bdc8:	e7f9      	b.n	bdbe <strncpy+0x1a>

0000bdca <strnlen>:
    bdca:	b510      	push	{r4, lr}
    bdcc:	4602      	mov	r2, r0
    bdce:	4401      	add	r1, r0
    bdd0:	428a      	cmp	r2, r1
    bdd2:	4613      	mov	r3, r2
    bdd4:	d003      	beq.n	bdde <strnlen+0x14>
    bdd6:	781c      	ldrb	r4, [r3, #0]
    bdd8:	3201      	adds	r2, #1
    bdda:	2c00      	cmp	r4, #0
    bddc:	d1f8      	bne.n	bdd0 <strnlen+0x6>
    bdde:	1a18      	subs	r0, r3, r0
    bde0:	bd10      	pop	{r4, pc}
	...

0000bde4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    bde4:	f7f9 bde0 	b.w	59a8 <SystemInit>
